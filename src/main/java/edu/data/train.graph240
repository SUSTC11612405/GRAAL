class C{  public void toggleFlash(){  setFlashState(!mFlashState);}  }
class C{  private static String serializeDocumentInt(Document doc) throws TransformerException, IOException {  ByteArrayOutputStream s=new ByteArrayOutputStream();  TransformerFactory factory=TransformerFactory.newInstance();  Transformer transformer=factory.newTransformer();  transformer.setOutputProperty(OutputKeys.METHOD,"xml");  transformer.setOutputProperty(OutputKeys.INDENT,"yes");  DOMSource source=new DOMSource(doc);  StreamResult outputTarget=new StreamResult(s);  transformer.transform(source,outputTarget);  return s.toString("UTF8");}  }
class C{  public Node replaceNode(Closure c){  if (parent() == null) {    throw new UnsupportedOperationException("Replacing the root node is not supported");  }  appendNodes(c);  getParentList(parent()).remove(this);  this.setParent(null);  return this;}  }
class C{  private void addSubComponents(){  menuButton.setName("InternalFrameTitlePane.menuButton");  iconButton.setName("InternalFrameTitlePane.iconifyButton");  maxButton.setName("InternalFrameTitlePane.maximizeButton");  closeButton.setName("InternalFrameTitlePane.closeButton");  add(menuButton);  add(iconButton);  add(maxButton);  add(closeButton);}  }
class C{  private void updateStateView(NQueensBoard board,Metrics metrics){  Platform.runLater(null);  simPaneCtrl.waitAfterStep();}  }
class C{  public void addDEREncodedKeyValue(PublicKey pk) throws XMLSecurityException {  this.add(new DEREncodedKeyValue(this.doc,pk));}  }
class C{  public int lastIndexOf(StrMatcher matcher){  return lastIndexOf(matcher,size);}  }
class C{  public Builder compress(){  return set("compress",1);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case GamlPackage.ACTION_ARGUMENTS__ARGS:    return ((InternalEList<?>)getArgs()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  out.writeUTF(serializedData);  if (certs == null) {    out.writeInt(0);  } else {    out.writeInt(certs.length);    for (int i=0; i < certs.length; i++) {      out.writeObject(certs[i]);    }  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public boolean isUpdate(){  boolean is;  if (m_editFlag == FolderEditFlag.UPDATE)   is=true; else   is=false;  return is;}  }
class C{  public synchronized void internalRemoveRelationship(Primitive type,Primitive target){  Relationship relationship=getRelationship(type,target);  if (relationship != null) {    internalRemoveRelationship(relationship);  }}  }
class C{  public boolean hasAnnotation(Class clz){  return false;}  }
class C{  private void endList(boolean orderedList){  if (!mParagraphStyles.isEmpty()) {    AccumulatedParagraphStyle style=mParagraphStyles.peek();    ParagraphType type=style.getType();    if ((orderedList && (type.isNumbering() || type == ParagraphType.INDENTATION_OL)) || (!orderedList && (type.isBullet() || type == ParagraphType.INDENTATION_UL))) {      int indent=style.getRelativeIndent();      if (indent > 1) {        style.setRelativeIndent(indent - 1);        style.setAbsoluteIndent(style.getAbsoluteIndent() - 1);      } else {        mParagraphStyles.pop();      }    } else {      mParagraphStyles.pop();      endList(orderedList);    }  }}  }
class C{  public static GregorianCalendar createCalendar(){  return new GregorianCalendar();}  }
class C{  public static List<String> toNames(Collection<NamedPartition> collection){  List<String> partitionNames=new ArrayList<>();  for (  NamedPartition pwn : collection) {    partitionNames.add(pwn.getName());  }  return partitionNames;}  }
class C{  public boolean isOwner(){  if (owner == null) {    if (canPerform(Permission.OWNER)) {      owner=true;    } else {      owner=projectControl.isOwner();    }  }  return owner;}  }
class C{  public void emitDirect(int taskId,String streamId,List<Object> tuple,Object messageId){  delegate.emitDirect(taskId,streamId,tuple,messageId);}  }
class C{  public GenerateXmlRoutes(URI modelURI,File targetFolder,List<? extends Object> arguments) throws IOException {  initialize(modelURI,targetFolder,arguments);}  }
class C{  public CallSpec<Membership,HttpError> joinGroup(String groupId){  return Resource.<Membership,HttpError>newPostSpec(api,"/v1/groups/{group_id}/memberships",false).responseAs(single(Membership.class,"membership","member_state")).pathParam("group_id",groupId).build();}  }
class C{  private void updateButtonAvailability(){  final IStructuredSelection selection=(IStructuredSelection)tableViewer.getSelection();  final boolean hasSelection=!selection.isEmpty();  final boolean hasSingleSelection=selection.size() == 1;  if (manager instanceof MutableWorkingSetManager) {    removeButton.setEnabled(hasSelection && containsNoBuiltInWorkingSets(selection));    editButton.setEnabled(hasSingleSelection && containsNoBuiltInWorkingSets(selection));  }  if (upButton != null) {    upButton.setEnabled(canMoveUp());  }  if (downButton != null) {    downButton.setEnabled(canMoveDown());  }}  }
class C{  protected void drawZeroRangeBaseline(Graphics2D g2,Rectangle2D area){  if (isRangeZeroBaselineVisible()) {    getRenderer().drawRangeLine(g2,this,getRangeAxis(),area,0.0,this.rangeZeroBaselinePaint,this.rangeZeroBaselineStroke);  }}  }
class C{  public static boolean nodesEqual(Node node1,Node node2,boolean ignoreWhitespace){  if ((node1 == null) || (node2 == null))   return false;  if (areNonNullAndEqual(node1.getNamespaceURI(),node2.getNamespaceURI())) {    if (node1.getNodeType() == node2.getNodeType() && (areNullorEqual(node1.getNodeValue(),node2.getNodeValue(),ignoreWhitespace,false)) && (areNullorEqual(node1.getLocalName(),node2.getLocalName(),ignoreWhitespace,false)))     return true;  } else   if ((node1.getNamespaceURI() == null) && (node2.getNamespaceURI() == null)) {    if ((node1.getNodeType() == node2.getNodeType()) && (areNullorEqual(node1.getNodeValue(),node2.getNodeValue(),ignoreWhitespace,false)) && (areNullorEqual(node1.getNodeName(),node2.getNodeName(),ignoreWhitespace,false)))     return true;  }  return false;}  }
class C{  public NetMapListenerSupport(Object aSource){  source=aSource;}  }
class C{  public String upperBoundMinSupportTipText(){  return "Upper bound for minimum support. Start iteratively decreasing " + "minimum support from this value.";}  }
class C{  public boolean isFinal(){  return isFinal;}  }
class C{  public static boolean isHotSpot(){  return jvmImplName.contains("Java HotSpot(TM)");}  }
class C{  public static void main(String[] args){  LambdaFormTestCase.runTests(null,EnumSet.allOf(TestMethods.class));}  }
class C{  public Any2LsRGBRed(CachableRed src){  super(src,src.getBounds(),fixColorModel(src),fixSampleModel(src),src.getTileGridXOffset(),src.getTileGridYOffset(),null);  ColorModel srcCM=src.getColorModel();  if (srcCM == null)   return;  ColorSpace srcCS=srcCM.getColorSpace();  if (srcCS == ColorSpace.getInstance(ColorSpace.CS_sRGB))   srcIssRGB=true;}  }
class C{  public String urlstub(final boolean excludeAnchor,final boolean removeSessionID){  boolean defaultPort=false;  if (this.protocol.equals("mailto")) {    return this.userInfo + "@" + this.host;  } else   if (isHTTP()) {    if (this.port < 0 || this.port == 80) {      defaultPort=true;    }  } else   if (isHTTPS()) {    if (this.port < 0 || this.port == 443) {      defaultPort=true;    }  } else   if (isFTP()) {    if (this.port < 0 || this.port == 21) {      defaultPort=true;    }  } else   if (isSMB()) {    if (this.port < 0 || this.port == 445) {      defaultPort=true;    }  } else   if (isFile()) {    defaultPort=true;  }  String urlPath=this.getFile(excludeAnchor,removeSessionID);  String h=getHost();  final StringBuilder u=new StringBuilder(20 + urlPath.length() + ((h == null) ? 0 : h.length()));  if (h != null) {    if (this.userInfo != null && !(this.isFTP() && this.userInfo.startsWith(FTPClient.ANONYMOUS))) {      u.append(this.userInfo);      u.append("@");    }    u.append(h.toLowerCase());  }  if (!defaultPort) {    u.append(":");    u.append(this.port);  }  u.append(urlPath);  String result=u.toString();  return result;}  }
class C{  public Image(int x,int y,int radius){  super(x,y,radius);}  }
class C{  private void menuBPartner(HtmlCode html,MStore wstore){  boolean first=true;  if (wstore.isMenuAssets()) {    nl(html,first);    first=false;    a a=new a("assets.jsp");    a.setClass("menuSub");    a.addElement("My Assets");    html.addElement(a);  }  if (wstore.isMenuInvoices()) {    nl(html,first);    first=false;    a a=new a("invoices.jsp");    a.setClass("menuSub");    a.addElement("My Invoices");    html.addElement(a);  }  if (wstore.isMenuPayments()) {    nl(html,first);    first=false;    a a=new a("payments.jsp");    a.setClass("menuSub");    a.addElement("My Payments");    html.addElement(a);  }  if (wstore.isMenuOrders()) {    nl(html,first);    first=false;    a a=new a("orders.jsp");    a.setClass("menuSub");    a.addElement("My Orders");    html.addElement(a);  }  if (wstore.isMenuShipments()) {    nl(html,first);    first=false;    a a=new a("shipments.jsp");    a.setClass("menuSub");    a.addElement("My Shipments");    html.addElement(a);  }  if (wstore.isMenuRfQs()) {    nl(html,first);    first=false;    a a=new a("rfqs.jsp");    a.setClass("menuSub");    a.addElement("My RfQ's");    html.addElement(a);  }}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public AnnotationVisitor visitLocalVariableAnnotation(int typeRef,TypePath typePath,Label[] start,Label[] end,int[] index,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    return mv.visitLocalVariableAnnotation(typeRef,typePath,start,end,index,desc,visible);  }  return null;}  }
class C{  public static HttpServer startHttpServer(int port){  try {    HttpServer server=new HttpServer(port,true);    server.addHttpRequestListener(new TableListener());    return server;  } catch (  java.io.IOException e) {    Debug.output("Unable to start http server:");    return null;  }}  }
class C{  public CodeType findCodeTypeByNameType(String name,String type) throws PersistentModelException {  try {    return m_codeTypeHome.findByNameAndType(name,type);  } catch (  Exception ex) {    throw new PersistentModelException("Error finding CodeType: " + ex.getMessage());  }}  }
class C{  public static <T1,T2,T3,T4,T5,T6,T7,T8,T9,R>Promise<R> join(Promise<T1> p1,Promise<T2> p2,Promise<T3> p3,Promise<T4> p4,Promise<T5> p5,Promise<T6> p6,Promise<T7> p7,Promise<T8> p8,Promise<T9> p9,final Func9<T1,T2,T3,T4,T5,T6,T7,T8,T9,R> joinFunction){  return new Promise<R>(Observable.zip(p1.observable,p2.observable,p3.observable,p4.observable,p5.observable,p6.observable,p7.observable,p8.observable,p9.observable,joinFunction));}  }
class C{  public Escaper toEscaper(){  return new CharArrayDecorator(toArray());}  }
class C{  public LocalDate toLocalDate(int year){  return new LocalDate(year,getMonthOfYear(),getDayOfMonth(),getChronology());}  }
class C{  public static void v(String tag,String msg,Throwable tr){  println(VERBOSE,tag,msg,tr);}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,byte[] alphabet){  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=alphabet[(inBuff >>> 18)];  destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=alphabet[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  private InputStream writeRDFJSON(Model statements) throws RDFHandlerException {  StringWriter writer=new StringWriter();  RDFWriter rdfjsonWriter=new RDFJSONWriter(writer,RDFFormat.RDFJSON);  rdfjsonWriter.startRDF();  for (  Statement nextStatement : statements) {    rdfjsonWriter.handleStatement(nextStatement);  }  rdfjsonWriter.endRDF();  return new ByteArrayInputStream(writer.toString().getBytes(Charset.forName("UTF-8")));}  }
class C{  public boolean isTermsOfUseAccepted(){  return termsOfUseAccepted;}  }
class C{  @SuppressWarnings("unchecked") @SneakyThrows public <E extends Throwable>T invokeChecked(Object instance,Object... parameters) throws E {  return invoke(instance,parameters);}  }
class C{  public CrashInfo(Parcel in){  exceptionClassName=in.readString();  exceptionMessage=in.readString();  throwFileName=in.readString();  throwClassName=in.readString();  throwMethodName=in.readString();  throwLineNumber=in.readInt();  stackTrace=in.readString();}  }
class C{  public Interval(char start,char end){  this.start=start;  this.end=end;}  }
class C{  public boolean removeLabel(AbstractStorageLabel<?> label){  return labelList.remove(label);}  }
class C{  public boolean addSourceDir(String dirName){  boolean isNew=false;  for (  String dir : makeAbsoluteCwdCandidates(dirName)) {    isNew=addToListInternal(srcDirList,dir) || isNew;  }  sourceFinder=new SourceFinder(this);  return isNew;}  }
class C{  private int readNodeAddress(){  int addr=-1;  try {    addr=Integer.parseInt(nodeAddrField.getText());  } catch (  Exception e) {    statusText1.setText(rb.getString("Error5"));    statusText1.setVisible(true);    errorInStatus1=true;    resetNotes2();    return -1;  }  if ((addr < 0) || (addr > 255)) {    statusText1.setText(rb.getString("Error6"));    statusText1.setVisible(true);    errorInStatus1=true;    resetNotes2();    return -1;  }  return (addr);}  }
class C{  public static boolean initDebug(){  return StaticHelper.initOpenCV(false);}  }
class C{  public FastByteArrayOutputStream(){  buf=new byte[32];}  }
class C{  private void handleUpdateTimeMessage(){  invalidate();  if (shouldTimerBeRunning()) {    long timeMs=System.currentTimeMillis();    long delayMs=INTERACTIVE_UPDATE_RATE_MS - (timeMs % INTERACTIVE_UPDATE_RATE_MS);    updateTimeHandler.sendEmptyMessageDelayed(MSG_UPDATE_TIME,delayMs);  }}  }
class C{  private void addToQueueWithoutDuplicate(MessageKey key,Message value){  Message existingMessage=getMessage(value.message);  if (existingMessage != null) {    mMessagesList.remove(existingMessage.key);  }  mMessagesList.put(key,value);}  }
class C{  public MyRegistrationIntentService(){  super(TAG);}  }
class C{  public static void doImport(DSLContext dslContext){  dslContext.insertInto(GROUPS,GROUPS.ID,GROUPS.NAME,GROUPS.CREATEDAT,GROUPS.UPDATEDAT,GROUPS.METADATA).values(916L,"Blackops",OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond(),OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond(),"{\"app\" : \"Blackops\"}").values(917L,"Security",OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond(),OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond(),"{\"app\" : \"Security\"}").values(918L,"Web",OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond(),OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond(),"{\"app\" : \"Web\"}").values(919L,"iOS",OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond(),OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond(),"{\"app\" : \"iOSDev\"}").values(920L,"DeprecatedGroup",OffsetDateTime.parse("2013-03-12T11:23:43Z").toEpochSecond(),OffsetDateTime.parse("2013-03-12T11:23:43Z").toEpochSecond(),"{\"app\" : \"DeprecatedApp\"}").execute();  dslContext.insertInto(SECRETS,SECRETS.ID,SECRETS.NAME,SECRETS.CREATEDAT,SECRETS.UPDATEDAT,SECRETS.CURRENT).values(737L,"Nobody_PgPass",OffsetDateTime.parse("2011-09-29T15:46:00Z").toEpochSecond(),OffsetDateTime.parse("2011-09-29T15:46:00Z").toEpochSecond(),937L).values(738L,"Hacking_Password",OffsetDateTime.parse("2011-09-29T15:46:00Z").toEpochSecond(),OffsetDateTime.parse("2011-09-29T15:46:00Z").toEpochSecond(),938L).values(739L,"Database_Password",OffsetDateTime.parse("2011-09-29T15:46:00Z").toEpochSecond(),OffsetDateTime.parse("2011-09-29T15:46:00Z").toEpochSecond(),939L).values(740L,"General_Password",OffsetDateTime.parse("2011-09-29T15:46:00Z").toEpochSecond(),OffsetDateTime.parse("2011-09-29T15:46:00Z").toEpochSecond(),940L).values(741L,"NonexistentOwner_Pass",OffsetDateTime.parse("2011-09-29T15:46:00Z").toEpochSecond(),OffsetDateTime.parse("2011-09-29T15:46:00Z").toEpochSecond(),941L).values(742L,"Versioned_Password",OffsetDateTime.parse("2011-09-29T15:46:00Z").toEpochSecond(),OffsetDateTime.parse("2011-09-29T15:46:00Z").toEpochSecond(),942L).values(743L,"Deleted_Secret",OffsetDateTime.parse("2016-06-08T02:03:04Z").toEpochSecond(),OffsetDateTime.parse("2016-06-08T02:03:04Z").toEpochSecond(),null).execute();  dslContext.insertInto(SECRETS_CONTENT,SECRETS_CONTENT.ID,SECRETS_CONTENT.SECRETID,SECRETS_CONTENT.CREATEDAT,SECRETS_CONTENT.UPDATEDAT,SECRETS_CONTENT.ENCRYPTED_CONTENT,SECRETS_CONTENT.METADATA).values(937L,737L,OffsetDateTime.parse("2011-09-29T15:46:00Z").toEpochSecond(),OffsetDateTime.parse("2015-01-07T12:00:47Z").toEpochSecond(),"{\"derivationInfo\":\"Nobody_PgPass\",\"content\":\"5Eq97Y/6LMLUqH8rlXxEkOeMFmc3cYhQny0eotojNrF3DTFdQPyHVG5HeP5vzaFxqttcZkO56NvIwdD8k2xyIL5YRbCIA5MQ9LOnKN4tpnwb+Q\",\"iv\":\"jQAFJizi1MKZUcCxb6mTCA\"}","{\"mode\":\"0400\",\"owner\":\"nobody\"}").values(938L,738L,OffsetDateTime.parse("2011-09-29T15:46:00Z").toEpochSecond(),OffsetDateTime.parse("2015-01-07T12:01:59Z").toEpochSecond(),"{\"derivationInfo\":\"Hacking_Password\",\"content\":\"jpNVoXZao+b+f591w+CHWTj7D1M\",\"iv\":\"W+pT37jJP4uDGHmuczXVCA\"}","").values(939L,739L,OffsetDateTime.parse("2011-09-29T15:46:00Z").toEpochSecond(),OffsetDateTime.parse("2015-01-07T12:02:06Z").toEpochSecond(),"{\"derivationInfo\":\"Database_Password\",\"content\":\"etQQFqMHQQpGr4aDlj5gDjiABkOb\",\"iv\":\"ia+YixjAEqp9W3JEjaYLvQ\"}","").values(940L,740L,OffsetDateTime.parse("2011-09-29T15:46:00Z").toEpochSecond(),OffsetDateTime.parse("2015-01-07T12:02:06Z").toEpochSecond(),"{\"derivationInfo\":\"General_Password\",\"content\":\"A6kBLXwmx0EVtuIGTzxHiEZ/6yrXgg\",\"iv\":\"e4I0c3fog0TKqTAC2UxYtQ\"}","").values(941L,741L,OffsetDateTime.parse("2011-09-29T15:46:00Z").toEpochSecond(),OffsetDateTime.parse("2015-01-07T12:02:06Z").toEpochSecond(),"{\"derivationInfo\":\"NonexistentOwner_Pass\",\"content\":\"+Pu1B5YgqGRIHzh17s5tPT3AYb+W\",\"iv\":\"ewRV3RhFfLnbWxY5pr401g\"}","{\"owner\":\"NonExistant\",\"mode\":\"0400\"}").values(942L,742L,OffsetDateTime.parse("2011-09-29T15:46:00Z").toEpochSecond(),OffsetDateTime.parse("2015-01-07T12:02:06Z").toEpochSecond(),"{\"derivationInfo\":\"Versioned_Password\",\"content\":\"GC8/ZvEfqpxhtAkThgZ8/+vPesh9\",\"iv\":\"oRf3CMnB7jv63K33dJFeFg\"}","").values(943L,742L,OffsetDateTime.parse("2011-09-29T16:46:00Z").toEpochSecond(),OffsetDateTime.parse("2011-09-29T16:46:00Z").toEpochSecond(),"{\"derivationInfo\":\"Versioned_Password\",\"content\":\"GC8/ZvEfqpxhtAkThgZ8/+vPesh9\",\"iv\":\"oRf3CMnB7jv63K33dJFeFg\"}","").values(944L,742L,OffsetDateTime.parse("2011-09-29T17:46:00Z").toEpochSecond(),OffsetDateTime.parse("2011-09-29T17:46:00Z").toEpochSecond(),"{\"derivationInfo\":\"Versioned_Password\",\"content\":\"GC8/ZvEfqpxhtAkThgZ8/+vPesh9\",\"iv\":\"oRf3CMnB7jv63K33dJFeFg\"}","").values(945L,742L,OffsetDateTime.parse("2011-09-29T18:46:00Z").toEpochSecond(),OffsetDateTime.parse("2011-09-29T18:46:00Z").toEpochSecond(),"{\"derivationInfo\":\"Versioned_Password\",\"content\":\"GC8/ZvEfqpxhtAkThgZ8/+vPesh9\",\"iv\":\"oRf3CMnB7jv63K33dJFeFg\"}","").values(946L,743L,OffsetDateTime.parse("2016-06-08T02:03:04Z").toEpochSecond(),OffsetDateTime.parse("2016-06-08T02:03:04Z").toEpochSecond(),"{\"derivationInfo\":\"Deleted_Secret\",\"content\":\"GC8/ZvEfqpxhtAkThgZ8/+vPesh9\",\"iv\":\"oRf3CMnB7jv63K33dJFeFg\"}","").execute();  dslContext.insertInto(CLIENTS,CLIENTS.ID,CLIENTS.NAME,CLIENTS.CREATEDAT,CLIENTS.UPDATEDAT,CLIENTS.ENABLED,CLIENTS.AUTOMATIONALLOWED).values(768L,"client",OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond(),OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond(),true,true).values(769L,"CN=User1",OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond(),OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond(),true,false).values(770L,"CN=User2",OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond(),OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond(),true,false).values(771L,"CN=User3",OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond(),OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond(),true,false).values(772L,"CN=User4",OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond(),OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond(),true,false).execute();  dslContext.insertInto(ACCESSGRANTS,ACCESSGRANTS.ID,ACCESSGRANTS.GROUPID,ACCESSGRANTS.SECRETID,ACCESSGRANTS.CREATEDAT,ACCESSGRANTS.UPDATEDAT).values(617L,918L,737L,OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond(),OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond()).values(618L,917L,737L,OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond(),OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond()).values(619L,916L,738L,OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond(),OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond()).values(620L,918L,739L,OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond(),OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond()).values(621L,917L,739L,OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond(),OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond()).values(622L,918L,740L,OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond(),OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond()).values(623L,919L,740L,OffsetDateTime.parse("2012-06-21T14:38:10Z").toEpochSecond(),OffsetDateTime.parse("2012-06-21T14:38:10Z").toEpochSecond()).values(624L,916L,740L,OffsetDateTime.parse("2012-06-21T14:38:10Z").toEpochSecond(),OffsetDateTime.parse("2012-06-21T14:38:10Z").toEpochSecond()).values(625L,917L,740L,OffsetDateTime.parse("2012-06-21T14:38:10Z").toEpochSecond(),OffsetDateTime.parse("2012-06-21T14:38:10Z").toEpochSecond()).values(626L,918L,741L,OffsetDateTime.parse("2012-06-21T14:38:11Z").toEpochSecond(),OffsetDateTime.parse("2012-06-21T14:38:11Z").toEpochSecond()).values(627L,917L,741L,OffsetDateTime.parse("2012-06-21T14:38:11Z").toEpochSecond(),OffsetDateTime.parse("2012-06-21T14:38:11Z").toEpochSecond()).execute();  dslContext.insertInto(MEMBERSHIPS,MEMBERSHIPS.ID,MEMBERSHIPS.GROUPID,MEMBERSHIPS.CLIENTID,MEMBERSHIPS.CREATEDAT,MEMBERSHIPS.UPDATEDAT).values(659L,917L,768L,OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond(),OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond()).values(660L,918L,769L,OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond(),OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond()).values(661L,916L,769L,OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond(),OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond()).values(662L,917L,769L,OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond(),OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond()).values(663L,919L,770L,OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond(),OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond()).values(664L,917L,770L,OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond(),OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond()).values(665L,918L,771L,OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond(),OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond()).values(666L,919L,771L,OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond(),OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond()).values(667L,918L,772L,OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond(),OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond()).values(668L,917L,772L,OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond(),OffsetDateTime.parse("2012-06-21T14:38:09Z").toEpochSecond()).execute();  new UserDAO(dslContext).createUserAt(defaultUser,defaultPassword,OffsetDateTime.parse("2012-06-22T14:38:09Z"),OffsetDateTime.parse("2012-06-22T14:38:09Z"));}  }
class C{  public BinaryDeserializer(final byte[] bytes,final DeserializationContext context){  super(context);  this.stream=new ByteArrayInputStream(bytes);}  }
class C{  public void defineMotionX(int motionType,int startTime,int duration,int start,int end){  motionX=createMotion(motionType,startTime,duration,start,end);}  }
class C{  protected final void drawEndpoints(PointPair pp,Graphics g){  if (this.getModelEdge() != null) {    Endpoint endpointA=this.getModelEdge().getEndpoint1();    Endpoint endpointB=this.getModelEdge().getEndpoint2();    if (endpointA == Endpoint.CIRCLE) {      drawCircleEndpoint(pp.getTo(),pp.getFrom(),g);    } else     if (endpointA == Endpoint.ARROW) {      drawArrowEndpoint(pp.getTo(),pp.getFrom(),g);    }    if (endpointB == Endpoint.CIRCLE) {      drawCircleEndpoint(pp.getFrom(),pp.getTo(),g);    } else     if (endpointB == Endpoint.ARROW) {      drawArrowEndpoint(pp.getFrom(),pp.getTo(),g);    }  } else {switch (this.type) {case DIRECTED:      drawArrowEndpoint(pp.getFrom(),pp.getTo(),g);    break;case NONDIRECTED:  drawCircleEndpoint(pp.getTo(),pp.getFrom(),g);drawCircleEndpoint(pp.getFrom(),pp.getTo(),g);break;case UNDIRECTED:break;case PARTIALLY_ORIENTED:drawCircleEndpoint(pp.getTo(),pp.getFrom(),g);drawArrowEndpoint(pp.getFrom(),pp.getTo(),g);break;case BIDIRECTED:drawArrowEndpoint(pp.getFrom(),pp.getTo(),g);drawArrowEndpoint(pp.getTo(),pp.getFrom(),g);break;default :throw new IllegalArgumentException();}}}  }
class C{  public static String[] Sort(String[] inputs){}  }
class C{  public void sync() throws IOException {  if (forceSync) {    nioFile.force(false);  }}  }
class C{  public void publish(String topic,byte[] message,int qos,boolean retained) throws Exception {  setTitleText("");  if (connected) {    try {      mqtt.getTopic(topic).publish(message,qos,retained);    } catch (    MqttException ex) {      setTitleText("MQTT publish exception !");      JOptionPane.showMessageDialog(frame,ex.getClass().getName() + "\n" + ex.getMessage(),"MQTT Publish Exception",JOptionPane.ERROR_MESSAGE);      throw ex;    }  } else {    setTitleText("MQTT client not connected !");    throw new Exception("MQTT client not connected");  }}  }
class C{  private boolean isCommandKeyDown(InputEvent event){  return Utils.isMacOSX() ? event.isMetaDown() : event.isControlDown();}  }
class C{  public void addListener(final IInstructionListener listener){  m_listeners.addListener(listener);}  }
class C{  public void put(String key,Double value){  mValues.put(key,value);}  }
class C{  public static int[] readInts(String filename){  return new In(filename).readAllInts();}  }
class C{  public boolean isDecimalSeparatorAlwaysShown(){  return decimalSeparatorAlwaysShown;}  }
class C{  protected void initializeGenomeSegmentsByStartIndices(final EvolutionState state,final Parameter base,final Parameter def,int numSegments){  int previousSegmentEnd=genomeSize;  int currentSegmentEnd=0;  for (int i=numSegments - 1; i >= 0; i--) {    if (state.parameters.exists(base.push(P_SEGMENT).push("" + i).push(P_SEGMENT_START),def.push(P_SEGMENT).push("" + i).push(P_SEGMENT_START))) {      currentSegmentEnd=state.parameters.getInt(base.push(P_SEGMENT).push("" + i).push(P_SEGMENT_START),def.push(P_SEGMENT).push("" + i).push(P_SEGMENT_START));    } else {      state.output.fatal("Genome segment " + i + " has not been defined!"+ "\nYou must specify start indices for "+ numSegments+ " segment(s)",base.push(P_SEGMENT).push("" + i).push(P_SEGMENT_START),base.push(P_SEGMENT).push("" + i).push(P_SEGMENT_START));    }    if (currentSegmentEnd >= previousSegmentEnd || currentSegmentEnd < 0)     state.output.fatal("Invalid start index value for segment " + i + ": "+ currentSegmentEnd+ "\nThe value must be smaller than "+ previousSegmentEnd+ " and greater than or equal to  "+ 0);    if (i == 0 && currentSegmentEnd != 0)     state.output.fatal("Invalid start index value for the first segment " + i + ": "+ currentSegmentEnd+ "\nThe value must be equal to "+ 0);    for (int j=previousSegmentEnd - 1; j >= currentSegmentEnd; j--) {      loadParametersForGene(state,j,base.push(P_SEGMENT).push("" + i),def.push(P_SEGMENT).push("" + i),"");    }    previousSegmentEnd=currentSegmentEnd;  }}  }
class C{  private void calculateDataSets(){  final int initialPerMinCalcExclLoops=repProc.initialPerMinCalcExclTime * 16;  final Map<LineChartDataSet,Int> dataSetExcludedActionCountsMap=new HashMap<>();  final Map<DataModel<LineChartDataSet>,Int> modelLastCmdLoopsMap=new HashMap<>();  final CameraUpdateEvent[] prevCamEvents=new CameraUpdateEvent[chartsComp.getUserByUserIdEnableds().length];  for (int i=0; i < repProc.usersByUserId.length; i++)   if (repProc.usersByUserId[i] != null)   prevCamEvents[i]=repProc.usersByUserId[i].firstCamUpdateEvent;  for (  final Event event : repProc.replay.gameEvents.events) {    final DataModel<LineChartDataSet> model=modelByUserIds[event.userId];    if (model == null)     continue;    if (event.id == IGameEvents.ID_CMD) {      Int lastCmdLoop=modelLastCmdLoopsMap.get(model);      if (lastCmdLoop == null)       modelLastCmdLoopsMap.put(model,lastCmdLoop=new Int());      lastCmdLoop.value=event.loop;    }    if (event.id == IGameEvents.ID_CAMERA_UPDATE) {      final CameraUpdateEvent cue=(CameraUpdateEvent)event;      final TargetPoint point=cue.getTargetPoint();      final TargetPoint prevPoint=prevCamEvents[event.userId] == null ? null : prevCamEvents[event.userId].getTargetPoint();      if (point != null && prevPoint != null) {        final int dx=(point.getX() >> 8) - (prevPoint.getX() >> 8);        final int dy=(point.getY() >> 8) - (prevPoint.getY() >> 8);        if (dx * dx + dy * dy > 225) {          final LineChartDataSet dataSet=model.getDataSetList().get(0);          dataSet.getValues()[event.loop / granularity]++;          if (event.loop < initialPerMinCalcExclLoops || event.loop > repProc.usersByUserId[event.userId].lastCmdLoop) {            Int excludedCount=dataSetExcludedActionCountsMap.get(dataSet);            if (excludedCount == null)             dataSetExcludedActionCountsMap.put(dataSet,excludedCount=new Int());            excludedCount.value++;          }        }        prevCamEvents[event.userId]=cue;      }    }  }  for (  final Chart<LineChartDataSet> chart : chartList) {    for (    final DataModel<LineChartDataSet> model : chart.getDataModelList()) {      final Int lastCmdLoop=modelLastCmdLoopsMap.get(model);      for (      final LineChartDataSet dataSet : model.getDataSetList()) {        long total=0;        final Int excludedCount=dataSetExcludedActionCountsMap.get(dataSet);        final int[] values=dataSet.getValues();        if (values.length > 0) {          total+=values[values.length - 1];          values[values.length - 1]=repProc.calculatePerMinute(values[values.length - 1],lastGranularity);        }        for (int i=values.length - 2; i >= 0; i--) {          total+=values[i];          values[i]=repProc.calculatePerMinute(values[i],granularity);        }        final int spmLoops=lastCmdLoop == null ? 0 : lastCmdLoop.value - initialPerMinCalcExclLoops;        final double spmActions=excludedCount == null ? total : total - excludedCount.value;        final double avgSpm=repProc.calculatePerMinute(spmActions,spmLoops);        dataSet.setTitle("Screens: " + total + ",    SPM: "+ Env.LANG.formatNumber(avgSpm,2));        dataSet.calculateValueMax();      }    }  }}  }
class C{  private void initLogger(){  LoggerContext context=(LoggerContext)LoggerFactory.getILoggerFactory();  JoranConfigurator configurator=new JoranConfigurator();  configurator.setContext(context);  context.reset();  InputStream is=null;  try {    String logFileLocation=System.getProperty(LOG_FILE_PROPERTY);    if (null != logFileLocation) {      Path logPath=Paths.get(logFileLocation).toAbsolutePath();      if (Files.exists(logPath)) {        is=Files.newInputStream(logPath,StandardOpenOption.READ);      }    }    if (null == is) {      Path logPath=ResourcesPathResolver.getResourceFile(DEFAULT_LOG_FILE_NAME,runtimeDir.toFile()).toPath().toAbsolutePath();      if (Files.exists(logPath)) {        is=Files.newInputStream(logPath,StandardOpenOption.READ);      }    }    if (null != is) {      try {        configurator.doConfigure(is);      } catch (      JoranException e) {      } finally {        is.close();      }    }  } catch (  IOException e) {  }  StatusPrinter.printInCaseOfErrorsOrWarnings(context);  SysOutOverSLF4J.sendSystemOutAndErrToSLF4J();  MinlogToSLF4JLogger.init();}  }
class C{  private void computeAllAppsButtonSize(Context context){  Resources res=context.getResources();  float padding=res.getInteger(R.integer.config_allAppsButtonPaddingPercent) / 100f;  allAppsButtonVisualSize=(int)(hotseatIconSizePx * (1 - padding)) - context.getResources().getDimensionPixelSize(R.dimen.all_apps_button_scale_down);}  }
class C{  default boolean canDisplay(EntityPlayer player,E ageable,INPC npc){  return true;}  }
class C{  public static Short valueOf(short i){  return null;}  }
class C{  public static <S extends HasCellClickHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    CellClickEvent event=new CellClickEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public void assertKeyEquals(QueryResultKey key1,QueryResultKey key2){  assertNotNull(key1);  assertNotNull(key2);  assertEquals(key1.hashCode(),key2.hashCode());  assertEquals(key1,key2);  assertEquals(key2,key1);}  }
class C{  protected int findByte(byte value,int pos){  for (int i=pos; i < tail; i++) {    if (buffer[i] == value) {      return i;    }  }  return -1;}  }
class C{  private static int readCode(boolean[] rawbits,int startIndex,int length){  int res=0;  for (int i=startIndex; i < startIndex + length; i++) {    res<<=1;    if (rawbits[i]) {      res|=0x01;    }  }  return res;}  }
class C{  private void cleanUpSkeletons(final File dir){  indicateMinor(dir.getPath());  final File[] files=dir.listFiles();  if (files == null) {    return;  }  for (  File item : files) {    if (item.isDirectory()) {      cleanUpSkeletons(item);      File[] remaining=item.listFiles();      if (remaining != null && remaining.length == 0) {        mySkeletonsGenerator.deleteOrLog(item);      } else       if (remaining != null && remaining.length == 1) {        File lastFile=remaining[0];        if (PyNames.INIT_DOT_PY.equals(lastFile.getName()) && lastFile.length() == 0) {          boolean deleted=mySkeletonsGenerator.deleteOrLog(lastFile);          if (deleted)           mySkeletonsGenerator.deleteOrLog(item);        }      }    } else     if (item.isFile()) {      final String itemName=item.getName();      if (PyNames.INIT_DOT_PY.equals(itemName) && item.length() == 0)       continue;      if (BLACKLIST_FILE_NAME.equals(itemName))       continue;      if (PythonSdkType.getBuiltinsFileName(mySdk).equals(itemName)) {        continue;      }      final SkeletonHeader header=readSkeletonHeader(item);      boolean canLive=header != null;      if (canLive) {        final String binaryFile=header.getBinaryFile();        canLive=SkeletonVersionChecker.BUILTIN_NAME.equals(binaryFile) || mySkeletonsGenerator.exists(binaryFile);      }      if (!canLive) {        mySkeletonsGenerator.deleteOrLog(item);      }    }  }}  }
class C{  public static boolean isMovableModuleMember(@NotNull PsiElement element){  if (!(hasMovableElementType(element) && PyUtil.isTopLevel(element))) {    return false;  }  if (element instanceof PyTargetExpression) {    return !(PyNames.ALL.equals(((PyTargetExpression)element).getName())) && isTargetOfSimpleAssignment(element);  }  return true;}  }
class C{  protected void addToQuarantineQueue(NodePortTuple npt){  if (quarantineQueue.contains(npt) == false)   quarantineQueue.add(npt);}  }
class C{  public static byte[] toBytes(short x,byte[] bytes,int bytePos){  bytes[bytePos++]=(byte)(x);  bytes[bytePos]=(byte)(x >> 8);  return bytes;}  }
class C{  @Override protected void onDestroy(){  super.onDestroy();  Log.d(TAG,"onDestroy() - the activity is about to be destroyed");}  }
class C{  private void applyTo(ClassVisitor v,Enum<?> e){  if (Log.isLoggingOn()) {    Log.logLine(String.format("Visiting enum %s",e));  }  v.visit(e);}  }
class C{  public void testStartStopFilterPipeline() throws Exception {  SampleFilter.clearCounters();  TungstenProperties config=helper.createDoubleQueueWithFilter(1,1,-1,0,false);  ReplicatorRuntime runtime=new ReplicatorRuntime(config,new MockOpenReplicatorContext(),ReplicatorMonitor.getInstance());  Pipeline pipeline=prepareAndStartPipeline(config,runtime);  assertEquals("configured",1,SampleFilter.configured);  assertEquals("prepared",1,SampleFilter.prepared);  assertEquals("released",0,SampleFilter.released);  pipeline.shutdown(false);  pipeline.release(runtime);  assertEquals("configured",1,SampleFilter.configured);  assertEquals("prepared",1,SampleFilter.prepared);  assertEquals("released",1,SampleFilter.released);}  }
class C{  public void dispatch(JobData jobData,JobHandlerCommand command,EngineStub<?,?,?> engineStub){synchronized (jobHandlerRunnables) {    String contextId=jobData.getJob().getRootId();    JobHandlerRunnable jobHandlerRunnable=getJobs(contextId).get(jobData.getJob().getId());    if (jobHandlerRunnable == null) {      Job job=jobData.getJob();      jobHandlerRunnable=new JobHandlerRunnable(job.getId(),job.getRootId(),jobHandlerFactory.createHandler(job,engineStub));      getJobs(contextId).put(job.getId(),jobHandlerRunnable);      jobHandlerThreadExecutor.execute(jobHandlerRunnable);      logger.info("JobHandlerRunnable created for {}.",job.getId());    }    jobHandlerRunnable.addCommand(command);  }}  }
class C{  public void recordSetenceValues(Vertex word,Vertex originalWord,Collection<Relationship> relationships,int value,Vertex sentence,Map<Vertex,Integer> matches,Map<Vertex,Set<Vertex>> processed,Network network,List<Vertex> defer){  if (relationships != null) {    if ((defer != null) && relationships.size() > 100) {      log("Deferring word",Level.FINER,word,relationships.size());      defer.add(word);      return;    }    for (    Relationship sentenceRelation : relationships) {      Vertex otherSentence=sentenceRelation.getTarget();      if (sentence != otherSentence) {        if (otherSentence.hasAnyResponseRelationship()) {          Set<Vertex> processedWords=processed.get(otherSentence);          if (processedWords == null) {            processedWords=new HashSet<Vertex>(4);            processed.put(otherSentence,processedWords);          }          if (processedWords.contains(originalWord)) {            log("Already processed word for sentence",Level.FINEST,word,otherSentence);          } else {            processedWords.add(originalWord);            Integer count=matches.get(otherSentence);            if (count == null) {              count=0;            }            matches.put(otherSentence,count + value);            log("Increasing question match value",Level.FINER,otherSentence,count + value,value);          }        } else {          log("Sentence has no responses",Level.FINEST,otherSentence);        }      }    }  }}  }
class C{  private void qualifiedName(String ns,String prefix,String localName,boolean isAttribute){  prefix=choosePrefix(ns,prefix,isAttribute);  if (prefix == null)   encodedText(localName); else {    encodedText(prefix);    pp.text(":");    encodedText(localName);  }}  }
class C{  public static Validator<Object> notNull(@NonNull final Context context){  return new NotNullValidator(context,R.string.default_error_message);}  }
class C{  @Override public String toString(){  return name;}  }
class C{  protected JMenuBar createMenuBar(){  menuBar=new SystemMenuBar();  menuBar.setOpaque(false);  menuBar.setFocusable(false);  menuBar.setBorderPainted(true);  menuBar.add(createMenu());  return menuBar;}  }
class C{  public void disablePaging(){  mViewPager.setPagingEnabled(false);}  }
class C{  public JComponent createEmbeddedPropertyGUI(PropertyConsumer pc){  this.propertyConsumer=pc;  Properties props=new Properties();  props=pc.getProperties(props);  Properties info=new Properties();  info=pc.getPropertyInfo(info);  String prefix=pc.getPropertyPrefix();  return createEmbeddedPropertyGUI(prefix,props,info);}  }
class C{  public static void displayAssertionBuffer(){  String msg="Detailed matrices characteristics:\n";  for (  String cur : _AssertInfos) {    msg+=cur + "\n";  }  assertTrue(msg,!_AssertOccured);}  }
class C{  public static HttpResponse httpPost(HttpRequest request){  if (request == null) {    return null;  }  BufferedReader input=null;  HttpURLConnection con=null;  try {    URL url=new URL(request.getUrl());    try {      HttpResponse response=new HttpResponse(request.getUrl());      con=(HttpURLConnection)url.openConnection();      setURLConnection(request,con);      con.setRequestMethod("POST");      con.setDoOutput(true);      String paras=request.getParas();      if (!StringUtils.isEmpty(paras)) {        con.getOutputStream().write(paras.getBytes());      }      input=new BufferedReader(new InputStreamReader(con.getInputStream()));      StringBuilder sb=new StringBuilder();      String s;      while ((s=input.readLine()) != null) {        sb.append(s).append("\n");      }      response.setResponseBody(sb.toString());      setHttpResponse(con,response);      return response;    } catch (    IOException e) {      e.printStackTrace();    }  } catch (  MalformedURLException e1) {    e1.printStackTrace();  } finally {    if (input != null) {      try {        input.close();      } catch (      IOException e) {        e.printStackTrace();      }    }    if (con != null) {      con.disconnect();    }  }  return null;}  }
class C{  public int groupCount(){  return matcher.groupCount();}  }
class C{  @Override public String index(){  if (shardTarget != null) {    return shardTarget.index();  }  return null;}  }
class C{  private static boolean isGrouped(final PNode node){  if (node instanceof ScreenElement) {    return ((ScreenElement)node).isGrouped();  }  return false;}  }
class C{  public void fill(int fromIndex,int toIndex,double val){  if (toIndex > _pos) {    ensureCapacity(toIndex);    _pos=toIndex;  }  Arrays.fill(_data,fromIndex,toIndex,val);}  }
class C{  void eidtTodo(YokeRequest request){  request.exceptionHandler(null);  client.findOne(id(request),null);}  }
class C{  public JSONArray names(){  JSONArray ja=new JSONArray();  Iterator<String> keys=keys();  while (keys.hasNext()) {    ja.put(keys.next());  }  return ja.length() == 0 ? null : ja;}  }
class C{  synchronized public boolean hasEdge(final Object blocked,final Object running){  if (running == blocked) {    throw new IllegalArgumentException("transaction may not wait for itself");  }  int dst=lookup(running,true);  int src=lookup(blocked,true);  if (src == dst) {    throw new IllegalArgumentException("transaction may not wait for itself");  }  return W[src][dst];}  }
class C{  private static void processOneLine(LineNumberReader in,String title,double[] valueHolder) throws IOException {  String s=in.readLine();  if (VM.VerifyAssertions)   VM._assert(s != null);  StringTokenizer parser=new StringTokenizer(s);  String token=parser.nextToken();  if (VM.VerifyAssertions)   VM._assert(token.equals(title));  for (int i=0; parser.hasMoreTokens() && i < valueHolder.length; i++) {    token=parser.nextToken();    valueHolder[i]=Double.parseDouble(token);  }}  }
class C{  public static <S extends HasCloseClickHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    CloseClickEvent event=new CloseClickEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public TaskHandle addHostRefreshTask(String fullyQualifiedHostName){  Optional<InternetDomainName> tld=Registries.findTldForName(InternetDomainName.from(fullyQualifiedHostName));  checkArgument(tld.isPresent(),String.format("%s is not a subordinate host to a known tld",fullyQualifiedHostName));  return addToQueue(TargetType.HOST,fullyQualifiedHostName,tld.get().toString());}  }
class C{  public String toString(){  return "MlBayesImObs\n";}  }
class C{  @Override public int hashCode(){  int result=0;  Iterator<?> it=iterator();  while (it.hasNext()) {    Object next=it.next();    result+=next == null ? 0 : next.hashCode();  }  return result;}  }
class C{  public long[] toArray(){  long[] result=new long[size()];  long[] set=_set;  byte[] states=_states;  for (int i=states.length, j=0; i-- > 0; ) {    if (states[i] == FULL) {      result[j++]=set[i];    }  }  return result;}  }
class C{  @Override public void propertyChange(java.beans.PropertyChangeEvent e){  log.debug("TrainManager sees property change: " + e.getPropertyName() + " old: "+ e.getOldValue()+ " new "+ e.getNewValue());}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public static double minCosAngle(SpatialComparable v1,SpatialComparable v2){  if (v1 instanceof NumberVector && v2 instanceof NumberVector) {    return cosAngle((NumberVector)v1,(NumberVector)v2);  }  final int dim1=v1.getDimensionality(), dim2=v2.getDimensionality();  final int mindim=(dim1 <= dim2) ? dim1 : dim2;  double s1=0, s2=0, l1=0, l2=0;  for (int k=0; k < mindim; k++) {    final double min1=v1.getMin(k), max1=v1.getMax(k);    final double min2=v2.getMin(k), max2=v2.getMax(k);    final double p1=min1 * min2, p2=min1 * max2;    final double p3=max1 * min2, p4=max1 * max2;    s1+=Math.max(Math.max(p1,p2),Math.max(p3,p4));    s2+=Math.min(Math.min(p1,p2),Math.min(p3,p4));    if (max1 < 0) {      l1+=max1 * max1;    } else     if (min1 > 0) {      l1+=min1 * min1;    }    if (max2 < 0) {      l2+=max2 * max2;    } else     if (min2 > 0) {      l2+=min2 * min2;    }  }  for (int k=mindim; k < dim1; k++) {    final double min1=v1.getMin(k), max1=v1.getMax(k);    if (max1 < 0.) {      l1+=max1 * max1;    } else     if (min1 > 0.) {      l1+=min1 * min1;    }  }  for (int k=mindim; k < dim2; k++) {    final double min2=v2.getMin(k), max2=v2.getMax(k);    if (max2 < 0.) {      l2+=max2 * max2;    } else     if (min2 > 0.) {      l2+=min2 * min2;    }  }  final double cross=Math.max(s1,Math.abs(s2));  final double a=(cross == 0.) ? 0. : (l1 == 0. || l2 == 0.) ? 1. : Math.sqrt((cross / l1) * (cross / l2));  return (a < 1.) ? a : 1.;}  }
class C{  public void merge(Map<Feature,Point3d> pts,Map<Feature,Integer> featureCount){  for (  Entry<Feature,Point3d> f : pts.entrySet()) {    if (points.containsKey(f.getKey())) {      Integer count=featureCount.get(f.getKey());      if (count == null) {        count=1;      }      Point3d p=points.get(f.getKey());      p.x=(p.x * count + f.getValue().x) / (count + 1);      p.y=(p.y * count + f.getValue().y) / (count + 1);      p.z=(p.z * count + f.getValue().z) / (count + 1);      featureCount.put(f.getKey(),count + 1);    } else {      points.put(f.getKey(),f.getValue());      featureCount.put(f.getKey(),1);    }  }}  }
class C{  public void resetZRotationPoints(){  rotationPointZ=initRotationPointZ;}  }
class C{  public void onUpdate(){  if (!startedTask) {    if (!worker.inventoryFull) {      onStartedTask();    } else {      worker.returningGoods=true;      worker.runInventoryDumpLogic();      MinionsCore.debugPrint("Blocktask " + this + " worker "+ worker+ " is full, sending to return goods");    }  } else   if (!workerReachedBlock && System.currentTimeMillis() - taskTimeStarted > 1000L) {    if (Math.abs(startMinionX - worker.posX) < 1D && Math.abs(startMinionZ - worker.posZ) < 1D) {      onWorkerPathFailed();    } else {      taskTimeStarted=System.currentTimeMillis();      startMinionX=worker.posX;      startMinionZ=worker.posZ;    }  }  if (isWorking()) {    worker.faceBlock(posX,posY,posZ);    worker.getDataWatcher().updateObject(16,Integer.valueOf(1));    worker.getDataWatcher().updateObject(17,Integer.valueOf(posX));    worker.getDataWatcher().updateObject(18,Integer.valueOf(posY));    worker.getDataWatcher().updateObject(19,Integer.valueOf(posZ));  }  if (!workerReachedBlock) {    if (isEntityInAccessRange(worker)) {      onReachedTaskBlock();    }  } else   if ((System.currentTimeMillis() - timeBlockReached) > (taskDurationMillis / worker.workSpeed)) {    onFinishedTask();  }}  }
class C{  @Override public EObject create(EClass eClass){switch (eClass.getClassifierID()) {case ExpressionsPackage.BOOL_LITERAL:    return createBoolLiteral();case ExpressionsPackage.INT_LITERAL:  return createIntLiteral();case ExpressionsPackage.DOUBLE_LITERAL:return createDoubleLiteral();case ExpressionsPackage.FLOAT_LITERAL:return createFloatLiteral();case ExpressionsPackage.HEX_LITERAL:return createHexLiteral();case ExpressionsPackage.STRING_LITERAL:return createStringLiteral();case ExpressionsPackage.NULL_LITERAL:return createNullLiteral();case ExpressionsPackage.ASSIGNMENT_EXPRESSION:return createAssignmentExpression();case ExpressionsPackage.CONDITIONAL_EXPRESSION:return createConditionalExpression();case ExpressionsPackage.LOGICAL_OR_EXPRESSION:return createLogicalOrExpression();case ExpressionsPackage.LOGICAL_AND_EXPRESSION:return createLogicalAndExpression();case ExpressionsPackage.LOGICAL_NOT_EXPRESSION:return createLogicalNotExpression();case ExpressionsPackage.BITWISE_XOR_EXPRESSION:return createBitwiseXorExpression();case ExpressionsPackage.BITWISE_OR_EXPRESSION:return createBitwiseOrExpression();case ExpressionsPackage.BITWISE_AND_EXPRESSION:return createBitwiseAndExpression();case ExpressionsPackage.LOGICAL_RELATION_EXPRESSION:return createLogicalRelationExpression();case ExpressionsPackage.SHIFT_EXPRESSION:return createShiftExpression();case ExpressionsPackage.NUMERICAL_ADD_SUBTRACT_EXPRESSION:return createNumericalAddSubtractExpression();case ExpressionsPackage.NUMERICAL_MULTIPLY_DIVIDE_EXPRESSION:return createNumericalMultiplyDivideExpression();case ExpressionsPackage.NUMERICAL_UNARY_EXPRESSION:return createNumericalUnaryExpression();case ExpressionsPackage.PRIMITIVE_VALUE_EXPRESSION:return createPrimitiveValueExpression();case ExpressionsPackage.FEATURE_CALL:return createFeatureCall();case ExpressionsPackage.ELEMENT_REFERENCE_EXPRESSION:return createElementReferenceExpression();case ExpressionsPackage.PARENTHESIZED_EXPRESSION:return createParenthesizedExpression();case ExpressionsPackage.TYPE_CAST_EXPRESSION:return createTypeCastExpression();default :throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");}}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (keyId_1: ");  result.append(keyId_1);  result.append(')');  return result.toString();}  }
class C{  public CharRange(char ch){  this(ch,ch,false);}  }
class C{  public static void main(String[] args){  TestBaseClass tester=new TestBaseClass();  if (run(tester,ARGS,TEST,NEGATED_TEST) != 0) {    throw new Error("Javadoc failed to execute.");  }}  }
class C{  public static void main(String argString){  Vector list=new Vector(5);  for (StringTokenizer tokens=new StringTokenizer(argString," "); tokens.hasMoreElements(); )   list.addElement(tokens.nextElement());  main((String[])list.toArray(new String[list.size()]));}  }
class C{  @Override protected void uninstallListeners(){  super.uninstallListeners();  splitPane.removePropertyChangeListener(this);}  }
class C{  @Override public <A extends Annotation>ExpressionResult checkSpecificFieldPermissions(PersistentResource<?> resource,ChangeSpec changeSpec,Class<A> annotationClass,String field){  if (requestScope.getSecurityMode() == SecurityMode.SECURITY_INACTIVE) {    return ExpressionResult.PASS;  }  ExpressionResult expressionResult=this.checkUserPermissions(resource,annotationClass,field);  if (expressionResult == PASS) {    return expressionResult;  }  Expressions expressions=expressionBuilder.buildSpecificFieldExpressions(resource,annotationClass,field,changeSpec);  return executeExpressions(expressions,annotationClass);}  }
class C{  public ProgressEvent(Executor executor,int currentSeed,int totalSeeds,boolean isSeedFinished,int currentNFE,int maxNFE,double percentComplete,double elapsedTime,double remainingTime,double maxTime){  super();  this.executor=executor;  this.currentSeed=currentSeed;  this.totalSeeds=totalSeeds;  this.isSeedFinished=isSeedFinished;  this.currentNFE=currentNFE;  this.maxNFE=maxNFE;  this.percentComplete=percentComplete;  this.elapsedTime=elapsedTime;  this.remainingTime=remainingTime;  this.maxTime=maxTime;}  }
class C{  ByValueSortingConcurrentSkipListMap(ByValueComparator<K,V> comparator){  super(comparator);  this.comparator=comparator;}  }
class C{  private static void initTestData() throws Exception {  WebserviceTestBase.getOperator().addCurrency(WebserviceTestBase.CURRENCY_EUR);  registerProvider();  registerSupplier();  WebserviceTestBase.savePaymentInfoToSupplier(supplier,PaymentInfoType.INVOICE);  initProviderServices();  importTechnicalService(serviceProvisioningService);  accountService.addSuppliersForTechnicalService(techProduct,Collections.singletonList(supplier.getOrganizationId()));  initSupplierServices();  marketplace=WebserviceTestBase.registerMarketplace(supplier.getOrganizationId(),"mp");  enablePaymentType(accountService);  registerMarketableService(serviceProvisioningService);  WebserviceTestBase.publishToMarketplace(service,true,srvMarketplace,marketplace);  service=serviceProvisioningService.activateService(service);  VOSubscription subscription=WebserviceTestBase.createSubscription(accountService,subscriptionService,"subscrname",service);  subscriptionKey=subscription.getKey();  instanceId=subscription.getServiceInstanceId();}  }
class C{  public byte[] encode(byte[] bytes){  return encodeQuotedPrintable(PRINTABLE_CHARS,bytes);}  }
class C{  public void addNewData(EventBean[] newData){  if (rootView.getRevisionProcessor() == null) {    for (    EventTable table : indexRepository.getTables()) {      table.add(newData);    }  }}  }
class C{  public FieldMethodizer(){}  }
class C{  public String toString(){  final String TAB=" ";  return "ScriptedUserAdder ( " + super.toString() + TAB+ "host = "+ this.host+ TAB+ "port = "+ this.port+ TAB+ "script = "+ this.script+ TAB+ "monitor = "+ this.monitor+ TAB+ " )";}  }
class C{  public Object executeOn(Connection conn,Op op){  return executeOn(conn,op,false);}  }
class C{  public static Array listToArray(String list,String delimiter){  if (delimiter.length() == 1)   return listToArray(list,delimiter.charAt(0));  if (list.length() == 0)   return new ArrayImpl();  if (delimiter.length() == 0) {    int len=list.length();    ArrayImpl array=new ArrayImpl();    array.appendEL("");    for (int i=0; i < len; i++) {      array.appendEL(list.charAt(i));    }    array.appendEL("");    return array;  }  int len=list.length();  int last=0;  char[] del=delimiter.toCharArray();  char c;  ArrayImpl array=new ArrayImpl();  try {    for (int i=0; i < len; i++) {      c=list.charAt(i);      for (int y=0; y < del.length; y++) {        if (c == del[y]) {          array.appendEL(list.substring(last,i));          last=i + 1;          break;        }      }    }    if (last <= len)     array.append(list.substring(last));  } catch (  ExpressionException e) {  }  return array;}  }
class C{  private void updateCheckerList(){  checkerList=(ListView)findViewById(R.id.checkList);  adapter=new CheckerListAdapter(getApplicationContext(),checkerData);  checkerList.setAdapter(adapter);}  }
class C{  private static void store(Map<String,Integer> map,String[] words){  for (int i=0; i < words.length; i++) {    String key=words[i].toLowerCase();    if (key.length() > 0 && Character.isLetter(key.charAt(0))) {      if (!map.containsKey(key)) {        map.put(key,1);      } else {        int value=map.get(key);        value++;        map.put(key,value);      }    }  }}  }
class C{  @Override public void moveToInsertRow() throws SQLException {  try {    debugCodeCall("moveToInsertRow");    checkUpdatable();    insertRow=new Value[columnCount];  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  ImmutableList<String> files(){  return files;}  }
class C{  protected static ImageIcon loadIcon(String iconFile){  try {    return new ImageIcon(DefaultCheckboxTreeCellRenderer.class.getClassLoader().getResource(iconFile));  } catch (  NullPointerException npe) {    return null;  }}  }
class C{  protected static ImageIcon createImageIcon(String path){  java.net.URL imgURL=DialogDemo.class.getResource(path);  if (imgURL != null) {    return new ImageIcon(imgURL);  } else {    System.err.println("Couldn't find file: " + path);    return null;  }}  }
class C{  public SessionThread(Interpreter interpreter,Process process){  super(interpreter,process);  state=new jolie.State();  initMessageQueues();}  }
class C{  @Override public boolean isBorderOpaque(){  return (outsideBorder == null || outsideBorder.isBorderOpaque()) && (insideBorder == null || insideBorder.isBorderOpaque());}  }
class C{  protected Connector(IceSocketWrapper socket,TransportAddress remoteAddress,BlockingQueue<RawMessage> messageQueue,ErrorHandler errorHandler){  this.sock=socket;  this.messageQueue=messageQueue;  this.errorHandler=errorHandler;  this.remoteAddress=remoteAddress;  Transport transport=socket.getUDPSocket() != null ? Transport.UDP : Transport.TCP;  listenAddress=new TransportAddress(socket.getLocalAddress(),socket.getLocalPort(),transport);}  }
class C{  public void clearImageCache(){  _imageCache.clear();}  }
class C{  protected void addPrefixMatch(StringBuilder sb,String surface,String analyzed,String prefixToken){  if (prefixToken.length() >= surface.length()) {    addWholeMatch(sb,surface,analyzed);    return;  }  sb.append("<b>");  sb.append(surface.substring(0,prefixToken.length()));  sb.append("</b>");  sb.append(surface.substring(prefixToken.length()));}  }
class C{  @Deprecated public int R(){  return R;}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof JobImpressionsCompleted);}  }
class C{  public void startIntro(){  mIntroView.startAnimation();}  }
class C{  public Date parseDate(String text) throws DataParseException {  m_pos.setErrorIndex(0);  m_pos.setIndex(0);  Date d=null;  try {    d=Date.valueOf(text);    m_pos.setIndex(text.length());  } catch (  IllegalArgumentException e) {    d=null;  }  if (d == null) {    java.util.Date d1=m_dfmt.parse(text,m_pos);    if (d1 != null) {      d=new Date(d1.getTime());    }  }  if (d == null || m_pos.getIndex() < text.length()) {    throw new DataParseException("Could not parse Date: " + text);  } else {    return d;  }}  }
class C{  public void generate(FacesConfigBean configBean){  this.configBean=configBean;  try {    generateClasses();  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public DateTime withFields(ReadablePartial partial){  if (partial == null) {    return this;  }  return withMillis(getChronology().set(partial,getMillis()));}  }
class C{  public Swarm(String... args) throws Exception {  this(false,args);}  }
class C{  public static boolean isValidName(String name){  if (name == null) {    return false;  }  return name.length() > 3;}  }
class C{  public static String toString(byte[] bytes,String charsetName){  try {    return new String(bytes,charsetName);  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException(e);  }}  }
class C{  private void initHotkeys(){  final InputMap imap=m_hexView.getInputMap();  final InputMap windowImap=m_hexView.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);  windowImap.put(HotKeys.GOTO_HK.getKeyStroke(),"GOTO");  m_hexView.getActionMap().put("GOTO",m_gotoAction);  imap.put(HotKeys.SEARCH_HK.getKeyStroke(),"SEARCH");  m_hexView.getActionMap().put("SEARCH",m_searchAction);}  }
class C{  @POST @Consumes({Servlets.JSON_MEDIA_TYPE,MediaType.APPLICATION_JSON}) @Produces(Servlets.JSON_MEDIA_TYPE) public Response submit(@Context HttpServletRequest request){  AtlasPerfTracer perf=null;  try {    if (AtlasPerfTracer.isPerfTraceEnabled(PERF_LOG)) {      perf=AtlasPerfTracer.getPerfTracer(PERF_LOG,"TypesResource.submit()");    }    final String typeDefinition=Servlets.getRequestPayload(request);    LOG.info("Creating type with definition {} ",typeDefinition);    JSONObject typesJson=metadataService.createType(typeDefinition);    final JSONArray typesJsonArray=typesJson.getJSONArray(AtlasClient.TYPES);    JSONArray typesResponse=new JSONArray();    for (int i=0; i < typesJsonArray.length(); i++) {      final String name=typesJsonArray.getString(i);      typesResponse.put(new JSONObject(){{          put(AtlasClient.NAME,name);        }      });    }    JSONObject response=new JSONObject();    response.put(AtlasClient.REQUEST_ID,Servlets.getRequestId());    response.put(AtlasClient.TYPES,typesResponse);    return Response.status(ClientResponse.Status.CREATED).entity(response).build();  } catch (  TypeExistsException e) {    LOG.error("Type already exists",e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.CONFLICT));  }catch (  AtlasException|IllegalArgumentException e) {    LOG.error("Unable to persist types",e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.BAD_REQUEST));  }catch (  Throwable e) {    LOG.error("Unable to persist types",e);    throw new WebApplicationException(Servlets.getErrorResponse(e,Response.Status.INTERNAL_SERVER_ERROR));  } finally {    AtlasPerfTracer.log(perf);  }}  }
class C{  public void zoomOut(){  this.scale*=2.0;}  }
class C{  @Override protected void removeAt(int index){  _values[index]=0;  super.removeAt(index);}  }
class C{  private void createMinusButton(final int buttonStyle){  this.leftButton=new Button(this,buttonStyle | SWT.LEFT);  this.leftButton.setFont(this.getFont());  this.leftButton.setBackground(this.getBackground());  this.leftButton.setCursor(this.getCursor());  this.leftButton.setEnabled(this.getEnabled());  this.leftButton.setFont(this.getFont());  this.leftButton.setForeground(this.getForeground());  this.leftButton.setLayoutData(new GridData(GridData.FILL,GridData.FILL,false,false));}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this)   return true;  if (!(obj instanceof SelfPermission))   return false;  SelfPermission that=(SelfPermission)obj;  if (!(this.type.equals(that.type) && this.name.equals(that.name) && this.actions.equals(that.actions)))   return false;  if (this.certs.length != that.certs.length)   return false;  int i, j;  boolean match;  for (i=0; i < this.certs.length; i++) {    match=false;    for (j=0; j < that.certs.length; j++) {      if (this.certs[i].equals(that.certs[j])) {        match=true;        break;      }    }    if (!match)     return false;  }  for (i=0; i < that.certs.length; i++) {    match=false;    for (j=0; j < this.certs.length; j++) {      if (that.certs[i].equals(this.certs[j])) {        match=true;        break;      }    }    if (!match)     return false;  }  return true;}  }
class C{  public boolean isShaderSupported(){  this.checkCapabilities();  return this.shadersSupported;}  }
class C{  public void centerViewTo(int xIndex,float yValue,AxisDependency axis){  float valsInView=getDeltaY(axis) / mViewPortHandler.getScaleY();  float xsInView=getXAxis().getValues().size() / mViewPortHandler.getScaleX();  Runnable job=new MoveViewJob(mViewPortHandler,xIndex - xsInView / 2f,yValue + valsInView / 2f,getTransformer(axis),this);  if (mViewPortHandler.hasChartDimens()) {    post(job);  } else {    mJobs.add(job);  }}  }
class C{  public Maybe<Zipper<A>> maybeBackwards(int steps){  return maybeToPosition(position - steps);}  }
class C{  public static boolean hasExactlyTheseInitiators(ExportMask mask,Collection<String> ports,DbClient dbClient){  Collection<String> normalizedPorts=new HashSet<String>();  for (  String port : ports) {    normalizedPorts.add(Initiator.normalizePort(port));  }  Collection<String> maskInitiators=new HashSet<String>();  if (mask.getExistingInitiators() != null) {    maskInitiators.addAll(mask.getExistingInitiators());  }  if (mask.getInitiators() != null) {    for (    String initiatorId : mask.getInitiators()) {      Initiator initiator=dbClient.queryObject(Initiator.class,URI.create(initiatorId));      if (initiator != null & initiator.getInitiatorPort() != null) {        maskInitiators.add(Initiator.normalizePort(initiator.getInitiatorPort()));      }    }  }  if (mask.getUserAddedInitiators() != null) {    maskInitiators.addAll(mask.getUserAddedInitiators().keySet());  }  return (normalizedPorts.size() == maskInitiators.size()) && maskInitiators.containsAll(normalizedPorts);}  }
class C{  public JSONArray put(boolean value){  this.put(value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  public FileHelper(Context context,ElmProt elm){  this.context=context;  this.elm=elm;}  }
class C{  public boolean arePlayersCustomSorted(){  if (!hasStartingPositions()) {    return true;  }  int seat=1;  do {    boolean foundSeat=false;    for (    Player player : players) {      if (player.getSeat() == seat) {        foundSeat=true;        break;      }    }    if (!foundSeat) {      return true;    }    seat++;    if (seat > getPlayerCount()) {      return false;    }  } while (seat < 100);  return true;}  }
class C{  public void print(char ch){synchronized (lock) {    try {      appendLocked(ch);    } catch (    IOException e) {    }  }}  }
class C{  public void removeBookmarkedURL(BookmarkedURL bookmarkedURL){  bookmarkedURLS.remove(bookmarkedURL);}  }
class C{  public String join(String separator) throws JSONException {  int len=this.length();  StringBuilder sb=new StringBuilder();  for (int i=0; i < len; i+=1) {    if (i > 0) {      sb.append(separator);    }    sb.append(JSONObject.valueToString(this.myArrayList.get(i)));  }  return sb.toString();}  }
class C{  private Version(String product,String name,byte major,byte minor,byte release,byte patch,byte ordinal){  this.productName=product;  this.name=name;  this.majorVersion=major;  this.minorVersion=minor;  this.release=release;  this.patch=patch;  this.ordinal=ordinal;  this.methodSuffix=this.productName + "_" + this.majorVersion+ "_"+ this.minorVersion+ "_"+ this.release+ "_"+ this.patch;  this.gemfireVersion=null;  if (ordinal != TOKEN_ORDINAL) {    VALUES[this.ordinal]=this;  }}  }
class C{  public LEFT_OUTER_JOIN LEFT_OUTER_JOIN(String tableToJoin){  return new LEFT_OUTER_JOIN(this,tableToJoin);}  }
class C{  public static void animateFromBlackToColor(View v,int color){  ValueAnimator colorAnim=ObjectAnimator.ofInt(v,"backgroundColor",0xff000000,color);  colorAnim.setDuration(250);  colorAnim.setEvaluator(new ArgbEvaluator());  colorAnim.setInterpolator(new DecelerateInterpolator());  colorAnim.start();}  }
class C{  public static String capitalize(String expression){  return Objects.requireNonNull(expression,"String value cannot be null").isEmpty() ? expression : expression.substring(0,1).toUpperCase() + expression.substring(1);}  }
class C{  PowerPCTrapOperand flipOperands(){switch (value) {case EQUAL:    value=NOT_EQUAL;  break;case NOT_EQUAL:value=EQUAL;break;case LESS:value=GREATER;break;case LESS_EQUAL:value=GREATER_EQUAL;break;case GREATER:value=LESS;break;case GREATER_EQUAL:value=LESS_EQUAL;break;case HIGHER:value=LOWER;break;case LOWER:value=HIGHER;break;case HIGHER_EQUAL:value=LOWER_EQUAL;break;case LOWER_EQUAL:value=HIGHER_EQUAL;break;case NOT_SAME:value=SAME;break;}return this;}  }
class C{  public void end(){  inuse=false;}  }
class C{  public MyStringBuilder2(char[] chars){  s=String.valueOf(chars);}  }
class C{  public boolean containsDirectory(Class type){  return directoryMap.containsKey(type);}  }
class C{  public void next(int frames,boolean broadcast) throws IOException {  if (mInputStream != null) {    byte[] buffer=new byte[mBytesPerFrame * frames];    int samplesRead=mInputStream.read(buffer);    mFrameCounter+=samplesRead;    broadcast(mFrameCounter);    if (broadcast && mListener != null) {      if (samplesRead < buffer.length) {        buffer=Arrays.copyOf(buffer,samplesRead);      }      float[] samples=ConversionUtils.convertFromSigned16BitSamples(buffer);      mListener.receive(new ComplexBuffer(samples));    }  }}  }
class C{  public synchronized Enumeration<Integer> sortedKeys(){  return new SwitchDataEnumeration(tab);}  }
class C{  private void syncDestination(State state){  FileOutputStream downloadedFileStream=null;  try {    downloadedFileStream=new FileOutputStream(state.mFilename,true);    downloadedFileStream.getFD().sync();  } catch (  FileNotFoundException ex) {    Log.w(Constants.TAG,"file " + state.mFilename + " not found: "+ ex);  }catch (  SyncFailedException ex) {    Log.w(Constants.TAG,"file " + state.mFilename + " sync failed: "+ ex);  }catch (  IOException ex) {    Log.w(Constants.TAG,"IOException trying to sync " + state.mFilename + ": "+ ex);  }catch (  RuntimeException ex) {    Log.w(Constants.TAG,"exception while syncing file: ",ex);  } finally {    if (downloadedFileStream != null) {      try {        downloadedFileStream.close();      } catch (      IOException ex) {        Log.w(Constants.TAG,"IOException while closing synced file: ",ex);      }catch (      RuntimeException ex) {        Log.w(Constants.TAG,"exception while closing file: ",ex);      }    }  }}  }
class C{  public static boolean testAarAar(double minXA,double minYA,double maxXA,double maxYA,double minXB,double minYB,double maxXB,double maxYB){  return maxXA >= minXB && maxYA >= minYB && minXA <= maxXB && minYA <= maxYB;}  }
class C{  public void addParameter(final String paramName,final String paramValue) throws IllegalArgumentException {  LOG.trace("enter PostMethod.addParameter(String, String)");  if ((paramName == null) || (paramValue == null)) {    throw new IllegalArgumentException("Arguments to addParameter(String, String) cannot be null");  }  super.clearRequestBody();  params.add(new NameValuePair(paramName,paramValue));}  }
class C{  public BKLogSegmentWriter startLogSegment(long txId) throws IOException {  return startLogSegment(txId,false,false);}  }
class C{  protected double trimToContentWidth(double fixedWidth){  double result=this.margin.trimWidth(fixedWidth);  result=this.frame.getInsets().trimWidth(result);  result=this.padding.trimWidth(result);  return Math.max(result,0.0);}  }
class C{  protected AbstractRable(List srcs,Map props){  init(srcs,props);}  }
class C{  protected final void requestDeferred(){  long r=REQUESTED.getAndSet(this,0L);  if (r != 0L) {    s.request(r);  }}  }
class C{  public org.apache.nutch.storage.WebPage.Builder clearMarkers(){  markers=null;  fieldSetFlags()[21]=false;  return this;}  }
class C{  @SuppressWarnings("deprecation") public void testStressConcurrentRWWriterReader() throws FileNotFoundException, IOException {  final ChecksumUtility checker=ChecksumUtility.getCHK();  final HALogManager manager=new HALogManager(m_logdir);  final IRootBlockView rbv=openRBV(StoreTypeEnum.RW);  assertTrue(rbv.getStoreType() == StoreTypeEnum.RW);  final int recordWrites=5000;  Thread wthread=new Thread(new SimpleWriter(rbv,manager,checker,recordWrites));  final AtomicInteger reads=new AtomicInteger(0);  final AtomicInteger openReaders=new AtomicInteger(0);  wthread.start();  while (wthread.isAlive()) {    if (openReaders.get() < 20) {      Thread rthread=new Thread(new ReaderRun(manager,reads,openReaders));      rthread.start();    }    try {      Thread.sleep(r.nextInt(100));    } catch (    InterruptedException e) {      break;    }  }  while (openReaders.get() > 0)   try {    Thread.sleep(50);  } catch (  InterruptedException e) {  }  log.info("Writes: " + recordWrites + ", Reads: "+ reads.get());  assertTrue(reads.get() >= recordWrites);}  }
class C{  public RapidXYBarPainter(double g1,double g2,double g3){  this.g1=g1;  this.g2=g2;  this.g3=g3;}  }
class C{  private void processSubjectAtts(NodeElement nodeElt,Atts atts) throws RDFParseException, RDFHandlerException {  Resource subject=nodeElt.getResource();  Iterator<Att> iter=atts.iterator();  while (iter.hasNext()) {    Att att=iter.next();    IRI predicate=createURI(att.getURI());    Literal lit=createLiteral(att.getValue(),xmlLang,null);    reportStatement(subject,predicate,lit);  }}  }
class C{  public static Neo4jGraph open(final String directory){  final Configuration config=new BaseConfiguration();  config.setProperty(CONFIG_DIRECTORY,directory);  return open(config);}  }
class C{  private boolean computeCapacityforSRDFV3ToV2Meta(final StoragePool sourcePool,final StoragePool targetPool,Volume sourceVolume,Volume targetVolume,final MetaVolumeRecommendation sourceVolumeRecommendation,final MetaVolumeRecommendation targetVolumeRecommendation){  if (!sourceVolumeRecommendation.equals(targetVolumeRecommendation)) {    if (sourceVolumeRecommendation.isCreateMetaVolumes() && targetPool.getPoolClassName().equalsIgnoreCase(StoragePool.PoolClassNames.Symm_SRPStoragePool.toString())) {      Long cylinderCount=(long)Math.ceil((double)sourceVolume.getCapacity() / (V2CYLINDERSIZE * sourceVolumeRecommendation.getMetaMemberCount()));      sourceVolume.setCapacity(cylinderCount * V2CYLINDERSIZE * sourceVolumeRecommendation.getMetaMemberCount());      targetVolume.setCapacity(cylinderCount * V2CYLINDERSIZE * sourceVolumeRecommendation.getMetaMemberCount());      _dbClient.updateObject(sourceVolume);      _log.info("VMAX2 Cylinder Count : {}, VMAX2 volume Capacity : {}",cylinderCount,targetVolume.getCapacity());      return true;    }    if (targetVolumeRecommendation.isCreateMetaVolumes() && sourcePool.getPoolClassName().equalsIgnoreCase(StoragePool.PoolClassNames.Symm_SRPStoragePool.toString())) {      Long cylinderCount=(long)Math.ceil((double)targetVolume.getCapacity() / (V2CYLINDERSIZE * targetVolumeRecommendation.getMetaMemberCount()));      targetVolume.setCapacity(cylinderCount * V2CYLINDERSIZE * targetVolumeRecommendation.getMetaMemberCount());      sourceVolume.setCapacity(cylinderCount * V2CYLINDERSIZE * targetVolumeRecommendation.getMetaMemberCount());      _dbClient.updateObject(sourceVolume);      _log.info("VMAX2 Cylinder Count : {}, VMAX2 volume Capacity : {}",cylinderCount,targetVolume.getCapacity());      return true;    }  }  return false;}  }
class C{  public static BigDecimal calculateAverageInv(MProduct product,int M_AttributeSetInstance_ID,MAcctSchema as,int AD_Org_ID){  String sql="SELECT t.MovementQty, mi.Qty, il.QtyInvoiced, il.PriceActual," + " i.C_Currency_ID, i.DateAcct, i.C_ConversionType_ID, i.AD_Client_ID, i.AD_Org_ID, t.M_Transaction_ID " + "FROM M_Transaction t"+ " INNER JOIN M_MatchInv mi ON (t.M_InOutLine_ID=mi.M_InOutLine_ID)"+ " INNER JOIN C_InvoiceLine il ON (mi.C_InvoiceLine_ID=il.C_InvoiceLine_ID)"+ " INNER JOIN C_Invoice i ON (il.C_Invoice_ID=i.C_Invoice_ID) "+ "WHERE t.M_Product_ID=?";  if (AD_Org_ID != 0)   sql+=" AND t.AD_Org_ID=?"; else   if (M_AttributeSetInstance_ID != 0)   sql+=" AND t.M_AttributeSetInstance_ID=?";  sql+=" ORDER BY t.M_Transaction_ID";  PreparedStatement pstmt=null;  ResultSet rs=null;  BigDecimal newStockQty=Env.ZERO;  BigDecimal newAverageAmt=Env.ZERO;  int oldTransaction_ID=0;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,product.getM_Product_ID());    if (AD_Org_ID != 0)     pstmt.setInt(2,AD_Org_ID); else     if (M_AttributeSetInstance_ID != 0)     pstmt.setInt(2,M_AttributeSetInstance_ID);    rs=pstmt.executeQuery();    while (rs.next()) {      BigDecimal oldStockQty=newStockQty;      BigDecimal movementQty=rs.getBigDecimal(1);      int M_Transaction_ID=rs.getInt(10);      if (M_Transaction_ID != oldTransaction_ID)       newStockQty=oldStockQty.add(movementQty);      M_Transaction_ID=oldTransaction_ID;      BigDecimal matchQty=rs.getBigDecimal(2);      if (matchQty == null) {        s_log.finer("Movement=" + movementQty + ", StockQty="+ newStockQty);        continue;      }      BigDecimal price=rs.getBigDecimal(4);      int C_Currency_ID=rs.getInt(5);      Timestamp DateAcct=rs.getTimestamp(6);      int C_ConversionType_ID=rs.getInt(7);      int Client_ID=rs.getInt(8);      int Org_ID=rs.getInt(9);      BigDecimal cost=MConversionRate.convert(product.getCtx(),price,C_Currency_ID,as.getC_Currency_ID(),DateAcct,C_ConversionType_ID,Client_ID,Org_ID);      BigDecimal oldAverageAmt=newAverageAmt;      BigDecimal averageCurrent=oldStockQty.multiply(oldAverageAmt);      BigDecimal averageIncrease=matchQty.multiply(cost);      BigDecimal newAmt=averageCurrent.add(averageIncrease);      newAmt=newAmt.setScale(as.getCostingPrecision(),BigDecimal.ROUND_HALF_UP);      newAverageAmt=newAmt.divide(newStockQty,as.getCostingPrecision(),BigDecimal.ROUND_HALF_UP);      s_log.finer("Movement=" + movementQty + ", StockQty="+ newStockQty+ ", Match="+ matchQty+ ", Cost="+ cost+ ", NewAvg="+ newAverageAmt);    }  } catch (  SQLException e) {    throw new DBException(e,sql);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (newAverageAmt != null && newAverageAmt.signum() != 0) {    s_log.finer(product.getName() + " = " + newAverageAmt);    return newAverageAmt;  }  return null;}  }
class C{  @Override public boolean contains(Object obj){  if (!(obj instanceof Struct)) {    return false;  }  Struct s=(Struct)obj;  if (!this.elementType.equals(StructTypeImpl.typeFromStruct(s))) {    return false;  }  return containsFieldValues(s.getFieldValues());}  }
class C{  public static Chset difference(Chset left,Chset right){  Chset n=(Chset)left.clone();  for (  Range r : right.ranges) {    n.clear(r);  }  return n;}  }
class C{  public boolean hasOnlyReflectedPreds(SootMethod m){  for (  StmtEdge<SootMethod> e : getSourcesForMethod(m)) {    if (!isReflectedEdge(e))     return false;  }  return true;}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();}throw new IllegalStateException();}  }
class C{  @DSComment("not sensitive, memory stream") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:42.629 -0500",hash_original_method="403A1214A00C2300123B494982A31042",hash_generated_method="558F8491AE877DB6C3CABF8605DAD589") @Override public void close() throws IOException {}  }
class C{  public void removePropertyChangeListener(String name,java.beans.PropertyChangeListener pcl){}  }
class C{  public static final String stackTrace(Throwable e){  String foo=null;  try {    ByteArrayOutputStream ostr=new ByteArrayOutputStream();    e.printStackTrace(new PrintWriter(ostr,true));    foo=ostr.toString();  } catch (  Exception f) {  }  return foo;}  }
class C{  public void performDefaultLayout(){  if (defaultGlyphPositions == null) {    awtGlyphVector.performDefaultLayout();    defaultGlyphPositions=new Point2D.Float[getNumGlyphs() + 1];    for (int i=0; i <= getNumGlyphs(); i++)     defaultGlyphPositions[i]=awtGlyphVector.getGlyphPosition(i);  }  outline=null;  visualBounds=null;  logicalBounds=null;  bounds2D=null;  float shiftLeft=0;  int i=0;  for (; i < getNumGlyphs(); i++) {    glyphTransforms[i]=null;    glyphVisualBounds[i]=null;    glyphLogicalBounds[i]=null;    glyphOutlines[i]=null;    glyphMetrics[i]=null;    Point2D glyphPos=defaultGlyphPositions[i];    float x=(float)((glyphPos.getX() * scaleFactor) - shiftLeft);    float y=(float)(glyphPos.getY() * scaleFactor);    ci.setIndex(i + ci.getBeginIndex());    if (glyphPositions[i] == null) {      glyphPositions[i]=new Point2D.Float(x,y);    } else {      glyphPositions[i].x=x;      glyphPositions[i].y=y;    }  }  Point2D glyphPos=defaultGlyphPositions[i];  glyphPositions[i]=new Point2D.Float((float)((glyphPos.getX() * scaleFactor) - shiftLeft),(float)(glyphPos.getY() * scaleFactor));}  }
class C{  protected boolean isFieldSeparatorAtStart(){  return fieldSeparatorAtStart;}  }
class C{  protected void startDocumentInternal() throws SAXException {  if (m_needToCallStartDocument) {    super.startDocumentInternal();    m_saxHandler.startDocument();    m_needToCallStartDocument=false;  }}  }
class C{  private Node enq(final Node node){  for (; ; ) {    Node t=tail;    if (t == null) {      if (compareAndSetHead(new Node()))       tail=head;    } else {      node.prev=t;      if (compareAndSetTail(t,node)) {        t.next=node;        return t;      }    }  }}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,int options){  byte[] ALPHABET=getAlphabet(options);  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=ALPHABET[(inBuff >>> 18)];  destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=ALPHABET[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public boolean stopPruning(boolean stop){  return true;}  }
class C{  public boolean hasLongOpt(){  return longOpt != null;}  }
class C{  synchronized void commit(Session session){  throwLastBackgroundException();  if (readOnly) {    return;  }  if (pageStore != null) {    pageStore.commit(session);  }  session.setAllCommitted();}  }
class C{  @Inline public ObjectReference traceObject(TransitiveClosure trace,ObjectReference object,int allocator){  if (!fromSpace)   return object;  Word forwardingWord=ForwardingWord.attemptToForward(object);  if (ForwardingWord.stateIsForwardedOrBeingForwarded(forwardingWord)) {    while (ForwardingWord.stateIsBeingForwarded(forwardingWord))     forwardingWord=VM.objectModel.readAvailableBitsWord(object);    return ForwardingWord.extractForwardingPointer(forwardingWord);  } else {    ObjectReference newObject=VM.objectModel.copy(object,allocator);    ForwardingWord.setForwardingPointer(object,newObject);    trace.processNode(newObject);    if (VM.VERIFY_ASSERTIONS && Options.verbose.getValue() >= 9) {      Log.write("C[");      Log.write(object);      Log.write("/");      Log.write(getName());      Log.write("] -> ");      Log.write(newObject);      Log.write("/");      Log.write(Space.getSpaceForObject(newObject).getName());      Log.writeln("]");    }    return newObject;  }}  }
class C{  protected boolean isAnalyticsEnabled(){  return agent != null;}  }
class C{  public static boolean isLocalContentUri(@Nullable Uri uri){  final String scheme=getSchemeOrNull(uri);  return LOCAL_CONTENT_SCHEME.equals(scheme);}  }
class C{  public static Tree<String> binarizeTree(Tree<String> tree,Binarization binarization){switch (binarization) {case LEFT:    return leftBinarizeTree(tree);case RIGHT:  return rightBinarizeTree(tree);case PARENT:return parentBinarizeTree(tree);case HEAD:return headBinarizeTree(tree);}return null;}  }
class C{  public boolean clearInternal(GridCacheVersion ver,boolean swap,GridCacheObsoleteEntryExtras extras) throws IgniteCheckedException {  boolean rmv=false;  try {synchronized (this) {      CacheObject prev=saveValueForIndexUnlocked();      if (!markObsolete0(ver,false,extras)) {        if (log.isDebugEnabled())         log.debug("Entry could not be marked obsolete (it is still used or has readers): " + this);        return false;      }      rdrs=ReaderId.EMPTY_ARRAY;      if (log.isDebugEnabled())       log.debug("Entry has been marked obsolete: " + this);      if (log.isTraceEnabled()) {        log.trace("clearInternal [key=" + key + ", entry="+ System.identityHashCode(this)+ ", prev="+ prev+ ", ptr="+ offHeapPointer()+ ']');      }      clearIndex(prev);      update(null,0L,0L,ver,true);      if (swap) {        releaseSwap();        if (log.isDebugEnabled())         log.debug("Entry has been cleared from swap storage: " + this);      }      if (cctx.store().isLocal())       cctx.store().remove(null,key);      rmv=true;      return true;    }  }  finally {    if (rmv)     cctx.cache().removeEntry(this);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void launchAnim3(){  animatedVector3.start();}  }
class C{  public void newParseResult(ParseResult parseResult){  TLAEditorActivator.getDefault().logDebug("newParseResult called with status: " + parseResult.getStatus());}  }
class C{  @Override public void handleMousePressed(ChartCanvas canvas,MouseEvent e){  Point2D pt=new Point2D.Double(e.getX(),e.getY());  Rectangle2D dataArea=canvas.findDataArea(pt);  if (dataArea != null) {    this.startPoint=ShapeUtilities.getPointInRectangle(e.getX(),e.getY(),dataArea);  } else {    this.startPoint=null;    canvas.clearLiveHandler();  }}  }
class C{  private static boolean matches(Type from,Type to,Map<String,Type> typeMap){  return to.equals(from) || (from instanceof TypeVariable && to.equals(typeMap.get(((TypeVariable<?>)from).getName())));}  }
class C{  public static boolean isInAnnotation(Env<?> env,JCTree tree){  TreePath tp=TreePath.getPath(env.toplevel,tree);  if (tp != null) {    for (    Tree t : tp) {      if (t.getKind() == Tree.Kind.ANNOTATION)       return true;    }  }  return false;}  }
class C{  public double valueAtRisk(final double centile){  QL.require(centile >= 0.9 && centile < 1.0,"percentile out of range [0.9, 1.0)");  return -Math.min(percentile(1.0 - centile),0.0);}  }
class C{  public void show(@StringRes Integer toast){  Toast.makeText(context,toast,Toast.LENGTH_SHORT).show();}  }
class C{  public void moveDown(){  Coord scale=_map.scale(_zoom);  double partY=1.0 * getHeight() / 4;  _center=_center.translate(partY * -scale.getLatitude(),0);  _needTiles=true;}  }
class C{  public boolean verify() throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, SignatureException {  return verify(BouncyCastleProvider.PROVIDER_NAME);}  }
class C{  protected boolean shouldEncodeChar(char c){  int max=getMaximumAllowedCharacter();  return (max > 0) && (c > max);}  }
class C{  public int read() throws IOException {  int len=read(rbuf,0,1);  if (len <= 0)   return -1;  return (rbuf[0] & 0xFF);}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.Object allocateInstance(java.lang.Class)")) {    sun_misc_Unsafe_allocateInstance(method,thisVar,returnVar,params);    return;  }{    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","njtech");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public TdfApiResponse(){}  }
class C{  public static String determineOutputTypeAsString(LocalVariableMap symbolTable,String outputName){  Data data=symbolTable.get(outputName);  if (data instanceof BooleanObject) {    return "Boolean";  } else   if (data instanceof DoubleObject) {    return "Double";  } else   if (data instanceof IntObject) {    return "Long";  } else   if (data instanceof StringObject) {    return "String";  } else   if (data instanceof MatrixObject) {    return "Matrix";  } else   if (data instanceof FrameObject) {    return "Frame";  }  return "Unknown";}  }
class C{  @Override public boolean containsValue(Object val){  return _map.containsValue(unwrapValue(val));}  }
class C{  public void test_ticket538() throws UpdateExecutionException, RepositoryException, MalformedQueryException, QueryEvaluationException {  final URI gin=f.createURI("http://example/in");  final URI gout=f.createURI("http://example/out");  con.prepareUpdate(QueryLanguage.SPARQL,"DROP SILENT ALL").execute();  assertFalse(con.hasStatement(null,null,null,true,(Resource)gin));  assertFalse(con.hasStatement(null,null,null,true,(Resource)gout));  final String s="# Update 2\n" + "PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n" + "INSERT DATA {\n"+ "  GRAPH <http://example/in> {\n"+ "        <http://example/president25> foaf:givenName \"William\" .\n"+ "  }\n"+ "};\n"+ "INSERT {\n"+ "   GRAPH <http://example/out> {\n"+ "       ?s ?p ?v .\n"+ "        }\n"+ "    }\n"+ "WHERE {\n"+ "   GRAPH <http://example/in> {\n"+ "       ?s ?p ?v .\n"+ "        }\n"+ "  }\n"+ ";";  final BigdataSailUpdate update=(BigdataSailUpdate)con.prepareUpdate(QueryLanguage.SPARQL,s);  update.execute();  assertTrue(con.hasStatement(null,null,null,true,(Resource)gin));  if (false)   con.prepareUpdate(QueryLanguage.SPARQL,s).execute();  assertTrue(con.hasStatement(null,null,null,true,(Resource)gout));}  }
class C{  private synchronized void createOrUpdateBundle(TokenKeysBundle bundleIn) throws Exception {  Configuration config=_coordinator.queryConfiguration(SIGNATURE_KEY_CONFIG,SIGNATURE_KEY_ID);  ConfigurationImpl configImpl=null;  if (config == null) {    configImpl=new ConfigurationImpl();    configImpl.setId(SIGNATURE_KEY_ID);    configImpl.setKind(SIGNATURE_KEY_CONFIG);    _log.debug("Creating new config");  } else {    configImpl=(ConfigurationImpl)config;    _log.debug("Updating existing config");  }  configImpl.setConfig(SIGNATURE_KEY,SerializerUtils.serializeAsBase64EncodedString(bundleIn));  _coordinator.persistServiceConfiguration(configImpl);  _log.debug("Updated keys bundle successfully");  return;}  }
class C{  protected void moveOneSlotToBottom(ImageTile[] selectedTiles2){  OMGraphicList list=getList();  if (list != null && selectedTiles != null && selectedTiles.length > 0) {    for (int i=selectedTiles2.length - 1; i >= 0; i--) {      ImageTile tile=selectedTiles2[i];      list.moveIndexedOneToBottom(list.indexOf(tile));    }    rebuildListModel();  }}  }
class C{  private void initFmt(){  fmtOffset=findHeader(0x66,0x6D,0x74,0x20);  if (fmtOffset > 0) {    return;  }  log.error("Didn't find fmt chunk");}  }
class C{  public boolean isPaid(){  Object oo=get_Value(COLUMNNAME_IsPaid);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static String toString(JSONObject jo) throws JSONException {  StringBuffer sb=new StringBuffer();  sb.append(escape(jo.getString("name")));  sb.append("=");  sb.append(escape(jo.getString("value")));  if (jo.has("expires")) {    sb.append(";expires=");    sb.append(jo.getString("expires"));  }  if (jo.has("domain")) {    sb.append(";domain=");    sb.append(escape(jo.getString("domain")));  }  if (jo.has("path")) {    sb.append(";path=");    sb.append(escape(jo.getString("path")));  }  if (jo.optBoolean("secure")) {    sb.append(";secure");  }  return sb.toString();}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  for (int i=0; i < segments.length; ++i) {    segments[i].setTable(new HashEntry[1]);  }  for (; ; ) {    lucee.runtime.type.Collection.Key key=(lucee.runtime.type.Collection.Key)s.readObject();    V value=(V)s.readObject();    if (key == null)     break;    put(key,value);  }}  }
class C{  public void onNewContext(MapPaneEvent ev){}  }
class C{  public static String lcfirst(String input){  return withFirst(input,null);}  }
class C{  public void write(int x){  writeByte((x >>> 24) & 0xff);  writeByte((x >>> 16) & 0xff);  writeByte((x >>> 8) & 0xff);  writeByte((x >>> 0) & 0xff);}  }
class C{  private void renameSupportingDevicesAfterExtentMigration(VPlexVirtualVolumeInfo vvInfo,VPlexMigrationInfo migrationInfo){  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  VPlexApiVirtualVolumeManager vvolMgr=_vplexApiClient.getVirtualVolumeManager();  String supportingDeviceName=vvInfo.getSupportingDevice();  String migrationSrcName=migrationInfo.getSource();  String srcVolumeName=migrationSrcName.substring(VPlexApiConstants.EXTENT_PREFIX.length(),migrationSrcName.indexOf(VPlexApiConstants.EXTENT_SUFFIX));  String migrationTgtName=migrationInfo.getTarget();  String tgtVolumeName=migrationTgtName.substring(VPlexApiConstants.EXTENT_PREFIX.length(),migrationTgtName.indexOf(VPlexApiConstants.EXTENT_SUFFIX));  if (supportingDeviceName.startsWith(VPlexApiConstants.DIST_DEVICE_PREFIX)) {    VPlexDistributedDeviceInfo supportingDeviceInfo=discoveryMgr.findDistributedDevice(supportingDeviceName);    if (supportingDeviceInfo == null) {      s_logger.info("Could not find distributed device {} for the virtual volume {}, hence distributed " + "device name will not be updated. ",supportingDeviceName,vvInfo.getName());      return;    }    String updatedDistDeviceName=supportingDeviceName.replace(srcVolumeName,tgtVolumeName);    supportingDeviceInfo=vvolMgr.renameVPlexResource(supportingDeviceInfo,updatedDistDeviceName);    String srcDeviceName=VPlexApiConstants.DEVICE_PREFIX + srcVolumeName;    String tgtDeviceName=VPlexApiConstants.DEVICE_PREFIX + tgtVolumeName;    List<VPlexDistributedDeviceComponentInfo> componentList=vvolMgr.getDistributedDeviceComponents(supportingDeviceInfo.getName());    for (    VPlexResourceInfo component : componentList) {      if (component.getName().equals(srcDeviceName)) {        vvolMgr.renameVPlexResource(component,tgtDeviceName);      }    }  } else {    s_logger.info("Updating device {} to reflect new volume {}",supportingDeviceName,tgtVolumeName);    VPlexDeviceInfo supportingDeviceInfo=discoveryMgr.findLocalDevice(supportingDeviceName);    if (supportingDeviceInfo == null) {      s_logger.info("Could not find local device {} for the virtual volume {}, hence " + "device name will not be updated. ",supportingDeviceName,vvInfo.getName());      return;    }    String updatedDeviceName=supportingDeviceName.replace(srcVolumeName,tgtVolumeName);    vvolMgr.renameVPlexResource(supportingDeviceInfo,updatedDeviceName);  }}  }
class C{  public void matchRoutes(String stopsFileName,ArrayList<ScheduledRoute> routes,String outFileFolder) throws IOException {  HashMap<String,String[]> stops=new HashMap<String,String[]>();  BufferedReader stopsReader=new BufferedReader(new FileReader(stopsFileName));  String fileLine=stopsReader.readLine();  while (fileLine != null) {    String[] cells=fileLine.split(",");    String id=cells[0];    String[] properties={cells[1],cells[2],cells[3],cells[4]};    stops.put(id,properties);    fileLine=stopsReader.readLine();  }  stopsReader.close();  Network BusNetwork=NetworkUtils.createNetwork();  Network TrainNetwork=NetworkUtils.createNetwork();  Network StreetcarNetwork=NetworkUtils.createNetwork();  Network SubwayNetwork=NetworkUtils.createNetwork();  Network SRTNetwork=NetworkUtils.createNetwork();  Network LRTNetwork=NetworkUtils.createNetwork();  TransportModeNetworkFilter filter=new TransportModeNetworkFilter(this.network);  filter.filter(LRTNetwork,CollectionUtils.stringToSet("LRT"));  filter.filter(SRTNetwork,CollectionUtils.stringToSet("SRT"));  filter.filter(SubwayNetwork,CollectionUtils.stringToSet("Subway"));  filter.filter(StreetcarNetwork,CollectionUtils.stringToSet("Streetcar"));  filter.filter(TrainNetwork,CollectionUtils.stringToSet("Train"));  filter.filter(BusNetwork,CollectionUtils.stringToSet("Bus"));  System.out.println("Base network contains " + this.network.getLinks().size() + " links.");  System.out.println("LRT network contains " + LRTNetwork.getLinks().size() + " links.");  System.out.println("SRT network contains " + SRTNetwork.getLinks().size() + " links.");  System.out.println("Subway network contains " + SubwayNetwork.getLinks().size() + " links.");  System.out.println("Streetcar network contains " + StreetcarNetwork.getLinks().size() + " links.");  System.out.println("Train network contains " + TrainNetwork.getLinks().size() + " links.");  System.out.println("Bus network contains " + BusNetwork.getLinks().size() + " links.");  System.out.println("Network filtering done.");  BufferedWriter xmlWriter=new BufferedWriter(new FileWriter(outFileFolder + "\\linksequences.xml"));  xmlWriter.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<routes>\n");  BufferedWriter EMMEWriter=new BufferedWriter(new FileWriter(outFileFolder + "\\routeseq.221"));  EMMEWriter.write("t lines");  int routeNumber=0;  for (  ScheduledRoute route : routes) {    ArrayList<String> stopSequence=route.getStopSequence();    String xmlLinkSequence="\t<route routename=\"" + route.routename + "\" direction=\""+ route.direction+ "\" branch=\""+ route.branch+ "\" mode=\""+ route.mode+ "\">\n\t\t<linksequence>";    String EMMESequence="a \'G_" + route.mode.charAt(0) + routeNumber+++ "\'";    int EMMEColumnNumber=0;    LeastCostPathCalculator pather=null;    Network subNetwork=null;    FreeSpeedTravelTime freespeedCalc=new FreeSpeedTravelTime();    OnlyTimeDependentTravelDisutility disutilityCalc=new OnlyTimeDependentTravelDisutility(freespeedCalc);    if (route.mode == "train") {      pather=new Dijkstra(TrainNetwork,disutilityCalc,freespeedCalc);      EMMESequence+=" r 1 5 99";      subNetwork=TrainNetwork;    } else     if (route.mode == "subway") {      pather=new Dijkstra(SubwayNetwork,disutilityCalc,freespeedCalc);      EMMESequence+=" m 2 5 99";      subNetwork=SubwayNetwork;    } else     if (route.mode == "streetcar") {      pather=new Dijkstra(StreetcarNetwork,disutilityCalc,freespeedCalc);      EMMESequence+=" l 5 5 99";      subNetwork=StreetcarNetwork;    } else {      pather=new Dijkstra(BusNetwork,disutilityCalc,freespeedCalc);      EMMESequence+=" b 7 5 99";      subNetwork=BusNetwork;    }    EMMESequence+=" \'" + route.routename + " "+ route.direction.toCharArray()[0]+ route.branch+ "\'\n";    Path P=null;    Node fromNode=getNearestNode(new Coord(Double.parseDouble(stops.get(stopSequence.get(0))[0]),Double.parseDouble(stops.get(stopSequence.get(0))[1])),subNetwork);    EMMESequence+=" " + fromNode.getId().toString();    EMMEColumnNumber++;    for (int i=1; i < stopSequence.size(); i++) {      Node toNode=null;      try {        toNode=getNearestNode(new Coord(Double.parseDouble(stops.get(stopSequence.get(i))[0]),Double.parseDouble(stops.get(stopSequence.get(i))[1])),subNetwork);      } catch (      java.lang.NullPointerException e) {        continue;      }      Person person=PopulationUtils.getFactory().createPerson(Id.create("transit driver",Person.class));      VehicleImpl veh=new VehicleImpl(Id.create("test vehicle",Vehicle.class),new VehicleTypeImpl(Id.create("no type",VehicleType.class)));      P=pather.calcLeastCostPath(fromNode,toNode,0F,person,veh);      for (      Link L : P.links) {        xmlLinkSequence+="\n\t\t\t<link refId=\"" + L.getId().toString() + "\"/>";        if (EMMEColumnNumber > 8) {          EMMESequence+="\n " + L.getToNode().getId().toString();          EMMEColumnNumber=1;        } else {          EMMESequence+=" " + L.getToNode().getId().toString();          EMMEColumnNumber++;        }      }      fromNode=toNode;    }    xmlLinkSequence+="\n\t\t</linksequence>\n</route>\n";    xmlWriter.write(xmlLinkSequence);    EMMEWriter.write("\n" + EMMESequence);    System.out.println("Route \"" + route.id + "\" is done.");  }  xmlWriter.write("</routes>");  xmlWriter.close();  EMMEWriter.close();}  }
class C{  public void createMetadata(final String metadataKeyName){  final IndexedContainer metadataContainer=(IndexedContainer)getContainerDataSource();  final Item item=metadataContainer.addItem(metadataKeyName);  item.getItemProperty(METADATA_KEY).setValue(metadataKeyName);}  }
class C{  public Measure asMeasure(ExpressionAST expression) throws ScopeException {  if (expression instanceof MeasureExpression) {    return ((MeasureExpression)expression).getMeasure();  } else {    IDomain source=expression.getSourceDomain();    Object adapter=source.getAdapter(Domain.class);    if (adapter != null && adapter instanceof Domain) {      Domain domain=(Domain)adapter;      IDomain image=expression.getImageDomain();      if (image.isInstanceOf(IDomain.INTRINSIC)) {        return new Measure(S(domain),expression);      }    }  }  return null;}  }
class C{  public static void cursorFillWindow(final Cursor cursor,int position,final CursorWindow window){  if (position < 0 || position >= cursor.getCount()) {    return;  }  final int oldPos=cursor.getPosition();  final int numColumns=cursor.getColumnCount();  window.clear();  window.setStartPosition(position);  window.setNumColumns(numColumns);  if (cursor.moveToPosition(position)) {    do {      if (!window.allocRow()) {        break;      }      for (int i=0; i < numColumns; i++) {        final int type=cursor.getType(i);        final boolean success;switch (type) {case Cursor.FIELD_TYPE_NULL:          success=window.putNull(position,i);        break;case Cursor.FIELD_TYPE_INTEGER:      success=window.putLong(cursor.getLong(i),position,i);    break;case Cursor.FIELD_TYPE_FLOAT:  success=window.putDouble(cursor.getDouble(i),position,i);break;case Cursor.FIELD_TYPE_BLOB:{final byte[] value=cursor.getBlob(i);success=value != null ? window.putBlob(value,position,i) : window.putNull(position,i);break;}default :case Cursor.FIELD_TYPE_STRING:{final String value=cursor.getString(i);success=value != null ? window.putString(value,position,i) : window.putNull(position,i);break;}}if (!success) {window.freeLastRow();break;}}position+=1;} while (cursor.moveToNext());}cursor.moveToPosition(oldPos);}  }
class C{  public DefaultInternalTransition(State<S,E> source,Collection<Action<S,E>> actions,E event,Guard<S,E> guard,Trigger<S,E> trigger,SecurityRule securityRule){  super(source,actions,event,guard,trigger,securityRule);}  }
class C{  public DrawerBuilder drawerLeftView(View drawerLeftView){  this.drawerLeftView=drawerLeftView;  return this;}  }
class C{  public static SQLConsumerException createSQLConsumerException(final ErrorKeys errorId,final String message){  return new SQLConsumerException(errorId.toString() + ":\r\n" + message);}  }
class C{  protected void computeGeometry(DrawContext dc,SurfaceTileDrawContext sdc){  this.pixelSizeInMeters=this.computePixelSize(dc,sdc);  double fullHeightInMeters=this.pixelSizeInMeters * this.textBounds.getHeight();  this.scale=this.textSizeInMeters / fullHeightInMeters;}  }
class C{  private SendReturn send(int messageType,String message) throws InterruptedException, ExtractorException {  String length=String.format("%d",message.length());  String lenlen=String.format("%d",length.length());  String type=String.format("%04d",messageType);  String outMessage;  int bytesRead;  String replyString;  int ll;  int t;  SendReturn retval=new SendReturn();  boolean lengthKnown;  int totalBytesRead=0;  int totalBytesNeeded;  boolean longMessageSupport=true;  if (!connected)   throw new OracleExtractException("Not connected");  outMessage=lenlen + length + type+ message;  if (logger.isDebugEnabled()) {    logger.debug("Sending Message type " + messageType);    logger.debug(" - Message is -> " + message);    logger.debug(" - Therefore sending -> " + outMessage);  }  out.println(outMessage);  if (messageType != Const.MessageControl) {    try {      if (longMessageSupport) {        lengthKnown=false;        totalBytesRead=0;        totalBytesNeeded=0;        for (; ; ) {          bytesRead=in.read(replyBuffer,totalBytesRead,replyBufferSize - totalBytesRead - 1);          if (bytesRead == -1) {            throw new OracleExtractException("End of Stream");          }          totalBytesRead+=bytesRead;          logger.debug("Read = " + bytesRead + " total = "+ totalBytesRead+ " needed = "+ totalBytesNeeded);          if (lengthKnown) {            if (totalBytesRead >= totalBytesNeeded)             break; else             continue;          }          if (totalBytesRead <= 9)           continue;          lengthKnown=true;          replyBuffer[totalBytesRead]='\0';          lengthBuffer[0]=replyBuffer[0];          lengthBuffer[1]=replyBuffer[1];          lengthBuffer[2]=replyBuffer[2];          lengthBuffer[3]=replyBuffer[3];          lengthBuffer[4]=replyBuffer[4];          lengthBuffer[5]=replyBuffer[5];          lengthBuffer[6]=replyBuffer[6];          lengthBuffer[7]=replyBuffer[7];          lengthBuffer[8]=replyBuffer[8];          lengthBuffer[9]=replyBuffer[9];          lengthBuffer[10]='\0';          String lengthString=new String(lengthBuffer);          totalBytesNeeded=Integer.parseInt(lengthString.substring(1,9),16);          totalBytesNeeded+=13;          if (totalBytesNeeded + 1 > replyBufferSize)           increaseReplyBuffer(totalBytesNeeded + 1);          if (totalBytesRead >= totalBytesNeeded)           break;        }      } else {        totalBytesRead=in.read(replyBuffer);      }    } catch (    ClosedByInterruptException e) {      throw new InterruptedException("Oracle extractor was interrupted");    }catch (    IOException e) {      throw new OracleExtractException("End of Stream");    }    if (totalBytesRead == -1) {      throw new OracleExtractException("End of Stream");    }    replyBuffer[totalBytesRead]='\0';    replyString=new String(replyBuffer,0,totalBytesRead);    if (logger.isDebugEnabled()) {      logger.debug("Reply = \"" + replyString + "\"\n");    }    ll=Integer.parseInt(replyString.substring(0,1));    t=Integer.parseInt(replyString.substring(1 + ll,1 + ll + 4));    replyString=replyString.substring(1 + ll + 4);    if (logger.isDebugEnabled()) {      logger.debug("Reply = \"" + replyString + "\"\n");    }    retval.type=t;    retval.reply=replyString;  } else {    retval.type=Const.ReplyReserved;    retval.reply=new String("Empty");  }  if (retval.type == Const.ReplyError)   throw new OracleExtractException("Error from C Oracle Extractor");  msgCount++;  return retval;}  }
class C{  public int decodeOpN(){  checkState(isOpCode());  return Script.decodeFromOpN(opcode);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(", exchangeType: ");  result.append(exchangeType);  result.append(')');  return result.toString();}  }
class C{  public static boolean isSystemApplication(Context context,String packageName){  if (context == null) {    return false;  }  return isSystemApplication(context.getPackageManager(),packageName);}  }
class C{  public int readRawVarint32() throws IOException {  byte tmp=readRawByte();  if (tmp >= 0) {    return tmp;  }  int result=tmp & 0x7f;  if ((tmp=readRawByte()) >= 0) {    result|=tmp << 7;  } else {    result|=(tmp & 0x7f) << 7;    if ((tmp=readRawByte()) >= 0) {      result|=tmp << 14;    } else {      result|=(tmp & 0x7f) << 14;      if ((tmp=readRawByte()) >= 0) {        result|=tmp << 21;      } else {        result|=(tmp & 0x7f) << 21;        result|=(tmp=readRawByte()) << 28;        if (tmp < 0) {          for (int i=0; i < 5; i++) {            if (readRawByte() >= 0) {              return result;            }          }          throw InvalidProtocolBufferNanoException.malformedVarint();        }      }    }  }  return result;}  }
class C{  private void readVersion(InputNode node,Object source,Label label) throws Exception {  Object value=readInstance(node,source,label);  Class expect=type.getType();  if (value != null) {    Version version=context.getVersion(expect);    Double actual=version.revision();    if (!value.equals(revision)) {      revision.compare(actual,value);    }  }}  }
class C{  public static Object[] convertParams(Object[] source,Class<?>[] target){  Object[] converted=new Object[target.length];  for (int i=0; i < target.length; i++) {    converted[i]=convert(source[i],target[i]);  }  return converted;}  }
class C{  public boolean usingVertexColors(){  return mUseVertexColors;}  }
class C{  public static TypeReference newTypeParameterReference(int sort,int paramIndex){  return new TypeReference((sort << 24) | (paramIndex << 16));}  }
class C{  @Override public void updateTime(int columnIndex,Time x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateTime(" + columnIndex + ", x);");    }    update(columnIndex,x == null ? (Value)ValueNull.INSTANCE : ValueTime.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static ConstantNode forInt(int i,StructuredGraph graph){  return unique(graph,createPrimitive(JavaConstant.forInt(i)));}  }
class C{  @Override public void onDisabled(Context context,Intent intent){  super.onDisabled(context,intent);  Toast.makeText(context,R.string.switch_admin_off,Toast.LENGTH_LONG).show();  Log.d(TAG,"onDisabled");}  }
class C{  private void onProfileImageClick(View v,boolean current){  IProfile profile=(IProfile)v.getTag(R.id.material_drawer_profile_header);  boolean consumed=false;  if (mOnAccountHeaderProfileImageListener != null) {    consumed=mOnAccountHeaderProfileImageListener.onProfileImageClick(v,profile,current);  }  if (!consumed) {    onProfileClick(v,current);  }}  }
class C{  public OptionSet removeSize1(){  this.size1=null;  return this;}  }
class C{  private Collator createFromRules(String fileName,ResourceLoader loader){  InputStream input=null;  try {    input=loader.openResource(fileName);    String rules=IOUtils.toString(input,"UTF-8");    return new RuleBasedCollator(rules);  } catch (  IOException e) {    throw new RuntimeException(e);  }catch (  ParseException e) {    throw new RuntimeException(e);  } finally {    IOUtils.closeQuietly(input);  }}  }
class C{  public ModularParser(String lineSeparator,List<String> languageIdentifers,List<String> categoryIdentifers,List<String> imageIdentifers,boolean showImageText,boolean deleteTags,boolean showMathTagContent,boolean calculateSrcSpans,MediaWikiTemplateParser templateParser){  setLineSeparator(lineSeparator);  setLanguageIdentifers(languageIdentifers);  setCategoryIdentifers(categoryIdentifers);  setImageIdentifers(imageIdentifers);  setShowImageText(showImageText);  setDeleteTags(deleteTags);  setShowMathTagContent(showMathTagContent);  setCalculateSrcSpans(calculateSrcSpans);  setTemplateParser(templateParser);}  }
class C{  public static Alert findByNameAndOwner(EntityManager em,String alertName,PrincipalUser owner){  requireArgument(em != null,"Entity manager can not be null.");  requireArgument(alertName != null && !alertName.isEmpty(),"Alert name cannot be null or empty.");  requireArgument(owner != null,"Owner cannot be null.");  TypedQuery<Alert> query=em.createNamedQuery("Alert.findByNameAndOwner",Alert.class);  query.setHint("javax.persistence.cache.storeMode","REFRESH");  try {    query.setParameter("name",alertName);    query.setParameter("owner",owner);    return query.getSingleResult();  } catch (  NoResultException ex) {    return null;  }}  }
class C{  public static void splashMessage(final String messageKey){  performInitialSettings();  if (RapidMiner.splashScreen != null) {    RapidMiner.splashScreen.setMessage(I18N.getMessage(I18N.getGUIBundle(),"gui.splash." + messageKey));  } else {    LogService.getRoot().config(I18N.getMessage(I18N.getGUIBundle(),"gui.splash." + messageKey));  }}  }
class C{  public Anonymous_action_1_ createAnonymous_action_1_(){  Anonymous_action_1_Impl anonymous_action_1_=new Anonymous_action_1_Impl();  return anonymous_action_1_;}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  SerializationHandler rhandler=transformer.getSerializationHandler();  try {    rhandler.startPrefixMapping(getPrefix(),getNamespace());    executeNSDecls(transformer);    rhandler.startElement(getNamespace(),getLocalName(),getRawName());  } catch (  SAXException se) {    throw new TransformerException(se);  }  TransformerException tException=null;  try {    super.execute(transformer);    if (null != m_avts) {      int nAttrs=m_avts.size();      for (int i=(nAttrs - 1); i >= 0; i--) {        AVT avt=(AVT)m_avts.get(i);        XPathContext xctxt=transformer.getXPathContext();        int sourceNode=xctxt.getCurrentNode();        String stringedValue=avt.evaluate(xctxt,sourceNode,this);        if (null != stringedValue) {          rhandler.addAttribute(avt.getURI(),avt.getName(),avt.getRawName(),"CDATA",stringedValue,false);        }      }    }    transformer.executeChildTemplates(this,true);  } catch (  TransformerException te) {    tException=te;  }catch (  SAXException se) {    tException=new TransformerException(se);  }  try {    rhandler.endElement(getNamespace(),getLocalName(),getRawName());  } catch (  SAXException se) {    if (tException != null)     throw tException; else     throw new TransformerException(se);  }  if (tException != null)   throw tException;  unexecuteNSDecls(transformer);  try {    rhandler.endPrefixMapping(getPrefix());  } catch (  SAXException se) {    throw new TransformerException(se);  }}  }
class C{  public static Angle rhumbDistance(LatLon p1,LatLon p2){  if (p1 == null || p2 == null) {    String message=Logging.getMessage("nullValue.LatLonIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double lat1=p1.getLatitude().radians;  double lon1=p1.getLongitude().radians;  double lat2=p2.getLatitude().radians;  double lon2=p2.getLongitude().radians;  if (lat1 == lat2 && lon1 == lon2)   return Angle.ZERO;  double dLat=lat2 - lat1;  double dLon=lon2 - lon1;  double q;  if (Math.abs(dLat) < NEAR_ZERO_THRESHOLD) {    q=Math.cos(lat1);  } else {    double dPhi=Math.log(Math.tan(lat2 / 2.0 + Math.PI / 4.0) / Math.tan(lat1 / 2.0 + Math.PI / 4.0));    q=dLat / dPhi;  }  if (Math.abs(dLon) > Math.PI) {    dLon=dLon > 0 ? -(2 * Math.PI - dLon) : (2 * Math.PI + dLon);  }  double distanceRadians=Math.sqrt(dLat * dLat + q * q * dLon* dLon);  return Double.isNaN(distanceRadians) ? Angle.ZERO : Angle.fromRadians(distanceRadians);}  }
class C{  public static boolean isWindowsNt(){  return winNt;}  }
class C{  public Matrix3 multiplyByRotation(double angleDegrees){  double c=Math.cos(Math.toRadians(angleDegrees));  double s=Math.sin(Math.toRadians(angleDegrees));  this.multiplyByMatrix(c,-s,0,s,c,0,0,0,1);  return this;}  }
class C{  public void createByConfiguration(){  removeAll();  Map<String,ExceptionHandlersConfiguration> map=AppBeans.getAll(ExceptionHandlersConfiguration.class);  List<ExceptionHandlersConfiguration> configurations=new ArrayList<>(map.values());  Collections.reverse(configurations);  for (  ExceptionHandlersConfiguration conf : configurations) {    for (    Class aClass : conf.getHandlerClasses()) {      try {        addHandler(ReflectionHelper.<ExceptionHandler>newInstance(aClass));      } catch (      NoSuchMethodException e) {        log.error("Unable to instantiate {}",aClass,e);      }    }  }  Map<String,GenericExceptionHandler> handlerMap=AppBeans.getAll(GenericExceptionHandler.class);  List<GenericExceptionHandler> handlers=new ArrayList<>(handlerMap.values());  Collections.sort(handlers,new OrderComparator());  for (  GenericExceptionHandler handler : handlers) {    addHandler(handler);  }}  }
class C{  public static boolean isSupportedOutputFormatType(String format,String type){  if (!isSupportedOutputFormat(format)) {    return false;  }  if (format == ThumbnailParameter.ORIGINAL_FORMAT && type == ThumbnailParameter.DEFAULT_FORMAT_TYPE) {    return true;  } else   if (format == ThumbnailParameter.ORIGINAL_FORMAT && type != ThumbnailParameter.DEFAULT_FORMAT_TYPE) {    return false;  } else   if (type == ThumbnailParameter.DEFAULT_FORMAT_TYPE) {    return true;  }  for (  String supportedType : getSupportedOutputFormatTypes(format)) {    if (supportedType.equals(type)) {      return true;    }  }  return false;}  }
class C{  public int available() throws IOException {  if (pos == -1) {    return tail - head - pad;  }  return pos - head;}  }
class C{  public JAMonArrayBufferListener(String name,BufferList list){  super(name,list);}  }
class C{  public void maybePerformFinishedAnimation(){  if (mAnimationProgress > ANIMATION_PROGRESS_STOPPED) {    return;  }  if (mAnimator != null) {    mAnimator.cancel();  }  setAnimationProgress(ANIMATION_PROGRESS_STARTED);  mAnimator=ObjectAnimator.ofFloat(this,"animationProgress",ANIMATION_PROGRESS_STARTED,ANIMATION_PROGRESS_COMPLETED);  mAnimator.start();}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public ImmutableSet<V> replaceValues(K key,Iterable<? extends V> values){  throw new UnsupportedOperationException();}  }
class C{  public static RegisterOperand moveIntoRegister(TypeReference type,Operator move_op,GenericRegisterPool pool,Instruction s,Operand op){  RegisterOperand rop=pool.makeTemp(type);  s.insertBefore(Move.create(move_op,rop,op));  rop=rop.copyD2U();  return rop;}  }
class C{  @Override public boolean onJsAlert(WebView view,String url,String message,JsResult result){  String logMsg=String.format("JS Alert '%s' received from %s",message,url);  Log.w(TAG,logMsg);  result.confirm();  return true;}  }
class C{  public void updateInfo(@NotNull final Machine machine){}  }
class C{  public InvocationDecoder createInvocationDecoder(){  return getInvocationDecoder();}  }
class C{  public static BufferedImage loadImage(String imgName){  try {    return ImageIO.read(GraphicsUtils.class.getClassLoader().getResource("org/jackhuang/hellominecraft/lookandfeel/images/" + imgName));  } catch (  Exception e) {    System.err.println("Error loading image \"org/jackhuang/hellominecraft/lookandfeel/images/" + imgName + "\"");    e.printStackTrace();  }  return null;}  }
class C{  protected R defaultAction(AnnotatedTypeMirror type,P p){  return null;}  }
class C{  protected void mergeLists(GossipManager gossipManager,RemoteGossipMember senderMember,List<GossipMember> remoteList){  for (  LocalGossipMember i : gossipManager.getDeadList()) {    if (i.getId().equals(senderMember.getId())) {      System.out.println(gossipManager.getMyself() + " caught a live one!");      LocalGossipMember newLocalMember=new LocalGossipMember(senderMember.getClusterName(),senderMember.getHost(),senderMember.getPort(),senderMember.getId(),senderMember.getHeartbeat(),gossipManager,gossipManager.getSettings().getCleanupInterval());      gossipManager.revivieMember(newLocalMember);      newLocalMember.startTimeoutTimer();    }  }  for (  GossipMember remoteMember : remoteList) {    if (remoteMember.getId().equals(gossipManager.getMyself().getId())) {      continue;    }    if (gossipManager.getMemberList().contains(remoteMember)) {      LocalGossipMember localMember=gossipManager.getMemberList().get(gossipManager.getMemberList().indexOf(remoteMember));      if (remoteMember.getHeartbeat() > localMember.getHeartbeat()) {        localMember.setHeartbeat(remoteMember.getHeartbeat());        localMember.resetTimeoutTimer();      }    } else     if (!gossipManager.getMemberList().contains(remoteMember) && !gossipManager.getDeadList().contains(remoteMember)) {      LocalGossipMember newLocalMember=new LocalGossipMember(remoteMember.getClusterName(),remoteMember.getHost(),remoteMember.getPort(),remoteMember.getId(),remoteMember.getHeartbeat(),gossipManager,gossipManager.getSettings().getCleanupInterval());      gossipManager.createOrRevivieMember(newLocalMember);      newLocalMember.startTimeoutTimer();    } else {      if (gossipManager.getDeadList().contains(remoteMember)) {        LocalGossipMember localDeadMember=gossipManager.getDeadList().get(gossipManager.getDeadList().indexOf(remoteMember));        if (remoteMember.getHeartbeat() > localDeadMember.getHeartbeat()) {          LocalGossipMember newLocalMember=new LocalGossipMember(remoteMember.getClusterName(),remoteMember.getHost(),remoteMember.getPort(),remoteMember.getId(),remoteMember.getHeartbeat(),gossipManager,gossipManager.getSettings().getCleanupInterval());          gossipManager.revivieMember(newLocalMember);          newLocalMember.startTimeoutTimer();          GossipService.LOGGER.debug("Removed remote member " + remoteMember.getAddress() + " from dead list and added to local member list.");        } else {          GossipService.LOGGER.debug("me " + gossipManager.getMyself());          GossipService.LOGGER.debug("sender " + senderMember);          GossipService.LOGGER.debug("remote " + remoteList);          GossipService.LOGGER.debug("live " + gossipManager.getMemberList());          GossipService.LOGGER.debug("dead " + gossipManager.getDeadList());        }      } else {        GossipService.LOGGER.debug("me " + gossipManager.getMyself());        GossipService.LOGGER.debug("sender " + senderMember);        GossipService.LOGGER.debug("remote " + remoteList);        GossipService.LOGGER.debug("live " + gossipManager.getMemberList());        GossipService.LOGGER.debug("dead " + gossipManager.getDeadList());      }    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.replaceData(0,4,"260030");  childData=child.getData();  assertEquals("characterdataReplaceDataExceedsLengthOfArgAssert","260030 North Ave. Dallas, Texas 98551",childData);}  }
class C{  private boolean queueCurrentSegmentJobs(){  jobQueue.clear();  workerList.get(0).giveTask(null,true);  timeForceNextSegment=System.currentTimeMillis() + SEGMENT_MAX_DELAY;  if (currentSegment >= STRIPMINE_MAX_LENGTH) {    onJobFinished();    return false;  }  int nextX=startX + (currentSegment * xDirection);  int nextZ=startZ + (currentSegment * zDirection);  if (currentSegment > 0 && currentSegment % 7 == 0) {    if (worldObj.getLightBrightness(new BlockPos(nextX,startY,nextZ)) < 10F) {      int event=ForgeHooks.onBlockBreakEvent(worldObj,worldObj.getWorldInfo().getGameType(),(EntityPlayerMP)workerList.get(0).master,new BlockPos(nextX - 2 * xDirection,startY,nextZ - 2 * zDirection));      if (event != -1) {        worldObj.setBlockState(new BlockPos(nextX - 2 * xDirection,startY,nextZ - 2 * zDirection),Blocks.torch.getStateFromMeta(0));      }    }  }  for (int len=0; len < 4; len++) {    if (worldObj.isAirBlock(new BlockPos(nextX - (xDirection * len),startY - 1,nextZ - (zDirection * len)))) {      jobQueue.add(new BlockTask_ReplaceBlock(this,null,nextX - (xDirection * len),startY - 1,nextZ - (zDirection * len),Blocks.dirt,0));    }  }  BlockTask_MineBlock nextTask=new BlockTask_MineBlock(this,null,nextX,startY,nextZ);  this.jobQueue.add(nextTask);  nextTask=new BlockTask_MineBlock(this,null,nextX,startY + 1,nextZ);  nextTask.disableDangerCheck=true;  this.jobQueue.add(nextTask);  checkBlockValuables(nextX,startY + 2,nextZ);  if (xDirection == 0) {    checkBlockValuables(nextX + 1,startY,nextZ);    checkBlockValuables(nextX - 1,startY,nextZ);    checkBlockValuables(nextX + 1,startY + 1,nextZ);    checkBlockValuables(nextX - 1,startY + 1,nextZ);  } else {    checkBlockValuables(nextX,startY,nextZ + 1);    checkBlockValuables(nextX,startY,nextZ - 1);    checkBlockValuables(nextX,startY + 1,nextZ + 1);    checkBlockValuables(nextX,startY + 1,nextZ - 1);  }  checkBlockValuables(nextX,startY - 1,nextZ);  return true;}  }
class C{  public boolean isDomainSuffix(String extension){  return domains.containsKey(extension);}  }
class C{  public int describeContents(){  return 0;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildTunnelArea(zone);}  }
class C{  public TreeBuild(){  m_colorTable=new Hashtable<String,Color>();  Colors ab=new Colors();  for (  NamedColor m_col : ab.m_cols) {    m_colorTable.put(m_col.m_name,m_col.m_col);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.STRING_LITERAL__VALUE:    setValue(VALUE_EDEFAULT);  return;case N4JSPackage.STRING_LITERAL__RAW_VALUE:setRawValue(RAW_VALUE_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:45.077 -0500",hash_original_method="E4096ABF23EF8731F97354B434FC290A",hash_generated_method="C3BB9F7E230940EFAA1C5C9B299BE664") public void certificate(SslCertificate certificate){  if (DebugFlags.LOAD_LISTENER) {    Log.v(LOGTAG,"LoadListener.certificate: " + certificate);  }  sendMessageInternal(obtainMessage(MSG_SSL_CERTIFICATE,certificate));}  }
class C{  private void initialize(){  if (isInitialized)   throw new IllegalStateException("may invoke method initialize() only once");  isInitialized=true;  final IExtensionRegistry registry=RegistryFactory.getRegistry();  if (registry != null) {    final IConfigurationElement[] configElems=registry.getConfigurationElementsFor(TESTERS_EXTENSION_POINT_ID);    for (    IConfigurationElement elem : configElems) {      try {        final EclipseTesterDescriptor descriptor=new EclipseTesterDescriptor(elem);        injector.injectMembers(descriptor);        register(descriptor);      } catch (      Exception ex) {        log.error("Error while reading extensions for extension point " + TESTERS_EXTENSION_POINT_ID,ex);      }    }  }}  }
class C{  public UserDeletionConstraintException(String message,Reason reason){  super(message);  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  @Override public void pool(){  disconnect();}  }
class C{  private void rInflate(XmlPullParser parser,Preference parent,final AttributeSet attrs) throws XmlPullParserException, IOException {  final int depth=parser.getDepth();  int type;  while (((type=parser.next()) != XmlPullParser.END_TAG || parser.getDepth() > depth) && type != XmlPullParser.END_DOCUMENT) {    if (type != XmlPullParser.START_TAG) {      continue;    }    final String name=parser.getName();    if (INTENT_TAG_NAME.equals(name)) {      final Intent intent;      try {        intent=Intent.parseIntent(getContext().getResources(),parser,attrs);      } catch (      IOException e) {        XmlPullParserException ex=new XmlPullParserException("Error parsing preference");        ex.initCause(e);        throw ex;      }      parent.setIntent(intent);    } else     if (EXTRA_TAG_NAME.equals(name)) {      getContext().getResources().parseBundleExtra(EXTRA_TAG_NAME,attrs,parent.getExtras());      try {        skipCurrentTag(parser);      } catch (      IOException e) {        XmlPullParserException ex=new XmlPullParserException("Error parsing preference");        ex.initCause(e);        throw ex;      }    } else {      final Preference item=createItemFromTag(name,attrs);      ((PreferenceGroup)parent).addItemFromInflater(item);      rInflate(parser,item,attrs);    }  }}  }
class C{  public Builder edgeLabelKey(final String edgeLabelKey){  this.edgeLabelKey=edgeLabelKey;  return this;}  }
class C{  public Response deleteUser(String username){  return restClient.delete("users/" + username,new HashMap<String,String>());}  }
class C{  @Override final public boolean isLeaf(){  return false;}  }
class C{  public boolean isZero(){  int i;  if (len == 0) {    return true;  }  for (i=0; i < blocks; i++) {    if (value[i] != 0) {      return false;    }  }  return true;}  }
class C{  @Override public String id(){  return vf.fromURI(uri);}  }
class C{  @SuppressWarnings("unchecked") public <T>T convertValue(Object fromValue,Class<T> toValueType) throws IllegalArgumentException {  return (T)_convert(fromValue,_typeFactory.constructType(toValueType));}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0xCDF8ECB9,version=150) public int sceHttpCreateConnectionWithURL(int templateId,PspString url,int unknown1){  HttpTemplate httpTemplate=getHttpTemplate(templateId);  HttpConnection httpConnection=new HttpConnection();  httpConnection.setUrl(url.getString());  httpTemplate.addHttpConnection(httpConnection);  return httpConnection.getId();}  }
class C{  public static byte[] externalize(byte[] buf,int offset,int len){  byte[] translated=new byte[len];  for (int j=0; j < len; j++) {    byte b=buf[offset + j];    if (b == '.')     translated[j]=(byte)'/'; else     translated[j]=b;  }  return translated;}  }
class C{  synchronized void addNumBytesUploaded(long numBytes){  numBytesUploaded+=numBytes;}  }
class C{  private void initHotkeys(){  setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,new HashSet<KeyStroke>());  final InputMap inputMap=this.getInputMap();  final ActionMap actionMap=getActionMap();  inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT,0),"LEFT");  actionMap.put("LEFT",m_leftAction);  inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT,InputEvent.SHIFT_DOWN_MASK),"shift LEFT");  actionMap.put("shift LEFT",m_leftAction);  inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT,0),"RIGHT");  actionMap.put("RIGHT",m_rightAction);  inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT,InputEvent.SHIFT_DOWN_MASK),"shift RIGHT");  actionMap.put("shift RIGHT",m_rightAction);  inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_UP,0),"UP");  actionMap.put("UP",m_upAction);  inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_UP,InputEvent.SHIFT_DOWN_MASK),"shift UP");  actionMap.put("shift UP",m_upAction);  inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN,0),"DOWN");  actionMap.put("DOWN",m_downAction);  inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN,InputEvent.SHIFT_DOWN_MASK),"shift DOWN");  actionMap.put("shift DOWN",m_downAction);  inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_DOWN,0),"PAGE_DOWN");  actionMap.put("PAGE_DOWN",m_pageDownAction);  inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_DOWN,InputEvent.SHIFT_DOWN_MASK),"shift PAGE_DOWN");  actionMap.put("shift PAGE_DOWN",m_pageDownAction);  inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_UP,0),"PAGE_UP");  actionMap.put("PAGE_UP",m_pageUpAction);  inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_PAGE_UP,InputEvent.SHIFT_DOWN_MASK),"shift PAGE_UP");  actionMap.put("shift PAGE_UP",m_pageUpAction);  inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_TAB,0),"TAB");  actionMap.put("TAB",m_tabAction);}  }
class C{  public static <T>LazyPVectorX<T> iterate(long limit,final T seed,final UnaryOperator<T> f){  return fromStreamS(ReactiveSeq.iterate(seed,f).limit(limit));}  }
class C{  private void doReverseKNN(RdKNNNode node,DBID oid,ModifiableDoubleDBIDList result){  if (node.isLeaf()) {    for (int i=0; i < node.getNumEntries(); i++) {      RdKNNLeafEntry entry=(RdKNNLeafEntry)node.getEntry(i);      double distance=distanceQuery.distance(entry.getDBID(),oid);      if (distance <= entry.getKnnDistance()) {        result.add(distance,entry.getDBID());      }    }  } else {    for (int i=0; i < node.getNumEntries(); i++) {      RdKNNDirectoryEntry entry=(RdKNNDirectoryEntry)node.getEntry(i);      double minDist=distanceQuery.minDist(entry,oid);      if (minDist <= entry.getKnnDistance()) {        doReverseKNN(getNode(entry),oid,result);      }    }  }}  }
class C{  public void saveToGeode(String regionPath,Properties opConf){  dsf.saveToGeode(regionPath,dsf.defaultConnectionConf(),propertiesToScalaMap(opConf));}  }
class C{  public static Vec4 intersectSegmentWithTerrain(Globe globe,Vec4 p1,Vec4 p2){  return intersectSegmentWithTerrain(globe,p1,p2,defaultSampleLength,defaultPrecision);}  }
class C{  TCacheEntryEventCollection(Iterable<CacheEntryEvent<? extends K,? extends V>> events,EventType eventType){  this.events=events;  this.eventType=eventType;}  }
class C{  PasswordSetting(Properties defaultProps,Properties props,String algorithm,String key,String defaultStr){  super(defaultProps,props,key,(isEncrypted(defaultStr) ? defaultStr : encrypt(algorithm,defaultStr)));  postInitWithAlgorithm(algorithm);  setPrivate(true);}  }
class C{  public void pointAt(int x,int y){  moveTo(x,y);  lineTo(x,y);}  }
class C{  static ExpressionTree skipParen(ExpressionTree node){  return ((ParenthesizedTree)node).getExpression();}  }
class C{  static MediaType createAudioType(String subtype){  return create(AUDIO_TYPE,subtype);}  }
class C{  public static ArrayList<String[]> linesToArray(ArrayList<String> inLine){  ArrayList<String[]> framesEnTab=new ArrayList<>();  for (int i=0; i < inLine.size(); i++) {    framesEnTab.add(lineToArray(inLine.get(i)));  }  return framesEnTab;}  }
class C{  @Override public void timeChanged(TimeChangeEvent timeChangeEvent){  reportDateOrTimeChange(null,timeChangeEvent);}  }
class C{  public void swipeFinished(long time){  if (!mInSwipe)   return;  mInSwipe=false;  setWarpState(true,true);  mEvenOutProgress=0.f;  onUpOrCancel(time);}  }
class C{  public void serialize(Output out,Object any){  serialize(out,null,null,null,any);}  }
class C{  public DoubleConstantOperand(double v){  value=v;  if (v == 0.) {    offset=Entrypoints.zeroDoubleField.getOffset();  } else   if (v == 1.) {    offset=Entrypoints.oneDoubleField.getOffset();  } else {    offset=Offset.zero();  }}  }
class C{  public static void success(String s){  System.out.println(ANSI_GREEN + "SUCCESS: " + s+ ANSI_RESET);}  }
class C{  public int generateChallengeToken(InetSocketAddress address){  int token=random.nextInt();  challengeTokens.put(address,token);  return token;}  }
class C{  @SuppressWarnings("unchecked") public static <T>T[] minus(T[] self,Object removeMe){  return (T[])minus((Iterable<T>)toList(self),removeMe).toArray();}  }
class C{  @Override public void captivePortalCheckComplete(){  mWifiManager.captivePortalCheckComplete();}  }
class C{  public CeylonRepoManagerBuilder cacheRepo(String cacheRepo){  this.cacheRepo=cacheRepo;  return this;}  }
class C{  RestaurantHolder distance(double distance){  if (distance >= 0.0) {    detail.setText(mContext.getString(Keys.isDistanceUnit(MILE) ? R.string.distance_mi : R.string.distance_km,distance));    detail.setCompoundDrawablesWithIntrinsicBounds(R.drawable.ic_action_location_found_small,0,0,0);  } else {    detail.setText(" ");    detail.setCompoundDrawablesWithIntrinsicBounds(0,0,0,0);  }  detailIsAddress=false;  return this;}  }
class C{  public void addImAddress(Im imAddress){  getImAddresses().add(imAddress);}  }
class C{  void open(int contextPrec,int ownPrec) throws IOException {  if (ownPrec < contextPrec)   out.write("(");}  }
class C{  protected static Coordinate[][] decompose(double dateline,Coordinate[] coordinates){  int offset=0;  ArrayList<Coordinate[]> parts=new ArrayList<>();  double shift=coordinates[0].x > DATELINE ? DATELINE : (coordinates[0].x < -DATELINE ? -DATELINE : 0);  for (int i=1; i < coordinates.length; i++) {    double t=intersection(coordinates[i - 1],coordinates[i],dateline);    if (!Double.isNaN(t)) {      Coordinate[] part;      if (t < 1) {        part=Arrays.copyOfRange(coordinates,offset,i + 1);        part[part.length - 1]=Edge.position(coordinates[i - 1],coordinates[i],t);        coordinates[offset + i - 1]=Edge.position(coordinates[i - 1],coordinates[i],t);        shift(shift,part);        offset=i - 1;        shift=coordinates[i].x > DATELINE ? DATELINE : (coordinates[i].x < -DATELINE ? -DATELINE : 0);      } else {        part=shift(shift,Arrays.copyOfRange(coordinates,offset,i + 1));        offset=i;      }      parts.add(part);    }  }  if (offset == 0) {    parts.add(shift(shift,coordinates));  } else   if (offset < coordinates.length - 1) {    Coordinate[] part=Arrays.copyOfRange(coordinates,offset,coordinates.length);    parts.add(shift(shift,part));  }  return parts.toArray(new Coordinate[parts.size()][]);}  }
class C{  public synchronized static SQLiteDatabase connection(Context context){  if (database == null) {    database=new CupboardDbHelper(context.getApplicationContext()).getWritableDatabase();  }  return database;}  }
class C{  public void addConstants(List<Assignment> constants,TypedSet modelValues,String attributeConstants,String attributeMVs){  addMVTypedSet(modelValues,"MV CONSTANT declarations ",attributeMVs);  Assignment constant;  Vector<String> symmetrySets=new Vector<String>();  for (int i=0; i < constants.size(); i++) {    constant=(Assignment)constants.get(i);    if (constant.isModelValue()) {      if (constant.isSetOfModelValues()) {        TypedSet setOfMVs=TypedSet.parseSet(constant.getRight());        addMVTypedSet(setOfMVs,"MV CONSTANT declarations",attributeConstants);      }    }  }  for (int i=0; i < constants.size(); i++) {    constant=(Assignment)constants.get(i);    if (constant.isModelValue()) {      if (constant.isSetOfModelValues()) {        cfgBuffer.append(COMMENT).append("MV CONSTANT definitions").append(CR);        tlaBuffer.append(COMMENT).append("MV CONSTANT definitions " + constant.getLeft()).append(CR);        String id=addArrowAssignment(constant,CONSTANT_SCHEME);        if (constant.isSymmetricalSet()) {          symmetrySets.add(id);        }        tlaBuffer.append(SEP).append(CR).append(CR);      } else {        cfgBuffer.append(COMMENT).append("CONSTANT declarations").append(CR);        cfgBuffer.append("CONSTANT").append(SPACE).append(constant.getLabel()).append(EQ).append(constant.getRight()).append(CR);      }    } else {    }  }  if (!symmetrySets.isEmpty()) {    String label=ModelWriter.getValidIdentifier(SYMMETRY_SCHEME);    tlaBuffer.append(COMMENT).append("SYMMETRY definition").append(CR);    cfgBuffer.append(COMMENT).append("SYMMETRY definition").append(CR);    tlaBuffer.append(label).append(DEFINES).append(CR);    for (int i=0; i < symmetrySets.size(); i++) {      tlaBuffer.append("Permutations(").append(symmetrySets.get(i)).append(")");      if (i != symmetrySets.size() - 1) {        tlaBuffer.append(" \\union ");      }    }    tlaBuffer.append(CR).append(SEP).append(CR).append(CR);    cfgBuffer.append("SYMMETRY").append(SPACE).append(label).append(CR);  }}  }
class C{  public ByteArrayOutputStream(int size){  if (size < 0) {    throw new IllegalArgumentException("Negative initial size: " + size);  }synchronized (this) {    needNewBuffer(size);  }}  }
class C{  public TLongFloatHashMap(int initialCapacity,float loadFactor,TLongHashingStrategy strategy){  super(initialCapacity,loadFactor,strategy);}  }
class C{  public SingleExpressionScript(TextResource expressionResource){  expression=expressionResource.resourceText();}  }
class C{  private Map<List<Node>,Set<Node>> minimalSpanningTreks(Graph graph,Set<Node> marginalNodes){  System.out.println("minspan\n" + graph + "\n"+ marginalNodes);  int size=marginalNodes.size();  System.out.println("Graph now\n" + graph);  currentGraph=graph;  currentMarginalSet=marginalNodes;  allPaths=Collections.synchronizedMap(new HashMap<Integer,Map<List<Node>,Set<Node>>>());  for (int k=2; k <= size; k++) {    allPaths.put(k,new HashMap<List<Node>,Set<Node>>());  }  currentNodePairs=allNodePairs(new ArrayList<>(marginalNodes));  totalThreads=currentNodePairs.size();  List<FindMinimalSpanningTrek> threads=new ArrayList<>();  for (int k=0; k < maxThreads; k++) {    threads.add(new FindMinimalSpanningTrek());  }  for (  FindMinimalSpanningTrek thread : threads) {    if (thread.thisThread.isAlive()) {      try {        thread.thisThread.join();      } catch (      InterruptedException e) {        throw new RuntimeException(e.getMessage());      }    }  }  currentThread=0;  System.out.println("allpaths \n" + allPaths);  Map<List<Node>,Set<Node>> minimalSpanningTreks=new HashMap<>();  for (int k=2; k < size; k++) {    Map<List<Node>,Set<Node>> smaller=allPaths.get(k);    Map<List<Node>,Set<Node>> larger=allPaths.get(k + 1);    for (    List<Node> subpath : smaller.keySet()) {      boolean isSubpath=false;      for (      List<Node> path : larger.keySet()) {        if (isSubpath(path,subpath)) {          isSubpath=true;          break;        }      }      if (!isSubpath) {        minimalSpanningTreks.put(subpath,smaller.get(subpath));      }    }    if (larger.isEmpty()) {      break;    } else     if (k == size - 1) {      minimalSpanningTreks.putAll(larger);    }  }  if (size == 2) {    minimalSpanningTreks.putAll(allPaths.get(2));  }  System.out.println("Found minimal spanning treks");  System.out.println(minimalSpanningTreks);  return minimalSpanningTreks;}  }
class C{  public Chunk3D(Coord4D coord){  xCoord=coord.xCoord >> 4;  zCoord=coord.zCoord >> 4;  dimensionId=coord.dimensionId;}  }
class C{  public void testCanonicalNames(){  TypeFactory tf=TypeFactory.defaultInstance();  JavaType t=tf.constructType(java.util.Calendar.class);  String can=t.toCanonical();  assertEquals("java.util.Calendar",can);  assertEquals(t,TypeFactory.fromCanonical(can));  t=tf.constructType(java.util.ArrayList.class);  can=t.toCanonical();  assertEquals("java.util.ArrayList<java.lang.Object>",can);  assertEquals(t,TypeFactory.fromCanonical(can));  t=tf.constructType(java.util.TreeMap.class);  can=t.toCanonical();  assertEquals("java.util.TreeMap<java.lang.Object,java.lang.Object>",can);  assertEquals(t,TypeFactory.fromCanonical(can));  t=tf.constructMapType(EnumMap.class,EnumForCanonical.class,String.class);  can=t.toCanonical();  assertEquals("java.util.EnumMap<org.codehaus.jackson.map.type.TestTypeFactory$EnumForCanonical,java.lang.String>",can);  assertEquals(t,TypeFactory.fromCanonical(can));}  }
class C{  public static boolean createNormal(Vector3 norm,ReadOnlyVector3 v0,ReadOnlyVector3 v1,ReadOnlyVector3 v2){  if (Double.isNaN(v0.getZ()) || Double.isNaN(v1.getZ()) || Double.isNaN(v2.getZ())) {    norm.set(0,0,0);    return (false);  }  Vector3 work=Vector3.fetchTempInstance();  norm.set(v1);  norm.subtractLocal(v0);  work.set(v2);  work.subtractLocal(v0);  norm.crossLocal(work);  norm.normalizeLocal();  Vector3.releaseTempInstance(work);  return (true);}  }
class C{  public boolean voted(){  return voted;}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public boolean isConcretModelClass(Class clazz){  return clazz.getAnnotation(Cf.class) != null;}  }
class C{  public void addKnowledgeGroup(KnowledgeGroup group){  this.knowledgeGroups.add(group);  OrderedPair<Set<MyNode>> o=getGroupRule(group);  knowledgeGroupRules.put(group,o);  if (group.getType() == KnowledgeGroup.FORBIDDEN) {    forbiddenRulesSpecs.add(o);  } else   if (group.getType() == KnowledgeGroup.REQUIRED) {    requiredRulesSpecs.add(o);  }}  }
class C{  public void onSaveInstanceState(Bundle outState){  outState.putBoolean("SlidingActivityHelper.open",mSlidingMenu.isMenuShowing());  outState.putBoolean("SlidingActivityHelper.secondary",mSlidingMenu.isSecondaryMenuShowing());}  }
class C{  public static Object readStaticField(final Class<?> cls,final String fieldName,final boolean forceAccess) throws IllegalAccessException {  Field field=FieldUtils.getField(cls,fieldName,forceAccess);  if (field == null) {    throw new IllegalArgumentException("Cannot locate field " + fieldName + " on "+ cls);  }  return FieldUtils.readStaticField(field,false);}  }
class C{  public ClassConstant addClass(String name){  ClassConstant entry=getClass(name);  if (entry != null)   return entry;  Utf8Constant utf8=addUTF8(name);  entry=new ClassConstant(this,_entries.size(),utf8.getIndex());  addConstant(entry);  return entry;}  }
class C{  public SendableAudioMessage.SendableAudioMessageBuilder duration(int duration){  this.duration=duration;  return this;}  }
class C{  private String auditTransactions(ConcurrentHashMap transactionsMap,long a_nLeakedTransactionTimer){  String auditReport="  Leaked transactions:\n";  int leakedTransactions=0;  long currentTime=System.currentTimeMillis();  LinkedList transactionsList=new LinkedList(transactionsMap.values());  Iterator it=transactionsList.iterator();  while (it.hasNext()) {    SIPTransaction sipTransaction=(SIPTransaction)it.next();    if (sipTransaction != null) {      if (sipTransaction.auditTag == 0) {        sipTransaction.auditTag=currentTime;      } else {        if (currentTime - sipTransaction.auditTag >= a_nLeakedTransactionTimer) {          leakedTransactions++;          TransactionState transactionState=sipTransaction.getState();          SIPRequest origRequest=sipTransaction.getOriginalRequest();          String origRequestMethod=(origRequest != null ? origRequest.getMethod() : null);          String transactionReport=sipTransaction.getClass().getName() + ", state: " + (transactionState != null ? transactionState.toString() : "null")+ ", OR: "+ (origRequestMethod != null ? origRequestMethod : "null");          auditReport+="    " + transactionReport + "\n";          removeTransaction(sipTransaction);          if (isLoggingEnabled())           stackLogger.logDebug("auditTransactions: leaked " + transactionReport);        }      }    }  }  if (leakedTransactions > 0) {    auditReport+="    Total: " + Integer.toString(leakedTransactions) + " leaked transactions detected and removed.\n";  } else {    auditReport=null;  }  return auditReport;}  }
class C{  private String replaceLanguageAndRegion(String str){  if (str.contains("%lang%") || str.contains("%region%")) {    Locale locale=Locale.getDefault();    str=str.replace("%lang%",locale.getLanguage().toLowerCase());    str=str.replace("%region%",locale.getCountry().toLowerCase());  }  return str;}  }
class C{  public void addHeaderView(View v){  addHeaderView(v,null,true);}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected boolean clear(){  super.removeAttributes();  ownerMessage.addEvent(Type.CLIENT_CLEAR_DATA,name,null);  notifyModified();  changeStats.incrementAndGet();  return true;}  }
class C{  public WriteStreamOld openWrite(){  if (_cb != null)   _cb.clear(); else   _cb=CharBuffer.allocate();  if (_ws == null)   _ws=new WriteStreamOld(this); else   _ws.init(this);  try {    _ws.setEncoding("utf-8");  } catch (  UnsupportedEncodingException e) {  }  return _ws;}  }
class C{  private void adjustBottom(RectF rect,float bottom,RectF bounds,int viewHeight,float snapMargin,float aspectRatio,boolean leftMoves,boolean rightMoves){  float newBottom=bottom;  if (newBottom > viewHeight) {    newBottom=viewHeight + (newBottom - viewHeight) / 1.05f;    mTouchOffset.y-=(newBottom - viewHeight) / 1.1f;  }  if (newBottom > bounds.bottom) {    mTouchOffset.y-=(newBottom - bounds.bottom) / 2f;  }  if (bounds.bottom - newBottom < snapMargin) {    newBottom=bounds.bottom;  }  if (newBottom - rect.top < mMinCropHeight) {    newBottom=rect.top + mMinCropHeight;  }  if (newBottom - rect.top > mMaxCropHeight) {    newBottom=rect.top + mMaxCropHeight;  }  if (bounds.bottom - newBottom < snapMargin) {    newBottom=bounds.bottom;  }  if (aspectRatio > 0) {    float newWidth=(newBottom - rect.top) * aspectRatio;    if (newWidth < mMinCropWidth) {      newBottom=Math.min(bounds.bottom,rect.top + mMinCropWidth / aspectRatio);      newWidth=(newBottom - rect.top) * aspectRatio;    }    if (newWidth > mMaxCropWidth) {      newBottom=Math.min(bounds.bottom,rect.top + mMaxCropWidth / aspectRatio);      newWidth=(newBottom - rect.top) * aspectRatio;    }    if (leftMoves && rightMoves) {      newBottom=Math.min(newBottom,Math.min(bounds.bottom,rect.top + bounds.width() / aspectRatio));    } else {      if (leftMoves && rect.right - newWidth < bounds.left) {        newBottom=Math.min(bounds.bottom,rect.top + (rect.right - bounds.left) / aspectRatio);        newWidth=(newBottom - rect.top) * aspectRatio;      }      if (rightMoves && rect.left + newWidth > bounds.right) {        newBottom=Math.min(newBottom,Math.min(bounds.bottom,rect.top + (bounds.right - rect.left) / aspectRatio));      }    }  }  rect.bottom=newBottom;}  }
class C{  public static byte[] updateHeaderSet(HeaderSet header,byte[] headerArray) throws IOException {  int index=0;  int length=0;  int headerID;  byte[] value=null;  byte[] body=null;  HeaderSet headerImpl=header;  try {    while (index < headerArray.length) {      headerID=0xFF & headerArray[index];switch (headerID & (0xC0)) {case 0x00:case 0x40:        boolean trimTail=true;      index++;    length=0xFF & headerArray[index];  length=length << 8;index++;length+=0xFF & headerArray[index];length-=3;index++;value=new byte[length];System.arraycopy(headerArray,index,value,0,length);if (length == 0 || (length > 0 && (value[length - 1] != 0))) {trimTail=false;}switch (headerID) {case HeaderSet.TYPE:try {if (trimTail == false) {headerImpl.setHeader(headerID,new String(value,0,value.length,"ISO8859_1"));} else {headerImpl.setHeader(headerID,new String(value,0,value.length - 1,"ISO8859_1"));}} catch (UnsupportedEncodingException e) {throw e;}break;case HeaderSet.AUTH_CHALLENGE:headerImpl.mAuthChall=new byte[length];System.arraycopy(headerArray,index,headerImpl.mAuthChall,0,length);break;case HeaderSet.AUTH_RESPONSE:headerImpl.mAuthResp=new byte[length];System.arraycopy(headerArray,index,headerImpl.mAuthResp,0,length);break;case HeaderSet.BODY:case HeaderSet.END_OF_BODY:body=new byte[length + 1];body[0]=(byte)headerID;System.arraycopy(headerArray,index,body,1,length);break;case HeaderSet.TIME_ISO_8601:try {String dateString=new String(value,"ISO8859_1");Calendar temp=Calendar.getInstance();if ((dateString.length() == 16) && (dateString.charAt(15) == 'Z')) {temp.setTimeZone(TimeZone.getTimeZone("UTC"));}temp.set(Calendar.YEAR,Integer.parseInt(dateString.substring(0,4)));temp.set(Calendar.MONTH,Integer.parseInt(dateString.substring(4,6)));temp.set(Calendar.DAY_OF_MONTH,Integer.parseInt(dateString.substring(6,8)));temp.set(Calendar.HOUR_OF_DAY,Integer.parseInt(dateString.substring(9,11)));temp.set(Calendar.MINUTE,Integer.parseInt(dateString.substring(11,13)));temp.set(Calendar.SECOND,Integer.parseInt(dateString.substring(13,15)));headerImpl.setHeader(HeaderSet.TIME_ISO_8601,temp);} catch (UnsupportedEncodingException e) {throw e;}break;default :if ((headerID & 0xC0) == 0x00) {headerImpl.setHeader(headerID,ObexHelper.convertToUnicode(value,true));} else {headerImpl.setHeader(headerID,value);}}index+=length;break;case 0x80:index++;try {headerImpl.setHeader(headerID,Byte.valueOf(headerArray[index]));} catch (Exception e) {}index++;break;case 0xC0:index++;value=new byte[4];System.arraycopy(headerArray,index,value,0,4);try {if (headerID != HeaderSet.TIME_4_BYTE) {if (headerID == HeaderSet.CONNECTION_ID) {headerImpl.mConnectionID=new byte[4];System.arraycopy(value,0,headerImpl.mConnectionID,0,4);} else {headerImpl.setHeader(headerID,Long.valueOf(convertToLong(value)));}} else {Calendar temp=Calendar.getInstance();temp.setTime(new Date(convertToLong(value) * 1000L));headerImpl.setHeader(HeaderSet.TIME_4_BYTE,temp);}} catch (Exception e) {throw new IOException("Header was not formatted properly");}index+=4;break;}}} catch (IOException e) {throw new IOException("Header was not formatted properly");}return body;}  }
class C{  public void addActionImport(Class<?> cls){  EdmActionImport actionImportAnnotation=cls.getAnnotation(EdmActionImport.class);  ActionImportImpl.Builder actionImportBuilder=new ActionImportImpl.Builder().setEntitySetName(actionImportAnnotation.entitySet()).setActionName(actionImportAnnotation.namespace() + "." + actionImportAnnotation.action()).setName(actionImportAnnotation.name()).setJavaClass(cls);  actionImportBuilders.add(actionImportBuilder);}  }
class C{  public boolean closeChannel() throws IOException {  openCloseLock.lock();  try {    if (this.isOpened()) {      fileChannel.force(true);      fileChannel.close();      if (log.isDebugEnabled()) {        log.info("Channel closed for path " + path + ". Next write position is "+ nextWritingPosition.get()+ ".");      }      return true;    } else {      if (log.isDebugEnabled()) {        log.info("Tried to close already closed channel for path " + path + ".");      }      return false;    }  }  finally {    openCloseLock.unlock();  }}  }
class C{  protected boolean declAlreadyDeclared(String prefix){  int startDecls=m_contextIndexes.peek();  java.util.Vector prefixMappings=m_prefixMappings;  int nDecls=prefixMappings.size();  for (int i=startDecls; i < nDecls; i+=2) {    String prefixDecl=(String)prefixMappings.elementAt(i);    if (prefixDecl == null)     continue;    if (prefixDecl.equals(prefix))     return true;  }  return false;}  }
class C{  private Polynomial generateBlindingPoly(byte[] seed,byte[] M){  IndexGenerator ig=new IndexGenerator(seed,params);  if (params.polyType == NTRUParameters.TERNARY_POLYNOMIAL_TYPE_PRODUCT) {    SparseTernaryPolynomial r1=new SparseTernaryPolynomial(generateBlindingCoeffs(ig,params.dr1));    SparseTernaryPolynomial r2=new SparseTernaryPolynomial(generateBlindingCoeffs(ig,params.dr2));    SparseTernaryPolynomial r3=new SparseTernaryPolynomial(generateBlindingCoeffs(ig,params.dr3));    return new ProductFormPolynomial(r1,r2,r3);  } else {    int dr=params.dr;    boolean sparse=params.sparse;    int[] r=generateBlindingCoeffs(ig,dr);    if (sparse) {      return new SparseTernaryPolynomial(r);    } else {      return new DenseTernaryPolynomial(r);    }  }}  }
class C{  public static Stopwatch createStarted(Ticker ticker){  return new Stopwatch(ticker).start();}  }
class C{  public static SnmpEngineId createEngineId(int port,int iana) throws UnknownHostException {  InetAddress address=null;  address=InetAddress.getLocalHost();  return createEngineId(address,port,iana);}  }
class C{  protected void afterCallback(){}  }
class C{  private void validateUserGroupBaseParam(UserGroupBaseParam param){  if (param == null) {    throw APIException.badRequests.resourceEmptyConfiguration("user group");  }  _log.debug("Validate user group param: {}",param);  ArgValidator.checkFieldNotNull(param.getDomain(),"domain");  ArgValidator.checkFieldNotNull(param.getLabel(),"label");  if (param.getLabel().contains("@")) {    throw APIException.badRequests.invalidParameter("label",param.getLabel());  }  if (!authNProviderExistsForDomain(param.getDomain())) {    throw APIException.badRequests.invalidParameter("domain",param.getDomain());  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public List<Patch> patch_fromText(String textline) throws IllegalArgumentException {  List<Patch> patches=new LinkedList<Patch>();  if (textline.length() == 0) {    return patches;  }  List<String> textList=Arrays.asList(textline.split("\n"));  LinkedList<String> text=new LinkedList<String>(textList);  Patch patch;  Pattern patchHeader=Pattern.compile("^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$");  Matcher m;  char sign;  String line;  while (!text.isEmpty()) {    m=patchHeader.matcher(text.getFirst());    if (!m.matches()) {      throw new IllegalArgumentException("Invalid patch string: " + text.getFirst());    }    patch=new Patch();    patches.add(patch);    patch.start1=Integer.parseInt(m.group(1));    if (m.group(2).length() == 0) {      patch.start1--;      patch.length1=1;    } else     if (m.group(2).equals("0")) {      patch.length1=0;    } else {      patch.start1--;      patch.length1=Integer.parseInt(m.group(2));    }    patch.start2=Integer.parseInt(m.group(3));    if (m.group(4).length() == 0) {      patch.start2--;      patch.length2=1;    } else     if (m.group(4).equals("0")) {      patch.length2=0;    } else {      patch.start2--;      patch.length2=Integer.parseInt(m.group(4));    }    text.removeFirst();    while (!text.isEmpty()) {      try {        sign=text.getFirst().charAt(0);      } catch (      IndexOutOfBoundsException e) {        text.removeFirst();        continue;      }      line=text.getFirst().substring(1);      line=line.replace("+","%2B");      try {        line=URLDecoder.decode(line,"UTF-8");      } catch (      UnsupportedEncodingException e) {        throw new Error("This system does not support UTF-8.",e);      }catch (      IllegalArgumentException e) {        throw new IllegalArgumentException("Illegal escape in patch_fromText: " + line,e);      }      if (sign == '-') {        patch.diffs.add(new Diff(Operation.DELETE,line));      } else       if (sign == '+') {        patch.diffs.add(new Diff(Operation.INSERT,line));      } else       if (sign == ' ') {        patch.diffs.add(new Diff(Operation.EQUAL,line));      } else       if (sign == '@') {        break;      } else {        throw new IllegalArgumentException("Invalid patch mode '" + sign + "' in: "+ line);      }      text.removeFirst();    }  }  return patches;}  }
class C{  public static BufferedWriter newWriter(Path self,String charset) throws IOException {  return newWriter(self,charset,false);}  }
class C{  public void onStartWearableActivityClick(View view){  LOGD(TAG,"Generating RPC");  new StartWearableActivityTask().execute();}  }
class C{  private static void appendPathElements(Document doc,String elementType,Element libraryElement,String[] paths){  if (paths.length > 0) {    Element child=doc.createElement(elementType);    libraryElement.appendChild(child);    for (int i=0; i < paths.length; i++) {      String path=paths[i];      Element entry=doc.createElement("entry");      child.appendChild(entry);      entry.setAttribute("path",path);    }  }}  }
class C{  private StringUtils(){}  }
class C{  public static <E,R>R ifelse(Optional<E> condition,Function<E,R> trueMap,R falseValue){  if (condition.isPresent()) {    return trueMap.apply(condition.get());  } else {    return falseValue;  }}  }
class C{  public void sendEventToAgent(final String event){synchronized (eventSocket) {    eventWriter.print(event);    eventWriter.flush();  }}  }
class C{  public static void detach(final JFrame parent,final IDebugger debugger){  checkArguments(parent,debugger);  if (!debugger.isConnected()) {    return;  }  try {    debugger.detach();  } catch (  final DebugExceptionWrapper exception) {    CUtilityFunctions.logException(exception);    final String innerMessage="E00073: " + "Could not send detach command";    final String innerDescription=CUtilityFunctions.createDescription("BinNavi could not send the detach command to the debug client.",new String[]{"There was a problem with the connection to the debug client."},new String[]{"The debugger remains attached to the debug target."});    NaviErrorDialog.show(parent,innerMessage,innerDescription,exception);  }}  }
class C{  public int export(ConstantPool target){  return target.addNameAndType(getName(),getType()).getIndex();}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:59.523 -0500",hash_original_method="B5236C2B50936EBB19164E0470E786D0",hash_generated_method="1DCB431931DDB47E6A2B64E4103C4F35") public TransformerFactoryConfigurationError(){  this.exception=null;}  }
class C{  public static Element parseXml(String token) throws ParserException {  XmlParserFactory parserFactory=XmlParserFactory.Factory.createSecureXmlParserFactory();  try {    DocumentBuilder docBuilder=parserFactory.newDocumentBuilder();    InputSource src=new InputSource(new StringReader(token));    return docBuilder.parse(src).getDocumentElement();  } catch (  ParserConfigurationException e) {    throw new ParserException("Internal creating XML parser",e);  }catch (  SAXException e) {    throw new ParserException("Error parsing token XML",e);  }catch (  IOException e) {    throw new ParserException("Unexpected error reading from in-memory stream",e);  }}  }
class C{  @Override public void userInitiatedMove(int square){  if (LOG.isDebugEnabled()) {    LOG.debug("userInitiatedMove " + getSan(square));  }  if (!isDisposed() && board.getSquare(square).getPiece() != EMPTY) {    board.getSquare(square).setHidingPiece(true);    board.redrawPiecesAndArtifacts(false);  }}  }
class C{  public static <I,A>Parser<I,Unit> optional(Parser<I,A> p){  return or(bind(p,null),retn(Unit.unit));}  }
class C{  private void write() throws FileWriteException {  generalSettings.store(properties);  properties.setInteger(DATABASES_COUNT,databases.size());  for (int i=0; i < databases.size(); i++) {    databases.get(i).storeWithKeyPrefix(properties,DATABASES_PREFIX + i + ".");  }  callGraphSettings.storeWithKeyPrefix(properties,"CallGraphSettings.");  flowGraphSettings.storeWithKeyPrefix(properties,"FlowGraphSettings.");  colors.storeWithKeyPrefix(properties,"Colors.");  debuggerColors.storeWithKeyPrefix(properties,"Debugger.Colors.");  try {    final File configDir=new File(filename).getParentFile();    if (configDir != null)     configDir.mkdirs();    properties.getProperties().storeToXML(new FileOutputStream(filename),Constants.PROJECT_NAME_VERSION);  } catch (  final IOException e) {    throw new FileWriteException(e);  }}  }
class C{  private void verify(byte[][][] docValues,int[] docIDs,int numDims,int numBytesPerDim) throws Exception {  try (Directory dir=getDirectory(docValues.length)){    int maxPointsInLeafNode=TestUtil.nextInt(random(),50,1000);    double maxMB=(float)3.0 + (3 * random().nextDouble());    verify(dir,docValues,docIDs,numDims,numBytesPerDim,maxPointsInLeafNode,maxMB);  } }  }
class C{  @Override public boolean execute(int edMode,byte[] inputText,int offset,int len){  try {    if (Cipher.ENCRYPT_MODE == edMode) {      ci.init(Cipher.ENCRYPT_MODE,this.key);      pbeParams=ci.getParameters();    } else {      ci.init(Cipher.DECRYPT_MODE,this.key,pbeParams);    }    byte[] outputText=ci.doFinal(inputText,offset,len);    int myoff=offset / 2;    int off=ci.update(inputText,offset,len,inputText,myoff);    ci.doFinal(inputText,myoff + off);    if (this.algo.endsWith("AES_256")) {      out.print("Expected exception uncaught, " + "keyStrength > 128 within " + this.algo);      return false;    }    return equalsBlock(inputText,myoff,outputText,0,outputText.length);  } catch (  Exception ex) {    if ((ex instanceof InvalidKeyException) && this.algo.endsWith("AES_256")) {      out.println("Expected InvalidKeyException exception: " + ex.getMessage());      return true;    }    out.println("Catch unexpected exception within " + algo);    ex.printStackTrace(out);    return false;  }}  }
class C{  public FilterJoinBuilder filterName(String filterName){  this.filterName=filterName;  return this;}  }
class C{  private boolean shouldGenerateParts(int wordType){  return (has(GENERATE_WORD_PARTS) && isAlpha(wordType)) || (has(GENERATE_NUMBER_PARTS) && isDigit(wordType));}  }
class C{  public void testTwoOfSameBinding() throws Exception {  Expression expr=JavascriptCompiler.compile("_score + _score");  SimpleBindings bindings=new SimpleBindings();  bindings.add(new SortField("_score",SortField.Type.SCORE));  Sort sort=new Sort(expr.getSortField(bindings,true));  Query query=new TermQuery(new Term("body","contents"));  TopFieldDocs td=searcher.search(query,3,sort,true,true);  for (int i=0; i < 3; i++) {    FieldDoc d=(FieldDoc)td.scoreDocs[i];    float expected=2 * d.score;    float actual=((Double)d.fields[0]).floatValue();    assertEquals(expected,actual,CheckHits.explainToleranceDelta(expected,actual));  }}  }
class C{  private boolean isIndirectParentValue(){  boolean result=false;  int tabNo=m_vo.TabNo;  int currentLevel=Env.getContextAsInt(m_vo.ctx,m_vo.WindowNo,tabNo,GridTab.CTX_TabLevel);  if (tabNo > 1 && currentLevel > 1) {    while (tabNo >= 1 && !result) {      tabNo--;      int level=Env.getContextAsInt(m_vo.ctx,m_vo.WindowNo,tabNo,GridTab.CTX_TabLevel);      if (level > 0 && level < currentLevel) {        String linkColumn=Env.getContext(m_vo.ctx,m_vo.WindowNo,tabNo,GridTab.CTX_LinkColumnName);        if (m_vo.ColumnName.equals(linkColumn)) {          result=true;          log.config(result + " - Link(" + linkColumn+ ", W="+ m_vo.WindowNo+ ",T="+ m_vo.TabNo+ ") = "+ m_vo.ColumnName);        }        currentLevel=level;      }    }  }  return result;}  }
class C{  private Control createHorizontalSeparator(Composite parent){  Label separator=new Label(parent,SWT.SEPARATOR | SWT.HORIZONTAL | SWT.LINE_DOT);  GridDataFactory.fillDefaults().align(SWT.FILL,SWT.CENTER).grab(true,false).applyTo(separator);  return separator;}  }
class C{  static Predicate fieldMatch(String field,Enum value){  return fieldMatch(field,value.name(),true);}  }
class C{  public boolean equalsTransportAddress(Object obj){  return super.equals(obj) && (((TransportAddress)obj).getTransport() == getTransport());}  }
class C{  public void testDumpLoad() throws FileNotFoundException, IOException {  System.out.println("dumpLoad");  FileInputStream fis=null;  DumpParser instance=null;  try {    fis=new FileInputStream("test/none/jrockit_15_dump.txt");    Map dumpMap=new HashMap();    Vector topNodes=new Vector();    instance=DumpParserFactory.get().getDumpParserForLogfile(fis,dumpMap,false,0);    assertTrue(instance instanceof BeaJDKParser);    while (instance.hasMoreDumps()) {      topNodes.add(instance.parseNext());    }  }  finally {    if (instance != null) {      instance.close();    }    if (fis != null) {      fis.close();    }  }}  }
class C{  public synchronized boolean removeSampler(Sampler sampler){  if (tracerPool == null) {    throwClientError(toString() + " is closed.");  }  Sampler[] samplers=curSamplers;  for (int i=0; i < samplers.length; i++) {    if (samplers[i] == sampler) {      Sampler[] newSamplers=new Sampler[samplers.length - 1];      System.arraycopy(samplers,0,newSamplers,0,i);      System.arraycopy(samplers,i + 1,newSamplers,i,samplers.length - i - 1);      curSamplers=newSamplers;      return true;    }  }  return false;}  }
class C{  public static boolean intersectRayCircle(float originX,float originY,float dirX,float dirY,float centerX,float centerY,float radiusSquared,Vector2f result){  float Lx=centerX - originX;  float Ly=centerY - originY;  float tca=Lx * dirX + Ly * dirY;  float d2=Lx * Lx + Ly * Ly - tca * tca;  if (d2 > radiusSquared)   return false;  float thc=(float)Math.sqrt(radiusSquared - d2);  float t0=tca - thc;  float t1=tca + thc;  if (t0 < t1 && t1 >= 0.0f) {    result.x=t0;    result.y=t1;    return true;  }  return false;}  }
class C{  public void checkPackageAccess(final String pkgname){  super.checkPackageAccess(pkgname);  for (Iterator iter=restrictedPackages.iterator(); iter.hasNext(); ) {    String pkg=(String)iter.next();    if (pkgname.equals(pkg) || pkgname.startsWith(pkg + ".")) {      checkPermission(new java.lang.RuntimePermission("accessClassInPackage." + pkgname));    }  }}  }
class C{  public void add(final Number operand){  this.value+=operand.intValue();}  }
class C{  @Override public URI toVertexURI(final Object key){  return toURI(key.toString());}  }
class C{  @Override public void process(WatchedEvent event){  if (Event.EventType.None.equals(event.getType())) {    return;  }synchronized (this) {    cachedCollections=null;  }}  }
class C{  public double R2(){  return R2;}  }
class C{  private void addGroup(){  addNeurons();  NeuronGroup ng=groupPanel.generateNeuronGroup();  if (ng != null) {    networkPanel.getNetwork().transferNeuronsToGroup(addedNeurons,ng);    networkPanel.getNetwork().addGroup(ng);    ng.setLayout(selectLayout.getCurrentLayout());    networkPanel.repaint();  }}  }
class C{  @Override protected void includeProperties(Set<Property> allProperties){  super.includeProperties(allProperties);  nodes.forEach(null);}  }
class C{  @Override protected boolean usePortal(final Player player){  if (!nextTo(player)) {    player.sendPrivateText("You must stand nearer to use the orb.");    return false;  }  Location location=getRandomLocation(player);  if (location == null) {    player.sendPrivateText("You can not concentrate well enough to use this orb.");    return false;  }  Spot spot=getRandomLocation(player).getSpot();  if (spot == null) {    logger.error("Failed to determine destination spot.");    return false;  }  if (player.teleport(spot.getZone(),spot.getX(),spot.getY(),null,null)) {    player.stop();  }  return true;}  }
class C{  public void stop(){  if (isStarted) {    isStarted=false;    invalidate();  }}  }
class C{  protected int reportReturn(String methodCall,int value){  reportAllReturns(methodCall,"" + value);  return value;}  }
class C{  void scrapActiveViews(){  final View[] activeViews=this.activeViews;  final int[] activeViewTypes=this.activeViewTypes;  final boolean multipleScraps=viewTypeCount > 1;  SparseArray<View> scrapViews=currentScrapViews;  final int count=activeViews.length;  for (int i=count - 1; i >= 0; i--) {    final View victim=activeViews[i];    if (victim != null) {      int whichScrap=activeViewTypes[i];      activeViews[i]=null;      activeViewTypes[i]=-1;      if (!shouldRecycleViewType(whichScrap)) {        continue;      }      if (multipleScraps) {        scrapViews=this.scrapViews[whichScrap];      }      scrapViews.put(i,victim);      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {        victim.setAccessibilityDelegate(null);      }    }  }  pruneScrapViews();}  }
class C{  private void notifyAdditionalOnScrollStateChangedListener(RecyclerView recyclerView,int newState){  if (mAdditionalOnScrollListener != null) {    mAdditionalOnScrollListener.onScrollStateChanged(recyclerView,newState);  }}  }
class C{  public static void addSentenceTopicMeta(Vertex question,Vertex answer,String topic,Network network){  if (topic == null || topic.trim().isEmpty()) {    clearSentenceMeta(question,answer,Primitive.TOPIC,network);  } else {    Vertex topicFragment=network.createFragment(topic);    topicFragment.addRelationship(Primitive.INSTANTIATION,Primitive.TOPIC);    network.createVertex(Primitive.TOPIC).addRelationship(Primitive.INSTANCE,topicFragment);    topicFragment.addRelationship(Primitive.QUESTION,question);    Relationship relationship=question.getRelationship(Primitive.RESPONSE,answer);    if (relationship != null) {      Vertex meta=network.createMeta(relationship);      meta.setRelationship(Primitive.TOPIC,topicFragment);    }    network.checkReduction(question);    Collection<Relationship> synonyms=question.getRelationships(Primitive.SYNONYM);    if (synonyms != null) {      for (      Relationship synonym : synonyms) {        relationship=synonym.getTarget().getRelationship(Primitive.RESPONSE,answer);        if (relationship != null) {          Vertex meta=network.createMeta(relationship);          meta.setRelationship(Primitive.TOPIC,topicFragment);        }      }    }  }}  }
class C{  public void testQueryTablesPreventCrossShardQuery() throws Exception {}  }
class C{  private TrialVersionHandler(){}  }
class C{  public static JSONArray rowToJSONArray(JSONTokener x) throws JSONException {  JSONArray ja=new JSONArray();  for (; ; ) {    String value=getValue(x);    char c=x.next();    if (value == null || (ja.length() == 0 && value.length() == 0 && c != ',')) {      return null;    }    ja.put(value);    for (; ; ) {      if (c == ',') {        break;      }      if (c != ' ') {        if (c == '\n' || c == '\r' || c == 0) {          return ja;        }        throw x.syntaxError("Bad character '" + c + "' ("+ (int)c+ ").");      }      c=x.next();    }  }}  }
class C{  public String[] commandStationOptions(){  return new String[]{jmri.jmrix.loconet.LnCommandStationType.COMMAND_STATION_PR2_ALONE.getName()};}  }
class C{  public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (cv != null) {    return cv.visitTypeAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  public void write(String s,int off,int len) throws IOException {  ensureOpen();  if (bufferSize == 0) {    initOut();    out.write(s,off,len);    return;  }  int b=off, t=off + len;  while (b < t) {    int d=min(getRemaining(),t - b);    s.getChars(b,b + d,buf.buf,buf.pos);    b+=d;    buf.pos+=d;    if (getRemaining() == 0)     if (autoFlush)     flushBuffer(); else     bufferOverflow();  }}  }
class C{  void waitUntilUpdateDBDone(){synchronized (mPendingWritesLock) {    while (sUpdatingDB) {      try {        Thread.sleep(100);      } catch (      InterruptedException e) {      }    }    return;  }}  }
class C{  private String makeTimesText(long startTime,long endTime){  String startTimeText=makeTimeText(startTime,fixedStartTime);  String endTimeText=makeTimeText(endTime,fixedEndTime);  String text=startTimeText + " - " + endTimeText;  if (fixedStartTime <= 0 && currentRange > 0) {    text+=" (" + duration(currentRange) + "h)";  }  return text;}  }
class C{  public Long exists(final byte[]... keys){  checkIsInMultiOrPipeline();  client.exists(keys);  return client.getIntegerReply();}  }
class C{  public TimePeriodValues createCopy(int start,int end) throws CloneNotSupportedException {  TimePeriodValues copy=(TimePeriodValues)super.clone();  copy.data=new ArrayList();  if (this.data.size() > 0) {    for (int index=start; index <= end; index++) {      TimePeriodValue item=(TimePeriodValue)this.data.get(index);      TimePeriodValue clone=(TimePeriodValue)item.clone();      try {        copy.add(clone);      } catch (      SeriesException e) {        System.err.println("Failed to add cloned item.");      }    }  }  return copy;}  }
class C{  public static String nullToEmpty(@Nullable String string){  return (string == null) ? "" : string;}  }
class C{  private void emitCode(){  LinkedList<Instantiation> worklist=new LinkedList<Instantiation>();  worklist.add(new Instantiation(null,mainSubroutine));  InsnList newInstructions=new InsnList();  List<TryCatchBlockNode> newTryCatchBlocks=new ArrayList<TryCatchBlockNode>();  List<LocalVariableNode> newLocalVariables=new ArrayList<LocalVariableNode>();  while (!worklist.isEmpty()) {    Instantiation inst=worklist.removeFirst();    emitSubroutine(inst,worklist,newInstructions,newTryCatchBlocks,newLocalVariables);  }  instructions=newInstructions;  tryCatchBlocks=newTryCatchBlocks;  localVariables=newLocalVariables;}  }
class C{  private void printDocument(PO document,String printFormantName,int documentNo){  StringBuffer resultText=new StringBuffer(Msg.translate(Env.getCtx(),"DocumentNo") + " : " + document.get_ValueAsString("DocumentNo"));  result=result == null ? " " + resultText.toString() : result + " " + resultText.toString();  IPrintDocument IPrintDocument;  if (Ini.isClient())   IPrintDocument=getPrintDocument("org.eevolution.form.VPrintDocument"); else   IPrintDocument=getPrintDocument("org.eevolution.form.WPrintDocument");  IPrintDocument.print(document,printFormantName,documentNo);}  }
class C{  public void reset() throws java.io.IOException {  return;}  }
class C{  public void fireGenerateEvent(int eventType,String data){}  }
class C{  private static List<? extends PlanElement> clone(List<? extends PlanElement> trip){  final List<PlanElement> clone=new ArrayList<PlanElement>(trip.size());  for (  PlanElement pe : trip) {    if (pe instanceof Leg)     clone.add(clone((Leg)pe)); else     if (pe instanceof Activity)     clone.add(clone((Activity)pe)); else     throw new RuntimeException(pe.getClass().getName() + "???");  }  return clone;}  }
class C{  public void postCommit(boolean jobSuccessful,Configuration conf) throws RetryException, UnrecoverableException {  if (jobSuccessful) {    JdbcOutputFormat.finalizeOutput(conf);  } else {    JdbcOutputFormat.rollback(conf);  }}  }
class C{  private void addHyperlinkToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so,true);}  }
class C{  public void terminate(){}  }
class C{  public ReferencesParser(String references){  super(references);}  }
class C{  public AccessControlContext(ProtectionDomain context[]){  if (context.length == 0) {    this.context=null;  } else   if (context.length == 1) {    if (context[0] != null) {      this.context=context.clone();    } else {      this.context=null;    }  } else {    List<ProtectionDomain> v=new ArrayList<>(context.length);    for (int i=0; i < context.length; i++) {      if ((context[i] != null) && (!v.contains(context[i])))       v.add(context[i]);    }    if (!v.isEmpty()) {      this.context=new ProtectionDomain[v.size()];      this.context=v.toArray(this.context);    }  }}  }
class C{  public DisposableObjectSet(final int initialCapacity){  super(initialCapacity);}  }
class C{  @Override public void write(int b) throws IOException {  flushBits();  out.write(b);}  }
class C{  public RapidBarPainter(){  this(0.0,0.3,0.7);}  }
class C{  private void handleNewConnection(AsynchronousSocketChannel channel){  Client client=new Client(channel,new ClientReader(this,new NameReader(this)));  try {    channel.setOption(StandardSocketOptions.TCP_NODELAY,true);  } catch (  IOException e) {  }  connections.add(client);  client.run();}  }
class C{  private void pop(final int elements){  if (outputStackTop >= elements) {    outputStackTop-=elements;  } else {    owner.inputStackTop-=elements - outputStackTop;    outputStackTop=0;  }}  }
class C{  @Override public int read() throws IOException {  if (closed) {    throw new IOException("Attempted read from closed stream.");  }  if (eof) {    return -1;  }  if (pos >= chunkSize) {    nextChunk();    if (eof) {      return -1;    }  }  pos++;  return in.read();}  }
class C{  public static String trimLeadingTabsAndSpaces(String line){  int size=line.length();  int start=size;  for (int i=0; i < size; i++) {    char c=line.charAt(i);    if (!IndentManipulation.isIndentChar(c)) {      start=i;      break;    }  }  if (start == 0)   return line; else   if (start == size)   return ""; else   return line.substring(start);}  }
class C{  @Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {  id=in.readInt();}  }
class C{  public BatchFraction threadPool(final String name,final int maxThreads,final int keepAliveTime,final TimeUnit keepAliveUnits){  final ThreadPool<?> threadPool=new ThreadPool<>(name);  threadPool.maxThreads(maxThreads).keepaliveTime("time",Integer.toBinaryString(keepAliveTime)).keepaliveTime("unit",keepAliveUnits.name().toLowerCase(Locale.ROOT));  return threadPool(threadPool);}  }
class C{  InnerDisplay2D(double width,double height){  this.width=width;  this.height=height;  setupHints(false,false,false);}  }
class C{  public boolean isInsteon(String systemName){  if ((!aCodes.reset(systemName).matches()) || (!validSystemNameFormat(systemName,aCodes.group(2).charAt(0)))) {    return false;  } else {    if (hCodes.reset(systemName).matches() && hCodes.groupCount() == 4) {      try {        return false;      } catch (      Exception e) {        log.error("illegal character in house code field system name: " + systemName);        return false;      }    }  }  return true;}  }
class C{  public void addExtension(Extension extension){  fExtensions.add(extension);}  }
class C{  public SharedPreferences putBoolean(String key,boolean value){  editor.putBoolean(key,value);  return this;}  }
class C{  private static final void readUtilityValues(PlanCalcScoreConfigGroup config){  for (  ActivityParams params : config.getActivityParams()) {    ActivityUtilityParameters.Builder factory=new ActivityUtilityParameters.Builder(params);    if (params.getActivityType().equals(PtConstants.TRANSIT_ACTIVITY_TYPE)) {      factory.setScoreAtAll(false);    }    utilParams.put(params.getActivityType(),factory.build());  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public boolean isSatisfied(final HashMap<ICondition,Boolean> testedConditions,final IDelegateBridge aBridge){  if (testedConditions == null) {    throw new IllegalStateException("testedCondititions cannot be null");  }  if (testedConditions.containsKey(this)) {    return testedConditions.get(this);  }  return areConditionsMet(new ArrayList<>(this.getConditions()),testedConditions,this.getConditionType()) != this.getInvert();}  }
class C{  public static mat4 r_sub(mat4 matA,mat4 matB){  float[] a=matA.m;  float[] b=matB.m;  mat4 result=new mat4();  for (int i=0; i < 16; ++i) {    result.m[i]=a[i] - b[i];  }  return result;}  }
class C{  public void evalute(Path path){  Node lastNode=path.getLastNode();  Path bestPath=mMetrics.get(lastNode.getState());  if (bestPath == null) {    mMetrics.put(lastNode.getState(),path);  } else {    if (path.getPathMetric() < bestPath.getPathMetric()) {      path.setSurvivor(false);    } else     if (path.getPathMetric() > bestPath.getPathMetric()) {      mMetrics.put(lastNode.getState(),path);      bestPath.setSurvivor(false);    }  }  if (path.getPathMetric() > mBestMetric) {    mBestMetric=path.getPathMetric();  }}  }
class C{  public Builder defaultLocation(GeoPoint point){  this.defaultLocations.add(point.geohash());  return this;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  double x, y;  int progress;  int i, n;  double[][] vertices=null;  int numFeatures;  int oneHundredthTotal;  ShapeType shapeType, outputShapeType;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    if (shapeType.getBaseType() != ShapeType.POLYGON && shapeType.getBaseType() != ShapeType.POLYLINE) {      showFeedback("This tool only works with shapefiles of a polygon or line base shape type.");      return;    }    outputShapeType=ShapeType.POINT;    int numOutputFields=input.getAttributeTable().getFieldCount() + 1;    int numInputFields=input.getAttributeTable().getFieldCount();    DBFField[] inputFields=input.getAttributeTable().getAllFields();    DBFField fields[]=new DBFField[numOutputFields];    fields[0]=new DBFField();    fields[0].setName("PARENT_ID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    System.arraycopy(inputFields,0,fields,1,numInputFields);    ShapeFile output=new ShapeFile(outputFile,outputShapeType,fields);    output.setProjectionStringFromOtherShapefile(input);    numFeatures=input.getNumberOfRecords();    oneHundredthTotal=numFeatures / 100;    n=0;    progress=0;    int recordNum;    for (    ShapeFileRecord record : input.records) {      recordNum=record.getRecordNumber();      Object[] attData=input.getAttributeTable().getRecord(recordNum - 1);      vertices=new double[0][0];switch (shapeType) {case POLYGON:        whitebox.geospatialfiles.shapefile.Polygon recPolygon=(whitebox.geospatialfiles.shapefile.Polygon)(record.getGeometry());      vertices=recPolygon.getPoints();    break;case POLYGONZ:  PolygonZ recPolygonZ=(PolygonZ)(record.getGeometry());vertices=recPolygonZ.getPoints();break;case POLYGONM:PolygonM recPolygonM=(PolygonM)(record.getGeometry());vertices=recPolygonM.getPoints();break;case POLYLINE:PolyLine recPolyline=(PolyLine)(record.getGeometry());vertices=recPolyline.getPoints();break;case POLYLINEZ:PolyLineZ recPolylineZ=(PolyLineZ)(record.getGeometry());vertices=recPolylineZ.getPoints();break;case POLYLINEM:PolyLineM recPolylineM=(PolyLineM)(record.getGeometry());vertices=recPolylineM.getPoints();break;}for (i=0; i < vertices.length; i++) {x=vertices[i][0];y=vertices[i][1];Object[] rowData=new Object[numOutputFields];rowData[0]=(double)recordNum - 1;System.arraycopy(attData,0,rowData,1,numInputFields);output.addRecord(new whitebox.geospatialfiles.shapefile.Point(x,y),rowData);}n++;if (n >= oneHundredthTotal) {n=0;if (cancelOp) {cancelOperation();return;}progress++;updateProgress(progress);}}output.write();updateProgress("Displaying vector: ",0);returnData(outputFile);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public boolean isSafeMethod(SootMethod m){  return safe_methods.contains(m);}  }
class C{  private static boolean isValidSize(final int size){  return size == 0 || size == 1 || size == 2 || size == 4 || size == 8;}  }
class C{  public boolean isOffHeap(){  return false;}  }
class C{  final public MutableString delete(final CharSet s){  final int length=length();  final char[] a=array;  int l=0;  for (int i=0; i < length; i++)   if (!s.contains(a[i]))   a[l++]=a[i];  if (l != length) {    if (hashLength < 0) {      hashLength=-1;      array=CharArrays.trim(array,l);    } else     hashLength=l;  }  return this;}  }
class C{  public PatternNotExpr(){}  }
class C{  @Override public boolean equals(Object other){  if (other == null) {    return false;  } else   if (!(other instanceof PeerNetwork)) {    return false;  } else   if (other.getClass() != this.getClass()) {    return false;  } else   if (((PeerNetwork)other).getBluetoothDevice() == null) {    return this.getBluetoothDevice() == null;  }  return ((PeerNetwork)other).getBluetoothDevice().equals(this.getBluetoothDevice());}  }
class C{  private static boolean isComposingCharOrSurrogate(char c){  if (UCharacter.isHighSurrogate(c) || UCharacter.isLowSurrogate(c)) {    return true;  }  return isComposingChar(c);}  }
class C{  @Override public String toString(){  Map<Assignment,Double> sortedTable=InferenceUtils.getNBest(table,Math.max(table.size(),1));  String str="";  for (  Entry<Assignment,Double> entry : sortedTable.entrySet()) {    String prob=StringUtils.getShortForm(entry.getValue());    str+="P(" + entry.getKey() + "):="+ prob+ "\n";  }  return (str.length() > 0) ? str.substring(0,str.length() - 1) : str;}  }
class C{  private String issueExpense(){  MTimeExpense expense=new MTimeExpense(getCtx(),m_S_TimeExpense_ID,get_TrxName());  if (!expense.isProcessed())   throw new IllegalArgumentException("Time+Expense not processed - " + expense);  MTimeExpenseLine[] expenseLines=expense.getLines(false);  int counter=0;  for (int i=0; i < expenseLines.length; i++) {    if (expenseLines[i].getM_Product_ID() == 0)     continue;    if (expenseLines[i].getQty() == null || expenseLines[i].getQty().signum() == 0)     continue;    if (expenseLines[i].getC_Project_ID() != m_project.getC_Project_ID())     continue;    if (projectIssueHasExpense(expenseLines[i].getS_TimeExpenseLine_ID()))     continue;    int M_Locator_ID=0;    M_Locator_ID=MStorage.getM_Locator_ID(expense.getM_Warehouse_ID(),expenseLines[i].getM_Product_ID(),0,expenseLines[i].getQty(),null);    if (M_Locator_ID == 0)     M_Locator_ID=expense.getM_Locator_ID();    MProjectIssue pi=new MProjectIssue(m_project);    pi.setMandatory(M_Locator_ID,expenseLines[i].getM_Product_ID(),expenseLines[i].getQty());    if (m_MovementDate != null)     pi.setMovementDate(m_MovementDate);    if (m_Description != null && m_Description.length() > 0)     pi.setDescription(m_Description); else     if (expenseLines[i].getDescription() != null)     pi.setDescription(expenseLines[i].getDescription());    pi.setS_TimeExpenseLine_ID(expenseLines[i].getS_TimeExpenseLine_ID());    pi.process();    MProjectLine pl=new MProjectLine(m_project);    pl.setMProjectIssue(pi);    pl.saveEx();    addLog(pi.getLine(),pi.getMovementDate(),pi.getMovementQty(),null);    counter++;  }  return "@Created@ " + counter;}  }
class C{  public void store(TungstenProperties props,String outFileName) throws ConfigurationException {  try {    File checkFile=new File(outFileName);    File backupFile=new File(outFileName + ".bak");    if (checkFile.exists()) {      if (backupFile.exists()) {        backupFile.delete();      }      checkFile.renameTo(new File(outFileName + ".bak"));    }    FileOutputStream fout=new FileOutputStream(outFileName);    props.store(fout);    fout.flush();    fout.getFD().sync();    fout.close();  } catch (  FileNotFoundException f) {    throw new ConfigurationException("Unable to process a file when configuring resources:" + f);  }catch (  IOException i) {    throw new ConfigurationException("Error while storing properties:" + i);  }}  }
class C{  public void testCloning() throws CloneNotSupportedException {  XYBoxAnnotation a1=new XYBoxAnnotation(1.0,2.0,3.0,4.0,new BasicStroke(1.2f),Color.red,Color.blue);  XYBoxAnnotation a2=(XYBoxAnnotation)a1.clone();  assertTrue(a1 != a2);  assertTrue(a1.getClass() == a2.getClass());  assertTrue(a1.equals(a2));}  }
class C{  protected List<List<T>> splitData(Iterable<T> data,int dataSize){  List<List<T>> splits=new ArrayList<>();  int size=(int)Math.ceil((double)dataSize / numFolds);  int current=0;  List<T> l=new ArrayList<>();  int count=0;  for (  T item : data) {    l.add(item);    count++;    if (count > dataSize)     break;  }  Collections.shuffle(l,randomSeed);  for (int i=0; i < numFolds; i++) {    int start=current;    int end=Math.min(current + size,dataSize);    splits.add(l.subList(start,end));    current=end;  }  return splits;}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case -1:    finish();  break;case R.id.container_about_app_github:startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse("https://github.com/WangDaYeeeeee/GeometricWeather")));break;case R.id.container_about_app_email:startActivity(new Intent(Intent.ACTION_SENDTO,Uri.parse("mailto:wangdayeeeeee@gmail.com")));break;case R.id.container_about_thx_location:startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse("http://lbsyun.baidu.com/index.php?title=android-locsdk")));break;case R.id.container_about_thx_juhe:startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse("https://www.juhe.cn/docs/api/id/73")));break;case R.id.container_about_thx_hefeng:startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse("http://apistore.baidu.com/apiworks/servicedetail/478.html")));break;case R.id.container_about_thx_retrofit:startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse("https://github.com/square/retrofit")));break;case R.id.container_about_thx_glide:startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse("https://github.com/bumptech/glide")));break;}}  }
class C{  public JBBPFieldLong(final JBBPNamedFieldInfo name,final long value){  super(name);  this.value=value;}  }
class C{  public SelectNoneAction(final VisionWorld visionWorld){  super("Select None");  if (visionWorld == null) {    throw new IllegalArgumentException("visionWorld must not be null");  }  this.visionWorld=visionWorld;}  }
class C{  public synchronized void goOffline(){  if (!isOnline())   return;  final String logSender=getClass().getName() + "#goOffline";  try {    Logger.debug(logSender,"Closing server socket... ");    listenThread.shouldLive=false;    listenThread.join();    port=-1;    Logger.debug(logSender,"Server socket closed");  } catch (  InterruptedException e) {    Logger.error(logSender,null,e);  }}  }
class C{  public final void addElement(final double value){  checkSize(current_item);  items[current_item]=value;  current_item++;}  }
class C{  private GraphBuilder(boolean directed){  this.directed=directed;}  }
class C{  public DeadEvent(Object source,Object event){  this.source=checkNotNull(source);  this.event=checkNotNull(event);}  }
class C{  protected static final String addEscapes(String str){  StringBuilder retval=new StringBuilder();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  public boolean isSolutionSet(){  return getProperty(Annotations.SOLUTION_SET,Annotations.DEFAULT_SOLUTION_SET);}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;}  }
class C{  @Provides @Singleton CategoryDataSource provideCategoryDataSource(DaoSession session){  return new CategoryDataSource(session);}  }
class C{  public boolean isRequired(){  return label.isRequired();}  }
class C{  protected IStatus validateConnection(URLConnection connection){  return null;}  }
class C{  public static String printDate(long sysTime,long dateTime){  long min=60 * 1000;  long hour=60 * min;  if (sysTime - dateTime <= hour) {    if (sysTime - dateTime <= min) {      return "just now";    }    return ((sysTime - dateTime) / min) + "minutes ago";  }  if (isToday(sysTime,dateTime)) {    SimpleDateFormat sdf1=new SimpleDateFormat("HH:mm");    Date date1=new Date(dateTime);    return "today " + sdf1.format(date1);  }  if (isYesterday(sysTime,dateTime)) {    SimpleDateFormat sdf2=new SimpleDateFormat("HH:mm");    Date date2=new Date(dateTime);    return "yesterday " + sdf2.format(date2);  }  SimpleDateFormat sdf=new SimpleDateFormat("MM-dd HH:mm");  Date date=new Date(dateTime);  return sdf.format(date);}  }
class C{  public Categories addCategories(List<String> categories){  Categories prop=new Categories(categories);  addCategories(prop);  return prop;}  }
class C{  public void updateUnderAllocatedMipsForCloudlet(ResCloudlet rcl,double mips){  if (getUnderAllocatedMips().containsKey(rcl.getUid())) {    mips+=getUnderAllocatedMips().get(rcl.getUid());  }  getUnderAllocatedMips().put(rcl.getUid(),mips);}  }
class C{  private static char CallNonvirtualCharMethod(JNIEnvironment env,int objJREF,int classJREF,int methodID) throws Exception {  if (VM.VerifyAssertions) {    VM._assert(VM.BuildForPowerPC,ERROR_MSG_WRONG_IMPLEMENTATION);  }  if (traceJNI)   VM.sysWrite("JNI called: CallNonvirtualCharMethod  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    Object returnObj=JNIHelpers.invokeWithDotDotVarArg(obj,methodID,TypeReference.Char,true);    return Reflection.unwrapChar(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public void replaceAnnFile(Reader readerAnnFile){  m_doc.replaceAnnFile(readerAnnFile);}  }
class C{  public ResultPoint[] detect() throws NotFoundException {  int height=image.getHeight();  int width=image.getWidth();  int halfHeight=height / 2;  int halfWidth=width / 2;  int deltaY=Math.max(1,height / (MAX_MODULES * 8));  int deltaX=Math.max(1,width / (MAX_MODULES * 8));  int top=0;  int bottom=height;  int left=0;  int right=width;  ResultPoint pointA=findCornerFromCenter(halfWidth,0,left,right,halfHeight,-deltaY,top,bottom,halfWidth / 2);  top=(int)pointA.getY() - 1;  ResultPoint pointB=findCornerFromCenter(halfWidth,-deltaX,left,right,halfHeight,0,top,bottom,halfHeight / 2);  left=(int)pointB.getX() - 1;  ResultPoint pointC=findCornerFromCenter(halfWidth,deltaX,left,right,halfHeight,0,top,bottom,halfHeight / 2);  right=(int)pointC.getX() + 1;  ResultPoint pointD=findCornerFromCenter(halfWidth,0,left,right,halfHeight,deltaY,top,bottom,halfWidth / 2);  bottom=(int)pointD.getY() + 1;  pointA=findCornerFromCenter(halfWidth,0,left,right,halfHeight,-deltaY,top,bottom,halfWidth / 4);  return new ResultPoint[]{pointA,pointB,pointC,pointD};}  }
class C{  public ConcurrentWriteLockedOffHeapClockCache(PageSource tableSource,Factory<? extends StorageEngine<? super K,? super V>> storageEngineFactory,EvictionListener<K,V> evictionListener,long tableSize,int concurrency){  super(new WriteLockedOffHeapClockCacheFactory<K,V>(tableSource,storageEngineFactory,evictionListener,(int)(tableSize / concurrency)),concurrency);}  }
class C{  @Override public void run(int connId,String[] args){  if (!canRunRestrictedCommand(connId)) {    server.sendServerChat(connId,"Observers are restricted from loading games.");    return;  }  if (args.length > 1) {    String sFinalFile=args[1];    if (!sFinalFile.endsWith(".sav") && !sFinalFile.endsWith(".sav.gz")) {      sFinalFile=sFinalFile + ".sav";    }    if (!sFinalFile.endsWith(".gz")) {      sFinalFile=sFinalFile + ".gz";    }    load(new File("savegames",sFinalFile),connId);  } else {    server.sendServerChat(connId,"you must provide a file name");  }}  }
class C{  public static JMenuItem createJMenuItem(String text){  JMenuItem jMenuItem=new JMenuItem();  jMenuItem.setText(text);  jMenuItem.setFont(JPlagCreator.SYSTEM_FONT);  jMenuItem.setBackground(JPlagCreator.SYSTEMCOLOR);  return jMenuItem;}  }
class C{  public Object visit(ASTLTNode node,Object data){  return showNode(node,data);}  }
class C{  public ResultSet select(String query) throws SQLException {  if (!isConnected()) {    throw new IllegalStateException("Not connected, please connect first!");  }  Statement statement;  if (!isCursorScrollable()) {    statement=m_Connection.createStatement(ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);  } else {    statement=m_Connection.createStatement(getSupportedCursorScrollType(),ResultSet.CONCUR_READ_ONLY);  }  ResultSet result=statement.executeQuery(query);  return result;}  }
class C{  public void cancel(Account account){  Log_OC.d(TAG,"Account= " + account.name);  if (mCurrentDownload != null) {    Log_OC.d(TAG,"Current Download Account= " + mCurrentDownload.getAccount().name);    if (mCurrentDownload.getAccount().name.equals(account.name)) {      mCurrentDownload.cancel();    }  }  cancelDownloadsForAccount(account);}  }
class C{  public void incConflationIndexesMapSize(){  this.stats.incInt(conflationIndexesMapSizeId,1);}  }
class C{  public int readUnsignedIntToInt(){  int result=readInt();  if (result < 0) {    throw new IllegalStateException("Top bit not zero: " + result);  }  return result;}  }
class C{  public static boolean notEmpty(Iterable<?> iterable){  return !Iterate.isEmpty(iterable);}  }
class C{  @Override public void update(Graphics g){  paint(g);}  }
class C{  void recomputeArrayDU(){  UseChain.clear();  DefChain.clear();  for (Iterator<HeapVariable<Object>> e=getHeapVariables(); e.hasNext(); ) {    HeapVariable<Object> H=e.next();    HashSet<HeapOperand<Object>> u=new HashSet<HeapOperand<Object>>(2);    UseChain.put(H,u);  }  for (  HeapOperand<Object>[] operands : uses.values()) {    if (operands == null)     continue;    for (    HeapOperand<Object> operand : operands) {      HeapVariable<Object> v=operand.getHeapVariable();      HashSet<HeapOperand<Object>> u=UseChain.get(v);      u.add(operand);    }  }  for (  HeapOperand<Object>[] operands : defs.values()) {    if (operands == null)     continue;    for (    HeapOperand<Object> operand : operands) {      HeapVariable<Object> v=operand.getHeapVariable();      DefChain.put(v,operand);    }  }  for (Enumeration<BasicBlock> e=ir.getBasicBlocks(); e.hasMoreElements(); ) {    BasicBlock bb=e.nextElement();    for (Iterator<Instruction> hp=getHeapPhiInstructions(bb); hp.hasNext(); ) {      Instruction phi=hp.next();      HeapOperand<Object> H=(HeapOperand)Phi.getResult(phi);      HeapVariable<Object> v=H.getHeapVariable();      DefChain.put(v,H);      for (int i=0; i < Phi.getNumberOfValues(phi); i++) {        HeapOperand<Object> Hu=(HeapOperand)Phi.getValue(phi,i);        HeapVariable<Object> vu=Hu.getHeapVariable();        HashSet<HeapOperand<Object>> u=UseChain.get(vu);        u.add(Hu);      }    }  }}  }
class C{  public static Map<String,Object> lookupRoutingTask(DispatchContext ctx,Map<String,? extends Object> context){  Delegator delegator=ctx.getDelegator();  Map<String,Object> result=FastMap.newInstance();  Locale locale=(Locale)context.get("locale");  String workEffortName=(String)context.get("workEffortName");  String fixedAssetId=(String)context.get("fixedAssetId");  List<GenericValue> listRoutingTask=null;  List<EntityExpr> constraints=FastList.newInstance();  if (UtilValidate.isNotEmpty(workEffortName)) {    constraints.add(EntityCondition.makeCondition("workEffortName",EntityOperator.GREATER_THAN_EQUAL_TO,workEffortName));  }  if (UtilValidate.isNotEmpty(fixedAssetId) && !"ANY".equals(fixedAssetId)) {    constraints.add(EntityCondition.makeCondition("fixedAssetId",EntityOperator.EQUALS,fixedAssetId));  }  constraints.add(EntityCondition.makeCondition("currentStatusId",EntityOperator.EQUALS,"ROU_ACTIVE"));  constraints.add(EntityCondition.makeCondition("workEffortTypeId",EntityOperator.EQUALS,"ROU_TASK"));  try {    listRoutingTask=EntityQuery.use(delegator).from("WorkEffort").where(constraints).orderBy("workEffortName").queryList();  } catch (  GenericEntityException e) {    Debug.logWarning(e,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingTechDataWorkEffortNotExist",UtilMisc.toMap("errorString",e.toString()),locale));  }  if (listRoutingTask == null) {    listRoutingTask=FastList.newInstance();  }  if (listRoutingTask.size() == 0) {  }  result.put("lookupResult",listRoutingTask);  return result;}  }
class C{  public void mov(Register dst,int imm){  mov(dst,imm & 0xFFFF_FFFFL);}  }
class C{  public AggregateConstraintComparator(){  super();}  }
class C{  private static void xstaticSetRandomGenerator(RandomEngine randomGenerator){synchronized (shared) {    shared.setRandomGenerator(randomGenerator);  }}  }
class C{  public Statement isNull(){  statement.append(" IS NULL");  return this;}  }
class C{  public static String itthey(final int quantity){  if (quantity == 1) {    return "it";  } else {    return "they";  }}  }
class C{  private static int system_depth(Stack<SootMethod> stack){  for (int ii=stack.size() - 1; ii > 0; ii--) {    SootMethod m=stack.get(ii);    if (!is_system(m))     return stack.size() - ii;  }  return stack.size();}  }
class C{  public static MarketBias newInstance(String value){  final MarketBias returnInstance=new MarketBias();  returnInstance.setValue(value);  return returnInstance;}  }
class C{  private void validateSimpleArray(boolean registered){  if (registered) {    Object[] arr1=(Object[])cache1.get(1);    Object[] arr2=(Object[])cache2.get(1);    assertEquals(2,arr1.length);    assertEquals(2,arr2.length);    assertEquals(EnumType.ONE,arr1[0]);    assertEquals(EnumType.TWO,arr1[1]);    assertEquals(EnumType.ONE,arr2[0]);    assertEquals(EnumType.TWO,arr2[1]);  }  Object[] arrBinary1=(Object[])cacheBinary1.get(1);  Object[] arrBinary2=(Object[])cacheBinary2.get(1);  assertEquals(2,arrBinary1.length);  assertEquals(2,arrBinary2.length);  validate((BinaryObject)arrBinary1[0],EnumType.ONE);  validate((BinaryObject)arrBinary1[1],EnumType.TWO);  validate((BinaryObject)arrBinary2[0],EnumType.ONE);  validate((BinaryObject)arrBinary2[1],EnumType.TWO);}  }
class C{  public void doCommandlineCompletion(KeyEvent e){  if (e.getSource() == m_Input) {switch (e.getKeyCode()) {case KeyEvent.VK_TAB:      if (e.getModifiers() == 0) {        m_Input.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));        m_OutputArea.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));        try {          String txt=m_Input.getText();          if (txt.trim().startsWith("java ")) {            int pos=m_Input.getCaretPosition();            int nonNameCharPos=-1;            for (int i=pos - 1; i >= 0; i--) {              if ((txt.charAt(i) == '"') || (txt.charAt(i) == ' ')) {                nonNameCharPos=i;                break;              }            }            if (nonNameCharPos > -1) {              String search=txt.substring(nonNameCharPos + 1,pos);              Vector<String> list=m_Completion.getMatches(search);              String common=m_Completion.getCommonPrefix(list);              if ((search.toLowerCase() + File.separator).equals(common.toLowerCase())) {                common=search;              }              if (common.length() > search.length()) {                try {                  m_Input.getDocument().remove(nonNameCharPos + 1,search.length());                  m_Input.getDocument().insertString(nonNameCharPos + 1,common,null);                } catch (                Exception ex) {                  ex.printStackTrace();                }              } else               if (list.size() > 1) {                System.out.println("\nPossible matches:");                for (int i=0; i < list.size(); i++) {                  System.out.println("  " + list.get(i));                }              } else {              }            }          }        }  finally {          m_Input.setCursor(null);          m_OutputArea.setCursor(null);        }      }    break;case KeyEvent.VK_BACK_SPACE:  if (e.getModifiers() == KeyEvent.ALT_MASK) {    String txt=m_Input.getText();    int pos=m_Input.getCaretPosition();    int start=pos;    start--;    while (start >= 0) {      if ((txt.charAt(start) == '.') || (txt.charAt(start) == ' ') || (txt.charAt(start) == '\\')|| (txt.charAt(start) == '/')) {        start--;      } else {        break;      }    }    int newPos=-1;    for (int i=start; i >= 0; i--) {      if ((txt.charAt(i) == '.') || (txt.charAt(i) == ' ') || (txt.charAt(i) == '\\')|| (txt.charAt(i) == '/')) {        newPos=i;        break;      }    }    try {      m_Input.getDocument().remove(newPos + 1,pos - newPos - 1);    } catch (    Exception ex) {      ex.printStackTrace();    }  }break;}}}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  ScenarioGenerator(TestSpecification specification,MemberType memberType){  this.specification=Objects.requireNonNull(specification);  this.memberType=Objects.requireNonNull(memberType);}  }
class C{  public List<SootMethod> application(){  List<SootMethod> ret=new ArrayList<SootMethod>();  if (Scene.v().hasMainClass() || !Scene.v().hasCustomEntryPoints())   addMethod(ret,Scene.v().getMainClass(),sigMain);  for (  SootMethod clinit : clinitsOf(Scene.v().getMainClass())) {    ret.add(clinit);  }  return ret;}  }
class C{  @Override public void onCreate(){  if (mDebug)   Slog.v(TAG,"onCreate() on thread " + Thread.currentThread().getId());  super.onCreate();}  }
class C{  public static String makeLogTag(Class cls){  return makeLogTag(cls.getSimpleName());}  }
class C{  public Map<String,String> showDeviceAliasDatabase(boolean includePending) throws NetworkDeviceControllerException {  String[] regex={MDSDialogProperties.getString("MDSDialog.deviceAliasName.match")};  Map<String,String> deviceAliasMap=new HashMap<String,String>();  SSHPrompt[] prompts={SSHPrompt.POUND,SSHPrompt.GREATER_THAN};  StringBuilder buf=new StringBuilder();  sendWaitFor(MDSDialogProperties.getString("MDSDialog.showDeviceAlias.cmd"),defaultTimeout,prompts,buf);  if (includePending) {    StringBuilder buf2=new StringBuilder();    sendWaitFor(MDSDialogProperties.getString("MDSDialog.showDeviceAlias.pending.cmd"),defaultTimeout,prompts,buf2);    buf.append(buf2.toString());  }  String[] groups=new String[10];  String[] lines=getLines(buf);  for (  String line : lines) {    int index=match(line,regex,groups);switch (index) {case 0:      String deviceAlias=groups[0];    String pwwn=groups[1];  if (deviceAlias != null) {    deviceAliasMap.put(deviceAlias,pwwn);  }deviceAlias=null;break;}}return deviceAliasMap;}  }
class C{  static boolean isSystemWindows(){  return SYSTEM_SEPARATOR == WINDOWS_SEPARATOR;}  }
class C{  public final boolean hasExtension(Extension<M,?> extension){  if (unknownFieldData == null) {    return false;  }  FieldData field=unknownFieldData.get(WireFormatNano.getTagFieldNumber(extension.tag));  return field != null;}  }
class C{  public static void listIncompleteUploads_test1() throws Exception {  println("Test: listIncompleteUploads(String bucketName)");  String fileName=createFile(6 * MB);  InputStream is=Files.newInputStream(Paths.get(fileName));  try {    client.putObject(bucketName,fileName,is,9 * 1024 * 1024,null);  } catch (  InsufficientDataException e) {    println("Exception occurred as excepted");  }  is.close();  int i=0;  for (  Result<Upload> r : client.listIncompleteUploads(bucketName)) {    println(i++,r.get());    if (i == 10) {      break;    }  }  Files.delete(Paths.get(fileName));  client.removeIncompleteUpload(bucketName,fileName);}  }
class C{  private void export() throws CommandException, IOException {  export(new ArrayList<CnATreeElement>(dialog.getSelectedElementSet()),0);}  }
class C{  public void area(String srcName,Paint color){  area(srcName,color,null,false);}  }
class C{  private void initComposite(){  if (showLabel) {    GridLayout gl=new GridLayout(2,false);    this.setLayout(gl);    new Label(this,SWT.NONE).setText("Enter text:");  } else {    GridLayout gl=new GridLayout(1,false);    this.setLayout(gl);  }  textBox=new Text(this,SWT.BORDER);  textBox.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));}  }
class C{  public void testSetF9Momentary(){  boolean f9Momentary=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF9Momentary(f9Momentary);}  }
class C{  public ObjectStateMachine(Collection<State<S,E>> states,Collection<Transition<S,E>> transitions,State<S,E> initialState){  super(states,transitions,initialState);}  }
class C{  @Override protected void handleUnsuccessfulInteriorTessellation(DrawContext dc){  super.handleUnsuccessfulInteriorTessellation(dc);  this.boundaries.removeAllContours();  this.onShapeChanged();}  }
class C{  protected void transfer(LongRange range) throws IOException {  final LongRange r=SequencesReaderFactory.resolveRange(range,mReader.numberSequences());  for (long seq=r.getStart(); seq < r.getEnd(); seq++) {    transfer(seq);  }}  }
class C{  public static Test suite(){  return new TestSuite(JSONTest.class);}  }
class C{  public void testFlipBitNegativeInside2(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=-1;  int number=45;  byte rBytes[]={-2,127,-57,-101,1,75,-90,-14,-92,-4,14,-36,-26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.flipBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  protected void compareOptions(String[] options1,String[] options2) throws Exception {  if (options1 == null) {    throw new Exception("first set of options is null!");  }  if (options2 == null) {    throw new Exception("second set of options is null!");  }  if (options1.length != options2.length) {    throw new Exception("problem found!\n" + "First set: " + printOptions(options1) + '\n'+ "Second set: "+ printOptions(options2)+ '\n'+ "options differ in length");  }  for (int i=0; i < options1.length; i++) {    if (!options1[i].equals(options2[i])) {      throw new Exception("problem found!\n" + "\tFirst set: " + printOptions(options1) + '\n'+ "\tSecond set: "+ printOptions(options2)+ '\n'+ '\t'+ options1[i]+ " != "+ options2[i]);    }  }}  }
class C{  @Override protected void onLayout(boolean changed,int l,int t,int r,int b){  super.onLayout(changed,l,t,r,b);}  }
class C{  private void writeToFile(String fileId,Object... input){  String line=StringUtils.join(input,"\t");  PrintWriter pw=writers.get(fileId);  if (line.length() > 0) {    pw.println(line);  }}  }
class C{  public static EqualityExpression lte(String propertyName,Object value){  return new EqualityExpression(Operator.LESS_THAN_OR_EQUAL,propertyName,value);}  }
class C{  private void updateAuthorizationKey(){  authorizationKey=generateRandomKey();}  }
class C{  private static RError errorcallDfltWithCall(Object call,Message msg,Object... objects) throws RError {  String fmsg=formatMessage(msg,objects);  String errorMessage=createErrorMessage(call,fmsg);  ContextStateImpl errorHandlingState=getRErrorHandlingState();  if (errorHandlingState.inError > 0) {    if (errorHandlingState.inError == IN_HANDLER) {      Utils.writeStderr("Error during wrapup: ",false);      Utils.writeStderr(errorMessage,true);    }    if (errorHandlingState.warnings.size() > 0) {      errorHandlingState.warnings.clear();      Utils.writeStderr("Lost warning messages",true);    }    throw new RError(errorMessage);  }  Utils.writeStderr(errorMessage,true);  if (getRErrorHandlingState().warnings.size() > 0) {    Utils.writeStderr("In addition: ",false);    printWarnings(false);  }  Object errorExpr=RContext.getInstance().stateROptions.getValue("error");  if (errorExpr != RNull.instance) {    int oldInError=errorHandlingState.inError;    try {      errorHandlingState.inError=IN_HANDLER;      MaterializedFrame materializedFrame=safeCurrentFrame();      if (errorExpr instanceof RFunction) {        RFunction errorFunction=(RFunction)errorExpr;        ArgumentsSignature argsSig=RContext.getRRuntimeASTAccess().getArgumentsSignature(errorFunction);        Object[] evaluatedArgs;        if (errorFunction.isBuiltin()) {          evaluatedArgs=RContext.getRRuntimeASTAccess().getBuiltinDefaultParameterValues(errorFunction);        } else {          evaluatedArgs=new Object[argsSig.getLength()];          for (int i=0; i < evaluatedArgs.length; i++) {            evaluatedArgs[i]=RMissing.instance;          }        }        RContext.getEngine().evalFunction(errorFunction,null,null,null,evaluatedArgs);      } else       if (errorExpr instanceof RLanguage || errorExpr instanceof RExpression) {        if (errorExpr instanceof RLanguage) {          RContext.getEngine().eval((RLanguage)errorExpr,materializedFrame);        } else         if (errorExpr instanceof RExpression) {          RContext.getEngine().eval((RExpression)errorExpr,materializedFrame);        }      } else {        throw RInternalError.shouldNotReachHere();      }    }  finally {      errorHandlingState.inError=oldInError;    }  }  if (RContext.getInstance().getConsoleHandler().isInteractive() || errorExpr != RNull.instance) {    Object trace=Utils.createTraceback(0);    try {      REnvironment env=RContext.getInstance().stateREnvironment.getBaseEnv();      env.put(".Traceback",trace);    } catch (    PutException x) {      throw RInternalError.shouldNotReachHere("cannot write .Traceback");    }  }  throw new RError(errorMessage);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.587 -0400",hash_original_method="5CB320D98B5CDF9E326E7FB31FA59258",hash_generated_method="57CCD40328DCF1B5FA521799A47F88E6") public static void stop(Thread thread){  if (thread != null) {    thread.interrupt();  }}  }
class C{  @Override public String toString(){  return "Constructive-Regression-RVM";}  }
class C{  default B removeEffect(){  this.meta().removeEffect();  return this.getBuilder();}  }
class C{  private void needNewBuffer(int newcount){  if (currentBufferIndex < buffers.size() - 1) {    filledBufferSum+=currentBuffer.length;    currentBufferIndex++;    currentBuffer=buffers.get(currentBufferIndex);  } else {    int newBufferSize;    if (currentBuffer == null) {      newBufferSize=newcount;      filledBufferSum=0;    } else {      newBufferSize=Math.max(currentBuffer.length << 1,newcount - filledBufferSum);      filledBufferSum+=currentBuffer.length;    }    currentBufferIndex++;    currentBuffer=new byte[newBufferSize];    buffers.add(currentBuffer);  }}  }
class C{  public static void drawImage(Graphics2D g2d,RenderedImage ri){  drawImage(g2d,wrap(ri));}  }
class C{  public long position(String searchStr,long start) throws SerialException, SQLException {  isValid();  if (start < 1 || start > len) {    return -1;  }  char pattern[]=searchStr.toCharArray();  int pos=(int)start - 1;  int i=0;  long patlen=pattern.length;  while (pos < len) {    if (pattern[i] == buf[pos]) {      if (i + 1 == patlen) {        return (pos + 1) - (patlen - 1);      }      i++;      pos++;    } else     if (pattern[i] != buf[pos]) {      pos++;    }  }  return -1;}  }
class C{  private String genAttributes(HashMap attribs){  StringBuffer code=new StringBuffer();  String key;  String value;  Iterator iterator=attribs.keySet().iterator();  while (iterator.hasNext()) {    key=(String)iterator.next();    value=(String)attribs.get(key);    if (value.equals("true") || value.equals("false")) {      if (value.equals("true"))       value="Boolean.TRUE"; else       value="Boolean.FALSE";      code.append("              \"").append(key).append("\", ").append(value).append(",\n");    } else {      code.append("              \"").append(key).append("\", \"").append(value).append("\",\n");    }  }  return code.toString();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Graph<E,Collection<V>> foldHypergraphVertices(Hypergraph<V,E> h,Supplier<Graph<E,Collection<V>>> graph_factory){  Graph<E,Collection<V>> target=graph_factory.get();  for (  E e : h.getEdges())   target.addVertex(e);  for (  V v : h.getVertices()) {    ArrayList<E> incident=new ArrayList<E>(h.getIncidentEdges(v));    populateTarget(target,v,incident);  }  return target;}  }
class C{  public static byte[] newBytes(int len){  if (len == 0) {    return EMPTY_BYTES;  }  try {    return new byte[len];  } catch (  OutOfMemoryError e) {    Error e2=new OutOfMemoryError("Requested memory: " + len);    e2.initCause(e);    throw e2;  }}  }
class C{  public void commit() throws SQLException {  lock.lock();  try {    if (!getAutoCommit()) {      Statement st=createStatement();      try {        st.execute("COMMIT");      }  finally {        st.close();      }    }  }  finally {    lock.unlock();  }}  }
class C{  public GroupEntities(List<GroupEntity> groups){  this.groups=groups;}  }
class C{  public void deleteRow(int selectedRow){  String symbol=((String)this.getValueAt(selectedRow,2)).trim().toUpperCase();  final Strategy strategy=(Strategy)((DAOStrategy)this.getValueAt(selectedRow,5)).getObject();  Portfolio portfolio=(Portfolio)((DAOPortfolio)this.getValueAt(selectedRow,7)).getObject();  Integer barSize=new Integer(((BarSize)this.getValueAt(selectedRow,8)).getCode());  String currency=((Currency)this.getValueAt(selectedRow,14)).getCode();  String exchange=((Exchange)this.getValueAt(selectedRow,15)).getCode();  String priaryExchange=((Exchange)this.getValueAt(selectedRow,16)).getCode();  String secType=((SECType)this.getValueAt(selectedRow,17)).getCode();  for (  final Tradestrategy element : getData().getTradestrategies()) {    if (null != barSize && barSize == 1) {      long daySeconds=TradingCalendar.getDurationInSeconds(element.getTradingday().getOpen(),element.getTradingday().getClose());      barSize=(int)daySeconds * barSize;    }    if ((CoreUtils.nullSafeComparator(element.getContract().getSymbol(),symbol) == 0 && null == symbol) || (CoreUtils.nullSafeComparator(element.getContract().getSymbol(),symbol) == 0 && element.getStrategy().getName().equals(strategy.getName()) && element.getPortfolio().getName().equals(portfolio.getName()) && element.getBarSize().equals(barSize) && element.getContract().getCurrency().equals(currency) && element.getContract().getExchange().equals(exchange) && element.getContract().getPrimaryExchange().equals(priaryExchange) && element.getContract().getSecType().equals(secType))) {      getData().getTradestrategies().remove(element);      getData().setDirty(true);      final Vector<Object> currRow=rows.get(selectedRow);      rows.remove(currRow);      this.fireTableRowsDeleted(selectedRow,selectedRow);      break;    }  }}  }
class C{  public void writeBytes(DataOutputStream dd) throws IOException {  int len;  len=bytes.length;  dd.writeShort(len - 2);  dd.write(bytes,2,len - 2);}  }
class C{  public void extendTables(DatabaseSession session,JPAMSchemaManager schemaManager){  extendTablesAndConstraints(schemaManager,session);  schemaManager.createOrReplaceSequences(true,true);}  }
class C{  @Override public void recoverPendingPageCounters(List<PageCountPending> pendingNonTXPageCounter) throws Exception {  Transaction txRecoverCounter=new TransactionImpl(storageManager);  Map<SimpleString,Map<Long,Map<Long,List<PageCountPending>>>> perAddressMap=generateMapsOnPendingCount(queues,pendingNonTXPageCounter,txRecoverCounter);  for (  Map.Entry<SimpleString,Map<Long,Map<Long,List<PageCountPending>>>> addressPageMapEntry : perAddressMap.entrySet()) {    PagingStore store=pagingManager.getPageStore(addressPageMapEntry.getKey());    Map<Long,Map<Long,List<PageCountPending>>> perPageMap=addressPageMapEntry.getValue();    assert (perPageMap != null);    for (    Long pageId : perPageMap.keySet()) {      Map<Long,List<PageCountPending>> perQueue=perPageMap.get(pageId);      assert (perQueue != null);      if (store.checkPageFileExists(pageId.intValue())) {        Page pg=store.createPage(pageId.intValue());        pg.open();        List<PagedMessage> pgMessages=pg.read(storageManager);        Map<Long,AtomicInteger> countsPerQueueOnPage=new HashMap<>();        for (        PagedMessage pgd : pgMessages) {          if (pgd.getTransactionID() <= 0) {            for (            long q : pgd.getQueueIDs()) {              AtomicInteger countQ=countsPerQueueOnPage.get(q);              if (countQ == null) {                countQ=new AtomicInteger(0);                countsPerQueueOnPage.put(q,countQ);              }              countQ.incrementAndGet();            }          }        }        for (        Map.Entry<Long,List<PageCountPending>> entry : perQueue.entrySet()) {          for (          PageCountPending record : entry.getValue()) {            logger.debug("Deleting pg tempCount " + record.getID());            storageManager.deletePendingPageCounter(txRecoverCounter.getID(),record.getID());          }          PageSubscriptionCounter counter=store.getCursorProvider().getSubscription(entry.getKey()).getCounter();          AtomicInteger value=countsPerQueueOnPage.get(entry.getKey());          if (value == null) {            logger.debug("Page " + entry.getKey() + " wasn't open, so we will just ignore");          } else {            logger.debug("Replacing counter " + value.get());            counter.increment(txRecoverCounter,value.get());          }        }      } else {        logger.debug("Page " + pageId + " didn't exist on address "+ addressPageMapEntry.getKey()+ ", so we are just removing records");        for (        List<PageCountPending> records : perQueue.values()) {          for (          PageCountPending record : records) {            logger.debug("Removing pending page counter " + record.getID());            storageManager.deletePendingPageCounter(txRecoverCounter.getID(),record.getID());            txRecoverCounter.setContainsPersistent();          }        }      }    }  }  txRecoverCounter.commit();}  }
class C{  public int depth(){  return rootNode.depth();}  }
class C{  public void findAndUndo(Object someObj){  if (someObj instanceof LayerHandler && someObj == getLayerHandler()) {    setLayerHandler(null);  }  if (someObj instanceof MapBean && someObj == getMapBean()) {    setMapBean(null);  }}  }
class C{  public static String buildCpimDeliveryReport(String from,String to,String imdn,long timestampSent){  return CpimMessage.HEADER_FROM + ": " + formatCpimSipUri(from)+ CRLF+ CpimMessage.HEADER_TO+ ": "+ formatCpimSipUri(to)+ CRLF+ CpimMessage.HEADER_NS+ ": "+ ImdnDocument.IMDN_NAMESPACE+ CRLF+ ImdnUtils.HEADER_IMDN_MSG_ID+ ": "+ IdGenerator.generateMessageID()+ CRLF+ CpimMessage.HEADER_DATETIME+ ": "+ DateUtils.encodeDate(timestampSent)+ CRLF+ CRLF+ CpimMessage.HEADER_CONTENT_TYPE+ ": "+ ImdnDocument.MIME_TYPE+ CRLF+ CpimMessage.HEADER_CONTENT_DISPOSITION+ ": "+ ImdnDocument.NOTIFICATION+ CRLF+ CpimMessage.HEADER_CONTENT_LENGTH+ ": "+ imdn.getBytes(UTF8).length+ CRLF+ CRLF+ imdn;}  }
class C{  public DistributedLogNamespaceBuilder clientId(String clientId){  this._clientId=clientId;  return this;}  }
class C{  public void drawingComplete(OMGraphic omg,OMAction action){  if (thingToCreate != null) {    drawingTool.resetGUIWhenDeactivated(false);  }  omdtmm=null;}  }
class C{  public Approximator(){  this.mType=ApproximatorType.NONE;}  }
class C{  public static JClassLoaderWrapper create(ClassLoader loader){  JClassLoaderWrapper jLoader=_localClassLoader.getLevel(loader);  if (jLoader == null) {    jLoader=new JClassLoaderWrapper(loader);    _localClassLoader.set(jLoader,loader);  }  return jLoader;}  }
class C{  public Bundler putShort(String key,short value){  bundle.putShort(key,value);  return this;}  }
class C{  public Shape createProgressBarIndeterminatePattern(int x,int y,int w,int h){  final double wHalf=w / 2.0;  final double xOffset=5;  path.reset();  path.moveTo(xOffset,0);  path.lineTo(xOffset + wHalf,0);  path.curveTo(xOffset + wHalf - 5,h / 2 - 4,xOffset + wHalf + 5,h / 2 + 4,xOffset + wHalf,h);  path.lineTo(xOffset,h);  path.curveTo(xOffset + 5,h / 2 + 4,xOffset - 5,h / 2 - 4,xOffset,0);  path.closePath();  return path;}  }
class C{  public void removeAllBlocksFromSection(){  for (int i=mBlockEntries.size(); i > 0; i--) {    Block b=mBlockEntries.get(i - 1);    if (b != null) {      b.removePropertyChangeListener(mBlockListeners.get(i - 1));    }    mBlockListeners.remove(i - 1);    mBlockEntries.remove(i - 1);  }  for (int i=mForwardEntryPoints.size(); i > 0; i--) {    mForwardEntryPoints.remove(i - 1);  }  for (int i=mReverseEntryPoints.size(); i > 0; i--) {    mReverseEntryPoints.remove(i - 1);  }  initializationNeeded=false;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return DELETED;default :return null;}}  }
class C{  public void logDebug(String tag,String message){  log(LogEntryType.Debug,tag,message);}  }
class C{  void copyExceptionTable() throws IOException {  int tableLength=c.copyU2();  checkLength(tableLength,"Exception Table length");  if (tableLength > 0) {    traceln();    traceln("Exception table:");    traceln(" from:old/new  to:old/new target:old/new type");    for (int tcnt=tableLength; tcnt > 0; --tcnt) {      int startPC=c.readU2();      int endPC=c.readU2();      int handlerPC=c.readU2();      int catchType=c.copyU2();      if (verbose) {        traceFixedWidthInt(startPC,6);        traceFixedWidthInt(endPC,6);        traceFixedWidthInt(handlerPC,6);        trace("    ");        if (catchType == 0)         traceln("any"); else {          traceln("" + catchType);        }      }    }  }}  }
class C{  public void openToRight(){  if (open) {    return;  }  if (bottomLeftWrapper.getComponentCount() == 0) {    return;  }  Component bottom=bottomLeftWrapper.getComponentAt(0);  if (bottomRightWrapper.getComponentCount() > 0) {    bottomRightWrapper.setVisible(false);  }  bottomLeftWrapper.setVisible(true);  int topX=topWrapper.getX();  openCloseMotion=Motion.createSplineMotion(topX,bottom.getWidth(),300);  getComponentForm().registerAnimated(this);  openCloseMotion.start();  openedToRight=true;  open=true;}  }
class C{  @Override public VolatileMemAllocator enableActiveGC(long timeout){  m_activegc=true;  m_gctimeout=timeout;  return this;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public DataBuffer(final byte[] buffer,final int offset,final int length){  byteBuffer=ByteBuffer.wrap(buffer);  byteBuffer.order(ByteOrder.LITTLE_ENDIAN);  byteBuffer.position(offset);}  }
class C{  public static void runEventQueueUntilEmpty(Display display){  assertEquals(display,Display.getCurrent());  while (display.readAndDispatch()) {  }}  }
class C{  public static final Token newToken(int ofKind){switch (ofKind) {default :    return new Token();}}  }
class C{  private Map deserializeMap(File file){  Map<?,?> map;  try {    ObjectInputStream is=new ObjectInputStream(new FileInputStream(file));    map=(Map<?,?>)is.readObject();    is.close();  } catch (  Exception e) {    e.printStackTrace();    return null;  }  return map;}  }
class C{  public void testSkipRawBytesBug() throws Exception {  byte[] rawBytes=new byte[]{1,2};  CodedInputStream input=CodedInputStream.newInstance(rawBytes);  int limit=input.pushLimit(1);  input.skipRawBytes(1);  input.popLimit(limit);  assertEquals(2,input.readRawByte());}  }
class C{  public static String toEncodedString(final byte[] bytes,final Charset charset){  return new String(bytes,charset != null ? charset : Charset.defaultCharset());}  }
class C{  public Serializer disableWhitelist(){  whitelistRequired.set(false);  return this;}  }
class C{  @SuppressWarnings("rawtypes") public long[] asLongArray(final LiteralExtensionIV iv){  if (!datatype.getIV().equals(iv.getExtensionIV())) {    throw new IllegalArgumentException("unrecognized datatype");  }  final BigInteger bigInt=iv.getDelegate().integerValue();  final byte[] bigIntAsByteArrUnsigned=toZOrderByteArray(bigInt);  final long[] componentsAsLongArr=fromZOrderByteArray(bigIntAsByteArrUnsigned);  return componentsAsLongArr;}  }
class C{  public X509Certificate generate(PrivateKey key,String provider) throws CertificateEncodingException, IllegalStateException, NoSuchProviderException, NoSuchAlgorithmException, SignatureException, InvalidKeyException {  return generate(key,provider,null);}  }
class C{  public void iterate(){synchronized (updaterLock) {    updater.runOnce();  }  updateStopped();}  }
class C{  public boolean isSetNode(){  return this.node != null;}  }
class C{  @Override public int compare(String o1,String o2){  String s1;  String s2;  int i;  int result;  int v1;  int v2;  result=0;  s1=o1.toString().toLowerCase();  s2=o2.toString().toLowerCase();  s1=fillUp(s1,s2.length());  s2=fillUp(s2,s1.length());  for (i=0; i < s1.length(); i++) {    if (s1.charAt(i) == s2.charAt(i)) {      result=0;    } else {      v1=charGroup(s1.charAt(i));      v2=charGroup(s2.charAt(i));      if (v1 != v2) {        if (v1 < v2) {          result=-1;        } else {          result=1;        }      } else {        if (s1.charAt(i) < s2.charAt(i)) {          result=-1;        } else {          result=1;        }      }      break;    }  }  return result;}  }
class C{  public boolean hasFileLine(InputFile inputFile,int line){  return patchPositionMappingByFile.get(getPath(inputFile)).containsKey(line);}  }
class C{  public void addTileSensors(final int numTilesX,final int numTilesY){  addTileSensors(numTilesX,numTilesY,1);}  }
class C{  private void initDecryption(Cipher cipher,Key aKey) throws InvalidKeyException {  cipher.init(Cipher.DECRYPT_MODE,aKey);}  }
class C{  public OMGraphicList filter(Shape shapeBoundary,boolean getInsideBoundary){  Area area=null;  if (shapeBoundary != null) {    area=new Area(shapeBoundary);  }  if (Debug.debugging("filtersupportdetail")) {    Debug.output(getList().getDescription());  }  return filterList(getList(),area,getInsideBoundary);}  }
class C{  public void processSuccess(Response response,Request request){}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="FE_FLOATING_POINT_EQUALITY",justification="equality is specifically 'Unchanged' here") public void changeLocoSpeed(DccThrottle t,Section sec,float speed){  if (sec == referenced && speed == desiredSpeedStep) {    if (log.isDebugEnabled()) {      log.debug("Already setting to desired speed step for this section");    }    return;  }  float sectionLength=sec.getActualLength();  if (log.isDebugEnabled()) {    log.debug("call to change speed via section " + sec.getDisplayName());  }  if (sec == referenced) {    distanceRemaining=distanceRemaining - getDistanceTravelled(_throttle.getIsForward(),_throttle.getSpeedSetting(),((float)(System.nanoTime() - lastTimeTimerStarted) / 1000000000));    sectionLength=distanceRemaining;  } else {    referenced=sec;  }  changeLocoSpeed(t,sectionLength,speed);}  }
class C{  protected void sendFunctionGroup4(){  sendUpdate();}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  if (rect == null) {    return null;  }  return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height(),false);}  }
class C{  public AnimSVGNumberList(){  itemList=new ArrayList(1);}  }
class C{  public static int hash32(final String text,int from,int length){  return hash32(text.substring(from,from + length));}  }
class C{  protected Contributor(ElementKey<?,?> key){  super(key);}  }
class C{  public RegularExpressionFlags createRegularExpressionFlags(){  RegularExpressionFlagsImpl regularExpressionFlags=new RegularExpressionFlagsImpl();  return regularExpressionFlags;}  }
class C{  public final TextBuilder insert(int index,java.lang.CharSequence csq){  if ((index < 0) || (index > _length))   throw new IndexOutOfBoundsException("index: " + index);  final int shift=csq.length();  int newLength=_length + shift;  while (newLength >= _capacity) {    increaseCapacity();  }  _length=newLength;  for (int i=_length - shift; --i >= index; ) {    this.setCharAt(i + shift,this.charAt(i));  }  for (int i=csq.length(); --i >= 0; ) {    this.setCharAt(index + i,csq.charAt(i));  }  return this;}  }
class C{  public void create(String message,List<T> noteRecords){  try {    this.noteRecords=noteRecords;    loadBase();    applyNotes(message);    updateRef();  } catch (  Exception e) {    logger.log(Level.SEVERE,"Failed to write notes for commit " + this.reviewCommit.getId(),e);  }}  }
class C{  private long createPricedRole(PriceModel priceModel,RoleDefinition roleDefinition,BigDecimal pricePerUser) throws Exception {  PricedProductRole pricedRole=new PricedProductRole();  pricedRole.setPriceModel(priceModel);  pricedRole.setRoleDefinition(roleDefinition);  pricedRole.setPricePerUser(pricePerUser);  mgr.persist(pricedRole);  mgr.flush();  return pricedRole.getKey();}  }
class C{  public boolean isZoomButtonsVisible(){  return mZoomButtonsVisible;}  }
class C{  public boolean isConcrete(){  return !isInterface() && !isAbstract();}  }
class C{  public JavaPairRDD<Polygon,HashSet<Polygon>> SpatialJoinQueryUsingIndex(PolygonRDD objectRDD,PolygonRDD windowRDD){  if (objectRDD.indexedRDD == null) {    throw new NullPointerException("Need to invoke buildIndex() first, indexedRDD is null");  }  if (objectRDD.gridPolygonRDD == null) {    throw new NullPointerException("Need to do spatial partitioning first, gridedSRDD is null");  }  JavaPairRDD<Integer,Tuple2<Iterable<STRtree>,Iterable<Polygon>>> cogroupResult=objectRDD.indexedRDD.cogroup(this.polygonRDD.gridPolygonRDD);  JavaPairRDD<Polygon,HashSet<Polygon>> joinResultWithDuplicates=cogroupResult.flatMapToPair(new PolygonByPolygonJudgementUsingIndex(objectRDD.grids.size()));  JavaPairRDD<Polygon,HashSet<Polygon>> joinListResultAfterAggregation=aggregateJoinResultPolygonByPolygon(joinResultWithDuplicates);  return joinListResultAfterAggregation;}  }
class C{  public Iterator<Item> iterator(){  return new ArrayIterator();}  }
class C{  public TimeoutException(){}  }
class C{  private E unlinkLast(Node<E> l){  final E element=l.item;  final Node<E> prev=l.prev;  l.item=null;  l.prev=null;  last=prev;  if (prev == null)   first=null; else   prev.next=null;  size--;  modCount++;  return element;}  }
class C{  public void removeNoExternalMessages(){  setMode("-n");}  }
class C{  public void zoneMemberPwwn(String pwwn,boolean remove) throws NetworkDeviceControllerException {  zoneAddRemoveMember(pwwn,false,remove);}  }
class C{  public PTQuery_Select Select(String... ks) throws PTQueryException {  return new PTQuery_Select(this,ks);}  }
class C{  @Override protected void forceInsertAttributeAt(int position){  double[] newValues=new double[m_AttValues.length + 1];  System.arraycopy(m_AttValues,0,newValues,0,position);  newValues[position]=Utils.missingValue();  System.arraycopy(m_AttValues,position,newValues,position + 1,m_AttValues.length - position);  m_AttValues=newValues;}  }
class C{  public LineTableAttr(){  line=new Vector();  pc=new Vector();}  }
class C{  public void addHam(Reader stream) throws java.io.IOException {  addTokenOccurrences(stream,hamTokenCounts);  hamMessageCount++;}  }
class C{  public static String stripEnd(String str,String strip){  if (str == null) {    return null;  }  int end=str.length();  if (strip == null) {    while ((end != 0) && Character.isWhitespace(str.charAt(end - 1))) {      end--;    }  } else {    while ((end != 0) && (strip.indexOf(str.charAt(end - 1)) != -1)) {      end--;    }  }  return str.substring(0,end);}  }
class C{  public int calculateEffectiveAddress(boolean executeNow){  if (executeNow) {    int base_value=base != null ? (int)base.getShortcut() : 0;    int index_value=index != null ? (int)index.getShortcut() : 0;    return base_value + (index_value * scale) + displacement;  } else {    if ((base == null) && (index == null)) {      return displacement;    } else {      return dsp.getMemAddressStart();    }  }}  }
class C{  @ExceptionHandler({RegionNotFoundException.class,ResourceNotFoundException.class}) @ResponseBody @ResponseStatus(HttpStatus.NOT_FOUND) public String handle(final RuntimeException e){  return convertErrorAsJson(e.getMessage());}  }
class C{  public void printStackTrace(){synchronized (System.err) {    super.printStackTrace(System.err);  }}  }
class C{  public void plot(AbstractDrawer draw){  if (!visible)   return;  draw.setColor(color);  draw.setFont(font);  draw.setBaseOffset(base_offset);  draw.setTextOffset(cornerE,cornerN);  draw.setTextAngle(angle);  draw.drawText(label,coord);  draw.setBaseOffset(null);}  }
class C{  public void close(){synchronized (this) {    if (idleFuture != null)     idleFuture.cancel(true);    if (idleReconnectFuture != null)     idleReconnectFuture.cancel(true);  }}  }
class C{  public final TestSuite build(){  rootSuite=new TestSuite(getSuiteName());  currentClassname=null;  try {    for (    TestMethod test : testGrouping.getTests()) {      if (satisfiesAllPredicates(test)) {        addTest(test);      }    }    if (testCases.size() > 0) {      for (      TestCase testCase : testCases) {        if (satisfiesAllPredicates(new TestMethod(testCase))) {          addTest(testCase);        }      }    }  } catch (  Exception exception) {    Log.i("TestSuiteBuilder","Failed to create test.",exception);    TestSuite suite=new TestSuite(getSuiteName());    suite.addTest(new FailedToCreateTests(exception));    return suite;  }  return rootSuite;}  }
class C{  private String sanitizeForDot(String input){  return input.replace("-","_").replace(" ","").replace("(","").replace(")","");}  }
class C{  public void True(boolean expression){  if (!expression) {    throw new IllegalArgumentException();  }}  }
class C{  public static SessionNode serializableInstance(){  return new SessionNode(Type1.class);}  }
class C{  public static Uri PathToUri(String path){  return Uri.fromFile(new File(path));}  }
class C{  @Override protected void sendFunctionGroup2(){  int new_fn=((getF5() ? CbusConstants.CBUS_F5 : 0) | (getF6() ? CbusConstants.CBUS_F6 : 0) | (getF7() ? CbusConstants.CBUS_F7 : 0)| (getF8() ? CbusConstants.CBUS_F8 : 0));  cs.setFunctions(2,_handle,new_fn);}  }
class C{  public boolean isNotificationEnabled(){  return m_NotificationEnabled;}  }
class C{  private LinearFunction rParseBinaryExpression(BinaryExpression be) throws LanguageException {  LinearFunction ret=null;  Expression l=be.getLeft();  Expression r=be.getRight();  if (be.getOpCode() == BinaryOp.PLUS) {    if (l instanceof BinaryExpression) {      ret=rParseBinaryExpression((BinaryExpression)l);      Long cvalR=parseLongConstant(r);      if (cvalR != null)       ret.addConstant(cvalR); else       return null;    } else     if (r instanceof BinaryExpression) {      ret=rParseBinaryExpression((BinaryExpression)r);      Long cvalL=parseLongConstant(l);      if (cvalL != null)       ret.addConstant(cvalL); else       return null;    } else {      Long cvalL=parseLongConstant(l);      Long cvalR=parseLongConstant(r);      if (cvalL != null)       ret=new LinearFunction(cvalL,1,((DataIdentifier)r)._name); else       if (cvalR != null)       ret=new LinearFunction(cvalR,1,((DataIdentifier)l)._name); else       return null;    }  } else   if (be.getOpCode() == BinaryOp.MINUS) {    if (l instanceof BinaryExpression) {      ret=rParseBinaryExpression((BinaryExpression)l);      Long cvalR=parseLongConstant(r);      ret.addConstant(cvalR * (-1));    } else     if (r instanceof BinaryExpression) {      ret=rParseBinaryExpression((BinaryExpression)r);      ret._a*=(-1);      for (int i=0; i < ret._b.length; i++)       ret._b[i]*=(-1);      Long cvalL=parseLongConstant(l);      ret.addConstant(cvalL);    } else {      Long cvalL=parseLongConstant(l);      Long cvalR=parseLongConstant(r);      if (cvalL != null)       ret=new LinearFunction(cvalL,-1,((DataIdentifier)r)._name); else       if (cvalR != null)       ret=new LinearFunction(cvalR * (-1),1,((DataIdentifier)l)._name); else       return null;    }  } else   if (be.getOpCode() == BinaryOp.MULT) {    Long cvalL=parseLongConstant(l);    Long cvalR=parseLongConstant(r);    if (cvalL != null)     ret=new LinearFunction(0,cvalL,((DataIdentifier)r)._name); else     if (cvalR != null)     ret=new LinearFunction(0,cvalR,((DataIdentifier)l)._name); else     return null;  } else   return null;  return ret;}  }
class C{  public Method updateZoningMapAndValidateExportMaskMethod(URI varrayURI,Map<URI,List<StoragePort>> initiatorPortMap,URI exportMaskURI,Map<String,Set<String>> directorToInitiatorIds,Map<String,Initiator> idToInitiatorMap,Map<String,String> portWwnToClusterMap,StorageSystem vplex,StorageSystem array,String clusterId){  return new Workflow.Method("updateZoningMapAndvalidateExportMask",varrayURI,initiatorPortMap,exportMaskURI,directorToInitiatorIds,idToInitiatorMap,portWwnToClusterMap,vplex,array,clusterId);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node rootNode;  boolean state;  doc=(Document)load("staff",false);  rootNode=doc.getDocumentElement();  state=rootNode.isSupported("XML","");  assertTrue("throw_True",state);}  }
class C{  public void testORPhrase() throws Exception {  PhraseQuery phrase1=new PhraseQuery("field","foo","bar");  PhraseQuery phrase2=new PhraseQuery("field","star","wars");  BooleanQuery.Builder expected=new BooleanQuery.Builder();  expected.add(phrase1,Occur.SHOULD);  expected.add(phrase2,Occur.SHOULD);  assertEquals(expected.build(),parse("\"foo bar\"|\"star wars\""));}  }
class C{  public boolean isDirectory() throws SmbException {  if (getUncPath0().length() == 1) {    return true;  }  if (!exists())   return false;  return (attributes & ATTR_DIRECTORY) == ATTR_DIRECTORY;}  }
class C{  public boolean isCellEditable(int row,int col){  int numParents=getDirichletBayesIm().getNumParents(getNodeIndex());  int numColumns=getDirichletBayesIm().getNumColumns(getNodeIndex());  return !(col < numParents) && col < numParents + numColumns + 1;}  }
class C{  @Override public Rectangle2D drawString(final String string,final TextDrawingAttributes attributes){  if (string.contains("\n")) {    final Rectangle2D result=new Rectangle2D.Double();    for (    final String s : string.split("\n")) {      final Rectangle2D r=drawString(s,attributes);      attributes.location.setY(attributes.location.getY() + r.getHeight());      result.add(r);    }    return result;  }  currentRenderer.setColor(highlight ? data.getHighlightColor() : attributes.color);  double curX, curY;  if (attributes.location == null) {    curX=getXOffsetInPixels();    curY=getYOffsetInPixels();  } else {    curX=xFromModelUnitsToPixels(attributes.location.getX());    curY=yFromModelUnitsToPixels(attributes.location.getY());  }  currentRenderer.setFont(attributes.font);  final AffineTransform saved=currentRenderer.getTransform();  if (attributes.rotation != null && attributes.rotation.key != null) {    final Rectangle2D r=currentRenderer.getFontMetrics().getStringBounds(string,currentRenderer);    currentRenderer.rotate(Maths.toRad * attributes.rotation.key,curX + r.getWidth() / 2,curY + r.getHeight() / 2);  }  currentRenderer.drawString(string,(int)curX,(int)curY);  currentRenderer.setTransform(saved);  final Rectangle2D result=currentRenderer.getFontMetrics().getStringBounds(string,currentRenderer);  result.setFrame(curX,curY,result.getWidth(),result.getHeight());  return result;}  }
class C{  Item newNameTypeItem(final String name,final String desc){  key2.set(NAME_TYPE,name,desc,null);  Item result=get(key2);  if (result == null) {    put122(NAME_TYPE,newUTF8(name),newUTF8(desc));    result=new Item(index++,key2);    put(result);  }  return result;}  }
class C{  ArchiveContents(final Workspace workspace,final WorkspaceComponentSerializer serializer){  this.workspaceParameters=workspace;  this.serializer=serializer;}  }
class C{  public void write(org.apache.thrift.protocol.TProtocol oprot,Config struct) throws org.apache.thrift.TException {  struct.validate();  oprot.writeStructBegin(STRUCT_DESC);  if (struct.moduleCode != null) {    oprot.writeFieldBegin(MODULE_CODE_FIELD_DESC);    oprot.writeString(struct.moduleCode);    oprot.writeFieldEnd();  }  if (struct.configItemCode != null) {    oprot.writeFieldBegin(CONFIG_ITEM_CODE_FIELD_DESC);    oprot.writeString(struct.configItemCode);    oprot.writeFieldEnd();  }  if (struct.paramCode != null) {    oprot.writeFieldBegin(PARAM_CODE_FIELD_DESC);    oprot.writeString(struct.paramCode);    oprot.writeFieldEnd();  }  if (struct.paramValue != null) {    if (struct.isSetParamValue()) {      oprot.writeFieldBegin(PARAM_VALUE_FIELD_DESC);      oprot.writeString(struct.paramValue);      oprot.writeFieldEnd();    }  }  oprot.writeFieldStop();  oprot.writeStructEnd();}  }
class C{  private static boolean isScrollable(AccessibilityNodeInfoCompat node){  if (node.isScrollable()) {    return true;  }  return supportsAnyAction(node,AccessibilityNodeInfoCompat.ACTION_SCROLL_FORWARD,AccessibilityNodeInfoCompat.ACTION_SCROLL_BACKWARD);}  }
class C{  protected void clearError(){  ioError=false;}  }
class C{  public Lexer(CharSequence input,String[] regexps){  this.regexps=regexps;  matchers=new Matcher[regexps.length];  for (int i=0; i < regexps.length; i++)   matchers[i]=Pattern.compile(regexps[i]).matcher(input);  this.input=input;}  }
class C{  private void parseProcedureStatementList(List<SQLStatement> statementList){  parseProcedureStatementList(statementList,-1);}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4mfPackage.REQUIRED_RUNTIME_LIBRARIES__REQUIRED_RUNTIME_LIBRARIES:    return requiredRuntimeLibraries != null && !requiredRuntimeLibraries.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeappendchildnomodificationallowederr.class,args);}  }
class C{  @Override public void openElement(String tagName) throws IOException {  ArrayList list=current.getChildren();  for (int i=0; i < list.size(); i++) {    XMLElement node=(XMLElement)list.get(i);    if (node.getName().equals(tagName)) {      stack.push(current);      current=node;      return;    }  }  throw new IOException("no such element:" + tagName);}  }
class C{  public void logp(Level level,String sourceClass,String sourceMethod,String msg,Object param1){  if (!isLoggable(level)) {    return;  }  LogRecord lr=new LogRecord(level,msg);  lr.setSourceClassName(sourceClass);  lr.setSourceMethodName(sourceMethod);  Object params[]={param1};  lr.setParameters(params);  doLog(lr);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public boolean keepOffspring(Chromosome parent1,Chromosome parent2,Chromosome offspring1,Chromosome offspring2){  if (maximize) {    return compareBestOffspringToBestParent(parent1,parent2,offspring1,offspring2) >= 0;  } else {    return compareBestOffspringToBestParent(parent1,parent2,offspring1,offspring2) <= 0;  }}  }
class C{  protected void renderStringValue(final UIComponent component,final ResponseWriter writer,final String attributeName) throws IOException {  if (component.getAttributes().get(attributeName) != null && StringUtils.isNotEmpty(component.getAttributes().get(attributeName).toString()) && shouldRenderAttribute(component.getAttributes().get(attributeName))) {    writer.writeAttribute(attributeName,component.getAttributes().get(attributeName).toString().trim(),attributeName);  }}  }
class C{  public DataOutputStream openDataOutputStream() throws IOException {  return new DataOutputStream(openOutputStream());}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Charset charset(){  return charset != null ? Charset.forName(charset) : null;}  }
class C{  public void initialize(){  loadHelpers=new LinkedList<ClassLoadHelper>();  loadHelpers.add(new LoadingLoaderClassLoadHelper());  loadHelpers.add(new SimpleClassLoadHelper());  loadHelpers.add(new ThreadContextClassLoadHelper());  loadHelpers.add(new InitThreadContextClassLoadHelper());  for (  ClassLoadHelper loadHelper : loadHelpers) {    loadHelper.initialize();  }}  }
class C{  public boolean canRead() throws SmbException {  if (getType() == TYPE_NAMED_PIPE) {    return true;  }  return exists();}  }
class C{  public void frequencyChanged(FrequencyChangeEvent event){  mOverlayPanel.frequencyChanged(event);  mDFTProcessor.frequencyChanged(event);}  }
class C{  public void initialize(Subject subject,CallbackHandler callbackHandler,Map<String,?> sharedState,Map<String,?> options){  unauthenticatedIdentity=(String)options.get("unauthenticatedIdentity");  handler=callbackHandler;  this.subject=subject;}  }
class C{  public static Map<String,Set<String>> splitQuery(URL url) throws UnsupportedEncodingException {  final Map<String,Set<String>> query_pairs=new LinkedHashMap<>();  final String[] pairs=url.getQuery().split("&");  for (  String pair : pairs) {    final int idx=pair.indexOf("=");    final String key=idx > 0 ? URLDecoder.decode(pair.substring(0,idx),"UTF-8") : pair;    if (!query_pairs.containsKey(key)) {      query_pairs.put(key,new LinkedHashSet<String>());    }    final String value=idx > 0 && pair.length() > idx + 1 ? URLDecoder.decode(pair.substring(idx + 1),"UTF-8") : null;    query_pairs.get(key).add(value);  }  return query_pairs;}  }
class C{  public boolean isExist(){  return view != null;}  }
class C{  @Bean(name={"listenerContainerFactory"}) public SimpleRabbitListenerContainerFactory listenerContainerFactory(){  final SimpleRabbitListenerContainerFactory containerFactory=new SimpleRabbitListenerContainerFactory();  containerFactory.setDefaultRequeueRejected(true);  containerFactory.setConnectionFactory(connectionFactory);  containerFactory.setConcurrentConsumers(3);  containerFactory.setMaxConcurrentConsumers(10);  containerFactory.setPrefetchCount(20);  return containerFactory;}  }
class C{  public static long copyLarge(Reader input,Writer output,char[] buffer) throws IOException {  long count=0;  int n=0;  while (EOF != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  public void addViewpoint(int index,String name){  ViewpointStore vps=viewpointNode.getViewpoint(name);  viewpointList.add(index,vps);}  }
class C{  public String selectHeaderAccept(String[] accepts){  if (accepts.length == 0)   return null;  if (StringUtil.containsIgnoreCase(accepts,"application/json"))   return "application/json";  return StringUtil.join(accepts,",");}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4mfPackage.DECLARED_VERSION__MAJOR:    setMajor(MAJOR_EDEFAULT);  return;case N4mfPackage.DECLARED_VERSION__MINOR:setMinor(MINOR_EDEFAULT);return;case N4mfPackage.DECLARED_VERSION__MICRO:setMicro(MICRO_EDEFAULT);return;case N4mfPackage.DECLARED_VERSION__QUALIFIER:setQualifier(QUALIFIER_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public void test_SSLEngineResultStatus_valueOf(){  String[] str={"FINISHED","NEED_TASK","NEED_UNWRAP","NEED_WRAP","NOT_HANDSHAKING"};  String[] str_invalid={"","FINISHED1","NEED_task","NEED_UN","NEED_WRAP_WRAP","not_HANDSHAKING","Bad string for verification valueOf method"};  SSLEngineResult.HandshakeStatus enS;  for (int i=0; i < str.length; i++) {    try {      enS=SSLEngineResult.HandshakeStatus.valueOf(str[i]);      assertEquals("Incorrect Status",enS.toString(),str[i]);    } catch (    Exception e) {      fail("Unexpected exception " + e + " was thrown for "+ str[i]);    }  }  for (int i=0; i < str_invalid.length; i++) {    try {      enS=SSLEngineResult.HandshakeStatus.valueOf(str_invalid[i]);      fail("IllegalArgumentException should be thrown for " + str_invalid[i]);    } catch (    IllegalArgumentException iae) {    }  }  try {    enS=SSLEngineResult.HandshakeStatus.valueOf(null);    fail("NullPointerException/IllegalArgumentException should be thrown for NULL parameter");  } catch (  NullPointerException npe) {  }catch (  IllegalArgumentException iae) {  }}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public Group(PrincipalId id,GroupDetail detail){  this(id,null,null,detail);}  }
class C{  public double classifyInstance(Instance instance) throws Exception {  if (m_useTree) {    return m_topOfTree.classifyInstance(instance);  }  if (m_splitAtts.length > 0) {    for (int i=0; i < m_relOps.length; i++) {      if (m_relOps[i] == LEFT) {        if (instance.value(m_splitAtts[i]) > m_splitVals[i]) {          throw new Exception("Rule does not classify instance");        }      } else {        if (instance.value(m_splitAtts[i]) <= m_splitVals[i]) {          throw new Exception("Rule does not classify instance");        }      }    }  }  return m_ruleModel.classifyInstance(instance);}  }
class C{  public static void touch(File file) throws IOException {  if (!file.exists()) {    OutputStream out=openOutputStream(file);    IOUtils.closeQuietly(out);  }  boolean success=file.setLastModified(System.currentTimeMillis());  if (!success) {    throw new IOException("Unable to set the last modification time for " + file);  }}  }
class C{  @DSComment("From safe class list") @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:18.059 -0500",hash_original_method="0AFE0A1757F436EAD0779848DAA16349",hash_generated_method="F6AB23291A5B282DA207B93C0353B068") public StringBuffer append(double d){  addTaint(d);  return this;}  }
class C{  public JSONObject makeConnectedViaPostProps(final boolean problemSolved,final int numberOfConnections,final int numberOfTags,final String postCity,final String category,final Attachment attachment,final int postLength){  JSONObject props;  try {    props=new JSONObject();    props.put("Solved",problemSolved ? "Yes" : "No");    props.put("Number Of Connections",numberOfConnections);    props.put("Number Of Tags",numberOfTags);    props.put("Post City",postCity);    props.put("Category",category);    props.put("Attachment",attachment);    props.put("Length",postLength);  } catch (  JSONException e) {    Logger.e(TAG,"Error building Mixpanel Props",e);    props=null;  }  return props;}  }
class C{  public String encryptMacKey(byte[] macKey,String consumerPublicKeyBase64) throws AssociationException {  byte[] hzz=getDigestedZZ(consumerPublicKeyBase64);  if (hzz.length != macKey.length)   throw new AssociationException("MAC key legth different from shared secret digest length!");  byte[] encMacKey=new byte[hzz.length];  for (int i=0; i < hzz.length; i++) {    byte b1=hzz[i];    byte b2=macKey[i];    encMacKey[i]=(byte)(b1 ^ b2);  }  String encMacKeyBase64=new String(Base64.encodeBase64(encMacKey));  if (DEBUG)   _log.debug("Encrypted MAC key Base64: " + encMacKeyBase64);  return encMacKeyBase64;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public E peek(){  if (top == null) {    throw new EmptyStackException();  }  return top.item;}  }
class C{  public String ridgeTipText(){  return "The value of the Ridge parameter.";}  }
class C{  public void intern(boolean onlyIfExists){  XToolkit.awtLock();  try {    atom=XlibWrapper.InternAtom(display,name,onlyIfExists ? 1 : 0);  }  finally {    XToolkit.awtUnlock();  }  register();}  }
class C{  @NotNull @ObjectiveCName("requestInviteLinkCommandWithGid:") public Command<String> requestInviteLink(int gid){  return null;}  }
class C{  public static void removeParentPosition(long id){  if (savedListPosition.containsKey(id))   savedListPosition.remove(id);}  }
class C{  protected AfterEveryEvent_Impl(){  super();}  }
class C{  private static void putVehicleFromOldTripIntoNewTripIfMeaningful(Trip oldTrip,List<? extends PlanElement> newTrip){  Id<Vehicle> oldVehicleId=getUniqueVehicleId(oldTrip);  if (oldVehicleId != null) {    for (    Leg leg : TripStructureUtils.getLegs(newTrip)) {      if (leg.getRoute() instanceof NetworkRoute) {        if (((NetworkRoute)leg.getRoute()).getVehicleId() == null) {          ((NetworkRoute)leg.getRoute()).setVehicleId(oldVehicleId);        }      }    }  }}  }
class C{  public int size(){  return 0;}  }
class C{  AbcData.Trait[] scanTraits(BytecodeBuffer buf){  int count=buf.readU32();  AbcData.Trait[] result=new AbcData.Trait[count];  for (int i=0; i < count; i++) {    int name_index=buf.readU32();    int kind=buf.readU8();    int tag=kind & 0x0f;    AbcData.Trait new_trait=null;switch (tag) {case ActionBlockConstants.TRAIT_Var:case ActionBlockConstants.TRAIT_Const:{        int slot_id=buf.readU32();        int trait_type=buf.readU32();        int value_index=buf.readU32();        int value_kind=0;        if (value_index > 0)         value_kind=buf.readU8();        new_trait=this.new Trait(name_index,kind,new int[]{slot_id,trait_type,value_index,value_kind});        break;      }case ActionBlockConstants.TRAIT_Method:case ActionBlockConstants.TRAIT_Getter:case ActionBlockConstants.TRAIT_Setter:{      int disp_id=buf.readU32();      int method=buf.readU32();      new_trait=this.new Trait(name_index,kind,new int[]{disp_id,method});      break;    }case ActionBlockConstants.TRAIT_Class:case ActionBlockConstants.TRAIT_Function:{    int slot_id=buf.readU32();    int class_id=buf.readU32();    new_trait=this.new Trait(name_index,kind,new int[]{slot_id,class_id});    break;  }default :break;}assert (new_trait != null);result[i]=new_trait;if (new_trait.hasMetadata()) {int metadata_count=buf.readU32();int[] metadata=new int[metadata_count];for (int j=0; j < metadata_count; j++) metadata[j]=buf.readU32();new_trait.addMetadata(metadata);}}return result;}  }
class C{  public MnemonicCode(ArrayList<String> wordList,String wordListDigest) throws IllegalArgumentException {  initializeFromWords(wordList,wordListDigest);}  }
class C{  public static TagLib nameSpace(Data data){  boolean hasTag=false;  int start=data.srcCode.getPos();  TagLib tagLib=null;  for (int i=1; i >= 0; i--) {    for (int ii=0; ii < data.tlibs[i].length; ii++) {      tagLib=data.tlibs[i][ii];      char[] c=tagLib.getNameSpaceAndSeperatorAsCharArray();      hasTag=true;      for (int y=0; y < c.length; y++) {        if (!(data.srcCode.isValidIndex() && c[y] == data.srcCode.getCurrentLower())) {          hasTag=false;          data.srcCode.setPos(start);          break;        }        data.srcCode.next();      }      if (hasTag)       return tagLib;    }  }  return null;}  }
class C{  protected FunctionDefinitionImpl(){  super();}  }
class C{  private boolean isToAddOrientationHeader(byte[] h264Frame,VideoOrientation frameOrientation){  H264RtpHeaders h264Header=new H264RtpHeaders(h264Frame);  if (h264Header.isIDRSlice()) {    return true;  }  if ((frameOrientation != null && previousOrientation != null && h264Header != null && previousOrientation.getOrientation() != frameOrientation.getOrientation()) && h264Header.isNonIDRSlice()) {    return true;  }  return false;}  }
class C{  public ICalComponent peek(){  return isEmpty() ? null : components.get(components.size() - 1);}  }
class C{  public SymbolicRegressionGUI(SymbolicRegression problem){  super("Symbolic Regression Demo");  this.problem=problem;  initialize();  layoutComponents();  setSize(600,600);  setLocationRelativeTo(null);  setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);  addWindowListener(this);  setIconImages(Settings.getIconImages());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public InternalFunctionInvocationTargetException(String msg){  super(msg);}  }
class C{  protected String doIt() throws java.lang.Exception {  log.info("");  checkTableSequences(Env.getCtx(),this);  checkTableID(Env.getCtx(),this);  checkClientSequences(Env.getCtx(),this);  return "Sequence Check";}  }
class C{  private TimeSeries createDailyTimeSeries1(){  TimeSeries series=new TimeSeries("Series 1",Day.class);  series.add(new Day(11,MonthConstants.AUGUST,2003),11.2);  series.add(new Day(13,MonthConstants.AUGUST,2003),13.8);  series.add(new Day(17,MonthConstants.AUGUST,2003),14.1);  series.add(new Day(18,MonthConstants.AUGUST,2003),12.7);  series.add(new Day(19,MonthConstants.AUGUST,2003),16.5);  series.add(new Day(20,MonthConstants.AUGUST,2003),15.6);  series.add(new Day(25,MonthConstants.AUGUST,2003),19.8);  series.add(new Day(27,MonthConstants.AUGUST,2003),10.7);  series.add(new Day(28,MonthConstants.AUGUST,2003),14.3);  return series;}  }
class C{  protected void not_null(Object obj) throws internal_error {  if (obj == null)   throw new internal_error("Null object used in set operation");}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  boolean _isDominatedBy(DominatorTreeNode master){  DominatorTreeNode node=this;  while ((node != null) && (node != master)) {    node=(DominatorTreeNode)node.getParent();  }  return node == master;}  }
class C{  public void paintRootPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public void notifyStickyAttributeChanged(){  notifyHierarchyChanged();}  }
class C{  private void convertData(){  m_debuggerTemplates=new FilledList<DebuggerTemplate>();  final List<DebuggerTemplate> apiTemplates=m_database.getDebuggerTemplateManager().getDebuggerTemplates();  for (  final com.google.security.zynamics.binnavi.debug.debugger.DebuggerTemplate debuggerTemplate : m_project.getConfiguration().getDebuggers()) {    m_debuggerTemplates.add(ObjectFinders.getObject(debuggerTemplate,apiTemplates));  }  m_traces=new FilledList<Trace>();  for (  final TraceList trace : m_project.getContent().getTraces()) {    m_traces.add(new Trace(trace));  }  m_addressSpaces=new FilledList<AddressSpace>();  for (  final INaviAddressSpace addressSpace : m_project.getContent().getAddressSpaces()) {    m_addressSpaces.add(new AddressSpace(m_database,this,addressSpace));  }  m_views=new FilledList<View>();  for (  final INaviView view : m_project.getContent().getViews()) {    m_views.add(new View(this,view,m_nodeTagManager,m_viewTagManager));  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void addJob(JobDetail jobDetail,boolean replace) throws SchedulerException {  sched.addJob(jobDetail,replace);}  }
class C{  public void markAsRendererStyle(){  renderer=true;}  }
class C{  @Override public int hashCode(){  int result=193;  result=HashUtilities.hashCode(result,this.anchor);  result=HashUtilities.hashCode(result,this.coordinateType);  result=HashUtilities.hashCode(result,this.x);  result=HashUtilities.hashCode(result,this.y);  result=HashUtilities.hashCode(result,this.maxWidth);  result=HashUtilities.hashCode(result,this.maxHeight);  result=HashUtilities.hashCode(result,this.title);  return result;}  }
class C{  public int useFuel(int amt){  if (amt > getFuelAmount())   return 0;  fuelAmount-=amt;  if (FMLCommonHandler.instance().getSide().isServer())   PacketHandler.sendToAll(new PacketStationUpdate(this,Type.FUEL_UPDATE));  return amt;}  }
class C{  public CompiledST lookupTemplate(String name){  if (name.charAt(0) != '/')   name="/" + name;  if (verbose)   System.out.println(getName() + ".lookupTemplate(" + name+ ")");  CompiledST code=rawGetTemplate(name);  if (code == NOT_FOUND_ST) {    if (verbose)     System.out.println(name + " previously seen as not found");    return null;  }  if (code == null)   code=load(name);  if (code == null)   code=lookupImportedTemplate(name);  if (code == null) {    if (verbose)     System.out.println(name + " recorded not found");    templates.put(name,NOT_FOUND_ST);  }  if (verbose)   if (code != null)   System.out.println(getName() + ".lookupTemplate(" + name+ ") found");  return code;}  }
class C{  public SignatureVisitor visitClassBound(){  return this;}  }
class C{  private void resetTopicAlarmState(String rootContext){  m_alarmState.get(rootContext).set(false);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  @Override protected void installDefaults(){  updateStyle(splitPane);  setOrientation(splitPane.getOrientation());  setContinuousLayout(splitPane.isContinuousLayout());  resetLayoutManager();  if (nonContinuousLayoutDivider == null) {    setNonContinuousLayoutDivider(createDefaultNonContinuousLayoutDivider(),true);  } else {    setNonContinuousLayoutDivider(nonContinuousLayoutDivider,true);  }  if (managingFocusForwardTraversalKeys == null) {    managingFocusForwardTraversalKeys=new HashSet<KeyStroke>();    managingFocusForwardTraversalKeys.add(KeyStroke.getKeyStroke(KeyEvent.VK_TAB,0));  }  splitPane.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,managingFocusForwardTraversalKeys);  if (managingFocusBackwardTraversalKeys == null) {    managingFocusBackwardTraversalKeys=new HashSet<KeyStroke>();    managingFocusBackwardTraversalKeys.add(KeyStroke.getKeyStroke(KeyEvent.VK_TAB,InputEvent.SHIFT_MASK));  }  splitPane.setFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS,managingFocusBackwardTraversalKeys);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z, min, max;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          min=z;          max=z;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData) {              if (z < min) {                min=z;              }              if (z > max) {                max=z;              }            }          }          outputFile.setValue(row,col,(max - min));        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void initThreadPool(){  mReadExecutorService=Executors.newSingleThreadExecutor();  mReportExecutorService=Executors.newScheduledThreadPool(SpeedTestConst.THREAD_POOL_REPORT_SIZE);  mWriteExecutorService=Executors.newSingleThreadExecutor();}  }
class C{  public RegisterRequestMessage(RegisterRequestMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetStore()) {    this.store=new Store(other.store);  }}  }
class C{  public void executeBatchRewrite(boolean mustExecuteOnMaster,ExecutionResult executionResult,final ClientPrepareResult prepareResult,List<ParameterHolder[]> parameterList,int resultSetScrollType,boolean rewriteValues) throws QueryException {  cmdPrologue();  ParameterHolder[] parameters;  int currentIndex=0;  int totalParameterList=parameterList.size();  try {    do {      parameters=parameterList.get(currentIndex++);      currentIndex=ComExecute.sendRewriteCmd(writer,prepareResult.getQueryParts(),parameters,currentIndex,prepareResult.getParamCount(),parameterList,rewriteValues);      getResult(executionResult,resultSetScrollType,false,true);    } while (currentIndex < totalParameterList);  } catch (  QueryException queryException) {    throwErrorWithQuery(writer.buffer,queryException);  }catch (  MaxAllowedPacketException e) {    if (e.isMustReconnect())     connect();    throw new QueryException("Could not send query: " + e.getMessage(),-1,INTERRUPTED_EXCEPTION.getSqlState(),e);  }catch (  IOException e) {    throw new QueryException("Could not send query: " + e.getMessage(),-1,CONNECTION_EXCEPTION.getSqlState(),e);  } finally {    writer.releaseBufferIfNotLogging();  }}  }
class C{  private int enumerateGeneric(Object[] enumeration,boolean recurse,int enumerationIndex,boolean enumeratingThreads){  if (enumeratingThreads) {synchronized (threadRefs) {      for (int i=threadRefs.size() - 1; i >= 0; --i) {        Thread thread=threadRefs.get(i).get();        if (thread != null && thread.isAlive()) {          if (enumerationIndex >= enumeration.length) {            return enumerationIndex;          }          enumeration[enumerationIndex++]=thread;        }      }    }  } else {synchronized (groups) {      for (int i=groups.size() - 1; i >= 0; --i) {        if (enumerationIndex >= enumeration.length) {          return enumerationIndex;        }        enumeration[enumerationIndex++]=groups.get(i);      }    }  }  if (recurse) {synchronized (groups) {      for (      ThreadGroup group : groups) {        if (enumerationIndex >= enumeration.length) {          return enumerationIndex;        }        enumerationIndex=group.enumerateGeneric(enumeration,recurse,enumerationIndex,enumeratingThreads);      }    }  }  return enumerationIndex;}  }
class C{  public void onScrollRight(View view){  if (!checkReady()) {    return;  }  changeCamera(CameraUpdateFactory.scrollBy(SCROLL_BY_PX,0));}  }
class C{  public boolean equals(Object other){  if (other == null || !(other instanceof GF2mMatrix)) {    return false;  }  GF2mMatrix otherMatrix=(GF2mMatrix)other;  if ((!this.field.equals(otherMatrix.field)) || (otherMatrix.numRows != this.numColumns) || (otherMatrix.numColumns != this.numColumns)) {    return false;  }  for (int i=0; i < this.numRows; i++) {    for (int j=0; j < this.numColumns; j++) {      if (this.matrix[i][j] != otherMatrix.matrix[i][j]) {        return false;      }    }  }  return true;}  }
class C{  public Date scheduleJob(Trigger trigger) throws SchedulerException {  try {    return getRemoteScheduler().scheduleJob(trigger);  } catch (  RemoteException re) {    throw invalidateHandleCreateException("Error communicating with remote scheduler.",re);  }}  }
class C{  private String removeParameters(String targetUri){  int parameterIndex=targetUri.lastIndexOf('?');  if (parameterIndex != NO_PARAMETER_FOUND) {    return targetUri.substring(START_INDEX,parameterIndex);  }  return targetUri;}  }
class C{  public SimpleTextFieldItem(String label,StringProperty property,String tooltip){  this(label,property,tooltip,NO_DECORATOR);}  }
class C{  private List<String> checkPathsPerInitiator(int pathsPerInitiator,List<String> targetPathsList){  log.debug("START - checkPathsPerInitiator");  List<String> tmpTargetList=new ArrayList<String>();  int targetPathsCount=targetPathsList.size();  if (targetPathsCount == pathsPerInitiator) {    tmpTargetList.addAll(targetPathsList);  } else   if (targetPathsCount > pathsPerInitiator) {    if (1 == pathsPerInitiator) {      tmpTargetList.add(targetPathsList.get(0));    } else {      tmpTargetList.addAll(targetPathsList.subList(0,pathsPerInitiator));    }  } else {    return null;  }  log.debug("END - checkPathsPerInitiator");  return tmpTargetList;}  }
class C{  public static String readFileToString(File file) throws IOException {  return readFileToString(file,Charset.defaultCharset());}  }
class C{  private CharSequence insertGrouping(CharSequence s){  StringBuilder result=new StringBuilder(s.length() + s.length() / 3);  int digitsLength=s.length();  int i=0;  if (s.charAt(0) == '-') {    --digitsLength;    ++i;    result.append('-');  }  int headLength=digitsLength % 3;  if (headLength == 0) {    headLength=3;  }  result.append(s,i,i + headLength);  i+=headLength;  for (; i < s.length(); i+=3) {    result.append(groupingSeparator());    result.append(s,i,i + 3);  }  return result;}  }
class C{  public void addConstraintCommand(DefineCommand command){  if (command instanceof CreateIndex) {    constraintCommands.add(command);  } else {    AlterTableAddConstraint con=(AlterTableAddConstraint)command;    boolean alreadySet;    if (con.getType() == CommandInterface.ALTER_TABLE_ADD_CONSTRAINT_PRIMARY_KEY) {      alreadySet=setPrimaryKeyColumns(con.getIndexColumns());    } else {      alreadySet=false;    }    if (!alreadySet) {      constraintCommands.add(command);    }  }}  }
class C{  private int calculateWeight(){  int weight=0;  int characterCount=-1;  for (int x=0; x < mValue.length(); x++) {    if (mValue.substring(x,x + 1).equals(WILDCARD)) {      weight+=(int)(Math.pow(2,mValue.length() - x - 1));      characterCount++;    }  }  weight+=(int)(Math.pow(2,characterCount)) * 1000;  return weight;}  }
class C{  private void split(){  if (!isSplit) {    splitFullName();    splitHostNameAndMeta();    isSplit=true;  }}  }
class C{  public boolean needSave(int newRow,boolean onlyRealChange){  log.fine("Row=" + newRow + ", Changed="+ m_rowChanged+ "/"+ m_changed);  if (!m_changed && m_rowChanged == -1)   return false;  if (m_changed && m_rowChanged == -1 && onlyRealChange)   return false;  if (newRow == m_rowChanged)   return false;  return true;}  }
class C{  public SimpleBuilder(String sSentence){  m_sSentence=sSentence;}  }
class C{  private static String convertActionTypeToIntent(RamlActionType actionType,boolean isTargetCollection){switch (actionType) {case DELETE:    return "delete";case GET:  return "get";case POST:if (isTargetCollection) {  return "create";}case PUT:return "update";case PATCH:return "modify";default :return "do";}}  }
class C{  public <E extends IInputDefinitionExtra>void addInputDefinitonExtra(InputDefinitionExtraMarker<E> extraMarker,E extra){  inputDefintionExtras.put(extraMarker,extra);}  }
class C{  @Override public PilotingRollData addEntityBonuses(PilotingRollData roll){  return roll;}  }
class C{  private void error(String description){  for (  SpeedrunsLiveListener listener : listeners) {    listener.error(description);  }}  }
class C{  public static Component toComponent(Object o) throws PageException {  if (o instanceof Component)   return (Component)o; else   if (o instanceof ObjectWrap) {    return toComponent(((ObjectWrap)o).getEmbededObject());  }  throw new CasterException(o,"Component");}  }
class C{  @Override public boolean isSelected(){  return this.layer.isEnabled();}  }
class C{  public float score(){  float score=getHypothesis().getScore() + getPhraseNode().getScore() + future_delta+ computedResult.getTransitionCost();  return score;}  }
class C{  public void addSystemClass(SootClass sc){  allSystemClasses.add(sc);}  }
class C{  public static void rotateM(float[] m,int mOffset,float a,float x,float y,float z){synchronized (TEMP_MATRIX_ARRAY) {    setRotateM(TEMP_MATRIX_ARRAY,0,a,x,y,z);    multiplyMM(TEMP_MATRIX_ARRAY,16,m,mOffset,TEMP_MATRIX_ARRAY,0);    System.arraycopy(TEMP_MATRIX_ARRAY,16,m,mOffset,16);  }}  }
class C{  private boolean closeInjectorOptionalResource(ShardId shardId,Injector shardInjector,Class<? extends Closeable> toClose){  try {    final Closeable instance=shardInjector.getInstance(toClose);    if (instance == null) {      return false;    }    IOUtils.close(instance);  } catch (  Throwable t) {    logger.debug("{} failed to close {}",t,shardId,Strings.toUnderscoreCase(toClose.getSimpleName()));  }  return true;}  }
class C{  public static void multRow(Matrix A,int i,double[] c){  if (A.cols() != c.length)   throw new ArithmeticException("Can not perform row update, length miss match " + A.cols() + " and "+ c.length);  multRow(A,i,0,c.length,c);}  }
class C{  public final short readShort() throws IOException {  int ch1=this.read();  int ch2=this.read();  if ((ch1 | ch2) < 0) {    throw new EOFException();  }  if (bigEndian) {    return (short)((ch1 << 8) + (ch2));  } else {    return (short)((ch2 << 8) + (ch1));  }}  }
class C{  public static BigInteger[] proofEqualCoords(SMState state,BigInteger r,int version) throws SMException {  BigInteger r1=randomExponent();  BigInteger r2=randomExponent();  BigInteger temp1=state.g1.modPow(r1,MODULUS_S);  BigInteger temp2=state.g2.modPow(r2,MODULUS_S);  temp2=temp1.multiply(temp2).mod(MODULUS_S);  temp1=state.g3.modPow(r1,MODULUS_S);  BigInteger c=hash(version,temp1,temp2);  temp1=r.multiply(c).mod(ORDER_S);  BigInteger d1=r1.subtract(temp1).mod(ORDER_S);  temp1=state.secret.multiply(c).mod(ORDER_S);  BigInteger d2=r2.subtract(temp1).mod(ORDER_S);  BigInteger[] ret=new BigInteger[3];  ret[0]=c;  ret[1]=d1;  ret[2]=d2;  return ret;}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public static <A extends Annotation>AnnotationValues<A> of(Class<A> type,LombokNode<?,?,?> ast){  return new AnnotationValues<A>(type,Collections.<String,AnnotationValue>emptyMap(),ast);}  }
class C{  public Boolean isProtocolEndpoint(){  return protocolEndpoint;}  }
class C{  @Override public void moveToCurrentRow() throws SQLException {  try {    debugCodeCall("moveToCurrentRow");    checkUpdatable();    insertRow=null;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public Entity(String name,int type,char data[]){  this.name=name;  this.type=type;  this.data=data;}  }
class C{  @Override public final boolean openPdfFileFromInputStream(final InputStream is,final boolean supportLinearized,final String password) throws PdfException {  final String rawFileName="inputstream" + System.currentTimeMillis() + '-'+ fileAccess.getObjectStore().getKey()+ ".pdf";  preOpen();  final boolean flag=fileAccess.readFile(supportLinearized,is,rawFileName,password);  postOpen();  return flag;}  }
class C{  public static String htmlEncode(String s){  StringBuilder sb=new StringBuilder();  char c;  for (int i=0; i < s.length(); i++) {    c=s.charAt(i);switch (c) {case '<':      sb.append("&lt;");    break;case '>':  sb.append("&gt;");break;case '&':sb.append("&amp;");break;case '\'':sb.append("&#39;");break;case '"':sb.append("&quot;");break;default :sb.append(c);}}return sb.toString();}  }
class C{  @DSSource({DSSourceKind.CONTACT_INFORMATION}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:59.592 -0500",hash_original_method="4B575D0B1951007B3070BB5D97839CB3",hash_generated_method="98F0ABAF4C6F0C4447D99323EA8403DE") @Deprecated public static Uri addToGroup(ContentResolver resolver,long personId,String groupName){  long groupId=0;  Cursor groupsCursor=resolver.query(Groups.CONTENT_URI,GROUPS_PROJECTION,Groups.NAME + "=?",new String[]{groupName},null);  if (groupsCursor != null) {    try {      if (groupsCursor.moveToFirst()) {        groupId=groupsCursor.getLong(0);      }    }  finally {      groupsCursor.close();    }  }  if (groupId == 0) {    throw new IllegalStateException("Failed to find the My Contacts group");  }  return addToGroup(resolver,personId,groupId);}  }
class C{  public static String replace(String str,char oldChar,String newStr){  StringBuffer buf=new StringBuffer();  for (int i=0; i < str.length(); i++) {    char ch=str.charAt(i);    if (ch == oldChar) {      buf.append(newStr);    } else {      buf.append(ch);    }  }  return buf.toString();}  }
class C{  public void back(){  if (--pos == -1) {    pos=0;  }}  }
class C{  public void remove(String key){  this.json.remove(key);  if (this.parent != null && this.credential.isPersistent())   this.parent.commit();}  }
class C{  public NotificationChain basicSetTypeRef(TypeRef newTypeRef,NotificationChain msgs){  TypeRef oldTypeRef=typeRef;  typeRef=newTypeRef;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,TypesPackage.TVARIABLE__TYPE_REF,oldTypeRef,newTypeRef);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static void sort(Object[] array){  sort(0,array.length,array);}  }
class C{  private ViewUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  public UWidget widget(){  UWidget uw=new UWidget();  uw.slide(this);  return uw;}  }
class C{  private ExceptionBuilder(Status status){  this.status=status;  body=new ExceptionBody();  body.setCode(status.getStatusCode());  body.setError(null);  body.setProperty(null);  body.setMessage(null);  body.setMoreInfo(null);}  }
class C{  public static synchronized void installTransactionManager(CompositeTransactionManager ctm,boolean automaticResourceRegistration){  if (ctm != null) {    singleton=new TransactionManagerImp(ctm,automaticResourceRegistration);  } else {    singleton=null;  }}  }
class C{  public void drawTitle(Canvas canvas,int x,int y,int width,Paint paint){  if (mRenderer.isShowLabels()) {    paint.setColor(mRenderer.getLabelsColor());    paint.setTextAlign(Align.CENTER);    paint.setTextSize(mRenderer.getChartTitleTextSize());    drawString(canvas,mRenderer.getChartTitle(),x + width / 2,y + mRenderer.getChartTitleTextSize(),paint);  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:35.416 -0500",hash_original_method="CBB0C72EDE04C5F3EB469B462BDF9293",hash_generated_method="D85AF66DDD5CE2E826A3759035247BDC") public void logp(Level logLevel,String sourceClass,String sourceMethod,String msg,Object[] params){  if (!internalIsLoggable(logLevel)) {    return;  }  LogRecord record=new LogRecord(logLevel,msg);  record.setLoggerName(this.name);  record.setSourceClassName(sourceClass);  record.setSourceMethodName(sourceMethod);  record.setParameters(params);  setResourceBundle(record);  log(record);}  }
class C{  public static long parseDateAsEpoch(String dateStr){  try {    return DateUtils.parseDate(dateStr).getTime();  } catch (  DateParseException e) {    return 0;  }}  }
class C{  public static void startUrl(Context cxt,String url){  cxt.startActivity(new Intent(Intent.ACTION_VIEW).setData(Uri.parse(url)));}  }
class C{  private int readMethod(final ClassVisitor classVisitor,final Context context,int u){  char[] c=context.buffer;  context.access=readUnsignedShort(u);  context.name=readUTF8(u + 2,c);  context.desc=readUTF8(u + 4,c);  u+=6;  int code=0;  int exception=0;  String[] exceptions=null;  String signature=null;  int methodParameters=0;  int anns=0;  int ianns=0;  int tanns=0;  int itanns=0;  int dann=0;  int mpanns=0;  int impanns=0;  int firstAttribute=u;  Attribute attributes=null;  for (int i=readUnsignedShort(u); i > 0; --i) {    String attrName=readUTF8(u + 2,c);    if ("Code".equals(attrName)) {      if ((context.flags & SKIP_CODE) == 0) {        code=u + 8;      }    } else     if ("Exceptions".equals(attrName)) {      exceptions=new String[readUnsignedShort(u + 8)];      exception=u + 10;      for (int j=0; j < exceptions.length; ++j) {        exceptions[j]=readClass(exception,c);        exception+=2;      }    } else     if (SIGNATURES && "Signature".equals(attrName)) {      signature=readUTF8(u + 8,c);    } else     if ("Deprecated".equals(attrName)) {      context.access|=Opcodes.ACC_DEPRECATED;    } else     if (ANNOTATIONS && "RuntimeVisibleAnnotations".equals(attrName)) {      anns=u + 8;    } else     if (ANNOTATIONS && "RuntimeVisibleTypeAnnotations".equals(attrName)) {      tanns=u + 8;    } else     if (ANNOTATIONS && "AnnotationDefault".equals(attrName)) {      dann=u + 8;    } else     if ("Synthetic".equals(attrName)) {      context.access|=Opcodes.ACC_SYNTHETIC | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE;    } else     if (ANNOTATIONS && "RuntimeInvisibleAnnotations".equals(attrName)) {      ianns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {      itanns=u + 8;    } else     if (ANNOTATIONS && "RuntimeVisibleParameterAnnotations".equals(attrName)) {      mpanns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleParameterAnnotations".equals(attrName)) {      impanns=u + 8;    } else     if ("MethodParameters".equals(attrName)) {      methodParameters=u + 8;    } else {      Attribute attr=readAttribute(context.attrs,attrName,u + 8,readInt(u + 4),c,-1,null);      if (attr != null) {        attr.next=attributes;        attributes=attr;      }    }    u+=6 + readInt(u + 4);  }  u+=2;  MethodVisitor mv=classVisitor.visitMethod(context.access,context.name,context.desc,signature,exceptions);  if (mv == null) {    return u;  }  if (WRITER && mv instanceof MethodWriter) {    MethodWriter mw=(MethodWriter)mv;    if (mw.cw.cr == this && signature == mw.signature) {      boolean sameExceptions=false;      if (exceptions == null) {        sameExceptions=mw.exceptionCount == 0;      } else       if (exceptions.length == mw.exceptionCount) {        sameExceptions=true;        for (int j=exceptions.length - 1; j >= 0; --j) {          exception-=2;          if (mw.exceptions[j] != readUnsignedShort(exception)) {            sameExceptions=false;            break;          }        }      }      if (sameExceptions) {        mw.classReaderOffset=firstAttribute;        mw.classReaderLength=u - firstAttribute;        return u;      }    }  }  if (methodParameters != 0) {    for (int i=b[methodParameters] & 0xFF, v=methodParameters + 1; i > 0; --i, v=v + 4) {      mv.visitParameter(readUTF8(v,c),readUnsignedShort(v + 2));    }  }  if (ANNOTATIONS && dann != 0) {    AnnotationVisitor dv=mv.visitAnnotationDefault();    readAnnotationValue(dann,c,null,dv);    if (dv != null) {      dv.visitEnd();    }  }  if (ANNOTATIONS && anns != 0) {    for (int i=readUnsignedShort(anns), v=anns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,mv.visitAnnotation(readUTF8(v,c),true));    }  }  if (ANNOTATIONS && ianns != 0) {    for (int i=readUnsignedShort(ianns), v=ianns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,mv.visitAnnotation(readUTF8(v,c),false));    }  }  if (ANNOTATIONS && tanns != 0) {    for (int i=readUnsignedShort(tanns), v=tanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,mv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),true));    }  }  if (ANNOTATIONS && itanns != 0) {    for (int i=readUnsignedShort(itanns), v=itanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,mv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),false));    }  }  if (ANNOTATIONS && mpanns != 0) {    readParameterAnnotations(mv,context,mpanns,true);  }  if (ANNOTATIONS && impanns != 0) {    readParameterAnnotations(mv,context,impanns,false);  }  while (attributes != null) {    Attribute attr=attributes.next;    attributes.next=null;    mv.visitAttribute(attributes);    attributes=attr;  }  if (code != 0) {    mv.visitCode();    readCode(mv,context,code);  }  mv.visitEnd();  return u;}  }
class C{  private void updateExportGroup(ExportGroup exportGroup,DbClient dbClient){  if (_addedInitiators != null) {    exportGroup.addInitiators(_addedInitiators);  }  if (_removedInitiators != null) {    exportGroup.removeInitiators(_removedInitiators);  }  if (_addedHosts != null) {    exportGroup.addHosts(_addedHosts);  }  if (_removedHosts != null) {    exportGroup.removeHosts(_removedHosts);  }  if (_addedClusters != null) {    exportGroup.addClusters(_addedClusters);  }  if (_removedClusters != null) {    exportGroup.removeClusters(_removedClusters);  }  if (_addedBlockObjects != null) {    exportGroup.addVolumes(_addedBlockObjects);  }  if (_removedBlockObjects != null) {    exportGroup.removeVolumes(_removedBlockObjects);  }}  }
class C{  public PointerTypePanel(final Component parent,final TypeManager typeManager){  this(parent,typeManager,null);}  }
class C{  public boolean isSameNode(Node other){  return this == other;}  }
class C{  protected void optimize(final AST2BOpContext ctx,final StaticAnalysis sa,final GraphPatternGroup<? extends IGroupMemberNode> group,final PropertyPathInfo ppInfo,final PathNegatedPropertySet pathNPS,final ArbitraryLengthPathNode alpNode,final PropertyPathNode ppNode){  ArrayList<ConstantNode> forward=null;  ArrayList<ConstantNode> back=null;  for (  BOp child : pathNPS.args()) {    final PathOneInPropertySet pathOIPS=(PathOneInPropertySet)child;    final ConstantNode iri=(ConstantNode)pathOIPS.get(0);    if (pathOIPS.inverse()) {      if (back == null)       back=new ArrayList<ConstantNode>();      back.add(iri);    } else {      if (forward == null)       forward=new ArrayList<ConstantNode>();      forward.add(iri);    }  }  if (forward != null && back != null) {    final UnionNode union=new PropertyPathUnionNode();    final JoinGroupNode forwardGroup=new JoinGroupNode();    final JoinGroupNode backGroup=new JoinGroupNode();    union.addArg(forwardGroup);    union.addArg(backGroup);    group.addArg(getPositionOfNodeInGroup(ppNode,group),union);    addNegateds(forwardGroup,forward,ppInfo,alpNode,ppNode);    addNegateds(backGroup,back,ppInfo.inverse(),alpNode,ppNode);  } else   if (forward != null) {    addNegateds(group,forward,ppInfo,alpNode,ppNode);  } else {    addNegateds(group,back,ppInfo.inverse(),alpNode,ppNode);  }}  }
class C{  public synchronized int available() throws IOException {  ensureOpen();  int avail=chunkCount - chunkPos;  if (avail > 0) {    return avail;  }  avail=readAhead(false);  if (avail < 0) {    return 0;  } else {    return avail;  }}  }
class C{  @Override protected String[] loadCategories(){  ArrayList<String> allCategories=new ArrayList<>();  allCategories.add(Messages.EditGefaehrdungDialog_4);  allCategories.addAll(Gefaehrdung.getAllCategories());  List<OwnGefaehrdung> allOwnGefaehrdungen=new ArrayList<>(0);  try {    allOwnGefaehrdungen=OwnGefaehrdungHome.getInstance().loadAll();  } catch (  Exception e) {    ExceptionUtil.log(e,Messages.EditGefaehrdungDialog_5);  }  Boolean contains=false;  for (  OwnGefaehrdung gefaehrdung : allOwnGefaehrdungen) {    for (    String category : allCategories) {      if (category.equalsIgnoreCase(gefaehrdung.getKategorieAsString())) {        contains=true;        break;      }    }    if (!contains) {      allCategories.add(gefaehrdung.getKategorieAsString());    } else {      contains=false;    }  }  return allCategories.toArray(new String[allCategories.size()]);}  }
class C{  private static TimeSynchronizationSample createTimeSynchronizationSample(final long timeOffset){  return new TimeSynchronizationSample(new Node(new NodeIdentity(KEY_PAIR,"node"),new NodeEndpoint("http","10.10.10.12",13),null),new CommunicationTimeStamps(new NetworkTimeStamp(0),new NetworkTimeStamp(10)),new CommunicationTimeStamps(new NetworkTimeStamp(5 + timeOffset),new NetworkTimeStamp(5 + timeOffset)));}  }
class C{  private LogCounter runConsistentRoutesTestSim(final String startLinkId,final String linkIds,final String endLinkId,final EventsManager events){  Fixture f=new Fixture(isUsingFastCapacityUpdate);  Node node5=NetworkUtils.createAndAddNode(f.network,Id.create("5",Node.class),new Coord(3100,0));  Node node6=NetworkUtils.createAndAddNode(f.network,Id.create("6",Node.class),new Coord(3200,0));  Node node7=NetworkUtils.createAndAddNode(f.network,Id.create("7",Node.class),new Coord(3300,0));  final Node toNode=node5;  NetworkUtils.createAndAddLink(f.network,Id.create("4",Link.class),f.node4,toNode,(double)1000,(double)10,(double)6000,(double)2);  final Node fromNode=node5;  final Node toNode1=node6;  Link link5=NetworkUtils.createAndAddLink(f.network,Id.create("5",Link.class),fromNode,toNode1,(double)100,(double)10,(double)60000,(double)9);  final Node fromNode1=node6;  final Node toNode2=node7;  Link link6=NetworkUtils.createAndAddLink(f.network,Id.create("6",Link.class),fromNode1,toNode2,(double)100,(double)10,(double)60000,(double)9);  ((PopulationFactory)f.scenario.getPopulation().getFactory()).getRouteFactories().setRouteFactory(NetworkRoute.class,new LinkNetworkRouteFactory());  Person person=PopulationUtils.getFactory().createPerson(Id.create(0,Person.class));  Plan plan=PersonUtils.createAndAddPlan(person,true);  Activity a1=PopulationUtils.createAndAddActivityFromLinkId(plan,"h",f.link1.getId());  a1.setEndTime(8 * 3600);  Leg leg=PopulationUtils.createAndAddLeg(plan,TransportMode.car);  NetworkRoute route=((PopulationFactory)f.scenario.getPopulation().getFactory()).getRouteFactories().createRoute(NetworkRoute.class,f.link1.getId(),link5.getId());  route.setLinkIds(Id.create(startLinkId,Link.class),NetworkUtils.getLinkIds(linkIds),Id.create(endLinkId,Link.class));  leg.setRoute(route);  Activity a2=PopulationUtils.createAndAddActivityFromLinkId(plan,"w",link5.getId());  a2.setEndTime(9 * 3600);  leg=PopulationUtils.createAndAddLeg(plan,TransportMode.car);  route=((PopulationFactory)f.scenario.getPopulation().getFactory()).getRouteFactories().createRoute(NetworkRoute.class,link5.getId(),link6.getId());  route.setLinkIds(link5.getId(),null,link6.getId());  leg.setRoute(route);  PopulationUtils.createAndAddActivityFromLinkId(plan,"h",link6.getId());  f.plans.addPerson(person);  LogCounter logger=new LogCounter(Level.WARN);  Logger.getRootLogger().addAppender(logger);  createQSim(f,events).run();  Logger.getRootLogger().removeAppender(logger);  return logger;}  }
class C{  public void paintSliderBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public boolean do_NullCheck(Operand ref){  if (gc.noNullChecks()) {    setCurrentGuard(new TrueGuardOperand());    return false;  }  if (ref.isDefinitelyNull()) {    if (DBG_CF)     db("generating definite exception: null_check of definitely null");    endOfBasicBlock=true;    rectifyStateWithNullPtrExceptionHandler();    appendInstruction(Trap.create(TRAP,gc.getTemps().makeTempValidation(),TrapCodeOperand.NullPtr()));    return true;  }  if (ref instanceof RegisterOperand) {    RegisterOperand rop=(RegisterOperand)ref;    if (hasGuard(rop)) {      Operand guard=copyGuardFromOperand(rop);      setCurrentGuard(guard);      if (DBG_ELIMNULL) {        db("null check of " + ref + " is not necessary; guarded by "+ guard);      }      return false;    }    RegisterOperand guard=gc.makeNullCheckGuard(rop.getRegister());    appendInstruction(NullCheck.create(NULL_CHECK,guard,ref.copy()));    rectifyStateWithNullPtrExceptionHandler();    setCurrentGuard(guard);    setGuardForRegOp(rop,guard);    if (DBG_ELIMNULL)     db(rop + " is guarded by " + guard);    if (rop.getRegister().isLocal()) {      int number=gc.getLocalNumberFor(rop.getRegister(),rop.getType());      if (number != -1) {        Operand loc=getLocal(number);        if (loc instanceof RegisterOperand) {          if (DBG_ELIMNULL) {            db("setting local #" + number + "("+ loc+ ") to non-null");          }          setGuardForRegOp((RegisterOperand)loc,guard);        }        setLocal(number,loc);      }    }    for (int i=stack.getSize() - 1; i >= 0; --i) {      Operand sop=stack.getFromTop(i);      if (sop instanceof RegisterOperand) {        RegisterOperand sreg=(RegisterOperand)sop;        if (sreg.getRegister() == rop.getRegister()) {          if (hasGuard(sreg)) {            if (DBG_ELIMNULL) {              db(sreg + " on stack already with guard " + copyGuardFromOperand(sreg));            }          } else {            if (DBG_ELIMNULL) {              db("setting " + sreg + " on stack to be guarded by "+ guard);            }            setGuardForRegOp(sreg,guard);          }        }      }    }    return false;  } else {    if (DBG_ELIMNULL) {      db("skipped generation of a null-check instruction for non-register " + ref);    }    setCurrentGuard(new TrueGuardOperand());    return false;  }}  }
class C{  public BooleanColumn(int nrows){  this(nrows,nrows,false);}  }
class C{  @Override protected void onProgressChanged(long currentTime,long duration){  mControlBar.setMax((int)duration);  mControlBar.setProgress((int)currentTime);  mControlBar.setSecondaryProgress(0);  mControlBar.setSecondaryProgress(getStreamerProgress());  if (getCurrentTime() >= 0)   mCurrentTimeTextView.setText(StringUtils.millisToString(currentTime));  if (getDuration() >= 0)   lengthTime.setText(StringUtils.millisToString(duration));}  }
class C{  public static byte[] fromHex(final String string,final int offset,final int count){  if (offset >= string.length())   throw new IllegalArgumentException("Offset is greater than the length (" + offset + " >= "+ string.length()+ ").");  if ((count & 0x01) != 0)   throw new IllegalArgumentException("Count is not divisible by two (" + count + ").");  final int charCount=Math.min((string.length() - offset),count);  final int upperBound=offset + charCount;  final byte[] bytes=new byte[charCount >>> 1];  int byteIndex=0;  for (int i=offset; i < upperBound; i+=2) {    bytes[byteIndex++]=(byte)(((digit(string.charAt(i)) << 4) | digit(string.charAt(i + 1))) & 0xFF);  }  return bytes;}  }
class C{  @Override public void buildEvaluator(Instances data) throws Exception {  getCapabilities().testWithFail(data);  int classIndex=data.classIndex();  int numInstances=data.numInstances();  if (!m_Binarize) {    Discretize disTransform=new Discretize();    disTransform.setUseBetterEncoding(true);    disTransform.setInputFormat(data);    data=Filter.useFilter(data,disTransform);  } else {    NumericToBinary binTransform=new NumericToBinary();    binTransform.setInputFormat(data);    data=Filter.useFilter(data,binTransform);  }  int numClasses=data.attribute(classIndex).numValues();  double[][][] counts=new double[data.numAttributes()][][];  for (int k=0; k < data.numAttributes(); k++) {    if (k != classIndex) {      int numValues=data.attribute(k).numValues();      counts[k]=new double[numValues + 1][numClasses + 1];    }  }  double[] temp=new double[numClasses + 1];  for (int k=0; k < numInstances; k++) {    Instance inst=data.instance(k);    if (inst.classIsMissing()) {      temp[numClasses]+=inst.weight();    } else {      temp[(int)inst.classValue()]+=inst.weight();    }  }  for (int k=0; k < counts.length; k++) {    if (k != classIndex) {      for (int i=0; i < temp.length; i++) {        counts[k][0][i]=temp[i];      }    }  }  for (int k=0; k < numInstances; k++) {    Instance inst=data.instance(k);    for (int i=0; i < inst.numValues(); i++) {      if (inst.index(i) != classIndex) {        if (inst.isMissingSparse(i) || inst.classIsMissing()) {          if (!inst.isMissingSparse(i)) {            counts[inst.index(i)][(int)inst.valueSparse(i)][numClasses]+=inst.weight();            counts[inst.index(i)][0][numClasses]-=inst.weight();          } else           if (!inst.classIsMissing()) {            counts[inst.index(i)][data.attribute(inst.index(i)).numValues()][(int)inst.classValue()]+=inst.weight();            counts[inst.index(i)][0][(int)inst.classValue()]-=inst.weight();          } else {            counts[inst.index(i)][data.attribute(inst.index(i)).numValues()][numClasses]+=inst.weight();            counts[inst.index(i)][0][numClasses]-=inst.weight();          }        } else {          counts[inst.index(i)][(int)inst.valueSparse(i)][(int)inst.classValue()]+=inst.weight();          counts[inst.index(i)][0][(int)inst.classValue()]-=inst.weight();        }      }    }  }  if (m_missing_merge) {    for (int k=0; k < data.numAttributes(); k++) {      if (k != classIndex) {        int numValues=data.attribute(k).numValues();        double[] rowSums=new double[numValues];        double[] columnSums=new double[numClasses];        double sum=0;        for (int i=0; i < numValues; i++) {          for (int j=0; j < numClasses; j++) {            rowSums[i]+=counts[k][i][j];            columnSums[j]+=counts[k][i][j];          }          sum+=rowSums[i];        }        if (Utils.gr(sum,0)) {          double[][] additions=new double[numValues][numClasses];          for (int i=0; i < numValues; i++) {            for (int j=0; j < numClasses; j++) {              additions[i][j]=(rowSums[i] / sum) * counts[k][numValues][j];            }          }          for (int i=0; i < numClasses; i++) {            for (int j=0; j < numValues; j++) {              additions[j][i]+=(columnSums[i] / sum) * counts[k][j][numClasses];            }          }          for (int i=0; i < numClasses; i++) {            for (int j=0; j < numValues; j++) {              additions[j][i]+=(counts[k][j][i] / sum) * counts[k][numValues][numClasses];            }          }          double[][] newTable=new double[numValues][numClasses];          for (int i=0; i < numValues; i++) {            for (int j=0; j < numClasses; j++) {              newTable[i][j]=counts[k][i][j] + additions[i][j];            }          }          counts[k]=newTable;        }      }    }  }  m_InfoGains=new double[data.numAttributes()];  for (int i=0; i < data.numAttributes(); i++) {    if (i != classIndex) {      m_InfoGains[i]=(ContingencyTables.entropyOverColumns(counts[i]) - ContingencyTables.entropyConditionedOnRows(counts[i]));    }  }}  }
class C{  public static Object invokeGetter(Object obj,String methodName,Object defaultValue){  try {    Method method=obj.getClass().getMethod(methodName,new Class[0]);    Object result=method.invoke(obj,new Object[0]);    return result;  } catch (  NoSuchMethodException e) {    return defaultValue;  }catch (  IllegalAccessException e) {    return defaultValue;  }catch (  InvocationTargetException e) {    return defaultValue;  }}  }
class C{  private Boolean isStorageVolumeAlert(Hashtable<String,String> notification){  Boolean isStorageVolumeAlert=Boolean.FALSE;  String alertClassSuffixTag=notification.get(CIMConstants.ALERT_MANAGED_ELEMENT_CLASS_SUFFIX_TAG);  if (alertClassSuffixTag != null) {    isStorageVolumeAlert=alertClassSuffixTag.equalsIgnoreCase(STORAGE_VOLUME_ALERT_REPRESENTATION);  }  return isStorageVolumeAlert;}  }
class C{  public boolean hasUnsatisfiedDependency(int navigableStream,Set<Integer> ignoreList){  Set<Integer> deepDependencies=new HashSet<Integer>();  recursivePopulateDependencies(navigableStream,deepDependencies);  for (  int dependency : deepDependencies) {    if (!ignoreList.contains(dependency)) {      return true;    }  }  return false;}  }
class C{  public void close(){  ReadThread t=thread;  if (t != null)   t.closing=true;  close(new ServiceResultException(Bad_CommunicationError,"Socket closed by the user"));}  }
class C{  public boolean equals(Object to){  return to == null;}  }
class C{  public static void updateBreakpoint(int lineNumber,BPINSTRUCTION_STATUS status){  if (breakpoints.containsKey(lineNumber)) {    breakpoints.get(lineNumber).setBPInstructionStatus(status);    System.out.format("Breakpoint updated at %s, line %d.\n",breakpoints.get(lineNumber).getBPInstructionLocation(),lineNumber);  }}  }
class C{  public Tanh(){  super("tanh",1);}  }
class C{  public static String buildName(int contextId){  return contextId + ": " + PANEL_NAME;}  }
class C{  public boolean isOrg(){  return ORG.equals(value);}  }
class C{  @Path("resolve") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) public CLIOutputResponseList resolve(final ResolveRequest request) throws ApiException, IOException {  request.setProjectPath(getAbsoluteProjectPath(request.getProjectPath()));  return subversionApi.resolve(request);}  }
class C{  public Searcher() throws IOException {  searcher=new IndexSearcher(DirectoryReader.open(FSDirectory.open(Paths.get(INDEX_DIR))));  parser=new QueryParser(CONTENT_FIELD,new StandardAnalyzer());}  }
class C{  public static NumericEntityEscaper outsideOf(final int codepointLow,final int codepointHigh){  return new NumericEntityEscaper(codepointLow,codepointHigh,false);}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public static <K,V>Map<K,V> asMap(K k,V v){  Map<K,V> map=new GridLeanMap<>(1);  map.put(k,v);  return map;}  }
class C{  @Override public void addSlice(CarbonDimensionLevel dimensionLevel,CarbonDimensionLevelFilter filter){  axises[SLICE].add(dimensionLevel,null,null,filter);}  }
class C{  private Cache createCache(Properties props) throws Exception {  DistributedSystem ds=getSystem(props);  Cache cache=null;  cache=CacheFactory.create(ds);  if (cache == null) {    throw new Exception("CacheFactory.create() returned null ");  }  return cache;}  }
class C{  public void addColumns(int colsToAdd){  addColumns(colsToAdd,getDefaultValue());}  }
class C{  private int[] minKadane(int[] A){  int beginTemp=0;  int begin=0;  int end=0;  int minSoFar=A[0];  int minEndingHere=A[0];  for (int i=1; i < A.length; i++) {    if (minEndingHere > 0) {      minEndingHere=A[i];      beginTemp=i;    } else     minEndingHere+=A[i];    if (minEndingHere <= minSoFar) {      minSoFar=minEndingHere;      begin=beginTemp;      end=i;    }  }  return new int[]{begin,end};}  }
class C{  public void removeBookmark(final CCodeBookmark bookmark){  Preconditions.checkNotNull(bookmark,"IE00331: Bookmark argument can not be null");  Preconditions.checkArgument(m_bookmarks.remove(bookmark),"IE00332: Bookmark is not managed by this manager");  for (  final ICodeBookmarkManagerListener listener : m_listeners) {    try {      listener.removedBookmark(this,bookmark);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  public void testChunkCleanup() throws IOException {  Directory dir=newDirectory();  IndexWriterConfig iwConf=newIndexWriterConfig(new MockAnalyzer(random()));  iwConf.setMergePolicy(NoMergePolicy.INSTANCE);  iwConf.setCodec(CompressingCodec.randomInstance(random(),4 * 1024,100,false,8));  IndexWriter iw=new IndexWriter(dir,iwConf);  DirectoryReader ir=DirectoryReader.open(iw);  for (int i=0; i < 5; i++) {    Document doc=new Document();    doc.add(new StoredField("text","not very long at all"));    iw.addDocument(doc);    DirectoryReader ir2=DirectoryReader.openIfChanged(ir);    assertNotNull(ir2);    ir.close();    ir=ir2;    for (    LeafReaderContext leaf : ir2.leaves()) {      CodecReader sr=(CodecReader)leaf.reader();      CompressingStoredFieldsReader reader=(CompressingStoredFieldsReader)sr.getFieldsReader();      assertEquals(1,reader.getNumChunks());      assertEquals(1,reader.getNumDirtyChunks());    }  }  iw.getConfig().setMergePolicy(newLogMergePolicy());  iw.forceMerge(1);  DirectoryReader ir2=DirectoryReader.openIfChanged(ir);  assertNotNull(ir2);  ir.close();  ir=ir2;  CodecReader sr=(CodecReader)getOnlyLeafReader(ir);  CompressingStoredFieldsReader reader=(CompressingStoredFieldsReader)sr.getFieldsReader();  assertTrue(reader.getNumDirtyChunks() <= 1);  ir.close();  iw.close();  dir.close();}  }
class C{  public int numRows(){  return size();}  }
class C{  public ListContainersParams withAll(boolean all){  this.all=all;  return this;}  }
class C{  public BBR(int maxIterations,Prior prior){  setMaxIterations(maxIterations);  setRegularization(0.01);  setAutoSetRegularization(true);  setPrior(prior);}  }
class C{  public boolean hasDocid(){  return fieldSetFlags()[0];}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.949 -0500",hash_original_method="7F3B7E4878F7B7AD878E6CDC69994E94",hash_generated_method="D333A4E720FF728B2B39EB9E531568C9") public DotTerminatedMessageWriter(Writer output){  super(output);  __output=output;  __state=__NOTHING_SPECIAL_STATE;}  }
class C{  private void updateScrollbarsFreeStanding(){  if (scrollpane == null) {    return;  }  Object value=Boolean.FALSE;  scrollpane.getHorizontalScrollBar().putClientProperty(MetalScrollBarUI.FREE_STANDING_PROP,value);  scrollpane.getVerticalScrollBar().putClientProperty(MetalScrollBarUI.FREE_STANDING_PROP,value);}  }
class C{  @SuppressWarnings("unchecked") public void coupleOneToOne(final List<PotentialProducer> producerKeys,final List<PotentialConsumer> consumerKeys) throws UmatchedAttributesException {  Iterator<PotentialConsumer> consumerIterator=consumerKeys.iterator();  for (  PotentialProducer producerID : producerKeys) {    if (consumerIterator.hasNext()) {      Producer<?> producer=producerID.createProducer();      Consumer<?> consumer=consumerIterator.next().createConsumer();      Coupling<?> coupling=new Coupling(producer,consumer);      try {        getCouplingManager().addCoupling(coupling);      } catch (      UmatchedAttributesException e) {        throw e;      }    }  }}  }
class C{  public EnumLiteralPropertyAttributeType createEnumLiteralPropertyAttributeTypeFromString(EDataType eDataType,String initialValue){  EnumLiteralPropertyAttributeType result=EnumLiteralPropertyAttributeType.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  private void placeFirstPositions() throws IOException {  for (  PhrasePositions pp : phrasePositions) {    pp.firstPosition();  }}  }
class C{  private static boolean isTablet(){  if (IS_N7 || IS_MIPAD) {    return true;  }  DisplayMetrics dm=Resources.getSystem().getDisplayMetrics();  return ((int)(Math.min(dm.widthPixels,dm.heightPixels) / dm.density + 0.5f)) >= 600;}  }
class C{  public static <U>UnsafeLongFieldUpdater<U> newLongFieldUpdater(Class<? super U> tClass,String fieldName){  try {    return new UnsafeLongFieldUpdater<>(JUnsafe.getUnsafe(),tClass,fieldName);  } catch (  Throwable t) {    JUnsafe.throwException(t);  }  return null;}  }
class C{  static int clamp(int i,int min,int max){  return Math.max(min,Math.min(i,max));}  }
class C{  public static Collection<? extends CRL> loadCRLs(String src) throws Exception {  InputStream in=null;  URI uri=null;  if (src == null) {    in=System.in;  } else {    try {      uri=new URI(src);      if (uri.getScheme().equals("ldap")) {      } else {        in=uri.toURL().openStream();      }    } catch (    Exception e) {      try {        in=new FileInputStream(src);      } catch (      Exception e2) {        if (uri == null || uri.getScheme() == null) {          throw e2;        } else {          throw e;        }      }    }  }  if (in != null) {    try {      ByteArrayOutputStream bout=new ByteArrayOutputStream();      byte[] b=new byte[4096];      while (true) {        int len=in.read(b);        if (len < 0)         break;        bout.write(b,0,len);      }      return CertificateFactory.getInstance("X509").generateCRLs(new ByteArrayInputStream(bout.toByteArray()));    }  finally {      if (in != System.in) {        in.close();      }    }  } else {    CertStoreHelper helper=CertStoreHelper.getInstance("LDAP");    String path=uri.getPath();    if (path.charAt(0) == '/')     path=path.substring(1);    CertStore s=helper.getCertStore(uri);    X509CRLSelector sel=helper.wrap(new X509CRLSelector(),null,path);    return s.getCRLs(sel);  }}  }
class C{  final public void putByte(final byte v){  putByte(pos,v);  limit=++pos;}  }
class C{  public ImageException(Reason reason,Throwable e){  super(e);  bean.setReason(reason);  setMessageKey(getMessageKey() + "." + reason.name());}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case DatatypePackage.ENTITY__SUPER_TYPE:    if (resolve)     return getSuperType();  return basicGetSuperType();case DatatypePackage.ENTITY__PROPERTIES:return getProperties();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void mouseMoved(MouseEvent e){synchronized (mouseLock) {    mouseX=StdDraw.userX(e.getX());    mouseY=StdDraw.userY(e.getY());  }}  }
class C{  public void sameLocals(int offsetDelta,int tag,int data){  numOfEntries++;  if (offsetDelta < 64)   output.write(offsetDelta + 64); else {    output.write(247);    write16(offsetDelta);  }  writeTypeInfo(tag,data);}  }
class C{  private static String validateOrderItemShipGroupAssoc(Delegator delegator,LocalDispatcher dispatcher,GenericValue orderItem,BigDecimal totalQuantity,GenericValue lastOISGAssoc,GenericValue userLogin,Locale locale) throws GeneralException {  String result=null;  BigDecimal qty=(BigDecimal)orderItem.get("quantity");  if (UtilValidate.isEmpty(qty)) {    qty=BigDecimal.ZERO;  }  BigDecimal cancelQty=(BigDecimal)orderItem.get("cancelQuantity");  if (UtilValidate.isEmpty(cancelQty)) {    cancelQty=BigDecimal.ZERO;  }  BigDecimal orderItemQuantity=qty.subtract(cancelQty);  if (totalQuantity.compareTo(orderItemQuantity) < 0) {    BigDecimal adjustementQuantity=orderItemQuantity.subtract(totalQuantity);    BigDecimal lastOISGAssocQuantity=(BigDecimal)lastOISGAssoc.get("quantity");    if (UtilValidate.isEmpty(lastOISGAssocQuantity)) {      lastOISGAssocQuantity=BigDecimal.ZERO;    }    BigDecimal oisgaQty=lastOISGAssocQuantity.add(adjustementQuantity);    lastOISGAssoc.set("quantity",oisgaQty);    lastOISGAssoc.store();    GenericValue orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",lastOISGAssoc.get("orderId")).queryOne();    if (UtilValidate.isNotEmpty(orderHeader)) {      Map<String,Object> cancelOrderInventoryReservationMap=UtilMisc.toMap("userLogin",userLogin,"locale",locale);      cancelOrderInventoryReservationMap.put("orderId",lastOISGAssoc.get("orderId"));      cancelOrderInventoryReservationMap.put("orderItemSeqId",lastOISGAssoc.get("orderItemSeqId"));      cancelOrderInventoryReservationMap.put("shipGroupSeqId",lastOISGAssoc.get("shipGroupSeqId"));      Map<String,Object> cancelResp=dispatcher.runSync("cancelOrderInventoryReservation",cancelOrderInventoryReservationMap);      if (ServiceUtil.isError(cancelResp)) {        throw new GeneralException(ServiceUtil.getErrorMessage(cancelResp));      }      String productStoreId=orderHeader.getString("productStoreId");      String orderTypeId=orderHeader.getString("orderTypeId");      List<String> resErrorMessages=new LinkedList<String>();      if (Debug.infoOn())       Debug.logInfo("Calling reserve inventory...",module);      reserveInventory(delegator,dispatcher,userLogin,locale,UtilMisc.toList(lastOISGAssoc),null,UtilMisc.<String,GenericValue>toMap(lastOISGAssoc.getString("orderItemSeqId"),orderItem),orderTypeId,productStoreId,resErrorMessages);    }    Map<String,Object> messageParameters=new HashMap<String,Object>();    messageParameters.put("shipByDate",lastOISGAssoc.getRelatedOne("OrderItemShipGroup",false).getString("shipByDate"));    messageParameters.put("adjustementQuantity",adjustementQuantity);    return "Order OISG Assoc Quantity Auto Completed";  }  return result;}  }
class C{  protected void processCell(){  final ObjectMap<String,String> attributes=getNamedAttributes();  if (GdxMaps.isEmpty(attributes)) {    processCellWithNoAttributes(getTable());    return;  }  final LmlActorBuilder builder=new LmlActorBuilder();  final ObjectSet<String> processedAttributes=GdxSets.newSet();  processBuildingAttributeToDetermineTable(attributes,processedAttributes,builder);  final Table targetTable=getTarget(builder).extract(getTable());  final Cell<?> cell=extractCell(targetTable);  processCellAttributes(attributes,processedAttributes,targetTable,cell);}  }
class C{  @Override public Pair<OperandSize,String> generate(final ITranslationEnvironment environment,final long offset,final List<ReilInstruction> instructions) throws InternalTranslationException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  Preconditions.checkArgument(offset >= 0,"Error: Argument offset can't be less than 0");  final String negatedZero=environment.getNextVariableString();  instructions.add(ReilHelpers.createBisz(offset,OperandSize.BYTE,Helpers.ZERO_FLAG,OperandSize.BYTE,negatedZero));  return new Pair<OperandSize,String>(OperandSize.BYTE,negatedZero);}  }
class C{  private void singleMoveInternal(String url,String newDirPath,OnMoveDownloadFileListener onMoveDownloadFileListener){  MoveDownloadFileTask moveDownloadFileTask=new MoveDownloadFileTask(url,newDirPath,mDownloadFileMover);  moveDownloadFileTask.setOnMoveDownloadFileListener(onMoveDownloadFileListener);  addAndRunTask(moveDownloadFileTask);}  }
class C{  @Override protected void onDestroy(){  ObdProt.resetFixedPid();  adapter.clear();  wakeLock.release();  super.onDestroy();}  }
class C{  private void executeDrill(MQuery query){  int AD_Table_ID=AReport.getAD_Table_ID(query.getTableName());  if (!MRole.getDefault().isCanReport(AD_Table_ID)) {    ADialog.error(m_WindowNo,this,"AccessCannotReport",query.getTableName());    return;  }  if (AD_Table_ID != 0)   new AReport(AD_Table_ID,null,query); else   log.warning("No Table found for " + query.getWhereClause(true));}  }
class C{  private boolean waitForMessageWindow(MessageType type,short nodeId,long maxWait) throws InterruptedException {  if (!windowedTypes.contains(type))   return true;  long start=System.nanoTime();  MessageWindow mw=getMW(nodeId);  if (!mw.disconnected && mw.pending.get() >= MAX_PENDING_MESSAGES) {    mw.lock.lock();    try {      while (!mw.disconnected && mw.pending.get() >= MAX_PENDING_MESSAGES) {        long now=System.nanoTime();        if (maxWait > 0 && (now - start) > maxWait * 1000)         return false;        mw.full.awaitNanos(now - start);      }    }  finally {      mw.lock.unlock();    }  }  mw=getMW(nodeId);  if (mw != null)   mw.pending.getAndIncrement();  return true;}  }
class C{  public synchronized void attachManagedResources(String routerPath,Router router){  if (CONFIG_BASE_PATH.equals(routerPath)) {    this.configRouter=router;  } else   if (SCHEMA_BASE_PATH.equals(routerPath)) {    this.schemaRouter=router;  } else {    throw new SolrException(ErrorCode.SERVER_ERROR,routerPath + " not supported by the RestManager");  }  int numAttached=0;  for (  String resourceId : managed.keySet()) {    if (resourceId.startsWith(routerPath)) {      String path=resourceId.substring(routerPath.length());      attachManagedResource(managed.get(resourceId),path,router);      ++numAttached;    }  }  log.info("Attached {} ManagedResource endpoints to Restlet router: {}",numAttached,routerPath);}  }
class C{  public void println(String s){}  }
class C{  private void clearResultLocked(){  mInteractionId=-1;  mFindAccessibilityNodeInfoResult=null;  mFindAccessibilityNodeInfosResult=null;  mPerformAccessibilityActionResult=false;}  }
class C{  protected final int find(char target,int from,int end){  while (from < end) {    if (input[from] == target) {      break;    }    from++;  }  return (from == end) ? -1 : from;}  }
class C{  private static void d_uaColSumEqNe(MatrixBlock in,MatrixBlock out,double[] bv,BinaryOperator bOp) throws DMLRuntimeException {  int agg0=sumEqNe(0.0,bv,bOp);  int m=in.clen;  for (int i=0; i < m; i++) {    double ai=in.quickGetValue(0,i);    int cnt=(ai == 0) ? agg0 : sumEqNe(ai,bv,bOp);    out.quickSetValue(0,i,cnt);  }}  }
class C{  protected Node newNode(){  return new SVGOMPolylineElement();}  }
class C{  public static TestDataLookupStrategy guessTestDataLookupStrategy(){  TestDataLookupStrategy result=guessTestDataLookupStrategyOnClassLocation();  if (result == null) {    result=guessTestDataLookupStrategyOnDirectoryAvailability();  }  return result;}  }
class C{  private static int encodeWeight(long value){  if (value < Integer.MIN_VALUE || value > Integer.MAX_VALUE) {    throw new UnsupportedOperationException("cannot encode value: " + value);  }  return (int)value;}  }
class C{  @NotNull public static List<PsiElement> resolveModule(@Nullable QualifiedName qualifiedName,@Nullable PsiFile sourceFile,boolean importIsAbsolute,int relativeLevel){  if (qualifiedName == null || sourceFile == null) {    return Collections.emptyList();  }  final String marker=qualifiedName + "#" + Integer.toString(relativeLevel);  final Set<String> beingImported=ourBeingImported.get();  if (beingImported.contains(marker)) {    return Collections.emptyList();  }  try {    beingImported.add(marker);    final QualifiedNameResolver visitor=new QualifiedNameResolverImpl(qualifiedName).fromElement(sourceFile);    if (relativeLevel > 0) {      visitor.withRelative(relativeLevel).withoutRoots();    } else {      if (!importIsAbsolute) {        visitor.withRelative(0);      }    }    List<PsiElement> results=visitor.resultsAsList();    if (results.isEmpty() && relativeLevel == 0 && !importIsAbsolute) {      results=resolveRelativeImportAsAbsolute(sourceFile,qualifiedName);    }    return results;  }  finally {    beingImported.remove(marker);  }}  }
class C{  public Map<String,List<String>> toMultimap(boolean response){  Map<String,List<String>> result=new TreeMap<String,List<String>>(FIELD_NAME_COMPARATOR);  for (int i=0; i < namesAndValues.size(); i+=2) {    String fieldName=namesAndValues.get(i);    String value=namesAndValues.get(i + 1);    List<String> allValues=new ArrayList<String>();    List<String> otherValues=result.get(fieldName);    if (otherValues != null) {      allValues.addAll(otherValues);    }    allValues.add(value);    result.put(fieldName,Collections.unmodifiableList(allValues));  }  if (response && statusLine != null) {    result.put(null,Collections.unmodifiableList(Collections.singletonList(statusLine)));  } else   if (requestLine != null) {    result.put(null,Collections.unmodifiableList(Collections.singletonList(requestLine)));  }  return Collections.unmodifiableMap(result);}  }
class C{  @SuppressLint("NewApi") public void clearMemoryCache(){  if (mMemoryCache != null) {    mMemoryCache.evictAll();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:46.048 -0500",hash_original_method="1C9916E491D93B6DAF758D3D738C6EEB",hash_generated_method="15A1411ACDA23E1A918918FF0CDDBE57") @DSVerified @DSSafe(DSCat.SAFE_OTHERS) public boolean isStreaming(){  return false;}  }
class C{  public void loadNecessaryClasses(){  loadBasicClasses();  Iterator<String> it=Options.v().classes().iterator();  while (it.hasNext()) {    String name=(String)it.next();    loadNecessaryClass(name);  }  loadDynamicClasses();  for (Iterator<String> pathIt=Options.v().process_dir().iterator(); pathIt.hasNext(); ) {    final String path=(String)pathIt.next();    for (    String cl : SourceLocator.v().getClassesUnder(path)) {      loadClassAndSupport(cl).setApplicationClass();    }  }  prepareClasses();}  }
class C{  public final void write(byte[] bytes) throws IOException {  write(bytes,0,bytes.length);}  }
class C{  public PKMACValue(PBMParameter params,DERBitString value){  this(new AlgorithmIdentifier(CMPObjectIdentifiers.passwordBasedMac,params),value);}  }
class C{  @Override public void intercept(RequestFacade request){  if (!loggedIn) {    try {      FormUrlEncodedTypedOutput to=new FormUrlEncodedTypedOutput();      to.addField("username",username);      to.addField("password",password);      to.addField("client_id",clientId);      to.addField("client_secret",clientSecret);      to.addField("grant_type","password");      String base64Auth=BaseEncoding.base64().encode(new String(clientId + ":" + clientSecret).getBytes());      List<Header> headers=new ArrayList<Header>();      headers.add(new Header("Authorization","Basic " + base64Auth));      Request req=new Request("POST",tokenIssuingEndpoint,headers,to);      Response resp=client.execute(req);      if (resp.getStatus() < 200 || resp.getStatus() > 299) {        throw new SecuredRestException("Login failure: " + resp.getStatus() + " - "+ resp.getReason());      } else {        String body=IOUtils.toString(resp.getBody().in());        accessToken=new Gson().fromJson(body,JsonObject.class).get("access_token").getAsString();        request.addHeader("Authorization","Bearer " + accessToken);        loggedIn=true;      }    } catch (    Exception e) {      throw new SecuredRestException(e);    }  } else {    request.addHeader("Authorization","Bearer " + accessToken);  }}  }
class C{  @Override public FileLock lock(long position,long size,boolean shared) throws IOException {  throw new IOException("Method is unsupported.");}  }
class C{  public IntervalXYItemLabelGenerator(String formatString,DateFormat xFormat,DateFormat yFormat){  super(formatString,xFormat,yFormat);}  }
class C{  public boolean addAll(Collection c){  throw new UnsupportedOperationException();}  }
class C{  public static Request createChannelBindRequest(char channelNumber,TransportAddress peerAddress,byte[] tranID){  Request channelBindRequest=new Request();  try {    channelBindRequest.setMessageType(Message.CHANNELBIND_REQUEST);    ChannelNumberAttribute channelNumberAttribute=AttributeFactory.createChannelNumberAttribute(channelNumber);    channelBindRequest.putAttribute(channelNumberAttribute);    XorPeerAddressAttribute peerAddressAttribute=AttributeFactory.createXorPeerAddressAttribute(peerAddress,tranID);    channelBindRequest.putAttribute(peerAddressAttribute);  } catch (  IllegalArgumentException ex) {    logger.log(Level.FINE,"Failed to set message type.",ex);  }  return channelBindRequest;}  }
class C{  public KeyPair(final PrivateKey privateKey,final CryptoEngine engine){  this(privateKey,engine.createKeyGenerator().derivePublicKey(privateKey),engine);}  }
class C{  public void skipSpace(Reader in) throws IOException {  while ((c >= 0) && ((c == ' ') || (c == '\t') || (c == '\n')|| (c == '\r'))) {    c=in.read();  }}  }
class C{  public static boolean isInternetAvailable(Context ctx){  ConnectivityManager cm=(ConnectivityManager)ctx.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo networkInfo=cm.getActiveNetworkInfo();  if (networkInfo != null && networkInfo.isConnected()) {    return true;  }  return false;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  @Override public synchronized void put(String key,Entry entry){  pruneIfNeeded(entry.data.length);  File file=getFileForKey(key);  try {    BufferedOutputStream fos=new BufferedOutputStream(new FileOutputStream(file));    CacheHeader e=new CacheHeader(key,entry);    boolean success=e.writeHeader(fos);    if (!success) {      fos.close();      VolleyLog.d("Failed to write header for %s",file.getAbsolutePath());      throw new IOException();    }    fos.write(entry.data);    fos.close();    putEntry(key,e);    return;  } catch (  IOException e) {  }  boolean deleted=file.delete();  if (!deleted) {    VolleyLog.d("Could not clean up file %s",file.getAbsolutePath());  }}  }
class C{  private void step2(){  if (DEBUG) {    System.out.println(" ******* Beginning STEP 2 *******\n");  }  for (int i=DFSCounter; i > 1; i--) {    BasicBlock block=vertex[i];    LTDominatorInfo blockInfo=LTDominatorInfo.getInfo(block,ir);    if (DEBUG) {      System.out.println(" Processing: " + block + "\n");    }    Enumeration<BasicBlock> e=getPrevNodes(block);    while (e.hasMoreElements()) {      BasicBlock prev=e.nextElement();      if (DEBUG) {        System.out.println("    Inspecting prev: " + prev);      }      BasicBlock u=EVAL(prev);      if (getSemi(u) != 0 && getSemi(u) < getSemi(block)) {        blockInfo.setSemiDominator(getSemi(u));      }    }    LTDominatorInfo.getInfo(vertex[blockInfo.getSemiDominator()],ir).addToBucket(block);    LINK(blockInfo.getParent(),block);    java.util.Iterator<BasicBlock> bucketEnum=LTDominatorInfo.getInfo(getParent(block),ir).getBucketIterator();    while (bucketEnum.hasNext()) {      BasicBlock block2=bucketEnum.next();      BasicBlock u=EVAL(block2);      if (getSemi(u) < getSemi(block2)) {        LTDominatorInfo.getInfo(block2,ir).setDominator(u);      } else {        LTDominatorInfo.getInfo(block2,ir).setDominator(getParent(block));      }    }  }}  }
class C{  JarDigestDepend(JarDepend jarDepend,long digest){  _jarDepend=jarDepend;  _depend=jarDepend.getDepend();  _isDigestModified=_depend.getDigest() != digest;}  }
class C{  private int crossCheckGetColumnsAndResultSetMetaData(ResultSet rs,boolean partial) throws SQLException {  Statement s=conn.createStatement();  while (rs.next()) {    String schema=rs.getString("TABLE_SCHEM");    String table=rs.getString("TABLE_NAME");    ResultSet rst=s.executeQuery("SELECT * FROM " + schema + "."+ table);    ResultSetMetaData rsmdt=rst.getMetaData();    for (int col=1; col <= rsmdt.getColumnCount(); col++) {      if (!partial) {        if (col != 1)         assertTrue(rs.next());        assertEquals("ORDINAL_POSITION",col,rs.getInt("ORDINAL_POSITION"));      }      assertEquals("TABLE_CAT","",rs.getString("TABLE_CAT"));      assertEquals("TABLE_SCHEM",schema,rs.getString("TABLE_SCHEM"));      assertEquals("TABLE_NAME",table,rs.getString("TABLE_NAME"));      crossCheckGetColumnRowAndResultSetMetaData(rs,rsmdt);      if (partial)       break;    }    rst.close();  }  int count=rs.getRow();  rs.close();  s.close();  return count;}  }
class C{  public List<Annotation> findByProject(AppContext app,ProjectPK projectPk,String orderBy){  List<DataStoreQueryField> queryFields=new ArrayList<DataStoreQueryField>(1);  queryFields.add(new DataStoreQueryField("id.projectId",projectPk.getProjectId()));  return super.find(app,projectPk,queryFields,findByProjectCache,orderBy);}  }
class C{  public String sqlMetadata_functionBodies(String vendorName,String catalogName,String schemaName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlMetadata_functionBodies(catalogName,schemaName);}  }
class C{  @Override protected void finalizeIterations(){  super.finalizeIterations();  priorRankScoreMap.clear();}  }
class C{  public String toString(){  if (coordinates.length > 0) {    StringBuffer strBuf=new StringBuffer(17 * coordinates.length);    strBuf.append('(');    strBuf.append(coordinates[0]);    for (int i=1; i < coordinates.length; i++) {      strBuf.append(", ");      strBuf.append(coordinates[i]);    }    strBuf.append(')');    return strBuf.toString();  } else {    return "()";  }}  }
class C{  public void addObject(Object key,Object value,VersionTag versionTag){  addPart(key,value,OBJECT,versionTag);}  }
class C{  public static boolean nullEquals(String s1,String s2){  return (s1 == null ? s2 == null : s1.equals(s2));}  }
class C{  public void initializeComment(final List<IComment> comments){  m_node.initializeComment(comments);}  }
class C{  @Override public PLViewParameters clone(){  return new PLViewParameters(this);}  }
class C{  private void addBinding(final ASTNode node,final SimpleName name,final Type type){  final String nameOfType=getNameOfType(type);  int bindingId=addBinding(node,name,nameOfType);  variableRefBinding.put(bindingId,type);}  }
class C{  public void addAttribute(String attr,boolean required){  String level=required ? "required" : "optional";  Parameter levelParam=_parameters.getParameter(level);  Parameter newParam;  if (levelParam == null) {    newParam=new Parameter(level,multivalEncode(attr));  } else {    newParam=new Parameter(level,levelParam.getValue() + "," + multivalEncode(attr));    _parameters.removeParameters(level);  }  _parameters.set(newParam);  if (DEBUG)   _log.debug("Added new attribute to SReg request: " + attr + " required: "+ required);}  }
class C{  public int value(){  return (int)scalar.val[0];}  }
class C{  @Override public boolean pruneValues(double threshold){  Map<String,Map<Value,Integer>> frequencies=new HashMap<String,Map<Value,Integer>>();  for (  Assignment sample : samples) {    for (    String var : sample.getVariables()) {      Value val=sample.getValue(var);      if (!frequencies.containsKey(var)) {        frequencies.put(var,new HashMap<Value,Integer>());      }      Map<Value,Integer> valFreq=frequencies.get(var);      if (!valFreq.containsKey(val)) {        valFreq.put(val,1);      } else {        valFreq.put(val,valFreq.get(val) + 1);      }    }  }  boolean changed=false;  int minNumber=(int)(samples.size() * threshold);  for (int i=0; i < samples.size(); i++) {    Assignment sample=samples.get(i);    for (    String var : sample.getVariables()) {      if (frequencies.get(var).get(sample.getValue(var)) < minNumber) {        samples.remove(i);        changed=true;        continue;      }    }  }  discreteCache=null;  continuousCache=null;  return changed;}  }
class C{  LibraryFilesTableModel(){  super(LibraryFilesTableDataLine.class);}  }
class C{  public MergeInfrequentNominalValuesTest(String name){  super(name);}  }
class C{  public boolean isManual(){  Object oo=get_Value(COLUMNNAME_IsManual);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected SetOfIntegerSyntax(int[][] members){  this.members=parse(members);}  }
class C{  public InlineQueryResultContact.InlineQueryResultContactBuilder lastName(String lastName){  this.last_name=lastName;  return this;}  }
class C{  private VOUser unlockUser(VOUser voUser){  identityServiceClient.unlockUserAccount(voUser);  voUser=identityServiceClient.refreshUserValue(voUser);  System.out.println("After unlock user, user's status is \"" + voUser.getStatus().toString() + "\"");  return voUser;}  }
class C{  public static VMRequest fraction(float frac){  if (VM.HEAP_LAYOUT_64BIT) {    return common64Bit(false);  }  return new VMRequest(REQUEST_FRACTION,Address.zero(),Extent.zero(),frac,false);}  }
class C{  @SuppressWarnings("unchecked") public static <K extends Comparable<? super K>,V>ImmutableSortedMap<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3){  return ofEntries(entryOf(k1,v1),entryOf(k2,v2),entryOf(k3,v3));}  }
class C{  public static void assertMosaicDefinitionCreationNotification(final Notification notification,final MosaicDefinition expectedMosaicDefinition){  final MosaicDefinitionCreationNotification n=(MosaicDefinitionCreationNotification)notification;  Assert.assertThat(n.getType(),IsEqual.equalTo(NotificationType.MosaicDefinitionCreation));  Assert.assertThat(n.getMosaicDefinition().getCreator(),IsEqual.equalTo(expectedMosaicDefinition.getCreator()));  Assert.assertThat(n.getMosaicDefinition().getId(),IsEqual.equalTo(expectedMosaicDefinition.getId()));  Assert.assertThat(n.getMosaicDefinition().getDescriptor(),IsEqual.equalTo(expectedMosaicDefinition.getDescriptor()));  final MosaicProperties properties=n.getMosaicDefinition().getProperties();  final MosaicProperties expectedProperties=expectedMosaicDefinition.getProperties();  Assert.assertThat(properties.getDivisibility(),IsEqual.equalTo(expectedProperties.getDivisibility()));  Assert.assertThat(properties.getInitialSupply(),IsEqual.equalTo(expectedProperties.getInitialSupply()));  Assert.assertThat(properties.isSupplyMutable(),IsEqual.equalTo(expectedProperties.isSupplyMutable()));  Assert.assertThat(properties.isTransferable(),IsEqual.equalTo(expectedProperties.isTransferable()));}  }
class C{  public FuzzyCompletionQuery(Analyzer analyzer,Term term,BitsProducer filter,int maxEdits,boolean transpositions,int nonFuzzyPrefix,int minFuzzyLength,boolean unicodeAware,int maxDeterminizedStates){  super(analyzer,term,filter);  this.maxEdits=maxEdits;  this.transpositions=transpositions;  this.nonFuzzyPrefix=nonFuzzyPrefix;  this.minFuzzyLength=minFuzzyLength;  this.unicodeAware=unicodeAware;  this.maxDeterminizedStates=maxDeterminizedStates;}  }
class C{  public Boolean isAutoExpand(){  return autoExpand;}  }
class C{  @Override public boolean isFile(){  return getJar().isFile(getPath());}  }
class C{  public void add(final Callback callback){  callbacks.add(callback);}  }
class C{  public static int mapContainsValue(Map<?,?> m,Object o1){  if (o1 != null)   TestCluster.getInstance().addCastClassForContainer(o1.getClass());  return collectionContains(m.values(),o1);}  }
class C{  protected Object evaluateLeftGreaterRight(StructuredContent element,String lvalue,String rvalue){  return null;}  }
class C{  private void substitute() throws RuntimeException {  short tmp, temp;  temp=GF2Field.invElem(A[A.length - 1][A.length - 1]);  if (temp == 0) {    throw new RuntimeException("The equation system is not solvable");  }  x[A.length - 1]=GF2Field.multElem(A[A.length - 1][A.length],temp);  for (int i=A.length - 2; i >= 0; i--) {    tmp=A[i][A.length];    for (int j=A.length - 1; j > i; j--) {      temp=GF2Field.multElem(A[i][j],x[j]);      tmp=GF2Field.addElem(tmp,temp);    }    temp=GF2Field.invElem(A[i][i]);    if (temp == 0) {      throw new RuntimeException("Not solvable equation system");    }    x[i]=GF2Field.multElem(tmp,temp);  }}  }
class C{  public void addDependency(String pId){  fDependencies.add(pId);}  }
class C{  public static InputStream loadResource(String resource) throws MalformedURLException, IOException {  resource=resource.trim();  if (!isPath(resource))   return new ByteArrayInputStream(resource.getBytes("UTF-8"));  URL result=Thread.currentThread().getContextClassLoader().getResource(resource);  if (isNull(result)) {    ClassLoader classLoader=ResourceLoader.class.getClassLoader();    if (classLoader != null)     result=classLoader.getResource(resource);  }  if (isNull(result))   result=ClassLoader.getSystemResource(resource);  if (isNull(result) && resource.contains(":"))   result=new URL(resource);  if (isNull(result))   Error.xmlNotFound(resource);  return result.openStream();}  }
class C{  public InlineQueryResultContact.InlineQueryResultContactBuilder replyMarkup(InlineReplyMarkup replyMarkup){  this.reply_markup=replyMarkup;  return this;}  }
class C{  private void attachTo(final JComponent comp){  assert comp instanceof JTree || comp instanceof JList;  comp.removeMouseListener(this);  comp.removeMouseMotionListener(this);  comp.addMouseListener(this);  comp.addMouseMotionListener(this);  refcount++;}  }
class C{  boolean isUpdateListEmpty(){  for (  Displayable displayable : displayableList) {    if (displayable instanceof UpdateRow) {      return false;    }  }  return true;}  }
class C{  public RecurrenceExceptionEntry(){  super(KEY);}  }
class C{  public void removeIndex(int n){  if (n >= size) {    throw new IndexOutOfBoundsException("n >= size()");  }  System.arraycopy(values,n + 1,values,n,size - n - 1);  size--;}  }
class C{  @Override public SelectableChannel selectableChannel(){  return _channel;}  }
class C{  public void testSequenceOfInts() throws Exception {  final int NR_OF_INTS=100;  StringBuilder sb=new StringBuilder();  for (int i=0; i < NR_OF_INTS; ++i) {    sb.append(" ");    sb.append(i);  }  ObjectMapper mapper=new ObjectMapper();  JsonParser jp=mapper.getJsonFactory().createJsonParser(sb.toString());  for (int i=0; i < NR_OF_INTS; ++i) {    Integer result=mapper.readValue(jp,Integer.class);    assertEquals(Integer.valueOf(i),result);  }}  }
class C{  public EventStoreBuilder tcpKeepAliveDisabled(){  tcpSettingsBuilder.keepAlive(false);  return this;}  }
class C{  public void testExport_tcx(){  testExport(TrackFileFormat.TCX);}  }
class C{  public void execute(){  Object model=getDataModel();  if (model == null && getSourceGraph() != null) {    model=getSourceGraph();  }  if (model == null) {    throw new RuntimeException("Data source is unspecified. You may need to double click all your data boxes, \n" + "then click Save, and then right click on them and select Propagate Downstream. \n" + "The issue is that we use a seed to simulate from IM's, so your data is not saved to \n"+ "file when you save the session. It can, however, be recreated from the saved seed.");  }  Parameters params=getParams();  if (model instanceof Graph) {    GraphScore gesScore=new GraphScore((Graph)model);    fgs=new Fgs(gesScore);  } else   if (model instanceof DataSet) {    DataSet dataSet=(DataSet)model;    if (dataSet.isContinuous()) {      SemBicScore gesScore=new SemBicScore(new CovarianceMatrixOnTheFly((DataSet)model));      gesScore.setPenaltyDiscount(params.getDouble("penaltyDiscount",4));      fgs=new Fgs(gesScore);    } else     if (dataSet.isDiscrete()) {      double samplePrior=getParams().getDouble("samplePrior",1);      double structurePrior=getParams().getDouble("structurePrior",1);      BDeuScore score=new BDeuScore(dataSet);      score.setSamplePrior(samplePrior);      score.setStructurePrior(structurePrior);      fgs=new Fgs(score);    } else {      throw new IllegalStateException("Data set must either be continuous or discrete.");    }  } else   if (model instanceof ICovarianceMatrix) {    SemBicScore gesScore=new SemBicScore((ICovarianceMatrix)model);    gesScore.setPenaltyDiscount(params.getDouble("penaltyDiscount",4));    fgs=new Fgs(gesScore);  } else   if (model instanceof DataModelList) {    DataModelList list=(DataModelList)model;    for (    DataModel dataModel : list) {      if (!(dataModel instanceof DataSet || dataModel instanceof ICovarianceMatrix)) {        throw new IllegalArgumentException("Need a combination of all continuous data sets or " + "covariance matrices, or else all discrete data sets, or else a single graph.");      }    }    if (allContinuous(list)) {      double penalty=getParams().getDouble("penaltyDiscount",4);      if (params.getBoolean("firstNontriangular",false)) {        SemBicScoreImages fgsScore=new SemBicScoreImages(list);        fgsScore.setPenaltyDiscount(penalty);        fgs=new Fgs(fgsScore);      } else {        SemBicScoreImages fgsScore=new SemBicScoreImages(list);        fgsScore.setPenaltyDiscount(penalty);        fgs=new Fgs(fgsScore);      }    } else     if (allDiscrete(list)) {      double structurePrior=getParams().getDouble("structurePrior",1);      double samplePrior=getParams().getDouble("samplePrior",1);      BdeuScoreImages fgsScore=new BdeuScoreImages(list);      fgsScore.setSamplePrior(samplePrior);      fgsScore.setStructurePrior(structurePrior);      if (params.getBoolean("firstNontriangular",false)) {        fgs=new Fgs(fgsScore);      } else {        fgs=new Fgs(fgsScore);      }    } else {      throw new IllegalArgumentException("Data must be either all discrete or all continuous.");    }  } else {    System.out.println("No viable input.");  }  fgs.setKnowledge((IKnowledge)getParams().get("knowledge",new Knowledge2()));  fgs.setNumPatternsToStore(params.getInt("numPatternsToSave",1));  fgs.setFaithfulnessAssumed(params.getBoolean("faithfulnessAssumed",true));  fgs.setVerbose(true);  Graph graph=fgs.search();  if (getSourceGraph() != null) {    GraphUtils.arrangeBySourceGraph(graph,getSourceGraph());  } else   if (((IKnowledge)getParams().get("knowledge",new Knowledge2())).isDefaultToKnowledgeLayout()) {    SearchGraphUtils.arrangeByKnowledgeTiers(graph,(IKnowledge)getParams().get("knowledge",new Knowledge2()));  } else {    GraphUtils.circleLayout(graph,200,200,150);  }  setResultGraph(graph);  this.topGraphs=new ArrayList<>(fgs.getTopGraphs());  if (topGraphs.isEmpty()) {    topGraphs.add(new ScoredGraph(getResultGraph(),Double.NaN));  }  this.topGraphs=new ArrayList<>(fgs.getTopGraphs());  if (this.topGraphs.isEmpty()) {    this.topGraphs.add(new ScoredGraph(getResultGraph(),Double.NaN));  }  setIndex(topGraphs.size() - 1);}  }
class C{  public boolean hasNumber(){  return getNumber() != null;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  private void adjustTop(RectF rect,float top,RectF bounds,float snapMargin,float aspectRatio,boolean leftMoves,boolean rightMoves){  float newTop=top;  if (newTop < 0) {    newTop/=1.05f;    mTouchOffset.y-=newTop / 1.1f;  }  if (newTop < bounds.top) {    mTouchOffset.y-=(newTop - bounds.top) / 2f;  }  if (newTop - bounds.top < snapMargin) {    newTop=bounds.top;  }  if (rect.bottom - newTop < mMinCropHeight) {    newTop=rect.bottom - mMinCropHeight;  }  if (rect.bottom - newTop > mMaxCropHeight) {    newTop=rect.bottom - mMaxCropHeight;  }  if (newTop - bounds.top < snapMargin) {    newTop=bounds.top;  }  if (aspectRatio > 0) {    float newWidth=(rect.bottom - newTop) * aspectRatio;    if (newWidth < mMinCropWidth) {      newTop=Math.max(bounds.top,rect.bottom - (mMinCropWidth / aspectRatio));      newWidth=(rect.bottom - newTop) * aspectRatio;    }    if (newWidth > mMaxCropWidth) {      newTop=Math.max(bounds.top,rect.bottom - (mMaxCropWidth / aspectRatio));      newWidth=(rect.bottom - newTop) * aspectRatio;    }    if (leftMoves && rightMoves) {      newTop=Math.max(newTop,Math.max(bounds.top,rect.bottom - bounds.width() / aspectRatio));    } else {      if (leftMoves && rect.right - newWidth < bounds.left) {        newTop=Math.max(bounds.top,rect.bottom - (rect.right - bounds.left) / aspectRatio);        newWidth=(rect.bottom - newTop) * aspectRatio;      }      if (rightMoves && rect.left + newWidth > bounds.right) {        newTop=Math.max(newTop,Math.max(bounds.top,rect.bottom - (bounds.right - rect.left) / aspectRatio));      }    }  }  rect.top=newTop;}  }
class C{  @Override void encode(final byte[] in,int inPos,final int inAvail,final Context context){  if (context.eof) {    return;  }  if (inAvail < 0) {    context.eof=true;    if (0 == context.modulus && lineLength == 0) {      return;    }    final byte[] buffer=ensureBufferSize(encodeSize,context);    final int savedPos=context.pos;switch (context.modulus) {case 0:      break;case 1:    buffer[context.pos++]=encodeTable[(context.ibitWorkArea >> 2) & MASK_6BITS];  buffer[context.pos++]=encodeTable[(context.ibitWorkArea << 4) & MASK_6BITS];if (encodeTable == STANDARD_ENCODE_TABLE) {  buffer[context.pos++]=pad;  buffer[context.pos++]=pad;}break;case 2:buffer[context.pos++]=encodeTable[(context.ibitWorkArea >> 10) & MASK_6BITS];buffer[context.pos++]=encodeTable[(context.ibitWorkArea >> 4) & MASK_6BITS];buffer[context.pos++]=encodeTable[(context.ibitWorkArea << 2) & MASK_6BITS];if (encodeTable == STANDARD_ENCODE_TABLE) {buffer[context.pos++]=pad;}break;default :throw new IllegalStateException("Impossible modulus " + context.modulus);}context.currentLinePos+=context.pos - savedPos;if (lineLength > 0 && context.currentLinePos > 0) {System.arraycopy(lineSeparator,0,buffer,context.pos,lineSeparator.length);context.pos+=lineSeparator.length;}} else {for (int i=0; i < inAvail; i++) {final byte[] buffer=ensureBufferSize(encodeSize,context);context.modulus=(context.modulus + 1) % BYTES_PER_UNENCODED_BLOCK;int b=in[inPos++];if (b < 0) {b+=256;}context.ibitWorkArea=(context.ibitWorkArea << 8) + b;if (0 == context.modulus) {buffer[context.pos++]=encodeTable[(context.ibitWorkArea >> 18) & MASK_6BITS];buffer[context.pos++]=encodeTable[(context.ibitWorkArea >> 12) & MASK_6BITS];buffer[context.pos++]=encodeTable[(context.ibitWorkArea >> 6) & MASK_6BITS];buffer[context.pos++]=encodeTable[context.ibitWorkArea & MASK_6BITS];context.currentLinePos+=BYTES_PER_ENCODED_BLOCK;if (lineLength > 0 && lineLength <= context.currentLinePos) {System.arraycopy(lineSeparator,0,buffer,context.pos,lineSeparator.length);context.pos+=lineSeparator.length;context.currentLinePos=0;}}}}}  }
class C{  public Builder(RenderScript rs){  mRS=rs;}  }
class C{  LinkedEntry(){  super(null,null,0,null);  nxt=prv=this;}  }
class C{  static final ThreadGroup createThreadGroup(String name){  if (name == null)   throw new NullPointerException();  try {    String groupFieldName=IS_PRE8_IBM ? "threadGroup" : "group";    long tg=U.objectFieldOffset(Thread.class.getDeclaredField(groupFieldName));    long gp=U.objectFieldOffset(ThreadGroup.class.getDeclaredField("parent"));    ThreadGroup group=(ThreadGroup)U.getObject(Thread.currentThread(),tg);    while (group != null) {      ThreadGroup parent=(ThreadGroup)U.getObject(group,gp);      if (parent == null)       return new ThreadGroup(group,name);      group=parent;    }  } catch (  Exception e) {    throw new Error(e);  }  throw new Error("Cannot create ThreadGroup");}  }
class C{  public CertException(int code,String moredata){  verfCode=code;  moreData=moredata;}  }
class C{  protected void processChange(Database currentModel,Database desiredModel,IModelChange change,StringBuilder ddl){  log.warn("Change of type " + change.getClass() + " was not handled");}  }
class C{  public static int hash(int hash,char item){  return hash * prime + item;}  }
class C{  public static void cleanupParagraphs(RTEditText editor,Effect... exclude){  cleanupParagraphs(editor,Effects.ALIGNMENT,exclude);  cleanupParagraphs(editor,Effects.INDENTATION,exclude);  cleanupParagraphs(editor,Effects.BULLET,exclude);  cleanupParagraphs(editor,Effects.NUMBER,exclude);}  }
class C{  public void dispose(){  typeToFenToEco.clear();}  }
class C{  public void stopImmediatePropagation(){  this.stopImmediatePropagation=true;}  }
class C{  protected boolean ignoreFailure(Throwable err){  return false;}  }
class C{  public void print(String s) throws IOException {  if (_startLine)   printIndent();  if (s == null) {    _lastCr=false;    _os.print("null");    return;  }  int len=s.length();  for (int i=0; i < len; i++) {    int ch=s.charAt(i);    if (ch == '\n' && !_lastCr)     _destLine++; else     if (ch == '\r')     _destLine++;    _lastCr=ch == '\r';    _os.print((char)ch);  }}  }
class C{  public void updateCurrentLocation(float animationSpeed,float updateRadius){  float distanceX=Math.abs(locationOnScreenX - currentLocationX);  float distanceY=Math.abs(locationOnScreenY - currentLocationY);  if (distanceX > updateRadius) {    if (currentLocationX < locationOnScreenX) {      currentLocationX+=(animationSpeed * distanceX);    } else     if (currentLocationX > locationOnScreenX) {      currentLocationX-=(animationSpeed * distanceX);    }  }  if (distanceY > updateRadius) {    if (currentLocationY < locationOnScreenY) {      currentLocationY+=(animationSpeed * distanceY);    } else     if (currentLocationY > locationOnScreenY) {      currentLocationY-=(animationSpeed * distanceY);    }  }  if (updateValueIsOld()) {    freshLocationValue=false;  } else {    freshLocationValue=true;  }}  }
class C{  public boolean isDeclaration(){  return declaration;}  }
class C{  public PivotDataset(){  this.data=new ArrayList<IndicatorSeries>();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:30.730 -0500",hash_original_method="715C325B720DBA72DF5B4684F1B692D5",hash_generated_method="4053ED92DB11E8B700AA5900D7934C14") protected void handlePollStateResult(int what,AsyncResult ar){  int ints[];  String states[];  if (ar.userObj != pollingContext)   return;  if (ar.exception != null) {    CommandException.Error err=null;    if (ar.exception instanceof CommandException) {      err=((CommandException)(ar.exception)).getCommandError();    }    if (err == CommandException.Error.RADIO_NOT_AVAILABLE) {      cancelPollState();      return;    }    if (!cm.getRadioState().isOn()) {      cancelPollState();      return;    }    if (err != CommandException.Error.OP_NOT_ALLOWED_BEFORE_REG_NW) {      loge("RIL implementation has returned an error where it must succeed" + ar.exception);    }  } else   try {switch (what) {case EVENT_POLL_STATE_REGISTRATION:      states=(String[])ar.result;    int lac=-1;  int cid=-1;int regState=-1;int reasonRegStateDenied=-1;int psc=-1;if (states.length > 0) {try {regState=Integer.parseInt(states[0]);if (states.length >= 3) {if (states[1] != null && states[1].length() > 0) {  lac=Integer.parseInt(states[1],16);}if (states[2] != null && states[2].length() > 0) {  cid=Integer.parseInt(states[2],16);}}if (states.length > 14) {if (states[14] != null && states[14].length() > 0) {  psc=Integer.parseInt(states[14],16);}}} catch (NumberFormatException ex) {loge("error parsing RegistrationState: " + ex);}}mGsmRoaming=regCodeIsRoaming(regState);newSS.setState(regCodeToServiceState(regState));if (regState == 10 || regState == 12 || regState == 13 || regState == 14) {mEmergencyOnly=true;} else {mEmergencyOnly=false;}newCellLoc.setLacAndCid(lac,cid);newCellLoc.setPsc(psc);break;case EVENT_POLL_STATE_GPRS:states=(String[])ar.result;int type=0;regState=-1;mNewReasonDataDenied=-1;mNewMaxDataCalls=1;if (states.length > 0) {try {regState=Integer.parseInt(states[0]);if (states.length >= 4 && states[3] != null) {type=Integer.parseInt(states[3]);}if ((states.length >= 5) && (regState == 3)) {mNewReasonDataDenied=Integer.parseInt(states[4]);}if (states.length >= 6) {mNewMaxDataCalls=Integer.parseInt(states[5]);}} catch (NumberFormatException ex) {loge("error parsing GprsRegistrationState: " + ex);}}newGPRSState=regCodeToServiceState(regState);mDataRoaming=regCodeIsRoaming(regState);mNewRadioTechnology=type;newSS.setRadioTechnology(type);break;case EVENT_POLL_STATE_OPERATOR:String opNames[]=(String[])ar.result;if (opNames != null && opNames.length >= 3) {newSS.setOperatorName(opNames[0],opNames[1],opNames[2]);}break;case EVENT_POLL_STATE_NETWORK_SELECTION_MODE:ints=(int[])ar.result;newSS.setIsManualSelection(ints[0] == 1);break;}} catch (RuntimeException ex) {loge("Exception while polling service state. Probably malformed RIL response." + ex);}pollingContext[0]--;if (pollingContext[0] == 0) {boolean roaming=(mGsmRoaming || mDataRoaming);if (mGsmRoaming && !isRoamingBetweenOperators(mGsmRoaming,newSS)) {roaming=false;}newSS.setRoaming(roaming);newSS.setEmergencyOnly(mEmergencyOnly);pollStateDone();}}  }
class C{  public XmlHandler addAnnotatedClass(Class<?>... classes){  try {    addClasses(false,classes);  } catch (  Exception e) {    JmapperLog.ERROR(e);  }  return this;}  }
class C{  public static void testImportFamily() throws Exception {  DatabaseMemory.TEST=true;  DatabaseMemory.RECREATE_DATABASE=true;  Bot bot=Bot.createInstance();  Sense sense=bot.awareness().getSense(Http.class.getName());  sense.input(new URL("http://www.freebase.com/view/people/appointed_role"));  bot.shutdown();}  }
class C{  public int size(){  return sentences.size();}  }
class C{  public ParseException(String message,Exception e){  super(message);  this.exception=e;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:50.937 -0500",hash_original_method="D142CB8A8401CEBF28BCC073ADA26748",hash_generated_method="373B09AAC78224AA682522BE6B8FA27F") private static void decodeIs91Cli(BearerData bData) throws CodingException {  BitwiseInputStream inStream=new BitwiseInputStream(bData.userData.payload);  int dataLen=inStream.available() / 4;  int numFields=bData.userData.numFields;  if ((dataLen > 14) || (dataLen < 3) || (dataLen < numFields)) {    throw new CodingException("IS-91 voicemail status decoding failed");  }  CdmaSmsAddress addr=new CdmaSmsAddress();  addr.digitMode=CdmaSmsAddress.DIGIT_MODE_4BIT_DTMF;  addr.origBytes=bData.userData.payload;  addr.numberOfDigits=(byte)numFields;  decodeSmsAddress(addr);  bData.callbackNumber=addr;}  }
class C{  protected void formExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  TipoDocumentoVitalForm frm=(TipoDocumentoVitalForm)form;  if (StringUtils.isNotBlank(frm.getId())) {    saveCurrentInvocation(KeysClientsInvocations.DOCUMENTOS_VITALES_EDITAR_TIPO_DOCUMENTO,request);    TipoDocumentoVitalVO tipo=(TipoDocumentoVitalVO)getFromTemporalSession(request,DocumentosVitalesConstants.TIPO_DOCUMENTO_VITAL_KEY);    frm.set(tipo);  } else {    saveCurrentInvocation(KeysClientsInvocations.DOCUMENTOS_VITALES_CREAR_TIPO_DOCUMENTO,request);  }  setReturnActionFordward(request,mapping.findForward("editar_tipo"));}  }
class C{  public int bytesLeft(){  return limit - position;}  }
class C{  public boolean isZero(){  return false;}  }
class C{  protected boolean hasResponseListeners(){  return actionListeners != null;}  }
class C{  public TIntByteHash(int initialCapacity,float loadFactor,int no_entry_key,byte no_entry_value){  super(initialCapacity,loadFactor);  this.no_entry_key=no_entry_key;  this.no_entry_value=no_entry_value;}  }
class C{  public static String toBase64String(final byte[] data){  return javax.xml.bind.DatatypeConverter.printBase64Binary(data);}  }
class C{  protected String nextType() throws IOException {  String type=null;  while (!done && type == null) {    type=readWord(reader);    if (type.length() < 1) {      type=null;      continue;    }  }  return type;}  }
class C{  public boolean hasTextChild(){  if (children != null) {    for (int iter=0; iter < children.size(); iter++) {      Object child=children.get(iter);      if (child instanceof Element && ((Element)child).isTextElement()) {        return true;      }    }  }  return false;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  Attr attribute;  Attr attribute2;  EntityReference entRef;  NodeList elementList;  Node newAttribute;  Node newChild;  doc=(Document)load("staffNS",true);  element=doc.createElementNS("http://www.w3.org/DOM/Test","elem1");  attribute=doc.createAttributeNS("http://www.w3.org/DOM/Test","attr");  entRef=doc.createEntityReference("ent4");  newChild=attribute.appendChild(entRef);  newAttribute=element.setAttributeNodeNS(attribute);  elementList=entRef.getChildNodes();  element=(Element)elementList.item(0);  attribute2=doc.createAttributeNS("http://www.w3.org/DOM/Test","attr2");{    boolean success=false;    try {      newAttribute=element.setAttributeNodeNS(attribute2);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("elementsetattributenodens06",success);  }}  }
class C{  public RunNetworkEditor(){  initComponents();  initVis();}  }
class C{  public CCVertex3D originalVertex(ccGridSize pos){  int index=(pos.x * (gridSize_.y + 1) + pos.y) * 3;  CCVertex3D vert=new CCVertex3D(originalVertices.get(index + 0),originalVertices.get(index + 1),originalVertices.get(index + 2));  return vert;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public ConcurrentSkipListMap(Comparator<? super K> comparator){  this.comparator=comparator;  initialize();}  }
class C{  private void verifyFrameMask(WebSocketFrame frame) throws WebSocketException {  if (frame.getMask()) {    throw new WebSocketException(WebSocketError.FRAME_MASKED,"A frame from the server is masked.");  }}  }
class C{  public void onConfigureActorSDK(){}  }
class C{  @Override public void removed(Container cont){  Component[] layers=getLayers();  if (layers != null && layers.length > 0) {    for (int i=0; i < layers.length; i++) {      ((Layer)layers[i]).remove(cont);    }  }}  }
class C{  public static void addLink(int srcId,int destId,double bw,double lat){  if (graph == null) {    graph=new TopologicalGraph();  }  if (map == null) {    map=new HashMap<Integer,Integer>();  }  if (!map.containsKey(srcId)) {    graph.addNode(new TopologicalNode(nextIdx));    map.put(srcId,nextIdx);    nextIdx++;  }  if (!map.containsKey(destId)) {    graph.addNode(new TopologicalNode(nextIdx));    map.put(destId,nextIdx);    nextIdx++;  }  graph.addLink(new TopologicalLink(map.get(srcId),map.get(destId),(float)lat,(float)bw));  generateMatrices();}  }
class C{  public static boolean isTable(final LuaValue target){  return target != null && target.type() == LuaValue.TTABLE;}  }
class C{  private static int indexOfLeastSignificantZeroBit(int value){  int index=1;  while ((value & 1) != 0) {    value>>=1;    index++;  }  return index;}  }
class C{  private void helper2(String fieldName,String newFieldName) throws Exception {  helper2(fieldName,newFieldName,false);}  }
class C{  public void stringLessThan() throws IOException {  writeCode(STRING_LESS);}  }
class C{  public final boolean isLoadFinished(){  return dataSourceStream.isLoadFinished();}  }
class C{  public TreeMap<Float,List<List<Integer>>> packFirstFitShuffled(){  RandomDataGenerator rnd=new RandomDataGenerator();  int[] permutation=rnd.nextPermutation(_items.size(),_items.size());  List<Integer> shuffledItems=new ArrayList<Integer>(_items.size());  List<Float> shuffledWeights=new ArrayList<Float>(_items.size());  for (  int ix : permutation) {    shuffledItems.add(_items.get(ix));    shuffledWeights.add(_itemWeights.get(ix));  }  return packFirstFit(shuffledItems,shuffledWeights);}  }
class C{  private void login() throws Exception {  m_client=new HttpClient();  m_client.getParams().setParameter("http.protocol.single-cookie-header",true);  m_client.getParams().setParameter("http.useragent","Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0)");  m_httpState=new HttpState();  m_hostConfiguration=new HostConfiguration();  HttpProxy.addProxy(m_hostConfiguration);  m_hostConfiguration.setHost("www.axisandallies.org");  final PostMethod post=new PostMethod("http://www.axisandallies.org/forums/index.php?action=login2");  try {    post.addRequestHeader("Accept","*/*");    post.addRequestHeader("Accept-Language","en-us");    post.addRequestHeader("Cache-Control","no-cache");    post.addRequestHeader("Content-Type","application/x-www-form-urlencoded");    final List<NameValuePair> parameters=new ArrayList<>();    parameters.add(new NameValuePair("user",getUsername()));    parameters.add(new NameValuePair("passwrd",getPassword()));    post.setRequestBody(parameters.toArray(new NameValuePair[parameters.size()]));    int status=m_client.executeMethod(m_hostConfiguration,post,m_httpState);    if (status == 200) {      final String body=post.getResponseBodyAsString();      if (body.toLowerCase().contains("password incorrect")) {        throw new Exception("Incorrect Password");      }      final Header refreshHeader=post.getResponseHeader("Refresh");      if (refreshHeader == null) {        throw new Exception("Missing refresh header after login");      }      final String value=refreshHeader.getValue();      final Pattern p=Pattern.compile("[^;]*;\\s*url=(.*)",Pattern.DOTALL | Pattern.CASE_INSENSITIVE);      final Matcher m=p.matcher(value);      if (m.matches()) {        final String url=m.group(1);        final GetMethod getRefreshPage=new GetMethod(url);        try {          status=m_client.executeMethod(m_hostConfiguration,getRefreshPage,m_httpState);          if (status != 200) {          }        }  finally {          getRefreshPage.releaseConnection();        }      } else {        throw new Exception("The refresh header didn't contain a URL");      }    } else {      throw new Exception("Failed to login to forum, server responded with status code: " + status);    }  }  finally {    post.releaseConnection();  }}  }
class C{  private static TwoDNode generate(int d,IPoint points[],int left,int right){  if (right < left) {    return null;  }  if (right == left) {    return construct(d,points[left]);  }  int m=1 + (right - left) / 2;  Selection.select(points,m,left,right,comparators[d]);  TwoDNode dm=construct(d,points[left + m - 1]);  if (++d > 2) {    d=1;  }  dm.setBelow(generate(d,points,left,left + m - 2));  dm.setAbove(generate(d,points,left + m,right));  return dm;}  }
class C{  public void testAddMathContextEqualScalePosPos(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=10;  String b="747233429293018787918347987234564568";  int bScale=10;  String c="1.2313E+41";  int cScale=-37;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  MathContext mc=new MathContext(5,RoundingMode.UP);  BigDecimal result=aNumber.add(bNumber,mc);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  public int appendAll(OptionalParameter[] optionalParameters){  int length=0;  for (  OptionalParameter optionalParamameter : optionalParameters) {    length+=append(optionalParamameter);  }  return length;}  }
class C{  void cleanupOperation(double newValue,double oldValue){}  }
class C{  public ImportExceptionBean(ApplicationExceptionBean sup,String details){  super(sup);  setDetails(details);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.168 -0400",hash_original_method="78CCE89AB46108398363BD2F84DA5476",hash_generated_method="96E365373CAC4D1005A4E752E8641E7B") public static void close(URLConnection conn){  if (conn instanceof HttpURLConnection) {    ((HttpURLConnection)conn).disconnect();  }}  }
class C{  public boolean equals(Object o){  if (o == null)   return false;  if (this == o)   return true;  if (!(o instanceof UnixPrincipal))   return false;  UnixPrincipal that=(UnixPrincipal)o;  if (this.getName().equals(that.getName()))   return true;  return false;}  }
class C{  public void exportMeasurements(MeasurementsExporter exporter) throws IOException {  for (  OneMeasurement measurement : data.values()) {    measurement.exportMeasurements(exporter);  }}  }
class C{  public final void sub(Matrix4f m1,Matrix4f m2){  this.m00=m1.m00 - m2.m00;  this.m01=m1.m01 - m2.m01;  this.m02=m1.m02 - m2.m02;  this.m03=m1.m03 - m2.m03;  this.m10=m1.m10 - m2.m10;  this.m11=m1.m11 - m2.m11;  this.m12=m1.m12 - m2.m12;  this.m13=m1.m13 - m2.m13;  this.m20=m1.m20 - m2.m20;  this.m21=m1.m21 - m2.m21;  this.m22=m1.m22 - m2.m22;  this.m23=m1.m23 - m2.m23;  this.m30=m1.m30 - m2.m30;  this.m31=m1.m31 - m2.m31;  this.m32=m1.m32 - m2.m32;  this.m33=m1.m33 - m2.m33;}  }
class C{  @ResponseBody @RequestMapping(value="/user/{login}",method=RequestMethod.DELETE) public JsonResponse removeUser(@PathVariable String login) throws ServiceException, CheckException {  User user=this.userService.findByLogin(login);  String contextLogin=this.authentificationUtils.getAuthentificatedUser().getLogin();  if (login.equalsIgnoreCase(contextLogin)) {    throw new CheckException("You can't delete your own account from this interface");  }  this.gitlabService.deleteUser(login);  this.jenkinsService.deleteUser(login);  this.userService.remove(user);  return new HttpOk();}  }
class C{  public Vector2i mul(int x,int y){  this.x*=x;  this.y*=y;  return this;}  }
class C{  public WebSocketFrame(byte[] rawFrame){  ByteBuffer buffer=ByteBuffer.wrap(rawFrame);  byte b=buffer.get();  setFinAndOpCode(b);  b=buffer.get();  boolean masked=((b & 0x80) != 0);  int payloadLength=(byte)(0x7F & b);  int byteCount=0;  if (payloadLength == 0X7F) {    byteCount=8;  } else   if (payloadLength == 0X7E) {    byteCount=2;  }  while (--byteCount > 0) {    b=buffer.get();    payloadLength|=(b & 0xFF) << (8 * byteCount);  }  byte maskingKey[]=null;  if (masked) {    maskingKey=new byte[4];    buffer.get(maskingKey,0,4);  }  this.payload=new byte[payloadLength];  buffer.get(this.payload,0,payloadLength);  if (masked) {    for (int i=0; i < this.payload.length; i++) {      this.payload[i]^=maskingKey[i % 4];    }  }  return;}  }
class C{  public void putInt16(int i){  ensureCapacity(2);  byte[] b=this.byteBuffer;  b[this.position++]=(byte)(i & 0xff);  b[this.position++]=(byte)(i >>> 8);}  }
class C{  static void generateReturnResult(ClassFileWriter cfw,Class<?> retType,boolean callConvertResult){  if (retType == Void.TYPE) {    cfw.add(ByteCode.POP);    cfw.add(ByteCode.RETURN);  } else   if (retType == Boolean.TYPE) {    cfw.addInvoke(ByteCode.INVOKESTATIC,"org/mozilla/javascript/Context","toBoolean","(Ljava/lang/Object;)Z");    cfw.add(ByteCode.IRETURN);  } else   if (retType == Character.TYPE) {    cfw.addInvoke(ByteCode.INVOKESTATIC,"org/mozilla/javascript/Context","toString","(Ljava/lang/Object;)Ljava/lang/String;");    cfw.add(ByteCode.ICONST_0);    cfw.addInvoke(ByteCode.INVOKEVIRTUAL,"java/lang/String","charAt","(I)C");    cfw.add(ByteCode.IRETURN);  } else   if (retType.isPrimitive()) {    cfw.addInvoke(ByteCode.INVOKESTATIC,"org/mozilla/javascript/Context","toNumber","(Ljava/lang/Object;)D");    String typeName=retType.getName();switch (typeName.charAt(0)) {case 'b':case 's':case 'i':      cfw.add(ByteCode.D2I);    cfw.add(ByteCode.IRETURN);  break;case 'l':cfw.add(ByteCode.D2L);cfw.add(ByteCode.LRETURN);break;case 'f':cfw.add(ByteCode.D2F);cfw.add(ByteCode.FRETURN);break;case 'd':cfw.add(ByteCode.DRETURN);break;default :throw new RuntimeException("Unexpected return type " + retType.toString());}} else {String retTypeStr=retType.getName();if (callConvertResult) {cfw.addLoadConstant(retTypeStr);cfw.addInvoke(ByteCode.INVOKESTATIC,"java/lang/Class","forName","(Ljava/lang/String;)Ljava/lang/Class;");cfw.addInvoke(ByteCode.INVOKESTATIC,"org/mozilla/javascript/JavaAdapter","convertResult","(Ljava/lang/Object;" + "Ljava/lang/Class;" + ")Ljava/lang/Object;");}cfw.add(ByteCode.CHECKCAST,retTypeStr);cfw.add(ByteCode.ARETURN);}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:41.824 -0500",hash_original_method="DD734A9458D0580E341A373C2DD4F619",hash_generated_method="E3BC02224FD0199D03EA01A994058EA0") public void close(){  deactivate();  if (!isClosed()) {    native_close(mFD);  }}  }
class C{  public ExportKeyPairCertificateChainAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("ExportKeyPairCertificateChainAction.statusbar"));  putValue(NAME,res.getString("ExportKeyPairCertificateChainAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("ExportKeyPairCertificateChainAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("ExportKeyPairCertificateChainAction.image")))));}  }
class C{  public long maxSize(){  return maxSize;}  }
class C{  public void testConstrStringWithoutExpWithoutPoint(){  String a="-732546982374982347892379283571094797287346782359284756";  int aScale=0;  BigInteger bA=new BigInteger("-732546982374982347892379283571094797287346782359284756");  BigDecimal aNumber=new BigDecimal(a);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  private boolean authenticate(String username,String password){  try {    if (captchaToken == null) {      service.setUserCredentials(username,password);    } else {      service.setUserCredentials(username,password,captchaToken,captchaAnswerField.getText());    }    return true;  } catch (  CaptchaRequiredException e) {    captchaToken=e.getCaptchaToken();    try {      captchaImage.setIcon(new ImageIcon(new URL(e.getCaptchaUrl())));      captchaAnswerField.setText("(Please write the above letters here)");    } catch (    IOException ioe) {      captchaImage.setText("(Error parsing captcha image URL)");    }    return false;  }catch (  AuthenticationException e) {    SpreadsheetApiDemo.showErrorBox(e);    return false;  }}  }
class C{  public boolean initWindow(int AD_Window_ID,MQuery query){  this.setName("AWindow_" + AD_Window_ID);  setAD_Window_ID(AD_Window_ID);  boolean loadedOK=m_APanel.initPanel(0,AD_Window_ID,query);  if (loadedOK) {    commonInit();  }  return loadedOK;}  }
class C{  public void clear(){  this.uncountables.clear();  this.plurals.clear();  this.singulars.clear();}  }
class C{  public AVFrame find_short(int frame_num,int[] idx){  int i;  for (i=0; i < this.short_ref_count; i++) {    AVFrame pic=this.short_ref[i];    if (pic.frame_num == frame_num) {      idx[0]=i;      return pic;    }  }  return null;}  }
class C{  public static byte[] decodeWebSafe(byte[] source) throws Base64DecoderException {  return decodeWebSafe(source,0,source.length);}  }
class C{  static int toJavaVersionInt(String version){  return toVersionInt(toJavaVersionIntArray(version,JAVA_VERSION_TRIM_SIZE));}  }
class C{  public void loadImage(String filename){  theImage.setIcon(new MyImageIcon(filename));}  }
class C{  private void fetchReferenceImages(final State current,final List<InactiveImageDescriptor> inactiveImages){  final ImmutableMap.Builder<String,String> termsBuilder=new ImmutableMap.Builder<>();  QueryTask.QuerySpecification spec=QueryTaskUtils.buildQuerySpec(ImageService.State.class,termsBuilder.build());  spec.options=EnumSet.of(QueryTask.QuerySpecification.QueryOption.EXPAND_CONTENT);  sendRequest(getCloudStoreHelper().createBroadcastPost(ServiceUriPaths.CORE_LOCAL_QUERY_TASKS,ServiceUriPaths.DEFAULT_NODE_SELECTOR).setBody(QueryTask.create(spec).setDirect(true)).setCompletion(null));}  }
class C{  public static void put3ByteInt(ByteBuffer buffer,int val,ByteOrder order){  int pos=buffer.position();  put3ByteInt(buffer,val,pos,order);  buffer.position(pos + 3);}  }
class C{  public static PropertyValuesHolder ofInt(String propertyName,int... values){  return new IntPropertyValuesHolder(propertyName,values);}  }
class C{  public String amt(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  String colName=mField.getColumnName();  if (value == null || isCalloutActive())   return "";  int C_AcctSchema_ID=Env.getContextAsInt(ctx,WindowNo,"C_AcctSchema_ID");  MAcctSchema as=MAcctSchema.get(ctx,C_AcctSchema_ID);  int Precision=as.getStdPrecision();  BigDecimal CurrencyRate=(BigDecimal)mTab.getValue("CurrencyRate");  if (CurrencyRate == null) {    CurrencyRate=Env.ONE;    mTab.setValue("CurrencyRate",CurrencyRate);  }  BigDecimal AmtSourceDr=(BigDecimal)mTab.getValue("AmtSourceDr");  if (AmtSourceDr == null)   AmtSourceDr=Env.ZERO;  BigDecimal AmtSourceCr=(BigDecimal)mTab.getValue("AmtSourceCr");  if (AmtSourceCr == null)   AmtSourceCr=Env.ZERO;  BigDecimal AmtAcctDr=AmtSourceDr.multiply(CurrencyRate);  AmtAcctDr=AmtAcctDr.setScale(Precision,BigDecimal.ROUND_HALF_UP);  mTab.setValue("AmtAcctDr",AmtAcctDr);  BigDecimal AmtAcctCr=AmtSourceCr.multiply(CurrencyRate);  AmtAcctCr=AmtAcctCr.setScale(Precision,BigDecimal.ROUND_HALF_UP);  mTab.setValue("AmtAcctCr",AmtAcctCr);  return "";}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  synchronized void establishConnection() throws IOException {  if (isConnected) {    throw new IOException("Pipe already connected");  }  if (isClosed) {    throw new IOException("Pipe is closed");  }  if (buffer == null) {    buffer=new char[PIPE_SIZE];  }  isConnected=true;}  }
class C{  public CGraphSelectionTableModel(final List<INaviView> views){  Preconditions.checkNotNull(views,"IE01393: Views argument can not be null");  m_views=new ArrayList<INaviView>(views);}  }
class C{  public static String formatBytes(byte[] buf,int startIndex,int length){  StringBuilder w=new StringBuilder(20000);  int count=0;  for (int i=startIndex; i < length; i++, count++) {    String s=Integer.toHexString(buf[i] & 0xff);    if (s.length() == 1) {      w.append('0');    }    w.append(s).append(' ');    if ((count % 50) == 49) {      w.append("\n");    }  }  return w.toString();}  }
class C{  public static String makeLogTag(Class<?> cls){  return makeLogTag(cls.getSimpleName());}  }
class C{  public Graph graphFromMGM(){  Graph g=new EdgeListGraph(variables);  for (int i=0; i < p; i++) {    for (int j=i + 1; j < p; j++) {      double v1=params.beta.get(i,j);      if (Math.abs(v1) > 0) {        if (!g.isAdjacentTo(variables.get(i),variables.get(j))) {          g.addUndirectedEdge(variables.get(i),variables.get(j));        }      }    }  }  for (int i=0; i < p; i++) {    for (int j=0; j < q; j++) {      double v1=params.theta.viewColumn(i).viewPart(lcumsum[j],l[j]).copy().assign(Functions.abs).zSum();      if (v1 > 0) {        if (!g.isAdjacentTo(variables.get(i),variables.get(p + j))) {          g.addUndirectedEdge(variables.get(i),variables.get(p + j));        }      }    }  }  for (int i=0; i < q; i++) {    for (int j=i + 1; j < q; j++) {      double v1=params.phi.viewPart(lcumsum[i],lcumsum[j],l[i],l[j]).copy().assign(Functions.abs).zSum();      if (v1 > 0) {        if (!g.isAdjacentTo(variables.get(p + i),variables.get(p + j))) {          g.addUndirectedEdge(variables.get(p + i),variables.get(p + j));        }      }    }  }  return g;}  }
class C{  public boolean isUseShortClassName(){  return super.isUseShortClassName();}  }
class C{  public static void reportWarning(String warningText){  ToolIO.out.println(new StringBuffer(WARNING).append(warningText));}  }
class C{  @Override public Enumeration elements(){  return (permissions.elements());}  }
class C{  public MortarScope findChild(String childName){  assertNotDead();  return children.get(childName);}  }
class C{  public Tokenizer(Reader reader,int maxStringLength){  this.reader=reader;  this.maxStringLength=Math.max(1,maxStringLength);}  }
class C{  int generateSrc(Mappings map){  try {    File outD=new File(Main.getOutputDir());    outD.mkdirs();    FileWriter fw=new FileWriter(new File(outD,"TimeZoneData.java"),false);    BufferedWriter out=new BufferedWriter(fw);    out.write("import java.util.SimpleTimeZone;\n\n");    out.write("    static SimpleTimeZone zones[] = {\n");    Map<String,String> a=map.getAliases();    List<Integer> roi=map.getRawOffsetsIndex();    List<Set<String>> roit=map.getRawOffsetsIndexTable();    int index=0;    for (    int offset : zonesByOffset.keySet()) {      int o=roi.get(index);      Set<String> set=zonesByOffset.get(offset);      if (offset == o) {        set.addAll(roit.get(index));      }      index++;      for (      String key : set) {        ZoneRec zrec;        String realname;        List<RuleRec> stz;        if ((realname=a.get(key)) != null) {          if (!Zone.isTargetZone(key)) {            continue;          }          stz=lastRules.get(realname);          zrec=lastZoneRecs.get(realname);        } else {          stz=lastRules.get(key);          zrec=lastZoneRecs.get(key);        }        out.write("\t//--------------------------------------------------------------------\n");        String s=Time.toFormedString(offset);        out.write("\tnew SimpleTimeZone(" + Time.toFormedString(offset) + ", \""+ key+ "\"");        if (realname != null) {          out.write(" /* " + realname + " */");        }        if (stz == null) {          out.write("),\n");        } else {          RuleRec rr0=stz.get(0);          RuleRec rr1=stz.get(1);          out.write(",\n\t  " + Month.toString(rr0.getMonthNum()) + ", "+ rr0.getDay().getDayForSimpleTimeZone()+ ", "+ rr0.getDay().getDayOfWeekForSimpleTimeZone()+ ", "+ Time.toFormedString((int)rr0.getTime().getTime())+ ", "+ rr0.getTime().getTypeForSimpleTimeZone()+ ",\n"+ "\t  "+ Month.toString(rr1.getMonthNum())+ ", "+ rr1.getDay().getDayForSimpleTimeZone()+ ", "+ rr1.getDay().getDayOfWeekForSimpleTimeZone()+ ", "+ Time.toFormedString((int)rr1.getTime().getTime())+ ", "+ rr1.getTime().getTypeForSimpleTimeZone()+ ",\n"+ "\t  "+ Time.toFormedString(rr0.getSave())+ "),\n");          out.write("\t// " + rr0.getLine() + "\n");          out.write("\t// " + rr1.getLine() + "\n");        }        String zline=zrec.getLine();        if (zline.indexOf("Zone") == -1) {          zline="Zone " + key + "\t"+ zline.trim();        }        out.write("\t// " + zline + "\n");      }    }    out.write("    };\n");    out.close();    fw.close();  } catch (  IOException e) {    Main.panic("IO error: " + e.getMessage());    return 1;  }  return 0;}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  if (params == null) {    return false;  }  final RPAction add=new RPAction();  add.put("type","addbuddy");  add.put("target",params[0]);  ClientSingletonRepository.getClientFramework().send(add);  return true;}  }
class C{  public synchronized void addPropertyChangeListener(PropertyChangeListener listener){  if (changeSupport == null) {    changeSupport=new SwingPropertyChangeSupport(this);  }  changeSupport.addPropertyChangeListener(listener);}  }
class C{  public void removeLayoutComponent(Component c){  componentConstraints.remove(c);}  }
class C{  public boolean isInSync(){  return inSync;}  }
class C{  protected Integer wrapKey(int k){  return new Integer(k);}  }
class C{  @TargetApi(VERSION_CODES.GINGERBREAD) public static boolean isExternalStorageRemovable(){  if (Utils.hasGingerbread()) {    return Environment.isExternalStorageRemovable();  }  return true;}  }
class C{  public ArrayLiteral createArrayLiteral(){  ArrayLiteralImpl arrayLiteral=new ArrayLiteralImpl();  return arrayLiteral;}  }
class C{  private void qtreeCopy(byte[] a,int lnx,int lny,byte[] b,int n){  int i, j, k, nx2, ny2;  int s00, s10;  nx2=(lnx + 1) / 2;  ny2=(lny + 1) / 2;  k=ny2 * (nx2 - 1) + ny2 - 1;  for (i=nx2 - 1; i >= 0; i--) {    s00=2 * (n * i + ny2 - 1);    for (j=ny2 - 1; j >= 0; j--) {      b[s00]=a[k];      k-=1;      s00-=2;    }  }  for (i=0; i < lnx - 1; i+=2) {    s00=n * i;    s10=s00 + n;    for (j=0; j < lny - 1; j+=2) {      b[s10 + 1]=(b[s00] & BIT_ONE) == ZERO ? ZERO : BIT_ONE;      b[s10]=(b[s00] & BIT_TWO) == ZERO ? ZERO : BIT_ONE;      b[s00 + 1]=(b[s00] & BIT_THREE) == ZERO ? ZERO : BIT_ONE;      b[s00]=(b[s00] & BIT_FOUR) == ZERO ? ZERO : BIT_ONE;      s00+=2;      s10+=2;    }    if (j < lny) {      b[s10]=(byte)(b[s00] >> 1 & 1);      b[s00]=(byte)(b[s00] >> N03 & 1);    }  }  if (i < lnx) {    s00=n * i;    for (j=0; j < lny - 1; j+=2) {      b[s00 + 1]=(byte)(b[s00] >> 2 & 1);      b[s00]=(byte)(b[s00] >> N03 & 1);      s00+=2;    }    if (j < lny) {      b[s00]=(byte)(b[s00] >> N03 & 1);    }  }}  }
class C{  @Override public boolean isSearchable(int columnIndex){  return true;}  }
class C{  public void addTreeExpansionListener(TreeExpansionListener tel){  if (settingUI) {    uiTreeExpansionListener=tel;  }  listenerList.add(TreeExpansionListener.class,tel);}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public Document build(InputStream stream,String uri) throws ParsingException, ValidityException, IOException {  InputSource is=new InputSource(stream);  is.setSystemId(uri);  return build(is);}  }
class C{  public CloseSecureChannelResponse clone(){  CloseSecureChannelResponse result=new CloseSecureChannelResponse();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  return result;}  }
class C{  protected static double calcPosterior(double f,double alpha,double mu,double sigma,double lambda){  final double pi=calcP_i(f,mu,sigma);  final double qi=calcQ_i(f,lambda);  return (alpha * pi) / (alpha * pi + (1.0 - alpha) * qi);}  }
class C{  public void callChildVisitors(XSLTVisitor visitor,boolean callAttributes){  if (callAttributes && (null != m_selectExpression))   m_selectExpression.callVisitors(this,visitor);  int length=getSortElemCount();  for (int i=0; i < length; i++) {    getSortElem(i).callVisitors(visitor);  }  super.callChildVisitors(visitor,callAttributes);}  }
class C{  ITypeBinding resolveType(EnumDeclaration type){  return null;}  }
class C{  public ContextClassLoaderLocal(T globalValue){  super();  if (globalValue != null) {    this.set(globalValue);  }}  }
class C{  public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4,E e5,E e6,E e7){  return construct(e1,e2,e3,e4,e5,e6,e7);}  }
class C{  @Override public BeamShareData createBeamShareData(){  NfcAdapter.CreateNdefMessageCallback ndefCallback;  NfcAdapter.CreateBeamUrisCallback urisCallback;  NdefMessage message;  Uri[] uris;  int flags;synchronized (NfcActivityManager.this) {    NfcActivityState state=findResumedActivityState();    if (state == null)     return null;    ndefCallback=state.ndefMessageCallback;    urisCallback=state.uriCallback;    message=state.ndefMessage;    uris=state.uris;    flags=state.flags;  }  if (ndefCallback != null) {    message=ndefCallback.createNdefMessage(mDefaultEvent);  }  if (urisCallback != null) {    uris=urisCallback.createBeamUris(mDefaultEvent);    if (uris != null) {      for (      Uri uri : uris) {        if (uri == null) {          Log.e(TAG,"Uri not allowed to be null.");          return null;        }        String scheme=uri.getScheme();        if (scheme == null || (!scheme.equalsIgnoreCase("file") && !scheme.equalsIgnoreCase("content"))) {          Log.e(TAG,"Uri needs to have " + "either scheme file or scheme content");          return null;        }      }    }  }  return new BeamShareData(message,uris,flags);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:45.091 -0500",hash_original_method="BF4F2A0BBB2FD109EB1FCB43C3342F5C",hash_generated_method="9FF62721B76C06749A2B6FEDB057969D") public RedirectException(String message){  super(message);}  }
class C{  public static Bundle cursorToBundle(Cursor cursor){  final int columnCount=cursor.getColumnCount();  final Bundle bundle=new Bundle(columnCount);  for (int columnIndex=0; columnIndex < columnCount; columnIndex++) {    final String columnName=cursor.getColumnName(columnIndex);switch (cursor.getType(columnIndex)) {case Cursor.FIELD_TYPE_STRING:{        bundle.putString(columnName,cursor.getString(columnIndex));        break;      }case Cursor.FIELD_TYPE_BLOB:{      bundle.putByteArray(columnName,cursor.getBlob(columnIndex));      break;    }case Cursor.FIELD_TYPE_FLOAT:{    bundle.putDouble(columnName,cursor.getDouble(columnIndex));    break;  }case Cursor.FIELD_TYPE_INTEGER:{  bundle.putLong(columnName,cursor.getLong(columnIndex));  break;}}}return bundle;}  }
class C{  public PrimitiveType createPrimitiveType(){  PrimitiveTypeImpl primitiveType=new PrimitiveTypeImpl();  return primitiveType;}  }
class C{  public Divide(double value){  this.value=value;}  }
class C{  public ContributionTemplateStore(ContextTypeRegistry registry,String key){  super(registry,key);}  }
class C{  private static String readLine() throws IOException {  return IN.readLine();}  }
class C{  private void clearRemoteControlDisplay_syncAfRcs(){synchronized (mCurrentRcLock) {    mCurrentRcClient=null;  }  mAudioHandler.sendMessage(mAudioHandler.obtainMessage(MSG_RCDISPLAY_CLEAR));}  }
class C{  @Override public String[] determineColumnConstraints(ResultProducer rp) throws Exception {  ArrayList<String> cNames=new ArrayList<String>();  updateResultsTableName(rp);  DatabaseMetaData dbmd=m_Connection.getMetaData();  ResultSet rs;  if (m_checkForUpperCaseNames) {    rs=dbmd.getColumns(null,null,m_ResultsTableName.toUpperCase(),null);  } else {    rs=dbmd.getColumns(null,null,m_ResultsTableName,null);  }  boolean tableExists=false;  int numColumns=0;  while (rs.next()) {    tableExists=true;    String name=rs.getString(4);    if (name.toLowerCase().startsWith("measure")) {      numColumns++;      cNames.add(name);    }  }  if (!tableExists) {    return null;  }  String[] columnNames=new String[numColumns];  for (int i=0; i < numColumns; i++) {    columnNames[i]=(cNames.get(i));  }  return columnNames;}  }
class C{  public static void ensure(final boolean condition,final String message) throws RuntimeException {  if (!condition)   throw new LibraryException(message);}  }
class C{  public void testCertPathValidator07() throws NoSuchAlgorithmException, NoSuchProviderException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  CertPathValidator certPV;  for (int i=0; i < validValues.length; i++) {    certPV=CertPathValidator.getInstance(validValues[i],defaultProviderName);    assertEquals("Incorrect algorithm",certPV.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider name",certPV.getProvider().getName(),defaultProviderName);  }}  }
class C{  @Override public boolean equals(final Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof URI)) {    return false;  }  final URI another=(URI)obj;  if (!equals(_scheme,another._scheme)) {    return false;  }  if (!equals(_opaque,another._opaque)) {    return false;  }  if (!equals(_authority,another._authority)) {    return false;  }  if (!equals(_path,another._path)) {    return false;  }  if (!equals(_query,another._query)) {    return false;  }  if (!equals(_fragment,another._fragment)) {    return false;  }  return true;}  }
class C{  public GF2nPolynomialElement squareMatrix(){  GF2nPolynomialElement result=new GF2nPolynomialElement(this);  result.squareThisMatrix();  result.reduceThis();  return result;}  }
class C{  @Override protected Block moveToNextBlock(){  lock.writeLock().lock();  try {    Block previousBlock=currentBlock;    if (!freeBlockIds.isEmpty()) {      currentBlockIndex=freeBlockIds.iterator().next();      freeBlockIds.remove(currentBlockIndex);      currentBlock=this.blocks.get(currentBlockIndex);    } else {      currentBlockIndex=++maxBlockIndex;      currentBlock=getOrCreateCurrentBlock();    }    windowToBlockIds.put(currentWindowId,currentBlockIndex);    return previousBlock;  }  finally {    lock.writeLock().unlock();  }}  }
class C{  public String xmlImport() throws SaaSApplicationException {  try {    getProvisioningService().importTechnicalServices(uploadedFile.getBytes());    selectedTechnicalService=null;    technicalServices=null;    addMessage(null,FacesMessage.SEVERITY_INFO,INFO_TECH_SERVICE_IMPORTED);  } catch (  IOException e) {    ImportException ex=new ImportException(e.getLocalizedMessage());    logger.logError(Log4jLogger.SYSTEM_LOG,ex,LogMessageIdentifier.ERROR_IMPORT_XML_FAILED);    throw ex;  }  return OUTCOME_SUCCESS;}  }
class C{  public void reset(){  removeListeners(m_oldView);  initializeListeners();  m_oldView=m_graph.getRawView();}  }
class C{  protected void sequence_S_1Expr_Facets_BlockOrEnd(ISerializationContext context,Statement semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public synchronized void start(EventDispatcher eventDispatcher) throws ReplicatorException {  logger.info("Starting pipeline: " + name);  for (  Stage stage : stages)   stage.start(eventDispatcher);}  }
class C{  void initInputFrame(final ClassWriter cw,final int access,final Type[] args,final int maxLocals){  inputLocals=new int[maxLocals];  inputStack=new int[0];  int i=0;  if ((access & Opcodes.ACC_STATIC) == 0) {    if ((access & MethodWriter.ACC_CONSTRUCTOR) == 0) {      inputLocals[i++]=OBJECT | cw.addType(cw.thisName);    } else {      inputLocals[i++]=UNINITIALIZED_THIS;    }  }  for (int j=0; j < args.length; ++j) {    int t=type(cw,args[j].getDescriptor());    inputLocals[i++]=t;    if (t == LONG || t == DOUBLE) {      inputLocals[i++]=TOP;    }  }  while (i < maxLocals) {    inputLocals[i++]=TOP;  }}  }
class C{  public static byte[] ivCipherConcat(byte[] iv,byte[] cipherText){  byte[] combined=new byte[iv.length + cipherText.length];  System.arraycopy(iv,0,combined,0,iv.length);  System.arraycopy(cipherText,0,combined,iv.length,cipherText.length);  return combined;}  }
class C{  public Integer read(){  if (testCommandAborted())   return null;  if (state == State.SEND_BYTES) {    final int ch=transferData[transferData.length - (transferCount--)];    if (transferCount == 0) {      if (currentCommand == 0x40) {        state=State.RECEIVE_BYTES;        transferCount=command41Data.length;        transferData=command41Data;      } else       state=State.IDLE;    }    if (transferCount != 0) {      timerCount=(baudRate == FAST_BAUD_RATE ? 5 : 7);      masterClock.add(this,-1,true,false);    }    fMountCircuit.setPin2Value(1);    return ch;  }  return null;}  }
class C{  public void write(String str,int off,int len){  int newcount=count + len;  if (newcount > buf.length) {    if (writer == null) {      expandCapacity(newcount);    } else {      do {        int rest=buf.length - count;        str.getChars(off,off + rest,buf,count);        count=buf.length;        flush();        len-=rest;        off+=rest;      } while (len > buf.length);      newcount=len;    }  }  str.getChars(off,off + len,buf,count);  count=newcount;}  }
class C{  public TDoubleArrayList(double[] values){  this(Math.max(values.length,DEFAULT_CAPACITY));  add(values);}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  void checkSemantics(DirectiveList dirList) throws SaslException {  Iterator directives=dirList.getIterator();  ParsedDirective directive;  String name;  while (directives.hasNext()) {    directive=(ParsedDirective)directives.next();    name=directive.getName();    if (name.equals("rspauth"))     m_responseValue=directive.getValue();  }  if (m_responseValue == null)   throw new SaslException("Missing response-auth directive.");}  }
class C{  public static void main(String[] args) throws UnknownHostException {  SpringApplication app=new SpringApplication(GatewayApp.class);  SimpleCommandLinePropertySource source=new SimpleCommandLinePropertySource(args);  addDefaultProfile(app,source);  Environment env=app.run(args).getEnvironment();  log.info("\n----------------------------------------------------------\n\t" + "Application '{}' is running! Access URLs:\n\t" + "Local: \t\thttp://127.0.0.1:{}\n\t"+ "External: \thttp://{}:{}\n----------------------------------------------------------",env.getProperty("spring.application.name"),env.getProperty("server.port"),InetAddress.getLocalHost().getHostAddress(),env.getProperty("server.port"));  String configServerStatus=env.getProperty("configserver.status");  log.info("\n----------------------------------------------------------\n\t" + "Config Server: \t{}\n----------------------------------------------------------",configServerStatus == null ? "Not found or not setup for this application" : configServerStatus);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:28.341 -0500",hash_original_method="16EE4F46EB7789D35890A8E3BA57F4D4",hash_generated_method="463FD15163F5D67D8EDFE23F03AFFBAD") @Override public Cursor query(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder){  SQLiteDatabase db=mOpenHelper.getReadableDatabase();  if (mUriMatcher.match(uri) == URI_MATCH_SUGGEST) {    String suggestSelection;    String[] myArgs;    if (TextUtils.isEmpty(selectionArgs[0])) {      suggestSelection=null;      myArgs=null;    } else {      String like="%" + selectionArgs[0] + "%";      if (mTwoLineDisplay) {        myArgs=new String[]{like,like};      } else {        myArgs=new String[]{like};      }      suggestSelection=mSuggestSuggestionClause;    }    Cursor c=db.query(sSuggestions,mSuggestionProjection,suggestSelection,myArgs,null,null,ORDER_BY,null);    c.setNotificationUri(getContext().getContentResolver(),uri);    return c;  }  int length=uri.getPathSegments().size();  if (length != 1 && length != 2) {    throw new IllegalArgumentException("Unknown Uri");  }  String base=uri.getPathSegments().get(0);  if (!base.equals(sSuggestions)) {    throw new IllegalArgumentException("Unknown Uri");  }  String[] useProjection=null;  if (projection != null && projection.length > 0) {    useProjection=new String[projection.length + 1];    System.arraycopy(projection,0,useProjection,0,projection.length);    useProjection[projection.length]="_id AS _id";  }  StringBuilder whereClause=new StringBuilder(256);  if (length == 2) {    whereClause.append("(_id = ").append(uri.getPathSegments().get(1)).append(")");  }  if (selection != null && selection.length() > 0) {    if (whereClause.length() > 0) {      whereClause.append(" AND ");    }    whereClause.append('(');    whereClause.append(selection);    whereClause.append(')');  }  Cursor c=db.query(base,useProjection,whereClause.toString(),selectionArgs,null,null,sortOrder,null);  c.setNotificationUri(getContext().getContentResolver(),uri);  return c;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Airing a=getAir(stack);  return Wizard.getInstance().getPlayableAiring(a);}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:11.143 -0500",hash_original_method="F0B1F091C7D17598674B0DE91138DFE8",hash_generated_method="5D5978B521B426BD09D0BCE0882F736E") public Scroller(Context context){  this(context,null);}  }
class C{  public V value(){  return _map._values[_index];}  }
class C{  public static void putKeyValuePair(final Environment environment,final Database database,final Integer key,final Integer value) throws Exception {  final Transaction transactionForAddingTestData=environment.beginTransaction(null,null);  database.put(transactionForAddingTestData,new DatabaseEntry(new ByteArrayConverterForInteger().toByteArray(key)),new DatabaseEntry(new ByteArrayConverterForInteger().toByteArray(value)));  transactionForAddingTestData.commit();}  }
class C{  public void onNewMessage(Peer peer,int sender,long date,ContentDescription description,boolean hasCurrentUserMention,int messagesCount,int dialogsCount){  if (date <= getLastReadDate(peer)) {    return;  }  boolean isEnabled=isNotificationsEnabled(peer,hasCurrentUserMention);  if (isEnabled) {    List<PendingNotification> pendingNotifications=getNotifications();    PendingNotification pendingNotification=new PendingNotification(peer,sender,date,description);    pendingNotifications.add(pendingNotification);    pendingStorage.setMessagesCount(messagesCount);    pendingStorage.setDialogsCount(dialogsCount);    allPendingNotifications.add(pendingNotification);    saveStorage();  }  if (isNotificationsPaused) {    if (!notificationsDuringPause.containsKey(peer)) {      notificationsDuringPause.put(peer,hasCurrentUserMention);    } else {      if (hasCurrentUserMention && !notificationsDuringPause.get(peer)) {        notificationsDuringPause.put(peer,true);      }    }    return;  }  if (isAppVisible) {    if (visiblePeer != null && visiblePeer.equals(peer)) {      if (isMobilePlatform) {        playEffectIfEnabled();      } else {      }    } else {      if (isMobilePlatform) {      } else {        if (isEnabled) {          playEffectIfEnabled();        }      }    }  } else {    if (isEnabled) {      showNotification();    }  }}  }
class C{  public TrackSorter(boolean ascending){  super(ascending);}  }
