class C{  public void notify(String sensor,boolean value){  javax.swing.SwingUtilities.invokeLater(new SerialNotifier(sensor,value));}  }
class C{  public void testSimpleWritePerformance(String store) throws Exception {  waitForFullMesh(5000);  final int count=1000000;  IStoreClient<String,String> client0=syncManagers[0].getStoreClient(store,String.class,String.class);  IStoreClient<String,String> client2=syncManagers[2].getStoreClient(store,String.class,String.class);  long then=System.currentTimeMillis();  for (int i=1; i <= count; i++) {    client0.put("" + i,"" + i);  }  long donewriting=System.currentTimeMillis();  waitForValue(client2,"" + count,null,count,"client2");  long now=System.currentTimeMillis();  logger.info("Simple write ({}): {} values in {}+/-100 " + "millis ({} synced writes/s) ({} local writes/s)",new Object[]{store,count,(now - then),1000.0 * count / (now - then),1000.0 * count / (donewriting - then)});}  }
class C{  public String checkSchedule(Car car){  if (car.getDestinationTrack() == this) {    return OKAY;  }  if (!getTrackType().equals(SPUR)) {    return OKAY;  }  if (getScheduleId().equals(NONE)) {    if (car.getLoadName().equals(CarLoads.instance().getDefaultEmptyName()) || car.getLoadName().equals(CarLoads.instance().getDefaultLoadName())) {      return OKAY;    }    return MessageFormat.format(Bundle.getMessage("carHasA"),new Object[]{CUSTOM,LOAD,car.getLoadName()});  }  log.debug("Track ({}) has schedule ({}) mode {} ({})",getName(),getScheduleName(),getScheduleMode(),getScheduleMode() == SEQUENTIAL ? "Sequential" : "Match");  ScheduleItem si=getCurrentScheduleItem();  if (si == null) {    log.error("Could not find schedule item id: ({}) for schedule ({})",getScheduleItemId(),getScheduleName());    return SCHEDULE + " ERROR";  }  if (getScheduleMode() == SEQUENTIAL) {    return checkScheduleItem(si,car);  }  return searchSchedule(car);}  }
class C{  private JPopupMenu createOperatorPopupMenu(){  JPopupMenu menu=new JPopupMenu();  menu.add(this.INFO_OPERATOR_ACTION);  return menu;}  }
class C{  public KeyStoreLoadException(Throwable causeThrowable,KeyStoreType keyStoreType){  super(causeThrowable);  this.keyStoreType=keyStoreType;}  }
class C{  public static void runTrialNormal(int size,TrialSuite set,IPoint[] pts,IPivotIndex selector){  Integer[] ar=new Integer[size];  for (int i=0, idx=0; i < pts.length; i++) {    ar[idx++]=(int)(pts[i].getX() * BASE);    ar[idx++]=(int)(pts[i].getY() * BASE);  }  algs.model.array.QuickSort<Integer> qs=new algs.model.array.QuickSort<Integer>(ar);  qs.setPivotMethod(selector);  System.gc();  long start=System.currentTimeMillis();  qs.qsort(0,size - 1);  long end=System.currentTimeMillis();  set.addTrial(size,start,end);  for (int i=0; i < ar.length - 1; i++) {    assert (ar[i] <= ar[i + 1]);  }}  }
class C{  private void doDeleteWithAccessPath(final HttpServletRequest req,final HttpServletResponse resp) throws IOException {  final String namespace=getNamespace(req);  final boolean suppressTruthMaintenance=getBooleanValue(req,QueryServlet.ATTR_TRUTH_MAINTENANCE,false);  final Resource s;  final URI p;  final Value o;  final Resource[] c;  try {    s=EncodeDecodeValue.decodeResource(req.getParameter("s"));    p=EncodeDecodeValue.decodeURI(req.getParameter("p"));    o=EncodeDecodeValue.decodeValue(req.getParameter("o"));    c=decodeContexts(req,"c");  } catch (  IllegalArgumentException ex) {    buildAndCommitResponse(resp,HTTP_BADREQUEST,MIME_TEXT_PLAIN,ex.getLocalizedMessage());    return;  }  if (log.isInfoEnabled())   log.info("DELETE-WITH-ACCESS-PATH: (s=" + s + ", p="+ p+ ", o="+ o+ ", c="+ Arrays.toString(c)+ ")");  try {    submitApiTask(new DeleteWithAccessPathTask(req,resp,namespace,ITx.UNISOLATED,suppressTruthMaintenance,s,p,o,c)).get();  } catch (  Throwable t) {    BigdataRDFServlet.launderThrowable(t,resp,"DELETE-WITH-ACCESS-PATH: (s=" + s + ",p="+ p+ ",o="+ o+ ",c="+ Arrays.toString(c)+ ")");  }}  }
class C{  public String printNodeLinearModel(){  return m_nodeModel.toString();}  }
class C{  PBES1Core(String cipherAlg) throws NoSuchAlgorithmException, NoSuchPaddingException {  algo=cipherAlg;  if (algo.equals("DES")) {    cipher=new CipherCore(new DESCrypt(),DESConstants.DES_BLOCK_SIZE);  } else   if (algo.equals("DESede")) {    cipher=new CipherCore(new DESedeCrypt(),DESConstants.DES_BLOCK_SIZE);  } else {    throw new NoSuchAlgorithmException("No Cipher implementation " + "for PBEWithMD5And" + algo);  }  cipher.setMode("CBC");  cipher.setPadding("PKCS5Padding");  md=MessageDigest.getInstance("MD5");}  }
class C{  private void rewriteFPStack(IR ir){  GenericPhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet();  for (Enumeration<BasicBlock> b=ir.getBasicBlocks(); b.hasMoreElements(); ) {    BasicBlock bb=b.nextElement();    int fpStackOffset=0;    for (Enumeration<Instruction> inst=bb.forwardInstrEnumerator(); inst.hasMoreElements(); ) {      Instruction s=inst.nextElement();      for (Enumeration<Operand> ops=s.getOperands(); ops.hasMoreElements(); ) {        Operand op=ops.nextElement();        if (op.isRegister()) {          RegisterOperand rop=op.asRegister();          Register r=rop.getRegister();          if (r.isPhysical() && r.isFloatingPoint() && s.operator() != org.jikesrvm.compilers.opt.ir.ia32.ArchOperators.DUMMY_DEF && s.operator() != org.jikesrvm.compilers.opt.ir.ia32.ArchOperators.DUMMY_USE) {            int n=org.jikesrvm.compilers.opt.ir.ia32.PhysicalRegisterSet.getFPRIndex(r);            if (fpStackOffset != 0) {              n+=fpStackOffset;              rop.setRegister(phys.getFPR(n));            }            ir.MIRInfo.fpStackHeight=Math.max(ir.MIRInfo.fpStackHeight,n + 1);          }        } else         if (op instanceof BURSManagedFPROperand) {          int regNum=((BURSManagedFPROperand)op).regNum;          s.replaceOperand(op,new RegisterOperand(phys.getFPR(regNum),TypeReference.Double));        }      }      if (s.operator().isFpPop()) {        fpStackOffset--;      } else       if (s.operator().isFpPush()) {        fpStackOffset++;      }      if (VM.VerifyAssertions)       VM._assert(fpStackOffset >= 0);    }  }}  }
class C{  boolean is(int isType){  return mode == isType;}  }
class C{  public static GrayscaleMatrix createFromRegion(final GrayscaleMatrix source,final int width,final int height,final int startPixelX,final int startPixelY){  if (width <= 0 || height <= 0 || width > source.width || height > source.height) {    throw new IllegalArgumentException("Illegal sub region size!");  }  GrayscaleMatrix output=new GrayscaleMatrix(width,height);  for (int i=0; i < output.data.length; i++) {    int xOffset=i % width;    int yOffset=i / width;    int index=ArrayUtils.convert2DTo1D(startPixelX + xOffset,startPixelY + yOffset,source.width);    output.data[i]=source.data[index];  }  return output;}  }
class C{  private int cleanUp(){  if (log.isDebugEnabled()) {    log.debug(" ##############  cleanUp ###########,   fileName: " + fileNames);  }  String killTask=CommandBuilder.stopTask(fileNames);  log.debug(" killTask: " + killTask);  int exitCode=ProcessUtils.executeCommand(killTask,null);  log.debug(" cleanUp killTask exitCode: " + exitCode);  if (exitCode != 0) {    exitCode=linuxKill(fileNames);  }  return exitCode;}  }
class C{  public Assignment(String var,String val){  this();  map.put(var,ValueFactory.create(val));}  }
class C{  public void writeComment(Object comment) throws IOException {  if (comment == null) {    throw new NullPointerException(MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID,"comment"));  }  closeStartIfNecessary();  writer.write("<!-- ");  writer.write(comment.toString());  writer.write(" -->");}  }
class C{  public void unregisterForUpdates(){  SigninManager manager=SigninManager.get(getContext());  manager.removeSignInAllowedObserver(this);  ProfileDownloader.removeObserver(this);}  }
class C{  public ConfigureIterateModel_NB(){  initComponents();  jTextField1.setDocument(new JTextFieldInteger());  jTextField2.setDocument(new JTextFieldInteger());  jTextField3.setDocument(new JTextFieldInteger());  jComboBox1.setModel(getComboBoxModel());}  }
class C{  public Type2Message(){  this(getDefaultFlags(),null,null);}  }
class C{  public MethodNotFoundException(String message,Throwable cause){  super(message,cause);}  }
class C{  public static ScaleAndIndex median(){  return scale(2).index(1);}  }
class C{  public String buildURL(Map params){  String url_redirect=keypay_url;  try {    Iterator i=params.keySet().iterator();    String param="";    while (i.hasNext()) {      String key=(String)i.next();      String value=((String[])params.get(key))[0];      param+=key + "=" + URLEncoder.encode(value,"UTF-8")+ "&";    }    url_redirect+=param + "secure_hash=" + secure_hash;  } catch (  Exception e) {    System.out.println("ERROR Build URL");  }  return url_redirect;}  }
class C{  private void unlinkCancelledWaiters(){  Node t=firstWaiter;  Node trail=null;  while (t != null) {    Node next=t.nextWaiter;    if (t.waitStatus != Node.CONDITION) {      t.nextWaiter=null;      if (trail == null)       firstWaiter=next; else       trail.nextWaiter=next;      if (next == null)       lastWaiter=trail;    } else     trail=t;    t=next;  }}  }
class C{  public PopupMenu(String label) throws HeadlessException {  super(label);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (value: ");  result.append(value);  result.append(')');  return result.toString();}  }
class C{  public FactoryFinderTestCase(String name){  super(name);}  }
class C{  public void testIntbyInt1(){  byte aBytes[]={10,20,30,40};  byte bBytes[]={1,2,3,4};  int aSign=1;  int bSign=-1;  byte rBytes[]={-11,-41,-101,55,5,15,96};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.multiply(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public QuickAdapter(Context context,int layoutResId,List<T> data){  super(context,layoutResId,data);}  }
class C{  RestaurantHolder visit(long millis){  if (millis > 0) {    long now=System.currentTimeMillis();    detail.setText(now - millis > MINUTE_IN_MILLIS ? DateUtils.getRelativeTimeSpanString(millis,now,0,FORMAT_ABBREV_ALL) : mContext.getString(R.string.recent_time));  } else {    detail.setText(R.string.never);  }  detail.setCompoundDrawablesWithIntrinsicBounds(R.drawable.ic_action_time_small,0,0,0);  detailIsAddress=false;  return this;}  }
class C{  public final int compareTo(TokenProbabilityStrength anotherTokenProbabilityStrength){  int result=(int)((anotherTokenProbabilityStrength.strength - strength) * 1000000);  if (result == 0) {    return this.token.compareTo(anotherTokenProbabilityStrength.token);  } else {    return result;  }}  }
class C{  public PdxInitializationException(String message,Throwable cause){  super(message,cause);}  }
class C{  protected void dock(DockWrapper outter,DockWrapper inner,int idx){  freeWrapper(inner);  outter.dock(inner,idx);}  }
class C{  public Object remove(int index){  checkRange(index);  GraphicsNode oldNode=children[index];{    fireGraphicsNodeChangeStarted(oldNode);  }  modCount++;  int numMoved=count - index - 1;  if (numMoved > 0) {    System.arraycopy(children,index + 1,children,index,numMoved);  }  children[--count]=null;  if (count == 0) {    children=null;  }  ((AbstractGraphicsNode)oldNode).setParent(null);  ((AbstractGraphicsNode)oldNode).setRoot(null);  invalidateGeometryCache();  fireGraphicsNodeChangeCompleted();  return oldNode;}  }
class C{  public void mediaTags(TagInfo tagInfo){  tagInfo=new TagInfo("img",ContentType.none,BelongsTo.BODY,false,false,false,CloseTag.forbidden,Display.inline);  this.put("img",tagInfo);  tagInfo=new TagInfo("iframe",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.any);  this.put("iframe",tagInfo);  tagInfo=new TagInfo("embed",ContentType.none,BelongsTo.BODY,false,false,false,CloseTag.forbidden,Display.block);  tagInfo.defineCloseBeforeCopyInsideTags(CLOSE_BEFORE_COPY_INSIDE_TAGS);  tagInfo.defineCloseBeforeTags(CLOSE_BEFORE_TAGS);  this.put("embed",tagInfo);  tagInfo=new TagInfo("object",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.any);  this.put("object",tagInfo);  tagInfo=new TagInfo("param",ContentType.none,BelongsTo.BODY,false,false,false,CloseTag.forbidden,Display.none);  tagInfo.defineCloseBeforeCopyInsideTags(CLOSE_BEFORE_COPY_INSIDE_TAGS);  tagInfo.defineCloseBeforeTags(CLOSE_BEFORE_TAGS);  tagInfo.defineRequiredEnclosingTags("object");  this.put("param",tagInfo);  tagInfo=new TagInfo("audio",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.any);  tagInfo.defineCloseInsideCopyAfterTags(MEDIA_TAGS);  this.put("audio",tagInfo);  tagInfo=new TagInfo("picture",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.any);  tagInfo.defineCloseInsideCopyAfterTags(MEDIA_TAGS);  this.put("picture",tagInfo);  tagInfo=new TagInfo("video",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.any);  tagInfo.defineCloseInsideCopyAfterTags(MEDIA_TAGS);  this.put("video",tagInfo);  tagInfo=new TagInfo("source",ContentType.none,BelongsTo.BODY,false,false,false,CloseTag.forbidden,Display.any);  tagInfo.defineRequiredEnclosingTags("audio,video,object");  this.put("source",tagInfo);  tagInfo=new TagInfo("track",ContentType.none,BelongsTo.BODY,false,false,false,CloseTag.forbidden,Display.any);  tagInfo.defineRequiredEnclosingTags(MEDIA_TAGS);  this.put("track",tagInfo);  tagInfo=new TagInfo("canvas",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.any);  this.put("canvas",tagInfo);  tagInfo=new TagInfo("area",ContentType.none,BelongsTo.BODY,false,false,false,CloseTag.forbidden,Display.none);  tagInfo.defineFatalTags("map");  tagInfo.defineCloseBeforeTags("area");  this.put("area",tagInfo);  tagInfo=new TagInfo("map",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.any);  tagInfo.defineCloseBeforeTags("map");  tagInfo.defineAllowedChildrenTags("area");  this.put("map",tagInfo);}  }
class C{  private void doAddMapping(String user,String domain,String mapping) throws RecipientRewriteTableException {  HTableInterface table=null;  try {    table=TablePool.getInstance().getRecipientRewriteTable();    Put put=new Put(Bytes.toBytes(getRowKey(user,domain)));    put.add(HRecipientRewriteTable.COLUMN_FAMILY_NAME,HRecipientRewriteTable.COLUMN.MAPPING,Bytes.toBytes(mapping));    table.put(put);    table.flushCommits();  } catch (  IOException e) {    log.error("Error while adding mapping in HBase",e);    throw new RecipientRewriteTableException("Error while adding mapping in HBase",e);  } finally {    if (table != null) {      try {        table.close();      } catch (      IOException e) {      }    }  }}  }
class C{  public Matrix plus(Matrix B){  checkMatrixDimensions(B);  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=A[i][j] + B.A[i][j];    }  }  return X;}  }
class C{  public IConnection createServerConnection(Socket socket,int id){  return new DataStreamConnection(socket,id);}  }
class C{  public static File streamToGzFile(final InputStream stream,final File file) throws IOException {  if (stream == null) {    throw new NullPointerException("null stream given");  }  if (file == null) {    throw new NullPointerException("null file given");  }  try (OutputStream out=new GZIPOutputStream(new FileOutputStream(file))){    final byte[] b=new byte[FileUtils.BUFFER_SIZE];    int len=stream.read(b);    while (len > 0) {      out.write(b,0,len);      len=stream.read(b);    }  }   return file;}  }
class C{  @Override public void reset(){  super.reset();  remove(SCOPE_KEY,baseParameters);}  }
class C{  public boolean isManager(){  Object oo=get_Value(COLUMNNAME_IsManager);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Iterator<Parameter> iterator(){  return values().iterator();}  }
class C{  public Filter createFilter(BridgeContext ctx,Element filterElement,Element filteredElement,GraphicsNode filteredNode,Filter inputFilter,Rectangle2D filterRegion,Map filterMap){  float surfaceScale=convertNumber(filterElement,SVG_SURFACE_SCALE_ATTRIBUTE,1,ctx);  float specularConstant=convertNumber(filterElement,SVG_SPECULAR_CONSTANT_ATTRIBUTE,1,ctx);  float specularExponent=convertSpecularExponent(filterElement,ctx);  Light light=extractLight(filterElement,ctx);  double[] kernelUnitLength=convertKernelUnitLength(filterElement,ctx);  Filter in=getIn(filterElement,filteredElement,filteredNode,inputFilter,filterMap,ctx);  if (in == null) {    return null;  }  Rectangle2D defaultRegion=in.getBounds2D();  Rectangle2D primitiveRegion=SVGUtilities.convertFilterPrimitiveRegion(filterElement,filteredElement,filteredNode,defaultRegion,filterRegion,ctx);  Filter filter=new SpecularLightingRable8Bit(in,primitiveRegion,light,specularConstant,specularExponent,surfaceScale,kernelUnitLength);  handleColorInterpolationFilters(filter,filterElement);  updateFilterMap(filterElement,filter,filterMap);  return filter;}  }
class C{  private NSObject parseObject(int obj) throws PropertyListFormatException, UnsupportedEncodingException {  int offset=offsetTable[obj];  byte type=bytes[offset];  int objType=(type & 0xF0) >> 4;  int objInfo=type & 0x0F;switch (objType) {case 0x0:{switch (objInfo) {case 0x0:{          return null;        }case 0x8:{        return new NSNumber(false);      }case 0x9:{      return new NSNumber(true);    }case 0xC:{    throw new UnsupportedOperationException("The given binary property list contains a URL object. Parsing of this object type is not yet implemented.");  }case 0xD:{  throw new UnsupportedOperationException("The given binary property list contains a URL object. Parsing of this object type is not yet implemented.");}case 0xE:{throw new UnsupportedOperationException("The given binary property list contains a UUID object. Parsing of this object type is not yet implemented.");}default :{throw new PropertyListFormatException("The given binary property list contains an object of unknown type (" + objType + ")");}}}case 0x1:{int length=(int)Math.pow(2,objInfo);return new NSNumber(bytes,offset + 1,offset + 1 + length,NSNumber.INTEGER);}case 0x2:{int length=(int)Math.pow(2,objInfo);return new NSNumber(bytes,offset + 1,offset + 1 + length,NSNumber.REAL);}case 0x3:{if (objInfo != 0x3) {throw new PropertyListFormatException("The given binary property list contains a date object of an unknown type (" + objInfo + ")");}return new NSDate(bytes,offset + 1,offset + 9);}case 0x4:{int[] lengthAndOffset=readLengthAndOffset(objInfo,offset);int length=lengthAndOffset[0];int dataOffset=lengthAndOffset[1];return new NSData(copyOfRange(bytes,offset + dataOffset,offset + dataOffset + length));}case 0x5:{int[] lengthAndOffset=readLengthAndOffset(objInfo,offset);int length=lengthAndOffset[0];int strOffset=lengthAndOffset[1];return new NSString(bytes,offset + strOffset,offset + strOffset + length,"ASCII");}case 0x6:{int[] lengthAndOffset=readLengthAndOffset(objInfo,offset);int characters=lengthAndOffset[0];int strOffset=lengthAndOffset[1];int length=characters * 2;return new NSString(bytes,offset + strOffset,offset + strOffset + length,"UTF-16BE");}case 0x7:{int[] lengthAndOffset=readLengthAndOffset(objInfo,offset);int strOffset=lengthAndOffset[1];int characters=lengthAndOffset[0];int length=calculateUtf8StringLength(bytes,offset + strOffset,characters);return new NSString(bytes,offset + strOffset,offset + strOffset + length,"UTF-8");}case 0x8:{int length=objInfo + 1;return new UID(String.valueOf(obj),copyOfRange(bytes,offset + 1,offset + 1 + length));}case 0xA:{int[] lengthAndOffset=readLengthAndOffset(objInfo,offset);int length=lengthAndOffset[0];int arrayOffset=lengthAndOffset[1];NSArray array=new NSArray(length);for (int i=0; i < length; i++) {int objRef=(int)parseUnsignedInt(bytes,offset + arrayOffset + i * objectRefSize,offset + arrayOffset + (i + 1) * objectRefSize);array.setValue(i,parseObject(objRef));}return array;}case 0xB:{int[] lengthAndOffset=readLengthAndOffset(objInfo,offset);int length=lengthAndOffset[0];int contentOffset=lengthAndOffset[1];NSSet set=new NSSet(true);for (int i=0; i < length; i++) {int objRef=(int)parseUnsignedInt(bytes,offset + contentOffset + i * objectRefSize,offset + contentOffset + (i + 1) * objectRefSize);set.addObject(parseObject(objRef));}return set;}case 0xC:{int[] lengthAndOffset=readLengthAndOffset(objInfo,offset);int length=lengthAndOffset[0];int contentOffset=lengthAndOffset[1];NSSet set=new NSSet();for (int i=0; i < length; i++) {int objRef=(int)parseUnsignedInt(bytes,offset + contentOffset + i * objectRefSize,offset + contentOffset + (i + 1) * objectRefSize);set.addObject(parseObject(objRef));}return set;}case 0xD:{int[] lengthAndOffset=readLengthAndOffset(objInfo,offset);int length=lengthAndOffset[0];int contentOffset=lengthAndOffset[1];NSDictionary dict=new NSDictionary();for (int i=0; i < length; i++) {int keyRef=(int)parseUnsignedInt(bytes,offset + contentOffset + i * objectRefSize,offset + contentOffset + (i + 1) * objectRefSize);int valRef=(int)parseUnsignedInt(bytes,offset + contentOffset + (length * objectRefSize)+ i * objectRefSize,offset + contentOffset + (length * objectRefSize)+ (i + 1) * objectRefSize);NSObject key=parseObject(keyRef);NSObject val=parseObject(valRef);assert key != null;dict.put(key.toString(),val);}return dict;}default :{throw new PropertyListFormatException("The given binary property list contains an object of unknown type (" + objType + ")");}}}  }
class C{  public void putCharacterCategory(int codePoint,String characterClassName){  characterClassName=characterClassName.split(" ")[0];  if (codePoint == 0x30FB) {    characterClassName="SYMBOL";  }  characterCategoryMap[codePoint]=CharacterDefinition.lookupCharacterClass(characterClassName);}  }
class C{  public int keyAt(int index){  if (mGarbage) {    gc();  }  return mKeys[index];}  }
class C{  public String toString(){  StringBuffer s=new StringBuffer();  if (negative)   s.append("-"); else   s.append("+");  if (user instanceof Group)   s.append("Group."); else   s.append("User.");  s.append(user + "=");  Enumeration<Permission> e=permissions();  while (e.hasMoreElements()) {    Permission p=e.nextElement();    s.append(p);    if (e.hasMoreElements())     s.append(",");  }  return new String(s);}  }
class C{  public static boolean isEmpty(){  return buffer == EOF;}  }
class C{  public IntervalXYToolTipGenerator(String formatString,DateFormat xFormat,NumberFormat yFormat){  super(formatString,xFormat,yFormat);}  }
class C{  public void run(){  ThreadAuditor.ThreadHandle threadHandle=null;  while (true) {    if (myParser == null) {      myParser=new StringMsgParser();      myParser.setParseExceptionListener(this);    }    DatagramPacket packet;    if (sipStack.threadPoolSize != -1) {synchronized (((UDPMessageProcessor)messageProcessor).messageQueue) {        while (((UDPMessageProcessor)messageProcessor).messageQueue.isEmpty()) {          if (!((UDPMessageProcessor)messageProcessor).isRunning)           return;          try {            if (threadHandle == null) {              threadHandle=sipStack.getThreadAuditor().addCurrentThread();            }            threadHandle.ping();            ((UDPMessageProcessor)messageProcessor).messageQueue.wait(threadHandle.getPingIntervalInMillisecs());          } catch (          InterruptedException ex) {            if (!((UDPMessageProcessor)messageProcessor).isRunning)             return;          }        }        packet=(DatagramPacket)((UDPMessageProcessor)messageProcessor).messageQueue.removeFirst();      }      this.incomingPacket=packet;    } else {      packet=this.incomingPacket;    }    try {      processIncomingDataPacket(packet);    } catch (    Exception e) {      if (sipStack.isLoggingEnabled())       sipStack.getStackLogger().logError("Error while processing incoming UDP packet",e);    }    if (sipStack.threadPoolSize == -1) {      return;    }  }}  }
class C{  final public boolean isLeaf(){  return false;}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  public void testDoubleMissing() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  writer.addDocument(doc);  doc=new Document();  doc.add(new DoubleDocValuesField("value",-1.3));  doc.add(newStringField("value","-1.3",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new DoubleDocValuesField("value",4.2333333333333));  doc.add(newStringField("value","4.2333333333333",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new DoubleDocValuesField("value",4.2333333333332));  doc.add(newStringField("value","4.2333333333332",Field.Store.YES));  writer.addDocument(doc);  IndexReader ir=writer.getReader();  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(new SortField("value",SortField.Type.DOUBLE));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(4,td.totalHits);  assertEquals("-1.3",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertNull(searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("4.2333333333332",searcher.doc(td.scoreDocs[2].doc).get("value"));  assertEquals("4.2333333333333",searcher.doc(td.scoreDocs[3].doc).get("value"));  ir.close();  dir.close();}  }
class C{  static public IBindingSet[] resolve(final AbstractTripleStore db,final BindingSet[] serviceResults){  final BindingSet[] resolvedServiceResults;{    final Object[] b=new BigdataValueReplacer(db).replaceValues(null,serviceResults);    resolvedServiceResults=(BindingSet[])b[1];  }  final IBindingSet[] bigdataSolutions=new IBindingSet[resolvedServiceResults.length];{    for (int i=0; i < resolvedServiceResults.length; i++) {      final BindingSet bset=resolvedServiceResults[i];      final IBindingSet bset2=openrdf2Bigdata(null,bset);      bigdataSolutions[i]=bset2;    }  }  return bigdataSolutions;}  }
class C{  public void beforeEmitClassDeclaration(JavaFileWriter writer) throws IOException {}  }
class C{  public synchronized void add(long value){  long res=get() + value;  lb.put(0,res);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public int addPadding(byte[] in,int inOff){  byte code=(byte)(in.length - inOff);  while (inOff < (in.length - 1)) {    in[inOff]=(byte)random.nextInt();    inOff++;  }  in[inOff]=code;  return code;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:27.808 -0500",hash_original_method="7103B0EDA0D88809AB4D74CA424F106F",hash_generated_method="0B7BA8FD2687C7E3732941870AE959F1") public int indexOf(String string){  return indexOf(string,0);}  }
class C{  public int outerClassIndex(int nth){  return ByteArray.readU16bit(get(),nth * 8 + 4);}  }
class C{  @Override View obtainView(int position,boolean[] isScrap){  View view=super.obtainView(position,isScrap);  if (view instanceof TextView) {    ((TextView)view).setHorizontallyScrolling(true);  }  return view;}  }
class C{  public Rational(long nominator,long denominator){  mNumerator=nominator;  mDenominator=denominator;}  }
class C{  public static Result unwatchUpdate(){  YobiUpdate.isWatched=false;  return ok();}  }
class C{  public EmissionLinkAnalyzer(final double simulationEndTime,final String emissionEventFile,final int noOfTimeBins,final String shapeFile,final Network network){  this(simulationEndTime,emissionEventFile,noOfTimeBins,shapeFile,network,null);}  }
class C{  public Element addElement(Element element){  Preconditions.checkNotNull(element);  addElement(element.getElementKey(),element);  return this;}  }
class C{  public boolean hasDirectoryServer(){  return hasExtension(DirectoryServer.class);}  }
class C{  public static boolean equals(boolean[] array1,boolean[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  @Override public void disconnect(){  try {    service.logout();  } catch (  Exception e) {    throw new RuntimeException("closing connection",e);  }}  }
class C{  @Override public int hashCode(){  int result=29;  result=HashUtilities.hashCode(result,this.mean);  result=HashUtilities.hashCode(result,this.std);  return result;}  }
class C{  public T caseNotequalsOp_(NotequalsOp_ object){  return null;}  }
class C{  public Builder logLevel(@Logger.Level int logLevel){  this.logLevel=logLevel;  return this;}  }
class C{  private void optimizeJoinGroups(final IEvaluationContext context,final StaticAnalysis sa,final GraphPatternGroup<IGroupMemberNode> group){  final int arity=group.arity();  for (int i=0; i < arity; i++) {    final BOp child=(BOp)group.get(i);    if (child instanceof GraphPatternGroup<?>) {      optimizeJoinGroups(context,sa,((GraphPatternGroup<IGroupMemberNode>)child));    } else     if (child instanceof ServiceNode) {      continue;    }  }  final JoinSetUtil joinSets=new JoinSetUtil(sa,null,group);  if (joinSets.joinFilters.isEmpty()) {    return;  }  final int directJoinSetCount=joinSets.directJoinSets.size();  if (directJoinSetCount > 1) {    final VertexJoinSet[] a=joinSets.directJoinSets.toArray(new VertexJoinSet[directJoinSetCount]);    Arrays.sort(a,new VertexJoinSetComparator());    for (int i=0; i < a.length; i++) {      for (int j=i + 1; j < a.length; j++) {        final Set<IVariable<?>> set1=a[i].joinvars;        final Set<IVariable<?>> set2=a[j].joinvars;        final Set<IVariable<?>> joinvars=new LinkedHashSet<IVariable<?>>();        joinvars.addAll(set1);        joinvars.addAll(set2);        for (        FilterNode f : joinSets.joinFilters) {          if (sa.isFullyBound(f,set1) || sa.isFullyBound(f,set2)) {            continue;          }          if (sa.isFullyBound(f,joinvars)) {            log.error("indirect join: joinSet1=" + a[i] + ",joinSet2="+ a[j]+ " on filter="+ f);          }        }      }    }  }}  }
class C{  public void printLine(final String data,final String charset) throws IOException, IllegalStateException {  LOG.trace("enter HttpConnection.printLine(String)");  writeLine(EncodingUtil.getBytes(data,charset));}  }
class C{  public void addBlockOrder(BlockOrder order){  _savedOrders.add(order);}  }
class C{  private String parseHttpOperation(Method method){  if (method.getAnnotation(GET.class) != null) {    return "GET";  } else   if (method.getAnnotation(DELETE.class) != null) {    return "DELETE";  } else   if (method.getAnnotation(POST.class) != null) {    return "POST";  } else   if (method.getAnnotation(PUT.class) != null) {    return "PUT";  } else   if (method.getAnnotation(HEAD.class) != null) {    return "HEAD";  } else   if (method.getAnnotation(OPTIONS.class) != null) {    return "OPTIONS";  }  return null;}  }
class C{  public void delete(String key){  if (key == null)   throw new NullPointerException("called delete(null)");  if (key.length() == 0)   throw new IllegalArgumentException("invalid key");  Node g;  Node p=head;  Node x=head;  do {    g=p;    p=x;    if (safeBitTest(key,x.b))     x=x.right; else     x=x.left;  } while (p.b < x.b);  if (x.key.equals(key)) {    Node z;    Node y=head;    do {      z=y;      if (safeBitTest(key,y.b))       y=y.right; else       y=y.left;    } while (y != x);    if (x == p) {      Node c;      if (safeBitTest(key,x.b))       c=x.left; else       c=x.right;      if (safeBitTest(key,z.b))       z.right=c; else       z.left=c;    } else {      Node c;      if (safeBitTest(key,p.b))       c=p.left; else       c=p.right;      if (safeBitTest(key,g.b))       g.right=c; else       g.left=c;      if (safeBitTest(key,z.b))       z.right=p; else       z.left=p;      p.left=x.left;      p.right=x.right;      p.b=x.b;    }    count--;  }}  }
class C{  public static boolean isConnectionOpen(HttpServletRequest request){  return isConnectionOpen(request," ".getBytes());}  }
class C{  @Override public int fillWithTimeout(long timeout) throws IOException {  return _is.fillWithTimeout(timeout);}  }
class C{  public double outputValue(NeuralNode node){  double[] weights=node.getWeights();  NeuralConnection[] inputs=node.getInputs();  double value=weights[0];  for (int noa=0; noa < node.getNumInputs(); noa++) {    value+=inputs[noa].outputValue(true) * weights[noa + 1];  }  if (value < -45) {    value=0;  } else   if (value > 45) {    value=1;  } else {    value=1 / (1 + Math.exp(-value));  }  return value;}  }
class C{  public void success(JSONObject message){  sendPluginResult(new PluginResult(PluginResult.Status.OK,message));}  }
class C{  @Override public void render(){  Gdx.gl.glClearColor(0,0,0,1);  Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);  shapeRenderer.begin(ShapeType.Point);  shapeRenderer.point(100,100,0);  shapeRenderer.end();}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  protected SVGOMFilterPrimitiveStandardAttributes(){}  }
class C{  public IdRefITCase(String name){  super(name);  addExclusion(Container.TOMCAT6,"testIdRefs");  addExclusion(Container.TOMCAT7,"testIdRefs");  addExclusion(Container.WLS_10_3_4_NO_CLUSTER,"testIdRefs");  addExclusion(Container.TOMCAT6,"testIncludedLoopIdRefs");  addExclusion(Container.TOMCAT7,"testIncludedLoopIdRefs");  addExclusion(Container.WLS_10_3_4_NO_CLUSTER,"testIncludedLoopIdRefs");}  }
class C{  public void update(final String event,final String param3,final String param4){  final String dest=getDestFromEventName(event);  if (dest == null) {    return;  }  type=dest;  param1=param3;  param2=param4;}  }
class C{  public String thresholdTipText(){  return "The threshold option.";}  }
class C{  public ResourceNode(String nodeName,Object object,String eTag,String path){  this.nodeName=nodeName;  this.object=object;  this.eTag=eTag;  this.path=path;}  }
class C{  @Transactional public Boolean updateWorkFlowforObject(final Map workflowparams){  final Criteria workFlowCrit=getCriteriaForDeleteorModify(workflowparams);  for (  final WorkFlowMatrix matrix : (List<WorkFlowMatrix>)workFlowCrit.list()) {    matrix.setToDate(matrix.getToDate() != null ? matrix.getToDate() : workflowparams.get(MODIFYDATE) != null ? (Date)workflowparams.get(MODIFYDATE) : new Date());    if (matrix.getFromDate().equals(matrix.getToDate())) {      return false;    }    workflowMatrixRepository.save(matrix);  }  return true;}  }
class C{  public void println() throws IOException {  out.write(strategy.getPrinterNewline());  newLine=true;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SexecPackage.STEP__CALLER:    return ((InternalEList<?>)getCaller()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public QueryAutoStopWordAnalyzer(Analyzer delegate,IndexReader indexReader,Collection<String> fields,int maxDocFreq) throws IOException {  super(delegate.getReuseStrategy());  this.delegate=delegate;  for (  String field : fields) {    Set<String> stopWords=new HashSet<>();    Terms terms=MultiFields.getTerms(indexReader,field);    CharsRefBuilder spare=new CharsRefBuilder();    if (terms != null) {      TermsEnum te=terms.iterator();      BytesRef text;      while ((text=te.next()) != null) {        if (te.docFreq() > maxDocFreq) {          spare.copyUTF8Bytes(text);          stopWords.add(spare.toString());        }      }    }    stopWordsPerField.put(field,stopWords);  }}  }
class C{  protected void triggerHostToHostCopyServices(final State current,final Set<String> datastores){  for (  String datastore : datastores) {    this.triggerHostToHostCopyService(current,datastore);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdatadeletedatagetlengthanddata.class,args);}  }
class C{  public PolynomialGF2mSmallM modSquareRootMatrix(PolynomialGF2mSmallM[] matrix){  int length=matrix.length;  int[] resultCoeff=new int[length];  for (int i=0; i < length; i++) {    for (int j=0; j < length; j++) {      if (i >= matrix[j].coefficients.length) {        continue;      }      if (j < coefficients.length) {        int scalarTerm=field.mult(matrix[j].coefficients[i],coefficients[j]);        resultCoeff[i]=field.add(resultCoeff[i],scalarTerm);      }    }  }  for (int i=0; i < length; i++) {    resultCoeff[i]=field.sqRoot(resultCoeff[i]);  }  return new PolynomialGF2mSmallM(field,resultCoeff);}  }
class C{  @Override public boolean contains(S2Cell cell){  return contains(cell.id());}  }
class C{  public boolean usesVersionColumnOptimisticLocking(){  return m_usesCascadedOptimisticLocking != null;}  }
class C{  public static final void sort(double[] a,int[] b){  mergesort(a,b,0,a.length - 1);}  }
class C{  protected Bucket<T> createBucket(long bucketKey){  return new Bucket<T>(bucketKey);}  }
class C{  void showMusicott(Stage primaryStage) throws IOException {  mainStage=primaryStage;  VBox navigationLayout=(VBox)loadLayout(NAVIGATION_LAYOUT);  LOG.debug("Navigation layout loaded");  GridPane playerGridPane=(GridPane)loadLayout(PLAYER_LAYOUT);  LOG.debug("Player layout loaded");  AnchorPane playQueuePane=(AnchorPane)loadLayout(PLAYQUEUE_LAYOUT);  getPlayerController().setPlayQueuePane(playQueuePane);  LOG.debug("Play queue layout loaded");  BorderPane rootLayout=(BorderPane)loadLayout(ROOT_LAYOUT);  getRootController().setNavigationPane(navigationLayout);  LOG.debug("Root layout loaded");  BorderPane contentBorderLayout=(BorderPane)rootLayout.lookup("#contentBorderLayout");  contentBorderLayout.setBottom(playerGridPane);  contentBorderLayout.setLeft(navigationLayout);  getNavigationController().setNavigationMode(NavigationMode.ALL_TRACKS);  MusicottMenuBar menuBar=new MusicottMenuBar(mainStage);  String os=System.getProperty("os.name");  if (os != null && os.startsWith("Mac"))   menuBar.macMenuBar(); else {    menuBar.defaultMenuBar();    VBox headerVBox=(VBox)rootLayout.lookup("#headerVBox");    headerVBox.getChildren().add(0,menuBar);  }  navigationLayout.setOnMouseClicked(null);  contentBorderLayout.setOnMouseClicked(null);  rootLayout.setOnMouseClicked(null);  Scene mainScene=new Scene(rootLayout);  mainStage.setScene(mainScene);  mainStage.setTitle("Musicott");  mainStage.getIcons().add(new Image(getClass().getResourceAsStream(MUSICOTT_APP_ICON)));  mainStage.setMinWidth(1200);  mainStage.setMinHeight(805);  mainStage.show();}  }
class C{  public TCNode(TCNode other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetHost()) {    this.host=other.host;  }  this.port=other.port;  this.id=other.id;  if (other.isSetState()) {    this.state=other.state;  }  this.timestamp=other.timestamp;  this.version=other.version;}  }
class C{  protected void seriesReleased(SeriesSelection sel){}  }
class C{  public boolean addDirectedEdge(Node node1,Node node2){  return addEdge(directedEdge(node1,node2));}  }
class C{  public Mpeg2Reader(String filename){  this(new File(filename));}  }
class C{  public BMW512(){  super();}  }
class C{  private DGCImpl(){}  }
class C{  public boolean hasDisplayName(){  return (displayName != null);}  }
class C{  public ScriptSortBuilder sortMode(String sortMode){  this.sortMode=sortMode;  return this;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("Search_InOut_ID"))     p_Search_InOut_ID=para[i].getParameterAsInt(); else     if (name.equals("Search_Order_ID"))     p_Search_Order_ID=para[i].getParameterAsInt(); else     if (name.equals("Search_Invoice_ID"))     p_Search_Invoice_ID=para[i].getParameterAsInt(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public synchronized void rotateAbs(final Point2D p,double theta){  double zx=p.getX(), zy=p.getY();  damageReport();  m_transform.translate(zx,zy);  m_transform.rotate(theta);  m_transform.translate(-zx,-zy);  try {    m_itransform=m_transform.createInverse();  } catch (  Exception e) {  }}  }
class C{  protected InheritValue(){}  }
class C{  private void spillToOffline() throws IOException {  offlinePointWriter=new OfflinePointWriter(tempDir,tempFileNamePrefix,packedBytesLength,longOrds,"spill",0,singleValuePerDoc);  tempInput=offlinePointWriter.out;  PointReader reader=heapPointWriter.getReader(0,pointCount);  for (int i=0; i < pointCount; i++) {    boolean hasNext=reader.next();    assert hasNext;    offlinePointWriter.append(reader.packedValue(),i,heapPointWriter.docIDs[i]);  }  heapPointWriter=null;}  }
class C{  static String convertPath(String path){  if (fileSeparator.length() == 1 && fileSeparator.charAt(0) == '/') {    return path;  }  char[] cs=path.toCharArray();  for (int i=0; i < cs.length; i++) {    if (cs[i] == '/') {      cs[i]='\\';    }  }  String newPath=new String(cs);  return newPath;}  }
class C{  public Builder events(String... events){  this.events=events;  return this;}  }
class C{  public void save(){  preferences.flush();}  }
class C{  void sendHelloMessage(){  connectionController.sendMessage(new WampMessages.HelloMessage(stateController.clientConfig().realm(),stateController.clientConfig().helloDetails()),IWampConnectionPromise.Empty);}  }
class C{  public boolean contains(terminal sym) throws internal_error {  not_null(sym);  return _elements.get(sym.index());}  }
class C{  java.sql.Time toSqlTime(Calendar calendar){  return new java.sql.Time(getTimeInMillis(calendar));}  }
class C{  public Iterator<OutputNode> iterator(){  return new Sequence();}  }
class C{  public void addInterface(SootClass interfaceClass){  checkLevel(HIERARCHY);  if (implementsInterface(interfaceClass.getName()))   throw new RuntimeException("duplicate interface: " + interfaceClass.getName());  interfaces.add(interfaceClass);}  }
class C{  private static void nativeAttachToHead(Element newElement){  Elements.getDocument().getHead().appendChild(newElement);}  }
class C{  public CCFlipX3D(float duration){  this(ccGridSize.ccg(1,1),duration);}  }
class C{  public HalfEdge sym(){  return sym;}  }
class C{  public String toString(){  return name;}  }
class C{  @Override protected void onFinished(final Player player,final boolean successful){  if (successful) {    final Item item=SingletonRepository.getEntityManager().getItem(itemName);    this.notifyWorldAboutChanges();    player.equipOrPutOnGround(item);    player.incHarvestedForItem(itemName,1);    SingletonRepository.getAchievementNotifier().onObtain(player);    player.sendPrivateText("You caught a fish.");  } else {    this.notifyWorldAboutChanges();    player.sendPrivateText("You didn't get a fish.");  }  notifyWorldAboutChanges();}  }
class C{  private void jbInit() throws Exception {  this.setTitle("About");  setResizable(false);  panel1.setLayout(borderLayout1);  panel2.setLayout(borderLayout2);  insetsPanel1.setLayout(flowLayout1);  insetsPanel2.setLayout(flowLayout1);  insetsPanel2.setBorder(BorderFactory.createEmptyBorder(10,10,10,10));  gridLayout1.setRows(5);  gridLayout1.setColumns(1);  labelJTS.setFont(new java.awt.Font("Dialog",1,16));  labelJTS.setForeground(Color.blue);  labelJTS.setText("JTS Topology Suite");  label1.setFont(new java.awt.Font("Dialog",1,20));  label1.setForeground(SystemColor.desktop);  label1.setText("Test Builder");  label2.setText(version);  label3.setText(copyright);  label4.setFont(new java.awt.Font("Dialog",1,12));  label4.setForeground(Color.blue);  label4.setText("");  insetsPanel3.setLayout(gridLayout1);  insetsPanel3.setBorder(BorderFactory.createEmptyBorder(10,60,10,10));  button1.setText("Ok");  button1.addActionListener(this);  insetsPanel2.add(imageLabel,null);  panel2.add(insetsPanel2,BorderLayout.WEST);  this.getContentPane().add(panel1,null);  insetsPanel3.add(labelJTS,null);  insetsPanel3.add(label1,null);  insetsPanel3.add(label2,null);  insetsPanel3.add(label3,null);  insetsPanel3.add(label4,null);  panel2.add(insetsPanel3,BorderLayout.CENTER);  insetsPanel1.add(button1,null);  panel1.add(insetsPanel1,BorderLayout.SOUTH);  panel1.add(panel2,BorderLayout.NORTH);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.ANNOTABLE_ELEMENT___GET_ANNOTATIONS:    return getAnnotations();}return super.eInvoke(operationID,arguments);}  }
class C{  public Interval(Comparable<C> lower,Comparable<C> upper){  setLower(lower);  setUpper(upper);}  }
class C{  public GF2nPolynomialElement power(int k){  if (k == 1) {    return new GF2nPolynomialElement(this);  }  GF2nPolynomialElement result=GF2nPolynomialElement.ONE((GF2nPolynomialField)mField);  if (k == 0) {    return result;  }  GF2nPolynomialElement x=new GF2nPolynomialElement(this);  x.polynomial.expandN((x.mDegree << 1) + 32);  x.polynomial.reduceN();  for (int i=0; i < mDegree; i++) {    if ((k & (1 << i)) != 0) {      result.multiplyThisBy(x);    }    x.square();  }  return result;}  }
class C{  public static int binarySearchFromTo(long[] list,long key,int from,int to){  long midVal;  while (from <= to) {    int mid=(from + to) / 2;    midVal=list[mid];    if (midVal < key)     from=mid + 1; else     if (midVal > key)     to=mid - 1; else     return mid;  }  return -(from + 1);}  }
class C{  public void centerPointOnMap(LatLong latLong,int zoomLevel){  if (zoomLevel == 0) {    mapView.getModel().mapViewPosition.setMapPosition(new MapPosition(latLong,mapView.getModel().mapViewPosition.getZoomLevel()));  } else {    mapView.getModel().mapViewPosition.setMapPosition(new MapPosition(latLong,(byte)zoomLevel));  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean isPointBehindLineOrigin(Vec4 point){  double dot=point.subtract3(this.getOrigin()).dot3(this.getDirection());  return dot < 0.0;}  }
class C{  public StringBody(final String text,final Charset charset) throws UnsupportedEncodingException {  this(text,"text/plain",charset);}  }
class C{  protected FontFace(String familyName){  super(familyName);}  }
class C{  public PooledListIterator<T> reset(){  currentNode=list.head;  return this;}  }
class C{  @Field(14) public __VARIANT_NAME_3_union parray(Pointer<SAFEARRAY> parray){  this.io.setPointerField(this,14,parray);  return this;}  }
class C{  public void testIntValueNegative2(){  byte aBytes[]={-12,56,100};  int result=-771996;  int aNumber=new BigInteger(aBytes).intValue();  assertTrue(aNumber == result);}  }
class C{  public final void process() throws IOException {  final WroConfiguration config=Context.get().getConfig();  cacheSchedulerHelper.scheduleWithPeriod(config.getCacheUpdatePeriod());  modelSchedulerHelper.scheduleWithPeriod(config.getModelUpdatePeriod());  resourceBundleProcessor.serveProcessedBundle();}  }
class C{  public Hashtable determinePoliticalAreas(OMGraphicList graphicList){  if (Debug.debugging("areas")) {    Debug.output("AreaHandler: Determining political areas from OMGraphicList");  }  Hashtable poli_areas=new Hashtable();  return determinePoliticalAreas(graphicList,poli_areas);}  }
class C{  public boolean execute() throws Exception {  boolean result;  Classifier cls;  Classifier code;  int i;  Instances data;  DataSource source;  boolean numeric;  boolean different;  double predClassifier;  double predSource;  result=true;  if (getClassifier() == null)   throw new Exception("No classifier set!");  if (getSourceCode() == null)   throw new Exception("No source code set!");  if (getDataset() == null)   throw new Exception("No dataset set!");  if (!getDataset().exists())   throw new Exception("Dataset '" + getDataset().getAbsolutePath() + "' does not exist!");  source=new DataSource(getDataset().getAbsolutePath());  data=source.getDataSet();  if (getClassIndex() == -1)   data.setClassIndex(data.numAttributes() - 1); else   data.setClassIndex(getClassIndex());  numeric=data.classAttribute().isNumeric();  cls=AbstractClassifier.makeCopy(getClassifier());  cls.buildClassifier(data);  code=getSourceCode();  for (i=0; i < data.numInstances(); i++) {    predClassifier=cls.classifyInstance(data.instance(i));    predSource=code.classifyInstance(data.instance(i));    if (Double.isNaN(predClassifier) && Double.isNaN(predSource)) {      different=false;    } else {      if (numeric)       different=!Utils.eq(predClassifier,predSource); else       different=((int)predClassifier != (int)predSource);    }    if (different) {      result=false;      if (numeric)       System.out.println((i + 1) + ". instance (Classifier/Source code): " + predClassifier+ " != "+ predSource); else       System.out.println((i + 1) + ". instance (Classifier/Source code): " + data.classAttribute().value((int)predClassifier)+ " != "+ data.classAttribute().value((int)predSource));    }  }  return result;}  }
class C{  public static int computeBlockSize(MatrixCharacteristics mc){  int brlen=mc.getRowsPerBlock();  int basic=Math.max((int)(FrameBlock.BUFFER_SIZE / mc.getCols()),1);  int div=(int)Math.ceil((double)brlen / basic);  while (brlen % div != 0)   div++;  return brlen / div;}  }
class C{  public static void printf(String fmt,char x){  System.out.print(new Format(fmt).format(x));}  }
class C{  public static byte binaryToByte(final boolean[] src,final int srcPos,final byte dstInit,final int dstPos,final int nBools){  if ((src.length == 0 && srcPos == 0) || 0 == nBools) {    return dstInit;  }  if (nBools - 1 + dstPos >= 8) {    throw new IllegalArgumentException("nBools-1+dstPos is greather or equal to than 8");  }  byte out=dstInit;  int shift=0;  for (int i=0; i < nBools; i++) {    shift=i + dstPos;    final int bits=(src[i + srcPos] ? 1 : 0) << shift;    final int mask=0x1 << shift;    out=(byte)((out & ~mask) | bits);  }  return out;}  }
class C{  public int size(){  return size;}  }
class C{  public double adjustedRandIndex(){  double d=Math.sqrt(pairconfuse[0] + pairconfuse[1] + pairconfuse[2]+ pairconfuse[3]);  double exp=(pairconfuse[0] + pairconfuse[1]) / d * (pairconfuse[0] + pairconfuse[2]) / d;  double opt=pairconfuse[0] + 0.5 * (pairconfuse[1] + pairconfuse[2]);  return (pairconfuse[0] - exp) / (opt - exp);}  }
class C{  public static boolean fitsInto(double d,int numberBytes){  long l=((Double)d).longValue();  return Parser.getOperandSize(l) <= numberBytes;}  }
class C{  public boolean isCallConnectedWith(ContactId contact){  return (mCallManager.isCallConnectedWith(contact));}  }
class C{  public MonthDay withMonthOfYear(int monthOfYear){  int[] newValues=getValues();  newValues=getChronology().monthOfYear().set(this,MONTH_OF_YEAR,newValues,monthOfYear);  return new MonthDay(this,newValues);}  }
class C{  public String createTempFile(){  try {    boolean inTempDir=readOnly;    String name=databaseName;    if (!persistent) {      name="memFS:" + name;    }    return FileUtils.createTempFile(name,Constants.SUFFIX_TEMP_FILE,true,inTempDir);  } catch (  IOException e) {    throw DbException.convertIOException(e,databaseName);  }}  }
class C{  @ResponseBody @RequestMapping(value="/user",method=RequestMethod.POST) public JsonResponse createUser(@RequestBody JsonInputForAdmin input) throws ServiceException, CheckException {  User user=new User(input.getLogin(),input.getFirstName(),input.getLastName(),input.getOrganization(),input.getEmail(),input.getPassword());  user=this.userService.create(user);  this.gitlabService.createUser(user);  this.jenkinsService.addUser(user);  this.userService.activationAccount(user);  return new HttpOk();}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public static String toString(JSONObject jo) throws JSONException {  StringBuilder sb=new StringBuilder();  sb.append(escape(jo.getString("name")));  sb.append("=");  sb.append(escape(jo.getString("value")));  if (jo.has("expires")) {    sb.append(";expires=");    sb.append(jo.getString("expires"));  }  if (jo.has("domain")) {    sb.append(";domain=");    sb.append(escape(jo.getString("domain")));  }  if (jo.has("path")) {    sb.append(";path=");    sb.append(escape(jo.getString("path")));  }  if (jo.optBoolean("secure")) {    sb.append(";secure");  }  return sb.toString();}  }
class C{  protected boolean isAllWhiteSpace(CharSequence sb){  return StringUtils.isWhitespace(sb);}  }
class C{  private void initPanel(int numLayers){  layerPanel.removeAll();  layerList.clear();  for (int i=numLayers; i > 0; i--) {    LayerCreationPanel layer=new LayerCreationPanel(DEFAULT_NEURON_TYPES,"Layer " + i,5);    if (i == 1) {      layer.setComboBox("Linear");    } else {      layer.setComboBox("Logistic");    }    layerList.add(layer);    layerPanel.add(layer);    layerPanel.add(new JSeparator(SwingConstants.HORIZONTAL));  }  parent.pack();  parent.setLocationRelativeTo(null);}  }
class C{  private void finishEdit(){  this.setVisible(false);}  }
class C{  static void goUncaught(String target,String exceptionName) throws Exception {  goSuspendPolicy(target,true,exceptionName,true,true);  goSuspendPolicy(target,true,exceptionName,false,true);  goSuspendPolicy(target,false,exceptionName,true,false);  goSuspendPolicy(target,false,exceptionName,false,false);}  }
class C{  public static <T>DatabaseTableConfig<T> fromReader(BufferedReader reader) throws SQLException {  DatabaseTableConfig<T> config=new DatabaseTableConfig<T>();  boolean anything=false;  while (true) {    String line;    try {      line=reader.readLine();    } catch (    IOException e) {      throw SqlExceptionUtil.create("Could not read DatabaseTableConfig from stream",e);    }    if (line == null) {      break;    }    if (line.equals(CONFIG_FILE_END_MARKER)) {      break;    }    if (line.equals(CONFIG_FILE_FIELDS_START)) {      readFields(reader,config);      continue;    }    if (line.length() == 0 || line.startsWith("#") || line.equals(CONFIG_FILE_START_MARKER)) {      continue;    }    String[] parts=line.split("=",-2);    if (parts.length != 2) {      throw new SQLException("DatabaseTableConfig reading from stream cannot parse line: " + line);    }    readTableField(config,parts[0],parts[1]);    anything=true;  }  if (anything) {    return config;  } else {    return null;  }}  }
class C{  @RequestMapping(value="/contacts",method=RequestMethod.PUT,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Void> update(@Valid @RequestBody Contact contact) throws URISyntaxException {  log.debug("REST request to update Contact : {}",contact);  if (contact.getId() == null) {    return ResponseEntity.badRequest().header("Failure","An existing must already have an ID").build();  }  contact=contactRepository.save(contact);  return ResponseEntity.ok().build();}  }
class C{  public static String escapeFilterParameter(String parameter){  return parameter.replace("\\","\\\\").replace(",","\\,");}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  void tick(){  m1Rate.tick();  m5Rate.tick();  m15Rate.tick();}  }
class C{  public LatLon(Angle latitude,Angle longitude){  if (latitude == null || longitude == null) {    throw new IllegalArgumentException("Latitude Or Longitude Is Null");  }  this.latitude=latitude;  this.longitude=longitude;}  }
class C{  @Override public String globalInfo(){  return "Discretizes numeric attributes using equal frequency binning," + " where the number of bins is equal to the square root of the" + " number of non-missing values.\n\n"+ "For more information, see:\n\n"+ getTechnicalInformation().toString();}  }
class C{  public void testUndeployP2PIsolatedMode() throws Exception {  processTestUndeployP2PTasks(DeploymentMode.ISOLATED);}  }
class C{  public final String field(){  return field;}  }
class C{  public boolean isInline(){  for (  Label label : registry) {    if (!label.isInline()) {      return false;    }  }  return !registry.isEmpty();}  }
class C{  public static ChartTheme createJFreeTheme(){  return new StandardChartTheme("JFree");}  }
class C{  public MemoryDatabaseHistory(){}  }
class C{  public void paint(Graphics g,Component c){  int x=c.getX();  int y=c.getY();  int width=c.getWidth();  int height=c.getHeight();  if (outerBorder != null) {    if (paintOuterBorderFirst) {      outerBorder.paint(g,x,y,width,height,c);      paint(g,x + thickness,y + thickness,width - thickness * 2,height - thickness * 2,c);    } else {      paint(g,x + thickness,y + thickness,width - thickness * 2,height - thickness * 2,c);      outerBorder.paint(g,x,y,width,height,c);    }  } else {    paint(g,x,y,width,height,c);  }}  }
class C{  public int max(){  if (size() == 0) {    throw new IllegalStateException("cannot find maximum of an empty list");  }  int max=_data[_pos - 1];  for (int i=_pos - 1; i-- > 0; ) {    max=Math.max(max,_data[_pos]);  }  return max;}  }
class C{  public Value readValue(){  int type=data[pos++] & 255;switch (type) {case Value.NULL:    return ValueNull.INSTANCE;case BOOLEAN_TRUE:  return ValueBoolean.get(true);case BOOLEAN_FALSE:return ValueBoolean.get(false);case INT_NEG:return ValueInt.get(-readVarInt());case Value.INT:return ValueInt.get(readVarInt());case LONG_NEG:return ValueLong.get(-readVarLong());case Value.LONG:return ValueLong.get(readVarLong());case Value.BYTE:return ValueByte.get(readByte());case Value.SHORT:return ValueShort.get(readShortInt());case DECIMAL_0_1:return (ValueDecimal)ValueDecimal.ZERO;case DECIMAL_0_1 + 1:return (ValueDecimal)ValueDecimal.ONE;case DECIMAL_SMALL_0:return ValueDecimal.get(BigDecimal.valueOf(readVarLong()));case DECIMAL_SMALL:{int scale=readVarInt();return ValueDecimal.get(BigDecimal.valueOf(readVarLong(),scale));}case Value.DECIMAL:{int scale=readVarInt();int len=readVarInt();byte[] buff=DataUtils.newBytes(len);read(buff,0,len);BigInteger b=new BigInteger(buff);return ValueDecimal.get(new BigDecimal(b,scale));}case LOCAL_DATE:{return ValueDate.fromDateValue(readVarLong());}case Value.DATE:{long x=readVarLong() * MILLIS_PER_MINUTE;return ValueDate.fromMillis(DateTimeUtils.getTimeUTCWithoutDst(x));}case LOCAL_TIME:{long nanos=readVarLong() * 1000000 + readVarLong();return ValueTime.fromNanos(nanos);}case Value.TIME:return ValueTime.fromMillis(DateTimeUtils.getTimeUTCWithoutDst(readVarLong()));case LOCAL_TIMESTAMP:{long dateValue=readVarLong();long nanos=readVarLong() * 1000000 + readVarLong();return ValueTimestamp.fromDateValueAndNanos(dateValue,nanos);}case Value.TIMESTAMP:{return ValueTimestamp.fromMillisNanos(DateTimeUtils.getTimeUTCWithoutDst(readVarLong()),readVarInt());}case Value.TIMESTAMP_TZ:{long dateValue=readVarLong();long nanos=readVarLong();short tz=(short)readVarInt();return ValueTimestampTimeZone.fromDateValueAndNanos(dateValue,nanos,tz);}case Value.BYTES:{int len=readVarInt();byte[] b=DataUtils.newBytes(len);read(b,0,len);return ValueBytes.getNoCopy(b);}case Value.GEOMETRY:{int len=readVarInt();byte[] b=DataUtils.newBytes(len);read(b,0,len);return ValueGeometry.get(b);}case Value.JAVA_OBJECT:{int len=readVarInt();byte[] b=DataUtils.newBytes(len);read(b,0,len);return ValueJavaObject.getNoCopy(null,b,handler);}case Value.UUID:return ValueUuid.get(readLong(),readLong());case Value.STRING:return ValueString.get(readString());case Value.STRING_IGNORECASE:return ValueStringIgnoreCase.get(readString());case Value.STRING_FIXED:return ValueStringFixed.get(readString());case FLOAT_0_1:return ValueFloat.get(0);case FLOAT_0_1 + 1:return ValueFloat.get(1);case DOUBLE_0_1:return ValueDouble.get(0);case DOUBLE_0_1 + 1:return ValueDouble.get(1);case Value.DOUBLE:return ValueDouble.get(Double.longBitsToDouble(Long.reverse(readVarLong())));case Value.FLOAT:return ValueFloat.get(Float.intBitsToFloat(Integer.reverse(readVarInt())));case Value.BLOB:case Value.CLOB:{int smallLen=readVarInt();if (smallLen >= 0) {byte[] small=DataUtils.newBytes(smallLen);read(small,0,smallLen);return ValueLobDb.createSmallLob(type,small);} else if (smallLen == -3) {int tableId=readVarInt();long lobId=readVarLong();long precision=readVarLong();ValueLobDb lob=ValueLobDb.create(type,handler,tableId,lobId,null,precision);return lob;} else {int tableId=readVarInt();int objectId=readVarInt();long precision=0;boolean compression=false;if (smallLen == -1 || smallLen == -2) {precision=readVarLong();compression=readByte() == 1;}if (smallLen == -2) {String filename=readString();return ValueLob.openUnlinked(type,handler,tableId,objectId,precision,compression,filename);}return ValueLob.openLinked(type,handler,tableId,objectId,precision,compression);}}case Value.ARRAY:{int len=readVarInt();Value[] list=new Value[len];for (int i=0; i < len; i++) {list[i]=readValue();}return ValueArray.get(list);}case Value.RESULT_SET:{SimpleResultSet rs=new SimpleResultSet();rs.setAutoClose(false);int columns=readVarInt();for (int i=0; i < columns; i++) {rs.addColumn(readString(),readVarInt(),readVarInt(),readVarInt());}while (true) {if (readByte() == 0) {break;}Object[] o=new Object[columns];for (int i=0; i < columns; i++) {o[i]=readValue().getObject();}rs.addRow(o);}return ValueResultSet.get(rs);}default :if (type >= INT_0_15 && type < INT_0_15 + 16) {return ValueInt.get(type - INT_0_15);} else if (type >= LONG_0_7 && type < LONG_0_7 + 8) {return ValueLong.get(type - LONG_0_7);} else if (type >= BYTES_0_31 && type < BYTES_0_31 + 32) {int len=type - BYTES_0_31;byte[] b=DataUtils.newBytes(len);read(b,0,len);return ValueBytes.getNoCopy(b);} else if (type >= STRING_0_31 && type < STRING_0_31 + 32) {return ValueString.get(readString(type - STRING_0_31));}throw DbException.get(ErrorCode.FILE_CORRUPTED_1,"type: " + type);}}  }
class C{  public String toString(MediaType type){  if (type == null) {    throw new IllegalArgumentException("MediaType can not be null");  }  return type.getType() + '/' + type.getSubtype();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private static COperandTree convert(final INaviModule module,final ReilOperand operand){  final COperandTreeNode rootNode=module.createOperandExpression(toDatabaseString(operand.getSize()),ExpressionType.SIZE_PREFIX);  final COperandTreeNode childNode=module.createOperandExpression(operand.getValue(),getType(operand));  COperandTreeNode.link(rootNode,childNode);  return module.createOperand(rootNode);}  }
class C{  private NotRule(final Rule rule){  super();  this.rule=rule;}  }
class C{  @Override public void start(){  if (log.isInfoEnabled())   log.info("Starting collection.");  installShutdownHook();}  }
class C{  public void addCatch(char startPc,char endPc,char handlerPc,char catchType){  catchInfo.append(new char[]{startPc,endPc,handlerPc,catchType});}  }
class C{  public void add(TwoDNode dn){  if (inProgress) {    throw new ConcurrentModificationException("Can't add point while iterator in progress");  }  nodes.add(dn);}  }
class C{  private CaseInsensitiveLexicalOrderImpl(int fromIndex){  this.fromIndex=fromIndex;}  }
class C{  @Override public boolean equals(Object otherRule){  if (otherRule == this) {    return true;  }  if (otherRule instanceof ZoneOffsetTransitionRule) {    ZoneOffsetTransitionRule other=(ZoneOffsetTransitionRule)otherRule;    return month == other.month && dom == other.dom && dow == other.dow && timeDefinition == other.timeDefinition && time.equals(other.time) && timeEndOfDay == other.timeEndOfDay && standardOffset.equals(other.standardOffset) && offsetBefore.equals(other.offsetBefore) && offsetAfter.equals(other.offsetAfter);  }  return false;}  }
class C{  public void addColumn(Column column){  data.columns.add(column);}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public void testMyLocation(){  EndToEndTestUtils.deleteAllTracks();  EndToEndTestUtils.createSimpleTrack(1,false);  View myLocation=EndToEndTestUtils.SOLO.getCurrentActivity().findViewById(R.id.map_my_location);  EndToEndTestUtils.SOLO.clickOnView(myLocation);  instrumentation.waitForIdleSync();  if (EndToEndTestUtils.isEmulator) {    EndToEndTestUtils.SOLO.waitForText(GoogleLocationUtils.getGpsDisabledMyLocationMessage(trackListActivity),1,EndToEndTestUtils.SHORT_WAIT_TIME);  } else {  }}  }
class C{  public static int codeMax(int B,int H,int S,int nMax){  long range=codeRangeLong(B,H,nMax);  if (range == 0)   return -1;  if (S == 0 || range >= (long)1 << 32)   return saturate32(range - 1);  long maxPos=range - 1;  while (isNegativeCode(maxPos,S)) {    --maxPos;  }  if (maxPos < 0)   return -1;  int smax=decodeSign32(maxPos,S);  if (smax < 0)   return Integer.MAX_VALUE;  return smax;}  }
class C{  public EntryStream<K,V> removeKeys(Predicate<? super K> keyPredicate){  return filterKeys(keyPredicate.negate());}  }
class C{  public int session(){  return Integer.parseInt(fields[5]);}  }
class C{  public Zipper<A> forwards(int steps) throws NoSuchElementException {  return toPosition(position + steps);}  }
class C{  public Base64(final boolean urlSafe){  this(MIME_CHUNK_SIZE,CHUNK_SEPARATOR,urlSafe);}  }
class C{  private void printDocument(PrintJobId jobId,URL clientURL,URL printerURL,FileDescriptor fd){  try {    CupsClient client=new CupsClient(clientURL);    CupsPrinter printer=client.getPrinter(printerURL);    InputStream is=new FileInputStream(fd);    org.cups4j.PrintJob job=new org.cups4j.PrintJob.Builder(is).build();    PrintRequestResult result=printer.print(job);    mJobs.put(jobId,result.getJobId());  } catch (  Exception e) {    Log.e(CupsPrintApp.LOG_TAG,"Couldn't send file descriptor: " + fd + " to printer because: "+ e);  }}  }
class C{  public Locale read(String locale) throws Exception {  String[] list=pattern.split(locale);  if (list.length < 1) {    throw new InvalidFormatException("Invalid locale %s",locale);  }  return read(list);}  }
class C{  private int assertPivotCountsAreCorrect(String pivotName,SolrParams baseParams,PivotField constraint) throws SolrServerException {  SolrParams p=SolrParams.wrapAppended(baseParams,params("fq",buildFilter(constraint)));  List<PivotField> subPivots=null;  try {    assertPivotData(pivotName,constraint,p);    subPivots=constraint.getPivot();  } catch (  Exception e) {    throw new RuntimeException(pivotName + ": count query failed: " + p+ ": "+ e.getMessage(),e);  }  int depth=0;  if (null != subPivots) {    assertTraceOk(pivotName,baseParams,subPivots);    for (    PivotField subPivot : subPivots) {      depth=assertPivotCountsAreCorrect(pivotName,p,subPivot);    }  }  return depth + 1;}  }
class C{  @Override public final void requestDestroy(){  destroy();}  }
class C{  public boolean onSearchRequested(){  final SearchManager searchManager=(SearchManager)mContext.getSystemService(Context.SEARCH_SERVICE);  final ComponentName appName=getAssociatedActivity();  if (appName != null && searchManager.getSearchableInfo(appName) != null) {    searchManager.startSearch(null,false,appName,null,false);    dismiss();    return true;  } else {    return false;  }}  }
class C{  public boolean isDoubleSupported(){  return isDoubleSupportedKHR() || isDoubleSupportedAMD();}  }
class C{  public JSONObject offlineDetect(byte[] image,String jsonResult) throws FaceppParseException {  return offlineDetect(image,jsonResult,this.params);}  }
class C{  private void writeStuffed(byte[] b,int off,int len) throws IOException {  int n=off + len;  for (int i=off; i < n; i++) {    if (b[i] == -1) {      out.write(b,off,i - off + 1);      out.write(0);      off=i + 1;    }  }  if (n - off > 0) {    out.write(b,off,n - off);  }}  }
class C{  private void initResourcesIfNecessary(){  if (centerDrawable == null) {    centerDrawable=getContext().getResources().getDrawable(wheelForeground);  }  if (topShadow == null) {    topShadow=new GradientDrawable(Orientation.TOP_BOTTOM,SHADOWS_COLORS);  }  if (bottomShadow == null) {    bottomShadow=new GradientDrawable(Orientation.BOTTOM_TOP,SHADOWS_COLORS);  }  setBackgroundResource(wheelBackground);}  }
class C{  public List<IComment> appendLocalComment(final String comment) throws com.google.security.zynamics.binnavi.API.disassembly.CouldntSaveDataException, com.google.security.zynamics.binnavi.API.disassembly.CouldntLoadDataException {  try {    return m_edge.appendLocalComment(comment);  } catch (  final CouldntSaveDataException exception) {    throw new com.google.security.zynamics.binnavi.API.disassembly.CouldntSaveDataException(exception);  }catch (  final CouldntLoadDataException exception) {    throw new com.google.security.zynamics.binnavi.API.disassembly.CouldntLoadDataException(exception);  }}  }
class C{  public void testPrimitiveArrays() throws Exception {  try {    useCache=true;    mode=PARTITIONED;    Ignite g1=startGrid(1);    startGrid(2);    List<Object> arrays=Arrays.<Object>asList(new byte[]{1},new boolean[]{true,false},new char[]{2,3},new short[]{3,4},new int[]{4,5},new long[]{5,6},new float[]{6,7},new double[]{7,8});    IgniteDataStreamer<Object,Object> dataLdr=g1.dataStreamer(null);    for (int i=0, size=arrays.size(); i < 1000; i++) {      Object arr=arrays.get(i % size);      dataLdr.addData(i,arr);      dataLdr.addData(i,fixedClosure(arr));    }    dataLdr.close(false);  }  finally {    stopAllGrids();  }}  }
class C{  public void value(int v){  set=true;  this.value=v;}  }
class C{  public void update(long dt,float dAngle,float ratioY){  float d=dt * dAngle;  isCalmedDown=true;  for (  GLWave wave : waves) {    wave.update(d);    isCalmedDown&=wave.isCalmedDown();  }  usedBubbles.addAll(producedBubbles);  producedBubbles.clear();  Iterator<GLBubble> iterator=usedBubbles.iterator();  while (iterator.hasNext()) {    GLBubble bubble=iterator.next();    bubble.update(dt,ratioY);    if (bubble.isOffScreen()) {      unusedBubbles.add(bubble);      iterator.remove();    }  }}  }
class C{  public boolean acceptCall(BluetoothDevice device,int flag){  if (DBG)   log("acceptCall()");  if (mService != null && isEnabled() && isValidDevice(device)) {    try {      return mService.acceptCall(device,flag);    } catch (    RemoteException e) {      Log.e(TAG,Log.getStackTraceString(new Throwable()));    }  }  if (mService == null)   Log.w(TAG,"Proxy not attached to service");  return false;}  }
class C{  public static File locatePluginFile(String path){  Bundle bundle=Platform.getBundle(CheckerPlugin.PLUGIN_ID);  Path checkersJAR=new Path(path);  URL checkersJarURL;  try {    checkersJarURL=FileLocator.toFileURL(FileLocator.find(bundle,checkersJAR,null));  } catch (  IOException e) {    throw new RuntimeException("Exception locating plugin on path: " + path,e);  }catch (  NullPointerException npe) {    throw new RuntimeException("Bundle= " + bundle + " ID="+ CheckerPlugin.PLUGIN_ID+ " checkerJar="+ checkersJAR,npe);  }  File checkersJarFile;  try {    checkersJarFile=new File(checkersJarURL.toURI());  } catch (  URISyntaxException e) {    checkersJarFile=new File(checkersJarURL.getPath());  }  return checkersJarFile;}  }
class C{  public void updateAsLive(final String nodeId,final TopologyMemberImpl memberInput){synchronized (this) {    if (logger.isDebugEnabled()) {      logger.debug(this + "::node " + nodeId+ "="+ memberInput);    }    memberInput.setUniqueEventID(System.currentTimeMillis());    topology.remove(nodeId);    topology.put(nodeId,memberInput);    sendMemberUp(nodeId,memberInput);  }}  }
class C{  public boolean isLandscape(){  Object oo=get_Value(COLUMNNAME_IsLandscape);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private RDORole findOrCreateRole(RDOUserFees userFees,String roleId,int parentEntryNr){  RDORole priceModelRole=userFees.getRole(roleId);  if (priceModelRole == null) {    priceModelRole=new RDORole();    priceModelRole.setParentEntryNr(parentEntryNr);    priceModelRole.setEntryNr(sequence.nextValue());    priceModelRole.setRoleId(roleId);    userFees.getRoles().add(priceModelRole);  }  return priceModelRole;}  }
class C{  private void rollover() throws IOException {  close();  mFileRolloverCounter++;  updateFileName();  open();}  }
class C{  public void enableButtons(boolean enable){}  }
class C{  public MqttIdentifierRejectedException(String message){  super(message);}  }
class C{  public boolean isInTransit(){  Object oo=get_Value(COLUMNNAME_IsInTransit);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private boolean isNoiseWord(String term){  int len=term.length();  if (minWordLen > 0 && len < minWordLen) {    return true;  }  if (maxWordLen > 0 && len > maxWordLen) {    return true;  }  return stopWords != null && stopWords.contains(term);}  }
class C{  public final void put(String key,int value){  if ((m_firstFree + 1) >= m_mapSize) {    m_mapSize+=m_blocksize;    String newMap[]=new String[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;    int newValues[]=new int[m_mapSize];    System.arraycopy(m_values,0,newValues,0,m_firstFree + 1);    m_values=newValues;  }  m_map[m_firstFree]=key;  m_values[m_firstFree]=value;  m_firstFree++;}  }
class C{  private void createApplicationRolesProperties(){  if (!getUsers().isEmpty()) {    StringBuilder rolesToken=new StringBuilder("# JBoss application-roles.properties file generated by CARGO\n");    for (    User user : getUsers()) {      rolesToken.append(user.getName());      rolesToken.append("=");      for (      String role : user.getRoles()) {        rolesToken.append(role);        rolesToken.append(",");      }      rolesToken.append('\n');    }    getFileHandler().writeTextFile(getFileHandler().append(getHome(),"/configuration/application-roles.properties"),rolesToken.toString(),"UTF-8");  }}  }
class C{  public static int length(RegExp re){  RegExp2 r;switch (re.type) {case sym.BAR:{      r=(RegExp2)re;      int l1=length(r.r1);      if (l1 < 0)       return -1;      int l2=length(r.r2);      if (l1 == l2)       return l1; else       return -1;    }case sym.CONCAT:{    r=(RegExp2)re;    int l1=length(r.r1);    if (l1 < 0)     return -1;    int l2=length(r.r2);    if (l2 < 0)     return -1;    return l1 + l2;  }case sym.STAR:case sym.PLUS:case sym.QUESTION:return -1;case sym.CCLASS:case sym.CCLASSNOT:case sym.CHAR:case sym.CHAR_I:return 1;case sym.STRING:case sym.STRING_I:{String content=(String)((RegExp1)re).content;return content.length();}case sym.TILDE:case sym.BANG:return -1;case sym.MACROUSE:return length(macros.getDefinition((String)((RegExp1)re).content));}throw new Error("Unkown expression type " + re.type + " in "+ re);}  }
class C{  public void fsync() throws IOException {  flush();}  }
class C{  public boolean isClearWhitespaceLinesEnabled(){  return clearWhitespaceLines;}  }
class C{  public static SwapContainer initializeSwapContainer(SwapContainer container,DbClient dbClient){  VirtualArray srcVarray=container.getSrcVarray();  VirtualPool srcVpool=dbClient.queryObject(VirtualPool.class,container.getSrcVpool().getId());  VirtualArray haVarray=container.getHaVarray();  VirtualPool haVpool=container.getHaVpool();  if (VirtualPool.isRPVPlexProtectHASide(srcVpool)) {    haVarray=dbClient.queryObject(VirtualArray.class,URI.create(srcVpool.getHaVarrayConnectedToRp()));    _log.info(String.format("Source Vpool[%s] indicates that we should use HA Varray[%s] as RP Source.",srcVpool.getLabel(),haVarray.getLabel()));    String haVpoolId=srcVpool.getHaVarrayVpoolMap().get(srcVpool.getHaVarrayConnectedToRp());    if (haVpoolId != null && !haVpoolId.isEmpty() && !haVpoolId.equals(NullColumnValueGetter.getNullStr())) {      haVpool=dbClient.queryObject(VirtualPool.class,URI.create(haVpoolId));      _log.info(String.format("HA Vpool has been defined [%s]",haVpool.getLabel()));      haVpool.setProtectionVarraySettings(srcVpool.getProtectionVarraySettings());      haVpool.setRpCopyMode(srcVpool.getRpCopyMode());      haVpool.setRpRpoType(srcVpool.getRpRpoType());      haVpool.setRpRpoValue(srcVpool.getRpRpoValue());      haVpool.setMultivolumeConsistency(srcVpool.getMultivolumeConsistency());      haVpool.setHighAvailability(srcVpool.getHighAvailability());      haVpool.setMetroPoint(srcVpool.getMetroPoint());      haVpool.setHaVarrayConnectedToRp(srcVarray.getId().toString());      haVpool.setJournalSize(NullColumnValueGetter.isNotNullValue(srcVpool.getJournalSize()) ? srcVpool.getJournalSize() : null);    } else {      _log.info(String.format("HA Vpool has not been defined, using Source Vpool[%s].",srcVpool.getLabel()));      haVpool=srcVpool;    }    StringMap haVarrayVpoolMap=new StringMap();    haVarrayVpoolMap.put(srcVarray.getId().toString(),srcVpool.getId().toString());    haVpool.setHaVarrayVpoolMap(haVarrayVpoolMap);    _log.info(String.format("HA Varray[%s] and HA Vpool[%s] will be used as Source Varray and Source Vpool.",haVarray.getLabel(),haVpool.getLabel()));    _log.info(String.format("Source Varray[%s] and Source Vpool[%s] will be used as HA Varray and HA Vpool.",srcVarray.getLabel(),srcVpool.getLabel()));    VirtualArray tempVarray=srcVarray;    VirtualPool tempVpool=srcVpool;    container.setSrcVarray(haVarray);    container.setSrcVpool(haVpool);    container.setHaVarray(tempVarray);    container.setHaVpool(tempVpool);  }  return container;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case GamlPackage.SASSIGNMENT__VALUE:    return value != null;}return super.eIsSet(featureID);}  }
class C{  public Object clone() throws CloneNotSupportedException {  UnionPathIterator clone=(UnionPathIterator)super.clone();  if (m_iterators != null) {    int n=m_iterators.length;    clone.m_iterators=new DTMIterator[n];    for (int i=0; i < n; i++) {      clone.m_iterators[i]=(DTMIterator)m_iterators[i].clone();    }  }  return clone;}  }
class C{  public void open(InputStream in) throws IOException {  model.setBytes(in);}  }
class C{  public SolrQuery addDateRangeFacet(String field,Date start,Date end,String gap){  add(FacetParams.FACET_RANGE,field);  add(String.format(Locale.ROOT,"f.%s.%s",field,FacetParams.FACET_RANGE_START),DateUtil.getThreadLocalDateFormat().format(start));  add(String.format(Locale.ROOT,"f.%s.%s",field,FacetParams.FACET_RANGE_END),DateUtil.getThreadLocalDateFormat().format(end));  add(String.format(Locale.ROOT,"f.%s.%s",field,FacetParams.FACET_RANGE_GAP),gap);  this.set(FacetParams.FACET,true);  return this;}  }
class C{  public static boolean isEquals(Object actual,Object expected){  return actual == expected || (actual == null ? expected == null : actual.equals(expected));}  }
class C{  public void readFromPacketNBT(NBTTagCompound nbt){  this.readFromNBT(nbt);}  }
class C{  protected void processWhiteSpace(int pos,int endPos){  if (scannerDebug)   System.out.println("processWhitespace(" + pos + ","+ endPos+ ")=|"+ new String(reader.getRawCharacters(pos,endPos))+ "|");}  }
class C{  public void exit(){  checkSocket();  this.socket.sendTextMessage("exit");}  }
class C{  public static void print(int[][] m){  System.out.println("Employee     Weekly Hours");  System.out.println("-------------------------");  for (int row=0; row < m.length; row++) {    System.out.printf("%4d%16d\n",m[row][0],totalHours[row][1]);  }}  }
class C{  public E sample(Random rand){  double total=totalCount();  if (total <= 0.0) {    throw new RuntimeException(String.format("Attempting to sample() with totalCount() %.3f\n",total));  }  double sum=0.0;  double r=rand.nextDouble();  for (  Map.Entry<E,Double> entry : entries.entrySet()) {    double count=entry.getValue();    double frac=count / total;    sum+=frac;    if (r < sum) {      return entry.getKey();    }  }  throw new IllegalStateException("Shoudl've have returned a sample by now....");}  }
class C{  public TSPInstance(){  super();  tours=new ArrayList<Tour>();}  }
class C{  public ReorderingTypes forwardOrientation(SampledRule rule){  final int f1=rule.srcStartInclusive - 1, f2=rule.srcEndExclusive, e1=rule.tgtStartInclusive - 1;  final boolean connectedMonotone=isPhraseAligned(rule,e1,f1,RelativePos.NW);  final boolean connectedSwap=isPhraseAligned(rule,e1,f2,RelativePos.NE);  if (connectedMonotone && !connectedSwap)   return ReorderingTypes.monotone;  if (!connectedMonotone && connectedSwap)   return ReorderingTypes.swap;  return ReorderingTypes.discont1;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override protected int waitForCompletionTimeout(){  if (entry.getLabel().startsWith("guest-scan-")) {    return 800 * 1000;  } else   if (entry.getLabel().startsWith("preliminary-meta-")) {    return 30 * 1000;  } else {    return super.waitForCompletionTimeout();  }}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public QueryInvocationTargetException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public static String previous(CharSequence self){  StringBuilder buffer=new StringBuilder(self);  if (buffer.length() == 0)   throw new IllegalArgumentException("the string is empty");  char last=buffer.charAt(buffer.length() - 1);  if (last == Character.MIN_VALUE) {    buffer.deleteCharAt(buffer.length() - 1);  } else {    char next=last;    next--;    buffer.setCharAt(buffer.length() - 1,next);  }  return buffer.toString();}  }
class C{  @Override public synchronized void run(){  long terminationDelay=Integer.getInteger(StackProperties.TERMINATION_DELAY,DEFAULT_TERMINATION_DELAY);  if (terminationDelay >= 0) {    try {      wait(terminationDelay);    } catch (    InterruptedException ie) {      logger.log(Level.FINEST,"Interrupted while waiting. Will " + "speed up termination",ie);    }  }  terminate(IceProcessingState.TERMINATED);synchronized (terminationThreadSyncRoot) {    terminationThread=null;  }}  }
class C{  @Override public synchronized void invalidate(String key,boolean fullExpire){  Entry entry=get(key);  if (entry != null) {    entry.softTtl=0;    if (fullExpire) {      entry.ttl=0;    }    put(key,entry);  }}  }
class C{  public static Address mmap(Address address,Extent size,int prot,int flags){  if (VM.VerifyAssertions) {    VM._assert(isPageAligned(address) && isPageMultiple(size));  }  return SysCall.sysCall.sysMMapErrno(address,size,prot,flags,-1,Offset.zero());}  }
class C{  protected void registerListViewAttributes(){  addAttributeProcessor(new FooterLmlAttribute(),"footer");  addAttributeProcessor(new HeaderLmlAttribute(),"header");  addAttributeProcessor(new ItemClickListenerLmlAttribute(),"itemListener","itemClickListener");}  }
class C{  public void add(ExampleSetBasedIndividual individual){  individuals.add(individual);}  }
class C{  private boolean check2NodesReourceAllocation(NodeHardwareInfoRestRep myBaseRep,NodeHardwareInfoRestRep compareRep){  for (  Map.Entry<NodeHardwareInfoType,Float> baseEntry : myBaseRep.getHardwareInfos().entrySet()) {    float diff=Math.abs(baseEntry.getValue() - compareRep.getHardwareInfos().get(baseEntry.getKey()));    if (diff > (baseEntry.getValue() * epsillonRatio)) {      _log.info("Resource allocation imbalance, base {} compare {}",myBaseRep.toString(),compareRep.toString());      return false;    }  }  return true;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementgetelementsbytagnamenomatch.class,args);}  }
class C{  private void updateServerBucketProfile(){  int bucketId=this.getBucket().getId();  Set<ServerBucketProfile> serverProfiles=newSetFromMap(new HashMap<ServerBucketProfile,Boolean>());  for (  Profile p : this.profiles) {    if (p instanceof ServerBucketProfile) {      serverProfiles.add((ServerBucketProfile)p);    }  }  this.regionAdvisor.setClientBucketProfiles(bucketId,serverProfiles);}  }
class C{  public boolean logout() throws LoginException {  roles=null;  name=null;  return true;}  }
class C{  public static byte[] decodeWebSafe(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decodeWebSafe(bytes,0,bytes.length);}  }
class C{  public MessageBuilder withContent(String content){  this.content="";  return appendContent(content);}  }
class C{  public long skip(long n) throws IOException {  if (n == 0)   return 0;  if (in == null)   in=owner.readNotify();  return in.skip(n);}  }
class C{  protected DefaultTriggerImpl(){  super();}  }
class C{  static void checkMethodIdentifier(int version,final String name,final String msg){  if (name == null || name.length() == 0) {    throw new IllegalArgumentException("Invalid " + msg + " (must not be null or empty)");  }  if ((version & 0xFFFF) >= Opcodes.V1_5) {    for (int i=0; i < name.length(); ++i) {      if (".;[/<>".indexOf(name.charAt(i)) != -1) {        throw new IllegalArgumentException("Invalid " + msg + " (must be a valid unqualified name): "+ name);      }    }    return;  }  if (!Character.isJavaIdentifierStart(name.charAt(0))) {    throw new IllegalArgumentException("Invalid " + msg + " (must be a '<init>', '<clinit>' or a valid Java identifier): "+ name);  }  for (int i=1; i < name.length(); ++i) {    if (!Character.isJavaIdentifierPart(name.charAt(i))) {      throw new IllegalArgumentException("Invalid " + msg + " (must be '<init>' or '<clinit>' or a valid Java identifier): "+ name);    }  }}  }
class C{  public static double rawProbability(double x,double lambda){  if (lambda == 0) {    return ((x == 0) ? 1. : 0.);  }  if (Double.isInfinite(lambda) || x < 0) {    return 0.;  }  if (x <= lambda * Double.MIN_NORMAL) {    return Math.exp(-lambda);  }  if (lambda < x * Double.MIN_NORMAL) {    double r=-lambda + x * Math.log(lambda) - GammaDistribution.logGamma(x + 1);    return Math.exp(r);  }  final double f=MathUtil.TWOPI * x;  final double y=-stirlingError(x) - devianceTerm(x,lambda);  return Math.exp(y) / Math.sqrt(f);}  }
class C{  public CommandLine add(List<String> args){  if (args != null && !args.isEmpty()) {    arguments.addAll(args);  }  return this;}  }
class C{  public Period(long startInstant,long endInstant,Chronology chrono){  super(startInstant,endInstant,null,chrono);}  }
class C{  public PhoneNumberFormattingTextWatcher(){  this(Locale.getDefault().getCountry());}  }
class C{  public Interest(String interest){  super(interest);}  }
class C{  public static <P,T extends AsyncTask<P,?,?>>void execute(T task){  execute(task,(P[])null);}  }
class C{  public void put(String key,int value){  if (key != null) {    urlParams.put(key,String.valueOf(value));  }}  }
class C{  @Deprecated public Long addRoom(String SID,String name,Long roomtypes_id,String comment,Long numberOfPartizipants,Boolean ispublic,Integer videoPodWidth,Integer videoPodHeight,Integer videoPodXPosition,Integer videoPodYPosition,Integer moderationPanelXPosition,Boolean showWhiteBoard,Integer whiteBoardPanelXPosition,Integer whiteBoardPanelYPosition,Integer whiteBoardPanelHeight,Integer whiteBoardPanelWidth,Boolean showFilesPanel,Integer filesPanelXPosition,Integer filesPanelYPosition,Integer filesPanelHeight,Integer filesPanelWidth){  try {    Long users_id=sessionManagement.checkSession(SID);    Long user_level=userManagement.getUserLevelByID(users_id);    return roommanagement.addRoom(user_level,name,roomtypes_id,comment,numberOfPartizipants,ispublic,null,false,false,null,false,null,true,false,false,"","","",null,null,null,false,false,false,false,false,false,false,false);  } catch (  Exception err) {    log.error("[addRoom] ",err);  }  return new Long(-1);}  }
class C{  int parseNumber(String source,int ofs,String name,int min,int max) throws ParseException {  if (source == null) {    throwInvalid(name,ofs);  }  int v=-1;  try {    v=Integer.parseInt(source);  } catch (  NumberFormatException nfe) {    throwInvalid(name,ofs);  }  if (min != max) {    validateNumber(v,ofs,name,min,max);  }  return v;}  }
class C{  public void testOptimisticOffheapMixed() throws Exception {  testTransactionMixed(cacheOffheap,OPTIMISTIC,KEY_1,wrap(1),KEY_2,1);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void initImagesComboBox(JComboBox cb,final EditableResources res,boolean asString,final boolean includeNull){  initImagesComboBox(cb,res,asString,includeNull,false);}  }
class C{  public int splitByDistance(ArrayModifiableDBIDs ind,int begin,int end,DoubleDataStore tpro,Random rand){  DBIDArrayIter it=ind.iter();  double rmin=Double.MAX_VALUE * .5, rmax=-Double.MAX_VALUE * .5;  int minInd=begin, maxInd=end - 1;  for (it.seek(begin); it.getOffset() < end; it.advance()) {    double currEle=tpro.doubleValue(it);    rmin=Math.min(currEle,rmin);    rmax=Math.max(currEle,rmax);  }  if (rmin != rmax) {    double rs=rmin + rand.nextDouble() * (rmax - rmin);    while (minInd < maxInd) {      double currEle=tpro.doubleValue(it.seek(minInd));      if (currEle > rs) {        while (minInd < maxInd && tpro.doubleValue(it.seek(maxInd)) > rs) {          maxInd--;        }        if (minInd == maxInd) {          break;        }        ind.swap(minInd,maxInd);        maxInd--;      }      minInd++;    }  } else {    minInd=(begin + end) >>> 1;  }  return minInd;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Integer(stack.getUIMgrSafe().getVideoFrame().getDVDTotalAngles());}  }
class C{  private String printDFormat(long x){  return printDFormat(Long.toString(x));}  }
class C{  public LetterView(Context context,AttributeSet attrs){  super(context,attrs);  init();}  }
class C{  public IteratorSpliterator(Iterator<? extends T> iterator,long size,int characteristics){  this.collection=null;  this.it=iterator;  this.est=size;  this.characteristics=(characteristics & Spliterator.CONCURRENT) == 0 ? characteristics | Spliterator.SIZED | Spliterator.SUBSIZED : characteristics;}  }
class C{  public IllegalFunctionRequest(int unit,int function){  setUnitID(unit);  setFunctionCode(function);}  }
class C{  public void initializeLocalInstructionComment(final Instruction instruction,final List<IComment> comments){  m_node.getComments().initializeLocalInstructionComment(instruction.getNative(),comments);}  }
class C{  private void initialize(){  time_low=0;  time_mid=0;  time_hi_and_version=0;  clock_seq_low=0;  clock_seq_hi_and_reserved=0;  for (int j=0; j < node.length; j++) {    node[j]=0x00;  }}  }
class C{  @Override protected StringBuffer initializeOutput(final int imageWidth,final int imageHeight){  return new StringBuffer();}  }
class C{  ExternalProblem(InputStream input,OutputStream output){  super();  reader=new BufferedReader(new InputStreamReader(input));  writer=new BufferedWriter(new OutputStreamWriter(output));}  }
class C{  public Builder withBackgroundColor(@ColorInt int backgroundColor){  this.backgroundColor=backgroundColor;  return this;}  }
class C{  public void removeKnot(int n){  if (numKnots <= 4)   return;  if (n < numKnots - 1) {    System.arraycopy(xKnots,n + 1,xKnots,n,numKnots - n - 1);    System.arraycopy(yKnots,n + 1,yKnots,n,numKnots - n - 1);  }  numKnots--;  rebuildGradient();}  }
class C{  private void updateCatalogTree(){  CatalogTreeManager manager=InstanceManager.getDefault(jmri.CatalogTreeManager.class);  CatalogTree tree=manager.getBySystemName("NXDI");  if (tree == null) {    tree=manager.newCatalogTree("NXDI","Default Icons");  }  CatalogTreeNode root=tree.getRoot();  Enumeration<CatalogTreeNode> e=root.children();  String name=_defaultIcons.toString();  while (e.hasMoreElements()) {    CatalogTreeNode nChild=e.nextElement();    if (name.equals(nChild.toString())) {      if (log.isDebugEnabled()) {        log.debug("Remove node " + nChild);      }      root.remove(nChild);      break;    }  }  root.add(_defaultIcons);  ImageIndexEditor.indexChanged(true);}  }
class C{  public java.lang.String replace(char oldChar,char newChar){  return null;}  }
class C{  <T>TypeConverters add(Type clazz,TypeConverter<T> converter){  cache.put(clazz,converter);  return this;}  }
class C{  public CloseableImage decodeImage(final EncodedImage encodedImage,final int length,final QualityInfo qualityInfo,final ImageDecodeOptions options){  ImageFormat imageFormat=encodedImage.getImageFormat();  if (imageFormat == null || imageFormat == ImageFormat.UNKNOWN) {    imageFormat=ImageFormatChecker.getImageFormat_WrapIOException(encodedImage.getInputStream());  }switch (imageFormat) {case UNKNOWN:    throw new IllegalArgumentException("unknown image format");case JPEG:  return decodeJpeg(encodedImage,length,qualityInfo);case GIF:return decodeGif(encodedImage,options);case WEBP_ANIMATED:return decodeAnimatedWebp(encodedImage,options);default :return decodeStaticImage(encodedImage);}}  }
class C{  private synchronized void reportHeartbeatSuccess(){  currentConsecutiveFailures=0;  currentConsecutiveSuccesses+=1;  if (isLive) {    return;  }  if (currentConsecutiveSuccesses >= consecutiveSuccesses) {    LOG.info(String.format("Server %s:%d is determined as live by health check.",host,port));    isLive=true;  }}  }
class C{  public boolean isTaxIncluded(){  Object oo=get_Value(COLUMNNAME_IsTaxIncluded);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void assertExists(String message,Path path) throws IOException {  SwiftTestUtils.assertPathExists(sFileSystem,message,path);}  }
class C{  public static String execAndGetOutput(ProcessBuilder builder) throws IOException {  Process process=builder.start();  ExecutorService executorService=Executors.newFixedThreadPool(2);  try {    Future<String> errFuture=executorService.submit(streamToStringCallable(process.getErrorStream()));    Future<String> outFuture=executorService.submit(streamToStringCallable(process.getInputStream()));    Throwable failure;    String out="";    try {      out=outFuture.get(30,TimeUnit.SECONDS);      String err=errFuture.get(30,TimeUnit.SECONDS);      failure=err.length() > 0 ? new AssertionFailedError("Unexpected err stream data:\n" + err) : null;    } catch (    Exception e) {      failure=e;    }    if (failure != null) {      AssertionFailedError error=new AssertionFailedError("Failed to execute " + builder.command() + "; output was:\n"+ out);      error.initCause(failure);      throw error;    } else {      return out;    }  }  finally {    executorService.shutdown();  }}  }
class C{  public static void dropAll(Connection conn) throws SQLException {  Statement stat=conn.createStatement();  stat.execute("DROP SCHEMA IF EXISTS " + SCHEMA);  removeAllTriggers(conn,TRIGGER_PREFIX);  removeIndexFiles(conn);}  }
class C{  public static String transform(Document doc,InputSource xsl,Map<String,Object> parameters) throws TransformerException {  StringWriter sw=new StringWriter();  TransformerFactory factory=XMLUtil.getTransformerFactory();  factory.setErrorListener(SimpleErrorListener.THROW_FATAL);  Transformer transformer=factory.newTransformer(new StreamSource(xsl.getCharacterStream()));  if (parameters != null) {    Iterator<Entry<String,Object>> it=parameters.entrySet().iterator();    Entry<String,Object> e;    while (it.hasNext()) {      e=it.next();      transformer.setParameter(e.getKey(),e.getValue());    }  }  transformer.transform(new DOMSource(doc),new StreamResult(sw));  return sw.toString();}  }
class C{  public static void main(String... args){  String[] list=new String[1000];  for (int i=0; i < 1000; i++) {    list[i]="Hello " + i;  }  for (int k=0; k < 4; k++) {    long t=System.nanoTime();    long h=0;    for (int j=0; j < 10000; j++) {      for (int i=0; i < 1000; i++) {        String s=list[i];        h=(h * 7) ^ s.hashCode();      }    }    System.out.println("hash: " + h);    t=System.nanoTime() - t;    System.out.println("time:" + t);  }}  }
class C{  public static CCProgressFromTo action(float t,float fromPercentage,float toPercentage){  return new CCProgressFromTo(t,fromPercentage,toPercentage);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private boolean scoutPlayer(String player){  int scoutCost=getRecruitCost(player) / 10;  if (scoutCost < 10)   scoutCost=10;  if (recruitingBudget >= scoutCost) {    recruitingBudget-=scoutCost;    budgetText.setText("Budget: $" + recruitingBudget);    if (availAll.contains(player)) {      int posTop=availAll.indexOf(player);      availAll.set(posTop,player.substring(0,player.length() - 1) + "1");    }    String[] ps=player.split(",");    if (ps[0].equals("QB") && availQBs.contains(player)) {      availQBs.set(availQBs.indexOf(player),player.substring(0,player.length() - 1) + "1");    } else     if (ps[0].equals("RB") && availRBs.contains(player)) {      availRBs.set(availRBs.indexOf(player),player.substring(0,player.length() - 1) + "1");    } else     if (ps[0].equals("WR") && availWRs.contains(player)) {      availWRs.set(availWRs.indexOf(player),player.substring(0,player.length() - 1) + "1");    } else     if (ps[0].equals("OL") && availOLs.contains(player)) {      availOLs.set(availOLs.indexOf(player),player.substring(0,player.length() - 1) + "1");    } else     if (ps[0].equals("K") && availKs.contains(player)) {      availKs.set(availKs.indexOf(player),player.substring(0,player.length() - 1) + "1");    } else     if (ps[0].equals("S") && availSs.contains(player)) {      availSs.set(availSs.indexOf(player),player.substring(0,player.length() - 1) + "1");    } else     if (ps[0].equals("CB") && availCBs.contains(player)) {      availCBs.set(availCBs.indexOf(player),player.substring(0,player.length() - 1) + "1");    } else     if (ps[0].equals("F7") && availF7s.contains(player)) {      availF7s.set(availF7s.indexOf(player),player.substring(0,player.length() - 1) + "1");    }    Toast.makeText(this,"Scouted " + ps[0] + " "+ ps[1],Toast.LENGTH_SHORT).show();    expListAdapter.notifyDataSetChanged();    return true;  } else {    Toast.makeText(this,"Not enough money!",Toast.LENGTH_SHORT).show();    return false;  }}  }
class C{  public int addNodeInDocOrder(Node node,boolean test,XPathContext support){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  int insertIndex=-1;  if (test) {    int size=size(), i;    for (i=size - 1; i >= 0; i--) {      Node child=(Node)elementAt(i);      if (child == node) {        i=-2;        break;      }      if (!DOM2Helper.isNodeAfter(node,child)) {        break;      }    }    if (i != -2) {      insertIndex=i + 1;      insertElementAt(node,insertIndex);    }  } else {    insertIndex=this.size();    boolean foundit=false;    for (int i=0; i < insertIndex; i++) {      if (this.item(i).equals(node)) {        foundit=true;        break;      }    }    if (!foundit)     addElement(node);  }  return insertIndex;}  }
class C{  protected void sequence_WildcardNewNotation(ISerializationContext context,Wildcard semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public boolean isCancelled(){  return this.request != null && request.isCancelled();}  }
class C{  public BackupUploadStatus queryBackupUploadStatus(){  CoordinatorClient coordinatorClient=coordinator.getCoordinatorClient();  Configuration cfg=coordinatorClient.queryConfiguration(coordinatorClient.getSiteId(),BackupConstants.BACKUP_UPLOAD_STATUS,Constants.GLOBAL_ID);  Map<String,String> allItems=(cfg == null) ? new HashMap<String,String>() : cfg.getAllConfigs(false);  BackupUploadStatus uploadStatus=new BackupUploadStatus(allItems);  log.info("Upload status is: {}",uploadStatus);  return uploadStatus;}  }
class C{  public static String generateClientIdWithTimestamp(final String clientId,final ProtocolVersionEnum protocol){  final int addedLength=CLIENT_ID_TIMESTAMP_FORMAT.length() + CLIENT_ID_TIMESTAMP_DELIMITER.length();  final int index=clientId.lastIndexOf(CLIENT_ID_TIMESTAMP_DELIMITER);  String newClientId=clientId;  if (index >= 0 && (index + addedLength == newClientId.length())) {    newClientId=newClientId.substring(0,index);  }  if (limitClientId(protocol) && newClientId.length() + addedLength > MAX_CLIENT_LENGTH_FOR_3_1) {    newClientId=newClientId.substring(0,MAX_CLIENT_LENGTH_FOR_3_1 - addedLength);  }  newClientId=newClientId + CLIENT_ID_TIMESTAMP_DELIMITER + CLIENT_ID_SDF.format(new Date());  return newClientId;}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event){  if (event.getAction() == MotionEvent.ACTION_DOWN) {    setPressed(true);  } else {    mService.interceptTouchEvent(event);  }  return true;}  }
class C{  public OutputLimitClause addThenAssignment(Expression assignmentExpression){  thenAssignments.add(new Assignment(assignmentExpression));  return this;}  }
class C{  final void readFromStream(DataInputStream dis,int version) throws IOException, ChessParseError {  tree.readFromStream(dis,version);  if (version >= 3)   timeController.readFromStream(dis,version);  updateTimeControl(true);}  }
class C{  @Override public boolean isSaveOnCloseNeeded(){  if (isDirty()) {    final IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();    if (page != null) {      for (      final IEditorPart editor : page.getDirtyEditors()) {        if (editor instanceof QueryEditor) {          final QueryEditor queryEditor=(QueryEditor)editor;          if (getQueryDocument().equals(queryEditor.getQueryDocument())) {            return false;          }        }      }    }  }  return super.isSaveOnCloseNeeded();}  }
class C{  public static String format(Entity e){  StringBuffer sb=new StringBuffer(2048);  sb.append("=============================================================").append(CommonConstants.NL);  sb.append(formatHeader(e));  sb.append("--- Armor: ").append(e.getTotalArmor()).append("/").append(e.getTotalOArmor()).append("-------------------------------------------").append(CommonConstants.NL);  sb.append("--- Internal: ").append(e.getTotalInternal()).append("/").append(e.getTotalOInternal()).append("----------------------------------------").append(CommonConstants.NL);  sb.append(formatArmor(e));  if ((e instanceof Mech) || (e instanceof Protomech)) {    sb.append("-------------------------------------------------------------").append(CommonConstants.NL);    sb.append(formatCrits(e));  }  sb.append("-------------------------------------------------------------").append(CommonConstants.NL);  sb.append(formatAmmo(e));  sb.append("=============================================================").append(CommonConstants.NL);  return sb.toString();}  }
class C{  public static boolean comparePrepValues(ExpressionNode leftNode,ExpressionNode rightNode,TypesRegistryService registry,TypesTranslator typesTranslator,QueryContext qc){  if (!leftNode.isConstant() || !rightNode.isConstant())   return false;  ValueSource leftSource=leftNode.getPreptimeValue().value();  ValueSource rightSource=rightNode.getPreptimeValue().value();  TInstance lTIns=leftSource.getType();  TInstance rTIns=rightSource.getType();  if (TClass.comparisonNeedsCasting(lTIns,rTIns)) {    boolean nullable=leftSource.isNull() || rightSource.isNull();    TCastResolver casts=registry.getCastsResolver();    TInstance common=TypeResolver.commonInstance(casts,lTIns,rTIns);    if (common == null)     common=typesTranslator.typeForString();    Value leftCasted=new Value(common);    Value rightCasted=new Value(common);    TExecutionContext execContext=new TExecutionContext(Arrays.asList(lTIns,rTIns),common,qc);    casts.cast(lTIns,common).evaluate(execContext,leftSource,leftCasted);    casts.cast(rTIns,common).evaluate(execContext,rightSource,rightCasted);    return TClass.compare(leftCasted.getType(),leftCasted,rightCasted.getType(),rightCasted) == 0;  } else   return TClass.compare(lTIns,leftSource,rTIns,rightSource) == 0;}  }
class C{  public boolean isCutEnabled(){  if (text == null || text.isDisposed()) {    return false;  }  return text.getSelectionCount() > 0;}  }
class C{  public void testGetF25Momentary(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF25Momentary();  assertEquals(expResult,result);}  }
class C{  public Socket createSocket(InetAddress host,int port) throws IOException {  return new Socket(host,port,bindAddress,0);}  }
class C{  public synchronized void cancelAll(){  assertNotCancelled();  for (  Watch<E> w : watchList) {    logger.info("Cancelling pending watch: " + w.toString());    w.cancel(true);  }  cancelled=true;}  }
class C{  public boolean doInsert(DB db,Object threadstate) throws WorkloadException {  int keynum=keysequence.nextInt();  String dbkey=buildKeyName(keynum);  HashMap<String,ByteIterator> values=buildValues();  if (db.insert(table,dbkey,values) == 0) {    return true;  } else {    return false;  }}  }
class C{  public InternalGemFireException(String message,Throwable thr){  super(message,thr);}  }
class C{  public boolean stdev(){  return stdev;}  }
class C{  public static void main(String[] argv){  runFilter(new Obfuscate(),argv);}  }
class C{  public static void writeDocument(Document doc,Writer w) throws IOException {  for (Node n=doc.getFirstChild(); n != null; n=n.getNextSibling()) {    writeNode(n,w);  }}  }
class C{  public static String stringId(DataObjectRestRep value){  return asString(id(value));}  }
class C{  public static float r_dot(vec3 a,vec3 b){  float xSq=a.m[0] * b.m[0];  float ySq=a.m[1] * b.m[1];  float zSq=a.m[2] * b.m[2];  float result=xSq + ySq + zSq;  return result;}  }
class C{  public Map<Integer,Double> computeInPlace(double... dataset){  checkArgument(dataset.length > 0,"Cannot calculate quantiles of an empty dataset");  if (containsNaN(dataset)) {    Map<Integer,Double> nanMap=new HashMap<Integer,Double>();    for (    int index : indexes) {      nanMap.put(index,NaN);    }    return unmodifiableMap(nanMap);  }  int[] quotients=new int[indexes.length];  int[] remainders=new int[indexes.length];  int[] requiredSelections=new int[indexes.length * 2];  int requiredSelectionsCount=0;  for (int i=0; i < indexes.length; i++) {    long numerator=(long)indexes[i] * (dataset.length - 1);    int quotient=(int)LongMath.divide(numerator,scale,RoundingMode.DOWN);    int remainder=(int)(numerator - (long)quotient * scale);    quotients[i]=quotient;    remainders[i]=remainder;    requiredSelections[requiredSelectionsCount]=quotient;    requiredSelectionsCount++;    if (remainder != 0) {      requiredSelections[requiredSelectionsCount]=quotient + 1;      requiredSelectionsCount++;    }  }  sort(requiredSelections,0,requiredSelectionsCount);  selectAllInPlace(requiredSelections,0,requiredSelectionsCount - 1,dataset,0,dataset.length - 1);  Map<Integer,Double> ret=new HashMap<Integer,Double>();  for (int i=0; i < indexes.length; i++) {    int quotient=quotients[i];    int remainder=remainders[i];    if (remainder == 0) {      ret.put(indexes[i],dataset[quotient]);    } else {      ret.put(indexes[i],interpolate(dataset[quotient],dataset[quotient + 1],remainder,scale));    }  }  return unmodifiableMap(ret);}  }
class C{  public void back() throws JSONException {  if (this.usePrevious || this.index <= 0) {    throw new JSONException("Stepping back two steps is not supported");  }  this.index-=1;  this.character-=1;  this.usePrevious=true;  this.eof=false;}  }
class C{  public static boolean testCircleCircle(double aX,double aY,double rA,double bX,double bY,double rB){  double d=(aX - bX) * (aX - bX) + (aY - bY) * (aY - bY);  return d <= (rA + rB) * (rA + rB);}  }
class C{  private Instruction do_iinc(int index,int amount){  Operand r=getLocal(index);  if (VM.VerifyAssertions)   opt_assert(r.isIntLike());  if (LOCALS_ON_STACK) {    replaceLocalsOnStack(index,TypeReference.Int);  }  RegisterOperand op0=gc.makeLocal(index,TypeReference.Int);  if (r instanceof IntConstantOperand) {    int res=amount + ((IntConstantOperand)r).value;    IntConstantOperand val=new IntConstantOperand(res);    if (CP_IN_LOCALS) {      setLocal(index,val);    } else {      setLocal(index,op0);    }    Instruction s=Move.create(INT_MOVE,op0,val);    setSourcePosition(s);    return s;  }  setLocal(index,op0);  return Binary.create(INT_ADD,op0,r,new IntConstantOperand(amount));}  }
class C{  public static Calendar round(final Calendar date,final int field){  if (date == null) {    throw new IllegalArgumentException("The date must not be null");  }  final Calendar rounded=(Calendar)date.clone();  modify(rounded,field,ModifyType.ROUND);  return rounded;}  }
class C{  @Override public double conf(double totalWeight,double delta){  double inverseNormal=inverseNormal(1 - delta / 4);  return Math.sqrt(inverseNormal / (2 * Math.sqrt(totalWeight))) + inverseNormal / (2 * Math.sqrt(totalWeight)) + Math.pow(inverseNormal / (2 * Math.sqrt(totalWeight)),1.5d);}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONFIG\"";  db.execSQL(sql);}  }
class C{  public void process(JCas jcas) throws AnalysisEngineProcessException {  if (annotate_tokens)   if (language.equals(Language.CHINESE))   tokenizeChinese(jcas); else   tokenize(jcas);  if (annotate_partofspeech)   doTreeTag(jcas);  if (this.language == Language.GERMAN)   improveGermanSentences(jcas);  if (this.language == Language.FRENCH)   improveFrenchSentences(jcas);}  }
class C{  public void testSameClassLoaderPrivateMode() throws Exception {  processTestSameRemoteClassLoader(DeploymentMode.PRIVATE);}  }
class C{  public JFastLabel(String text){  m_text=text;  setFont(getFont());}  }
class C{  private void updateTickLabelForLinearScale(int length,BigDecimal tickStep){  double min=scale.getRange().getLower();  double max=scale.getRange().getUpper();  boolean minBigger=max < min;  final BigDecimal MIN=new BigDecimal(new Double(min).toString());  BigDecimal firstPosition;  if (MIN.remainder(tickStep).doubleValue() <= 0) {    firstPosition=MIN.subtract(MIN.remainder(tickStep));  } else {    firstPosition=MIN.subtract(MIN.remainder(tickStep)).add(tickStep);  }  if (scale.isDateEnabled()) {    BigDecimal zeroOclock=firstPosition.subtract(new BigDecimal(new Double(3600000).toString()));    if (MIN.compareTo(zeroOclock) == -1) {      firstPosition=zeroOclock;    }  }  int r=minBigger ? 1 : -1;  boolean minDateAdded=false;  if (MIN.compareTo(firstPosition) == r) {    tickLabelValues.add(min);    if (scale.isDateEnabled()) {      Date date=new Date((long)MIN.doubleValue());      tickLabels.add(scale.format(date,true));      minDateAdded=true;    } else {      tickLabels.add(scale.format(MIN.doubleValue()));    }    tickLabelPositions.add(scale.getMargin());  }  for (BigDecimal b=firstPosition; max >= min ? b.doubleValue() < max : b.doubleValue() > max; b=b.add(tickStep)) {    if (scale.isDateEnabled()) {      Date date=new Date((long)b.doubleValue());      tickLabels.add(scale.format(date,b == firstPosition && !minDateAdded));    } else {      tickLabels.add(scale.format(b.doubleValue()));    }    tickLabelValues.add(b.doubleValue());    int tickLabelPosition=(int)((b.doubleValue() - min) / (max - min) * length) + scale.getMargin();    tickLabelPositions.add(tickLabelPosition);  }  tickLabelValues.add(max);  if (scale.isDateEnabled()) {    Date date=new Date((long)max);    tickLabels.add(scale.format(date,true));  } else {    tickLabels.add(scale.format(max));  }  tickLabelPositions.add(scale.getMargin() + length);}  }
class C{  public CreateId(String value){  this();  setValue(value);}  }
class C{  private void removeListeners(final INaviView view){  view.removeListener(m_viewListener);  for (  final INaviViewNode node : view.getGraph().getNodes()) {    if (node instanceof INaviGroupNode) {      ((INaviGroupNode)node).removeGroupListener(m_groupNodeListener);    }  }}  }
class C{  public String eliminateColinearAttributesTipText(){  return "Eliminate colinear attributes.";}  }
class C{  protected void doAwake(IJobChangeEvent event){}  }
class C{  public DistinguishedNameException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public CatalogEntryRemovedException(String message,Throwable cause){  super(message,cause);}  }
class C{  public SignatureVerifier(Signature signature,String hashChainResult,String hashChain){  this.signature=signature;  this.hashChainResult=hashChainResult;  this.hashChain=hashChain;}  }
class C{  public void testRunToSeqno() throws Exception {  TungstenProperties config=helper.createSimpleRuntime();  ReplicatorRuntime runtime=new ReplicatorRuntime(config,new MockOpenReplicatorContext(),ReplicatorMonitor.getInstance());  runtime.configure();  runtime.prepare();  Pipeline pipeline=runtime.getPipeline();  Future<Pipeline> future=pipeline.shutdownAfterSequenceNumber(5);  startAndAssertEventsApplied(pipeline,future);  pipeline.release(runtime);}  }
class C{  protected void parseText(String intext){  int i=intext.length();  stack=new ArrayList<State>();  completed=new ArrayList<State>();  if (i == 0)   return;  this.text=new char[i];  intext.getChars(0,i,this.text,0);  this.textstring=intext;  this.text=this.textstring.toCharArray();  current=0;  this.push(new State(TokenizerState.IN_SENTENCE),current);  for (current=0; current < this.text.length; current++) {    char character=this.text[current];    int tokentype=classify(character);    statemachine[state][tokentype].process(character);  }  while (!this.pop(current))   ;}  }
class C{  public ReactionProperty createReactionProperty(){  ReactionPropertyImpl reactionProperty=new ReactionPropertyImpl();  return reactionProperty;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Path("remove") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) @RolesAllowed("workspace/developer") public CLIOutputResponse remove(final RemoveRequest request) throws ServerException, IOException {  request.setProjectPath(getRealPath(request.getProjectPath()));  return this.subversionApi.remove(request);}  }
class C{  public BigInteger calculateClientEvidenceMessage() throws CryptoException {  if ((this.A == null) || (this.B == null) || (this.S == null)) {    throw new CryptoException("Impossible to compute M1: " + "some data are missing from the previous operations (A,B,S)");  }  this.M1=SRP6Util.calculateM1(digest,N,A,B,S);  return M1;}  }
class C{  Node(E item){  UNSAFE.putObject(this,itemOffset,item);}  }
class C{  public void tableSwitch(final int[] keys,final TableSwitchGenerator generator,final boolean useTable){  for (int i=1; i < keys.length; ++i) {    if (keys[i] < keys[i - 1]) {      throw new IllegalArgumentException("keys must be sorted ascending");    }  }  Label def=newLabel();  Label end=newLabel();  if (keys.length > 0) {    int len=keys.length;    int min=keys[0];    int max=keys[len - 1];    int range=max - min + 1;    if (useTable) {      Label[] labels=new Label[range];      Arrays.fill(labels,def);      for (int i=0; i < len; ++i) {        labels[keys[i] - min]=newLabel();      }      mv.visitTableSwitchInsn(min,max,def,labels);      for (int i=0; i < range; ++i) {        Label label=labels[i];        if (label != def) {          mark(label);          generator.generateCase(i + min,end);        }      }    } else {      Label[] labels=new Label[len];      for (int i=0; i < len; ++i) {        labels[i]=newLabel();      }      mv.visitLookupSwitchInsn(def,keys,labels);      for (int i=0; i < len; ++i) {        mark(labels[i]);        generator.generateCase(keys[i],end);      }    }  }  mark(def);  generator.generateDefault();  mark(end);}  }
class C{  private void checkObservationValueEquals(String obsName,String value){  String cssSelector="tr." + Utils.removeUnsafeChars(obsName) + " td:last-child";  onWebView().withElement(findElement(Locator.CSS_SELECTOR,cssSelector)).check(webMatches(getText(),containsString(value)));}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public void init(boolean forSigning,CipherParameters parameters){  this.forSigning=forSigning;  AsymmetricKeyParameter k;  if (parameters instanceof ParametersWithRandom) {    k=(AsymmetricKeyParameter)((ParametersWithRandom)parameters).getParameters();  } else {    k=(AsymmetricKeyParameter)parameters;  }  if (forSigning && !k.isPrivate()) {    throw new IllegalArgumentException("signing requires private key");  }  if (!forSigning && k.isPrivate()) {    throw new IllegalArgumentException("verification requires public key");  }  reset();  rsaEngine.init(forSigning,parameters);}  }
class C{  private static short CallStaticShortMethodA(JNIEnvironment env,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallStaticShortMethodA  \n");  Object returnObj=JNIGenericHelpers.callMethodJValuePtr(env,0,methodID,argAddress,TypeReference.Short,true);  return Reflection.unwrapShort(returnObj);}  }
class C{  public String sign(String queryString){  Map<String,String> params=this.createParameterMap(queryString);  return this.sign(params);}  }
class C{  public void drawTile(VPFGraphicWarehouse warehouse,double dpplat,double dpplon,LatLonPoint ll1,LatLonPoint ll2){  if (warehouse == null) {    return;  }  try {    seekToRow(1);    for (List<Object> edge=new ArrayList<Object>(); parseRow(edge); ) {      warehouse.createEdge(covtable,this,edge,ll1,ll2,dpplat,dpplon,getCoordinates(edge));    }  } catch (  FormatException f) {    System.out.println("Exception: " + f.getClass() + " "+ f.getMessage());  }}  }
class C{  public void enable(){}  }
class C{  private static String generateId(CursorType cursorType,Key<? extends ImmutableObject> scope){  return String.format("%s_%s",scope.getString(),cursorType.name());}  }
class C{  public static double safeLog10(double x){  boolean neg=(x < 0.0);  if (neg) {    x=-x;  }  if (x < 10.0) {    x+=(10.0 - x) / 10;  }  x=Math.log(x) / LOG10;  return neg ? -x : x;}  }
class C{  public OracleBatchException(String message,int errorCode,int processedCount){  this(message,errorCode);  this.processedCount=processedCount;}  }
class C{  public synchronized void drawMap(){  lastDrawMapReq=System.currentTimeMillis();  SwingUtilities.invokeLater(drawMapable);}  }
class C{  public JSONArray(){  this.myArrayList=new ArrayList<Object>();}  }
class C{  private static LocalTime create(int hour,int minute,int second){  if ((minute | second) == 0) {    return HOURS[hour];  }  return new LocalTime(hour,minute,second);}  }
class C{  private UpdatePod initLocalPod(){  ServerBartender serverSelf=_bartender.serverSelf();  ServicesAmp rampManager=AmpSystem.currentManager();  UpdatePodBuilder podBuilder=new UpdatePodBuilder();  podBuilder.name("local");  podBuilder.cluster(_bartender.serverSelf().getCluster());  ServerPod serverPod=new ServerPod(0,serverSelf);  ServerPod[] servers=new ServerPod[]{serverPod};  podBuilder.pod(servers);  podBuilder.primaryCount(1);  podBuilder.depth(1);  UpdatePod updatePod=podBuilder.build();  return new UpdatePod(updatePod,new String[]{serverSelf.getId()},0);}  }
class C{  public static boolean has(final byte[] urlhash){  boolean headerExists;  boolean fileExists;  headerExists=responseHeaderDB.containsKey(urlhash);  fileExists=fileDB.containsKey(urlhash);  if (headerExists && fileExists)   return true;  if (!headerExists && !fileExists)   return false;  if (headerExists)   try {    log.warn("header but not content of urlhash " + ASCII.String(urlhash) + " in cache; cleaned up");    responseHeaderDB.delete(urlhash);  } catch (  final IOException e) {  }  if (fileExists)   try {    fileDB.delete(urlhash);  } catch (  final IOException e) {  }  return false;}  }
class C{  public static void quickSort(Object[] a){  quickSort1(a,0,a.length);}  }
class C{  public boolean isDisplayedGrid(){  Object oo=get_Value(COLUMNNAME_IsDisplayedGrid);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void put(byte[] source,int index,int length){  if (mBuffer.capacity() < (mLength + length)) {    expandBuffer(mLength + length + ADDITIONAL_BUFFER_SIZE);  }  mBuffer.put(source,index,length);  mLength+=length;}  }
class C{  public Object read(InputNode node,Object value) throws Exception {  Collection list=(Collection)value;  if (list != null) {    return read(node,list);  }  return read(node);}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  @Override public boolean equals(Object o){  if (this == o) {    return true;  }  if (!(o instanceof MapEntity)) {    return false;  }  MapEntity that=(MapEntity)o;  if (cachedHashCode != that.cachedHashCode) {    return false;  }  return this.wrappedMap.equals(that.wrappedMap);}  }
class C{  public void run(int idx,InterpreterContext context){  if (idx >= context.getRunners().size()) {    throw new InterpreterException("Index out of bound");  }  InterpreterContextRunner runner=context.getRunners().get(idx);  if (runner.getParagraphId().equals(context.getParagraphId())) {    throw new InterpreterException("Can not run current Paragraph");  }  runner.run();}  }
class C{  public InlineQueryResultCachedVideoBuilder id(String id){  this.id=id;  return this;}  }
class C{  private void drawHighlighting(final Graphics2D gfx,final double x,final double y,final double width,final double height,final Color color){  gfx.setColor(color);  final int roundedX=(int)Math.round(x);  final int roundedY=(int)Math.round(y);  final int roundedHeight=(int)Math.round(height);  final int roundedWidth=(int)Math.round(width);  gfx.setComposite(DEFAULT_COMPOSITE);  gfx.fillRoundRect(roundedX,roundedY,roundedWidth,roundedHeight,10,10);  gfx.setColor(color.darker());  gfx.setStroke(DEFAULT_BORDER_STROKE);  gfx.drawRoundRect(roundedX,roundedY,roundedWidth,roundedHeight,10,10);  gfx.setComposite(NORMAL_COMPOSITE);  gfx.setStroke(NORMAL_STROKE);}  }
class C{  private void scalarReplace(RegisterOperand use,RegisterOperand[] scalars,ArrayList<RVMField> fields,Set<Register> visited){  Instruction inst=use.instruction;  try {switch (inst.getOpcode()) {case PUTFIELD_opcode:{        FieldReference fr=PutField.getLocation(inst).getFieldRef();        if (VM.VerifyAssertions)         VM._assert(fr.isResolved());        RVMField f=fr.peekResolvedField();        int index=fields.indexOf(f);        TypeReference type=scalars[index].getType();        Operator moveOp=IRTools.getMoveOp(type);        Instruction i=Move.create(moveOp,scalars[index].copyRO(),PutField.getClearValue(inst));        inst.insertBefore(i);        DefUse.removeInstructionAndUpdateDU(inst);        DefUse.updateDUForNewInstruction(i);      }    break;case GETFIELD_opcode:{    FieldReference fr=GetField.getLocation(inst).getFieldRef();    if (VM.VerifyAssertions)     VM._assert(fr.isResolved());    RVMField f=fr.peekResolvedField();    int index=fields.indexOf(f);    TypeReference type=scalars[index].getType();    Operator moveOp=IRTools.getMoveOp(type);    Instruction i=Move.create(moveOp,GetField.getClearResult(inst),scalars[index].copyRO());    inst.insertBefore(i);    DefUse.removeInstructionAndUpdateDU(inst);    DefUse.updateDUForNewInstruction(i);  }break;case MONITORENTER_opcode:inst.insertBefore(Empty.create(READ_CEILING));DefUse.removeInstructionAndUpdateDU(inst);break;case MONITOREXIT_opcode:inst.insertBefore(Empty.create(WRITE_FLOOR));DefUse.removeInstructionAndUpdateDU(inst);break;case CALL_opcode:case NULL_CHECK_opcode:DefUse.removeInstructionAndUpdateDU(inst);break;case CHECKCAST_opcode:case CHECKCAST_NOTNULL_opcode:case CHECKCAST_UNRESOLVED_opcode:{TypeReference lhsType=TypeCheck.getType(inst).getTypeRef();if (ClassLoaderProxy.includesType(lhsType,klass.getTypeRef()) == YES) {if (visited == null) {visited=new HashSet<Register>();}Register copy=TypeCheck.getResult(inst).getRegister();if (!visited.contains(copy)) {visited.add(copy);transform2(copy,inst,scalars,fields,visited);} else {DefUse.removeInstructionAndUpdateDU(inst);}} else {Instruction i2=Trap.create(TRAP,null,TrapCodeOperand.CheckCast());DefUse.replaceInstructionAndUpdateDU(inst,i2);}}break;case INSTANCEOF_opcode:case INSTANCEOF_NOTNULL_opcode:case INSTANCEOF_UNRESOLVED_opcode:{TypeReference lhsType=InstanceOf.getType(inst).getTypeRef();Instruction i2;if (ClassLoaderProxy.includesType(lhsType,klass.getTypeRef()) == YES) {i2=Move.create(INT_MOVE,InstanceOf.getClearResult(inst),IC(1));} else {i2=Move.create(INT_MOVE,InstanceOf.getClearResult(inst),IC(0));}DefUse.replaceInstructionAndUpdateDU(inst,i2);}break;case GET_OBJ_TIB_opcode:{Instruction i2=Move.create(REF_MOVE,GuardedUnary.getClearResult(inst),new TIBConstantOperand(klass));DefUse.replaceInstructionAndUpdateDU(inst,i2);}break;case REF_MOVE_opcode:{if (visited == null) {visited=new HashSet<Register>();}Register copy=Move.getResult(use.instruction).getRegister();if (!visited.contains(copy)) {visited.add(copy);transform2(copy,inst,scalars,fields,visited);} else {DefUse.removeInstructionAndUpdateDU(inst);}}break;default :throw new OptimizingCompilerException("ObjectReplacer: unexpected use " + inst);}} catch (Exception e) {OptimizingCompilerException oe=new OptimizingCompilerException("Error handling use (" + use + ") of: "+ inst);oe.initCause(e);throw oe;}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:44.810 -0500",hash_original_method="4B2B445A367BD9870FD7E6D0B377F667",hash_generated_method="8E320527BB20B219C7F2ACCCB3287FEA") public void preclose(){  preclosed=true;}  }
class C{  public final void add(int beforeIndex,V value){  if (GWT.isScript()) {    jsArray.insert(beforeIndex,value);  } else {    javaArray.add(beforeIndex,value);  }}  }
class C{  @LargeTest public void testPerformanceAddRemoveImageItem() throws Exception {  final String imageItemFileName=INPUT_FILE_PATH + "IMG_1600x1200.jpg";  final int imageItemDuration=0;  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final String[] loggingInfo=new String[3];  final MediaImageItem[] mediaImageItem=new MediaImageItem[NUM_OF_ITERATIONS];  int timeTaken=0;  long beginTime=SystemClock.uptimeMillis();  createImageItems(mediaImageItem,imageItemFileName,renderingMode,imageItemDuration);  timeTaken=calculateTimeTaken(beginTime,NUM_OF_ITERATIONS);  loggingInfo[0]="Time taken to Create  Media Image Item :" + timeTaken;  beginTime=SystemClock.uptimeMillis();  addImageItems(mediaImageItem);  timeTaken=calculateTimeTaken(beginTime,NUM_OF_ITERATIONS);  loggingInfo[1]="\n\tTime taken to add  Media Image Item :" + timeTaken;  beginTime=SystemClock.uptimeMillis();  removeImageItems(mediaImageItem);  timeTaken=calculateTimeTaken(beginTime,NUM_OF_ITERATIONS);  loggingInfo[2]="\n\tTime taken to remove  Media Image Item :" + timeTaken;  writeTimingInfo("testPerformanceAddRemoveImageItem (in mSec)",loggingInfo);}  }
class C{  private static String findFirstMatchingLine(String data,String prefix){  if (data == null) {    return "";  }  int ix=data.indexOf(prefix);  if (ix >= 0) {    int iy=data.indexOf("\n",ix);    if (iy > 0) {      return data.substring(ix,iy);    }  }  return "";}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private boolean isArrowpointAllowed(Node x,Node y){  if (graph.getEndpoint(x,y) == Endpoint.ARROW) {    return true;  }  if (graph.getEndpoint(x,y) == Endpoint.TAIL) {    return false;  }  if (graph.getEndpoint(y,x) == Endpoint.ARROW) {    if (!knowledge.isForbidden(x.getName(),y.getName()))     return true;  }  if (graph.getEndpoint(y,x) == Endpoint.TAIL) {    if (!knowledge.isForbidden(x.getName(),y.getName()))     return true;  }  return graph.getEndpoint(y,x) == Endpoint.CIRCLE;}  }
class C{  public static boolean isNotEmpty(long[] array){  return (array != null && array.length != 0);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:31.274 -0500",hash_original_method="E71E62CC93A8C30E28BB789565435B56",hash_generated_method="4F7A5D7FFD60C28EAF0C9AC62631B4C4") private void checkType(final int key,final int expectedType){  final int pos=mKeyToPosMap.get(key);  mParcel.setDataPosition(pos);  final int type=mParcel.readInt();  if (type != expectedType) {    throw new IllegalStateException("Wrong type " + expectedType + " but got "+ type);  }}  }
class C{  public void deleteAll(List<T> objects){  for (  T object : objects) {    delete(object);  }}  }
class C{  private EscapeAnalysis(SsaMethod ssaMeth){  this.ssaMeth=ssaMeth;  this.regCount=ssaMeth.getRegCount();  this.latticeValues=new ArrayList<EscapeSet>();}  }
class C{  public synchronized int co_joinCoroutineSet(int coroutineID){  if (coroutineID >= 0) {    if (coroutineID >= m_unreasonableId || m_activeIDs.get(coroutineID))     return -1;  } else {    coroutineID=0;    while (coroutineID < m_unreasonableId) {      if (m_activeIDs.get(coroutineID))       ++coroutineID; else       break;    }    if (coroutineID >= m_unreasonableId)     return -1;  }  m_activeIDs.set(coroutineID);  return coroutineID;}  }
class C{  public void clear(){  this.size=0;}  }
class C{  public void push(float value) throws IOException {  pushValues.add(new Float(value));  if (flashVersion < 5) {    flushPushValues();  }}  }
class C{  public SQLFeatureNotSupportedException(String reason,String sqlState,Throwable cause){  super(reason,sqlState,cause);}  }
class C{  static Instruction tableswitch(Instruction s,IR ir){  Instruction s2;  int lowLimit=TableSwitch.getLow(s).value;  int highLimit=TableSwitch.getHigh(s).value;  int number=highLimit - lowLimit + 1;  if (VM.VerifyAssertions) {    VM._assert(number > 0);  }  Operand val=TableSwitch.getClearValue(s);  BranchOperand defaultLabel=TableSwitch.getClearDefault(s);  if (number < ir.options.CONTROL_TABLESWITCH_CUTOFF) {    Instruction l=LookupSwitch.create(LOOKUPSWITCH,val,null,null,defaultLabel,TableSwitch.getClearDefaultBranchProfile(s),number * 3);    for (int i=0; i < number; i++) {      LookupSwitch.setMatch(l,i,IC(lowLimit + i));      LookupSwitch.setTarget(l,i,TableSwitch.getClearTarget(s,i));      LookupSwitch.setBranchProfile(l,i,TableSwitch.getClearBranchProfile(s,i));    }    s.insertAfter(CPOS(s,l));    return s.remove();  }  RegisterOperand reg=val.asRegister();  BasicBlock BB1=s.getBasicBlock();  BasicBlock BB2=BB1.splitNodeAt(s,ir);  BasicBlock defaultBB=defaultLabel.target.getBasicBlock();  RegisterOperand t;  if (lowLimit != 0) {    t=insertBinary(s,ir,INT_ADD,TypeReference.Int,reg,IC(-lowLimit));  } else {    t=reg.copyU2U();  }  BranchProfileOperand defaultProb=TableSwitch.getClearDefaultBranchProfile(s);  s.replace(CPOS(s,IfCmp.create(INT_IFCMP,ir.regpool.makeTempValidation(),t,IC(highLimit - lowLimit),ConditionOperand.HIGHER(),defaultLabel,defaultProb)));  final boolean defaultIsAlways=defaultProb.takenProbability >= 1f;  final float weight=defaultIsAlways ? 1f / number : 1f / (1f - defaultProb.takenProbability);  s2=CPOS(s,LowTableSwitch.create(LOWTABLESWITCH,t.copyRO(),number * 2));  boolean containsDefault=false;  for (int i=0; i < number; i++) {    BranchOperand b=TableSwitch.getClearTarget(s,i);    LowTableSwitch.setTarget(s2,i,b);    BranchProfileOperand bp=TableSwitch.getClearBranchProfile(s,i);    if (defaultIsAlways) {      bp.takenProbability=weight;    } else {      bp.takenProbability*=weight;    }    LowTableSwitch.setBranchProfile(s2,i,bp);    if (b.target == defaultLabel.target) {      containsDefault=true;    }  }  BB1.insertOut(BB2);  BB1.insertOut(defaultBB);  ir.cfg.linkInCodeOrder(BB1,BB2);  if (!containsDefault) {    BB2.deleteOut(defaultBB);  }  if (BB2.getNumberOfNormalOut() == 1) {    BB2.appendInstruction(CPOS(s,Goto.create(GOTO,LowTableSwitch.getClearTarget(s2,0))));  } else {    BB2.appendInstruction(s2);  }  s=BB2.lastInstruction();  return s;}  }
class C{  public NodeIdentity(final KeyPair keyPair){  this(keyPair,null);}  }
class C{  public boolean isExt(){  boolean isExt=false;  if (getType() == ArchiveFldType.LONG_TEXT)   isExt=true;  return isExt;}  }
class C{  protected boolean onActivate(){  return canActivate();}  }
class C{  ElemDesc(int flags){  m_flags=flags;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:46.895 -0500",hash_original_method="C944AB8B1856D79715AAA6F332DF1C0A",hash_generated_method="61FB4E599240CFCBD01A8DE57C2E7205") private void findClassesInJar(File jarFile,String pathPrefix,Set<String> classNames,Set<String> subpackageNames) throws IOException {  Set<String> entryNames=getJarEntries(jarFile);  if (!entryNames.contains(pathPrefix)) {    return;  }  int prefixLength=pathPrefix.length();  for (  String entryName : entryNames) {    if (entryName.startsWith(pathPrefix)) {      if (entryName.endsWith(CLASS_EXTENSION)) {        int index=entryName.indexOf('/',prefixLength);        if (index >= 0) {          String p=entryName.substring(0,index).replace('/','.');          subpackageNames.add(p);        } else         if (isToplevelClass(entryName)) {          classNames.add(getClassName(entryName).replace('/','.'));        }      }    }  }}  }
class C{  public void writeWithAlpha(OutStream out) throws IOException {  out.flushBits();  boolean hasAddTerms=(addRed != 0) || (addGreen != 0) || (addBlue != 0)|| (addAlpha != 0);  boolean hasMultTerms=(multRed != 1.0) || (multGreen != 1.0) || (multBlue != 1.0)|| (multAlpha != 1.0);  int intMultRed=(int)(multRed * 256.0);  int intMultGreen=(int)(multGreen * 256.0);  int intMultBlue=(int)(multBlue * 256.0);  int intMultAlpha=(int)(multAlpha * 256.0);  int numBits=1;  if (hasAddTerms) {    int redBits=OutStream.determineSignedBitSize(addRed);    int greenBits=OutStream.determineSignedBitSize(addGreen);    int blueBits=OutStream.determineSignedBitSize(addBlue);    int alphaBits=OutStream.determineSignedBitSize(addAlpha);    if (numBits < redBits) {      numBits=redBits;    }    if (numBits < greenBits) {      numBits=greenBits;    }    if (numBits < blueBits) {      numBits=blueBits;    }    if (numBits < alphaBits) {      numBits=alphaBits;    }  }  if (hasMultTerms) {    int redBits=OutStream.determineSignedBitSize(intMultRed);    int greenBits=OutStream.determineSignedBitSize(intMultGreen);    int blueBits=OutStream.determineSignedBitSize(intMultBlue);    int alphaBits=OutStream.determineSignedBitSize(intMultAlpha);    if (numBits < redBits) {      numBits=redBits;    }    if (numBits < greenBits) {      numBits=greenBits;    }    if (numBits < blueBits) {      numBits=blueBits;    }    if (numBits < alphaBits) {      numBits=alphaBits;    }  }  out.writeUBits(1,hasAddTerms ? 1L : 0L);  out.writeUBits(1,hasMultTerms ? 1L : 0L);  out.writeUBits(4,numBits);  if (hasMultTerms) {    out.writeSBits(numBits,intMultRed);    out.writeSBits(numBits,intMultGreen);    out.writeSBits(numBits,intMultBlue);    out.writeSBits(numBits,intMultAlpha);  }  if (hasAddTerms) {    out.writeSBits(numBits,addRed);    out.writeSBits(numBits,addGreen);    out.writeSBits(numBits,addBlue);    out.writeSBits(numBits,addAlpha);  }  out.flushBits();}  }
class C{  private void verify(){  if (expressionMatch() && correctResult()) {    lblStatus.setText("Correct");  } else   if (!expressionMatch()) {    lblStatus.setText("The numbers in the expression don't " + "\nmatch the numbers in the set");  } else   if (!correctResult())   lblStatus.setText("Incorrect result");}  }
class C{  public final void warn(Object message,Throwable t){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_WARN)) {    log(SimpleLog.LOG_LEVEL_WARN,message,t);  }}  }
class C{  public static <T>Object[] filter(T[] elems,Filter<T> filter){  List<T> filtered=new ArrayList<T>();  for (int i=0; i < elems.length; i++) {    if (filter.accept(elems[i])) {      filtered.add(elems[i]);    }  }  return (filtered.toArray((Object[])Array.newInstance(elems.getClass().getComponentType(),filtered.size())));}  }
class C{  public static double calcTravelDistance(List<Id<Link>> path,Network network,Id startLink,Id endLink){  if (endLink == null) {    return 0;  }  double travelDistance=0;  if (path != null && path.size() > 0) {    for (    Id linkId : path) {      travelDistance+=network.getLinks().get(linkId).getLength();    }  } else {    Coord coordsStartLink=network.getLinks().get(startLink).getCoord();    Coord coordsEndLink=network.getLinks().get(endLink).getCoord();    travelDistance+=(int)Math.sqrt(((coordsEndLink.getX() - coordsStartLink.getX()) * (coordsEndLink.getX() - coordsStartLink.getX())) + ((coordsEndLink.getY() - coordsStartLink.getY()) * (coordsEndLink.getY() - coordsStartLink.getY())));    travelDistance*=Math.sqrt(2);  }  return travelDistance;}  }
class C{  public void selectDefaultOption(){  actionTypeOptionGroup.select(ActionTypeOption.FORCED);}  }
class C{  public void cancel(){  cancelled=true;}  }
class C{  public void acceptStoreAndForwardMessageSessionIfSuchExists(ContactId remoteContact){  TerminatingStoreAndForwardOneToOneChatMessageSession session=getStoreAndForwardMsgSession(remoteContact);  if (session == null) {    return;  }  if (session.getDialogPath().isSessionEstablished()) {    return;  }  if (sLogger.isActivated()) {    sLogger.debug("Accept store and forward message session with contact ".concat(remoteContact.toString()));  }  session.acceptSession();}  }
class C{  public synchronized void removeSchemaObject(Session session,SchemaObject obj){  int type=obj.getType();  if (type == DbObject.TABLE_OR_VIEW) {    Table table=(Table)obj;    if (table.isTemporary() && !table.isGlobalTemporary()) {      session.removeLocalTempTable(table);      return;    }  } else   if (type == DbObject.INDEX) {    Index index=(Index)obj;    Table table=index.getTable();    if (table.isTemporary() && !table.isGlobalTemporary()) {      session.removeLocalTempTableIndex(index);      return;    }  }  Comment comment=findComment(obj);  if (comment != null) {    removeDatabaseObject(session,comment);  }  obj.getSchema().remove(obj);}  }
class C{  @Override public int hashCode(){  String str=protocol + host + port;  return this.obj == null ? str.hashCode() : str.hashCode() + this.obj.hashCode();}  }
class C{  private int readByte(){  return ((int)data[pos++]) & 0xff;}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 196) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public SecP192K1Point(ECCurve curve,ECFieldElement x,ECFieldElement y,boolean withCompression){  super(curve,x,y);  if ((x == null) != (y == null)) {    throw new IllegalArgumentException("Exactly one of the field elements is null");  }  this.withCompression=withCompression;}  }
class C{  public boolean isPreposition(){  return (type != null) && type.isPreposition();}  }
class C{  private boolean checkInitialImageForReliability(InternalDistributedMember imageTarget,CacheDistributionAdvisor.InitialImageAdvice advice){  return false;}  }
class C{  public void testPosPosSameLength(){  String numA="283746278342837476784564875684767";  String numB="293478573489347658763745839457637";  String res="71412358434940908477702819237626";  BigInteger aNumber=new BigInteger(numA);  BigInteger bNumber=new BigInteger(numB);  BigInteger result=aNumber.xor(bNumber);  assertTrue(res.equals(result.toString()));}  }
class C{  public void reset(){  cipher.reset();}  }
class C{  public String globalInfo(){  return "An instance filter that copies a range of attributes in the" + " dataset. This is used in conjunction with other filters that" + " overwrite attribute values during the course of their operation --"+ " this filter allows the original attributes to be kept as well"+ " as the new attributes.";}  }
class C{  private void _findByName(List target,Map source,String name){  if (source.containsKey(name)) {    Object o=source.get(name);    if (o instanceof StructuredContent) {      target.add((StructuredContent)o);    } else {      target.add(new MapContent(o,new MapContent(source)));    }  }  for (Iterator e=source.values().iterator(); e.hasNext(); ) {    Object o=e.next();    if (o instanceof List) {      _findByName(target,(List)o,name);    } else     if (o instanceof Map) {      _findByName(target,(Map)o,name);    }  }}  }
class C{  public Cache(int initialCapacity,float loadFactor){  init(initialCapacity,loadFactor);}  }
class C{  public boolean isSummary(){  Object oo=get_Value(COLUMNNAME_IsSummary);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static boolean equals(ServiceDocumentDescription description,ServiceDocument currentDocument,ServiceDocument newDocument){  try {    if (currentDocument == null || newDocument == null) {      throw new IllegalArgumentException("Null Service documents cannot be checked for equality.");    }    String currentSignature=Utils.computeSignature(currentDocument,description);    String newSignature=Utils.computeSignature(newDocument,description);    return currentSignature.equals(newSignature);  } catch (  Throwable throwable) {    if (throwable instanceof IllegalArgumentException) {      throw (IllegalArgumentException)throwable;    }    return false;  }}  }
class C{  protected void enableButtons(){  if (m_PAttributeButton != null) {    if (p_table == null)     return;    int row=p_table.getSelectionModel().getLeadSelectionIndex();    int rows=p_table.getRowCount();    if (p_table.getShowTotals())     rows=rows - 1;    if (row < 0 || row > rows) {      super.enableButtons();      return;    }    boolean enabled=false;    try {      Object value=p_table.getValueAt(row,INDEX_PATTRIBUTE);      enabled=Boolean.TRUE.equals(value);    } catch (    Exception e) {      enabled=false;    }    if (enabled && p_table.isMultiSelection()) {      int checkedRows=p_table.getSelectedKeys().size();      int selectedRows=p_table.getSelectedRowCount();      log.fine("Checked Rows: " + checkedRows + " SelectedRows: "+ selectedRows);      if (checkedRows > 1 || selectedRows > 1)       enabled=false; else       if (checkedRows == 1) {        Object data=p_table.getValueAt(row,p_table.getKeyColumnIndex());        if (data instanceof IDColumn) {          IDColumn record=(IDColumn)data;          if (!record.isSelected()) {            enabled=false;            log.fine("Lead selection is not checked!");          }        }      }    }    m_PAttributeButton.setEnabled(enabled);  }  super.enableButtons();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:23.601 -0400",hash_original_method="15F3DD2CCEEE48DD8745D08C5D9782E0",hash_generated_method="6B83ED4B22CC4BE353EA23860482AD2C") private void layoutItemsUsingGravity(int numRows,int numItems){  int numBaseItemsPerRow=numItems / numRows;  int numLeftoverItems=numItems % numRows;  int rowsThatGetALeftoverItem=numRows - numLeftoverItems;  int[] layout=mLayout;  for (int i=0; i < numRows; i++) {    layout[i]=numBaseItemsPerRow;    if (i >= rowsThatGetALeftoverItem) {      layout[i]++;    }  }  mLayoutNumRows=numRows;}  }
class C{  public SplineColormap(){  rebuildGradient();}  }
class C{  public JSONStringer endArray() throws JSONException {  return end('a',']');}  }
class C{  public Answer(final String h,final String u,final String p,final String c,final String P,String targetPlayer) throws SocketException {  super(h,u,p,c,P,false);  this.targetPlayer=targetPlayer;}  }
class C{  public TranslucentButton(String label){  super(label);  setOpaque(false);}  }
class C{  public static double chiSquareCdf(double x,int k){  if (k <= 0) {    throw new IllegalArgumentException("k (" + k + ") must be > 0");  }  return Gamma.regularizedGammaP(((double)k) / 2.0,x / 2.0);}  }
class C{  @Override public void clearAnswer(){  DateTime ldt=new DateTime();  mDatePicker.init(ldt.getYear(),ldt.getMonthOfYear() - 1,ldt.getDayOfMonth(),mDateListener);}  }
class C{  private static boolean isMacMenuBarDarkMode(){  try {    final Process proc=Runtime.getRuntime().exec(new String[]{"defaults","read","-g","AppleInterfaceStyle"});    proc.waitFor(100,TimeUnit.MILLISECONDS);    return proc.exitValue() == 0;  } catch (  IOException|InterruptedException|IllegalThreadStateException ex) {    LOG.warn("Could not determine, whether 'dark mode' is being used. " + "Falling back to default (light) mode.");    return false;  }}  }
class C{  private Response<Bitmap> doParse(NetworkResponse response){  byte[] data=response.data;  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  Bitmap bitmap=null;  if (mMaxWidth == 0 && mMaxHeight == 0) {    decodeOptions.inPreferredConfig=mDecodeConfig;    bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);  } else {    decodeOptions.inJustDecodeBounds=true;    BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight,mScaleType);    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth,mScaleType);    decodeOptions.inJustDecodeBounds=false;    decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);      tempBitmap.recycle();    } else {      bitmap=tempBitmap;    }  }  if (bitmap == null) {    return Response.error(new ParseError(response));  } else {    return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response));  }}  }
class C{  public static boolean scrub(final Bundle bundle){  if (null == bundle)   return false;  try {    bundle.containsKey(null);  } catch (  final Exception e) {    bundle.clear();    return true;  }  return false;}  }
class C{  private Label addString(String str,int align){  Label lbl=null;  int color=textColor;  if ((curLine.getComponentCount() == 0) && (str.startsWith(" "))) {    str=str.substring(1);    if (str.length() == 0) {      return null;    }  }  if (link != null) {    lbl=new HTMLLink(str,link,this,mainLink,linkVisited);    color=linkColor;    if (linkVisited) {      color=COLOR_VISITED_LINKS;    }    lbl.getSelectedStyle().setFont(font.getFont());    ((HTMLLink)lbl).getPressedStyle().setFont(font.getFont());    if (mainLink == null) {      mainLink=(HTMLLink)lbl;    }    if (accesskey != '\0') {      addAccessKey(accesskey,lbl,false);      accesskey='\0';    }    lbl.getSelectedStyle().setMargin(0,0,0,0);    lbl.getSelectedStyle().setPadding(0,0,0,0);    ((HTMLLink)lbl).getPressedStyle().setMargin(0,0,0,0);    ((HTMLLink)lbl).getPressedStyle().setPadding(0,0,0,0);    lbl.getSelectedStyle().setTextDecoration(textDecoration);    ((HTMLLink)lbl).getPressedStyle().setTextDecoration(textDecoration);  } else {    if (labelForID != null) {      lbl=new ForLabel(str,this,labelForID);      if (accesskey != '\0') {        addAccessKey(accesskey,lbl,false);        accesskey='\0';      }      labelForID=null;    } else {      lbl=new Label(str);    }  }  lbl.getStyle().setMargin(0,0,0,0);  lbl.getStyle().setPadding(0,0,0,0);  if (superscript > 0) {    int margin=font.getHeight() * superscript / 2;    lbl.getStyle().setMargin(Component.BOTTOM,margin);    if (link != null) {      lbl.getSelectedStyle().setMargin(Component.BOTTOM,margin);      ((HTMLLink)lbl).getPressedStyle().setMargin(Component.BOTTOM,margin);    }    if (margin > maxSuperscript) {      maxSuperscript=margin;    }  } else   if (superscript < 0) {    int margin=-font.getHeight() * superscript / 2;    lbl.getStyle().setMargin(Component.TOP,margin);    if (link != null) {      lbl.getSelectedStyle().setMargin(Component.TOP,margin);      ((HTMLLink)lbl).getPressedStyle().setMargin(Component.TOP,margin);    }  }  lbl.getUnselectedStyle().setFgColor(color);  lbl.getSelectedStyle().setFgColor(color);  lbl.getUnselectedStyle().setFont(font.getFont());  lbl.getUnselectedStyle().setBgTransparency(0);  lbl.setGap(0);  lbl.setTickerEnabled(false);  lbl.setEndsWith3Points(false);  lbl.getUnselectedStyle().setTextDecoration(textDecoration);  if (align != JUSTIFY) {    lbl.setAlignment(align);  }  curLine.addComponent(lbl);  if (anchor != null) {    anchors.put(anchor,lbl);  }  if (FIXED_WIDTH) {    if (align != Component.LEFT) {      if (align == JUSTIFY) {        Vector words=getWords(str,align,false);        if (words.size() > 1) {          int spaceW=font.getFont().stringWidth(" ");          int spacesToAdd=(width - lbl.getPreferredW()) / spaceW;          int spacesPerWord=spacesToAdd / (words.size() - 1);          int addtlSpaces=spacesToAdd % (words.size() - 1);          String newStr=(String)words.elementAt(0);          for (int i=1; i < words.size(); i++) {            for (int j=0; j < spacesPerWord; j++) {              newStr+=' ';            }            if (i <= addtlSpaces) {              newStr+=' ';            }            newStr+=' ' + (String)words.elementAt(i);          }          lbl.setText(newStr);        }      } else {        lbl.setPreferredW(width);      }      x=width;      newLine(align);    } else {      x+=lbl.getPreferredW();    }  }  return lbl;}  }
class C{  private void readObject(ObjectInputStream s) throws ClassNotFoundException, IOException {  ObjectInputStream.GetField f=s.readFields();  DragSource newDragSource=(DragSource)f.get("dragSource",null);  if (newDragSource == null) {    throw new InvalidObjectException("null DragSource");  }  dragSource=newDragSource;  Component newComponent=(Component)f.get("component",null);  if (newComponent == null) {    throw new InvalidObjectException("null component");  }  component=newComponent;  Point newOrigin=(Point)f.get("origin",null);  if (newOrigin == null) {    throw new InvalidObjectException("null origin");  }  origin=newOrigin;  int newAction=f.get("action",0);  if (newAction != DnDConstants.ACTION_COPY && newAction != DnDConstants.ACTION_MOVE && newAction != DnDConstants.ACTION_LINK) {    throw new InvalidObjectException("bad action");  }  action=newAction;  List newEvents;  try {    newEvents=(List)f.get("events",null);  } catch (  IllegalArgumentException e) {    newEvents=(List)s.readObject();  }  if (newEvents != null && newEvents.isEmpty()) {    throw new InvalidObjectException("empty list of events");  } else   if (newEvents == null) {    newEvents=Collections.emptyList();  }  events=newEvents;}  }
class C{  public WheelHorizontalView(Context context,AttributeSet attrs){  this(context,attrs,R.attr.abstractWheelViewStyle);}  }
class C{  private void init(Context context){  LayoutInflater.from(context).inflate(R.layout.artist_view,this);  this.setVisibility(INVISIBLE);  mAvatar=((ImageView)findViewById(R.id.artist_view_avatar));  mArtistName=((TextView)findViewById(R.id.artist_view_name));  mTracks=((TextView)findViewById(R.id.artist_view_track_number));  mDescription=((TextView)findViewById(R.id.artist_view_description));}  }
class C{  public void show(String data){  if (data == null) {    return;  }  try {    CryptoFileType fileType=CryptoFileUtil.detectFileType(new ByteArrayInputStream(data.getBytes()));switch (fileType) {case CERT:      showCert(new ByteArrayInputStream(data.getBytes()));    break;case CRL:  showCrl(new ByteArrayInputStream(data.getBytes()));break;case PKCS10_CSR:case SPKAC_CSR:showCsr(new ByteArrayInputStream(data.getBytes()),fileType);break;case JCEKS_KS:case JKS_KS:case PKCS12_KS:case BKS_KS:case BKS_V1_KS:case UBER_KS:case UNKNOWN:default :JOptionPane.showMessageDialog(frame,res.getString("ExamineClipboardAction.UnknownType.message"),res.getString("ExamineClipboardAction.ExamineClipboard.Title"),JOptionPane.WARNING_MESSAGE);break;}} catch (Exception ex) {DError.displayError(frame,ex);}}  }
class C{  public ChannelOverlayPanel(SettingsManager settingsManager){  mSettingsManager=settingsManager;  if (mSettingsManager != null) {    mSettingsManager.addListener(this);  }  setOpaque(false);  setColors();}  }
class C{  private void validateStorageAlternateKey(StorageAlternateKeyDto key){  key.setStorageName(alternateKeyHelper.validateStringParameter("storage name",key.getStorageName()));}  }
class C{  private static void clearOutputDirectory(Path file){  try {    if (file.getFileName().toString().endsWith(".class")) {      LOG.info("Invalidate " + file);      Files.setLastModifiedTime(file,FileTime.from(Instant.EPOCH));    } else     if (Files.isDirectory(file))     Files.list(file).forEach(null);  } catch (  IOException e) {    LOG.log(Level.SEVERE,e.getMessage(),e);  }}  }
class C{  public static boolean checkPassword(String clearTextTestPassword,String encodedActualPassword) throws NoSuchAlgorithmException {  String encodedTestPassword=getEncodedPassword(clearTextTestPassword);  return (encodedTestPassword.equals(encodedActualPassword));}  }
class C{  public IMouseState createNodeEditState(final Node n,final MouseEvent event){  final CNodeEditState state=new CNodeEditState(this,m_graph,n);  m_factory.createNodeEditAction().execute(state,event);  return state;}  }
class C{  public InlineQueryResultDocument.InlineQueryResultDocumentBuilder id(String id){  this.id=id;  return this;}  }
class C{  public boolean isMobileDataEnabled(){  boolean mobileDataEnabled=false;  ConnectivityManager cm=(ConnectivityManager)mContext.getSystemService(Context.CONNECTIVITY_SERVICE);  try {    Class cmClass=Class.forName(cm.getClass().getName());    Method method=cmClass.getDeclaredMethod("getMobileDataEnabled");    method.setAccessible(true);    mobileDataEnabled=(Boolean)method.invoke(cm);  } catch (  Exception e) {    e.printStackTrace();  }  return mobileDataEnabled;}  }
class C{  public static Keymap addKeymap(String nm,Keymap parent){  Keymap map=new DefaultKeymap(nm,parent);  if (nm != null) {    getKeymapTable().put(nm,map);  }  return map;}  }
class C{  public boolean onKeyUp(int keyCode,KeyEvent event){  if (keyCode == KeyEvent.KEYCODE_BACK && mSlidingMenu.isMenuShowing()) {    showContent();    return true;  }  return false;}  }
class C{  boolean aboutEquals(float moduleSize,float i,float j){  if (Math.abs(i - getY()) <= moduleSize && Math.abs(j - getX()) <= moduleSize) {    float moduleSizeDiff=Math.abs(moduleSize - estimatedModuleSize);    return moduleSizeDiff <= 1.0f || moduleSizeDiff <= estimatedModuleSize;  }  return false;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public static Class<?> loadClass(String codebase,String name,ClassLoader defaultLoader) throws MalformedURLException, ClassNotFoundException {  if (loaderLog.isLoggable(Log.BRIEF)) {    loaderLog.log(Log.BRIEF,"name = \"" + name + "\", "+ "codebase = \""+ (codebase != null ? codebase : "")+ "\""+ (defaultLoader != null ? ", defaultLoader = " + defaultLoader : ""));  }  URL[] urls;  if (codebase != null) {    urls=pathToURLs(codebase);  } else {    urls=getDefaultCodebaseURLs();  }  if (defaultLoader != null) {    try {      Class<?> c=loadClassForName(name,false,defaultLoader);      if (loaderLog.isLoggable(Log.VERBOSE)) {        loaderLog.log(Log.VERBOSE,"class \"" + name + "\" found via defaultLoader, "+ "defined by "+ c.getClassLoader());      }      return c;    } catch (    ClassNotFoundException e) {    }  }  return loadClass(urls,name);}  }
class C{  public void updateMailServer(String hostName,String username,String password,int port,boolean tls,boolean ssl,long lifeTimeSpan,long idleTimeSpan,boolean reuseConnections) throws PageException {  checkWriteAccess();  boolean hasAccess=ConfigWebUtil.hasAccess(config,SecurityManager.TYPE_MAIL);  if (!hasAccess)   throw new SecurityException("no access to update mail server settings");  Element mail=_getRootElement("mail");  if (port < 1)   port=21;  if (hostName == null || hostName.trim().length() == 0)   throw new ExpressionException("Host (SMTP) can be a empty value");  hostName=hostName.trim();  Element[] children=XMLConfigWebFactory.getChildren(mail,"server");  Element server=null;  for (int i=0; i < children.length; i++) {    Element el=children[i];    String smtp=el.getAttribute("smtp");    if (smtp != null && smtp.equalsIgnoreCase(hostName)) {      server=el;      break;    }  }  if (server == null) {    server=doc.createElement("server");    mail.appendChild(XMLCaster.toRawNode(server));  }  server.setAttribute("smtp",hostName);  server.setAttribute("username",username);  server.setAttribute("password",ConfigWebUtil.encrypt(password));  server.setAttribute("port",Caster.toString(port));  server.setAttribute("tls",Caster.toString(tls));  server.setAttribute("ssl",Caster.toString(ssl));  server.setAttribute("life",Caster.toString(lifeTimeSpan));  server.setAttribute("idle",Caster.toString(idleTimeSpan));  server.setAttribute("reuse-connection",Caster.toString(reuseConnections));}  }
class C{  public static List<ICallgraphView> loadCallgraphViews(final AbstractSQLProvider provider,final CProject project,final CTagManager viewTagManager,final CTagManager nodeTagManager) throws CouldntLoadDataException {  checkArguments(provider,project,viewTagManager);  final String query=" SELECT * FROM load_project_call_graphs(?, ?) ";  try {    final CConnection connection=provider.getConnection();    final PreparedStatement statement=connection.getConnection().prepareStatement(query);    statement.setInt(1,project.getConfiguration().getId());    statement.setObject(2,"non-native",Types.OTHER);    final ResultSet resultSet=statement.executeQuery();    final Map<Integer,Set<CTag>> tags=loadTags(connection,project,viewTagManager);    return new ArrayList<ICallgraphView>(processQueryResults(resultSet,project,tags,nodeTagManager,provider,new ArrayList<CView>(),ViewType.NonNative,GraphType.CALLGRAPH));  } catch (  final SQLException exception) {    throw new CouldntLoadDataException(exception);  }}  }
class C{  public static void groupButtons(AbstractButton... buttons){  final ButtonGroup group=new ButtonGroup();  for (  AbstractButton button : buttons) {    group.add(button);  }}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public void resetDiscovery(AspectItem item){  this.discoveredStaticAspects.remove(item);  this.saveContainer();}  }
class C{  @Override public void updateLong(String columnLabel,long x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateLong(" + quote(columnLabel) + ", "+ x+ "L);");    }    update(columnLabel,ValueLong.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void write(int c) throws IOException {  if (writer != null) {    writer.write(c);  } else {    ensureOpen();    if (nextChar >= bufferSize) {      reAllocBuff(1);    }    cb[nextChar++]=(char)c;  }}  }
class C{  @org.junit.Test public void testNames(){  Bot bot=Bot.createInstance();  Language language=bot.mind().getThought(Language.class);  language.setLearningMode(LearningMode.Disabled);  TextEntry text=bot.awareness().getSense(TextEntry.class);  List<String> output=registerForOutput(text);  text.input("What is your name?");  String response=waitForOutput(output);  if (!response.equals("My name is Test.")) {    fail("Incorrect response: " + response);  }  text.input("whats your name");  response=waitForOutput(output);  if (!response.equals("My name is Test.")) {    fail("Incorrect response: " + response);  }  text.input("what's your name");  response=waitForOutput(output);  if (!response.equals("My name is Test.")) {    fail("Incorrect response: " + response);  }  text.input("My name is Bob");  response=waitForOutput(output);  if (!response.equals("Pleased to meet you Bob.")) {    fail("Incorrect response: " + response);  }  text.input("what's my name");  response=waitForOutput(output);  if (!response.equals("Your name is Bob.")) {    fail("Incorrect response: " + response);  }  text.input("who am I?");  response=waitForOutput(output);  if (!response.equals("Your name is Bob.")) {    fail("Incorrect response: " + response);  }  text.input("My name is Bobby");  response=waitForOutput(output);  if (!response.equals("Pleased to meet you Bobby.")) {    fail("Incorrect response: " + response);  }  text.input("what's my name");  response=waitForOutput(output);  if (!response.equals("Your name is Bob. You also go by Bobby.") && !response.equals("Your name is Bobby. You also go by Bob.")) {    fail("Incorrect response: " + response);  }  text.input("Your name is Testbot");  response=waitForOutput(output);  if (!response.equals("Okay, my name is Testbot.")) {    fail("Incorrect response: " + response);  }  bot.mind().getThought(Language.class).setCorrectionMode(CorrectionMode.Disabled);  text.input("Your name is Testbot");  response=waitForOutput(output);  if (!response.equals("Yes, my name is Testbot.")) {    fail("Incorrect response: " + response);  }  text.input("Your name is John");  response=waitForOutput(output);  if (!(response.equals("No, my name is Testbot.") || response.equals("No, my name is Test."))) {    fail("Incorrect response: " + response);  }  bot.mind().getThought(Language.class).setCorrectionMode(CorrectionMode.Everyone);  text.input("who r u");  response=waitForOutput(output);  if (!(response.equals("My name is Test. I also go by Testbot.") || response.equals("My name is Testbot. I also go by Test."))) {    fail("Incorrect response: " + response);  }  text.input("Am I Bob?");  response=waitForOutput(output);  if (!response.equals("Yes, your name is Bob.")) {    fail("Incorrect response: " + response);  }  text.input("r u Testbot?");  response=waitForOutput(output);  if (!response.equals("Yes, my name is Testbot.")) {    fail("Incorrect response: " + response);  }  text.input("Your name is not Test.");  response=waitForOutput(output);  if (!response.equals("Okay, my name is not Test.")) {    fail("Incorrect response: " + response);  }  text.input("what you name");  response=waitForOutput(output);  if (!response.equals("My name is Testbot.")) {    fail("Incorrect response: " + response);  }  text.input("My name is not Bob.");  response=waitForOutput(output);  if (!response.equals("Okay, your name is not Bob.")) {    fail("Incorrect response: " + response);  }  text.input("what's me name?");  response=waitForOutput(output);  if (!response.equals("Your name is Bobby.")) {    fail("Incorrect response: " + response);  }  text.input("My name is not Bobby.");  response=waitForOutput(output);  text.input("what is my name.");  response=waitForOutput(output);  if (!response.equals("I do not know your name.")) {    fail("Incorrect response: " + response);  }  text.input("My name is Bob Jon Jones.");  response=waitForOutput(output);  if (!response.equals("Pleased to meet you Bob Jon Jones.")) {    fail("Incorrect response: " + response);  }  text.input("whats my name");  response=waitForOutput(output);  if (!response.equals("Your name is Bob Jon Jones.")) {    fail("Incorrect response: " + response);  }  text.input("Bob is my name");  response=waitForOutput(output);  if (!response.equals("Pleased to meet you Bob.")) {    fail("Incorrect response: " + response);  }  bot.shutdown();}  }
class C{  public static Writable filterLine(InputStream self,@ClosureParams(value=SimpleType.class,options="java.lang.String") Closure predicate){  return filterLine(newReader(self),predicate);}  }
class C{  public TaskNode(Task t){  super(t);  task=t;}  }
class C{  public MultiProducerBehaviour(final String questSlot,final String productionActivity,final HashSet<String> productsNames,final HashMap<String,Map<String,Integer>> requiredResourcesPerProduct,final HashMap<String,Integer> productionTimesPerProduct,final HashMap<String,Boolean> productsBound){  super(productsNames);  this.questSlot=questSlot;  this.productionActivity=productionActivity;  this.productsNames=productsNames;  this.requiredResourcesPerProduct=requiredResourcesPerProduct;  this.productionTimesPerProduct=productionTimesPerProduct;  this.productsBound=productsBound;  logger.debug("Registering VERB [" + productionActivity + "] in the word list");  WordList.getInstance().registerVerb(productionActivity);  String requiredResourceName;  Iterator<String> i=requiredResourcesPerProduct.keySet().iterator();  while (i.hasNext()) {    requiredResourceName=i.next();    logger.debug("Registering OBJECT [" + requiredResourceName + "] in the word list");    WordList.getInstance().registerName(requiredResourceName,ExpressionType.OBJECT);  }}  }
class C{  public static String take(GString self,int num){  return (String)take(self.toString(),num);}  }
class C{  public String toString(){  return "(" + neLabel + " "+ partOfSpeech+ " "+ form+ ")";}  }
class C{  private ParseResult mergeAggWithSelect(ParseResult top,ParseResult nested) throws SQLException {  if (nested.getRequestScore())   throw new SQLException("Unable to request a _score on an aggregation");  int limit=top.getLimit();  List<OrderBy> sorts=top.getSorts();  boolean useCache=top.getUseCache() || nested.getUseCache();  QueryBuilder query=top.getQuery();  if (query instanceof MatchAllQueryBuilder)   query=nested.getQuery(); else   if (!(nested.getQuery() instanceof MatchAllQueryBuilder))   query=QueryBuilders.boolQuery().must(top.getQuery()).must(nested.getQuery());  AggregationBuilder<?> agg=top.getAggregation();  IComparison having=top.getHaving();  Heading head=new Heading();  if (nested.getHeading().hasAllCols()) {    head=top.getHeading();  } else {    for (    Column col : top.getHeading().columns()) {      if (col.hasCalculation()) {        translateCalculation(col.getCalculation(),nested.getHeading());        head.add(new Column(col.getColumn(),col.getOp()).setAlias(col.getAlias()).setCalculation(col.getCalculation()).setSqlType(Types.FLOAT));      } else {        Column col2=nested.getHeading().getColumnByNameAndOp(col.getColumn(),Operation.NONE);        if (col2 == null)         col2=nested.getHeading().getColumnByLabel(col.getAlias());        if (col2 == null && col.getOp() == Operation.COUNT) {          head.add(col);          continue;        } else         if (col2 == null)         throw new SQLException("Unable to determine column '" + col.getLabel() + "' within nested query");        String alias=(col.getAlias() == null ? col.getColumn() : col.getAlias());        head.add(new Column(col2.getColumn(),col.getOp()).setAlias(alias).setVisible(col.isVisible()).setSqlType(col2.getSqlType()));      }    }  }  head.buildIndex();  return new ParseResult(head,nested.getSources(),query,agg,having,sorts,limit,useCache,false);}  }
class C{  public static void createDirectory(String path){  FileUtilSupport.getDefault().createDirectory(path);}  }
class C{  @Override public void perform(IR ir){  HashMap<Register,Operand> info=new HashMap<Register,Operand>();  for (BasicBlock bb=ir.firstBasicBlockInCodeOrder(); bb != null; bb=bb.nextBasicBlockInCodeOrder()) {    if (bb.isEmpty())     continue;    container.counter2++;    if (bb.getInfrequent()) {      container.counter1++;      if (ir.options.FREQ_FOCUS_EFFORT)       continue;    }    for (Instruction s=bb.firstRealInstruction(), sentinel=bb.lastInstruction(); s != sentinel; s=s.nextInstructionInCodeOrder()) {      if (!info.isEmpty()) {        int numUses=s.getNumberOfPureUses();        if (numUses > 0) {          boolean didSomething=false;          for (Enumeration<Operand> e=s.getUses(); e.hasMoreElements(); ) {            Operand use=e.nextElement();            if (use instanceof RegisterOperand) {              RegisterOperand rUse=(RegisterOperand)use;              Operand value=info.get(rUse.getRegister());              if (value != null) {                didSomething=true;                value=value.copy();                if (value instanceof RegisterOperand) {                  ((RegisterOperand)value).copyTypeFrom(rUse);                }                s.replaceOperand(use,value);              }            }          }          if (didSomething) {            Simplifier.simplify(ir.isHIR(),ir.regpool,ir.options,s);          }        }        boolean killPhysicals=s.isTSPoint() || s.operator().implicitDefs != 0;        if (killPhysicals) {          HashSet<Register> toRemove=new HashSet<Register>();          for (          Map.Entry<Register,Operand> entry : info.entrySet()) {            Register eR=entry.getValue().asRegister().getRegister();            if (killPhysicals && eR.isPhysical()) {              toRemove.add(entry.getKey());            }          }          for (          final Register aToRemove : toRemove) {            info.remove(aToRemove);          }        }        for (Enumeration<Operand> e=s.getDefs(); e.hasMoreElements(); ) {          Operand def=e.nextElement();          if (def != null && def.isRegister()) {            Register r=def.asRegister().getRegister();            info.remove(r);            HashSet<Register> toRemove=new HashSet<Register>();            for (            Map.Entry<Register,Operand> entry : info.entrySet()) {              Register eR=((RegisterOperand)entry.getValue()).getRegister();              if (eR == r) {                toRemove.add(entry.getKey());              }            }            for (            final Register register : toRemove) {              info.remove(register);            }          }        }      }      if (Move.conforms(s)) {        Operand val=Move.getVal(s);        if (val.isRegister()) {          RegisterOperand rhs=val.asRegister();          if (!rhs.getRegister().isPhysical()) {            RegisterOperand lhs=Move.getResult(s);            if (lhs.getType().isReferenceType() == rhs.getType().isReferenceType()) {              info.put(lhs.getRegister(),val);            }          }        }      }    }    info.clear();  }}  }
class C{  private static void showSummary(){  int oldSum=0;  int newSum=0;  int oldSuppSum=0;  int newSuppSum=0;  for (int i=0; i < categoryNames.length - 1; i++) {    int newNum=newListCount[BMP][i] + newListCount[nonBMP][i];    if (oldTotalCount[i] != newNum) {      System.err.println("Error: The number of generated data is different between the new approach and the old approach.");    }    if (oldListCount[SURROGATE][i] != newListCount[nonBMP][i]) {      System.err.println("Error: The number of generated supplementarycharacters is different between the new approach and the old approach.");    }    System.out.println("    " + categoryNames[i] + ": "+ oldTotalCount[i]+ "("+ oldListCount[BEFORE][i]+ " + "+ oldListCount[SURROGATE][i]+ " + "+ oldListCount[AFTER][i]+ ")"+ " --- "+ newNum+ "("+ newListCount[BMP][i]+ " + "+ newListCount[nonBMP][i]+ ")");    oldSum+=oldListCount[BEFORE][i] * 2 + oldListCount[SURROGATE][i] * 4 + oldListCount[AFTER][i] * 2;    newSum+=newNum * 4;    oldSuppSum+=oldListCount[SURROGATE][i] * 4;    newSuppSum+=newListCount[nonBMP][i] * 4;  }  System.out.println("\nTotal buffer sizes are:\n    " + oldSum + "bytes(Including "+ oldSuppSum+ "bytes for supplementary characters)\n    "+ newSum+ "bytes(Including "+ newSuppSum+ "bytes for supplementary characters)");  if (!ignoredOld.toString().equals(ignoredNew.toString())) {    System.err.println("Ignored categories: Error: List mismatch: " + ignoredOld + " vs. "+ ignoredNew);  } else {    System.out.println("\nIgnored categories: " + ignoredOld);    System.out.println("Please confirm that they aren't used in BreakIteratorRules.");  }}  }
class C{  public SPX(int numberOfParents,int numberOfOffspring,double epsilon){  this.numberOfParents=numberOfParents;  this.numberOfOffspring=numberOfOffspring;  this.epsilon=epsilon;}  }
class C{  public boolean isAlarmsEnabled(){  return null == alarmsEnabled ? _alarmsEnabled : alarmsEnabled.get();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void classicTheme(){  extension.workspaceProp(".metadata/.plugins/org.eclipse.core.runtime/.settings/org.eclipse.e4.ui.css.swt.theme.prefs",null);}  }
class C{  public void addComment(String comment){  this.comments.add(comment);}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public MySqlDeclareStatement parseDeclare(){  MySqlDeclareStatement stmt=new MySqlDeclareStatement();  accept(Token.DECLARE);  for (; ; ) {    SQLExpr var=exprParser.primary();    if (var instanceof SQLIdentifierExpr) {      var=new SQLVariantRefExpr(((SQLIdentifierExpr)var).getName());    }    stmt.addVar(var);    if (lexer.token() == Token.COMMA) {      accept(Token.COMMA);      continue;    } else     if (lexer.token() != Token.EOF) {      stmt.setType(exprParser.parseDataType());      break;    } else {      setErrorEndPos(lexer.pos());      printError(lexer.token());    }  }  return stmt;}  }
class C{  @Override public void accept(final MethodVisitor mv){  mv.visitInsn(opcode);  acceptAnnotations(mv);}  }
class C{  public void test_getBitsFromByteArray_correctRejection_off_and_len_05(){  BytesUtil.getBits(new byte[5],0,32);  try {    BytesUtil.getBits(new byte[5],0,33);    fail("Expecting: " + IllegalArgumentException.class);  } catch (  IllegalArgumentException ex) {    if (log.isInfoEnabled())     log.info("Ignoring expected exception: " + ex);  }}  }
class C{  public void add(double value){  if (count == 0) {    count=1;    mean=value;    min=value;    max=value;    if (!isFinite(value)) {      sumOfSquaresOfDeltas=NaN;    }  } else {    count++;    if (isFinite(value) && isFinite(mean)) {      double delta=value - mean;      mean+=delta / count;      sumOfSquaresOfDeltas+=delta * (value - mean);    } else {      mean=calculateNewMeanNonFinite(mean,value);      sumOfSquaresOfDeltas=NaN;    }    min=Math.min(min,value);    max=Math.max(max,value);  }}  }
class C{  public boolean isWaitForHeight(){  return waitForHeight;}  }
class C{  public static void addToUnion(List<Type> list,Type pt){  if (pt == null || !list.isEmpty() && pt.isExactlyNothing()) {    return;  } else   if (pt.isAnything()) {    list.clear();    list.add(pt);  } else   if (pt.isUnion()) {    List<Type> caseTypes=pt.getCaseTypes();    for (int i=0, size=caseTypes.size(); i < size; i++) {      Type t=caseTypes.get(i);      addToUnion(list,t.substitute(pt));    }  } else   if (pt.isWellDefined()) {    boolean add=true;    for (int i=0; i < list.size(); i++) {      Type t=list.get(i);      if (pt.isSubtypeOf(t)) {        add=false;        break;      } else       if (pt.isSupertypeOf(t)) {        list.remove(i);        i--;      }    }    if (add) {      list.add(pt);    }  }}  }
class C{  public void onSuccess(R result){}  }
class C{  public String qname(){  return new String(chars,1,chars.length - 1);}  }
class C{  public void test_allocCommitFree(){  Journal store=(Journal)getStore();  try {    RWStrategy bs=(RWStrategy)store.getBufferStrategy();    final long addr=bs.write(randomData(78));    store.commit();    bs.delete(addr);    assertTrue(bs.isCommitted(addr));  }  finally {    store.destroy();  }}  }
class C{  public Min2(){  super("min2",2);}  }
class C{  public void addTestingCallback(OneSheeldTestingCallback testingCallback){  if (testingCallback != null && !testingCallbacks.contains(testingCallback))   testingCallbacks.add(testingCallback);}  }
class C{  public Result findByName(String name){  List<Tag> tags=Tag.find.where().ilike("name","%" + name.trim() + "%").findList();  String serialized=new JSONSerializer().include("id").include("name").exclude("*").serialize(tags);  return ok(serialized);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-06 08:48:10.351 -0400",hash_original_method="700D599D8FCCF9508C63F0B3E10B4D0F",hash_generated_method="2429F5976B0374845A4A492DA80D5599") public Margins(int leftMils,int topMils,int rightMils,int bottomMils){  mTopMils=topMils;  mLeftMils=leftMils;  mRightMils=rightMils;  mBottomMils=bottomMils;}  }
class C{  public static final void bind(final ContextMap context){  c_localContext.set(context);}  }
class C{  @Override public DMLProgram parse(String fileName,String dmlScript,Map<String,String> argVals) throws ParseException {  DMLProgram prog=doParse(fileName,dmlScript,null,argVals);  return prog;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case MappingPackage.OPERATION_SOURCE__OPERATION:    setOperation((Operation)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public void allocate(int cnt){  if (size + cnt > capacity())   capacity(size + cnt);}  }
class C{  public String toString(){  return ISODateTimeFormat.tTime().print(this);}  }
class C{  public Iterator<E> iterator(){  return m.navigableKeySet().iterator();}  }
class C{  public Protocol protocol(ProtocolType defaultType,int defaultPort,String defaultHost){  final ProtocolType t=parseProtocolType(type,defaultType);  final InetSocketAddress address=parseSocketAddress(host,port,defaultPort,defaultHost);  return new Protocol(t,address,receiveBufferSize);}  }
class C{  public boolean isTelUriFormatUsed(){  return readBoolean(RcsSettingsData.TEL_URI_FORMAT);}  }
class C{  public XmlReporter(OutputStream out,String title){  this.out=out;  this.title=title;}  }
class C{  public static BufferedImage convertColorspace(BufferedImage image,final int newType){  try {    final BufferedImage raw_image=image;    image=new BufferedImage(raw_image.getWidth(),raw_image.getHeight(),newType);    final ColorConvertOp xformOp=new ColorConvertOp(null);    xformOp.filter(raw_image,image);  } catch (  final Exception e) {    LogWriter.writeLog("Exception " + e + " converting image");  }  return image;}  }
class C{  public JPopupMenu createNetworkContextMenu(){  JPopupMenu contextMenu=super.createNetworkContextMenu();  contextMenu.addSeparator();  contextMenu.add(NetworkScriptMenu.getNetworkScriptMenu(this));  return contextMenu;}  }
class C{  protected CategorySeries buildCategoryDataset(String title,double[] values){  CategorySeries series=new CategorySeries(title);  int k=0;  for (  double value : values) {    series.add("Project " + ++k,value);  }  return series;}  }
class C{  static Attributes determineBindAttrs(char separator,Object obj,Attributes attrs,boolean cloned,Name name,Context ctx,Hashtable<?,?> env) throws NamingException {  DirStateFactory.Result res=DirectoryManager.getStateToBind(obj,name,ctx,env,attrs);  obj=res.getObject();  attrs=res.getAttributes();  if (obj == null) {    return attrs;  }  if ((attrs == null) && (obj instanceof DirContext)) {    cloned=true;    attrs=((DirContext)obj).getAttributes("");  }  boolean ocNeedsCloning=false;  Attribute objectClass;  if (attrs == null || attrs.size() == 0) {    attrs=new BasicAttributes(LdapClient.caseIgnore);    cloned=true;    objectClass=new BasicAttribute("objectClass","top");  } else {    objectClass=attrs.get("objectClass");    if (objectClass == null && !attrs.isCaseIgnored()) {      objectClass=attrs.get("objectclass");    }    if (objectClass == null) {      objectClass=new BasicAttribute("objectClass","top");    } else     if (ocNeedsCloning || !cloned) {      objectClass=(Attribute)objectClass.clone();    }  }  attrs=encodeObject(separator,obj,attrs,objectClass,cloned);  return attrs;}  }
class C{  private boolean requiresInstallation(){  PluginWrapper n=Jenkins.getInstance().getPluginManager().getPlugin(name);  if (n == null)   return true;  if (version == null)   return false;  return n.getVersionNumber().isOlderThan(version);}  }
class C{  public int size(){  return parts.size();}  }
class C{  public static String normalizeArrayName(final BaseType arrayType){  Preconditions.checkNotNull(arrayType,"Error: array type argument can not be null.");  Preconditions.checkArgument(arrayType.getCategory() == BaseTypeCategory.ARRAY,"Error: array type argument must be of category array.");  return arrayType.getName().split("\\[")[0];}  }
class C{  public boolean hasNarrowConcaveAngle(){  return hasNarrowConcaveAngle;}  }
class C{  private void checkCaches(int key,int expVal) throws Exception {  checkCache(cache1,key,expVal);  checkCache(cache2,key,expVal);  checkCache(cache3,key,expVal);}  }
class C{  @Override public boolean equals(Object obj){  if (obj instanceof weka.classifiers.Evaluation) {    obj=((weka.classifiers.Evaluation)obj).m_delegate;  }  return m_delegate.equals(obj);}  }
class C{  public static final ParameterizedType parameterizeWithOwner(final Type owner,final Class<?> raw,final Map<TypeVariable<?>,Type> typeArgMappings){  Validate.notNull(raw,"raw class is null");  Validate.notNull(typeArgMappings,"typeArgMappings is null");  return parameterizeWithOwner(owner,raw,extractTypeArgumentsFrom(typeArgMappings,raw.getTypeParameters()));}  }
class C{  public SetBreakpointConditionCommand(final int packetId,final RelocatedAddress address,final Condition condition){  super(DebugCommandType.CMD_SET_BREAKPOINT_CONDITION,packetId);  Preconditions.checkNotNull(address,"IE01027: Address argument can not be null");  Preconditions.checkNotNull(condition,"IE01028: Condition argument can not be null");  addArgument(new DebugMessageAddressArgument(address.getAddress()));  try {    addArgument(new DebugMessageRawArgument(ConditionTreeFlattener.flatten(condition.getRoot())));  } catch (  final MaybeNullException e) {    addArgument(new DebugMessageRawArgument(new byte[0]));  }}  }
class C{  public void loadData(final RepositoryContext repositoryContext,final Operation.Inputs inputs){  this.repositoryContext=repositoryContext;  WorkItemLookupOperation activeOperation=new WorkItemLookupOperation(repositoryContext);  loadData(activeOperation,inputs);}  }
class C{  public void testAlignment(){  OffsetManager manager=new OffsetManager(new TestOffsetBuilderFactory(TestSetupHelper.newMonday().getTime()));  OffsetList yearOffsets=manager.getTopUnitOffsets();  OffsetList monthOffsets=manager.getBottomUnitOffsets();  OffsetList dayOffsets=manager.getAtomUnitOffsets();  OffsetLookup lookup=new OffsetLookup();{    Date endOfMonth=GPTimeUnitStack.MONTH.adjustRight(TestSetupHelper.newMonday().getTime());    int idxDayEomOffset=lookup.lookupOffsetByEndDate(endOfMonth,dayOffsets);    int idxMonthEomOffset=lookup.lookupOffsetByEndDate(endOfMonth,monthOffsets);    assertTrue("It is expected that offset pixels are the same for offsets with the same end date" + endOfMonth,dayOffsets.get(idxDayEomOffset).getOffsetPixels() == monthOffsets.get(idxMonthEomOffset).getOffsetPixels());  }{    Date endOfYear=GPTimeUnitStack.YEAR.adjustRight(TestSetupHelper.newMonday().getTime());    int idxDayEoyOffset=lookup.lookupOffsetByEndDate(endOfYear,dayOffsets);    int idxMonthEoyOffset=lookup.lookupOffsetByEndDate(endOfYear,monthOffsets);    int idxYearEoyOffset=lookup.lookupOffsetByEndDate(endOfYear,yearOffsets);    assertTrue("It is expected that offset pixels are the same for offsets with the same end date=" + endOfYear,dayOffsets.get(idxDayEoyOffset).getOffsetPixels() == monthOffsets.get(idxMonthEoyOffset).getOffsetPixels());    assertTrue("It is expected that offset pixels are the same for offsets with the same end date" + endOfYear,yearOffsets.get(idxYearEoyOffset).getOffsetPixels() == monthOffsets.get(idxMonthEoyOffset).getOffsetPixels());  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case FunctionblockPackage.FUNCTION_BLOCK__CONFIGURATION:    return configuration != null;case FunctionblockPackage.FUNCTION_BLOCK__STATUS:  return status != null;case FunctionblockPackage.FUNCTION_BLOCK__FAULT:return fault != null;case FunctionblockPackage.FUNCTION_BLOCK__EVENTS:return events != null && !events.isEmpty();case FunctionblockPackage.FUNCTION_BLOCK__OPERATIONS:return operations != null && !operations.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public BitemporalMapperBuilder nowValue(Object nowValue){  this.nowValue=nowValue;  return this;}  }
class C{  private boolean canAccessClipboard(){  SecurityManager sm=System.getSecurityManager();  if (sm == null)   return true;  try {    sm.checkPermission(SecurityConstants.AWT.ACCESS_CLIPBOARD_PERMISSION);    return true;  } catch (  SecurityException e) {  }  return false;}  }
class C{  public void addNeuronGroup(NeuronGroup group){  numMembers+=group.size();  neuronGroupList.add(group);  group.setParentGroup(this);}  }
class C{  public void addIndividual(String className,ClassInformation classInformation){  Validate.notNull(className);  Validate.notNull(classInformation);  Validate.isTrue(!hierarchyMap.containsKey(className));  hierarchyMap.put(className,classInformation);}  }
class C{  public boolean isIdentity(){  return isIdentity;}  }
class C{  public synchronized void removePoint(Waypoint point){  detachChild(point);}  }
class C{  public ServiceConfigurationError(String message,Throwable cause){  super(message,cause);}  }
class C{  public static int moveByWord(String text,int column,boolean forward,boolean returnCursorAtEnd){  int curColumn=column;  int length=text.length();  int direction=forward ? 1 : -1;  boolean farWordEnd=((direction == 1 && returnCursorAtEnd) || (direction == -1 && !returnCursorAtEnd));  boolean foundEarlyMatch=false;  if (!UnicodeUtils.isWhitespace(text.charAt(curColumn))) {    curColumn=skipNonwhitespaceSimilar(text,curColumn,forward);    if (farWordEnd && curColumn - direction != column) {      curColumn-=direction;      foundEarlyMatch=true;    }  }  if (!foundEarlyMatch && curColumn >= 0 && curColumn < length) {    curColumn=skipWhitespace(text,curColumn,forward);    if (farWordEnd && curColumn >= 0 && curColumn < length) {      curColumn=skipNonwhitespaceSimilar(text,curColumn,forward) - direction;    }  }  if (curColumn < 0 || curColumn >= length) {    return -1;  }  return curColumn;}  }
class C{  private void launchAnim4(){  animatedVector4.start();}  }
class C{  public void mousePressed(MouseEvent e){  if (e.getSource() instanceof WFNode) {    WFNode node=(WFNode)e.getSource();    if (node.isEditable()) {      m_draggedNode=node;      m_draggedStart=SwingUtilities.convertPoint(m_draggedNode,e.getX(),e.getY(),this);    } else {      m_dragged=false;      m_draggedNode=null;      m_draggedStart=null;    }  }}  }
class C{  public boolean isAbstract(){  return getRawClass().isAbstract();}  }
class C{  public EventSupport createEventSupport(AbstractNode n){  return new XBLEventSupport(n);}  }
class C{  public void removeLayoutComponent(Component c){  if (c == viewport) {    viewport=null;  } else   if (c == vsb) {    vsb=null;  } else   if (c == hsb) {    hsb=null;  } else   if (c == rowHead) {    rowHead=null;  } else   if (c == colHead) {    colHead=null;  } else   if (c == lowerLeft) {    lowerLeft=null;  } else   if (c == lowerRight) {    lowerRight=null;  } else   if (c == upperLeft) {    upperLeft=null;  } else   if (c == upperRight) {    upperRight=null;  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.nim_team_info_activity);  ToolBarOptions options=new ToolBarOptions();  setToolBar(R.id.toolbar,options);  parseIntentData();  initToggleBtn();  loadTeamInfo();  initAdapter();  findViews();  requestMembers();  registerObservers(true);}  }
class C{  public synchronized void doTunneling() throws IOException {  int retryTunnel=0;  String statusLine="";  int respCode=0;  AuthenticationInfo proxyAuthentication=null;  String proxyHost=null;  int proxyPort=-1;  MessageHeader savedRequests=requests;  requests=new MessageHeader();  boolean inNegotiateProxy=false;  try {    setTunnelState(TunnelState.SETUP);    do {      if (!checkReuseConnection()) {        proxiedConnect(url,proxyHost,proxyPort,false);      }      sendCONNECTRequest();      responses.reset();      http.parseHTTP(responses,null,this);      if (logger.isLoggable(PlatformLogger.Level.FINE)) {        logger.fine(responses.toString());      }      if (responses.filterNTLMResponses("Proxy-Authenticate")) {        if (logger.isLoggable(PlatformLogger.Level.FINE)) {          logger.fine(">>>> Headers are filtered");          logger.fine(responses.toString());        }      }      statusLine=responses.getValue(0);      StringTokenizer st=new StringTokenizer(statusLine);      st.nextToken();      respCode=Integer.parseInt(st.nextToken().trim());      if (respCode == HTTP_PROXY_AUTH) {        boolean dontUseNegotiate=false;        Iterator<String> iter=responses.multiValueIterator("Proxy-Authenticate");        while (iter.hasNext()) {          String value=iter.next().trim();          if (value.equalsIgnoreCase("Negotiate") || value.equalsIgnoreCase("Kerberos")) {            if (!inNegotiateProxy) {              inNegotiateProxy=true;            } else {              dontUseNegotiate=true;              doingNTLMp2ndStage=false;              proxyAuthentication=null;            }            break;          }        }        AuthenticationHeader authhdr=new AuthenticationHeader("Proxy-Authenticate",responses,new HttpCallerInfo(url,http.getProxyHostUsed(),http.getProxyPortUsed()),dontUseNegotiate);        if (!doingNTLMp2ndStage) {          proxyAuthentication=resetProxyAuthentication(proxyAuthentication,authhdr);          if (proxyAuthentication != null) {            proxyHost=http.getProxyHostUsed();            proxyPort=http.getProxyPortUsed();            disconnectInternal();            retryTunnel++;            continue;          }        } else {          String raw=responses.findValue("Proxy-Authenticate");          reset();          if (!proxyAuthentication.setHeaders(this,authhdr.headerParser(),raw)) {            disconnectInternal();            throw new IOException("Authentication failure");          }          authObj=null;          doingNTLMp2ndStage=false;          continue;        }      }      if (proxyAuthentication != null) {        proxyAuthentication.addToCache();      }      if (respCode == HTTP_OK) {        setTunnelState(TunnelState.TUNNELING);        break;      }      disconnectInternal();      setTunnelState(TunnelState.NONE);      break;    } while (retryTunnel < maxRedirects);    if (retryTunnel >= maxRedirects || (respCode != HTTP_OK)) {      throw new IOException("Unable to tunnel through proxy." + " Proxy returns \"" + statusLine + "\"");    }  }  finally {    if (proxyAuthKey != null) {      AuthenticationInfo.endAuthRequest(proxyAuthKey);    }  }  requests=savedRequests;  responses.reset();}  }
class C{  public RedirectException(){  super();}  }
class C{  private void processOutputSsList(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  EventPublisher ep=new EventPublisher();  try {    ep.setSsAuthSubToken((String)request.getSession().getAttribute(SESSION_ATTR_SS_AUTH_TOKEN),false);    request.setAttribute("ssList",ep.getSsList());  } catch (  EPAuthenticationException e) {    System.err.println("Authentication exception: " + e.getMessage());  }  RequestDispatcher dispatcher=getServletContext().getRequestDispatcher("/WEB-INF/jsp/outputSsList.jsp");  dispatcher.forward(request,response);}  }
class C{  @SuppressWarnings("unchecked") Collection<JdoValue> executeAllKeysQuery(Query allKeysQuery){  return (Collection<JdoValue>)allKeysQuery.execute(getId());}  }
class C{  public DataTypeParser(){}  }
class C{  private static void scanThread(RVMThread thread,TraceLocal trace,boolean processCodeLocations,Address gprs,Address topFrame,boolean newRootsSufficent){  if (thread.getExecStatus() == RVMThread.NEW || thread.getIsAboutToTerminate()) {    return;  }  Address ip, fp, initialIPLoc;  if (topFrame.isZero()) {    ip=thread.getContextRegisters().getInnermostInstructionAddress();    fp=thread.getContextRegisters().getInnermostFramePointer();    initialIPLoc=thread.getContextRegisters().getIPLocation();  } else {    ip=Magic.getReturnAddress(topFrame,thread);    fp=Magic.getCallerFramePointer(topFrame);    initialIPLoc=thread.getContextRegisters().getIPLocation();  }  ScanThread scanner=RVMThread.getCurrentThread().getCollectorThread().getThreadScanner();  Address sentinalFp=newRootsSufficent && Options.useShortStackScans.getValue() ? thread.getNextUnencounteredFrame() : StackFrameLayout.getStackFrameSentinelFP();  if (Options.useReturnBarrier.getValue() || Options.useShortStackScans.getValue()) {    thread.deInstallStackTrampoline();  }  scanner.startScan(trace,processCodeLocations,thread,gprs,ip,fp,initialIPLoc,topFrame,sentinalFp);}  }
class C{  String printWorkingDirectory() throws IOException {  send("PWD");  readCode(257);  return removeQuotes();}  }
class C{  public <T>SimpleReactStream<T> fromPublisher(final Publisher<? extends T> publisher){  Objects.requireNonNull(publisher);  final SeqSubscriber<T> sub=SeqSubscriber.subscriber();  publisher.subscribe(sub);  return sub.toSimpleReact(this);}  }
class C{  public static void main(String[] args){  ButtonDemo demo=new ButtonDemo(null);  demo.mainImpl();}  }
class C{  private static Address check(final Address address){  Preconditions.checkNotNull(address,"Error: Address argument can not be null");  return address;}  }
class C{  public static long[] coordinatesToHilbert(byte[] coords,int bitsperdim,int offset){  final int numdim=coords.length;  final int numbits=numdim * bitsperdim;  final long[] output=BitsUtil.zero(numbits);  int rotation=0;  long[] refl=BitsUtil.zero(numdim);  for (int i=0; i < bitsperdim; i++) {    final long[] hist=interleaveBits(coords,i + offset);    final long[] bits=BitsUtil.copy(hist);    BitsUtil.xorI(bits,refl);    BitsUtil.cycleRightI(bits,rotation,numdim);    final int nextrot=(rotation + BitsUtil.numberOfTrailingZerosSigned(bits) + 2) % numdim;    BitsUtil.invgrayI(bits);    BitsUtil.orI(output,bits,numbits - (i + 1) * numdim);    refl=hist;    BitsUtil.flipI(refl,rotation);    if (!BitsUtil.get(bits,0)) {      BitsUtil.flipI(refl,(nextrot - 1 + numdim) % numdim);    }    rotation=nextrot;  }  return output;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.183 -0500",hash_original_method="5ED608529AAF18DC65BC239874C7ECA6",hash_generated_method="00C69551D4FC8B009893C78A3C2655F7") public synchronized Enumeration failures(){  return fFailures.elements();}  }
class C{  private void weakRegionDFS2(Block v,int r){  this.m_regions.get(new Integer(r)).add2Back(v);  DominatorNode parentOfV=this.m_pdom.getParentOf(this.m_pdom.getDode(v));  Block u2=(parentOfV == null) ? null : (Block)parentOfV.getGode();  List children=this.m_dom.getChildrenOf(this.m_dom.getDode(v));  for (int i=0; i < children.size(); i++) {    DominatorNode w=(DominatorNode)children.get(i);    Block u1=(Block)w.getGode();    if (u2 != null && u1.equals(u2)) {      this.weakRegionDFS2((Block)w.getGode(),r);    } else {      this.m_regCount++;      this.m_regions.put(new Integer(this.m_regCount),this.createRegion(this.m_regCount));      this.weakRegionDFS2((Block)w.getGode(),this.m_regCount);    }  }}  }
class C{  static public void saveBytes(File file,byte buffer[]){  try {    String filename=file.getAbsolutePath();    createPath(filename);    OutputStream output=new FileOutputStream(file);    if (file.getName().toLowerCase().endsWith(".gz")) {      output=new GZIPOutputStream(output);    }    saveBytes(output,buffer);    output.close();  } catch (  IOException e) {    System.err.println("error saving bytes to " + file);    e.printStackTrace();  }}  }
class C{  public static void run(boolean timing){  ManyInterfaces.timing=timing;  ManyInterfaces obj=new ManyInterfaces();  Interface001 one;  Interface049 forty;  Interface099 ninety;  long start, end;  int iter=32768;  int rept=16;  int i;  System.gc();  start=System.nanoTime();  testIface001(obj,iter);  end=System.nanoTime();  report("testIface001",start,end,iter,rept);  start=System.nanoTime();  testIface049(obj,iter);  end=System.nanoTime();  report("testIface049",start,end,iter,rept);  start=System.nanoTime();  testIface099(obj,iter);  end=System.nanoTime();  report("testIface099",start,end,iter,rept);  start=System.nanoTime();  testVirt001(obj,iter);  end=System.nanoTime();  report("testVirt001",start,end,iter,rept);  start=System.nanoTime();  testVirt049(obj,iter);  end=System.nanoTime();  report("testVirt049",start,end,iter,rept);  start=System.nanoTime();  testVirt099(obj,iter);  end=System.nanoTime();  report("testVirt099",start,end,iter,rept);  start=System.nanoTime();  testInstance001(obj,iter);  end=System.nanoTime();  report("testInst001",start,end,iter,rept);  start=System.nanoTime();  testInstance049(obj,iter);  end=System.nanoTime();  report("testInst049",start,end,iter,rept);  start=System.nanoTime();  testInstance099(obj,iter);  end=System.nanoTime();  report("testInst099",start,end,iter,rept);}  }
class C{  public MaskWriteRegisterResponse(){  super();  setFunctionCode(Modbus.MASK_WRITE_REGISTER);}  }
class C{  @Override public void endWindow(){  if (tuple_count == 0) {    return;  }  long elapsedTime=System.currentTimeMillis() - windowStartTime;  if (elapsedTime == 0) {    didemit=false;    return;  }  long average;  long tuples_per_sec=(tuple_count * 1000) / elapsedTime;  if (rolling_window_count == 1) {    average=tuples_per_sec;  } else {    long slots;    if (count_denominator == rolling_window_count) {      tuple_numbers[tuple_index]=tuple_count;      time_numbers[tuple_index]=elapsedTime;      slots=rolling_window_count;      tuple_index++;      if (tuple_index == rolling_window_count) {        tuple_index=0;      }    } else {      tuple_numbers[count_denominator - 1]=tuple_count;      time_numbers[count_denominator - 1]=elapsedTime;      slots=count_denominator;      count_denominator++;    }    long time_slot=0;    long numtuples=0;    for (int i=0; i < slots; i++) {      numtuples+=tuple_numbers[i];      time_slot+=time_numbers[i];    }    average=(numtuples * 1000) / time_slot;  }  HashMap<String,Number> tuples=new HashMap<String,Number>();  tuples.put(OPORT_COUNT_TUPLE_AVERAGE,new Long(average));  tuples.put(OPORT_COUNT_TUPLE_COUNT,new Long(tuple_count));  tuples.put(OPORT_COUNT_TUPLE_TIME,new Long(elapsedTime));  tuples.put(OPORT_COUNT_TUPLE_TUPLES_PERSEC,new Long(tuples_per_sec));  tuples.put(OPORT_COUNT_TUPLE_WINDOWID,new Long(count_windowid++));  count.emit(tuples);  didemit=true;}  }
class C{  public boolean isProfileComplete(){  return this.mInsertedParts == this.mNumberOfParts;}  }
class C{  public boolean isLimitedDiscoverable(){  return mLimitedDiscoverable;}  }
class C{  public static int hex2Dec(String hexString){  int result=0;  int index=0;  int n=hexString.length() - 1;  return hex2Dec(hexString,index,n,result);}  }
class C{  public TextField(String text,String hint){  this(text);  setHint(hint);}  }
class C{  private static final <REQ extends IMessage,REPLY extends IMessage>void registerMessage(Class<? extends IMessageHandler<REQ,REPLY>> handlerClass,Class<REQ> messageClass){  Side side=AbstractClientMessageHandler.class.isAssignableFrom(handlerClass) ? Side.CLIENT : Side.SERVER;  PacketDispatcher.dispatcher.registerMessage(handlerClass,messageClass,packetId++,side);}  }
class C{  public void displayForTeamA(int score){  TextView scoreView=(TextView)findViewById(R.id.team_a_score);  scoreView.setText(String.valueOf(score));}  }
class C{  private static Set<Branch> collectUncoveredBranches(Set<Branch> coveredBranches){  Set<Branch> uncoveredBranches=new HashSet<Branch>();  for (  Branch b : coveredBranches) {    final Branch negate=b.negate();    if (!coveredBranches.contains(negate)) {      uncoveredBranches.add(negate);    }  }  return uncoveredBranches;}  }
class C{  public static XField createXField(@DottedClassName String className,String fieldName,String fieldSignature,boolean isStatic){  FieldDescriptor fieldDesc=DescriptorFactory.instance().getFieldDescriptor(ClassName.toSlashedClassName(className),fieldName,fieldSignature,isStatic);  return createXField(fieldDesc);}  }
class C{  public JSONObject toJson() throws JSONException {  JSONObject json=new JSONObject();  JSONArray jpods=new JSONArray();  for (  DiasporaPod pod : pods) {    jpods.put(pod.toJson());  }  json.put("pods",jpods);  json.put("timestamp",System.currentTimeMillis());  return json;}  }
class C{  public byte[] readBytes() throws IOException {  if (!parseTag())   throw new BurlapProtocolException("expected <base64>");  String tag=sbuf.toString();  if (tag.equals("null")) {    expectEndTag("null");    return null;  } else   if (tag.equals("base64")) {    sbuf.setLength(0);    byte[] value=parseBytes();    expectEndTag("base64");    return value;  } else   throw expectBeginTag("base64",tag);}  }
class C{  public static String preambleToString(final Memory srcMem){  final long pre0=checkPreambleSize(srcMem);  final int preLongs=extractPreLongs(pre0);  final int serVer=extractSerVer(pre0);  final Family family=Family.idToFamily(extractFamilyID(pre0));  final int lgMaxMapSize=extractLgMaxMapSize(pre0);  final int lgCurMapSize=extractLgCurMapSize(pre0);  final int flags=extractFlags(pre0);  final int type=extractSerDeId(pre0);  final String flagsStr=zeroPad(Integer.toBinaryString(flags),8) + ", " + (flags);  final boolean empty=(flags & EMPTY_FLAG_MASK) > 0;  final int maxMapSize=1 << lgMaxMapSize;  final int curMapSize=1 << lgCurMapSize;  final int maxPreLongs=Family.FREQUENCY.getMaxPreLongs();  int activeItems=0;  long streamLength=0;  long offset=0;  if (preLongs == maxPreLongs) {    final long[] preArr=new long[preLongs];    srcMem.getLongArray(0,preArr,0,preLongs);    activeItems=extractActiveItems(preArr[1]);    streamLength=preArr[2];    offset=preArr[3];  }  final StringBuilder sb=new StringBuilder();  sb.append(LS).append("### FREQUENCY SKETCH PREAMBLE SUMMARY:").append(LS).append("Byte  0: Preamble Longs       : ").append(preLongs).append(LS).append("Byte  1: Serialization Version: ").append(serVer).append(LS).append("Byte  2: Family               : ").append(family.toString()).append(LS).append("Byte  3: MaxMapSize           : ").append(maxMapSize).append(LS).append("Byte  4: CurMapSize           : ").append(curMapSize).append(LS).append("Byte  5: Flags Field          : ").append(flagsStr).append(LS).append("  EMPTY                       : ").append(empty).append(LS).append("Byte  6: Freq Sketch Type     : ").append(type).append(LS);  if (preLongs == 1) {    sb.append(" --ABSENT, ASSUMED:").append(LS);  } else {    sb.append("Bytes 8-11 : ActiveItems    : ").append(activeItems).append(LS);    sb.append("Bytes 16-23: StreamLength   : ").append(streamLength).append(LS).append("Bytes 24-31: Offset         : ").append(offset).append(LS);  }  sb.append("Preamble Bytes                : ").append(preLongs * 8).append(LS);  sb.append("TOTAL Sketch Bytes            : ").append((preLongs + activeItems * 2) << 3).append(LS).append("### END FREQUENCY SKETCH PREAMBLE SUMMARY").append(LS);  return sb.toString();}  }
class C{  public void move(double x,double y){  double dx=x - start.x;  double dy=y - start.y;  if (convertToTwips) {    dx*=SwfConstants.TWIPS_PER_PIXEL;    dy*=SwfConstants.TWIPS_PER_PIXEL;  }  StyleChangeRecord scr=new StyleChangeRecord();  scr.setMove((int)Math.rint(dx),(int)Math.rint(dy));  dxSumTwips=0;  dySumTwips=0;  if (lineStyleHasChanged) {    scr.setLinestyle(lineStyle);    lineStyleHasChanged=false;  }  if (fillStyle0HasChanged && useFillStyle0) {    scr.setFillStyle0(fillStyle0);    fillStyle0HasChanged=false;  }  if (fillStyle1HasChanged && useFillStyle1) {    scr.setFillStyle1(fillStyle1);    fillStyle1HasChanged=false;  }  lastMoveTo.x=x;  lastMoveTo.y=y;  pen.x=x;  pen.y=y;  shape.shapeRecords.add(scr);}  }
class C{  private String[] retrieveEnumeration(String schemaTable,String column) throws SQLException {  String[] enumElements=null;  String query="SHOW COLUMNS FROM " + schemaTable + " WHERE Field='"+ column+ "'";  Statement st=null;  ResultSet rs=null;  try {    st=conn.createStatement();    rs=st.executeQuery(query);    if (rs.next()) {      String enumDefinition=rs.getString("Type");      if (logger.isDebugEnabled())       logger.debug(enumDefinition);      enumElements=parseListType(enumDefinition);    }  }  finally {    if (rs != null) {      try {        rs.close();      } catch (      SQLException e) {      }    }    if (st != null) {      try {        st.close();      } catch (      SQLException e) {      }    }  }  return enumElements;}  }
class C{  public static AnimGameItem process(MD5Model md5Model,MD5AnimModel animModel,Vector3f defaultColour) throws Exception {  List<Matrix4f> invJointMatrices=calcInJointMatrices(md5Model);  List<AnimatedFrame> animatedFrames=processAnimationFrames(md5Model,animModel,invJointMatrices);  List<Mesh> list=new ArrayList<>();  for (  MD5Mesh md5Mesh : md5Model.getMeshes()) {    Mesh mesh=generateMesh(md5Model,md5Mesh);    handleTexture(mesh,md5Mesh,defaultColour);    list.add(mesh);  }  Mesh[] meshes=new Mesh[list.size()];  meshes=list.toArray(meshes);  AnimGameItem result=new AnimGameItem(meshes,animatedFrames,invJointMatrices);  return result;}  }
class C{  protected boolean isLocalMove(Car car){  if (car.getRouteLocation() == null || car.getRouteDestination() == null) {    return false;  }  if (car.getRouteLocation().equals(car.getRouteDestination()) && car.getTrack() != null) {    return true;  }  if (car.getTrain() != null && car.getTrain().isLocalSwitcher() && splitString(car.getRouteLocation().getName()).equals(splitString(car.getRouteDestination().getName())) && car.getTrack() != null) {    return true;  }  if (splitString(car.getRouteLocation().getName()).equals(splitString(car.getRouteDestination().getName())) && car.getTrain() != null && car.getTrain().getRoute() != null) {    boolean foundRl=false;    for (    RouteLocation rl : car.getTrain().getRoute().getLocationsBySequenceList()) {      if (foundRl) {        if (splitString(car.getRouteDestination().getName()).equals(splitString(rl.getName()))) {          if (car.getRouteDestination() != rl) {            continue;          } else {            return true;          }        } else {          return false;        }      }      if (car.getRouteLocation().equals(rl)) {        foundRl=true;      }    }  }  return false;}  }
class C{  public void disconnect(){  try {    mCtx.unbindService(apiConnection);  } catch (  IllegalArgumentException e) {  }}  }
class C{  protected Expression and(int opPos) throws TransformerException {  return compileOperation(new And(),opPos);}  }
class C{  private void cancelAcquire(Node node){  if (node == null)   return;  node.thread=null;  Node pred=node.prev;  while (pred.waitStatus > 0)   node.prev=pred=pred.prev;  Node predNext=pred.next;  node.waitStatus=Node.CANCELLED;  if (node == tail && compareAndSetTail(node,pred)) {    compareAndSetNext(pred,predNext,null);  } else {    int ws;    if (pred != head && ((ws=pred.waitStatus) == Node.SIGNAL || (ws <= 0 && compareAndSetWaitStatus(pred,ws,Node.SIGNAL))) && pred.thread != null) {      Node next=node.next;      if (next != null && next.waitStatus <= 0)       compareAndSetNext(pred,predNext,next);    } else {      unparkSuccessor(node);    }    node.next=node;  }}  }
class C{  public boolean startVoiceRecognition(BluetoothDevice device){  if (DBG)   log("startVoiceRecognition()");  if (mService != null && isEnabled() && isValidDevice(device)) {    try {      return mService.startVoiceRecognition(device);    } catch (    RemoteException e) {      Log.e(TAG,Log.getStackTraceString(new Throwable()));    }  }  if (mService == null)   Log.w(TAG,"Proxy not attached to service");  return false;}  }
class C{  public CharBuffer format(CharBuffer cb,String format){  int length=format.length();  for (int i=0; i < length; i++) {    char ch=format.charAt(i);    if (ch != '%') {      cb.append(ch);      continue;    }switch (format.charAt(++i)) {case 'a':      cb.append(SHORT_WEEKDAY[getDayOfWeek() - 1]);    break;case 'A':  cb.append(LONG_WEEKDAY[getDayOfWeek() - 1]);break;case 'h':case 'b':cb.append(SHORT_MONTH[(int)_month]);break;case 'B':cb.append(LONG_MONTH[(int)_month]);break;case 'c':cb.append(printLocaleDate());break;case 'd':cb.append((_dayOfMonth + 1) / 10);cb.append((_dayOfMonth + 1) % 10);break;case 'D':cb.append((_month + 1) / 10);cb.append((_month + 1) % 10);cb.append('/');cb.append((_dayOfMonth + 1) / 10);cb.append((_dayOfMonth + 1) % 10);cb.append('/');cb.append(_year / 10 % 10);cb.append(_year % 10);break;case 'e':if ((_dayOfMonth + 1) / 10 == 0) cb.append(' '); else cb.append((_dayOfMonth + 1) / 10);cb.append((_dayOfMonth + 1) % 10);break;case 'F':{cb.append(_year / 1000 % 10);cb.append(_year / 100 % 10);cb.append(_year / 10 % 10);cb.append(_year % 10);cb.append('-');cb.append((_month + 1) / 10);cb.append((_month + 1) % 10);cb.append('-');cb.append((_dayOfMonth + 1) / 10);cb.append((_dayOfMonth + 1) % 10);break;}case 'H':{int hour=(int)(_timeOfDay / 3600000) % 24;cb.append(hour / 10);cb.append(hour % 10);break;}case 'I':{int hour=(int)(_timeOfDay / 3600000) % 12;if (hour == 0) hour=12;cb.append(hour / 10);cb.append(hour % 10);break;}case 'j':cb.append((_dayOfYear + 1) / 100);cb.append((_dayOfYear + 1) / 10 % 10);cb.append((_dayOfYear + 1) % 10);break;case 'l':{int hour=(int)(_timeOfDay / 3600000) % 12;if (hour == 0) hour=12;if (hour < 10) {cb.append(' ');}cb.append(hour);break;}case 'm':cb.append((_month + 1) / 10);cb.append((_month + 1) % 10);break;case 'M':cb.append((_timeOfDay / 600000) % 6);cb.append((_timeOfDay / 60000) % 10);break;case 'p':{int hour=(int)(_timeOfDay / 3600000) % 24;if (hour < 12) cb.append("am"); else cb.append("pm");break;}case 'P':{int hour=(int)(_timeOfDay / 3600000) % 24;if (hour < 12) cb.append("AM"); else cb.append("PM");break;}case 'S':cb.append((_timeOfDay / 10000) % 6);cb.append((_timeOfDay / 1000) % 10);break;case 's':cb.append((_timeOfDay / 100) % 10);cb.append((_timeOfDay / 10) % 10);cb.append(_timeOfDay % 10);break;case 'T':{int hour=(int)(_timeOfDay / 3600000) % 24;cb.append(hour / 10);cb.append(hour % 10);cb.append(':');cb.append((_timeOfDay / 600000) % 6);cb.append((_timeOfDay / 60000) % 10);cb.append(':');cb.append((_timeOfDay / 10000) % 6);cb.append((_timeOfDay / 1000) % 10);break;}case 'W':int week=getWeek();cb.append((week + 1) / 10);cb.append((week + 1) % 10);break;case 'w':cb.append(getDayOfWeek() - 1);break;case 'x':cb.append(printShortLocaleDate());break;case 'X':cb.append(printShortLocaleTime());break;case 'y':cb.append(_year / 10 % 10);cb.append(_year % 10);break;case 'Y':cb.append(_year / 1000 % 10);cb.append(_year / 100 % 10);cb.append(_year / 10 % 10);cb.append(_year % 10);break;case 'Z':if (_zoneName == null) cb.append("GMT"); else cb.append(_zoneName);break;case 'z':long offset=_zoneOffset;if (offset < 0) {cb.append("-");offset=-offset;} else cb.append("+");cb.append((offset / 36000000) % 10);cb.append((offset / 3600000) % 10);cb.append((offset / 600000) % 6);cb.append((offset / 60000) % 10);break;case '%':cb.append('%');break;default :cb.append(format.charAt(i));}}return cb;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int col;  int row;  int numCols;  int numRows;  int[] dX={1,1,1,0,-1,-1,-1,0};  int[] dY={-1,0,1,1,1,0,-1,-1};  int a;  float progress;  int range;  boolean blnTextOutput=false;  double z;  int i;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      blnTextOutput=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    numRows=image.getNumberRows();    numCols=image.getNumberColumns();    double noData=image.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    range=(int)(image.getMaximumValue());    long[][] proportionData=new long[3][range + 1];    double[] proportion=new double[range + 1];    int cN, rN;    double zN;    boolean edge;    updateProgress("Loop 1 of 2:",0);    for (row=0; row < numRows; row++) {      for (col=0; col < numCols; col++) {        z=image.getValue(row,col);        if (z > 0) {          a=(int)(z);          proportionData[0][a]++;          edge=false;          for (i=0; i < 8; i++) {            cN=col + dX[i];            rN=row + dY[i];            zN=image.getValue(rN,cN);            if (zN != z) {              edge=true;              break;            }          }          if (edge) {            proportionData[1][a]++;          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 1 of 2:",(int)progress);    }    for (a=0; a <= range; a++) {      if (proportionData[1][a] > 1) {        proportion[a]=(double)proportionData[1][a] / proportionData[0][a];      }    }    double[] data=null;    updateProgress("Loop 2 of 2:",0);    for (row=0; row < numRows; row++) {      data=image.getRowValues(row);      for (col=0; col < numCols; col++) {        if (data[col] > 0) {          a=(int)(data[col]);          output.setValue(row,col,proportion[a]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (numRows - 1));      updateProgress("Loop 2 of 2:",(int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    if (blnTextOutput) {      DecimalFormat df;      df=new DecimalFormat("0.0000");      String retstr="Edge Proportion\nPatch ID\tValue";      for (a=0; a <= range; a++) {        if (proportionData[1][a] > 0) {          retstr=retstr + "\n" + a+ "\t"+ df.format(proportion[a]);        }      }      returnData(retstr);    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static Number intdiv(Character left,Number right){  return intdiv(Integer.valueOf(left),right);}  }
class C{  public Vertex define(Vertex source,Vertex vertex){  return define(source,vertex,null);}  }
class C{  protected Object readResolve() throws ObjectStreamException {  if (this.intValue() == STDOUT.intValue()) {    return STDOUT;  }  if (this.intValue() == STDERR.intValue()) {    return STDERR;  }  throw new InvalidObjectException("Unknown instance :" + this);}  }
class C{  public void put(String key,String value){  walletPreferences.put(key,value);}  }
class C{  public MaterialEditText inputSize(float size){  mInputTextSize=size;  mEditText.setTextSize(mInputTextSize);  mHint.setTextSize(mInputTextSize);  return this;}  }
class C{  public static boolean isDocOperator(String opr){  boolean is=false;  if (opr.equals(SearchOpr.FULL_TEXT) || opr.equals(SearchOpr.FULL_TEXT_NOT))   is=true;  return is;}  }
class C{  void postValueChangeEvent(ASTNode node,SimplePropertyDescriptor property){synchronized (this.internalASTLock) {    if (this.disableEvents > 0) {      return;    } else {      disableEvents();    }  }  try {    this.eventHandler.postValueChangeEvent(node,property);  }  finally {    reenableEvents();  }}  }
class C{  public boolean isInteresadoPrincipal(){  return interesadoPrincipal;}  }
class C{  public void pauseAll(){  List<Integer> list=mThreadPool.getAllExactRunningDownloadIds();  if (FileDownloadLog.NEED_LOG) {    FileDownloadLog.d(this,"pause all tasks %d",list.size());  }  for (  Integer id : list) {    pause(id);  }}  }
class C{  @Override public void addConnectionEventListener(ConnectionEventListener listener){  debugCode("addConnectionEventListener(listener);");  listeners.add(listener);}  }
class C{  private void changeMusicottUserFolder(String newApplicationUserFolder){  String newApplicationUserFolderPath=newApplicationUserFolder + File.pathSeparator;  File tracksFile=new File(newApplicationUserFolderPath + TRACKS_PERSISTENCE_FILE);  if (tracksFile.exists() && !tracksFile.delete())   errorDemon.showErrorDialog("Unable to delete tracks file",tracksFile.getAbsolutePath());  File waveformsFile=new File(newApplicationUserFolderPath + WAVEFORMS_PERSISTENCE_FILE);  if (waveformsFile.exists() && !waveformsFile.delete())   errorDemon.showErrorDialog("Unable to delete waveforms file",waveformsFile.getAbsolutePath());  File playlistsFile=new File(newApplicationUserFolderPath + PLAYLISTS_PERSISTENCE_FILE);  if (playlistsFile.exists() && !playlistsFile.delete())   errorDemon.showErrorDialog("Unable to delete playlists file",playlistsFile.getAbsolutePath());  preferences.setMusicottUserFolder(newApplicationUserFolder);  MusicLibrary.getInstance().saveLibrary(true,true,true);}  }
class C{  public static Timestamp convertDateValueToTimestamp(long dateValue,long timeNanos){  long millis=timeNanos / 1000000;  timeNanos-=millis * 1000000;  long s=millis / 1000;  millis-=s * 1000;  long m=s / 60;  s-=m * 60;  long h=m / 60;  m-=h * 60;  long ms=getMillis(null,yearFromDateValue(dateValue),monthFromDateValue(dateValue),dayFromDateValue(dateValue),(int)h,(int)m,(int)s,0);  Timestamp ts=new Timestamp(ms);  ts.setNanos((int)(timeNanos + millis * 1000000));  return ts;}  }
class C{  public List findUserByName(String username){  return new ArrayList();}  }
class C{  protected Map<String,Double> loadMPQA() throws FileNotFoundException {  Map<String,Double> lexiMap=new HashMap<String,Double>();  File file=new File("resources/lexi/subjclueslen1-HLTEMNLP05.tff");  Scanner scanner=new Scanner(file);  while (scanner.hasNextLine()) {    String[] line=scanner.nextLine().split(" ");    if (line.length == 6) {      String word=line[2].replaceFirst("word1=","");      Double val=0.0;      if (line[5].replaceFirst("priorpolarity=","").equals("positive")) {        val=1.0;      } else {        if (line[5].replaceFirst("priorpolarity=","").equals("negative")) {          val=-1.0;        }      }      if (line[0].replaceFirst("type=","").equals("strongsubj")) {        val=val * 5;      }      lexiMap.put(word,val);    }  }  scanner.close();  return lexiMap;}  }
class C{  private boolean isSensorMeasureInRange(byte measureIndex,byte[] range){  byte minRange=range[0];  byte maxRange=range[1];  if (HexDump.unsignedByte(maxRange) < HexDump.unsignedByte(minRange)) {    return ((HexDump.unsignedByte(measureIndex) >= HexDump.unsignedByte(minRange)) && (HexDump.unsignedByte(measureIndex) <= HexDump.unsignedByte((byte)0x71))) || (HexDump.unsignedByte(measureIndex) <= HexDump.unsignedByte(maxRange)) && (HexDump.unsignedByte(measureIndex) >= HexDump.unsignedByte((byte)0x00));  } else {    return (HexDump.unsignedByte(measureIndex) >= HexDump.unsignedByte(minRange)) && (HexDump.unsignedByte(measureIndex) <= HexDump.unsignedByte(maxRange));  }}  }
class C{  public void compactFile(long maxCompactTime){  store.setRetentionTime(0);  long start=System.currentTimeMillis();  while (store.compact(95,16 * 1024 * 1024)) {    store.sync();    store.compactMoveChunks(95,16 * 1024 * 1024);    long time=System.currentTimeMillis() - start;    if (time > maxCompactTime) {      break;    }  }}  }
class C{  private void checkResultCounts(String queryString,int minRows,int maxRows,String matchDisplay1,String matchDisplay2){  Cursor c=getQueryCursor(queryString);  assertNotNull(c);  assertTrue("Insufficient rows in filtered cursor",c.getCount() >= minRows);  int colQuery=c.getColumnIndexOrThrow(SearchManager.SUGGEST_COLUMN_QUERY);  int colDisplay1=c.getColumnIndexOrThrow(SearchManager.SUGGEST_COLUMN_TEXT_1);  int colDisplay2=c.getColumnIndex(SearchManager.SUGGEST_COLUMN_TEXT_2);  int foundRows=0;  c.moveToFirst();  while (!c.isAfterLast()) {    if (checkRow(c,colQuery,colDisplay1,colDisplay2,matchDisplay1,matchDisplay2)) {      foundRows++;    }    c.moveToNext();  }  assertTrue(minRows <= foundRows);  assertTrue(foundRows <= maxRows);  c.close();}  }
class C{  default void read(Packet packet){  ReflectionUtil.forEachRecursiveAnnotatedField(Sync.class,getClass(),null);}  }
class C{  public void resize(){  for (  ManualWidgetBase widget : widgets)   widget.resize();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.204 -0400",hash_original_method="44AD202744E75D3A75FDD22C341BBAC5",hash_generated_method="8FA66FB42ADD23257C58DADD7E309985") public LockableFileWriter(File file,Charset encoding,boolean append,String lockDir) throws IOException {  super();  file=file.getAbsoluteFile();  if (file.getParentFile() != null) {    FileUtils.forceMkdir(file.getParentFile());  }  if (file.isDirectory()) {    throw new IOException("File specified is a directory");  }  if (lockDir == null) {    lockDir=System.getProperty("java.io.tmpdir");  }  File lockDirFile=new File(lockDir);  FileUtils.forceMkdir(lockDirFile);  testLockDir(lockDirFile);  lockFile=new File(lockDirFile,file.getName() + LCK);  createLock();  out=initWriter(file,encoding,append);}  }
class C{  public final short readShort() throws IOException {  r.readFully(w,0,2);  return (short)((w[1] & 0xff) << 8 | (w[0] & 0xff));}  }
class C{  @Override public void rotate(PLRotation rotation){  if (rotation != null) {    this.setPitch(rotation.pitch);    this.setYaw(rotation.yaw);    this.setRoll(rotation.roll);  }}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x70F522C5,version=271) public int sceUsbCamGetBrightness(TPointer32 brightnessAddr){  brightnessAddr.setValue(brightness);  return 0;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text textNode;  Node retval;  Node lastChild;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("class");  value=titleAttr.getValue();  assertEquals("attrValue1","Y\u03b1",value);}  }
class C{  public static synchronized String format(Locale locale,String pattern,Date date){  String key=locale.toString() + '-' + pattern;  Object obj=data.get(key);  if (obj != null) {    return ((SimpleDateFormat)obj).format(date);  }  SimpleDateFormat sdf=new SimpleDateFormat(pattern,locale);  data.put(key,sdf);  return sdf.format(date);}  }
class C{  public Certificate toASN1Structure(){  return x509Certificate;}  }
class C{  public ComparableCircle(double radius,String color,boolean filled){  super(radius,color,filled);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader1=null;  String inputHeader2=null;  String outputHeader=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader1=args[0];  inputHeader2=args[1];  outputHeader=args[2];  if (inputHeader1.isEmpty() || outputHeader.isEmpty() || inputHeader2.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    float progress=0;    int numCells1=0;    int numCells2=0;    int i=0;    WhiteboxRasterInfo inputFile1=new WhiteboxRasterInfo(inputHeader1);    int rows1=inputFile1.getNumberRows();    int cols1=inputFile1.getNumberColumns();    double noData1=inputFile1.getNoDataValue();    WhiteboxRasterInfo inputFile2=new WhiteboxRasterInfo(inputHeader2);    int rows2=inputFile2.getNumberRows();    int cols2=inputFile2.getNumberColumns();    double noData2=inputFile2.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData1);    outputFile.setPreferredPalette(inputFile1.getPreferredPalette());    double minValue1=inputFile1.getMinimumValue();    double maxValue1=inputFile1.getMaximumValue();    int numBins1=Math.max(2 * (int)Math.ceil(maxValue1 - minValue1 + 1),(int)Math.ceil(Math.pow(rows1 * cols1,1.0 / 3)));    double binSize=(maxValue1 - minValue1) / numBins1;    long[] histogram=new long[numBins1];    int binNum;    int numBinsLessOne1=numBins1 - 1;    double[] data;    updateProgress("Loop 1 of 3: ",0);    for (row=0; row < rows1; row++) {      data=inputFile1.getRowValues(row);      for (col=0; col < cols1; col++) {        z=data[col];        if (z != noData1) {          numCells1++;          binNum=(int)((z - minValue1) / binSize);          if (binNum > numBinsLessOne1) {            binNum=numBinsLessOne1;          }          histogram[binNum]++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows1 - 1));      updateProgress("Loop 1 of 3: ",(int)progress);    }    updateProgress("Loop 2 of 3: ",0);    double[] cdf=new double[numBins1];    cdf[0]=histogram[0];    for (i=1; i < numBins1; i++) {      cdf[i]=cdf[i - 1] + histogram[i];    }    for (i=0; i < numBins1; i++) {      cdf[i]=cdf[i] / numCells1;    }    double minValue2=inputFile2.getMinimumValue();    double maxValue2=inputFile2.getMaximumValue();    int numBins2=Math.max(2 * (int)Math.ceil(maxValue2 - minValue2 + 1),(int)Math.ceil(Math.pow(rows2 * cols2,1.0 / 3)));    int numBinsLessOne2=numBins2 - 1;    long[] histogram2=new long[numBins2];    double[][] referenceCDF=new double[numBins2][2];    for (row=0; row < rows2; row++) {      data=inputFile2.getRowValues(row);      for (col=0; col < cols2; col++) {        z=data[col];        if (z != noData2) {          numCells2++;          binNum=(int)((z - minValue2) / binSize);          if (binNum > numBinsLessOne2) {            binNum=numBinsLessOne2;          }          histogram2[binNum]++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows1 - 1));      updateProgress("Loop 2 of 3: ",(int)progress);    }    referenceCDF[0][1]=histogram2[0];    for (i=1; i < numBins2; i++) {      referenceCDF[i][1]=referenceCDF[i - 1][1] + histogram2[i];    }    for (i=0; i < numBins2; i++) {      referenceCDF[i][0]=minValue2 + (i / (float)numBins2) * (maxValue2 - minValue2);      referenceCDF[i][1]=referenceCDF[i][1] / numCells2;    }    int[] startingVals=new int[11];    double pVal=0;    for (i=0; i < numBins2; i++) {      pVal=referenceCDF[i][1];      if (pVal < 0.1) {        startingVals[1]=i;      }      if (pVal < 0.2) {        startingVals[2]=i;      }      if (pVal < 0.3) {        startingVals[3]=i;      }      if (pVal < 0.4) {        startingVals[4]=i;      }      if (pVal < 0.5) {        startingVals[5]=i;      }      if (pVal < 0.6) {        startingVals[6]=i;      }      if (pVal < 0.7) {        startingVals[7]=i;      }      if (pVal < 0.8) {        startingVals[8]=i;      }      if (pVal < 0.9) {        startingVals[9]=i;      }      if (pVal <= 1) {        startingVals[10]=i;      }    }    updateProgress("Loop 3 of 3: ",0);    int j=0;    double xVal=0;    double x1, x2, p1, p2;    for (row=0; row < rows1; row++) {      data=inputFile1.getRowValues(row);      for (col=0; col < cols1; col++) {        z=data[col];        if (z != noData1) {          binNum=(int)((z - minValue1) / binSize);          if (binNum > numBinsLessOne1) {            binNum=numBinsLessOne1;          }          pVal=cdf[binNum];          j=(int)(Math.floor(pVal * 10));          for (i=startingVals[j]; i < numBins2; i++) {            if (referenceCDF[i][1] > pVal) {              if (i > 0) {                x1=referenceCDF[i - 1][0];                x2=referenceCDF[i][0];                p1=referenceCDF[i - 1][1];                p2=referenceCDF[i][1];                if (p1 != p2) {                  xVal=x1 + ((x2 - x1) * ((pVal - p1) / (p2 - p1)));                } else {                  xVal=x1;                }              } else {                xVal=referenceCDF[i][0];              }              break;            }          }          outputFile.setValue(row,col,xVal);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows1 - 1));      updateProgress("Loop 3 of 3: ",(int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void createMaxArtifactDetailsTable(){  maxArtifactDetailsTable=createArtifactDetailsTable();  maxArtifactDetailsTable.setId(UIComponentIdProvider.UPLOAD_ARTIFACT_DETAILS_TABLE_MAX);  maxArtifactDetailsTable.setContainerDataSource(artifactDetailsTable.getContainerDataSource());  addGeneratedColumn(maxArtifactDetailsTable);  if (!readOnly) {    addGeneratedColumnButton(maxArtifactDetailsTable);  }  setTableColumnDetails(maxArtifactDetailsTable);}  }
class C{  public boolean isVendorDisabled(){  return isSupplierDisabled() || isTechnologyProviderDisabled() || isResellerDisabled()|| isBrokerDisabled();}  }
class C{  @Override public void handleEvent(final ActivityStartEvent event){  if (!(event.getActType().startsWith("h") || event.getActType().startsWith("tta"))) {    Id facilityId=event.getFacilityId();    this.facilityPenalties.get(facilityId).getFacilityLoad().addArrival(event.getTime());  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SRuntimePackage.EXECUTION_CONTEXT__SLOTS:    return ((InternalEList<?>)getSlots()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public Value put(char c,Value value){  removeClearedEntries();  int hash=hashCode(c) & 0x7FFFFFFF;  int index=hash % table.length;  Entry e=table[index];  if (e != null) {    if ((e.hash == hash) && e.match(c)) {      Object old=e.get();      table[index]=new Entry(hash,c,value,e.next);      return (Value)old;    }    Entry o=e;    e=e.next;    while (e != null) {      if ((e.hash == hash) && e.match(c)) {        Object old=e.get();        e=new Entry(hash,c,value,e.next);        o.next=e;        return (Value)old;      }      o=e;      e=e.next;    }  }  int len=table.length;  if (count++ >= (len - (len >> 2))) {    rehash();    index=hash % table.length;  }  table[index]=new Entry(hash,c,value,table[index]);  return null;}  }
class C{  public JSONArray put(Collection<Object> value){  this.put(new JSONArray(value));  return this;}  }
class C{  public void testConstrStringWithoutExpNeg(){  String a="-732546982374982347892379283571094797.287346782359284756";  int aScale=18;  BigInteger bA=new BigInteger("-732546982374982347892379283571094797287346782359284756");  BigDecimal aNumber=new BigDecimal(a);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:13.472 -0500",hash_original_method="1474552803FC2685678A4E676E6971C0",hash_generated_method="004152CB5BF030549BAE435DF9336F43") public void disconnect() throws IOException {  super.disconnect();  _reader=null;  __writer=null;  _lastReplyLine=null;  _replyLines.setSize(0);  setState(DISCONNECTED_STATE);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void leftShift(IPoint[] hull){  for (int i=0; i < hull.length - 1; i++) {    if (hull[i].getX() <= hull[i + 1].getX()) {      IPoint copy[]=Arrays.copyOf(hull,hull.length);      System.arraycopy(hull,i,hull,0,hull.length - i);      System.arraycopy(copy,0,hull,hull.length - i,i);      return;    }  }}  }
class C{  void showInputBox(String message,Consumer<String> resultCallback){  showInputBox(message,null,resultCallback);}  }
class C{  public BigdataBindingSetResolverator start(final ExecutorService service){  return (BigdataBindingSetResolverator)super.start(service);}  }
class C{  Counter(ElemNumber numberElem,NodeSetDTM countNodes) throws TransformerException {  m_countNodes=countNodes;  m_numberElem=numberElem;}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (getDateWorkStart() != null && getDeliveryDays() != 0)   setDateWorkComplete(TimeUtil.addDays(getDateWorkStart(),getDeliveryDays())); else   if (getDateWorkStart() != null && getDeliveryDays() == 0 && getDateWorkComplete() != null)   setDeliveryDays(TimeUtil.getDaysBetween(getDateWorkStart(),getDateWorkComplete())); else   if (getDateWorkStart() == null && getDeliveryDays() != 0 && getDateWorkComplete() != null)   setDateWorkStart(TimeUtil.addDays(getDateWorkComplete(),getDeliveryDays() * -1));  return true;}  }
class C{  protected SVGOMFlowDivElement(){}  }
class C{  public static void resetStats(){  timeResults=new ArrayList<Double>();  totalResultCount=0;}  }
class C{  public Viennet(){  super(2,3);}  }
class C{  private static byte[] buildDnsQuery(String... query) throws IOException {  final Random random=new Random();  final ByteArrayOutputStream out=new ByteArrayOutputStream();  final byte[] id=new byte[2];  random.nextBytes(id);  out.write(id);  out.write(new byte[]{0x01,0x00});  out.write(new byte[]{0x00,0x01});  out.write(new byte[]{0x00,0x00});  out.write(new byte[]{0x00,0x00});  out.write(new byte[]{0x00,0x00});  for (  String phrase : query) {    final byte[] bytes=phrase.getBytes("US-ASCII");    out.write(bytes.length);    out.write(bytes);  }  out.write(0x00);  out.write(new byte[]{0x00,0x01});  out.write(new byte[]{0x00,0x01});  return out.toByteArray();}  }
class C{  public void test1() throws Exception {  String a="MULTILINESTRING ((0 0, 10 10), (10 10, 20 20))";  runBoundaryTest(a,BoundaryNodeRule.MULTIVALENT_ENDPOINT_BOUNDARY_RULE,"POINT (10 10)");}  }
class C{  public Graph applyTo(Graph graph){  Graph output=new EdgeListGraph(graph);  output=makeNewEdges(output);  for (  Triple t : nonColliders)   output.addUnderlineTriple(t.getX(),t.getY(),t.getZ());  for (  Edge e : removes)   if (!output.removeEdge(e))   return null;  Collection<OrderedNodePair> allOrients=makePairs(colliders);  allOrients.addAll(pairToOrdered(orients));  for (  OrderedNodePair or : allOrients) {    Node to=or.getSecond();    Node from=or.getFirst();    if (!output.setEndpoint(from,to,Endpoint.ARROW))     return null;  }  return output;}  }
class C{  public BillingDetailsType createBasicBillDocumentForOrganization(final OrganizationAddressData orgData,List<UdaBillingData> udasForCustomer,long organizationKey,long subscriptionKey,BillingResult billingResult,long startDate,long endDate,boolean storeResultXML){  final BillingDetailsType billingDetailsType=factory.createBillingDetailsType();  billingDetailsType.setTimezone(DateConverter.getCurrentTimeZoneAsUTCString());  if (storeResultXML) {    billingDetailsType.setKey(Long.valueOf(billingResult.getKey()));  }  if (orgData == null) {    throw new BillingRunFailed("Organization data has been deleted for organization key '" + organizationKey + "'");  }  billingDetailsType.setPeriod(factory.createPeriodType());  billingDetailsType.getPeriod().setStartDate(Long.valueOf(startDate));  billingDetailsType.getPeriod().setStartDateIsoFormat(XMLGregorianCalendarImpl.parse(DateConverter.convertLongToIso8601DateTimeFormat(startDate,TimeZone.getTimeZone(DateConverter.TIMEZONE_ID_GMT))));  billingDetailsType.getPeriod().setEndDate(Long.valueOf(endDate));  billingDetailsType.getPeriod().setEndDateIsoFormat(XMLGregorianCalendarImpl.parse(DateConverter.convertLongToIso8601DateTimeFormat(endDate,TimeZone.getTimeZone(DateConverter.TIMEZONE_ID_GMT))));  billingDetailsType.setOrganizationDetails(factory.createOrganizationDetailsType());  billingDetailsType.getOrganizationDetails().setEmail(orgData.getEmail());  billingDetailsType.getOrganizationDetails().setName(orgData.getOrganizationName());  billingDetailsType.getOrganizationDetails().setId(orgData.getOrganizationId());  billingDetailsType.getOrganizationDetails().setAddress(orgData.getAddress());  billingDetailsType.getOrganizationDetails().setPaymenttype(orgData.getPaymentTypeId());  if (udasForCustomer != null) {    billingDetailsType.getOrganizationDetails().setUdas(factory.createUdasType());    for (    UdaBillingData uda : udasForCustomer) {      final UdaType udaType=factory.createUdaType();      udaType.setId(uda.getIdentifier());      udaType.setValue(uda.getValue());      billingDetailsType.getOrganizationDetails().getUdas().getUda().add(udaType);    }  }  billingDetailsType.setSubscriptions(factory.createSubscriptionsType());  return billingDetailsType;}  }
class C{  public synchronized String generateBranchId(){  long num=rand.nextLong() + Utils.counter++ + System.currentTimeMillis();  byte bid[]=digester.digest(Long.toString(num).getBytes());  return SIPConstants.BRANCH_MAGIC_COOKIE + Utils.toHexString(bid) + this.signature;}  }
class C{  @Override @Pure public void resolve(){}  }
class C{  private void doUpdate(HttpServletRequest request,InstructionalOfferingModifyForm frm) throws Exception {  InstrOfferingConfigDAO iocdao=new InstrOfferingConfigDAO();  InstrOfferingConfig ioc=iocdao.get(frm.getInstrOffrConfigId());  Session hibSession=iocdao.getSession();  RoomGroup rg=RoomGroup.getGlobalDefaultRoomGroup(ioc.getSession());  sessionContext.checkPermission(ioc,Right.MultipleClassSetup);  Transaction tx=null;  try {    tx=hibSession.beginTransaction();    if (frm.isInstrOffrConfigUnlimited() != ioc.isUnlimitedEnrollment()) {      ioc.setUnlimitedEnrollment(frm.isInstrOffrConfigUnlimited());      ioc.setLimit(frm.isInstrOffrConfigUnlimited() ? 0 : frm.getInstrOffrConfigLimit());      hibSession.update(ioc);    } else     if (!frm.getInstrOffrConfigLimit().equals(ioc.getLimit())) {      ioc.setLimit(frm.getInstrOffrConfigLimit());      hibSession.update(ioc);    }    InstructionalMethod imeth=(frm.getInstructionalMethod() == null || frm.getInstructionalMethod() < 0 ? null : InstructionalMethodDAO.getInstance().get(frm.getInstructionalMethod(),hibSession));    if (!ToolBox.equals(ioc.getInstructionalMethod(),imeth)) {      ioc.setInstructionalMethod(imeth);      hibSession.update(ioc);    }    HashMap origSubpartManagingDept=new HashMap();    if (ioc.getSchedulingSubparts() != null) {      SchedulingSubpart ss=null;      for (Iterator it=ioc.getSchedulingSubparts().iterator(); it.hasNext(); ) {        ss=(SchedulingSubpart)it.next();        origSubpartManagingDept.put(ss.getUniqueId(),ss.getManagingDept());      }    }    HashMap tmpClassIdsToClasses=addClasses(frm,ioc,hibSession);    modifyClasses(frm,ioc,hibSession,rg,tmpClassIdsToClasses);    modifySubparts(ioc,origSubpartManagingDept,rg,hibSession);    deleteClasses(frm,ioc,hibSession,tmpClassIdsToClasses);    String className=ApplicationProperty.ExternalActionInstrOffrConfigChange.value();    ExternalInstrOffrConfigChangeAction configChangeAction=null;    if (className != null && className.trim().length() > 0) {      configChangeAction=(ExternalInstrOffrConfigChangeAction)(Class.forName(className).newInstance());      if (!configChangeAction.validateConfigChangeCanOccur(ioc.getInstructionalOffering(),hibSession)) {        throw new Exception("Configuration change violates rules for Add On, rolling back the change.");      }    }    ioc.getInstructionalOffering().computeLabels(hibSession);    ChangeLog.addChange(hibSession,sessionContext,ioc,ChangeLog.Source.CLASS_SETUP,ChangeLog.Operation.UPDATE,ioc.getInstructionalOffering().getControllingCourseOffering().getSubjectArea(),null);    tx.commit();    hibSession.flush();    hibSession.refresh(ioc);    hibSession.refresh(ioc.getInstructionalOffering());    if (configChangeAction != null) {      configChangeAction.performExternalInstrOffrConfigChangeAction(ioc.getInstructionalOffering(),hibSession);    }  } catch (  Exception e) {    Debug.error(e);    try {      if (tx != null && tx.isActive())       tx.rollback();    } catch (    Exception e1) {    }    throw e;  }}  }
class C{  @Override protected void register(ContainerCapabilityFactory containerCapabilityFactory){  containerCapabilityFactory.registerContainerCapability("tomee1x",TomeeContainerCapability.class);  containerCapabilityFactory.registerContainerCapability("tomee7x",TomeeContainerCapability.class);}  }
class C{  protected double unwrapValue(Object value){  return ((Double)value).doubleValue();}  }
class C{  String generateKey() throws OracleException {  byte[] data=null;  try {    data=HashFuncs.getRandom();  } catch (  Exception e) {    if (OracleLog.isLoggingEnabled())     log.warning(e.toString());  }  if (data == null) {    data=fetchGuid();  }  if (data == null) {    throw SODAUtils.makeException(SODAMessage.EX_UNABLE_TO_CREATE_UUID);  }  return (ByteArray.rawToHex(data));}  }
class C{  protected PrimaryExpressionImpl(){  super();}  }
class C{  public boolean isDisc(){  return disc;}  }
class C{  boolean isSingleton(){  return (emitters.size() == 1);}  }
class C{  @Override protected boolean _mouseEnteredDrawable(Drawable drawable){  Diagram diag=tab.getDiagram();  if (diag != null && diag.getStateForDrawable(drawable) != null) {    return true;  }  return false;}  }
class C{  public static String numberToString(Number number) throws JSONException {  if (number == null) {    throw new JSONException("Null pointer");  }  testValidity(number);  String string=number.toString();  if (string.indexOf('.') > 0 && string.indexOf('e') < 0 && string.indexOf('E') < 0) {    while (string.endsWith("0")) {      string=string.substring(0,string.length() - 1);    }    if (string.endsWith(".")) {      string=string.substring(0,string.length() - 1);    }  }  return string;}  }
class C{  private int findIndex(Object key,Object[] array){  int length=array.length;  int index=getModuloHash(key,length);  int last=(index + length - 2) % length;  while (index != last) {    if (array[index] == key || (array[index] == null)) {      break;    }    index=(index + 2) % length;  }  return index;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:34.789 -0500",hash_original_method="003188EC42D875435178AF0E478B9BB9",hash_generated_method="7A1D5B83B6B320ADCFCC06E5AE125442") public Node(Animator animation){  this.animation=animation;}  }
class C{  protected void fireVetoableChange(PropertyChangeEvent e) throws java.beans.PropertyVetoException {  m_vetoableChangeSupport.fireVetoableChange(e);}  }
class C{  protected List<VPlexRecommendation> createVPlexRecommendations(String vplexStorageSystemId,VirtualArray varray,VirtualPool vpool,List<Recommendation> recommendations){  List<VPlexRecommendation> vplexRecommendations=new ArrayList<VPlexRecommendation>();  for (  Recommendation recommendation : recommendations) {    VPlexRecommendation vplexRecommendation=new VPlexRecommendation();    vplexRecommendation.setSourceStorageSystem(recommendation.getSourceStorageSystem());    vplexRecommendation.setSourceStoragePool(recommendation.getSourceStoragePool());    vplexRecommendation.setResourceCount(recommendation.getResourceCount());    vplexRecommendation.setVPlexStorageSystem(URI.create(vplexStorageSystemId));    vplexRecommendation.setVirtualArray(varray.getId());    vplexRecommendation.setVirtualPool(vpool);    vplexRecommendations.add(vplexRecommendation);  }  return vplexRecommendations;}  }
class C{  private void appendFileContent(final MultipartEncoder encoder,final String instance,final ConfigurationPartMetadata metadata,final InputStream inputStream) throws Exception {  try {    Path contentLocation=Paths.get(instance,timestamp,metadata.getInstanceIdentifier(),metadata.getContentLocation());    encoder.startPart(MimeTypes.BINARY,new String[]{HEADER_CONTENT_TRANSFER_ENCODING + ": base64",HEADER_CONTENT_IDENTIFIER + ": " + metadata.getContentIdentifier()+ "; instance=\""+ metadata.getInstanceIdentifier()+ "\"",HEADER_CONTENT_LOCATION + ": /" + contentLocation,HEADER_HASH_ALGORITHM_ID + ": " + hashCalculator.getAlgoURI()});    encoder.write(hashCalculator.calculateFromStream(inputStream).getBytes());  } catch (  Exception e) {    log.error("Failed to append '{}' content to directory data",metadata.getContentFileName());    throw e;  }}  }
class C{  public Object beginNativeGraphicsAccess(){  if (nativeGraphicsState != null) {    throw new IllegalStateException("beginNativeGraphicsAccess invoked twice in a row");  }  Boolean a=Boolean.FALSE, b=Boolean.FALSE;  if (isAntiAliasedText()) {    b=Boolean.TRUE;  }  if (isAntiAliased()) {    a=Boolean.TRUE;  }  nativeGraphicsState=new Object[]{new Integer(getTranslateX()),new Integer(getTranslateY()),new Integer(getColor()),new Integer(getAlpha()),new Integer(getClipX()),new Integer(getClipY()),new Integer(getClipWidth()),new Integer(getClipHeight()),a,b};  translate(-getTranslateX(),-getTranslateY());  setAlpha(255);  setClip(0,0,Display.getInstance().getDisplayWidth(),Display.getInstance().getDisplayHeight());  return nativeGraphics;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:42.411 -0500",hash_original_method="3142FC22E0231F063D6673F4E3EF281C",hash_generated_method="058144D82C5711D4E5D6FAF50756AB26") @Override public void close() throws IOException {  PipedInputStream stream=target;  if (stream != null) {    stream.done();    target=null;  }}  }
class C{  public boolean hasConsistentReturnUsage(){  int n=endCheck();  return (n & END_RETURNS_VALUE) == 0 || (n & (END_DROPS_OFF | END_RETURNS | END_YIELDS)) == 0;}  }
class C{  public GlobalRosterEntryComboBox(Roster roster){  super(roster,Roster.ALLENTRIES,null,null,null,null,null,null,null);}  }
class C{  public boolean isCertification(){  return certification;}  }
class C{  public static void checkForRemainingOptions(String[] options) throws Exception {  int illegalOptionsFound=0;  StringBuffer text=new StringBuffer();  if (options == null) {    return;  }  for (  String option : options) {    if (option.length() > 0) {      illegalOptionsFound++;      text.append(option + ' ');    }  }  if (illegalOptionsFound > 0) {    throw new Exception("Illegal options: " + text);  }}  }
class C{  private void unhighlightAll(){  for (  StyleRange range : sourceViewer.getTextWidget().getStyleRanges()) {    if (range.foreground != inactiveColor) {      range.foreground=inactiveColor;      range.fontStyle=SWT.NORMAL;      sourceViewer.getTextWidget().setStyleRange(range);    }  }}  }
class C{  private void drawText(Canvas canvas){  if (this.text.length() <= 0) {    return;  }  if (this.mode == Mode.TEXT) {    this.textX=this.startX;    this.textY=this.startY;    this.textPaint=this.createPaint();  }  float textX=this.textX;  float textY=this.textY;  Paint paintForMeasureText=new Paint();  float textLength=paintForMeasureText.measureText(this.text);  float lengthOfChar=textLength / (float)this.text.length();  float restWidth=this.canvas.getWidth() - textX;  int numChars=(lengthOfChar <= 0) ? 1 : (int)Math.floor((double)(restWidth / lengthOfChar));  int modNumChars=(numChars < 1) ? 1 : numChars;  float y=textY;  for (int i=0, len=this.text.length(); i < len; i+=modNumChars) {    String substring="";    if ((i + modNumChars) < len) {      substring=this.text.substring(i,(i + modNumChars));    } else {      substring=this.text.substring(i,len);    }    y+=this.fontSize;    canvas.drawText(substring,textX,y,this.textPaint);  }}  }
class C{  protected StatechartScopeImpl(){  super();}  }
class C{  public static long abs(Long number){  return Math.abs(number.longValue());}  }
class C{  public Result consume(Node node){  assert node.getUsageCount() <= 1 : "should have already been checked";  int index=nodes.indexOf(node);  if (index == -1) {    return Result.notInBlock(node,rule.getPattern());  }  if (builder.hasOperand(node)) {    return Result.alreadyUsed(node,rule.getPattern());  }  startIndex=Math.min(startIndex,index);  if (consumed == null) {    consumed=new ArrayList<>(2);  }  consumed.add(node);  return Result.OK;}  }
class C{  public boolean deleteEntries(boolean force){  getEntries(true);  for (  MDunningRunEntry entry : m_entries) {    entry.delete(force);  }  boolean ok=getEntries(true).length == 0;  if (ok)   m_entries=null;  return ok;}  }
class C{  public boolean decode(BinaryMessage message,int start,int end){  reset();  for (int index=0; index < 49; index++) {    Con c=getConstellation(message,start + index * 4);    add(c);  }  Path path=mPathMetrics.getPath(Tribit.T0);  if (path != null && path.getNodes().size() == 50) {    message.clear(start,end);    List<Node> nodes=path.getNodes();    for (int x=1; x < 50; x++) {      message.load(start + ((x - 1) * 3),3,nodes.get(x).getState().getValue());    }    return true;  }  return false;}  }
class C{  protected FocusListener createFocusListener(){  return new AquaListUI.FocusHandler();}  }
class C{  public int compare(RandomAccessData o1,RandomAccessData o2,int startOffset){  if (o1 == o2) {    return 0;  }  if (o1 == POSITIVE_INFINITY) {    return 1;  }  if (o2 == POSITIVE_INFINITY) {    return -1;  }  int minBytesLen=Math.min(o1.size,o2.size);  for (int i=startOffset; i < minBytesLen; i++) {    int b1=o1.buffer[i] & 0xFF;    int b2=o2.buffer[i] & 0xFF;    if (b1 == b2) {      continue;    }    return b1 - b2;  }  return o1.size - o2.size;}  }
class C{  public byte[] decode(byte[] ascii){  return fromAscii(ascii);}  }
class C{  public UpdatableSketchBuilder(final SummaryFactory<S> summaryFactory){  nomEntries_=DEFAULT_NOMINAL_ENTRIES;  resizeFactor_=DEFAULT_RESIZE_FACTOR;  samplingProbability_=DEFAULT_SAMPLING_PROBABILITY;  summaryFactory_=summaryFactory;}  }
class C{  public static boolean isEmpty(CharSequence cs){  return cs == null || cs.length() == 0;}  }
class C{  public void onPlayerLoggedIn(final Player player){  for (  final LoginListener listener : listeners) {    listener.onLoggedIn(player);  }}  }
class C{  public boolean equals(Object obj){  if (obj == null || (obj.getClass() != getClass())) {    return false;  }  CSSLangCondition c=(CSSLangCondition)obj;  return c.lang.equals(lang);}  }
class C{  public List<String> splitStringWithDefaultDelimiter(String inputString){  List<String> splitString=new ArrayList<>();  if (inputString != null) {    StringTokenizer stringTokenizer=new StringTokenizer(inputString,configurationHelper.getProperty(ConfigurationValue.FIELD_DATA_DELIMITER));    while (stringTokenizer.hasMoreElements()) {      splitString.add(stringTokenizer.nextToken());    }  }  return splitString;}  }
class C{  public static ShortRange valueOf(String string){  if (string.isEmpty()) {    return null;  }  String[] nums=null;  int i=0;  boolean firstMinus=string.charAt(0) == '-';  if (firstMinus) {    string=string.substring(1);  }  while ((i < ByteRange.SPLITS.length) && ((nums == null) || (nums.length != 2))) {    nums=StringUtils.splitByWholeSeparator(string,ByteRange.SPLITS[i++],2);  }  if ((nums == null) || (nums.length != 2)) {    return null;  }  Integer min=DioriteMathUtils.asInt(firstMinus ? ("-" + nums[0]) : nums[0]);  if ((min == null) || (min < Short.MIN_VALUE)) {    return null;  }  Integer max=DioriteMathUtils.asInt(nums[1]);  if ((max == null) || (max > Short.MAX_VALUE) || (min > max)) {    return null;  }  return new ShortRange(min.shortValue(),max.shortValue());}  }
class C{  public void paintTableHeaderBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  private void validateVolumeNotPartOfApplication(List<Volume> volumes,String replicaType){  for (  Volume volume : volumes) {    VolumeGroup volumeGroup=volume.getApplication(_dbClient);    if (volumeGroup != null) {      throw APIException.badRequests.replicaOperationNotAllowedOnCGVolumePartOfCopyTypeVolumeGroup(volumeGroup.getLabel(),replicaType);    }  }}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == Type.class) {switch (baseOperationID) {case TypesPackage.TYPE___GET_TYPE_VARS:      return TypesPackage.TENUM___GET_TYPE_VARS;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == SyntaxRelatedTElement.class) {switch (baseOperationID) {default :  return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  @Nullable private InetSocketAddress findLeader(String brokers,String topic,int partition) throws Exception {  Map<String,String> brokerMap=Splitter.on(',').withKeyValueSeparator(":").split(brokers);  for (  Map.Entry<String,String> broker : brokerMap.entrySet()) {    try {      SimpleConsumer consumer=new SimpleConsumer(broker.getKey(),Integer.parseInt(broker.getValue()),SO_TIMEOUT,KafkaConsumerConfigurer.DEFAULT_FETCH_SIZE,"leaderLookup");      try {        TopicMetadataRequest request=new TopicMetadataRequest(ImmutableList.of(topic));        TopicMetadataResponse response=consumer.send(request);        for (        TopicMetadata topicData : response.topicsMetadata()) {          for (          PartitionMetadata partitionData : topicData.partitionsMetadata()) {            if (partitionData.partitionId() == partition) {              Broker leader=partitionData.leader();              return new InetSocketAddress(leader.host(),leader.port());            }          }        }      }  finally {        consumer.close();      }    } catch (    Exception e) {      throw new Exception(String.format("Failed to communicate with broker %s:%s for leader lookup for topic-partition %s-%s",broker.getKey(),broker.getValue(),topic,partition),e);    }  }  return null;}  }
class C{  @Override public Adapter createAdapter(Notifier target){  return modelSwitch.doSwitch((EObject)target);}  }
class C{  protected speciesOrGridDisplayStatementImpl(){  super();}  }
class C{  @Override public ClustreamClustererAdapter create(){  ClustreamClustererAdapter l=new ClustreamClustererAdapter(learner,dataset);  if (dataset == null) {    System.out.println("dataset null while creating");  }  return l;}  }
class C{  public void jump(int index){  if (index >= array.length) {    throw new IllegalArgumentException("cannot jump past " + "end of input");  }  pos=index;  end=array.length;}  }
class C{  private void verifyRegisterTypes(String where){  for (Register r=regpool.getFirstSymbolicRegister(); r != null; r=r.getNext()) {    if (r.isPhysical())     continue;    int types=0;    if (r.isLong())     types++;    if (r.isDouble())     types++;    if (r.isInteger())     types++;    if (r.isAddress())     types++;    if (r.isFloat())     types++;    if (types > 1) {      verror(where,"Register " + r + " has incompatible types.");    }  }}  }
class C{  public PubsubFuture<List<String>> publish(final String project,final String topic,final List<Message> messages){  return publish0(messages,Topic.canonicalTopic(project,topic));}  }
class C{  public static final int primaryOrder(int order){  return CollationElementIteratorICU.primaryOrder(order);}  }
class C{  public boolean isFifo(){  String cm=getCostingMethod();  return cm != null && cm.equals(COSTINGMETHOD_Fifo) && COSTELEMENTTYPE_Material.equals(getCostElementType());}  }
class C{  private static boolean isSpace(char ch){  return XMLCharacterRecognizer.isWhiteSpace(ch);}  }
class C{  public static ParticipationLevel find(String value){  return enums.find(value);}  }
class C{  @Override public Object function(final Object[] arguments){  editor.onModified();  return null;}  }
class C{  public void show(){  MsgManager manager=MsgManager.getInstance();  manager.add(this);}  }
class C{  public void ensureColumns(int columns,List<String> excludedVariableNames){  for (int col=getNumColumns(); col < columns; col++) {    int i=0;    String _name;    while (true) {      _name="X" + (++i);      if (getVariable(_name) == null && !excludedVariableNames.contains(_name))       break;    }    ContinuousVariable variable=new ContinuousVariable(_name);    addVariable(variable);  }}  }
class C{  @NonNull public static Animator scaleTo(float scaleX,float scaleY){  return scaleTo(scaleX,scaleY,0);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public final IntGrid3D lowerBound(int toNoLowerThanThisMuch){  int[][] fieldx=null;  int[] fieldxy=null;  final int width=this.width;  final int height=this.height;  final int length=this.length;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      fieldxy=fieldx[y];      for (int z=0; z < length; z++)       if (fieldxy[z] < toNoLowerThanThisMuch)       fieldxy[z]=toNoLowerThanThisMuch;    }  }  return this;}  }
class C{  public OrderedThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,ThreadFactory threadFactory){  this(corePoolSize,maximumPoolSize,keepAliveTime,unit,threadFactory,null);}  }
class C{  public SparseIntArray(int initialCapacity){  initialCapacity=ArrayUtils.idealIntArraySize(initialCapacity);  mKeys=new int[initialCapacity];  mValues=new int[initialCapacity];  mSize=0;}  }
class C{  public SystemPermissionSet(){}  }
class C{  public static void renderTemplate(String templateLocation,String templateString,Map<String,Object> context,Appendable outWriter) throws TemplateException, IOException {  renderTemplate(templateLocation,templateString,context,outWriter,true);}  }
class C{  public synchronized void clear(){  this.credMap.clear();}  }
class C{  protected void handleEmptyTag(TagElement tag) throws ChangedCharSetException {}  }
class C{  @Override protected void finalize() throws Throwable {  mColor=null;  super.finalize();}  }
class C{  @Override public DimensionColumnDataChunk[] readDimensionChunks(FileHolder fileReader,int... blockIndexes){  DimensionColumnDataChunk[] dataChunks=new DimensionColumnDataChunk[dimensionColumnChunk.size()];  for (int i=0; i < blockIndexes.length; i++) {    dataChunks[blockIndexes[i]]=readDimensionChunk(fileReader,blockIndexes[i]);  }  return dataChunks;}  }
class C{  public static boolean isColorDark(@ColorInt int color){  double brightness=Color.red(color) * 0.299 + Color.green(color) * 0.587 + Color.blue(color) * 0.114;  return brightness < 160;}  }
class C{  public static boolean isConnectionFast(int type,int subType){  if (type == ConnectivityManager.TYPE_WIFI) {    return true;  } else   if (type == ConnectivityManager.TYPE_MOBILE) {switch (subType) {case TelephonyManager.NETWORK_TYPE_1xRTT:      return false;case TelephonyManager.NETWORK_TYPE_CDMA:    return false;case TelephonyManager.NETWORK_TYPE_EDGE:  return false;case TelephonyManager.NETWORK_TYPE_EVDO_0:return true;case TelephonyManager.NETWORK_TYPE_EVDO_A:return true;case TelephonyManager.NETWORK_TYPE_GPRS:return false;case TelephonyManager.NETWORK_TYPE_HSDPA:return true;case TelephonyManager.NETWORK_TYPE_HSPA:return true;case TelephonyManager.NETWORK_TYPE_HSUPA:return true;case TelephonyManager.NETWORK_TYPE_UMTS:return true;case TelephonyManager.NETWORK_TYPE_EHRPD:return true;case TelephonyManager.NETWORK_TYPE_EVDO_B:return true;case TelephonyManager.NETWORK_TYPE_HSPAP:return true;case TelephonyManager.NETWORK_TYPE_IDEN:return false;case TelephonyManager.NETWORK_TYPE_LTE:return true;case TelephonyManager.NETWORK_TYPE_UNKNOWN:default :return false;}} else {return false;}}  }
class C{  long secureHash(long x){  writeLong(data,0,x);  aes.encrypt(data,0,16);  return readLong(data,0);}  }
class C{  public void testAddAll4(){  try {    LinkedBlockingDeque q=new LinkedBlockingDeque(1);    Integer[] ints=new Integer[SIZE];    for (int i=0; i < SIZE; ++i)     ints[i]=new Integer(i);    q.addAll(Arrays.asList(ints));    shouldThrow();  } catch (  IllegalStateException success) {  }}  }
class C{  protected String readJavaFile(String path){  StringBuffer result=new StringBuffer();  BufferedReader reader=null;  try {    reader=new BufferedReader(new FileReader(path));    String line=null;    while ((line=reader.readLine()) != null) {      result.append(line).append("\n");    }  } catch (  Exception exc) {    throw new RuntimeException(exc);  } finally {    if (reader != null) {      try {        reader.close();      } catch (      Exception exc) {      }    }  }  return result.toString();}  }
class C{  public void dispose(){  dbHelper.close();}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;}  }
class C{  @SuppressFBWarnings("ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD") public void execute() throws ClassNotFoundException {  Set<Edge> deletedEdgeSet=new HashSet<Edge>();  List<MarkedEdge> markedEdgeList=new LinkedList<MarkedEdge>();  for (Iterator<Edge> i=cfg.edgeIterator(); i.hasNext(); ) {    Edge edge=i.next();    if (!edge.isExceptionEdge()) {      continue;    }    ExceptionSet exceptionSet=typeDataflow.getEdgeExceptionSet(edge);    if (exceptionSet.isEmpty()) {      deletedEdgeSet.add(edge);    } else {      if (exceptionSet.isSingleton("java.lang.CloneNotSupportedException") && cfg.getMethodName().endsWith(".clone()")) {        String className=cfg.getMethodGen().getClassName();        if (Subtypes2.instanceOf(className,"java.lang.Cloneable")) {          deletedEdgeSet.add(edge);          continue;        }      }      boolean someChecked=exceptionSet.containsCheckedExceptions();      boolean someExplicit=exceptionSet.containsExplicitExceptions();      int flags=0;      if (someChecked) {        flags|=CHECKED_EXCEPTIONS_FLAG;      }      if (someExplicit) {        flags|=EXPLICIT_EXCEPTIONS_FLAG;      }      markedEdgeList.add(new MarkedEdge(edge,flags));    }  }  for (  Edge edge : deletedEdgeSet) {    cfg.removeEdge(edge);    if (STATS) {      ++numEdgesPruned;    }    cfgModified=true;  }  for (  MarkedEdge markedEdge : markedEdgeList) {    markedEdge.apply();  }}  }
class C{  private static DateFormat notNull(DateFormat formatter){  if (formatter == null) {    return DateFormat.getDateInstance(DateFormat.SHORT);  } else {    return formatter;  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeinsertbeforeinvalidnodetype.class,args);}  }
class C{  public DrawerBuilder withSelectedItem(int selectedItemIdentifier){  this.mSelectedItemIdentifier=selectedItemIdentifier;  return this;}  }
class C{  public void addSprite(float x,float y,float z,int w,int h,int d,boolean rotX,boolean rotY,boolean rotZ,boolean mirrorX,boolean mirrorY,float expansion){  addSprite(x,y,z,w,h,d,1.0F,rotX,rotY,rotZ,mirrorX,mirrorY,expansion);}  }
class C{  public boolean isMultiStatus(){  return false;}  }
class C{  private JSONWriter end(char mode,char c) throws JSONException {  if (this.mode != mode) {    throw new JSONException(mode == 'a' ? "Misplaced endArray." : "Misplaced endObject.");  }  this.pop(mode);  try {    this.writer.write(c);  } catch (  IOException e) {    throw new JSONException(e);  }  this.comma=true;  return this;}  }
class C{  public void score(INode state){  state.score(eval(state));}  }
class C{  private static void appendLogFileProperty(final Properties props){  if (!(props.containsKey(DistributedSystemConfig.LOG_FILE_NAME) || props.containsKey(SYSTEM_PROPERTY_PREFIX + DistributedSystemConfig.LOG_FILE_NAME))) {    props.put(DistributedSystemConfig.LOG_FILE_NAME,DEFAULT_LOG_FILE);  }}  }
class C{  public JKSSignatureToken(InputStream ksStream,String ksPassword){  try {    keyStore=KeyStore.getInstance(KeyStore.getDefaultType());    password=(ksPassword == null) ? null : ksPassword.toCharArray();    keyStore.load(ksStream,password);  } catch (  Exception e) {    throw new DSSException(e);  } finally {    if (ksStream != null) {      try {        ksStream.close();      } catch (      IOException e) {        logger.error(e.getMessage(),e);      }    }  }}  }
class C{  public ImageTile(double ullat,double ullon,double lrlat,double lrlon,ImageReader imageDecoder,CacheHandler cache){  super();  setRenderType(OMGraphic.RENDERTYPE_LATLON);  setColorModel(COLORMODEL_IMAGEICON);  lat=ullat;  lon=ullon;  lat2=lrlat;  lon2=lrlon;  this.imageDecoder=imageDecoder;  this.cache=cache;}  }
class C{  public boolean isMembersOnly(){  return membersOnly;}  }
class C{  public Point(TetradVector vector){  this.vector=vector.copy();}  }
class C{  private ODGFigure createPolylineFigure(Point2D.Double[] points,Map<AttributeKey,Object> a) throws IOException {  ODGPathFigure figure=new ODGPathFigure();  ODGBezierFigure bezier=new ODGBezierFigure();  for (  Point2D.Double p : points) {    bezier.addNode(new BezierPath.Node(p.x,p.y));  }  figure.removeAllChildren();  figure.add(bezier);  figure.setAttributes(a);  return figure;}  }
class C{  public CorruptIndexException(String message,DataOutput output,Throwable cause){  this(message,Objects.toString(output),cause);}  }
class C{  public AnnotationType annotationType(Attribute.Compound a,Symbol s){  Attribute.Compound atTarget=a.type.tsym.attribute(syms.annotationTargetType.tsym);  if (atTarget == null) {    return inferTargetMetaInfo(a,s);  }  Attribute atValue=atTarget.member(names.value);  if (!(atValue instanceof Attribute.Array)) {    Assert.error("annotationType(): bad @Target argument " + atValue + " ("+ atValue.getClass()+ ")");    return AnnotationType.DECLARATION;  }  Attribute.Array arr=(Attribute.Array)atValue;  boolean isDecl=false, isType=false;  for (  Attribute app : arr.values) {    if (!(app instanceof Attribute.Enum)) {      Assert.error("annotationType(): unrecognized Attribute kind " + app + " ("+ app.getClass()+ ")");      isDecl=true;      continue;    }    Attribute.Enum e=(Attribute.Enum)app;    if (e.value.name == names.TYPE) {      if (s.kind == Kinds.TYP)       isDecl=true;    } else     if (e.value.name == names.FIELD) {      if (s.kind == Kinds.VAR && s.owner.kind != Kinds.MTH)       isDecl=true;    } else     if (e.value.name == names.METHOD) {      if (s.kind == Kinds.MTH && !s.isConstructor())       isDecl=true;    } else     if (e.value.name == names.PARAMETER) {      if (s.kind == Kinds.VAR && s.owner.kind == Kinds.MTH && (s.flags() & Flags.PARAMETER) != 0)       isDecl=true;    } else     if (e.value.name == names.CONSTRUCTOR) {      if (s.kind == Kinds.MTH && s.isConstructor())       isDecl=true;    } else     if (e.value.name == names.LOCAL_VARIABLE) {      if (s.kind == Kinds.VAR && s.owner.kind == Kinds.MTH && (s.flags() & Flags.PARAMETER) == 0)       isDecl=true;    } else     if (e.value.name == names.ANNOTATION_TYPE) {      if (s.kind == Kinds.TYP && (s.flags() & Flags.ANNOTATION) != 0)       isDecl=true;    } else     if (e.value.name == names.PACKAGE) {      if (s.kind == Kinds.PCK)       isDecl=true;    } else     if (e.value.name == names.TYPE_USE) {      if (s.kind == Kinds.TYP || s.kind == Kinds.VAR || (s.kind == Kinds.MTH && !s.isConstructor() && !s.type.getReturnType().hasTag(TypeTag.VOID)) || (s.kind == Kinds.MTH && s.isConstructor()))       isType=true;    } else     if (e.value.name == names.TYPE_PARAMETER) {    } else {      Assert.error("annotationType(): unrecognized Attribute name " + e.value.name + " ("+ e.value.name.getClass()+ ")");      isDecl=true;    }  }  if (isDecl && isType) {    return AnnotationType.BOTH;  } else   if (isType) {    return AnnotationType.TYPE;  } else {    return AnnotationType.DECLARATION;  }}  }
class C{  public void updateFullName(String fullName){  user.setFullName(fullName);  mvpView.updateUserInfoTextView(user.toString());}  }
class C{  public ON ON(String columns){  return new ON(this,columns);}  }
class C{  protected String latlong2GEOREF(double latitude,double longitude){  int i;  char tmp='A';  char tmp1='A';  char tmp2='A';  int tmpi, tmpi1, tmpi2;  LatLonPoint llp=new LatLonPoint.Double(latitude,longitude);  DMSLatLonPoint dmsp=new DMSLatLonPoint(llp);  char[] GEOSTRING=new char[6];  if (longitude == 0.0000) {    tmp='N';    tmp1='A';    tmp2='0';  } else   if (longitude == -180.0000) {    tmp='A';    tmp1='A';    tmp2='0';  } else   if (longitude == 180.0000) {    tmp='Z';    tmp1='Q';    tmp2='9';  } else   if (longitude > 0.0000) {    tmpi=dmsp.lon_degrees / 15;    tmpi+=78;    if (tmpi >= 79) {      tmpi+=1;    }    if (tmpi > 90) {      tmpi=90;    }    tmp=(char)tmpi;    for (i=0; i * 15 < (int)(longitude + 0.9999); i++) {    }    tmpi1=15 * i - (int)(longitude);    if ((tmpi1 >= 3) && (tmpi1 < 8)) {      tmpi1+=1;    } else     if (tmpi1 >= 8) {      tmpi1+=2;    }    if (tmpi1 != 0) {      tmpi1=82 - tmpi1;      tmp1=(char)tmpi1;    } else {      tmp1='A';    }    if (tmp1 == 'R') {      tmp1='A';    }    tmpi2=(int)('0') + (dmsp.lon_minutes / 10);    tmp2=(char)tmpi2;  } else   if (longitude <= 0.0000) {    tmpi=(int)(((double)dmsp.lon_degrees) / 15.0 - 0.999);    tmpi=77 - Math.abs(tmpi);    if (tmpi >= 73) {      tmpi+=1;    }    if (tmpi > 77) {      tmpi=77;    }    tmp=(char)tmpi;    for (i=0; i * 15 < (int)(Math.abs((longitude - 0.9999))); i++) {    }    tmpi1=i * 15 - (int)(Math.abs((longitude - 0.9999)));    if ((tmpi1 >= 8) && (tmpi1 < 13)) {      tmpi1+=1;    } else     if (tmpi1 >= 13) {      tmpi1+=2;    }    if (tmpi1 > 16) {      tmpi1=16;    }    tmpi1+=65;    tmp1=(char)tmpi1;    if ((int)(dmsp.lon_minutes / 10) != 0) {      tmpi2=((int)'0') + (6 - (int)(dmsp.lon_minutes / 10));      tmp2=(char)tmpi2;    } else {      tmp2='0';    }  }  GEOSTRING[0]=tmp;  GEOSTRING[2]=tmp1;  GEOSTRING[4]=tmp2;  if (latitude == 0.0000) {    tmp='G';    tmp1='A';    tmp2='0';  } else   if (latitude == 90.0000) {    tmp='M';    tmp1='Q';    tmp2='9';  } else   if (latitude == -90.0000) {    tmp='A';    tmp1='A';    tmp2='0';  } else   if (latitude > 0.0000) {    tmpi=dmsp.lat_degrees / 15;    tmpi+=71;    if (tmpi >= 73) {      tmpi+=1;    }    if (tmpi > 77) {      tmpi=77;    }    tmp=(char)tmpi;    for (i=0; i * 15 < (int)(latitude + 0.9999); i++) {    }    tmpi1=15 * i - (int)(latitude);    if ((tmpi1 >= 3) && (tmpi1 < 8)) {      tmpi1+=1;    } else     if (tmpi1 >= 8) {      tmpi1+=2;    }    tmpi1=82 - tmpi1;    tmp1=(char)tmpi1;    if (tmp1 == 'R') {      tmp1='A';    }    if ((dmsp.lat_minutes / 10) != 0) {      tmpi2=((int)'0') + (int)(dmsp.lat_minutes / 10);      tmp2=(char)tmpi2;    } else {      tmp2='0';    }  } else   if (latitude < 0.0000) {    tmpi=(int)((double)dmsp.lat_degrees / 15.0 - 0.999);    tmpi=71 - Math.abs(tmpi);    if (tmpi < 65) {      tmpi=65;    }    for (i=0; i * 15 < (int)(Math.abs((latitude - 0.9999))); i++) {    }    tmpi1=i * 15 - (int)(Math.abs((latitude - 0.9999)));    if ((tmpi1 >= 8) && (tmpi1 < 13)) {      tmpi1+=1;    } else     if (tmpi1 >= 13) {      tmpi1+=2;    }    if (tmpi1 > 16) {      tmpi1=16;    }    tmpi1=65 + tmpi1;    tmp1=(char)tmpi1;    tmpi2=((int)'0') + (6 - (int)(dmsp.lat_minutes / 10));    tmp2=(char)tmpi2;  }  GEOSTRING[1]=tmp;  GEOSTRING[3]=tmp1;  GEOSTRING[5]=tmp2;  String ret=new String(GEOSTRING);  if (Debug.debugging("maketocdetail")) {    Debug.output("latlon2GEOREF: lat = " + latitude + ", lon = "+ longitude+ ", GEOREF = "+ ret);  }  return ret;}  }
class C{  public static Bitmap decode(byte[] data,int downSampleFactor,int pictureOrientation,boolean needMirror){  final BitmapFactory.Options opts=new BitmapFactory.Options();  opts.inSampleSize=downSampleFactor;  final Bitmap pictureBitmap=BitmapFactory.decodeByteArray(data,0,data.length,opts);  if (pictureOrientation == 0 && !needMirror) {    return pictureBitmap;  }  Matrix m=new Matrix();  if (pictureOrientation != 0) {    m.preRotate(pictureOrientation);  }  if (needMirror) {    m.setScale(-1f,1f);  }  return Bitmap.createBitmap(pictureBitmap,0,0,pictureBitmap.getWidth(),pictureBitmap.getHeight(),m,false);}  }
class C{  public int addRow(int parentRow){  int r=super.addRow();  put(r,parentRow);  return r;}  }
class C{  protected SizeRequirements calculateMinorAxisRequirements(int axis,SizeRequirements r){  if (r == null) {    r=new SizeRequirements();  }  if (!spanSetFromAttributes(axis,r,cssWidth,cssHeight)) {    r=super.calculateMinorAxisRequirements(axis,r);  } else {    SizeRequirements parentR=super.calculateMinorAxisRequirements(axis,null);    int margin=(axis == X_AXIS) ? getLeftInset() + getRightInset() : getTopInset() + getBottomInset();    r.minimum-=margin;    r.preferred-=margin;    r.maximum-=margin;    constrainSize(axis,r,parentR);  }  if (axis == X_AXIS) {    Object o=getAttributes().getAttribute(CSS.Attribute.TEXT_ALIGN);    if (o != null) {      String align=o.toString();      if (align.equals("center")) {        r.alignment=0.5f;      } else       if (align.equals("right")) {        r.alignment=1.0f;      } else {        r.alignment=0.0f;      }    }  }  return r;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:09.527 -0500",hash_original_method="CBF42E478CC456FFD10D6777F319F0BD",hash_generated_method="F442059822B057D55A287710A70DCBAE") public Intent replaceExtras(Bundle extras){  mExtras=extras.mMap;  return this;}  }
class C{  public static byte[] objectToByte(Object obj){  ObjectOutputStream oos=null;  ByteArrayOutputStream bos=null;  try {    bos=new ByteArrayOutputStream();    oos=new ObjectOutputStream(bos);    oos.writeObject(obj);    return bos.toByteArray();  } catch (  IOException e) {    e.printStackTrace();  } finally {    IOUtils.close(oos);    IOUtils.close(bos);  }  return null;}  }
class C{  public static IClasspathEntry findRawClasspathEntryFor(IJavaProject javaProject,String fullyQualifiedName) throws JavaModelException {  IType type=javaProject.findType(fullyQualifiedName);  if (type != null) {    IPackageFragmentRoot packageFragmentRoot=(IPackageFragmentRoot)type.getAncestor(IJavaElement.PACKAGE_FRAGMENT_ROOT);    JavaProject jProject=(JavaProject)javaProject;    IClasspathEntry[] rawClasspath=javaProject.getRawClasspath();    for (    IClasspathEntry rawClasspathEntry : rawClasspath) {      IClasspathEntry[] resolvedClasspath=jProject.resolveClasspath(new IClasspathEntry[]{rawClasspathEntry});      IPackageFragmentRoot[] computePackageFragmentRoots=jProject.computePackageFragmentRoots(resolvedClasspath,true,null);      if (Arrays.asList(computePackageFragmentRoots).contains(packageFragmentRoot)) {        return rawClasspathEntry;      }    }    return packageFragmentRoot.getRawClasspathEntry();  }  return null;}  }
class C{  private void addExposedTypes(ParameterizedType type,Class<?> cause){  boolean alreadyDone=done(type);  if (!pruned(type)) {    visit(type);    recordExposure(type,cause);  }  if (alreadyDone) {    return;  }  logger.debug("Adding exposed types from {}, which is the raw type on parameterized type {}",type.getRawType(),type);  addExposedTypes(type.getRawType(),cause);  for (  Type typeArg : type.getActualTypeArguments()) {    logger.debug("Adding exposed types from {}, which is a type argument on parameterized type {}",typeArg,type);    addExposedTypes(typeArg,cause);  }}  }
class C{  public static VAlarm display(Trigger trigger,String displayText){  VAlarm alarm=new VAlarm(Action.display(),trigger);  alarm.setDescription(displayText);  return alarm;}  }
class C{  protected void notifyDataInvalidatedEvent(){  if (datasetObservers != null) {    for (    DataSetObserver observer : datasetObservers) {      observer.onInvalidated();    }  }}  }
class C{  public void verifyErrorPayload(JavaResult javaResult) throws Exception {  EchoCommand command=javaResult.getBean(EchoCommand.class);  if (null == command || null == command.getStatus() || HDSConstants.FAILED_STR.equalsIgnoreCase(command.getStatus())) {    Error error=javaResult.getBean(Error.class);    log.info("Hitachi command failed with error code:{} with message:{} for request:{}",new Object[]{error.getCode().toString(),error.getDescription(),error.getSource()});    throw HDSException.exceptions.errorResponseReceived(error.getCode(),error.getDescription());  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:34.497 -0500",hash_original_method="B0F53EB98996816F5E75DFC90AF9D2B6",hash_generated_method="9BD22407E4A803D0343BA36C0A2A2920") public boolean hasDisplayName(){  return (displayName != null);}  }
class C{  private static void generateCode(PojoDescriptor pojo,boolean key,String pkg,File pkgFolder,boolean constructor,boolean includeKeys,ConfirmCallable askOverwrite) throws IOException {  String type=key ? pojo.keyClassName() : pojo.valueClassName();  checkValidJavaIdentifier(pkg,true,"Package",type);  checkValidJavaIdentifier(type,false,"Type",type);  ensurePackages(pkgFolder);  File out=new File(pkgFolder,type + ".java");  if (out.exists()) {    MessageBox.Result choice=askOverwrite.confirm(out.getName());    if (CANCEL == choice)     throw new IllegalStateException("POJO generation was canceled!");    if (NO == choice || NO_TO_ALL == choice)     return;  }  Collection<String> src=new ArrayList<>(256);  header(src,pkg,type,type + " implements Serializable","java.io.*");  add1(src,"/** */");  add1(src,"private static final long serialVersionUID = 0L;");  add0(src,"");  Collection<PojoField> fields=key ? pojo.keyFields() : pojo.valueFields(includeKeys);  for (  PojoField field : fields) {    String fldName=field.javaName();    checkValidJavaIdentifier(fldName,false,"Field",type);    add1(src,"/** Value for " + fldName + ". */");    if (key && field.affinityKey())     add1(src,"@AffinityKeyMapped");    add1(src,"private " + javaTypeName(field) + " "+ fldName+ ";");    add0(src,"");  }  if (constructor) {    add1(src,"/**");    add1(src," * Empty constructor.");    add1(src," */");    add1(src,"public " + type + "() {");    add2(src,"// No-op.");    add1(src,"}");    add0(src,"");    add1(src,"/**");    add1(src," * Full constructor.");    add1(src," */");    add1(src,"public " + type + "(");    Iterator<PojoField> it=fields.iterator();    while (it.hasNext()) {      PojoField field=it.next();      add2(src,javaTypeName(field) + " " + field.javaName()+ (it.hasNext() ? "," : ""));    }    add1(src,") {");    for (    PojoField field : fields)     add2Fmt(src,"this.%1$s = %1$s;",field.javaName());    add1(src,"}");    add0(src,"");  }  for (  PojoField field : fields) {    String fldName=field.javaName();    String fldType=javaTypeName(field);    String mtdName=capitalizeFirst(fldName);    add1(src,"/**");    add1(src," * Gets " + fldName + ".");    add1(src," *");    add1(src," * @return Value for " + fldName + ".");    add1(src," */");    add1(src,"public " + fldType + " get"+ mtdName+ "() {");    add2(src,"return " + fldName + ";");    add1(src,"}");    add0(src,"");    add1(src,"/**");    add1(src," * Sets " + fldName + ".");    add1(src," *");    add1(src," * @param " + fldName + " New value for "+ fldName+ ".");    add1(src," */");    add1(src,"public void set" + mtdName + "("+ fldType+ " "+ fldName+ ") {");    add2(src,"this." + fldName + " = "+ fldName+ ";");    add1(src,"}");    add0(src,"");  }  add1(src,"/** {@inheritDoc} */");  add1(src,"@Override public boolean equals(Object o) {");  add2(src,"if (this == o)");  add3(src,"return true;");  add0(src,"");  add2(src,"if (!(o instanceof " + type + "))");  add3(src,"return false;");  add0(src,"");  add2Fmt(src,"%1$s that = (%1$s)o;",type);  for (  PojoField field : fields) {    add0(src,"");    String javaName=field.javaName();    if (field.primitive()) {switch (field.javaTypeName()) {case "float":        add2Fmt(src,"if (Float.compare(%1$s, that.%1$s) != 0)",javaName);      break;case "double":    add2Fmt(src,"if (Double.compare(%1$s, that.%1$s) != 0)",javaName);  break;default :add2Fmt(src,"if (%1$s != that.%1$s)",javaName);}} else add2Fmt(src,"if (%1$s != null ? !%1$s.equals(that.%1$s) : that.%1$s != null)",javaName);add3(src,"return false;");}add0(src,"");add2(src,"return true;");add1(src,"}");add0(src,"");add1(src,"/** {@inheritDoc} */");add1(src,"@Override public int hashCode() {");List<String> hash=new ArrayList<>(fields.size() * 2);boolean first=true;boolean tempVar=false;for (PojoField field : fields) {String javaName=field.javaName();if (!first) add0(hash,"");if (field.primitive()) {switch (field.javaTypeName()) {case "boolean":add2Fmt(hash,first ? "int res = %s ? 1 : 0;" : "res = 31 * res + (%s ? 1 : 0);",javaName);break;case "byte":case "short":add2Fmt(hash,first ? "int res = (int)%s;" : "res = 31 * res + (int)%s;",javaName);break;case "int":add2Fmt(hash,first ? "int res = %s;" : "res = 31 * res + %s;",javaName);break;case "long":add2Fmt(hash,first ? "int res = (int)(%1$s ^ (%1$s >>> 32));" : "res = 31 * res + (int)(%1$s ^ (%1$s >>> 32));",javaName);break;case "float":add2Fmt(hash,first ? "int res = %1$s != +0.0f ? Float.floatToIntBits(%1$s) : 0;" : "res = 31 * res + (%1$s != +0.0f ? Float.floatToIntBits(%1$s) : 0);",javaName);break;case "double":add2Fmt(hash,(tempVar ? "ig_hash_temp" : "long ig_hash_temp") + " = Double.doubleToLongBits(%s);",javaName);add0(hash,"");add2Fmt(hash,first ? "int res = (int)(ig_hash_temp ^ (ig_hash_temp >>> 32));" : "res = 31 * res + (int)(ig_hash_temp ^ (ig_hash_temp >>> 32));",javaName);tempVar=true;break;}} else add2Fmt(hash,first ? "int res = %1$s != null ? %1$s.hashCode() : 0;" : "res = 31 * res + (%1$s != null ? %1$s.hashCode() : 0);",javaName);first=false;}for (String line : hash) add0(src,line);add0(src,"");add2(src,"return res;");add1(src,"}");add0(src,"");add1(src,"/** {@inheritDoc} */");add1(src,"@Override public String toString() {");Iterator<PojoField> it=fields.iterator();add2Fmt(src,"return \"%1$s [%2$s=\" + %2$s +",type,it.next().javaName());while (it.hasNext()) add3(src,String.format("\", %1$s=\" + %1$s +",it.next().javaName()));add3(src,"\"]\";");add1(src,"}");add0(src,"}");add0(src,"");write(src,out);}  }
class C{  public HttpServletResponse doPut(HttpServlet servlet) throws Exception {  return doMethod("PUT",servlet);}  }
class C{  private void validateTagUpdateRequest(TagUpdateRequest tagUpdateRequest){  Assert.notNull(tagUpdateRequest,"A tag update request must be specified.");  tagUpdateRequest.setDisplayName(alternateKeyHelper.validateStringParameter("display name",tagUpdateRequest.getDisplayName()));  if (tagUpdateRequest.getParentTagKey() != null) {    tagHelper.validateTagKey(tagUpdateRequest.getParentTagKey());  }}  }
class C{  public ReadDomainOfflineScriptCommand(Configuration configuration,String resourcePath){  super(configuration,resourcePath);}  }
class C{  private void freeContiguousChunk(Address chunk){  int numChunks=HeapLayout.vmMap.getContiguousRegionChunks(chunk);  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(numChunks == 1 || metaDataPagesPerRegion == 0);  int chunkStart=Conversions.bytesToPages(chunk.diff(start));  int chunkEnd=chunkStart + (numChunks * PAGES_IN_CHUNK);  while (chunkStart < chunkEnd) {    freeList.setUncoalescable(chunkStart);    if (metaDataPagesPerRegion > 0)     freeList.free(chunkStart);    int tmp=freeList.alloc(PAGES_IN_CHUNK,chunkStart);    if (VM.VERIFY_ASSERTIONS)     VM.assertions._assert(tmp == chunkStart);    chunkStart+=PAGES_IN_CHUNK;    pagesCurrentlyOnFreeList-=(PAGES_IN_CHUNK - metaDataPagesPerRegion);  }  space.releaseDiscontiguousChunks(chunk);}  }
class C{  public static double heapSize(Iterable<ClusterNode> nodes,int precision){  double heap=0.0;  for (  ClusterNode n : nodesPerJvm(nodes)) {    ClusterMetrics m=n.metrics();    heap+=Math.max(m.getHeapMemoryInitialized(),m.getHeapMemoryMaximum());  }  return roundedHeapSize(heap,precision);}  }
class C{  public SmbFile(URL url){  this(url,new NtlmPasswordAuthentication(url.getUserInfo()));}  }
class C{  void sendMessageToHandlerNoControllerReset(List<OFMessage> messages) throws Exception {  setupMessageEvent(messages);  handler.messageReceived(ctx,messageEvent);}  }
class C{  @SuppressWarnings("unchecked") public EventMapperFunctor<E,AtomicInteger,AtomicInteger> counter(){  return ((EventMapperFunctor<E,AtomicInteger,AtomicInteger>)this).startWith(new AtomicInteger(0)).does(null);}  }
class C{  private SMat smatFromIndex() throws IOException {  TermsEnum termsEnumDummy=null;  SMat S;  Terms terms=this.luceneUtils.getTermsForField(contentsField);  TermsEnum termsEnumForCount=terms.iterator(termsEnumDummy);  int numTerms=0, nonZeroVals=0;  BytesRef bytes;  while ((bytes=termsEnumForCount.next()) != null) {    Term term=new Term(contentsField,bytes);    if (this.luceneUtils.termFilter(term))     numTerms++;    DocsEnum docsEnum=this.luceneUtils.getDocsForTerm(term);    while (docsEnum.nextDoc() != DocsEnum.NO_MORE_DOCS) {      ++nonZeroVals;    }  }  VerbatimLogger.info(String.format("There are %d terms (and %d docs).\n",numTerms,this.luceneUtils.getNumDocs()));  termList=new String[numTerms];  S=new SMat(this.luceneUtils.getNumDocs(),numTerms,nonZeroVals);  TermsEnum termsEnum=terms.iterator(termsEnumDummy);  int termCounter=0;  int firstNonZero=0;  while ((bytes=termsEnum.next()) != null) {    Term term=new Term(contentsField,bytes);    if (this.luceneUtils.termFilter(term)) {      S.pointr[termCounter]=firstNonZero;      termList[termCounter]=term.text();      DocsEnum docsEnum=this.luceneUtils.getDocsForTerm(term);      while (docsEnum.nextDoc() != DocsEnum.NO_MORE_DOCS) {        S.rowind[firstNonZero]=docsEnum.docID();        float value=luceneUtils.getGlobalTermWeight(term);        value=value * (float)luceneUtils.getLocalTermWeight(docsEnum.freq());        S.value[firstNonZero]=value;        firstNonZero++;      }      termCounter++;    }  }  S.pointr[S.cols]=S.vals;  return S;}  }
class C{  public Long positionForNext(){  return nextCursor == null ? null : nextCursor.maxPosition;}  }
class C{  @SuppressWarnings("unchecked") public T withTime(long time){  response.timestamp=Assert.argNot(time,time <= 0,"timestamp cannot be negative");  return (T)this;}  }
class C{  private int dp2px(int dp){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,this.mMetrics);}  }
class C{  public JRangeSlider createVerticalRangeSlider(){  return createRangeSlider(JRangeSlider.VERTICAL,JRangeSlider.RIGHTLEFT_BOTTOMTOP);}  }
class C{  public static int generateInt32(int crc,int value){  crc=next(crc,(value >> 24));  crc=next(crc,(value >> 16));  crc=next(crc,(value >> 8));  crc=next(crc,(value >> 0));  return crc;}  }
class C{  protected Ref assignOp() throws PageException {  Ref ref=contOp();  if (cfml.forwardIfCurrent('=')) {    cfml.removeSpace();    if (mode == STATIC || ref instanceof Literal) {      ref=new DynAssign(ref,assignOp(),limited);    } else {      ref=new Assign(ref,assignOp(),limited);    }  }  return ref;}  }
class C{  private String _serialize(Object object,Map<Object,String> done) throws ConverterException {  type="OBJECT";  String rtn;  deep++;  if (object == null) {    rtn=goIn() + "";    deep--;    type="NULL";    return rtn;  }  if (object instanceof String) {    rtn=goIn() + XMLUtil.escapeXMLString(object.toString());    deep--;    type="STRING";    return rtn;  }  if (object instanceof Number) {    rtn=goIn() + ((Number)object).doubleValue();    deep--;    type="NUMBER";    return rtn;  }  if (object instanceof Boolean) {    rtn=goIn() + ((Boolean)object).booleanValue();    deep--;    type="BOOLEAN";    return rtn;  }  if (object instanceof DateTime) {    rtn=_serializeDateTime((DateTime)object);    deep--;    type="DATE";    return rtn;  }  if (object instanceof Date) {    rtn=_serializeDate((Date)object);    deep--;    type="DATE";    return rtn;  }  Object raw=LazyConverter.toRaw(object);  String strId=done.get(raw);  if (strId != null) {    rtn=goIn() + "<REF id=\"" + strId+ "\"\\>";    deep--;    type="NULL";    return rtn;  }  strId=Caster.toString(++this.id);  done.put(raw,strId);  try {    if (object instanceof Component) {      rtn=_serializeComponent((Component)object,done);      deep--;      return rtn;    }    if (object instanceof Struct) {      rtn=_serializeStruct((Struct)object,done,strId);      deep--;      return rtn;    }    if (object instanceof Map) {      rtn=_serializeMap((Map)object,done);      deep--;      return rtn;    }    if (object instanceof Array) {      rtn=_serializeArray((Array)object,done,strId);      deep--;      return rtn;    }    if (object instanceof List) {      rtn=_serializeList((List)object,done,strId);      deep--;      return rtn;    }    if (object instanceof Query) {      rtn=_serializeQuery((Query)object,done,strId);      deep--;      return rtn;    }  }  finally {    done.remove(raw);  }  rtn="<STRUCT ID=\"" + strId + "\" TYPE=\""+ Caster.toTypeName(object)+ "\"></STRUCT>";  deep--;  return rtn;}  }
class C{  public ObjectFactory(){}  }
class C{  public void invalidate(){  shareKeyManager.invalidate();}  }
class C{  public static SchemaElementComplex findRootElement(SchemaModel schema,String namespace,String elementName){  if ((namespace != null) && namespace.length() != 0) {    for (    SchemaElementComplex complexElement : schema.getComponents()) {      if ((complexElement.getNamespace().equals(namespace)) && (complexElement.getName().equals(elementName))) {        return complexElement;      }    }  } else {    for (    SchemaElementComplex complexElement : schema.getComponents()) {      if (complexElement.getName().equals(elementName)) {        return complexElement;      }    }  }  if (elementName.startsWith("//")) {    elementName=elementName.substring(2);    for (    SchemaElementComplex complexElement : schema.getComponents()) {      SchemaElementComplex match=recursiveDeepMatch(complexElement,namespace,elementName);      if (match != null) {        return match;      }    }  }  String text="Could not find root element declaration in schema for element name '" + elementName + '\'';  if (namespace != null) {    text=text + " in namespace '" + namespace+ '\'';  }  throw new EPException(text);}  }
class C{  private void promoteSnapshotsToVolume(List<BlockSnapshot> snapshots,DbClient dbClient){  Map<String,BlockConsistencyGroup> groupCache=new HashMap<>();  for (  BlockSnapshot snapshot : snapshots) {    List<Volume> volumesWithNativeId=CustomQueryUtility.getActiveVolumeByNativeGuid(dbClient,snapshot.getNativeGuid());    if (volumesWithNativeId.isEmpty()) {      URI cgId=getBlockConsistencyGroupForPromotedSnapshot(snapshot,groupCache,dbClient);      URI sourceObjURI=snapshot.getParent().getURI();      if (URIUtil.isType(sourceObjURI,Volume.class)) {        Volume sourceVolume=dbClient.queryObject(Volume.class,sourceObjURI);        Volume volume=new Volume();        volume.setId(URIUtil.createId(Volume.class));        volume.setCreationTime(snapshot.getCreationTime());        volume.setWWN(snapshot.getWWN());        volume.setNativeGuid(snapshot.getNativeGuid());        volume.setNativeId(snapshot.getNativeId());        volume.setLabel(snapshot.getLabel());        volume.setDeviceLabel(snapshot.getDeviceLabel());        volume.setAlternateName(snapshot.getAlternateName());        volume.setSyncActive(true);        volume.setAccessState(sourceVolume.getAccessState());        volume.setCapacity(sourceVolume.getCapacity());        volume.setProvisionedCapacity(snapshot.getProvisionedCapacity());        volume.setAllocatedCapacity(snapshot.getAllocatedCapacity());        volume.setThinlyProvisioned(sourceVolume.getThinlyProvisioned());        volume.setVirtualPool(sourceVolume.getVirtualPool());        volume.setVirtualArray(snapshot.getVirtualArray());        volume.setProject(snapshot.getProject());        volume.setTenant(sourceVolume.getTenant());        volume.setStorageController(snapshot.getStorageController());        volume.setSystemType(snapshot.getSystemType());        volume.setPool(sourceVolume.getPool());        StringSet protocols=new StringSet();        protocols.addAll(snapshot.getProtocol());        volume.setProtocol(protocols);        volume.setOpStatus(new OpStatusMap());        volume.setConsistencyGroup(cgId);        String repGrpInstance=snapshot.getReplicationGroupInstance();        if (!NullColumnValueGetter.isNullValue(repGrpInstance)) {          volume.setReplicationGroupInstance(repGrpInstance.substring(repGrpInstance.indexOf("+") + 1));        }        dbClient.createObject(volume);      }    }  }}  }
class C{  public void addMemberValue(int nameIndex,MemberValue value){  Pair p=new Pair();  p.name=nameIndex;  p.value=value;  addMemberValue(p);}  }
class C{  SqlArguments(Uri url){  if (url.getPathSegments().size() == 1) {    this.table=url.getPathSegments().get(0);    if (!DatabaseHelper.isValidTable(this.table)) {      throw new IllegalArgumentException("Bad root path: " + this.table);    }    this.where=null;    this.args=null;  } else {    throw new IllegalArgumentException("Invalid URI: " + url);  }}  }
class C{  public void writeHKYModel(int num,XMLWriter writer,PartitionSubstitutionModel model){  String prefix=model.getPrefix(num);  writer.writeComment("The HKY substitution model (Hasegawa, Kishino & Yano, 1985)");  writer.writeOpenTag(NucModelType.HKY.getXMLName(),new Attribute[]{new Attribute.Default<String>(XMLParser.ID,prefix + "hky")});  writer.writeOpenTag(HKYParser.FREQUENCIES);  writeFrequencyModelDNA(writer,model,num);  writer.writeCloseTag(HKYParser.FREQUENCIES);  writeParameter(num,HKYParser.KAPPA,"kappa",model,writer);  writer.writeCloseTag(NucModelType.HKY.getXMLName());}  }
class C{  protected RegionAttributes createRegionAttributesForDACKRegions(){  AttributesFactory attr=new AttributesFactory();  return attr.create();}  }
class C{  static String contentName(int contentType){switch (contentType) {case ct_change_cipher_spec:    return "Change Cipher Spec";case ct_alert:  return "Alert";case ct_handshake:return "Handshake";case ct_application_data:return "Application Data";default :return "contentType = " + contentType;}}  }
class C{  public static void putOperationInvocation(final Message message,final String resourceName,final String operationName) throws JMSException {  try {    ManagementHelper.putOperationInvocation(JMSManagementHelper.getCoreMessage(message),resourceName,operationName);  } catch (  Exception e) {    throw JMSManagementHelper.convertFromException(e);  }}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  @Override public synchronized void invalidate(String key,boolean fullExpire){  Entry entry=get(key);  if (entry != null) {    entry.softTtl=0;    if (fullExpire) {      entry.ttl=0;    }    put(key,entry);  }}  }
class C{  public static Transport bindAwait(TransportConfig config){  try {    return bind(config).get();  } catch (  Exception e) {    throw Throwables.propagate(Throwables.getRootCause(e));  }}  }
class C{  public void closeAllFiles(){  while (tabbedPane.getTabCount() > 0) {    if (!saveChanges(true)) {      return;    }    tabbedPane.removeTabAt(getCurrentIndex());    updateFrameTitle();    System.gc();  }}  }
class C{  public ArrowEdgePortrayal3D(Image image,Color labelColor){  this(appearanceForImage(image,true),labelColor,null,DEFAULT_RADIUS);}  }
class C{  public void buildClassifier(Instances data) throws Exception {  getCapabilities().testWithFail(data);  data=new Instances(data);  data.deleteWithMissingClass();  if (m_Classifier == null) {    throw new Exception("No base classifier has been set!");  }  if (m_MatrixSource == MATRIX_ON_DEMAND) {    String costName=data.relationName() + CostMatrix.FILE_EXTENSION;    File costFile=new File(getOnDemandDirectory(),costName);    if (!costFile.exists()) {      throw new Exception("On-demand cost file doesn't exist: " + costFile);    }    setCostMatrix(new CostMatrix(new BufferedReader(new FileReader(costFile))));  } else   if (m_CostMatrix == null) {    m_CostMatrix=new CostMatrix(data.numClasses());    m_CostMatrix.readOldFormat(new BufferedReader(new FileReader(m_CostFile)));  }  if (!m_MinimizeExpectedCost) {    Random random=null;    if (!(m_Classifier instanceof WeightedInstancesHandler)) {      random=new Random(m_Seed);    }    data=m_CostMatrix.applyCostMatrix(data,random);  }  m_Classifier.buildClassifier(data);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == ScriptElement.class) {switch (baseOperationID) {default :      return -1;  }}if (baseClass == Statement.class) {switch (baseOperationID) {default :    return -1;}}if (baseClass == IterationStatement.class) {switch (baseOperationID) {default :  return -1;}}if (baseClass == VariableEnvironmentElement.class) {switch (baseOperationID) {case N4JSPackage.VARIABLE_ENVIRONMENT_ELEMENT___APPLIES_ONLY_TO_BLOCK_SCOPED_ELEMENTS:return N4JSPackage.FOR_STATEMENT___APPLIES_ONLY_TO_BLOCK_SCOPED_ELEMENTS;default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public void selectOperators(List<Operator> operators){  Operator subtreeSlideOp=getOperator("subtreeSlide");  if (!subtreeSlideOp.isTuningEdited()) {    double tuning=1.0;    if (!Double.isNaN(getInitialRootHeight()) && !Double.isInfinite(getInitialRootHeight())) {      tuning=getInitialRootHeight() / 10.0;    }    subtreeSlideOp.setTuning(tuning);  }  operators.add(subtreeSlideOp);  operators.add(getOperator("narrowExchange"));  operators.add(getOperator("wideExchange"));  operators.add(getOperator("wilsonBalding"));  operators.add(getOperator("treeModel.rootHeight"));  operators.add(getOperator("uniformHeights"));  operators.add(getOperator("subtreeLeap"));  boolean defaultInUse;  boolean branchesInUse;  boolean newMixInUse;  if (options.operatorSetType == OperatorSetType.DEFAULT) {    defaultInUse=true;    branchesInUse=true;    newMixInUse=false;  } else   if (options.operatorSetType == OperatorSetType.NEW_TREE_MIX) {    defaultInUse=false;    branchesInUse=false;    newMixInUse=true;  } else   if (options.operatorSetType == OperatorSetType.FIXED_TREE_TOPOLOGY) {    defaultInUse=false;    branchesInUse=true;    newMixInUse=false;  } else {    throw new IllegalArgumentException("Unknown operator set type");  }  getOperator("subtreeSlide").setUsed(defaultInUse);  getOperator("narrowExchange").setUsed(defaultInUse);  getOperator("wideExchange").setUsed(defaultInUse);  getOperator("wilsonBalding").setUsed(defaultInUse);  getOperator("treeModel.rootHeight").setUsed(branchesInUse);  getOperator("uniformHeights").setUsed(branchesInUse);  getOperator("subtreeLeap").setUsed(newMixInUse);}  }
class C{  @Override public boolean containsKey(Object key){  return _map.containsKey(unwrapKey(key));}  }
class C{  public static PeriodType yearMonthDay(){  PeriodType type=cYMD;  if (type == null) {    type=new PeriodType("YearMonthDay",new DurationFieldType[]{DurationFieldType.years(),DurationFieldType.months(),DurationFieldType.days()},new int[]{0,1,-1,2,-1,-1,-1,-1});    cYMD=type;  }  return type;}  }
class C{  public static <I,A>Parser<I,A> choice(Parser<I,A>... ps){  return choice(IList.of(ps));}  }
class C{  public static XPathExpression compileXPath(String expr){  return compileXPath(getXPath(),expr);}  }
class C{  public boolean isDirty(){  return state.url() == null;}  }
class C{  public boolean isSetKey(){  return this.key != null;}  }
class C{  public void endElement(String namespaceURI,String localName,String qName) throws SAXException {  if (m_firstTagNotEmitted) {    flush();    if (namespaceURI == null && m_firstElementURI != null)     namespaceURI=m_firstElementURI;    if (localName == null && m_firstElementLocalName != null)     localName=m_firstElementLocalName;  }  m_handler.endElement(namespaceURI,localName,qName);}  }
class C{  public boolean isLeaf(){  TreeModel model=getModel();  return (model != null) ? model.isLeaf(this.getUserObject()) : true;}  }
class C{  protected void addHistory(String s){  if (s.equals("")) {    return;  }  if (m_History.contains(s)) {    m_History.removeElement(s);  }  m_History.add(0,s);  notifyHistoryChangedListeners();}  }
class C{  public static Point2D convertPoint(String xStr,String xAttr,String yStr,String yAttr,short unitsType,UnitProcessor.Context uctx){  float x, y;switch (unitsType) {case OBJECT_BOUNDING_BOX:    x=UnitProcessor.svgHorizontalCoordinateToObjectBoundingBox(xStr,xAttr,uctx);  y=UnitProcessor.svgVerticalCoordinateToObjectBoundingBox(yStr,yAttr,uctx);break;case USER_SPACE_ON_USE:x=UnitProcessor.svgHorizontalCoordinateToUserSpace(xStr,xAttr,uctx);y=UnitProcessor.svgVerticalCoordinateToUserSpace(yStr,yAttr,uctx);break;default :throw new IllegalArgumentException("Invalid unit type");}return new Point2D.Float(x,y);}  }
class C{  public void testDeletePackage1(){  int originalAppIdValue=mAppIdValue;  int originalContentTypeValue=mContentTypeValue;  try {    IWapPushManager iwapman=getInterface();    iwapman.addPackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName,0,false,false);    mAppIdValue+=10;    iwapman.addPackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName,0,false,false);    mContentTypeValue+=20;    iwapman.addPackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName,0,false,false);    mContentTypeValue+=20;    iwapman.addPackage(Integer.toString(mAppIdValue),Integer.toString(mContentTypeValue),mPackageName,mClassName,0,false,false);  } catch (  RemoteException e) {    assertTrue(false);  }  mAppIdValue=originalAppIdValue;  mContentTypeValue=originalContentTypeValue;  utDeletePackage();  mAppIdValue+=10;  utDeletePackage();  mContentTypeValue+=20;  utDeletePackage();  mContentTypeValue+=20;  utDeletePackage();  mAppIdValue=originalAppIdValue;  mContentTypeValue=originalContentTypeValue;}  }
class C{  public void testStandardUrls() throws Exception {  String url="jdbc:t-router://service/db";  RouterURL ru=new RouterURL(url,new Properties());  assertEquals("service",ru.getService());  assertEquals("db",ru.getDbname());  assertEquals(QualityOfService.RW_STRICT,ru.getQos());  assertEquals(0,ru.getProps().size());  url="jdbc:t-router://service/db?user=auser&password=pw&qos=RW_STRICT";  ru=new RouterURL(url,new Properties());  assertEquals("service",ru.getService());  assertEquals("db",ru.getDbname());  assertEquals(QualityOfService.RW_STRICT,ru.getQos());  Properties ruProps=ru.getProps();  assertEquals(2,ruProps.size());  assertEquals("auser",ruProps.getProperty("user"));  assertEquals("pw",ruProps.getProperty("password"));  url="jdbc:t-router://service/db?user=auser&qos=RO_RELAXED";  Properties props=new Properties();  props.setProperty("password","pw");  ru=new RouterURL(url,props);  assertEquals("service",ru.getService());  assertEquals("db",ru.getDbname());  assertEquals(QualityOfService.RO_RELAXED,ru.getQos());  ruProps=ru.getProps();  assertEquals(2,ruProps.size());  assertEquals("auser",ruProps.getProperty("user"));  assertEquals("pw",ruProps.getProperty("password"));  tryPassword("semi:colon");  tryPassword("question!mark^n");  tryPassword("arobase@and1one");  tryPassword("var1ou$`1^*l)");  RouterURL perm1=new RouterURL("jdbc:t-router://service/db?",null);  assertEquals("Data service name should have been set correctly",perm1.getDataServiceName(),"service");  assertEquals("Database name should have been set correctly",perm1.getDbname(),"db");  assertTrue("No properties should have been set when only giving a '?' " + "after the database name",perm1.getProps().isEmpty());  RouterURL perm2=new RouterURL("jdbc:t-router://service/db?user=me&",null);  assertEquals("Data service name should have been set correctly",perm2.getDataServiceName(),"service");  assertEquals("Database name should have been set correctly",perm2.getDbname(),"db");  assertEquals("User name should have been set to 'me'",perm2.getProps().get("user"),"me");  assertEquals("Only the user should have been set when only giving 'user=me&' " + "after the database name",perm2.getProps().size(),1);  RouterURL perm3=new RouterURL("jdbc:t-router://service/db?user=me&qos=RO_RELAXED?qos=RW_STRICT",null);  assertEquals("qos should have been set to the latest value declared",QualityOfService.RW_STRICT,perm3.getQos());}  }
class C{  public RescaleOp(float[] scaleFactors,float[] offsets,RenderingHints hints){  length=scaleFactors.length;  if (length > offsets.length)   length=offsets.length;  this.scaleFactors=new float[length];  this.offsets=new float[length];  for (int i=0; i < length; i++) {    this.scaleFactors[i]=scaleFactors[i];    this.offsets[i]=offsets[i];  }  this.hints=hints;}  }
class C{  private EppOutput runFlowConvertEppErrors(FlowComponent flowComponent){  try {    return flowComponent.flowRunner().run();  } catch (  EppException|EppExceptionInProviderException e) {    EppException eppEx=(EppException)(e instanceof EppException ? e : e.getCause());    return getErrorResponse(clock,eppEx.getResult(),flowComponent.trid());  }catch (  Throwable e) {    logger.severe(e,"Unexpected failure");    return getErrorResponse(clock,Result.create(Code.COMMAND_FAILED),flowComponent.trid());  }}  }
class C{  public static void unmaximize(Frame f){  if (!isJRE13) {    try {      Method m1=Frame.class.getMethod("getExtendedState",(Class[])null);      Method m2=Frame.class.getMethod("setExtendedState",new Class[]{Integer.TYPE});      int i=((Integer)m1.invoke(f,(Object[])null)).intValue();      m2.invoke(f,new Object[]{new Integer(i & ~6)});    } catch (    java.lang.reflect.InvocationTargetException ite) {    }catch (    NoSuchMethodException nsme) {    }catch (    IllegalAccessException iae) {    }  }}  }
class C{  private void startAlphaAnimation(final View view,final int visibility){  if ((visibility == View.GONE && (view.getAlpha() == 0.0f)) || (visibility == View.VISIBLE && (view.getAlpha() == 1.0f))) {    return;  } else {    ViewCompat.setAlpha(view,(visibility == View.GONE) ? 1.0f : 0.0f);    ViewCompat.animate(view).alpha((visibility == View.GONE) ? 0.0f : 1.0f).setDuration(ALPHA_ANIMATION_DURATION).setInterpolator(new FastOutSlowInInterpolator());  }}  }
class C{  public BayesEstimatorEditor(BayesEstimatorWrapper bayesEstWrapper){  this(bayesEstWrapper.getEstimatedBayesIm(),bayesEstWrapper.getDataSet());}  }
class C{  private static int textCompaction(int[] codewords,int codeIndex,StringBuilder result){  int[] textCompactionData=new int[(codewords[0] - codeIndex) * 2];  int[] byteCompactionData=new int[(codewords[0] - codeIndex) * 2];  int index=0;  boolean end=false;  while ((codeIndex < codewords[0]) && !end) {    int code=codewords[codeIndex++];    if (code < TEXT_COMPACTION_MODE_LATCH) {      textCompactionData[index]=code / 30;      textCompactionData[index + 1]=code % 30;      index+=2;    } else {switch (code) {case TEXT_COMPACTION_MODE_LATCH:        textCompactionData[index++]=TEXT_COMPACTION_MODE_LATCH;      break;case BYTE_COMPACTION_MODE_LATCH:case BYTE_COMPACTION_MODE_LATCH_6:case NUMERIC_COMPACTION_MODE_LATCH:case BEGIN_MACRO_PDF417_CONTROL_BLOCK:case BEGIN_MACRO_PDF417_OPTIONAL_FIELD:case MACRO_PDF417_TERMINATOR:    codeIndex--;  end=true;break;case MODE_SHIFT_TO_BYTE_COMPACTION_MODE:textCompactionData[index]=MODE_SHIFT_TO_BYTE_COMPACTION_MODE;code=codewords[codeIndex++];byteCompactionData[index]=code;index++;break;}}}decodeTextCompaction(textCompactionData,byteCompactionData,index,result);return codeIndex;}  }
class C{  protected int _sliceOffset(int absRank){  return sliceOffsets[absRank];}  }
class C{  static Observable<FingerprintEncryptionResult> create(Context context,String toEncrypt){  return Observable.create(new FingerprintEncryptionObservable(context,null,toEncrypt,new Base64Provider()));}  }
class C{  @Override public void showErrorDialog(Throwable e){  GPLogger.logToLogger(e);  showNotificationDialog(NotificationChannel.ERROR,buildMessage(e));}  }
class C{  public void reset(){  Iterator iter=m_vis.visibleItems(m_nodeGroup);  while (iter.hasNext()) {    VisualItem item=(VisualItem)iter.next();    ForceItem fitem=(ForceItem)item.get(FORCEITEM);    if (fitem != null) {      fitem.location[0]=(float)item.getEndX();      fitem.location[1]=(float)item.getEndY();      fitem.force[0]=fitem.force[1]=0;      fitem.velocity[0]=fitem.velocity[1]=0;    }  }  m_lasttime=-1L;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.CONTINUE_STATEMENT__LABEL:    return label != null;}return super.eIsSet(featureID);}  }
class C{  public VirtualFile[] expandTokens(String[] pathlist,String[] locales,ConfigurationValue cv) throws ConfigurationException {  pathlist=expandRuntimeTokens(pathlist);  pathlist=expandTargetPlayerToken(pathlist,parentConfiguration);  return expandLocaleToken(pathlist,locales,cv);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static boolean isUiBinderElement(Node node){  return node.getNodeType() == Node.ELEMENT_NODE && UiBinderConstants.UI_BINDER_XML_NAMESPACE.equals(node.getNamespaceURI()) && UiBinderConstants.UI_BINDER_ELEMENT_NAME.equalsIgnoreCase(node.getLocalName());}  }
class C{  private void processAcrValuesBasedOnPrincipalWeightMap(final List<Principal> principals){  if (principals.isEmpty()) {    final AuthnContextClassRefPrincipal[] principalArray=this.authenticationPrincipalWeightMap.keySet().toArray(new AuthnContextClassRefPrincipal[]{});    Arrays.sort(principalArray,new WeightedComparator());    principals.add(principalArray[principalArray.length - 1]);  }}  }
class C{  public int receive(GasStack amount,boolean doReceive){  if (amount == null || (stored != null && !(stored.amount != getMaxGas() && stored.isGasEqual(amount)))) {    return 0;  }  int toFill=Math.min(getMaxGas() - getStored(),amount.amount);  if (doReceive) {    if (stored == null) {      stored=amount.copy().withAmount(getStored() + toFill);    } else {      stored.amount=Math.min(getMaxGas(),getStored() + amount.amount);    }  }  return toFill;}  }
class C{  public void turnQuotaOn(String volume){  NaElement elem=new NaElement("quota-on");  elem.addNewChild("volume",volume);  try {    server.invokeElem(elem);  } catch (  Exception e) {    throw createError(elem,e);  }}  }
class C{  public Matrix negative(){  return mulAssign(-1);}  }
class C{  public boolean showMicrophoneSites(){  return mContentSettingsType == ContentSettingsType.CONTENT_SETTINGS_TYPE_MEDIASTREAM_MIC;}  }
class C{  private synchronized void tryDrainNextWaiting(final boolean force){  final Pair<CompletableFuture<List<Result>>,Integer> nextWaiting=waiting.peek();  if (nextWaiting != null && (force || (resultLinkedBlockingQueue.size() >= nextWaiting.getValue1() || readComplete.isDone()))) {    final int items=nextWaiting.getValue1();    final CompletableFuture<List<Result>> future=nextWaiting.getValue0();    final List<Result> results=new ArrayList<>(items);    resultLinkedBlockingQueue.drainTo(results,items);    if (null == error.get())     future.complete(results); else     future.completeExceptionally(error.get());    waiting.remove(nextWaiting);  }}  }
class C{  public InvalidRequestException(Throwable cause){  super(cause);}  }
class C{  public void onPackageModified(String packageName){}  }
class C{  public void run(){  final ThreadPoolExecutor service=getService();  try {{      queueSizeTask.run();      final int queueSize=service.getQueue().size();      final int activeCount=service.getActiveCount();      averageActiveCount=getMovingAverage(averageActiveCount,activeCount,w);      averageQueueLength=getMovingAverage(averageQueueLength,(activeCount + queueSize),w);    }    if (service instanceof WriteExecutorService) {      final int activeCountWithLocksHeld=((WriteExecutorService)service).getActiveTaskCountWithLocksHeld();      averageActiveCountWithLocksHeld=getMovingAverage(averageActiveCountWithLocksHeld,activeCountWithLocksHeld,w);    }    if (taskCounters != null) {      final long taskCount=taskCounters.taskCompleteCount.get();      if (taskCount > 0) {{          final long newValue=taskCounters.queueWaitingNanoTime.get();          final long delta=newValue - queueWaitingTime;          assert delta >= 0 : "" + delta;          queueWaitingTime=newValue;          averageQueueWaitingTime=getMovingAverage(averageQueueWaitingTime,(delta * scalingFactor / taskCounters.taskCompleteCount.get()),w);        }        if (service instanceof WriteExecutorService) {          final long newValue=((WriteTaskCounters)taskCounters).lockWaitingNanoTime.get();          final long delta=newValue - lockWaitingTime;          assert delta >= 0 : "" + delta;          lockWaitingTime=newValue;          averageLockWaitingTime=getMovingAverage(averageLockWaitingTime,(delta * scalingFactor / taskCounters.taskCompleteCount.get()),w);        }{          final long newValue=taskCounters.serviceNanoTime.get();          final long delta=newValue - serviceTime;          assert delta >= 0 : "" + delta;          serviceTime=newValue;          averageServiceTime=getMovingAverage(averageServiceTime,(delta * scalingFactor / taskCounters.taskCompleteCount.get()),w);        }        interArrivalNanoTimeTask.run();        serviceNanoTimeTask.run();{          final long newValue=taskCounters.checkpointNanoTime.get();          final long delta=newValue - checkpointTime;          assert delta >= 0 : "" + delta;          checkpointTime=newValue;          averageCheckpointTime=getMovingAverage(averageCheckpointTime,(delta * scalingFactor / taskCounters.taskCompleteCount.get()),w);        }{          final long newValue=taskCounters.queuingNanoTime.get();          final long delta=newValue - queuingTime;          assert delta >= 0 : "" + delta;          queuingTime=newValue;          averageQueuingTime=getMovingAverage(averageQueuingTime,(delta * scalingFactor / taskCounters.taskCompleteCount.get()),w);        }      }      if (service instanceof WriteExecutorService) {        final WriteExecutorService tmp=(WriteExecutorService)service;        final WriteTaskCounters writeTaskCounters=(WriteTaskCounters)taskCounters;        final long groupCommitCount=tmp.getGroupCommitCount();        if (groupCommitCount > 0) {{            final long newValue=writeTaskCounters.commitWaitingNanoTime.get();            final long delta=newValue - commitWaitingTime;            assert delta >= 0 : "" + delta;            commitWaitingTime=newValue;            averageCommitWaitingTime=getMovingAverage(averageCommitWaitingTime,(delta * scalingFactor / groupCommitCount),w);          }{            final long newValue=writeTaskCounters.commitServiceNanoTime.get();            final long delta=newValue - commitServiceTime;            assert delta >= 0 : "" + delta;            commitServiceTime=newValue;            averageCommitServiceTime=getMovingAverage(averageCommitServiceTime,(delta * scalingFactor / groupCommitCount),w);          }        }        averageReadyCount=getMovingAverage(averageReadyCount,tmp.getReadyCount(),w);        averageCommitGroupSize=getMovingAverage(averageCommitGroupSize,tmp.getCommitGroupSize(),w);        averageByteCountPerCommit=getMovingAverage(averageByteCountPerCommit,tmp.getByteCountPerCommit(),w);      }    }    nsamples++;  } catch (  Exception ex) {    log.warn(serviceName,ex);  }}  }
class C{  public void installDefaults(SeaGlassContext context,SeaglassUI ui){  if (!context.isSubregion()) {    JComponent c=context.getComponent();    Border border=c.getBorder();    if (border == null || border instanceof UIResource) {      c.setBorder(new SeaGlassBorder(ui,getInsets(context,null)));    }  }  installDefaults(context);}  }
class C{  public static WhereBuilder b(){  return new WhereBuilder();}  }
class C{  private void calculateCategoryRates(){  double propVariable=1.0;  int cat=0;  if (invarParameter != null) {    categoryRates[0]=0.0;    categoryProportions[0]=invarParameter.getParameterValue(0);    propVariable=1.0 - categoryProportions[0];    cat=1;  }  if (shapeParameter != null) {    final double a=shapeParameter.getParameterValue(0);    double mean=0.0;    final int gammaCatCount=categoryCount - cat;    for (int i=0; i < gammaCatCount; i++) {      categoryRates[i + cat]=GammaDistribution.quantile((2.0 * i + 1.0) / (2.0 * gammaCatCount),a,1.0 / a);      mean+=categoryRates[i + cat];      categoryProportions[i + cat]=propVariable / gammaCatCount;    }    mean=(propVariable * mean) / gammaCatCount;    for (int i=0; i < gammaCatCount; i++) {      categoryRates[i + cat]/=mean;    }  } else {    categoryRates[cat]=1.0 / propVariable;    categoryProportions[cat]=propVariable;  }  ratesKnown=true;}  }
class C{  public void removeErrorMessage(Object key,Control control){  if (control != null) {    for (int i=0; i < pagesToAdd.length; i++) {      pagesToAdd[i].getManagedForm().getMessageManager().removeMessage(key,control);    }  }}  }
class C{  public void offerTrade(Player partner){  trade.offerTrade(partner);}  }
class C{  public CompositeAction(long duration,long stepTime){  super(null,duration,stepTime);}  }
class C{  private static int readInt() throws IOException {  String input=readLine();  try {    return Integer.parseInt(input);  } catch (  NumberFormatException nfe) {    return 0;  }}  }
class C{  public String scheme(){  if (preferred != null) {    return preferred.findKey(0);  } else {    return null;  }}  }
class C{  public static void removeActivityListener(ActivityListener listener){  listeners.remove(listener);}  }
class C{  private void registerJMX() throws Exception {  String jmxObjectName=resources.getJMXObjectName();  MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();  jmxBean=new QuartzSchedulerMBeanImpl(this);  mbs.registerMBean(jmxBean,new ObjectName(jmxObjectName));}  }
class C{  public boolean isLargePayloadSupportEnabled(){  return largePayloadSupport;}  }
class C{  public static boolean isDefaultWildcardRoutingEnabled(){  return DEFAULT_WILDCARD_ROUTING_ENABLED;}  }
class C{  public InlineQueryResultCachedSticker.InlineQueryResultCachedStickerBuilder replyMarkup(InlineReplyMarkup replyMarkup){  this.reply_markup=replyMarkup;  return this;}  }
class C{  public RegistrationException(){  super();}  }
class C{  private void writeXML(Writer writer,Element element,StringBuilder indentation,boolean isInline) throws IOException {  if (!isInline) {    writer.write(indentation.toString());  }  if (element.isTextElement()) {    writer.write(encodeIfRequired(element.getText()));  } else {    writer.write('<');    String elementName=encodeIfRequired(element.getTagName());    writer.write(elementName);    Hashtable attributes=element.getAttributes();    if (attributes != null) {      for (Enumeration keys=attributes.keys(); keys.hasMoreElements(); ) {        String attributeKey=(String)keys.nextElement();        String attributeValue=(String)attributes.get(attributeKey);        writer.write(' ');        writer.write(encodeIfRequired(attributeKey));        writer.write("=\"");        writer.write(encodeIfRequired(attributeValue));        writer.write('"');      }    }    if (element.isEmpty()) {      writer.write(" />");    } else {      writer.write('>');      if (!isInline && !element.hasTextChild()) {        writer.write('\n');        indentation.append('\t');        for (        Object child : element) {          if (child instanceof Element) {            writeXML(writer,(Element)child,indentation,isInline);          } else {            throw new IllegalStateException("Element contained child of invalid type");          }          writer.write('\n');        }      } else {        isInline=true;        for (        Object child : element) {          if (child instanceof Element) {            writeXML(writer,(Element)child,null,isInline);          } else {            throw new IllegalStateException("Element contained child of invalid type");          }        }      }      if (!isInline) {        indentation.deleteCharAt(indentation.length() - 1);        writer.write(indentation.toString());      }      writer.write("</");      writer.write(elementName);      writer.write('>');    }  }}  }
class C{  public CyclicXYItemRenderer(int type,XYToolTipGenerator labelGenerator,XYURLGenerator urlGenerator){  super(type,labelGenerator,urlGenerator);}  }
class C{  private static void printPosition(StackTraceElement frame){  if (frame.isNativeMethod())   System.err.printf("    at %s.%s (native method)%n",frame.getClassName(),frame.getMethodName()); else   System.err.printf("    at %s.%s:%d (%s)%n",frame.getClassName(),frame.getMethodName(),frame.getLineNumber(),frame.getFileName());}  }
class C{  public Clustering<DimensionModel> run(Database database,Relation<V> relation){  COPACNeighborPredicate.Instance npred=new COPACNeighborPredicate<V>(settings).instantiate(database,relation);  CorePredicate.Instance<DBIDs> cpred=new MinPtsCorePredicate(settings.minpts).instantiate(database);  Clustering<Model> dclusters=new GeneralizedDBSCAN.Instance<>(npred,cpred,false).run();  Clustering<DimensionModel> result=new Clustering<>("COPAC clustering","copac-clustering");  for (Hierarchy.Iter<Cluster<Model>> iter=dclusters.iterToplevelClusters(); iter.valid(); iter.advance()) {    Cluster<Model> clus=iter.get();    if (clus.size() > 0) {      int dim=npred.dimensionality(clus.getIDs().iter());      DimensionModel model=new DimensionModel(dim);      result.addToplevelCluster(new Cluster<>(clus.getIDs(),model));    }  }  return result;}  }
class C{  @Override protected int checkCollisionsWithRay(GL10 gl,PLVector3[] ray,CGPoint screenPoint,boolean isMoving){  return (super.checkCollisionsWithRay(gl,ray,screenPoint,isMoving) + this.checkSceneElementsCollisionWithRay(gl,mHotspots,ray,screenPoint,isMoving));}  }
class C{  @Override public synchronized Object[] toArray(){  Object[] result=new Object[elementCount];  System.arraycopy(elementData,0,result,0,elementCount);  return result;}  }
class C{  private void cancelSearch(){  mHandler.removeCallbacks(mHint);  mNodeSearch.stopSearch();  mSpeechController.speak(mContext.getString(R.string.search_mode_cancel),SpeechController.QUEUE_MODE_UNINTERRUPTIBLE,FeedbackItem.FLAG_NO_HISTORY,null);  AccessibilityNodeInfoCompat focused=FocusFinder.getFocusedNode(mContext,false);  if (focused == null) {    return;  }  try {    mInitialNode.reset(AccessibilityNodeInfoUtils.refreshNode(mInitialNode.get()));    if (!AccessibilityNodeInfoRef.isNull(mInitialNode)) {      if (mInitialNode.get().isAccessibilityFocused()) {        return;      }      PerformActionUtils.performAction(mInitialNode.get(),AccessibilityNodeInfo.ACTION_ACCESSIBILITY_FOCUS);    } else {      PerformActionUtils.performAction(focused,AccessibilityNodeInfoCompat.ACTION_CLEAR_ACCESSIBILITY_FOCUS);    }  }  finally {    focused.recycle();  }}  }
class C{  private static String extractErrorMessage(Throwable e){  Throwable cause=getRootCause(e);  String fullyQualifiedExceptionClassName=cause.getClass().getName();  String[] hierarchySplits=fullyQualifiedExceptionClassName.split("\\.");  String exceptionClassName=hierarchySplits[hierarchySplits.length - 1];  String localizedMessage=cause.getLocalizedMessage();  if (localizedMessage == null) {    localizedMessage="Internal error. Please check instance logs for further details.";  }  return localizedMessage + " [" + exceptionClassName+ "]";}  }
class C{  @Override public void tearDown(){  mFlags=null;}  }
class C{  private void initInputTypeMap(){  mInputTypeMap.append(TextArea.ANY,InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_FLAG_CAP_SENTENCES);  mInputTypeMap.append(TextArea.DECIMAL,InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_DECIMAL | InputType.TYPE_NUMBER_FLAG_SIGNED);  mInputTypeMap.append(TextArea.EMAILADDR,InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS);  mInputTypeMap.append(TextArea.INITIAL_CAPS_SENTENCE,InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_FLAG_CAP_SENTENCES);  mInputTypeMap.append(TextArea.INITIAL_CAPS_WORD,InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_FLAG_CAP_WORDS);  mInputTypeMap.append(TextArea.NON_PREDICTIVE,InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS);  mInputTypeMap.append(TextArea.NUMERIC,InputType.TYPE_CLASS_NUMBER);  mInputTypeMap.append(TextArea.PASSWORD,InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);  mInputTypeMap.append(TextArea.PHONENUMBER,InputType.TYPE_CLASS_PHONE);  mInputTypeMap.append(TextArea.URL,InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_URI);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.437 -0500",hash_original_method="4A2C80599CF241166B5A206B5D8B6870",hash_generated_method="A8A4BD75DF015A1A0C79560CED73EED3") @DSVerified @DSSpec(DSCat.IO) @DSSink({DSSinkKind.IO}) public synchronized void write(byte buffer[],int offset,int length) throws IOException {  if (FromNetASCIIInputStream._noConversionRequired) {    out.write(buffer,offset,length);    return;  }  while (length-- > 0)   __write(buffer[offset++]);}  }
class C{  private static void updatePassword(String newPwd,int userId,String entidad) throws Exception {  String encPwd;  double cth;  encPwd=UasMisc.encryptPassword(newPwd,userId);  cth=DateTimeUtil.getCurrentTimeHours();  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    dbConn.beginTransaction();    UasDaoUserRecUb userRecUb=new UasDaoUserRecUb();    userRecUb.setPwd(encPwd);    userRecUb.setPwdLastUpdts(cth);    userRecUb.setPwdMbc(UasMisc.PWD_MUST_NOT_BE_CHANGED);    UasDaoUserTbl.updateRow(userRecUb,userId);    dbConn.endTransaction(true);  } catch (  Exception e) {    throw e;  } finally {    dbConn.close();  }}  }
class C{  private boolean startDBProcess(String ProcedureName){  log.fine(ProcedureName + "(" + m_pi.getAD_PInstance_ID()+ ")");  String sql="{call " + ProcedureName + "(?)}";  try {    CallableStatement cstmt=DB.prepareCall(sql,ResultSet.CONCUR_UPDATABLE,null);    cstmt.setInt(1,m_pi.getAD_PInstance_ID());    cstmt.executeUpdate();    cstmt.close();  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);    m_pi.setSummary(Msg.getMsg(m_wscctx,"ProcessRunError") + " " + e.getLocalizedMessage());    m_pi.setError(true);    return false;  }  return true;}  }
class C{  public Object remove(String key){  return super.remove(key);}  }
class C{  private boolean isTryWithResources(){  while (true) {    nextToken();switch (fToken) {case Symbols.TokenTRY:      return true;case Symbols.TokenLBRACE:    return false;case Symbols.TokenEOF:  return false;}}}  }
class C{  @Override public void put(int index,byte[] value){  System.arraycopy(value,0,datastore,((index) * sizeOfEachElement),sizeOfEachElement);}  }
class C{  public void onUnwatched(EntityPlayerMP player){}  }
class C{  protected void visitNode(final Node n,final DijkstraNodeData data,final PseudoRemovePriorityQueue<Node> pendingNodes,final double time,final double cost,final Link outLink,int itID){  data.visit(outLink,cost,time,itID);  pendingNodes.add(n,getPriority(data));}  }
class C{  public final void grow(long maxBucketOrd){  docCounts=bigArrays.grow(docCounts,maxBucketOrd);}  }
class C{  @Override protected int sizeOf(MemoryCacheKey key,Bitmap bitmap){  if (bitmap == null)   return 0;  return bitmap.getRowBytes() * bitmap.getHeight();}  }
class C{  public String copyValueOf(char data[],int offset,int count){  return String.copyValueOf(data,offset,count);}  }
class C{  @Override protected void free(byte[] value){  Preconditions.checkNotNull(value);}  }
class C{  public boolean isExcludeLot(int AD_Column_ID,boolean isSOTrx){  if (getM_LotCtl_ID() == 0)   return true;  if (m_excludeLots == null) {    final String whereClause=X_M_LotCtlExclude.COLUMNNAME_M_LotCtl_ID + "=?";    List<X_M_LotCtlExclude> list=new Query(getCtx(),X_M_LotCtlExclude.Table_Name,whereClause,null).setParameters(getM_LotCtl_ID()).setOnlyActiveRecords(true).list();    m_excludeLots=new X_M_LotCtlExclude[list.size()];    list.toArray(m_excludeLots);  }  if (m_excludeLots != null && m_excludeLots.length > 0) {    MColumn column=MColumn.get(getCtx(),AD_Column_ID);    for (int i=0; i < m_excludeLots.length; i++) {      if (m_excludeLots[i].getAD_Table_ID() == column.getAD_Table_ID() && m_excludeLots[i].isSOTrx() == isSOTrx)       return true;    }  }  return false;}  }
class C{  public StatementBuilder append(char c){  builder.append(c);  return this;}  }
class C{  public void stopAndCleanupServer(){  server.stop();  FileUtils.deleteQuietly(service.getWorkingDirectory());}  }
class C{  @Deprecated public ScriptSortBuilder param(String name,Object value){  if (params == null) {    params=new HashMap<>();  }  params.put(name,value);  return this;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testNodeProcessing() throws InterruptedException {  MultiWindowRangeKeyVal<String,Integer> oper=new MultiWindowRangeKeyVal<String,Integer>();  CollectorTestSink swinSink=new CollectorTestSink();  oper.range.setSink(swinSink);  oper.beginWindow(0);  KeyValPair<String,Integer> low=new KeyValPair<String,Integer>("a",3);  oper.data.process(low);  KeyValPair<String,Integer> high=new KeyValPair<String,Integer>("a",11);  oper.data.process(high);  oper.endWindow();  oper.beginWindow(1);  low=new KeyValPair<String,Integer>("a",1);  oper.data.process(low);  high=new KeyValPair<String,Integer>("a",9);  oper.data.process(high);  oper.endWindow();  Assert.assertEquals("number emitted tuples",1,swinSink.collectedTuples.size());  for (  Object o : swinSink.collectedTuples) {    log.debug(o.toString());  }}  }
class C{  public PageRankWithPriors(Hypergraph<V,E> graph,Function<V,Double> vertex_priors,double alpha){  super(graph,vertex_priors,alpha);  this.edge_weights=new UniformDegreeWeight<V,E>(graph);}  }
class C{  public int toInt(){  return 0;}  }
class C{  @Override protected void onStop(){  super.onStop();  ResponseHandler.unregister(mDungeonsPurchaseObserver);}  }
class C{  public void synchronizeGuiValues(){  generalPanelClientSizeCheckbox.setSelected(Settings.CUSTOM_CLIENT_SIZE);  generalPanelClientSizeXSpinner.setValue(Settings.CUSTOM_CLIENT_SIZE_X);  generalPanelClientSizeYSpinner.setValue(Settings.CUSTOM_CLIENT_SIZE_Y);  generalPanelChatHistoryCheckbox.setSelected(Settings.LOAD_CHAT_HISTORY);  generalPanelCombatXPMenuCheckbox.setSelected(Settings.COMBAT_MENU);  generalPanelXPDropsCheckbox.setSelected(Settings.SHOW_XPDROPS);  generalPanelFatigueDropsCheckbox.setSelected(Settings.SHOW_FATIGUEDROPS);  generalPanelFatigueFigSpinner.setValue(new Integer(Settings.FATIGUE_FIGURES));  generalPanelFatigueAlertCheckbox.setSelected(Settings.FATIGUE_ALERT);  generalPanelNamePatchModeSlider.setValue(Settings.NAME_PATCH_TYPE);  generalPanelRoofHidingCheckbox.setSelected(Settings.HIDE_ROOFS);  generalPanelColoredTextCheckbox.setSelected(Settings.COLORIZE);  generalPanelFoVSlider.setValue(Settings.FOV);  generalPanelCustomCursorCheckbox.setSelected(Settings.SOFTWARE_CURSOR);  generalPanelViewDistanceSlider.setValue(Settings.VIEW_DISTANCE);switch (generalPanelNamePatchModeSlider.getValue()) {case 3:    generalPanelNamePatchModeDesc.setText("<html>Reworded vague stuff to be more descriptive on top of type 1 & 2 changes</html>");  break;case 2:generalPanelNamePatchModeDesc.setText("<html>Capitalizations and fixed spellings on top of type 1 changes</html>");break;case 1:generalPanelNamePatchModeDesc.setText("<html>Purely practical name changes (potion dosages, unidentified herbs, unfinished potions)</html>");break;case 0:generalPanelNamePatchModeDesc.setText("<html>No item name patching</html>");break;default :System.err.println("Invalid name patch mode value");break;}overlayPanelStatusDisplayCheckbox.setSelected(Settings.SHOW_STATUSDISPLAY);overlayPanelInvCountCheckbox.setSelected(Settings.SHOW_INVCOUNT);overlayPanelItemNamesCheckbox.setSelected(Settings.SHOW_ITEMINFO);overlayPanelPlayerNamesCheckbox.setSelected(Settings.SHOW_PLAYERINFO);overlayPanelFriendNamesCheckbox.setSelected(Settings.SHOW_FRIENDINFO);overlayPanelNPCNamesCheckbox.setSelected(Settings.SHOW_NPCINFO);overlayPanelNPCHitboxCheckbox.setSelected(Settings.SHOW_HITBOX);overlayPanelFoodHealingCheckbox.setSelected(Settings.SHOW_FOOD_HEAL_OVERLAY);overlayPanelHPRegenTimerCheckbox.setSelected(Settings.SHOW_TIME_UNTIL_HP_REGEN);overlayPanelDebugModeCheckbox.setSelected(Settings.DEBUG);notificationPanelPMNotifsCheckbox.setSelected(Settings.PM_NOTIFICATIONS);notificationPanelTradeNotifsCheckbox.setSelected(Settings.TRADE_NOTIFICATIONS);notificationPanelDuelNotifsCheckbox.setSelected(Settings.DUEL_NOTIFICATIONS);notificationPanelLogoutNotifsCheckbox.setSelected(Settings.LOGOUT_NOTIFICATIONS);notificationPanelLowHPNotifsCheckbox.setSelected(Settings.LOW_HP_NOTIFICATIONS);notificationPanelLowHPNotifsSpinner.setValue(Settings.LOW_HP_NOTIF_VALUE);notificationPanelFatigueNotifsCheckbox.setSelected(Settings.FATIGUE_NOTIFICATIONS);notificationPanelFatigueNotifsSpinner.setValue(Settings.FATIGUE_NOTIF_VALUE);notificationPanelNotifSoundsCheckbox.setSelected(Settings.NOTIFICATION_SOUNDS);notificationPanelUseSystemNotifsCheckbox.setSelected(Settings.USE_SYSTEM_NOTIFICATIONS);notificationPanelTrayPopupCheckbox.setSelected(Settings.TRAY_NOTIFS);notificationPanelTrayPopupClientFocusButton.setSelected(!Settings.TRAY_NOTIFS_ALWAYS);notificationPanelTrayPopupAnyFocusButton.setSelected(Settings.TRAY_NOTIFS_ALWAYS);notificationPanelNotifSoundClientFocusButton.setSelected(!Settings.SOUND_NOTIFS_ALWAYS);notificationPanelNotifSoundAnyFocusButton.setSelected(Settings.SOUND_NOTIFS_ALWAYS);streamingPanelTwitchChatCheckbox.setSelected(Settings.TWITCH_HIDE);streamingPanelTwitchChannelNameTextField.setText(Settings.TWITCH_CHANNEL);streamingPanelTwitchOAuthTextField.setText(Settings.TWITCH_OAUTH);streamingPanelTwitchUserTextField.setText(Settings.TWITCH_USERNAME);streamingPanelIPAtLoginCheckbox.setSelected(Settings.SHOW_LOGINDETAILS);streamingPanelSaveLoginCheckbox.setSelected(Settings.SAVE_LOGININFO);for (KeybindSet kbs : KeyboardHandler.keybindSetList) {setKeybindButtonText(kbs);}}  }
class C{  private void checkLeases(){  long time=System.currentTimeMillis();  List<LeaseInfo> toUnregister=new ArrayList<>();synchronized (leaseTable) {    Iterator<LeaseInfo> iter=leaseTable.values().iterator();    while (iter.hasNext()) {      LeaseInfo info=iter.next();      if (info.expired(time)) {        toUnregister.add(info);        iter.remove();      }    }    if (leaseTable.isEmpty()) {      checker.cancel(false);      checker=null;    }  }  for (  LeaseInfo info : toUnregister) {    for (    Target target : info.notifySet) {      target.vmidDead(info.vmid);    }  }}  }
class C{  public void reset() throws IOException {synchronized (lock) {    super.reset();    lineNumber=markedLineNumber;    skipLF=markedSkipLF;  }}  }
class C{  public TextTitle(String text){  this(text,TextTitle.DEFAULT_FONT,TextTitle.DEFAULT_TEXT_PAINT,Title.DEFAULT_POSITION,Title.DEFAULT_HORIZONTAL_ALIGNMENT,Title.DEFAULT_VERTICAL_ALIGNMENT,Title.DEFAULT_PADDING);}  }
class C{  public static double interpolateAngle180(double amount,double degrees1,double degrees2){  double angle1=normalizeAngle180(degrees1);  double angle2=normalizeAngle180(degrees2);  if (angle1 - angle2 > 180) {    angle2+=360;  } else   if (angle1 - angle2 < -180) {    angle1+=360;  }  double angle=(1 - amount) * angle1 + amount * angle2;  return normalizeAngle180(angle);}  }
class C{  public static void updateProductReview(ProductReview domainObjectToUpdate,VOServiceReview valueObject) throws ValidationException, ConcurrentModificationException {  String title=trim(valueObject.getTitle());  String comment=trim(valueObject.getComment());  int rating=valueObject.getRating();  BLValidator.isName("title",title,true);  BLValidator.isComment("comment",comment,true);  BLValidator.isRating("rating",rating);  verifyVersionAndKey(domainObjectToUpdate,valueObject);  updateValueObject(valueObject,domainObjectToUpdate);  domainObjectToUpdate.setTitle(title);  domainObjectToUpdate.setComment(comment);  domainObjectToUpdate.setRating(rating);}  }
class C{  @Override public SSLEngineResult wrap(ByteBuffer[] appData,int offset,int length,ByteBuffer netData) throws SSLException {  EngineArgs ea=new EngineArgs(appData,offset,length,netData);  if (netData.remaining() < EngineOutputRecord.maxRecordSize) {    return new SSLEngineResult(Status.BUFFER_OVERFLOW,getHSStatus(null),0,0);  }  try {synchronized (wrapLock) {      return writeAppRecord(ea);    }  } catch (  Exception e) {    ea.resetPos();    fatal(Alerts.alert_internal_error,"problem wrapping app data",e);    return null;  } finally {    ea.resetLim();  }}  }
class C{  public static SamFilterParamsBuilder builder(){  return new SamFilterParamsBuilder();}  }
class C{  LambdaFormBuffer replaceFunctions(NamedFunction[] oldFns,NamedFunction[] newFns,Object... forArguments){  assert (inTrans());  if (oldFns.length == 0)   return this;  for (int i=arity; i < length; i++) {    Name n=names[i];    int nfi=indexOf(n.function,oldFns);    if (nfi >= 0 && Arrays.equals(n.arguments,forArguments)) {      changeName(i,new Name(newFns[nfi],n.arguments));    }  }  return this;}  }
class C{  public static String indent(String s){  return indent(s,4,true);}  }
class C{  public double tdx(final double x1,final double x2){  double width=this.width;  if (Math.abs(x1 - x2) <= width / 2)   return x1 - x2;  double dx=stx(x1,width) - stx(x2,width);  if (dx * 2 > width)   return dx - width;  if (dx * 2 < -width)   return dx + width;  return dx;}  }
class C{  @Override protected EClass eStaticClass(){  return DatatypePackage.Literals.PROPERTY_TYPE;}  }
class C{  public static boolean isLinked(final IResource resource){  Check.notNull(resource,"resource");  if (!useLegacyMethod) {    try {      final Field checkAncestorField=IResource.class.getField("CHECK_ANCESTORS");      final Integer IResource_CHECK_ANCESTORS=(Integer)checkAncestorField.get(null);      final Method isLinkedMethod=IResource.class.getMethod("isLinked",new Class[]{int.class});      final Boolean isLinked=(Boolean)isLinkedMethod.invoke(resource,new Object[]{IResource_CHECK_ANCESTORS});      return isLinked.booleanValue();    } catch (    final Exception e) {      useLegacyMethod=true;    }  }  return isLinkedLegacy(resource);}  }
class C{  public void wipeZeros(){  Set<T> objToBeRemoved=new HashSet<T>();  for (  T obj : objToCounts.keySet()) {    if (shouldBeRemovedFromCounter(obj)) {      objToBeRemoved.add(obj);    }  }  for (  T obj : objToBeRemoved) {    objToCounts.remove(obj);  }}  }
class C{  private void showOverrideCommentText(){  sashForm.setMaximizedControl(null);  sashForm.setWeights(new int[]{70,30});}  }
class C{  private void updateMenuIcon(){  Icon frameIcon=frame.getFrameIcon();  SeaGlassContext context=getContext(this);  if (frameIcon != null) {    Dimension maxSize=(Dimension)context.getStyle().get(context,"InternalFrameTitlePane.maxFrameIconSize");    int maxWidth=16;    int maxHeight=16;    if (maxSize != null) {      maxWidth=maxSize.width;      maxHeight=maxSize.height;    }    if ((frameIcon.getIconWidth() > maxWidth || frameIcon.getIconHeight() > maxHeight) && (frameIcon instanceof ImageIcon)) {      frameIcon=new ImageIcon(((ImageIcon)frameIcon).getImage().getScaledInstance(maxWidth,maxHeight,Image.SCALE_SMOOTH));    }  }  context.dispose();  menuButton.setIcon(frameIcon);}  }
class C{  public static DateTimeFormatter basicOrdinalDate(){  return Constants.bod;}  }
class C{  public static void closeQuiet(@Nullable Context rsrc){  if (rsrc != null)   try {    rsrc.close();  } catch (  NamingException ignored) {  }}  }
class C{  public void clearForceField(){  forceFields=new Double2D(0,0);}  }
class C{  public GenericDraweeHierarchyBuilder reset(){  init();  return this;}  }
class C{  public boolean isField(){  MemberType _memberType=this.getMemberType();  return Objects.equal(_memberType,MemberType.FIELD);}  }
class C{  public BrowserTab findBrowserTab(String userAgent,String url,String tabKey,String sessionKey){synchronized (privateInstanceLock) {    for (    BrowserTab tab : browserTabs) {      Info info=tab.getInfo();      boolean curTabMatches=false;      if (info.getUserAgentTag().equals(userAgent) && info.getUrl().equals(url)) {        if (tabKey != null && tabKey.length() > 0) {          curTabMatches=info.getTabKey().equals(tabKey);        } else {          curTabMatches=info.getInitialSessionKey().equals(sessionKey);        }      }      if (curTabMatches) {        return tab;      }    }  }  return null;}  }
class C{  @Override public void close(){  stopTimingIfSync();}  }
class C{  public final void configureSpliceTo(HlsExtractorWrapper nextExtractor){  Assertions.checkState(isPrepared());  if (spliceConfigured || !nextExtractor.shouldSpliceIn || !nextExtractor.isPrepared()) {    return;  }  boolean spliceConfigured=true;  int trackCount=getTrackCount();  for (int i=0; i < trackCount; i++) {    DefaultTrackOutput currentSampleQueue=sampleQueues.valueAt(i);    DefaultTrackOutput nextSampleQueue=nextExtractor.sampleQueues.valueAt(i);    spliceConfigured&=currentSampleQueue.configureSpliceTo(nextSampleQueue);  }  this.spliceConfigured=spliceConfigured;  return;}  }
class C{  public ReplDBMSEvent createEvent(long seqno,short fragNo,boolean lastFrag,String shardId){  return createEvent(seqno,fragNo,lastFrag,shardId,new Timestamp(System.currentTimeMillis()));}  }
class C{  private static void appendInt(StringBuilder sb,int num,int numDigits){  if (num < 0) {    sb.append('-');    num=-num;  }  int x=num;  while (x > 0) {    x/=10;    numDigits--;  }  for (int i=0; i < numDigits; i++) {    sb.append('0');  }  if (num != 0) {    sb.append(num);  }}  }
class C{  public boolean isHighlightable(OMGraphic omg){  return false;}  }
class C{  public synchronized Object[] toArray(){  Object[] result=new Object[elementCount];  System.arraycopy(elementData,0,result,0,elementCount);  return result;}  }
class C{  public boolean canTraverseOutsideSubtree(){  if (super.canTraverseOutsideSubtree())   return true; else {    int n=m_args.length;    for (int i=0; i < n; i++) {      if (m_args[i].canTraverseOutsideSubtree())       return true;    }    return false;  }}  }
class C{  public void transpose(){  if (matrixValid) {    if (this.matrix.length == 16) {      float[] newMatrix=new float[16];      for (int i=0; i < 4; i++) {        int k=i * 4;        newMatrix[k]=matrix[i];        newMatrix[k + 1]=matrix[4 + i];        newMatrix[k + 2]=matrix[8 + i];        newMatrix[k + 3]=matrix[12 + i];      }      matrix=newMatrix;    } else {      float[] newMatrix=new float[9];      for (int i=0; i < 3; i++) {        int k=i * 3;        newMatrix[k]=matrix[i];        newMatrix[k + 1]=matrix[3 + i];        newMatrix[k + 2]=matrix[6 + i];      }      matrix=newMatrix;    }  }}  }
class C{  protected int removeHeapNode(int i){  int val=heap[i];  int rightMost=--size;  heap[i]=heap[rightMost];  heap[rightMost]=0;  if (fastValueRemove == Mode.HASH) {    valueIndexMap.remove(val);    if (size != 0)     valueIndexMap.put(heap[i],i);  } else   if (fastValueRemove == Mode.BOUNDED) {    valueIndexStore[val]=-1;  }  heapDown(i);  return val;}  }
class C{  public SetUpHql(TestHiveServer testingHiveServer,HqlScript setUpHql){  this.testingHiveServer=testingHiveServer;  this.setUpHql=setUpHql;}  }
class C{  public void registerRoute(DistAnalysisTransitRoute route){  this.route=route;}  }
class C{  private static void drawDiamond(Graphics gx,double x,double y,int size){  gx.drawLine((int)(x - size),(int)(y),(int)(x),(int)(y - size));  gx.drawLine((int)(x),(int)(y - size),(int)(x + size),(int)(y));  gx.drawLine((int)(x + size),(int)(y),(int)(x),(int)(y + size));  gx.drawLine((int)(x),(int)(y + size),(int)(x - size),(int)(y));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodehaschildnodes.class,args);}  }
class C{  public static int maxProfit(int[] prices){  int max=0;  for (int i=0; i < prices.length - 1; i++) {    if (prices[i + 1] > prices[i]) {      max+=prices[i + 1] - prices[i];    }  }  return max;}  }
class C{  public void updateShort(String columnName,short x) throws SQLException {  updateShort(findColumn(columnName),x);}  }
class C{  public void testTermCaps(){  assertKeysEquals("\u007f",KeyHandler.getCodeFromTermcap("kb",false,false));  assertKeysEquals("\033[Z",KeyHandler.getCodeFromTermcap("kB",false,false));  assertKeysEquals("\033[A",KeyHandler.getCodeFromTermcap("ku",false,false));  assertKeysEquals("\033[B",KeyHandler.getCodeFromTermcap("kd",false,false));  assertKeysEquals("\033[C",KeyHandler.getCodeFromTermcap("kr",false,false));  assertKeysEquals("\033[D",KeyHandler.getCodeFromTermcap("kl",false,false));  assertKeysEquals("\033[1;2A",KeyHandler.getCodeFromTermcap("kUP",false,false));  assertKeysEquals("\033[1;2B",KeyHandler.getCodeFromTermcap("kDN",false,false));  assertKeysEquals("\033[1;2C",KeyHandler.getCodeFromTermcap("%i",false,false));  assertKeysEquals("\033[1;2D",KeyHandler.getCodeFromTermcap("#4",false,false));  assertKeysEquals("\033[H",KeyHandler.getCodeFromTermcap("kh",false,false));  assertKeysEquals("\033[F",KeyHandler.getCodeFromTermcap("@7",false,false));  assertKeysEquals("\033[1;2H",KeyHandler.getCodeFromTermcap("#2",false,false));  assertKeysEquals("\033[1;2F",KeyHandler.getCodeFromTermcap("*7",false,false));  assertKeysEquals("\033[H",KeyHandler.getCodeFromTermcap("K1",false,false));  assertKeysEquals("\033OH",KeyHandler.getCodeFromTermcap("K1",true,false));  assertKeysEquals("\033[5~",KeyHandler.getCodeFromTermcap("K3",false,false));  assertKeysEquals("\033[F",KeyHandler.getCodeFromTermcap("K4",false,false));  assertKeysEquals("\033OF",KeyHandler.getCodeFromTermcap("K4",true,false));  assertKeysEquals("\033[6~",KeyHandler.getCodeFromTermcap("K5",false,false));  assertKeysEquals("\033OP",KeyHandler.getCodeFromTermcap("k1",false,false));  assertKeysEquals("\033OQ",KeyHandler.getCodeFromTermcap("k2",false,false));  assertKeysEquals("\033OR",KeyHandler.getCodeFromTermcap("k3",false,false));  assertKeysEquals("\033OS",KeyHandler.getCodeFromTermcap("k4",false,false));  assertKeysEquals("\033[15~",KeyHandler.getCodeFromTermcap("k5",false,false));  assertKeysEquals("\033[17~",KeyHandler.getCodeFromTermcap("k6",false,false));  assertKeysEquals("\033[18~",KeyHandler.getCodeFromTermcap("k7",false,false));  assertKeysEquals("\033[19~",KeyHandler.getCodeFromTermcap("k8",false,false));  assertKeysEquals("\033[20~",KeyHandler.getCodeFromTermcap("k9",false,false));  assertKeysEquals("\033[21~",KeyHandler.getCodeFromTermcap("k;",false,false));  assertKeysEquals("\033[23~",KeyHandler.getCodeFromTermcap("F1",false,false));  assertKeysEquals("\033[24~",KeyHandler.getCodeFromTermcap("F2",false,false));  assertKeysEquals("\033[1;2P",KeyHandler.getCodeFromTermcap("F3",false,false));  assertKeysEquals("\033[1;2Q",KeyHandler.getCodeFromTermcap("F4",false,false));  assertKeysEquals("\033[1;2R",KeyHandler.getCodeFromTermcap("F5",false,false));  assertKeysEquals("\033[1;2S",KeyHandler.getCodeFromTermcap("F6",false,false));  assertKeysEquals("\033[15;2~",KeyHandler.getCodeFromTermcap("F7",false,false));  assertKeysEquals("\033[17;2~",KeyHandler.getCodeFromTermcap("F8",false,false));  assertKeysEquals("\033[18;2~",KeyHandler.getCodeFromTermcap("F9",false,false));  assertKeysEquals("\033[19;2~",KeyHandler.getCodeFromTermcap("FA",false,false));  assertKeysEquals("\033[20;2~",KeyHandler.getCodeFromTermcap("FB",false,false));  assertKeysEquals("\033[21;2~",KeyHandler.getCodeFromTermcap("FC",false,false));  assertKeysEquals("\033[23;2~",KeyHandler.getCodeFromTermcap("FD",false,false));  assertKeysEquals("\033[24;2~",KeyHandler.getCodeFromTermcap("FE",false,false));}  }
class C{  public boolean isFinalizado(){  return (getFechaSalida() != null);}  }
class C{  public PagedResultsResponseControl(String id,boolean criticality,byte[] value) throws IOException {  super(id,criticality,value);  BerDecoder ber=new BerDecoder(value,0,value.length);  ber.parseSeq(null);  resultSize=ber.parseInt();  cookie=ber.parseOctetString(Ber.ASN_OCTET_STR,null);}  }
class C{  final void put(final ClassWriter cw,final byte[] code,final int len,final int maxStack,final int maxLocals,final ByteVector out){  Attribute attr=this;  while (attr != null) {    ByteVector b=attr.write(cw,code,len,maxStack,maxLocals);    out.putShort(cw.newUTF8(attr.type)).putInt(b.length);    out.putByteArray(b.data,0,b.length);    attr=attr.next;  }}  }
class C{  public final boolean canBeSeenBy(ReferenceBinding receiverType,ReferenceBinding invocationType){  if (isPublic())   return true;  if (invocationType == this && invocationType == receiverType)   return true;  if (isProtected()) {    if (invocationType == this)     return true;    if (invocationType.fPackage == this.fPackage)     return true;    TypeBinding currentType=invocationType.erasure();    TypeBinding declaringClass=enclosingType().erasure();    if (declaringClass == invocationType)     return true;    if (declaringClass == null)     return false;    do {      if (currentType.findSuperTypeOriginatingFrom(declaringClass) != null)       return true;      currentType=currentType.enclosingType();    } while (currentType != null);    return false;  }  if (isPrivate()) {    receiverCheck: {      if (!(receiverType == this || receiverType == enclosingType())) {        if (receiverType.isTypeVariable()) {          TypeVariableBinding typeVariable=(TypeVariableBinding)receiverType;          if (typeVariable.environment.globalOptions.complianceLevel <= ClassFileConstants.JDK1_6 && (typeVariable.isErasureBoundTo(erasure()) || typeVariable.isErasureBoundTo(enclosingType().erasure())))           break receiverCheck;        }        return false;      }    }    if (invocationType != this) {      ReferenceBinding outerInvocationType=invocationType;      ReferenceBinding temp=outerInvocationType.enclosingType();      while (temp != null) {        outerInvocationType=temp;        temp=temp.enclosingType();      }      ReferenceBinding outerDeclaringClass=(ReferenceBinding)erasure();      temp=outerDeclaringClass.enclosingType();      while (temp != null) {        outerDeclaringClass=temp;        temp=temp.enclosingType();      }      if (outerInvocationType != outerDeclaringClass)       return false;    }    return true;  }  if (invocationType.fPackage != this.fPackage)   return false;  ReferenceBinding currentType=receiverType;  TypeBinding originalDeclaringClass=(enclosingType() == null ? this : enclosingType()).original();  do {    if (currentType.isCapture()) {      if (originalDeclaringClass == currentType.erasure().original())       return true;    } else {      if (originalDeclaringClass == currentType.original())       return true;    }    PackageBinding currentPackage=currentType.fPackage;    if (currentPackage != null && currentPackage != this.fPackage)     return false;  } while ((currentType=currentType.superclass()) != null);  return false;}  }
class C{  @Override public Lop constructLops() throws HopsException, LopsException {  if (getLops() != null)   return getLops();  if (isMatrixMultiply()) {    Hop input1=getInput().get(0);    Hop input2=getInput().get(1);    ExecType et=optFindExecType();    MMTSJType mmtsj=checkTransposeSelf();    ChainType chain=checkMapMultChain();    if (et == ExecType.CP) {      _method=optFindMMultMethodCP(input1.getDim1(),input1.getDim2(),input2.getDim1(),input2.getDim2(),mmtsj,chain,_hasLeftPMInput);switch (_method) {case TSMM:        constructCPLopsTSMM(mmtsj);      break;case MAPMM_CHAIN:    constructCPLopsMMChain(chain);  break;case PMM:constructCPLopsPMM();break;case MM:constructCPLopsMM();break;default :throw new HopsException(this.printErrorLocation() + "Invalid Matrix Mult Method (" + _method+ ") while constructing CP lops.");}} else if (et == ExecType.SPARK) {boolean tmmRewrite=input1 instanceof ReorgOp && ((ReorgOp)input1).getOp() == ReOrgOp.TRANSPOSE;_method=optFindMMultMethodSpark(input1.getDim1(),input1.getDim2(),input1.getRowsInBlock(),input1.getColsInBlock(),input1.getNnz(),input2.getDim1(),input2.getDim2(),input2.getRowsInBlock(),input2.getColsInBlock(),input2.getNnz(),mmtsj,chain,_hasLeftPMInput,tmmRewrite);switch (_method) {case TSMM:case TSMM2:constructSparkLopsTSMM(mmtsj,_method == MMultMethod.TSMM2);break;case MAPMM_L:case MAPMM_R:constructSparkLopsMapMM(_method);break;case MAPMM_CHAIN:constructSparkLopsMapMMChain(chain);break;case PMAPMM:constructSparkLopsPMapMM();break;case CPMM:constructSparkLopsCPMM();break;case RMM:constructSparkLopsRMM();break;case PMM:constructSparkLopsPMM();break;case ZIPMM:constructSparkLopsZIPMM();break;default :throw new HopsException(this.printErrorLocation() + "Invalid Matrix Mult Method (" + _method+ ") while constructing SPARK lops.");}} else if (et == ExecType.MR) {_method=optFindMMultMethodMR(input1.getDim1(),input1.getDim2(),input1.getRowsInBlock(),input1.getColsInBlock(),input1.getNnz(),input2.getDim1(),input2.getDim2(),input2.getRowsInBlock(),input2.getColsInBlock(),input2.getNnz(),mmtsj,chain,_hasLeftPMInput);switch (_method) {case MAPMM_L:case MAPMM_R:constructMRLopsMapMM(_method);break;case MAPMM_CHAIN:constructMRLopsMapMMChain(chain);break;case CPMM:constructMRLopsCPMM();break;case RMM:constructMRLopsRMM();break;case TSMM:constructMRLopsTSMM(mmtsj);break;case PMM:constructMRLopsPMM();break;default :throw new HopsException(this.printErrorLocation() + "Invalid Matrix Mult Method (" + _method+ ") while constructing MR lops.");}}} else throw new HopsException(this.printErrorLocation() + "Invalid operation in AggBinary Hop, aggBin(" + innerOp+ ","+ outerOp+ ") while constructing lops.");constructAndSetLopsDataFlowProperties();return getLops();}  }
class C{  public Where<T,ID> rawComparison(String columnName,String rawOperator,Object value) throws SQLException {  addClause(new SimpleComparison(columnName,findColumnFieldType(columnName),value,rawOperator));  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:50.254 -0500",hash_original_method="CFA8E7173C316A6185A16AC0AD3BD82D",hash_generated_method="982BEC399A623C2171E6862AD67A8EC5") protected static boolean isCloneable(Object obj){  return obj instanceof Cloneable;}  }
class C{  public int indexOfTabComponent(Component tabComponent){  for (int i=0; i < getTabCount(); i++) {    Component c=getTabComponentAt(i);    if (c == tabComponent) {      return i;    }  }  return -1;}  }
class C{  public int stepToPreviousEvent(){  mFormEntryController.stepToPreviousEvent();  if (indexIsInFieldList() && getEvent() == FormEntryController.EVENT_QUESTION) {    FormEntryCaption[] captions=getCaptionHierarchy();    FormEntryCaption grp=captions[captions.length - 2];    int event=mFormEntryController.jumpToIndex(grp.getIndex());    FormIndex idx=grp.getIndex();    if (!mFormEntryController.getModel().isIndexRelevant(idx)) {      return stepToPreviousEvent();    }    idx=mFormEntryController.getModel().incrementIndex(idx,true);    while (FormIndex.isSubElement(grp.getIndex(),idx)) {      if (mFormEntryController.getModel().isIndexRelevant(idx)) {        return event;      }      idx=mFormEntryController.getModel().incrementIndex(idx,true);    }    return stepToPreviousEvent();  } else   if (indexIsInFieldList() && getEvent() == FormEntryController.EVENT_GROUP) {    FormIndex grpidx=mFormEntryController.getModel().getFormIndex();    int event=mFormEntryController.getModel().getEvent();    if (!mFormEntryController.getModel().isIndexRelevant(grpidx)) {      return stepToPreviousEvent();    }    FormIndex idx=mFormEntryController.getModel().incrementIndex(grpidx,true);    while (FormIndex.isSubElement(grpidx,idx)) {      if (mFormEntryController.getModel().isIndexRelevant(idx)) {        return event;      }      idx=mFormEntryController.getModel().incrementIndex(idx,true);    }    return stepToPreviousEvent();  }  return getEvent();}  }
class C{  public static int test1Snippet(String s){  if (s == null) {    return noninlineLength(alphabet) + 1;  }  char[] sChars=s.toCharArray();  int count=0;  for (int i=0; i < alphabet.length && i < sChars.length; i++) {    if (alphabet[i] == sChars[i]) {      count++;    }  }  return count;}  }
class C{  public synchronized RemoteCall newCall(RemoteObject obj,Operation[] ops,int opnum,long hash) throws RemoteException {  throw new UnsupportedOperationException(versionComplaint);}  }
class C{  public static String signJWT(String secret,String jwtID,Integer ttl,String iss,Map<String,String> claims) throws JOSEException {  JWSSigner jwsSigner=new MACSigner(secret.getBytes());  JWTClaimsSet.Builder builder=new JWTClaimsSet.Builder();  builder.jwtID(jwtID).expirationTime(DateTime.now().plusMinutes(ttl).toDate()).issuer(iss);  if (claims != null && !claims.isEmpty()) {    for (    Map.Entry<String,String> entry : claims.entrySet()) {      builder.claim(entry.getKey(),entry.getValue());    }  }  JWTClaimsSet claimsSet=builder.build();  SignedJWT signedJWT=new SignedJWT(new JWSHeader(JWSAlgorithm.HS256),claimsSet);  signedJWT.sign(jwsSigner);  return signedJWT.serialize();}  }
class C{  public SmellSensor(final OdorWorldEntity parent,final String label,double theta,double radius){  super(parent,label);  this.parent=parent;  this.theta=theta;  this.radius=radius;}  }
class C{  @Override protected EClass eStaticClass(){  return ExpressionsPackage.Literals.NUMERICAL_ADD_SUBTRACT_EXPRESSION;}  }
class C{  public XmlHandler overrideAnnotatedClass(Class<?>... classes){  try {    for (    Class<?> clazz : classes)     overrideAnnotatedClass(clazz,false);  } catch (  Exception e) {    JmapperLog.ERROR(e);  }  return this;}  }
class C{  public Builder acceptLanguage(AcceptLanguage acceptLanguage){  this.acceptLanguage=acceptLanguage;  return this;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private double restore(int d,double val){  d=(mean.length == 1) ? 0 : d;  return (val * stddev[d]) + mean[d];}  }
class C{  public final boolean raycast(final RayCastOutput output,final RayCastInput input,IWorldPool argPool){  float tmin=-Float.MAX_VALUE;  float tmax=Float.MAX_VALUE;  final Vec2 p=argPool.popVec2();  final Vec2 d=argPool.popVec2();  final Vec2 absD=argPool.popVec2();  final Vec2 normal=argPool.popVec2();  p.set(input.p1);  d.set(input.p2).subLocal(input.p1);  Vec2.absToOut(d,absD);  if (absD.x < Settings.EPSILON) {    if (p.x < lowerBound.x || upperBound.x < p.x) {      argPool.pushVec2(4);      return false;    }  } else {    final float inv_d=1.0f / d.x;    float t1=(lowerBound.x - p.x) * inv_d;    float t2=(upperBound.x - p.x) * inv_d;    float s=-1.0f;    if (t1 > t2) {      final float temp=t1;      t1=t2;      t2=temp;      s=1.0f;    }    if (t1 > tmin) {      normal.setZero();      normal.x=s;      tmin=t1;    }    tmax=MathUtils.min(tmax,t2);    if (tmin > tmax) {      argPool.pushVec2(4);      return false;    }  }  if (absD.y < Settings.EPSILON) {    if (p.y < lowerBound.y || upperBound.y < p.y) {      argPool.pushVec2(4);      return false;    }  } else {    final float inv_d=1.0f / d.y;    float t1=(lowerBound.y - p.y) * inv_d;    float t2=(upperBound.y - p.y) * inv_d;    float s=-1.0f;    if (t1 > t2) {      final float temp=t1;      t1=t2;      t2=temp;      s=1.0f;    }    if (t1 > tmin) {      normal.setZero();      normal.y=s;      tmin=t1;    }    tmax=MathUtils.min(tmax,t2);    if (tmin > tmax) {      argPool.pushVec2(4);      return false;    }  }  if (tmin < 0.0f || input.maxFraction < tmin) {    argPool.pushVec2(4);    return false;  }  output.fraction=tmin;  output.normal.x=normal.x;  output.normal.y=normal.y;  argPool.pushVec2(4);  return true;}  }
class C{  @SuppressWarnings({"SameParameterValue"}) public static void testPrint(int a,int depth){  DepthChoiceGenerator cg=new DepthChoiceGenerator(a,depth);  int[] choice;  System.out.println();  System.out.println("Printing combinations for " + a + " choose "+ depth+ ":");  System.out.println();  while ((choice=cg.next()) != null) {    if (choice.length == 0) {      System.out.println("zero-length array");    } else {      for (      int aChoice : choice) {        System.out.print(aChoice + "\t");      }      System.out.println();    }  }  System.out.println();}  }
class C{  @Override protected EClass eStaticClass(){  return StextPackage.Literals.REGULAR_EVENT_SPEC;}  }
class C{  public static boolean containsModelCheckingModuleConflict(String rootModuleName){  String rootModuleFileName=rootModuleName;  if (!rootModuleName.endsWith(ResourceHelper.TLA_EXTENSION)) {    rootModuleFileName=ResourceHelper.getModuleFileName(rootModuleName);  }  List<String> extendedModuleNames=ToolboxHandle.getExtendedModules(rootModuleFileName);  Iterator<String> it=extendedModuleNames.iterator();  while (it.hasNext()) {    String moduleName=it.next();    if (moduleName.equals(FILE_TLA)) {      return true;    }  }  return false;}  }
class C{  public void appendCloseEmTag(){  text.append("</em>");}  }
class C{  protected void makeGeometry(ShapeData shapeData){  Object cacheKey=new Geometry.CacheKey(this.getClass(),"Box0",this.subdivisions);  Geometry geom=(Geometry)this.getGeometryCache().getObject(cacheKey);  if (geom == null) {    makeUnitBox(this.subdivisions,shapeData.getMeshes());    for (int piece=0; piece < getFaceCount(); piece++) {      if (offsets.get(piece) == null)       offsets.put(piece,new OffsetsList());      cacheKey=new Geometry.CacheKey(this.getClass(),"Box" + piece,this.subdivisions);      this.getGeometryCache().add(cacheKey,shapeData.getMesh(piece));    }  } else {    for (int piece=0; piece < getFaceCount(); piece++) {      if (offsets.get(piece) == null)       offsets.put(piece,new OffsetsList());      cacheKey=new Geometry.CacheKey(this.getClass(),"Box" + piece,this.subdivisions);      geom=(Geometry)this.getGeometryCache().getObject(cacheKey);      shapeData.addMesh(piece,geom);    }  }}  }
class C{  public static String toAttributeValue(String val) throws CharConversionException {  if (val == null) {    throw new CharConversionException("null");  }  if (checkAttributeCharacters(val)) {    return val;  }  StringBuilder buf=new StringBuilder();  for (int i=0; i < val.length(); i++) {    char ch=val.charAt(i);    if ('<' == ch) {      buf.append("&lt;");      continue;    } else     if ('&' == ch) {      buf.append("&amp;");      continue;    } else     if ('\'' == ch) {      buf.append("&apos;");      continue;    } else     if ('"' == ch) {      buf.append("&quot;");      continue;    }    buf.append(ch);  }  return buf.toString();}  }
class C{  public void testPolyline() throws Exception {  EsriLayer layer=new EsriLayer("Drawable Layer",SHAPE_TYPE_POLYLINE,2);  DbfTableModel model=layer.getModel();  model.setDecimalCount(0,(byte)0);  model.setLength(0,(byte)20);  model.setColumnName(0,"Column1");  model.setType(0,(byte)DbfTableModel.TYPE_CHARACTER);  model.setDecimalCount(1,(byte)3);  model.setLength(1,(byte)20);  model.setColumnName(1,"Column2");  model.setType(1,(byte)DbfTableModel.TYPE_NUMERIC);  addPolylineRecord1(layer);  addPolylineRecord2(layer);  addPolylineRecord3(layer);  EsriGraphicList list=layer.getEsriGraphicList();  ShpOutputStream pos=new ShpOutputStream(new FileOutputStream("polylinetest0.shp"));  int[][] indexData=pos.writeGeometry(list);  ShxOutputStream xos=new ShxOutputStream(new FileOutputStream("polylinetest0.shx"));  xos.writeIndex(indexData,list.getType(),list.getExtents());  DbfOutputStream dos=new DbfOutputStream(new FileOutputStream("polylinetest0.dbf"));  dos.writeModel(model);}  }
class C{  final Region cutChildren(Region r,final LWComponentPeer<?,?> above){  boolean aboveFound=above == null;  for (  final LWComponentPeer<?,?> child : getChildren()) {    if (!aboveFound && child == above) {      aboveFound=true;      continue;    }    if (aboveFound) {      if (child.isVisible()) {        final Rectangle cb=child.getBounds();        final Region cr=child.getRegion();        final Region tr=cr.getTranslatedRegion(cb.x,cb.y);        r=r.getDifference(tr.getIntersection(getContentSize()));      }    }  }  return r;}  }
class C{  public StatePriorityRetrieval(){  hash=new StateHash();  tree=new BalancedTree<Integer,ArrayList<INode>>();}  }
class C{  public final CC shrink(float... widthHeight){switch (widthHeight.length) {default :    throw new IllegalArgumentException("Illegal argument count: " + widthHeight.length);case 2:  shrinkY(widthHeight[1]);case 1:shrinkX(widthHeight[0]);}return this;}  }
class C{  void jbInit() throws Exception {  this.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);  mainPanel.setLayout(mainLayout);  label.setText("Label");  northPanel.setLayout(northLayout);  northLayout.setAlignment(FlowLayout.LEFT);  getContentPane().add(mainPanel);  mainPanel.add(northPanel,BorderLayout.NORTH);  northPanel.add(label,null);  mainPanel.add(confirmPanel,BorderLayout.SOUTH);  mainPanel.add(centerTabbedPane,BorderLayout.CENTER);  centerTabbedPane.addChangeListener(this);  centerTabbedPane.add(pricePane,Msg.getMsg(Env.getCtx(),"PriceHistory"));  centerTabbedPane.add(reservedPane,Msg.translate(Env.getCtx(),"QtyReserved"));  centerTabbedPane.add(orderedPane,Msg.translate(Env.getCtx(),"QtyOrdered"));  centerTabbedPane.add(unconfirmedPane,Msg.getMsg(Env.getCtx(),"QtyUnconfirmed"));  if (m_M_Product_ID != 0)   centerTabbedPane.add(atpPane,Msg.getMsg(Env.getCtx(),"ATP"));  pricePane.getViewport().add(m_tablePrice,null);  reservedPane.getViewport().add(m_tableReserved,null);  orderedPane.getViewport().add(m_tableOrdered,null);  unconfirmedPane.getViewport().add(m_tableUnconfirmed,null);  if (m_M_Product_ID != 0)   atpPane.getViewport().add(m_tableAtp,null);  confirmPanel.addActionListener(this);}  }
class C{  @Override protected EClass eStaticClass(){  return SexecPackage.Literals.TRACE_STATE_EXITED;}  }
class C{  protected String readGestureResponses(Layer layer,Projection proj,OMGridGenerator generator) throws IOException, EOFException {  long startTime=System.currentTimeMillis();  String header=null;  int gestureType;  float ver=link.dis.readFloat();  if (ver != version) {    if (ver == .1) {      throw new IOException("LinkActionList: Versions do not match! DANGER!");    } else {      Debug.message("link","LinkActionList: Versions do not match");    }  }  if (properties != null) {    properties.clear();  }  properties=LinkProperties.read(link.dis,properties);  LinkProperties graphicProperties=new LinkProperties();  Debug.message("link","LinkActionList: reading actions:");  while (true) {    header=link.readDelimiter(false);    if (header == Link.END_TOTAL || header == Link.END_SECTION) {      long endTime=System.currentTimeMillis();      if (Debug.debugging("link")) {        Debug.output("LinkActionList: received in " + (float)(endTime - startTime) / 1000.0f + " seconds");      }      return header;    }    gestureType=link.dis.readByte();switch (gestureType) {case ACTION_GRAPHICS:      int graphicAction=link.dis.readInt();    if (updates == null) {      updates=new Vector();    }  if (LinkUtil.isMask(graphicAction,UPDATE_ADD_GRAPHIC_MASK) || LinkUtil.isMask(graphicAction,UPDATE_GRAPHIC_MASK)) {    updates.addElement(readGraphic(graphicAction,graphicProperties,proj,generator));  } else {    graphicProperties=LinkProperties.read(link.dis,graphicProperties);    updates.addElement(new GraphicUpdate(graphicAction,graphicProperties.getProperty(LPC_GRAPHICID)));  }reacted=true;break;case ACTION_GUI:break;case ACTION_MAP:mapUpdate=true;if (mapProperties != null) {mapProperties.clear();}mapProperties=LinkProperties.read(link.dis,mapProperties);break;default :System.err.println("LinkActionList: received unknown gesture type.");}}}  }
class C{  public CSVWriter(Writer writer,char separator){  this(writer,separator,DEFAULT_QUOTE_CHARACTER);}  }
class C{  public Resource loadResource(String resourceName,String subDir){  Resource result=null;  String newresourceName=subDir + File.separator + resourceName;  result=configurationResourceLoader.loadResource(newresourceName,null);  return result;}  }
class C{  private int createFrameBufferObject(){  this.fbo=glGenFramebuffers();  glBindFramebuffer(GL_FRAMEBUFFER,fbo);  glFramebufferTexture2D(GL_FRAMEBUFFER,GL_COLOR_ATTACHMENT0,GL_TEXTURE_2D,this.tex,0);  int fboStatus=glCheckFramebufferStatus(GL_FRAMEBUFFER);  if (fboStatus != GL_FRAMEBUFFER_COMPLETE) {    throw new AssertionError("Could not create FBO: " + fboStatus);  }  glBindFramebuffer(GL_FRAMEBUFFER,0);  return fbo;}  }
class C{  @Override protected void validate(){  failIf((this.value <= 0 || this.value > 1.0),"Ratio must be a float between 0 and 1");}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("From " + request.getRemoteHost() + " - "+ request.getRemoteAddr()+ " - "+ request.getRequestURL());  Properties ctx=JSPEnv.getCtx(request);  HttpSession session=request.getSession(true);  session.removeAttribute(WebSessionCtx.HDR_MESSAGE);  WebBasket wb=(WebBasket)session.getAttribute(WebBasket.NAME);  if (wb == null)   wb=new WebBasket();  session.setAttribute(WebBasket.NAME,wb);  int SalesRep_ID=WebUtil.getParameterAsInt(request,P_SalesRep_ID);  if (SalesRep_ID != 0) {    wb.setSalesRep_ID(SalesRep_ID);    log.fine("SalesRep_ID=" + SalesRep_ID);  }  PriceList pl=(PriceList)session.getAttribute(PriceList.NAME);  if (pl == null) {    log.fine("No Price List in session");    pl=(PriceList)request.getAttribute(PriceList.NAME);  }  log.fine("PL=" + pl);  deleteLine(request,wb);  addLine(request,pl,wb);  log.info(wb.toString());  String url="/basket.jsp";  log.info("Forward to " + url);  RequestDispatcher dispatcher=getServletContext().getRequestDispatcher(url);  dispatcher.forward(request,response);}  }
class C{  public Matrix4f rotateXYZ(float angleX,float angleY,float angleZ){  return rotateXYZ(angleX,angleY,angleZ,this);}  }
class C{  public TrimFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public static boolean mousePressed(){synchronized (mouseLock) {    return mousePressed;  }}  }
class C{  public static String sha1(final String string) throws NoSuchAlgorithmException {  final MessageDigest digest=MessageDigest.getInstance("SHA-1");  digest.reset();  final byte[] data=digest.digest(string.getBytes());  return String.format("%0" + (data.length * 2) + "X",new BigInteger(1,data));}  }
class C{  protected K entryKey(HashEntry<K,V> entry){  return entry.key;}  }
class C{  @Override public boolean equals(Object compareTo){  if (!(compareTo instanceof GramBooleanQuery)) {    return false;  }  GramBooleanQuery that=(GramBooleanQuery)compareTo;  if (this.operator != that.operator) {    return false;  }  if (this.operator == QueryOp.ANY || this.operator == QueryOp.NONE) {    return true;  }  if (this.operator == QueryOp.LEAF) {    return this.leaf.equals(that.leaf);  }  if (!this.subQuerySet.equals(that.subQuerySet)) {    return false;  }  return true;}  }
class C{  public String replaceIgnoredSections(){  if (containsIgnoredSections) {    return ignoredSectionsStore.replaceIgnoredSections(originalXml);  }  return originalXml;}  }
class C{  public static boolean contentEqualsIgnoreEOL(Reader input1,Reader input2) throws IOException {  BufferedReader br1=toBufferedReader(input1);  BufferedReader br2=toBufferedReader(input2);  String line1=br1.readLine();  String line2=br2.readLine();  while (line1 != null && line2 != null && line1.equals(line2)) {    line1=br1.readLine();    line2=br2.readLine();  }  return line1 == null ? line2 == null ? true : false : line1.equals(line2);}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == ModifiableElement.class) {switch (baseOperationID) {default :      return -1;  }}if (baseClass == TypeProvidingElement.class) {switch (baseOperationID) {case N4JSPackage.TYPE_PROVIDING_ELEMENT___GET_DECLARED_TYPE_REF:    return N4JSPackage.N4_MEMBER_DECLARATION___GET_DECLARED_TYPE_REF;default :  return -1;}}if (baseClass == TypableElement.class) {switch (baseOperationID) {default :return -1;}}if (baseClass == NamedElement.class) {switch (baseOperationID) {case N4JSPackage.NAMED_ELEMENT___GET_NAME:return N4JSPackage.N4_MEMBER_DECLARATION___GET_NAME;default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  @Override public boolean equals(final Object o){  if (this == o) {    return true;  }  if (!(o instanceof Type)) {    return false;  }  Type t=(Type)o;  if (sort != t.sort) {    return false;  }  if (sort >= ARRAY) {    if (len != t.len) {      return false;    }    for (int i=off, j=t.off, end=i + len; i < end; i++, j++) {      if (buf[i] != t.buf[j]) {        return false;      }    }  }  return true;}  }
class C{  @Override public void valueForPathChanged(TreePath path,Object newValue){  DefaultMutableTreeNode aNode=(DefaultMutableTreeNode)path.getLastPathComponent();  SampleData sampleData=(SampleData)aNode.getUserObject();  sampleData.setString((String)newValue);  sampleData.setColor(Color.green);  nodeChanged(aNode);}  }
class C{  public void delete(final Player player,final List<String> args){  int i;  try {    i=Integer.parseInt(args.get(1));  } catch (  final NumberFormatException e) {    sandbox.privateText(player,"Please specify a number");    return;  }  final Chest chest=storage.get(Integer.valueOf(i));  if (chest != null) {    storage.remove(Integer.valueOf(i));    sandbox.remove(chest);    final StringBuilder sb=new StringBuilder();    sb.append("Removed chest ");    chestToString(sb,chest);    sandbox.privateText(player,sb.toString());  } else {    sandbox.privateText(player,"Chest " + i + " does not exist");  }}  }
class C{  @Override protected ISPO resolve(final ISPO spo){  final ISPO timestamped=new SPO(spo.s(),spo.p(),timestamp,StatementEnum.Explicit);  if (log.isTraceEnabled()) {    log.trace(spo);    log.trace(timestamped);  }  return timestamped;}  }
class C{  public static synchronized void addLogAdministrator(LogAdministrator admin){  if (logAdministrators_.contains(admin))   return;  logAdministrators_.add(admin);  if (service_ != null) {    admin.registerLogControl(service_.getLogControl());  }}  }
class C{  void abortWithError(String msg,Element e){  reportError(msg,e);  throw new AbortProcessingException();}  }
class C{  public void endGet(long startTime,boolean timedOut,boolean failed){  long duration=getStatTime() - startTime;  endClientOp(duration,timedOut,failed);  this.stats.incInt(getInProgressId,-1);  int endGetId;  if (timedOut) {    endGetId=getTimedOutId;  } else   if (failed) {    endGetId=getFailedId;  } else {    endGetId=getId;  }  this.stats.incInt(endGetId,1);  this.stats.incLong(getDurationId,duration);}  }
class C{  public void takeSnapShot(String name,String keySpace) throws IOException {  getProbe().takeSnapshot(name,null,keySpace);}  }
class C{  public static Range findRangeBounds(CategoryDataset dataset,boolean includeInterval){  ParamChecks.nullNotPermitted(dataset,"dataset");  Range result;  if (dataset instanceof RangeInfo) {    RangeInfo info=(RangeInfo)dataset;    result=info.getRangeBounds(includeInterval);  } else {    result=iterateRangeBounds(dataset,includeInterval);  }  return result;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:35.744 -0500",hash_original_method="62B4E508B2BD1FD8674C188E31D3FA94",hash_generated_method="F2364D7E3AE13D2A42D3A4CBE3B02500") private long computeAge(long nowMillis){  long apparentReceivedAge=servedDate != null ? Math.max(0,receivedResponseMillis - servedDate.getTime()) : 0;  long receivedAge=ageSeconds != -1 ? Math.max(apparentReceivedAge,TimeUnit.SECONDS.toMillis(ageSeconds)) : apparentReceivedAge;  long responseDuration=receivedResponseMillis - sentRequestMillis;  long residentDuration=nowMillis - receivedResponseMillis;  return receivedAge + responseDuration + residentDuration;}  }
class C{  public static OMEllipse read(DataInputStream dis,LinkProperties propertiesBuffer) throws IOException {  OMEllipse ellipse=null;  int renderType=dis.readByte();switch (renderType) {case RENDERTYPE_LATLON:{      float lat=dis.readFloat();      float lon=dis.readFloat();      double majorAxisSpan=dis.readFloat();      double minorAxisSpan=dis.readFloat();      int units=dis.readByte();      double rotationAngle=dis.readFloat();      Length unit=Length.DECIMAL_DEGREE;switch (units) {case 0:        unit=Length.KM;      break;case 1:    unit=Length.MILE;  break;case 2:unit=Length.NM;break;default :break;}ellipse=new OMEllipse(new LatLonPoint.Double(lat,lon),majorAxisSpan,minorAxisSpan,unit,rotationAngle);break;}case RENDERTYPE_XY:{int x=dis.readInt();int y=dis.readInt();int majorAxisSpan=dis.readInt();int minorAxisSpan=dis.readInt();double rotationAngle=dis.readFloat();ellipse=new OMEllipse(x,y,majorAxisSpan,minorAxisSpan,rotationAngle);break;}case RENDERTYPE_OFFSET:{float lat=dis.readFloat();float lon=dis.readFloat();int offsetX=dis.readInt();int offsetY=dis.readInt();int w=dis.readInt();int h=dis.readInt();double rotationAngle=dis.readFloat();ellipse=new OMEllipse(new LatLonPoint.Double(lat,lon),offsetX,offsetY,w,h,rotationAngle);break;}default :{Debug.error("LinkEllipse.read: ellipse rendertype unknown.");break;}}if (ellipse != null) {LinkProperties.loadPropertiesIntoOMGraphic(dis,ellipse,propertiesBuffer);}return ellipse;}  }
class C{  void synchronize(){  SolrZkClient zkClient=core.getCoreDescriptor().getCoreContainer().getZkController().getZkClient();  try {    zkClient.setData(this.getZnodePath(),this.getState().getBytes(),true);    this.setState(CdcrParams.BufferState.get(zkClient.getData(this.getZnodePath(),watcher,null,true)));  } catch (  KeeperException|InterruptedException e) {    log.warn("Failed synchronising new state",e);  }}  }
class C{  public T caseTN4Classifier(TN4Classifier object){  return null;}  }
class C{  public int size(){  return size;}  }
class C{  public static <K,V>HashMap<K,V> hashMap(){  return new HashMap<K,V>();}  }
class C{  public TLongLongHashMap(){}  }
class C{  static long allocateLongArray(int length){  return unsafe.allocateMemory(getLongSize() * length);}  }
class C{  public static void parseXmlFile(String filename,DefaultHandler handler,boolean validating) throws RSSException {  RSSParser p=new RSSParser();  p.setXmlResource(filename);  p.setHandler(handler);  p.setValidate(validating);  p.parse();}  }
class C{  @Deprecated public boolean isAssignableFrom(TypeToken<?> token){  return isAssignableFrom(token.getType());}  }
class C{  public Boolean isDisallowPrerequisiteMoves(){  return disallowPrerequisiteMoves;}  }
class C{  public static org.oscm.internal.vo.VOServiceEntry convertToUp(org.oscm.vo.VOServiceEntry oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOServiceEntry newVO=new org.oscm.internal.vo.VOServiceEntry();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setParameters(convertToUpVOParameter(oldVO.getParameters()));  newVO.setDescription(oldVO.getDescription());  newVO.setName(oldVO.getName());  newVO.setServiceId(oldVO.getServiceId());  newVO.setTechnicalId(oldVO.getTechnicalId());  newVO.setFeatureURL(oldVO.getFeatureURL());  newVO.setBaseURL(oldVO.getBaseURL());  newVO.setPriceModel(convertToUp(oldVO.getPriceModel()));  newVO.setStatus(EnumConverter.convert(oldVO.getStatus(),org.oscm.internal.types.enumtypes.ServiceStatus.class));  newVO.setAccessType(EnumConverter.convert(oldVO.getAccessType(),org.oscm.internal.types.enumtypes.ServiceAccessType.class));  newVO.setSellerId(oldVO.getSellerId());  newVO.setSellerName(oldVO.getSellerName());  newVO.setSellerKey(oldVO.getSellerKey());  newVO.setTags(oldVO.getTags());  newVO.setShortDescription(oldVO.getShortDescription());  newVO.setAverageRating(oldVO.getAverageRating());  newVO.setNumberOfReviews(oldVO.getNumberOfReviews());  newVO.setOfferingType(EnumConverter.convert(oldVO.getOfferingType(),org.oscm.internal.types.enumtypes.OfferingType.class));  newVO.setSubscriptionLimitReached(oldVO.isSubscriptionLimitReached());  newVO.setConfiguratorUrl(oldVO.getConfiguratorUrl());  newVO.setCustomTabUrl(oldVO.getCustomTabUrl());  newVO.setCustomTabName(oldVO.getCustomTabName());  return newVO;}  }
class C{  public double filterFitness(double fitness){  return fitness;}  }
class C{  static void checkMethodIdentifier(int version,final String name,final String msg){  if (name == null || name.length() == 0) {    throw new IllegalArgumentException("Invalid " + msg + " (must not be null or empty)");  }  if ((version & 0xFFFF) >= Opcodes.V1_5) {    for (int i=0; i < name.length(); ++i) {      if (".;[/<>".indexOf(name.charAt(i)) != -1) {        throw new IllegalArgumentException("Invalid " + msg + " (must be a valid unqualified name): "+ name);      }    }    return;  }  if (!Character.isJavaIdentifierStart(name.charAt(0))) {    throw new IllegalArgumentException("Invalid " + msg + " (must be a '<init>', '<clinit>' or a valid Java identifier): "+ name);  }  for (int i=1; i < name.length(); ++i) {    if (!Character.isJavaIdentifierPart(name.charAt(i))) {      throw new IllegalArgumentException("Invalid " + msg + " (must be '<init>' or '<clinit>' or a valid Java identifier): "+ name);    }  }}  }
class C{  protected BytesRef decodePayload(BytesRef scratch,ByteArrayDataInput tmpInput){  tmpInput.reset(scratch.bytes,scratch.offset,scratch.length);  tmpInput.skipBytes(scratch.length - 2);  short payloadLength=tmpInput.readShort();  assert payloadLength >= 0 : payloadLength;  tmpInput.setPosition(scratch.offset + scratch.length - 2 - payloadLength);  BytesRef payloadScratch=new BytesRef(payloadLength);  tmpInput.readBytes(payloadScratch.bytes,0,payloadLength);  payloadScratch.length=payloadLength;  scratch.length-=2;  scratch.length-=payloadLength;  return payloadScratch;}  }
class C{  public double kthSmallestValue(Attribute att,int k){  return kthSmallestValue(att.index(),k);}  }
class C{  public void stepUp(boolean shiftDown){  if (shiftDown)   viewpointNode.drag(0,1); else   viewpointNode.rotate(1,0);}  }
class C{  public static int[] range(int start,int end){  int[] out=new int[end - start];  for (int i=0, j=start; j < end; i++, j++) {    out[i]=j;  }  return out;}  }
class C{  private boolean compareParameterValue(Parameter sourceParameter,Parameter targetParameter){  String sourceParameterValue=sourceParameter.getValue() == null ? "" : sourceParameter.getValue().trim();  String targetParameterValue=targetParameter.getValue() == null ? "" : targetParameter.getValue().trim();  return sourceParameterValue.equals(targetParameterValue);}  }
class C{  public int size(){  return readMethods.size();}  }
class C{  @SuppressFBWarnings("DM_EXIT") public static void runMain(IFindBugsEngine findBugs,TextUICommandLine commandLine) throws IOException {  boolean verbose=!commandLine.quiet() || commandLine.setExitCode();  FutureValue<Collection<UpdateChecker.PluginUpdate>> updateHolder=null;  if (verbose) {    updateHolder=DetectorFactoryCollection.instance().getUpdates();  }  try {    findBugs.execute();  } catch (  InterruptedException e) {    assert false;    checkExitCodeFail(commandLine,e);    throw new RuntimeException(e);  }catch (  RuntimeException e) {    checkExitCodeFail(commandLine,e);    throw e;  }catch (  IOException e) {    checkExitCodeFail(commandLine,e);    throw e;  }  int bugCount=findBugs.getBugCount();  int missingClassCount=findBugs.getMissingClassCount();  int errorCount=findBugs.getErrorCount();  if (verbose) {    if (bugCount > 0) {      System.err.println("Warnings generated: " + bugCount);    }    if (missingClassCount > 0) {      System.err.println("Missing classes: " + missingClassCount);    }    if (errorCount > 0) {      System.err.println("Analysis errors: " + errorCount);    }    if (updateHolder.isDone()) {      try {        Collection<PluginUpdate> updates=updateHolder.get();        if (!DetectorFactoryCollection.instance().getUpdateChecker().updatesHaveBeenSeenBefore(updates)) {          for (          UpdateChecker.PluginUpdate u : updates) {            System.err.println(u);          }        }      } catch (      InterruptedException e) {        assert true;      }    }  }  if (commandLine.setExitCode()) {    int exitCode=0;    System.err.println("Calculating exit code...");    if (errorCount > 0) {      exitCode|=ExitCodes.ERROR_FLAG;      System.err.println("Setting 'errors encountered' flag (" + ExitCodes.ERROR_FLAG + ")");    }    if (missingClassCount > 0) {      exitCode|=ExitCodes.MISSING_CLASS_FLAG;      System.err.println("Setting 'missing class' flag (" + ExitCodes.MISSING_CLASS_FLAG + ")");    }    if (bugCount > 0) {      exitCode|=ExitCodes.BUGS_FOUND_FLAG;      System.err.println("Setting 'bugs found' flag (" + ExitCodes.BUGS_FOUND_FLAG + ")");    }    System.err.println("Exit code set to: " + exitCode);    System.exit(exitCode);  }}  }
class C{  public void stress_test_TestSSLSocketPair_create(){  final boolean verbose=true;  while (true) {    TestSSLSocketPair test=TestSSLSocketPair.create();    if (verbose) {      System.out.println("client=" + test.client.getLocalPort() + " server="+ test.server.getLocalPort());    } else {      System.out.print("X");    }  }}  }
class C{  public void listAll(){  try {    listSchemas();  } catch (  Exception e) {    log.severe(e.getMessage());  }  try {    listCatalogs();  } catch (  Exception e) {    log.severe(e.getMessage());  }  try {    listTypes();  } catch (  Exception e) {    log.severe(e.getMessage());  }}  }
class C{  public static int truncateAndConvertToInt(long longValue){  return longValue > Integer.MAX_VALUE ? Integer.MAX_VALUE : longValue < Integer.MIN_VALUE ? Integer.MIN_VALUE : (int)longValue;}  }
class C{  public LongMemberValue(long j,ConstPool cp){  super('J',cp);  setValue(j);}  }
class C{  public static void loadDatabase(final Window parent,final IDatabase database){  final CDatabaseLoaderOperation operation=new CDatabaseLoaderOperation(database);  try {    database.connect();    database.load();  } catch (  final CouldntLoadDriverException exception) {    final String message="E00012: " + "Database driver could not be loaded";    final String description=CUtilityFunctions.createDescription(String.format("BinNavi could not create a database connection because the database " + "driver '%s' could not be loaded",database.getConfiguration().getDriver()),new String[]{"The database driver string is wrong.","The database driver file could not be found."},new String[]{"BinNavi can not load data from the given database until the " + "problem is resolved."});    NaviErrorDialog.show(parent,message,description,exception);  }catch (  final CouldntLoadDataException exception) {    final String message="E00014: " + "Could not load data from the database";    final String description=CUtilityFunctions.createDescription("An error occurred when loading data from the database.",new String[]{"The connection to the database was dropped while the data was loaded.","The database contains inconsistent information."},new String[]{"Close the database and open it again. Maybe close and re-start " + "BinNavi too. If the program persists, please contact the BinNavi support."});    NaviErrorDialog.show(parent,message,description,exception);  }catch (  final InvalidDatabaseException exception) {    final String message="E00015: " + "Database is in an inconsistent state";    final String description=CUtilityFunctions.createDescription("The selected database contains an invalid combination of BinNavi tables.",new String[]{"An earlier connection attempt failed and left the database in an " + "inconsistent state.","Some BinNavi tables were deleted accidentally by an outside program."},new String[]{"BinNavi can not use this database anymore. If the database is " + "empty, please delete the database and create a new database to work with " + "BinNavi. If the database already contains data please contact the BinNavi "+ "support."});    NaviErrorDialog.show(parent,message,description,exception);  }catch (  final CouldntInitializeDatabaseException exception) {    final String message="E00016: Database could not be initialized";    final String description=CUtilityFunctions.createDescription("BinNavi could not initialize the tables required for storing disassembly data " + "in the database.",new String[]{"There might have been a communication problem with the database."},new String[]{"The database is probably corrupted at this point. It is " + "recommended to delete the database. Afterwards you can try again with a " + "fresh database. If you do not want to do this please contact the BinNavi "+ "support to find out what other options exist for you."});    NaviErrorDialog.show(parent,message,description,exception);  }catch (  final InvalidExporterDatabaseFormatException exception) {    final String message="E00017: " + "Database has invalid exporter tables";    final String description=CUtilityFunctions.createDescription("BinNavi could not load data from the selected database because the database " + "contains invalid exporter tables",new String[]{"The database is too old to use with BinNavi."},new String[]{"It is recommended to create a database for this version of " + "BinNavi. If you do not want to do this please contact the BinNavi support " + "to find out what other options exist for you."});    NaviErrorDialog.show(parent,message,description,exception);  }catch (  final InvalidDatabaseVersionException exception) {    final String exceptionVersion=exception.getVersion().getString();    if (!exceptionVersion.equals("4.0.0") || !exceptionVersion.equals("5.0.0")) {      CMessageBox.showInformation(parent,String.format("You are trying to connect to an outdated BinNavi %s database.\n\n" + "Unfortunately you can not upgrade this database. Please create a " + "new database and export your modules again.",exceptionVersion));    } else {      CMessageBox.showInformation(parent,String.format("You are trying to connect to an outdated BinNavi %s database.\n\n" + "You have the option to update the database.",exceptionVersion));      if (JOptionPane.YES_OPTION == CMessageBox.showYesNoQuestion(parent,"Do you want to upgrade the database now?\n\n(The upgrade process can take " + "very long depending on the size of your current database)\n\n(Make " + "sure that the identity field contains a user name)")) {        final CDefaultProgressOperation updateOperation=new CDefaultProgressOperation("Upgrading database",true,false);        updateOperation.getProgressPanel().setText("Upgrading database");        try {          database.update();          database.close();        } catch (        final CouldntUpdateDatabaseException upgradeException) {          CUtilityFunctions.logException(upgradeException);          final String message="E00018: " + "Database could not be upgraded";          final String description=CUtilityFunctions.createDescription(String.format("BinNavi could not upgrade the database (database error %d). " + "This is a serious problem because the database could be " + "left in an inconsistent state. Please try to fix the "+ "problem that led to the error and try to update the "+ "database again.",upgradeException.getErrorCode()),new String[]{getErrorCode(upgradeException)},new String[]{"Please note that nobody must work with this database " + "until the database conversion process is complete. If someone " + "works with the database in its current state, partial or total "+ "data loss could happen."});          NaviErrorDialog.show(parent,message,description,exception);        } finally {          updateOperation.stop();        }        loadDatabase(parent,database);      } else {        database.close();      }    }  }catch (  final CouldntConnectException exception) {    final CDatabaseConfiguration config=database.getConfiguration();    if (exception.getSqlState().equalsIgnoreCase(PostgreSQLErrorCodes.INVALID_PASSWORD)) {      CMessageBox.showInformation(parent,String.format("The password for user '%s' on database '%s' is invalid",config.getUser(),config.getUrl()));      return;    }    if (exception.getSqlState().equalsIgnoreCase(PostgreSQLErrorCodes.POSTGRES_INVALID_CATALOG_NAME)) {      if (JOptionPane.YES_OPTION == CMessageBox.showYesNoCancelQuestion(parent,String.format("The database '%s' does not exist. Do you want to create it now?",config.getUrl()))) {        CDatabaseCreator.createDatabase(parent,config);      }    } else {      final String message="E00013: Database connection could not be established";      final String description=CUtilityFunctions.createDescription(String.format("BinNavi could not connect to the database '%s'",database.getConfiguration().getName()),new String[]{exception.getMessage()},new String[]{"BinNavi can not load data from the given database until the " + "problem is resolved."});      NaviErrorDialog.show(parent,message,description,exception);    }  }catch (  final LoadCancelledException exception) {  } finally {    operation.stop();  }}  }
class C{  public DomainModelRuntimeException(Throwable cause){  super(cause);}  }
class C{  private void printDurationStatistics(Map<Integer,Long> deliveryDurations,Map<Integer,Long> sndDurations,int maxMsgId,long guessedMaxDuration){  DurationAccumulator overall=new DurationAccumulator();  DurationAccumulator[] msgRange=collectStatistics(deliveryDurations,overall,maxMsgId);  int[] durationRange=new int[STATISTICS_SEGMENTS_CNT];  for (  Map.Entry<Integer,Long> e : deliveryDurations.entrySet()) {    long duration=e.getValue();    int idx=(int)((duration - 1) * durationRange.length / guessedMaxDuration);    if (idx < 0)     idx=0;    if (idx >= durationRange.length)     idx=durationRange.length - 1;    durationRange[idx]++;  }  DurationAccumulator sndOverall=new DurationAccumulator();  DurationAccumulator[] sndRange=collectStatistics(sndDurations,sndOverall,maxMsgId);  info("Overall send statistics: " + sndOverall);  info("Per message id statistics:");  for (int i=0; i < sndRange.length; i++) {    int rangeMin=i * maxMsgId / sndRange.length + 1;    int rangeMax=(i + 1) * maxMsgId / sndRange.length;    info(">>> [" + rangeMin + '-'+ rangeMax+ "]: "+ sndRange[i]);  }  info("Overall duration statistics: " + overall);  info("Per message id statistics:");  for (int i=0; i < msgRange.length; i++) {    int rangeMin=i * maxMsgId / msgRange.length + 1;    int rangeMax=(i + 1) * maxMsgId / msgRange.length;    info(">>> [" + rangeMin + '-'+ rangeMax+ "]: "+ msgRange[i]);  }  info("Duration histogram:");  for (int i=0; i < msgRange.length; i++) {    int rangeMin=(int)(i * guessedMaxDuration / durationRange.length + 1);    int rangeMax=(int)((i + 1) * guessedMaxDuration / durationRange.length);    float percents=(float)durationRange[i] * 100 / overall.count();    info(">>> [" + rangeMin + '-'+ rangeMax+ "] ms: "+ String.format("%.2f",percents)+ "% ("+ durationRange[i]+ " messages)");  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case GamlPackage.VARIABLE_REF__REF:    return ref != null;}return super.eIsSet(featureID);}  }
class C{  private void cleanMapping(){  ArrayList<Integer> toRemove=new ArrayList<Integer>();  int size=mListMapping.size();  for (int i=0; i < size; ++i) {    if (mListMapping.keyAt(i) == mListMapping.valueAt(i)) {      toRemove.add(mListMapping.keyAt(i));    }  }  size=toRemove.size();  for (int i=0; i < size; ++i) {    mListMapping.delete(toRemove.get(i));  }}  }
class C{  public OSTenantListRestRep updateOpenStackTenants(OSTenantListRestRep list){  return client.put(OSTenantListRestRep.class,list,OS_TENANTS_URL);}  }
class C{  public static Builder builder(){  return new Builder(new PollRequest());}  }
class C{  protected MetricReducerOrMappingTransform(ValueReducerOrMapping valueReducerOrMapping){  this.valueReducerOrMapping=valueReducerOrMapping;  this.defaultScope=valueReducerOrMapping.name();  this.defaultMetricName=TransformFactory.DEFAULT_METRIC_NAME;}  }
class C{  public DateTimeConverter(final Object defaultValue){  super(defaultValue);}  }
class C{  public void union(int x,int y){  if (x < left) {    left=x;  } else   if (x > right) {    right=x;  }  if (y < top) {    top=y;  } else   if (y > bottom) {    bottom=y;  }}  }
class C{  public void addFile(String s){  filenameStack.push(s);}  }
class C{  public static String byteArrayToHexString(byte[] b){  StringBuilder sb=new StringBuilder(b.length * 2);  for (  final byte aB : b) {    int v=aB & 0xff;    if (v < 16) {      sb.append('0');    }    sb.append(Integer.toHexString(v));  }  return sb.toString().toUpperCase();}  }
class C{  public void addBusinessTransactionDefinition(BusinessTransactionDefinition businessTransactionDefinition) throws BusinessException {  addBusinessTransactionDefinition(businessTransactionDefinition,businessTransactionDefinitions.size());}  }
class C{  @RequestProcessing(value="/register",method=HTTPRequestMethod.POST) @Before(adviceClass=UserRegisterValidation.class) public void register(final HTTPRequestContext context,final HttpServletRequest request,final HttpServletResponse response) throws ServletException, IOException {  context.renderJSON();  JSONObject requestJSONObject=(JSONObject)request.getAttribute(Keys.REQUEST);  final String name=requestJSONObject.optString(User.USER_NAME);  final String email=requestJSONObject.optString(User.USER_EMAIL);  final String realName=requestJSONObject.optString(UserExt.USER_REAL_NAME);  final String team=requestJSONObject.optString(UserExt.USER_TEAM);  final String referral=requestJSONObject.optString(Common.REFERRAL);  final JSONObject user=new JSONObject();  user.put(User.USER_NAME,name);  user.put(User.USER_EMAIL,email);  user.put(UserExt.USER_REAL_NAME,realName);  user.put(UserExt.USER_TEAM,team);  user.put(User.USER_PASSWORD,"");  try {    final String newUserId=userMgmtService.addUser(user);    final JSONObject verifycode=new JSONObject();    verifycode.put(Verifycode.BIZ_TYPE,Verifycode.BIZ_TYPE_C_REGISTER);    String code=RandomStringUtils.randomAlphanumeric(6);    if (!Strings.isEmptyOrNull(referral)) {      code+="r=" + referral;    }    verifycode.put(Verifycode.CODE,code);    verifycode.put(Verifycode.EXPIRED,DateUtils.addDays(new Date(),1).getTime());    verifycode.put(Verifycode.RECEIVER,email);    verifycode.put(Verifycode.STATUS,Verifycode.STATUS_C_UNSENT);    verifycode.put(Verifycode.TYPE,Verifycode.TYPE_C_EMAIL);    verifycode.put(Verifycode.USER_ID,newUserId);    verifycodeMgmtService.addVerifycode(verifycode);    context.renderTrueResult().renderMsg(langPropsService.get("verifycodeSentLabel"));  } catch (  final ServiceException e) {    final String msg=langPropsService.get("registerFailLabel") + " - " + e.getMessage();    LOGGER.log(Level.ERROR,msg + "[name={0}, email={1}]",name,email);    context.renderMsg(msg);  }}  }
class C{  public KeyConcurrentHashMapPro(int initialCapacity){  this(initialCapacity,DEFAULT_LOAD_FACTOR,DEFAULT_CONCURRENCY_LEVEL);}  }
class C{  public AttributeModificationException(){  super();}  }
class C{  public static void oomMessage(){  try {    OOM_ERROR_STREAM.write(OOM_ERROR_MESSAGE_BYTES);    OOM_ERROR_STREAM.flush();  } catch (  final IOException e) {  }}  }
class C{  public Spring removeListener(SpringListener listenerToRemove){  if (listenerToRemove == null) {    throw new IllegalArgumentException("listenerToRemove is required");  }  mListeners.remove(listenerToRemove);  return this;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:10.678 -0500",hash_original_method="CAEF84F00E8BD676D33383FFEC6D862C",hash_generated_method="CAEF84F00E8BD676D33383FFEC6D862C") void addHeaders(Map<String,String> headers){  if (headers == null) {    return;  }  Entry<String,String> entry;  Iterator<Entry<String,String>> i=headers.entrySet().iterator();  while (i.hasNext()) {    entry=i.next();    addHeader(entry.getKey(),entry.getValue());  }}  }
class C{  public boolean readBoolean(){  String s=readString();  if (s.equalsIgnoreCase("true"))   return true;  if (s.equalsIgnoreCase("false"))   return false;  if (s.equals("1"))   return true;  if (s.equals("0"))   return false;  throw new InputMismatchException();}  }
class C{  @Override public V remove(Object key){  LinkedHashMapEntry<K,V> m=(LinkedHashMapEntry<K,V>)removeEntry(key);  if (m == null) {    return null;  }  LinkedHashMapEntry<K,V> p=m.chainBackward;  LinkedHashMapEntry<K,V> n=m.chainForward;  if (p != null) {    p.chainForward=n;  } else {    head=n;  }  if (n != null) {    n.chainBackward=p;  } else {    tail=p;  }  return m.value;}  }
class C{  public static double toDoubleValue(String str,double defaultValue){  return toDoubleValue(str,true,defaultValue);}  }
class C{  protected static void loadStart(MLookupInfo info){}  }
class C{  public synchronized boolean isVerified(){  return verified;}  }
class C{  public Object[] validateAndGetNamedParams(Map<String,Object> paramMap) throws Exception {  if (paramMap == null) {    if (params.size() > 0) {      throw new Exception(String.format("No parameters passed  to validateAndGetNamedParams but %d were required",params.size()));    }  }  if (params.size() == 0) {    return null;  }  Object[] mbeanParams=new Object[params.size()];  LinkedHashMap<String,DynamicMBeanParam> copyParams=new LinkedHashMap<String,DynamicMBeanParam>(params);  for (  String paramName : paramMap.keySet()) {    Object paramValue=paramMap.get(paramName);    DynamicMBeanParam mbeanParam=copyParams.get(paramName);    if (mbeanParam == null) {      throw new Exception(String.format("No parameter %s found for method %s.",paramName,name));    }    if (paramValue != null) {      CLUtils.println(String.format("Checking datatype for param %s: value type=%s, param type=%s",paramName,paramValue.getClass().getSimpleName(),mbeanParam.getType().getSimpleName()),CLLogLevel.debug);      if (paramValue.getClass() != mbeanParam.getType()) {        try {          if (mbeanParam.getType().isPrimitive()) {            CLUtils.println(String.format("Testing for castability of param %s value %s to String",paramName,paramValue),CLLogLevel.debug);            Class<?> wrapperClass=ReflectUtils.primitiveToWrapper(mbeanParam.getType());            paramValue=wrapperClass.getConstructor(String.class).newInstance(paramValue);          }        } catch (        Exception e) {          if (CLUtils.getLogLevel().ordinal() >= CLLogLevel.debug.ordinal()) {            CLUtils.println(String.format("EXCEPTION: Validating params for operation %s\n%s",getUsage(),e.toString()));            e.printStackTrace();          }        }      }    }    mbeanParams[mbeanParam.getOrder()]=paramValue;    copyParams.remove(paramName);  }  if (!copyParams.isEmpty()) {    throw new Exception(String.format("Parameters passed in were missing required parameters. Usage: %s\nMissing params:\n%s",defaultUsage(),CLUtils.iterableToCommaSeparatedList(copyParams.keySet())));  }  return mbeanParams;}  }
class C{  static void sort(long[] a,int left,int right,long[] work,int workBase,int workLen){  if (right - left < QUICKSORT_THRESHOLD) {    sort(a,left,right,true);    return;  }  int[] run=new int[MAX_RUN_COUNT + 1];  int count=0;  run[0]=left;  for (int k=left; k < right; run[count]=k) {    if (a[k] < a[k + 1]) {      while (++k <= right && a[k - 1] <= a[k])       ;    } else     if (a[k] > a[k + 1]) {      while (++k <= right && a[k - 1] >= a[k])       ;      for (int lo=run[count] - 1, hi=k; ++lo < --hi; ) {        long t=a[lo];        a[lo]=a[hi];        a[hi]=t;      }    } else {      for (int m=MAX_RUN_LENGTH; ++k <= right && a[k - 1] == a[k]; ) {        if (--m == 0) {          sort(a,left,right,true);          return;        }      }    }    if (++count == MAX_RUN_COUNT) {      sort(a,left,right,true);      return;    }  }  if (run[count] == right++) {    run[++count]=right;  } else   if (count == 1) {    return;  }  byte odd=0;  for (int n=1; (n<<=1) < count; odd^=1)   ;  long[] b;  int ao, bo;  int blen=right - left;  if (work == null || workLen < blen || workBase + blen > work.length) {    work=new long[blen];    workBase=0;  }  if (odd == 0) {    System.arraycopy(a,left,work,workBase,blen);    b=a;    bo=0;    a=work;    ao=workBase - left;  } else {    b=work;    ao=0;    bo=workBase - left;  }  for (int last; count > 1; count=last) {    for (int k=(last=0) + 2; k <= count; k+=2) {      int hi=run[k], mi=run[k - 1];      for (int i=run[k - 2], p=i, q=mi; i < hi; ++i) {        if (q >= hi || p < mi && a[p + ao] <= a[q + ao]) {          b[i + bo]=a[p++ + ao];        } else {          b[i + bo]=a[q++ + ao];        }      }      run[++last]=hi;    }    if ((count & 1) != 0) {      for (int i=right, lo=run[count - 1]; --i >= lo; b[i + bo]=a[i + ao])       ;      run[++last]=right;    }    long[] t=a;    a=b;    b=t;    int o=ao;    ao=bo;    bo=o;  }}  }
class C{  public ServerBaratine(ServerBuilder builder,SystemManager systemManager,ServerBartender serverSelf) throws Exception {  super(builder,systemManager,serverSelf);}  }
class C{  private void drawBackgroundVertical(final GC gc){  final Rectangle clientArea=getClientArea();  gc.setBackground(getBackground());  gc.fillRectangle(clientArea);  if (isEnabled()) {    gc.setForeground(getForeground());  } else {    gc.setForeground(getDisplay().getSystemColor(SWT.COLOR_GRAY));  }  gc.drawRoundRectangle(9,9,clientArea.width - 20,clientArea.height - 20,3,3);  final float pixelSize=computePixelSizeForVerticalSlider();  final int startY=(int)(pixelSize * lowerValue);  final int endY=(int)(pixelSize * upperValue);  if (isEnabled()) {    gc.setBackground(getForeground());  } else {    gc.setBackground(getDisplay().getSystemColor(SWT.COLOR_GRAY));  }  gc.fillRectangle(9,12 + startY,clientArea.width - 20,endY - startY - 6);}  }
class C{  @org.junit.Test public void testPatterns(){  Bot bot=Bot.createInstance();  Language language=bot.mind().getThought(Language.class);  language.setLearningMode(LearningMode.Disabled);  TextEntry text=bot.awareness().getSense(TextEntry.class);  List<String> output=registerForOutput(text);  bot.setDebugLevel(Level.FINE);  text.input("hi alice");  String response=waitForOutput(output);  if (!response.equals("Alice hi")) {    fail("Incorrect response: " + response);  }  text.input("are you alice");  response=waitForOutput(output);  if (!response.equals("Nope")) {    fail("Incorrect response: " + response);  }  text.input("how are you alice");  response=waitForOutput(output);  if (!isChatLog()) {    if (!response.equals("Alice how are you")) {      fail("Incorrect response: " + response);    }  } else {    if (!response.equals("fine")) {      fail("Incorrect response: " + response);    }  }  text.input("alice are you nice");  response=waitForOutput(output);  if (!response.equals("#alice nice")) {    fail("Incorrect response: " + response);  }  text.input("alice are you");  response=waitForOutput(output);  if (!response.equals("#alice")) {    fail("Incorrect response: " + response);  }  text.input("alice are you ok");  response=waitForOutput(output);  if (!isChatLog()) {    if (!response.equals("#alice ok")) {      fail("Incorrect response: " + response);    }  } else {    if (!response.equals("yes")) {      fail("Incorrect response: " + response);    }  }  text.input("you are fred");  response=waitForOutput(output);  if (!response.equals("no")) {    fail("Incorrect response: " + response);  }  text.input("you fred");  response=waitForOutput(output);  if (!response.equals("no")) {    fail("Incorrect response: " + response);  }  text.input("you love fred");  response=waitForOutput(output);  if (!response.equals("Fred love")) {    fail("Incorrect response: " + response);  }  text.input("you really love fred");  response=waitForOutput(output);  if (!response.equals("Fred really love")) {    fail("Incorrect response: " + response);  }  text.input("hat fred");  response=waitForOutput(output);  if (!response.equals("^fred")) {    fail("Incorrect response: " + response);  }  text.input("hat loves fred");  response=waitForOutput(output);  if (!response.equals("^fred loves")) {    fail("Incorrect response: " + response);  }  text.input("hat really loves fred");  response=waitForOutput(output);  if (!response.equals("^fred really loves")) {    fail("Incorrect response: " + response);  }  text.input("isbotname Test");  response=waitForOutput(output);  if (!response.equals("Yes, that is my name")) {    fail("Incorrect response: " + response);  }  text.input("topic foo");  response=waitForOutput(output);  text.input("istopic foo");  response=waitForOutput(output);  if (!response.equals("Yes, that is the topic")) {    fail("Incorrect response: " + response);  }  text.input("setcolor red");  response=waitForOutput(output);  if (!response.equals("Okay, red is a color.")) {    fail("Incorrect response: " + response);  }  text.input("iscolor red");  response=waitForOutput(output);  if (!response.equals("Yes, red is a nice color.")) {    fail("Incorrect response: " + response);  }  text.input("do you love me?");  response=waitForOutput(output);  if (!response.equals("Yes, I love you.")) {    fail("Incorrect response: " + response);  }  text.input("do you really me?");  response=waitForOutput(output);  if (response.equals("Yes, I love you.")) {    fail("Incorrect response: " + response);  }  text.input("do you hate me?");  response=waitForOutput(output);  if (!response.equals("No, I love you.")) {    fail("Incorrect response: " + response);  }  text.input("do you eat");  response=waitForOutput(output);  if (!response.equals("Yes, I do.")) {    fail("Incorrect response: " + response);  }  bot.shutdown();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().getVideoFrame().setRate(getFloat(stack));  return null;}  }
class C{  String validateSignalHeadReference(String name){  SignalHead h=null;  if (name != null) {    if (name.length() > 0) {      h=InstanceManager.getDefault(jmri.SignalHeadManager.class).getByUserName(name);      if (h != null) {        return name;      }    }    h=InstanceManager.getDefault(jmri.SignalHeadManager.class).getBySystemName(name);  }  if (h == null) {    messageInvalidActionItemName(name,"SignalHead");    return null;  }  return name;}  }
class C{  protected void fillContent(){  id.setText(migrationTask.getId());  name.setText(migrationTask.getName());  description.setText(migrationTask.getDescription());  quarter.setText(migrationTask.getOkrQuarter());  updatedBy.setText(migrationTask.getUpdatedBy());}  }
class C{  public void testRpcException(){  RuntimeException error=new RuntimeException();  rpcForwarder.registerService(new FakeServiceImpl(REQUEST).throwsException(error));  assertRpcErrorFails(error);  error=new RuntimeException();  rpcForwarder.registerBlockingService(new FakeServiceImpl(REQUEST).throwsException(error).toBlockingService());  assertRpcErrorFails(error);}  }
class C{  private void addSeparator(){  if (stack.empty()) {    return;  }switch (stack.peek()) {case HASH:case ARRAY:    buffer.append(",");  break;default :break;}}  }
class C{  public void activate(){}  }
class C{  public boolean equals(Object object){  return object == null || object == this;}  }
class C{  public boolean match(SIPHeaderList<?> template){  if (template == null)   return true;  if (!this.getClass().equals(template.getClass()))   return false;  SIPHeaderList<SIPHeader> that=(SIPHeaderList<SIPHeader>)template;  if (this.hlist == that.hlist)   return true; else   if (this.hlist == null)   return false; else {    for (Iterator<SIPHeader> it=that.hlist.iterator(); it.hasNext(); ) {      SIPHeader sipHeader=(SIPHeader)it.next();      boolean found=false;      for (Iterator<HDR> it1=this.hlist.iterator(); it1.hasNext() && !found; ) {        SIPHeader sipHeader1=(SIPHeader)it1.next();        found=sipHeader1.match(sipHeader);      }      if (!found)       return false;    }    return true;  }}  }
class C{  public void propertyChange(PropertyChangeEvent pce){  String propertyName=pce.getPropertyName();  Object source=pce.getSource();synchronized (children) {    if ("beanContext".equals(propertyName) && containsKey(source) && ((BCSChild)children.get(source)).isRemovePending()) {      BeanContext bc=getBeanContextPeer();      if (bc.equals(pce.getOldValue()) && !bc.equals(pce.getNewValue())) {        remove(source,false);      } else {        ((BCSChild)children.get(source)).setRemovePending(false);      }    }  }}  }
class C{  public boolean shouldDoNativeBackgroundErase(Component c){  return true;}  }
class C{  @Override public long generateHeaderId(int i){  if (getItem(i).length() > 0) {    return getItem(i).charAt(0);  } else   return -1;}  }
class C{  public String canonicalize(String simpleURL){  String resultURL=simpleURL;  if (simpleURL.startsWith("ftp.")) {    resultURL="ftp://" + simpleURL;  } else   if (simpleURL.startsWith("gopher.")) {    resultURL="gopher://" + simpleURL;  } else   if (simpleURL.startsWith("/")) {    resultURL="file:" + simpleURL;  } else   if (!hasProtocolName(simpleURL)) {    if (isSimpleHostName(simpleURL)) {      simpleURL="www." + simpleURL + ".com";    }    resultURL="http://" + simpleURL;  }  return resultURL;}  }
class C{  public void testSendMomentaryFunctionGroup1(){  AbstractThrottle instance=new AbstractThrottleImpl();  instance.sendMomentaryFunctionGroup1();}  }
class C{  public void warning(SAXParseException e) throws SAXException {}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void componentShown(ComponentEvent e){  ((ComponentListener)a).componentShown(e);  ((ComponentListener)b).componentShown(e);}  }
class C{  private void handleDimensions(List<? extends ExpressionTree> dimensions,AnnotatedArrayType type){  if (dimensions.size() > 1) {    handleDimensions(dimensions.subList(1,dimensions.size()),(AnnotatedArrayType)type.getComponentType());  }  AnnotationMirror dimType=getAnnotatedType(dimensions.get(0)).getAnnotationInHierarchy(UNKNOWNVAL);  if (!AnnotationUtils.areSameIgnoringValues(dimType,UNKNOWNVAL)) {    List<Long> longLengths=getIntValues(dimType);    HashSet<Integer> lengths=new HashSet<Integer>(longLengths.size());    for (    Long l : longLengths) {      lengths.add(l.intValue());    }    AnnotationMirror newQual=createArrayLenAnnotation(new ArrayList<>(lengths));    type.replaceAnnotation(newQual);  }}  }
class C{  public boolean isProcessed(){  return getValueAsBoolean("Processed");}  }
class C{  public void detachFromMovingGrabPoint(OffsetGrabPoint gp){  gp.removeGrabPoint(gpo);}  }
class C{  private static Object runJUnit3TestSuite(Class scriptClass){  try {    Object testSuite=InvokerHelper.invokeStaticMethod(scriptClass,"suite",new Object[]{});    return InvokerHelper.invokeStaticMethod("junit.textui.TestRunner","run",new Object[]{testSuite});  } catch (  ClassNotFoundException e) {    throw new GroovyRuntimeException("Failed to run the unit test. JUnit is not on the Classpath.",e);  }}  }
class C{  public boolean offerLast(E e){  addLast(e);  return true;}  }
class C{  private void broadcastNewFile(LocalFilesystemURL inputURL){  File file=new File(this.filesystemPathForURL(inputURL));  if (file.exists()) {    Activity activity=this.cordova.getActivity();    Context context=activity.getApplicationContext();    Uri uri=Uri.fromFile(file);    Intent intent=new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE,uri);    context.sendBroadcast(intent);  }}  }
class C{  public static byte[] toBytes(long x,byte[] bytes,int bytePos){  bytes[bytePos++]=(byte)(x);  bytes[bytePos++]=(byte)(x >> 8);  bytes[bytePos++]=(byte)(x >> 16);  bytes[bytePos++]=(byte)(x >> 24);  bytes[bytePos++]=(byte)(x >> 32);  bytes[bytePos++]=(byte)(x >> 40);  bytes[bytePos++]=(byte)(x >> 48);  bytes[bytePos]=(byte)(x >> 56);  return bytes;}  }
class C{  public final CC push(){  return pushX().pushY();}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="EI_EXPOSE_REP") public String[] validBaudRates(){  return validSpeeds;}  }
class C{  public OrderedMeshShape(ColladaMeshShape mesh,Matrix renderMatrix,double eyeDistance){  this.mesh=mesh;  this.eyeDistance=eyeDistance;  this.renderMatrix=renderMatrix;}  }
class C{  private Initiator fetchInitiatorByName(String initiatorName){  URIQueryResultList initiatorResultList=new URIQueryResultList();  Initiator initiator=null;  dbClient.queryByConstraint(AlternateIdConstraint.Factory.getInitiatorPortInitiatorConstraint(WWNUtility.getWWNWithColons(initiatorName)),initiatorResultList);  if (initiatorResultList.iterator().hasNext()) {    initiator=dbClient.queryObject(Initiator.class,initiatorResultList.iterator().next());  }  return initiator;}  }
class C{  private void createListeningSocket() throws IOException {  mServerSocket=mBluetoothAdapter.listenUsingInsecureRfcommWithServiceRecord(SDP_NAME,mThisDeviceUUID);  log.info(String.format("Listening socket created: Listening (insecure RFCOMM) - name <%s>, UUID <%s>.",SDP_NAME,mThisDeviceUUID));}  }
class C{  public void logOpen(long streamId,IgfsPath path,IgfsMode mode,int bufSize,long dataLen){  addEntry(new Entry(TYPE_OPEN_IN,path.toString(),mode,streamId,bufSize,dataLen,null,null,null,null,null,null,null,null,null,null,null,null,null,null));}  }
class C{  public static Builder builder(){  return new Builder(new AppendRequest());}  }
class C{  @Override public void write(byte b[],int off,int len) throws IOException {  if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return;  }  if ((count + len) > buf.length) {    encodePendingBytes(false);  }  System.arraycopy(b,off,buf,count,len);  count+=len;}  }
class C{  public BattlePosition(String sidc){  super(sidc);  String echelon=this.symbolCode.getEchelon();  if (!SymbolCode.isFieldEmpty(echelon))   this.echelonSymbol=this.createEchelonSymbol(sidc);}  }
class C{  public ClientMessenger(final String host,final int port,final String name,final String mac) throws IOException {  this(host,port,name,mac,new DefaultObjectStreamFactory());}  }
class C{  public static boolean isSupportedAddRPProtectionVirtualPoolChange(Volume volume,VirtualPool currentVpool,VirtualPool newVpool,DbClient dbClient,StringBuffer notSuppReasonBuff){  s_logger.info(String.format("Checking isSupportedAddRPProtectionVirtualPoolChange from [%s] to [%s]...",currentVpool.getLabel(),newVpool.getLabel()));  if (isSameVirtualPool(currentVpool,newVpool,notSuppReasonBuff)) {    return false;  }  if (volume.checkForRp() || VirtualPool.vPoolSpecifiesProtection(currentVpool)) {    notSuppReasonBuff.append("Can't add RecoverPoint Protection since it already exists.");    return false;  }  if (!VirtualPool.vPoolSpecifiesHighAvailability(currentVpool) && VirtualPool.vPoolSpecifiesRPVPlex(newVpool)) {    notSuppReasonBuff.append("Can't add RecoverPoint+VPLEX Protection directly to non-VPLEX volume. Import to VPLEX first.");    return false;  }  if (VirtualPool.vPoolSpecifiesHighAvailability(currentVpool) && !VirtualPool.vPoolSpecifiesHighAvailabilityDistributed(currentVpool) && VirtualPool.vPoolSpecifiesMetroPoint(newVpool)) {    notSuppReasonBuff.append("Can't add MetroPoint Protection directly to VPLEX Local volume. " + "Upgrade from VPLEX Local to VPLEX Distributed first.");    return false;  }  String[] include=new String[]{TYPE,VARRAYS,REF_VPOOL,MIRROR_VPOOL,FAST_EXPANSION,ACLS,INACTIVE,PROTOCOLS,PROVISIONING_TYPE,USE_MATCHED_POOLS,ARRAY_INFO,DRIVE_TYPE,AUTO_TIER_POLICY_NAME,HOST_IO_LIMIT_IOPS,HOST_IO_LIMIT_BANDWIDTH,VMAX_COMPRESSION_ENABLED,IS_THIN_VOLUME_PRE_ALLOCATION_ENABLED,ASSIGNED_STORAGE_POOLS};  Map<String,Change> changes=analyzeChanges(currentVpool,newVpool,include,null,null);  if (!changes.isEmpty()) {    notSuppReasonBuff.append("These target virtual pool differences are invalid: ");    fillInNotSupportedReasons(changes,notSuppReasonBuff);    return false;  }  include=new String[]{PROTECTION_VARRAY_SETTINGS};  changes=analyzeChanges(currentVpool,newVpool,include,null,null);  if (changes.isEmpty()) {    notSuppReasonBuff.append("These target virtual pool differences are required: ");    fillInNotSupportedReasons(changes,notSuppReasonBuff);    return false;  }  if (VirtualPool.vPoolSpecifiesHighAvailability(currentVpool) && (VirtualPool.vPoolSpecifiesRPVPlex(newVpool) || VirtualPool.vPoolSpecifiesMetroPoint(newVpool))) {    VirtualPoolChangeOperationEnum op=vplexCommonChecks(volume,currentVpool,newVpool,dbClient,notSuppReasonBuff,include);    if (op == null || !op.equals(VirtualPoolChangeOperationEnum.RP_PROTECTED)) {      return false;    }  }  return true;}  }
class C{  public void removeListener(INotifyChangedListener notifyChangedListener){  changeNotifier.removeListener(notifyChangedListener);}  }
class C{  public SimpleFragmentIntent<F> putCharSequenceArrayListExtra(String name,ArrayList<CharSequence> value){  if (extras == null) {    extras=new Bundle();  }  extras.putCharSequenceArrayList(name,value);  return this;}  }
class C{  private StringBuffer format(double number,StringBuffer result,FieldDelegate delegate){  if (Double.isNaN(number) || (Double.isInfinite(number) && multiplier == 0)) {    int iFieldStart=result.length();    result.append(symbols.getNaN());    delegate.formatted(INTEGER_FIELD,Field.INTEGER,Field.INTEGER,iFieldStart,result.length(),result);    return result;  }  boolean isNegative=((number < 0.0) || (number == 0.0 && 1 / number < 0.0)) ^ (multiplier < 0);  if (multiplier != 1) {    number*=multiplier;  }  if (Double.isInfinite(number)) {    if (isNegative) {      append(result,negativePrefix,delegate,getNegativePrefixFieldPositions(),Field.SIGN);    } else {      append(result,positivePrefix,delegate,getPositivePrefixFieldPositions(),Field.SIGN);    }    int iFieldStart=result.length();    result.append(symbols.getInfinity());    delegate.formatted(INTEGER_FIELD,Field.INTEGER,Field.INTEGER,iFieldStart,result.length(),result);    if (isNegative) {      append(result,negativeSuffix,delegate,getNegativeSuffixFieldPositions(),Field.SIGN);    } else {      append(result,positiveSuffix,delegate,getPositiveSuffixFieldPositions(),Field.SIGN);    }    return result;  }  if (isNegative) {    number=-number;  }  assert (number >= 0 && !Double.isInfinite(number));synchronized (digitList) {    int maxIntDigits=super.getMaximumIntegerDigits();    int minIntDigits=super.getMinimumIntegerDigits();    int maxFraDigits=super.getMaximumFractionDigits();    int minFraDigits=super.getMinimumFractionDigits();    digitList.set(isNegative,number,useExponentialNotation ? maxIntDigits + maxFraDigits : maxFraDigits,!useExponentialNotation);    return subformat(result,delegate,isNegative,false,maxIntDigits,minIntDigits,maxFraDigits,minFraDigits);  }}  }
class C{  public boolean supportsConversion(Class<?> targetType,Object valueToConvert){  boolean rVal=false;  if (valueToConvert instanceof Decode) {    rVal=true;  }  return (rVal);}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  protected boolean columnIsDynamic(Object o){  if (o.equals(fPriceList_ID) || o.equals(fProductCategory_ID) || o.equals(fWarehouse_ID)) {    return true;  }  return false;}  }
class C{  public SandboxRay(String name,Vector2 direction){  super(direction);  this.name=name;}  }
class C{  public void loadMarkdownFile(String url,String cssFileUrl){  new LoadMarkdownUrlTask().execute(url,cssFileUrl);}  }
class C{  Lexer(final CSVFormat format,final ExtendedBufferedReader in){  this.in=in;  this.delimiter=format.getDelimiter();  this.escape=mapNullToDisabled(format.getEscape());  this.quoteChar=mapNullToDisabled(format.getQuoteChar());  this.commentStart=mapNullToDisabled(format.getCommentStart());  this.ignoreSurroundingSpaces=format.getIgnoreSurroundingSpaces();  this.ignoreEmptyLines=format.getIgnoreEmptyLines();}  }
class C{  public void Init(int nNodes,int nValues) throws Exception {  random=new Random(m_nSeed);  ArrayList<Attribute> attInfo=new ArrayList<Attribute>(nNodes);  ArrayList<String> nomStrings=new ArrayList<String>(nValues + 1);  for (int iValue=0; iValue < nValues; iValue++) {    nomStrings.add("Value" + (iValue + 1));  }  for (int iNode=0; iNode < nNodes; iNode++) {    Attribute att=new Attribute("Node" + (iNode + 1),nomStrings);    attInfo.add(att);  }  m_Instances=new Instances("RandomNet",attInfo,100);  m_Instances.setClassIndex(nNodes - 1);  setUseADTree(false);  initStructure();  m_Distributions=new Estimator[nNodes][1];  for (int iNode=0; iNode < nNodes; iNode++) {    m_Distributions[iNode][0]=new DiscreteEstimatorBayes(nValues,getEstimator().getAlpha());  }  m_nEvidence=new ArrayList<Integer>(nNodes);  for (int i=0; i < nNodes; i++) {    m_nEvidence.add(-1);  }  m_fMarginP=new ArrayList<double[]>(nNodes);  for (int i=0; i < nNodes; i++) {    double[] P=new double[getCardinality(i)];    m_fMarginP.add(P);  }  m_nPositionX=new ArrayList<Integer>(nNodes);  m_nPositionY=new ArrayList<Integer>(nNodes);  for (int iNode=0; iNode < nNodes; iNode++) {    m_nPositionX.add(iNode % 10 * 50);    m_nPositionY.add((iNode / 10) * 50);  }}  }
