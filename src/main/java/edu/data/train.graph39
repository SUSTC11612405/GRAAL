class C{  @Override public int hashCode(){  return paymentTypeId == null ? 0 : paymentTypeId.hashCode();}  }
class C{  private static boolean findActivity(ArrayList<AppInfo> apps,ComponentName component,UserHandleCompat user){  final int N=apps.size();  for (int i=0; i < N; i++) {    final AppInfo info=apps.get(i);    if (info.user.equals(user) && info.componentName.equals(component)) {      return true;    }  }  return false;}  }
class C{  public BaseSprite(Engine engine){  this(engine,0,0,1);  this.frameType=FrameType.SIMPLE;}  }
class C{  private LimeWireGUI createLimeWire(){  LimeWireGUI limeWireGUI=LimeWireModule.instance().getLimeWireGUIModule().getLimeWireGUI();  return limeWireGUI;}  }
class C{  public void put(String key,File files[]) throws FileNotFoundException {  put(key,files,null,null);}  }
class C{  private CreateVirtualNetworkWorkflowDocument buildValidStartState(TaskState.TaskStage stage,CreateVirtualNetworkWorkflowDocument.TaskState.SubStage subStage,int controlFlags){  CreateVirtualNetworkWorkflowDocument startState=new CreateVirtualNetworkWorkflowDocument();  startState.taskState=new CreateVirtualNetworkWorkflowDocument.TaskState();  startState.taskState.stage=stage;  startState.taskState.subStage=subStage;  startState.controlFlags=controlFlags;  startState.name="name";  startState.description="desc";  startState.size=16;  startState.reservedStaticIpSize=4;  startState.executionDelay=10;  startState.routingType=RoutingType.ROUTED;  startState.parentId="project-id";  startState.parentKind=Project.KIND;  return startState;}  }
class C{  public Boolean isEvacuatePoweredOffVms(){  return evacuatePoweredOffVms;}  }
class C{  public static StringBuilder append(final StringBuilder sb,final Calendar cal,int field,final int offset){  if ((field=cal.get(field) + offset) < 10)   sb.append('0');  return sb.append(field);}  }
class C{  public static byte[] intToNetworkByteOrder(int num,int count){  byte[] buf=new byte[count];  intToNetworkByteOrder(num,buf,0,count);  return buf;}  }
class C{  public static void i(String tag,String s,Throwable e){  if (LDJSLOG.INFO >= LOGLEVEL)   Log.i(tag,s,e);}  }
class C{  public ProgressBarFinishedState(){  super("Finished");}  }
class C{  public VideoSharingDeleteTask(VideoSharingServiceImpl videoSharingService,RichcallService richcallService,LocalContentResolver contentResolver){  super(contentResolver,VideoSharingData.CONTENT_URI,VideoSharingData.KEY_SHARING_ID,VideoSharingData.KEY_CONTACT,(String)null);  mVideoSharingService=videoSharingService;  mRichcallService=richcallService;}  }
class C{  public String removeValue(String name){  return values.remove(name);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public KickCommand(Server server){  super(server,"kick","Disconnects a player.  Usage: /kick <password> [player id number].  For a list of player id #s, use the /who command.");}  }
class C{  protected static String checkJVMPath(String vmhome,boolean windebug){  String vmbase=vmhome + File.separator + "bin"+ File.separator;  String vmpath=vmbase + "java";  if (new File(vmpath).exists()) {    return vmpath;  }  if (!windebug) {    vmpath=vmbase + "javaw.exe";    if (new File(vmpath).exists()) {      return vmpath;    }  }  vmpath=vmbase + "java.exe";  if (new File(vmpath).exists()) {    return vmpath;  }  return null;}  }
class C{  protected void println() throws IOException {  out.write(lineSep);}  }
class C{  @Override protected void doAction(){  String alias=null;  try {    KeyStoreHistory history=kseFrame.getActiveKeyStoreHistory();    KeyStoreState currentState=history.getCurrentState();    KeyStoreState newState=currentState.createBasisForNextState(this);    KeyStore keyStore=newState.getKeyStore();    alias=kseFrame.getSelectedEntryAlias();    Password oldPassword=newState.getEntryPassword(alias);    DChangePassword dChangePassword=new DChangePassword(frame,DOCUMENT_MODAL,res.getString("SetKeyPairPasswordAction.SetKeyPairPassword.Title"),oldPassword,applicationSettings.getPasswordQualityConfig());    dChangePassword.setLocationRelativeTo(frame);    dChangePassword.setVisible(true);    if (oldPassword == null) {      oldPassword=dChangePassword.getOldPassword();    }    Password newPassword=dChangePassword.getNewPassword();    if ((oldPassword == null) || (newPassword == null)) {      return;    }    Certificate[] certs=keyStore.getCertificateChain(alias);    certs=X509CertUtil.orderX509CertChain(X509CertUtil.convertCertificates(certs));    Key privateKey=keyStore.getKey(alias,oldPassword.toCharArray());    keyStore.deleteEntry(alias);    newState.removeEntryPassword(alias);    keyStore.setKeyEntry(alias,privateKey,newPassword.toCharArray(),certs);    if (currentState.getEntryPassword(alias) == null) {      currentState.setEntryPassword(alias,oldPassword);    }    newState.setEntryPassword(alias,newPassword);    currentState.append(newState);    kseFrame.updateControls(true);    JOptionPane.showMessageDialog(frame,res.getString("SetKeyPairPasswordAction.SetKeyPairPasswordSuccessful.message"),res.getString("SetKeyPairPasswordAction.SetKeyPairPassword.Title"),JOptionPane.INFORMATION_MESSAGE);  } catch (  GeneralSecurityException ex) {    String problemStr=MessageFormat.format(res.getString("SetKeyPairPasswordAction.NoSetPasswordKeyPairEntry.Problem"),alias);    String[] causes=new String[]{res.getString("SetKeyPairPasswordAction.PasswordIncorrectKeyPairEntry.Cause"),res.getString("SetKeyPairPasswordAction.NotSupportedAlgorithmKeyPairEntry.Cause")};    Problem problem=new Problem(problemStr,causes,ex);    DProblem dProblem=new DProblem(frame,res.getString("SetKeyPairPasswordAction.ProblemSettingPasswordKeyPairEntry.Title"),problem);    dProblem.setLocationRelativeTo(frame);    dProblem.setVisible(true);  }catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  public void loadVectorToTokenDict(String[][] tableData){  vectorToTokenDict=new NTree(tableData[0].length);  for (int i=0; i < tableData.length; i++) {    double[] vector=Utils.parseVectorString(tableData[i][1]);    addVectorTokenPair(tableData[i][0],vector);  }  fireDictionaryChangedEvent();}  }
class C{  public static double decodeXValue(final long docValue){  return decodeX(((int)(docValue >> 42)) & 0x1FFFFF);}  }
class C{  public static int nextOid(long[] index,int start) throws SnmpStatusException {  if (start >= index.length) {    throw new SnmpStatusException(SnmpStatusException.noSuchName);  } else {    return start + 1;  }}  }
class C{  public CollectionPatternException(String message){  super(message);}  }
class C{  protected void createClassProxy(Class<?> clazz){  try {    ProxyCodeGenerator.getClassProxy(clazz);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public void prepare() throws ReplicatorException {}  }
class C{  private void checkChanges(){  LocaleComboBox loc=(LocaleComboBox)cbLanguage.getSelectedItem();  Locale locale=loc.loc;  Locale actualLocale=Utils.getLocaleFromLanguage(Globals.settings.getLanguage());  if (!locale.equals(actualLocale)) {    Globals.settings.setLanguage(locale.toString());    lblLanguageHint.setText(BUNDLE.getString("Settings.languagehint"));  }  Integer fontSize=(Integer)cbFontSize.getSelectedItem();  if (fontSize != Globals.settings.getFontSize()) {    Globals.settings.setFontSize(fontSize);    lblFontChangeHint.setText(BUNDLE.getString("Settings.fontchangehint"));  }  String fontFamily=(String)cbFontFamily.getSelectedItem();  if (!fontFamily.equals(Globals.settings.getFontFamily())) {    Globals.settings.setFontFamily(fontFamily);    lblFontChangeHint.setText(BUNDLE.getString("Settings.fontchangehint"));  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodegetlastchildnull.class,args);}  }
class C{  public boolean cycle(MatchThread matchThread){  Match old=matchThread.getCurrentMatch();  CycleRunnable cycle=nextCycle.get(matchThread);  cycle.run();  Match match=new Match(matchThread,cycle.getUuid(),cycle.getMap(),cycle.getWorld());  if (Cardinal.getInstance().getModuleHandler().loadMatch(match)) {    matchThread.setCurrentMatch(match);    matchThread.getPlayers().forEach(null);    Bukkit.getPluginManager().callEvent(new MatchLoadCompleteEvent(match));    CycleRunnable next=new CycleRunnable(this,UUID.randomUUID());    next.setMap(Cardinal.getModule(RotationModule.class).getRotations().get(matchThread).getNext());    nextCycle.put(matchThread,next);    if (old != null) {      Bukkit.getScheduler().scheduleSyncDelayedTask(Cardinal.getInstance(),null,1);    }    return true;  } else {    Bukkit.getLogger().log(Level.SEVERE,"Failed to load map:" + match.getMap().getName());    return false;  }}  }
class C{  private JTextArea createAsmField(){  final JTextArea asmField=new JTextArea(10,30);  asmField.setFont(GuiHelper.MONOSPACED_FONT);  asmField.setEditable(false);  return asmField;}  }
class C{  public static void registerConfig(){  Config.registerSelf(AbstractJMSProvider.class);  if (!Config.isInvalid()) {    int timeOut=Config.parms.getInt("to");    if (timeOut < 0) {      Config.logger.log(Level.WARNING,"Time out (to={0}) must be at least 0",timeOut);    }    int am=Config.parms.getInt("am");    if ((am != Session.AUTO_ACKNOWLEDGE) && (am != Session.DUPS_OK_ACKNOWLEDGE) && (am != Session.CLIENT_ACKNOWLEDGE)) {      Config.logger.log(Level.WARNING,"Acknowledgement (am={0}) must be one of \n{1} for Auto\n{2} for DupsOK\n{3} for Client\n",new Object[]{am,Session.AUTO_ACKNOWLEDGE,Session.DUPS_OK_ACKNOWLEDGE,Session.CLIENT_ACKNOWLEDGE});    }    if (Config.parms.getString("pw").length() != 0 && Config.parms.getString("us").length() == 0) {      Config.logger.warning("Cannot specify -pw without -us");    }    durable=Config.parms.getBoolean("du");    int commit=Config.parms.getInt("cc");    if (commit < 1) {      Config.logger.log(Level.WARNING,"Commit count (cc={0}) must be greater than 0",commit);    }    Config.registerAnother(Config.parms.getClazz("pc"));  }}  }
class C{  public static Attr[] toAttrArray(Document doc,Object o) throws PageException {  if (o instanceof Node[]) {    Node[] nodes=(Node[])o;    if (_isAllOfSameType(nodes,Node.ATTRIBUTE_NODE))     return (Attr[])nodes;    Attr[] attres=new Attr[nodes.length];    for (int i=0; i < nodes.length; i++) {      attres[i]=toAttr(doc,nodes[i]);    }    return attres;  } else   if (o instanceof Collection) {    Collection coll=(Collection)o;    Iterator<Entry<Key,Object>> it=coll.entryIterator();    Entry<Key,Object> e;    List<Attr> attres=new ArrayList<Attr>();    Attr attr;    Collection.Key k;    while (it.hasNext()) {      e=it.next();      k=e.getKey();      attr=doc.createAttribute(Decision.isNumber(k.getString()) ? "attribute-" + k.getString() : k.getString());      attr.setValue(Caster.toString(e.getValue()));      attres.add(attr);    }    return attres.toArray(new Attr[attres.size()]);  }  Node[] nodes=_toNodeArray(doc,o);  if (nodes != null)   return toAttrArray(doc,nodes);  try {    return new Attr[]{toAttr(doc,o)};  } catch (  ExpressionException e) {    throw new XMLException("can't cast Object of type " + Caster.toClassName(o) + " to a XML Attributes Array");  }}  }
class C{  public static String readLine(final InputStream inputStream,final String charset) throws IOException {  LOG.trace("enter HttpParser.readLine(InputStream, String)");  final byte[] rawdata=readRawLine(inputStream);  if (rawdata == null) {    return null;  }  final int len=rawdata.length;  int offset=0;  if (len > 0) {    if (rawdata[len - 1] == '\n') {      offset++;      if (len > 1) {        if (rawdata[len - 2] == '\r') {          offset++;        }      }    }  }  final String result=EncodingUtil.getString(rawdata,0,len - offset,charset);  if (Wire.HEADER_WIRE.enabled()) {    String logoutput=result;    if (offset == 2) {      logoutput=result + "\r\n";    } else     if (offset == 1) {      logoutput=result + "\n";    }    Wire.HEADER_WIRE.input(logoutput);  }  return result;}  }
class C{  @Override @Transactional public ReceiptHeader persist(final ReceiptHeader receiptHeader) throws ApplicationRuntimeException {  if (receiptHeader.getReceipttype() != CollectionConstants.RECEIPT_TYPE_CHALLAN && !CollectionConstants.RECEIPT_STATUS_CODE_PENDING.equals(receiptHeader.getStatus().getCode()) && !CollectionConstants.RECEIPT_STATUS_CODE_FAILED.equals(receiptHeader.getStatus().getCode()) && receiptHeader.getReceiptnumber() == null)   setReceiptNumber(receiptHeader);  if (receiptHeader.getChallan() != null) {    final Challan challan=receiptHeader.getChallan();    if (challan.getChallanNumber() == null)     setChallanNumber(challan);    receiptHeader.setChallan(challan);    LOGGER.info("Persisted challan with challan number " + challan.getChallanNumber());  }  if (CollectionConstants.RECEIPT_STATUS_CODE_CANCELLED.equals(receiptHeader.getStatus().getCode())) {    if (receiptHeader.getState() != null && !receiptHeader.getState().getValue().equals(CollectionConstants.WF_STATE_END))     endReceiptWorkFlowOnCancellation(receiptHeader);    if (receiptHeader.getReceipttype() == CollectionConstants.RECEIPT_TYPE_BILL)     updateBillingSystemWithReceiptInfo(receiptHeader,null,null);  }  if (!receiptHeader.getService().getServiceType().equalsIgnoreCase(CollectionConstants.SERVICE_TYPE_BILLING) && !CollectionConstants.RECEIPT_STATUS_CODE_FAILED.equals(receiptHeader.getStatus().getCode()) && !CollectionConstants.RECEIPT_STATUS_CODE_PENDING.equals(receiptHeader.getStatus().getCode()))   updateCollectionIndexAndPushMail(receiptHeader);  return super.persist(receiptHeader);}  }
class C{  public void addCollected(BigDecimal amount){  if (getAmtCollected() != null) {    setAmtCollected(getAmtCollected().add(amount != null ? amount : BigDecimal.ZERO));  } else {    setAmtCollected(amount);  }}  }
class C{  public void testSerialization(IgfsEntryInfo info) throws IgniteCheckedException {  assertEquals(info,mu(info));}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SexecPackage.SEQUENCE__STEPS:    return getSteps();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static void toggleStars(final Window parent,final INaviView[] views){  for (  final INaviView view : views) {    try {      view.getConfiguration().setStared(!view.getConfiguration().isStared());    } catch (    final CouldntSaveDataException e) {      CUtilityFunctions.logException(e);      final String innerMessage="E00142: " + "View star could not be toggled";      final String innerDescription=CUtilityFunctions.createDescription(String.format("The star state of view '%s' could not be toggled.",view.getName()),new String[]{"There was a problem with the database connection."},new String[]{"The view star was not updated."});      NaviErrorDialog.show(parent,innerMessage,innerDescription,e);    }  }}  }
class C{  public void update(Graphics g,JComponent c){  if (c.isOpaque())   updateIt(g,c);  paint(g,c);}  }
class C{  @SuppressWarnings("unchecked") public E valueAt(int index){  if (mGarbage) {    gc();  }  return (E)mValues[index];}  }
class C{  public Node(int id){  this.id=id;  this.outgoingArcs=new ArrayList<>();}  }
class C{  public boolean bytesEquals(BytesRef other){  assert other != null;  if (length == other.length) {    int otherUpto=other.offset;    final byte[] otherBytes=other.bytes;    final int end=offset + length;    for (int upto=offset; upto < end; upto++, otherUpto++) {      if (bytes[upto] != otherBytes[otherUpto]) {        return false;      }    }    return true;  } else {    return false;  }}  }
class C{  public boolean isRestriccionPermitida(){  return ((permitido != null) && (Constants.TRUE_STRING.equalsIgnoreCase(permitido)));}  }
class C{  public void postViewChange(final PostViewChangeEvent event){  menuButtons.forEach(null);}  }
class C{  protected void restoreState(){  likelihoodCore.restoreState();  super.restoreState();}  }
class C{  protected AttributeWeightedExampleSet(ExampleSet exampleSet){  this(exampleSet,null);}  }
class C{  public String[] formatRangeOfAddresses(String start,int numberToAdd,String prefix){  numberToAdd=1;  String range[]=new String[numberToAdd];  for (int x=0; x < numberToAdd; x++) {    range[x]=prefix + "T" + start;  }  return range;}  }
class C{  public int printTables(String description,PrintStream out,Map<String,Long> statistics) throws TableNotFoundException, AccumuloException, AccumuloSecurityException {  if (out == null) {    out=new PrintStream(new NullOutputStream());  }  out.println("-- start printTables() -- " + description);  String FORMAT="%-20s  %-20s  %-40s  %-40s\n";  int rowsPrinted=0;  long keyHasher=0;  long valueHasher=0;  final String indexTableName=tIndexer.getTableName();  out.println("Reading : " + indexTableName);  out.format(FORMAT,"--Row--","--ColumnFamily--","--ColumnQualifier--","--Value--");  Scanner s=ConfigUtils.getConnector(conf).createScanner(indexTableName,Authorizations.EMPTY);  for (  Entry<Key,org.apache.accumulo.core.data.Value> entry : s) {    rowsPrinted++;    Key k=entry.getKey();    out.format(FORMAT,toHumanString(k.getRow()),toHumanString(k.getColumnFamily()),toHumanString(k.getColumnQualifier()),toHumanString(entry.getValue()));    keyHasher=hasher(keyHasher,(StringUtils.getBytesUtf8(entry.getKey().toStringNoTime())));    valueHasher=hasher(valueHasher,(entry.getValue().get()));  }  out.println();  if (statistics != null) {    statistics.put(STAT_COUNT,(long)rowsPrinted);    statistics.put(STAT_KEYHASH,keyHasher);    statistics.put(STAT_VALUEHASH,valueHasher);  }  return rowsPrinted;}  }
class C{  public ValidationResult validate(CompilationUnit cu){  ICompilationUnit icu=JavaASTUtils.getCompilationUnit(cu);  ClientBundleValidationVisitor visitor=new ClientBundleValidationVisitor(icu.getJavaProject());  cu.accept(visitor);  ClientBundleValidationResult result=visitor.getResult();  ClientBundleResourceDependencyIndex.getInstance().putResourcesForCompilationUnit(icu,result.getPossibleResourcePaths());  return result;}  }
class C{  public ServiceChangedException(String message){  super(message);}  }
class C{  @Override public synchronized void remove(String key){  boolean deleted=getFileForKey(key).delete();  removeEntry(key);  if (!deleted) {    VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",key,getFilenameForKey(key));  }}  }
class C{  private void checkIfDirectoriesExist(File[] disk_dirs){  DiskStoreFactoryImpl.checkIfDirectoriesExist(disk_dirs);}  }
class C{  protected DoubleType(SqlType sqlType,Class<?>[] classes){  super(sqlType,classes);}  }
class C{  public T caseRequiredRuntimeLibraryDependency(RequiredRuntimeLibraryDependency object){  return null;}  }
class C{  protected boolean isUsedAsCallee(TestCase test,VariableReference var){  for (int pos=var.getStPosition() + 1; pos < test.size(); pos++) {    Statement statement=test.getStatement(pos);    if (statement instanceof MethodStatement) {      if (((MethodStatement)statement).getCallee() == var)       return true;    } else     if (statement instanceof FieldStatement) {      if (((FieldStatement)statement).getSource() == var)       return true;    }  }  return false;}  }
class C{  public void commit() throws Exception {  writer.commit(this);}  }
class C{  public static TimeOfDay hourMinuteAndSecondOfDay(int hour,int minute,int second){  return new TimeOfDay(hour,minute,second);}  }
class C{  protected Mult(final double multiplicator){  this.multiplicator=multiplicator;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public void writeStream(Reader reader) throws IOException {  if (reader == null)   return;  char[] chars=_chars;  int len;  while ((len=reader.read(chars,0,CHARS_LENGTH)) > 0) {    print(chars,0,len);  }}  }
class C{  protected static AsymmetricCipherKeyPair generateDHKeyPair(){  try {    KeyGenerationParameters kgp=new DHKeyGenerationParameters(random,DH_GROUP_PARAMETERS);    DHKeyPairGenerator gen=new DHKeyPairGenerator();    gen.init(kgp);    return gen.generateKeyPair();  } catch (  InvalidParameterException e) {    log.error("InvalidParameterException while generating a Diffie-Hellman keypair " + e);  }  return null;}  }
class C{  @Override public String basePath(){  return "/wm/staticflowpusher";}  }
class C{  @Override public boolean connectionAllowed(String eventName){  if (m_listenee != null || !eventName.equals("instance")) {    return false;  }  return true;}  }
class C{  private void updateHeaderRow(){  int headerRow=(int)headerRowSpinner.getValue();  configuration.setHeaderRow(headerRow - 1);  previewTable.repaint();}  }
class C{  @Override public void flush() throws IOException {  out.flush();}  }
class C{  public SimplePiEstimator(int N){  this.N=N;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public FXGException(String message,Throwable cause,Object... arguments){  super(message,cause);  this.arguments=arguments;  message=null;  lineNumber=-1;  columnNumber=-1;}  }
class C{  protected final Button createContentButton(String name,Supplier<MenuContent> contentSupplier){  Button btn=FXGL.getUIFactory().newButton(name);  btn.setUserData(contentSupplier);  btn.setOnAction(null);  return btn;}  }
class C{  public BidiAttributedCharacterIterator(AttributedCharacterIterator aci,FontRenderContext frc,int chunkStart){  this.frc=frc;  this.chunkStart=chunkStart;  aci.first();  int numChars=aci.getEndIndex() - aci.getBeginIndex();  AttributedString as;  if (false) {    as=new AttributedString(aci);  } else {    StringBuffer strB=new StringBuffer(numChars);    char c=aci.first();    for (int i=0; i < numChars; i++) {      strB.append(c);      c=aci.next();    }    as=new AttributedString(strB.toString());    int start=aci.getBeginIndex();    int end=aci.getEndIndex();    int index=start;    while (index < end) {      aci.setIndex(index);      Map attrMap=aci.getAttributes();      int extent=aci.getRunLimit();      Map destMap=new HashMap(attrMap.size());      Iterator it=attrMap.entrySet().iterator();      while (it.hasNext()) {        Map.Entry e=(Map.Entry)it.next();        Object key=e.getKey();        if (key == null)         continue;        Object value=e.getValue();        if (value == null)         continue;        destMap.put(key,value);      }      as.addAttributes(destMap,index - start,extent - start);      index=extent;    }  }  TextLayout tl=new TextLayout(as.getIterator(),frc);  int[] charIndices=new int[numChars];  int[] charLevels=new int[numChars];  int runStart=0;  int currBiDi=tl.getCharacterLevel(0);  charIndices[0]=0;  charLevels[0]=currBiDi;  int maxBiDi=currBiDi;  for (int i=1; i < numChars; i++) {    int newBiDi=tl.getCharacterLevel(i);    charIndices[i]=i;    charLevels[i]=newBiDi;    if (newBiDi != currBiDi) {      as.addAttribute(GVTAttributedCharacterIterator.TextAttribute.BIDI_LEVEL,new Integer(currBiDi),runStart,i);      runStart=i;      currBiDi=newBiDi;      if (newBiDi > maxBiDi)       maxBiDi=newBiDi;    }  }  as.addAttribute(GVTAttributedCharacterIterator.TextAttribute.BIDI_LEVEL,new Integer(currBiDi),runStart,numChars);  aci=as.getIterator();  if ((runStart == 0) && (currBiDi == 0)) {    this.reorderedACI=aci;    newCharOrder=new int[numChars];    for (int i=0; i < numChars; i++)     newCharOrder[i]=chunkStart + i;    return;  }  newCharOrder=doBidiReorder(charIndices,charLevels,numChars,maxBiDi);  StringBuffer reorderedString=new StringBuffer(numChars);  int reorderedFirstChar=0;  for (int i=0; i < numChars; i++) {    int srcIdx=newCharOrder[i];    char c=aci.setIndex(srcIdx);    if (srcIdx == 0)     reorderedFirstChar=i;    int bidiLevel=tl.getCharacterLevel(srcIdx);    if ((bidiLevel & 0x01) != 0) {      c=(char)mirrorChar(c);    }    reorderedString.append(c);  }  AttributedString reorderedAS=new AttributedString(reorderedString.toString());  Map[] attrs=new Map[numChars];  int start=aci.getBeginIndex();  int end=aci.getEndIndex();  int index=start;  while (index < end) {    aci.setIndex(index);    Map attrMap=aci.getAttributes();    int extent=aci.getRunLimit();    for (int i=index; i < extent; i++)     attrs[i - start]=attrMap;    index=extent;  }  runStart=0;  Map prevAttrMap=attrs[newCharOrder[0]];  for (int i=1; i < numChars; i++) {    Map attrMap=attrs[newCharOrder[i]];    if (attrMap != prevAttrMap) {      reorderedAS.addAttributes(prevAttrMap,runStart,i);      prevAttrMap=attrMap;      runStart=i;    }  }  reorderedAS.addAttributes(prevAttrMap,runStart,numChars);  aci.first();  Float x=(Float)aci.getAttribute(GVTAttributedCharacterIterator.TextAttribute.X);  if (x != null && !x.isNaN()) {    reorderedAS.addAttribute(GVTAttributedCharacterIterator.TextAttribute.X,FLOAT_NAN,reorderedFirstChar,reorderedFirstChar + 1);    reorderedAS.addAttribute(GVTAttributedCharacterIterator.TextAttribute.X,x,0,1);  }  Float y=(Float)aci.getAttribute(GVTAttributedCharacterIterator.TextAttribute.Y);  if (y != null && !y.isNaN()) {    reorderedAS.addAttribute(GVTAttributedCharacterIterator.TextAttribute.Y,FLOAT_NAN,reorderedFirstChar,reorderedFirstChar + 1);    reorderedAS.addAttribute(GVTAttributedCharacterIterator.TextAttribute.Y,y,0,1);  }  Float dx=(Float)aci.getAttribute(GVTAttributedCharacterIterator.TextAttribute.DX);  if (dx != null && !dx.isNaN()) {    reorderedAS.addAttribute(GVTAttributedCharacterIterator.TextAttribute.DX,FLOAT_NAN,reorderedFirstChar,reorderedFirstChar + 1);    reorderedAS.addAttribute(GVTAttributedCharacterIterator.TextAttribute.DX,dx,0,1);  }  Float dy=(Float)aci.getAttribute(GVTAttributedCharacterIterator.TextAttribute.DY);  if (dy != null && !dy.isNaN()) {    reorderedAS.addAttribute(GVTAttributedCharacterIterator.TextAttribute.DY,FLOAT_NAN,reorderedFirstChar,reorderedFirstChar + 1);    reorderedAS.addAttribute(GVTAttributedCharacterIterator.TextAttribute.DY,dy,0,1);  }  reorderedAS=ArabicTextHandler.assignArabicForms(reorderedAS);  for (int i=0; i < newCharOrder.length; i++) {    newCharOrder[i]+=chunkStart;  }  reorderedACI=reorderedAS.getIterator();}  }
class C{  public void close(){  _close();}  }
class C{  public static synchronized String toPrint(int polyOrder,double correlationCoeff,double standardDeviation,double[] terms,int dataPoints){  String styleTag[]={"","pow","Math.pow"};  int n=dataPoints;  String text="Degree " + polyOrder + ", "+ n+ " x,y pairs. ";  text+="Corr. coeff. (r^2) = " + formatNum(correlationCoeff,false) + ". ";  text+="SE = " + formatNum(standardDeviation,false) + "\n\n";  text+=(listingForm > 0) ? "double f(double x) {\n    return" : "f(x) =";  for (int i=0; i <= polyOrder; i++) {    double a=terms[i];    if (i > 0) {      if (listingForm > 0) {        text+="    ";      }      text+="     +";    }    text+=formatNum(a,true);    if (i == 1) {      text+=" * x";    }    if (i > 1) {      if (listingForm > 0) {        text+=(" * " + styleTag[listingForm] + "(x,"+ i+ ")");      } else {        text+=(" * x^" + i);      }    }    if (i < polyOrder) {      text+="\n";    }  }  if (listingForm > 0) {    text+=";\n}";  }  if (polyOrder > (n - 1)) {    text+="\n\nWarning: Polynomial degree exceeds data size - 1.";  }  return text;}  }
class C{  public NisNodeInfo(final Deserializer deserializer){  this.node=deserializer.readObject("node",null);  this.appMetaData=deserializer.readObject("nisInfo",null);}  }
class C{  public Package(ClassPath path,Identifier pkg) throws IOException {  this(path,path,pkg);}  }
class C{  public void changeState(){  linked=!linked;  link=linked ? linkedImIc.getImage() : unlinkedImIc.getImage();  repaint();}  }
class C{  private void createActions(){  maximizeAction=new MaximizeAction();  iconifyAction=new IconifyAction();  closeAction=new CloseAction();  restoreAction=new RestoreAction();  moveAction=new MoveAction();  sizeAction=new SizeAction();}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == CharacterClassElement.class) {switch (derivedFeatureID) {default :      return -1;  }}if (baseClass == CharacterClassAtom.class) {switch (derivedFeatureID) {case RegularExpressionPackage.UNICODE_ESCAPE_SEQUENCE__CHARACTER:    return RegularExpressionPackage.CHARACTER_CLASS_ATOM__CHARACTER;default :  return -1;}}if (baseClass == EscapedCharacterClassAtom.class) {switch (derivedFeatureID) {default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public GridClientCacheBean createCacheBean(CacheConfiguration ccfg){  GridClientCacheBean cacheBean=new GridClientCacheBean();  cacheBean.setName(ccfg.getName());  cacheBean.setMode(GridClientCacheMode.valueOf(ccfg.getCacheMode().toString()));  cacheBean.setSqlSchema(ccfg.getSqlSchema());  return cacheBean;}  }
class C{  private static boolean checkLineDelete(Editable editable,int start,int before,int after){  if (before != 1 || after != 0) {    return false;  }  if (editable.charAt(start) == '\n') {    return true;  }  return false;}  }
class C{  public Result matchShape(Node node,MatchStatement statement){  return matchShape(node,statement,true);}  }
class C{  public TestHiveServer(){  this(1);}  }
class C{  public static Document createDocument(boolean isSecureProcessing){  try {    DocumentBuilderFactory dfactory=DocumentBuilderFactory.newInstance();    dfactory.setNamespaceAware(true);    DocumentBuilder docBuilder=dfactory.newDocumentBuilder();    Document outNode=docBuilder.newDocument();    return outNode;  } catch (  ParserConfigurationException pce) {    throw new RuntimeException(XMLMessages.createXMLMessage(XMLErrorResources.ER_CREATEDOCUMENT_NOT_SUPPORTED,null));  }}  }
class C{  public Collection<String> removeEndpoints(List<String> endpoints){  List<String> removed=new ArrayList<String>();  if (getEndpointsMap() == null) {    return removed;  }  for (  String key : EndpointUtility.changeCase(endpoints)) {    if (getEndpointsMap().containsKey(key)) {      getEndpointsMap().remove(key);      removed.add(key);    }  }  if (!removed.isEmpty()) {    setChanged("endpoints");  }  return removed;}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (!(obj instanceof VOMarketplace)) {    return false;  }  VOMarketplace marketplace=(VOMarketplace)obj;  if (getMarketplaceId() != null) {    return getMarketplaceId().equals(marketplace.getMarketplaceId());  } else {    return false;  }}  }
class C{  public Boolean isProviderSelectionEnabled(){  return providerSelectionEnabled;}  }
class C{  public void makeUnique(String column,String conflictPolicy){  makeUnique(new String[]{column},conflictPolicy);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SexecPackage.STATE_VECTOR__SIZE:    return getSize();case SexecPackage.STATE_VECTOR__OFFSET:  return getOffset();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Area(final StendhalRPZone zone,final Rectangle2D shape){  this.zone=zone;  this.shape=shape;}  }
class C{  public Builder metadata(byte[] metadata){  this.metadata=metadata;  this.isJsonMetadata=false;  return this;}  }
class C{  protected static Iterator<List<String>> extractComments(final File featureVectorsFileStream) throws IOException {  return new CommentsIterator(featureVectorsFileStream);}  }
class C{  public boolean visit(AnonymousClassDeclaration node){  return true;}  }
class C{  private void run(){  List<RouteCandidate> newRouteCandidates=new ArrayList<RouteCandidate>();  for (int pointN=0; pointN < points.size(); pointN++) {    System.out.println(pointN);    Coord point=points.get(pointN);    if (newRouteCandidates.size() < 2) {      Collection<Node> initialNodes=new ArrayList<Node>();      for (double addDistance=0; initialNodes.size() < MIN_NUMBER_START_NODES; addDistance+=SEARCH_RADIUS_INCREMENT) {        final Coord coord=point;        initialNodes=NetworkUtils.getNearestNodes(((Network)network),coord,INITIAL_SEARCH_RADIUS + addDistance);      }      for (      Link link : ((Network)network).getLinks().values())       if (link.getAllowedModes().contains(mode)) {        boolean haveInitialNode=false;        for (Iterator<Node> iNode=initialNodes.iterator(); iNode.hasNext() && !haveInitialNode; ) {          Node node=iNode.next();          if (link.getFromNode().equals(node) || link.getToNode().equals(node)) {            RouteCandidate routeCandidate=new RouteCandidate();            if (routeCandidate.addLink(link,pointN,points))             addRouteCandidate(newRouteCandidates,routeCandidate);            haveInitialNode=true;          }        }      }      routeCandidates.add(newRouteCandidates);    } else {      newRouteCandidates=new ArrayList<RouteCandidate>();      for (      RouteCandidate routeCandidate : routeCandidates.get(routeCandidates.size() - 1))       if (!(routeCandidate.getLinks().size() == 1 && this.reachedStartOfLastLink(routeCandidate,point)))       if (this.reachedEndOfLastLink(routeCandidate,pointN)) {        for (        Link link : ((Network)network).getLinks().values())         if (link.getAllowedModes().contains(mode) && link.getFromNode().equals(routeCandidate.getLastLink().getLink().getToNode())) {          RouteCandidate newRouteCandidate=routeCandidate.clone();          if (newRouteCandidate.addLink(link,pointN,points))           addRouteCandidate(newRouteCandidates,newRouteCandidate);        }      } else {        routeCandidate.addPointToLastLink(point);        addRouteCandidate(newRouteCandidates,routeCandidate);      }      if (newRouteCandidates.size() > 1)       routeCandidates.set(routeCandidates.size() - 1,newRouteCandidates); else       pointN--;    }  }}  }
class C{  private static boolean isUnreservedCharacter(char p_char){  return (isAlphanum(p_char) || MARK_CHARACTERS.indexOf(p_char) != -1);}  }
class C{  public MGRSPoint(String mgrsString) throws NumberFormatException {  this();  setMGRS(mgrsString);}  }
class C{  public static Vec4 toCartesian(Angle latitude,Angle longitude,double radius){  if (latitude == null || longitude == null) {    String message=Logging.getMessage("nullValue.LatitudeOrLongitudeIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  double x=radius * longitude.sin() * latitude.cos();  double y=radius * latitude.sin();  double z=radius * longitude.cos() * latitude.cos();  return new Vec4(x,y,z);}  }
class C{  public static void notifyAll(Object obj){synchronized (obj) {    obj.notifyAll();  }}  }
class C{  public static String toVariableName(Object o,String defaultValue){  String str=toString(o,null);  if (str == null || !Decision.isVariableName(str))   return defaultValue;  return str;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static List<Node> searchPath(final Entity entity,final Entity dest,final double maxDistance){  final Rectangle2D area=new Rectangle((int)(dest.getX() - entity.getWidth()),(int)(dest.getY() - entity.getHeight()),(int)(dest.getWidth() + entity.getWidth() + 1),(int)(dest.getHeight() + entity.getHeight() + 1));  return searchPath(entity,entity.getX(),entity.getY(),area,maxDistance);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case DomPackage.FULL_MEMBER_REFERENCE__MEMBER_NAME:    setMemberName((String)newValue);  return;case DomPackage.FULL_MEMBER_REFERENCE__STATIC_MEMBER:setStaticMember((Boolean)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private FDBigInteger add(FDBigInteger other){  FDBigInteger big, small;  int bigLen, smallLen;  int tSize=this.size();  int oSize=other.size();  if (tSize >= oSize) {    big=this;    bigLen=tSize;    small=other;    smallLen=oSize;  } else {    big=other;    bigLen=oSize;    small=this;    smallLen=tSize;  }  int[] r=new int[bigLen + 1];  int i=0;  long carry=0L;  for (; i < smallLen; i++) {    carry+=(i < big.offset ? 0L : (big.data[i - big.offset] & LONG_MASK)) + ((i < small.offset ? 0L : (small.data[i - small.offset] & LONG_MASK)));    r[i]=(int)carry;    carry>>=32;  }  for (; i < bigLen; i++) {    carry+=(i < big.offset ? 0L : (big.data[i - big.offset] & LONG_MASK));    r[i]=(int)carry;    carry>>=32;  }  r[bigLen]=(int)carry;  return new FDBigInteger(r,0);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_A:    return stateVector[0] == State.main_region_A;default :  return false;}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:30.116 -0500",hash_original_method="D348E31FC7F90016E841E35B51E50760",hash_generated_method="179197D05CE844A3D6C07DBB8C0BCA1A") public Message messageForRegistrant(){  Handler h=getHandler();  if (h == null) {    clear();    return null;  } else {    Message msg=h.obtainMessage();    msg.what=what;    msg.obj=userObj;    return msg;  }}  }
class C{  public ParameterTypes createParameterTypesFromString(EDataType eDataType,String initialValue){  ParameterTypes result=ParameterTypes.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  public SynchronizingStorageEngine(IStorageEngine<ByteArray,byte[]> localStorage,SyncManager syncManager,IDebugCounterService debugCounter,Scope scope){  super(localStorage,debugCounter);  this.localStorage=localStorage;  this.syncManager=syncManager;  this.scope=scope;}  }
class C{  protected int makePressColor(){  int r=(this.backgroundColor >> 16) & 0xFF;  int g=(this.backgroundColor >> 8) & 0xFF;  int b=(this.backgroundColor >> 0) & 0xFF;  r=(r - 30 < 0) ? 0 : r - 30;  g=(g - 30 < 0) ? 0 : g - 30;  b=(b - 30 < 0) ? 0 : b - 30;  return Color.rgb(r,g,b);}  }
class C{  @Override public Consist addConsist(DccLocoAddress address){  if (consistTable.containsKey(address)) {    return consistTable.get(address);  }  LocoNetConsist consist;  consist=new LocoNetConsist(address,memo);  consistTable.put(address,consist);  return consist;}  }
class C{  @Override public List<byte[]> brpop(final int timeout,final byte[]... keys){  return brpop(getArgsAddTimeout(timeout,keys));}  }
class C{  public static Collection<Map<String,Object>> parseMultiFormData(Map<String,Object> parameters){  Map<Integer,Map<String,Object>> rows=new HashMap<Integer,Map<String,Object>>();  for (  String key : parameters.keySet()) {    if (key == null || key.length() <= ROW_SUBMIT_PREFIX_LENGTH)     continue;    if (key.indexOf(MULTI_ROW_DELIMITER) <= 0)     continue;    if (!key.substring(0,ROW_SUBMIT_PREFIX_LENGTH).equals(ROW_SUBMIT_PREFIX))     continue;    if (!parameters.get(key).equals("Y"))     continue;    Integer n=Integer.decode(key.substring(ROW_SUBMIT_PREFIX_LENGTH,key.length()));    Map<String,Object> m=new HashMap<String,Object>();    m.put("row",n);    rows.put(n,m);  }  for (  Map.Entry<String,Object> entry : parameters.entrySet()) {    String key=entry.getKey();    if (key == null)     continue;    int index=key.indexOf(MULTI_ROW_DELIMITER);    if (index <= 0)     continue;    if (key.length() > ROW_SUBMIT_PREFIX_LENGTH && key.substring(0,ROW_SUBMIT_PREFIX_LENGTH).equals(ROW_SUBMIT_PREFIX))     continue;    Integer n=Integer.decode(key.substring(index + MULTI_ROW_DELIMITER_LENGTH,key.length()));    Map<String,Object> map=rows.get(n);    if (map == null)     continue;    String newKey=key.substring(0,index);    map.put(newKey,entry.getValue());  }  return rows.values();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:08.761 -0500",hash_original_method="D2C28C34E5EB211F6345884E8C056637",hash_generated_method="5881D63D11562D74770FEB0EA1531801") public static ScheduledExecutorService newScheduledThreadPool(int corePoolSize,ThreadFactory threadFactory){  return new ScheduledThreadPoolExecutor(corePoolSize,threadFactory);}  }
class C{  public int deleteFiredTriggers(Connection conn) throws SQLException {  PreparedStatement ps=null;  try {    ps=conn.prepareStatement(rtp(DELETE_FIRED_TRIGGERS));    return ps.executeUpdate();  }  finally {    closeStatement(ps);  }}  }
class C{  public double max(){  double max=0.0d;  for (int x=0; x < mBuffer.length; x++) {    if (mBuffer[x] > max) {      max=mBuffer[x];    }  }  return max;}  }
class C{  private int readHexDigit() throws PDFParseException {  while (buf.remaining() > 0) {    int c=(int)buf.get();    if (!PDFFile.isWhiteSpace((char)c)) {      if (c >= '0' && c <= '9') {        c-='0';      } else       if (c >= 'a' && c <= 'f') {        c-='a' - 10;      } else       if (c >= 'A' && c <= 'F') {        c-='A' - 10;      } else       if (c == '>') {        c=-1;      } else {        throw new PDFParseException("Bad character " + c + "in ASCIIHex decode");      }      return c;    }  }  throw new PDFParseException("Short stream in ASCIIHex decode");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.448 -0400",hash_original_method="B6C58B18880B584ACFA73AD5A7B51AB0",hash_generated_method="0CA92696B38F6B92D4F5EC3E0BD8986B") public WildcardFileFilter(String[] wildcards){  this(wildcards,null);}  }
class C{  private void initServer(){  String ior=null;  org.omg.CORBA.Object object=null;  com.bbn.openmap.util.corba.CORBASupport cs=new com.bbn.openmap.util.corba.CORBASupport();  try {    object=cs.readIOR(iorURL);    server=ServerHelper.narrow(object);  } catch (  IOException ioe) {    if (Debug.debugging("cis")) {      Debug.output(getName() + "(CIS).initServer() IO Exception with ior: " + iorURL);    }    server=null;    return;  }  if (server == null) {    object=cs.resolveName(naming);    if (object != null) {      server=ServerHelper.narrow(object);      if (Debug.debugging("cis")) {        Debug.output("Have a CorbaImageServer:");        Debug.output("*** Server: is a " + server.getClass().getName() + "\n"+ server);      }    }  }  if (Debug.debugging("cis")) {    if (server == null) {      Debug.error("CIS.initServer: null server!\n  IOR=" + ior + "\n  Name = "+ naming);    } else {      Debug.output("CIS: server is golden.");    }  }}  }
class C{  public final void addHelperTextColor(@ColorInt final int color){  if (!helperTextColors.contains(color)) {    helperTextColors.add(color);    verifyPasswordStrength();  }}  }
class C{  public final boolean isEmpty(){  return left >= right || top >= bottom;}  }
class C{  public static String removeQuotes(String string,boolean trim){  if (string == null)   return string;  if (trim)   string=string.trim();  if (string.length() < 2)   return string;  if ((StringUtil.startsWith(string,'"') && StringUtil.endsWith(string,'"')) || (StringUtil.startsWith(string,'\'') && StringUtil.endsWith(string,'\''))) {    string=string.substring(1,string.length() - 1);    if (trim)     string=string.trim();  }  return string;}  }
class C{  public static boolean loadTextures(int level){  if (ui_digit == null && level > ResourceLevel.BOOTLOADER) {    ui_digit=TextTexture.generate(TextTexture.TextId.DIGITS);    allTextures.add(ui_digit);  }  Renderer.enableTexture();  boolean allLoaded=true;  for (int i=0; i < allTextures.size(); i++) {    Texture tex=allTextures.get(i);    if (tex.level <= level && !tex.isLoaded) {      tex.load();      allLoaded=false;    }  }  return allLoaded;}  }
class C{  public static XmlGlobal toXmlGlobal(Global global){  return toXmlGlobal(global.getValue(),global.getGet(),global.getSet(),global.getAttributes(),global.getClasses(),global.getExcluded());}  }
class C{  private byte[] encodeKey(final long startTime){  final long tmp=Math.abs(startTime);  return keyBuilder.reset().append(tmp).getKey();}  }
class C{  @Override public void updateClob(String columnLabel,Reader x,long length) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateClob(" + quote(columnLabel) + ", x, "+ length+ "L);");    }    checkClosed();    Value v=conn.createClob(x,length);    update(columnLabel,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @HLEFunction(nid=0xEC0635C1,version=150,checkInsideInterrupt=true) public int sceNetAdhocctlCreate(@CanBeNull @StringInfo(maxLength=GROUP_NAME_LENGTH) PspString groupName){  checkInitialized();  setGroupName(groupName.getString(),PSP_ADHOCCTL_MODE_NORMAL);  networkAdapter.sceNetAdhocctlCreate();  return 0;}  }
class C{  public static void verifyJpsOutput(OutputAnalyzer output,String regex) throws Exception {  output.shouldHaveExitValue(0);  int matchedCount=output.shouldMatchByLineFrom(regex,regex);  assertGreaterThan(matchedCount,0,"Found no lines matching pattern: " + regex);}  }
class C{  public void flush(){  if (this.modified) {    this.channelModel.put(CONFIG_KEY,createGson().toJson(this.model));  }}  }
class C{  public static boolean constantTimeEq(byte[] a,byte[] b){  if (a.length != b.length) {    return false;  }  int result=0;  for (int i=0; i < a.length; i++) {    result|=a[i] ^ b[i];  }  return result == 0;}  }
class C{  public void addEdge(long timestamp,String edgeName,String state,String source,String dest,boolean isFromPattern){  Vertex destVertex=new Vertex(this,dest,state,timestamp);  SortedMap<Long,Vertex> map=this.indexedVertices.get(dest);  if (map == null) {    map=new TreeMap<Long,Vertex>();    this.indexedVertices.put(dest,map);  }  if (isFromPattern) {    SortedMap<Long,Vertex> headMap=map.headMap(timestamp);    if (headMap != null && !headMap.isEmpty()) {      Long previousKey=headMap.lastKey();      Vertex previousVertex=headMap.get(previousKey);      if (previousVertex.getState().equals(state)) {        return;      }    } else {      if (state.equals("destroyed")) {        return;      }    }  }  map.put(timestamp,destVertex);  edges.add(new Edge(this,timestamp,edgeName,source,destVertex));}  }
class C{  private void drawTextRun(Canvas c,TextPaint wp,int start,int end,int contextStart,int contextEnd,boolean runIsRtl,float x,int y){  int flags=runIsRtl ? Canvas.DIRECTION_RTL : Canvas.DIRECTION_LTR;  if (mCharsValid) {    int count=end - start;    int contextCount=contextEnd - contextStart;    c.drawTextRun(mChars,start,count,contextStart,contextCount,x,y,flags,wp);  } else {    int delta=mStart;    c.drawTextRun(mText,delta + start,delta + end,delta + contextStart,delta + contextEnd,x,y,flags,wp);  }}  }
class C{  @Override public boolean supportsGroupByBeyondSelect(){  debugCodeCall("supportsGroupByBeyondSelect");  return true;}  }
class C{  public static void registerErrorBundle(ResourceBundle bundle,boolean overwrite){  if (!overwrite) {    ERROR_BUNDLE.addResourceBundle(bundle);  } else {    ERROR_BUNDLE.addResourceBundleAndOverwrite(bundle);  }}  }
class C{  public ChartPanelShiftController(ChartPanel chartPanel){  super();  this.chartPanel=chartPanel;  Plot plot=chartPanel.getChart().getPlot();  if ((plot instanceof XYPlot) || (plot instanceof FastScatterPlot)) {    plotSupported=true;    axesSwaped=isHorizontalPlot(plot);  }}  }
class C{  public TextHasNumberCondition(final int min){  this.min=min;  this.max=Integer.MAX_VALUE;}  }
class C{  private static boolean isButtonEnable(final String text){  return !text.contains(DISABLE_VALUE);}  }
class C{  public AList(){  items=new int[100];  size=0;}  }
class C{  public static void moveFile(File srcFile,File destFile) throws IOException {  if (srcFile == null) {    throw new NullPointerException("Source must not be null");  }  if (destFile == null) {    throw new NullPointerException("Destination must not be null");  }  if (!srcFile.exists()) {    throw new FileNotFoundException("Source '" + srcFile + "' does not exist");  }  if (srcFile.isDirectory()) {    throw new IOException("Source '" + srcFile + "' is a directory");  }  if (destFile.exists()) {    throw new FileExistsException("Destination '" + destFile + "' already exists");  }  if (destFile.isDirectory()) {    throw new IOException("Destination '" + destFile + "' is a directory");  }  boolean rename=srcFile.renameTo(destFile);  if (!rename) {    copyFile(srcFile,destFile);    if (!srcFile.delete()) {      FileUtils.deleteQuietly(destFile);      throw new IOException("Failed to delete original file '" + srcFile + "' after copy to '"+ destFile+ "'");    }  }}  }
class C{  public void addStar(StellarBody star){  starList.put(star.getId(),star);}  }
class C{  public TDoubleLongHashMap(){}  }
class C{  protected MetadatableImpl(){  super();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void addInstruction(InstructionHandle handle) throws CFGBuilderException {  int position=handle.getPosition();  if (usedInstructionSet.get(position)) {    throw new CFGBuilderException("Instruction " + handle + " visited in multiple subroutines");  }  instructionSet.set(position);  usedInstructionSet.set(position);}  }
class C{  public boolean containsKey(Object key){  if (m_lookup.containsKey(key))   return true; else {    if (m_lookup.size() > 0)     return false; else     return (get(key) != null);  }}  }
class C{  public T onmouseout(String value){  return attr("onmouseout",value);}  }
class C{  static public void assertEquals(String message,long expected,long actual){  assertEquals(message,new Long(expected),new Long(actual));}  }
class C{  public void copyStream(byte[] b){  copyStream(b,0,b.length);}  }
class C{  public void dispose(){  GL20 gl=Gdx.gl20;  gl.glBindBuffer(GL20.GL_ELEMENT_ARRAY_BUFFER,0);  gl.glDeleteBuffer(bufferHandle);  bufferHandle=0;}  }
class C{  public SimpleProperties(Object o,boolean includeSuperclasses,boolean includeGetClass,boolean includeExtensions){  this(o,includeSuperclasses,includeGetClass,includeExtensions,true);}  }
class C{  public LogEntry addEntry(LogEntry entry,Iterator<Object> targets){synchronized (timestamp) {    Timestamp entryTimestamp=timestamp.moveNext();    entry.setTimestamp(entryTimestamp);    HGHandle timestampHandle=logDb.add(entryTimestamp);    logDb.getStore().store(LATEST_VERSION_HANDLE,(logDb.getPersistentHandle(timestampHandle)).toByteArray());    HGHandle opHandle=logDb.add(entry.operation);    logDb.add(new HGPlainLink(timestampHandle,entry.getLogEntryHandle(),opHandle));    while (targets.hasNext()) {      Object target=targets.next();      HGPeerIdentity targetId=peerInterface.getThisPeer().getIdentity(target);      Peer peer=getPeer(targetId);      HGPlainLink link=new HGPlainLink(peerHandles.get(targetId),entry.getLogEntryHandle());      logDb.add(link);      entry.setLastTimestamp(targetId,peer.getTimestamp());      peer.setTimestamp(entryTimestamp);      logDb.replace(peerHandles.get(targetId),peer);      System.out.println(entry.getLastTimestamp(targetId));    }  }  return entry;}  }
class C{  public Element itemUnknownElement(int i){  if (log.isLoggable(java.util.logging.Level.FINE)) {    log.log(java.util.logging.Level.FINE,"itemUnknownElement not implemented:" + i);  }  return null;}  }
class C{  public EventStoreBuilder requireMasterEnabled(){  settingsBuilder.requireMaster(true);  return this;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4mfPackage.EXEC_MODULE__EXEC_MODULE:    setExecModule((BootstrapModule)null);  return;}super.eUnset(featureID);}  }
class C{  protected void dispose(){  if (glres != null) {    glres.dispose();    glres=null;    glName=0;  }}  }
class C{  public void acceptInvitation() throws RcsPermissionDeniedException, RcsPersistentStorageException, RcsGenericException {  try {    mTransferInf.acceptInvitation();  } catch (  Exception e) {    RcsUnsupportedOperationException.assertException(e);    RcsPermissionDeniedException.assertException(e);    RcsPersistentStorageException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public static Cache.Entry makeRandomCacheEntry(byte[] data,boolean isExpired,boolean needsRefresh){  Random random=new Random();  Cache.Entry entry=new Cache.Entry();  if (data != null) {    entry.data=data;  } else {    entry.data=new byte[random.nextInt(1024)];  }  entry.etag=String.valueOf(random.nextLong());  entry.lastModified=random.nextLong();  entry.ttl=isExpired ? 0 : Long.MAX_VALUE;  entry.softTtl=needsRefresh ? 0 : Long.MAX_VALUE;  return entry;}  }
class C{  public static String[] toStringArrayTrim(Array array) throws PageException {  String[] arr=new String[array.size()];  for (int i=0; i < arr.length; i++) {    arr[i]=Caster.toString(array.get(i + 1,"")).trim();  }  return arr;}  }
class C{  public void addServices(List<ServiceDefinition> services) throws Exception {  ensurePathExists();  Set<String> remainingDescriptors=new HashSet<>(dataManager.getChildren(ZK_SERVICE_DEFINITION_PATH));  for (  ServiceDefinition service : services) {    LOG.debug(String.format("Adding Service %s into ZK",service.serviceId));    String path=getServiceDefinitionPath(service.serviceId);    try {      Stat before=dataManager.checkExists(path);      dataManager.putData(path,service);      Stat after=dataManager.checkExists(path);      nodeUpdated(path,before,after);      remainingDescriptors.remove(service.serviceId);    } catch (    Exception e) {      LOG.error(String.format("Failed to add Service %s into ZK, path: %s",service.serviceId,path),e);      throw e;    }  }  for (  String descriptorName : remainingDescriptors) {    LOG.info(String.format("Removing old Service %s from ZK",descriptorName));    dataManager.removeNode(ZK_SERVICE_DEFINITION_PATH + "/" + descriptorName);  }}  }
class C{  public static Map<String,String> options(){  LinkedHashMap<String,String> options=new LinkedHashMap<>();  for (  User user : User.find.orderBy("name").findList()) {    options.put(user.id.toString(),user.name);  }  return options;}  }
class C{  public static int coordsToId(Coords c){  return Targetable.TYPE_BUILDING * 1000000 + c.getY() * 1000 + c.getX();}  }
class C{  protected void reset(final int max){  super.reset(max);  addr=0;  nchildren=0;  nentries=0;}  }
class C{  public PerFieldAnalyzerWrapper(Analyzer defaultAnalyzer){  this(defaultAnalyzer,null);}  }
class C{  public int size(){  return dataMap.size();}  }
class C{  private Object executeOr(PageContext pc,SQL sql,Query qr,Operation2 expression,int row) throws PageException {  boolean rtn=Caster.toBooleanValue(executeExp(pc,sql,qr,expression.getLeft(),row));  if (rtn)   return Boolean.TRUE;  Boolean rtn2=Caster.toBoolean(executeExp(pc,sql,qr,expression.getRight(),row));  return rtn2;}  }
class C{  public String toString(){  return "Chunk:\n" + root.toString();}  }
class C{  public Quaternionf rotateZ(float angle){  return rotateZ(angle,this);}  }
class C{  public AccessPath<R> init(){  if (didInit)   throw new IllegalStateException();  didInit=true;  if (DEBUG) {    if (fromKey != null && toKey != null) {      if (BytesUtil.compareBytes(fromKey,toKey) >= 0) {        throw new AssertionError("keys are out of order: " + toString());      }    }    log.debug(toString());  }  return this;}  }
class C{  @Override protected StatsDClient createClient(String server,int port,String prefix){  return new NonBlockingStatsDClient(prefix,server,port);}  }
class C{  public CipherParameters generateDerivedMacParameters(int keySize){  return generateDerivedParameters(keySize);}  }
class C{  public void initOptions(){  _playerField.setText(URLHandlerSettings.VIDEO_PLAYER.getValue());}  }
class C{  public void sendInstances(Stream inputStream,int numberInstances,boolean isTraining,boolean isTesting){  int numberSamples=0;  while (streamSource.hasMoreInstances() && numberSamples < numberInstances) {    numberSamples++;    numberInstancesSent++;    InstanceContentEvent instanceContentEvent=new InstanceContentEvent(numberInstancesSent,nextInstance(),isTraining,isTesting);    inputStream.put(instanceContentEvent);  }  InstanceContentEvent instanceContentEvent=new InstanceContentEvent(numberInstancesSent,null,isTraining,isTesting);  instanceContentEvent.setLast(true);  inputStream.put(instanceContentEvent);}  }
class C{  public MalformedURLException(String detailMessage){  super(detailMessage);}  }
class C{  public ClassDefinition makeClassDefinition(Environment origEnv,long where,IdentifierToken name,String doc,int modifiers,IdentifierToken superClass,IdentifierToken interfaces[],ClassDefinition outerClass){  if (env == null)   return null;  return env.makeClassDefinition(origEnv,where,name,doc,modifiers,superClass,interfaces,outerClass);}  }
class C{  public Perspective addPerspective(final String name,final boolean userDefined){  final Perspective p=new Perspective(this,name);  if (!isValidName(name)) {    throw new IllegalArgumentException("Invalid or duplicate view name: " + name);  }  p.setUserDefined(userDefined);  perspectives.put(name,p);  fireUpdate(new ArrayList<Perspective>(perspectives.values()));  return p;}  }
class C{  void deleteFeeds(){  if (!isDBAvailable())   return;  SQLiteDatabase db=getOpenHelper().getWritableDatabase();  write.lock();  try {    db.delete(TABLE_FEEDS,null,null);  }  finally {    write.unlock();  }}  }
class C{  public static InlineKeyboardButtonBuilder builder(){  return new InlineKeyboardButtonBuilder();}  }
class C{  public boolean isForceGlobal(){  return forceGlobal;}  }
class C{  public static float min(final float a,final float b){  if (Float.isNaN(a)) {    return b;  } else   if (Float.isNaN(b)) {    return a;  } else {    return Math.min(a,b);  }}  }
class C{  public GraphEdge(GraphNode head,GraphNode tail,Relation relation){  super(relation,head,tail);}  }
class C{  public static <T1>List<T1> llist(){  return new LinkedList<T1>();}  }
class C{  public Map<String,Integer> loadIdentifierIdPairs(DBTransaction transaction) throws SQLException {  Map<String,Integer> map=new HashMap<String,Integer>();  String query="SELECT identifier, id FROM achievement;";  ResultSet set=transaction.query(query,new HashMap<String,Object>());  while (set.next()) {    String identifier=set.getString("identifier");    Integer id=set.getInt("id");    map.put(identifier,id);  }  return map;}  }
class C{  public Property(final String property) throws Exception {  try {    final List<String> parts=Arrays.asList(property.split(":",2));    final List<String> nonEmptyParts=new ArrayList<String>();    for (    String part : parts) {      if (!StringUtils.isEmpty(part.trim())) {        nonEmptyParts.add(part.trim());      }    }    if (nonEmptyParts.size() < 2) {      throw new Exception("Warning: Incomplete property: " + property);    }    this.property=nonEmptyParts.get(0).toLowerCase();    values=parseValues(nonEmptyParts.get(1).replaceAll(", ",","));  } catch (  final PatternSyntaxException e) {  }}  }
class C{  public IBinder queryBinder(int binderCode){  IBinder binder=null;  try {    if (mBinderPool != null) {      binder=mBinderPool.queryBinder(binderCode);    }  } catch (  RemoteException e) {    e.printStackTrace();  }  return binder;}  }
class C{  private static int checkTypeArguments(final String signature,int pos){  pos=checkChar('<',signature,pos);  pos=checkTypeArgument(signature,pos);  while (getChar(signature,pos) != '>') {    pos=checkTypeArgument(signature,pos);  }  return pos + 1;}  }
class C{  public static void unloadDriver(){}  }
class C{  public static int[] shuffle(int[] intArray){  if (intArray == null) {    return null;  }  return shuffle(intArray,getRandom(intArray.length));}  }
class C{  public void ImportGOSchedule(String filename) throws IOException {  final String COMMA=",";  final String ROUTE="ROUTE";  Integer currentBranchNumber=0;  String currentRouteName="";  String currentDirection="";  String[] currentStops=null;  BufferedReader reader=new BufferedReader(new FileReader(filename));  String fileLine=reader.readLine();  do {    String[] cells=fileLine.split(COMMA);    if (!IsLineEmpty(cells)) {      if (cells[0].equals(ROUTE)) {        currentRouteName=cells[1];        currentDirection=reader.readLine().split(COMMA)[1];        currentStops=reader.readLine().split(COMMA);        currentBranchNumber=0;      } else {        boolean[] emptyCells=new boolean[cells.length];        for (int i=0; i < cells.length; i++)         emptyCells[i]=cells[i].isEmpty();        if (cells.length > currentStops.length) {          System.err.println("ERROR: Stop header length doesn't match timetable length!");        }        ArrayList<String> tempStops=new ArrayList<String>();        for (int i=0; i < cells.length; i++)         if (!(emptyCells[i]))         tempStops.add(currentStops[i]);        if (tempStops.size() == 1) {          System.out.println("check here!");        }        if (!(SearchForStopSequence(tempStops))) {          ScheduledRoute newRoute=new ScheduledRoute(currentRouteName,currentDirection,"" + currentBranchNumber++,tempStops);          ArrayList<String> checkstops=newRoute.getStopSequence();          int currentStopIndex=0;          for (int i=0; i < cells.length; i++) {            if (!(emptyCells[i])) {              String[] parsedArrivalTime={cells[i],""};              if (parsedArrivalTime[0].contains("t")) {                newRoute.mode="train";                parsedArrivalTime[0]=cells[i].replace("t","");              }              if (parsedArrivalTime[0].contains(".")) {                parsedArrivalTime=cells[i].split("\\.");              }              if (parsedArrivalTime[0].contains("v")) {                newRoute.getStop(currentStopIndex++).isVIA=true;                continue;              }              newRoute.getStop(currentStopIndex++).AddTime(new Tuple<String,String>(parsedArrivalTime[0],parsedArrivalTime[1]));            }          }          this.routes.add(newRoute);        } else {          int currentRouteIndex=MatchStopSequence(tempStops);          int currentStopIndex=0;          for (int i=0; i < cells.length; i++) {            String[] parsedArrivalTime={cells[i],""};            if (parsedArrivalTime[0].contains("t")) {              parsedArrivalTime[0]=cells[i].replace("t","");            }            if (parsedArrivalTime[0].contains(".")) {              parsedArrivalTime=cells[i].split("\\.");            }            if (parsedArrivalTime[0].contains("v"))             continue;            if (!(emptyCells[i])) {              this.routes.get(currentRouteIndex).getStop(currentStopIndex++).AddTime(new Tuple<String,String>(parsedArrivalTime[0],parsedArrivalTime[1]));            }          }        }      }    }    fileLine=reader.readLine();  } while (fileLine != null);  reader.close();}  }
class C{  public synchronized void writeCV(int CV,int val,ProgListener p) throws ProgrammerException {  if (log.isDebugEnabled()) {    log.debug("write CV=" + CV + " val="+ val);  }  NceMessage msg;  if (tc.getUsbSystem() == NceTrafficController.USB_SYSTEM_POWERCAB || tc.getUsbSystem() == NceTrafficController.USB_SYSTEM_SB3 || tc.getUsbSystem() == NceTrafficController.USB_SYSTEM_SB5 || tc.getUsbSystem() == NceTrafficController.USB_SYSTEM_TWIN) {    int locoAddr=mAddress;    if (mLongAddr) {      locoAddr+=0xC000;    }    byte[] bl=NceBinaryCommand.usbOpsModeLoco(tc,locoAddr,CV,val);    msg=NceMessage.createBinaryMessage(tc,bl);  } else {    byte[] contents=NmraPacket.opsCvWriteByte(mAddress,mLongAddr,CV,val);    if (contents == null) {      throw new ProgrammerException();    }    msg=NceMessage.sendPacketMessage(tc,contents,5);  }  useProgrammer(p);  _progRead=false;  progState=COMMANDSENT_2;  _val=val;  _cv=CV;  startShortTimer();  tc.sendNceMessage(msg,this);  tc.sendNceMessage(msg,this);}  }
class C{  public boolean hasEnergy(){  return this.energy == null || this.energy.getEnergy() > 0;}  }
class C{  public static void remove(final ICriteriumTreeNode node){  for (  final ICriteriumTreeNode child : node.getChildren()) {    remove(child);  }  node.getChildren().clear();}  }
class C{  @Override public String toString(){  String s="";  s+="[" + ex.x + ","+ ey.x+ "]\n";  s+="[" + ex.y + ","+ ey.y+ "]";  return s;}  }
class C{  private static void registerNamedField(final String normalizedName,final int structureBorder,final int offset,final List<JBBPNamedFieldInfo> namedFields,final JBBPToken token){  for (int i=namedFields.size() - 1; i >= structureBorder; i--) {    final JBBPNamedFieldInfo info=namedFields.get(i);    if (info.getFieldPath().equals(normalizedName)) {      throw new JBBPCompilationException("Duplicated named field detected [" + normalizedName + ']',token);    }  }  namedFields.add(new JBBPNamedFieldInfo(normalizedName,normalizedName,offset));}  }
class C{  public @Test final void testCreationNegative(){  thrown.expect(IllegalArgumentException.class);  new User("");}  }
class C{  public synchronized int read(byte b[],int off,int len){  if (b == null) {    throw new NullPointerException();  } else   if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0)) {    throw new IndexOutOfBoundsException();  }  if (pos >= count) {    return -1;  }  if (pos + len > count) {    len=count - pos;  }  if (len <= 0) {    return 0;  }  String s=buffer;  int cnt=len;  while (--cnt >= 0) {    b[off++]=(byte)s.charAt(pos++);  }  return len;}  }
class C{  public int size(){  return vertices.size();}  }
class C{  private void printlnError(Object o){  if (errorLogWriter != null) {    errorLogWriter.println(o);  }}  }
class C{  public int parse(char c,CharBuffer in){  if (Character.isHighSurrogate(c)) {    if (!in.hasRemaining()) {      error=CoderResult.UNDERFLOW;      return -1;    }    char d=in.get();    if (Character.isLowSurrogate(d)) {      character=Character.toCodePoint(c,d);      isPair=true;      error=null;      return character;    }    error=CoderResult.malformedForLength(1);    return -1;  }  if (Character.isLowSurrogate(c)) {    error=CoderResult.malformedForLength(1);    return -1;  }  character=c;  isPair=false;  error=null;  return character;}  }
class C{  public static final boolean isEsmeManualAcknowledgement(byte esmClass){  return isMessageType(esmClass,SMPPConstant.ESMCLS_ESME_MANUAL_ACK);}  }
class C{  public static List<?> toList(String json){  try {    return objectMapper.readValue(json,List.class);  } catch (  Exception e) {    log.error(e.getMessage(),e);  }  return null;}  }
class C{  public boolean contains(int c){  int i=1;  while (i < chars.length && chars[i] < c) {    i+=2;  }  if (i == chars.length) {    return false;  }  return chars[i - 1] <= c;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return B;case 2:  return S;default :return null;}}  }
class C{  protected Vec4 bezierNearestPointToSegment(Vec4 p0,Vec4 p1,Vec4[] controlPoints,int[] coefficients,double tolerance){  double dist1;  double dist2;  double t1=0.0;  double t2=1.0;  Vec4 p=TacticalGraphicUtil.bezierCurve(controlPoints,t1,coefficients);  Vec4 nearest=Line.nearestPointOnSegment(p0,p1,p);  dist1=nearest.distanceTo3(p);  double delta;  do {    p=TacticalGraphicUtil.bezierCurve(controlPoints,t2,coefficients);    nearest=Line.nearestPointOnSegment(p0,p1,p);    dist2=nearest.distanceTo3(p);    double avg=(t1 + t2) / 2;    delta=Math.abs(dist1 - dist2);    if (dist2 < dist1) {      t1=t2;      dist1=dist2;    }    t2=avg;  } while (delta > tolerance);  return p;}  }
class C{  public static void remove(){  try {    String home=getHomeToken();    String script="adempiere.removeUserToken('" + home + "');";    AuScript aus=new AuScript(null,script);    Clients.response("removeUserToken",aus);  } catch (  Exception e) {    log.log(Level.WARNING,e.getLocalizedMessage(),e);  }}  }
class C{  public Response doPut(final Request req) throws Exception {  return new Response(HTTP_METHOD_NOT_ALLOWED,MIME_TEXT_PLAIN,req.method);}  }
class C{  private void rememberDeletedOffset(int offset){  fDeleteOffset=offset;}  }
class C{  public ConnectionPoolTimeoutException(){  super();}  }
class C{  public CacheHeader(String key,Entry entry){  this.key=key;  this.size=entry.data.length;  this.etag=entry.etag;  this.serverDate=entry.serverDate;  this.ttl=entry.ttl;  this.softTtl=entry.softTtl;  this.responseHeaders=entry.responseHeaders;}  }
class C{  private static boolean isAssignable(final Type type,final TypeVariable<?> toTypeVariable,final Map<TypeVariable<?>,Type> typeVarAssigns){  if (type == null) {    return true;  }  if (toTypeVariable == null) {    return false;  }  if (toTypeVariable.equals(type)) {    return true;  }  if (type instanceof TypeVariable<?>) {    final Type[] bounds=getImplicitBounds((TypeVariable<?>)type);    for (    final Type bound : bounds) {      if (isAssignable(bound,toTypeVariable,typeVarAssigns)) {        return true;      }    }  }  if (type instanceof Class<?> || type instanceof ParameterizedType || type instanceof GenericArrayType|| type instanceof WildcardType) {    return false;  }  throw new IllegalStateException("found an unhandled type: " + type);}  }
class C{  public ReplEvent take(long timeout,TimeUnit unit) throws InterruptedException {  if (eventQueue.size() == 0)   intervalGuard.unreport(this.taskId);  ReplEvent event=eventQueue.poll(timeout,unit);  if (event != null) {    if (event instanceof ReplDBMSEvent) {      ReplDBMSEvent rde=(ReplDBMSEvent)event;      intervalGuard.report(taskId,rde.getSeqno(),rde.getExtractedTstamp().getTime());    } else     if (event instanceof ReplControlEvent) {      ReplControlEvent rce=(ReplControlEvent)event;      if (rce.getHeader() != null) {        intervalGuard.report(taskId,rce.getHeader().getSeqno(),rce.getHeader().getExtractedTstamp().getTime());      }    }  }  return event;}  }
class C{  public GammaFilter(float rGamma,float gGamma,float bGamma){  setGamma(rGamma,gGamma,bGamma);}  }
class C{  public void rebind(String name,Remote obj) throws RemoteException, AccessException {  checkAccess("Registry.rebind");  bindings.put(name,obj);}  }
class C{  boolean shouldIgnoreMethod(@NonNull String methodName){  return ignoreClassAll || ignoreMethods.contains(methodName);}  }
class C{  public void endOfProcess(){}  }
class C{  public void enableSQLSummary(boolean enable){  params.isSQLSummaryEnabled=enable;  if (enable)   enable(true);}  }
class C{  public static String normalize(char[] chars,int start,int length){  StringBuffer buff=new StringBuffer();  for (int i=start; i < start + length; i++) {    char c=chars[i];switch (c) {case '\'':      buff.append("&apos;");    break;case '"':  buff.append("&quot;");break;case '&':buff.append("&amp;");break;case '<':buff.append("&lt;");break;case '>':buff.append("&gt;");break;default :buff.append("" + c);break;}}return buff.toString();}  }
class C{  public Object remove(String key){  return this.map.remove(key);}  }
class C{  public boolean hasAgent(){  return hasExtension(Agent.class);}  }
class C{  public int indexOf(Object o){  for (int i=0; i < size; i++) {    if (o == elementData[i]) {      return i;    }  }  return -1;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:05.397 -0500",hash_original_method="9464671A8FCBA7A99848867493116AAD",hash_generated_method="B435B22C3DC043BEFA6480ED095FD9A9") public void connectNetwork(int networkId){  if (networkId < 0) {    return;  }  mAsyncChannel.sendMessage(CMD_CONNECT_NETWORK,networkId);}  }
class C{  public IndexRequest source(BytesReference source){  this.source=source;  return this;}  }
class C{  public FilePropertyEditor(){  button=new JButton(getButtonTitle());  textField.setEditable(isTextFieldEditable());}  }
class C{  public void incrementAlignmentCount(AlignmentTemplate alTemp){  if (storeAlignmentCounts) {    int idx=alTemp.getKey();    int alIdx=alTemp.getAKey();    final ConcurrentHashMultiset<Integer> aCounts;    if (idx >= 0) {      assert (idx <= index.size());synchronized (aCounter) {        while (idx >= aCounter.size())         aCounter.add(ConcurrentHashMultiset.create());        aCounts=aCounter.get(idx);      }      aCounts.add(alIdx);    }  }}  }
class C{  @SideEffectFree public XMLStreamException(@Nullable String msg,@Nullable Throwable th){  super(msg,th);  nested=th;}  }
class C{  public static void delete(File file) throws IOException {  if (file.exists()) {    if (!file.delete()) {      throw new IOException(MessageFormat.format(UNABLE_TO_DELETE,file));    }  }}  }
class C{  public Query parse(String queryText){  if ("*".equals(queryText.trim())) {    return new MatchAllDocsQuery();  }  char data[]=queryText.toCharArray();  char buffer[]=new char[data.length];  State state=new State(data,buffer,0,data.length);  parseSubQuery(state);  if (state.top == null) {    return new MatchNoDocsQuery("empty string passed to query parser");  } else {    return state.top;  }}  }
class C{  public IdentityHashMap(Map<? extends K,? extends V> map){  this(map.size() < 6 ? 11 : map.size() * 2);  putAllImpl(map);}  }
class C{  public boolean add(OMGraphic g){  checkForDuplicate(g);  return graphics.add(g);}  }
class C{  private static void croak(String s){  System.err.println(s);  System.exit(1);}  }
class C{  File extractResource(String resourcename,String outputname) throws IOException {  File outfile=File.createTempFile("jni_file_",".dll");  outfile.deleteOnExit();  if (outfile.exists()) {    try {      outfile.delete();    } catch (    Exception e) {    }  }  if (!outfile.exists()) {    if (debug)     System.err.println("Extracting '" + resourcename + "' to '"+ outfile.getAbsolutePath()+ "'");    OutputStream out=null;    InputStream in=null;    try {      out=new FileOutputStream(outfile);      in=DefaultJniExtractor.class.getResourceAsStream(resourcename);      if (in == null)       throw new IOException("Unable to find library " + resourcename + " on classpath");      copy(in,out);    } catch (    Exception e) {    } finally {      if (out != null)       out.close();      if (in != null)       in.close();    }  }  System.out.println(resourcename + " extracted to temporary file " + outfile);  return outfile;}  }
class C{  public String toString(){  StringBuilder str=new StringBuilder();  for (  RCFGNode node : entryEdgeToNode.values()) {    str.append(node + "\n");  }  return str.toString();}  }
class C{  @Deprecated public static String toString(byte[] input) throws IOException {  return new String(input);}  }
class C{  public BitmapAjaxCallback preset(Bitmap preset){  this.preset=preset;  return this;}  }
class C{  static byte[] decode_base64(String s,int maxolen) throws IllegalArgumentException {  ByteArrayOutputStream out=new ByteArrayOutputStream(maxolen);  int off=0, slen=s.length(), olen=0;  byte c1, c2, c3, c4, o;  if (maxolen <= 0) {    throw new IllegalArgumentException("Invalid maxolen");  }  while (off < slen - 1 && olen < maxolen) {    c1=char64(s.charAt(off++));    c2=char64(s.charAt(off++));    if (c1 == -1 || c2 == -1) {      break;    }    o=(byte)(c1 << 2);    o|=(c2 & 0x30) >> 4;    out.write(o);    if (++olen >= maxolen || off >= slen) {      break;    }    c3=char64(s.charAt(off++));    if (c3 == -1) {      break;    }    o=(byte)((c2 & 0x0f) << 4);    o|=(c3 & 0x3c) >> 2;    out.write(o);    if (++olen >= maxolen || off >= slen) {      break;    }    c4=char64(s.charAt(off++));    o=(byte)((c3 & 0x03) << 6);    o|=c4;    out.write(o);    ++olen;  }  return out.toByteArray();}  }
class C{  public final void kick(String channel,String nick){  this.kick(channel,nick,"");}  }
class C{  public boolean storesUpperCaseIdentifiers() throws SQLException {  return true;}  }
class C{  public Quaternionf computeWeightedAverage(Quaternionfc[] qs,float[] weights,int maxSvdIterations,Quaternionf dest){  float m00=0.0f, m01=0.0f, m02=0.0f;  float m10=0.0f, m11=0.0f, m12=0.0f;  float m20=0.0f, m21=0.0f, m22=0.0f;  for (int i=0; i < qs.length; i++) {    Quaternionfc q=qs[i];    float dx=q.x() + q.x();    float dy=q.y() + q.y();    float dz=q.z() + q.z();    float q00=dx * q.x();    float q11=dy * q.y();    float q22=dz * q.z();    float q01=dx * q.y();    float q02=dx * q.z();    float q03=dx * q.w();    float q12=dy * q.z();    float q13=dy * q.w();    float q23=dz * q.w();    m00+=weights[i] * (1.0f - q11 - q22);    m01+=weights[i] * (q01 + q23);    m02+=weights[i] * (q02 - q13);    m10+=weights[i] * (q01 - q23);    m11+=weights[i] * (1.0f - q22 - q00);    m12+=weights[i] * (q12 + q03);    m20+=weights[i] * (q02 + q13);    m21+=weights[i] * (q12 - q03);    m22+=weights[i] * (1.0f - q11 - q00);  }  m[0]=m00;  m[1]=m01;  m[2]=m02;  m[3]=m10;  m[4]=m11;  m[5]=m12;  m[6]=m20;  m[7]=m21;  m[8]=m22;  svdDecomposition3f.svd(m,maxSvdIterations,u,v);  u.mul(v.transpose());  return dest.setFromNormalized(u).normalize();}  }
class C{  public boolean hasChanged(){  return m_changed;}  }
class C{  public void actionPerformed(ActionEvent e){  JFileChooser chooser=getJFileChooser();  chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);  chooser.setMultiSelectionEnabled(true);  int _ret=chooser.showOpenDialog(this.dataEditor);  if (_ret == JFileChooser.CANCEL_OPTION) {    return;  }  final File[] files=chooser.getSelectedFiles();  if (files == null) {    return;  }  if (files.length == 0) {    return;  }  Preferences.userRoot().put("fileSaveLocation",files[0].getParent());  DataModelList dataModelList;  final LoadDataDialog dialog=new LoadDataDialog(files);  int ret=JOptionPane.showOptionDialog(JOptionUtils.centeringComp(),dialog,"File Loader",JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE,null,new String[]{"Save","Cancel"},"Save");  if (ret == JOptionPane.CANCEL_OPTION) {    return;  }  boolean keepData=false;  if (!isDataEmpty()) {    String message="Would you like to replace the model data?";    int option=JOptionPane.showOptionDialog(this.dataEditor,message,"Data Replacement",0,JOptionPane.QUESTION_MESSAGE,null,new String[]{"Replace","Keep"},"Replace");    keepData=option == 1;  }  DataModelList _dataModelList=dialog.getDataModels();  if (_dataModelList.isEmpty()) {    return;  }  if (keepData) {    dataModelList=dataEditor.getDataModelList();  } else {    dataModelList=new DataModelList();  }  dataModelList.addAll(_dataModelList);  dataEditor.replace(dataModelList);  dataEditor.selectFirstTab();  firePropertyChange("modelChanged",null,null);}  }
class C{  private void emitEnsureCollection(Method method,String fieldName,StringBuilder builder){  builder.append("    protected void ");  builder.append(getEnsureName(fieldName));  builder.append("() {\n");  builder.append("      if (");  builder.append(fieldName);  builder.append(" == null) {\n        ");  builder.append(fieldName);  builder.append(" = new ");  builder.append(getImplName(method.getGenericReturnType(),true));  builder.append("();\n");  builder.append("      }\n");  builder.append("    }\n");}  }
class C{  private TypeLine parseTypeLine(String line) throws FormatParseException {  String[] parts=StringUtils.split(line," ");  if (parts.length != 4) {    throw new FormatParseException("Expected 4 parts in TYPE line, found " + parts.length + " in line '"+ line+ "'");  }  return new TypeLine(parts[2],parts[3]);}  }
class C{  public Object refresh(){  int end=_list.size();  for (int i=0; i < end; i++)   _list.get(i).update();  fireTableRowsUpdated(0,end);  return null;}  }
class C{  public static double geographicLatitude(double geocentricLatitude){  return Math.atan(Math.tan(geocentricLatitude) / FLATTENING_C);}  }
class C{  public RequestOutputStream(final OutputStream stream,final String charset,final int bufferSize){  super(stream,bufferSize);  encoder=Charset.forName(HttpRequest.getValidCharset(charset)).newEncoder();}  }
class C{  public void removeActionListener(ActionListener al){  projListeners.remove(al);}  }
class C{  public Dialog(Context context,int theme){  this(context,theme,true);}  }
class C{  public void transferRAGefaehrdungsMassnahmen(RAGefaehrdungsMassnahmenResult ragmResult,GefaehrdungsUmsetzung gefUms,MassnahmenUmsetzung massnahmenUmsetzung) throws SQLException, IOException {  String massnahmeNr=translateMassnahmenNr(ragmResult);  massnahmenUmsetzung.setSimpleProperty("mnums_id",massnahmeNr);  massnahmenUmsetzung.setName(ragmResult.getMassnahmeTxt().getName());  massnahmenUmsetzung.setDescription(convertClobToStringEncodingSave(ragmResult.getMassnahmeTxt().getBeschreibung(),GSScraperUtil.getInstance().getModel().getEncoding()));  massnahmenUmsetzung.setErlaeuterung(ragmResult.getMzbm().getUmsBeschr());  massnahmenUmsetzung.setUrl(transferUrl(ragmResult.getMassnahme().getLink()));  char siegel=convertToChar(ragmResult.getSiegelTxt().getKurzname());  if (siegel != KEIN_SIEGEL) {    massnahmenUmsetzung.setStufe(siegel);  }  MassnahmenFactory massnahmenFactory=new MassnahmenFactory();  massnahmenUmsetzung=massnahmenFactory.transferUmsetzungWithDate(massnahmenUmsetzung,ragmResult.getUmsTxt().getName(),ragmResult.getMzbm().getUmsDatBis());  massnahmenUmsetzung=massnahmenFactory.transferRevision(massnahmenUmsetzung,ragmResult.getMzbm().getRevDat(),ragmResult.getMzbm().getRevDatNext(),ragmResult.getMzbm().getRevBeschr());}  }
class C{  public static void checkIMFCompliance(HeaderPartition headerPartition,List<PartitionPack> partitionPacks){  Preface preface=headerPartition.getPreface();  MXFDataDefinition filePackageMxfDataDefinition=null;  IMFErrorLogger imfErrorLogger=new IMFErrorLoggerImpl();  GenericPackage genericPackage=preface.getContentStorage().getEssenceContainerDataList().get(0).getLinkedPackage();  SourcePackage filePackage=(SourcePackage)genericPackage;  UUID packageID=filePackage.getPackageMaterialNumberasUUID();{    for (    TimelineTrack timelineTrack : filePackage.getTimelineTracks()) {      Sequence sequence=timelineTrack.getSequence();      if (sequence == null) {        imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_COMPONENT_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,IMFConstraints.IMF_ESSENCE_EXCEPTION_PREFIX + String.format("TimelineTrack with instanceUID = %s in the IMFTrackFile represented by ID %s has no sequence.",timelineTrack.getInstanceUID(),packageID.toString()));      } else       if (!sequence.getMxfDataDefinition().equals(MXFDataDefinition.OTHER)) {        filePackageMxfDataDefinition=sequence.getMxfDataDefinition();      }    }  }  if (filePackageMxfDataDefinition != null && filePackageMxfDataDefinition.equals(MXFDataDefinition.SOUND)) {    int numPartitionsWithEssence=0;    for (    PartitionPack partitionPack : partitionPacks) {      if (partitionPack.hasEssenceContainer()) {        numPartitionsWithEssence++;      }    }    if (numPartitionsWithEssence != 1) {      imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_COMPONENT_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.FATAL,IMFConstraints.IMF_ESSENCE_EXCEPTION_PREFIX + String.format("Number of partitions with essence = %d in MXF file with data definition = %s, which is different from 1 in the IMFTrackFile represented by ID %s.",numPartitionsWithEssence,filePackageMxfDataDefinition,packageID.toString()));    }  }  if (imfErrorLogger.hasFatalErrors()) {    throw new MXFException(String.format("Found fatal errors in the IMFTrackFile represented by ID %s that violate the IMF Core constraints.",packageID.toString()),imfErrorLogger);  }}  }
class C{  public PropertyException(Throwable nested){  this(null,nested);}  }
class C{  public SubscriptionAlreadyExistsException(Object[] params){  super(params);}  }
class C{  public SendMessageThread(Message mess){  super("SendMessage-" + mess.getType());  m=mess;  m.sender=new Address(null,port,m.sender.name);  startTime=System.currentTimeMillis();}  }
class C{  private BookmarkablePageLink createRemoveAllSkuLink(final String skuCode){  final PageParameters paramsMap=new PageParameters();  paramsMap.set(ShoppingCartCommand.CMD_REMOVEALLSKU,skuCode);  return new BookmarkablePageLink<Page>(REMOVE_ALL_LINK,getPage().getPageClass(),paramsMap);}  }
class C{  public Map<String,PluginDescriptor> parsePluginFolder(String[] pluginFolders){  Map<String,PluginDescriptor> map=new HashMap<String,PluginDescriptor>();  if (pluginFolders == null) {    throw new IllegalArgumentException("plugin.folders is not defined");  }  for (  String name : pluginFolders) {    File directory=getPluginFolder(name);    if (directory == null) {      continue;    }    LOG.info("Plugins: looking in: " + directory.getAbsolutePath());    for (    File oneSubFolder : directory.listFiles()) {      if (oneSubFolder.isDirectory()) {        String manifestPath=oneSubFolder.getAbsolutePath() + File.separator + "plugin.xml";        try {          LOG.debug("parsing: " + manifestPath);          PluginDescriptor p=parseManifestFile(manifestPath);          map.put(p.getPluginId(),p);        } catch (        MalformedURLException e) {          LOG.warn(e.toString());        }catch (        SAXException e) {          LOG.warn(e.toString());        }catch (        IOException e) {          LOG.warn(e.toString());        }catch (        ParserConfigurationException e) {          LOG.warn(e.toString());        }      }    }  }  return map;}  }
class C{  public boolean isConnected(){  return status == ConnectionStatus.CONNECTED;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:18.257 -0500",hash_original_method="19B54E9E42F50C19B80602093C26BC32",hash_generated_method="A8A3C236FF85813945F7C1B0B7869E60") @android.view.RemotableViewMethod public void smoothScrollToPosition(int position){  super.smoothScrollToPosition(position);}  }
class C{  HistoryService(ArgusHttpClient client){  super(client);}  }
class C{  public boolean isIgnoreLinearDependent(){  if (fgsScore instanceof SemBicScore) {    return ((SemBicScore)fgsScore).isIgnoreLinearDependent();  }  throw new UnsupportedOperationException("Operation supported only for SemBicScore.");}  }
class C{  public static boolean testPointInTriangle(float pX,float pY,float pZ,float v0X,float v0Y,float v0Z,float v1X,float v1Y,float v1Z,float v2X,float v2Y,float v2Z){  float e10X=v1X - v0X;  float e10Y=v1Y - v0Y;  float e10Z=v1Z - v0Z;  float e20X=v2X - v0X;  float e20Y=v2Y - v0Y;  float e20Z=v2Z - v0Z;  float a=e10X * e10X + e10Y * e10Y + e10Z * e10Z;  float b=e10X * e20X + e10Y * e20Y + e10Z * e20Z;  float c=e20X * e20X + e20Y * e20Y + e20Z * e20Z;  float ac_bb=a * c - b * b;  float vpX=pX - v0X;  float vpY=pY - v0Y;  float vpZ=pZ - v0Z;  float d=vpX * e10X + vpY * e10Y + vpZ * e10Z;  float e=vpX * e20X + vpY * e20Y + vpZ * e20Z;  float x=d * c - e * b;  float y=e * a - d * b;  float z=x + y - ac_bb;  return ((Float.floatToRawIntBits(z) & ~(Float.floatToRawIntBits(x) | Float.floatToRawIntBits(y))) & 0x80000000) != 0;}  }
class C{  public ObjectFactory(){}  }
class C{  @Deprecated @Override public String dumpWindowHierarchy(boolean compressed,String filename){  return dumpWindowHierarchy(compressed);}  }
class C{  public ClassConstantOperand(Class<?> v,Offset i){  super(v,i);}  }
class C{  protected void insertBalanced(String[] k,char[] v,int offset,int n){  int m;  if (n < 1) {    return;  }  m=n >> 1;  insert(k[m + offset],v[m + offset]);  insertBalanced(k,v,offset,m);  insertBalanced(k,v,offset + m + 1,n - m - 1);}  }
class C{  public static <A,B>Pair<A,B> of(A a,B b){  return new Pair<>(a,b);}  }
class C{  public ColumnMetadata(Table table,String column){  this(table,column,DefaultLiteralComparator.getInstance(),true);}  }
class C{  @Override public void onDownloadProgress(DownloadProgressInfo progress){  mAverageSpeed.setText(getString(R.string.kilobytes_per_second,Helpers.getSpeedString(progress.mCurrentSpeed)));  mTimeRemaining.setText(getString(R.string.time_remaining,Helpers.getTimeRemaining(progress.mTimeRemaining)));  progress.mOverallTotal=progress.mOverallTotal;  mPB.setMax((int)(progress.mOverallTotal >> 8));  mPB.setProgress((int)(progress.mOverallProgress >> 8));  mProgressPercent.setText(Long.toString(progress.mOverallProgress * 100 / progress.mOverallTotal) + "%");  mProgressFraction.setText(Helpers.getDownloadProgressString(progress.mOverallProgress,progress.mOverallTotal));}  }
class C{  private static String initialise(Token currentToken,int[][] expectedTokenSequences,String[] tokenImage){  String eol=System.getProperty("line.separator","\n");  StringBuffer expected=new StringBuffer();  int maxSize=0;  for (int i=0; i < expectedTokenSequences.length; i++) {    if (maxSize < expectedTokenSequences[i].length) {      maxSize=expectedTokenSequences[i].length;    }    for (int j=0; j < expectedTokenSequences[i].length; j++) {      expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');    }    if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {      expected.append("...");    }    expected.append(eol).append("    ");  }  String retval="Encountered \"";  Token tok=currentToken.next;  for (int i=0; i < maxSize; i++) {    if (i != 0)     retval+=" ";    if (tok.kind == 0) {      retval+=tokenImage[0];      break;    }    retval+=" " + tokenImage[tok.kind];    retval+=" \"";    retval+=add_escapes(tok.image);    retval+=" \"";    tok=tok.next;  }  retval+="\" at line " + currentToken.next.beginLine + ", column "+ currentToken.next.beginColumn;  retval+="." + eol;  if (expectedTokenSequences.length == 1) {    retval+="Was expecting:" + eol + "    ";  } else {    retval+="Was expecting one of:" + eol + "    ";  }  retval+=expected.toString();  return retval;}  }
class C{  public EnumMemberValue(int type,int value,ConstPool cp){  super('e',cp);  this.typeIndex=type;  this.valueIndex=value;}  }
class C{  public DTLZ4(int numberOfVariables,int numberOfObjectives){  super(numberOfVariables,numberOfObjectives);}  }
class C{  public static NumberAuto newInstance(int numberAutoAsInt){  NumberAuto numberAuto=new NumberAuto();  numberAuto.numberAutoAsInt=numberAutoAsInt;  numberAuto.dataType=Type.INTEGER;  return numberAuto;}  }
class C{  public void markTransitiveUninterestingStreamEscapes(){  for (Iterator<StreamEscape> i=streamEscapeSet.iterator(); i.hasNext(); ) {    StreamEscape streamEscape=i.next();    if (!isStreamOpenLocation(streamEscape.target)) {      if (FindOpenStream.DEBUG) {        System.out.println("Eliminating false stream escape " + streamEscape);      }      i.remove();    }  }  for (Iterator<Stream> i=resourceCollection.resourceIterator(); i.hasNext(); ) {    Stream stream=i.next();    StreamEquivalenceClass equivalenceClass=new StreamEquivalenceClass();    equivalenceClass.addMember(stream);    streamEquivalenceMap.put(stream,equivalenceClass);  }  Set<Stream> orig=new HashSet<Stream>();  do {    orig.clear();    orig.addAll(uninterestingStreamEscapeSet);    for (    StreamEscape streamEscape : streamEscapeSet) {      if (isUninterestingStreamEscape(streamEscape.source)) {        if (FindOpenStream.DEBUG) {          System.out.println("Propagating stream escape " + streamEscape);        }        Stream target=streamOpenLocationMap.get(streamEscape.target);        if (target == null) {          throw new IllegalStateException();        }        uninterestingStreamEscapeSet.add(target);        StreamEquivalenceClass sourceClass=streamEquivalenceMap.get(streamEscape.source);        StreamEquivalenceClass targetClass=streamEquivalenceMap.get(target);        if (sourceClass != targetClass) {          sourceClass.addAll(targetClass);          for (Iterator<Stream> j=targetClass.memberIterator(); j.hasNext(); ) {            Stream stream=j.next();            streamEquivalenceMap.put(stream,sourceClass);          }        }      }    }  } while (!orig.equals(uninterestingStreamEscapeSet));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public SVGDOMImplementation(){  factories=svg11Factories;  registerFeature("CSS","2.0");  registerFeature("StyleSheets","2.0");  registerFeature("SVG",new String[]{"1.0","1.1"});  registerFeature("SVGEvents",new String[]{"1.0","1.1"});}  }
class C{  public Intent installIntent(){  return mInstallIntent;}  }
class C{  public T caseAnonymous_complexAttribute_1_(Anonymous_complexAttribute_1_ object){  return null;}  }
class C{  public TFSRepository connect(final IProject project,final boolean disconnectOtherServers){  Check.notNull(project,"project");  log.info(MessageFormat.format("Connecting project {0} to TFS server",project.getName()));  waitForManagerStartup();  ProjectRepositoryData projectData;synchronized (projectDataLock) {    projectData=projectDataMap.get(project);    if (projectData == null) {      log.error(MessageFormat.format("Project Manager does not contain project {0} (when returning online)",project.getName()));      return null;    }synchronized (projectData) {      if (projectData.getStatus() == ProjectRepositoryStatus.INITIALIZING) {        log.error(MessageFormat.format("Project manager does not contain a status for project {0} (when returning online)",project.getName()));        return null;      } else       if (projectData.getStatus() == ProjectRepositoryStatus.OFFLINE) {        projectData.setStatus(ProjectRepositoryStatus.CONNECTING);      }    }  }  return connectInternal(project,disconnectOtherServers,projectData);}  }
class C{  public StringRequest(String url,Listener<String> listener,ErrorListener errorListener){  this(Method.GET,url,listener,errorListener);}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_security_Provider01() throws NoSuchAlgorithmException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  Provider provider=null;  for (int i=0; i < validValues.length; i++) {    try {      KeyManagerFactory.getInstance(validValues[i],provider);      fail("Expected IllegalArgumentException was not thrown when provider is null");    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  private static BitMatrix extractPureBits(BitMatrix image) throws NotFoundException {  int[] enclosingRectangle=image.getEnclosingRectangle();  if (enclosingRectangle == null) {    throw NotFoundException.getNotFoundInstance();  }  int left=enclosingRectangle[0];  int top=enclosingRectangle[1];  int width=enclosingRectangle[2];  int height=enclosingRectangle[3];  BitMatrix bits=new BitMatrix(MATRIX_WIDTH,MATRIX_HEIGHT);  for (int y=0; y < MATRIX_HEIGHT; y++) {    int iy=top + (y * height + height / 2) / MATRIX_HEIGHT;    for (int x=0; x < MATRIX_WIDTH; x++) {      int ix=left + (x * width + width / 2 + (y & 0x01) * width / 2) / MATRIX_WIDTH;      if (image.get(ix,iy)) {        bits.set(x,y);      }    }  }  return bits;}  }
class C{  public void toSingletonString(StringBuilder sb,boolean forceSingle){  sb.append("$");  for (  String step : steps) {    if (step.charAt(0) != '[') {      sb.append(".");      sb.append(step);      if (forceSingle)       sb.append("[0]");    }  }}  }
class C{  public void putFloat(String key,float value){  checkForNullKey(key);  preferences.edit().putFloat(key,value).apply();}  }
class C{  @Override protected int sizeOf(String key,BitmapDrawable value){  final int bitmapSize=getBitmapSize(value) / 1024;  return bitmapSize == 0 ? 1 : bitmapSize;}  }
class C{  @Transactional(readOnly=true) public Long count(){  String queryString=String.format("select count(o) from %s o",unqualifiedModelClassName);  Query query=this.entityManager.createQuery(queryString);  return (Long)query.getSingleResult();}  }
class C{  protected List<RVVException> canonicalExceptions(List<RVVException> exceptions){  LinkedList<RVVException> canon=new LinkedList<RVVException>();  if (exceptions != null) {    for (    RVVException exception : exceptions) {      if (exception.isEmpty()) {        canon.add(exception);      } else {        long previous=exception.previousVersion;        int insertAt=canon.size();        for (ReceivedVersionsIterator it=exception.receivedVersionsIterator(); it.hasNext(); ) {          Long received=it.next();          if (received != previous + 1) {            canon.add(insertAt,RVVException.createException(previous,received));          }          previous=received;        }        if (exception.nextVersion != previous + 1) {          canon.add(insertAt,RVVException.createException(previous,exception.nextVersion));        }      }    }  }  return canon;}  }
class C{  public final Object clone(){  return getJIPTerm(m_obj.copy(false));}  }
class C{  public void printDoctypeStart(char[] space1,char[] root,char[] space2,String externalId,char[] space3,char[] string1,char string1Delim,char[] space4,char[] string2,char string2Delim,char[] space5) throws IOException {  if (prettyPrinter.getFormat()) {    printString("<!DOCTYPE");    printCharacter(' ');    printCharacters(root);    if (space2 != null) {      printCharacter(' ');      printString(externalId);      printCharacter(' ');      printCharacter(string1Delim);      printCharacters(string1);      printCharacter(string1Delim);      if (space4 != null) {        if (string2 != null) {          if (column + string2.length + 3 > prettyPrinter.getDocumentWidth()) {            printNewline();            for (int i=0; i < prettyPrinter.getTabulationWidth(); i++) {              printCharacter(' ');            }          } else {            printCharacter(' ');          }          printCharacter(string2Delim);          printCharacters(string2);          printCharacter(string2Delim);          printCharacter(' ');        }      }    }  } else {    printString("<!DOCTYPE");    printSpaces(space1,false);    printCharacters(root);    if (space2 != null) {      printSpaces(space2,false);      printString(externalId);      printSpaces(space3,false);      printCharacter(string1Delim);      printCharacters(string1);      printCharacter(string1Delim);      if (space4 != null) {        printSpaces(space4,string2 == null);        if (string2 != null) {          printCharacter(string2Delim);          printCharacters(string2);          printCharacter(string2Delim);          if (space5 != null) {            printSpaces(space5,true);          }        }      }    }  }}  }
class C{  public String read(Link link) throws IOException {  float ver=link.dis.readFloat();  if (ver != version) {    if (ver == .1) {      throw new IOException("LinkActionRequest: Versions do not match! DANGER!");    } else {      Debug.message("link","LinkActionRequest: Versions do not match");    }  }  descriptor=link.dis.readInt();  if (isClientNotification()) {    descriptor=LinkUtil.unsetMask(descriptor,CLIENT_NOTIFICATION_MASK);    return link.readDelimiter(false);  } else   if (isKeyEvent()) {    key=link.dis.readChar();    modifiers=link.dis.readInt();  } else {    x=link.dis.readInt();    y=link.dis.readInt();    clickCount=link.dis.readInt();    modifiers=link.dis.readInt();    lat=link.dis.readFloat();    lon=link.dis.readFloat();  }  properties=new LinkProperties(link);  if (LinkUtil.isMask(descriptor,GRAPHIC_ID_MASK)) {    id=properties.getProperty(LPC_GRAPHICID);  }  return link.readDelimiter(false);}  }
class C{  protected int _rowOffset(int absRank){  return rowOffsets[absRank];}  }
class C{  public HessianSkeleton(Class<?> apiClass){  super(apiClass);}  }
class C{  protected PointImpl(){  super();}  }
class C{  public boolean isSummary(){  Object oo=get_Value(COLUMNNAME_IsSummary);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  String arr(int a[]){  StringBuffer buf=new StringBuffer();  buf.append('[');  if (a.length > 0) {    buf.append(a[0]);    for (int i=1; i < a.length; ++i) {      buf.append(',');      buf.append(a[i]);    }  }  buf.append(']');  return buf.toString();}  }
class C{  public boolean addSpringConfig(SpringConfig springConfig,String configName){  if (springConfig == null) {    throw new IllegalArgumentException("springConfig is required");  }  if (configName == null) {    throw new IllegalArgumentException("configName is required");  }  if (mSpringConfigMap.containsKey(springConfig)) {    return false;  }  mSpringConfigMap.put(springConfig,configName);  return true;}  }
class C{  private boolean checkInput(TextField tf,boolean trim,String msg){  String s=tf.getText();  s=trim ? s.trim() : s;  if (s.isEmpty()) {    tf.requestFocus();    MessageBox.warningDialog(owner,msg);    return false;  }  return true;}  }
class C{  private void readObject(){}  }
class C{  final public SyntaxTreeNode OperatorOrFunctionDefinition() throws ParseException {  SyntaxTreeNode tn;  SyntaxTreeNode zn=null;  bpa("Definition");  int kind=0;  String n;  Token t;  expecting="LOCAL, Identifier or Operator Symbol";switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case LOCAL:    t=jj_consume_token(LOCAL);  zn=new SyntaxTreeNode(mn,t);break;default :jj_la1[19]=jj_gen;;}t=jj_consume_token(DEFBREAK);expecting="LOCAL, Identifier or Operator Symbol";if (jj_2_8(2147483647)) {tn=Identifier();addHeir(tn);kind=N_FunctionDefinition;expecting="[";t=jj_consume_token(LSB);addHeir(new SyntaxTreeNode(mn,t));expecting="Identifier";tn=QuantBound();addHeir(tn);expecting="COMMA or ]";label_8: while (true) {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case COMMA:;break;default :jj_la1[20]=jj_gen;break label_8;}t=jj_consume_token(COMMA);addHeir(new SyntaxTreeNode(mn,t));expecting="Identifier";tn=QuantBound();addHeir(tn);}t=jj_consume_token(RSB);expecting="==";addHeir(new SyntaxTreeNode(mn,t));t=jj_consume_token(DEF);belchDEF();addHeir(new SyntaxTreeNode(mn,t));expecting="Expression";tn=Expression();addHeir(tn);} else if (jj_2_9(2147483647)) {tn=PostfixLHS();addHeir(tn);expecting="==";t=jj_consume_token(DEF);belchDEF();kind=N_OperatorDefinition;addHeir(new SyntaxTreeNode(mn,t));expecting="Expression";tn=Expression();addHeir(tn);} else if (jj_2_10(2147483647)) {tn=InfixLHS();addHeir(tn);expecting="==";t=jj_consume_token(DEF);belchDEF();kind=N_OperatorDefinition;addHeir(new SyntaxTreeNode(mn,t));expecting="Expression";tn=Expression();addHeir(tn);} else if (jj_2_11(2147483647)) {tn=IdentLHS();addHeir(tn);expecting="==";t=jj_consume_token(DEF);belchDEF();addHeir(new SyntaxTreeNode(mn,t));expecting="Expression or Instance";if (jj_2_7(1)) {tn=Expression();kind=N_OperatorDefinition;} else {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case INSTANCE:tn=Instantiation();kind=N_ModuleDefinition;break;default :jj_la1[21]=jj_gen;jj_consume_token(-1);throw new ParseException();}}addHeir(tn);} else {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case op_76:case op_26:case op_29:case op_58:case CASESEP:case op_61:case op_112:case op_113:case op_114:case op_115:case op_116:tn=PrefixLHS();addHeir(tn);expecting="==";t=jj_consume_token(DEF);belchDEF();kind=N_OperatorDefinition;addHeir(new SyntaxTreeNode(mn,t));expecting="Expression";tn=Expression();addHeir(tn);break;default :jj_la1[22]=jj_gen;jj_consume_token(-1);throw new ParseException();}}SyntaxTreeNode sn[]=getLastHeirs();epa();{if (true) return new SyntaxTreeNode(mn,kind,zn,sn);}throw new Error("Missing return statement in function");}  }
class C{  public static Resource openResource(Activity activity,Uri uri){  try {    String mimetype=activity.getContentResolver().getType(uri);    if (null == mimetype) {      String extension=MimeTypeMap.getFileExtensionFromUrl(uri.toString());      if (extension != null) {        mimetype=MimeTypeMap.getSingleton().getMimeTypeFromExtension(extension);      }    }    return new Resource(activity.getContentResolver().openInputStream(uri),mimetype);  } catch (  Exception e) {    Log.e(LOG_TAG,"Failed to open resource input stream",e);  }  return null;}  }
class C{  @SuppressWarnings("unchecked") public final Object convert(final Class type,final Object value){  if (value == null) {    return null;  } else {    if (value instanceof String) {      if (log.isDebugEnabled()) {        log.debug("value (" + value + ") instance of String");      }      try {        if (StringUtils.isBlank(String.valueOf(value))) {          return null;        }        if (log.isDebugEnabled()) {          log.debug("converting '" + value + "' to a decimal");        }        Number num=formatter.parse(String.valueOf(value));        return num.doubleValue();      } catch (      ParseException pe) {      }    } else     if (value instanceof Double) {      if (log.isDebugEnabled()) {        log.debug("value (" + value + ") instance of Double");        log.debug("returning double: " + formatter.format(value));      }      return formatter.format(value);    }  }  throw new ConversionException("Could not convert " + value + " to "+ type.getName()+ "!");}  }
class C{  @Override public void write(int theByte) throws java.io.IOException {  if (suspendEncoding) {    this.out.write(theByte);    return;  }  if (encode) {    buffer[position++]=(byte)theByte;    if (position >= bufferLength) {      this.out.write(encode3to4(b4,buffer,bufferLength,options));      lineLength+=4;      if (breakLines && lineLength >= MAX_LINE_LENGTH) {        this.out.write(NEW_LINE);        lineLength=0;      }      position=0;    }  } else {    if (decodabet[theByte & 0x7f] > WHITE_SPACE_ENC) {      buffer[position++]=(byte)theByte;      if (position >= bufferLength) {        int len=Base64.decode4to3(buffer,0,b4,0,options);        out.write(b4,0,len);        position=0;      }    } else     if (decodabet[theByte & 0x7f] != WHITE_SPACE_ENC) {      throw new java.io.IOException("Invalid character in Base64 data.");    }  }}  }
class C{  @Override public boolean isConscious(){  return true;}  }
class C{  public Simulation(){  this.camera=new Camera(32,new Vector2());  this.rays=new ArrayList<SandboxRay>();  this.world=new World();  this.world.setUserData(DEFAULT_SIMULATION_NAME);  this.contactCounter=new ContactCounter();  this.world.addListener(this.contactCounter);}  }
class C{  private void expandCurrentSubtree(int offset){  List<Annotation> modifiedAnnotations=new ArrayList<Annotation>();  TLAProofPosition found=null;  for (Iterator<TLAProofPosition> it=foldPositions.iterator(); it.hasNext(); ) {    TLAProofPosition proofPosition=it.next();    try {      if (found == null && proofPosition.containsBeforeProof(offset,document)) {        found=proofPosition;        if (found.getAnnotation().isCollapsed()) {          found.getAnnotation().markExpanded();          modifiedAnnotations.add(found.getAnnotation());        }        continue;      }      if (found != null && found.contains(proofPosition)) {        if (proofPosition.getAnnotation().isCollapsed()) {          proofPosition.getAnnotation().markExpanded();          modifiedAnnotations.add(proofPosition.getAnnotation());        }      }    } catch (    BadLocationException e) {      Activator.getDefault().logError("Error changing expansion state of proofs.",e);    }  }  editor.modifyProjectionAnnotations((Annotation[])modifiedAnnotations.toArray(new ProjectionAnnotation[modifiedAnnotations.size()]));}  }
class C{  public int findHeaderPositionUnder(int x,int y){  for (int i=0; i < mHeaderRects.size(); i++) {    Rect rect=mHeaderRects.get(mHeaderRects.keyAt(i));    if (rect.contains(x,y)) {      return mHeaderRects.keyAt(i);    }  }  return -1;}  }
class C{  public boolean removeParameter(final String paramName) throws IllegalArgumentException {  LOG.trace("enter PostMethod.removeParameter(String)");  if (paramName == null) {    throw new IllegalArgumentException("Argument passed to removeParameter(String) cannot be null");  }  boolean removed=false;  final Iterator iter=params.iterator();  while (iter.hasNext()) {    final NameValuePair pair=(NameValuePair)iter.next();    if (paramName.equals(pair.getName())) {      iter.remove();      removed=true;    }  }  return removed;}  }
class C{  public void metadataTags(TagInfo tagInfo){  tagInfo=new TagInfo("meta",ContentType.none,BelongsTo.HEAD_AND_BODY,false,false,false,CloseTag.forbidden,Display.none);  this.put("meta",tagInfo);  tagInfo=new TagInfo("link",ContentType.none,BelongsTo.HEAD_AND_BODY,false,false,false,CloseTag.forbidden,Display.none);  this.put("link",tagInfo);  tagInfo=new TagInfo("title",ContentType.text,BelongsTo.HEAD,false,true,false,CloseTag.required,Display.none);  this.put("title",tagInfo);  tagInfo=new TagInfo("style",ContentType.text,BelongsTo.HEAD_AND_BODY,false,false,false,CloseTag.required,Display.none);  this.put("style",tagInfo);  tagInfo=new TagInfo("base",ContentType.none,BelongsTo.HEAD,false,false,false,CloseTag.forbidden,Display.none);  this.put("base",tagInfo);}  }
class C{  @SuppressWarnings("unused") private Iterator<HeapOperand<Object>> iterateOriginalHeapUses(HeapVariable<Object> A){  Object type=A.getHeapType();  HashSet<HeapOperand<Object>> set=findOrCreateOriginalUses(type);  return set.iterator();}  }
class C{  public QName(String qname,Stack namespaces){  this(qname,namespaces,false);}  }
class C{  protected int _rowOffset(int absRank){  return rowOffsets[absRank];}  }
class C{  private Bitmap scaleBitmapForIcon(Bitmap bitmap){  Resources res=mContext.getResources();  float maxWidth=res.getDimension(R.dimen.remote_notification_logo_max_width);  float maxHeight=res.getDimension(R.dimen.remote_notification_logo_max_height);  return scaleBitmap(bitmap,(int)maxWidth,(int)maxHeight);}  }
class C{  public CBCBlockCipherMac(BlockCipher cipher){  this(cipher,(cipher.getBlockSize() * 8) / 2,null);}  }
class C{  public static String objectToJson(Object object){  return new GfJsonObject(object).toString();}  }
class C{  void showModal(boolean reverse){  showDialog(true,reverse);}  }
class C{  @Override public int read() throws IOException {synchronized (lock) {    checkNotClosed();    int ch=readChar();    if (lastWasCR && ch == '\n') {      ch=readChar();    }    lastWasCR=false;    return ch;  }}  }
class C{  public static <E extends Exception>String consumeUntilDelimiterOrEOS(IBasicCharSource<E> reader,char delimiter) throws E {  return consumeUntilDelimiterOrEOS(reader,delimiter,delimiter);}  }
class C{  private void parseUrl(String url,Properties info) throws SQLException {  this.urlBaseEndIndex=0;  if (info != null)   props.putAll(info);  if (!"jdbc".equalsIgnoreCase(nextUrlBaseToken(url))) {    throw new SQLException("URL lacks 'jdbc' protocol: " + url);  }  if (!"t-router".equalsIgnoreCase(nextUrlBaseToken(url))) {    throw new SQLException("URL lacks 't-router' sub-protocol: " + url);  }  dataServiceName=nextUrlBaseToken(url);  if (dataServiceName == null) {    throw new SQLException("Missing data service name in URL: " + url);  }  dbname=nextUrlBaseToken(url);  if (dbname == null) {    dbname="";  }  parseURLOptions(url.substring(urlBaseEndIndex));  if (logger.isDebugEnabled()) {    logger.debug("Parsed t-router URL: " + toString());  }}  }
class C{  public CActionCopyReilCode(final JTextArea textArea){  super("Copy to Clipboard");  m_textArea=textArea;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public boolean swapBuffers(EGLSurface eglSurface){  return EGL14.eglSwapBuffers(mEGLDisplay,eglSurface);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:15.588 -0500",hash_original_method="0273784C246265D2ED8DEE21631953AB",hash_generated_method="FA4C376A124A9FB7E96B70642915FF5D") private Math(){}  }
class C{  public ASN1InputStream(byte[] input,boolean lazyEvaluate){  this(new ByteArrayInputStream(input),input.length,lazyEvaluate);}  }
class C{  public static Map<String,List<String>> allParameters(final HttpServletRequest request,final Set<String> pathVariables){  return allParameters(request,pathVariables,false);}  }
class C{  ForkJoinWorkerThread(ForkJoinPool pool,ThreadGroup threadGroup,AccessControlContext acc){  super(threadGroup,null,"aForkJoinWorkerThread");  U.putOrderedObject(this,INHERITEDACCESSCONTROLCONTEXT,acc);  eraseThreadLocals();  this.pool=pool;  this.workQueue=pool.registerWorker(this);}  }
class C{  public void init(boolean encrypting,CipherParameters params){  this.encrypting=encrypting;  if (params instanceof RC2Parameters) {    RC2Parameters param=(RC2Parameters)params;    workingKey=generateWorkingKey(param.getKey(),param.getEffectiveKeyBits());  } else   if (params instanceof KeyParameter) {    byte[] key=((KeyParameter)params).getKey();    workingKey=generateWorkingKey(key,key.length * 8);  } else {    throw new IllegalArgumentException("invalid parameter passed to RC2 init - " + params.getClass().getName());  }}  }
class C{  public static float lengthSquared(Vector3 a){  return Vector3.dot(a,a);}  }
class C{  public void close() throws IOException {  boolean error=!(flow.getTransferedSize() == this.connectionParameters.getStreamSize());  if (!error) {    NetworkUsageService network_service=ApplicationContextProvider.getBean(NetworkUsageService.class);    if (network_service != null) {      network_service.createDownloadUsage(flow.getTransferedSize(),flow.getStartDate(),connectionParameters.getUser());    }  }  if (error && (this.listener != null)) {    this.listener.bytesTransferred(flow.getTransferedSize(),-1,this.connectionParameters.getStreamSize());  }  this.regulator.releaseChannel(this.flow);  logger.debug("CLOSED - " + this.flow);  byte[] buffer;  while ((buffer=buf) != null) {    if (BUF_UPDATER.compareAndSet(this,buffer,null)) {      InputStream input=in;      in=null;      if (input != null)       input.close();      return;    }  }}  }
class C{  public void validateBillingResultXML() throws Exception {  List<Document> docs=getBillingDocuments();  URL schema=XMLValidation.getBillingResultSchemaURL();  for (  Document doc : docs) {    Document parentDoc=XMLConverter.newDocument();    Element bdElement=parentDoc.createElement("Billingdata");    Node childNode=XMLConverter.getLastChildNode(doc,"BillingDetails");    Node adoptNode=parentDoc.importNode(childNode,true);    bdElement.appendChild(adoptNode);    parentDoc.appendChild(bdElement);    XMLValidation.validateXML(schema,parentDoc);  }}  }
class C{  protected void waitForDownloadOrTimeout_skipNotification(long id) throws TimeoutException, InterruptedException {  doWaitForDownloadsOrTimeout(new Query().setFilterById(id),WAIT_FOR_DOWNLOAD_POLL_TIME,MAX_WAIT_FOR_DOWNLOAD_TIME);}  }
class C{  public void updateFilters(FilterOptions filterOptions) throws XZIOException {  FilterOptions[] opts=new FilterOptions[1];  opts[0]=filterOptions;  updateFilters(opts);}  }
class C{  public void propertyChange(java.beans.PropertyChangeEvent e){  boolean now=clock.getRun();  if (now) {    b.setText("Stop");  } else {    b.setText("Run");  }}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:11.440 -0500",hash_original_method="DE83B28F19106842758F77288DAEAA27",hash_generated_method="E8160E9C4F541C673943DD74608BDCC6") static public FileA3D createFromFile(RenderScript rs,String path){  int fileId=rs.nFileA3DCreateFromFile(path);  if (fileId == 0) {    throw new RSRuntimeException("Unable to create a3d file from " + path);  }  FileA3D fa3d=new FileA3D(fileId,rs,null);  fa3d.initEntries();  return fa3d;}  }
class C{  public void addCondition(Expression cond){  if (condition == null) {    condition=cond;  } else {    condition=new ConditionAndOr(ConditionAndOr.AND,cond,condition);  }}  }
class C{  private static void writeHeadersTo(MimeMessage message,OutputStream headerOs,String[] ignoreList) throws MessagingException {  @SuppressWarnings("unchecked") Enumeration<String> headers=message.getNonMatchingHeaderLines(ignoreList);  writeHeadersTo(headers,headerOs);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int v=getInt(stack);  CaptureDeviceInput conn=getCapDevInput(stack);  if (conn != null)   conn.setBrightness(v);  return null;}  }
class C{  private static OptimizedObjectOutputStream createOut(){  try {    return new OptimizedObjectOutputStream(new GridUnsafeDataOutput(4 * 1024));  } catch (  IOException e) {    throw new IgniteException("Failed to create object output stream.",e);  }}  }
class C{  @Override public void notifyAllTabs(String code){  if (listeners != null) {    listeners.notifyAll(new SamlCodeEvent(this,code));    Logging.getInstance().log(getClass(),"Notify all Listeners.",Logging.DEBUG);  }}  }
class C{  public WebSocket addHeader(String name,String value){  mHandshakeBuilder.addHeader(name,value);  return this;}  }
class C{  public void finishDigest(String title,List<AugmentedResult> results){  if (digestEnabled()) {    List<AugmentedResult> failed=failedTests(results);    String slackTitle=String.format("%s %s",title,failed.isEmpty() ? " SUCCEEDED" : " FAILED");    String slackText=String.format("TOTAL: %s SUCCEEDED: %s FAILED %s",results.size(),results.size() - failed.size(),failed.size());    SlackAttachment slackAttachment=new SlackAttachment(slackTitle,"",slackText,null);    slackAttachment.setColor(failed.isEmpty() ? "good" : "danger");    slackSession.sendMessage(digestChannel,"",slackAttachment);    failed.stream().forEach(null);  }}  }
class C{  public SignatureFile(InputStream is,String filename) throws IOException {  this(filename);  while (is.available() > 0) {    MessageHeader m=new MessageHeader(is);    entries.addElement(m);  }}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public static Map<String,Object> testCapture(DispatchContext dctx,Map<String,? extends Object> context){  Locale locale=(Locale)context.get("locale");  Map<String,Object> result=ServiceUtil.returnSuccess();  Debug.logInfo("Test Capture Process",module);  String refNum=UtilDateTime.nowAsString();  result.put("captureResult",Boolean.TRUE);  result.put("captureAmount",context.get("captureAmount"));  result.put("captureRefNum",refNum);  result.put("captureAltRefNum",refNum);  result.put("captureFlag","C");  result.put("captureMessage",UtilProperties.getMessage(resource,"AccountingPaymentTestCapture",locale));  return result;}  }
class C{  public static void main(String[] args) throws Exception {  File file=new File("SortedStrings.txt");  if (!file.exists()) {    System.out.println(file.getName() + " does not exist");    System.exit(0);  }  System.out.println("File " + file.getName());  boolean dataSorted=true;  String string1="";  String string2="";  try (Scanner input=new Scanner(file)){    if (input.hasNext())     string1=input.next();    while (input.hasNext() && dataSorted) {      string2=input.next();      if (string1.compareTo(string2) > 0) {        System.out.println("The strings " + string1 + " and "+ string2+ " are out of order");        dataSorted=false;      }      string1=string2;    }  }   if (dataSorted) {    System.out.println("The strings in the file are stored in increasing order");  }}  }
class C{  public String bigMoneyValueToString(BigMoney value){  if (value == null) {    throw new IllegalArgumentException("Value cannot be null");  }  String toReturn="";  toReturn=numberFormat.format(value.getAmount().doubleValue());  return toReturn;}  }
class C{  protected double calculateLogLikelihood(){  if (patternLogLikelihoods == null) {    patternLogLikelihoods=new double[patternCount];  }  if (branchUpdateIndices == null) {    branchUpdateIndices=new int[nodeCount];    branchLengths=new double[nodeCount];    scaleBufferIndices=new int[internalNodeCount];    storedScaleBufferIndices=new int[internalNodeCount];  }  if (operations == null) {    operations=new int[numRestrictedPartials + 1][internalNodeCount * Beagle.OPERATION_TUPLE_SIZE];    operationCount=new int[numRestrictedPartials + 1];  }  recomputeScaleFactors=false;  if (!this.delayRescalingUntilUnderflow || everUnderflowed) {    if (this.rescalingScheme == PartialsRescalingScheme.ALWAYS || this.rescalingScheme == PartialsRescalingScheme.DELAYED) {      useScaleFactors=true;      recomputeScaleFactors=true;    } else     if (this.rescalingScheme == PartialsRescalingScheme.DYNAMIC) {      useScaleFactors=true;      if (rescalingCount > rescalingFrequency) {        rescalingCount=0;        rescalingCountInner=0;      }      if (rescalingCountInner < RESCALE_TIMES) {        recomputeScaleFactors=true;        updateAllNodes();        rescalingCountInner++;      }      rescalingCount++;    }  }  if (RESCALING_OFF) {    useScaleFactors=false;    recomputeScaleFactors=false;  }  if (tipStatesModel != null) {    int tipCount=treeModel.getExternalNodeCount();    for (int index=0; index < tipCount; index++) {      if (updateNode[index]) {        if (tipStatesModel.getModelType() == TipStatesModel.Type.PARTIALS) {          tipStatesModel.getTipPartials(index,tipPartials);          beagle.setTipPartials(index,tipPartials);        } else {          tipStatesModel.getTipStates(index,tipStates);          beagle.setTipStates(index,tipStates);        }      }    }  }  branchUpdateCount=0;  operationListCount=0;  if (hasRestrictedPartials) {    for (int i=0; i <= numRestrictedPartials; i++) {      operationCount[i]=0;    }  } else {    operationCount[0]=0;  }  final NodeRef root=treeModel.getRoot();  traverse(treeModel,root,null,true);  if (updateSubstitutionModel) {    substitutionModelDelegate.updateSubstitutionModels(beagle);  }  if (updateSiteModel) {    double[] categoryRates=this.siteRateModel.getCategoryRates();    beagle.setCategoryRates(categoryRates);  }  if (branchUpdateCount > 0) {    substitutionModelDelegate.updateTransitionMatrices(beagle,branchUpdateIndices,branchLengths,branchUpdateCount);  }  if (COUNT_TOTAL_OPERATIONS) {    totalMatrixUpdateCount+=branchUpdateCount;    for (int i=0; i <= numRestrictedPartials; i++) {      totalOperationCount+=operationCount[i];    }  }  double logL;  boolean done;  boolean firstRescaleAttempt=true;  do {    if (hasRestrictedPartials) {      for (int i=0; i <= numRestrictedPartials; i++) {        beagle.updatePartials(operations[i],operationCount[i],Beagle.NONE);        if (i < numRestrictedPartials) {        }      }    } else {      beagle.updatePartials(operations[0],operationCount[0],Beagle.NONE);    }    int rootIndex=partialBufferHelper.getOffsetIndex(root.getNumber());    double[] categoryWeights=this.siteRateModel.getCategoryProportions();    double[] frequencies=substitutionModelDelegate.getRootStateFrequencies();    int cumulateScaleBufferIndex=Beagle.NONE;    if (useScaleFactors) {      if (recomputeScaleFactors) {        scaleBufferHelper.flipOffset(internalNodeCount);        cumulateScaleBufferIndex=scaleBufferHelper.getOffsetIndex(internalNodeCount);        beagle.resetScaleFactors(cumulateScaleBufferIndex);        beagle.accumulateScaleFactors(scaleBufferIndices,internalNodeCount,cumulateScaleBufferIndex);      } else {        cumulateScaleBufferIndex=scaleBufferHelper.getOffsetIndex(internalNodeCount);      }    } else     if (useAutoScaling) {      beagle.accumulateScaleFactors(scaleBufferIndices,internalNodeCount,Beagle.NONE);    }    beagle.setCategoryWeights(0,categoryWeights);    beagle.setStateFrequencies(0,frequencies);    double[] sumLogLikelihoods=new double[1];    beagle.calculateRootLogLikelihoods(new int[]{rootIndex},new int[]{0},new int[]{0},new int[]{cumulateScaleBufferIndex},1,sumLogLikelihoods);    logL=sumLogLikelihoods[0];    beagle.getSiteLogLikelihoods(patternLogLikelihoods);    if (ascertainedSitePatterns) {      beagle.getSiteLogLikelihoods(patternLogLikelihoods);      logL=getAscertainmentCorrectedLogLikelihood((AscertainedSitePatterns)patternList,patternLogLikelihoods,patternWeights);    }    if (Double.isNaN(logL) || Double.isInfinite(logL)) {      everUnderflowed=true;      logL=Double.NEGATIVE_INFINITY;      if (firstRescaleAttempt && (delayRescalingUntilUnderflow || rescalingScheme == PartialsRescalingScheme.DELAYED)) {        if (rescalingScheme == PartialsRescalingScheme.DYNAMIC || (rescalingCount == 0)) {          if (rescalingMessageCount % 1000 == 0) {            if (rescalingMessageCount > 0) {              Logger.getLogger("dr.evomodel").info("Underflow calculating likelihood (" + rescalingMessageCount + " messages not shown).");            } else {              Logger.getLogger("dr.evomodel").info("Underflow calculating likelihood. Attempting a rescaling...");            }          }          rescalingMessageCount+=1;        }        useScaleFactors=true;        recomputeScaleFactors=true;        branchUpdateCount=0;        updateAllNodes();        if (hasRestrictedPartials) {          for (int i=0; i <= numRestrictedPartials; i++) {            operationCount[i]=0;          }        } else {          operationCount[0]=0;        }        traverse(treeModel,root,null,false);        done=false;        firstRescaleAttempt=false;      } else {        done=true;      }    } else {      done=true;    }  } while (!done);  for (int i=0; i < nodeCount; i++) {    updateNode[i]=false;  }  updateSubstitutionModel=false;  updateSiteModel=false;  return logL;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public WaitingAction(String textWait,String textAfter,Request<T> request,WaitingActionCondition waitingActionCondition){  this.textWait=textWait;  this.textAfter=textAfter;  this.request=request;  this.waitingActionCondition=waitingActionCondition;}  }
class C{  @DSSpec(DSCat.SPEC_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.211 -0400",hash_original_method="5EB3021A042FE7111E0120410B88C0A6",hash_generated_method="0A7FBFA90D0CBD6B19BC2B26FC5FDF6C") public static void moveFile(File srcFile,File destFile) throws IOException {  if (srcFile == null) {    throw new NullPointerException("Source must not be null");  }  if (destFile == null) {    throw new NullPointerException("Destination must not be null");  }  if (!srcFile.exists()) {    throw new FileNotFoundException("Source '" + srcFile + "' does not exist");  }  if (srcFile.isDirectory()) {    throw new IOException("Source '" + srcFile + "' is a directory");  }  if (destFile.exists()) {    throw new FileExistsException("Destination '" + destFile + "' already exists");  }  if (destFile.isDirectory()) {    throw new IOException("Destination '" + destFile + "' is a directory");  }  boolean rename=srcFile.renameTo(destFile);  if (!rename) {    copyFile(srcFile,destFile);    if (!srcFile.delete()) {      FileUtils.deleteQuietly(destFile);      throw new IOException("Failed to delete original file '" + srcFile + "' after copy to '"+ destFile+ "'");    }  }}  }
class C{  public void add(final Number operand){  this.value+=operand.longValue();}  }
class C{  public boolean containsKey(K key){  if (_list == null)   return false;  return _list.get(key) != null;}  }
class C{  public synchronized void putAll(Map map,int action){  putAll(map,action,true);}  }
class C{  private List<StoragePool> processStorageThinPoolResponse(StorageSystem system,List<Pool> thinPoolListFromResponse,AccessProfile accessProfile,Set<String> supportedProtocols,List<StoragePool> poolsToMatchWithVpool) throws IOException {  _logger.debug("Entering {}",Thread.currentThread().getStackTrace()[1].getMethodName());  List<StoragePool> newPools=new ArrayList<StoragePool>();  List<StoragePool> updatePools=new ArrayList<StoragePool>();  List<StoragePool> allPools=new ArrayList<StoragePool>();  if (null != thinPoolListFromResponse && !thinPoolListFromResponse.isEmpty()) {    _logger.debug("thinPoolListFromResponse size:{}",thinPoolListFromResponse.size());    for (    Pool poolFromResponse : thinPoolListFromResponse) {      if (poolFromResponse.getPoolFunction() == 5) {        boolean isNew=false;        boolean isModified=false;        String nativeGuid=NativeGUIDGenerator.generateNativeGuid(system,poolFromResponse.getObjectID(),NativeGUIDGenerator.POOL);        _logger.debug("nativeGuid :{}",nativeGuid);        StoragePool pool=checkPoolExistsInDB(nativeGuid);        if (null == pool) {          isNew=true;          pool=new StoragePool();          pool.setNativeGuid(nativeGuid);          pool.setStorageDevice(system.getId());          pool.setId(URIUtil.createId(StoragePool.class));          pool.setNativeId(poolFromResponse.getPoolID());          pool.setOperationalStatus(StoragePool.PoolOperationalStatus.READY.toString());          pool.setMaximumThinVolumeSize(104857600L);          pool.setPoolServiceType(PoolServiceType.block.toString());          pool.setRegistrationStatus(DiscoveredDataObject.RegistrationStatus.REGISTERED.toString());          StringSet raidLevels=new StringSet();          raidLevels.add(poolFromResponse.getRaidType());          pool.addSupportedRaidLevels(raidLevels);          pool.setSupportedResourceTypes(StoragePool.SupportedResourceTypes.THIN_ONLY.toString());          _logger.info("pool objectId {}",poolFromResponse.getObjectID());          pool.setThinVolumePreAllocationSupported(Boolean.FALSE);        }        if (poolFromResponse.getTierControl() == 1) {          pool.setAutoTieringEnabled(Boolean.TRUE);        } else {          pool.setAutoTieringEnabled(Boolean.FALSE);        }        StringSet protocols=new StringSet(supportedProtocols);        if (!isNew && ImplicitPoolMatcher.checkPoolPropertiesChanged(pool.getProtocols(),protocols)) {          isModified=true;        }        pool.setProtocols(protocols);        StringSet copyTypes=new StringSet();        copyTypes.add(StoragePool.CopyTypes.UNSYNC_ASSOC.name());        copyTypes.add(StoragePool.CopyTypes.UNSYNC_UNASSOC.name());        copyTypes.add(StoragePool.CopyTypes.SYNC.name());        copyTypes.add(StoragePool.CopyTypes.ASYNC.name());        pool.setSupportedCopyTypes(copyTypes);        String label=null;        if (StringUtils.isBlank(poolFromResponse.getName()) || poolFromResponse.getName().length() <= 2) {          label="DP " + poolFromResponse.getDisplayName();        } else {          label=poolFromResponse.getName();        }        pool.setPoolName(label);        pool.setFreeCapacity(poolFromResponse.getFreeCapacity());        pool.setTotalCapacity(poolFromResponse.getUsedCapacity());        pool.setSubscribedCapacity(poolFromResponse.getSubscribedCapacityInKB());        if (null != poolFromResponse.getDiskType()) {          Set<String> driveTypes=new HashSet<String>();          driveTypes.add(getPoolSupportedDriveType(poolFromResponse.getDiskType()));          pool.addDriveTypes(driveTypes);        }        pool.setLabel(label);        if (!isNew && !isModified && (ImplicitPoolMatcher.checkPoolPropertiesChanged(pool.getCompatibilityStatus(),CompatibilityStatus.COMPATIBLE.name()) || ImplicitPoolMatcher.checkPoolPropertiesChanged(pool.getDiscoveryStatus(),DiscoveryStatus.VISIBLE.name()))) {          isModified=true;        }        pool.setCompatibilityStatus(CompatibilityStatus.COMPATIBLE.name());        pool.setDiscoveryStatus(DiscoveryStatus.VISIBLE.name());        if (isNew) {          newPools.add(pool);          poolsToMatchWithVpool.add(pool);        } else {          updatePools.add(pool);          if (isModified) {            poolsToMatchWithVpool.add(pool);          }        }      }    }    StoragePoolAssociationHelper.setStoragePoolVarrays(system.getId(),newPools,_dbClient);    _logger.info("New pools size: {}",newPools.size());    _logger.info("updatePools size: {}",updatePools.size());    _dbClient.createObject(newPools);    _dbClient.persistObject(updatePools);    allPools.addAll(newPools);    allPools.addAll(updatePools);  }  _logger.debug("Exiting {}",Thread.currentThread().getStackTrace()[1].getMethodName());  return allPools;}  }
class C{  public static short[] join(short[]... arrays){  if (arrays.length == 0) {    return new short[0];  }  if (arrays.length == 1) {    return arrays[0];  }  int length=0;  for (  short[] array : arrays) {    length+=array.length;  }  short[] result=new short[length];  length=0;  for (  short[] array : arrays) {    System.arraycopy(array,0,result,length,array.length);    length+=array.length;  }  return result;}  }
class C{  public void actionPerformed(@Nonnull java.awt.event.ActionEvent e){  log.debug("Selected button: {}",e.getActionCommand());  for (  ProgrammingMode mode : buttonMap.keySet()) {    if (mode.toString().equals(e.getActionCommand())) {      log.debug("      set mode {} on {}",mode.toString(),getProgrammer());      getProgrammer().setMode(mode);      return;    }  }}  }
class C{  public static String unifyLineSeparators(String s,String ls){  if (s == null) {    return null;  }  if (ls == null) {    ls=System.getProperty("line.separator");  }  if (!(ls.equals("\n") || ls.equals("\r") || ls.equals("\r\n"))) {    throw new IllegalArgumentException("Requested line separator is invalid.");  }  int length=s.length();  StringBuilder buffer=new StringBuilder(length);  for (int i=0; i < length; i++) {    if (s.charAt(i) == '\r') {      if ((i + 1) < length && s.charAt(i + 1) == '\n') {        i++;      }      buffer.append(ls);    } else     if (s.charAt(i) == '\n') {      buffer.append(ls);    } else {      buffer.append(s.charAt(i));    }  }  return buffer.toString();}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(')');  return result.toString();}  }
class C{  @SuppressLint("InflateParams") static Folder fromXml(Launcher launcher){  return (Folder)launcher.getLayoutInflater().inflate(FeatureFlags.LAUNCHER3_ICON_NORMALIZATION ? R.layout.user_folder_icon_normalized : R.layout.user_folder,null);}  }
class C{  @Inline static void compilePutfieldBarrierIntImm(Assembler asm,Offset fieldOffset,int locationMetadata,BaselineCompilerImpl compiler){  putfieldStoreBarrierHelper(asm,compiler,fieldOffset,locationMetadata,Entrypoints.intFieldWriteBarrierMethod);}  }
class C{  public Column[] orderColumnsForTable(Table table){  if (table != null) {    Column[] pks=getSyncKeysColumnsForTable(table);    Column[] cols=table.getColumns();    List<Column> orderedColumns=new ArrayList<Column>(cols.length);    for (int i=0; i < pks.length; i++) {      orderedColumns.add(pks[i]);    }    for (int i=0; i < cols.length; i++) {      boolean syncKey=false;      for (int j=0; j < pks.length; j++) {        if (cols[i].getName().equals(pks[j].getName())) {          syncKey=true;          break;        }      }      if (!syncKey) {        orderedColumns.add(cols[i]);      }    }    Column[] result=orderedColumns.toArray(new Column[orderedColumns.size()]);    return filterExcludedAndIncludedColumns(result);  } else {    return new Column[0];  }}  }
class C{  public static String quote(String s){  return '\'' + s + '\'';}  }
class C{  void pushSpaceHandling(boolean b) throws org.xml.sax.SAXParseException {  m_spacePreserveStack.push(b);}  }
class C{  public int search(String txt){  int m=pat.length();  int n=txt.length();  int skip;  for (int i=0; i <= n - m; i+=skip) {    skip=0;    for (int j=m - 1; j >= 0; j--) {      if (pat.charAt(j) != txt.charAt(i + j)) {        skip=Math.max(1,j - right[txt.charAt(i + j)]);        break;      }    }    if (skip == 0)     return i;  }  return n;}  }
class C{  public String toDebugString(){  String info="UPD_PERIOD: " + updatePeriod + "\nUPD_FREQ: "+ updateFrequency+ "\nUPD_BASE: "+ updateBase;  return info;}  }
class C{  public boolean validSystemNameConfig(String systemName){  return (true);}  }
class C{  public static JPopupButton createDrawingColorButton(DrawingEditor editor,AttributeKey<Color> attributeKey,java.util.List<ColorIcon> swatches,int columnCount,String labelKey,ResourceBundleUtil labels,@Nullable Map<AttributeKey,Object> defaultAttributes,Shape colorShape,java.util.List<Disposable> dsp){  final JPopupButton popupButton=new JPopupButton();  popupButton.setPopupAlpha(1f);  if (defaultAttributes == null) {    defaultAttributes=new HashMap<AttributeKey,Object>();  }  popupButton.setColumnCount(columnCount,false);  boolean hasNullColor=false;  for (  ColorIcon swatch : swatches) {    DrawingAttributeAction a;    HashMap<AttributeKey,Object> attributes=new HashMap<AttributeKey,Object>(defaultAttributes);    if (swatch != null) {      Color swatchColor=swatch.getColor();      attributes.put(attributeKey,swatchColor);      if (swatchColor == null || swatchColor.getAlpha() == 0) {        hasNullColor=true;      }      popupButton.add(a=new DrawingAttributeAction(editor,attributes,labels.getToolTipTextProperty(labelKey),swatch));      dsp.add(a);      a.putValue(Action.SHORT_DESCRIPTION,swatch.getName());      a.setUpdateEnabledState(false);    } else {      popupButton.add(new JPanel());    }  }  if (!hasNullColor) {    DrawingAttributeAction a;    HashMap<AttributeKey,Object> attributes=new HashMap<AttributeKey,Object>(defaultAttributes);    attributes.put(attributeKey,null);    popupButton.add(a=new DrawingAttributeAction(editor,attributes,labels.getToolTipTextProperty("attribute.color.noColor"),new ColorIcon(null,labels.getToolTipTextProperty("attribute.color.noColor"))));    dsp.add(a);    a.putValue(Action.SHORT_DESCRIPTION,labels.getToolTipTextProperty("attribute.color.noColor"));    a.setUpdateEnabledState(false);  }  ImageIcon chooserIcon=new ImageIcon(Images.createImage(ButtonFactory.class,"/org/jhotdraw/draw/action/images/attribute.color.colorChooser.png"));  DrawingColorChooserAction a;  popupButton.add(a=new DrawingColorChooserAction(editor,attributeKey,"color",chooserIcon,defaultAttributes));  dsp.add(a);  labels.configureToolBarButton(popupButton,labelKey);  a.putValue(Action.SHORT_DESCRIPTION,labels.getToolTipTextProperty("attribute.color.colorChooser"));  Icon icon=new DrawingColorIcon(editor,attributeKey,labels.getIconProperty(labelKey,ButtonFactory.class).getImage(),colorShape);  popupButton.setIcon(icon);  popupButton.setDisabledIcon(icon);  popupButton.setFocusable(false);  if (editor != null) {    dsp.add(new SelectionComponentRepainter(editor,popupButton));  }  return popupButton;}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  boolean validTreeLocation(){  int[] var1=new int[]{this.basePos[0],this.basePos[1],this.basePos[2]};  int[] var2=new int[]{this.basePos[0],this.basePos[1] + this.heightLimit - 1,this.basePos[2]};  Block var3=this.worldObj.getBlock(this.basePos[0],this.basePos[1] - 1,this.basePos[2]);  if (var3 != Blocks.grass && var3 != Blocks.dirt) {    return false;  } else {    int var4=this.checkBlockLine(var1,var2);    if (var4 == -1) {      return true;    } else     if (var4 < 6) {      return false;    } else {      this.heightLimit=var4;      return true;    }  }}  }
class C{  private static String[] selectFileCommand(File file){  String path=null;  try {    path=file.getCanonicalPath();  } catch (  IOException err) {    path=file.getAbsolutePath();  }  String[] command=new String[]{"osascript","-e","set unixPath to \"" + path + "\"","-e","set hfsPath to POSIX file unixPath","-e","tell application \"Finder\"","-e","activate","-e","select hfsPath","-e","end tell"};  return command;}  }
class C{  public static void runClassifier(Classifier classifier,String[] options){  try {    System.out.println(Evaluation.evaluateModel(classifier,options));  } catch (  Exception e) {    if (((e.getMessage() != null) && (e.getMessage().indexOf("General options") == -1)) || (e.getMessage() == null)) {      e.printStackTrace();    } else {      System.err.println(e.getMessage());    }  }}  }
class C{  public static ObjectifyFactory factory(){  return ObjectifyService.factory();}  }
class C{  public static double calcRadius(BallNode child1,BallNode child2,Instance pivot,DistanceFunction distanceFunction) throws Exception {  Instance p1=child1.getPivot(), p2=child2.getPivot();  double radius=child1.getRadius() + distanceFunction.distance(p1,p2) + child2.getRadius();  return radius / 2;}  }
class C{  public synchronized void addChannelsToFavorites(Set<String> channels){  for (  String channel : channels) {    addChannelToFavorites(channel);  }  settings.setSettingChanged(FAVORITES_SETTING);}  }
class C{  public List<Vertex> findAllLike(String filter,int pageSize,int page){  return findAllLike(filter);}  }
class C{  public void clearDirty(Address address){  dirty[address.address]=Integer.MIN_VALUE;}  }
class C{  public int read(In in) throws IOException {  Node n=tree;  while (n.left != null) {    int prob=(int)((long)MAX_PROBABILITY * n.right.frequency / n.frequency);    boolean goRight=in.readBit(prob);    n=goRight ? n.right : n.left;  }  return n.value;}  }
class C{  public static void showDialog(final JFrame parent,final ZyGraphViewSettings settings){  final CProximitySettingsDialog dialog=new CProximitySettingsDialog(parent,settings);  dialog.setVisible(true);}  }
class C{  @Override public CloseableImage decode(final EncodedImage encodedImage,final int length,final QualityInfo qualityInfo,final ImageDecodeOptions options){  ImageFormat imageFormat=encodedImage.getImageFormat();  if (imageFormat == null || imageFormat == ImageFormat.UNKNOWN) {    imageFormat=ImageFormatChecker.getImageFormat_WrapIOException(encodedImage.getInputStream());    encodedImage.setImageFormat(imageFormat);  }  if (mCustomDecoders != null) {    ImageDecoder decoder=mCustomDecoders.get(imageFormat);    if (decoder != null) {      return decoder.decode(encodedImage,length,qualityInfo,options);    }  }  return mDefaultDecoder.decode(encodedImage,length,qualityInfo,options);}  }
class C{  public vec3 sub(vec3 a,vec3 b){  this.m[0]=a.m[0] - b.m[0];  this.m[1]=a.m[1] - b.m[1];  this.m[2]=a.m[2] - b.m[2];  return this;}  }
class C{  public void notifyInTurns(final int diff,final TurnListener turnListener){  notifyAtTurn(currentTurn + diff + 1,turnListener);}  }
class C{  public Landmark addLandmark(LandmarkState state,boolean update){  Landmark landmark=null;switch (state.mapElementType) {case Figure:    FigureState fState=(FigureState)state;  landmark=new Figure(fState);break;case Placemark:PlacemarkState pState=(PlacemarkState)state;landmark=new Placemark(pState);break;case Billboard:ImageBoardState iState=(ImageBoardState)state;landmark=new ImageBoard(iState);break;case Path:case Plane:case Profile:case FieldCamera:case LineSet:case CartesianGrid:case RadialGrid:case Waypoint:case Marble:case Scale:break;}if (landmark != null) {Spatial spatial=(Spatial)landmark;attachChild(spatial);if (update) {spatial.updateGeometricState(0,true);landmark.update(Dert.getWorldView().getViewpointNode().getCamera());}}return (landmark);}  }
class C{  public void dontDisplayMetrics(List<String> metricsNotToDisplay){  for (  String s : metricsNotToDisplay) {    m_metricsToDisplay.remove(s.toLowerCase());  }}  }
class C{  private void defineDesktopPanes(UIDefaults d){  d.put("seaGlassDesktopPane",new ColorUIResource(0x556ba6));  String c=PAINTER_PREFIX + "DesktopPanePainter";  String p="DesktopPane";  d.put(p + "[Enabled].backgroundPainter",new LazyPainter(c,DesktopPanePainter.Which.BACKGROUND_ENABLED));  p="DesktopIcon";  c=PAINTER_PREFIX + "DesktopIconPainter";  d.put(p + ".contentMargins",new InsetsUIResource(0,6,5,4));  d.put(p + "[Enabled].backgroundPainter",new LazyPainter(c,DesktopIconPainter.Which.BACKGROUND_ENABLED));}  }
class C{  private void lastWill(){  Intent intent=new Intent();  intent.setClassName(advanced,"org.eclipse.paho.android.service.sample.LastWill");  advanced.startActivityForResult(intent,ActivityConstants.lastWill);}  }
class C{  public static String rotate_ID(String originalID){  StringBuffer sb=new StringBuffer(originalID.length());  for (int i=0; i < originalID.length(); ++i) {    char c=originalID.charAt(i);    if (c >= 'a' && c <= 'z') {      sb.append(random(1,'a','z',true,true));    } else     if (c >= 'A' && c <= 'Z') {      sb.append(random(1,'A','Z',true,true));    } else     if (c >= '0' && c <= '9') {      sb.append(random(1,'0','9',true,true));    } else {      sb.append(c);    }  }  return sb.toString();}  }
class C{  public static boolean isLegacyTokenUpgradeSupported(){  return isLegacyTokenUpgradeSupported;}  }
class C{  public Boolean isMultipleCoresPerSocketSupported(){  return multipleCoresPerSocketSupported;}  }
class C{  public int byteSize(){  return data.length;}  }
class C{  private static void buildMnemonic(final IInstruction instruction,final StringBuffer line,final List<CStyleRunData> styleRun){  final String mnemonic=instruction.getMnemonic();  styleRun.add(new CStyleRunData(line.length(),mnemonic.length(),ConfigManager.instance().getColorSettings().getMnemonicColor()));  line.append(Strings.padEnd(mnemonic,MINIMUM_MNEMONIC_SIZE,' '));}  }
class C{  public final void lineStrip4D(List<? extends Vec4D> points){  boolean isFilled=gfx.fill;  gfx.fill=false;  processVertices4D(points.iterator(),PConstants.POLYGON,false);  gfx.fill=isFilled;}  }
class C{  public static void read(InputStream source,final GeomGridField.GridDataType type,GeomGridField field){  try {    int width=0;    int height=0;    Scanner scanner=new Scanner(source);    scanner.useLocale(Locale.US);    scanner.next();    width=scanner.nextInt();    scanner.next();    height=scanner.nextInt();    double xllcorner=0.0;    double yllcorner=0.0;    double cellSize=0.0;    scanner.next();    xllcorner=scanner.nextDouble();    scanner.next();    yllcorner=scanner.nextDouble();    scanner.next();    cellSize=scanner.nextDouble();    if (scanner.hasNext("NODATA_value")) {      String nextLine=scanner.nextLine();      nextLine=scanner.nextLine();    }    AbstractGrid2D grid=null;switch (type) {case INTEGER:      grid=new IntGrid2D(width,height);    readIntegerBased(scanner,width,height,(IntGrid2D)grid);  break;case DOUBLE:grid=new DoubleGrid2D(width,height);readDoubleBased(scanner,width,height,(DoubleGrid2D)grid);break;}field.setGrid(grid);field.setPixelHeight(cellSize);field.setPixelWidth(cellSize);Envelope MBR=new Envelope(xllcorner,xllcorner + cellSize * width,yllcorner + cellSize * height,yllcorner);field.setMBR(MBR);scanner.close();} catch (IOException ex) {Logger.getLogger(ArcInfoASCGridImporter.class.getName()).log(Level.SEVERE,null,ex);throw new RuntimeException(ex);}}  }
class C{  public ActionForward executeAction(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  DynaValidatorForm oForm=(DynaValidatorForm)form;  String cFormulario=null;  Tasa oTasa=null;  try {    oTasa=PagoElectronicoManagerHelper.obtenerDatosTasa(request,oForm);    String cXMLDatos=PagoElectronicoManagerHelper.obtenerDocumentoPago(request,oForm);    cXMLDatos=PagoElectronicoManagerHelper.incluirInformacionCertificado(UserCertificateUtil.getUserData(request),cXMLDatos);    cFormulario=FormCreator.crearFormularioLiquidacion(oTasa,cXMLDatos,request);  } catch (  Exception e) {    logger.error(e.getMessage(),e);    request.setAttribute(ERROR_KEY,e.getMessage());    return mapping.findForward(Constantes.ERROR_FORWARD);  }  request.setAttribute(FORMULARIO_KEY,cFormulario);  if (ConfiguracionComun.usarPasarelaPagoExternaConRedireccion())   return mapping.findForward(Constantes.PASARELA_FORWARD);  return mapping.findForward(Constantes.SUCCESS_FORWARD);}  }
class C{  private void views(){  this.keySet=map.keySet();  this.collectionValues=map.values();  this.entrySet=map.entrySet();}  }
class C{  public void addGesture(String entryName,Gesture gesture){  if (entryName == null || entryName.length() == 0) {    return;  }  ArrayList<Gesture> gestures=mNamedGestures.get(entryName);  if (gestures == null) {    gestures=new ArrayList<Gesture>();    mNamedGestures.put(entryName,gestures);  }  gestures.add(gesture);  mClassifier.addInstance(Instance.createInstance(mSequenceType,mOrientationStyle,gesture,entryName));  mChanged=true;}  }
class C{  public void addEventListener3(IMultimediaStreamingSessionListener listener) throws RemoteException {  if (listener == null) {    throw new ServerApiIllegalArgumentException("listener must not be null!");  }  if (sLogger.isActivated()) {    sLogger.info("Add an event listener");  }  try {synchronized (mLock) {      mMultimediaStreamingSessionEventBroadcaster.addMultimediaStreamingEventListener(listener);    }  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  public String flush(long timeout) throws Exception {  TungstenProperties props=new TungstenProperties();  props.setString(OpenReplicatorParams.HEARTBEAT_NAME,"FLUSH");  String initScript=runtime.getReplicatorProperties().getString(ReplicatorConf.RESOURCE_JDBC_INIT_SCRIPT);  if (initScript != null)   props.setString(ReplicatorConf.RESOURCE_JDBC_INIT_SCRIPT,initScript);  String currentEventId=null;  Extractor head=pipeline.getHeadExtractor();  if (head instanceof ExtractorWrapper) {    RawExtractor rawExtractor=((ExtractorWrapper)head).getExtractor();    if (rawExtractor instanceof MySQLExtractor) {      heartbeat(props);      currentEventId=pipeline.getHeadExtractor().getCurrentResourceEventId();    } else     if (rawExtractor instanceof PlogExtractor) {      currentEventId=pipeline.getHeadExtractor().getCurrentResourceEventId();      heartbeat(props);    } else {      throw new ReplicatorException("Heartbeat is not supported for this extractor type: " + rawExtractor.getClass().getName());    }  } else {    throw new ReplicatorException("Heartbeat is not supported for this extractor type: " + head.getClass().getName());  }  Future<ReplDBMSHeader> expectedEvent=runtime.getPipeline().flush(currentEventId);  ReplDBMSHeader event=null;  try {    if (timeout <= 0)     event=expectedEvent.get(); else     event=expectedEvent.get(timeout,TimeUnit.SECONDS);  }  finally {    expectedEvent.cancel(false);  }  long seqno=event.getSeqno();  logger.info("SyncEvent-Flush: Flush complete.  Returning sequence number: " + seqno);  return new Long(seqno).toString();}  }
class C{  public Street(String value){  this();  setValue(value);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private static void collectAllInterfaces(final ClassNode node,final Set<ClassNode> out){  if (node == null)   return;  Set<ClassNode> allInterfaces=node.getAllInterfaces();  out.addAll(allInterfaces);  collectAllInterfaces(node.getSuperClass(),out);}  }
class C{  protected boolean commentLinesBefore(String content,int line){  int offset=m_RootElement.getElement(line).getStartOffset();  int startDelimiter=-1;  if (getMultiLineComment()) {    startDelimiter=lastIndexOf(content,getMultiLineCommentStart(),offset - 2);  }  if (startDelimiter < 0) {    return false;  }  int endDelimiter=indexOf(content,getMultiLineCommentEnd(),startDelimiter);  if (endDelimiter < offset & endDelimiter != -1) {    return false;  }  m_Self.setCharacterAttributes(startDelimiter,offset - startDelimiter + 1,DEFAULT_COMMENT,false);  return true;}  }
class C{  private List<ResolveInfo> findGlobalSearchActivities(){  Intent intent=new Intent(SearchManager.INTENT_ACTION_GLOBAL_SEARCH);  List<ResolveInfo> activities=queryIntentActivities(intent,PackageManager.MATCH_DEFAULT_ONLY);  if (activities != null && !activities.isEmpty()) {    Collections.sort(activities,GLOBAL_SEARCH_RANKER);  }  return activities;}  }
class C{  public static FSArray toFSArray(JCas jCas,FeatureStructure... fses){  if (fses.length == 0) {    return new FSArray(jCas,0);  } else {    FSArray array=new FSArray(jCas,fses.length);    int i=0;    for (    FeatureStructure fs : fses) {      array.set(i,fs);      i++;    }    return array;  }}  }
class C{  synchronized <K,V>void removeMap(TransactionMap<K,V> map){  maps.remove(map.mapId);  store.removeMap(map.map);}  }
class C{  private synchronized void cacheKey() throws Exception {  Configuration config=_coordinator.queryConfiguration(CONFIG_KIND,_encryptId);  if (config != null) {    readKey(config);  } else {    InterProcessLock lock=null;    try {      lock=_coordinator.getLock(CONFIG_KIND);      lock.acquire();      config=_coordinator.queryConfiguration(CONFIG_KIND,_encryptId);      if (config == null) {        _logger.warn("Encryption key not found, initializing it");        generateKey();      } else {        readKey(config);      }    }  finally {      if (lock != null) {        lock.release();      }    }  }}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN}) @Path("/{id}") public TaskResourceRep updateHost(@PathParam("id") URI id,HostUpdateParam updateParam,@QueryParam("validate_connection") @DefaultValue("false") final Boolean validateConnection,@QueryParam("update_exports") @DefaultValue("true") boolean updateExports){  Host host=queryObject(Host.class,id,true);  validateHostData(updateParam,host.getTenant(),host,validateConnection);  boolean hasPendingTasks=hostHasPendingTasks(id);  if (hasPendingTasks) {    throw APIException.badRequests.cannotUpdateHost("another operation is in progress for this host");  }  URI oldClusterURI=host.getCluster();  populateHostData(host,updateParam);  if (updateParam.getHostName() != null) {    ComputeSystemHelper.updateInitiatorHostName(_dbClient,host);  }  String taskId=UUID.randomUUID().toString();  ComputeSystemController controller=getController(ComputeSystemController.class,null);  if (updateParam.getCluster() != null) {    if (updateExports && !NullColumnValueGetter.isNullURI(oldClusterURI) && NullColumnValueGetter.isNullURI(host.getCluster())&& ComputeSystemHelper.isClusterInExport(_dbClient,oldClusterURI)) {      controller.removeHostsFromExport(Arrays.asList(host.getId()),oldClusterURI,false,updateParam.getVcenterDataCenter(),taskId);    } else     if (updateExports && NullColumnValueGetter.isNullURI(oldClusterURI) && !NullColumnValueGetter.isNullURI(host.getCluster())&& ComputeSystemHelper.isClusterInExport(_dbClient,host.getCluster())) {      controller.addHostsToExport(Arrays.asList(host.getId()),host.getCluster(),taskId,oldClusterURI,false);    } else     if (updateExports && !NullColumnValueGetter.isNullURI(oldClusterURI) && !NullColumnValueGetter.isNullURI(host.getCluster())&& !oldClusterURI.equals(host.getCluster())&& (ComputeSystemHelper.isClusterInExport(_dbClient,oldClusterURI) || ComputeSystemHelper.isClusterInExport(_dbClient,host.getCluster()))) {      controller.addHostsToExport(Arrays.asList(host.getId()),host.getCluster(),taskId,oldClusterURI,false);    } else {      ComputeSystemHelper.updateHostAndInitiatorClusterReferences(_dbClient,host.getCluster(),host.getId());    }  }  if (host.getComputeElement() != null && updateParam.getBootVolume() != null) {    controller.setHostSanBootTargets(host.getId(),updateParam.getBootVolume());  }  _dbClient.updateAndReindexObject(host);  auditOp(OperationTypeEnum.UPDATE_HOST,true,null,host.auditParameters());  return doDiscoverHost(host);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void initRawSwap(ArrayList<S2CellId> cellIds){  this.cellIds=new ArrayList<S2CellId>(cellIds);  cellIds.clear();}  }
class C{  private void awardDistanceAchievement(Player player,int achievementDistance,String type){  YamlManager config=plugin.getPluginConfig();  plugin.getAchievementDisplay().displayAchievement(player,type + achievementDistance);  plugin.getDb().registerAchievement(player,config.getString(type + achievementDistance + ".Name"),config.getString(type + achievementDistance + ".Message"));  plugin.getReward().checkConfig(player,type + achievementDistance);}  }
class C{  public CHideAction(){  super("Hide");}  }
class C{  public Creature(){  super();  setRPClass("creature");  put("type","creature");  put("title_type","enemy");  dropsItems=new ArrayList<DropItem>();  dropItemInstances=new ArrayList<Item>();  setAIProfiles(new HashMap<String,String>());  susceptibilities=new EnumMap<Nature,Double>(Nature.class);  updateModifiedAttributes();}  }
class C{  public BitcoinPacketHeader deserializeHeader(ByteBuffer in) throws ProtocolException, IOException {  return new BitcoinPacketHeader(in);}  }
class C{  public TMember findOwnedMember(final String name,final boolean writeAccess,final boolean staticAccess){  final NameAndAccess nameAndAccess=new NameAndAccess(name,writeAccess,staticAccess);  Map<NameAndAccess,? extends TMember> _orCreateOwnedMembersByNameAndAccess=this.getOrCreateOwnedMembersByNameAndAccess();  return _orCreateOwnedMembersByNameAndAccess.get(nameAndAccess);}  }
class C{  protected void onPrepareRequest(HttpUriRequest request) throws IOException {}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  static String parseMethodDesc_return(String s){  int j;  j=s.lastIndexOf(')');  if (j >= 0) {    return parseDesc(s.substring(j + 1),",");  }  return parseDesc(s,",");}  }
class C{  @Override public void destroy(){  Thread thread=Thread.currentThread();  ClassLoader oldLoader=thread.getContextClassLoader();  try {    thread.setContextClassLoader(this);    WeakStopListener stopListener=_stopListener;    _stopListener=null;    super.destroy();    thread.setContextClassLoader(oldLoader);    ClassLoader parent=getParent();    for (; parent != null; parent=parent.getParent()) {      if (parent instanceof EnvironmentClassLoader) {        EnvironmentClassLoader loader=(EnvironmentClassLoader)parent;        loader.removeListener(stopListener);      }    }  }  finally {    thread.setContextClassLoader(oldLoader);    _attributes=null;    _listeners=null;  }}  }
class C{  public void beginAccept3(WebRequest theRequest){  theRequest.addHeader("Accept","text/plain; q=0.5, text/html, text/html;level=1");}  }
class C{  void copyFrom(final WindowInfoImpl info){  myActive=info.myActive;  myAnchor=info.myAnchor;  myAutoHide=info.myAutoHide;  myFloatingBounds=info.myFloatingBounds == null ? null : (Rectangle)info.myFloatingBounds.clone();  myId=info.myId;  setTypeAndCheck(info.myType);  myInternalType=info.myInternalType;  myVisible=info.myVisible;  myWeight=info.myWeight;  mySideWeight=info.mySideWeight;  myOrder=info.myOrder;  mySplitMode=info.mySplitMode;  myContentUiType=info.myContentUiType;}  }
class C{  public void testPathExpressionNextMatchRecursive(){  GraphModel graph=new GraphModel();  GraphNode[] nodes=fillGraphModel(graph);  PathExpression pathExpression=createPathExpression(true,false,true);  Collection<GraphNode> output=pathExpression.nextMatch(graph,buildSingleSet(nodes[0]));  assertEquals(2,output.size());  assertGraphContainsElement(output,nodes,4);  assertGraphContainsElement(output,nodes,6);}  }
class C{  public void addFilter(String pattern){  patterns.add(pattern);}  }
class C{  public void auxConnectionOpened(IOFConnectionBackend connection){  log.debug("[{}] - Switch Handshake - unhandled aux connection event",getDpid());}  }
class C{  public CharSet complement(){  return new CharSet(doComplement());}  }
class C{  public void addType(String fullyQualifiedTypeName){  if (locked)   throw new IllegalStateException("locked");  fullyQualifiedTypeName=fullyQualifiedTypeName.replace("$",".");  int idx=fullyQualifiedTypeName.lastIndexOf('.');  if (idx == -1)   throw new IllegalArgumentException("Only fully qualified types are allowed (and stuff in the default package is not palatable to us either!)");  String unqualified=fullyQualifiedTypeName.substring(idx + 1);  if (unqualifiedToQualifiedMap == null)   throw new IllegalStateException("SingleType library");  unqualifiedToQualifiedMap.put(unqualified,fullyQualifiedTypeName);  unqualifiedToQualifiedMap.put(fullyQualifiedTypeName,fullyQualifiedTypeName);  for (  Map.Entry<String,String> e : LombokInternalAliasing.ALIASES.entrySet()) {    if (fullyQualifiedTypeName.equals(e.getValue()))     unqualifiedToQualifiedMap.put(e.getKey(),fullyQualifiedTypeName);  }}  }
class C{  private boolean doItemsFit(){  int itemPos=0;  int[] layout=mLayout;  int numRows=mLayoutNumRows;  for (int row=0; row < numRows; row++) {    int numItemsOnRow=layout[row];    if (numItemsOnRow == 1) {      itemPos++;      continue;    }    for (int itemsOnRowCounter=numItemsOnRow; itemsOnRowCounter > 0; itemsOnRowCounter--) {      View child=getChildAt(itemPos++);      LayoutParams lp=(LayoutParams)child.getLayoutParams();      if (lp.maxNumItemsOnRow < numItemsOnRow) {        return false;      }    }  }  return true;}  }
class C{  public boolean sameAs(RegionAttributes other){  if (!equal(this.cacheListeners,Arrays.asList(other.getCacheListeners()))) {    throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_CACHELISTENERS_ARE_NOT_THE_SAME.toLocalizedString());  }  if (!equal(this.entryIdleTimeout,other.getEntryIdleTimeout())) {    throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_ENTRYIDLETIMEOUT_IS_NOT_THE_SAME.toLocalizedString());  }  if (!equal(this.customEntryIdleTimeout,other.getCustomEntryIdleTimeout())) {    throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_CUSTOMENTRYIDLETIMEOUT_IS_NOT_THE_SAME.toLocalizedString());  }  if (!equal(this.entryTimeToLive,other.getEntryTimeToLive())) {    throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_ENTRYTIMETOLIVE_IS_NOT_THE_SAME.toLocalizedString());  }  if (!equal(this.customEntryTimeToLive,other.getCustomEntryTimeToLive())) {    throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_CUSTOMENTRYTIMETOLIVE_IS_NOT_THE_SAME.toLocalizedString());  }  if (!equal(this.partitionAttributes,other.getPartitionAttributes())) {    throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_PARTITIONATTRIBUTES_ARE_NOT_THE_SAME_0_1.toLocalizedString(new Object[]{this,other.getPartitionAttributes()}));  }  if (!equal(this.membershipAttributes,other.getMembershipAttributes())) {    throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_MEMBERSHIP_ATTRIBUTES_ARE_NOT_THE_SAME.toLocalizedString());  }  if (!equal(this.subscriptionAttributes,other.getSubscriptionAttributes())) {    throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_SUBSCRIPTION_ATTRIBUTES_ARE_NOT_THE_SAME.toLocalizedString());  }  if (!equal(this.evictionAttributes,other.getEvictionAttributes())) {    throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_EVICTION_ATTRIBUTES_ARE_NOT_THE_SAME_THIS_0_OTHER_1.toLocalizedString(new Object[]{this.evictionAttributes,other.getEvictionAttributes()}));  }  if (this.diskStoreName == null) {    if (!equal(this.diskWriteAttributes,other.getDiskWriteAttributes())) {      throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_DISTWRITEATTRIBUTES_ARE_NOT_THE_SAME.toLocalizedString());    }    if (!equal(this.diskDirs,other.getDiskDirs())) {      throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_DISK_DIRS_ARE_NOT_THE_SAME.toLocalizedString());    }    if (!equal(this.diskSizes,other.getDiskDirSizes())) {      throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_DISK_DIR_SIZES_ARE_NOT_THE_SAME.toLocalizedString());    }  }  if (!equal(this.diskStoreName,other.getDiskStoreName())) {    throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_DISKSTORE_IS_NOT_THE_SAME_THIS_0_OTHER_1.toLocalizedString(new Object[]{this.diskStoreName,other.getDiskStoreName()}));  }  if (this.isDiskSynchronous != other.isDiskSynchronous()) {    throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_DISKSYNCHRONOUS_IS_NOT_THE_SAME.toLocalizedString());  }  if (this.dataPolicy != other.getDataPolicy()) {    throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_DATA_POLICIES_ARE_NOT_THE_SAME_THIS_0_OTHER_1.toLocalizedString(new Object[]{this.getDataPolicy(),other.getDataPolicy()}));  }  if (this.earlyAck != other.getEarlyAck()) {    throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_EARLY_ACK_IS_NOT_THE_SAME.toLocalizedString());  }  if (this.enableSubscriptionConflation != other.getEnableSubscriptionConflation()) {    throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_ENABLE_SUBSCRIPTION_CONFLATION_IS_NOT_THE_SAME.toLocalizedString());  }  if (this.enableAsyncConflation != other.getEnableAsyncConflation()) {    throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_ENABLE_ASYNC_CONFLATION_IS_NOT_THE_SAME.toLocalizedString());  }  if (this.initialCapacity != other.getInitialCapacity()) {    throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_INITIAL_CAPACITY_IS_NOT_THE_SAME.toLocalizedString());  }  if (!equal(this.keyConstraint,other.getKeyConstraint())) {    throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_KEY_CONSTRAINTS_ARE_NOT_THE_SAME.toLocalizedString());  }  if (!equal(this.valueConstraint,other.getValueConstraint())) {    throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_VALUE_CONSTRAINTS_ARE_NOT_THE_SAME.toLocalizedString());  }  if (this.loadFactor != other.getLoadFactor()) {    throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_LOAD_FACTORS_ARE_NOT_THE_SAME.toLocalizedString());  }  if (!equal(this.regionIdleTimeout,other.getRegionIdleTimeout())) {    throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_REGION_IDLE_TIMEOUT_IS_NOT_THE_SAME.toLocalizedString());  }  if (!equal(this.scope,this.getScope())) {    throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_SCOPE_IS_NOT_THE_SAME.toLocalizedString());  }  if (this.statisticsEnabled != other.getStatisticsEnabled()) {    throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_STATISTICS_ENABLED_IS_NOT_THE_SAME_THIS_0_OTHER_1.toLocalizedString(new Object[]{Boolean.valueOf(this.statisticsEnabled),Boolean.valueOf(other.getStatisticsEnabled())}));  }  if (this.ignoreJTA != other.getIgnoreJTA()) {    throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_IGNORE_JTA_IS_NOT_THE_SAME.toLocalizedString());  }  if (this.concurrencyLevel != other.getConcurrencyLevel()) {    throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_CONCURRENCYLEVEL_IS_NOT_THE_SAME.toLocalizedString());  }  if (this.concurrencyChecksEnabled != other.getConcurrencyChecksEnabled()) {    throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_CONCURRENCYCHECKSENABLED_IS_NOT_THE_SAME.toLocalizedString());  }  if (this.indexMaintenanceSynchronous != other.getIndexMaintenanceSynchronous()) {    throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_INDEX_MAINTENANCE_SYNCHRONOUS_IS_NOT_THE_SAME.toLocalizedString());  }  if (!equal(this.poolName,other.getPoolName())) {    throw new RuntimeException("poolName is not the same: " + this.poolName + " != "+ other.getPoolName());  }  if (!equal(this.cacheLoader,other.getCacheLoader())) {    throw new RuntimeException("CacheLoader are not the same");  }  if (!equal(this.cacheWriter,other.getCacheWriter())) {    throw new RuntimeException("CacheWriter is not the same");  }  if (this.multicastEnabled != other.getMulticastEnabled()) {    String s="MulticastEnabled is not the same: " + this.multicastEnabled + "!="+ other.getMulticastEnabled();    throw new RuntimeException(s);  }  if (this.cloningEnabled != other.getCloningEnabled()) {    throw new RuntimeException(LocalizedStrings.RegionAttributesCreation__CLONING_ENABLE_IS_NOT_THE_SAME_THIS_0_OTHER_1.toLocalizedString(new Object[]{Boolean.valueOf(this.cloningEnabled),Boolean.valueOf(other.getCloningEnabled())}));  }  if (!equal(this.compressor,other.getCompressor())) {    throw new RuntimeException("Compressors are not the same.");  }  if (this.offHeap != other.getOffHeap()) {    throw new RuntimeException(LocalizedStrings.RegionAttributesCreation_ENABLE_OFF_HEAP_MEMORY_IS_NOT_THE_SAME.toLocalizedString());  }  return true;}  }
class C{  public final double doOperation() throws OperatorFailedException {  final double scale=(scaleFactor + (MathUtils.nextDouble() * ((1.0 / scaleFactor) - scaleFactor)));  List<NodeRef> listNode=new ArrayList<NodeRef>();  double logq=0;  if (scaleAll) {  } else {    int r=MathUtils.nextInt(tree.getInternalNodeCount());    NodeRef node=tree.getNode(r);    double oldValue, newValue;    oldValue=tree.getNodeHeight(node);    newValue=oldValue * scale;    tree.setNodeHeight(node,newValue);    logq=getJacobian(node);  }  logq=(listNode.size() - 2) * Math.log(scale);  return logq;}  }
class C{  private byte[] calculateCMSKeyChecksum(byte[] key){  byte[] result=new byte[8];  sha1.update(key,0,key.length);  sha1.doFinal(digest,0);  System.arraycopy(digest,0,result,0,8);  return result;}  }
class C{  public StaticImportResolver(){}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:33.849 -0500",hash_original_method="3C05A9E8858284557710D8ECCDD07B35",hash_generated_method="EEEC1B7912F3169DDD870925BA9EB596") private void writeHex(int i) throws IOException {  int cursor=8;  do {    hex[--cursor]=HEX_DIGITS[i & 0xf];  } while ((i>>>=4) != 0);  socketOut.write(hex,cursor,hex.length - cursor);}  }
class C{  @Override public boolean shouldPerform(OptOptions options){  return true;}  }
class C{  @SuppressWarnings("unchecked") private ObservableMap<Integer,Track> parseTracksFromJsonFile(File tracksFile){  ObservableMap<Integer,Track> tracksMap;  int totalTracks;  step=0;  try {    JsonReader.assignInstantiator(ObservableMapWrapper.class,new ObservableMapWrapperCreator());    tracksMap=(ObservableMap<Integer,Track>)parseJsonFile(tracksFile);    totalTracks=tracksMap.size();    tracksMap.values().parallelStream().forEach(null);    LOG.info("Loaded tracks from {}",tracksFile);  } catch (  IOException exception) {    tracksMap=FXCollections.observableHashMap();    LOG.error("Error loading track library: {}",exception.getMessage(),exception);  }  return tracksMap;}  }
class C{  public boolean isClientLevelOnly(){  return getShareType().equals(SHARETYPE_ClientAllShared);}  }
class C{  public int tally(){  return count;}  }
class C{  private void sendTrapMessage(SnmpMessage msg) throws IOException, SnmpTooBigException {  byte[] buffer=new byte[bufferSize];  DatagramPacket packet=new DatagramPacket(buffer,buffer.length);  int encodingLength=msg.encodeMessage(buffer);  packet.setLength(encodingLength);  packet.setAddress(msg.address);  packet.setPort(msg.port);  if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {    SNMP_ADAPTOR_LOGGER.logp(Level.FINER,dbgTag,"sendTrapMessage","sending trap to " + msg.address + ":"+ msg.port);  }  trapSocket.send(packet);  if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {    SNMP_ADAPTOR_LOGGER.logp(Level.FINER,dbgTag,"sendTrapMessage","sent to " + msg.address + ":"+ msg.port);  }  snmpOutTraps++;  snmpOutPkts++;}  }
class C{  public WAllocation(){  Env.setContext(Env.getCtx(),form.getWindowNo(),"IsSOTrx","Y");  try {    super.dynInit();    dynInit();    zkInit();    calculate();    southPanel.appendChild(new Separator());    southPanel.appendChild(statusBar);  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }}  }
class C{  private void attemptLogin(){  if (mAuthTask != null) {    return;  }  mHostView.setError(null);  mEmailView.setError(null);  mPasswordView.setError(null);  String host=mHostView.getEditText().getText().toString();  host=formatUrl(host);  String email=mEmailView.getEditText().getText().toString();  String password=mPasswordView.getEditText().getText().toString();  boolean cancel=false;  View focusView=null;  if (TextUtils.isEmpty(host)) {    mHostView.setError(getString(R.string.error_field_required));    cancel=true;  } else   if (!isUrlValid(host)) {    mHostView.setError(getString(R.string.error_invalid_url));    cancel=true;  }  if (TextUtils.isEmpty(password)) {    mPasswordView.setError(getString(R.string.error_incorrect_password));    focusView=mPasswordView;    cancel=true;  }  if (TextUtils.isEmpty(email)) {    mEmailView.setError(getString(R.string.error_field_required));    focusView=mEmailView;    cancel=true;  } else   if (!isEmailValid(email)) {    mEmailView.setError(getString(R.string.error_invalid_email));    focusView=mEmailView;    cancel=true;  }  if (cancel) {    if (focusView != null) {      focusView.requestFocus();    }  } else {    showProgress(true);    final String hash=Base64.encodeToString((email + ":" + password).getBytes(),Base64.NO_WRAP);    HostPreferences.saveSharedSetting(this,"host",host);    HostPreferences.saveSharedSetting(this,"hash",hash);    HostPreferences.saveSharedSetting(this,"email",email);    mAuthTask=new UserLoginTask(hash);    mAuthTask.execute(host + "/api/v1/notebooks");  }}  }
class C{  public String convertModuleFilterTypeToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  public Bundler putDoubleArray(String key,double[] value){  bundle.putDoubleArray(key,value);  return this;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer();  result.append(" (name: ");  result.append(name);  result.append(" type: ");  result.append(getType());  result.append(')');  return result.toString();}  }
class C{  public void showAnUnusualMap(int mapIndex,int bytesPerMap){  VM.sysWrite("unusualMap with index = ",mapIndex);  VM.sysWrite("   Map bytes =  ");  for (int i=0; i < bytesPerMap; i++) {    VM.sysWrite(unusualReferenceMaps[mapIndex + i]);    VM.sysWrite("   ");  }  VM.sysWrite("   ");}  }
class C{  public boolean isActive(){  return super.get().booleanValue();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:26.714 -0500",hash_original_method="6E6895DF0C38F7FD4A1856B0BE65A90D",hash_generated_method="853C9A1985467115793F13C6AA0E5867") public Scanner reset(){  delimiter=DEFAULT_DELIMITER;  locale=Locale.getDefault();  integerRadix=10;  return this;}  }
class C{  public static Boolean isAdBlockActive(){  try {    BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(new FileInputStream("/etc/hosts")));    String currentLine;    while ((currentLine=bufferedReader.readLine()) != null) {      if (currentLine.toLowerCase().contains("admob"))       return true;    }  } catch (  IOException io) {    io.printStackTrace();  }  return false;}  }
class C{  public ConfiguredGuacamoleSocket(GuacamoleSocket socket,GuacamoleConfiguration config) throws GuacamoleException {  this(socket,config,new GuacamoleClientInformation());}  }
class C{  public GF2nPolynomialElement invertEEA() throws ArithmeticException {  if (isZero()) {    throw new ArithmeticException();  }  GF2Polynomial b=new GF2Polynomial(mDegree + 32,"ONE");  b.reduceN();  GF2Polynomial c=new GF2Polynomial(mDegree + 32);  c.reduceN();  GF2Polynomial u=getGF2Polynomial();  GF2Polynomial v=mField.getFieldPolynomial();  GF2Polynomial h;  int j;  u.reduceN();  while (!u.isOne()) {    u.reduceN();    v.reduceN();    j=u.getLength() - v.getLength();    if (j < 0) {      h=u;      u=v;      v=h;      h=b;      b=c;      c=h;      j=-j;      c.reduceN();    }    u.shiftLeftAddThis(v,j);    b.shiftLeftAddThis(c,j);  }  b.reduceN();  return new GF2nPolynomialElement((GF2nPolynomialField)mField,b);}  }
class C{  public static boolean hasVaryAll(Response response){  return hasVaryAll(response.headers());}  }
class C{  public static char[] encode(byte[] in){  return encode(in,0,in.length);}  }
class C{  public boolean isInterrupted(){  return interrupted;}  }
class C{  public static boolean isComponentClass(String name){  return CLASS_NAMES.contains(name);}  }
class C{  protected void beginDrawing(DrawContext dc){  GL2 gl=dc.getGL().getGL2();  int attrMask=GL2.GL_DEPTH_BUFFER_BIT | GL2.GL_TRANSFORM_BIT | GL2.GL_VIEWPORT_BIT| GL2.GL_CURRENT_BIT| GL2.GL_COLOR_BUFFER_BIT| GL2.GL_DEPTH_BUFFER_BIT| GL2.GL_ENABLE_BIT;  this.BEogsh.pushAttrib(gl,attrMask);  if (!dc.isPickingMode()) {    gl.glEnable(GL.GL_BLEND);    OGLUtil.applyBlending(gl,false);  }  gl.glDisable(GL.GL_DEPTH_TEST);  gl.glDepthMask(false);  this.BEogsh.pushProjectionIdentity(gl);  gl.glOrtho(0d,dc.getView().getViewport().width,0d,dc.getView().getViewport().height,-1d,1d);  this.BEogsh.pushModelviewIdentity(gl);}  }
class C{  public static String removeAll(String source,char toRemove){  int toRemoveIndex=source.indexOf(toRemove);  if (toRemoveIndex != -1) {    StringBuilder result=new StringBuilder(source.length());    int sourceIndex=0;    while (toRemoveIndex != -1) {      result.append(source.substring(sourceIndex,toRemoveIndex));      sourceIndex=toRemoveIndex + 1;      toRemoveIndex=source.indexOf(toRemove,sourceIndex);      if (toRemoveIndex == -1) {        result.append(source.substring(sourceIndex,source.length()));      }    }    return result.toString();  } else {    return source;  }}  }
class C{  public ExecutionFlowItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public static CurrencyValue parse(String externalVal,String defaultCurrency){  if (externalVal == null) {    return null;  }  String amount=externalVal;  String code=defaultCurrency;  if (externalVal.contains(",")) {    String[] amountAndCode=externalVal.split(",");    amount=amountAndCode[0];    code=amountAndCode[1];  }  if (amount.equals("*")) {    return null;  }  Currency currency=CurrencyField.getCurrency(code);  if (currency == null) {    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Currency code not supported by this JVM: " + code);  }  try {    double value=Double.parseDouble(amount);    long currencyValue=Math.round(value * Math.pow(10.0,currency.getDefaultFractionDigits()));    return new CurrencyValue(currencyValue,code);  } catch (  NumberFormatException e) {    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,e);  }}  }
class C{  private UserNamespaceAuthorizationEntity createUserNamespaceAuthorizationEntity(String userId,NamespaceEntity namespaceEntity,List<NamespacePermissionEnum> namespacePermissions){  UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity=new UserNamespaceAuthorizationEntity();  userNamespaceAuthorizationEntity.setUserId(userId);  userNamespaceAuthorizationEntity.setNamespace(namespaceEntity);  updateNamespacePermissions(userNamespaceAuthorizationEntity,namespacePermissions);  return userNamespaceAuthorizationDao.saveAndRefresh(userNamespaceAuthorizationEntity);}  }
class C{  public TechnicalServiceActiveException(String message){  super(message);}  }
class C{  public void mouseDragged(MouseEvent e){  getHandler().mouseDragged(e);}  }
class C{  public Boolean isDvPortGroupOperationSupported(){  return dvPortGroupOperationSupported;}  }
class C{  public Properties addPrefix(Properties props){  Properties result=new Properties();  for (  String name : props.stringPropertyNames()) {    String val=props.getProperty(name);    name=addPrefix(name);    result.setProperty(name,val);  }  return result;}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public static void createAndAddLane11(LanesToLinkAssignment11 l2l,LaneDefinitionsFactory11 factory,Id<Lane> laneId,double length,double noLanes,Id<Link>... toLinkIds){  LaneData11 lane=factory.createLane(laneId);  for (  Id<Link> toLinkId : toLinkIds) {    lane.addToLinkId(toLinkId);  }  lane.setStartsAtMeterFromLinkEnd(length);  lane.setNumberOfRepresentedLanes(noLanes);  l2l.addLane(lane);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static boolean isRealNumber(final Number n){  return n instanceof Double || n instanceof Float;}  }
class C{  public static float max(float[] array){  if (array == null) {    throw new IllegalArgumentException("The Array must not be null");  } else   if (array.length == 0) {    throw new IllegalArgumentException("Array cannot be empty.");  }  float max=array[0];  for (int j=1; j < array.length; j++) {    if (Float.isNaN(array[j])) {      return Float.NaN;    }    if (array[j] > max) {      max=array[j];    }  }  return max;}  }
class C{  public static <A>StreamableTValue<A> of(final AnyMValue<Streamable<A>> monads){  return new StreamableTValue<>(monads);}  }
class C{  private MemoryModuleParser(){}  }
class C{  private void requestCameraPermissions(){  if (shouldShowRationale()) {    PermissionConfirmationDialog.newInstance().show(getChildFragmentManager(),"dialog");  } else {    FragmentCompat.requestPermissions(this,CAMERA_PERMISSIONS,REQUEST_CAMERA_PERMISSIONS);  }}  }
class C{  protected int inBorder(int x,int y){  Border b=getBorder();  if (b == null) {    return UNDEF;  }  Insets i=b.getBorderInsets(this);  if (x <= i.left) {    return DOCK_WEST;  }  if (x >= getWidth() - i.right) {    return DOCK_EAST;  }  if (y <= i.top) {    return DOCK_NORTH;  }  if (y >= getHeight() - i.bottom) {    return DOCK_SOUTH;  }  return UNDEF;}  }
class C{  public boolean hasPrimaryChild(IgfsPath path){  return dualParentsWithPrimaryChildren.contains(path);}  }
class C{  public static final OCSPResp fromBasicToResp(final byte[] basicOCSPResp){  final OCSPResponseStatus responseStatus=new OCSPResponseStatus(OCSPResponseStatus.SUCCESSFUL);  final DEROctetString derBasicOCSPResp=new DEROctetString(basicOCSPResp);  final ResponseBytes responseBytes=new ResponseBytes(OCSPObjectIdentifiers.id_pkix_ocsp_basic,derBasicOCSPResp);  final OCSPResponse ocspResponse=new OCSPResponse(responseStatus,responseBytes);  final OCSPResp ocspResp=new OCSPResp(ocspResponse);  return ocspResp;}  }
class C{  public boolean pointOnSurface(final Vector v){  return pointOnSurface(v.x,v.y,v.z);}  }
class C{  public void makeDot2Png(String dotfile){  String cmd="perl " + _home + "/resources/scripts/convert_this_dot2png.pl "+ _output_directory+ " "+ dotfile;  String command_result=Util.executeCommand(cmd);}  }
class C{  public int numParameters(){  return info[0] & 0xff;}  }
class C{  public void addDataSources(final int numDataSources){  for (int i=0; i < numDataSources; i++) {    addDataSource();  }}  }
class C{  public MutualInfoFS(ClassificationDataSet dataSet,int featureCount,NumericalHandeling numericHandling){  this(featureCount,numericHandling);}  }
class C{  public void incrementAll(Collection<? extends E> collection,double count){  for (  E key : collection) {    incrementCount(key,count);  }}  }
class C{  @Override public void next(){  if (!isDone()) {    index++;  }}  }
class C{  boolean fullScroll(int direction){  boolean moved=false;  if (direction == FOCUS_UP) {    if (mSelectedPosition != 0) {      int position=lookForSelectablePosition(0,true);      if (position >= 0) {        mLayoutMode=LAYOUT_FORCE_LEFT;        setSelectionInt(position);        invokeOnItemScrollListener();      }      moved=true;    }  } else   if (direction == FOCUS_DOWN) {    if (mSelectedPosition < mItemCount - 1) {      int position=lookForSelectablePosition(mItemCount - 1,true);      if (position >= 0) {        mLayoutMode=LAYOUT_FORCE_RIGHT;        setSelectionInt(position);        invokeOnItemScrollListener();      }      moved=true;    }  }  if (moved && !awakenScrollBars()) {    awakenScrollBars();    invalidate();  }  return moved;}  }
class C{  public void testLocalsAverageCorrectly(TransferEntropyCalculatorMultiVariate teCalc,int dimensions,int timeSteps,int k) throws Exception {  teCalc.initialise(k,dimensions,dimensions);  RandomGenerator rg=new RandomGenerator();  double[][] sourceData=rg.generateNormalData(timeSteps,dimensions,0,1);  double[][] destData=rg.generateNormalData(timeSteps,dimensions,0,1);  teCalc.setObservations(sourceData,destData);  double te=teCalc.computeAverageLocalOfObservations();  double[] teLocal=teCalc.computeLocalOfPreviousObservations();  System.out.printf("Average was %.5f\n",te);  assertEquals(te,MatrixUtils.mean(teLocal,k,timeSteps - k),0.00001);}  }
class C{  public ServerOnNetwork clone(){  ServerOnNetwork result=new ServerOnNetwork();  result.RecordId=RecordId;  result.ServerName=ServerName;  result.DiscoveryUrl=DiscoveryUrl;  result.ServerCapabilities=ServerCapabilities == null ? null : ServerCapabilities.clone();  return result;}  }
class C{  @Override public String toString(){  final StringBuilder sbuf=new StringBuilder();  sbuf.append("FixedPath[");  sbuf.append(nodes);  sbuf.append("@<");  sbuf.append(pos);  sbuf.append(">]");  return sbuf.toString();}  }
class C{  @Override public synchronized void remove(String key){  boolean deleted=getFileForKey(key).delete();  removeEntry(key);  if (!deleted) {    VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",key,getFilenameForKey(key));  }}  }
class C{  protected Element findLastTable(Node node){  Node tableNode=node;  while (tableNode != null) {    if (tableNode.getNodeType() == Node.NodeType.ELEMENT) {      String tableNodeName=tableNode.getNodeName().toLowerCase();      if (tableNodeName.equals("table")) {        break;      }    }    tableNode=tableNode.getParentNode();  }  return (Element)tableNode;}  }
class C{  public static final BigInteger decodeBigIntegerFromElement(Element element) throws Base64DecodingException {  return new BigInteger(1,Base64.decode(element));}  }
class C{  public DefaultKeyedValueDataset(Comparable key,Number value){  this(new DefaultKeyedValue(key,value));}  }
class C{  public void logCloseIn(long streamId,long userTime,long readTime,long total){  addEntry(new Entry(TYPE_CLOSE_IN,null,null,streamId,null,null,null,null,null,null,null,null,null,null,userTime,readTime,total,null,null,null));}  }
class C{  private static int CallObjectMethodA(JNIEnvironment env,int objJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallObjectMethodA  \n");  Object returnObj=JNIGenericHelpers.callMethodJValuePtr(env,objJREF,methodID,argAddress,null,false);  return env.pushJNIRef(returnObj);}  }
class C{  public static void marginRight(Node no,double right){  AnchorPane.setRightAnchor(no,right);}  }
class C{  public static void main(String[] args){  JFrame frame=new JFrame(InternalFrameDemo.class.getAnnotation(DemoProperties.class).value());  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  frame.getContentPane().add(new InternalFrameDemo());  frame.setPreferredSize(new Dimension(800,600));  frame.pack();  frame.setLocationRelativeTo(null);  frame.setVisible(true);}  }
class C{  public OutputLimitClause afterNumberOfEvents(Integer afterNumberOfEvents){  this.afterNumberOfEvents=afterNumberOfEvents;  return this;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void stubRibotServiceGetVenues(Observable<List<Venue>> observable){  doReturn(observable).when(mMockRibotsService).getVenues(anyString());}  }
class C{  @RequestMapping("/home") public ModelAndView home(HttpServletRequest request,@RequestParam Map<String,String> params){  ModelAndView mav=createView("index");  setupView(mav,false);  if (userEntityService.isAuthenticated()) {    SolrQueryResult solrQueryResult=solrIndex.query(params);    mav.addObject("solrQuery",solrQueryResult);    mav.addObject("urlService",urlService);    mav.addObject("topFive",tableEntityService.getTopFiveTables());    mav.addObject("activities",activityEntityService.getActivities());    mav.addObject("admin",userEntityService.isAdmin());    mav.addObject("favs",userEntityService.getFavourites());    mav.addObject("util",htmlUtil);    mav.addObject("userMgmnt",config.withUserManagement());    if (userEntityService.getUser().isAdmin()) {      mav.addObject("users",userEntityService.getAllUser());      mav.addObject("taxonomies",taxonomyService.getTaxonomies());    }  }  return mav;}  }
class C{  public void appendTextChild(String str){}  }
class C{  protected void updateLookAndFeelFonts(final java.awt.Font awtFont){  assert awtFont != null;  assert EventQueue.isDispatchThread();  FontUIResource fontResource=new FontUIResource(awtFont);  UIManager.put("Button.font",fontResource);  UIManager.put("CheckBox.font",fontResource);  UIManager.put("ComboBox.font",fontResource);  UIManager.put("EditorPane.font",fontResource);  UIManager.put("Label.font",fontResource);  UIManager.put("List.font",fontResource);  UIManager.put("Panel.font",fontResource);  UIManager.put("ProgressBar.font",fontResource);  UIManager.put("RadioButton.font",fontResource);  UIManager.put("ScrollPane.font",fontResource);  UIManager.put("TabbedPane.font",fontResource);  UIManager.put("Table.font",fontResource);  UIManager.put("TableHeader.font",fontResource);  UIManager.put("TextField.font",fontResource);  UIManager.put("TextPane.font",fontResource);  UIManager.put("TitledBorder.font",fontResource);  UIManager.put("ToggleButton.font",fontResource);  UIManager.put("TreeFont.font",fontResource);  UIManager.put("ViewportFont.font",fontResource);}  }
class C{  public CoordinateArrayFilter(int size){  pts=new Coordinate[size];}  }
class C{  public BabyDragon(final Player owner){  super();  setOwner(owner);  setUp();  setRPClass("baby_dragon");  put("type","baby_dragon");  if (owner != null) {    owner.getZone().add(this);    owner.setPet(this);  }  update();}  }
class C{  private static Object compressNone(DataType changedDataType,double[] value){  int i=0;switch (changedDataType) {case DATA_BYTE:    byte[] result=new byte[value.length];  for (  double a : value) {    result[i]=(byte)a;    i++;  }return result;case DATA_SHORT:short[] shortResult=new short[value.length];for (double a : value) {shortResult[i]=(short)a;i++;}return shortResult;case DATA_INT:int[] intResult=new int[value.length];for (double a : value) {intResult[i]=(int)a;i++;}return intResult;case DATA_LONG:case DATA_BIGINT:long[] longResult=new long[value.length];for (double a : value) {longResult[i]=(long)a;i++;}return longResult;case DATA_FLOAT:float[] floatResult=new float[value.length];for (double a : value) {floatResult[i]=(float)a;i++;}return floatResult;default :return value;}}  }
class C{  public SuspendThreadReply(final int packetId,final int errorCode,final long tid){  super(packetId,errorCode);  threadId=tid;}  }
class C{  public boolean isComposite(){  return false;}  }
class C{  public boolean isSetUrl(){  return this.url != null;}  }
class C{  public Plan ifStateMatches(Object state){  if (this.state.equals(state)) {    return this.plan;  } else {    return null;  }}  }
class C{  public static String toLowerCase(String string){  boolean changed=false;  char[] chars=string.toCharArray();  for (int i=0; i != chars.length; i++) {    char ch=chars[i];    if ('A' <= ch && 'Z' >= ch) {      changed=true;      chars[i]=(char)(ch - 'A' + 'a');    }  }  if (changed) {    return new String(chars);  }  return string;}  }
class C{  private void createNotice(MProduct product,String msg){  String productValue=product != null ? product.getValue() : "-";  addLog("WARNING: Product " + productValue + ": "+ msg);}  }
class C{  public Object from(){  return from;}  }
class C{  public DefaultConversation(){}  }
class C{  public void initImpl(){  _logHandlerConfig.init();  _loggerConfig.init();}  }
class C{  private void processMemoryScan(final ScannerIOMetadata metadata){  if (!isError && (metadata instanceof TwainIOMetadata)) {    try {      TwainIOMetadata twaindata=(TwainIOMetadata)metadata;      TwainTransfer.MemoryTransfer.Info info=twaindata.getMemory();      byte[] twainbuf=info.getBuffer();      int width=info.getWidth();      int height=info.getHeight();      int bpr=info.getBytesPerRow();      ImageData imageData=new ImageData(width,height,bpr,twainbuf);      if (generationMode == ScanModeConstants.SCAN_MODE_MEMORY_SERIALIZED) {        saveMemoryBlockSerialized(imageData,new File(path,prefix + "-serialize" + memoryBlockTotal+ ".data"));      } else       if (generationMode == ScanModeConstants.SCAN_MODE_MEMORY_JPG_BLOCKS) {        saveMemoryBlockJPG(imageData,new File(path,prefix + "-block" + memoryBlockTotal+ ".jpg"),(float)1.0);      }      imageData=null;      memoryHeight+=height;      memoryWidth=width;      memoryBlockTotal++;      if (metadata.isState(TwainConstants.STATE_TRANSFERRING)) {        if (generationMode == ScanModeConstants.SCAN_MODE_MEMORY_SERIALIZED) {          composePageSerialized(new File(path,prefix + "-page" + numPage+ ".png"));        } else         if (generationMode == ScanModeConstants.SCAN_MODE_MEMORY_JPG_BLOCKS) {          composePageJPG(new File(path,prefix + "-page" + numPage+ ".png"));        }        memoryBlockProcessed=memoryBlockTotal;        memoryHeight=0;        memoryRow=0;      }    } catch (    Exception e) {      e.printStackTrace();      endProcess(true,false);    }  }}  }
class C{  public void registerUserAssociation(Association assoc) throws AssociationAlreadyRegisteredException, RegisterFailedException {  if (assoc == null) {    throw new IllegalArgumentException("The specified association is null");  }  try {    appAssocWriter.checkAssociationValidForRegistration(assoc);  } catch (  IllegalArgumentException e) {    throw e;  }  if (appAssocWriter.isAssociationExist(assoc,AppAssociationWriter.USER_LEVEL)) {    throw new AssociationAlreadyRegisteredException("Assocation already exists!");  }  appAssocWriter.registerAssociation(assoc,AppAssociationWriter.USER_LEVEL);}  }
class C{  public static void launchReplay(final Path replayFile){  final Path sc2LauncherFile=Env.APP_SETTINGS.get(hu.scelight.service.settings.Settings.SC2_INSTALL_FOLDER).resolve(Env.OS == OpSys.OS_X ? "StarCraft II.app/Contents/MacOS/StarCraft II" : "Support/SC2Switcher.exe");  launchExternalApp(sc2LauncherFile,new String[]{sc2LauncherFile.toAbsolutePath().toString(),replayFile.toAbsolutePath().toString()}," ","Is your StarCraft II install folder setting correct?",SettingsGui.createSettingLink(Settings.NODE_SC2_INSTALLATION));}  }
class C{  static Class of(String name){  return new ClassImpl(name);}  }
class C{  public OMBitmap(double lt,double ln,int offset_x1,int offset_y1,int w,int h,byte[] bytes){  super(RENDERTYPE_OFFSET,LINETYPE_UNKNOWN,DECLUTTERTYPE_NONE);  lat=lt;  lon=ln;  x=offset_x1;  y=offset_y1;  width=w;  height=h;  bits=bytes;}  }
class C{  public void emitInvokespecial(int meth,Type mtype){  int argsize=width(mtype.getParameterTypes());  emitop(invokespecial);  if (!alive)   return;  emit2(meth);  Symbol sym=(Symbol)pool.pool[meth];  state.pop(argsize);  if (sym.isConstructor())   state.markInitialized((UninitializedType)state.peek());  state.pop(1);  state.push(mtype.getReturnType());}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  NamedNodeMap attributes;  Node child;  int length;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testEmployee=elementList.item(2);  attributes=testEmployee.getAttributes();  length=(int)attributes.getLength();  assertEquals("length",2,length);  child=attributes.item(0);  child=attributes.item(1);}  }
class C{  public static BigInteger decodeMPI(byte[] mpi,boolean hasLength){  byte[] buf;  if (hasLength) {    int length=(int)readUint32BE(mpi,0);    buf=new byte[length];    System.arraycopy(mpi,4,buf,0,length);  } else   buf=mpi;  if (buf.length == 0)   return BigInteger.ZERO;  boolean isNegative=(buf[0] & 0x80) == 0x80;  if (isNegative)   buf[0]&=0x7f;  BigInteger result=new BigInteger(buf);  return isNegative ? result.negate() : result;}  }
class C{  protected void recordNullReference(LocalVariableBinding local,Expression expression,int status){}  }
class C{  public static ServerLocator createServerLocatorWithoutHA(TransportConfiguration... transportConfigurations){  return new ServerLocatorImpl(false,transportConfigurations);}  }
class C{  public static View temporaryFromQuery(Query query,String name,Class<? extends ViewModel> modelClass,Property<?>[] properties){  return new View(modelClass,properties,name,null,null,query,true);}  }
class C{  public static boolean isEquals(Object array1,Object array2){  return new EqualsBuilder().append(array1,array2).isEquals();}  }
class C{  public void cancelRowUpdates() throws SQLException {  checkCursor();  if (onInsertRow == true) {    throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.invalidcp").toString());  }  Row currentRow=(Row)getCurrentRow();  if (currentRow.getUpdated() == true) {    currentRow.clearUpdated();    notifyRowChanged();  }}  }
class C{  public final void userName(String userName){  this.userName=IgfsUtils.fixUserName(userName);}  }
class C{  public URLRasterLocation(int x,int y,String name,String iconURL){  super(x,y,name,getIconRaster(x,y,iconURL));  if (location instanceof OMRaster) {    setHorizontalLabelBuffer((((OMRaster)location).getWidth() / 2) + SPACING);  }}  }
class C{  public TermVectorsRequest doc(XContentBuilder documentBuilder){  return this.doc(documentBuilder.bytes(),true);}  }
class C{  public static void initCause(final Throwable throwable,final Throwable cause){  if (INIT_CAUSE_METHOD != null) {    try {      INIT_CAUSE_METHOD.invoke(throwable,new Object[]{cause});    } catch (    final Exception e) {      LOG.warn("Exception invoking Throwable.initCause",e);    }  }}  }
class C{  public JSONArray(Collection<Object> collection){  this.myArrayList=new ArrayList<Object>();  if (collection != null) {    Iterator<Object> iter=collection.iterator();    while (iter.hasNext()) {      this.myArrayList.add(JSONObject.wrap(iter.next()));    }  }}  }
class C{  private void clearHotspots(){  if (mRipple != null) {    mRipple.end();    mRipple=null;    mRippleActive=false;  }  if (mBackground != null) {    mBackground.end();    mBackground=null;    mBackgroundActive=false;  }  cancelExitingRipples();}  }
class C{  public boolean matches(String input){  TrieNode node=root;  for (int i=input.length() - 1; i >= 0; i--) {    node=node.getChild(input.charAt(i));    if (node == null)     return false;    if (node.isTerminal())     return true;  }  return false;}  }
class C{  public boolean mergeExtendContext(Context ct){  boolean erc=true;  Pair p=ct.lastPair.reversePairList();  while (p != null) {    SymbolNode sn=p.info;    if (!sn.isLocal()) {      Object sName;      if (sn instanceof ModuleNode) {        sName=new SymbolTable.ModuleName(sn.getName());      } else {        sName=sn.getName();      }      if (!table.containsKey(sName)) {        table.put(sName,new Pair(sn));      } else {        SymbolNode symbol=((Pair)table.get(sName)).info;        if (symbol != sn) {          if (symbol.getClass() == sn.getClass()) {            if (!symbol.sameOriginallyDefinedInModule(sn)) {              errors.addWarning(sn.getTreeNode().getLocation(),"Warning: the " + kindOfNode(symbol) + " of '"+ sName.toString()+ "' conflicts with \nits "+ kindOfNode(symbol)+ " at "+ symbol.getTreeNode().getLocation()+ ".");            }          } else {            errors.addError(sn.getTreeNode().getLocation(),"The " + kindOfNode(symbol) + " of '"+ sName.toString()+ "' conflicts with \nits "+ kindOfNode(symbol)+ " at "+ symbol.getTreeNode().getLocation()+ ".");            erc=false;          }        }      }    }    p=p.link;  }  return erc;}  }
class C{  public XCardElement(Element element,VCardVersion version){  this.document=element.getOwnerDocument();  this.element=element;  this.version=version;  namespace=version.getXmlNamespace();}  }
class C{  private void updateArchive(List<T> solutionSet){  for (  FitnessFunction<T> entry : this.getCoveredGoals()) {    double bestSize=this.archive.get(entry).size();    for (    T solution : solutionSet) {      double value=entry.getFitness(solution);      double size=solution.size();      if (value == 0.0 && size < bestSize) {        this.archive.put(entry,solution);        bestSize=size;      }    }  }  this.uncoveredGoals.removeAll(this.getCoveredGoals());}  }
class C{  public static void Initialize(){  buildHashTable();  buildPrefixHashTable();  buildStringCharTable();}  }
class C{  public IndentPrinter(Writer out,String indent,boolean addNewlines,boolean autoIndent){  this.addNewlines=addNewlines;  if (out == null) {    throw new IllegalArgumentException("Must specify a Writer");  }  this.out=out;  this.indent=indent;  this.autoIndent=autoIndent;}  }
class C{  public static Object executeOn(Connection con,ExecutablePool pool){  AbstractOp op=new AuthenticateUserOpImpl(con,pool);  return pool.executeOn(con,op);}  }
class C{  public InsertContentAction(){  super(insertContentAction);}  }
class C{  private void handleJsonNoteOp(RequestAndResponse requestAndResponse) throws IOException, ServletException {  requestAndResponse.setResponseContentTypeJson();  String type=null;  String note=null;  String quotation=null;  String id=null;  String ids=null;  String noteop=null;  String childrenAction=null;  boolean insertAsFirstChild=false;  boolean isPublic=false;  String csrft=null;  boolean unlinkOnly=false;  try {    final JsonNodeHelper json=getJsonNode(requestAndResponse);    type=json.getString(DbLogic.Constants.type);    note=json.getString(DbLogic.Constants.note);    quotation=json.getString(DbLogic.Constants.quotation);    id=json.getString(DbLogic.Constants.id);    ids=json.getString("ids");    noteop=json.getString("noteop");    childrenAction=json.getString("childrenAction");    insertAsFirstChild=json.getBoolean("insertAsFirstChild");    isPublic=json.getBoolean("isPublic");    unlinkOnly=json.getBoolean("unlinkOnly");    csrft=json.getString("csrft");  } catch (  final IOException e) {    returnJson400(requestAndResponse,servletText.errorJson());    return;  }  if (isTheCsrftWrong(requestAndResponse,csrft)) {    returnJson400(requestAndResponse,servletText.errorRequiresSignIn(false));    return;  }  if (!EntryAttributeValidator.isNoteValid(note)) {    returnJson400(requestAndResponse,servletText.errorNoteIsInvalid());    return;  }  if (type != null && type.equals(Constants.note) && !EntryAttributeValidator.isNoteValid(note)) {    returnJson400(requestAndResponse,servletText.errorNoteIsInvalid());    return;  }  if (type != null && type.equals(Constants.notebook) && !EntryAttributeValidator.isNotebookTitleValid(note)) {    returnJson400(requestAndResponse,servletText.errorNoteIsInvalid());    return;  }  if (!EntryAttributeValidator.isQuotationValid(quotation)) {    returnJson400(requestAndResponse,servletText.errorQuotationIsInvalid());    return;  }  try {    final Long time=new Long(System.currentTimeMillis());    final Errors errors=new Errors();    final StringBuilder result=new StringBuilder();    User user=dbLogic.getUserById(getEffectiveUserId(requestAndResponse));    boolean userWasSignedIn=false;    if (user == null) {      if (allowSaveIfNotSignedIn && noteop != null && noteop.equals("newNotebook")) {        user=createAnonUser();        if (user == null) {          returnJson400(requestAndResponse,servletText.errorCouldNotCreateAccount());          return;        } else {          mapSessionToUser(requestAndResponse,user.getId());          userWasSignedIn=true;        }      } else {        returnJson400(requestAndResponse,servletText.errorRequiresSignIn(false));        return;      }    }    if (user.getIsAccountClosed()) {      returnJson400(requestAndResponse,servletText.errorAccountIsClosed());      return;    }    result.append("{\"modTime\": " + time + "\n");    Entry entry=null;    boolean includeNote=false;    boolean success=false;    ArrayList<String> deletedEntryIds=null;    if (noteop != null) {      if (noteop.equals("edit") || noteop.equals("editNotebook") || noteop.equals("editSource")|| noteop.equals("editNoteText")) {        if (id == null) {          returnJson400(requestAndResponse,servletText.errorIdIsInvalidFormat());          return;        }        final String[] idParts=id.split(":");        final String trueId=idParts[idParts.length == 1 ? 0 : 1];        if (!dbLogic.getIdGenerator().isIdWellFormed(trueId)) {          returnJson400(requestAndResponse,servletText.errorIdIsInvalidFormat());          return;        }        if (noteop.equals("editNoteText")) {          entry=dbLogic.getEntryById(trueId);          if (entry == null) {            Errors.add(errors,servletText.errorEntryCouldNotBeFound());          } else {            entry=dbLogic.editEntry(user,trueId,note,entry.getQuotation(),entry.getIsPublic(),time,isUserAnAdmin(requestAndResponse),errors);          }        } else {          entry=dbLogic.editEntry(user,trueId,note,quotation,isPublic,time,isUserAnAdmin(requestAndResponse),errors);        }        includeNote=true;        success=entry != null;      } else       if (noteop.equals("delete") || noteop.equals("deleteNotebook") || noteop.equals("deleteSource")) {        deletedEntryIds=new ArrayList<String>();        if (ids == null) {          returnJson400(requestAndResponse,servletText.errorIdsAreInvalidFormat());          return;        }        final String[] idsArray=ids.split(",");        if (childrenAction != null && childrenAction.equals("orphan")) {          childrenAction="parent";        }        if (noteop.equals("deleteNotebook") || noteop.equals("deleteSource")) {          childrenAction="parent";        }        success=true;        final LinkedList<EntryAndIsFromList> entriesToDeleteOrUnlink=new LinkedList<EntryAndIsFromList>();        String errorMessage=validateEntriesParentsBeforeChildren(requestAndResponse,idsArray,entriesToDeleteOrUnlink);        for (        final EntryAndIsFromList entryToDeleteOrUnlink : entriesToDeleteOrUnlink) {          if (entryToDeleteOrUnlink.entry.getType().equals(Constants.tableofcontents) || entryToDeleteOrUnlink.entry.getType().equals(Constants.root)) {            errorMessage=servletText.errorEntryCanNotBeDeleted();          }        }        final LinkedList<Entry> entriesToOnlyUnlink=new LinkedList<Entry>();        if (unlinkOnly) {          for (          final EntryAndIsFromList entryToDeleteOrUnlink : entriesToDeleteOrUnlink) {            if (entryToDeleteOrUnlink.entry.isQuotation() || entryToDeleteOrUnlink.entry.isSource()) {              entriesToOnlyUnlink.push(entryToDeleteOrUnlink.entry);              entryToDeleteOrUnlink.entry=null;            }          }        }        if (errorMessage != null) {          success=false;          errors.add(errorMessage);        } else {          for (          final Entry entryToUnlink : entriesToOnlyUnlink) {            success&=dbLogic.unlinkEntry(user,entryToUnlink,isUserAnAdmin(requestAndResponse),errors);          }          for (          final EntryAndIsFromList entryToDelete : entriesToDeleteOrUnlink) {            if (entryToDelete.entry == null || dbLogic.wasEntryDeletedInThisTransaction(entryToDelete.entry)) {              continue;            }            success&=dbLogic.deleteEntry(user,entryToDelete.entry,childrenAction,isUserAnAdmin(requestAndResponse),deletedEntryIds,errors);          }        }      } else       if (noteop.equals("insert")) {        if (id == null || !dbLogic.getIdGenerator().isIdWellFormed(id)) {          returnJson400(requestAndResponse,servletText.errorIdIsInvalidFormat());          return;        }        entry=dbLogic.createSimpleEntry(user,note,time,id,TreeRelType.Child,false,false,isPublic,isUserAnAdmin(requestAndResponse),type,errors,null);        includeNote=true;        success=entry != null;      } else       if (noteop.equals("putUnderneath")) {        if (id == null || !dbLogic.getIdGenerator().isIdWellFormed(id)) {          returnJson400(requestAndResponse,servletText.errorIdIsInvalidFormat());          return;        }        entry=dbLogic.createSimpleEntry(user,note,time,id,TreeRelType.Parent,true,false,isPublic,isUserAnAdmin(requestAndResponse),type,errors,null);        includeNote=true;        success=entry != null;      } else       if (noteop.equals("createChild")) {        if (id == null || !dbLogic.getIdGenerator().isIdWellFormed(id)) {          returnJson400(requestAndResponse,servletText.errorIdIsInvalidFormat());          return;        }        entry=dbLogic.createSimpleEntry(user,note,time,id,TreeRelType.Parent,false,insertAsFirstChild,isPublic,isUserAnAdmin(requestAndResponse),type,errors,null);        includeNote=true;        success=entry != null;      } else       if (noteop.equals("newNotebook")) {        boolean addSampleNote=!doesUserHaveAnyNotebooks(requestAndResponse);        entry=dbLogic.createEntryNoteBook(user,note,time,null,null,false,false,isPublic,isUserAnAdmin(requestAndResponse),addSampleNote,errors);        includeNote=true;        success=entry != null;      } else       if (noteop.equals("putBefore")) {        if (id == null || !dbLogic.getIdGenerator().isIdWellFormed(id)) {          returnJson400(requestAndResponse,servletText.errorIdIsInvalidFormat());          return;        }        entry=dbLogic.createSimpleEntry(user,note,time,id,TreeRelType.Next,false,false,isPublic,isUserAnAdmin(requestAndResponse),type,errors,null);        includeNote=true;        success=entry != null;      } else       if (noteop.equals("putAfter")) {        if (id == null || !dbLogic.getIdGenerator().isIdWellFormed(id)) {          returnJson400(requestAndResponse,servletText.errorIdIsInvalidFormat());          return;        }        entry=dbLogic.createSimpleEntry(user,note,time,id,TreeRelType.Previous,false,isPublic,isUserAnAdmin(requestAndResponse),false,type,errors,null);        includeNote=true;        success=entry != null;      } else {        errors.add(servletText.errorInvalidOperation());      }    } else {      errors.add(servletText.errorMissingOperation());    }    if (!success) {      requestAndResponse.response.setStatus(HttpServletResponse.SC_BAD_REQUEST);      result.append(",\"success\":false");      result.append(",");      errorsToJson(errors,result);    } else {      result.append(",\"success\":true");    }    if (entry != null) {      result.append(",\"id\":\"" + entry.getId() + "\"\n");      if (includeNote) {        result.append(",");        addJsonForEntry(result,entry,noteop.equals("edit") || noteop.equals("editNotebook") || noteop.equals("editSource")|| noteop.equals("editNoteText"),noteop.equals("newNotebook"),userWasSignedIn,true);      }    }    if (deletedEntryIds != null) {      result.append(", \"deleted\": [");      boolean isFirst=true;      for (      final String deletedEntryId : deletedEntryIds) {        if (!isFirst) {          result.append(",");        }        isFirst=false;        result.append("\"" + deletedEntryId + "\"");      }      result.append("]");    }    result.append("}\n");    dbLogic.commit();    requestAndResponse.print(result.toString());  } catch (  final PersistenceException e) {    logger.log(Level.INFO,"Exception",e);    returnJson500(requestAndResponse,servletText.errorInternalDatabase());  }}  }
class C{  public void deleteView(final INaviView view) throws CouldntDeleteException {  checkDeleteArguments(view);  if (view.getConfiguration().getId() != -1) {    m_provider.deleteView(view);  }  delete(view);}  }
class C{  public void put(int key,int value){  if (key == 0) {    zeroKey=true;    zeroValue=value;    return;  }  checkSizePut();  internalPut(key,value);}  }
class C{  private void refreshFCZoneReferences(ExportMask exportMask,Map<String,List<FCZoneReference>> existingRefs,List<ZoneInfo> addedZoneInfos,List<ZoneInfo> updatedZoneInfos,List<String> removedZonesKeys){  Map<URI,Integer> exportMaskVolumes=StringMapUtil.stringMapToVolumeMap(exportMask.getVolumes());  List<ExportGroup> exportGroups=ExportUtils.getExportGroupsForMask(exportMask.getId(),_dbClient);  List<FCZoneReference> temp=null;  List<FCZoneReference> refs=new ArrayList<FCZoneReference>();  for (  String refKey : removedZonesKeys) {    temp=existingRefs.get(refKey);    if (temp == null) {      continue;    }    for (    FCZoneReference ref : temp) {      for (      ExportGroup exportGroup : exportGroups) {        if (exportGroup.getId().equals(ref.getGroupUri()) && exportGroup.hasBlockObject(ref.getVolumeUri()) && exportMaskVolumes.containsKey(ref.getVolumeUri())) {          _log.info("FCZoneReference {} for volume {} and exportGroup {} will be deleted",new Object[]{ref.getPwwnKey(),ref.getVolumeUri(),ref.getGroupUri()});          refs.add(ref);        }      }    }  }  _dbClient.markForDeletion(refs);  refs.clear();  for (  ZoneInfo zoneInfo : updatedZoneInfos) {    String refKey=zoneInfo.getZoneReferenceKey();    temp=existingRefs.get(refKey);    if (temp == null) {      continue;    }    for (    FCZoneReference ref : temp) {      for (      ExportGroup exportGroup : exportGroups) {        if (exportGroup.getId().equals(ref.getGroupUri()) && exportGroup.hasBlockObject(ref.getVolumeUri()) && exportMaskVolumes.containsKey(ref.getVolumeUri())) {          if (zoneInfo.getZoneName() != null && !zoneInfo.getZoneName().equals(ref.getZoneName())) {            ref.setZoneName(zoneInfo.getZoneName());            ref.setExistingZone(true);          }          if (zoneInfo.getNetworkSystemId() != null && (ref.getNetworkSystemUri() == null || !zoneInfo.getNetworkSystemId().equals(ref.getNetworkSystemUri().toString()))) {            ref.setNetworkSystemUri(URI.create(zoneInfo.getNetworkSystemId()));          }          if (zoneInfo.getFabricId() != null && !zoneInfo.getFabricId().equals(ref.getFabricId())) {            ref.setFabricId(zoneInfo.getFabricId());          }          refs.add(ref);        }      }    }  }  _dbClient.updateAndReindexObject(refs);  refs.clear();  for (  ZoneInfo zoneInfo : addedZoneInfos) {    for (    URI volUri : exportMaskVolumes.keySet()) {      for (      ExportGroup exportGroup : exportGroups) {        if (exportGroup.hasBlockObject(volUri)) {          refs.add(createFCZoneReference(zoneInfo,volUri,exportGroup));          _log.info("FCZoneReference {} for volume {} and exportGroup {} will be added",new Object[]{zoneInfo.getZoneReferenceKey(),volUri,exportGroup.getId()});        }      }    }  }  _dbClient.createObject(refs);}  }
class C{  public Cache(){  this(28,9);}  }
class C{  private boolean searchAtDepth(Graph graph,IndependenceTest independenceTest,IKnowledge knowledge,SepsetMapDci sepset,int depth){  boolean more=false;  for (  Node x : variables) {    List<Node> b=new LinkedList<>();    for (    Node node : graph.getAdjacentNodes(x)) {      if (variables.contains(node)) {        b.add(node);      }    }    nextEdge:     for (    Node y : b) {      List<Node> adjx=new ArrayList<>(b);      adjx.remove(y);      List<Node> ppx=possibleParents(x,adjx,knowledge);      boolean noEdgeRequired=knowledge.noEdgeRequired(x.getName(),y.getName());      if (ppx.size() >= depth) {        ChoiceGenerator cg=new ChoiceGenerator(ppx.size(),depth);        int[] choice;        while ((choice=cg.next()) != null) {          List<Node> condSet=GraphUtils.asList(choice,ppx);          boolean independent=false;          boolean known=false;          if (knownIndependencies != null && knownIndependencies.get(x,y) != null) {            for (            List<Node> set : knownIndependencies.getSet(x,y)) {              if (set.containsAll(condSet) && set.size() == condSet.size()) {                independent=true;                known=true;                break;              }            }          }          if (knownAssociations != null && knownAssociations.get(x,y) != null) {            for (            List<Node> set : knownAssociations.getSet(x,y)) {              if (set.containsAll(condSet) && set.size() == condSet.size()) {                independent=false;                known=true;                break;              }            }          }          if (!known) {            independent=independenceTest.isIndependent(x,y,condSet);            if (method != null) {              List<IndependenceTest> testsWithVars=new ArrayList<>();              for (int k=0; k < marginalVars.size(); k++) {                Set<Node> marginalSet=marginalVars.get(k);                if (marginalSet.contains(x) && marginalSet.contains(y) && marginalSet.containsAll(condSet)) {                  testsWithVars.add(independenceTests.get(k));                }              }              boolean inconsistency=false;              for (              IndependenceTest testWithVars : testsWithVars) {                if (testWithVars.isIndependent(x,y,condSet) != independent) {                  inconsistency=true;                  break;                }              }              if (inconsistency) {                independent=ResolveSepsets.isIndependentPooled(method,testsWithVars,x,y,condSet);              }            }            numIndependenceTests++;          }          if (independent && noEdgeRequired) {            graph.removeEdge(x,y);            sepset.set(x,y,new LinkedList<>(condSet));            continue nextEdge;          }        }      }    }    List<Node> currentAdjNodes=new ArrayList<>();    for (    Node node : graph.getAdjacentNodes(x)) {      if (variables.contains(node)) {        currentAdjNodes.add(node);      }    }    if (currentAdjNodes.size() - 1 > depth) {      more=true;    }  }  return more;}  }
class C{  public void enteringInitialPopulationStatistics(final SteadyStateEvolutionState state){  for (int x=0; x < children.length; x++)   if (children[x] instanceof SteadyStateStatisticsForm)   ((SteadyStateStatisticsForm)children[x]).enteringInitialPopulationStatistics(state);}  }
class C{  public void completeBatch(SimpleRouterContext context,OutgoingBatch batch){  log.debug("Completing batch {}",batch.getBatchId());}  }
class C{  public QuestInStateCondition(final String questname,final String state){  this.questname=checkNotNull(questname);  this.index=-1;  this.state=checkNotNull(state);}  }
class C{  protected void loadLocationPaths(Compiler compiler,int opPos,int count) throws javax.xml.transform.TransformerException {  int steptype=compiler.getOp(opPos);  if (steptype == OpCodes.OP_LOCATIONPATH) {    loadLocationPaths(compiler,compiler.getNextOpPos(opPos),count + 1);    m_exprs[count]=createDTMIterator(compiler,opPos);    m_exprs[count].exprSetParent(this);  } else {switch (steptype) {case OpCodes.OP_VARIABLE:case OpCodes.OP_EXTFUNCTION:case OpCodes.OP_FUNCTION:case OpCodes.OP_GROUP:      loadLocationPaths(compiler,compiler.getNextOpPos(opPos),count + 1);    WalkingIterator iter=new WalkingIterator(compiler.getNamespaceContext());  iter.exprSetParent(this);if (compiler.getLocationPathDepth() <= 0) iter.setIsTopLevel(true);iter.m_firstWalker=new org.apache.xpath.axes.FilterExprWalker(iter);iter.m_firstWalker.init(compiler,opPos,steptype);m_exprs[count]=iter;break;default :m_exprs=new LocPathIterator[count];}}}  }
class C{  public DefaultKeyedValues2D(){  this(false);}  }
class C{  @Override public synchronized Object executeTask(Task t) throws RemoteException {  String taskId="" + System.currentTimeMillis() + ":";  taskId+=t.hashCode();  addTaskToQueue(t,taskId);  return taskId;}  }
class C{  public void removeListener(final ITutorialListener listener){  m_listeners.removeListener(listener);}  }
class C{  public void successHandling(String result,boolean displayToast){  if (result.equalsIgnoreCase(DomoticzValues.Result.ERROR))   Toast.makeText(getActivity(),R.string.action_failed,Toast.LENGTH_SHORT).show(); else   if (result.equalsIgnoreCase(DomoticzValues.Result.OK)) {    if (displayToast)     Toast.makeText(getActivity(),R.string.action_success,Toast.LENGTH_SHORT).show();  } else {    if (displayToast)     Toast.makeText(getActivity(),R.string.action_unknown,Toast.LENGTH_SHORT).show();  }  if (debug)   addDebugText("- Result: " + result);}  }
class C{  @SuppressWarnings("unchecked") public static <T>Predicate<T> alwaysFalse(){  return (Predicate<T>)FALSE;}  }
class C{  protected void LocationPath() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  appendOp(2,OpCodes.OP_LOCATIONPATH);  boolean seenSlash=tokenIs('/');  if (seenSlash) {    appendOp(4,OpCodes.FROM_ROOT);    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH) - 2,4);    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH) - 1,OpCodes.NODETYPE_ROOT);    nextToken();  } else   if (m_token == null) {    error(XPATHErrorResources.ER_EXPECTED_LOC_PATH_AT_END_EXPR,null);  }  if (m_token != null) {    if (!RelativeLocationPath() && !seenSlash) {      error(XPATHErrorResources.ER_EXPECTED_LOC_PATH,new Object[]{m_token});    }  }  m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),OpCodes.ENDOP);  m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);  m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);}  }
class C{  public void readBlocks(ByteBuf input) throws Exception {  palette.clear();  int bitsPerBlock=input.readUnsignedByte();  long maxEntryValue=(1L << bitsPerBlock) - 1;  if (bitsPerBlock == 0) {    bitsPerBlock=13;  }  if (bitsPerBlock < 4) {    bitsPerBlock=4;  }  if (bitsPerBlock > 8) {    bitsPerBlock=13;  }  int paletteLength=Type.VAR_INT.read(input);  for (int i=0; i < paletteLength; i++) {    if (bitsPerBlock != 13) {      palette.add(Type.VAR_INT.read(input));    } else {      Type.VAR_INT.read(input);    }  }  Long[] blockData=Type.LONG_ARRAY.read(input);  if (blockData.length > 0) {    for (int i=0; i < blocks.length; i++) {      int bitIndex=i * bitsPerBlock;      int startIndex=bitIndex / 64;      int endIndex=((i + 1) * bitsPerBlock - 1) / 64;      int startBitSubIndex=bitIndex % 64;      int val;      if (startIndex == endIndex) {        val=(int)(blockData[startIndex] >>> startBitSubIndex & maxEntryValue);      } else {        int endBitSubIndex=64 - startBitSubIndex;        val=(int)((blockData[startIndex] >>> startBitSubIndex | blockData[endIndex] << endBitSubIndex) & maxEntryValue);      }      if (bitsPerBlock == 13) {        int type=val >> 4;        int data=val & 0xF;        setBlock(i,type,data);      } else {        blocks[i]=val;      }    }  }}  }
class C{  public final Flux<T> sampleMillis(long timespan){  return sample(intervalMillis(timespan));}  }
class C{  public void testGetServletMappingsWithOneMapping() throws Exception {  String xml=WEBAPP_TEST_HEADER + "  <servlet-mapping>" + "    <servlet-name>s1</servlet-name>"+ "    <url-pattern>/s1mapping</url-pattern>"+ "  </servlet-mapping>"+ "</web-app>";  this.builder.build(new ByteArrayInputStream(xml.getBytes("UTF-8")));  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  List<String> servletMappings=WebXmlUtils.getServletMappings(webXml,"s1");  assertEquals(1,servletMappings.size());  assertEquals("/s1mapping",servletMappings.get(0));}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();{    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  V readValueUnderLock(HashEntry<V> e){  lock();  try {    return e.value;  }  finally {    unlock();  }}  }
class C{  @Override public String describe(){  if ((getRipeness() < 0) || (getRipeness() > getMaxRipeness())) {    return super.describe();  } else {    return description[getRipeness()];  }}  }
class C{  public AbstractCodeTemplate(String id){  setID(id);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  IncrementalCacheUpdateEvent(@NotNull Document document,int startOffset,int endOffset,@NotNull CachingSoftWrapDataMapper mapper){  this(document,startOffset,endOffset,endOffset,mapper);  myNewEndLogicalLine=myOldEndLogicalLine;}  }
class C{  public static int hash(Object object){  return object == null ? 0 : object.hashCode();}  }
class C{  public static Scale percentiles(){  return scale(100);}  }
class C{  @Override public FileLock lock(long position,long size,boolean shared) throws IOException {  throw new IOException("Method is unsupported.");}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static int count(String str,char a){  return count(str,a,str.length() - 1);}  }
class C{  public List<int[]> kSmallestPairs(int[] nums1,int[] nums2,int k){  PriorityQueue<int[]> pq=new PriorityQueue<>(null);  List<int[]> res=new ArrayList<>();  if (nums1.length == 0 || nums2.length == 0 || k == 0) {    return res;  }  for (int i=0; i < nums1.length && i < k; i++) {    pq.offer(new int[]{nums1[i],nums2[0],0});  }  while (k-- > 0 && !pq.isEmpty()) {    int[] cur=pq.poll();    res.add(new int[]{cur[0],cur[1]});    if (cur[2] == nums2.length - 1) {      continue;    }    pq.offer(new int[]{cur[0],nums2[cur[2] + 1],cur[2] + 1});  }  return res;}  }
class C{  public Iterator<Object> iterator(){  return keySet().iterator();}  }
class C{  public SetAudioStream(int playerId,int stream){  super();  addParameterToRequest("playerid",playerId);  addParameterToRequest("stream",stream);}  }
class C{  protected void put(String propName,Object propValue){  properties.put(propName,propValue);}  }
class C{  private int processDirty(char[] chars,int end,int i,char ch,int lastDirty,boolean fromTextNode) throws IOException {  int startClean=lastDirty + 1;  if (i > startClean) {    int lengthClean=i - startClean;    m_writer.write(chars,startClean,lengthClean);  }  if (CharInfo.S_LINEFEED == ch && fromTextNode) {    m_writer.write(m_lineSep,0,m_lineSepLen);  } else {    startClean=accumDefaultEscape(m_writer,(char)ch,i,chars,end,fromTextNode,false);    i=startClean - 1;  }  return i;}  }
class C{  public static void open(BrowserEditorInput input){  IWorkbenchWindow workbenchWindow=BrowserPlugin.getDefault().getWorkbench().getActiveWorkbenchWindow();  IWorkbenchPage page=workbenchWindow.getActivePage();  try {    IEditorReference[] editors=page.getEditorReferences();    int size=editors.length;    for (int i=0; i < size; i++) {      if (BROWSER_EDITOR_ID.equals(editors[i].getId())) {        IEditorPart editor=editors[i].getEditor(true);        if (editor != null && editor instanceof InternalBrowserEditor) {          InternalBrowserEditor editor2=(InternalBrowserEditor)editor;          BrowserEditorInput input2=editor2.getBrowserEditorInput();          if (input2 == null || input.canReplaceInput(input2)) {            editor.init(editor.getEditorSite(),input);            return;          }        }      }    }    page.openEditor(input,InternalBrowserEditor.BROWSER_EDITOR_ID);  } catch (  Exception e) {  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public RFC822Name(String name) throws IOException {  parseName(name);  this.name=name;}  }
class C{  public ThisRef newThisRef(RefType t){  return new ThisRef(t);}  }
class C{  public void addButtonActionPerformed(){  int nodeAddress=readNodeAddress();  if (nodeAddress < 0) {    return;  }  curNode=(SerialNode)SerialTrafficController.instance().getNodeFromAddress(nodeAddress);  if (curNode != null) {    statusText1.setText(rb.getString("Error1") + Integer.toString(nodeAddress) + rb.getString("Error2"));    statusText1.setVisible(true);    errorInStatus1=true;    resetNotes2();    return;  }  nodeType=nodeTypeBox.getSelectedIndex();  curNode=new SerialNode(nodeAddress,nodeType);  if (curNode == null) {    statusText1.setText(rb.getString("Error3"));    statusText1.setVisible(true);    log.error("Error creating Serial Node, constructor returned null");    errorInStatus1=true;    resetNotes2();    return;  }  setNodeParameters();  SerialSensorManager.instance().registerSensorsForNode(curNode);  resetNotes();  changedNode=true;  statusText1.setText(rb.getString("FeedBackAdd") + " " + Integer.toString(nodeAddress));  errorInStatus1=true;}  }
class C{  static void drawDark3DBorder(Graphics g,Rectangle r){  drawDark3DBorder(g,r.x,r.y,r.width,r.height);}  }
class C{  private static CellProcessor addParseChar(CellProcessor cellProcessor){  if (cellProcessor == null) {    return new ParseChar();  }  return new ParseChar((DoubleCellProcessor)cellProcessor);}  }
class C{  public static int secondaryOrder(int order){  return (order & SECONDARY_ORDER_MASK_) >> SECONDARY_ORDER_SHIFT_;}  }
class C{  @Override public void actionPerformed(ActionEvent e){  WalletData perWalletModelData=this.bitcoinController.getModel().getActivePerWalletModelData();  boolean haveFilesChanged=this.bitcoinController.getFileHandler().haveFilesChanged(perWalletModelData);  if (haveFilesChanged) {    perWalletModelData.setFilesHaveBeenChangedByAnotherProcess(true);    this.bitcoinController.fireFilesHaveBeenChangedByAnotherProcess(perWalletModelData);  } else {    TextTransfer textTransfer=new TextTransfer();    String stringToPaste=textTransfer.getClipboardContents();    stringToPaste=WhitespaceTrimmer.trim(stringToPaste);    String label=sendBitcoinPanel.getLabelTextArea().getText();    WalletAddressBookData addressBookData=new WalletAddressBookData(label,stringToPaste);    sendBitcoinPanel.setAddressBookDataByRow(addressBookData);    this.bitcoinController.getModel().setActiveWalletPreference(BitcoinModel.SEND_ADDRESS,stringToPaste);    controller.displayView(controller.getCurrentView());  }}  }
class C{  public boolean isShutdownInProgress(){  return shutdownInProgress.get();}  }
class C{  public void startDTD(String name,String publicId,String systemId) throws org.xml.sax.SAXException {}  }
class C{  public String toString(){  return "CPT Invariant Updater, evidence = " + evidence;}  }
class C{  public HelloMessage(HelloMessage other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  this.nodeId=other.nodeId;  if (other.isSetAuthScheme()) {    this.authScheme=other.authScheme;  }  if (other.isSetAuthChallengeResponse()) {    this.authChallengeResponse=new AuthChallengeResponse(other.authChallengeResponse);  }}  }
class C{  public boolean updateSingleClick(Point scaledPoint,boolean snapToGrid,Size gridSpacing){  if (potentialControlPoint == null) {    potentialControlPoint=new Point(0,0);  }  if (scaledPoint == null) {    scaledPoint=new Point(0,0);  }  int dx=scaledPoint.x - potentialControlPoint.x;  int dy=scaledPoint.y - potentialControlPoint.y;  if (snapToGrid) {    dx=CalcUtils.roundToGrid(dx,gridSpacing);    dy=CalcUtils.roundToGrid(dy,gridSpacing);  }  if (dx == 0 && dy == 0) {    return false;  }  potentialControlPoint.translate(dx,dy);  if (componentSlot == null) {    LOG.error("Component slot should not be null!");  } else {    Point p=new Point();    for (    IDIYComponent<?> component : componentSlot) {      for (int i=0; i < component.getControlPointCount(); i++) {        p.setLocation(component.getControlPoint(i));        p.translate(dx,dy);        component.setControlPoint(p,i);      }    }  }  return true;}  }
class C{  public EliasFanoLongBigList(final ShortIterator iterator,final short lowerBound){  this(LongIterators.wrap(iterator),lowerBound);}  }
class C{  private void initTokenizer(StreamTokenizer tokenizer){  tokenizer.resetSyntax();  tokenizer.whitespaceChars(0,(' ' - 1));  tokenizer.wordChars(' ','\u00FF');  tokenizer.whitespaceChars(',',',');  tokenizer.whitespaceChars(':',':');  tokenizer.commentChar('|');  tokenizer.whitespaceChars('\t','\t');  tokenizer.quoteChar('"');  tokenizer.quoteChar('\'');  tokenizer.eolIsSignificant(true);}  }
class C{  public final boolean accept(int docID,Bits liveDocs){  return (filterDocs == null || filterDocs.get(docID)) && (liveDocs == null || liveDocs.get(docID));}  }
class C{  @Override public void remove(){  m_src.remove();}  }
class C{  public long addLocation(Location location){  ContentValues cv=new ContentValues();  cv.put(dbHelper.COLUMN_DATETIME,location.getTime());  cv.put(dbHelper.COLUMN_LONGITUDE,location.getLongitude());  cv.put(dbHelper.COLUMN_LATITUDE,location.getLatitude());  cv.put(dbHelper.COLUMN_ALTITUDE,location.getAltitude());  long result=database.insert(dbHelper.TABLE_NAME,null,cv);  if (result >= 0) {  }  return result;}  }
class C{  public static int max(final int a,final int b){  return (a <= b) ? b : a;}  }
class C{  public Plane(Vec4 vec){  if (vec == null) {    throw new IllegalArgumentException("Vector Is Null");  }  if (vec.getLengthSquared3() == 0.0) {    throw new IllegalArgumentException("Vector Is Zero");  }  this.n=vec;}  }
class C{  private static RedBlackNode rotateWithLeftChild(RedBlackNode k2){  RedBlackNode k1=k2.left;  k2.left=k1.right;  k1.right=k2;  return k1;}  }
class C{  long addLocation(String locationSetting,String cityName,double lat,double lon){  long locationId;  Cursor locationCursor=getContext().getContentResolver().query(WeatherContract.LocationEntry.CONTENT_URI,new String[]{WeatherContract.LocationEntry._ID},WeatherContract.LocationEntry.COLUMN_LOCATION_SETTING + " = ?",new String[]{locationSetting},null);  if (locationCursor.moveToFirst()) {    int locationIdIndex=locationCursor.getColumnIndex(WeatherContract.LocationEntry._ID);    locationId=locationCursor.getLong(locationIdIndex);  } else {    ContentValues locationValues=new ContentValues();    locationValues.put(WeatherContract.LocationEntry.COLUMN_CITY_NAME,cityName);    locationValues.put(WeatherContract.LocationEntry.COLUMN_LOCATION_SETTING,locationSetting);    locationValues.put(WeatherContract.LocationEntry.COLUMN_COORD_LAT,lat);    locationValues.put(WeatherContract.LocationEntry.COLUMN_COORD_LONG,lon);    Uri insertedUri=getContext().getContentResolver().insert(WeatherContract.LocationEntry.CONTENT_URI,locationValues);    locationId=ContentUris.parseId(insertedUri);  }  locationCursor.close();  return locationId;}  }
class C{  public void removeEventListener2(IMultimediaMessagingSessionListener listener) throws RemoteException {  if (listener == null) {    throw new ServerApiIllegalArgumentException("listener must not be null!");  }  if (sLogger.isActivated()) {    sLogger.info("Remove an event listener");  }  try {synchronized (mLock) {      mMultimediaMessagingSessionEventBroadcaster.removeMultimediaMessagingEventListener(listener);    }  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  public JSONObject put(String key,Object value) throws JSONException {  if (key == null) {    throw new NullPointerException("Null key.");  }  if (value != null) {    testValidity(value);    this.map.put(key,value);  } else {    this.remove(key);  }  return this;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:25.926 -0500",hash_original_method="1FAEC0442F27706D6D5F3E840B971AB4",hash_generated_method="B7ECD36105B38ABAEED5381ABDCCD9B3") public static boolean intersects(RectF a,RectF b){  return (((a.getTaintInt() + b.getTaintInt())) == 1);}  }
class C{  public void init() throws GraphIOException {  try {    if (!initialized) {      XMLInputFactory Supplier=XMLInputFactory.newInstance();      if (fileReader == null && inputStream != null) {        xmlEventReader=Supplier.createXMLEventReader(inputStream);      } else {        xmlEventReader=Supplier.createXMLEventReader(fileReader);      }      xmlEventReader=Supplier.createFilteredReader(xmlEventReader,new GraphMLEventFilter());      initialized=true;    }  } catch (  Exception e) {    ExceptionConverter.convert(e);  }}  }
class C{  @Override protected void doAction(){  kseFrame.showHideStatusBar();}  }
class C{  public boolean isArray(){  return array;}  }
class C{  public static void sort(int[] data,IntegerComparator comp){  sort(data,0,data.length,comp);}  }
class C{  @Deprecated static public SprogVersionQuery instance(){  return null;}  }
class C{  public int size(){  return _list.size();}  }
class C{  public void orthogonalizeWay(List<Way> ways){  final int threshold=10;  final double lowerThreshold=Math.cos((90 - threshold) * Math.PI / 180);  final double upperThreshold=Math.cos(threshold * Math.PI / 180);  final double epsilon=1e-4;  dirty=true;  try {    HashSet<Node> save=new HashSet<Node>();    for (    Way way : ways) {      if (way.getNodes() != null) {        save.addAll(way.getNodes());      }    }    for (    Node nd : save) {      undo.save(nd);    }    List<ArrayList<Way>> groups=groupWays(ways);    for (    ArrayList<Way> wayList : groups) {      ArrayList<Coordinates[]> coordsArray=new ArrayList<Coordinates[]>();      int totalNodes=0;      for (      Way w : wayList) {        coordsArray.add(nodeListToCooardinateArray(w.getNodes()));        totalNodes+=w.getNodes().size();      }      Coordinates a, b, c, p, q;      double loopEpsilon=epsilon * (totalNodes / 4D);      for (int iteration=0; iteration < 1000; iteration++) {        for (int coordIndex=0; coordIndex < coordsArray.size(); coordIndex++) {          Coordinates[] coords=coordsArray.get(coordIndex);          int start=0;          int end=coords.length;          if (!wayList.get(coordIndex).isClosed()) {            start=1;            end=end - 1;          }          Coordinates motions[]=new Coordinates[coords.length];          for (int i=start; i < end; i++) {            a=coords[(i - 1 + coords.length) % coords.length];            b=coords[i];            c=coords[(i + 1) % coords.length];            p=a.subtract(b);            q=c.subtract(b);            double scale=2 * Math.min(Math.hypot(p.x,p.y),Math.hypot(q.x,q.y));            p=normalize(p,1.0);            q=normalize(q,1.0);            double dotp=filter((p.x * q.x + p.y * q.y),lowerThreshold,upperThreshold);            if (dotp < -0.707106781186547) {              dotp+=1.0;            }            motions[i]=normalize(p.add(q),0.1 * dotp * scale);          }          for (int i=start; i < end; i++) {            coords[i]=coords[i].add(motions[i]);          }        }        double score=0.0;        for (int coordIndex=0; coordIndex < coordsArray.size(); coordIndex++) {          Coordinates[] coords=coordsArray.get(coordIndex);          int start=0;          int end=coords.length;          if (!wayList.get(coordIndex).isClosed()) {            start=1;            end=end - 1;          }          for (int i=start; i < end; i++) {            a=coords[(i - 1 + coords.length) % coords.length];            b=coords[i];            c=coords[(i + 1) % coords.length];            p=a.subtract(b);            q=c.subtract(b);            p=normalize(p,1.0);            q=normalize(q,1.0);            double dotp=filter((p.x * q.x + p.y * q.y),lowerThreshold,upperThreshold);            score=score + 2.0 * Math.min(Math.abs(dotp - 1.0),Math.min(Math.abs(dotp),Math.abs(dotp + 1.0)));          }        }        if (score < loopEpsilon)         break;      }      int width=Application.mainActivity.getMap().getWidth();      int height=Application.mainActivity.getMap().getHeight();      BoundingBox box=Application.mainActivity.getMap().getViewBox();      for (int wayIndex=0; wayIndex < wayList.size(); wayIndex++) {        List<Node> nodes=wayList.get(wayIndex).getNodes();        Coordinates[] coords=coordsArray.get(wayIndex);        for (int i=0; i < nodes.size(); i++) {          Node nd=nodes.get(i);          nd.setLon(GeoMath.xToLonE7(width,box,coords[i].x));          nd.setLat(GeoMath.yToLatE7(height,width,box,coords[i].y));          apiStorage.insertElementSafe(nd);          nd.updateState(OsmElement.STATE_MODIFIED);        }      }    }    recordImagery();  } catch (  StorageException e) {    e.printStackTrace();  }}  }
class C{  public boolean isContactsPermissionGranted(){  return impl.isContactsPermissionGranted();}  }
class C{  public void onTxCommit(long duration){  txCommits.incrementAndGet();  commitTimeNanos.addAndGet(duration);  if (delegate != null)   delegate.onTxCommit(duration);}  }
class C{  void close(){  service.traceDebug(TAG,"close()");  try {    if (myClient != null) {      myClient.close();    }  } catch (  MqttException e) {    handleException(new Bundle(),e);  }}  }
class C{  public boolean isSymlink(){  if (permissions == null)   return false;  return ((permissions.intValue() & 0120000) != 0);}  }
class C{  public Vertex parseFunctionByteCode(TextStream stream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network){  stream.nextWord();  try {    Vertex function=parseElementName(Primitive.FUNCTION,stream,elements,debug,network);    BinaryData byteCode=new BinaryData();    ByteArrayOutputStream byteStream=new ByteArrayOutputStream();    DataOutputStream dataStream=new DataOutputStream(byteStream);    stream.skipWhitespace();    ensureNext('{',stream);    stream.skipWhitespace();    char peek=stream.peek();    while (peek != '}') {      stream.skipWhitespace();      parseElementByteCode(stream,dataStream,elements,debug,network);      String previous=stream.peekPreviousWord();      stream.skipWhitespace();      if (!"}".equals(previous)) {        ensureNext(';',',',stream);      }      stream.skipWhitespace();      peek=stream.peek();    }    ensureNext('}',stream);    dataStream.writeLong(0l);    byteCode.setBytes(byteStream.toByteArray());    function.setData(byteCode);    network.addVertex(function);    return function;  } catch (  IOException exception) {    throw new SelfParseException("IO Error",stream,exception);  }}  }
class C{  public static String replaceLast(String s,String sub,String with){  int i=s.lastIndexOf(sub);  if (i == -1) {    return s;  }  return s.substring(0,i) + with + s.substring(i + sub.length());}  }
class C{  public void putResource(final PutResourceParams params) throws IOException {  File tarFile;  long length;  try (InputStream sourceData=params.getSourceStream()){    Path tarFilePath=Files.createTempFile("compressed-resources",".tar");    tarFile=tarFilePath.toFile();    length=Files.copy(sourceData,tarFilePath,StandardCopyOption.REPLACE_EXISTING);  }   try (InputStream tarStream=new BufferedInputStream(new FileInputStream(tarFile));DockerConnection connection=connectionFactory.openConnection(dockerDaemonUri).method("PUT").path(apiVersionPathPrefix + "/containers/" + params.getContainer()+ "/archive").query("path",params.getTargetPath()).header("Content-Type",ExtMediaType.APPLICATION_X_TAR).header("Content-Length",length).entity(tarStream)){    addQueryParamIfNotNull(connection,"noOverwriteDirNonDir",params.isNoOverwriteDirNonDir());    final DockerResponse response=connection.request();    if (response.getStatus() != OK.getStatusCode()) {      throw getDockerException(response);    }  }  finally {    FileCleaner.addFile(tarFile);  }}  }
class C{  private void cancelPhoneticLetter(){  mHandler.cancelPhoneticLetterTimeout();}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("FssDaoVolRecUc[");  buffer.append("m_actSize = ").append(m_actSize);  buffer.append(", m_stat = ").append(m_stat);  buffer.append("]");  return buffer.toString();}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/assign-matched-elements") @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public ComputeVirtualPoolRestRep assignMatchedElements(@PathParam("id") URI id,ComputeVirtualPoolElementUpdateParam param) throws APIException {  ArgValidator.checkFieldUriType(id,ComputeVirtualPool.class,"id");  ComputeVirtualPool cvp=this.queryObject(ComputeVirtualPool.class,id,true);  _log.debug("Assign compute elements to compute pool " + cvp.getLabel());  if (cvp.getUseMatchedElements()) {    _log.error("Cannot assign compute elements when pool is set to use automatic matching");    throw APIException.badRequests.changeToComputeVirtualPoolNotSupported(cvp.getLabel(),"Cannot assign compute elements when pool is set to use automatic matching.");  }  StringSet currentElements=new StringSet();  if (cvp.getMatchedComputeElements() != null) {    currentElements.addAll(cvp.getMatchedComputeElements());  }  _log.debug("Currently " + currentElements.size() + " existing compute elements: "+ currentElements);  boolean addRequest=param.getComputeVirtualPoolAssignmentChanges().getAdd() != null && param.getComputeVirtualPoolAssignmentChanges().getAdd().getComputeElements() != null;  if (addRequest) {    Set<String> addElementsUris=param.getComputeVirtualPoolAssignmentChanges().getAdd().getComputeElements();    _log.debug("Add " + addElementsUris.size() + " compute elements: "+ addElementsUris);    Collection<ComputeElement> addElements=_dbClient.queryObject(ComputeElement.class,toUriList(addElementsUris));    if (addElementsUris.size() != addElements.size()) {      _log.error("Invalid add compute element(s) specified - Requested " + addElementsUris.size() + " but only "+ addElements.size()+ " found");      throw APIException.badRequests.changeToComputeVirtualPoolNotSupported(cvp.getLabel(),"Invalid add compute element(s) specified.");    }    List<URI> staticCeUris=findAllStaticallyAssignedComputeElementsInOtherPools(cvp);    for (    ComputeElement computeElement : addElements) {      if (!isAvailable(computeElement)) {        _log.error("Compute element " + computeElement.getId() + " is not available and thus may not be moved into different pool");        throw APIException.badRequests.changeToComputeVirtualPoolNotSupported(cvp.getLabel(),"Cannot reassign compute element(s) already used.");      }      if (staticCeUris.contains(computeElement.getId())) {        _log.error("Compute element " + computeElement.getId() + " already statically assigned to a different pool");        throw APIException.badRequests.changeToComputeVirtualPoolNotSupported(cvp.getLabel(),"Cannot assign compute element(s) already manually assigned to different pool(s).");      }    }    for (    String computeElementUriString : addElementsUris) {      boolean added=currentElements.add(computeElementUriString);      _log.info("Compute pool " + cvp.getLabel() + " already contained compute element "+ computeElementUriString+ ": "+ added);    }  }  boolean removeRequest=param.getComputeVirtualPoolAssignmentChanges().getRemove() != null && param.getComputeVirtualPoolAssignmentChanges().getRemove().getComputeElements() != null;  if (removeRequest) {    Set<String> removeElementsUris=param.getComputeVirtualPoolAssignmentChanges().getRemove().getComputeElements();    _log.debug("Remove " + removeElementsUris.size() + " compute elements: "+ removeElementsUris);    Collection<ComputeElement> removeElements=_dbClient.queryObject(ComputeElement.class,toUriList(removeElementsUris));    if (removeElementsUris.size() != removeElements.size()) {      _log.error("Invalid remove compute element(s) specified - Requested " + removeElementsUris.size() + " but only "+ removeElements.size()+ " found");      throw APIException.badRequests.changeToComputeVirtualPoolNotSupported(cvp.getLabel(),"Invalid remove compute element(s) specified.");    }    for (    ComputeElement computeElement : removeElements) {      if (!isAvailable(computeElement)) {        _log.error("Compute element " + computeElement.getId() + " is not available and thus may not be removed");        throw APIException.badRequests.changeToComputeVirtualPoolNotSupported(cvp.getLabel(),"Cannot remove compute element(s) already used.");      }    }    for (    String computeElementUriString : removeElementsUris) {      boolean removed=currentElements.remove(computeElementUriString);      _log.debug("Compute pool " + cvp.getLabel() + " needed removal of compute element "+ computeElementUriString+ ": "+ removed);    }  }  Collection<ComputeElement> assignedElements=_dbClient.queryObject(ComputeElement.class,toUriList(currentElements));  for (  ComputeElement element : assignedElements) {    boolean inUse=false;    if (!element.getAvailable()) {      inUse=true;    }    try {      validateComputeElement(cvp,element);    } catch (    APIException e) {      _log.warn("Compute Element " + element.getLabel() + ":"+ element.getDn()+ " is in use("+ inUse+ ") and does not meet criteria "+ e.toString());      if (inUse) {        throw APIException.badRequests.changeToComputeVirtualPoolNotSupported(cvp.getLabel(),"Updates to pool not allowed because compute virtual pool is already in use and some compute elements being assigned do not meet criteria.");      }      currentElements.remove(element.getId().toString());      _log.warn("Compute Element does not meet criteria; so being removed");    }  }  cvp.setMatchedComputeElements(currentElements);  _dbClient.updateAndReindexObject(cvp);  updateOtherPoolsComputeElements(cvp);  return toComputeVirtualPool(_dbClient,cvp,isComputeVirtualPoolInUse(cvp));}  }
class C{  public long addIdentity(String nickname,String ident,String realname,List<String> aliases){  ContentValues values=new ContentValues();  values.put(IdentityConstants.NICKNAME,nickname);  values.put(IdentityConstants.IDENT,ident);  values.put(IdentityConstants.REALNAME,realname);  long identityId=this.getWritableDatabase().insert(IdentityConstants.TABLE_NAME,null,values);  setAliases(identityId,aliases);  return identityId;}  }
class C{  public void writeUnlock(){  long threadId=Thread.currentThread().getId();  if (threadId != writeLockOwner)   throw new IllegalMonitorStateException();  if (writeLockEntryCnt > 1) {    writeLockEntryCnt--;    return;  }  writeLockEntryCnt=0;  writeLockOwner=-1;  int update=readLockEntryCnt.get() > 0 ? 1 : 0;  boolean b=compareAndSet(STATE_OFFS,-1,update);  assert b;}  }
class C{  protected boolean isArrowheadSmall(DrawContext dc,Vec4 arrowPt,int numPixels){  return this.getArrowLength() <= numPixels * dc.getView().computePixelSizeAtDistance(dc.getView().getEyePoint().distanceTo3(arrowPt));}  }
class C{  private void scroll(float x,float y,float amountX,float amountY,boolean isTilt){  if ((!mScroller.isFinished() && isTilt) || mStackTabs == null || (mOverviewAnimationType != OverviewAnimationType.NONE && mOverviewAnimationType != OverviewAnimationType.DISCARD && mOverviewAnimationType != OverviewAnimationType.UNDISCARD && mOverviewAnimationType != OverviewAnimationType.DISCARD_ALL && mOverviewAnimationType != OverviewAnimationType.ENTER_STACK)) {    return;  }  float amountScreen=mCurrentMode == Orientation.PORTRAIT ? amountY : amountX;  float amountScroll=amountScreen;  float amountEvenOut=amountScreen;  float tabScrollSpaceFinal=0;  if (mScrollingTab == null || isTilt) {    mScrollingTab=getTabAtPositon(x,y);  }  if (mScrollingTab == null && mInSwipe && mStackTabs != null) {    int index=mTabModel.index();    if (index >= 0 && index <= mStackTabs.length)     mScrollingTab=mStackTabs[index];  }  if (mScrollingTab == null) {    if (!isTilt) {      amountScroll=0;      amountEvenOut=0;    }  } else   if (mScrollingTab.getIndex() == 0) {    amountEvenOut=0;  } else {    float tabScrollSpace=mScrollingTab.getScrollOffset() + mScrollOffset;    float tabScreen=scrollToScreen(tabScrollSpace);    tabScrollSpaceFinal=screenToScroll(tabScreen + amountScreen);    amountScroll=tabScrollSpaceFinal - tabScrollSpace;    amountScroll=Math.signum(amountScreen) * MathUtils.clamp(Math.abs(amountScroll),Math.abs(amountScreen) * 0.5f,Math.abs(amountScreen) * 2.0f);  }  if (evenOutTabs(amountEvenOut,false) && mScrollingTab.getIndex() > 0) {    float tabScrollSpace=mScrollingTab.getScrollOffset() + mScrollOffset;    amountScroll=tabScrollSpaceFinal - tabScrollSpace;  }  setScrollTarget(mScrollTarget + amountScroll,false);}  }
class C{  private PostgreSQLBorderColorizer(){}  }
class C{  public void imdctHalf(float[] output,int outputOffset,final float[] input,int inputOffset){  int n=1 << mdctBits;  int n2=n >> 1;  int n4=n >> 2;  int n8=n >> 3;  int in1=0;  int in2=n2 - 1;  for (int k=0; k < n4; k++) {    int j=revtab[k];    CMUL(output,outputOffset + j * 2,outputOffset + j * 2 + 1,input[inputOffset + in2],input[inputOffset + in1],tcos[k],tsin[k]);    in1+=2;    in2-=2;  }  fftCalcFloat(output,outputOffset);  final float[] r=new float[4];  for (int k=0; k < n8; k++) {    CMUL(r,0,3,output[outputOffset + (n8 - k - 1) * 2 + 1],output[outputOffset + (n8 - k - 1) * 2 + 0],tsin[n8 - k - 1],tcos[n8 - k - 1]);    CMUL(r,2,1,output[outputOffset + (n8 + k) * 2 + 1],output[outputOffset + (n8 + k) * 2 + 0],tsin[n8 + k],tcos[n8 + k]);    output[outputOffset + (n8 - k - 1) * 2 + 0]=r[0];    output[outputOffset + (n8 - k - 1) * 2 + 1]=r[1];    output[outputOffset + (n8 + k) * 2 + 0]=r[2];    output[outputOffset + (n8 + k) * 2 + 1]=r[3];  }}  }
class C{  public final void subtraction(MathVector u){  for (int i=0; i < NDIM; i++) {    data[i]-=u.data[i];  }}  }
class C{  public void test_SSLEngineResultStatus_values(){  boolean flag=false;  String[] str={"BUFFER_OVERFLOW","BUFFER_UNDERFLOW","CLOSED","OK"};  SSLEngineResult.Status[] enS=SSLEngineResult.Status.values();  if (enS.length == str.length) {    for (int i=0; i < enS.length; i++) {      flag=false;      for (int j=0; j < str.length; j++) {        if (enS[i].toString().equals(str[j])) {          flag=true;          break;        }      }      assertTrue("Incorrect Status",flag);    }  } else {    fail("Incorrect number of enum constant was returned");  }}  }
class C{  public static String toString(double[] self){  return InvokerHelper.toString(self);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentFragment docFragment;  NodeList childList;  boolean success;  Node addressNode;  Node appendedChild;  Node importedDocFrag;  doc=(Document)load("staffNS",true);  docFragment=doc.createDocumentFragment();  childList=doc.getElementsByTagNameNS("*","address");  addressNode=childList.item(0);  appendedChild=docFragment.appendChild(addressNode);  importedDocFrag=doc.importNode(docFragment,false);  success=importedDocFrag.hasChildNodes();  assertFalse("documentimportnode09",success);}  }
class C{  public SimpleFragmentIntent<F> putExtras(Bundle extras){  if (this.extras == null) {    this.extras=new Bundle();  }  this.extras.putAll(extras);  return this;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'CommLock'";  db.execSQL(sql);}  }
class C{  public static void print(double[] a){  int n=a.length;  StdOut.println(n);  for (int i=0; i < n; i++) {    StdOut.printf("%9.5f ",a[i]);  }  StdOut.println();}  }
class C{  @RequestMapping(value={"/",""},method=RequestMethod.PUT) @ResponseBody public RestWrapper insert(@ModelAttribute("propertiesTemplate") @Valid PropertiesTemplate propertiesTemplate,BindingResult bindingResult,Principal principal){  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    PropertiesTemplate propertyTemplateInsert=propertiesTemplateDAO.insertProcessTemplate(propertiesTemplate);    restWrapper=new RestWrapper(propertyTemplateInsert,RestWrapper.OK);    LOGGER.info("Record with ID:" + propertyTemplateInsert.getProcessTemplateId() + " inserted in PropertiesTemplate by User:"+ principal.getName()+ propertyTemplateInsert);  } catch (  Exception e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public boolean dialogFinished(){  return !this.dialog.cancelled();}  }
class C{  public K handler(Object handler,String callback){  this.handler=handler;  this.callback=callback;  this.whandler=null;  return self();}  }
class C{  protected String stripQuotes(String rvalue){  StringBuffer buf=new StringBuffer();  int rvlen=rvalue.length();  for (int i=0; i < rvlen; i++) {    char ch=rvalue.charAt(i);    if (ch != '\'' && ch != '\"') {      buf.append(ch);    }  }  return buf.toString();}  }
class C{  public static boolean isWhiteListedURL(String url,Config config){  for (  String domain : config.getZeroRatingConfig().getWhiteListedDomains()) {    if (BrowserUtil.isUrlOfHost(url,domain)) {      return true;    }  }  return false;}  }
class C{  public void testToString(){  LongAccumulator ai=new LongAccumulator(null,0L);  assertEquals("0",ai.toString());  ai.accumulate(1);  assertEquals(Long.toString(1),ai.toString());}  }
class C{  public PhraseChunk_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_chunkType=jcas.getRequiredFeatureDE(casType,"chunkType","uima.cas.String",featOkTst);  casFeatCode_chunkType=(null == casFeat_chunkType) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_chunkType).getCode();  casFeat_constituentWords=jcas.getRequiredFeatureDE(casType,"constituentWords","uima.cas.FSArray",featOkTst);  casFeatCode_constituentWords=(null == casFeat_constituentWords) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_constituentWords).getCode();  casFeat_headWord=jcas.getRequiredFeatureDE(casType,"headWord","uk.gov.dstl.baleen.types.language.WordToken",featOkTst);  casFeatCode_headWord=(null == casFeat_headWord) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_headWord).getCode();}  }
class C{  public boolean addFrame(BufferedImage im){  if ((im == null) || !started) {    return false;  }  boolean ok=true;  try {    if (!sizeSet) {      setSize(im.getWidth(),im.getHeight());    }    image=im;    getImagePixels();    analyzePixels();    if (firstFrame) {      writeLSD();      writePalette();      if (repeat >= 0) {        writeNetscapeExt();      }    }    writeGraphicCtrlExt();    writeImageDesc();    if (!firstFrame) {      writePalette();    }    writePixels();    firstFrame=false;  } catch (  IOException e) {    ok=false;  }  return ok;}  }
class C{  public CacheAtomicUpdateTimeoutCheckedException(String msg){  super(msg);}  }
class C{  protected void storeState(){  copyNodeStructure(storedNodes);  storedRootNumber=root.getNumber();}  }
class C{  public void onHeadersTransitionStop(boolean withHeaders){}  }
class C{  public static String htmlEscape(String s){  StringBuilder sb=null;  String replacement;  int start=0;  for (int i=0; i < s.length(); i++) {switch (s.charAt(i)) {case '"':      replacement="&quot;";    break;case '&':  replacement="&amp;";break;case '<':replacement="&lt;";break;case '>':replacement="&gt;";break;default :replacement=null;}if (replacement != null) {if (sb == null) {sb=new StringBuilder(s.length() + replacement.length() - 1);}if (i > start) {sb.append(s.substring(start,i));}sb.append(replacement);start=i + 1;}}if (start > 0) {sb.append(s.substring(start));}if (sb != null) {return sb.toString();}return s;}  }
class C{  public final void writeFloat(float[] pa,int start,int n) throws IOException {  for (int i=0; i < n; i++) {    writeFloat(pa[start + i]);  }}  }
class C{  private void checkValueType(CompositeData value){  if (value == null) {    throw new NullPointerException("Argument value cannot be null.");  }  if (!tabularType.getRowType().isValue(value)) {    throw new InvalidOpenTypeException("Argument value's composite type [" + value.getCompositeType() + "] is not assignable to "+ "this TabularData instance's row type ["+ tabularType.getRowType()+ "].");  }}  }
class C{  public Integer stringValueToIntValue(String stringVal){  if (stringVal == null)   return null;  Integer intValue;  final Integer enumInt=enumStringToIntMap.get(stringVal);  if (enumInt != null)   return enumInt;  intValue=tryParseInt(stringVal);  if (intValue == null)   intValue=DEFAULT_VALUE;  final String enumString=enumIntToStringMap.get(intValue);  if (enumString != null)   return intValue;  return DEFAULT_VALUE;}  }
class C{  @Override public boolean isWrapperFor(Class<?> iface) throws SQLException {  return iface != null && iface.isAssignableFrom(getClass());}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static boolean equals(String str1,String str2){  return (str1 == null ? str2 == null : str1.equals(str2));}  }
class C{  public boolean closeIt(){  if (m_document != null && m_document.get_Table_ID() == MOrder.Table_ID)   ; else   if (!isValidAction(ACTION_Close))   return false;  if (m_document != null) {    if (m_document.closeIt()) {      m_status=STATUS_Closed;      m_document.setDocStatus(m_status);      return true;    }    return false;  }  m_status=STATUS_Closed;  return true;}  }
class C{  public ThreadPool(final int max){  if (max < 1) {    throw new IllegalArgumentException("Max must be >= 1, instead its:" + max);  }  executorService=Executors.newFixedThreadPool(max);}  }
class C{  public void write(PrintWriter writer){  for (int i=0; i < count; i++) {    writer.println(keys[i] + "\t" + values[i]);  }  writer.flush();}  }
class C{  private double attrTransProb(Instance first,Instance second,int col){  double transProb=0.0;  KStarNominalAttribute ksNominalAttr;  KStarNumericAttribute ksNumericAttr;switch (m_Train.attribute(col).type()) {case Attribute.NOMINAL:    ksNominalAttr=new KStarNominalAttribute(first,second,col,m_Train,m_RandClassCols,m_Cache[col]);  ksNominalAttr.setOptions(m_MissingMode,m_BlendMethod,m_GlobalBlend);transProb=ksNominalAttr.transProb();ksNominalAttr=null;break;case Attribute.NUMERIC:ksNumericAttr=new KStarNumericAttribute(first,second,col,m_Train,m_RandClassCols,m_Cache[col]);ksNumericAttr.setOptions(m_MissingMode,m_BlendMethod,m_GlobalBlend);transProb=ksNumericAttr.transProb();ksNumericAttr=null;break;}return transProb;}  }
class C{  public XPathContext(Object owner,boolean recursiveVarContext){  this(recursiveVarContext);  m_owner=owner;  try {    m_ownerGetErrorListener=m_owner.getClass().getMethod("getErrorListener",new Class[]{});  } catch (  NoSuchMethodException nsme) {  }}  }
class C{  public WebContentHandler(Map<String,String> htmlInputMap,Map<String,String> htmlRoleMap,Map<String,String> htmlTagMap){  mInputTypeToDesc=htmlInputMap;  mAriaRoleToDesc=htmlRoleMap;  mTagToDesc=htmlTagMap;}  }
class C{  public BasicPaloAltoFirewallParserTest() throws Exception {  super();}  }
class C{  public TlsPrfParameterSpec(SecretKey secret,String label,byte[] seed,int outputLength,String prfHashAlg,int prfHashLength,int prfBlockSize){  if ((label == null) || (seed == null)) {    throw new NullPointerException("label and seed must not be null");  }  if (outputLength <= 0) {    throw new IllegalArgumentException("outputLength must be positive");  }  this.secret=secret;  this.label=label;  this.seed=seed.clone();  this.outputLength=outputLength;  this.prfHashAlg=prfHashAlg;  this.prfHashLength=prfHashLength;  this.prfBlockSize=prfBlockSize;}  }
class C{  public double linearDistance(final double x,final double y,final double z){  return Math.sqrt(linearDistanceSquared(x,y,z));}  }
class C{  static public void addGroupHoverHandles(Figure f,Collection<Handle> handles){  handles.add(new BoundsOutlineHandle(f,GROUP_BOUNDS_STROKE_1_HOVER,GROUP_BOUNDS_COLOR_1_HOVER,GROUP_BOUNDS_STROKE_2_HOVER,GROUP_BOUNDS_COLOR_2_HOVER,GROUP_BOUNDS_STROKE_1_DISABLED,GROUP_BOUNDS_COLOR_1_DISABLED,GROUP_BOUNDS_STROKE_2_DISABLED,GROUP_BOUNDS_COLOR_2_DISABLED));}  }
class C{  private synchronized Object addAndGetSegmentLock(String segmentId){  Object segmentLoderLockObject=segmentLockMap.get(segmentId);  if (null == segmentLoderLockObject) {    segmentLoderLockObject=new Object();    segmentLockMap.put(segmentId,segmentLoderLockObject);  }  return segmentLoderLockObject;}  }
class C{  public static Manipulation serializableInstance(){  return new Manipulation(MlBayesIm.serializableInstance());}  }
class C{  private int trimToPowerOf2(int initialCapacity){  int capacity=1;  while (capacity < initialCapacity) {    capacity<<=1;  }  return capacity;}  }
class C{  public Call(Define function){  this(function.getFunctionName(),function.getArgumentType(0),function.getVariableNames(),function.getVariableTypes());}  }
class C{  public static void sendAcceptance(InternalDistributedMember recipient,int processorId,DM dm){  Assert.assertTrue(recipient != null,"ManageBackupBucketReplyMessage NULL reply message");  ManageBackupBucketReplyMessage m=new ManageBackupBucketReplyMessage(processorId,true,false);  m.setRecipient(recipient);  dm.putOutgoing(m);}  }
class C{  public void server(final String[] args) throws Exception {  final Map<String,Object> options=getStartOptions(args);  workingDirectory=IOUtils.tryGetCanonicalFileElseGetAbsoluteFile((File)options.get(DIR));  writeStatus(createStatus(this.basename,STARTING,OSProcess.getId()));  final Agent agent=createAgent((Properties)options.get(AGENT_PROPS));  final Thread thread=createAgentProcessThread(createAgentProcessThreadGroup(),agent);  thread.setDaemon(true);  thread.start();  pollAgentForPendingShutdown(agent);}  }
class C{  public void sendRepeatedKeys(int... keys){  final int count=keys.length;  if ((count & 0x1) == 0x1) {    throw new IllegalArgumentException("The size of the keys array must " + "be a multiple of 2");  }  final Instrumentation instrumentation=getInstrumentation();  for (int i=0; i < count; i+=2) {    final int keyCount=keys[i];    final int keyCode=keys[i + 1];    for (int j=0; j < keyCount; j++) {      try {        instrumentation.sendKeyDownUpSync(keyCode);      } catch (      SecurityException e) {      }    }  }  instrumentation.waitForIdleSync();}  }
class C{  public void stopPreview(final boolean needWait){synchronized (this) {    sendEmptyMessage(MSG_PREVIEW_STOP);    if (needWait && mThread.mIsRunning) {      try {        if (DEBUG)         Log.d(TAG,"wait for terminating of camera thread");        wait();      } catch (      final InterruptedException e) {      }    }  }}  }
class C{  protected void finalize() throws Throwable {  this.reader=null;  super.finalize();}  }
class C{  public static long decodeSignedLong(byte[] buf){  long unsigned=decodeUnsignedLong(buf);  long signed=(((unsigned << 63) >> 63) ^ unsigned) >> 1;  return signed ^ (unsigned & (1L << 63));}  }
class C{  public static <T>T withWriter(Path self,@ClosureParams(value=SimpleType.class,options="java.io.Writer") Closure<T> closure) throws IOException {  return withWriter(self,Charset.defaultCharset().name(),closure);}  }
class C{  public static void add(List<String> options,String option,float value){  options.add("-" + option);  options.add("" + value);}  }
class C{  public final boolean equals(Object obj){  if (toString() == null) {    return (obj != null) && (obj.toString() == null);  }  if (obj instanceof Type) {    return toString().equals(obj.toString());  }  return false;}  }
class C{  private void parseStartTag(boolean xmldecl,boolean throwOnResolveFailure) throws IOException, XmlPullParserException {  if (!xmldecl) {    read('<');  }  name=readName();  attributeCount=0;  while (true) {    skip();    if (position >= limit && !fillBuffer(1)) {      checkRelaxed(UNEXPECTED_EOF);      return;    }    int c=buffer[position];    if (xmldecl) {      if (c == '?') {        position++;        read('>');        return;      }    } else {      if (c == '/') {        degenerated=true;        position++;        skip();        read('>');        break;      } else       if (c == '>') {        position++;        break;      }    }    String attrName=readName();    int i=(attributeCount++) * 4;    attributes=ensureCapacity(attributes,i + 4);    attributes[i]="";    attributes[i + 1]=null;    attributes[i + 2]=attrName;    skip();    if (position >= limit && !fillBuffer(1)) {      checkRelaxed(UNEXPECTED_EOF);      return;    }    if (buffer[position] == '=') {      position++;      skip();      if (position >= limit && !fillBuffer(1)) {        checkRelaxed(UNEXPECTED_EOF);        return;      }      char delimiter=buffer[position];      if (delimiter == '\'' || delimiter == '"') {        position++;      } else       if (relaxed) {        delimiter=' ';      } else {        throw new XmlPullParserException("attr value delimiter missing!",this,null);      }      attributes[i + 3]=readValue(delimiter,true,throwOnResolveFailure,ValueContext.ATTRIBUTE);      if (delimiter != ' ' && peekCharacter() == delimiter) {        position++;      }    } else     if (relaxed) {      attributes[i + 3]=attrName;    } else {      checkRelaxed("Attr.value missing f. " + attrName);      attributes[i + 3]=attrName;    }  }  int sp=depth++ * 4;  elementStack=ensureCapacity(elementStack,sp + 4);  elementStack[sp + 3]=name;  if (depth >= nspCounts.length) {    int[] bigger=new int[depth + 4];    System.arraycopy(nspCounts,0,bigger,0,nspCounts.length);    nspCounts=bigger;  }  nspCounts[depth]=nspCounts[depth - 1];  if (processNsp) {    adjustNsp();  } else {    namespace="";  }  if (defaultAttributes != null) {    Map<String,String> elementDefaultAttributes=defaultAttributes.get(name);    if (elementDefaultAttributes != null) {      for (      Map.Entry<String,String> entry : elementDefaultAttributes.entrySet()) {        if (getAttributeValue(null,entry.getKey()) != null) {          continue;        }        int i=(attributeCount++) * 4;        attributes=ensureCapacity(attributes,i + 4);        attributes[i]="";        attributes[i + 1]=null;        attributes[i + 2]=entry.getKey();        attributes[i + 3]=entry.getValue();      }    }  }  elementStack[sp]=namespace;  elementStack[sp + 1]=prefix;  elementStack[sp + 2]=name;}  }
class C{  private void startUnRegistration(){  final Context context=AlreadyRegisteredActivity.this;  isUnregisterBtnClicked=true;  progressDialog=ProgressDialog.show(AlreadyRegisteredActivity.this,getResources().getString(R.string.dialog_message_unregistering),getResources().getString(R.string.dialog_message_please_wait),true);  regId=Preference.getString(context,context.getResources().getString(R.string.shared_pref_regId));  JSONObject requestParams=new JSONObject();  try {    requestParams.put(resources.getString(R.string.shared_pref_regId),regId);  } catch (  JSONException e) {    Log.e(TAG,"Invalid JSON." + e);  }  if (CommonUtils.isNetworkAvailable(context)) {    CommonUtils.callSecuredAPI(AlreadyRegisteredActivity.this,Constants.UNREGISTER_ENDPOINT,HTTP_METHODS.POST,requestParams,AlreadyRegisteredActivity.this,Constants.UNREGISTER_REQUEST_CODE);  } else {    CommonDialogUtils.stopProgressDialog(progressDialog);    CommonDialogUtils.showNetworkUnavailableMessage(AlreadyRegisteredActivity.this);  }}  }
class C{  public int numDistinctValues(Attribute att){  return numDistinctValues(att.index());}  }
class C{  public void showWindow(){  view.setDepth("infinity");  view.setRevision("");  view.setIgnoreExternals(false);  view.setIsCustomRevision(false);  view.setIsHeadRevision(true);  view.setEnableUpdateButton(true);  view.setEnableCustomRevision(false);  view.showWindow();}  }
class C{  static public double k0(double x) throws ArithmeticException {  double y, z;  if (x <= 0.0)   throw new ArithmeticException();  if (x <= 2.0) {    y=x * x - 2.0;    y=Arithmetic.chbevl(y,A_k0,10) - Math.log(0.5 * x) * i0(x);    return (y);  }  z=8.0 / x - 2.0;  y=Math.exp(-x) * Arithmetic.chbevl(z,B_k0,25) / Math.sqrt(x);  return (y);}  }
class C{  public void info(String format,Object... argArray){  formatAndLog(Log.INFO,format,argArray);}  }
class C{  public Quaterniond rotateLocal(double angleX,double angleY,double angleZ){  return rotateLocal(angleX,angleY,angleZ,this);}  }
class C{  protected void doStateDead(){  setColor(Color.red);  getSimulation().schedule.scheduleOnce(this);  setState(State.terminated);}  }
class C{  void validateEvictionAttributesAgainstLocalMaxMemory(){  final EvictionAttributes ea=pr.getEvictionAttributes();  if (pr.getLocalMaxMemory() == 0 && !ea.getAction().isNone()) {    logger.info(LocalizedMessage.create(LocalizedStrings.PartitionedRegion_EVICTIONATTRIBUTES_0_WILL_HAVE_NO_EFFECT_1_2,new Object[]{ea,pr.getFullPath(),Integer.valueOf(pr.localMaxMemory)}));  }}  }
class C{  public void show(){  mStartTime=-1;  mDismissed=false;  removeCallbacks(mDelayedHide);  if (!mPostedShow) {    postDelayed(mDelayedShow,MIN_DELAY);    mPostedShow=true;  }}  }
class C{  @Override public void processResult(Operation operation,Object resultObj,Map<String,Object> keyMap) throws BaseCollectionException {  _logger.info("Processing VNX Mount Query response: {}",resultObj);  final PostMethod result=(PostMethod)resultObj;  try {    ResponsePacket responsePacket=(ResponsePacket)_unmarshaller.unmarshal(result.getResponseBodyAsStream());    Header[] headers=result.getResponseHeaders(VNXFileConstants.CELERRA_SESSION);    if (null != headers && headers.length > 0) {      keyMap.put(VNXFileConstants.CELERRA_SESSION,headers[0].getValue());      _logger.info("Received celerra session info from the Server.");    }    if (null != responsePacket.getPacketFault()) {      Status status=responsePacket.getPacketFault();      processErrorStatus(status,keyMap);    } else {      List<Object> mountList=getQueryResponse(responsePacket);      processMountList(mountList,keyMap);      keyMap.put(VNXFileConstants.CMD_RESULT,VNXFileConstants.CMD_SUCCESS);    }  } catch (  final Exception ex) {    _logger.error("Exception occurred while processing the vnx fileShare response due to {}",ex.getMessage());    keyMap.put(VNXFileConstants.FAULT_DESC,ex.getMessage());    keyMap.put(VNXFileConstants.CMD_RESULT,VNXFileConstants.CMD_FAILURE);  } finally {    result.releaseConnection();  }  return;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void resetByteArray(){  baos.reset();}  }
class C{  protected void drawSideInteriors(DrawContext dc,ShapeData shapeData){  super.prepareToDrawInterior(dc,this.getActiveSideAttributes(),defaultSideAttributes);  GL2 gl=dc.getGL().getGL2();  for (  ExtrudedBoundaryInfo boundary : shapeData) {    if (!dc.isPickingMode() && this.mustApplyLighting(dc,this.getActiveSideAttributes()))     gl.glNormalPointer(GL.GL_FLOAT,0,boundary.sideNormalBuffer.rewind());    if (!dc.isPickingMode() && boundary.sideTextureCoords != null) {      gl.glEnable(GL.GL_TEXTURE_2D);      gl.glEnableClientState(GL2.GL_TEXTURE_COORD_ARRAY);      gl.glTexCoordPointer(2,GL.GL_FLOAT,0,boundary.sideTextureCoords.rewind());    } else {      gl.glDisable(GL.GL_TEXTURE_2D);      gl.glDisableClientState(GL2.GL_TEXTURE_COORD_ARRAY);    }    gl.glVertexPointer(3,GL.GL_FLOAT,0,boundary.sideVertexBuffer.rewind());    boundary.sideIndices.rewind();    for (int j=0; j < boundary.faceCount; j++) {      if (!dc.isPickingMode() && boundary.sideTextureCoords != null) {        if (!boundary.sideTextures.get(j).bind(dc))         continue;        boundary.sideTextures.get(j).applyInternalTransform(dc);      }      boundary.sideIndices.position(4 * j);      boundary.sideIndices.limit(4 * (j + 1));      gl.glDrawElements(GL.GL_TRIANGLE_STRIP,4,GL.GL_UNSIGNED_INT,boundary.sideIndices);    }  }}  }
class C{  public static long remainder(long dividend,long divisor){  if (divisor < 0) {    if (compare(dividend,divisor) < 0) {      return dividend;    } else {      return dividend - divisor;    }  }  if (dividend >= 0) {    return dividend % divisor;  }  long quotient=((dividend >>> 1) / divisor) << 1;  long rem=dividend - quotient * divisor;  return rem - (compare(rem,divisor) >= 0 ? divisor : 0);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:32.185 -0500",hash_original_method="A6640F15C2D0A406B73F798DB9EA077C",hash_generated_method="9E0C1B812348DAA23D6CEA8D73128E42") boolean ensureTouchMode(boolean inTouchMode){  if (DBG)   Log.d("touchmode","ensureTouchMode(" + inTouchMode + "), current "+ "touch mode is "+ mAttachInfo.mInTouchMode);  if (mAttachInfo.mInTouchMode == inTouchMode)   return false;  try {    sWindowSession.setInTouchMode(inTouchMode);  } catch (  RemoteException e) {    throw new RuntimeException(e);  }  return ensureTouchModeLocally(inTouchMode);}  }
class C{  public static POS convertPOS(String pos){  if (pos.startsWith("NN"))   return POS.NOUN; else   if (pos.startsWith(("VB")))   return POS.VERB; else   if (pos.startsWith(("JJ")))   return POS.ADJECTIVE; else   if (pos.startsWith(("RB")))   return POS.ADVERB;  return null;}  }
class C{  private void throttleLoopOnException(){  long now=System.currentTimeMillis();  if (lastExceptionTime == 0L || (now - lastExceptionTime) > 5000) {    lastExceptionTime=now;    recentExceptionCount=0;  } else {    if (++recentExceptionCount >= 10) {      try {        Thread.sleep(10000);      } catch (      InterruptedException ignore) {      }    }  }}  }
class C{  public String toString(){  return "[" + minimum + ","+ preferred+ ","+ maximum+ "]@"+ alignment;}  }
class C{  protected void highlightEdges(final Node node){  CEdgeHighlighter.highlightEdgesOfNode(node,true);}  }
class C{  public byte readRawByte() throws IOException {  if (bufferPos == bufferSize) {    refillBuffer(true);  }  return buffer[bufferPos++];}  }
class C{  public static boolean contains(Iterator<?> iterator,Object element){  if (iterator != null) {    while (iterator.hasNext()) {      Object candidate=iterator.next();      if (ObjectUtils.nullSafeEquals(candidate,element)) {        return true;      }    }  }  return false;}  }
class C{  private void writeDataToFile(File file) throws FileNotFoundException, IOException {  FileOutputStream fos=new FileOutputStream(file);  try {    fos.write(CONTENT_AS_BYTES);  }  finally {    fos.close();  }}  }
class C{  private void addVolumesToCG(URI cgURI,Collection<URI> vplexVolumeURIList,String cgName,String clusterName,VPlexApiClient client){  List<String> vplexVolumeNames=new ArrayList<String>();  List<Volume> vplexVolumes=new ArrayList<Volume>();  for (  URI vplexVolumeURI : vplexVolumeURIList) {    Volume vplexVolume=getDataObject(Volume.class,vplexVolumeURI,dbClient);    if (vplexVolume == null || vplexVolume.getInactive()) {      log.error(String.format("skipping null or inactive vplex volume %s",vplexVolumeURI.toString()));      continue;    }    vplexVolume.setConsistencyGroup(cgURI);    vplexVolumes.add(vplexVolume);    log.info(String.format("Adding VPLEX volume: %s (device label %s) to CG %s on cluster %s",vplexVolume.getNativeId(),vplexVolume.getDeviceLabel(),cgName,clusterName));    vplexVolumeNames.add(vplexVolume.getDeviceLabel());  }  client.addVolumesToConsistencyGroup(cgName,vplexVolumeNames);  log.info("Added volumes to consistency group.");  dbClient.updateObject(vplexVolumes);}  }
class C{  protected JPanel mainPanel(){  return mainPanel;}  }
class C{  @Override public void onGuiClosed(){  Keyboard.enableRepeatEvents(false);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:35.624 -0500",hash_original_method="8FAA759F9028DD0FC2323799369D6711",hash_generated_method="5C6D90FF7F0EA4F4D76354EF83F7E041") public void show(FragmentManager manager,String tag){  mDismissed=false;  mShownByMe=true;  FragmentTransaction ft=manager.beginTransaction();  ft.add(this,tag);  ft.commit();}  }
class C{  public boolean isFocusTraversable(){  return false;}  }
class C{  public WeibullDistr(Random seed,double alpha,double beta){  this(alpha,beta);  numGen.reseedRandomGenerator(seed.nextLong());}  }
class C{  public AbCalendar(Context context,Drawable caleBg,Drawable caleDot,Point posYear,List<Drawable> dYearArray,Point posMonth,List<Drawable> dMonthArray,Point posDate,List<Drawable> dDateArray,Point posWeek,List<Drawable> dWeekArray){  super(context);  mCaleBg=caleBg;  mCaleDot=caleDot;  mPosYear=posYear;  dArrayYear=dYearArray;  mPosMonth=posMonth;  dArrayMonth=dMonthArray;  mPosDate=posDate;  dArrayDate=dDateArray;  mPosWeek=posWeek;  dArrayWeek=dWeekArray;  mBgWidth=mCaleBg.getIntrinsicWidth();  mBgHeight=mCaleBg.getIntrinsicHeight();  mCalendar=new Time();  mDateTextSize=14;}  }
class C{  private static Placemark createAirportPlacemark(Position position,String airportName){  Placemark placemark=Placemark.createWithImage(position,ImageSource.fromResource(R.drawable.airport_terminal));  placemark.getAttributes().setImageOffset(Offset.bottomCenter()).setImageScale(NORMAL_IMAGE_SCALE);  placemark.setHighlightAttributes(new PlacemarkAttributes(placemark.getAttributes()).setImageScale(HIGHLIGHTED_IMAGE_SCALE));  placemark.setDisplayName(airportName);  return placemark;}  }
class C{  private void printMember(Element member,List<TypeElement> innerClass){  if (member.getKind().isField()) {    printFieldDecl((VariableElement)member);  } else   if (member instanceof ExecutableElement) {    printMethodDecl((ExecutableElement)member);  } else   if (member instanceof TypeElement) {    innerClass.add((TypeElement)member);  }}  }
class C{  public void lessThan() throws IOException {  writeCode(LESS);}  }
class C{  @Override public boolean doCheckFSExists(StorageSystem storage,FileDeviceInputOutput args) throws ControllerException {  _log.info("checking file system existence on array: ",args.getFsName());  boolean isFSExists=true;  try {    String portGroup=findVfilerName(args.getFs());    NetAppApi nApi=new NetAppApi.Builder(storage.getIpAddress(),storage.getPortNumber(),storage.getUsername(),storage.getPassword()).https(true).vFiler(portGroup).build();    List<String> fs=nApi.listFileSystems();    if (!fs.isEmpty() && fs.contains(args.getFsName())) {      isFSExists=true;    } else {      isFSExists=false;    }  } catch (  NetAppException e) {    _log.error("NetAppFileStorageDevice::doCheckFSExists failed with an Exception",e);  }  return isFSExists;}  }
class C{  public void validateQuorumStatus(){  String result=readZkInfo("ruok","imok");  log.info("Validate Zookeeper status result = {}",result);  if (result == null) {    throw BackupException.retryables.quorumServiceNotReady();  }}  }
class C{  public DomainObjectException(String message,DomainObjectExceptionBean bean,Throwable cause){  super(message,bean,cause);  this.bean=bean;}  }
class C{  public ResultSet execute() throws SQLException {  return this.execute(Utils.getBooleanProp(props,Utils.PROP_RESULT_NESTED_LATERAL,true));}  }
class C{  protected void addSuperTypesPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_ComplexType_superTypes_feature"),getString("_UI_PropertyDescriptor_description","_UI_ComplexType_superTypes_feature","_UI_ComplexType_type"),TypesPackage.Literals.COMPLEX_TYPE__SUPER_TYPES,true,false,true,null,null,null));}  }
class C{  public void revert(){  for (  ShapeDecoration shapeDecoration : decorations) {    shapeDecoration.revert();  }}  }
class C{  public T image(String url,boolean memCache,boolean fileCache,int targetWidth,int fallbackId,Bitmap preset,int animId,float ratio){  return image(url,memCache,fileCache,targetWidth,fallbackId,preset,animId,ratio,0,null);}  }
class C{  public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    return mv.visitTypeAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  @Override public void aboutToSaveSettings(Settings settings){  saveToSettings();}  }
class C{  public MessagePanel(){  this(null,null);}  }
class C{  private synchronized void addLock(FileLock lock) throws OverlappingFileLockException {  long lockEnd=lock.position() + lock.size();  for (  FileLock existingLock : locks) {    if (existingLock.position() > lockEnd) {      break;    }    if (existingLock.overlaps(lock.position(),lock.size())) {      throw new OverlappingFileLockException();    }  }  locks.add(lock);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:41.673 -0500",hash_original_method="2695E209DFB6DD433B7C6CE1A619CE79",hash_generated_method="F216DEEC3BE2568BC69A2E14A939134F") public void onSensorChanged(SensorEvent event){  assert (event.values.length == 3);  assert WebViewCore.THREAD_NAME.equals(Thread.currentThread().getName());  if (!mIsRunning) {    return;  }switch (event.sensor.getType()) {case Sensor.TYPE_ACCELEROMETER:    if (mGravityVector == null) {      mGravityVector=new float[3];    }  mGravityVector[0]=event.values[0];mGravityVector[1]=event.values[1];mGravityVector[2]=event.values[2];getOrientationUsingGetRotationMatrix();break;case Sensor.TYPE_MAGNETIC_FIELD:if (mMagneticFieldVector == null) {mMagneticFieldVector=new float[3];}mMagneticFieldVector[0]=event.values[0];mMagneticFieldVector[1]=event.values[1];mMagneticFieldVector[2]=event.values[2];getOrientationUsingGetRotationMatrix();break;default :assert (false);}}  }
class C{  public String toValue(){  return value;}  }
class C{  public boolean isPad(){  return pad;}  }
class C{  @Override public void onTurnReached(int currentTurn){  setOpen(false);  if (isOpen) {    final TurnNotifier turnNotifier=SingletonRepository.getTurnNotifier();    turnNotifier.notifyInSeconds(autoCloseDelay,this);  }}  }
class C{  public final boolean containsInAll(Point point){  if (point == null) {    String msg=Logging.getMessage("nullValue.PointIsNull");    Logging.logger().fine(msg);    throw new IllegalArgumentException(msg);  }  for (  PickPointFrustum frustum : this) {    if (!frustum.contains(point)) {      return false;    }  }  return true;}  }
class C{  static public MPrintFormat createFromTable(Properties ctx,int AD_Table_ID,int AD_PrintFormat_ID){  int AD_Client_ID=Env.getAD_Client_ID(ctx);  s_log.info("AD_Table_ID=" + AD_Table_ID + " - AD_Client_ID="+ AD_Client_ID);  MPrintFormat pf=new MPrintFormat(ctx,AD_PrintFormat_ID,null);  pf.setAD_Table_ID(AD_Table_ID);  String sql="SELECT TableName," + " (SELECT COUNT(*) FROM AD_PrintFormat x WHERE x.AD_Table_ID=t.AD_Table_ID AND x.AD_Client_ID=c.AD_Client_ID) AS Count," + " COALESCE (cpc.AD_PrintColor_ID, pc.AD_PrintColor_ID) AS AD_PrintColor_ID,"+ " COALESCE (cpf.AD_PrintFont_ID, pf.AD_PrintFont_ID) AS AD_PrintFont_ID,"+ " COALESCE (cpp.AD_PrintPaper_ID, pp.AD_PrintPaper_ID) AS AD_PrintPaper_ID "+ "FROM AD_Table t, AD_Client c"+ " LEFT OUTER JOIN AD_PrintColor cpc ON (cpc.AD_Client_ID=c.AD_Client_ID AND cpc.IsDefault='Y')"+ " LEFT OUTER JOIN AD_PrintFont cpf ON (cpf.AD_Client_ID=c.AD_Client_ID AND cpf.IsDefault='Y')"+ " LEFT OUTER JOIN AD_PrintPaper cpp ON (cpp.AD_Client_ID=c.AD_Client_ID AND cpp.IsDefault='Y'),"+ " AD_PrintColor pc, AD_PrintFont pf, AD_PrintPaper pp "+ "WHERE t.AD_Table_ID=? AND c.AD_Client_ID=?"+ " AND pc.IsDefault='Y' AND pf.IsDefault='Y' AND pp.IsDefault='Y'";  boolean error=true;  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,AD_Table_ID);    pstmt.setInt(2,AD_Client_ID);    rs=pstmt.executeQuery();    if (rs.next()) {      String TableName=rs.getString(1);      String ColumnName=TableName + "_ID";      String s=ColumnName;      if (!ColumnName.equals("T_Report_ID")) {        s=Msg.translate(ctx,ColumnName);        if (ColumnName.equals(s))         s=Msg.translate(ctx,TableName);      }      int count=rs.getInt(2);      if (count > 0)       s+="_" + (count + 1);      pf.setName(s);      pf.setAD_PrintColor_ID(rs.getInt(3));      pf.setAD_PrintFont_ID(rs.getInt(4));      pf.setAD_PrintPaper_ID(rs.getInt(5));      error=false;    } else     s_log.log(Level.SEVERE,"No info found " + AD_Table_ID);  } catch (  SQLException e) {    s_log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (error)   return null;  if (!pf.save())   return null;  pf.setItems(createItems(ctx,pf));  return pf;}  }
class C{  public static String toString(long n){  return IntegralToString.longToString(n);}  }
class C{  public static ValueTimestamp normalizeTimestamp(long absoluteDay,long nanos){  if (nanos > NANOS_PER_DAY || nanos < 0) {    long d;    if (nanos > NANOS_PER_DAY) {      d=nanos / NANOS_PER_DAY;    } else {      d=(nanos - NANOS_PER_DAY + 1) / NANOS_PER_DAY;    }    nanos-=d * NANOS_PER_DAY;    absoluteDay+=d;  }  return ValueTimestamp.fromDateValueAndNanos(dateValueFromAbsoluteDay(absoluteDay),nanos);}  }
class C{  public static void main(String[] args){  EvolutionState state;  ParameterDatabase parameters;  checkForHelp(args);  state=possiblyRestoreFromCheckpoint(args);  int currentJob=0;  if (state != null) {    try {      if (state.runtimeArguments == null)       Output.initialError("Checkpoint completed from job started by foreign program (probably GUI).  Exiting...");      args=state.runtimeArguments;      currentJob=((Integer)(state.job[0])).intValue() + 1;    } catch (    Exception e) {      Output.initialError("EvolutionState's jobs variable is not set up properly.  Exiting...");    }    state.run(EvolutionState.C_STARTED_FROM_CHECKPOINT);    cleanup(state);  }  parameters=loadParameterDatabase(args);  if (currentJob == 0)   currentJob=parameters.getIntWithDefault(new Parameter("current-job"),null,0);  if (currentJob < 0)   Output.initialError("The 'current-job' parameter must be >= 0 (or not exist, which defaults to 0)");  int numJobs=parameters.getIntWithDefault(new Parameter("jobs"),null,1);  if (numJobs < 1)   Output.initialError("The 'jobs' parameter must be >= 1 (or not exist, which defaults to 1)");  for (int job=currentJob; job < numJobs; job++) {{      if (parameters == null)       parameters=loadParameterDatabase(args);      state=initialize(parameters,job);      state.output.systemMessage("Job: " + job);      state.job=new Object[1];      state.job[0]=Integer.valueOf(job);      state.runtimeArguments=args;      if (numJobs > 1) {        String jobFilePrefix="job." + job + ".";        state.output.setFilePrefix(jobFilePrefix);        state.checkpointPrefix=jobFilePrefix + state.checkpointPrefix;      }      state.run(EvolutionState.C_STARTED_FRESH);      cleanup(state);      parameters=null;    }  }  System.exit(0);}  }
class C{  public boolean onShouldBeginInertia(PLIView view,CGPoint startPoint,CGPoint endPoint){  return true;}  }
class C{  public List<Interval> insert(List<Interval> intervals,Interval newInterval){  List<Interval> res=new ArrayList<>();  res.add(newInterval);  if (intervals == null || intervals.size() == 0) {    return res;  }  for (  Interval i : intervals) {    int start=res.get(res.size() - 1).start;    int end=res.get(res.size() - 1).end;    if (i.end < start) {      res.add(res.size() - 1,i);    } else     if (end < i.start) {      res.add(i);    } else {      start=Math.min(start,i.start);      end=Math.max(end,i.end);      res.set(res.size() - 1,new Interval(start,end));    }  }  return res;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:45.003 -0500",hash_original_method="A1D86D832E01EE0ED40EBBDB518014BA",hash_generated_method="A6F4EBCC052261AD4E1FC5AB5064FB3F") public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("ErrorInfoParser.parse");  ErrorInfoList list=new ErrorInfoList();  try {    headerName(TokenTypes.ERROR_INFO);    while (lexer.lookAhead(0) != '\n') {      do {        ErrorInfo errorInfo=new ErrorInfo();        errorInfo.setHeaderName(SIPHeaderNames.ERROR_INFO);        this.lexer.SPorHT();        this.lexer.match('<');        URLParser urlParser=new URLParser((Lexer)this.lexer);        GenericURI uri=urlParser.uriReference(true);        errorInfo.setErrorInfo(uri);        this.lexer.match('>');        this.lexer.SPorHT();        super.parse(errorInfo);        list.add(errorInfo);        if (lexer.lookAhead(0) == ',') {          this.lexer.match(',');        } else         break;      } while (true);    }    return list;  }  finally {    if (debug)     dbg_leave("ErrorInfoParser.parse");  }}  }
class C{  public final Vector3d vectorTo(IMovingAgent agent){  Vector3d v=new Vector3d();  v.sub(agent.getLocation(),location);  return v;}  }
class C{  private static PolicyNodeImpl removeInvalidNodes(PolicyNodeImpl rootNode,int certIndex,Set<String> initPolicies,CertificatePoliciesExtension currCertPolicies) throws CertPathValidatorException {  List<PolicyInformation> policyInfo=null;  try {    policyInfo=currCertPolicies.get(CertificatePoliciesExtension.POLICIES);  } catch (  IOException ioe) {    throw new CertPathValidatorException("Exception while " + "retrieving policyOIDs",ioe);  }  boolean childDeleted=false;  for (  PolicyInformation curPolInfo : policyInfo) {    String curPolicy=curPolInfo.getPolicyIdentifier().getIdentifier().toString();    if (debug != null)     debug.println("PolicyChecker.processPolicies() " + "processing policy second time: " + curPolicy);    Set<PolicyNodeImpl> validNodes=rootNode.getPolicyNodesValid(certIndex,curPolicy);    for (    PolicyNodeImpl curNode : validNodes) {      PolicyNodeImpl parentNode=(PolicyNodeImpl)curNode.getParent();      if (parentNode.getValidPolicy().equals(ANY_POLICY)) {        if ((!initPolicies.contains(curPolicy)) && (!curPolicy.equals(ANY_POLICY))) {          if (debug != null)           debug.println("PolicyChecker.processPolicies() " + "before deleting: policy tree = " + rootNode);          parentNode.deleteChild(curNode);          childDeleted=true;          if (debug != null)           debug.println("PolicyChecker.processPolicies() " + "after deleting: policy tree = " + rootNode);        }      }    }  }  if (childDeleted) {    rootNode.prune(certIndex);    if (!rootNode.getChildren().hasNext()) {      rootNode=null;    }  }  return rootNode;}  }
class C{  public void removeAttribute(String name,String namespace){  for (int i=0; i < this.attributes.size(); i++) {    XMLAttribute attr=(XMLAttribute)this.attributes.get(i);    boolean found=attr.getName().equals(name);    if (namespace == null) {      found&=(attr.getNamespace() == null);    } else {      found&=attr.getNamespace().equals(namespace);    }    if (found) {      this.attributes.remove(i);      return;    }  }}  }
class C{  private void nextToken() throws ParseException {  this.token=this.lexer.nextToken();  if (this.token == Token.UNKNOWN) {    throw new ParseException("Unrecognized token,",this.lexer.getCurrentOffset());  }}  }
class C{  public boolean freeCareful(T value){  if (checkDuplicate(value)) {    throw new IllegalStateException("tried to free object twice: " + value);  }  return free(value);}  }
class C{  public TrayNotification(){  this(Notifications.NOTICE);}  }
class C{  private Node<K,V> findPredecessor(Comparable<? super K> key){  if (key == null)   throw new NullPointerException();  for (; ; ) {    Index<K,V> q=head;    Index<K,V> r=q.right;    for (; ; ) {      if (r != null) {        Node<K,V> n=r.node;        K k=n.key;        if (n.value == null) {          if (!q.unlink(r))           break;          r=q.right;          continue;        }        if (key.compareTo(k) > 0) {          q=r;          r=r.right;          continue;        }      }      Index<K,V> d=q.down;      if (d != null) {        q=d;        r=d.right;      } else       return q.node;    }  }}  }
class C{  @SuppressWarnings("unused") public static void bindToRegister(long value){}  }
class C{  public char[] expandCurrentSegment(){  char[] curr=_currentSegment;  int len=curr.length;  int newLen=(len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN + 1) : Math.min(MAX_SEGMENT_LEN,len + (len >> 1));  _currentSegment=_charArray(newLen);  System.arraycopy(curr,0,_currentSegment,0,len);  return _currentSegment;}  }
class C{  private static boolean[] createSafeOctets(String safeChars){  int maxChar='z';  char[] safeCharArray=safeChars.toCharArray();  for (  char c : safeCharArray) {    maxChar=Math.max(c,maxChar);  }  boolean[] octets=new boolean[maxChar + 1];  for (int c='0'; c <= '9'; c++) {    octets[c]=true;  }  for (int c='A'; c <= 'Z'; c++) {    octets[c]=true;  }  for (int c='a'; c <= 'z'; c++) {    octets[c]=true;  }  for (  char c : safeCharArray) {    octets[c]=true;  }  return octets;}  }
class C{  public NodeSet(NodeSet nodelist){  this(32);  addNodes((NodeIterator)nodelist);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementinvalidcharacterexception1.class,args);}  }
class C{  public UpdateResponse add(Iterator<SolrInputDocument> docIterator) throws SolrServerException, IOException {  UpdateRequest req=new UpdateRequest();  req.setDocIterator(docIterator);  return req.process(this);}  }
class C{  public UpgradeSettingsRequest versions(Map<String,Tuple<Version,String>> versions){  this.versions=versions;  return this;}  }
class C{  @Override protected void unpackageClassifier(JarInputStream modelStream) throws IOException {  super.unpackageClassifier(modelStream);  JarStreams.getNextJarEntry(modelStream,MODEL_NAME);  this.modelFile=File.createTempFile("model",".crfsuite");  this.modelFile.deleteOnExit();  logger.log(Level.FINE,"Start writing model to " + modelFile.getAbsolutePath());  InputStream inputStream=new DataInputStream(modelStream);  OutputStream out=new FileOutputStream(modelFile);  byte buf[]=new byte[1024];  int len;  while ((len=inputStream.read(buf)) > 0) {    out.write(buf,0,len);  }  out.close();  inputStream.close();  logger.log(Level.FINE,"Model is written to " + modelFile.getAbsolutePath());}  }
class C{  public boolean isTemplate(){  return template;}  }
class C{  public static CalendarDay from(@Nullable Date date){  if (date == null) {    return null;  }  return from(CalendarUtils.getInstance(date));}  }
class C{  public Selector item(int index){  if (index < 0 || index >= length) {    return null;  }  return list[index];}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void pad() throws IOException {  if (bytesWritten > 0) {    int extra=(int)(bytesWritten % TarConstants.DATA_BLOCK);    if (extra > 0) {      write(new byte[TarConstants.DATA_BLOCK - extra]);    }  }}  }
class C{  private Conditions createConditions(TimePeriod tokenValidity,DelegationInfo delegationInfo,int renewCount,Set<String> audience){  assert tokenValidity != null;  assert tokenValidity.getStartTime() != null;  assert tokenValidity.getEndTime() != null;  assert delegationInfo != null;  assert renewCount >= 0;  assert audience != null;  Conditions conditions=new ConditionsBuilder().buildObject();  conditions.setNotBefore(new DateTime(tokenValidity.getStartTime()));  conditions.setNotOnOrAfter(new DateTime(tokenValidity.getEndTime()));  log.debug("Created conditions - notBefore: {}, notOnOrAfter: {}",tokenValidity.getStartTime(),tokenValidity.getEndTime());  conditions.getConditions().add(createProxyRestriction(delegationInfo.getDelegationCount()));  List<TokenDelegate> delegationChain=delegationInfo.getDelegationChain();  if (delegationChain != null && delegationChain.size() > 0) {    conditions.getConditions().add(createDelegationChain(delegationChain));  }  addRenewRestriction(conditions,renewCount);  final AudienceRestriction audienceCondition=createAudienceRestriction(audience);  if (audienceCondition != null) {    conditions.getAudienceRestrictions().add(audienceCondition);  }  return conditions;}  }
class C{  protected void insert(Object[] row) throws SQLException {  String key=getKey(row);  int hash=key.hashCode();  prepInsertRow.setInt(1,hash);  prepInsertRow.setInt(2,index.id);  prepInsertRow.setString(3,key);  prepInsertRow.execute();  ResultSet rs=prepInsertRow.getGeneratedKeys();  rs.next();  int rowId=rs.getInt(1);  prepInsertMap.setInt(1,rowId);  int[] wordIds=getWordIds(row);  for (  int id : wordIds) {    prepInsertMap.setInt(2,id);    prepInsertMap.execute();  }}  }
class C{  private Fraction(final int numerator,final int denominator){  super();  this.numerator=numerator;  this.denominator=denominator;}  }
class C{  @Override public int hashCode(){  int len=dictionaryKey.length;  int result=1;  for (int j=0; j < len; j++) {    result=31 * result + dictionaryKey[j];  }  for (  byte[] directSurrogateValue : noDictionaryKeys) {    for (int i=0; i < directSurrogateValue.length; i++) {      result=31 * result + directSurrogateValue[i];    }  }  for (  byte[] complexTypeKey : complexTypesKeys) {    for (int i=0; i < complexTypeKey.length; i++) {      result=31 * result + complexTypeKey[i];    }  }  return result;}  }
class C{  public void characters(char ch[],int start,int length) throws SAXException {  if (m_textPendingStart == -1) {    m_textPendingStart=m_chars.size();    m_coalescedTextType=m_textType;  } else   if (m_textType == DTM.TEXT_NODE) {    m_coalescedTextType=DTM.TEXT_NODE;  }  m_chars.append(ch,start,length);}  }
class C{  private boolean equals(Object o1,Object o2){  return o1 == null ? o2 == null : o1.equals(o2);}  }
class C{  private void initializeSocketCreators(final DistributionConfig distributionConfig){  if (distributionConfig == null) {    throw new GemFireConfigException("SocketCreatorFactory requires a valid distribution config.");  } else {    this.distributionConfig=distributionConfig;  }  SSLConfigurationFactory.setDistributionConfig(this.distributionConfig);}  }
class C{  public static JsonObject hashToJson(HashMap<String,Object> hash){  return new JsonObject(hash);}  }
class C{  public void testConnect_CheckOpenBeforeStatus() throws IOException {  assertFalse(this.channel1.isConnected());  this.channel1.connect(localAddr1);  assertTrue(this.channel1.isConnected());  this.channel1.close();  assertFalse(this.channel1.isOpen());  try {    this.channel1.connect(localAddr1);    fail("Should throw ClosedChannelException.");  } catch (  ClosedChannelException e) {  }}  }
class C{  public void put(String key,InputStream stream,String name,String contentType,boolean autoClose){  if (key != null && stream != null) {    streamParams.put(key,StreamWrapper.newInstance(stream,name,contentType,autoClose));  }}  }
class C{  public static boolean isNumeric(String str){  for (int i=str.length(); --i >= 0; ) {    if (!Character.isDigit(str.charAt(i))) {      return false;    }  }  return true;}  }
class C{  private void updateDebuggerLabel(){  final DebuggerTemplate debugger=m_addressSpace.getConfiguration().getDebuggerTemplate();  m_debuggerName.setText(debugger == null ? "-" : debugger.getName());}  }
class C{  public static Drawable decideIcon(ImageHolder imageHolder,Context ctx,int iconColor,boolean tint,int paddingDp){  if (imageHolder == null) {    return null;  } else {    return imageHolder.decideIcon(ctx,iconColor,tint,paddingDp);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private static byte[] toByteArray(BigInteger bi,int len){  byte[] b=bi.toByteArray();  int n=b.length;  if (n == len) {    return b;  }  if ((n == len + 1) && (b[0] == 0)) {    byte[] t=new byte[len];    System.arraycopy(b,1,t,0,len);    return t;  }  assert (n < len);  byte[] t=new byte[len];  System.arraycopy(b,0,t,(len - n),n);  return t;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector result=new Vector();  OptionUtils.add(result,super.listOptions());  OptionUtils.addOption(result,providersTipText(),"none","provider");  return OptionUtils.toEnumeration(result);}  }
class C{  private Expression addParenthesisIfNeeded(final Expression x){  final AST a=x.getAST();  if (!isParethesisNeeded(x))   return x;  final ParenthesizedExpression $=a.newParenthesizedExpression();  $.setExpression((Expression)ASTNode.copySubtree(a,x));  return $;}  }
class C{  public String format(final NameValuePair param){  final StringBuffer buffer=new StringBuffer();  format(buffer,param);  return buffer.toString();}  }
class C{  public static void addCrashHandler(Activity activity){  Thread.setDefaultUncaughtExceptionHandler(new CrashHandler(activity));}  }
class C{  @NotNull @ObjectiveCName("doStartAuthWithPhone:") public Promise<AuthStartRes> doStartPhoneAuth(long phone){  return modules.getAuthModule().doStartPhoneAuth(phone);}  }
class C{  public T register(T object){  objects.put(object.getID(),object);  return object;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static String u3(int v){  char[] result=new char[6];  for (int i=0; i < 6; i++) {    result[5 - i]=Character.forDigit(v & 0x0f,16);    v>>=4;  }  return new String(result);}  }
class C{  public void onAppHidden(){  isAppVisible=false;}  }
class C{  public String password(){  return password;}  }
class C{  public char toCharArray()[]{synchronized (lock) {    return Arrays.copyOf(buf,count);  }}  }
class C{  private boolean handleAuthPrompt(boolean isUserName){  SVNURL repositoryUrl=myExecutor.getCommand().requireRepositoryUrl();  if (needAskAuthentication(isUserName)) {    authentication=(SVNPasswordAuthentication)myRuntime.getAuthenticationService().requestCredentials(repositoryUrl,ISVNAuthenticationManager.PASSWORD);  }  return sendData(isUserName);}  }
class C{  public static void saveDocumentToFile(Document doc,String filePath){  if (doc == null) {    String message=Logging.getMessage("nullValue.DocumentIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (filePath == null) {    String message=Logging.getMessage("nullValue.FilePathIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  try {    java.io.FileOutputStream outputStream=new java.io.FileOutputStream(filePath);    saveDocumentToStream(doc,outputStream);  } catch (  IOException e) {    String message=Logging.getMessage("generic.ExceptionAttemptingToWriteXml",filePath);    Logging.logger().severe(message);    throw new WWRuntimeException(e);  }}  }
class C{  public void toLaxString(StringBuilder sb){  sb.append("$");  for (  String step : steps) {    if (step.charAt(0) != '[') {      sb.append(".");      sb.append(step);    }  }}  }
class C{  protected boolean[] multiInstanceHandler(){  boolean[] result=new boolean[2];  print("multi-instance kernel...");  if (m_Kernel instanceof MultiInstanceCapabilitiesHandler) {    println("yes");    result[0]=true;  } else {    println("no");    result[0]=false;  }  return result;}  }
class C{  public IElementType advance() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  CharSequence zzBufferL=zzBuffer;  char[] zzBufferArrayL=zzBufferArray;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++)); else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=(zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 20:{        return XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;      }case 42:    break;case 27:{    yybegin(START_TAG_NAME);    yypushback(yylength());  }case 43:break;case 24:{return XmlTokenType.XML_TAG_CHARACTERS;}case 44:break;case 16:{yybegin(ATTRIBUTE_VALUE_START);return XmlTokenType.XML_EQ;}case 45:break;case 15:{return XmlTokenType.XML_NAME;}case 46:break;case 21:{yybegin(TAG_ATTRIBUTES);return XmlTokenType.XML_ATTRIBUTE_VALUE_END_DELIMITER;}case 47:break;case 10:{yybegin(YYINITIAL);yypushback(1);break;}case 48:break;case 40:{return XmlTokenType.XML_DOCTYPE_PUBLIC;}case 49:break;case 38:{yybegin(COMMENT);return XmlTokenType.XML_COMMENT_START;}case 50:break;case 3:{return XmlTokenType.XML_REAL_WHITE_SPACE;}case 51:break;case 8:{int loc=getTokenStart();char prev=zzBuffer.charAt(loc - 1);char prevPrev=zzBuffer.charAt(loc - 2);if (prev == '-' && prevPrev == '-') {yybegin(YYINITIAL);return XmlTokenType.XML_COMMENT_END;}return XmlTokenType.XML_COMMENT_CHARACTERS;}case 52:break;case 33:{yybegin(END_TAG_NAME);yypushback(yylength());}case 53:break;case 1:{return XmlTokenType.XML_DATA_CHARACTERS;}case 54:break;case 26:{yybegin(COMMENT);return XmlTokenType.XML_CONDITIONAL_COMMENT_END;}case 55:break;case 34:{yybegin(END_TAG_NAME2);yypushback(yylength());}case 56:break;case 4:{return XmlTokenType.XML_BAD_CHARACTER;}case 57:break;case 14:{yybegin(YYINITIAL);return XmlTokenType.XML_TAG_END;}case 58:break;case 32:{yybegin(COMMENT);return XmlTokenType.XML_CONDITIONAL_COMMENT_START_END;}case 59:break;case 30:{return XmlTokenType.XML_END_TAG_START;}case 60:break;case 36:{yybegin(YYINITIAL);return XmlTokenType.XML_COMMENT_END;}case 61:break;case 41:{yybegin(DOC_TYPE);return XmlTokenType.XML_DOCTYPE_START;}case 62:break;case 13:{yybegin(TAG_ATTRIBUTES);return XmlTokenType.XML_WHITE_SPACE;}case 63:break;case 2:{return XmlTokenType.XML_PI_TARGET;}case 64:break;case 31:{yybegin(YYINITIAL);return XmlTokenType.XML_EMPTY_ELEMENT_END;}case 65:break;case 37:{yybegin(C_COMMENT_END);return XmlTokenType.XML_CONDITIONAL_COMMENT_END_START;}case 66:break;case 29:{yybegin(PROCESSING_INSTRUCTION);return XmlTokenType.XML_PI_START;}case 67:break;case 9:{yybegin(C_COMMENT_START);return XmlTokenType.XML_CONDITIONAL_COMMENT_START;}case 68:break;case 23:{yybegin(TAG_CHARACTERS);return XmlTokenType.XML_NAME;}case 69:break;case 6:{yybegin(YYINITIAL);return XmlTokenType.XML_DOCTYPE_END;}case 70:break;case 39:{return XmlTokenType.XML_CHAR_ENTITY_REF;}case 71:break;case 12:{return XmlTokenType.XML_START_TAG_START;}case 72:break;case 5:{return XmlTokenType.XML_WHITE_SPACE;}case 73:break;case 35:{return XmlTokenType.XML_ENTITY_REF_TOKEN;}case 74:break;case 25:{yybegin(COMMENT);return XmlTokenType.XML_COMMENT_CHARACTERS;}case 75:break;case 11:{yybegin(BEFORE_TAG_ATTRIBUTES);return XmlTokenType.XML_NAME;}case 76:break;case 22:{yybegin(YYINITIAL);return XmlTokenType.XML_PI_END;}case 77:break;case 18:{yybegin(ATTRIBUTE_VALUE_DQ);return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;}case 78:break;case 19:{yybegin(ATTRIBUTE_VALUE_SQ);return XmlTokenType.XML_ATTRIBUTE_VALUE_START_DELIMITER;}case 79:break;case 28:{yybegin(START_TAG_NAME2);yypushback(yylength());}case 80:break;case 17:{yybegin(TAG_ATTRIBUTES);return XmlTokenType.XML_ATTRIBUTE_VALUE_TOKEN;}case 81:break;case 7:{return XmlTokenType.XML_COMMENT_CHARACTERS;}case 82:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;return null;} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public GeometricObject(String color,boolean filled){  dateCreated=new java.util.Date();  this.color=color;  this.filled=filled;}  }
class C{  protected void assertLength(int length,char[] array){  assertEquals(length,array.length);}  }
class C{  public IMatrix _opAppendHorizontally(final IScope scope,final IMatrix b){  final GamaIntMatrix a=this;  GamaIntMatrix aprime=new GamaIntMatrix(a.getRows(scope),a.getCols(scope));  aprime=(GamaIntMatrix)a._reverse(scope);  GamaIntMatrix bprime=new GamaIntMatrix(b.getRows(scope),b.getCols(scope));  bprime=(GamaIntMatrix)((GamaIntMatrix)b)._reverse(scope);  final GamaIntMatrix c=(GamaIntMatrix)aprime.opAppendVertically(scope,bprime);  final GamaIntMatrix cprime=(GamaIntMatrix)c._reverse(scope);  return cprime;}  }
class C{  private void writeOFMessagesToSwitch(DatapathId dpid,List<OFMessage> messages){  IOFSwitch ofswitch=switchService.getSwitch(dpid);  if (ofswitch != null) {    if (log.isDebugEnabled()) {      log.debug("Sending {} new entries to {}",messages.size(),dpid);    }    ofswitch.write(messages);  }}  }
class C{  public final int indexOf(Object elem,int index){  for (int i=index; i < m_firstFree; i++) {    if (m_map[i] == elem)     return i;  }  return java.lang.Integer.MIN_VALUE;}  }
class C{  protected void assertJSPAndFTLOutputEquals(String webAppName,String webAppRelURLWithoutExt) throws Exception {  assertOutputsEqual(webAppName,webAppRelURLWithoutExt + ".jsp",webAppRelURLWithoutExt + ".ftl");}  }
class C{  public ZkClusterData coreToBestCoreMapping(Collection<String> collectionNames) throws IOException {  Map<String,Map<String,String>> sourceCollectionToNodeMap=getZkClusterData().getCollectionToNodeMapping();  Map<String,SolrCore> coreToBestReplicaMapping=new HashMap<String,SolrCore>();  coreMapperForCluster=new SolrCoreMapper(zkClusterData,collectionNames);  for (  String sourceCollection : collectionNames) {    Map<String,String> sourceCoreToNodeMap=sourceCollectionToNodeMap.get(sourceCollection);    for (    String srcCore : sourceCoreToNodeMap.keySet()) {      SolrCore bestCore=coreMapperForCluster.fetchBestCoreByHealthForReplica(srcCore);      coreToBestReplicaMapping.put(srcCore,bestCore);    }  }  getZkClusterData().setCoreToBestReplicaMapping(coreToBestReplicaMapping);  return getZkClusterData();}  }
class C{  protected ConcurrentLinkedHashMap<Integer,Integer> newWarmedMap(){  ConcurrentLinkedHashMap<Integer,Integer> map=newEmptyMap();  warmUp(map,0,capacity());  return map;}  }
class C{  private Settings(){}  }
class C{  public static PeriodType yearWeekDayTime(){  PeriodType type=cYWDTime;  if (type == null) {    type=new PeriodType("YearWeekDayTime",new DurationFieldType[]{DurationFieldType.years(),DurationFieldType.weeks(),DurationFieldType.days(),DurationFieldType.hours(),DurationFieldType.minutes(),DurationFieldType.seconds(),DurationFieldType.millis()},new int[]{0,-1,1,2,3,4,5,6});    cYWDTime=type;  }  return type;}  }
class C{  ThrowableSet mightThrow(SootMethod m){  return ThrowableSet.Manager.v().ALL_THROWABLES;}  }
class C{  public boolean isUpdatingFirmware(){synchronized (isUpdatingFirmwareLock) {    return isUpdatingFirmware;  }}  }
class C{  public void produceUniqueMsgs(String text,int num,boolean purgeFirst) throws Exception {  String[] array=new String[num];  for (int i=0; i < num; i++) {    array[i]="" + i + ":"+ text;  }  produceMsg(array,purgeFirst);}  }
class C{  public int compareTo(Character chr){  return chr - startText.charAt(0);}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  static <T>GeneralRange<T> range(Comparator<? super T> comparator,@Nullable T lower,BoundType lowerType,@Nullable T upper,BoundType upperType){  return new GeneralRange<T>(comparator,true,lower,lowerType,true,upper,upperType);}  }
class C{  public void call(){synchronized (mHandleQueue) {    if (mFuture == null) {      mFuture=EspBaseApiUtil.submit(new GroupTask());    }    if (mHandleQueue.size() < 1) {      mHandleQueue.add(true);    }  }}  }
class C{  public PSPSettingHistory(PSPSetting c){  super(c);  if (c.getPsp() != null) {    setPspObjKey(c.getPsp().getKey());  }}  }
class C{  public void onBackPressed(){  Intent changeToMain=new Intent(getApplicationContext(),MainActivity.class);  startActivity(changeToMain);}  }
class C{  public boolean isEditable(){  return editable;}  }
class C{  public void restoreWindows(){  Iterator<Container> iter;  Container frame;  iter=getWindowList();  while (iter.hasNext()) {    frame=iter.next();    try {      if (frame instanceof ChildFrameMDI) {        ((ChildFrameMDI)frame).setIcon(false);      } else       if (frame instanceof ChildFrameSDI) {        ((ChildFrameSDI)frame).setExtendedState(JFrame.NORMAL);      }    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  public void increaseRefcount(){  refcount++;}  }
class C{  protected final void FPR_2INT(Instruction s,RegisterOperand result,Operand value){  MemoryOperand M;  if (value instanceof MemoryOperand) {    EMIT(CPOS(s,MIR_Move.create(IA32_FLD,myFP0(),value)));  } else {    if (value instanceof BURSManagedFPROperand) {      if (VM.VerifyAssertions) {        opt_assert(value.similar(myFP0()));      }      EMIT(CPOS(s,MIR_Move.create(IA32_FSTP,MO_CONV(DW),value)));      EMIT(CPOS(s,MIR_Move.create(IA32_FLD,myFP0(),MO_CONV(DW))));    } else {      EMIT(CPOS(s,MIR_Move.create(IA32_FMOV,MO_CONV(DW),value)));      EMIT(CPOS(s,MIR_Move.create(IA32_FLD,myFP0(),MO_CONV(DW))));    }  }  EMIT(CPOS(s,MIR_Move.create(IA32_FIST,MO_CONV(DW),myFP0())));  Register one=regpool.getInteger();  Register isPositive=regpool.getInteger();  Register isNegative=regpool.getInteger();  EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(one,TypeReference.Int),IC(1))));  EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(isPositive,TypeReference.Int),IC(0))));  EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(isNegative,TypeReference.Int),IC(0))));  EMIT(CPOS(s,MIR_Nullary.create(IA32_FLDZ,myFP0())));  EMIT(CPOS(s,MIR_Compare.create(IA32_FCOMIP,myFP0(),myFP1())));  EMIT(CPOS(s,MIR_CondMove.create(IA32_CMOV,new RegisterOperand(isPositive,TypeReference.Int),new RegisterOperand(one,TypeReference.Int),IA32ConditionOperand.LLT())));  EMIT(CPOS(s,MIR_CondMove.create(IA32_CMOV,new RegisterOperand(isNegative,TypeReference.Int),new RegisterOperand(one,TypeReference.Int),IA32ConditionOperand.LGT())));  EMIT(CPOS(s,MIR_Move.create(IA32_FILD,myFP0(),MO_CONV(DW))));  Register addee=regpool.getInteger();  Register subtractee=regpool.getInteger();  EMIT(CPOS(s,MIR_Compare.create(IA32_FCOMIP,myFP0(),myFP1())));  EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(addee,TypeReference.Int),IC(0))));  EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(subtractee,TypeReference.Int),IC(0))));  EMIT(CPOS(s,MIR_CondMove.create(IA32_CMOV,new RegisterOperand(addee,TypeReference.Int),new RegisterOperand(one,TypeReference.Int),IA32ConditionOperand.LLT())));  EMIT(CPOS(s,MIR_CondMove.create(IA32_CMOV,new RegisterOperand(subtractee,TypeReference.Int),new RegisterOperand(one,TypeReference.Int),IA32ConditionOperand.LGT())));  EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_AND,new RegisterOperand(addee,TypeReference.Int),new RegisterOperand(isNegative,TypeReference.Int))));  EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_AND,new RegisterOperand(subtractee,TypeReference.Int),new RegisterOperand(isPositive,TypeReference.Int))));  EMIT(CPOS(s,MIR_Move.create(IA32_MOV,result.copy(),MO_CONV(DW))));  EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_ADD,result.copy(),new RegisterOperand(addee,TypeReference.Int))));  EMIT(CPOS(s,MIR_BinaryAcc.create(IA32_SUB,result.copy(),new RegisterOperand(subtractee,TypeReference.Int))));  M=loadFromJTOC(burs.ir,Entrypoints.maxintField.getOffset(),QW);  EMIT(CPOS(s,MIR_Move.create(IA32_FLD,myFP0(),M)));  EMIT(CPOS(s,MIR_Compare.create(IA32_FCOMIP,myFP0(),myFP1())));  Register maxInt=regpool.getInteger();  EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(maxInt,TypeReference.Int),IC(Integer.MAX_VALUE))));  EMIT(CPOS(s,MIR_CondMove.create(IA32_CMOV,result.copy(),new RegisterOperand(maxInt,TypeReference.Int),IA32ConditionOperand.LLT())));  M=MemoryOperand.D(Magic.getTocPointer().plus(Entrypoints.minintField.getOffset()),QW,null,null);  EMIT(CPOS(s,MIR_Move.create(IA32_FLD,myFP0(),M)));  EMIT(CPOS(s,MIR_Compare.create(IA32_FCOMIP,myFP0(),myFP1())));  Register minInt=regpool.getInteger();  EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(minInt,TypeReference.Int),IC(Integer.MIN_VALUE))));  EMIT(CPOS(s,MIR_CondMove.create(IA32_CMOV,result.copy(),new RegisterOperand(minInt,TypeReference.Int),IA32ConditionOperand.LGT())));  EMIT(CPOS(s,MIR_Compare.create(IA32_FCOMIP,myFP0(),myFP0())));  Register zero=regpool.getInteger();  EMIT(CPOS(s,MIR_Move.create(IA32_MOV,new RegisterOperand(zero,TypeReference.Int),IC(0))));  EMIT(CPOS(s,MIR_CondMove.create(IA32_CMOV,result.copy(),new RegisterOperand(zero,TypeReference.Int),IA32ConditionOperand.PE())));}  }
class C{  public boolean isSizeToFit(){  return mHelper.isEnabled();}  }
class C{  public String format(TemporalAccessor temporal){  StringBuilder buf=new StringBuilder(32);  formatTo(temporal,buf);  return buf.toString();}  }
class C{  public void onServiceResponse(Bundle bundle){  mResponder.onServiceResponse(bundle);}  }
class C{  @Override public boolean isRollover(){  return shouldActLikeButton() ? over : super.isRollover();}  }
class C{  public static LSSerializer createLSSerializer(DOMImplementationLS impl,boolean includeXmlDeclaration,boolean enablePrettyPrint){  LSSerializer writer=impl.createLSSerializer();  DOMConfiguration domConfig=writer.getDomConfig();  domConfig.setParameter("xml-declaration",includeXmlDeclaration);  domConfig.setParameter("format-pretty-print",enablePrettyPrint);  return writer;}  }
class C{  private void saveCurrentAppVersionIntoPreferences(){  try {    PackageInfo info=getPackageManager().getPackageInfo(getPackageName(),0);    SharedPreferenceHelper.set(R.string.pref_last_version_code,info.versionCode);    SharedPreferenceHelper.set(R.string.pref_last_version_name,info.versionName);  } catch (  PackageManager.NameNotFoundException e) {  }}  }
class C{  public void writeLbMaps(PrintWriter fout) throws IOException {  if (lbStr2Int == null) {    return;  }  fout.println(Integer.toString(lbStr2Int.size()));  for (Iterator it=lbStr2Int.keySet().iterator(); it.hasNext(); ) {    String lbStr=(String)it.next();    Integer lbInt=(Integer)lbStr2Int.get(lbStr);    fout.println(lbStr + " " + lbInt.toString());  }  fout.println(Option.modelSeparator);}  }
class C{  public boolean isSetSrcCluster(){  return this.srcCluster != null;}  }
class C{  public SimpleLongArrayList(long[] elements){  elements(elements);}  }
class C{  public MaterialBrowser(java.awt.Frame parent,boolean modal,ProjectAssetManager assetManager,MaterialPropertyEditor editor){  this.assetManager=assetManager;  this.editor=editor;  prefs=Preferences.userNodeForPackage(this.getClass());  initComponents();  loadAvailableMaterials();  setSelectedMaterial((Material)editor.getValue());  setLocationRelativeTo(null);}  }
class C{  public void addStream(StreamInfo streamInfo){  list.addStream(streamInfo);  channelInfo.update(streamInfo);}  }
class C{  @Override public synchronized void addRequestProperty(String key,String value){  if (connected || connecting)   throw new IllegalStateException("Already connected");  if (key == null)   throw new NullPointerException("key is null");  if (isExternalMessageHeaderAllowed(key,value)) {    requests.add(key,value);    if (!key.equalsIgnoreCase("Content-Type")) {      userHeaders.add(key,value);    }  }}  }
class C{  public CoreDescriptor(CoreContainer container,String name,String instanceDir,Properties coreProps){  this(container,name,instanceDir,coreProps,null);}  }
class C{  public FlashAACPlayer(PlayerCallback playerCallback,int audioBufferCapacityMs,int decodeBufferCapacityMs){  setPlayerCallback(playerCallback);  setAudioBufferCapacityMs(audioBufferCapacityMs);  setDecodeBufferCapacityMs(decodeBufferCapacityMs);  decoder=createDecoder();}  }
class C{  public synchronized void replaceItem(String newValue,int index){  remove(index);  add(newValue,index);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SGenPackage.DEPRECATABLE_ELEMENT__DEPRECATED:    return deprecated != DEPRECATED_EDEFAULT;case SGenPackage.DEPRECATABLE_ELEMENT__COMMENT:  return COMMENT_EDEFAULT == null ? comment != null : !COMMENT_EDEFAULT.equals(comment);}return super.eIsSet(featureID);}  }
class C{  public static TreeNode createTree(int levels){  if (levels == 0) {    return null;  } else {    TreeNode n=new TreeNode();    n.left=createTree(levels - 1);    n.right=createTree(levels - 1);    return n;  }}  }
class C{  public ST createSingleton(Token templateToken){  String template;  if (templateToken.getType() == GroupParser.BIGSTRING || templateToken.getType() == GroupParser.BIGSTRING_NO_NL) {    template=Misc.strip(templateToken.getText(),2);  } else {    template=Misc.strip(templateToken.getText(),1);  }  CompiledST impl=compile(getFileName(),null,null,template,templateToken);  ST st=createStringTemplateInternally(impl);  st.groupThatCreatedThisInstance=this;  st.impl.hasFormalArgs=false;  st.impl.name=ST.UNKNOWN_NAME;  st.impl.defineImplicitlyDefinedTemplates(this);  return st;}  }
class C{  public boolean step(){  final int pc=state.pc;  final Instruction instruction=getInstruction();  if (instruction != null) {    instruction.step(this);  }  final boolean stateChanged=state.pc != pc;  state.validate();  return stateChanged;}  }
class C{  protected int numDataNodes(TSTNode startingNode){  return recursiveNodeCalculator(startingNode,true,0);}  }
class C{  private boolean stop(){  if (!wait) {    return true;  }  wait=false;  try {    runnerStopped.await();  } catch (  InterruptedException e) {    return false;  }  return true;}  }
class C{  private void leafEntryIDs(MkAppTreeNode<O> node,ModifiableDBIDs result){  if (node.isLeaf()) {    for (int i=0; i < node.getNumEntries(); i++) {      MkAppEntry entry=node.getEntry(i);      result.add(((LeafEntry)entry).getDBID());    }  } else {    for (int i=0; i < node.getNumEntries(); i++) {      MkAppTreeNode<O> childNode=getNode(node.getEntry(i));      leafEntryIDs(childNode,result);    }  }}  }
class C{  private static int indexOf(Object o,Object[] elements,int index,int fence){  if (o == null) {    for (int i=index; i < fence; i++)     if (elements[i] == null)     return i;  } else {    for (int i=index; i < fence; i++)     if (o.equals(elements[i]))     return i;  }  return -1;}  }
class C{  public synchronized Vertex copy(){  Vertex copy=this.network.createVertex();  for (Iterator<Relationship> iterator=allRelationships(); iterator.hasNext(); ) {    Relationship relationship=iterator.next();    copy.addRelationship(relationship.getType(),relationship.getTarget());  }  return copy;}  }
class C{  public XPatternTokenizer(AttributeFactory factory,Pattern pattern,int group){  super(factory);  this.group=group;  matcher=pattern.matcher("");  if (group >= 0 && group > matcher.groupCount()) {    throw new IllegalArgumentException("invalid group specified: pattern only has: " + matcher.groupCount() + " capturing groups");  }}  }
class C{  public synchronized void renameFile(JDBCSequentialFile file,String newFileName) throws SQLException {  try {    connection.setAutoCommit(false);    renameFile.setString(1,newFileName);    renameFile.setInt(2,file.getId());    renameFile.executeUpdate();    connection.commit();  } catch (  SQLException e) {    connection.rollback();    throw e;  }}  }
class C{  public static NSObject parse(InputStream is) throws ParserConfigurationException, IOException, SAXException, PropertyListFormatException, ParseException {  return parse(getDocBuilder().parse(is));}  }
class C{  protected void shutdown(){  this.interrupt();  try {    _serve_sock.close();  } catch (  Exception e) {  }}  }
class C{  public void stop(){  stopTimer();}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) public boolean contains(T v){  if (lowerEndpoint == null) {    int r=((Comparable)v).compareTo(upperEndpoint);    return ubt == BoundType.OPEN ? r < 0 : r <= 0;  }  if (upperEndpoint == null) {    int r=((Comparable)v).compareTo(lowerEndpoint);    return lbt == BoundType.OPEN ? r > 0 : r >= 0;  }  int r=((Comparable)v).compareTo(upperEndpoint);  boolean ok1=ubt == BoundType.OPEN ? r < 0 : r <= 0;  if (!ok1)   return false;  r=((Comparable)v).compareTo(lowerEndpoint);  return lbt == BoundType.OPEN ? r > 0 : r >= 0;}  }
class C{  public TransformVariablesScale(BBOBFunction function,double factor){  super(function);  this.factor=factor;}  }
class C{  @Override public String toString(){  return ("Range[" + this.lower + ","+ this.upper+ "]");}  }
class C{  public double[][] generateRandomSamples(EvolutionState state,double[] min,double[] max,int numPoints,int threadnum){  int vars=max.length;  double[][] d=new double[numPoints][vars];  for (int i=0; i < d.length; i++)   for (int j=0; j < vars; j++)   d[i][j]=state.random[threadnum].nextDouble(true,true) * (max[j] - min[j]) + min[j];  return d;}  }
class C{  public int delete(){  return DELETE().deleteByExample(this.example);}  }
class C{  public void testNoWriter() throws Exception {  useFactory(null);  System.setProperty("solr.tests.nrtMode","false");  try {    slaveJetty.stop();    masterJetty.stop();    slaveJetty.start(true);    masterJetty.start(true);    index(slaveClient,"id","123456");    slaveClient.commit();    slaveJetty.stop();    slaveJetty.start(true);  }  finally {    System.clearProperty("solr.tests.nrtMode");  }  CoreContainer cores=((SolrDispatchFilter)slaveJetty.getDispatchFilter().getFilter()).getCores();  Collection<SolrCore> theCores=cores.getCores();  assertEquals(1,theCores.size());  SolrCore core=(SolrCore)theCores.toArray()[0];  assertNull(core.getDeletionPolicy().getLatestCommit());  pullFromMasterToSlave();  resetFactory();}  }
class C{  static private String munge(final String s){  return s.replaceAll("[\\W]","_");}  }
class C{  private String extract_jar_path(URL url){  assert url.getProtocol().equals("jar") : url.toString();  String path=url.getFile();  path=path.replaceFirst("^[^:]*:","");  path=path.replaceFirst("![^!]*$","");  return path;}  }
class C{  private static void writeInfoToFile(File file,DiscoverInfo info) throws IOException {  DataOutputStream dos=new DataOutputStream(new FileOutputStream(file));  try {    dos.writeUTF(info.toXML());  }  finally {    dos.close();  }}  }
class C{  public static void resetAllSettings(Activity activityMyTracks,boolean keepInSettingList){  findMenuItem(activityMyTracks.getString(R.string.menu_settings),true);  SOLO.clickOnText(activityMyTracks.getString(R.string.settings_advanced));  Assert.assertTrue(SOLO.waitForText(activityMyTracks.getString(R.string.settings_reset)));  SOLO.clickOnText(activityMyTracks.getString(R.string.settings_reset));  getButtonOnScreen(trackListActivity.getString(R.string.generic_yes),true,true);  Assert.assertTrue(SOLO.waitForText(activityMyTracks.getString(R.string.settings_reset_done)));  instrumentation.waitForIdleSync();  SOLO.goBack();  instrumentation.waitForIdleSync();  if (!keepInSettingList) {    SOLO.goBack();  }}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public static double pow(double x,double y){  if ((x < 0) && (y == (int)y))   return (((int)y) & 1) == 0 ? pow(-x,y) : -pow(-x,y);  return MathLib.exp(y * MathLib.log(x));}  }
class C{  @SuppressWarnings("unchecked") private static void handleMethodNode(GetStaticGraph staticUsageTree,ClassNode cn,MethodNode mn,int depth){  InsnList instructions=mn.instructions;  Iterator<AbstractInsnNode> iterator=instructions.iterator();  while (iterator.hasNext()) {    AbstractInsnNode insn=iterator.next();    if (insn instanceof MethodInsnNode) {      handleMethodInsnNode(staticUsageTree,cn,mn,(MethodInsnNode)insn,depth + 1);    } else     if (insn instanceof FieldInsnNode) {      handleFieldInsnNode(staticUsageTree,cn,mn,(FieldInsnNode)insn,depth + 1);    }  }}  }
class C{  public RawTurnoutOperationConfig(TurnoutOperation op){  super(op);}  }
class C{  public Vector3D(Vector3D a){  this.x=a.x;  this.y=a.y;  this.z=a.z;}  }
class C{  protected SystemMemberBridgeServerImpl(SystemMemberCacheImpl cache,AdminBridgeServer bridgeInfo) throws AdminException {  this.vm=cache.getVM();  this.cache=cache.getCacheInfo();  this.bridgeInfo=bridgeInfo;}  }
class C{  public void run(){  boolean periodic=isPeriodic();  if (!canRunInCurrentRunState(periodic))   cancel(false); else   if (!periodic)   ScheduledFutureTask.super.run(); else   if (ScheduledFutureTask.super.runAndReset()) {    setNextRunTime();    reExecutePeriodic(outerTask);  }}  }
class C{  @HLEFunction(nid=0x7E65B999,version=150) public int sceKernelCancelAlarm(@CheckArgument("checkAlarmID") int alarmUid){  SceKernelAlarmInfo sceKernelAlarmInfo=alarms.get(alarmUid);  cancelAlarm(sceKernelAlarmInfo);  return 0;}  }
class C{  public SessionServiceCallbackHandler(Object clientData){  this.clientData=clientData;}  }
class C{  public static String resolveVariables(String input){  return resolveVariables(input,null,true);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"btc");  if (instruction.getOperands().size() != 2) {    throw new InternalTranslationException("Error: Argument instruction is not a btc instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final IOperandTree targetOperand=instruction.getOperands().get(0);  final IOperandTree sourceOperand=instruction.getOperands().get(1);  final TranslationResult targetResult=Helpers.translateOperand(environment,offset,targetOperand,true);  instructions.addAll(targetResult.getInstructions());  offset=baseOffset + instructions.size();  final TranslationResult sourceResult=Helpers.translateOperand(environment,offset,sourceOperand,true);  instructions.addAll(sourceResult.getInstructions());  offset=baseOffset + instructions.size();  final String negatedIndex=environment.getNextVariableString();  final String shiftedTarget=environment.getNextVariableString();  instructions.add(ReilHelpers.createSub(offset++,OperandSize.BYTE,"0",sourceResult.getSize(),sourceResult.getRegister(),OperandSize.WORD,negatedIndex));  instructions.add(ReilHelpers.createBsh(offset++,targetResult.getSize(),targetResult.getRegister(),OperandSize.BYTE,negatedIndex,targetResult.getSize(),shiftedTarget));  instructions.add(ReilHelpers.createAnd(offset++,targetResult.getSize(),shiftedTarget,OperandSize.BYTE,"1",OperandSize.BYTE,Helpers.CARRY_FLAG));  final String shiftedIndex=environment.getNextVariableString();  final String andedResult=environment.getNextVariableString();  instructions.add(ReilHelpers.createBsh(offset++,OperandSize.BYTE,"1",sourceResult.getSize(),sourceResult.getRegister(),targetResult.getSize(),shiftedIndex));  instructions.add(ReilHelpers.createXor(offset++,targetResult.getSize(),targetResult.getRegister(),targetResult.getSize(),shiftedIndex,targetResult.getSize(),andedResult));  Helpers.writeBack(environment,offset++,targetOperand,andedResult,targetResult.getSize(),targetResult.getAddress(),targetResult.getType(),instructions);}  }
class C{  public static double valueAsDouble(String key,double defaultVal){  String val=valueFor(key);  if (val == null) {    return defaultVal;  }  double dval;  try {    dval=Double.valueOf(val).doubleValue();  } catch (  NumberFormatException nex) {    XRLog.exception("Property '" + key + "' was requested as a double, but "+ "value of '"+ val+ "' is not a double. Check configuration.");    dval=defaultVal;  }  return dval;}  }
class C{  public CToggleStarViewsAction(final Window parent,final INaviView[] views){  super("Toggle view stars");  m_parent=parent;  m_views=views.clone();}  }
class C{  public static void clickAdapterViewItem(int position,int resourceId){  onData(anything()).inAdapterView(allOf(withId(resourceId),isDisplayed())).atPosition(position).perform(click());}  }
class C{  public T caseGeneratorModel(GeneratorModel object){  return null;}  }
class C{  public void runTest() throws Throwable {  String localName="domestic";  String namespaceURI="http://www.usa.com";  Document doc;  NodeList elementList;  Element testNode;  boolean state;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("address");  testNode=(Element)elementList.item(0);  state=testNode.hasAttributeNS(namespaceURI,localName);  assertTrue("hasAttribute",state);}  }
class C{  protected void startNode(int node) throws org.xml.sax.SAXException {  XPathContext xcntxt=m_transformer.getXPathContext();  try {    if (DTM.ELEMENT_NODE == m_dtm.getNodeType(node)) {      xcntxt.pushCurrentNode(node);      if (m_startNode != node) {        super.startNode(node);      } else {        String elemName=m_dtm.getNodeName(node);        String localName=m_dtm.getLocalName(node);        String namespace=m_dtm.getNamespaceURI(node);        m_handler.startElement(namespace,localName,elemName);        boolean hasNSDecls=false;        DTM dtm=m_dtm;        for (int ns=dtm.getFirstNamespaceNode(node,true); DTM.NULL != ns; ns=dtm.getNextNamespaceNode(node,ns,true)) {          SerializerUtils.ensureNamespaceDeclDeclared(m_handler,dtm,ns);        }        for (int attr=dtm.getFirstAttribute(node); DTM.NULL != attr; attr=dtm.getNextAttribute(attr)) {          SerializerUtils.addAttribute(m_handler,attr);        }      }    } else {      xcntxt.pushCurrentNode(node);      super.startNode(node);      xcntxt.popCurrentNode();    }  } catch (  javax.xml.transform.TransformerException te) {    throw new org.xml.sax.SAXException(te);  }}  }
class C{  @Override public void onCreate(){  super.onCreate();  Log_OC.d(TAG,"Creating service");  mNotificationManager=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);  HandlerThread thread=new HandlerThread("FileUploaderThread",Process.THREAD_PRIORITY_BACKGROUND);  thread.start();  mServiceLooper=thread.getLooper();  mServiceHandler=new ServiceHandler(mServiceLooper,this);  mBinder=new FileUploaderBinder();  AccountManager am=AccountManager.get(getApplicationContext());  am.addOnAccountsUpdatedListener(this,null,false);}  }
class C{  public boolean hit(Rectangle rect,Shape s,boolean onStroke){  Shape shape=((ShapeTransformer)transformer).transform(s);  return delegate.hit(rect,shape,onStroke);}  }
class C{  public ThreadedListenerManager(ExecutorService pool){  managerNumber=MANAGER_COUNT.getAndIncrement();  this.pool=pool;}  }
class C{  @Override public double[] projectDataToRenderSpace(NumberVector data){  return projectScaledToRender(projectDataToScaledSpace(data));}  }
class C{  public CGRect rect(){  CGPoint pos=getPositionRef();  CGPoint pnt=getAnchorPointRef();  CGSize size=getContentSizeRef();  return CGRect.make(pos.x - size.width * pnt.x,pos.y - size.height * pnt.y,size.width,size.height);}  }
class C{  public void addAliases(List<Alias> aliases){  for (  Alias alias : aliases) {    addAlias(alias);  }}  }
class C{  public GenericEntry updateUser(String email,Map<String,String> updatedAttributes) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  GenericEntry entry=new GenericEntry();  entry.addProperties(updatedAttributes);  return service.update(new URL("https://apps-apis.google.com/a/feeds/user/2.0/" + domain + "/"+ email),entry);}  }
class C{  public Sequence removeSequence(int index){  Sequence sequence=getSequence(index);  sequences.removeElementAt(index);  return sequence;}  }
class C{  public void accept(final MethodVisitor mv){  int i, j, n;  n=parameters == null ? 0 : parameters.size();  for (i=0; i < n; i++) {    ParameterNode parameter=parameters.get(i);    mv.visitParameter(parameter.name,parameter.access);  }  if (annotationDefault != null) {    AnnotationVisitor av=mv.visitAnnotationDefault();    AnnotationNode.accept(av,null,annotationDefault);    if (av != null) {      av.visitEnd();    }  }  n=visibleAnnotations == null ? 0 : visibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=visibleAnnotations.get(i);    an.accept(mv.visitAnnotation(an.desc,true));  }  n=invisibleAnnotations == null ? 0 : invisibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=invisibleAnnotations.get(i);    an.accept(mv.visitAnnotation(an.desc,false));  }  n=visibleTypeAnnotations == null ? 0 : visibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=visibleTypeAnnotations.get(i);    an.accept(mv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,true));  }  n=invisibleTypeAnnotations == null ? 0 : invisibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=invisibleTypeAnnotations.get(i);    an.accept(mv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,false));  }  n=visibleParameterAnnotations == null ? 0 : visibleParameterAnnotations.length;  for (i=0; i < n; ++i) {    List<?> l=visibleParameterAnnotations[i];    if (l == null) {      continue;    }    for (j=0; j < l.size(); ++j) {      AnnotationNode an=(AnnotationNode)l.get(j);      an.accept(mv.visitParameterAnnotation(i,an.desc,true));    }  }  n=invisibleParameterAnnotations == null ? 0 : invisibleParameterAnnotations.length;  for (i=0; i < n; ++i) {    List<?> l=invisibleParameterAnnotations[i];    if (l == null) {      continue;    }    for (j=0; j < l.size(); ++j) {      AnnotationNode an=(AnnotationNode)l.get(j);      an.accept(mv.visitParameterAnnotation(i,an.desc,false));    }  }  if (visited) {    instructions.resetLabels();  }  n=attrs == null ? 0 : attrs.size();  for (i=0; i < n; ++i) {    mv.visitAttribute(attrs.get(i));  }  if (instructions.size() > 0) {    mv.visitCode();    n=tryCatchBlocks == null ? 0 : tryCatchBlocks.size();    for (i=0; i < n; ++i) {      tryCatchBlocks.get(i).updateIndex(i);      tryCatchBlocks.get(i).accept(mv);    }    instructions.accept(mv);    n=localVariables == null ? 0 : localVariables.size();    for (i=0; i < n; ++i) {      localVariables.get(i).accept(mv);    }    n=visibleLocalVariableAnnotations == null ? 0 : visibleLocalVariableAnnotations.size();    for (i=0; i < n; ++i) {      visibleLocalVariableAnnotations.get(i).accept(mv,true);    }    n=invisibleLocalVariableAnnotations == null ? 0 : invisibleLocalVariableAnnotations.size();    for (i=0; i < n; ++i) {      invisibleLocalVariableAnnotations.get(i).accept(mv,false);    }    mv.visitMaxs(maxStack,maxLocals);    visited=true;  }  mv.visitEnd();}  }
class C{  public boolean isConstant(){  return m_dataType.equals(X_AD_ImpFormat_Row.DATATYPE_Constant);}  }
class C{  public void testSerialization(){  XYBoxAnnotation a1=new XYBoxAnnotation(1.0,2.0,3.0,4.0,new BasicStroke(1.2f),Color.red,Color.blue);  XYBoxAnnotation a2=(XYBoxAnnotation)TestUtilities.serialised(a1);  assertEquals(a1,a2);}  }
class C{  public SegmentedInputStream(final InputStream in){  if (in == null)   throw new NullPointerException();  this.in=in;  this.blocks=new ObjectArrayList<SegmentBlock>();  this.currentBlock=-1;}  }
class C{  public static Stats of(int... values){  StatsAccumulator acummulator=new StatsAccumulator();  acummulator.addAll(values);  return acummulator.snapshot();}  }
class C{  public void dispose(){  this.geographicSurfaceTileRenderer.dispose();}  }
class C{  @LargeTest public void testMultipleDownloads() throws Exception {  removeAllCurrentDownloads();  int NUM_FILES=10;  int MAX_FILE_SIZE=10 * 1024;  Random r=new LoggingRng();  for (int i=0; i < NUM_FILES; ++i) {    int size=r.nextInt(MAX_FILE_SIZE);    byte[] blobData=generateData(size,DataType.TEXT);    Uri uri=getServerUri(DEFAULT_FILENAME + i);    Request request=new Request(uri);    request.setTitle(String.format("%s--%d",DEFAULT_FILENAME + i,i));    enqueueResponse(buildResponse(HTTP_OK,blobData));    long requestID=mDownloadManager.enqueue(request);  }  waitForDownloadsOrTimeout(WAIT_FOR_DOWNLOAD_POLL_TIME,MAX_WAIT_FOR_DOWNLOAD_TIME);  Cursor cursor=mDownloadManager.query(new Query());  try {    assertEquals(NUM_FILES,cursor.getCount());    if (cursor.moveToFirst()) {      do {        int status=cursor.getInt(cursor.getColumnIndex(DownloadManager.COLUMN_STATUS));        String filename=cursor.getString(cursor.getColumnIndex(DownloadManager.COLUMN_URI));        String errorString=String.format("File %s failed to download successfully. Status code: %d",filename,status);        assertEquals(errorString,DownloadManager.STATUS_SUCCESSFUL,status);      } while (cursor.moveToNext());    }    assertEquals(NUM_FILES,mReceiver.numDownloadsCompleted());  }  finally {    cursor.close();  }}  }
class C{  void openForWriting(int newFirstTrunkPage,boolean atEnd){  trace.debug("log openForWriting firstPage: " + newFirstTrunkPage);  this.firstTrunkPage=newFirstTrunkPage;  logKey++;  pageOut=new PageOutputStream(store,newFirstTrunkPage,undoAll,logKey,atEnd);  pageOut.reserve(1);  store.setLogFirstPage(logKey,newFirstTrunkPage,pageOut.getCurrentDataPageId());  writeBuffer=store.createData();}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  private void skipTrailerHeaders() throws IOException {  for (; ; ) {    String line=readLine(this.in,StandardCharsets.US_ASCII);    if ((line == null) || (line.trim().length() < 1))     break;  }}  }
class C{  @Override public void addDataSourceListener(DataSourceListener dsl){}  }
class C{  public ToStringBuilder append(byte[] array){  style.append(buffer,null,array,null);  return this;}  }
class C{  public void testCase10(){  byte aBytes[]={10,20,30,40,50,60,70,10,20,30};  byte bBytes[]={1,2,3,4,5,6,7,1,2,3,4,5,6,7};  int aSign=1;  int bSign=1;  byte rBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(-1,result.signum());}  }
class C{  public void addClearGraphDataButton(){  JButton clearButton=new JButton("Clear");  clearButton.setAction(TimeSeriesPlotActions.getClearGraphAction(this));  buttonPanel.add(clearButton);}  }
class C{  public boolean isArrowFunction(){  return false;}  }
class C{  public Resource mapId(Resource object,JSONObject jsonDataObject) throws NotExtendingResourceException {  try {    return mDeserializer.setIdField(object,jsonDataObject.get("id"));  } catch (  JSONException e) {    Logger.debug("JSON data does not contain id.");  }  return object;}  }
class C{  public static ContestFragment newInstance(){  return new ContestFragment();}  }
class C{  private String validateQuery(MQuery query){  if (query == null || query.getRestrictionCount() == 0)   return null;  if (query.getRestrictionCount() != 1) {    log.fine("Ignored(More than 1 Restriction): " + query);    return query.getWhereClause();  }  String colName=query.getColumnName(0);  if (colName == null) {    log.fine("Ignored(No Column): " + query);    return query.getWhereClause();  }  if (colName.indexOf('(') != -1) {    log.fine("Ignored(Function): " + colName);    return query.getWhereClause();  }  String refColName=null;  if (colName.equals("R_RequestRelated_ID"))   refColName="R_Request_ID"; else   if (colName.startsWith("C_DocType"))   refColName="C_DocType_ID";  if (refColName != null) {    query.setColumnName(0,refColName);    if (getField(refColName) != null) {      log.fine("Column " + colName + " replaced with synonym "+ refColName);      return query.getWhereClause();    }    refColName=null;  }  if (getField(colName) != null) {    log.fine("Field Found: " + colName);    return query.getWhereClause();  }  String sql="SELECT cc.ColumnName " + "FROM AD_Column c" + " INNER JOIN AD_Ref_Table r ON (c.AD_Reference_Value_ID=r.AD_Reference_ID)"+ " INNER JOIN AD_Column cc ON (r.AD_Key=cc.AD_Column_ID) "+ "WHERE c.AD_Reference_ID IN (18,30)"+ " AND c.ColumnName=?";  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setString(1,colName);    ResultSet rs=pstmt.executeQuery();    if (rs.next())     refColName=rs.getString(1);    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,"(ref) - Column=" + colName,e);    return query.getWhereClause();  }  if (refColName != null) {    query.setColumnName(0,refColName);    if (getField(refColName) != null) {      log.fine("Column " + colName + " replaced with "+ refColName);      return query.getWhereClause();    }    colName=refColName;  }  String tableName=null;  String tabKeyColumn=getKeyColumnName();  sql="SELECT t.TableName " + "FROM AD_Column c" + " INNER JOIN AD_Table t ON (c.AD_Table_ID=t.AD_Table_ID) "+ "WHERE c.ColumnName=? AND IsKey='Y'"+ " AND EXISTS (SELECT * FROM AD_Column cc"+ " WHERE cc.AD_Table_ID=t.AD_Table_ID AND cc.ColumnName=?)";  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setString(1,colName);    pstmt.setString(2,tabKeyColumn);    ResultSet rs=pstmt.executeQuery();    if (rs.next())     tableName=rs.getString(1);    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,"Column=" + colName + ", Key="+ tabKeyColumn,e);    return null;  }  if (tabKeyColumn.equals("AD_Reference_ID")) {    sql="SELECT AD_Reference_ID FROM AD_Column WHERE ColumnName=?";    int AD_Reference_ID=DB.getSQLValue(null,sql,colName);    return "AD_Reference_ID=" + AD_Reference_ID;  }  if (tableName == null) {    log.info("Not successfull - Column=" + colName + ", Key="+ tabKeyColumn+ ", Query="+ query);    return query.getWhereClause();  }  query.setTableName("xx");  StringBuffer result=new StringBuffer(getTableName()).append(".").append(tabKeyColumn).append(" IN (SELECT xx.").append(tabKeyColumn).append(" FROM ").append(tableName).append(" xx WHERE ").append(query.getWhereClause(true)).append(")");  log.fine(result.toString());  return result.toString();}  }
class C{  @SuppressWarnings("ResultOfMethodCallIgnored") private boolean isPhoneNumber(String value){  final String valueNoDashes=value.replaceAll("-","");  try {    Long.parseLong(valueNoDashes);    return true;  } catch (  IllegalArgumentException iae) {    return false;  }}  }
class C{  public SailRepository(Sail sail){  this.sail=sail;}  }
class C{  public static void forceLogging(){  if (!isLogging) {    Timber.plant(new Timber.DebugTree());    isLogging=true;  }}  }
class C{  public static synchronized MBeanInfo testCompliance(final Class<?> baseClass,Class<?> mbeanInterface) throws NotCompliantMBeanException {  if (mbeanInterface == null)   mbeanInterface=getStandardMBeanInterface(baseClass);  ReflectUtil.checkPackageAccess(mbeanInterface);  MBeanIntrospector<?> introspector=StandardMBeanIntrospector.getInstance();  return getClassMBeanInfo(introspector,baseClass,mbeanInterface);}  }
class C{  public static void calculatePendingGroupDiffs(MitroRequestContext context,Collection<? extends PendingGroup> pendingGroupsList,DBGroup org,Map<String,DBGroup> existingGroups,Map<String,GroupDiff> diffs,Map<String,MemberList> pendingGroupMap,String scope) throws MitroServletException, SQLException {  assert scope != null || pendingGroupsList.isEmpty();  for (  PendingGroup pg : pendingGroupsList) {    AddPendingGroupRequest.MemberList ml=gson.fromJson(pg.memberListJson,AddPendingGroupRequest.MemberList.class);    assert (null != ml) : "you cannot have a null MemberList";    for (    String user : ml.memberList) {      assert Util.isEmailAddress(user) : "invalid email: '" + user + "'";    }    pendingGroupMap.put(pg.groupName,ml);  }  for (  DBGroup g : org.getAllOrgGroups(context.manager)) {    if (scope != null && scope.equals(g.getScope())) {      existingGroups.put(g.getName(),g);    }  }  Set<String> allGroupNames=Sets.union(pendingGroupMap.keySet(),existingGroups.keySet());  for (  String groupName : allGroupNames) {    diffGroupPair(context,diffs,groupName,existingGroups.get(groupName),pendingGroupMap.get(groupName));  }}  }
class C{  private Traversal(HeapVisitor visitor){  this.visitor=visitor;  traceRoots();  doClosure();}  }
class C{  public boolean hasProperIntersection(){  return hasProperIntersection;}  }
class C{  private String processDefinitionList(final String line){  final String ret;  if (!this.noList) {    if (line.startsWith(this.defListLevel + ";")) {      final String copyOfLine=line.substring(this.defListLevel.length() + 1);      final int positionOfOpeningTag;      if ((positionOfOpeningTag=copyOfLine.indexOf(':',0)) > 0) {        final String definitionItem=copyOfLine.substring(0,positionOfOpeningTag);        final String definitionDescription=copyOfLine.substring(positionOfOpeningTag + 1);        final StringBuilder stringBuilder=new StringBuilder();        stringBuilder.append(HTML_OPEN_DEFINITION_LIST);        stringBuilder.append(HTML_OPEN_DEFINITION_ITEM);        stringBuilder.append(definitionItem);        stringBuilder.append(HTML_CLOSE_DEFINITION_ITEM);        stringBuilder.append(HTML_OPEN_DEFINITION_DESCRIPTION);        stringBuilder.append(definitionDescription);        this.processingDefList=true;        ret=stringBuilder.toString();      } else {        ret=line;      }      this.defListLevel+=";";    } else     if (!this.defListLevel.isEmpty() && line.startsWith(this.defListLevel)) {      final String copyOfLine=line.substring(this.defListLevel.length());      final int positionOfOpeningTag;      if ((positionOfOpeningTag=copyOfLine.indexOf(':',0)) > 0) {        final String definitionItem=copyOfLine.substring(0,positionOfOpeningTag);        final String definitionDescription=copyOfLine.substring(positionOfOpeningTag + 1);        final StringBuilder stringBuilder=new StringBuilder();        stringBuilder.append(HTML_OPEN_DEFINITION_ITEM);        stringBuilder.append(definitionItem);        stringBuilder.append(HTML_CLOSE_DEFINITION_ITEM);        stringBuilder.append(HTML_OPEN_DEFINITION_DESCRIPTION);        stringBuilder.append(definitionDescription);        this.processingDefList=true;        ret=stringBuilder.toString();      } else {        ret=line;      }    } else     if (!this.defListLevel.isEmpty()) {      int i=this.defListLevel.length();      String tmp=EMPTY;      while (!line.startsWith(this.defListLevel.substring(0,i))) {        tmp=HTML_CLOSE_DEFINITION_DESCRIPTION + HTML_CLOSE_DEFINITION_LIST;        i--;      }      this.defListLevel=this.defListLevel.substring(0,i);      int positionOfOpeningTag=this.defListLevel.length();      if (!this.defListLevel.isEmpty()) {        final String copyOfLine=line.substring(positionOfOpeningTag);        if ((positionOfOpeningTag=copyOfLine.indexOf(':',0)) > 0) {          final String definitionItem=copyOfLine.substring(0,positionOfOpeningTag);          final String definitionDescription=copyOfLine.substring(positionOfOpeningTag + 1);          final StringBuilder stringBuilder=new StringBuilder();          stringBuilder.append(tmp);          stringBuilder.append(HTML_OPEN_DEFINITION_ITEM);          stringBuilder.append(definitionItem);          stringBuilder.append(HTML_CLOSE_DEFINITION_ITEM);          stringBuilder.append(HTML_OPEN_DEFINITION_DESCRIPTION);          stringBuilder.append(definitionDescription);          this.processingDefList=true;          ret=stringBuilder.toString();        } else {          ret=line;        }      } else {        final StringBuilder stringBuilder=new StringBuilder();        stringBuilder.append(tmp);        stringBuilder.append(line.substring(positionOfOpeningTag));        ret=stringBuilder.toString();      }    } else {      ret=line;    }  } else {    ret=line;  }  return ret;}  }
class C{  @Override protected void finalize() throws Throwable {  mPosition=null;  mXRange=mYRange=mZRange=mTempRange=null;  mRotation=null;  mPitchRange=mYawRange=mRollRange=null;  super.finalize();}  }
class C{  public void testTicketBlzg463c() throws Exception {  final ASTContainer container=new TestHelper("explainHints-blzg1463c","explainHints-blzg1463c.rq","empty.trig","explainHints-blzg1463c.srx").runTest();  final Iterator<BOp> explainHintAnnotatedBOps=ExplainHints.explainHintAnnotatedBOpIterator(container.getOptimizedAST());  assertFalse(explainHintAnnotatedBOps.hasNext());}  }
class C{  protected boolean beforeDelete(){  if (isProcessed())   return false;  getLines();  for (int i=0; i < m_lines.length; i++) {    m_lines[i].delete(true);  }  return true;}  }
class C{  public JapaneseIterationMarkCharFilterFactory(Map<String,String> args){  super(args);  normalizeKanji=getBoolean(args,NORMALIZE_KANJI_PARAM,JapaneseIterationMarkCharFilter.NORMALIZE_KANJI_DEFAULT);  normalizeKana=getBoolean(args,NORMALIZE_KANA_PARAM,JapaneseIterationMarkCharFilter.NORMALIZE_KANA_DEFAULT);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public synchronized void onNodeLeft(){  leftNodesCnt++;}  }
class C{  public ParsedURI resolve(ParsedURI relURI){  if (relURI.isAbsolute()) {    return relURI;  }  if (relURI._authority == null && relURI._query == null && relURI._path.length() == 0) {    ParsedURI result=(ParsedURI)this.clone();    result._fragment=relURI._fragment;    return result;  }  String scheme, authority, path, query, fragment;  boolean normalizeURI=false;  scheme=this._scheme;  query=relURI._query;  fragment=relURI._fragment;  if (relURI._authority != null) {    authority=relURI._authority;    path=relURI._path;  } else {    authority=this._authority;    if (relURI._path.startsWith("/")) {      path=relURI._path;    } else     if (relURI._path.length() == 0) {      path=this._path;    } else {      path=this._path;      if (path == null) {        path="/";      } else {        if (!path.endsWith("/")) {          int lastSlashIdx=path.lastIndexOf('/');          path=path.substring(0,lastSlashIdx + 1);        }        if (path.length() == 0) {          path="/";        }      }      path+=relURI._path;      normalizeURI=true;    }  }  ParsedURI result=new ParsedURI(scheme,authority,path,query,fragment);  if (normalizeURI) {    result.normalize();  }  return result;}  }
class C{  protected Cookie decodeCookie(String cookieString){  byte[] bytes=hexStringToByteArray(cookieString);  ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(bytes);  Cookie cookie=null;  try {    ObjectInputStream objectInputStream=new ObjectInputStream(byteArrayInputStream);    cookie=((SerializableCookie)objectInputStream.readObject()).getCookie();  } catch (  IOException e) {    e.printStackTrace();  }catch (  ClassNotFoundException e) {    e.printStackTrace();  }  return cookie;}  }
class C{  private boolean processTraceParameter(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  String traceCmd=WebUtil.getParameter(request,"Trace");  String traceLevel=WebUtil.getParameter(request,"TraceLevel");  if (traceLevel != null && traceLevel.length() > 0) {    log.info("New Level: " + traceLevel);    CLogMgt.setLevel(traceLevel);    Ini.setProperty(Ini.P_TRACELEVEL,traceLevel);    Ini.saveProperties(false);    return false;  }  if (traceCmd == null || traceCmd.length() == 0)   return false;  log.info("Command: " + traceCmd);  CLogFile fileHandler=CLogFile.get(false,null,false);  if (traceCmd.equals("ROTATE")) {    if (fileHandler != null)     fileHandler.rotateLog();    return false;  } else   if (traceCmd.equals("DELETE")) {    File logDir=fileHandler.getLogDirectory();    if (logDir != null && logDir.isDirectory()) {      File[] logs=logDir.listFiles();      for (int i=0; i < logs.length; i++) {        String fileName=logs[i].getAbsolutePath();        if (fileName.equals(fileHandler.getFileName()))         continue;        if (logs[i].delete())         log.warning("Deleted: " + fileName); else         log.warning("Not Deleted: " + fileName);      }    }    return false;  }  if (fileHandler != null && fileHandler.getFileName().equals(traceCmd))   fileHandler.flush();  if (!traceCmd.contains(Ini.getAdempiereHome())) {    log.warning("Trying to access unauthorized system files");    return false;  }  File file=new File(traceCmd);  if (!file.exists()) {    log.warning("Did not find File: " + traceCmd);    return false;  }  if (file.length() == 0) {    log.warning("File Length=0: " + traceCmd);    return false;  }  log.info("Streaming: " + traceCmd);  try {    long time=System.currentTimeMillis();    int fileLength=(int)file.length();    int bufferSize=2048;    byte[] buffer=new byte[bufferSize];    response.setContentType("text/plain");    response.setBufferSize(bufferSize);    response.setContentLength(fileLength);    FileInputStream fis=new FileInputStream(file);    ServletOutputStream out=response.getOutputStream();    int read=0;    while ((read=fis.read(buffer)) > 0)     out.write(buffer,0,read);    out.flush();    out.close();    fis.close();    time=System.currentTimeMillis() - time;    double speed=(fileLength / 1024) / ((double)time / 1000);    log.info("length=" + fileLength + " - "+ time+ " ms - "+ speed+ " kB/sec");  } catch (  IOException ex) {    log.log(Level.SEVERE,"stream" + ex);  }  return true;}  }
class C{  private void addIoLimitsOnVolume(WBEMClient client,CIMObjectPath path,Map<String,VolHostIOObject> volToIolimits,Map<String,String> volToFastPolicy,String parentHostIoBw,String parentHostIoPs){  try {    CIMInstance instance=client.getInstance(path,false,true,SmisConstants.PS_HOST_IO);    String hostIoBw=String.valueOf(instance.getPropertyValue(SmisConstants.EMC_MAX_BANDWIDTH));    String hostIoPs=String.valueOf(instance.getPropertyValue(SmisConstants.EMC_MAX_IO));    String fastSetting=SmisUtils.getSLOPolicyName(instance);    _logger.info("Bw {} and Iops {} found for SG : {} ",new Object[]{hostIoBw,hostIoPs,String.valueOf(instance.getPropertyValue(Constants.ELEMENTNAME))});    if (hostIoBw.equals("0") && hostIoPs.equals("0")) {      hostIoBw=parentHostIoBw;      hostIoPs=parentHostIoPs;    }    CloseableIterator<CIMObjectPath> volPaths=client.associatorNames(path,null,Constants.STORAGE_VOLUME,null,null);    while (volPaths.hasNext()) {      CIMObjectPath volPath=volPaths.next();      String volumeNativeGuid=getVolumeNativeGuid(volPath);      VolHostIOObject obj=new VolHostIOObject();      obj.setVolNativeGuid(volumeNativeGuid);      obj.setHostIoBw(hostIoBw);      obj.setHostIops(hostIoPs);      _logger.debug("Volume key: {}..obj : {}",volumeNativeGuid,obj.toString());      volToIolimits.put(volumeNativeGuid,obj);      if (!Strings.isNullOrEmpty(fastSetting)) {        volToFastPolicy.put(volumeNativeGuid,fastSetting);      }    }  } catch (  Exception e) {    _logger.warn("Finding HostIO limits failed during unmanaged volume discovery",e);  }}  }
class C{  public boolean isFace(){  return (id & (lowestOnBitForLevel(0) - 1)) == 0;}  }
class C{  public static List<View> findDescendent(Viewable parentView,Viewable descendentView){  Stack<View> stack=new Stack<View>();  boolean found;  for (  View view : parentView.getViews()) {    if (view == descendentView) {      return stack;    }    found=findDescendentRecusive(view,descendentView,stack);    if (found) {      return stack;    }  }  return null;}  }
class C{  private final SecretKey constructSecretKey(byte[] encodedKey,String encodedKeyAlgorithm){  return (new SecretKeySpec(encodedKey,encodedKeyAlgorithm));}  }
class C{  public void replaceRoll(int bonus){  Integer roll=new Integer(Compute.d6(2));  rolls.setElementAt(roll,size() - 1);  bonuses.setElementAt(bonus,size() - 1);  wasRollReplaced.setElementAt(new Boolean(true),size() - 1);}  }
class C{  public void fireStateChanged(){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ChangeListener.class) {      if (changeEvent == null)       changeEvent=new ChangeEvent(eventSource);      ((ChangeListener)listeners[i + 1]).stateChanged(changeEvent);    }  }}  }
class C{  public Builder put(String setting,boolean value){  put(setting,String.valueOf(value));  return this;}  }
class C{  public CBreakpointPanel(final JFrame parent,final BackEndDebuggerProvider debuggerProvider,final ZyGraph graph,final IViewContainer viewContainer){  super(new BorderLayout());  Preconditions.checkNotNull(parent,"IE01331: Parent argument can not be null");  Preconditions.checkNotNull(debuggerProvider,"IE01332: Debugger provider argument can not be null");  Preconditions.checkNotNull(graph,"IE01333: Graph argument can not be null");  m_breakpointTable=new CBreakpointTable(debuggerProvider,graph,viewContainer);  add(new CBreakpointToolbar(parent,debuggerProvider,graph.getRawView()),BorderLayout.NORTH);  add(new JScrollPane(m_breakpointTable),BorderLayout.CENTER);}  }
class C{  public synchronized void dropActionChanged(DropTargetDragEvent dtde){  if (!active)   return;  if (dtListener != null)   dtListener.dropActionChanged(dtde);  updateAutoscroll(dtde.getLocation());}  }
class C{  public DAccessDescriptionChooser(JDialog parent,String title,AccessDescription accessDescription){  super(parent,title,Dialog.ModalityType.DOCUMENT_MODAL);  initComponents(accessDescription);}  }
class C{  public static int compare(Comparable c1,Comparable c2,boolean nullGreater){  if (c1 == c2) {    return 0;  } else   if (c1 == null) {    return (nullGreater ? 1 : -1);  } else   if (c2 == null) {    return (nullGreater ? -1 : 1);  }  return c1.compareTo(c2);}  }
class C{  public boolean isPanEnabled(){  return panEnabled;}  }
class C{  public int hashCode(){  int hashcode=0;  for (int i=0; i < m_size; ++i) {    int idx=i + 1;    int code=idx * m_names[i].hashCode();    code^=idx * m_types[i].hashCode();    if (m_dflts[i] != null)     code^=m_dflts[i].hashCode();    hashcode^=code;  }  return hashcode;}  }
class C{  void removeClientTransaction(StunClientTransaction tran){synchronized (clientTransactions) {    clientTransactions.remove(tran.getTransactionID());  }}  }
class C{  public void classLoaderDestroy(DynamicClassLoader loader){  Object resource=_resourceRef.get();  if (resource == null)   return;  Method destroy=CloseListener.getDestroyMethod(resource.getClass());  if (destroy == null)   return;  try {    destroy.invoke(resource,(Object[])null);  } catch (  Throwable e) {    log.log(Level.WARNING,e.toString(),e);  }}  }
class C{  public OverallCosts add(String currency,BigDecimal amount){  BigDecimal oldAmount=costs.get(currency);  if (oldAmount == null) {    oldAmount=BigDecimal.ZERO;  }  BigDecimal newAmount=oldAmount.add(amount);  HashMap<String,BigDecimal> newCosts=new HashMap<String,BigDecimal>(costs);  newCosts.put(currency,newAmount);  return new OverallCosts(newCosts);}  }
class C{  public void output(PrintWriter out){  out.write(versionDecl);  for (int i=0; i < prolog.size(); i++) {    ConcreteElement e=(ConcreteElement)prolog.elementAt(i);    e.output(out);  }  if (content != null)   content.output(out);}  }
class C{  public boolean equals(Timestamp ts){  if (super.equals(ts)) {    if (nanos == ts.nanos) {      return true;    } else {      return false;    }  } else {    return false;  }}  }
class C{  @Override public boolean supportsSubqueriesInQuantifieds(){  debugCodeCall("supportsSubqueriesInQuantifieds");  return true;}  }
class C{  public AbstractMRMessage createInitPacket(){  int nInitBytes=4;  byte[] initBytes=new byte[20];  int code=0;  if (nodeType == SMINI) {    initBytes[0]=77;  } else   if (nodeType == USIC_SUSIC) {    if (bitsPerCard == 24) {      initBytes[0]=78;    } else     if (bitsPerCard == 32) {      initBytes[0]=88;    }  }  int firstByte=transmissionDelay / 256;  int secondByte=transmissionDelay - (firstByte * 256);  if (firstByte > 255) {    firstByte=255;  }  initBytes[1]=(byte)firstByte;  initBytes[2]=(byte)secondByte;  if (nodeType == SMINI) {    initBytes[3]=(byte)num2LSearchLights;    if (num2LSearchLights > 0) {      for (int i=0, j=0; i < 6; i++, j+=8) {        code=locSearchLightBits[j];        code=code + (locSearchLightBits[j + 1] * 2);        code=code + (locSearchLightBits[j + 2] * 4);        code=code + (locSearchLightBits[j + 3] * 8);        code=code + (locSearchLightBits[j + 4] * 16);        code=code + (locSearchLightBits[j + 5] * 32);        code=code + (locSearchLightBits[j + 6] * 64);        code=code + (locSearchLightBits[j + 7] * 128);        initBytes[nInitBytes]=(byte)code;        nInitBytes++;      }    }  } else   if (nodeType == USIC_SUSIC) {    int numCards=numInputCards() + numOutputCards();    int numFours=numCards / 4;    if ((numCards - (numFours * 4)) > 0) {      numFours++;    }    initBytes[3]=(byte)numFours;    for (int i=0, j=0; i < numFours; i++, j+=4) {      code=cardTypeLocation[j];      code=code + (cardTypeLocation[j + 1] * 4);      code=code + (cardTypeLocation[j + 2] * 16);      code=code + (cardTypeLocation[j + 3] * 64);      initBytes[nInitBytes]=(byte)code;      nInitBytes++;    }  }  int nDLE=0;  for (int i=1; i < nInitBytes; i++) {    if ((initBytes[i] == 2) || (initBytes[i] == 3) || (initBytes[i] == 16)) {      nDLE++;    }  }  SerialMessage m=new SerialMessage(nInitBytes + nDLE + 2);  m.setElement(0,getNodeAddress() + 65);  m.setElement(1,73);  int k=2;  for (int i=0; i < nInitBytes; i++) {    if ((initBytes[i] == 2) || (initBytes[i] == 3) || (initBytes[i] == 16)) {      m.setElement(k,16);      k++;    }    m.setElement(k,initBytes[i]);    k++;  }  return m;}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  public static Object resolvedNewArray(int numElements,RVMArray array) throws OutOfMemoryError, NegativeArraySizeException {  return resolvedNewArray(numElements,array,MemoryManager.getAllocationSite(false));}  }
class C{  public JAXRSArchiveImpl(Archive<?> delegate){  super(JAXRSArchive.class,delegate);  setDefaultContextRoot();  addGeneratedApplication();  addExceptionMapperForFavicon();}  }
class C{  public synchronized boolean needsGui(){  BeanContext bc=getBeanContextPeer();  if (bc != this) {    if (bc instanceof Visibility)     return ((Visibility)bc).needsGui();    if (bc instanceof Container || bc instanceof Component)     return true;  }synchronized (children) {    for (Iterator i=children.keySet().iterator(); i.hasNext(); ) {      Object c=i.next();      try {        return ((Visibility)c).needsGui();      } catch (      ClassCastException cce) {      }      if (c instanceof Container || c instanceof Component)       return true;    }  }  return false;}  }
class C{  private boolean translate(float tx,float ty){  mTranslateRect.set(mTempSrc);  mMatrix.mapRect(mTranslateRect);  final float maxLeft=mAllowCrop ? mCropRect.left : 0.0f;  final float maxRight=mAllowCrop ? mCropRect.right : getWidth();  float l=mTranslateRect.left;  float r=mTranslateRect.right;  final float translateX;  if (mAllowCrop) {    translateX=Math.max(maxLeft - mTranslateRect.right,Math.min(maxRight - mTranslateRect.left,tx));  } else {    if (r - l < maxRight - maxLeft) {      translateX=maxLeft + ((maxRight - maxLeft) - (r + l)) / 2;    } else {      translateX=Math.max(maxRight - r,Math.min(maxLeft - l,tx));    }  }  float maxTop=mAllowCrop ? mCropRect.top : 0.0f;  float maxBottom=mAllowCrop ? mCropRect.bottom : getHeight();  float t=mTranslateRect.top;  float b=mTranslateRect.bottom;  final float translateY;  if (mAllowCrop) {    translateY=Math.max(maxTop - mTranslateRect.bottom,Math.min(maxBottom - mTranslateRect.top,ty));  } else {    if (b - t < maxBottom - maxTop) {      translateY=maxTop + ((maxBottom - maxTop) - (b + t)) / 2;    } else {      translateY=Math.max(maxBottom - b,Math.min(maxTop - t,ty));    }  }  mMatrix.postTranslate(translateX,translateY);  invalidate();  return (translateX == tx) && (translateY == ty);}  }
class C{  public void arrangeChildren(ArrayList<View> list,int itemCount){  arrangeChildren(list,itemCount,true);}  }
class C{  @SuppressWarnings("unchecked") public static <E>ConstantTable<E> of(Equality<? super E> equality,Collection<? extends E> elements){  return new ConstantTable<E>(equality,(E[])elements.toArray(new Object[elements.size()]));}  }
class C{  public CBookmarkTable(final BackEndDebuggerProvider debuggerProvider){  m_debuggerProvider=Preconditions.checkNotNull(debuggerProvider,"IE01321: Bookmark Manager can't be null");  m_model=new CBookmarkTableModel(debuggerProvider);  setModel(m_model);  getSelectionModel().setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);  addMouseListener(new InternalMouseListener());}  }
class C{  public void menuCanceled(final MenuEvent arg0){}  }
class C{  public boolean isConnected(){  return status == Status.CONNECTED;}  }
class C{  static float rotateY(float pX,float pY,float cX,float cY,float angleInDegrees){  double angle=Math.toRadians(angleInDegrees);  return (float)(Math.sin(angle) * (pX - cX) + Math.cos(angle) * (pY - cY) + cY);}  }
class C{  public void removePostNodeCompletionDelegate(Closure delegate){  getProxyBuilder().postNodeCompletionDelegates.remove(delegate);}  }
class C{  public static AmqpConnection connect(URI broker) throws Exception {  return connect(broker,null,null);}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  GoogleBaseService service=(GoogleBaseService)request.getAttribute(AuthenticationFilter.SERVICE_ATTRIBUTE);  Recipe recipe=getPostedRecipe(request);  if (!recipe.isComplete()) {    String message="<div class='errormessage'>Please fill out " + "all the mandatory fields.</div>";    editRecipe(request,response,recipe,message);  } else {    try {      if (isAdd()) {        recipeAdd(service,recipe);      } else       if (isUpdate()) {        recipeUpdate(service,recipe);      } else {        throw new ServletException("Unknown POST action: " + action);      }    } catch (    ServiceException e) {      RecipeUtil.logServiceException(this,e);      RecipeUtil.forwardToErrorPage(request,response,e);      return;    }    listOwnRecipes(response);  }}  }
class C{  public static void register(Map<String,IgniteLinkTaglet> tagletMap){  IgniteLinkTaglet tag=new IgniteLinkTaglet();  Taglet t=tagletMap.get(tag.getName());  if (t != null)   tagletMap.remove(tag.getName());  tagletMap.put(tag.getName(),tag);}  }
class C{  private void populateHeaders(List<Header> requestHeaders){  for (  Header header : requestHeaders) {    if (header.getAction().equalsIgnoreCase("remove")) {      baseRequest.removeHeader(header.getKey());    } else     if (header.getAction().equalsIgnoreCase("add") || header.getAction().equalsIgnoreCase("set")) {      String value=header.getValue();      if (ValidationUtil.isFunction(value)) {        value=FunctionHandler.executeFunction(value,variables);      } else       if (ValidationUtil.isVariable(value)) {        value=variables.getVariable(value);      }      value=variables.evaluate(value);      if (header.getKey().equalsIgnoreCase("Content-Type")) {        baseRequest.setContentType(value);      } else {        baseRequest.addHeader(header.getKey(),value);      }    }  }  Map<String,String> headerMap=tsc.getParent().getHeaderMap();  if (headerMap != null) {    for (    Entry<String,String> entry : headerMap.entrySet()) {      baseRequest.addHeader(entry.getKey(),entry.getValue());    }  }}  }
class C{  protected void deferredCreateContent(){  fillToolbar();  createAnnotationInformation(fParent,getAnnotationInfo().annotation);  setColorAndFont(fParent,fParent.getForeground(),fParent.getBackground(),JFaceResources.getDialogFont());  fParent.layout(true);}  }
class C{  public StrBuilder append(final long value){  return append(String.valueOf(value));}  }
class C{  public StrokeAction(String group,BasicStroke defaultStroke){  super(group);  this.defaultStroke=defaultStroke;}  }
class C{  SeaGlassStyleWrapper(SynthStyle style){  super(null,null);  this.style=style;  this.painter=new SeaGlassSynthPainterImpl(this);}  }
class C{  public static Pair<String,String> parseTitleAndDateInBrackets(String title){  if (title == null)   return new Pair<>(null,null);  Pattern p=Pattern.compile("(.*)\\s+\\(?([0-9]{4})\\)?",Pattern.CASE_INSENSITIVE);  Matcher m=p.matcher(title);  if (m.find()) {    return new Pair<>(m.group(1),m.group(2));  }  return new Pair<>(title,null);}  }
class C{  @Transactional public void followTag(final String followerId,final String followingTagId) throws ServiceException {  try {    follow(followerId,followingTagId,Follow.FOLLOWING_TYPE_C_TAG);  } catch (  final RepositoryException e) {    final String msg="User[id=" + followerId + "] follows a tag[id="+ followingTagId+ "] failed";    LOGGER.log(Level.ERROR,msg,e);    throw new ServiceException(msg);  }}  }
class C{  public Boolean isIdentified(){  return identified;}  }
class C{  public PostPolicy(String bucketName,String objectName,boolean startsWith,DateTime expirationDate) throws InvalidArgumentException {  if (bucketName == null) {    throw new InvalidArgumentException("null bucket name");  }  this.bucketName=bucketName;  if (objectName == null) {    throw new InvalidArgumentException("null object name or prefix");  }  this.objectName=objectName;  this.startsWith=startsWith;  if (expirationDate == null) {    throw new InvalidArgumentException("null expiration date");  }  this.expirationDate=expirationDate;}  }
class C{  public HistoryPseudoState(PseudoStateKind kind,StateHolder<S,E> containingState){  this(kind,containingState,new StateHolder<S,E>(null));}  }
class C{  private PdfPTable createNegotiationTable(final TenderResponse tenderResponse,final Contractor contractor) throws DocumentException, ApplicationException {  final PdfPTable negotiationTable=new PdfPTable(13);  negotiationTable.setWidthPercentage(100);  negotiationTable.setWidths(new float[]{0.5f,1f,3.6f,1.5f,1.1f,0.9f,1.5f,1.7f,1.7f,1.7f,1.7f,1.7f,1.7f});  try {    negotiationTable.getDefaultCell().setPadding(5);    negotiationTable.getDefaultCell().setBorderWidth(1);    negotiationTable.getDefaultCell().setHorizontalAlignment(Element.ALIGN_CENTER);    negotiationTable.addCell(pdfLabel.get("tenderNegotiationpdf.slno"));    negotiationTable.addCell(pdfLabel.get("tenderNegotiationpdf.scheduleno"));    negotiationTable.addCell(pdfLabel.get("tenderNegotiationpdf.descofwork"));    negotiationTable.addCell(pdfLabel.get("tenderNegotiationpdf.quantity"));    final PdfPTable estimateTable=createAsPerEstimateTable(tenderResponse);    estimateTable.setWidths(new float[]{0.45f,0.37f,0.62f});    final PdfPCell estimateCell=new PdfPCell(estimateTable);    estimateCell.setColspan(3);    negotiationTable.addCell(estimateCell);    final PdfPTable beforeNegotiationTable=createBeforeNegotiationTable(tenderResponse);    final PdfPCell beforeNegotiationCell=new PdfPCell(beforeNegotiationTable);    beforeNegotiationCell.setColspan(2);    negotiationTable.addCell(beforeNegotiationCell);    final PdfPTable afterNegotiationTable=createAfterNegotiationTable(tenderResponse);    final PdfPCell afterNegotiationCell=new PdfPCell(afterNegotiationTable);    afterNegotiationCell.setColspan(2);    negotiationTable.addCell(afterNegotiationCell);    final PdfPTable marketRateTable=createMarketRateTable(tenderResponse);    final PdfPCell marketRateCell=new PdfPCell(marketRateTable);    marketRateCell.setColspan(2);    negotiationTable.addCell(marketRateCell);    if (YES.equalsIgnoreCase(worksPackgeReq))     createNegotiationTableDataForWp(tenderResponse,negotiationTable,contractor); else     createNegotiationTableData(tenderResponse,negotiationTable,contractor);    createNegotiationTableFooter(negotiationTable);    addRowFooter(negotiationTable);    addTotalQuotedFooter(negotiationTable);    addFinalRow(negotiationTable,tenderResponse);  } catch (  final DocumentException e) {    throw new ApplicationRuntimeException(TENDER_PDF_ERROR,e);  }catch (  final ApplicationException ex) {    throw new ApplicationRuntimeException(TENDER_PDF_ERROR,ex);  }  return negotiationTable;}  }
class C{  public JSONArray(String source) throws JSONException {  this(new JSONTokener(source));}  }
class C{  private void fullyLock(){  putLock.lock();  takeLock.lock();}  }
class C{  @Override public void mousePressed(MouseEvent e){  if (e.getClickCount() == 1 && SwingUtilities.isLeftMouseButton(e)) {    String url=getUrl(e);    if (url != null && !isUrlDeleted(e)) {      if (linkListener != null) {        linkListener.linkClicked(url);      }      return;    }    User user=getUser(e);    if (user != null) {      for (      UserListener listener : userListener) {        listener.userClicked(user,e);      }      return;    }    EmoticonImage emote=getEmoticon(e);    if (emote != null) {      for (      UserListener listener : userListener) {        listener.emoteClicked(emote.getEmoticon(),e);      }      return;    }    Usericon usericon=getUsericon(e);    if (usericon != null) {      for (      UserListener listener : userListener) {        listener.usericonClicked(usericon,e);      }    }  } else   if (e.isPopupTrigger()) {    openContextMenu(e);  }}  }
class C{  public void copyFrom(InputStream is,int length) throws IOException {  this.array.copyFrom(is,length);}  }
class C{  public void completeIt(){  setDocStatus(MPPOrderNode.DOCSTATUS_Completed);  setDocAction(MPPOrderNode.DOCACTION_None);  setDateFinish(true);}  }
class C{  public static final int[] fromSparseString(String s){  return toIntArray(s.split(","));}  }
class C{  public static void isPassword(String member,String value) throws ValidationException {  maxLength(member,value,ADMValidator.LENGTH_NAME,false);  minLength(member,value,ADMValidator.MIN_LENGTH_PASSWORD);}  }
class C{  @Deprecated public static boolean isArrayByteBase64(final byte[] arrayOctet){  return isBase64(arrayOctet);}  }
class C{  protected void storeReference(int refId,Object newRef){  refMap.put(Integer.valueOf(refId),newRef);}  }
class C{  public static long parseXsDuration(String value){  Matcher matcher=XS_DURATION_PATTERN.matcher(value);  if (matcher.matches()) {    boolean negated=!TextUtils.isEmpty(matcher.group(1));    String years=matcher.group(3);    double durationSeconds=(years != null) ? Double.parseDouble(years) * 31556908 : 0;    String months=matcher.group(5);    durationSeconds+=(months != null) ? Double.parseDouble(months) * 2629739 : 0;    String days=matcher.group(7);    durationSeconds+=(days != null) ? Double.parseDouble(days) * 86400 : 0;    String hours=matcher.group(10);    durationSeconds+=(hours != null) ? Double.parseDouble(hours) * 3600 : 0;    String minutes=matcher.group(12);    durationSeconds+=(minutes != null) ? Double.parseDouble(minutes) * 60 : 0;    String seconds=matcher.group(14);    durationSeconds+=(seconds != null) ? Double.parseDouble(seconds) : 0;    long durationMillis=(long)(durationSeconds * 1000);    return negated ? -durationMillis : durationMillis;  } else {    return (long)(Double.parseDouble(value) * 3600 * 1000);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public synchronized Bitmap put(final String key,final Bitmap value,boolean recycleable,long owner) throws StorageException {  if (maxCacheSize == 0 || value == null) {    return null;  }  if (!containsKey(key)) {    long bitmapSize=value.getRowBytes() * value.getHeight();    if (!applyCacheLimit(bitmapSize,owner)) {      if (maxCacheSize < (Runtime.getRuntime().maxMemory() - Runtime.getRuntime().totalMemory()) && (maxCacheSize / 2 > bitmapSize)) {        Log.w("LRUMapTileCache","expanding memory tile cache from " + maxCacheSize + " to "+ (maxCacheSize + maxCacheSize / 2));        maxCacheSize=maxCacheSize + maxCacheSize / 2;      } else {        throw new StorageException(StorageException.OOM);      }    }  }  updateKey(key,recycleable,owner);  return super.put(key,value);}  }
class C{  @Override protected T doSwitch(int classifierID,EObject theEObject){switch (classifierID) {case DomPackage.DOCLET:{      Doclet doclet=(Doclet)theEObject;      T result=caseDoclet(doclet);      if (result == null)       result=caseComposite(doclet);      if (result == null)       result=caseJSDocNode(doclet);      if (result == null)       result=caseDocletElement(doclet);      if (result == null)       result=defaultCase(theEObject);      return result;    }case DomPackage.DOCLET_ELEMENT:{    DocletElement docletElement=(DocletElement)theEObject;    T result=caseDocletElement(docletElement);    if (result == null)     result=defaultCase(theEObject);    return result;  }case DomPackage.COMPOSITE:{  Composite composite=(Composite)theEObject;  T result=caseComposite(composite);  if (result == null)   result=caseJSDocNode(composite);  if (result == null)   result=caseDocletElement(composite);  if (result == null)   result=defaultCase(theEObject);  return result;}case DomPackage.JS_DOC_NODE:{JSDocNode jsDocNode=(JSDocNode)theEObject;T result=caseJSDocNode(jsDocNode);if (result == null) result=caseDocletElement(jsDocNode);if (result == null) result=defaultCase(theEObject);return result;}case DomPackage.CONTENT_NODE:{ContentNode contentNode=(ContentNode)theEObject;T result=caseContentNode(contentNode);if (result == null) result=caseJSDocNode(contentNode);if (result == null) result=caseDocletElement(contentNode);if (result == null) result=defaultCase(theEObject);return result;}case DomPackage.TAG:{Tag tag=(Tag)theEObject;T result=caseTag(tag);if (result == null) result=caseDocletElement(tag);if (result == null) result=defaultCase(theEObject);return result;}case DomPackage.TAG_VALUE:{TagValue tagValue=(TagValue)theEObject;T result=caseTagValue(tagValue);if (result == null) result=caseComposite(tagValue);if (result == null) result=caseJSDocNode(tagValue);if (result == null) result=caseDocletElement(tagValue);if (result == null) result=defaultCase(theEObject);return result;}case DomPackage.TAG_TITLE:{TagTitle tagTitle=(TagTitle)theEObject;T result=caseTagTitle(tagTitle);if (result == null) result=caseJSDocNode(tagTitle);if (result == null) result=caseDocletElement(tagTitle);if (result == null) result=defaultCase(theEObject);return result;}case DomPackage.LINE_TAG:{LineTag lineTag=(LineTag)theEObject;T result=caseLineTag(lineTag);if (result == null) result=caseTag(lineTag);if (result == null) result=caseDocletElement(lineTag);if (result == null) result=defaultCase(theEObject);return result;}case DomPackage.INLINE_TAG:{InlineTag inlineTag=(InlineTag)theEObject;T result=caseInlineTag(inlineTag);if (result == null) result=caseContentNode(inlineTag);if (result == null) result=caseTag(inlineTag);if (result == null) result=caseJSDocNode(inlineTag);if (result == null) result=caseDocletElement(inlineTag);if (result == null) result=defaultCase(theEObject);return result;}case DomPackage.TEXT:{Text text=(Text)theEObject;T result=caseText(text);if (result == null) result=caseContentNode(text);if (result == null) result=caseJSDocNode(text);if (result == null) result=caseDocletElement(text);if (result == null) result=defaultCase(theEObject);return result;}case DomPackage.SIMPLE_TYPE_REFERENCE:{SimpleTypeReference simpleTypeReference=(SimpleTypeReference)theEObject;T result=caseSimpleTypeReference(simpleTypeReference);if (result == null) result=caseContentNode(simpleTypeReference);if (result == null) result=caseJSDocNode(simpleTypeReference);if (result == null) result=caseDocletElement(simpleTypeReference);if (result == null) result=defaultCase(theEObject);return result;}case DomPackage.FULL_TYPE_REFERENCE:{FullTypeReference fullTypeReference=(FullTypeReference)theEObject;T result=caseFullTypeReference(fullTypeReference);if (result == null) result=caseSimpleTypeReference(fullTypeReference);if (result == null) result=caseContentNode(fullTypeReference);if (result == null) result=caseJSDocNode(fullTypeReference);if (result == null) result=caseDocletElement(fullTypeReference);if (result == null) result=defaultCase(theEObject);return result;}case DomPackage.FULL_MEMBER_REFERENCE:{FullMemberReference fullMemberReference=(FullMemberReference)theEObject;T result=caseFullMemberReference(fullMemberReference);if (result == null) result=caseFullTypeReference(fullMemberReference);if (result == null) result=caseSimpleTypeReference(fullMemberReference);if (result == null) result=caseContentNode(fullMemberReference);if (result == null) result=caseJSDocNode(fullMemberReference);if (result == null) result=caseDocletElement(fullMemberReference);if (result == null) result=defaultCase(theEObject);return result;}case DomPackage.VARIABLE_REFERENCE:{VariableReference variableReference=(VariableReference)theEObject;T result=caseVariableReference(variableReference);if (result == null) result=caseContentNode(variableReference);if (result == null) result=caseJSDocNode(variableReference);if (result == null) result=caseDocletElement(variableReference);if (result == null) result=defaultCase(theEObject);return result;}case DomPackage.GENERIC_REFERENCE:{GenericReference genericReference=(GenericReference)theEObject;T result=caseGenericReference(genericReference);if (result == null) result=defaultCase(theEObject);return result;}case DomPackage.LITERAL:{Literal literal=(Literal)theEObject;T result=caseLiteral(literal);if (result == null) result=caseContentNode(literal);if (result == null) result=caseJSDocNode(literal);if (result == null) result=caseDocletElement(literal);if (result == null) result=defaultCase(theEObject);return result;}case DomPackage.MARKER:{Marker marker=(Marker)theEObject;T result=caseMarker(marker);if (result == null) result=defaultCase(theEObject);return result;}case DomPackage.COMPOSED_CONTENT:{ComposedContent composedContent=(ComposedContent)theEObject;T result=caseComposedContent(composedContent);if (result == null) result=caseComposite(composedContent);if (result == null) result=caseContentNode(composedContent);if (result == null) result=caseJSDocNode(composedContent);if (result == null) result=caseDocletElement(composedContent);if (result == null) result=defaultCase(theEObject);return result;}case DomPackage.STRUCTURED_TEXT:{StructuredText structuredText=(StructuredText)theEObject;T result=caseStructuredText(structuredText);if (result == null) result=caseText(structuredText);if (result == null) result=caseContentNode(structuredText);if (result == null) result=caseJSDocNode(structuredText);if (result == null) result=caseDocletElement(structuredText);if (result == null) result=defaultCase(theEObject);return result;}default :return defaultCase(theEObject);}}  }
class C{  public void clear(){  checkReadable();  m_map.clear();}  }
class C{  public LineStrip2D toLineStrip2D(int res){  LineStrip2D strip=new LineStrip2D();  int i=0;  int maxRes=res;  for (int num=points.size(); i < num - 3; i+=3) {    Vec2D a=points.get(i);    Vec2D b=points.get(i + 1);    Vec2D c=points.get(i + 2);    Vec2D d=points.get(i + 3);    if (i + 3 > num - 3) {      maxRes++;    }    for (int t=0; t < maxRes; t++) {      strip.add(computePointInSegment(a,b,c,d,(float)t / res));    }  }  return strip;}  }
class C{  void writeNormalizedChars(final char ch[],final int start,final int length,final boolean useLineSep) throws IOException, org.xml.sax.SAXException {  final String encoding=getEncoding();  final java.io.Writer writer=m_writer;  final int end=start + length;  final char S_LINEFEED=CharInfo.S_LINEFEED;  for (int i=start; i < end; i++) {    final char c=ch[i];    if (S_LINEFEED == c && useLineSep) {      writer.write(m_lineSep,0,m_lineSepLen);    } else     if (m_encodingInfo.isInEncoding(c)) {      writer.write(c);    } else     if (Encodings.isHighUTF16Surrogate(c)) {      final int codePoint=writeUTF16Surrogate(c,ch,i,end);      if (codePoint != 0) {        final String integralValue=Integer.toString(codePoint);        final String msg=Utils.messages.createMessage(MsgKey.ER_ILLEGAL_CHARACTER,new Object[]{integralValue,encoding});        System.err.println(msg);      }      i++;    } else {      if (encoding != null) {        writer.write('&');        writer.write('#');        writer.write(Integer.toString(c));        writer.write(';');        final String integralValue=Integer.toString(c);        final String msg=Utils.messages.createMessage(MsgKey.ER_ILLEGAL_CHARACTER,new Object[]{integralValue,encoding});        System.err.println(msg);      } else {        writer.write(c);      }    }  }}  }
class C{  public static Bundler of(Bundle b){  return new Bundler(b);}  }
class C{  public Hex(int level,String terrain,String theme,Coords c){  this(level,new ITerrain[Terrains.SIZE],theme,c);  for (StringTokenizer st=new StringTokenizer(terrain,";",false); st.hasMoreTokens(); ) {    addTerrain(Terrains.getTerrainFactory().createTerrain(st.nextToken()));  }}  }
class C{  private String handleExportMaskUpdate(URI export,Map<URI,Integer> blockObjectMap,Workflow workflow,StorageSystem vplexSystem,Map<URI,List<Initiator>> exportMasksToUpdateOnDeviceWithInitiators,Map<URI,List<URI>> exportMasksToUpdateOnDeviceWithStoragePorts,String storageViewStepId,ExportMask exportMask,boolean sharedVplexExportMask){  _log.info("adding step to update export mask: " + exportMask.getMaskName());  Workflow.Method storageViewExecuteMethod=new Workflow.Method("exportMaskAddVolumes",vplexSystem.getId(),export,exportMask.getId(),blockObjectMap);  Workflow.Method storageViewRollbackMethod=new Workflow.Method(ROLLBACK_METHOD_NULL);  storageViewStepId=workflow.createStep("storageView",String.format("Updating VPLEX Storage View for ExportGroup %s Mask %s",export,exportMask.getMaskName()),storageViewStepId,vplexSystem.getId(),vplexSystem.getSystemType(),this.getClass(),storageViewExecuteMethod,storageViewRollbackMethod,null);  if (exportMasksToUpdateOnDeviceWithInitiators.get(exportMask.getId()) != null) {    List<Initiator> initiatorsToAdd=exportMasksToUpdateOnDeviceWithInitiators.get(exportMask.getId());    List<URI> initiatorURIs=new ArrayList<URI>();    for (    Initiator initiator : initiatorsToAdd) {      initiatorURIs.add(initiator.getId());    }    Workflow.Method addInitiatorMethod=storageViewAddInitiatorsMethod(vplexSystem.getId(),export,exportMask.getId(),initiatorURIs,null,sharedVplexExportMask);    Workflow.Method initiatorRollback=storageViewRemoveInitiatorsMethod(vplexSystem.getId(),export,exportMask.getId(),initiatorURIs,null);    storageViewStepId=workflow.createStep("storageView",String.format("Updating VPLEX Storage View for ExportGroup %s Mask %s",export,exportMask.getMaskName()),storageViewStepId,vplexSystem.getId(),vplexSystem.getSystemType(),this.getClass(),addInitiatorMethod,initiatorRollback,null);  }  if (exportMasksToUpdateOnDeviceWithStoragePorts.containsKey(exportMask.getId())) {    List<URI> storagePortURIsToAdd=exportMasksToUpdateOnDeviceWithStoragePorts.get(exportMask.getId());    Workflow.Method addPortsToViewMethod=storageViewAddStoragePortsMethod(vplexSystem.getId(),export,exportMask.getId(),storagePortURIsToAdd);    Workflow.Method addToViewRollbackMethod=storageViewRemoveStoragePortsMethod(vplexSystem.getId(),export,exportMask.getId(),storagePortURIsToAdd);    storageViewStepId=workflow.createStep("storageView",String.format("Updating VPLEX Storage View StoragePorts for ExportGroup %s Mask %s",export,exportMask.getMaskName()),storageViewStepId,vplexSystem.getId(),vplexSystem.getSystemType(),this.getClass(),addPortsToViewMethod,addToViewRollbackMethod,null);  }  return storageViewStepId;}  }
class C{  protected void addSubScopesPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_ExecutionScope_subScopes_feature"),getString("_UI_PropertyDescriptor_description","_UI_ExecutionScope_subScopes_feature","_UI_ExecutionScope_type"),SexecPackage.Literals.EXECUTION_SCOPE__SUB_SCOPES,true,false,true,null,null,null));}  }
class C{  protected final void immutable(){  throw new UnsupportedOperationException("this object is immutable");}  }
class C{  public boolean isSubnetMaskSettable(){  return subnetMaskSettable;}  }
class C{  public synchronized void keyReleased(KeyEvent e){}  }
class C{  public Joiner max(int maxCacheSize){  lastJClass.setMaxCacheSize(maxCacheSize);  return this;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public JSONArray(JSONTokener x) throws JSONException {  this();  if (x.nextClean() != '[') {    throw x.syntaxError("A JSONArray text must start with '['");  }  if (x.nextClean() != ']') {    x.back();    for (; ; ) {      if (x.nextClean() == ',') {        x.back();        this.myArrayList.add(JSONObject.NULL);      } else {        x.back();        this.myArrayList.add(x.nextValue());      }switch (x.nextClean()) {case ',':        if (x.nextClean() == ']') {          return;        }      x.back();    break;case ']':  return;default :throw x.syntaxError("Expected a ',' or ']'");}}}}  }
class C{  public void report(DiagnosticPosition pos,String msg,Object... args){  JavaFileObject currentSource=log.currentSourceFile();  if (verbose) {    if (sourcesWithReportedWarnings == null)     sourcesWithReportedWarnings=new HashSet<JavaFileObject>();    if (log.nwarnings < log.MaxWarnings) {      logMandatoryWarning(pos,msg,args);      sourcesWithReportedWarnings.add(currentSource);    } else     if (deferredDiagnosticKind == null) {      if (sourcesWithReportedWarnings.contains(currentSource)) {        deferredDiagnosticKind=DeferredDiagnosticKind.ADDITIONAL_IN_FILE;      } else {        deferredDiagnosticKind=DeferredDiagnosticKind.IN_FILE;      }      deferredDiagnosticSource=currentSource;      deferredDiagnosticArg=currentSource;    } else     if ((deferredDiagnosticKind == DeferredDiagnosticKind.IN_FILE || deferredDiagnosticKind == DeferredDiagnosticKind.ADDITIONAL_IN_FILE) && !equal(deferredDiagnosticSource,currentSource)) {      deferredDiagnosticKind=DeferredDiagnosticKind.ADDITIONAL_IN_FILES;      deferredDiagnosticArg=null;    }  } else {    if (deferredDiagnosticKind == null) {      deferredDiagnosticKind=DeferredDiagnosticKind.IN_FILE;      deferredDiagnosticSource=currentSource;      deferredDiagnosticArg=currentSource;    } else     if (deferredDiagnosticKind == DeferredDiagnosticKind.IN_FILE && !equal(deferredDiagnosticSource,currentSource)) {      deferredDiagnosticKind=DeferredDiagnosticKind.IN_FILES;      deferredDiagnosticArg=null;    }  }}  }
class C{  public Set<String> names(){  TreeSet<String> result=new TreeSet<String>(String.CASE_INSENSITIVE_ORDER);  for (int i=0; i < length(); i++) {    result.add(getFieldName(i));  }  return Collections.unmodifiableSet(result);}  }
class C{  public static void main(String[] args){  Memory mem=new Memory();  System.out.println("Initial memory: " + Utils.doubleToString(Memory.toMegaByte(mem.getInitial()),1) + "MB"+ " ("+ mem.getInitial()+ ")");  System.out.println("Max memory: " + Utils.doubleToString(Memory.toMegaByte(mem.getMax()),1) + "MB"+ " ("+ mem.getMax()+ ")");}  }
class C{  public boolean hasReprUrl(){  return fieldSetFlags()[17];}  }
class C{  public boolean isOuterShell(){  return getOuterHole() != null;}  }
class C{  public void pop(int where){  this.end=where;}  }
class C{  public Bidi(char[] text,int textStart,byte[] embeddings,int embStart,int paragraphLength,int flags){  if (text == null) {    throw new IllegalArgumentException("text is null");  }  if (paragraphLength < 0) {    throw new IllegalArgumentException("bad length: " + paragraphLength);  }  if (textStart < 0 || paragraphLength > text.length - textStart) {    throw new IllegalArgumentException("bad range: " + textStart + " length: "+ paragraphLength+ " for text of length: "+ text.length);  }  if (embeddings != null && (embStart < 0 || paragraphLength > embeddings.length - embStart)) {    throw new IllegalArgumentException("bad range: " + embStart + " length: "+ paragraphLength+ " for embeddings of length: "+ text.length);  }  bidiBase=new BidiBase(text,textStart,embeddings,embStart,paragraphLength,flags);}  }
class C{  public PEPManager(Connection connection){  this.connection=connection;  init();}  }
class C{  public Object readList(Class expectedClass,String type,int length) throws IOException {  Vector list=new Vector();  if (refs == null)   refs=new Vector();  refs.addElement(list);  while (parseTag()) {    peekTag=true;    Object value=readObject(null);    list.addElement(value);  }  if (!sbuf.toString().equals("list"))   throw new BurlapProtocolException("expected </list>");  return list;}  }
class C{  protected Node deepExport(Node n,AbstractDocument d){  GenericElementNS ge=(GenericElementNS)super.deepExport(n,d);  ge.nodeName=nodeName;  return n;}  }
class C{  private void putEntry(String key,CacheHeader entry){  if (!mEntries.containsKey(key)) {    mTotalSize+=entry.size;  } else {    CacheHeader oldEntry=mEntries.get(key);    mTotalSize+=(entry.size - oldEntry.size);  }  mEntries.put(key,entry);}  }
class C{  public static boolean aboveOrEqual(int a,int b){  return Integer.compareUnsigned(a,b) >= 0;}  }
class C{  public static <T,R>Function<T,R> wrap(Function<T,R> w){  TaskContext c=current();  if (c != null) {    return null;  }  return w;}  }
class C{  public Object[] createTable(){  int n=keys.size();  Object[] tbl=new Object[2 * n];  for (int i=0; i < n; i++) {    int offs=2 * i;    tbl[offs]=keys.elementAt(i);    tbl[offs + 1]=data.elementAt(i);  }  return tbl;}  }
class C{  public boolean removeMember(Principal p){  return true;}  }
class C{  public static final boolean isIplUt4IdentityReportMessage(LocoNetMessage m){  return isIplSpecificIdentityReportMessage(m,LnConstants.RE_IPL_MFR_DIGITRAX,LnConstants.RE_IPL_DIGITRAX_HOST_UT4);}  }
class C{  public Color negate(){  return rgbac(255 - red(),255 - green(),255 - blue(),alpha());}  }
class C{  protected LineTagImpl(){  super();}  }
class C{  public void testMomentWithInvalidTypeErrorHandling(){  String xml="";  xml+=createStartMissionXml("start","Name");  xml+=createStartMomentXml("invalid","start");  xml+=createNextMomentXml("start");  xml+=createLengthMinutesXml(0.25);  xml+=createEndMomentXml();  xml+=createEndMissionXml();  InputStream momentInputStream=new ByteArrayInputStream(xml.getBytes());  mMission=new Mission(mMissionData);  boolean didMissionParseFail=false;  try {    mMission.readMoments(momentInputStream);  } catch (  MissionParseException e) {    didMissionParseFail=true;  }  Assert.assertEquals(true,didMissionParseFail);}  }
class C{  public boolean canChangeWarehouse(){  if (getQtyDelivered().signum() != 0) {    log.saveError("Error",Msg.translate(getCtx(),"QtyDelivered") + "=" + getQtyDelivered());    return false;  }  if (getQtyInvoiced().signum() != 0) {    log.saveError("Error",Msg.translate(getCtx(),"QtyInvoiced") + "=" + getQtyInvoiced());    return false;  }  if (getQtyReserved().signum() != 0) {    log.saveError("Error",Msg.translate(getCtx(),"QtyReserved") + "=" + getQtyReserved());    return false;  }  return true;}  }
class C{  public static IByteSequence readBytesFromFile(File file) throws IOException {  long fileLength=file.length();  if (fileLength > Integer.MAX_VALUE)   throw new IOException("File is too large, size is bigger than " + Integer.MAX_VALUE);  return StreamUtil.readAllBytesFromStream(new FileInputStream(file),(int)fileLength);}  }
class C{  public void println(String[] values) throws IOException {  for (int i=0; i < values.length; i++) {    print(values[i]);  }  println();}  }
class C{  @CanIgnoreReturnValue @Override public int remove(@Nullable Object element,int occurrences){  if (occurrences == 0) {    return count(element);  }  CollectPreconditions.checkPositive(occurrences,"occurences");  AtomicInteger existingCounter=Maps.safeGet(countMap,element);  if (existingCounter == null) {    return 0;  }  while (true) {    int oldValue=existingCounter.get();    if (oldValue != 0) {      int newValue=Math.max(0,oldValue - occurrences);      if (existingCounter.compareAndSet(oldValue,newValue)) {        if (newValue == 0) {          countMap.remove(element,existingCounter);        }        return oldValue;      }    } else {      return 0;    }  }}  }
class C{  public FXGCompiler(CompilerConfiguration configuration,NameMappings nameMappings){  mimeTypes=new String[]{MimeMappings.FXG};  this.nameMappings=nameMappings;  generatedOutputDir=configuration.keepGeneratedActionScript() ? configuration.getGeneratedDirectory() : null;  skeletonCompiler=new SkeletonCompiler(configuration);  implementationCompiler=new ImplementationCompiler(configuration);  boolean mobile=configuration.getMobile();  if (mobile)   profile=FXG_PROFILE_MOBILE;  LocalizationManager lm=ThreadLocalToolkit.getLocalizationManager();  if (lm != null) {    Locale locale=lm.getLocale();    FXGLocalizationUtil.setDefaultLocale(locale);    FXGLocalizationUtil.setLocale(locale);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().getVideoFrame().setVideoHShiftFreq(getLong(stack));  return null;}  }
class C{  @NotNull private static List<PyAssignmentStatement> copyInstanceFields(@NotNull final Collection<PyAssignmentStatement> members,@NotNull final PyClass to){  PyFunction toInitMethod=PyUtil.getInitMethod(to);  if (toInitMethod == null) {    toInitMethod=createInitMethod(to);  }  final PyStatementList statementList=toInitMethod.getStatementList();  return PyClassRefactoringUtil.copyFieldDeclarationToStatement(members,statementList,null);}  }
class C{  static void writeShort(final byte[] b,final int index,final int s){  b[index]=(byte)(s >>> 8);  b[index + 1]=(byte)s;}  }
class C{  public void failed(Exception e) throws AdeInternalException {  if (e instanceof SQLException) {    final SQLException se=(SQLException)e;    final Exception cause=se.getNextException();    if (cause != null) {      logger.error("An sql exception occured",e);      logger.error("The root cause of this exception is added to the following ade internal exception");      e=cause;    }  }  throw new AdeInternalException("Database access error",e);}  }
class C{  @action(name="subscribe",args={@arg(name=GamaMessageType.MESSAGE_STR,type=IType.MESSAGE,optional=false,doc=@doc("The message to be replied")),@arg(name=GamaMessage.CONTENTS,type=IType.LIST,optional=false,doc=@doc("The content of the replying message"))},doc=@doc("Replies a message with a 'subscribe' performative message.")) public Object primSubscribe(final IScope scope) throws GamaRuntimeException {  final IList originals=getMessageArg(scope);  if (originals == null || originals.size() == 0) {    throw GamaRuntimeException.error("No message to reply",scope);  }  return replyMessage(scope,originals,SUBSCRIBE,getContentArg(scope));}  }
class C{  public void addCol(int before){  int size=rows * (cols + 1);  float[] x=new float[size];  float[] y=new float[size];  cols++;  int i=0;  int j=0;  for (int row=0; row < rows; row++) {    for (int col=0; col < cols; col++) {      if (col == before) {        x[j]=(xGrid[i] + xGrid[i - 1]) / 2;        y[j]=(yGrid[i] + yGrid[i - 1]) / 2;      } else {        x[j]=xGrid[i];        y[j]=yGrid[i];        i++;      }      j++;    }  }  xGrid=x;  yGrid=y;}  }
class C{  public ZoneLayer(Set<Zone<T>> zones){  for (  Zone<T> z : zones) {    if (srid < 0) {      srid=z.getGeometry().getSRID();      crs=CRSUtils.getCRS(srid);    } else {      if (z.getGeometry().getSRID() != srid)       throw new RuntimeException("Cannot build a spatial index with zones that have different coordinate reference systems.");    }  }  this.zones=Collections.unmodifiableSet(zones);  quadtree=new Quadtree();  for (  Zone<T> zone : zones) {    quadtree.insert(zone.getGeometry().getEnvelopeInternal(),zone);  }}  }
class C{  public static boolean writeFileString(String path,String content){  try {    File fileWrite=new File(path);    File fileDir=new File(fileWrite.toString().substring(0,path.lastIndexOf("/")));    logt("Destination path: " + path);    logt("Making directories...");    fileDir.mkdirs();    Writer writer=new BufferedWriter(new FileWriter(fileWrite));    logt("Writing...");    writer.write(content);    logt("Closing...");    writer.close();    logt("Finished!");    return true;  } catch (  Exception ex) {    StackTraceParser.logStackTrace(ex);    return false;  }}  }
class C{  public int findIndexOfValue(String value){  if (value != null && mEntryValues != null) {    for (int i=mEntryValues.length - 1; i >= 0; i--) {      if (mEntryValues[i].equals(value)) {        return i;      }    }  }  return -1;}  }
class C{  public static double NHrawFitness(boolean useTrainingData,GEPIndividual ind,int chromosomeNum){  double expectedResult;  double predictedValue;  GEPDependentVariable dv;  if (useTrainingData)   dv=GEPDependentVariable.trainingData; else   dv=GEPDependentVariable.testingData;  double dvValues[]=dv.getDependentVariableValues(chromosomeNum);  double sumOfHits=0.0;  int len=dvValues.length;  for (int i=0; i < len; i++) {    predictedValue=ind.eval(chromosomeNum,useTrainingData,i);    expectedResult=dvValues[i];    if (predictedValue == expectedResult)     sumOfHits+=1.0;  }  return sumOfHits;}  }
class C{  public boolean init(){  m_session=m_request.getSession(true);  m_forward=WebUtil.getParameter(m_request,P_ForwardTo);  if (m_forward != null)   m_session.setAttribute(P_ForwardTo,m_forward); else   m_forward="";  m_salesRep=WebUtil.getParameter(m_request,P_SalesRep_ID);  if (m_salesRep != null)   m_session.setAttribute(P_SalesRep_ID,m_salesRep);  m_email=WebUtil.getParameter(m_request,P_EMail);  if (m_email == null)   m_email="";  m_email=m_email.trim();  if (m_email != null)   m_session.setAttribute(P_EMail,m_email);  m_password=WebUtil.getParameter(m_request,P_Password);  if (m_password == null)   m_password="";  m_password=m_password.trim();  if (m_session.getAttribute(WebInfo.NAME) != null) {    WebInfo wi=(WebInfo)m_session.getAttribute(WebInfo.NAME);    m_wu=wi.getWebUser();  }  return true;}  }
class C{  public void removeActionListener(ActionListener listener){  listenerList.remove(ActionListener.class,listener);}  }
class C{  private void buildStateTable(Vector<String> tempRuleList){  tempStateTable=new Vector<>();  tempStateTable.addElement(new short[numCategories + 1]);  tempStateTable.addElement(new short[numCategories + 1]);  for (int i=0; i < tempRuleList.size(); i++) {    String rule=tempRuleList.elementAt(i);    if (rule.charAt(0) != '!') {      parseRule(rule,true);    }  }  finishBuildingStateTable(true);}  }
class C{  public static List<String> newDirectoryStream(String path){  List<FilePath> list=FilePath.get(path).newDirectoryStream();  int len=list.size();  List<String> result=New.arrayList(len);  for (int i=0; i < len; i++) {    result.add(list.get(i).toString());  }  return result;}  }
class C{  public void warn(String msg,Object[] args) throws TransformerException {  java.lang.String fmsg=XSLMessages.createXPATHWarning(msg,args);  if (null != m_errorHandler) {    m_errorHandler.warning(new TransformerException(fmsg,m_locator));  } else {    System.out.println(fmsg + "; file " + m_locator.getSystemId()+ "; line "+ m_locator.getLineNumber()+ "; column "+ m_locator.getColumnNumber());  }}  }
class C{  JavaFileObjectImpl(final String name,final Kind kind){  super(CharSequenceCompiler.toURI(name),kind);  source=null;}  }
class C{  public void clear(){  clearIntentHistory();  mInitialNavigationType=NAVIGATION_TYPE_NONE;  mIsOnEffectiveRedirectChain=false;  mLastCommittedEntryIndexBeforeStartingNavigation=0;  mShouldNotOverrideUrlLoadingUntilNewUrlLoading=false;}  }
class C{  public GitVersion(int major,int minor,int revision,int patchLevel){  this(major,minor,revision,patchLevel,Type.UNDEFINED);}  }
