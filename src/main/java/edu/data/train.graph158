class C{  public T caseFunctionTypeExpression(FunctionTypeExpression object){  return null;}  }
class C{  public void testDoesntSetToolsJarWhenOsX() throws Exception {  System.setProperty("mrj.version","is.OsX");  configuration.setProperty(GeneralPropertySet.JAVA_HOME,"myTestPath");  AbstractInstalledLocalContainer container=new AbstractInstalledLocalContainerStub(configuration);  JvmLauncherStub java=new JvmLauncherStub();  container.addToolsJarToClasspath(java);  assertFalse(java.getClasspath().contains("myTestPath"));}  }
class C{  public String encrypt(String value){  String securedata=null;  byte[] bytes=value.getBytes(utf8);  try {    Cipher encryptCipher=Cipher.getInstance(CIPHER_CODE);    encryptCipher.init(Cipher.ENCRYPT_MODE,sk,ivspec);    byte[] encdata=encryptCipher.doFinal(bytes);    securedata=DatatypeConverter.printBase64Binary(encdata);  } catch (  NoSuchAlgorithmException|NoSuchPaddingException|InvalidKeyException|InvalidAlgorithmParameterException|IllegalBlockSizeException|BadPaddingException e) {    if (LOGGER.isLoggable(Level.SEVERE)) {      LOGGER.log(Level.SEVERE,"Unexpected exception initializing encryption." + "  No encryption will be performed.",e);    }    return null;  }  return securedata;}  }
class C{  public Crop(Uri source){  cropIntent=new Intent();  cropIntent.setData(source);}  }
class C{  private void logSlowRequests(long requestLifetime,Request<?> request,byte[] responseContents,StatusLine statusLine){  if (DEBUG || requestLifetime > SLOW_REQUEST_THRESHOLD_MS) {    VolleyLog.d("HTTP response for request=<%s> [lifetime=%d], [size=%s], " + "[rc=%d], [retryCount=%s]",request,requestLifetime,responseContents != null ? responseContents.length : "null",statusLine.getStatusCode(),request.getRetryPolicy().getCurrentRetryCount());  }}  }
class C{  public AnnotationMemberValue(ConstPool cp){  this(null,cp);}  }
class C{  public ConditionedExampleSet(ExampleSet parent,Condition condition,boolean inverted) throws ExpressionEvaluationException {  this.parent=(ExampleSet)parent.clone();  try {    this.mapping=calculateMapping(condition,inverted,null);  } catch (  ProcessStoppedException e) {  }}  }
class C{  public void add(int index,Object element){  insertElementAt(element,index);}  }
class C{  private void findStabbedSegments(Coordinate stabbingRayLeftPt,List dirEdges,List stabbedSegments){  for (Iterator i=dirEdges.iterator(); i.hasNext(); ) {    DirectedEdge de=(DirectedEdge)i.next();    if (!de.isForward())     continue;    findStabbedSegments(stabbingRayLeftPt,de,stabbedSegments);  }}  }
class C{  public boolean isContextual(){  return fContextual;}  }
class C{  private static void checkInternal(WsInfo info){  if (info.getServicePort() == ServicePort.STS) {    String text="Service port should be " + ServicePort.BASIC + " or "+ ServicePort.CLIENTCERT;    logger.error(text);    throw new WebServiceException(text);  }}  }
class C{  private static double roundUp(final double val){  int exponent=(int)Math.floor(Math.log10(val));  double rval=val * Math.pow(10,-exponent);  if (rval > 5.0) {    rval=10.0;  } else   if (rval > 2.0) {    rval=5.0;  } else   if (rval > 1.0) {    rval=2.0;  }  rval*=Math.pow(10,exponent);  return rval;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public DecimalStyle withZeroDigit(char zeroDigit){  if (zeroDigit == this.zeroDigit) {    return this;  }  return new DecimalStyle(zeroDigit,positiveSign,negativeSign,decimalSeparator);}  }
class C{  @Override public void mousePressed(MouseEvent e){  state.mousePressed(e);}  }
class C{  public void clear(){  int n=controller.getCurrentViewN();  writeSetted=new boolean[n];  acceptSetted=new boolean[n];  Arrays.fill(writeSetted,false);  Arrays.fill(acceptSetted,false);  this.write=new byte[n][];  this.accept=new byte[n][];  Arrays.fill((Object[])write,null);  Arrays.fill((Object[])accept,null);  this.proof=new HashSet<ConsensusMessage>();}  }
class C{  @Override public void mouseEntered(MouseEvent e){}  }
class C{  public void cerrarPrevisiones(){  PistaAuditoriaTransferencias pistaAuditoria=AuditoriaTransferencias.crearPistaAuditoria(ArchivoActions.TRANSFERENCIAS_MODULE_CIERRE_PREVISION_TRANSFERENCIA,this);  checkPermission(TransferenciasSecurityManager.CERRAR_PREVISIONES);  Locale locale=getServiceClient().getLocale();  List previsionesCaducadas=_previsionDbEntity.getPrevisionesCaducadas();  PrevisionVO prevision;  for (int i=0; i < previsionesCaducadas.size(); i++) {    prevision=(PrevisionVO)previsionesCaducadas.get(i);    iniciarTransaccion();    _previsionDbEntity.cerrarPrevision(prevision.getId());    pistaAuditoria.addNewDetalleBasico(locale,prevision);    pistaAuditoria.auditaCerrarPrevision(locale,prevision);    commit();  }}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("M_Warehouse_ID"))     p_M_Warehouse_ID=para[i].getParameterAsInt(); else     if (name.equals("C_BPartner_ID"))     p_C_BPartner_ID=para[i].getParameterAsInt(); else     if (name.equals("ReplenishmentCreate"))     p_ReplenishmentCreate=(String)para[i].getParameter(); else     if (name.equals("C_DocType_ID"))     p_C_DocType_ID=para[i].getParameterAsInt(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  public void dontKnowWordButtonPressed(){  boolean flashcardWasFlipped=studyFlashcardsView.showCardBack(currentPosition);  boolean lastFlashcard=isLastFlashcard();  if (flashcardWasFlipped) {    showLessonEnded(lastFlashcard);  } else {    showLessonEndedDialog(lastFlashcard);  }}  }
class C{  @Override public boolean doIsEquals(BlockStmt first,BlockStmt second){  return true;}  }
class C{  public boolean checkUnionTypeAssignment(Types types,JCTree parent,JCMethodInvocation union){  if (parent instanceof JCVariableDecl) {    JCVariableDecl decl=(JCVariableDecl)parent;    if (decl.init == union) {      return checkUnionTypeAssignment(types,parent,decl.type,union);    }  } else   if (parent instanceof JCAssign) {    JCAssign assign=(JCAssign)parent;    if (assign.rhs == union) {      return checkUnionTypeAssignment(types,parent,assign.lhs.type,union);    }  } else   if (parent instanceof JCMethodInvocation) {    JCMethodInvocation invocation=(JCMethodInvocation)parent;    for (    JCTree arg : invocation.args) {      if (arg == union) {        return checkUnionTypeAssignment(types,parent,arg.type,union);      }    }  }  return true;}  }
class C{  synchronized protected void xnTcpSetPendingPackets(int s){  pendingPackets+=s;  if (pendingPackets < 0) {    pendingPackets=0;  }}  }
class C{  public static void unescapeXml(Writer writer,String str) throws IOException {  if (writer == null) {    throw new IllegalArgumentException("The Writer must not be null.");  }  if (str == null) {    return;  }  EntitiesUtils.XML.unescape(writer,str);}  }
class C{  public void handleAlreadyRunningLaunches(){  for (  ILaunch launch : DebugPlugin.getDefault().getLaunchManager().getLaunches()) {    if (!launch.isTerminated()) {      launchAdded(launch);    }  }}  }
class C{  private void removeStore(long id){  List<Long> list=new ArrayList<>();  list.add(id);  removeStores(list);}  }
class C{  public Vector rotateXZ(final double sinAngle,final double cosAngle){  return new Vector(x * cosAngle - z * sinAngle,y,x * sinAngle + z * cosAngle);}  }
class C{  public Builder withTag(Tag tag){  action.getTags().add(tag);  return this;}  }
class C{  public boolean isProvidedByRuntime(){  return this.isDeclaredProvidedByRuntime();}  }
class C{  public static String writeMetadataToString(OFInstructionWriteMetadata inst,Logger log){  if (inst.getMetadataMask().equals(U64.NO_MASK)) {    return inst.getMetadata().toString();  } else {    return inst.getMetadata().toString() + "/" + inst.getMetadataMask().toString();  }}  }
class C{  public void triangulate(ConstrainedPointSet cps){  _triangulations.clear();  _triangulations.add(cps);  start();}  }
class C{  public StreamThroughput(String statusMessagePrefix){  m_instanceCount=0;  m_sampleCount=0;  m_numSamples=0;  m_cumulativeTime=0;  m_startTime=System.currentTimeMillis();  m_statusMessagePrefix=statusMessagePrefix;}  }
class C{  public PiePlot3D(PieDataset dataset){  super(dataset);  setCircular(false,false);}  }
class C{  public ClassDefinitionBuilder method(MethodDefinitionBuilder mdb){  if (mdb != null) {    defs(mdb.build());  }  return this;}  }
class C{  public String toString(){  String result;  lalr_state goto_st;  int cnt;  result="-------- REDUCE_TABLE --------\n";  for (int row=0; row < num_states(); row++) {    result+="From state #" + row + "\n";    cnt=0;    for (int col=0; col < under_state[row].size(); col++) {      goto_st=under_state[row].under_non_term[col];      if (goto_st != null) {        result+=col + ":";        result+=goto_st.index();        cnt++;        if (cnt == 3) {          result+="\n";          cnt=0;        }      }    }    if (cnt != 0)     result+="\n";  }  result+="-----------------------------";  return result;}  }
class C{  public Vector<String> filterCommentsFromInput(Vector<String> input){  Vector<String> filtered=new Vector<String>();  for (int i=0; i < input.size(); i++) {    String val=input.get(i);    if (val.startsWith(_commentSign))     continue;    filtered.add(val);  }  return filtered;}  }
class C{  public void add(String key,Object value){  if (value == null) {    throw new IllegalArgumentException("Value cannot be null");  }  put(key,Collections.singletonList(value));}  }
class C{  public thead addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public final void unbind(){  if (!mIsBound) {    return;  }  unbindImpl();  mIsBound=false;}  }
class C{  public COrExpression(final List<IFilterExpression<T>> expressions){  m_expressions=expressions;}  }
class C{  public Step(String identifier,String title){  this.identifier=identifier;  this.title=title;}  }
class C{  public Constant(double value){  this(Double.class,value);}  }
class C{  public static void writeTo(final Serializer serializer,final String label,final BlockHeight height){  serializer.writeLong(label,height.getRaw());}  }
class C{  @POST @Path("{noteId}") @ZeppelinApi public Response cloneNote(@PathParam("noteId") String noteId,String message) throws IOException, CloneNotSupportedException, IllegalArgumentException {  LOG.info("clone note by JSON {}",message);  NewNoteRequest request=gson.fromJson(message,NewNoteRequest.class);  String newNoteName=null;  if (request != null) {    newNoteName=request.getName();  }  AuthenticationInfo subject=new AuthenticationInfo(SecurityUtils.getPrincipal());  Note newNote=notebook.cloneNote(noteId,newNoteName,subject);  notebookServer.broadcastNote(newNote);  notebookServer.broadcastNoteList(subject,SecurityUtils.getRoles());  return new JsonResponse<>(Status.CREATED,"",newNote.getId()).build();}  }
class C{  public WFG7(int k,int l,int M){  super(k,l,M);}  }
class C{  private synchronized void addMessageListener(TransportAddress localAddr,MessageTypeEventHandler<?> messageListener){synchronized (children) {    EventDispatcher child=children.get(localAddr);    if (child == null) {      child=new EventDispatcher();      children.put(localAddr,child);    }    child.addMessageListener(messageListener);  }}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public void backToPreviousState(){  yybegin(lastStates.pop());}  }
class C{  public void addProtocolEventListener(final DebugEventListener listener){  protocolListeners.addListener(listener);}  }
class C{  private void htmlOnly(Node tree){  try {    String result=renderXml(tree);    throw new AssertionFailedError("Unexpected renderXmlsuccess: " + result);  } catch (  UncheckedUnrenderableException e) {  }  String result=renderHtml(tree);  assertIdenticalStructure(html(result),xml(result));}  }
class C{  public void endVisit(ThisExpression node){}  }
class C{  public CacheOnceMetadataIndex(final AbstractScaleOutFederation<?> fed,final String name,final long timestamp,final MetadataIndexMetadata mdmd){  if (fed == null)   throw new IllegalArgumentException();  if (name == null)   throw new IllegalArgumentException();  if (mdmd == null)   throw new IllegalArgumentException();  this.fed=fed;  this.name=name;  this.timestamp=timestamp;  this.mdi=MetadataIndex.create(fed.getTempStore(),mdmd.getIndexUUID(),mdmd.getManagedIndexMetadata());  this.mdmd=mdmd;  cacheLocators(null,null);}  }
class C{  public void bind(int tcpPort) throws IOException {  bind(new InetSocketAddress(tcpPort),null);}  }
class C{  public static <T>Collection<T> eachWithIndex(Collection<T> self,@ClosureParams(value=FromString.class,options="T,java.lang.Integer") Closure closure){  return (Collection<T>)eachWithIndex((Iterable<T>)self,closure);}  }
class C{  public String asPath(){  if (type == Type.NORMAL) {    return "projects/" + project + "/subscriptions/"+ subscription;  } else {    return subscription;  }}  }
class C{  public synchronized Object assertOneGetNewAndReset(){  ScopeTestHelper.assertTrue("Subscriber invocation not received but expected",isInvoked);  ScopeTestHelper.assertEquals("Mismatch in the number of invocations",1,newDataList.size());  ScopeTestHelper.assertEquals("Mismatch in the number of invocations",1,oldDataList.size());  if (lastNewData == null) {    ScopeTestHelper.fail("No new-data events received");  }  ScopeTestHelper.assertEquals("Mismatch in the number of new-data events",1,lastNewData.length);  ScopeTestHelper.assertNull("No old-data events are expected but some were received",lastOldData);  Object lastNew=lastNewData[0];  reset();  return lastNew;}  }
class C{  public static org.oscm.internal.vo.VOReport convertToUp(org.oscm.vo.VOReport oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOReport newVO=new org.oscm.internal.vo.VOReport();  newVO.setReportName(oldVO.getReportName());  newVO.setLocalizedReportName(oldVO.getLocalizedReportName());  newVO.setReportURLTemplate(oldVO.getReportUrlTemplate());  return newVO;}  }
class C{  public static OutputNode write(Writer result,Format format) throws Exception {  return new NodeWriter(result,format).writeRoot();}  }
class C{  public void reshape(int x,int y,int w,int h){  boolean sizeChanged=(getWidth() != w) || (getHeight() != h);  if (sizeChanged) {    backingStoreImage=null;  }  super.reshape(x,y,w,h);  if (sizeChanged || viewChanged) {    viewChanged=false;    fireStateChanged();  }}  }
class C{  private void reportException(Kind kind,Element element,Throwable t){  StringWriter buf=new StringWriter();  t.printStackTrace(new PrintWriter(buf));  buf.toString();  message(kind,element,"Exception thrown during processing: %s",buf.toString());}  }
class C{  protected void starting(){  nodeCacheMomento=new CacheMomento(node);  nodeCacheMomento.cache();  if (momentos != null) {    for (int i=0; i < momentos.length; i++) {      momentos[i].cache();    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:40.057 -0500",hash_original_method="CEAA7924A62774EE9F1DB0EAFC23F606",hash_generated_method="BBE069E8424B2AE9D19405A0EC7E1F13") public Builder detectAll(){  return enable(DETECT_VM_ACTIVITY_LEAKS | DETECT_VM_CURSOR_LEAKS | DETECT_VM_CLOSABLE_LEAKS);}  }
class C{  @Override public boolean supportsCoreSQLGrammar(){  debugCodeCall("supportsCoreSQLGrammar");  return true;}  }
class C{  public void removeFromPendingList(DownloadInfoRunnable downloadInfoRunnable){  mPendingList.remove(downloadInfoRunnable);}  }
class C{  public NodeSet(NodeIterator ni){  this(32);  addNodes(ni);}  }
class C{  public ObjectMatrix3D make(int slices,int rows,int columns,Object initialValue){  return make(slices,rows,columns).assign(initialValue);}  }
class C{  public static void write(String personID,double home2WorkTravelTime,double home2WorkDistance,double work2HomeTravelTime,double work2HomeDistance,String mode){  try {    assert (UrbanSimPersonCSVWriter.personWriter != null);    personWriter.write(personID + "," + String.valueOf(home2WorkTravelTime)+ ","+ String.valueOf(home2WorkDistance)+ ","+ String.valueOf(work2HomeTravelTime)+ ","+ String.valueOf(work2HomeDistance)+ ","+ mode);    personWriter.newLine();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  private void sendRegistrationIdToBackend(){  try {    shoppingAssistantAPI.registrations().registerDevice(regId).execute();    storeRegistrationId(context,regId);  } catch (  IOException e) {    LOG.warning("Exception when sending registration ID to the " + "backend = " + e.getMessage());  }}  }
class C{  public double computeOptimum(){  double[] lastOptimum=new double[1 << overlap];  double[] newLastOptimum=new double[1 << overlap];  int step=k - overlap;  for (int j=0; j + k <= n; j+=step) {    int index=1 << k;    Arrays.fill(newLastOptimum,Double.NEGATIVE_INFINITY);    for (int l=0; l < index; l++) {      int l1=l >> step;      int l2=l & ((1 << overlap) - 1);      double value=lastOptimum[l1] + function[j / step][l];      if (value > newLastOptimum[l2]) {        newLastOptimum[l2]=value;      }    }    System.arraycopy(newLastOptimum,0,lastOptimum,0,1 << overlap);  }  return -StatUtils.max(lastOptimum);}  }
class C{  protected int size(){  return eventTypes.size();}  }
class C{  @NoInline public static void processPointerUpdate(boolean isScalar,ObjectReference src,Address slot,ObjectReference tgt){  if (!traceBusy) {    if (MERLIN_ANALYSIS) {      ObjectReference oldTgt=slot.loadObjectReference();      if (!oldTgt.isNull())       VM.traceInterface.updateDeathTime(oldTgt);    }    traceBusy=true;    Offset traceOffset=VM.traceInterface.adjustSlotOffset(isScalar,src,slot);    if (isScalar)     trace.push(TRACE_FIELD_SET); else     trace.push(TRACE_ARRAY_SET);    trace.push(VM.traceInterface.getOID(src));    trace.push(traceOffset.toWord());    if (tgt.isNull())     trace.push(Word.zero()); else     trace.push(VM.traceInterface.getOID(tgt));    traceBusy=false;  }}  }
class C{  public void test2(){  final GridLayoutManager layout=new GridLayoutManager(3,1,new Insets(0,0,0,0),0,7);  layout.setSameSizeVertically(true);  final JPanel panel=new JPanel(layout);  final JTextField field1=new JTextField();  field1.setMinimumSize(new Dimension(20,5));  field1.setPreferredSize(new Dimension(20,10));  final JTextField field2=new JTextField();  field2.setMinimumSize(new Dimension(20,25));  field2.setPreferredSize(new Dimension(20,50));  final JTextField field3=new JTextField();  field3.setMinimumSize(new Dimension(20,70));  field3.setPreferredSize(new Dimension(20,100));  panel.add(field1,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_WANT_GROW | GridConstraints.SIZEPOLICY_CAN_SHRINK,null,null,null,0));  panel.add(field2,new GridConstraints(1,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_WANT_GROW | GridConstraints.SIZEPOLICY_CAN_SHRINK,null,null,null,0));  panel.add(field3,new GridConstraints(2,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_BOTH,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_WANT_GROW | GridConstraints.SIZEPOLICY_CAN_SHRINK,null,null,null,0));  final Dimension minimumSize=panel.getMinimumSize();  assertEquals(70 + 7 + 70+ 7+ 70,minimumSize.height);  final Dimension preferredSize=panel.getPreferredSize();  assertEquals(100 + 7 + 100+ 7+ 100,preferredSize.height);  panel.setSize(panel.getPreferredSize());  panel.doLayout();  assertEquals(100,field1.getHeight());  assertEquals(100,field2.getHeight());  assertEquals(100,field3.getHeight());}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public boolean isPlotSupported(){  return plotSupported;}  }
class C{  public static String generateNativeGuid(DbClient dbClient,FileShare fileShare) throws IOException {  StorageSystem device=dbClient.queryObject(StorageSystem.class,fileShare.getStorageDevice());  return String.format("%s+%s+" + FILESYSTEM + "+%s",_deviceTypeMap.get(device.getSystemType()),device.getSerialNumber(),fileShare.getNativeId());}  }
class C{  public int length(){  if (length == -1) {    try {      length=JDWP.ArrayReference.Length.process(vm,this).arrayLength;    } catch (    JDWPException exc) {      throw exc.toJDIException();    }  }  return length;}  }
class C{  void resumeWifiScan(){  if (mWifiManager.isWifiEnabled()) {    mScanner.resume();  }}  }
class C{  public AVTPartXPath(XPath xpath){  m_xpath=xpath;}  }
class C{  protected BoundThisTypeRefImpl(){  super();}  }
class C{  private void reset(){  initializePositions();  prismView.setVisibility(View.VISIBLE);  mainView.setVisibility(View.VISIBLE);}  }
class C{  public void testCallStmtRegisterOutParameter() throws Exception {  createProcedure("testRegisterOutParameterProc","(OUT b BIT, OUT i INT, OUT c CHAR(10)) BEGIN SELECT 1, 1234, 'MySQL' INTO b, i, c; END");  final CallableStatement testCstmt=this.conn.prepareCall("{CALL testRegisterOutParameterProc(?, ?, ?)}");  testCstmt.registerOutParameter(1,JDBCType.BOOLEAN);  testCstmt.registerOutParameter(2,JDBCType.INTEGER);  testCstmt.registerOutParameter(3,JDBCType.CHAR);  testCstmt.execute();  assertEquals(Boolean.TRUE,testCstmt.getObject(1));  assertEquals(Integer.valueOf(1234),testCstmt.getObject(2));  assertEquals("MySQL",testCstmt.getObject(3));  testCstmt.registerOutParameter(1,JDBCType.BOOLEAN,1);  testCstmt.registerOutParameter(2,JDBCType.INTEGER,1);  testCstmt.registerOutParameter(3,JDBCType.CHAR,1);  testCstmt.execute();  assertEquals(Boolean.TRUE,testCstmt.getObject(1));  assertEquals(Integer.valueOf(1234),testCstmt.getObject(2));  assertEquals("MySQL",testCstmt.getObject(3));  testCstmt.registerOutParameter(1,JDBCType.BOOLEAN,"dummy");  testCstmt.registerOutParameter(2,JDBCType.INTEGER,"dummy");  testCstmt.registerOutParameter(3,JDBCType.CHAR,"dummy");  testCstmt.execute();  assertEquals(Boolean.TRUE,testCstmt.getObject(1));  assertEquals(Integer.valueOf(1234),testCstmt.getObject(2));  assertEquals("MySQL",testCstmt.getObject(3));  testCstmt.registerOutParameter("b",JDBCType.BOOLEAN);  testCstmt.registerOutParameter("i",JDBCType.INTEGER);  testCstmt.registerOutParameter("c",JDBCType.CHAR);  testCstmt.execute();  assertEquals(Boolean.TRUE,testCstmt.getObject(1));  assertEquals(Integer.valueOf(1234),testCstmt.getObject(2));  assertEquals("MySQL",testCstmt.getObject(3));  testCstmt.registerOutParameter("b",JDBCType.BOOLEAN,1);  testCstmt.registerOutParameter("i",JDBCType.INTEGER,1);  testCstmt.registerOutParameter("c",JDBCType.CHAR,1);  testCstmt.execute();  assertEquals(Boolean.TRUE,testCstmt.getObject(1));  assertEquals(Integer.valueOf(1234),testCstmt.getObject(2));  assertEquals("MySQL",testCstmt.getObject(3));  testCstmt.registerOutParameter("b",JDBCType.BOOLEAN,"dummy");  testCstmt.registerOutParameter("i",JDBCType.INTEGER,"dummy");  testCstmt.registerOutParameter("c",JDBCType.CHAR,"dummy");  testCstmt.execute();  assertEquals(Boolean.TRUE,testCstmt.getObject(1));  assertEquals(Integer.valueOf(1234),testCstmt.getObject(2));  assertEquals("MySQL",testCstmt.getObject(3));}  }
class C{  public AllPermission(){  super("<all permissions>");}  }
class C{  public void removeAttribute(String name){  for (int i=0; i < this.attributes.size(); i++) {    XMLAttribute attr=(XMLAttribute)this.attributes.get(i);    if (attr.getFullName().equals(name)) {      this.attributes.remove(i);      return;    }  }}  }
class C{  public long maxSize(){  return maxSize;}  }
class C{  public void grow(double b){  clip[6]+=b;  clip[7]+=b;}  }
class C{  public AbIocEventListener(Object handler){  this.handler=handler;}  }
class C{  public void insertGet(AbstractInsnNode position,InsnList list){  logger.info("Inserting get call");  insertControlDependencyPlaceholder(currentMethodNode,position);  MethodInsnNode get=new MethodInsnNode(Opcodes.INVOKESTATIC,Type.getInternalName(BooleanHelper.class),"getDistance",Type.getMethodDescriptor(Type.INT_TYPE,new Type[]{Type.INT_TYPE,Type.INT_TYPE,Type.INT_TYPE}),false);  list.insert(position,get);}  }
class C{  public boolean contains(final char ch){  final char[] thisBuf=buffer;  for (int i=0; i < this.size; i++) {    if (thisBuf[i] == ch) {      return true;    }  }  return false;}  }
class C{  public boolean withPersistence(){  return this == PERSISTENT_PARTITION || this == PERSISTENT_REPLICATE;}  }
class C{  public SimpleSoundCloudUserView(Context context,AttributeSet attrs,int defStyleAttr){  super(context,attrs,defStyleAttr);  if (!isInEditMode()) {    init();  }}  }
class C{  @Override protected AdminResponse createResponse(DistributionManager dm){  return RegionAttributesResponse.create(dm,this.getSender(),this.getRegion(dm.getSystem()));}  }
class C{  @Override public boolean contains(Point2D.Double p){  Ellipse2D.Double r=(Ellipse2D.Double)ellipse.clone();  double grow=AttributeKeys.getPerpendicularHitGrowth(this);  r.x-=grow;  r.y-=grow;  r.width+=grow * 2;  r.height+=grow * 2;  return r.contains(p);}  }
class C{  public PropertyHandler build(){  return new PropertyHandler(this);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:32.343 -0500",hash_original_method="0E3CF8DED99C22691F37852AF5C558BE",hash_generated_method="8E4E60A8B3E52C05A5F8E58E2AF1D6EA") public static RawHeaders fromMultimap(Map<String,List<String>> map){  RawHeaders result=new RawHeaders();  for (  Entry<String,List<String>> entry : map.entrySet()) {    String fieldName=entry.getKey();    List<String> values=entry.getValue();    if (fieldName != null) {      result.addAll(fieldName,values);    } else     if (!values.isEmpty()) {      result.setStatusLine(values.get(values.size() - 1));    }  }  return result;}  }
class C{  public void executeUpdate(String statement) throws SQLException, NoConnectionException {  if (connection != null) {    Statement st=connection.createStatement();    st.executeUpdate(statement);  } else   throw new NoConnectionException();}  }
class C{  public RendererChangeEvent(Object renderer,boolean seriesVisibilityChanged){  super(renderer);  this.renderer=renderer;  this.seriesVisibilityChanged=seriesVisibilityChanged;}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  List<String> lines;  if (params[0] == null) {    lines=Arrays.asList("For a detailed reference, visit #http://stendhalgame.org/wiki/Stendhal:Administration","Here are the most-used GM commands:","- /gmhelp [alter|script|support]  \t for more info about alter, script or the supportanswer shortcuts","- /supportanswer <player> <message> \t Replies to a support question. Replace <message> with $faq, $faqsocial, $ignore, $faqpvp, $wiki, $knownbug, $bugstracker, $rules, $notsupport or $spam shortcuts if desired.","- /adminnote <player> <note> \t\tLogs a note about this player","- /adminlevel <player> [<newlevel>] \t\tDisplay or set the adminlevel of the specified <player>","- /tellall <message> \t\tSend a private message to all logged-in players","- /jail <player> <minutes> <reason>\t\tImprisons the player for a given length of time","- /jailreport [<player>]\t\tList the jailed players and their sentences","- /gag <player> <minutes> <reason>\t\tGags the player for a given length of time (player is unable to send messages to anyone)","- /ban <character> <hours> <reason>\t\tBans the account of the character from logging onto the game server or website for the specified anmount of hours (-1 till end of time).","- /script <scriptname> \t\tLoad (or reload) a script on the server. See /gmhelp script for details","- /teleport <player> <zone> <x> <y> \tTeleport the specified <player> to the given location","- /teleportto <player> \t\tTeleport yourself near the specified player","- /teleclickmode \t\t\t Makes you teleport to the location you double click","- /ghostmode \t\t\t Makes yourself invisible and intangible","- /alter <player> <attrib> <mode> <value> \tAlter stat <attrib> of <player> by the given amount; <mode> can be ADD, SUB, SET or UNSET. See /gmhelp alter for details","- /altercreature <id> name;atk;def;hp;xp \tChange values of the creature. Use - as a placeholder to keep default value. Useful in raids","- /alterquest <player> <questslot> <value> \tUpdate the <questslot> for <player> to be <value>","- /summon <creature|item> [x] [y]\tSummon the specified item or creature at co-ordinates <x>, <y> in the current zone","- /summonat <player> <slot> [amount] <item> Summon the specified item into the specified slot of <player>; <amount> defaults to 1 if not specified","- /invisible \t\t\tToggles whether or not you are invisible to creatures","- /inspect <player> \t\t\tShow complete details of <player>","- /destroy <entity> \t\t\tDestroy an entity completely");  } else   if ((params.length == 1) && (params[0] != null)) {    if ("alter".equals(params[0])) {      lines=Arrays.asList("/alter <player> <attrib> <mode> <value> \tAlter stat <attrib> of <player> by the given amount; <mode> can be ADD, SUB, SET or UNSET","Examples of <attrib>: atk, def, base_hp, hp, atk_xp, def_xp, xp, outfit","When modifying 'outfit', you should use SET mode and provide an 8-digit number; the first 2 digits are the 'hair' setting, then 'head', 'outfit', then 'body'","For example: #'/alter testplayer outfit set 12109901'","This will make <testplayer> look like danter");    } else     if ("script".equals(params[0])) {      lines=Arrays.asList("usage: /script [-list|-load|-unload|-execute] [params]","-list : shows available scripts. In this mode can be given one optional parameter for filenames filtering, with using well-known wildcards for filenames ('*' and '?', for example \"*.class\" for java-only scripts).","-load : load script with first parameter's filename.","-unload : unload script with first parameter's filename from server","-execute : run choosed script.","","All scripts are ran using: /script scriptname [params]. After running a script you can remove any traces of it with /script -unload scriptname, this would remove any summoned creatures, for example. It's good practise to do this after summoning creatures for a raid using scripts.","#/script #AdminMaker.class : For test servers only, summons an adminmaker to aid testing.","#/script #AdminSign.class #zone #x #y #text : Makes an AdminSign in zone at (x,y) with text. To put it next to you do /script AdminSign.class - - - text.","#/script #AlterQuest.class #player #questname #state : Update the quest for a player to be in a certain state. Omit #state to remove the quest.","#/script #DeepInspect.class #player : Deep inspects a player and all his/her items.","#/script #DropPlayerItems.class #player #[amount] #item : Drop the specified amount of items from the player if they are equipped in the bag or body.","#/script #EntitySearch.class #nonrespawn : Shows the locations of all creatures that don't respawn, for example creatures that were summoned by a GM, deathmatch creatures, etc.","#/script #FixDM.class #player : sets a player's DeathMatch slot to victory status.","#/script #ListNPCs.class : lists all npcs and their position.","#/script #LogoutPlayer.class #player : kicks a player from the game.","#/script #NPCShout.class #npc #text : NPC shouts text.","#/script #NPCShoutZone.class #npc #zone #text : NPC shouts text to players in given zone. Use - in place of zone to make it your current zone.","#/script #Plague.class #1 #creature : summon a plague of raid creatures around you.","#/script #WhereWho.class : Lists where all the online players are","#/script #Maria.class : Summons Maria, who sells food&drinks. Don't forget to -unload her after you're done.","#/script #ServerReset.class : use only in a real emergency to shut down server. If possible please warn the players to logout and give them some time. It kills the server the hard way.","#/script #ResetSlot.class #player #slot : Resets the named slot such as !kills or !quests. Useful for debugging.");    } else     if ("support".equals(params[0])) {      lines=buildHelpSupportResponse();    } else {      return false;    }  } else {    return false;  }  for (  final String line : lines) {    ClientSingletonRepository.getUserInterface().addEventLine(new HeaderLessEventLine(line,NotificationType.CLIENT));  }  return true;}  }
class C{  @Override public void onReachedMaxAppCacheSize(long spaceNeeded,long totalUsedQuota,WebStorage.QuotaUpdater quotaUpdater){  mSettings.getWebStorageSizeManager().onReachedMaxAppCacheSize(spaceNeeded,totalUsedQuota,quotaUpdater);}  }
class C{  public DateColumn(){  super(ColumnType.DATETIME);}  }
class C{  public void clean(){  for (int i=theAtts.getLength() - 1; i >= 0; i--) {    String name=theAtts.getLocalName(i);    if (theAtts.getValue(i) == null || name == null || name.length() == 0) {      theAtts.removeAttribute(i);      continue;    }  }}  }
class C{  public boolean isUserDefinedNetworkResourcePoolsSupported(){  return userDefinedNetworkResourcePoolsSupported;}  }
class C{  public TDoubleIntHashMap(int initialCapacity){  super(initialCapacity);}  }
class C{  static TransformKey forTransform(ElementKey<?,?> parent,MetadataKey<?> key,MetadataContext context){  Preconditions.checkNotNull(key,"key");  return new TransformKey(parent,key,context);}  }
class C{  public void initWechat(String wechatAppId,String wechatSecret){  mWechatAppId=wechatAppId;  mWechatSecret=wechatSecret;}  }
class C{  protected Object convertToType(Class type,Object value) throws Throwable {  return value.toString();}  }
class C{  public static long copyLarge(InputStream input,OutputStream output,final long inputOffset,final long length,byte[] buffer) throws IOException {  if (inputOffset > 0) {    skipFully(input,inputOffset);  }  if (length == 0) {    return 0;  }  final int bufferLength=buffer.length;  int bytesToRead=bufferLength;  if (length > 0 && length < bufferLength) {    bytesToRead=(int)length;  }  int read;  long totalRead=0;  while (bytesToRead > 0 && EOF != (read=input.read(buffer,0,bytesToRead))) {    output.write(buffer,0,read);    totalRead+=read;    if (length > 0) {      bytesToRead=(int)Math.min(length - totalRead,bufferLength);    }  }  return totalRead;}  }
class C{  @Override public boolean isInterrupted(){  return streamingInterrupted;}  }
class C{  protected TabLayout.Tab onCreateTab(TabLayout tabLayout,PagerAdapter adapter,int position){  TabLayout.Tab tab=tabLayout.newTab();  tab.setText(adapter.getPageTitle(position));  return tab;}  }
class C{  public void printAllMessages() throws IOException {  if (shouldPrintParseErrorMessage) {    printParseErrorMessage();  } else {    List<ViolationMessage> outputList=getViolationMessages().stream().filter(null).collect(Collectors.toList());    Collections.sort(outputList);    formatter.displayViolationMessages(outputList,inputFile);  }}  }
class C{  public Vertex parseElementByteCode(TextStream stream,DataOutputStream dataStream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network) throws IOException {  return parseElementByteCode(stream,dataStream,elements,true,debug,network);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:14.454 -0500",hash_original_method="F9E21C88B251C3A8D5F2F68FD08CDC9E",hash_generated_method="898A8CFB30DDF1C33784F7A96F82C351") public ClientKeyExchange(){  exchange_keys=EmptyArray.BYTE;  length=0;  isRSA=false;}  }
class C{  public int next(){  if (_currentNode == DTM.NULL) {    return DTM.NULL;  }  int node=_currentNode;  final int nodeType=_nodeType;  if (nodeType != DTM.ELEMENT_NODE) {    while ((node=_nextsib2(node)) != DTM.NULL && _exptype2(node) != nodeType) {    }  } else {    while ((node=_nextsib2(node)) != DTM.NULL && _exptype2(node) < DTM.NTYPES) {    }  }  _currentNode=node;  return (node == DTM.NULL) ? DTM.NULL : returnNode(makeNodeHandle(node));}  }
class C{  boolean isReusable(){  return true;}  }
class C{  public static void serializeMeterFeaturesReply(List<OFMeterFeaturesStatsReply> meterFeaturesReplies,JsonGenerator jGen) throws IOException, JsonProcessingException {  OFMeterFeaturesStatsReply meterFeaturesReply=meterFeaturesReplies.get(0);  jGen.writeStringField("version",meterFeaturesReply.getVersion().toString());  OFMeterFeatures meterFeatures=meterFeaturesReply.getFeatures();  jGen.writeFieldName("meterFeatures");  jGen.writeStartObject();  jGen.writeNumberField("maxGroupsAll",meterFeatures.getMaxMeter());  jGen.writeNumberField("maxGroupsSelect",meterFeatures.getBandTypes());  jGen.writeNumberField("capabilities",meterFeatures.getCapabilities());  jGen.writeNumberField("maxGroupsIndirect",meterFeatures.getMaxBands());  jGen.writeNumberField("maxGroupsFf",meterFeatures.getMaxColor());  jGen.writeEndObject();}  }
class C{  void handleBlockChange(java.beans.PropertyChangeEvent e){  int o=UNOCCUPIED;  for (int i=0; i < mBlockEntries.size(); i++) {    if (mBlockEntries.get(i).getState() == OCCUPIED) {      o=OCCUPIED;      break;    }  }  if (mOccupancy != o) {    setOccupancy(o);  }}  }
class C{  MinguoDate(LocalDate isoDate){  Objects.requireNonNull(isoDate,"isoDate");  this.isoDate=isoDate;}  }
class C{  private void drawNeedle(Canvas canvas,double angle,int centerX,int centerY,double radius,boolean arrow,Paint paint){  double diff=Math.toRadians(90);  int needleSinValue=(int)(NEEDLE_RADIUS * Math.sin(angle - diff));  int needleCosValue=(int)(NEEDLE_RADIUS * Math.cos(angle - diff));  int needleX=(int)(radius * Math.sin(angle));  int needleY=(int)(radius * Math.cos(angle));  int needleCenterX=centerX + needleX;  int needleCenterY=centerY + needleY;  float[] points;  if (arrow) {    int arrowBaseX=centerX + (int)(radius * 0.85 * Math.sin(angle));    int arrowBaseY=centerY + (int)(radius * 0.85 * Math.cos(angle));    points=new float[]{arrowBaseX - needleSinValue,arrowBaseY - needleCosValue,needleCenterX,needleCenterY,arrowBaseX + needleSinValue,arrowBaseY + needleCosValue};    float width=paint.getStrokeWidth();    paint.setStrokeWidth(5);    canvas.drawLine(centerX,centerY,needleCenterX,needleCenterY,paint);    paint.setStrokeWidth(width);  } else {    points=new float[]{centerX - needleSinValue,centerY - needleCosValue,needleCenterX,needleCenterY,centerX + needleSinValue,centerY + needleCosValue};  }  drawPath(canvas,points,paint,true);}  }
class C{  public Panose(byte[] panose){  bFamilyType=panose[0];  bSerifStyle=panose[1];  bWeight=panose[2];  bProportion=panose[3];  bContrast=panose[4];  bStrokeVariation=panose[5];  bArmStyle=panose[6];  bLetterform=panose[7];  bMidline=panose[8];  bXHeight=panose[9];}  }
class C{  public static StringBuilder prefix(StringBuilder query){  return query.append("PREFIX prov: <").append(NAMESPACE).append(">\n");}  }
class C{  public int beginUnprotected(){  int depth=lock.getDepth();  for (int i=0; i < depth; i++)   lock.release();  return depth;}  }
class C{  public boolean isNotifyForThisSubscriber(SipRequest notify){  boolean result=false;  if ((mDialogPath != null) && notify.getCallId().equals(mDialogPath.getCallId())) {    result=true;  }  return result;}  }
class C{  public static final Date nthWeekday(final int n,final Weekday w,final Month m,final int y){  return nthWeekday(n,w,m.value(),y);}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public SecurityCheckException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public static CCCallFuncND action(Object t,String s,Object d){  return new CCCallFuncND(t,s,d,new Class<?>[]{Object.class,Object.class});}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public h4 addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public void editButtonActionPerformed(){  nodeAddress=readNodeAddress();  if (nodeAddress <= 0) {    return;  }  curNode=(SerialNode)SerialTrafficController.instance().getNodeFromAddress(nodeAddress);  if (curNode == null) {    statusText1.setText(rb.getString("Error4"));    statusText1.setVisible(true);    errorInStatus1=true;    resetNotes2();    return;  }  nodeAddrStatic.setText(Integer.toString(nodeAddress));  nodeAddrField.setVisible(false);  nodeAddrStatic.setVisible(true);  inputBits=InputBits.getNumInputBits();  numInputField.setText(Integer.toString(inputBits));  outputBits=OutputBits.getNumOutputBits();  numOutputField.setText(Integer.toString(outputBits));  pollTimeoutTime=InputBits.getTimeoutTime();  pollTimeoutField.setText(Integer.toString(pollTimeoutTime));  sendDelay=OutputBits.getSendDelay();  sendDelayField.setText(Integer.toString(sendDelay));  editMode=true;  addButton.setVisible(false);  editButton.setVisible(false);  deleteButton.setVisible(false);  doneButton.setVisible(false);  updateButton.setVisible(true);  cancelButton.setVisible(true);  statusText1.setText(editStatus1);  statusText2.setText(editStatus2);  statusText3.setText(editStatus3);}  }
class C{  @Override public void environmentStop(EnvironmentClassLoader loader){  stop(ShutdownModeAmp.GRACEFUL);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:21.755 -0500",hash_original_method="F51AA332BBC1C75C23F2395E3D593569",hash_generated_method="9E31B1ED0C5667E1322EC7487E2BAA63") public GeneralNames(GeneralName name){  this.names=new GeneralName[]{name};}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,int options){  byte[] DECODABET=getDecodabet(options);  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    try {      int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6)| ((DECODABET[source[srcOffset + 3]] & 0xFF));      destination[destOffset]=(byte)(outBuff >> 16);      destination[destOffset + 1]=(byte)(outBuff >> 8);      destination[destOffset + 2]=(byte)(outBuff);      return 3;    } catch (    Exception e) {      System.out.println("" + source[srcOffset] + ": "+ (DECODABET[source[srcOffset]]));      System.out.println("" + source[srcOffset + 1] + ": "+ (DECODABET[source[srcOffset + 1]]));      System.out.println("" + source[srcOffset + 2] + ": "+ (DECODABET[source[srcOffset + 2]]));      System.out.println("" + source[srcOffset + 3] + ": "+ (DECODABET[source[srcOffset + 3]]));      return -1;    }  }}  }
class C{  public DoubleVector(double x,double y,double z){  this.x=x;  this.y=y;  this.z=z;}  }
class C{  public static boolean isViable(World worldObj,AStarNode target,int yoffset){  return isViable(worldObj,target.x,target.y,target.z,yoffset);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public SimpleProperties sort(String[] filter){  return sort(makeSimpleComparator(filter));}  }
class C{  private KNNHeap linearScan(Relation<? extends O> relation,DBIDIter iter,final O obj,KNNHeap heap){  double max=Double.POSITIVE_INFINITY;  while (iter.valid()) {    final double dist=rawdist.distance(obj,relation.get(iter));    if (dist <= max) {      max=heap.insert(dist,iter);    }    iter.advance();  }  return heap;}  }
class C{  public void compress(byte[] bytes,int off,int len,OutputStream os){  try {    os.write(bytes,off,len);  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public static int overload1or2WithConn(Connection conn,int one) throws SQLException {  conn.createStatement().executeQuery("select 1 from dual");  return one;}  }
class C{  private void initMetrics(ServletContext servletContext,EnumSet<DispatcherType> disps){  log.debug("Initializing Metrics registries");  servletContext.setAttribute(InstrumentedFilter.REGISTRY_ATTRIBUTE,metricRegistry);  servletContext.setAttribute(MetricsServlet.METRICS_REGISTRY,metricRegistry);  log.debug("Registering Metrics Filter");  FilterRegistration.Dynamic metricsFilter=servletContext.addFilter("webappMetricsFilter",new InstrumentedFilter());  metricsFilter.addMappingForUrlPatterns(disps,true,"/*");  metricsFilter.setAsyncSupported(true);  log.debug("Registering Metrics Servlet");  ServletRegistration.Dynamic metricsAdminServlet=servletContext.addServlet("metricsServlet",new MetricsServlet());  metricsAdminServlet.addMapping("/metrics/metrics/*");  metricsAdminServlet.setAsyncSupported(true);  metricsAdminServlet.setLoadOnStartup(2);}  }
class C{  public static double stdev(double[] x){  return Math.sqrt(variance(x));}  }
class C{  public void write(FastPreferenceData<?,?> prefData,OutputStream uo,OutputStream io) throws IOException {  BiConsumer<FastPreferenceData<?,?>,OutputStream> saver=Unchecked.biConsumer(null);  saver.accept(prefData,uo);  saver.accept(new TransposedPreferenceData<>(prefData),io);}  }
class C{  public int hashCode(){  int result=0;  int n=members.length;  for (int i=0; i < n; ++i) {    result+=members[i][0] + members[i][1];  }  return result;}  }
class C{  public BasicTacticalGraphicAttributes(){}  }
class C{  public static int indexOf(byte[] array,byte[] sub,int startIndex,int endIndex){  int sublen=sub.length;  if (sublen == 0) {    return startIndex;  }  int total=endIndex - sublen + 1;  byte c=sub[0];  mainloop:   for (int i=startIndex; i < total; i++) {    if (array[i] != c) {      continue;    }    int j=1;    int k=i + 1;    while (j < sublen) {      if (sub[j] != array[k]) {        continue mainloop;      }      j++;      k++;    }    return i;  }  return -1;}  }
class C{  private ODataFeed readFeedLogPerf(String query,Map<String,String> params) throws IOException, ODataException {  long delta_time=System.currentTimeMillis();  ODataFeed feed=client.readFeed(query,params);  log(Level.DEBUG,"query(" + query + ") done in "+ delta_time+ "ms");  return feed;}  }
class C{  protected void attrAdded(Attr node,String newv){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.978 -0400",hash_original_method="73C8C648F9EEF7928CF4A988A690F21C",hash_generated_method="BA6EE605B0E118C9B3337E11B2D7A1D2") public void addListener(final FileAlterationListener listener){  if (listener != null) {    listeners.add(listener);  }}  }
class C{  public String toString(){  if (m_namespace != null && m_namespace.length() > 0)   return "{" + m_namespace + "}"+ m_extensionName; else   return m_extensionName;}  }
class C{  public void removeListener(final IPluginInterfaceListener listener){  listeners.removeListener(listener);}  }
class C{  public XMethod toXMethod(){  return XFactory.createXMethod(javaClass,method);}  }
class C{  public float distanceSquared(Vector3f v){  double dx=x - v.x;  double dy=y - v.y;  double dz=z - v.z;  return (float)(dx * dx + dy * dy + dz * dz);}  }
class C{  public String toString(){  return "[id: " + this.id + ", usethis: "+ this.useThis+ ", line: "+ this.line+ ", col:"+ this.col+ ", type: "+ this.type+ ", context: "+ this.context+ "]";}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void removeSelectedPage(){  if (selectedPage.getChildList() != null && !selectedPage.getChildList().isEmpty())   throw new UnsupportedOperationException();  final JComponent pageComp=pageCompCache.get(selectedPage);  if (pageComp instanceof IPageClosingListener)   if (!((IPageClosingListener)pageComp).pageClosing())   return;  final IPage<?> parent=selectedPage.getParent();  int childIndex=0;  if (parent != null) {    childIndex=parent.getChildList().indexOf(selectedPage);    parent.getChildList().remove(childIndex);  } else   pageList.remove(selectedPage);  disposePageComp(pageComp);  pageCompCache.remove(selectedPage);  pageHistoryList.remove(selectedPage);  if (pageHistoryList.isEmpty()) {    if (parent != null) {      selectPage(parent.getChildList().isEmpty() ? parent : parent.getChildList().get(childIndex > 0 ? childIndex - 1 : 0));    }  } else   selectPage(pageHistoryList.get(pageHistoryList.size() - 1));  rebuildPageTree(false);}  }
class C{  public void store(Extent val){  SimulatedMemory.setWord(this,val.value);}  }
class C{  private static String findJarServiceProviderName(String factoryId){  SecuritySupport ss=SecuritySupport.getInstance();  String serviceId=SERVICES_PATH + factoryId;  InputStream is=null;  ClassLoader cl=findClassLoader();  is=ss.getResourceAsStream(cl,serviceId);  if (is == null) {    ClassLoader current=ObjectFactory.class.getClassLoader();    if (cl != current) {      cl=current;      is=ss.getResourceAsStream(cl,serviceId);    }  }  if (is == null) {    return null;  }  debugPrintln("found jar resource=" + serviceId + " using ClassLoader: "+ cl);  BufferedReader rd;  try {    rd=new BufferedReader(new InputStreamReader(is,"UTF-8"));  } catch (  java.io.UnsupportedEncodingException e) {    rd=new BufferedReader(new InputStreamReader(is));  }  String factoryClassName=null;  try {    factoryClassName=rd.readLine();  } catch (  IOException x) {    return null;  } finally {    try {      rd.close();    } catch (    IOException exc) {    }  }  if (factoryClassName != null && !"".equals(factoryClassName)) {    debugPrintln("found in resource, value=" + factoryClassName);    return factoryClassName;  }  return null;}  }
class C{  public ParsedDescribeQuery(TupleExpr tupleExpr){  super(tupleExpr);}  }
class C{  public double applyPerdition(PowerHandler powerHandler,double current,long ticksPassed){  double result=current;  result-=powerLoss * ticksPassed;  if (result < 0) {    result=0;  }  return result;}  }
class C{  public Shape createFillableFocusRectangle(int x,int y,int w,int h){  final int left=x;  final int top=y;  final int right=x + w;  final int bottom=y + h;  path.reset();  path.moveTo(left,top);  path.lineTo(left,bottom);  path.lineTo(right,bottom);  path.lineTo(right,top);  final float offset=1.4f;  final float left2=left + offset;  final float top2=top + offset;  final float right2=right - offset;  final float bottom2=bottom - offset;  path.lineTo(right2,top);  path.lineTo(right2,bottom2);  path.lineTo(left2,bottom2);  path.lineTo(left2,top2);  path.lineTo(right2,top2);  path.lineTo(right2,top);  path.closePath();  return path;}  }
class C{  public void unsubscribe(String key,ModuleCommunicationListener module){  List<ModuleCommunicationListener> list;  if (this.listeners == null) {    return;  }  list=this.listeners.get(key);  if (list == null) {    return;  }  list.remove(module);}  }
class C{  private String fFormatString(double x){  boolean noDigits=false;  char[] ca6, ca7;  if (Double.isInfinite(x)) {    if (x == Double.POSITIVE_INFINITY) {      if (leadingSign)       ca6="+Inf".toCharArray(); else       if (leadingSpace)       ca6=" Inf".toCharArray(); else       ca6="Inf".toCharArray();    } else     ca6="-Inf".toCharArray();    noDigits=true;  } else   if (Double.isNaN(x)) {    if (leadingSign)     ca6="+NaN".toCharArray(); else     if (leadingSpace)     ca6=" NaN".toCharArray(); else     ca6="NaN".toCharArray();    noDigits=true;  } else   ca6=fFormatDigits(x);  ca7=applyFloatPadding(ca6,false);  return new String(ca7);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.BINDING_PROPERTY__VALUE:    setValue((BindingElement)newValue);  return;case N4JSPackage.BINDING_PROPERTY__VAR_DECL:setVarDecl((VariableDeclaration)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  protected void writeEmbeddedIndexCreateStmt(Table table,IIndex index,StringBuilder ddl){  if ((index.getName() != null) && (index.getName().length() > 0)) {    ddl.append(" CONSTRAINT ");    printIdentifier(getIndexName(index),ddl);  }  if (index.isUnique()) {    ddl.append(" UNIQUE");  } else {    ddl.append(" INDEX ");  }  ddl.append(" (");  for (int idx=0; idx < index.getColumnCount(); idx++) {    IndexColumn idxColumn=index.getColumn(idx);    Column col=table.findColumn(idxColumn.getName());    if (col == null) {      throw new ModelException("Invalid column '" + idxColumn.getName() + "' on index "+ index.getName()+ " for table "+ table.getName());    }    if (idx > 0) {      ddl.append(", ");    }    printIdentifier(getColumnName(col),ddl);  }  ddl.append(")");}  }
class C{  public JSONArray(Object array) throws JSONException {  this();  if (array.getClass().isArray()) {    int length=Array.getLength(array);    for (int i=0; i < length; i+=1) {      this.put(JSONObject.wrap(Array.get(array,i)));    }  } else {    throw new JSONException("JSONArray initial value should be a string or collection or array.");  }}  }
class C{  public void writeTo(OutputStream os) throws IOException {  DataOutputStream dos=new DataOutputStream(os);  dos.writeInt(N);  dos.writeInt(q);  dos.writeInt(d);  dos.writeInt(d1);  dos.writeInt(d2);  dos.writeInt(d3);  dos.writeInt(B);  dos.writeDouble(beta);  dos.writeDouble(normBound);  dos.writeInt(signFailTolerance);  dos.writeInt(bitsF);  dos.writeUTF(hashAlg.getAlgorithmName());}  }
class C{  public void init() throws MessagingException {  String repositoryPath=getInitParameter("repositoryPath");  if (repositoryPath == null) {    throw new MessagingException("repositoryPath is null");  }  headerName=getInitParameter("headerName",HEADER_NAME);  ignoreLocalSender=Boolean.valueOf(getInitParameter("ignoreLocalSender"));  if (ignoreLocalSender) {    log("Will ignore messages coming from local senders");  } else {    log("Will analyze messages coming from local senders");  }  String maxSizeParam=getInitParameter("maxSize");  if (maxSizeParam != null) {    setMaxSize(Integer.parseInt(maxSizeParam));  }  log("maxSize: " + getMaxSize());  String tag=getInitParameter("tagSubject");  if (tag != null && tag.equals("false")) {    tagSubject=false;  }  initDb();  CorpusLoader corpusLoader=new CorpusLoader(this);  corpusLoader.setDaemon(true);  corpusLoader.start();}  }
class C{  protected boolean isReuseAddressChanged(){  return true;}  }
class C{  public Canvas(GraphicsConfiguration config){  this();  setGraphicsConfiguration(config);}  }
class C{  public static float svgToObjectBoundingBox(String s,String attr,short d,Context ctx){  try {    return org.apache.flex.forks.batik.parser.UnitProcessor.svgToObjectBoundingBox(s,attr,d,ctx);  } catch (  ParseException pEx) {    throw new BridgeException(getBridgeContext(ctx),ctx.getElement(),pEx,ErrorConstants.ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{attr,s,pEx});  }}  }
class C{  public void println(double x){  return;}  }
class C{  public UnsignedByte(int num){  this.num=(byte)num;}  }
class C{  public void resetDuration(){  start=System.currentTimeMillis();}  }
class C{  protected T2<Integer,Integer> checkRegisteredIpcEndpoints() throws Exception {  GridKernalContext ctx=((IgniteKernal)grid()).context();  int tcp=0;  int shmem=0;  for (  GridPortRecord record : ctx.ports().records()) {    if (record.clazz() == IpcSharedMemoryServerEndpoint.class)     shmem++; else     if (record.clazz() == IpcServerTcpEndpoint.class)     tcp++;  }  return new T2<>(tcp,shmem);}  }
class C{  public void push(final double value){  long bits=Double.doubleToLongBits(value);  if (bits == 0L || bits == 0x3ff0000000000000L) {    mv.visitInsn(Opcodes.DCONST_0 + (int)value);  } else {    mv.visitLdcInsn(value);  }}  }
class C{  private Tradingday findTradingdayByOpenCloseDate(ZonedDateTime openDate,ZonedDateTime closeDate){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    CriteriaBuilder builder=entityManager.getCriteriaBuilder();    CriteriaQuery<Tradingday> query=builder.createQuery(Tradingday.class);    Root<Tradingday> from=query.from(Tradingday.class);    query.select(from);    if (null != openDate)     query.where(builder.equal(from.get("open"),openDate));    if (null != closeDate)     query.where(builder.equal(from.get("close"),closeDate));    List<Tradingday> items=entityManager.createQuery(query).getResultList();    if (items.size() > 0) {      return items.get(0);    }    return null;  } catch (  Exception re) {    throw re;  }}  }
class C{  public VPFDatabaseFilter(){}  }
class C{  protected void clearAggregateMappings(int row,boolean update){  Index index=m_aggregated.index(AGGREGATE);  boolean fire=false;  for (IntIterator rows=index.rows(row); rows.hasNext(); ) {    int r=rows.nextInt();    rows.remove();    m_aggregated.removeRow(r);    fire=true;  }  if (update && fire)   fireTableEvent(row,row,EventConstants.ALL_COLUMNS,EventConstants.UPDATE);}  }
class C{  public List<AbstractOption> popOptionsUpTo(AbstractOption needle){  List<AbstractOption> result=new ArrayList<AbstractOption>();  PluginOptionContainer container=getPlugin().getPluginOptions();  if (!container.contains(needle)) {    return result;  }  while (container.size() > 0) {    AbstractOption last=container.getByIndex(container.size() - 1);    if (last == needle) {      break;    }    container.remove(last);    result.add(last);  }  log().info("Popped: " + result.toString());  return result;}  }
class C{  protected void loadListFile(IPlayer player){  loadListFile(player,false);}  }
class C{  protected void skipSubPath() throws ParseException, IOException {  for (; ; ) {switch (current) {case -1:case 'm':case 'M':      return;default :    break;}current=reader.read();}}  }
class C{  public void selectObject(Object element){  if (controlShown) {    int index=objectsInCombo.indexOf(element);    if (index != -1) {      objectSelection.select(index);    }  }}  }
class C{  public void addInstanceInfo(Instance ins){  if (m_Instances != null)   try {    update(ins);  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public void postLocal(Object event){  eventBus.post(event);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Long(Sage.EMBEDDED ? (Sage.time() - (Sage.eventTime() - SageTV.getInstanceStartTime())) : SageTV.getInstanceStartTime());}  }
class C{  private void deletePubsubSubscription(String subscription) throws IOException {  if (pubsubClient == null) {    pubsubClient=Transport.newPubsubClient(options.as(PubsubOptions.class)).build();  }  if (executeNullIfNotFound(pubsubClient.projects().subscriptions().get(subscription)) != null) {    pubsubClient.projects().subscriptions().delete(subscription).execute();  }}  }
class C{  private T merge(final Collection<Match<T>> orderedMatches){  T actualMatch=null;  for (  Match<T> match : orderedMatches) {    if (actualMatch == null || !Mergeable.class.isAssignableFrom(actualMatch.getClass())) {      actualMatch=match.getValue();      if (!Mergeable.class.isAssignableFrom(actualMatch.getClass())) {        break;      }    } else {      ((Mergeable)actualMatch).merge(match.getValue());    }  }  return actualMatch;}  }
class C{  public void main(List<JCCompilationUnit> trees){  complete(trees,null);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:07.032 -0500",hash_original_method="8B828971EA2E2F12F8B254DF3483012F",hash_generated_method="9150980E534E048DFFFD12999581B0C4") private boolean nativeUpdateLayers(int nativeClass,int baseLayer){  addTaint(nativeClass);  addTaint(baseLayer);  return getTaintBoolean();}  }
class C{  public void addOperator(String operatorID,String operatorType,Map<String,String> operatorProperties) throws Exception {  PlanGenUtils.planGenAssert(operatorID != null,"operatorID is null");  PlanGenUtils.planGenAssert(operatorType != null,"operatorType is null");  PlanGenUtils.planGenAssert(operatorProperties != null,"operatorProperties is null");  PlanGenUtils.planGenAssert(!operatorID.trim().isEmpty(),"operatorID is empty");  PlanGenUtils.planGenAssert(!operatorType.trim().isEmpty(),"operatorType is empty");  PlanGenUtils.planGenAssert(!hasOperator(operatorID),"duplicate operatorID: " + operatorID);  PlanGenUtils.planGenAssert(PlanGenUtils.isValidOperator(operatorType),String.format("%s is an invalid operator type, it must be one of %s.",operatorType,PlanGenUtils.operatorBuilderMap.keySet().toString()));  operatorTypeMap.put(operatorID,operatorType);  operatorPropertyMap.put(operatorID,operatorProperties);  adjacencyList.put(operatorID,new HashSet<>());  IOperator operator=PlanGenUtils.buildOperator(operatorType,operatorProperties);  operatorObjectMap.put(operatorID,operator);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public void initComponents(){  setUserObject("Roster");  List<RosterEntry> list=Roster.getDefault().matchingList(null,null,null,null,null,null,null);  for (  RosterEntry r : list) {    add(new DefaultMutableTreeNode(r.getId()));  }}  }
class C{  public static int EUNATCH(){  return 49;}  }
class C{  public JProgressBar(BoundedRangeModel newModel){  setModel(newModel);  updateUI();  setOrientation(defaultOrientation);  setBorderPainted(true);  setStringPainted(false);  setString(null);  setIndeterminate(false);}  }
class C{  public boolean hasId(){  return fieldSetFlags()[0];}  }
class C{  private String resolveSubExpression(String value,DataSource dataSource,IllegalCharsConstraint constraint,String systemType){  StringBuffer resolvedValue=new StringBuffer();  StringTokenizer tokenizer=new StringTokenizer(value,START_DELIMITER + END_DELIMITER,true);  while (tokenizer.hasMoreTokens()) {    String token=tokenizer.nextToken();    if (token.equals(START_DELIMITER) && tokenizer.hasMoreTokens()) {      String propertyValue=getDataSourceValue(tokenizer.nextToken().replaceAll("\\s+",""),dataSource,constraint,systemType);      if (constraint != null) {        propertyValue=constraint.applyConstraint(propertyValue,systemType);      }      resolvedValue.append(propertyValue);    } else     if (!token.equals(START_DELIMITER) && !token.equals(END_DELIMITER)) {      resolvedValue.append(token);    }  }  return resolvedValue.toString();}  }
class C{  public void requestLifetime(int lifetime) throws GSSException {  if (state == STATE_NEW && isInitiator())   this.lifetime=lifetime;}  }
class C{  public void show(){  start();}  }
class C{  public static void main(String[] args){  long startMsec=System.currentTimeMillis();  ParForDependencyAnalysisTest t=new ParForDependencyAnalysisTest();  t.setUpBase();  t.setUp();  t.testDependencyAnalysis1();  t.tearDown();  long elapsedMsec=System.currentTimeMillis() - startMsec;  System.err.printf("Finished in %1.3f sec\n",elapsedMsec / 1000.0);}  }
class C{  public static byte[] decode(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decode(bytes,0,bytes.length);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.259 -0500",hash_original_method="CDE86729C0DE5B687E9F3D6C62C89CBA",hash_generated_method="F9406D975293ED3CE5ED28AC7966047F") public void drawRect(float left,float top,float right,float bottom,Paint paint){  native_drawRect(mNativeCanvas,left,top,right,bottom,paint.mNativePaint);}  }
class C{  @Override public void release() throws ReplicatorException, InterruptedException {  logger.info("Releasing data source: service=" + serviceName);}  }
class C{  protected Class resolveClass(ObjectStreamClass v) throws IOException, ClassNotFoundException {  Class result=null;  try {    return super.resolveClass(v);  } catch (  ClassNotFoundException e) {    result=Class.forName(v.getName(),true,classLoader);  }  if (result == null)   throw new ClassNotFoundException("No ClassLoader was found for " + v.getName());  return result;}  }
class C{  public PageAction(String nm,boolean left,boolean select){  super(nm);  this.select=select;  this.left=left;}  }
class C{  public void onCreate(Bundle savedInstanceState){  mSlidingMenu=(SlidingMenu)LayoutInflater.from(mActivity).inflate(R.layout.slidingmenumain,null);}  }
class C{  protected Dimension calcPreferredSize(){  if (soft.length > 1) {    Dimension d=super.calcPreferredSize();    if ((soft[0].getText() == null || soft[0].getText().equals("")) && (soft[1].getText() == null || soft[1].getText().equals("")) && soft[0].getIcon() == null && soft[1].getIcon() == null && (soft.length < 3 || ((soft[2].getText() == null || soft[2].getText().equals("")) && soft[2].getIcon() == null))) {      d.setHeight(0);    }    return d;  }  return super.calcPreferredSize();}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj == null) {    return false;  }  if (getClass() != obj.getClass()) {    return false;  }  Diff other=(Diff)obj;  if (operation != other.operation) {    return false;  }  if (text == null) {    if (other.text != null) {      return false;    }  } else   if (!text.equals(other.text)) {    return false;  }  return true;}  }
class C{  public DirectedPath(Position posA,Position posB){  super(posA,posB);}  }
class C{  public void updateGui(){  m_actionSave.setEnabled(m_model.getGraph().getRawView().getType() == ViewType.NonNative);}  }
class C{  @Override public CloseableReference<Bitmap> process(Bitmap sourceBitmap,PlatformBitmapFactory bitmapFactory){  final Bitmap.Config sourceBitmapConfig=sourceBitmap.getConfig();  CloseableReference<Bitmap> destBitmapRef=bitmapFactory.createBitmapInternal(sourceBitmap.getWidth(),sourceBitmap.getHeight(),sourceBitmapConfig != null ? sourceBitmapConfig : FALLBACK_BITMAP_CONFIGURATION);  try {    process(destBitmapRef.get(),sourceBitmap);    return CloseableReference.cloneOrNull(destBitmapRef);  }  finally {    CloseableReference.closeSafely(destBitmapRef);  }}  }
class C{  private Encounter guessEncounterFromXformSubmission(SimpleObject postData){  String patientUuid=(String)postData.get("patient_uuid");  if (patientUuid == null) {    return null;  }  Patient patient=patientService.getPatientByUuid(patientUuid);  String entererUuid=(String)postData.get("enterer_uuid");  if (entererUuid == null) {    throw new IllegalPropertyException("Enterer UUID must be set.");  }  Provider provider=providerService.getProviderByUuid(entererUuid);  List<Encounter> encounters=Context.getEncounterService().getEncounters(patient,null,null,null,null,null,Collections.singleton(provider),null,null,false);  Encounter latest=null;  for (  Encounter encounter : encounters) {    if (latest == null || encounter.getDateCreated().after(latest.getDateCreated())) {      latest=encounter;    }  }  Date twoSecondsAgo=new Date(System.currentTimeMillis() - 2000);  if (latest != null && latest.getDateCreated().before(twoSecondsAgo)) {    latest=null;  }  return latest;}  }
class C{  private void pop(){  String removed=encodedPathSegments.remove(encodedPathSegments.size() - 1);  if (removed.isEmpty() && !encodedPathSegments.isEmpty()) {    encodedPathSegments.set(encodedPathSegments.size() - 1,"");  } else {    encodedPathSegments.add("");  }}  }
class C{  public <K,V>GeodeJavaRegionRDD<K,V> geodeRegion(String regionPath,GeodeConnectionConf connConf){  return geodeRegion(regionPath,connConf,new Properties());}  }
class C{  private void consumeNonExecutePrefix() throws IOException {  nextNonWhitespace(true);  pos--;  if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {    return;  }  for (int i=0; i < NON_EXECUTE_PREFIX.length; i++) {    if (buffer[pos + i] != NON_EXECUTE_PREFIX[i]) {      return;    }  }  pos+=NON_EXECUTE_PREFIX.length;}  }
class C{  public MyArrayList(){}  }
class C{  private boolean onQueueBufferSuccess(RecordBuffer<R> buffer,long elapsed){  queuedRecords+=buffer.sizeRecords();  queuedBytes+=buffer.sizeBytesWithOverhead();  totalQueueWaitTimeMillis.addAndGet(elapsed);  notEmpty.signal();  return true;}  }
class C{  public ParallelProgress(final String name){  mName=name;  Diagnostic.progress("Starting: " + mName);}  }
class C{  @Override public synchronized Restlet createInboundRoot(){  log.info("createInboundRoot started for /schema");  router.attach("",SchemaResource.class);  router.attach("/",SchemaResource.class);  router.attach(FIELDS_PATH,FieldCollectionResource.class);  router.attach(FIELDS_PATH + "/",FieldCollectionResource.class);  router.attach(FIELDS_PATH + NAME_SEGMENT,FieldResource.class);  router.attach(DYNAMIC_FIELDS_PATH,DynamicFieldCollectionResource.class);  router.attach(DYNAMIC_FIELDS_PATH + "/",DynamicFieldCollectionResource.class);  router.attach(DYNAMIC_FIELDS_PATH + NAME_SEGMENT,DynamicFieldResource.class);  router.attach(FIELDTYPES_PATH,FieldTypeCollectionResource.class);  router.attach(FIELDTYPES_PATH + "/",FieldTypeCollectionResource.class);  router.attach(FIELDTYPES_PATH + NAME_SEGMENT,FieldTypeResource.class);  router.attach(COPY_FIELDS_PATH,CopyFieldCollectionResource.class);  router.attach(COPY_FIELDS_PATH + "/",CopyFieldCollectionResource.class);  router.attach(NAME_PATH,SchemaNameResource.class);  router.attach(VERSION_PATH,SchemaVersionResource.class);  router.attach(UNIQUE_KEY_FIELD_PATH,UniqueKeyFieldResource.class);  router.attach(DEFAULT_SEARCH_FIELD_PATH,DefaultSearchFieldResource.class);  router.attach(SIMILARITY_PATH,SchemaSimilarityResource.class);  router.attach(SOLR_QUERY_PARSER_PATH,SolrQueryParserResource.class);  router.attach(DEFAULT_OPERATOR_PATH,SolrQueryParserDefaultOperatorResource.class);  router.attachDefault(RestManager.ManagedEndpoint.class);  RestManager.getRestManager(SolrRequestInfo.getRequestInfo()).attachManagedResources(RestManager.SCHEMA_BASE_PATH,router);  log.info("createInboundRoot complete for /schema");  return router;}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:10.787 -0500",hash_original_method="9AD76E183D70EDC4767A9EAC128427AE",hash_generated_method="7F84BB36FF6A492699D9A50DEDC1FED1") public URL(String protocol,String host,int port,String file) throws MalformedURLException {  this(protocol,host,port,file,null);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override protected void populateLocalisationMap(){  localisationKeyConstantToKeyMap.put(ADDRESSES_TITLE,"sendBitcoinPanel.sendingAddressesTitle");  localisationKeyConstantToKeyMap.put(CREATE_NEW_TOOLTIP,"createOrEditAddressAction.createSending.tooltip");  localisationKeyConstantToKeyMap.put(DELETE_TOOLTIP,"deleteSendingAddressSubmitAction.tooltip");}  }
class C{  static boolean canBreakBetween(String before,String after){  if ("}".equals(before) || ";".equals(before)) {    return true;  }  return !("++".equals(after) || "--".equals(after) || "continue".equals(before)|| "break".equals(before)|| "return".equals(before)|| "throw".equals(before)|| "/".equals(after)|| "/=".equals(after));}  }
class C{  public synchronized int hashCode(){  if (hashCode != -1)   return hashCode;  hashCode=handler.hashCode(this);  return hashCode;}  }
class C{  public Tag validateFileFormat(Tag ff){  Tag r=ff;  if (ff.getID() == BINARY) {    return ff;  }  if (ff.getID() == KOMLV && !KOML.isPresent()) {    r=null;  }  if (ff.getID() == XSTREAM && !XStream.isPresent()) {    r=null;  }  return r;}  }
class C{  public void onAttach(Context context){  if (!shownByMe) {    dismissed=false;  }}  }
class C{  public static boolean isNull(NodeId nodeId){  return (nodeId == null) || nodeId.isNullNodeId();}  }
class C{  void onUp(){  if (mFlingRunnable.mScroller.isFinished()) {    scrollIntoSlots();  }  dispatchUnpress();}  }
class C{  public void pauseRequest(boolean pause){  if (mRequest != null) {    mRequest.setLoadingPaused(pause);  }}  }
class C{  private void init(DerValue encoding) throws Asn1Exception, RealmException, KrbApErrException, IOException {  DerValue der, subDer;  if (((encoding.getTag() & (byte)0x1F) != (byte)0x14) || (encoding.isApplication() != true) || (encoding.isConstructed() != true))   throw new Asn1Exception(Krb5.ASN1_BAD_ID);  der=encoding.getData().getDerValue();  if (der.getTag() != DerValue.tag_Sequence)   throw new Asn1Exception(Krb5.ASN1_BAD_ID);  subDer=der.getData().getDerValue();  if ((subDer.getTag() & 0x1F) == 0x00) {    pvno=subDer.getData().getBigInteger().intValue();    if (pvno != Krb5.PVNO)     throw new KrbApErrException(Krb5.KRB_AP_ERR_BADVERSION);  } else   throw new Asn1Exception(Krb5.ASN1_BAD_ID);  subDer=der.getData().getDerValue();  if ((subDer.getTag() & 0x1F) == 0x01) {    msgType=subDer.getData().getBigInteger().intValue();    if (msgType != Krb5.KRB_SAFE)     throw new KrbApErrException(Krb5.KRB_AP_ERR_MSG_TYPE);  } else   throw new Asn1Exception(Krb5.ASN1_BAD_ID);  safeBody=KRBSafeBody.parse(der.getData(),(byte)0x02,false);  cksum=Checksum.parse(der.getData(),(byte)0x03,false);  if (der.getData().available() > 0)   throw new Asn1Exception(Krb5.ASN1_BAD_ID);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  Node fchildNode;  String childName;  int nodeType;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  fchildNode=employeeNode.getFirstChild();  childName=fchildNode.getNodeName();  if (equals("#text",childName)) {    assertEquals("firstChild_w_whitespace","#text",childName);  } else {    assertEqualsAutoCase("element","firstChild_wo_whitespace","em",childName);  }}  }
class C{  private ReilMnemonics(){}  }
class C{  public void testAddAndSum(){  DoubleAdder ai=new DoubleAdder();  ai.add(2.0);  assertEquals(2.0,ai.sum());  ai.add(-4.0);  assertEquals(-2.0,ai.sum());}  }
class C{  public boolean contains(RectF r){  return this.left < this.right && this.top < this.bottom && left <= r.left && top <= r.top && right >= r.right && bottom >= r.bottom;}  }
class C{  public void addKeyStore(KeyStore keyStore,String keyStoreName,Password password,Provider explicitProvider){  KeyStoreHistory history=new KeyStoreHistory(keyStore,keyStoreName,password,explicitProvider);  addKeyStoreHistory(history);}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFileTmp),Util.US_ASCII));  try {    writer.write(MAGIC);    writer.write("\n");    writer.write(VERSION_1);    writer.write("\n");    writer.write(Integer.toString(appVersion));    writer.write("\n");    writer.write(Integer.toString(valueCount));    writer.write("\n");    writer.write("\n");    for (    Entry entry : lruEntries.values()) {      if (entry.currentEditor != null) {        writer.write(DIRTY + ' ' + entry.key+ '\n');      } else {        writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');      }    }  }  finally {    writer.close();  }  if (journalFile.exists()) {    renameTo(journalFile,journalFileBackup,true);  }  renameTo(journalFileTmp,journalFile,false);  journalFileBackup.delete();  journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void add(StorageResolverSpi resolver){  if (storageResolvers == null) {    storageResolvers=new ArrayList<StorageResolverSpi>();  }  this.storageResolvers.add(resolver);}  }
class C{  public R proceed(){  return fn.apply(param);}  }
class C{  public ToDataException(String message){  super(message);}  }
class C{  public static String formatFileSize(int bytes){  if (bytes <= 0)   return null;  if (bytes < 1024) {    return bytes + "B";  } else   if (bytes < 1024 * 1024) {    return String.format("%.1f KB",bytes / 1024.0);  } else   if (bytes < 1024 * 1024 * 1024) {    return String.format("%.1f MB",bytes / (1024.0 * 1024.0));  } else {    return String.format("%.1f GB",bytes / (1024.0 * 1024.0 * 1024.0));  }}  }
class C{  public Query<T> orderBy(Object... expressions){  for (  Object expr : expressions) {    OrderExpression<T> e=new OrderExpression<T>(this,expr,false,false,false);    addOrderBy(e);  }  return this;}  }
class C{  public boolean isAllowMinimizing(){  return allowMinimizing;}  }
class C{  public void addNodesInDocOrder(NodeIterator iterator,XPathContext support){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  Node node;  while (null != (node=iterator.nextNode())) {    addNodeInDocOrder(node,support);  }}  }
class C{  public Message(String text,String sender){  this(text,sender,TYPE_MESSAGE);}  }
class C{  public Interval toInterval(){  return this;}  }
class C{  public void print(int w,int d){  print(new PrintWriter(System.out,true),w,d);}  }
class C{  private SolrZkClient electNewOverseer(String address) throws KeeperException, InterruptedException, IOException {  SolrZkClient zkClient=new SolrZkClient(address,TIMEOUT);  ZkStateReader reader=new ZkStateReader(zkClient);  LeaderElector overseerElector=new LeaderElector(zkClient);  UpdateShardHandler updateShardHandler=new UpdateShardHandler(null);  Overseer overseer=new Overseer(new HttpShardHandlerFactory().getShardHandler(),updateShardHandler,"/admin/cores",reader,null,new MockConfigSolr());  overseer.close();  ElectionContext ec=new OverseerElectionContext(zkClient,overseer,address.replaceAll("/","_"));  overseerElector.setup(ec);  overseerElector.joinElection(ec,false);  return zkClient;}  }
class C{  @Path("/role-assignments") @PUT @CheckPermission(roles={Role.SECURITY_ADMIN,Role.RESTRICTED_SECURITY_ADMIN},blockProxies=true) @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public RoleAssignments updateRoleAssignments(RoleAssignmentChanges changes){  VirtualDataCenter localVdc=VdcUtil.getLocalVdc();  TenantOrg rootTenant=_permissionsHelper.getRootTenant();  _permissionsHelper.updateRoleAssignments(localVdc,changes,new ZoneRoleInputFilter(rootTenant));  validateVdcRoleAssignmentChange(localVdc);  _dbClient.updateAndReindexObject(localVdc);  _auditMgr.recordAuditLog(localVdc.getId(),URI.create(getUserFromContext().getName()),EVENT_SERVICE_TYPE,OperationTypeEnum.MODIFY_ZONE_ROLES,System.currentTimeMillis(),AuditLogManager.AUDITLOG_SUCCESS,null,localVdc.getId().toString(),localVdc.getLabel(),changes);  return getRoleAssignmentsResponse(localVdc);}  }
class C{  private static Pair<String,String> offsetASR(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue1,final String registerNodeValue2,final String immediateNodeValue){  final String address=environment.getNextVariableString();  final String index=environment.getNextVariableString();  final String tmpVar=environment.getNextVariableString();  long baseOffset=offset;  if (immediateNodeValue.equals("0")) {    final String isZeroCondition=environment.getNextVariableString();    final String tmpVar1=environment.getNextVariableString();    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,registerNodeValue2,wd,String.valueOf(-31),dw,tmpVar1));    instructions.add(ReilHelpers.createBisz(baseOffset++,dw,tmpVar1,bt,isZeroCondition));    instructions.add(ReilHelpers.createSub(baseOffset++,dw,String.valueOf(0x0L),bt,isZeroCondition,dw,index));  } else {    final String tmpVar1=environment.getNextVariableString();    final String tmpVar2=environment.getNextVariableString();    final String tmpVar3=environment.getNextVariableString();    final String tmpVar4=environment.getNextVariableString();    instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue2,dw,String.valueOf(0x80000000L),dw,tmpVar1));    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,tmpVar1,dw,"-" + immediateNodeValue,dw,tmpVar2));    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,String.valueOf(0x80000000L),dw,"-" + immediateNodeValue,dw,tmpVar3));    instructions.add(ReilHelpers.createSub(baseOffset++,dw,tmpVar2,dw,tmpVar3,qw,tmpVar4));    instructions.add(ReilHelpers.createAnd(baseOffset++,qw,tmpVar4,dw,dWordBitMask,dw,index));  }  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue1,dw,index,dw,tmpVar));  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar,dw,dWordBitMask,dw,address));  return new Pair<String,String>(address,registerNodeValue1);}  }
class C{  public static int EMEDIUMTYPE(){  return 124;}  }
class C{  public UserCredentials(CredentialsInfo info){  this(info,new HashMap<String,String>());}  }
class C{  public ColumnBuilder putProperty(String name,DataType type,Object value){  setProperty(name,PropertyMapImpl.createProperty(name,type,value));  return this;}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  public static Object demuxArray(Object src,int[] dims,Class<?> componentType){  Object dst=null;  if (componentType != byte.class) {    dst=Array.newInstance(componentType,dims);  } else {    int[] dimsTemp=new int[dims.length + 1];    System.arraycopy(dims,0,dimsTemp,0,dims.length);    dimsTemp[dims.length]=1;    dst=Array.newInstance(componentType,dimsTemp);  }  _fillDemux(0,dims,src,0,dst);  return dst;}  }
class C{  @Override public void onCreate(SQLiteDatabase db,ConnectionSource connectionSource){  try {    Log.i(DatabaseHelper.class.getName(),"onCreate");    TableUtils.createTable(connectionSource,AddressBook.class);    TableUtils.createTable(connectionSource,AddressItem.class);    TableUtils.createTable(connectionSource,Contact.class);    TableUtils.createTable(connectionSource,SimpleAddressItem.class);  } catch (  SQLException e) {    Log.e(DatabaseHelper.class.getName(),"Can't create database",e);    throw new RuntimeException(e);  }}  }
class C{  public PointInGeo3DShapeQuery(String field,GeoShape shape){  this.field=field;  this.shape=shape;  this.shapeBounds=new XYZBounds();  shape.getBounds(shapeBounds);  if (shape instanceof BasePlanetObject) {    BasePlanetObject planetObject=(BasePlanetObject)shape;    if (planetObject.getPlanetModel().equals(PlanetModel.WGS84) == false) {      throw new IllegalArgumentException("this qurey requires PlanetModel.WGS84, but got: " + planetObject.getPlanetModel());    }  }}  }
class C{  public RequestListenerMessageEventHandler(RequestListener requestListener){  super(Message.STUN_REQUEST,requestListener);}  }
class C{  public ClassDataItem(CstType thisClass){  super(1,-1);  if (thisClass == null) {    throw new NullPointerException("thisClass == null");  }  this.thisClass=thisClass;  this.staticFields=new ArrayList<EncodedField>(20);  this.staticValues=new HashMap<EncodedField,Constant>(40);  this.instanceFields=new ArrayList<EncodedField>(20);  this.directMethods=new ArrayList<EncodedMethod>(20);  this.virtualMethods=new ArrayList<EncodedMethod>(20);  this.staticValuesConstant=null;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-01-27 09:54:40.230 -0500",hash_original_method="1A78B3BB099030EABAF4D8DEC5E5F129",hash_generated_method="F1099AF04C67A26CC31E5F75C97D05A4") public FileInputStream openRead() throws FileNotFoundException {  if (mBackupName.exists()) {    mBaseName.delete();    mBackupName.renameTo(mBaseName);  }  return new FileInputStream(mBaseName);}  }
class C{  public Renderer(){  super();}  }
class C{  private SimpleHashSetEntry<T>[] doubleCapacity(){  SimpleHashSetEntry<T>[] oldTable=mTable;  int oldCapacity=oldTable.length;  if (oldCapacity == MAXIMUM_CAPACITY) {    return oldTable;  }  int newCapacity=oldCapacity * 2;  SimpleHashSetEntry<T>[] newTable=makeTable(newCapacity);  if (mSize == 0) {    return newTable;  }  for (int j=0; j < oldCapacity; j++) {    SimpleHashSetEntry<T> e=oldTable[j];    if (e == null) {      continue;    }    int highBit=e.mHash & oldCapacity;    SimpleHashSetEntry<T> broken=null;    newTable[j | highBit]=e;    for (SimpleHashSetEntry<T> n=e.mNext; n != null; e=n, n=n.mNext) {      int nextHighBit=n.mHash & oldCapacity;      if (nextHighBit != highBit) {        if (broken == null) {          newTable[j | nextHighBit]=n;        } else {          broken.mNext=n;        }        broken=e;        highBit=nextHighBit;      }    }    if (broken != null)     broken.mNext=null;  }  return newTable;}  }
class C{  public static String encodingToJavaEncoding(String e,String de){  String result=EncodingUtilities.javaEncoding(e);  return (result == null) ? de : result;}  }
class C{  public synchronized int indexOf(Object object,int location){  if (object != null) {    for (int i=location; i < elementCount; i++) {      if (object.equals(elementData[i])) {        return i;      }    }  } else {    for (int i=location; i < elementCount; i++) {      if (elementData[i] == null) {        return i;      }    }  }  return -1;}  }
class C{  public SerialMessage(String m){  super(m);  setBinary(true);}  }
class C{  private void calculateBaseOffsets(){  float textHeight=mTextPaint.descent() - mTextPaint.ascent();  float textOffset=(textHeight / 2) - mTextPaint.descent();  mCollapsedDrawY=mCollapsedBounds.centerY() + textOffset;  mCollapsedDrawX=mCollapsedBounds.left;  mExpandedDrawY=mExpandedBounds.bottom - 1;  mExpandedDrawX=mExpandedBounds.left;}  }
class C{  @Override public void caretUpdate(CaretEvent e){  clearHighlights();  int p=e.getDot();  if (p != e.getMark())   return;  JTextComponent source=(JTextComponent)e.getSource();  highlighter=source.getHighlighter();  Document doc=source.getDocument();  try {    if (!checkHighlightParens(doc,p - 1))     if (!checkHighlightParens(doc,p))     if (!checkHighlightParens(doc,firstNonspaseOffset(doc,p - 1,-1)))     if (!checkHighlightParens(doc,firstNonspaseOffset(doc,p,1))) {    }  } catch (  BadLocationException ex) {    throw new Error(ex);  }}  }
class C{  public DateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,int secondOfMinute,int millisOfSecond,DateTimeZone zone){  super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond,zone);}  }
class C{  public static boolean scan(final char[] input){  int surLow=0xD800;  int surHgh=0xDFFF;  int end=input.length;  for (int i=0; i < end; i++) {    if ((int)input[i] >= surLow && input[i] <= surHgh) {      return true;    }  }  return false;}  }
class C{  protected SQLException logAndConvert(Exception ex){  SQLException e=DbException.toSQLException(ex);  if (trace == null) {    DbException.traceThrowable(e);  } else {    int errorCode=e.getErrorCode();    if (errorCode >= 23000 && errorCode < 24000) {      trace.info(e,"exception");    } else {      trace.error(e,"exception");    }  }  return e;}  }
class C{  public void updateBoolean(String columnName,boolean x) throws SQLException {  updateBoolean(findColumn(columnName),x);}  }
class C{  public void testConstructorSignBytesPositive2(){  byte aBytes[]={-12,56,100,-2,-76,89,45,91,3,-15};  int aSign=1;  byte rBytes[]={0,-12,56,100,-2,-76,89,45,91,3,-15};  BigInteger aNumber=new BigInteger(aSign,aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  public LongsRef(long[] longs,int offset,int length){  this.longs=longs;  this.offset=offset;  this.length=length;  assert isValid();}  }
class C{  <D,E extends Element>ElementMetadata<D,E> bind(ElementKey<?,?> parent,ElementKey<D,E> key,MetadataContext context){  TransformKey transformKey=TransformKey.forTransform(parent,key,context);  @SuppressWarnings("unchecked") ElementMetadata<D,E> transformed=(ElementMetadata<D,E>)cache.get(transformKey);  if (transformed == null) {    ElementTransform transform=getTransform(transformKey,key);    transformed=transform.toMetadata(schema,parent,key,context);    @SuppressWarnings("unchecked") ElementMetadata<D,E> previous=(ElementMetadata<D,E>)cache.putIfAbsent(transformKey,transformed);    if (previous != null) {      transformed=previous;    }  }  return transformed;}  }
class C{  @Deprecated public static <V1,V2,V3,V4>GridTuple4<V1,V2,V3,V4> t(@Nullable V1 v1,@Nullable V2 v2,@Nullable V3 v3,@Nullable V4 v4){  return new GridTuple4<>(v1,v2,v3,v4);}  }
class C{  private static void addDefaultHeaders(@NonNull Request.Builder builder){  builder.header("Accept","application/json");}  }
class C{  public void scheduleSyncOperation(SyncOperation syncOperation){  boolean queueChanged;synchronized (mSyncQueue) {    queueChanged=mSyncQueue.add(syncOperation);  }  if (queueChanged) {    if (Log.isLoggable(TAG,Log.VERBOSE)) {      Log.v(TAG,"scheduleSyncOperation: enqueued " + syncOperation);    }    sendCheckAlarmsMessage();  } else {    if (Log.isLoggable(TAG,Log.VERBOSE)) {      Log.v(TAG,"scheduleSyncOperation: dropping duplicate sync operation " + syncOperation);    }  }}  }
class C{  public void delete() throws IOException {  IOUtils.closeQuietly(this);  deleteContents(directory);}  }
class C{  public SyncValueResponseMessage(SyncValueResponseMessage other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  this.count=other.count;}  }
class C{  public double backwardTimeEvolution(int x,int y,double t){  if (t < 0) {    throw new IllegalArgumentException("Cannot go backwards in time: t=" + t);  }  double m[]={getBackwardRate(0,1),getBackwardRate(1,0)};  double mt=m[0] + m[1];  if (y == x) {    return (m[x] * Math.exp(-mt * t) + m[1 - x]) / mt;  } else {    return m[x] * (1.0 - Math.exp(-mt * t)) / mt;  }}  }
class C{  public static StorageSystem createVPlexTwoCluster(DbClient dbClient,String label,VirtualArray varray1,Network networkFE1,Network networkBE1,String[] vplexFE1,String[] vplexBE1,VirtualArray varray2,Network networkFE2,Network networkBE2,String[] vplexFE2,String[] vplexBE2){  StorageSystem vplexStorageSystem=PlacementTestUtils.createStorageSystem(dbClient,"vplex",label);  List<StoragePort> fePorts=new ArrayList<StoragePort>();  for (int i=0; i < vplexFE1.length; i++) {    fePorts.add(PlacementTestUtils.createStoragePort(dbClient,vplexStorageSystem,networkFE1,vplexFE1[i],varray1,StoragePort.PortType.frontend.name(),"portGroupFE" + i,label + "_A0+FC0" + i));  }  List<StoragePort> bePorts=new ArrayList<StoragePort>();  for (int i=0; i < vplexBE1.length; i++) {    bePorts.add(PlacementTestUtils.createStoragePort(dbClient,vplexStorageSystem,networkBE1,vplexBE1[i],varray1,StoragePort.PortType.backend.name(),"portGroupBE" + i,label + "_B0+FC0" + i));  }  fePorts=new ArrayList<StoragePort>();  for (int i=0; i < vplexFE2.length; i++) {    fePorts.add(PlacementTestUtils.createStoragePort(dbClient,vplexStorageSystem,networkFE2,vplexFE2[i],varray2,StoragePort.PortType.frontend.name(),"portGroupFE" + i,label + "_C0+FC0" + i));  }  bePorts=new ArrayList<StoragePort>();  for (int i=0; i < vplexBE2.length; i++) {    bePorts.add(PlacementTestUtils.createStoragePort(dbClient,vplexStorageSystem,networkBE2,vplexBE2[i],varray2,StoragePort.PortType.backend.name(),"portGroupBE" + i,label + "_D0+FC0" + i));  }  return vplexStorageSystem;}  }
class C{  void run(boolean hullonly){  if (points.size() < 3) {    throw new UnsupportedOperationException("There is no delaunay triangulation for less than three objects!");  }  int len=points.size() - 1;  hull=new LinkedList<>();  tris=hullonly ? null : new ArrayList<Triangle>(len);  final double[] seed;  final int seedid=0;  final double[] sortd=new double[len];  final int[] sorti=new int[len];  Arrays.fill(sorti,-42);{    Iterator<double[]> iter=points.iterator();    seed=iter.next();    for (int i=0, j=1; iter.hasNext(); j++, i++) {      double dist=quadraticEuclidean(seed,iter.next());      if (dist <= 0.) {        --len;        --i;        continue;      }      sortd[i]=dist;      sorti[i]=j;    }    DoubleIntegerArrayQuickSort.sort(sortd,sorti,len);  }  if (len < 2) {    hull.add(new IntIntPair(seedid,-1));    if (len == 1) {      hull.add(new IntIntPair(sorti[0],-1));    }    return;  }  assert (sortd[0] > 0);  final int seed2id=sorti[0];  Triangle besttri=findSmallest(seedid,seed2id,sortd,sorti,len);  if (besttri == null) {    hull.add(new IntIntPair(seedid,-1));    hull.add(new IntIntPair(seed2id,-1));    return;  }  int start=2;  besttri.makeClockwise(points);  if (!hullonly) {    tris.add(besttri);  }  hull.add(new IntIntPair(besttri.a,0));  hull.add(new IntIntPair(besttri.b,0));  hull.add(new IntIntPair(besttri.c,0));  if (LOG.isDebuggingFinest()) {    debugHull();  }  double[] center=besttri.m;  for (int i=start; i < len; i++) {    sortd[i]=quadraticEuclidean(center,points.get(sorti[i]));  }  DoubleIntegerArrayQuickSort.sort(sortd,sorti,start,len);  for (int i=start; i < len; i++) {    final int pointId=sorti[i];    final double[] newpoint=points.get(pointId);    LinkedList<Triangle> newtris=hullonly ? null : new LinkedList<Triangle>();    int hstart=-1, hend=-1;{      Iterator<IntIntPair> iter=hull.descendingIterator();      IntIntPair next=hull.getFirst();      double[] nextV=points.get(next.first);      for (int pos=hull.size() - 1; iter.hasNext(); pos--) {        IntIntPair prev=iter.next();        double[] prevV=points.get(prev.first);        if (hend < 0) {          if (leftOf(prevV,nextV,newpoint)) {            hstart=pos;            hend=pos;            if (!hullonly) {              Triangle tri=new Triangle(pointId,next.first,prev.first);              assert (tri.isClockwise(points));              assert (prev.second >= 0);              tri.updateCircumcircle(points);              tri.bc=prev.second;              newtris.addFirst(tri);            }          }        } else {          if (leftOf(prevV,nextV,newpoint)) {            hstart=pos;            if (!hullonly) {              Triangle tri=new Triangle(pointId,next.first,prev.first);              assert (tri.isClockwise(points));              assert (prev.second >= 0);              tri.updateCircumcircle(points);              tri.bc=prev.second;              newtris.addFirst(tri);            }          } else {            break;          }        }        next=prev;        nextV=prevV;      }    }    if (hend == hull.size() - 1) {      Iterator<IntIntPair> iter=hull.iterator();      IntIntPair prev=iter.next();      double[] prevV=points.get(prev.first);      while (iter.hasNext()) {        IntIntPair next=iter.next();        double[] nextV=points.get(next.first);        if (leftOf(prevV,nextV,newpoint)) {          hend++;          if (!hullonly) {            Triangle tri=new Triangle(pointId,next.first,prev.first);            assert (tri.isClockwise(points));            assert (prev.second >= 0);            tri.updateCircumcircle(points);            tri.bc=prev.second;            newtris.addLast(tri);          }        } else {          break;        }        prev=next;        prevV=nextV;      }    }    assert (hstart >= 0 && hend >= hstart);    final int firsttri, lasttri;    if (hullonly) {      firsttri=-1;      lasttri=-1;    } else {      final int tristart=tris.size();      firsttri=tristart;      lasttri=tristart + newtris.size() - 1;    }    final int hullsize=hull.size();    if (LOG.isDebuggingFinest()) {      LOG.debugFinest("Size: " + hullsize + " start: "+ hstart+ " end: "+ hend);    }    if (hend < hullsize) {      ListIterator<IntIntPair> iter=hull.listIterator();      int p=0;      for (; p <= hstart; p++) {        iter.next();      }      for (; p <= hend; p++) {        iter.next();        iter.remove();      }      iter.add(new IntIntPair(pointId,lasttri));      iter.previous();      if (!hullonly) {        if (iter.hasPrevious()) {          iter.previous().second=firsttri;        } else {          hull.getLast().second=firsttri;        }      }    } else {      ListIterator<IntIntPair> iter=hull.listIterator();      int p=hullsize;      for (; p <= hend; p++) {        iter.next();        iter.remove();      }      iter.add(new IntIntPair(pointId,lasttri));      p-=hullsize;      IntIntPair pre=null;      for (; p <= hstart; p++) {        pre=iter.next();      }      assert (pre != null);      pre.second=firsttri;      while (iter.hasNext()) {        iter.next();        iter.remove();      }    }    if (LOG.isDebuggingFinest()) {      debugHull();    }    if (!hullonly) {      final int tristart=tris.size();      Iterator<Triangle> iter=newtris.iterator();      for (int o=0; iter.hasNext(); o++) {        Triangle cur=iter.next();        if (o > 0) {          cur.ca=tristart + o - 1;        } else {          cur.ca=-1;        }        if (iter.hasNext()) {          cur.ab=tristart + o + 1;        } else {          cur.ab=-1;        }        assert (cur.bc >= 0);        Triangle other=tris.get(cur.bc);        Orientation orient=cur.findOrientation(other);        assert (orient != null) : "Inconsistent triangles: " + cur + " "+ other;switch (orient) {case ORIENT_BC_BA:          assert (other.ab == -1) : "Inconsistent triangles: " + cur + " "+ other;        other.ab=tristart + o;      break;case ORIENT_BC_CB:    assert (other.bc == -1) : "Inconsistent triangles: " + cur + " "+ other;  other.bc=tristart + o;break;case ORIENT_BC_AC:assert (other.ca == -1) : "Inconsistent triangles: " + cur + " "+ other;other.ca=tristart + o;break;default :assert (cur.isClockwise(points));assert (other.isClockwise(points));throw new RuntimeException("Inconsistent triangles: " + cur + " "+ other+ " size:"+ tris.size());}tris.add(cur);}assert (tris.size() == lasttri + 1);}}if (!hullonly) {final int size=tris.size();long[] flippedA=BitsUtil.zero(size), flippedB=BitsUtil.zero(size);if (flipTriangles(flippedA) > 0) {for (int iterations=1; iterations < 1000; iterations+=2) {if (LOG.isDebuggingFinest()) {debugHull();}if (flipTriangles(flippedA,flippedB) == 0) {break;}if (LOG.isDebuggingFinest()) {debugHull();}if (flipTriangles(flippedB,flippedA) == 0) {break;}}}}}  }
class C{  public void removeAccessibleSelection(int i){  TreeModel model=JTree.this.getModel();  if (model != null) {    if (i >= 0 && i < getAccessibleChildrenCount()) {      TreePath path=getChildTreePath(i);      JTree.this.removeSelectionPath(path);    }  }}  }
class C{  public void addHeaderField(String name,String value){  log.debug("add header field: " + name + "; value: "+ value);  writer.append(name + ": " + value).append(LINE_FEED);  writer.flush();}  }
class C{  @Override public void shrinkToMinScore(final int minScore){  int score;  Long key;synchronized (this) {    while (!this.pam.isEmpty()) {      key=this.pam.firstKey();      if (key == null)       break;      score=(int)((key.longValue() & 0xFFFFFFFF00000000L) >> 32);      if (score >= minScore)       break;      this.map.remove(this.pam.remove(key));    }  }}  }
class C{  private boolean equalFactLineIDs(FactLine prevFactLine,FactLine factLine){  return (factLine.getA_Asset_ID() == prevFactLine.getA_Asset_ID() && factLine.getAccount_ID() == prevFactLine.getAccount_ID() && factLine.getAD_Client_ID() == prevFactLine.getAD_Client_ID() && factLine.getAD_Org_ID() == prevFactLine.getAD_Org_ID() && factLine.getAD_OrgTrx_ID() == prevFactLine.getAD_OrgTrx_ID() && factLine.getC_AcctSchema_ID() == prevFactLine.getC_AcctSchema_ID() && factLine.getC_Activity_ID() == prevFactLine.getC_Activity_ID() && factLine.getC_BPartner_ID() == prevFactLine.getC_BPartner_ID() && factLine.getC_Campaign_ID() == prevFactLine.getC_Campaign_ID() && factLine.getC_Currency_ID() == prevFactLine.getC_Currency_ID() && factLine.getC_LocFrom_ID() == prevFactLine.getC_LocFrom_ID() && factLine.getC_LocTo_ID() == prevFactLine.getC_LocTo_ID() && factLine.getC_Period_ID() == prevFactLine.getC_Period_ID() && factLine.getC_Project_ID() == prevFactLine.getC_Project_ID() && factLine.getC_ProjectPhase_ID() == prevFactLine.getC_ProjectPhase_ID() && factLine.getC_ProjectTask_ID() == prevFactLine.getC_ProjectTask_ID() && factLine.getC_SalesRegion_ID() == prevFactLine.getC_SalesRegion_ID() && factLine.getC_SubAcct_ID() == prevFactLine.getC_SubAcct_ID() && factLine.getC_Tax_ID() == prevFactLine.getC_Tax_ID() && factLine.getC_UOM_ID() == prevFactLine.getC_UOM_ID() && factLine.getGL_Budget_ID() == prevFactLine.getGL_Budget_ID() && factLine.getGL_Category_ID() == prevFactLine.getGL_Category_ID() && factLine.getM_Locator_ID() == prevFactLine.getM_Locator_ID() && factLine.getM_Product_ID() == prevFactLine.getM_Product_ID() && factLine.getUserElement1_ID() == prevFactLine.getUserElement1_ID() && factLine.getUserElement2_ID() == prevFactLine.getUserElement2_ID() && factLine.getUser1_ID() == prevFactLine.getUser1_ID() && factLine.getUser2_ID() == prevFactLine.getUser2_ID());}  }
class C{  public void addChannel(String channel){  checkArgument(listeningChannels.size() < 128,"Cannot add more than 127 channels!");  if (listeningChannels.add(channel)) {    EventFactory.callEvent(new PlayerRegisterChannelEvent(this,channel));  }}  }
class C{  public void removeXValue(int index){  mXVals.remove(index);}  }
class C{  @Override public final boolean isMagicWord(String in){  return in.matches("^(?i)\\b((" + "start" + "|end"+ "|fail"+ "|exception"+ "|finish"+ "|exit"+ "|begin"+ "|terminat"+ ")(ed)?)"+ "|enable"+ "|enabled"+ "|disable"+ "|disabled"+ "|error"+ "|failure"+ "|stop"+ "|stopped"+ "|root"+ "\\b$");}  }
class C{  protected boolean canTriggerWalking(){  return false;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void block(Collection<Address> destinations){  if (config.isUseNetworkEmulator()) {    networkEmulatorHandler.block(destinations);    LOGGER.info("Block network from {} to {}",address,destinations);  } else {    LOGGER.warn("Noop on 'block({})' since network emulator is disabled",destinations);  }}  }
class C{  public void refreshUpdateDocument(int id,FolderDocUpdIds docUpdIds) throws Exception {  m_documents.refreshUpdateDocument(id,docUpdIds);}  }
class C{  public void addInterpolatedColumn(String name,Class type){  addInterpolatedColumn(name,type,null);}  }
class C{  public DrawerBuilder withDrawerLayout(@NonNull DrawerLayout drawerLayout){  this.mDrawerLayout=drawerLayout;  return this;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.ABSTRACT_CASE_CLAUSE__STATEMENTS:    return statements != null && !statements.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public CylinderRegionParser(Element element) throws RegionException {  String baseValue=element.getAttributeValue("base");  if (baseValue == null) {    throw new MissingRegionAttributeException("base",element);  }  base=Numbers.getVector(baseValue);  if (base == null) {    throw new InvalidRegionAttributeException("base",element);  }  String radiusValue=element.getAttributeValue("radius");  if (radiusValue == null) {    throw new MissingRegionAttributeException("radius",element);  }  if (!Numbers.isDecimal(radiusValue)) {    throw new InvalidRegionAttributeException("radius",element);  }  radius=Numbers.parseDouble(radiusValue);  String heightValue=element.getAttributeValue("height");  if (heightValue == null) {    throw new MissingRegionAttributeException("height",element);  }  if (!Numbers.isDecimal(heightValue)) {    throw new InvalidRegionAttributeException("height",element);  }  height=Numbers.parseDouble(heightValue);}  }
class C{  public boolean voidIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_VOID);  if (m_processMsg != null)   return false;  boolean ok_to_void=false;  if (DOCSTATUS_Drafted.equals(getDocStatus()) || DOCSTATUS_Invalid.equals(getDocStatus())) {    setProcessed(true);    setDocAction(DOCACTION_None);    ok_to_void=true;  } else {    return false;  }  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_VOID);  if (m_processMsg != null)   return false;  return ok_to_void;}  }
class C{  public FloorsInfo(){  m_sID=null;  m_sName=null;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node gender;  EntityReference entRef;  Element entElement;  Node appendedChild;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  gender=genderList.item(2);  entRef=doc.createEntityReference("ent4");  assertNotNull("createdEntRefNotNull",entRef);  appendedChild=gender.appendChild(entRef);  entElement=(Element)entRef.getFirstChild();  assertNotNull("entElementNotNull",entElement);{    boolean success=false;    try {      entElement.removeAttribute("domestic");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public JSONObject put(String key,Map value) throws JSONException {  this.put(key,new JSONObject(value));  return this;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  double centreValue;  float progress=0;  int a, j, n;  int filterSizeX=3;  int filterSizeY=3;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  ArrayList<Double> data=new ArrayList<Double>();  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("blue_white_red.pal");    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        centreValue=inputFile.getValue(row,col);        if (centreValue != noData) {          data.clear();          n=0;          z=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData && filterShape[a] == 1) {              data.add(z);              n++;            }          }          Collections.sort(data);          j=-1;          for (a=0; a < numPixelsInFilter; a++) {            if (data.get(a) == centreValue) {              j=a;              break;            }          }          if (j >= 0) {            outputFile.setValue(row,col,(double)j / n * 100);          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean isLogical(){  return logical;}  }
class C{  public boolean hasBalancingGroup(){  return balancingGroup != null;}  }
class C{  public void play(String musicName,float volume){  if (musicMap.containsKey(musicName)) {    soundPool.play(musicMap.get(musicName),volume,volume,0,0,1);  }}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  public void stop() throws InterruptedException {  if (finished)   return;  cancelled=true;  try {    thd.interrupt();    thd.join(10000);    thd=null;  } catch (  InterruptedException e) {    logger.warn("Connector handler stop operation was interrupted");    if (thd != null)     thd.join();  }}  }
class C{  public void triggerAction(){  MyLog.debug("Push notification action triggered at base class.");}  }
class C{  public boolean isBigEndian(){  return isBigEndian;}  }
class C{  public void dragGestureRecognized(DragGestureEvent dge){  JComponent c=(JComponent)dge.getComponent();  LimeTransferHandler th=(LimeTransferHandler)c.getTransferHandler();  Transferable t=th.createTransferable(c);  if (t != null) {    boolean scrolls=c.getAutoscrolls();    c.setAutoscrolls(false);    try {      Image img=null;      if (DragSource.isDragImageSupported())       img=th.getImageRepresentation(t);      if (img != null) {        dge.startDrag(null,img,new Point(2,2),t,new BasicDragSourceListener(scrolls));      } else {        dge.startDrag(null,t,new BasicDragSourceListener(scrolls));      }      return;    } catch (    RuntimeException re) {      c.setAutoscrolls(scrolls);    }  }  th.exportDone(c,t,TransferHandler.NONE);}  }
class C{  public boolean validate(InputNode node) throws Exception {  Instance value=factory.getInstance(node);  if (!value.isReference()) {    Object result=value.setInstance(null);    Class type=value.getType();    return validate(node,type);  }  return true;}  }
class C{  public void visitIincInsn(int var,int increment){  if (mv != null) {    mv.visitIincInsn(var,increment);  }}  }
class C{  protected String doIt() throws Exception {  int To_C_Project_ID=getRecord_ID();  log.info("doIt - From C_Project_ID=" + m_C_Project_ID + " to "+ To_C_Project_ID);  if (To_C_Project_ID == 0)   throw new IllegalArgumentException("Target C_Project_ID == 0");  if (m_C_Project_ID == 0)   throw new IllegalArgumentException("Source C_Project_ID == 0");  MProject from=new MProject(getCtx(),m_C_Project_ID,get_TrxName());  MProject to=new MProject(getCtx(),To_C_Project_ID,get_TrxName());  int no=to.copyDetailsFrom(from);  return "@Copied@=" + no;}  }
class C{  public void acceptBinding(String bindingKey,IBinding binding){}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public final static String encodeToString(byte[] sArr,boolean lineSep){  return new String(encodeToChar(sArr,lineSep));}  }
class C{  public boolean isExpired(){  return isExpired(System.currentTimeMillis());}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:30.431 -0500",hash_original_method="6F9360E73E1EB4E0BD6CC48A029E26CB",hash_generated_method="9B7A92D2BF07B2DF3B6AEF824EA1D2A5") private View fillDown(int pos,int nextTop){  View selectedView=null;  int end=(mBottom - mTop);  if ((mGroupFlags & CLIP_TO_PADDING_MASK) == CLIP_TO_PADDING_MASK) {    end-=mListPadding.bottom;  }  while (nextTop < end && pos < mItemCount) {    View temp=makeRow(pos,nextTop,true);    if (temp != null) {      selectedView=temp;    }    nextTop=mReferenceView.getBottom() + mVerticalSpacing;    pos+=mNumColumns;  }  return selectedView;}  }
class C{  public static void testPrivKeyTweakAdd_2() throws AssertFailException {  byte[] pub=BaseEncoding.base16().lowerCase().decode("040A629506E1B65CD9D2E0BA9C75DF9C4FED0DB16DC9625ED14397F0AFC836FAE595DC53F8B0EFE61E703075BD9B143BAC75EC0E19F82A2208CAEB32BE53414C40".toLowerCase());  byte[] data=BaseEncoding.base16().lowerCase().decode("3982F19BEF1615BCCFBB05E321C10E1D4CBA3DF0E841C2E41EEB6016347653C3".toLowerCase());  byte[] resultArr=NativeSecp256k1.pubKeyTweakAdd(pub,data);  String sigString=javax.xml.bind.DatatypeConverter.printHexBinary(resultArr);  assertEquals(sigString,"0411C6790F4B663CCE607BAAE08C43557EDC1A4D11D88DFCB3D841D0C6A941AF525A268E2A863C148555C48FB5FBA368E88718A46E205FABC3DBA2CCFFAB0796EF","testPrivKeyAdd_2");}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.174 -0400",hash_original_method="20DCFBDA8ADF6765BDFDC314C97D8395",hash_generated_method="8E5276AC48C684B1D5288CD603CE5930") protected void handleDirectoryStart(File directory,int depth,Collection<T> results) throws IOException {}  }
class C{  public boolean isEmittable(){  return kind != BACKWARD_ACTION && kind != FORWARD_ACTION;}  }
class C{  @Override public boolean onOptionsItemSelected(MenuItem item){switch (item.getItemId()) {case android.R.id.home:    finish();  return true;default :return super.onOptionsItemSelected(item);}}  }
class C{  public StandaloneFluentJdbcModule(FluentJdbcBuilder fluentJdbcBuilder,ConnectionProvider connectionProvider){  Preconditions.checkNotNull(fluentJdbcBuilder,"fluentJdbcBuilder");  Preconditions.checkNotNull(connectionProvider,"connectionProvider");  this.fluentJdbcBuilder=fluentJdbcBuilder;  this.connectionProvider=new StandaloneTxConnectionProvider(connectionProvider);}  }
class C{  public static short min(short a,final short b,final short c){  if (b < a) {    a=b;  }  if (c < a) {    a=c;  }  return a;}  }
class C{  public ByteSequencesReader(ChecksumIndexInput in,String name){  this.in=in;  this.name=name;  end=in.length() - CodecUtil.footerLength();}  }
class C{  public int mintermlength(){  return mintermlength;}  }
class C{  public void removeAllMapEventsListeners(){  if (mapEventsListeners != null) {    mapEventsListeners.clear();  }  mapEventsListeners=new ArrayList<MapEventsListener>();}  }
class C{  public Caption(String caption,Font font,Color c,Position position,int insets){  this.caption=caption;  this.font=font;  this.c=c;  this.alpha=1.0f;  this.position=position;  this.insets=insets;}  }
class C{  public StringAttributeRule(String name,String description,Enum[] valid,boolean optional){  this(name,description,null,optional,0,Integer.MAX_VALUE);  validValues=new ArrayList<String>();  for (  Enum aValid : valid) {    validValues.add(aValid.name());  }  this.example=null;}  }
class C{  public void modelCheck() throws Exception {  report("entering modelCheck()");  boolean recovered=this.recover();  if (!recovered) {    if (!this.checkAssumptions())     return;    try {      report("doInit(false)");      MP.printMessage(EC.TLC_COMPUTING_INIT);      if (!this.doInit(false)) {        report("exiting, because init failed");        return;      }    } catch (    Throwable e) {      report("exception in init");      report(e);      String msg=e.getMessage();      if (e instanceof StackOverflowError) {        msg="This was a Java StackOverflowError. It was probably the result\n" + "of an incorrect recursive function definition that caused TLC to enter\n" + "an infinite loop when trying to compute the function or its application\n"+ "to an element in its putative domain.";      }      if (msg == null) {        msg=e.toString();      }      if (this.errState != null) {        MP.printError(EC.TLC_INITIAL_STATE,new String[]{msg,this.errState.toString()});      } else {        MP.printError(EC.GENERAL,msg);      }      this.tool.setCallStack();      try {        numberOfInitialStates=0;        this.doInit(true);      } catch (      Throwable e1) {        MP.printError(EC.TLC_NESTED_EXPRESSION,this.tool.getCallStack().toString());      }      this.printSummary(false,startTime);      this.cleanup(false);      report("exiting, because init failed with exception");      return;    }    long statesGenerated=getStatesGenerated();    final String plural=(statesGenerated == 1) ? "" : "s";    if (statesGenerated == this.theFPSet.size()) {      MP.printMessage(EC.TLC_INIT_GENERATED1,new String[]{String.valueOf(statesGenerated),plural});    } else {      MP.printMessage(EC.TLC_INIT_GENERATED2,new String[]{String.valueOf(statesGenerated),plural,String.valueOf(this.theFPSet.size())});    }  }  report("init processed");  if (this.actions.length == 0) {    if (this.theStateQueue.isEmpty()) {      reportSuccess(this.theFPSet,getStatesGenerated());      this.printSummary(true,startTime);    } else {      MP.printError(EC.TLC_STATES_AND_NO_NEXT_ACTION);    }    this.cleanup(true);    report("exiting with actions.length == 0");    return;  }  boolean success=false;  try {    report("running TLC");    success=this.runTLC(Integer.MAX_VALUE);    if (!success) {      report("TLC terminated with error");      return;    }    if (this.errState == null) {      if (this.checkLiveness) {        MP.printMessage(EC.TLC_PROGRESS_STATS,new String[]{String.valueOf(this.trace.getLevelForReporting()),String.valueOf(getStatesGenerated()),String.valueOf(theFPSet.size()),String.valueOf(this.theStateQueue.size())});        report("checking liveness");        success=liveCheck.finalCheck();        report("liveness check complete");        if (!success) {          report("exiting error status on liveness check");          return;        }      }      success=true;      reportSuccess(this.theFPSet,getStatesGenerated());    } else     if (this.keepCallStack) {      this.tool.setCallStack();      try {        this.doNext(this.predErrState,new ObjLongTable(10),new Worker(4223,this));      } catch (      Throwable e) {        MP.printError(EC.TLC_NESTED_EXPRESSION,this.tool.getCallStack().toString());      }    }  } catch (  Exception e) {    report("TLC terminated with error");    success=false;    MP.printError(EC.GENERAL,e);  } finally {    this.printSummary(success,startTime);    if (this.checkLiveness) {      if (LIVENESS_STATS) {        System.gc();        MP.printStats(liveCheck.calculateInDegreeDiskGraphs(new BucketStatistics("Histogram vertex in-degree",LiveCheck.class.getPackage().getName(),"DiskGraphsInDegree")),liveCheck.getOutDegreeStatistics());      }    }    this.cleanup(success);  }  report("exiting modelCheck()");}  }
class C{  public List<?> findFrom(Value begin,int count) throws AerospikeException {  List<byte[]> digestList=getDigestList();  Key beginKey=makeSubKey(begin);  int start=digestList.indexOf(beginKey.digest);  int stop=start + count;  return get(digestList,start,stop);}  }
class C{  @Override protected DistributionLocatorImpl createDistributionLocatorImpl(DistributionLocatorConfig config){  return new DistributionLocatorJmxImpl(config,this);}  }
class C{  public boolean onReceivedHttpAuthRequest(CordovaWebView view,ICordovaHttpAuthHandler handler,String host,String realm){  return false;}  }
class C{  public boolean canCorrectHardwareClock(){  if (DEBUG_SHOW_PUBLIC_CALLS) {    log.debug("getHardwareClockName");  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:09.887 -0500",hash_original_method="F8EDA6D677CBC73EB8A3A71E43559895",hash_generated_method="8CDC305BF4AC73ACFA7382B000A0CBD5") public boolean match(Object matchObj){  if (!(matchObj instanceof StatusLine))   return false;  StatusLine sl=(StatusLine)matchObj;  if (sl.matchExpression != null)   return sl.matchExpression.match(this.encode());  if (sl.sipVersion != null && !sl.sipVersion.equals(sipVersion))   return false;  if (sl.statusCode != 0) {    if (matchStatusClass) {      int hiscode=sl.statusCode;      String codeString=Integer.toString(sl.statusCode);      String mycode=Integer.toString(statusCode);      if (codeString.charAt(0) != mycode.charAt(0))       return false;    } else {      if (statusCode != sl.statusCode)       return false;    }  }  if (sl.reasonPhrase == null || reasonPhrase == sl.reasonPhrase)   return true;  return reasonPhrase.equals(sl.reasonPhrase);}  }
class C{  void restore(){  System.arraycopy(registerSave,0,register,0,blockSize);}  }
class C{  public boolean field_based(){  return soot.PhaseOptions.getBoolean(options,"field-based");}  }
class C{  public String toString(){  try {    return this.toString(0);  } catch (  Exception e) {    return null;  }}  }
class C{  public Parameter(){}  }
class C{  protected void clearOutEvents(){}  }
class C{  public void suspendEncoding() throws java.io.IOException {  flushBase64();  this.suspendEncoding=true;}  }
class C{  private void mouseEvent(final Point point,final boolean ctrlDown,final boolean rightMouse){  if (!rightMouse && !ctrlDown) {    m_currentCountry=Util.findTerritoryName(point,m_polygons,"there be dragons");    if (m_placements == null || m_placements.get(m_currentCountry) == null) {      m_currentPlacements=new ArrayList<>();    } else {      m_currentPlacements=new ArrayList<>(m_placements.get(m_currentCountry));    }    JOptionPane.showMessageDialog(this,m_currentCountry);  } else   if (!rightMouse && ctrlDown) {    if (m_currentPlacements != null) {      m_currentPlacements.add(point);    }  } else   if (rightMouse && ctrlDown) {    if (m_currentPlacements != null) {      if (m_placements == null) {        m_placements=new HashMap<>();      }      m_placements.put(m_currentCountry,m_currentPlacements);      m_currentPlacements=new ArrayList<>();      System.out.println("done:" + m_currentCountry);    }  } else   if (rightMouse) {    if (m_currentPlacements != null && !m_currentPlacements.isEmpty()) {      m_currentPlacements.remove(m_currentPlacements.size() - 1);    }  }  repaint();}  }
class C{  @RequestMapping(value={"/",""},method=RequestMethod.POST) @ResponseBody public RestWrapper update(@ModelAttribute("file") @Valid File file,BindingResult bindingResult,Principal principal){  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    file.setCreationTS(DateConverter.stringToDate(file.getTableCreationTS()));    fileDAO.update(file);    restWrapper=new RestWrapper(file,RestWrapper.OK);    LOGGER.info("Record with ID:" + file.getBatchId() + " updated in File by User:"+ principal.getName()+ file);  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public static int longLo32(long lVal){  return (int)lVal;}  }
class C{  public static Settings init(){  return printer.init(DEFAULT_TAG);}  }
class C{  public static Graph randomGraphUniform(int numNodes,int numLatentConfounders,int maxNumEdges,int maxDegree,int maxIndegree,int maxOutdegree,boolean connected){  List<Node> nodes=new ArrayList<>();  for (int i=0; i < numNodes; i++) {    nodes.add(new GraphNode("X" + (i + 1)));  }  return randomGraphUniform(nodes,numLatentConfounders,maxNumEdges,maxDegree,maxIndegree,maxOutdegree,connected);}  }
class C{  public MetacatException(String message,int status,Throwable cause){  this(Response.status(status).type(MediaType.APPLICATION_JSON_TYPE).entity(metacatJson.emptyObjectNode().put("error",message)).build(),cause == null ? new Exception(message) : cause);}  }
class C{  public static boolean CS_CSC(Dcs A){  return (A != null && (A.nz == -1));}  }
class C{  public static final int calculateTotalVirtualUsers(Collection<? extends RegionRequest> jobRegions){  int result=0;  for (  RegionRequest region : jobRegions) {    result+=JobUtil.parseUserString(region.getUsers());  }  return result;}  }
class C{  public Builder user(final User user){  this.user=user;  return this;}  }
class C{  public static boolean isPassableBlock(World worldObj,int ix,int iy,int iz){  return !worldObj.getBlockState(new BlockPos(ix,iy,iz)).getBlock().getMaterial().isSolid();}  }
class C{  public void handleError(ImsServiceError error){  if (isSessionInterrupted()) {    return;  }  if (sLogger.isActivated()) {    sLogger.info(new StringBuilder("Transfer error: ").append(error.getErrorCode()).append(", reason=").append(error.getMessage()).toString());  }  closeMediaSession();  removeSession();  ContactId contact=getRemoteContact();  for (  ImsSessionListener listener : getListeners()) {    ((GeolocTransferSessionListener)listener).onSharingError(contact,new ContentSharingError(error));  }}  }
class C{  public Map<String,String> convertDataToStrings(Map<String,Object> data){  Map<String,String> results=new HashMap<>();  if (data != null) {    for (    String key : data.keySet()) {      Object object=data.get(key);      if (object instanceof WebAuthenticationDetails) {        WebAuthenticationDetails authenticationDetails=(WebAuthenticationDetails)object;        results.put("remoteAddress",authenticationDetails.getRemoteAddress());        results.put("sessionId",authenticationDetails.getSessionId());      } else {        results.put(key,object.toString());      }    }  }  return results;}  }
class C{  public int refresh(){  log.fine("start");  m_loader=new Loader();  m_loader.start();  try {    m_loader.join();  } catch (  InterruptedException ie) {  }  log.info("#" + m_lookup.size());  return m_lookup.size();}  }
class C{  @Override public boolean connectionAllowed(EventSetDescriptor esd){  return connectionAllowed(esd.getName());}  }
class C{  public static void convertPointFromScreen(Point p,Component c){  Rectangle b;  int x, y;  do {    if (c instanceof JComponent) {      x=c.getX();      y=c.getY();    } else     if (c instanceof java.applet.Applet || c instanceof java.awt.Window) {      try {        Point pp=c.getLocationOnScreen();        x=pp.x;        y=pp.y;      } catch (      IllegalComponentStateException icse) {        x=c.getX();        y=c.getY();      }    } else {      x=c.getX();      y=c.getY();    }    p.x-=x;    p.y-=y;    if (c instanceof java.awt.Window || c instanceof java.applet.Applet)     break;    c=c.getParent();  } while (c != null);}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener pcl){  m_pcSupport.addPropertyChangeListener(pcl);}  }
class C{  public boolean isAddressedModePossible(){  return true;}  }
class C{  @DSComment("OpenGL Utils") @DSSafe(DSCat.GRAPHICS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:09.466 -0500",hash_original_method="F6FE0C69971F26CF832691677B050FE2",hash_generated_method="2161DDDE7E6B631F673E5960EC2F3860") public static void texSubImage2D(int target,int level,int xoffset,int yoffset,Bitmap bitmap,int format,int type){  if (bitmap == null) {    throw new NullPointerException("texSubImage2D can't be used with a null Bitmap");  }  if (bitmap.isRecycled()) {    throw new IllegalArgumentException("bitmap is recycled");  }  if (native_texSubImage2D(target,level,xoffset,yoffset,bitmap,format,type) != 0) {    throw new IllegalArgumentException("invalid Bitmap format");  }}  }
class C{  public void render(java.awt.Graphics graphics){  Debug.message("eomgdetail","EditableOMPoint.render()");  if (point == null) {    Debug.message("eomg","EditableOMPoint.render: null point.");    return;  }  State state=getStateMachine().getState();  if (!(state instanceof GraphicUndefinedState)) {    point.setVisible(true);    point.render(graphics);    point.setVisible(false);    int renderType=point.getRenderType();    if (state instanceof GraphicSelectedState || state instanceof GraphicEditState) {      for (int i=0; i < gPoints.length; i++) {        GrabPoint gp=gPoints[i];        if (gp != null) {          if ((i == OFFSET_POINT_INDEX && renderType == OMGraphic.RENDERTYPE_OFFSET && movingPoint == gpo) || (state instanceof GraphicSelectedState && ((i != OFFSET_POINT_INDEX && renderType != OMGraphic.RENDERTYPE_OFFSET) || (renderType == OMGraphic.RENDERTYPE_OFFSET)))) {            gp.setVisible(true);            gp.render(graphics);            gp.setVisible(false);          }        }      }    }  }}  }
class C{  public void dragMouseMoved(DragSourceDragEvent dsde){  getDragSource().processDragMouseMoved(dsde);}  }
class C{  @Inline public void initializeHeader(ObjectReference object,boolean alloc){  byte oldValue=VM.objectModel.readAvailableByte(object);  byte newValue=(byte)((oldValue & ~LOS_BIT_MASK) | markState);  if (alloc)   newValue|=NURSERY_BIT;  if (HeaderByte.NEEDS_UNLOGGED_BIT)   newValue|=HeaderByte.UNLOGGED_BIT;  VM.objectModel.writeAvailableByte(object,newValue);  Address cell=VM.objectModel.objectStartRef(object);  treadmill.addToTreadmill(Treadmill.midPayloadToNode(cell),alloc);}  }
class C{  @Override public boolean hasStableIds(){  return false;}  }
class C{  private void updateFreq() throws IOException {  assert freq >= minShouldMatch;  for (int i=tailSize - 1; i >= 0; --i) {    advanceTail(tail[i]);  }  tailSize=0;}  }
class C{  @SuppressWarnings("unchecked") protected E derive(Object object){  return (E)object;}  }
class C{  public void runTest() throws Throwable {  String localName="newAttr";  String namespaceURI="http://www.newattr.com";  String qualifiedName="emp:newAttr";  Document doc;  NodeList elementList;  Node testAddr;  Attr addrAttr;  String resultAttr;  String resultNamespaceURI;  String resultLocalName;  String resultPrefix;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("emp:address");  testAddr=elementList.item(0);  assertNotNull("empAddrNotNull",testAddr);  ((Element)testAddr).setAttributeNS(namespaceURI,qualifiedName,"newValue");  addrAttr=((Element)testAddr).getAttributeNodeNS(namespaceURI,localName);  resultAttr=((Element)testAddr).getAttributeNS(namespaceURI,localName);  assertEquals("attrValue","newValue",resultAttr);  resultNamespaceURI=addrAttr.getNamespaceURI();  assertEquals("nsuri","http://www.newattr.com",resultNamespaceURI);  resultLocalName=addrAttr.getLocalName();  assertEquals("lname","newAttr",resultLocalName);  resultPrefix=addrAttr.getPrefix();  assertEquals("prefix","emp",resultPrefix);}  }
class C{  private boolean heyThatsTooClose(Point2D p,Point2D q,double min){  return Math.abs(p.getX() - q.getX()) < min && Math.abs(p.getY() - q.getY()) < min;}  }
class C{  @Override public ResultSet executeQuery() throws SQLException {  try {    int id=getNextId(TraceObject.RESULT_SET);    if (isDebugEnabled()) {      debugCodeAssign("ResultSet",TraceObject.RESULT_SET,id,"executeQuery()");    }synchronized (session) {      checkClosed();      closeOldResultSet();      ResultInterface result;      boolean scrollable=resultSetType != ResultSet.TYPE_FORWARD_ONLY;      boolean updatable=resultSetConcurrency == ResultSet.CONCUR_UPDATABLE;      try {        setExecutingStatement(command);        result=command.executeQuery(maxRows,scrollable);      }  finally {        setExecutingStatement(null);      }      resultSet=new JdbcResultSet(conn,this,result,id,closedByResultSet,scrollable,updatable,cachedColumnLabelMap);    }    return resultSet;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public boolean eventGeneratable(EventSetDescriptor esd){  String eventName=esd.getName();  return eventGeneratable(eventName);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.TRACE_ENTITY___TRACE_OPTIONS_1:    getTraceOptions_1().clear();  return;case UmplePackage.TRACE_ENTITY___TRACE_ENTITY_1:setTrace_entity_1(TRACE_ENTITY_1_EDEFAULT);return;case UmplePackage.TRACE_ENTITY___ANONYMOUS_TRACE_ENTITY_11:getAnonymous_traceEntity_1_1().clear();return;}super.eUnset(featureID);}  }
class C{  static boolean equals(CharSequence a,CharSequence b){  if (a == b)   return true;  if (a != null && b != null) {    int length=a.length();    if (length == b.length()) {      if (a instanceof String && b instanceof String) {        return a.equals(b);      } else {        for (int i=0; i < length; i++) {          if (a.charAt(i) != b.charAt(i))           return false;        }        return true;      }    }  }  return false;}  }
class C{  public boolean init(){  return init(null,false);}  }
class C{  public static <T>Set<T> toSet(Iterator<T> self){  Set<T> answer=new HashSet<T>();  while (self.hasNext()) {    answer.add(self.next());  }  return answer;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("AD_Org_ID"))     p_AD_Org_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("M_Warehouse_ID"))     p_M_Warehouse_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("M_DistributionList_ID"))     p_M_DistributionList_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("DatePromised")) {      p_DatePromised=(Timestamp)para[i].getParameter();    } else     if (name.equals("ConsolidateDocument"))     p_ConsolidateDocument=(String)para[i].getParameter(); else     if (name.equals("IsRequiredDRP"))     p_BasedInDamnd=(String)para[i].getParameter(); else     if (name.equals("IsTest"))     p_IsTest=(String)para[i].getParameter(); else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }}  }
class C{  public boolean hasEnough(FluidStack stack){  if (!hasMatching(stack))   return false;  final FluidStack s=get();  if (s.amount >= stack.amount) {    return true;  }  return false;}  }
class C{  protected void updateMargins(double[] predictedDistribution,int actualClass,double weight){  double probActual=predictedDistribution[actualClass];  double probNext=0;  for (int i=0; i < m_NumClasses; i++) {    if ((i != actualClass) && (predictedDistribution[i] > probNext)) {      probNext=predictedDistribution[i];    }  }  double margin=probActual - probNext;  int bin=(int)((margin + 1.0) / 2.0 * k_MarginResolution);  m_MarginCounts[bin]+=weight;}  }
class C{  protected void paintText(Graphics g,JMenuItem menuItem,Rectangle textRect,String text){  if (WindowsMenuItemUI.isVistaPainting()) {    WindowsMenuItemUI.paintText(accessor,g,menuItem,textRect,text);    return;  }  JMenu menu=(JMenu)menuItem;  ButtonModel model=menuItem.getModel();  Color oldColor=g.getColor();  boolean paintRollover=model.isRollover();  if (paintRollover && menu.isTopLevelMenu()) {    MenuElement[] menus=((JMenuBar)menu.getParent()).getSubElements();    for (int i=0; i < menus.length; i++) {      if (((JMenuItem)menus[i]).isSelected()) {        paintRollover=false;        break;      }    }  }  if ((model.isSelected() && (WindowsLookAndFeel.isClassicWindows() || !menu.isTopLevelMenu())) || (XPStyle.getXP() != null && (paintRollover || model.isArmed() || model.isSelected()))) {    g.setColor(selectionForeground);  }  WindowsGraphicsUtils.paintText(g,menuItem,textRect,text,0);  g.setColor(oldColor);}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:28.199 -0500",hash_original_method="360E1B00872B2424D301125F3BB142C6",hash_generated_method="6CE6B367989B93B9BB247196E863E8E9") public boolean isOpened(String localProfileUri) throws SipException {  try {    return mSipService.isOpened(localProfileUri);  } catch (  RemoteException e) {    throw new SipException("isOpened()",e);  }}  }
class C{  public Collection<HdfsSensitivityEntity> filterSensitivity(String site,String resourceFilter){  Collection<HdfsSensitivityEntity> list=dao.listHdfsSensitivities();  if (list == null)   return Collections.emptyList();  return list;}  }
class C{  public Uri finishPlaceholder(Placeholder placeholder,Location location,int orientation,ExifInterface exif,byte[] jpeg,int width,int height,String mimeType) throws IOException {  Uri resultUri=Storage.updateImage(placeholder.outputUri,mContext.getContentResolver(),placeholder.outputTitle,placeholder.time,location,orientation,exif,jpeg,width,height,mimeType);  CameraUtil.broadcastNewPicture(mContext,resultUri);  return resultUri;}  }
class C{  public void onHover(HoverEvent event,Interaction iact){}  }
class C{  @Override public Document build(Reader stream) throws ParsingException, ValidityException, IOException {  return build(new InputSource(stream));}  }
class C{  private String generateMaskedLine(String currentLine){  boolean gotLine;  String outline;  for (  LinuxSyslogLineParser lineParser : mLineParsers) {    gotLine=lineParser.parseLine(currentLine);    if (gotLine) {      String oldSystemName=lineParser.getSource();      String oldText=lineParser.getMessageBody();      return createNewLine(currentLine,oldSystemName,oldText);    }  }  outline=currentLine;  return outline;}  }
class C{  private synchronized void updateOrResetReqRspAvgLstHr(float avg,boolean reset){  updateOrResetSampledValues(avg,reset,_reqRspPerMinHr);}  }
class C{  public String markdown(String txt){  if (txt == null) {    txt="";  }  TextEditor text=new TextEditor(txt);  text.replaceAll("\\r\\n","\n");  text.replaceAll("\\r","\n");  text.replaceAll("^[ \\t]+$","");  text.append("\n\n");  text.detabify();  text.deleteAll("^[ ]+$");  hashHTMLBlocks(text);  stripLinkDefinitions(text);  text=runBlockGamut(text);  unEscapeSpecialChars(text);  text.append("\n");  return text.toString();}  }
class C{  @Override public Object dataAccessObjectProcess(ProceedingJoinPoint pjp) throws AuthorityException, ServiceException, Throwable {  return pjp.proceed();}  }
class C{  public String name(){  return name;}  }
class C{  public boolean toActive(){  LifecycleState state;synchronized (this) {    state=_state;    if (state.isAfterActive() && !state.isStopped()) {      return false;    }    _state=ACTIVE;    _lastChangeTime=CurrentTime.currentTime();  }  if (_log != null && _log.isLoggable(_level))   _log.log(_level,"active " + _name);  notifyListeners(state,ACTIVE);  return true;}  }
class C{  public MessageSummaryImpl(int messageID,Severity severity){  m_messageInternalId=messageID;  m_instanceCount=0;  m_instanceCountFailed=0;  m_severity=severity;}  }
class C{  public void showNotificationDefaultSound(String title,String subtitle,int icon,Intent resultIntent){  Uri soundUri=RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);  PendingIntent pendingResultIntent=PendingIntent.getActivity(mContext,0,resultIntent,PendingIntent.FLAG_CANCEL_CURRENT);  Notification mBuilder=new NotificationCompat.Builder(mContext).setContentTitle(title).setContentText(subtitle).setSmallIcon(icon).setContentIntent(pendingResultIntent).setSound(soundUri).setAutoCancel(true).build();  NotificationManagerCompat mNotifyMgr=NotificationManagerCompat.from(mContext);  mNotifyMgr.cancelAll();  mNotifyMgr.notify(0,mBuilder);}  }
class C{  public ThumbnailParameterBuilder imageType(int type){  imageType=type;  return this;}  }
class C{  public static VectorClock increment(VectorClock clock,int... nodes){  for (  int n : nodes)   clock=clock.incremented((short)n,System.currentTimeMillis());  return clock;}  }
class C{  public UserPrincipalNotFoundException(String name){  super();  this.name=name;}  }
class C{  public boolean isExecutorShutdown(){  return isExecutorShutdown;}  }
class C{  public boolean containsKey(Object key){  int hashCode=hash((key == null) ? NULL : key);  HashEntry entry=data[hashIndex(hashCode,data.length)];  while (entry != null) {    if (entry.hashCode == hashCode && isEqualKey(key,entry.getKey())) {      return true;    }    entry=entry.next;  }  return false;}  }
class C{  public ProgressLogger(final Logger logger,final long logInterval,final String itemsName){  this.logger=logger;  this.logInterval=logInterval;  this.itemsName=itemsName;  this.expectedUpdates=-1;}  }
class C{  public static void printToFile(String filename,String message){  printToFile(new File(filename),message,false);}  }
class C{  public static boolean intersectRectangles(Rectangle a,Rectangle b){  return !(a.getX() > b.getX() + b.getWidth() || a.getX() + a.getWidth() < b.getX() || a.getY() > b.getY() + b.getHeight() || a.getY() + a.getHeight() < b.getY());}  }
class C{  public boolean isDependencySatisfied(Set<String> receivedEvents){  return receivedEvents.containsAll(this.dependencies);}  }
class C{  public static void displaySortedNumbers(double num1,double num2,double num3){  double temp;  if (num2 < num1 && num2 < num3) {    temp=num1;    num1=num2;    num2=temp;  } else   if (num3 < num1 && num3 < num2) {    temp=num1;    num1=num3;    num3=temp;  }  if (num3 < num2) {    temp=num2;    num2=num3;    num3=temp;  }  System.out.println(num1 + " " + num2+ " "+ num3);}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level3.core.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DOMTestDocumentBuilderFactory factory=new LSDocumentBuilderFactory(JAXPDOMTestDocumentBuilderFactory.getConfiguration2());  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public GenericoBean(){}  }
class C{  private static VirtualNetworkService.State createVirtualNetworkDocumentInCloudStore(TestEnvironment testEnvironment) throws Throwable {  VirtualNetworkService.State virtualNetwork=new VirtualNetworkService.State();  virtualNetwork.name="virtual_network_name";  virtualNetwork.state=SubnetState.CREATING;  virtualNetwork.routingType=RoutingType.ROUTED;  virtualNetwork.parentId="parentId";  virtualNetwork.parentKind="parentKind";  virtualNetwork.tier0RouterId="logical_tier0_router_id";  virtualNetwork.logicalRouterId="logical_tier1_router_id";  virtualNetwork.logicalSwitchId="logical_switch_id";  Operation result=testEnvironment.sendPostAndWait(VirtualNetworkService.FACTORY_LINK,virtualNetwork);  assertThat(result.getStatusCode(),is(Operation.STATUS_CODE_OK));  VirtualNetworkService.State createdState=result.getBody(VirtualNetworkService.State.class);  VirtualNetworkService.State patchState=new VirtualNetworkService.State();  patchState.state=SubnetState.READY;  result=testEnvironment.sendPatchAndWait(createdState.documentSelfLink,patchState);  assertThat(result.getStatusCode(),is(Operation.STATUS_CODE_OK));  return result.getBody(VirtualNetworkService.State.class);}  }
class C{  public void updated(){  currentColor=HtmlColors.decode(getSettingValue());  secondaryColor=HtmlColors.decode(baseColor);  Color foregroundColor;  Color backgroundColor;  if (type == FOREGROUND) {    foregroundColor=currentColor;    backgroundColor=secondaryColor;  } else {    foregroundColor=secondaryColor;    backgroundColor=currentColor;  }  preview.setForeground(foregroundColor);  preview.setBackground(backgroundColor);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  @DSComment("Data structure/no action") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:52.095 -0500",hash_original_method="0FDD4277FFE3E2F2D99D4BAB0780A409",hash_generated_method="04AA46A4E4C0F0C192EB028637BC5E4B") public void recycle(){  if (mIsInPool) {    throw new IllegalStateException("Record already recycled!");  }  clear();synchronized (sPoolLock) {    if (sPoolSize <= MAX_POOL_SIZE) {      mNext=sPool;      sPool=this;      mIsInPool=true;      sPoolSize++;    }  }}  }
class C{  public static boolean parsePrintHandle(PsiBuilder b,int l){  IElementType currentTokenType=b.getTokenType();  assert b instanceof PerlBuilder;  if (CONVERTABLE_TOKENS.contains(currentTokenType) && !printHandleNegation(b,l) && !PerlSubUtil.BUILT_IN.contains(b.getTokenText())) {    PsiBuilder.Marker m=b.mark();    b.advanceLexer();    m.collapse(HANDLE);    return true;  }  return false;}  }
class C{  public ArcX4(Classifier weakLearner,int iterations){  setWeakLearner(weakLearner);  setIterations(iterations);}  }
class C{  public static void sendMail(Context context,String mailtoid,String subject,String body){  Intent emailIntent=new Intent(Intent.ACTION_SENDTO,Uri.fromParts("mailto",mailtoid,null));  emailIntent.putExtra(Intent.EXTRA_SUBJECT,subject);  emailIntent.putExtra(Intent.EXTRA_TEXT,body);  context.startActivity(Intent.createChooser(emailIntent,"Send email"));}  }
class C{  public static MockRelay relay(){  return new MockRelay();}  }
class C{  static final LogWriterAppender create(final AppenderContext[] contexts,final String name,final PureLogWriter logWriter,final FileOutputStream fos){  LogWriterAppender appender=new LogWriterAppender(contexts,name,logWriter,fos);  for (  AppenderContext context : appender.appenderContexts) {    context.getLoggerContext().addPropertyChangeListener(appender);  }  appender.start();  for (  AppenderContext context : appender.appenderContexts) {    context.getLoggerConfig().addAppender(appender,Level.ALL,null);  }  return appender;}  }
class C{  public static Test suite(){  return (new TestSuite(ResourceDependencyComponentITCase.class));}  }
class C{  public boolean calculateTaxFromLines(){  BigDecimal taxBaseAmt=Env.ZERO;  BigDecimal taxAmt=Env.ZERO;  boolean documentLevel=getTax().isDocumentLevel();  MTax tax=getTax();  String sql="SELECT il.LineNetAmt, COALESCE(il.TaxAmt,0), i.IsSOTrx " + "FROM C_InvoiceLine il" + " INNER JOIN C_Invoice i ON (il.C_Invoice_ID=i.C_Invoice_ID) "+ "WHERE il.C_Invoice_ID=? AND il.C_Tax_ID=?";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,get_TrxName());    pstmt.setInt(1,getC_Invoice_ID());    pstmt.setInt(2,getC_Tax_ID());    rs=pstmt.executeQuery();    while (rs.next()) {      BigDecimal baseAmt=rs.getBigDecimal(1);      taxBaseAmt=taxBaseAmt.add(baseAmt);      BigDecimal amt=rs.getBigDecimal(2);      if (amt == null)       amt=Env.ZERO;      boolean isSOTrx="Y".equals(rs.getString(3));      if (!documentLevel && amt.signum() != 0 && !isSOTrx)       ; else       if (documentLevel || baseAmt.signum() == 0)       amt=Env.ZERO; else       amt=tax.calculateTax(baseAmt,isTaxIncluded(),getPrecision());      taxAmt=taxAmt.add(amt);    }  } catch (  SQLException e) {    throw new DBException(e,sql);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (documentLevel || taxAmt.signum() == 0)   taxAmt=tax.calculateTax(taxBaseAmt,isTaxIncluded(),getPrecision());  setTaxAmt(taxAmt);  if (isTaxIncluded())   setTaxBaseAmt(taxBaseAmt.subtract(taxAmt)); else   setTaxBaseAmt(taxBaseAmt);  return true;}  }
class C{  public static TupleExpr process(TupleExpr query,List<ExternalTupleSet> indexSet){  boolean indexPlaced=false;  TupleExpr rtn=query.clone();  QueryNodeCount qnc=new QueryNodeCount();  rtn.visit(qnc);  if (qnc.getNodeCount() / 2 < indexSet.size()) {    return null;  }  organizeBSAs(rtn);  if (isTupleValid(rtn)) {    for (    ExternalTupleSet index : indexSet) {      if (isTupleValid(index.getTupleExpr())) {        ExternalTupleSet eTup=(ExternalTupleSet)index.clone();        SPBubbleDownVisitor indexVistor=new SPBubbleDownVisitor(eTup);        rtn.visit(indexVistor);        FilterBubbleManager fbmv=new FilterBubbleManager(eTup);        rtn.visit(fbmv);        SubsetEqualsVisitor subIndexVis=new SubsetEqualsVisitor(eTup,rtn);        rtn.visit(subIndexVis);        indexPlaced=subIndexVis.indexPlaced();        if (!indexPlaced) {          break;        }      }    }    if (indexPlaced) {      return rtn;    } else {      return null;    }  } else {    throw new IllegalArgumentException("Invalid Query.");  }}  }
class C{  public Builder play(Animator anim){  if (anim != null) {    mNeedsSort=true;    return new Builder(anim);  }  return null;}  }
class C{  public void test_18() throws Exception {  final String namespace="test" + UUID.randomUUID();  final BigdataSailRepositoryConnection cxn=prepareTest(namespace,true,true);  insertSparql(cxn);  BigdataValueFactory vf=cxn.getValueFactory();  BigdataValue[] values=new BigdataValue[]{vf.createURI("http://s"),vf.createLiteral("1",XMLSchema.INTEGER),vf.createLiteral(2),vf.createLiteral("3.0",XMLSchema.DECIMAL),vf.createLiteral(4.0),vf.createLiteral(true),vf.createLiteral(false),vf.createLiteral("plain string"),vf.createLiteral("datatyped string",XMLSchema.STRING),vf.createLiteral("english string","en")};  cxn.getTripleStore().getLexiconRelation().addTerms(values,values.length,true);  assertTrue(values[0].getIV().isInline());  assertTrue(values[1].getIV().isInline());  assertTrue(values[2].getIV().isInline());  assertTrue(values[3].getIV().isInline());  assertTrue(values[4].getIV().isInline());  assertTrue(values[5].getIV().isInline());  assertTrue(values[6].getIV().isInline());  assertTrue(values[7].getIV().isInline());  assertTrue(values[8].getIV().isInline());  assertTrue(values[9].getIV().isInline());  endTest(cxn);}  }
class C{  String remapGenericMimeType(String mimeType,String url,String contentDisposition){  if ("text/plain".equals(mimeType) || "application/octet-stream".equals(mimeType)) {    String filename=null;    if (contentDisposition != null) {      filename=URLUtil.parseContentDisposition(contentDisposition);    }    if (filename != null) {      url=filename;    }    String extension=getFileExtensionFromUrl(url);    String newMimeType=getMimeTypeFromExtension(extension);    if (newMimeType != null) {      mimeType=newMimeType;    }  } else   if ("text/vnd.wap.wml".equals(mimeType)) {    mimeType="text/plain";  } else {    if ("application/vnd.wap.xhtml+xml".equals(mimeType)) {      mimeType="application/xhtml+xml";    }  }  return mimeType;}  }
class C{  @Override public void updateTask(){  this.thePet.getLookHelper().setLookPositionWithEntity(this.theOwner,10.0F,this.thePet.getVerticalFaceSpeed());  if (--this.timeToRecalcPath <= 0) {    this.timeToRecalcPath=10;    if (!this.petPathfinder.tryMoveToEntityLiving(this.theOwner,this.followSpeed)) {      if (!this.thePet.getLeashed()) {        if (this.thePet.getDistanceSqToEntity(this.theOwner) >= 144.0D) {          int i=MathHelper.floor_double(this.theOwner.posX) - 2;          int j=MathHelper.floor_double(this.theOwner.posZ) - 2;          int k=MathHelper.floor_double(this.theOwner.getEntityBoundingBox().minY);          for (int l=0; l <= 4; ++l) {            for (int i1=0; i1 <= 4; ++i1) {              if ((l < 1 || i1 < 1 || l > 3 || i1 > 3) && this.theWorld.getBlockState(new BlockPos(i + l,k - 1,j + i1)).isFullyOpaque() && this.isEmptyBlock(new BlockPos(i + l,k,j + i1))&& this.isEmptyBlock(new BlockPos(i + l,k + 1,j + i1))) {                this.thePet.setLocationAndAngles(i + l + 0.5F,k,j + i1 + 0.5F,this.thePet.rotationYaw,this.thePet.rotationPitch);                this.petPathfinder.clearPathEntity();                return;              }            }          }        }      }    }  }}  }
class C{  public CModulesTable(final JTree projectTree,final IDatabase database){  super(projectTree,new CModulesModel(database),new CModulesTableHelp());  m_database=Preconditions.checkNotNull(database,"IE02870: database argument can not be null");  setDefaultRenderer(Object.class,new ModuleLoadedRenderer());  getColumnModel().getColumn(1).setCellRenderer(new CNameRenderer());  getColumnModel().getColumn(0).setResizable(false);  getColumnModel().getColumn(0).setPreferredWidth(50);  getColumnModel().getColumn(0).setMaxWidth(50);  if (!GraphicsEnvironment.isHeadless()) {    setDragEnabled(true);  }  setTransferHandler(new CModuleDragHandler(this));  final InputMap windowImap=getInputMap(JComponent.WHEN_FOCUSED);  windowImap.put(HotKeys.LOAD_HK.getKeyStroke(),"LoadKeyStroke");  getActionMap().put("LoadKeyStroke",CActionProxy.proxy(new LoadModuleAction()));}  }
class C{  public void dumpStateToLogs(){  StringBuilder message=new StringBuilder("Resource: ").append(resourceName).append(" inflight transaction count: ").append(counter.get());  if (0 == becameBusyAt) {    Log.i(TAG,message.append(" and has never been busy!").toString());  } else {    message.append(" and was last busy at: ").append(becameBusyAt);    if (0 == becameIdleAt) {      Log.w(TAG,message.append(" AND NEVER WENT IDLE!").toString());    } else {      message.append(" and last went idle at: ").append(becameIdleAt);      Log.i(TAG,message.toString());    }  }}  }
class C{  private void processSuspectMembersRequest(SuspectMembersMessage incomingRequest){  this.stats.incSuspectsReceived();  NetView cv=currentView;  if (cv == null) {    return;  }  List<SuspectRequest> sMembers=incomingRequest.getMembers();  InternalDistributedMember sender=incomingRequest.getSender();  int viewId=sender.getVmViewId();  if (cv.getViewId() >= viewId && !cv.contains(incomingRequest.getSender())) {    logger.info("Membership ignoring suspect request for " + incomingRequest + " from non-member "+ incomingRequest.getSender());    services.getJoinLeave().remove(sender,"this process is initiating suspect processing but is no longer a member");    return;  }  if (!playingDead) {    for (Iterator<SuspectRequest> it=incomingRequest.getMembers().iterator(); it.hasNext(); ) {      SuspectRequest req=it.next();      if (req.getSuspectMember().equals(localAddress)) {        HeartbeatMessage message=new HeartbeatMessage(-1);        message.setRecipient(sender);        try {          services.getMessenger().send(message);          this.stats.incHeartbeatsSent();          it.remove();        } catch (        CancelException e) {          return;        }      }    }  }  if (cv.getCoordinator().equals(localAddress)) {    for (    SuspectRequest req : incomingRequest.getMembers()) {      logger.info("received suspect message from {} for {}: {}",sender,req.getSuspectMember(),req.getReason());    }    checkIfAvailable(sender,sMembers,cv);  } else {    NetView check=new NetView(cv,cv.getViewId() + 1);    ArrayList<SuspectRequest> smbr=new ArrayList<>();synchronized (viewVsSuspectedMembers) {      recordSuspectRequests(sMembers,cv);      Set<SuspectRequest> viewVsMembers=viewVsSuspectedMembers.get(cv);      for (      final SuspectRequest sr : viewVsMembers) {        check.remove(sr.getSuspectMember());        smbr.add(sr);      }    }    InternalDistributedMember coordinator=check.getCoordinator();    if (coordinator != null && coordinator.equals(localAddress)) {      for (      SuspectRequest req : incomingRequest.getMembers()) {        logger.info("received suspect message from {} for {}: {}",sender,req.getSuspectMember(),req.getReason());      }      checkIfAvailable(sender,smbr,cv);    } else {      recordSuspectRequests(sMembers,cv);    }  }}  }
class C{  public Subnet resolveSubnet(String subnetString) throws APPlatformException {  DescribeSubnetsRequest request=new DescribeSubnetsRequest();  DescribeSubnetsResult result=getEC2().describeSubnets(request.withSubnetIds(subnetString));  List<Subnet> subnets=result.getSubnets();  if (!subnets.isEmpty()) {    LOGGER.debug(" number of subnets found: " + subnets.size());    for (    Subnet subnet : subnets) {      LOGGER.debug("return subnet with id " + subnet.getSubnetId());      return subnet;    }  }  throw new APPlatformException(Messages.getAll("error_invalid_subnet_id") + subnetString);}  }
class C{  public String findIP(String macAddress) throws Throwable {  String ipAddress="";  try (BufferedReader br=new BufferedReader(new FileReader(dhcpLeaseFilePath))){    String line;    while ((line=br.readLine()) != null) {      String[] leaseInfo=line.split("\\s+");      if (leaseInfo[1].equalsIgnoreCase(macAddress)) {        return leaseInfo[2];      }    }  }   return ipAddress;}  }
class C{  @SuppressWarnings("static-access") private void resetHost(boolean isSource,String newHost){  String host=null;  if (isSource) {    if (newHost == null) {      host=s_parameters.getSourceHost();    } else     if (newHost.length() == 0) {      host=m_sourceHost.getText();      ;    } else {      host=newHost;    }    m_sourceHost.setText(host);    m_sourceHostOld=host;  } else {    if (newHost == null) {      host=s_parameters.getTargetHost();    } else     if (newHost.length() == 0) {      host=m_targetHost.getText();    } else {      host=newHost;    }    m_targetHost.setText(host);    m_targetHostOld=host;  }}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (!success)   return success;  reIndex(newRecord);  return success;}  }
class C{  public void update(final long key,final U value){  update(new long[]{key},value);}  }
class C{  public void testClassWithUniqueFullMethodNames(){  doTest();}  }
class C{  @Override protected void parseURL(URL url,String spec,int start,int end){  if (end < start) {    return;  }  String parseString="";  if (start < end) {    parseString=spec.substring(start,end).replace('\\','/');  }  super.parseURL(url,parseString,0,parseString.length());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdataindexsizeerrsubstringoffsetgreater.class,args);}  }
class C{  public int selectPivotIndex(Comparable<?>[] ar,int left,int right){  int v=val;  compute();  return left + v % (right - left + 1);}  }
class C{  @Override public Request<Log> log(ProjectReference projectReference,LogRequest logRequest){  final Invocation request=getWebTarget().path(projectReference.workspaceId()).path("log").queryParam("projectPath",projectReference.name()).request().accept(APPLICATION_JSON).buildPost(json(logRequest));  return new SimpleRequest<Log>(request,DefaultLog.class,getAuthenticationManager());}  }
class C{  public boolean isInside(double lat,double lon){  return lat >= latMin && lat <= latMax && lon >= lonMin && lon <= lonMax;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public void test3(){  final JPanel panel=new JPanel(new GridLayoutManager(2,3,new Insets(0,0,0,0),7,0));  final JButton btn1=new JButton();  btn1.setPreferredSize(new Dimension(100,20));  final JButton btn2=new JButton();  btn2.setPreferredSize(new Dimension(100,20));  final JButton btn3=new JButton();  btn3.setPreferredSize(new Dimension(100,20));  final JButton btn4=new JButton();  btn4.setPreferredSize(new Dimension(100,20));  panel.add(btn1,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  panel.add(btn2,new GridConstraints(0,1,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  panel.add(btn3,new GridConstraints(1,0,1,2,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  panel.add(btn4,new GridConstraints(0,2,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  final Dimension preferredSize=panel.getPreferredSize();  assertEquals(314,preferredSize.width);  panel.setSize(panel.getPreferredSize());  panel.doLayout();}  }
class C{  public T caseFullMemberReference(FullMemberReference object){  return null;}  }
class C{  public static void main(String[] argv){  runFilter(new NominalToBinary(),argv);}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  doReadObject(in);}  }
class C{  public MunitionMutator addTechLevel(int year,int tl){  techLevel.put(year,tl);  return this;}  }
class C{  private CMain(){}  }
class C{  protected int skipLine(int c) throws IOException {  while (c != -1 && c != '\r' && c != '\n') {    c=reader.read();  }  if (c == '\n') {    c=reader.read();    lineNo++;    reportLocation(lineNo,1);  } else   if (c == '\r') {    c=reader.read();    if (c == '\n') {      c=reader.read();    }    lineNo++;    reportLocation(lineNo,1);  }  return c;}  }
class C{  private void endTag(){  lib.setTag(tag);  insideTag=false;}  }
class C{  protected void verifyRecordBuffer(int size){  if (recBuf.length < size) {    recBuf=new byte[size];  }}  }
class C{  public static String trimIndent(String line,int indentsToRemove,int tabWidth,int indentWidth){  return IndentManipulation.trimIndent(line,indentsToRemove,tabWidth,indentWidth);}  }
class C{  public String encode(String pString){  return metaphone(pString);}  }
class C{  public static Object stringToObject(Object orb,String str){  ensureAvailable();  return proxy.stringToObject(orb,str);}  }
class C{  public double[] nextDoubleArray(int length){  double[] values=new double[length];  for (int i=0; i < length; i++) {    values[i]=nextDouble();  }  return values;}  }
class C{  @ConstructorProperties({"scaleX","shearY","shearX","scaleY","translateX","translateY"}) public AffineTransform(float m00,float m10,float m01,float m11,float m02,float m12){  this.m00=m00;  this.m10=m10;  this.m01=m01;  this.m11=m11;  this.m02=m02;  this.m12=m12;  updateState();}  }
class C{  void selectType(Environment env,Context ctx,int tm){  type=right.type;}  }
class C{  private void focusFirst(){  if (this.listElement.hasChildNodes()) {    this.listElement.getFirstElementChild().focus();  }}  }
class C{  private ExprKraken parseExpr(){  return parseOrExpr();}  }
class C{  protected final void deserialize(ObjectInputStream ois,Collection<Object> collection) throws IOException, ClassNotFoundException {  int size=ois.readInt();  for (int i=0; i < size; i++) {    collection.add(ois.readObject());  }}  }
class C{  public MetricData(long dataPointsSize,Long minDiff){  this.dataPointsSize=dataPointsSize;  this.minResolutionDataPointsAcrossAllMetrics=minDiff;}  }
class C{  public boolean isDirective(String directive){  if (directives.containsKey(directive))   return true; else   return false;}  }
class C{  public void delete(String name) throws IOException {  if (name.equalsIgnoreCase(ISSUER)) {    names=null;  } else {    throw new IOException("Attribute name not recognized by " + "CertAttrSet:CertificateIssuer");  }  encodeThis();}  }
class C{  protected boolean doMatch(String path,boolean fullMatch,boolean isCaseSensitive){  if (path.startsWith(this.pathSeparator) != pattern.startsWith(this.pathSeparator)) {    return false;  }  String[] pathDirs=tokenizeToStringArray(path,this.pathSeparator);  int pattIdxStart=0;  int pattIdxEnd=pattDirs.length - 1;  int pathIdxStart=0;  int pathIdxEnd=pathDirs.length - 1;  while (pattIdxStart <= pattIdxEnd && pathIdxStart <= pathIdxEnd) {    String patDir=pattDirs[pattIdxStart];    if ("**".equals(patDir)) {      break;    }    if (!matchStrings(patDir,pathDirs[pathIdxStart],isCaseSensitive)) {      return false;    }    pattIdxStart++;    pathIdxStart++;  }  if (pathIdxStart > pathIdxEnd) {    if (pattIdxStart > pattIdxEnd) {      return pattern.endsWith(this.pathSeparator) ? path.endsWith(this.pathSeparator) : !path.endsWith(this.pathSeparator);    }    if (!fullMatch) {      return true;    }    if (pattIdxStart == pattIdxEnd && pattDirs[pattIdxStart].equals("*") && path.endsWith(this.pathSeparator)) {      return true;    }    for (int i=pattIdxStart; i <= pattIdxEnd; i++) {      if (!pattDirs[i].equals("**")) {        return false;      }    }    return true;  } else   if (pattIdxStart > pattIdxEnd) {    return false;  } else   if (!fullMatch && "**".equals(pattDirs[pattIdxStart])) {    return true;  }  while (pattIdxStart <= pattIdxEnd && pathIdxStart <= pathIdxEnd) {    String patDir=pattDirs[pattIdxEnd];    if (patDir.equals("**")) {      break;    }    if (!matchStrings(patDir,pathDirs[pathIdxEnd],isCaseSensitive)) {      return false;    }    pattIdxEnd--;    pathIdxEnd--;  }  if (pathIdxStart > pathIdxEnd) {    for (int i=pattIdxStart; i <= pattIdxEnd; i++) {      if (!pattDirs[i].equals("**")) {        return false;      }    }    return true;  }  while (pattIdxStart != pattIdxEnd && pathIdxStart <= pathIdxEnd) {    int patIdxTmp=-1;    for (int i=pattIdxStart + 1; i <= pattIdxEnd; i++) {      if (pattDirs[i].equals("**")) {        patIdxTmp=i;        break;      }    }    if (patIdxTmp == pattIdxStart + 1) {      pattIdxStart++;      continue;    }    int patLength=patIdxTmp - pattIdxStart - 1;    int strLength=pathIdxEnd - pathIdxStart + 1;    int foundIdx=-1;    strLoop:     for (int i=0; i <= strLength - patLength; i++) {      for (int j=0; j < patLength; j++) {        String subPat=pattDirs[pattIdxStart + j + 1];        String subStr=pathDirs[pathIdxStart + i + j];        if (!matchStrings(subPat,subStr,isCaseSensitive)) {          continue strLoop;        }      }      foundIdx=pathIdxStart + i;      break;    }    if (foundIdx == -1) {      return false;    }    pattIdxStart=patIdxTmp;    pathIdxStart=foundIdx + patLength;  }  for (int i=pattIdxStart; i <= pattIdxEnd; i++) {    if (!pattDirs[i].equals("**")) {      return false;    }  }  return true;}  }
class C{  public MockAccountLookup(final UnknownAccountBehavior unknownAccountBehavior){  this.unknownAccountBehavior=unknownAccountBehavior;}  }
class C{  public boolean hasConnection(){  return mConnection != null;}  }
class C{  public String GetElementText(String xPathExpression){  try {    String result=XPathFactory.newInstance().newXPath().evaluate(xPathExpression,dDoc);    if (StringUtils.isNotEmpty(result)) {      return result;    }    return "";  } catch (  Exception ex) {    LOG.error("Error in handler: " + ex.getMessage(),ex);    return "";  }}  }
class C{  static void appendVmSynonymMessage(String vm1,String vm2){  outBuf=outBuf.append(getLocalizedMessage("java.launcher.opt.hotspot",vm1,vm2));}  }
class C{  public static void save(MSession session,MUser user){  try {    String home=getHomeToken();    String hash=getPasswordHash(session,user);    String script="adempiere.saveUserToken('" + home + "', '"+ hash+ "', '"+ session.getAD_Session_ID()+ "');";    AuScript aus=new AuScript(null,script);    Clients.response("saveUserToken",aus);  } catch (  Exception e) {    log.log(Level.WARNING,e.getLocalizedMessage(),e);  }}  }
class C{  public synchronized void add(String name,long threadId){  if (mFinished) {    throw new IllegalStateException("Marker added to finished log");  }  mMarkers.add(new Marker(name,threadId,SystemClock.elapsedRealtime()));}  }
class C{  public void denyTypes(final String... names){  denyPermission(new ExplicitTypePermission(names));}  }
class C{  private void loadStrategiesFromFileSystem(List<Strategy> strategies){  try {    this.setMessageText(null,false,false,null);    for (    Strategy strategy : strategies) {      String fileNameCode=m_strategyDir + "/" + StrategyRule.PACKAGE.replace('.','/')+ strategy.getClassName()+ ".java";      String fileNameComments=m_strategyDir + "/" + StrategyRule.PACKAGE.replace('.','/')+ strategy.getClassName()+ ".txt";      try {        String content=readFile(fileNameCode);        String comments=readFile(fileNameComments);        if (strategy.getRules().isEmpty()) {          Rule nextRule=new Rule(strategy,1,comments,TradingCalendar.getDateTimeNowMarketTimeZone(),content.getBytes(),TradingCalendar.getDateTimeNowMarketTimeZone());          strategy.add(nextRule);          this.tradePersistentModel.persistAspect(nextRule);        } else {          Integer version=this.tradePersistentModel.findRuleByMaxVersion(strategy);          for (          Rule rule : strategy.getRules()) {            if (rule.getVersion().equals(version)) {              if (null == rule.getRule() && null != content) {                rule.setRule(content.getBytes());                this.tradePersistentModel.persistAspect(rule);              } else {                String ruleDB=new String(rule.getRule());                if (!ruleDB.equals(content)) {                  setMessageText("DB strategy not in sync with file system strategy: " + fileNameCode + " file length: "+ content.length()+ " Strategy "+ rule.getStrategy().getName()+ " length: "+ +ruleDB.length(),true,true,colorRedAttr);                }              }              if (null == rule.getComment() && null != comments) {                rule.setComment(comments);                this.tradePersistentModel.persistAspect(rule);              } else {                String commentsDB=new String(rule.getComment());                if (!commentsDB.equals(comments)) {                  setMessageText("DB strategy not in sync with file system strategy: " + fileNameComments + " file length: "+ comments.length()+ " Strategy "+ rule.getStrategy().getName()+ " length: "+ +commentsDB.length(),true,true,colorRedAttr);                }              }            }          }        }      } catch (      IOException e) {      }catch (      BadLocationException e) {        setMessageText("Could not load rule " + fileNameCode,true,true,colorRedAttr);      }    }    if (getMessageText().length() > 0) {      setMessageText("Re deploy rule to fix this problem.",true,true,colorRedAttr);    }  } catch (  PersistentModelException ex) {    this.setErrorMessage("Error saving rule.",ex.getMessage(),ex);  }}  }
class C{  public void close(){  if (inputStream == null) {    return;  }  try {    inputStream.close();  } catch (  Exception e) {    listener.exceptionThrown(e);  }}  }
class C{  private static void initLogger(){  LoggerContext context=(LoggerContext)LoggerFactory.getILoggerFactory();  JoranConfigurator configurator=new JoranConfigurator();  configurator.setContext(context);  context.reset();  InputStream is=null;  try {    String logFileLocation=System.getProperty(LOG_FILE_PROPERTY);    if (null != logFileLocation) {      Path logPath=Paths.get(logFileLocation).toAbsolutePath();      if (Files.exists(logPath)) {        is=Files.newInputStream(logPath,StandardOpenOption.READ);      }    }    if (null == is) {      Path logPath=ResourcesPathResolver.getResourceFile(DEFAULT_LOG_FILE_NAME).toPath().toAbsolutePath();      if (Files.exists(logPath)) {        is=Files.newInputStream(logPath,StandardOpenOption.READ);      }    }    if (null != is) {      try {        configurator.doConfigure(is);      } catch (      JoranException e) {      } finally {        is.close();      }    }  } catch (  IOException e) {  }  StatusPrinter.printInCaseOfErrorsOrWarnings(context);  SysOutOverSLF4J.sendSystemOutAndErrToSLF4J();  MinlogToSLF4JLogger.init();}  }
class C{  public static double fahrenheitToCelsius(double fahrenheit){  return ((fahrenheit - 32d) * (5d / 9d));}  }
class C{  public NotificationChain basicSetShallowEnterSequence(Sequence newShallowEnterSequence,NotificationChain msgs){  Sequence oldShallowEnterSequence=shallowEnterSequence;  shallowEnterSequence=newShallowEnterSequence;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SexecPackage.EXECUTION_REGION__SHALLOW_ENTER_SEQUENCE,oldShallowEnterSequence,newShallowEnterSequence);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public final void park(){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(this.group != null);  group.park(this);}  }
class C{  public void remove(String key){  preferences.edit().remove(key).apply();}  }
class C{  @NotNull public Host lookup(@Nullable String user,@NotNull String host,@Nullable Integer port){  final Host rc=new Host();  entriesLoop:   for (  HostEntry e : myEntries) {    for (    Pattern p : e.myNegative) {      if (p.matcher(host).matches()) {        continue entriesLoop;      }    }    if (e.myExactPositive.contains(host)) {      Host.merge(e.myHost,rc,rc);      continue;    }    for (    Pattern p : e.myPositive) {      if (p.matcher(host).matches()) {        Host.merge(rc,e.myHost,rc);      }    }  }  if (user != null) {    rc.myUser=user;  }  if (port != null) {    rc.myPort=port;  }  if (rc.myHostName == null) {    rc.myHostName=host;  }  rc.setDefaults();  return rc;}  }
class C{  public void actionReloadCurrent(Component c){  if (!m_Dirty.isDirty() || JOptionPane.showConfirmDialog(c,LocalRes.getIntString("message.changeslost"),LocalRes.getIntString("title.editor"),JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {    refreshCurrent();  }}  }
class C{  public byte readByte() throws IOException {  if (head == tail) {    head=0;    tail=input.read(buffer,head,bufSize);    if (tail == -1) {      throw new IOException("No more data is available");    }  }  return buffer[head++];}  }
class C{  private static String decodeFormFields(final String content,final String charset){  if (content == null) {    return null;  }  return urldecode(content,charset != null ? Charset.forName(charset) : Charset.forName(HTTP.UTF_8),true);}  }
class C{  public void testDeserFromNumber() throws IOException {  Calendar cal=new GregorianCalendar(TimeZone.getTimeZone("GMT"));  cal.set(Calendar.YEAR,1972);  long timepoint=cal.getTime().getTime();  ObjectMapper mapper=new ObjectMapper();  DateTime dt=mapper.readValue(String.valueOf(timepoint),DateTime.class);  assertEquals(timepoint,dt.getMillis());  dt=mapper.readValue(quote("1972-12-28T12:00:01.000+0000"),DateTime.class);  assertEquals("1972-12-28T12:00:01.000Z",dt.toString());}  }
class C{  public Enumeration oids(){  return ordering.elements();}  }
class C{  protected void completeTag() throws IOException {  out.flush();  byte[] contents=bytes.toByteArray();  out=null;  bytes=null;  tags.tag(tagType,longTag,contents);}  }
class C{  public static Hashtable<String,Object> parseQuery(String query,boolean keepDuplicates) throws URISyntaxException {  if (query == null) {    return null;  }  Hashtable<String,Object> parameters=new Hashtable<String,Object>();  List<NameValuePair> nvps=parseQueryOrdered(query);  Iterator<NameValuePair> i=nvps.iterator();  while (i.hasNext()) {    NameValuePair nvp=i.next();    if (parameters.containsKey(nvp.getName())) {      if (keepDuplicates == true) {        Object v=parameters.get(nvp.getName());        if (v instanceof String) {          parameters.put(nvp.getName(),new String[]{(String)v,nvp.getValue()});        } else {          int size=((String[])v).length;          String array[]=new String[size + 1];          System.arraycopy(v,0,array,0,size);          array[size]=nvp.getValue();          parameters.put(nvp.getName(),nvp.getValue());        }      }    } else {      parameters.put(nvp.getName(),(nvp.getValue() == null) ? String.valueOf(true) : nvp.getValue());    }  }  return parameters;}  }
class C{  public final void addConstraint(@NonNull final Constraint<CharSequence> constraint){  ensureNotNull(constraint,"The constraint may not be null");  if (!constraints.contains(constraint)) {    constraints.add(constraint);    verifyPasswordStrength();  }}  }
class C{  private static String convert(@Nullable Object value){  if (value == null) {    return "";  } else   if (value instanceof Iterable) {    return Joiner.on('\n').join((Iterable<?>)value);  } else {    return value.toString();  }}  }
class C{  public static int[] toIntArray(ARRAY array,int defaultValue) throws SQLException {  if (array == null)   return null;  if (defaultValue == 0)   return array.getIntArray();  return toIntArray(array.getOracleArray(),defaultValue);}  }
class C{  private static void quickSort(double[] array,int[] index,int left,int right){  if (left < right) {    int middle=partition(array,index,left,right);    quickSort(array,index,left,middle);    quickSort(array,index,middle + 1,right);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @SideOnly(Side.CLIENT) public void registerSpaceObjectClient(ISpaceObject object,int dimId,int stationId){  registerSpaceObject(object,dimId,stationId);}  }
class C{  private <T extends Component>T buildRow(final JPanel panel,final ITypeDescription description,final String hint,final T component,final boolean isLast){  component.setPreferredSize(new Dimension(COLORPANEL_WIDTH,COLORPANEL_HEIGHT));  final JPanel rowPanel=new JPanel(new BorderLayout());  rowPanel.setBorder(new EmptyBorder(0,2,isLast ? 2 : 0,2));  final JPanel innerPanel=new JPanel(new GridLayout(1,2));  innerPanel.add(new JCheckBox(new CheckboxAction(description,description.getDescription() + ":")),BorderLayout.CENTER);  innerPanel.add(CHintCreator.createHintPanel(component,hint),BorderLayout.EAST);  rowPanel.add(innerPanel,BorderLayout.WEST);  panel.add(rowPanel);  return component;}  }
class C{  public boolean matches(String expected){  skipWhitespace();  for (int i=0; i < expected.length(); i++) {    if (i + n >= s.length())     return false;    if (Character.toUpperCase(s.charAt(i + n)) != Character.toUpperCase(expected.charAt(i)))     return false;  }  n+=expected.length();  return true;}  }
class C{  public T caseExecModule(ExecModule object){  return null;}  }
class C{  public Note withCheque(Cheque cheque){  this.setCheque(cheque);  return this;}  }
class C{  @Override public V remove(Object key){  LinkedHashMapEntry<K,V> m=(LinkedHashMapEntry<K,V>)removeEntry(key);  if (m == null) {    return null;  }  LinkedHashMapEntry<K,V> p=m.chainBackward;  LinkedHashMapEntry<K,V> n=m.chainForward;  if (p != null) {    p.chainForward=n;  } else {    head=n;  }  if (n != null) {    n.chainBackward=p;  } else {    tail=p;  }  return m.value;}  }
class C{  public static String int2Str(int i){  return int2Str(i,false);}  }
class C{  private static LogType findLogType(){  String logTypeString=System.getProperty(LOG_TYPE_SYSTEM_PROPERTY);  if (logTypeString != null) {    try {      return LogType.valueOf(logTypeString);    } catch (    IllegalArgumentException e) {      Log log=new LocalLog(LoggerFactory.class.getName());      log.log(Level.WARNING,"Could not find valid log-type from system property '" + LOG_TYPE_SYSTEM_PROPERTY + "', value '"+ logTypeString+ "'");    }  }  for (  LogType logType : LogType.values()) {    if (logType.isAvailable()) {      return logType;    }  }  return LogType.LOCAL;}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_main);  initializeViews();}  }
class C{  public static File jobLocalDir(UUID locNodeId,HadoopJobId jobId) throws IgniteCheckedException {  return new File(new File(U.resolveWorkDirectory("hadoop",false),"node-" + locNodeId),"job_" + jobId);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public GPUImageBoxBlurFilter(){  this(1f);}  }
class C{  public static ValidationExceptionBeanE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  ValidationExceptionBeanE object=new ValidationExceptionBeanE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","ValidationExceptionBean").equals(reader.getName())) {          object.setValidationExceptionBean(ValidationExceptionBean.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public void toEPL(StringWriter writer){  if (afterTimePeriodExpression != null) {    writer.write("after ");    afterTimePeriodExpression.toEPL(writer,ExpressionPrecedenceEnum.MINIMUM);    writer.write(" ");  } else   if ((afterNumberOfEvents != null) && (afterNumberOfEvents != 0)) {    writer.write("after ");    writer.write(Integer.toString(afterNumberOfEvents));    writer.write(" events ");  }  if (selector != OutputLimitSelector.DEFAULT) {    writer.write(selector.getText());    writer.write(" ");  }  if (unit == OutputLimitUnit.WHEN_EXPRESSION) {    writer.write("when ");    whenExpression.toEPL(writer,ExpressionPrecedenceEnum.MINIMUM);    if ((thenAssignments != null) && (thenAssignments.size() > 0)) {      writeThenAssignments(writer,thenAssignments);    }  } else   if (unit == OutputLimitUnit.CRONTAB_EXPRESSION) {    writer.write("at (");    String delimiter="";    for (int i=0; i < crontabAtParameters.length; i++) {      writer.write(delimiter);      crontabAtParameters[i].toEPL(writer,ExpressionPrecedenceEnum.MINIMUM);      delimiter=", ";    }    writer.write(")");  } else   if (unit == OutputLimitUnit.TIME_PERIOD && timePeriodExpression != null) {    writer.write("every ");    timePeriodExpression.toEPL(writer,ExpressionPrecedenceEnum.MINIMUM);  } else   if (unit == OutputLimitUnit.AFTER) {  } else   if (unit == OutputLimitUnit.CONTEXT_PARTITION_TERM) {    writer.write("when terminated");    outputAndAfter(writer);  } else {    writer.write("every ");    if (frequencyVariable == null) {      writer.write(Integer.toString(frequency.intValue()));    } else {      writer.write(frequencyVariable);    }    writer.write(" events");  }  if (andAfterTerminate) {    writer.write(" and when terminated");    outputAndAfter(writer);  }}  }
class C{  protected void printProcessingInstruction(Writer out,ProcessingInstruction pi) throws IOException {  String target=pi.getTarget();  boolean piProcessed=false;  if (target.equals(Result.PI_DISABLE_OUTPUT_ESCAPING)) {    escapeOutput=false;    piProcessed=true;  } else   if (target.equals(Result.PI_ENABLE_OUTPUT_ESCAPING)) {    escapeOutput=true;    piProcessed=true;  }  if (piProcessed == false) {    String rawData=pi.getData();    if (!"".equals(rawData)) {      out.write("<?");      out.write(target);      out.write(" ");      out.write(rawData);      out.write("?>");    } else {      out.write("<?");      out.write(target);      out.write("?>");    }  }}  }
class C{  public MixerTuner(String name,TunerController tunerController,MixerTunerType mixerTunerType,TargetDataLine targetDataLine,ISampleAdapter sampleAdapter){  super(name,tunerController);  mMixerTunerType=mixerTunerType;  mComplexMixer=new ComplexMixer(targetDataLine,mMixerTunerType.getAudioFormat(),name,sampleAdapter,(Listener<ComplexBuffer>)this);}  }
class C{  public void addParameter(VariableReference varRef){  currentMethod.getParams().add(varRef);}  }
class C{  @Override public String generateStart(){  StringBuffer docu=new StringBuffer();  int sumInst=0;  int cNum=0;  for (Enumeration<Cluster> enm=new WekaEnumeration<Cluster>(m_ClusterList); enm.hasMoreElements(); cNum++) {    Cluster cl=enm.nextElement();    docu.append("%\n");    docu.append("% Cluster: c" + cNum + "\n");    docu.append("% ----------------------------------------------\n");    docu.append("% StandardDeviation: " + Utils.doubleToString(cl.getStdDev(),2) + "\n");    docu.append("% Number of instances: " + cl.getInstNum() + "\n");    sumInst+=cl.getInstNum();    double[] center=cl.getCenter();    docu.append("% ");    for (int i=0; i < center.length - 1; i++) {      docu.append(Utils.doubleToString(center[i],2) + ", ");    }    docu.append(Utils.doubleToString(center[center.length - 1],2) + "\n");  }  docu.append("%\n% ----------------------------------------------\n");  docu.append("% Total number of instances: " + sumInst + "\n");  docu.append("%                            in " + cNum + " clusters\n");  docu.append("% Pattern chosen           : ");  if (m_Pattern == GRID) {    docu.append("GRID, " + "distance multiplier = " + Utils.doubleToString(m_DistMult,2) + "\n");  } else   if (m_Pattern == SINE) {    docu.append("SINE\n");  } else {    docu.append("RANDOM\n");  }  return docu.toString();}  }
class C{  public ComponentKey(Context context,String componentKeyStr){  int userDelimiterIndex=componentKeyStr.indexOf("#");  if (userDelimiterIndex != -1) {    String componentStr=componentKeyStr.substring(0,userDelimiterIndex);    Long componentUser=Long.valueOf(componentKeyStr.substring(userDelimiterIndex + 1));    componentName=ComponentName.unflattenFromString(componentStr);    user=UserManagerCompat.getInstance(context).getUserForSerialNumber(componentUser.longValue());  } else {    componentName=ComponentName.unflattenFromString(componentKeyStr);    user=UserHandleCompat.myUserHandle();  }  mHashCode=Arrays.hashCode(new Object[]{componentName,user});}  }
class C{  public Mole(){  super();}  }
class C{  public boolean isSVG12(){  return isSVG12;}  }
class C{  public void delete(String path,ParameterMap params,AsyncCallback callback){  HttpDelete req=new HttpDelete(path,params);  executeAsync(req,callback);}  }
class C{  void postRemoteReleaseLock(Object objectName) throws InterruptedException {  if (!acquireDestroyReadLock(0)) {    return;  }  try {    checkDestroyed();    drainPermittedRequests();    grantLock(objectName);  } catch (  LockServiceDestroyedException e) {  }catch (  LockGrantorDestroyedException e) {  } finally {    releaseDestroyReadLock();  }}  }
class C{  public boolean isReadonly(){  return readonly;}  }
class C{  private Query parseKeyword(String text,int flags){  Analyzer analyzer=new MockAnalyzer(random(),MockTokenizer.KEYWORD,false);  SimpleQueryParser parser=new SimpleQueryParser(analyzer,Collections.singletonMap("field",1f),flags);  return parser.parse(text);}  }
class C{  public NTDomainPrincipal(String name){  if (name == null) {    java.text.MessageFormat form=new java.text.MessageFormat(sun.security.util.ResourcesMgr.getString("invalid.null.input.value","sun.security.util.AuthResources"));    Object[] source={"name"};    throw new NullPointerException(form.format(source));  }  this.name=name;}  }
class C{  @HLEFunction(nid=0x33D4AB37,version=150,checkInsideInterrupt=true) public int __sceSasRevType(int sasCore,int type){  checkSasHandleGood(sasCore);  waveformEffectType=type;  return 0;}  }
class C{  private static double[] successorProbabilites(int successorCount,int[] keySuccessors,double[] keyProbabilities){  double[] probability=new double[successorCount];  for (int i=0; i < keySuccessors.length; i++) {    probability[keySuccessors[i]]+=keyProbabilities[i];  }  return probability;}  }
class C{  protected void startDocumentInternal() throws org.xml.sax.SAXException {  super.startDocumentInternal();  m_needToCallStartDocument=false;  m_needToOutputDocTypeDecl=true;  m_startNewLine=false;  setOmitXMLDeclaration(true);}  }
class C{  @Override public String toString(){  String str="";  str+=" source=" + m_source;  str+=" year=" + m_currentYear;  str+=" lastSeenMessage=" + DateTimeUtils.timestampToHumanDateAndTimeAndStampUTC(m_lastSeenMessageDate.getMillis());  return str;}  }
class C{  public Group(String groupValue,SolrDocumentList result){  _groupValue=groupValue;  _result=result;}  }
class C{  private static String which(String classname,ClassLoader loader){  String classnameAsResource=classname.replace('.','/') + ".class";  if (loader == null)   loader=ClassLoader.getSystemClassLoader();  URL it=loader.getResource(classnameAsResource);  return it != null ? it.toString() : null;}  }
class C{  public static AsyncUpgradeSubscription parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  AsyncUpgradeSubscription object=new AsyncUpgradeSubscription();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"asyncUpgradeSubscription".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (AsyncUpgradeSubscription)org.oscm.xsd.ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list3=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","instanceId").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setInstanceId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","subscriptionId").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setSubscriptionId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","parameterValues").equals(reader.getName())) {      list3.add(org.oscm.xsd.ServiceParameter.Factory.parse(reader));      boolean loopDone3=false;      while (!loopDone3) {        while (!reader.isEndElement())         reader.next();        reader.next();        while (!reader.isStartElement() && !reader.isEndElement())         reader.next();        if (reader.isEndElement()) {          loopDone3=true;        } else {          if (new javax.xml.namespace.QName("","parameterValues").equals(reader.getName())) {            list3.add(org.oscm.xsd.ServiceParameter.Factory.parse(reader));          } else {            loopDone3=true;          }        }      }      object.setParameterValues((org.oscm.xsd.ServiceParameter[])org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(org.oscm.xsd.ServiceParameter.class,list3));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","requestingUser").equals(reader.getName())) {      object.setRequestingUser(org.oscm.xsd.User.Factory.parse(reader));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  protected boolean equals(final char[] first,final char[] second){  if (first == null && second == null) {    return true;  }  if (first == null || second == null) {    return false;  }  if (first.length != second.length) {    return false;  }  for (int i=0; i < first.length; i++) {    if (first[i] != second[i]) {      return false;    }  }  return true;}  }
class C{  static public void main(String args[]) throws Exception {  Xml2WbXml command=null;  try {    command=new Xml2WbXml(args);    command.process();  }  finally {    if (command != null) {      command.close();    }  }}  }
class C{  public void notifyIfConflicting(){  ApplicationPluginInfoService applicationInfoService=ServiceManager.getService(ApplicationPluginInfoService.class);  if (applicationInfoService.isPluginActive(BUNDLED_PLUGIN_ID)) {    Optional<IdeaPluginDescriptor> plugin=applicationInfoService.findPlugin(BUNDLED_PLUGIN_ID);    if (plugin.isPresent()) {      showNotification(plugin.get());    }  }}  }
class C{  final void sync(){  if (font == null) {    setPropertiesFromAttributes();  }}  }
class C{  public static double[] waitForCompletion(Future<?>[] futures,DComplexDComplexDComplexFunction aggr){  int size=futures.length;  double[][] results=new double[size][2];  double[] a=null;  try {    for (int j=0; j < size; j++) {      results[j]=(double[])futures[j].get();    }    a=results[0];    for (int j=1; j < size; j++) {      a=aggr.apply(a,results[j]);    }  } catch (  ExecutionException ex) {    ex.printStackTrace();  }catch (  InterruptedException e) {    e.printStackTrace();  }  return a;}  }
class C{  public static UTMCoord fromUTM(int zone,String hemisphere,double easting,double northing){  final UTMCoordConverter converter=new UTMCoordConverter();  long err=converter.convertUTMToGeodetic(zone,hemisphere,easting,northing);  if (err != UTMCoordConverter.UTM_NO_ERROR) {    throw new IllegalArgumentException("UTM Conversion Error");  }  return new UTMCoord(Angle.fromRadians(converter.getLatitude()),Angle.fromRadians(converter.getLongitude()),zone,hemisphere,easting,northing,Angle.fromRadians(converter.getCentralMeridian()));}  }
class C{  public void testNextFloat(){  float f=ThreadLocalRandom.current().nextFloat();  int i=0;  while (i < NCALLS && ThreadLocalRandom.current().nextFloat() == f)   ++i;  assertTrue(i < NCALLS);}  }
class C{  public DenseSparceTransform(double factor){  this.factor=factor;}  }
class C{  public void put(RegisterSpec spec){  throwIfImmutable();  if (spec == null) {    throw new NullPointerException("spec == null");  }  size=-1;  try {    int reg=spec.getReg();    specs[reg]=spec;    if (reg > 0) {      int prevReg=reg - 1;      RegisterSpec prevSpec=specs[prevReg];      if ((prevSpec != null) && (prevSpec.getCategory() == 2)) {        specs[prevReg]=null;      }    }    if (spec.getCategory() == 2) {      specs[reg + 1]=null;    }  } catch (  ArrayIndexOutOfBoundsException ex) {    throw new IllegalArgumentException("spec.getReg() out of range");  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void handleDOMCharacterDataModified(MutationEvent evt){  textBridge.handleDOMCharacterDataModified(evt);}  }
class C{  public DIssuerAlternativeName(JDialog parent){  super(parent);  setTitle(res.getString("DIssuerAlternativeName.Title"));  initComponents();}  }
class C{  public void display(int index){  log.fine("Index=" + index);  m_activity=resetDisplay(index);  if (m_activity == null) {    return;  }  fNode.setText(m_activity.getNodeName());  fDescription.setValue(m_activity.getNodeDescription());  fHelp.setValue(m_activity.getNodeHelp());  fHistory.setContent(HISTORY_DIV_START_TAG + m_activity.getHistoryHTML() + "</div>");  MWFNode node=m_activity.getNode();  if (MWFNode.ACTION_UserChoice.equals(node.getAction())) {    if (m_column == null)     m_column=node.getColumn();    if (m_column != null && m_column.get_ID() != 0) {      fAnswerList.removeAllItems();      int dt=m_column.getAD_Reference_ID();      if (dt == DisplayType.YesNo) {        ValueNamePair[] values=MRefList.getList(Env.getCtx(),319,false);        for (int i=0; i < values.length; i++) {          fAnswerList.appendItem(values[i].getName(),values[i].getValue());        }        fAnswerList.setVisible(true);      } else       if (dt == DisplayType.List) {        ValueNamePair[] values=MRefList.getList(Env.getCtx(),m_column.getAD_Reference_Value_ID(),false);        for (int i=0; i < values.length; i++) {          fAnswerList.appendItem(values[i].getName(),values[i].getValue());        }        fAnswerList.setVisible(true);      } else {        fAnswerText.setText("");        fAnswerText.setVisible(true);      }    }  } else   if (MWFNode.ACTION_UserWindow.equals(node.getAction()) || MWFNode.ACTION_UserForm.equals(node.getAction())) {    fAnswerButton.setLabel(node.getName());    fAnswerButton.setTooltiptext(node.getDescription());    fAnswerButton.setVisible(true);  } else   log.log(Level.SEVERE,"Unknown Node Action: " + node.getAction());  statusBar.setStatusDB((m_index + 1) + "/" + m_activities.length);  statusBar.setStatusLine(Msg.getMsg(Env.getCtx(),"WFActivities"));}  }
class C{  @Override public String toString(){  return "surfaceReference[" + "nativePointer=0x" + Long.toHexString(getNativePointer()) + ","+ "channelDesc="+ channelDesc+ "]";}  }
class C{  public String path(){  if (path == null) {    if (!hasPath) {      return path="";    }    int pathEndPos=uri.indexOf('?');    if (pathEndPos < 0) {      path=uri;    } else {      return path=uri.substring(0,pathEndPos);    }  }  return path;}  }
class C{  public T caseTemplateSegment(TemplateSegment object){  return null;}  }
class C{  public BundleException(String msg,int type){  super(msg);  this.type=type;}  }
class C{  @Provides @Singleton AnswerDataSource provideAnswerDataSource(DaoSession session){  return new AnswerDataSource(session);}  }
class C{  public GenArray1D(Class<? extends Layout> elementInterfaceClass){  this(elementInterfaceClass,null);}  }
class C{  public void clearChecking(){  this.checkedPathsSet.clear();  this.greyedPathsSet.clear();  fireValueChanged(new TreeCheckingEvent(new TreePath(model.getRoot())));}  }
class C{  public CGotoBookmarkAction(final CDebugPerspectiveModel model,final CBookmark bookmark){  super(String.format("%s: %s",bookmark.getAddress().toHexString(),bookmark.getDescription()));  m_model=model;  m_bookmark=bookmark;}  }
class C{  public void clearListeners(){  listeners.clear();  mainThreadListeners.clear();}  }
class C{  public address addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public Ed25519GroupElement subtract(final Ed25519GroupElement g){  if (this.coordinateSystem != CoordinateSystem.P3) {    throw new UnsupportedOperationException();  }  if (g.coordinateSystem != CoordinateSystem.CACHED) {    throw new IllegalArgumentException();  }  final Ed25519FieldElement YPlusX;  final Ed25519FieldElement YMinusX;  final Ed25519FieldElement ZSquare;  final Ed25519FieldElement A;  final Ed25519FieldElement B;  final Ed25519FieldElement C;  final Ed25519FieldElement D;  YPlusX=this.Y.add(this.X);  YMinusX=this.Y.subtract(this.X);  A=YPlusX.multiply(g.Y);  B=YMinusX.multiply(g.X);  C=g.T.multiply(this.T);  ZSquare=this.Z.multiply(g.Z);  D=ZSquare.add(ZSquare);  return p1xp1(A.subtract(B),A.add(B),D.subtract(C),D.add(C));}  }
class C{  public static void initSoftwareToken(char[] password) throws Exception {  LOG.trace("Initializing software token");  execute(new InitSoftwareToken(password));}  }
class C{  private ResourceServerAccessToken parseAccessToken(String jwtAccessToken) throws ExternalException {  this.initializeAuth();  try {    return this.tokenHandler.parseAccessToken(jwtAccessToken);  } catch (  TokenValidationException ex) {switch (ex.getTokenValidationError()) {case EXPIRED_TOKEN:      throw new ExternalException(ErrorCode.EXPIRED_AUTH_TOKEN,"The OAuth token has expired",null);default :    throw new ExternalException(ErrorCode.INVALID_AUTH_TOKEN,"Passed OAuth token is invalid.",null,ex);}}}  }
class C{  public void paint(Graphics g){  for (int rank=1; rank <= 13; rank++) {    for (int suit=0; suit <= 3; suit++) {      double x=rank - 1 + suit / 5.0;      double y=suit / 2.0;      drawCard(g,rank,suit,x,y);    }  }}  }
class C{  default B addPatterns(final Collection<BannerPattern> patterns){  this.meta().addPatterns(patterns);  return this.getBuilder();}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  public static XmlPullParser createParser(Context context){  AssetManager am=context.getAssets();  XmlPullParser parser=null;  try {    InputStream is=am.open(XML_PATH_IN_ASSETS);    parser=XmlPullParserFactory.newInstance().newPullParser();    parser.setInput(is,DEFAULT_ENCODING_TYPE);  } catch (  FileNotFoundException e) {    Log.d(LOG_TAG,"The configuration file 'assets/" + XML_PATH_IN_ASSETS + "' is missing. But the file is just an option. It is necessary only if you want to customize something in Pull To Refresh.");    parser=null;  }catch (  XmlPullParserException e) {    Log.w(LOG_TAG,"The error occurs below when generating parser.",e);    parser=null;  }catch (  IOException e) {    Log.w(LOG_TAG,"Loading " + XML_PATH_IN_ASSETS + " file has failed.",e);    parser=null;  }  return parser;}  }
class C{  public int serve(String user,String pass,File home) throws IOException, FtpException {  checkState(server == null,"You already have an SFTP server!");  int port=NetworkUtils.pickUnusedPort();  server=createSftpServer(user,pass,home,port);  return port;}  }
class C{  public static ModifySubscriptionResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  ModifySubscriptionResponse object=new ModifySubscriptionResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"modifySubscriptionResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (ModifySubscriptionResponse)org.oscm.xsd.ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","return").equals(reader.getName())) {      object.set_return(org.oscm.xsd.BaseResult.Factory.parse(reader));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  protected void adjustChessBoardLayout(){  String layoutClassName=Raptor.getInstance().getPreferences().getString(PreferenceKeys.BOARD_LAYOUT);  if (chessBoardLayout == null || !layoutClassName.equals(chessBoardLayout.getClass().getName())) {    ChessBoardLayout oldLayout=chessBoardLayout;    try {      chessBoardLayout=(ChessBoardLayout)Class.forName(layoutClassName).getConstructor(ChessBoard.class).newInstance(this);      if (oldLayout != null) {        boardComposite.setLayout(null);        oldLayout.dispose();      }      boardComposite.setLayout(chessBoardLayout);      whiteNameRatingLabel.setAlignment(chessBoardLayout.getAlignment(Field.NAME_RATING_LABEL));      blackNameRatingLabel.setAlignment(chessBoardLayout.getAlignment(Field.NAME_RATING_LABEL));      whiteLagLabel.setAlignment(chessBoardLayout.getAlignment(Field.LAG_LABEL));      blackLagLabel.setAlignment(chessBoardLayout.getAlignment(Field.LAG_LABEL));      whiteClockLabel.setAlignment(chessBoardLayout.getAlignment(Field.CLOCK_LABEL));      blackClockLabel.setAlignment(chessBoardLayout.getAlignment(Field.CLOCK_LABEL));      gameDescriptionLabel.setAlignment(chessBoardLayout.getAlignment(Field.GAME_DESCRIPTION_LABEL));      statusLabel.setAlignment(chessBoardLayout.getAlignment(Field.STATUS_LABEL));      currentPremovesLabel.setAlignment(chessBoardLayout.getAlignment(Field.CURRENT_PREMOVE_LABEL));      openingDescriptionLabel.setAlignment(chessBoardLayout.getAlignment(Field.OPENING_DESCRIPTION_LABEL));      chessBoardLayout.adjustFontSizes();    } catch (    Throwable t) {      throw new RuntimeException("Error creating chessBoardLayout " + layoutClassName,t);    }  }}  }
class C{  protected boolean isFeedbackEnabled(DrawContext dc,WWIcon icon){  if (dc.isPickingMode())   return false;  Boolean b=(Boolean)icon.getValue(AVKey.FEEDBACK_ENABLED);  return (b != null && b);}  }
class C{  public void execute(Runnable command){  _queue.execute(command);}  }
class C{  public ProjectionUTM(){  super(centralMeridianForZone(DEFAULT_ZONE));}  }
class C{  public static void addHandler(Handler handler){  if (handler == null)   return;  Logger rootLogger=Logger.getLogger("");  rootLogger.addHandler(handler);  s_handlers.add(handler);  log.log(Level.CONFIG,"Handler=" + handler);}  }
class C{  @Override public void proceedTest(String type) throws IOException, GeneralSecurityException {  ByteArrayOutputStream baOutput=new ByteArrayOutputStream();  try (CipherOutputStream ciOutput=new CipherOutputStream(baOutput,getDecryptCipher())){    if (type.equals(CICO_PBE_Test.BYTE_ARR_BUFFER)) {      proceedTestUsingByteArrayBuffer(ciOutput);    } else {      proceedTestUsingIntBuffer(ciOutput);    }    ciOutput.flush();  }   if (!TestUtilities.equalsBlock(plainText,baOutput.toByteArray(),TEXT_SIZE)) {    throw new RuntimeException("outputText not same with expectedText" + " when test " + type);  }}  }
class C{  public static DynamicClassLoader create(ClassLoader parent,PathImpl dir){  DynamicClassLoader loader=new DynamicClassLoader(parent);  TreeLoader treeLoader=new TreeLoader(loader,dir);  loader.addLoader(treeLoader);  loader.init();  return loader;}  }
class C{  public static <A>boolean anymatch(final SortedSet<A> set1,final SortedSet<A> set2){  if ((set1 == null) || (set2 == null))   return false;  if (set1.comparator() != set2.comparator())   return false;  if (set1.isEmpty() || set2.isEmpty())   return false;  final int high=((set1.size() > set2.size()) ? set1.size() : set2.size());  final int low=((set1.size() > set2.size()) ? set2.size() : set1.size());  final int stepsEnum=10 * (high + low - 1);  final int stepsTest=12 * log2a(high) * low;  if (stepsEnum > stepsTest) {    return (set1.size() < set2.size()) ? anymatchByTest(set1.iterator(),set2) : anymatchByTest(set2.iterator(),set1);  }  return anymatchByEnumeration(set1,set2);}  }
class C{  public static void copy(InputStream in,OutputStream out) throws IOException {  byte[] buf=new byte[8 * 1024];  int read=0;  while ((read=in.read(buf)) > -1) {    out.write(buf,0,read);  }}  }
class C{  public EditableOMPoint(GraphicAttributes ga){  createGraphic(ga);}  }
class C{  private boolean journalRebuildRequired(){  final int redundantOpCompactThreshold=2000;  return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size();}  }
class C{  public static void run(Dfareporting reporting,Long userProfileId,Report report) throws Exception {  System.out.println("=================================================================");  System.out.printf("Getting compatible fields for standard report with ID %s%n",report.getId());  System.out.println("=================================================================");  CompatibleFields compatibleFields=reporting.reports().compatibleFields().query(userProfileId,report).execute();  ReportCompatibleFields standardReportCompatibleFields=compatibleFields.getReportCompatibleFields();  for (  Dimension compatibleDimension : standardReportCompatibleFields.getDimensions()) {    System.out.printf("Dimension \"%s\" is compatible.%n",compatibleDimension.getName());  }  for (  Metric compatibleMetric : standardReportCompatibleFields.getMetrics()) {    System.out.printf("Metric \"%s\" is compatible.%n",compatibleMetric.getName());  }  for (  Dimension compatibleDimension : standardReportCompatibleFields.getDimensionFilters()) {    System.out.printf("Dimension Filter \"%s\" is compatible.%n",compatibleDimension.getName());  }  for (  Metric compatibleMetric : standardReportCompatibleFields.getPivotedActivityMetrics()) {    System.out.printf("Pivoted Activity Metric \"%s\" is compatible.%n",compatibleMetric.getName());  }  System.out.println();}  }
class C{  public UTXO(Sha256Hash hash,long index,Coin value,int height,boolean coinbase,Script script){  this.hash=hash;  this.index=index;  this.value=value;  this.height=height;  this.script=script;  this.coinbase=coinbase;  this.address="";}  }
class C{  public StrBuilder deleteAll(final char ch){  for (int i=0; i < size; i++) {    if (buffer[i] == ch) {      final int start=i;      while (++i < size) {        if (buffer[i] != ch) {          break;        }      }      final int len=i - start;      deleteImpl(start,i,len);      i-=len;    }  }  return this;}  }
class C{  boolean isOnTemplate(){  return mPositionInVariant == INVALID;}  }
class C{  public void animateBgAlpha(float finalAlpha,int duration){  int finalAlphaI=(int)(finalAlpha * 255f);  if (getAlpha() != finalAlphaI) {    mBackgroundAnim=cancelAnimator(mBackgroundAnim);    mBackgroundAnim=ObjectAnimator.ofInt(this,"alpha",finalAlphaI);    mBackgroundAnim.setDuration(duration);    mBackgroundAnim.start();  }}  }
class C{  private Key(String language,String region){  assert language.intern() == language && region.intern() == region;  lang=new SoftReference(language);  scrt=new SoftReference("");  regn=new SoftReference(region);  vart=new SoftReference("");  this.normalized=true;  int h=language.hashCode();  if (region != "") {    int len=region.length();    for (int i=0; i < len; i++) {      h=31 * h + LocaleUtils.toLower(region.charAt(i));    }  }  hash=h;}  }
class C{  public AclEntryImpl(Principal p) throws UnknownHostException {  princ=p;  permList=new Vector<Permission>();  commList=new Vector<String>();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:18.819 -0500",hash_original_method="B8C47E86765DFB497203F72EAEF6D248",hash_generated_method="55F2E9D8B0B03C6A6B5FF47DDA34BEBB") public boolean offer(E e,long timeout,TimeUnit unit) throws InterruptedException {  checkNotNull(e);  long nanos=unit.toNanos(timeout);  final ReentrantLock lock=this.lock;  lock.lockInterruptibly();  try {    while (count == items.length) {      if (nanos <= 0)       return false;      nanos=notFull.awaitNanos(nanos);    }    insert(e);    return true;  }  finally {    lock.unlock();  }}  }
class C{  public static void clear(){  if (mCachePool != null) {    SimpleCache sc=null;    Object cacheObj=null;    for (    String key : mCachePool.keySet()) {      sc=mCachePool.get(key);      if (sc != null && sc.mCache != null) {        for (        Object key2 : sc.mCache.keySet()) {          cacheObj=sc.mCache.get(key2);          if (cacheObj instanceof LuaCache.CacheableObject) {            ((LuaCache.CacheableObject)cacheObj).onCacheClear();          }        }        sc.mCache.clear();      }    }    mCachePool.clear();  }}  }
class C{  public MemoryExpression(final MemoryExpressionElement child){  this.child=child;}  }
class C{  public WordsFromFileTest(String name){  super(name);}  }
class C{  @SuppressWarnings("unchecked") public static <K,V>ImmutableSetMultimap<K,V> of(){  return (ImmutableSetMultimap<K,V>)EmptyImmutableSetMultimap.INSTANCE;}  }
class C{  public ArrayList<Fact> createFacts(MAcctSchema as){  return null;}  }
class C{  public static String relativePath(final VirtualFile root,VirtualFile file){  return relativePath(VfsUtil.virtualToIoFile(root),VfsUtil.virtualToIoFile(file));}  }
class C{  private BridgeTransform(Class<A> from,Class<B> to,TransformFactory factory){  this.from=requireNonNull(from);  this.to=requireNonNull(to);  this.factory=requireNonNull(factory);  this.steps=new ArrayList<>();  this.end=requireNonNull(from);}  }
class C{  public void clear(){  mStrings.clear();  notifyDataSetChanged();}  }
class C{  public static <K,V extends Comparable<? super V>>Map<K,V> sortByValue(Map<K,V> map){  return sortByValue(map,false);}  }
class C{  @Override public boolean hasAttribute(String key){  return channel.hasAttribute(key);}  }
class C{  private void updateParticipants(final Set<ContactId> contacts,ParticipantStatus status){  Map<ContactId,ParticipantStatus> participants=new HashMap<>();  for (  ContactId contact : contacts) {    participants.put(contact,status);  }  updateParticipants(participants);}  }
class C{  public Boolean isDefault(){  return _default;}  }
class C{  public CLIOutputResponse showLog(final ShowLogRequest request) throws IOException, SubversionException {  final File projectPath=new File(request.getProjectPath());  final List<String> uArgs=defaultArgs();  addOption(uArgs,"--revision",request.getRevision());  uArgs.add("log");  final CommandLineResult result=runCommand(null,uArgs,projectPath,request.getPaths());  return DtoFactory.getInstance().createDto(CLIOutputResponse.class).withCommand(result.getCommandLine().toString()).withOutput(result.getStdout()).withErrOutput(result.getStderr());}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  @SuppressWarnings("unchecked") public static DeleteObjectsResult parseDeleteObjectsResult(InputStream responseBody) throws ResponseParseException {  try {    Element root=getXmlRootElement(responseBody);    DeleteObjectsResult deleteObjectsResult=new DeleteObjectsResult();    if (root.getChild("EncodingType") != null) {      String encodingType=root.getChildText("EncodingType");      deleteObjectsResult.setEncodingType(isNullOrEmpty(encodingType) ? null : encodingType);    }    List<String> deletedObjects=new ArrayList<String>();    List<Element> deletedElements=root.getChildren("Deleted");    for (    Element elem : deletedElements) {      deletedObjects.add(elem.getChildText("Key"));    }    deleteObjectsResult.setDeletedObjects(deletedObjects);    return deleteObjectsResult;  } catch (  Exception e) {    throw new ResponseParseException(e.getMessage(),e);  }}  }
class C{  public File createTrainCsvManifestFile(String name){  return createFile(getDefaultCsvManifestFilename(name),false);}  }
class C{  public CSVReader(Reader reader,char separator,char quotechar,char escape,int line,boolean strictQuotes,boolean ignoreLeadingWhiteSpace,boolean keepCR){  this(reader,line,new CSVParser(separator,quotechar,escape,strictQuotes,ignoreLeadingWhiteSpace),keepCR,DEFAULT_VERIFY_READER);}  }
class C{  public byte peek(){  if (position >= getCapacity())   return 0;  return buffer[position / SIZE][position % SIZE];}  }
class C{  private void calculateAllCells(Context context){  DisplayMetrics displaymetrics=new DisplayMetrics();  ((Activity)context).getWindowManager().getDefaultDisplay().getMetrics(displaymetrics);  int width=displaymetrics.widthPixels;  d=width / NO_CESLLS;  for (int y=0; y < d * 2; y+=d) {    coorX=0;    for (int x=0; x <= width - d; x+=d) {      Cell cell=new Cell();      cell.x1=x;      cell.y1=y;      cell.x2=x + d;      cell.y2=y + d;      cell.id=counter;      cell.coorX=coorX;      cell.coorY=coorY;      cells.add(cell);      counter++;      coorX++;    }    coorY++;  }}  }
class C{  void exitPlugin(PluginResult result){  if (result.getResultType() == PluginResultType.CONTINUE) {    if (log.isDebugEnabled()) {      log.debug("Switch " + getSwitchInfoString() + " app handshake plugin {} returned {}."+ " Proceeding normally..",this.plugin.getClass().getSimpleName(),result);    }    enterNextPlugin();  } else   if (result.getResultType() == PluginResultType.DISCONNECT) {    log.error("Switch " + getSwitchInfoString() + " app handshake plugin {} returned {}. "+ "Disconnecting switch.",this.plugin.getClass().getSimpleName(),result);    mainConnection.disconnect();  } else   if (result.getResultType() == PluginResultType.QUARANTINE) {    log.warn("Switch " + getSwitchInfoString() + " app handshake plugin {} returned {}. "+ "Putting switch into quarantine state.",this.plugin.getClass().getSimpleName(),result);    setState(new QuarantineState(result.getReason()));  }}  }
class C{  @Override public void IFEQ(String className,String methName,int branchIndex,int p){  env.topFrame().operandStack.pushBv32(ExpressionFactory.ICONST_0);  IF_ICMPEQ(className,methName,branchIndex,p,0);}  }
class C{  public static boolean IsTRUE(TLAExpr expr){  Vector tokens=expr.tokens;  if (tokens.size() > 1)   return false;  Vector line=(Vector)tokens.elementAt(0);  if (line.size() == 1) {    TLAToken tok=(TLAToken)line.elementAt(0);    return (tok.string.equals("TRUE")) ? true : false;  } else   if (line.size() == 3) {    TLAToken tok1=(TLAToken)line.elementAt(0);    TLAToken tok2=(TLAToken)line.elementAt(1);    TLAToken tok3=(TLAToken)line.elementAt(2);    return (tok1.string.equals("(") && tok2.string.equals("TRUE") && tok3.string.equals(")")) ? true : false;  } else   return false;}  }
class C{  protected void writeArray(Class<?> arrayClass,Object array,CharBuf buffer){  if (Object[].class.isAssignableFrom(arrayClass)) {    Object[] objArray=(Object[])array;    writeIterator(Arrays.asList(objArray).iterator(),buffer);    return;  }  buffer.addChar(OPEN_BRACKET);  if (int[].class.isAssignableFrom(arrayClass)) {    int[] intArray=(int[])array;    if (intArray.length > 0) {      buffer.addInt(intArray[0]);      for (int i=1; i < intArray.length; i++) {        buffer.addChar(COMMA).addInt(intArray[i]);      }    }  } else   if (long[].class.isAssignableFrom(arrayClass)) {    long[] longArray=(long[])array;    if (longArray.length > 0) {      buffer.addLong(longArray[0]);      for (int i=1; i < longArray.length; i++) {        buffer.addChar(COMMA).addLong(longArray[i]);      }    }  } else   if (boolean[].class.isAssignableFrom(arrayClass)) {    boolean[] booleanArray=(boolean[])array;    if (booleanArray.length > 0) {      buffer.addBoolean(booleanArray[0]);      for (int i=1; i < booleanArray.length; i++) {        buffer.addChar(COMMA).addBoolean(booleanArray[i]);      }    }  } else   if (char[].class.isAssignableFrom(arrayClass)) {    char[] charArray=(char[])array;    if (charArray.length > 0) {      buffer.addJsonEscapedString(Chr.array(charArray[0]),disableUnicodeEscaping);      for (int i=1; i < charArray.length; i++) {        buffer.addChar(COMMA).addJsonEscapedString(Chr.array(charArray[i]),disableUnicodeEscaping);      }    }  } else   if (double[].class.isAssignableFrom(arrayClass)) {    double[] doubleArray=(double[])array;    if (doubleArray.length > 0) {      buffer.addDouble(doubleArray[0]);      for (int i=1; i < doubleArray.length; i++) {        buffer.addChar(COMMA).addDouble(doubleArray[i]);      }    }  } else   if (float[].class.isAssignableFrom(arrayClass)) {    float[] floatArray=(float[])array;    if (floatArray.length > 0) {      buffer.addFloat(floatArray[0]);      for (int i=1; i < floatArray.length; i++) {        buffer.addChar(COMMA).addFloat(floatArray[i]);      }    }  } else   if (byte[].class.isAssignableFrom(arrayClass)) {    byte[] byteArray=(byte[])array;    if (byteArray.length > 0) {      buffer.addByte(byteArray[0]);      for (int i=1; i < byteArray.length; i++) {        buffer.addChar(COMMA).addByte(byteArray[i]);      }    }  } else   if (short[].class.isAssignableFrom(arrayClass)) {    short[] shortArray=(short[])array;    if (shortArray.length > 0) {      buffer.addShort(shortArray[0]);      for (int i=1; i < shortArray.length; i++) {        buffer.addChar(COMMA).addShort(shortArray[i]);      }    }  }  buffer.addChar(CLOSE_BRACKET);}  }
class C{  private void parseIsolationClause(){  if (readIf("WITH")) {    if (readIf("RR") || readIf("RS")) {      if (readIf("USE")) {        read("AND");        read("KEEP");        if (readIf("SHARE") || readIf("UPDATE") || readIf("EXCLUSIVE")) {        }        read("LOCKS");      }    } else     if (readIf("CS") || readIf("UR")) {    }  }}  }
class C{  protected void init(){}  }
class C{  public void putStyle(String styleId,StyleSelector styleSelector){  try {    int id=Integer.parseInt(styleId);    mMaxStyleId=Math.max(mMaxStyleId,id);  } catch (  NumberFormatException e) {  }  mStyles.put(styleId,styleSelector);}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == TypeProvidingElement.class) {switch (baseFeatureID) {default :      return -1;  }}if (baseClass == TypedElement.class) {switch (baseFeatureID) {case N4JSPackage.TYPED_ELEMENT__DECLARED_TYPE_REF:    return N4JSPackage.FORMAL_PARAMETER__DECLARED_TYPE_REF;case N4JSPackage.TYPED_ELEMENT__BOGUS_TYPE_REF:  return N4JSPackage.FORMAL_PARAMETER__BOGUS_TYPE_REF;default :return -1;}}if (baseClass == TypableElement.class) {switch (baseFeatureID) {default :return -1;}}if (baseClass == IdentifiableElement.class) {switch (baseFeatureID) {case TypesPackage.IDENTIFIABLE_ELEMENT__NAME:return N4JSPackage.FORMAL_PARAMETER__NAME;default :return -1;}}if (baseClass == NamedElement.class) {switch (baseFeatureID) {default :return -1;}}if (baseClass == Variable.class) {switch (baseFeatureID) {default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public final int yylength(){  return yy_markedPos - yy_startRead;}  }
class C{  public DataWrapper(Parameters parameters){  setDataModel(new ColtDataSet(0,new LinkedList<Node>()));  this.parameters=parameters;}  }
class C{  public XmlEntity(final String type,final String key,final String value){  this.type=type;  this.attributes.put(key,value);  init();}  }
class C{  public void service(Mail mail){  try {    MimeMessage message=mail.getMessage();    Classifier classifier=new Classifier(message);    String classification=classifier.getClassification();    message.setHeader(headerName,classification);    message.saveChanges();  } catch (  javax.mail.MessagingException me) {    log("Error classifying message: " + me.getMessage());  }}  }
class C{  private void loadArguments(){  Enumeration<Object> e=System.getProperties().keys();  while (e.hasMoreElements()) {    String key=(String)e.nextElement();    String value=System.getProperty(key);    if (key.toUpperCase().startsWith("IS")) {      if (value == null || value.length() == 0)       value="Y";    }    setParameter(key,value);  }}  }
class C{  public void inc(){  inc(1);}  }
class C{  public static ByteBuffer serializeType(final String ksName,final String cfName,final AbstractType type,final String name,final Object value,final Mapper mapper) throws SyntaxException, ConfigurationException, JsonGenerationException, JsonMappingException, IOException {  if (value == null) {    return null;  }  if (type instanceof UserType) {    UserType udt=(UserType)type;    ByteBuffer[] components=new ByteBuffer[udt.size()];    int i=0;    if (GEO_POINT_TYPE.equals(ByteBufferUtil.string(udt.name))) {      GeoPoint geoPoint=new GeoPoint();      if (value instanceof String) {        geoPoint.resetFromString((String)value);      } else {        Map<String,Object> mapValue=(Map<String,Object>)value;        geoPoint.reset((Double)mapValue.get(GeoPointFieldMapper.Names.LAT),(Double)mapValue.get(GeoPointFieldMapper.Names.LON));      }      components[i++]=serializeType(ksName,cfName,udt.fieldType(0),GeoPointFieldMapper.Names.LAT,geoPoint.lat(),null);      components[i++]=serializeType(ksName,cfName,udt.fieldType(1),GeoPointFieldMapper.Names.LON,geoPoint.lon(),null);    } else     if (COMPLETION_TYPE.equals(ByteBufferUtil.string(udt.name))) {      Map<String,Object> mapValue=(Map<String,Object>)value;      components[i++]=serializeType(ksName,cfName,udt.fieldType(0),Fields.CONTENT_FIELD_NAME_INPUT,mapValue.get(Fields.CONTENT_FIELD_NAME_INPUT),null);      components[i++]=serializeType(ksName,cfName,udt.fieldType(1),Fields.CONTENT_FIELD_NAME_OUTPUT,mapValue.get(Fields.CONTENT_FIELD_NAME_OUTPUT),null);      components[i++]=serializeType(ksName,cfName,udt.fieldType(2),Fields.CONTENT_FIELD_NAME_WEIGHT,new Long((Integer)mapValue.get(Fields.CONTENT_FIELD_NAME_WEIGHT)),null);      components[i++]=serializeType(ksName,cfName,udt.fieldType(3),Fields.CONTENT_FIELD_NAME_PAYLOAD,ClusterService.Utils.stringify(mapValue.get(Fields.CONTENT_FIELD_NAME_PAYLOAD)),null);    } else {      Map<String,Object> mapValue=(Map<String,Object>)value;      for (int j=0; j < udt.size(); j++) {        String subName=UTF8Type.instance.compose(udt.fieldName(j));        AbstractType<?> subType=udt.fieldType(j);        Object subValue=mapValue.get(subName);        Mapper subMapper=(mapper instanceof ObjectMapper) ? ((ObjectMapper)mapper).getMapper(subName) : null;        components[i++]=serializeType(ksName,cfName,subType,subName,subValue,subMapper);      }    }    return TupleType.buildValue(components);  } else   if (type instanceof MapType) {    MapType mapType=InternalCassandraClusterService.getMapType(ksName,cfName,name);    MapSerializer serializer=mapType.getSerializer();    Map map=(Map)value;    List<ByteBuffer> buffers=serializer.serializeValues((Map)value);    return CollectionSerializer.pack(buffers,map.size(),Server.VERSION_3);  } else   if (type instanceof CollectionType) {    AbstractType elementType=(type instanceof ListType) ? ((ListType)type).getElementsType() : ((SetType)type).getElementsType();    if (elementType instanceof UserType && InternalCassandraClusterService.GEO_POINT_TYPE.equals(ByteBufferUtil.string(((UserType)elementType).name)) && value instanceof List&& ((List)value).get(0) instanceof Double) {      UserType udt=(UserType)elementType;      List<Double> values=(List<Double>)value;      ByteBuffer[] elements=new ByteBuffer[]{serializeType(ksName,cfName,udt.fieldType(0),GeoPointFieldMapper.Names.LAT,values.get(1),null),serializeType(ksName,cfName,udt.fieldType(1),GeoPointFieldMapper.Names.LON,values.get(0),null)};      ByteBuffer geo_point=TupleType.buildValue(elements);      return CollectionSerializer.pack(ImmutableList.of(geo_point),1,Server.VERSION_3);    }    if (!(value instanceof Collection)) {      ByteBuffer bb=serializeType(ksName,cfName,elementType,name,value,mapper);      return CollectionSerializer.pack(ImmutableList.of(bb),1,Server.VERSION_3);    }    List<ByteBuffer> elements=new ArrayList<ByteBuffer>();    for (    Object v : (Collection)value) {      ByteBuffer bb=serializeType(ksName,cfName,elementType,name,v,mapper);      elements.add(bb);    }    return CollectionSerializer.pack(elements,elements.size(),Server.VERSION_3);  } else {    if (mapper != null && mapper instanceof FieldMapper) {      return type.decompose(value((FieldMapper)mapper,value));    }    return type.decompose(value);  }}  }
class C{  public boolean isConnectable(){  for (  DeviceService service : services.values()) {    if (service.isConnectable())     return true;  }  return false;}  }
class C{  private void rehash(){  ObjectCache newHashtable=new ObjectCache(this.keyTable.length * 2);  for (int i=this.keyTable.length; --i >= 0; )   if (this.keyTable[i] != null)   newHashtable.put(this.keyTable[i],this.valueTable[i]);  this.keyTable=newHashtable.keyTable;  this.valueTable=newHashtable.valueTable;  this.threshold=newHashtable.threshold;}  }
class C{  public void recycle(){  m_mbBuf.clear();  System.gc();}  }
class C{  @Override protected void afterExecute(Runnable r,Throwable t){  if (isAppendTaskName()) {    NamedThreadPoolHelper.resetNameAfterExecute(r,t);  }  super.afterExecute(r,t);}  }
class C{  public static Auth invert(final Auth auth){  Auth result=new Auth();  result.setType((auth.getType().equals(ConfigurationType.BLACKLIST) ? ConfigurationType.BLACKLIST : ConfigurationType.WHITELIST));  result.setVersion(auth.getVersion());  Profiles profiles=new Profiles();  for (  Profile profileSrc : auth.getProfiles().getProfile()) {    Map<String,String> actionMap=new HashMap<String,String>();    for (    Action action : profileSrc.getAction()) {      actionMap.put(action.getId(),action.getId());    }    Profile profile=new Profile();    profile.setName(profileSrc.getName());    profile.setOrigin(profileSrc.getOrigin());    for (    String actionId : ActionRightIDs.getAllRightIDs()) {      if (!actionMap.containsKey(actionId)) {        Action action=new Action();        action.setId(actionId);        profile.getAction().add(action);      }    }    profiles.getProfile().add(profile);  }  result.setProfiles(profiles);  result.setUserprofiles(auth.getUserprofiles());  return result;}  }
class C{  public ProgressBar(final String text){  if (text == null || text.length() == 0) {    callerText="";  } else {    callerText=text + " ";  }  final FlowPanel body=new FlowPanel();  body.setStyleName(ProgressResources.I.css().container());  msg=new Label(callerText);  msg.setStyleName(ProgressResources.I.css().text());  body.add(msg);  bar=new Label("");  bar.setStyleName(ProgressResources.I.css().bar());  body.add(bar);  initWidget(body);}  }
class C{  public Object[] updateRow(RowId rowId,Object... row) throws IOException {  return updateRow(getDefaultCursor().getRowState(),(RowIdImpl)rowId,row);}  }
class C{  public void run(){  try {    Activator.inheritVeriniceContextState();    checkPermissions(this.elements);    List<String> uuidList=new ArrayList<String>(this.elements.size());    for (    CnATreeElement element : this.elements) {      uuidList.add(element.getUuid());    }    numberOfElements=uuidList.size();    progressObserver.beginTask(Messages.getString("CutService.1",numberOfElements),numberOfElements);    CutCommand cc=new CutCommand(this.selectedGroup.getUuid(),uuidList,getPostProcessorList());    configurePermissions(cc);    cc=getCommandService().executeCommand(cc);    numberOfElements=cc.getNumber();    progressObserver.setTaskName(Messages.getString("CutService.3"));    CnAElementFactory.getInstance().reloadModelFromDatabase();    elementChanges=cc.getChanges();  } catch (  PermissionException e) {    if (log.isDebugEnabled()) {      log.debug(e);    }    throw e;  }catch (  RuntimeException e) {    log.error("RuntimeException while copying element",e);    throw e;  }catch (  Exception e) {    log.error("Error while copying element",e);    throw new RuntimeException("Error while copying element",e);  } finally {    progressObserver.done();  }}  }
class C{  public NormalDistributionFunction2D(double mean,double std){  if (std <= 0) {    throw new IllegalArgumentException("Requires 'std' > 0.");  }  this.mean=mean;  this.std=std;  this.factor=1 / (std * Math.sqrt(2.0 * Math.PI));  this.denominator=2 * std * std;}  }
class C{  void link(double[] xr,double[] xi,double[] Xr,double[] Xi){  this.xr=xr;  this.xi=xi;  this.Xr=Xr;  this.Xi=Xi;}  }
class C{  public void revocarDocumento(String csv){  logger.info("Llamada a revocarDocumento: csv=[{}]",csv);  getDocumentosDelegate().revocarDocumento(csv);}  }
class C{  public SimpleStringProperty dataProperty(){  return data;}  }
class C{  protected void nonseedLine(String line){  publishNonSeedLine(line);}  }
class C{  public boolean dismissPopup(){  if (isShowingPopup()) {    getListPopupWindow().dismiss();    ViewTreeObserver viewTreeObserver=getViewTreeObserver();    if (viewTreeObserver.isAlive()) {      viewTreeObserver.removeOnGlobalLayoutListener(mOnGlobalLayoutListener);    }  }  return true;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.KEY___ANONYMOUS_KEY_11:    return ((InternalEList<?>)getAnonymous_key_1_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void addTestFile(String fileName,ProtocolSession session) throws Exception {  InputStream is=this.getClass().getResourceAsStream(fileName);  if (is == null) {    throw new Exception("Test Resource '" + fileName + "' not found.");  }  try {    addProtocolLinesFromStream(is,session,fileName);  }  finally {    IOUtils.closeQuietly(is);  }}  }
class C{  public static boolean tryUnscramble(Puzzle p,int key_int,byte[] solution){  p.unscrambleKey[0]=(key_int / 1000) % 10;  p.unscrambleKey[1]=(key_int / 100) % 10;  p.unscrambleKey[2]=(key_int / 10) % 10;  p.unscrambleKey[3]=(key_int / 1) % 10;  for (int i=3; i >= 0; i--) {    unscrambleString(p,solution);    System.arraycopy(p.unscrambleBuf,0,solution,0,p.unscrambleBuf.length);    unshiftString(p,solution,p.unscrambleKey[i]);    for (int j=0; j < solution.length; j++) {      int letter=(solution[j] & 0xFF) - p.unscrambleKey[j % 4];      if (letter < 65) {        letter+=26;      }      solution[j]=(byte)letter;    }  }  if (p.solutionChecksum == (short)IO.cksum_region(solution,0,solution.length,0)) {    int s=0;    for (int i=0; i < p.getBoxesList().length; i++) {      Box b=p.getBoxesList()[i];      if (b != null) {        b.setSolution((char)solution[s++]);      }    }    return true;  }  return false;}  }
class C{  public FeaturesReporter(FeaturesConfig config,List<FeaturesExtractor> extractors){  if (extractors == null) {    throw new IllegalArgumentException("Extractors argument shall not be null");  }  if (config == null) {    throw new IllegalArgumentException("Config argument shall not be null");  }  this.config=config;  this.collection=new FeaturesCollection();  for (  FeaturesExtractor extractor : extractors) {    registerFeaturesExtractor(extractor);  }}  }
class C{  public static SimpleDataSet read(Reader reader,char delimiter,int lines_to_skip,char comment,Set<Integer> cat_cols) throws IOException {  return (SimpleDataSet)readCSV(reader,lines_to_skip,delimiter,comment,cat_cols,-1,-1);}  }
class C{  public static Result fromContent(Map content) throws IllegalArgumentException {  if (content == null) {    throw new IllegalArgumentException("content cannot be null");  }  return fromContent(new MapContent(content));}  }
class C{  public void addReference(MessagePart reference){  references.add(reference);}  }
class C{  private double match_bitapScore(int e,int x,int loc,String pattern){  float accuracy=(float)e / pattern.length();  int proximity=Math.abs(loc - x);  if (Match_Distance == 0) {    return proximity == 0 ? accuracy : 1.0;  }  return accuracy + (proximity / (float)Match_Distance);}  }
class C{  public void deleteAll(View v){  try {    int numDeleted=getOps().deleteAll();    Toast.makeText(this,"Deleted " + numDeleted + " Hobbit characters",Toast.LENGTH_SHORT).show();    getOps().displayAll();  } catch (  RemoteException e) {    Log.d(TAG,"exception " + e);  }}  }
class C{  public static int mixColors(float t,int rgb1,int rgb2){  int a1=(rgb1 >> 24) & 0xff;  int r1=(rgb1 >> 16) & 0xff;  int g1=(rgb1 >> 8) & 0xff;  int b1=rgb1 & 0xff;  int a2=(rgb2 >> 24) & 0xff;  int r2=(rgb2 >> 16) & 0xff;  int g2=(rgb2 >> 8) & 0xff;  int b2=rgb2 & 0xff;  a1=lerp(t,a1,a2);  r1=lerp(t,r1,r2);  g1=lerp(t,g1,g2);  b1=lerp(t,b1,b2);  return (a1 << 24) | (r1 << 16) | (g1 << 8)| b1;}  }
class C{  public Mat22(final float exx,final float col2x,final float exy,final float col2y){  ex=new Vec2(exx,exy);  ey=new Vec2(col2x,col2y);}  }
class C{  public void SwitchTo(int lexState){  if (lexState >= 3 || lexState < 0)   throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",TokenMgrError.INVALID_LEXICAL_STATE); else   curLexState=lexState;}  }
class C{  private void emitCode(){  LinkedList<Instantiation> worklist=new LinkedList<Instantiation>();  worklist.add(new Instantiation(null,mainSubroutine));  InsnList newInstructions=new InsnList();  List<TryCatchBlockNode> newTryCatchBlocks=new ArrayList<TryCatchBlockNode>();  List<LocalVariableNode> newLocalVariables=new ArrayList<LocalVariableNode>();  while (!worklist.isEmpty()) {    Instantiation inst=worklist.removeFirst();    emitSubroutine(inst,worklist,newInstructions,newTryCatchBlocks,newLocalVariables);  }  instructions=newInstructions;  tryCatchBlocks=newTryCatchBlocks;  localVariables=newLocalVariables;}  }
class C{  public String prettyString(){  StringBuilder output=new StringBuilder();  for (int i=0; i < numCols - 1; i++) {    output.append(padString(header.get(i),displayAlignment.get(i),maxColLengths.get(i))).append("  ");  }  if (displayAlignment.get(numCols - 1) == Align.Left) {    output.append(header.get(numCols - 1));  } else {    output.append(padString(header.get(numCols - 1),displayAlignment.get(numCols - 1),maxColLengths.get(numCols - 1)));  }  output.append("\n");  output.append(repeatCharacter('-',maxColLengths.get(0)));  for (int i=1; i < numCols; i++) {    output.append("  ").append(repeatCharacter('-',maxColLengths.get(i)));  }  output.append("\n");  for (  List<String> row : data) {    for (int i=0; i < numCols - 1; i++) {      output.append(padString(row.get(i),displayAlignment.get(i),maxColLengths.get(i))).append("  ");    }    if (displayAlignment.get(numCols - 1) == Align.Left) {      output.append(row.get(numCols - 1));    } else {      output.append(padString(row.get(numCols - 1),displayAlignment.get(numCols - 1),maxColLengths.get(numCols - 1)));    }    output.append("\n");  }  return output.toString();}  }
class C{  public void detach(){  if (m_allowDetach && null != m_iterators) {    int n=m_iterators.length;    for (int i=0; i < n; i++) {      m_iterators[i].detach();    }    m_iterators=null;  }}  }
class C{  protected CodeReviewCommit amendGitlink(CodeReviewCommit commit) throws IntegrationException {  if (!args.submoduleOp.hasSubscription(args.destBranch)) {    return commit;  }  try {    return args.submoduleOp.composeGitlinksCommit(args.destBranch,commit);  } catch (  SubmoduleException|IOException e) {    throw new IntegrationException("cannot update gitlink for the commit at branch: " + args.destBranch);  }}  }
class C{  public boolean menuTouchInQuickReturn(View content,int currPage,float x){  if (mMode == SlidingMenu.LEFT || (mMode == SlidingMenu.LEFT_RIGHT && currPage == 0)) {    return x >= content.getLeft();  } else   if (mMode == SlidingMenu.RIGHT || (mMode == SlidingMenu.LEFT_RIGHT && currPage == 2)) {    return x <= content.getRight();  }  return false;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append(toString(getClass()));  buffer.append("[UseDefault=");  buffer.append(isUseDefault());  buffer.append(", UseLocaleFormat=");  buffer.append(useLocaleFormat);  if (displayPatterns != null) {    buffer.append(", Patterns={");    buffer.append(displayPatterns);    buffer.append('}');  }  if (locale != null) {    buffer.append(", Locale=");    buffer.append(locale);  }  if (timeZone != null) {    buffer.append(", TimeZone=");    buffer.append(timeZone);  }  buffer.append(']');  return buffer.toString();}  }
class C{  public String sparseDataTipText(){  return "Encode data as sparse instances.";}  }
class C{  @Override public boolean equals(Object other){  if (_map.equals(other)) {    return true;  } else   if (other instanceof Map) {    Map that=(Map)other;    if (that.size() != _map.size()) {      return false;    } else {      Iterator it=that.entrySet().iterator();      for (int i=that.size(); i-- > 0; ) {        Map.Entry e=(Map.Entry)it.next();        Object key=e.getKey();        Object val=e.getValue();        if (key instanceof Integer) {          int k=unwrapKey(key);          Object v=unwrapValue((V)val);          if (_map.containsKey(k) && v == _map.get(k)) {          } else {            return false;          }        } else {          return false;        }      }      return true;    }  } else {    return false;  }}  }
class C{  protected String checkIndices(){  for (int i=1; i < getNumAttributes() + 1; i++) {    m_booleanCols.isInRange(i);    if (m_booleanCols.isInRange(i) && m_nominalCols.isInRange(i)) {      return "Error in attribute type: Attribute " + i + " is set boolean and nominal.";    }  }  return "";}  }
class C{  private void resetOptions(){  resetOptionLogLevel();  resetOptionAttemptTranslations();  resetOptionPreserveTableIDs();  resetOptionDropSource();  resetOptionOptimizeDatabase();  resetOptionStatus();}  }
class C{  public List<NamedRelatedResourceRep> listByHost(URI hostId){  return getList(PathConstants.INITIATOR_BY_HOST_URL,hostId);}  }
class C{  public int compareTo(XMLString xstr){  int len1=m_length;  int len2=xstr.length();  int n=Math.min(len1,len2);  FastStringBuffer fsb=fsb();  int i=m_start;  int j=0;  while (n-- != 0) {    char c1=fsb.charAt(i);    char c2=xstr.charAt(j);    if (c1 != c2) {      return c1 - c2;    }    i++;    j++;  }  return len1 - len2;}  }
class C{  public SAXRecords ts2saxViaWindowGlobalZNorm(double[] ts,int windowSize,int paaSize,double[] cuts,NumerosityReductionStrategy strategy,double nThreshold) throws SAXException {  SAXRecords saxFrequencyData=new SAXRecords();  char[] previousString=null;  double[] normalizedData=tsProcessor.znorm(ts,nThreshold);  for (int i=0; i <= ts.length - windowSize; i++) {    double[] subSection=Arrays.copyOfRange(normalizedData,i,i + windowSize);    double[] paa=tsProcessor.paa(subSection,paaSize);    char[] currentString=tsProcessor.ts2String(paa,cuts);    if (null != previousString) {      if (NumerosityReductionStrategy.EXACT.equals(strategy) && Arrays.equals(previousString,currentString)) {        continue;      } else       if (NumerosityReductionStrategy.MINDIST.equals(strategy) && checkMinDistIsZero(previousString,currentString)) {        continue;      }    }    previousString=currentString;    saxFrequencyData.add(currentString,i);  }  return saxFrequencyData;}  }
class C{  public ChannelFuture sendOobResponse(Message msg){  return rpcClient.sendOobResponse(serviceName,correlationId,msg);}  }
class C{  public boolean hasUndoSteps(){  return undoIndex > 0;}  }
class C{  public boolean isBIP66(){  return version >= BLOCK_VERSION_BIP66;}  }
class C{  void requestNfcServiceCallback(){  try {    NfcAdapter.sService.setNdefPushCallback(this);  } catch (  RemoteException e) {    mAdapter.attemptDeadServiceRecovery(e);  }}  }
class C{  public int hashCode(){  return this.getName().hashCode();}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:29.841 -0500",hash_original_method="B69BB14B43B673ED175B53A442E5BA52",hash_generated_method="593916AB818176A1FF3DCE8385A308C4") public PKCS5S2ParametersGenerator(){}  }
class C{  public final static <T>Stream<ListX<T>> groupedUntil(final Stream<T> stream,final Predicate<? super T> predicate){  return groupedWhile(stream,predicate.negate());}  }
class C{  public boolean isMult(){  return mult;}  }
class C{  public String consumeTagName(){  int start=pos;  while (!isEmpty() && (matchesWord() || matchesAny(':','_','-')))   pos++;  return queue.substring(start,pos);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:57.936 -0500",hash_original_method="6807F0AF3535B8AAE125BEB8D24FA4BA",hash_generated_method="7DA2859FCE2DEDE70AE86606F0E044B7") protected boolean end(TextView widget,Spannable buffer){  return false;}  }
class C{  public static void recordDefUse(RegisterOperand regOp){  Register reg=regOp.getRegister();  if (SUPRESS_DU_FOR_PHYSICALS && reg.isPhysical())   return;  regOp.setNext(reg.useList);  reg.useList=regOp;}  }
class C{  private SimpleItypeConfig toSimpleItypeConfig(InstrOfferingConfig config,SchedulingSubpart subpart) throws Exception {  ItypeDesc itype=subpart.getItype();  SimpleItypeConfig sic=new SimpleItypeConfig(itype);  boolean isDisabled=setSicProps(config,subpart,sic);  Set s=subpart.getChildSubparts();  Iterator iter=s.iterator();  while (iter.hasNext()) {    SchedulingSubpart child=(SchedulingSubpart)iter.next();    SimpleItypeConfig childSic=toSimpleItypeConfig(config,child);    boolean isDisabledChild=setSicProps(config,child,childSic);    sic.addSubpart(childSic);    if (isDisabledChild)     isDisabled=true;  }  if (isDisabled)   sic.setDisabled(true);  return sic;}  }
class C{  public static boolean isCSSIdentifierStartCharacter(char c){  return c >= 128 || ((IDENTIFIER_START[c >> 5] & (1 << (c & 0x1F))) != 0);}  }
class C{  @Override public String swim(){  return this.getClass().getSimpleName() + " swims under water";}  }
class C{  protected void fill() throws IOException {  checkClosed();  if ((len=in.read(buf)) > 0) {    inf.setInput(buf,0,len);  }}  }
class C{  public void startPrefixMapping(String prefix,String uri) throws org.xml.sax.SAXException {}  }
class C{  private CompletableFuture<QueryResponse> queryForward(QueryRequest request){  if (context.getLeader() == null) {    return CompletableFuture.completedFuture(logResponse(QueryResponse.builder().withStatus(Response.Status.ERROR).withError(CopycatError.Type.NO_LEADER_ERROR).build()));  }  LOGGER.debug("{} - Forwarded {}",context.getCluster().member().address(),request);  return this.<QueryRequest,QueryResponse>forward(request).exceptionally(null).thenApply(null);}  }
class C{  public void testModuleFromPackage() throws Exception {  runPythonTest(new SkeletonTestTask("dotNet/expected.skeleton.java.py","com.just.like.java","import_module_from_package.py",null));}  }
class C{  public DoubleMatrix1D ascending(int size){  cern.jet.math.Functions F=cern.jet.math.Functions.functions;  return descending(size).assign(F.chain(F.neg,F.minus(size)));}  }
class C{  public void compose(StylesheetRoot sroot) throws javax.xml.transform.TransformerException {  super.compose(sroot);  java.util.Vector vnames=sroot.getComposeState().getVariableNames();  if (null != m_matchPattern)   m_matchPattern.fixupVariables(vnames,sroot.getComposeState().getGlobalsSize());  if (null != m_use)   m_use.fixupVariables(vnames,sroot.getComposeState().getGlobalsSize());}  }
class C{  @Override protected void onUnknown(String line){  Message message=new Message(line);  message.setIcon(R.drawable.action);  message.setColor(Message.COLOR_GREY);  server.getConversation(ServerInfo.DEFAULT_NAME).addMessage(message);  Intent intent=Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),ServerInfo.DEFAULT_NAME);  service.sendBroadcast(intent);}  }
class C{  private void writeDataToDestination(State state,byte[] data,int bytesRead) throws StopRequest {  for (; ; ) {    try {      if (state.mStream == null) {        state.mStream=new FileOutputStream(state.mFilename,true);      }      state.mStream.write(data,0,bytesRead);      closeDestination(state);      return;    } catch (    IOException ex) {      if (!Helpers.isExternalMediaMounted()) {        throw new StopRequest(DownloaderService.STATUS_DEVICE_NOT_FOUND_ERROR,"external media not mounted while writing destination file");      }      long availableBytes=Helpers.getAvailableBytes(Helpers.getFilesystemRoot(state.mFilename));      if (availableBytes < bytesRead) {        throw new StopRequest(DownloaderService.STATUS_INSUFFICIENT_SPACE_ERROR,"insufficient space while writing destination file",ex);      }      throw new StopRequest(DownloaderService.STATUS_FILE_ERROR,"while writing destination file: " + ex.toString(),ex);    }  }}  }
class C{  public ExceptionMessage create(ExceptionContext exceptionContext){  ExceptionMessage returnValue;  returnValue=new ExceptionMessage(m_exceptionMessage);  returnValue.addExceptionContext(exceptionContext);  return returnValue;}  }
class C{  public boolean isStatic(){  return false;}  }
class C{  @Override protected boolean doDoneAction(){  String subFamily=_key;  if (_family != null && _family.equals(subFamily)) {    ItemPalette.removeLevel4IconMap(_type,_parent._family,subFamily);  }  jmri.jmrit.catalog.ImageIndexEditor.indexChanged(true);  return addFamilySet(_parent._family,_iconMap,subFamily);}  }
class C{  static Observable<FingerprintAuthenticationResult> create(Context context){  return Observable.create(new FingerprintAuthenticationObservable(context));}  }
class C{  private void initialize(){  this.setVisible(false);  this.setResizable(false);  this.setTitle(Constant.messages.getString("edit.find.title"));  this.setContentPane(getJPanel());  if (Model.getSingleton().getOptionsParam().getViewParam().getWmUiHandlingOption() == 0) {    this.setSize(261,111);  }  centreDialog();  txtFind.requestFocus();  this.getRootPane().setDefaultButton(btnFind);  pack();}  }
class C{  public static void main(String[] args){  char[] board;  do {    board=getNewBoard();    placeQueens(board);  } while (isAttacking(board));  print(board);}  }
class C{  public static String fileContentsToString(String file){  String contents="";  File f=new File(file);  if (f.exists()) {    try {      FileReader fr=new FileReader(f);      char[] template=new char[(int)f.length()];      fr.read(template);      contents=new String(template);    } catch (    Exception e) {      System.out.println(e);      e.printStackTrace();    }  }  return contents;}  }
class C{  public PowerContainerVmAllocationPolicyMigrationStaticThresholdMCUnderUtilized(List<? extends ContainerHost> hostList,PowerContainerVmSelectionPolicy vmSelectionPolicy,PowerContainerSelectionPolicy containerSelectionPolicy,HostSelectionPolicy hostSelectionPolicy,double utilizationThreshold,double underUtilizationThresh,int numberOfVmTypes,int[] vmPes,float[] vmRam,long vmBw,long vmSize,double[] vmMips){  super(hostList,vmSelectionPolicy,containerSelectionPolicy,hostSelectionPolicy,underUtilizationThresh,numberOfVmTypes,vmPes,vmRam,vmBw,vmSize,vmMips);  setUtilizationThreshold(utilizationThreshold);}  }
class C{  public final void push(String s){  if ((m_firstFree + 1) >= m_mapSize) {    m_mapSize+=m_blocksize;    String newMap[]=new String[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  m_map[m_firstFree]=s;  m_firstFree++;}  }
class C{  @Deprecated public Object eval(String code,FrameInstance frameInstance) throws IOException {  verifyValidState(false);  return DebuggerSession.evalInContext(this,code,frameInstance);}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testNodeProcessing() throws Exception {  InvertIndexArray<String,String> oper=new InvertIndexArray<String,String>();  CollectorTestSink indexSink=new CollectorTestSink();  Sink inSink=oper.data.getSink();  oper.index.setSink(indexSink);  oper.beginWindow(0);  HashMap<String,ArrayList> input=new HashMap<String,ArrayList>();  ArrayList<String> alist=new ArrayList<String>();  alist.add("str");  alist.add("str1");  input.put("a",alist);  input.put("b",alist);  inSink.put(input);  alist=new ArrayList<String>();  input=new HashMap<String,ArrayList>();  alist.add("blah");  alist.add("str1");  input.put("c",alist);  inSink.put(input);  oper.endWindow();  Assert.assertEquals("number emitted tuples",3,indexSink.collectedTuples.size());  for (  Object o : indexSink.collectedTuples) {    log.debug(o.toString());    HashMap<String,ArrayList<String>> output=(HashMap<String,ArrayList<String>>)o;    for (    Map.Entry<String,ArrayList<String>> e : output.entrySet()) {      String key=e.getKey();      alist=e.getValue();      if (key.equals("str1")) {        Assert.assertEquals("Index for \"str1\" contains \"a\"",true,alist.contains("a"));        Assert.assertEquals("Index for \"str1\" contains \"b\"",true,alist.contains("b"));        Assert.assertEquals("Index for \"str1\" contains \"c\"",true,alist.contains("c"));      } else       if (key.equals("str")) {        Assert.assertEquals("Index for \"str1\" contains \"a\"",true,alist.contains("a"));        Assert.assertEquals("Index for \"str1\" contains \"b\"",true,alist.contains("b"));        Assert.assertEquals("Index for \"str1\" contains \"c\"",false,alist.contains("c"));      } else       if (key.equals("blah")) {        Assert.assertEquals("Index for \"str1\" contains \"a\"",false,alist.contains("a"));        Assert.assertEquals("Index for \"str1\" contains \"b\"",false,alist.contains("b"));        Assert.assertEquals("Index for \"str1\" contains \"c\"",true,alist.contains("c"));      }    }  }}  }
class C{  public static String toAttrModelingModelClass(String regularClass){  return ValueAnalysis.MODEL_PACKAGE_PREFIX + regularClass;}  }
class C{  public void startImsServices() throws PayloadException, NetworkException, ContactManagerException {  for (  ImsService imsService : mServices.values()) {    if (imsService.isActivated()) {      if (sLogger.isActivated()) {        sLogger.info("Start IMS service: ".concat(imsService.getClass().getName()));      }      imsService.start();    }  }  getCallManager().connectionEvent(true);}  }
class C{  public StreamImpl openReadImpl() throws IOException {  throw new FileNotFoundException(getURL());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:42.487 -0500",hash_original_method="FB0497E5D9550DB51E743204446EFE6C",hash_generated_method="E71308111C5DA8DA3F027CA04BAFE3A4") public SIPHeader parse() throws ParseException {  AcceptLanguageList acceptLanguageList=new AcceptLanguageList();  if (debug)   dbg_enter("AcceptLanguageParser.parse");  try {    headerName(TokenTypes.ACCEPT_LANGUAGE);    while (lexer.lookAhead(0) != '\n') {      AcceptLanguage acceptLanguage=new AcceptLanguage();      acceptLanguage.setHeaderName(SIPHeaderNames.ACCEPT_LANGUAGE);      if (lexer.lookAhead(0) != ';') {        lexer.match(TokenTypes.ID);        Token value=lexer.getNextToken();        acceptLanguage.setLanguageRange(value.getTokenValue());      }      while (lexer.lookAhead(0) == ';') {        this.lexer.match(';');        this.lexer.SPorHT();        this.lexer.match('q');        this.lexer.SPorHT();        this.lexer.match('=');        this.lexer.SPorHT();        lexer.match(TokenTypes.ID);        Token value=lexer.getNextToken();        try {          float fl=Float.parseFloat(value.getTokenValue());          acceptLanguage.setQValue(fl);        } catch (        NumberFormatException ex) {          throw createParseException(ex.getMessage());        }catch (        InvalidArgumentException ex) {          throw createParseException(ex.getMessage());        }        this.lexer.SPorHT();      }      acceptLanguageList.add(acceptLanguage);      if (lexer.lookAhead(0) == ',') {        this.lexer.match(',');        this.lexer.SPorHT();      } else       this.lexer.SPorHT();    }  }  finally {    if (debug)     dbg_leave("AcceptLanguageParser.parse");  }  return acceptLanguageList;}  }
class C{  @Inject public AngularJSHtmlCodeAssistProcessor(AngularJSResources angularJSResources){  this.angularJSResources=angularJSResources;}  }
class C{  private void refreshStimulusPanel(){  stimulusPanel.removeAll();  stimulusVals=new JTextField[valArray.length];  updateStimulusPanel();  stimulusPanel.updateUI();  tfStimulusNum.setText(Integer.toString(valArray.length));}  }
class C{  public void runTask(final Runnable task){  futuresStack.push(executorService.submit(task));}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildVillage(zone);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 10:08:20.851 -0400",hash_original_method="11748C20547E1BDC2B9C0BC890EBDA17",hash_generated_method="56A8113A80A053F06991A358F93E8F80") public static String htmlEncode(String s){  StringBuilder sb=new StringBuilder();  char c;  for (int i=0; i < s.length(); i++) {    c=s.charAt(i);switch (c) {case '<':      sb.append("&lt;");    break;case '>':  sb.append("&gt;");break;case '&':sb.append("&amp;");break;case '\'':sb.append("&#39;");break;case '"':sb.append("&quot;");break;default :sb.append(c);}}return sb.toString();}  }
class C{  private AttackableCreature pickSuitableCreature(final int playerlevel){  final EntityManager manager=SingletonRepository.getEntityManager();  final Collection<Creature> creatures=manager.getCreatures();  final List<Creature> possibleCreatures=new ArrayList<Creature>();  for (  final Creature creature : creatures) {    if (creature.getLevel() <= LEVEL_FACTOR * playerlevel && creature.get("class").equals("undead") && !creature.isRare()) {      possibleCreatures.add(creature);    }  }  if (!possibleCreatures.isEmpty()) {    return new AttackableCreature(Rand.rand(possibleCreatures));  }  return null;}  }
class C{  @Override public void onCreate(){  super.onCreate();  this.binder=new DownloadServiceBinder();}  }
class C{  public void removeEventListener(VSDecoderListener listener){  listenerList.remove(VSDecoderListener.class,listener);}  }
class C{  public static int intHash(long a){  if (false) {    int hash=((int)(a >> 32)) ^ ((int)a);    if (a < 0) {      hash=-hash - 1;    }    return hash;  }  int hash=((int)(a >> 32)) + ((int)a);  if (a < 0) {    hash++;  }  return hash;}  }
class C{  public AssertionError(double detailMessage){  this(String.valueOf(detailMessage));}  }
class C{  public void close(){  mDbHelper.getWritableDatabase().close();}  }
class C{  public IndependenceFact(Node x,Node y,List<Node> z){  if (x == null || y == null || z == null) {    throw new NullPointerException();  }  this.x=x;  this.y=y;  this._z=new HashSet<>(z);}  }
class C{  public java.lang.StringBuilder append(java.lang.String str){  return null;}  }
class C{  public boolean includeSeconds(){  return preferences.getBoolean(resources.getString(R.string.key_include_seconds),Boolean.parseBoolean(resources.getString(R.string.default_include_seconds)));}  }
class C{  @PUT @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{snapshot_id}/metadata") @CheckPermission(roles={Role.SYSTEM_MONITOR,Role.TENANT_ADMIN},acls={ACL.ANY}) public CinderSnapshotMetadata updateSnapshotMetadata(@PathParam("tenant_id") String openstack_tenant_id,@PathParam("snapshot_id") String snapshot_id,CinderSnapshotMetadata param){  BlockSnapshot snap=findSnapshot(snapshot_id,openstack_tenant_id);  if (snap == null) {    throw APIException.badRequests.parameterIsNotValid(snapshot_id);  }  Map<String,String> metaMap=param.metadata;  StringMap extensions=snap.getExtensions();  if (extensions == null) {    extensions=new StringMap();  }  _log.debug("Update snapshot metadata:CLEARED extensions {}",extensions);  for (  String mapEntry : metaMap.keySet()) {    String value=metaMap.get(mapEntry);    extensions.put("METADATA_" + mapEntry,value);  }  snap.setExtensions(extensions);  _dbClient.updateObject(snap);  return getSnapshotMetadataDetail(snap);}  }
class C{  public AsyncRequest requestStatusHandler(RequestStatusHandler handler){  this.asyncTaskStatusHandler=handler;  return this;}  }
class C{  private boolean verifyValueRangeLowerBoundInput(JComponent input){  JTextField textField=(JTextField)input;  String inputString=textField.getText();  try {    double valueLowerBound;    if (inputString.startsWith("-")) {      valueLowerBound=Double.parseDouble(inputString.substring(1));      valueLowerBound=-valueLowerBound;    } else {      valueLowerBound=Double.parseDouble(inputString);    }  } catch (  NumberFormatException e) {    textField.setForeground(Color.RED);    return false;  }  textField.setForeground(Color.BLACK);  return true;}  }
class C{  public Anonymous_traceEntity_1_ createAnonymous_traceEntity_1_(){  Anonymous_traceEntity_1_Impl anonymous_traceEntity_1_=new Anonymous_traceEntity_1_Impl();  return anonymous_traceEntity_1_;}  }
class C{  public static String X509CertToString(String cert){  String cert64CharPerLine=cert.replaceAll("(.{64})","$1\n");  return BEGIN_CERT + "\n" + cert64CharPerLine+ "\n"+ END_CERT+ "\n";}  }
class C{  protected Alarm(){  this("alarm");}  }
class C{  private void convertInstance(Instance instance) throws Exception {  Instance inst=null;  if (instance instanceof SparseInstance) {    double[] newVals=new double[instance.numAttributes()];    int[] newIndices=new int[instance.numAttributes()];    double[] vals=instance.toDoubleArray();    int ind=0;    for (int j=0; j < instance.numAttributes(); j++) {      double value;      if (instance.attribute(j).isNumeric() && (!Utils.isMissingValue(vals[j])) && (getInputFormat().classIndex() != j)) {        if (m_StdDevs[j] > 0) {          value=(vals[j] - m_Means[j]) / m_StdDevs[j];        } else {          value=vals[j] - m_Means[j];        }        if (Double.isNaN(value)) {          throw new Exception("A NaN value was generated " + "while standardizing attribute " + instance.attribute(j).name());        }        if (value != 0.0) {          newVals[ind]=value;          newIndices[ind]=j;          ind++;        }      } else {        value=vals[j];        if (value != 0.0) {          newVals[ind]=value;          newIndices[ind]=j;          ind++;        }      }    }    double[] tempVals=new double[ind];    int[] tempInd=new int[ind];    System.arraycopy(newVals,0,tempVals,0,ind);    System.arraycopy(newIndices,0,tempInd,0,ind);    inst=new SparseInstance(instance.weight(),tempVals,tempInd,instance.numAttributes());  } else {    double[] vals=instance.toDoubleArray();    for (int j=0; j < getInputFormat().numAttributes(); j++) {      if (instance.attribute(j).isNumeric() && (!Utils.isMissingValue(vals[j])) && (getInputFormat().classIndex() != j)) {        if (m_StdDevs[j] > 0) {          vals[j]=(vals[j] - m_Means[j]) / m_StdDevs[j];        } else {          vals[j]=(vals[j] - m_Means[j]);        }        if (Double.isNaN(vals[j])) {          throw new Exception("A NaN value was generated " + "while standardizing attribute " + instance.attribute(j).name());        }      }    }    inst=new DenseInstance(instance.weight(),vals);  }  inst.setDataset(instance.dataset());  push(inst);}  }
class C{  public void printNames(String names,Comparator<Monitor> comparator,boolean showUnsupported,PrintStream out) throws MonitorException, PatternSyntaxException {  List<Monitor> items=monitoredVm.findByPattern(names);  Collections.sort(items,comparator);  for (  Monitor m : items) {    if (!(m.isSupported() || showUnsupported)) {      continue;    }    out.println(m.getName());  }}  }
class C{  private <T extends IgfsManager>T add(@Nullable T mgr){  if (mgr != null)   mgrs.add(mgr);  return mgr;}  }
class C{  void jbInit() throws Exception {  this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);  titledBorder2=new TitledBorder(BorderFactory.createEtchedBorder(Color.white,new Color(148,145,140)),Msg.getMsg(Env.getCtx(),"ScriptEditor"));  mainPanel.setLayout(borderLayout1);  bOK.addActionListener(this);  bCancel.addActionListener(this);  bProcess.addActionListener(this);  bHelp.addActionListener(this);  editorPane.setBorder(titledBorder2);  editorPane.setPreferredSize(new Dimension(500,500));  southPanel.setLayout(southLayout);  resultPanel.setLayout(resultLayout);  lResult.setText(Msg.getMsg(Env.getCtx(),"ScriptResult"));  fResult.setBackground(Color.lightGray);  fResult.setEditable(false);  fResult.setText("");  okPanel.setLayout(okLayout);  getContentPane().add(mainPanel);  editorPane.getViewport().add(editor,null);  mainPanel.add(southPanel,BorderLayout.SOUTH);  southPanel.add(okPanel,BorderLayout.EAST);  okPanel.add(bCancel,null);  okPanel.add(bOK,null);  southPanel.add(resultPanel,BorderLayout.CENTER);  resultPanel.add(bProcess,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  resultPanel.add(lResult,new GridBagConstraints(1,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  resultPanel.add(fResult,new GridBagConstraints(2,0,1,1,1.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(5,5,5,5),0,0));  resultPanel.add(bHelp,new GridBagConstraints(3,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(5,5,5,5),0,0));  mainPanel.add(editorPane,BorderLayout.CENTER);}  }
class C{  public SAMLRedirectURLException(){}  }
class C{  public static void main(String[] args){  doMain(args);}  }
class C{  public void dispose(StepMetaInterface smi,StepDataInterface sdi){  meta=(CarbonSliceMergerStepMeta)smi;  data=(CarbonSliceMergerStepData)sdi;  super.dispose(smi,sdi);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private static void drawTriangleUp(Graphics gx,double x,double y,int size){  gx.drawLine((int)(x),(int)(y - size),(int)(x - size),(int)(y + size));  gx.drawLine((int)(x - size),(int)(y + size),(int)(x + size),(int)(y + size));  gx.drawLine((int)(x + size),(int)(y + size),(int)(x),(int)(y - size));}  }
class C{  static GramBooleanQuery simplifyDNF(GramBooleanQuery query){  GramBooleanQuery result=applyAbsorption(query);  result=replaceWithChild(result);  return result;}  }
class C{  public static void writeAttribute(final XMLStreamWriter writer,final String attributeName,final long value) throws XMLStreamException {  writer.writeAttribute(attributeName,XMLConvert.toString(value));}  }
class C{  void cancelMigrations(List<String> migrationNames,boolean cleanup,boolean remove) throws VPlexApiException {  s_logger.info("Canceling migrations {}",migrationNames);  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  List<VPlexMigrationInfo> migrationInfoList=discoveryMgr.findMigrations(migrationNames);  StringBuilder migrationArgBuilder=new StringBuilder();  for (  VPlexMigrationInfo migrationInfo : migrationInfoList) {    String migrationStatus=migrationInfo.getStatus();    if ((VPlexApiConstants.MIGRATION_CANCELED.equals(migrationStatus)) || (VPlexApiConstants.MIGRATION_PART_CANCELED.equals(migrationStatus))) {      continue;    } else     if ((!VPlexApiConstants.MIGRATION_PAUSED.equals(migrationStatus)) && (!VPlexApiConstants.MIGRATION_INPROGRESS.equals(migrationStatus)) && (!VPlexApiConstants.MIGRATION_COMPLETE.equals(migrationStatus))&& (!VPlexApiConstants.MIGRATION_ERROR.equals(migrationStatus))&& (!VPlexApiConstants.MIGRATION_QUEUED.equals(migrationStatus))) {      throw VPlexApiException.exceptions.cantCancelMigrationInvalidState(migrationInfo.getName());    }    if (migrationArgBuilder.length() != 0) {      migrationArgBuilder.append(",");    }    migrationArgBuilder.append(migrationInfo.getPath());  }  String migrationPaths=migrationArgBuilder.toString();  if (migrationPaths.length() == 0) {    s_logger.info("All requested migrations are already canceled or " + "in the process of being canceled.");    return;  }  URI requestURI=_vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_CANCEL_MIGRATIONS);  s_logger.info("Cancel migrations URI is {}",requestURI.toString());  ClientResponse response=null;  try {    s_logger.info("Canceling migrations");    Map<String,String> argsMap=new HashMap<String,String>();    argsMap.put(VPlexApiConstants.ARG_DASH_M,migrationArgBuilder.toString());    JSONObject postDataObject=VPlexApiUtils.createPostData(argsMap,true);    s_logger.info("Cancel migrations POST data is {}",postDataObject.toString());    response=_vplexApiClient.post(requestURI,postDataObject.toString());    String responseStr=response.getEntity(String.class);    s_logger.info("Cancel migrations response is {}",responseStr);    if (response.getStatus() != VPlexApiConstants.SUCCESS_STATUS) {      if (response.getStatus() == VPlexApiConstants.ASYNC_STATUS) {        s_logger.info("Cancel migrations is completing asynchronously");        _vplexApiClient.waitForCompletion(response);      } else {        String cause=VPlexApiUtils.getCauseOfFailureFromResponse(responseStr);        throw VPlexApiException.exceptions.cancelMigrationsFailureStatus(migrationNames,String.valueOf(response.getStatus()),cause);      }    }    s_logger.info("Successfully canceled migrations {}",migrationNames);    if (cleanup) {      VPlexApiVirtualVolumeManager virtualVolumeMgr=_vplexApiClient.getVirtualVolumeManager();      for (      VPlexMigrationInfo migrationInfo : migrationInfoList) {        try {          String targetName=migrationInfo.getTarget();          if (migrationInfo.getIsDeviceMigration()) {            virtualVolumeMgr.deleteLocalDevice(targetName);          } else {            virtualVolumeMgr.deleteExtent(targetName);          }        } catch (        VPlexApiException vae) {          s_logger.error("Error cleaning target for canceled migration {}:{}",migrationInfo.getName(),vae.getMessage());        }      }    }    if (remove) {      try {        removeCommittedOrCanceledMigrations(migrationArgBuilder.toString());      } catch (      VPlexApiException vae) {        s_logger.error("Error removing migration records after successful cancel: {}",vae.getMessage(),vae);      }    }  } catch (  VPlexApiException vae) {    throw vae;  }catch (  Exception e) {    throw VPlexApiException.exceptions.failedCancelMigrations(migrationNames,e);  } finally {    if (response != null) {      response.close();    }  }}  }
class C{  public boolean isLabelVisible(){  return this.labelVisible;}  }
class C{  public SimpleTimeLimiter(ExecutorService executor){  this.executor=checkNotNull(executor);}  }
class C{  public static boolean containsRaGroupName(StringSet grpNames,String label){  for (  String name : grpNames) {    if (name.equalsIgnoreCase(label)) {      return true;    }  }  return false;}  }
class C{  static public IanaLanguageTag find(LanguageTag t){  if (t.subtags.length < 2) {    return null;  }  IanaLanguageTag matches[]=(IanaLanguageTag[])all.get(t.subtags[1]);  if (matches == null) {    return null;  }  nextMatch:   for (int i=0; i < matches.length; i++) {    if (t.subtags.length >= matches[i].subtags.length) {      for (int j=0; j < matches[i].subtags.length; j++) {        if (!t.subtags[j].equals(matches[i].subtags[j]))         continue nextMatch;      }      return matches[i];    }  }  return null;}  }
class C{  private void loadCredentialsClicked(){  requestCredentials();}  }
class C{  public void loadConfigForID(String modid){  ConfigContainer configContainer=this.configContainers.get(modid);  if (configContainer != null) {    configContainer.load();  }}  }
class C{  public static int[] intArray(Collection<Integer> set){  if (set == null) {    return new int[0];  }  int[] result=new int[set.size()];  int index=0;  for (  Integer value : set) {    result[index++]=value;  }  return result;}  }
class C{  protected AsyncHttpRequest newAsyncHttpRequest(DefaultHttpClient client,HttpContext httpContext,HttpUriRequest uriRequest,String contentType,ResponseHandlerInterface responseHandler,Context context){  return new AsyncHttpRequest(client,httpContext,uriRequest,responseHandler);}  }
class C{  public static void updateNodes(PathDataNode[] target,PathDataNode[] source){  for (int i=0; i < source.length; i++) {    target[i].mType=source[i].mType;    for (int j=0; j < source[i].mParams.length; j++) {      target[i].mParams[j]=source[i].mParams[j];    }  }}  }
class C{  public void testBug9769() throws Exception {  boolean defaultPatternConfig=((com.mysql.jdbc.Connection)this.conn).getNullNamePatternMatchesAll();  if (this.conn.getMetaData().getDriverMajorVersion() == 3 && this.conn.getMetaData().getDriverMinorVersion() >= 2) {    assertEquals(false,defaultPatternConfig);  } else {    assertEquals(true,defaultPatternConfig);  }  try {    this.conn.getMetaData().getProcedures(this.conn.getCatalog(),"%",null);    if (!defaultPatternConfig) {      fail("Exception should've been thrown");    }  } catch (  SQLException sqlEx) {    if (!defaultPatternConfig) {      assertEquals(SQLError.SQL_STATE_ILLEGAL_ARGUMENT,sqlEx.getSQLState());    } else {      throw sqlEx;    }  }}  }
class C{  @SideEffectFree public InputSource(InputStream byteStream){  setByteStream(byteStream);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.618 -0400",hash_original_method="DD2FEACFBC451CD61B40E6EB3CDE5668",hash_generated_method="94A9868306918A882FF5FEC269365CA6") public HexDump(){  super();}  }
class C{  private void resetAnimations(){  for (int i=0; i < getItemCount(); i++) {    resetTextAnimation(mTextWrapper.getChildAt(i));    if (i == 0) {      resetSideAnimation(mMenuWrapper.getChildAt(i));    } else {      resetVerticalAnimation(mMenuWrapper.getChildAt(i),false);    }  }}  }
class C{  public ASN1Explicit(int tagNumber,ASN1Type type){  this(CLASS_CONTEXTSPECIFIC,tagNumber,type);}  }
class C{  protected void cut(Node x,Node y){  x.left.right=x.right;  x.right.left=x.left;  y.degree--;  if (y.child == x) {    y.child=x.right;  }  if (y.degree == 0) {    y.child=null;  }  x.left=min;  x.right=min.right;  min.right=x;  x.right.left=x;  x.parent=null;  x.mark=false;}  }
class C{  public boolean isWhitespace(){  return (glyphType & 0x4) == WHITESPACE;}  }
class C{  AVA(Reader in,int format) throws IOException {  this(in,format,Collections.<String,String>emptyMap());}  }
class C{  @Override protected double update(V v){  collectDisappearingPotential(v);  double v_auth=0;  for (  E e : graph.getInEdges(v)) {    int incident_count=getAdjustedIncidentCount(e);    for (    V w : graph.getIncidentVertices(e)) {      if (!w.equals(v) || hyperedges_are_self_loops)       v_auth+=(getCurrentValue(w).hub * getEdgeWeight(w,e).doubleValue() / incident_count);    }  }  double v_hub=0;  for (  E e : graph.getOutEdges(v)) {    int incident_count=getAdjustedIncidentCount(e);    for (    V w : graph.getIncidentVertices(e)) {      if (!w.equals(v) || hyperedges_are_self_loops)       v_hub+=(getCurrentValue(w).authority * getEdgeWeight(w,e).doubleValue() / incident_count);    }  }  if (alpha > 0) {    v_auth=v_auth * (1 - alpha) + getVertexPrior(v).authority * alpha;    v_hub=v_hub * (1 - alpha) + getVertexPrior(v).hub * alpha;  }  setOutputValue(v,new HITS.Scores(v_hub,v_auth));  return Math.max(Math.abs(getCurrentValue(v).hub - v_hub),Math.abs(getCurrentValue(v).authority - v_auth));}  }
class C{  public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {  return left.lessThan(right) ? XBoolean.S_TRUE : XBoolean.S_FALSE;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:35.691 -0500",hash_original_method="F17D438485F30D6AF41BADA0EDB398DD",hash_generated_method="31B46AE0A8FB4E15B2C007D27DFC9D2F") public boolean isComplete(){  String s=getParameter("stale");  if ("true".equalsIgnoreCase(s)) {    return false;  } else {    return this.complete;  }}  }
class C{  public Event createEvent(){  EventImpl event=new EventImpl();  return event;}  }
class C{  public boolean isCompatibleWith(String desiredVersion) throws NumberFormatException {  if (jar != null) {    init();  }  if (specVersion == null || specVersion.length() == 0) {    throw new NumberFormatException("No specification version defined for the package");  }  if (!specVersion.matches("[\\p{javaDigit}]+(.[\\p{javaDigit}]+)*")) {    throw new NumberFormatException("Package specification version is not of the correct dotted form : " + specVersion);  }  if (desiredVersion == null || desiredVersion.length() == 0) {    throw new NumberFormatException("Empty version to check");  }  if (!desiredVersion.matches("[\\p{javaDigit}]+(.[\\p{javaDigit}]+)*")) {    throw new NumberFormatException("Desired version is not of the correct dotted form : " + desiredVersion);  }  StringTokenizer specVersionTokens=new StringTokenizer(specVersion,".");  StringTokenizer desiredVersionTokens=new StringTokenizer(desiredVersion,".");  try {    while (specVersionTokens.hasMoreElements()) {      int desiredVer=Integer.parseInt(desiredVersionTokens.nextToken());      int specVer=Integer.parseInt(specVersionTokens.nextToken());      if (specVer != desiredVer) {        return specVer > desiredVer;      }    }  } catch (  NoSuchElementException e) {  }  while (desiredVersionTokens.hasMoreTokens()) {    if (0 != Integer.parseInt(desiredVersionTokens.nextToken())) {      return false;    }  }  return true;}  }
class C{  @Transactional(readOnly=true) public List<Cheque> attentionCheques(){  return chequeRepository.findByReturnedToClientStatusFalseAndReadyStatusFalseAndDiagnosticsIsNull();}  }
class C{  public T caseAttribute(Attribute object){  return null;}  }
class C{  public static boolean isInsideNonZero(int cross){  return cross != 0;}  }
class C{  public void put(String key,InputStream stream){  put(key,stream,null);}  }
class C{  private static long computeRenewTime(long grantTime,long duration){  return grantTime + (duration / 2);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapsetnameditemns08.class,args);}  }
class C{  @Override public void writeToNBT(NBTTagCompound par1NBTTagCompound){  super.writeToNBT(par1NBTTagCompound);  par1NBTTagCompound.setInteger("explosiveID",this.explosiveID);  par1NBTTagCompound.setTag("data",this.nbtData);}  }
class C{  public boolean hasUpdated(){  return getUpdated() != null;}  }
class C{  @Override public void instanceIsActive(){  LOG.info("Reacting to active state: initializing Kafka consumers");  startConsumers(executors);}  }
class C{  public boolean inTransaction() throws SQLException {  return getGDSHelper().inTransaction();}  }
class C{  public static Pattern bitwiseNegate(CharSequence self){  return Pattern.compile(self.toString());}  }
class C{  public MLOutput execute(String dmlScriptFilePath,scala.collection.immutable.Map<String,String> namedArgs) throws IOException, DMLException, ParseException {  return execute(dmlScriptFilePath,new HashMap<String,String>(scala.collection.JavaConversions.mapAsJavaMap(namedArgs)));}  }
class C{  void paintVerScrollbar(Graphics g,boolean paintAll){  int h=height - (hsbVis ? (SCROLLBAR_AREA - 2) : 0);  paintScrollBar(vsb,g,width - SCROLLBAR_WIDTH,0,SCROLLBAR_WIDTH - 2,h,paintAll);}  }
class C{  private Map.Entry<List<String>,Map<String,Document>> generateIndexDocuments(int ndocs,boolean requiresContexts){  Map<String,Document> docs=new HashMap<>();  List<String> invalidDocTerms=new ArrayList<>();  for (int i=0; i < ndocs; i++) {    Document doc=new Document();    boolean invalidDoc=false;    Field field=null;    if (usually()) {      field=new TextField(FIELD_NAME,"field_" + i,Field.Store.YES);      doc.add(field);    } else {      invalidDoc=true;    }    if (usually()) {      Field payload=new StoredField(PAYLOAD_FIELD_NAME,new BytesRef("payload_" + i));      doc.add(payload);    }    if (requiresContexts || usually()) {      if (usually()) {        for (int j=0; j < atLeast(2); j++) {          doc.add(new StoredField(CONTEXT_FIELD_NAME,new BytesRef("context_" + i + "_"+ j)));        }      }    }    if (usually()) {      Field weight=(rarely()) ? new StoredField(WEIGHT_FIELD_NAME,100d + i) : new NumericDocValuesField(WEIGHT_FIELD_NAME,100 + i);      doc.add(weight);    }    String term=null;    if (invalidDoc) {      term=(field != null) ? field.stringValue() : "invalid_" + i;      invalidDocTerms.add(term);    } else {      term=field.stringValue();    }    docs.put(term,doc);  }  return new SimpleEntry<>(invalidDocTerms,docs);}  }
class C{  public boolean forwardIfCurrent(char c){  if (isCurrent(c)) {    pos++;    return true;  }  return false;}  }
class C{  public synchronized void fine(String msg){  LogRecord record=new LogRecord(Level.FINE,msg);  log(record);}  }
class C{  public void uncolorize(final int level,final long offset,final int size){  Preconditions.checkArgument(offset >= 0,"Error: Offset can't be negative");  Preconditions.checkArgument(size > 0,"Error: Size must be positive");  Preconditions.checkArgument((level >= 0) && (level < m_coloredRanges.length),"Error: Invalid level");  m_coloredRanges[level].removeRange(offset,size);  repaint();}  }
class C{  protected void resetFileLists(){  compileList.clear();}  }
class C{  public static X500Name x500PrincipalToX500Name(X500Principal principal){  return X500Name.getInstance(KseX500NameStyle.INSTANCE,principal.getEncoded());}  }
class C{  public IgfsMode mode(IgfsPath path){  return modeRslvr.resolveMode(path);}  }
class C{  private void toCharString(){  String hexText=pubData.getText();  if (hexText.length() % 2 != 0) {    mqttMgr.setTitleText("Odd number of hex characters!");  } else {    try {      byte[] charArray=new byte[hexText.length() / 2];      for (int i=0; i < charArray.length; i++) {        charArray[i]=(byte)Integer.parseInt(hexText.substring(i * 2,(i * 2) + 2),16);      }      hexDisplay=false;      pubLabel.setText(PANEL_TITLE + " - text display");      mqttMgr.setTitleText("");      hexButton.setText("Hex");      pubData.setText(new String(charArray));    } catch (    NumberFormatException nfe) {      mqttMgr.setTitleText("Invalid hexadecimal data!");    }  }}  }
class C{  private ObservableUtil(){  instanceNotAllowed(getClass());}  }
class C{  public Element store(Object o){  adapter=((ConnectionConfig)o).getAdapter();  Element e=new Element("connection");  if (adapter.getCurrentPortName() != null) {    e.setAttribute("port",adapter.getCurrentPortName());  } else {    e.setAttribute("port",rb.getString("noneSelected"));  }  if (adapter.getManufacturer() != null) {    e.setAttribute("manufacturer",adapter.getManufacturer());  }  if (adapter.getSystemConnectionMemo() != null) {    e.setAttribute("userName",adapter.getSystemConnectionMemo().getUserName());    e.setAttribute("systemPrefix",adapter.getSystemConnectionMemo().getSystemPrefix());  }  if (adapter.getDisabled()) {    e.setAttribute("disabled","yes");  } else {    e.setAttribute("disabled","no");  }  saveOptions(e,adapter);  e.setAttribute("class",this.getClass().getName());  return e;}  }
class C{  public static GasStack removeGas(ItemStack itemStack,Gas type,int amount){  if (itemStack != null && itemStack.getItem() instanceof IGasItem) {    IGasItem item=(IGasItem)itemStack.getItem();    if (type != null && item.getGas(itemStack) != null && item.getGas(itemStack).getGas() != type || !item.canProvideGas(itemStack,type)) {      return null;    }    return item.removeGas(itemStack,amount);  }  return null;}  }
class C{  @Override public EntrySet entrySet(){  return entrySet;}  }
class C{  public void endPing(long startTime,boolean timedOut,boolean failed){  long duration=getStatTime() - startTime;  endClientOp(duration,timedOut,failed);  this.stats.incInt(pingInProgressId,-1);  int endPingId;  if (timedOut) {    endPingId=pingTimedOutId;  } else   if (failed) {    endPingId=pingFailedId;  } else {    endPingId=pingId;  }  this.stats.incInt(endPingId,1);  this.stats.incLong(pingDurationId,duration);}  }
class C{  public void beanChanged(Object bean,String changedPropertyName){  if (!(bean instanceof SimpleBeanObject))   throw new IllegalArgumentException("not instanceof SimpleBeanObject " + bean);  SimpleBeanObject obj=(SimpleBeanObject)bean;  layer.updateObject(obj);}  }
class C{  public Executor(Logger logger,File cmd){  this.logger=logger;  this.cmd=cmd.getAbsolutePath();}  }
class C{  public DurationConfigFieldBuilder range(final Duration minDuration,final Duration maxDuration){  field.setAllowedRange(minDuration,maxDuration);  return this;}  }
class C{  @Override public synchronized void remove(String key){  boolean deleted=getFileForKey(key).delete();  removeEntry(key);  if (!deleted) {    VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",key,getFilenameForKey(key));  }}  }
class C{  public char typeLetter(){  return '0';}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public int color(Context ctx){  if (mColorInt == 0 && mColorRes != -1) {    mColorInt=ContextCompat.getColor(ctx,mColorRes);  }  return mColorInt;}  }
class C{  private void priorityLayout2(int level[],int priorities[],int bCenters[],int horPositions[]){  int descOrder[]=new int[priorities.length];  descOrder[0]=0;  for (int i=0; i < priorities.length - 1; i++) {    int j=i;    int temp=i + 1;    while (j > -1 && priorities[descOrder[j]] < priorities[temp]) {      descOrder[j + 1]=descOrder[j];      j--;    }    j++;    descOrder[j]=temp;  }  for (int k=0; k < descOrder.length; k++) {    for (int i=0; i < descOrder.length; i++) {      int leftCount=0, rightCount=0, leftNodes[], rightNodes[];      for (int j=0; j < priorities.length; j++) {        if (horPositions[level[descOrder[i]]] > horPositions[level[j]]) {          leftCount++;        } else         if (horPositions[level[descOrder[i]]] < horPositions[level[j]]) {          rightCount++;        }      }      leftNodes=new int[leftCount];      rightNodes=new int[rightCount];      for (int j=0, l=0, r=0; j < priorities.length; j++) {        if (horPositions[level[descOrder[i]]] > horPositions[level[j]]) {          leftNodes[l++]=j;        } else         if (horPositions[level[descOrder[i]]] < horPositions[level[j]]) {          rightNodes[r++]=j;        }      }      while (Math.abs(horPositions[level[descOrder[i]]] - 1 - bCenters[descOrder[i]]) < Math.abs(horPositions[level[descOrder[i]]] - bCenters[descOrder[i]])) {        int temp=horPositions[level[descOrder[i]]];        boolean cantMove=false;        for (int j=leftNodes.length - 1; j >= 0; j--) {          if (temp - horPositions[level[leftNodes[j]]] > 1) {            break;          } else           if (priorities[descOrder[i]] <= priorities[leftNodes[j]]) {            cantMove=true;            break;          } else {            temp=horPositions[level[leftNodes[j]]];          }        }        if (cantMove) {          break;        }        temp=horPositions[level[descOrder[i]]] - 1;        for (int j=leftNodes.length - 1; j >= 0; j--) {          if (temp == horPositions[level[leftNodes[j]]]) {            horPositions[level[leftNodes[j]]]=temp=horPositions[level[leftNodes[j]]] - 1;          }        }        horPositions[level[descOrder[i]]]=horPositions[level[descOrder[i]]] - 1;      }      while (Math.abs(horPositions[level[descOrder[i]]] + 1 - bCenters[descOrder[i]]) < Math.abs(horPositions[level[descOrder[i]]] - bCenters[descOrder[i]])) {        int temp=horPositions[level[descOrder[i]]];        boolean cantMove=false;        for (        int rightNode : rightNodes) {          if (horPositions[level[rightNode]] - temp > 1) {            break;          } else           if (priorities[descOrder[i]] <= priorities[rightNode]) {            cantMove=true;            break;          } else {            temp=horPositions[level[rightNode]];          }        }        if (cantMove) {          break;        }        temp=horPositions[level[descOrder[i]]] + 1;        for (int j=0; j < rightNodes.length; j++) {          if (temp == horPositions[level[rightNodes[j]]]) {            horPositions[level[rightNodes[j]]]=temp=horPositions[level[rightNodes[j]]] + 1;          }        }        horPositions[level[descOrder[i]]]=horPositions[level[descOrder[i]]] + 1;      }    }  }}  }
class C{  public void cloneInto(LiveLockScreenInfo that){  that.component=this.component.clone();  that.priority=this.priority;}  }
class C{  public boolean matches(ReadableMap userInfo){  Bundle bundle=toBundle();  ReadableMapKeySetIterator iterator=userInfo.keySetIterator();  while (iterator.hasNextKey()) {    String key=iterator.nextKey();    if (!bundle.containsKey(key))     return false;switch (userInfo.getType(key)) {case Null:{        if (bundle.get(key) != null)         return false;        break;      }case Boolean:{      if (userInfo.getBoolean(key) != bundle.getBoolean(key))       return false;      break;    }case Number:{    if ((userInfo.getDouble(key) != bundle.getDouble(key)) && (userInfo.getInt(key) != bundle.getInt(key)))     return false;    break;  }case String:{  if (!userInfo.getString(key).equals(bundle.getString(key)))   return false;  break;}case Map:return false;case Array:return false;}}return true;}  }
class C{  public NodeSetDTM(NodeSetDTM nodelist){  super();  m_manager=nodelist.getDTMManager();  m_root=nodelist.getRoot();  addNodes((DTMIterator)nodelist);}  }
class C{  public static String houseCodeToText(int hC){  String hCode="";switch (hC) {case 0x06:    hCode="A";  break;case 0x0E:hCode="B";break;case 0x02:hCode="C";break;case 0x0A:hCode="D";break;case 0x01:hCode="E";break;case 0x09:hCode="F";break;case 0x05:hCode="G";break;case 0x0D:hCode="H";break;case 0x07:hCode="I";break;case 0x0F:hCode="J";break;case 0x03:hCode="K";break;case 0x0B:hCode="L";break;case 0x00:hCode="M";break;case 0x08:hCode="N";break;case 0x04:hCode="O";break;case 0x0C:hCode="P";break;default :hCode="Unk hC:" + hC;break;}return hCode;}  }
class C{  public static boolean isObjectExpressionType(Declaration model){  return model instanceof Class && model.isAnonymous() && !model.isNamed();}  }
class C{  public CDATASection createCDATASection(String data) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  public void pickAudio(){  try {    pick();  } catch (  PickerException e) {    e.printStackTrace();    if (callback != null) {      callback.onError(e.getMessage());    }  }}  }
class C{  public String epochsTipText(){  return "The number of epochs to perform (batch learning). " + "The total number of iterations is epochs * num" + " instances.";}  }
class C{  public ConditionalRouteItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  protected QName createQName(String localName,String qualifiedName,Namespace namespace){  return documentFactory.createQName(localName,namespace);}  }
class C{  public PutIndexTemplateRequest aliases(String source){  return aliases(new BytesArray(source));}  }
class C{  public void send(final KCWebView webView,final String data){  if (mHttpRequest == null) {    KCXMLHttpRequestManager.freeXMLHttpRequestObject(webView,mId);    return;  }  mBody=data;  send(webView);}  }
class C{  public MailetException(){  super();}  }
class C{  private void createFirewallLabel(){  _firewallStatus=new JLabel();  updateFirewall();  _firewallStatus.setMinimumSize(new Dimension(20,20));  _firewallStatus.addMouseListener(STATUS_BAR_LISTENER);}  }
class C{  public boolean isIn(double i){  return (i >= this.min) && (i <= this.max);}  }
class C{  public static void encodeFileToFile(String infile,String outfile) throws java.io.IOException {  String encoded=Base64.encodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(encoded.getBytes("US-ASCII"));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  public static final String checkDoKeywordOverride(HttpServletRequest request,HttpServletResponse response){  HttpSession session=request.getSession();  Delegator delegator=(Delegator)request.getAttribute("delegator");  Map<String,Object> requestParams=UtilHttp.getParameterMap(request);  ProductSearchSession.processSearchParameters(requestParams,request);  String productStoreId=ProductStoreWorker.getProductStoreId(request);  if (productStoreId != null) {    Set<String> keywords=FastSet.newInstance();    List<ProductSearchConstraint> constraintList=ProductSearchOptions.getConstraintList(session);    if (constraintList != null) {      for (      ProductSearchConstraint constraint : constraintList) {        if (constraint instanceof KeywordConstraint) {          KeywordConstraint keywordConstraint=(KeywordConstraint)constraint;          Set<String> keywordSet=keywordConstraint.makeFullKeywordSet(delegator);          if (keywordSet != null)           keywords.addAll(keywordSet);        }      }    }    if (keywords.size() > 0) {      List<GenericValue> productStoreKeywordOvrdList=null;      try {        productStoreKeywordOvrdList=EntityQuery.use(delegator).from("ProductStoreKeywordOvrd").where("productStoreId",productStoreId).orderBy("-fromDate").cache(true).filterByDate().queryList();      } catch (      GenericEntityException e) {        Debug.logError(e,"Error reading ProductStoreKeywordOvrd list, not doing keyword override",module);      }      if (UtilValidate.isNotEmpty(productStoreKeywordOvrdList)) {        for (        GenericValue productStoreKeywordOvrd : productStoreKeywordOvrdList) {          String ovrdKeyword=productStoreKeywordOvrd.getString("keyword");          if (keywords.contains(ovrdKeyword)) {            String targetTypeEnumId=productStoreKeywordOvrd.getString("targetTypeEnumId");            String target=productStoreKeywordOvrd.getString("target");            ServletContext ctx=(ServletContext)request.getAttribute("servletContext");            RequestHandler rh=(RequestHandler)ctx.getAttribute("_REQUEST_HANDLER_");            if ("KOTT_PRODCAT".equals(targetTypeEnumId)) {              String requestName="/category/~category_id=" + target;              target=rh.makeLink(request,response,requestName,false,false,false);            } else             if ("KOTT_PRODUCT".equals(targetTypeEnumId)) {              String requestName="/product/~product_id=" + target;              target=rh.makeLink(request,response,requestName,false,false,false);            } else             if ("KOTT_OFBURL".equals(targetTypeEnumId)) {              target=rh.makeLink(request,response,target,false,false,false);            } else             if ("KOTT_AURL".equals(targetTypeEnumId)) {            } else {              Debug.logError("The targetTypeEnumId [] is not recognized, not doing keyword override",module);              continue;            }            try {              response.sendRedirect(target);              return "none";            } catch (            IOException e) {              Debug.logError(e,"Could not send redirect to: " + target,module);              continue;            }          }        }      }    }  }  return "success";}  }
class C{  public void addDecorators(DayViewDecorator... decorators){  addDecorators(Arrays.asList(decorators));}  }
class C{  public void testEmptyCommits() throws Exception {  clearIndexWithReplication();  index(masterClient,"id","1","name","empty1");  emptyUpdate(masterClient,"commit","true");  pullFromMasterToSlave();  rQuery(1,"name:empty1",slaveClient);  assertVersions(masterClient,slaveClient);  emptyUpdate(masterClient,"commit","true");  pullFromMasterToSlave();  index(masterClient,"id","2","name","empty2");  emptyUpdate(masterClient,"commit","true");  pullFromMasterToSlave();  rQuery(1,"name:empty2",slaveClient);  assertVersions(masterClient,slaveClient);  index(masterClient,"id","3","name","empty3");  emptyUpdate(masterClient,"commit","true","openSearcher","false");  pullFromMasterToSlave();  rQuery(0,"name:empty3",masterClient);  rQuery(1,"name:empty3",slaveClient);  index(masterClient,"id","4","name","empty4");  emptyUpdate(masterClient,"commit","true");  pullFromMasterToSlave();  String q="name:(empty1 empty2 empty3 empty4)";  rQuery(4,q,masterClient);  rQuery(4,q,slaveClient);  assertVersions(masterClient,slaveClient);}  }
class C{  public static int[] toIntArray(byte[] input){  final int intLen=(input.length + 3) / 4;  final int lastLen=input.length & 0x03;  int[] result=new int[intLen];  int index=0;  for (int i=0; i <= intLen - 2; i++, index+=4) {    result[i]=OS2IP(input,index);  }  if (lastLen != 0) {    result[intLen - 1]=OS2IP(input,index,lastLen);  } else {    result[intLen - 1]=OS2IP(input,index);  }  return result;}  }
class C{  public void handleEvent(Subscription subscription,Object event){  if (subscription == null || subscription.subscriber.get() == null) {    return;  }  try {    subscription.targetMethod.invoke(subscription.subscriber.get(),event);  } catch (  IllegalArgumentException e) {    e.printStackTrace();  }catch (  IllegalAccessException e) {    e.printStackTrace();  }catch (  InvocationTargetException e) {    e.printStackTrace();  }}  }
class C{  public void updateWorldSize(){  updateWorldSize(Gdx.graphics.getWidth(),Gdx.graphics.getHeight());}  }
class C{  public static long OS2LIP(byte[] input,int inOff){  long result=((long)input[inOff++] & 0xff) << 56;  result|=((long)input[inOff++] & 0xff) << 48;  result|=((long)input[inOff++] & 0xff) << 40;  result|=((long)input[inOff++] & 0xff) << 32;  result|=((long)input[inOff++] & 0xff) << 24;  result|=(input[inOff++] & 0xff) << 16;  result|=(input[inOff++] & 0xff) << 8;  result|=input[inOff] & 0xff;  return result;}  }
class C{  public HttpFileServiceBuilder maxCacheEntries(int maxCacheEntries){  this.maxCacheEntries=HttpFileServiceConfig.validateMaxCacheEntries(maxCacheEntries);  return this;}  }
class C{  public String name(){  return this.name;}  }
class C{  UnknownScopeConstantException(String i18n,Object... arguments){  super(i18n,arguments);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    double multiplier=Math.PI / 180;    if (inputFile.getZUnits().toLowerCase().contains("rad")) {      multiplier=1;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.tanh(z * multiplier));        } else {          outputFile.setValue(row,col,noData);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private TaskList createFileTaskList(FileSystemParam param,Project project,TenantOrg tenantOrg,VirtualArray varray,VirtualPool vpool,DataObject.Flag[] flags,String task){  TaskList taskList=new TaskList();  FileShare fs=prepareEmptyFileSystem(param,project,tenantOrg,varray,vpool,flags,task);  TaskResourceRep fileTask=toTask(fs,task);  taskList.getTaskList().add(fileTask);  _log.info(String.format("FileShare and Task Pre-creation Objects [Init]--  Source FileSystem: %s, Task: %s, Op: %s",fs.getId(),fileTask.getId(),task));  return taskList;}  }
class C{  public static Class<?> classOrNull(ClassLoader loader,String className){  try {    return loader.loadClass(className);  } catch (  ClassNotFoundException ex) {  }catch (  SecurityException ex) {  }catch (  LinkageError ex) {  }catch (  IllegalArgumentException e) {  }  return null;}  }
class C{  public void dispose(){  close();}  }
class C{  private static String generateSalt(){  final int SALT_LENGTH=16;  final String SALT_BASE_CHARS="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ./";  SecureRandom random=new SecureRandom();  StringBuilder salt=new StringBuilder(SALT_LENGTH);  for (int i=0; i < SALT_LENGTH; i++) {    salt.append(SALT_BASE_CHARS.charAt(random.nextInt(SALT_BASE_CHARS.length())));  }  return salt.toString();}  }
class C{  @Override public void test(Object t) throws ParameterException {  if (t instanceof List && ((List<?>)t).size() != sizeConstraint) {    throw new WrongParameterValueException("Parameter Constraint Error.\n" + "List parameter has not the required size. (Requested size: " + sizeConstraint + ", current size: "+ ((List<?>)t).size()+ ").\n");  }  if (t instanceof int[] && ((int[])t).length != sizeConstraint) {    throw new WrongParameterValueException("Parameter Constraint Error.\n" + "List parameter has not the required size. (Requested size: " + sizeConstraint + ", current size: "+ ((int[])t).length+ ").\n");  }  if (t instanceof double[] && ((double[])t).length != sizeConstraint) {    throw new WrongParameterValueException("Parameter Constraint Error.\n" + "List parameter has not the required size. (Requested size: " + sizeConstraint + ", current size: "+ ((double[])t).length+ ").\n");  }}  }
class C{  private void processProperty(){  if (_property.getReadMethod() == null) {    return;  }  Method readMethod=_property.getReadMethod();  Annotation[] annotations=readMethod.getAnnotations();  ColumnFamily<String,IndexColumnName> indexCF=null;  int minPrefixChars;  boolean isLazyLoadable=false;  boolean hasRelationIndex=false;  for (int i=0; i < annotations.length; i++) {    Annotation a=annotations[i];    if (a instanceof Id) {      _colType=ColumnType.Id;      _name="Id";    } else     if (a instanceof Name) {      _name=((Name)a).value();      if (Number.class.isAssignableFrom(_valueType) || _valueType == URI.class || _valueType == String.class || _valueType == Date.class || _valueType == Boolean.class || _valueType == Byte.class || _valueType == Long.class || _valueType == byte[].class || _valueType.isEnum() || _valueType == Calendar.class) {        _colType=ColumnType.Primitive;        compositeName=new CompositeColumnName(_name);      } else       if (NamedURI.class == _valueType) {        _colType=ColumnType.NamedURI;        compositeName=new CompositeColumnName(_name);      } else       if (AbstractChangeTrackingSet.class.isAssignableFrom(_valueType)) {        _colType=ColumnType.TrackingSet;      } else       if (AbstractChangeTrackingMap.class.isAssignableFrom(_valueType)) {        _colType=ColumnType.TrackingMap;      } else       if (AbstractChangeTrackingSetMap.class.isAssignableFrom(_valueType)) {        _colType=ColumnType.TrackingSetMap;      } else       if (AbstractSerializableNestedObject.class.isAssignableFrom(_valueType)) {        _colType=ColumnType.NestedObject;        compositeName=new CompositeColumnName(_name);      } else       if (Collection.class.isAssignableFrom(_valueType) || DataObject.class.isAssignableFrom(_valueType)) {        isLazyLoadable=true;      } else {        throw new IllegalArgumentException(_name + " " + _valueType+ " "+ _property+ " "+ _parentType.getDataObjectClass());      }    } else     if (a instanceof Ttl) {      _ttl=((Ttl)a).value();    } else     if (a instanceof RelationIndex) {      indexCF=new ColumnFamily<String,IndexColumnName>(((RelationIndex)a).cf(),StringSerializer.get(),IndexColumnNameSerializer.get());      _indexRefType=((RelationIndex)a).type();      deactivateIfEmpty=((RelationIndex)a).deactivateIfEmpty();      _index=new RelationDbIndex(indexCF);    } else     if (a instanceof AlternateId) {      indexCF=new ColumnFamily<String,IndexColumnName>(((AlternateId)a).value(),StringSerializer.get(),IndexColumnNameSerializer.get());      _index=new AltIdDbIndex(indexCF);    } else     if (a instanceof NamedRelationIndex) {      indexCF=new ColumnFamily<String,IndexColumnName>(((NamedRelationIndex)a).cf(),StringSerializer.get(),IndexColumnNameSerializer.get());      _indexRefType=((NamedRelationIndex)a).type();      _index=new NamedRelationDbIndex(indexCF);    } else     if (a instanceof PrefixIndex) {      indexCF=new ColumnFamily<String,IndexColumnName>(((PrefixIndex)a).cf(),StringSerializer.get(),IndexColumnNameSerializer.get());      minPrefixChars=((PrefixIndex)a).minChars();      _index=new PrefixDbIndex(indexCF,minPrefixChars);    } else     if (a instanceof PermissionsIndex && AbstractChangeTrackingSetMap.class.isAssignableFrom(_valueType)) {      indexCF=new ColumnFamily<String,IndexColumnName>(((PermissionsIndex)a).value(),StringSerializer.get(),IndexColumnNameSerializer.get());      _index=new PermissionsDbIndex(indexCF);    } else     if (a instanceof Encrypt && _valueType == String.class) {      _encrypt=true;    } else     if (a instanceof ScopedLabelIndex) {      ScopedLabelIndex scopeLabelIndex=(ScopedLabelIndex)a;      indexCF=new ColumnFamily<String,IndexColumnName>(scopeLabelIndex.cf(),StringSerializer.get(),IndexColumnNameSerializer.get());      minPrefixChars=scopeLabelIndex.minChars();      _index=new ScopedLabelDbIndex(indexCF,minPrefixChars);    } else     if (a instanceof ClockIndependent) {      clockIndValue=((ClockIndependent)a).value();    } else     if (a instanceof DecommissionedIndex && Boolean.class.isAssignableFrom(_valueType)) {      if (!_property.getName().equals(DataObject.INACTIVE_FIELD_NAME) || _parentType.getDataObjectClass().getAnnotation(NoInactiveIndex.class) == null) {        indexCF=new ColumnFamily<String,IndexColumnName>(((DecommissionedIndex)a).value(),StringSerializer.get(),IndexColumnNameSerializer.get());        _index=new DecommissionedDbIndex(indexCF);      }    } else     if (a instanceof IndexByKey && (AbstractChangeTrackingMap.class.isAssignableFrom(_valueType) || AbstractChangeTrackingSet.class.isAssignableFrom(_valueType))) {      _indexByKey=true;    } else     if (a instanceof Relation) {      hasRelationIndex=true;      if (((Relation)a).type().equals(DataObject.class)) {        _mappedByType=_valueType;      } else {        _mappedByType=((Relation)a).type();      }      _mappedByField=((Relation)a).mappedBy();    } else     if (a instanceof AggregatedIndex) {      indexCF=new ColumnFamily<String,IndexColumnName>(((AggregatedIndex)a).cf(),StringSerializer.get(),IndexColumnNameSerializer.get());      String groupBy=((AggregatedIndex)a).groupBy();      boolean global=((AggregatedIndex)a).classGlobal();      _index=new AggregateDbIndex(indexCF,groupBy,global);    }  }  if (_name == null) {    String className=_parentType.getDataObjectClass().getName();    String fieldName=_property.getName();    throw new IllegalArgumentException(String.format("@Name annotation missing from field '%s' in class '%s'",fieldName,className));  }  if (_index != null) {    _index.setFieldName(_name);    _index.setIndexByKey(_indexByKey);  }  if (isLazyLoadable && hasRelationIndex) {    lazyLoaded=true;  }}  }
class C{  public void handleWarning(Source source,int line,int column,String msg) throws LexerException {  warnings++;  print(source.getName() + ":" + line+ ":"+ column+ ": warning: "+ msg);}  }
class C{  public void disconnectAndCloseAll(){  for (  final MqttAsyncConnection connection : getMqttConnections()) {    disconnectAndCloseTab(connection);  }}  }
class C{  protected List<OneItemset> buildFrequentOneItemsets(final Relation<? extends SparseFeatureVector<?>> relation,final int dim,final int needed){  int[] counts=new int[dim];  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    SparseFeatureVector<?> bv=relation.get(iditer);    for (int it=bv.iter(); bv.iterValid(it); it=bv.iterAdvance(it)) {      counts[bv.iterDim(it)]++;    }  }  if (LOG.isStatistics()) {    LOG.statistics(new LongStatistic(STAT + "1-items.candidates",dim));  }  List<OneItemset> frequent=new ArrayList<>(dim);  for (int i=0; i < dim; i++) {    if (counts[i] >= needed) {      frequent.add(new OneItemset(i,counts[i]));    }  }  return frequent;}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  int paintCount=this.paintSequence.length;  stream.writeInt(paintCount);  for (int i=0; i < paintCount; i++) {    SerialUtilities.writePaint(this.paintSequence[i],stream);  }  int outlinePaintCount=this.outlinePaintSequence.length;  stream.writeInt(outlinePaintCount);  for (int i=0; i < outlinePaintCount; i++) {    SerialUtilities.writePaint(this.outlinePaintSequence[i],stream);  }  int strokeCount=this.strokeSequence.length;  stream.writeInt(strokeCount);  for (int i=0; i < strokeCount; i++) {    SerialUtilities.writeStroke(this.strokeSequence[i],stream);  }  int outlineStrokeCount=this.outlineStrokeSequence.length;  stream.writeInt(outlineStrokeCount);  for (int i=0; i < outlineStrokeCount; i++) {    SerialUtilities.writeStroke(this.outlineStrokeSequence[i],stream);  }  int shapeCount=this.shapeSequence.length;  stream.writeInt(shapeCount);  for (int i=0; i < shapeCount; i++) {    SerialUtilities.writeShape(this.shapeSequence[i],stream);  }}  }
class C{  public DOMSource(Node node,String systemID){  setNode(node);  setSystemId(systemID);}  }
class C{  protected Node newNode(){  return new XBLOMDefinitionElement();}  }
class C{  public static int generate(int crc,char[] buffer,int offset,int len){  for (int i=0; i < len; i++) {    char ch=buffer[offset + i];    if (ch > 0xff) {      crc=next(crc,(ch >> 8));    }    crc=next(crc,ch);  }  return crc;}  }
class C{  public ToggleSnapshotLocationAction(){  super(GctBundle.getString("clouddebug.snapshot.location"),GctBundle.getString("clouddebug.adds.snapshot.location"),GoogleCloudToolsIcons.CLOUD);}  }
class C{  public SolrCore create(String coreName,Map<String,String> parameters){  return create(coreName,cfg.getCoreRootDirectory().resolve(coreName),parameters,false);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public Atom convertCharacter(char c,boolean oneChar) throws ParseException {  if (ignoreWhiteSpace) {    if (c >= 945 && c <= 969) {      return SymbolAtom.get(TeXFormula.symbolMappings[c]);    } else     if (c >= 913 && c <= 937) {      return new TeXFormula(TeXFormula.symbolFormulaMappings[c]).root;    }  }  c=convertToRomanNumber(c);  if (((c < '0' || c > '9') && (c < 'a' || c > 'z') && (c < 'A' || c > 'Z'))) {    Character.UnicodeBlock block=Character.UnicodeBlock.of(c);    if (!isLoading && !DefaultTeXFont.loadedAlphabets.contains(block)) {      DefaultTeXFont.addAlphabet(DefaultTeXFont.registeredAlphabets.get(block));    }    String symbolName=TeXFormula.symbolMappings[c];    if (symbolName == null && (TeXFormula.symbolFormulaMappings == null || TeXFormula.symbolFormulaMappings[c] == null)) {      TeXFormula.FontInfos fontInfos=null;      boolean isLatin=Character.UnicodeBlock.BASIC_LATIN.equals(block);      if ((isLatin && TeXFormula.isRegisteredBlock(Character.UnicodeBlock.BASIC_LATIN)) || !isLatin) {        fontInfos=TeXFormula.getExternalFont(block);      }      if (fontInfos != null) {        if (oneChar) {          return new JavaFontRenderingAtom(Character.toString(c),fontInfos);        }        int start=pos++;        int end=len - 1;        while (pos < len) {          c=parseString.charAt(pos);          if (!Character.UnicodeBlock.of(c).equals(block)) {            end=--pos;            break;          }          pos++;        }        return new JavaFontRenderingAtom(parseString.substring(start,end + 1),fontInfos);      }      if (!isPartial) {        throw new ParseException("Unknown character : '" + Character.toString(c) + "' (or "+ ((int)c)+ ")");      } else {        return new ColorAtom(new RomanAtom(new TeXFormula("\\text{(Unknown char " + ((int)c) + ")}").root),null,ColorUtil.RED);      }    } else {      if (!ignoreWhiteSpace) {        if (TeXFormula.symbolTextMappings[c] != null) {          return SymbolAtom.get(TeXFormula.symbolTextMappings[c]).setUnicode(c);        }      }      if (TeXFormula.symbolFormulaMappings != null && TeXFormula.symbolFormulaMappings[c] != null) {        return new TeXFormula(TeXFormula.symbolFormulaMappings[c]).root;      }      try {        return SymbolAtom.get(symbolName);      } catch (      SymbolNotFoundException e) {        throw new ParseException("The character '" + Character.toString(c) + "' was mapped to an unknown symbol with the name '"+ symbolName+ "'!",e);      }    }  } else {    TeXFormula.FontInfos fontInfos=TeXFormula.externalFontMap.get(Character.UnicodeBlock.BASIC_LATIN);    if (fontInfos != null) {      if (oneChar) {        return new JavaFontRenderingAtom(Character.toString(c),fontInfos);      }      int start=pos++;      int end=len - 1;      while (pos < len) {        c=parseString.charAt(pos);        if (((c < '0' || c > '9') && (c < 'a' || c > 'z') && (c < 'A' || c > 'Z'))) {          end=--pos;          break;        }        pos++;      }      return new JavaFontRenderingAtom(parseString.substring(start,end + 1),fontInfos);    }    return new CharAtom(c,formula.textStyle);  }}  }
class C{  public NotAuthorizedException(final String message,final Principal principal){  this(message,null,principal);}  }
class C{  public int hashCode(){  int hash=super.hashCode();  hash=hash + (this.getName() == null ? 0 : this.getName().hashCode());  return hash;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4mfPackage.EXEC_MODULE__EXEC_MODULE:    return execModule != null;}return super.eIsSet(featureID);}  }
class C{  public PcMaxLocalRunner(DataWrapper dataWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(dataWrapper,params,knowledgeBoxModel);  this.sourceGraph=dataWrapper.getSourceGraph();}  }
class C{  public static boolean openUrl(String url){  if (url == null) {    return false;  }  URI parsed;  try {    parsed=new URI(url);  } catch (  URISyntaxException ex) {    LOGGER.warning("Invalid URI format: " + ex);    return false;  }  if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.BROWSE) && !customCommandEnabled) {    try {      Desktop.getDesktop().browse(parsed);      return true;    } catch (    IOException ex) {      LOGGER.warning("Error opening URL: " + ex);    }  } else {    return openUrlNative(url);  }  return false;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public BiosCommandResult doFailover(StorageSystem system,String policyName,TaskCompleter taskCompleter){  _log.info("IsilonMirrorOperations -  doFailover started ");  try {    IsilonApi isi=getIsilonDevice(system);    IsilonSyncJob job=new IsilonSyncJob();    job.setId(policyName);    job.setAction(Action.allow_write);    isi.modifyReplicationJob(job);    IsilonSyncJobFailover isiSyncJobFailover=new IsilonSyncJobFailover(policyName,system.getId(),taskCompleter,policyName);    try {      ControllerServiceImpl.enqueueJob(new QueueJob(isiSyncJobFailover));      return BiosCommandResult.createPendingResult();    } catch (    Exception ex) {      _log.error("Failover to Secondary Cluster Failed",ex);      ServiceError error=DeviceControllerErrors.isilon.jobFailed("Failover to Secondary Cluster Failed as :" + ex.getMessage());      if (taskCompleter != null) {        taskCompleter.error(_dbClient,error);      }      return BiosCommandResult.createErrorResult(error);    }  } catch (  IsilonException e) {    return BiosCommandResult.createErrorResult(e);  }}  }
class C{  public void resolve(Event e){  float time=owner.getRoot().convertEpochTime(e.getTimeStamp());  InstanceTime instance=new InstanceTime(this,time + offset,true);  owner.addInstanceTime(instance,isBegin);}  }
class C{  public void onReset(){  for (  CordovaPlugin plugin : this.pluginMap.values()) {    if (plugin != null) {      plugin.onReset();    }  }}  }
class C{  @Override public int onStartCommand(Intent intent,int flags,int startId){  handleIntent(intent);  return START_NOT_STICKY;}  }
class C{  public void delete(){  checkPermission(Permission.MANAGE_ROLES);  checkPosition();  ((JDAImpl)role.getJDA()).getRequester().delete(Requester.DISCORD_API_PREFIX + "guilds/" + role.getGuild().getId()+ "/roles/"+ role.getId());}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  double x, y;  int progress;  int i, j, k;  int featureNum, numFeatures;  int filterSize, halfFilterSize;  double[][] geometry;  int numPoints, numParts, part, startingPointInPart, endingPointInPart;  int numPointsInFilter;  ShapeType shapeType;  ShapeFileRecord outputRecord;  double sumX, sumY;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  filterSize=Integer.parseInt(args[2]);  if (filterSize < 3) {    filterSize=3;  }  if (filterSize % 2 == 0) {    showFeedback("The filter size must be an odd number. The specified value " + "has been incremented by one.");    filterSize++;  }  halfFilterSize=(int)Math.floor(filterSize / 2.0);  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    if (shapeType.getBaseType() != ShapeType.POLYLINE && shapeType.getBaseType() != ShapeType.POLYGON) {      showFeedback("This tool only works with shapefiles of a polyline or polygon base shape type.");      return;    }    ShapeFile output=new ShapeFile(outputFile,shapeType);    FileUtilities.copyFile(new File(input.getDatabaseFile()),new File(output.getDatabaseFile()));    output.setProjectionStringFromOtherShapefile(input);    numFeatures=input.getNumberOfRecords();    featureNum=0;    for (    ShapeFileRecord record : input.records) {      featureNum++;      PointsList points=new PointsList();      geometry=getXYFromShapefileRecord(record);      numPoints=geometry.length;      numParts=partData.length;      for (part=0; part < numParts; part++) {        startingPointInPart=partData[part];        if (part < numParts - 1) {          endingPointInPart=partData[part + 1];        } else {          endingPointInPart=numPoints;        }        if (geometry[startingPointInPart][0] == geometry[endingPointInPart - 1][0] && geometry[startingPointInPart][1] == geometry[endingPointInPart - 1][1]) {          for (i=startingPointInPart; i < endingPointInPart; i++) {            numPointsInFilter=0;            sumX=0;            sumY=0;            for (j=i - halfFilterSize; j <= i + halfFilterSize; j++) {              k=j;              if (k < startingPointInPart) {                k=endingPointInPart + k - 1;              }              if (k >= endingPointInPart) {                k=startingPointInPart + (k - endingPointInPart) + 1;              }              if (k >= startingPointInPart && k < endingPointInPart) {                numPointsInFilter++;                sumX+=geometry[k][0];                sumY+=geometry[k][1];              }            }            x=sumX / numPointsInFilter;            y=sumY / numPointsInFilter;            points.addPoint(x,y);          }        } else {          for (i=startingPointInPart; i < endingPointInPart; i++) {            numPointsInFilter=0;            sumX=0;            sumY=0;            for (j=i - halfFilterSize; j <= i + halfFilterSize; j++) {              if (j >= startingPointInPart && j < endingPointInPart) {                numPointsInFilter++;                sumX+=geometry[j][0];                sumY+=geometry[j][1];              }            }            x=sumX / numPointsInFilter;            y=sumY / numPointsInFilter;            points.addPoint(x,y);          }        }      }switch (shapeType) {case POLYLINE:        PolyLine line=new PolyLine(partData,points.getPointsArray());      output.addRecord(line);    break;case POLYLINEZ:  PolyLineZ polyLineZ=(PolyLineZ)(record.getGeometry());PolyLineZ linez=new PolyLineZ(partData,points.getPointsArray(),polyLineZ.getzArray(),polyLineZ.getmArray());output.addRecord(linez);break;case POLYLINEM:PolyLineM polyLineM=(PolyLineM)(record.getGeometry());PolyLineM linem=new PolyLineM(partData,points.getPointsArray(),polyLineM.getmArray());output.addRecord(linem);break;case POLYGON:Polygon poly=new Polygon(partData,points.getPointsArray());output.addRecord(poly);break;case POLYGONZ:PolygonZ polygonZ=(PolygonZ)(record.getGeometry());PolygonZ polyz=new PolygonZ(partData,points.getPointsArray(),polygonZ.getzArray(),polygonZ.getmArray());output.addRecord(polyz);break;case POLYGONM:PolygonM polygonM=(PolygonM)(record.getGeometry());PolygonM polym=new PolygonM(partData,points.getPointsArray(),polygonM.getmArray());output.addRecord(polym);break;}if (cancelOp) {cancelOperation();return;}progress=(int)(featureNum * 100.0 / numFeatures);updateProgress(progress);}output.write();returnData(outputFile);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public double toDouble(){  try {    return Double.valueOf(m_str).doubleValue();  } catch (  NumberFormatException nfe) {    return Double.NaN;  }}  }
class C{  static void appendModeInfo(Mode mode,BitArray bits){  bits.appendBits(mode.getBits(),4);}  }
class C{  public Day(int day,int month,int year){  this.serialDate=SerialDate.createInstance(day,month,year);  peg(Calendar.getInstance());}  }
class C{  public static Charset toCharset(final String charset){  return charset == null ? Charset.defaultCharset() : Charset.forName(charset);}  }
class C{  public static void write(float latPoint,float lonPoint,int w,int h,float rotateAngle,LinkProperties properties,DataOutputStream dos) throws IOException {  write(latPoint,lonPoint,0,0,w,h,rotateAngle,properties,dos);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().setOverscanOffsetX(getInt(stack));  return null;}  }
class C{  private Plan buildPlan2(){  Plan plan=PopulationUtils.createPlan();  Activity a=PopulationUtils.createActivityFromCoord("a",CoordUtils.createCoord(0.0,0.0));  a.setEndTime(Time.parseTime("16:00:00"));  plan.addActivity(a);  plan.addLeg(PopulationUtils.createLeg("truck"));  double travelTime=Time.parseTime("07:00:00");  double distance=Math.round((travelTime * ChainChopper.AVERAGE_SPEED) / ChainChopper.CROWFLY_FACTOR);  Activity b=PopulationUtils.createActivityFromCoord("b",CoordUtils.createCoord(distance,1.0));  b.setMaximumDuration(Time.parseTime("02:00:00"));  plan.addActivity(b);  plan.addLeg(PopulationUtils.createLeg("truck"));  Activity c=PopulationUtils.createActivityFromCoord("c",CoordUtils.createCoord(2 * distance,2.0));  plan.addActivity(c);  return plan;}  }
class C{  public BloomFilterIndex(List<BloomFilter<E>> bfList,int order,boolean splitFull,InsDelUpdateStatistics stat){  this.order=order;  this.splitFull=splitFull;  this.idMap=new Hashtable<Integer,BFINode<E>>();  this.bfList=bulkLoad(bfList,stat);}  }
class C{  public static void main(String args[]){  TellServerName tell;  String hostname=null;  try {    hostname=retrieveServerName();    System.err.println("Client host name: " + hostname);    int registryPort=Integer.parseInt(System.getProperty("rmi.registry.port"));    tell=(TellServerName)Naming.lookup("rmi://:" + registryPort + "/CheckFQDN");    tell.tellServerName(hostname);    System.err.println("client has exited");  } catch (  Exception e) {    throw new RuntimeException(e.getMessage());  }  System.exit(0);}  }
class C{  public ASN1Primitive toASN1Primitive(){  ASN1EncodableVector v=new ASN1EncodableVector();  v.add(version);  v.add(digestAlgorithms);  v.add(contentInfo);  if (certificates != null) {    if (certsBer) {      v.add(new BERTaggedObject(false,0,certificates));    } else {      v.add(new DERTaggedObject(false,0,certificates));    }  }  if (crls != null) {    if (crlsBer) {      v.add(new BERTaggedObject(false,1,crls));    } else {      v.add(new DERTaggedObject(false,1,crls));    }  }  v.add(signerInfos);  return new BERSequence(v);}  }
class C{  @Override public void drawLine(int x1,int y1,int x2,int y2){  setStateToLocal();  m_printstream.println(xTransform(xScale(x1)) + " " + yTransform(yScale(y1))+ " moveto "+ xTransform(xScale(x2))+ " "+ yTransform(yScale(y2))+ " lineto stroke");}  }
class C{  private static void readDataFromBinlog(ReplicatorRuntime runtime,BinlogReader binlog,byte[] data,int offset,int length,int timeout) throws IOException, ReplicatorException, InterruptedException {  boolean alreadyLogged=false;  int spentTime=0;  int timeoutInMs=timeout * 1000;  long available;  while ((available=binlog.available()) < (long)length) {    if (!alreadyLogged) {      if (logger.isDebugEnabled()) {        logger.debug("Trying to read more bytes (" + length + ") than available in the file ("+ available+ " in "+ binlog.getFileName()+ ")... waiting for data to be available");      }      alreadyLogged=true;    }    try {      if (spentTime < timeoutInMs) {        Thread.sleep(1);        spentTime++;      } else       throw new MySQLExtractException("Timeout while waiting for data : spent more than " + timeout + " seconds while waiting for "+ length+ " bytes to be available");    } catch (    InterruptedException e) {    }  }  binlog.read(data,offset,length);}  }
class C{  public static ClassificationDataSet loadC(File file) throws FileNotFoundException, IOException {  return loadC(new FileReader(file),0.5);}  }
class C{  public final void mulTransposeBoth(Matrix3d m1,Matrix3d m2){  if (this != m1 && this != m2) {    this.m00=m1.m00 * m2.m00 + m1.m10 * m2.m01 + m1.m20 * m2.m02;    this.m01=m1.m00 * m2.m10 + m1.m10 * m2.m11 + m1.m20 * m2.m12;    this.m02=m1.m00 * m2.m20 + m1.m10 * m2.m21 + m1.m20 * m2.m22;    this.m10=m1.m01 * m2.m00 + m1.m11 * m2.m01 + m1.m21 * m2.m02;    this.m11=m1.m01 * m2.m10 + m1.m11 * m2.m11 + m1.m21 * m2.m12;    this.m12=m1.m01 * m2.m20 + m1.m11 * m2.m21 + m1.m21 * m2.m22;    this.m20=m1.m02 * m2.m00 + m1.m12 * m2.m01 + m1.m22 * m2.m02;    this.m21=m1.m02 * m2.m10 + m1.m12 * m2.m11 + m1.m22 * m2.m12;    this.m22=m1.m02 * m2.m20 + m1.m12 * m2.m21 + m1.m22 * m2.m22;  } else {    double m00, m01, m02, m10, m11, m12, m20, m21, m22;    m00=m1.m00 * m2.m00 + m1.m10 * m2.m01 + m1.m20 * m2.m02;    m01=m1.m00 * m2.m10 + m1.m10 * m2.m11 + m1.m20 * m2.m12;    m02=m1.m00 * m2.m20 + m1.m10 * m2.m21 + m1.m20 * m2.m22;    m10=m1.m01 * m2.m00 + m1.m11 * m2.m01 + m1.m21 * m2.m02;    m11=m1.m01 * m2.m10 + m1.m11 * m2.m11 + m1.m21 * m2.m12;    m12=m1.m01 * m2.m20 + m1.m11 * m2.m21 + m1.m21 * m2.m22;    m20=m1.m02 * m2.m00 + m1.m12 * m2.m01 + m1.m22 * m2.m02;    m21=m1.m02 * m2.m10 + m1.m12 * m2.m11 + m1.m22 * m2.m12;    m22=m1.m02 * m2.m20 + m1.m12 * m2.m21 + m1.m22 * m2.m22;    this.m00=m00;    this.m01=m01;    this.m02=m02;    this.m10=m10;    this.m11=m11;    this.m12=m12;    this.m20=m20;    this.m21=m21;    this.m22=m22;  }}  }
class C{  public Object convert(Object valueToConvert) throws IllegalArgumentException {  if (valueToConvert instanceof java.sql.Timestamp) {    return ((Timestamp)valueToConvert).toString();  }  throw new IllegalArgumentException("The source object must be of type: " + getSourceType().getName());}  }
class C{  public MailBuilder parameter(String name,String value){  return param(name,value);}  }
class C{  public PlayerAttachment(final String name,final Attachable attachable,final GameData gameData){  super(name,attachable,gameData);}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:40.031 -0500",hash_original_method="FB2EC5D8B12C04BA891CB7A7EE47F374",hash_generated_method="31271D7CFBBC50634D1AB6E6BC6B2559") public static ZTauElement partModReduction(BigInteger k,int m,byte a,BigInteger[] s,byte mu,byte c){  BigInteger d0;  if (mu == 1) {    d0=s[0].add(s[1]);  } else {    d0=s[0].subtract(s[1]);  }  BigInteger[] v=getLucas(mu,m,true);  BigInteger vm=v[1];  SimpleBigDecimal lambda0=approximateDivisionByN(k,s[0],vm,a,m,c);  SimpleBigDecimal lambda1=approximateDivisionByN(k,s[1],vm,a,m,c);  ZTauElement q=round(lambda0,lambda1,mu);  BigInteger r0=k.subtract(d0.multiply(q.u)).subtract(BigInteger.valueOf(2).multiply(s[1]).multiply(q.v));  BigInteger r1=s[1].multiply(q.u).subtract(s[0].multiply(q.v));  return new ZTauElement(r0,r1);}  }
class C{  protected void registerColorPickerAttributes(){  addAttributeProcessor(new CloseAfterPickingLmlAttribute(),"closeAfterPickingFinished","closeAfter");  addAttributeProcessor(new ColorPickerListenerLmlAttribute(),"listener");  addAttributeProcessor(new ColorPickerResponsiveListenerLmlAttribute(),"responsiveListener");  addAttributeProcessor(new AllowAlphaEditLmlAttribute(),"allowAlphaEdit","allowAlpha");  addAttributeProcessor(new BasicColorPickerListenerLmlAttribute(),"listener");  addAttributeProcessor(new ShowHexFieldLmlAttribute(),"showHex","showHexField");}  }
class C{  @Override public void restoreWeights(){  for (int i=0; i < m_numInputs; i++) {    m_inputList[i].restoreWeights();  }}  }
class C{  public void rollbackExportGroupCreate(URI storageURI,URI exportGroupURI,URI exportMaskURI,String contextKey,String token) throws ControllerException {  ExportTaskCompleter taskCompleter=new RollbackExportGroupCreateCompleter(exportGroupURI,exportMaskURI,token);  ExportOperationContext context=null;  try {    context=(ExportOperationContext)WorkflowService.getInstance().loadStepData(contextKey);    WorkflowService.getInstance().storeStepData(token,context);  } catch (  ClassCastException e) {    _log.info("Step {} has stored step data other than ExportOperationContext. Exception: {}",token,e);  }  _log.info("Rolling back operations: " + context);  doExportGroupDelete(storageURI,exportGroupURI,exportMaskURI,null,null,taskCompleter,token);}  }
class C{  public boolean postDominates(Stmt s,Stmt t){  return ((FlowSet)getFlowBefore(t)).contains(s);}  }
class C{  public synchronized void addSelectedWay(final Way selectedWay){  if (selectedWays == null) {    setSelectedWay(selectedWay);  } else {    if (!selectedWays.contains(selectedWay)) {      selectedWays.add(selectedWay);    }  }}  }
class C{  final public SyntaxTreeNode ParamSubDecl() throws ParseException {  SyntaxTreeNode tn, sn[];  Token t, u;  bpa("Parameter declaration item");  t=jj_consume_token(CONSTANT);  sn=new SyntaxTreeNode[1];  sn[0]=new SyntaxTreeNode(mn,t);  tn=new SyntaxTreeNode(mn,N_ConsDecl,sn);  epa();{    if (true)     return tn;  }  throw new Error("Missing return statement in function");}  }
class C{  public INode copy(){  return new TinyPuzzle(s);}  }
class C{  public static String removeNotationFromSetterAndSetPrefix(String methodName){  if (methodName.matches("^set\\w+")) {    String withoutSetPrefix=methodName.substring(3);    if (Character.isLowerCase(withoutSetPrefix.charAt(0))) {      return HungarianNotation.removeNotation(withoutSetPrefix);    } else     if (withoutSetPrefix.length() >= 2 && withoutSetPrefix.charAt(0) == 'M' && Character.isUpperCase(withoutSetPrefix.charAt(1))) {      return Character.toLowerCase(withoutSetPrefix.charAt(1)) + withoutSetPrefix.substring(2);    }    return removeNotation(withoutSetPrefix);  }  return removeNotation(methodName);}  }
class C{  public static boolean isVMwareVapp(){  if (isVMwareVapp != null) {    log.info("Return value {} from cached result",isVMwareVapp.booleanValue());    return isVMwareVapp.booleanValue();  }  final String[] cmd={GET_OVF_PROPERTY_CMD,IS_VAPP};  Exec.Result result=Exec.sudo(CMD_TIMEOUT,cmd);  if (!result.exitedNormally()) {    log.error("Failed to check if it's vApp {}",result.getStdError());    throw new IllegalStateException("Failed to check platform");  }  if (result.getExitValue() == 0) {    log.info("Current platform is VMware vApp");    isVMwareVapp=Boolean.TRUE;    return isVMwareVapp.booleanValue();  }  log.info("The exit value of platform check: {}",result.getExitValue());  isVMwareVapp=Boolean.FALSE;  return isVMwareVapp.booleanValue();}  }
class C{  public Reboot(){  super();}  }
class C{  static BigInteger flipBit(BigInteger val,int n){  val.prepareJavaRepresentation();  int resSign=(val.sign == 0) ? 1 : val.sign;  int intCount=n >> 5;  int bitN=n & 31;  int resLength=Math.max(intCount + 1,val.numberLength) + 1;  int[] resDigits=new int[resLength];  int i;  int bitNumber=1 << bitN;  System.arraycopy(val.digits,0,resDigits,0,val.numberLength);  if (val.sign < 0) {    if (intCount >= val.numberLength) {      resDigits[intCount]=bitNumber;    } else {      int firstNonZeroDigit=val.getFirstNonzeroDigit();      if (intCount > firstNonZeroDigit) {        resDigits[intCount]^=bitNumber;      } else       if (intCount < firstNonZeroDigit) {        resDigits[intCount]=-bitNumber;        for (i=intCount + 1; i < firstNonZeroDigit; i++) {          resDigits[i]=-1;        }        resDigits[i]=resDigits[i]--;      } else {        i=intCount;        resDigits[i]=-((-resDigits[intCount]) ^ bitNumber);        if (resDigits[i] == 0) {          for (i++; resDigits[i] == -1; i++) {            resDigits[i]=0;          }          resDigits[i]++;        }      }    }  } else {    resDigits[intCount]^=bitNumber;  }  return new BigInteger(resSign,resLength,resDigits);}  }
class C{  public void writeDouble(double dub) throws TException {  byte[] data=new byte[]{0,0,0,0,0,0,0,0};  fixedLongToBytes(Double.doubleToLongBits(dub),data,0);  trans_.write(data);}  }
class C{  public CatalogCategoryRestRep create(CatalogCategoryCreateParam input){  CatalogCategoryRestRep catalogCategory=client.post(CatalogCategoryRestRep.class,input,PathConstants.CATALOG_CATEGORY_URL);  return catalogCategory;}  }
class C{  public boolean isHelp(){  return help;}  }
class C{  public boolean isShowTickMarks(){  return mShowTickMarks;}  }
class C{  public boolean isCapacityKb(){  return capacityKb;}  }
class C{  public Token login(Credentials credentials) throws AuthenticationException, IOException {  String requestUrl=combinePaths(saasApiEndpoint,"/auth/login");  String response;  try {    response=transport.doPost(requestUrl,credentials);  } catch (  HttpException e) {    throw new AuthenticationException();  }  return createDtoFromJson(response,Token.class);}  }
class C{  public static int sortableFloatBits(int bits){  return bits ^ (bits >> 31) & 0x7fffffff;}  }
class C{  public VisorQueryScanSubstringFilter(boolean caseSensitive,String ptrn){  this.caseSensitive=caseSensitive;  this.ptrn=caseSensitive ? ptrn : ptrn.toUpperCase();}  }
class C{  @Override public void endOfStream() throws AdeException {  if (m_inPeriod) {    closePeriod();  }}  }
class C{  public void updateImage(ImageData data){  if (sourceImage != null)   sourceImage.dispose();  if (data != null)   sourceImage=new Image(getDisplay(),data);  syncScrollBars();}  }
class C{  public static void createDirectory(String directoryName){  FilePath.get(directoryName).createDirectory();}  }
class C{  @BeforeClass public static void verifyEnv(){  assertNotNull(address);  assertNotNull(appId);  assertNotNull(userId);  assertNotNull(password);  assertNotNull(rootToken);}  }
class C{  public void clear(){  vals.clear();}  }
class C{  private byte[] entityToBytes(HttpEntity entity) throws IOException, ServerError {  PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength());  byte[] buffer=null;  try {    InputStream in=entity.getContent();    if (in == null) {      throw new ServerError();    }    buffer=mPool.getBuf(1024);    int count;    while ((count=in.read(buffer)) != -1) {      bytes.write(buffer,0,count);    }    return bytes.toByteArray();  }  finally {    try {      entity.consumeContent();    } catch (    IOException e) {      VolleyLog.v("Error occured when calling consumingContent");    }    mPool.returnBuf(buffer);    bytes.close();  }}  }
class C{  public static int[] cs_amd(int order,Dcs A){  Dcs C, A2, AT;  int Cp[], Ci[], last[], W[], len[], nv[], next[], P[], head[], elen[], degree[], w[], hhead[], ATp[], ATi[], d, dk, dext, lemax=0, e, elenk, eln, i, j, k, k1, k2, k3, jlast, ln, dense, nzmax, mindeg=0, nvi, nvj, nvk, mark, wnvi, cnz, nel=0, p, p1, p2, p3, p4, pj, pk, pk1, pk2, pn, q, n, m, t;  int h;  boolean ok;  if (!Dcs_util.CS_CSC(A) || order <= 0 || order > 3)   return (null);  AT=Dcs_transpose.cs_transpose(A,false);  if (AT == null)   return (null);  m=A.m;  n=A.n;  dense=Math.max(16,10 * (int)Math.sqrt(n));  dense=Math.min(n - 2,dense);  if (order == 1 && n == m) {    C=Dcs_add.cs_add(A,AT,0,0);  } else   if (order == 2) {    ATp=AT.p;    ATi=AT.i;    for (p2=0, j=0; j < m; j++) {      p=ATp[j];      ATp[j]=p2;      if (ATp[j + 1] - p > dense)       continue;      for (; p < ATp[j + 1]; p++)       ATi[p2++]=ATi[p];    }    ATp[m]=p2;    A2=Dcs_transpose.cs_transpose(AT,false);    C=(A2 != null) ? Dcs_multiply.cs_multiply(AT,A2) : null;    A2=null;  } else {    C=Dcs_multiply.cs_multiply(AT,A);  }  AT=null;  if (C == null)   return (null);  Dcs_fkeep.cs_fkeep(C,new Cs_diag(),null);  Cp=C.p;  cnz=Cp[n];  P=new int[n + 1];  W=new int[8 * (n + 1)];  t=cnz + cnz / 5 + 2 * n;  Dcs_util.cs_sprealloc(C,t);  len=W;  nv=W;  int nv_offset=n + 1;  next=W;  int next_offset=2 * (n + 1);  head=W;  int head_offset=3 * (n + 1);  elen=W;  int elen_offset=4 * (n + 1);  degree=W;  int degree_offset=5 * (n + 1);  w=W;  int w_offset=6 * (n + 1);  hhead=W;  int hhead_offset=7 * (n + 1);  last=P;  for (k=0; k < n; k++)   len[k]=Cp[k + 1] - Cp[k];  len[n]=0;  nzmax=C.nzmax;  Ci=C.i;  for (i=0; i <= n; i++) {    head[head_offset + i]=-1;    last[i]=-1;    next[next_offset + i]=-1;    hhead[hhead_offset + i]=-1;    nv[nv_offset + i]=1;    w[w_offset + i]=1;    elen[elen_offset + i]=0;    degree[degree_offset + i]=len[i];  }  mark=cs_wclear(0,0,w,w_offset,n);  elen[elen_offset + n]=-2;  Cp[n]=-1;  w[w_offset + n]=0;  for (i=0; i < n; i++) {    d=degree[degree_offset + i];    if (d == 0) {      elen[elen_offset + i]=-2;      nel++;      Cp[i]=-1;      w[w_offset + i]=0;    } else     if (d > dense) {      nv[nv_offset + i]=0;      elen[elen_offset + i]=-1;      nel++;      Cp[i]=Dcs_util.CS_FLIP(n);      nv[nv_offset + n]++;    } else {      if (head[head_offset + d] != -1)       last[head[head_offset + d]]=i;      next[next_offset + i]=head[head_offset + d];      head[head_offset + d]=i;    }  }  while (nel < n) {    for (k=-1; mindeg < n && (k=head[head_offset + mindeg]) == -1; mindeg++)     ;    if (next[next_offset + k] != -1)     last[next[next_offset + k]]=-1;    head[head_offset + mindeg]=next[next_offset + k];    elenk=elen[elen_offset + k];    nvk=nv[nv_offset + k];    nel+=nvk;    if (elenk > 0 && cnz + mindeg >= nzmax) {      for (j=0; j < n; j++) {        if ((p=Cp[j]) >= 0) {          Cp[j]=Ci[p];          Ci[p]=Dcs_util.CS_FLIP(j);        }      }      for (q=0, p=0; p < cnz; ) {        if ((j=Dcs_util.CS_FLIP(Ci[p++])) >= 0) {          Ci[q]=Cp[j];          Cp[j]=q++;          for (k3=0; k3 < len[j] - 1; k3++)           Ci[q++]=Ci[p++];        }      }      cnz=q;    }    dk=0;    nv[nv_offset + k]=-nvk;    p=Cp[k];    pk1=(elenk == 0) ? p : cnz;    pk2=pk1;    for (k1=1; k1 <= elenk + 1; k1++) {      if (k1 > elenk) {        e=k;        pj=p;        ln=len[k] - elenk;      } else {        e=Ci[p++];        pj=Cp[e];        ln=len[e];      }      for (k2=1; k2 <= ln; k2++) {        i=Ci[pj++];        if ((nvi=nv[nv_offset + i]) <= 0)         continue;        dk+=nvi;        nv[nv_offset + i]=-nvi;        Ci[pk2++]=i;        if (next[next_offset + i] != -1)         last[next[next_offset + i]]=last[i];        if (last[i] != -1) {          next[next_offset + last[i]]=next[next_offset + i];        } else {          head[head_offset + degree[degree_offset + i]]=next[next_offset + i];        }      }      if (e != k) {        Cp[e]=Dcs_util.CS_FLIP(k);        w[w_offset + e]=0;      }    }    if (elenk != 0)     cnz=pk2;    degree[degree_offset + k]=dk;    Cp[k]=pk1;    len[k]=pk2 - pk1;    elen[elen_offset + k]=-2;    mark=cs_wclear(mark,lemax,w,w_offset,n);    for (pk=pk1; pk < pk2; pk++) {      i=Ci[pk];      if ((eln=elen[elen_offset + i]) <= 0)       continue;      nvi=-nv[nv_offset + i];      wnvi=mark - nvi;      for (p=Cp[i]; p <= Cp[i] + eln - 1; p++) {        e=Ci[p];        if (w[w_offset + e] >= mark) {          w[w_offset + e]-=nvi;        } else         if (w[w_offset + e] != 0) {          w[w_offset + e]=degree[degree_offset + e] + wnvi;        }      }    }    for (pk=pk1; pk < pk2; pk++) {      i=Ci[pk];      p1=Cp[i];      p2=p1 + elen[elen_offset + i] - 1;      pn=p1;      for (h=0, d=0, p=p1; p <= p2; p++) {        e=Ci[p];        if (w[w_offset + e] != 0) {          dext=w[w_offset + e] - mark;          if (dext > 0) {            d+=dext;            Ci[pn++]=e;            h+=e;          } else {            Cp[e]=Dcs_util.CS_FLIP(k);            w[w_offset + e]=0;          }        }      }      elen[elen_offset + i]=pn - p1 + 1;      p3=pn;      p4=p1 + len[i];      for (p=p2 + 1; p < p4; p++) {        j=Ci[p];        if ((nvj=nv[nv_offset + j]) <= 0)         continue;        d+=nvj;        Ci[pn++]=j;        h+=j;      }      if (d == 0) {        Cp[i]=Dcs_util.CS_FLIP(k);        nvi=-nv[nv_offset + i];        dk-=nvi;        nvk+=nvi;        nel+=nvi;        nv[nv_offset + i]=0;        elen[elen_offset + i]=-1;      } else {        degree[degree_offset + i]=Math.min(degree[degree_offset + i],d);        Ci[pn]=Ci[p3];        Ci[p3]=Ci[p1];        Ci[p1]=k;        len[i]=pn - p1 + 1;        h%=n;        next[next_offset + i]=hhead[hhead_offset + h];        hhead[hhead_offset + h]=i;        last[i]=h;      }    }    degree[degree_offset + k]=dk;    lemax=Math.max(lemax,dk);    mark=cs_wclear(mark + lemax,lemax,w,w_offset,n);    for (pk=pk1; pk < pk2; pk++) {      i=Ci[pk];      if (nv[nv_offset + i] >= 0)       continue;      h=last[i];      i=hhead[hhead_offset + h];      hhead[hhead_offset + h]=-1;      for (; i != -1 && next[next_offset + i] != -1; i=next[next_offset + i], mark++) {        ln=len[i];        eln=elen[elen_offset + i];        for (p=Cp[i] + 1; p <= Cp[i] + ln - 1; p++)         w[w_offset + Ci[p]]=mark;        jlast=i;        for (j=next[next_offset + i]; j != -1; ) {          ok=(len[j] == ln) && (elen[elen_offset + j] == eln);          for (p=Cp[j] + 1; ok && p <= Cp[j] + ln - 1; p++) {            if (w[w_offset + Ci[p]] != mark)             ok=false;          }          if (ok) {            Cp[j]=Dcs_util.CS_FLIP(i);            nv[nv_offset + i]+=nv[nv_offset + j];            nv[nv_offset + j]=0;            elen[elen_offset + j]=-1;            j=next[next_offset + j];            next[next_offset + jlast]=j;          } else {            jlast=j;            j=next[next_offset + j];          }        }      }    }    for (p=pk1, pk=pk1; pk < pk2; pk++) {      i=Ci[pk];      if ((nvi=-nv[nv_offset + i]) <= 0)       continue;      nv[nv_offset + i]=nvi;      d=degree[degree_offset + i] + dk - nvi;      d=Math.min(d,n - nel - nvi);      if (head[head_offset + d] != -1)       last[head[head_offset + d]]=i;      next[next_offset + i]=head[head_offset + d];      last[i]=-1;      head[head_offset + d]=i;      mindeg=Math.min(mindeg,d);      degree[degree_offset + i]=d;      Ci[p++]=i;    }    nv[nv_offset + k]=nvk;    if ((len[k]=p - pk1) == 0) {      Cp[k]=-1;      w[w_offset + k]=0;    }    if (elenk != 0)     cnz=p;  }  for (i=0; i < n; i++)   Cp[i]=Dcs_util.CS_FLIP(Cp[i]);  for (j=0; j <= n; j++)   head[head_offset + j]=-1;  for (j=n; j >= 0; j--) {    if (nv[nv_offset + j] > 0)     continue;    next[next_offset + j]=head[head_offset + Cp[j]];    head[head_offset + Cp[j]]=j;  }  for (e=n; e >= 0; e--) {    if (nv[nv_offset + e] <= 0)     continue;    if (Cp[e] != -1) {      next[next_offset + e]=head[head_offset + Cp[e]];      head[head_offset + Cp[e]]=e;    }  }  for (k=0, i=0; i <= n; i++) {    if (Cp[i] == -1)     k=Dcs_tdfs.cs_tdfs(i,k,head,head_offset,next,next_offset,P,0,w,w_offset);  }  return P;}  }
class C{  public X509CRLImpl(InputStream in) throws CRLException {  try {    this.crl=(CertificateList)CertificateList.ASN1.decode(in);    this.tbsCertList=crl.getTbsCertList();    this.extensions=tbsCertList.getCrlExtensions();  } catch (  IOException e) {    throw new CRLException(e);  }}  }
class C{  private void installLayout(JRootPane root){  if (layoutManager == null) {    layoutManager=createLayoutManager();  }  savedOldLayout=root.getLayout();  root.setLayout(layoutManager);}  }
class C{  public void clearCache(){  if (mMemoryCache != null) {    mMemoryCache.evictAll();    if (BuildConfig.DEBUG) {      Log.d(TAG,"Memory cache cleared");    }  }synchronized (mDiskCacheLock) {    mDiskCacheStarting=true;    if (mDiskLruCache != null && !mDiskLruCache.isClosed()) {      try {        mDiskLruCache.delete();        if (BuildConfig.DEBUG) {          Log.d(TAG,"Disk cache cleared");        }      } catch (      IOException e) {        Log.e(TAG,"clearCache - " + e);      }      mDiskLruCache=null;      initDiskCache();    }  }}  }
class C{  protected static byte[] wrap(int... data){  byte[] res=new byte[data.length];  for (int i=0; i < data.length; i++)   res[i]=(byte)data[i];  return res;}  }
class C{  boolean complete(Object result,Throwable failure,boolean checkArgs){  Assert.state(!completed,"Execution has already been completed");  executions++;  lastResult=result;  lastFailure=failure;  long elapsedNanos=getElapsedTime().toNanos();  if (circuitBreaker != null) {    Duration timeout=circuitBreaker.getTimeout();    boolean timeoutExceeded=timeout != null && elapsedNanos >= timeout.toNanos();    if (circuitBreaker.isFailure(result,failure) || timeoutExceeded)     circuitBreaker.recordFailure(); else     circuitBreaker.recordSuccess();  }  if (retryPolicy.getMaxDelay() != null)   delayNanos=(long)Math.min(delayNanos * retryPolicy.getDelayFactor(),retryPolicy.getMaxDelay().toNanos());  if (retryPolicy.getJitter() != null)   waitNanos=randomizeDelay(delayNanos,retryPolicy.getJitter().toNanos(),Math.random()); else   if (retryPolicy.getJitterFactor() > 0.0)   waitNanos=randomizeDelay(delayNanos,retryPolicy.getJitterFactor(),Math.random()); else   waitNanos=delayNanos;  if (retryPolicy.getMaxDuration() != null) {    long maxRemainingWaitTime=retryPolicy.getMaxDuration().toNanos() - elapsedNanos;    waitNanos=Math.min(waitNanos,maxRemainingWaitTime < 0 ? 0 : maxRemainingWaitTime);    if (waitNanos < 0)     waitNanos=0;  }  boolean maxRetriesExceeded=retryPolicy.getMaxRetries() != -1 && executions > retryPolicy.getMaxRetries();  boolean maxDurationExceeded=retryPolicy.getMaxDuration() != null && elapsedNanos > retryPolicy.getMaxDuration().toNanos();  retriesExceeded=maxRetriesExceeded || maxDurationExceeded;  boolean isAbortable=retryPolicy.canAbortFor(result,failure);  boolean isRetryable=retryPolicy.canRetryFor(result,failure);  boolean shouldRetry=!retriesExceeded && checkArgs && !isAbortable&& retryPolicy.allowsRetries()&& isRetryable;  completed=isAbortable || !shouldRetry;  success=completed && !isAbortable && !isRetryable&& failure == null;  if (!success)   config.handleFailedAttempt(result,failure,this);  if (isAbortable)   config.handleAbort(result,failure,this); else {    if (retriesExceeded)     config.handleRetriesExceeded(result,failure,this);    if (completed)     config.handleComplete(result,failure,this,success);  }  return completed;}  }
class C{  @Override public void before(PropertyInfoRestRep oldProps,PropertyInfoRestRep newProps){  String newIntervalStr=newProps.getProperty(BackupConstants.SCHEDULE_INTERVAL);  String newStartTimeStr=newProps.getProperty(BackupConstants.SCHEDULE_TIME);  if ((newIntervalStr == null || newIntervalStr.isEmpty()) && (newStartTimeStr == null || newStartTimeStr.isEmpty())) {    _log.info("No changes in backup interval and start time");    return;  }  String intervalStr=(newIntervalStr == null || newIntervalStr.isEmpty()) ? oldProps.getProperty(BackupConstants.SCHEDULE_INTERVAL) : newIntervalStr;  String startTimeStr=(newStartTimeStr == null || newStartTimeStr.isEmpty()) ? oldProps.getProperty(BackupConstants.SCHEDULE_TIME) : newStartTimeStr;  _log.info("intervalStr={}, startTimeStr={}",intervalStr,startTimeStr);  validateBackupIntervalAndStartTime(intervalStr,startTimeStr);}  }
class C{  public String toString(){  String prettyText=this.text.replace('\n','\u00b6');  return "Diff(" + this.operation + ",\""+ prettyText+ "\")";}  }
class C{  public boolean containsKey(K key){  kvUtil.verifyKeyNotNull(key);  return gatedHolder(objects.get(key)) != null;}  }
class C{  public boolean hasFirmwareLock(){  return (this.hasExtraFeatures() || (this.sprogType.sprogType <= SprogType.NANO));}  }
class C{  private void compileAndCheckTests(TestSuiteChromosome chromosome){  LoggingUtils.getEvoLogger().info("* Compiling and checking tests");  if (!JUnitAnalyzer.isJavaCompilerAvailable()) {    String msg="No Java compiler is available. Make sure to run EvoSuite with the JDK and not the JRE." + "You can try to setup the JAVA_HOME system variable to point to it, as well as to make sure that the PATH " + "variable points to the JDK before any JRE.";    logger.error(msg);    throw new RuntimeException(msg);  }  ClientServices.getInstance().getClientNode().changeState(ClientState.JUNIT_CHECK);  boolean junitSeparateClassLoader=Properties.USE_SEPARATE_CLASSLOADER;  Properties.USE_SEPARATE_CLASSLOADER=false;  int numUnstable=0;  if (!TimeController.getInstance().isThereStillTimeInThisPhase()) {    Properties.USE_SEPARATE_CLASSLOADER=junitSeparateClassLoader;    return;  }  List<TestCase> testCases=chromosome.getTests();  JUnitAnalyzer.removeTestsThatDoNotCompile(testCases);  long start=java.lang.System.currentTimeMillis();  Iterator<TestCase> iter=testCases.iterator();  while (iter.hasNext()) {    if (!TimeController.getInstance().hasTimeToExecuteATestCase()) {      break;    }    TestCase tc=iter.next();    List<TestCase> list=new ArrayList<>();    list.add(tc);    numUnstable+=JUnitAnalyzer.handleTestsThatAreUnstable(list);    if (list.isEmpty()) {      iter.remove();    }  }  long delta=java.lang.System.currentTimeMillis() - start;  numUnstable+=checkAllTestsIfTime(testCases,delta);  if (testCases.size() > 1) {    Collections.reverse(testCases);    numUnstable+=checkAllTestsIfTime(testCases,delta);  }  chromosome.clearTests();  for (  TestCase testCase : testCases) {    chromosome.addTest(testCase);  }  boolean unstable=(numUnstable > 0);  if (!TimeController.getInstance().isThereStillTimeInThisPhase()) {    logger.warn("JUnit checking timed out");  }  ClientServices.getInstance().getClientNode().trackOutputVariable(RuntimeVariable.HadUnstableTests,unstable);  ClientServices.getInstance().getClientNode().trackOutputVariable(RuntimeVariable.NumUnstableTests,numUnstable);  Properties.USE_SEPARATE_CLASSLOADER=junitSeparateClassLoader;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.N4_ENUM_DECLARATION__LITERALS:    getLiterals().clear();  return;}super.eUnset(featureID);}  }
class C{  private void initTransformerFactories(){  initPlugins(transformerFactories,TransformerFactory.class);  for (  Map.Entry<String,TransformerFactory> entry : TransformerFactory.defaultFactories.entrySet()) {    try {      String name=entry.getKey();      if (null == valueSourceParsers.get(name)) {        TransformerFactory f=entry.getValue();        transformerFactories.put(name,f);      }    } catch (    Exception e) {      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,e);    }  }}  }
class C{  void initializeItemViewTypes(){synchronized (itemViewTypes) {    itemViewTypes.clear();    for (int i=0; i < getCount(); i++) {      itemViewTypes.add(adapter.getInternalItemViewType(i));    }  }}  }
class C{  public void stop(){  coordinatorStreamConsumer.stop();  coordinatorServerURL=null;  yarnUtil.stop();}  }
class C{  public void onAttachFragment(Fragment fragment){  fragmentName=fragment.toString();  try {    listener=(DomoticzFragmentListener)fragment;  } catch (  ClassCastException e) {    throw new ClassCastException(fragment.toString() + " must implement DomoticzFragmentListener");  }}  }
class C{  public static int[] shuffle(int[] input){  List<Integer> vals=new ArrayList<Integer>(input.length);  for (int i=0; i < input.length; i++)   vals.add(input[i]);  Collections.shuffle(vals,SEEDED_RANDOM);  int[] copy=new int[input.length];  for (int i=0; i < input.length; i++)   copy[i]=vals.get(i);  return copy;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-01-27 09:54:40.364 -0500",hash_original_method="F891E9E45688B24DB77EAA9DE670091B",hash_generated_method="DE82729ACB015F73FA05A44E77A4C535") public int size(){  if (mGarbage) {    gc();  }  return mSize;}  }
class C{  public static void loadViLocationList(String filename){  try {    FileInputStream in=new FileInputStream(filename);    if (hsViLocations == null) {      hsViLocations=new HashSet();      BufferedReader reader=new BufferedReader(new InputStreamReader(in,"UTF-8"));      String line;      while ((line=reader.readLine()) != null) {        String word=line.trim();        hsViLocations.add(word);      }    }  } catch (  Exception e) {    System.err.print(e.getMessage());  }}  }
class C{  public static char[] convertBytes2Uint8s(byte[] bytes){  int len=bytes.length;  char[] uint8s=new char[len];  for (int i=0; i < len; i++) {    uint8s[i]=convertByte2Uint8(bytes[i]);  }  return uint8s;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public String leavePaymentTab(){  initPaymentInfo();  model.setDirty(false);  return null;}  }
class C{  public static File makeTempDir() throws IOException {  File temp=File.createTempFile("wwj",null);  if (!temp.delete())   return null;  if (!temp.mkdir())   return null;  return temp;}  }
class C{  public void validatePartitionKeyGroupKey(PartitionKeyGroupKey key) throws IllegalArgumentException {  Assert.notNull(key,"A partition key group key must be specified.");  key.setPartitionKeyGroupName(alternateKeyHelper.validateStringParameter("partition key group name",key.getPartitionKeyGroupName()));}  }
class C{  public Constraints(Direction direction,String relativeId){  this.direction=direction;  this.relativeId=relativeId;}  }
class C{  public static TableWrapLayout createFormTableWrapLayout(boolean makeColumnsEqualWidth,int numColumns){  TableWrapLayout layout=new TableWrapLayout();  layout.topMargin=FORM_BODY_MARGIN_TOP;  layout.bottomMargin=FORM_BODY_MARGIN_BOTTOM;  layout.leftMargin=FORM_BODY_MARGIN_LEFT;  layout.rightMargin=FORM_BODY_MARGIN_RIGHT;  layout.horizontalSpacing=FORM_BODY_HORIZONTAL_SPACING;  layout.verticalSpacing=FORM_BODY_VERTICAL_SPACING;  layout.makeColumnsEqualWidth=makeColumnsEqualWidth;  layout.numColumns=numColumns;  return layout;}  }
class C{  public void reset(){  techTree.checkSubTree(techTree.getPathForRow(0),true);}  }
class C{  public String toString(final boolean sketchSummary,final boolean dataDetail){  return ItemsUtil.toString(sketchSummary,dataDetail,this);}  }
class C{  public GridNioSession session(){  return ses;}  }
class C{  private boolean consistent(final String id,final String s){  if (!ids.containsKey(id))   ids.put(id,s);  return ids.get(id).equals(s);}  }
class C{  public static String translatePushdownOperatorConstraint(License license){  Boolean rmOperatorsAllowed;  try {    rmOperatorsAllowed=Boolean.parseBoolean(license.getConstraints().getConstraintValue(LicenseConstants.RM_IN_HADOOP_CONSTRAINT));  } catch (  ConstraintNotRestrictedException e) {    rmOperatorsAllowed=true;  }  String value;  if (rmOperatorsAllowed) {    value=I18N.getMessage(I18N.getGUIBundle(),"gui.license.constraint.value.enabled.label");  } else {    value=I18N.getMessage(I18N.getGUIBundle(),"gui.license.constraint.value.disabled.label");  }  return I18N.getMessage(I18N.getGUIBundle(),"gui.license.constraint.pushdown_operator.label",value);}  }
class C{  public CertificateMessage(X509Certificate[] certs){  if (certs == null) {    this.certs=new X509Certificate[0];    encoded_certs=new byte[0][0];    length=3;    return;  }  this.certs=certs;  if (encoded_certs == null) {    encoded_certs=new byte[certs.length][];    for (int i=0; i < certs.length; i++) {      try {        encoded_certs[i]=certs[i].getEncoded();      } catch (      CertificateEncodingException e) {        fatalAlert(AlertProtocol.INTERNAL_ERROR,"INTERNAL ERROR",e);      }    }  }  length=3 + 3 * encoded_certs.length;  for (int i=0; i < encoded_certs.length; i++) {    length+=encoded_certs[i].length;  }}  }
class C{  public DrawerBuilder withCloseOnClick(boolean closeOnClick){  this.mCloseOnClick=closeOnClick;  return this;}  }
class C{  @Override public String globalInfo(){  return "The RBF kernel. K(x, y) = e^-(gamma * <x-y, x-y>^2)";}  }
class C{  @Override protected void buildClassPath(ArrayList<String> pathList){  if (!_classDir.getScheme().equals("file"))   return;  try {    if (!_classDir.isDirectory() && _sourceDir.isDirectory()) {      try {        _classDir.mkdirs();      } catch (      IOException e) {      }    }    if (_classDir.isDirectory()) {      String path=_classDir.getNativePath();      if (!pathList.contains(path))       pathList.add(path);    }    if (!_classDir.equals(_sourceDir)) {      String path=_sourceDir.getNativePath();      if (!pathList.contains(path))       pathList.add(path);    }  } catch (  java.security.AccessControlException e) {    log.log(Level.WARNING,e.toString(),e);  }}  }
class C{  public ObjectListing listObjects(ListObjectsRequest listObjectsRequest) throws OSSException, ClientException {  assertParameterNotNull(listObjectsRequest,"listObjectsRequest");  String bucketName=listObjectsRequest.getBucketName();  assertParameterNotNull(bucketName,"bucketName");  ensureBucketNameValid(bucketName);  Map<String,String> params=new LinkedHashMap<String,String>();  populateListObjectsRequestParameters(listObjectsRequest,params);  RequestMessage request=new OSSRequestMessageBuilder(getInnerClient()).setEndpoint(getEndpoint()).setMethod(HttpMethod.GET).setBucket(bucketName).setParameters(params).setOriginalRequest(listObjectsRequest).build();  return doOperation(request,listObjectsReponseParser,bucketName,null,true);}  }
class C{  public BytesStore(DataInput in,long numBytes,int maxBlockSize) throws IOException {  int blockSize=2;  int blockBits=1;  while (blockSize < numBytes && blockSize < maxBlockSize) {    blockSize*=2;    blockBits++;  }  this.blockBits=blockBits;  this.blockSize=blockSize;  this.blockMask=blockSize - 1;  long left=numBytes;  while (left > 0) {    final int chunk=(int)Math.min(blockSize,left);    byte[] block=new byte[chunk];    in.readBytes(block,0,block.length);    blocks.add(block);    left-=chunk;  }  nextWrite=blocks.get(blocks.size() - 1).length;}  }
class C{  private void validateEmrClusterKey(EmrClusterAlternateKeyDto key) throws IllegalArgumentException {  Assert.notNull(key,"An EMR cluster key must be specified.");  key.setNamespace(alternateKeyHelper.validateStringParameter("namespace",key.getNamespace()));  key.setEmrClusterDefinitionName(alternateKeyHelper.validateStringParameter("An","EMR cluster definition name",key.getEmrClusterDefinitionName()));  key.setEmrClusterName(alternateKeyHelper.validateStringParameter("An","EMR cluster name",key.getEmrClusterName()));}  }
class C{  @Override public ShardResponse takeCompletedIncludingErrors(){  return take(false);}  }
class C{  public void run(){  long nowTime=System.currentTimeMillis();  long elapsedTime=nowTime - prevTime;  long totalTime=nowTime - startTime;  System.out.println("Elapsed time = " + elapsedTime);  if (totalTime > DURATION) {    timer.cancel();  }  prevTime=nowTime;  try {    if (firstTime) {      Thread.sleep(INITIAL_PROCESSING_TIME);      firstTime=false;    } else {      Thread.sleep(PROCESSING_TIME);    }  } catch (  Exception e) {  }}  }
class C{  public static void goFullscreen(Window window){  window.getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN| View.SYSTEM_UI_FLAG_HIDE_NAVIGATION| View.SYSTEM_UI_FLAG_FULLSCREEN| View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY);}  }
class C{  public boolean areAllSegmentPresent(int datasetSize){  return mPieSegmentList.size() == datasetSize;}  }
class C{  public boolean isOwner(User user){  return getDao().levelContainsUser(UserLevel.OWNER,this,user);}  }
class C{  @SuppressWarnings("ConstantConditions") public void testLogDirectory() throws Exception {  startUp();  assertEquals(Paths.get(U.getIgniteHome()).normalize().toString(),igfs.clientLogDirectory());}  }
class C{  public boolean isDirectCollection(){  return false;}  }
class C{  private int parseUtf8(InputStream is,int length) throws IOException {  if (length <= 0)   return 0;  if (length > 256) {    is.skip(length);    return 0;  }  int offset=_charBufferOffset;  if (_charBuffer.length <= offset + length) {    char[] buffer=new char[2 * _charBuffer.length];    System.arraycopy(_charBuffer,0,buffer,0,_charBuffer.length);    _charBuffer=buffer;  }  char[] buffer=_charBuffer;  boolean[] isJavaIdentifier=IS_JAVA_IDENTIFIER;  boolean isIdentifier=true;  while (length > 0) {    int d1=is.read();    char ch;    if (d1 == '/') {      ch='.';      length--;    } else     if (d1 < 0x80) {      ch=(char)d1;      length--;    } else     if (d1 < 0xe0) {      int d2=is.read() & 0x3f;      ch=(char)(((d1 & 0x1f) << 6) + (d2));      length-=2;    } else     if (d1 < 0xf0) {      int d2=is.read() & 0x3f;      int d3=is.read() & 0x3f;      ch=(char)(((d1 & 0xf) << 12) + (d2 << 6) + d3);      length-=3;    } else     throw new IllegalStateException();    if (isIdentifier && isJavaIdentifier[ch]) {      buffer[offset++]=ch;    } else {      isIdentifier=false;    }  }  if (!isIdentifier)   return 0;  int charLength=offset - _charBufferOffset;  _charBufferOffset=offset;  return charLength;}  }
class C{  public void addRepl(String noteId,String className){synchronized (registry) {    addNote(noteId);    if (registry.get(noteId).get(className) == null) {      registry.get(noteId).put(className,new HashMap<String,String>());    }  }}  }
class C{  public static String format(final String messagePattern,final Object[] arguments){  if (messagePattern == null || arguments == null || arguments.length == 0) {    return messagePattern;  }  final StringBuilder result=new StringBuilder();  int escapeCounter=0;  int currentArgument=0;  for (int i=0; i < messagePattern.length(); i++) {    final char curChar=messagePattern.charAt(i);    if (curChar == ESCAPE_CHAR) {      escapeCounter++;    } else {      if (curChar == DELIM_START && i < messagePattern.length() - 1 && messagePattern.charAt(i + 1) == DELIM_STOP) {        final int escapedEscapes=escapeCounter / 2;        for (int j=0; j < escapedEscapes; j++) {          result.append(ESCAPE_CHAR);        }        if (escapeCounter % 2 == 1) {          result.append(DELIM_START);          result.append(DELIM_STOP);        } else {          if (currentArgument < arguments.length) {            result.append(arguments[currentArgument]);          } else {            result.append(DELIM_START).append(DELIM_STOP);          }          currentArgument++;        }        i++;        escapeCounter=0;        continue;      }      if (escapeCounter > 0) {        for (int j=0; j < escapeCounter; j++) {          result.append(ESCAPE_CHAR);        }        escapeCounter=0;      }      result.append(curChar);    }  }  return result.toString();}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:34.498 -0500",hash_original_method="1323B57D07CB6385C2F8CE9373488A22",hash_generated_method="C95071B8627034E7D9B94D5D2A0541A3") public void close() throws IOException {  mSocket.close();}  }
class C{  public static int EMSGSIZE(){  return Errno.EMSGSIZE.intValue();}  }
class C{  private void insertDummyContact(){  ArrayList<ContentProviderOperation> operations=new ArrayList<ContentProviderOperation>(2);  ContentProviderOperation.Builder op=ContentProviderOperation.newInsert(ContactsContract.RawContacts.CONTENT_URI).withValue(ContactsContract.RawContacts.ACCOUNT_TYPE,null).withValue(ContactsContract.RawContacts.ACCOUNT_NAME,null);  operations.add(op.build());  op=ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI).withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID,0).withValue(ContactsContract.Data.MIMETYPE,ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE).withValue(ContactsContract.CommonDataKinds.StructuredName.DISPLAY_NAME,DUMMY_CONTACT_NAME);  operations.add(op.build());  ContentResolver resolver=getContentResolver();  try {    resolver.applyBatch(ContactsContract.AUTHORITY,operations);  } catch (  RemoteException e) {    Log.d(TAG,"Could not add a new contact: " + e.getMessage());  }catch (  OperationApplicationException e) {    Log.d(TAG,"Could not add a new contact: " + e.getMessage());  }}  }
class C{  public boolean isSetHost(){  return this.host != null;}  }
class C{  public String formatParentDirectoryName(String rootDir,int uvx,int uvy){  return rootDir + "/" + getZoomLevel()+ "/"+ uvx;}  }
class C{  public static BinaryCachingMetadataHandler create(){  return new BinaryCachingMetadataHandler();}  }
class C{  public ImageResizer(Context context,int imageSize){  super(context);  setImageSize(imageSize);}  }
class C{  private void addWorkerFailed(Worker w){  final ReentrantLock mainLock=this.mainLock;  mainLock.lock();  try {    if (w != null)     workers.remove(w);    decrementWorkerCount();    tryTerminate();  }  finally {    mainLock.unlock();  }}  }
class C{  public LabelValue(final String label,final String value){  this.label=label;  this.value=value;}  }
class C{  public static URL toURL(URI uri) throws MalformedURLException {  if (!uri.isAbsolute())   throw new MockIllegalArgumentException("URI is not absolute");  return MockURL.URL(uri.toString());}  }
class C{  public Comment addComment(String comment){  Comment prop=new Comment(comment);  addComment(prop);  return prop;}  }
class C{  void execute(final int opcode,final int arg,final ClassWriter cw,final Item item){  int t1, t2, t3, t4;switch (opcode) {case Opcodes.NOP:case Opcodes.INEG:case Opcodes.LNEG:case Opcodes.FNEG:case Opcodes.DNEG:case Opcodes.I2B:case Opcodes.I2C:case Opcodes.I2S:case Opcodes.GOTO:case Opcodes.RETURN:    break;case Opcodes.ACONST_NULL:  push(NULL);break;case Opcodes.ICONST_M1:case Opcodes.ICONST_0:case Opcodes.ICONST_1:case Opcodes.ICONST_2:case Opcodes.ICONST_3:case Opcodes.ICONST_4:case Opcodes.ICONST_5:case Opcodes.BIPUSH:case Opcodes.SIPUSH:case Opcodes.ILOAD:push(INTEGER);break;case Opcodes.LCONST_0:case Opcodes.LCONST_1:case Opcodes.LLOAD:push(LONG);push(TOP);break;case Opcodes.FCONST_0:case Opcodes.FCONST_1:case Opcodes.FCONST_2:case Opcodes.FLOAD:push(FLOAT);break;case Opcodes.DCONST_0:case Opcodes.DCONST_1:case Opcodes.DLOAD:push(DOUBLE);push(TOP);break;case Opcodes.LDC:switch (item.type) {case ClassWriter.INT:push(INTEGER);break;case ClassWriter.LONG:push(LONG);push(TOP);break;case ClassWriter.FLOAT:push(FLOAT);break;case ClassWriter.DOUBLE:push(DOUBLE);push(TOP);break;case ClassWriter.CLASS:push(OBJECT | cw.addType("java/lang/Class"));break;case ClassWriter.STR:push(OBJECT | cw.addType("java/lang/String"));break;case ClassWriter.MTYPE:push(OBJECT | cw.addType("java/lang/invoke/MethodType"));break;default :push(OBJECT | cw.addType("java/lang/invoke/MethodHandle"));}break;case Opcodes.ALOAD:push(get(arg));break;case Opcodes.IALOAD:case Opcodes.BALOAD:case Opcodes.CALOAD:case Opcodes.SALOAD:pop(2);push(INTEGER);break;case Opcodes.LALOAD:case Opcodes.D2L:pop(2);push(LONG);push(TOP);break;case Opcodes.FALOAD:pop(2);push(FLOAT);break;case Opcodes.DALOAD:case Opcodes.L2D:pop(2);push(DOUBLE);push(TOP);break;case Opcodes.AALOAD:pop(1);t1=pop();push(ELEMENT_OF + t1);break;case Opcodes.ISTORE:case Opcodes.FSTORE:case Opcodes.ASTORE:t1=pop();set(arg,t1);if (arg > 0) {t2=get(arg - 1);if (t2 == LONG || t2 == DOUBLE) {set(arg - 1,TOP);} else if ((t2 & KIND) != BASE) {set(arg - 1,t2 | TOP_IF_LONG_OR_DOUBLE);}}break;case Opcodes.LSTORE:case Opcodes.DSTORE:pop(1);t1=pop();set(arg,t1);set(arg + 1,TOP);if (arg > 0) {t2=get(arg - 1);if (t2 == LONG || t2 == DOUBLE) {set(arg - 1,TOP);} else if ((t2 & KIND) != BASE) {set(arg - 1,t2 | TOP_IF_LONG_OR_DOUBLE);}}break;case Opcodes.IASTORE:case Opcodes.BASTORE:case Opcodes.CASTORE:case Opcodes.SASTORE:case Opcodes.FASTORE:case Opcodes.AASTORE:pop(3);break;case Opcodes.LASTORE:case Opcodes.DASTORE:pop(4);break;case Opcodes.POP:case Opcodes.IFEQ:case Opcodes.IFNE:case Opcodes.IFLT:case Opcodes.IFGE:case Opcodes.IFGT:case Opcodes.IFLE:case Opcodes.IRETURN:case Opcodes.FRETURN:case Opcodes.ARETURN:case Opcodes.TABLESWITCH:case Opcodes.LOOKUPSWITCH:case Opcodes.ATHROW:case Opcodes.MONITORENTER:case Opcodes.MONITOREXIT:case Opcodes.IFNULL:case Opcodes.IFNONNULL:pop(1);break;case Opcodes.POP2:case Opcodes.IF_ICMPEQ:case Opcodes.IF_ICMPNE:case Opcodes.IF_ICMPLT:case Opcodes.IF_ICMPGE:case Opcodes.IF_ICMPGT:case Opcodes.IF_ICMPLE:case Opcodes.IF_ACMPEQ:case Opcodes.IF_ACMPNE:case Opcodes.LRETURN:case Opcodes.DRETURN:pop(2);break;case Opcodes.DUP:t1=pop();push(t1);push(t1);break;case Opcodes.DUP_X1:t1=pop();t2=pop();push(t1);push(t2);push(t1);break;case Opcodes.DUP_X2:t1=pop();t2=pop();t3=pop();push(t1);push(t3);push(t2);push(t1);break;case Opcodes.DUP2:t1=pop();t2=pop();push(t2);push(t1);push(t2);push(t1);break;case Opcodes.DUP2_X1:t1=pop();t2=pop();t3=pop();push(t2);push(t1);push(t3);push(t2);push(t1);break;case Opcodes.DUP2_X2:t1=pop();t2=pop();t3=pop();t4=pop();push(t2);push(t1);push(t4);push(t3);push(t2);push(t1);break;case Opcodes.SWAP:t1=pop();t2=pop();push(t1);push(t2);break;case Opcodes.IADD:case Opcodes.ISUB:case Opcodes.IMUL:case Opcodes.IDIV:case Opcodes.IREM:case Opcodes.IAND:case Opcodes.IOR:case Opcodes.IXOR:case Opcodes.ISHL:case Opcodes.ISHR:case Opcodes.IUSHR:case Opcodes.L2I:case Opcodes.D2I:case Opcodes.FCMPL:case Opcodes.FCMPG:pop(2);push(INTEGER);break;case Opcodes.LADD:case Opcodes.LSUB:case Opcodes.LMUL:case Opcodes.LDIV:case Opcodes.LREM:case Opcodes.LAND:case Opcodes.LOR:case Opcodes.LXOR:pop(4);push(LONG);push(TOP);break;case Opcodes.FADD:case Opcodes.FSUB:case Opcodes.FMUL:case Opcodes.FDIV:case Opcodes.FREM:case Opcodes.L2F:case Opcodes.D2F:pop(2);push(FLOAT);break;case Opcodes.DADD:case Opcodes.DSUB:case Opcodes.DMUL:case Opcodes.DDIV:case Opcodes.DREM:pop(4);push(DOUBLE);push(TOP);break;case Opcodes.LSHL:case Opcodes.LSHR:case Opcodes.LUSHR:pop(3);push(LONG);push(TOP);break;case Opcodes.IINC:set(arg,INTEGER);break;case Opcodes.I2L:case Opcodes.F2L:pop(1);push(LONG);push(TOP);break;case Opcodes.I2F:pop(1);push(FLOAT);break;case Opcodes.I2D:case Opcodes.F2D:pop(1);push(DOUBLE);push(TOP);break;case Opcodes.F2I:case Opcodes.ARRAYLENGTH:case Opcodes.INSTANCEOF:pop(1);push(INTEGER);break;case Opcodes.LCMP:case Opcodes.DCMPL:case Opcodes.DCMPG:pop(4);push(INTEGER);break;case Opcodes.JSR:case Opcodes.RET:throw new RuntimeException("JSR/RET are not supported with computeFrames option");case Opcodes.GETSTATIC:push(cw,item.strVal3);break;case Opcodes.PUTSTATIC:pop(item.strVal3);break;case Opcodes.GETFIELD:pop(1);push(cw,item.strVal3);break;case Opcodes.PUTFIELD:pop(item.strVal3);pop();break;case Opcodes.INVOKEVIRTUAL:case Opcodes.INVOKESPECIAL:case Opcodes.INVOKESTATIC:case Opcodes.INVOKEINTERFACE:pop(item.strVal3);if (opcode != Opcodes.INVOKESTATIC) {t1=pop();if (opcode == Opcodes.INVOKESPECIAL && item.strVal2.charAt(0) == '<') {init(t1);}}push(cw,item.strVal3);break;case Opcodes.INVOKEDYNAMIC:pop(item.strVal2);push(cw,item.strVal2);break;case Opcodes.NEW:push(UNINITIALIZED | cw.addUninitializedType(item.strVal1,arg));break;case Opcodes.NEWARRAY:pop();switch (arg) {case Opcodes.T_BOOLEAN:push(ARRAY_OF | BOOLEAN);break;case Opcodes.T_CHAR:push(ARRAY_OF | CHAR);break;case Opcodes.T_BYTE:push(ARRAY_OF | BYTE);break;case Opcodes.T_SHORT:push(ARRAY_OF | SHORT);break;case Opcodes.T_INT:push(ARRAY_OF | INTEGER);break;case Opcodes.T_FLOAT:push(ARRAY_OF | FLOAT);break;case Opcodes.T_DOUBLE:push(ARRAY_OF | DOUBLE);break;default :push(ARRAY_OF | LONG);break;}break;case Opcodes.ANEWARRAY:String s=item.strVal1;pop();if (s.charAt(0) == '[') {push(cw,'[' + s);} else {push(ARRAY_OF | OBJECT | cw.addType(s));}break;case Opcodes.CHECKCAST:s=item.strVal1;pop();if (s.charAt(0) == '[') {push(cw,s);} else {push(OBJECT | cw.addType(s));}break;default :pop(arg);push(cw,item.strVal1);break;}}  }
class C{  private void writeObject(ObjectOutputStream aOutputStream) throws IOException {  aOutputStream.defaultWriteObject();}  }
class C{  public long lastUpdateTime(){  return lastUpdateTime;}  }
class C{  private void updateChanges(DocumentEvent event,StringBuilder oldText){  int i=findIndex(event.getOffset());  int endOffset=event.getOffset() + event.getNewLength();  TextChangeImpl change=new TextChangeImpl(oldText,event.getOffset(),endOffset);  if (i < 0) {    myChanges.add(change);  } else {    myChanges.add(i,change);  }}  }
class C{  @BeforeClass public void initChannelManagers(){  writingChannelManager=new WritingChannelManager();  readingChannelManager=new ReadingChannelManager();}  }
class C{  private void checkEndPtVertexIntersections(){  for (Iterator i=segStrings.iterator(); i.hasNext(); ) {    SegmentString ss=(SegmentString)i.next();    Coordinate[] pts=ss.getCoordinates();    checkEndPtVertexIntersections(pts[0],segStrings);    checkEndPtVertexIntersections(pts[pts.length - 1],segStrings);  }}  }
class C{  SQLiteLoaderObserver registerLoader(final SQLiteLoader loader,final String table){  Logger.d(TAG,"Add Loader Observer: %s",table);  final SQLiteLoaderObserver entry=new SQLiteLoaderObserver(loader,table);  mActiveLoaders.add(entry);  return entry;}  }
class C{  static String translateAttribute(String name){  if (FXG_TRACKING_ATTRIBUTE.equals(name))   name=FXG_TRACKING_RIGHT_PROPERTY; else   if (FXG_MARGINLEFT_ATTRIBUTE.equals(name))   name=FXG_PARAGRAPH_START_INDENT_PROPERTY; else   if (FXG_MARGINTOP_ATTRIBUTE.equals(name))   name=FXG_PARAGRAPH_SPACE_BEFORE_PROPERTY; else   if (FXG_MARGINRIGHT_ATTRIBUTE.equals(name))   name=FXG_PARAGRAPH_END_INDENT_PROPERTY; else   if (FXG_MARGINBOTTOM_ATTRIBUTE.equals(name))   name=FXG_PARAGRAPH_SPACE_AFT_PROPERTY;  return name;}  }
class C{  public Text padRight(int len){  return padRight(len,' ');}  }
class C{  public boolean isExternalBilling(){  return externalBilling;}  }
class C{  public static void writeToFileReal_3D(String format,int slices,int rows,int columns,double[] x,String filename){  int sliceStride=rows * columns;  int rowStride=columns;  try {    BufferedWriter out=new BufferedWriter(new FileWriter(filename));    for (int s=0; s < slices; s++) {      out.newLine();      out.write("(" + s + ",:,:)=");      out.newLine();      out.newLine();      for (int r=0; r < rows; r++) {        for (int c=0; c < columns; c++) {          out.write(String.format(format,x[s * sliceStride + r * rowStride + c]) + "\t");        }        out.newLine();      }      out.newLine();    }    out.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.212 -0400",hash_original_method="767DC778C8AA32BF2745832DC23C8583",hash_generated_method="1C10F2F6DD1D625E6F214DC42669D784") public static void moveToDirectory(File src,File destDir,boolean createDestDir) throws IOException {  if (src == null) {    throw new NullPointerException("Source must not be null");  }  if (destDir == null) {    throw new NullPointerException("Destination must not be null");  }  if (!src.exists()) {    throw new FileNotFoundException("Source '" + src + "' does not exist");  }  if (src.isDirectory()) {    moveDirectoryToDirectory(src,destDir,createDestDir);  } else {    moveFileToDirectory(src,destDir,createDestDir);  }}  }
class C{  public JSONObject optJSONObject(String key){  Object object=this.opt(key);  return object instanceof JSONObject ? (JSONObject)object : null;}  }
class C{  public boolean hasRel(){  return getRel() != null;}  }
class C{  private boolean isHeaderAndDescOnly(){  return headerAndDescOnly;}  }
class C{  protected SoftReferenceCache(){}  }
class C{  private static void testJcmdPidBigScript() throws Exception {  File scrpitFile=new File(TEST_SRC,"dcmd-big-script.txt");  OutputAnalyzer output=JcmdBase.jcmd(VM_ARGS,new String[]{"-f",scrpitFile.getAbsolutePath()});  output.shouldHaveExitValue(0);  output.shouldNotContain("Exception");  output.shouldContain(System.getProperty("java.vm.name").trim());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public QueryService addCriteria(String ldpath,String value){  return addCriteria(ldpath,value,Comparison.EQ);}  }
class C{  private CIdaSelectionDialog(final Window parent,final String initialDirectory){  super(parent,"IDA Pro Selection",ModalityType.APPLICATION_MODAL);  new CDialogEscaper(this);  setLayout(new BorderLayout());  setDefaultCloseOperation(DISPOSE_ON_CLOSE);  m_chooser.setControlButtonsAreShown(false);  m_chooser.addPropertyChangeListener(JFileChooser.DIRECTORY_CHANGED_PROPERTY,new DirectoryChangedListener());  m_chooser.setCurrentDirectory(new File(initialDirectory));  m_chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);  m_chooser.setAcceptAllFileFilterUsed(false);  add(m_chooser);  final JPanel lowerPanel=new JPanel(new BorderLayout());  final CPanelTwoButtons buttonPanel=new CPanelTwoButtons(new InternalActionListener(),"OK","Cancel");  lowerPanel.add(buttonPanel,BorderLayout.EAST);  final JPanel cppPanel=new JPanel(new GridLayout(1,2));  cppPanel.setBorder(new EmptyBorder(5,5,5,5));  final JPanel install=new JPanel();  install.add(m_cppButton);  final JLabel exporterLabel=new JLabel("BinExport IDA plugin: ");  exporterLabel.setBorder(new EmptyBorder(5,5,5,5));  cppPanel.add(exporterLabel);  cppPanel.add(m_cppStateLabel);  cppPanel.add(install);  lowerPanel.add(cppPanel,BorderLayout.CENTER);  add(lowerPanel,BorderLayout.SOUTH);  updateDialog(m_chooser.getCurrentDirectory());  pack();}  }
class C{  private void deleteDatastore(final State current){  Operation.CompletionHandler handler=null;  Operation deleteOperation=Operation.createDelete(UriUtils.buildUri(getHost(),DatastoreServiceFactory.SELF_LINK + "/" + current.datastoreId)).setReferer(UriUtils.buildUri(getHost(),getSelfLink())).setCompletion(handler);  this.sendRequest(deleteOperation);}  }
class C{  public ControllerOperationValuesWrapper(ControllerOperationValuesWrapper values){  if (values.contains(MIGRATION_SUSPEND_BEFORE_COMMIT)) {    _controllerOperationValues.put(MIGRATION_SUSPEND_BEFORE_COMMIT,values.getMigrationSuspendBeforeCommit());  }  if (values.contains(MIGRATION_SUSPEND_BEFORE_DELETE_SOURCE)) {    _controllerOperationValues.put(MIGRATION_SUSPEND_BEFORE_DELETE_SOURCE,values.getMigrationSuspendBeforeDeleteSource());  }}  }
class C{  public void green(short g){  self.green=g;}  }
class C{  private void clearAndSetDefaultFlows(){  if (this.sw.getOFFactory().getVersion().compareTo(OFVersion.OF_10) == 0) {    OFFlowDelete deleteFlows=this.factory.buildFlowDelete().build();    this.sw.write(deleteFlows);  } else {    OFFlowDelete deleteFlows=this.factory.buildFlowDelete().setTableId(TableId.ALL).build();    this.sw.write(deleteFlows);  }  if (this.sw.getOFFactory().getVersion().compareTo(OFVersion.OF_13) >= 0) {    ArrayList<OFAction> actions=new ArrayList<OFAction>(1);    actions.add(factory.actions().output(OFPort.CONTROLLER,0xffFFffFF));    ArrayList<OFMessage> flows=new ArrayList<OFMessage>();    for (int tableId=0; tableId < this.sw.getTables(); tableId++) {      OFFlowAdd defaultFlow=this.factory.buildFlowAdd().setTableId(TableId.of(tableId)).setPriority(0).setActions(actions).build();      flows.add(defaultFlow);    }    this.sw.write(flows);  }}  }
class C{  public void rotate(double angle){  for (  MultiblockComponent comp : getComponents())   comp.rotate(angle);  updateLocationCache();}  }
class C{  @RequestMapping(value="/{id}",method=RequestMethod.DELETE) @ResponseBody public RestWrapper delete(@PathVariable("id") Integer serverId,Principal principal){  RestWrapper restWrapper=null;  try {    serversDAO.delete(serverId);    restWrapper=new RestWrapper(null,RestWrapper.OK);    LOGGER.info("Record with ID:" + serverId + " deleted from Servers by User:"+ principal.getName());  } catch (  Exception e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public UseShortStackScans(){  super(Options.set,"Use Short Stack Scans","Use optimization that only scans the part of the stack that has changed since last GC?",false);}  }
class C{  public Object clone(){  CharBuffer newBuffer=new CharBuffer();  newBuffer.length(length());  System.arraycopy(buffer(),0,newBuffer.buffer(),0,length());  return newBuffer;}  }
class C{  private boolean containsMapping(Object key,Object value){  Object k=maskNull(key);  Object[] tab=table;  int len=tab.length;  int i=hash(k,len);  while (true) {    Object item=tab[i];    if (item == k)     return tab[i + 1] == value;    if (item == null)     return false;    i=nextKeyIndex(i,len);  }}  }
class C{  protected void freePlacementCapacity(final Territory producer,final int freeSize,final Collection<Unit> unitsLeftToPlace,final Territory at,final PlayerID player){  int foundSpaceTotal=0;  final List<UndoablePlacement> redoPlacements=new ArrayList<>();  final HashMap<Territory,Integer> redoPlacementsCount=new HashMap<>();  for (  final UndoablePlacement placement : m_placements) {    if (placement.getProducerTerritory().equals(producer)) {      final Territory placeTerritory=placement.getPlaceTerritory();      if (placeTerritory.isWater() && !placeTerritory.equals(producer) && (!isUnitPlacementRestrictions() || !Match.someMatch(placement.getUnits(),Matches.UnitRequiresUnitsOnCreation))) {        redoPlacements.add(placement);        final Integer integer=redoPlacementsCount.get(placeTerritory);        if (integer == null) {          redoPlacementsCount.put(placeTerritory,placement.getUnits().size());        } else {          redoPlacementsCount.put(placeTerritory,integer + placement.getUnits().size());        }      }    }  }  final Collection<Tuple<UndoablePlacement,Territory>> splitPlacements=new ArrayList<>();  for (  final Entry<Territory,Integer> entry : redoPlacementsCount.entrySet()) {    final Territory placeTerritory=entry.getKey();    final int maxProductionThatCanBeTakenOverFromThisPlacement=entry.getValue();    final List<Territory> potentialNewProducers=getAllProducers(placeTerritory,player,unitsLeftToPlace);    potentialNewProducers.remove(producer);    Collections.sort(potentialNewProducers,getBestProducerComparator(placeTerritory,unitsLeftToPlace,player));    final int maxSpaceToBeFree=Math.min(maxProductionThatCanBeTakenOverFromThisPlacement,freeSize - foundSpaceTotal);    int spaceAlreadyFree=0;    for (    final Territory potentialNewProducerTerritory : potentialNewProducers) {      int leftToPlace=getMaxUnitsToBePlacedFrom(potentialNewProducerTerritory,unitsPlacedInTerritorySoFar(placeTerritory),placeTerritory,player);      if (leftToPlace == -1) {        leftToPlace=maxProductionThatCanBeTakenOverFromThisPlacement;      }      for (      final UndoablePlacement placement : redoPlacements) {        if (!placement.getPlaceTerritory().equals(placeTerritory)) {          continue;        }        final Collection<Unit> placedUnits=placement.getUnits();        final int placementSize=placedUnits.size();        if (placementSize <= leftToPlace) {          placement.setProducerTerritory(potentialNewProducerTerritory);          removeFromProducedMap(producer,placedUnits);          updateProducedMap(potentialNewProducerTerritory,placedUnits);          spaceAlreadyFree+=placementSize;        } else {          splitPlacements.add(Tuple.of(placement,potentialNewProducerTerritory));        }        if (spaceAlreadyFree >= maxSpaceToBeFree) {          break;        }      }      if (spaceAlreadyFree >= maxSpaceToBeFree) {        break;      }    }    foundSpaceTotal+=spaceAlreadyFree;    if (foundSpaceTotal >= freeSize) {      break;    }  }  boolean unusedSplitPlacments=false;  final Collection<UndoablePlacement> usedUnoablePlacements=new ArrayList<>();  if (foundSpaceTotal < freeSize) {    for (    final Tuple<UndoablePlacement,Territory> tuple : splitPlacements) {      final UndoablePlacement placement=tuple.getFirst();      if (usedUnoablePlacements.contains(placement)) {        unusedSplitPlacments=true;        continue;      }      final Territory newProducer=tuple.getSecond();      int leftToPlace=getMaxUnitsToBePlacedFrom(newProducer,unitsLeftToPlace,at,player);      foundSpaceTotal+=leftToPlace;      final Collection<Unit> unitsForOldProducer=new ArrayList<>(placement.getUnits());      final Collection<Unit> unitsForNewProducer=new ArrayList<>();      for (      final Unit unit : unitsForOldProducer) {        if (leftToPlace == 0) {          break;        }        unitsForNewProducer.add(unit);        --leftToPlace;      }      unitsForOldProducer.removeAll(unitsForNewProducer);      if (!unitsForNewProducer.isEmpty()) {        usedUnoablePlacements.add(placement);        undoMove(placement.getIndex());        performPlaceFrom(newProducer,unitsForNewProducer,placement.getPlaceTerritory(),player);        performPlaceFrom(producer,unitsForOldProducer,placement.getPlaceTerritory(),player);      }    }  }  if (foundSpaceTotal < freeSize && unusedSplitPlacments) {    freePlacementCapacity(producer,(freeSize - foundSpaceTotal),unitsLeftToPlace,at,player);  }}  }
class C{  @Factory public static <T>Matcher<T> theInstance(T target){  return new IsSame<T>(target);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.327 -0500",hash_original_method="5900AA55EC6D83D47F45CED3D37DDEC7",hash_generated_method="CCC9F37081A68346A27EB06AC5AAD37C") public PAccessNetworkInfoHeader createPAccessNetworkInfoHeader(){  PAccessNetworkInfo accessNetworkInfo=new PAccessNetworkInfo();  return accessNetworkInfo;}  }
class C{  public void output(OutputStream out){  boolean prettyPrint=getPrettyPrint();  int tabLevel=getTabLevel();  try {    if (registry.size() == 0) {      if ((prettyPrint && this instanceof Printable) && (tabLevel > 0))       putTabs(tabLevel,out);      super.output(out);    } else {      if ((prettyPrint && this instanceof Printable) && (tabLevel > 0))       putTabs(tabLevel,out);      out.write(createStartTag().getBytes());      if (getTagText() != null)       out.write(getTagText().getBytes());      Enumeration<String> en=registryList.elements();      while (en.hasMoreElements()) {        Object obj=registry.get(en.nextElement());        if (obj instanceof GenericElement) {          Element e=(Element)obj;          if (prettyPrint && this instanceof Printable) {            if (getNeedLineBreak()) {              out.write('\n');              e.setTabLevel(tabLevel + 1);            }          }          e.output(out);        } else {          if (prettyPrint && this instanceof Printable) {            if (getNeedLineBreak()) {              out.write('\n');              putTabs(tabLevel + 1,out);            }          }          String string=obj.toString();          out.write(string.getBytes());        }      }      if (getNeedClosingTag()) {        if (prettyPrint && this instanceof Printable) {          if (getNeedLineBreak()) {            out.write('\n');            if (tabLevel > 0)             putTabs(tabLevel,out);          }        }        out.write(createEndTag().getBytes());      }    }  } catch (  IOException ioe) {    ioe.printStackTrace(new PrintWriter(out));  }}  }
class C{  public RandomAccessData(int initialBufferSize){  checkArgument(initialBufferSize >= 0,"Expected initial buffer size to be greater than zero.");  this.buffer=new byte[initialBufferSize];}  }
class C{  public ForegroundAction(String nm,Color fg){  super(nm);  this.fg=fg;}  }
class C{  public boolean doesBindPlayerInventory(){  return true;}  }
class C{  void measureFieldsAndInputs(int widthMeasureSpec,int heightMeasureSpec){  measureFields(widthMeasureSpec,heightMeasureSpec);  measureConnectedBlockGroup(widthMeasureSpec,heightMeasureSpec);  if ((mInputType == Input.TYPE_VALUE) && mInput.getBlock().getInputsInline()) {    mMaxFieldHeight=Math.max(mMaxFieldHeight,mConnectedGroupHeight);  }  mHasMeasuredFieldsAndInput=true;}  }
class C{  public MeasurementEvaluationStatisticsTableModel(List<EvaluationStatistics> stats,String measurement,boolean showIndex){  m_Statistics=stats;  m_Measurement=measurement;  m_ShowIndex=showIndex;  m_Classifiers=EvaluationStatisticsUtils.commandLines(stats,true);  m_Datasets=EvaluationStatisticsUtils.relations(stats,true);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static String quote(String string){  if (string == null || string.length() == 0) {    return "\"\"";  }  char b;  char c=0;  int i;  int len=string.length();  StringBuffer sb=new StringBuffer(len + 4);  String t;  sb.append('"');  for (i=0; i < len; i+=1) {    b=c;    c=string.charAt(i);switch (c) {case '\\':case '"':      sb.append('\\');    sb.append(c);  break;case '/':if (b == '<') {  sb.append('\\');}sb.append(c);break;case '\b':sb.append("\\b");break;case '\t':sb.append("\\t");break;case '\n':sb.append("\\n");break;case '\f':sb.append("\\f");break;case '\r':sb.append("\\r");break;default :if (c < ' ') {t="000" + Integer.toHexString(c);sb.append("\\u" + t.substring(t.length() - 4));} else {sb.append(c);}}}sb.append('"');return sb.toString();}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_A:    return stateVector[0] == State.main_region_A;case main_region_B:  return stateVector[0] == State.main_region_B;default :return false;}}  }
class C{  public IgniteUuid affinityKey(long blockOff,boolean includeMoved){  if (ranges == null)   return null;  assert !ranges.isEmpty();  int leftIdx=0, rightIdx=ranges.size() - 1;  IgfsFileAffinityRange leftRange=ranges.get(leftIdx);  IgfsFileAffinityRange rightRange=ranges.get(rightIdx);  if (leftRange.less(blockOff))   return null;  if (leftRange.belongs(blockOff))   return leftRange.status() != RANGE_STATUS_MOVED ? leftRange.affinityKey() : includeMoved ? leftRange.affinityKey() : null;  if (rightRange.greater(blockOff))   return null;  if (rightRange.belongs(blockOff))   return rightRange.status() != RANGE_STATUS_MOVED ? rightRange.affinityKey() : includeMoved ? leftRange.affinityKey() : null;  while (rightIdx - leftIdx > 1) {    int midIdx=(leftIdx + rightIdx) / 2;    IgfsFileAffinityRange midRange=ranges.get(midIdx);    if (midRange.belongs(blockOff))     return midRange.status() != RANGE_STATUS_MOVED ? midRange.affinityKey() : includeMoved ? leftRange.affinityKey() : null;    if (midRange.less(blockOff))     rightIdx=midIdx; else {      assert midRange.greater(blockOff);      leftIdx=midIdx;    }  }  return null;}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public static int median(ModifiableDoubleDBIDList data){  return median(data,0,data.size());}  }
class C{  public CLIOutputWithRevisionResponse checkout(final CheckoutRequest request) throws IOException, SubversionException, UnauthorizedException {  final File projectPath=new File(request.getProjectPath());  final List<String> cliArgs=defaultArgs();  addFlag(cliArgs,"--ignore-externals",request.isIgnoreExternals());  addOption(cliArgs,"--depth",request.getDepth());  addOption(cliArgs,"--revision",request.getRevision());  cliArgs.add("checkout");  cliArgs.add(request.getUrl());  cliArgs.add(projectPath.getAbsolutePath());  CommandLineResult result=runCommand(null,cliArgs,projectPath,request.getPaths(),request.getUsername(),request.getPassword(),request.getUrl());  return DtoFactory.getInstance().createDto(CLIOutputWithRevisionResponse.class).withCommand(result.getCommandLine().toString()).withOutput(result.getStdout()).withErrOutput(result.getStderr()).withRevision(SubversionUtils.getCheckoutRevision(result.getStdout()));}  }
class C{  @Override public long length(){  return getCache().length;}  }
class C{  public static ThreadSafeLocation wrap(Object syncObj,Location location){  if (location != null)   return new ThreadSafeLocation(syncObj,location); else   return null;}  }
class C{  protected ShaderVar addVarying(IGlobalShaderVar var,int index){  return addVarying(var.getVarString() + Integer.toString(index),var.getDataType());}  }
class C{  public void updateAvgSp(double avgSpeed){  avgSpeedTV.setText(String.format("%.2f",avgSpeed));}  }
class C{  public final int length(){  return longs.length();}  }
class C{  public Boolean isNetworkFilterSupported(){  return networkFilterSupported;}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public boolean isEmpty(){  return list.isEmpty();}  }
class C{  public ModpackFileSelectionPanel(WizardController controller,Map wizardData,File gameDir,BiFunction<String,Boolean,Integer> blackList){  initComponents();  this.controller=controller;  this.wizardData=wizardData;  this.blackList=blackList;  CheckBoxTreeNode root=create(gameDir,"minecraft");  jTree1.setModel(new DefaultTreeModel(root));  jTree1.setCellRenderer(new CheckBoxTreeCellRenderer());  jTree1.addMouseListener(new CheckBoxTreeNodeSelectionListener());  wizardData.put("blackList",root);}  }
class C{  public Checkpoint(Map<SystemStreamPartition,String> offsets){  this.offsets=offsets;}  }
class C{  public static int px2dp(Context context,int px){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_PX,px,context.getResources().getDisplayMetrics());}  }
class C{  protected void addEarToDomain(EAR ear,Element domain){  Element application=domain.getOwnerDocument().createElement("Application");  domain.appendChild(application);  application.setAttribute("Name","_" + ear.getName() + "_app");  application.setAttribute("Path",getAbsolutePath(ear));  application.setAttribute("StagingMode","nostage");  application.setAttribute("TwoPhase","false");  for (  String context : ear.getWebContexts()) {    Element webAppComponent=application.getOwnerDocument().createElement("WebAppComponent");    application.appendChild(webAppComponent);    webAppComponent.setAttribute("Name",context);    webAppComponent.setAttribute("Targets",getServerName());    webAppComponent.setAttribute("URI",ear.getWebUri(context));  }}  }
class C{  public void updateAttemptsHistory(String address){  for (  ExchangeHistoryItem item : history) {    if (item.address.equals(address)) {      item.attempts++;    }  }}  }
class C{  public void testConstructorSignBytesZeroNull3(){  byte aBytes[]={};  int aSign=1;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,aNumber.signum());}  }
class C{  public static void processPage(final Values commonValues,final PdfDecoderInt decode_pdf,final GUIFactory currentGUI,final GUIThumbnailPanel thumbnails){  if (commonValues.isPDF() && ((decode_pdf.isOpen() || !commonValues.isPDF() || decode_pdf.getJPedalObject(PdfDictionary.Linearized) != null))) {    final PdfFileInformation currentFileInformation=decode_pdf.getFileInformationData();    decode_pdf.setRenderMode(PdfDecoderInt.RENDERIMAGES + PdfDecoderInt.RENDERTEXT);    final String[] values=currentFileInformation.getFieldValues();    final String[] fields=PdfFileInformation.getFieldNames();    final String[] ocr={"TeleForm","dgn2pdf","ABBYY FineReader 8.0 Professional Edition"};    for (int i=0; i < fields.length; i++) {      if ((fields[i].equals("Creator")) || (fields[i].equals("Producer"))) {        for (        final String anOcr : ocr) {          if (values[i].equals(anOcr)) {            decode_pdf.setRenderMode(PdfDecoderInt.RENDERIMAGES);          }        }      }    }  }  if (commonValues.isPDF()) {    commonValues.setPageCount(decode_pdf.getPageCount());  } else   if (!commonValues.isMultiTiff()) {    commonValues.setPageCount(1);  }  if (commonValues.getPageCount() < commonValues.getCurrentPage()) {    commonValues.setCurrentPage(commonValues.getPageCount());    System.err.println(commonValues.getCurrentPage() + " out of range. Opening on last page");    LogWriter.writeLog(commonValues.getCurrentPage() + " out of range. Opening on last page");  }  decode_pdf.setExtractionMode(PdfDecoderInt.TEXT,currentGUI.getScaling());  currentGUI.setPageNumber();  currentGUI.resetRotationBox();  if (commonValues.isPDF()) {    currentGUI.decodePage();  } else {    currentGUI.scaleAndRotate();    Images.decodeImage(decode_pdf,currentGUI,thumbnails,commonValues);    Values.setProcessing(false);  }}  }
class C{  static int applyMaskPenaltyRule4(ByteMatrix matrix){  int numDarkCells=0;  byte[][] array=matrix.getArray();  int width=matrix.getWidth();  int height=matrix.getHeight();  for (int y=0; y < height; y++) {    byte[] arrayY=array[y];    for (int x=0; x < width; x++) {      if (arrayY[x] == 1) {        numDarkCells++;      }    }  }  int numTotalCells=matrix.getHeight() * matrix.getWidth();  double darkRatio=(double)numDarkCells / numTotalCells;  int fivePercentVariances=(int)(Math.abs(darkRatio - 0.5) * 20.0);  return fivePercentVariances * N4;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected Vector3[] canConnectRail(Block block){  if (!(block instanceof BlockRail))   return null;  if (this.distanceSquared(block) > 2)   return null;  Vector3[] result=checkRail(this);  if (result.length == 2)   return null;  return result;}  }
class C{  public boolean toggleNeverTranslateDomainState(boolean value){  return toggleState(NEVER_DOMAIN,value);}  }
class C{  public boolean isEmpty(InputNode from) throws Exception {  if (stack.top() == from) {    EventNode event=reader.peek();    if (event.isEnd()) {      return true;    }  }  return false;}  }
class C{  public static int bin_median(double[] data){  double total_sum=0.0;  for (int i=0; i < data.length; ++i) {    total_sum+=data[i];  }  double halfway=total_sum / 2;  double current=0.0;  int bin=0;  for (int i=0; i < data.length; ++i) {    current+=data[i];    if (current >= halfway) {      break;    }    ++bin;  }  return bin;}  }
class C{  public String version(){  return VERSION;}  }
class C{  public boolean usesPropertyAccess(){  if (hasAccess()) {    return getAccess().equals(JPA_ACCESS_PROPERTY);  } else {    return hasAccessMethods() ? !usesVirtualAccess() : m_classAccessor.usesPropertyAccess();  }}  }
class C{  public void print(){  PApplet.println(element.toString());}  }
class C{  public boolean isStale(){  return this.getParameterAsBoolean(ParameterNames.STALE);}  }
class C{  public Edited(DateTime value){  this();  setValue(value);}  }
class C{  public static UUID parse(final String str){  final UUID r=new UUID();  r.fromString(str);  return r;}  }
class C{  public static Angle degreeAngle(double value){  return new Angle(Math.toRadians(value));}  }
class C{  public void onCreate(SQLiteDatabase paramSQLiteDatabase){  int numSchemas=sSchemas.length;  for (int i=0; i < numSchemas; i++) {    try {      String[][] schema=(String[][])sSchemas[i];      paramSQLiteDatabase.execSQL(createTableQueryFromArray(sTables[i],schema));    } catch (    Exception localException) {      while (true)       localException.printStackTrace();    }  }}  }
class C{  public static double[][] convertMatrix(int[][] input){  double[][] outputArray=new double[input.length][];  for (int i=0; i < input.length; i++) {    outputArray[i]=new double[input[i].length];    for (int j=0; j < input[i].length; j++) {      outputArray[i][j]=input[i][j];    }  }  return outputArray;}  }
class C{  public void testCase4(){  byte aBytes[]={-127,100,56,7,98,-1,39,-128,127};  byte bBytes[]={-127,100,56,7,98,-1,39,-128,127};  int aSign=-1;  int bSign=1;  byte rBytes[]={-1};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.divide(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public Mat dstColumns(boolean scale){  DenseDoubleMatrix2D dm=new DenseDoubleMatrix2D(getArray());  dm.dstColumns(scale);  return new Mat(dm.toArray());}  }
