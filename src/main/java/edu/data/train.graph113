class C{  public static String childElementValue(Element element,String childElementName,String defaultValue){  if (element == null)   return defaultValue;  Element childElement=firstChildElement(element,childElementName);  String elementValue=elementValue(childElement);  if (UtilValidate.isEmpty(elementValue))   return defaultValue; else   return elementValue;}  }
class C{  private static void saveNativeGraph(final JFrame parent,final IGraphPanel panel){  final ZyGraph graph=panel.getModel().getGraph();  final CSaveProgress progress=CGraphSaver.saveAs(parent,graph,panel.getModel().getViewContainer());  while (!progress.isDone()) {    try {      Thread.sleep(100);    } catch (    final InterruptedException e) {      java.lang.Thread.currentThread().interrupt();    }  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public SolarisNumericGroupPrincipal(String name,boolean primaryGroup){  if (name == null)   throw new NullPointerException(rb.getString("provided.null.name"));  this.name=name;  this.primaryGroup=primaryGroup;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.GENERIC_DECLARATION__TYPE_VARS:    return getTypeVars();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static SQLException toSQLException(Exception e){  if (e instanceof SQLException) {    return (SQLException)e;  }  return convert(e).getSQLException();}  }
class C{  public static Schedule parseSchedule(String csvLine,boolean firstLoad){  String[] atts=csvLine.split(",");  if (atts.length <= 6) {    return null;  }  Schedule schedule=new Schedule();  schedule.taskName=atts[0].trim().replaceAll(" ","_");  schedule.perforcePath=atts[1].trim();  schedule.rScript=atts[2].trim();  schedule.time=atts[4].trim();  schedule.owner=atts[5].trim();  if (atts.length > 6) {    schedule.emailOnSuccess="true".equalsIgnoreCase(atts[6].trim());  }  if (atts.length > 7) {    schedule.parameters=atts[7].trim();  }  if (atts.length > 8) {    schedule.shinyApp="true".equalsIgnoreCase(atts[8].trim());  }  try {    schedule.frequency=Frequency.valueOf(atts[3].trim());  } catch (  Exception e) {    return null;  }  if (schedule.setNextRunTime(firstLoad)) {    return schedule;  } else {    return null;  }}  }
class C{  @Override public int hashCode(){  int hash=compositeModel.hashCode() * 23;  return hash + state.hashCode() * 5;}  }
class C{  public ConnectionRecordSearchTerm(String term){  if (term == null)   throw new NullPointerException("Search terms may not be null");  this.term=term;  Matcher matcher=DATE_PATTERN.matcher(term);  if (matcher.matches()) {    String year=matcher.group(YEAR_GROUP);    String month=matcher.group(MONTH_GROUP);    String day=matcher.group(DAY_GROUP);    Calendar startCalendar=Calendar.getInstance();    startCalendar.clear();    startCalendar.set(Integer.parseInt(year),parseInt(month,1) - 1,parseInt(day,1));    Calendar endCalendar;    if (month == null) {      endCalendar=getEndOfYear(startCalendar);    } else     if (day == null) {      endCalendar=getEndOfMonth(startCalendar);    } else {      endCalendar=getEndOfDay(startCalendar);    }    this.startDate=startCalendar.getTime();    this.endDate=endCalendar.getTime();  } else {    this.startDate=null;    this.endDate=null;  }}  }
class C{  public AbstractJBossRuntimeConfigurationCapability(){  this.propertySupportMap.put(RemotePropertySet.URI,Boolean.FALSE);}  }
class C{  public int read(byte[] b,int off,int len) throws IOException {  if (closed) {    throw new IOException("Attempted read from closed stream.");  }  if (eof) {    return -1;  }  if (pos >= chunkSize) {    nextChunk();    if (eof) {      return -1;    }  }  len=Math.min(len,chunkSize - pos);  int count=in.read(b,off,len);  pos+=count;  return count;}  }
class C{  @Override public int hashCode(){  int hash;  if (normalized.length() > 0) {    hash=normalized.hashCode();  } else {    hash=original.hashCode();  }  if (matcher != null) {    hash^=matcher.hashCode();  }  return hash;}  }
class C{  static public double i0(double x) throws ArithmeticException {  double y;  if (x < 0)   x=-x;  if (x <= 8.0) {    y=(x / 2.0) - 2.0;    return (Math.exp(x) * Arithmetic.chbevl(y,A_i0,30));  }  return (Math.exp(x) * Arithmetic.chbevl(32.0 / x - 2.0,B_i0,25) / Math.sqrt(x));}  }
class C{  public boolean next(){  if (!hasNext) {    return false;  }  for (int i=0; i < m; i++) {    out[i]=in[index[i]];  }  moveIndex();  return true;}  }
class C{  private static long longLCM(long a,long b){  return a * (b / longGCD(a,b));}  }
class C{  public static int StringEndsWith(String value,String suffix){  int len=Math.min(suffix.length(),value.length());  String val1=value.substring(value.length() - len);  ConstantPoolManager.getInstance().addDynamicConstant(value + suffix);  return StringEquals(val1,suffix);}  }
class C{  private static List<String> linesToWrite(String path,Global global,List<Attribute> attributes,Class<?> aClass) throws NoSuchFieldException, IOException {  String[] classIdentifier=new String[]{"class","{",aClass.getSimpleName()};  boolean classFound=false;  verifyAttributes(aClass,attributes);  HashMap<String,String> attributeTypes=getTypes(aClass,attributes);  List<String> linesToWrite=new ArrayList<String>();  List<String> lines=readFile(new File(path));  if (!isEmpty(attributes)) {    lines=addImport(lines,aClass,JMap.class);    lines=addTargetClassesImport(lines,attributes,aClass);  }  if (!isNull(global))   lines=addImport(lines,aClass,JGlobalMap.class);  if (containtsAccessors(global,attributes)) {    lines=addImport(lines,aClass,JMapAccessor.class);    lines=addImport(lines,aClass,JMapAccessors.class);  }  for (  String line : lines) {    if (containsAll(line,classIdentifier)) {      if (global != null)       linesToWrite.add(toAnnotation(global));      classFound=true;    }    if (classFound && !isEmpty(attributes)) {      Attribute remove=null;      for (      Attribute attribute : attributes) {        String name=attribute.getName();        String type=attributeTypes.get(name);        if (containsAll(line,name,type) && !line.contains("{")) {          linesToWrite.add(toAnnotation(attribute));          remove=attribute;        }      }      if (remove != null)       attributes.remove(remove);    }    linesToWrite.add(line);  }  return linesToWrite;}  }
class C{  public static boolean areNonNullAndEqual(Object obj1,Object obj2){  if ((obj1 == null) || (obj2 == null))   return false;  return obj1.equals(obj2);}  }
class C{  public CUnhideParentsAction(final JFrame parent,final ZyGraph graph,final ZyProximityNode<INaviViewNode> node){  super("Unhide All Parents");  Preconditions.checkNotNull(parent,"IE00956: Parent argument can not be null");  Preconditions.checkNotNull(graph,"IE00957: Graph argument can't be null");  Preconditions.checkNotNull(node,"IE00958: Node argument can't be null");  m_parent=parent;  m_graph=graph;  m_node=node;}  }
class C{  BKDistributedLogManager(String name,DistributedLogConfiguration conf,URI uri,ZooKeeperClientBuilder writerZKCBuilder,ZooKeeperClientBuilder readerZKCBuilder,ZooKeeperClient zkcForWriterBKC,ZooKeeperClient zkcForReaderBKC,BookKeeperClientBuilder writerBKCBuilder,BookKeeperClientBuilder readerBKCBuilder,FeatureProvider featureProvider,PermitLimiter writeLimiter,StatsLogger statsLogger) throws IOException {  this(name,conf,ConfUtils.getConstDynConf(conf),uri,writerZKCBuilder,readerZKCBuilder,zkcForWriterBKC,zkcForReaderBKC,writerBKCBuilder,readerBKCBuilder,null,null,null,OrderedScheduler.newBuilder().name("BKDL-" + name).corePoolSize(1).build(),null,null,null,null,new ReadAheadExceptionsLogger(statsLogger),DistributedLogConstants.UNKNOWN_CLIENT_ID,DistributedLogConstants.LOCAL_REGION_ID,null,writeLimiter,PermitManager.UNLIMITED_PERMIT_MANAGER,featureProvider,statsLogger,NullStatsLogger.INSTANCE);  this.ownExecutor=true;}  }
class C{  protected void saveSelectionDetail(){  Integer ID=getSelectedRowKey();  Env.setContext(Env.getCtx(),p_WindowNo,Env.TAB_INFO,"M_Product_ID",ID == null ? "0" : ID.toString());  if (fPriceList_ID.getValue() != null) {    String pickPL=((Integer)fPriceList_ID.getValue()).toString();    Env.setContext(Env.getCtx(),p_WindowNo,Env.TAB_INFO,"M_PriceList_Version_ID",pickPL);  }  if (fWarehouse_ID.getValue() != null) {    String pickWH=((Integer)fWarehouse_ID.getValue()).toString();    Env.setContext(Env.getCtx(),p_WindowNo,Env.TAB_INFO,"M_Warehouse_ID",pickWH);  }  if (m_M_AttributeSetInstance_ID == -1) {    Env.setContext(Env.getCtx(),p_WindowNo,Env.TAB_INFO,"M_AttributeSetInstance_ID","0");    Env.setContext(Env.getCtx(),p_WindowNo,Env.TAB_INFO,"M_Locator_ID","0");  } else {    Env.setContext(Env.getCtx(),p_WindowNo,Env.TAB_INFO,"M_AttributeSetInstance_ID",String.valueOf(m_M_AttributeSetInstance_ID));    Env.setContext(Env.getCtx(),p_WindowNo,Env.TAB_INFO,"M_Locator_ID",String.valueOf(m_M_Locator_ID));  }}  }
class C{  @Reference(authors="Erich Schubert, Arthur Zimek and Hans-Peter Kriegel",title="Geodetic Distance Queries on R-Trees for Indexing Geographic Data",booktitle="13th Int. Symposium on Advances in Spatial and Temporal Databases",url="http://dx.doi.org/10.1007/978-3-642-40235-7_9") public static double latlngMinDistRadFull(double plat,double plng,double rminlat,double rminlng,double rmaxlat,double rmaxlng){  if ((rminlat >= rmaxlat) && (rminlng >= rmaxlng)) {    return haversineFormulaRad(rminlat,rminlng,plat,plng);  }  if (rminlng <= plng && plng <= rmaxlng) {    if (rminlat <= plat && plat <= rmaxlat) {      return 0;    }    if (plat < rminlat) {      return rminlat - plat;    } else {      return plat - rmaxlat;    }  }  double lngE=rminlng - plng;  if (lngE < 0) {    lngE+=MathUtil.TWOPI;  }  double lngW=rmaxlng - plng;  if (lngW > 0) {    lngW-=MathUtil.TWOPI;  }  final double slatQ=Math.sin(plat), clatQ=MathUtil.sinToCos(plat,slatQ);  final double slatN=Math.sin(rmaxlat), clatN=MathUtil.sinToCos(rmaxlat,slatN);  final double slatS=Math.sin(rminlat), clatS=MathUtil.sinToCos(rminlat,slatS);  if (lngE <= -lngW) {    final double slngD=Math.sin(lngE);    final double clngD=MathUtil.sinToCos(lngE,slngD);    final double bs=Math.atan2(slngD * clatQ,clatS * slatQ - slatS * clatQ * clngD);    final double bn=Math.atan2(slngD * clatQ,clatN * slatQ - slatN * clatQ * clngD);    if (bs < MathUtil.HALFPI && bn > MathUtil.HALFPI) {      final double radFromS=-MathUtil.HALFPI - plat;      return Math.asin(Math.sin(radFromS) * -slngD);    }    if (bs - MathUtil.HALFPI < MathUtil.HALFPI - bn) {      final double slatN2=Math.sin((plat - rmaxlat) * .5);      final double slon=Math.sin(lngE * .5);      final double aN=slatN2 * slatN2 + slon * slon * clatQ* clatN;      final double distN=2 * Math.atan2(Math.sqrt(aN),Math.sqrt(1 - aN));      return distN;    } else {      final double slatS2=Math.sin((plat - rminlat) * .5);      final double slon=Math.sin(lngE * .5);      final double aS=slatS2 * slatS2 + slon * slon * clatQ* clatS;      final double distS=2 * Math.atan2(Math.sqrt(aS),Math.sqrt(1 - aS));      return distS;    }  } else {    final double slngD=Math.sin(lngW);    final double clngD=MathUtil.sinToCos(lngW,slngD);    final double bs=Math.atan2(slngD * clatQ,clatS * slatQ - slatS * clatQ * clngD);    final double bn=Math.atan2(slngD * clatQ,clatN * slatQ - slatN * clatQ * clngD);    if (bs > -MathUtil.HALFPI && bn < -MathUtil.HALFPI) {      final double radFromS=-MathUtil.HALFPI - plat;      return Math.asin(Math.sin(radFromS) * slngD);    }    if (-MathUtil.HALFPI - bs < bn + MathUtil.HALFPI) {      final double slatN2=Math.sin((plat - rmaxlat) * .5);      final double slon=Math.sin(lngW * .5);      final double aN=slatN2 * slatN2 + slon * slon * clatQ* clatN;      final double distN=2 * Math.atan2(Math.sqrt(aN),Math.sqrt(1 - aN));      return distN;    } else {      final double slatS2=Math.sin((plat - rminlat) * .5);      final double slon=Math.sin(lngW * .5);      final double aS=slatS2 * slatS2 + slon * slon * clatQ* clatS;      final double distS=2 * Math.atan2(Math.sqrt(aS),Math.sqrt(1 - aS));      return distS;    }  }}  }
class C{  public static IClassFileReader createDefaultClassFileReader(String fileName,int decodingFlag){  try {    return new ClassFileReader(Util.getFileByteContent(new File(fileName)),decodingFlag);  } catch (  ClassFormatException e) {    return null;  }catch (  IOException e) {    return null;  }}  }
class C{  public boolean canRead(){  return _is != null;}  }
class C{  float collect(float off,long time,String axis){  long normTime;  if (off > 0) {    normTime=(long)(off * FAST_MOVE_TIME);    if (dir < 0) {      if (DEBUG_TRACKBALL)       Log.v(TAG,axis + " reversed to positive!");      position=0;      step=0;      acceleration=1;      lastMoveTime=0;    }    dir=1;  } else   if (off < 0) {    normTime=(long)((-off) * FAST_MOVE_TIME);    if (dir > 0) {      if (DEBUG_TRACKBALL)       Log.v(TAG,axis + " reversed to negative!");      position=0;      step=0;      acceleration=1;      lastMoveTime=0;    }    dir=-1;  } else {    normTime=0;  }  if (normTime > 0) {    long delta=time - lastMoveTime;    lastMoveTime=time;    float acc=acceleration;    if (delta < normTime) {      float scale=(normTime - delta) * ACCEL_MOVE_SCALING_FACTOR;      if (scale > 1)       acc*=scale;      if (DEBUG_TRACKBALL)       Log.v(TAG,axis + " accelerate: off=" + off+ " normTime="+ normTime+ " delta="+ delta+ " scale="+ scale+ " acc="+ acc);      acceleration=acc < MAX_ACCELERATION ? acc : MAX_ACCELERATION;    } else {      float scale=(delta - normTime) * ACCEL_MOVE_SCALING_FACTOR;      if (scale > 1)       acc/=scale;      if (DEBUG_TRACKBALL)       Log.v(TAG,axis + " deccelerate: off=" + off+ " normTime="+ normTime+ " delta="+ delta+ " scale="+ scale+ " acc="+ acc);      acceleration=acc > 1 ? acc : 1;    }  }  position+=off;  return Math.abs(position);}  }
class C{  public Task<VcenterDataCenterRestRep> deactivate(URI id){  return doDeactivateWithTask(id);}  }
class C{  public static List<BatchResponse> postBatchRequestsWithEnclosingTransaction(final RequestSpecification requestSpec,final ResponseSpecification responseSpec,final String jsonifiedBatchRequests){  final String response=Utils.performServerPost(requestSpec,responseSpec,BATCH_API_URL_EXT,jsonifiedBatchRequests,null);  return BatchHelper.fromJsonString(response);}  }
class C{  public boolean dataDefinitionCausesTransactionCommit() throws SQLException {  return false;}  }
class C{  protected SynonymMap loadSynonyms(ResourceLoader loader,String cname,boolean dedup,Analyzer analyzer) throws IOException, ParseException {  CharsetDecoder decoder=Charset.forName("UTF-8").newDecoder().onMalformedInput(CodingErrorAction.REPORT).onUnmappableCharacter(CodingErrorAction.REPORT);  SynonymMap.Parser parser;  Class<? extends SynonymMap.Parser> clazz=loader.findClass(cname,SynonymMap.Parser.class);  try {    parser=clazz.getConstructor(boolean.class,boolean.class,Analyzer.class).newInstance(dedup,expand,analyzer);  } catch (  Exception e) {    throw new RuntimeException(e);  }  File synonymFile=new File(synonyms);  if (synonymFile.exists()) {    decoder.reset();    parser.parse(new InputStreamReader(loader.openResource(synonyms),decoder));  } else {    List<String> files=splitFileNames(synonyms);    for (    String file : files) {      decoder.reset();      parser.parse(new InputStreamReader(loader.openResource(file),decoder));    }  }  return parser.build();}  }
class C{  static public void useJaxenXPathSupport() throws Exception {  Class.forName("org.jaxen.dom.DOMXPath");  Class c=Class.forName("freemarker.ext.dom.JaxenXPathSupport");  jaxenXPathSupport=(XPathSupport)c.newInstance();synchronized (STATIC_LOCK) {    xpathSupportClass=c;  }  if (LOG.isDebugEnabled()) {    LOG.debug("Using Jaxen classes for XPath support");  }}  }
class C{  public XYIntervalSeries(Comparable key,boolean autoSort,boolean allowDuplicateXValues){  super(key,autoSort,allowDuplicateXValues);}  }
class C{  public static byte[] toIPv4AddressBytes(String ipAddress){  String[] octets=ipAddress.split("\\.");  if (octets.length != 4)   throw new IllegalArgumentException("Specified IPv4 address must" + "contain 4 sets of numerical digits separated by periods");  byte[] result=new byte[4];  for (int i=0; i < 4; ++i) {    result[i]=Integer.valueOf(octets[i]).byteValue();  }  return result;}  }
class C{  public static void main(String[] args) throws Exception {  System.out.println("SensorsAggregates: Output will be randomly intermittent, be patient!");  DirectProvider tp=new DevelopmentProvider();  Topology topology=tp.newTopology("SensorsReadingAggregates");  TStream<JsonObject> sensors=sensorsAB(topology);  sensors.print();  tp.submit(topology);}  }
class C{  @Override public int compareTo(StepExecution that){  if (this == that) {    return 0;  }  final long thisTime=this.getCreatedTime().getTime();  final long thatTime=that.getCreatedTime().getTime();  if (thisTime < thatTime) {    return -1;  }  if (thatTime < thisTime) {    return 1;  }  if (this.getId() != null && that.getId() == null) {    return -1;  }  if (that.getId() != null && this.getId() == null) {    return 1;  }  if (this.getId() != null && that.getId() != null) {    if (this.getId() < that.getId()) {      return -1;    }    if (that.getId() < this.getId()) {      return 1;    }  }  if (this.hashCode() < that.hashCode()) {    return -1;  }  if (that.hashCode() < this.hashCode()) {    return 1;  }  return 0;}  }
class C{  public void increaseMagicSkillXp(final Nature nature,int amount){  int oldValue=getMagicSkillXp(nature);  int newValue=oldValue + amount;  final int newLevel=Level.getLevel(newValue);  int oldLevel=Level.getLevel(oldValue);  final int levels=newLevel - (oldLevel - 10);  for (int i=0; i < Math.abs(levels); i++) {    Integer oneup=getMagicSkill(nature) + (int)Math.signum(levels) * 1;    setSkill(nature.toString(),oneup.toString());    new GameEvent(getName(),"nature-" + nature.toString(),oneup.toString()).raise();  }  setSkill(nature.toString() + "_xp",Integer.valueOf(newValue).toString());}  }
class C{  public final static int packBytesAfter1(int unicodeScalar,int utf8Len){  int packed_chars;switch (utf8Len) {default :    throw new IllegalArgumentException("pack requires len > 1");case 2:  packed_chars=getByte2Of2(unicodeScalar);break;case 3:packed_chars=getByte2Of3(unicodeScalar);packed_chars|=getByte3Of3(unicodeScalar) << 8;break;case 4:packed_chars=getByte2Of4(unicodeScalar);packed_chars|=getByte3Of4(unicodeScalar) << 8;packed_chars|=getByte4Of4(unicodeScalar) << 16;break;}return packed_chars;}  }
class C{  public ClipDescription(CharSequence label,String[] mimeTypes){  if (mimeTypes == null) {    throw new NullPointerException("mimeTypes is null");  }  mLabel=label;  mMimeTypes=mimeTypes;}  }
class C{  private static void accumulate(Vector ranges,int lb,int ub){  if (lb <= ub) {    ranges.add(new int[]{lb,ub});    for (int j=ranges.size() - 2; j >= 0; --j) {      int[] rangea=(int[])ranges.elementAt(j);      int lba=rangea[0];      int uba=rangea[1];      int[] rangeb=(int[])ranges.elementAt(j + 1);      int lbb=rangeb[0];      int ubb=rangeb[1];      if (Math.max(lba,lbb) - Math.min(uba,ubb) <= 1) {        ranges.setElementAt(new int[]{Math.min(lba,lbb),Math.max(uba,ubb)},j);        ranges.remove(j + 1);      } else       if (lba > lbb) {        ranges.setElementAt(rangeb,j);        ranges.setElementAt(rangea,j + 1);      } else {        break;      }    }  }}  }
class C{  private void drawBorder(Canvas canvas){  if (borderWidth > 0) {    Paint paint=new Paint();    paint.setStrokeWidth(borderWidth);    paint.setStyle(Paint.Style.STROKE);    paint.setColor(borderColor);    paint.setAntiAlias(true);    if (shapeType == 1) {      canvas.drawCircle(width / 2,height / 2,(width - borderWidth) / 2,paint);    } else     if (shapeType == 2) {      RectF rectf=new RectF(borderWidth / 2,borderWidth / 2,getWidth() - borderWidth / 2,getHeight() - borderWidth / 2);      canvas.drawRoundRect(rectf,radius,radius,paint);    }  }}  }
class C{  public void parseAssumptionsBlock(List<CharSet> charSets) throws ImportException, IOException {  boolean done=false;  while (!done) {    String command=readToken(";");    if (command.equalsIgnoreCase("ENDBLOCK") || command.equalsIgnoreCase("END")) {      done=true;    } else     if (match("CHARSET",command,5)) {      if (getLastDelimiter() != ';') {        charSets.add(readCharSetCommand());      }    } else {      System.err.println("The command, '" + command + "', is not used by BEAST and has been ignored");    }  }}  }
class C{  @SuppressWarnings("unchecked") final E itemAt(int i){  return (E)items[i];}  }
class C{  protected void addEntry(HashEntry entry,int hashIndex){  data[hashIndex]=entry;}  }
class C{  public Organization(){}  }
class C{  public ClusterJoinRequestMessage(ClusterJoinRequestMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetNode()) {    this.node=new Node(other.node);  }}  }
class C{  private static void expandFmov(Instruction s,PhysicalRegisterSet phys){  Operand result=MIR_Move.getClearResult(s);  Operand value=MIR_Move.getClearValue(s);  if (result.isRegister() && value.isRegister()) {    if (result.similar(value)) {      s.remove();    } else {      int i=PhysicalRegisterSet.getFPRIndex(result.asRegister().getRegister());      int j=PhysicalRegisterSet.getFPRIndex(value.asRegister().getRegister());      if (j == 0) {        MIR_Move.mutate(s,IA32_FST,D(phys.getFPR(i)),D(phys.getFPR(0)));      } else {        s.insertBefore(MIR_Move.create(IA32_FLD,D(phys.getFPR(0)),value));        MIR_Move.mutate(s,IA32_FSTP,D(phys.getFPR(i + 1)),D(phys.getFPR(0)));      }    }  } else   if (value instanceof MemoryOperand) {    if (result instanceof MemoryOperand) {      s.insertBefore(MIR_Move.create(IA32_FLD,D(phys.getFPR(0)),value));      MIR_Move.mutate(s,IA32_FSTP,result,D(phys.getFPR(0)));    } else {      if (VM.VerifyAssertions)       VM._assert(result.isRegister());      int i=PhysicalRegisterSet.getFPRIndex(result.asRegister().getRegister());      s.insertBefore(MIR_Move.create(IA32_FLD,D(phys.getFPR(0)),value));      MIR_Move.mutate(s,IA32_FSTP,D(phys.getFPR(i + 1)),D(phys.getFPR(0)));    }  } else {    if (VM.VerifyAssertions)     VM._assert(value.isRegister());    if (VM.VerifyAssertions) {      VM._assert(result instanceof MemoryOperand);    }    int i=PhysicalRegisterSet.getFPRIndex(value.asRegister().getRegister());    if (i != 0) {      s.insertBefore(MIR_Move.create(IA32_FLD,D(phys.getFPR(0)),value));      MIR_Move.mutate(s,IA32_FSTP,result,D(phys.getFPR(0)));    } else {      MIR_Move.mutate(s,IA32_FST,result,value);    }  }}  }
class C{  protected double estimatePerformance(BitSet feature_set,int num_atts) throws Exception {  m_evaluation=new Evaluation(m_theInstances);  int i;  int[] fs=new int[num_atts];  double[] instA=new double[num_atts];  int classI=m_theInstances.classIndex();  int index=0;  for (i=0; i < m_numAttributes; i++) {    if (feature_set.get(i)) {      fs[index++]=i;    }  }  m_entries=new Hashtable<DecisionTableHashKey,double[]>((int)(m_theInstances.numInstances() * 1.5));  for (i=0; i < m_numInstances; i++) {    Instance inst=m_theInstances.instance(i);    for (int j=0; j < fs.length; j++) {      if (fs[j] == classI) {        instA[j]=Double.MAX_VALUE;      } else       if (inst.isMissing(fs[j])) {        instA[j]=Double.MAX_VALUE;      } else {        instA[j]=inst.value(fs[j]);      }    }    insertIntoTable(inst,instA);  }  if (m_CVFolds == 1) {    for (i=0; i < m_numInstances; i++) {      Instance inst=m_theInstances.instance(i);      for (int j=0; j < fs.length; j++) {        if (fs[j] == classI) {          instA[j]=Double.MAX_VALUE;        } else         if (inst.isMissing(fs[j])) {          instA[j]=Double.MAX_VALUE;        } else {          instA[j]=inst.value(fs[j]);        }      }      evaluateInstanceLeaveOneOut(inst,instA);    }  } else {    m_theInstances.randomize(m_rr);    m_theInstances.stratify(m_CVFolds);    for (i=0; i < m_CVFolds; i++) {      Instances insts=m_theInstances.testCV(m_CVFolds,i);      evaluateFoldCV(insts,fs);    }  }switch (m_evaluationMeasure) {case EVAL_DEFAULT:    if (m_classIsNominal) {      return m_evaluation.pctCorrect();    }  return -m_evaluation.rootMeanSquaredError();case EVAL_ACCURACY:return m_evaluation.pctCorrect();case EVAL_RMSE:return -m_evaluation.rootMeanSquaredError();case EVAL_MAE:return -m_evaluation.meanAbsoluteError();case EVAL_AUC:double[] classPriors=m_evaluation.getClassPriors();Utils.normalize(classPriors);double weightedAUC=0;for (i=0; i < m_theInstances.classAttribute().numValues(); i++) {double tempAUC=m_evaluation.areaUnderROC(i);if (!Utils.isMissingValue(tempAUC)) {weightedAUC+=(classPriors[i] * tempAUC);} else {System.err.println("Undefined AUC!!");}}return weightedAUC;}return 0.0;}  }
class C{  public void emitop1w(int op,int od){  if (od > 0xFF) {    emitop(wide);    emitop(op);    emit2(od);  } else {    emitop(op);    emit1(od);  }  if (!alive)   return;switch (op) {case iload:    state.push(syms.intType);  break;case lload:state.push(syms.longType);break;case fload:state.push(syms.floatType);break;case dload:state.push(syms.doubleType);break;case aload:state.push(lvar[od].sym.type);break;case lstore:case dstore:state.pop(2);break;case istore:case fstore:case astore:state.pop(1);break;case ret:markDead();break;default :throw new AssertionError(mnem(op));}postop();}  }
class C{  @Override protected boolean beforeStart(Pcap pcap){  super.beforeStart(pcap);  int option=JOptionPane.showConfirmDialog(GrassMarlin.window,"Create a dumpfile?");  if (option == JOptionPane.OK_OPTION) {    try {      String filename=System.currentTimeMillis() + "_dump.pcap";      File f=new File(Environment.DIR_LIVE_CAPTURE.getPath() + File.separator + filename);      JFileChooser fc=new JFileChooser();      fc.setSelectedFile(f);      int i=fc.showSaveDialog(GrassMarlin.window.getContentPane());      if (i == JFileChooser.APPROVE_OPTION) {        dumper=pcap.dumpOpen(fc.getSelectedFile().getCanonicalPath());      }    } catch (    Exception ex) {      Logger.getLogger(LivePCAPImport.class.getName()).log(Level.SEVERE,"Failed to set dumpfile.",ex);    }  } else   if (option == JOptionPane.CANCEL_OPTION) {    return false;  }  isUsingDumpFile=dumper != null;  return true;}  }
class C{  public Collection asignarFondo(Collection detallesprestamos){  GestionFondosBI fondosService=getGestionFondosBI();  ArrayList detallesprestamosFinal=new ArrayList();  if (detallesprestamos != null) {    Iterator it=detallesprestamos.iterator();    while (it.hasNext()) {      BusquedaDetalleVO bdp=(BusquedaDetalleVO)it.next();      FondoVO fondoauxiliar=fondosService.getFondoXId(bdp.getIdfondo());      bdp.setFondo(fondoauxiliar.getTitulo());      detallesprestamosFinal.add(bdp);    }  }  return detallesprestamosFinal;}  }
class C{  public void ordering(String ord){  ordering=ord;}  }
class C{  public ByteBufferRange buildMatchRange(String prefix,int pageSize){  String target=prefix.toLowerCase();  return CompositeColumnNameSerializer.get().buildRange().withPrefix(_parentType.getDataObjectClass().getSimpleName()).greaterThanEquals(target).lessThanEquals(target).limit(pageSize).build();}  }
class C{  public void append(final CharBuffer cb){  if (cb == null) {    return;  }  provideCapacity(length + cb.length);  System.arraycopy(cb.c,0,c,length,cb.length);  length+=cb.length;}  }
class C{  public static void renameVPlexVolume(Volume vplexVolume,String newVolumeName,VPlexApiClient client,DbClient dbClient) throws Exception {  try {    if (vplexVolume == null) {      s_logger.warn("The passed volume is null.");      return;    }    if (!VPlexUtil.isVplexVolume(vplexVolume,dbClient)) {      s_logger.warn("Volume {} can not be renamed because it is not a VPLEX volume.",vplexVolume.getId());      return;    }    VPlexVirtualVolumeInfo vvInfo=client.findVirtualVolume(vplexVolume.getDeviceLabel(),vplexVolume.getNativeId());    vvInfo=renameVolumeOnVPlex(vvInfo,newVolumeName,client);    vplexVolume.setNativeId(vvInfo.getPath());    vplexVolume.setNativeGuid(vvInfo.getPath());    vplexVolume.setLabel(vvInfo.getName());    vplexVolume.setDeviceLabel(vvInfo.getName());    dbClient.updateObject(vplexVolume);  } catch (  Exception e) {    s_logger.warn(String.format("Error attempting to rename VPLEX volume %s",vplexVolume.getDeviceLabel()),e);    throw e;  }}  }
class C{  public CDebugPerspectiveModel(final IGraphModel model){  m_model=Preconditions.checkNotNull(model,"IE01804: Graph model argument can not be null");}  }
class C{  public int[] matchRowIndices(String what,String columnName){  return matchRowIndices(what,getColumnIndex(columnName));}  }
class C{  public RandomEvictionPolicy(int max){  A.ensure(max > 0,"max > 0");  this.max=max;}  }
class C{  @Override public boolean put(int key,int firstValue,int secondValue){  if (size == readerAccessibleInfo.maxNumKeysToStore) {    resize();  }  return put(key,firstValue,secondValue,readerAccessibleInfo,true);}  }
class C{  public void build(BinarySchema.Builder builder,int fieldCnt){  for (int curIdx=idx - fieldCnt * 2; curIdx < idx; curIdx+=2)   builder.addField(data[curIdx]);}  }
class C{  public static void removeFromPlaylist(final Context context,final long id,final long playlistId){  removeFromPlaylist(context,id,playlistId,false);}  }
class C{  public BinaryOut(String filename){  try {    OutputStream os=new FileOutputStream(filename);    out=new BufferedOutputStream(os);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public void run(){  List<ClockableEntry> entriesToDisable=new ArrayList<>();  int stepNumber=0;  ClockExecutionStep step;  while (running) {    if (rescheduleRequested) {      prepareSchedule();    }    for (stepNumber=0; stepNumber < steps.size(); stepNumber++) {      step=steps.get(stepNumber);      for (      ClockableEntry currentEntry : step.entriesToRunAtThisStep) {        if (currentEntry.enabled && !currentEntry.isFrequencyZero) {          try {            Object result=currentEntry.clockable.onClockTick();            if (result != null) {              entriesToDisable.add(currentEntry);              if (currentEntry.clockableCallbackHandlerChip >= 0) {                clockableCallbackHandlers[currentEntry.clockableCallbackHandlerChip].onNormalExit(result);              }            }          } catch (          Exception e) {            entriesToDisable.add(currentEntry);            if (currentEntry.clockableCallbackHandlerChip >= 0) {              clockableCallbackHandlers[currentEntry.clockableCallbackHandlerChip].onException(e);            }          }        }      }      if (!entriesToDisable.isEmpty()) {        for (        ClockableEntry entryToDisable : entriesToDisable) {          disableEntry(entryToDisable);        }        entriesToDisable.clear();        if (allEntriesDisabled()) {          running=false;          break;        }      }      totalElapsedTimePs+=step.stepDurationPs;      if (rescheduleRequested) {        break;      }    }  }  Collections.rotate(steps,-1 - stepNumber);}  }
class C{  public Map<String,Long> releaseLocks(boolean force) throws Exception {  Map<String,Long> locksToDelete=readLockColumns();  MutationBatch m=keyspace.prepareMutationBatch().setConsistencyLevel(consistencyLevel);  ColumnListMutation<String> row=m.withRow(columnFamily,key);  long now=getCurrentTimeMicros();  for (  Entry<String,Long> c : locksToDelete.entrySet()) {    if (force || (c.getValue() > 0 && c.getValue() < now)) {      row.deleteColumn(c.getKey());    }  }  m.execute();  return locksToDelete;}  }
class C{  public BlockVirtualPoolRestRep create(BlockVirtualPoolParam input){  return client.post(BlockVirtualPoolRestRep.class,input,baseUrl);}  }
class C{  public final boolean[] signature(final SparseDoubleVector vector){  boolean[] sig=new boolean[this.hyperplanes.length];  for (int i=0; i < this.hyperplanes.length; i++) {    sig[i]=(vector.dotProduct(this.hyperplanes[i]) >= 0);  }  return sig;}  }
class C{  String userSearch(Properties ldapProps,String baseDN,String filter) throws NamingException {  String foundDN=null;  NamingEnumeration<SearchResult> namingEnum=null;  final DirContext ctx=new InitialDirContext(ldapProps);  SearchControls ctls=new SearchControls();  ctls.setReturningAttributes(new String[]{DN});  ctls.setSearchScope(SearchControls.SUBTREE_SCOPE);  ctls.setCountLimit(1);  try {    namingEnum=ctx.search(baseDN,filter,ctls);    if (namingEnum.hasMore()) {      SearchResult res=namingEnum.next();      StringBuffer sb=new StringBuffer();      String name=retrieveName(ldapProps,res);      CompositeName compDN=new CompositeName(name);      if (!compDN.isEmpty()) {        String ldapDN=compDN.get(0);        sb.append(ldapDN);        if (res.isRelative()) {          sb.append(",");          sb.append(baseDN);        }        foundDN=sb.toString();      }    }  }  finally {    if (namingEnum != null) {      try {        namingEnum.close();      } catch (      Exception ex) {        logger.finest("Exception closing search result: " + ex.toString());      }    }    try {      ctx.close();    } catch (    Exception ex) {      logger.finest("Exception closing directory: " + ex.toString());    }  }  return foundDN;}  }
class C{  public int available(){  return 0;}  }
class C{  @Override public Properties trackVideoOrientation(String videoId,Double currentTime,boolean isLandscape,String courseId,String unitUrl){  SegmentAnalyticsEvent aEvent=getCommonPropertiesWithCurrentTime(currentTime,videoId,Values.FULLSREEN_TOGGLED);  aEvent.data.putValue(Keys.FULLSCREEN,isLandscape);  aEvent.setCourseContext(courseId,unitUrl,Values.VIDEOPLAYER);  tracker.track(Events.SCREEN_TOGGLED,aEvent.properties);  return aEvent.properties;}  }
class C{  @Override public void onBackup(ParcelFileDescriptor oldState,BackupDataOutput data,ParcelFileDescriptor newState) throws IOException {  long savedFileSize=-1;  long savedCrc=-1;  int savedVersion=-1;  DataInputStream in=new DataInputStream(new FileInputStream(oldState.getFileDescriptor()));  try {    savedFileSize=in.readLong();    savedCrc=in.readLong();    savedVersion=in.readInt();  } catch (  EOFException e) {    return;  } finally {    if (in != null) {      in.close();    }  }  writeBackupState(savedFileSize,savedCrc,newState);}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  int previewFormat=configManager.getPreviewFormat();  String previewFormatString=configManager.getPreviewFormatString();switch (previewFormat) {case PixelFormat.YCbCr_420_SP:case PixelFormat.YCbCr_422_SP:    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());default :  if ("yuv420p".equals(previewFormatString)) {    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());  }}throw new IllegalArgumentException("Unsupported picture format: " + previewFormat + '/'+ previewFormatString);}  }
class C{  public static Image reflectionImage(Image source,float mirrorRatio,int alphaRatio,int spacing){  int w=source.getWidth();  int h=source.getHeight();  int mirrorHeight=((int)(h * mirrorRatio)) * w;  RGBImage rgbImg=new RGBImage(new int[w * (h + spacing) + mirrorHeight],w,h + ((int)(h * mirrorRatio) + spacing));  source.toRGB(rgbImg,0,0,0,0,w,h);  int[] imageData=rgbImg.getRGB();  int ilen=imageData.length;  for (int iter=0; iter < mirrorHeight; iter++) {    int sourcePos=w * h - iter - 1;    int off=iter % w;    off=w - off + iter - off;    int mirrorPos=ilen - (mirrorHeight - off) + (spacing * w);    int color=imageData[sourcePos];    if ((color & 0xff000000) != 0 && mirrorPos < ilen) {      int alpha=(int)(alphaRatio * ((float)mirrorHeight - iter) / ((float)mirrorHeight));      imageData[mirrorPos]=(imageData[sourcePos] & 0xffffff) | ((alpha << 24) & 0xff000000);    }  }  return rgbImg;}  }
class C{  public void addExtension(String ext){  exts.add(ext.toLowerCase());}  }
class C{  public List<GridItem> reattachGrids(MuninFoo muninFoo,MuninMaster oldMaster){  List<GridItem> toBeUpdated_grids=new ArrayList<>();  List<Grid> grids=muninFoo.sqlite.dbHlpr.getGrids(muninFoo);  if (grids.isEmpty())   return toBeUpdated_grids;  for (  MuninNode node : oldMaster.getChildren()) {    for (    MuninPlugin plugin : node.getPlugins()) {      for (      Grid grid : grids) {        for (        GridItem item : grid.getItems()) {          if (item.getPlugin() == null)           continue;          if (item.getPlugin().equals(plugin)) {            item.setPlugin(this.getNode(node.getUrl()).getPlugin(item.getPlugin().getName()));            toBeUpdated_grids.add(item);          }        }      }    }  }  return toBeUpdated_grids;}  }
class C{  protected boolean isOneOfTableElements(Element element){  String elementName=element.getNodeName().toLowerCase();  return StringUtil.equalsOne(elementName,TABLE_ELEMENTS) != -1;}  }
class C{  void addFillComponents(Container panel,int[] cols,int[] rows){  Dimension filler=new Dimension(10,10);  boolean filled_cell_11=false;  CellConstraints cc=new CellConstraints();  if (cols.length > 0 && rows.length > 0) {    if (cols[0] == 1 && rows[0] == 1) {      panel.add(Box.createRigidArea(filler),cc.xy(1,1));      filled_cell_11=true;    }  }  for (int index=0; index < cols.length; index++) {    if (cols[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));  }  for (int index=0; index < rows.length; index++) {    if (rows[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));  }}  }
class C{  public void removePlayerContainerDisplay(PlayingPlayerContainer container){  displays.remove(container);}  }
class C{  private void populateDbMetricsAz(final IsilonAccessZone accessZone,IsilonApi isilonApi,StringMap dbMetrics){  long totalProvCap=0L;  long totalFsCount=0L;  String resumeToken=null;  String zoneName=accessZone.getName();  String baseDirPath=accessZone.getPath() + "/";  IsilonList<IsilonSmartQuota> quotas=null;  do {    quotas=isilonApi.listQuotas(resumeToken,baseDirPath);    if (quotas != null && !quotas.getList().isEmpty()) {      for (      IsilonSmartQuota quota : quotas.getList()) {        totalProvCap=totalProvCap + quota.getUsagePhysical();        totalFsCount++;      }    }    resumeToken=quotas.getToken();  } while (resumeToken != null);  List<String> baseDirPaths=null;  if (accessZone.isSystem() == true) {    List<IsilonAccessZone> isilonAccessZoneList=isilonApi.getAccessZones(resumeToken);    baseDirPaths=new ArrayList<String>();    for (    IsilonAccessZone isiAccessZone : isilonAccessZoneList) {      if (!baseDirPath.equals(IFS_ROOT + "/")) {        baseDirPaths.add(isiAccessZone.getPath() + "/");      }    }  }  resumeToken=null;  IsilonList<IsilonSnapshot> snapshots=null;  do {    snapshots=isilonApi.listSnapshots(resumeToken);    if (snapshots != null && !snapshots.getList().isEmpty()) {      if (!baseDirPath.equals(IFS_ROOT + "/")) {        _log.info("access zone base directory path {}",baseDirPath);        for (        IsilonSnapshot isilonSnap : snapshots.getList()) {          if (isilonSnap.getPath().startsWith(baseDirPath)) {            totalProvCap=totalProvCap + Long.valueOf(isilonSnap.getSize());            totalFsCount++;          }        }      } else {        boolean snapSystem=true;        for (        IsilonSnapshot isilonSnap : snapshots.getList()) {          snapSystem=true;          if (baseDirPaths != null && !baseDirPaths.isEmpty()) {            for (            String basePath : baseDirPaths) {              if (isilonSnap.getPath().startsWith(basePath)) {                snapSystem=false;                break;              }            }          }          if (snapSystem) {            totalProvCap=totalProvCap + Long.valueOf(isilonSnap.getSize());            totalFsCount++;            _log.info("Access zone base directory path: {}",accessZone.getPath());          }        }      }      resumeToken=snapshots.getToken();    }  } while (resumeToken != null);  if (totalProvCap > 0) {    totalProvCap=(totalProvCap / KB_IN_BYTES);  }  _log.info("Total fs Count {} for access zone : {}",String.valueOf(totalFsCount),accessZone.getName());  _log.info("Total fs Capacity {} for access zone : {}",String.valueOf(totalProvCap),accessZone.getName());  int nfsExportsCount=0;  int cifsSharesCount=0;  resumeToken=null;  IsilonList<IsilonExport> isilonNfsExports=null;  do {    isilonNfsExports=isilonApi.listExports(resumeToken,zoneName);    if (isilonNfsExports != null) {      nfsExportsCount=nfsExportsCount + isilonNfsExports.size();      resumeToken=isilonNfsExports.getToken();    }  } while (resumeToken != null);  _log.info("Total NFS exports {} for access zone : {}",String.valueOf(nfsExportsCount),accessZone.getName());  resumeToken=null;  IsilonList<IsilonSMBShare> isilonCifsExports=null;  do {    isilonCifsExports=isilonApi.listShares(resumeToken,zoneName);    if (isilonCifsExports != null) {      cifsSharesCount=cifsSharesCount + isilonCifsExports.size();      resumeToken=isilonCifsExports.getToken();    }  } while (resumeToken != null);  _log.info("Total CIFS sharess {} for access zone : {}",String.valueOf(cifsSharesCount),accessZone.getName());  if (dbMetrics == null) {    dbMetrics=new StringMap();  }  dbMetrics.put(MetricsKeys.totalNfsExports.name(),String.valueOf(nfsExportsCount));  dbMetrics.put(MetricsKeys.totalCifsShares.name(),String.valueOf(cifsSharesCount));  dbMetrics.put(MetricsKeys.storageObjects.name(),String.valueOf(totalFsCount));  dbMetrics.put(MetricsKeys.usedStorageCapacity.name(),String.valueOf(totalProvCap));  Long maxExports=MetricsKeys.getLong(MetricsKeys.maxNFSExports,dbMetrics) + MetricsKeys.getLong(MetricsKeys.maxCifsShares,dbMetrics);  Long maxStorObjs=MetricsKeys.getLong(MetricsKeys.maxStorageObjects,dbMetrics);  Long maxCapacity=MetricsKeys.getLong(MetricsKeys.maxStorageCapacity,dbMetrics);  Long totalExports=Long.valueOf(nfsExportsCount + cifsSharesCount);  String overLoaded=FALSE;  if (totalExports >= maxExports || totalProvCap >= maxCapacity || totalFsCount >= maxStorObjs) {    overLoaded=TRUE;  }  double percentageLoadExports=0.0;  if (totalExports > 0.0) {    percentageLoadExports=((double)(totalExports) / maxExports) * 100;  }  double percentageLoadStorObj=((double)(totalProvCap) / maxCapacity) * 100;  double percentageLoad=(percentageLoadExports + percentageLoadStorObj) / 2;  dbMetrics.put(MetricsKeys.percentLoad.name(),String.valueOf(percentageLoad));  dbMetrics.put(MetricsKeys.overLoaded.name(),overLoaded);  return;}  }
class C{  public ViewDescription clone(){  ViewDescription result=new ViewDescription();  result.ViewId=ViewId;  result.Timestamp=Timestamp;  result.ViewVersion=ViewVersion;  return result;}  }
class C{  public void put(double[] val,double weight){  assert (val.length == mean.length);  final double nwsum=wsum + weight;  for (int i=0; i < mean.length; i++) {    final double delta=val[i] - mean[i];    final double rval=delta * weight / nwsum;    nmea[i]=mean[i] + rval;  }  for (int i=0; i < mean.length; i++) {    for (int j=i; j < mean.length; j++) {      double delta=(val[i] - nmea[i]) * (val[j] - mean[j]) * weight;      elements[i][j]=elements[i][j] + delta;      if (i != j) {        elements[j][i]=elements[j][i] + delta;      }    }  }  wsum=nwsum;  System.arraycopy(nmea,0,mean,0,nmea.length);}  }
class C{  private void run2(){  log.info("Starting several runs using a different network change events file for each run.");  File[] fileList=new File(networkChangeEventsFileDirectory).listFiles();  int dayCounter=0;  for (  File f : fileList) {    if (f.getName().endsWith(".xml.gz") && f.getName().startsWith("networkChangeEvents_")) {      String delimiter1="_";      String delimiter2=".";      String dateString=StringUtils.explode(StringUtils.explode(f.getName(),delimiter1.charAt(0))[1],delimiter2.charAt(0))[0];      log.info("Day: " + dateString + " --> Day #"+ dayCounter);      final String networkChangeFileThisRun=f.toString();      final String outputDirectoryThisRun=outputDirectory + "nce_" + dayCounter+ "/";      Config config=ConfigUtils.loadConfig(configFile);      config.controler().setOverwriteFileSetting(OutputDirectoryHierarchy.OverwriteFileSetting.overwriteExistingFiles);      config.controler().setOutputDirectory(outputDirectoryThisRun);      config.network().setTimeVariantNetwork(true);      config.network().setChangeEventsInputFile(networkChangeFileThisRun);      Controler controler=new Controler(config);      controler.run();      dayCounter++;    }  }}  }
class C{  public static void doSetup(){  new RegularExpressionStandaloneSetup().createInjectorAndDoEMFRegistration();}  }
class C{  private void scrollListItemsBy(int amount){  offsetChildrenLeftAndRight(amount);  final int listRight=getWidth() - mListPadding.right;  final int listLeft=mListPadding.left;  final AbsHListView.RecycleBin recycleBin=mRecycler;  if (amount < 0) {    int numChildren=getChildCount();    View last=getChildAt(numChildren - 1);    while (last.getRight() < listRight) {      final int lastVisiblePosition=mFirstPosition + numChildren - 1;      if (lastVisiblePosition < mItemCount - 1) {        last=addViewAfter(last,lastVisiblePosition);        numChildren++;      } else {        break;      }    }    if (last.getBottom() < listRight) {      offsetChildrenLeftAndRight(listRight - last.getRight());    }    View first=getChildAt(0);    while (first.getRight() < listLeft) {      AbsHListView.LayoutParams layoutParams=(LayoutParams)first.getLayoutParams();      if (recycleBin.shouldRecycleViewType(layoutParams.viewType)) {        detachViewFromParent(first);        recycleBin.addScrapView(first,mFirstPosition);      } else {        removeViewInLayout(first);      }      first=getChildAt(0);      mFirstPosition++;    }  } else {    View first=getChildAt(0);    while ((first.getLeft() > listLeft) && (mFirstPosition > 0)) {      first=addViewBefore(first,mFirstPosition);      mFirstPosition--;    }    if (first.getLeft() > listLeft) {      offsetChildrenLeftAndRight(listLeft - first.getLeft());    }    int lastIndex=getChildCount() - 1;    View last=getChildAt(lastIndex);    while (last.getLeft() > listRight) {      AbsHListView.LayoutParams layoutParams=(LayoutParams)last.getLayoutParams();      if (recycleBin.shouldRecycleViewType(layoutParams.viewType)) {        detachViewFromParent(last);        recycleBin.addScrapView(last,mFirstPosition + lastIndex);      } else {        removeViewInLayout(last);      }      last=getChildAt(--lastIndex);    }  }}  }
class C{  public ColorList calcGradient(float pos,int width){  ColorList result=new ColorList();  if (gradient.size() == 0) {    return result;  }  float frac=0;  GradPoint currPoint=null;  GradPoint nextPoint=null;  float endPos=pos + width;  for (  GradPoint gp : gradient) {    if (gp.pos < pos) {      currPoint=gp;    }  }  boolean isPremature=currPoint == null;  TreeSet<GradPoint> activeGradient=null;  if (!isPremature) {    activeGradient=(TreeSet<GradPoint>)gradient.tailSet(currPoint);  } else {    activeGradient=gradient;    currPoint=activeGradient.first();  }  float currWidth=0;  Iterator<GradPoint> iter=activeGradient.iterator();  if (currPoint != activeGradient.last()) {    nextPoint=iter.next();    if (isPremature) {      float d=currPoint.pos - pos;      currWidth=MathUtils.abs(d) > 0 ? 1f / d : 1;    } else {      if (nextPoint.pos - currPoint.pos > 0) {        currWidth=1f / (nextPoint.pos - currPoint.pos);      }    }  }  while (pos < endPos) {    if (isPremature) {      frac=1 - (currPoint.pos - pos) * currWidth;    } else {      frac=(pos - currPoint.pos) * currWidth;    }    if (frac > 1.0) {      currPoint=nextPoint;      isPremature=false;      if (iter.hasNext()) {        nextPoint=iter.next();        if (currPoint != activeGradient.last()) {          currWidth=1f / (nextPoint.pos - currPoint.pos);        } else {          currWidth=0;        }        frac=(pos - currPoint.pos) * currWidth;      }    }    if (currPoint != activeGradient.last()) {      float ditheredFrac=MathUtils.clip(frac + MathUtils.normalizedRandom() * maxDither,0f,1f);      ditheredFrac=interpolator.interpolate(0,1,ditheredFrac);      result.add(currPoint.color.getBlended(nextPoint.color,ditheredFrac));    } else {      result.add(currPoint.color.copy());    }    pos++;  }  return result;}  }
class C{  public String toValue(){  return value;}  }
class C{  public NumberRangeModel(Number lo,Number hi,Number min,Number max){  m_type=TypeLib.getPrimitiveType(min.getClass());  setValueRange(lo,hi,min,max);}  }
class C{  protected int unwrapValue(Object value){  return ((Integer)value).intValue();}  }
class C{  public static <T>Filter<T> collectionAcceptFilter(T[] objs){  return new CollectionAcceptFilter<T>(Arrays.asList(objs),true);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:19.784 -0500",hash_original_method="E0804B4135D0004448137E06C89A5AC2",hash_generated_method="99478A9B212A653D0776986BD35F57F4") public void showSoftInputFromInputMethod(IBinder token,int flags){  try {    mService.showMySoftInput(token,flags);  } catch (  RemoteException e) {    throw new RuntimeException(e);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof AbstractCategoryItemRenderer)) {    return false;  }  AbstractCategoryItemRenderer that=(AbstractCategoryItemRenderer)obj;  if (!ObjectUtilities.equal(this.itemLabelGenerator,that.itemLabelGenerator)) {    return false;  }  if (!ObjectUtilities.equal(this.itemLabelGeneratorMap,that.itemLabelGeneratorMap)) {    return false;  }  if (!ObjectUtilities.equal(this.baseItemLabelGenerator,that.baseItemLabelGenerator)) {    return false;  }  if (!ObjectUtilities.equal(this.toolTipGenerator,that.toolTipGenerator)) {    return false;  }  if (!ObjectUtilities.equal(this.toolTipGeneratorMap,that.toolTipGeneratorMap)) {    return false;  }  if (!ObjectUtilities.equal(this.baseToolTipGenerator,that.baseToolTipGenerator)) {    return false;  }  if (!ObjectUtilities.equal(this.itemURLGenerator,that.itemURLGenerator)) {    return false;  }  if (!ObjectUtilities.equal(this.itemURLGeneratorMap,that.itemURLGeneratorMap)) {    return false;  }  if (!ObjectUtilities.equal(this.baseItemURLGenerator,that.baseItemURLGenerator)) {    return false;  }  if (!ObjectUtilities.equal(this.legendItemLabelGenerator,that.legendItemLabelGenerator)) {    return false;  }  if (!ObjectUtilities.equal(this.legendItemToolTipGenerator,that.legendItemToolTipGenerator)) {    return false;  }  if (!ObjectUtilities.equal(this.legendItemURLGenerator,that.legendItemURLGenerator)) {    return false;  }  return super.equals(obj);}  }
class C{  Result matchUsage(Node node,MatchContext context){  Result result=matchUsage(node,context,true);  if (result == Result.OK) {    result=context.validate();  }  return result;}  }
class C{  public ComplexFeatureJoinRowMaker(DcwRecordFile drf) throws FormatException {  featureTables=getTables(drf);}  }
class C{  @NonNull private static ZonedDateTime dateToZonedDateTime(@NonNull Date date){  return DateTimeUtils.toInstant(date).atZone(ZoneId.systemDefault());}  }
class C{  private int roundUpPower2(int x){  x=x - 1;  x=x | (x >> 1);  x=x | (x >> 2);  x=x | (x >> 4);  x=x | (x >> 8);  x=x | (x >> 16);  return x + 1;}  }
class C{  public boolean endsWith(String suffix){  return value.endsWith(suffix);}  }
class C{  public int checkDirection(double[] p,double[] dir){  double EPS=MachineAccuracy.SQRT_EPSILON;  int numChanged=0;  for (int i=0; i < dim; i++) {    if (p[i] <= f.getLowerBound(i) + EPS) {      if (dir[i] < 0) {        dir[i]=0;        numChanged++;      }    } else     if (p[i] >= f.getUpperBound(i) - EPS) {      if (dir[i] > 0) {        dir[i]=0;        numChanged++;      }    }  }  return numChanged;}  }
class C{  public static void detect(String url,OnDetectBigUrlFileListener onDetectBigUrlFileListener){  getFileDownloadManager().detect(url,onDetectBigUrlFileListener);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getEventDefinition_();}  }
class C{  public void calculateChainSwingBuffer(float maxAngle,int bufferTime,float angleDecrement,EntityLivingBase entity){  this.calculateChainSwingBuffer(maxAngle,bufferTime,angleDecrement,1.0F,entity);}  }
class C{  public static boolean isLetterOrDigit(char c){  return Character.isLetterOrDigit(c);}  }
class C{  public CacheHeader(String key,Entry entry){  this.key=key;  this.size=entry.data.length;  this.etag=entry.etag;  this.serverDate=entry.serverDate;  this.lastModified=entry.lastModified;  this.ttl=entry.ttl;  this.softTtl=entry.softTtl;  this.responseHeaders=entry.responseHeaders;}  }
class C{  public void println(float x){  return;}  }
class C{  List<Parameter> updateConfiguredParameterValues(Product product,List<VOParameter> parameters,Subscription subscription){  Map<String,Parameter> paramMap=new HashMap<>();  if (product.getParameterSet() != null) {    for (    Parameter parameter : product.getParameterSet().getParameters()) {      paramMap.put(parameter.getParameterDefinition().getParameterId(),parameter);    }  }  if (subscription != null && subscription.getParameterSet() != null && !subscription.getProduct().equals(product)) {    List<Parameter> params=subscription.getParameterSet().getParameters();    if (params != null && params.size() > 0) {      for (      Parameter param : params) {        String parameterId=param.getParameterDefinition().getParameterId();        Parameter uParam=paramMap.get(parameterId);        if (uParam != null) {          uParam.setValue(param.getValue());        }      }    }  }  List<Parameter> modifiedParametesForLog=new ArrayList<>();  for (  VOParameter voParameter : parameters) {    String parameterID=voParameter.getParameterDefinition().getParameterId();    Parameter param=paramMap.get(parameterID);    if (param != null) {      String oldValue=param.getValue();      param.setValue(voParameter.getValue());      String defaultValue=param.getParameterDefinition().getDefaultValue();      if ((oldValue != null && !oldValue.equals(param.getValue())) || (oldValue == null && param.getValue() != null && !param.getValue().equals(defaultValue))) {        modifiedParametesForLog.add(param);      }    }  }  dataManager.flush();  return modifiedParametesForLog;}  }
class C{  private void push(final int type){  if (outputStack == null) {    outputStack=new int[10];  }  int n=outputStack.length;  if (outputStackTop >= n) {    int[] t=new int[Math.max(outputStackTop + 1,2 * n)];    System.arraycopy(outputStack,0,t,0,n);    outputStack=t;  }  outputStack[outputStackTop++]=type;  int top=owner.inputStackTop + outputStackTop;  if (top > owner.outputStackMax) {    owner.outputStackMax=top;  }}  }
class C{  public static boolean parseCommaSequence(PsiBuilder b,int l){  boolean r=false;  while (true) {    if (consumeToken(b,OPERATOR_COMMA) || consumeToken(b,OPERATOR_COMMA_ARROW)) {      r=true;      while (true) {        if (!(consumeToken(b,OPERATOR_COMMA) || consumeToken(b,OPERATOR_COMMA_ARROW))) {          break;        }      }      ;      if (!PerlParserImpl.expr(b,l,4)) {        break;      }    } else {      break;    }  }  return r;}  }
class C{  private LinkedList<Diff> diff_lineMode(String text1,String text2,long deadline){  LinesToCharsResult b=diff_linesToChars(text1,text2);  text1=b.chars1;  text2=b.chars2;  List<String> linearray=b.lineArray;  LinkedList<Diff> diffs=diff_main(text1,text2,false,deadline);  diff_charsToLines(diffs,linearray);  diff_cleanupSemantic(diffs);  diffs.add(new Diff(Operation.EQUAL,""));  int count_delete=0;  int count_insert=0;  String text_delete="";  String text_insert="";  ListIterator<Diff> pointer=diffs.listIterator();  Diff thisDiff=pointer.next();  while (thisDiff != null) {switch (thisDiff.operation) {case INSERT:      count_insert++;    text_insert+=thisDiff.text;  break;case DELETE:count_delete++;text_delete+=thisDiff.text;break;case EQUAL:if (count_delete >= 1 && count_insert >= 1) {pointer.previous();for (int j=0; j < count_delete + count_insert; j++) {pointer.previous();pointer.remove();}for (Diff newDiff : diff_main(text_delete,text_insert,false,deadline)) {pointer.add(newDiff);}}count_insert=0;count_delete=0;text_delete="";text_insert="";break;}thisDiff=pointer.hasNext() ? pointer.next() : null;}diffs.removeLast();return diffs;}  }
class C{  @Override public void writeIncremental(Instance inst) throws IOException {  int writeMode=getWriteMode();  Instances structure=getInstances();  if (m_DataBaseConnection == null) {    throw new IOException("No database has been set up.");  }  if (getRetrieval() == BATCH) {    throw new IOException("Batch and incremental saving cannot be mixed.");  }  setRetrieval(INCREMENTAL);  try {    if (!m_DataBaseConnection.isConnected()) {      connectToDatabase();    }    if (writeMode == WAIT) {      if (structure == null) {        setWriteMode(CANCEL);        if (inst != null) {          throw new Exception("Structure(Header Information) has to be set in advance");        }      } else {        setWriteMode(STRUCTURE_READY);      }      writeMode=getWriteMode();    }    if (writeMode == CANCEL) {      cancel();    }    if (writeMode == STRUCTURE_READY) {      setWriteMode(WRITE);      writeStructure();      writeMode=getWriteMode();    }    if (writeMode == WRITE) {      if (structure == null) {        throw new IOException("No instances information available.");      }      if (inst != null) {        writeInstance(inst);      } else {        m_DataBaseConnection.disconnectFromDatabase();        resetStructure();        m_count=1;      }    }  } catch (  Exception ex) {    printException(ex);  }}  }
class C{  public Boolean isDot11Configuration(){  return dot11Configuration;}  }
class C{  protected final static Class<?> tryToLoadClass(String className,ClassLoader fallback) throws ClassNotFoundException {  ReflectUtil.checkPackageAccess(className);  try {    SecurityManager sm=System.getSecurityManager();    if (sm != null) {      sm.checkPermission(GET_CLASSLOADER_PERMISSION);    }    ClassLoader loader=ClassLoader.getSystemClassLoader();    try {      return Class.forName(className,true,loader);    } catch (    ClassNotFoundException exception) {      loader=Thread.currentThread().getContextClassLoader();      if (loader != null) {        try {          return Class.forName(className,true,loader);        } catch (        ClassNotFoundException e) {        }      }    }  } catch (  SecurityException exception) {  }  return Class.forName(className,true,fallback);}  }
class C{  public static void close(@Nullable AsyncCloseable closeable) throws IOException {  if (null == closeable) {    return;  }  FutureUtils.result(closeable.asyncClose());}  }
class C{  protected void rehash(int newCapacity){  int oldCapacity=table.length;  if (newCapacity <= this.distinct)   throw new InternalError();  int oldTable[]=table;  double oldValues[]=values;  byte oldState[]=state;  int newTable[]=new int[newCapacity];  double newValues[]=new double[newCapacity];  byte newState[]=new byte[newCapacity];  this.lowWaterMark=chooseLowWaterMark(newCapacity,this.minLoadFactor);  this.highWaterMark=chooseHighWaterMark(newCapacity,this.maxLoadFactor);  this.table=newTable;  this.values=newValues;  this.state=newState;  this.freeEntries=newCapacity - this.distinct;  for (int i=oldCapacity; i-- > 0; ) {    if (oldState[i] == FULL) {      int element=oldTable[i];      int index=indexOfInsertion(element);      newTable[index]=element;      newValues[index]=oldValues[i];      newState[index]=FULL;    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:16.951 -0500",hash_original_method="00F8174F9E89D0C972FA6D3F19742382",hash_generated_method="D90463461B2A94FF94D13FDF69BB80C9") public int describeContents(){  return 0;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void updateShort(String columnName,short x) throws SQLException {  checkUpdatable();  getField(columnName).setShort(x);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public java.lang.StringBuffer append(boolean b){  return null;}  }
class C{  public void addBinding(Binding binding){  bindings.put(binding.getName(),binding);}  }
class C{  public BalancedTree(){}  }
class C{  public static <T extends Message>T lengthValueRead(InputStream inputStream,Class<T> messageClass){  int length=popLength(inputStream);  if (length < 0) {    return null;  } else   if (length > MAX_MESSAGE_SIZE) {    Log.e(TAG,"Remote party asked us to read " + length + " bytes in a length/value read");    return null;  }  byte[] messageBytes=new byte[length];  T recoveredMessage;  try {    inputStream.read(messageBytes);    recoveredMessage=wire.parseFrom(messageBytes,messageClass);  } catch (  IOException e) {    Log.e(TAG,"IOException parsing message bytes: " + e);    return null;  }  return recoveredMessage;}  }
class C{  private void search(Rectangle query,RNode<V> node,List<V> list){  if (!node.isLeaf()) {    for (int i=0; i < node.size(); i++)     if (node.getChild(i).bound.intersects(query))     search(query,node.getChild(i),list);  } else   for (int i=0; i < node.size(); i++)   if (query.contains(node.points.get(i)))   list.add(node.points.get(i));}  }
class C{  private void createDatabaseIfNotExistent(){  if (isOnline()) {    List<String> dbNames=influxDB.describeDatabases();    if (!dbNames.contains(database)) {      influxDB.createDatabase(database);    }  }}  }
class C{  public void paste(OMGraphicList omgl){  OMGraphicList list=getList();  list.addAll(omgl);}  }
class C{  @Override public String id(){  return id;}  }
class C{  public String toString(){  return image;}  }
class C{  public Vector2f multLocal(float scalar){  x*=scalar;  y*=scalar;  return this;}  }
class C{  public boolean isInStandbyMode(){  return sched.isInStandbyMode();}  }
class C{  private static DefaultTestCase buildTestCase0() throws NoSuchMethodException, SecurityException, ClassNotFoundException {  TestCaseBuilder builder=new TestCaseBuilder();  VariableReference int0=builder.appendIntPrimitive(0);  VariableReference int1=builder.appendIntPrimitive(0);  VariableReference int2=builder.appendIntPrimitive(0);  Class<?> triangleClass=TestGenerationContext.getInstance().getClassLoaderForSUT().loadClass(Properties.TARGET_CLASS);  Method barMethod=triangleClass.getMethod("exe",int.class,int.class,int.class);  builder.appendMethod(null,barMethod,int0,int1,int2);  return builder.getDefaultTestCase();}  }
class C{  public boolean isChanged(){  return m_DataPanel.isChanged();}  }
class C{  public LongAdder(){}  }
class C{  private static boolean isAcceptableVersion(NetworkParameters params,int version){  for (  int v : params.getAcceptableAddressCodes()) {    if (version == v) {      return true;    }  }  return false;}  }
class C{  private void addTokenToWorld(final int x,final int y){  final Token token=(Token)SingletonRepository.getEntityManager().getItem("arrow game token");  token.setPosition(x,y);  token.setTokenMoveListener(this);  zone.add(token,false);  tokens.add(token);}  }
class C{  public CoefficientEvaluationResult evalCoeffsForNodePairs(GraphWithParameters standardGraph,List<Edge> edges){  totalCoeffErrorSq=0;  for (  Edge edge : edges) {    Node node1Edges=edge.getNode1();    Node node2Edges=edge.getNode2();    System.out.println("node1Edges = " + node1Edges + "  node2Edges = "+ node2Edges);    Node node1this=getCorrespondingNode(this.getGraph(),node1Edges);    Node node2this=getCorrespondingNode(this.getGraph(),node2Edges);    double coeff12=getDirectedEdgeCoeff(node1this,node2this);    Node node1sta=getCorrespondingNode(standardGraph.getGraph(),node1Edges);    Node node2sta=getCorrespondingNode(standardGraph.getGraph(),node2Edges);    double realCoeff12=standardGraph.getDirectedEdgeCoeff(node1sta,node2sta);    double err12=java.lang.Math.pow(coeff12 - realCoeff12,2);    System.out.println("err12 = " + err12);    double coeff21=getDirectedEdgeCoeff(node2this,node1this);    double realCoeff21=standardGraph.getDirectedEdgeCoeff(node2sta,node1sta);    double err21=java.lang.Math.pow(coeff21 - realCoeff21,2);    System.out.println("err21 = " + err21);    double error=err12 + err21;    System.out.println("error = " + error);    totalCoeffErrorSq+=error;  }  return new CoefficientEvaluationResult(totalCoeffErrorSq,edges.size());}  }
class C{  public Builder size(Size size){  this.size=size;  return this;}  }
class C{  protected void inorder(TreeNode<E> root){  if (root == null)   return;  java.util.Stack<TreeNode<E>> stack=new java.util.Stack<>();  TreeNode<E> current=root;  while (!stack.empty() || current != null) {    if (current != null) {      stack.push(current);      current=current.left;    } else {      TreeNode<E> node=stack.pop();      System.out.print(node.element + " ");      current=node.right;    }  }}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildTrader(zone);}  }
class C{  public hr(){}  }
class C{  private void initActions(){  getActionMap().put(UndoAction.ID,undo.getUndoAction());  getActionMap().put(RedoAction.ID,undo.getRedoAction());}  }
class C{  public void pause(){  if (isRunning()) {    LOGGER.info("Pausing pipeline {}",name);    engine.pause();    metrics.getCounter("paused").inc();  } else {    LOGGER.debug("Pipeline {} is not running, and so cannot be paused",name);  }}  }
class C{  public StringBand(){  array=new String[DEFAULT_ARRAY_CAPACITY];}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  double[][] points=new double[5][2];  System.out.print("\nEnter five points: ");  for (int i=0; i < points.length; i++) {    for (int j=0; j < points[i].length; j++) {      points[i][j]=input.nextDouble();    }  }  MyRectangle2D r1=MyRectangle2D.getRectangle(points);  System.out.println("The bounding rectangle's center (" + r1.getX() + ", "+ r1.getY()+ "), width "+ r1.getWidth()+ ", height "+ r1.getHeight());}  }
class C{  public JSONArray(JSONTokener x) throws JSONException {  this();  if (x.nextClean() != '[') {    throw x.syntaxError("A JSONArray text must start with '['");  }  if (x.nextClean() != ']') {    x.back();    for (; ; ) {      if (x.nextClean() == ',') {        x.back();        this.myArrayList.add(JSONObject.NULL);      } else {        x.back();        this.myArrayList.add(x.nextValue());      }switch (x.nextClean()) {case ',':        if (x.nextClean() == ']') {          return;        }      x.back();    break;case ']':  return;default :throw x.syntaxError("Expected a ',' or ']'");}}}}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static Resources open(InputStream resource) throws IOException {  return open(resource,-1);}  }
class C{  protected boolean[] incrementingEquality(AttrTypes attrTypes,int classType){  print("incremental training produces the same results" + " as batch training");  printAttributeSummary(attrTypes,classType);  print("...");  int numTrain=getNumInstances(), numTest=getNumInstances(), numClasses=2, missingLevel=0;  boolean attributeMissing=false, classMissing=false;  boolean[] result=new boolean[2];  Instances train=null;  Estimator[] estimators=null;  boolean built=false;  int attrIndex=0;  Vector<Double> test;  try {    train=makeTestDataset(42,numTrain,1,attrTypes,numClasses,classType);    test=makeTestValueList(24,numTest,train,attrIndex,attrTypes.getSetType());    if (missingLevel > 0) {      addMissing(train,missingLevel,attributeMissing,classMissing,attrIndex);    }    estimators=Estimator.makeCopies(getEstimator(),2);    estimators[0].addValues(train,attrIndex);  } catch (  Exception ex) {    throw new Error("Error setting up for tests: " + ex.getMessage());  }  try {    for (int i=0; i < train.numInstances(); i++) {      ((IncrementalEstimator)estimators[1]).addValue(train.instance(i).value(attrIndex),1.0);    }    built=true;    if (!estimators[0].equals(estimators[1])) {      println("no");      result[0]=false;      if (m_Debug) {        println("\n=== Full Report ===");        println("Results differ between batch and " + "incrementally built models.\n" + "Depending on the estimator, this may be OK");        println("Here are the results:\n");        println("batch built results\n" + estimators[0].toString());        println("incrementally built results\n" + estimators[1].toString());        println("Here are the datasets:\n");        println("=== Train Dataset ===\n" + train.toString() + "\n");        println("=== Test Dataset ===\n" + test.toString() + "\n\n");      }    } else {      println("yes");      result[0]=true;    }  } catch (  Exception ex) {    result[0]=false;    print("Problem during");    if (built) {      print(" testing");    } else {      print(" training");    }    println(": " + ex.getMessage() + "\n");  }  return result;}  }
class C{  public static boolean isWindows(){  String os=System.getProperty("os.name").toLowerCase();  return (os.contains("win"));}  }
class C{  public static PsiFile findLayoutResource(PsiElement element){  if (element == null) {    return null;  }  if (!(element instanceof PsiIdentifier)) {    return null;  }  PsiElement layout=element.getParent().getFirstChild();  if (layout == null) {    return null;  }  if (!"R.layout".equals(layout.getText())) {    return null;  }  Project project=element.getProject();  String name=String.format("%s.xml",element.getText());  return resolveLayoutResourceFile(element,project,name);}  }
class C{  @Experimental public CallSpec<List<XingUser>,HttpError> findUsersByKeyword(String keywords){  return Resource.<List<XingUser>,HttpError>newGetSpec(api,"/v1/users/find").responseAs(list(single(XingUser.class,"user"),"users","items")).queryParam("keywords",keywords).build();}  }
class C{  public static void addPortUse(Map<StoragePort,Integer> portUseCounts,StoragePort port){  if (!portUseCounts.containsKey(port)) {    portUseCounts.put(port,1);  } else {    Integer newCount=portUseCounts.get(port) + 1;    portUseCounts.put(port,newCount);  }}  }
class C{  public void add(mxRectangle rect){  if (rect != null) {    double minX=Math.min(x,rect.x);    double minY=Math.min(y,rect.y);    double maxX=Math.max(x + width,rect.x + rect.width);    double maxY=Math.max(y + height,rect.y + rect.height);    x=minX;    y=minY;    width=maxX - minX;    height=maxY - minY;  }}  }
class C{  public void zoomRangeAxes(double x,double y,double lowerPercent,double upperPercent){}  }
class C{  public boolean isSetId(){  return EncodingUtils.testBit(__isset_bitfield,__ID_ISSET_ID);}  }
class C{  public static boolean isZipName(String name){  String ucName=name.toUpperCase();  return (ucName.endsWith("ZIP") || ucName.endsWith("JAR"));}  }
class C{  public MatteBorder(int top,int left,int bottom,int right,Icon tileIcon){  super(top,left,bottom,right);  this.tileIcon=tileIcon;}  }
class C{  public void startElement(String uri,String localName,String rawName,Attributes attributes) throws org.xml.sax.SAXException {  NamespaceSupport nssupport=this.getNamespaceSupport();  nssupport.pushContext();  int n=m_prefixMappings.size();  for (int i=0; i < n; i++) {    String prefix=(String)m_prefixMappings.elementAt(i++);    String nsURI=(String)m_prefixMappings.elementAt(i);    nssupport.declarePrefix(prefix,nsURI);  }  m_prefixMappings.removeAllElements();  m_elementID++;  checkForFragmentID(attributes);  if (!m_shouldProcess)   return;  flushCharacters();  pushSpaceHandling(attributes);  XSLTElementProcessor elemProcessor=getProcessorFor(uri,localName,rawName);  if (null != elemProcessor) {    this.pushProcessor(elemProcessor);    elemProcessor.startElement(this,uri,localName,rawName,attributes);  } else {    m_shouldProcess=false;    popSpaceHandling();  }}  }
class C{  public void rebuildFromBundle(Bundle bundle,String tag){  checkNotNull(bundle,"bundle == null");  checkStringNotEmpty(tag,"tag is empty");  ParcelableIntStack savedStack=bundle.getParcelable(tag);  checkNotNull(savedStack,"Bundle doesn't contain any ViewStack state.");  for (  Integer layoutResource : savedStack) {    pushWithoutNotifyingListeners(layoutResource);  }  callOnViewAdded();}  }
class C{  public void addListener(final SelectionListener listener1){  this.listener=listener1;}  }
class C{  public static CompressingCodec randomInstance(Random random,int chunkSize,int maxDocsPerChunk,boolean withSegmentSuffix,int blockSize){switch (random.nextInt(4)) {case 0:    return new FastCompressingCodec(chunkSize,maxDocsPerChunk,withSegmentSuffix,blockSize);case 1:  return new FastDecompressionCompressingCodec(chunkSize,maxDocsPerChunk,withSegmentSuffix,blockSize);case 2:return new HighCompressionCompressingCodec(chunkSize,maxDocsPerChunk,withSegmentSuffix,blockSize);case 3:return new DummyCompressingCodec(chunkSize,maxDocsPerChunk,withSegmentSuffix,blockSize);default :throw new AssertionError();}}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  NamedNodeMap addrAttr;  Node attrNode;  String attrName;  java.util.Collection attrList=new java.util.ArrayList();  java.util.Collection htmlExpected=new java.util.ArrayList();  htmlExpected.add("title");  htmlExpected.add("class");  java.util.Collection expected=new java.util.ArrayList();  expected.add("title");  expected.add("class");  expected.add("dir");  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("acronym");  testAddr=(Element)elementList.item(2);  addrAttr=testAddr.getAttributes();  for (int indexN10070=0; indexN10070 < addrAttr.getLength(); indexN10070++) {    attrNode=(Node)addrAttr.item(indexN10070);    attrName=attrNode.getNodeName();    attrList.add(attrName);  }  if (("text/html".equals(getContentType()))) {    assertEqualsIgnoreCase("attrNames_html",htmlExpected,attrList);  } else {    assertEquals("attrNames",expected,attrList);  }}  }
class C{  private void recordSuspectRequests(List<SuspectRequest> sMembers,NetView cv){  Set<SuspectRequest> viewVsMembers;synchronized (viewVsSuspectedMembers) {    viewVsMembers=viewVsSuspectedMembers.get(cv);    if (viewVsMembers == null) {      viewVsMembers=new HashSet<>();      viewVsSuspectedMembers.put(cv,viewVsMembers);    }    for (    SuspectRequest sr : sMembers) {      viewVsMembers.add(sr);    }  }}  }
class C{  public String dump(int stop){  Path p=new Path(this,stop);  StringBuilder sb=new StringBuilder();  for (int i=0; i < p.length; i++) {    sb.append(String.format("Stop %5d at %5d, reached by pattern %5d from stop %5d\n",p.alightStops[i],p.alightTimes[i],p.patterns[i],p.boardStops[i]));  }  return sb.toString();}  }
class C{  private void diff(DiffRequest diffRequest,@NotNull String projectPath,AsyncRequestCallback<String> callback){  String url=baseHttpUrl + DIFF + "?projectPath="+ projectPath;  asyncRequestFactory.createPostRequest(url,diffRequest).loader(loader).send(callback);}  }
class C{  @Override public int hashCode(){  return jdkObject.hashCode();}  }
class C{  public LicenseHeaderStep(File licenseFile,Charset encoding,String delimiter) throws IOException {  this(new String(Files.readAllBytes(licenseFile.toPath()),encoding),delimiter);}  }
class C{  public JsonObjectRequest(int method,String url,JSONObject jsonRequest,Listener<JSONObject> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  public void addWallTime(long wall){  wallTime.addAndGet(wall);}  }
class C{  public Vector2(float x,float y){  this.x=x;  this.y=y;}  }
class C{  public TileEntity(GlowBlock block){  this.block=block;}  }
class C{  public boolean marginTouchAllowed(View content,int x){  int left=content.getLeft();  int right=content.getRight();  if (mMode == SlidingMenu.LEFT) {    return (x >= left && x <= mMarginThreshold + left);  } else   if (mMode == SlidingMenu.RIGHT) {    return (x <= right && x >= right - mMarginThreshold);  } else   if (mMode == SlidingMenu.LEFT_RIGHT) {    return (x >= left && x <= mMarginThreshold + left) || (x <= right && x >= right - mMarginThreshold);  }  return false;}  }
class C{  public boolean shouldOverrideKeyEvent(WebView view,KeyEvent event){  return false;}  }
class C{  public JFreeChartEntity(Shape area,JFreeChart chart,String toolTipText){  this(area,chart,toolTipText,null);}  }
class C{  public final int lastIndexOf(int elem){  for (int i=(m_firstFree - 1); i >= 0; i--) {    if (m_map[i] == elem)     return i;  }  return java.lang.Integer.MIN_VALUE;}  }
class C{  public static int compute2(int x){  int loops=(x >>> 4) & 7;  while (loops-- > 0) {    x=(x * 2147483647) % 16807;  }  return x;}  }
class C{  public void save(File file,String type) throws IOException {  final FileOutputStream fos=new FileOutputStream(file);  ImageIO.write(this.image,type,fos);  fos.close();}  }
class C{  private void pruneIfNeeded(int neededSpace){  if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes) {    return;  }  if (VolleyLog.DEBUG) {    VolleyLog.v("Pruning old cache entries.");  }  long before=mTotalSize;  int prunedFiles=0;  long startTime=SystemClock.elapsedRealtime();  Iterator<Map.Entry<String,CacheHeader>> iterator=mEntries.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<String,CacheHeader> entry=iterator.next();    CacheHeader e=entry.getValue();    boolean deleted=getFileForKey(e.key).delete();    if (deleted) {      mTotalSize-=e.size;    } else {      VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",e.key,getFilenameForKey(e.key));    }    iterator.remove();    prunedFiles++;    if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes * HYSTERESIS_FACTOR) {      break;    }  }  if (VolleyLog.DEBUG) {    VolleyLog.v("pruned %d files, %d bytes, %d ms",prunedFiles,(mTotalSize - before),SystemClock.elapsedRealtime() - startTime);  }}  }
class C{  public boolean isAlwaysFalse(){  return alwaysFalse;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:06.148 -0500",hash_original_method="17C0EB7BC2271962455DE53D535BEB5E",hash_generated_method="F5DA2469AC3754FE916038AE7ABFBEE5") @Override public String toString(){  StringBuilder output=new StringBuilder();  for (int i=0; i < numOfEntries; i++) {    output.append(countryCallingCodes[i]);    output.append('|');    SortedSet<String> sortedSetOfLangs=new TreeSet<String>(availableLanguages.get(i));    for (    String lang : sortedSetOfLangs) {      output.append(lang);      output.append(',');    }    output.append('\n');  }  return output.toString();}  }
class C{  public void dismiss(){  dismissInternal(false);}  }
class C{  public static double cos(double radians){  return Math.cos(radians);}  }
class C{  public static synchronized void unregister(PurchaseObserver observer){  sPurchaseObserver=null;}  }
class C{  public JSONWriter key(String string) throws JSONException {  if (string == null) {    throw new JSONException("Null key.");  }  if (this.mode == 'k') {    try {      this.stack[this.top - 1].putOnce(string,Boolean.TRUE);      if (this.comma) {        this.writer.write(',');      }      this.writer.write(JSONObject.quote(string));      this.writer.write(':');      this.comma=false;      this.mode='o';      return this;    } catch (    IOException e) {      throw new JSONException(e);    }  }  throw new JSONException("Misplaced key.");}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void unregisterAll(){synchronized (mObservers) {    mObservers.clear();  }}  }
class C{  public final void put(String key,int value){  if ((m_firstFree + 1) >= m_mapSize) {    m_mapSize+=m_blocksize;    String newMap[]=new String[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;    int newValues[]=new int[m_mapSize];    System.arraycopy(m_values,0,newValues,0,m_firstFree + 1);    m_values=newValues;  }  m_map[m_firstFree]=key;  m_values[m_firstFree]=value;  m_firstFree++;}  }
class C{  public void endVisit(MarkerAnnotation node){}  }
class C{  @Override public int read() throws java.io.IOException {  if (position < 0) {    if (encode) {      byte[] b3=new byte[3];      int numBinaryBytes=0;      for (int i=0; i < 3; i++) {        try {          int b=in.read();          if (b >= 0) {            b3[i]=(byte)b;            numBinaryBytes++;          }        } catch (        java.io.IOException e) {          if (i == 0) {            throw e;          }        }      }      if (numBinaryBytes > 0) {        encode3to4(b3,0,numBinaryBytes,buffer,0);        position=0;        numSigBytes=4;      } else {        return -1;      }    } else {      byte[] b4=new byte[4];      int i=0;      for (i=0; i < 4; i++) {        int b=0;        do {          b=in.read();        } while (b >= 0 && DECODABET[b & 0x7f] <= WHITE_SPACE_ENC);        if (b < 0) {          break;        }        b4[i]=(byte)b;      }      if (i == 4) {        numSigBytes=decode4to3(b4,0,buffer,0);        position=0;      } else       if (i == 0) {        return -1;      } else {        throw new java.io.IOException("Improperly padded Base64 input.");      }    }  }  if (position >= 0) {    if (position >= numSigBytes) {      return -1;    }    if (encode && breakLines && lineLength >= MAX_LINE_LENGTH) {      lineLength=0;      return '\n';    } else {      lineLength++;      int b=buffer[position++];      if (position >= bufferLength) {        position=-1;      }      return b & 0xFF;    }  } else {    throw new java.io.IOException("Error in Base64 code reading stream.");  }}  }
class C{  public AndersonDarlingTest(double[] data){  this.data=data;  runTest();}  }
class C{  public static boolean isPhone(Object value){  String str=Caster.toString(value,null);  if (str == null)   return false;  if (phonePattern == null)   phonePattern=Pattern.compile("^(\\+?1?[ \\-\\.]?([\\(]?([1-9][0-9]{2})[\\)]?))?[ ,\\-,\\.]?([^0-1]){1}([0-9]){2}[ ,\\-,\\.]?([0-9]){4}(( )((x){0,1}([0-9]){1,5}){0,1})?$");  return phonePattern.matcher(str.trim()).matches();}  }
class C{  public boolean isMergeAdjacentText(){  return mergeAdjacentText;}  }
class C{  public ClaimBuilder putResource(Resource resource){  return putResource(resource.path());}  }
class C{  private JdbcTypeCategoryEnum(String defaultTextRep,int value){  super(defaultTextRep,value);}  }
class C{  public void writeRawBytes(final ByteString value,int offset,int length) throws IOException {  if (limit - position >= length) {    value.copyTo(buffer,offset,position,length);    position+=length;  } else {    final int bytesWritten=limit - position;    value.copyTo(buffer,offset,position,bytesWritten);    offset+=bytesWritten;    length-=bytesWritten;    position=limit;    refreshBuffer();    if (length <= limit) {      value.copyTo(buffer,offset,0,length);      position=length;    } else {      InputStream inputStreamFrom=value.newInput();      if (offset != inputStreamFrom.skip(offset)) {        throw new IllegalStateException("Skip failed? Should never happen.");      }      while (length > 0) {        int bytesToRead=Math.min(length,limit);        int bytesRead=inputStreamFrom.read(buffer,0,bytesToRead);        if (bytesRead != bytesToRead) {          throw new IllegalStateException("Read failed? Should never happen");        }        output.write(buffer,0,bytesRead);        length-=bytesRead;      }    }  }}  }
class C{  final public int indexOf(final char c){  return indexOf(c,0);}  }
class C{  public static void jsonObjectsEquals(JSONObject o1,JSONObject o2) throws JSONException {  if (o1 != o2) {    if (o1.length() != o2.length()) {      fail("JSONObjects length differ: " + o1.length() + " / "+ o2.length());    }    @SuppressWarnings("unchecked") Iterator<String> o1Keys=o1.keys();    while (o1Keys.hasNext()) {      String key=o1Keys.next();      Object o1Value=o1.get(key);      Object o2Value=o2.get(key);      if (!jsonValueEquals(o1Value,o2Value)) {        fail("JSONObject '" + key + "' values differ: "+ o1Value+ " / "+ o2Value);      }    }  }}  }
class C{  public void refreshRemoveDividers() throws Exception {  m_dividers.refreshRemoveNodes();}  }
class C{  public void beforeIfPresent(T id){  before.add(id);}  }
class C{  private ActionErrors validateFormParaEliminarFicha(FichasForm frm){  ActionErrors errors=new ActionErrors();  String idFichasABorrar[]=frm.getFichasABorrar();  if (idFichasABorrar == null || idFichasABorrar.length == 0) {    errors.add(ErrorKeys.ERROR_SELECCIONE_AL_MENOS_UNA_FICHA,new ActionError(ErrorKeys.ERROR_SELECCIONE_AL_MENOS_UNA_FICHA));  }  return errors.size() > 0 ? errors : null;}  }
class C{  public Matrix(double vals[],int m){  this.m=m;  n=(m != 0 ? vals.length / m : 0);  if (m * n != vals.length) {    throw new IllegalArgumentException("Array length must be a multiple of m.");  }  A=new double[m][n];  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=vals[i + j * m];    }  }}  }
class C{  protected boolean[] canPredict(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType){  print("basic predict");  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);  print("...");  ArrayList<String> accepts=new ArrayList<String>();  accepts.add("unary");  accepts.add("binary");  accepts.add("nominal");  accepts.add("numeric");  accepts.add("string");  accepts.add("date");  accepts.add("relational");  accepts.add("multi-instance");  accepts.add("not in classpath");  int numTrain=getNumInstances(), numClasses=2, missingLevel=0;  boolean predictorMissing=false, classMissing=false;  return runBasicTest(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType,missingLevel,predictorMissing,classMissing,numTrain,numClasses,accepts);}  }
class C{  protected Iterator<Map.Entry<K,V>> createEntrySetIterator(){  if (size() == 0) {    return EmptyIterator.INSTANCE;  }  return new EntrySetIterator<K,V>(this);}  }
class C{  private static boolean isSemiPlanarYUV(int colorFormat){switch (colorFormat) {case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420Planar:case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420PackedPlanar:    return false;case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420SemiPlanar:case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420PackedSemiPlanar:case MediaCodecInfo.CodecCapabilities.COLOR_TI_FormatYUV420PackedSemiPlanar:  return true;default :throw new RuntimeException("unknown format " + colorFormat);}}  }
class C{  private LinkedHashMap<LogicalVariable,LogicalVariable> eliminateSharedOperatorReference(Mutable<ILogicalOperator> currentOpRef,Set<Mutable<ILogicalOperator>> opRefSet) throws AsterixException {  try {    opRefSet.add(currentOpRef);    AbstractLogicalOperator currentOperator=(AbstractLogicalOperator)currentOpRef.getValue();    if (currentOperator.hasNestedPlans()) {      AbstractOperatorWithNestedPlans opWithNestedPlan=(AbstractOperatorWithNestedPlans)currentOperator;      for (      ILogicalPlan plan : opWithNestedPlan.getNestedPlans()) {        for (        Mutable<ILogicalOperator> rootRef : plan.getRoots()) {          Set<Mutable<ILogicalOperator>> nestedOpRefSet=new HashSet<>();          eliminateSharedOperatorReference(rootRef,nestedOpRefSet);        }      }    }    int childIndex=0;    LinkedHashMap<LogicalVariable,LogicalVariable> varMap=new LinkedHashMap<>();    for (    Mutable<ILogicalOperator> childRef : currentOperator.getInputs()) {      if (opRefSet.contains(childRef)) {        LogicalOperatorDeepCopyWithNewVariablesVisitor visitor=new LogicalOperatorDeepCopyWithNewVariablesVisitor(context,null);        ILogicalOperator newChild=childRef.getValue().accept(visitor,null);        LinkedHashMap<LogicalVariable,LogicalVariable> cloneVarMap=visitor.getInputToOutputVariableMapping();        VariableUtilities.substituteVariables(currentOperator,cloneVarMap,null);        varMap.putAll(cloneVarMap);        childRef=new MutableObject<>(newChild);        currentOperator.getInputs().set(childIndex,childRef);      }      LinkedHashMap<LogicalVariable,LogicalVariable> childVarMap=eliminateSharedOperatorReference(childRef,opRefSet);      VariableUtilities.substituteVariables(currentOperator,childVarMap,null);      for (      Map.Entry<LogicalVariable,LogicalVariable> entry : varMap.entrySet()) {        LogicalVariable newVar=childVarMap.get(entry.getValue());        if (newVar != null) {          entry.setValue(newVar);        }      }      varMap.putAll(childVarMap);      ++childIndex;    }    Set<LogicalVariable> liveVars=new HashSet<>();    VariableUtilities.getLiveVariables(currentOperator,liveVars);    varMap.values().retainAll(liveVars);    return varMap;  } catch (  AlgebricksException e) {    throw new AsterixException(e);  }}  }
class C{  public static byte[] encode(byte[] pArray){  return encodeBase64(pArray,false);}  }
class C{  public void testGetInstance02() throws NoSuchAlgorithmException, NoSuchProviderException, IllegalArgumentException, InvalidAlgorithmParameterException {  try {    AlgorithmParameterGenerator.getInstance(null,mProv.getName());    fail("NullPointerException or NoSuchAlgorithmException should be thrown");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      AlgorithmParameterGenerator.getInstance(invalidValues[i],mProv.getName());      fail("NoSuchAlgorithmException must be thrown (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  String prov=null;  for (int i=0; i < validValues.length; i++) {    try {      AlgorithmParameterGenerator.getInstance(validValues[i],prov);      fail("IllegalArgumentException must be thrown when provider is null (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }  }  for (int i=0; i < validValues.length; i++) {    for (int j=1; j < invalidValues.length; j++) {      try {        AlgorithmParameterGenerator.getInstance(validValues[i],invalidValues[j]);        fail("NoSuchProviderException must be thrown (algorithm: ".concat(invalidValues[i]).concat(" provider: ").concat(invalidValues[j]).concat(")"));      } catch (      NoSuchProviderException e) {      }    }  }  AlgorithmParameterGenerator apG;  for (int i=0; i < validValues.length; i++) {    apG=AlgorithmParameterGenerator.getInstance(validValues[i],mProv.getName());    assertEquals("Incorrect algorithm",apG.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",apG.getProvider().getName(),mProv.getName());    checkResult(apG);  }}  }
class C{  @DSSafe(DSCat.IPC_CALLBACK) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:21.497 -0500",hash_original_method="3D458ABE064DFE8DA418A778447E394C",hash_generated_method="A6014E5EB851F86E973CE76A92443A99") @Override public void handleMessage(Message msg){switch (msg.what) {case EVENT_START_DATA_DOWNLOAD:    handleDataDownload((SmsMessage)msg.obj);  break;case EVENT_SEND_ENVELOPE_RESPONSE:AsyncResult ar=(AsyncResult)msg.obj;if (ar.exception != null) {Log.e(TAG,"UICC Send Envelope failure, exception: " + ar.exception);acknowledgeSmsWithError(CommandsInterface.GSM_SMS_FAIL_CAUSE_USIM_DATA_DOWNLOAD_ERROR);return;}int[] dcsPid=(int[])ar.userObj;sendSmsAckForEnvelopeResponse((IccIoResult)ar.result,dcsPid[0],dcsPid[1]);break;default :Log.e(TAG,"Ignoring unexpected message, what=" + msg.what);}}  }
class C{  public CViewsTable(final JTree projectTree,final CAbstractTreeViewsTableModel model,final IViewContainer container,final IHelpInformation helpInfo){  super(projectTree,model,helpInfo);  viewContainer=Preconditions.checkNotNull(container,"IE02031: Container argument can not be null");  viewsTableModel=Preconditions.checkNotNull(model,"IE02350: model argument can not be null");  if (!GraphicsEnvironment.isHeadless()) {    setDragEnabled(true);  }  setTransferHandler(new CViewDragHandler(this));  final InputMap windowImap=getInputMap(JComponent.WHEN_FOCUSED);  windowImap.put(HotKeys.LOAD_NEW_WINDOW_HK.getKeyStroke(),"ShowNewKeyStroke");  getActionMap().put("ShowNewKeyStroke",CActionProxy.proxy(new ShowNewWindowAction()));  windowImap.put(HotKeys.LOAD_LAST_WINDOW_HK.getKeyStroke(),"ShowLastKeyStroke");  getActionMap().put("ShowLastKeyStroke",CActionProxy.proxy(new ShowLastWindowAction()));  ZyGraphBuilderManager.instance().addListener(builderManagerListener);}  }
class C{  public boolean deleteJob(JobKey jobKey) throws SchedulerException {  try {    return getRemoteScheduler().deleteJob(jobKey);  } catch (  RemoteException re) {    throw invalidateHandleCreateException("Error communicating with remote scheduler.",re);  }}  }
class C{  private void checkConfiguration(){  if (configuration == null) {    throw new IllegalStateException(ERROR_NOT_INIT);  }}  }
class C{  private static boolean findTablesInFrom(GridSqlElement from,IgnitePredicate<GridSqlElement> c){  if (from == null)   return false;  if (from instanceof GridSqlTable || from instanceof GridSqlSubquery)   return c.apply(from);  if (from instanceof GridSqlJoin) {    if (findTablesInFrom(from.child(0),c))     return true;    if (findTablesInFrom(from.child(1),c))     return true;    return false;  } else   if (from instanceof GridSqlAlias)   return findTablesInFrom(from.child(),c); else   if (from instanceof GridSqlFunction)   return false;  throw new IllegalStateException(from.getClass().getName() + " : " + from.getSQL());}  }
class C{  public static String generateName(String prefix){  return prefix + randomString(5);}  }
class C{  public void intervalRemoved(TimedElement e,Interval i){}  }
class C{  public boolean reinit(){  Map<String,Integer> newEntryColourMap=buildEntryColourMap();  if (newEntryColourMap == null || newEntryColourMap.size() < 1) {    return false;  }  Map<String,EntryHierarchyData> newEntryHierarchyDataMap;  try {    newEntryHierarchyDataMap=entryHierarchyDataResourceReader.read(entryHierarchyDataResource);  } catch (  IOException e) {    LOGGER.warn("Problem reading entry hierarchy data resource: " + e.getMessage());    return false;  }  if (newEntryHierarchyDataMap == null || newEntryHierarchyDataMap.size() < 1) {    return false;  }  entryColourMap=newEntryColourMap;  entryHierarchyDataMap=newEntryHierarchyDataMap;  return true;}  }
class C{  public byte[] rpoplpush(final byte[] srckey,final byte[] dstkey){  checkIsInMulti();  client.rpoplpush(srckey,dstkey);  return client.getBinaryBulkReply();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static XmlClass toXmlClass(Class<?> aClass){  XmlClass xmlClass=new XmlClass();  xmlClass.name=aClass.getName();  xmlClass.attributes=new ArrayList<XmlAttribute>();  if (aClass.getAnnotation(JGlobalMap.class) != null)   xmlClass.global=toXmlGlobal(aClass);  for (  Field field : aClass.getDeclaredFields())   if (field.getAnnotation(JMap.class) != null)   xmlClass.attributes.add(toXmlAttribute(aClass,field));  return xmlClass;}  }
class C{  public boolean sameSuit(Card c){  if (c == null)   return false;  return (suit == c.getSuit());}  }
class C{  protected void test(Sequence sequence){  test(sequence,1);  test(sequence,2);  test(sequence,10);}  }
class C{  private void executeWithoutTransaction(final Executor exec,Command command) throws Exception {  Exception cause=null;  for (int i=0; i < MAXIMUM_NUM_RETRIES; i++) {    try {      exec.executeCommand(command,this);      return;    } catch (    Exception e) {      cause=e;      if (e instanceof RegionDestroyedException || e instanceof RegionNotFoundException || e.getCause() instanceof QueryInvocationTargetException)       Thread.sleep(WAIT_REGION_DSTRYD_MILLIS);    }  }  throw cause;}  }
class C{  public JSONArray put(long value){  this.put(new Long(value));  return this;}  }
class C{  public double calcChiSquare(IntSextad[] sextads){  Set<Sigma> boldSigmaSet=new HashSet<>();  for (  IntSextad sextad : sextads) {    List<Integer> _nodes=sextad.getNodes();    for (int k1=0; k1 < 3; k1++) {      for (int k2=0; k2 < 3; k2++) {        boldSigmaSet.add(new Sigma(_nodes.get(k1),_nodes.get(3 + k2)));      }    }  }  List<Sigma> boldSigma=new ArrayList<>(boldSigmaSet);  TetradMatrix sigma_ss=new TetradMatrix(boldSigma.size(),boldSigma.size());  for (int i=0; i < boldSigma.size(); i++) {    for (int j=i; j < boldSigma.size(); j++) {      Sigma sigmaef=boldSigma.get(i);      Sigma sigmagh=boldSigma.get(j);      int e=sigmaef.getA();      int f=sigmaef.getB();      int g=sigmagh.getA();      int h=sigmagh.getB();      if (cov != null && cov instanceof CorrelationMatrix) {        double rr=0.5 * (r(e,f) * r(g,h)) * (r(e,g) * r(e,g) + r(e,h) * r(e,h) + r(f,g) * r(f,g) + r(f,h) * r(f,h)) + r(e,g) * r(f,h) + r(e,h) * r(f,g) - r(e,f) * (r(f,g) * r(f,h) + r(e,g) * r(e,h)) - r(g,h) * (r(f,g) * r(e,g) + r(f,h) * r(e,h));        double rr2=r(e,f,g,h) + 0.25 * r(e,f) * r(g,h)* (r(e,e,g,g) * r(f,f,g,g) + r(e,e,h,h) + r(f,f,h,h)) - 0.5 * r(e,f) * (r(e,e,g,h) + r(f,f,g,h)) - 0.5 * r(g,h) * (r(e,f,g,g) + r(e,f,h,h));        sigma_ss.set(i,j,rr);        sigma_ss.set(j,i,rr);      } else       if (cov != null && data == null) {        double _ss=r(e,g) * r(f,h) + r(e,h) * r(f,g);        sigma_ss.set(i,j,_ss);        sigma_ss.set(j,i,_ss);      } else {        double _ss=r(e,f,g,h) - r(e,f) * r(g,h);        sigma_ss.set(i,j,_ss);        sigma_ss.set(j,i,_ss);      }    }  }  TetradMatrix del=new TetradMatrix(boldSigma.size(),sextads.length);  for (int j=0; j < sextads.length; j++) {    IntSextad sextad=sextads[j];    for (int i=0; i < boldSigma.size(); i++) {      Sigma sigma=boldSigma.get(i);      double derivative=getDerivative(sextad,sigma);      del.set(i,j,derivative);    }  }  TetradMatrix t=new TetradMatrix(sextads.length,1);  for (int i=0; i < sextads.length; i++) {    IntSextad sextad=sextads[i];    List<Integer> nodes=sextad.getNodes();    TetradMatrix m=new TetradMatrix(3,3);    for (int k1=0; k1 < 3; k1++) {      for (int k2=0; k2 < 3; k2++) {        m.set(k1,k2,r(nodes.get(k1),nodes.get(3 + k2)));      }    }    double det=m.det();    t.set(i,0,det);  }  TetradMatrix sigma_tt=del.transpose().times(sigma_ss).times(del);  double chisq;  try {    chisq=N * t.transpose().times(sigma_tt.inverse()).times(t).get(0,0);  } catch (  SingularMatrixException e) {    throw new RuntimeException("Singularity problem.",e);  }  return chisq;}  }
class C{  private static Expression parse(ExpressionParser parser,String expression){  try {    return parser.parseExpression(expression);  } catch (  ParseException ex) {    int offset=ex.getErrorOffset();    System.out.println(expression);    for (int i=0; i < offset; i++) {      System.out.print(" ");    }    System.out.println("^");    ex.printStackTrace();    fail(ex.getMessage());  }  return null;}  }
class C{  public static String readAsciiLine(InputStream in) throws IOException {  StringBuilder result=new StringBuilder(80);  while (true) {    int c=in.read();    if (c == -1) {      throw new EOFException();    } else     if (c == '\n') {      break;    }    result.append((char)c);  }  int length=result.length();  if (length > 0 && result.charAt(length - 1) == '\r') {    result.setLength(length - 1);  }  return result.toString();}  }
class C{  public TimeInstant addDays(final int hours){  return this.addHours(24 * hours);}  }
class C{  private void execute(HttpServletRequest req,HttpServletResponse resp) throws IOException {  CachingInfo cachingInfo=null;  Object result=null;  Throwable throwable=null;  RpcRequest rpcRequest=null;  try {    HttpActionSupportImpl.setInstance(new HttpActionSupportImpl(rpcCtx,req,resp));    rpcRequest=getRequest(req);    result=execute(req,rpcRequest);    if (result != null && result instanceof Cacheable) {      Cacheable cacheable=(Cacheable)result;      cachingInfo=cacheable.getCachingInfo();      result=cacheable.getValue();    }  } catch (  Throwable th) {    throwable=th;    ensureStreamRead(req.getInputStream());  }  String reqETag=getETag(req);  addFixedHeaders(resp);  resp.setCharacterEncoding("UTF-8");  try {    if (result != null && StreamResult.class.isAssignableFrom(result.getClass())) {      serviceStream(reqETag,req,resp,(StreamResult)result,cachingInfo);    } else     if (result instanceof RpcResponse) {      serviceJsonResponse(reqETag,req,resp,(RpcResponse)result,cachingInfo);    } else {      RpcResponse rpcResp=new RpcResponse();      if (rpcRequest != null) {        rpcResp.setId(rpcRequest.getId());      }      rpcResp.setError(ErrorFactory.getError(throwable));      rpcResp.setResult(result);      serviceJsonResponse(reqETag,req,resp,rpcResp,cachingInfo);    }  }  finally {    HttpActionSupportImpl.clear();    deleteTempUploadDirectory(req);  }}  }
class C{  public Span convert(org.apache.htrace.core.Span hTraceSpan){  Span zipkinSpan=new Span();  String serviceName=hTraceSpan.getTracerId().toLowerCase();  Endpoint ep=new Endpoint(ipv4Address,(short)getPort(serviceName),serviceName);  List<Annotation> annotationList=createZipkinAnnotations(hTraceSpan,ep);  List<BinaryAnnotation> binaryAnnotationList=createZipkinBinaryAnnotations(hTraceSpan,ep);  zipkinSpan.setTrace_id(hTraceSpan.getSpanId().getHigh());  if (hTraceSpan.getParents().length > 0) {    if (hTraceSpan.getParents().length > 1) {      LOG.error("zipkin doesn't support spans with multiple parents.  Omitting " + "other parents for " + hTraceSpan);    }    zipkinSpan.setParent_id(hTraceSpan.getParents()[0].getLow());  }  zipkinSpan.setId(hTraceSpan.getSpanId().getLow());  zipkinSpan.setName(hTraceSpan.getDescription());  zipkinSpan.setAnnotations(annotationList);  zipkinSpan.setBinary_annotations(binaryAnnotationList);  return zipkinSpan;}  }
class C{  private String translateFunctionReturnType(String sourceVendorName,String targetVendorName,String functionReturnType){  if (functionReturnType != null)   functionReturnType=functionReturnType.trim();  return m_interfaces.get(getDBVendorID(targetVendorName)).translateFunctionReturnType(s_dbEngine,sourceVendorName.toUpperCase(),functionReturnType);}  }
class C{  public JSONArray names(){  return nameValuePairs.isEmpty() ? null : new JSONArray(new ArrayList<String>(nameValuePairs.keySet()));}  }
class C{  public static double ulp(double x){  if (Double.isInfinite(x)) {    return Double.POSITIVE_INFINITY;  }  return abs(x - Double.longBitsToDouble(Double.doubleToRawLongBits(x) ^ 1));}  }
class C{  public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {  return decodeToObject(encodedObject,NO_OPTIONS,null);}  }
class C{  public static float sqrt(float fValue){  return (float)Math.sqrt(fValue);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.EXTENDED_STATE_MACHINE___ANONYMOUS_EXTENDED_STATE_MACHINE_11:    getAnonymous_extendedStateMachine_1_1().clear();  return;}super.eUnset(featureID);}  }
class C{  public DrawerBuilder withSystemUIHidden(boolean systemUIHidden){  this.mSystemUIHidden=systemUIHidden;  if (systemUIHidden) {    withFullscreen(systemUIHidden);  }  return this;}  }
class C{  static File createSnapshotFile(String name,File directory,long index,long timestamp){  return new File(directory,String.format("%s-%d-%s.snapshot",Assert.notNull(name,"name"),index,TIMESTAMP_FORMAT.format(new Date(timestamp))));}  }
class C{  public void testDoCheckWithNullText(){  LOGGER.debug("doCheckWithNullText");  elements.add(element);  mockTestSolutionHandler.addTestSolution(TestSolution.NOT_APPLICABLE);  expectLastCall().once();  expect(mockTextElementBuilder.buildTextFromElement(element)).andReturn(null);  TextEmptinessChecker instance=new TextEmptinessChecker(mockTextElementBuilder,TEXT_EMPTY_MSG,TEXT_NOT_EMPTY_MSG);  replay(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler);  instance.doCheck(mockSSPHandler,elements,mockTestSolutionHandler);  verify(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler);}  }
class C{  private DLockToken basicGetToken(Object name){  return (DLockToken)this.tokens.get(name);}  }
class C{  final void push(final Object object){  stack.add(object);}  }
class C{  @Deprecated public StatusBarNotification(String pkg,int id,String tag,int uid,int initialPid,int score,Notification notification){  this(pkg,id,tag,uid,initialPid,score,notification,UserHandle.OWNER);}  }
class C{  public boolean optBoolean(int index){  return this.optBoolean(index,false);}  }
class C{  public javax.naming.Binding next() throws NamingException {  if (more && counter >= _bindingList.value.length) {    getMore();  }  if (more && counter < _bindingList.value.length) {    org.omg.CosNaming.Binding bndg=_bindingList.value[counter];    counter++;    return mapBinding(bndg);  } else {    throw new NoSuchElementException();  }}  }
class C{  public static String encodeWebSafe(byte[] source,boolean doPadding){  return encode(source,0,source.length,WEBSAFE_ALPHABET,doPadding);}  }
class C{  public int readULongAsInt(int index){  long ulong=this.readULong(index);  if ((ulong & 0x80000000) == 0x80000000) {    throw new ArithmeticException("Long value too large to fit into an integer.");  }  return (int)ulong;}  }
class C{  public XPathException(String message,Exception e){  super(message);  this.m_exception=e;}  }
class C{  public void commit() throws IOException {synchronized (DiskLruCache.this) {    if (hasErrors) {      completeEdit(this,false);      removeEntry(entry);    } else {      completeEdit(this,true);    }    committed=true;  }}  }
class C{  public static RopMethod convertToRopMethod(SsaMethod ssaMeth,boolean minimizeRegisters){  return new SsaToRop(ssaMeth,minimizeRegisters).convert();}  }
class C{  public static Name name(JCTree tree){switch (tree.getTag()) {case IDENT:    return ((JCIdent)tree).name;case SELECT:  return ((JCFieldAccess)tree).name;case TYPEAPPLY:return name(((JCTypeApply)tree).clazz);default :return null;}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:17.127 -0500",hash_original_method="CFFAC7119271281C27F3BEDCE8D82CC2",hash_generated_method="BC3FF5FBCBFE43EA50C5393C14A1E8FC") public boolean onKeyUp(int keyCode,KeyEvent event){  if (keyCode == KeyEvent.KEYCODE_BACK && event.isTracking() && !event.isCanceled()) {    onBackPressed();    return true;  }  return false;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypesPackage.TCLASS___IS_ABSTRACT:    return isAbstract();case TypesPackage.TCLASS___GET_SUPER_CLASS:  return getSuperClass();case TypesPackage.TCLASS___GET_SUPER_CLASSIFIER_REFS:return getSuperClassifierRefs();case TypesPackage.TCLASS___GET_IMPLEMENTED_OR_EXTENDED_INTERFACE_REFS:return getImplementedOrExtendedInterfaceRefs();case TypesPackage.TCLASS___IS_POLYFILL:return isPolyfill();case TypesPackage.TCLASS___IS_STATIC_POLYFILL:return isStaticPolyfill();case TypesPackage.TCLASS___IS_FINAL:return isFinal();}return super.eInvoke(operationID,arguments);}  }
class C{  public static String trimAndConvertEmptyToNull(String str){  if (str == null) {    return null;  }  String newStr=str.trim();  if (newStr.length() < 1) {    return null;  }  return newStr;}  }
class C{  public static String serializeSSHKeyFromNistp256(ECPublicKey publicKey){  ByteBuffer buffer=ByteBuffer.allocate(104);  buffer.putInt(NISTP256_KEY_PREFIX.getBytes(Charsets.UTF_8).length);  buffer.put(NISTP256_KEY_PREFIX.getBytes(Charsets.UTF_8));  buffer.putInt(NISTP256_CURVE_NAME.getBytes(Charsets.UTF_8).length);  buffer.put(NISTP256_CURVE_NAME.getBytes(Charsets.UTF_8));  byte[] octet={(byte)0x04};  byte[] x=publicKey.getW().getAffineX().toByteArray();  byte[] y=publicKey.getW().getAffineY().toByteArray();  byte[] x32=ByteUtils.subArray(x,x.length - 32,x.length);  byte[] y32=ByteUtils.subArray(y,y.length - 32,y.length);  byte[] data=ByteUtils.concatenate(octet,ByteUtils.concatenate(x32,y32));  buffer.putInt(data.length);  buffer.put(data);  return Base64.toBase64String(buffer.array());}  }
class C{  static String createUniqueName(String name,List<String> names){  String result=name;  if (name != null && names != null && !names.isEmpty()) {    boolean found=false;    for (    String currentName : names) {      if (name.equals(currentName)) {        found=true;        break;      }    }    if (found) {      result=createUniqueName(name + "1",names);    }  }  return result;}  }
class C{  public static final Date minDate(){  return new Date(minimumSerialNumber());}  }
class C{  private int assignToNearestCluster(Relation<V> relation,double[][] means,double[][] sums,List<ModifiableDBIDs> clusters,WritableIntegerDataStore assignment,double[] sep,WritableDoubleDataStore upper,WritableDoubleDataStore lower){  assert (k == means.length);  int changed=0;  final NumberVectorDistanceFunction<? super V> df=getDistanceFunction();  boolean issquared=(df instanceof SquaredEuclideanDistanceFunction);  for (DBIDIter it=relation.iterDBIDs(); it.valid(); it.advance()) {    final int cur=assignment.intValue(it);    final double z=lower.doubleValue(it);    final double sa=sep[cur];    double u=upper.doubleValue(it);    if (u <= z || u <= sa) {      continue;    }    V fv=relation.get(it);    u=df.distance(fv,DoubleVector.wrap(means[cur]));    u=issquared ? Math.sqrt(u) : u;    upper.putDouble(it,u);    if (u <= z || u <= sa) {      continue;    }    double min1=Double.POSITIVE_INFINITY, min2=Double.POSITIVE_INFINITY;    int minIndex=-1;    for (int i=0; i < k; i++) {      double dist=df.distance(fv,DoubleVector.wrap(means[i]));      if (dist < min1) {        minIndex=i;        min2=min1;        min1=dist;      } else       if (dist < min2) {        min2=dist;      }    }    if (issquared) {      min1=Math.sqrt(min1);      min2=Math.sqrt(min2);    }    if (minIndex != cur) {      assignment.putInt(it,minIndex);      clusters.get(minIndex).add(it);      clusters.get(cur).remove(it);      double[] newmean=sums[minIndex];      double[] oldmean=sums[cur];      for (int d=0; d < fv.getDimensionality(); d++) {        final double v=fv.doubleValue(d);        newmean[d]+=v;        oldmean[d]-=v;      }      ++changed;      upper.putDouble(it,min1);    }    lower.putDouble(it,min2);  }  return changed;}  }
class C{  public boolean isCpuMemoryResourceConfigurationSupported(){  return cpuMemoryResourceConfigurationSupported;}  }
class C{  @Bean public Docket api(){  return new Docket(DocumentationType.SWAGGER_2).select().apis(RequestHandlerSelectors.any()).paths(PathSelectors.any()).build();}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  public static void showError(String title,String msg){  showError(title,msg,null);}  }
class C{  public PutIndexedScriptRequest source(Map source,XContentType contentType) throws ElasticsearchGenerationException {  try {    XContentBuilder builder=XContentFactory.contentBuilder(contentType);    builder.map(source);    return source(builder);  } catch (  IOException e) {    throw new ElasticsearchGenerationException("Failed to generate [" + source + "]",e);  }}  }
class C{  public static void loadTestLibrary(){  try {    File tmpDir=new File(System.getProperty("java.io.tmpdir"));    File dir=File.createTempFile("libjsass-",".d",tmpDir);    dir.delete();    dir.mkdir();    dir.deleteOnExit();    if (System.getProperty("os.name").toLowerCase().startsWith("win")) {      System.load(NativeLoader.saveLibrary(dir,"sass"));    }    System.load(NativeLoader.saveLibrary(dir,"jsass_test"));  } catch (  Exception exception) {    System.err.println(exception.getMessage());    exception.printStackTrace(System.err);    throw new RuntimeException(exception);  }}  }
class C{  public static <T extends DataObject>T findInCollection(Collection<T> col,T obj){  if (col != null && obj != null) {    return findInCollection(col,obj.getId());  }  return null;}  }
class C{  private final void processAck(Message msg,String opName,Connection con) throws Exception {  final int msgType=msg.getMessageType();  if (this.deltaSent && this.region != null) {    this.region.getCachePerfStats().incDeltasSent();  }  if (msgType == MessageType.REPLY) {    return;  } else {    Part part=msg.getPart(0);    if (msgType == MessageType.PUT_DELTA_ERROR) {      if (logger.isDebugEnabled()) {        logger.debug("PutOp: Sending full value as delta failed on server...");      }      AbstractOp op=new PutOpImpl(this.regionName,this.key,this.value,null,this.event,Operation.CREATE,this.requireOldValue,this.expectedOldValue,this.callbackArg,true,this.prSingleHopEnabled);      op.attempt(con);      if (this.region != null) {        this.region.getCachePerfStats().incDeltaFullValuesSent();      }    } else     if (msgType == MessageType.EXCEPTION) {      String s=": While performing a remote " + opName;      throw new ServerOperationException(s,(Throwable)part.getObject());    } else     if (isErrorResponse(msgType)) {      throw new ServerOperationException(part.getString());    } else {      throw new InternalGemFireError("Unexpected message type " + MessageType.getString(msgType));    }  }}  }
class C{  public void assignExample(int clusterIndex,double[] example){  centroids.get(clusterIndex).assignExample(example);}  }
class C{  public View(Composite parent,int style,ViewEditor editor){  this.editor=editor;  glPanel=new GLPanel(parent,changeReceiver,editor.getPartName());  scrollHandler=new ScrollbarHandler(parent,glPanel);  scrollHandler.acquireResources();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void visitLookupSwitchInsn(Label dflt,int[] keys,Label[] labels){  if (mv != null) {    mv.visitLookupSwitchInsn(dflt,keys,labels);  }}  }
class C{  @Override public void dynInit() throws Exception {  KeyNamePair[] processData=getProcess();  for (  KeyNamePair pp : processData)   fieldProcess.appendItem(pp.getName(),pp);  fieldProcess.setSelectedIndex(0);}  }
class C{  public final void clearSelection(){  getSelection().clear();}  }
class C{  public static void main(String[] args){  System.out.print("Enter list1: ");  int[][] list1=getArray();  System.out.print("Enter list2: ");  int[][] list2=getArray();  System.out.println("The two arrays are" + (equals(list1,list2) ? " " : " not ") + "strictly identical");}  }
class C{  static public ReportEngine startFinReport(ProcessInfo pi){  int AD_Client_ID=Env.getAD_Client_ID(Env.getCtx());  String TableName=pi.getAD_Process_ID() == 202 ? "T_Report" : "T_ReportStatement";  MQuery query=MQuery.get(Env.getCtx(),pi.getAD_PInstance_ID(),TableName);  MPrintFormat format=(MPrintFormat)pi.getTransientObject();  if (format == null)   format=(MPrintFormat)pi.getSerializableObject();  if (format == null) {    log.log(Level.SEVERE,"startFinReport - No PrintFormat");    return null;  }  PrintInfo info=new PrintInfo(pi);  ReportEngine re=new ReportEngine(Env.getCtx(),format,query,info);  return re;}  }
class C{  public Attr createAttribute(String name) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  @Deprecated public void putIBinder(String key,IBinder value){  unparcel();  mMap.put(key,value);}  }
class C{  public RequestBuilder withCmdArgs(List<String> cmdArgs){  this.cmdArgs=cmdArgs;  return this;}  }
class C{  public boolean isAvailable(){  return available;}  }
class C{  @Override public String toString(){  return this.toStringBuilder().toString();}  }
class C{  public boolean isIn(float i){  return (i >= this.min) && (i <= this.max);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void updateNodes(PathDataNode[] target,PathDataNode[] source){  for (int i=0; i < source.length; i++) {    target[i].mType=source[i].mType;    for (int j=0; j < source[i].mParams.length; j++) {      target[i].mParams[j]=source[i].mParams[j];    }  }}  }
class C{  private void addCoeff(Nonterminal n,RE re) throws InterruptedException {  getCoeff(n).addAll(re.getAlts());}  }
class C{  public T caseEntryOrExitAction_(EntryOrExitAction_ object){  return null;}  }
class C{  public QueryException(final String message){  super(message);  this.message=message;  this.errorCode=-1;  this.sqlState="HY0000";}  }
class C{  public ExponentialExponential(Type units){  super(units);}  }
class C{  public boolean invalidateIt(){  log.info(toString());  setDocAction(DOCACTION_Prepare);  return true;}  }
class C{  public List<M> resolveAll(String text){  List<M> list=cache.get(text);  if (list != null) {    return list;  }  char[] array=text.toCharArray();  if (array == null) {    return null;  }  return resolveAll(text,array);}  }
class C{  protected MultiScreenAction(SwingSet2 swingset,int screen){  super("MultiScreenAction");  this.screen=screen;}  }
class C{  public StandaloneXMLParser addDelegate(QName elementName,XMLElementReader<List<ModelNode>> parser){  this.recognizedNames.add(elementName);  xmlMapper.registerRootElement(elementName,parser);  return this;}  }
class C{  public StringRequest(int method,String url,Listener<String> listener,ErrorListener errorListener){  super(method,url,errorListener);  mListener=listener;}  }
class C{  public void firePropertyChange(String name,Object oldValue,Object newValue){  beanContextChildSupport.firePropertyChange(name,oldValue,newValue);}  }
class C{  protected void insert(Object[] row,boolean commitIndex) throws SQLException {  String query=getQuery(row);  Document doc=new Document();  doc.add(new Field(LUCENE_FIELD_QUERY,query,Field.Store.YES,Field.Index.NOT_ANALYZED));  long time=System.currentTimeMillis();  doc.add(new Field(LUCENE_FIELD_MODIFIED,DateTools.timeToString(time,DateTools.Resolution.SECOND),Field.Store.YES,Field.Index.NOT_ANALYZED));  StatementBuilder buff=new StatementBuilder();  for (  int index : indexColumns) {    String columnName=columns[index];    String data=asString(row[index],columnTypes[index]);    if (columnName.startsWith(LUCENE_FIELD_COLUMN_PREFIX)) {      columnName=LUCENE_FIELD_COLUMN_PREFIX + columnName;    }    doc.add(new Field(columnName,data,Field.Store.NO,Field.Index.ANALYZED));    buff.appendExceptFirst(" ");    buff.append(data);  }  Field.Store storeText=STORE_DOCUMENT_TEXT_IN_INDEX ? Field.Store.YES : Field.Store.NO;  doc.add(new Field(LUCENE_FIELD_DATA,buff.toString(),storeText,Field.Index.ANALYZED));  try {    indexAccess.writer.addDocument(doc);    if (commitIndex) {      indexAccess.writer.commit();      indexAccess.searcher.close();      indexAccess.reader.close();      IndexReader reader=indexAccess.writer.getReader();      indexAccess.reader=reader;      indexAccess.searcher=new IndexSearcher(reader);    }  } catch (  IOException e) {    throw convertException(e);  }}  }
class C{  public synchronized void removeUpdate(DocumentEvent e){  int len=e.getLength();  int off=e.getOffset();  if (outputMark > off) {    if (outputMark >= off + len) {      outputMark-=len;    } else {      outputMark=off;    }  }}  }
class C{  public WebAttachmentEntry uploadWebAttachment(String contentUrl,FileCabinetPageEntry filecabinet,String title,String description) throws MalformedURLException, IOException, ServiceException {  MediaContent content=new MediaContent();  content.setUri(contentUrl);  WebAttachmentEntry webAttachment=new WebAttachmentEntry();  webAttachment.setTitle(new PlainTextConstruct(title));  webAttachment.setSummary(new PlainTextConstruct(description));  webAttachment.setContent(content);  webAttachment.addLink(SitesLink.Rel.PARENT,Link.Type.ATOM,filecabinet.getSelfLink().getHref());  return service.insert(new URL(getContentFeedUrl()),webAttachment);}  }
class C{  private void showScanningProgressBar(){  showTopDividerWithProgressBar();  mProgressBar.setIndeterminate(true);}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {  QueryCommand cmd=QueryCommand.UNKNOWN;  String param=request.getParameter("param");  String value=request.getParameter("value");  PrintWriter out=response.getWriter();  String cmdStr=request.getParameter("cmd");  if (cmdStr != null) {    cmd=QueryCommand.valueOf(cmdStr);  }  HttpSession session;switch (cmd) {case SET:    session=request.getSession();  session.setAttribute(param,value);break;case GET:session=request.getSession();String val=(String)session.getAttribute(param);if (val != null) {out.write(val);}break;case INVALIDATE:session=request.getSession();session.invalidate();break;case CALLBACK:Callback c=(Callback)context.getAttribute("callback");c.call(request,response);break;}}  }
class C{  public int compareDates(org.trade.core.valuetype.Date otherDate){  return compareDates(otherDate.getZonedDateTime());}  }
class C{  static public void validate(File file){  if (System.getProperty("jmri.skipschematests","false").equals("true"))   return;  boolean original=XmlFile.getVerify();  try {    XmlFile.setVerify(true);    XmlFile xf=new XmlFile(){    };    xf.rootFromFile(file);  } catch (  Exception ex) {    XmlFile.setVerify(original);    Assert.fail("failed to validate \"" + file.getPath() + "\" due to: "+ ex);    return;  } finally {    XmlFile.setVerify(original);  }}  }
class C{  public static void showTextNodeCommentDialog(final JFrame parent,final CTextNode node){  final DialogTextNodeComment dlg=new DialogTextNodeComment(parent,node);  GuiHelper.centerChildToParent(parent,dlg,true);  dlg.setVisible(true);}  }
class C{  public QueryExecutionCanceledException(Throwable cause){  super(cause);}  }
class C{  private byte[] decrypt(byte[] data,NTRUEncryptionPrivateKeyParameters privKey) throws InvalidCipherTextException {  Polynomial priv_t=privKey.t;  IntegerPolynomial priv_fp=privKey.fp;  IntegerPolynomial pub=privKey.h;  int N=params.N;  int q=params.q;  int db=params.db;  int maxMsgLenBytes=params.maxMsgLenBytes;  int dm0=params.dm0;  int pkLen=params.pkLen;  int minCallsMask=params.minCallsMask;  boolean hashSeed=params.hashSeed;  byte[] oid=params.oid;  if (maxMsgLenBytes > 255) {    throw new DataLengthException("maxMsgLenBytes values bigger than 255 are not supported");  }  int bLen=db / 8;  IntegerPolynomial e=IntegerPolynomial.fromBinary(data,N,q);  IntegerPolynomial ci=decrypt(e,priv_t,priv_fp);  if (ci.count(-1) < dm0) {    throw new InvalidCipherTextException("Less than dm0 coefficients equal -1");  }  if (ci.count(0) < dm0) {    throw new InvalidCipherTextException("Less than dm0 coefficients equal 0");  }  if (ci.count(1) < dm0) {    throw new InvalidCipherTextException("Less than dm0 coefficients equal 1");  }  IntegerPolynomial cR=(IntegerPolynomial)e.clone();  cR.sub(ci);  cR.modPositive(q);  IntegerPolynomial cR4=(IntegerPolynomial)cR.clone();  cR4.modPositive(4);  byte[] coR4=cR4.toBinary(4);  IntegerPolynomial mask=MGF(coR4,N,minCallsMask,hashSeed);  IntegerPolynomial cMTrin=ci;  cMTrin.sub(mask);  cMTrin.mod3();  byte[] cM=cMTrin.toBinary3Sves();  byte[] cb=new byte[bLen];  System.arraycopy(cM,0,cb,0,bLen);  int cl=cM[bLen] & 0xFF;  if (cl > maxMsgLenBytes) {    throw new InvalidCipherTextException("Message too long: " + cl + ">"+ maxMsgLenBytes);  }  byte[] cm=new byte[cl];  System.arraycopy(cM,bLen + 1,cm,0,cl);  byte[] p0=new byte[cM.length - (bLen + 1 + cl)];  System.arraycopy(cM,bLen + 1 + cl,p0,0,p0.length);  if (!Arrays.constantTimeAreEqual(p0,new byte[p0.length])) {    throw new InvalidCipherTextException("The message is not followed by zeroes");  }  byte[] bh=pub.toBinary(q);  byte[] hTrunc=copyOf(bh,pkLen / 8);  byte[] sData=buildSData(oid,cm,cl,cb,hTrunc);  Polynomial cr=generateBlindingPoly(sData,cm);  IntegerPolynomial cRPrime=cr.mult(pub);  cRPrime.modPositive(q);  if (!cRPrime.equals(cR)) {    throw new InvalidCipherTextException("Invalid message encoding");  }  return cm;}  }
class C{  public static boolean isDirectory(String fileName){  return FilePath.get(fileName).isDirectory();}  }
class C{  public void fire(E event){  Objects.requireNonNull(event,"Null event");  HandlerList<E,L> handler=handlers.get(event.getClass());  if (handler == null)   return;  handler.fire(event);}  }
class C{  public Storage(SharedPreferences preferences,Gson gson){  super(preferences,gson);}  }
class C{  public FindServersResponse FindServers(FindServersRequest req) throws ServiceFaultException, ServiceResultException {  return (FindServersResponse)channel.serviceRequest(req);}  }
class C{  private DiscoveryInformation verifyDiscovered2(AuthSuccess authResp,DiscoveryInformation discovered) throws DiscoveryException {  if (authResp == null || !authResp.isVersion2() || authResp.getIdentity() == null || authResp.getClaimed() == null) {    if (DEBUG)     _log.debug("Discovered information doesn't match " + "auth response / version");    return null;  }  String assertId=authResp.getIdentity();  Identifier respClaimed=_discovery.parseIdentifier(authResp.getClaimed(),true);  String respEndpoint=authResp.getOpEndpoint();  if (DEBUG)   _log.debug("Verifying discovered information for OpenID2 assertion " + "about ClaimedID: " + respClaimed.getIdentifier());  if (discovered != null && discovered.hasClaimedIdentifier() && discovered.getClaimedIdentifier().equals(respClaimed)) {    String opSpecific=discovered.hasDelegateIdentifier() ? discovered.getDelegateIdentifier() : discovered.getClaimedIdentifier().getIdentifier();    if (opSpecific.equals(assertId) && discovered.isVersion2() && discovered.getOPEndpoint().toString().equals(respEndpoint)) {      if (DEBUG)       _log.debug("ClaimedID in the assertion was previously discovered: " + respClaimed);      return discovered;    }  }  DiscoveryInformation firstServiceMatch=null;  if (DEBUG)   _log.debug("Performing discovery on the ClaimedID in the assertion: " + respClaimed);  List discoveries=_discovery.discover(respClaimed);  if (DEBUG)   _log.debug("Looking for a service element to match " + "the ClaimedID and OP endpoint in the assertion...");  Iterator iter=discoveries.iterator();  while (iter.hasNext()) {    DiscoveryInformation service=(DiscoveryInformation)iter.next();    if (DiscoveryInformation.OPENID2_OP.equals(service.getVersion()))     continue;    String opSpecific=service.hasDelegateIdentifier() ? service.getDelegateIdentifier() : service.getClaimedIdentifier().getIdentifier();    if (!opSpecific.equals(assertId) || !service.isVersion2() || !service.getOPEndpoint().toString().equals(respEndpoint))     continue;    if (firstServiceMatch == null) {      if (DEBUG)       _log.debug("Found matching service: " + service);      firstServiceMatch=service;    }    Association assoc=_associations.load(service.getOPEndpoint().toString(),authResp.getHandle());    if (assoc != null) {      if (DEBUG)       _log.debug("Found existing association, " + "not looking for another service endpoint.");      return service;    }  }  if (firstServiceMatch == null)   _log.error("No service element found to match " + "the ClaimedID / OP-endpoint in the assertion.");  return firstServiceMatch;}  }
class C{  public int countTokens(){  int count=0;  int currpos=currentPosition;  while (currpos < maxPosition) {    int start=currpos;    while ((currpos < maxPosition) && Character.isLetterOrDigit(str.charAt(currpos))) {      currpos++;    }    if ((start == currpos) && (Character.isLetterOrDigit(str.charAt(currpos)) == false)) {      currpos++;    }    count++;  }  return count;}  }
class C{  public ProxyClassGenerator(Elements elementUtils,String qualifiedClassName){  this.qualifiedClassName=qualifiedClassName;  this.elementUtils=elementUtils;  TypeElement classElement=this.elementUtils.getTypeElement(qualifiedClassName);  this.simpleClassName=classElement.getSimpleName().toString();  this.generatedClassName=this.simpleClassName + CLASS_SUFFIX;  PackageElement pkg=this.elementUtils.getPackageOf(classElement);  this.packageName=pkg.isUnnamed() ? null : pkg.getQualifiedName().toString();}  }
class C{  @Override protected void onDestroy(){  super.onDestroy();  Log.d(TAG,"onDestroy() - the activity is about to be destroyed");}  }
class C{  public static Appendable withFormatter(Appendable self,@ClosureParams(value=SimpleType.class,options="java.util.Formatter") Closure closure){  Formatter formatter=new Formatter(self);  callWithFormatter(closure,formatter);  return self;}  }
class C{  public String invertSelectionTipText(){  return "Set attribute selection mode. If false, only selected" + " (numeric) attributes in the range will be 'nominalized'; if" + " true, only non-selected attributes will be 'nominalized'.";}  }
class C{  public GridCacheQueryRequest(int cacheId,long id,boolean fields,AffinityTopologyVersion topVer,boolean addDepInfo){  this.cacheId=cacheId;  this.id=id;  this.fields=fields;  this.topVer=topVer;  this.addDepInfo=addDepInfo;  cancel=true;}  }
class C{  @Override public boolean tryCaptureView(View child,int pointerId){  return child.equals(mAudioView.getmContainer());}  }
class C{  public static final boolean decRefCount(AbstractRegionEntry re){  TXManagerImpl mgr=currentInstance;  if (mgr != null) {    return mgr.refCountMap.removeConditionally(re,decCallback,null,null) != null;  } else {    return true;  }}  }
class C{  public int estimateSize(Object message){  if (message == null) {    return 8;  }  int answer=8 + estimateSize(message.getClass(),null);  if (message instanceof IoBuffer) {    answer+=((IoBuffer)message).remaining();  } else   if (message instanceof WriteRequest) {    answer+=estimateSize(((WriteRequest)message).getMessage());  } else   if (message instanceof CharSequence) {    answer+=((CharSequence)message).length() << 1;  } else   if (message instanceof Iterable) {    for (    Object m : (Iterable<?>)message) {      answer+=estimateSize(m);    }  }  return align(answer);}  }
class C{  public void testPrintExtensions() throws Exception {  String javaText=TextFormat.printToString(TestUtil.getAllExtensionsSet());  javaText=javaText.replace(".0\n","\n");  assertEquals(allExtensionsSetText,javaText);}  }
class C{  public static org.oscm.internal.types.exception.PSPCommunicationException convertToUp(PSPCommunicationException e){  return convertExceptionToUp(e,org.oscm.internal.types.exception.PSPCommunicationException.class);}  }
class C{  public void enter(){  cancel();  final int radiusDuration=(int)(1000 * Math.sqrt(mOuterRadius / WAVE_TOUCH_DOWN_ACCELERATION * mDensity) + 0.5);  final ObjectAnimator radius=ObjectAnimator.ofFloat(this,"radiusGravity",1);  radius.setAutoCancel(true);  radius.setDuration(radiusDuration);  radius.setInterpolator(LINEAR_INTERPOLATOR);  radius.setStartDelay(RIPPLE_ENTER_DELAY);  final ObjectAnimator cX=ObjectAnimator.ofFloat(this,"xGravity",1);  cX.setAutoCancel(true);  cX.setDuration(radiusDuration);  cX.setInterpolator(LINEAR_INTERPOLATOR);  cX.setStartDelay(RIPPLE_ENTER_DELAY);  final ObjectAnimator cY=ObjectAnimator.ofFloat(this,"yGravity",1);  cY.setAutoCancel(true);  cY.setDuration(radiusDuration);  cY.setInterpolator(LINEAR_INTERPOLATOR);  cY.setStartDelay(RIPPLE_ENTER_DELAY);  mAnimRadius=radius;  mAnimX=cX;  mAnimY=cY;  radius.start();  cX.start();  cY.start();}  }
class C{  private boolean isSystemApp(String packageName){  try {    PackageInfo packageInfo=mPackageManager.getPackageInfo(packageName,PackageManager.GET_ACTIVITIES);    ApplicationInfo applicationInfo=packageInfo.applicationInfo;    if (applicationInfo == null)     return false;    return ((applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0);  } catch (  PackageManager.NameNotFoundException e) {    e.printStackTrace();    return false;  }}  }
class C{  @Override public int hashCode(){  int hash=7;  hash=97 * hash + (this.name != null ? this.name.hashCode() : 0);  hash=97 * hash + (this.value != null ? this.value.hashCode() : 0);  hash=97 * hash + this.version;  hash=97 * hash + (this.path != null ? this.path.hashCode() : 0);  hash=97 * hash + (this.domain != null ? this.domain.hashCode() : 0);  return hash;}  }
class C{  private static void removeAllView(final BreakpointManager manager,final INaviView view){  final Set<BreakpointAddress> addresses=new HashSet<BreakpointAddress>();  for (int i=0; i < manager.getNumberOfBreakpoints(BreakpointType.REGULAR); i++) {    final BreakpointAddress address=manager.getBreakpoint(BreakpointType.REGULAR,i).getAddress();    if (CViewHelpers.containsAddress(view,address.getAddress())) {      addresses.add(address);    }  }  CGraphDebugger.removeBreakpoints(addresses,manager);}  }
class C{  private int[] findNearestArea(int cellX,int cellY,int spanX,int spanY,int[] direction,boolean[][] occupied,boolean blockOccupied[][],int[] result){  final int[] bestXY=result != null ? result : new int[2];  float bestDistance=Float.MAX_VALUE;  int bestDirectionScore=Integer.MIN_VALUE;  final int countX=mCountX;  final int countY=mCountY;  for (int y=0; y < countY - (spanY - 1); y++) {    inner:     for (int x=0; x < countX - (spanX - 1); x++) {      for (int i=0; i < spanX; i++) {        for (int j=0; j < spanY; j++) {          if (occupied[x + i][y + j] && (blockOccupied == null || blockOccupied[i][j])) {            continue inner;          }        }      }      float distance=(float)Math.sqrt((x - cellX) * (x - cellX) + (y - cellY) * (y - cellY));      int[] curDirection=mTmpPoint;      computeDirectionVector(x - cellX,y - cellY,curDirection);      int curDirectionScore=direction[0] * curDirection[0] + direction[1] * curDirection[1];      boolean exactDirectionOnly=false;      boolean directionMatches=direction[0] == curDirection[0] && direction[0] == curDirection[0];      if ((directionMatches || !exactDirectionOnly) && Float.compare(distance,bestDistance) < 0 || (Float.compare(distance,bestDistance) == 0 && curDirectionScore > bestDirectionScore)) {        bestDistance=distance;        bestDirectionScore=curDirectionScore;        bestXY[0]=x;        bestXY[1]=y;      }    }  }  if (bestDistance == Float.MAX_VALUE) {    bestXY[0]=-1;    bestXY[1]=-1;  }  return bestXY;}  }
class C{  private int readNodeAddress(){  int addr=-1;  try {    addr=Integer.parseInt(nodeAddrField.getText());  } catch (  Exception e) {    statusText1.setText(rb.getString("Error5"));    statusText1.setVisible(true);    errorInStatus1=true;    resetNotes2();    return -1;  }  if ((addr < 0) || (addr > 255)) {    statusText1.setText(rb.getString("Error6"));    statusText1.setVisible(true);    errorInStatus1=true;    resetNotes2();    return -1;  }  return (addr);}  }
class C{  public static boolean hasIdPkixOcspNoCheckExtension(CertificateToken token){  final byte[] extensionValue=token.getCertificate().getExtensionValue(OCSPObjectIdentifiers.id_pkix_ocsp_nocheck.getId());  if (extensionValue != null) {    try {      final ASN1Primitive derObject=toASN1Primitive(extensionValue);      if (derObject instanceof DEROctetString) {        return isDEROctetStringNull((DEROctetString)derObject);      }    } catch (    Exception e) {      LOG.debug("Exception when processing 'id_pkix_ocsp_no_check'",e);    }  }  return false;}  }
class C{  public IntBuffer(IntBufferConsumer target,int capacity){  this.target=target;  this.capacity=capacity;  this.elements=new int[capacity];  this.list=new IntArrayList(elements);  this.size=0;}  }
class C{  public static ICommandService lookupCommandService(){  return (ICommandService)VeriniceContext.get(VeriniceContext.COMMAND_SERVICE);}  }
class C{  public static IXMLParser createDefaultXMLParser() throws ClassNotFoundException, InstantiationException, IllegalAccessException {  String className=XMLParserFactory.DEFAULT_CLASS;  try {    className=System.getProperty(XMLParserFactory.CLASS_KEY,XMLParserFactory.DEFAULT_CLASS);  } catch (  AccessControlException e) {  }  return XMLParserFactory.createXMLParser(className,new StdXMLBuilder());}  }
class C{  void scroll(int x,int y,int flag,int type){  checkSecurity();  ScrollPane sp=(ScrollPane)target;  Component c=getScrollChild();  if (c == null) {    return;  }  int sx, sy;  Color colors[]=getGUIcolors();  if (sp.getScrollbarDisplayPolicy() == ScrollPane.SCROLLBARS_NEVER) {    sx=-x;    sy=-y;  } else {    Point p=c.location();    sx=p.x;    sy=p.y;    if ((flag & HORIZONTAL) != 0) {      hsb.setValue(Math.min(x,hsb.getMaximum() - hsb.getVisibleAmount()));      ScrollPaneAdjustable hadj=(ScrollPaneAdjustable)sp.getHAdjustable();      setAdjustableValue(hadj,hsb.getValue(),type);      sx=-(hsb.getValue());      Graphics g=getGraphics();      if (g != null) {        try {          paintHorScrollbar(g,colors,true);        }  finally {          g.dispose();        }      }    }    if ((flag & VERTICAL) != 0) {      vsb.setValue(Math.min(y,vsb.getMaximum() - vsb.getVisibleAmount()));      ScrollPaneAdjustable vadj=(ScrollPaneAdjustable)sp.getVAdjustable();      setAdjustableValue(vadj,vsb.getValue(),type);      sy=-(vsb.getValue());      Graphics g=getGraphics();      if (g != null) {        try {          paintVerScrollbar(g,colors,true);        }  finally {          g.dispose();        }      }    }  }  c.move(sx,sy);}  }
class C{  public void writeln(String data){  write(data.getBytes());  write(CRLF);}  }
class C{  void stop(){  try {    send("quit");  } catch (  NodeJsDebuggerException e) {    LOG.warn(e.getMessage());  }  executor.shutdown();  try {    if (!executor.awaitTermination(10,TimeUnit.SECONDS)) {      executor.shutdownNow();      if (!executor.awaitTermination(10,TimeUnit.SECONDS)) {        LOG.warn("Unable to terminate main pool");      }    }  } catch (  InterruptedException e) {    LOG.warn(e.getMessage());  }  process.destroy();  try {    if (!process.waitFor(10,TimeUnit.SECONDS)) {      LOG.error("Unable to terminate NodeJs");    }  } catch (  InterruptedException e) {    LOG.warn(e.getMessage());  }  try {    processWriter.close();  } catch (  IOException e) {    LOG.warn("Failed to close NodeJs process output stream",e);  }  observers.clear();}  }
class C{  private void loadServerVariables() throws SQLException {  if (getCacheServerConfiguration()) {    createConfigCacheIfNeeded();    Map<String,String> cachedVariableMap=this.serverConfigCache.get(getURL());    if (cachedVariableMap != null) {      String cachedServerVersion=cachedVariableMap.get(SERVER_VERSION_STRING_VAR_NAME);      if (cachedServerVersion != null && this.io.getServerVersion() != null && cachedServerVersion.equals(this.io.getServerVersion())) {        this.serverVariables=cachedVariableMap;        return;      }      this.serverConfigCache.invalidate(getURL());    }  }  java.sql.Statement stmt=null;  java.sql.ResultSet results=null;  try {    stmt=getMetadataSafeStatement();    String version=this.dbmd.getDriverVersion();    if (version != null && version.indexOf('*') != -1) {      StringBuilder buf=new StringBuilder(version.length() + 10);      for (int i=0; i < version.length(); i++) {        char c=version.charAt(i);        if (c == '*') {          buf.append("[star]");        } else {          buf.append(c);        }      }      version=buf.toString();    }    String versionComment=(this.getParanoid() || version == null) ? "" : "/* " + version + " */";    this.serverVariables=new HashMap<String,String>();    try {      if (versionMeetsMinimum(5,1,0)) {        StringBuilder queryBuf=new StringBuilder(versionComment).append("SELECT");        queryBuf.append("  @@session.auto_increment_increment AS auto_increment_increment");        queryBuf.append(", @@character_set_client AS character_set_client");        queryBuf.append(", @@character_set_connection AS character_set_connection");        queryBuf.append(", @@character_set_results AS character_set_results");        queryBuf.append(", @@character_set_server AS character_set_server");        queryBuf.append(", @@init_connect AS init_connect");        queryBuf.append(", @@interactive_timeout AS interactive_timeout");        if (!versionMeetsMinimum(5,5,0)) {          queryBuf.append(", @@language AS language");        }        queryBuf.append(", @@license AS license");        queryBuf.append(", @@lower_case_table_names AS lower_case_table_names");        queryBuf.append(", @@max_allowed_packet AS max_allowed_packet");        queryBuf.append(", @@net_buffer_length AS net_buffer_length");        queryBuf.append(", @@net_write_timeout AS net_write_timeout");        queryBuf.append(", @@query_cache_size AS query_cache_size");        queryBuf.append(", @@query_cache_type AS query_cache_type");        queryBuf.append(", @@sql_mode AS sql_mode");        queryBuf.append(", @@system_time_zone AS system_time_zone");        queryBuf.append(", @@time_zone AS time_zone");        queryBuf.append(", @@tx_isolation AS tx_isolation");        queryBuf.append(", @@wait_timeout AS wait_timeout");        results=stmt.executeQuery(queryBuf.toString());        if (results.next()) {          ResultSetMetaData rsmd=results.getMetaData();          for (int i=1; i <= rsmd.getColumnCount(); i++) {            this.serverVariables.put(rsmd.getColumnLabel(i),results.getString(i));          }        }      } else {        results=stmt.executeQuery(versionComment + "SHOW VARIABLES");        while (results.next()) {          this.serverVariables.put(results.getString(1),results.getString(2));        }      }      results.close();      results=null;    } catch (    SQLException ex) {      if (ex.getErrorCode() != MysqlErrorNumbers.ER_MUST_CHANGE_PASSWORD || getDisconnectOnExpiredPasswords()) {        throw ex;      }    }    if (getCacheServerConfiguration()) {      this.serverVariables.put(SERVER_VERSION_STRING_VAR_NAME,this.io.getServerVersion());      this.serverConfigCache.put(getURL(),this.serverVariables);    }  } catch (  SQLException e) {    throw e;  } finally {    if (results != null) {      try {        results.close();      } catch (      SQLException sqlE) {      }    }    if (stmt != null) {      try {        stmt.close();      } catch (      SQLException sqlE) {      }    }  }}  }
class C{  private void drawVerticalScale(final boolean left,final int scale,final int pixelperscale,final int offset,final Long colorNaming,final Long colorScale,final String name){  assert pixelperscale > 0;  assert scale > 0;  if (pixelperscale <= 0)   return;  final int x=(left) ? this.leftborder : this.width - this.rightborder;  int y=this.height - this.bottomborder;  int s=offset;  String s1;  int s1max=0;  while (y > this.topborder) {    if ((colorScale != null) && (y > this.topborder) && (y < (this.height - this.bottomborder))) {      setColor(colorScale);      line(this.leftborder,y,this.width - this.rightborder,y,100);    }    setColor(colorNaming);    line(x - 3,y,x + 3,y,100);    s1=(s >= 1000000 && s % 1000000 == 0) ? Integer.toString(s / 1000000) + "M" : (s >= 1000 && s % 1000 == 0) ? Integer.toString(s / 1000) + "K" : Integer.toString(s);    if (s1.length() > s1max)     s1max=s1.length();    PrintTool.print(this,(left) ? this.leftborder - 4 : this.width - this.rightborder + 4,y,0,s1,(left) ? 1 : -1,80);    y-=pixelperscale;    s+=scale;  }  setColor(colorNaming);  PrintTool.print(this,(left) ? Math.max(6,x - s1max * 6 - 6) : x + s1max * 6 + 9,this.height - this.bottomborder,90,name,-1,80);  line(x,this.topborder - 4,x,this.height - this.bottomborder + 4,100);}  }
class C{  public ITurnOrdered nextDropshipElement(){  return this.getTurnDSEnum().nextElement();}  }
class C{  private int textLength(Node node){  int length=node.getTextContent().length();  node=node.getNextSibling();  while (node != null && (node.getNodeType() == TEXT_NODE || node.getNodeType() == CDATA_SECTION_NODE)) {    length+=node.getTextContent().length();    if (node.getNodeType() == CDATA_SECTION_NODE) {      length+=12;    }    node=node.getNextSibling();  }  return length;}  }
class C{  public void startEntity(String name) throws SAXException {  m_handler.startEntity(name);}  }
class C{  public String readLine() throws IOException {  if (_acceptable) {    throw new IOException("You must call the accept() method of the DccChat request before you can use it.");  }  return _reader.readLine();}  }
class C{  @Override public void onDragFloatView(View floatView,Point position,Point touch){}  }
class C{  public void open(){  this.database=openHelper.getWritableDatabase();}  }
class C{  public static JPanel columns(JComponent... components){  final JPanel out=new JPanel();  out.setLayout(new GridLayout(1,components.length));  for (  JComponent component : components) {    out.add(component);  }  return out;}  }
class C{  protected static int[] assignClusterDesignations(int[] designations,int clusters,int[] merges){  int curCluster=0;  Arrays.fill(designations,-1);  for (int i=0; i < merges.length; i++) {    if (designations[merges[i]] == -1) {      if (curCluster < clusters)       designations[merges[i]]=curCluster++; else       designations[merges[i]]=designations[merges[i - 1]];    }  }  return designations;}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  @Override public Type BOOLEAN(){  return booleanType;}  }
class C{  public void fireResultRemoved(Result r,Result parent){  for (int i=resultListenerList.size(); --i >= 0; ) {    resultListenerList.get(i).resultRemoved(r,parent);  }}  }
class C{  public EdgewiseComparisonEditor(EdgewiseComparisonModel comparison){  this.comparison=comparison;  setup();}  }
class C{  private static Uri uriWithAddedParameters(Context context,Uri baseUri){  Uri.Builder builder=baseUri.buildUpon();  builder.appendQueryParameter(PARAM_LANGUAGE_CODE,Locale.getDefault().toString());  if (sCachedVersionCode == null) {    try {      PackageInfo info=context.getPackageManager().getPackageInfo(context.getPackageName(),0);      sCachedVersionCode=Integer.toString(info.versionCode);      builder.appendQueryParameter(PARAM_VERSION,sCachedVersionCode);    } catch (    NameNotFoundException e) {      Log.wtf(TAG,"Invalid package name for context",e);    }  } else {    builder.appendQueryParameter(PARAM_VERSION,sCachedVersionCode);  }  return builder.build();}  }
class C{  public static void writeUnpaddedInteger(Writer out,int value) throws IOException {  if (value < 0) {    out.write('-');    if (value != Integer.MIN_VALUE) {      value=-value;    } else {      out.write("" + -(long)Integer.MIN_VALUE);      return;    }  }  if (value < 10) {    out.write(value + '0');  } else   if (value < 100) {    int d=((value + 1) * 13421772) >> 27;    out.write(d + '0');    out.write(value - (d << 3) - (d << 1) + '0');  } else {    out.write(Integer.toString(value));  }}  }
class C{  @Deprecated public static Boolean Boolean(boolean b){  return b ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public static synchronized ModbusSlave createUDPSlave(int port) throws ModbusException {  String key=ModbusSlaveType.UDP.getKey(port);  if (slaves.containsKey(key)) {    return slaves.get(key);  } else {    ModbusSlave slave=new ModbusSlave(port);    slaves.put(key,slave);    return slave;  }}  }
class C{  public PubsubFuture<Subscription> createSubscription(final String project,final String subscriptionName,final String topic){  return createSubscription(canonicalSubscription(project,subscriptionName),canonicalTopic(project,topic));}  }
class C{  public void dispose(){  m_debugPerspectiveModel.removeListener(m_debugListener);  synchronizeDebugger(m_debugPerspectiveModel.getCurrentSelectedDebugger(),null);}  }
class C{  public static void isEmpty(String str,String message,Object... params) throws AssertException {  if (CommonUtil.isNotEmpty(str)) {    throw new AssertException(ErrorCodeDef.NOT_NULL_20005,message,params);  }}  }
class C{  public Bitmap syncLoadImage(String uri,ImageLoadOption imageLoadOption){  return mImageLoader.syncLoad(uri,imageLoadOption);}  }
class C{  public String executeRemote(String cmd){  log.config(cmd);  return "Remote:\n";}  }
class C{  public ProgressSource(URL url,String method){  this(url,method,-1);}  }
class C{  public Annotation(String type,boolean isPersistent,String text,int layer,ImageResource image,SVGResource imageSVG){  this.type=type;  this.isPersistent=isPersistent;  this.text=text;  this.layer=layer;  this.image=image;  this.imageSVG=imageSVG;}  }
class C{  @Override public void subs(int size,Register dst,Register src,int immediate){  if (immediate < 0) {    adds(size,dst,src,-immediate);  } else   if (!dst.equals(src) || immediate != 0) {    super.sub(size,dst,src,immediate);  }}  }
class C{  protected void onCollisionEnd(Entity a,Entity b){}  }
class C{  public static void edit(String id){  VirtualArrayRestRep virtualArray=getVirtualArray(id);  VirtualArrayForm form=new VirtualArrayForm();  form.load(virtualArray);  edit(form);}  }
class C{  public static String toUrl(String givenUrl){  String finalUrl=givenUrl;  String protocol="http://";  if ("".equals(givenUrl)) {    return givenUrl;  }  if (!finalUrl.endsWith("/")) {    finalUrl+='/';  }  if (!(finalUrl.startsWith("http://") || finalUrl.startsWith("https://"))) {    finalUrl=protocol + finalUrl;  }  return finalUrl;}  }
class C{  public String lowercaseTokensTipText(){  return "Whether to convert all tokens to lowercase";}  }
class C{  private void configureClient(){  Protocol https=new Protocol("https",new DummySSLProtocolSocketFactory(),443);  Protocol.registerProtocol("https",https);  HttpConnectionManagerParams params=connectionManager.getParams();  params.setConnectionTimeout(timeout);  params.setSoTimeout(timeout);  params.setSendBufferSize(BUFFER_SIZE);  params.setReceiveBufferSize(BUFFER_SIZE);  params.setMaxTotalConnections(maxThreadsTotal);  client.getParams().setConnectionManagerTimeout(timeout);  HostConfiguration hostConf=client.getHostConfiguration();  ArrayList headers=new ArrayList();  headers.add(new Header("User-Agent",userAgent));  headers.add(new Header("Accept-Language",acceptLanguage));  headers.add(new Header("Accept-Charset","utf-8,ISO-8859-1;q=0.7,*;q=0.7"));  headers.add(new Header("Accept","text/html,application/xml;q=0.9,application/xhtml+xml,text/xml;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5"));  headers.add(new Header("Accept-Encoding","x-gzip, gzip, deflate"));  hostConf.getParams().setParameter("http.default-headers",headers);  if (useProxy) {    hostConf.setProxy(proxyHost,proxyPort);    if (proxyUsername.length() > 0) {      AuthScope proxyAuthScope=getAuthScope(this.proxyHost,this.proxyPort,this.proxyRealm);      NTCredentials proxyCredentials=new NTCredentials(this.proxyUsername,this.proxyPassword,this.agentHost,this.proxyRealm);      client.getState().setProxyCredentials(proxyAuthScope,proxyCredentials);    }  }}  }
class C{  public boolean isFailed(){  return failure != null;}  }
class C{  @Override public Map<String,String> hgetAll(final String key){  checkIsInMultiOrPipeline();  client.hgetAll(key);  return BuilderFactory.STRING_MAP.build(client.getBinaryMultiBulkReply());}  }
class C{  public synchronized void removePropertyChangeListener(PropertyChangeListener listener){  if (changeSupport == null) {    return;  }  changeSupport.removePropertyChangeListener(listener);}  }
class C{  public void start(){  if (mRunning.compareAndSet(false,true)) {    if (mSource != null) {      for (      Module module : mModules) {        module.reset();      }switch (mSource.getSampleType()) {case COMPLEX:        ((ComplexSource)mSource).setListener(mComplexBufferBroadcaster);      break;case REAL:    ((RealSource)mSource).setListener(mFilteredRealBufferBroadcaster);  break;default :throw new IllegalArgumentException("Unrecognized source " + "sample type - cannot start processing chain");}if (mSource instanceof TunerChannelSource) {TunerChannelSource tcs=(TunerChannelSource)mSource;try {long frequency=tcs.getFrequency();mDecoderStateEventBroadcaster.broadcast(new DecoderStateEvent(this,Event.SOURCE_FREQUENCY,State.IDLE,frequency));} catch (SourceException e) {mLog.error("Error getting frequency from tuner channel source",e);}}if (mScheduledExecutorService == null) {mScheduledExecutorService=Executors.newScheduledThreadPool(1,new NamingThreadFactory("channel " + mName));}for (Module module : mModules) {try {module.start(mScheduledExecutorService);} catch (Exception e) {mLog.error("Error starting module",e);}}mSource.start(mScheduledExecutorService);} else {mLog.error("Source is null on start()");}}}  }
class C{  public MacroException(){}  }
class C{  public Builder withGravity(int gravity){  this.gravity=gravity;  return this;}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 1788) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public int size(){  return selection.size();}  }
class C{  @SuppressWarnings("unchecked") public static void deleteALLImage(final IdocApplet ui){  FileVO ele=(FileVO)ui.getFileVO();  ele.getListImage().removeAll(ele.getListImage());  ele.setImageSelectIndex(0);}  }
class C{  public void bitXor() throws IOException {  print("bitXor",null);}  }
class C{  protected static void version(){  System.out.println("baksmali " + VERSION + " (http://smali.googlecode.com)");  System.out.println("Copyright (C) 2010 Ben Gruver (JesusFreke@JesusFreke.com)");  System.out.println("BSD license (http://www.opensource.org/licenses/bsd-license.php)");  System.exit(0);}  }
class C{  private void canSelect(){  select.setEnabled(true);}  }
class C{  public int length(){  return ref.length;}  }
class C{  public UpdateInventoryOutput replyOk(){  UpdateInventoryOutput ok=new UpdateInventoryOutput();  ok.setCode("OK");  return ok;}  }
class C{  public SyncHttpClient(int httpPort,int httpsPort){  this(false,httpPort,httpsPort);}  }
class C{  public void testGetIntrospectedPropertyNames(){  Object introspectedTarget=new Target();  Object hashedTarget=new ArbitraryTarget();  Set<String> expResult=new HashSet<>(2);  Set<String> itResult=Beans.getIntrospectedPropertyNames(introspectedTarget);  Set<String> htResult=Beans.getIntrospectedPropertyNames(hashedTarget);  expResult.add(CLASS);  assertEquals(expResult,Beans.getIntrospectedPropertyNames(new Object()));  expResult.add(PROPERTY_NAMES);  assertEquals(expResult,htResult);  expResult.add(STRING_PROPERTY);  expResult.add(INDEXED_PROPERTY);  assertEquals(expResult,itResult);  assertNotSame(expResult,htResult);  expResult.add(NOT_A_PROPERTY);  assertNotSame(expResult,itResult);}  }
class C{  protected static void binomial(int n,int[] coefficients){  if (coefficients == null) {    String message=Logging.getMessage("nullValue.ArrayIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (coefficients.length != n + 1) {    String message=Logging.getMessage("generic.ArrayInvalidLength",coefficients.length);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  for (int i=0; i <= n; i++) {    coefficients[i]=1;    for (int j=i - 1; j > 0; j--) {      coefficients[j]+=coefficients[j - 1];    }  }}  }
class C{  public static CCMoveTo action(float t,CGPoint pos){  return new CCMoveTo(t,pos);}  }
class C{  private void showTalkBackVersion(){  try {    final PackageInfo packageInfo=getPackageManager().getPackageInfo(getPackageName(),0);    final ActionBar actionBar=getActionBar();    if (actionBar != null) {      actionBar.setSubtitle(getString(R.string.talkback_preferences_subtitle,packageInfo.versionName));    }    final Preference playStoreButton=findPreferenceByResId(R.string.pref_play_store_key);    if (playStoreButton == null) {      return;    }    if (GooglePlayServicesUtil.isGooglePlayServicesAvailable(this) != ConnectionResult.SUCCESS) {      playStoreButton.setIntent(null);      final PreferenceGroup category=(PreferenceGroup)findPreferenceByResId(R.string.pref_category_miscellaneous_key);      if (category != null) {        category.removePreference(playStoreButton);      }    }    if (playStoreButton.getIntent() != null && getPackageManager().queryIntentActivities(playStoreButton.getIntent(),0).size() == 0) {      playStoreButton.setIntent(null);      final PreferenceGroup category=(PreferenceGroup)findPreferenceByResId(R.string.pref_category_miscellaneous_key);      if (category != null) {        category.removePreference(playStoreButton);      }    } else {      final String versionNumber=String.valueOf(packageInfo.versionCode);      final int length=versionNumber.length();      playStoreButton.setSummary(getString(R.string.summary_pref_play_store,String.valueOf(Integer.parseInt(versionNumber.substring(0,length - 7))) + "." + String.valueOf(Integer.parseInt(versionNumber.substring(length - 7,length - 5)))+ "."+ String.valueOf(Integer.parseInt(versionNumber.substring(length - 5,length - 3)))+ "."+ String.valueOf(Integer.parseInt(versionNumber.substring(length - 3)))));    }  } catch (  NameNotFoundException e) {  }}  }
class C{  @SuppressWarnings("rawtypes") @Override protected IProject[] build(int kind,Map args,IProgressMonitor monitor) throws CoreException {  monitor.subTask("Running FindBugs...");switch (kind) {case IncrementalProjectBuilder.FULL_BUILD:{      FindBugs2Eclipse.cleanClassClache(getProject());      if (FindbugsPlugin.getUserPreferences(getProject()).isRunAtFullBuild()) {        if (DEBUG) {          System.out.println("FULL BUILD");        }        doBuild(args,monitor,kind);      } else {      }      break;    }case IncrementalProjectBuilder.INCREMENTAL_BUILD:{    if (DEBUG) {      System.out.println("INCREMENTAL BUILD");    }    doBuild(args,monitor,kind);    break;  }case IncrementalProjectBuilder.AUTO_BUILD:{  if (DEBUG) {    System.out.println("AUTO BUILD");  }  doBuild(args,monitor,kind);  break;}default :{FindbugsPlugin.getDefault().logWarning("UKNOWN BUILD kind" + kind);doBuild(args,monitor,kind);break;}}return null;}  }
class C{  public void mousePressed(MouseEvent e){  ((MouseListener)a).mousePressed(e);  ((MouseListener)b).mousePressed(e);}  }
class C{  private String nextVariableName(String base,DataSet data){  int i=-1;  String name="?";  loop:   while (true) {    ++i;    if (i == 0) {      name=base;    } else {      name=base + i;    }    for (    Node node1 : data.getVariables()) {      if (node1.getName().equals(name)) {        continue loop;      }    }    break;  }  return name;}  }
class C{  @Nullable private Map<String,String> addResource(ClassLoader ldr,ConcurrentMap<String,String> ldrRsrcs,Class<?> cls) throws IgniteSpiException {  assert ldr != null;  assert ldrRsrcs != null;  assert cls != null;  Map<String,String> regRsrcs=new HashMap<>(2,1.0f);  String alias=null;  if (ComputeTask.class.isAssignableFrom(cls)) {    ComputeTaskName nameAnn=GridAnnotationsCache.getAnnotation(cls,ComputeTaskName.class);    if (nameAnn != null)     alias=nameAnn.value();  }  if (alias != null)   regRsrcs.put(alias,cls.getName());  regRsrcs.put(cls.getName(),cls.getName());  if (log.isDebugEnabled())   log.debug("Resources to register: " + regRsrcs);  Map<String,String> newRsrcs=null;  for (  Entry<String,String> entry : regRsrcs.entrySet()) {    String oldCls=ldrRsrcs.putIfAbsent(entry.getKey(),entry.getValue());    if (oldCls != null) {      if (!oldCls.equals(entry.getValue()))       throw new IgniteSpiException("Failed to register resources with given task name " + "(found another class with same task name in the same class loader) " + "[taskName=" + entry.getKey() + ", existingCls="+ oldCls+ ", newCls="+ entry.getValue()+ ", ldr="+ ldr+ ']');    } else {      if (newRsrcs == null)       newRsrcs=U.newHashMap(regRsrcs.size());      newRsrcs.put(entry.getKey(),entry.getValue());    }  }  if (newRsrcs != null)   ldrRsrcs.putAll(newRsrcs);  if (log.isDebugEnabled())   log.debug("New resources: " + newRsrcs);  return newRsrcs;}  }
class C{  public void addCharEntity(String symbol,int code){  parser.addCharEntity(symbol,code);}  }
class C{  private void addPluginMenus(final JComponent menu){  final List<IDatabaseMenuPlugin> plugins=Lists.newArrayList();  for (  final IPlugin<IPluginInterface> plugin : PluginInterface.instance().getPluginRegistry()) {    if (plugin instanceof IDatabaseMenuPlugin) {      plugins.add((IDatabaseMenuPlugin)plugin);    }  }  if (!plugins.isEmpty()) {    menu.add(new JSeparator());    for (    final IDatabaseMenuPlugin plugin : plugins) {      try {        final List<JComponent> menuItems=plugin.extendDatabaseMenu(getPluginDatabase());        if (menuItems != null) {          for (          final JComponent menuItem : menuItems) {            menu.add(menuItem);          }        }      } catch (      final Exception exception) {        CUtilityFunctions.logException(exception);        final String innerMessage="E00091: " + "Plugin caused an unexpected exception";        final String innerDescription=CUtilityFunctions.createDescription(String.format("The plugin %s caused an unexpected exception.",plugin.getName()),new String[]{"The plugin contains a bug."},new String[]{"The plugin probably behaves errorneously from this " + "point on but it remains active"});        NaviErrorDialog.show(getParent(),innerMessage,innerDescription,exception);      }    }  }}  }
class C{  public PointLatLonTime(final Double xCoord,final Double yCoord,final Long timestamp){  this(new PointLatLon(xCoord,yCoord),timestamp);}  }
class C{  public static PropertyValuesHolder ofInt(String propertyName,int... values){  return new IntPropertyValuesHolder(propertyName,values);}  }
class C{  public DelphiPMDNode(CommonTree node){  super(node.getToken());  this.children=node.getChildren();  this.parent=(CommonTree)node.getParent();  this.childIndex=node.getChildIndex();}  }
class C{  public void rollback(){  if (closed)   throw Exceptions.alreadyClosed();  tx().rollback();}  }
class C{  public NewArrivalProducts(final String id){  super(id,true);}  }
class C{  private String parseAttributeValue(String watch) throws JasperException {  Mark start=reader.mark();  Mark stop=reader.skipUntilIgnoreEsc(watch);  if (stop == null) {    err.jspError(start,"jsp.error.attribute.unterminated",watch);  }  String ret=parseQuoted(reader.getText(start,stop));  if (watch.length() == 1)   return ret;  return "<%=" + ret + "%>";}  }
class C{  public Tasks<VolumeRestRep> deactivateContinuousCopies(URI id,CopiesParam input){  return deactivateContinuousCopies(id,input,VolumeDeleteTypeEnum.FULL);}  }
class C{  public static boolean isSameLength(Object[] array1,Object[] array2){  if ((array1 == null && array2 != null && array2.length > 0) || (array2 == null && array1 != null && array1.length > 0) || (array1 != null && array2 != null && array1.length != array2.length)) {    return false;  }  return true;}  }
class C{  public static String sanitizeForTableName(String input){  return input.replaceAll("[^A-Za-z0-9]","");}  }
class C{  public void attemptLogin(){  if (mAuthTask != null) {    return;  }  mUsernameView.setError(null);  mPasswordView.setError(null);  mVerificationCodeView.setError(null);  String username=mUsernameView.getText().toString();  String password=mPasswordView.getText().toString();  String verification_code=mVerificationCodeView.getText().toString();  boolean cancel=false;  View focusView=null;  if (!TextUtils.isEmpty(password) && !isPasswordValid(password)) {    mPasswordView.setError(getString(R.string.error_invalid_password));    focusView=mPasswordView;    cancel=true;  }  if (TextUtils.isEmpty(username)) {    mUsernameView.setError(getString(R.string.error_field_required));    focusView=mUsernameView;    cancel=true;  }  if (TextUtils.isEmpty(verification_code)) {    mVerificationCodeView.setError(getString(R.string.error_field_required));    focusView=mVerificationCodeView;    cancel=true;  }  if (cancel) {    focusView.requestFocus();  } else {    showProgress(true);    mAuthTask=new UserLoginTask(username,password,verification_code);    mAuthTask.execute((Void)null);  }}  }
class C{  public DrawerBuilder withSavedInstance(Bundle savedInstance){  this.mSavedInstance=savedInstance;  return this;}  }
class C{  public static void sort(char[] a){  doSort(a,0,a.length - 1);}  }
class C{  public boolean match(MimeType other){  if (this == other)   return true;  if (type != null && other.type != null && !type.equals(other.type))   return false;  if (subtype != null && other.subtype != null && !subtype.equals(other.subtype))   return false;  return true;}  }
class C{  public boolean isHalfOpen(){  return State.HALF_OPEN.equals(getState());}  }
class C{  public final void testPSSParameterSpec0201(){  AlgorithmParameterSpec aps=new PSSParameterSpec("SHA-1","MGF1",MGF1ParameterSpec.SHA1,20,1);  assertTrue(aps instanceof PSSParameterSpec);}  }
class C{  public void close() throws IOException {  if (!closed) {    try {      byte buffer[]=new byte[BUFFER_SIZE];      while (read(buffer) >= 0) {      }    }  finally {      closed=true;    }  }}  }
class C{  public EpsilonMOEA(Problem problem,Population population,EpsilonBoxDominanceArchive archive,Selection selection,Variation variation,Initialization initialization,DominanceComparator dominanceComparator){  super(problem,population,archive,initialization);  this.variation=variation;  this.selection=selection;  this.dominanceComparator=dominanceComparator;}  }
class C{  private String formatCertificateDate(Context context,Date certificateDate){  if (certificateDate == null) {    return "";  }  return DateFormat.getDateFormat(context).format(certificateDate);}  }
class C{  public void testDoc1_Query1_All_Slops_Should_match() throws Exception {  for (int slop=0; slop < 30; slop++) {    float freq1=checkPhraseQuery(DOC_1,QUERY_1,slop,1);    float freq2=checkPhraseQuery(DOC_1_B,QUERY_1,slop,1);    assertTrue("slop=" + slop + " freq2="+ freq2+ " should be greater than score1 "+ freq1,freq2 > freq1);  }}  }
class C{  private static URI cookieUri(URI uri,HttpCookie cookie){  URI cookieUri=uri;  if (cookie.getDomain() != null) {    String domain=cookie.getDomain();    if (domain.charAt(0) == '.') {      domain=domain.substring(1);    }    try {      cookieUri=new URI(uri.getScheme() == null ? "http" : uri.getScheme(),domain,cookie.getPath() == null ? "/" : cookie.getPath(),null);    } catch (    URISyntaxException e) {      Log.w(TAG,e);    }  }  return cookieUri;}  }
class C{  public String findNext(boolean previousFlipped){  boolean resetIsFlipped=true;  if (previousFlipped && count > 0) {    if (!valueIterator.hasNext()) {      valueIterator=values.iterator();      index=0;      isFlipped=true;      resetIsFlipped=false;    } else {      index++;    }    currentValue=valueIterator.next();  }  count++;  if (resetIsFlipped) {    isFlipped=false;  }  return currentValue;}  }
class C{  public int numCommands(){  return numCommands;}  }
class C{  public void refreshing(){  mHintTextView.setText(R.string.rebound_listview_header_hint_loading);}  }
class C{  protected int incrementSampleIndex(int index){  return incrementSampleIndex(index,1);}  }
class C{  protected Map<String,Map<String,String>> mergeTranslationLists(Map<String,Map<String,String>> masterTrans,Map<String,Map<String,String>> localTrans){  if (localTrans != null && !localTrans.isEmpty()) {    for (    String transfilename : localTrans.keySet()) {      Map<String,String> origList=localTrans.get(transfilename);      if (masterTrans.containsKey(transfilename)) {        Map<String,String> xliffList=masterTrans.get(transfilename);        xliffList.putAll(origList);      } else {        masterTrans.put(transfilename,origList);      }    }  }  return masterTrans;}  }
class C{  public QueryResultParseException(Throwable t,long lineNo,long columnNo){  super(t);  this.lineNo=lineNo;  this.columnNo=columnNo;}  }
class C{  public Class<? extends Annotation>[] annotationTypes(){  return _annTypes;}  }
class C{  private void registerUnresolvedNamesFor(String[] names,Collection<String> nameSet){  System.err.println("Warning: unresolved charset names: '" + nameSet + "' This is not necessarily an error "+ "- this charset may not be supported on this platform.");  for (  String a : names) {    final String k=a.toUpperCase();    final Collection<String> c=unresolved.get(k);    if (c != null) {      nameSet.addAll(c);      for (      String aa : c) {        unresolved.put(aa.toUpperCase(),nameSet);      }    }    unresolved.put(k,nameSet);  }}  }
class C{  @Override public ChatEvent parse(String text){  ChatEvent result=null;  if (text.startsWith(BEGINING_MESSAGE) || text.startsWith(BEGINING_MESSAGE,1)) {    RaptorStringTokenizer tok=new RaptorStringTokenizer(text," \n:",true);    tok.nextToken();    tok.nextToken();    String userName=tok.nextToken();    if (userName != null) {      result=new ChatEvent(IcsUtils.stripTitles(userName),ChatType.FINGER,text);    }  }  return result;}  }
class C{  public static void registerBundledRedstoneProvider(IBundledRedstoneProvider handler){  findCC();  if (computerCraft_registerBundledRedstoneProvider != null) {    try {      computerCraft_registerBundledRedstoneProvider.invoke(null,handler);    } catch (    Exception e) {    }  }}  }
class C{  void poll(long qAddr){  lock.lock();  try {    assert polling(qAddr);    unlink(qAddr);  }  finally {    lock.unlock();  }}  }
class C{  protected void addNamespacePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_ScopedElement_namespace_feature"),getString("_UI_PropertyDescriptor_description","_UI_ScopedElement_namespace_feature","_UI_ScopedElement_type"),SGraphPackage.Literals.SCOPED_ELEMENT__NAMESPACE,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  private void write(String str) throws IOException {  m_writer.write(str,0,str.length());}  }
class C{  public float nextTabStop(float x,int tabOffset){  if (getTabSet() == null && StyleConstants.getAlignment(getAttributes()) == StyleConstants.ALIGN_LEFT) {    return getPreTab(x,tabOffset);  }  return super.nextTabStop(x,tabOffset);}  }
class C{  public MasterPublicKey(PublicKey key,byte[] chainCode,int depth,int parent,int sequence){  this.master=key;  this.chainCode=chainCode;  this.parent=parent;  this.depth=depth;  this.sequence=sequence;}  }
class C{  @Override public void noCurrentRequestcontent(){  if (m_IsInProgress) {    return;  }  m_IsInProgress=true;  log().trace("No Current Message");  if (null != m_DetectionManager)   m_DetectionManager.setInputFile(null);  clearOptions();  m_IsInProgress=false;}  }
class C{  public synchronized void addProjectionListener(ProjectionListener l){  projectionSupport.add(l);  try {    l.projectionChanged(new ProjectionEvent(this,getRotatedProjection()));  } catch (  Exception e) {    if (logger.isLoggable(Level.FINER)) {      logger.fine("ProjectionListener not handling projection well: " + l.getClass().getName() + " : "+ e.getClass().getName()+ " : "+ e.getMessage());      e.printStackTrace();    }  }}  }
class C{  public void close(){  mCpc.release();}  }
class C{  public void inline(InvokeNode invoke){  ResolvedJavaMethod method=((MethodCallTargetNode)invoke.callTarget()).targetMethod();  MetaAccessProvider metaAccess=providers.getMetaAccess();  Plugins plugins=new Plugins(graphBuilderPlugins);  GraphBuilderConfiguration config=GraphBuilderConfiguration.getSnippetDefault(plugins);  StructuredGraph calleeGraph=new StructuredGraph(method,AllowAssumptions.NO,NO_PROFILING_INFO);  IntrinsicContext initialReplacementContext=new IntrinsicContext(method,method,providers.getReplacements().getReplacementBytecodeProvider(),INLINE_AFTER_PARSING);  GraphBuilderPhase.Instance instance=new GraphBuilderPhase.Instance(metaAccess,providers.getStampProvider(),providers.getConstantReflection(),providers.getConstantFieldProvider(),config,OptimisticOptimizations.NONE,initialReplacementContext);  instance.apply(calleeGraph);  calleeGraph.clearAllStateAfter();  new DeadCodeEliminationPhase(Optionality.Required).apply(calleeGraph);  InliningUtil.inline(invoke,calleeGraph,false,null);}  }
class C{  @Deprecated public void write(String outputFile,boolean useRelativePaths,String relativeBase) throws IOException {  PrintWriter writer=UTF8.printWriter(outputFile);  try {    writer.println(JAR_FILES_KEY);    for (    String jarFile : analysisTargets) {      if (useRelativePaths) {        jarFile=convertToRelative(jarFile,relativeBase);      }      writer.println(jarFile);    }    writer.println(SRC_DIRS_KEY);    for (    String srcDir : srcDirList) {      if (useRelativePaths) {        srcDir=convertToRelative(srcDir,relativeBase);      }      writer.println(srcDir);    }    writer.println(AUX_CLASSPATH_ENTRIES_KEY);    for (    String auxClasspathEntry : auxClasspathEntryList) {      if (useRelativePaths) {        auxClasspathEntry=convertToRelative(auxClasspathEntry,relativeBase);      }      writer.println(auxClasspathEntry);    }    if (useRelativePaths) {      writer.println(OPTIONS_KEY);      writer.println(RELATIVE_PATHS + "=true");    }  }  finally {    writer.close();  }  isModified=false;}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:15.459 -0500",hash_original_method="38908DF8BAD797C5C3B9904DFAB1ABDF",hash_generated_method="59B899B6291A4C7B230D2ED5A9CCDA94") protected void sendMessage(byte[] msg,InetAddress peerAddress,int peerPort,String peerProtocol,boolean retry) throws IOException {  if (peerPort == -1) {    if (sipStack.isLoggingEnabled()) {      this.sipStack.getStackLogger().logDebug(getClass().getName() + ":sendMessage: Dropping reply!");    }    throw new IOException("Receiver port not set ");  } else {    if (sipStack.isLoggingEnabled()) {      this.sipStack.getStackLogger().logDebug(":sendMessage " + peerAddress.getHostAddress() + "/"+ peerPort+ "\n"+ " messageSize = "+ msg.length);    }  }  if (peerProtocol.compareToIgnoreCase("UDP") == 0) {    DatagramPacket reply=new DatagramPacket(msg,msg.length,peerAddress,peerPort);    try {      DatagramSocket sock;      if (sipStack.udpFlag) {        sock=((UDPMessageProcessor)messageProcessor).sock;      } else {        sock=sipStack.getNetworkLayer().createDatagramSocket();      }      if (sipStack.isLoggingEnabled()) {        this.sipStack.getStackLogger().logDebug("sendMessage " + peerAddress.getHostAddress() + "/"+ peerPort+ "\n"+ new String(msg));      }      sock.send(reply);      if (!sipStack.udpFlag)       sock.close();    } catch (    IOException ex) {      throw ex;    }catch (    Exception ex) {      InternalErrorHandler.handleException(ex);    }  } else {    Socket outputSocket=sipStack.ioHandler.sendBytes(this.messageProcessor.getIpAddress(),peerAddress,peerPort,"tcp",msg,retry,this);    OutputStream myOutputStream=outputSocket.getOutputStream();    myOutputStream.write(msg,0,msg.length);    myOutputStream.flush();  }}  }
class C{  private String enc(String str){  return HTMLEntities.escapeHTML(str,HTMLEntities.HTMLV20);}  }
class C{  public void addAll(int... values){  for (  int value : values) {    add(value);  }}  }
class C{  void onDragChild(View child){  PagedViewCellLayout.LayoutParams lp=(PagedViewCellLayout.LayoutParams)child.getLayoutParams();  lp.isDragging=true;}  }
class C{  ErrorElement(){}  }
class C{  public void put(byte biomeValue,byte dataValue,String[] mtlNames){  if (dataValue < -1 || dataValue > 15)   throw new IllegalArgumentException("dataValue must be between -1 and 15");  if (mtlNames == null || mtlNames.length == 0)   throw new IllegalArgumentException("mtlNames must not be null or empty");  String[][] mtls=null;  if (biomeMaterials.containsKey(biomeValue))   mtls=biomeMaterials.get(biomeValue); else {    mtls=new String[17][];    biomeMaterials.put(biomeValue,mtls);  }  if (dataValue >= 0)   mtls[dataValue]=mtlNames; else   mtls[16]=mtlNames;}  }
class C{  public void testStart(){  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();  mTestUtils.enable(adapter);}  }
class C{  public static Set<Use> retrieveRegisteredParameterUses(){  Set<Use> r=new HashSet<Use>();  for (  BytecodeInstruction instruction : knownParameterUses) {    r.add(getUseByUseId(registeredUses.get(instruction)));  }  return r;}  }
class C{  private boolean escapeOneChar(int pos,int limit,char ch) throws IOException {  String esc=precomputedEscapes.getEscape(ch);  if (esc != null) {    out.append(chars,pos,limit).append(esc);    return true;  }  return false;}  }
class C{  public LocationConfiguration askForEnableGPS(boolean askFor){  this.askForEnableGPS=askFor;  return this;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected void populate(Iterator<EdgeInfo> edges){  info=new EdgeInfo[numVertices][numVertices];  while (edges.hasNext()) {    EdgeInfo ei=edges.next();    ei.flow=0;    info[ei.start][ei.end]=ei;  }}  }
class C{  public MGRSCoord(Angle latitude,Angle longitude,String MGRSString){  if (latitude == null || longitude == null) {    throw new IllegalArgumentException("Latitude Or Longitude Is Null");  }  if (MGRSString == null) {    throw new IllegalArgumentException("String Is Null");  }  if (MGRSString.length() == 0) {    throw new IllegalArgumentException("String Is Empty");  }  this.latitude=latitude;  this.longitude=longitude;  this.MGRSString=MGRSString;}  }
class C{  private void makeIrisInBounds(float simulationRate){  float irisOffsetX=mIrisPosition.x - mEyePosition.x;  float irisOffsetY=mIrisPosition.y - mEyePosition.y;  float maxDistance=mEyeRadius - mIrisRadius;  float distance=(float)Math.sqrt(Math.pow(irisOffsetX,2) + Math.pow(irisOffsetY,2));  if (distance <= maxDistance) {    mConsecutiveBounces=0;    return;  }  mConsecutiveBounces++;  float ratio=maxDistance / distance;  float x=mEyePosition.x + (ratio * irisOffsetX);  float y=mEyePosition.y + (ratio * irisOffsetY);  float dx=x - mIrisPosition.x;  vx=applyBounce(vx,dx,simulationRate) / mConsecutiveBounces;  float dy=y - mIrisPosition.y;  vy=applyBounce(vy,dy,simulationRate) / mConsecutiveBounces;  mIrisPosition=new PointF(x,y);}  }
class C{  @Override protected void onRewriteFailed(final HttpServletRequest request,final HttpServletResponse response) throws IOException {  if (log.isInfoEnabled())   log.info("Could not rewrite: request=" + request,new StackInfoReport());  final Boolean isLeaderRequest=isLeaderRequest(request);  if (isLeaderRequest == null) {    response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,"Unknown prefix: requestURL=" + request.getRequestURL());    return;  }  forwardToLocalService(isLeaderRequest,request,response);}  }
class C{  public ContainerHost(int id,ContainerVmRamProvisioner containerVmRamProvisioner,ContainerVmBwProvisioner containerVmBwProvisioner,long storage,List<? extends ContainerVmPe> peList,ContainerVmScheduler containerVmScheduler){  setId(id);  setContainerVmRamProvisioner(containerVmRamProvisioner);  setContainerVmBwProvisioner(containerVmBwProvisioner);  setStorage(storage);  setContainerVmScheduler(containerVmScheduler);  setPeList(peList);  setFailed(false);}  }
class C{  @SuppressWarnings("unchecked") public void addValue(Object v,float b){  if (value == null) {    if (v instanceof Collection) {      Collection<Object> c=new ArrayList<>(3);      for (      Object o : (Collection<Object>)v) {        c.add(o);      }      setValue(c,b);    } else {      setValue(v,b);    }    return;  }  boost*=b;  Collection<Object> vals=null;  if (value instanceof Collection) {    vals=(Collection<Object>)value;  } else {    vals=new ArrayList<>(3);    vals.add(value);    value=vals;  }  if (v instanceof Iterable) {    for (    Object o : (Iterable<Object>)v) {      vals.add(o);    }  } else   if (v instanceof Object[]) {    for (    Object o : (Object[])v) {      vals.add(o);    }  } else {    vals.add(v);  }}  }
class C{  private static void printCloudletList(List<Cloudlet> list){  int size=list.size();  Cloudlet cloudlet;  String indent="    ";  Log.printLine();  Log.printLine("========== OUTPUT ==========");  Log.printLine("Cloudlet ID" + indent + "STATUS"+ indent+ "Data center ID"+ indent+ "VM ID"+ indent+ "Time"+ indent+ "Start Time"+ indent+ "Finish Time");  DecimalFormat dft=new DecimalFormat("###.##");  for (int i=0; i < size; i++) {    cloudlet=list.get(i);    Log.print(indent + cloudlet.getCloudletId() + indent+ indent);    if (cloudlet.getCloudletStatus() == Cloudlet.SUCCESS) {      Log.print("SUCCESS");      Log.printLine(indent + indent + cloudlet.getResourceId()+ indent+ indent+ indent+ cloudlet.getVmId()+ indent+ indent+ dft.format(cloudlet.getActualCPUTime())+ indent+ indent+ dft.format(cloudlet.getExecStartTime())+ indent+ indent+ dft.format(cloudlet.getFinishTime()));    }  }}  }
class C{  @Deprecated public static Shape mergeClip(Graphics g,Shape clip){  return ShapeUtils.mergeClip(g,clip);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (value: ");  result.append(value);  result.append(')');  return result.toString();}  }
class C{  @Override public boolean canUserInitiateMoveFrom(int squareId){  if (LOG.isDebugEnabled()) {    LOG.debug("canUserInitiateMoveFrom " + getSan(squareId));  }  if (!isUsersMove()) {    if (isPremoveable()) {      if (getGame().isInState(Game.DROPPABLE_STATE) && ChessBoardUtils.isPieceJailSquare(squareId)) {        return isUserWhite && ChessBoardUtils.isJailSquareWhitePiece(squareId) || !isUserWhite && ChessBoardUtils.isJailSquareBlackPiece(squareId);      } else {        return isUserWhite && isWhitePiece(getGame(),squareId) || !isUserWhite && isBlackPiece(game,squareId);      }    }    return false;  } else   if (ChessBoardUtils.isPieceJailSquare(squareId) && !getGame().isInState(Game.DROPPABLE_STATE)) {    return false;  } else   if (getGame().isInState(Game.DROPPABLE_STATE) && ChessBoardUtils.isPieceJailSquare(squareId)) {    return isUserWhite && ChessBoardUtils.isJailSquareWhitePiece(squareId) || !isUserWhite && ChessBoardUtils.isJailSquareBlackPiece(squareId);  } else {    return isUserWhite && isWhitePiece(getGame(),squareId) || !isUserWhite && isBlackPiece(game,squareId);  }}  }
class C{  public RequestHandle delete(Context context,String url,HttpEntity entity,String contentType,ResponseHandlerInterface responseHandler){  return sendRequest(httpClient,httpContext,addEntityToRequestBase(new HttpDelete(URI.create(url).normalize()),entity),contentType,responseHandler,context);}  }
class C{  public int lengthLongestPath(String input){  Deque<Integer> stack=new ArrayDeque<>();  stack.push(0);  String[] files=input.split("\n");  int max=0;  for (  String f : files) {    int level=f.lastIndexOf("\t") + 1;    while (stack.size() > level + 1) {      stack.pop();    }    int len=stack.peek() + f.length() - level + 1;    stack.push(len);    if (f.contains(".")) {      max=Math.max(max,len - 1);    }  }  return max;}  }
class C{  private <T>int countClearedRefs(List<WeakReference<T>> refs){  final Iterator<WeakReference<T>> itr=refs.iterator();  int n=0;  while (itr.hasNext()) {    final WeakReference<T> ref=itr.next();    if (ref.get() == null)     n++;  }  return n;}  }
class C{  @LargeTest public void testFrameOverlaySetAndGet() throws Exception {  final String videoItemFilename1=INPUT_FILE_PATH + "MPEG4_SP_640x480_30fps_512Kbps_0_27.mp4";  final String overlayFile1=INPUT_FILE_PATH + "IMG_640x480_Overlay1.png";  boolean flagForException=false;  final Bitmap mBitmap=mVideoEditorHelper.getBitmap(overlayFile1,640,480);  final MediaVideoItem mediaVideoItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename1,MediaItem.RENDERING_MODE_BLACK_BORDER);  mVideoEditor.addMediaItem(mediaVideoItem1);  final OverlayFrame overlayFrame1=mVideoEditorHelper.createOverlay(mediaVideoItem1,"overlayId1",mBitmap,5000,5000);  mediaVideoItem1.addOverlay(overlayFrame1);  overlayFrame1.setDuration(5000);  assertEquals("Overlay Duration",5000,overlayFrame1.getDuration());  try {    overlayFrame1.setDuration(mediaVideoItem1.getDuration() + 10000);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Overlay Duration > MediaVideo Item Duration",flagForException);  assertEquals("Overlay Duration",5000,overlayFrame1.getDuration());  flagForException=false;  try {    overlayFrame1.setDuration(-1);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Overlay Duration = -1",flagForException);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:16.641 -0500",hash_original_method="23D0913407E37C8868B97CA5EA461217",hash_generated_method="A389FCA1130A717D740B7FD1F0E2C17E") synchronized void syncedACookie(Cookie cookie){  cookie.mode=Cookie.MODE_NORMAL;}  }
class C{  public CommitContext addInstanceToCommit(Entity entity,@Nullable String viewName){  commitInstances.add(entity);  if (viewName != null) {    views.put(entity,getViewFromRepository(entity,viewName));  }  return this;}  }
class C{  public static final void decode(InputStream is,OutputStream os) throws Base64DecodingException, IOException {  byte b1=0, b2=0, b3=0, b4=0;  int index=0;  byte[] data=new byte[4];  int read;  while ((read=is.read()) > 0) {    byte readed=(byte)read;    if (isWhiteSpace(readed)) {      continue;    }    if (isPad(readed)) {      data[index++]=readed;      if (index == 3) {        data[index++]=(byte)is.read();      }      break;    }    if ((data[index++]=readed) == -1) {      throw new Base64DecodingException("decoding.general");    }    if (index != 4) {      continue;    }    index=0;    b1=base64Alphabet[data[0]];    b2=base64Alphabet[data[1]];    b3=base64Alphabet[data[2]];    b4=base64Alphabet[data[3]];    os.write((byte)(b1 << 2 | b2 >> 4));    os.write((byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf)));    os.write((byte)(b3 << 6 | b4));  }  byte d1=data[0], d2=data[1], d3=data[2], d4=data[3];  b1=base64Alphabet[d1];  b2=base64Alphabet[d2];  b3=base64Alphabet[d3];  b4=base64Alphabet[d4];  if ((b3 == -1) || (b4 == -1)) {    if (isPad(d3) && isPad(d4)) {      if ((b2 & 0xf) != 0) {        throw new Base64DecodingException("decoding.general");      }      os.write((byte)(b1 << 2 | b2 >> 4));    } else     if (!isPad(d3) && isPad(d4)) {      b3=base64Alphabet[d3];      if ((b3 & 0x3) != 0) {        throw new Base64DecodingException("decoding.general");      }      os.write((byte)(b1 << 2 | b2 >> 4));      os.write((byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf)));    } else {      throw new Base64DecodingException("decoding.general");    }  } else {    os.write((byte)(b1 << 2 | b2 >> 4));    os.write((byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf)));    os.write((byte)(b3 << 6 | b4));  }}  }
class C{  public static Map<String,Object> sendBirtMail(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> serviceContext=UtilMisc.makeMapWritable(context);  Delegator delegator=ctx.getDelegator();  LocalDispatcher dispatcher=ctx.getDispatcher();  Security security=ctx.getSecurity();  String webSiteId=(String)serviceContext.remove("webSiteId");  String bodyText=(String)serviceContext.remove("bodyText");  String bodyScreenUri=(String)serviceContext.remove("bodyScreenUri");  String birtReportLocation=(String)serviceContext.remove("birtReportLocation");  String attachmentName=(String)serviceContext.remove("attachmentName");  Locale locale=(Locale)serviceContext.get("locale");  Map<String,Object> bodyParameters=UtilGenerics.cast(serviceContext.remove("bodyParameters"));  Locale birtLocale=(Locale)serviceContext.remove(BirtWorker.BIRT_LOCALE);  Map<String,Object> birtParameters=UtilGenerics.cast(serviceContext.remove(BirtWorker.BIRT_PARAMETERS));  String birtImageDirectory=(String)serviceContext.remove(BirtWorker.BIRT_IMAGE_DIRECTORY);  String birtContentType=(String)serviceContext.remove(BirtWorker.BIRT_CONTENT_TYPE);  if (bodyParameters == null) {    bodyParameters=MapStack.create();  }  if (!bodyParameters.containsKey("locale")) {    bodyParameters.put("locale",locale);  } else {    locale=(Locale)bodyParameters.get("locale");  }  String partyId=(String)bodyParameters.get("partyId");  if (UtilValidate.isNotEmpty(webSiteId)) {    NotificationServices.setBaseUrl(ctx.getDelegator(),webSiteId,bodyParameters);  }  String contentType=(String)serviceContext.remove("contentType");  if (UtilValidate.isEmpty(attachmentName)) {    attachmentName="Details.pdf";  }  StringWriter bodyWriter=new StringWriter();  MapStack<String> screenContext=MapStack.create();  screenContext.put("locale",locale);  ScreenRenderer screens=new ScreenRenderer(bodyWriter,screenContext,htmlScreenRenderer);  screens.populateContextForService(ctx,bodyParameters);  screenContext.putAll(bodyParameters);  if (bodyScreenUri != null) {    try {      screens.render(bodyScreenUri);    } catch (    GeneralException e) {      String errMsg="Error rendering screen for email: " + e.toString();      Debug.logError(e,errMsg,module);      return ServiceUtil.returnError(errMsg);    }catch (    IOException e) {      String errMsg="Error I/O rendering screen for email: " + e.toString();      Debug.logError(e,errMsg,module);      return ServiceUtil.returnError(errMsg);    }catch (    SAXException e) {      String errMsg="Error SAX rendering screen for email: " + e.toString();      Debug.logError(e,errMsg,module);      return ServiceUtil.returnError(errMsg);    }catch (    ParserConfigurationException e) {      String errMsg="Error parser config rendering screen for email: " + e.toString();      Debug.logError(e,errMsg,module);      return ServiceUtil.returnError(errMsg);    }  }  boolean isMultiPart=false;  if (UtilValidate.isNotEmpty(birtReportLocation)) {    isMultiPart=true;    try {      ByteArrayOutputStream baos=new ByteArrayOutputStream();      Map<String,Object> birtContext=FastMap.newInstance();      if (birtLocale == null) {        birtLocale=locale;      }      birtContext.put(BirtWorker.BIRT_LOCALE,birtLocale);      if (birtParameters != null) {        birtContext.put(BirtWorker.BIRT_PARAMETERS,birtParameters);      }      if (birtImageDirectory != null) {        birtContext.put(BirtWorker.BIRT_IMAGE_DIRECTORY,birtImageDirectory);      }      if (birtContentType == null) {        birtContentType="application/pdf";      }      IReportEngine engine=BirtFactory.getReportEngine();      HashMap<String,Object> appContext=UtilGenerics.cast(engine.getConfig().getAppContext());      appContext.put("delegator",delegator);      appContext.put("dispatcher",dispatcher);      appContext.put("security",security);      InputStream reportInputStream=BirtFactory.getReportInputStreamFromLocation(birtReportLocation);      IReportRunnable design=engine.openReportDesign(reportInputStream);      Debug.logInfo("Export report as content type:" + birtContentType,module);      BirtWorker.exportReport(design,context,birtContentType,baos);      baos.flush();      baos.close();      List<Map<String,? extends Object>> bodyParts=FastList.newInstance();      if (bodyText != null) {        bodyText=FlexibleStringExpander.expandString(bodyText,screenContext,locale);        bodyParts.add(UtilMisc.toMap("content",bodyText,"type","text/html"));      } else {        bodyParts.add(UtilMisc.toMap("content",bodyWriter.toString(),"type","text/html"));      }      bodyParts.add(UtilMisc.toMap("content",baos.toByteArray(),"type","application/pdf","filename",attachmentName));      serviceContext.put("bodyParts",bodyParts);    } catch (    GeneralException ge) {      String errMsg="Error rendering " + birtContentType + " attachment for email: "+ ge.toString();      Debug.logError(ge,errMsg,module);      return ServiceUtil.returnError(errMsg);    }catch (    IOException ie) {      String errMsg="Error I/O rendering " + birtContentType + " attachment for email: "+ ie.toString();      Debug.logError(ie,errMsg,module);      return ServiceUtil.returnError(errMsg);    }catch (    FOPException fe) {      String errMsg="Error FOP rendering " + birtContentType + " attachment for email: "+ fe.toString();      Debug.logError(fe,errMsg,module);      return ServiceUtil.returnError(errMsg);    }catch (    SAXException se) {      String errMsg="Error SAX rendering " + birtContentType + " attachment for email: "+ se.toString();      Debug.logError(se,errMsg,module);      return ServiceUtil.returnError(errMsg);    }catch (    ParserConfigurationException pe) {      String errMsg="Error parser rendering " + birtContentType + " attachment for email: "+ pe.toString();      Debug.logError(pe,errMsg,module);      return ServiceUtil.returnError(errMsg);    }catch (    EngineException ee) {      String errMsg="Error rendering " + birtContentType + " attachment for email: "+ ee.toString();      Debug.logError(ee,errMsg,module);      return ServiceUtil.returnError(errMsg);    }catch (    SQLException se) {      String errMsg="Error SQL rendering " + birtContentType + " attachment for email: "+ se.toString();      Debug.logError(se,errMsg,module);      return ServiceUtil.returnError(errMsg);    }  } else {    isMultiPart=false;    if (bodyText != null) {      bodyText=FlexibleStringExpander.expandString(bodyText,screenContext,locale);      serviceContext.put("body",bodyText);    } else {      serviceContext.put("body",bodyWriter.toString());    }    if (contentType != null && contentType.equalsIgnoreCase("text/plain")) {      serviceContext.put("contentType","text/plain");    } else {      serviceContext.put("contentType","text/html");    }  }  String subject=(String)serviceContext.remove("subject");  subject=FlexibleStringExpander.expandString(subject,screenContext,locale);  serviceContext.put("subject",subject);  serviceContext.put("partyId",partyId);  if (Debug.verboseOn())   Debug.logVerbose("sendMailFromScreen sendMail context: " + serviceContext,module);  Map<String,Object> result=ServiceUtil.returnSuccess();  try {    if (isMultiPart) {      dispatcher.runSync("sendMailMultiPart",serviceContext);    } else {      dispatcher.runSync("sendMail",serviceContext);    }  } catch (  Exception e) {    String errMsg="Error send email :" + e.toString();    Debug.logError(e,errMsg,module);    return ServiceUtil.returnError(errMsg);  }  result.put("body",bodyWriter.toString());  return result;}  }
class C{  static void reset(){  loaded=false;}  }
class C{  public void trace(Throwable throwable,String msg,Object arg0,Object arg1){  innerLog(Level.TRACE,throwable,msg,arg0,arg1,UNKNOWN_ARG,null);}  }
class C{  protected synchronized void notifyExecutionStageListeners(ExecutionStageEvent.Stage stage){  ExecutionStageEvent e;  if (m_ExecutionStageListeners == null)   return;  e=new ExecutionStageEvent(this,stage);  for (  ExecutionStageListener l : m_ExecutionStageListeners)   l.experimentStage(e);}  }
class C{  protected Uri(){}  }
class C{  public boolean isMandatory(){  return mandatory;}  }
class C{  public static String replaceEscapedRightAngle(String s){  StringBuilder buf=new StringBuilder();  int i=0;  while (i < s.length()) {    char c=s.charAt(i);    if (c == '<' && s.substring(i).startsWith("<\\\\>")) {      buf.append("<\\\\>");      i+="<\\\\>".length();      continue;    }    if (c == '>' && s.substring(i).startsWith(">\\>")) {      buf.append(">>");      i+=">\\>".length();      continue;    }    if (c == '\\' && s.substring(i).startsWith("\\>>") && !s.substring(i).startsWith("\\>>>")) {      buf.append(">>");      i+="\\>>".length();      continue;    }    buf.append(c);    i++;  }  return buf.toString();}  }
class C{  public final boolean sendEmptyMessageAtTime(int what,long uptimeMillis){  return mExec.sendEmptyMessageAtTime(what,uptimeMillis);}  }
class C{  public int hashCode(){  return (int)date;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static boolean isPackage(int mod){  return (mod & (PUBLIC | PRIVATE | PROTECTED)) == 0;}  }
class C{  static private void mauCanonical(Tree tree,NodeRef[] order,boolean[] wasSwapped){  mauCanonicalSub(tree,tree.getRoot(),0,order,wasSwapped);}  }
class C{  public static void generate(ClientCache cache,PrintWriter pw,boolean useSchema){  (new CacheXmlGenerator(cache,true,VERSION_LATEST,true)).generate(pw);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:46.486 -0500",hash_original_method="1C2CEC982271DB04AB7A74A00D860FDA",hash_generated_method="8930E9D2EF04805BC5DDA8A8F8D4F259") public void decl(char[] buff,int offset,int length) throws SAXException {  String s=new String(buff,offset,length);  String name=null;  String systemid=null;  String publicid=null;  String[] v=split(s);  if (v.length > 0 && "DOCTYPE".equals(v[0])) {    if (theDoctypeIsPresent)     return;    theDoctypeIsPresent=true;    if (v.length > 1) {      name=v[1];      if (v.length > 3 && "SYSTEM".equals(v[2])) {        systemid=v[3];      } else       if (v.length > 3 && "PUBLIC".equals(v[2])) {        publicid=v[3];        if (v.length > 4) {          systemid=v[4];        } else {          systemid="";        }      }    }  }  publicid=trimquotes(publicid);  systemid=trimquotes(systemid);  if (name != null) {    publicid=cleanPublicid(publicid);    theLexicalHandler.startDTD(name,publicid,systemid);    theLexicalHandler.endDTD();    theDoctypeName=name;    theDoctypePublicId=publicid;    if (theScanner instanceof Locator) {      theDoctypeSystemId=((Locator)theScanner).getSystemId();      try {        theDoctypeSystemId=new URL(new URL(theDoctypeSystemId),systemid).toString();      } catch (      Exception e) {      }    }  }}  }
class C{  private int guessValueType(int currentValueType,String value,boolean onlyTwoValues,DateFormat dateFormat,NumberFormat numberFormat){  if (operator != null && operator.getCompatibilityLevel().isAtMost(VERSION_6_0_3)) {    if (currentValueType == Ontology.POLYNOMINAL) {      return currentValueType;    }    if (currentValueType == Ontology.BINOMINAL) {      if (onlyTwoValues) {        return Ontology.BINOMINAL;      } else {        return Ontology.POLYNOMINAL;      }    }  } else {    if (currentValueType == Ontology.BINOMINAL || currentValueType == Ontology.POLYNOMINAL) {      return Ontology.POLYNOMINAL;    }  }  if (currentValueType == Ontology.DATE) {    try {      dateFormat.parse(value);      return currentValueType;    } catch (    ParseException e) {      if (operator != null && operator.getCompatibilityLevel().isAtMost(VERSION_6_0_3)) {        return guessValueType(Ontology.BINOMINAL,value,onlyTwoValues,dateFormat,numberFormat);      } else {        return Ontology.POLYNOMINAL;      }    }  }  if (currentValueType == Ontology.REAL) {    if (numberFormat != null) {      try {        numberFormat.parse(value);        return currentValueType;      } catch (      ParseException e) {        return guessValueType(Ontology.DATE,value,onlyTwoValues,dateFormat,numberFormat);      }    } else {      try {        Double.parseDouble(value);        return currentValueType;      } catch (      NumberFormatException e) {        return guessValueType(Ontology.DATE,value,onlyTwoValues,dateFormat,null);      }    }  }  try {    Integer.parseInt(value);    return Ontology.INTEGER;  } catch (  NumberFormatException e) {    return guessValueType(Ontology.REAL,value,onlyTwoValues,dateFormat,numberFormat);  }}  }
class C{  public String findDeadlock(){  StringBuilder dump=new StringBuilder();  long[] tids;  if (findDeadlocksMethodName.equals("findDeadlockedThreads") && tmbean.isSynchronizerUsageSupported()) {    tids=tmbean.findDeadlockedThreads();    if (tids == null) {      return null;    }    dump.append("\n\nFound one Java-level deadlock:\n");    dump.append("==============================\n");    ThreadInfo[] infos=tmbean.getThreadInfo(tids,true,true);    for (int i=1; i < infos.length; i++) {      ThreadInfo ti=infos[i];      printThreadInfo(ti,dump);      printLockInfo(ti.getLockedSynchronizers(),dump);      dump.append("\n");    }  } else {    tids=tmbean.findMonitorDeadlockedThreads();    if (tids == null) {      return null;    }    dump.append("\n\nFound one Java-level deadlock:\n");    dump.append("==============================\n");    ThreadInfo[] infos=tmbean.getThreadInfo(tids,Integer.MAX_VALUE);    for (int i=1; i < infos.length; i++) {      ThreadInfo ti=infos[i];      printThreadInfo(ti,dump);    }  }  return (dump.toString());}  }
class C{  public T casePatternCharacter(PatternCharacter object){  return null;}  }
class C{  @RequestMapping(value="/be/taxreceipts/approve",method=RequestMethod.POST) public String approve(Map<String,Object> map,HttpServletResponse response,@RequestParam(value="id",required=false) String id){  TaxReceipt taxreceipt=null;  if (id != null) {    try {      TaxReceipt entity=new TaxReceipt();      entity.setId(id);      taxreceipt=taxReceiptDAO.findById(entity);      TaxReceiptArchive archiveEntity=new TaxReceiptArchive();      archiveEntity.setId(taxreceipt.getId());      archiveEntity.setCnpj(taxreceipt.getCnpj());      archiveEntity.setDate(taxreceipt.getDate());      archiveEntity.setCoo(taxreceipt.getCoo());      archiveEntity.setTotal(taxreceipt.getTotal());      archiveEntity.setS3Object(taxreceipt.getS3Object());      archiveEntity.setDateInsertion(new Date());      archiveEntity.setApproved(true);      taxReceiptDAO.remove(taxreceipt);      taxReceiptArchiveDAO.save(archiveEntity);    } catch (    Exception ex) {      ex.printStackTrace();    }  }  return "redirect:/be/taxreceipts/all.action";}  }
class C{  public Map<String,Rule> fetchCached(){  try {    return cache.get(BUCKET_NAME);  } catch (  ExecutionException e) {    LOGGER.warn("Unable to fetch rules from cache, returning no rules",e);    return Collections.emptyMap();  }}  }
class C{  public String toSignature(){  KeyToSignature keyToSignature=new KeyToSignature(this.key,KeyToSignature.SIGNATURE);  keyToSignature.parse();  return keyToSignature.signature.toString();}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public Connector findConnector(Point2D.Double p,ConnectionFigure prototype){  return new ChopDiamondConnector(this);}  }
class C{  private Workflow loadWorkflowFromStepId(String stepId){  String workflowPath=getZKStep2WorkflowPath(stepId);  Workflow workflow=null;  try {    workflowPath=(String)_dataManager.getData(workflowPath,false);    if (workflowPath == null) {      WorkflowException ex=WorkflowException.exceptions.workflowNotFound(stepId);      _log.info("Workflow not found: " + stepId,ex);      throw ex;    }    workflow=loadWorkflow(workflowPath);    if (workflow == null) {      WorkflowException ex=WorkflowException.exceptions.workflowNotFound(workflowPath);      _log.info("Workflow not found: " + workflowPath,ex);      throw ex;    }    return workflow;  } catch (  Exception ex) {    _log.info("Workflow not found: " + ex.getMessage(),ex);    throw WorkflowException.exceptions.workflowNotFound(stepId);  }}  }
class C{  public static Drawable bitmapToDrawable(Bitmap bitmap){  return bitmap == null ? null : new BitmapDrawable(bitmap);}  }
class C{  @Override protected void onPostExecute(Void notUsed){  super.onPostExecute(notUsed);  for (  Placemark aircraft : aircraftPositions.keySet()) {    aircraft.setPosition(aircraftPositions.get(aircraft));  }  getWorldWindow().requestRedraw();  if (frameCount > ANIMATION_FRAMES) {    pauseAnimation=true;    statusText.setText("Animation complete");  }  if (!pauseAnimation) {    handler.postDelayed(PlacemarksMilStd2525DemoActivity.this,DELAY_TIME);  }}  }
class C{  public static boolean isBuildOK(Properties ctx){  String buildClient=Adempiere.getImplementationVersion();  String buildDatabase="";  boolean failOnBuild=false;  String sql="SELECT LastBuildInfo, IsFailOnBuildDiffer FROM AD_System";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=prepareStatement(sql,null);    rs=pstmt.executeQuery();    if (rs.next()) {      buildDatabase=rs.getString(1);      failOnBuild=rs.getString(2).equals("Y");    }  } catch (  SQLException e) {    log.log(Level.SEVERE,"Problem with AD_System Table - Run system.sql script - " + e.toString());    return false;  } finally {    close(rs);    close(pstmt);    rs=null;    pstmt=null;  }  log.info("Build DB=" + buildDatabase);  log.info("Build Cl=" + buildClient);  if (buildClient.equals(buildDatabase))   return true;  String AD_Message="BuildVersionError";  String title=org.compiere.Adempiere.getName() + " " + Msg.getMsg(ctx,AD_Message,true);  String msg=Msg.getMsg(ctx,AD_Message);  msg=MessageFormat.format(msg,new Object[]{buildClient,buildDatabase});  if (!failOnBuild) {    log.warning(msg);    return true;  }  JOptionPane.showMessageDialog(null,msg,title,JOptionPane.ERROR_MESSAGE);  Env.exitEnv(1);  return false;}  }
class C{  @Override public void process(final DM dm,final ReplyProcessor21 rp){  final long startTime=getTimestamp();  if (rp == null) {    if (logger.isTraceEnabled(LogMarker.DM)) {      logger.debug("RemoveAllReplyMessage processor not found");    }    return;  }  if (rp instanceof RemoveAllResponse) {    RemoveAllResponse processor=(RemoveAllResponse)rp;    processor.setResponse(this);  }  rp.process(this);  if (logger.isTraceEnabled(LogMarker.DM)) {    logger.trace(LogMarker.DM,"{} Processed {}",rp,this);  }  dm.getStats().incReplyMessageTime(NanoTimer.getTime() - startTime);}  }
class C{  public Request(String... permissions){  this(false,permissions);}  }
class C{  public List<ServiceProcess> searchProcess(long groupId,String keywords,int start,int end){  String[] names=null;  boolean andOperator=false;  if (Validator.isNotNull(keywords)) {    names=CustomSQLUtil.keywords(keywords);  } else {    andOperator=true;  }  return _searchProcess(groupId,andOperator,names,start,end);}  }
class C{  public static char[] ensureCapacity(char[] array,int minCapacity){  int oldCapacity=array.length;  char[] newArray;  if (minCapacity > oldCapacity) {    int newCapacity=(oldCapacity * 3) / 2 + 1;    if (newCapacity < minCapacity) {      newCapacity=minCapacity;    }    newArray=new char[newCapacity];    System.arraycopy(array,0,newArray,0,oldCapacity);  } else {    newArray=array;  }  return newArray;}  }
class C{  private boolean isSimpleGeometryCollection(Geometry geom){  for (int i=0; i < geom.getNumGeometries(); i++) {    Geometry comp=geom.getGeometryN(i);    if (!computeSimple(comp))     return false;  }  return true;}  }
class C{  public static void copy(final InputStream source,final File dest,final long count) throws IOException {  final String path=dest.getParent();  if (path != null && path.length() > 0) {    new File(path).mkdirs();  }  FileOutputStream fos=null;  try {    fos=new FileOutputStream(dest);    copy(source,fos,count);  }  finally {    if (fos != null) {      try {        fos.close();      } catch (      final Exception e) {        ConcurrentLog.warn("FileUtils","cannot close FileOutputStream for " + dest + "! "+ e.getMessage());      }    }  }}  }
class C{  public void testReversing() throws Exception {  Reader reader=new StringReader("simple test");  TokenStream stream=whitespaceMockTokenizer(reader);  stream=tokenFilterFactory("ReverseString").create(stream);  assertTokenStreamContents(stream,new String[]{"elpmis","tset"});}  }
class C{  static int readUnsignedShort(final byte[] b,final int index){  return ((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF);}  }
class C{  public String toString(){  return m_nb.toString();}  }
class C{  public void clear(){  for (int i=0; i < arrays.length(); i++) {    arrays.set(i,null);  }}  }
class C{  public boolean containsObject(NSObject obj){  return set.contains(obj);}  }
class C{  public void reverseMove(){  tempApk.renameTo(origApk);  tempOdex.renameTo(origOdex);}  }
class C{  public static Function<String> jsonGroupObject(Field<?> keys,Field<?> values){  return new JSONArgumentFunction<>(JSON1_GROUP_FUNCTIONS_VERSION,"json_group_object",keys,values);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void onDrawerOpened(View drawerView){  super.onDrawerOpened(drawerView);}  }
class C{  public static boolean isEmpty(Object[] array){  if (array == null || array.length == 0) {    return true;  } else {    return false;  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("Secure[");  sb.append(m_cipher).append("]");  return sb.toString();}  }
class C{  public List<CifsAcl> listCIFSAcls(String shareName){  FlexFileShare share=new FlexFileShare(server.getNaServer(),null);  return share.listCIFSAcls(shareName);}  }
class C{  public void testDoubleMissingFacet() throws Exception {  checkSortMissingFacet("doubledv","-1.3","4.2");}  }
class C{  public int decryptBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  if ((inOff + blockSize) > in.length) {    throw new DataLengthException("input buffer too short");  }  if ((outOff + blockSize) > out.length) {    throw new DataLengthException("output buffer too short");  }  cipher.processBlock(cfbV,0,cfbOutV,0);  System.arraycopy(cfbV,blockSize,cfbV,0,cfbV.length - blockSize);  System.arraycopy(in,inOff,cfbV,cfbV.length - blockSize,blockSize);  for (int i=0; i < blockSize; i++) {    out[outOff + i]=(byte)(cfbOutV[i] ^ in[inOff + i]);  }  return blockSize;}  }
class C{  private void deleteDiskStates(EBSVolumesEnumerationSubStage next){  Query query=Builder.create().addKindFieldClause(DiskState.class).addFieldClause(DiskState.FIELD_NAME_RESOURCE_POOL_LINK,this.aws.computeEnumerationRequest.resourcePoolLink).addFieldClause(DiskState.FIELD_NAME_AUTH_CREDENTIALS_LINK,this.aws.parentAuth.documentSelfLink).addRangeClause(DiskState.FIELD_NAME_UPDATE_TIME_MICROS,NumericRange.createLessThanRange(this.aws.enumerationStartTimeInMicros)).addCompositeFieldClause(ComputeService.ComputeState.FIELD_NAME_CUSTOM_PROPERTIES,SOURCE_TASK_LINK,ResourceEnumerationTaskService.FACTORY_LINK,QueryTask.Query.Occurance.MUST_OCCUR).build();  QueryTask q=QueryTask.Builder.createDirectTask().addOption(QueryOption.EXPAND_CONTENT).setQuery(query).setResultLimit(getQueryResultLimit()).build();  q.tenantLinks=this.aws.parentCompute.tenantLinks;  this.service.logFine("Querying disks for deletion");  this.service.sendRequest(Operation.createPost(this.service,ServiceUriPaths.CORE_QUERY_TASKS).setBody(q).setConnectionSharing(true).setCompletion(null));}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4mfPackage.PROJECT_DESCRIPTION__VENDOR_NAME:    setVendorName((String)newValue);  return;case N4mfPackage.PROJECT_DESCRIPTION__PROJECT_VERSION:setProjectVersion((DeclaredVersion)newValue);return;case N4mfPackage.PROJECT_DESCRIPTION__PROJECT_TYPE:setProjectType((ProjectType)newValue);return;case N4mfPackage.PROJECT_DESCRIPTION__MAIN_MODULE:setMainModule((String)newValue);return;case N4mfPackage.PROJECT_DESCRIPTION__EXTENDED_RUNTIME_ENVIRONMENT:setExtendedRuntimeEnvironment((ExtendedRuntimeEnvironment)newValue);return;case N4mfPackage.PROJECT_DESCRIPTION__PROVIDED_RUNTIME_LIBRARIES:setProvidedRuntimeLibraries((ProvidedRuntimeLibraries)newValue);return;case N4mfPackage.PROJECT_DESCRIPTION__REQUIRED_RUNTIME_LIBRARIES:setRequiredRuntimeLibraries((RequiredRuntimeLibraries)newValue);return;case N4mfPackage.PROJECT_DESCRIPTION__PROJECT_DEPENDENCIES:setProjectDependencies((ProjectDependencies)newValue);return;case N4mfPackage.PROJECT_DESCRIPTION__IMPLEMENTATION_ID:setImplementationId((String)newValue);return;case N4mfPackage.PROJECT_DESCRIPTION__IMPLEMENTED_PROJECTS:setImplementedProjects((ImplementedProjects)newValue);return;case N4mfPackage.PROJECT_DESCRIPTION__INIT_MODULES:setInitModules((InitModules)newValue);return;case N4mfPackage.PROJECT_DESCRIPTION__EXEC_MODULE:setExecModule((ExecModule)newValue);return;case N4mfPackage.PROJECT_DESCRIPTION__OUTPUT_PATH:setOutputPath((String)newValue);return;case N4mfPackage.PROJECT_DESCRIPTION__LIBRARY_PATHS:getLibraryPaths().clear();getLibraryPaths().addAll((Collection<? extends String>)newValue);return;case N4mfPackage.PROJECT_DESCRIPTION__RESOURCE_PATHS:getResourcePaths().clear();getResourcePaths().addAll((Collection<? extends String>)newValue);return;case N4mfPackage.PROJECT_DESCRIPTION__SOURCE_FRAGMENT:getSourceFragment().clear();getSourceFragment().addAll((Collection<? extends SourceFragment>)newValue);return;case N4mfPackage.PROJECT_DESCRIPTION__MODULE_FILTERS:getModuleFilters().clear();getModuleFilters().addAll((Collection<? extends ModuleFilter>)newValue);return;case N4mfPackage.PROJECT_DESCRIPTION__TESTED_PROJECTS:setTestedProjects((TestedProjects)newValue);return;case N4mfPackage.PROJECT_DESCRIPTION__MODULE_LOADER:setModuleLoader((ModuleLoader)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @Override public void run(){  amIActive=true;  String outputHeader="";  int row, col;  double rowYCoord, value;  int progress=0;  double cellSizeX, cellSizeY;  int rows, topRow, bottomRow;  int cols;  int inputRow, inputCol;  double inputX, inputY;  double east;  double west;  double north;  double south;  BoundingBox box;  double[][] geometry;  int numPoints, numParts, i, part, numEdges;  int stCol, endCol;  int startingPointInPart, endingPointInPart;  double x1, y1, x2, y2, xPrime;  boolean foundIntersection;  ArrayList<Integer> edgeList=new ArrayList<>();  DecimalFormat df=new DecimalFormat("###,###,###,###");  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputFilesString=args[0];  String[] inputFiles=inputFilesString.split(";");  int numFiles=inputFiles.length;  String clipFile=args[1];  boolean maintainInputDimensions=Boolean.parseBoolean(args[2]);  if (inputFilesString.isEmpty() || numFiles < 1) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    long heapSize=Runtime.getRuntime().totalMemory();    int flushSize=(int)(heapSize / 32);    int j, numCellsToWrite;    PriorityQueue<RowPriorityGridCell> pq=new PriorityQueue<>(flushSize);    ShapeFile clip=new ShapeFile(clipFile);    BoundingBox clipBox=new BoundingBox();    clipBox.setMaxX(clip.getxMax());    clipBox.setMaxY(clip.getyMax());    clipBox.setMinX(clip.getxMin());    clipBox.setMinY(clip.getyMin());    if (clip.getShapeType().getBaseType() != ShapeType.POLYGON) {      showFeedback("The input shapefile must be of a 'polygon' data type.");      return;    }    ArrayList<RecordInfo> myList=new ArrayList<>();    for (    ShapeFileRecord record : clip.records) {      i=record.getRecordNumber();      box=getBoundingBoxFromShapefileRecord(record);      myList.add(new RecordInfo(box.getMaxY(),i));    }    Collections.sort(myList);    for (int k=0; k < numFiles; k++) {      WhiteboxRaster input=new WhiteboxRaster(inputFiles[k],"r");      outputHeader=inputFiles[k].replace(".dep","_clipped.dep");      double noData=input.getNoDataValue();      DataType dataType=input.getDataType();      WhiteboxRaster output;      if (!maintainInputDimensions) {        cellSizeX=input.getCellSizeX();        cellSizeY=input.getCellSizeY();        north=clip.getyMax() + cellSizeY / 2.0;        if (input.getNorth() < north) {          north=input.getNorth();        }        south=clip.getyMin() - cellSizeY / 2.0;        if (input.getSouth() > south) {          south=input.getSouth();        }        east=clip.getxMax() + cellSizeX / 2.0;        if (input.getEast() < east) {          east=input.getEast();        }        west=clip.getxMin() - cellSizeX / 2.0;        if (input.getWest() > west) {          west=input.getWest();        }        rows=(int)(Math.ceil((north - south) / cellSizeY));        cols=(int)(Math.ceil((east - west) / cellSizeX));        east=west + cols * cellSizeX;        south=north - rows * cellSizeY;        output=new WhiteboxRaster(outputHeader,north,south,east,west,rows,cols,input.getDataScale(),dataType,noData,noData);      } else {        output=new WhiteboxRaster(outputHeader,"rw",inputFiles[k],dataType,noData);      }      output.setPreferredPalette(input.getPreferredPalette());      pq.clear();      RowPriorityGridCell cell;      int numRecords=clip.getNumberOfRecords();      int count=0;      int progressCount=(int)(numRecords / 100.0);      if (progressCount <= 0) {        progressCount=1;      }      ShapeFileRecord record;      for (      RecordInfo ri : myList) {        record=clip.getRecord(ri.recNumber - 1);        geometry=getXYFromShapefileRecord(record);        numPoints=geometry.length;        numParts=partData.length;        for (part=0; part < numParts; part++) {          if (!partHoleData[part]) {            box=new BoundingBox();            startingPointInPart=partData[part];            if (part < numParts - 1) {              endingPointInPart=partData[part + 1];            } else {              endingPointInPart=numPoints;            }            for (i=startingPointInPart; i < endingPointInPart; i++) {              if (geometry[i][1] < box.getMinY()) {                box.setMinY(geometry[i][1]);              }              if (geometry[i][1] > box.getMaxY()) {                box.setMaxY(geometry[i][1]);              }            }            topRow=output.getRowFromYCoordinate(box.getMaxY());            bottomRow=output.getRowFromYCoordinate(box.getMinY());            for (row=topRow; row <= bottomRow; row++) {              edgeList.clear();              foundIntersection=false;              rowYCoord=output.getYCoordinateFromRow(row);              for (i=startingPointInPart; i < endingPointInPart - 1; i++) {                if (isBetween(rowYCoord,geometry[i][1],geometry[i + 1][1])) {                  y1=geometry[i][1];                  y2=geometry[i + 1][1];                  if (y2 != y1) {                    x1=geometry[i][0];                    x2=geometry[i + 1][0];                    xPrime=(x1 + (rowYCoord - y1) / (y2 - y1) * (x2 - x1));                    edgeList.add(new Integer(output.getColumnFromXCoordinate(xPrime)));                    foundIntersection=true;                  }                }              }              if (foundIntersection) {                numEdges=edgeList.size();                if (numEdges == 2) {                  stCol=Math.min(edgeList.get(0),edgeList.get(1));                  endCol=Math.max(edgeList.get(0),edgeList.get(1));                  for (col=stCol; col <= endCol; col++) {                    if (maintainInputDimensions) {                      value=input.getValue(row,col);                    } else {                      inputX=output.getXCoordinateFromColumn(col);                      inputCol=input.getColumnFromXCoordinate(inputX);                      inputY=output.getYCoordinateFromRow(row);                      inputRow=input.getRowFromYCoordinate(inputY);                      value=input.getValue(inputRow,inputCol);                    }                    pq.add(new RowPriorityGridCell(row,col,value));                  }                } else {                  Integer[] edgeArray=new Integer[numEdges];                  edgeList.toArray(edgeArray);                  Arrays.sort(edgeArray);                  boolean fillFlag=true;                  for (i=0; i < numEdges - 1; i++) {                    stCol=edgeArray[i];                    endCol=edgeArray[i + 1];                    if (fillFlag) {                      for (col=stCol; col <= endCol; col++) {                        if (maintainInputDimensions) {                          value=input.getValue(row,col);                        } else {                          inputX=output.getXCoordinateFromColumn(col);                          inputCol=input.getColumnFromXCoordinate(inputX);                          inputY=output.getYCoordinateFromRow(row);                          inputRow=input.getRowFromYCoordinate(inputY);                          value=input.getValue(inputRow,inputCol);                        }                        pq.add(new RowPriorityGridCell(row,col,value));                      }                    }                    fillFlag=!fillFlag;                  }                }              }            }          }        }        if (pq.size() >= flushSize) {          j=0;          numCellsToWrite=pq.size();          do {            cell=pq.poll();            output.setValue(cell.row,cell.col,cell.z);            j++;            if (j % 1000 == 0) {              if (cancelOp) {                cancelOperation();                return;              }              updateProgress("Writing to Output (" + df.format(j) + " of "+ df.format(numCellsToWrite)+ "):",(int)(j * 100.0 / numCellsToWrite));            }          } while (pq.size() > 0);        }        if (cancelOp) {          cancelOperation();          return;        }        count++;        if (count % progressCount == 0) {          progress++;          updateProgress(progress);        }      }      j=0;      numCellsToWrite=pq.size();      do {        cell=pq.poll();        output.setValue(cell.row,cell.col,cell.z);        j++;        if (j % 1000 == 0) {          if (cancelOp) {            cancelOperation();            return;          }          updateProgress("Writing to Output (" + df.format(j) + " of "+ df.format(numCellsToWrite)+ "):",(int)(j * 100.0 / numCellsToWrite));        }      } while (pq.size() > 0);      output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      output.addMetadataEntry("Created on " + new Date());      output.flush();      output.close();    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void unpack(File sourceZip,final File targetDir) throws IOException {  ZipFile zipFile=null;  try {    zipFile=new ZipFile(sourceZip);    Enumeration<? extends ZipEntry> entriesEnum=zipFile.entries();    while (entriesEnum.hasMoreElements()) {      unpackEntry(zipFile,entriesEnum.nextElement(),targetDir);    }  }  finally {    try {      if (zipFile != null) {        zipFile.close();      }    } catch (    IOException e) {    }  }}  }
class C{  public VectorClock incremented(int nodeId,long time){  if (nodeId < 0 || nodeId > Short.MAX_VALUE)   throw new IllegalArgumentException(nodeId + " is outside the acceptable range of node ids.");  List<ClockEntry> newversions=Lists.newArrayList(versions);  boolean found=false;  int index=0;  for (; index < newversions.size(); index++) {    if (newversions.get(index).getNodeId() == nodeId) {      found=true;      break;    } else     if (newversions.get(index).getNodeId() > nodeId) {      found=false;      break;    }  }  if (found) {    newversions.set(index,newversions.get(index).incremented());  } else   if (index < newversions.size() - 1) {    newversions.add(index,new ClockEntry((short)nodeId,1));  } else {    if (newversions.size() > MAX_NUMBER_OF_VERSIONS)     throw new IllegalStateException("Vector clock is full!");    newversions.add(index,new ClockEntry((short)nodeId,1));  }  return new VectorClock(newversions,time);}  }
class C{  private static ReuseResult loadBitmapReuseExact(ImageSource source,Bitmap dest) throws ImageLoadException {  ImageMetadata metadata=source.getImageMetadata();  boolean tryReuse=false;  if (dest.isMutable() && dest.getWidth() == metadata.getW() && dest.getHeight() == metadata.getH()) {    if (Build.VERSION.SDK_INT >= 19) {      tryReuse=true;    } else     if (Build.VERSION.SDK_INT >= 11) {      if (metadata.getFormat() == ImageFormat.JPEG || metadata.getFormat() == ImageFormat.PNG) {        tryReuse=true;      }    }  }  if (tryReuse) {    return source.loadBitmap(dest);  } else {    return new ReuseResult(loadBitmap(source),false);  }}  }
class C{  public static boolean isBeanPropertySetter(Method method){  return getBeanPropertySetterPrefixLength(method) != 0;}  }
class C{  private static Object clone(Object object){  if (object == null) {    return null;  }  Class c=object.getClass();  Object result=null;  try {    Method m=c.getMethod("clone",(Class[])null);    if (Modifier.isPublic(m.getModifiers())) {      try {        result=m.invoke(object,(Object[])null);      } catch (      Exception e) {        e.printStackTrace();      }    }  } catch (  NoSuchMethodException e) {    result=object;  }  return result;}  }
class C{  protected void clearOutEvents(){}  }
class C{  public SVGOMFEGaussianBlurElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  public static void success(MessageInfo messageInfo,Date startTime,Date endTime){  if (monitorAgentImpl != null) {    monitorAgentImpl.success(messageInfo,startTime,endTime);  }}  }
class C{  void moveFieldsIntoClasses(ClassMemberDeclaration declaration){  Node classMembers=declaration.classNode.getLastChild();  String fieldName=declaration.memberName;  Node fieldNode=Node.newString(Token.MEMBER_VARIABLE_DEF,fieldName);  fieldNode.setJSDocInfo(declaration.jsDoc);  fieldNode.setStaticMember(declaration.isStatic);  nodeComments.moveComment(declaration.exprRoot,fieldNode);  if (declaration.rhs == null) {    declaration.exprRoot.detachFromParent();  } else   if (canPromoteFieldInitializer(declaration)) {    declaration.exprRoot.detachFromParent();    declaration.rhs.detachFromParent();    fieldNode.addChildToBack(declaration.rhs);  } else {    nodeComments.clearComment(declaration.exprRoot);  }  addFieldToClassMembers(classMembers,fieldNode);  compiler.reportCodeChange();}  }
class C{  public boolean isStylesheetParsingComplete(){  return m_parsingComplete;}  }
class C{  public static String stringFor(int error){switch (error) {case cudaSuccess:    return "cudaSuccess";case cudaErrorMissingConfiguration:  return "cudaErrorMissingConfiguration";case cudaErrorMemoryAllocation:return "cudaErrorMemoryAllocation";case cudaErrorInitializationError:return "cudaErrorInitializationError";case cudaErrorLaunchFailure:return "cudaErrorLaunchFailure";case cudaErrorPriorLaunchFailure:return "cudaErrorPriorLaunchFailure";case cudaErrorLaunchTimeout:return "cudaErrorLaunchTimeout";case cudaErrorLaunchOutOfResources:return "cudaErrorLaunchOutOfResources";case cudaErrorInvalidDeviceFunction:return "cudaErrorInvalidDeviceFunction";case cudaErrorInvalidConfiguration:return "cudaErrorInvalidConfiguration";case cudaErrorInvalidDevice:return "cudaErrorInvalidDevice";case cudaErrorInvalidValue:return "cudaErrorInvalidValue";case cudaErrorInvalidPitchValue:return "cudaErrorInvalidPitchValue";case cudaErrorInvalidSymbol:return "cudaErrorInvalidSymbol";case cudaErrorMapBufferObjectFailed:return "cudaErrorMapBufferObjectFailed";case cudaErrorUnmapBufferObjectFailed:return "cudaErrorUnmapBufferObjectFailed";case cudaErrorInvalidHostPointer:return "cudaErrorInvalidHostPointer";case cudaErrorInvalidDevicePointer:return "cudaErrorInvalidDevicePointer";case cudaErrorInvalidTexture:return "cudaErrorInvalidTexture";case cudaErrorInvalidTextureBinding:return "cudaErrorInvalidTextureBinding";case cudaErrorInvalidChannelDescriptor:return "cudaErrorInvalidChannelDescriptor";case cudaErrorInvalidMemcpyDirection:return "cudaErrorInvalidMemcpyDirection";case cudaErrorAddressOfConstant:return "cudaErrorAddressOfConstant";case cudaErrorTextureFetchFailed:return "cudaErrorTextureFetchFailed";case cudaErrorTextureNotBound:return "cudaErrorTextureNotBound";case cudaErrorSynchronizationError:return "cudaErrorSynchronizationError";case cudaErrorInvalidFilterSetting:return "cudaErrorInvalidFilterSetting";case cudaErrorInvalidNormSetting:return "cudaErrorInvalidNormSetting";case cudaErrorMixedDeviceExecution:return "cudaErrorMixedDeviceExecution";case cudaErrorCudartUnloading:return "cudaErrorCudartUnloading";case cudaErrorUnknown:return "cudaErrorUnknown";case cudaErrorNotYetImplemented:return "cudaErrorNotYetImplemented";case cudaErrorMemoryValueTooLarge:return "cudaErrorMemoryValueTooLarge";case cudaErrorInvalidResourceHandle:return "cudaErrorInvalidResourceHandle";case cudaErrorNotReady:return "cudaErrorNotReady";case cudaErrorInsufficientDriver:return "cudaErrorInsufficientDriver";case cudaErrorSetOnActiveProcess:return "cudaErrorSetOnActiveProcess";case cudaErrorInvalidSurface:return "cudaErrorInvalidSurface";case cudaErrorNoDevice:return "cudaErrorNoDevice";case cudaErrorECCUncorrectable:return "cudaErrorECCUncorrectable";case cudaErrorSharedObjectSymbolNotFound:return "cudaErrorSharedObjectSymbolNotFound";case cudaErrorSharedObjectInitFailed:return "cudaErrorSharedObjectInitFailed";case cudaErrorUnsupportedLimit:return "cudaErrorUnsupportedLimit";case cudaErrorDuplicateVariableName:return "cudaErrorDuplicateVariableName";case cudaErrorDuplicateTextureName:return "cudaErrorDuplicateTextureName";case cudaErrorDuplicateSurfaceName:return "cudaErrorDuplicateSurfaceName";case cudaErrorDevicesUnavailable:return "cudaErrorDevicesUnavailable";case cudaErrorInvalidKernelImage:return "cudaErrorInvalidKernelImage";case cudaErrorNoKernelImageForDevice:return "cudaErrorNoKernelImageForDevice";case cudaErrorIncompatibleDriverContext:return "cudaErrorIncompatibleDriverContext";case cudaErrorPeerAccessAlreadyEnabled:return "cudaErrorPeerAccessAlreadyEnabled";case cudaErrorPeerAccessNotEnabled:return "cudaErrorPeerAccessNotEnabled";case cudaErrorDeviceAlreadyInUse:return "cudaErrorDeviceAlreadyInUse";case cudaErrorProfilerDisabled:return "cudaErrorProfilerDisabled";case cudaErrorProfilerNotInitialized:return "cudaErrorProfilerNotInitialized";case cudaErrorProfilerAlreadyStarted:return "cudaErrorProfilerAlreadyStarted";case cudaErrorProfilerAlreadyStopped:return "cudaErrorProfilerAlreadyStopped";case cudaErrorAssert:return "cudaErrorAssert";case cudaErrorTooManyPeers:return "cudaErrorTooManyPeers";case cudaErrorHostMemoryAlreadyRegistered:return "cudaErrorHostMemoryAlreadyRegistered";case cudaErrorHostMemoryNotRegistered:return "cudaErrorHostMemoryNotRegistered";case cudaErrorOperatingSystem:return "cudaErrorOperatingSystem";case cudaErrorPeerAccessUnsupported:return "cudaErrorPeerAccessUnsupported";case cudaErrorLaunchMaxDepthExceeded:return "cudaErrorLaunchMaxDepthExceeded";case cudaErrorLaunchFileScopedTex:return "cudaErrorLaunchFileScopedTex";case cudaErrorLaunchFileScopedSurf:return "cudaErrorLaunchFileScopedSurf";case cudaErrorSyncDepthExceeded:return "cudaErrorSyncDepthExceeded";case cudaErrorLaunchPendingCountExceeded:return "cudaErrorLaunchPendingCountExceeded";case cudaErrorNotPermitted:return "cudaErrorNotPermitted";case cudaErrorNotSupported:return "cudaErrorNotSupported";case cudaErrorHardwareStackError:return "cudaErrorHardwareStackError";case cudaErrorIllegalInstruction:return "cudaErrorIllegalInstruction";case cudaErrorMisalignedAddress:return "cudaErrorMisalignedAddress";case cudaErrorInvalidAddressSpace:return "cudaErrorInvalidAddressSpace";case cudaErrorInvalidPc:return "cudaErrorInvalidPc";case cudaErrorIllegalAddress:return "cudaErrorIllegalAddress";case cudaErrorInvalidPtx:return "cudaErrorInvalidPtx";case cudaErrorInvalidGraphicsContext:return "cudaErrorInvalidGraphicsContext";case cudaErrorStartupFailure:return "cudaErrorStartupFailure";case jcudaInternalError:return "jcudaInternalError";}if (error >= cudaErrorApiFailureBase) {return stringFor(error - cudaErrorApiFailureBase);}return "INVALID cudaError: " + error;}  }
class C{  protected void displayActionIsRunning(){  testLabel.setIcon(WORKING_ICON);}  }
class C{  protected void parseT() throws ParseException, IOException {  current=reader.read();  skipSpaces();  boolean expectNumber=true;  for (; ; ) {switch (current) {default :      if (expectNumber)       reportUnexpected(current);    return;case '+':case '-':case '.':case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':  break;}float x=parseFloat();skipCommaSpaces();float y=parseFloat();pathHandler.curvetoQuadraticSmoothAbs(x,y);expectNumber=skipCommaSpaces2();}}  }
class C{  public CStateChange(final IMouseState nextState,final boolean yfiles){  m_nextState=nextState;  m_yfiles=yfiles;}  }
class C{  private void handleRawAggregatedColumnVisibility(boolean rawMode){  for (  Column column : Column.values()) {    if (rawMode) {      if (column.showInRawMode && !column.showInAggregatedMode && !ShowHideColumnsHandler.isColumnHidden(this.getClass(),column.name)) {        Integer width=ShowHideColumnsHandler.getRememberedColumnWidth(this.getClass(),column.name);        getMappedTreeViewerColumn(column).getColumn().setWidth((null != width) ? width.intValue() : column.width);      } else       if (!column.showInRawMode && column.showInAggregatedMode) {        getMappedTreeViewerColumn(column).getColumn().setWidth(0);      }    } else {      if (!column.showInRawMode && column.showInAggregatedMode && !ShowHideColumnsHandler.isColumnHidden(this.getClass(),column.name)) {        Integer width=ShowHideColumnsHandler.getRememberedColumnWidth(this.getClass(),column.name);        getMappedTreeViewerColumn(column).getColumn().setWidth((null != width) ? width.intValue() : column.width);      } else       if (column.showInRawMode && !column.showInAggregatedMode) {        getMappedTreeViewerColumn(column).getColumn().setWidth(0);      }    }  }}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:17.049 -0500",hash_original_method="E8683E6729C8449A45D83189604DFAE9",hash_generated_method="98259AAF2CBADD065607919899437452") public Dialog(Context context,int theme){  this(context,theme,true);}  }
class C{  public T userLanguage(String value){  setString(USER_LANGUAGE,value);  return (T)this;}  }
class C{  public void println(char[] x){  printHeader();  for (int i=0; i < size(); i++)   ((PrintStream)m_Streams.get(i)).println(x);  flush();}  }
class C{  public final boolean isMoreAccessibleThan(Proto anotherProto){  if (anotherProto.isPrivate()) {    return this.isPackageLocal() || this.isProtected() || this.isPublic();  }  if (anotherProto.isPackageLocal()) {    return this.isProtected() || this.isPublic();  }  if (anotherProto.isProtected()) {    return this.isPublic();  }  return false;}  }
class C{  public static Calendar formatDate(Date date,Calendar cal,Appendable out) throws IOException {  StringBuilder sb=out instanceof StringBuilder ? (StringBuilder)out : new StringBuilder();  if (cal == null)   cal=Calendar.getInstance(TimeZone.getTimeZone("GMT"),Locale.ROOT);  cal.setTime(date);  int i=cal.get(Calendar.YEAR);  sb.append(i);  sb.append('-');  i=cal.get(Calendar.MONTH) + 1;  if (i < 10)   sb.append('0');  sb.append(i);  sb.append('-');  i=cal.get(Calendar.DAY_OF_MONTH);  if (i < 10)   sb.append('0');  sb.append(i);  sb.append('T');  i=cal.get(Calendar.HOUR_OF_DAY);  if (i < 10)   sb.append('0');  sb.append(i);  sb.append(':');  i=cal.get(Calendar.MINUTE);  if (i < 10)   sb.append('0');  sb.append(i);  sb.append(':');  i=cal.get(Calendar.SECOND);  if (i < 10)   sb.append('0');  sb.append(i);  i=cal.get(Calendar.MILLISECOND);  if (i != 0) {    sb.append('.');    if (i < 100)     sb.append('0');    if (i < 10)     sb.append('0');    sb.append(i);    int lastIdx=sb.length() - 1;    if (sb.charAt(lastIdx) == '0') {      lastIdx--;      if (sb.charAt(lastIdx) == '0') {        lastIdx--;      }      sb.setLength(lastIdx + 1);    }  }  sb.append('Z');  if (out != sb)   out.append(sb);  return cal;}  }
class C{  public TopologyValidationError(int errorType){  this(errorType,null);}  }
class C{  public static int flashCount(){  return info().flashCount;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodesetprefix02.class,args);}  }
class C{  @Override protected void showAdvancedItems(){  super.showAdvancedItems();  _details.remove(baudBoxLabel);  _details.remove(baudBox);  portBoxLabel.setText("Bluetooth adapter: ");}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  int value;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  int dataSize;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  ArrayList<Double> data=new ArrayList<Double>();  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          data.clear();          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData && filterShape[a] == 1) {              data.add(z);            }          }          Collections.sort(data);          dataSize=data.size();          z=data.get(0);          value=1;          for (a=1; a < dataSize; a++) {            if (data.get(a) != z) {              z=data.get(a);              value++;            }          }          outputFile.setValue(row,col,value);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public int read() throws IOException {  if (chunkLength <= 0) {    readToData(false);    if (chunkLength <= 0)     return -1;  }  chunkLength--;  return is.read();}  }
class C{  protected <N,T extends N>ExtensionPointImpl<T> registerExtensionPoint(@NotNull ExtensionPointName<N> name,@NotNull Class<T> type){  extensionsArea.registerExtensionPoint(name.getName(),type.getName(),new DefaultPluginDescriptor(PluginId.getId(type.getName()),type.getClassLoader()));  return extensionsArea.getExtensionPoint(name.getName());}  }
class C{  protected double calculateSeriesWidth(double space,CategoryAxis axis,int categories,int series){  double factor=1.0 - getItemMargin() - axis.getLowerMargin()- axis.getUpperMargin();  if (categories > 1) {    factor=factor - axis.getCategoryMargin();  }  return (space * factor) / (categories * series);}  }
class C{  @Parameterized.Parameters public static Collection<Object[]> data(){  return Arrays.asList(new Object[][]{{"true",true,new BooleanArgumentMock()},{"16",(byte)16,new ByteArgumentMock()},{"'F'",'F',new CharacterArgumentMock()},{"",Context.class,new ContextArgumentMock()},{"16",16d,new DoubleArgumentMock()},{"16",16f,new FloatArgumentMock()},{"16",16,new IntegerArgumentMock()},{"16",16L,new LongArgumentMock()},{"16",(short)16,new ShortArgumentMock()},{"'foo'","foo",new StringArgumentMock()}});}  }
class C{  protected void initCiphers() throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, RandomDataGenerationException, InvalidAlgorithmParameterException, NoSuchProviderException {  super.initCiphers();  this.gcmEngine=new GCMBlockCipher(new AESFastEngine());}  }
class C{  public static _Resolution fromString(final String value) throws SOAPSerializationException {  return (_Resolution)Enumeration.fromString(value,_Resolution.VALUES_TO_INSTANCES);}  }
class C{  public String toString(String pattern){  if (pattern == null) {    return toString();  }  return DateTimeFormat.forPattern(pattern).print(this);}  }
class C{  public AbOuterListView(Context context,AttributeSet attrs,int defStyle){  super(context,attrs,defStyle);}  }
class C{  public double sum(){  Cell[] as=cells;  double sum=Double.longBitsToDouble(base);  if (as != null) {    for (    Cell a : as) {      if (a != null) {        sum+=Double.longBitsToDouble(a.value);      }    }  }  return sum;}  }
class C{  private boolean isStartable(){  return (!isRunning() && this.starting.compareAndSet(false,true));}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  bldgName=null;  capacity=null;  coordX=null;  coordY=null;  doit=null;  externalId=null;  id=null;  name=null;  room=true;  type=null;  bldgId=null;  ignoreTooFar=Boolean.FALSE;  ignoreRoomCheck=Boolean.FALSE;  examEnabled.clear();  examCapacity=null;  eventStatus=RoomTypeOption.getDefaultStatus();}  }
class C{  public TradeOrder onPlaceOrder(Contract contract,TradeOrder tradeOrder) throws BrokerModelException {  try {    if (m_client.isConnected()) {synchronized (tradeOrder) {        if (null == tradeOrder.getOrderKey()) {          tradeOrder.setOrderKey(orderKey.getAndIncrement());        }        if (null == tradeOrder.getClientId()) {          tradeOrder.setClientId(this.m_clientId);        }        tradeOrder=m_tradePersistentModel.persistTradeOrder(tradeOrder);        _log.debug("Order Placed Key: " + tradeOrder.getOrderKey());        com.ib.client.Contract IBContract=TWSBrokerModel.getIBContract(contract);        com.ib.client.Order IBOrder=TWSBrokerModel.getIBOrder(tradeOrder);        logContract(IBContract);        logTradeOrder(IBOrder);        m_client.placeOrder(tradeOrder.getOrderKey(),IBContract,IBOrder);        return tradeOrder;      }    } else {      throw new BrokerModelException(tradeOrder.getOrderKey(),3120,"Client not conected to TWS order cannot be placed");    }  } catch (  Exception ex) {    throw new BrokerModelException(tradeOrder.getOrderKey(),3130,"Could not save or place TradeOrder: " + tradeOrder.getOrderKey() + " Msg: "+ ex.getMessage());  }}  }
class C{  private int sendAlertToResponsible(MWFResponsible responsible,ArrayList<Integer> list,MWFProcess process,String subject,String message,File pdf){  int counter=0;  if (responsible.isInvoker())   ; else   if (MWFResponsible.RESPONSIBLETYPE_Human.equals(responsible.getResponsibleType()) && responsible.getAD_User_ID() != 0 && !list.contains(new Integer(responsible.getAD_User_ID()))) {    if (m_client.sendEMail(responsible.getAD_User_ID(),subject,message,pdf))     counter++;    list.add(new Integer(responsible.getAD_User_ID()));  } else   if (MWFResponsible.RESPONSIBLETYPE_Organization.equals(responsible.getResponsibleType())) {    PO document=process.getPO();    if (document != null) {      MOrgInfo org=MOrgInfo.get(getCtx(),document.getAD_Org_ID(),null);      if (org.getSupervisor_ID() != 0 && !list.contains(new Integer(org.getSupervisor_ID()))) {        if (m_client.sendEMail(org.getSupervisor_ID(),subject,message,pdf))         counter++;        list.add(new Integer(org.getSupervisor_ID()));      }    }  } else   if (MWFResponsible.RESPONSIBLETYPE_Role.equals(responsible.getResponsibleType()) && responsible.getAD_Role_ID() != 0) {    MUserRoles[] userRoles=MUserRoles.getOfRole(getCtx(),responsible.getAD_Role_ID());    for (int i=0; i < userRoles.length; i++) {      MUserRoles roles=userRoles[i];      if (!roles.isActive())       continue;      int AD_User_ID=roles.getAD_User_ID();      if (!list.contains(new Integer(AD_User_ID))) {        if (m_client.sendEMail(AD_User_ID,subject,message,pdf))         counter++;        list.add(new Integer(AD_User_ID));      }    }  }  return counter;}  }
class C{  public int hashCode(){  return (int)value;}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public void updateWriteStats(OFMessage ofm){switch (ofm.getType()) {case BARRIER_REPLY:    ctrWriteBarrierReply.increment();  break;case BARRIER_REQUEST:ctrWriteBarrierRequest.increment();break;case ECHO_REPLY:ctrWriteEchoReply.increment();break;case ECHO_REQUEST:ctrWriteEchoRequest.increment();break;case ERROR:ctrWriteError.increment();break;case EXPERIMENTER:ctrWriteExperimenter.increment();break;case FEATURES_REPLY:ctrWriteFeaturesReply.increment();break;case FEATURES_REQUEST:ctrWriteFeaturesRequest.increment();break;case FLOW_MOD:ctrWriteFlowMod.increment();break;case FLOW_REMOVED:ctrWriteFlowRemoved.increment();break;case GET_ASYNC_REPLY:ctrWriteGetAsyncReply.increment();break;case GET_ASYNC_REQUEST:ctrWriteGetAsyncRequest.increment();break;case GET_CONFIG_REPLY:ctrWriteGetConfigReply.increment();break;case GET_CONFIG_REQUEST:ctrWriteGetConfigRequest.increment();break;case GROUP_MOD:ctrWriteGroupMod.increment();break;case HELLO:ctrWriteHello.increment();break;case METER_MOD:ctrWriteMeterMod.increment();break;case PACKET_IN:ctrWritePacketIn.increment();break;case PACKET_OUT:ctrWritePacketOut.increment();break;case PORT_MOD:ctrWritePortMod.increment();break;case PORT_STATUS:ctrWritePortStatus.increment();break;case QUEUE_GET_CONFIG_REPLY:ctrWriteQueueGetConfigReply.increment();break;case QUEUE_GET_CONFIG_REQUEST:ctrWriteQueueGetConfigRequest.increment();break;case ROLE_REPLY:ctrWriteRoleReply.increment();break;case ROLE_REQUEST:ctrWriteRoleRequest.increment();break;case SET_ASYNC:ctrWriteSetAsync.increment();break;case SET_CONFIG:ctrWriteSetConfig.increment();break;case STATS_REPLY:ctrWriteStatsReply.increment();break;case STATS_REQUEST:ctrWriteStatsRequest.increment();break;case TABLE_MOD:ctrWriteTableMod.increment();break;case BUNDLE_ADD_MESSAGE:ctrWriteBundleAdd.increment();break;case BUNDLE_CONTROL:ctrWriteBundleControl.increment();break;case REQUESTFORWARD:ctrWriteRequestForward.increment();break;case ROLE_STATUS:ctrWriteRoleStatus.increment();break;case TABLE_STATUS:ctrWriteTableStatus.increment();break;default :logger.warn(ofm.getType().toString() + ": Invalid OpenFlow Messaqe!");break;}}  }
class C{  public boolean printComments(Vertex element,Writer writer,String indent,boolean newLine,Network network) throws IOException {  List<Relationship> comments=element.orderedRelationships(Primitive.COMMENT);  if (comments != null && !comments.isEmpty()) {    if (newLine) {      writer.write("\r\n");    }    for (    Relationship comment : comments) {      writer.write(indent);      writer.write((String)comment.getTarget().getData());    }    if (newLine) {      writer.write(indent);    }    return true;  }  return false;}  }
class C{  public void load(){}  }
class C{  public boolean removeEdges(Node node1,Node node2){  return removeEdges(getEdges(node1,node2));}  }
class C{  final public long estimate_get(){  return cat.estimate_get();}  }
class C{  public CIEXYChromaticityDiagram(){  initComponents();}  }
class C{  public void addKeyBytes(KeyCacheObject key,boolean retVal,GridCacheContext ctx) throws IgniteCheckedException {  if (keys == null) {    keys=new ArrayList<>(keysCount());    partIds=new ArrayList<>(keysCount());  }  keys.add(key);  partIds.add(key.partition());  retVals[idx]=retVal;  idx++;}  }
class C{  public void produceEvent(LogConnection conn,long seqno,short fragno,boolean lastFrag,String shardId,Timestamp ts) throws ReplicatorException, InterruptedException {  ReplDBMSEvent rde=helper.createEvent(seqno,fragno,lastFrag,shardId,ts);  if (logger.isDebugEnabled()) {    logger.debug("Writing event: seqno=" + seqno + " timestamp="+ ts.toString());  }  THLEvent thlEvent=new THLEvent(rde.getSourceId(),rde);  conn.store(thlEvent,false);  conn.commit();}  }
class C{  private boolean canHandleStopButton(DevicesInfo mDeviceInfo){  return (mDeviceInfo.getSubType().contains("RAEX")) || (mDeviceInfo.getSubType().contains("A-OK")) || (mDeviceInfo.getSubType().contains("RollerTrol"))|| (mDeviceInfo.getSubType().contains("Harrison"))|| (mDeviceInfo.getSubType().contains("RFY"))|| (mDeviceInfo.getSubType().contains("ASA"))|| (mDeviceInfo.getSubType().contains("T6 DC"));}  }
class C{  void queueIsEmpty(){  for (Node p=head; p != null; p=p.next) {    Itr it=p.get();    if (it != null) {      p.clear();      it.shutdown();    }  }  head=null;  itrs=null;}  }
class C{  boolean waitForData() throws InterruptedException {  return false;}  }
class C{  public static String normalizeUri(String uri) throws URISyntaxException {  uri=normalizeSpecialCharacters(uri);  Matcher m=RFC_3986.matcher(uri);  m.matches();  String scheme=m.group(1);  String authority=m.group(2);  String path=m.group(3);  String query=m.group(4);  String fragment=m.group(5);  StringBuilder sb=new StringBuilder(uri.length());  if (scheme != null) {    normalizeScheme(scheme,sb);    sb.append(':');  }  if (authority != null) {    if ("".equals(authority) && !Strings.eqIgnoreCase("file",scheme)) {      throw new URISyntaxException(uri,"Blank authority");    }    sb.append("//");    normalizeAuthority(authority,sb);  } else   if (scheme != null && !(Strings.eqIgnoreCase("file",scheme) || isOpaque(scheme))) {    throw new URISyntaxException(uri,"Missing authority");  }  if (path.length() != 0 || sb.length() != 0) {    normalizePath(path,sb.length() != 0 && !isOpaque(scheme),sb);  }  if (query != null) {    sb.append('?');    normalizeQuery(query,sb);  }  if (fragment != null) {    sb.append('#');    normalizeFragment(fragment,sb);  }  return sb.toString();}  }
class C{  public static void displayHelp(){  System.out.println("Usage:");  System.out.println("\tCase 1: WordSegmenting -modeldir <model directory> -inputfile <input data file>");  System.out.println("\tCase 2: WordSegmenting -modeldir <model directory> -inputdir <input data directory>");  System.out.println("Where:");  System.out.println("\t<model directory> is the directory contain the model and option files");  System.out.println("\t<input data file> is the file containing input sentences that need to");  System.out.println("\tbe tagged (each sentence on a line)");  System.out.println("\t<input data directory> is the directory containing multiple input data files (.tkn)");  System.out.println();}  }
class C{  public double weight(Instance instance) throws Exception {  int subset;  if (m_isLeaf) {    return 1;  }  subset=m_localModel.whichSubset(instance);  if (subset == -1) {    return (m_localModel.weights(instance))[indeX] * m_sons[indeX].weight(instance);  }  if (subset == indeX) {    return m_sons[indeX].weight(instance);  }  return 0;}  }
class C{  private void handleConfigurableResources(FacesContext context,boolean provideJQuery,boolean provideBootstrap,List<UIComponent> resources,UIViewRoot view){  boolean isResourceAccepted;  for (  UIComponent resource : resources) {    final String resourceLibrary=(String)resource.getAttributes().get("library");    final String resourceName=(String)resource.getAttributes().get("name");    isResourceAccepted=true;    if (resourceName != null && CONFIGURABLE_LIBRARY_NAME.equals(resourceLibrary)) {      if (!provideJQuery && resourceName.startsWith(JQUERY_PREFIX_RESOURCE_IDENTIFIER)) {        isResourceAccepted=false;      } else       if (!provideBootstrap && resourceName.startsWith(BOOTSTRAP_PREFIX_RESOURCE_IDENTIFIER)) {        isResourceAccepted=false;      }    }    if (!isResourceAccepted)     removeResource(context,resource,view);  }}  }
class C{  private void addCategoryToTree(DefaultMutableTreeNode node,String[] names){  if (names.length == 0) {    return;  }  boolean matched=false;  for (@SuppressWarnings("unchecked") Enumeration<DefaultMutableTreeNode> e=node.children(); e.hasMoreElements(); ) {    DefaultMutableTreeNode childNode=e.nextElement();    String nodeName=(String)childNode.getUserObject();    if (nodeName.equals(names[0])) {      if (names.length > 1) {        addCategoryToTree(childNode,Arrays.copyOfRange(names,1,names.length));        matched=true;      } else {      }    }  }  if (!matched) {    DefaultMutableTreeNode root=node;    for (int i=0; i < names.length; i++) {      DefaultMutableTreeNode newNode=new DefaultMutableTreeNode(names[i]);      root.add(newNode);      root=newNode;    }  }}  }
class C{  public void switchMemory(String location,boolean isSchema){}  }
class C{  @SuppressWarnings("deprecation") public int replaceBlocks(final Region region,final Set<BaseBlock> filter,final BaseBlock replacement) throws MaxChangedBlocksException {  return this.replaceBlocks(region,filter,new SingleBlockPattern(replacement));}  }
class C{  @BeforeClass public static void beforeClass() throws Exception {  assumeTrue(CanConnect.to(new InetSocketAddress(CASSANDRA_HOST,CASSANDRA_PORT)));  VaultRule vaultRule=new VaultRule();  vaultRule.before();  if (!vaultRule.prepare().hasSecretBackend("cassandra")) {    vaultRule.prepare().mountSecret("cassandra");  }  VaultOperations vaultOperations=vaultRule.prepare().getVaultOperations();  Map<String,String> connection=new HashMap<>();  connection.put("hosts",CASSANDRA_HOST);  connection.put("username",CASSANDRA_USERNAME);  connection.put("password",CASSANDRA_PASSWORD);  vaultOperations.write(String.format("%s/config/connection","cassandra"),connection);  Map<String,String> role=new HashMap<>();  role.put("creation_cql",CREATE_USER_AND_GRANT_CQL);  role.put("consistency","All");  vaultOperations.write("cassandra/roles/readonly",role);}  }
class C{  public static String quoteAndEscape(String source,char quoteChar,char[] quotingTriggers){  return quoteAndEscape(source,quoteChar,new char[]{quoteChar},quotingTriggers,'\\',false);}  }
class C{  public Pos3D scale(double scale){  return scale(scale,scale,scale);}  }
class C{  public DriverTask deleteVolumeSnapshot(VolumeSnapshot snapshot){  DellSCDriverTask task=new DellSCDriverTask("deleteVolumeSnapshot");  try {    StorageCenterAPI api=connectionManager.getConnection(snapshot.getStorageSystemId());    api.expireReplay(snapshot.getNativeId());    task.setStatus(TaskStatus.READY);  } catch (  StorageCenterAPIException|DellSCDriverException dex) {    String error=String.format("Error deleting snapshot %s: %s",snapshot.getNativeId(),dex);    LOG.error(error);    task.setFailed(error);  }  return task;}  }
class C{  public static double distance(Geo v1,Geo v2){  return v1.distance(v2);}  }
class C{  public T remove(QuadTreeLeaf<T> leaf){  if (children == null) {    for (    QuadTreeLeaf<T> qtl : new ArrayList<QuadTreeLeaf<T>>(items)) {      if (leaf.object == qtl.object) {        items.remove(qtl);        return qtl.object;      }    }  } else {    QuadTreeNode<T> node=getChild(leaf.latitude,leaf.longitude);    if (node != null) {      return node.remove(leaf);    }  }  return null;}  }
class C{  static protected String doubleToString(double d){  if (Double.isInfinite(d) || Double.isNaN(d)) {    return "null";  }  String string=Double.toString(d);  if (string.indexOf('.') > 0 && string.indexOf('e') < 0 && string.indexOf('E') < 0) {    while (string.endsWith("0")) {      string=string.substring(0,string.length() - 1);    }    if (string.endsWith(".")) {      string=string.substring(0,string.length() - 1);    }  }  return string;}  }
class C{  static int readUnsignedShort(final byte[] b,final int index){  return ((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF);}  }
class C{  public static boolean canExtractItems(Object extractor,World world,int i,int j,int k){  for (  IExtractionHandler handler : extractionHandlers) {    if (!handler.canExtractItems(extractor,world,i,j,k)) {      return false;    }  }  return true;}  }
class C{  public void testOverwriteWithTokens() throws Exception {  File configHome=new File(configuration.getHome());  assertTrue("Could not find a proper configuration home.",configHome.exists() && configHome.isDirectory());  File existingFile=createFile(configHome,"existingfile2","helloworld");  assertEquals("helloworld",readFile(existingFile));  String fileName="simpleCopyWithOverwrite";  String fileContents="goodbye@token1@.";  File file1=createFile(configFileDirectory,fileName,fileContents);  FileConfig configFile=new FileConfig();  configFile.setFile(getAbsolutePath(file1));  configFile.setToFile("existingfile2");  configFile.setOverwrite("true");  configFile.setConfigfile("true");  configuration.setProperty("token1"," everyone");  testCopy(configFile,"existingfile2","goodbye everyone.");  assertEquals("goodbye everyone.",readFile(existingFile));}  }
class C{  public InternalContextAdapterImpl(Context c){  context=c;  if (!(c instanceof InternalHousekeepingContext)) {    icb=new InternalContextBase();  } else {    icb=(InternalHousekeepingContext)context;  }  if (c instanceof InternalEventContext) {    iec=(InternalEventContext)context;  }}  }
class C{  public void deleteAllRemoteFiles(){  int count=DBHelper.getInstance().deleteAllRemoteFiles();  Log.w(TAG,String.format("Deleted %s Remotefiles from database.",count));  ImageCache cache=Controller.getInstance().getImageCache();  if (cache != null && cache.deleteAllCachedFiles())   Log.d(TAG,"Deleting cached files was successful."); else   Log.e(TAG,"Deleting cached files failed at least partially, there were errors!");}  }
class C{  public boolean isTaxIncluded(){  Object oo=get_Value(COLUMNNAME_IsTaxIncluded);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Statement likeEndsWith(String keyword){  return like('%' + keyword);}  }
class C{  public GpsLocator(){  currPosition=new GpsFix(false,0.0f,0.0f);  listeners=new ArrayList<GpsPositionListener>();}  }
class C{  static NodeTextRep prependToNodeText(NodeTextRep nodeRep,String str){  NodeTextRep result=nodeRep.clone();  for (int i=0; i < nodeRep.nodeText.length; i++) {    if (i == 0) {      result.nodeText[0]=str + result.nodeText[0];    } else {      result.nodeText[i]=StringHelper.copyString(" ",str.length()) + result.nodeText[i];    }    adjustMappingPairVector(1,str.length(),result.mapping[i]);  }  return result;}  }
class C{  @Override public Object create(final ConfigurableFactoryContext ctx){  return new ConditionAndActionArea(getCondition(ctx),getAction(ctx),getWidth(ctx),getHeight(ctx));}  }
class C{  protected FunctionBlockSourceImpl(){  super();}  }
class C{  public ClockEntry(ClockEntry other){  __isset_bitfield=other.__isset_bitfield;  this.nodeId=other.nodeId;  this.version=other.version;}  }
class C{  private void removeFromPositionsList(List<Position> positions,Position position,boolean orderedByOffset){  int size=positions.size();  int index=computeIndexInPositionList(positions,orderedByOffset ? position.offset : position.offset + position.length - 1,orderedByOffset);  if (index < size && positions.get(index) == position) {    positions.remove(index);    return;  }  int back=index - 1;  int forth=index + 1;  while (back >= 0 || forth < size) {    if (back >= 0) {      if (position == positions.get(back)) {        positions.remove(back);        return;      }      back--;    }    if (forth < size) {      if (position == positions.get(forth)) {        positions.remove(forth);        return;      }      forth++;    }  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean alpha=evalBool(stack.pop());  int h=getInt(stack);  int w=getInt(stack);  java.awt.image.BufferedImage bi=(java.awt.image.BufferedImage)stack.pop();  if (Sage.EMBEDDED)   return null;  return alpha ? ImageUtils.createBestScaledImage(bi,w,h) : ImageUtils.createBestOpaqueScaledImage(bi,w,h);}  }
class C{  private void assertPivotStats(String message,PivotField constraint,QueryResponse response){  if (null == constraint.getFieldStatsInfo()) {    log.info("No stats to check for => " + message);    return;  }  Map<String,FieldStatsInfo> actualFieldStatsInfoMap=response.getFieldStatsInfo();  for (  FieldStatsInfo pivotStats : constraint.getFieldStatsInfo().values()) {    String statsKey=pivotStats.getName();    FieldStatsInfo actualStats=actualFieldStatsInfoMap.get(statsKey);    if (actualStats == null) {      log.info("Requested stats missing in verification query, pivot stats: " + pivotStats);      assertEquals("Special Count",0L,pivotStats.getCount().longValue());      assertEquals("Special Missing",constraint.getCount(),pivotStats.getMissing().longValue());    } else {      assert actualStats != null;      String msg=" of " + statsKey + " => "+ message;      assertEquals("Count" + msg,pivotStats.getCount(),actualStats.getCount());      assertEquals("Missing" + msg,pivotStats.getMissing(),actualStats.getMissing());      assertEquals("Min" + msg,pivotStats.getMin(),actualStats.getMin());      assertEquals("Max" + msg,pivotStats.getMax(),actualStats.getMax());      assertNumerics("Sum" + msg,pivotStats.getSum(),actualStats.getSum());      assertNumerics("Mean" + msg,pivotStats.getMean(),actualStats.getMean());      assertNumerics("Stddev" + msg,pivotStats.getStddev(),actualStats.getStddev());      assertNumerics("SumOfSquares" + msg,pivotStats.getSumOfSquares(),actualStats.getSumOfSquares());    }  }  if (constraint.getFieldStatsInfo().containsKey("sk2")) {    assertEquals("had stats sk2, but not another stat?",2,constraint.getFieldStatsInfo().size());  } else {    assertEquals("only expected 1 stat",1,constraint.getFieldStatsInfo().size());    assertTrue("not sk1 or sk3",constraint.getFieldStatsInfo().containsKey("sk1") || constraint.getFieldStatsInfo().containsKey("sk3"));  }}  }
class C{  public Axis(int i){  final PhongMaterial redMaterial=new PhongMaterial();  redMaterial.setDiffuseColor(Color.DARKRED);  redMaterial.setSpecularColor(Color.RED);  final PhongMaterial greenMaterial=new PhongMaterial();  greenMaterial.setDiffuseColor(Color.DARKGREEN);  greenMaterial.setSpecularColor(Color.GREEN);  final PhongMaterial blueMaterial=new PhongMaterial();  blueMaterial.setDiffuseColor(Color.DARKBLUE);  blueMaterial.setSpecularColor(Color.BLUE);  final Box xAxis=new Box(i,2,2);  final Box yAxis=new Box(2,i,2);  final Box zAxis=new Box(2,2,i);  Affine xp=new Affine();  xp.setTx(i / 2);  xAxis.getTransforms().add(xp);  Label xText=new Label("+X");  xText.getTransforms().add(xp);  Affine yp=new Affine();  yp.setTy(i / 2);  yAxis.getTransforms().add(yp);  Label yText=new Label("+Y");  yText.getTransforms().add(yp);  Affine zp=new Affine();  zp.setTz(i / 2);  Affine zTextAffine=new Affine();  zTextAffine.setTz(i / 2);  zTextAffine.setTx(i / 2);  zTextAffine.appendRotation(-90,0,0,0,1,0,0);  zTextAffine.appendRotation(180,0,0,0,0,0,1);  zAxis.getTransforms().add(zp);  Label zText=new Label("+Z");  zText.getTransforms().add(zTextAffine);  xAxis.setMaterial(redMaterial);  yAxis.setMaterial(greenMaterial);  zAxis.setMaterial(blueMaterial);  getChildren().addAll(xAxis,yAxis,zAxis,xText,yText,zText);}  }
class C{  public static void drawMasked(Bitmap src,Drawable mask,Bitmap dest){  drawMasked(src,mask,dest,CLEAR_COLOR);}  }
class C{  private String[] parse(JetStreamBeanConfigurationDo obj){  if (obj == null)   return null;  String beanDefinition=obj.getBeanDefinition();  try {    String[] results=beanDefinition.split(":")[1].split(",");    return results;  } catch (  RuntimeException ex) {    return null;  }}  }
class C{  private Stage initStage(String layout,String title){  Stage newStage=new Stage();  initStage(newStage,layout,title);  newStage.initModality(Modality.APPLICATION_MODAL);  return newStage;}  }
class C{  public boolean isAutoScale(){  return (autoScale);}  }
class C{  private void onTriggerModifyed(boolean saved){  mChangeSaved=saved;  mSaveChangeBtn.setEnabled(!saved);}  }
class C{  public boolean isMultiLine(){  return this.lineStart < this.lineEnd;}  }
class C{  @Override public synchronized void acceptInstance(InstanceEvent e){  m_busy=true;  if (m_completed == null) {    m_completed=new HashMap<Object,Instances>();    m_incrementalSavers=new HashMap<Object,ArffSaver>();    m_finishedCount=0;    m_incrementalCounter=0;  }  if (e.getStatus() == InstanceEvent.FORMAT_AVAILABLE) {    if (m_completed.containsKey(e.getSource())) {      if (m_log != null) {        String msg=statusMessagePrefix() + "Resetting appender.";        m_log.statusMessage(msg);        m_log.logMessage("[Appender] " + msg + " New start of stream detected before "+ "all incoming streams have finished!");      }      m_completed=new HashMap<Object,Instances>();      m_incrementalSavers=new HashMap<Object,ArffSaver>();      m_incrementalCounter=0;      m_completeHeader=null;      m_finishedCount=0;    }    m_completed.put(e.getSource(),e.getStructure());    if (m_completed.size() == m_listenees.size()) {      try {        if (m_log != null) {          String msg=statusMessagePrefix() + "Making output header";          m_log.statusMessage(msg);          m_log.logMessage("[Appender] " + msg);        }        m_completeHeader=makeOutputHeader();        m_ie.setStructure(m_completeHeader);        notifyInstanceListeners(m_ie);        if (m_incrementalSavers.size() > 0) {          for (          ArffSaver s : m_incrementalSavers.values()) {            s.writeIncremental(null);            File tmpFile=s.retrieveFile();            ArffLoader loader=new ArffLoader();            loader.setFile(tmpFile);            Instances tempStructure=loader.getStructure();            Instance tempLoaded=loader.getNextInstance(tempStructure);            while (tempLoaded != null) {              Instance converted=makeOutputInstance(m_completeHeader,tempLoaded);              m_ie.setStatus(InstanceEvent.INSTANCE_AVAILABLE);              m_ie.setInstance(converted);              notifyInstanceListeners(m_ie);              m_incrementalCounter++;              if (m_incrementalCounter % 10000 == 0) {                if (m_log != null) {                  m_log.statusMessage(statusMessagePrefix() + "Processed " + m_incrementalCounter+ " instances");                }              }              tempLoaded=loader.getNextInstance(tempStructure);            }          }          m_incrementalSavers.clear();        }      } catch (      Exception e1) {        String msg=statusMessagePrefix() + "ERROR: unable to create output instances structure.";        if (m_log != null) {          m_log.statusMessage(msg);          m_log.logMessage("[Appender] " + e1.getMessage());        }        stop();        e1.printStackTrace();        m_busy=false;        return;      }    }    m_busy=false;    return;  }  if (e.getStatus() == InstanceEvent.BATCH_FINISHED || e.getStatus() == InstanceEvent.INSTANCE_AVAILABLE) {    Instance currentI=e.getInstance();    if (m_completeHeader == null) {      if (currentI != null) {        ArffSaver saver=m_incrementalSavers.get(e.getSource());        if (saver == null) {          saver=new ArffSaver();          try {            File tmpFile=File.createTempFile("weka",".arff");            saver.setFile(tmpFile);            saver.setRetrieval(weka.core.converters.Saver.INCREMENTAL);            saver.setInstances(new Instances(currentI.dataset(),0));            m_incrementalSavers.put(e.getSource(),saver);          } catch (          IOException e1) {            stop();            e1.printStackTrace();            String msg=statusMessagePrefix() + "ERROR: unable to save instance to temp file";            if (m_log != null) {              m_log.statusMessage(msg);              m_log.logMessage("[Appender] " + e1.getMessage());            }            m_busy=false;            return;          }        }        try {          saver.writeIncremental(currentI);          if (e.getStatus() == InstanceEvent.BATCH_FINISHED) {            m_finishedCount++;          }        } catch (        IOException e1) {          stop();          e1.printStackTrace();          String msg=statusMessagePrefix() + "ERROR: unable to save instance to temp file";          if (m_log != null) {            m_log.statusMessage(msg);            m_log.logMessage("[Appender] " + e1.getMessage());          }          m_busy=false;          return;        }      }    } else {      if (currentI != null) {        int code=InstanceEvent.INSTANCE_AVAILABLE;        if (e.getStatus() == InstanceEvent.BATCH_FINISHED) {          m_finishedCount++;          if (m_finishedCount == m_listenees.size()) {            code=InstanceEvent.BATCH_FINISHED;          }        }        Instance newI=makeOutputInstance(m_completeHeader,currentI);        m_ie.setStatus(code);        m_ie.setInstance(newI);        notifyInstanceListeners(m_ie);        m_incrementalCounter++;        if (m_incrementalCounter % 10000 == 0) {          if (m_log != null) {            m_log.statusMessage(statusMessagePrefix() + "Processed " + m_incrementalCounter+ " instances");          }        }        if (code == InstanceEvent.BATCH_FINISHED) {          if (m_log != null) {            m_log.statusMessage(statusMessagePrefix() + "Finished");          }          m_completed=null;          m_incrementalSavers=null;          m_incrementalCounter=0;          m_completeHeader=null;          m_finishedCount=0;        }      }    }  }  m_busy=false;}  }
class C{  public FamilyName(){  super(KEY);}  }
class C{  protected void bindEvents(){}  }
class C{  public QueryIndex(String field,QueryIndexType type,boolean asc,String name){  fields=new LinkedHashMap<>();  fields.put(field,asc);  this.type=type;  this.name=name;}  }
class C{  public boolean isSetMessage(){  return this.message != null;}  }
class C{  public static ArrayList<LogicCircuit> removeIdenticalTUs(ArrayList<LogicCircuit> unique_lcs,GateLibrary gate_library,PartLibrary part_library){  HashMap<String,LogicCircuit> unique_repressor_assignments=new HashMap<>();  for (int i=0; i < unique_lcs.size(); ++i) {    LogicCircuit lc=unique_lcs.get(i);    for (    Gate g : lc.get_Gates()) {      if (g.Type == Gate.GateType.INPUT) {        continue;      }      for (      Wire w : g.get_variable_wires().get("x")) {        for (        Wire wi : lc.get_Wires()) {          if (w.Index == wi.Index) {            w.To=wi.To;          }        }      }    }    PlasmidUtil.setGateParts(lc,gate_library,part_library);    PlasmidUtil.setTxnUnits(lc,gate_library);    ArrayList<String> tus=new ArrayList<String>();    String asn="";    for (    Gate g : lc.get_logic_gates()) {      Evaluate.refreshGateAttributes(g,gate_library);      asn+=g.Name;      ArrayList<String> promoter_names=new ArrayList<>();      String rbs="";      String cds="";      for (      Part p : g.get_txn_units().get(0)) {        if (p.get_type().equalsIgnoreCase("promoter")) {          promoter_names.add(p.get_name());        }        if (p.get_type().equalsIgnoreCase("rbs")) {          rbs=p.get_name();        }        if (p.get_type().equalsIgnoreCase("cds")) {          cds=p.get_name();        }      }      Collections.sort(promoter_names);      String tu="";      for (      String s : promoter_names) {        tu+=s;      }      tu+=rbs;      tu+=cds;      tus.add(tu);    }    Collections.sort(tus);    asn="";    for (    String s : tus) {      asn+=s + "_";    }    if (!unique_repressor_assignments.containsKey(asn)) {      if (!asn.contains("LmrA") && !asn.contains("PsrA")) {        unique_repressor_assignments.put(asn,lc);      }    }  }  return new ArrayList<>(unique_repressor_assignments.values());}  }
class C{  public void stem(){  k=i - 1;  if (k > 1) {    step1();    step2();    step3();    step4();    step5();    step6();  }  i_end=k + 1;  i=0;}  }
class C{  protected void drawItemLabel(Graphics2D g2,PlotOrientation orientation,XYDataset dataset,int series,int item,double x,double y,boolean negative){  XYItemLabelGenerator generator=getItemLabelGenerator(series,item);  if (generator != null) {    Font labelFont=getItemLabelFont(series,item);    Paint paint=getItemLabelPaint(series,item);    g2.setFont(labelFont);    g2.setPaint(paint);    String label=generator.generateLabel(dataset,series,item);    ItemLabelPosition position;    if (!negative) {      position=getPositiveItemLabelPosition(series,item);    } else {      position=getNegativeItemLabelPosition(series,item);    }    Point2D anchorPoint=calculateLabelAnchorPoint(position.getItemLabelAnchor(),x,y,orientation);    TextUtilities.drawRotatedString(label,g2,(float)anchorPoint.getX(),(float)anchorPoint.getY(),position.getTextAnchor(),position.getAngle(),position.getRotationAnchor());  }}  }
class C{  public IMouseState createNodeClickedRightState(final Node n,final MouseEvent event){  final CNodeClickedRightState<NodeType,EdgeType> state=new CNodeClickedRightState<NodeType,EdgeType>(this,m_graph,n);  m_factory.createNodeClickedRightAction().execute(state,event);  return state;}  }
class C{  public static int msToSamples(int ms,int sampleRate,int channels){  return (int)(((long)ms) * sampleRate * channels / 1000);}  }
class C{  public PlayerTradeSlot(final String name){  super(name);}  }
class C{  static Object[] toArrayImpl(Collection<?> c){  return fillArray(c,new Object[c.size()]);}  }
class C{  public boolean throwsException(SootClass e){  return exceptions != null && exceptions.contains(e);}  }
class C{  private static Method internalFindMethod(Class<?> start,String methodName,int argCount,Class args[]){  Method method=null;  for (Class<?> cl=start; cl != null; cl=cl.getSuperclass()) {    Method methods[]=getPublicDeclaredMethods(cl);    for (int i=0; i < methods.length; i++) {      method=methods[i];      if (method == null) {        continue;      }      if (method.getName().equals(methodName)) {        Type[] params=method.getGenericParameterTypes();        if (params.length == argCount) {          if (args != null) {            boolean different=false;            if (argCount > 0) {              for (int j=0; j < argCount; j++) {                if (TypeResolver.erase(TypeResolver.resolveInClass(start,params[j])) != args[j]) {                  different=true;                  continue;                }              }              if (different) {                continue;              }            }          }          return method;        }      }    }  }  method=null;  Class ifcs[]=start.getInterfaces();  for (int i=0; i < ifcs.length; i++) {    method=internalFindMethod(ifcs[i],methodName,argCount,null);    if (method != null) {      break;    }  }  return method;}  }
class C{  public static double distL1(int[] h1,int[] h2){  assert (h1.length == h2.length);  double sum=0d;  for (int i=0; i < h1.length; i++) {    sum+=Math.abs(h1[i] - h2[i]);  }  return sum / h1.length;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.336 -0500",hash_original_method="A0088B5FD0255BCF9789E7655D1F3782",hash_generated_method="BB63D045235D0F2D29909303E4AA51F6") public void drawPicture(Picture picture,Rect dst){  save();  translate(dst.left,dst.top);  if (picture.getWidth() > 0 && picture.getHeight() > 0) {    scale((float)dst.width() / picture.getWidth(),(float)dst.height() / picture.getHeight());  }  drawPicture(picture);  restore();}  }
class C{  public void deleteAll(){  logger.info("deleting all sources & buffers...");  while (sources.size() > 0) {    deleteSource(sources.get(0),true);  }  sources.clear();  buffers.clear();}  }
class C{  @HLEFunction(nid=0xE162CB14,version=150) public int sceNetAdhocctlGetPeerList(TPointer32 sizeAddr,@CanBeNull TPointer buf){  checkInitialized();  int size=sizeAddr.getValue();  SceNetAdhocctlPeerInfo peerInfo=new SceNetAdhocctlPeerInfo();  sizeAddr.setValue(peerInfo.sizeof() * peers.size());  if (log.isDebugEnabled()) {    log.debug(String.format("sceNetAdhocctlGetPeerList returning size=%d",sizeAddr.getValue()));  }  if (buf.isNotNull()) {    int offset=0;    for (    AdhocctlPeer peer : peers) {      if (offset + peerInfo.sizeof() > size || peer == null) {        break;      }      if (log.isDebugEnabled()) {        log.debug(String.format("sceNetAdhocctlGetPeerList returning %s at 0x%08X",peer,buf.getAddress() + offset));      }      peerInfo.nickName=peer.nickName;      peerInfo.macAddress=new pspNetMacAddress();      peerInfo.macAddress.setMacAddress(peer.macAddress);      peerInfo.timestamp=peer.timestamp;      peerInfo.write(buf,offset);      offset+=peerInfo.sizeof();    }    fillNextPointersInLinkedList(buf,offset,peerInfo.sizeof());  }  return 0;}  }
class C{  private static int jdiffModifierToReflectionFormat(String name,XmlPullParser parser){  int modifier=0;  for (int i=0; i < parser.getAttributeCount(); i++) {    modifier|=modifierDescriptionToReflectedType(name,parser.getAttributeName(i),parser.getAttributeValue(i));  }  return modifier;}  }
class C{  private RAbstractVector toVector(RAbstractVector x,int nonOneIndex){  RAbstractVector result=x.copy();  result.setDimensions(null);  RList dimNames=x.getDimNames(dimNamesAttrProfile);  if (noDimNamesProfile.profile(dimNames != null) && nonOneIndex < dimNames.getLength()) {    result.setNames(ensureStringVector(dimNames.getDataAt(nonOneIndex)));  }  return result;}  }
class C{  public void markSuccess(){  successMarks.incrementAndGet();}  }
class C{  public Luffa224(){  super();}  }
class C{  public final double[] distributionForInstance(Instance instance,boolean useLaplace) throws Exception {  double[] doubles=new double[instance.numClasses()];  for (int i=0; i < doubles.length; i++) {    if (!useLaplace) {      doubles[i]=getProbs(i,instance,1);    } else {      doubles[i]=getProbsLaplace(i,instance,1);    }  }  return doubles;}  }
class C{  public GeoQuery(final String ip){  this.ip=ip;  location=null;}  }
class C{  public static void zipFiles(OutputStream output,File... files) throws IOException {  try (ZipOutputStream zipOut=new ZipOutputStream(output)){    for (    File f : files) {      if (f.isDirectory()) {        addDirectoryEntry(zipOut,f.getName());        final String parentPath=f.getParentFile().getAbsolutePath();        addDirectoryRecursively(zipOut,parentPath,f,IoUtil.ANY_FILTER);      } else       if (f.isFile()) {        addFileEntry(zipOut,f.getName(),f);      }    }  } }  }
class C{  private void pickOnlyProvider() throws ServletException {  try {    Entry<OAuthLoginProvider> loginProvider=Iterables.getOnlyElement(loginProviders);    defaultAuthPlugin=loginProvider.getPluginName();    defaultAuthProvider=loginProvider.getExportName();  } catch (  NoSuchElementException e) {    throw new ServletException("No OAuth login provider installed");  }catch (  IllegalArgumentException e) {  }}  }
class C{  private int doGetColPos(String colName) throws LookupException {  int pos=-1;  int columnNamesSize=m_columnNames.size();  for (int i=0; i < columnNamesSize; i++) {    if (m_columnNames.elementAt(i).equals(colName)) {      pos=i;      break;    }  }  if (-1 == pos) {    throw new LookupException("Invalid Column Name");  }  return (pos);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String s=getString(stack);  Agent a=(Agent)stack.pop();  int newMask=a.getAgentMask();  if (s != null && s.length() > 0)   newMask=newMask | Agent.NETWORK_MASK; else   newMask=newMask & (~Agent.NETWORK_MASK);  if (Permissions.hasPermission(Permissions.PERMISSION_RECORDINGSCHEDULE,stack.getUIMgr())) {    Agent noob=Carny.getInstance().updateFavorite(a,newMask,a.getTitle(),a.getCategory(),a.getSubCategory(),a.getPersonObj(),a.getRole(),a.getRated(),a.getYear(),a.getPR(),s,a.getChannelName(),a.getSlotType(),a.getTimeslots(),a.getKeyword());    return (noob == a) ? Boolean.TRUE : Boolean.FALSE;  } else   return Boolean.FALSE;}  }
class C{  public void body(String namespace,String name,String text) throws Exception {}  }
class C{  @Override public boolean isExpired(){  return mAuthenticationResult.isExpired();}  }
class C{  public static MethodTraceCoverageTestFitness createMethodTestFitness(BytecodeInstruction instruction){  if (instruction == null)   throw new IllegalArgumentException("null given");  return createMethodTestFitness(instruction.getClassName(),instruction.getMethodName());}  }
class C{  private Base64(){}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public void onExceededDatabaseQuota(String url,String databaseIdentifier,long currentQuota,long estimatedSize,long totalUsedQuota,WebStorage.QuotaUpdater quotaUpdater){  LOG.d(LOG_TAG,"onExceededDatabaseQuota estimatedSize: %d  currentQuota: %d  totalUsedQuota: %d",estimatedSize,currentQuota,totalUsedQuota);  quotaUpdater.updateQuota(MAX_QUOTA);}  }
class C{  @Override public synchronized void updateObject(int columnIndex,Object x) throws SQLException {  updateObjectInternal(columnIndex,x,null,0);}  }
class C{  public static GridLayout createClearGridLayout(boolean makeColumnsEqualWidth,int numColumns){  GridLayout layout=new GridLayout();  layout.marginHeight=CLEAR_MARGIN_HEIGHT;  layout.marginWidth=CLEAR_MARGIN_WIDTH;  layout.marginTop=CLEAR_MARGIN_TOP;  layout.marginBottom=CLEAR_MARGIN_BOTTOM;  layout.marginLeft=CLEAR_MARGIN_LEFT;  layout.marginRight=CLEAR_MARGIN_RIGHT;  layout.horizontalSpacing=CLEAR_HORIZONTAL_SPACING;  layout.verticalSpacing=CLEAR_VERTICAL_SPACING;  layout.makeColumnsEqualWidth=makeColumnsEqualWidth;  layout.numColumns=numColumns;  return layout;}  }
class C{  public static boolean shouldAnimationStop(){  return false;}  }
class C{  public int[] updateResultsForRewrite(int waitedSize,boolean hasException){  this.waitedSize=waitedSize;  long totalAffectedRows=0;  Iterator<Integer> iterator=affectedRows.iterator();  while (iterator.hasNext()) {    totalAffectedRows+=iterator.next().intValue();  }  int realSize=(int)Math.max(waitedSize,totalAffectedRows);  int baseResult=totalAffectedRows == realSize ? 1 : Statement.SUCCESS_NO_INFO;  int[] arr=new int[realSize];  int counter=0;  iterator=affectedRows.iterator();  while (iterator.hasNext()) {    int affectedRow=iterator.next().intValue();    for (int i=0; i < affectedRow; i++)     arr[counter++]=baseResult;  }  for (; counter < realSize; )   arr[counter++]=hasException ? Statement.EXECUTE_FAILED : Statement.SUCCESS_NO_INFO;  return arr;}  }
class C{  public static Response createSharedSecretErrorResponse(){  throw new UnsupportedOperationException("Shared Secret Support is not currently implemented");}  }
class C{  private void validateJobSignalRequest(JobSignalRequest request){  Assert.hasText(request.getId(),"A job id must be specified.");  Assert.hasText(request.getReceiveTaskId(),"A receive task id must be specified.");  parameterHelper.validateParameters(request.getParameters());  if (request.getS3PropertiesLocation() != null) {    s3PropertiesLocationHelper.validate(request.getS3PropertiesLocation());  }  request.setId(request.getId().trim());  request.setReceiveTaskId(request.getReceiveTaskId().trim());}  }
class C{  public boolean isUser1Dim(){  Object oo=get_Value(COLUMNNAME_IsUser1Dim);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private SpeechletResponse newAskResponse(String stringOutput,boolean isOutputSsml,String repromptText,boolean isRepromptSsml){  OutputSpeech outputSpeech, repromptOutputSpeech;  if (isOutputSsml) {    outputSpeech=new SsmlOutputSpeech();    ((SsmlOutputSpeech)outputSpeech).setSsml(stringOutput);  } else {    outputSpeech=new PlainTextOutputSpeech();    ((PlainTextOutputSpeech)outputSpeech).setText(stringOutput);  }  if (isRepromptSsml) {    repromptOutputSpeech=new SsmlOutputSpeech();    ((SsmlOutputSpeech)repromptOutputSpeech).setSsml(repromptText);  } else {    repromptOutputSpeech=new PlainTextOutputSpeech();    ((PlainTextOutputSpeech)repromptOutputSpeech).setText(repromptText);  }  Reprompt reprompt=new Reprompt();  reprompt.setOutputSpeech(repromptOutputSpeech);  return SpeechletResponse.newAskResponse(outputSpeech,reprompt);}  }
class C{  @Ignore("edge case, not implemented yet") public void test_distinctTermScanOptimizer_bound_context(){  new Helper(){{      final long rangeCount_sp1=1000L;{        given=select(projection(varNode(s)),where(statementPatternNode(varNode(s),varNode(p),varNode(o),constantNode(a),property(Annotations.ESTIMATED_CARDINALITY,rangeCount_sp1))),DISTINCT);      }{        final long newRangeCount=(long)((1.0 / (store.isQuads() ? 4 : 3)) * rangeCount_sp1);        expected=select(projection(varNode(s)),where(statementPatternNode(varNode(s),varNode(p),varNode(o),constantNode(a),property(Annotations.ESTIMATED_CARDINALITY,newRangeCount),property(Annotations.DISTINCT_TERM_SCAN_VAR,varNode(s)))),NOT_DISTINCT,NOT_REDUCED);      }    }  };}  }
class C{  protected void clearOutEvents(){}  }
class C{  public static int hashCode(long[] field){  return field == null || field.length == 0 ? 0 : Arrays.hashCode(field);}  }
class C{  public boolean isTextFieldValid(){  return isTextValid(timeTextField.getText());}  }
class C{  private void cmd_execute(){  lConnect.setEnabled(fExecute.isSelected());  fConnect.setReadWrite(fExecute.isSelected());  lTarget.setEnabled(!fExecute.isSelected());  fTarget.setEnabled(!fExecute.isSelected());}  }
class C{  @SuppressWarnings("rawtypes") public RectangleDecorator(DrawingCanvas inner,ElementCanvas canvas,IActiveRectangle m){  super(inner);  this.canvas=canvas;  this.model=m;}  }
class C{  public static float min(float a,float b){  return (a <= b) ? a : b;}  }
class C{  public MavenCoordinates toBase(){  if (this.classifier == null && this.extension == null) {    return this;  }  return new MavenCoordinates(this.groupId,this.artifactId,this.version);}  }
class C{  protected void prepare(){  StringBuffer sb=new StringBuffer("Record_ID=").append(getRecord_ID());  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("C_AcctSchema_ID"))     p_C_AcctSchema_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("PostingType"))     p_PostingType=(String)para[i].getParameter(); else     if (name.equals("C_Period_ID"))     p_C_Period_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("DateAcct")) {      p_DateAcct_From=(Timestamp)para[i].getParameter();      p_DateAcct_To=(Timestamp)para[i].getParameter_To();    } else     if (name.equals("PA_Hierarchy_ID"))     p_PA_Hierarchy_ID=para[i].getParameterAsInt(); else     if (name.equals("AD_Org_ID"))     p_AD_Org_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("Account_ID"))     p_Account_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("C_BPartner_ID"))     p_C_BPartner_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("M_Product_ID"))     p_M_Product_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("C_Project_ID"))     p_C_Project_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("C_Activity_ID"))     p_C_Activity_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("C_SalesRegion_ID"))     p_C_SalesRegion_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("C_Campaign_ID"))     p_C_Campaign_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("User1_ID"))     p_User1_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("User2_ID"))     p_User2_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("UserElement1_ID"))     p_UserElement1_ID=((BigDecimal)para[i].getParameter()).intValue(); else     if (name.equals("UserElement2_ID"))     p_UserElement2_ID=((BigDecimal)para[i].getParameter()).intValue(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  m_parameterWhere.append("C_AcctSchema_ID=").append(p_C_AcctSchema_ID).append(" AND PostingType='").append(p_PostingType).append("'");  if (p_Account_ID != 0)   m_parameterWhere.append(" AND ").append(MReportTree.getWhereClause(getCtx(),p_PA_Hierarchy_ID,MAcctSchemaElement.ELEMENTTYPE_Account,p_Account_ID));  if (p_AD_Org_ID != 0)   m_parameterWhere.append(" AND ").append(MReportTree.getWhereClause(getCtx(),p_PA_Hierarchy_ID,MAcctSchemaElement.ELEMENTTYPE_Organization,p_AD_Org_ID));  if (p_C_BPartner_ID != 0)   m_parameterWhere.append(" AND ").append(MReportTree.getWhereClause(getCtx(),p_PA_Hierarchy_ID,MAcctSchemaElement.ELEMENTTYPE_BPartner,p_C_BPartner_ID));  if (p_M_Product_ID != 0)   m_parameterWhere.append(" AND ").append(MReportTree.getWhereClause(getCtx(),p_PA_Hierarchy_ID,MAcctSchemaElement.ELEMENTTYPE_Product,p_M_Product_ID));  if (p_C_Project_ID != 0)   m_parameterWhere.append(" AND ").append(MReportTree.getWhereClause(getCtx(),p_PA_Hierarchy_ID,MAcctSchemaElement.ELEMENTTYPE_Project,p_C_Project_ID));  if (p_C_Activity_ID != 0)   m_parameterWhere.append(" AND ").append(MReportTree.getWhereClause(getCtx(),p_PA_Hierarchy_ID,MAcctSchemaElement.ELEMENTTYPE_Activity,p_C_Activity_ID));  if (p_C_Campaign_ID != 0)   m_parameterWhere.append(" AND C_Campaign_ID=").append(p_C_Campaign_ID);  if (p_C_SalesRegion_ID != 0)   m_parameterWhere.append(" AND ").append(MReportTree.getWhereClause(getCtx(),p_PA_Hierarchy_ID,MAcctSchemaElement.ELEMENTTYPE_SalesRegion,p_C_SalesRegion_ID));  if (p_User1_ID != 0)   m_parameterWhere.append(" AND ").append(MReportTree.getWhereClause(getCtx(),p_PA_Hierarchy_ID,MAcctSchemaElement.ELEMENTTYPE_UserList1,p_User1_ID));  if (p_User2_ID != 0)   m_parameterWhere.append(" AND ").append(MReportTree.getWhereClause(getCtx(),p_PA_Hierarchy_ID,MAcctSchemaElement.ELEMENTTYPE_UserList2,p_User2_ID));  if (p_UserElement1_ID != 0)   m_parameterWhere.append(" AND UserElement1_ID=").append(p_UserElement1_ID);  if (p_UserElement2_ID != 0)   m_parameterWhere.append(" AND UserElement2_ID=").append(p_UserElement2_ID);  setDateAcct();  sb.append(" - DateAcct ").append(p_DateAcct_From).append("-").append(p_DateAcct_To);  sb.append(" - Where=").append(m_parameterWhere);  log.fine(sb.toString());}  }
class C{  private String removeSuffix(String value,String toRemove){  if ((value == null) || (toRemove == null) || !suffix(value,toRemove)) {    return value;  }  return value.substring(0,value.length() - toRemove.length());}  }
class C{  public boolean isUpperBound(){  return this.isUpperBound;}  }
class C{  @SuppressWarnings("unchecked") public static <T>T decode(String base64){  try {    byte[] b=Base64.decode(base64);    ByteArrayInputStream bais=new ByteArrayInputStream(b);    ObjectInputStream ois=new ObjectInputStream(bais);    return (T)ois.readObject();  } catch (  IOException e) {    throw new RuntimeException(e);  }catch (  ClassNotFoundException e) {    throw new RuntimeException(e);  }}  }
class C{  public ReferenceBinding[] convertToRawTypes(ReferenceBinding[] originalTypes,boolean forceErasure,boolean forceRawEnclosingType){  if (originalTypes == null)   return null;  ReferenceBinding[] convertedTypes=originalTypes;  for (int i=0, length=originalTypes.length; i < length; i++) {    ReferenceBinding originalType=originalTypes[i];    ReferenceBinding convertedType=(ReferenceBinding)convertToRawType(forceErasure ? originalType.erasure() : originalType,forceRawEnclosingType);    if (convertedType != originalType) {      if (convertedTypes == originalTypes) {        System.arraycopy(originalTypes,0,convertedTypes=new ReferenceBinding[length],0,i);      }      convertedTypes[i]=convertedType;    } else     if (convertedTypes != originalTypes) {      convertedTypes[i]=originalType;    }  }  return convertedTypes;}  }
class C{  private boolean isSupported(){  return WebSocket.isSupported();}  }
class C{  private void closeStreams(InputStream input,FileOutputStream output){  if (output != null) {    try {      output.close();    } catch (    IOException e) {      CorePluginLog.logError(e);    }  }  if (input != null) {    try {      input.close();    } catch (    IOException e) {      CorePluginLog.logError(e);    }  }}  }
class C{  public void remove(){  assertOpen();  if (db == null) {    throw new UnsupportedOperationException();  }  if (current == null) {    throw new IllegalStateException();  }  db.removeStatements(new ISPO[]{current},1);  current=null;}  }
class C{  public ConnectionConfig(jmri.jmrix.NetworkPortAdapter p){  super(p);}  }
class C{  public static String formatUTC(final long millis,final String pattern,final Locale locale){  return format(new Date(millis),pattern,UTC_TIME_ZONE,locale);}  }
class C{  public boolean supports(StringBuilder string){  for (  Dictionary dict : this.dictionaries.values()) {    if (dict.supports(string)) {      return true;    }  }  return false;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @RequirePOST public FormValidation doRunTrigger(){  FormValidation result;  try {    Jenkins instance=GitHubWebHook.getJenkinsInstance();    if (instance.hasPermission(Item.BUILD)) {      GitHubPRTrigger trigger=JobHelper.ghPRTriggerFromJob(job);      if (trigger != null) {        trigger.run();        result=FormValidation.ok("GitHub PR trigger run");        LOGGER.debug("GitHub PR trigger run for {}",job);      } else {        LOGGER.error("GitHub PR trigger not available for {}",job);        result=FormValidation.error("GitHub PR trigger not available");      }    } else {      LOGGER.warn("No permissions to run GitHub PR trigger");      result=FormValidation.error("Forbidden");    }  } catch (  Exception e) {    LOGGER.error("Can't run trigger",e);    result=FormValidation.error(e,"Can't run trigger: %s",e.getMessage());  }  return result;}  }
class C{  @Override public void afterRollback(Transaction tx){}  }
class C{  public int size(){  return (tail - head) & (elements.length - 1);}  }
class C{  public MathExpression(String expression){  this.expressionStr=expression;  this.functions=getFunctions(expression);  this.variables=new HashSet<String>();  String local=new String(expression);  for (  FunctionalTemplate ft : this.functions) {    this.variables.addAll(ft.getSlots());    local=local.replace(ft.toString(),ft.getFunction().getName() + ft.hashCode());  }  this.variables.addAll(getVariableLabels(local));  functions.stream().map(null).forEach(null);  local=local.replaceAll("[\\[\\]\\{\\}]","");  local=local.replaceAll("\\.([a-zA-Z])","_$1");  ExpressionBuilder builder=new ExpressionBuilder(local);  builder.variables(getVariableLabels(local));  exp=builder.build();}  }
class C{  private void initFrame(final GenericFrame frame,final ScriptEditor editor){  final JPanel mainPanel=new JPanel(new BorderLayout());  createAttachMenuBar(frame,editor);  mainPanel.add("North",getToolbarOpenClose(frame,editor));  mainPanel.add("Center",editor);  frame.setContentPane(mainPanel);  if (editor.getScriptFile() != null) {    frame.setTitle(editor.getScriptFile().getName());  }}  }
class C{  public void debugFinest(CharSequence message,Throwable e){  log(Level.FINEST,message,e);}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public InfoField(String id,MetaType type,VcfNumber number,String description){  mId=id;  mType=type;  mNumber=number;  mDescription=description;}  }
class C{  private void cancelTakeImage(){  mShootedPicturePath=null;  mSelectedGalleryItemsList.clear();  VectorApp.setSavedCameraImagePreview(null);  startCameraPreview();  updateUiConfiguration(UI_SHOW_CAMERA_PREVIEW,IMAGE_ORIGIN_CAMERA);}  }
class C{  public boolean showJoinPartAndQuit(){  return preferences.getBoolean(resources.getString(R.string.key_show_joinpartquit),Boolean.parseBoolean(resources.getString(R.string.default_show_joinpartquit)));}  }
class C{  public boolean match(String text,int start,int end){  if (null == text) {    throw new IllegalArgumentException();  }  if (start > end) {    return false;  }  if (this.fIgnoreWildCards) {    return (end - start == this.fLength) && this.fPattern.regionMatches(this.fIgnoreCase,0,text,start,this.fLength);  }  int segCount=this.fSegments.length;  if (segCount == 0 && (this.fHasLeadingStar || this.fHasTrailingStar)) {    return true;  }  if (start == end) {    return this.fLength == 0;  }  if (this.fLength == 0) {    return start == end;  }  int tlen=text.length();  if (start < 0) {    start=0;  }  if (end > tlen) {    end=tlen;  }  int tCurPos=start;  int bound=end - this.fBound;  if (bound < 0) {    return false;  }  int i=0;  String current=this.fSegments[i];  int segLength=current.length();  if (!this.fHasLeadingStar) {    if (!regExpRegionMatches(text,start,current,0,segLength)) {      return false;    }    ++i;    tCurPos=tCurPos + segLength;  }  if ((this.fSegments.length == 1) && (!this.fHasLeadingStar) && (!this.fHasTrailingStar)) {    return tCurPos == end;  }  while (i < segCount) {    current=this.fSegments[i];    int currentMatch;    int k=current.indexOf(fSingleWildCard);    if (k < 0) {      currentMatch=textPosIn(text,tCurPos,end,current);      if (currentMatch < 0) {        return false;      }    } else {      currentMatch=regExpPosIn(text,tCurPos,end,current);      if (currentMatch < 0) {        return false;      }    }    tCurPos=currentMatch + current.length();    i++;  }  if (!this.fHasTrailingStar && tCurPos != end) {    int clen=current.length();    return regExpRegionMatches(text,end - clen,current,0,clen);  }  return i == segCount;}  }
class C{  public void after(PropertyInfoRestRep oldProps,PropertyInfoRestRep newProps){}  }
class C{  private void refreshCallStatus(){  String callStatus=CallUtilities.getCallStatus(getContext(),mCall);  mCallStatusTextView.setText(callStatus);  mCallStatusTextView.setVisibility(TextUtils.isEmpty(callStatus) ? View.GONE : View.VISIBLE);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attributes;  NodeList elementList;  Element element;  Attr attr;  Node newNode;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagNameNS("*","address");  element=(Element)elementList.item(0);  attributes=element.getAttributes();  attr=(Attr)attributes.getNamedItemNS("http://www.usa.com","domestic");  element=(Element)elementList.item(1);  attributes=element.getAttributes();{    boolean success=false;    try {      newNode=attributes.setNamedItemNS(attr);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INUSE_ATTRIBUTE_ERR);    }    assertTrue("namednodemapsetnameditemns07",success);  }}  }
class C{  public FileInfo(){  super();}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  Log.i(TAG,"called onCreate");  super.onCreate(savedInstanceState);  getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);  setContentView(R.layout.activity_image_manipulations);  mOpenCvCameraView=(CameraBridgeViewBase)findViewById(R.id.image_manipulations_activity_surface_view);  mOpenCvCameraView.setCvCameraViewListener(this);}  }
class C{  public RealVector(float[] coordinates){  this.dimension=coordinates.length;  this.coordinates=coordinates;}  }
class C{  boolean validatePassword(final String username,final String password){  if (password.length() > 5) {    boolean allNumbers=true;    try {      Integer.parseInt(password);    } catch (    final NumberFormatException e) {      allNumbers=false;    }    if (allNumbers) {      badPasswordReason="You have used only numbers in your password. This is not a good security practice.\n" + " Are you sure that you want to use this password?";    }    boolean hasUsername=false;    if (password.contains(username)) {      hasUsername=true;    }    if (!hasUsername) {      debug("Checking if password contains a derivative of the username, trimming from the back...");      final int minUserLength=3;      for (int i=1; i < username.length(); i++) {        final String subuser=username.substring(0,username.length() - i);        debug("\tchecking for \"" + subuser + "\"...");        if (subuser.length() <= minUserLength) {          break;        }        if (password.contains(subuser)) {          hasUsername=true;          debug("Password contains username!");          break;        }      }      if (!hasUsername) {        debug("Checking if password contains a derivative of the username, trimming from the front...");        for (int i=0; i < username.length(); i++) {          final String subuser=username.substring(i);          debug("\tchecking for \"" + subuser + "\"...");          if (subuser.length() <= minUserLength) {            break;          }          if (password.contains(subuser)) {            hasUsername=true;            debug("Password contains username!");            break;          }        }      }    }    if (hasUsername) {      badPasswordReason="You have used your username or a derivative of your username in your password. This is a bad security practice.\n" + " Are you sure that you want to use this password?";      return false;    }  } else {    final String text="The password you provided is too short. It must be at least 6 characters long.";    if (isVisible()) {      JOptionPane.showMessageDialog(getOwner(),text);    } else {      LOGGER.warn(text);    }    return false;  }  return true;}  }
class C{  public MutablePeriod(ReadableDuration duration,ReadableInstant endInstant){  super(duration,endInstant,null);}  }
class C{  private void changeSelection(int clearMin,int clearMax,int setMin,int setMax){  changeSelection(clearMin,clearMax,setMin,setMax,true);}  }
class C{  public synchronized boolean loadPublicKey(){  if (!has("public_key") || !has("key_algorithm"))   return false;  String encodedKey=getString("public_key");  String algorithm=getString("key_algorithm");  PublicKey pub=IO.decodePublicKey(encodedKey,algorithm);  if (pub != null) {    public_key=pub;    key_algorithm=algorithm;    setPeerHash();    return true;  }  return false;}  }
class C{  public synchronized static <T>void registerAnother(Class<T> clazz){  try {    Class<? super T> parent=clazz.getSuperclass();    if (parent != Object.class && !isRegistered(parent)) {      registerAnother(parent);    }    Method m=clazz.getDeclaredMethod("registerConfig",(Class[])null);    if (Modifier.isStatic(m.getModifiers())) {      m.invoke((Object)null,(Object[])null);    } else {      logger.log(Level.SEVERE,"Method {0} on {1} is not static",new Object[]{m.getName(),clazz.getName()});    }  } catch (  NoSuchMethodException e) {  }catch (  InvocationTargetException e) {    logger.log(Level.WARNING,"Error attempting Config registration of " + clazz.getName(),e.getCause());  }catch (  Exception e) {    logger.log(Level.WARNING,"Error attempting Config registration of " + clazz.getName(),e);  }}  }
class C{  public static void saveStringsList(@NotNull final Element parent,@NotNull final String nodeName,@NotNull final String attrName,@NotNull final String... values){  for (  final String value : values) {    final Element node=new Element(nodeName);    node.setAttribute(attrName,value);    parent.addContent(node);  }}  }
class C{  @Override public boolean prebuild(AbstractBuild<?,?> build,BuildListener listener){  PrintStream logger=listener.getLogger();  try {    LogPrinter.print("Sending remote command to start proxy on port " + proxyPort + ".",logger);    Launcher launcher=build.getBuiltOn().createLauncher(listener);    launcher.getChannel().call(new CreateProxyCallable(new ProxyRequest(listener,proxyPort,build.getExternalizableId(),build.getWorkspace(),getDescriptor())));    build.addAction(new AddEnvironmentVariableAction(PROXY_PORT_ENVIRONMENT_KEY,Integer.toString(proxyPort)));  } catch (  Exception e) {    LogPrinter.print(e,logger);    return false;  }  return true;}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.CATCH_BLOCK;}  }
class C{  private double[] averageStackValues(double[] stack1,double[] stack2){  double[] result=new double[2];  result[0]=(stack1[0] + stack2[0]) / 2.0;  result[1]=(stack1[1] + stack2[1]) / 2.0;  return result;}  }
class C{  public static BufferedReader newReader(InputStream self,String charset) throws UnsupportedEncodingException {  return new BufferedReader(new InputStreamReader(self,charset));}  }
class C{  public synchronized Throwable initCause(Throwable throwable){  if (cause == this) {    if (throwable != this) {      cause=throwable;      return this;    }    throw new IllegalArgumentException("Cause cannot be the receiver");  }  throw new IllegalStateException("Cause already initialized");}  }
class C{  public static List<File> findClassFiles(String parentPath,String[] filenames,boolean recursive){  List<File> classFiles=new ArrayList<File>();  for (int i=0; i < filenames.length; i++) {    File f=new File(parentPath + filenames[i]);    String n=f.getAbsolutePath();    if (!f.exists()) {      System.err.println("File " + n + " does not exist - skipping");      continue;    }    if (f.isFile() && f.getName().endsWith(".class")) {      classFiles.add(f);      continue;    }    if (f.isDirectory() && recursive) {      classFiles.addAll(findClassFiles(f.getAbsolutePath() + "/",f.list(),true));    }  }  Collections.sort(classFiles);  return classFiles;}  }
class C{  public void runTest() throws Throwable {  Document doc1;  Document doc2;  Node newChild;  NodeList elementList;  Node elementNode;  Node appendedChild;  doc1=(Document)load("staff",false);  doc2=(Document)load("staff",true);  newChild=doc1.createElement("newChild");  elementList=doc2.getElementsByTagName("employee");  elementNode=elementList.item(1);{    boolean success=false;    try {      appendedChild=elementNode.appendChild(newChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.WRONG_DOCUMENT_ERR);    }    assertTrue("throw_WRONG_DOCUMENT_ERR",success);  }}  }
class C{  UpdateChecker(IgniteLogger log){  super(gridName,"grid-version-checker",log);  this.log=log.getLogger(getClass());}  }
class C{  public SVGOMFETileElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  public static HierarchyBoundsListener add(HierarchyBoundsListener a,HierarchyBoundsListener b){  return (HierarchyBoundsListener)addInternal(a,b);}  }
class C{  public del addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public List<String> composeDescription(List<String> list){  LinkedList<String> ll=new LinkedList<String>();  for (  String entry : list) {    String des=getDescription(entry);    if (des != null) {      ll.add(des);    }  }  return ll;}  }
class C{  public void achievementDelete(CommandSender sender,String[] args){  StringBuilder achievementName=new StringBuilder();  for (int i=1; i < args.length - 1; i++) {    achievementName.append(args[i]);    if (i != args.length - 2)     achievementName.append(' ');  }  Player player=null;  for (  Player currentPlayer : Bukkit.getOnlinePlayers()) {    if (currentPlayer.getName().equalsIgnoreCase(args[args.length - 1])) {      player=currentPlayer;      break;    }  }  if (player == null) {    sender.sendMessage(plugin.getChatHeader() + plugin.getPluginLang().getString("player-offline","The player PLAYER is offline!").replace("PLAYER",args[args.length - 1]));    return;  }  if (!plugin.getDb().hasPlayerAchievement(player,achievementName.toString())) {    sender.sendMessage(plugin.getChatHeader() + plugin.getPluginLang().getString("check-achievements-false","PLAYER has not received the achievement ACH!").replace("PLAYER",args[args.length - 1]).replace("ACH",achievementName));  } else {    plugin.getDb().deletePlayerAchievement(player,achievementName.toString());    sender.sendMessage(plugin.getChatHeader() + plugin.getPluginLang().getString("delete-achievements","The achievement ACH was deleted from PLAYER.").replace("PLAYER",args[args.length - 1]).replace("ACH",achievementName));  }}  }
class C{  public BetweennessCentrality(Graph<V,E> graph,Function<? super E,? extends Number> edge_weights){  for (  E e : graph.getEdges()) {    double e_weight=edge_weights.apply(e).doubleValue();    if (e_weight < 0)     throw new IllegalArgumentException(String.format("Weight for edge '%s' is < 0: %d",e,e_weight));  }  initialize(graph);  computeBetweenness(new MapBinaryHeap<V>(new BetweennessComparator()),edge_weights);}  }
class C{  private void inlineDefinitions(List<ObjectType> definitions,String uniquePrefix,MarkupDocBuilder docBuilder){  if (CollectionUtils.isNotEmpty(definitions)) {    for (    ObjectType definition : definitions) {      addInlineDefinitionTitle(definition.getName(),definition.getUniqueName(),docBuilder);      List<ObjectType> localDefinitions=buildPropertiesTable(definition.getProperties(),uniquePrefix,new DefinitionDocumentResolverFromDefinition(),docBuilder);      for (      ObjectType localDefinition : localDefinitions)       inlineDefinitions(Collections.singletonList(localDefinition),localDefinition.getUniqueName(),docBuilder);    }  }}  }
class C{  public AnnotationVisitor visitInsnAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    return mv.visitInsnAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  public Vset removeAdditionalVars(int varNumber){  if (x == fullX) {    return this;  }  long bit=(1L << varNumber);  if (varNumber >= VBITS) {    int i=(varNumber / VBITS - 1) * 2;    if (i < x.length) {      x[i]&=(bit - 1);      if (++i < x.length) {        x[i]&=(bit - 1);      }      while (++i < x.length) {        x[i]=0;      }    }  } else {    if (x.length > 0) {      x=emptyX;    }    vset&=(bit - 1);    uset&=(bit - 1);  }  return this;}  }
class C{  public static KeyPair generateKeyPair(){  KeyPair keyPair=null;  try {    KeyPairGenerator generator=KeyPairGenerator.getInstance("RSA");    generator.initialize(1024);    keyPair=generator.generateKeyPair();  } catch (  NoSuchAlgorithmException ex) {    GlowServer.logger.log(Level.SEVERE,"Unable to generate RSA key pair",ex);  }  return keyPair;}  }
class C{  @Ignore("TODO: test is disabled") @Test public void testPartitionedSerialPropagation_SenderSameAsCoordinator() throws Exception {  Integer lnPort=(Integer)vm0.invoke(null);  Integer nyPort=(Integer)vm1.invoke(null);  createCacheInVMs(nyPort,vm2,vm3);  createReceiverInVMs(vm2,vm3);  createCacheInVMs(lnPort,vm4,vm5,vm6,vm7);  vm4.invoke(null);  vm5.invoke(null);  vm4.invoke(null);  vm5.invoke(null);  vm6.invoke(null);  vm7.invoke(null);  startSenderInVMs("ln",vm4,vm5);  vm2.invoke(null);  vm3.invoke(null);  vm4.invoke(null);  vm2.invoke(null);}  }
class C{  public RoundedCornersDrawable(Drawable drawable){  super(Preconditions.checkNotNull(drawable));}  }
class C{  public void onScreenChange(int currentScreen,int lastScreen){  ImageView[] points=platformGridView.points;  for (int i=0; i < points.length; i++) {    points[i].setImageBitmap(platformGridView.grayPoint);  }  points[currentScreen].setImageBitmap(platformGridView.bluePoint);}  }
class C{  private String processFunction(String value,Variables variables){  String returnValue=value;  if (FunctionHandler.validFunction(returnValue)) {    returnValue=FunctionHandler.executeFunction(returnValue,variables);  }  return returnValue != null ? returnValue : "";}  }
class C{  public static double relativeOverlap(SpatialComparable box1,SpatialComparable box2){  final int dim=assertSameDimensionality(box1,box2);  double overlap=1.;  double vol1=1.;  double vol2=1.;  for (int i=0; i < dim; i++) {    final double box1min=box1.getMin(i);    final double box1max=box1.getMax(i);    final double box2min=box2.getMin(i);    final double box2max=box2.getMax(i);    final double omax=Math.min(box1max,box2max);    final double omin=Math.max(box1min,box2min);    if (omax <= omin) {      return 0.;    }    overlap*=omax - omin;    vol1*=box1max - box1min;    vol2*=box2max - box2min;  }  return overlap / (vol1 + vol2);}  }
class C{  public char charAt(int index){  return ' ';}  }
class C{  public void autoArrange(final List<ExecutionUnit> processes){  int unitNumber=processes.size();  List<Map<Operator,Rectangle2D>> newPositions=new ArrayList<>(unitNumber);  for (int i=0; i < unitNumber; i++) {    if (processes.get(i) == null) {      throw new IllegalArgumentException("process must not be null!");    }    Collection<Operator> sorted=processes.get(i).getOperators();    mxGraphModel graphModel=new mxGraphModel();    mxGraph graph=new mxGraph(graphModel);    Map<Operator,Object> vertexMap=new HashMap<>();    List<Operator> unconnectedOps=new LinkedList<>();    List<Operator> connectedOps=new LinkedList<>();    for (    Operator op : sorted) {      if (!isOperatorConnected(op)) {        unconnectedOps.add(op);        continue;      }      connectedOps.add(op);      Rectangle2D operatorRect=model.getOperatorRect(op);      Object opVert=graph.insertVertex(null,null,op.getName(),operatorRect.getX(),operatorRect.getY(),operatorRect.getWidth(),operatorRect.getHeight(),null);      vertexMap.put(op,opVert);    }    for (    Operator source : sorted) {      for (      OutputPort out : source.getOutputPorts().getAllPorts()) {        if (out.isConnected()) {          Operator dest=out.getDestination().getPorts().getOwner().getOperator();          if (!(dest instanceof ProcessRootOperator)) {            String value=source.getName() + " to " + dest.getName();            graph.insertEdge(null,null,value,vertexMap.get(source),vertexMap.get(dest),null);          }        }      }    }    mxHierarchicalLayout layout=new mxHierarchicalLayout(graph,SwingConstants.WEST);    layout.setInterRankCellSpacing(ProcessDrawer.GRID_X_OFFSET);    layout.execute(graph.getDefaultParent());    newPositions.add(i,new HashMap<Operator,Rectangle2D>());    for (    Operator op : connectedOps) {      mxRectangle cellBounds=graph.getCellBounds(vertexMap.get(op));      double x=cellBounds.getX() + ProcessDrawer.GRID_X_OFFSET;      double y=cellBounds.getY() + ProcessDrawer.GRID_Y_OFFSET;      if (!unconnectedOps.isEmpty()) {        y+=ProcessDrawer.OPERATOR_MIN_HEIGHT + ProcessDrawer.GRID_Y_OFFSET;      }      if (model.isSnapToGrid()) {        Point snappedPoint=ProcessDrawUtils.snap(new Point2D.Double(x,y));        newPositions.get(i).put(op,new Rectangle2D.Double(snappedPoint.getX(),snappedPoint.getY(),cellBounds.getWidth(),cellBounds.getHeight()));      } else {        newPositions.get(i).put(op,new Rectangle2D.Double(x,y,cellBounds.getWidth(),cellBounds.getHeight()));      }    }    int index=0;    for (    Operator op : unconnectedOps) {      newPositions.get(i).put(op,autoPosition(op,index,false));      ++index;    }  }  moveOperators(processes,newPositions,10,100);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.342 -0500",hash_original_method="E82D256C40CCFC0E4431BA44734EBBF3",hash_generated_method="6D5C7CC2F0D81500F711AEA9D1B3F8EF") public PChargingVectorHeader createChargingVectorHeader(String icid) throws ParseException {  if (icid == null)   throw new NullPointerException("null icid arg!");  PChargingVector chargingVector=new PChargingVector();  chargingVector.setICID(icid);  return chargingVector;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.VIRTUAL_BASE_TYPE__DECLARED_OWNED_MEMBERS:    getDeclaredOwnedMembers().clear();  return;}super.eUnset(featureID);}  }
class C{  public final boolean isResourceAbsent(Tile tile){  if (tile == null) {    String msg=Logging.getMessage("nullValue.TileIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  return tile.getLevel().isEmpty() || tile.getLevel().isResourceAbsent(this.getTileNumber(tile));}  }
class C{  public void send(final OutputStream os) throws IOException {  PacketOutputStream pos=(PacketOutputStream)os;  pos.startPacket(0);  pos.write(Packet.COM_PING);  pos.finishPacketWithoutRelease(true);  pos.releaseBuffer();}  }
class C{  @Override public boolean waitForWindowUpdate(String packageName,long timeout){  return device.waitForWindowUpdate(packageName,timeout);}  }
class C{  public ConstraintEnforcementException(String msg){  super(msg);}  }
class C{  private void collapseUpFromLastParent(final TreePath newPath){  TreePath currentParent=m_lastParent;  while (currentParent != null && !currentParent.isDescendant(newPath) && !stayExpandedContainsDescendantOf(currentParent)) {    m_tree.collapsePath(currentParent);    currentParent=currentParent.getParentPath();  }}  }
class C{  int expressionCount(){  return names.length - arity;}  }
class C{  public void exit(){  exit(awaitTerminationTimeout);}  }
class C{  public int peekChar() throws ParseException {  if (index < orig.length)   return orig[index]; else   throw new ParseException("No more characters",index);}  }
class C{  public void addAngles(Angle3D angles){  angleX+=angles.angleX;  angleY+=angles.angleY;  angleZ+=angles.angleZ;}  }
class C{  public void moorePenroseSolution(Trainable network){  Matrix inputMatrix=new Matrix(network.getTrainingSet().getInputData());  Matrix trainingMatrix=new Matrix(network.getTrainingSet().getTargetData());  fireProgressUpdate("Computing Moore-Penrose Pseudoinverse...",0);  inputMatrix=Matrices.pinv(inputMatrix);  fireProgressUpdate("Computing Weights...",50);  double[][] wOut=inputMatrix.times(trainingMatrix).getArray();  fireProgressUpdate("Setting Weights...",75);  SimnetUtils.setWeights(network.getInputNeurons(),network.getOutputNeurons(),wOut);  fireProgressUpdate("Done!",100);  inputMatrix=null;  trainingMatrix=null;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.ARROW_FUNCTION___IS_ARROW_FUNCTION:    return isArrowFunction();case N4JSPackage.ARROW_FUNCTION___IS_SINGLE_EXPR_IMPLICIT_RETURN:  return isSingleExprImplicitReturn();case N4JSPackage.ARROW_FUNCTION___IMPLICIT_RETURN_EXPR:return implicitReturnExpr();}return super.eInvoke(operationID,arguments);}  }
class C{  public void init() throws ServletException {}  }
class C{  public CardCollection(String label){  this.label=label;  this.cards=new ArrayList<Card>();}  }
class C{  public SolrInputField removeField(String name){  return _fields.remove(name);}  }
class C{  private void sendHeartbeats(){  if (!_lifecycle.isActive()) {    return;  }  _isSendHeartbeatsRequired=true;}  }
class C{  public void delete(String table,String where) throws SQLException {  StringBuilder builder=new StringBuilder();  builder.append("DELETE FROM ");  builder.append(quoteCaseSensitive(table));  if (where != null) {    builder.append(" WHERE ");    builder.append(where);  }  execute(builder.toString());}  }
class C{  private String encodeVirtualFilePath(final String virtualFilePath){  final String UTF_8="UTF-8";  final String path=FileUtil.toSystemIndependentName(virtualFilePath);  try {    return URLEncoder.encode(path,UTF_8);  } catch (  UnsupportedEncodingException e) {    logger.warn(virtualFilePath,e);  }  return path;}  }
class C{  @SuppressWarnings("unchecked") private Map<String,Object> convertToMap(Object jsonDocument){  Map<String,Object> jsonMap=new LinkedHashMap<>();  if (!(jsonDocument instanceof JSONObject)) {    jsonMap.put("content",jsonDocument);    return jsonMap;  }  JSONObject obj=(JSONObject)jsonDocument;  for (  String key : obj.keySet()) {    Object value=obj.get(key);    if (value instanceof JSONObject) {      value=convertToMap(value);    } else     if (value instanceof JSONArray) {      ArrayList<Map<String,Object>> collection=new ArrayList<>();      for (      Object element : ((JSONArray)value)) {        collection.add(convertToMap(element));      }      value=collection;    }    jsonMap.put(key,value);  }  return jsonMap;}  }
class C{  public boolean isUseK2Prior(){  return m_bUseK2Prior;}  }
class C{  void shutdown(){  cursor=NONE;  if (nextIndex >= 0)   nextIndex=REMOVED;  if (lastRet >= 0) {    lastRet=REMOVED;    lastItem=null;  }  prevTakeIndex=DETACHED;}  }
class C{  public void removeAddress(AddressEntity address){  addresses.remove(address);}  }
class C{  protected LinesToCharsResult diff_linesToChars(String text1,String text2){  List<String> lineArray=new ArrayList<String>();  Map<String,Integer> lineHash=new HashMap<String,Integer>();  lineArray.add("");  String chars1=diff_linesToCharsMunge(text1,lineArray,lineHash);  String chars2=diff_linesToCharsMunge(text2,lineArray,lineHash);  return new LinesToCharsResult(chars1,chars2,lineArray);}  }
class C{  public void processMouseEvent(MouseEvent e){  try {    int reselectIndex=-1;    if (OSUtils.isAnyMac() && e.isControlDown()) {      TableModel model=getModel();      if (model != null) {        int index=rowAtPoint(e.getPoint());        if (isRowSelected(index)) {          reselectIndex=index;        }      }    }    super.processMouseEvent(e);    if (reselectIndex != -1) {      getSelectionModel().addSelectionInterval(reselectIndex,reselectIndex);    }    if (e.getID() == MouseEvent.MOUSE_CLICKED && SwingUtilities.isLeftMouseButton(e) && !e.isPopupTrigger()) {      TableModel model=getModel();      if (model != null) {        int index=rowAtPoint(e.getPoint());        if (index < 0 || index >= model.getRowCount()) {          clearSelection();        }      }    }  } catch (  ArrayIndexOutOfBoundsException aioobe) {    String msg=aioobe.getMessage();    if (msg != null && msg.indexOf("at javax.swing.MenuSelectionManager.processMouseEvent") != -1)     return;    throw aioobe;  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void paintLabels(Graphics gx,Integer... tab){  int index=0;  if (tab.length > 0) {    index=tab[0].intValue();  }  Vector<Object> components=null;  if (TABBED_COMPONENTS.size() > 0 && index < TABBED_COMPONENTS.size()) {    components=TABBED_COMPONENTS.get(index);  }  if (components != null) {    gx.setFont(new Font(null,Font.PLAIN,9));    FontMetrics fm=gx.getFontMetrics();    int hf=fm.getAscent();    for (int i=0; i < components.size(); i++) {      BeanInstance bi=(BeanInstance)components.elementAt(i);      if (!(bi.getBean() instanceof Visible)) {        continue;      }      int cx=bi.getX();      int cy=bi.getY();      int width=((JComponent)bi.getBean()).getWidth();      int height=((JComponent)bi.getBean()).getHeight();      String label=((Visible)bi.getBean()).getVisual().getText();      int labelwidth=fm.stringWidth(label);      if (labelwidth < width) {        gx.drawString(label,(cx + (width / 2)) - (labelwidth / 2),cy + height + hf+ 2);      } else {        int mid=label.length() / 2;        int closest=label.length();        int closestI=-1;        for (int z=0; z < label.length(); z++) {          if (label.charAt(z) < 'a') {            if (Math.abs(mid - z) < closest) {              closest=Math.abs(mid - z);              closestI=z;            }          }        }        if (closestI != -1) {          String left=label.substring(0,closestI);          String right=label.substring(closestI,label.length());          if (left.length() > 1 && right.length() > 1) {            gx.drawString(left,(cx + (width / 2)) - (fm.stringWidth(left) / 2),cy + height + (hf * 1)+ 2);            gx.drawString(right,(cx + (width / 2)) - (fm.stringWidth(right) / 2),cy + height + (hf * 2)+ 2);          } else {            gx.drawString(label,(cx + (width / 2)) - (fm.stringWidth(label) / 2),cy + height + (hf * 1)+ 2);          }        } else {          gx.drawString(label,(cx + (width / 2)) - (fm.stringWidth(label) / 2),cy + height + (hf * 1)+ 2);        }      }    }  }}  }
class C{  public void keyReleased(KeyEvent e){  if (e.isControlDown() && e.getKeyCode() == NEXT_FRAME_KEY) {    try {      activeFrame=(activeFrame + 1) % NUM_FRAMES;      frameList[activeFrame].setSelected(true);    } catch (    java.beans.PropertyVetoException ex) {      log.warn("Exception selecting internal frame:" + ex);    }  } else   if (e.isControlDown() && e.getKeyCode() == PREV_FRAME_KEY) {    try {      activeFrame--;      if (activeFrame < 0) {        activeFrame=NUM_FRAMES - 1;      }      frameList[activeFrame].setSelected(true);    } catch (    java.beans.PropertyVetoException ex) {      log.warn("Exception selecting internal frame:" + ex);    }  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:03.949 -0500",hash_original_method="03663C70D425FF89FCC6E89BA931B637",hash_generated_method="170A92F32027F9875BE7114B1EF48E7D") private boolean processGetInput(CommandDetails cmdDet,List<ComprehensionTlv> ctlvs) throws ResultException {  CatLog.d(this,"process GetInput");  Input input=new Input();  IconId iconId=null;  ComprehensionTlv ctlv=searchForTag(ComprehensionTlvTag.TEXT_STRING,ctlvs);  if (ctlv != null) {    input.text=ValueParser.retrieveTextString(ctlv);  } else {    throw new ResultException(ResultCode.REQUIRED_VALUES_MISSING);  }  ctlv=searchForTag(ComprehensionTlvTag.RESPONSE_LENGTH,ctlvs);  if (ctlv != null) {    try {      byte[] rawValue=ctlv.getRawValue();      int valueIndex=ctlv.getValueIndex();      input.minLen=rawValue[valueIndex] & 0xff;      input.maxLen=rawValue[valueIndex + 1] & 0xff;    } catch (    IndexOutOfBoundsException e) {      throw new ResultException(ResultCode.CMD_DATA_NOT_UNDERSTOOD);    }  } else {    throw new ResultException(ResultCode.REQUIRED_VALUES_MISSING);  }  ctlv=searchForTag(ComprehensionTlvTag.DEFAULT_TEXT,ctlvs);  if (ctlv != null) {    input.defaultText=ValueParser.retrieveTextString(ctlv);  }  ctlv=searchForTag(ComprehensionTlvTag.ICON_ID,ctlvs);  if (ctlv != null) {    iconId=ValueParser.retrieveIconId(ctlv);  }  input.digitOnly=(cmdDet.commandQualifier & 0x01) == 0;  input.ucs2=(cmdDet.commandQualifier & 0x02) != 0;  input.echo=(cmdDet.commandQualifier & 0x04) == 0;  input.packed=(cmdDet.commandQualifier & 0x08) != 0;  input.helpAvailable=(cmdDet.commandQualifier & 0x80) != 0;  mCmdParams=new GetInputParams(cmdDet,input);  if (iconId != null) {    mIconLoadState=LOAD_SINGLE_ICON;    mIconLoader.loadIcon(iconId.recordNumber,this.obtainMessage(MSG_ID_LOAD_ICON_DONE));    return true;  }  return false;}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.MODULE_NAMESPACE_VIRTUAL_TYPE;}  }
class C{  protected static SampleModel fixSampleModel(CachableRed src,Rectangle bounds){  int defSz=AbstractTiledRed.getDefaultTileSize();  SampleModel sm=src.getSampleModel();  int w=sm.getWidth();  if (w < defSz)   w=defSz;  if (w > bounds.width)   w=bounds.width;  int h=sm.getHeight();  if (h < defSz)   h=defSz;  if (h > bounds.height)   h=bounds.height;  return sm.createCompatibleSampleModel(w,h);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:31.243 -0500",hash_original_method="EDB2D6790586ADFBD3CCB3C657FE979E",hash_generated_method="154CA778413D72FD7120CE19D552321D") public static int rotateLeft(int i,int distance){  return i + distance;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.ABSTRACT_INT_LITERAL___TO_INT:    return toInt();case N4JSPackage.ABSTRACT_INT_LITERAL___TO_LONG:  return toLong();case N4JSPackage.ABSTRACT_INT_LITERAL___TO_BIG_INTEGER:return toBigInteger();}return super.eInvoke(operationID,arguments);}  }
class C{  public NamedArrayConverter(final Class<?> arrayType,final Mapper mapper,final String itemName){  if (!arrayType.isArray()) {    throw new IllegalArgumentException(arrayType.getName() + " is not an array");  }  this.arrayType=arrayType;  this.mapper=mapper;  this.itemName=itemName;}  }
class C{  public EditSession redo(@Nullable BlockBag newBlockBag,Player player){  checkNotNull(player);  loadSessionHistoryFromDisk(player.getUniqueId(),player.getWorld());  if (getHistoryNegativeIndex() > 0) {    setDirty();    historyNegativeIndex--;    FaweChangeSet changeSet=(FaweChangeSet)history.get(getHistoryIndex());    final FawePlayer fp=FawePlayer.wrap(player);    EditSession newEditSession=new EditSessionBuilder(changeSet.getWorld()).allowedRegionsEverywhere().checkMemory(false).changeSet(changeSet).fastmode(false).limitUnprocessed(fp).player(fp).blockBag(getBlockBag(player)).build();    newEditSession.redo(newEditSession);    return newEditSession;  }  return null;}  }
class C{  public void omitLessFreq(){  if (name == null)   return;  int threshold=n_words[0] / LESS_FREQ_RATIO;  if (threshold < MINIMUM_FREQ)   threshold=MINIMUM_FREQ;  Set<String> keys=freq.keySet();  int roman=0;  for (Iterator<String> i=keys.iterator(); i.hasNext(); ) {    String key=i.next();    int count=freq.get(key);    if (count <= threshold) {      n_words[key.length() - 1]-=count;      i.remove();    } else {      if (key.matches("^[A-Za-z]$")) {        roman+=count;      }    }  }  if (roman < n_words[0] / 3) {    Set<String> keys2=freq.keySet();    for (Iterator<String> i=keys2.iterator(); i.hasNext(); ) {      String key=i.next();      if (key.matches(".*[A-Za-z].*")) {        n_words[key.length() - 1]-=freq.get(key);        i.remove();      }    }  }}  }
class C{  private void onToggleLocationAccess(boolean checked){  final UserManager um=(UserManager)getActivity().getSystemService(Context.USER_SERVICE);  if (um.hasUserRestriction(UserManager.DISALLOW_SHARE_LOCATION)) {    return;  }  final ContentResolver cr=getContentResolver();  Settings.Secure.setLocationProviderEnabled(cr,LocationManager.GPS_PROVIDER,checked);  Settings.Secure.setLocationProviderEnabled(cr,LocationManager.NETWORK_PROVIDER,checked);  updateLocationToggles();  updateLtoServiceStatus(getActivity(),checked);}  }
class C{  private void onSwitchCamera(){  if (Camera.getNumberOfCameras() >= 2) {    if (null != mCameraTextureView) {      mCamera.stopPreview();    }    mCamera.release();    if (mCameraId == Camera.CameraInfo.CAMERA_FACING_BACK) {      mCameraId=Camera.CameraInfo.CAMERA_FACING_FRONT;    } else {      mCameraId=Camera.CameraInfo.CAMERA_FACING_BACK;    }    try {      mCamera=Camera.open(mCameraId);      initCameraSettings();      try {        mCamera.setPreviewTexture(mSurfaceTexture);      } catch (      IOException e) {        Log.e(LOG_TAG,"## onSwitchCamera(): setPreviewTexture EXCEPTION Msg=" + e.getMessage());      }      mCamera.startPreview();    } catch (    Exception e) {      Log.e(LOG_TAG,"## onSwitchCamera(): cannot init the other camera");      mSwitchCameraImageView.setVisibility(View.GONE);      onSwitchCamera();    }  }}  }
class C{  public boolean isShouldLocalize(){  return shouldLocalize;}  }
class C{  public String toString(){  return getAncestorSelector() + " " + getSimpleSelector();}  }
class C{  void tick(){  m1Rate.tick();  m5Rate.tick();  m15Rate.tick();}  }
class C{  public Object value(){  return value;}  }
class C{  public Stream<T> stream(){  if (head == null) {    return Stream.empty();  } else   if (tail == null) {    return Stream.of(head);  } else {    return Stream.concat(Stream.of(head),tail.stream());  }}  }
class C{  public void hideColumn(int modelColumn){  int viewColumn=table.convertColumnIndexToView(modelColumn);  if (viewColumn != -1) {    TableColumn column=columnModel.getColumn(viewColumn);    hideColumn(column);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void writeStart(){  long now=System.nanoTime();  userTime+=now - lastTs;  lastTs=now;}  }
class C{  protected void checkForDuplicateKeys(Object[] template) throws Exception {  Hashtable<Object,Object> hash=new Hashtable<Object,Object>();  int numMatches=0;  for (int i=0; i < m_Keys.size(); i++) {    Object[] current=m_Keys.get(i);    if (!matchesTemplate(template,current)) {      continue;    }    if (hash.containsKey(current[m_KeyIndex])) {      throw new Exception("Duplicate result received:" + DatabaseUtils.arrayToString(current));    }    numMatches++;    hash.put(current[m_KeyIndex],current[m_KeyIndex]);  }  if (numMatches != m_ExpectedResultsPerAverage) {    throw new Exception("Expected " + m_ExpectedResultsPerAverage + " results matching key \""+ DatabaseUtils.arrayToString(template)+ "\" but got "+ numMatches);  }}  }
class C{  public static String toLowerCase(Locale locale,String s,char[] value,int offset,int count){  String languageCode=locale.getLanguage();  if (languageCode.equals("tr") || languageCode.equals("az") || languageCode.equals("lt")) {    return ICU.toLowerCase(s,locale.toString());  }  char[] newValue=null;  int newCount=0;  for (int i=offset, end=offset + count; i < end; ++i) {    char ch=value[i];    char newCh;    if (ch == LATIN_CAPITAL_I_WITH_DOT || Character.isHighSurrogate(ch)) {      return ICU.toLowerCase(s,locale.toString());    } else     if (ch == GREEK_CAPITAL_SIGMA && isFinalSigma(value,offset,count,i)) {      newCh=GREEK_SMALL_FINAL_SIGMA;    } else {      newCh=Character.toLowerCase(ch);    }    if (newValue == null && ch != newCh) {      newValue=new char[count];      newCount=i - offset;      System.arraycopy(value,offset,newValue,0,newCount);    }    if (newValue != null) {      newValue[newCount++]=newCh;    }  }  return newValue != null ? new String(0,newCount,newValue) : s;}  }
class C{  private void checkWithKnowledge(String inputGraph,String outputGraph,IKnowledge knowledge){  Graph graph=GraphConverter.convert(inputGraph);  IndependenceTest independence=new IndTestDSep(graph);  Cpc cpc=new Cpc(independence);  cpc.setKnowledge(knowledge);  Graph resultGraph=cpc.search();  Graph trueGraph=GraphConverter.convert(outputGraph);  assertTrue(resultGraph.equals(trueGraph));}  }
class C{  public void reset() throws GondolaException {  reset(Role.FOLLOWER,0);}  }
class C{  private static float adj(long now,long sunset,long sunrise){  if (sunset < 0 || sunrise < 0 || now < sunset || now > (sunrise + TWILIGHT_ADJUSTMENT_TIME)) {    return 1.0f;  }  if (now <= (sunset + TWILIGHT_ADJUSTMENT_TIME)) {    return MathUtils.lerp(1.0f,0.0f,(float)(now - sunset) / TWILIGHT_ADJUSTMENT_TIME);  }  if (now >= sunrise) {    return MathUtils.lerp(1.0f,0.0f,(float)((sunrise + TWILIGHT_ADJUSTMENT_TIME) - now) / TWILIGHT_ADJUSTMENT_TIME);  }  return 0.0f;}  }
class C{  public CollationAttributeFactory(AttributeFactory delegate,Collator collator){  super(delegate,CollatedTermAttributeImpl.class);  this.collator=collator;}  }
class C{  Dasher init(final PathConsumer2D out,float[] dash,int dashLen,float phase,boolean recycleDashes){  if (phase < 0f) {    throw new IllegalArgumentException("phase < 0 !");  }  this.out=out;  int idx=0;  dashOn=true;  float d;  while (phase >= (d=dash[idx])) {    phase-=d;    idx=(idx + 1) % dashLen;    dashOn=!dashOn;  }  this.dash=dash;  this.dashLen=dashLen;  this.startPhase=this.phase=phase;  this.startDashOn=dashOn;  this.startIdx=idx;  this.starting=true;  needsMoveTo=false;  firstSegidx=0;  this.recycleDashes=recycleDashes;  return this;}  }
class C{  protected void writeLeaf(Element elem) throws IOException {  indent();  if (elem.getName() == StyleConstants.IconElementName) {    writeImage(elem);  } else   if (elem.getName() == StyleConstants.ComponentElementName) {    writeComponent(elem);  }}  }
class C{  public void restore(){  if (!trackRecordingService.isRecording() || trackRecordingService.isPaused()) {    Log.d(TAG,"Not recording or paused.");    return;  }  if (!isTimeFrequency()) {    if (timerTaskExecutor != null) {      timerTaskExecutor.shutdown();      timerTaskExecutor=null;    }  }  if (taskFrequency == PreferencesUtils.FREQUENCY_OFF) {    Log.d(TAG,"Task frequency is off.");    return;  }  periodicTask=periodicTaskFactory.create(trackRecordingService);  if (periodicTask == null) {    Log.d(TAG,"Peridoic task is null.");    return;  }  periodicTask.start();  if (isTimeFrequency()) {    if (timerTaskExecutor == null) {      timerTaskExecutor=new TimerTaskExecutor(periodicTask,trackRecordingService);    }    timerTaskExecutor.scheduleTask(taskFrequency * MINUTE_TO_MILLISECONDS);  } else {    calculateNextTaskDistance();  }}  }
class C{  public static UmpleFactory init(){  try {    UmpleFactory theUmpleFactory=(UmpleFactory)EPackage.Registry.INSTANCE.getEFactory("http://www.umple.cruise/Umple");    if (theUmpleFactory != null) {      return theUmpleFactory;    }  } catch (  Exception exception) {    EcorePlugin.INSTANCE.log(exception);  }  return new UmpleFactoryImpl();}  }
class C{  public int numVerticesSampled(Set<? extends SampledVertex> vertices,int iteration){  return numVerticesSampled(vertices)[iteration];}  }
class C{  public static Gamepad xbox360(int port){  Joystick joystick=new Joystick(port);  return Gamepad.create(null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null);}  }
class C{  @Override public void process(KeyValPair<K,V> tuple){  K key=tuple.getKey();  V tval=tuple.getValue();  if (!doprocessKey(key) || (tval == null)) {    return;  }  V val=highs.get(key);  if (val == null) {    val=tval;    highs.put(cloneKey(key),val);  } else   if (val.doubleValue() < tval.doubleValue()) {    highs.put(key,tval);  }}  }
class C{  private void readData(long absolutePosition,ByteBuffer target,int length){  int remaining=length;  while (remaining > 0) {    dropDownstreamTo(absolutePosition);    int positionInAllocation=(int)(absolutePosition - totalBytesDropped);    int toCopy=Math.min(remaining,allocationLength - positionInAllocation);    Allocation allocation=dataQueue.peek();    target.put(allocation.data,allocation.translateOffset(positionInAllocation),toCopy);    absolutePosition+=toCopy;    remaining-=toCopy;  }}  }
class C{  public boolean equals(Object other){  if (other instanceof reduce_action)   return equals((reduce_action)other); else   return false;}  }
class C{  @Deprecated public void templateName(String templateName){  updateOrCreateScript(templateName,null,null,null);}  }
class C{  protected final boolean isActivating(){  return !getData().returnsInstantly() || !getData().isSpawnMessage() && !getCaller().isAlwaysActive();}  }
class C{  @Override public Object deserializeTypedFromObject(JsonParser jp,DeserializationContext ctxt) throws IOException, JsonProcessingException {  JsonToken t=jp.getCurrentToken();  if (t == JsonToken.START_OBJECT) {    t=jp.nextToken();  } else   if (t == JsonToken.START_ARRAY) {    return _deserializeTypedUsingDefaultImpl(jp,ctxt,null);  } else   if (t != JsonToken.FIELD_NAME) {    return _deserializeTypedUsingDefaultImpl(jp,ctxt,null);  }  TokenBuffer tb=null;  for (; t == JsonToken.FIELD_NAME; t=jp.nextToken()) {    String name=jp.getCurrentName();    jp.nextToken();    if (_typePropertyName.equals(name)) {      String typeId=jp.getText();      JsonDeserializer<Object> deser=_findDeserializer(ctxt,typeId);      if (tb != null) {        jp=JsonParserSequence.createFlattened(tb.asParser(jp),jp);      }      jp.nextToken();      return deser.deserialize(jp,ctxt);    }    if (tb == null) {      tb=new TokenBuffer(null);    }    tb.writeFieldName(name);    tb.copyCurrentStructure(jp);  }  return _deserializeTypedUsingDefaultImpl(jp,ctxt,tb);}  }
class C{  public Base64InputStream(InputStream inputStream){  this.inputStream=inputStream;}  }
class C{  private boolean isName(EventNode node,String name){  String local=node.getName();  if (local == null) {    return false;  }  return local.equals(name);}  }
class C{  public void closeEntry() throws IOException {  if (entry == null) {    return;  }  long realCrc=crc.getValue();  crc.reset();  if (entry.getMethod() == DEFLATED) {    def.finish();    while (!def.finished()) {      deflate();    }    entry.setSize(def.getTotalIn());    entry.setComprSize(def.getTotalOut());    entry.setCrc(realCrc);    def.reset();    written+=entry.getCompressedSize();  } else   if (raf == null) {    if (entry.getCrc() != realCrc) {      throw new SwcException.BadCRC(Long.toHexString(entry.getCrc()),Long.toHexString(realCrc));    }    if (entry.getSize() != written - dataStart) {      throw new SwcException.BadZipSize(entry.getName(),entry.getSize() + "",(written - dataStart) + "");    }  } else {    long size=written - dataStart;    entry.setSize(size);    entry.setComprSize(size);    entry.setCrc(realCrc);  }  if (raf != null) {    long save=raf.getFilePointer();    raf.seek(localDataStart);    writeOut((new ZipLong(entry.getCrc())).getBytes());    writeOut((new ZipLong(entry.getCompressedSize())).getBytes());    writeOut((new ZipLong(entry.getSize())).getBytes());    raf.seek(save);  }  writeDataDescriptor(entry);  entry=null;}  }
class C{  public Media createMedia(InputStream stream,String mimeType,Runnable onCompletion) throws IOException {  MMAPIPlayer player=MMAPIPlayer.createPlayer(stream,mimeType,onCompletion);  if (mimeType.indexOf("video") > -1) {    VideoMainScreen video=new VideoMainScreen(player,this);    return video;  }  return player;}  }
class C{  public static Selector ofConnect(){  return requestSelector(Type.CONNECT);}  }
class C{  public static void enableShufflingOfEndpoints(){  System.setProperty(DistributionConfig.GEMFIRE_PREFIX + "PoolImpl.DISABLE_RANDOM","false");  System.setProperty(DistributionConfig.GEMFIRE_PREFIX + "bridge.disableShufflingOfEndpoints","false");}  }
class C{  public static void turnOffInheritanceChecks(){  doInheritanceChecks=false;}  }
class C{  public DrawerBuilder withStickyFooterShadow(boolean stickyFooterShadow){  this.mStickyFooterShadow=stickyFooterShadow;  return this;}  }
class C{  public void findAndInit(Object obj){}  }
class C{  public Properties toProperties(String prefix){  Properties props=new Properties();  populate(prefix + ".",props,this);  props=convertValuesToString(props);  return props;}  }
class C{  public VCenterAPI(URL url){  this.url=url;}  }
class C{  public String toString(){  StringBuffer result=new StringBuffer("[");  if (isPrintable(start))   result.append("'" + start + "'"); else   result.append((int)start);  if (start != end) {    result.append("-");    if (isPrintable(end))     result.append("'" + end + "'"); else     result.append((int)end);  }  result.append("]");  return result.toString();}  }
class C{  private String toString(InputStream inputStream) throws IOException {  String lineToRead;  StringBuilder outputBuilder=new StringBuilder();  if (inputStream != null) {    BufferedReader reader=new BufferedReader(new InputStreamReader(inputStream,"UTF-8"));    while (null != (lineToRead=reader.readLine())) {      outputBuilder.append(lineToRead).append('\n');    }  }  return outputBuilder.toString();}  }
class C{  private void co_entry_pause() throws SAXException {  if (fCoroutineManager == null) {    init(null,-1,-1);  }  try {    Object arg=fCoroutineManager.co_entry_pause(fSourceCoroutineID);    if (arg == Boolean.FALSE)     co_yield(false);  } catch (  NoSuchMethodException e) {    if (DEBUG)     e.printStackTrace();    throw new SAXException(e);  }}  }
class C{  private final void drawIsometricSprites(Graphics g,Collection<IsometricSprite> spriteArrayList){  Rectangle view=g.getClipBounds();  for (  IsometricSprite sprite : spriteArrayList) {    Rectangle spriteBounds=sprite.getBounds();    if (view.intersects(spriteBounds) && !sprite.isHidden()) {      if (!sprite.isReady()) {        sprite.prepare();      }      sprite.drawOnto(g,spriteBounds.x,spriteBounds.y,this,true);    }  }}  }
class C{  private static float[] HSVtoRGB(float[] hsv,float[] rgb){  if (rgb == null) {    rgb=new float[3];  }  float hue=hsv[0];  float saturation=hsv[1];  float value=hsv[2];  rgb[0]=value;  rgb[1]=value;  rgb[2]=value;  if (saturation > 0.0f) {    hue=(hue < 1.0f) ? hue * 6.0f : 0.0f;    int integer=(int)hue;    float f=hue - (float)integer;switch (integer) {case 0:      rgb[1]*=1.0f - saturation * (1.0f - f);    rgb[2]*=1.0f - saturation;  break;case 1:rgb[0]*=1.0f - saturation * f;rgb[2]*=1.0f - saturation;break;case 2:rgb[0]*=1.0f - saturation;rgb[2]*=1.0f - saturation * (1.0f - f);break;case 3:rgb[0]*=1.0f - saturation;rgb[1]*=1.0f - saturation * f;break;case 4:rgb[0]*=1.0f - saturation * (1.0f - f);rgb[1]*=1.0f - saturation;break;case 5:rgb[1]*=1.0f - saturation;rgb[2]*=1.0f - saturation * f;break;}}return rgb;}  }
class C{  public Terrain(int terrainSize,float scale,float minY,float maxY,String heightMapFile,String textureFile,int textInc) throws Exception {  this.terrainSize=terrainSize;  gameItems=new GameItem[terrainSize * terrainSize];  BufferedImage heightMapImage=ImageIO.read(getClass().getResourceAsStream(heightMapFile));  verticesPerCol=heightMapImage.getWidth() - 1;  verticesPerRow=heightMapImage.getHeight() - 1;  heightMapMesh=new HeightMapMesh(minY,maxY,heightMapImage,textureFile,textInc);  boundingBoxes=new Rectangle2D.Float[terrainSize][terrainSize];  for (int row=0; row < terrainSize; row++) {    for (int col=0; col < terrainSize; col++) {      float xDisplacement=(col - ((float)terrainSize - 1) / (float)2) * scale * HeightMapMesh.getXLength();      float zDisplacement=(row - ((float)terrainSize - 1) / (float)2) * scale * HeightMapMesh.getZLength();      GameItem terrainBlock=new GameItem(heightMapMesh.getMesh());      terrainBlock.setScale(scale);      terrainBlock.setPosition(xDisplacement,0,zDisplacement);      gameItems[row * terrainSize + col]=terrainBlock;      boundingBoxes[row][col]=getBoundingBox(terrainBlock);    }  }}  }
class C{  public void toEPLInsertPart(StringWriter writer){  if (insert) {    writer.write(" insert");    if (insertWhereClause != null) {      writer.write(" where ");      insertWhereClause.toEPL(writer,ExpressionPrecedenceEnum.MINIMUM);    }  }}  }
class C{  @DeleteMapping(value="/{name}") public ResponseEntity<Response> remove(@PathVariable("name") @NotNull String... rolenames){  return null;}  }
class C{  private LogConsole(){}  }
class C{  @AfterClass public static void tearDownClass() throws Exception {}  }
class C{  public void initProgressBar(int max){  progressMax=max;  progressPos=0;  System.out.println("0%----------+----------50%-----------+--------100%");}  }
class C{  public Selection(final T item){  if (item == null) {    this.elements=Collections.emptyList();    this.head=null;  } else {    this.elements=Collections.singletonList(item);    this.head=item;  }}  }
class C{  private List<Offer> createAcceptedOffers(){  if (acceptedOffers != null) {    return acceptedOffers;  }  acceptedOffers=new ArrayList<>();  return acceptedOffers;}  }
class C{  public static final LocoNetMessage createSetUr92GroupIDPacket(String s) throws jmri.jmrix.loconet.LocoNetException {  int gr_id=Integer.parseInt(s,10);  if ((gr_id >= LnDplxGrpInfoImplConstants.DPLX_MIN_ID) && (gr_id <= LnDplxGrpInfoImplConstants.DPLX_MAX_ID)) {    int i=0;    LocoNetMessage m=new LocoNetMessage(LnConstants.RE_DPLX_OP_LEN);    m.setElement(i++,LnConstants.OPC_PEER_XFER);    m.setElement(i++,LnConstants.RE_DPLX_OP_LEN);    m.setElement(i++,LnConstants.RE_DPLX_GP_ID_TYPE);    m.setElement(i++,LnConstants.RE_DPLX_OP_TYPE_WRITE);    m.setElement(i++,0);    m.setElement(i++,gr_id);    for (; i < (LnConstants.RE_DPLX_OP_LEN - 1); i++) {      m.setElement(i,0);    }    return m;  } else {    throw new jmri.jmrix.loconet.LocoNetException("Illegal Duplex Group ID number");  }}  }
class C{  public TObjectFloatHashMap(){  super();}  }
class C{  public void changeLanguage(List<String> users,String language) throws IllegalArgumentException, ServiceException, MalformedURLException, IOException {  if (users.size() == 0) {    throw new IllegalArgumentException();  }  GenericEntry entry=new GenericEntry();  entry.addProperty(Constants.LANGUAGE,language);  for (  String user : users) {    logger.log(Level.INFO,"Updating language settings ( language: " + language + " ) for user "+ user+ " ...");    updateSettings(user,entry,Constants.LANGUAGE);    logger.log(Level.INFO,"Successfully updated language settings.");  }}  }
class C{  @Override public ImmutableListMultimap<K,V> build(){  return (ImmutableListMultimap<K,V>)super.build();}  }
class C{  private static void showTrayIcon(){  NotifyUserProxy.instance().showTrayIcon();}  }
class C{  public void searchAllTypeNames(final char[] packageName,final char[] typeName,final int matchRule,int searchFor,IJavaSearchScope scope,final ITypeNameRequestor nameRequestor,int waitingPolicy,IProgressMonitor progressMonitor) throws JavaModelException {  TypeNameRequestorAdapter requestorAdapter=new TypeNameRequestorAdapter(nameRequestor);  this.basicEngine.searchAllTypeNames(packageName,SearchPattern.R_EXACT_MATCH,typeName,matchRule,searchFor,scope,requestorAdapter,waitingPolicy,progressMonitor);}  }
class C{  public static char deserializeChar(byte[] buffer,MutableInt offset){  int offsetInt=offset.intValue();  char val=(char)(((((int)buffer[0 + offsetInt]) & 0xFF) << 8) | (((int)buffer[1 + offsetInt]) & 0xFF));  offset.add(Type.CHAR.getByteSize());  return val;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean argsAreXYValues(int index){  return ((getFlag(index) & ARGS_ARE_XY_VALUES) != 0);}  }
class C{  public static SourceLineAnnotation fromVisitedInstruction(BytecodeScanningDetector visitor){  return fromVisitedInstruction(visitor.getClassContext(),visitor,visitor.getPC());}  }
class C{  public static Integer parseInt(String s){  return (s == null) ? (Integer)null : Integer.parseInt(s);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void orderBy(List<OrderBy> orders) throws ScopeException, SQLScopeException {  for (  OrderBy order : orders) {    orderBy.add(order);    SimpleMapping m=mapper.find(order.getExpression());    if (m != null) {      m.setOrdering(order.getOrdering());      select.orderBy(m.getPiece()).setOrdering(order.getOrdering());    } else {      if (checkAllowOrderBy(order)) {        IPiece piece=select.createPiece(Context.ORDERBY,order.getExpression());        select.orderBy(piece).setOrdering(order.getOrdering());      } else {        logger.warn("invalid orderBy expression " + order.getExpression().prettyPrint() + ": you must select it (or a child dimension) as a facet");      }    }  }}  }
class C{  public long toMins(){  return TimeUnit.MINUTES.convert(length,timeUnit);}  }
class C{  public T caseArrayTypeSpecifier(ArrayTypeSpecifier object){  return null;}  }
class C{  public LabelEditingGraphMousePlugin(){  this(InputEvent.BUTTON1_MASK);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      child.replaceData(-5,3,"ABC");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throws_INDEX_SIZE_ERR",success);  }}  }
class C{  void makeClockwise(List<double[]> points){  if (!isClockwise(points)) {    int t=b;    b=c;    c=t;    t=ab;    ab=ca;    ca=t;  }}  }
class C{  private static String acc_subProcess(AccurateValue n1,AccurateValue n2){  String buf;  int off, length;  int start;  AccurateValue innerSum, result;  if (n1.digits.length < n2.digits.length) {    String extra=n1.toString();    String retVal="+" + extra;    return retVal;  }  off=0;  length=n2.digits.length;  while (n2.acc_compareToFull(0,length,n1,off) > 0) {    n2.acc_expand();    length=n2.digits.length;    if (length > n1.digits.length) {      String extra=n1.toString();      String retVal="+" + extra;      return retVal;    }  }  innerSum=new AccurateValue();  innerSum.digits=new int[n1.digits.length + 1];  result=new AccurateValue();  result.digits=new int[length];  if (n2.digits[0] == 0) {    start=9;  } else {    start=n1.digits[0] / n2.digits[0];  }  acc_multiplyDigit(n2,start,innerSum);  innerSum.acc_reduceInner();  if (innerSum.digits.length < n2.digits.length) {    innerSum.acc_expand();  } else {    while (n2.digits.length < innerSum.digits.length) {      start--;      innerSum.digits=new int[n1.digits.length + 1];      acc_multiplyDigit(n2,start,innerSum);      innerSum.acc_reduceInner();    }  }  boolean subtractDown=innerSum.acc_compareToLen(n1,innerSum.digits.length) > 0;  for (; ; ) {    String subp;    int numZerosToAdd;    if (subtractDown) {      start--;      acc_subtract(innerSum,n2,result);      innerSum=result.acc_copy();      subtractDown=innerSum.acc_compareToLen(n1,innerSum.digits.length) > 0;    } else {      AccurateValue newTop=new AccurateValue();      newTop.digits=new int[innerSum.digits.length];      newTop.acc_extract(0,n1,0,innerSum.digits.length);      newTop.sign=innerSum.sign;      result.digits=new int[innerSum.digits.length];      acc_subtract(newTop,innerSum,result);      result.acc_normalize(newTop.digits.length);      n1.acc_extract(0,result,0,result.digits.length);      numZerosToAdd=0;      while (n1.acc_compareToRight(n2.digits.length + numZerosToAdd,n2,n2.digits.length) < 0) {        numZerosToAdd++;      }      if (n1.acc_compareTo(n2) < 0) {        String extra=n1.toString();        return (char)(start + '0') + "+" + extra;      }      buf="" + (char)(start + '0');      int idx=1;      while (idx < numZerosToAdd) {        buf=buf + "0";        idx++;      }      n1.acc_reduceInner();      n2.acc_reduceInner();      subp=acc_subProcess(n1,n2);      return buf + subp;    }  }}  }
class C{  public static boolean isRightMouseButton(MouseEvent anEvent){  return (anEvent.getModifiersEx() & InputEvent.BUTTON3_DOWN_MASK) > 0;}  }
class C{  private static void verifyOperands(final List<COperandTree> operands){  for (  final IOperandTree operandTree : operands) {    verifyNode(operandTree.getRootNode());  }}  }
class C{  public Data(Item item,String name){  int size=item.writeSize();  this.name=name;  this.count=1;  this.totalSize=size;  this.largestSize=size;  this.smallestSize=size;}  }
class C{  public static void main(String[] args){  if (args.length == 3) {    root=args[0];    year=args[1];    extension=args[2];    abnormal=null;  } else   if (args.length == 4) {    root=args[0];    year=args[1];    extension=args[2];    abnormal=args[3];  } else {    throw new RuntimeException("Incorrect number of arguments.");  }  MyCountingStationParser cp=new MyCountingStationParser();  cp.log.info("========================================================================================");  cp.log.info(" Parsing counting station data.");  cp.log.info("----------------------------------------------------------------------------------------");  cp.log.info("             Root: " + root);  cp.log.info("             Year: " + year);  cp.log.info("   File extension: " + extension);  cp.log.info("    Abnormal days: " + abnormal);  cp.log.info("========================================================================================");  if (abnormal != null) {    cp.abnormalList=cp.getAbnormalDays(abnormal);  }  String folder=root + year + "/Raw/";  File[] files=null;  MyFileFilter mff=new MyFileFilter(extension);  if ((new File(folder)).isDirectory()) {    files=(new File(folder)).listFiles(mff);  }  cp.log.info("Processing files (" + files.length + ") from "+ folder);  int counter=0;  int multiplier=1;  for (  File f : files) {    cp.parse(f);    if (++counter == multiplier) {      cp.log.info("   files complete... " + counter);      multiplier*=2;    }  }  cp.log.info("   files complete... " + counter + " (Done)");  cp.writeCountsXml(root + year + "/Xml/");  cp.log.info("----------------------------");  cp.log.info("         Completed");  cp.log.info("============================");}  }
class C{  public CustomersPayment(){  initComponents();  editorcard.addEditorKeys(m_jKeys);  txtNotes.addEditorKeys(m_jKeys);  dirty=new DirtyManager();  txtNotes.addPropertyChangeListener("Text",dirty);}  }
class C{  public static TypeReference newTypeParameterReference(int sort,int paramIndex){  return new TypeReference((sort << 24) | (paramIndex << 16));}  }
class C{  public int currentSegment(double[] coords){  if (isDone()) {    throw new NoSuchElementException("cubic iterator iterator out of bounds");  }  int type;  if (index == 0) {    coords[0]=cubic.getX1();    coords[1]=cubic.getY1();    type=SEG_MOVETO;  } else {    coords[0]=cubic.getCtrlX1();    coords[1]=cubic.getCtrlY1();    coords[2]=cubic.getCtrlX2();    coords[3]=cubic.getCtrlY2();    coords[4]=cubic.getX2();    coords[5]=cubic.getY2();    type=SEG_CUBICTO;  }  if (affine != null) {    affine.transform(coords,0,coords,0,index == 0 ? 1 : 3);  }  return type;}  }
class C{  @Override public void onClick(View v){  Intent intent=new Intent();  intent.putExtra("channel",((EditText)findViewById(R.id.channel)).getText().toString());  setResult(RESULT_OK,intent);  finish();}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public boolean equals(Object o){  if (!(o instanceof Schema))   return false;  Schema s=(Schema)o;  if (m_size != s.getColumnCount())   return false;  for (int i=0; i < m_size; ++i) {    if (!(m_names[i].equals(s.getColumnName(i)) && m_types[i].equals(s.getColumnType(i)) && m_dflts[i].equals(s.getDefault(i)))) {      return false;    }  }  return true;}  }
class C{  protected void startCacheServers(List declarativeCacheServers,Cache cache,Integer serverPort,String serverBindAdd,Boolean disableDefaultServer){  CacheServerCreation defaultServer=null;  if (declarativeCacheServers.size() > 1 && (serverPort != null || serverBindAdd != null)) {    throw new RuntimeException(LocalizedStrings.CacheServerLauncher_SERVER_PORT_MORE_THAN_ONE_CACHE_SERVER.toLocalizedString());  }  if (declarativeCacheServers.isEmpty() && (serverPort != null || serverBindAdd != null) && (disableDefaultServer == null || !disableDefaultServer)) {    boolean existingCacheServer=false;    List<CacheServer> cacheServers=cache.getCacheServers();    if (cacheServers != null) {      for (      CacheServer cacheServer : cacheServers) {        if (serverPort == cacheServer.getPort()) {          existingCacheServer=true;        }      }    }    if (!existingCacheServer) {      defaultServer=new CacheServerCreation((GemFireCacheImpl)cache,false);      declarativeCacheServers.add(defaultServer);    }  }  for (Iterator iter=declarativeCacheServers.iterator(); iter.hasNext(); ) {    CacheServerCreation declaredCacheServer=(CacheServerCreation)iter.next();    boolean startServer=true;    List<CacheServer> cacheServers=cache.getCacheServers();    if (cacheServers != null) {      for (      CacheServer cacheServer : cacheServers) {        if (declaredCacheServer.getPort() == cacheServer.getPort()) {          startServer=false;        }      }    }    if (!startServer) {      continue;    }    CacheServerImpl impl=(CacheServerImpl)cache.addCacheServer();    impl.configureFrom(declaredCacheServer);    if (declaredCacheServer == defaultServer) {      impl.setIsDefaultServer();    }    if (serverPort != null && serverPort != CacheServer.DEFAULT_PORT) {      impl.setPort(serverPort);    }    if (serverBindAdd != null) {      impl.setBindAddress(serverBindAdd.trim());    }    try {      if (!impl.isRunning())       impl.start();    } catch (    IOException ex) {      throw new GemFireIOException(LocalizedStrings.CacheCreation_WHILE_STARTING_CACHE_SERVER_0.toLocalizedString(impl),ex);    }  }}  }
class C{  private void showPromptToLogin(String title,String message){  badConnectionInfoView.showDialog(title,message);}  }
class C{  public ProductSkuServiceImpl(final GenericDAO<ProductSku,Long> productSkuDao,final GenericDAO<Product,Long> productDao,final GenericDAO<SkuPrice,Long> skuPriceDao){  super(productSkuDao);  this.productDao=productDao;  this.skuPriceDao=skuPriceDao;}  }
class C{  public Builder withSingleOfferPerVM(boolean b){  this.singleOfferMode=b;  return this;}  }
class C{  public Builder message(final String message,final Object... args){  this.message=args.length > 0 ? String.format(message,args) : message;  return this;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputHeader;  String assignmentFieldName;  int assignmentFieldNum=-1;  String baseFileHeader="not specified";  double backgroundValue=0;  int row, col;  double rowYCoord, value, z;  int progress=0;  double cellSize=-1.0;  int rows, topRow, bottomRow;  int cols;  double noData=-32768.0;  double east;  double west;  double north;  double south;  DataType dataType=WhiteboxRasterBase.DataType.INTEGER;  Object[] data;  Object[][] allRecords=null;  BoundingBox box;  double[][] geometry;  int numPoints, numParts, i, part, numEdges;  int stCol, endCol;  int startingPointInPart, endingPointInPart;  double x1, y1, x2, y2, xPrime;  boolean foundIntersection;  ArrayList<Integer> edgeList=new ArrayList<>();  boolean useRecID=false;  DecimalFormat df=new DecimalFormat("###,###,###,###");  double smallNumber=-999999.0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputHeader=args[1];  assignmentFieldName=args[2];  if (args[3].toLowerCase().contains("nodata")) {    backgroundValue=noData;  } else {    backgroundValue=Double.parseDouble(args[3]);  }  if (!args[4].toLowerCase().contains("not specified")) {    cellSize=Double.parseDouble(args[4]);  }  baseFileHeader=args[5];  if ((inputFile == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    int numRecs=input.getNumberOfRecords();    if (input.getShapeType().getBaseType() != ShapeType.POLYGON) {      showFeedback("The input shapefile must be of a 'polygon' data type.");      return;    }    AttributeTable reader=input.getAttributeTable();    int numberOfFields=reader.getFieldCount();    for (i=0; i < numberOfFields; i++) {      DBFField field=reader.getField(i);      if (field.getName().equals(assignmentFieldName)) {        assignmentFieldNum=i;        if (field.getDataType() == DBFField.DBFDataType.NUMERIC || field.getDataType() == DBFField.DBFDataType.FLOAT) {          if (field.getDecimalCount() == 0) {            dataType=WhiteboxRasterBase.DataType.INTEGER;          } else {            dataType=WhiteboxRasterBase.DataType.FLOAT;          }        } else {          useRecID=true;        }      }    }    if (assignmentFieldNum < 0) {      useRecID=true;    }    WhiteboxRaster output;    if ((cellSize > 0) || ((cellSize < 0) & (baseFileHeader.toLowerCase().contains("not specified")))) {      if ((cellSize < 0) & (baseFileHeader.toLowerCase().contains("not specified"))) {        cellSize=Math.min((input.getyMax() - input.getyMin()) / 500.0,(input.getxMax() - input.getxMin()) / 500.0);      }      north=input.getyMax() + cellSize / 2.0;      south=input.getyMin() - cellSize / 2.0;      east=input.getxMax() + cellSize / 2.0;      west=input.getxMin() - cellSize / 2.0;      rows=(int)(Math.ceil((north - south) / cellSize));      cols=(int)(Math.ceil((east - west) / cellSize));      east=west + cols * cellSize;      south=north - rows * cellSize;      output=new WhiteboxRaster(outputHeader,north,south,east,west,rows,cols,WhiteboxRasterBase.DataScale.CONTINUOUS,dataType,backgroundValue,noData);    } else {      output=new WhiteboxRaster(outputHeader,"rw",baseFileHeader,dataType,backgroundValue);      output.setNoDataValue(noData);    }    ArrayList<RecordInfo> myList=new ArrayList<>();    for (    ShapeFileRecord record : input.records) {      i=record.getRecordNumber();      box=getBoundingBoxFromShapefileRecord(record);      myList.add(new RecordInfo(box.getMaxY(),i));    }    Collections.sort(myList);    if (!useRecID) {      allRecords=new Object[numRecs][numberOfFields];      int a=0;      while ((data=reader.nextRecord()) != null) {        System.arraycopy(data,0,allRecords[a],0,numberOfFields);        a++;      }    }    long heapSize=Runtime.getRuntime().totalMemory();    int flushSize=(int)(heapSize / 32);    int j, numCellsToWrite;    PriorityQueue<RowPriorityGridCell> pq=new PriorityQueue<>(flushSize);    RowPriorityGridCell cell;    int numRecords=input.getNumberOfRecords();    int count=0;    int progressCount=(int)(numRecords / 100.0);    if (progressCount <= 0) {      progressCount=1;    }    ShapeFileRecord record;    for (    RecordInfo ri : myList) {      record=input.getRecord(ri.recNumber - 1);      if (!useRecID) {        value=Double.valueOf(allRecords[record.getRecordNumber() - 1][assignmentFieldNum].toString());      } else {        value=record.getRecordNumber();      }      geometry=getXYFromShapefileRecord(record);      numPoints=geometry.length;      numParts=partData.length;      for (part=0; part < numParts; part++) {        if (!partHoleData[part]) {          box=new BoundingBox();          startingPointInPart=partData[part];          if (part < numParts - 1) {            endingPointInPart=partData[part + 1];          } else {            endingPointInPart=numPoints;          }          for (i=startingPointInPart; i < endingPointInPart; i++) {            if (geometry[i][1] < box.getMinY()) {              box.setMinY(geometry[i][1]);            }            if (geometry[i][1] > box.getMaxY()) {              box.setMaxY(geometry[i][1]);            }          }          topRow=output.getRowFromYCoordinate(box.getMaxY());          bottomRow=output.getRowFromYCoordinate(box.getMinY());          for (row=topRow; row <= bottomRow; row++) {            edgeList.clear();            foundIntersection=false;            rowYCoord=output.getYCoordinateFromRow(row);            for (i=startingPointInPart; i < endingPointInPart - 1; i++) {              if (isBetween(rowYCoord,geometry[i][1],geometry[i + 1][1])) {                y1=geometry[i][1];                y2=geometry[i + 1][1];                if (y2 != y1) {                  x1=geometry[i][0];                  x2=geometry[i + 1][0];                  xPrime=(x1 + (rowYCoord - y1) / (y2 - y1) * (x2 - x1));                  edgeList.add(output.getColumnFromXCoordinate(xPrime));                  foundIntersection=true;                }              }            }            if (foundIntersection) {              numEdges=edgeList.size();              if (numEdges == 2) {                stCol=Math.min(edgeList.get(0),edgeList.get(1));                endCol=Math.max(edgeList.get(0),edgeList.get(1));                for (col=stCol; col <= endCol; col++) {                  pq.add(new RowPriorityGridCell(row,col,value));                }              } else {                Integer[] edgeArray=new Integer[numEdges];                edgeList.toArray(edgeArray);                Arrays.sort(edgeArray);                boolean fillFlag=true;                for (i=0; i < numEdges - 1; i++) {                  stCol=edgeArray[i];                  endCol=edgeArray[i + 1];                  if (fillFlag) {                    for (col=stCol; col <= endCol; col++) {                      pq.add(new RowPriorityGridCell(row,col,value));                    }                  }                  fillFlag=!fillFlag;                }              }            }          }        }      }      for (part=0; part < numParts; part++) {        if (partHoleData[part]) {          box=new BoundingBox();          startingPointInPart=partData[part];          if (part < numParts - 1) {            endingPointInPart=partData[part + 1];          } else {            endingPointInPart=numPoints;          }          for (i=startingPointInPart; i < endingPointInPart; i++) {            if (geometry[i][1] < box.getMinY()) {              box.setMinY(geometry[i][1]);            }            if (geometry[i][1] > box.getMaxY()) {              box.setMaxY(geometry[i][1]);            }          }          topRow=output.getRowFromYCoordinate(box.getMaxY());          bottomRow=output.getRowFromYCoordinate(box.getMinY());          for (row=topRow; row <= bottomRow; row++) {            edgeList.clear();            foundIntersection=false;            rowYCoord=output.getYCoordinateFromRow(row);            for (i=startingPointInPart; i < endingPointInPart - 1; i++) {              if (isBetween(rowYCoord,geometry[i][1],geometry[i + 1][1])) {                y1=geometry[i][1];                y2=geometry[i + 1][1];                if (y2 != y1) {                  x1=geometry[i][0];                  x2=geometry[i + 1][0];                  xPrime=(x1 + (rowYCoord - y1) / (y2 - y1) * (x2 - x1));                  edgeList.add(output.getColumnFromXCoordinate(xPrime));                  foundIntersection=true;                }              }            }            if (foundIntersection) {              numEdges=edgeList.size();              if (numEdges == 2) {                stCol=Math.min(edgeList.get(0),edgeList.get(1));                endCol=Math.max(edgeList.get(0),edgeList.get(1));                for (col=stCol; col <= endCol; col++) {                  pq.add(new RowPriorityGridCell(row,col,smallNumber));                }              } else {                Integer[] edgeArray=new Integer[numEdges];                edgeList.toArray(edgeArray);                Arrays.sort(edgeArray);                boolean fillFlag=true;                for (i=0; i < numEdges - 1; i++) {                  stCol=edgeArray[i];                  endCol=edgeArray[i + 1];                  if (fillFlag) {                    for (col=stCol; col <= endCol; col++) {                      z=output.getValue(row,col);                      if (z == value) {                        pq.add(new RowPriorityGridCell(row,col,smallNumber));                      }                    }                  }                  fillFlag=!fillFlag;                }              }            }          }        }      }      if (pq.size() >= flushSize) {        j=0;        numCellsToWrite=pq.size();        do {          cell=pq.poll();          if (cell.z == smallNumber) {            output.setValue(cell.row,cell.col,backgroundValue);          } else {            output.setValue(cell.row,cell.col,cell.z);          }          j++;          if (j % 1000 == 0) {            if (cancelOp) {              cancelOperation();              return;            }            updateProgress("Writing to Output (" + df.format(j) + " of "+ df.format(numCellsToWrite)+ "):",(int)(j * 100.0 / numCellsToWrite));          }        } while (pq.size() > 0);      }      if (cancelOp) {        cancelOperation();        return;      }      count++;      if (count % progressCount == 0) {        progress++;        updateProgress(progress);      }    }    j=0;    numCellsToWrite=pq.size();    if (numCellsToWrite > 0) {      do {        cell=pq.poll();        if (cell.z == smallNumber) {          output.setValue(cell.row,cell.col,backgroundValue);        } else {          output.setValue(cell.row,cell.col,cell.z);        }        j++;        if (j % 1000 == 0) {          if (cancelOp) {            cancelOperation();            return;          }          updateProgress("Writing to Output (" + df.format(j) + " of "+ df.format(numCellsToWrite)+ "):",(int)(j * 100.0 / numCellsToWrite));        }      } while (pq.size() > 0);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.flush();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static LicenseInfoRequest create(){  LicenseInfoRequest m=new LicenseInfoRequest();  return m;}  }
class C{  public boolean removeElement(ElementKey<?,?> childKey,Element element){  throwExceptionIfLocked();  boolean removed=false;  if (state.elements != null) {    Object obj=getElementObject(childKey);    if (obj instanceof Collection<?>) {      Collection<Element> collect=castElementCollection(obj);      Iterator<Element> iter=collect.iterator();      while (iter.hasNext()) {        if (iter.next() == element) {          iter.remove();          removed=true;          break;        }      }      if (collect.isEmpty()) {        removeElement(childKey);      }    } else     if (obj == element) {      removeElement(childKey);      removed=true;    }  }  return removed;}  }
class C{  public EnumState(S id){  super(id);}  }
class C{  public boolean matchesCS(String seq){  return queue.startsWith(seq,pos);}  }
class C{  public OrdinalOp_ createOrdinalOp_(){  OrdinalOp_Impl ordinalOp_=new OrdinalOp_Impl();  return ordinalOp_;}  }
class C{  public static long roundUpLong(long x,long blockSizePowerOf2){  return (x + blockSizePowerOf2 - 1) & (-blockSizePowerOf2);}  }
class C{  public boolean equals(Object other){  if (this == other) {    return true;  }  if (!(other instanceof OtherName)) {    return false;  }  OtherName otherOther=(OtherName)other;  if (!(otherOther.oid.equals((Object)oid))) {    return false;  }  GeneralNameInterface otherGNI=null;  try {    otherGNI=getGNI(otherOther.oid,otherOther.nameValue);  } catch (  IOException ioe) {    return false;  }  boolean result;  if (otherGNI != null) {    try {      result=(otherGNI.constrains(this) == NAME_MATCH);    } catch (    UnsupportedOperationException ioe) {      result=false;    }  } else {    result=Arrays.equals(nameValue,otherOther.nameValue);  }  return result;}  }
class C{  public static boolean isDigitalUnix(){  return osName.indexOf("Digital Unix") > -1;}  }
class C{  public static Test suite(File catalogXml) throws Exception {  XsltXPathConformanceTestSuite suite=new XsltXPathConformanceTestSuite();  Document document=DocumentBuilderFactory.newInstance().newDocumentBuilder().parse(catalogXml);  Element testSuiteElement=document.getDocumentElement();  TestSuite result=new TestSuite();  for (  Element testCatalog : elementsOf(testSuiteElement.getElementsByTagName("test-catalog"))) {    Element majorPathElement=(Element)testCatalog.getElementsByTagName("major-path").item(0);    String majorPath=majorPathElement.getTextContent();    File base=new File(catalogXml.getParentFile(),majorPath);    for (    Element testCaseElement : elementsOf(testCatalog.getElementsByTagName("test-case"))) {      result.addTest(suite.create(base,testCaseElement));    }  }  return result;}  }
class C{  private float scoreChunkLogP(int[] words,boolean considerIncompleteNgrams,boolean skipStart){  float score=0.0f;  if (words.length > 0) {    int startIndex;    if (!considerIncompleteNgrams) {      startIndex=this.ngramOrder;    } else     if (skipStart) {      startIndex=2;    } else {      startIndex=1;    }    score=this.languageModel.sentenceLogProbability(words,this.ngramOrder,startIndex);  }  return score;}  }
class C{  protected void printBand(byte[] bgrData,int x,int y,int width,int height) throws PrinterException {  mPSStream.println(IMAGE_SAVE);  int psBytesPerRow=3 * width;  while (psBytesPerRow > MAX_PSSTR) {    psBytesPerRow/=2;  }  mPSStream.println(psBytesPerRow + IMAGE_STR);  mPSStream.println("[" + width + " 0 "+ "0 "+ height+ " "+ x+ " "+ y+ "]concat");  mPSStream.println(width + " " + height+ " "+ 8+ "["+ width+ " 0 "+ "0 "+ -height+ " 0 "+ height+ "]"+ "/imageSrc load false 3 colorimage");  int index=0;  byte[] rgbData=new byte[width * 3];  try {    for (int i=0; i < height; i++) {      index=swapBGRtoRGB(bgrData,index,rgbData);      byte[] encodedData=rlEncode(rgbData);      byte[] asciiData=ascii85Encode(encodedData);      mPSStream.write(asciiData);      mPSStream.println("");    }  } catch (  IOException e) {    throw new PrinterIOException(e);  }  mPSStream.println(IMAGE_RESTORE);}  }
class C{  public static Sector fromDegrees(double[] array){  if (array == null) {    throw new IllegalArgumentException("Array Is Null");  }  if (array.length < 4) {    throw new IllegalArgumentException("Array Invalid Length");  }  return fromDegrees(array[0],array[1],array[2],array[3]);}  }
class C{  private static void handleInitializationException(final Class<?> clazz,final Exception cause){  throw new RuntimeException("Unable to instantiate " + clazz.getSimpleName(),cause);}  }
class C{  public RegionFactory<K,V> addAsyncEventQueueId(String asyncEventQueueId){  this.attrsFactory.addAsyncEventQueueId(asyncEventQueueId);  return this;}  }
class C{  @Override public void clearActiveSession(){  if (sessionManager.getActiveSession() != null && sessionManager.getActiveSession().getPhoneNumber() != null) {    final PhoneNumber phoneNumber=PhoneNumberUtils.getPhoneNumber(sessionManager.getActiveSession().getPhoneNumber());    digitsEventCollector.authCleared(new LogoutEventDetails(Locale.getDefault().getLanguage(),phoneNumber.getCountryIso()));  }  sessionManager.clearActiveSession();}  }
class C{  public XmlElement(Node node){  if (node == null)   throw new IllegalArgumentException("value is null");  this.node=node;  this.hash=makeHash(node);}  }
class C{  public static String encodeEmail(String userEmail){  return userEmail.replace(".",",");}  }
class C{  public CacheWriterException(String msg){  super(msg);}  }
class C{  public static long dateValue(long year,int month,int day){  return (year << SHIFT_YEAR) | (month << SHIFT_MONTH) | day;}  }
class C{  public FunctionInvocationTargetException(Throwable cause){  super(cause);}  }
class C{  public ObjectWrapper(Object obj){  this.wrappedObject=obj;}  }
class C{  public Collection values(){  Collection vs=values;  if (vs != null)   return vs; else   return values=new Values();}  }
class C{  @Override public int read() throws IOException {  while (in != null) {    int result=in.read();    if (result >= 0) {      return result;    }    nextStream();  }  return -1;}  }
class C{  public static boolean isVcenterInUseForTheTenant(DbClient dbClient,URI vcenterURI,URI tenantId){  List<NamedElementQueryResultList.NamedElement> datacenterUris=listChildren(dbClient,vcenterURI,VcenterDataCenter.class,"label","vcenter");  for (  NamedElementQueryResultList.NamedElement datacenterUri : datacenterUris) {    VcenterDataCenter vcenterDataCenter=dbClient.queryObject(VcenterDataCenter.class,datacenterUri.getId());    if (vcenterDataCenter != null && URIUtil.identical(tenantId,vcenterDataCenter.getTenant()) && isDataCenterInUse(dbClient,datacenterUri.getId())) {      return true;    }  }  return false;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public boolean absolute(int rows) throws SQLException {  boolean retval;  boolean bool=false;  if (rows == 0 || getType() == ResultSet.TYPE_FORWARD_ONLY) {    throw new SQLException(resBundle.handleGetObject("filteredrowsetimpl.absolute").toString());  }  if (rows > 0) {    bool=internalFirst();    int i=0;    while (i < (rows - 1)) {      if (isAfterLast()) {        return false;      }      bool=internalNext();      i++;    }    retval=bool;  } else {    bool=internalLast();    int j=rows;    while ((j + 1) < 0) {      if (isBeforeFirst()) {        return false;      }      bool=internalPrevious();      j++;    }    retval=bool;  }  notifyCursorMoved();  return retval;}  }
class C{  public static Packet fromByteArray(byte b[]) throws IOException {  if (b.length < 11) {    throw new IOException("packet is insufficient size");  }  int b0=b[0] & 0xff;  int b1=b[1] & 0xff;  int b2=b[2] & 0xff;  int b3=b[3] & 0xff;  int len=((b0 << 24) | (b1 << 16) | (b2 << 8)| (b3 << 0));  if (len != b.length) {    throw new IOException("length size mis-match");  }  int b4=b[4] & 0xff;  int b5=b[5] & 0xff;  int b6=b[6] & 0xff;  int b7=b[7] & 0xff;  Packet p=new Packet();  p.id=((b4 << 24) | (b5 << 16) | (b6 << 8)| (b7 << 0));  p.flags=(short)(b[8] & 0xff);  if ((p.flags & Packet.Reply) == 0) {    p.cmdSet=(short)(b[9] & 0xff);    p.cmd=(short)(b[10] & 0xff);  } else {    short b9=(short)(b[9] & 0xff);    short b10=(short)(b[10] & 0xff);    p.errorCode=(short)((b9 << 8) + (b10 << 0));  }  p.data=new byte[b.length - 11];  System.arraycopy(b,11,p.data,0,p.data.length);  return p;}  }
class C{  public void startAutoScroll(int delayTimeInMills){  sendScrollMessage(delayTimeInMills);}  }
class C{  public Map prepareForUpdateInstrumentDeposit(final String toBankaccountGlcode){  final Map<String,Object> valuesMap=new HashMap<String,Object>();  final List<AppConfigValues> configValuesByModuleAndKey=appConfigValuesService.getConfigValuesByModuleAndKey(FinancialConstants.MODULE_NAME_APPCONFIG,"PREAPPROVEDVOUCHERSTATUS");  preapprovalStatus=Integer.valueOf(configValuesByModuleAndKey.get(0).getValue());  final EgwStatus instrumentDepositedStatus=(EgwStatus)persistenceService.find("from EgwStatus where upper(moduletype)=upper('Instrument') and upper(description)=upper(?)",FinancialConstants.INSTRUMENT_DEPOSITED_STATUS);  final EgwStatus instrumentReconciledStatus=(EgwStatus)persistenceService.find("from EgwStatus where upper(moduletype)=upper('Instrument') and upper(description)=upper(?)",FinancialConstants.INSTRUMENT_RECONCILED_STATUS);  final Bankaccount depositedBankAccount=(Bankaccount)persistenceService.find("from Bankaccount where chartofaccounts.glcode=?",toBankaccountGlcode);  valuesMap.put("preapprovalStatus",preapprovalStatus);  valuesMap.put("instrumentDepositedStatus",instrumentDepositedStatus);  valuesMap.put("instrumentReconciledStatus",instrumentReconciledStatus);  valuesMap.put("depositedBankAccount",depositedBankAccount);  return valuesMap;}  }
class C{  public void printList(List<Monitor> list,boolean verbose,boolean showUnsupported,PrintStream out) throws MonitorException {  for (  Monitor m : list) {    if (!(m.isSupported() || showUnsupported)) {      continue;    }    StringBuilder buffer=new StringBuilder();    buffer.append(m.getName()).append("=");    if (m instanceof StringMonitor) {      buffer.append("\"").append(m.getValue()).append("\"");    } else {      buffer.append(m.getValue());    }    if (verbose) {      buffer.append(" ").append(m.getUnits());      buffer.append(" ").append(m.getVariability());      buffer.append(" ").append(m.isSupported() ? "Supported" : "Unsupported");    }    out.println(buffer);  }}  }
class C{  public void stop(){  running=false;  try {    myServerSocket.close();    myThread.join();  } catch (  Exception ioe) {    ioe.printStackTrace();  }  System.out.println("Server coming down on " + myTcpPort);  if (callExit) {    System.out.println("Calling exit");    System.exit(0);  }}  }
class C{  void drawString(Graphics g,String str,int x,int y){  if (Display.getInstance().isBidiAlgorithm()) {    int slen=str.length();    for (int i=0; i < slen; i++) {      if (Display.getInstance().isRTL(str.charAt(i))) {        str=Display.getInstance().convertBidiLogicalToVisual(str);        break;      }    }  }  initColor(g);  int clipX=g.getClipX();  int clipY=g.getClipY();  int clipWidth=g.getClipWidth();  int clipHeight=g.getClipHeight();  if (clipY <= y + getHeight() && clipY + clipHeight >= y) {    char c;    int slen=str.length();    for (int i=0; i < slen; i++) {      c=str.charAt(i);      int position=charsets.indexOf(c);      if (position < 0) {        continue;      }      g.clipRect(x,y,charWidth[position],imageHeight);      if (g.getClipWidth() > 0 && g.getClipHeight() > 0) {        g.drawImage(cache,x - cutOffsets[position],y);      }      x+=charWidth[position];      g.setClip(clipX,clipY,clipWidth,clipHeight);    }  }}  }
class C{  public Power(){  super(Number.class,Number.class,Number.class);}  }
class C{  public void testCompareToEqualPos(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  byte bBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  int aSign=1;  int bSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  assertEquals(0,aNumber.compareTo(bNumber));}  }
class C{  public VNXeCommandResult createHost(HostCreateParam createParam){  _logger.info("Creating host:" + createParam.getName());  return postRequestSync(createParam);}  }
class C{  public IdentityHashMap(){  init(DEFAULT_CAPACITY);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public int deleteBack(){  int oldBack=getBack();  size=size - 1;  return oldBack;}  }
class C{  public static int encode(byte[] data,OutputStream out) throws IOException {  return encoder.encode(data,0,data.length,out);}  }
class C{  public void addLastInCodeOrder(BasicBlock bb){  if (IR.SANITY_CHECK)   VM._assert(bb.next == null);  if (IR.SANITY_CHECK)   VM._assert(bb.prev == null);  if (_firstNode == null) {    _firstNode=bb;    _lastNode=bb;  } else {    _lastNode.append(bb);    _lastNode=bb;  }}  }
class C{  public Geo(double x,double y,double z){  this.x=x;  this.y=y;  this.z=z;}  }
class C{  public final Sequence extend(TypedOperation operation,List<Variable> inputVariables){  checkInputs(operation,inputVariables);  List<RelativeNegativeIndex> indexList=new ArrayList<>(1);  for (  Variable v : inputVariables) {    indexList.add(getRelativeIndexForVariable(size(),v));  }  Statement statement=new Statement(operation,indexList);  int newNetSize=(operation.isNonreceivingValue()) ? this.savedNetSize : this.savedNetSize + 1;  return new Sequence(new OneMoreElementList<>(this.statements,statement),this.savedHashCode + statement.hashCode(),newNetSize);}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!WebEnv.initWeb(config))   throw new ServletException("OrderServlet.init");}  }
class C{  public void init(boolean encrypting,CipherParameters params) throws IllegalArgumentException {  boolean oldEncrypting=this.encrypting;  this.encrypting=encrypting;  if (params instanceof ParametersWithIV) {    ParametersWithIV ivParam=(ParametersWithIV)params;    byte[] iv=ivParam.getIV();    if (iv.length != blockSize) {      throw new IllegalArgumentException("initialisation vector must be the same length as block size");    }    System.arraycopy(iv,0,IV,0,iv.length);    reset();    if (ivParam.getParameters() != null) {      cipher.init(encrypting,ivParam.getParameters());    } else     if (oldEncrypting != encrypting) {      throw new IllegalArgumentException("cannot change encrypting state without providing key.");    }  } else {    reset();    if (params != null) {      cipher.init(encrypting,params);    } else     if (oldEncrypting != encrypting) {      throw new IllegalArgumentException("cannot change encrypting state without providing key.");    }  }}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  protected void fill() throws IOException {  ensureOpen();  len=in.read(buf,0,buf.length);  if (len == -1) {    throw new EOFException("Unexpected end of ZLIB input stream");  }  inf.setInput(buf,0,len);}  }
class C{  private boolean isIncluded(final HttpServletRequest request){  final String uri=(String)request.getAttribute("javax.servlet.include.request_uri");  final boolean includeRequest=!(uri == null);  if (includeRequest && LOG.isDebugEnabled()) {    LOG.debug(request.getRequestURL() + " resulted in an include request. This is unusable, because" + "the response will be assembled into the overrall response. Not gzipping.");  }  return includeRequest;}  }
class C{  private void hideInfo(){  hideInfo(0);}  }
class C{  public boolean isErrorMessageAvailable(){  return errorMessage != null;}  }
class C{  public VideoQuality(int resX,int resY,int framerate,int bitrate){  this.framerate=framerate;  this.bitrate=bitrate;  this.resX=resX;  this.resY=resY;}  }
class C{  public RemoteFileBrowserLoader(final JFrame parent,final Debugger debugger){  remoteFileBrowser=new CRemoteFileBrowserLoader(parent,debugger.getNative());}  }
class C{  public static String encode(byte[] source,int off,int len,byte[] alphabet,boolean doPadding){  byte[] outBuff=encode(source,off,len,alphabet,Integer.MAX_VALUE);  int outLen=outBuff.length;  while (doPadding == false && outLen > 0) {    if (outBuff[outLen - 1] != '=') {      break;    }    outLen-=1;  }  return new String(outBuff,0,outLen);}  }
class C{  public Sender(String apiKey,int retryCount){  this(apiKey,retryCount,PRODUCTION_URL);}  }
class C{  public boolean isLaunching(){  return isLaunching(getState());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public int next(){  final int startNode=_startNode;  if (startNode == NULL) {    return NULL;  }  if (_includeSelf && (_currentNode + 1) == startNode)   return returnNode(makeNodeHandle(++_currentNode));  int node=_currentNode;  int type;  if (startNode == ROOTNODE) {    int eType;    do {      node++;      eType=_exptype2(node);      if (NULL == eType) {        _currentNode=NULL;        return END;      }    } while (eType == TEXT_NODE || (type=m_extendedTypes[eType].getNodeType()) == ATTRIBUTE_NODE || type == NAMESPACE_NODE);  } else {    do {      node++;      type=_type2(node);      if (NULL == type || !isDescendant(node)) {        _currentNode=NULL;        return END;      }    } while (ATTRIBUTE_NODE == type || TEXT_NODE == type || NAMESPACE_NODE == type);  }  _currentNode=node;  return returnNode(makeNodeHandle(node));}  }
class C{  protected boolean addEdge(Edge e){  if (e.u < 0 || e.u > getSize() - 1)   throw new IllegalArgumentException("No such index: " + e.u);  if (e.u < 0 || e.v > getSize() - 1)   throw new IllegalArgumentException("No such index: " + e.u);  if (!neighbors.get(e.u).contains(e)) {    neighbors.get(e.u).add(e);    return true;  } else {    return false;  }}  }
class C{  public boolean hasValue(){  return super.hasTextValue();}  }
class C{  void finishInference(){  if (!needsInference) {    return;  }  Set<String> globals=Sets.newHashSet();  globals.add("this");  List<Pair<Expression,Fact>> factList=Lists.newArrayList(facts.values());  for (  Pair<Expression,Fact> fe : factList) {    if (fe.b == Fact.GLOBAL) {      globals.add(((Reference)fe.a).getIdentifierName());    }  }  if (!globals.isEmpty()) {    for (    Pair<Expression,Fact> fe : factList) {      if (fe.b == Fact.GLOBAL) {        continue;      }      Expression e=fe.a;      Operator op=null;      if (Operation.is(e,Operator.TYPEOF)) {        op=Operator.TYPEOF;        e=(Expression)e.children().get(0);      }      String topRef=topRef(e);      if (topRef != null) {        if (!globals.contains(topRef)) {          for (          String globalAlias : globals) {            Expression newExpr=withTopRef(e,globalAlias);            if (op != null) {              newExpr=Operation.create(UNK,op,newExpr);            }            addFactInt(newExpr,fe.b);          }        } else         if (op == null && e instanceof Operation) {          if (fe.b.isFalse() || fe.b.isTruthy()) {            Expression newExpr=withoutTopRef(e);            addFactInt(newExpr,fe.b);          }        }      }    }  }  needsInference=false;}  }
class C{  public static void showOpenSheet(JFileChooser chooser,Component parent,SheetListener listener){  chooser.setDialogType(JFileChooser.OPEN_DIALOG);  showSheet(chooser,parent,null,listener);}  }
class C{  private static Version readVersion(BitMatrix bitMatrix) throws FormatException {  int numRows=bitMatrix.getHeight();  int numColumns=bitMatrix.getWidth();  return Version.getVersionForDimensions(numRows,numColumns);}  }
class C{  public SortedSetDocValuesField(String name,BytesRef bytes){  super(name,TYPE);  fieldsData=bytes;}  }
class C{  @Override public void parseStartElement(){  String ns=validatorInfo.getNameSpace();  String ln=validatorInfo.getLocalName();  if (ns.equals(RIConstants.HTML_NAMESPACE)) {    if (ln.equals("commandButton")) {      handleCommandButton();    }  }}  }
class C{  private static DateValue[] monthsInYear(DateValue start,int interval){  List<DateValue> dates=new ArrayList<DateValue>();  DTBuilder builder=new DTBuilder(start);  DateValue d=builder.toDate();  while (d.year() == start.year()) {    dates.add(d);    builder.month+=interval;    d=builder.toDate();  }  return dates.toArray(new DateValue[0]);}  }
class C{  void cancelPressed(ActionEvent e){  clearPanel();}  }
class C{  protected void wrapUp(){  Integer currentCommandIndex=this.getCurrentCommandIndex(_args);  List maskingViews=(List)_keyMap.get(Constants.MASKING_VIEWS);  _logger.info("ArrayAffinityExportProcessor current index is " + currentCommandIndex);  _logger.info("ArrayAffinityExportProcessor maskingViews size is " + maskingViews.size());  if ((maskingViews != null) && (maskingViews.size() == (currentCommandIndex + 1))) {    _logger.info("this is the last time ArrayAffinityExportProcessor will be called, cleaning up...");    updatePreferredPools();  } else {    _logger.info("no need to wrap up yet...");  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public void putAsString(String key,Double value){  String strValue=value.toString();  super.put(key,strValue);}  }
class C{  private String beforeDelete(MAssetGroup ag) throws Exception {  int no=DB.getSQLValue(ag.get_TrxName(),"SELECT count(*) FROM A_Asset_Group WHERE IsActive='Y' AND IsDefault='Y' AND Ad_Client_ID=? AND Ad_Org_ID=? AND A_Asset_Group_ID=? ",ag.getAD_Client_ID(),ag.getAD_Org_ID(),ag.getA_Asset_Group_ID());  if (no == 1) {    throw new IllegalStateException("One active Default is expected");  }  return null;}  }
class C{  public final int maxClass(int index){  double maxCount=0;  int maxIndex=0;  int i;  if (Utils.gr(m_perBag[index],0)) {    for (i=0; i < m_perClass.length; i++) {      if (Utils.gr(m_perClassPerBag[index][i],maxCount)) {        maxCount=m_perClassPerBag[index][i];        maxIndex=i;      }    }    return maxIndex;  } else {    return maxClass();  }}  }
class C{  @Override public void onNewConversation(String target){  createNewConversation(target);  pager.setCurrentItem(pagerAdapter.getCount() - 1);}  }
class C{  public void paste(int startIndex){  AccessibleEditableText at=getEditorAccessibleEditableText();  if (at != null) {    at.paste(startIndex);  }}  }
class C{  public AbstractToggleUseSoftWrapsAction(@NotNull SoftWrapAppliancePlaces appliancePlace,boolean global){  myAppliancePlace=appliancePlace;  myGlobal=global;}  }
class C{  private void tryScrollBackToTop(){  if (!mPtrIndicator.isUnderTouch()) {    mScrollChecker.tryToScrollTo(PtrIndicator.POS_START,mDurationToCloseHeader);  }}  }
class C{  public void emitInvokespecial(int meth,Type mtype){  int argsize=width(mtype.getParameterTypes());  emitop(invokespecial);  if (!alive)   return;  emit2(meth);  Symbol sym=(Symbol)pool.pool[meth];  state.pop(argsize);  if (sym.isConstructor())   state.markInitialized((UninitializedType)state.peek());  state.pop(1);  state.push(mtype.getReturnType());}  }
class C{  public IMouseState createBendEnterState(final Bend b,final MouseEvent event){  final CBendEnterState state=new CBendEnterState(this,m_graph,b);  m_factory.createBendEnterAction().execute(state,event);  return state;}  }
class C{  public static byte parseByte(CharSequence csq,int radix){  Cursor cursor=new Cursor();  byte result=parseByte(csq,radix,cursor);  if (!cursor.atEnd(csq))   throw new IllegalArgumentException("Extraneous characters \"" + cursor.tail(csq) + "\"");  return result;}  }
class C{  public GroupNode(final View view,final INaviGroupNode node,final TagManager manager){  super(view,node,manager);  m_node=node;  m_node.addGroupListener(m_internalListener);}  }
class C{  protected void sequence_BindingElement(ISerializationContext context,BindingElement semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public boolean merge(Frame frame){  boolean changed=false;  for (int i=0; i < locals.length; i++) {    if (locals[i] != null) {      Type prev=locals[i];      Type merged=prev.merge(frame.locals[i]);      locals[i]=merged;      if (!merged.equals(prev) || merged.popChanged()) {        changed=true;      }    } else     if (frame.locals[i] != null) {      locals[i]=frame.locals[i];      changed=true;    }  }  changed|=mergeStack(frame);  return changed;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public boolean lacksMachineCodeOffset(Instruction inst){  return mcOffsets.get(inst) == null;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getRecordEntity_();}  }
class C{  public synchronized void close(){  this.datbase.close();  this.bkpbase.close();}  }
class C{  public void notifyStatusBar(String tickerText,String contentTitle,String contentBody,boolean vibrate,boolean flashLights){  notifyStatusBar(tickerText,contentTitle,contentBody,vibrate,flashLights,null);}  }
class C{  protected ShaderVar addAttribute(IGlobalShaderVar var){  return addAttribute(var.getVarString(),var.getDataType());}  }
class C{  private void actualEnterAnnotations(List<JCAnnotation> annotations,Env<AttrContext> env,Symbol s){  Map<TypeSymbol,ListBuffer<Attribute.Compound>> annotated=new LinkedHashMap<TypeSymbol,ListBuffer<Attribute.Compound>>();  Map<Attribute.Compound,DiagnosticPosition> pos=new HashMap<Attribute.Compound,DiagnosticPosition>();  for (List<JCAnnotation> al=annotations; !al.isEmpty(); al=al.tail) {    JCAnnotation a=al.head;    Attribute.Compound c=annotate.enterAnnotation(a,syms.annotationType,env);    if (c == null) {      continue;    }    if (annotated.containsKey(a.type.tsym)) {      if (!allowRepeatedAnnos) {        log.error(a.pos(),"repeatable.annotations.not.supported.in.source");        allowRepeatedAnnos=true;      }      ListBuffer<Attribute.Compound> l=annotated.get(a.type.tsym);      l=l.append(c);      annotated.put(a.type.tsym,l);      pos.put(c,a.pos());    } else {      annotated.put(a.type.tsym,ListBuffer.of(c));      pos.put(c,a.pos());    }    if (!c.type.isErroneous() && s.owner.kind != MTH && types.isSameType(c.type,syms.deprecatedType)) {      s.flags_field|=Flags.DEPRECATED;    }  }  s.setDeclarationAttributesWithCompletion(annotate.new AnnotateRepeatedContext<Attribute.Compound>(env,annotated,pos,log,false));}  }
class C{  public static Validator<String> disallowedChars(String[] chars,BiFunction<String,StringDisallowedCharsValidator,? extends IllegalArgumentException> exception){  return new ValidatorEntry<>(StringDisallowedCharsValidator.create(joinRanges(chars)),exception);}  }
class C{  private void addDataToDictionaryMap(){  int surrogateKey=dictionaryByteArrayToSurrogateKeyMap.size();  List<byte[]> oneDictionaryChunk=dictionaryChunks.get(dictionaryChunks.size() - 1);  for (int i=0; i < oneDictionaryChunk.size(); i++) {    DictionaryByteArrayWrapper dictionaryByteArrayWrapper=new DictionaryByteArrayWrapper(oneDictionaryChunk.get(i),xxHash32);    dictionaryByteArrayToSurrogateKeyMap.put(dictionaryByteArrayWrapper,++surrogateKey);  }}  }
class C{  public static IJavaElement handleToElement(final WorkingCopyOwner owner,final String project,final String handle,final boolean check){  IJavaElement element=null;  if (owner != null)   element=JavaCore.create(handle,owner); else   element=JavaCore.create(handle);  if (element == null && project != null) {    final IJavaProject javaProject=JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()).getJavaProject(project);    final String identifier=javaProject.getHandleIdentifier();    if (owner != null)     element=JavaCore.create(identifier + handle,owner); else     element=JavaCore.create(identifier + handle);  }  if (check && element instanceof IMethod) {    final IMethod method=(IMethod)element;    final IMethod[] methods=method.getDeclaringType().findMethods(method);    if (methods != null && methods.length > 0)     element=methods[0];  }  if (element != null && (!check || element.exists()))   return element;  return null;}  }
class C{  @Override public String toString(){  return mLanguageName;}  }
class C{  private DataSet simulateDataHelper(int sampleSize,boolean latentDataSaved,int[] tiers){  int numMeasured=0;  int[] map=new int[nodes.length];  List<Node> variables=new LinkedList<>();  for (int j=0; j < nodes.length; j++) {    int numCategories=bayesPm.getNumCategories(nodes[j]);    List<String> categories=new LinkedList<>();    for (int k=0; k < numCategories; k++) {      categories.add(bayesPm.getCategory(nodes[j],k));    }    DiscreteVariable var=new DiscreteVariable(nodes[j].getName(),categories);    var.setNodeType(nodes[j].getNodeType());    variables.add(var);    int index=++numMeasured - 1;    map[index]=j;  }  DataSet dataSet=new BoxDataSet(new VerticalIntDataBox(sampleSize,variables.size()),variables);  constructSample(sampleSize,dataSet,map,tiers);  if (!latentDataSaved) {    dataSet=DataUtils.restrictToMeasured(dataSet);  }  return dataSet;}  }
class C{  public void dispatchAsComment(org.xml.sax.ext.LexicalHandler lh) throws org.xml.sax.SAXException {  String str=str();  lh.comment(str.toCharArray(),0,str.length());}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case EipPackage.AGGREGATOR__NAME:    setName(NAME_EDEFAULT);  return;case EipPackage.AGGREGATOR__TO_CHANNELS:getToChannels().clear();return;case EipPackage.AGGREGATOR__FROM_CHANNELS:getFromChannels().clear();return;case EipPackage.AGGREGATOR__PART:setPart(PART_EDEFAULT);return;case EipPackage.AGGREGATOR__STRATEGY:setStrategy(STRATEGY_EDEFAULT);return;case EipPackage.AGGREGATOR__EXPRESSION:setExpression(EXPRESSION_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  synchronized private boolean validateIdentity(String identity){  try {    Enumeration<NetworkInterface> enumeration=NetworkInterface.getNetworkInterfaces();    while (enumeration.hasMoreElements()) {      NetworkInterface nic=enumeration.nextElement();      if (!nic.isVirtual() && !nic.isLoopback()) {        String nicIdentity=this.createIdentity(nic.getHardwareAddress());        if (nicIdentity != null && nicIdentity.equals(identity)) {          return true;        }      }    }  } catch (  SocketException ex) {    log.error("Error accessing interface: {}",ex.getLocalizedMessage(),ex);  }  return false;}  }
class C{  public String toShortString(){  return toShortString(new StringBuilder(32));}  }
class C{  public void parse(InputSource input) throws IOException, SAXException {  if (parsing) {    throw new SAXException("Parser is already in use");  }  setupParser();  parsing=true;  try {    parser.parse(input);  }  finally {    parsing=false;  }  parsing=false;}  }
class C{  public static DoubleBuffer createShapeWithLeaderBuffer(String shape,double width,double height,Point leaderOffset,double leaderGapWidth,int cornerRadius,DoubleBuffer buffer){  if (shape.equals(AVKey.SHAPE_RECTANGLE))   return createRoundedRectangleWithLeaderBuffer(width,height,leaderOffset,leaderGapWidth,cornerRadius,buffer); else   if (shape.equals(AVKey.SHAPE_ELLIPSE))   return createEllipseWithLeaderBuffer(width,height,leaderOffset,leaderGapWidth,circleSteps,buffer); else   if (shape.equals(AVKey.SHAPE_NONE))   return null; else   return createRoundedRectangleWithLeaderBuffer(width,height,leaderOffset,leaderGapWidth,cornerRadius,buffer);}  }
class C{  public ImageAnalyzer(byte[] bytes) throws IOException {  InputStream is=new ByteArrayInputStream(bytes);  try {    analyze(is);  }  finally {    is.close();  }}  }
class C{  public static <Item extends IItem>void findSubItemSelections(Item item,List<String> selections){  if (item instanceof IExpandable && !((IExpandable)item).isExpanded() && ((IExpandable)item).getSubItems() != null) {    List<Item> subItems=(List<Item>)((IExpandable<Item,?>)item).getSubItems();    Item subItem;    String id;    for (int i=0, size=subItems.size(); i < size; i++) {      subItem=subItems.get(i);      id=String.valueOf(subItem.getIdentifier());      if (subItem.isSelected()) {        selections.add(id);      }      findSubItemSelections(subItem,selections);    }  }}  }
class C{  public RSyntaxTextArea(int textMode){  super(textMode);  init();}  }
class C{  @Override protected void configure(AuthenticationManagerBuilder auth) throws Exception {  auth.authenticationProvider(backendAdminUsernamePasswordAuthenticationProvider()).authenticationProvider(domainUsernamePasswordAuthenticationProvider()).authenticationProvider(tokenAuthenticationProvider());}  }
class C{  public Matrix covariance(){  final double sampleWeight=weightSum();  QL.require(sampleWeight > 0.0,UNSUFFICIENT_SAMPLE_WEIGHT);  final double sampleNumber=samples();  QL.require(sampleNumber > 1.0,UNSUFFICIENT_SAMPLE_NUMBER);  final Array m=mean();  final double inv=1.0 / sampleWeight;  final Matrix result=quadraticSum.mul(inv);  result.subAssign(m.outerProduct(m));  result.mulAssign(sampleNumber / (sampleNumber - 1.0));  return result;}  }
class C{  private void updateConfigFile(String content,Path configFile) throws IOException {  Files.write(configFile,content.getBytes(),StandardOpenOption.TRUNCATE_EXISTING,StandardOpenOption.CREATE);}  }
class C{  protected void sequence_Addition_Comparison_Exponentiation_Multiplication(ISerializationContext context,Expression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void endElement(String uri,String lname,String qname) throws org.xml.sax.SAXException {  if (uri == null) {    String msg=Logging.getMessage("nullValue.URIIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (lname == null) {    String msg=Logging.getMessage("nullValue.LNameIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (qname == null) {    String msg=Logging.getMessage("nullValue.QNameIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (this.currentElement != null) {    this.currentElement.endElement(uri,lname,qname);    if (lname.equalsIgnoreCase(this.currentElement.elementName))     this.currentElement=null;  }  this.doEndElement(uri,lname,qname);  this.currentCharacters=null;}  }
class C{  @Nullable public static byte[] decode(byte[] source,int off,int len){  int len34=len * 3 / 4;  byte[] outBuff=new byte[len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=off; i < off + len; i++) {    sbiCrop=(byte)(source[i] & 0x7f);    sbiDecode=DECODABET[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        b4[b4Posn++]=sbiCrop;        if (b4Posn > 3) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn);          b4Posn=0;          if (sbiCrop == EQUALS_SIGN) {            break;          }        }      }    } else {      System.err.println("Bad Base64 input character at " + i + ": "+ source[i]+ "(decimal)");      return null;    }  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  public void write(int c) throws IOException {  m_os.write(c);}  }
class C{  @OnClick(R.id.input_switch) public void onToggleClicked(View view){  if (((SwitchCompat)view).isChecked()) {    switchDisplay.setBackgroundColor(getResources().getColor(R.color.custom_yellow));    switchDisplay.setContentDescription("ON");  } else {    switchDisplay.setBackgroundColor(getResources().getColor(R.color.custom_grey));    switchDisplay.setContentDescription("OFF");  }}  }
class C{  private <T extends Request,U extends Response>void sendRequest(T request,CompletableFuture<U> future){  if (open) {    connect().whenComplete(null);  }}  }
class C{  public cite addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public TextHandler(String text){  super(text);  grep=new Grep(Grep.DEFAULT_UNESCAPE);  section=-1;  annotations=new HashMap<Lifeline,String>();  objectSectionEnd=0;  reset();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void endTour(){  GwtTour.removeAllCallOuts();  GwtTour.endTour(true);}  }
class C{  protected int searchForClosingBracket(int startPosition,char openBracket,char closeBracket,IDocument document) throws BadLocationException {  int stack=1;  int closePosition=startPosition + 1;  int length=document.getLength();  char nextChar;  while (closePosition < length && stack > 0) {    nextChar=document.getChar(closePosition);    if (nextChar == openBracket && nextChar != closeBracket)     stack++; else     if (nextChar == closeBracket)     stack--;    closePosition++;  }  if (stack == 0)   return closePosition - 1;  return -1;}  }
class C{  public void loop(){  play=true;  loop=true;}  }
class C{  void showErrorBox(String errorMessage,Runnable callback){  showErrorBox(new RuntimeException(errorMessage),callback);}  }
class C{  public Writer write(Writer writer) throws JSONException {  return this.write(writer,0,0);}  }
class C{  public void testUpdatableStream() throws Exception {  try {    this.stmt.executeUpdate("DROP TABLE IF EXISTS updateStreamTest");    this.stmt.executeUpdate("CREATE TABLE updateStreamTest (keyField INT NOT NULL AUTO_INCREMENT PRIMARY KEY, field1 BLOB)");    int streamLength=16385;    byte[] streamData=new byte[streamLength];    Statement updStmt=this.conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);    ResultSet updRs=updStmt.executeQuery("SELECT * FROM updateStreamTest");    updRs.moveToInsertRow();    updRs.updateBinaryStream("field1",new ByteArrayInputStream(streamData),streamLength);    updRs.insertRow();  }  finally {    this.stmt.executeUpdate("DROP TABLE IF EXISTS updateStreamTest");  }}  }
class C{  public void reset(){  _resetCount.incrementAndGet();}  }
class C{  protected void rehash(int newCapacity){  int oldCapacity=table.length;  int oldTable[]=table;  int oldValues[]=values;  byte oldState[]=state;  int newTable[]=new int[newCapacity];  int newValues[]=new int[newCapacity];  byte newState[]=new byte[newCapacity];  this.lowWaterMark=chooseLowWaterMark(newCapacity,this.minLoadFactor);  this.highWaterMark=chooseHighWaterMark(newCapacity,this.maxLoadFactor);  this.table=newTable;  this.values=newValues;  this.state=newState;  this.freeEntries=newCapacity - this.distinct;  int tmp=this.distinct;  this.distinct=Integer.MIN_VALUE;  for (int i=oldCapacity; i-- > 0; ) {    if (oldState[i] == FULL) {      put(oldTable[i],oldValues[i]);    }  }  this.distinct=tmp;}  }
class C{  public static File createTempDir(final String prefix,final String suffix) throws IOException {  return createTempDir(prefix,suffix,null);}  }
class C{  private static SAXParserFactory createSAXParserFactory(){  try {    SAXParserFactory factory=SAXParserFactory.newInstance();    try {      SAXParserFactory secureFactory=SecureGenericXMLFactory.getSAXParserFactory(factory);      secureFactory.newSAXParser();      factory=secureFactory;    } catch (    ParserConfigurationException e) {    }    factory.setNamespaceAware(true);    return factory;  } catch (  SAXException e) {    throw new IllegalStateException("Failed to create a SAX parser factory",e);  }}  }
class C{  protected CompoundExpr_Impl(){  super();}  }
class C{  private static SQLException runThroughExceptionInterceptor(ExceptionInterceptor exInterceptor,SQLException sqlEx,Connection conn){  if (exInterceptor != null) {    SQLException interceptedEx=exInterceptor.interceptException(sqlEx,conn);    if (interceptedEx != null) {      return interceptedEx;    }  }  return sqlEx;}  }
class C{  public Integer evaluate(float fraction,Integer startValue,Integer endValue){  int startInt=startValue;  return (int)(startInt + fraction * (endValue - startInt));}  }
class C{  public <R>PromisesArray<R> map(final Function<T,Promise<R>> fun){  return mapSourcePromises(null);}  }
class C{  public synchronized void loadImage(Entity entity,int secondaryPos){  Image base=mechTileset.imageFor(entity,boardview,secondaryPos);  Image wreck=wreckTileset.imageFor(entity,boardview,secondaryPos);  IPlayer player=entity.getOwner();  int tint=PlayerColors.getColorRGB(player.getColorIndex());  Image camo=null;  if (getEntityCamo(entity) != null) {    camo=getEntityCamo(entity);  } else {    camo=getPlayerCamo(player);  }  EntityImage entityImage=null;  for (Iterator<EntityImage> j=mechImageList.iterator(); j.hasNext(); ) {    EntityImage onList=j.next();    if ((onList.getBase() != null) && onList.getBase().equals(base) && (onList.tint == tint)&& (onList.getCamo() != null)&& onList.getCamo().equals(camo)) {      entityImage=onList;      break;    }  }  if (entityImage == null) {    entityImage=new EntityImage(base,wreck,tint,camo,boardview);    mechImageList.add(entityImage);    entityImage.loadFacings();    for (int j=0; j < 6; j++) {      tracker.addImage(entityImage.getFacing(j),1);    }  }  ArrayList<Integer> temp=new ArrayList<Integer>();  temp.add(entity.getId());  temp.add(secondaryPos);  mechImages.put(temp,entityImage);}  }
class C{  public AlgorithmFactory(){  super();  customProviders=new ArrayList<AlgorithmProvider>();}  }
class C{  static boolean isWhiteSpace(String s){  if (null != s) {    int n=s.length();    for (int i=0; i < n; i++) {      if (!isWhiteSpace(s.charAt(i)))       return false;    }  }  return true;}  }
class C{  public void ancestorResized(HierarchyEvent e){  ((HierarchyBoundsListener)a).ancestorResized(e);  ((HierarchyBoundsListener)b).ancestorResized(e);}  }
class C{  private void showLoadingProgress(){  if (progressWheel != null) {    progressWheel.setVisibility(View.VISIBLE);  }}  }
class C{  private Namespace createNamespaceFromEntity(NamespaceEntity namespaceEntity){  Namespace namespace=new Namespace();  namespace.setNamespaceCode(namespaceEntity.getCode());  return namespace;}  }
class C{  private void addDumpFile(){  addDumpFile(dumpFile);}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:11.197 -0500",hash_original_method="B9B8901A6530A5AA902AF1AE1DCFF588",hash_generated_method="F8972AB866C91994CC0AFCC2BDFED45D") @Override protected byte[] encrypt(byte type,byte[] fragment,int offset,int len){  try {    int content_mac_length=len + hash_size;    int padding_length=(block_size == 0) ? 0 : getPaddingSize(++content_mac_length);    byte[] res=new byte[content_mac_length + padding_length];    System.arraycopy(fragment,offset,res,0,len);    mac_material_header[0]=type;    mac_material_header[3]=(byte)((0x00FF00 & len) >> 8);    mac_material_header[4]=(byte)(0x0000FF & len);    encMac.update(write_seq_num);    encMac.update(mac_material_header);    encMac.update(fragment,offset,len);    encMac.doFinal(res,len);    if (block_size != 0) {      Arrays.fill(res,content_mac_length - 1,res.length,(byte)(padding_length));    }    if (logger != null) {      logger.println("SSLRecordProtocol.do_encryption: Generic" + (block_size != 0 ? "BlockCipher with padding[" + padding_length + "]:" : "StreamCipher:"));      logger.print(res);    }    byte[] rez=new byte[encCipher.getOutputSize(res.length)];    encCipher.update(res,0,res.length,rez);    incSequenceNumber(write_seq_num);    return rez;  } catch (  GeneralSecurityException e) {    e.printStackTrace();    throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLProtocolException("Error during the encryption"));  }}  }
class C{  public void endVisit(PrefixExpression node){}  }
class C{  public MersenneTwisterUniformRng(){  mt=new int[N];  setSeed(System.currentTimeMillis());}  }
class C{  public void skipMessage() throws IOException {  while (true) {    final int tag=readTag();    if (tag == 0 || !skipField(tag)) {      return;    }  }}  }
class C{  Map<String,String> assembleHeadersForObject(final String[] values){  final TuplizerSetting meta=tuplizerSetting;  if (values == null || values.length == 0) {    return EMPTY_HEADERS;  }  final int currentHeaderCount=values.length + 1;  final Map<String,String> headers=new HashMap<String,String>();  for (int index=0; index < currentHeaderCount - 1; index++) {    headers.put(meta.key + index,values[index]);  }  final int terminatorIndex=currentHeaderCount - 1;  headers.put(meta.key + (terminatorIndex),String.valueOf(meta.key.hashCode()));  return headers;}  }
class C{  @Override public InStore openRead(long address,int size){  if (fileSize() < address + size) {    throw new IllegalStateException(L.l("{0} read open for length {1}:{2} but file length {3}",this,address,size,fileSize()));  }  if (_isClosed.get()) {    throw new IllegalStateException(L.l("{0} is closed.",this));  }  if (_fileSize < address + size) {    throw new IllegalStateException(L.l("Open read of large file {0}:{1}",Long.toHexString(address),size));  }  try {    streamOpen(address,size);    return openReadImpl(address,size);  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public boolean isInclusive(){  return inclusive;}  }
class C{  public String closeToDefaultTipText(){  return "The default value to replace values with that are too close.";}  }
class C{  public String convertNameAndAccessToString(EDataType eDataType,Object instanceValue){  return super.convertToString(eDataType,instanceValue);}  }
class C{  public static byte readAvailableByte(Object o){  return JavaHeader.readAvailableByte(o);}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public double expectedFalsePositiveProbability(){  return getFalsePositiveProbability(expectedNumberOfFilterElements);}  }
class C{  @Override public Path watchable(){  return dir;}  }
class C{  public int showDialog(){  m_Result=CANCEL_OPTION;  setVisible(true);  setButtons();  return m_Result;}  }
class C{  public HITSWithPriors(Hypergraph<V,E> g,Function<E,? extends Number> edge_weights,Function<V,HITS.Scores> vertex_priors,double alpha){  super(g,edge_weights,vertex_priors,alpha);  disappearing_potential=new HITS.Scores(0,0);}  }
class C{  private <T extends DataObject>void queryAndPrintRecord(URI id,Class<T> clazz) throws Exception {  T object=queryObject(id,clazz);  if (object == null) {    System.out.println("id: " + id + " [ Deleted ]");    return;  }  printBeanProperties(clazz,object);}  }
class C{  public void reset(){  min=Integer.MAX_VALUE;  max=Integer.MIN_VALUE;}  }
class C{  public void hideProgress(){  mProgress.setVisibility(View.GONE);}  }
class C{  public long maxAmperesIn(){  return 1;}  }
class C{  public void test_default_graph_joins_01a() throws Exception {  if (!store.isQuads())   return;  new TestHelper("default-graph-joins-01a","default-graph-joins-01a.rq","default-graph-joins-01.trig","default-graph-joins-01a.srx").runTest();}  }
class C{  private static final StringBuilder convertToAbbr(StringBuilder sb,String name){  sb.append(Character.toUpperCase(name.charAt(0)));  sb.append(name.charAt(1)).append(name.charAt(2));  return sb;}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){}  }
class C{  default Count entries(long cost,boolean isEstimateOk){  return null;}  }
class C{  public static boolean isSystemApplication(PackageManager packageManager,String packageName){  if (packageManager == null || packageName == null || packageName.length() == 0) {    return false;  }  try {    ApplicationInfo app=packageManager.getApplicationInfo(packageName,0);    return (app != null && (app.flags & ApplicationInfo.FLAG_SYSTEM) > 0);  } catch (  NameNotFoundException e) {    Logger.e(e);  }  return false;}  }
class C{  void releaseLocal(long threadId){  GridCacheMvccCandidate prev=null;  GridCacheMvccCandidate owner=null;  CacheObject val;  boolean hasVal;synchronized (this) {    GridCacheMvcc mvcc=mvccExtras();    if (mvcc != null) {      prev=mvcc.localOwner();      owner=mvcc.releaseLocal(threadId);      if (mvcc.isEmpty())       mvccExtras(null);    }    val=this.val;    hasVal=hasValueUnlocked();  }  if (prev != null && owner != prev) {    checkThreadChain(prev);    if (cctx.events().isRecordable(EVT_CACHE_OBJECT_UNLOCKED))     cctx.events().addEvent(partition(),key,prev.nodeId(),prev,EVT_CACHE_OBJECT_UNLOCKED,val,hasVal,val,hasVal,null,null,null,true);  }  checkOwnerChanged(prev,owner);}  }
class C{  public void animate(float fraction){  float animationFactor;  if (linear) {    animationFactor=fraction;  } else {    animationFactor=(float)Math.sin(fraction * (float)Math.PI / 2);  }  animationFactor=Math.min(animationFactor,1.0f);  animationFactor=Math.max(animationFactor,0.0f);  opacity=animationFactor;  moveX=moveMinX + (int)(.5f + animationFactor * (float)(moveMaxX - moveMinX));  repaint();}  }
class C{  private void animatePropertyBy(int constantName,float startValue,float byValue){  if (mAnimatorMap.size() > 0) {    Animator animatorToCancel=null;    Set<Animator> animatorSet=mAnimatorMap.keySet();    for (    Animator runningAnim : animatorSet) {      PropertyBundle bundle=mAnimatorMap.get(runningAnim);      if (bundle.cancel(constantName)) {        if (bundle.mPropertyMask == NONE) {          animatorToCancel=runningAnim;          break;        }      }    }    if (animatorToCancel != null) {      animatorToCancel.cancel();    }  }  NameValuesHolder nameValuePair=new NameValuesHolder(constantName,startValue,byValue);  mPendingAnimations.add(nameValuePair);  View v=mView.get();  if (v != null) {    v.removeCallbacks(mAnimationStarter);    v.post(mAnimationStarter);  }}  }
class C{  public static Object convertStringToObject(String value,Class<?> type){  Object obj=null;  try {    if (String.class.equals(type)) {      obj=value;    }    if (Long.class.equals(type) || long.class.equals(type)) {      obj=Long.parseLong(value);    } else     if (Integer.class.equals(type) || int.class.equals(type)) {      obj=Integer.parseInt(value);    } else     if (Double.class.equals(type) || double.class.equals(type)) {      obj=Double.parseDouble(value);    } else     if (Float.class.equals(type) || float.class.equals(type)) {      obj=Float.parseFloat(value);    } else     if (Boolean.class.equals(type) || boolean.class.equals(type)) {      obj=Boolean.valueOf(value);    }    if (obj != null)     return obj;  } catch (  NumberFormatException ex) {    throw new IllegalArgumentException("Fail to convert string: " + value + " into type of "+ type,ex);  }  throw new IllegalArgumentException("Fail to convert string: " + value + " into type of "+ type+ ", illegal type: "+ type);}  }
class C{  public void error(org.xml.sax.SAXParseException e) throws org.xml.sax.SAXException {  String formattedMsg=e.getMessage();  SAXSourceLocator locator=getLocator();  ErrorListener handler=m_stylesheetProcessor.getErrorListener();  try {    handler.error(new TransformerException(formattedMsg,locator));  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }}  }
class C{  ByteVector put12(final int b,final int s){  int length=this.length;  if (length + 3 > data.length) {    enlarge(3);  }  byte[] data=this.data;  data[length++]=(byte)b;  data[length++]=(byte)(s >>> 8);  data[length++]=(byte)s;  this.length=length;  return this;}  }
class C{  public DefaultRequest socialAction(String value){  setString(SOCIAL_ACTION,value);  return this;}  }
class C{  protected boolean[] fill(boolean[] array,boolean val){  for (int i=0; i < array.length; i++)   array[i]=val;  return array;}  }
class C{  public void signMessage(Document document,String signAlgorithm,String digestAlgorithm,X509Certificate cert,PrivateKey key) throws CertificateException, FileNotFoundException, NoSuchAlgorithmException, InvalidKeySpecException, MarshalException, XMLSignatureException, IOException {  try {    if (Thread.currentThread().getContextClassLoader() == null) {      Thread.currentThread().setContextClassLoader(getClass().getClassLoader());    }    setIDAttribute(document);    XPath xpath=XPathFactory.newInstance().newXPath();    XPathExpression expr=xpath.compile("//*[local-name()='Response']/@ID");    NodeList nlURIs=(NodeList)expr.evaluate(document,XPathConstants.NODESET);    String[] sigIDs=new String[nlURIs.getLength()];    for (int i=0; i < nlURIs.getLength(); i++) {      sigIDs[i]=nlURIs.item(i).getNodeValue();    }    Init.init();    for (    String id : sigIDs) {      signElement(document,id,cert,key,signAlgorithm,digestAlgorithm);    }  } catch (  XPathExpressionException e) {    e.printStackTrace();  }}  }
class C{  private void cleanUpFrontier(){  while (!frontier.isEmpty() && explored.contains(frontier.element().getState()))   frontier.remove();}  }
class C{  public static byte[] compress(byte[] data) throws IOException {  Deflater deflater=new Deflater(9,Boolean.TRUE);  deflater.setInput(data);  ByteArrayOutputStream outputStream=new ByteArrayOutputStream(data.length);  deflater.finish();  byte[] buffer=new byte[1024];  while (!deflater.finished()) {    int count=deflater.deflate(buffer);    outputStream.write(buffer,0,count);  }  outputStream.close();  byte[] output=outputStream.toByteArray();  deflater.end();  return output;}  }
class C{  public float popFloat(){  BaseTypeWrapper wrapper=(BaseTypeWrapper)this.pop();  Float value=(Float)wrapper.getValue();  return value.floatValue();}  }
class C{  public boolean isInDomain(float domainValue){  if (mDomainA > mDomainB) {    return domainValue <= mDomainA && domainValue >= mDomainB;  }  return domainValue >= mDomainA && domainValue <= mDomainB;}  }
class C{  public void add(K key,int numReferences){  Integer value=refSet.get(key);  if (value == null) {    refSet.put(key,numReferences);    return;  }  throw new IllegalArgumentException("Key '" + key + "' already in collection");}  }
class C{  public static final GeoTimeSerie subSerie(GeoTimeSerie gts,long starttimestamp,long stoptimestamp,boolean overwrite,boolean copyLabels,GeoTimeSerie subgts){  if (null == subgts) {    subgts=new GeoTimeSerie(128);    subgts.setName(gts.getName());    if (copyLabels) {      subgts.setLabels(gts.getLabels());    }  } else {    GTSHelper.reset(subgts);  }  if (null == gts.ticks || 0 == gts.values) {    return subgts;  }  GTSHelper.sort(gts);  int lastidx=Arrays.binarySearch(gts.ticks,0,gts.values,stoptimestamp);  if (-1 == lastidx) {    return subgts;  } else   if (lastidx < 0) {    lastidx=-lastidx - 1;    if (lastidx >= gts.values) {      lastidx=gts.values - 1;    }  }  int firstidx=Arrays.binarySearch(gts.ticks,0,lastidx + 1,starttimestamp);  if (firstidx < 0) {    firstidx=-firstidx - 1;  }  if (firstidx >= gts.values) {    return subgts;  }  for (int i=firstidx; i <= lastidx; i++) {    if (gts.ticks[i] >= starttimestamp && gts.ticks[i] <= stoptimestamp) {      setValue(subgts,gts.ticks[i],null != gts.locations ? gts.locations[i] : GeoTimeSerie.NO_LOCATION,null != gts.elevations ? gts.elevations[i] : GeoTimeSerie.NO_ELEVATION,valueAtIndex(gts,i),overwrite);    }  }  return subgts;}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  private void updateNeighborViewsForID(final long itemID){  final int position=getPositionForID(itemID);  final ListAdapter adapter=getAdapter();  mAboveItemId=adapter.getItemId(position - 1);  mBelowItemId=adapter.getItemId(position + 1);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return STORE_NAME;case 3:return KEY;case 4:return VERSIONED_VALUE;case 5:return VALUE;default :return null;}}  }
class C{  @Override protected boolean calcProblem(){  String type=getTagWithKey(Tags.KEY_TYPE);  if (type == null || type.equals("")) {    return true;  }  return super.calcProblem();}  }
class C{  public void insertChar(AttributedCharacterIterator newParagraph,int insertPos){  if (collectStats) {    printStats();  }  if (wantStats) {    collectStats=true;  }  fStart=newParagraph.getBeginIndex();  int end=newParagraph.getEndIndex();  if (end - fStart != fChars.length + 1) {    initAll(newParagraph);  }  char[] newChars=new char[end - fStart];  int newCharIndex=insertPos - fStart;  System.arraycopy(fChars,0,newChars,0,newCharIndex);  char newChar=newParagraph.setIndex(insertPos);  newChars[newCharIndex]=newChar;  System.arraycopy(fChars,newCharIndex,newChars,newCharIndex + 1,end - insertPos - 1);  fChars=newChars;  if (fBidi != null || Bidi.requiresBidi(newChars,newCharIndex,newCharIndex + 1) || newParagraph.getAttribute(TextAttribute.BIDI_EMBEDDING) != null) {    fBidi=new Bidi(newParagraph);    if (fBidi.isLeftToRight()) {      fBidi=null;    }  }  fParagraph=StyledParagraph.insertChar(newParagraph,fChars,insertPos,fParagraph);  invalidateComponents();}  }
class C{  private static <T extends Comparable<T>>int randomizedPartition(List<T> a,int lower,int upper){  int i=lower + RANDOM.nextInt(upper - lower + 1);  exchange(a,upper,i);  return partition(a,lower,upper);}  }
class C{  public void write(byte[] buffer){  try {    mmOutStream.write(buffer);    mHandler.obtainMessage(BlueToothServer.MESSAGE_WRITE,-1,-1,buffer).sendToTarget();  } catch (  IOException e) {    Log.e(TAG,"Exception during write",e);  }}  }
class C{  public String generateReport(final ReceiptHeader[] receipts,final boolean flag){  final String serviceCode=receipts[0].getService().getCode();  final char receiptType=receipts[0].getReceipttype();  final List<BillReceiptInfo> receiptList=new ArrayList<BillReceiptInfo>(0);  final String templateName=collectionsUtil.getReceiptTemplateName(receiptType,serviceCode);  LOGGER.info(" template name : " + templateName);  final Map<String,Object> reportParams=new HashMap<String,Object>(0);  reportParams.put(CollectionConstants.REPORT_PARAM_COLLECTIONS_UTIL,collectionsUtil);  if (receiptType == CollectionConstants.RECEIPT_TYPE_CHALLAN) {    reportParams.put(CollectionConstants.REPORT_PARAM_EGOV_COMMON,egovCommon);    for (    final ReceiptHeader receiptHeader : receipts) {      final ReceiptHeader receipHeaderRefObj=(ReceiptHeader)persistenceService.findByNamedQuery(CollectionConstants.QUERY_CHALLANRECEIPT_BY_REFERENCEID,receiptHeader.getId());      receiptList.add(new BillReceiptInfoImpl(receiptHeader,egovCommon,receipHeaderRefObj,chartOfAccountsHibernateDAO,persistenceService));    }  } else   for (  final ReceiptHeader receiptHeader : receipts) {    String additionalMessage=null;    if (receiptType == CollectionConstants.RECEIPT_TYPE_BILL)     additionalMessage=receiptHeaderService.getAdditionalInfoForReceipt(serviceCode,new BillReceiptInfoImpl(receiptHeader,chartOfAccountsHibernateDAO,persistenceService,null));    if (additionalMessage != null)     receiptList.add(new BillReceiptInfoImpl(receiptHeader,additionalMessage,chartOfAccountsHibernateDAO,persistenceService)); else     receiptList.add(new BillReceiptInfoImpl(receiptHeader,chartOfAccountsHibernateDAO,persistenceService,null));  }  final ReportRequest reportInput=new ReportRequest(templateName,receiptList,reportParams);  reportInput.setReportFormat(ReportConstants.FileFormat.PDF);  reportInput.setPrintDialogOnOpenReport(flag);  return reportViewerUtil.addReportToTempCache(collectionsUtil.createReport(reportInput));}  }
class C{  public boolean matchesFirstGlyph(int glyphCode,char glyphUnicode){  if (firstGlyphCodes != null) {    int pt=Arrays.binarySearch(firstGlyphCodes,glyphCode);    if (pt >= 0)     return true;  }  for (int i=0; i < firstUnicodeRanges.length; i++) {    if (firstUnicodeRanges[i].contains(glyphUnicode))     return true;  }  return false;}  }
class C{  protected SVGOMScriptElement(){}  }
