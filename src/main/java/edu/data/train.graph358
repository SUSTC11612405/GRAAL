class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (namespace: ");  result.append(namespace);  result.append(", name: ");  result.append(name);  result.append(", documentation: ");  result.append(documentation);  result.append(", domainID: ");  result.append(domainID);  result.append(')');  return result.toString();}  }
class C{  @Override public boolean isCellEditable(int rowIndex,int columnIndex){  if (!isInitialized()) {    return false;  } else {    return getModel().isCellEditable(mIndices[rowIndex],columnIndex);  }}  }
class C{  public Restaurant clear(){  placeId=null;  name=null;  address=null;  phone=null;  url=null;  notes=null;  showGeofenceNotifications=true;  return this;}  }
class C{  private UsernamePasswordCredentials orgCredentials(Organisation org){  return new UsernamePasswordCredentials(org.getKey().toString(),org.getPassword());}  }
class C{  public boolean isShowing(){  if (source instanceof Component) {    return ((Component)source).isShowing();  } else {    return false;  }}  }
class C{  public boolean rejectedDueToInitialization(){  return (this.msg != null) && this.msg.notYetInitialized;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:06.268 -0500",hash_original_method="0254EC2D8CB0B709656A3942F767CF9E",hash_generated_method="0CB3F7FD91AEAB7C2CA4E8CE82749124") public boolean op(Rect r,Op op){  addTaintLocal(r.getTaintInt() + op.nativeInt);  return getTaintBoolean();}  }
class C{  public List<Bucket> listBuckets() throws OSSException, ClientException {  BucketList bucketList=listBuckets(new ListBucketsRequest(null,null,null));  List<Bucket> buckets=bucketList.getBucketList();  while (bucketList.isTruncated()) {    bucketList=listBuckets(new ListBucketsRequest(null,bucketList.getNextMarker(),null));    buckets.addAll(bucketList.getBucketList());  }  return buckets;}  }
class C{  public String toShortString(){  return toShortString(null);}  }
class C{  public boolean mkdir() throws IOException {  return getWrappedPath().mkdir();}  }
class C{  public int viewToModel(float x,float y,Shape a,Position.Bias[] bias){  Rectangle alloc=(Rectangle)a;  if (x < alloc.x + (alloc.width / 2)) {    bias[0]=Position.Bias.Forward;    return getStartOffset();  }  bias[0]=Position.Bias.Backward;  return getEndOffset();}  }
class C{  public ProgressMonitor(Component parentComponent,Object message,String note,int min,int max){  this(parentComponent,message,note,min,max,null);}  }
class C{  public void init() throws ServletException {}  }
class C{  public XMLEncoder(OutputStream out){  if (null != out) {    try {      this.out=new PrintWriter(new OutputStreamWriter(out,DEFAULT_ENCODING),true);    } catch (    UnsupportedEncodingException e) {    }  }}  }
class C{  public long roundTripTime() throws InterruptedException {  latch.await();  return received - sent;}  }
class C{  boolean isAvailable(){  return nativeSharedPages != -1;}  }
class C{  public static Presence parsePresence(XmlPullParser parser) throws Exception {  Presence.Type type=Presence.Type.available;  String typeString=parser.getAttributeValue("","type");  if (typeString != null && !typeString.equals("")) {    try {      type=Presence.Type.valueOf(typeString);    } catch (    IllegalArgumentException iae) {      System.err.println("Found invalid presence type " + typeString);    }  }  Presence presence=new Presence(type);  presence.setTo(parser.getAttributeValue("","to"));  presence.setFrom(parser.getAttributeValue("","from"));  String id=parser.getAttributeValue("","id");  presence.setPacketID(id == null ? Packet.ID_NOT_AVAILABLE : id);  String language=getLanguageAttribute(parser);  if (language != null && !"".equals(language.trim())) {    presence.setLanguage(language);  }  presence.setPacketID(id == null ? Packet.ID_NOT_AVAILABLE : id);  boolean done=false;  while (!done) {    int eventType=parser.next();    if (eventType == XmlPullParser.START_TAG) {      String elementName=parser.getName();      String namespace=parser.getNamespace();      if (elementName.equals("status")) {        presence.setStatus(parser.nextText());      } else       if (elementName.equals("priority")) {        try {          int priority=Integer.parseInt(parser.nextText());          presence.setPriority(priority);        } catch (        NumberFormatException nfe) {        }catch (        IllegalArgumentException iae) {          presence.setPriority(0);        }      } else       if (elementName.equals("show")) {        String modeText=parser.nextText();        try {          presence.setMode(Presence.Mode.valueOf(modeText));        } catch (        IllegalArgumentException iae) {          System.err.println("Found invalid presence mode " + modeText);        }      } else       if (elementName.equals("error")) {        presence.setError(parseError(parser));      } else       if (elementName.equals("properties") && namespace.equals(PROPERTIES_NAMESPACE)) {        Map<String,Object> properties=parseProperties(parser);        for (        String name : properties.keySet()) {          presence.setProperty(name,properties.get(name));        }      } else {        try {          presence.addExtension(PacketParserUtils.parsePacketExtension(elementName,namespace,parser));        } catch (        Exception e) {          System.err.println("Failed to parse extension packet in Presence packet.");        }      }    } else     if (eventType == XmlPullParser.END_TAG) {      if (parser.getName().equals("presence")) {        done=true;      }    }  }  return presence;}  }
class C{  public int search(String text,boolean matchCase){  return search(text,matchCase,false);}  }
class C{  boolean isEmpty(){  return DATA_MODEL.getRowCount() == 0;}  }
class C{  public String write(){  StringBuilder result=new StringBuilder();  for (  Text t : this.components) {    result.append(t);  }  return result.toString();}  }
class C{  public static void clear(FileSystem fs) throws IOException {  FileStatus[] statuses=fs.listStatus(new Path("/"));  if (statuses != null) {    for (    FileStatus stat : statuses)     fs.delete(stat.getPath(),true);  }}  }
class C{  public void insertBefore(final AbstractInsnNode location,final InsnList insns){  if (insns.size == 0) {    return;  }  size+=insns.size;  AbstractInsnNode ifirst=insns.first;  AbstractInsnNode ilast=insns.last;  AbstractInsnNode prev=location.prev;  if (prev == null) {    first=ifirst;  } else {    prev.next=ifirst;  }  location.prev=ilast;  ilast.next=location;  ifirst.prev=prev;  cache=null;  insns.removeAll(false);}  }
class C{  public GeoRssPoint(){  super(Namespaces.GEO_RSS_NAMESPACE,NAME);}  }
class C{  public static void sort(long[] array,int start,int end){  DualPivotQuicksort.sort(array,start,end);}  }
class C{  private void listMoves(){  String movesStr=getMoveListString(false);  System.out.printf("%s",movesStr);}  }
class C{  PriorityQueueSpliterator(PriorityQueue<E> pq,int origin,int fence,int expectedModCount){  this.pq=pq;  this.index=origin;  this.fence=fence;  this.expectedModCount=expectedModCount;}  }
class C{  public TitleSorter(boolean ascending,boolean ignoreThe){  super(ascending);  this.ignoreThe=ignoreThe;}  }
class C{  public static String selectText(XPathExpression expr,Node context){  try {    return (String)expr.evaluate(context,XPathConstants.STRING);  } catch (  XPathExpressionException e) {    throw new XmlException(e);  }}  }
class C{  public boolean stopScoUsingVirtualVoiceCall(BluetoothDevice device){  if (DBG)   log("stopScoUsingVirtualVoiceCall()");  if (mService != null && isEnabled() && isValidDevice(device)) {    try {      return mService.stopScoUsingVirtualVoiceCall(device);    } catch (    RemoteException e) {      Log.e(TAG,e.toString());    }  } else {    Log.w(TAG,"Proxy not attached to service");    if (DBG)     Log.d(TAG,Log.getStackTraceString(new Throwable()));  }  return false;}  }
class C{  private int handleD(String value,DoubleMetaphoneResult result,int index){  if (contains(value,index,2,"DG")) {    if (contains(value,index + 2,1,"I","E","Y")) {      result.append('J');      index+=3;    } else {      result.append("TK");      index+=2;    }  } else   if (contains(value,index,2,"DT","DD")) {    result.append('T');    index+=2;  } else {    result.append('T');    index++;  }  return index;}  }
class C{  public AtomicShortArray(int length){  this.length=length;  this.backingArraySize=(length & 1) + (length >> 1);  this.backingArray=new AtomicIntegerArray(this.backingArraySize);}  }
class C{  public List<Message> retrieve(int amount){  if (atEnd) {    return null;  }  int toQueue;  LinkedList<Message> out=new LinkedList<>();  EntityBuilder builder=new EntityBuilder(api);  while (amount > 0) {    toQueue=Math.min(amount,100);    try {      Requester.Response response=api.getRequester().get(Requester.DISCORD_API_PREFIX + "channels/" + channelId+ "/messages?limit="+ toQueue+ (lastId != null ? "&before=" + lastId : ""));      if (!response.isOk())       throw new RuntimeException("Error fetching message-history for channel with id " + channelId + "... Error: "+ response.toString());      JSONArray array=response.getArray();      for (int i=0; i < array.length(); i++) {        out.add(builder.createMessage(array.getJSONObject(i)));      }      if (array.length() < toQueue) {        atEnd=true;        break;      } else {        lastId=out.getLast().getId();      }    } catch (    Exception ex) {      JDAImpl.LOG.log(ex);      break;    }    amount-=toQueue;  }  if (out.size() == 0) {    return null;  }  queued.addAll(out);  return out;}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  protected boolean isNotSameAsOwner(MultistepExprHolder head,ElemTemplateElement ete){  MultistepExprHolder next=head;  while (null != next) {    ElemTemplateElement elemOwner=getElemFromExpression(next.m_exprOwner.getExpression());    if (elemOwner == ete)     return false;    next=next.m_next;  }  return true;}  }
class C{  public void paintInternalFrameTitlePaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  double startv(SMat A,double[][] wptr,int step,int n){  double rnm2, t;  double[] r;  int id, i;  rnm2=svd_ddot(n,wptr[0],1,wptr[0],1);  Random random=new Random(918273L + step);  r=wptr[0];  for (id=0; id < 3; id++) {    if (id > 0 || step > 0 || rnm2 == 0)     for (i=0; i < n; i++)     r[i]=random.nextDouble();    svd_dcopy(n,wptr[0],1,wptr[3],1);    svd_opb(A,wptr[3],wptr[0],OPBTemp);    svd_dcopy(n,wptr[0],1,wptr[3],1);    rnm2=svd_ddot(n,wptr[0],1,wptr[3],1);    if (rnm2 > 0.0)     break;  }  if (rnm2 <= 0.0) {    ierr=8192;    return (-1);  }  if (step > 0) {    for (i=0; i < step; i++) {      store(n,RETRQ,i,wptr[5]);      t=-svd_ddot(n,wptr[3],1,wptr[5],1);      svd_daxpy(n,t,wptr[5],1,wptr[0],1);    }    t=svd_ddot(n,wptr[4],1,wptr[0],1);    svd_daxpy(n,-t,wptr[2],1,wptr[0],1);    svd_dcopy(n,wptr[0],1,wptr[3],1);    t=svd_ddot(n,wptr[3],1,wptr[0],1);    if (t <= eps * rnm2)     t=0.0;    rnm2=t;  }  return (Math.sqrt(rnm2));}  }
class C{  public SharedMemoryPixmapsTest(){  testFrame=new Frame("SharedMemoryPixmapsTest");  testFrame.add(new TestComponent());  testFrame.setUndecorated(true);  testFrame.setResizable(false);  testFrame.pack();  testFrame.setLocationRelativeTo(null);  testFrame.setVisible(true);  testFrame.toFront();}  }
class C{  public void update(byte[] input,int inOff,int length){  digest.update(input,inOff,length);}  }
class C{  public static Response httpDelete(String host,String path,int connectTimeout,Map<String,String> headers,Map<String,String> querys,List<String> signHeaderPrefixList,String appKey,String appSecret) throws Exception {  headers=initialBasicHeader(HttpMethod.DELETE,path,headers,querys,null,signHeaderPrefixList,appKey,appSecret);  HttpClient httpClient=wrapClient(host);  httpClient.getParams().setParameter(CoreConnectionPNames.CONNECTION_TIMEOUT,getTimeout(connectTimeout));  HttpDelete delete=new HttpDelete(initUrl(host,path,querys));  for (  Map.Entry<String,String> e : headers.entrySet()) {    delete.addHeader(e.getKey(),MessageDigestUtil.utf8ToIso88591(e.getValue()));  }  return convert(httpClient.execute(delete));}  }
class C{  public void search(String query){  if (query == null)   query="";  if (query.equals(m_query))   return;  Tuple[] rem=clearInternal();  m_query=query;  query.trim();  if (query.length() == 0) {    this.fireTupleEvent(null,DELETE);    return;  }  m_lucene.setReadMode(true);  try {    Hits hits=m_lucene.search(query);    for (int i=0; i < hits.length(); i++) {      Tuple t=getMatchingTuple(hits.doc(i));      addInternal(t);    }    Tuple[] add=getTupleCount() > 0 ? toArray() : null;    fireTupleEvent(add,rem);  } catch (  ParseException e) {    s_logger.warning("Lucene query parse exception.\n" + StringLib.getStackTrace(e));  }catch (  IOException e) {    s_logger.warning("Lucene IO exception.\n" + StringLib.getStackTrace(e));  }}  }
class C{  void writeTo(byte[] b,int off){  System.arraycopy(buf,0,b,off,count);}  }
class C{  public Query(URL feedUrl){  this.feedUrl=feedUrl;}  }
class C{  public Object extFunction(FuncExtFunction extFunction,Vector argVec,ExpressionContext exprContext) throws javax.xml.transform.TransformerException {  Object result=null;  String ns=extFunction.getNamespace();  if (null != ns) {    ExtensionHandler extNS=(ExtensionHandler)m_extensionFunctionNamespaces.get(ns);    if (null != extNS) {      try {        result=extNS.callFunction(extFunction,argVec,exprContext);      } catch (      javax.xml.transform.TransformerException e) {        throw e;      }catch (      Exception e) {        throw new javax.xml.transform.TransformerException(e);      }    } else {      throw new XPathProcessorException(XSLMessages.createMessage(XSLTErrorResources.ER_EXTENSION_FUNC_UNKNOWN,new Object[]{ns,extFunction.getFunctionName()}));    }  }  return result;}  }
class C{  public org.smpte_ra.schemas.st2067_2_2016.DigestMethodType buildDefaultDigestMethodType(){  org.smpte_ra.schemas.st2067_2_2016.DigestMethodType digestMethodType=new org.smpte_ra.schemas.st2067_2_2016.DigestMethodType();  digestMethodType.setAlgorithm(CompositionPlaylistBuilder_2016.defaultHashAlgorithm);  return digestMethodType;}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == Type.class) {switch (baseOperationID) {case TypesPackage.TYPE___GET_TYPE_VARS:      return TypesPackage.TYPE_VARIABLE___GET_TYPE_VARS;case TypesPackage.TYPE___GET_TYPE_AS_STRING:    return TypesPackage.TYPE_VARIABLE___GET_TYPE_AS_STRING;default :  return super.eDerivedOperationID(baseOperationID,baseClass);}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public void loadLuaScript(final RedisCommand redisCommand,int executionCounter){  final int executionCounterIncr=++executionCounter;  redisClient.scriptExists(this.sha,null);}  }
class C{  public static long fromBits(final String str){  long res=0;  int len=0;  for (int i=0; i < str.length(); i++) {    final char c=str.charAt(i);switch (c) {case '0':      res=res << 1;    len++;  break;case '1':res=(res << 1) + 1L;len++;break;case ':':case ' ':break;default :throw new IllegalArgumentException("Invalid character in bit string:" + c);}}if (len > 64) {throw new IllegalArgumentException("bit string too long:" + len);}return res;}  }
class C{  @VisibleForTesting protected void startExecutor(final int container){  LOG.info("Starting a new executor for container: " + container);  final Process containerExecutor=startExecutorProcess(container);  processToContainer.put(containerExecutor,container);  LOG.info("Started the executor for container: " + container);  startExecutorMonitor(container,containerExecutor);}  }
class C{  protected void skipRemainingTagsInCurrentIfd() throws IOException, ExifInvalidFormatException {  int endOfTags=mIfdStartOffset + OFFSET_SIZE + TAG_SIZE * mNumOfTagInIfd;  int offset=mTiffStream.getReadByteCount();  if (offset > endOfTags) {    return;  }  if (mNeedToParseOffsetsInCurrentIfd) {    while (offset < endOfTags) {      mTag=readTag();      offset+=TAG_SIZE;      if (mTag == null) {        continue;      }      checkOffsetOrImageTag(mTag);    }  } else {    skipTo(endOfTags);  }  long ifdOffset=readUnsignedLong();  if (mIfdType == IfdId.TYPE_IFD_0 && (isIfdRequested(IfdId.TYPE_IFD_1) || isThumbnailRequested())) {    if (ifdOffset > 0) {      registerIfd(IfdId.TYPE_IFD_1,ifdOffset);    }  }}  }
class C{  public Insanity(Insanity other){  if (other.isSetUserMap()) {    Map<Numberz,Long> __this__userMap=new HashMap<Numberz,Long>(other.userMap.size());    for (    Map.Entry<Numberz,Long> other_element : other.userMap.entrySet()) {      Numberz other_element_key=other_element.getKey();      Long other_element_value=other_element.getValue();      Numberz __this__userMap_copy_key=other_element_key;      Long __this__userMap_copy_value=other_element_value;      __this__userMap.put(__this__userMap_copy_key,__this__userMap_copy_value);    }    this.userMap=__this__userMap;  }  if (other.isSetXtructs()) {    List<Xtruct> __this__xtructs=new ArrayList<Xtruct>(other.xtructs.size());    for (    Xtruct other_element : other.xtructs) {      __this__xtructs.add(new Xtruct(other_element));    }    this.xtructs=__this__xtructs;  }}  }
class C{  public BufferedImage createBufferedImage(int imageWidth,int imageHeight,double drawWidth,double drawHeight,ChartRenderingInfo info){  BufferedImage image=new BufferedImage(imageWidth,imageHeight,BufferedImage.TYPE_INT_ARGB);  Graphics2D g2=image.createGraphics();  double scaleX=imageWidth / drawWidth;  double scaleY=imageHeight / drawHeight;  AffineTransform st=AffineTransform.getScaleInstance(scaleX,scaleY);  g2.transform(st);  draw(g2,new Rectangle2D.Double(0,0,drawWidth,drawHeight),null,info);  g2.dispose();  return image;}  }
class C{  public Void doInBackground(){  try {    this.tradePersistentModel=(PersistentModel)ClassFactory.getServiceForInterface(PersistentModel._persistentModel,this);    this.tradestrategy=this.tradePersistentModel.findTradestrategyById(this.idTradestrategy);    this.strategyData.clearBaseCandleDataset();    this.tradestrategy.setStrategyData(this.strategyData);    ZonedDateTime endDate=TradingCalendar.getDateAtTime(TradingCalendar.getPrevTradingDay(tradestrategy.getTradingday().getClose()),tradestrategy.getTradingday().getClose());    ZonedDateTime startDate=TradingCalendar.addTradingDays(tradestrategy.getTradingday().getClose(),(-1 * (tradestrategy.getChartDays() - 1)));    startDate=TradingCalendar.getDateAtTime(startDate,tradestrategy.getTradingday().getOpen());    endDate=TradingCalendar.addTradingDays(endDate,-1);    List<Candle> candles=new ArrayList<>();    List<Candle> candlesTradingday=new ArrayList<>();    candles=this.getCandles(this.tradestrategy,startDate,endDate,this.tradestrategy.getBarSize());    if (_backTestBarSize > 0) {      candlesTradingday=this.getCandles(this.tradestrategy,this.tradestrategy.getTradingday().getOpen(),this.tradestrategy.getTradingday().getOpen(),_backTestBarSize);      if (candlesTradingday.isEmpty()) {        _log.warn("No backTestBarSize = " + _backTestBarSize + " data available for "+ this.tradestrategy.getContract().getSymbol()+ " and Tradingday: "+ this.tradestrategy.getTradingday().getOpen()+ " will use barSize = "+ this.tradestrategy.getBarSize()+ " data if avaialble.");        candlesTradingday=this.getCandles(this.tradestrategy,this.tradestrategy.getTradingday().getOpen(),this.tradestrategy.getTradingday().getOpen(),this.tradestrategy.getBarSize());      }    } else {      candlesTradingday=this.getCandles(this.tradestrategy,this.tradestrategy.getTradingday().getOpen(),this.tradestrategy.getTradingday().getOpen(),this.tradestrategy.getBarSize());    }synchronized (lockBackTestWorker) {      while (strategiesRunning.get() < 1) {        lockBackTestWorker.wait();      }    }    if (candlesTradingday.isEmpty()) {      _log.warn("No data available to run a backtest for Symbol: " + this.tradestrategy.getContract().getSymbol() + " and Tradingday: "+ this.tradestrategy.getTradingday().getOpen());      this.tradestrategy.getStrategyData().getBaseCandleSeries().fireSeriesChanged();    } else {      for (      Candle candle : candlesTradingday) {        candles.add(candle);      }      candlesTradingday.clear();      populateIndicatorCandleSeries(tradestrategy,this.tradestrategy.getTradingday().getOpen(),this.tradestrategy.getTradingday().getOpen());    }    TradestrategyOrders positionOrders=null;    for (    Candle candle : candles) {      ruleComplete.set(0);      this.tradestrategy.getStrategyData().getBaseCandleSeries().getContract().setLastAskPrice(candle.getClose());      this.tradestrategy.getStrategyData().getBaseCandleSeries().getContract().setLastBidPrice(candle.getClose());      this.tradestrategy.getStrategyData().getBaseCandleSeries().getContract().setLastPrice(candle.getClose());      this.tradestrategy.getStrategyData().buildCandle(candle.getStartPeriod(),candle.getOpen().doubleValue(),candle.getHigh().doubleValue(),candle.getLow().doubleValue(),candle.getClose().doubleValue(),candle.getVolume(),candle.getVwap().doubleValue(),candle.getTradeCount(),this.tradestrategy.getBarSize() / candle.getBarSize(),candle.getLastUpdateDate());synchronized (lockBackTestWorker) {        while ((strategiesRunning.get() > 0) && (ruleComplete.get() < 1)) {          lockBackTestWorker.wait();        }      }      if (candle.getStartPeriod().isBefore(this.tradestrategy.getTradingday().getOpen()))       continue;      positionOrders=this.tradePersistentModel.findPositionOrdersByTradestrategyId(this.idTradestrategy);      if (filledOrders(this.tradestrategy.getContract(),positionOrders,candle)) {        positionOrders=this.tradePersistentModel.findPositionOrdersByTradestrategyId(this.idTradestrategy);        if (this.tradestrategy.getStrategy().hasStrategyManager()) {synchronized (lockBackTestWorker) {            while (strategiesRunning.get() < 1 && positionOrders.hasOpenTradePosition()) {              lockBackTestWorker.wait();            }          }        }        if (positionOrders.hasOpenTradePosition()) {          if (!this.tradestrategy.getStrategyData().getBaseCandleSeries().isEmpty()) {            CandleItem candleItem=(CandleItem)this.tradestrategy.getStrategyData().getBaseCandleSeries().getDataItem(this.tradestrategy.getStrategyData().getBaseCandleSeries().getItemCount() - 1);            if (!candleItem.isSide(positionOrders.getOpenTradePosition().getSide())) {              positionOrders=this.tradePersistentModel.findPositionOrdersByTradestrategyId(this.idTradestrategy);              filledOrders(this.tradestrategy.getContract(),positionOrders,candle);            }          }        }synchronized (lockBackTestWorker) {          while (strategiesRunning.get() > 1) {            lockBackTestWorker.wait();          }        }      }      if (strategiesRunning.get() == 0 && !positionOrders.hasOpenTradePosition())       break;    }    candles.clear();  } catch (  InterruptedException interExp) {  }catch (  Exception ex) {    _log.error("Error BackTestBroker Symbol: " + this.tradestrategy.getContract().getSymbol() + " Msg: "+ ex.getMessage(),ex);  }  return null;}  }
class C{  @Override public void write(OutputStream outputStream) throws IOException {  if (getRequest().getMethod() != Method.HEAD) {    QueryResponseWriterUtil.writeQueryResponse(outputStream,responseWriter,solrRequest,solrResponse,contentType);  }}  }
class C{  public void findAndUndo(Object obj){  if (obj == this) {    this.dispose();  }}  }
class C{  public static void execute(final IAbstractCriteriumTree tree,final ZyGraph graph){  final List<NaviNode> nodes=GraphHelpers.filter(graph,new CriteriumFilter(tree));  final List<NaviNode> allNodes=GraphHelpers.getNodes(graph);  graph.selectNodes(allNodes,false);  graph.selectNodes(nodes,true);}  }
class C{  private double[][] cloneValues(){  double[][] newDoubles=new double[values.length][];  for (int i=0; i < values.length; i++)   newDoubles[i]=values[i].clone();  return newDoubles;}  }
class C{  @SuppressWarnings("unchecked") private void collectOptionalGroups(final GraphPatternGroup<IGroupMemberNode> group,final Collection<JoinGroupNode> optionalGroups){  if (group instanceof JoinGroupNode && group.isOptional() && group.getParent() != null) {    optionalGroups.add((JoinGroupNode)group);  }  for (  IGroupMemberNode child : group) {    if (child instanceof ServiceNode) {      final ServiceNode serviceNode=((ServiceNode)child);      final IVariableOrConstant<?> serviceRef=serviceNode.getServiceRef().getValueExpression();      if (serviceRef.isVar()) {        continue;      }      final BigdataURI serviceURI=ServiceCallUtility.getConstantServiceURI(serviceRef);      if (!BDS.SEARCH.equals(serviceURI)) {        continue;      }      final GraphPatternGroup<IGroupMemberNode> graphPattern=serviceNode.getGraphPattern();      collectOptionalGroups(graphPattern,optionalGroups);    }    if (!(child instanceof GraphPatternGroup<?>))     continue;    collectOptionalGroups((GraphPatternGroup<IGroupMemberNode>)child,optionalGroups);  }}  }
class C{  public void addTransition(@NonNull Transition transition){  processAnimation(new TransitionAnimation(transition));}  }
class C{  public boolean isHidden(){  SecurityManager security=System.getSecurityManager();  if (security != null) {    security.checkRead(path);  }  if (isInvalid()) {    return false;  }  return ((fs.getBooleanAttributes(this) & FileSystem.BA_HIDDEN) != 0);}  }
class C{  public InflaterOutputStream(OutputStream out){  this(out,new Inflater());  usesDefaultInflater=true;}  }
class C{  private void displayMovieDetails(Cursor cursor){  LogUtils.LOGD(TAG,"Refreshing movie details");  cursor.moveToFirst();  movieTitle=cursor.getString(MovieDetailsQuery.TITLE);  mediaTitle.setText(movieTitle);  mediaUndertitle.setText(cursor.getString(MovieDetailsQuery.TAGLINE));  setMediaYear(cursor.getInt(MovieDetailsQuery.RUNTIME) / 60,cursor.getInt(MovieDetailsQuery.YEAR));  mediaGenres.setText(cursor.getString(MovieDetailsQuery.GENRES));  double rating=cursor.getDouble(MovieDetailsQuery.RATING);  if (rating > 0) {    mediaRating.setVisibility(View.VISIBLE);    mediaMaxRating.setVisibility(View.VISIBLE);    mediaRatingVotes.setVisibility(View.VISIBLE);    setMediaRating(rating);    String votes=cursor.getString(MovieDetailsQuery.VOTES);    mediaRatingVotes.setText((TextUtils.isEmpty(votes)) ? "" : String.format(getString(R.string.votes),votes));  } else {    mediaRating.setVisibility(View.INVISIBLE);    mediaMaxRating.setVisibility(View.INVISIBLE);    mediaRatingVotes.setVisibility(View.INVISIBLE);  }  mediaDescription.setText(cursor.getString(MovieDetailsQuery.PLOT));  mediaDirectors.setText(cursor.getString(MovieDetailsQuery.DIRECTOR));  imdbButton.setTag(cursor.getString(MovieDetailsQuery.IMDBNUMBER));  setupSeenButton(cursor.getInt(MovieDetailsQuery.PLAYCOUNT));  Resources resources=getActivity().getResources();  DisplayMetrics displayMetrics=new DisplayMetrics();  getActivity().getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);  int posterWidth=resources.getDimensionPixelOffset(R.dimen.now_playing_poster_width);  int posterHeight=resources.getDimensionPixelOffset(R.dimen.now_playing_poster_height);  UIUtils.loadImageWithCharacterAvatar(getActivity(),getHostManager(),cursor.getString(MovieDetailsQuery.THUMBNAIL),movieTitle,mediaPoster,posterWidth,posterHeight);  int artHeight=resources.getDimensionPixelOffset(R.dimen.now_playing_art_height);  UIUtils.loadImageIntoImageview(getHostManager(),cursor.getString(MovieDetailsQuery.FANART),mediaArt,displayMetrics.widthPixels,artHeight);  movieDownloadInfo=new FileDownloadHelper.MovieInfo(movieTitle,cursor.getString(MovieDetailsQuery.FILE));  if (movieDownloadInfo.downloadFileExists()) {    Resources.Theme theme=getActivity().getTheme();    TypedArray styledAttributes=theme.obtainStyledAttributes(new int[]{R.attr.colorAccent});    downloadButton.setColorFilter(styledAttributes.getColor(0,getActivity().getResources().getColor(R.color.accent_default)));    styledAttributes.recycle();  } else {    downloadButton.clearColorFilter();  }}  }
class C{  public BloomFilter(int entries,double error){  this(null,entries,error);}  }
class C{  private byte[] uint8_4FromData(int offset){  return Arrays.copyOfRange(data(),offset,offset + 4);}  }
class C{  public boolean isSameNode(Node other){  return this == other;}  }
class C{  public boolean isAlwaysDecodeGzip(){  return alwaysDecodeGzip;}  }
class C{  public void putControlEvent(ReplControlEvent controlEvent) throws InterruptedException {  readQueue.postOutOfBand(controlEvent);}  }
class C{  public void addAlternateIdentifier(java.lang.String param){  if (localAlternateIdentifier == null) {    localAlternateIdentifier=new java.lang.String[]{};  }  localAlternateIdentifierTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localAlternateIdentifier);  list.add(param);  this.localAlternateIdentifier=(java.lang.String[])list.toArray(new java.lang.String[list.size()]);}  }
class C{  void compute(){  double lt1;  double ln1;  double lt2;  double ln2;  FontRenderContext frc=new FontRenderContext(new AffineTransform(),true,true);  gv=font.createGlyphVector(frc,str);  Rectangle2D r=gv.getLogicalBounds();  w=r.getWidth();  angle=0;  int nseg=llpoints.length / 2 - 1;  lt1=llpoints[0];  ln1=llpoints[1];  llp1.setLatLon(lt1,ln1,true);  lt2=llpoints[2 * nseg];  ln2=llpoints[2 * nseg + 1];  llp2.setLatLon(lt2,ln2,true);  distance=GreatCircle.sphericalDistance(lt1,ln1,lt2,ln2) * Planet.wgs84_earthEquatorialRadiusMeters;  setNeedToRegenerate(true);  visible=false;  double[] ds=new double[nseg];  double[] az=new double[nseg];  double[] cs=new double[nseg];  int j=2;  double s=0;  double corr=0;  double dz;  double az0=0;  for (int i=0; i < nseg; i++) {    lt2=(float)llpoints[j++];    ln2=(float)llpoints[j++];    if (lt2 == lt1 && ln2 == ln1) {      i--;      nseg--;    } else {      s+=GreatCircle.sphericalDistance(lt1,ln1,lt2,ln2);      ds[i]=s;      az[i]=GreatCircle.sphericalAzimuth(lt1,ln1,lt2,ln2);      if (i > 0) {        dz=(float)Math.tan((az[i] - az0) / 2);        if (dz < 0) {          cs[i - 1]=-dz;          corr-=2 * dz;        }      }      az0=az[i];      lt1=lt2;      ln1=ln2;    }  }  if (nseg <= 1)   return;  visible=true;  LineMetrics lm=font.getLineMetrics("MM",frc);  if (lm == null) {    System.out.println("null metrics");    return;  }  float h=(float)lm.getAscent();  corr=0f;  w-=corr * h;  float sc=(float)(w / s);  for (int i=0; i < nseg; i++)   ds[i]*=sc;  int m=gv.getNumGlyphs();  float[] gp=gv.getGlyphPositions(0,m,null);  if (gp == null)   System.out.println("gp null");  AffineTransform at;  double dx;  double dy;  double x=0;  double y=0;  double xa;  double ya;  double s0=0;  double ps;  double s1;  double s2;  double theta;  double theta2;  double thetai;  double dtheta;  double ch0=0;  double cos1;  double sin1;  double cos2;  double sin2;  j=0;  for (int i=0; i < m; i++) {    if (i == m - 1 || gp == null) {      s=(float)w;    } else {      s=gp[2 * i + 2];    }    ps=s - s0;    theta=az[j];    cos1=Math.cos(theta);    sin1=Math.sin(theta);    float ch=(float)(cs[j] * h);    if (s + ch0 < ds[j] - ch || j == nseg - 1) {      xa=x;      ya=y;      x+=ps * cos1;      y+=ps * sin1;    } else {      theta2=az[j + 1];      cos2=Math.cos(theta2);      sin2=Math.sin(theta2);      dtheta=theta2 - theta;      s1=ds[j] - ch - ch0- s0;      s2=s1 * Math.sin(dtheta);      s2=ps * ps - s2 * s2;      s2=Math.sqrt(s2) - s1 * Math.cos(dtheta);      dx=s1 * cos1 + s2 * cos2;      dy=s1 * sin1 + s2 * sin2;      thetai=Math.atan2(dy,dx);      if (ch == 0) {        xa=x;        ya=y;      } else {        dx+=ch * cos1 + ch * cos2;        dy+=ch * sin1 + ch * sin2;        xa=x + h * sin1 - h * Math.sin(thetai);        ya=y - h * cos1 + h * Math.cos(thetai);      }      x+=dx;      y+=dy;      j++;      ch0=ch;      theta=thetai;    }    gv.setGlyphPosition(i,new Point2D.Double(xa,ya));    if (theta != 0) {      at=new AffineTransform();      at.rotate(theta);      gv.setGlyphTransform(i,at);    }    s0=s;  }  angle=Math.atan2(y,x);  w=Math.sqrt(x * x + y * y);}  }
class C{  public boolean deleteCluster(final String xivSystem,final String clusterName) throws Exception {  final String instanceURL=MessageFormat.format(CLUSTER_INSTANCE_URL,xivSystem,clusterName);  boolean deleteSuccessful=false;  if (findAvailability(instanceURL)) {    boolean isHostsAvailable=findAvailability(MessageFormat.format(HOST_URL + SEARCH_URL,xivSystem,CLUSTER,clusterName));    if (!isHostsAvailable) {      ResponseValidator failureStatus=executePOSTRequest(xivSystem,instanceURL,DELETE_BODY);      deleteSuccessful=true;      if (failureStatus.isFailed()) {        throw XIVRestException.exceptions.clusterDeleteFailure(xivSystem,clusterName,failureStatus.toString());      }    } else {      _log.warn("There are some more Hosts associated with the Cluster {}. Skipping deletion.",clusterName);    }  } else {    throw XIVRestException.exceptions.instanceUnavailableForDelete(xivSystem,CLUSTER,clusterName);  }  return deleteSuccessful;}  }
class C{  private static String[] resolveMethodSignature(final String methodDesc){  return null;}  }
class C{  @Override public void clear(){  if (size != 0) {    Arrays.fill(table,null);    entryForNullKey=null;    modCount++;    size=0;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:16.626 -0400",hash_original_method="F6F7C5047DC0414882B99A9BDC4D3E2F",hash_generated_method="EF2B772175AAE8D3466D59DBE8AC7D90") public void enablePan(BluetoothAdapter adapter){  if (mPan == null)   mPan=(BluetoothPan)connectProxy(adapter,BluetoothProfile.PAN);  assertNotNull(mPan);  long start=System.currentTimeMillis();  mPan.setBluetoothTethering(true);  long stop=System.currentTimeMillis();  assertTrue(mPan.isTetheringOn());  writeOutput(String.format("enablePan() completed in %d ms",(stop - start)));}  }
class C{  @ResponseBody @RequestMapping(method=RequestMethod.GET) public List<Application> findAllByUser() throws ServiceException {  User user=this.authentificationUtils.getAuthentificatedUser();  List<Application> applications=applicationService.findAllByUser(user);  logger.debug("Number of applications " + applications.size());  return applications;}  }
class C{  public void closeBluetooth(){  if (!isAvailable() && !isEnabled()) {    return;  }  mBluetoothAdapter.disable();}  }
class C{  public void testIsRelCanonicalPageWithoutRelCanonical(){  System.out.println("isRelCanonicalPageWithoutRelCanonical");  SSP ssp=new MockSSP();  ssp.setURI(URL);  StringBuilder strb=new StringBuilder();  strb.append("<html>");  strb.append("<head>");  strb.append("</head>");  strb.append("</html>");  ssp.setSource(strb.toString());  CrawlerImpl instance=new CrawlerImpl();  boolean result=instance.isRelCanonicalPage(ssp);  assertFalse(result);}  }
class C{  public void destroy(){  List<byte[]> digestList=getDigestList();  client.put(this.policy,this.key,Bin.asNull(this.binNameString));  for (  byte[] digest : digestList) {    Key subKey=new Key(this.key.namespace,digest,null,null);    client.delete(this.policy,subKey);  }}  }
class C{  protected int calculateNewCapacity(int proposedCapacity){  int newCapacity=1;  if (proposedCapacity > MAXIMUM_CAPACITY) {    newCapacity=MAXIMUM_CAPACITY;  } else {    while (newCapacity < proposedCapacity) {      newCapacity<<=1;    }    if (newCapacity > MAXIMUM_CAPACITY) {      newCapacity=MAXIMUM_CAPACITY;    }  }  return newCapacity;}  }
class C{  private static double entropyLn(double num){  if (num < 1e-6) {    return 0;  } else {    return num * Math.log(num);  }}  }
class C{  private void buildDefinitionTitle(String title,String anchor,MarkupDocBuilder docBuilder){  docBuilder.sectionTitleWithAnchorLevel2(title,anchor);}  }
class C{  public static ODataUri createODataUri(String serviceRoot,String entitySetName,String... expandPathNames){  scala.Option<String> none=scala.Option.apply(null);  List<ExpandItem> expandItems=new ArrayList<>();  for (  String expandPathName : expandPathNames) {    ExpandPathSegment path=new NavigationPropertyExpandPathSegment(expandPathName,none);    expandItems.add(new PathExpandItem(none,path,scala.collection.immutable.List$.MODULE$.empty()));  }  ExpandOption expandOption=new ExpandOption(asScalaList(expandItems));  List<QueryOption> queryOptions=new ArrayList<>();  queryOptions.add(expandOption);  EntitySetPath entitySetPath=new EntitySetPath(entitySetName,null);  ResourcePathUri resourcePathUri=new ResourcePathUri(entitySetPath,asScalaList(queryOptions));  return new ODataUri(serviceRoot,resourcePathUri);}  }
class C{  public void clean(){  Iterator<Map.Entry<File,File>> iter=ownerToWorkspace.entrySet().iterator();  while (iter.hasNext()) {    Map.Entry<File,File> entry=iter.next();    File ownerDir=entry.getKey();    File workspaceDir=entry.getValue();    if (!ownerDir.exists()) {      deleteWorkspace(workspaceDir,"owner " + ownerDir + " no longer exists.");      iter.remove();    }  }}  }
class C{  @SkipValidation @Action(value="/searchNotices-reset") public String reset(){  if (LOGGER.isDebugEnabled())   LOGGER.debug("reset : Before reset values : ownerName : " + ownerName + " zoneId : "+ zoneId+ " wardId : "+ wardId+ " propertyType : "+ propertyType+ " noticeType : "+ noticeType+ " noticeNumber : "+ noticeNumber+ " noticeFromDate : "+ noticeFromDate+ " noticeToDate : "+ noticeToDate+ " indexNumber : "+ indexNumber+ " houseNumber : "+ houseNumber);  ownerName="";  zoneId=-1l;  wardId=-1l;  propertyType="-1";  noticeType="-1";  noticeNumber="";  noticeFromDate=null;  noticeToDate=null;  indexNumber="";  houseNumber="";  if (LOGGER.isDebugEnabled())   LOGGER.debug("Exit from reset method");  return INDEX;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public void testRemoveWorstPlans_withTypes(){  PlanSelector<Plan,Person> selector=getPlanSelector();  Person person=PopulationUtils.getFactory().createPerson(Id.create(1,Person.class));  Plan plan1=PopulationUtils.createPlan(person);  plan1.setScore(15.0);  Plan plan2=PopulationUtils.createPlan(person);  plan2.setScore(22.0);  Plan plan3=PopulationUtils.createPlan(person);  Plan plan4=PopulationUtils.createPlan(person);  plan4.setScore(1.0);  Plan plan5=PopulationUtils.createPlan(person);  plan5.setScore(18.0);  Plan plan6=PopulationUtils.createPlan(person);  plan6.setScore(21.0);  plan1.setType("type1");  plan2.setType("type2");  plan3.setType("type1");  plan4.setType("type2");  plan5.setType("type1");  plan6.setType("type2");  person.addPlan(plan1);  person.addPlan(plan2);  person.addPlan(plan3);  person.addPlan(plan4);  person.addPlan(plan5);  person.addPlan(plan6);  assertEquals("test we have all plans we want",6,person.getPlans().size());  person.getPlans().remove(selector.selectPlan(person));  person.getPlans().remove(selector.selectPlan(person));  assertEquals("test that two plans were removed",4,person.getPlans().size());  assertFalse("test that plan with undefined score was removed.",person.getPlans().contains(plan3));  assertFalse("test that plan with worst score was removed.",person.getPlans().contains(plan4));  person.getPlans().remove(selector.selectPlan(person));  person.getPlans().remove(selector.selectPlan(person));  assertEquals("test that two plans were removed",2,person.getPlans().size());  assertFalse("test that the plan with worst score was removed",person.getPlans().contains(plan1));  assertTrue("test that the now only plan of type a was not removed",person.getPlans().contains(plan5));  assertFalse("test that the plan with the 2nd-worst score was removed",person.getPlans().contains(plan6));  person.getPlans().remove(selector.selectPlan(person));  assertEquals("test that one plan was removed",1,person.getPlans().size());  assertTrue("test that the plan with highest score of type b was not removed",person.getPlans().contains(plan2));}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public ModifyHpSpell(RPObject object){  super(object);}  }
class C{  private static List<BusinessProject> transform(List<DashBoard> projects){  return projects.stream().map(null).collect(Collectors.toList());}  }
class C{  public boolean isArray(){  if (fType == UNKNOWN && (fChecked & ARRAY) == 0 && Signature.getTypeSignatureKind(signature) == Signature.ARRAY_TYPE_SIGNATURE)   fType=ARRAY;  fChecked|=ARRAY;  return fType == ARRAY;}  }
class C{  @Deprecated public void angularUnwatchGlobal(String name,AngularObjectWatcher watcher){  angularUnwatch(name,null,watcher);}  }
class C{  public RaptorState copy(){  return new RaptorState(this);}  }
class C{  public JonasStandaloneConfigurationTest(String testName,EnvironmentTestData testData) throws Exception {  super(testName,testData);}  }
class C{  public void testBlockCountEviction() throws Exception {  start();  int blockCnt=3;  evictPlc.setMaxBlocks(blockCnt);  igfsPrimary.create(FILE_RMT,true).close();  checkEvictionPolicy(0,0);  int blockSize=igfsPrimary.info(FILE_RMT).blockSize();  append(FILE_RMT,blockSize * blockCnt);  checkEvictionPolicy(blockCnt,blockCnt * blockSize);  append(FILE_RMT,blockSize);  checkEvictionPolicy(blockCnt,blockCnt * blockSize);  read(FILE_RMT,0,blockSize);  checkEvictionPolicy(blockCnt,blockCnt * blockSize);  checkMetrics(1,1);}  }
class C{  public void register(){  core.getInfoRegistry().put("searcher",this);  core.getInfoRegistry().put(name,this);  for (  SolrCache cache : cacheList) {    cache.setState(SolrCache.State.LIVE);    core.getInfoRegistry().put(cache.name(),cache);  }  registerTime=System.currentTimeMillis();}  }
class C{  private static void saveUserProfile(final File databasesDir,final String account) throws IOException {  if (sLogger.isActivated()) {    sLogger.info("saveAccountDatabases account=".concat(account));  }  String[] listOfDbFiles=databasesDir.list(sFilenameDbFilter);  if (listOfDbFiles == null) {    throw new FileNotFoundException("Failed to find " + DB_FILE_EXTENSION + " files at : "+ databasesDir.getPath());  }  File dstDir=new File(databasesDir,account);  for (  String dbFile : listOfDbFiles) {    File srcFile=new File(databasesDir,dbFile);    FileUtils.copyFileToDirectory(srcFile,dstDir,true);    if (sLogger.isActivated()) {      sLogger.info("Save file '" + srcFile + "' to '"+ dstDir+ "'");    }  }  dstDir.setLastModified(System.currentTimeMillis());}  }
class C{  public final void onKeyUpPanel(int featureId,KeyEvent event){  if (mPanelChordingKey != 0) {    mPanelChordingKey=0;    if (event.isCanceled() || (mDecor != null && mDecor.mActionMode != null)) {      return;    }    boolean playSoundEffect=false;    final PanelFeatureState st=getPanelState(featureId,true);    if (featureId == FEATURE_OPTIONS_PANEL && mActionBar != null && mActionBar.isOverflowReserved()) {      if (mActionBar.getVisibility() == View.VISIBLE) {        if (!mActionBar.isOverflowMenuShowing()) {          if (!isDestroyed() && preparePanel(st,event)) {            playSoundEffect=mActionBar.showOverflowMenu();          }        } else {          playSoundEffect=mActionBar.hideOverflowMenu();        }      }    } else {      if (st.isOpen || st.isHandled) {        playSoundEffect=st.isOpen;        closePanel(st,true);      } else       if (st.isPrepared) {        boolean show=true;        if (st.refreshMenuContent) {          st.isPrepared=false;          show=preparePanel(st,event);        }        if (show) {          EventLog.writeEvent(50001,0);          openPanel(st,event);          playSoundEffect=true;        }      }    }    if (playSoundEffect) {      AudioManager audioManager=(AudioManager)getContext().getSystemService(Context.AUDIO_SERVICE);      if (audioManager != null) {        audioManager.playSoundEffect(AudioManager.FX_KEY_CLICK);      } else {        Log.w(TAG,"Couldn't get audio manager");      }    }  }}  }
class C{  private double objectiveFunctionValue(){  double objValue=0.0;  for (int classId=0; classId < numClasses; ++classId) {    Counter<NgramHistory> historyCount=classHistoryCount.getCounter(classId);    for (    NgramHistory history : historyCount.keySet()) {      double count=historyCount.getCount(history);      assert count > 0.0;      objValue+=count * Math.log(count);    }    double count=classCount.getCount(classId);    if (count > 0.0) {      objValue-=count * Math.log(count);    } else {      logger.warn("Empty cluster: {}",classId);    }  }  return objValue;}  }
class C{  public JSONObject put(String key,boolean value) throws JSONException {  put(key,value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  public boolean execute(String action,CordovaArgs args,CallbackContext callbackContext) throws JSONException {  return false;}  }
class C{  public static void uploadImage(String url,Bitmap bitmap) throws IOException {  ByteArrayOutputStream bOS=new ByteArrayOutputStream();  bitmap.compress(Bitmap.CompressFormat.JPEG,100,bOS);  byte[] bitmapData=bOS.toByteArray();  InputStream stream=new ByteArrayInputStream(bitmapData);  String contentType=URLConnection.guessContentTypeFromStream(stream);  InputStreamContent content=new InputStreamContent(contentType,stream);  MediaType MEDIA_TYPE_JPEG=MediaType.parse("image/jpeg");  OkHttpClient client=new OkHttpClient();  RequestBody requestBody=RequestBodyUtil.create(MEDIA_TYPE_JPEG,content.getInputStream());  Request request=new Request.Builder().url(url).put(requestBody).build();  Response response=client.newCall(request).execute();  if (!response.isSuccessful()) {    throw new IOException("Unexpected code " + response);  }}  }
class C{  public void endStatement(){  startStatement=-1;  closeTemporaryResults();}  }
class C{  public String replaceTokens(String source){  MesosCluster cluster=getCluster();  List<ClusterProcess> uniqueRoles=ClusterUtil.getDistinctRoleProcesses(cluster.getMemberProcesses());  String updatedJson=source;  for (  ClusterProcess process : uniqueRoles) {    URI serviceUri=process.getServiceUrl();    if (serviceUri != null) {      updatedJson=replaceToken(updatedJson,MesosCluster.MINIMESOS_TOKEN_PREFIX + process.getRole().toUpperCase(),serviceUri.toString());      updatedJson=replaceToken(updatedJson,MesosCluster.MINIMESOS_TOKEN_PREFIX + process.getRole().toUpperCase() + "_IP",serviceUri.getHost());      updatedJson=replaceToken(updatedJson,MesosCluster.MINIMESOS_TOKEN_PREFIX + process.getRole().toUpperCase() + "_PORT",Integer.toString(serviceUri.getPort()));    }  }  String masterContainer=cluster.getMaster().getContainerId();  updatedJson=replaceToken(updatedJson,MesosCluster.TOKEN_NETWORK_GATEWAY,DockerContainersUtil.getGatewayIpAddress(masterContainer));  updatedJson=replaceToken(updatedJson,TOKEN_HOST_DIR,MesosCluster.getHostDir().getAbsolutePath());  return updatedJson;}  }
class C{  private boolean match(char[] text,int off,char[] wild,int pos){  while (pos < wild.length && off < text.length) {    if (wild[pos] == '*') {      while (wild[pos] == '*') {        if (++pos >= wild.length)         return true;      }      if (wild[pos] == '?') {        if (++pos >= wild.length)         return true;      }      for (; off < text.length; off++) {        if (text[off] == wild[pos] || wild[pos] == '?') {          if (wild[pos - 1] != '?') {            if (match(text,off,wild,pos))             return true;          } else {            break;          }        }      }      if (text.length == off)       return false;    }    if (text[off++] != wild[pos++]) {      if (wild[pos - 1] != '?')       return false;    }  }  if (wild.length == pos) {    return text.length == off;  }  while (wild[pos] == '*') {    if (++pos >= wild.length)     return true;  }  return false;}  }
class C{  public void destroy(){  mStorage.destroy();}  }
class C{  public LabelEx(){}  }
class C{  public static int abs(final int a){  return (a ^ a >> 31) - (a >> 31);}  }
class C{  public boolean containsValue(Object value){  if (cache.containsValue(value))   return true;  if (container.containsValue(value))   return true;  return false;}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  public ICUCollationAttributeFactory(AttributeFactory delegate,Collator collator){  super(delegate,ICUCollatedTermAttributeImpl.class);  this.collator=collator;}  }
class C{  @Override protected void scrollViews(View firstView,int delta){  Point firstViewNewCenter=scrollSingleViewVerticallyBy(firstView,delta);  ViewData previousViewData=new ViewData(firstView.getTop(),firstView.getBottom(),firstView.getLeft(),firstView.getRight(),firstViewNewCenter);  for (int indexOfView=1; indexOfView < mCallback.getChildCount(); indexOfView++) {    View view=mCallback.getChildAt(indexOfView);    scrollSingleView(previousViewData,view);  }}  }
class C{  public static final int numProcessors(){  return m_processors;}  }
class C{  public Boolean isIdKpOCSPSigning(){  return idKpOCSPSigning;}  }
class C{  public NewThreadAction(Runnable runnable,String name,boolean daemon,boolean user){  this(user ? userThreadGroup : systemThreadGroup,runnable,name,daemon);}  }
class C{  protected <E extends Identifiable>List<E> findEntitiesMarkedForDeletion(EntityManager em,Class<E> type){  requireArgument(em != null,"The entity manager cannot be null.");  requireArgument(type != null,"The entity cannot be null.");  em.getEntityManagerFactory().getCache().evictAll();  return JPAEntity.findEntitiesMarkedForDeletion(em,type);}  }
class C{  private synchronized void shapeContextually(char[] text,int start,int count,int ctxKey){  if ((mask & (1 << ctxKey)) == 0) {    ctxKey=EUROPEAN_KEY;  }  int lastkey=ctxKey;  int base=bases[ctxKey];  char minDigit=ctxKey == ETHIOPIC_KEY ? '1' : '0';synchronized (NumericShaper.class) {    for (int i=start, e=start + count; i < e; ++i) {      char c=text[i];      if (c >= minDigit && c <= '\u0039') {        text[i]=(char)(c + base);      }      if (isStrongDirectional(c)) {        int newkey=getContextKey(c);        if (newkey != lastkey) {          lastkey=newkey;          ctxKey=newkey;          if (((mask & EASTERN_ARABIC) != 0) && (ctxKey == ARABIC_KEY || ctxKey == EASTERN_ARABIC_KEY)) {            ctxKey=EASTERN_ARABIC_KEY;          } else           if (((mask & ARABIC) != 0) && (ctxKey == ARABIC_KEY || ctxKey == EASTERN_ARABIC_KEY)) {            ctxKey=ARABIC_KEY;          } else           if ((mask & (1 << ctxKey)) == 0) {            ctxKey=EUROPEAN_KEY;          }          base=bases[ctxKey];          minDigit=ctxKey == ETHIOPIC_KEY ? '1' : '0';        }      }    }  }}  }
class C{  private static boolean isStrictMethodInvocationConvertible(Class formal,Class actual){  if (actual == null && !formal.isPrimitive()) {    return true;  }  if (formal.isAssignableFrom(actual)) {    return true;  }  if (formal.isPrimitive()) {    if (formal == Short.TYPE && (actual == Byte.TYPE))     return true;    if (formal == Integer.TYPE && (actual == Short.TYPE || actual == Byte.TYPE))     return true;    if (formal == Long.TYPE && (actual == Integer.TYPE || actual == Short.TYPE || actual == Byte.TYPE))     return true;    if (formal == Float.TYPE && (actual == Long.TYPE || actual == Integer.TYPE || actual == Short.TYPE || actual == Byte.TYPE))     return true;    if (formal == Double.TYPE && (actual == Float.TYPE || actual == Long.TYPE || actual == Integer.TYPE || actual == Short.TYPE || actual == Byte.TYPE))     return true;  }  return false;}  }
class C{  public static Change attachmentPropertyReset(final IAttachment attachment,final String property){  return new AttachmentPropertyReset(attachment,property);}  }
class C{  @Override public boolean isCancelled(){  return this.cancelled;}  }
class C{  public static void add(int[] n1,int[] n2,int[] sum){  int b=n1.length - 1;  int carry=0;  while (b >= 0) {    int s=n1[b] + n2[b] + carry;    sum[b + 1]=s % 10;    if (s > 9) {      carry=1;    } else {      carry=0;    }    b--;  }  sum[0]=carry;}  }
class C{  public BaseDriveRequestBuilder(final String requestUrl,final IOneDriveClient client,final List<Option> options){  super(requestUrl,client,options);}  }
class C{  public boolean isDetectorEnabled(DetectorFactory factory){  String detectorName=factory.getShortName();  Boolean enabled=detectorEnablementMap.get(detectorName);  if (enabled == null) {    enabled=factory.isDefaultEnabled();    detectorEnablementMap.put(detectorName,enabled);  }  return enabled;}  }
class C{  private void removePropertyMapping(ExtensionMapping extensionMapping,String qualifiedName){  PropertyMapping pm=extensionMapping.getField(qualifiedName);  Set<PropertyMapping> propertyMappings=extensionMapping.getFields();  if (pm != null && propertyMappings.contains(pm)) {    propertyMappings.remove(pm);    log.debug("Removed mapping to term " + pm.getTerm().qualifiedName());  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:34.347 -0500",hash_original_method="7D881BD1A8E4D4C26C8DF479B09D2287",hash_generated_method="BE224B666802DAA9D4B75F867770010D") private DualPivotQuicksort(){}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x68D55505,version=150) public int sceKernelReferSysEventHandler(){  return 0;}  }
class C{  public void calculateCodeCoverageUsingToolingAPI(String classArrayAsStringForQuery){  int classCounter=0;  String relativeServiceURL="/services/data/v" + SUPPORTED_VERSION + "/tooling";  String soqlcc=QueryConstructor.getClassLevelCodeCoverage(classArrayAsStringForQuery);  LOG.debug("OAuthTokenGenerator.getOrgToken() : " + OAuthTokenGenerator.getOrgToken());  JSONObject responseJsonObject=null;  responseJsonObject=WebServiceInvoker.doGet(relativeServiceURL,soqlcc,OAuthTokenGenerator.getOrgToken());  if (responseJsonObject != null) {    String responseStr=responseJsonObject.toJSONString();    LOG.debug(responseStr);    JSONArray recordObject=(JSONArray)responseJsonObject.get("records");    for (int i=0; i < recordObject.size(); ++i) {      classCounter++;      JSONObject rec=(JSONObject)recordObject.get(i);      int coveredLines=Integer.valueOf((String)rec.get("NumLinesCovered").toString());      int unCoveredLines=Integer.valueOf((String)rec.get("NumLinesUncovered").toString());      String apexTestClassID=(String)rec.get("ApexTestClassId").toString();      String apexClassorTriggerId=(String)rec.get("ApexClassOrTriggerId").toString();      String testMethodName=(String)rec.get("TestMethodName").toString();      LOG.info("Record number # " + classCounter + " : coveredLines : "+ coveredLines+ " : unCoveredLines : "+ unCoveredLines+ " : apexTestClassID : "+ apexTestClassID+ " : apexClassorTriggerId : "+ apexClassorTriggerId+ " : testMethodName : "+ testMethodName);    }  }}  }
class C{  private TestEntry convertToTestEntry(Entry entry){  String value=entry.getNoteOrTitle();  if (value == null && entry.isRoot()) {    value="R";  }  final TestEntry testEntry=new TestEntry(value,entry.getId());  final ArrayList<Entry> childrenEntries=getChildrenInOrder(entry);  final ArrayList<TestEntry> childrenTestEntries=new ArrayList<TestEntry>();  for (  final Entry childEntry : childrenEntries) {    childrenTestEntries.add(convertToTestEntry(childEntry));  }  if (!childrenTestEntries.isEmpty()) {    testEntry.setChildren(childrenTestEntries.toArray(new TestEntry[childrenTestEntries.size()]));  }  return testEntry;}  }
class C{  public boolean forEachEntry(TIntDoubleProcedure procedure){  byte[] states=_states;  int[] keys=_set;  double[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(keys[i],values[i])) {      return false;    }  }  return true;}  }
class C{  public UnitVarianceTransform(DataSet d){  fit(d);}  }
class C{  public ImageDownloadService(String url,Label parentLabel){  init(url);  this.parentLabel=parentLabel;  setDuplicateSupported(true);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  double n;  double sum;  int[] dX;  int[] dY;  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          n=0;          sum=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData) {              n+=filterShape[a];              sum+=z * filterShape[a];            }          }          if (n > 0) {            outputFile.setValue(row,col,sum / n);          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static String upperCase(String str){  if (str == null) {    return null;  }  return str.toUpperCase();}  }
class C{  public OIDCException(){  super("Invalid request");}  }
class C{  public InfernoTracker(){}  }
class C{  @SuppressWarnings("UnusedReturnValue") public final T3Size decodePageContent(final GraphicsState newGS,final byte[] pageStream) throws PdfException {  this.newGS=newGS;  this.pageStream=pageStream;  return decodePageContent(null);}  }
class C{  public static String convertTimeMillisecondsToHMS(long longMilliSecs){  long days=longMilliSecs / (1000 * 60 * 60* 24);  long remainder=longMilliSecs % (1000 * 60 * 60* 24);  long hours=remainder / (1000 * 60 * 60);  remainder=remainder % (1000 * 60 * 60);  long mins=remainder / (1000 * 60);  remainder=remainder % (1000 * 60);  long secs=remainder / 1000;  String strDaysHrsMinsSecs="";  if (days > 0) {    strDaysHrsMinsSecs+=days + " Days ";  }  if (hours > 0) {    strDaysHrsMinsSecs+=hours + " Hours ";  } else {    strDaysHrsMinsSecs+="0 Hours ";  }  if (mins > 0) {    strDaysHrsMinsSecs+=mins + " Mins ";  } else {    strDaysHrsMinsSecs+="0 Mins ";  }  strDaysHrsMinsSecs+=secs + " Secs";  return strDaysHrsMinsSecs;}  }
class C{  public void onCompletion(MediaPlayer player){  Toast.makeText(this,String.format(getString(R.string.media_event_done,mFile.getFileName())),Toast.LENGTH_LONG).show();  if (mMediaController != null) {    player.seekTo(0);    processPauseRequest();    mMediaController.updatePausePlay();  } else {    processStopRequest(true);  }  return;}  }
class C{  public DoubleVector minusEquals(DoubleVector v){  for (int i=0; i < size(); i++) {    V[i]-=v.V[i];  }  return this;}  }
class C{  public void putNextEntry(ZipEntry ze) throws IOException {  if (firstEntry) {    byte[] edata=ze.getExtra();    if (edata == null || !hasMagic(edata)) {      if (edata == null) {        edata=new byte[4];      } else {        byte[] tmp=new byte[edata.length + 4];        System.arraycopy(edata,0,tmp,4,edata.length);        edata=tmp;      }      set16(edata,0,JAR_MAGIC);      set16(edata,2,0);      ze.setExtra(edata);    }    firstEntry=false;  }  super.putNextEntry(ze);}  }
class C{  void initialize(String nodeId,long expectedShardSize){  ensureNotFrozen();  version++;  assert state == ShardRoutingState.UNASSIGNED : this;  assert relocatingNodeId == null : this;  state=ShardRoutingState.INITIALIZING;  currentNodeId=nodeId;  allocationId=AllocationId.newInitializing();  this.expectedShardSize=1;}  }
class C{  public static void replaceScheduleModes(TransitSchedule schedule,String mode){  for (  TransitLine transitLine : schedule.getTransitLines().values()) {    for (    TransitRoute transitRoute : transitLine.getRoutes().values()) {      transitRoute.setTransportMode(mode);    }  }}  }
class C{  public XPathException(String message,Object styleNode){  super(message);  m_styleNode=styleNode;}  }
class C{  public QuestionStep(String identifier,String title,AnswerFormat format){  super(identifier,title);  this.answerFormat=format;}  }
class C{  public boolean isQuestCompleted(final String name){  return quests.isQuestCompleted(name);}  }
class C{  @Override public boolean contains(Object object){  if (object == null) {    return false;  }  for (int i=0; i < size; i++) {    if (object.equals(elements[i])) {      return true;    }  }  return false;}  }
class C{  public void previousPage(GuiManualHerblore manual){  if (currentPage - 2 >= 1) {    setPage(currentPage - 2,manual);  }}  }
class C{  private Thread fullGetFirstQueuedThread(){  Node h, s;  Thread st;  if (((h=head) != null && (s=h.next) != null && s.prev == head && (st=s.thread) != null) || ((h=head) != null && (s=h.next) != null && s.prev == head && (st=s.thread) != null))   return st;  Node t=tail;  Thread firstThread=null;  while (t != null && t != head) {    Thread tt=t.thread;    if (tt != null)     firstThread=tt;    t=t.prev;  }  return firstThread;}  }
class C{  public void testTopicRollbackMarksMessageRedelivered() throws JMSException {  connection.setClientID(getName());  connection.start();  Session session=connection.createSession(true,Session.CLIENT_ACKNOWLEDGE);  Topic topic=session.createTopic("topic-" + getName());  MessageConsumer consumer=session.createConsumer(topic);  MessageProducer producer=createProducer(session,topic);  producer.send(createTextMessage(session));  session.commit();  Message msg=consumer.receive(1000);  assertNotNull(msg);  assertFalse("Message should not be redelivered.",msg.getJMSRedelivered());  session.rollback();  msg=consumer.receive(2000);  assertNotNull(msg);  assertTrue("Message should be redelivered.",msg.getJMSRedelivered());  session.commit();  session.close();}  }
class C{  public JSONObject accumulate(String key,Object value) throws JSONException {  testValidity(value);  Object object=this.opt(key);  if (object == null) {    this.put(key,value instanceof JSONArray ? new JSONArray().put(value) : value);  } else   if (object instanceof JSONArray) {    ((JSONArray)object).put(value);  } else {    this.put(key,new JSONArray().put(object).put(value));  }  return this;}  }
class C{  public void updateDouble(int columnIndex,double x) throws SQLException {  checkUpdatable();  getField(columnIndex).setDouble(x);}  }
class C{  protected boolean[] canHandleNClasses(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int numClasses){  print("more than two class problems");  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,Attribute.NOMINAL);  print("...");  ArrayList<String> accepts=new ArrayList<String>();  accepts.add("number");  accepts.add("class");  int numTrain=getNumInstances(), missingLevel=0;  boolean predictorMissing=false, classMissing=false;  return runBasicTest(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,Attribute.NOMINAL,missingLevel,predictorMissing,classMissing,numTrain,numClasses,accepts);}  }
class C{  private List<Block> generateForBinaryExpr(){  final ArrayList<Block> subBlocks=new ArrayList<Block>();  AlignmentProvider.Aligner alignment=myContext.getSettings().ALIGN_MULTILINE_BINARY_OPERATION ? myAlignmentProvider.createAligner(false) : null;  GrBinaryExpression binary=(GrBinaryExpression)myNode.getPsi();  LOG.assertTrue(binary != null);  addBinaryChildrenRecursively(binary,subBlocks,Indent.getContinuationWithoutFirstIndent(),alignment);  return subBlocks;}  }
class C{  final boolean casRight(Index<K,V> cmp,Index<K,V> val){  return UNSAFE.compareAndSwapObject(this,rightOffset,cmp,val);}  }
class C{  public static boolean isTagEnabled(String tag){  if (enableAllTags) {    return true;  }  String[] tags=enabledTags;  if (tags == null || tags.length == 0) {    return false;  }  for (int i=0; i < tags.length; i++) {    if (tags[i].equals(tag)) {      return true;    }  }  return false;}  }
class C{  public static void assertNoDnsTasksEnqueued() throws Exception {  assertNoTasksEnqueued(DnsConstants.DNS_PULL_QUEUE_NAME);}  }
class C{  public void close() throws IOException {}  }
class C{  public static JButton createApplyAttributesButton(DrawingEditor editor){  return createApplyAttributesButton(editor,new LinkedList<Disposable>());}  }
class C{  public CoreDescriptor(CoreContainer container,String name,String instanceDir,Properties coreProps,SolrParams params){  this.coreContainer=container;  originalCoreProperties.setProperty(CORE_NAME,name);  originalCoreProperties.setProperty(CORE_INSTDIR,instanceDir);  Properties containerProperties=container.getContainerProperties();  name=PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name,CORE_NAME),containerProperties);  instanceDir=PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(instanceDir,CORE_INSTDIR),containerProperties);  coreProperties.putAll(defaultProperties);  coreProperties.put(CORE_NAME,name);  coreProperties.put(CORE_INSTDIR,instanceDir);  coreProperties.put(CORE_ABS_INSTDIR,convertToAbsolute(instanceDir,container.getCoreRootDirectory()));  for (  String propname : coreProps.stringPropertyNames()) {    String propvalue=coreProps.getProperty(propname);    if (isUserDefinedProperty(propname))     originalExtraProperties.put(propname,propvalue); else     originalCoreProperties.put(propname,propvalue);    if (!requiredProperties.contains(propname))     coreProperties.setProperty(propname,PropertiesUtil.substituteProperty(propvalue,containerProperties));  }  loadExtraProperties();  buildSubstitutableProperties();  if (container.isZooKeeperAware()) {    cloudDesc=new CloudDescriptor(name,coreProperties,this);    if (params != null) {      cloudDesc.setParams(params);    }  } else {    cloudDesc=null;  }}  }
class C{  public E take() throws InterruptedException {  final ReentrantLock lock=this.lock;  lock.lockInterruptibly();  try {    for (; ; ) {      E first=q.peek();      if (first == null)       available.await(); else {        long delay=first.getDelay(NANOSECONDS);        if (delay <= 0)         return q.poll();        first=null;        if (leader != null)         available.await(); else {          Thread thisThread=Thread.currentThread();          leader=thisThread;          try {            available.awaitNanos(delay);          }  finally {            if (leader == thisThread)             leader=null;          }        }      }    }  }  finally {    if (leader == null && q.peek() != null)     available.signal();    lock.unlock();  }}  }
class C{  public static boolean isAllzs(String s){  return Pattern.matches("[z]+",s);}  }
class C{  public PrincipalImpl() throws UnknownHostException {  add=new InetAddress[1];  add[0]=java.net.InetAddress.getLocalHost();}  }
class C{  final void initializeOwner(LocalRegion lr){  DiskRegion dr=lr.getDiskRegion();  if (!lr.getDataPolicy().withPersistence() || !dr.isRecreated()) {    return;  }synchronized (currentAsyncValueRecoveryMap) {    DiskRegionView drv=lr.getDiskRegionView();    if (drv.getRecoveredEntryMap() != null) {      PersistentOplogSet oplogSet=getPersistentOplogSet(drv);      boolean releaseCompactorWriteLock=false;      if (drv.isEntriesMapIncompatible()) {        acquireCompactorWriteLock();        releaseCompactorWriteLock=true;      }      try {        drv.copyExistingRegionMap(lr);        getStats().incUncreatedRecoveredRegions(-1);        for (        Oplog oplog : oplogSet.getAllOplogs()) {          if (oplog != null) {            oplog.updateDiskRegion(lr.getDiskRegionView());          }        }      }  finally {        if (releaseCompactorWriteLock) {          releaseCompactorWriteLock();        }      }      if (currentAsyncValueRecoveryMap.containsKey(drv.getId())) {        currentAsyncValueRecoveryMap.put(drv.getId(),lr);      }      return;    }  }  scheduleForRecovery(lr);  try {    recoverRegionsThatAreReady();  } catch (  DiskAccessException dae) {    throw dae;  }catch (  RuntimeException re) {    throw new DiskAccessException("RuntimeException in initializing the disk store from the disk",re,this);  }}  }
class C{  public void startAutoScroll(int delayTimeInMills){  isAutoScroll=true;  sendScrollMessage(delayTimeInMills);}  }
class C{  private void handlePauseRequest(){  LogUtils.d(TAG,"handlePauseRequest: mState=" + mPlayback.getState());  mPlayback.pause();  mDelayedStopHandler.removeCallbacksAndMessages(null);  mDelayedStopHandler.sendEmptyMessageDelayed(0,STOP_DELAY);}  }
class C{  public static void d(String tag,String msg){  d(tag,msg,null);}  }
class C{  public static boolean isDefaultFailoverOnServerShutdown(){  return DEFAULT_FAILOVER_ON_SERVER_SHUTDOWN;}  }
class C{  void clearOneToOne(Register r){  if (r != null) {    Register s=getMapping(r);    if (s != null) {      s.mapsToRegister=null;    }    r.mapsToRegister=null;  }}  }
class C{  public MutableLocation toMutableLocation(World w){  return new MutableLocation(x,y,z,w);}  }
class C{  private static void addOperand(final StringBuffer line,final List<CStyleRunData> styleRuns,final COperandTreeNode treeNode,final INodeModifier modifier){  final ColorsConfigItem colors=ConfigManager.instance().getColorSettings();  final String typeSubstitution=getTypeSubstitution(treeNode);  if (!typeSubstitution.isEmpty()) {    styleRuns.add(new CStyleRunData(line.length(),typeSubstitution.length(),colors.getVariableColor(),treeNode));    line.append(typeSubstitution);    return;  }  final IReplacement replacement=treeNode.getDisplayStyle() == OperandDisplayStyle.OFFSET ? treeNode.getReplacement() : null;  if (replacement == null) {    final Color color=getOperandColor(treeNode.getType());    final String value=adjustValue(treeNode,modifier);    styleRuns.add(new CStyleRunData(line.length(),value.length(),color,treeNode));    line.append(value);  } else {    final String replacementString=determineReplacementString(treeNode,replacement);    if (replacementString.equalsIgnoreCase("")) {      final Color color=getOperandColor(treeNode.getType());      final String value=adjustValue(treeNode,modifier);      styleRuns.add(new CStyleRunData(line.length(),value.length(),color,treeNode));      line.append(value);      return;    }    if (treeNode.getType() == ExpressionType.IMMEDIATE_INTEGER) {      if (replacement instanceof CFunctionReplacement) {        styleRuns.add(new CStyleRunData(line.length(),replacementString.length(),colors.getFunctionColor(),treeNode));      } else {        styleRuns.add(new CStyleRunData(line.length(),replacementString.length(),colors.getVariableColor(),treeNode));      }    } else {      final Color color=getOperandColor(treeNode.getType());      styleRuns.add(new CStyleRunData(line.length(),replacementString.length(),color,treeNode));    }    line.append(replacementString);  }}  }
class C{  @Override protected boolean shouldComposeCreationImage(){  return true;}  }
class C{  public ConnectionStringBuilder(String connectionString){  this.parseConnectionString(connectionString);}  }
class C{  private static void splitParagraphs(LayoutContext c,Document document){  c.getParagraphSplitter().splitRoot(c,document);  c.getParagraphSplitter().runBidiOnParagraphs(c);}  }
class C{  public boolean hasDepthBuffer(){  return this.depthBuffer;}  }
class C{  @Override public boolean connectionAllowed(EventSetDescriptor esd){  return connectionAllowed(esd.getName());}  }
class C{  public static String[] findLyric(ContentResolver resolver,String title,String artist,String album){  String[] result=null;  LogUtils.i(TAG,"findLyric for: " + title);  Cursor cursor=resolver.query(Constants.CONTENT_URI,new String[]{Constants.Column.TITLE,Constants.Column.ARTIST,Constants.Column.ALBUM,Constants.Column.PATH,Constants.Column.ENCODING},"title like ?",new String[]{title},null);  if (cursor != null) {    if (cursor.getCount() > 1) {      int columnIndexTitle=cursor.getColumnIndex(Constants.Column.TITLE);      int columnIndexArtist=cursor.getColumnIndex(Constants.Column.ARTIST);      int columnIndexAlbum=cursor.getColumnIndex(Constants.Column.ALBUM);      int columnIndexPath=cursor.getColumnIndex(Constants.Column.PATH);      int columnIndexEncoding=cursor.getColumnIndex(Constants.Column.ENCODING);      String path=null;      String encoding=null;      int resultPriority=10;      while (cursor.moveToNext()) {        String currTitle=cursor.getString(columnIndexTitle);        String currArtist=cursor.getString(columnIndexArtist);        String currAlbum=cursor.getString(columnIndexAlbum);        if (resultPriority > calculatePriority(title,artist,album,currTitle,currArtist,currAlbum)) {          path=cursor.getString(columnIndexPath);          encoding=cursor.getString(columnIndexEncoding);        }      }      return new String[]{path,encoding};    } else     if (cursor.getCount() == 1) {      cursor.moveToFirst();      result=new String[]{cursor.getString(cursor.getColumnIndex(Constants.Column.PATH)),cursor.getString(cursor.getColumnIndex(Constants.Column.ENCODING))};    }  }  return result;}  }
class C{  public void testInverseOfSymmPosDefMatrices() throws Exception {  double[][] A={{6,2,3},{2,5,1},{3,1,4}};  double[][] expectedInv={{0.29231,-0.07692,-0.2},{-0.07692,0.23077,0},{-0.2,0,0.4}};  double[][] inv=MatrixUtils.invertSymmPosDefMatrix(A);  checkMatrix(expectedInv,inv,OCTAVE_RESOLUTION);  double[][] A2={{6,2,3,1},{2,5,1,0.5},{3,1,4,2},{1,0.5,2,3}};  double[][] expectedInv2={{0.303393,-0.079840,-0.245509,0.075848},{-0.079840,0.231537,0.011976,-0.019960},{-0.245509,0.011976,0.586826,-0.311377},{0.075848,-0.019960,-0.311377,0.518962}};  double[][] inv2=MatrixUtils.invertSymmPosDefMatrix(A2);  checkMatrix(expectedInv2,inv2,OCTAVE_RESOLUTION);  double[][] asymmetricA={{6,2,3},{2,5,1},{3,1.0001,4}};  boolean flaggedException=false;  try {    MatrixUtils.invertSymmPosDefMatrix(asymmetricA);  } catch (  Exception e) {    flaggedException=true;  }  assertTrue(flaggedException);  double[][] notpositiveDefiniteA={{1,2,3},{2,4,5},{3,5,6}};  flaggedException=false;  try {    MatrixUtils.invertSymmPosDefMatrix(notpositiveDefiniteA);  } catch (  Exception e) {    flaggedException=true;  }  assertTrue(flaggedException);}  }
class C{  public Set<Set<V>> apply(Graph<V,E> graph){  Set<Set<V>> clusterSet=new HashSet<Set<V>>();  HashSet<V> unvisitedVertices=new HashSet<V>(graph.getVertices());  while (!unvisitedVertices.isEmpty()) {    Set<V> cluster=new HashSet<V>();    V root=unvisitedVertices.iterator().next();    unvisitedVertices.remove(root);    cluster.add(root);    Queue<V> queue=new LinkedList<V>();    queue.add(root);    while (!queue.isEmpty()) {      V currentVertex=queue.remove();      Collection<V> neighbors=graph.getNeighbors(currentVertex);      for (      V neighbor : neighbors) {        if (unvisitedVertices.contains(neighbor)) {          queue.add(neighbor);          unvisitedVertices.remove(neighbor);          cluster.add(neighbor);        }      }    }    clusterSet.add(cluster);  }  return clusterSet;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SexecPackage.CHECK_REF__CHECK:    setCheck((Check)null);  return;}super.eUnset(featureID);}  }
class C{  @HLEFunction(nid=0x7F75C338,version=150) public int sceNetAdhocGameModeCreateMaster(TPointer data,int size){  checkInitialized();  masterGameModeArea=new GameModeArea(data.getAddress(),size);  startGameMode();  return 0;}  }
class C{  public TLongIntHashMap(TLongHashingStrategy strategy){  super(strategy);}  }
class C{  private DomainEntry parseDomainEntry() throws ParsingException, IOException {  boolean ignoreEntry=false;  DomainEntry domainEntry;  String name=null;  Map<String,String> properties=new HashMap<>();  match("domain");  name=match("domain name");  while (!peek("{")) {    properties=parseProperties("{");  }  match("{");  domainEntry=new DomainEntry(name,properties);  while (!peek("}")) {    match("keystore");    name=match("keystore name");    if (!peek("}")) {      properties=parseProperties(";");    }    match(";");    domainEntry.add(new KeyStoreEntry(name,properties));  }  match("}");  return (ignoreEntry == true) ? null : domainEntry;}  }
class C{  public ChunkSection(){  types=new char[ARRAY_SIZE];  skyLight=new NibbleArray(ARRAY_SIZE);  blockLight=new NibbleArray(ARRAY_SIZE);  skyLight.fill((byte)0xf);}  }
class C{  public static TungstenProperties isReachable(String hostName,int portNumber,int timeout){  TungstenProperties statusAndResult=new TungstenProperties();  String statusMessage=null;  Socket socket=null;  InputStream socketInput=null;  OutputStream socketOutput=null;  String socketPhase=SOCKET_PHASE_CONNECT;  EchoStatus timeoutPhase=EchoStatus.SOCKET_CONNECT_TIMEOUT;  try {    SocketAddress sockaddr=new InetSocketAddress(hostName,portNumber);    socket=new Socket();    socket.setSoTimeout(timeout);    socket.setReuseAddress(true);    long beforeConnect=System.currentTimeMillis();    socket.connect(sockaddr,timeout);    long timeToConnectMs=System.currentTimeMillis() - beforeConnect;    statusAndResult.setLong(TIME_TO_CONNECT_MS,timeToConnectMs);    socketInput=socket.getInputStream();    socketOutput=socket.getOutputStream();    if (socketInput == null || socketOutput == null) {      statusMessage=String.format("Socket connect error: InputStream=%s, OutputStream=%s after connect to %s:%s",socketInput,socketOutput,hostName,portNumber);      statusAndResult.setObject(STATUS_KEY,EchoStatus.SOCKET_NO_IO);      statusAndResult.setString(STATUS_MESSAGE_KEY,statusMessage);      logger.warn(formatExecStatus(statusAndResult));      return logAndReturnProperties(statusAndResult);    }    int timeLeft=(int)(timeout - timeToConnectMs);    if (timeLeft <= 0) {      statusMessage=String.format("Timeout while connecting: %d ms exceeds allowed timeout of %d ms.",timeToConnectMs,timeout);      statusAndResult.setObject(STATUS_KEY,EchoStatus.SOCKET_CONNECT_TIMEOUT);      statusAndResult.setString(STATUS_MESSAGE_KEY,statusMessage);      logger.warn(formatExecStatus(statusAndResult));      return logAndReturnProperties(statusAndResult);    }    socket.setSoTimeout(timeLeft);    long beforeSend=System.currentTimeMillis();    socketPhase=SOCKET_PHASE_WRITE;    timeoutPhase=EchoStatus.SEND_MESSAGE_TIMEOUT;    byte[] outBuff=message.getBytes();    socketOutput.write(outBuff,0,outBuff.length);    long timeToSendMs=System.currentTimeMillis() - beforeSend;    statusAndResult.setLong(TIME_TO_SEND_MS,timeToSendMs);    timeLeft=(int)(timeLeft - timeToSendMs);    if (timeLeft <= 0) {      statusMessage=String.format("Timeout while sending: %d ms exceeds allowed timeout of %d ms.",timeToSendMs,timeLeft);      statusAndResult.setObject(STATUS_KEY,EchoStatus.SEND_MESSAGE_TIMEOUT);      statusAndResult.setString(STATUS_MESSAGE_KEY,statusMessage);      logger.warn(formatExecStatus(statusAndResult));      return logAndReturnProperties(statusAndResult);    }    socket.setSoTimeout(timeLeft);    long beforeReceive=System.currentTimeMillis();    socketPhase=SOCKET_PHASE_RECEIVE;    timeoutPhase=EchoStatus.RECEIVE_MESSAGE_TIMEOUT;    byte[] inBuff=new byte[outBuff.length];    int offset=0;    int length=0;    while (offset < inBuff.length) {      length=socketInput.read(inBuff,offset,inBuff.length - offset);      offset+=length;    }    String echoMessage=new String(inBuff);    long timeToReceiveMs=System.currentTimeMillis() - beforeReceive;    statusAndResult.setLong(TIME_TO_RECEIVE_MS,timeToReceiveMs);    timeLeft=(int)(timeLeft - timeToReceiveMs);    if (timeLeft <= 0) {      statusMessage=String.format("Timeout while reading: %d ms exceeds allowed timeout of %d ms.",timeToReceiveMs,timeLeft);      statusAndResult.setObject(STATUS_KEY,EchoStatus.RECEIVE_MESSAGE_TIMEOUT);      statusAndResult.setString(STATUS_MESSAGE_KEY,statusMessage);      logger.warn(formatExecStatus(statusAndResult));      return logAndReturnProperties(statusAndResult);    }    if (!message.equals(echoMessage)) {      statusMessage=String.format("Corrupted message: expected '%s' with len=%d but got '%s' with len=%d.",message,message.length(),echoMessage,echoMessage.length());      statusAndResult.setObject(STATUS_KEY,EchoStatus.MESSAGE_CORRUPT);      statusAndResult.setString(STATUS_MESSAGE_KEY,statusMessage);      logger.warn(formatExecStatus(statusAndResult));      return logAndReturnProperties(statusAndResult);    }    statusMessage=String.format("Ping to %s:%d succeeded.",hostName,portNumber);    statusAndResult.setString(STATUS_MESSAGE_KEY,statusMessage);    statusAndResult.setObject(STATUS_KEY,EchoStatus.OK);    return logAndReturnProperties(statusAndResult);  } catch (  SocketTimeoutException so) {    statusMessage=String.format("Socket timeout while %s a socket %s:%d\nException='%s'",socketPhase,hostName,portNumber,so);    statusAndResult.setObject(STATUS_KEY,timeoutPhase);    statusAndResult.setString(STATUS_MESSAGE_KEY,statusMessage);    statusAndResult.setObject(STATUS_EXCEPTION,so);    logger.warn(formatExecStatus(statusAndResult));    return logAndReturnProperties(statusAndResult);  }catch (  IOException ioe) {    if ("Host is down".toLowerCase().contains(ioe.getMessage().toLowerCase())) {      statusMessage=String.format("Host '%s' is down detected while %s a socket to %s:%d\nException='%s'",hostName,socketPhase,hostName,portNumber,ioe);      statusAndResult.setObject(STATUS_KEY,EchoStatus.HOST_IS_DOWN);      statusAndResult.setString(STATUS_MESSAGE_KEY,statusMessage);      statusAndResult.setObject(STATUS_EXCEPTION,ioe);      logger.warn(formatExecStatus(statusAndResult));      return logAndReturnProperties(statusAndResult);    }    if ("No route to host".toLowerCase().contains(ioe.getMessage().toLowerCase())) {      statusMessage=String.format("No route to host '%s' detected while %s a socket to %s:%d\nException='%s'",hostName,socketPhase,hostName,portNumber,ioe);      statusAndResult.setObject(STATUS_KEY,EchoStatus.NO_ROUTE_TO_HOST);      statusAndResult.setString(STATUS_MESSAGE_KEY,statusMessage);      statusAndResult.setObject(STATUS_EXCEPTION,ioe);      logger.warn(formatExecStatus(statusAndResult));      return logAndReturnProperties(statusAndResult);    }    if (ioe.getMessage().toLowerCase().contains("cannot assign requested address")) {      statusMessage=String.format("I/O exception while %s a socket to %s:%d\nException='%s'\n" + "Your open file limit may be too low.  Check with 'ulimit -n' and increase if necessary.",socketPhase,hostName,portNumber,ioe);      statusAndResult.setObject(STATUS_KEY,EchoStatus.OPEN_FILE_LIMIT_ERROR);      statusAndResult.setString(STATUS_MESSAGE_KEY,statusMessage);      statusAndResult.setObject(STATUS_EXCEPTION,ioe);      logger.warn(formatExecStatus(statusAndResult));      return logAndReturnProperties(statusAndResult);    }    if (ioe.toString().contains("java.net.UnknownHostException")) {      statusMessage=String.format("I/O exception while %s a socket to %s:%d\nException='%s'\n" + "There may be an issue with your DNS for this host or your /etc/hosts entry is not correct.",socketPhase,hostName,portNumber,ioe);      statusAndResult.setObject(STATUS_KEY,EchoStatus.UNKNOWN_HOST);      statusAndResult.setString(STATUS_MESSAGE_KEY,statusMessage);      statusAndResult.setObject(STATUS_EXCEPTION,ioe);      logger.warn(formatExecStatus(statusAndResult));      return logAndReturnProperties(statusAndResult);    }    statusMessage=String.format("I/O exception caught while %s a socket to %s:%d\nException='%s'",socketPhase,hostName,portNumber,ioe);    statusAndResult.setObject(STATUS_KEY,EchoStatus.SOCKET_IO_ERROR);    statusAndResult.setString(STATUS_MESSAGE_KEY,statusMessage);    statusAndResult.setObject(STATUS_EXCEPTION,ioe);    logger.warn(formatExecStatus(statusAndResult));    return logAndReturnProperties(statusAndResult);  } finally {    if (socketOutput != null) {      try {        socketOutput.close();      } catch (      Exception ignored) {      } finally {        socketOutput=null;      }    }    if (socketInput != null) {      try {        socketInput.close();      } catch (      Exception ignored) {      } finally {        socketInput=null;      }    }    if (socket != null) {      try {        socket.close();      } catch (      IOException i) {        logger.warn("Exception while closing socket",i);      } finally {        socket=null;      }    }  }}  }
class C{  private String installFailureToString(int result){  Field[] fields=PackageManager.class.getFields();  for (  Field f : fields) {    if (f.getType() == int.class) {      int modifiers=f.getModifiers();      if (((modifiers & Modifier.FINAL) != 0) && ((modifiers & Modifier.PUBLIC) != 0) && ((modifiers & Modifier.STATIC) != 0)) {        String fieldName=f.getName();        if (fieldName.startsWith("INSTALL_FAILED_") || fieldName.startsWith("INSTALL_PARSE_FAILED_")) {          try {            if (result == f.getInt(null)) {              return fieldName;            }          } catch (          IllegalAccessException e) {          }        }      }    }  }  return Integer.toString(result);}  }
class C{  public void debug(IDebugSearch debug){  this.debug=debug;}  }
class C{  public void jdt(Action<ConventionJdt> action){  ConventionJdt convention=new ConventionJdt(this);  action.execute(convention);}  }
class C{  private void loadCreateCardFragment(Bundle extras){  loadFragment(R.id.frame_content,(AbstractYeloFragment)Fragment.instantiate(this,CreateServiceCardFragment.class.getName(),extras),AppConstants.FragmentTags.CREATE_SERVICE_CARD,false,null);}  }
class C{  private void addTermWeights(Reader r,Map<String,Flt> termWeightMap,String fieldName) throws IOException {  if (analyzer == null) {    throw new UnsupportedOperationException("To use MoreLikeThis without " + "term vectors, you must provide an Analyzer");  }  TokenStream ts=analyzer.tokenStream(fieldName,r);  try {    int tokenCount=0;    CharTermAttribute termAtt=ts.addAttribute(CharTermAttribute.class);    PayloadAttribute payloadAttr=ts.addAttribute(PayloadAttribute.class);    ts.reset();    while (ts.incrementToken()) {      String word=termAtt.toString();      tokenCount++;      if (tokenCount > maxNumTokensParsedPerField) {        break;      }      if (isNoiseWord(word)) {        continue;      }      BytesRef payload=payloadAttr.getPayload();      float tokenWeight=1.0f;      if (isPayloadField(fieldName) && payload != null) {        tokenWeight=PayloadHelper.decodeFloat(payload.bytes,payload.offset);      }      Flt termWeight=termWeightMap.get(word);      if (termWeight == null) {        termWeightMap.put(word,new Flt(tokenWeight));      } else {        termWeight.x+=tokenWeight;      }    }    ts.end();  }  finally {    IOUtils.closeWhileHandlingException(ts);  }}  }
class C{  public static double tQuantile(double pp,double n){  double sq, p, a, b, c, d, x, y;  p=(pp < 0.5) ? 2.0 * pp : 2.0 * (1.0 - pp);  if (n <= 3.0) {    if (n == 1) {      sq=Math.tan(HALF_PI * (1.0 - p));    } else     if (n == 2.0) {      sq=Math.sqrt(2.0 / (p * (2.0 - p)) - 2.0);    } else {      sq=betaQuantile(p,0.5 * n,0.5);      if (sq != 0.0) {        sq=Math.sqrt(n / sq - n);      }    }  } else {    a=1.0 / (n - 0.5);    b=48.0 / (a * a);    c=((20700.0 * a / b - 98.0) * a - 16) * a + 96.36;    d=((94.5 / (b + c) - 3.0) / b + 1.0) * Math.sqrt(a * HALF_PI) * n;    x=d * p;    y=Math.pow(x,2.0 / n);    if (y > 0.05 + a) {      x=normalQuantile(0.5 * p);      y=x * x;      if (n < 5) {        c=c + 0.3 * (n - 4.5) * (x + 0.6);      }      c=(((0.05 * d * x - 5.0) * x - 7.0) * x - 2.0) * x + b + c;      y=(((((0.4 * y + 6.3) * y + 36.0) * y + 94.5) / c - y - 3.0) / b + 1.0) * x;      y=a * y * y;      y=(y > .002) ? Math.exp(y) - 1.0 : 0.5 * y * y + y;    } else {      y=((1.0 / (((n + 6.0) / (n * y) - 0.089 * d - 0.822) * (n + 2.0) * 3.0) + 0.5 / (n + 4.0)) * y - 1.0) * (n + 1.0) / (n + 2.0) + 1.0 / y;    }    sq=Math.sqrt(n * y);  }  if (pp < 0.5) {    sq=-sq;  }  return sq;}  }
class C{  private void validateSurrogateSettings(){  faultySurrogatesRadioButton.setEnabled(false);  discardSurrogatesArticleRadioButton.setEnabled(false);  replaceSurrogatesRadioButton.setEnabled(false);  discardSurrogatesRevisionRadioButton.setSelected(true);}  }
class C{  public static byte[] uuidToBytes(UUID uuid){  byte[] bytes=new byte[(Long.SIZE >> 3) * 2];  uuidToBytes(uuid,bytes,0);  return bytes;}  }
class C{  public void testEqualsDifferentModel(){  Model model1=new MockModel();  Model model2=new AnotherMockModel();  assertFalse(model1.equals(model2));}  }
class C{  public byte[] toByteArray(){  try {    return impl == null ? ArrayUtils.EMPTY_BYTE_ARRAY : impl.toByteArray();  }  finally {    impl=null;  }}  }
class C{  public Plane(Vec4 vec){  if (vec == null) {    String message=Logging.getMessage("nullValue.VectorIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (vec.getLengthSquared3() == 0.0) {    String message=Logging.getMessage("Geom.Plane.VectorIsZero");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.n=vec;}  }
class C{  public void endGetClientPRMetadata(long startTime,boolean timedOut,boolean failed){  long duration=getStatTime() - startTime;  endClientOp(duration,timedOut,failed);  this.stats.incInt(getClientPRMetadataInProgressId,-1);  int endGetClientPRMetadataId;  if (timedOut) {    endGetClientPRMetadataId=getClientPRMetadataTimedOutId;  } else   if (failed) {    endGetClientPRMetadataId=getClientPRMetadataFailedId;  } else {    endGetClientPRMetadataId=getClientPRMetadataId;  }  this.stats.incInt(endGetClientPRMetadataId,1);  this.stats.incLong(getClientPRMetadataDurationId,duration);}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  final XObject obj=m_arg0.execute(xctxt);  final double val=obj.num();  if (val >= -0.5 && val < 0)   return new XNumber(-0.0);  if (val == 0.0)   return new XNumber(val);  return new XNumber(java.lang.Math.floor(val + 0.5));}  }
class C{  public int daemonThreadCount(){  return threads.getDaemonThreadCount();}  }
class C{  public boolean verifyTimeoutCode(long currentInterval,String timeoutCode) throws GeneralSecurityException {  return verifyTimeoutCode(timeoutCode,currentInterval,ADJACENT_INTERVALS,ADJACENT_INTERVALS);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM__AST_STRUCTURAL_MEMBERS:    return astStructuralMembers != null && !astStructuralMembers.isEmpty();case ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM__STRUCTURAL_TYPE:  return structuralType != null;case ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM__GEN_STRUCTURAL_MEMBERS:return genStructuralMembers != null && !genStructuralMembers.isEmpty();case ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM__POSTPONED_SUBSTITUTIONS:return postponedSubstitutions != null && !postponedSubstitutions.isEmpty();}return super.eIsSet(featureID);}  }
class C{  private void persistConsistencyGroups(Collection<BlockConsistencyGroup> cgsToPersist){  if (null != cgsToPersist && !cgsToPersist.isEmpty()) {    List<BlockConsistencyGroup> cgsToCreate=new ArrayList<BlockConsistencyGroup>();    List<BlockConsistencyGroup> cgsToUpdate=new ArrayList<BlockConsistencyGroup>();    for (    BlockConsistencyGroup cg : cgsToPersist) {      if (null == cg.getCreationTime()) {        cgsToCreate.add(cg);      } else {        cgsToUpdate.add(cg);      }    }    if (!cgsToCreate.isEmpty()) {      _dbClient.createObject(cgsToCreate);    }    if (!cgsToUpdate.isEmpty()) {      _dbClient.updateObject(cgsToUpdate);    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public T instantiate(){  return objenesis.newInstance(type);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:15.212 -0400",hash_original_method="AC7EB2A7C3E5842E27808853E2EADEA4",hash_generated_method="44456C6BF706ECFB0C03BC0F795D21B1") final boolean transferForSignal(Node node){  if (!compareAndSetWaitStatus(node,Node.CONDITION,0))   return false;  Node p=enq(node);  int ws=p.waitStatus;  if (ws > 0 || !compareAndSetWaitStatus(p,ws,Node.SIGNAL))   LockSupport.unpark(node.thread);  return true;}  }
class C{  public MIMEType(String ntype) throws MalformedMIMETypeException {  slash=ntype.indexOf('/');  if (slash == -1)   throw new MalformedMIMETypeException("No '/' in mime-type (" + ntype + ")!",ntype);  mimeType=ntype;}  }
class C{  public PicasawebClient(PicasawebService service){  this(service,null,null);}  }
class C{  private boolean moveToNextChunk(){  currentChunk=HeapLayout.vmMap.getNextContiguousRegion(currentChunk);  if (currentChunk.isZero())   return false; else {    cursor=currentChunk.plus(HeapLayout.vmMap.getContiguousRegionSize(currentChunk));    return true;  }}  }
class C{  public ClusterModel doXMean() throws OperatorException {  examplesize=exampleSet.size();  measure.init(exampleSet);  Tools.checkAndCreateIds(exampleSet);  Tools.onlyNonMissingValues(exampleSet,getOperatorClassName(),this,new String[0]);  if (exampleSet.size() < k_min) {    throw new UserError(this,142,k_min);  }  attributes=exampleSet.getAttributes();  ArrayList<String> attributeNames=new ArrayList<String>(attributes.size());  for (  Attribute attribute : attributes) {    attributeNames.add(attribute.getName());  }  CentroidClusterModel bestModel=null;  RMAbstractClusterer KMean=null;  if (this.ClusteringAlgorithm.equals("FastKMeans")) {    KMean=new FastKMeans(description);    ((FastKMeans)KMean).setPresetMeasure(measure);  } else   if (this.ClusteringAlgorithm.equals("KMeans")) {    KMean=new KMeans(description);    ((KMeans)KMean).setPresetMeasure(measure);  } else {    throw new OperatorException("Unknown kmeans algorithm: " + ClusteringAlgorithm);  }  KMean.setParameter("k",k_min + "");  KMean.setParameter("max_runs",maxRuns + "");  KMean.setParameter("max_optimization_steps",maxOptimizationSteps + "");  KMean.setParameter(KMeanspp.PARAMETER_USE_KPP,kpp + "");  bestModel=(CentroidClusterModel)KMean.generateClusterModel(exampleSet);  dimension=bestModel.getCentroid(0).getCentroid().length;  double current_m_BIC=this.calcBIC(bestModel);  boolean change=true;  while (bestModel.getCentroids().size() < k_max && change) {    checkForStop();    change=false;    int array_size=bestModel.getClusters().size();    CentroidClusterModel[] Children=new CentroidClusterModel[array_size];    CentroidClusterModel[] Parent=new CentroidClusterModel[array_size];    SplittedExampleSet splittedSet=SplittedExampleSet.splitByAttribute(exampleSet,exampleSet.getAttributes().get("cluster"));    if (splittedSet.getNumberOfSubsets() < array_size) {      break;    }    int anz=0;    for (    @SuppressWarnings("unused") Cluster cl : bestModel.getClusters()) {      splittedSet.selectSingleSubset(anz);      KMean.setParameter("k",2 + "");      Children[anz]=(CentroidClusterModel)KMean.generateClusterModel(splittedSet);      KMean.setParameter("k",1 + "");      Parent[anz]=(CentroidClusterModel)KMean.generateClusterModel(splittedSet);      anz++;    }    Double[] SaveDiffBic=new Double[array_size];    boolean[] takeChange=new boolean[array_size];    int change_anz=0;    for (int i=0; i < Parent.length; i++) {      double BICc=calcBIC(Children[i]);      double BICp=calcBIC(Parent[i]);      if (BICc > BICp) {        takeChange[i]=true;        SaveDiffBic[i]=BICc - BICp;        change_anz++;      } else {        takeChange[i]=false;      }    }    CentroidClusterModel model=null;    if (change_anz + array_size < k_max) {      model=new CentroidClusterModel(exampleSet,change_anz + array_size,attributeNames,measure,getParameterAsBoolean(RMAbstractClusterer.PARAMETER_ADD_AS_LABEL),getParameterAsBoolean(RMAbstractClusterer.PARAMETER_REMOVE_UNLABELED));      int id=0;      for (int i=0; i < array_size; i++) {        if (takeChange[i]) {          for (          Centroid z : Children[i].getCentroids()) {            model.assignExample(id,z.getCentroid());            id++;          }        } else {          model.assignExample(id,Parent[i].getCentroid(0).getCentroid());          id++;        }      }    } else {      model=new CentroidClusterModel(exampleSet,k_max,attributeNames,measure,getParameterAsBoolean(RMAbstractClusterer.PARAMETER_ADD_AS_LABEL),getParameterAsBoolean(RMAbstractClusterer.PARAMETER_REMOVE_UNLABELED));      double hilf=0;      CentroidClusterModel hilf2=null;      for (int i=0; i < takeChange.length - 1; i++) {        for (int j=i + 1; j < takeChange.length; j++) {          if (SaveDiffBic[j] > SaveDiffBic[i]) {            hilf=SaveDiffBic[j];            SaveDiffBic[j]=SaveDiffBic[i];            SaveDiffBic[i]=hilf;            hilf2=Children[j];            Children[j]=Children[i];            Children[i]=hilf2;            hilf2=Parent[j];            Parent[j]=Parent[i];            Parent[i]=hilf2;          }        }      }      int id=0;      int anz1=0;      for (int i=0; i < array_size; i++) {        if (takeChange[i]) {          for (          Centroid z : Children[i].getCentroids()) {            model.assignExample(id,z.getCentroid());            id++;            anz1++;          }        } else {          model.assignExample(id,Parent[i].getCentroid(0).getCentroid());          id++;          anz1++;        }        if (anz1 >= k_max) {          break;        }      }    }    model.finishAssign();    model=this.assinePoints(model);    double new_m_BIC=calcBIC(model);    if (new_m_BIC > current_m_BIC) {      change=true;      bestModel=model;      current_m_BIC=new_m_BIC;    } else {      model=null;    }  }  if (addsClusterAttribute()) {    Attribute cluster=AttributeFactory.createAttribute("cluster",Ontology.NOMINAL);    exampleSet.getExampleTable().addAttribute(cluster);    exampleSet.getAttributes().setCluster(cluster);    int i=0;    for (    Example example : exampleSet) {      example.setValue(cluster,"cluster_" + centroidAssignments[i]);      i++;    }  }  return bestModel;}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public void run(){  ThreadingUtils.logThreadStarting("Reconnection Manager");  running=true;  while (running) {synchronized (connections) {      oneCycle();    }    if (ThreadingUtils.sleep(SLEEP)) {      break;    }  }  ThreadingUtils.logThreadEnding();}  }
class C{  protected void updateBucketRange(Range<Integer> range,String fromShard,String toShard,boolean migrationComplete){  trace("[{}] Update bucket range={} from {} to {}",gondola.getHostId(),range,fromShard,toShard);  bucketManager.updateBucketRange(range,fromShard,toShard,migrationComplete);}  }
class C{  public static Column fromOrd(int i){  if ((i < 0) || (i >= Column.values().length)) {    throw new IndexOutOfBoundsException("Invalid ordinal");  }  return Column.values()[i];}  }
class C{  public BufferedImage loadImage(File file){  BufferedImage bi=null;  try {    bi=ImageIO.read(file);  } catch (  IOException e) {    e.printStackTrace();  }  return bi;}  }
class C{  private boolean removeMapping(Object key,Object value){  Object k=maskNull(key);  Object[] tab=table;  int len=tab.length;  int i=hash(k,len);  while (true) {    Object item=tab[i];    if (item == k) {      if (tab[i + 1] != value)       return false;      modCount++;      size--;      tab[i]=null;      tab[i + 1]=null;      closeDeletion(i);      return true;    }    if (item == null)     return false;    i=nextKeyIndex(i,len);  }}  }
class C{  public int tpgid(){  return Integer.parseInt(fields[7]);}  }
class C{  public synchronized void start(InputStream in){  if (DEBUG) {    System.out.println("> AudioPlayer.start");    System.out.println("  InputStream = " + in);  }  devAudio.openChannel(in);  notify();  if (DEBUG) {    System.out.println("< AudioPlayer.start completed");  }}  }
class C{  public int maxSubArrayLen(int[] nums,int k){  Map<Integer,Integer> map=new HashMap<>();  int res=0;  int sum=0;  map.put(0,-1);  for (int i=0; i < nums.length; i++) {    sum+=nums[i];    if (map.containsKey(sum - k)) {      res=Math.max(res,i - map.get(sum - k));    }    if (!map.containsKey(sum)) {      map.put(sum,i);    }  }  return res;}  }
class C{  public static void afterUnshelve(final Shelveset shelveset){  Check.notNull(shelveset,"shelveset");  final PendingChangesViewModel model=TFSCommonUIClientPlugin.getDefault().getPendingChangesViewModel();  final WorkItemClient workItemClient=model.getWorkspace().getClient().getConnection().getWorkItemClient();  model.setComment(shelveset.getComment());  model.associateWorkItems(shelveset.getWorkItemInfo(workItemClient));  model.setCheckinNoteFieldValues(shelveset.getCheckinNote().getValues());}  }
class C{  protected void paintRectangle(Graphics g,Point pt1,Point pt2){  if (pt1 != null && pt2 != null) {    int width=Math.abs(pt2.x - pt1.x);    int height=Math.abs(pt2.y - pt1.y);    if (width == 0) {      width++;    }    if (height == 0) {      height++;    }    Rectangle2D rect1=new Rectangle2D.Double(pt1.x < pt2.x ? pt1.x : pt2.x,pt1.y < pt2.y ? pt1.y : pt2.y,width,height);    Rectangle2D rect2=new Rectangle2D.Double(pt1.x < pt2.x ? pt1.x + (pt2.x - pt1.x) / 2 - 1 : pt2.x + (pt1.x - pt2.x) / 2 - 1,pt1.y < pt2.y ? pt1.y + (pt2.y - pt1.y) / 2 - 1 : pt2.y + (pt1.y - pt2.y) / 2 - 1,2,2);    if (theMap != null) {      rectAttributes.render((Graphics2D)g,theMap.getNonRotatedShape(rect1));      rectAttributes.render((Graphics2D)g,theMap.getNonRotatedShape(rect2));    }  }}  }
class C{  public boolean hasExpressionAsExtraData(){  return this.extraData != null && this.extraData.startsWith("(") && this.extraData.endsWith(")");}  }
class C{  public void writeOutData(int hashCode,byte[] b,int offset,int len){  if (outStream != null && (hashCode == -1 || hashCode == outHashCode)) {    outStream.write(b,offset,len);  }}  }
class C{  public static CGPoint ccpNeg(final CGPoint v){  return ccp(-v.x,-v.y);}  }
class C{  public Socket createSocket(String host,int port) throws IOException, UnknownHostException {  Socket socket=createSocket();  connectSocket(socket,new InetSocketAddress(host,port));  return socket;}  }
class C{  public LongIteratorSpliterator(PrimitiveIterator.OfLong iterator,long size,int characteristics){  this.it=iterator;  this.est=size;  this.characteristics=(characteristics & Spliterator.CONCURRENT) == 0 ? characteristics | Spliterator.SIZED | Spliterator.SUBSIZED : characteristics;}  }
class C{  private void loadFromResource(String resource){  try {    loadFromStream(getClass().getResource(resource).openStream());  } catch (  IOException ex) {    ex.printStackTrace();  }}  }
class C{  private String generateForLoop(Tree.ForIterator that,boolean hasElse,Set<Value> capturedValues){  final Tree.SpecifierExpression iterable=that.getSpecifierExpression();  final String itemVar;  boolean captured=false;  if (that instanceof Tree.ValueIterator) {    final Value val=((Tree.ValueIterator)that).getVariable().getDeclarationModel();    captured=val.isCaptured();    if (captured) {      itemVar=gen.getNames().createTempVariable();      capturedValues.add(val);    } else {      itemVar=gen.getNames().name(val);    }  } else {    itemVar=gen.getNames().createTempVariable();  }  boolean isNative=iterateNative(iterable.getExpression().getTerm(),itemVar);  if (!isNative) {    final boolean checkEntered=that.getUnit().isNonemptyIterableType(iterable.getExpression().getTerm().getTypeModel());    if (hasElse || !optimize(iterable,itemVar)) {      gen.out("var ",itemVar);      if (checkEntered) {        enteredVar=gen.getNames().createTempVariable();        gen.out(",",enteredVar);      }      gen.out(";for(var ",iterVar,"=");      iterable.visit(gen);      gen.out(".iterator();(",itemVar,"=",iterVar,".next())!==",gen.getClAlias(),"finished();)");    }    gen.beginBlock();    if (enteredVar != null) {      gen.out(enteredVar,"=true;");    }  }  if (that instanceof Tree.ValueIterator) {    if (captured) {      gen.out("var ",gen.getNames().name(((Tree.ValueIterator)that).getVariable().getDeclarationModel()),"=",itemVar,";");    }    directAccess.add(((Tree.ValueIterator)that).getVariable().getDeclarationModel());  } else   if (that instanceof Tree.PatternIterator) {    gen.out("var ");    Destructurer d=new Destructurer(((Tree.PatternIterator)that).getPattern(),gen,directAccess,itemVar,true,false);    if (d.getCapturedValues() != null) {      capturedValues.addAll(d.getCapturedValues());    }    gen.endLine(true);  }  return itemVar;}  }
class C{  public void addDebugger(final DebuggerTemplate debugger){  Preconditions.checkNotNull(debugger,"IE00806: Debugger can not be null");  Preconditions.checkArgument(!debuggers.contains(debugger),"IE00807: Can not add debugger description more than once");  Preconditions.checkArgument(debugger.inSameDatabase(sqlProvider),"IE00808: Debugger template and debugger template manager are in different databases");  debuggers.add(debugger);  for (  final IDebuggerTemplateManagerListener listener : listeners) {    try {      listener.addedDebugger(this,debugger);    } catch (    final Exception e) {      CUtilityFunctions.logException(e);    }  }}  }
class C{  public static void assertNotEqual(int expected,int actual){  if (verbose) {    log("assertNotEqual(" + expected + ", "+ actual+ ")");  }  assertBool(expected != actual);}  }
class C{  public static String jsonObjectToString(Object obj){  try {    Objects.ToStringHelper helper=Objects.toStringHelper(obj);    Field[] declaredFields=obj.getClass().getDeclaredFields();    for (    Field field : declaredFields) {      field.setAccessible(true);      Annotation[] declaredAnnotations=field.getDeclaredAnnotations();      for (      Annotation annotation : declaredAnnotations) {        if (annotation instanceof JsonProperty) {          JsonProperty jsonProperty=(JsonProperty)annotation;          if (jsonProperty.required()) {            helper.add(field.getName(),field.get(obj));          } else {            if (field.get(obj) != null) {              helper.add(field.getName(),field.get(obj));            }          }        }      }    }    return helper.toString();  } catch (  Throwable t) {    throw new RuntimeException(t);  }}  }
class C{  private void generateQuaternionFromMatrix(){  float qx;  float qy;  float qz;  float qw;  float[] mat=matrix.getMatrix();  int[] indices=null;  if (this.matrix.size() == 16) {    if (this.matrix.isColumnMajor()) {      indices=Matrixf4x4.matIndCol16_3x3;    } else {      indices=Matrixf4x4.matIndRow16_3x3;    }  } else {    if (this.matrix.isColumnMajor()) {      indices=Matrixf4x4.matIndCol9_3x3;    } else {      indices=Matrixf4x4.matIndRow9_3x3;    }  }  int m00=indices[0];  int m01=indices[1];  int m02=indices[2];  int m10=indices[3];  int m11=indices[4];  int m12=indices[5];  int m20=indices[6];  int m21=indices[7];  int m22=indices[8];  float tr=mat[m00] + mat[m11] + mat[m22];  if (tr > 0) {    float s=(float)Math.sqrt(tr + 1.0) * 2;    qw=0.25f * s;    qx=(mat[m21] - mat[m12]) / s;    qy=(mat[m02] - mat[m20]) / s;    qz=(mat[m10] - mat[m01]) / s;  } else   if ((mat[m00] > mat[m11]) & (mat[m00] > mat[m22])) {    float s=(float)Math.sqrt(1.0 + mat[m00] - mat[m11] - mat[m22]) * 2;    qw=(mat[m21] - mat[m12]) / s;    qx=0.25f * s;    qy=(mat[m01] + mat[m10]) / s;    qz=(mat[m02] + mat[m20]) / s;  } else   if (mat[m11] > mat[m22]) {    float s=(float)Math.sqrt(1.0 + mat[m11] - mat[m00] - mat[m22]) * 2;    qw=(mat[m02] - mat[m20]) / s;    qx=(mat[m01] + mat[m10]) / s;    qy=0.25f * s;    qz=(mat[m12] + mat[m21]) / s;  } else {    float s=(float)Math.sqrt(1.0 + mat[m22] - mat[m00] - mat[m11]) * 2;    qw=(mat[m10] - mat[m01]) / s;    qx=(mat[m02] + mat[m20]) / s;    qy=(mat[m12] + mat[m21]) / s;    qz=0.25f * s;  }  setX(qx);  setY(qy);  setZ(qz);  setW(qw);}  }
class C{  protected float downsample(float[] data,int start,int end,int size){  float sum=0;  for (int i=start; i < end; i++) {    sum+=data[i];  }  return sum;}  }
class C{  public static CPreparedStatement prepareStatement(String sql,String trxName){  int concurrency=ResultSet.CONCUR_READ_ONLY;  String upper=sql.toUpperCase();  if (upper.startsWith("UPDATE ") || upper.startsWith("DELETE "))   concurrency=ResultSet.CONCUR_UPDATABLE;  return prepareStatement(sql,ResultSet.TYPE_FORWARD_ONLY,concurrency,trxName);}  }
class C{  public ShortArrayList top(int n){  ShortArrayList top=new ShortArrayList();  short[] values=data.toShortArray();  ShortArrays.parallelQuickSort(values,ReverseShortComparator.instance());  for (int i=0; i < n && i < values.length; i++) {    top.add(values[i]);  }  return top;}  }
class C{  public CardinalityBuilder rehash(boolean rehash){  this.rehash=rehash;  return this;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public comment(Element element){  addElement(element);}  }
class C{  public static <E,T extends Collection<E>>T requireNonNullElements(T collection){  requireNonNull(collection,"The provided collection is null.");  int i=0;  for (  E item : collection) {    if (item == null) {      throw new NullPointerException("Element " + i + " in the collection "+ collection+ " is null");    }    i++;  }  return collection;}  }
class C{  public ByteVector putLong(final long l){  int length=this.length;  if (length + 8 > data.length) {    enlarge(8);  }  byte[] data=this.data;  int i=(int)(l >>> 32);  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  i=(int)l;  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  this.length=length;  return this;}  }
class C{  public void alias(final String name,final Class<?> type,final Class<?> defaultImplementation){  alias(name,type);  addDefaultImplementation(defaultImplementation,type);}  }
class C{  public JsonParser createJsonParser(URL url) throws IOException, JsonParseException {  IOContext ctxt=_createContext(url,true);  InputStream in=_optimizedStreamFromURL(url);  if (_inputDecorator != null) {    in=_inputDecorator.decorate(ctxt,in);  }  return _createJsonParser(in,ctxt);}  }
class C{  private static void checkMethod(Method m){  Class<?>[] ex=m.getExceptionTypes();  for (int i=0; i < ex.length; i++) {    if (ex[i].isAssignableFrom(RemoteException.class))     return;  }  throw new IllegalArgumentException("illegal remote method encountered: " + m);}  }
class C{  public static Polygon nextPolygon(){  if (random().nextBoolean()) {    return surpriseMePolygon();  } else   if (random().nextInt(10) == 1) {    while (true) {      int gons=TestUtil.nextInt(random(),4,500);      double radiusMeters=random().nextDouble() * GeoUtils.EARTH_MEAN_RADIUS_METERS * Math.PI / 2.0 + 1.0;      try {        return createRegularPolygon(nextLatitude(),nextLongitude(),radiusMeters,gons);      } catch (      IllegalArgumentException iae) {      }    }  }  Rectangle box=nextBoxInternal(nextLatitude(),nextLatitude(),nextLongitude(),nextLongitude(),false);  if (random().nextBoolean()) {    return boxPolygon(box);  } else {    return trianglePolygon(box);  }}  }
class C{  void createJar(FileOutputStream outStream,Map<String,byte[]> all) throws IOException {  JarOutputStream jar=new JarOutputStream(outStream);  for (  Entry<String,byte[]> entry : all.entrySet()) {    String name=entry.getKey();    JarEntry jar_entry=new JarEntry(name);    jar.putNextEntry(jar_entry);    jar.write(entry.getValue());    jar.closeEntry();  }  jar.flush();  jar.close();}  }
class C{  static boolean hasCompilerAnnotationWithArgument(Tree.StatementOrArgument decl,String name,String argument){  for (  CompilerAnnotation annotation : decl.getCompilerAnnotations()) {    if (annotation.getIdentifier().getText().equals(name)) {      if (annotation.getStringLiteral() == null) {        continue;      }      String text=annotation.getStringLiteral().getText();      if (text == null) {        continue;      }      if (text.equals(argument)) {        return true;      }    }  }  return false;}  }
class C{  private BuildUtilities(){}  }
class C{  public BarrierState(final long newCommitCounter,final long newCommitTime,final UUID[] joinedServiceIds){  token=getQuorum().token();  this.newCommitCounter=newCommitCounter;  this.newCommitTime=newCommitTime;  getQuorum().assertLeader(token);  quorumService=getQuorum().getClient();  this.joinedServiceIds=joinedServiceIds;  this.leaderId=quorumService.getServiceId();  leadersValue=((InnerJournalTransactionService)getTransactionService()).newHANotifyReleaseTimeRequest(leaderId,newCommitCounter,newCommitTime);  timestampOnLeader=leadersValue.getTimestamp();  final int nparties=joinedServiceIds.length;  barrier=new CyclicBarrier(nparties,this);}  }
class C{  private void checkSize(final int i){  if (i >= max_size) {    final int old_size=max_size;    max_size+=increment_size;    if (max_size <= i) {      max_size=i + increment_size + 2;    }    final double[] temp=items;    items=new double[max_size];    System.arraycopy(temp,0,items,0,old_size);    increment_size=incrementSize(increment_size);  }}  }
class C{  private void addFilter(final String name,final IFilter filter){  if (filter == null)   throw new IllegalArgumentException();  final IFilter current=(IFilter)getProperty(name);  if (current == null) {    _setProperty(name,filter);  } else {    _setProperty(name,new NOPFilter().addFilter(current).addFilter(filter));  }}  }
class C{  protected boolean synthesizedElement(Element elem){  if (matchNameAttribute(elem.getAttributes(),HTML.Tag.IMPLIED)) {    return true;  }  return false;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:32.100 -0500",hash_original_method="25276A1ACE97D138BB17C9052B223D37",hash_generated_method="418459F41ADF951A5077179957FC2600") private static boolean isViewDescendantOf(View child,View parent){  if (child == parent) {    return true;  }  final ViewParent theParent=child.getParent();  return (theParent instanceof ViewGroup) && isViewDescendantOf((View)theParent,parent);}  }
class C{  protected void addURL(URL url){  try {    originalUrls.add(url);    searchList.add(createSearchURL(url));  } catch (  MalformedURLException e) {  }}  }
class C{  private static void readFromQueue(Ignite ignite) throws IgniteException {  final String queueName=queue.name();  ignite.compute().broadcast(new QueueClosure(queueName,false));  System.out.println("Queue size after reading [expected=0, actual=" + queue.size() + ']');}  }
class C{  public T caseTypeProvidingElement(TypeProvidingElement object){  return null;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  @Override public Instances generateExamples() throws Exception {  Random random=getRandom();  Instances data=getDatasetFormat();  if (data == null) {    throw new Exception("Dataset format not defined.");  }  if (getOrderedFlag()) {    data=generateExamples(random,data);  } else {    throw new Exception("RANDOMIZED is not yet implemented.");  }  return (data);}  }
class C{  public void hide(){  hide(false,null);}  }
class C{  public ExampleUtils(PipelineOptions options){  this.options=options;}  }
class C{  public void readNormalizationResources(ResourceMap hmResourcesNormalization,Boolean load_temponym_resources){  InputStream is=null;  InputStreamReader isr=null;  BufferedReader br=null;  try {    for (    String resource : hmResourcesNormalization.keySet()) {      if ((!(resource.contains("Temponym"))) || ((load_temponym_resources) && (resource.contains("Temponym")))) {        Logger.printDetail(component,"Adding normalization resource: " + resource);        is=hmResourcesNormalization.getInputStream(resource);        isr=new InputStreamReader(is,"UTF-8");        br=new BufferedReader(isr);        for (String line; (line=br.readLine()) != null; ) {          if (line.startsWith("//"))           continue;          boolean correctLine=false;          for (          MatchResult r : Toolbox.findMatches(paReadNormalizations,line)) {            correctLine=true;            String resource_word=replaceSpaces(r.group(1));            String normalized_word=r.group(2);            for (            String which : hmAllNormalization.keySet()) {              if (resource.equals(which)) {                hmAllNormalization.get(which).put(resource_word,normalized_word);              }            }            if ((correctLine == false) && (!(line.matches("")))) {              Logger.printError("[" + component + "] Cannot read one of the lines of normalization resource "+ resource);              Logger.printError("[" + component + "] Line: "+ line);            }          }        }      } else {        Logger.printDetail(component,"No Temponym Tagging selected. Skipping normalization resource: " + resource);      }    }  } catch (  IOException e) {    e.printStackTrace();  } finally {    try {      if (br != null) {        br.close();      }      if (isr != null) {        isr.close();      }      if (is != null) {        is.close();      }    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  public SelectableConsoleHandler(OutputStream stream){  super();  setOutputStream(stream);}  }
class C{  public void stopSession(){  if (processor != null) {    processor.stopProcessing();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:10.409 -0500",hash_original_method="6C060C09ED0246441EBDE47DFEF048B2",hash_generated_method="4BC410302B6F252CC3D835E7B02F89AC") @Override public void start(){  if (session == null) {    session=findSessionToResume();  } else {    if (clientHello != null && this.status != FINISHED) {      return;    }    if (!session.isValid()) {      session=null;    }  }  if (session != null) {    isResuming=true;  } else   if (parameters.getEnableSessionCreation()) {    isResuming=false;    session=new SSLSessionImpl(parameters.getSecureRandom());    if (engineOwner != null) {      session.setPeer(engineOwner.getPeerHost(),engineOwner.getPeerPort());    } else {      session.setPeer(socketOwner.getInetAddress().getHostName(),socketOwner.getPort());    }    session.protocol=ProtocolVersion.getLatestVersion(parameters.getEnabledProtocols());    recordProtocol.setVersion(session.protocol.version);  } else {    fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"SSL Session may not be created ");  }  startSession();}  }
class C{  final Type capture(){  Type superclass=getClass().getGenericSuperclass();  checkArgument(superclass instanceof ParameterizedType,"%s isn't parameterized",superclass);  return ((ParameterizedType)superclass).getActualTypeArguments()[0];}  }
class C{  public void testNoMoreArgs() throws Exception {  CommandTestTools.initFileType();  final CommandLineFile file=CommandTestTools.createFileByText(myFixture,"command foo bar spam eggs");  final ValidationResult validationResult=file.getValidationResult();  assert validationResult != null : "validation failed";  Assert.assertNull("Argument returned while should not",validationResult.getNextArg());}  }
class C{  public void applyStreamLinks(){  for (  StreamMeta smeta : streams.values()) {    smeta.resolvePorts();  }}  }
class C{  public AnnotationVisitor visitInsnAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    return mv.visitInsnAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  public ErrorResponse errorResponse(){  return this.errorResponse;}  }
class C{  public void transferNodesAndEdges(Graph graph) throws IllegalArgumentException {  if (graph == null) {    throw new NullPointerException("No graph was provided.");  }  for (  Node node : graph.getNodes()) {    if (!addNode(node)) {      throw new IllegalArgumentException();    }  }  for (  Edge edge : graph.getEdges()) {    if (!addEdge(edge)) {      throw new IllegalArgumentException();    }  }}  }
class C{  public boolean isActive(){  return body.isActive();}  }
class C{  public static MouseMotionListener remove(MouseMotionListener l,MouseMotionListener oldl){  return (MouseMotionListener)removeInternal(l,oldl);}  }
class C{  public void add(double x,double y,double z){  if (this.size == this.capacity)   flush();  this.xElements[this.size]=x;  this.yElements[this.size]=y;  this.zElements[this.size++]=z;}  }
class C{  public void pushNode(TransformTreeNode current){  transformStack.push(current);}  }
class C{  private static void incrementCharArray(char[] x,int p){  if (x[p] != 'z') {    x[p]+=1;  } else {    x[p]='a';    incrementCharArray(x,p - 1);  }}  }
class C{  public ElasticSearchModule(String moduleId,ThirdPartyWriter writer,ElasticSearchConfiguration config){  super(moduleId,writer);  notNull(config);  this.config=config;  this.writer=(ElasticSearchWriter)writer;  this.reindexBatchSize=config.getReindexBatchSize();}  }
class C{  public static void validateSyntaxInput(String field,String message) throws CheckException {  if (field == null || field.trim().length() == 0 || field.length() > 25) {    String messageTranslated=messageSource.getMessage(message,null,Locale.ENGLISH);    throw new CheckException(messageTranslated);  }}  }
class C{  public static void addAttributes(SerializationHandler handler,int src) throws TransformerException {  TransformerImpl transformer=(TransformerImpl)handler.getTransformer();  DTM dtm=transformer.getXPathContext().getDTM(src);  for (int node=dtm.getFirstAttribute(src); DTM.NULL != node; node=dtm.getNextAttribute(node)) {    addAttribute(handler,node);  }}  }
class C{  public static Array toArray(Object o) throws PageException {  if (o instanceof Array)   return (Array)o; else   if (o instanceof Object[]) {    return new ArrayImpl((Object[])o);  } else   if (o instanceof List) {    return ListAsArray.toArray((List)o);  } else   if (o instanceof Set) {    return toArray(((Set)o).toArray());  } else   if (o instanceof XMLStruct) {    XMLMultiElementStruct xmes;    if (o instanceof XMLMultiElementStruct) {      xmes=(XMLMultiElementStruct)o;    } else {      XMLStruct sct=(XMLStruct)o;      Array a=new ArrayImpl();      a.append(o);      xmes=new XMLMultiElementStruct(a,sct.getCaseSensitive());    }    return new XMLMultiElementArray(xmes);  } else   if (o instanceof ObjectWrap) {    return toArray(((ObjectWrap)o).getEmbededObject());  } else   if (o instanceof Struct) {    if (o instanceof Component) {      Component c=(Component)o;      PageContext pc=ThreadLocalPageContext.get();      if (pc != null) {        Member member=c.getMember(Component.ACCESS_PRIVATE,KeyConstants.__toArray,false,false);        if (member instanceof UDFPlus) {          UDFPlus udf=(UDFPlus)member;          if (udf.getReturnType() == CFTypes.TYPE_ARRAY && udf.getFunctionArguments().length == 0) {            return Caster.toArray(c.call(pc,KeyConstants.__toArray,new Object[0]));          }        }      }    }    Struct sct=(Struct)o;    Array arr=new ArrayImpl();    Iterator<Entry<Key,Object>> it=sct.entryIterator();    Entry<Key,Object> e=null;    try {      while (it.hasNext()) {        e=it.next();        arr.setE(toIntValue(e.getKey().getString()),e.getValue());      }    } catch (    ExpressionException ee) {      throw new ExpressionException("can't cast struct to a array, key [" + e.getKey().getString() + "] is not a number");    }    return arr;  } else   if (o instanceof boolean[])   return new ArrayImpl(ArrayUtil.toReferenceType((boolean[])o)); else   if (o instanceof byte[])   return new ArrayImpl(ArrayUtil.toReferenceType((byte[])o)); else   if (o instanceof char[])   return new ArrayImpl(ArrayUtil.toReferenceType((char[])o)); else   if (o instanceof short[])   return new ArrayImpl(ArrayUtil.toReferenceType((short[])o)); else   if (o instanceof int[])   return new ArrayImpl(ArrayUtil.toReferenceType((int[])o)); else   if (o instanceof long[])   return new ArrayImpl(ArrayUtil.toReferenceType((long[])o)); else   if (o instanceof float[])   return new ArrayImpl(ArrayUtil.toReferenceType((float[])o)); else   if (o instanceof double[])   return new ArrayImpl(ArrayUtil.toReferenceType((double[])o));  throw new CasterException(o,"Array");}  }
class C{  static void appendModeInfo(Mode mode,BitArray bits){  bits.appendBits(mode.getBits(),4);}  }
class C{  private void rollbackMethodForCreateSnapshot(boolean isSnapshotCreated,boolean isDummyLunPathAdded,HDSApiClient hdsApiClient,StorageSystem storage,URI snapshot) throws Exception {  if (isDummyLunPathAdded) {    log.info("Remove dummy path while doing roll back");    hdsProtectionOperations.removeDummyLunPath(storage,snapshot);  }  if (isSnapshotCreated) {    log.info("Remove snapshot volume for roll back");    BlockSnapshot snapshotObj=dbClient.queryObject(BlockSnapshot.class,snapshot);    String systemObjectID=HDSUtils.getSystemObjectID(storage);    String logicalUnitObjId=HDSUtils.getLogicalUnitObjectId(snapshotObj.getNativeId(),storage);    hdsApiClient.deleteSnapshotVolume(systemObjectID,logicalUnitObjId,storage.getModel());  }}  }
class C{  public int flags(){  return theFlags;}  }
class C{  public boolean validate(InputNode node) throws Exception {  return true;}  }
class C{  public Set<String> find(Collection<String> unfilteredGTS,GeoXPShape area,boolean inside,long startTS,long endTS){  if (0 == this.depth) {    return findLKP(unfilteredGTS,area,inside);  }  Set<String> gts=new HashSet<String>();  long[] cells=GeoXPLib.getCells(area);  long now=System.currentTimeMillis();  long lastchunk=now / this.depth;  long firstchunk=lastchunk - this.chunks + 1;  long startChunk=startTS / this.depth;  long endChunk=endTS / this.depth;  for (  String id : unfilteredGTS) {    boolean found=false;    for (long chunk=firstchunk; chunk <= lastchunk; chunk++) {      if (chunk < startChunk || chunk > endChunk) {        continue;      }      Map<String,GeoBloomFilter> chunkIndex=this.index.get(chunk);      if (null == chunkIndex) {        continue;      }      GeoBloomFilter filter=chunkIndex.get(id);      if (null == filter) {        continue;      }      for (      long cell : cells) {        if (!filter.contains(cell)) {          continue;        }        do {          cell=GeoXPLib.parentCell(cell);        } while (0L != cell && filter.contains(cell));        if (0 == cell) {          gts.add(id);          found=true;          break;        }      }      if (found) {        break;      }    }  }  if (!inside) {    Set<String> outgts=new HashSet<String>();    outgts.addAll(unfilteredGTS);    outgts.removeAll(gts);    gts=outgts;  }  return gts;}  }
class C{  public static boolean isBoolean(FTypeRef typeRef){  return isBasicType(typeRef,FBasicTypeId.BOOLEAN);}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getSource() == calcButton) {    OsmMap map=frame.getMap();    List<Position> positions=routeCalculator.calculateRoute(map.getMarkers(),map,waySelection.getSelectedIndex());    frame.getMap().createTrack(ROUTE_TRACK_NAME,positions);  }}  }
class C{  public void createSubUsageScenario16() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.daysToMillis(15);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO16_PERUNIT_WEEK",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES_PARS,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO16_PERUNIT_WEEK",serviceDetails,basicSetup.getCustomerUser1(),role);  long usageModificationTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.daysToMillis(9);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,usageModificationTime,"BOOLEAN_PARAMETER","false");  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,usageModificationTime,"MAX_FOLDER_NUMBER","13");  usageModificationTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.daysToMillis(3);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,usageModificationTime,"HAS_OPTIONS","3");  usageModificationTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.daysToMillis(10);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,usageModificationTime,"BOOLEAN_PARAMETER","true");  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO16_PERUNIT_WEEK",subDetails);}  }
class C{  Object processCDATA(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  if (getSupportsAVT()) {    try {      AVT avt=new AVT(handler,uri,name,rawName,value,owner);      return avt;    } catch (    TransformerException te) {      throw new org.xml.sax.SAXException(te);    }  } else {    return value;  }}  }
class C{  public boolean isDisplayChartValues(){  return mDisplayChartValues;}  }
class C{  public boolean containsValue(float val){  byte[] states=_states;  float[] vals=_values;  for (int i=vals.length; i-- > 0; ) {    if (states[i] == FULL && val == vals[i]) {      return true;    }  }  return false;}  }
class C{  private void addSampledVerticesToFrontier(final IGASContext<VS,ES,ST> ctx){  final IGASState<VS,ES,ST> gasState=ctx.getGASState();  final EdgesEnum sampleEdges=getSampleEdgesFilter();  final VertexDistribution dist=ctx.getGraphAccessor().getDistribution(new Random());  final Resource[] initialFrontier=dist.getUnweightedSample(dist.size(),sampleEdges);  if (log.isDebugEnabled())   log.debug("initialFrontier=" + Arrays.toString(initialFrontier));  gasState.setFrontier(ctx,initialFrontier);}  }
class C{  private void astoreHelper(Instruction s,BasicBlock b){  TypeReference type=AStore.getArray(s).getType();  if (type.isArrayType()) {    if (!type.getArrayElementType().isPrimitiveType()) {      type=TypeReference.JavaLangObjectArray;    }    registerUse(s,type);    registerDef(s,b,type);  }}  }
class C{  public IntStack(int blocksize,int increaseSize){  super(blocksize,increaseSize);}  }
class C{  public final boolean isNumeric(){  return (m_Type == NUMERIC);}  }
class C{  public Result decodeWithState(BinaryBitmap image) throws NotFoundException {  if (readers == null) {    setHints(null);  }  return decodeInternal(image);}  }
class C{  public static int parseIntValueFromFile(File file){  int value=0;  if (file.exists()) {    try {      FileInputStream fstream=new FileInputStream(file);      DataInputStream in=new DataInputStream(fstream);      BufferedReader br=new BufferedReader(new InputStreamReader(in));      String strLine=br.readLine();      if (strLine != null) {        value=Integer.parseInt(strLine);      }      in.close();    } catch (    Exception e) {      System.err.println("Error: " + e.getMessage());    }  }  return value;}  }
class C{  private void processDirectory(Directory directory,HashMap processedDirectoryOffsets,int dirStartOffset,int tiffHeaderOffset,int offsetSchema){  List makerNoteOffsets=new LinkedList();  boolean switchedByteOrder=false;  do {    if (processedDirectoryOffsets.containsKey(new Integer(dirStartOffset)))     break;    processedDirectoryOffsets.put(new Integer(dirStartOffset),"processed");    if (dirStartOffset >= _data.length || dirStartOffset < 0) {      directory.addError("Ignored directory marked to start outside data segement");      break;    }    if (!isDirectoryLengthValid(dirStartOffset,tiffHeaderOffset)) {      _isMotorollaByteOrder=!_isMotorollaByteOrder;      switchedByteOrder=true;      if (!isDirectoryLengthValid(dirStartOffset,tiffHeaderOffset)) {        directory.addError("Illegally sized directory");        break;      }    }    int dirTagCount=get16Bits(dirStartOffset);    for (int tagNumber=0; tagNumber < dirTagCount; tagNumber++) {      final int tagOffset=calculateTagOffset(dirStartOffset,tagNumber);      final int tagType=get16Bits(tagOffset);      final int formatCode=get16Bits(tagOffset + 2);      if (formatCode < 1 || formatCode > MAX_FORMAT_CODE) {        directory.addError("Invalid format code: " + formatCode);        continue;      }      final int componentCount=get32Bits(tagOffset + 4);      if (componentCount < 0) {        directory.addError("Negative component count in EXIF");        continue;      }      final int byteCount=componentCount * BYTES_PER_FORMAT[formatCode];      final int tagValueOffset=calculateTagValueOffset(byteCount,tagOffset,tiffHeaderOffset,offsetSchema);      if (tagValueOffset < 0 || tagValueOffset > _data.length) {        directory.addError("Illegal pointer offset value in EXIF");        continue;      }      if (byteCount < 0 || tagValueOffset + byteCount > _data.length) {        directory.addError("Illegal number of bytes: " + byteCount);        continue;      }      final int subdirOffset=tiffHeaderOffset + get32Bits(tagValueOffset);switch (tagType) {case TAG_EXIF_OFFSET:        processDirectory(_metadata.getDirectory(ExifDirectory.class),processedDirectoryOffsets,subdirOffset,tiffHeaderOffset,offsetSchema);      continue;case TAG_INTEROP_OFFSET:    processDirectory(_metadata.getDirectory(ExifInteropDirectory.class),processedDirectoryOffsets,subdirOffset,tiffHeaderOffset,offsetSchema);  continue;case TAG_GPS_INFO_OFFSET:processDirectory(_metadata.getDirectory(GpsDirectory.class),processedDirectoryOffsets,subdirOffset,tiffHeaderOffset,offsetSchema);continue;case TAG_MAKER_NOTE:makerNoteOffsets.add(new Integer(tagValueOffset));continue;default :processTag(directory,tagType,tagValueOffset,componentCount,formatCode);break;}}final int finalTagOffset=calculateTagOffset(dirStartOffset,dirTagCount);int nextDirectoryOffset=get32Bits(finalTagOffset);if (nextDirectoryOffset != 0) {nextDirectoryOffset+=tiffHeaderOffset;if (nextDirectoryOffset >= _data.length) {break;} else if (nextDirectoryOffset < dirStartOffset) {break;}}dirStartOffset=nextDirectoryOffset;} while (dirStartOffset != 0);if (offsetSchema == 0) {try {offsetSchema=directory.getInt(ExifDirectory.TAG_OFFSET_SCHEMA);} catch (MetadataException e) {offsetSchema=0;}}for (Iterator it=makerNoteOffsets.iterator(); it.hasNext(); ) {Integer offset=(Integer)it.next();processMakerNote(offset.intValue(),processedDirectoryOffsets,tiffHeaderOffset,offsetSchema);}if (switchedByteOrder) _isMotorollaByteOrder=!_isMotorollaByteOrder;}  }
class C{  void syncSummaryView(View view){  boolean useDefaultSummary=true;  if (isChecked && !isEmpty(summaryOn)) {    summaryView.setText(summaryOn);    useDefaultSummary=false;  } else   if (!isChecked && !isEmpty(summaryOff)) {    summaryView.setText(summaryOff);    useDefaultSummary=false;  }  if (useDefaultSummary) {    CharSequence summary=getSummary();    if (!isEmpty(summary)) {      summaryView.setText(summary);      useDefaultSummary=false;    }  }  int newVisibility=View.GONE;  if (!useDefaultSummary) {    newVisibility=View.VISIBLE;  }  if (newVisibility != summaryView.getVisibility()) {    summaryView.setVisibility(newVisibility);  }}  }
class C{  public void out(String code,String... codez){  if (jsw != null) {    jsw.write(code,codez);    return;  }  try {    getWriter().write(code);    for (    String s : codez) {      getWriter().write(s);    }  } catch (  IOException ioe) {    throw new RuntimeException("Generating JS code",ioe);  }}  }
class C{  public boolean isEmpty(){  return nodes.isEmpty() && ways.isEmpty() && relations.isEmpty();}  }
class C{  public void serialize(String name,byte[] message,OutputStream out) throws IOException {  byte[] header=new byte[4 + COMMAND_LEN + 4+ 4];  uint32ToByteArrayBE(params.getPacketMagic(),header,0);  for (int i=0; i < name.length() && i < COMMAND_LEN; i++) {    header[4 + i]=(byte)(name.codePointAt(i) & 0xFF);  }  Utils.uint32ToByteArrayLE(message.length,header,4 + COMMAND_LEN);  byte[] hash=doubleDigest(message);  System.arraycopy(hash,0,header,4 + COMMAND_LEN + 4,4);  out.write(header);  out.write(message);  if (log.isDebugEnabled())   log.debug("Sending {} message: {}",name,bytesToHexString(header) + bytesToHexString(message));}  }
class C{  public static int findKeyType(KeyID keyID){  return (idType[keyID.ordinal()]);}  }
class C{  public SocialMediaUsername(){  super(PATTERN,false,1.0f);}  }
class C{  protected UnscheduleTimeEventImpl(){  super();}  }
class C{  private String toIndentedString(Object o){  if (o == null) {    return "null";  }  return o.toString().replace("\n","\n    ");}  }
class C{  public void storePref(final EditorPreferences editorPreferences,final EditorType editorType){  if (editorType == null) {    Log.warn(DefaultEditorTypePrefReader.class,"Attempt to set 'null' for default editor - won't comply.");    return;  }  EditorPreferences usedPreferences=editorPreferences;  if (usedPreferences == null) {    usedPreferences=EditorPreferences.create();  }  usedPreferences.setDefaultEditor(editorType.getEditorTypeKey());  this.preferenceReader.setPreferences(usedPreferences);}  }
class C{  public Message(MessageLevel level,Object sender,String id){  this(level,sender,new String[0],id,new String[0]);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_NUM_EXPR_3__TAIL_1:    setTail_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  private JSONWriter end(char mode,char c) throws JSONException {  if (this.mode != mode) {    throw new JSONException(mode == 'a' ? "Misplaced endArray." : "Misplaced endObject.");  }  this.pop(mode);  try {    this.writer.write(c);  } catch (  IOException e) {    throw new JSONException(e);  }  this.comma=true;  return this;}  }
class C{  public void proceedTestUsingByteArrayBuffer(CipherOutputStream ciOutput) throws IOException {  byte[] buffer=new byte[TEXT_SIZE];  int len=getCiInput().read(buffer);  while (len != -1) {    ciOutput.write(buffer,0,len);    len=getCiInput().read(buffer);  }}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder=NonPowerAware.class.getClassLoader().getResource("workload/planetlab").getPath();  String outputFolder="output";  String workload="20110303";  String vmAllocationPolicy="thr";  String vmSelectionPolicy="mc";  String parameter="0.8";  new PlanetLabRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  public int[] cleanOffsetOthers(int[] othersOffsets,int j,boolean removeDest){  int[] cleaned=new int[numOtherInfoContributors];  int countOfOthers=0;  for (int index=0; index < othersOffsets.length; index++) {    if ((othersOffsets[index] != j) && ((othersOffsets[index] != 0) || !removeDest)) {      if (countOfOthers == numOtherInfoContributors) {        countOfOthers++;        break;      }      cleaned[countOfOthers]=othersOffsets[index];      countOfOthers++;    }  }  if (countOfOthers < numOtherInfoContributors) {    throw new RuntimeException("Too few others in offsets");  } else   if (countOfOthers > numOtherInfoContributors) {    throw new RuntimeException("Too many others in offsets");  }  return cleaned;}  }
class C{  protected void forwardMessage(AbstractMRListener client,AbstractMRMessage m){  ((CanListener)client).message((CanMessage)m);}  }
class C{  public void paintSeparatorBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:26.116 -0400",hash_original_method="B584CD8EAA82EE784971C756859E7D17",hash_generated_method="B584CD8EAA82EE784971C756859E7D17") void initBluetoothAfterTurningOn(){  String discoverable=getProperty("Discoverable",false);  String timeout=getProperty("DiscoverableTimeout",false);  if (discoverable.equals("true") && Integer.valueOf(timeout) != 0) {    setAdapterPropertyBooleanNative("Discoverable",0);  }  mBondState.initBondState();  initProfileState();  getProfileProxy();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:26.332 -0500",hash_original_method="088B6D36E7315E28AFCE4F1DFAAB72D3",hash_generated_method="0B4BAF19FBE4483E75DF5B1663D766EE") public static Picture createFromStream(InputStream stream){  return new Picture(nativeCreateFromStream(stream,new byte[WORKING_STREAM_STORAGE]));}  }
class C{  public void seekTo(int milli){  checkState();  if (!mPlayerPlaylist.isEmpty()) {    PlaybackService.seekTo(getContext(),mClientKey,milli);  }}  }
class C{  private int matchCaseAlignment(){  while (true) {    nextToken();switch (fToken) {case Symbols.TokenLPAREN:case Symbols.TokenLBRACKET:case Symbols.TokenEOF:      return fPosition;case Symbols.TokenLBRACE:    fIndent=fPrefs.prefCaseIndent;  return fPosition;case Symbols.TokenCASE:case Symbols.TokenDEFAULT:fIndent=0;return fPosition;case Symbols.TokenRPAREN:case Symbols.TokenRBRACKET:case Symbols.TokenRBRACE:case Symbols.TokenGREATERTHAN:skipScope();break;default :continue;}}}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private BorderPane createNode(ChartViewer control){  BorderPane borderPane=new BorderPane();  borderPane.setPrefSize(800,500);  StackPane sp=new StackPane();  sp.setMinSize(10,10);  sp.setPrefSize(600,400);  this.canvas=new ChartCanvas(getSkinnable().getChart());  this.canvas.setTooltipEnabled(control.isTooltipEnabled());  this.canvas.addChartMouseListener(control);  this.canvas.widthProperty().bind(sp.widthProperty());  this.canvas.heightProperty().bind(sp.heightProperty());  this.canvas.addMouseHandler(new ZoomHandlerFX("zoom",control));  sp.getChildren().add(this.canvas);  borderPane.setCenter(sp);  return borderPane;}  }
class C{  private void writeLineSeparator() throws XMLStreamException {  if (_doIndent) {    _writer.write(_lineSep,0,_lineSep.length);  }}  }
class C{  public static CommandResult execCommand(String[] commands,boolean isRoot,boolean isNeedResultMsg){  int result=-1;  if (commands == null || commands.length == 0) {    return new CommandResult(result,null,null);  }  Process process=null;  BufferedReader successResult=null;  BufferedReader errorResult=null;  StringBuilder successMsg=null;  StringBuilder errorMsg=null;  DataOutputStream os=null;  try {    process=Runtime.getRuntime().exec(isRoot ? COMMAND_SU : COMMAND_SH);    os=new DataOutputStream(process.getOutputStream());    for (    String command : commands) {      if (command == null) {        continue;      }      os.write(command.getBytes());      os.writeBytes(COMMAND_LINE_END);      os.flush();    }    os.writeBytes(COMMAND_EXIT);    os.flush();    result=process.waitFor();    if (isNeedResultMsg) {      successMsg=new StringBuilder();      errorMsg=new StringBuilder();      successResult=new BufferedReader(new InputStreamReader(process.getInputStream()));      errorResult=new BufferedReader(new InputStreamReader(process.getErrorStream()));      String s;      while ((s=successResult.readLine()) != null) {        successMsg.append(s);      }      while ((s=errorResult.readLine()) != null) {        errorMsg.append(s);      }    }  } catch (  IOException e) {    e.printStackTrace();  }catch (  Exception e) {    e.printStackTrace();  } finally {    try {      if (os != null) {        os.close();      }      if (successResult != null) {        successResult.close();      }      if (errorResult != null) {        errorResult.close();      }    } catch (    IOException e) {      e.printStackTrace();    }    if (process != null) {      process.destroy();    }  }  return new CommandResult(result,successMsg == null ? null : successMsg.toString(),errorMsg == null ? null : errorMsg.toString());}  }
class C{  public Document[] readDocs(DocList ids) throws IOException {  final Document[] docs=new Document[ids.size()];  readDocs(docs,ids);  return docs;}  }
class C{  private void calculatePath(){  mAboveWavePath.reset();  mBlowWavePath.reset();  getWaveOffset();  float y;  mAboveWavePath.moveTo(left,bottom);  for (float x=0; x <= mMaxRight; x+=X_SPACE) {    y=(float)(mWaveHeight * Math.sin(omega * x + mAboveOffset) + mWaveHeight);    mAboveWavePath.lineTo(x,y);  }  mAboveWavePath.lineTo(right,bottom);  mBlowWavePath.moveTo(left,bottom);  for (float x=0; x <= mMaxRight; x+=X_SPACE) {    y=(float)(mWaveHeight * Math.sin(omega * x + mBlowOffset) + mWaveHeight);    mBlowWavePath.lineTo(x,y);  }  mBlowWavePath.lineTo(right,bottom);}  }
class C{  @Override public void insertRow() throws SQLException {  try {    debugCodeCall("insertRow");    checkUpdatable();    if (insertRow == null) {      throw DbException.get(ErrorCode.NOT_ON_UPDATABLE_ROW);    }    getUpdatableRow().insertRow(insertRow);    insertRow=null;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @Ignore("TODO: test is disabled") @Test public void testBug40333_InPartitionedRegion_2() throws Exception {  CacheUtils.startCache();  final Cache cache=CacheUtils.getCache();  AttributesFactory attributesFactory=new AttributesFactory();  PartitionAttributesFactory paf=new PartitionAttributesFactory();  paf.setTotalNumBuckets(10);  PartitionAttributes pa=paf.create();  attributesFactory.setPartitionAttributes(pa);  RegionAttributes ra=attributesFactory.create();  final Region region=cache.createRegion("new_pos",ra);  String queryStr=" select distinct r.name, pVal, r.\"type\"  " + " from /new_pos r , r.positions.values pVal where " + " ( r.name IN Set('name_11' , 'name_12') OR false ) AND pVal.mktValue < 1.00";  this.bug40333Simulation(region,queryStr);}  }
class C{  public Builder start(long timeMillis){  event.localStart.setTimeInMillis(timeMillis);  return this;}  }
class C{  public boolean isRecursiveResourcePoolsSupported(){  return recursiveResourcePoolsSupported;}  }
class C{  private static void checkForCorrectSetup(){  try {    Method append=instrumentation.getClass().getDeclaredMethod("appendToBootstrapClassLoaderSearch",JarFile.class);    append.setAccessible(true);    append.invoke(instrumentation,new JarFile(getInspectItAgentJarFileLocation()));    instrumentCoreClasses=true;  } catch (  NoSuchMethodException e) {    LOGGER.info("inspectIT Agent: Advanced instrumentation capabilities not detected...");  }catch (  SecurityException e) {    LOGGER.info("inspectIT Agent: Advanced instrumentation capabilities not detected due to security constraints...");  }catch (  Exception e) {    LOGGER.severe("Something unexpected happened while trying to get advanced instrumentation capabilities!");    e.printStackTrace();  }  if (!instrumentCoreClasses) {    List<String> inputArgs=ManagementFactory.getRuntimeMXBean().getInputArguments();    for (    String arg : inputArgs) {      if (arg.contains("Xbootclasspath") && arg.contains("inspectit-agent.jar")) {        instrumentCoreClasses=true;        LOGGER.info("inspectIT Agent: Xbootclasspath setting found, activating core class instrumentation...");        break;      }    }  }}  }
class C{  public void info(String msg,Throwable t){  log(Log.INFO,msg,t);}  }
class C{  @NoInline public void init(){  currentFramePointer=Magic.getFramePointer();  upOneFrame();}  }
class C{  public static SootMethod resolveMethod(SootClass clz,String signature){  String mName=grabName(signature);  String[] args=grabArgs(signature);  String rtype=grabReturnType(signature);  for (  SootMethod curr : clz.getMethods()) {    if (!curr.getName().equals(mName) || curr.getParameterCount() != args.length)     continue;    Type returnType=toSootType(rtype);    if (!isSubTypeOfIncluding(returnType,curr.getReturnType()))     continue;    boolean foundCounterEx=false;    for (int i=0; i < args.length; i++) {      if (!isSubTypeOfIncluding(toSootType(args[i]),curr.getParameterType(i))) {        foundCounterEx=true;        continue;      }    }    if (foundCounterEx)     continue;    return curr;  }  if (clz.getName().equals("java.lang.Object") || clz.getSuperclass() == null)   return null;  return resolveMethod(clz.getSuperclass(),signature);}  }
class C{  protected void fillVersionedObjectList(VersionedObjectList list){  for (  RemoveAllEntryData entry : this.removeAllData) {    if (entry.versionTag != null) {      list.addKeyAndVersion(entry.key,entry.versionTag);    }  }}  }
class C{  protected Fact triple(Resource s,URI p,Value o,OwlRule rule,Fact source){  Fact fact=new Fact(s,p,o,this.currentIteration,rule,this.node);  fact.addSource(source);  return fact;}  }
class C{  public DrawerBuilder withSliderBackgroundDrawable(@NonNull Drawable sliderBackgroundDrawable){  this.mSliderBackgroundDrawable=sliderBackgroundDrawable;  return this;}  }
class C{  public boolean acceptsTypeName(String type){  return _typeList.contains(type);}  }
class C{  public Bitmap put(String key,Bitmap value){  return cache.put(key,value);}  }
class C{  public final java_cup.runtime.Symbol CUP$Parser$do_action(int CUP$Parser$act_num,java_cup.runtime.lr_parser CUP$Parser$parser,java.util.Stack<java_cup.runtime.Symbol> CUP$Parser$stack,int CUP$Parser$top) throws java.lang.Exception {  java_cup.runtime.Symbol CUP$Parser$result;switch (CUP$Parser$act_num) {case 37:{      Boolean RESULT=null;      Boolean l=(Boolean)CUP$Parser$stack.elementAt(CUP$Parser$top - 2).value;      Boolean r=(Boolean)CUP$Parser$stack.peek().value;      RESULT=l || r;      CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr",6,(CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),(CUP$Parser$stack.peek()),RESULT);    }  return CUP$Parser$result;case 36:{  Boolean RESULT=null;  Boolean l=(Boolean)CUP$Parser$stack.elementAt(CUP$Parser$top - 2).value;  Boolean r=(Boolean)CUP$Parser$stack.peek().value;  RESULT=l && r;  CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr",6,(CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 35:{Boolean RESULT=null;Boolean b=(Boolean)CUP$Parser$stack.peek().value;RESULT=!b;CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr",6,(CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 34:{Boolean RESULT=null;Boolean b=(Boolean)CUP$Parser$stack.elementAt(CUP$Parser$top - 1).value;RESULT=b;CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr",6,(CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 33:{Boolean RESULT=null;Double l=(Double)CUP$Parser$stack.elementAt(CUP$Parser$top - 2).value;Double r=(Double)CUP$Parser$stack.peek().value;RESULT=new Boolean(l.doubleValue() == r.doubleValue());CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr",6,(CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 32:{Boolean RESULT=null;Double l=(Double)CUP$Parser$stack.elementAt(CUP$Parser$top - 2).value;Double r=(Double)CUP$Parser$stack.peek().value;RESULT=new Boolean(l.doubleValue() >= r.doubleValue());CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr",6,(CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 31:{Boolean RESULT=null;Double l=(Double)CUP$Parser$stack.elementAt(CUP$Parser$top - 2).value;Double r=(Double)CUP$Parser$stack.peek().value;RESULT=new Boolean(l.doubleValue() > r.doubleValue());CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr",6,(CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 30:{Boolean RESULT=null;Double l=(Double)CUP$Parser$stack.elementAt(CUP$Parser$top - 2).value;Double r=(Double)CUP$Parser$stack.peek().value;RESULT=new Boolean(l.doubleValue() <= r.doubleValue());CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr",6,(CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 29:{Boolean RESULT=null;Double l=(Double)CUP$Parser$stack.elementAt(CUP$Parser$top - 2).value;Double r=(Double)CUP$Parser$stack.peek().value;RESULT=new Boolean(l.doubleValue() < r.doubleValue());CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr",6,(CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 28:{Boolean RESULT=null;RESULT=new Boolean(false);CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr",6,(CUP$Parser$stack.peek()),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 27:{Boolean RESULT=null;RESULT=new Boolean(true);CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr",6,(CUP$Parser$stack.peek()),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 26:{Boolean RESULT=null;Boolean b=(Boolean)CUP$Parser$stack.peek().value;RESULT=b;CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr",6,(CUP$Parser$stack.peek()),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 25:{Double RESULT=null;Boolean b=(Boolean)CUP$Parser$stack.elementAt(CUP$Parser$top - 5).value;Double e_true=(Double)CUP$Parser$stack.elementAt(CUP$Parser$top - 3).value;Double e_false=(Double)CUP$Parser$stack.elementAt(CUP$Parser$top - 1).value;if (b) {RESULT=e_true;} else {RESULT=e_false;}CUP$Parser$result=parser.getSymbolFactory().newSymbol("funcexpr",5,(CUP$Parser$stack.elementAt(CUP$Parser$top - 7)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 24:{Double RESULT=null;Double e=(Double)CUP$Parser$stack.elementAt(CUP$Parser$top - 1).value;RESULT=new Double(Math.ceil(e));CUP$Parser$result=parser.getSymbolFactory().newSymbol("funcexpr",5,(CUP$Parser$stack.elementAt(CUP$Parser$top - 3)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 23:{Double RESULT=null;Double base=(Double)CUP$Parser$stack.elementAt(CUP$Parser$top - 3).value;Double exponent=(Double)CUP$Parser$stack.elementAt(CUP$Parser$top - 1).value;RESULT=new Double(Math.pow(base,exponent));CUP$Parser$result=parser.getSymbolFactory().newSymbol("funcexpr",5,(CUP$Parser$stack.elementAt(CUP$Parser$top - 5)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 22:{Double RESULT=null;Double e=(Double)CUP$Parser$stack.elementAt(CUP$Parser$top - 1).value;RESULT=new Double(Math.floor(e));CUP$Parser$result=parser.getSymbolFactory().newSymbol("funcexpr",5,(CUP$Parser$stack.elementAt(CUP$Parser$top - 3)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 21:{Double RESULT=null;Double e=(Double)CUP$Parser$stack.elementAt(CUP$Parser$top - 1).value;RESULT=new Double(Math.rint(e));CUP$Parser$result=parser.getSymbolFactory().newSymbol("funcexpr",5,(CUP$Parser$stack.elementAt(CUP$Parser$top - 3)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 20:{Double RESULT=null;Double e=(Double)CUP$Parser$stack.elementAt(CUP$Parser$top - 1).value;RESULT=new Double(Math.tan(e));CUP$Parser$result=parser.getSymbolFactory().newSymbol("funcexpr",5,(CUP$Parser$stack.elementAt(CUP$Parser$top - 3)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 19:{Double RESULT=null;Double e=(Double)CUP$Parser$stack.elementAt(CUP$Parser$top - 1).value;RESULT=new Double(Math.cos(e));CUP$Parser$result=parser.getSymbolFactory().newSymbol("funcexpr",5,(CUP$Parser$stack.elementAt(CUP$Parser$top - 3)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 18:{Double RESULT=null;Double e=(Double)CUP$Parser$stack.elementAt(CUP$Parser$top - 1).value;RESULT=new Double(Math.sin(e));CUP$Parser$result=parser.getSymbolFactory().newSymbol("funcexpr",5,(CUP$Parser$stack.elementAt(CUP$Parser$top - 3)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 17:{Double RESULT=null;Double e=(Double)CUP$Parser$stack.elementAt(CUP$Parser$top - 1).value;RESULT=new Double(Math.exp(e));CUP$Parser$result=parser.getSymbolFactory().newSymbol("funcexpr",5,(CUP$Parser$stack.elementAt(CUP$Parser$top - 3)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 16:{Double RESULT=null;Double e=(Double)CUP$Parser$stack.elementAt(CUP$Parser$top - 1).value;RESULT=new Double(Math.log(e));CUP$Parser$result=parser.getSymbolFactory().newSymbol("funcexpr",5,(CUP$Parser$stack.elementAt(CUP$Parser$top - 3)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 15:{Double RESULT=null;Double e=(Double)CUP$Parser$stack.elementAt(CUP$Parser$top - 1).value;RESULT=new Double(Math.sqrt(e));CUP$Parser$result=parser.getSymbolFactory().newSymbol("funcexpr",5,(CUP$Parser$stack.elementAt(CUP$Parser$top - 3)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 14:{Double RESULT=null;Double e=(Double)CUP$Parser$stack.elementAt(CUP$Parser$top - 1).value;RESULT=new Double(Math.abs(e));CUP$Parser$result=parser.getSymbolFactory().newSymbol("funcexpr",5,(CUP$Parser$stack.elementAt(CUP$Parser$top - 3)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 13:{Double RESULT=null;String v=(String)CUP$Parser$stack.peek().value;if (parser.getSymbols().containsKey(v)) {RESULT=parser.getSymbols().get(v);} else {throw new IllegalStateException("Unknown symbol '" + v + "'!");}CUP$Parser$result=parser.getSymbolFactory().newSymbol("varexpr",4,(CUP$Parser$stack.peek()),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 12:{Double RESULT=null;Double l=(Double)CUP$Parser$stack.elementAt(CUP$Parser$top - 2).value;Double r=(Double)CUP$Parser$stack.peek().value;RESULT=new Double(l.doubleValue() / r.doubleValue());CUP$Parser$result=parser.getSymbolFactory().newSymbol("opexpr",3,(CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 11:{Double RESULT=null;Double l=(Double)CUP$Parser$stack.elementAt(CUP$Parser$top - 2).value;Double r=(Double)CUP$Parser$stack.peek().value;RESULT=new Double(l.doubleValue() * r.doubleValue());CUP$Parser$result=parser.getSymbolFactory().newSymbol("opexpr",3,(CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 10:{Double RESULT=null;Double l=(Double)CUP$Parser$stack.elementAt(CUP$Parser$top - 2).value;Double r=(Double)CUP$Parser$stack.peek().value;RESULT=new Double(l.doubleValue() - r.doubleValue());CUP$Parser$result=parser.getSymbolFactory().newSymbol("opexpr",3,(CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 9:{Double RESULT=null;Double l=(Double)CUP$Parser$stack.elementAt(CUP$Parser$top - 2).value;Double r=(Double)CUP$Parser$stack.peek().value;RESULT=new Double(l.doubleValue() + r.doubleValue());CUP$Parser$result=parser.getSymbolFactory().newSymbol("opexpr",3,(CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 8:{Double RESULT=null;Double f=(Double)CUP$Parser$stack.peek().value;RESULT=f;CUP$Parser$result=parser.getSymbolFactory().newSymbol("expr",2,(CUP$Parser$stack.peek()),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 7:{Double RESULT=null;Double v=(Double)CUP$Parser$stack.peek().value;RESULT=v;CUP$Parser$result=parser.getSymbolFactory().newSymbol("expr",2,(CUP$Parser$stack.peek()),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 6:{Double RESULT=null;Double o=(Double)CUP$Parser$stack.peek().value;RESULT=o;CUP$Parser$result=parser.getSymbolFactory().newSymbol("expr",2,(CUP$Parser$stack.peek()),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 5:{Double RESULT=null;Double e=(Double)CUP$Parser$stack.elementAt(CUP$Parser$top - 1).value;RESULT=e;CUP$Parser$result=parser.getSymbolFactory().newSymbol("expr",2,(CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 4:{Double RESULT=null;Double n=(Double)CUP$Parser$stack.peek().value;RESULT=n;CUP$Parser$result=parser.getSymbolFactory().newSymbol("expr",2,(CUP$Parser$stack.peek()),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 3:{Object RESULT=null;Double e=(Double)CUP$Parser$stack.peek().value;parser.setResult(e);CUP$Parser$result=parser.getSymbolFactory().newSymbol("expr_part",1,(CUP$Parser$stack.peek()),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 2:{Object RESULT=null;CUP$Parser$result=parser.getSymbolFactory().newSymbol("expr_list",0,(CUP$Parser$stack.peek()),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 1:{Object RESULT=null;Object start_val=CUP$Parser$stack.elementAt(CUP$Parser$top - 1).value;RESULT=start_val;CUP$Parser$result=parser.getSymbolFactory().newSymbol("$START",0,(CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),(CUP$Parser$stack.peek()),RESULT);}CUP$Parser$parser.done_parsing();return CUP$Parser$result;case 0:{Object RESULT=null;CUP$Parser$result=parser.getSymbolFactory().newSymbol("expr_list",0,(CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),(CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;default :throw new Exception("Invalid action number found in internal parse table");}}  }
class C{  public static Instances replaceZasAttributes(Instances D,double Z[][],int L){  D.setClassIndex(0);  int m=D.numAttributes() - L;  for (int j=0; j < m; j++) {    D.deleteAttributeAt(L);  }  return addZtoD(D,Z,L);}  }
class C{  public static byte[] appendByte(byte[] bytes,byte b){  byte[] result=Arrays.copyOf(bytes,bytes.length + 1);  result[result.length - 1]=b;  return result;}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  private void fillBySlotTarget(RPAction action){  findSlotByObjectIdAndSlotName(action,EquipActionConsts.TARGET_OBJECT,EquipActionConsts.TARGET_SLOT);}  }
class C{  public IndexRequest(String index,String type,String id){  this.index=index;  this.type=type;  this.id=id;}  }
class C{  public static PsiElement renameElement(PsiElement element,String newName){  return PerlPsiUtil.getManipulator(element).handleContentChange(element,newName);}  }
class C{  public boolean isError(){  return this.type == TYPE_MALFORMED_INPUT || this.type == TYPE_UNMAPPABLE_CHAR;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void addStatistics(String message,long currentTime){  this.timeTaken=currentTime - startTime;  this.message=message;}  }
class C{  public EscapedWriter(Writer fos){  super(fos);}  }
class C{  public void stopHidingDisconnectedPlayer(Player player){  hiddenEntities.remove(player.getUniqueId());}  }
class C{  public boolean isList(String key){  Object val=get(key);  return val instanceof List;}  }
class C{  private double maxIgnoreNaN(double a,double b){  if (Double.isNaN(a)) {    return b;  }  if (Double.isNaN(b)) {    return a;  }  return Math.max(a,b);}  }
class C{  int generateBridgeSecret(){  SecureRandom randGen=new SecureRandom();  expectedBridgeSecret=randGen.nextInt(Integer.MAX_VALUE);  return expectedBridgeSecret;}  }
class C{  public JValidityPeriod(int periodType){  initComponents(periodType);}  }
class C{  public void loadToolboxContents(int toolboxResId){  InputStream is=mContext.getResources().openRawResource(toolboxResId);  loadToolboxContents(is);}  }
class C{  public boolean hasTProfile(){  return DSSXMLUtils.isNotEmpty(signatureElement,xPathQueryHolder.XPATH_SIGNATURE_TIMESTAMP);}  }
class C{  boolean isAccepted(final String name){  for (  String str : charsets) {    if (str.equalsIgnoreCase(name)) {      return true;    }  }  return false;}  }
class C{  private void checkSubject(){  AccessControlContext acc=AccessController.getContext();  Subject subject=Subject.getSubject(acc);  Set principals=subject.getPrincipals();  Principal principal=(Principal)principals.iterator().next();  if (!(principal instanceof JMXPrincipal))   throw new SecurityException("Authenticated subject contains " + "invalid principal type = " + principal.getClass().getName());  String identity=principal.getName();  if (!identity.equals("monitorRole"))   throw new SecurityException("Authenticated subject contains " + "invalid principal name = " + identity);}  }
class C{  public boolean addAll(Collection coll,boolean allowRepeated){  boolean isChanged=false;  for (Iterator i=coll.iterator(); i.hasNext(); ) {    add((Coordinate)i.next(),allowRepeated);    isChanged=true;  }  return isChanged;}  }
class C{  public static boolean retainAll(Collection self,Object[] items){  Collection pickFrom=new TreeSet(new NumberAwareComparator());  pickFrom.addAll(Arrays.asList(items));  return self.retainAll(pickFrom);}  }
class C{  static CanonicalCookie createFromStream(DataInputStream in) throws IOException {  return new CanonicalCookie(in.readUTF(),in.readUTF(),in.readUTF(),in.readUTF(),in.readUTF(),in.readLong(),in.readLong(),in.readLong(),in.readBoolean(),in.readBoolean(),in.readBoolean(),in.readInt());}  }
class C{  @Override public String read(Pattern pattern){  final Matcher matcher=pattern.matcher(rest());  if (matcher.find() && matcher.start() == 0) {    cursor+=matcher.group().length();    return matcher.group();  }  return null;}  }
class C{  protected void selectionChanged(final boolean hasSelection){  for (  final JButton button : selEnabledButtonList)   button.setEnabled(hasSelection);  if (selectInfoLabel != null)   selectInfoLabel.setEnabled(!hasSelection);}  }
class C{  public Extent toExtent(){  return new Extent(value);}  }
class C{  public void testBug10155() throws Exception {  this.conn.prepareStatement("SELECT \"Test question mark? Test single quote'\"").executeQuery().close();}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public DomainHistoryObject(DomainObjectWithHistory<D> domobj){  setObjKey(domobj.getKey());  setDataContainer(domobj.getDataContainer());  setObjVersion(domobj.getVersion());}  }
class C{  public boolean syncPingSupplicant(AsyncChannel channel){  Message resultMsg=channel.sendMessageSynchronously(CMD_PING_SUPPLICANT);  boolean result=(resultMsg.arg1 != FAILURE);  resultMsg.recycle();  return result;}  }
class C{  private Response<Bitmap> doParse(NetworkResponse response){  byte[] data=response.data;  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  Bitmap bitmap=null;  if (mMaxWidth == 0 && mMaxHeight == 0) {    decodeOptions.inPreferredConfig=mDecodeConfig;    bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);  } else {    decodeOptions.inJustDecodeBounds=true;    BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight,mScaleType);    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth,mScaleType);    decodeOptions.inJustDecodeBounds=false;    decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);      tempBitmap.recycle();    } else {      bitmap=tempBitmap;    }  }  if (bitmap == null) {    return Response.error(new ParseError(response));  } else {    return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response));  }}  }
class C{  public static byte[] generateKey(){  try {    KeyGenerator kgen=KeyGenerator.getInstance("AES");    kgen.init(DEFAULT_KEY_SIZE);    SecretKey skey=kgen.generateKey();    byte[] key=skey.getEncoded();    return key;  } catch (  NoSuchAlgorithmException e) {    LOG.warn(e.getMessage());  }  return null;}  }
class C{  public void notationDecl(String name,String publicId,String systemId) throws SAXException {  if (m_dtdHandler != null) {    m_dtdHandler.notationDecl(name,publicId,systemId);  }}  }
class C{  public boolean isShowingPopup(){  return getListPopupWindow().isShowing();}  }
class C{  private static String decodeWord(String word) throws UnsupportedEncodingException {  if (!word.startsWith(ENCODED_TOKEN_MARKER)) {    throw new FormatException("Invalid RFC 2047 encoded-word: " + word);  }  int charsetPos=word.indexOf('?',2);  if (charsetPos == -1) {    throw new FormatException("Missing charset in RFC 2047 encoded-word: " + word);  }  String charset=word.substring(2,charsetPos).toLowerCase();  int encodingPos=word.indexOf('?',charsetPos + 1);  if (encodingPos == -1) {    throw new FormatException("Missing encoding in RFC 2047 encoded-word: " + word);  }  String encoding=word.substring(charsetPos + 1,encodingPos);  int encodedTextPos=word.indexOf(ENCODED_TOKEN_FINISHER,encodingPos + 1);  if (encodedTextPos == -1) {    throw new FormatException("Missing encoded text in RFC 2047 encoded-word: " + word);  }  String encodedText=word.substring(encodingPos + 1,encodedTextPos);  if (encodedText.length() == 0) {    return "";  }  try {    ByteArrayOutputStream out=new ByteArrayOutputStream(encodedText.length());    byte[] encodedData=encodedText.getBytes(US_ASCII_CHARSET);    if (encoding.equals(BASE64_ENCODING_MARKER)) {      Base64Decoder.decode(encodedData,out);    } else     if (encoding.equals(QUOTEDPRINTABLE_ENCODING_MARKER)) {      QuotedPrintableDecoder.decode(encodedData,out);    } else {      throw new UnsupportedEncodingException("Unknown RFC 2047 encoding: " + encoding);    }    byte[] decodedData=out.toByteArray();    return new String(decodedData,javaCharset(charset));  } catch (  IOException e) {    throw new UnsupportedEncodingException("Invalid RFC 2047 encoding");  }}  }
class C{  private void onError(String errorMessage){  Log.e(LOG_TAG,"onForgotPasswordClick : requestValidationToken fails with error " + errorMessage);  if (mMode == MODE_FORGOT_PASSWORD) {    enableLoadingScreen(false);    Toast.makeText(getApplicationContext(),errorMessage,Toast.LENGTH_LONG).show();    mMode=MODE_LOGIN;    showMainLayout();    refreshDisplay();  }}  }
class C{  public double[] IHStoRGB(double[] ihs){  double[] ret=new double[3];  double i, h, s;  double r, g, b;  i=ihs[0];  h=ihs[1];  s=ihs[2];  if (h <= 1) {    r=i * (1 + 2 * s - 3 * s * h) / 3;    g=i * (1 - s + 3 * s * h) / 3;    b=i * (1 - s) / 3;  } else   if (h <= 2) {    r=i * (1 - s) / 3;    g=i * (1 + 2 * s - 3 * s * (h - 1)) / 3;    b=i * (1 - s + 3 * s * (h - 1)) / 3;  } else {    r=i * (1 - s + 3 * s * (h - 2)) / 3;    g=i * (1 - s) / 3;    b=i * (1 + 2 * s - 3 * s * (h - 2)) / 3;  }  ret[0]=r;  ret[1]=g;  ret[2]=b;  return ret;}  }
class C{  protected AnnotatedTypeMirror substituteTypeVariable(final AnnotatedTypeMirror argument,final AnnotatedTypeVariable use){  final AnnotatedTypeMirror substitute=argument.shallowCopy(false);  substitute.addAnnotations(argument.getAnnotationsField());  if (!use.getAnnotationsField().isEmpty()) {    substitute.replaceAnnotations(use.getAnnotations());  }  return substitute;}  }
class C{  public void close() throws SQLException {  connection.close();}  }
class C{  private static String[] sampleCharactersFromNetwork(String initialization,ComputationGraph net,CharacterIterator iter,Random rng,int charactersToSample,int numSamples){  if (initialization == null) {    initialization=String.valueOf(iter.getRandomCharacter());  }  INDArray initializationInput=Nd4j.zeros(numSamples,iter.inputColumns(),initialization.length());  char[] init=initialization.toCharArray();  for (int i=0; i < init.length; i++) {    int idx=iter.convertCharacterToIndex(init[i]);    for (int j=0; j < numSamples; j++) {      initializationInput.putScalar(new int[]{j,idx,i},1.0f);    }  }  StringBuilder[] sb=new StringBuilder[numSamples];  for (int i=0; i < numSamples; i++)   sb[i]=new StringBuilder(initialization);  net.rnnClearPreviousState();  INDArray output=net.rnnTimeStep(initializationInput)[0];  output=output.tensorAlongDimension(output.size(2) - 1,1,0);  for (int i=0; i < charactersToSample; i++) {    INDArray nextInput=Nd4j.zeros(numSamples,iter.inputColumns());    for (int s=0; s < numSamples; s++) {      double[] outputProbDistribution=new double[iter.totalOutcomes()];      for (int j=0; j < outputProbDistribution.length; j++)       outputProbDistribution[j]=output.getDouble(s,j);      int sampledCharacterIdx=GravesLSTMCharModellingExample.sampleFromDistribution(outputProbDistribution,rng);      nextInput.putScalar(new int[]{s,sampledCharacterIdx},1.0f);      sb[s].append(iter.convertIndexToCharacter(sampledCharacterIdx));    }    output=net.rnnTimeStep(nextInput)[0];  }  String[] out=new String[numSamples];  for (int i=0; i < numSamples; i++)   out[i]=sb[i].toString();  return out;}  }
class C{  public static void updateUI(Window win){  if (win == null)   return;  Window c=win;  do {    SwingUtilities.updateComponentTreeUI(c);    c.invalidate();    c.pack();    c.validate();    c.repaint();    c=c.getOwner();  } while (c != null);}  }
class C{  protected SearchKey searchKey(ImapSession session,ImapRequestLineReader request,Charset charset,boolean isFirstToken) throws DecodingException, IllegalCharsetNameException, UnsupportedCharsetException {  final char next=request.nextChar();  if (next >= '0' && next <= '9' || next == '*' || next == '$') {    return sequenceSet(session,request);  } else   if (next == '(') {    return paren(session,request,charset);  } else {    final int cap=consumeAndCap(request);switch (cap) {case 'A':      return a(request);case 'B':    return b(request,charset);case 'C':  return c(session,request,isFirstToken,charset);case 'D':return d(request);case 'E':throw new DecodingException(HumanReadableText.ILLEGAL_ARGUMENTS,"Unknown search key");case 'F':return f(request,charset);case 'G':throw new DecodingException(HumanReadableText.ILLEGAL_ARGUMENTS,"Unknown search key");case 'H':return header(request,charset);case 'I':throw new DecodingException(HumanReadableText.ILLEGAL_ARGUMENTS,"Unknown search key");case 'J':throw new DecodingException(HumanReadableText.ILLEGAL_ARGUMENTS,"Unknown search key");case 'K':return keyword(request);case 'L':return larger(request);case 'M':return modseq(request);case 'N':return n(session,request,charset);case 'O':return o(session,request,charset);case 'P':throw new DecodingException(HumanReadableText.ILLEGAL_ARGUMENTS,"Unknown search key");case 'Q':throw new DecodingException(HumanReadableText.ILLEGAL_ARGUMENTS,"Unknown search key");case 'R':nextIsE(request);nextIsC(request);return recent(request);case 'S':return s(request,charset);case 'T':return t(request,charset);case 'U':return u(request);case 'Y':return younger(request);default :throw new DecodingException(HumanReadableText.ILLEGAL_ARGUMENTS,"Unknown search key");}}}  }
class C{  protected void openCapabilitiesHelpDialog(){  if (PropertyDialog.getParentDialog(this) != null) {    m_CapabilitiesDialog=new CapabilitiesHelpDialog(PropertyDialog.getParentDialog(this));  } else {    m_CapabilitiesDialog=new CapabilitiesHelpDialog(PropertyDialog.getParentFrame(this));  }  m_CapabilitiesDialog.setSize(400,350);  m_CapabilitiesDialog.setLocation(m_aboutPanel.getTopLevelAncestor().getLocationOnScreen().x + m_aboutPanel.getTopLevelAncestor().getSize().width,m_aboutPanel.getTopLevelAncestor().getLocationOnScreen().y);  m_CapabilitiesDialog.setVisible(true);  addPropertyChangeListener(m_CapabilitiesDialog);}  }
class C{  private void printlnCommon(Node n){  m_out.print(" nodeName=\"" + n.getNodeName() + "\"");  String val=null;  val=n.getNamespaceURI();  if (val != null) {    m_out.print(" uri=\"" + val + "\"");  }  val=n.getPrefix();  if (val != null) {    m_out.print(" pre=\"" + val + "\"");  }  val=n.getLocalName();  if (val != null) {    m_out.print(" local=\"" + val + "\"");  }  val=n.getNodeValue();  if (val != null) {    m_out.print(" nodeValue=");    if (val.trim().equals("")) {      m_out.print("[WS]");    } else {      m_out.print("\"" + n.getNodeValue() + "\"");    }  }  m_out.println();}  }
class C{  void handleCancel(){  KeyboardFocusManager.getCurrentKeyboardFocusManager().removeKeyEventDispatcher(this);  setSelectionField(null);  setFilterField(null);  directoryList.clear();  fileList.clear();  AWTAccessor.FileDialogAccessor fileDialogAccessor=AWTAccessor.getFileDialogAccessor();  fileDialogAccessor.setDirectory(target,null);  fileDialogAccessor.setFile(target,null);  fileDialogAccessor.setFiles(target,null);  handleQuitButton();}  }
class C{  private WebRowSet createWebRowSet() throws SQLException {  if (wrs != null) {    return wrs;  } else {    wrs=new WebRowSetImpl();    crsInternal.beforeFirst();    wrs.populate(crsInternal);    return wrs;  }}  }
class C{  private void createPersons(String homeZone,String workZone,double commuters,double relativeAmountOfCarUses){  for (int i=0; i <= commuters; i++) {    String mode="car";    double carcommuters=commuters * relativeAmountOfCarUses;    if (i > carcommuters)     mode="pt";    Coord homec=this.getCoordInLanduseFromZone(homeZone,LanduseType.HOME);    Coord workc=this.getCoordInLanduseFromZone(workZone,LanduseType.WORK);    double personalRandom=rnd.nextDouble();    createOnePerson(homec,workc,mode,homeZone + "_" + workZone+ "_",personalRandom);  }}  }
class C{  public final void removeProgressThreadListener(final ProgressThreadListener listener){  listeners.remove(listener);}  }
class C{  public boolean declaresField(String name,Type type){  checkLevel(SIGNATURES);  Iterator<SootField> fieldIt=getFields().iterator();  while (fieldIt.hasNext()) {    SootField field=fieldIt.next();    if (field.name.equals(name) && field.type.equals(type))     return true;  }  return false;}  }
class C{  public JSONWriter array() throws JSONException {  if (this.mode == 'i' || this.mode == 'o' || this.mode == 'a') {    this.push(null);    this.append("[");    this.comma=false;    return this;  }  throw new JSONException("Misplaced array.");}  }
class C{  public KdTree(double[][] data){  this(new int[]{data[0].length},new double[][][]{data});}  }
class C{  public static SocksProxyServer newNoAuthenticationServer(){  return newNoAuthenticationServer(DEFAULT_PORT);}  }
class C{  public final void expectWhiteSpecialTillEnd() throws IOException {  while (mCurrentToken.mType == TokenType.TOKEN_EOL) {    advanceToken();  }  expectEof();}  }
class C{  void checkTimeout(){  if (!requestPending)   return;synchronized (this) {    if (!requestPending)     return;    long now=System.nanoTime();    if (now - this.roleSubmitTimeNs > roleTimeoutNs) {      switchManagerCounters.roleReplyTimeout.increment();      setSwitchRole(pendingRole,RoleRecvStatus.NO_REPLY);    }  }}  }
class C{  public ServerSocketService(){}  }
class C{  public void addUserNoUpdate(User user){synchronized (users) {    users.add(user);  }}  }
class C{  public static boolean isBookSearchUrl(String url){  return url.startsWith("http://google.com/books") || url.startsWith("http://books.google.");}  }
class C{  public void write(Writer writer) throws IOException {  final LineWriter lw=new LineWriter(writer);  lw.writeln(VERSION_HEADER);  lw.writeln("#taxID" + TAB + "parentID"+ TAB+ "rank"+ TAB+ "name");  final TaxonNode root=getRoot();  if (root != null) {    for (    final TaxonNode node : root.depthFirstTraversal()) {      lw.writeln(node.getId() + TAB + node.getParentId()+ TAB+ node.getRank()+ TAB+ node.getName());    }  }}  }
class C{  public void testGetSpeedStepMode(){  AbstractThrottle instance=new AbstractThrottleImpl();  int expResult=0;  int result=instance.getSpeedStepMode();  assertEquals(expResult,result);}  }
class C{  protected void fireActionEvent(){  eventDispatcher.fireActionEvent(new ActionEvent(this));}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.MULTIPLICATIVE_EXPRESSION__LHS:    setLhs((Expression)newValue);  return;case N4JSPackage.MULTIPLICATIVE_EXPRESSION__OP:setOp((MultiplicativeOperator)newValue);return;case N4JSPackage.MULTIPLICATIVE_EXPRESSION__RHS:setRhs((Expression)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void put(Field field,Class<?> arrayComponentType,Object value){  ArrayValueMap.ArrayValue arrayValue=fieldMap.get(field);  if (arrayValue == null) {    arrayValue=new ArrayValue(arrayComponentType);    fieldMap.put(field,arrayValue);  }  arrayValue.addValue(arrayComponentType,value);}  }
class C{  public Vertex parseGoto(TextStream stream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network){  stream.nextWord();  Vertex equation=network.createInstance(Primitive.GOTO);  stream.skipWhitespace();  boolean gotoFinally=stream.peekWord().toLowerCase().equals(FINALLY);  if (gotoFinally) {    stream.nextWord();    equation.addRelationship(Primitive.FINALLY,Primitive.FINALLY);  }  Vertex value=parseElement(stream,elements,debug,network);  equation.addRelationship(Primitive.GOTO,value);  if (stream.peek() != ';') {    if (stream.peekWord().toLowerCase().equals(WITH)) {      stream.skipWord();      stream.skipWhitespace();      if (stream.peek() == '(') {        stream.skip();        stream.skipWhitespace();        Vertex argument=parseElement(stream,elements,debug,network);        equation.addRelationship(Primitive.ARGUMENT,argument,Integer.MAX_VALUE);        stream.skipWhitespace();        while (stream.peek() == ',') {          stream.skip();          stream.skipWhitespace();          argument=parseElement(stream,elements,debug,network);          equation.addRelationship(Primitive.ARGUMENT,argument,Integer.MAX_VALUE);        }        ensureNext(')',stream);      } else {        Vertex argument=parseElement(stream,elements,debug,network);        equation.addRelationship(Primitive.ARGUMENT,argument,Integer.MAX_VALUE);      }    }  }  return equation;}  }
class C{  public void certificate(SslCertificate certificate){}  }
class C{  protected void removeApplicationFromVolume(URI voluri,DbClient dbClient){  Volume volume=dbClient.queryObject(Volume.class,voluri);  String appId=getId().toString();  StringSet appIds=volume.getVolumeGroupIds();  if (appIds != null) {    appIds.remove(appId);  }  dbClient.updateObject(volume);}  }
class C{  private void tuneBottomSplitter(Element el){  el.getParentElement().getStyle().setProperty("zIndex","1000");  el.getParentElement().getStyle().setProperty("overflow","visible");  el.getStyle().setProperty("height","3px");  el.getStyle().setProperty("marginTop","-2px");  el.getStyle().setProperty("backgroundColor","transparent");  DivElement delimiter=Document.get().createDivElement();  delimiter.getStyle().setProperty("position","absolute");  delimiter.getStyle().setProperty("width","100%");  delimiter.getStyle().setProperty("height","1px");  delimiter.getStyle().setProperty("left","0px");  delimiter.getStyle().setProperty("top","2px");  delimiter.getStyle().setProperty("backgroundColor",Style.getSplitterSmallBorderColor());  el.appendChild(delimiter);}  }
class C{  private URL transfer(String productOrigin,String productPath){  if (productOrigin == null) {    return null;  }  if (!productPath.equals(productOrigin)) {    return null;  }  File dest=incomingManager.getNewProductIncomingPath();  AsyncFileLock afl=null;  try {    Path path=Paths.get(dest.getParentFile().getAbsolutePath(),".lock-writing");    afl=new AsyncFileLock(path);    afl.obtain(900000);  } catch (  IOException|InterruptedException|TimeoutException e) {    LOGGER.warn("Cannot lock incoming directory - continuing without (" + e.getMessage() + ")");  }  try {    URL u=new URL(productOrigin);    String userInfos=u.getUserInfo();    String username=null;    String password=null;    if (userInfos != null) {      String[] infos=userInfos.split(":");      username=infos[0];      password=infos[1];    }    Hook hook=new Hook(dest.getParentFile());    Runtime.getRuntime().addShutdownHook(hook);    upload(productOrigin,username,password,dest);    Runtime.getRuntime().removeShutdownHook(hook);    String local_filename=productOrigin;    if (productOrigin.endsWith("/")) {      local_filename=local_filename.substring(0,local_filename.length() - 1);    }    local_filename=local_filename.substring(local_filename.lastIndexOf('/'));    File productFile=new File(dest,local_filename);    return productFile.toURI().toURL();  } catch (  Exception e) {    FileUtils.deleteQuietly(dest);    throw new DataStoreException("Cannot transfer product \"" + productOrigin + "\".",e);  } finally {    if (afl != null) {      afl.close();    }  }}  }
class C{  public void allocateAFresh(){  setStatus(WAITING);  setTransitReversed(false);  ArrayList<AllocatedSection> sectionsToRelease=new ArrayList<AllocatedSection>();  for (  AllocatedSection as : DispatcherFrame.instance().getAllocatedSectionsList()) {    if (as.getActiveTrain() == this) {      sectionsToRelease.add(as);    }  }  for (  AllocatedSection as : sectionsToRelease) {    DispatcherFrame.instance().releaseAllocatedSection(as,true);    as.getSection().setState(jmri.Section.FREE);  }  if (mLastAllocatedSection != null) {    mLastAllocatedSection.setState(jmri.Section.FREE);  }  resetAllAllocatedSections();  clearAllocations();  if (mAutoRun) {    mAutoActiveTrain.allocateAFresh();  }  DispatcherFrame.instance().allocateNewActiveTrain(this);}  }
class C{  public SampleVcpcFastRunner(GraphSource graphWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(graphWrapper.getGraph(),params,knowledgeBoxModel);}  }
class C{  public DrawerBuilder withScrollToTopAfterClick(boolean scrollToTopAfterClick){  this.mScrollToTopAfterClick=scrollToTopAfterClick;  return this;}  }
class C{  public void test_SSLEngineResultHandshakeStatus_values(){  String[] str={"NOT_HANDSHAKING","FINISHED","NEED_TASK","NEED_WRAP","NEED_UNWRAP"};  SSLEngineResult.HandshakeStatus[] enS=SSLEngineResult.HandshakeStatus.values();  if (enS.length == str.length) {    for (int i=0; i < enS.length; i++) {      assertEquals("Incorrect Status",enS[i].toString(),str[i]);    }  } else {    fail("Incorrect number of enum constant was returned");  }}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/deregister") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public ComputeElementRestRep deregisterComputeElement(@PathParam("id") URI id){  ArgValidator.checkFieldUriType(id,ComputeElement.class,"id");  ComputeElement ce=queryResource(id);  URIQueryResultList uris=new URIQueryResultList();  _dbClient.queryByConstraint(ContainmentConstraint.Factory.getHostComputeElementConstraint(ce.getId()),uris);  List<Host> hosts=_dbClient.queryObject(Host.class,uris,true);  if (!hosts.isEmpty()) {    throw APIException.badRequests.unableToDeregisterProvisionedComputeElement(ce.getLabel(),hosts.get(0).getHostName());  }  if (RegistrationStatus.REGISTERED.toString().equalsIgnoreCase(ce.getRegistrationStatus())) {    ce.setRegistrationStatus(RegistrationStatus.UNREGISTERED.toString());    _dbClient.persistObject(ce);    URIQueryResultList cvpList=new URIQueryResultList();    _log.debug("Looking for CVPs this blade is in");    _dbClient.queryByConstraint(ContainmentConstraint.Factory.getMatchedComputeElementComputeVirtualPoolConstraint(id),cvpList);    Iterator<URI> cvpListItr=cvpList.iterator();    while (cvpListItr.hasNext()) {      ComputeVirtualPool cvp=_dbClient.queryObject(ComputeVirtualPool.class,cvpListItr.next());      _log.debug("Found cvp:" + cvp.getLabel() + "containing compute element being deregistered");      StringSet currentElements=new StringSet();      if (cvp.getMatchedComputeElements() != null) {        currentElements.addAll(cvp.getMatchedComputeElements());        currentElements.remove(ce.getId().toString());      }      cvp.setMatchedComputeElements(currentElements);      _dbClient.updateAndReindexObject(cvp);      _log.debug("Removed ce from cvp");    }    recordAndAudit(ce,OperationTypeEnum.DEREGISTER_COMPUTE_ELEMENT,true,null);  }  return ComputeMapper.map(ce);}  }
class C{  public final void println() throws IOException {  write(_newlineBytes,0,_newlineBytes.length);  if (_isFlushOnNewline) {    flush();  }}  }
class C{  @Override protected long lengthOfData(){  LOG.trace("enter lengthOfData()");  return source.getLength();}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (isOutsideDocElem())   return;  String s=new String(ch,start,length);  append(m_doc.createTextNode(s));}  }
class C{  protected void log(String message){  if (verbose) {    indent(indentLevel + 1);    log.print(message);  }}  }
class C{  public static TreeNode[] parseAll(NamedInputStream nis,int nkind,FilenameToStream cobj) throws ParseException {  return null;}  }
class C{  public StringBuilder format(final StringBuilder sb,final long w){  final int initPosition=sb.length();  sb.append(mLocalFormat.format(w));  final int currLength=sb.length() - initPosition;  if (currLength == mLength) {    return sb;  }  if (currLength > mLength) {    sb.insert(initPosition,'#');    sb.append('#');  } else {    sb.insert(initPosition,mPadding,0,mLength - currLength);    assert sb.length() - initPosition == mLength;  }  return sb;}  }
class C{  private void notifyUIRefreshComplete(boolean ignoreHook){  if (mPtrIndicator.hasLeftStartPosition() && !ignoreHook && mRefreshCompleteHook != null) {    if (DEBUG) {      PtrCLog.d(LOG_TAG,"notifyUIRefreshComplete mRefreshCompleteHook run.");    }    mRefreshCompleteHook.takeOver();    return;  }  if (mPtrUIHandlerHolder.hasHandler()) {    if (DEBUG) {      PtrCLog.i(LOG_TAG,"PtrUIHandler: onUIRefreshComplete");    }    mPtrUIHandlerHolder.onUIRefreshComplete(this);  }  mPtrIndicator.onUIRefreshComplete();  tryScrollBackToTopAfterComplete();  tryToNotifyReset();}  }
class C{  static DrawableParent findDrawableParentForLeaf(DrawableParent parent){  while (true) {    Drawable child=parent.getDrawable();    if (child == parent || !(child instanceof DrawableParent)) {      break;    }    parent=(DrawableParent)child;  }  return parent;}  }
class C{  public static byte[] toByteArray(Reader input) throws IOException {  return toByteArray(input,Charset.defaultCharset());}  }
class C{  private synchronized boolean isSelectedTrackPaused(){  return trackDataHub != null && trackDataHub.isSelectedTrackPaused();}  }
class C{  @VisibleForTesting void resetCounters(){  updateCountersForOpen();  mPreferenceManager.setContextualSearchPromoOpenCount(0);  mDidResetCounters=true;}  }
class C{  public Value evaluate(IsBNode node,BindingSet bindings) throws ValueExprEvaluationException, QueryEvaluationException {  Value argValue=evaluate(node.getArg(),bindings);  return BooleanLiteral.valueOf(argValue instanceof BNode);}  }
class C{  public TripSchedule createSchedule(PatternTimetable timetable,int directionId,List<Service> services){  int serviceCode=services.size();  services.add(createService(timetable));  Trip trip=new Trip();  trip.direction_id=directionId;  int nStops=stops.size();  int[] arrivals=new int[nStops];  int[] departures=new int[nStops];  for (int s=0, t=0; s < nStops; s++) {    arrivals[s]=t;    t+=timetable.dwellTimes[s];    departures[s]=t;    if (s < timetable.hopTimes.length) {      t+=timetable.hopTimes[s];    }  }  Frequency freq=new Frequency();  freq.start_time=timetable.startTime;  freq.end_time=timetable.endTime;  freq.headway_secs=timetable.headwaySecs;  TripSchedule sched=TripSchedule.create(trip,arrivals,departures,Lists.newArrayList(freq),IntStream.range(0,arrivals.length).toArray(),serviceCode);  timetable.applyPhasing(sched);  return sched;}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer();  String nl=System.getProperty("line.separator");  buf.append("              Version: ").append(this.getVersion()).append(nl);  buf.append("             IssuerDN: ").append(this.getIssuerDN()).append(nl);  buf.append("          This update: ").append(this.getThisUpdate()).append(nl);  buf.append("          Next update: ").append(this.getNextUpdate()).append(nl);  buf.append("  Signature Algorithm: ").append(this.getSigAlgName()).append(nl);  byte[] sig=this.getSignature();  buf.append("            Signature: ").append(new String(Hex.encode(sig,0,20))).append(nl);  for (int i=20; i < sig.length; i+=20) {    if (i < sig.length - 20) {      buf.append("                       ").append(new String(Hex.encode(sig,i,20))).append(nl);    } else {      buf.append("                       ").append(new String(Hex.encode(sig,i,sig.length - i))).append(nl);    }  }  Extensions extensions=c.getTBSCertList().getExtensions();  if (extensions != null) {    Enumeration e=extensions.oids();    if (e.hasMoreElements()) {      buf.append("           Extensions: ").append(nl);    }    while (e.hasMoreElements()) {      ASN1ObjectIdentifier oid=(ASN1ObjectIdentifier)e.nextElement();      Extension ext=extensions.getExtension(oid);      if (ext.getExtnValue() != null) {        byte[] octs=ext.getExtnValue().getOctets();        ASN1InputStream dIn=new ASN1InputStream(octs);        buf.append("                       critical(").append(ext.isCritical()).append(") ");        try {          if (oid.equals(Extension.cRLNumber)) {            buf.append(new CRLNumber(ASN1Integer.getInstance(dIn.readObject()).getPositiveValue())).append(nl);          } else           if (oid.equals(Extension.deltaCRLIndicator)) {            buf.append("Base CRL: " + new CRLNumber(ASN1Integer.getInstance(dIn.readObject()).getPositiveValue())).append(nl);          } else           if (oid.equals(Extension.issuingDistributionPoint)) {            buf.append(IssuingDistributionPoint.getInstance(dIn.readObject())).append(nl);          } else           if (oid.equals(Extension.cRLDistributionPoints)) {            buf.append(CRLDistPoint.getInstance(dIn.readObject())).append(nl);          } else           if (oid.equals(Extension.freshestCRL)) {            buf.append(CRLDistPoint.getInstance(dIn.readObject())).append(nl);          } else {            buf.append(oid.getId());            buf.append(" value = ").append(ASN1Dump.dumpAsString(dIn.readObject())).append(nl);          }        } catch (        Exception ex) {          buf.append(oid.getId());          buf.append(" value = ").append("*****").append(nl);        }      } else {        buf.append(nl);      }    }  }  Set set=getRevokedCertificates();  if (set != null) {    Iterator it=set.iterator();    while (it.hasNext()) {      buf.append(it.next());      buf.append(nl);    }  }  return buf.toString();}  }
class C{  private float crossCheckVertical(int startI,int centerJ,int maxCount,int originalStateCountTotal){  BitMatrix image=this.image;  int maxI=image.getHeight();  int[] stateCount=getCrossCheckStateCount();  int i=startI;  while (i >= 0 && image.get(centerJ,i)) {    stateCount[2]++;    i--;  }  if (i < 0) {    return Float.NaN;  }  while (i >= 0 && !image.get(centerJ,i) && stateCount[1] <= maxCount) {    stateCount[1]++;    i--;  }  if (i < 0 || stateCount[1] > maxCount) {    return Float.NaN;  }  while (i >= 0 && image.get(centerJ,i) && stateCount[0] <= maxCount) {    stateCount[0]++;    i--;  }  if (stateCount[0] > maxCount) {    return Float.NaN;  }  i=startI + 1;  while (i < maxI && image.get(centerJ,i)) {    stateCount[2]++;    i++;  }  if (i == maxI) {    return Float.NaN;  }  while (i < maxI && !image.get(centerJ,i) && stateCount[3] < maxCount) {    stateCount[3]++;    i++;  }  if (i == maxI || stateCount[3] >= maxCount) {    return Float.NaN;  }  while (i < maxI && image.get(centerJ,i) && stateCount[4] < maxCount) {    stateCount[4]++;    i++;  }  if (stateCount[4] >= maxCount) {    return Float.NaN;  }  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2]+ stateCount[3]+ stateCount[4];  if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {    return Float.NaN;  }  return foundPatternCross(stateCount) ? centerFromEnd(stateCount,i) : Float.NaN;}  }
class C{  public InternalSiteServiceClient(){}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM__AST_STRUCTURAL_MEMBERS:    return ((InternalEList<?>)getAstStructuralMembers()).basicRemove(otherEnd,msgs);case ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM__GEN_STRUCTURAL_MEMBERS:  return ((InternalEList<?>)getGenStructuralMembers()).basicRemove(otherEnd,msgs);case ImPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL_IM__POSTPONED_SUBSTITUTIONS:return ((InternalEList<?>)getPostponedSubstitutions()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public Text trimStart(){  int first=0;  int last=length() - 1;  while ((first <= last) && (charAt(first) <= ' ')) {    first++;  }  return subtext(first,last + 1);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:58.993 -0500",hash_original_method="78058D86B1DA19EC155CBECCBB2F5E73",hash_generated_method="D250ACA0374EC8B1DFB7E338C6A2433B") final synchronized void _sendWont(int option) throws IOException {  if (debug || debugoptions) {    System.err.println("WONT: " + TelnetOption.getOption(option));  }  _output_.write(_COMMAND_WONT);  _output_.write(option);  _output_.flush();}  }
class C{  protected static int findMatchingRange(long creditCardNumber){  if (creditCardNumber < 1000000000000L) {    return NOT_ENOUGH_DIGITS;  }  if (creditCardNumber > 9999999999999999L) {    return TOO_MANY_DIGITS;  }  if (ranges[cachedLastFind].low <= creditCardNumber && creditCardNumber <= ranges[cachedLastFind].high) {    return cachedLastFind;  }  for (int i=0; i < ranges.length; i++) {    if (ranges[i].low <= creditCardNumber && creditCardNumber <= ranges[i].high) {      cachedLastFind=i;      return i;    }  }  return UNKNOWN_VENDOR;}  }
class C{  protected AbstractGraph(V[] vertices,int[][] edges){  for (int i=0; i < vertices.length; i++)   addVertex(vertices[i]);  createAjacencyLists(edges,vertices.length);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.722 -0400",hash_original_method="5B48C8683005DB158481C5D53B140180",hash_generated_method="A6BB146E775EED9D0866F255320E5D83") public FileWriterWithEncoding(String filename,Charset encoding) throws IOException {  this(new File(filename),encoding,false);}  }
class C{  public static String relativeFormat(Date dt){  return RelativeDateFormatter.format(dt);}  }
class C{  @Override public void handlePress(CallbackQuery query){  InlineMenu parent=owner.getParent();  if (parent != null) {    executeCallback();    owner.unregister();    parent.start();  }}  }
class C{  public void write() throws IOException, BadLocationException {  ElementIterator it=getElementIterator();  Element current=null;  Element next;  wroteHead=false;  setCurrentLineLength(0);  replaceEntities=false;  setCanWrapLines(false);  if (segment == null) {    segment=new Segment();  }  inPre=false;  boolean forcedBody=false;  while ((next=it.next()) != null) {    if (!inRange(next)) {      if (completeDoc && next.getAttributes().getAttribute(StyleConstants.NameAttribute) == HTML.Tag.BODY) {        forcedBody=true;      } else {        continue;      }    }    if (current != null) {      if (indentNeedsIncrementing(current,next)) {        incrIndent();      } else       if (current.getParentElement() != next.getParentElement()) {        Element top=blockElementStack.peek();        while (top != next.getParentElement()) {          blockElementStack.pop();          if (!synthesizedElement(top)) {            AttributeSet attrs=top.getAttributes();            if (!matchNameAttribute(attrs,HTML.Tag.PRE) && !isFormElementWithContent(attrs)) {              decrIndent();            }            endTag(top);          }          top=blockElementStack.peek();        }      } else       if (current.getParentElement() == next.getParentElement()) {        Element top=blockElementStack.peek();        if (top == current) {          blockElementStack.pop();          endTag(top);        }      }    }    if (!next.isLeaf() || isFormElementWithContent(next.getAttributes())) {      blockElementStack.push(next);      startTag(next);    } else {      emptyTag(next);    }    current=next;  }  closeOutUnwantedEmbeddedTags(null);  if (forcedBody) {    blockElementStack.pop();    endTag(current);  }  while (!blockElementStack.empty()) {    current=blockElementStack.pop();    if (!synthesizedElement(current)) {      AttributeSet attrs=current.getAttributes();      if (!matchNameAttribute(attrs,HTML.Tag.PRE) && !isFormElementWithContent(attrs)) {        decrIndent();      }      endTag(current);    }  }  if (completeDoc) {    writeAdditionalComments();  }  segment.array=null;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private static String adjustValue(final COperandTreeNode treeNode,final INodeModifier modifier){  if (treeNode.getType() == ExpressionType.IMMEDIATE_INTEGER) {    return buildIntegerOperand(treeNode,modifier);  } else   if (treeNode.getType() == ExpressionType.SIZE_PREFIX) {    return treeNode.getValue() + " ";  }  return treeNode.getValue();}  }
class C{  public long run(String[] args) throws Exception {  int nbatches=Integer.parseInt(args[0]);  int ncycles=Integer.parseInt(args[1]);  StreamBuffer sbuf=new StreamBuffer();  ObjectOutputStream oout=new ObjectOutputStream(sbuf.getOutputStream());  ObjectInputStream oin=new ObjectInputStream(sbuf.getInputStream());  doReps(oout,oin,sbuf,1,ncycles);  long start=System.currentTimeMillis();  doReps(oout,oin,sbuf,nbatches,ncycles);  return System.currentTimeMillis() - start;}  }
class C{  public DagToPattern(Graph dag){  this.dag=new EdgeListGraphSingleConnections(dag);}  }
class C{  public CryptoException(String message,Throwable cause){  super(message);  this.cause=cause;}  }
class C{  protected AWTEventMulticaster(EventListener a,EventListener b){  this.a=a;  this.b=b;}  }
class C{  private void fill() throws IOException {  byte[] buffer=getBufIfOpen();  if (markpos < 0)   pos=0; else   if (pos >= buffer.length)   if (markpos > 0) {    int sz=pos - markpos;    System.arraycopy(buffer,markpos,buffer,0,sz);    pos=sz;    markpos=0;  } else   if (buffer.length >= marklimit) {    markpos=-1;    pos=0;  } else   if (buffer.length >= MAX_BUFFER_SIZE) {    throw new OutOfMemoryError("Required array size too large");  } else {    int nsz=(pos <= MAX_BUFFER_SIZE - pos) ? pos * 2 : MAX_BUFFER_SIZE;    if (nsz > marklimit)     nsz=marklimit;    byte nbuf[]=new byte[nsz];    System.arraycopy(buffer,0,nbuf,0,pos);    if (!bufUpdater.compareAndSet(this,buffer,nbuf)) {      throw new IOException("Stream closed");    }    buffer=nbuf;  }  count=pos;  int n=getInIfOpen().read(buffer,pos,buffer.length - pos);  if (n > 0)   count=n + pos;}  }
class C{  private static final Map<Id<Link>,Id<Zone>> parseL2ZMapping(String infile){  Map<Id<Link>,Id<Zone>> l2zMapping=new HashMap<>();  try {    FileReader fr=new FileReader(infile);    BufferedReader br=new BufferedReader(fr);    String curr_line;    while ((curr_line=br.readLine()) != null) {      String[] entries=curr_line.split("\t",-1);      Id<Link> lid=Id.create(entries[0],Link.class);      Id<Zone> zid=Id.create(entries[1],Zone.class);      l2zMapping.put(lid,zid);    }  } catch (  IOException e) {    throw new RuntimeException(e);  }  return l2zMapping;}  }
class C{  public static ArrayList<Integer> parsePorts(String mesosResourceString){  if (mesosResourceString == null) {    throw new MinimesosException("Resource string is null");  }  String portRangeString=mesosResourceString.replaceAll(".*ports\\(.+\\):\\[(.*)\\].*","$1");  ArrayList<String> portRanges=new ArrayList<>(Arrays.asList(portRangeString.split(",")));  ArrayList<Integer> returnList=new ArrayList<>();  for (  String portRange : portRanges) {    if (!portRange.matches("\\d+-\\d+")) {      throw new MinimesosException("Resource string '" + mesosResourceString + "' is incorrect. We only support a single port range.");    }    String[] ports=portRange.split("-");    int startPort=Integer.valueOf(ports[0]);    int endPort=Integer.valueOf(ports[1]);    if (startPort > endPort) {      throw new MinimesosException("Incorrect port range. Start port " + startPort + " is greater than end port "+ endPort);    }    for (int i=startPort; i <= endPort; i++) {      returnList.add(i);    }  }  return returnList;}  }
class C{  public void childrenAdded(BeanContextMembershipEvent bcme){  findAndInit(bcme.iterator());}  }
class C{  public String toString(){  return detail.toString();}  }
class C{  public JSONWriter value(Object object) throws JSONException {  return this.append(JSONObject.valueToString(object));}  }
class C{  private Message obtainMessageWithArg2(Message srcMsg){  Message msg=Message.obtain();  msg.arg2=srcMsg.arg2;  return msg;}  }
class C{  public Revision next(){  try {    Revision revision=new Revision(result.getInt(2));    this.primaryKey=result.getInt(1);    revision.setPrimaryKey(this.primaryKey);    revision.setRevisionID(result.getInt(3));    revision.setArticleID(result.getInt(4));    revision.setTimeStamp(new Timestamp(result.getLong(5)));    revision.setFullRevisionID(result.getInt(6));    return revision;  } catch (  Exception e) {    e.printStackTrace();    throw new RuntimeException(e);  }}  }
class C{  private void matchQuotedString() throws ParserException, IOException {  match(DOUBLEQUOTE);}  }
class C{  private MapUtils(){  throw new AssertionError(MapUtils.class.getName() + " is non-instantiable");}  }
class C{  public NetworkResponse(int statusCode,byte[] data,Map<String,String> headers,boolean notModified,long networkTimeMs){  this.statusCode=statusCode;  this.data=data;  this.headers=headers;  this.notModified=notModified;  this.networkTimeMs=networkTimeMs;}  }
class C{  public final void sendRequest() throws IOException {  if (responseSource != null) {    return;  }  prepareRawRequestHeaders();  initResponseSource();  OkResponseCache responseCache=client.getOkResponseCache();  if (responseCache != null) {    responseCache.trackResponse(responseSource);  }  if (requestHeaders.isOnlyIfCached() && responseSource.requiresConnection()) {    if (responseSource == ResponseSource.CONDITIONAL_CACHE) {      Util.closeQuietly(cachedResponseBody);    }    this.responseSource=ResponseSource.CACHE;    this.cacheResponse=GATEWAY_TIMEOUT_RESPONSE;    RawHeaders rawResponseHeaders=RawHeaders.fromMultimap(cacheResponse.getHeaders(),true);    setResponse(new ResponseHeaders(uri,rawResponseHeaders),cacheResponse.getBody());  }  if (responseSource.requiresConnection()) {    sendSocketRequest();  } else   if (connection != null) {    client.getConnectionPool().recycle(connection);    connection=null;  }}  }
class C{  BigIntPolynomial(BigInteger[] coeffs){  this.coeffs=coeffs;}  }
class C{  @Override public int isProvidingWeakPower(IBlockAccess par1IBlockAccess,int x,int y,int z,int side){  TileEntity tileEntity=par1IBlockAccess.getTileEntity(x,y,z);  if (tileEntity instanceof IRedstoneProvider) {    return ((IRedstoneProvider)tileEntity).isIndirectlyPoweringTo(ForgeDirection.getOrientation(side)) ? 15 : 0;  }  return 0;}  }
class C{  private static PendingIntent createBroadcastMailIntent(Context context,long eventId,String eventTitle){  String syncAccount=null;  Cursor eventCursor=getEventCursor(context,eventId);  try {    if (eventCursor != null && eventCursor.moveToFirst()) {      syncAccount=eventCursor.getString(EVENT_INDEX_ACCOUNT_NAME);    }  }  finally {    if (eventCursor != null) {      eventCursor.close();    }  }  Cursor attendeesCursor=getAttendeesCursor(context,eventId);  try {    if (attendeesCursor != null && attendeesCursor.moveToFirst()) {      do {        String email=attendeesCursor.getString(ATTENDEES_INDEX_EMAIL);        if (Utils.isEmailableFrom(email,syncAccount)) {          Intent broadcastIntent=new Intent(MAIL_ACTION);          broadcastIntent.setClass(context,AlertReceiver.class);          broadcastIntent.putExtra(EXTRA_EVENT_ID,eventId);          return PendingIntent.getBroadcast(context,Long.valueOf(eventId).hashCode(),broadcastIntent,PendingIntent.FLAG_CANCEL_CURRENT);        }      } while (attendeesCursor.moveToNext());    }    return null;  }  finally {    if (attendeesCursor != null) {      attendeesCursor.close();    }  }}  }
class C{  private void removeVolumeFromConsistencyGroup(final StorageSystem storage,BlockConsistencyGroup cg,final Volume volume) throws Exception {  CloseableIterator<CIMObjectPath> assocVolNamesIter=null;  try {    String groupName=_helper.getConsistencyGroupName(volume,storage);    CIMObjectPath cgPath=_cimPath.getConsistencyGroupPath(storage,groupName);    CIMInstance cgInstance=_helper.checkExists(storage,cgPath,false,false);    if (cgInstance != null) {      boolean volumeIsInGroup=false;      assocVolNamesIter=_helper.getAssociatorNames(storage,cgPath,null,SmisConstants.CIM_STORAGE_VOLUME,null,null);      while (assocVolNamesIter.hasNext()) {        CIMObjectPath assocVolPath=assocVolNamesIter.next();        String deviceId=assocVolPath.getKey(SmisConstants.CP_DEVICE_ID).getValue().toString();        if (deviceId.equalsIgnoreCase(volume.getNativeId())) {          volumeIsInGroup=true;          break;        }      }      if (volumeIsInGroup) {        removeVolumesFromCG(storage,cg,cgPath,new String[]{volume.getNativeId()});      } else {        _log.info("Volume {} is no longer in the replication group {}",volume.getNativeId(),cgPath.toString());      }    } else {      _log.warn("The Consistency Group {} does not exist on the array.",groupName);    }  } catch (  Exception e) {    _log.error("Problem making SMI-S call: ",e);    throw e;  } finally {    if (assocVolNamesIter != null) {      assocVolNamesIter.close();    }  }}  }
class C{  protected SubsystemSuspensionLevels(){  super(null);}  }
class C{  public static Map<String,Object> processWorkEffortEventReminders(DispatchContext ctx,Map<String,? extends Object> context){  Delegator delegator=ctx.getDelegator();  LocalDispatcher dispatcher=ctx.getDispatcher();  Locale localePar=(Locale)context.get("locale");  Timestamp now=new Timestamp(System.currentTimeMillis());  List<GenericValue> eventReminders=null;  try {    eventReminders=EntityQuery.use(delegator).from("WorkEffortEventReminder").where(EntityCondition.makeCondition(UtilMisc.<EntityCondition>toList(EntityCondition.makeCondition("reminderDateTime",EntityOperator.EQUALS,null),EntityCondition.makeCondition("reminderDateTime",EntityOperator.LESS_THAN_EQUAL_TO,now)),EntityOperator.OR)).queryList();  } catch (  GenericEntityException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"WorkEffortEventRemindersRetrivingError",UtilMisc.toMap("errorString",e),localePar));  }  for (  GenericValue reminder : eventReminders) {    if (UtilValidate.isEmpty(reminder.get("contactMechId"))) {      continue;    }    int repeatCount=reminder.get("repeatCount") == null ? 0 : reminder.getLong("repeatCount").intValue();    int currentCount=reminder.get("currentCount") == null ? 0 : reminder.getLong("currentCount").intValue();    GenericValue workEffort=null;    try {      workEffort=reminder.getRelatedOne("WorkEffort",false);    } catch (    GenericEntityException e) {      Debug.logWarning("Error while getting work effort: " + e,module);    }    if (workEffort == null) {      try {        reminder.remove();      } catch (      GenericEntityException e) {        Debug.logWarning("Error while removing work effort event reminder: " + e,module);      }      continue;    }    Locale locale=reminder.getString("localeId") == null ? Locale.getDefault() : new Locale(reminder.getString("localeId"));    TimeZone timeZone=reminder.getString("timeZoneId") == null ? TimeZone.getDefault() : TimeZone.getTimeZone(reminder.getString("timeZoneId"));    Map<String,Object> parameters=UtilMisc.toMap("locale",locale,"timeZone",timeZone,"workEffortId",reminder.get("workEffortId"));    Map<String,Object> processCtx=UtilMisc.toMap("reminder",reminder,"bodyParameters",parameters,"userLogin",context.get("userLogin"));    Calendar cal=UtilDateTime.toCalendar(now,timeZone,locale);    Timestamp reminderStamp=reminder.getTimestamp("reminderDateTime");    Date eventDateTime=workEffort.getTimestamp("estimatedStartDate");    String tempExprId=workEffort.getString("tempExprId");    if (UtilValidate.isNotEmpty(tempExprId)) {      TemporalExpression temporalExpression=null;      try {        temporalExpression=TemporalExpressionWorker.getTemporalExpression(delegator,tempExprId);      } catch (      GenericEntityException e) {        Debug.logWarning("Error while getting temporal expression, id = " + tempExprId + ": "+ e,module);      }      if (temporalExpression != null) {        eventDateTime=temporalExpression.first(cal).getTime();        Date reminderDateTime=null;        long reminderOffset=reminder.get("reminderOffset") == null ? 0 : reminder.getLong("reminderOffset").longValue();        if (reminderStamp == null) {          if (reminderOffset != 0) {            cal.setTime(eventDateTime);            TimeDuration duration=TimeDuration.fromLong(reminderOffset);            duration.addToCalendar(cal);            reminderDateTime=cal.getTime();          } else {            reminderDateTime=eventDateTime;          }        } else {          reminderDateTime=new Date(reminderStamp.getTime());        }        if (reminderDateTime.before(now) && reminderStamp != null) {          try {            parameters.put("eventDateTime",new Timestamp(eventDateTime.getTime()));            dispatcher.runSync("processWorkEffortEventReminder",processCtx);            if (repeatCount != 0 && currentCount + 1 >= repeatCount) {              reminder.remove();            } else {              cal.setTime(reminderDateTime);              Date newReminderDateTime=null;              if (reminderOffset != 0) {                TimeDuration duration=TimeDuration.fromLong(-reminderOffset);                duration.addToCalendar(cal);                cal.setTime(temporalExpression.next(cal).getTime());                duration=TimeDuration.fromLong(reminderOffset);                duration.addToCalendar(cal);                newReminderDateTime=cal.getTime();              } else {                newReminderDateTime=temporalExpression.next(cal).getTime();              }              reminder.set("currentCount",Long.valueOf(currentCount + 1));              reminder.set("reminderDateTime",new Timestamp(newReminderDateTime.getTime()));              reminder.store();            }          } catch (          GenericEntityException e) {            Debug.logWarning("Error while processing temporal expression reminder, id = " + tempExprId + ": "+ e,module);          }catch (          GenericServiceException e) {            Debug.logError(e,module);          }        } else         if (reminderStamp == null) {          try {            reminder.set("reminderDateTime",new Timestamp(reminderDateTime.getTime()));            reminder.store();          } catch (          GenericEntityException e) {            Debug.logWarning("Error while processing temporal expression reminder, id = " + tempExprId + ": "+ e,module);          }        }      }      continue;    }    if (reminderStamp != null) {      Date reminderDateTime=new Date(reminderStamp.getTime());      if (reminderDateTime.before(now)) {        try {          parameters.put("eventDateTime",eventDateTime);          dispatcher.runSync("processWorkEffortEventReminder",processCtx);          TimeDuration duration=TimeDuration.fromNumber(reminder.getLong("repeatInterval"));          if ((repeatCount != 0 && currentCount + 1 >= repeatCount) || duration.isZero()) {            reminder.remove();          } else {            cal.setTime(now);            duration.addToCalendar(cal);            reminderDateTime=cal.getTime();            reminder.set("currentCount",Long.valueOf(currentCount + 1));            reminder.set("reminderDateTime",new Timestamp(reminderDateTime.getTime()));            reminder.store();          }        } catch (        GenericEntityException e) {          Debug.logWarning("Error while processing event reminder: " + e,module);        }catch (        GenericServiceException e) {          Debug.logError(e,module);        }      }    }  }  return ServiceUtil.returnSuccess();}  }
class C{  private void resetUserParameters(){  try {    if (null == m_userParams)     return;    int n=m_userParams.size();    for (int i=n - 1; i >= 0; i--) {      Arg arg=(Arg)m_userParams.elementAt(i);      QName name=arg.getQName();      String s1=name.getNamespace();      String s2=name.getLocalPart();      setParameter(s2,s1,arg.getVal().object());    }  } catch (  java.util.NoSuchElementException nsee) {  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:30.334 -0500",hash_original_method="3C6E7329283D3C6C46FB3F90EF65A4A7",hash_generated_method="DF69A7831BD134C7DE03F61A47C2BF23") final public boolean isInLayout(){  return mInLayout;}  }
class C{  public static void encodeToFile(byte[] dataToEncode,String filename) throws java.io.IOException {  if (dataToEncode == null) {    throw new NullPointerException("Data to encode was null.");  }  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.ENCODE);    bos.write(dataToEncode);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
class C{  protected void NCName(){  m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),m_queueMark - 1);  m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);  nextToken();}  }
class C{  public String addStepForRemoveVolumesFromCG(Workflow workflow,String waitFor,StorageSystem vplexSystem,List<URI> volumes,URI cgURI){  URI vplexURI=vplexSystem.getId();  Workflow.Method removeMethod=createRemoveVolumesFromCGMethod(vplexURI,cgURI,volumes);  Workflow.Method removeRollbackMethod=createAddVolumesToCGMethod(vplexURI,cgURI,volumes);  waitFor=workflow.createStep(REMOVE_VOLUMES_FROM_CG_STEP,String.format("Removing volumes %s from consistency group %s on VPLEX %s",volumes,cgURI,vplexURI),waitFor,vplexURI,vplexSystem.getSystemType(),this.getClass(),removeMethod,removeRollbackMethod,null);  log.info("Created step for remove volumes from consistency group.");  return waitFor;}  }
class C{  public Map<MetricName,Metric> allMetrics(){  return Collections.unmodifiableMap(metrics);}  }
class C{  @Action(value="/receipts/collectionsWorkflow-rejectCollections") public String rejectCollections(){  wfAction=CollectionConstants.WF_ACTION_REJECT;  return updateReceiptWorkflowStatus(wfAction,remarks);}  }
class C{  public Set<P> generateCloud(int N){  Set<P> samples=new LinkedHashSet<P>();  Integer[] indexes=new Integer[N];  for (int i=0; i < N; i++) {    samples.add(map.randomPose());    indexes[i]=i;  }  sampleIndexes=new RandVar(SAMPLE_INDEXES_NAME,new FiniteIntegerDomain(indexes));  return samples;}  }
class C{  public static ConsoleProgressBar on(final PrintStream streamToUse){  Preconditions.checkNotNull(streamToUse);  return new ConsoleProgressBar(streamToUse,DEFAULT_STEPS,DEFAULT_FORMAT,DEFAULT_REPLACERS);}  }
class C{  public HadoopIgfsCommunicationException(Exception cause){  super(cause);}  }
class C{  public T id(int id){  return id(findView(id));}  }
class C{  protected Audit(){}  }
class C{  public MultiHashMap(){  this(false);}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public void print(final CharSequence text) throws IOException {  final int size=text.length();  int pos=0;  for (int i=0; i < size; i++) {    if (text.charAt(i) == '\n') {      write(text.subSequence(pos,size),i - pos + 1);      pos=i + 1;      atStartOfLine=true;    }  }  write(text.subSequence(pos,size),size - pos);}  }
class C{  protected Expression lt(int opPos) throws TransformerException {  return compileOperation(new Lt(),opPos);}  }
class C{  public final boolean isMsgRateMergeSource(){  return m_isMsgRateMergeSource;}  }
class C{  public void init(int size,int typeproc,SecureRandom random){  this.size=size;  this.typeproc=typeproc;  this.init_random=random;}  }
class C{  public Impp(URI uri){  setUri(uri);}  }
class C{  public void flush(){  remainEvents.clear();}  }
class C{  @Override public void stop(){  log.info("Stop the MqttSourceConnector");}  }
class C{  private void viewTrace(){  createLogWindow("guiButtonViewTrace",m_traceLog,Color.BLACK);}  }
class C{  public static int beU1(byte[] data,int bci){  return data[bci] & 0xff;}  }
class C{  protected final Class<?> defineClass(String className,byte[] classRep,int offset,int length) throws ClassFormatError {  return defineClass(className,classRep,offset,length,null);}  }
class C{  protected Object evaluateSingle(List elements,String expr){  List array;  if (elements instanceof java.util.Vector) {    array=new java.util.Vector();  } else {    array=new ArrayList();  }  for (Iterator e=elements.iterator(); e.hasNext(); ) {    Object o=e.next();    if (o instanceof StructuredContent) {      if ((o=evaluateSingle((StructuredContent)o,expr)) != null) {        array.add(o);      }    }  }  if (array.size() == 1) {    return (StructuredContent)array.get(0);  }  return array;}  }
class C{  public boolean relative(int rows) throws SQLException {  boolean retval;  boolean bool=false;  boolean boolval=false;  if (getType() == ResultSet.TYPE_FORWARD_ONLY) {    throw new SQLException(resBundle.handleGetObject("filteredrowsetimpl.relative").toString());  }  if (rows > 0) {    int i=0;    while (i < (rows)) {      if (isAfterLast()) {        return false;      }      bool=internalNext();      i++;    }    retval=bool;  } else {    int j=rows;    while ((j) < 0) {      if (isBeforeFirst()) {        return false;      }      boolval=internalPrevious();      j++;    }    retval=boolval;  }  if (rows != 0)   notifyCursorMoved();  return retval;}  }
class C{  public String toString(){  return "BlobIV(" + hashCode() + ":"+ counter()+ ":"+ getVTE().getCharCode()+ ")";}  }
class C{  public HDSHost registerHost(HDSHost hdshost,List<String> portWWNList,String initiatorType) throws Exception {  String addHostQueryWithParams=null;  InputStream responseStream=null;  HDSHost registeredhost=null;  try {    if (initiatorType.equalsIgnoreCase(HDSConstants.FC)) {      addHostQueryWithParams=constructAddFCInitiatorHostQuery(hdshost,portWWNList);    } else     if (initiatorType.equalsIgnoreCase(HDSConstants.ISCSI)) {      addHostQueryWithParams=constructAddiSCSIInitiatorHostQuery(hdshost,portWWNList);    }    log.info("Query to Add host: {}",addHostQueryWithParams);    URI endpointURI=hdsApiClient.getBaseURI();    ClientResponse response=hdsApiClient.post(endpointURI,addHostQueryWithParams);    if (HttpStatus.SC_OK == response.getStatus()) {      responseStream=response.getEntityInputStream();      JavaResult javaResult=SmooksUtil.getParsedXMLJavaResult(responseStream,HDSConstants.HOST_INFO_SMOOKS_CONFIG_FILE);      EchoCommand command=javaResult.getBean(EchoCommand.class);      if (null == command || null == command.getStatus() || HDSConstants.FAILED_STR.equalsIgnoreCase(command.getStatus())) {        Error error=javaResult.getBean(Error.class);        if (error.getCode() == HDSConstants.HOST_ALREADY_EXISTS) {          log.info("The host {} already exists on DeviceManager",hdshost.getName());          return registeredhost;        } else         if (error.getCode() == HDSConstants.HOST_PORT_WWN_ALREADY_EXISTS) {          log.info("The WWN is already in use by another host");          return registeredhost;        } else {          log.error("Error response received for messageID",command.getMessageID());          log.error("command failed with error code: {} with message {}",error.getCode(),error.getDescription());          throw HDSException.exceptions.notAbleToAddHostToDeviceManager(hdshost.getName());        }      }      registeredhost=javaResult.getBean(HDSHost.class);      if (null == registeredhost) {        throw HDSException.exceptions.notAbleToAddHostToDeviceManager(String.format("Not able to add host:%1$s to Device manager",hdshost.getName()));      }    } else {      throw HDSException.exceptions.invalidResponseFromHDS(String.format("Add Host to Device Manager failed due to invalid response %1$s from server",response.getStatus()));    }  }  finally {    if (null != responseStream) {      try {        responseStream.close();      } catch (      IOException e) {        log.warn("IOException occurred while closing the response stream");      }    }  }  return registeredhost;}  }
class C{  protected static void save(final MultipartFile file) throws IOException {  final File saveFile=new File(SystemUtils.CURRENT_DIRECTORY,file.getOriginalFilename());  FileOutputStream fileWriter=null;  try {    fileWriter=new FileOutputStream(saveFile,false);    fileWriter.write(file.getBytes());    fileWriter.flush();  }  finally {    IOUtils.close(fileWriter);  }}  }
class C{  private void replace(Operator operator){  List<Operator> selection=RapidMinerGUI.getMainFrame().getSelectedOperators();  if (selection.isEmpty()) {    return;  }  Operator selectedOperator=selection.get(0);  ExecutionUnit parent=selectedOperator.getExecutionUnit();  if (parent == null) {    return;  }  Map<String,InputPort> inputPortMap=new HashMap<String,InputPort>();  Map<String,OutputPort> outputPortMap=new HashMap<String,OutputPort>();  for (  OutputPort source : selectedOperator.getOutputPorts().getAllPorts()) {    if (source.isConnected()) {      inputPortMap.put(source.getName(),source.getDestination());      source.lock();      source.getDestination().lock();    }  }  for (  InputPort sink : selectedOperator.getInputPorts().getAllPorts()) {    if (sink.isConnected()) {      outputPortMap.put(sink.getName(),sink.getSource());      sink.lock();      sink.getSource().lock();    }  }  selectedOperator.getOutputPorts().disconnectAll();  selectedOperator.getInputPorts().disconnectAll();  int failedReconnects=0;  if ((selectedOperator instanceof OperatorChain) && (operator instanceof OperatorChain)) {    OperatorChain oldChain=(OperatorChain)selectedOperator;    OperatorChain newChain=(OperatorChain)operator;    int numCommonSubprocesses=Math.min(oldChain.getNumberOfSubprocesses(),newChain.getNumberOfSubprocesses());    for (int i=0; i < numCommonSubprocesses; i++) {      ExecutionUnit oldSubprocess=oldChain.getSubprocess(i);      ExecutionUnit newSubprocess=newChain.getSubprocess(i);      failedReconnects+=newSubprocess.stealOperatorsFrom(oldSubprocess);    }  }  int oldPos=parent.getOperators().indexOf(selectedOperator);  selectedOperator.remove();  parent.addOperator(operator,oldPos);  for (  Map.Entry<String,InputPort> entry : inputPortMap.entrySet()) {    OutputPort mySource=operator.getOutputPorts().getPortByName(entry.getKey());    if (mySource != null) {      mySource.connectTo(entry.getValue());      mySource.unlock();      entry.getValue().unlock();    } else {      failedReconnects++;    }  }  for (  Map.Entry<String,OutputPort> entry : outputPortMap.entrySet()) {    InputPort mySink=operator.getInputPorts().getPortByName(entry.getKey());    if (mySink != null) {      entry.getValue().connectTo(mySink);      entry.getValue().unlock();      mySink.unlock();    } else {      failedReconnects++;    }  }  RapidMinerGUI.getMainFrame().selectOperator(operator.getParent());  if (failedReconnects > 0) {    SwingTools.showVerySimpleErrorMessage("op_replaced_failed_connections_restored",failedReconnects);  }}  }
class C{  public static <T,X extends Throwable>Subscription forEachX(final Stream<T> stream,final long x,final Consumer<? super T> consumerElement){  val t2=FutureStreamUtils.forEachX(stream,x,consumerElement);  t2.v2.run();  return t2.v1.join();}  }
class C{  private static void writeParameters(ObjectOutputStream out,Class<?>[] parms) throws IOException {  out.writeShort(parms.length);  outer:   for (int i=0; i < parms.length; i++) {    Class<?> parm=parms[i];    boolean primitive=parm.isPrimitive();    out.writeBoolean(primitive);    if (!primitive) {      out.writeObject(parm);      continue;    }    for (int j=0; j < primitives.length; j++) {      if (parm.equals(primitives[j])) {        out.writeByte(j);        continue outer;      }    }    throw new IllegalArgumentException("Primitive " + parm + " not found");  }}  }
class C{  private void doDdpOrientation(Node d,Node a,Node b,Node c){  List<Node> sepset=this.sepsets.get(d,c);  if (sepset == null)   return;  if (sepset == null) {    throw new IllegalArgumentException("The edge from d to c must have " + "been removed at this point.");  }  if (sepset.contains(b)) {    graph.setEndpoint(c,b,Endpoint.TAIL);    logger.log("impliedOrientations",SearchLogUtils.edgeOrientedMsg("Definite discriminating path d = " + d,graph.getEdge(b,c)));    changeFlag=true;  } else {    if (!isArrowpointAllowed(a,b)) {      return;    }    if (!isArrowpointAllowed(c,b)) {      return;    }    graph.setEndpoint(a,b,Endpoint.ARROW);    graph.setEndpoint(c,b,Endpoint.ARROW);    logger.log("colliderOrientations",SearchLogUtils.colliderOrientedMsg("Definite discriminating path.. d = " + d,a,b,c));    changeFlag=true;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:15.212 -0400",hash_original_method="E84A510853D9F9659F34649D5E631E14",hash_generated_method="27B627B6254ECDC4FF6A66989D9E021E") private boolean findNodeFromTail(Node node){  Node t=tail;  for (; ; ) {    if (t == node)     return true;    if (t == null)     return false;    t=t.prev;  }}  }
class C{  public boolean isValid(INode n){  FreeCellNode state=(FreeCellNode)n;  Column from=state.cols[fromCol];  if (from.num == 0)   return false;  card=from.cards[from.num - num];  int suit=((card - 1) % 4);  int rank=1 + ((card - 1) >> 2);  boolean isBlackCard=(suit == FreeCellNode.CLUBS || suit == FreeCellNode.SPADES);  Column to=state.cols[toCol];  if (num > 1) {    if (num > state.numberVacant() + 1) {      return false;    }    if ((num == state.numberVacant() + 1) && to.num == 0) {      return false;    }  }  if (to.num == 0)   return true;  int tr=to.rank();  return (isBlackCard != to.isBlack()) && (rank == (tr - 1));}  }
class C{  GenerateWriterVisitor(TypeResolver resolver,MethodSpec.Builder write,String proto,String subject,Field field){  this.resolver=resolver;  this.write=write;  this.proto=proto;  nameStack.push(subject + "." + field.name());}  }
class C{  public final void closeControl(){  if (!shell.isDisposed()) {    shell.close();  }}  }
class C{  public void incrementProgress(){  incrementProgress(1);}  }
class C{  public void addActionListener(ActionListener l){  dispatcher.addListener(l);}  }
class C{  public ObjectFactory(){}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writeStroke(this.separatorStroke,stream);  SerialUtilities.writePaint(this.separatorPaint,stream);}  }
class C{  public FireworkEffectBuilder withColor(Color... colors) throws IllegalArgumentException {  Validate.notNull(colors,"Colors can't be null");  for (  Color color : colors) {    this.colors.add(color);  }  return this;}  }
class C{  protected boolean isAnArea(ArrayList<GeoPoint> coords){  return (coords != null) && (coords.size() >= 3) && (coords.get(0).equals(coords.get(coords.size() - 1)));}  }
class C{  public RecentFilesHandler(String propsFile,String propPrefix,int maxCount,M menu){  super(propsFile,propPrefix,maxCount,menu);}  }
class C{  public static Closeable tryAcquireLock(final File lockFile){  FileLockHandle handle=null;  try {    handle=new FileLockHandle(lockFile);    for (int i=0; i < 5; ++i) {      if (handle.tryLock()) {        return handle;      }      ExceptionUtils.propagateVoid(null);    }    return null;  } catch (  final IOException|OverlappingFileLockException e) {    return null;  } finally {    if (null != handle && null == handle.lock) {      try {        handle.close();      } catch (      final IOException ignored) {      }    }  }}  }
class C{  public void checkLogicalSwitchExistence(String id,FutureCallback<Boolean> responseCallback) throws IOException {  checkExistenceAsync(LOGICAL_SWITCHS_BASE_PATH + "/" + id,responseCallback);}  }
class C{  public WHERE WHERE(String condition){  return new WHERE(this,condition);}  }
class C{  public VNXeCommandJob createLunsInLunGroup(List<String> names,String poolId,Long size,boolean isThin,String tieringPolicy,String lunGroupId){  _logger.info("creating luns in the lun group: {}",lunGroupId);  LunGroupModifyParam param=new LunGroupModifyParam();  List<LunCreateParam> lunCreates=new ArrayList<LunCreateParam>();  boolean isPolicyOn=false;  FastVPParam fastVP=new FastVPParam();  if (tieringPolicy != null && !tieringPolicy.isEmpty()) {    TieringPolicyEnum tierValue=TieringPolicyEnum.valueOf(tieringPolicy);    if (tierValue != null) {      fastVP.setTieringPolicy(tierValue.getValue());      isPolicyOn=true;    }  }  for (  String lunName : names) {    LunParam lunParam=new LunParam();    lunParam.setIsThinEnabled(isThin);    lunParam.setSize(size);    lunParam.setPool(new VNXeBase(poolId));    LunCreateParam createParam=new LunCreateParam();    createParam.setName(lunName);    createParam.setLunParameters(lunParam);    if (isPolicyOn) {      lunParam.setFastVPParameters(fastVP);    }    lunCreates.add(createParam);  }  param.setLunCreate(lunCreates);  LunGroupRequests req=new LunGroupRequests(_khClient);  return req.modifyLunGroupAsync(lunGroupId,param);}  }
class C{  public void lock(){  if (!VM.runningVM)   return;  VM.disableYieldpoints();  RVMThread i=RVMThread.getCurrentThread();  RVMThread p;  int attempts=0;  Offset latestContenderOffset=Entrypoints.latestContenderField.getOffset();  do {    p=Magic.objectAsThread(Magic.addressAsObject(Magic.prepareAddress(this,latestContenderOffset)));    if (p == null) {      if (Magic.attemptAddress(this,latestContenderOffset,Address.zero(),Magic.objectAsAddress(i))) {        Magic.isync();        return;      } else {        continue;      }    } else     if (MCS_Locking && Magic.objectAsAddress(p).NE(IN_FLUX)) {      if (Magic.attemptAddress(this,latestContenderOffset,Magic.objectAsAddress(p),IN_FLUX)) {        Magic.isync();        break;      }    }    handleMicrocontention(attempts++);  } while (true);  if (VM.VerifyAssertions && !MCS_Locking)   VM._assert(VM.NOT_REACHED);  i.awaitingSpinLock=this;  if (p.awaitingSpinLock != this) {    i.contenderLink=i;  } else {    i.contenderLink=p.contenderLink;    p.contenderLink=i;  }  Magic.sync();  Magic.setObjectAtOffset(this,latestContenderOffset,i);  do {    Magic.isync();  } while (i.awaitingSpinLock == this);}  }
class C{  private ArrayList<String> extractNGrams(){  ArrayList<String> list=new ArrayList<String>();  NGram ngram=new NGram();  for (int i=0; i < text.length(); ++i) {    ngram.addChar(text.charAt(i));    for (int n=1; n <= NGram.N_GRAM; ++n) {      String w=ngram.get(n);      if (w != null && wordLangProbMap.containsKey(w))       list.add(w);    }  }  return list;}  }
class C{  private void handleAutoNumbersForAdd(Object[] row,WriteRowState writeRowState) throws IOException {  if (_autoNumColumns.isEmpty()) {    return;  }  boolean enableInsert=isAllowAutoNumberInsert();  writeRowState.resetAutoNumber();  for (  ColumnImpl col : _autoNumColumns) {    Object inRowValue=getInputAutoNumberRowValue(enableInsert,col,row);    ColumnImpl.AutoNumberGenerator autoNumGen=col.getAutoNumberGenerator();    Object rowValue=((inRowValue == null) ? autoNumGen.getNext(writeRowState) : autoNumGen.handleInsert(writeRowState,inRowValue));    col.setRowValue(row,rowValue);  }}  }
class C{  protected void connected(Connection connection){  policy.setSelectedProxy(connection.getRoute().getProxy());  connected=true;}  }
class C{  public boolean includeMatches(String formattedStackTrace){  return matches(includePattern,formattedStackTrace);}  }
class C{  private void testPyDMLImplicitSlicingBounds(String testName){  getAndLoadTestConfiguration(testName);  String HOME=SCRIPT_DIR + TEST_DIR;  fullDMLScriptName=HOME + testName + ".pydml";  programArgs=new String[]{"-python","-args",input(INPUT_NAME),output(OUTPUT_NAME_IMPLICIT),output(OUTPUT_NAME_EXPLICIT)};  double[][] X=getRandomMatrix(rows,cols,-1,1,sparsity,7);  writeInputMatrixWithMTD(INPUT_NAME,X,true);  runTest(true,false,null,-1);  HashMap<CellIndex,Double> pydmlImplicit=readDMLMatrixFromHDFS(OUTPUT_NAME_IMPLICIT);  HashMap<CellIndex,Double> pydmlExplicit=readDMLMatrixFromHDFS(OUTPUT_NAME_EXPLICIT);  TestUtils.compareMatrices(pydmlImplicit,pydmlExplicit,eps,"Implicit","Explicit");}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node gender;  NodeList genList;  Node gen;  NodeList gList;  Node g;  NamedNodeMap attrList;  Attr attrNode;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  gender=genderList.item(2);  assertNotNull("genderNotNull",gender);  genList=gender.getChildNodes();  gen=genList.item(0);  assertNotNull("genderFirstChildNotNull",gen);  gList=gen.getChildNodes();  g=gList.item(0);  assertNotNull("genderFirstGrandchildNotNull",g);  attrList=g.getAttributes();  assertNotNull("attributesNotNull",attrList);  attrNode=(Attr)attrList.getNamedItem("domestic");  assertNotNull("attrNotNull",attrNode);{    boolean success=false;    try {      attrNode.setValue("newvalue");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("setValue_throws_NO_MODIFICATION",success);  }{    boolean success=false;    try {      attrNode.setNodeValue("newvalue2");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("setNodeValue_throws_NO_MODIFICATION",success);  }}  }
class C{  public CopyOnWriteArrayList(Object[] toCopyIn){  copyIn(toCopyIn,0,toCopyIn.length);}  }
class C{  private InstructionFinders(){}  }
class C{  static void svd_dsort2(int igap,int n,double[] array1,double[] array2){  double temp;  int i, j, index;  if (0 == igap)   return; else {    for (i=igap; i < n; i++) {      j=i - igap;      index=i;      while (j >= 0 && array1[j] > array1[index]) {        temp=array1[j];        array1[j]=array1[index];        array1[index]=temp;        temp=array2[j];        array2[j]=array2[index];        array2[index]=temp;        j-=igap;        index=j + igap;      }    }  }  svd_dsort2(igap / 2,n,array1,array2);}  }
class C{  public static Collection<InetSocketAddress> toSocketAddresses(ClusterNode node,int port){  return toSocketAddresses(node.addresses(),node.hostNames(),port);}  }
class C{  protected GamlDefinitionImpl(){  super();}  }
class C{  public static int compare(Object left,Date right) throws PageException {  if (left instanceof String)   return compare((String)left,right); else   if (left instanceof Number)   return compare(((Number)left).doubleValue(),right.getTime() / 1000); else   if (left instanceof Boolean)   return compare(((Boolean)left).booleanValue() ? 1D : 0D,right.getTime() / 1000); else   if (left instanceof Date)   return compare(((Date)left),right); else   if (left instanceof Castable) {    if (isComparableComponent((Castable)left))     return compareComponent((Castable)left,right);    return ((Castable)left).compareTo(Caster.toDatetime(right,null));  } else   if (left instanceof Locale)   return compare(((Locale)left),Caster.toString(right)); else   if (left == null)   return compare("",right); else   if (left instanceof Character)   return compare(((Character)left).toString(),right); else   if (left instanceof Calendar)   return compare(((Calendar)left).getTime(),right); else   if (left instanceof TimeZone)   return compare(((TimeZone)left),Caster.toString(right)); else   return error(false,true);}  }
class C{  void startLaunchTaskAnimation(Runnable postAnimRunnable){  startFadeAnimation(1f,0,mConfig.taskViewExitToAppDuration,postAnimRunnable);}  }
class C{  @Override public void renderLimitLines(Canvas c){}  }
class C{  public void init() throws ServletException {}  }
class C{  public T onload(String value){  return attr("onload",value);}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/deregister") @CheckPermission(roles={Role.TENANT_ADMIN}) public IpInterfaceRestRep deregisterIpInterface(@PathParam("id") URI id){  IpInterface ipInterface=queryResource(id);  ArgValidator.checkEntity(ipInterface,id,isIdEmbeddedInURL(id));  if (ComputeSystemHelper.isHostIpInterfacesInUse(_dbClient,Collections.singletonList(ipInterface.getIpAddress()),ipInterface.getHost())) {    throw APIException.badRequests.resourceHasActiveReferencesWithType(IpInterface.class.getSimpleName(),ipInterface.getId(),FileExport.class.getSimpleName());  }  if (RegistrationStatus.REGISTERED.toString().equalsIgnoreCase(ipInterface.getRegistrationStatus())) {    ipInterface.setRegistrationStatus(RegistrationStatus.UNREGISTERED.toString());    _dbClient.persistObject(ipInterface);    auditOp(OperationTypeEnum.DEREGISTER_HOST_IPINTERFACE,true,null,ipInterface.getLabel(),ipInterface.getId().toString());  }  return map(ipInterface);}  }
class C{  public SassString(String value,boolean quoted){  this.value=value;  this.quoted=quoted;}  }
class C{  public void ownedVersions(Map<IgniteTxKey,GridCacheVersion> vers){  if (F.isEmpty(vers))   return;  if (owned == null)   owned=new GridLeanMap<>(vers.size());  owned.putAll(vers);}  }
class C{  public boolean isConnected(){synchronized (isConnectedLock) {    return isConnected;  }}  }
class C{  public EncoderTestSuiteBuilder encode(final String expected,final String input){  return encode("input: " + input,expected,input);}  }
class C{  public OMWarpingImage(BufferedImage bi,GeoCoordTransformation transform,DataBounds imageBounds){  setWarp(bi,transform,imageBounds);}  }
class C{  private void readNotMissingEntry(DataSetRow dataRow,String[] row,int columnIndex,int rowIndex,final ColumnType columnType,Map<Integer,Set<Integer>> errorCells){  try {switch (columnType) {case DATE:      row[columnIndex]=Tools.formatDate(dataRow.getDate(columnIndex));    break;case DATETIME:  row[columnIndex]=Tools.formatDateTime(dataRow.getDate(columnIndex));break;case TIME:row[columnIndex]=Tools.formatTime(dataRow.getDate(columnIndex));break;case REAL:row[columnIndex]=Tools.formatNumber(dataRow.getDouble(columnIndex));break;case INTEGER:row[columnIndex]=Tools.formatIntegerIfPossible(Math.round(dataRow.getDouble(columnIndex)));break;case CATEGORICAL:row[columnIndex]=DefaultPreview.shortenDisplayValue(dataRow.getString(columnIndex));break;case BINARY:String value=dataRow.getString(columnIndex);final Set<String> binaryEntries=binaryMapping.get(columnIndex);if (binaryEntries.size() == 2 && !binaryEntries.contains(value)) {throw new ParseException(ALREADY_TWO_BINARY_VALUES + binaryEntries.toString());} else {binaryEntries.add(value);row[columnIndex]=DefaultPreview.shortenDisplayValue(value);}break;default :break;}} catch (ParseException e) {row[columnIndex]=null;String originalValue=null;if (columnType != ColumnType.CATEGORICAL) {try {originalValue=dataRow.getString(columnIndex);} catch (ParseException e1) {originalValue=null;}}parsingErrorList.add(new ParsingError(columnIndex,rowIndex,originalValue,e.getMessage()));Set<Integer> errors=errorCells.get(columnIndex);if (errors != null) {errors.add(rowIndex);} else {Set<Integer> errorRows=new HashSet<>();errorRows.add(rowIndex);errorCells.put(columnIndex,errorRows);}}}  }
class C{  public tbody addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  @Override public String toString(){  return String.valueOf(value);}  }
class C{  public CredentialExpiredException(){  super();}  }
class C{  private void initBPInvoiceDetails(int C_BPartner_ID){  log.config("C_BPartner_ID" + C_BPartner_ID);  invoiceField.removeActionListener(this);  invoiceField.removeAllItems();  KeyNamePair pp=new KeyNamePair(0,"");  invoiceField.addItem(pp);  ArrayList<KeyNamePair> list=loadInvoiceData(C_BPartner_ID);  for (  KeyNamePair knp : list)   invoiceField.addItem(knp);  invoiceField.setSelectedIndex(0);  invoiceField.addActionListener(this);  upcField.addActionListener(this);}  }
class C{  public boolean equals(String s){  return this.value.equals(s);}  }
class C{  public static String format(final Date date,final String pattern,final TimeZone timeZone,final Locale locale){  final FastDateFormat df=FastDateFormat.getInstance(pattern,timeZone,locale);  return df.format(date);}  }
class C{  @Override public boolean isCellEditable(int rowIndex,int columnIndex){  return (columnIndex > 0) && !isReadOnly();}  }
class C{  void startAnimation(){  if (getVisibility() != VISIBLE) {    return;  }  if (mIndeterminateDrawable instanceof Animatable) {    mShouldStartAnimationDrawable=true;    mAnimation=null;  } else {    if (mInterpolator == null) {      mInterpolator=new LinearInterpolator();    }    mTransformation=new Transformation();    mAnimation=new AlphaAnimation(0.0f,1.0f);    mAnimation.setRepeatMode(mBehavior);    mAnimation.setRepeatCount(Animation.INFINITE);    mAnimation.setDuration(mDuration);    mAnimation.setInterpolator(mInterpolator);    mAnimation.setStartTime(Animation.START_ON_FIRST_FRAME);  }  postInvalidate();}  }
class C{  public ConfigFormatException(){}  }
class C{  public BasicIseParserTest(String name){  super(name);}  }
class C{  public static boolean writeFile(String filePath,List<String> contentList){  return writeFile(filePath,contentList,false);}  }
class C{  public static TypeReference newTypeReference(int sort){  return new TypeReference(sort << 24);}  }
class C{  private KeyGeneratorSpi nextSpi(KeyGeneratorSpi oldSpi,boolean reinit){synchronized (lock) {    if ((oldSpi != null) && (oldSpi != spi)) {      return spi;    }    if (serviceIterator == null) {      return null;    }    while (serviceIterator.hasNext()) {      Service s=serviceIterator.next();      if (JceSecurity.canUseProvider(s.getProvider()) == false) {        continue;      }      try {        Object inst=s.newInstance(null);        if (inst instanceof KeyGeneratorSpi == false) {          continue;        }        KeyGeneratorSpi spi=(KeyGeneratorSpi)inst;        if (reinit) {          if (initType == I_SIZE) {            spi.engineInit(initKeySize,initRandom);          } else           if (initType == I_PARAMS) {            spi.engineInit(initParams,initRandom);          } else           if (initType == I_RANDOM) {            spi.engineInit(initRandom);          } else           if (initType != I_NONE) {            throw new AssertionError("KeyGenerator initType: " + initType);          }        }        provider=s.getProvider();        this.spi=spi;        return spi;      } catch (      Exception e) {      }    }    disableFailover();    return null;  }}  }
class C{  public void attrRemoved(Attr node,String oldv){  if (!changing) {    valid=false;  }  fireBaseAttributeListeners();  if (!hasAnimVal) {    fireAnimatedAttributeListeners();  }}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  private void gcspyGatherData(int event){  if (DEBUG) {    Log.writeln("SSGCspyMutator.gcspyGatherData, event=",event);    Log.writeln("SSGCspyMutator.gcspyGatherData, port=",GCspy.getGCspyPort());  }  if (GCspy.getGCspyPort() == 0)   return;  if (GCspy.server.isConnected(event)) {    if (DEBUG) {      if (SSGCspy.hi)       Log.write("\nMutator Examining Lowspace (event ",event); else       Log.write("\nMutator Examining Highspace (event ",event);      Log.write(")");      SSGCspy.reportSpaces();      Log.writeln();    }    if (event == SSGCspy.BEFORE_COLLECTION) {      GCspy.server.startCompensationTimer();      if (DEBUG) {        debugSpaces(SSGCspy.toSpace());        Log.write("SSGCspyMutator.gcspyGatherData reset, gather and transmit driver ");        Log.writeln(SSGCspy.toSpace().getName());      }      ss.gcspyGatherData(toSpaceDriver(),SSGCspy.toSpace());      gatherImmortal(event);      SSGCspy.losNurseryDriver.resetData();      los.gcspyGatherData(event,SSGCspy.losNurseryDriver);      SSGCspy.losDriver.resetData();      los.gcspyGatherData(event,SSGCspy.losDriver,LOS_TOSPACE);      GCspy.server.stopCompensationTimer();      toSpaceDriver().transmit(event);      SSGCspy.immortalDriver.transmit(event);      SSGCspy.losNurseryDriver.transmit(event);      SSGCspy.losDriver.transmit(event);      SSGCspy.plosNurseryDriver.transmit(event);      SSGCspy.plosDriver.transmit(event);      GCspy.server.serverSafepoint(event);    } else     if (event == SSGCspy.SEMISPACE_COPIED) {      if (DEBUG) {        debugSpaces(SSGCspy.fromSpace());        Log.writeln("SSGCspyMutator.gcspyGatherData: do nothing");      }      GCspy.server.startCompensationTimer();      gatherImmortal(event);      SSGCspy.losNurseryDriver.resetData();      los.gcspyGatherData(event,SSGCspy.losNurseryDriver);      SSGCspy.losDriver.resetData();      los.gcspyGatherData(event,SSGCspy.losDriver,LOS_FROMSPACE);      los.gcspyGatherData(event,SSGCspy.losDriver,LOS_TOSPACE);      GCspy.server.stopCompensationTimer();      SSGCspy.immortalDriver.transmit(event);      SSGCspy.losNurseryDriver.transmit(event);      SSGCspy.losDriver.transmit(event);      SSGCspy.plosNurseryDriver.transmit(event);      SSGCspy.plosDriver.transmit(event);      GCspy.server.serverSafepoint(event);    } else     if (event == SSGCspy.AFTER_COLLECTION) {      GCspy.server.startCompensationTimer();      if (DEBUG)       debugSpaces(SSGCspy.toSpace());      gatherImmortal(event);      SSGCspy.losNurseryDriver.resetData();      SSGCspy.losDriver.resetData();      los.gcspyGatherData(event,SSGCspy.losDriver,LOS_TOSPACE);      GCspy.server.stopCompensationTimer();      SSGCspy.immortalDriver.transmit(event);      SSGCspy.losNurseryDriver.transmit(event);      SSGCspy.losDriver.transmit(event);      SSGCspy.plosNurseryDriver.transmit(event);      SSGCspy.plosDriver.transmit(event);      if (DEBUG) {        Log.write("SSGCspyMutator.gcspyGatherData: reset and zero range for driver ");        Log.write(SSGCspy.toSpace().getName());      }    }  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:01.133 -0500",hash_original_method="0A468BF2FF018C04A055F46D2001401C",hash_generated_method="030E5997862439D9E8876001FF164B61") FileLoader(String url,LoadListener loadListener,int type,boolean allowFileAccess){  super(loadListener);  mType=type;  mAllowFileAccess=allowFileAccess;  int index=url.indexOf('?');  if (mType == TYPE_ASSET) {    mPath=index > 0 ? URLUtil.stripAnchor(url.substring(URLUtil.ASSET_BASE.length(),index)) : URLUtil.stripAnchor(url.substring(URLUtil.ASSET_BASE.length()));  } else   if (mType == TYPE_RES) {    mPath=index > 0 ? URLUtil.stripAnchor(url.substring(URLUtil.RESOURCE_BASE.length(),index)) : URLUtil.stripAnchor(url.substring(URLUtil.RESOURCE_BASE.length()));  } else {    mPath=index > 0 ? URLUtil.stripAnchor(url.substring(URLUtil.FILE_BASE.length(),index)) : URLUtil.stripAnchor(url.substring(URLUtil.FILE_BASE.length()));  }}  }
class C{  public void clear(){  size=0;  offset=0;  currentBufferIndex=-1;  currentBuffer=null;  buffersCount=0;}  }
class C{  void recordAccess(HashMap m){  LinkedHashMap lm=(LinkedHashMap)m;  if (lm.accessOrder) {    lm.modCount++;    remove();    addBefore(lm.header);  }}  }
class C{  public Producer<?> createProducer(){  return getParent().getAttributeManager().createProducer(this);}  }
class C{  public WildcardQuery(Term term){  super(term,toAutomaton(term));}  }
class C{  public static <T>HashNgramMap<T> createExplicitWordHashNgramMap(final ValueContainer<T> values,final ConfigOptions opts,final int maxNgramOrder,final boolean reversed){  return new HashNgramMap<T>(values,opts,maxNgramOrder,reversed);}  }
class C{  public void queueNow(Job job) throws InvalidJobException {  job.queue();  try {    executor.execute(job);  } catch (  Exception e) {    job.deQueue();  }}  }
class C{  public void notify(AppleEvent[] events){  String threadName=Thread.currentThread().getName();  logger.log(Level.FINEST,threadName + ": " + toString()+ ".notify: BEGIN");  for (int i=0; i < events.length; i++) {    logger.log(Level.FINEST,threadName + ": " + toString()+ ".notify(): events["+ i+ "] = "+ events[i].toString());  }  logger.log(Level.FINEST,threadName + ": " + toString()+ ".notify(): END");}  }
class C{  public static boolean isChinese(String data){  String expr="^[\u0391-\uFFE5]+$";  return data.matches(expr);}  }
class C{  public static <K,V>Map<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4,K k5,V v5,K k6,V v6,K k7,V v7){  Map map=of();  map.put(k1,v1);  map.put(k2,v2);  map.put(k3,v3);  map.put(k4,v4);  map.put(k5,v5);  map.put(k6,v6);  map.put(k7,v7);  return map;}  }
class C{  protected KMLAbstractEventParser(String namespaceURI){  super(namespaceURI);}  }
class C{  public EventTracker(LocalRegion region){  this.cache=region.cache;  this.name="Event Tracker for " + region.getName();  this.initializationLatch=new StoppableCountDownLatch(region.stopper,1);}  }
class C{  public AdaptiveMultimethodVariation(Population archive){  this.archive=archive;  operators=new ArrayList<Variation>();}  }
class C{  private void sendResponse(UUID nodeId,IgfsCommunicationMessage msg){  try {    sendWithRetries(nodeId,msg);  } catch (  IgniteCheckedException e) {    if (e.hasCause(ClusterTopologyCheckedException.class)) {      if (log.isDebugEnabled())       log.debug("Failed to send sync response to IGFS fragmentizer coordinator " + "(originating node left the grid): " + nodeId);    } else     U.error(log,"Failed to send sync response to IGFS fragmentizer coordinator: " + nodeId,e);  }}  }
class C{  public static float convertDpToPixel(float dp,Context context){  Resources resources=context.getResources();  DisplayMetrics metrics=resources.getDisplayMetrics();  float px=dp * (metrics.densityDpi / 160f);  return px;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_CONSTANT_DECLARATION_2__VALUE_1:    setValue_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public TransferEntropyCalculatorSymbolic(){}  }
class C{  default void clear(){}  }
class C{  public Builder sessionTimeOutInMs(int timeOut){  this.innerZkSessionTimeoutInMs=timeOut;  return this;}  }
class C{  public CSVTableWriter(){  this(true);}  }
class C{  public final void close(){  try {    log.info("Closing ...");    assert (writer != null);    writer.flush();    writer.close();    log.info("... done!");  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public static CompressedImageHDU fromImageHDU(ImageHDU imageHDU,int... tileAxis) throws FitsException {  Header header=new Header();  CompressedImageData compressedData=new CompressedImageData();  compressedData.setAxis(imageHDU.getAxes());  if (tileAxis.length > 0) {    compressedData.setTileSize(tileAxis);  }  compressedData.fillHeader(header);  Cursor<String,HeaderCard> iterator=header.iterator();  Cursor<String,HeaderCard> imageIterator=imageHDU.getHeader().iterator();  while (imageIterator.hasNext()) {    HeaderCard card=imageIterator.next();    BackupRestoreUnCompressedHeaderCard.restore(card,iterator);  }  CompressedImageHDU compressedImageHDU=new CompressedImageHDU(header,compressedData);  compressedData.prepareUncompressedData(imageHDU.getData().getData(),header);  return compressedImageHDU;}  }
class C{  public static Archives createArchives(){  return new ArchivesImpl();}  }
class C{  private void doHandshake(String contextService) throws ReplicatorException {  try {    toServer.print(messageGenerator.prepare());    toServer.flush();    String header=fromServer.readLine();    if (logger.isDebugEnabled())     logger.debug("Received header: " + header);    JSONObject obj=(JSONObject)parser.parse(header);    long payloadLen=(Long)obj.get("payload");    if (logger.isDebugEnabled())     logger.debug("Payload length: " + payloadLen);    String payload=NetworkClientFilter.Protocol.readPayload(fromServer,(int)payloadLen);    if (logger.isDebugEnabled())     logger.debug("Received payload: " + payload);    String type=(String)obj.get("type");    String service=(String)obj.get("service");    long returnCode=(Long)obj.get("return");    validateMessage(Protocol.TYPE_ACKNOWLEDGED,type,returnCode,service,payload);    logger.info("Server: " + payload);  } catch (  ParseException e) {    throw new ReplicatorException("Server returned an invalid message during prepare-acknowledged message handshake: " + e,e);  }catch (  IOException e) {    throw new ReplicatorException("prepare-acknowledged message handshake failed: " + e,e);  }}  }
class C{  public Element insertAfter(NewElement newElement){  checkNotRemoved();  notPermittedOnRootElement();  requireNonNull(newElement,"Required not null new element");  final Node newNode=createNode(newElement);  final Element element=createElement(newNode);  final Node nextNode=nextElementNode(delegate);  if (nextNode != null) {    delegate.getParentNode().insertBefore(newNode,nextNode);  } else {    delegate.getParentNode().appendChild(newNode);  }  xmlTree.insertAfter(newElement,element,this);  return this;}  }
class C{  @Override public void updateCharacterStream(int columnIndex,Reader x) throws SQLException {  updateCharacterStream(columnIndex,x,-1);}  }
class C{  public static Impp skype(String handle){  return new Impp(SKYPE,handle);}  }
class C{  boolean removedAt(int removedIndex){  if (isDetached())   return true;  final int cycles=itrs.cycles;  final int takeIndex=ArrayBlockingQueue.this.takeIndex;  final int prevCycles=this.prevCycles;  final int prevTakeIndex=this.prevTakeIndex;  final int len=items.length;  int cycleDiff=cycles - prevCycles;  if (removedIndex < takeIndex)   cycleDiff++;  final int removedDistance=(cycleDiff * len) + (removedIndex - prevTakeIndex);  int cursor=this.cursor;  if (cursor >= 0) {    int x=distance(cursor,prevTakeIndex,len);    if (x == removedDistance) {      if (cursor == putIndex)       this.cursor=cursor=NONE;    } else     if (x > removedDistance) {      this.cursor=cursor=dec(cursor);    }  }  int lastRet=this.lastRet;  if (lastRet >= 0) {    int x=distance(lastRet,prevTakeIndex,len);    if (x == removedDistance)     this.lastRet=lastRet=REMOVED; else     if (x > removedDistance)     this.lastRet=lastRet=dec(lastRet);  }  int nextIndex=this.nextIndex;  if (nextIndex >= 0) {    int x=distance(nextIndex,prevTakeIndex,len);    if (x == removedDistance)     this.nextIndex=nextIndex=REMOVED; else     if (x > removedDistance)     this.nextIndex=nextIndex=dec(nextIndex);  } else   if (cursor < 0 && nextIndex < 0 && lastRet < 0) {    this.prevTakeIndex=DETACHED;    return true;  }  return false;}  }
class C{  public ForwardMessage(Lifeline caller,Lifeline callee,SequenceDiagram diagram,MessageData data){  super(caller,callee,diagram,data);  this.level=0;}  }
class C{  public Cookie(final String domain,final String name,final String value,final String path,final Date expires,final boolean secure){  super(name,value);  LOG.trace("enter Cookie(String, String, String, String, Date, boolean)");  if (name == null) {    throw new IllegalArgumentException("Cookie name may not be null");  }  if (name.trim().equals("")) {    throw new IllegalArgumentException("Cookie name may not be blank");  }  setPath(path);  setDomain(domain);  setExpiryDate(expires);  setSecure(secure);}  }
class C{  protected boolean activateMagnetometer(){  return (mSensorManager != null && mSensorManager.registerListener(this,mSensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD),(int)(PLConstants.kDefaultMagnetometerInterval * 1000.0f)));}  }
class C{  Trigger(String namespace,Set elementNames){  this.elementNames=elementNames;  this.namespace=namespace;}  }
class C{  @Override protected void updateCloudletProcessing(){  if (getCloudletSubmitted() == -1 || getCloudletSubmitted() == CloudSim.clock()) {    CloudSim.cancelAll(getId(),new PredicateType(CloudSimTags.VM_DATACENTER_EVENT));    schedule(getId(),getSchedulingInterval(),CloudSimTags.VM_DATACENTER_EVENT);    return;  }  double currentTime=CloudSim.clock();  if (currentTime > getLastProcessTime()) {    System.out.print(currentTime + " ");    double minTime=updateCloudetProcessingWithoutSchedulingFutureEventsForce();    if (!isDisableVmMigrations()) {      List<Map<String,Object>> migrationMap=getVmAllocationPolicy().optimizeAllocation(getContainerVmList());      int previousMigrationCount=getVmMigrationCount();      if (migrationMap != null) {        for (        Map<String,Object> migrate : migrationMap) {          ContainerVm vm=(ContainerVm)migrate.get("vm");          PowerContainerHost targetHost=(PowerContainerHost)migrate.get("host");          PowerContainerHost oldHost=(PowerContainerHost)vm.getHost();          if (oldHost == null) {            Log.formatLine("%.2f: Migration of VM #%d to Host #%d is started",currentTime,vm.getId(),targetHost.getId());          } else {            Log.formatLine("%.2f: Migration of VM #%d from Host #%d to Host #%d is started",currentTime,vm.getId(),oldHost.getId(),targetHost.getId());          }          targetHost.addMigratingInContainerVm(vm);          incrementMigrationCount();          send(getId(),vm.getRam() / ((double)targetHost.getBw() / (2 * 8000)),CloudSimTags.VM_MIGRATE,migrate);        }      }      Log.printConcatLine(CloudSim.clock(),": The number of Migrations is:  ",getVmMigrationCount() - previousMigrationCount);    }    if (minTime != Double.MAX_VALUE) {      CloudSim.cancelAll(getId(),new PredicateType(CloudSimTags.VM_DATACENTER_EVENT));      send(getId(),getSchedulingInterval(),CloudSimTags.VM_DATACENTER_EVENT);    }    setLastProcessTime(currentTime);  }}  }
class C{  public TIntHash(int initialCapacity,TIntHashingStrategy strategy){  super(initialCapacity);  _hashingStrategy=strategy;}  }
class C{  public MixinEntityPlayerExample(World worldIn){  super(worldIn);}  }
class C{  @Override public void useDefaultVisual(){  m_visual.loadIcons(BeanVisual.ICON_PATH + "SerializedModelSaver.gif",BeanVisual.ICON_PATH + "SerializedModelSaver_animated.gif");  m_visual.setText("SerializedModelSaver");}  }
class C{  public static String computeQualifiedWidgetTypeName(Node widgetNode){  if (widgetNode.getNodeType() != Node.ELEMENT_NODE) {    return null;  }  String typeName=widgetNode.getLocalName();  if (typeName.length() == 0 || Character.isLowerCase(typeName.charAt(0))) {    return null;  }  String packageName=UiBinderUtilities.getPackageName(widgetNode.getNamespaceURI());  return packageName != null ? JavaUtilities.getQualifiedTypeName(typeName,packageName) : null;}  }
class C{  public static boolean isHttpUri(final URI uri){  return uri != null && HTTP_SCHEME.equals(uri.getScheme());}  }
class C{  public GuacamoleInsufficientCredentialsException(String message,CredentialsInfo credentialsInfo){  super(message,credentialsInfo);}  }
class C{  public int hashCode(){  return this.address.hashCode();}  }
class C{  public void reset(){  int linksSize=(_links == null) ? XPathContext.RECURSIONLIMIT : _links.length;  int varArraySize=(_stackFrames == null) ? XPathContext.RECURSIONLIMIT * 2 : _stackFrames.length;  reset(linksSize,varArraySize);}  }
class C{  public FastItemAdapter<Item> clear(){  mItemAdapter.clear();  return this;}  }
class C{  @CanIgnoreReturnValue public CharEscaperBuilder addEscapes(char[] cs,String r){  checkNotNull(r);  for (  char c : cs) {    addEscape(c,r);  }  return this;}  }
class C{  public static byte[] toBytes(long data){  return new byte[]{(byte)((data >> 56) & 0xff),(byte)((data >> 48) & 0xff),(byte)((data >> 40) & 0xff),(byte)((data >> 32) & 0xff),(byte)((data >> 24) & 0xff),(byte)((data >> 16) & 0xff),(byte)((data >> 8) & 0xff),(byte)((data >> 0) & 0xff)};}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:56.359 -0500",hash_original_method="C166F600410D67F2CE19D27C7CE50EE0",hash_generated_method="B19DF6F3311959551E5DC9F49D6704FB") public static boolean isStatusSuccess(int status){  return (status >= 200 && status < 300);}  }
class C{  @Override public void init(Bundle savedInstanceState){  setTitle(R.string.dark_activity);  setPrimaryColors(getResources().getColor(R.color.dark_activity_primary),getResources().getColor(R.color.dark_activity_primary_dark));  setContent(R.layout.activity_content);  Intent intent=getIntent();  if (intent.getBooleanExtra(SampleActivity.ARG_USE_EXPANSION,false)) {    expandFromPoints(intent.getIntExtra(SampleActivity.ARG_EXPANSION_LEFT_OFFSET,0),intent.getIntExtra(SampleActivity.ARG_EXPANSION_TOP_OFFSET,0),intent.getIntExtra(SampleActivity.ARG_EXPANSION_VIEW_WIDTH,0),intent.getIntExtra(SampleActivity.ARG_EXPANSION_VIEW_HEIGHT,0));  }}  }
class C{  public static String takeWhile(GString self,@ClosureParams(value=FromString.class,conflictResolutionStrategy=PickFirstResolver.class,options={"String","Character"}) Closure condition){  return takeWhile(self.toString(),condition);}  }
class C{  public static MethodInfo makePrototype(String name,ClassInfo returnType,ClassInfo[] paramTypes,int accessFlags){  return new MethodInfo(null,name,returnType,paramTypes,accessFlags);}  }
class C{  public void handleConfiguration(Class<OpsType> opsType,Interface instance) throws InstantiationException, IllegalAccessException {  if (mRetainedFragmentManager.firstTimeIn()) {    Log.d(TAG,"First time onCreate() call");    initialize(opsType,instance);  } else {    Log.d(TAG,"Second or subsequent onCreate() call");    mOpsInstance=mRetainedFragmentManager.get(opsType.getSimpleName());    if (mOpsInstance == null)     initialize(opsType,instance); else     mOpsInstance.onConfiguration(instance,false);  }}  }
class C{  public AtomicReferenceArray(int length){  array=new Object[length];}  }
class C{  public final boolean hasContended(){  return head != null;}  }
class C{  public PortUnreachableException(){}  }
class C{  public static boolean hasPermission(Activity activity,String[] permissions){  for (  String permission : permissions) {    if (activity.checkSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {      return false;    }  }  return true;}  }
class C{  protected Comment_Impl(){  super();}  }
class C{  @ReactMethod public void configureNextLayoutAnimation(ReadableMap config,Callback success,Callback error){  mUIImplementation.configureNextLayoutAnimation(config,success,error);}  }
class C{  @Override public void updateAsciiStream(String columnLabel,InputStream x,int length) throws SQLException {  updateAsciiStream(columnLabel,x,(long)length);}  }
class C{  protected void paintComponent(Graphics g){  if (textArea == null) {    return;  }  visibleRect=g.getClipBounds(visibleRect);  if (visibleRect == null) {    visibleRect=getVisibleRect();  }  if (visibleRect == null) {    return;  }  Color bg=getBackground();  if (getGutter() != null) {    bg=getGutter().getBackground();  }  g.setColor(bg);  g.fillRect(0,visibleRect.y,cellWidth,visibleRect.height);  g.setFont(getFont());  Document doc=textArea.getDocument();  Element root=doc.getDefaultRootElement();  if (textArea.getLineWrap()) {    paintWrappedLineNumbers(g,visibleRect);    return;  }  int topLine=visibleRect.y / cellHeight;  int bottomLine=Math.min(topLine + visibleRect.height / cellHeight + 1,root.getElementCount());  int actualTopY=topLine * cellHeight;  textAreaInsets=textArea.getInsets(textAreaInsets);  actualTopY+=textAreaInsets.top;  int y=actualTopY + ascent;  if (textArea.getHighlightCurrentLine() && currentLine >= topLine && currentLine <= bottomLine) {    g.setColor(textArea.getCurrentLineHighlightColor());    g.fillRect(0,actualTopY + (currentLine - topLine) * cellHeight,cellWidth,cellHeight);  }  g.setColor(getForeground());  boolean ltr=getComponentOrientation().isLeftToRight();  if (ltr) {    FontMetrics metrics=g.getFontMetrics();    int rhs=getWidth() - RHS_BORDER_WIDTH;    for (int i=topLine + 1; i <= bottomLine; i++) {      int index=i + getLineNumberingStartIndex() - 1;      String number=Integer.toString(index);      int width=metrics.stringWidth(number);      g.drawString(number,rhs - width,y);      y+=cellHeight;    }  } else {    for (int i=topLine + 1; i <= bottomLine; i++) {      int index=i + getLineNumberingStartIndex() - 1;      String number=Integer.toString(index);      g.drawString(number,RHS_BORDER_WIDTH,y);      y+=cellHeight;    }  }}  }
class C{  @Override public void onFailure(Throwable exception){  checkNotSet();  this.exception=exception;}  }
class C{  @Override protected Socket createSocket() throws IOException {  try {    return sslSocketFactory.createSocket();  } catch (  SocketException se) {    Throwable t=se.getCause();    if (t != null && t instanceof UnsupportedOperationException) {      return super.createSocket();    } else {      throw se;    }  }}  }
class C{  public Url_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());}  }
class C{  boolean sameAs(ReturnPathType other){  return this.type == other.type;}  }
class C{  static private boolean isExternalFile(IPath path){  throw new UnsupportedOperationException();}  }
class C{  protected void checkForStop() throws ProcessStoppedException {  Operator op=getOperator();  if (op != null) {    op.checkForStop();  }}  }
class C{  private TokenSpec(long tokenLifetimeSec,DelegationSpec delegationSpec,boolean isRenewable,Confirmation confirmation,Set<String> audienceRestriction,List<Advice> advice){  ValidateUtil.validatePositiveNumber(tokenLifetimeSec,"token lifetime");  ValidateUtil.validateNotNull(confirmation,"Confirmation type");  ValidateUtil.validateNotNull(audienceRestriction,"Audience restriction list");  ValidateUtil.validateNotNull(advice,"Advice");  this.tokenLifetimeSec=tokenLifetimeSec;  this.delegationSpec=delegationSpec;  this.isRenewable=isRenewable;  this.confirmation=confirmation;  this.audienceRestriction=audienceRestriction;  this.advice=advice;}  }
class C{  public boolean isSetNode(){  return this.node != null;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (size: ");  result.append(size);  result.append(')');  return result.toString();}  }
class C{  public static void writeGraphic(LegHistogram legHistogram,final String filename){  try {    ChartUtilities.saveChartAsPNG(new File(filename),getGraphic(legHistogram.getAllModesData(),"all",legHistogram.getIteration()),1024,768);  } catch (  IOException e) {    throw new UncheckedIOException(e);  }}  }
class C{  public Builder add(Term[] terms,int position){  Objects.requireNonNull(terms,"Term array must not be null");  if (termArrays.size() == 0)   field=terms[0].field();  for (  Term term : terms) {    if (!term.field().equals(field)) {      throw new IllegalArgumentException("All phrase terms must be in the same field (" + field + "): "+ term);    }  }  termArrays.add(terms);  positions.add(position);  return this;}  }
class C{  private String[] cleanTextForVTT(Caption current){  String[] lines;  String text=current.content;  lines=text.split("<br />");  for (int i=0; i < lines.length; i++) {    lines[i]=lines[i].replaceAll("<.*?>","");  }  return lines;}  }
class C{  public MockSolenoid stop(){  direction=Direction.STOPPED;  return this;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.TFORMAL_PARAMETER__ANNOTATIONS:    getAnnotations().clear();  return;case TypesPackage.TFORMAL_PARAMETER__AST_ELEMENT:setAstElement((EObject)null);return;case TypesPackage.TFORMAL_PARAMETER__VARIADIC:setVariadic(VARIADIC_EDEFAULT);return;case TypesPackage.TFORMAL_PARAMETER__TYPE_REF:setTypeRef((TypeRef)null);return;}super.eUnset(featureID);}  }
class C{  public Object attribute(Object key){  return (attributes != null) ? attributes.get(key) : null;}  }
class C{  public static Object deserialize(byte[] bytes){  try (ByteArrayInputStream b=new ByteArrayInputStream(bytes)){    try (ObjectInputStream o=new ObjectInputStream(b)){      return o.readObject();    }   } catch (  Exception e) {    throw new IgniteException("Failed to deserialize object from byte array",e);  }}  }
class C{  public boolean isEmpty(){  purgeBeforeRead();  return super.isEmpty();}  }
class C{  AVA(Reader in,int format,Map<String,String> keywordMap) throws IOException {  StringBuilder temp=new StringBuilder();  int c;  while (true) {    c=readChar(in,"Incorrect AVA format");    if (c == '=') {      break;    }    temp.append((char)c);  }  oid=AVAKeyword.getOID(temp.toString(),format,keywordMap);  temp.setLength(0);  if (format == RFC2253) {    c=in.read();    if (c == ' ') {      throw new IOException("Incorrect AVA RFC2253 format - " + "leading space must be escaped");    }  } else {    do {      c=in.read();    } while ((c == ' ') || (c == '\n'));  }  if (c == -1) {    value=new DerValue("");    return;  }  if (c == '#') {    value=parseHexString(in,format);  } else   if ((c == '"') && (format != RFC2253)) {    value=parseQuotedString(in,temp);  } else {    value=parseString(in,c,format,temp);  }}  }
class C{  public void loadByteArray(SdfBuffer buffer){  buffer.setAtIndexAndInc(byte1);  buffer.setAtIndexAndInc(byte2);  super.loadByteArray(buffer);}  }
class C{  public SQLRecoverableException(String reason,String SQLState,int vendorCode,Throwable cause){  super(reason,SQLState,vendorCode,cause);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documenttypegetnotationstype.class,args);}  }
class C{  public void addEntry(RosterEntry entry) throws XMPPException {  PacketCollector collector=null;synchronized (entries) {    if (!entries.contains(entry)) {      RosterPacket packet=new RosterPacket();      packet.setType(IQ.Type.SET);      RosterPacket.Item item=RosterEntry.toRosterItem(entry);      item.addGroupName(getName());      packet.addRosterItem(item);      collector=connection.createPacketCollector(new PacketIDFilter(packet.getPacketID()));      connection.sendPacket(packet);    }  }  if (collector != null) {    IQ response=(IQ)collector.nextResult(SmackConfiguration.getPacketReplyTimeout());    collector.cancel();    if (response == null) {      throw new XMPPException("No response from the server.");    } else     if (response.getType() == IQ.Type.ERROR) {      throw new XMPPException(response.getError());    }  }}  }
class C{  @RpcMethod public void attachDisks(String vmId,List<String> diskIds,AsyncMethodCallback<Host.AsyncClient.attach_disks_call> handler) throws RpcException {  ensureClient();  VmDisksAttachRequest vmDisksAttachRequest=new VmDisksAttachRequest(vmId,diskIds);  clientProxy.setTimeout(ATTACH_DISKS_TIMEOUT_MS);  logger.info("attach_disks vm {}, disks {}, target {} request {}",vmId,diskIds,getHostIp(),vmDisksAttachRequest);  try {    clientProxy.attach_disks(vmDisksAttachRequest,handler);  } catch (  TException e) {    throw new RpcException(e.getMessage());  }}  }
class C{  public Expression predicate(int opPos) throws TransformerException {  return compile(opPos + 2);}  }
class C{  public static TransportNetwork fromFiles(String osmSourceFile,String gtfsSourceFile,TNBuilderConfig tnBuilderConfig) throws DuplicateFeedException {  return fromFiles(osmSourceFile,Arrays.asList(gtfsSourceFile),tnBuilderConfig);}  }
class C{  public boolean turbolinksIsReady(){  return turbolinksIsReady;}  }
class C{  protected AbstractSVGNormPathSegList(){  super();}  }
class C{  public ReplDBMSEvent peek(){  return queue.peek();}  }
class C{  public void testParseClientHandshake() throws Exception {  for (int splitPos=1; splitPos < 5; splitPos++) {    log.info("Checking split position: " + splitPos);    ByteBuffer tmp=clientHandshakePacket();    ByteBuffer[] split=split(tmp,splitPos);    GridNioSession ses=new MockNioSession();    ses.addMeta(MARSHALLER.ordinal(),new GridClientOptimizedMarshaller());    GridTcpRestParser parser=new GridTcpRestParser(false);    Collection<GridClientMessage> lst=new ArrayList<>(1);    for (    ByteBuffer buf : split) {      GridClientMessage r;      while (buf.hasRemaining() && (r=parser.decode(ses,buf)) != null)       lst.add(r);      assertTrue("Parser has left unparsed bytes.",buf.remaining() == 0);    }    assertEquals(1,lst.size());    GridClientHandshakeRequest req=(GridClientHandshakeRequest)F.first(lst);    assertNotNull(req);    assertEquals(U.bytesToShort(new byte[]{5,0},0),req.version());  }}  }
class C{  public _DefinitionTriggerType(final String[] flagStrings){  super(flagStrings);}  }
class C{  public static ValueTimestamp convertTimestamp(Timestamp x,Calendar calendar){  if (calendar == null) {    throw DbException.getInvalidValueException("calendar",null);  }  Calendar cal=(Calendar)calendar.clone();  cal.setTimeInMillis(x.getTime());  long dateValue=dateValueFromCalendar(cal);  long nanos=nanosFromCalendar(cal);  nanos+=x.getNanos() % 1000000;  return ValueTimestamp.fromDateValueAndNanos(dateValue,nanos);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.N4_MEMBER_DECLARATION__OWNER:    return basicSetOwner(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public LOSGenerator(){}  }
class C{  public void reset(final long seed){  if (locked)   throw new IllegalStateException();  if (DEBUG)   System.err.println("RESET(" + seed + ")");  filteredSize=0;  this.seed=seed;  checkedForDuplicates=false;  Arrays.fill(count,0);  try {    for (    DataOutputStream d : dos)     d.close();    for (int i=0; i < DISK_CHUNKS; i++)     dos[i]=new DataOutputStream(new FastBufferedOutputStream(new FileOutputStream(file[i]),OUTPUT_BUFFER_SIZE));  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public static FontImage createMaterial(char icon,String style,float size){  Style s=UIManager.getInstance().getComponentStyle(style);  return createMaterial(icon,s,size);}  }
class C{  public void write(final AbstractIndex index) throws IOException {  StringBuilder cmd;  while (index.size() > 0) {    System.out.println("Transmit Index [" + index + "]");    cmd=index.remove();    cmd.append("\r\n");    writer.write(cmd.toString());  }  writer.flush();}  }
class C{  private long hash(final long[] a,final int l,final int k){  final int[] w=weight[k];  long h=init[k];  int i=l;  while (i-- != 0)   h^=(h << 5) + a[i] * w[i % NUMBER_OF_WEIGHTS] + (h >>> 2);  return (h & 0x7FFFFFFFFFFFFFFFL) % m;}  }
class C{  public void init() throws MailetException {  String patternString=getInitParameter(PATTERN_PARAMETER_NAME);  String notpatternString=getInitParameter(NOTPATTERN_PARAMETER_NAME);  if (patternString == null && notpatternString == null) {    throw new MailetException("No value for " + PATTERN_PARAMETER_NAME + " parameter was provided.");  }  directoryName=getInitParameter(DIRECTORY_PARAMETER_NAME);  attributeName=getInitParameter(ATTRIBUTE_PARAMETER_NAME);  removeAttachments=getInitParameter(REMOVE_ATTACHMENT_PARAMETER_NAME,REMOVE_NONE).toLowerCase();  if (!REMOVE_MATCHED.equals(removeAttachments) && !REMOVE_ALL.equals(removeAttachments)) {    removeAttachments=REMOVE_NONE;  }  try {    if (patternString != null)     regExPattern=Pattern.compile(patternString);  } catch (  Exception e) {    throw new MailetException("Could not compile regex [" + patternString + "].");  }  try {    if (notpatternString != null)     notregExPattern=Pattern.compile(notpatternString);  } catch (  Exception e) {    throw new MailetException("Could not compile regex [" + notpatternString + "].");  }  if (directoryName != null) {    try {      FileUtils.forceMkdir(new File(directoryName));    } catch (    Exception e) {      throw new MailetException("Could not create directory [" + directoryName + "].",e);    }  }  decodeFilename=getBooleanParameter(getInitParameter(DECODE_FILENAME_PARAMETER_NAME),decodeFilename);  if (getInitParameter(REPLACE_FILENAME_PATTERN_PARAMETER_NAME) != null) {    filenameReplacingPatterns=new PatternExtractor().getPatternsFromString(getInitParameter(REPLACE_FILENAME_PATTERN_PARAMETER_NAME));  }  String toLog=String.format("StripAttachment is initialised with regex pattern [%s / %s]",patternString,notpatternString);  if (directoryName != null) {    toLog+=String.format(" and will save to directory [%s]",directoryName);  }  if (attributeName != null) {    toLog+=String.format(" and will store attachments to attribute [%s]",attributeName);  }  log(toLog);}  }
class C{  public static byte[] concatenate(byte[]... chunks){  int len=0;  for (  byte[] chunk : chunks)   len+=chunk.length;  byte result[]=new byte[len];  int pos=0;  for (  byte[] chunk : chunks) {    System.arraycopy(chunk,0,result,pos,chunk.length);    pos+=chunk.length;  }  return result;}  }
class C{  public void clear(){  registers=new double[numRegisters];  tags=new byte[numRegisters];  for (int i=0; i < numRegisters; i++) {    tags[i]=TAGEMPTY;  }  fC0=fC1=fC2=fC3=false;  fStackFault=fPrecision=fUnderflow=fOverflow=fZeroDivide=fDenormalized=fInvalid=false;  top=0;}  }
class C{  public boolean inFrustum(final BoundingVolume bound){  if (bound == null) {    return false;  }  for (int i=0; i < FRUSTUM_PLANES; ++i) {switch (bound.whichSide(_worldPlane[i])) {case Inside:      return (false);case Outside:    break;case Neither:  return (true);}}return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:38:21.796 -0400",hash_original_method="2E8D93AE88211F36AAD6D20A55107D4A",hash_generated_method="975822625C32FDCFC35DD05272224E5E") public void destroy(){  try {    if (mVocabulary != 0)     SR_VocabularyDestroy(mVocabulary);  }  finally {    mVocabulary=0;    try {      if (mRecognizer != 0)       SR_RecognizerUnsetup(mRecognizer);    }  finally {      try {        if (mRecognizer != 0)         SR_RecognizerDestroy(mRecognizer);      }  finally {        mRecognizer=0;        try {          SR_SessionDestroy();        }  finally {          PMemShutdown();        }      }    }  }}  }
class C{  @Override public double utility(double totalWeight,double totalPositiveWeight,Hypothesis hypo){  double g=hypo.getCoveredWeight() / totalWeight;  double p=hypo.getPositiveWeight() / hypo.getCoveredWeight();  if (hypo.getPrediction() == Hypothesis.POSITIVE_CLASS) {    return g * (p - this.priors[Hypothesis.POSITIVE_CLASS]);  } else {    return g * (p - this.priors[Hypothesis.NEGATIVE_CLASS]);  }}  }
class C{  public ConverterFileChooser(String currentDirectory){  super(currentDirectory);  initialize();}  }
class C{  public void addSelectionListener(final NetworkSelectionListener l){  listenerList.add(NetworkSelectionListener.class,l);}  }
class C{  public void begin(String namespace,String name,Attributes attributes) throws Exception {  assert digester.peek() instanceof FacesConfigBean : "Assertion Error: Expected FacesConfigBean to be at the top of the stack";  if (digester.getLogger().isDebugEnabled()) {    digester.getLogger().debug("[ComponentRule]{" + digester.getMatch() + "} Push "+ CLASS_NAME);  }  Class clazz=digester.getClassLoader().loadClass(CLASS_NAME);  ComponentBean cb=(ComponentBean)clazz.newInstance();  digester.push(cb);}  }
class C{  public WeakRef(Object obj,ReferenceQueue<Object> q){  super(obj,q);  setHashValue(obj);}  }
class C{  public UserRoleAssignmentException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DOMImplementation domImpl;  Document newDoc;  String namespaceURI=null;  String qualifiedName="dom:root";  DocumentType docType=null;  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();{    boolean success=false;    try {      newDoc=domImpl.createDocument(namespaceURI,qualifiedName,docType);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("domimplementationcreatedocument04",success);  }}  }
class C{  private void ensureCapacity(int size){  if (size > data.length) {    Object[] oldData=this.data;    int newSize=data.length * 2;    if (newSize < size) {      newSize=size;    }    this.data=new Object[newSize];    System.arraycopy(oldData,0,this.data,0,oldData.length);  }}  }
class C{  private final double calculateLogLikelihood(){  double logL=Double.NEGATIVE_INFINITY;  boolean done=false;  long underflowCount=0;  do {    treeTraversalDelegate.dispatchTreeTraversalCollectBranchAndNodeOperations();    final List<DataLikelihoodDelegate.BranchOperation> branchOperations=treeTraversalDelegate.getBranchOperations();    final List<DataLikelihoodDelegate.NodeOperation> nodeOperations=treeTraversalDelegate.getNodeOperations();    if (COUNT_TOTAL_OPERATIONS) {      totalMatrixUpdateCount+=branchOperations.size();      totalOperationCount+=nodeOperations.size();    }    final NodeRef root=treeModel.getRoot();    try {      logL=likelihoodDelegate.calculateLikelihood(branchOperations,nodeOperations,root.getNumber());      done=true;    } catch (    DataLikelihoodDelegate.LikelihoodUnderflowException e) {      updateAllNodes();      underflowCount++;    }  } while (!done && underflowCount < MAX_UNDERFLOWS_BEFORE_ERROR);  setAllNodesUpdated();  return logL;}  }
class C{  public Reference(String className,RefAddr addr,String factory,String factoryLocation){  this(className,addr);  classFactory=factory;  classFactoryLocation=factoryLocation;}  }
class C{  public void addLocal(T node){  super.add(node);}  }
class C{  protected void forwardUpdateToView(View v,DocumentEvent e,Shape a,ViewFactory f){  v.setParent(this);  super.forwardUpdateToView(v,e,a,f);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodelistreturnfirstitem.class,args);}  }
class C{  private boolean isClosed(){  return out == null;}  }
class C{  public static Builder builder(KeepAliveRequest request){  return new Builder(request);}  }
class C{  public TreeMap(SortedMap m){  comparator=m.comparator();  try {    buildFromSorted(m.size(),m.entrySet().iterator(),null,null);  } catch (  java.io.IOException cannotHappen) {  }catch (  ClassNotFoundException cannotHappen) {  }}  }
class C{  public static boolean read(final File vocab_file) throws IOException {  DataInputStream vocab_stream=new DataInputStream(new BufferedInputStream(new FileInputStream(vocab_file)));  int size=vocab_stream.readInt();  LOG.info("Read {} entries from the vocabulary",size);  clear();  for (int i=0; i < size; i++) {    int id=vocab_stream.readInt();    String token=vocab_stream.readUTF();    if (id != Math.abs(id(token))) {      vocab_stream.close();      return false;    }  }  vocab_stream.close();  return (size + 1 == idToString.size());}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static Script createMultiSigInputScript(TransactionSignature... signatures){  return createMultiSigInputScript(Arrays.asList(signatures));}  }
class C{  private int adjustAlpha(int color,float factor){  int alpha=Math.round(Color.alpha(color) * factor);  int red=Color.red(color);  int green=Color.green(color);  int blue=Color.blue(color);  return Color.argb(alpha,red,green,blue);}  }
class C{  public synchronized Data readPage(int pos){  Data page=createData();  readPage(pos,page);  return page;}  }
class C{  public static <T>T use(Object self,Class categoryClass,Closure<T> closure){  return GroovyCategorySupport.use(categoryClass,closure);}  }
class C{  public static Action email(){  return create(EMAIL);}  }
class C{  private void removeProtection(List<Volume> volumes,VirtualPool newVpool,String taskId) throws InternalException {  List<URI> volumeURIs=new ArrayList<URI>();  for (  Volume volume : volumes) {    _log.info(String.format("Request to remove protection from Volume [%s] (%s) and move it to Virtual Pool [%s] (%s)",volume.getLabel(),volume.getId(),newVpool.getLabel(),newVpool.getId()));    volumeURIs.add(volume.getId());    List<BlockSnapshot> rpBookmarks=new ArrayList<BlockSnapshot>();    List<BlockSnapshot> sourceSnapshots=this.getSnapshotsForVolume(volume);    for (    BlockSnapshot sourceSnapshot : sourceSnapshots) {      if (TechnologyType.RP.name().equals(sourceSnapshot.getTechnologyType())) {        if (sourceSnapshot.isSnapshotExported(_dbClient)) {          String warningMessage=String.format("RP Bookmark/Snapshot [%s](%s) is exported to Host, " + "please un-export the Bookmark/Snapshot from all exports and place the order again",sourceSnapshot.getLabel(),sourceSnapshot.getId());          _log.warn(warningMessage);          throw APIException.badRequests.rpBlockApiImplRemoveProtectionException(warningMessage);        }        rpBookmarks.add(sourceSnapshot);      } else {        if (RPHelper.isVPlexVolume(volume,_dbClient)) {          String warningMessage=String.format("RecoverPoint protected VPLEX Volume [%s](%s) has an active snapshot, please delete the " + "following snapshot and place the order again: [%s](%s)",volume.getLabel(),volume.getId(),sourceSnapshot.getLabel(),sourceSnapshot.getId());          warningMessage=warningMessage.substring(0,warningMessage.length() - 2);          _log.warn(warningMessage);          throw APIException.badRequests.rpBlockApiImplRemoveProtectionException(warningMessage);        }      }    }    for (    String targetId : volume.getRpTargets()) {      Volume targetVolume=_dbClient.queryObject(Volume.class,URI.create(targetId));      if (targetVolume.isVolumeExported(_dbClient,true,true)) {        String warningMessage=String.format("Target Volume [%s](%s) is exported to Host, please " + "un-export the volume from all exports and place the order again",targetVolume.getLabel(),targetVolume.getId());        _log.warn(warningMessage);        throw APIException.badRequests.rpBlockApiImplRemoveProtectionException(warningMessage);      }      List<BlockSnapshot> targetSnapshots=this.getSnapshotsForVolume(targetVolume);      for (      BlockSnapshot targetSnapshot : targetSnapshots) {        String warningMessage=String.format("Target Volume [%s] (%s) has an active snapshot, please delete the " + "following snapshot and place the order again: [%s](%s)",volume.getLabel(),volume.getId(),targetSnapshot.getLabel(),targetSnapshot.getId());        _log.warn(warningMessage);        throw APIException.badRequests.rpBlockApiImplRemoveProtectionException(warningMessage);      }    }    if (!rpBookmarks.isEmpty()) {      for (      BlockSnapshot bookmark : rpBookmarks) {        _log.info(String.format("Deleting RP Snapshot/Bookmark [%s] (%s)",bookmark.getLabel(),bookmark.getId()));        final String deleteSnapshotTaskId=UUID.randomUUID().toString();        this.deleteSnapshot(bookmark,Arrays.asList(bookmark),deleteSnapshotTaskId,VolumeDeleteTypeEnum.FULL.name());      }    }  }  List<VolumeDescriptor> volumeDescriptors=_rpHelper.getDescriptorsForVolumesToBeDeleted(null,volumeURIs,RPHelper.REMOVE_PROTECTION,newVpool);  BlockOrchestrationController controller=getController(BlockOrchestrationController.class,BlockOrchestrationController.BLOCK_ORCHESTRATION_DEVICE);  controller.deleteVolumes(volumeDescriptors,taskId);}  }
class C{  @Override public void resize(long newSize){  final int numPages=numPages(newSize);  if (numPages > pages.length) {    pages=Arrays.copyOf(pages,ArrayUtil.oversize(numPages,RamUsageEstimator.NUM_BYTES_OBJECT_REF));  }  for (int i=numPages - 1; i >= 0 && pages[i] == null; --i) {    pages[i]=newIntPage(i);  }  for (int i=numPages; i < pages.length && pages[i] != null; ++i) {    pages[i]=null;    releasePage(i);  }  this.size=newSize;}  }
class C{  public ProjectObject(){  super();}  }
class C{  private void sendTrapPdu(InetAddress addr,SnmpPduPacket pdu) throws SnmpStatusException, IOException {  SnmpMessage msg=null;  try {    msg=(SnmpMessage)pduFactory.encodeSnmpPdu(pdu,bufferSize);    if (msg == null) {      throw new SnmpStatusException(SnmpDefinitions.snmpRspAuthorizationError);    }  } catch (  SnmpTooBigException x) {    if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {      SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,"sendTrapPdu","Trap pdu is too big. " + "Trap hasn't been sent to the specified host.");    }    throw new SnmpStatusException(SnmpDefinitions.snmpRspTooBig);  }  openTrapSocketIfNeeded();  if (addr != null) {    msg.address=addr;    try {      sendTrapMessage(msg);    } catch (    SnmpTooBigException x) {      if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {        SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,"sendTrapPdu","Trap pdu is too big. " + "Trap hasn't been sent to " + msg.address);      }    }  }  closeTrapSocketIfNeeded();}  }
class C{  public void serializeToXml(OutputStream os) throws BlocklySerializerException {  BlocklyXmlHelper.writeToXml(mRootBlocks,os);}  }
class C{  protected void sequence_AnnotatedScriptElement_InterfaceImplementsList_Members_N4InterfaceDeclaration_TypeVariables(ISerializationContext context,N4InterfaceDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @VisibleForTesting boolean isConnectionAllowed(Connection moving,Connection candidate,double maxRadius,boolean allowShadowParent){  if (moving.distanceFrom(candidate) > maxRadius) {    return false;  }  int canConnect=moving.canConnectWithReason(candidate);  if (canConnect != Connection.CAN_CONNECT && canConnect != Connection.REASON_MUST_DISCONNECT) {    return false;  }  if (candidate.getType() == Connection.CONNECTION_TYPE_OUTPUT || candidate.getType() == Connection.CONNECTION_TYPE_PREVIOUS) {    if (candidate.isConnected()) {      return false;    }  }  if (!allowShadowParent) {    Block parent;    Block child;    if (moving.getType() == Connection.CONNECTION_TYPE_INPUT || moving.getType() == Connection.CONNECTION_TYPE_NEXT) {      parent=moving.getBlock();      child=candidate.getBlock();    } else {      parent=candidate.getBlock();      child=moving.getBlock();    }    if (parent.isShadow() && !child.isShadow()) {      return false;    }  }  return true;}  }
class C{  @Override public StringBuffer format(double number,StringBuffer toAppendTo,FieldPosition pos){  return toAppendTo.append(getDirectionCode(number));}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  @Override public String toString(){  return Objects.toStringHelper(this).add("player",player).add("event",event).toString();}  }
class C{  public static void addURL(URL u) throws IOException {  URLClassLoader sysLoader=(URLClassLoader)ClassLoader.getSystemClassLoader();  URL urls[]=sysLoader.getURLs();  for (int i=0; i < urls.length; i++) {    if (urls[i].toString().equalsIgnoreCase(u.toString())) {      return;    }  }  Class sysclass=URLClassLoader.class;  try {    Method method=sysclass.getDeclaredMethod("addURL",parameters);    method.setAccessible(true);    method.invoke(sysLoader,new Object[]{u});  } catch (  NoSuchMethodException|SecurityException|IllegalAccessException|IllegalArgumentException|InvocationTargetException t) {    throw new IOException("Error, could not add URL to system classloader");  }}  }
class C{  public int compareTo(SortContainer o){  if ((m_Value == null) || (o.getValue() == null)) {    if (m_Value == o.getValue())     return 0;    if (m_Value == null)     return -1; else     return +1;  } else {    if (m_Value.getClass().equals(o.getValue().getClass()))     return m_Value.compareTo(o.getValue()); else     return m_Value.toString().compareTo(o.getValue().toString());  }}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  @Override public void add(XMLEvent event) throws XMLStreamException {  log.log(Level.FINE,"add() {0}",event);switch (event.getEventType()) {case XMLStreamConstants.START_ELEMENT:    StartElement startElement=(StartElement)event;  stream.writeStartElement(startElement.getName().getPrefix(),startElement.getName().getLocalPart(),startElement.getName().getNamespaceURI());Iterator<Attribute> ia=startElement.getAttributes();while (ia.hasNext()) {Attribute attr=ia.next();stream.writeAttribute(attr.getName().getPrefix(),attr.getName().getNamespaceURI(),attr.getName().getLocalPart(),attr.getValue());}Iterator<Namespace> in=startElement.getNamespaces();while (in.hasNext()) {Namespace ns=in.next();stream.writeNamespace(ns.getPrefix(),ns.getNamespaceURI());}break;case XMLStreamConstants.ATTRIBUTE:Attribute attr=(Attribute)event;stream.writeAttribute(attr.getName().getPrefix(),attr.getName().getNamespaceURI(),attr.getName().getLocalPart(),attr.getValue());break;case XMLStreamConstants.END_ELEMENT:stream.writeEndElement();break;case XMLStreamConstants.CDATA:case XMLStreamConstants.CHARACTERS:Characters chars=(Characters)event;if (chars.isCData()) {stream.writeCData(chars.getData());} else {stream.writeCharacters(chars.getData());}break;case XMLStreamConstants.NAMESPACE:Namespace namespace=(Namespace)event;stream.writeNamespace(namespace.getPrefix(),namespace.getNamespaceURI());break;case XMLStreamConstants.START_DOCUMENT:StartDocument startDocument=(StartDocument)event;stream.writeStartDocument(startDocument.getCharacterEncodingScheme(),startDocument.getVersion());break;case XMLStreamConstants.END_DOCUMENT:stream.writeEndDocument();break;case XMLStreamConstants.PROCESSING_INSTRUCTION:ProcessingInstruction pi=(ProcessingInstruction)event;stream.writeProcessingInstruction(pi.getTarget(),pi.getData());break;case XMLStreamConstants.COMMENT:Comment comment=(Comment)event;stream.writeComment(comment.getText());break;case XMLStreamConstants.DTD:DTD dtd=(DTD)event;stream.writeDTD(dtd.getDocumentTypeDeclaration());break;case XMLStreamConstants.ENTITY_REFERENCE:EntityReference ref=(EntityReference)event;stream.writeEntityRef(ref.getName());break;default :throw new UnsupportedOperationException(String.format("The %i event is not supported yet",event.getEventType()));}}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Location(Element e){  Attribute a;  if ((a=e.getAttribute(Xml.ID)) != null) {    _id=a.getValue();  } else {    log.warn("no id attribute in location element when reading operations");  }  if ((a=e.getAttribute(Xml.NAME)) != null) {    _name=a.getValue();  }  if ((a=e.getAttribute(Xml.OPS)) != null) {    try {      _locationOps=Integer.parseInt(a.getValue());    } catch (    NumberFormatException nfe) {      log.error("Location ops isn't a vaild number for location {}",getName());    }  }  if ((a=e.getAttribute(Xml.DIR)) != null) {    try {      _trainDir=Integer.parseInt(a.getValue());    } catch (    NumberFormatException nfe) {      log.error("Train directions isn't a vaild number for location {}",getName());    }  }  if ((a=e.getAttribute(Xml.SWITCH_LIST)) != null) {    _switchList=(a.getValue().equals(Xml.TRUE));  }  if ((a=e.getAttribute(Xml.SWITCH_LIST_STATE)) != null) {    try {      _switchListState=Integer.parseInt(a.getValue());    } catch (    NumberFormatException nfe) {      log.error("Switch list state isn't a vaild number for location {}",getName());    }    if (getSwitchListState() == SW_PRINTED) {      setStatus(PRINTED);    }  }  if ((a=e.getAttribute(Xml.PRINTER_NAME)) != null) {    _defaultPrinter=a.getValue();  }  Attribute x;  Attribute y;  try {    if ((x=e.getAttribute(Xml.EAST_TRAIN_ICON_X)) != null && (y=e.getAttribute(Xml.EAST_TRAIN_ICON_Y)) != null) {      setTrainIconEast(new Point(Integer.parseInt(x.getValue()),Integer.parseInt(y.getValue())));    }    if ((x=e.getAttribute(Xml.WEST_TRAIN_ICON_X)) != null && (y=e.getAttribute(Xml.WEST_TRAIN_ICON_Y)) != null) {      setTrainIconWest(new Point(Integer.parseInt(x.getValue()),Integer.parseInt(y.getValue())));    }    if ((x=e.getAttribute(Xml.NORTH_TRAIN_ICON_X)) != null && (y=e.getAttribute(Xml.NORTH_TRAIN_ICON_Y)) != null) {      setTrainIconNorth(new Point(Integer.parseInt(x.getValue()),Integer.parseInt(y.getValue())));    }    if ((x=e.getAttribute(Xml.SOUTH_TRAIN_ICON_X)) != null && (y=e.getAttribute(Xml.SOUTH_TRAIN_ICON_Y)) != null) {      setTrainIconSouth(new Point(Integer.parseInt(x.getValue()),Integer.parseInt(y.getValue())));    }  } catch (  NumberFormatException nfe) {    log.error("Train icon coordinates aren't vaild for location {}",getName());  }  if ((a=e.getAttribute(Xml.COMMENT)) != null) {    _comment=OperationsXml.convertFromXmlComment(a.getValue());  }  if ((a=e.getAttribute(Xml.SWITCH_LIST_COMMENT)) != null) {    _switchListComment=a.getValue();  }  if ((a=e.getAttribute(Xml.PHYSICAL_LOCATION)) != null) {    _physicalLocation=PhysicalLocation.parse(a.getValue());  }  if (e.getChild(Xml.TYPES) != null) {    @SuppressWarnings("unchecked") List<Element> carTypes=e.getChild(Xml.TYPES).getChildren(Xml.CAR_TYPE);    String[] types=new String[carTypes.size()];    for (int i=0; i < carTypes.size(); i++) {      Element type=carTypes.get(i);      if ((a=type.getAttribute(Xml.NAME)) != null) {        types[i]=a.getValue();      }    }    setTypeNames(types);    @SuppressWarnings("unchecked") List<Element> locoTypes=e.getChild(Xml.TYPES).getChildren(Xml.LOCO_TYPE);    types=new String[locoTypes.size()];    for (int i=0; i < locoTypes.size(); i++) {      Element type=locoTypes.get(i);      if ((a=type.getAttribute(Xml.NAME)) != null) {        types[i]=a.getValue();      }    }    setTypeNames(types);  } else   if ((a=e.getAttribute(Xml.CAR_TYPES)) != null) {    String names=a.getValue();    String[] Types=names.split("%%");    setTypeNames(Types);  }  if (e.getChildren(Xml.SECONDARY) != null) {    @SuppressWarnings("unchecked") List<Element> eTracks=e.getChildren(Xml.SECONDARY);    for (    Element eTrack : eTracks) {      register(new Track(eTrack,this));    }  }  if (e.getChildren(Xml.TRACK) != null) {    @SuppressWarnings("unchecked") List<Element> eTracks=e.getChildren(Xml.TRACK);    log.debug("location ({}) has {} tracks",getName(),eTracks.size());    for (    Element eTrack : eTracks) {      register(new Track(eTrack,this));    }  }  if (e.getAttribute(Xml.READER) != null) {    try {      Reporter r=jmri.InstanceManager.getDefault(jmri.ReporterManager.class).provideReporter(e.getAttribute(Xml.READER).getValue());      _reader=r;    } catch (    IllegalArgumentException ex) {      log.warn("Not able to find reader: {} for location ({})",e.getAttribute(Xml.READER).getValue(),getName());    }  }  addPropertyChangeListeners();}  }
class C{  public void beginInternalAtomicEdit(){  if (++internalAtomicEditDepth == 1) {    if (compoundEdit != null)     compoundEdit.end();    compoundEdit=new RCompoundEdit();  }}  }
class C{  @Override public final int previousIndex(){  return _nextIndex - 1;}  }
class C{  @Override public void run(){  while (true) {    Object plan=Controller.compilationQueue.deleteMin();    if (plan instanceof ControllerPlan) {      ((ControllerPlan)plan).doRecompile();    } else     if (plan instanceof OnStackReplacementPlan) {      ((OnStackReplacementPlan)plan).execute();    }  }}  }
class C{  public static String classNameToResourceName(String clsName){  return clsName.replaceAll("\\.","/") + ".class";}  }
class C{  public void update(EventBean[] newData,EventBean[] oldData){  if ((ExecutionPathDebugLog.isDebugEnabled) && (log.isDebugEnabled())) {    log.debug(".update Received update, " + "  newData.length==" + ((newData == null) ? 0 : newData.length) + "  oldData.length=="+ ((oldData == null) ? 0 : oldData.length));  }  resultSetProcessor.applyViewResult(newData,oldData);  if (!super.checkAfterCondition(newData,parent.getStatementContext())) {    return;  }  int newDataLength=0;  int oldDataLength=0;  if (newData != null) {    newDataLength=newData.length;  }  if (oldData != null) {    oldDataLength=oldData.length;  }  outputCondition.updateOutputCondition(newDataLength,oldDataLength);}  }
class C{  public MenuInflater(Context context){  mContext=context;  mRealOwner=context;  mActionViewConstructorArguments=new Object[]{context};  mActionProviderConstructorArguments=mActionViewConstructorArguments;}  }
class C{  public Interval withEnd(ReadableInstant end){  long endMillis=DateTimeUtils.getInstantMillis(end);  return withEndMillis(endMillis);}  }
class C{  public static void showAlertDialog(Context ctx,@StringRes String title,String body){  showAlertDialog(ctx,title,body,null);}  }
class C{  @SuppressWarnings("unused") public void testCreate() throws IOException, EagleServiceClientException, IllegalAccessException, InstantiationException {  EntityDefinition entityDefinition=EntityDefinitionManager.getEntityDefinitionByEntityClass(GenericMetricEntity.class);  hbase.createTable(entityDefinition.getTable(),entityDefinition.getColumnFamily());  client=new EagleServiceClientImpl("localhost",EagleConfigFactory.load().getServicePort());  List<GenericMetricEntity> metricEntityList=new ArrayList<GenericMetricEntity>();  GenericServiceAPIResponseEntity<String> unTypedResponse=client.create(metricEntityList);  GenericServiceAPIResponseEntity<String> weakTypedResponse=client.create(metricEntityList,GenericMetricEntity.GENERIC_METRIC_SERVICE);  GenericServiceAPIResponseEntity<String> strongTypedResponse=client.create(metricEntityList,GenericMetricEntity.class);  GenericServiceAPIResponseEntity<GenericMetricEntity> weakTypedSearchResponse=client.search("").send();  if (weakTypedSearchResponse != null) {    Class<GenericMetricEntity> typedClazz=weakTypedSearchResponse.getType();    List<GenericMetricEntity> typedEntities=weakTypedSearchResponse.getObj();  }}  }
class C{  @Override public synchronized int read() throws IOException {  byte[] localBuf=buf;  InputStream localIn=in;  if (localBuf == null || localIn == null) {    throw streamClosed();  }  if (pos >= count && fillbuf(localIn,localBuf) == -1) {    return -1;  }  if (localBuf != buf) {    localBuf=buf;    if (localBuf == null) {      throw streamClosed();    }  }  if (count - pos > 0) {    return localBuf[pos++] & 0xFF;  }  return -1;}  }
class C{  public boolean isIgnoreLinearDependent(){  if (fgsScore instanceof SemBicScore) {    return ((SemBicScore)fgsScore).isIgnoreLinearDependent();  }  throw new UnsupportedOperationException("Operation supported only for SemBicScore.");}  }
class C{  public org.dom4j.Comment createComment(Comment comment){  return factory.createComment(comment.getText());}  }
class C{  public AlreadySelectedException(String message){  super(message);}  }
class C{  public UnixNumericGroupPrincipal(long name,boolean primaryGroup){  this.name=(new Long(name)).toString();  this.primaryGroup=primaryGroup;}  }
class C{  public static String[] partitionOptions(String[] options){  for (int i=0; i < options.length; i++) {    if (options[i].equals("--")) {      options[i++]="";      String[] result=new String[options.length - i];      for (int j=i; j < options.length; j++) {        result[j - i]=options[j];        options[j]="";      }      return result;    }  }  return new String[0];}  }
class C{  public static boolean containsConstant(Enum<?>[] enumValues,String constant){  return containsConstant(enumValues,constant,false);}  }
class C{  protected int diff_commonOverlap(String text1,String text2){  int text1_length=text1.length();  int text2_length=text2.length();  if (text1_length == 0 || text2_length == 0) {    return 0;  }  if (text1_length > text2_length) {    text1=text1.substring(text1_length - text2_length);  } else   if (text1_length < text2_length) {    text2=text2.substring(0,text1_length);  }  int text_length=Math.min(text1_length,text2_length);  if (text1.equals(text2)) {    return text_length;  }  int best=0;  int length=1;  while (true) {    String pattern=text1.substring(text_length - length);    int found=text2.indexOf(pattern);    if (found == -1) {      return best;    }    length+=found;    if (found == 0 || text1.substring(text_length - length).equals(text2.substring(0,length))) {      best=length;      length++;    }  }}  }
class C{  public CreatePixelMatrixAction(final VisionWorld visionWorld){  super("Create pixel matrix...");  if (visionWorld == null) {    throw new IllegalArgumentException("visionWorld must not be null");  }  this.visionWorld=visionWorld;  putValue(SMALL_ICON,ResourceManager.getImageIcon("PixelMatrix.png"));  putValue(SHORT_DESCRIPTION,"Create Pixel Matrix");}  }
class C{  public int toInt(){  return value.toInt();}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.VAR_DEFINITION;}  }
class C{  protected ContentModel defContentModel(int type,Object obj,ContentModel next){  return new ContentModel(type,obj,next);}  }
class C{  @SuppressLint("NewApi") public static void tryAccessibilityAnnounce(View view,CharSequence text){  if (isJellybeanOrLater() && view != null && text != null) {    view.announceForAccessibility(text);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return getEditorial(stack).getShow();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node docNode;  Document ownerDocument;  Element docElement;  String elementName;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  docNode=elementList.item(1);  ownerDocument=docNode.getOwnerDocument();  docElement=ownerDocument.getDocumentElement();  elementName=docElement.getNodeName();  if (("image/svg+xml".equals(getContentType()))) {    assertEquals("svgTagName","svg",elementName);  } else {    assertEquals("nodeGetOwnerDocumentAssert1","staff",elementName);  }}  }
class C{  public GameSettingsPanel(MainFrame mf){  mf.actions.put("showGameDownloads",null);}  }
class C{  public void revoke(RevocationReason reason) throws AcmeException {  LOG.debug("revoke");  URI resUri=getSession().resourceUri(Resource.REVOKE_CERT);  if (resUri == null) {    throw new AcmeProtocolException("CA does not support certificate revocation");  }  if (cert == null) {    download();  }  try (Connection conn=getSession().provider().connect()){    ClaimBuilder claims=new ClaimBuilder();    claims.putResource(Resource.REVOKE_CERT);    claims.putBase64("certificate",cert.getEncoded());    if (reason != null) {      claims.put("reason",reason.getReasonCode());    }    int rc=conn.sendSignedRequest(resUri,claims,getSession());    if (rc != HttpURLConnection.HTTP_OK) {      conn.throwAcmeException();    }  } catch (  CertificateEncodingException ex) {    throw new AcmeProtocolException("Invalid certificate",ex);  }catch (  IOException ex) {    throw new AcmeNetworkException(ex);  }}  }
class C{  public void removeSelectionListener(final SelectionListener listener){  this.selectionListeners.remove(listener);}  }
class C{  protected InterfaceDefinition_Impl(){  super();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.260 -0400",hash_original_method="C83A00D221FC807590F43A94A3765337",hash_generated_method="3515D48B6E5859755E965F86CACE23C1") private V doGet(Object okey){  Comparable<? super K> key=comparable(okey);  for (; ; ) {    Node<K,V> n=findNode(key);    if (n == null)     return null;    Object v=n.value;    if (v != null)     return (V)v;  }}  }
class C{  public static void e(String tag,String msg,Throwable tr){  println(ERROR,tag,msg,tr);}  }
class C{  public boolean containsExtraValueKey(String key){  return getExtraValueHashMap().containsKey(key);}  }
class C{  public CampoTablaVO createCampoTabla(CampoTablaVO campoTablaVO){  Locale locale=getServiceClient().getLocale();  iniciarTransaccion();  campoTablaVO=campoTablaDbEntity.createCampoTabla(campoTablaVO);  AuditoriaDescripcion.auditaCreacionCampo(locale,this,campoTablaVO);  if (campoTablaVO.getIdArea() != null) {    UsoObjetoVO usoOjetoVO=new UsoObjetoVO();    usoOjetoVO.setIdObj(campoTablaVO.getIdArea());    usoOjetoVO.setIdObjUsuario(campoTablaVO.getId());    usoOjetoVO.setTipoObj(TipoObjetoUsado.AREA);    usoOjetoVO.setTipoObjUsuario(TipoObjetoUsuario.CAMPO_TABLA);    usoObjetoDbEntity.create(usoOjetoVO);  }  commit();  return campoTablaVO;}  }
class C{  public void receiveStoreAndForwardNotificationInvitation(SipRequest invite,ContactId contact,long timestamp){  if (sLogger.isActivated()) {    sLogger.debug("Receive stored notifications");  }  TerminatingStoreAndForwardOneToOneChatNotificationSession session=new TerminatingStoreAndForwardOneToOneChatNotificationSession(mImService,invite,contact,mRcsSettings,mMessagingLog,timestamp,mContactManager);  mImService.receiveStoreAndForwardNotificationSessionInvitation(session);  session.startSession();}  }
class C{  public InterfaceMethodRefConstant(ConstantPool pool,int index,int classIndex,int nameAndTypeIndex){  super(pool,index);  _classIndex=classIndex;  _nameAndTypeIndex=nameAndTypeIndex;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:22.168 -0500",hash_original_method="FF1AB110B94FCC8AEFA697D75FFC57DD",hash_generated_method="B371B1A5EBF86980C6290FA035BAE684") public void connected(){}  }
class C{  public void testSortByScore() throws Exception {  Query query=new AssertNeedsScores(new MatchAllDocsQuery(),true);  assertEquals(5,searcher.search(query,5,Sort.RELEVANCE).totalHits);}  }
class C{  public TimingParser(boolean useSVG11AccessKeys,boolean useSVG12AccessKeys){  this.useSVG11AccessKeys=useSVG11AccessKeys;  this.useSVG12AccessKeys=useSVG12AccessKeys;}  }
class C{  public StrSubstitutor(final StrLookup<?> variableResolver,final String prefix,final String suffix,final char escape){  this.setVariableResolver(variableResolver);  this.setVariablePrefix(prefix);  this.setVariableSuffix(suffix);  this.setEscapeChar(escape);  this.setValueDelimiterMatcher(DEFAULT_VALUE_DELIMITER);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:16.588 -0500",hash_original_method="DFA72F248348DAACE561F2A4664CE110",hash_generated_method="F7C2C4B56BB86CA97C3085B3DFE0A0F2") public boolean decodeContentType(int startIndex){  int mediaPrefixLength;  contentParameters=new HashMap<String,String>();  try {    if (decodeValueLength(startIndex) == false) {      boolean found=decodeConstrainedEncoding(startIndex);      if (found) {        expandWellKnownMimeType();      }      return found;    }    int headersLength=(int)unsigned32bit;    mediaPrefixLength=getDecodedDataLength();    if (decodeIntegerValue(startIndex + mediaPrefixLength) == true) {      dataLength+=mediaPrefixLength;      int readLength=dataLength;      stringValue=null;      expandWellKnownMimeType();      long wellKnownValue=unsigned32bit;      String mimeType=stringValue;      if (readContentParameters(startIndex + dataLength,(headersLength - (dataLength - mediaPrefixLength)),0)) {        dataLength+=readLength;        unsigned32bit=wellKnownValue;        stringValue=mimeType;        return true;      }      return false;    }    if (decodeExtensionMedia(startIndex + mediaPrefixLength) == true) {      dataLength+=mediaPrefixLength;      int readLength=dataLength;      expandWellKnownMimeType();      long wellKnownValue=unsigned32bit;      String mimeType=stringValue;      if (readContentParameters(startIndex + dataLength,(headersLength - (dataLength - mediaPrefixLength)),0)) {        dataLength+=readLength;        unsigned32bit=wellKnownValue;        stringValue=mimeType;        return true;      }    }  } catch (  ArrayIndexOutOfBoundsException e) {    return false;  }  return false;}  }
class C{  private void showProgress(final boolean show){  if (show) {    mProgressDialog.show();  } else {    mProgressDialog.dismiss();  }}  }
class C{  public T caseDomainElement(DomainElement object){  return null;}  }
class C{  public CorpusStatistics(Numberer tagNumberer,Collection<Tree<StateSet>> trees){  counts=new int[tagNumberer.objects().size()];  this.trees=trees;  unaryRuleCounter=new Counter<UnaryRule>();  binaryRuleCounter=new Counter<BinaryRule>();  contexts=new int[tagNumberer.objects().size()];  posCounter=new CounterMap<Integer,String>();}  }
class C{  public void cleanup(){  layerName.setSelected(false);  if (layer != null) {    this.layer.setPaletteVisible(false);    this.layer.removeComponentListener(this);  }  if (onoffButton != null) {    onoffButton.removeActionListener(this);  }  if (paletteButton != null) {    paletteButton.removeActionListener(this);  }  layerName=null;  this.layer=null;  this.layerHandler=null;  this.removeAll();}  }
class C{  public void deleteConnection(Connection connection){  SQLiteDatabase db=getWritableDatabase();  db.delete(TABLE_CONNECTIONS,_ID + "=?",new String[]{String.valueOf(connection.persistenceId())});  db.close();}  }
class C{  static int limitToPositiveInt(long value){  if (value > (long)Integer.MAX_VALUE) {    return Integer.MAX_VALUE;  } else   if (value < 0) {    return 0;  }  return (int)value;}  }
class C{  public void removePrimary(InternalDistributedMember member){  boolean needToVolunteerForPrimary=false;  if (!isClosed()) {    initializationGate();  }  boolean lostPrimary=false;  try {synchronized (this) {      boolean wasPrimary=isPrimary() && this.getDistributionManager().getId().equals(member);      final InternalDistributedMember currentPrimary=(InternalDistributedMember)this.primaryMember.get();      if (currentPrimary != null && currentPrimary.equals(member)) {        if (logger.isDebugEnabled()) {          logger.debug("[BucketAdvisor.notPrimary] {} for {}",member,this);        }        this.primaryMember.set(null);      } else {        return;      }      if (isClosed()) {        return;      }      if (isHosting()) {        requestPrimaryState(NO_PRIMARY_HOSTING);        if (this.pRegion.isFixedPartitionedRegion()) {          InternalDistributedMember primaryMember=this.regionAdvisor.adviseFixedPrimaryPartitionDataStore(this.getBucket().getId());          if (primaryMember == null || primaryMember.equals(member)) {            needToVolunteerForPrimary=true;          } else {            needToVolunteerForPrimary=false;          }        } else {          needToVolunteerForPrimary=true;        }      } else {        requestPrimaryState(NO_PRIMARY_NOT_HOSTING);      }      if (wasPrimary) {        lostPrimary=true;      }      findAndSetPrimaryMember();    }  }  finally {    if (lostPrimary) {      Bucket br=this.regionAdvisor.getBucket(getBucket().getId());      if (br != null && br instanceof BucketRegion) {        ((BucketRegion)br).beforeReleasingPrimaryLockDuringDemotion();      }      releasePrimaryLock();      deposePrimaryForColocatedChildren();      if (this.pRegion.isFixedPartitionedRegion()) {        deposeOtherPrimaryBucketForFixedPartition();      }    }  }  if (needToVolunteerForPrimary) {    volunteerForPrimary();  }}  }
class C{  public void create_arg_array(){  push(state.argumentTypes.length);  newarray();  for (int i=0; i < state.argumentTypes.length; i++) {    dup();    push(i);    load_arg(i);    box(state.argumentTypes[i]);    aastore();  }}  }
class C{  public void test_GetS(){  assertEquals("wrong private value",s,ecpks.getS());}  }
class C{  public void updateSelection(boolean active){  this.active=active;  for (int i=0, n=selectedNodes.size(); i < n; i++) {    D nodeData=selectedNodes.get(i);    TreeNodeElement<D> renderedNode=dataAdapter.getRenderedTreeNode(nodeData);    if (renderedNode != null) {      renderedNode.setSelected(true,active,css);    }  }}  }
class C{  public void updateContent(InputStream content) throws ForbiddenException, ServerException {  getVirtualFile().updateContent(content,null);}  }
class C{  private void convertToResourceAndCheckConfigurationMatches(String configuration,DataSourceFixture dataSourceFixture,String resourceType) throws Exception {  Resource resource=converter.convertToResource(dataSourceFixture.buildDataSource(),resourceType,"driverClassName");  resource.setParameter("factory",getDataSourceFactory());  checkConfigurationMatchesResource(configuration,resource);}  }
class C{  public static String decodeEndpointURI(String endpoint){  int ind=endpoint.indexOf('[');  if (ind == 0) {    return null;  } else   if (ind != -1) {    return endpoint.substring(0,ind);  }  return endpoint;}  }
class C{  private boolean isSelfOnly(Map<String,List<String>> params,String criteria){  for (  Map.Entry<String,List<String>> entry : params.entrySet()) {    if (entry.getKey().equals(SEARCH_LEVEL)) {      for (      String searchValue : entry.getValue()) {        if (searchValue.equals("true")) {          return true;        } else         if (searchValue.equals("false")) {          return false;        } else {          throw APIException.badRequests.invalidParameter(entry.getKey(),searchValue);        }      }    }  }  return false;}  }
class C{  public void interruptFollowDelayed(){  mHasContentChangeMessage=false;  removeMessages(FOCUS_AFTER_CONTENT_CHANGED);}  }
class C{  public List<T> topologicalSort(Consumer<Node<T>> cycleHandler){  List<Node<T>> allNodes=new ArrayList<Node<T>>(nodes.values());  ArrayList<Node<T>> L=new ArrayList<Node<T>>();  LinkedHashSet<Node<T>> S=new LinkedHashSet<Node<T>>();  for (  Node<T> n : allNodes) {    if (n.inEdges.size() == 0) {      S.add(n);    }  }  while (!S.isEmpty()) {    Node<T> n=S.iterator().next();    S.remove(n);    L.add(n);    for (Iterator<Edge<T>> it=new ArrayList<>(n.outEdges).iterator(); it.hasNext(); ) {      Edge<T> e=it.next();      Node<T> m=e.to;      n.useOutEdge(e);      m.useInEdge(e);      if (m.inEdges.isEmpty()) {        S.add(m);      }    }  }  for (  Node<T> n : allNodes) {    if (!n.inEdges.isEmpty()) {      if (cycleHandler != null) {        cycleHandler.accept(n);      }    }  }  for (  Node<T> n : allNodes) {    n.resetEdges();  }  return toElements(L);}  }
class C{  public Year(){  super("year",TextTemplateMessages.MESSAGES.variableDescriptionYear());}  }
class C{  public byte[] content(){  return content;}  }
class C{  public java.util.ArrayList<TreeNode<E>> path(E e){  java.util.ArrayList<TreeNode<E>> list=new java.util.ArrayList<>();  TreeNode<E> current=root;  while (current != null) {    list.add(current);    if (comparator.compare(e,current.element) < 0) {      current=current.left;    } else     if (comparator.compare(e,current.element) > 0) {      current=current.right;    } else     break;  }  return list;}  }
class C{  public static final int leadingSpaces(String str){  return str.length() - trimFront(str).length();}  }
class C{  public int autoAddParameters(DataSet data){  Parameterized obj;  if (baseClassifier != null)   obj=(Parameterized)baseClassifier; else   obj=(Parameterized)baseRegressor;  int totalParms=0;  for (  Parameter param : obj.getParameters()) {    Distribution dist;    if (param instanceof DoubleParameter) {      dist=((DoubleParameter)param).getGuess(data);      if (dist != null) {        addParameter((DoubleParameter)param,dist);        totalParms++;      }    } else     if (param instanceof IntParameter) {      dist=((IntParameter)param).getGuess(data);      if (dist != null) {        addParameter((IntParameter)param,dist);        totalParms++;      }    }  }  return totalParms;}  }
class C{  public static boolean usingWindowsClassicLnf(){  return usingLnf(WindowsClassicLookAndFeel.class);}  }
class C{  public String noHeaderRowPresentTipText(){  return "First row of data does not contain attribute names";}  }
class C{  @Override public String fromURI(final URI uri){  if (uri == null) {    throw new IllegalArgumentException();  }  final String s=uri.stringValue();  final String id;  if (s.startsWith(ID)) {    id=s.substring(ID.length());  } else {    id=s;  }  try {    return URLDecoder.decode(id,"UTF-8");  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException(e);  }}  }
class C{  public boolean returnValue(){  return returnValue;}  }
class C{  public static String nanoSecToString(long nS){  long rem_nS=(long)(nS % 1000.0);  long rem_uS=(long)((nS / 1000.0) % 1000.0);  long rem_mS=(long)((nS / 1000000.0) % 1000.0);  long sec=(long)(nS / 1000000000.0);  String nSstr=zeroPad(Long.toString(rem_nS),3);  String uSstr=zeroPad(Long.toString(rem_uS),3);  String mSstr=zeroPad(Long.toString(rem_mS),3);  return String.format("%d.%3s %3s %3s",sec,mSstr,uSstr,nSstr);}  }
class C{  public final IRequest fireMessage(Address recipient,String type,Object object){  try {    return base.fireMessage(new Message(new Address(getName()),recipient,type,object));  } catch (  IOException e) {    return new StaticRequest(IRequest.ERROR,e);  }}  }
class C{  public TDoubleIntHashMap(int initialCapacity,TDoubleHashingStrategy strategy){  super(initialCapacity,strategy);}  }
class C{  public AttributeMetadata<D> bind(MetadataContext context){  return schema.bind(parent,attKey,context);}  }
class C{  public void startLeaderSelector() throws InterruptedException {  while (!coordinator.getCoordinatorClient().isConnected()) {    log.info("waiting for connecting to zookeeper");    try {      Thread.sleep(BackupConstants.BACKUP_WAINT_BEFORE_RETRY_ZK_CONN);    } catch (    InterruptedException e) {      log.warn("Exception while sleeping,ignore",e);      throw e;    }  }  singletonInstance=this;  if (drUtil.isStandby()) {    log.info("Current site is standby, disable BackupScheduler");    return;  }  this.cfg=new SchedulerConfig(coordinator,this.encryptionProvider,this.dbClient);  LeaderSelector leaderSelector=coordinator.getCoordinatorClient().getLeaderSelector(coordinator.getCoordinatorClient().getSiteId(),BackupConstants.BACKUP_LEADER_PATH,new BackupLeaderSelectorListener());  leaderSelector.autoRequeue();  leaderSelector.start();}  }
class C{  public static Drawable bitmapToDrawable(Bitmap b){  return b == null ? null : new BitmapDrawable(b);}  }
class C{  public void compile(String fileName,LineMap lineMap) throws IOException, ClassNotFoundException {  compile(fileName,lineMap,false);}  }
class C{  public static Object invokePrivateMethodForPrimitiveArgs(Object target,String methodName,Class<?>[] parameterTypes,Object... values) throws Exception {  Method method=target.getClass().getDeclaredMethod(methodName,parameterTypes);  method.setAccessible(true);  return method.invoke(target,values);}  }
class C{  @Override public int update(Uri uri,ContentValues values,String where,String[] whereArgs){  SQLiteDatabase db=mOpenHelper.getWritableDatabase();  int count;  String finalWhere;switch (mUriMatcher.match(uri)) {case MAIN:    count=db.update(MainTable.TABLE_NAME,values,where,whereArgs);  break;case MAIN_ID:finalWhere=DatabaseUtils.concatenateWhere(MainTable._ID + " = " + ContentUris.parseId(uri),where);count=db.update(MainTable.TABLE_NAME,values,finalWhere,whereArgs);break;default :throw new IllegalArgumentException("Unknown URI " + uri);}getContext().getContentResolver().notifyChange(uri,null);return count;}  }
class C{  public Date rollDate(Date base,TimeZone zone){  Calendar calendar=Calendar.getInstance(zone);  calendar.setTime(base);  calendar.add(this.rollUnitType.getCalendarField(),this.rollCount);  return calendar.getTime();}  }
class C{  @MediumTest public void testSubLaunch(){  Forwarding activity=startActivity(mStartIntent,null,null);  mButton=(Button)activity.findViewById(R.id.go);  mButton.performClick();  assertNotNull(getStartedActivityIntent());  assertTrue(isFinishCalled());}  }
class C{  @HLEFunction(nid=0x6138194A,version=150) public int sceNetResolverTerm(){  return 0;}  }
class C{  public String toResourceName(){  return className + ".class";}  }
class C{  public ServerListAdapter(){  loadServers();}  }
class C{  private Set<StoragePort> filterCandidates(Set<StoragePort> candidates,Set<String> allocatedEntitySet,Map<String,Set<StoragePort>> contextEntityMap){  if (false == contextEntityMap.isEmpty()) {    Map<String,Set<StoragePort>> newEntityMap=removeStoragePortSets(allocatedEntitySet,contextEntityMap);    if (newEntityMap.isEmpty() == false) {      Set<StoragePort> newEngineSet=andStoragePortSets(candidates,reduceStoragePortMap(newEntityMap));      if (newEngineSet.isEmpty() == false) {        candidates=newEngineSet;      }    } else {      _log.debug("Used all entities: " + allocatedEntitySet.toString());      allocatedEntitySet.clear();    }  }  return candidates;}  }
class C{  public SortClause(String item,String order){  this(item,ORDER.valueOf(order));}  }
class C{  public ASTFlattener(){  this.fBuffer=new StringBuffer();}  }
class C{  public static Path createTempFileInSameDir(String fileName) throws IOException {  Path target=Paths.get(fileName);  Path parentPath=target.getParent();  return DefaultFilepaths.createTempFile(parentPath,null,null);}  }
class C{  @Override protected void finalize() throws Throwable {  mThread=null;  mThreadRunnable=null;  mDownloaders=null;  super.finalize();}  }
class C{  public void testBasics() throws Exception {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document document=new Document();  document.add(new FloatRangeField(FIELD_NAME,new float[]{-10.0f,-10.0f},new float[]{9.1f,10.1f}));  writer.addDocument(document);  document=new Document();  document.add(new FloatRangeField(FIELD_NAME,new float[]{10.0f,-10.0f},new float[]{20.0f,10.0f}));  writer.addDocument(document);  document=new Document();  document.add(new FloatRangeField(FIELD_NAME,new float[]{-20.0f,-20.0f},new float[]{30.0f,30.1f}));  writer.addDocument(document);  document=new Document();  document.add(new FloatRangeField(FIELD_NAME,new float[]{-11.1f,-11.2f},new float[]{1.23f,11.5f}));  writer.addDocument(document);  document=new Document();  document.add(new FloatRangeField(FIELD_NAME,new float[]{12.33f,1.2f},new float[]{15.1f,29.9f}));  writer.addDocument(document);  document=new Document();  document.add(new FloatRangeField(FIELD_NAME,new float[]{-122.33f,1.2f},new float[]{-115.1f,29.9f}));  writer.addDocument(document);  document=new Document();  document.add(new FloatRangeField(FIELD_NAME,new float[]{Float.NEGATIVE_INFINITY,1.2f},new float[]{-11.0f,29.9f}));  writer.addDocument(document);  document=new Document();  document.add(new FloatRangeField(FIELD_NAME,new float[]{-11f,-15f},new float[]{15f,20f}));  writer.addDocument(document);  IndexReader reader=writer.getReader();  IndexSearcher searcher=newSearcher(reader);  assertEquals(7,searcher.count(FloatRangeField.newIntersectsQuery(FIELD_NAME,new float[]{-11.0f,-15.0f},new float[]{15.0f,20.0f})));  assertEquals(2,searcher.count(FloatRangeField.newWithinQuery(FIELD_NAME,new float[]{-11.0f,-15.0f},new float[]{15.0f,20.0f})));  assertEquals(2,searcher.count(FloatRangeField.newContainsQuery(FIELD_NAME,new float[]{-11.0f,-15.0f},new float[]{15.0f,20.0f})));  reader.close();  writer.close();  dir.close();}  }
class C{  public void addMovieSet(MovieSet movieSet){synchronized (root) {    MovieSetTreeNode child=new MovieSetTreeNode(movieSet);    nodeMap.put(movieSet,child);    root.add(child);    root.sort();    int index=root.getIndex(child);    TreeModelEvent event=new TreeModelEvent(this,root.getPath(),new int[]{index},new Object[]{child});    for (    TreeModelListener listener : listeners) {      listener.treeNodesInserted(event);    }  }  movieSet.addPropertyChangeListener(propertyChangeListener);}  }
class C{  protected void addScriptingListenersOn(Element elt){  String eltNS=elt.getNamespaceURI();  String eltLN=elt.getLocalName();  if (SVGConstants.SVG_NAMESPACE_URI.equals(eltNS) && SVG12Constants.SVG_HANDLER_TAG.equals(eltLN)) {    AbstractElement tgt=(AbstractElement)elt.getParentNode();    String eventType=elt.getAttributeNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,XMLConstants.XML_EVENTS_EVENT_ATTRIBUTE);    String eventNamespaceURI=XMLConstants.XML_EVENTS_NAMESPACE_URI;    if (eventType.indexOf(':') != -1) {      String prefix=DOMUtilities.getPrefix(eventType);      eventType=DOMUtilities.getLocalName(eventType);      eventNamespaceURI=((AbstractElement)elt).lookupNamespaceURI(prefix);    }    EventListener listener=new HandlerScriptingEventListener(eventNamespaceURI,eventType,(AbstractElement)elt);    tgt.addEventListenerNS(eventNamespaceURI,eventType,listener,false,null);    if (handlerScriptingListeners == null) {      handlerScriptingListeners=new TriplyIndexedTable();    }    handlerScriptingListeners.put(eventNamespaceURI,eventType,elt,listener);  }  super.addScriptingListenersOn(elt);}  }
class C{  public void deleteField(int fieldIndex){  if (fieldIndex < 0 || fieldIndex >= getRowCount()) {    return;  }  if (newFields.containsKey(fieldIndex)) {    newFields.remove(fieldIndex);  } else {    DBFField deletedField=attributeTable.getField(fieldIndex);    deletedFields.put(fieldIndex,deletedField);  }  fireTableRowsUpdated(fieldIndex,fieldIndex);}  }
class C{  @Override public boolean onTouchEvent(MotionEvent ev){  int actionMasked=MotionEventCompat.getActionMasked(ev);  if ((actionMasked & MotionEventCompat.ACTION_MASK) == MotionEvent.ACTION_DOWN) {    mActivePointerId=MotionEventCompat.getPointerId(ev,actionMasked);  }  if (mActivePointerId == INVALID_POINTER) {    return false;  }  mViewDragHelper.processTouchEvent(ev);  return ViewHelper.isViewHit(mContainer,this,(int)ev.getX(),(int)ev.getY());}  }
class C{  public void testServerController() throws Exception {  if (this.baseDir != null) {    System.out.println("Starting server @ " + this.baseDir);    ServerController controller=new ServerController(this.baseDir);    System.out.println(controller.start());    System.out.println("Hit enter to stop server....");    System.in.read();    controller.stop(true);  }}  }
class C{  public static boolean isUnixOS(){  String osName=System.getProperty("os.name");  return osName != null && osName.toLowerCase().contains("unix");}  }
class C{  public void createPerUnitDaySteppedScenario() throws Exception {  setDateFactory("2013-04-01 00:00:00");  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"PER_UNIT_DAY_STEPPED_SERVICE",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_DAY_EVENTS_PARS_STEPPED,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService(basicSetup.getCustomerAdminKey(),"PER_UNIT_DAY_STEPPED",serviceDetails,basicSetup.getSecondCustomerUser1(),VOServiceFactory.getRole(serviceDetails,"ADMIN"));  container.login(basicSetup.getSupplierAdminKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  subscrSetup.recordEventForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-04-02 00:00:00"),"FILE_DOWNLOAD",100);  setDateFactory("2013-04-04 12:00:00");  subscrSetup.unsubscribeToService(basicSetup.getCustomerAdminKey(),subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PER_UNIT_DAY_STEPPED",subDetails);}  }
class C{  public int cellToOffset(int row,int col){  if (row < 0 || row >= getRowCount() || col < 0 || col > 15) {    return -1;  }  int offs=row * 16 + col;  return (offs >= 0 && offs < model.getByteCount()) ? offs : -1;}  }
class C{  protected final void flushRewriteSession(){  fActiveRewriteSession=null;  try {    fDocument.removePositionCategory(fPositionCategory);  } catch (  BadPositionCategoryException x) {  }  fDocument.addPositionCategory(fPositionCategory);  fIsInitialized=false;}  }
class C{  public static boolean saveReminder(Reminder reminder){  if (doesReminderExist(reminder.uuid))   return updateReminder(reminder); else   return addReminder(reminder);}  }
class C{  public static <K extends Comparable<K>,V extends Comparable<V>>Map<K,V> createByValueSortedConcurrentMap(Map<K,V> map,Comparator<V> comparator){  return new ByValueSortingConcurrentSkipListMap<>(ByValueComparator.create(map,comparator));}  }
class C{  public int size(){  return size;}  }
class C{  public static String encodeUrl(final String str){  return encode(str,"%20");}  }
class C{  private void clearFeatureFridayEmotes(){  listener.channelEmoticonsReceived(new EmoticonUpdate(null,Emoticon.Type.FFZ,Emoticon.SubType.FEATURE_FRIDAY,null));}  }
class C{  public boolean isAntialiasing(){  return mAntialiasing;}  }
class C{  public Notifications darkStyle(){  styleClass.add(STYLE_CLASS_DARK);  return this;}  }
class C{  public void showAlert(String message){}  }
class C{  public void printf(String format,Object... args){  out.printf(LOCALE,format,args);  out.flush();}  }
class C{  public void push(char val){  this.push(new BaseTypeWrapper(val));}  }
class C{  public void testBoost() throws Exception {  XmlDoc xml=new XmlDoc();  xml.xml="<doc>" + "<field name=\"id\">0</field>" + "<field name=\"title\" boost=\"3.0\">mytitle</field>"+ "</doc>";  assertNull(h.validateUpdate(add(xml,new String[0])));}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  static private char[] skipWhitespacesSuffix(char[] data){  for (int i=data.length - 1; i >= 0; i--) {    if (!XMLChar.isSpace(data[i])) {      if (i == data.length - 1) {        return data;      } else {        return Arrays.copyOfRange(data,0,i + 1);      }    }  }  return new char[0];}  }
class C{  private void dialogChanged(){  if (getContainerName().length() == 0) {    updateStatus("The name of the containing folder must be specified");    return;  }  final String fileName=getFileName();  if (fileName.length() == 0) {    updateStatus("The name of the model file must be specified");    return;  }  if (fileName.replace('\\','/').indexOf('/',1) > 0) {    updateStatus("The name of the model file is not valid");    return;  }  if (!fileName.endsWith(".gaml")) {    updateStatus("GAML file extension must be \".gaml\"");    return;  }  final String author=getAuthor();  final String titleName=getModelName();  if (author.length() == 0) {    updateStatus("The name of the author must be specified");    return;  }  if (titleName.length() == 0) {    updateStatus("The name of the model must be specified");    return;  }  final IResource resource=ResourcesPlugin.getWorkspace().getRoot().findMember(new Path(getContainerName()));  final IContainer container=(IContainer)resource;  if (container != null) {    final IFile modelfile=container.getFile(new Path(fileName));    final IFile htmlfile=container.getProject().getFile(new Path("doc/" + titleName + ".html"));    if (modelfile.exists()) {      updateStatus("A model file with the same name already exists");      return;    }    if (htmlfile.exists()) {      updateStatus("Model name already defined in documentation");      return;    }  }  updateStatus(null);}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  public static byte[] decodeFromFile(String filename) throws java.io.IOException {  byte[] decodedData=null;  B64InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=null;    int length=0;    int numBytes=0;    if (file.length() > Integer.MAX_VALUE) {      throw new java.io.IOException("File is too big for this convenience method (" + file.length() + " bytes).");    }    buffer=new byte[(int)file.length()];    bis=new B64InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.DECODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    decodedData=new byte[length];    System.arraycopy(buffer,0,decodedData,0,length);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return decodedData;}  }
class C{  protected static char possBareHTMLEntityWithSemicolonToChar(String possBareEntityWithSemicolon,char translateNbspTo){  if (possBareEntityWithSemicolon.length() < SHORTEST_ENTITY - 1) {    return 0;  }  int whereSemi=possBareEntityWithSemicolon.indexOf(';',SHORTEST_ENTITY - 2);  if (whereSemi < SHORTEST_ENTITY - 2) {    return 0;  }  return bareHTMLEntityToChar(possBareEntityWithSemicolon.substring(0,whereSemi),translateNbspTo);}  }
class C{  static void validateLaunchCreateNotice(@Nullable LaunchNotice notice,String domainLabel,boolean isSuperuser,DateTime now) throws EppException {  if (notice == null) {    return;  }  if (!notice.getNoticeId().getValidatorId().equals("tmch")) {    throw new InvalidTrademarkValidatorException();  }  if (!isSuperuser) {    if (notice.getExpirationTime().isBefore(now)) {      throw new ExpiredClaimException();    }    if (notice.getAcceptedTime().isBefore(now.minusHours(48))) {      throw new AcceptedTooLongAgoException();    }  }  try {    notice.validate(domainLabel);  } catch (  IllegalArgumentException e) {    throw new MalformedTcnIdException();  }catch (  InvalidChecksumException e) {    throw new InvalidTcnIdChecksumException();  }}  }
class C{  private void buildBrokenLines(Rect r){  LinePath[] baseLines=new LinePath[mConfig.complexity];  buildBaselines(baseLines,r);  PathMeasure pmTemp=new PathMeasure();  for (int i=0; i < mConfig.complexity; i++) {    lineRifts[i]=new LinePath();    lineRifts[i].moveTo(0,0);    lineRifts[i].setEndPoint(baseLines[i].getEndPoint());    pmTemp.setPath(baseLines[i],false);    float length=pmTemp.getLength();    final int THRESHOLD=SEGMENT + SEGMENT / 2;    if (length > Utils.dp2px(THRESHOLD)) {      lineRifts[i].setStraight(false);      float[] pos=new float[2];      pmTemp.getPosTan(Utils.dp2px(SEGMENT),pos,null);      lineRifts[i].lineTo(pos[0],pos[1]);      lineRifts[i].points.add(new Point((int)pos[0],(int)pos[1]));      int xRandom, yRandom;      int step=Utils.dp2px(THRESHOLD);      do {        pmTemp.getPosTan(step,pos,null);        xRandom=(int)(pos[0] + Utils.nextInt(-Utils.dp2px(3),Utils.dp2px(2)));        yRandom=(int)(pos[1] + Utils.nextInt(-Utils.dp2px(2),Utils.dp2px(3)));        lineRifts[i].lineTo(xRandom,yRandom);        lineRifts[i].points.add(new Point(xRandom,yRandom));        step+=Utils.dp2px(SEGMENT);      } while (step < length);      lineRifts[i].lineToEnd();    } else {      lineRifts[i]=baseLines[i];      lineRifts[i].setStraight(true);    }    lineRifts[i].points.add(lineRifts[i].getEndPoint());  }}  }
class C{  public SqlFieldsQuery(String sql,boolean collocated){  this.sql=sql;  this.collocated=collocated;}  }
class C{  public final LC insets(String top,String left,String bottom,String right){  insets=new UnitValue[]{ConstraintParser.parseUnitValue(top,false),ConstraintParser.parseUnitValue(left,true),ConstraintParser.parseUnitValue(bottom,false),ConstraintParser.parseUnitValue(right,true)};  return this;}  }
class C{  public CSVWriter(BaseSerDe serde){  this(DEFAULT_SEPARATOR);  this.baseSerDe=serde;}  }
class C{  public void createSubUsageScenario10() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.daysToMillis(15.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO10_PERUNIT_MONTH",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_MONTH_ROLES,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO10_PERUNIT_MONTH",serviceDetails,basicSetup.getCustomerUser1(),role);  VOServiceDetails upgradeService=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO10_PERUNIT_MONTH_UPGRADE_SERVICE",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_MONTH_ROLES_2,technicalService,supplierMarketplace);  serviceSetup.registerCompatibleServices(basicSetup.getSupplierAdminKey(),serviceDetails,upgradeService);  long usageUpgradeTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.daysToMillis(10);  BillingIntegrationTestBase.setDateFactoryInstance(usageUpgradeTime);  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails upgradedSubDetails=subscrSetup.upgradeSubscription(subDetails,upgradeService);  long usageEndTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") + DateTimeHandling.daysToMillis(15.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO10_PERUNIT_MONTH",subDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO10_PERUNIT_MONTH",upgradedSubDetails);}  }
class C{  public ReactionTrigger createReactionTrigger(){  ReactionTriggerImpl reactionTrigger=new ReactionTriggerImpl();  return reactionTrigger;}  }
class C{  public boolean isCommitted(){  return stack.isEmpty();}  }
class C{  public static IJavaProject createJavaProject(String projectName,String binFolderName) throws CoreException {  IWorkspaceRoot root=ResourcesPlugin.getWorkspace().getRoot();  IProject project=root.getProject(projectName);  if (!project.exists()) {    project.create(null);  } else {    project.refreshLocal(IResource.DEPTH_INFINITE,null);  }  if (!project.isOpen()) {    project.open(null);  }  IPath outputLocation;  if (binFolderName != null && binFolderName.length() > 0) {    IFolder binFolder=project.getFolder(binFolderName);    if (!binFolder.exists()) {      CoreUtility.createFolder(binFolder,false,true,null);    }    outputLocation=binFolder.getFullPath();  } else {    outputLocation=project.getFullPath();  }  IFolder codenvyFolder=project.getFolder(".codenvy");  if (!codenvyFolder.exists()) {    CoreUtility.createFolder(codenvyFolder,false,true,null);  }  IJavaProject jproject=JavaCore.create(project);  jproject.setRawClasspath(new IClasspathEntry[0],null);  IFolder folder=project.getFolder(JavaProject.INNER_DIR);  CoreUtility.createFolder(folder,true,true,null);  return jproject;}  }
class C{  public static void w(String tag,String message){  if (DEBUG_ON) {    Log.w(tag,message);  }}  }
class C{  public EditingModalGraphMouse(RenderContext<V,E> rc,Supplier<V> vertexFactory,Supplier<E> edgeFactory,float in,float out){  super(in,out);  this.vertexFactory=vertexFactory;  this.edgeFactory=edgeFactory;  this.rc=rc;  this.basicTransformer=rc.getMultiLayerTransformer();  loadPlugins();  setModeKeyListener(new ModeKeyAdapter(this));}  }
class C{  public Terrain(int terrainSize,float scale,float minY,float maxY,String heightMapFile,String textureFile,int textInc) throws Exception {  this.terrainSize=terrainSize;  gameItems=new GameItem[terrainSize * terrainSize];  BufferedImage heightMapImage=ImageIO.read(getClass().getResourceAsStream(heightMapFile));  verticesPerCol=heightMapImage.getWidth() - 1;  verticesPerRow=heightMapImage.getHeight() - 1;  heightMapMesh=new HeightMapMesh(minY,maxY,heightMapImage,textureFile,textInc);  boundingBoxes=new Rectangle2D.Float[terrainSize][terrainSize];  for (int row=0; row < terrainSize; row++) {    for (int col=0; col < terrainSize; col++) {      float xDisplacement=(col - ((float)terrainSize - 1) / (float)2) * scale * HeightMapMesh.getXLength();      float zDisplacement=(row - ((float)terrainSize - 1) / (float)2) * scale * HeightMapMesh.getZLength();      GameItem terrainBlock=new GameItem(heightMapMesh.getMesh());      terrainBlock.setScale(scale);      terrainBlock.setPosition(xDisplacement,0,zDisplacement);      gameItems[row * terrainSize + col]=terrainBlock;      boundingBoxes[row][col]=getBoundingBox(terrainBlock);    }  }}  }
class C{  public Vector3 pow(double power){  return Vector3.pow(this,power);}  }
class C{  public DocViewerComponent(String name){  super(name);}  }
class C{  public synchronized void connect(boolean useRtuOverTcp) throws Exception {  if (connection != null && !connection.isConnected()) {    connection.connect(useRtuOverTcp);    transaction=connection.getModbusTransport().createTransaction();    ((ModbusTCPTransaction)transaction).setReconnecting(reconnecting);    setTransaction(transaction);  }}  }
class C{  private double calculateMutualInformation(double[][] jointProbabilities){  double entropy1, entropy2, jointEntropy;  entropy1=calculateEntropy(jointProbabilities[1][0] + jointProbabilities[1][1],jointProbabilities[0][0] + jointProbabilities[0][1]);  entropy2=calculateEntropy(jointProbabilities[0][1] + jointProbabilities[1][1],jointProbabilities[0][0] + jointProbabilities[1][0]);  jointEntropy=calculateEntropy(jointProbabilities[0][0],jointProbabilities[0][1],jointProbabilities[1][0],jointProbabilities[1][1]);  return entropy1 + entropy2 - jointEntropy;}  }
class C{  public UTFDataFormatException(java.lang.String s){}  }
class C{  private void removeNonZero(int nzIndex){  for (int i=nzIndex + 1; i < used; i++) {    values[i - 1]=values[i];    indexes[i - 1]=indexes[i];  }  used--;}  }
class C{  protected TransactionInfo createTransactionIfNecessary(Method method,Class targetClass){  TransactionAttribute txAttr=getTransactionAttributeSource().getTransactionAttribute(method,targetClass);  PlatformTransactionManager tm=determineTransactionManager(txAttr);  return createTransactionIfNecessary(tm,txAttr,methodIdentification(method,targetClass));}  }
class C{  private void connectionLostAction(Bundle data){  if (callback != null) {    Exception reason=(Exception)data.getSerializable(MqttServiceConstants.CALLBACK_EXCEPTION);    callback.connectionLost(reason);  }}  }
class C{  public Interpreter interpreter(){  return interpreter;}  }
class C{  public SymbolTableEntryInternal steFor_$spawn(){  return getSymbolTableEntryInternal("$spawn",true);}  }
class C{  public void generate(OutputStream contentStream,OutputProperties request,MediaSource source) throws IOException {  MediaSource.Output.writeTo(source,contentStream);}  }
class C{  public Boolean addCartEvent(CartEvent cartEvent){  User user=getAuthenticatedUser();  if (user != null) {    cartEvent.setUserId(user.getId());    cartEventRepository.save(cartEvent);  } else {    return null;  }  return true;}  }
class C{  public String toString(String separator,boolean parentheses){  StringBuilder b=new StringBuilder(50);  if (parentheses)   b.append("(");  b.append(x);  b.append(separator);  b.append(y);  b.append(separator);  b.append(z);  if (parentheses)   b.append(")");  return b.toString();}  }
class C{  @Override public void visitTrack(Track track){  DefaultEntityViewInfo vInfo=(DefaultEntityViewInfo)track.getViewInfo();  if (vInfo != null && scale >= vInfo.minVisibleScale * displayFactor) {    trackBuffer.add(track);  }}  }
class C{  public PlayerVisitedZonesInRegionCondition(String region,Boolean exterior,Boolean aboveGround){  this(region,exterior,aboveGround,Boolean.TRUE);}  }
class C{  public void released(int x,int y){  state=STATE_ROLLOVER;  fireActionEvent(x,y);  repaint();}  }
class C{  public void writeDetails(javax.xml.namespace.QName qname,org.apache.axis.encoding.SerializationContext context) throws java.io.IOException {  context.serialize(qname,null,this);}  }
class C{  public JavaPairRDD<Envelope,HashSet<Point>> SpatialJoinQueryUsingIndex(PointRDD pointRDD,RectangleRDD rectangleRDD){  if (pointRDD.indexedRDD == null) {    throw new NullPointerException("Need to invoke buildIndex() first, indexedRDD is null");  }  if (pointRDD.gridPointRDD == null) {    throw new NullPointerException("Need to do spatial partitioning first, gridedSRDD is null");  }  JavaPairRDD<Integer,Tuple2<Iterable<STRtree>,Iterable<Envelope>>> cogroupResult=pointRDD.indexedRDD.cogroup(this.rectangleRDD.gridRectangleRDD);  JavaPairRDD<Envelope,HashSet<Point>> joinResultWithDuplicates=cogroupResult.flatMapToPair(new PointByRectangleJudgementUsingIndex(pointRDD.grids.size()));  JavaPairRDD<Envelope,HashSet<Point>> joinListResultAfterAggregation=aggregateJoinResultPointByRectangle(joinResultWithDuplicates);  return joinListResultAfterAggregation;}  }
class C{  public static void clearRemaining(ByteBuffer buffer){  if (!buffer.hasRemaining()) {    return;  }  int pos=buffer.position();  clearRange(buffer,pos,pos + buffer.remaining());}  }
class C{  @Override public Adapter createAdapter(Notifier target){  return modelSwitch.doSwitch((EObject)target);}  }
class C{  public static TagEmotes parseEmotesTag(String tag){  Map<Integer,TagEmote> result=new HashMap<>();  if (tag == null) {    return null;  }  String[] emotes=tag.split("/");  for (  String emote : emotes) {    int idEnd=emote.indexOf(":");    if (idEnd > 0) {      try {        int id=Integer.parseInt(emote.substring(0,idEnd));        String[] emoteRanges=emote.substring(idEnd + 1).split(",");        for (        String range : emoteRanges) {          String[] rangeSplit=range.split("-");          int start=Integer.parseInt(rangeSplit[0]);          int end=Integer.parseInt(rangeSplit[1]);          if (end > start && start >= 0) {            result.put(start,new TagEmote(id,end));          }        }      } catch (      NumberFormatException|ArrayIndexOutOfBoundsException ex) {      }    }  }  return new TagEmotes(result);}  }
class C{  public void attributeDecl(String eName,String aName,String type,String valueDefault,String value) throws SAXException {  if (m_inExternalDTD)   return;  try {    final java.io.Writer writer=m_writer;    DTDprolog();    writer.write("<!ATTLIST ");    writer.write(eName);    writer.write(' ');    writer.write(aName);    writer.write(' ');    writer.write(type);    if (valueDefault != null) {      writer.write(' ');      writer.write(valueDefault);    }    writer.write('>');    writer.write(m_lineSep,0,m_lineSepLen);  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  public RectListManager(){  this.rects=new Rectangle[10];  size=0;}  }
class C{  private static int findCommonRootEndPosition(final String[] localItems){  int index=localItems[0].indexOf(BuildPath.PATH_SEPERATOR_CHAR);  int rootEndPos=-1;  final int firstItemEndPos=localItems[0].length() - 1;  while (index >= 0) {    final String prefix=localItems[0].substring(0,index + 1);    boolean hasPrefix=true;    for (int i=1; i < localItems.length; i++) {      if (!isPrefixedWithFolderPath(localItems[i],prefix)) {        hasPrefix=false;        break;      }    }    if (!hasPrefix) {      break;    }    rootEndPos=index;    if (index >= firstItemEndPos) {      break;    }    index=localItems[0].indexOf(BuildPath.PATH_SEPERATOR_CHAR,index + 1);    if (index < 0) {      index=firstItemEndPos;    }  }  return rootEndPos;}  }
class C{  boolean hasWaitingRequests(Object name){  DLockGrantToken grant=getGrantToken(name);  if (grant == null)   return false;synchronized (grant) {    return grant.hasWaitingRequests();  }}  }
class C{  public JSONArray optJSONArray(String key){  Object o=this.opt(key);  return o instanceof JSONArray ? (JSONArray)o : null;}  }
class C{  public void exception(Throwable e){  final String msg=e.getMessage();  log(Level.SEVERE,msg != null ? msg : "An exception occurred.",e);}  }
class C{  public Quadrant reflect(int direction){  if (direction == QuadTreeNode.WEST || direction == QuadTreeNode.EAST) {    return cSouthEast;  }  return cNorthWest;}  }
class C{  public SymbolTableEntryInternal steFor_$makeInterface(){  return getSymbolTableEntryInternal("$makeInterface",true);}  }
class C{  public static Map<String,Object> createPaymentPreference(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=new HashMap<String,Object>();  Delegator delegator=ctx.getDelegator();  String orderId=(String)context.get("orderId");  String statusId=(String)context.get("statusId");  String paymentMethodTypeId=(String)context.get("paymentMethodTypeId");  String paymentMethodId=(String)context.get("paymentMethodId");  BigDecimal maxAmount=(BigDecimal)context.get("maxAmount");  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  String prefId=null;  try {    prefId=delegator.getNextSeqId("OrderPaymentPreference");  } catch (  IllegalArgumentException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderErrorCouldNotCreateOrderPaymentPreferenceIdGenerationFailure",locale));  }  Map<String,Object> fields=UtilMisc.<String,Object>toMap("orderPaymentPreferenceId",prefId,"orderId",orderId,"paymentMethodTypeId",paymentMethodTypeId,"paymentMethodId",paymentMethodId,"maxAmount",maxAmount);  if (statusId != null) {    fields.put("statusId",statusId);  }  try {    GenericValue v=delegator.makeValue("OrderPaymentPreference",fields);    v.set("createdDate",UtilDateTime.nowTimestamp());    if (userLogin != null) {      v.set("createdByUserLogin",userLogin.getString("userLoginId"));    }    delegator.create(v);  } catch (  GenericEntityException e) {    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);    result.put(ModelService.ERROR_MESSAGE,UtilProperties.getMessage(resource,"OrderOrderPaymentPreferencesCannotBeCreated",UtilMisc.toMap("errorString",e.getMessage()),locale));    return ServiceUtil.returnFailure();  }  result.put("orderPaymentPreferenceId",prefId);  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  private void updatePhraseChunks(final JCas jCas,final Sentence sentence,final Parse parsed){  removeFromJCasIndex(JCasUtil.selectCovered(jCas,PhraseChunk.class,sentence));  addParsedAsAnnotations(jCas,sentence.getBegin(),parsed);}  }
class C{  protected void doDropFlow(IOFSwitch sw,OFPacketIn pi,FloodlightContext cntx){  if (log.isTraceEnabled()) {    log.trace("doDropFlow pi={} srcSwitch={}",new Object[]{pi,sw});  }  if (sw == null) {    log.warn("Switch is null, not installing drop flowmod for PacketIn {}",pi);    return;  }  OFFlowMod.Builder fmb=sw.getOFFactory().buildFlowModify();  List<OFAction> actions=new ArrayList<OFAction>();  U64 cookie=AppCookie.makeCookie(APP_ID,0);  fmb.setCookie(cookie).setIdleTimeout(ForwardingBase.FLOWMOD_DEFAULT_IDLE_TIMEOUT).setHardTimeout(ForwardingBase.FLOWMOD_DEFAULT_HARD_TIMEOUT).setBufferId(OFBufferId.NO_BUFFER).setMatch(pi.getMatch()).setActions(actions);  if (log.isTraceEnabled()) {    log.trace("write drop flow-mod srcSwitch={} match={} " + "pi={} flow-mod={}",new Object[]{sw,pi.getMatch(),pi,fmb.build()});  }  sw.write(fmb.build());  return;}  }
class C{  @Override public Vertex readVertex(final InputStream inputStream,final Function<Attachable<Vertex>,Vertex> vertexAttachMethod) throws IOException {  throw Io.Exceptions.readerFormatIsForFullGraphSerializationOnly(this.getClass());}  }
class C{  public JCTypeParameter TypeParam(Name name,TypeVar tvar){  return (JCTypeParameter)TypeParameter(name,Types(types.getBounds(tvar))).setPos(pos).setType(tvar);}  }
class C{  public static void i(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_INFO) {    return;  }  Log.i(tag,msg,throwable);}  }
class C{  public void removeChangingListener(OnWheelChangedListener listener){  changingListeners.remove(listener);}  }
class C{  private void buildDecorForPage0(SparkleViewPagerLayout parent,SparkleMotion sparkleMotion){  View view=LayoutInflater.from(parent.getContext()).inflate(R.layout.sparkle_page_0_star,parent,false);  Decor decor=new Decor.Builder(view).setPage(Page.pageRange(0,4)).behindViewPage().withLayer().build();  ScaleAnimation scaleAnimation=new ScaleAnimation(Page.singlePage(0),1f,1f,7f,7f);  sparkleMotion.animate(scaleAnimation).on(decor);}  }
class C{  public static void deleteDirectory(File directory) throws IOException {  if (!directory.exists()) {    return;  }  cleanDirectory(directory);  if (!directory.delete()) {    String message="Unable to delete directory " + directory + ".";    throw new IOException(message);  }}  }
class C{  protected void init(){}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"movzx");  if (instruction.getOperands().size() != 2) {    throw new InternalTranslationException("Error: Argument instruction is not a movzx instruction (invalid number of operand)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final List<? extends IOperandTree> operands=instruction.getOperands();  final IOperandTree destOperand=operands.get(0);  final IOperandTree sourceOperand=operands.get(1);  final TranslationResult sourceResult=Helpers.translateOperand(environment,offset,sourceOperand,true);  instructions.addAll(sourceResult.getInstructions());  offset=baseOffset + instructions.size();  final String sourceRegister=sourceResult.getRegister();  final String destRegister=Helpers.getLeafValue(destOperand.getRootNode());  final OperandSize destSize=Helpers.getRegisterSize(destRegister);  final OperandSize sourceSize=sourceResult.getSize();  if (destSize == environment.getArchitectureSize()) {    instructions.add(ReilHelpers.createOr(offset,destSize,"0",sourceSize,sourceRegister,destSize,destRegister));  } else {    Helpers.moveAndMask(environment,offset,sourceSize,sourceRegister,destRegister,instructions);  }}  }
class C{  public long startTime(){  return startTime;}  }
class C{  public void cancelTask(Task task) throws Exception {  if (task == null || task.getTaskInfo() == null) {    _log.warn("VMware task is null or has no task info. Unable to cancel it.");  } else {    TaskInfoState state=task.getTaskInfo().getState();    if (state == TaskInfoState.queued || state == TaskInfoState.running) {      task.cancelTask();    }  }}  }
class C{  public void reverse(){  Object tmp;  int limit=size / 2;  int j=size - 1;  Object[] theElements=elements;  for (int i=0; i < limit; ) {    tmp=theElements[i];    theElements[i++]=theElements[j];    theElements[j--]=tmp;  }}  }
class C{  public ConcurrentModificationException(String message){  super(message);}  }
class C{  @Override public boolean markSupported(){  return in.markSupported();}  }
class C{  protected boolean addToPendingNodes(final Link l,final Node n,final RouterPriorityQueue<Node> pendingNodes,final double currTime,final double currCost,final Node toNode){  double travelTime=this.timeFunction.getLinkTravelTime(l,currTime,person,vehicle);  double travelCost=this.costFunction.getLinkTravelDisutility(l,currTime,this.person,this.vehicle);  DijkstraNodeData data=getData(n);  double nCost=data.getCost();  if (!data.isVisited(getIterationId())) {    visitNode(n,data,pendingNodes,currTime + travelTime,currCost + travelCost,l);    return true;  }  double totalCost=currCost + travelCost;  if (totalCost < nCost) {    revisitNode(n,data,pendingNodes,currTime + travelTime,totalCost,l);    return true;  }  return false;}  }
class C{  public double eval(double params[]){  double p1=params[0];  double p2=params[1];  double p3=params[2];  double p4=params[3];  return (p1 < p2) ? p3 : p4;}  }
class C{  @Override public int read(char[] buf,int off,int len) throws IOException {  if (len == 0) {    return 0;  }  if (lookaheadChar == UNDEFINED) {    if (ready()) {      lookaheadChar=super.read();    } else {      return -1;    }  }  if (lookaheadChar == -1) {    return -1;  }  int cOff=off;  while (len > 0 && ready()) {    if (lookaheadChar == -1) {      return cOff - off;    } else {      buf[cOff++]=(char)lookaheadChar;      if (lookaheadChar == '\n') {        lineCounter++;      }      lastChar=lookaheadChar;      lookaheadChar=super.read();      len--;    }  }  return cOff - off;}  }
class C{  private void startEventStream(final MXSession session,final IMXStore store){  session.getDataHandler().checkPermanentStorageData();  session.startEventStream(store.getEventStreamToken());  session.getDataHandler().onStoreReady();}  }
class C{  public int next(){  if (_startNode == _currentNode)   return NULL;  _currentNode=_startNode;  return returnNode(_startNode);}  }
class C{  @Override public String toString(){  if (name == null) {    return "Empty InfoPacket that contains no ping information.";  }  int SIZE=1000;  StringBuffer sb=new StringBuffer(SIZE);  sb.append("Ping information for " + name + "\n");  sb.append("Entity Name\tEntry Time\tExit Time\t Bandwidth\n");  sb.append("----------------------------------------------------------\n");  String tab="    ";  for (int i=0; i < entities.size(); i++) {    int resID=entities.get(i).intValue();    sb.append(CloudSim.getEntityName(resID) + "\t\t");    String entry=getData(entryTimes,i);    String exit=getData(exitTimes,i);    String bw=getData(baudRates,i);    sb.append(entry + tab + tab+ exit+ tab+ tab+ bw+ "\n");  }  sb.append("\nRound Trip Time : " + num.format(getTotalResponseTime()));  sb.append(" seconds");  sb.append("\nNumber of Hops  : " + getNumHop());  sb.append("\nBottleneck Bandwidth : " + bandwidth + " bits/s");  return sb.toString();}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case DatatypePackage.TYPE__NAME:    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case DatatypePackage.TYPE__NAMESPACE:  return NAMESPACE_EDEFAULT == null ? namespace != null : !NAMESPACE_EDEFAULT.equals(namespace);case DatatypePackage.TYPE__VERSION:return VERSION_EDEFAULT == null ? version != null : !VERSION_EDEFAULT.equals(version);case DatatypePackage.TYPE__REFERENCES:return references != null && !references.isEmpty();case DatatypePackage.TYPE__DESCRIPTION:return DESCRIPTION_EDEFAULT == null ? description != null : !DESCRIPTION_EDEFAULT.equals(description);case DatatypePackage.TYPE__DISPLAYNAME:return DISPLAYNAME_EDEFAULT == null ? displayname != null : !DISPLAYNAME_EDEFAULT.equals(displayname);case DatatypePackage.TYPE__CATEGORY:return CATEGORY_EDEFAULT == null ? category != null : !CATEGORY_EDEFAULT.equals(category);}return super.eIsSet(featureID);}  }
class C{  public void updateRequestWithReplacement(ParallelTask task,boolean useReplacementVarMap,Map<String,String> replacementVarMap,boolean useReplacementVarMapNodeSpecific,Map<String,StrStrMap> replacementVarMapNodeSpecific){  try {    if (useReplacementVarMap && replacementVarMap != null) {      for (      Entry<String,String> entry : replacementVarMap.entrySet()) {        String replaceVarKey=entry.getKey();        String replaceVarValue=entry.getValue();        VarReplacementProvider.getInstance().updateRequestByAddingReplaceVarPair(task,replaceVarKey,replaceVarValue);      }    }    if (useReplacementVarMapNodeSpecific && replacementVarMapNodeSpecific != null) {      VarReplacementProvider.getInstance().updateRequestByAddingReplaceVarPairNodeSpecific(task,replacementVarMapNodeSpecific);    }  } catch (  Exception e) {    logger.error(" exception updateRequestWithReplacement ",e);  }}  }
class C{  public void testLogNonZeroStart() throws Exception {  File logDir=prepareLogDir("testLogNonZeroStart");  DiskLog log=openLog(logDir,false);  writeEventsToLog(log,100,1);  assertEquals("Should show correct max seqno from single record",100,log.getMaxSeqno());  log.release();  DiskLog log2=openLog(logDir,false);  log.validate();  assertEquals("Should show correct max seqno from single record",100,log.getMaxSeqno());  readBackStoredEvents(log2,100,1);  log2.release();}  }
class C{  private void reset(){  invalidationRequired=false;  invalidationDelayedRequired=false;  setInvalidationDelay(0L);  LOGGER.trace("Reset the view invalidator configuration");}  }
class C{  public static String generateNativeGuid(Hashtable<String,String> cimIndication,String serialNumber){  String prefixTag=cimIndication.get(CIMConstants.SOURCE_INSTANCE_MODEL_PATH_CLASS_PREFIX_TAG).toUpperCase();  _logger.debug("prefixTag :{}",prefixTag);  String compositeId=cimIndication.get(CIMConstants.SOURCE_INSTANCE_MODEL_PATH_COMPOSITE_ID);  _logger.debug("compositeId :{}",compositeId);  if (compositeId != null && compositeId.lastIndexOf("/") != -1) {    compositeId=compositeId.substring(0,compositeId.lastIndexOf("/"));  }  if (serialNumber == null || (serialNumber != null && serialNumber.length() <= 0) || prefixTag == null || (prefixTag != null && prefixTag.length() <= 0) || compositeId == null || (compositeId != null && compositeId.length() <= 0)) {    return null;  }  String nativeGuid=String.format("%s+%s+" + FILESYSTEM + "+%s",prefixTag,serialNumber,compositeId);  _logger.debug("Bourne format NativeGuid computed : {}",nativeGuid);  return nativeGuid;}  }
class C{  public RangeCondition lower(Object lower){  this.lower=lower;  return this;}  }
class C{  public void addFile(File file){  if (file != null && file.exists()) {    try {      classPath.add(file.toURI().toURL());    } catch (    MalformedURLException e) {      throw new AssertionError("converting an existing file to an url should have never thrown an exception!");    }  }}  }
class C{  public void removeFromAsynchronousRegistry(AsynchronousSteppable stop){  if (stop == null)   return;synchronized (asynchronousLock) {    if (!cleaningAsynchronous)     asynchronous.remove(stop);  }}  }
class C{  public void paint(Graphics g,Shape a){  sync();  Rectangle rect=(a instanceof Rectangle) ? (Rectangle)a : a.getBounds();  Rectangle clip=g.getClipBounds();  fBounds.setBounds(rect);  paintHighlights(g,a);  paintBorder(g,rect);  if (clip != null) {    g.clipRect(rect.x + leftInset,rect.y + topInset,rect.width - leftInset - rightInset,rect.height - topInset - bottomInset);  }  Container host=getContainer();  Image img=getImage(host == null || host.isEnabled());  if (img != null) {    if (!hasPixels(img)) {      Icon icon=getLoadingImageIcon();      if (icon != null) {        icon.paintIcon(host,g,rect.x + leftInset,rect.y + topInset);      }    } else {      g.drawImage(img,rect.x + leftInset,rect.y + topInset,width,height,imageObserver);    }  } else {    Icon icon=getNoImageIcon();    if (icon != null) {      icon.paintIcon(host,g,rect.x + leftInset,rect.y + topInset);    }    View view=getAltView();    if (view != null && ((state & WIDTH_FLAG) == 0 || width > DEFAULT_WIDTH)) {      Rectangle altRect=new Rectangle(rect.x + leftInset + DEFAULT_WIDTH,rect.y + topInset,rect.width - leftInset - rightInset- DEFAULT_WIDTH,rect.height - topInset - bottomInset);      view.paint(g,altRect);    }  }  if (clip != null) {    g.setClip(clip.x,clip.y,clip.width,clip.height);  }}  }
class C{  public Iterator<String[]> iterator(){  try {    return new CSVIterator(this);  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public static Double translateSize(Long size,String to){  if (size == null || size.longValue() == 0) {    return 0.0;  }  long multiplier=1L;  if (to.endsWith(SIZE_TB)) {    multiplier=1024 * 1024 * 1024* 1024L;  } else   if (to.endsWith(SIZE_GB)) {    multiplier=1024 * 1024 * 1024L;  } else   if (to.endsWith(SIZE_MB)) {    multiplier=1024 * 1024L;  } else   if (to.endsWith(SIZE_KB)) {    multiplier=1024L;  }  return (double)size / (double)multiplier;}  }
class C{  @Override public Integer put(Double key,Integer value){  return wrapValue(_map.put(unwrapKey(key),unwrapValue(value)));}  }
class C{  protected void shortenName(final StringBuilder sb,final String longishName){  int lastDot=longishName.lastIndexOf('.');  if (lastDot != -1) {    int lastButOneDot=longishName.lastIndexOf('.',lastDot - 1);    sb.append(longishName.substring(lastButOneDot + 1));    return;  }  sb.append(longishName);}  }
class C{  public boolean addLocation(SerializableLocation location){  String key=getLocationKey();  try {    store.putObject(key,location);    store.putInt(SEQUENCE_KEY,getNextSequenceNumber());    return true;  } catch (  StreamCorruptedException e) {    e.printStackTrace();    return false;  }catch (  OptionalDataException e) {    e.printStackTrace();    return false;  }catch (  IOException e) {    e.printStackTrace();    return false;  }}  }
class C{  public static void putObject(DataMap dataMap,String key,Object value){  if (value instanceof Integer) {    int intValue=((Integer)value).intValue();    dataMap.putInt(key,intValue);  } else   if (value instanceof String) {    String stringValue=value.toString();    dataMap.putString(key,stringValue);  } else   if (value instanceof Boolean) {    boolean booleanValue=((Boolean)value).booleanValue();    dataMap.putBoolean(key,booleanValue);  } else {    throw new IllegalArgumentException("Preference " + value + " of type "+ value.getClass()+ " is not supported");  }}  }
class C{  @Override public Class<? extends IXtextEditorCallback> bindIXtextEditorCallback(){  return AlwaysAddNatureCallback.class;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:47.217 -0500",hash_original_method="00F8174F9E89D0C972FA6D3F19742382",hash_generated_method="8188008AC9C80E87937FE73DCA905200") @Override public int describeContents(){  return 0;}  }
class C{  public static Collection<UUID> nodeIds(@Nullable Collection<? extends ClusterNode> nodes){  if (nodes == null || nodes.isEmpty())   return Collections.emptyList();  return F.viewReadOnly(nodes,node2id());}  }
class C{  public ServiceStateException(ServiceStatus current,String expected){  super("Service operation tried on a service with invalid status",new Object[]{expected,current.name()});}  }
class C{  public NodeList nodelist() throws javax.xml.transform.TransformerException {  return (m_origObj instanceof NodeList) ? (NodeList)m_origObj : super.nodelist();}  }
class C{  public static void formatUid(StringBuilder sb,int uid){  if (uid < Process.FIRST_APPLICATION_UID) {    sb.append(uid);  } else {    sb.append('u');    sb.append(getUserId(uid));    final int appId=getAppId(uid);    if (appId >= Process.FIRST_ISOLATED_UID && appId <= Process.LAST_ISOLATED_UID) {      sb.append('i');      sb.append(appId - Process.FIRST_ISOLATED_UID);    } else {      sb.append('a');      sb.append(appId);    }  }}  }
class C{  protected double[] trainAndSerializeClassifier(Instances data){  Classifier classifier;  double[] result;  int i;  try {    if (data.classAttribute().isNominal()) {      classifier=new weka.classifiers.trees.J48();    } else {      classifier=new weka.classifiers.trees.M5P();    }    classifier.buildClassifier(data);    result=new double[data.numInstances()];    for (i=0; i < result.length; i++) {      result[i]=classifier.classifyInstance(data.instance(i));    }    SerializationHelper.write(MODEL_FILENAME,classifier);  } catch (  Exception e) {    fail("Training base classifier failed: " + e);    return null;  }  return result;}  }
class C{  void unregister(){  mListener=null;  mMediaFactory=null;}  }
class C{  public static boolean isNCNameStart(int c){  return c < 0x10000 && (CHARS[c] & MASK_NCNAME_START) != 0;}  }
class C{  public static Object removeVariable(PageContext pc,String var) throws PageException {  StringList list=parse(pc,new ParserString(var),false);  if (list == null)   throw new InterpreterException("invalid variable declaration [" + var + "]");  if (list.size() == 1) {    return pc.undefinedScope().remove(KeyImpl.init(list.next()));  }  int scope=scopeString2Int(pc.ignoreScopes(),list.next());  Object coll;  if (scope == Scope.SCOPE_UNDEFINED) {    coll=pc.undefinedScope().get(list.current());  } else {    coll=VariableInterpreter.scope(pc,scope,true);  }  while (list.hasNextNext()) {    coll=pc.get(coll,list.next());  }  return Caster.toCollection(coll).remove(KeyImpl.init(list.next()));}  }
class C{  private void fillBuf() throws IOException {  int result=in.read(buf,0,buf.length);  if (result == -1) {    throw new EOFException();  }  pos=0;  end=result;}  }
class C{  public boolean isAdjacentTo(Node node1,Node node2){  if (node1 == null || node2 == null || edgeLists.get(node1) == null || edgeLists.get(node2) == null) {    return false;  }  for (  Edge edge : edgeLists.get(node1)) {    if (Edges.traverse(node1,edge) == node2) {      return true;    }  }  return false;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(domimplementationcreatedocument05.class,args);}  }
class C{  private void add(String value){  list.add(value);}  }
class C{  public BreakpointableNodeCounter(final BreakpointManager manager){  breakpointManager=manager;}  }
class C{  private static void checkEquals(double actual,double expected,String label,double eps){  if (Math.abs(expected - actual) <= eps * Math.max(expected,actual)) {    System.out.println("PASS: " + label + ": Expected "+ expected+ " and you gave "+ actual);  } else {    System.out.println("FAIL: " + label + ": Expected "+ expected+ " and you gave "+ actual);  }}  }
class C{  public static int countCSSPrimitiveNames(){  return ALL_PRIMITIVE_PROPERTY_NAMES.size();}  }
class C{  public boolean isKeepAliveEnabled(){  return isKeepAliveEnabled;}  }
class C{  public void onFailure(int statusCode,Header[] headers,Throwable throwable,JSONArray errorResponse){  Log.w(LOG_TAG,"onFailure(int, Header[], Throwable, JSONArray) was not overriden, but callback was received",throwable);}  }
class C{  protected void sequence_Binary(ISerializationContext context,Binary semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.EXPRESSION__LEFT) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.EXPRESSION__LEFT));    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.EXPRESSION__OP) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.EXPRESSION__OP));    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.EXPRESSION__RIGHT) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.EXPRESSION__RIGHT));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getBinaryAccess().getBinaryLeftAction_1_0_0(),semanticObject.getLeft());  feeder.accept(grammarAccess.getBinaryAccess().getOpValid_IDParserRuleCall_1_0_1_0(),semanticObject.getOp());  feeder.accept(grammarAccess.getBinaryAccess().getRightUnitParserRuleCall_1_1_0(),semanticObject.getRight());  feeder.finish();}  }
class C{  public ListNode reverseList2(ListNode head){  ListNode newHead=null;  while (head != null) {    ListNode next=head.next;    head.next=newHead;    newHead=head;    head=next;  }  return newHead;}  }
class C{  public byte[] replace(byte[] orig) throws IOException {  if (_indexOfFileSuffix >= 0) {    getUngzipedResponseContent();    orig=_bytes;  }  if (!_isReplacing || _responseStatus != 200 || (_context != null && _context.isRouter))   return orig;  int srcLen=_replaceSrc.length;  int dstPrefixLen=(_replaceDstPrefix != null ? _replaceDstPrefix.length : 0);  int i=0;  int srcFirst=(-1);  while (i < orig.length) {    while (++i < orig.length) {      if (orig[i] != _replaceSrc[0])       continue;      if (i + srcLen >= orig.length)       return orig;      boolean foundSrc=true;      for (int j=1; j < srcLen; j++) {        if (orig[i + j] != _replaceSrc[j]) {          foundSrc=false;          break;        }      }      if (foundSrc)       break;    }    if (i >= orig.length)     return orig;    srcFirst=i;    i+=srcLen;    if (_replaceDstPrefix == null)     break;    boolean foundDstPrefix=false;    int maxPrefixFirst=(i + 1024 > orig.length ? orig.length : i + 1024);    while (++i < maxPrefixFirst) {      if (orig[i] != _replaceDstPrefix[0])       continue;      if (i + dstPrefixLen >= orig.length)       return orig;      foundDstPrefix=true;      for (int j=1; j < dstPrefixLen; j++) {        if (orig[i + j] != _replaceDstPrefix[j]) {          foundDstPrefix=false;          break;        }      }      if (foundDstPrefix)       break;    }    if (foundDstPrefix)     break;    i=srcFirst + 1;  }  if (i >= orig.length)   return orig;  int dstPrefixFirst=(_replaceDstPrefix != null ? i + _replaceDstSkipLen : -1);  i+=dstPrefixLen;  int dstSuffixLen=(_replaceDstPrefix != null ? _replaceDstSuffix.length : 0);  if (_replaceDstPrefix != null) {    boolean foundDstSuffix=false;    int maxSuffixFirst=(i + 1024 > orig.length ? orig.length : i + 1024);    while (++i < maxSuffixFirst) {      if (orig[i] != _replaceDstSuffix[0])       continue;      if (i + dstSuffixLen >= orig.length)       return orig;      foundDstSuffix=true;      for (int j=1; j < dstSuffixLen; j++) {        if (orig[i + j] != _replaceDstSuffix[j]) {          foundDstSuffix=false;          break;        }      }      if (foundDstSuffix)       break;    }    if (!foundDstSuffix)     return orig;  }  int dstSuffixFirst=i;  int dstLen=(_replaceDstPrefix != null ? (dstSuffixFirst + dstSuffixLen) - dstPrefixFirst : 0);  int newLen=orig.length - srcLen + dstLen + (_replaceBefore != null ? _replaceBefore.length : 0) + (_replaceAfter != null ? _replaceAfter.length : 0);  byte[] newOrig=new byte[newLen];  int iNewOrig=0;  System.arraycopy(orig,0,newOrig,iNewOrig,srcFirst);  iNewOrig+=srcFirst;  if (_replaceBefore != null) {    System.arraycopy(_replaceBefore,0,newOrig,iNewOrig,_replaceBefore.length);    iNewOrig+=_replaceBefore.length;  }  if (_replaceDstPrefix != null) {    System.arraycopy(orig,dstPrefixFirst,newOrig,iNewOrig,dstLen);    iNewOrig+=dstLen;  }  if (_replaceAfter != null) {    System.arraycopy(_replaceAfter,0,newOrig,iNewOrig,_replaceAfter.length);    iNewOrig+=_replaceAfter.length;  }  System.arraycopy(orig,srcFirst + srcLen,newOrig,iNewOrig,newLen - iNewOrig);  _bytes=newOrig;  if (_indexOfFileSuffix >= 0 && (_isGziped || _isDeflated)) {    try {      ByteArrayOutputStream oByteArr=new ByteArrayOutputStream(newOrig.length * 3 / 4);      OutputStream oGzip=new GZIPOutputStream(oByteArr);      oGzip.write(newOrig);      oGzip.close();      _gzipedBytes=oByteArr.toByteArray();      _isGziped=true;      _isDeflated=false;    } catch (    IOException exc) {      _gzipedBytes=null;      _isGziped=false;      _isDeflated=false;      throw exc;    }  }  return newOrig;}  }
class C{  public boolean isRemoteUserHandling(){  return remoteUserHandling;}  }
class C{  public int encode(OutputStream os) throws IOException {  int retVal=1 + mechOidBytes.length;  os.write(TOKEN_ID);  int length=mechOidBytes.length + mechTokenLength;  retVal+=putLength(length,os);  os.write(mechOidBytes);  return retVal;}  }
class C{  public void firePropertyChange(String propertyName,byte oldValue,byte newValue){}  }
class C{  public static HighPassBuilder highPassBuilder(){  return new HighPassBuilder();}  }
class C{  public void storeID(int hash,int id) throws IOException {  structureLock.readLock().lock();  try {    long bucketOffset=getBucketOffset(hash);    storeID(bucketOffset,hash,id);  }  finally {    structureLock.readLock().unlock();  }  if (++itemCount >= loadFactor * bucketCount * bucketSize) {    structureLock.writeLock().lock();    try {      increaseHashTable();    }  finally {      structureLock.writeLock().unlock();    }  }}  }
class C{  @Override public Boolean visitNull_Null(final AnnotatedNullType type1,final AnnotatedNullType type2,final VisitHistory visited){  return arePrimeAnnosEqual(type1,type2);}  }
class C{  public static boolean isCalendarDatatype(IRI datatype){  return datatype.equals(XMLSchema.DATETIME) || datatype.equals(XMLSchema.DATE) || datatype.equals(XMLSchema.TIME)|| datatype.equals(XMLSchema.GYEARMONTH)|| datatype.equals(XMLSchema.GMONTHDAY)|| datatype.equals(XMLSchema.GYEAR)|| datatype.equals(XMLSchema.GMONTH)|| datatype.equals(XMLSchema.GDAY);}  }
class C{  public Part(int partNumber,String etag) throws XmlPullParserException {  super();  super.name="Part";  this.partNumber=partNumber;  this.etag=etag;}  }
class C{  public void addException(SootClass e){  if (DEBUG)   System.out.println("Adding exception " + e);  if (exceptions == null)   exceptions=new ArrayList<SootClass>(); else   if (exceptions.contains(e))   throw new RuntimeException("already throws exception " + e.getName());  exceptions.add(e);}  }
class C{  public HollowTrieDistributorMonotoneMinimalPerfectHashFunction(final Iterable<? extends T> elements,final TransformationStrategy<? super T> transform) throws IOException {  this(elements,transform,null);}  }
class C{  @Transactional(readOnly=true) public boolean isReleaseAlreadyPersisted(SignatureLibrary library,String version){  Query query=entityManager.createQuery("select r from SignatureLibraryRelease r " + "where r.library = :library and r.version = :version");  query.setParameter("library",library);  query.setParameter("version",version);  List results=query.getResultList();  return results != null && results.size() > 0;}  }
class C{  public DoubleMatrix1D viewRow(int row){  checkRow(row);  int viewSize=this.columns;  int viewZero=columnZero;  int viewStride=this.columnStride;  int[] viewOffsets=this.columnOffsets;  int viewOffset=this.offset + _rowOffset(_rowRank(row));  return new SelectedSparseDoubleMatrix1D(viewSize,this.elements,viewZero,viewStride,viewOffsets,viewOffset);}  }
class C{  public void onAddLayer(final Layer layer){  mapLayerTableViewer.addLayer(layer);}  }
class C{  public T caseImportSpecifier(ImportSpecifier object){  return null;}  }
class C{  public double[][] MinDis(double[][] links){  int n=links.length;  double[][] mindis=new double[links.length][links.length];  for (int x=0; x < links.length; x++)   for (int y=0; y < links.length; y++) {    if (links[x][y] > 0 | links[y][x] > 0)     mindis[x][y]=1; else     mindis[x][y]=Integer.MAX_VALUE;    if (x == y)     mindis[x][y]=0;  }  for (int ind=0; ind < n; ind++)   for (int row=0; row < n; row++)   for (int col=0; col < n; col++) {    double indirect=mindis[row][ind] + mindis[ind][col];    if (indirect < mindis[row][col])     mindis[row][col]=indirect;  }  for (int x=0; x < links.length; x++)   for (int y=0; y < links.length; y++)   if (mindis[x][y] == Integer.MAX_VALUE)   mindis[x][y]=links.length / 2;  return mindis;}  }
class C{  public boolean isSetVersion(){  return this.version != null;}  }
class C{  public void schedule(TimerTask task,long delay){  if (delay < 0)   throw new IllegalArgumentException("Negative delay.");  sched(task,System.currentTimeMillis() + delay,0);}  }
class C{  public RemoveAttributeTransform(DataSet dataSet,Set<Integer> categoricalToRemove,Set<Integer> numericalToRemove){  this.categoricalToRemove=categoricalToRemove;  this.numericalToRemove=numericalToRemove;  setUp(dataSet,categoricalToRemove,numericalToRemove);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void drawOverflowIndicator(final WorkflowAnnotation anno,final Graphics2D g,final Rectangle2D loc,final boolean printing){  if (printing) {    return;  }  Graphics2D g2=(Graphics2D)g.create();  int size=20;  int xOffset=10;  int yOffset=10;  int stepSize=size / 4;  int dotSize=3;  int x=(int)loc.getMaxX() - size - xOffset;  int y=(int)loc.getMaxY() - size - yOffset;  GradientPaint gp=new GradientPaint(x,y,Color.WHITE,x,y + size * 1.5f,Color.LIGHT_GRAY);  g2.setPaint(gp);  g2.fillRect(x,y,size,size);  g2.setColor(Color.BLACK);  g2.drawRect(x,y,size,size);  g2.fillOval(x + stepSize,y + stepSize * 2,dotSize,dotSize);  g2.fillOval(x + stepSize * 2,y + stepSize * 2,dotSize,dotSize);  g2.fillOval(x + stepSize * 3,y + stepSize * 2,dotSize,dotSize);  g2.dispose();}  }
class C{  public boolean containsValue(float val){  byte[] states=_states;  float[] vals=_values;  for (int i=vals.length; i-- > 0; ) {    if (states[i] == FULL && val == vals[i]) {      return true;    }  }  return false;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public static String startCalculator(Container jc,String value,DecimalFormat format,int displayType,String title,char operator){  log.config("Value=" + value);  BigDecimal startValue=new BigDecimal(0.0);  try {    if (value != null && value.length() > 0) {      Number number=format.parse(value);      startValue=new BigDecimal(number.toString());    }  } catch (  ParseException pe) {    log.info("InvalidEntry - " + pe.getMessage());  }  Frame frame=Env.getFrame(jc);  Calculator calc=new Calculator(frame,title,displayType,format,startValue);  if ("*+-/%".indexOf(operator) > -1)   calc.handleInput(operator);  AEnv.showCenterWindow(frame,calc);  BigDecimal result=calc.getNumber();  log.config("Result=" + result);  calc=null;  if (result != null)   return format.format(result); else   return value;}  }
class C{  public MBeanRegistrationException(java.lang.Exception e){  super(e);}  }
class C{  public WbXmlTagDef locateTag(String name){  return this.tagsByName.get(name);}  }
class C{  public String removeOption(String name){  if (options != null) {    ReplOption existingOption=null;    for (    ReplOption replOption : options) {      if (name.equals(replOption.getOptionName()))       existingOption=replOption;    }    if (existingOption != null) {      options.remove(existingOption);      return existingOption.getOptionValue();    }  }  return null;}  }
class C{  public static PaymentDialogFragment newInstance(Shipping selectedShipping,Payment selectedPayment,PaymentDialogInterface paymentDialogInterface){  PaymentDialogFragment frag=new PaymentDialogFragment();  frag.paymentDialogInterface=paymentDialogInterface;  frag.selectedShipping=selectedShipping;  frag.selectedPaymentType=selectedPayment;  return frag;}  }
class C{  public static void writeChat(ByteBuf buf,TextMessage text) throws IOException {  ByteBufUtils.writeUTF8(buf,text.encode());}  }
class C{  List<Integer> glyphMappingTable(){  return this.newToOldGlyphs;}  }
class C{  @Override public synchronized void enqueueTask(ProcessingTask task){  mQueue.add(task);  Log.d(TAG,"Task added. Queue size now: " + mQueue.size());  if (!mServiceRunning && !mHoldProcessing) {    startService();  }}  }
class C{  public void deleteData(){  StringBuffer updateSQL=new StringBuffer();  updateSQL.append("DELETE FROM PP_ForecastRunLine WHERE PP_ForecastRun_ID=").append(p_PP_ForecastRun_ID);  DB.executeUpdateEx(updateSQL.toString(),get_TrxName());  updateSQL=new StringBuffer();  updateSQL.append("DELETE FROM PP_ForecastRunDetail WHERE PP_ForecastRun_ID=").append(p_PP_ForecastRun_ID);  DB.executeUpdateEx(updateSQL.toString(),get_TrxName());  updateSQL=new StringBuffer();  updateSQL.append("DELETE FROM PP_ForecastRunResult WHERE PP_ForecastRun_ID=").append(p_PP_ForecastRun_ID);  DB.executeUpdateEx(updateSQL.toString(),get_TrxName());  updateSQL=new StringBuffer();  updateSQL.append("DELETE FROM PP_ForecastRunMaster WHERE PP_ForecastRun_ID=").append(p_PP_ForecastRun_ID);  DB.executeUpdateEx(updateSQL.toString(),get_TrxName());}  }
class C{  public void actionPerformed(java.awt.event.ActionEvent e){  if (e.getSource().equals(paletteButton)) {    layerName.doClick();    showPalette();  } else   if (e.getSource().equals(onoffButton)) {    layerName.doClick();    if (layerHandler != null) {      logger.fine("LayerPane|actionPerformed calling layerHandler.turnLayerOn()");      layerHandler.turnLayerOn(onoffButton.isSelected(),layer);    }    if (logger.isLoggable(Level.FINE)) {      logger.fine("Layer " + layer.getName() + (layer.isVisible() ? " is visible." : " is NOT visible"));    }  } else   if (e.getSource().equals(layerName)) {    setSelected(layerName.isSelected());  }}  }
class C{  public Method element(){  return element;}  }
class C{  protected Distributions(){  throw new RuntimeException("Non instantiable");}  }
class C{  void init(){  absolute=true;  querySeparator=QUERY_SEPARATOR;  opaque=false;  port=-1;}  }
class C{  public Header(ArrayDataInput is) throws TruncatedFileException, IOException {  read(is);}  }
class C{  private LongPolynomial2 multRecursive(LongPolynomial2 poly2){  long[] a=coeffs;  long[] b=poly2.coeffs;  int n=poly2.coeffs.length;  if (n <= 32) {    int cn=2 * n;    LongPolynomial2 c=new LongPolynomial2(new long[cn]);    for (int k=0; k < cn; k++) {      for (int i=Math.max(0,k - n + 1); i <= Math.min(k,n - 1); i++) {        long c0=a[k - i] * b[i];        long cu=c0 & 0x7FF000000L + (c0 & 2047);        long co=(c0 >>> 48) & 2047;        c.coeffs[k]=(c.coeffs[k] + cu) & 0x7FF0007FFL;        c.coeffs[k + 1]=(c.coeffs[k + 1] + co) & 0x7FF0007FFL;      }    }    return c;  } else {    int n1=n / 2;    LongPolynomial2 a1=new LongPolynomial2(Arrays.copyOf(a,n1));    LongPolynomial2 a2=new LongPolynomial2(Arrays.copyOfRange(a,n1,n));    LongPolynomial2 b1=new LongPolynomial2(Arrays.copyOf(b,n1));    LongPolynomial2 b2=new LongPolynomial2(Arrays.copyOfRange(b,n1,n));    LongPolynomial2 A=(LongPolynomial2)a1.clone();    A.add(a2);    LongPolynomial2 B=(LongPolynomial2)b1.clone();    B.add(b2);    LongPolynomial2 c1=a1.multRecursive(b1);    LongPolynomial2 c2=a2.multRecursive(b2);    LongPolynomial2 c3=A.multRecursive(B);    c3.sub(c1);    c3.sub(c2);    LongPolynomial2 c=new LongPolynomial2(2 * n);    for (int i=0; i < c1.coeffs.length; i++) {      c.coeffs[i]=c1.coeffs[i] & 0x7FF0007FFL;    }    for (int i=0; i < c3.coeffs.length; i++) {      c.coeffs[n1 + i]=(c.coeffs[n1 + i] + c3.coeffs[i]) & 0x7FF0007FFL;    }    for (int i=0; i < c2.coeffs.length; i++) {      c.coeffs[2 * n1 + i]=(c.coeffs[2 * n1 + i] + c2.coeffs[i]) & 0x7FF0007FFL;    }    return c;  }}  }
class C{  public void close(){synchronized (this) {    mCondition=false;  }}  }
class C{  protected AbstractRpcRequest(Class<?> serviceType,String method,List<Object> args){  this.serviceType=requireNonNull(serviceType,"serviceType");  this.method=requireNonNull(method,"method");  this.args=args;}  }
class C{  public void updateBounds(){  viewpointNode.setSceneBounds();}  }
class C{  public PolarChartPanel(JFreeChart chart){  this(chart,true);}  }
class C{  public static Script dmlFromResource(String resourcePath){  return scriptFromResource(resourcePath,ScriptType.DML);}  }
class C{  private void handleDestroyRegion(Message m){  Part regionNamePart=null, callbackArgumentPart=null;  String regionName=null;  Object callbackArgument=null;  LocalRegion region=null;  int partCnt=0;  final boolean isDebugEnabled=logger.isDebugEnabled();  try {    if (isDebugEnabled) {      logger.debug("Received destroy region message of length ({} bytes)",m.getPayloadLength());    }    regionNamePart=m.getPart(partCnt++);    callbackArgumentPart=m.getPart(partCnt++);    regionName=regionNamePart.getString();    callbackArgument=callbackArgumentPart.getObject();    Part hasCqsPart=m.getPart(partCnt++);    if (isDebugEnabled) {      logger.debug("Destroying region: {} callbackArgument: {}",regionName,callbackArgument);    }    if (((Boolean)hasCqsPart.getObject()).booleanValue()) {      Part numCqsPart=m.getPart(partCnt++);      if (isDebugEnabled) {        logger.debug("Received message has CQ Event. Number of cqs interested in the event : {}",numCqsPart.getInt() / 2);      }      partCnt=processCqs(m,partCnt,numCqsPart.getInt(),m.getMessageType(),null,null);    }    region=(LocalRegion)cacheHelper.getRegion(regionName);    if (region == null) {      if (isDebugEnabled && !quitting()) {        logger.debug("Region named {} does not exist",regionName);      }      return;    }    if (region.hasServerProxy()) {      region.localDestroyRegion(callbackArgument);      if (isDebugEnabled) {        logger.debug("Destroyed region: {} callbackArgument: {}",regionName,callbackArgument);      }    }  } catch (  RegionDestroyedException e) {    if (isDebugEnabled) {      logger.debug("region already destroyed: {}",regionName);    }  }catch (  Exception e) {    String message=LocalizedStrings.CacheClientUpdater_CAUGHT_AN_EXCEPTION_WHILE_ATTEMPTING_TO_DESTROY_REGION_0.toLocalizedString(regionName);    handleException(message,e);  }}  }
class C{  protected void rehash(){  Entry[] oldTable=table;  table=new Entry[oldTable.length * 2 + 1];  for (int i=oldTable.length - 1; i >= 0; i--) {    for (Entry old=oldTable[i]; old != null; ) {      Entry e=old;      old=old.next;      int index=e.hash % table.length;      e.next=table[index];      table[index]=e;    }  }}  }
class C{  private void fillBestLabels(){  IChunkedOrderedIterator<ISPO> lookup=tripleStore.getAccessPath(resolvedSubject,resolvedLabelType,null).iterator();  try {    bestLabels.clear();    int bestLabelRank=Integer.MAX_VALUE;    while (lookup.hasNext()) {      ISPO spo=lookup.next();      IV o=spo.o();      if (!o.isLiteral()) {        continue;      }      Literal literal=(Literal)lexiconRelation.getTerm(o);      String language=literal.getLanguage();      if (language == null) {        continue;      }      Integer languageOrdinal=languageFallbacks.get(language);      if (languageOrdinal == null) {        continue;      }      if (languageOrdinal == bestLabelRank) {        bestLabels.add(o);      }      if (languageOrdinal < bestLabelRank) {        bestLabelRank=languageOrdinal;        bestLabels.clear();        bestLabels.add(o);      }    }  }  finally {    lookup.close();  }}  }
class C{  public int purge(){  int result=0;synchronized (queue) {    for (int i=queue.size(); i > 0; i--) {      if (queue.get(i).state == TimerTask.CANCELLED) {        queue.quickRemove(i);        result++;      }    }    if (result != 0)     queue.heapify();  }  return result;}  }
class C{  public void endEntity(String name) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#endEntity: " + name);  if (null != m_lexicalHandler) {    m_lexicalHandler.endEntity(name);  }}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.down_broadcast_start_bt:    v.setEnabled(false);  Intent intent=new Intent(DownloadReceiver.INTENT_ACTION);intent.putExtra(DownloadReceiver.INTENT_DATA_IMAGE_URL,OBJECT_IMAGE_URL);intent.putExtra(DownloadReceiver.INTENT_TYPE,DownloadReceiver.TYPE_DOWNLOAD_START);this.sendBroadcast(intent);break;}}  }
class C{  public void revokeOwnership(String jid) throws XMPPException {  changeAffiliationByAdmin(jid,"admin",null);}  }
class C{  static String decodeString(String source,boolean failSilently){  try {    return decodeString(source);  } catch (  URISyntaxException e) {    throw new IllegalArgumentException(e.getMessage());  }}  }
class C{  protected boolean isIncomingDiscoveryAllowed(DatapathId sw,OFPort port,boolean isStandard){  if (isLinkDiscoverySuppressed(sw,port)) {    return false;  }  IOFSwitch iofSwitch=switchService.getSwitch(sw);  if (iofSwitch == null) {    return false;  }  if (port == OFPort.LOCAL)   return false;  OFPortDesc ofpPort=iofSwitch.getPort(port);  if (ofpPort == null) {    if (log.isTraceEnabled()) {      log.trace("Null physical port. sw={}, port={}",sw.toString(),port.getPortNumber());    }    return false;  }  return true;}  }
class C{  public void readStream(GeometryFactory geometryFactory) throws IOException, ShapefileException, Exception {  geomFactory=geometryFactory;  file=getInputStream();  if (file == null)   throw new IOException("Failed connection or no content for " + baseURL);  mainHeader=new ShapefileHeader(file);  if (mainHeader.getVersion() < VERSION) {    System.err.println("Sf-->Warning, Shapefile format (" + mainHeader.getVersion() + ") older that supported ("+ VERSION+ "), attempting to read anyway");  }  if (mainHeader.getVersion() > VERSION) {    System.err.println("Sf-->Warning, Shapefile format (" + mainHeader.getVersion() + ") newer that supported ("+ VERSION+ "), attempting to read anyway");  }  int type=mainHeader.getShapeType();  handler=getShapeHandler(type);  if (handler == null)   throw new ShapeTypeNotSupportedException("Unsuported shape type:" + type);  recordNumber=0;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","hebiace");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public final void testGetView(){  CharSequence[] entries=new CharSequence[]{"entry1","entry2"};  ProxySpinnerAdapter proxySpinnerAdapter=createAdapter(entries);  assertNotNull(proxySpinnerAdapter.getView(0,null,null));}  }
class C{  @Override public void warn(String format,Object argA,Object argB){  if (logger.isLoggable(Level.WARNING)) {    FormattingTuple ft=MessageFormatter.format(format,argA,argB);    log(SELF,Level.WARNING,ft.getMessage(),ft.getThrowable());  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node oldChild;  NodeList elementList;  Node elementNode;  Node removedChild;  doc=(Document)load("hc_staff",true);  oldChild=doc.createElement("br");  elementList=doc.getElementsByTagName("p");  elementNode=elementList.item(1);{    boolean success=false;    try {      removedChild=elementNode.removeChild(oldChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NOT_FOUND_ERR);    }    assertTrue("throw_NOT_FOUND_ERR",success);  }}  }
class C{  public static <T>Stream<T> jdkStream(Publisher<T> pub){  SeqSubscriber<T> sub=SeqSubscriber.subscriber();  pub.subscribe(sub);  return StreamSupport.stream(sub.spliterator(),false);}  }
class C{  public static TypeTypeRef createClassifierBoundThisTypeRef(TypeTypeRef actualThisTypeRef){  if (actualThisTypeRef == null) {    throw new NullPointerException("Actual this type must not be null!");  }  TypeArgument typeArg=actualThisTypeRef.getTypeArg();  final BoundThisTypeRef boundThisTypeRef;  if (typeArg instanceof ParameterizedTypeRef) {    boundThisTypeRef=createBoundThisTypeRef((ParameterizedTypeRef)typeArg);  } else   if (typeArg instanceof BoundThisTypeRef) {    boundThisTypeRef=(BoundThisTypeRef)typeArg;  } else {    throw new IllegalArgumentException("Cannot turn unbound type{this} into type{this[X]}, must be called with type{X}!");  }  TypeTypeRef classifierBoundThisTypeRef=createTypeTypeRef(boundThisTypeRef,false);  return classifierBoundThisTypeRef;}  }
class C{  private BitSet createBitSet(final String binaryString){  final BitSet bset=new BitSet(binaryString.length());  boolean bitTrue=false;  for (int i=0; i < binaryString.length(); i++) {    if (binaryString.charAt(i) == '1') {      bitTrue=true;    } else {      bitTrue=false;    }    bset.set(i,bitTrue);  }  return bset;}  }
class C{  public static boolean containsAddress(final INaviCodeNode codeNode,final IAddress offset){  for (  final IInstruction instruction : codeNode.getInstructions()) {    if (instruction.getAddress().equals(offset)) {      return true;    }  }  return false;}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  protected File createTempDir() throws IOException {  File tmp=createTempFile(".dir");  if (!tmp.delete()) {    throw new IOException("Cannot delete temporary file '" + tmp.getPath() + "'");  }  tmp.mkdir();  return tmp;}  }
class C{  private void offsetIcon(Rect viewBounds){  float startX=viewBounds.centerX() - (mPathBounds.width() / 2);  float offsetX=startX - mPathBounds.left;  float startY=viewBounds.centerY() - (mPathBounds.height() / 2);  float offsetY=startY - (mPathBounds.top);  mPath.offset(offsetX + mIconOffsetX,offsetY + mIconOffsetY);}  }
class C{  public SevenCherubsTest(){  super("0_semos_village_w","Cherubiel","Gabriel","Ophaniel","Raphael","Uriel","Zophiel","Azazel");}  }
class C{  public void clearPosition(){  _position=(_readLength - _readOffset);}  }
class C{  private static boolean allTargetsOneTypeOneHitPoint(final Collection<Unit> targets,final Map<Unit,Collection<Unit>> dependents){  final Set<UnitCategory> categorized=UnitSeperator.categorize(targets,dependents,false,false);  if (categorized.size() == 1) {    final UnitCategory unitCategory=categorized.iterator().next();    if (unitCategory.getHitPoints() - unitCategory.getDamaged() <= 1) {      return true;    }  }  return false;}  }
class C{  private boolean startNext(MWFActivity last,MWFActivity[] activities,PO lastPO,String trxName){  log.fine("Last=" + last);  MWFNodeNext[] transitions=getWorkflow().getNodeNexts(last.getAD_WF_Node_ID(),last.getPO_AD_Client_ID());  if (transitions == null || transitions.length == 0)   return false;  if (MWFNode.JOINELEMENT_AND.equals(last.getNode().getJoinElement())) {  }  last.setProcessed(true);  last.saveEx();  String split=last.getNode().getSplitElement();  for (int i=0; i < transitions.length; i++) {    if (!transitions[i].isValidFor(last))     continue;    MWFActivity activity=new MWFActivity(this,transitions[i].getAD_WF_Next_ID(),lastPO);    activity.set_TrxName(trxName);    activity.run();    if (MWFNode.SPLITELEMENT_XOR.equals(split))     return true;  }  return true;}  }
class C{  public ModbusUDPMaster(String addr,int port,int timeout){  super();  try {    InetAddress slaveAddress=InetAddress.getByName(addr);    connection=new UDPMasterConnection(slaveAddress);    connection.setPort(port);    connection.setTimeout(timeout);  } catch (  UnknownHostException e) {    throw new RuntimeException("Failed to construct ModbusUDPMaster instance.",e);  }}  }
class C{  protected void nudge(final int offsetX,final int offsetY){  for (  Neuron neuron : getSelectedModelNeurons()) {    neuron.offset(offsetX * nudgeAmount,offsetY * nudgeAmount);  }}  }
class C{  public static byte[] decode(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,DECODABET);}  }
class C{  public void run(){  while (true) {    try {      Socket socket=serverSocket.accept();      ServerThread worker=threadPool.remove();      worker.addJob(socket);      threadPool.add(worker);    } catch (    Throwable t) {      t.printStackTrace();    }  }}  }
class C{  @Override public Integer[] applyControlsToImpact(int riskType,CnATreeElement asset,Integer impactC,Integer impactI,Integer impactA){  if (riskType == RISK_PRE_CONTROLS) {    return null;  }  asset=Retriever.checkRetrieveLinks(asset,true);  Map<CnATreeElement,CnALink> linkedElements=CnALink.getLinkedElements(asset,Control.TYPE_ID);  Integer impactC0=Integer.valueOf(impactC.intValue());  Integer impactI0=Integer.valueOf(impactI.intValue());  Integer impactA0=Integer.valueOf(impactA.intValue());switch (riskType) {case RISK_WITH_IMPLEMENTED_CONTROLS:    for (    CnATreeElement control : linkedElements.keySet()) {      control=Retriever.checkRetrieveElement(control);      if (Control.isImplemented(control.getEntity())) {        impactC0-=control.getNumericProperty(IRiskAnalysisService.PROP_CONTROL_EFFECT_C);        impactI0-=control.getNumericProperty(IRiskAnalysisService.PROP_CONTROL_EFFECT_I);        impactA0-=control.getNumericProperty(IRiskAnalysisService.PROP_CONTROL_EFFECT_A);      }    }  break;case RISK_WITH_ALL_CONTROLS:for (CnATreeElement control : linkedElements.keySet()) {  control=Retriever.checkRetrieveElement(control);  impactC0-=control.getNumericProperty(IRiskAnalysisService.PROP_CONTROL_EFFECT_C);  impactI0-=control.getNumericProperty(IRiskAnalysisService.PROP_CONTROL_EFFECT_I);  impactA0-=control.getNumericProperty(IRiskAnalysisService.PROP_CONTROL_EFFECT_A);}break;case RISK_WITHOUT_NA_CONTROLS:for (CnATreeElement control : linkedElements.keySet()) {control=Retriever.checkRetrieveElement(control);if (Control.isPlanned(control.getEntity())) {impactC0-=control.getNumericProperty(IRiskAnalysisService.PROP_CONTROL_EFFECT_C);impactI0-=control.getNumericProperty(IRiskAnalysisService.PROP_CONTROL_EFFECT_I);impactA0-=control.getNumericProperty(IRiskAnalysisService.PROP_CONTROL_EFFECT_A);}}break;default :break;}impactC0=(impactC0.intValue() < 0) ? Integer.valueOf(0) : impactC0;impactI0=(impactI0.intValue() < 0) ? Integer.valueOf(0) : impactI0;impactA0=(impactA0.intValue() < 0) ? Integer.valueOf(0) : impactA0;return new Integer[]{impactC0,impactI0,impactA0};}  }
class C{  public void java_lang_System_mapLibraryName(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getStringObject());}  }
class C{  public void createSecondaryVolumeForClone(StorageSystem storageSystem,URI sourceVolume,Volume targetVolume) throws Exception {  log.info("SecondaryVolume creation operation started");  String taskId=UUID.randomUUID().toString();  TaskCompleter taskCompleter=new VolumeCreateCompleter(targetVolume.getId(),taskId);  String asyncTaskMessageId=null;  HDSApiClient hdsApiClient=HDSUtils.getHDSApiClient(hdsApiFactory,storageSystem);  String systemObjectID=HDSUtils.getSystemObjectID(storageSystem);  BlockObject sourceObj=BlockObject.fetch(dbClient,sourceVolume);  URI tenantUri=null;  StoragePool targetPool=dbClient.queryObject(StoragePool.class,targetVolume.getPool());  if (sourceObj instanceof BlockSnapshot) {    NamedURI parentVolUri=((BlockSnapshot)sourceObj).getParent();    Volume parentVolume=dbClient.queryObject(Volume.class,parentVolUri);    tenantUri=parentVolume.getTenant().getURI();    TenantOrg tenantOrg=dbClient.queryObject(TenantOrg.class,tenantUri);  } else {    tenantUri=((Volume)sourceObj).getTenant().getURI();  }  if (targetVolume.getThinlyProvisioned()) {    asyncTaskMessageId=hdsApiClient.createThinVolumes(systemObjectID,targetPool.getNativeId(),targetVolume.getCapacity(),1,targetVolume.getLabel(),HDSConstants.QUICK_FORMAT_TYPE,storageSystem.getModel());  } else {    String poolObjectID=HDSUtils.getPoolObjectID(targetPool);    asyncTaskMessageId=hdsApiClient.createThickVolumes(systemObjectID,poolObjectID,targetVolume.getCapacity(),1,targetVolume.getLabel(),null,storageSystem.getModel(),null);  }  if (asyncTaskMessageId != null) {    HDSJob createHDSJob=new HDSCreateVolumeJob(asyncTaskMessageId,targetVolume.getStorageController(),targetPool.getId(),taskCompleter);    hdsCommandHelper.waitForAsyncHDSJob(createHDSJob);  }  log.info("SecondaryVolume creation operation completed successfully");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:00.955 -0500",hash_original_method="ACA58AE10EC88B0125C9A13993452736",hash_generated_method="83BBE64308388E1E7664DAD362BEAF09") @DSVerified @DSSpec(DSCat.IO) @DSSink({DSSinkKind.NETWORK}) public String listHelp(String command) throws IOException {  if (SMTPReply.isPositiveCompletion(help(command)))   return getReplyString();  return null;}  }
class C{  public SingularValueDecomposition(jMatrix Arg){  double[][] A=Arg.getArrayCopy();  m=Arg.getRowDimension();  n=Arg.getColumnDimension();  int nu=Math.min(m,n);  s=new double[Math.min(m + 1,n)];  U=new double[m][nu];  V=new double[n][n];  double[] e=new double[n];  double[] work=new double[m];  boolean wantu=true;  boolean wantv=true;  int nct=Math.min(m - 1,n);  int nrt=Math.max(0,Math.min(n - 2,m));  for (int k=0; k < Math.max(nct,nrt); k++) {    if (k < nct) {      s[k]=0;      for (int i=k; i < m; i++) {        s[k]=Maths.hypot(s[k],A[i][k]);      }      if (s[k] != 0.0) {        if (A[k][k] < 0.0) {          s[k]=-s[k];        }        for (int i=k; i < m; i++) {          A[i][k]/=s[k];        }        A[k][k]+=1.0;      }      s[k]=-s[k];    }    for (int j=k + 1; j < n; j++) {      if ((k < nct) & (s[k] != 0.0)) {        double t=0;        for (int i=k; i < m; i++) {          t+=A[i][k] * A[i][j];        }        t=-t / A[k][k];        for (int i=k; i < m; i++) {          A[i][j]+=t * A[i][k];        }      }      e[j]=A[k][j];    }    if (wantu & (k < nct)) {      for (int i=k; i < m; i++) {        U[i][k]=A[i][k];      }    }    if (k < nrt) {      e[k]=0;      for (int i=k + 1; i < n; i++) {        e[k]=Maths.hypot(e[k],e[i]);      }      if (e[k] != 0.0) {        if (e[k + 1] < 0.0) {          e[k]=-e[k];        }        for (int i=k + 1; i < n; i++) {          e[i]/=e[k];        }        e[k + 1]+=1.0;      }      e[k]=-e[k];      if ((k + 1 < m) & (e[k] != 0.0)) {        for (int i=k + 1; i < m; i++) {          work[i]=0.0;        }        for (int j=k + 1; j < n; j++) {          for (int i=k + 1; i < m; i++) {            work[i]+=e[j] * A[i][j];          }        }        for (int j=k + 1; j < n; j++) {          double t=-e[j] / e[k + 1];          for (int i=k + 1; i < m; i++) {            A[i][j]+=t * work[i];          }        }      }      if (wantv) {        for (int i=k + 1; i < n; i++) {          V[i][k]=e[i];        }      }    }  }  int p=Math.min(n,m + 1);  if (nct < n) {    s[nct]=A[nct][nct];  }  if (m < p) {    s[p - 1]=0.0;  }  if (nrt + 1 < p) {    e[nrt]=A[nrt][p - 1];  }  e[p - 1]=0.0;  if (wantu) {    for (int j=nct; j < nu; j++) {      for (int i=0; i < m; i++) {        U[i][j]=0.0;      }      U[j][j]=1.0;    }    for (int k=nct - 1; k >= 0; k--) {      if (s[k] != 0.0) {        for (int j=k + 1; j < nu; j++) {          double t=0;          for (int i=k; i < m; i++) {            t+=U[i][k] * U[i][j];          }          t=-t / U[k][k];          for (int i=k; i < m; i++) {            U[i][j]+=t * U[i][k];          }        }        for (int i=k; i < m; i++) {          U[i][k]=-U[i][k];        }        U[k][k]=1.0 + U[k][k];        for (int i=0; i < k - 1; i++) {          U[i][k]=0.0;        }      } else {        for (int i=0; i < m; i++) {          U[i][k]=0.0;        }        U[k][k]=1.0;      }    }  }  if (wantv) {    for (int k=n - 1; k >= 0; k--) {      if ((k < nrt) & (e[k] != 0.0)) {        for (int j=k + 1; j < nu; j++) {          double t=0;          for (int i=k + 1; i < n; i++) {            t+=V[i][k] * V[i][j];          }          t=-t / V[k + 1][k];          for (int i=k + 1; i < n; i++) {            V[i][j]+=t * V[i][k];          }        }      }      for (int i=0; i < n; i++) {        V[i][k]=0.0;      }      V[k][k]=1.0;    }  }  int pp=p - 1;  int iter=0;  double eps=Math.pow(2.0,-52.0);  double tiny=Math.pow(2.0,-966.0);  while (p > 0) {    int k, kase;    for (k=p - 2; k >= -1; k--) {      if (k == -1) {        break;      }      if (Math.abs(e[k]) <= tiny + eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {        e[k]=0.0;        break;      }    }    if (k == p - 2) {      kase=4;    } else {      int ks;      for (ks=p - 1; ks >= k; ks--) {        if (ks == k) {          break;        }        double t=(ks != p ? Math.abs(e[ks]) : 0.) + (ks != k + 1 ? Math.abs(e[ks - 1]) : 0.);        if (Math.abs(s[ks]) <= tiny + eps * t) {          s[ks]=0.0;          break;        }      }      if (ks == k) {        kase=3;      } else       if (ks == p - 1) {        kase=1;      } else {        kase=2;        k=ks;      }    }    k++;switch (kase) {case 1:{        double f=e[p - 2];        e[p - 2]=0.0;        for (int j=p - 2; j >= k; j--) {          double t=Maths.hypot(s[j],f);          double cs=s[j] / t;          double sn=f / t;          s[j]=t;          if (j != k) {            f=-sn * e[j - 1];            e[j - 1]=cs * e[j - 1];          }          if (wantv) {            for (int i=0; i < n; i++) {              t=cs * V[i][j] + sn * V[i][p - 1];              V[i][p - 1]=-sn * V[i][j] + cs * V[i][p - 1];              V[i][j]=t;            }          }        }      }    break;case 2:{    double f=e[k - 1];    e[k - 1]=0.0;    for (int j=k; j < p; j++) {      double t=Maths.hypot(s[j],f);      double cs=s[j] / t;      double sn=f / t;      s[j]=t;      f=-sn * e[j];      e[j]=cs * e[j];      if (wantu) {        for (int i=0; i < m; i++) {          t=cs * U[i][j] + sn * U[i][k - 1];          U[i][k - 1]=-sn * U[i][j] + cs * U[i][k - 1];          U[i][j]=t;        }      }    }  }break;case 3:{double scale=Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]),Math.abs(s[p - 2])),Math.abs(e[p - 2])),Math.abs(s[k])),Math.abs(e[k]));double sp=s[p - 1] / scale;double spm1=s[p - 2] / scale;double epm1=e[p - 2] / scale;double sk=s[k] / scale;double ek=e[k] / scale;double b=((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2.0;double c=(sp * epm1) * (sp * epm1);double shift=0.0;if ((b != 0.0) | (c != 0.0)) {  shift=Math.sqrt(b * b + c);  if (b < 0.0) {    shift=-shift;  }  shift=c / (b + shift);}double f=(sk + sp) * (sk - sp) + shift;double g=sk * ek;for (int j=k; j < p - 1; j++) {  double t=Maths.hypot(f,g);  double cs=f / t;  double sn=g / t;  if (j != k) {    e[j - 1]=t;  }  f=cs * s[j] + sn * e[j];  e[j]=cs * e[j] - sn * s[j];  g=sn * s[j + 1];  s[j + 1]=cs * s[j + 1];  if (wantv) {    for (int i=0; i < n; i++) {      t=cs * V[i][j] + sn * V[i][j + 1];      V[i][j + 1]=-sn * V[i][j] + cs * V[i][j + 1];      V[i][j]=t;    }  }  t=Maths.hypot(f,g);  cs=f / t;  sn=g / t;  s[j]=t;  f=cs * e[j] + sn * s[j + 1];  s[j + 1]=-sn * e[j] + cs * s[j + 1];  g=sn * e[j + 1];  e[j + 1]=cs * e[j + 1];  if (wantu && (j < m - 1)) {    for (int i=0; i < m; i++) {      t=cs * U[i][j] + sn * U[i][j + 1];      U[i][j + 1]=-sn * U[i][j] + cs * U[i][j + 1];      U[i][j]=t;    }  }}e[p - 2]=f;iter=iter + 1;}break;case 4:{if (s[k] <= 0.0) {s[k]=(s[k] < 0.0 ? -s[k] : 0.0);if (wantv) {for (int i=0; i <= pp; i++) {  V[i][k]=-V[i][k];}}}while (k < pp) {if (s[k] >= s[k + 1]) {break;}double t=s[k];s[k]=s[k + 1];s[k + 1]=t;if (wantv && (k < n - 1)) {for (int i=0; i < n; i++) {  t=V[i][k + 1];  V[i][k + 1]=V[i][k];  V[i][k]=t;}}if (wantu && (k < m - 1)) {for (int i=0; i < m; i++) {  t=U[i][k + 1];  U[i][k + 1]=U[i][k];  U[i][k]=t;}}k++;}iter=0;p--;}break;}}}  }
class C{  public void markSize(){  sizeMarks.add(sendBuffer.writerPosition());  sendBuffer.writeInt(0);}  }
class C{  public static void reNumberDecodesInPropertiesFile(String propertyFileLocation){  FileInputStream fileInputStream=null;  Scanner scanString=null;  try {    File file=new File(propertyFileLocation);    final String codeName="CODE_DECODE";    final String lookupServiceProvideName="PropertyFile";    fileInputStream=new FileInputStream(file.getAbsoluteFile());    scanString=new Scanner(fileInputStream);    Pattern pattern=Pattern.compile("_\\d*=");    scanString.useDelimiter(pattern);    int count=0;    String newText=new String();    String token=null;    String delimiter=null;    String oldDelimiter=null;    while (scanString.hasNext()) {      token=scanString.next();      delimiter=scanString.findInLine(pattern);      if (null != token && token.contains(codeName)) {        if (null != delimiter) {          if (null != token && !token.endsWith(lookupServiceProvideName)) {            if (!delimiter.equals(oldDelimiter)) {              count++;            }            newText=newText + token + "_"+ count+ "=";          } else {            newText=newText + token + delimiter;          }          oldDelimiter=delimiter;        }      }    }    newText=newText + token;    _log.error("" + newText);  } catch (  Exception ex) {    _log.error("Error paring file: " + ex.getMessage(),ex);  } finally {    try {      if (null != scanString)       scanString.close();      if (null != fileInputStream)       fileInputStream.close();    } catch (    IOException e) {      _log.error("Error closing input stream: " + e.getMessage(),e);    }  }}  }
class C{  @Uninterruptible public void dumpJniRefsStack(){  int jniRefOffset=JNIRefsTop;  VM.sysWrite("\n* * dump of JNIEnvironment JniRefs Stack * *\n");  VM.sysWrite("* JNIRefs = ");  VM.sysWrite(Magic.objectAsAddress(JNIRefs));  VM.sysWrite(" * JNIRefsTop = ");  VM.sysWrite(JNIRefsTop);  VM.sysWrite(" * JNIRefsSavedFP = ");  VM.sysWrite(JNIRefsSavedFP);  VM.sysWrite(".\n*\n");  while (jniRefOffset >= 0) {    VM.sysWrite(jniRefOffset);    VM.sysWrite(" ");    VM.sysWrite(Magic.objectAsAddress(JNIRefs).plus(jniRefOffset));    VM.sysWrite(" ");    MemoryManager.dumpRef(JNIRefs.get(jniRefOffset >> LOG_BYTES_IN_ADDRESS).toObjectReference());    jniRefOffset-=BYTES_IN_ADDRESS;  }  VM.sysWrite("\n* * end of dump * *\n");}  }
class C{  public int size(){  return objects.size();}  }
class C{  public static ConditionOperand LESS_EQUAL(){  return new ConditionOperand(LESS_EQUAL);}  }
class C{  public Down(){  super();}  }
class C{  protected boolean isQuiet(){  return false;}  }
class C{  private void updateShapeColorBasedOnTime(){  float mShapeColor=map(sunlightRatio,sunlightRatioMin,sunlightRatioMax,1.0f,0.33f);  float[] hsv={0.0f,0.0f,mShapeColor};  hoursTens.setShapeColor(Color.HSVToColor(hsv));  hoursUnits.setShapeColor(Color.HSVToColor(hsv));  minutesTens.setShapeColor(Color.HSVToColor(hsv));  minutesUnits.setShapeColor(Color.HSVToColor(hsv));}  }
class C{  public void move(){  log.debug("Move train (" + getName() + ")");  if (getRoute() == null || getCurrentLocation() == null) {    setBuilt(false);    return;  }  if (!isBuilt()) {    log.error("ERROR attempt to move train ({}) that hasn't been built",getName());    return;  }  RouteLocation rl=getCurrentLocation();  RouteLocation rlNext=getNextLocation(rl);  setCurrentLocation(rlNext);  setDirtyAndFirePropertyChange(TRAIN_LOCATION_CHANGED_PROPERTY,rl,rlNext);  moveTrainIcon(rlNext);  updateStatus(rl,rlNext);  setDirtyAndFirePropertyChange(TRAIN_MOVE_COMPLETE_CHANGED_PROPERTY,rl,rlNext);}  }
class C{  public boolean isAnnotationsPresent(GridDeployment dep,Object target,GridResourceIoc.AnnotationSet annSet){  return ioc.isAnnotationsPresent(dep,target,annSet);}  }
class C{  SamlTokenMock(String subjectName,String subjectDomain,X509Certificate confCertificate,Date expireOn){  this(subjectName,subjectDomain,confCertificate,expireOn,null,null,null,0);}  }
class C{  public GeoPoint(final PlanetModel planetModel,final double sinLat,final double sinLon,final double cosLat,final double cosLon){  this(computeDesiredEllipsoidMagnitude(planetModel,cosLat * cosLon,cosLat * sinLon,sinLat),cosLat * cosLon,cosLat * sinLon,sinLat);}  }
class C{  public E element(){  E o=peek();  if (null == o) {    throw new NoSuchElementException();  }  return o;}  }
class C{  public VisorGridJobEvent(int typeId,IgniteUuid id,String name,UUID nid,long ts,@Nullable String msg,String shortDisplay,String taskName,String taskClsName,IgniteUuid taskSesId,IgniteUuid jobId){  super(typeId,id,name,nid,ts,msg,shortDisplay);  this.taskName=taskName;  this.taskClsName=taskClsName;  this.taskSesId=taskSesId;  this.jobId=jobId;}  }
class C{  public final void clear(int index){  bits[index >>> 0x5]&=~(1 << (index & 0x1f));}  }
class C{  public Socket accept() throws IOException {  checkOpen();  if (!isBound()) {    throw new SocketException("Socket is not bound");  }  Socket aSocket=new Socket();  try {    implAccept(aSocket);  } catch (  IOException e) {    aSocket.close();    throw e;  }  return aSocket;}  }
class C{  public String toString(Object obj){  return obj.toString();}  }
class C{  public static boolean isFunctionCall(final ReilInstruction instruction){  Preconditions.checkNotNull(instruction,"Error: Instruction argument can not be null");  return com.google.security.zynamics.reil.ReilHelpers.isFunctionCall(instruction.getNative());}  }
class C{  public static Object toSqlType(SQLItem item) throws PageException, DatabaseException {  Object value=item.getValue();  try {    if (item.isNulls() || value == null) {      return null;    }    int type=item.getType();switch (type) {case Types.BIGINT:      return Caster.toLong(value);case Types.BIT:    return Caster.toBoolean(value);case Types.BLOB:  return BlobImpl.toBlob(value);case Types.CHAR:return Caster.toString(value);case Types.CLOB:case Types.NCLOB:return ClobImpl.toClob(value);case Types.DATE:return new Date(Caster.toDate(value,null).getTime());case Types.NUMERIC:case Types.DECIMAL:return new BigDecimal(Caster.toDouble(value).toString());case Types.DOUBLE:return Caster.toDouble(value);case Types.FLOAT:return Caster.toFloat(value);case Types.VARBINARY:case Types.LONGVARBINARY:case Types.BINARY:return Caster.toBinary(value);case Types.REAL:return Caster.toFloat(value);case Types.TINYINT:return Caster.toByte(value);case Types.SMALLINT:return Caster.toShort(value);case Types.INTEGER:return Caster.toInteger(value);case Types.VARCHAR:case Types.LONGVARCHAR:case CFTypes.VARCHAR2:case Types.NVARCHAR:return Caster.toString(value);case Types.TIME:return new Time(Caster.toDate(value,null).getTime());case Types.TIMESTAMP:return new Timestamp(Caster.toDate(value,null).getTime());case Types.OTHER:default :if (value instanceof DateTime) return new Date(Caster.toDate(value,null).getTime());if (value instanceof lucee.runtime.type.Array) return Caster.toList(value);if (value instanceof lucee.runtime.type.Struct) return Caster.toMap(value);return value;}} catch (PageException pe) {if (!NullSupportHelper.full() && value instanceof String && StringUtil.isEmpty((String)value)) return null;throw pe;}}  }
class C{  public void resetTaskCompleted(){  this.lastTaskCompleted=true;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) private IV datePlusDuration(LiteralExtensionIV iv,Duration d,BigdataValueFactory vf){  long ts=iv.getDelegate().longValue();  WikibaseDate newdate=WikibaseDate.fromSecondsSinceEpoch(ts).addDuration(d);  LiteralExtensionIV result=new LiteralExtensionIV(new XSDNumericIV(newdate.secondsSinceEpoch()),iv.getExtensionIV());  result.setValue(safeAsValue(result,vf,getDataType(iv)));  return result;}  }
class C{  public void ignorableWhitespace(char ch[],int start,int length) throws org.xml.sax.SAXException {  if (0 == length)   return;  characters(ch,start,length);}  }
class C{  public double y(){  return y;}  }
class C{  private ListenableFuture<Void> indexPartitionDtos(QualifiedName tableName,List<PartitionDto> dtos){  return esService.submit(null);}  }
class C{  public int transformToRTF(ElemTemplateElement templateParent) throws TransformerException {  DTM dtmFrag=m_xcontext.getRTFDTM();  return transformToRTF(templateParent,dtmFrag);}  }
class C{  public static InputStream toInputStream(String input,Charset encoding){  return new ByteArrayInputStream(input.getBytes(Charsets.toCharset(encoding)));}  }
class C{  private ValueLobDb(DataHandler handler,byte[] buff,int len,InputStream in,long remaining) throws IOException {  this.type=Value.BLOB;  this.handler=handler;  this.small=null;  this.lobId=0;  this.hmac=null;  this.fileName=createTempLobFileName(handler);  this.tempFile=this.handler.openFile(fileName,"rw",false);  this.tempFile.autoDelete();  FileStoreOutputStream out=new FileStoreOutputStream(tempFile,null,null);  long tmpPrecision=0;  boolean compress=this.handler.getLobCompressionAlgorithm(Value.BLOB) != null;  try {    while (true) {      tmpPrecision+=len;      out.write(buff,0,len);      remaining-=len;      if (remaining <= 0) {        break;      }      len=getBufferSize(this.handler,compress,remaining);      len=IOUtils.readFully(in,buff,len);      if (len <= 0) {        break;      }    }  }  finally {    out.close();  }  this.precision=tmpPrecision;}  }
class C{  public TypeSpecifierItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public void addURL(final String url){  while (currentIndex < history.size() - 1) {    history.remove(currentIndex + 1);  }  history.add(url);  currentIndex=history.size() - 1;}  }
class C{  protected void serializeElement(Element node,boolean bStart) throws SAXException {  if (bStart) {    fElementDepth++;    if ((fFeatures & WELLFORMED) != 0) {      isElementWellFormed(node);    }    if (!applyFilter(node,NodeFilter.SHOW_ELEMENT)) {      return;    }    if ((fFeatures & NAMESPACES) != 0) {      fNSBinder.pushContext();      fLocalNSBinder.reset();      recordLocalNSDecl(node);      fixupElementNS(node);    }    fSerializer.startElement(node.getNamespaceURI(),node.getLocalName(),node.getNodeName());    serializeAttList(node);  } else {    fElementDepth--;    if (!applyFilter(node,NodeFilter.SHOW_ELEMENT)) {      return;    }    this.fSerializer.endElement(node.getNamespaceURI(),node.getLocalName(),node.getNodeName());    if ((fFeatures & NAMESPACES) != 0) {      fNSBinder.popContext();    }  }}  }
class C{  @Override public void end(String stackId,long beginTime,long endTime,long consumeTime,Object returnValue,Exception e){  TransManager manager=TransManager.getInstance();  try {    boolean printFlag=PropertyHolder.getBooleanProperty("log.trans.db.print");    if (manager.isError() || manager.isTimeout() || printFlag) {      saveTransLog(stackId,beginTime,endTime,consumeTime,returnValue,e);      saveTransLogStack(manager);    }  } catch (  Exception ex) {    logger.error(ex);  }}  }
class C{  private void insertComments(CompilationUnit cu,TreeSet<Comment> comments){  if (comments.isEmpty())   return;  List<Node> children=cu.getChildrenNodes();  PositionUtils.sortByBeginPosition(children);  Comment firstComment=comments.iterator().next();  if (cu.getPackage() != null && (children.isEmpty() || PositionUtils.areInOrder(firstComment,children.get(0)))) {    cu.setComment(firstComment);    comments.remove(firstComment);  }}  }
class C{  public CertBlacklist(String pubkeyBlacklistPath,String serialBlacklistPath){  serialBlacklist=readSerialBlackList(serialBlacklistPath);  pubkeyBlacklist=readPublicKeyBlackList(pubkeyBlacklistPath);}  }
class C{  private Map<String,String> loadDCATSettings(){  Map<String,String> loadedSettings=Maps.newHashMap();  Closer closer=Closer.create();  try {    InputStream configStream=closer.register(streamUtils.classpathStream(DCAT_SETTINGS));    if (configStream == null) {      LOG.error("Failed to load DCAT settings: " + DCAT_SETTINGS);    } else {      Properties properties=new Properties();      properties.load(configStream);      for (      Map.Entry<Object,Object> entry : properties.entrySet()) {        String key=StringUtils.trim((String)entry.getKey());        String value=StringUtils.trim((String)entry.getValue());        if (key != null && value != null) {          loadedSettings.put(key,value);        } else {          throw new InvalidConfigException(InvalidConfigException.TYPE.INVALID_PROPERTIES_FILE,"Invalid properties file: " + DCAT_SETTINGS);        }      }      LOG.debug("Loaded static DCAT settings: " + loadedSettings.toString());    }  } catch (  Exception e) {    LOG.error("Failed to load DCAT settings from: " + DCAT_SETTINGS,e);  } finally {    try {      closer.close();    } catch (    IOException e) {      LOG.debug("Failed to close input stream on DCAT settings file: " + DCAT_SETTINGS,e);    }  }  return loadedSettings;}  }
