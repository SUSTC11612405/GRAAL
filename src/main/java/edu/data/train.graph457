class C{  @Override public boolean equals(Object o){  if (!(o instanceof Version))   return false;  Version v=(Version)o;  if (v == this)   return true;  if (numbers.length != v.numbers.length)   return false;  for (int i=0; i < numbers.length; i++) {    if (numbers[i] != v.numbers[i])     return false;  }  return true;}  }
class C{  public FireworkEffectBuilder withFade(Iterable<Color> colors) throws IllegalArgumentException {  Validate.notNull(colors,"Colors can't be null");  for (  Color color : colors) {    this.fadeColors.add(color);  }  return this;}  }
class C{  protected void debugCodeCall(String methodName,String param){  if (trace.isDebugEnabled()) {    trace.debugCode(getTraceObjectName() + "." + methodName+ "("+ quote(param)+ ");");  }}  }
class C{  public static void filterOutInitiatorsNotAssociatedWithVArray(URI virtualArrayURI,List<URI> newInitiators,DbClient dbClient){  Iterator<URI> it=newInitiators.iterator();  while (it.hasNext()) {    URI uri=it.next();    Initiator initiator=dbClient.queryObject(Initiator.class,uri);    if (initiator == null) {      _log.info(String.format("Initiator %s was not found in DB. Will be eliminated from request payload.",uri.toString()));      it.remove();      continue;    }    if (!isInitiatorInVArraysNetworks(virtualArrayURI,initiator,dbClient)) {      _log.info(String.format("Initiator %s (%s) will be eliminated from the payload " + "because it was not associated with Virtual Array %s",initiator.getInitiatorPort(),initiator.getId().toString(),virtualArrayURI.toString()));      it.remove();    }  }}  }
class C{  private static String summarizeCompletedJob(Job job){  JobStatistics stats=job.getStatistics();  return String.format("Job took %,.3f seconds after a %,.3f second delay and processed %,d bytes (%s)",(stats.getEndTime() - stats.getStartTime()) / 1000.0,(stats.getStartTime() - stats.getCreationTime()) / 1000.0,stats.getTotalBytesProcessed(),toJobReferenceString(job.getJobReference()));}  }
class C{  public DoubleFactor(DoubleFactor existingFactor){  matrix=new HashMap<Assignment,double[]>(existingFactor.matrix);}  }
class C{  public static final synchronized Cache basicGetCache(){  return cache;}  }
class C{  private void updateVolumeInfoAfterCommitDeviceMigration(String originalVolumeName,VPlexMigrationInfo migrationInfo,List<VPlexClusterInfo> clusterInfoList,boolean rename){  VPlexVirtualVolumeInfo virtualVolumeInfo=findVirtualVolumeAfterDeviceMigration(originalVolumeName,migrationInfo,clusterInfoList);  if (virtualVolumeInfo == null) {    s_logger.warn("Could not find virtual volume {} after device migration",originalVolumeName);    return;  }  if ((rename) && (volumeHasDefaultNamingConvention(originalVolumeName,false))) {    String migrationTgtName=migrationInfo.getTarget();    if ((originalVolumeName.equals(virtualVolumeInfo.getName())) || (migrationTgtName.equals(virtualVolumeInfo.getName()))) {      String volumeNameAfterMigration=virtualVolumeInfo.getName();      String volumePathAfterMigration=virtualVolumeInfo.getPath();      StringBuilder volumeNameBuilder=new StringBuilder();      volumeNameBuilder.append(migrationTgtName);      if (!volumeNameBuilder.toString().endsWith(VPlexApiConstants.VIRTUAL_VOLUME_SUFFIX)) {        volumeNameBuilder.append(VPlexApiConstants.VIRTUAL_VOLUME_SUFFIX);      }      virtualVolumeInfo=_vplexApiClient.renameResource(virtualVolumeInfo,volumeNameBuilder.toString());      s_logger.info(String.format("Renamed virtual volume after migration from name: %s path: %s to %s",volumeNameAfterMigration,volumePathAfterMigration,volumeNameBuilder.toString()));    }    migrationInfo.setVirtualVolumeInfo(virtualVolumeInfo);  } else   if (!originalVolumeName.equals(virtualVolumeInfo.getName())) {    String newName=virtualVolumeInfo.getName();    virtualVolumeInfo=_vplexApiClient.renameResource(virtualVolumeInfo,originalVolumeName);    s_logger.info("Renamed virtual volume {} back to its orginal name {}",newName,originalVolumeName);    migrationInfo.setVirtualVolumeInfo(virtualVolumeInfo);  }}  }
class C{  public static boolean isUnboundedOrSuperBounded(final AnnotatedWildcardType wildcardType){  return ((Type.WildcardType)wildcardType.getUnderlyingType()).isSuperBound();}  }
class C{  public VolumeShowResponse showVolume(String volumeId) throws Exception {  _log.info("CinderApi - start showVolume");  String showVolumeUri=endPoint.getBaseUri() + String.format(CinderConstants.URI_DELETE_VOLUME,new Object[]{endPoint.getCinderTenantId(),volumeId});  ClientResponse js_response=getClient().get(URI.create(showVolumeUri));  _log.debug("uri {} : Response status {}",showVolumeUri,String.valueOf(js_response.getStatus()));  if (js_response.getStatus() == ClientResponse.Status.NOT_FOUND.getStatusCode()) {    throw CinderException.exceptions.volumeNotFound(volumeId);  }  String jsonString=js_response.getEntity(String.class);  VolumeShowResponse volumeDetails=new Gson().fromJson(SecurityUtils.sanitizeJsonString(jsonString),VolumeShowResponse.class);  _log.info("CinderApi - end showVolume");  return volumeDetails;}  }
class C{  @Override public void deleteFeature(){  try {    MapLayer layer=openMaps.get(activeMap).getActiveMapArea().getActiveLayer();    if (layer instanceof VectorLayerInfo) {      VectorLayerInfo vli=(VectorLayerInfo)layer;      if (!vli.isActivelyEdited()) {        showFeedback(messages.getString("NotEditingVector") + " \n" + messages.getString("SelectEditVector"));        return;      }      if (vli.getSelectedFeatureNumbers().isEmpty()) {        showFeedback(messages.getString("NoFeaturesSelected"));        return;      } else {        int n=showFeedback(messages.getString("DeleteFeature") + "?",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);        if (n == JOptionPane.YES_OPTION) {          vli.deleteSelectedFeatures();          vli.reloadShapefile();          refreshMap(false);        } else         if (n == JOptionPane.NO_OPTION) {          return;        }      }    } else {      showFeedback(messages.getString("ActiveLayerNotVector"));    }  } catch (  Exception e) {    showFeedback(messages.getString("Error") + e.getMessage());    logger.log(Level.SEVERE,"WhiteboxGui.deleteFeature",e);  }}  }
class C{  public void processEvent(SystemEvent event) throws AbortProcessingException {  FacesContext context=FacesContext.getCurrentInstance();  HtmlOutputText outputText=(HtmlOutputText)context.getApplication().createComponent("javax.faces.HtmlOutputText");  outputText.setValue("Dynamic Text");  outputText.setEscape(false);  getChildren().add(1,outputText);}  }
class C{  private void showFootView(){  if (loadmoreView != null) {    loadmoreView.setVisibility(View.VISIBLE);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static final double feetToMeters(double feet){  return feet * FOOT_TO_METER;}  }
class C{  int readCorner3(int numRows,int numColumns){  int currentByte=0;  if (readModule(numRows - 1,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 3,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 3,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  public MyHashMap(){  this(DEFAULT_INITIAL_CAPACITY,DEFAULT_MAX_LOAD_FACTOR);}  }
class C{  private void searchText(){  String query=searchEditText.getText().toString();  presenter.onScrollFinished(query);}  }
class C{  public List<Node> findMb(String targetName){  TetradLogger.getInstance().log("info","target = " + targetName);  numIndTests=0;  long time=System.currentTimeMillis();  pc=new HashMap<>();  trimmed=new HashSet<>();  Node target=getVariableForName(targetName);  List<Node> nodes=mmmb(target);  long time2=System.currentTimeMillis() - time;  TetradLogger.getInstance().log("info","Number of seconds: " + (time2 / 1000.0));  TetradLogger.getInstance().log("info","Number of independence tests performed: " + numIndTests);  return nodes;}  }
class C{  public void evaluateExpression(double[] vals) throws Exception {  Stack<Double> operands=new Stack<Double>();  for (int i=0; i < m_postFixExpVector.size(); i++) {    Object nextob=m_postFixExpVector.elementAt(i);    if (nextob instanceof NumericOperand) {      operands.push(new Double(((NumericOperand)nextob).m_numericConst));    } else     if (nextob instanceof AttributeOperand) {      double value=vals[((AttributeOperand)nextob).m_attributeIndex];      if (((AttributeOperand)nextob).m_negative) {        value=-value;      }      operands.push(new Double(value));    } else     if (nextob instanceof Operator) {      char op=((Operator)nextob).m_operator;      if (isUnaryFunction(op)) {        double operand=((Double)operands.pop()).doubleValue();        double result=((Operator)nextob).applyFunction(operand);        operands.push(new Double(result));      } else {        double second=((Double)operands.pop()).doubleValue();        double first=((Double)operands.pop()).doubleValue();        double result=((Operator)nextob).applyOperator(first,second);        operands.push(new Double(result));      }    } else {      throw new Exception("Unknown object in postfix vector!");    }  }  if (operands.size() != 1) {    throw new Exception("Problem applying function");  }  Double result=((Double)operands.pop());  if (result.isNaN() || result.isInfinite()) {    vals[vals.length - 1]=Utils.missingValue();  } else {    vals[vals.length - 1]=result.doubleValue();  }}  }
class C{  private void checkStrengthSupport(byte[] ciphersInChallenge) throws IOException {  if (ciphersInChallenge == null) {    throw new SaslException("DIGEST-MD5: server did not specify " + "cipher to use for 'auth-conf'");  }  String cipherOptions=new String(ciphersInChallenge,encoding);  StringTokenizer parser=new StringTokenizer(cipherOptions,", \t\n");  int tokenCount=parser.countTokens();  String token=null;  byte[] serverCiphers={UNSET,UNSET,UNSET,UNSET,UNSET};  String[] serverCipherStrs=new String[serverCiphers.length];  for (int i=0; i < tokenCount; i++) {    token=parser.nextToken();    for (int j=0; j < CIPHER_TOKENS.length; j++) {      if (token.equals(CIPHER_TOKENS[j])) {        serverCiphers[j]|=CIPHER_MASKS[j];        serverCipherStrs[j]=token;        logger.log(Level.FINE,"DIGEST62:Server supports {0}",token);      }    }  }  byte[] clntCiphers=getPlatformCiphers();  byte inter=0;  for (int i=0; i < serverCiphers.length; i++) {    serverCiphers[i]&=clntCiphers[i];    inter|=serverCiphers[i];  }  if (inter == UNSET) {    throw new SaslException("DIGEST-MD5: Client supports none of these cipher suites: " + cipherOptions);  }  negotiatedCipher=findCipherAndStrength(serverCiphers,serverCipherStrs);  if (negotiatedCipher == null) {    throw new SaslException("DIGEST-MD5: Unable to negotiate " + "a strength level for 'auth-conf'");  }  logger.log(Level.FINE,"DIGEST63:Cipher suite: {0}",negotiatedCipher);}  }
class C{  public static boolean directoryExists(String dir){  File tmp=new File(dir);  return (tmp.isDirectory() && tmp.exists());}  }
class C{  private static boolean useCompactFontFormat(Map<String,Object> args,int compatibilityVersion){  String value=(String)args.get(EMBEDASCFF);  boolean useCFF=true;  if (compatibilityVersion < MxmlConfiguration.VERSION_4_0)   useCFF=false;  if (value != null) {    useCFF=Boolean.parseBoolean(value.trim());  }  return useCFF;}  }
class C{  boolean isAlpha(char ch){  return ((ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z'));}  }
class C{  public void showStartupDialogs(){  if (!EulaUtils.hasAcceptedEula(this)) {    Fragment fragment=getSupportFragmentManager().findFragmentByTag(EulaDialogFragment.EULA_DIALOG_TAG);    if (fragment == null) {      EulaDialogFragment.newInstance(false).show(getSupportFragmentManager(),EulaDialogFragment.EULA_DIALOG_TAG);    }  } else {    if (PreferencesUtils.getString(this,R.string.stats_units_key,"").equals("")) {      String statsUnits=getString(Locale.US.equals(Locale.getDefault()) ? R.string.stats_units_imperial : R.string.stats_units_metric);      PreferencesUtils.setString(this,R.string.stats_units_key,statsUnits);    }    checkGooglePlayServices();  }}  }
class C{  private boolean isNonCommandLineArgument(String propName){  return propName.equals(EXECUTABLE_NAME_KEY) || propName.equals(EXECUTABLE_PATH_KEY);}  }
class C{  public void recognize(){  Log.d(TAG,"recognize");  try {    HashMap<String,String> header=new HashMap<String,String>();    header.put("Content-Type",sConfig.audioFormat);    if (sConfig.isAuthNeeded) {      if (this.tokenProvider != null) {        header.put("X-Watson-Authorization-Token",this.tokenProvider.getToken());        Log.d(TAG,"ws connecting with token based authentication");      } else {        String auth="Basic " + Base64.encodeBytes((this.username + ":" + this.password).getBytes(Charset.forName("UTF-8")));        header.put("Authorization",auth);        Log.d(TAG,"ws connecting with Basic Authentication");      }    }    if (sConfig.learningOptOut) {      header.put("X-Watson-Learning-OptOut","true");      Log.d(TAG,"ws setting X-Watson-Learning-OptOut");    }    String wsURL=getHostURL().toString() + "/v1/recognize" + (this.model != null ? ("?model=" + this.model) : "");    uploader=new WebSocketUploader(wsURL,header,sConfig);    uploader.setDelegate(this.delegate);    this.startRecording();  } catch (  URISyntaxException e) {    e.printStackTrace();  }}  }
class C{  public boolean functionAvailable(String ns,String funcName) throws javax.xml.transform.TransformerException {  boolean isAvailable=false;  if (null != ns) {    ExtensionHandler extNS=(ExtensionHandler)m_extensionFunctionNamespaces.get(ns);    if (extNS != null)     isAvailable=extNS.isFunctionAvailable(funcName);  }  return isAvailable;}  }
class C{  private void doTranslation(float dx,float dy){  mRenderer.matrixTranslate(dx,-dy,0);}  }
class C{  protected void commandFf(final int flagValue){  flags=new boolean[32];  flags[READONLY_ID]=(flagValue & READONLY_BIT) == READONLY_BIT;  flags[REQUIRED_ID]=(flagValue & REQUIRED_BIT) == REQUIRED_BIT;  flags[NOEXPORT_ID]=(flagValue & NOEXPORT_BIT) == NOEXPORT_BIT;  flags[MULTILINE_ID]=(flagValue & MULTILINE_BIT) == MULTILINE_BIT;  flags[PASSWORD_ID]=(flagValue & PASSWORD_BIT) == PASSWORD_BIT;  flags[NOTOGGLETOOFF_ID]=(flagValue & NOTOGGLETOOFF_BIT) == NOTOGGLETOOFF_BIT;  flags[RADIO_ID]=(flagValue & RADIO_BIT) == RADIO_BIT;  flags[PUSHBUTTON_ID]=(flagValue & PUSHBUTTON_BIT) == PUSHBUTTON_BIT;  flags[COMBO_ID]=(flagValue & COMBO_BIT) == COMBO_BIT;  flags[EDIT_ID]=(flagValue & EDIT_BIT) == EDIT_BIT;  flags[SORT_ID]=(flagValue & SORT_BIT) == SORT_BIT;  flags[FILESELECT_ID]=(flagValue & FILESELECT_BIT) == FILESELECT_BIT;  flags[MULTISELECT_ID]=(flagValue & MULTISELECT_BIT) == MULTISELECT_BIT;  flags[DONOTSPELLCHECK_ID]=(flagValue & DONOTSPELLCHECK_BIT) == DONOTSPELLCHECK_BIT;  flags[DONOTSCROLL_ID]=(flagValue & DONOTSCROLL_BIT) == DONOTSCROLL_BIT;  flags[COMB_ID]=(flagValue & COMB_BIT) == COMB_BIT;  flags[RICHTEXT_ID]=(flagValue & RICHTEXT_BIT) == RICHTEXT_BIT;  flags[RADIOINUNISON_ID]=(flagValue & RADIOINUNISON_BIT) == RADIOINUNISON_BIT;  flags[COMMITONSELCHANGE_ID]=(flagValue & COMMITONSELCHANGE_BIT) == COMMITONSELCHANGE_BIT;}  }
class C{  public TableDataException(String string){  super(string);}  }
class C{  public static byte[] decode(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decode(bytes,0,bytes.length);}  }
class C{  public JCasId_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_id=jcas.getRequiredFeatureDE(casType,"id","uima.cas.Integer",featOkTst);  casFeatCode_id=(null == casFeat_id) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_id).getCode();}  }
class C{  protected Link(ElementKey<?,? extends Link> key){  super(key);}  }
class C{  public void start(@NonNull Context context,@NonNull android.support.v4.app.Fragment fragment,int requestCode){  fragment.startActivityForResult(getIntent(context),requestCode);}  }
class C{  NamedBeanHandle<Turnout> loadTurnout(Object o){  Element e=(Element)o;  if (e.getName().equals("turnout")) {    String name=e.getAttribute("systemName").getValue();    Turnout t;    if (e.getAttribute("userName") != null && !e.getAttribute("userName").getValue().equals("")) {      name=e.getAttribute("userName").getValue();      t=InstanceManager.turnoutManagerInstance().getTurnout(name);    } else {      t=InstanceManager.turnoutManagerInstance().getBySystemName(name);    }    return jmri.InstanceManager.getDefault(jmri.NamedBeanHandleManager.class).getNamedBeanHandle(name,t);  } else {    String name=e.getText();    try {      Turnout t=InstanceManager.turnoutManagerInstance().provideTurnout(name);      return jmri.InstanceManager.getDefault(jmri.NamedBeanHandleManager.class).getNamedBeanHandle(name,t);    } catch (    IllegalArgumentException ex) {      log.warn("Failed to provide Turnout \"{}\" in loadTurnout",name);      return null;    }  }}  }
class C{  public void connect(final Request request) throws IOException {  this.request=request;  try {    Browser.waitForPageAccess(this,request);  } catch (  final InterruptedException e) {    throw new IOException("requestIntervalTime Exception");  }  try {    request.connect();  }  finally {    if (this.isDebug()) {      final Logger llogger=this.getLogger();      if (llogger != null) {        try {          llogger.finest("\r\n" + request.printHeaders());        } catch (        final Throwable e) {          e.printStackTrace();        }      }    }  }}  }
class C{  public Model scale(double x,double y,double z){  for (  Box box : this.modelBoxes) {    for (    Quad quad : box.quads) {      for (int i=0; i < 4; i++) {        Vec3UV vec=quad.vertices[i];        vec.x*=x;        vec.y*=y;        vec.z*=z;      }    }  }  return this;}  }
class C{  public static boolean isValidType(short type){  return type == TYPE_UNSIGNED_BYTE || type == TYPE_ASCII || type == TYPE_UNSIGNED_SHORT || type == TYPE_UNSIGNED_LONG || type == TYPE_UNSIGNED_RATIONAL || type == TYPE_UNDEFINED || type == TYPE_LONG || type == TYPE_RATIONAL;}  }
class C{  public FilenameUtils(){  super();}  }
class C{  public static Response externalException(ExternalException e){  ApiError error=new ApiError(e.getErrorCode(),e.getMessage(),e.getData());  Response.ResponseBuilder builder=Response.status(e.getHttpStatus()).entity(error).type(MediaType.APPLICATION_JSON);  addResponseHeaders(builder);  return builder.build();}  }
class C{  public boolean accept(Json msg){  if (compareAndSetState(State.Proposed,State.Accepted)) {    msg.set(Messages.PERFORMATIVE,Performative.AcceptProposal);    say(msg);    return true;  }  return false;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected ArrayList<FirewallRule> readRulesFromStorage(){  ArrayList<FirewallRule> l=new ArrayList<FirewallRule>();  try {    Map<String,Object> row;    IResultSet resultSet=storageSource.executeQuery(TABLE_NAME,ColumnNames,null,null);    for (Iterator<IResultSet> it=resultSet.iterator(); it.hasNext(); ) {      row=it.next().getRow();      FirewallRule r=new FirewallRule();      if (!row.containsKey(COLUMN_RULEID) || !row.containsKey(COLUMN_DPID)) {        logger.error("skipping entry with missing required 'ruleid' or 'switchid' entry: {}",row);        return l;      }      try {        r.ruleid=Integer.parseInt((String)row.get(COLUMN_RULEID));        r.dpid=DatapathId.of((String)row.get(COLUMN_DPID));        for (        String key : row.keySet()) {          if (row.get(key) == null) {            continue;          }          if (key.equals(COLUMN_RULEID) || key.equals(COLUMN_DPID) || key.equals("id")) {            continue;          } else           if (key.equals(COLUMN_IN_PORT)) {            r.in_port=OFPort.of(Integer.parseInt((String)row.get(COLUMN_IN_PORT)));          } else           if (key.equals(COLUMN_DL_SRC)) {            r.dl_src=MacAddress.of(Long.parseLong((String)row.get(COLUMN_DL_SRC)));          } else           if (key.equals(COLUMN_DL_DST)) {            r.dl_dst=MacAddress.of(Long.parseLong((String)row.get(COLUMN_DL_DST)));          } else           if (key.equals(COLUMN_DL_TYPE)) {            r.dl_type=EthType.of(Integer.parseInt((String)row.get(COLUMN_DL_TYPE)));          } else           if (key.equals(COLUMN_NW_SRC_PREFIX)) {            r.nw_src_prefix_and_mask=IPv4AddressWithMask.of(IPv4Address.of(Integer.parseInt((String)row.get(COLUMN_NW_SRC_PREFIX))),r.nw_src_prefix_and_mask.getMask());          } else           if (key.equals(COLUMN_NW_SRC_MASKBITS)) {            r.nw_src_prefix_and_mask=IPv4AddressWithMask.of(r.nw_src_prefix_and_mask.getValue(),IPv4Address.of(Integer.parseInt((String)row.get(COLUMN_NW_SRC_MASKBITS))));          } else           if (key.equals(COLUMN_NW_DST_PREFIX)) {            r.nw_dst_prefix_and_mask=IPv4AddressWithMask.of(IPv4Address.of(Integer.parseInt((String)row.get(COLUMN_NW_DST_PREFIX))),r.nw_dst_prefix_and_mask.getMask());          } else           if (key.equals(COLUMN_NW_DST_MASKBITS)) {            r.nw_dst_prefix_and_mask=IPv4AddressWithMask.of(r.nw_dst_prefix_and_mask.getValue(),IPv4Address.of(Integer.parseInt((String)row.get(COLUMN_NW_DST_MASKBITS))));          } else           if (key.equals(COLUMN_NW_PROTO)) {            r.nw_proto=IpProtocol.of(Short.parseShort((String)row.get(COLUMN_NW_PROTO)));          } else           if (key.equals(COLUMN_TP_SRC)) {            r.tp_src=TransportPort.of(Integer.parseInt((String)row.get(COLUMN_TP_SRC)));          } else           if (key.equals(COLUMN_TP_DST)) {            r.tp_dst=TransportPort.of(Integer.parseInt((String)row.get(COLUMN_TP_DST)));          } else           if (key.equals(COLUMN_WILDCARD_DPID)) {            r.any_dpid=Boolean.parseBoolean((String)row.get(COLUMN_WILDCARD_DPID));          } else           if (key.equals(COLUMN_WILDCARD_IN_PORT)) {            r.any_in_port=Boolean.parseBoolean((String)row.get(COLUMN_WILDCARD_IN_PORT));          } else           if (key.equals(COLUMN_WILDCARD_DL_SRC)) {            r.any_dl_src=Boolean.parseBoolean((String)row.get(COLUMN_WILDCARD_DL_SRC));          } else           if (key.equals(COLUMN_WILDCARD_DL_DST)) {            r.any_dl_dst=Boolean.parseBoolean((String)row.get(COLUMN_WILDCARD_DL_DST));          } else           if (key.equals(COLUMN_WILDCARD_DL_TYPE)) {            r.any_dl_type=Boolean.parseBoolean((String)row.get(COLUMN_WILDCARD_DL_TYPE));          } else           if (key.equals(COLUMN_WILDCARD_NW_SRC)) {            r.any_nw_src=Boolean.parseBoolean((String)row.get(COLUMN_WILDCARD_NW_SRC));          } else           if (key.equals(COLUMN_WILDCARD_NW_DST)) {            r.any_nw_dst=Boolean.parseBoolean((String)row.get(COLUMN_WILDCARD_NW_DST));          } else           if (key.equals(COLUMN_WILDCARD_NW_PROTO)) {            r.any_nw_proto=Boolean.parseBoolean((String)row.get(COLUMN_WILDCARD_NW_PROTO));          } else           if (key.equals(COLUMN_PRIORITY)) {            r.priority=Integer.parseInt((String)row.get(COLUMN_PRIORITY));          } else           if (key.equals(COLUMN_ACTION)) {            int tmp=Integer.parseInt((String)row.get(COLUMN_ACTION));            if (tmp == FirewallRule.FirewallAction.DROP.ordinal()) {              r.action=FirewallRule.FirewallAction.DROP;            } else             if (tmp == FirewallRule.FirewallAction.ALLOW.ordinal()) {              r.action=FirewallRule.FirewallAction.ALLOW;            } else {              r.action=null;              logger.error("action not recognized");            }          }        }      } catch (      ClassCastException e) {        logger.error("skipping rule {} with bad data : " + e.getMessage(),r.ruleid);      }      if (r.action != null) {        l.add(r);      }    }  } catch (  StorageException e) {    logger.error("failed to access storage: {}",e.getMessage());  }  Collections.sort(l);  return l;}  }
class C{  public PatternFilenameFilter(String patternStr){  this(Pattern.compile(patternStr));}  }
class C{  public void remove(){  iterator.remove();}  }
class C{  @EventHandler(priority=EventPriority.HIGH,ignoreCancelled=true) public void onBlockPistonExtend(BlockPistonExtendEvent event){  Match match=Cardinal.getMatch(event.getWorld());  if (match == null) {    return;  }  Collection<AppliedRegion> regions=get(match,ApplyType.BLOCK,ApplyType.BLOCK_PLACE,ApplyType.BLOCK_BREAK);  Block pistonHead=event.getBlock().getRelative(event.getDirection());  for (  AppliedRegion reg : regions) {    if (!reg.getType().equals(ApplyType.BLOCK_BREAK) && reg.contains(pistonHead.getLocation())) {      FilterState result=reg.evaluate(event,Material.PISTON_EXTENSION);      if (!result.toBoolean()) {        event.setCancelled(true);        return;      } else       if (result.hasResult()) {        break;      }    }  }  for (  Block block : event.getBlocks()) {    if (!tryPistonMove(regions,block,event)) {      event.setCancelled(true);      return;    }  }}  }
class C{  private double[][] createSampleData1(){  double[][] result=new double[11][2];  result[0][0]=2.00;  result[0][1]=1.60;  result[1][0]=2.25;  result[1][1]=2.00;  result[2][0]=2.60;  result[2][1]=1.80;  result[3][0]=2.65;  result[3][1]=2.80;  result[4][0]=2.80;  result[4][1]=2.10;  result[5][0]=3.10;  result[5][1]=2.00;  result[6][0]=2.90;  result[6][1]=2.65;  result[7][0]=3.25;  result[7][1]=2.25;  result[8][0]=3.30;  result[8][1]=2.60;  result[9][0]=3.60;  result[9][1]=3.00;  result[10][0]=3.25;  result[10][1]=3.10;  return result;}  }
class C{  public void expectServerProxyFailed(){  expectedApiCalls.add(new ApiCall(SERVER_PROXY_FAILED));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Album al=getAlbum(stack);  return (al == null) ? new Integer(0) : new Integer(al.getAirings().length);}  }
class C{  @Override public void writeStartElement(String localName) throws XMLStreamException {  writeStartElement(null,localName,null);}  }
class C{  public Move interpretMove(IGameState gameState,int col,int row,Player player){  TicTacToeState tstate=(TicTacToeState)gameState;  TicTacToeBoard board=tstate.board();  if (col < 0)   return null;  if (col >= board.numColumns())   return null;  if (row < 0)   return null;  if (row >= board.numRows())   return null;  if (state.getPhase() == PLACE_PHASE) {    if (board.isClear(col,row)) {      return new SlidePlaceMark(col,row,player);    }    return null;  }  Cell empty=getEmptyCell(board);  if (empty == null)   return null;  SlideMark sm=new SlideMark(col,row,empty.col,empty.row,player);  if (sm.isValid(gameState)) {    return sm;  }  for (int c=0; c < board.numColumns(); c++) {    for (int r=0; r < board.numRows(); r++) {      sm=new SlideMark(c,r,empty.col,empty.row,player);      if (sm.isValid(gameState)) {        return null;      }    }  }  if (board.isClear(col,row)) {    return new PlaceMark(empty.col,empty.row,player);  }  return null;}  }
class C{  @Override public void deleteMessage(String msgId){  mImService.tryToDeleteChatMessage(msgId);}  }
class C{  public RepeatedRaptorProfileRouter(TransportNetwork network,AnalystClusterRequest clusterRequest,LinkedPointSet targets,TaskStatistics ts){  if (network.streetLayer != targets.streetLayer) {    LOG.error("Transit network and target point set are not linked to the same street layer.");  }  this.network=network;  this.clusterRequest=clusterRequest;  this.targets=targets;  this.request=clusterRequest.profileRequest;  this.ts=ts;}  }
class C{  public void write(Writer out,ELContext ctx) throws ELException, IOException {  out.write(this.literal);}  }
class C{  public static FSExportMap convertUnManagedExportMapToManaged(UnManagedFSExportMap unManagedFSExportMap,StoragePort storagePort,StorageHADomain dataMover){  FSExportMap fsExportMap=new FSExportMap();  if (unManagedFSExportMap == null) {    return fsExportMap;  }  for (  UnManagedFSExport export : unManagedFSExportMap.values()) {    FileExport fsExport=new FileExport();    if (null != export.getIsilonId()) {      fsExport.setIsilonId(export.getIsilonId());    }    if (null != export.getNativeId()) {      fsExport.setNativeId(export.getNativeId());    }    if (null != storagePort) {      fsExport.setStoragePort(storagePort.getPortName());      if ((export.getMountPath() != null) && (export.getMountPath().length() > 0)) {        fsExport.setMountPoint(ExportUtils.getFileMountPoint(storagePort.getPortNetworkId(),export.getMountPath()));      } else {        fsExport.setMountPoint(ExportUtils.getFileMountPoint(storagePort.getPortNetworkId(),export.getPath()));      }    } else     if (null != export.getStoragePort()) {      fsExport.setStoragePort(export.getStoragePort());      if (null != export.getMountPoint()) {        fsExport.setMountPoint(export.getMountPoint());      }    }    if (null != dataMover) {      fsExport.setStoragePortName(dataMover.getName());    } else     if (null != storagePort) {      fsExport.setStoragePortName(storagePort.getPortName());    } else     if (null != export.getStoragePortName()) {      fsExport.setStoragePortName(export.getStoragePortName());    }    if (null != export.getMountPath()) {      fsExport.setMountPath(export.getMountPath());    }    fsExport.setPath(export.getPath());    fsExport.setPermissions(export.getPermissions());    fsExport.setProtocol(export.getProtocol());    fsExport.setRootUserMapping(export.getRootUserMapping());    fsExport.setSecurityType(export.getSecurityType());    fsExport.setClients(export.getClients());    fsExportMap.put(fsExport.getFileExportKey(),fsExport);  }  return fsExportMap;}  }
class C{  public float lengthOfPath(){  return pathLength.lengthOfPath();}  }
class C{  public String next(){  seq+=inc;  if (seq >= maxSeq) {    randomizePrefix();    resetSequential();  }  char[] b=new char[totalLen];  System.arraycopy(pre,0,b,0,preLen);  int i=b.length;  for (long l=seq; i > preLen; l/=base) {    i--;    b[i]=digits[(int)(l % base)];  }  return new String(b);}  }
class C{  public boolean isNearlyEqualTo(DoubleVector v,double tolerance){  return Math.abs(v.x - x) < tolerance && Math.abs(v.y - y) < tolerance && Math.abs(v.z - z) < tolerance;}  }
class C{  public static void main(String[] args) throws OAuthException, IOException, ServiceException {  if (args.length != 3) {    System.out.println("Usage: unshare_profile <consumerKey> <consumerSecret> <adminEmail>");  } else {    String consumerKey=args[0];    String consumerSecret=args[1];    String adminEmail=args[2];    ProfilesManager manager=new ProfilesManager(consumerKey,consumerSecret,adminEmail);    BatchResult result=manager.unshareProfiles();    System.out.println("Success: " + result.getSuccess() + " - Error: "+ result.getError());    for (    ContactEntry entry : result.getErrorEntries()) {      BatchStatus status=BatchUtils.getBatchStatus(entry);      System.out.println(" > Failed to update " + entry.getId() + ": ("+ status.getCode()+ ") "+ status.getReason());    }  }}  }
class C{  private void countResetFeedsAndCategories(){  final SQLiteDatabase db=getOpenHelper().getWritableDatabase();  try {    db.beginTransaction();    final ContentValues cv=new ContentValues(1);    cv.put(COL_UNREAD,0);    db.update(TABLE_FEEDS,cv,null,null);    db.update(TABLE_CATEGORIES,cv,null,null);    db.setTransactionSuccessful();  }  finally {    db.endTransaction();  }}  }
class C{  public static StaticMethodExpression staticMethod(String className,String method,Expression... parameters){  return new StaticMethodExpression(className,method,parameters);}  }
class C{  public static Set<String> readStopwordsFile(File file,boolean lowercase) throws IOException {  return readStopwordsPath(file.toPath(),lowercase);}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  public void testLargeMessage(){  String methodName="testLargeMessage";  IMqttAsyncClient mqttClient=null;  try {    mqttClient=new MqttAndroidClient(mContext,mqttServerURI,"testLargeMessage");    IMqttToken connectToken;    IMqttToken subToken;    IMqttToken unsubToken;    IMqttDeliveryToken pubToken;    MqttV3Receiver mqttV3Receiver=new MqttV3Receiver(mqttClient,null);    mqttClient.setCallback(mqttV3Receiver);    connectToken=mqttClient.connect(null,null);    connectToken.waitForCompletion(waitForCompletionTime);    int largeSize=1000;    String[] topicNames=new String[]{"testLargeMessage" + "/Topic"};    int[] topicQos={0};    byte[] message=new byte[largeSize];    java.util.Arrays.fill(message,(byte)'s');    subToken=mqttClient.subscribe(topicNames,topicQos,null,null);    subToken.waitForCompletion(waitForCompletionTime);    unsubToken=mqttClient.unsubscribe(topicNames,null,null);    unsubToken.waitForCompletion(waitForCompletionTime);    subToken=mqttClient.subscribe(topicNames,topicQos,null,null);    subToken.waitForCompletion(waitForCompletionTime);    pubToken=mqttClient.publish(topicNames[0],message,0,false,null,null);    pubToken.waitForCompletion(waitForCompletionTime);    boolean ok=mqttV3Receiver.validateReceipt(topicNames[0],0,message);    if (!ok) {      fail("Receive failed");    }  } catch (  Exception exception) {    fail("Failed to instantiate:" + methodName + " exception="+ exception);  } finally {    try {      IMqttToken disconnectToken;      disconnectToken=mqttClient.disconnect(null,null);      disconnectToken.waitForCompletion(waitForCompletionTime);      mqttClient.close();    } catch (    Exception exception) {    }  }}  }
class C{  public static PGPPublicKey mergeSignatures(PGPPublicKey targetKey,PGPPublicKey sourceKey) throws PGPException {  if (!Objects.deepEquals(targetKey.getFingerprint(),sourceKey.getFingerprint())) {    throw new IllegalArgumentException("Signature merge can be done for different instances of the same public key only");  }  return copySignatures(targetKey,sourceKey);}  }
class C{  public void test_setDoubleLjava_lang_ObjectID(){  double[] x={0};  boolean thrown=false;  try {    Array.setDouble(x,0,1);  } catch (  Exception e) {    fail("Exception during get test : " + e.getMessage());  }  assertEquals("Get returned incorrect value",1,Array.getDouble(x,0),0.0);  try {    Array.setDouble(new Object(),0,9);  } catch (  IllegalArgumentException e) {    thrown=true;  }  if (!thrown) {    fail("Passing non-array failed to throw exception");  }  thrown=false;  try {    Array.setDouble(x,4,9);  } catch (  ArrayIndexOutOfBoundsException e) {    thrown=true;  }  if (!thrown) {    fail("Invalid index failed to throw exception");  }  thrown=false;  try {    Array.setDouble(null,0,0);  } catch (  NullPointerException e) {    thrown=true;  }  if (!thrown) {    fail("Null argument failed to throw NPE");  }}  }
class C{  public Context(){  map(this);}  }
class C{  private Object readResolve() throws ObjectStreamException {  return ctx.grid().scheduler();}  }
class C{  public static IDownloaderService CreateProxy(Messenger msg){  return new Proxy(msg);}  }
class C{  public Cursor fetchLangGameWords(){  return mDb.query(TABLE_LEXIS,new String[]{_ROWID,KEY_LANG_ROOTWORD,KEY_LANG_LANGUAGE,KEY_LANG_ENGLISHTRANS,KEY_GAME_DIFFICULTY},null,null,null,null,null);}  }
class C{  public static void enterSearchQuery(Activity activity,String query){  EspressoTestUtils.clickMenuItem(activity,activity.getString(R.string.action_search),R.id.action_search);  onView(isAssignableFrom(AutoCompleteTextView.class)).perform(click(),typeText(query),clearFocus());  Espresso.closeSoftKeyboard();}  }
class C{  public boolean hasLabels(){  return hasRepeatingExtension(Label.class);}  }
class C{  @Override public String id(){  return id;}  }
class C{  private void generateSourceCode(final String name){  final Fingerprint fingerprint=getFingerprintByName(name);  final ClassTemplate clazz=getClassTemplateByName(name);  final List<Fingerprint.Filter> filters=fingerprint.getFilter();  final List<Fingerprint.Payload> payloads=fingerprint.getPayload();  final String javaName=Template.asJavaIdentifier(name);  final Integer index=javaName.hashCode();  final VariableDeclaration indexVariable=new VariableDeclaration(Integer.class,"INDEX",index.toString()).setIsStatic(true);  clazz.addVariable(indexVariable).setImplementingClass(FunctionalFingerprint.class).setClassPackage(getPackage()).setClassDirectives("public").setClassImports(getImports()).setClassName(javaName);  clazz.addInitialVariable(new Variable(int.class,"offset")).addInitialVariable(new Variable(int.class,"length")).addInitialVariable(new Variable(int.class,"location")).addInitialVariable(new Variable(String.class,"string")).addInitialVariable(new Variable(Matcher.class,"matcher")).addInitialVariable(new Variable(this.returnType,"ret"));  Function<String,String> mathodNameTransform=null;  final List<String> codePaths=payloads.stream().map(null).map(null).map(null).distinct().collect(Collectors.toList());  codePaths.stream().map(null).forEach(null);}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    int offs=target.getCaretPosition();    Element elem=Utilities.getParagraphElement(target,offs);    offs=elem.getStartOffset();    if (select) {      target.moveCaretPosition(offs);    } else {      target.setCaretPosition(offs);    }  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tThe Omega parameter.\n" + "\t(default: 1.0)","O",1,"-O <num>"));  result.addElement(new Option("\tThe Sigma parameter.\n" + "\t(default: 1.0)","S",1,"-S <num>"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  @Override public List<ReilInstruction> translate(final ITranslationEnvironment environment,final InstructionType instruction,final List<ITranslationExtension<InstructionType>> extensions) throws InternalTranslationException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(instruction,"Error: Argument instruction can't be null");  final IAddress offset=ReilHelpers.toReilAddress(instruction.getAddress());  final String mnemonic=instruction.getMnemonic();  final ReilOperand firstOperand=convert(instruction.getOperands().get(0));  final ReilOperand secondOperand=convert(instruction.getOperands().get(1));  final ReilOperand thirdOperand=convert(instruction.getOperands().get(2));  return Lists.newArrayList(new ReilInstruction(offset,mnemonic,firstOperand,secondOperand,thirdOperand));}  }
class C{  private int countFrames(int first,int last){  int numElements=0;  if (!VM.BuildForOptCompiler) {    numElements=last - first + 1;  } else {    for (int i=first; i <= last; i++) {      CompiledMethod compiledMethod=getCompiledMethod(i);      if ((compiledMethod == null) || (compiledMethod.getCompilerType() != CompiledMethod.OPT)) {        numElements++;      } else {        Offset instructionOffset=Offset.fromIntSignExtend(instructionOffsets[i]);        OptCompiledMethod optInfo=(OptCompiledMethod)compiledMethod;        OptMachineCodeMap map=optInfo.getMCMap();        int iei=map.getInlineEncodingForMCOffset(instructionOffset);        if (iei < 0) {          numElements++;        } else {          int[] inlineEncoding=map.inlineEncoding;          for (; iei >= 0; iei=OptEncodedCallSiteTree.getParent(iei,inlineEncoding)) {            numElements++;          }        }      }    }  }  return numElements;}  }
class C{  private void assertRoleCount(UserAssignmentDetails details,int expectedRoleCount){  assertEquals(expectedRoleCount,details.getRoleKeys().size());}  }
class C{  public static int putVarInt(int val,byte[] buf,int off){  assert val >= 0;  while (val > 0x7f) {    buf[off++]=(byte)((val & 0x7f) | 0x80);    val>>=7;  }  buf[off++]=(byte)val;  return off;}  }
class C{  public static String convertPackageToResourcePath(final Class clazz){  final String packageName=clazz.getPackage().getName();  return String.format("/%s/",packageName.replaceAll("\\.","\\/"));}  }
class C{  public Polygon2D(double[] xs,double[] ys){  points=new ArrayList<Point2D>();  for (int i=0; i < xs.length; i++)   points.add(new Point2D(xs[i],ys[i]));}  }
class C{  public String foldsTipText(){  return "Set the number of folds for cross validation.";}  }
class C{  public String toString(){  String returnString;  returnString=opName + "(";  if (hasArgument) {    returnString=returnString + argument;  }  returnString=returnString + ")";  return returnString;}  }
class C{  public static boolean convertKFPuzzle(InputStream is,DataOutputStream os,String title,String author,String copyright,Date date){  Puzzle puz=new Puzzle();  Scanner scanner=new Scanner(new InputStreamReader(is,new MacRoman()));  if (!scanner.hasNextLine()) {    System.err.println("File empty.");    return false;  }  String line=scanner.nextLine();  if (!line.startsWith("{") || !scanner.hasNextLine()) {    System.err.println("First line format incorrect.");    return false;  }  line=scanner.nextLine();  while (!line.startsWith("{")) {    if (!scanner.hasNextLine()) {      System.err.println("Unexpected EOF - Grid information.");      return false;    }    line=scanner.nextLine();  }  List<char[]> solGrid=new ArrayList<char[]>();  line=line.substring(1,line.length() - 2);  String[] rowString=line.split(" ");  int width=rowString.length;  do {    if (line.endsWith(" |")) {      line=line.substring(0,line.length() - 2);    }    rowString=line.split(" ");    if (rowString.length != width) {      System.err.println("Not a square grid.");      return false;    }    char[] row=new char[width];    for (int x=0; x < width; x++) {      row[x]=rowString[x].charAt(0);    }    solGrid.add(row);    if (!scanner.hasNextLine()) {      System.err.println("Unexpected EOF - Solution grid.");      return false;    }    line=scanner.nextLine();  } while (!line.startsWith("{"));  int height=solGrid.size();  puz.setWidth(width);  puz.setHeight(height);  Box[][] boxes=new Box[height][width];  for (int x=0; x < height; x++) {    char[] row=solGrid.get(x);    for (int y=0; y < width; y++) {      if (row[y] != '#') {        boxes[x][y]=new Box();        boxes[x][y].setSolution(row[y]);        boxes[x][y].setResponse(' ');      }    }  }  puz.setBoxes(boxes);  Map<Integer,String> acrossNumToClueMap=new HashMap<Integer,String>();  line=line.substring(1);  int clueNum;  do {    if (line.endsWith(" |")) {      line=line.substring(0,line.length() - 2);    }    clueNum=0;    int i=0;    while (line.charAt(i) != '.') {      if (clueNum != 0) {        clueNum*=10;      }      clueNum+=line.charAt(i) - '0';      i++;    }    String clue=line.substring(i + 2).trim();    acrossNumToClueMap.put(clueNum,clue);    if (!scanner.hasNextLine()) {      System.err.println("Unexpected EOF - Across clues.");      return false;    }    line=scanner.nextLine();  } while (!line.startsWith("{"));  int maxClueNum=clueNum;  Map<Integer,String> downNumToClueMap=new HashMap<Integer,String>();  line=line.substring(1);  boolean finished=false;  do {    if (line.endsWith(" |")) {      line=line.substring(0,line.length() - 2);    } else {      finished=true;    }    clueNum=0;    int i=0;    while (line.charAt(i) != '.') {      if (clueNum != 0) {        clueNum*=10;      }      clueNum+=line.charAt(i) - '0';      i++;    }    String clue=line.substring(i + 2).trim();    downNumToClueMap.put(clueNum,clue);    if (!finished) {      if (!scanner.hasNextLine()) {        System.err.println("Unexpected EOF - Down clues.");        return false;      }      line=scanner.nextLine();    }  } while (!finished);  maxClueNum=clueNum > maxClueNum ? clueNum : maxClueNum;  int numberOfClues=acrossNumToClueMap.size() + downNumToClueMap.size();  puz.setNumberOfClues(numberOfClues);  String[] rawClues=new String[numberOfClues];  int i=0;  for (clueNum=1; clueNum <= maxClueNum; clueNum++) {    if (acrossNumToClueMap.containsKey(clueNum)) {      rawClues[i]=acrossNumToClueMap.get(clueNum);      i++;    }    if (downNumToClueMap.containsKey(clueNum)) {      rawClues[i]=downNumToClueMap.get(clueNum);      i++;    }  }  puz.setRawClues(rawClues);  puz.setTitle(title);  puz.setAuthor(author);  puz.setDate(date);  puz.setCopyright(copyright);  puz.setVersion(IO.VERSION_STRING);  puz.setNotes("");  try {    IO.saveNative(puz,os);  } catch (  IOException e) {    System.err.println("Unable to dump puzzle to output stream.");    return false;  }  return true;}  }
class C{  private void createVao(){  this.vao=glGenVertexArrays();  int vbo=glGenBuffers();  glBindVertexArray(vao);  glBindBuffer(GL_ARRAY_BUFFER,vbo);  ByteBuffer bb=BufferUtils.createByteBuffer(4 * 2 * 6);  FloatBuffer fv=bb.asFloatBuffer();  fv.put(-1.0f).put(-1.0f);  fv.put(1.0f).put(-1.0f);  fv.put(1.0f).put(1.0f);  fv.put(1.0f).put(1.0f);  fv.put(-1.0f).put(1.0f);  fv.put(-1.0f).put(-1.0f);  glBufferData(GL_ARRAY_BUFFER,bb,GL_STATIC_DRAW);  glEnableVertexAttribArray(0);  glVertexAttribPointer(0,2,GL_FLOAT,false,0,0L);  glBindBuffer(GL_ARRAY_BUFFER,0);  glBindVertexArray(0);}  }
class C{  public static boolean isDirectory(byte flags){  return hasFlag(flags,FLAG_DIR);}  }
class C{  private void defineRootPanes(UIDefaults d){  String c=PAINTER_PREFIX + "FrameAndRootPainter";  String p="RootPane";  d.put(p + ".States","Enabled,WindowFocused,NoFrame");  d.put(p + ".contentMargins",new InsetsUIResource(0,0,0,0));  d.put(p + ".opaque",Boolean.FALSE);  d.put(p + ".NoFrame",new RootPaneNoFrameState());  d.put(p + ".WindowFocused",new RootPaneWindowFocusedState());  d.put(p + "[Enabled+NoFrame].backgroundPainter",new LazyPainter(c,FrameAndRootPainter.Which.BACKGROUND_ENABLED_NOFRAME));  d.put(p + "[Enabled].backgroundPainter",new LazyPainter(c,FrameAndRootPainter.Which.BACKGROUND_ENABLED));  d.put(p + "[Enabled+WindowFocused].backgroundPainter",new LazyPainter(c,FrameAndRootPainter.Which.BACKGROUND_ENABLED_WINDOWFOCUSED));}  }
class C{  public byte[] canonicalizeSubtree(Node node) throws CanonicalizationException {  return canonicalizerSpi.engineCanonicalizeSubTree(node);}  }
class C{  private void updateElements(){  comboboxElements.clear();  comboboxElements.add(new CDebuggerTemplateWrapper(null));  for (  final DebuggerTemplate template : debuggerContainer.getDebuggers()) {    comboboxElements.add(new CDebuggerTemplateWrapper(template));  }}  }
class C{  @Beta public static String toString(byte x){  return toString(x,10);}  }
class C{  private CloneThread(final CGraphWindow parent,final INaviView view,final IViewContainer container){  m_parent=Preconditions.checkNotNull(parent,"IE02387: parent argument can not be null");  m_view=Preconditions.checkNotNull(view,"IE02388: view argument can not be null");  m_container=Preconditions.checkNotNull(container,"IE02389: container argument can not be null");}  }
class C{  public static void main(String[] args){  LoggingConfiguration.setStatistics();  double[][] data=new double[1000][2];  for (int i=0; i < data.length; i++) {    for (int j=0; j < data[i].length; j++) {      data[i][j]=Math.random();    }  }  DatabaseConnection dbc=new ArrayAdapterDatabaseConnection(data);  Database db=new StaticArrayDatabase(dbc,null);  db.initialize();  Relation<NumberVector> rel=db.getRelation(TypeUtil.NUMBER_VECTOR_FIELD);  DBIDRange ids=(DBIDRange)rel.getDBIDs();  SquaredEuclideanDistanceFunction dist=SquaredEuclideanDistanceFunction.STATIC;  RandomlyGeneratedInitialMeans init=new RandomlyGeneratedInitialMeans(RandomFactory.DEFAULT);  KMeansLloyd<NumberVector> km=new KMeansLloyd<>(dist,3,0,init);  Clustering<KMeansModel> c=km.run(db);  int i=0;  for (  Cluster<KMeansModel> clu : c.getAllClusters()) {    System.out.println("#" + i + ": "+ clu.getNameAutomatic());    System.out.println("Size: " + clu.size());    System.out.println("Center: " + clu.getModel().getPrototype().toString());    System.out.print("Objects: ");    for (DBIDIter it=clu.getIDs().iter(); it.valid(); it.advance()) {      final int offset=ids.getOffset(it);      System.out.print(" " + offset);    }    System.out.println();    ++i;  }}  }
class C{  SIPTransactionErrorEvent(SIPTransaction sourceTransaction,int transactionErrorID){  super(sourceTransaction);  errorID=transactionErrorID;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  protected boolean isBefore(int x,int y,Rectangle innerAlloc){  if (majorAxis == View.X_AXIS) {    return (x < innerAlloc.x);  } else {    return (y < innerAlloc.y);  }}  }
class C{  @Override public String toString(){  return mediaType;}  }
class C{  @AfterClass public static void tearDownAfterClass() throws Exception {}  }
class C{  public ProviderMismatchException(){}  }
class C{  public Matrix transpose(){  Matrix X=new Matrix(n,m);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[j][i]=A[i][j];    }  }  return X;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private DownloadJob createDownloadJob(String name,URL siteUrl,UpdateSiteToken token){  if (siteUrl == null) {    CorePluginLog.logError("Could not " + name + "becuase the update site was not found in the "+ "downloaded compositeArtifacts.xml");    return null;  }  try {    final File temp=FeatureUpdateManager.createTmpFile();    temp.deleteOnExit();    DownloadJob newDownloadJob=new DownloadJob(name,siteUrl,temp);    newDownloadJob.addJobChangeListener(getSiteDownloadJobChangeListener(temp,token));    return newDownloadJob;  } catch (  IOException e) {    CorePluginLog.logError(e);    return null;  }}  }
class C{  public boolean isStripOriginalVlan(){  return stripOriginalVlan;}  }
class C{  @Nullable public static URI toUri(@NonNls @NotNull String uri){  int index=uri.indexOf("://");  if (index < 0) {    try {      return new URI(uri);    } catch (    URISyntaxException e) {      LOG.debug(e);      return null;    }  }  if (SystemInfo.isWindows && uri.startsWith(LocalFileSystem.PROTOCOL_PREFIX)) {    int firstSlashIndex=index + "://".length();    if (uri.charAt(firstSlashIndex) != '/') {      uri=LocalFileSystem.PROTOCOL_PREFIX + '/' + uri.substring(firstSlashIndex);    }  }  try {    return new URI(uri);  } catch (  URISyntaxException e) {    LOG.debug("uri is not fully encoded",e);    try {      int fragmentIndex=uri.lastIndexOf('#');      String path=uri.substring(index + 1,fragmentIndex > 0 ? fragmentIndex : uri.length());      String fragment=fragmentIndex > 0 ? uri.substring(fragmentIndex + 1) : null;      return new URI(uri.substring(0,index),path,fragment);    } catch (    URISyntaxException e1) {      LOG.debug(e1);      return null;    }  }}  }
class C{  public static boolean intersects(double lat1,double lon1,double lat2,double lon2,double lat3,double lon3,double lat4,double lon4){  double[] llp=getSegIntersection(lat1,lon1,lat2,lon2,lat3,lon3,lat4,lon4);  return (llp[0] != Double.MAX_VALUE && llp[1] != Double.MAX_VALUE) || (llp[2] != Double.MAX_VALUE && llp[3] != Double.MAX_VALUE);}  }
class C{  public Author(String name,URI uri,String email){  super(KEY,name,uri,email);}  }
class C{  private void tred2(){  for (int j=0; j < n; j++)   d[j]=V.get(n - 1,j);  for (int i=n - 1; i > 0; i--) {    double scale=0.0;    double h=0.0;    for (int k=0; k < i; k++) {      scale=scale + abs(d[k]);    }    if (scale == 0.0) {      e[i]=d[i - 1];      for (int j=0; j < i; j++) {        d[j]=V.get(i - 1,j);        V.set(i,j,0.0);        V.set(j,i,0.0);      }    } else {      for (int k=0; k < i; k++) {        d[k]/=scale;        h+=d[k] * d[k];      }      double f=d[i - 1];      double g=sqrt(h);      if (f > 0)       g=-g;      e[i]=scale * g;      h-=f * g;      d[i - 1]=f - g;      Arrays.fill(e,0,i,0.0);      for (int j=0; j < i; j++) {        f=d[j];        V.set(j,i,f);        g=e[j] + V.get(j,j) * f;        for (int k=j + 1; k <= i - 1; k++) {          g+=V.get(k,j) * d[k];          e[k]+=V.get(k,j) * f;        }        e[j]=g;      }      f=0.0;      for (int j=0; j < i; j++) {        e[j]/=h;        f+=e[j] * d[j];      }      double hh=f / (h + h);      for (int j=0; j < i; j++) {        e[j]-=hh * d[j];      }      for (int j=0; j < i; j++) {        f=d[j];        g=e[j];        for (int k=j; k <= i - 1; k++) {          V.increment(k,j,-(f * e[k] + g * d[k]));        }        d[j]=V.get(i - 1,j);        V.set(i,j,0.0);      }    }    d[i]=h;  }  for (int i=0; i < n - 1; i++) {    V.set(n - 1,i,V.get(i,i));    V.set(i,i,1.0);    double h=d[i + 1];    if (h != 0.0) {      for (int k=0; k <= i; k++) {        d[k]=V.get(k,i + 1) / h;      }      for (int j=0; j <= i; j++) {        double g=0.0;        for (int k=0; k <= i; k++) {          g+=V.get(k,i + 1) * V.get(k,j);        }        RowColumnOps.addMultCol(V,j,0,i + 1,-g,d);      }    }    RowColumnOps.fillCol(V,i + 1,0,i + 1,0.0);  }  for (int j=0; j < n; j++) {    d[j]=V.get(n - 1,j);    V.set(n - 1,j,0.0);  }  V.set(n - 1,n - 1,1.0);  e[0]=0.0;}  }
class C{  public DisplayComponent(String name){  super(name);  world=new DisplayWorld();  init();}  }
class C{  public EmptyStyle(){  super();}  }
class C{  public void addElevations(ByteBuffer byteBuffer,Sector sector,int width,int height,AVList parameters){  if (byteBuffer == null) {    String message=Logging.getMessage("nullValue.BufferIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (sector == null) {    String message=Logging.getMessage("nullValue.SectorIsNull");    Logging.logger().severe(message);    throw new IllegalStateException(message);  }  if (parameters == null) {    String message=Logging.getMessage("nullValue.ParamsIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  AVList bufferParams=new AVListImpl();  bufferParams.setValues(parameters.copy());  Double tileMissingDataFlag=AVListImpl.getDoubleValue(bufferParams,AVKey.MISSING_DATA_SIGNAL);  if (tileMissingDataFlag == null)   tileMissingDataFlag=this.getMissingDataSignal();  Double minElevation=null;  Double maxElevation=null;  Object o=bufferParams.getValue(AVKey.ELEVATION_MIN);  if (o instanceof Double)   minElevation=(Double)o;  o=bufferParams.getValue(AVKey.ELEVATION_MAX);  if (o instanceof Double)   maxElevation=(Double)o;  String dataType=bufferParams.getStringValue(AVKey.DATA_TYPE);  if (WWUtil.isEmpty(dataType)) {    String msg=Logging.getMessage("DataRaster.MissingMetadata",AVKey.DATA_TYPE);    Logging.logger().severe(msg);    throw new IllegalStateException(msg);  }  BufferWrapper buffer=BufferWrapper.wrap(byteBuffer,bufferParams);  LocalTile tile=new LocalTile(sector,tileMissingDataFlag,width,height,buffer,minElevation,maxElevation);  this.tiles.add(tile);  this.adjustMinMax(tile);}  }
class C{  public static void fillMatrix_3D(int n1,int n2,int n3,float[][][] m){  Random r=new Random(2);  for (int i=0; i < n1; i++) {    for (int j=0; j < n2; j++) {      for (int k=0; k < n3; k++) {        m[i][j][k]=r.nextFloat();      }    }  }}  }
class C{  protected void installNextButtonListeners(Component c){  installButtonListeners(c,nextButtonHandler);}  }
class C{  public static Object[] readAll(InputStream stream) throws Exception {  ObjectInputStream ois;  Vector<Object> result;  if (!(stream instanceof BufferedInputStream)) {    stream=new BufferedInputStream(stream);  }  ois=new ObjectInputStream(stream);  result=new Vector<Object>();  try {    while (true) {      result.add(ois.readObject());    }  } catch (  IOException e) {  }  ois.close();  return result.toArray(new Object[result.size()]);}  }
class C{  protected void doValidateTextContents(String path,String filename,String contents){  File inFile=new File(path,filename);  BufferedReader fileReader=null;  BufferedReader textReader=null;  Log.i(LOG_TAG,"Validating file " + filename + " at "+ path);  try {    fileReader=new BufferedReader(new FileReader(inFile));    textReader=new BufferedReader(new StringReader(contents));    String actual=null;    String expected=null;    while ((actual=fileReader.readLine()) != null) {      expected=textReader.readLine();      if (!actual.equals(expected)) {        fail("File " + filename + " in OBB "+ path+ " does not match expected value");      }    }    fileReader.close();    textReader.close();    Log.i(LOG_TAG,"File " + filename + " successfully verified.");  } catch (  IOException e) {    fail("IOError with file " + inFile + ":"+ e.toString());  }}  }
class C{  public List<alloperators> _queryOperators_AlloperatorsList(Long outer_id){synchronized (this) {    if (operators_AlloperatorsListQuery == null) {      QueryBuilder<alloperators> queryBuilder=queryBuilder();      queryBuilder.where(Properties.Outer_id.eq(null));      operators_AlloperatorsListQuery=queryBuilder.build();    }  }  Query<alloperators> query=operators_AlloperatorsListQuery.forCurrentThread();  query.setParameter(0,outer_id);  return query.list();}  }
class C{  private void popOffset(GPR reg){  asm.emitLAddr(reg,spTopOffset + BYTES_IN_STACKSLOT - BYTES_IN_OFFSET,FP);  discardSlot();}  }
class C{  public static String[][] invert(final String[][] array){  final String[][] newarray=new String[array.length][2];  for (int i=0; i < array.length; i++) {    newarray[i][0]=array[i][1];    newarray[i][1]=array[i][0];  }  return newarray;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public DataViewerDialog(Dialog parent){  this(parent,true);}  }
class C{  protected ExportableElementImpl(){  super();}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  UserContext user=sessionContext.getUser();  if (user != null && user instanceof UserContext.Chameleon)   user=((UserContext.Chameleon)user).getOriginalUserContext(); else   sessionContext.checkPermission(Right.Chameleon);  MessageResources rsc=getResources(request);  ChameleonForm frm=(ChameleonForm)form;  frm.setCanLookup(sessionContext.hasPermission(Right.HasRole));  ActionMessages errors=new ActionMessages();  String op=(request.getParameter("op") == null) ? (frm.getOp() == null || frm.getOp().length() == 0) ? (request.getAttribute("op") == null) ? null : request.getAttribute("op").toString() : frm.getOp() : request.getParameter("op");  if (op == null || op.trim().length() == 0)   op=rsc.getMessage("op.view");  frm.setOp(op);  String uid=request.getParameter("uid");  if (uid != null && !uid.isEmpty() && ApplicationProperty.ChameleonAllowLookup.isTrue()) {    frm.setPuid(uid);    frm.setName(request.getParameter("uname"));    op=rsc.getMessage("button.changeUser");  }  if (op.equals(rsc.getMessage("op.view"))) {    LookupTables.setupTimetableManagers(request);    if (user != null)     frm.setPuid(user.getExternalUserId());  }  if (op.equals(rsc.getMessage("button.changeUser"))) {    try {      doSwitch(request,frm,user);      return mapping.findForward("reload");    } catch (    Exception e) {      Debug.error(e);      errors.add("exception",new ActionMessage("errors.generic",e.getMessage()));      saveErrors(request,errors);      LookupTables.setupTimetableManagers(request);      return mapping.findForward("displayForm");    }  }  return mapping.findForward("displayForm");}  }
class C{  public static void verifyConfigDataRemote(Map<DistributedMember,DistributionConfig> configMap) throws Exception {  GemFireCacheImpl cache=GemFireCacheImpl.getInstance();  Set<DistributedMember> otherMemberSet=cache.getDistributionManager().getOtherNormalDistributionManagerIds();  for (  DistributedMember member : otherMemberSet) {    MemberMXBean bean=MBeanUtil.getMemberMbeanProxy(member);    GemFireProperties data=bean.listGemFireProperties();    DistributionConfig config=configMap.get(member);    assertConfigEquals(config,data);  }}  }
class C{  public BusStation(){  super();}  }
class C{  public RefactoringExecutionHelper(Refactoring refactoring,int stopSeverity,int saveMode){  super();  Assert.isNotNull(refactoring);  fRefactoring=refactoring;  fStopSeverity=stopSeverity;  fSaveMode=saveMode;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.PROMISIFY_EXPRESSION__EXPRESSION:    return basicSetExpression(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public ScaleAndIndexes indexes(Collection<Integer> indexes){  return new ScaleAndIndexes(scale,Ints.toArray(indexes));}  }
class C{  private void handleMouseReleased(MouseEvent e){  if (this.liveHandler != null && this.liveHandler.isEnabled()) {    this.liveHandler.handleMouseReleased(this,e);  }  for (  MouseHandlerFX handler : this.auxiliaryMouseHandlers) {    if (handler.isEnabled()) {      handler.handleMouseReleased(this,e);    }  }}  }
class C{  public void tabCreated(long time,int id,int prevId,boolean selected){  if (findTabById(id) != null)   return;  computeAndUpdateTabOrders(false);  StripLayoutTab tab=findTabById(id);  if (tab != null)   startAnimation(buildTabCreatedAnimation(tab),true);  StripLayoutTab fastExpandTab=findTabById(prevId);  boolean allowLeftExpand=false;  if (!selected) {    fastExpandTab=tab;    allowLeftExpand=true;  }  if (fastExpandTab != null) {    float delta=calculateOffsetToMakeTabVisible(fastExpandTab,false,allowLeftExpand,true);    if (delta != 0.f) {      mScroller.startScroll(mScrollOffset,0,(int)delta,0,time,EXPAND_DURATION_MS);    }  }  mUpdateHost.requestUpdate();}  }
class C{  public JFrmMigrate(AppProperties props){  initComponents();  try {    this.setIconImage(ImageIO.read(JRootFrame.class.getResourceAsStream("/uk/chromis/fixedimages/smllogo.png")));  } catch (  IOException e) {  }  setTitle(AppLocal.APP_NAME + " - " + AppLocal.APP_VERSION+ " - "+ AppLocal.getIntString("Menu.Migration"));  addWindowListener(new MyFrameListener());  config=new JPaneldbMigrate(props);  getContentPane().add(config,BorderLayout.CENTER);  try {    config.activate();  } catch (  BasicException e) {  }}  }
class C{  public int distanceToClosestEdge(Coords position,IGame game){  final String METHOD_NAME="distanceToClosestEdge(Coords, IGame)";  getOwner().methodBegin(BasicPathRanker.class,METHOD_NAME);  try {    int width=game.getBoard().getWidth();    int height=game.getBoard().getHeight();    int minimum=position.getX();    if ((width - position.getX()) < minimum) {      minimum=position.getX();    }    if (position.getY() < minimum) {      minimum=position.getY();    }    if ((height - position.getY()) < minimum) {      minimum=height - position.getY();    }    return minimum;  }  finally {    getOwner().methodEnd(BasicPathRanker.class,METHOD_NAME);  }}  }
class C{  public NativeAppElement findElementByName(String name){  return findElement(By.name(name));}  }
class C{  protected InvalidPropertyException(final String message,final String propertyName){  super(String.format(message,propertyName));  this.propertyName=propertyName;}  }
class C{  @Ignore @Test public void test_DR_PGS_2Nodes_Put_Receiver() throws Exception {  try {    Integer lnPort=(Integer)vm0.invoke(null);    Integer nyPort=(Integer)vm1.invoke(null);    createCacheInVMs(nyPort,vm2);    vm2.invoke(null);    vm2.invoke(null);    createCacheInVMs(lnPort,vm4,vm5);    vm4.invoke(null);    vm5.invoke(null);    vm4.invoke(null);    vm5.invoke(null);    startSenderInVMs("ln1",vm4,vm5);    vm4.invoke(null);    vm4.invoke(null);    vm5.invoke(null);    vm4.invoke(null);    vm5.invoke(null);    vm2.invoke(null);  } catch (  Exception e) {    Assert.fail("Unexpected exception",e);  }}  }
class C{  public JsProxy createRequestModel(String className){  return createModel(className,request);}  }
class C{  protected void removeEndpoint(DistributedMember stub,String reason){  removeEndpoint(stub,reason,true);}  }
class C{  @Override public synchronized void disconnectionNotification(String eventName,Object source){  m_listenees.remove(eventName);}  }
class C{  public TransactionID sendRequest(Request request,TransportAddress sendTo,TransportAddress sendThrough,ResponseCollector collector,TransactionID transactionID) throws IllegalArgumentException, IOException {  return sendRequest(request,sendTo,sendThrough,collector,transactionID,-1,-1,-1);}  }
class C{  public void back() throws JSONException {  if (usePrevious || index <= 0) {    throw new JSONException("Stepping back two steps is not supported");  }  this.index-=1;  this.character-=1;  this.usePrevious=true;  this.eof=false;}  }
class C{  public final int pop(int n){  int x;  for (x=0; x < n; x++) {    if (onStack == 0)     break;    ADFContext obj=stack[--onStack];    if (inReserve == reserve.length) {      ADFContext[] newreserve=new ADFContext[reserve.length * 2];      System.arraycopy(reserve,0,newreserve,0,reserve.length);      reserve=newreserve;    }    reserve[inReserve++]=obj;  }  return x;}  }
class C{  public boolean isLocal(){  return isLocal;}  }
class C{  public void testGetF5Momentary(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF5Momentary();  assertEquals(expResult,result);}  }
class C{  public void dispatch(NamingListener listener){switch (type) {case OBJECT_ADDED:    ((NamespaceChangeListener)listener).objectAdded(this);  break;case OBJECT_REMOVED:((NamespaceChangeListener)listener).objectRemoved(this);break;case OBJECT_RENAMED:((NamespaceChangeListener)listener).objectRenamed(this);break;case OBJECT_CHANGED:((ObjectChangeListener)listener).objectChanged(this);break;}}  }
class C{  BufferedReader sourceReader(Location loc){  File sourceFile=sourceFile(loc);  if (sourceFile == null) {    return null;  }  try {    return new BufferedReader(new FileReader(sourceFile));  } catch (  IOException exc) {  }  return null;}  }
class C{  public String mapMethodName(String owner,String name,String desc){  return name;}  }
class C{  public static <T1,T2,T3,T4>Flux<Tuple4<T1,T2,T3,T4>> zip(Publisher<? extends T1> source1,Publisher<? extends T2> source2,Publisher<? extends T3> source3,Publisher<? extends T4> source4){  return zip(Tuples.fn4(),source1,source2,source3,source4);}  }
class C{  @Override public byte[] serialize(Object o){  return ((String)o).getBytes();}  }
class C{  public PreferenceBuilder<PreferenceClass> prefType(Class<PreferenceClass> prefType){  if (!VALID_TYPES.contains(prefType)) {    throw new IllegalArgumentException("The specified type: " + prefType + " is not supported in preferences");  }  this.prefType=prefType;  return this;}  }
class C{  public final void test_write$BII_3() throws NoSuchAlgorithmException, IOException {  assertTrue(MY_MESSAGE_LEN % (CHUNK_SIZE + 1) != 0);  for (int k=0; k < algorithmName.length; k++) {    try {      ByteArrayOutputStream bos=new ByteArrayOutputStream(MY_MESSAGE_LEN);      MessageDigest md=MessageDigest.getInstance(algorithmName[k]);      DigestOutputStream dos=new DigestOutputStream(bos,md);      for (int i=0; i < MY_MESSAGE_LEN / (CHUNK_SIZE + 1); i++) {        dos.write(myMessage,i * (CHUNK_SIZE + 1),CHUNK_SIZE + 1);      }      dos.write(myMessage,MY_MESSAGE_LEN / (CHUNK_SIZE + 1) * (CHUNK_SIZE + 1),MY_MESSAGE_LEN % (CHUNK_SIZE + 1));      assertTrue("write",Arrays.equals(myMessage,bos.toByteArray()));      assertTrue("update",Arrays.equals(dos.getMessageDigest().digest(),MDGoldenData.getDigest(algorithmName[k])));      return;    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  public void incrementLocalSequenceNumber(){  ++this.localSequenceNumber;}  }
class C{  IgniteInternalFuture<?> formatAsync(){  GridFutureAdapter<?> fut=new GridFutureAdapter<>();  Thread t=new Thread(new FormatRunnable(fut),"igfs-format-" + cfg.getName() + "-"+ FORMAT_THREAD_IDX_GEN.incrementAndGet());  t.setDaemon(true);  t.start();  return fut;}  }
class C{  @Override public void redriveTask(Long taskId){  CloseableHttpResponse httpResponse=null;  httpResponse=postOverHttp(null,"/redrivetask/" + taskId);  HttpClientUtils.closeQuietly(httpResponse);}  }
class C{  @RequestMapping(value={"/list/{cg}","/list/{cg}/"},method=RequestMethod.GET) @ResponseBody public RestWrapper list(@PathVariable("cg") String configGroup,Principal principal){  RestWrapper restWrapper=null;  GetGeneralConfig generalConfigs=new GetGeneralConfig();  List<GeneralConfig> generalConfigList=generalConfigs.listGeneralConfig(configGroup);  restWrapper=new RestWrapper(generalConfigList,RestWrapper.OK);  LOGGER.info("All records listed with config group :" + configGroup + "from General  Config by User:"+ principal.getName());  return restWrapper;}  }
class C{  void publish(Long position) throws InterruptedException {  acquireWriteLock();  try {    this.idsAvailable.add(position);    notifyPeekAndTakeThreads();  }  finally {    releaseWriteLock();  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:01.747 -0500",hash_original_method="FC00B6DA3A307D6DD36FC874315AD6A8",hash_generated_method="CE1923C2940445764C7BAACEF7EC5DE9") public BufferOverflowException(){}  }
class C{  private boolean extractElement(int offset,int length,Object[] array,int col,int row,String nullFld) throws FitsException {  this.bp.setOffset(offset);  if (nullFld != null) {    String s=this.bp.getString(length);    if (s.trim().equals(nullFld)) {      return false;    }    this.bp.skip(-length);  }  try {    if (array[col] instanceof String[]) {      ((String[])array[col])[row]=this.bp.getString(length);    } else     if (array[col] instanceof int[]) {      ((int[])array[col])[row]=this.bp.getInt(length);    } else     if (array[col] instanceof float[]) {      ((float[])array[col])[row]=this.bp.getFloat(length);    } else     if (array[col] instanceof double[]) {      ((double[])array[col])[row]=this.bp.getDouble(length);    } else     if (array[col] instanceof long[]) {      ((long[])array[col])[row]=this.bp.getLong(length);    } else {      throw new FitsException("Invalid type for ASCII table conversion:" + array[col]);    }  } catch (  FormatException e) {    throw new FitsException("Error parsing data at row,col:" + row + ","+ col+ "  "+ e);  }  return true;}  }
class C{  public void delete(String path) throws ServerException, ForbiddenException, NotFoundException, ConflictException {  final String apath=ProjectRegistry.absolutizePath(path);  final VirtualFile item=vfs.getRoot().getChild(Path.of(apath));  if (item != null) {    item.delete();  }  projectRegistry.removeProjects(apath);  workspaceProjectsHolder.sync(projectRegistry);}  }
class C{  public static int clearBacklog(Level level){  if (list.isEmpty()) {    return 0;  }  int retval=0;  for (  LoggingEvent event : list) {    if (event != null && event.getLevel() != null && event.getLevel().toInt() >= level.toInt())     retval++;  }  list.clear();  return retval;}  }
class C{  public static boolean instanceOf(Class<?> objectClass,Class<?> typeClass){  if (typeClass.isInterface() && !objectClass.isInterface()) {    return interfaceOf(objectClass,typeClass);  } else {    return isOrSubOf(objectClass,typeClass);  }}  }
class C{  private CloneAction(){  putValue(SHORT_DESCRIPTION,"Create a new graph with only register tracking results");}  }
class C{  public List<FileStatus> browse(String filePath) throws Exception {  LOG.info("HDFS File Path   :  " + filePath + "   and EndPoint  : "+ hdfsEndPoint);  FileSystem hdfsFileSystem=null;  FileStatus[] listStatus;  try {    Configuration config=createConfig();    hdfsFileSystem=getFileSystem(config);    Path path=new Path(filePath);    listStatus=hdfsFileSystem.listStatus(path);  } catch (  Exception ex) {    LOG.error(" Exception when browsing files for the path " + filePath,ex.getMessage());    throw new Exception(" Exception When browsing Files in HDFS .. Message :  " + ex.getMessage());  } finally {    if (hdfsFileSystem != null)     hdfsFileSystem.close();  }  return Arrays.asList(listStatus);}  }
class C{  private void runPlay(Team offense,Team defense){  if (gameDown > 4) {    if (!playingOT) {      gameEventLog+=getEventPrefix() + "TURNOVER ON DOWNS!\n" + offense.abbr+ " failed to convert on "+ (gameDown - 1)+ "th down. "+ defense.abbr+ " takes over possession on downs.";      gamePoss=!gamePoss;      gameDown=1;      gameYardsNeed=10;      gameYardLine=100 - gameYardLine;    } else {      gameEventLog+=getEventPrefix() + "TURNOVER ON DOWNS!\n" + offense.abbr+ " failed to convert on "+ (gameDown - 1)+ "th down in OT and their possession is over.";      resetForOT();    }  } else {    double preferPass=(offense.getPassProf() * 2 - defense.getPassDef()) * Math.random() - 10;    double preferRush=(offense.getRushProf() * 2 - defense.getRushDef()) * Math.random() + offense.teamStratOff.getRYB();    if (gameDown == 1 && gameYardLine >= 91)     gameYardsNeed=100 - gameYardLine;    if (gameTime <= 30 && !playingOT && ((gamePoss && (awayScore >= homeScore)) || (!gamePoss && (homeScore >= awayScore)))) {      if (((gamePoss && (awayScore - homeScore) <= 3) || (!gamePoss && (homeScore - awayScore) <= 3)) && gameYardLine > 60) {        fieldGoalAtt(offense,defense);      } else {        passingPlay(offense,defense);      }    } else     if (gameDown >= 4) {      if (((gamePoss && (awayScore - homeScore) > 3) || (!gamePoss && (homeScore - awayScore) > 3)) && gameTime < 300) {        if (gameYardsNeed < 3) {          rushingPlay(offense,defense);        } else {          passingPlay(offense,defense);        }      } else {        if (gameYardsNeed < 3) {          if (gameYardLine > 65) {            fieldGoalAtt(offense,defense);          } else           if (gameYardLine > 55) {            rushingPlay(offense,defense);          } else {            puntPlay(offense);          }        } else         if (gameYardLine > 60) {          fieldGoalAtt(offense,defense);        } else {          puntPlay(offense);        }      }    } else     if ((gameDown == 3 && gameYardsNeed > 4) || ((gameDown == 1 || gameDown == 2) && (preferPass >= preferRush))) {      passingPlay(offense,defense);    } else {      rushingPlay(offense,defense);    }  }}  }
class C{  public boolean hitClip(int x,int y,int width,int height){  return g.hitClip(x,y,width,height);}  }
class C{  private void switchCamera(){  if (mShowErrorAndFinish) {    return;  }  if (mPaused) {    return;  }  cancelCountDown();  mAppController.freezeScreenUntilPreviewReady();  initSurfaceTextureConsumer();}  }
class C{  public LuaPrint buildOpCode(Prototype f,int pc){  buildOpCode(ps,f,pc);  return this;}  }
class C{  public SolrQueryResponse queryAndResponse(String handler,SolrQueryRequest req) throws Exception {  try (SolrCore core=getCoreInc()){    SolrQueryResponse rsp=new SolrQueryResponse();    core.execute(core.getRequestHandler(handler),req,rsp);    if (rsp.getException() != null) {      throw rsp.getException();    }    return rsp;  } }  }
class C{  public boolean visit(ArrayAccess node){  return true;}  }
class C{  public String localName(String name){  int colon=name.indexOf(':');  if (colon == -1) {    return name;  } else {    return name.substring(colon + 1).intern();  }}  }
class C{  public void onContractDetails(final Contract contract) throws BrokerModelException {  m_contractRequests.put(contract.getId(),contract);}  }
class C{  private static void unregisterMbeansFromPropsFile(MBeanServer mBeanServer) throws Exception {  JamonPropertiesLoader loader=new JamonPropertiesLoader();  List<String> jamonJmxBeanProperties=loader.getMxBeans();  Iterator<String> iter=jamonJmxBeanProperties.iterator();  while (iter.hasNext()) {    String beanInfo=iter.next();    MonitorMXBean mXbean=MonitorMXBeanFactory.create(beanInfo);    mBeanServer.unregisterMBean(MonitorMXBeanFactory.getObjectName(mXbean));    MonitorMXBean mXbeanDelta=MonitorMXBeanFactory.createDelta(beanInfo);    mBeanServer.unregisterMBean(MonitorMXBeanFactory.getDeltaObjectName(mXbeanDelta));  }}  }
class C{  protected void registerSplitPaneAttributes(){  addAttributeProcessor(new MaxSplitLmlAttribute(),"max","maxSplit","maxSplitAmount");  addAttributeProcessor(new MinSplitLmlAttribute(),"min","minSplit","minSplitAmount");  addAttributeProcessor(new SplitAmountLmlAttribute(),"split","splitAmount","value");}  }
class C{  public CActionIntersectTraces(final JFrame parent,final ITraceListProvider traceProvider,final List<TraceList> traces){  super("Intersection");  m_parent=parent;  m_traceProvider=traceProvider;  m_traces=new ArrayList<TraceList>(traces);}  }
class C{  public GPUImage3x3ConvolutionFilter(){  this(new float[]{0.0f,0.0f,0.0f,0.0f,1.0f,0.0f,0.0f,0.0f,0.0f});}  }
class C{  public void removeSrcClass(SootClass clz){  srcClasses.remove(clz.getName());}  }
class C{  private static boolean isNodeList(Object context){  if (context instanceof List) {    List ls=(List)context;    int ln=ls.size();    for (int i=0; i < ln; i++) {      if (!(ls.get(i) instanceof Node)) {        return false;      }    }    return true;  } else {    return false;  }}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  private String describeMinute(int m){switch (m) {case 5:    return "five past ";case 10:  return "ten past ";case 15:return "quarter past ";case 20:return "twenty past ";case 25:return "twenty five past ";case 30:return "half past ";case 35:return "twenty five to ";case 40:return "twenty to ";case 45:return "quarter to ";case 50:return "ten to ";case 55:return "five to ";default :return "";}}  }
class C{  private void wait(int ms){  try {    Thread.sleep(ms);  } catch (  InterruptedException e) {  }}  }
class C{  private void buildPieces(){  pieces=new Piece[pathArray.size()];  Paint paint=new Paint();  Matrix matrix=new Matrix();  Canvas canvas=new Canvas();  for (int i=0; i < pieces.length; i++) {    int shadow=Utils.nextInt(Utils.dp2px(2),Utils.dp2px(9));    Path path=pathArray.get(i);    RectF r=new RectF();    path.computeBounds(r,true);    Bitmap pBitmap=Utils.createBitmapSafely((int)r.width() + shadow * 2,(int)r.height() + shadow * 2,Bitmap.Config.ARGB_4444,1);    if (pBitmap == null) {      pieces[i]=new Piece(-1,-1,null,shadow);      continue;    }    pieces[i]=new Piece((int)r.left + mTouchPoint.x - shadow,(int)r.top + mTouchPoint.y - shadow,pBitmap,shadow);    canvas.setBitmap(pieces[i].bitmap);    BitmapShader mBitmapShader=new BitmapShader(mBitmap,Shader.TileMode.CLAMP,Shader.TileMode.CLAMP);    matrix.reset();    matrix.setTranslate(-r.left - offsetX + shadow,-r.top - offsetY + shadow);    mBitmapShader.setLocalMatrix(matrix);    paint.reset();    Path offsetPath=new Path();    offsetPath.addPath(path,-r.left + shadow,-r.top + shadow);    paint.setStyle(Paint.Style.FILL);    paint.setShadowLayer(shadow,0,0,0xff333333);    canvas.drawPath(offsetPath,paint);    paint.setShadowLayer(0,0,0,0);    paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.XOR));    canvas.drawPath(offsetPath,paint);    paint.setXfermode(null);    paint.setShader(mBitmapShader);    paint.setAlpha(0xcc);    canvas.drawPath(offsetPath,paint);  }  Arrays.sort(pieces);}  }
class C{  public static boolean validSystemNameConfig(String systemName,char type){  if (!validSystemNameFormat(systemName,type)) {    log.warn(systemName + " invalid; bad format");    return false;  }  SerialNode node=getNodeFromSystemName(systemName);  if (node == null) {    log.warn(systemName + " invalid; no such node");    return false;  }  int bit=getBitFromSystemName(systemName);  if ((type == 'T') || (type == 'L')) {    if ((bit <= 0) || (bit > SerialNode.outputBytes[node.nodeType] * 8)) {      log.warn(systemName + " invalid; bad bit number");      return false;    }  } else   if (type == 'S') {    if ((bit <= 0) || (bit > SerialNode.inputBytes[node.nodeType] * 8)) {      log.warn(systemName + " invalid; bad bit number");      return false;    }  } else {    log.error("Invalid type specification in validSystemNameConfig call");    return false;  }  return true;}  }
class C{  public String modifyVirtualVolume(String systemId,String luObjectId,Long newLUCapacityInBytes,String model) throws Exception {  Long luCapacityInKB=newLUCapacityInBytes / 1024;  InputStream responseStream=null;  String asyncTaskMessageId=null;  try {    Map<String,Object> attributeMap=new HashMap<String,Object>();    StorageArray storageArray=new StorageArray(systemId);    Modify modifyOp=new Modify(HDSConstants.VIRTUALVOLUME,false);    LogicalUnit logicalUnit=new LogicalUnit(luObjectId,String.valueOf(luCapacityInKB));    attributeMap.put(HDSConstants.STORAGEARRAY,storageArray);    attributeMap.put(HDSConstants.MODEL,model);    attributeMap.put(HDSConstants.MODIFY,modifyOp);    attributeMap.put(HDSConstants.LOGICALUNIT,logicalUnit);    String modifyVolumeInputXML=InputXMLGenerationClient.getInputXMLString(HDSConstants.MODIFY_THIN_VOLUME_OP,attributeMap,HDSConstants.HITACHI_INPUT_XML_CONTEXT_FILE,HDSConstants.HITACHI_SMOOKS_CONFIG_FILE);    log.info("Query to modify Thin Volume: {}",modifyVolumeInputXML);    URI endpointURI=hdsApiClient.getBaseURI();    ClientResponse response=hdsApiClient.post(endpointURI,modifyVolumeInputXML);    if (HttpStatus.SC_OK == response.getStatus()) {      responseStream=response.getEntityInputStream();      JavaResult result=SmooksUtil.getParsedXMLJavaResult(responseStream,HDSConstants.SMOOKS_CONFIG_FILE);      EchoCommand command=result.getBean(EchoCommand.class);      if (HDSConstants.PROCESSING_STR.equalsIgnoreCase(command.getStatus())) {        asyncTaskMessageId=command.getMessageID();      } else       if (HDSConstants.FAILED_STR.equalsIgnoreCase(command.getStatus())) {        Error error=result.getBean(Error.class);        log.error("Thin Volume modification failed status messageID: {}",command.getMessageID());        log.error("Thin Volume modification failed with error code: {} with message: {}",error.getCode(),error.getDescription());        throw HDSException.exceptions.notAbleToCreateVolume(error.getCode(),error.getDescription());      }    } else {      log.error("Thin Volume modification failed with invalid response code {}",response.getStatus());      throw HDSException.exceptions.invalidResponseFromHDS(String.format("Thin Volume modification failed due to invalid response %1$s from server for system %2$s",response.getStatus(),systemId));    }  }  finally {    if (null != responseStream) {      try {        responseStream.close();      } catch (      IOException e) {        log.warn("Exception occurred while closing Thin volume modification response stream");      }    }  }  return asyncTaskMessageId;}  }
class C{  public static boolean equals(long[] a,long[] a2){  if (a == a2)   return true;  if (a == null || a2 == null)   return false;  int length=a.length;  if (a2.length != length)   return false;  for (int i=0; i < length; i++)   if (a[i] != a2[i])   return false;  return true;}  }
class C{  public boolean isLeaveUndeliverable(){  return fieldLeaveUndeliverable;}  }
class C{  protected void doParse() throws ParseException, IOException {  transformListHandler.startTransformList();  loop:   for (; ; ) {    try {      current=reader.read();switch (current) {case 0xD:case 0xA:case 0x20:case 0x9:case ',':        break;case 'm':      parseMatrix();    break;case 'r':  parseRotate();break;case 't':parseTranslate();break;case 's':current=reader.read();switch (current) {case 'c':parseScale();break;case 'k':parseSkew();break;default :reportUnexpectedCharacterError(current);skipTransform();}break;case -1:break loop;default :reportUnexpectedCharacterError(current);skipTransform();}} catch (ParseException e) {errorHandler.error(e);skipTransform();}}skipSpaces();if (current != -1) {reportError("end.of.stream.expected",new Object[]{new Integer(current)});}transformListHandler.endTransformList();}  }
class C{  @Deprecated public static int changeSize(Context context,String value){  if (value.contains("dip")) {    float dip=Float.valueOf(value.substring(0,value.indexOf("dip")));    return LockPatternUtil.dip2px(context,dip);  } else   if (value.contains("px")) {    float px=Float.valueOf(value.substring(0,value.indexOf("px")));    return (int)px;  } else   if (value.contains("@")) {    float px=context.getResources().getDimension(Integer.valueOf(value.replace("@","")));    return (int)px;  } else {    throw new IllegalArgumentException("can not use wrap_content " + "or match_parent or fill_parent or others' illegal parameter");  }}  }
class C{  public final int sendTo(SocketChannel chan) throws IOException {  finishWriting();  if (size() == 0) {    return 0;  }  int result;  if (this.chunks != null) {    ByteBuffer[] bufs=new ByteBuffer[this.chunks.size() + 1];    bufs=this.chunks.toArray(bufs);    bufs[this.chunks.size()]=this.buffer;    result=(int)chan.write(bufs);  } else {    result=chan.write(this.buffer);  }  this.size-=result;  return result;}  }
class C{  public void tickDimensions(){  overworldProperties.tick();  for (  int i : DimensionManager.getInstance().getLoadedDimensions()) {    DimensionManager.getInstance().getDimensionProperties(i).tick();  }}  }
class C{  public StringRequest(int method,String url,Listener<String> listener,ErrorListener errorListener){  super(method,url,errorListener);  mListener=listener;}  }
class C{  public X509Certificate generate(PrivateKey key,String provider) throws CertificateEncodingException, IllegalStateException, NoSuchProviderException, NoSuchAlgorithmException, SignatureException, InvalidKeyException {  return generate(key,provider,null);}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_myState:    return stateVector[0] == State.main_region_myState;case main_region__final_:  return stateVector[0] == State.main_region__final_;default :return false;}}  }
class C{  private void labelIndicatorSetColorsToDefaultState(JLabel label){  if (label == null || settings == null) {    return;  }  if (label == labelMonth || label == labelYear) {    label.setBackground(settings.getColor(DateArea.BackgroundMonthAndYearMenuButtons));    monthAndYearInnerPanel.setBackground(settings.getColor(DateArea.BackgroundMonthAndYearMenuButtons));  }  if (label == labelSetDateToToday) {    label.setBackground(settings.getColor(DateArea.BackgroundTodayButton));  }  if (label == labelClearDate) {    label.setBackground(settings.getColor(DateArea.BackgroundClearButton));  }  label.setBorder(new CompoundBorder(new EmptyBorder(1,1,1,1),labelIndicatorEmptyBorder));}  }
class C{  public static String decode(byte[] in,char[] out,int offset,int utfSize) throws UTFDataFormatException {  int count=0, s=0, a;  while (count < utfSize) {    if ((out[s]=(char)in[offset + count++]) < '\u0080') {      s++;    } else     if (((a=out[s]) & 0xe0) == 0xc0) {      if (count >= utfSize) {        throw new UTFDataFormatException("bad second byte at " + count);      }      int b=in[offset + count++];      if ((b & 0xC0) != 0x80) {        throw new UTFDataFormatException("bad second byte at " + (count - 1));      }      out[s++]=(char)(((a & 0x1F) << 6) | (b & 0x3F));    } else     if ((a & 0xf0) == 0xe0) {      if (count + 1 >= utfSize) {        throw new UTFDataFormatException("bad third byte at " + (count + 1));      }      int b=in[offset + count++];      int c=in[offset + count++];      if (((b & 0xC0) != 0x80) || ((c & 0xC0) != 0x80)) {        throw new UTFDataFormatException("bad second or third byte at " + (count - 2));      }      out[s++]=(char)(((a & 0x0F) << 12) | ((b & 0x3F) << 6) | (c & 0x3F));    } else {      throw new UTFDataFormatException("bad byte at " + (count - 1));    }  }  return new String(out,0,s);}  }
class C{  synchronized public void abort(){  _abort=true;  if (_waitSensor != null) {    _waitSensor.removePropertyChangeListener(this);  }  if (_throttle != null) {    _throttle.setSpeedSetting(-1.0f);    setSpeed(0.0f);    for (int i=0; i < 10; i++) {      setFunction(i,false);    }    try {      InstanceManager.throttleManagerInstance().releaseThrottle(_throttle,_warrant);    } catch (    Exception e) {      log.warn("Throttle release and cancel threw: " + e);    }  }  if (log.isDebugEnabled())   log.debug("Abort called. Engineer shut down. warrant {}",_warrant.getDisplayName());}  }
class C{  public MalformedChallengeException(){  super();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void main(String... args) throws SQLException {  new AnnotationsTest().test();}  }
class C{  public CDatabaseDebuggerContainer(final IDatabase database){  m_database=Preconditions.checkNotNull(database,"IE01976: Database argument can not be null");}  }
class C{  public CreateSnapshotRequestBuilder(ElasticsearchClient client,CreateSnapshotAction action,String repository,String snapshot){  super(client,action,new CreateSnapshotRequest(repository,snapshot));}  }
class C{  public void processEntitySpawn(EntityLivingBase entity){  if (!entity.worldObj.isRemote) {    if (!getIsRareEntity(entity)) {      if (isClassAllowed(entity) && (instance.checkEntityClassForced(entity) || entity.worldObj.rand.nextInt(eliteRarity) == 0)) {        try {          Integer tEntityDim=entity.dimension;          if (!dimensionBlackList.contains(tEntityDim)) {            MobModifier mod=instance.createMobModifiers(entity);            if (mod != null) {              proxy.getRareMobs().put(entity,mod);              mod.onSpawningComplete(entity);            }          }        } catch (        Exception e) {          FMLLog.log("InfernalMobs",Level.ERROR,"processEntitySpawn() threw an exception");          e.printStackTrace();        }      }    }  }}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  this.tagTV=(TagTextView)this.findViewById(R.id.tag_text_view_tv);}  }
class C{  public TableHeaderRendererSortedState(){  super("Sorted");}  }
class C{  public SmsTextMessage(String msg,SmsDcs dcs){  setText(msg,dcs);}  }
class C{  public void start(){  registerReceiver();  activity();}  }
class C{  private static String wordShapeDan2Bio(String s,Collection<String> knownLCWords){  if (containsGreekLetter(s)) {    return wordShapeDan2(s,knownLCWords) + "-GREEK";  } else {    return wordShapeDan2(s,knownLCWords);  }}  }
class C{  public static BailoutException createBailoutException(String message,Throwable cause,StackTraceElement[] elements){  return SourceStackTrace.create(cause,message,elements);}  }
class C{  protected int numberOfFullUnits(){  return QuickBitVector.unit(nbits);}  }
class C{  public void quiesce(long timeout){  final String methodName="quiesce";  if (timeout > 0) {    log.fine(CLASS_NAME,methodName,"637",new Object[]{new Long(timeout)});synchronized (queueLock) {      this.quiescing=true;    }    callback.quiesce();    notifyQueueLock();synchronized (quiesceLock) {      try {        int tokc=tokenStore.count();        if (tokc > 0 || pendingFlows.size() > 0 || !callback.isQuiesced()) {          log.fine(CLASS_NAME,methodName,"639",new Object[]{new Integer(actualInFlight),new Integer(pendingFlows.size()),new Integer(inFlightPubRels),new Integer(tokc)});          quiesceLock.wait(timeout);        }      } catch (      InterruptedException ex) {      }    }synchronized (queueLock) {      pendingMessages.clear();      pendingFlows.clear();      quiescing=false;      actualInFlight=0;    }    log.fine(CLASS_NAME,methodName,"640");  }}  }
class C{  public static long deinterleave(long b){  b&=MAGIC[0];  b=(b ^ (b >>> SHIFT[0])) & MAGIC[1];  b=(b ^ (b >>> SHIFT[1])) & MAGIC[2];  b=(b ^ (b >>> SHIFT[2])) & MAGIC[3];  b=(b ^ (b >>> SHIFT[3])) & MAGIC[4];  b=(b ^ (b >>> SHIFT[4])) & MAGIC[5];  return b;}  }
class C{  public void deleteFilesFromContainer(String applicationName,String containerId,String path) throws ServiceException {  try {    final String command="rm -rf " + path;    dockerService.execCommand(containerId,command);  } catch (  FatalDockerJSONException e) {    throw new ServiceException("Cannot delete files " + path + " for "+ containerId,e);  }}  }
class C{  public BackpropTrainer(Trainable network,List<List<Neuron>> layers){  super(network);  this.layers=layers;  errorMap=new HashMap<Neuron,Double>();  weightDeltaMap=new HashMap<Synapse,Double>();  biasDeltaMap=new HashMap<Neuron,Double>();  this.setIteration(0);  mse=0;}  }
class C{  final int submit(T item){  int stat;  if ((stat=offer(item)) == 0) {    putItem=item;    timeout=0L;    putStat=0;    ForkJoinPool.helpAsyncBlocker(executor,this);    if ((stat=putStat) == 0) {      try {        ForkJoinPool.managedBlock(this);      } catch (      InterruptedException ie) {        timeout=INTERRUPTED;      }      stat=putStat;    }    if (timeout < 0L)     Thread.currentThread().interrupt();  }  return stat;}  }
class C{  public static <T>Set<T> toSet(T obj1,T obj2){  Set<T> theSet=new LinkedHashSet<T>();  theSet.add(obj1);  theSet.add(obj2);  return theSet;}  }
class C{  protected LayerDrawable drawable_button_extended(){  return drawble_pad_button();}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  lock.lock();  try {    q=new PriorityQueue<E>(Math.max(size,1),comparator);    q.addAll(this);    s.defaultWriteObject();  }  finally {    q=null;    lock.unlock();  }}  }
class C{  private List<Runnable> drainQueue(){  BlockingQueue<Runnable> q=workQueue;  ArrayList<Runnable> taskList=new ArrayList<Runnable>();  q.drainTo(taskList);  if (!q.isEmpty()) {    for (    Runnable r : q.toArray(new Runnable[0])) {      if (q.remove(r))       taskList.add(r);    }  }  return taskList;}  }
class C{  protected void forwardMessage(AbstractMRListener client,AbstractMRMessage m){  ((CanListener)client).message((CanMessage)m);}  }
class C{  public T caseScope(Scope object){  return null;}  }
class C{  private PostgreSQLRawModuleFunctions(){}  }
class C{  private void readGlyphNames(int base){  if (base == 0) {    glyphnames=new int[229];    for (int i=0; i < glyphnames.length; i++) {      glyphnames[i]=i;    }    return;  } else   if (base == 1) {    glyphnames=FontSupport.type1CExpertCharset;    return;  } else   if (base == 2) {    glyphnames=FontSupport.type1CExpertSubCharset;    return;  }  glyphnames=new int[nglyphs];  glyphnames[0]=0;  pos=base;  int t=readByte();  if (t == 0) {    for (int i=1; i < nglyphs; i++) {      glyphnames[i]=readInt(2);    }  } else   if (t == 1) {    int n=1;    while (n < nglyphs) {      int sid=readInt(2);      int range=readByte() + 1;      for (int i=0; i < range; i++) {        glyphnames[n++]=sid++;      }    }  } else   if (t == 2) {    int n=1;    while (n < nglyphs) {      int sid=readInt(2);      int range=readInt(2) + 1;      for (int i=0; i < range; i++) {        glyphnames[n++]=sid++;      }    }  }}  }
class C{  public static <T>T loadSpringBean(String springXmlPath,String beanName) throws IgniteCheckedException {  A.notNull(springXmlPath,"springXmlPath");  A.notNull(beanName,"beanName");  URL url=U.resolveSpringUrl(springXmlPath);  assert url != null;  return loadSpringBean(url,beanName);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:44.744 -0500",hash_original_method="3E96BAE0A73C07217EE9E69C0532B078",hash_generated_method="2365E22F3A38CEC7407569DAB2E8C5E7") public void show(){  if (localLOGV)   Log.v(TAG,"SHOW: " + this);  mHandler.post(mShow);}  }
class C{  public static ContextFreeGrammar load(Reader reader) throws IOException {  StreamTokenizer tokenizer=new StreamTokenizer(reader);  tokenizer.resetSyntax();  tokenizer.wordChars('a','z');  tokenizer.wordChars('A','Z');  tokenizer.wordChars('0','9');  tokenizer.wordChars('<','<');  tokenizer.wordChars('>','>');  tokenizer.wordChars('_','_');  tokenizer.wordChars('-','-');  tokenizer.wordChars('.','.');  tokenizer.wordChars(128 + 32,255);  tokenizer.whitespaceChars(0,' ');  tokenizer.quoteChar('"');  tokenizer.quoteChar('\'');  tokenizer.eolIsSignificant(true);  tokenizer.slashSlashComments(true);  tokenizer.slashStarComments(true);  ContextFreeGrammar grammar=new ContextFreeGrammar();  Rule rule=null;  Production production=null;  while (tokenizer.nextToken() != StreamTokenizer.TT_EOF) {    if ((tokenizer.ttype == ':') || (tokenizer.ttype == '=')) {      do {        tokenizer.nextToken();      } while ((tokenizer.ttype == ':') || (tokenizer.ttype == '='));      if ((rule == null) || (production != null)) {        throw new GrammarException("unexpected rule separator",tokenizer.lineno());      }      tokenizer.pushBack();    } else     if (tokenizer.ttype == '|') {      if ((rule != null) && (production == null)) {        throw new GrammarException("rule must contain at least one production",tokenizer.lineno());      }      production=null;    } else     if (tokenizer.ttype == StreamTokenizer.TT_EOL) {      if ((rule != null) && (production == null)) {        throw new GrammarException("rule must contain at least one production",tokenizer.lineno());      }      rule=null;      production=null;    } else {      String string=null;      if ((tokenizer.ttype == StreamTokenizer.TT_WORD) || (tokenizer.ttype == '\'') || (tokenizer.ttype == '\"')) {        string=tokenizer.sval;      } else       if (tokenizer.ttype == StreamTokenizer.TT_NUMBER) {        string=Double.toString(tokenizer.nval);      } else {        string=Character.toString((char)tokenizer.ttype);      }      if (string.startsWith("<") && string.endsWith(">")) {        string=string.substring(1,string.length() - 1);        if (string.isEmpty()) {          throw new GrammarException("invalid symbol",tokenizer.lineno());        }        if (rule == null) {          rule=new Rule(new Symbol(string,false));          grammar.add(rule);        } else         if (production == null) {          production=new Production();          production.add(new Symbol(string,false));          rule.add(production);        } else {          production.add(new Symbol(string,false));        }      } else {        if (rule == null) {          throw new GrammarException("rule must start with non-terminal",tokenizer.lineno());        } else         if (production == null) {          production=new Production();          production.add(new Symbol(string,true));          rule.add(production);        } else {          production.add(new Symbol(string,true));        }      }    }  }  if ((rule != null) && (production == null)) {    throw new GrammarException("rule must contain at least one production",tokenizer.lineno());  }  return grammar;}  }
class C{  public static BufferedImage toCompatibleImage(BufferedImage image){  if (image.getColorModel().equals(getGraphicsConfiguration().getColorModel())) {    return image;  }  BufferedImage compatibleImage=getGraphicsConfiguration().createCompatibleImage(image.getWidth(),image.getHeight(),image.getTransparency());  Graphics g=compatibleImage.getGraphics();  g.drawImage(image,0,0,null);  g.dispose();  return compatibleImage;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:23.775 -0400",hash_original_method="DE754C83318E762068C769E079ADB7A1",hash_generated_method="2CA859495FCE04BE30AB7E12B34FD3ED") private void onDeviceDisconnectRequested(String deviceObjectPath){  String address=mBluetoothService.getAddressFromObjectPath(deviceObjectPath);  if (address == null) {    Log.e(TAG,"onDeviceDisconnectRequested: Address of the remote device in null");    return;  }  Intent intent=new Intent(BluetoothDevice.ACTION_ACL_DISCONNECT_REQUESTED);  intent.putExtra(BluetoothDevice.EXTRA_DEVICE,mAdapter.getRemoteDevice(address));  mContext.sendBroadcast(intent,BLUETOOTH_PERM);}  }
class C{  ConcurrentSkipListSet(ConcurrentNavigableMap<E,Object> m){  this.m=m;}  }
class C{  public void computeAuxiliaryData(EvolutionState state,Individual[] inds){  double[][] distances=calculateDistances(state,inds);  for (int y=0; y < inds.length; y++) {    int myStrength=0;    for (int z=0; z < inds.length; z++)     if (((SPEA2MultiObjectiveFitness)inds[y].fitness).paretoDominates((MultiObjectiveFitness)inds[z].fitness))     myStrength++;    ((SPEA2MultiObjectiveFitness)inds[y].fitness).strength=myStrength;  }  int kTH=(int)Math.sqrt(inds.length);  for (int y=0; y < inds.length; y++) {    double fitness=0;    for (int z=0; z < inds.length; z++) {      if (((SPEA2MultiObjectiveFitness)inds[z].fitness).paretoDominates((MultiObjectiveFitness)inds[y].fitness)) {        fitness+=((SPEA2MultiObjectiveFitness)inds[z].fitness).strength;      }    }    SPEA2MultiObjectiveFitness indYFitness=((SPEA2MultiObjectiveFitness)inds[y].fitness);    double kthDistance=Math.sqrt(orderStatistics(distances[y],kTH,state.random[0]));    indYFitness.kthNNDistance=1.0 / (2 + kthDistance);    indYFitness.fitness=fitness + indYFitness.kthNNDistance;  }}  }
class C{  public static void resetAccessedStatus(){  ACCESSED_FLAGS.clear();  DEFAULT_FLAGS.reset();  sFlags=DEFAULT_FLAGS;}  }
class C{  private static DeclaredType parameterisedType(Types typeUtils,TypeMirror rawType,List<TypeMirror> paramTypes){  Preconditions.checkArgument(rawType.getKind() == TypeKind.DECLARED && ((DeclaredType)rawType).getTypeArguments().isEmpty(),"Expected raw type, got '%s'",rawType);  TypeElement genericType=(TypeElement)typeUtils.asElement(rawType);  Preconditions.checkArgument(genericType.getTypeParameters().size() == paramTypes.size(),"Incorrect number of arguments for %s (expected %s, got %s)",genericType,genericType.getTypeParameters().size(),paramTypes.size());  DeclaredType declaredType=typeUtils.getDeclaredType(genericType,paramTypes.toArray(new TypeMirror[paramTypes.size()]));  return declaredType;}  }
class C{  private static int dimensionality(Relation<ParameterizationFunction> relation){  return relation.get(relation.iterDBIDs()).getDimensionality();}  }
class C{  public ScriptedProblem(String script,String name) throws ScriptException {  this(new StringReader(script),name);}  }
class C{  void handleException(Exception e) throws IOException {  handleException(e,true);}  }
class C{  public static DefineShape createShapeForImage(DefineBits tag,BitmapGraphicNode node){  double width=node.width;  double height=node.height;  boolean repeat=node.repeat;  FillMode fillMode=node.fillMode;  FXGVersion fileVersion=node.getFileVersion();  if (Double.isNaN(width))   width=tag.width;  if (Double.isNaN(height))   height=tag.height;  Matrix matrix=new Matrix();  matrix.scaleX=(int)(SwfConstants.TWIPS_PER_PIXEL * SwfConstants.FIXED_POINT_MULTIPLE);  matrix.scaleY=(int)(SwfConstants.TWIPS_PER_PIXEL * SwfConstants.FIXED_POINT_MULTIPLE);  matrix.hasScale=true;  FillStyle fs=null;  if (fileVersion.equalTo(FXGVersion.v1_0)) {    if (repeat)     fs=new FillStyle(FillStyle.FILL_BITS,matrix,tag); else     fs=new FillStyle(FillStyle.FILL_BITS | FillStyle.FILL_BITS_CLIP,matrix,tag);  } else {    if (fillMode.equals(FillMode.REPEAT)) {      fs=new FillStyle(FillStyle.FILL_BITS,matrix,tag);    } else     if (fillMode.equals(FillMode.CLIP)) {      fs=new FillStyle(FillStyle.FILL_BITS | FillStyle.FILL_BITS_CLIP,matrix,tag);    } else     if (fillMode.equals(FillMode.SCALE)) {      matrix.scaleX=(int)StrictMath.rint((width * SwfConstants.TWIPS_PER_PIXEL * SwfConstants.FIXED_POINT_MULTIPLE) / (double)tag.width);      matrix.scaleY=(int)StrictMath.rint((height * SwfConstants.TWIPS_PER_PIXEL * SwfConstants.FIXED_POINT_MULTIPLE) / (double)tag.height);      fs=new FillStyle(FillStyle.FILL_BITS | FillStyle.FILL_BITS_CLIP,matrix,tag);    }  }  ShapeWithStyle sws=new ShapeWithStyle();  sws.fillstyles=new ArrayList<FillStyle>(1);  sws.fillstyles.add(fs);  List<ShapeRecord> shapeRecords=ShapeHelper.rectangle(width,height);  ShapeHelper.setStyles(shapeRecords,0,1,0);  sws.shapeRecords=shapeRecords;  DefineShape defineShape=new DefineShape(Tag.stagDefineShape4);  defineShape.bounds=TypeHelper.rect(width,height);  defineShape.edgeBounds=defineShape.bounds;  defineShape.shapeWithStyle=sws;  return defineShape;}  }
class C{  public void reply(Object... args){  reply(ArgArrayBuilder.buildArgumentsArray(stateController.clientConfig().objectMapper(),args),null);}  }
class C{  public static boolean isLength(double[] M,int n){  if (M.length != n)   return false;  return true;}  }
class C{  public void rollbackCreateMirrors(URI vplexURI,List<URI> vplexMirrorURIs,String executeStepId,String stepId) throws WorkflowException {  try {    List<VolumeInfo> rollbackData=(List<VolumeInfo>)_workflowService.loadStepData(executeStepId);    if (rollbackData != null) {      WorkflowStepCompleter.stepExecuting(stepId);      StorageSystem vplex=getDataObject(StorageSystem.class,vplexURI,_dbClient);      VPlexApiClient client=getVPlexAPIClient(_vplexApiFactory,vplex,_dbClient);      for (      VolumeInfo rollbackInfo : rollbackData) {        client.deleteLocalDevice(rollbackInfo);      }    }  } catch (  Exception ex) {    _log.error("Exception rolling back: " + ex.getLocalizedMessage());  } finally {    for (    URI uri : vplexMirrorURIs) {      VplexMirror vplexMirror=_dbClient.queryObject(VplexMirror.class,uri);      if (vplexMirror != null) {        Volume sourceVplexVolume=_dbClient.queryObject(Volume.class,vplexMirror.getSource());        sourceVplexVolume.getMirrors().remove(vplexMirror.getId().toString());        _dbClient.updateObject(sourceVplexVolume);        _dbClient.markForDeletion(vplexMirror);      }    }    WorkflowStepCompleter.stepSucceded(stepId);  }}  }
class C{  private void restoreSelection(){  if (m_selectedGame == null) {    return;  }  for (int i=0; i < getModel().getRowCount(); i++) {    final GUID current=(GUID)getModel().getValueAt(i,LobbyGameTableModel.Column.GUID.ordinal());    if (current.equals(m_selectedGame)) {      getSelectionModel().setSelectionInterval(i,i);      break;    }  }}  }
class C{  public boolean isExportXMLBackup(){  Object oo=get_Value(COLUMNNAME_IsExportXMLBackup);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_MORE_GUARDS_1__CODE_LANG_1:    getCodeLang_1().clear();  return;case UmplePackage.ANONYMOUS_MORE_GUARDS_1__CODE_LANGS_1:getCodeLangs_1().clear();return;}super.eUnset(featureID);}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  protected Position determineRangeLabelPosition(Position center,Angle centerAzimuth,Angle leftAzimuth,Angle rightAzimuth,double radiusRadians){  leftAzimuth=(leftAzimuth != null) ? leftAzimuth : centerAzimuth;  rightAzimuth=(rightAzimuth != null) ? rightAzimuth : centerAzimuth;  double deltaLeft=Math.abs(centerAzimuth.subtract(leftAzimuth).degrees);  double deltaRight=Math.abs(centerAzimuth.subtract(rightAzimuth).degrees);  Angle labelAzimuth=(deltaLeft > deltaRight) ? leftAzimuth : rightAzimuth;  labelAzimuth=labelAzimuth.add(centerAzimuth).divide(2.0);  LatLon ll=LatLon.greatCircleEndPosition(center,labelAzimuth.radians,radiusRadians);  return new Position(ll,0);}  }
class C{  public static final double dsigma(double a){  double s=sigma(a);  return s * (1. - s);}  }
class C{  public TemplateTestSuite(){  try {    Velocity.setProperty(Velocity.FILE_RESOURCE_LOADER_PATH,FILE_RESOURCE_LOADER_PATH);    Velocity.setProperty(Velocity.RUNTIME_LOG_ERROR_STACKTRACE,"true");    Velocity.setProperty(Velocity.RUNTIME_LOG_WARN_STACKTRACE,"true");    Velocity.setProperty(Velocity.RUNTIME_LOG_INFO_STACKTRACE,"true");    Velocity.init();    testProperties=new Properties();    testProperties.load(new FileInputStream(TEST_CASE_PROPERTIES));  } catch (  Exception e) {    System.err.println("Cannot setup TemplateTestSuite!");    e.printStackTrace();    System.exit(1);  }  addTemplateTestCases();}  }
class C{  void load(Data buff,FileStore file,UndoLog log){  int min=Constants.FILE_BLOCK_SIZE;  log.seek(filePos);  buff.reset();  file.readFully(buff.getBytes(),0,min);  int len=buff.readInt() * Constants.FILE_BLOCK_SIZE;  buff.checkCapacity(len);  if (len - min > 0) {    file.readFully(buff.getBytes(),min,len - min);  }  int oldOp=operation;  load(buff,log);  if (SysProperties.CHECK) {    if (operation != oldOp) {      DbException.throwInternalError("operation=" + operation + " op="+ oldOp);    }  }}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public static final ColorTheme instance(){  if (inst == null)   inst=new ColorTheme();  return inst;}  }
class C{  public static Date parseDate(final String str,final String... parsePatterns) throws ParseException {  return parseDate(str,null,parsePatterns);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:47.115 -0500",hash_original_method="BBD9B5CD65A55FC3201E30C2D0E96E71",hash_generated_method="614F8DFFF6E32ED9966CA19F2DF68C62") public static String snippetize(String content,String displayName,String query,char snippetStartMatch,char snippetEndMatch,String snippetEllipsis,int snippetMaxTokens){  String lowerQuery=query != null ? query.toLowerCase() : null;  if (TextUtils.isEmpty(content) || TextUtils.isEmpty(query) || TextUtils.isEmpty(displayName)|| !content.toLowerCase().contains(lowerQuery)) {    return null;  }  String lowerDisplayName=displayName != null ? displayName.toLowerCase() : "";  List<String> nameTokens=new ArrayList<String>();  List<Integer> nameTokenOffsets=new ArrayList<Integer>();  split(lowerDisplayName.trim(),nameTokens,nameTokenOffsets);  for (  String nameToken : nameTokens) {    if (nameToken.startsWith(lowerQuery)) {      return null;    }  }  String[] contentLines=content.split("\n");  for (  String contentLine : contentLines) {    if (contentLine.toLowerCase().contains(lowerQuery)) {      List<String> lineTokens=new ArrayList<String>();      List<Integer> tokenOffsets=new ArrayList<Integer>();      split(contentLine.trim(),lineTokens,tokenOffsets);      List<String> markedTokens=new ArrayList<String>();      int firstToken=-1;      int lastToken=-1;      for (int i=0; i < lineTokens.size(); i++) {        String token=lineTokens.get(i);        String lowerToken=token.toLowerCase();        if (lowerToken.startsWith(lowerQuery)) {          markedTokens.add(snippetStartMatch + token + snippetEndMatch);          if (firstToken == -1) {            firstToken=Math.max(0,i - (int)Math.floor(Math.abs(snippetMaxTokens) / 2.0));            lastToken=Math.min(lineTokens.size(),firstToken + Math.abs(snippetMaxTokens));          }        } else {          markedTokens.add(token);        }      }      if (firstToken > -1) {        StringBuilder sb=new StringBuilder();        if (firstToken > 0) {          sb.append(snippetEllipsis);        }        for (int i=firstToken; i < lastToken; i++) {          String markedToken=markedTokens.get(i);          String originalToken=lineTokens.get(i);          sb.append(markedToken);          if (i < lastToken - 1) {            sb.append(contentLine.substring(tokenOffsets.get(i) + originalToken.length(),tokenOffsets.get(i + 1)));          }        }        if (lastToken < lineTokens.size()) {          sb.append(snippetEllipsis);        }        return sb.toString();      }    }  }  return null;}  }
class C{  public static boolean scrub(final Intent intent){  return null != intent && scrub(intent.getExtras());}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Deprecated public String[] removeTitleRow(){  String[] titles=getStringRow(0);  removeRow(0);  setColumnTitles(titles);  return titles;}  }
class C{  private Node<E> findPredecessor(Comparable<? super E> key){  if (key == null)   throw new NullPointerException();  for (; ; ) {    Index<E> q=head;    Index<E> r=q.right;    for (; ; ) {      if (r != null) {        Node<E> n=r.node;        E k=n.key;        if (n.value == null) {          if (!q.unlink(r))           break;          r=q.right;          continue;        }        if (key.compareTo(k) >= 0) {          q=r;          r=r.right;          continue;        }      }      Index<E> d=q.down;      if (d != null) {        q=d;        r=d.right;      } else       return q.node;    }  }}  }
class C{  private int rChild(int i){  return (i << 1) + 2;}  }
class C{  public synchronized Vertex findByName(String name){  if (name == null) {    return null;  }  for (  Vertex vertex : findAll()) {    if (name.equals(vertex.getName())) {      return vertex;    }  }  return null;}  }
class C{  public void addCommand(int commandOffset,int commandLength,String commandText,IDocumentListener commandOwner) throws BadLocationException {  final Command command=new Command(commandOffset,commandLength,commandText,commandOwner);  if (intersects(command))   throw new BadLocationException();  final int index=Collections.binarySearch(fCommands,command);  if (index >= 0)   throw new BadLocationException();  final int insertionIndex=-(index + 1);  if (insertionIndex != fCommands.size() && intersects((Command)fCommands.get(insertionIndex),command))   throw new BadLocationException();  if (insertionIndex != 0 && intersects((Command)fCommands.get(insertionIndex - 1),command))   throw new BadLocationException();  fCommands.add(insertionIndex,command);}  }
class C{  public static RaptorWorkerState plan(Request req,Response res) throws IOException {  ProfileRequest request=JsonUtilities.objectMapper.readValue(req.body(),ProfileRequest.class);  TransportNetwork network=request.scenario.modifications.isEmpty() ? RaptorDebugger.network : scenarioCache.get(request.scenario.id);  InstrumentedRaptorWorker worker=new InstrumentedRaptorWorker(network.transitLayer,null,request);  long initialStopStartTime=System.currentTimeMillis();  StreetRouter streetRouter=new StreetRouter(network.streetLayer);  EnumSet<LegMode> modes=request.accessModes;  if (modes.contains(LegMode.CAR)) {    streetRouter.streetMode=StreetMode.CAR;    streetRouter.distanceLimitMeters=100_000;  } else   if (modes.contains(LegMode.BICYCLE)) {    streetRouter.streetMode=StreetMode.BICYCLE;    streetRouter.distanceLimitMeters=(int)(request.maxBikeTime * request.bikeSpeed * 60);  } else {    streetRouter.streetMode=StreetMode.WALK;    streetRouter.distanceLimitMeters=Math.min((int)(request.maxWalkTime * request.walkSpeed * 60),TransitLayer.DISTANCE_TABLE_SIZE_METERS);  }  streetRouter.profileRequest=request;  streetRouter.setOrigin(request.fromLat,request.fromLon);  streetRouter.dominanceVariable=StreetRouter.State.RoutingVariable.DURATION_SECONDS;  streetRouter.route();  TIntIntMap transitStopAccessTimes=streetRouter.getReachedStops();  worker.runRaptorAsync(transitStopAccessTimes,null,new TaskStatistics());  String workerId=UUID.randomUUID().toString();  String oldWorkerId=req.session().attribute("workerId");  if (oldWorkerId != null)   workersForSession.remove(oldWorkerId);  req.session().attribute("workerId",workerId);  workersForSession.put(workerId,worker);  return worker.workerState;}  }
class C{  public boolean isPollable(){  return pollable;}  }
class C{  @Override protected boolean shouldComposeCreationImage(){  return true;}  }
class C{  void afterWriting(){  if (conn != null) {    conn.afterWriting();  }}  }
class C{  public VersionException(Throwable cause){  super(cause);}  }
class C{  public QueryStringDecoderUtil(String uri,Charset charset){  this(uri,charset,true);}  }
class C{  private static CloseableHttpClient createTMDBHttpClient(){  CloseableHttpClient httpClient=HttpClients.createDefault();  return httpClient;}  }
class C{  public ColumnInfo(String name,int position,String mysqlType){  this.name=name;  this.position=position;  this.columnDataType=ColumnDataType.valueOf(mysqlType.toUpperCase()).initialize();}  }
class C{  public int keyAt(int index){  return mKeys[index];}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected void tearDown() throws Exception {  verbosePrint("tearDown beginning");  fTransformers=null;  super.tearDown();}  }
class C{  public void testSingleThreaded() throws Exception {  AtomicCounter c=new AtomicCounter(0);  c.waitSeqnoGreaterEqual(0);  c.waitSeqnoGreaterEqual(-1);  c.waitSeqnoLessEqual(0);  c.waitSeqnoLessEqual(1);  assertEquals("New counter is 0",0,c.getSeqno());  long v1=c.incrAndGetSeqno();  assertEquals("Incremented counter is 1",1,v1);  assertEquals("Returned value matches increment value",v1,c.getSeqno());  long v2=c.decrAndGetSeqno();  assertEquals("Decremented counter is 0",0,v2);  assertEquals("Returned value matches increment value",v2,c.getSeqno());  c.setSeqno(99);  assertEquals("Returned value matches set value",99,c.getSeqno());}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public DefaultHttpClient(final ClientConnectionManager conman,final HttpParams params){  super(conman,params);}  }
class C{  public static <T>List<T> synchronizedList(List<T> list){  if (list == null) {    throw new NullPointerException("list == null");  }  if (list instanceof RandomAccess) {    return new SynchronizedRandomAccessList<T>(list);  }  return new SynchronizedList<T>(list);}  }
class C{  public static void backup(File file) throws IOException {  FileUtilSupport.getDefault().backup(file);}  }
class C{  public static String XMLEnc(String s){  return XMLOrHTMLEnc(s,true,true,XML_APOS);}  }
class C{  private boolean sendUpdatesTable(int AD_Table_ID,String TableName,int AD_ReplicationTable_ID) throws Exception {  RemoteUpdateVO data=new RemoteUpdateVO();  data.Test=m_test;  data.TableName=TableName;  StringBuffer sql=new StringBuffer("SELECT * FROM ").append(TableName).append(" WHERE AD_Client_ID=").append(m_replication.getRemote_Client_ID());  if (m_replication.getRemote_Org_ID() != 0)   sql.append(" AND AD_Org_ID IN (0,").append(m_replication.getRemote_Org_ID()).append(")");  if (m_replication.getDateLastRun() != null)   sql.append(" AND Updated >= ").append(DB.TO_DATE(m_replication.getDateLastRun(),false));  sql.append(" ORDER BY ");  data.KeyColumns=getKeyColumns(AD_Table_ID);  if (data.KeyColumns == null || data.KeyColumns.length == 0) {    log.log(Level.SEVERE,"sendUpdatesTable - No KeyColumns for " + TableName);    m_replicated=false;    return false;  }  for (int i=0; i < data.KeyColumns.length; i++) {    if (i > 0)     sql.append(",");    sql.append(data.KeyColumns[i]);  }  data.Sql=sql.toString();  data.CentralData=getRowSet(data.Sql,null);  if (data.CentralData == null) {    log.fine("sendUpdatesTable - Null - " + TableName);    m_replicated=false;    return false;  }  int rows=0;  try {    if (data.CentralData.last())     rows=data.CentralData.getRow();    data.CentralData.beforeFirst();  } catch (  SQLException ex) {    log.fine("RowCheck  " + ex);    m_replicated=false;    return false;  }  if (rows == 0) {    log.fine("No Rows - " + TableName);    return true;  } else   log.fine(TableName + " #" + rows);  ProcessInfo pi=new ProcessInfo("SendUpdates",0);  pi.setClassName(REMOTE);  pi.setSerializableObject(data);  pi=m_serverRemote.process(new Properties(),pi);  log.info("sendUpdatesTable - " + pi);  ProcessInfoLog[] logs=pi.getLogs();  String msg="> ";  if (logs != null && logs.length > 0)   msg+=logs[0].getP_Msg();  MReplicationLog rLog=new MReplicationLog(getCtx(),m_replicationRun.getAD_Replication_Run_ID(),AD_ReplicationTable_ID,msg,get_TrxName());  if (pi.isError())   m_replicated=false;  rLog.setIsReplicated(!pi.isError());  rLog.saveEx();  return !pi.isError();}  }
class C{  public String trueCase(String input,int inputId){  Sequence<IString> source=IStrings.tokenize(input);  RichTranslation<IString,String> translation=inferer.translate(source,inputId,null,new UnconstrainedOutputSpace<IString,String>(),null);  return translation.translation.toString();}  }
class C{  public static int translateNameToCWE(String category){switch (category) {case "Command Injection":    return 78;case "Cross-Site Scripting":  return 79;case "LDAP Injection":return 90;case "Insecure Cookie":return 614;case "Path Traversal":return 22;case "Weak Encryption Algorithm":return 327;case "Weak Hash Algorithm":return 328;case "Weak Random Number":return 330;case "SQL Injection":return 89;case "Hibernate Injection":return 564;case "Trust Boundary Violation":return 501;case "XPath Injection":return 643;default :System.out.println("Error: Category: " + category + " not supported.");return -1;}}  }
class C{  public static AC parseColumnConstraints(String s){  return parseAxisConstraint(s,true);}  }
class C{  public int readInt(){  return (data[position++] & 0xFF) << 24 | (data[position++] & 0xFF) << 16 | (data[position++] & 0xFF) << 8 | (data[position++] & 0xFF);}  }
class C{  @Override public final void write(final String filename){  new FacilitiesWriterV1(coordinateTransformation,facilities).write(filename);}  }
class C{  public RelationPair(String source,String target){  this.source=source;  this.target=target;}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == AnnotableElement.class) {switch (baseOperationID) {case N4JSPackage.ANNOTABLE_ELEMENT___GET_ANNOTATIONS:      return N4JSPackage.N4_TYPE_DECLARATION___GET_ANNOTATIONS;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == N4TypeDefinition.class) {switch (baseOperationID) {case N4JSPackage.N4_TYPE_DEFINITION___IS_EXTERNAL:  return N4JSPackage.N4_TYPE_DECLARATION___IS_EXTERNAL;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == ScriptElement.class) {switch (baseOperationID) {default :return -1;}}if (baseClass == AnnotableScriptElement.class) {switch (baseOperationID) {case N4JSPackage.ANNOTABLE_SCRIPT_ELEMENT___GET_ANNOTATIONS:return N4JSPackage.N4_TYPE_DECLARATION___GET_ANNOTATIONS;default :return -1;}}if (baseClass == ModifiableElement.class) {switch (baseOperationID) {default :return -1;}}if (baseClass == ExportableElement.class) {switch (baseOperationID) {case N4JSPackage.EXPORTABLE_ELEMENT___IS_EXPORTED:return N4JSPackage.N4_TYPE_DECLARATION___IS_EXPORTED;case N4JSPackage.EXPORTABLE_ELEMENT___IS_EXPORTED_AS_DEFAULT:return N4JSPackage.N4_TYPE_DECLARATION___IS_EXPORTED_AS_DEFAULT;case N4JSPackage.EXPORTABLE_ELEMENT___GET_EXPORTED_NAME:return N4JSPackage.N4_TYPE_DECLARATION___GET_EXPORTED_NAME;case N4JSPackage.EXPORTABLE_ELEMENT___IS_TOPLEVEL:return N4JSPackage.N4_TYPE_DECLARATION___IS_TOPLEVEL;default :return -1;}}if (baseClass == NamedElement.class) {switch (baseOperationID) {case N4JSPackage.NAMED_ELEMENT___GET_NAME:return N4JSPackage.N4_TYPE_DECLARATION___GET_NAME;default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public void addObject(SimpleBeanObject object){  beans.put(new Long(object.getId()),object);  String customGraphicClassName=object.getCustomGraphicClassName();  OMGraphic graphic=null;  if (customGraphicClassName == null) {    ImageIcon icon=new ImageIcon(object.getGraphicImage());    int width=icon.getIconWidth();    int height=icon.getIconHeight();    graphic=new OMRaster(object.getLatitude(),object.getLongitude(),-width / 2,-height / 2,icon);    ((OMRaster)graphic).setRotationAngle(Math.toRadians(object.getBearingInDeg()));    graphic.setRenderType(OMGraphicConstants.RENDERTYPE_OFFSET);    graphic.putAttribute(OMGraphic.APP_OBJECT,new Long(object.getId()));  } else {    try {      Class graphicClass=Class.forName(customGraphicClassName);      Class parentClass=graphicClass;      while (parentClass != null) {        if (parentClass == CustomGraphic.class) {          break;        } else         parentClass=parentClass.getSuperclass();      }      if (parentClass != null) {        Constructor constructor=graphicClass.getConstructor(new Class[]{SimpleBeanObject.class});        graphic=(CustomGraphic)constructor.newInstance(new Object[]{object});      }    } catch (    Exception e) {      e.printStackTrace();    }  }  if (graphic != null) {    graphic.setNeedToRegenerate(true);    graphics.put(new Long(object.getId()),graphic);    if (projection != null)     graphic.generate(projection);    repaint();  }}  }
class C{  public void delete(int id){  final ProviderIdentifier providerIdentifier=mPlaylist.getProvider();  try {    ProviderConnection connection=PluginsLookup.getDefault().getProvider(providerIdentifier);    if (connection != null) {      IMusicProvider binder=connection.getBinder();      if (binder != null) {        binder.deleteSongFromPlaylist(id,mPlaylist.getRef());      }    }    mSongs.remove(id);    mIds.remove(id);    mVisible.remove(id);    resetIds();  } catch (  RemoteException e) {    Log.e(TAG,"Error: " + e.getMessage());  }}  }
class C{  private XMLBuilder.Node showQuery(final HttpServletRequest req,final HttpServletResponse resp,final Writer w,XMLBuilder.Node current,final IRunningQuery q,final RunningQuery acceptedQuery,final boolean showQueryDetails,final int maxBopLength) throws IOException {  final UUID queryId=q.getQueryId();  final IRunningQuery[] children=((AbstractRunningQuery)q).getChildren();  final long elapsedMillis=q.getElapsed();  current.node("h1","Query");{    current=current.node("FORM").attr("method","POST").attr("action","");    final String detailsURL=req.getRequestURL().append("?").append(SHOW_QUERIES).append("=").append(DETAILS).append("&").append(QUERY_ID).append("=").append(queryId.toString()).toString();    final BOpStats stats=q.getStats().get(q.getQuery().getId());    final String solutionsOut=stats == null ? NA : Long.toString(stats.unitsOut.get());    final String chunksOut=stats == null ? NA : Long.toString(stats.chunksOut.get());    current.node("p").text("solutions=").node("span").attr("class","solutions").text("" + solutionsOut).close().text(", chunks=").node("span").attr("class","chunks").text("" + chunksOut).close().text(", children=").node("span").attr("class","children").text("" + children.length).close().text(", elapsed=").node("span").attr("class","elapsed").text("" + elapsedMillis).close().text("ms, ").node("a").attr("href",detailsURL).attr("class","details-url").text("details").close().close();    current=current.node("p");    current.node("INPUT").attr("type","hidden").attr("name","queryId").attr("value",queryId).close();    current.node("INPUT").attr("type","submit").attr("name",CANCEL_QUERY).attr("value","Cancel").close();    current=current.close();    current=current.close();  }  final String queryString;  if (acceptedQuery != null) {    final ASTContainer astContainer=acceptedQuery.queryTask.astContainer;    queryString=astContainer.getQueryString();    if (queryString != null) {      current.node("h2","SPARQL");      current.node("p").attr("class","query-string").text(queryString).close();    }    if (showQueryDetails) {      final SimpleNode parseTree=((SimpleNode)astContainer.getParseTree());      if (parseTree != null) {        current.node("h2","Parse Tree");        current.node("p").attr("class","parse-tree").text(parseTree.dump("")).close();      }      final QueryRoot originalAST=astContainer.getOriginalAST();      if (originalAST != null) {        current.node("h2","Original AST");        current.node("p").attr("class","original-ast").text(originalAST.toString()).close();      }      final QueryRoot optimizedAST=astContainer.getOptimizedAST();      if (optimizedAST != null) {        current.node("h2","Optimized AST");        current.node("p").attr("class","optimized-ast").text(optimizedAST.toString()).close();      }      final PipelineOp queryPlan=astContainer.getQueryPlan();      if (queryPlan != null) {        current.node("h2","Query Plan");        current.node("p").attr("class","query-plan").text(BOpUtility.toString(queryPlan)).close();      }    }  } else {    queryString="N/A";  }  if (showQueryDetails) {    current.node("h2","Query Evaluation Statistics");    final boolean clusterStats=q.getFederation() != null;    final boolean detailedStats=false;    final boolean mutationStats=false;    QueryLog.getTableXHTML(queryString,q,children,w,!showQueryDetails,maxBopLength,clusterStats,detailedStats,mutationStats);  }  return current;}  }
class C{  public void define(HGHandle handle,HGHandle type,Object instance,int flags){  graph.define(handle,type,instance,flags);  add(handle);}  }
class C{  String paramToString(){  return parameterization.toString();}  }
class C{  public static ColorWithEnum newInstance(int colorWithEnumAsInt){  ColorWithEnum colorWithEnum=new ColorWithEnum();  colorWithEnum.colorWithEnumAsInt=colorWithEnumAsInt;  return colorWithEnum;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.249 -0400",hash_original_method="7361C97DE18BBD90CCD2423C0E727D3D",hash_generated_method="7361C97DE18BBD90CCD2423C0E727D3D") Index(Node<K,V> node,Index<K,V> down,Index<K,V> right){  this.node=node;  this.down=down;  this.right=right;}  }
class C{  public static boolean urlEqualsHostIgnoreCase(String endpointUrl,String url){  try {    return urlEqualsHostIgnoreCase(new URI(endpointUrl),new URI(url));  } catch (  URISyntaxException e) {    return false;  }}  }
class C{  private boolean isPeriod(String period){  return period.contains(RANGE_SEP);}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  super.fixupVariables(vars,globalsSize);  if (null != m_arg1)   m_arg1.fixupVariables(vars,globalsSize);}  }
class C{  public StageActivityTypesImpl(final String type){  this(Collections.singleton(type));}  }
class C{  public TMemberEntry(String name,boolean _static){  this.name=name;  this._static=_static;}  }
class C{  public SummaryPanel(final SynapseGroup sg){  setGroup(sg);  incomingGroupLabel.setText("Source Group: ");  outgoingGroupLabel.setText("Target Group: ");  fillFieldValues();  initializeLayout();}  }
class C{  public int advanceToNextRow(){  int bytesNextRow;  if (deinterlacer == null) {    bytesNextRow=getRown() >= imgInfo.rows - 1 ? 0 : imgInfo.bytesPerRow + 1;  } else {    boolean more=deinterlacer.nextRow();    bytesNextRow=more ? deinterlacer.getBytesToRead() + 1 : 0;  }  if (!isCallbackMode()) {    prepareForNextRow(bytesNextRow);  }  return bytesNextRow;}  }
class C{  public static int findNextWordStartNTE(String s,int startIndex){  int i=startIndex;  for (; i < s.length(); i++) {    char currChar=s.charAt(i);    if (Character.isLetterOrDigit(currChar) || getNteChars(currChar) != null) {      return i;    }  }  return i;}  }
class C{  protected void moveLocation(ControlPointMarker controlPoint,Position terrainPosition,List<LatLon> locations){  Vec4 delta=this.computeControlPointDelta(this.getPreviousPosition(),terrainPosition);  Vec4 markerPoint=getWwd().getModel().getGlobe().computeEllipsoidalPointFromLocation(new Position(controlPoint.getPosition(),0));  Position markerPosition=getWwd().getModel().getGlobe().computePositionFromEllipsoidalPoint(markerPoint.add3(delta));  locations.set(controlPoint.getId(),markerPosition);}  }
class C{  public Object[] patch_apply(LinkedList<Patch> patches,String text){  if (patches.isEmpty()) {    return new Object[]{text,new boolean[0]};  }  patches=patch_deepCopy(patches);  String nullPadding=patch_addPadding(patches);  text=nullPadding + text + nullPadding;  patch_splitMax(patches);  int x=0;  int delta=0;  boolean[] results=new boolean[patches.size()];  for (  Patch aPatch : patches) {    int expected_loc=aPatch.start2 + delta;    String text1=diff_text1(aPatch.diffs);    int start_loc;    int end_loc=-1;    if (text1.length() > this.Match_MaxBits) {      start_loc=match_main(text,text1.substring(0,this.Match_MaxBits),expected_loc);      if (start_loc != -1) {        end_loc=match_main(text,text1.substring(text1.length() - this.Match_MaxBits),expected_loc + text1.length() - this.Match_MaxBits);        if (end_loc == -1 || start_loc >= end_loc) {          start_loc=-1;        }      }    } else {      start_loc=match_main(text,text1,expected_loc);    }    if (start_loc == -1) {      results[x]=false;      delta-=aPatch.length2 - aPatch.length1;    } else {      results[x]=true;      delta=start_loc - expected_loc;      String text2;      if (end_loc == -1) {        text2=text.substring(start_loc,Math.min(start_loc + text1.length(),text.length()));      } else {        text2=text.substring(start_loc,Math.min(end_loc + this.Match_MaxBits,text.length()));      }      if (text1.equals(text2)) {        text=text.substring(0,start_loc) + diff_text2(aPatch.diffs) + text.substring(start_loc + text1.length());      } else {        LinkedList<Diff> diffs=diff_main(text1,text2,false);        if (text1.length() > this.Match_MaxBits && diff_levenshtein(diffs) / (float)text1.length() > this.Patch_DeleteThreshold) {          results[x]=false;        } else {          diff_cleanupSemanticLossless(diffs);          int index1=0;          for (          Diff aDiff : aPatch.diffs) {            if (aDiff.operation != Operation.EQUAL) {              int index2=diff_xIndex(diffs,index1);              if (aDiff.operation == Operation.INSERT) {                text=text.substring(0,start_loc + index2) + aDiff.text + text.substring(start_loc + index2);              } else               if (aDiff.operation == Operation.DELETE) {                text=text.substring(0,start_loc + index2) + text.substring(start_loc + diff_xIndex(diffs,index1 + aDiff.text.length()));              }            }            if (aDiff.operation != Operation.DELETE) {              index1+=aDiff.text.length();            }          }        }      }    }    x++;  }  text=text.substring(nullPadding.length(),text.length() - nullPadding.length());  return new Object[]{text,results};}  }
class C{  public BigInteger calculateSecret(BigInteger serverB) throws CryptoException {  this.B=SRP6Util.validatePublicValue(N,serverB);  this.u=SRP6Util.calculateU(digest,N,A,B);  this.S=calculateS();  return S;}  }
class C{  public WAppsAction(String action,String accelerator) throws IOException {  this(action,accelerator,null);}  }
class C{  public void closeNetwork(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:16.629 -0400",hash_original_method="618D7845515FD0AE91AC232728DBE8EB",hash_generated_method="10A12555120830F4CD4383CA872BA8B8") public void pair(BluetoothAdapter adapter,BluetoothDevice device,int passkey,byte[] pin){  pairOrAcceptPair(adapter,device,passkey,pin,true);}  }
class C{  private SelectResults evaluateOrJunction(ExecutionContext context) throws FunctionDomainException, TypeMismatchException, NameResolutionException, QueryInvocationTargetException {  SelectResults[] grpResults=new SelectResults[1];  List finalList=context.getCurrentIterators();  RuntimeIterator[][] itrsForResultFields=new RuntimeIterator[1][];  CompiledValue gj=null;  Iterator junctionItr=this.abstractGroupOrRangeJunctions.iterator();  List grpItrs=null;  RuntimeIterator tempItr=null;  SelectResults intermediateResults=null;  while (junctionItr.hasNext()) {    List expansionList=new LinkedList(finalList);    gj=(CompiledValue)junctionItr.next();    grpResults[0]=((Filter)gj).filterEvaluate(context,null);    grpItrs=(gj instanceof CompositeGroupJunction) ? QueryUtils.getDependentItrChainForIndpndntItrs(((CompositeGroupJunction)gj).getIndependentIteratorsOfCJ(),context) : context.getCurrScopeDpndntItrsBasedOnSingleIndpndntItr(((AbstractGroupOrRangeJunction)gj).getIndependentIteratorForGroup()[0]);    itrsForResultFields[0]=new RuntimeIterator[grpItrs.size()];    Iterator grpItr=grpItrs.iterator();    int k=0;    while (grpItr.hasNext()) {      tempItr=(RuntimeIterator)grpItr.next();      itrsForResultFields[0][k++]=tempItr;      expansionList.remove(tempItr);    }    SelectResults expandedResult=QueryUtils.cartesian(grpResults,itrsForResultFields,expansionList,finalList,context,null);    intermediateResults=(intermediateResults == null) ? expandedResult : QueryUtils.union(expandedResult,intermediateResults,context);  }  return intermediateResults;}  }
class C{  public ReplDBMSFilteredEvent(Long firstFilteredSeqno,Short firstFilteredFragno,Long lastFilteredSeqno,Short lastFilteredFragno,boolean lastFrag,String eventId,String sourceId,Timestamp timestamp,long epochNumber){  super(firstFilteredSeqno,new DBMSEvent(eventId,null,timestamp));  this.seqnoEnd=lastFilteredSeqno;  this.fragno=firstFilteredFragno;  this.fragnoEnd=lastFilteredFragno;  this.lastFrag=lastFrag;  this.sourceId=sourceId;  this.extractedTstamp=timestamp;  this.epochNumber=epochNumber;}  }
class C{  public boolean isCommandList(){  return commandList;}  }
class C{  private void handleChannelInfoResultError(String stream,RequestType type,int responseCode){  if (type == RequestType.CHANNEL) {    if (responseCode == 404) {      resultListener.receivedChannelInfo(stream,null,RequestResult.NOT_FOUND);    } else {      resultListener.receivedChannelInfo(stream,null,RequestResult.FAILED);    }  } else {    if (responseCode == 404) {      resultListener.putChannelInfoResult(RequestResult.NOT_FOUND);    } else     if (responseCode == 401 || responseCode == 403) {      LOGGER.warning("Error setting channel info: Access denied");      resultListener.putChannelInfoResult(RequestResult.ACCESS_DENIED);      accessDenied();    } else     if (responseCode == 422) {      LOGGER.warning("Error setting channel info: Probably invalid title");      resultListener.putChannelInfoResult(RequestResult.INVALID_STREAM_STATUS);    } else {      LOGGER.warning("Error setting channel info: Unknown error (" + responseCode + ")");      resultListener.putChannelInfoResult(RequestResult.FAILED);    }  }}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) @Override public void endWindow(){  if (!mins.isEmpty()) {    for (    Map.Entry<K,V> e : mins.entrySet()) {      min.emit(new KeyValPair(e.getKey(),e.getValue()));    }    mins.clear();  }}  }
class C{  public String prepareIt(){  if (!isValidAction(ACTION_Prepare))   return m_status;  if (m_document != null) {    m_status=m_document.prepareIt();    m_document.setDocStatus(m_status);  }  return m_status;}  }
class C{  public void testBasics() throws IOException {  Analyzer a=new IndonesianAnalyzer();  checkOneTerm(a,"peledakan","ledak");  checkOneTerm(a,"pembunuhan","bunuh");  assertAnalyzesTo(a,"bahwa",new String[]{});  a.close();}  }
class C{  private void transmit(Packet packet){  byte[] data=packet.data;  if (packet.offset > 0) {    System.arraycopy(data,packet.offset,data=new byte[packet.length],0,packet.length);  }  stats.numBytes+=packet.length;  stats.numPackets++;  try {    datagramConnection.send(remoteAddress,remotePort,data);    RtpSource s=rtcpSession.getMySource();    s.activeSender=true;    rtcpSession.timeOfLastRTPSent=rtcpSession.currentTime();    rtcpSession.packetCount++;    rtcpSession.octetCount+=data.length;  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  protected void layoutComponents(){  container.setMinimumSize(new Dimension(300,300));  JScrollPane detailsPane=new JScrollPane(details);  detailsPane.setMinimumSize(new Dimension(150,150));  JSplitPane splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,container,detailsPane);  splitPane.setResizeWeight(0.5);  splitPane.setDividerLocation(0.4);  JPanel buttonPane=new JPanel(new FlowLayout(FlowLayout.CENTER));  buttonPane.add(close);  getContentPane().setLayout(new BorderLayout());  getContentPane().add(splitPane,BorderLayout.CENTER);  getContentPane().add(buttonPane,BorderLayout.SOUTH);}  }
class C{  public Status kill(final TaskID taskId){  Status status=driver.killTask(taskId);  LOGGER.info("Task {} kill initiated with Driver status  {}",taskId,status);  return status;}  }
class C{  public boolean handleMessage(Message m,Object object){  if (m.getType().equals(M_FINISHED)) {    output.message(m.getSender().name + " finished.");    if (iamroot)     islands.remove(m.getSender());    return true;  } else   if (m.getType().equals(M_IDEAL_FOUND)) {    output.message(m.getSender().name + " found an ideal individual.");    ideal_found=true;    if (iamroot)     announceIdealIndividual(m.getSender());    return true;  } else   return super.handleMessage(m,object);}  }
class C{  public static Color brighter(Color color,double factor){  if (factor < 0.0)   factor=0.7; else   if (factor > 1.0)   factor=0.7;  return new Color(Math.min((int)(color.getRed() / factor),255),Math.min((int)(color.getGreen() / factor),255),Math.min((int)(color.getBlue() / factor),255));}  }
class C{  public static boolean isEspDevice(String BSSID){  return BSSID != null && (BSSID.startsWith("18:fe:34"));}  }
class C{  public boolean minValue(long val,long minVal){  return GenericValidator.minValue(val,minVal);}  }
class C{  public byte[] unCompress(byte[] compInput){  try {    return Snappy.uncompress(compInput);  } catch (  IOException e) {    LOGGER.error(e,e.getMessage());  }  return compInput;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case EipPackage.EIP_MODEL__OWNED_ROUTES:    return ((InternalEList<?>)getOwnedRoutes()).basicRemove(otherEnd,msgs);case EipPackage.EIP_MODEL__OWNED_SERVICE_REFS:  return ((InternalEList<?>)getOwnedServiceRefs()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void startElement(String localName) throws SAXException {  startElement("",localName,"",EMPTY_ATTS);}  }
class C{  private void synonymNext(){  int length=m_synonym.length();  char cc=m_synonym.charAt(0);  if (cc == 'Z') {    cc='A';    length++;  } else   cc++;  m_synonym=String.valueOf(cc);  if (length == 1)   return;  m_synonym+=String.valueOf(cc);  if (length == 2)   return;  m_synonym+=String.valueOf(cc);}  }
class C{  public void testTimeoutNotGreedy(){  doTestTimeout(false,false);}  }
class C{  public dfn addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public void destroy(){  log.fine("destroy");  super.destroy();}  }
class C{  public ITurnOrdered nextJumpshipElement(){  return this.getTurnJSEnum().nextElement();}  }
class C{  public void testSize0IsolatedMode() throws Exception {  processSize0Test(DeploymentMode.ISOLATED);}  }
class C{  public boolean increment(int key){  return adjustValue(key,1);}  }
class C{  boolean casNext(Node<K,V> cmp,Node<K,V> val){  return UNSAFE.compareAndSwapObject(this,nextOffset,cmp,val);}  }
class C{  static boolean isSystemWindows(){  return SYSTEM_SEPARATOR == WINDOWS_SEPARATOR;}  }
class C{  protected void doValidateIntContents(String path,String filename,int start,int end){  File inFile=new File(path,filename);  DataInputStream inStream=null;  Log.i(LOG_TAG,"Validating file " + filename + " at "+ path);  try {    inStream=new DataInputStream(new FileInputStream(inFile));    for (int i=start; i < end; ++i) {      if (inStream.readInt() != i) {        fail("Unexpected value read in OBB file");      }    }    if (inStream != null) {      inStream.close();    }    Log.i(LOG_TAG,"Successfully validated file " + filename);  } catch (  FileNotFoundException e) {    fail("File " + inFile + " not found: "+ e.toString());  }catch (  IOException e) {    fail("IOError with file " + inFile + ":"+ e.toString());  }}  }
class C{  private boolean validateDeleteMirrorCopies(FileShare fs,VirtualPool currentVpool,StringBuffer notSuppReasonBuff){  _log.info(String.format("Checking validateDeleteMirrorCopies for Fs [%s] ",fs.getLabel()));  if (!doBasicMirrorValidation(fs,currentVpool,notSuppReasonBuff)) {    return false;  }  if (fs.getPersonality() != null && fs.getPersonality().equalsIgnoreCase(PersonalityTypes.SOURCE.name()) && (MirrorStatus.FAILED_OVER.name().equalsIgnoreCase(fs.getMirrorStatus()) || MirrorStatus.SUSPENDED.name().equalsIgnoreCase(fs.getMirrorStatus()))) {    notSuppReasonBuff.append(String.format("File system given in request is in active or failover state %s.",fs.getLabel()));    _log.info(notSuppReasonBuff.toString());    return false;  }  if (fs.getMirrorfsTargets() == null || fs.getMirrorfsTargets().isEmpty()) {    notSuppReasonBuff.append(String.format("File system given in request has no active target file system %s.",fs.getLabel()));    _log.info(notSuppReasonBuff.toString());    return false;  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:42.811 -0500",hash_original_method="DD0B324AD7DDAC3BE4C7F5BE9E799132",hash_generated_method="F9846DE7B677AFDC64B654EEA711F5FA") public static boolean waitingForDebugger(){  return mWaiting;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public YadisUrl(XriIdentifier xriId) throws YadisException {  this(urlFromString(xriId.toURINormalForm()));}  }
class C{  public void defineDictionary(String name,Map<String,Object> mapping){  dictionaries.put(name,mapping);}  }
class C{  @Override public boolean eventGeneratable(String eventName){  if (m_listenee == null) {    return false;  }  if (m_listenee instanceof EventConstraints) {    if (((EventConstraints)m_listenee).eventGeneratable("dataSet") || ((EventConstraints)m_listenee).eventGeneratable("trainingSet") || ((EventConstraints)m_listenee).eventGeneratable("testSet")) {      return true;    } else {      return false;    }  }  return true;}  }
class C{  public void replace(String statement) throws CannotCompileException {  thisClass.getClassFile();  ConstPool constPool=getConstPool();  int pos=currentPos;  int index=iterator.u16bitAt(pos + 1);  Javac jc=new Javac(thisClass);  ClassPool cp=thisClass.getClassPool();  CodeAttribute ca=iterator.get();  try {    CtClass[] params=new CtClass[]{cp.get(javaLangObject)};    CtClass retType=getType();    int paramVar=ca.getMaxLocals();    jc.recordParams(javaLangObject,params,true,paramVar,withinStatic());    int retVar=jc.recordReturnType(retType,true);    jc.recordProceed(new ProceedForCast(index,retType));    checkResultValue(retType,statement);    Bytecode bytecode=jc.getBytecode();    storeStack(params,true,paramVar,bytecode);    jc.recordLocalVariables(ca,pos);    bytecode.addConstZero(retType);    bytecode.addStore(retVar,retType);    jc.compileStmnt(statement);    bytecode.addLoad(retVar,retType);    replace0(pos,bytecode,3);  } catch (  CompileError e) {    throw new CannotCompileException(e);  }catch (  NotFoundException e) {    throw new CannotCompileException(e);  }catch (  BadBytecode e) {    throw new CannotCompileException("broken method");  }}  }
class C{  public TrustingMonotonicArraySet(Object[] elements){  this();  for (  Object element : elements)   add(element);}  }
class C{  public void open(final RPEntity user){  attending=user;  chestSynchronizer=new SyncContent();  SingletonRepository.getTurnNotifier().notifyInTurns(0,chestSynchronizer);  final RPSlot content=getSlot("content");  content.clear();  for (  final RPObject item : getBankSlot()) {    try {      content.addPreservingId(cloneItem(item));    } catch (    final Exception e) {      LOGGER.error("Cannot clone item " + item,e);    }  }  super.open();}  }
class C{  protected void put(String propName,Object propValue){  properties.put(propName,propValue);}  }
class C{  protected CCScaleTo(float t,float sx,float sy){  super(t);  endScaleX=sx;  endScaleY=sy;}  }
class C{  @Override public boolean isValidateRoot(){  return true;}  }
class C{  public static String calcSizeString(float sz){  if (sz < 1024 * 1024 * 10) {    if (sz < 1024 * 1024) {      if (sz < 1024) {        if (sz < 0)         sz=0;        return String.format(n_bytes,(int)sz);      }      return String.format(n_kilobytes,(int)(sz * (1f / 1024)));    }    return String.format(n_megabytes,sz * (1f / 1024 / 1024));  }  if (sz < 1024 * 1024 * 200) {    return String.format(n_megabytes10,sz * (1f / 1024 / 1024));  }  return String.format(n_megabytes100,(int)(sz * (1f / 1024 / 1024)));}  }
class C{  protected boolean beforeDelete(){  DB.executeUpdate("DELETE FROM AD_Browse_Access WHERE AD_Browse_ID=? ",getAD_Browse_ID(),get_TrxName());  DB.executeUpdate("DELETE FROM AD_Browse_Trl WHERE AD_Browse_ID=? ",getAD_Browse_ID(),get_TrxName());  return true;}  }
class C{  static void subdivideCubic(float src[],int srcoff,float left[],int leftoff,float right[],int rightoff){  float x1=src[srcoff + 0];  float y1=src[srcoff + 1];  float ctrlx1=src[srcoff + 2];  float ctrly1=src[srcoff + 3];  float ctrlx2=src[srcoff + 4];  float ctrly2=src[srcoff + 5];  float x2=src[srcoff + 6];  float y2=src[srcoff + 7];  if (left != null) {    left[leftoff + 0]=x1;    left[leftoff + 1]=y1;  }  if (right != null) {    right[rightoff + 6]=x2;    right[rightoff + 7]=y2;  }  x1=(x1 + ctrlx1) / 2.0f;  y1=(y1 + ctrly1) / 2.0f;  x2=(x2 + ctrlx2) / 2.0f;  y2=(y2 + ctrly2) / 2.0f;  float centerx=(ctrlx1 + ctrlx2) / 2.0f;  float centery=(ctrly1 + ctrly2) / 2.0f;  ctrlx1=(x1 + centerx) / 2.0f;  ctrly1=(y1 + centery) / 2.0f;  ctrlx2=(x2 + centerx) / 2.0f;  ctrly2=(y2 + centery) / 2.0f;  centerx=(ctrlx1 + ctrlx2) / 2.0f;  centery=(ctrly1 + ctrly2) / 2.0f;  if (left != null) {    left[leftoff + 2]=x1;    left[leftoff + 3]=y1;    left[leftoff + 4]=ctrlx1;    left[leftoff + 5]=ctrly1;    left[leftoff + 6]=centerx;    left[leftoff + 7]=centery;  }  if (right != null) {    right[rightoff + 0]=centerx;    right[rightoff + 1]=centery;    right[rightoff + 2]=ctrlx2;    right[rightoff + 3]=ctrly2;    right[rightoff + 4]=x2;    right[rightoff + 5]=y2;  }}  }
class C{  @Override public boolean isAutoIncrement(int columnIndex){  return false;}  }
class C{  public BigInteger calculateAgreement(DHPublicKeyParameters pub,BigInteger message){  if (!pub.getParameters().equals(dhParams)) {    throw new IllegalArgumentException("Diffie-Hellman public key has wrong parameters.");  }  BigInteger p=dhParams.getP();  return message.modPow(key.getX(),p).multiply(pub.getY().modPow(privateValue,p)).mod(p);}  }
class C{  final public boolean isAdded(){  return mActivity != null && mAdded;}  }
class C{  void checkState() throws JMSException {  session.checkState();}  }
class C{  public ProcessInfo workflow(Properties ctx,ProcessInfo pi,int AD_Workflow_ID){  log.info("[" + m_no + "] "+ AD_Workflow_ID);  m_workflowCount++;  ProcessUtil.startWorkFlow(ctx,pi,AD_Workflow_ID);  return pi;}  }
class C{  public ScanResult runWithBackoff(){  ScanResult result=null;  boolean interrupted=false;  try {    do {      try {        result=client.scan(request);      } catch (      Exception e) {        try {          Thread.sleep(exponentialBackoffTime);        } catch (        InterruptedException ie) {          interrupted=true;        } finally {          exponentialBackoffTime*=2;        }        continue;      }    } while (result == null);    return result;  }  finally {    if (interrupted) {      Thread.currentThread().interrupt();    }  }}  }
class C{  public MainView(){  super(new Stage(new ScreenViewport()));}  }
class C{  private static DelaunayTriangle nextFlipTriangle(DTSweepContext tcx,Orientation o,DelaunayTriangle t,DelaunayTriangle ot,TriangulationPoint p,TriangulationPoint op){  int edgeIndex;  if (o == Orientation.CCW) {    edgeIndex=ot.edgeIndex(p,op);    ot.dEdge[edgeIndex]=true;    legalize(tcx,ot);    ot.clearDelunayEdges();    return t;  }  edgeIndex=t.edgeIndex(p,op);  t.dEdge[edgeIndex]=true;  legalize(tcx,t);  t.clearDelunayEdges();  return ot;}  }
class C{  BluetoothHeadset(Context context,ServiceListener l){  mContext=context;  mServiceListener=l;  mAdapter=BluetoothAdapter.getDefaultAdapter();  IBluetoothManager mgr=mAdapter.getBluetoothManager();  if (mgr != null) {    try {      mgr.registerStateChangeCallback(mBluetoothStateChangeCallback);    } catch (    RemoteException e) {      Log.e(TAG,"",e);    }  }  if (!context.bindService(new Intent(IBluetoothHeadset.class.getName()),mConnection,0)) {    Log.e(TAG,"Could not bind to Bluetooth Headset Service");  }}  }
class C{  public void tagDefineBitsJPEG3(int id,byte[] imageData,byte[] alphaData) throws IOException {  if (tags != null) {    tags.tagDefineBitsJPEG3(id,imageData,alphaData);  }}  }
class C{  protected void forwardCommandChangeToLayout(int newState){  if ((newState & Turnout.CLOSED) != 0) {    if ((newState & Turnout.THROWN) != 0) {      log.error("Cannot command both CLOSED and THROWN: " + newState);      return;    } else {      sendMessage(true);    }  } else {    sendMessage(false);  }}  }
class C{  public BufferedImage dataToRGB(final byte[] data,final int w,final int h){  final BufferedImage image=new BufferedImage(w,h,BufferedImage.TYPE_INT_RGB);  final Raster raster=ColorSpaceConvertor.createInterleavedRaster(data,w,h);  image.setData(raster);  return image;}  }
class C{  private boolean applyVolumesToMasksUsingRules(StorageSystem storage,ExportGroup exportGroup,Map<URI,Map<URI,Integer>> existingMasksToUpdateWithNewVolumes,Map<URI,Map<URI,Integer>> volumesWithNoMask,Map<ExportMask,ExportMaskPolicy> masksMap,Map<URI,Set<Initiator>> maskToInitiatorsMap,Set<URI> partialMasks,String token){  boolean isVMAX3=storage.checkIfVmax3();  if (exportGroup.checkInternalFlags(Flag.RECOVERPOINT) || (exportGroup.checkInternalFlags(Flag.RECOVERPOINT_JOURNAL))) {    masksMap=applyVolumesToMasksUsingRPVMAXRules(storage,exportGroup,masksMap);    if (masksMap.isEmpty()) {      _log.info("No masks were found for RP that aligned with the masks of the compute resource, proceeding to create new masks");      return true;    }  }  if (!applyVolumesToMasksUsingRule(exportGroup,token,existingMasksToUpdateWithNewVolumes,volumesWithNoMask,masksMap,maskToInitiatorsMap,partialMasks,1,isVMAX3)) {    return false;  }  if (!applyVolumesToMasksUsingRule(exportGroup,token,existingMasksToUpdateWithNewVolumes,volumesWithNoMask,masksMap,maskToInitiatorsMap,partialMasks,2,isVMAX3)) {    return false;  }  if (!applyVolumesToMasksUsingRule(exportGroup,token,existingMasksToUpdateWithNewVolumes,volumesWithNoMask,masksMap,maskToInitiatorsMap,partialMasks,3,isVMAX3)) {    return false;  }  return true;}  }
class C{  public void actionPerformed(ActionEvent e){  String license=LicenseUtils.license();  JTextArea textArea=new JTextArea(license);  textArea.setFont(new Font("Monospaced",Font.PLAIN,12));  JScrollPane scroll=new JScrollPane(textArea);  scroll.setPreferredSize(new Dimension(600,400));  Box b=Box.createVerticalBox();  b.add(scroll);  JOptionPane.showMessageDialog(JOptionUtils.centeringComp(),b,"License",JOptionPane.PLAIN_MESSAGE);}  }
class C{  protected boolean makeFigure(MouseEvent event){  ControlPanelEditor ed=_parent.getEditor();  Rectangle r=ed.getSelectRect();  if (r != null) {    _width=r.width;    _height=r.height;    Ellipse2D.Double rr=new Ellipse2D.Double(0,0,_width,_height);    PositionableEllipse ps=new PositionableEllipse(ed,rr);    ps.setLocation(r.x,r.y);    ps.setDisplayLevel(ControlPanelEditor.MARKERS);    setPositionableParams(ps);    ps.updateSize();    ed.putItem(ps);  }  return true;}  }
class C{  public int show(FragmentTransaction transaction,String tag){  mDismissed=false;  mShownByMe=true;  transaction.add(this,tag);  mViewDestroyed=false;  mBackStackId=transaction.commit();  return mBackStackId;}  }
class C{  public StoragePortRestRep toStoragePortRestRep(StoragePort storagePort){  return apply(storagePort);}  }
class C{  public boolean intersectsSegment(Vec4 pa,Vec4 pb){  if (pa == null || pb == null) {    String message=Logging.getMessage("nullValue.PointIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (this.contains(pa) || this.contains(pb))   return true;  if (pa.equals(pb))   return false;  for (  Plane p : this.getAllPlanes()) {    if (p.onSameSide(pa,pb) < 0)     return false;    if (p.clip(pa,pb) != null)     return true;  }  return false;}  }
class C{  protected void prepare(){  p_Record_ID=getRecord_ID();  ProcessInfoParameter[] parameters=getParameter();  for (  ProcessInfoParameter para : parameters) {    String name=para.getParameterName();    if (para.getParameter() == null)     ;    if (MBrowse.COLUMNNAME_AD_Browse_ID.equals(para.getParameterName()))     p_AD_Browse_ID=para.getParameterAsInt(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  @Override public Object create(final ConfigurableFactoryContext ctx){  KeyDestroyingDoor door=new KeyDestroyingDoor(getKey(ctx),getClass(ctx));  door.setRejectedMessage(getRejectedMessage(ctx));  return door;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public EgDemandDetails insertAdvanceCollection(final String demandReason,final BigDecimal advanceCollectionAmount,final Installment installment){  EgDemandDetails demandDetail=null;  if (advanceCollectionAmount != null && advanceCollectionAmount.compareTo(BigDecimal.ZERO) > 0) {    final EgDemandReasonMaster egDemandReasonMaster=demandGenericDAO.getDemandReasonMasterByCode(demandReason,module());    if (egDemandReasonMaster == null)     throw new ApplicationRuntimeException(" Advance Demand reason Master is null in method  insertAdvanceCollection");    final EgDemandReason egDemandReason=demandGenericDAO.getDmdReasonByDmdReasonMsterInstallAndMod(egDemandReasonMaster,installment,module());    if (egDemandReason == null)     throw new ApplicationRuntimeException(" Advance Demand reason is null in method  insertAdvanceCollection ");    demandDetail=createDemandDetails(egDemandReason,advanceCollectionAmount,BigDecimal.ZERO);  }  return demandDetail;}  }
class C{  public boolean isQuestCompleted(final String name){  final String info=getQuest(name,0);  if (info == null) {    return false;  }  return info.equals("done");}  }
class C{  public static void takeScreenshot(Activity activity,File toFile){  if (activity == null) {    throw new IllegalArgumentException("Parameter activity cannot be null.");  }  if (toFile == null) {    throw new IllegalArgumentException("Parameter toFile cannot be null.");  }  Bitmap bitmap=null;  try {    if (!toFile.exists()) {      toFile.createNewFile();    }    bitmap=takeBitmapUnchecked(activity);    writeBitmap(bitmap,toFile);  } catch (  Exception e) {    String message="Unable to take screenshot to file " + toFile.getAbsolutePath() + " of activity "+ activity.getClass().getName();    Log.e(TAG,message,e);    throw new UnableToTakeScreenshotException(message,e);  } finally {    if (bitmap != null) {      bitmap.recycle();    }  }  Log.d(TAG,"Screenshot captured to " + toFile.getAbsolutePath());}  }
class C{  public VaultConfig sslPemUTF8(final String sslPemUTF8){  this.sslPemUTF8=sslPemUTF8;  return this;}  }
class C{  public final void transpose(){  int i, j;  if (nRow != nCol) {    double[][] tmp;    i=nRow;    nRow=nCol;    nCol=i;    tmp=new double[nRow][nCol];    for (i=0; i < nRow; i++) {      for (j=0; j < nCol; j++) {        tmp[i][j]=values[j][i];      }    }    values=tmp;  } else {    double swap;    for (i=0; i < nRow; i++) {      for (j=0; j < i; j++) {        swap=values[i][j];        values[i][j]=values[j][i];        values[j][i]=swap;      }    }  }}  }
class C{  public String randomAlphaMixed(int length){  return randomString(alphaMixed(),length);}  }
class C{  private void initWidget(){  this.widgetCard=(ImageView)findViewById(R.id.widget_day_week_card);  widgetCard.setVisibility(View.GONE);  this.widgetIcon=(ImageView)findViewById(R.id.widget_day_week_icon);  this.widgetWeather=(TextView)findViewById(R.id.widget_day_week_weather);  this.widgetTemp=(TextView)findViewById(R.id.widget_day_week_temp);  this.widgetRefreshTime=(TextView)findViewById(R.id.widget_day_week_refreshTime);  this.widgetWeeks=new TextView[]{(TextView)findViewById(R.id.widget_day_week_week_1),(TextView)findViewById(R.id.widget_day_week_week_2),(TextView)findViewById(R.id.widget_day_week_week_3),(TextView)findViewById(R.id.widget_day_week_week_4),(TextView)findViewById(R.id.widget_day_week_week_5)};  this.widgetIcons=new ImageView[]{(ImageView)findViewById(R.id.widget_day_week_icon_1),(ImageView)findViewById(R.id.widget_day_week_icon_2),(ImageView)findViewById(R.id.widget_day_week_icon_3),(ImageView)findViewById(R.id.widget_day_week_icon_4),(ImageView)findViewById(R.id.widget_day_week_icon_5)};  this.widgetTemps=new TextView[]{(TextView)findViewById(R.id.widget_day_week_temp_1),(TextView)findViewById(R.id.widget_day_week_temp_2),(TextView)findViewById(R.id.widget_day_week_temp_3),(TextView)findViewById(R.id.widget_day_week_temp_4),(TextView)findViewById(R.id.widget_day_week_temp_5)};  ImageView wallpaper=(ImageView)findViewById(R.id.activity_create_widget_day_week_wall);  wallpaper.setImageDrawable(WallpaperManager.getInstance(this).getDrawable());  this.container=(CoordinatorLayout)findViewById(R.id.activity_create_widget_day_week_container);  ArrayAdapter<String> adapter=new ArrayAdapter<>(this,R.layout.spinner_text,nameList);  adapter.setDropDownViewResource(R.layout.spinner_text);  Spinner locationSpinner=(Spinner)findViewById(R.id.activity_create_widget_day_week_spinner);  locationSpinner.setAdapter(adapter);  locationSpinner.setOnItemSelectedListener(this);  this.showCardSwitch=(Switch)findViewById(R.id.activity_create_widget_day_week_showCardSwitch);  showCardSwitch.setOnCheckedChangeListener(new ShowCardSwitchCheckListener());  this.hideRefreshTimeSwitch=(Switch)findViewById(R.id.activity_create_widget_day_week_hideRefreshTimeSwitch);  hideRefreshTimeSwitch.setOnCheckedChangeListener(new HideRefreshTimeSwitchCheckListener());  this.blackTextSwitch=(Switch)findViewById(R.id.activity_create_widget_day_week_blackTextSwitch);  blackTextSwitch.setOnCheckedChangeListener(new BlackTextSwitchCheckListener());  Button doneButton=(Button)findViewById(R.id.activity_create_widget_day_week_doneButton);  doneButton.setOnClickListener(this);}  }
class C{  private void handleSelectorDimmerClick(int idx,String[] levelNames){  listener.onSelectorDimmerClick(idx,levelNames);}  }
class C{  @Override public java.util.List<JToolBar> createToolBars(Application a,@Nullable View pr){  ResourceBundleUtil drawLabels=ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels");  NetView p=(NetView)pr;  DrawingEditor editor;  if (p == null) {    editor=getSharedEditor();  } else {    editor=p.getEditor();  }  LinkedList<JToolBar> list=new LinkedList<JToolBar>();  JToolBar tb;  tb=new JToolBar();  addCreationButtonsTo(tb,editor);  tb.setName(drawLabels.getString("window.drawToolBar.title"));  list.add(tb);  tb=new JToolBar();  ButtonFactory.addAttributesButtonsTo(tb,editor);  tb.setName(drawLabels.getString("window.attributesToolBar.title"));  list.add(tb);  tb=new JToolBar();  ButtonFactory.addAlignmentButtonsTo(tb,editor);  tb.setName(drawLabels.getString("window.alignmentToolBar.title"));  list.add(tb);  return list;}  }
class C{  public void startEntity(String name) throws org.xml.sax.SAXException {}  }
class C{  @Override public String toSource(String className) throws Exception {  if (m_Tree == null) {    throw new Exception("REPTree: No model built yet.");  }  StringBuffer[] source=m_Tree.toSource(className,m_Tree);  return "class " + className + " {\n\n"+ "  public static double classify(Object [] i)\n"+ "    throws Exception {\n\n"+ "    double p = Double.NaN;\n"+ source[0]+ "    return p;\n"+ "  }\n"+ source[1]+ "}\n";}  }
class C{  @Override public boolean eventGeneratable(String eventName){  if (m_listenee == null) {    return false;  }  if (m_listenee instanceof EventConstraints) {    if (!((EventConstraints)m_listenee).eventGeneratable("incrementalClassifier")) {      return false;    }  }  return true;}  }
class C{  public void clear(){  for (int i=0; i < mSubcategories.size(); i++) {    mSubcategories.get(i).clear();  }  mBlocks.clear();  mSubcategories.clear();}  }
class C{  void deleteTask(long id){  datastore.delete(keyFactory.newKey(id));}  }
class C{  protected void init(){  if (!isInit) {    Terminal[] terminals=Reflection.getTerminals();    NonTerminal[] nonTerminals=Reflection.getNonTerminals();    symbolValueClasses=Reflection.getSymbolValueClasses(terminals,nonTerminals);    isInit=true;  }}  }
class C{  public static BinaryType type(BinaryContext ctx,BinaryObjectEx obj){  if (ctx == null)   throw new BinaryObjectException("BinaryContext is not set for the object.");  return ctx.metadata(obj.typeId());}  }
class C{  synchronized boolean unexport(boolean force){  if ((force == true) || (callCount == 0) || (disp == null)) {    disp=null;    unpinImpl();    DGCImpl dgc=DGCImpl.getDGCImpl();    Enumeration<VMID> enum_=refSet.elements();    while (enum_.hasMoreElements()) {      VMID vmid=enum_.nextElement();      dgc.unregisterTarget(vmid,this);    }    return true;  } else {    return false;  }}  }
class C{  public MonthWeekEventsView(Context context){  super(context);}  }
class C{  public static long toLong(NibbleArray nibbles,int start){  return toLong(nibbles.get(start),nibbles.get(start + 1),nibbles.get(start + 2),nibbles.get(start + 3),nibbles.get(start + 4),nibbles.get(start + 5),nibbles.get(start + 6),nibbles.get(start + 7),nibbles.get(start + 8),nibbles.get(start + 9),nibbles.get(start + 10),nibbles.get(start + 11),nibbles.get(start + 12),nibbles.get(start + 13),nibbles.get(start + 14),nibbles.get(start + 15));}  }
class C{  public void doNew(final Strategy strategy){  try {    String templateName=ConfigProperties.getPropAsString("trade.strategy.template");    String fileName=m_strategyDir + "/" + StrategyRule.PACKAGE.replace('.','/')+ templateName+ ".java";    commentText.setText(null);    setContent(readFile(fileName));    setContent((getContent().replaceAll(templateName,strategy.getClassName())));    createRule(strategy);  } catch (  Exception ex) {    setErrorMessage("Error loading template strategy",ex.getMessage(),ex);  }}  }
class C{  public LogTradeEventCommand(Player player,Item item,int quantity,int price){  this.charname=player.getName();  this.item=item;  this.quantity=quantity;  this.price=price;}  }
class C{  public static <T extends Predicate<String>>Validator<String> custom(T predicate,BiFunction<String,StringCustomValidator<T>,? extends IllegalArgumentException> exception){  return new ValidatorEntry<>(StringCustomValidator.create(predicate),exception);}  }
class C{  public void markSaved(){  this.entities.markSaved(this.world.getTotalWorldTime());  this.isModified=false;}  }
class C{  public void destroy(){  context.removeVisualizationListener(this);  context.removeResultListener(this);  plot.dispose();}  }
class C{  @Override public void endSampling(Sampler<?,?,?> sampler){}  }
class C{  @LogMessageDoc(level="ERROR",message="Tried to write OFFlowMod to {switch} but got {error}",explanation="An I/O error occured while trying to write a " + "static flow to a switch",recommendation=LogMessageDoc.CHECK_SWITCH) private void writeFlowModToSwitch(IOFSwitch sw,OFFlowMod flowMod){  sw.write(flowMod);  sw.flush();}  }
class C{  public static boolean isOptionApplies(DimensionOption option,AppContext ctx){  if (option.getGroupFilter() == null && option.getUserFilter() == null) {    return true;  } else {    if (option.getGroupFilter() != null) {      for (      String groupFilter : option.getGroupFilter()) {        if (ctx.getUser().getGroups().contains(groupFilter)) {          return true;        }      }    }    if (option.getUserFilter() != null) {      String userNamep=ctx.getUser().getLogin().toUpperCase();      for (      String userFilter : option.getGroupFilter()) {        if (userFilter.toUpperCase().equals(userNamep))         return true;      }    }    return false;  }}  }
class C{  @HLEFunction(nid=0x50A14DFC,version=150,checkInsideInterrupt=true) public int __sceSasCoreWithMix(int sasCore,int sasInOut,int leftVolume,int rightVolume){  checkSasHandleGood(sasCore);  long startTime=Emulator.getClock().microTime();  mixer.synthesizeWithMix(sasInOut,grainSamples,leftVolume << 3,rightVolume << 3);  delayThreadSasCore(startTime);  return 0;}  }
class C{  public SQLNonTransientConnectionException(String reason,String sqlState,int vendorCode,Throwable cause){  super(reason,sqlState,vendorCode,cause);}  }
class C{  public boolean isEnd() throws IOException {  int code=parseTag();  _peekTag=code;  return (code < 0 || code >= 100);}  }
class C{  @Override public Map createHeaderParams(final WorkOrder workOrder,final String type){  final Map<String,Object> reportParams=new HashMap<String,Object>();  if (workOrder != null)   if ("estimate".equalsIgnoreCase(type)) {    for (    final WorkOrderEstimate workOrderEstimate : workOrder.getWorkOrderEstimates())     if (workOrderEstimate != null && workOrderEstimate.getEstimate() != null) {      reportParams.put("deptName",workOrderEstimate.getEstimate().getExecutingDepartment().getName());      final Boundary b=getTopLevelBoundary(workOrderEstimate.getEstimate().getWard());      reportParams.put("cityName",b == null ? "" : b.getName());      reportParams.put("deptAddress","");      reportParams.put("aeWorkNameForEstimate",workOrderEstimate.getEstimate().getName());      reportParams.put("negotiatedAmtForEstimate",workOrder.getWorkOrderAmount());      reportParams.put("estimateNo",workOrderEstimate.getEstimate().getEstimateNumber());      reportParams.put("estimateDate",workOrderEstimate.getEstimate().getEstimateDate());      if (workOrderEstimate.getEstimate().getProjectCode() != null)       reportParams.put("projectCode",workOrderEstimate.getEstimate().getProjectCode().getCode());    }  } else {    final List<WorkOrderEstimate> aeList=getAbstractEstimateListForWp(workOrder);    final String projectCode=getProjectCodeListForAe(aeList);    reportParams.put("projectCodeList",projectCode);    final WorksPackage wp=workspackageService.findByNamedQuery("GET_WORKSPACKAGE_PACKAGENUMBER",workOrder.getPackageNumber());    if (wp != null)     reportParams.put("workPackageDate",wp.getCreatedDate());    if (wp != null)     reportParams.put("tenderFileNumber",wp.getTenderFileNumber());    reportParams.put("workPackageNo",workOrder.getPackageNumber());    if (aeList != null && !aeList.isEmpty()) {      reportParams.put("deptName",aeList.get(0).getEstimate().getExecutingDepartment().getName());      final Boundary b=getTopLevelBoundary(aeList.get(0).getEstimate().getWard());      reportParams.put("cityName",b == null ? "" : b.getName());      reportParams.put("deptAddress","");    }  }  if (workOrder != null && workOrder.getContractor() != null) {    String contractorAddress=workOrder.getContractor().getName() + "  ,  " + workOrder.getContractor().getCode();    if (workOrder.getContractor().getPaymentAddress() != null)     contractorAddress=contractorAddress + "  ,  " + workOrder.getContractor().getPaymentAddress();    reportParams.put("contractorAddress",contractorAddress);  }  reportParams.put("WorkOrderObj",workOrder);  return reportParams;}  }
class C{  public boolean engineIsOn(){  return (start_button.isSelected());}  }
class C{  private boolean isMediaTypeSupported(String media){  for (int i=0; i < SUPPORTED_MEDIA_TYPES.length; i++) {    if (media.equalsIgnoreCase(SUPPORTED_MEDIA_TYPES[i])) {      return true;    }  }  return false;}  }
class C{  public StatusNotification(String title,Status status,DisplayMode displayMode){  super(title);  this.status=status;  this.displayMode=displayMode;}  }
class C{  @Deprecated public void append(final String name,final String value){  List<String> l=map.get(name);  if (l != null) {    l.add(value);  } else {    l=Lists.newArrayList(value);    map.put(name,l);  }}  }
class C{  @InfoName("CL_DEVICE_AVAILABLE") public boolean isAvailable(){  return infos.getBool(getEntity(),CL_DEVICE_AVAILABLE);}  }
class C{  public Class parseClass(GroovyCodeSource codeSource,boolean shouldCacheSource) throws CompilationFailedException {synchronized (sourceCache) {    Class answer=sourceCache.get(codeSource.getName());    if (answer != null)     return answer;    answer=doParseClass(codeSource);    if (shouldCacheSource)     sourceCache.put(codeSource.getName(),answer);    return answer;  }}  }
class C{  int turnoutState(){  if (namedTurnout != null) {    return getTurnout().getKnownState();  } else {    return Turnout.UNKNOWN;  }}  }
class C{  public static QueryParser newQueryParser(String string){  return new QueryParser(version,string,ENGLISH);}  }
class C{  @Override public void writeVertices(final OutputStream outputStream,final Iterator<Vertex> vertexIterator) throws IOException {  writeVertices(outputStream,vertexIterator,null);}  }
class C{  public synchronized void finer(String msg){  LogRecord record=new LogRecord(Level.FINER,msg);  log(record);}  }
class C{  @Override public void write(byte[] buf,int offset,int length,boolean isEnd) throws IOException {  if (_os == null) {    if (_s == null) {      return;    }    _os=_s.getOutputStream();  }  try {    _needsFlush=true;    _os.write(buf,offset,length);    _totalWriteBytes+=length;  } catch (  IOException e) {    IOException exn=ClientDisconnectException.create(this + ":" + e,e);    try {      close();    } catch (    IOException e1) {    }    throw exn;  }}  }
class C{  public synchronized void accept(Agent agent) throws RemoteException {  Thread t;  t=new Thread(agent);  System.out.println("Agent Accepted: " + t);  t.start();}  }
class C{  public ArrowBuf retain(BufferAllocator target){  if (isEmpty) {    return this;  }  if (BaseAllocator.DEBUG) {    historicalLog.recordEvent("retain(%s)",target.getName());  }  final BufferLedger otherLedger=this.ledger.getLedgerForAllocator(target);  return otherLedger.newArrowBuf(offset,length,null);}  }
class C{  public static String toJson(Object o) throws Exception {  return objectMapper.writeValueAsString(o);}  }
class C{  public static MosaicDefinition createMosaicDefinition(final NamespaceId namespaceId,final int id,final MosaicProperties properties){  return createMosaicDefinition(generateRandomAccount(),createMosaicId(namespaceId,id),properties);}  }
class C{  protected static void succeed(){  System.exit(0);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:12.079 -0500",hash_original_method="0C0B9FED7DBC124A25298101B6DEE56A",hash_generated_method="C1C8DA392CEC67EC532791FA766D3B44") public BrowserFrame(Context context,WebViewCore w,CallbackProxy proxy,WebSettings settings,Map<String,Object> javascriptInterfaces){  Context appContext=context.getApplicationContext();  if (sJavaBridge == null) {    sJavaBridge=new JWebCoreJavaBridge();    ActivityManager am=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);    if (am.getMemoryClass() > 16) {      sJavaBridge.setCacheSize(8 * 1024 * 1024);    } else {      sJavaBridge.setCacheSize(4 * 1024 * 1024);    }    CacheManager.init(appContext);    CookieSyncManager.createInstance(appContext);    PluginManager.getInstance(appContext);  }  if (sConfigCallback == null) {    sConfigCallback=new ConfigCallback((WindowManager)appContext.getSystemService(Context.WINDOW_SERVICE));    ViewRootImpl.addConfigCallback(sConfigCallback);  }  sConfigCallback.addHandler(this);  mJavaScriptObjects=javascriptInterfaces;  if (mJavaScriptObjects == null) {    mJavaScriptObjects=new HashMap<String,Object>();  }  mRemovedJavaScriptObjects=new HashSet<Object>();  mSettings=settings;  mContext=context;  mCallbackProxy=proxy;  mDatabase=WebViewDatabase.getInstance(appContext);  mWebViewCore=w;  mSearchBox=new SearchBoxImpl(mWebViewCore,mCallbackProxy);  mJavaScriptObjects.put(SearchBoxImpl.JS_INTERFACE_NAME,mSearchBox);  AssetManager am=context.getAssets();  nativeCreateFrame(w,am,proxy.getBackForwardList());  if (DebugFlags.BROWSER_FRAME) {    Log.v(LOGTAG,"BrowserFrame constructor: this=" + this);  }}  }
class C{  private static boolean isBetterLocation(Location location,Location currentBestLocation){  if (currentBestLocation == null) {    return true;  }  long timeDelta=location.getTime() - currentBestLocation.getTime();  boolean isSignificantlyNewer=timeDelta > TWO_MINUTES;  boolean isSignificantlyOlder=timeDelta < -TWO_MINUTES;  if (isSignificantlyOlder) {    return false;  }  int accuracyDelta=(int)(location.getAccuracy() - currentBestLocation.getAccuracy());  boolean isMoreAccurate=accuracyDelta < 0;  boolean isSameAccuracy=accuracyDelta == 0;  boolean isSame=accuracyDelta == 0 && location.getAltitude() == currentBestLocation.getAltitude() && location.getLongitude() == currentBestLocation.getLongitude();  if (isMoreAccurate) {    return true;  } else   if ((isSignificantlyNewer || isSameAccuracy) && !isSame) {    return true;  }  return false;}  }
class C{  @SuppressWarnings("fallthrough") public static int murmurhash3_x86_32(byte[] data,int offset,int len,int seed){  final int c1=0xcc9e2d51;  final int c2=0x1b873593;  int h1=seed;  int roundedEnd=offset + (len & 0xfffffffc);  for (int i=offset; i < roundedEnd; i+=4) {    int k1=(data[i] & 0xff) | ((data[i + 1] & 0xff) << 8) | ((data[i + 2] & 0xff) << 16)| (data[i + 3] << 24);    k1*=c1;    k1=Integer.rotateLeft(k1,15);    k1*=c2;    h1^=k1;    h1=Integer.rotateLeft(h1,13);    h1=h1 * 5 + 0xe6546b64;  }  int k1=0;switch (len & 0x03) {case 3:    k1=(data[roundedEnd + 2] & 0xff) << 16;case 2:  k1|=(data[roundedEnd + 1] & 0xff) << 8;case 1:k1|=(data[roundedEnd] & 0xff);k1*=c1;k1=Integer.rotateLeft(k1,15);k1*=c2;h1^=k1;}h1^=len;h1^=h1 >>> 16;h1*=0x85ebca6b;h1^=h1 >>> 13;h1*=0xc2b2ae35;h1^=h1 >>> 16;return h1;}  }
class C{  private static void saveKey(final BigInteger mod,final BigInteger exp,final Path path) throws Exception {  try (final DataOutputStream out=new DataOutputStream(Files.newOutputStream(path))){    out.writeInt(RsaConsts.KEY_SIZE_BITS);    byte[] buff=mod.toByteArray();    out.writeInt(buff.length);    out.write(buff);    buff=exp.toByteArray();    out.writeInt(buff.length);    out.write(buff);  } }  }
class C{  @AfterMethod public void cleanUp() throws IOException {  root.setApplicationId(-1);  root.setBusinessTransactionId(-1);}  }
class C{  public boolean isLoadMembers(){  return loadMembers;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Suspendable public static <T>Handler<T> fiberHandler(Handler<T> handler){  FiberScheduler scheduler=getContextScheduler();  return null;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static String stripExtension(String filename){  int idx=filename.indexOf('.');  if (idx != -1) {    filename=filename.substring(0,idx);  }  return filename;}  }
class C{  public DtoAttributeGroupServiceImpl(final AttributeGroupService attributeGroupService,final DtoFactory dtoFactory,final AdaptersRepository adaptersRepository){  super(dtoFactory,attributeGroupService,adaptersRepository);}  }
class C{  protected POInfo initPO(Properties ctx){  return null;}  }
class C{  public boolean addGpsTags(double latitude,double longitude){  ExifTag latTag=buildTag(TAG_GPS_LATITUDE,toExifLatLong(latitude));  ExifTag longTag=buildTag(TAG_GPS_LONGITUDE,toExifLatLong(longitude));  ExifTag latRefTag=buildTag(TAG_GPS_LATITUDE_REF,latitude >= 0 ? ExifInterface.GpsLatitudeRef.NORTH : ExifInterface.GpsLatitudeRef.SOUTH);  ExifTag longRefTag=buildTag(TAG_GPS_LONGITUDE_REF,longitude >= 0 ? ExifInterface.GpsLongitudeRef.EAST : ExifInterface.GpsLongitudeRef.WEST);  if (latTag == null || longTag == null || latRefTag == null || longRefTag == null) {    return false;  }  setTag(latTag);  setTag(longTag);  setTag(latRefTag);  setTag(longRefTag);  return true;}  }
class C{  public void push(final V value) throws IndexOutOfBoundsException {  if (top + locals >= values.length) {    throw new IndexOutOfBoundsException("Insufficient maximum stack size.");  }  values[top++ + locals]=value;}  }
class C{  public GVector(double vector[],int length){  this.length=length;  values=new double[length];  for (int i=0; i < length; i++) {    values[i]=vector[i];  }}  }
class C{  public static BinaryExpression newAssignmentExpression(Variable variable,Expression rhs){  VariableExpression lhs=new VariableExpression(variable);  Token operator=Token.newPlaceholder(Types.ASSIGN);  return new BinaryExpression(lhs,operator,rhs);}  }
class C{  public option addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  @SuppressWarnings("unchecked") public boolean equals(final Object o){  if (this == o)   return true;  if (!(o instanceof Bundle))   return false;  final Bundle<F> t=(Bundle<F>)o;  if (keyOrder == t.keyOrder)   return false;  if (compareTo(t) != 0)   return false;  if (!bindingSet.equals(t.bindingSet))   return false;  if (!asBound.equals(t.asBound))   return false;  return true;}  }
class C{  public static String format(int[] a,String sep){  return (a == null) ? "null" : (a.length == 0) ? "" : formatTo(new StringBuilder(),a,sep).toString();}  }
class C{  protected void addResult(final NamedAttachable obj,final int quantity){  if (!(obj instanceof UnitType) && !(obj instanceof Resource)) {    throw new IllegalArgumentException("results must be units or resources, not:" + obj.getClass().getName());  }  m_results.put(obj,quantity);}  }
class C{  @Override public ConfigurationNode createEmptyNode(ConfigurationOptions options){  return SimpleConfigurationNode.root(options);}  }
class C{  public LibraryException(final Throwable cause){  super(cause);  QL.error(this);}  }
class C{  public AccessStructure(String user,jplagWebService.server.Option usr_option) throws JPlagException {  dec=new StatusDecorator(new Status());  submissionID=JPlagCentral.getNextSubmissionID();  commandLineInString=generateCMD(usr_option);  username=user;  title=usr_option.getTitle();  date=System.currentTimeMillis();  generateStructure(usr_option,commandLineInString);}  }
class C{  public final boolean contentEquals(java.lang.CharSequence csq){  if (csq.length() != _length)   return false;  for (int i=0; i < _length; ) {    char c=i < C1 ? _low[i] : _high[i >> B1][i & M1];    if (csq.charAt(i++) != c)     return false;  }  return true;}  }
class C{  private int compareLiterals(final Literal leftLit,final Literal rightLit){  if (!QueryEvaluationUtil.isStringLiteral(leftLit) || !QueryEvaluationUtil.isStringLiteral(rightLit)) {    try {      boolean isSmaller=QueryEvaluationUtil.compareLiterals(leftLit,rightLit,CompareOp.LT);      if (isSmaller) {        return -1;      } else {        return 1;      }    } catch (    ValueExprEvaluationException e) {    }  }  int result=0;  URI leftDatatype=leftLit.getDatatype();  URI rightDatatype=rightLit.getDatatype();  if (leftDatatype != null) {    if (rightDatatype != null) {      result=compareDatatypes(leftDatatype,rightDatatype);    } else {      result=1;    }  } else   if (rightDatatype != null) {    result=-1;  }  if (result == 0) {    String leftLanguage=leftLit.getLanguage();    String rightLanguage=rightLit.getLanguage();    if (leftLanguage != null) {      if (rightLanguage != null) {        result=leftLanguage.compareTo(rightLanguage);      } else {        result=1;      }    } else     if (rightLanguage != null) {      result=-1;    }  }  if (result == 0) {    result=leftLit.getLabel().compareTo(rightLit.getLabel());  }  return result;}  }
class C{  private void jbInit() throws Exception {  this.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);  fResource.addActionListener(this);  delete.addActionListener(this);  confirmPanel.addButton(delete);  confirmPanel.addActionListener(this);  mainPanel.setLayout(mainLayout);  mainPanel.add(lResource,new GridBagConstraints(0,0,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(8,8,4,4),0,0));  mainPanel.add(fResource,new GridBagConstraints(1,0,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(8,0,4,4),0,0));  mainPanel.add(lDate,new GridBagConstraints(0,1,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(2,8,4,4),0,0));  mainPanel.add(fDateFrom,new GridBagConstraints(1,1,2,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(2,0,4,8),100,0));  mainPanel.add(lQty,new GridBagConstraints(0,2,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(2,8,4,4),0,0));  mainPanel.add(fQty,new GridBagConstraints(1,2,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.HORIZONTAL,new Insets(2,0,4,4),0,0));  mainPanel.add(lUOM,new GridBagConstraints(2,2,1,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(2,4,4,8),0,0));  mainPanel.add(lName,new GridBagConstraints(0,3,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(2,8,4,4),0,0));  mainPanel.add(lDescription,new GridBagConstraints(0,4,1,1,0.0,0.0,GridBagConstraints.EAST,GridBagConstraints.NONE,new Insets(2,8,8,4),0,0));  mainPanel.add(fName,new GridBagConstraints(1,3,2,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(2,0,4,8),0,0));  mainPanel.add(fDescription,new GridBagConstraints(1,4,2,1,0.0,0.0,GridBagConstraints.WEST,GridBagConstraints.NONE,new Insets(2,0,8,8),0,0));  this.getContentPane().add(mainPanel,BorderLayout.CENTER);  this.getContentPane().add(confirmPanel,BorderLayout.SOUTH);}  }
class C{  public Boolean isEnableAPDTimeoutForHosts(){  return enableAPDTimeoutForHosts;}  }
class C{  @Deprecated @Override public final String readLine() throws IOException {  return dis.readLine();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void disconnect() throws SQLException, NoConnectionException {  if (connection != null)   connection.close();  throw new NoConnectionException();}  }
class C{  public boolean cancelAlarm(Intent scheduledIntent){  PendingIntent pendingIntent=PendingIntent.getService(mContext,0,scheduledIntent,PendingIntent.FLAG_NO_CREATE);  if (pendingIntent != null) {    AlarmManager am=(AlarmManager)mContext.getSystemService(Context.ALARM_SERVICE);    am.cancel(pendingIntent);    pendingIntent.cancel();    return true;  } else {    return false;  }}  }
class C{  public void testUnconcernedParentIsNotError() throws Exception {  assertEquals(NO_WARNINGS,lintClassFile("bin/classes/ExampleApi.class"));}  }
class C{  public void run(){  try {    while (events < expectedEvents) {      ReplDBMSEvent rde=queue.get();      long seqno=rde.getSeqno();      if (seqno > maxSeqno)       maxSeqno=seqno;      events++;      if ((events % 10000) == 0) {        logger.info("Consuming events: events=" + events + " maxSeqno="+ maxSeqno);      }    }    logger.info("Finished reading events from queue: events=" + events + " maxSeqno="+ maxSeqno);  } catch (  InterruptedException e) {    logger.info("Event consumer task loop interrupted");  }catch (  Exception e) {    logger.error("Consumer loop failed!",e);    exception=e;  }catch (  Throwable t) {    logger.error("Consumer loop failed!",t);  } finally {    done=true;  }}  }
class C{  public V remove(Object key){  if (key == null) {    return null;  }  purgeBeforeWrite();  return super.remove(key);}  }
class C{  public boolean isEnum(){  return false;}  }
class C{  protected void openActivePart(@NotNull PartStackType partStackType){  PartStack partStack=partStacks.get(partStackType);  partStack.openPreviousActivePart();}  }
class C{  public ImageRequest(String url,Response.Listener<Bitmap> listener,int maxWidth,int maxHeight,Config decodeConfig,Response.ErrorListener errorListener){  super(Method.GET,url,errorListener);  setRetryPolicy(new DefaultRetryPolicy(IMAGE_TIMEOUT_MS,IMAGE_MAX_RETRIES,IMAGE_BACKOFF_MULT));  mListener=listener;  mDecodeConfig=decodeConfig;  mMaxWidth=maxWidth;  mMaxHeight=maxHeight;}  }
class C{  public ItemGuardCreature(final Creature copy,final String itemType){  this(copy,itemType,null,null,0);}  }
class C{  public Builder degreeDistribution(final Distribution degree){  this.edgeDegree=degree;  return this;}  }
class C{  public void addListener(DiscoveryManagerListener listener){  for (  ConnectableDevice device : compatibleDevices.values()) {    listener.onDeviceAdded(this,device);  }  discoveryListeners.add(listener);}  }
class C{  protected Class<?> determineDatabaseDialectClass(Database database){switch (database) {case ORACLE:    return org.babyfish.hibernate.dialect.Oracle10gDialect.class;case DB2:  return DB2Dialect.class;case DERBY:return DerbyDialect.class;case H2:return H2Dialect.class;case HSQL:return HSQLDialect.class;case INFORMIX:return InformixDialect.class;case MYSQL:return MySQLDialect.class;case POSTGRESQL:return PostgreSQLDialect.class;case SQL_SERVER:return SQLServerDialect.class;case SYBASE:return SybaseDialect.class;default :return null;}}  }
class C{  public void checkLastSticky(final int position){  bounceRecyclerView.clearSticky();  for (int i=0; i <= position; i++) {    WXComponent component=getChild(i);    if (component.isSticky() && component instanceof WXCell) {      if (component.getHostView() == null) {        return;      }      bounceRecyclerView.notifyStickyShow((WXCell)component);    }  }}  }
class C{  @NotNull public static <T>Class<T> wrap(@NotNull Class<T> type){  Class<?> result=(type == boolean.class) ? Boolean.class : (type == byte.class) ? Byte.class : (type == char.class) ? Character.class : (type == short.class) ? Short.class : (type == int.class) ? Integer.class : (type == long.class) ? Long.class : (type == float.class) ? Float.class : (type == double.class) ? Double.class : type;  @SuppressWarnings("unchecked") Class<T> casted=(Class<T>)result;  return casted;}  }
class C{  public void writeByte(byte b) throws TException {  writeByteDirect(b);}  }
class C{  @Override public Token nextToken(){  Token t=super.nextToken();  while (t.getType() == STLexer.NEWLINE || t.getType() == STLexer.INDENT) {    t=super.nextToken();  }  return t;}  }
class C{  public void waitForResponse(int timeoutSec) throws Exception {  if (futureResponse == null) {    throw new CodedException(X_INTERNAL_ERROR,"Request uninitialized");  }  LOG.trace("waitForResponse()");  try {    HttpResponse response=futureResponse.get(timeoutSec,TimeUnit.SECONDS);    handleResponse(response);  } catch (  TimeoutException e) {    cancelRequest();    throw new CodedException(X_NETWORK_ERROR,"Connection timed out");  }catch (  Exception e) {    handleFailure(e);  } finally {    futureResponse=null;    PerformanceLogger.log(LOG,"waitForResponse() done");  }}  }
class C{  static void clearImage(BufferedImage img){  Graphics2D g2=img.createGraphics();  g2.setComposite(AlphaComposite.Clear);  g2.fillRect(0,0,img.getWidth(),img.getHeight());  g2.dispose();}  }
class C{  public AttributeSet(int initialCapacity){  regularAttributes=new ArrayList<Attribute>(initialCapacity);}  }
class C{  private void removeCommittedOrCanceledMigrations(String migrationPaths) throws VPlexApiException {  URI requestURI=_vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_REMOVE_MIGRATIONS);  s_logger.info("Remove migrations URI is {}",requestURI.toString());  ClientResponse response=null;  try {    s_logger.info("Removing migrations");    Map<String,String> argsMap=new HashMap<String,String>();    argsMap.put(VPlexApiConstants.ARG_DASH_M,migrationPaths);    JSONObject postDataObject=VPlexApiUtils.createPostData(argsMap,true);    s_logger.info("Remove migrations POST data is {}",postDataObject.toString());    response=_vplexApiClient.post(requestURI,postDataObject.toString());    String responseStr=response.getEntity(String.class);    s_logger.info("Remove migrations response is {}",responseStr);    if (response.getStatus() != VPlexApiConstants.SUCCESS_STATUS) {      if (response.getStatus() == VPlexApiConstants.ASYNC_STATUS) {        s_logger.info("Remove migrations is completing asynchronously");        _vplexApiClient.waitForCompletion(response);      } else {        String cause=VPlexApiUtils.getCauseOfFailureFromResponse(responseStr);        throw VPlexApiException.exceptions.removeMigrationsFailureStatus(migrationPaths,String.valueOf(response.getStatus()),cause);      }    }    s_logger.info("Successfully removed migrations {}",migrationPaths);  } catch (  VPlexApiException vae) {    throw vae;  }catch (  Exception e) {    throw VPlexApiException.exceptions.failedRemoveMigrations(migrationPaths,e);  } finally {    if (response != null) {      response.close();    }  }}  }
class C{  private boolean isSpecial(String subreddit){  for (  String specialSubreddit : UserSubscriptions.specialSubreddits) {    if (subreddit.equalsIgnoreCase(specialSubreddit))     return true;  }  return false;}  }
class C{  public DailyTimeIntervalScheduleBuilder withIntervalInMinutes(int intervalInMinutes){  withInterval(intervalInMinutes,IntervalUnit.MINUTE);  return this;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected static String prettyPrintObject(LzPersistentBaseImpl<? extends GenericPK> object,PrettyPrintOptions options){  if (object == null)   return "{undefined metric}";  if (options == null || options.getStyle() == ReferenceStyle.LEGACY) {    return "[" + AnalysisScope.MEASURE.getToken() + ":'"+ object.getName()+ "']";  } else   if (options != null && options.getStyle() == ReferenceStyle.NAME) {    return PrettyPrintConstant.OPEN_IDENT + object.getName() + PrettyPrintConstant.CLOSE_IDENT;  } else {    return PrettyPrintConstant.IDENTIFIER_TAG + PrettyPrintConstant.OPEN_IDENT + object.getOid()+ PrettyPrintConstant.CLOSE_IDENT;  }}  }
class C{  public static OneCameraManager provideOneCameraManager() throws OneCameraException {  Optional<Camera2OneCameraManagerImpl> camera2HwManager=Camera2OneCameraManagerImpl.create();  if (camera2HwManager.isPresent()) {    return camera2HwManager.get();  }  Optional<LegacyOneCameraManagerImpl> legacyHwManager=LegacyOneCameraManagerImpl.instance();  if (legacyHwManager.isPresent()) {    return legacyHwManager.get();  }  throw new OneCameraException("No hardware manager is available.");}  }
class C{  public void centerViewTo(int xIndex,float yValue,AxisDependency axis){  float valsInView=getDeltaY(axis) / mViewPortHandler.getScaleY();  float xsInView=getXAxis().getValues().size() / mViewPortHandler.getScaleX();  Runnable job=new MoveViewJob(mViewPortHandler,xIndex - xsInView / 2f,yValue + valsInView / 2f,getTransformer(axis),this);  if (mViewPortHandler.hasChartDimens()) {    post(job);  } else {    mJobs.add(job);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int extraFilterArgs=curNumberOfParameters - 3;  final java.util.ArrayList extraArgs=new java.util.ArrayList();  while (extraFilterArgs-- > 0)   extraArgs.add(stack.pop());  boolean invertRes=false;  invertRes=!evalBool(stack.pop());  String filterMethName=getString(stack);  Object dataObj=stack.pop();  if (dataObj == null)   return null;  java.util.ArrayList filtMeths=new java.util.ArrayList();  java.util.StringTokenizer toker=new java.util.StringTokenizer(filterMethName," |");  while (toker.hasMoreTokens()) {    filtMeths.add(Catbert.getAPI().get(toker.nextToken()));  }  if (dataObj instanceof java.util.Collection || dataObj instanceof java.util.Map) {    java.util.Collection currData;    if (dataObj instanceof java.util.Collection)     currData=(java.util.Collection)dataObj; else     currData=((java.util.Map)dataObj).keySet();    java.util.Iterator walker=currData.iterator();    if ("HasMediaMask".equals(filterMethName) && extraArgs.size() == 1) {      int mediaMask=DBObject.getMediaMaskFromString(extraArgs.get(0).toString());      while (walker.hasNext()) {        if (invertRes == filterTestHasMediaMask(walker.next(),mediaMask))         walker.remove();      }    } else     if ("IsCompleteRecording|IsManualRecord".equals(filterMethName)) {      while (walker.hasNext()) {        if (invertRes == filterTestCompleteOrMR(walker.next()))         walker.remove();      }    } else     if ("IsChannelViewable".equals(filterMethName)) {      while (walker.hasNext()) {        if (invertRes == filterTestChannelViewable(walker.next()))         walker.remove();      }    } else     if ("IsMovie".equals(filterMethName)) {      while (walker.hasNext()) {        if (invertRes == filterTestIsMovie(walker.next()))         walker.remove();      }    } else     if ("HasSeriesImage".equals(filterMethName)) {      while (walker.hasNext()) {        if (invertRes == filterTestHasSeriesImage(walker.next()))         walker.remove();      }    } else     if ("IsFavorite".equals(filterMethName)) {      while (walker.hasNext()) {        if (invertRes == filterTestIsFavorite(walker.next()))         walker.remove();      }    } else     if ("IsMediaFileObject".equals(filterMethName)) {      while (walker.hasNext()) {        if (invertRes == filterTestIsMediaFileObject(walker.next()))         walker.remove();      }    } else     if ("IsWatched".equals(filterMethName)) {      while (walker.hasNext()) {        if (invertRes == filterTestIsWatched(walker.next()))         walker.remove();      }    } else {      while (walker.hasNext()) {        Object currObj=walker.next();        boolean testResult=false;        for (int j=0; j < filtMeths.size(); j++) {          sage.jep.function.PostfixMathCommandI filtMeth=(sage.jep.function.PostfixMathCommandI)filtMeths.get(j);          stack.push(currObj);          for (int i=extraArgs.size() - 1; i >= 0; i--)           stack.push(extraArgs.get(i));          filtMeth.setCurNumberOfParameters(1 + extraArgs.size());          filtMeth.run(stack);          if (((Boolean)stack.pop()).booleanValue()) {            testResult=true;            break;          }        }        if (invertRes == testResult)         walker.remove();      }    }    return dataObj;  } else {    Object[] currData=(Object[])dataObj;    Class filterClass=currData.getClass().getComponentType();    java.util.ArrayList passedData=new java.util.ArrayList();    if ("HasMediaMask".equals(filterMethName) && extraArgs.size() == 1) {      int mediaMask=DBObject.getMediaMaskFromString(extraArgs.get(0).toString());      for (int j=0; j < currData.length; j++) {        if (invertRes != filterTestHasMediaMask(currData[j],mediaMask))         passedData.add(currData[j]);      }    } else     if ("AreAiringsSameShow".equals(filterMethName) && extraArgs.size() == 1) {      Airing match=getAirObj(extraArgs.get(0));      for (int j=0; j < currData.length; j++) {        if (invertRes != BigBrother.areSameShow(getAirObj(currData[j]),match,false))         passedData.add(currData[j]);      }    } else     if ("IsCompleteRecording|IsManualRecord".equals(filterMethName)) {      for (int j=0; j < currData.length; j++) {        if (invertRes != filterTestCompleteOrMR(currData[j]))         passedData.add(currData[j]);      }    } else     if ("IsChannelViewable".equals(filterMethName)) {      for (int j=0; j < currData.length; j++) {        if (invertRes != filterTestChannelViewable(currData[j]))         passedData.add(currData[j]);      }    } else     if ("IsMovie".equals(filterMethName)) {      for (int j=0; j < currData.length; j++) {        if (invertRes != filterTestIsMovie(currData[j]))         passedData.add(currData[j]);      }    } else     if ("HasSeriesImage".equals(filterMethName)) {      for (int j=0; j < currData.length; j++) {        if (invertRes != filterTestHasSeriesImage(currData[j]))         passedData.add(currData[j]);      }    } else     if ("IsFavorite".equals(filterMethName)) {      for (int j=0; j < currData.length; j++) {        if (invertRes != filterTestIsFavorite(currData[j]))         passedData.add(currData[j]);      }    } else     if ("IsMediaFileObject".equals(filterMethName)) {      for (int j=0; j < currData.length; j++) {        if (invertRes != filterTestIsMediaFileObject(currData[j]))         passedData.add(currData[j]);      }    } else     if ("IsWatched".equals(filterMethName)) {      for (int j=0; j < currData.length; j++) {        if (invertRes != filterTestIsWatched(currData[j]))         passedData.add(currData[j]);      }    } else {      for (int i=0; i < currData.length; i++) {        boolean testResult=false;        for (int j=0; j < filtMeths.size(); j++) {          sage.jep.function.PostfixMathCommandI filtMeth=(sage.jep.function.PostfixMathCommandI)filtMeths.get(j);          stack.push(currData[i]);          for (int k=extraArgs.size() - 1; k >= 0; k--)           stack.push(extraArgs.get(k));          filtMeth.setCurNumberOfParameters(1 + extraArgs.size());          filtMeth.run(stack);          if (((Boolean)stack.pop()).booleanValue()) {            testResult=true;            break;          }        }        if (invertRes != testResult)         passedData.add(currData[i]);      }    }    return passedData.toArray((Object[])java.lang.reflect.Array.newInstance(filterClass,passedData.size()));  }}  }
class C{  @Deprecated public static String encode(final String s,final String encoding,BitSet safeOctets,boolean plusForSpace) throws UnsupportedEncodingException {  StringBuilder out=new StringBuilder(s.length() * 2);  boolean needsEncoding;  try {    needsEncoding=encode(s,encoding,safeOctets,plusForSpace,out);  } catch (  UnsupportedEncodingException e) {    throw e;  }catch (  IOException e) {    throw new AssertionError(e);  }  if (needsEncoding) {    return out.toString();  } else {    return s;  }}  }
class C{  @POST @Path("/{machineId}/context/events") public Response submitEvent(@PathParam("machineId") String machineId,@QueryParam("searchField") String searchField,EventData eventData) throws Exception {  logger.info("Received event: {} for state machine: {}",eventData.getName(),machineId);  if (searchField != null) {    if (!searchField.equals(CORRELATION_ID)) {      return Response.status(Response.Status.BAD_REQUEST).build();    }    workFlowExecutionController.postEvent(eventData,null,machineId);  } else {    workFlowExecutionController.postEvent(eventData,Long.valueOf(machineId),null);  }  return Response.status(Response.Status.ACCEPTED.getStatusCode()).build();}  }
class C{  public void removeSessionParticipantByUrl(String sessionParticipantUrl){  Validate.notNull(sessionParticipantUrl);  if (participantsByUrl.containsKey(sessionParticipantUrl)) {    String participant=this.participantsByUrl.get(sessionParticipantUrl).getSessionId();    this.participants.remove(participant);    this.participantsByUrl.remove(sessionParticipantUrl);  }}  }
class C{  public static void copyDirectory(Object requestor,@NotNull VirtualFile fromDir,@NotNull VirtualFile toDir,@Nullable VirtualFileFilter filter) throws IOException {  @SuppressWarnings("UnsafeVfsRecursion") VirtualFile[] children=fromDir.getChildren();  for (  VirtualFile child : children) {    if (!child.is(VFileProperty.SYMLINK) && !child.is(VFileProperty.SPECIAL) && (filter == null || filter.accept(child))) {      if (!child.isDirectory()) {        copyFile(requestor,child,toDir);      } else {        VirtualFile newChild=toDir.findChild(child.getName());        if (newChild == null) {          newChild=toDir.createChildDirectory(requestor,child.getName());        }        copyDirectory(requestor,child,newChild,filter);      }    }  }}  }
class C{  public static int findTag(byte tag,byte[] value){  int length=0;  if (value == null) {    return -1;  }  int index=0;  while ((index < value.length) && (value[index] != tag)) {    length=value[index + 1] & 0xFF;    index+=length + 2;  }  if (index >= value.length) {    return -1;  }  return index;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void removeAllBodiesAction(){  int choice=JOptionPane.showConfirmDialog(ControlUtilities.getParentWindow(this),Messages.getString("menu.context.bodyFolder.removeAll.warning"),Messages.getString("menu.context.bodyFolder.removeAll.warning.title"),JOptionPane.YES_NO_CANCEL_OPTION);  if (choice == JOptionPane.YES_OPTION) {synchronized (Simulation.LOCK) {      this.simulation.getWorld().removeAllBodies();      this.simulation.getContactCounter().clear();    }    this.bodyFolder.removeAllChildren();    this.jointFolder.removeAllChildren();    this.model.reload(this.bodyFolder);    this.model.reload(this.jointFolder);    this.notifyActionListeners("clear-all");  }}  }
class C{  public void testXmlGeneration() throws Exception {  XmlGenerator.generate("org.apache.ignite.schema.test.model",pojos,true,true,new File(OUT_DIR_PATH,TEST_XML_FILE_NAME),YES_TO_ALL);  assertTrue("Generated XML file content is differ from expected one",compareFilesInt(getClass().getResourceAsStream("/org/apache/ignite/schema/test/model/" + TEST_XML_FILE_NAME),new File(OUT_DIR_PATH,TEST_XML_FILE_NAME),"XML generated by Apache Ignite Schema Import utility"));}  }
class C{  public void addComparator(Comparator<T> comparator,boolean ascending){  this.comparators.add(new InvertibleComparator<T>(comparator,ascending));}  }
class C{  public static final LabelSet[] convert(LabelSet[] sparseY,HashMap<LabelSet,Integer> map){  return null;}  }
class C{  @Override public boolean equals(final Object obj){  if (obj == null) {    return false;  }  if (getClass() != obj.getClass()) {    return false;  }  final CacheControl other=(CacheControl)obj;  if (this.privateFlag != other.privateFlag) {    return false;  }  if (this.privateFields != other.privateFields && (this.privateFields == null || !this.privateFields.equals(other.privateFields))) {    return false;  }  if (this.noCache != other.noCache) {    return false;  }  if (this.noCacheFields != other.noCacheFields && (this.noCacheFields == null || !this.noCacheFields.equals(other.noCacheFields))) {    return false;  }  if (this.noStore != other.noStore) {    return false;  }  if (this.noTransform != other.noTransform) {    return false;  }  if (this.mustRevalidate != other.mustRevalidate) {    return false;  }  if (this.proxyRevalidate != other.proxyRevalidate) {    return false;  }  if (this.maxAge != other.maxAge) {    return false;  }  if (this.sMaxAge != other.sMaxAge) {    return false;  }  if (this.cacheExtension != other.cacheExtension && (this.cacheExtension == null || !this.cacheExtension.equals(other.cacheExtension))) {    return false;  }  if (this.publicFlag != other.publicFlag) {    return false;  }  return true;}  }
class C{  @Override public void visit(NodeVisitor v){  if (v.visit(this)) {    expression.visit(v);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  java.util.Vector rv=new java.util.Vector(java.util.Arrays.asList((SageConstants.LITE && false) ? UserEvent.LITE_PRETTY_UENAMES : UserEvent.PRETTY_UENAMES));  rv.remove(0);  rv.remove(0);  rv.remove(rv.size() - 1);  return rv;}  }
class C{  private void startTask(){synchronized (lock) {    if (shutdown) {      throw new RejectedExecutionException("Executor already shutdown");    }    runningTasks++;  }}  }
class C{  @ObjectiveCName("onPhoneBookChanged") public void onPhoneBookChanged(){  if (modules.getContactsModule() != null) {    modules.getContactsModule().onPhoneBookChanged();  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.CONSTANT_DECLARATION___ANONYMOUS_CONSTANT_DECLARATION_11:    return getAnonymous_constantDeclaration_1_1();case UmplePackage.CONSTANT_DECLARATION___ANONYMOUS_CONSTANT_DECLARATION_21:  return getAnonymous_constantDeclaration_2_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void recordProcessingTime(EppMetric metric){  String eppStatusCode=metric.getStatus().isPresent() ? String.valueOf(metric.getStatus().get().code) : "";  processingTime.record(metric.getEndTimestamp().getMillis() - metric.getStartTimestamp().getMillis(),metric.getCommandName().or(""),metric.getClientId().or(""),eppStatusCode);}  }
class C{  public boolean isAttributesEmpty(){  return attributes.isEmpty();}  }
class C{  private void declareExtensions(){  new AclFeed().declareExtensions(extProfile);  new SiteFeed().declareExtensions(extProfile);  extProfile.setAutoExtending(true);  new ActivityFeed().declareExtensions(extProfile);  new AnnouncementEntry().declareExtensions(extProfile);  new AnnouncementsPageEntry().declareExtensions(extProfile);  new AttachmentEntry().declareExtensions(extProfile);  new CommentEntry().declareExtensions(extProfile);  new ContentFeed().declareExtensions(extProfile);  new CreationActivityEntry().declareExtensions(extProfile);  new DeletionActivityEntry().declareExtensions(extProfile);  new EditActivityEntry().declareExtensions(extProfile);  new FileCabinetPageEntry().declareExtensions(extProfile);  new ListItemEntry().declareExtensions(extProfile);  new ListPageEntry().declareExtensions(extProfile);  new MoveActivityEntry().declareExtensions(extProfile);  new RecoveryActivityEntry().declareExtensions(extProfile);  new RevisionFeed().declareExtensions(extProfile);  new WebAttachmentEntry().declareExtensions(extProfile);  new WebPageEntry().declareExtensions(extProfile);  BatchUtils.declareExtensions(extProfile);}  }
class C{  private void notifyMoney(final UserActionAttachment uaa){  sendNotification("You don't have enough money, you need " + uaa.getCostPU() + " PU's to perform this action");}  }
class C{  private Object addOrUpdateCollectionEntry(AtlasVertex instanceVertex,AttributeInfo attributeInfo,IDataType elementType,Object newAttributeValue,Object currentValue,String propertyName,Operation operation) throws AtlasException {switch (elementType.getTypeCategory()) {case PRIMITIVE:case ENUM:    return newAttributeValue != null ? newAttributeValue : null;case ARRAY:case MAP:case TRAIT:  return null;case STRUCT:case CLASS:final String edgeLabel=GraphHelper.EDGE_LABEL_PREFIX + propertyName;return addOrUpdateReference(instanceVertex,attributeInfo,elementType,newAttributeValue,(AtlasEdge)currentValue,edgeLabel,operation);default :throw new IllegalArgumentException("Unknown type category: " + elementType.getTypeCategory());}}  }
class C{  protected void initOtherResourceBundle(UIDefaults table){  table.addResourceBundle("org.jb2011.lnf.beautyeye.resources.beautyeye");}  }
class C{  public XML addAnnotatedClass(Class<?> aClass){  checksClassAbsence(aClass);  addClass(aClass);  return this;}  }
class C{  public SelectLatentsAction(GraphWorkbench workbench){  super("Highlight Latent Nodes");  if (workbench == null) {    throw new NullPointerException("Desktop must not be null.");  }  this.workbench=workbench;}  }
class C{  public void paintScrollBarBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBackground(context,g,x,y,w,h,orientation);}  }
class C{  public void replaceSteppables(Steppable[] steppables){  toReplace=(Steppable[])(steppables.clone());}  }
class C{  public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {  return encodeObject(serializableObject,NO_OPTIONS);}  }
class C{  private static String replaceComplex(String init){  StringBuilder builder=new StringBuilder(init);  Matcher m=altRegex.matcher(builder.toString());  while (m.find()) {    if (m.group().endsWith("?") && StringUtils.checkForm(m.group())) {      String core=m.group().substring(2,m.group().length() - 4);      if (m.end() < builder.length() && builder.charAt(m.end()) == ' ') {        String replace="(?:" + core.replaceAll("\\|"," \\|") + " )?";        builder=builder.replace(m.start(),m.end() + 1,replace);      } else       if (m.end() >= builder.length() && m.start() > 0 && builder.charAt(m.start() - 1) == ' ') {        String replace="(?: " + core.replaceAll("\\|","\\| ") + ")?";        builder=builder.replace(m.start() - 1,m.end(),replace);      } else {        builder=builder.replace(m.start(),m.end(),"(?:" + core + ")?");      }      m=altRegex.matcher(builder.toString());    } else     if (StringUtils.checkForm(m.group())) {      String core=m.group().substring(2,m.group(0).length() - 2);      builder=builder.replace(m.start(),m.end(),"(?:" + core + ")");      m=altRegex.matcher(builder.toString());    }  }  return builder.toString();}  }
class C{  public AttCertIssuer(GeneralNames names){  obj=names;  choiceObj=obj.toASN1Primitive();}  }
class C{  @Override public Object createStubbedMapComponentFromSerializableKeyInfo(Object keyInfo,AbstractSession session){  return keyInfo;}  }
class C{  private void redrawTable(final Table table,final boolean isSelected){  clean(table);  fillData(table,isSelected ? selection : items);}  }
class C{  @Override public void write(int oneByte) throws IOException {  byte[] buf=new byte[1];  buf[0]=(byte)oneByte;  this.write(buf);}  }
class C{  public void deleteAllDistributionPreferences(org.hibernate.Session hibSession){  deleteAllDistributionPreferences(hibSession,true);}  }
class C{  public static boolean shuffle(Object[] objArray){  if (objArray == null) {    return false;  }  return shuffle(objArray,getRandom(objArray.length));}  }
class C{  public IssuedIdentityToken clone(){  IssuedIdentityToken result=new IssuedIdentityToken();  result.PolicyId=PolicyId;  result.TokenData=TokenData;  result.EncryptionAlgorithm=EncryptionAlgorithm;  return result;}  }
class C{  private void addEntryToInfoList(Entry entry,List<EntryInfo> entryInfoList){  if (entryInfoList != null) {    String typeToAdd=entry.getType();    if (typeToAdd.equals(DbLogic.Constants.quotation)) {      typeToAdd=DbLogic.Constants.note;    }    entryInfoList.add(new EntryInfo(entry.getId(),entry.getNoteOrTitle(""),entry.getQuotation(""),entry.getIsPublic(),entry.hasFirstChildId(),entry.hasParentId(),typeToAdd));  }}  }
class C{  public boolean addRecipe(Recipe recipe){  if (recipe instanceof ShapedRecipe) {    shapedRecipes.add((ShapedRecipe)recipe);    return true;  } else   if (recipe instanceof ShapelessRecipe) {    shapelessRecipes.add((ShapelessRecipe)recipe);    return true;  } else   if (recipe instanceof DynamicRecipe) {    dynamicRecipes.add((DynamicRecipe)recipe);    return true;  } else   if (recipe instanceof FurnaceRecipe) {    furnaceRecipes.add((FurnaceRecipe)recipe);    return true;  } else {    return false;  }}  }
class C{  @Override public void notifyServerConflict(){  notifyConflict();}  }
class C{  public Index findIndex(Session session,String name){  Index index=indexes.get(name);  if (index == null) {    index=session.findLocalTempTableIndex(name);  }  return index;}  }
class C{  public static int aspectRatioNumerator(Size size){  Size aspectRatio=reduce(size);  return aspectRatio.width();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapsetnameditem.class,args);}  }
class C{  public static void calibrateNanosConversion(){  long originalMillis=System.currentTimeMillis();  long updatedMillis=originalMillis;  while (originalMillis == updatedMillis) {    updatedMillis=System.currentTimeMillis();  }  referenceNanos=System.nanoTime();  referenceMillis=updatedMillis;  secondsOffset=millisToSeconds(referenceMillis) - (double)referenceNanos / (double)NANOS_IN_SECOND;}  }
class C{  public void patch_splitMax(LinkedList<Patch> patches){  short patch_size=Match_MaxBits;  String precontext, postcontext;  Patch patch;  int start1, start2;  boolean empty;  Operation diff_type;  String diff_text;  ListIterator<Patch> pointer=patches.listIterator();  Patch bigpatch=pointer.hasNext() ? pointer.next() : null;  while (bigpatch != null) {    if (bigpatch.length1 <= Match_MaxBits) {      bigpatch=pointer.hasNext() ? pointer.next() : null;      continue;    }    pointer.remove();    start1=bigpatch.start1;    start2=bigpatch.start2;    precontext="";    while (!bigpatch.diffs.isEmpty()) {      patch=new Patch();      empty=true;      patch.start1=start1 - precontext.length();      patch.start2=start2 - precontext.length();      if (precontext.length() != 0) {        patch.length1=patch.length2=precontext.length();        patch.diffs.add(new Diff(Operation.EQUAL,precontext));      }      while (!bigpatch.diffs.isEmpty() && patch.length1 < patch_size - Patch_Margin) {        diff_type=bigpatch.diffs.getFirst().operation;        diff_text=bigpatch.diffs.getFirst().text;        if (diff_type == Operation.INSERT) {          patch.length2+=diff_text.length();          start2+=diff_text.length();          patch.diffs.addLast(bigpatch.diffs.removeFirst());          empty=false;        } else         if (diff_type == Operation.DELETE && patch.diffs.size() == 1 && patch.diffs.getFirst().operation == Operation.EQUAL && diff_text.length() > 2 * patch_size) {          patch.length1+=diff_text.length();          start1+=diff_text.length();          empty=false;          patch.diffs.add(new Diff(diff_type,diff_text));          bigpatch.diffs.removeFirst();        } else {          diff_text=diff_text.substring(0,Math.min(diff_text.length(),patch_size - patch.length1 - Patch_Margin));          patch.length1+=diff_text.length();          start1+=diff_text.length();          if (diff_type == Operation.EQUAL) {            patch.length2+=diff_text.length();            start2+=diff_text.length();          } else {            empty=false;          }          patch.diffs.add(new Diff(diff_type,diff_text));          if (diff_text.equals(bigpatch.diffs.getFirst().text)) {            bigpatch.diffs.removeFirst();          } else {            bigpatch.diffs.getFirst().text=bigpatch.diffs.getFirst().text.substring(diff_text.length());          }        }      }      precontext=diff_text2(patch.diffs);      precontext=precontext.substring(Math.max(0,precontext.length() - Patch_Margin));      if (diff_text1(bigpatch.diffs).length() > Patch_Margin) {        postcontext=diff_text1(bigpatch.diffs).substring(0,Patch_Margin);      } else {        postcontext=diff_text1(bigpatch.diffs);      }      if (postcontext.length() != 0) {        patch.length1+=postcontext.length();        patch.length2+=postcontext.length();        if (!patch.diffs.isEmpty() && patch.diffs.getLast().operation == Operation.EQUAL) {          patch.diffs.getLast().text+=postcontext;        } else {          patch.diffs.add(new Diff(Operation.EQUAL,postcontext));        }      }      if (!empty) {        pointer.add(patch);      }    }    bigpatch=pointer.hasNext() ? pointer.next() : null;  }}  }
class C{  public TipOfTheDayAction(KseFrame kseFrame){  super(kseFrame);  putValue(LONG_DESCRIPTION,res.getString("TipOfTheDayAction.statusbar"));  putValue(NAME,res.getString("TipOfTheDayAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("TipOfTheDayAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("TipOfTheDayAction.image")))));}  }
class C{  public boolean canWrite(){  return true;}  }
class C{  public static <T>T loadSpringBean(InputStream springXmlStream,String beanName) throws IgniteCheckedException {  A.notNull(springXmlStream,"springXmlPath");  A.notNull(beanName,"beanName");  IgniteSpringHelper spring=SPRING.create(false);  return spring.loadBean(springXmlStream,beanName);}  }
class C{  public void printUsage(PrintWriter pw,int width,String app,Options options){  StringBuffer buff=new StringBuffer(defaultSyntaxPrefix).append(app).append(" ");  final Collection processedGroups=new ArrayList();  Option option;  List optList=new ArrayList(options.getOptions());  Collections.sort(optList,getOptionComparator());  for (Iterator i=optList.iterator(); i.hasNext(); ) {    option=(Option)i.next();    OptionGroup group=options.getOptionGroup(option);    if (group != null) {      if (!processedGroups.contains(group)) {        processedGroups.add(group);        appendOptionGroup(buff,group);      }    } else {      appendOption(buff,option,option.isRequired());    }    if (i.hasNext()) {      buff.append(" ");    }  }  printWrapped(pw,width,buff.toString().indexOf(' ') + 1,buff.toString());}  }
class C{  public double squaredDistance(IntVector v){  double deltaX=v.x - x, deltaY=v.y - y, deltaZ=v.z - z;  return deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public static Headers of(String... namesAndValues){  if (namesAndValues == null || namesAndValues.length % 2 != 0) {    throw new IllegalArgumentException("Expected alternating header names and values");  }  namesAndValues=namesAndValues.clone();  for (int i=0; i < namesAndValues.length; i++) {    if (namesAndValues[i] == null)     throw new IllegalArgumentException("Headers cannot be null");    namesAndValues[i]=namesAndValues[i].trim();  }  for (int i=0; i < namesAndValues.length; i+=2) {    String name=namesAndValues[i];    String value=namesAndValues[i + 1];    if (name.length() == 0 || name.indexOf('\0') != -1 || value.indexOf('\0') != -1) {      throw new IllegalArgumentException("Unexpected header: " + name + ": "+ value);    }  }  return new Headers(namesAndValues);}  }
class C{  public boolean isLocal(){  return VPlexApiConstants.LOCAL_VIRTUAL_VOLUME.equals(getLocality());}  }
class C{  public void testColumnMetaData() throws Exception {  String sql="CREATE TABLE jTDSTYPETEST (ti tinyint not null, si smallint, i int, bi bigint, " + " f float, r real, d decimal(28,10), n numeric(28,10), sm smallmoney, m money, " + "c char(10) not null, vc varchar(255), nc nchar(10) not null, nvc nvarchar(255), "+ " txt text, ntxt ntext, b binary(8) not null, vb varbinary(8), img image, "+ " dt datetime, sdt smalldatetime, bt bit not null, ts timestamp, sn sysname, "+ " ui uniqueidentifier, sv sql_variant)";  String sql7="CREATE TABLE jTDSTYPETEST (ti tinyint not null, si smallint, i int, " + " f float, r real, d decimal(28,10), n numeric(28,10), sm smallmoney, m money, " + "c char(10) not null, vc varchar(255), nc nchar(10) not null, nvc nvarchar(255), "+ " txt text, ntxt ntext, b binary(8) not null, vb varbinary(8), img image, "+ " dt datetime, sdt smalldatetime, bt bit not null, ts timestamp, sn sysname, "+ " ui uniqueidentifier)";  String sql65="CREATE TABLE jTDSTYPETEST (ti tinyint not null, si smallint, i int, " + " f float, r real, d decimal(28,10), n numeric(28,10), sm smallmoney, m money, " + "c char(10) not null, vc varchar(255), "+ " txt text, b binary(8) not null, vb varbinary(8), img image, "+ " dt datetime, sdt smalldatetime, bt bit not null, ts timestamp, sn sysname)";  String sql125="CREATE TABLE jTDSTYPETEST (ti tinyint not null, si smallint, i int, " + " f float, r real, d decimal(28,10), n numeric(28,10), sm smallmoney, m money, " + "c char(10) not null, vc varchar(255), nc nchar(10) not null, nvc nvarchar(255), "+ " txt text, b binary(8) not null, vb varbinary(8), img image, "+ " dt datetime, sdt smalldatetime, bt bit not null, ts timestamp, sn sysname, "+ " uc unichar(10), vuc univarchar(255), sydt date, syt time)";  try {    dropTable("jTDSTYPETEST");    Statement stmt=con.createStatement();    DatabaseMetaData dbmd=con.getMetaData();    if (dbmd.getDatabaseProductName().startsWith("Microsoft")) {      if (dbmd.getDatabaseProductVersion().startsWith("6.5"))       stmt.execute(sql65); else       if (dbmd.getDatabaseProductVersion().startsWith("7"))       stmt.execute(sql7); else       stmt.execute(sql);    } else {      if (dbmd.getDatabaseProductVersion().startsWith("12"))       stmt.execute(sql125); else       stmt.execute(sql65);    }    ResultSetMetaData rsmd=stmt.executeQuery("SELECT * FROM jTDSTYPETEST").getMetaData();    ResultSet rs=dbmd.getColumns(null,null,"jTDSTYPETEST","%");    while (rs.next()) {      String cn=rs.getString("COLUMN_NAME");      int ord=rs.getInt("ORDINAL_POSITION");      Assert.assertEquals(cn + " typename",rs.getString("TYPE_NAME"),rsmd.getColumnTypeName(ord));      Assert.assertEquals(cn + " datatype",rs.getInt("DATA_TYPE"),rsmd.getColumnType(ord));      if (rs.getInt("DATA_TYPE") != Types.REAL && rs.getInt("DATA_TYPE") != Types.DOUBLE) {        Assert.assertEquals(cn + " precision",rs.getInt("COLUMN_SIZE"),rsmd.getPrecision(ord));      }      Assert.assertEquals(cn + " scale",rs.getInt("DECIMAL_DIGITS"),rsmd.getScale(ord));      Assert.assertEquals(cn + " nullable",rs.getInt("NULLABLE"),rsmd.isNullable(ord));    }  }  finally {    dropTable("jTDSTYPETEST");  }}  }
class C{  private void checkDepartureForStaging(int percent) throws BuildFailedException {  if (percent != 100 || _departStageTrack == null) {    return;  }  int carCount=0;  StringBuffer buf=new StringBuffer();  for (  Car car : _carList) {    if (car.getTrack() == _departStageTrack && (car.getDestination() == null || car.getDestinationTrack() == null || car.getTrain() == null)) {      if (car.getKernel() != null) {        for (        Car c : car.getKernel().getCars()) {          carCount++;          addCarToBuf(c,buf,carCount);        }      } else {        carCount++;        addCarToBuf(car,buf,carCount);      }    }  }  if (carCount > 0) {    log.debug("{} cars stuck in staging",carCount);    String msg=MessageFormat.format(Bundle.getMessage("buildStagingCouldNotFindDest"),new Object[]{carCount,_departStageTrack.getLocation().getName(),_departStageTrack.getName()});    throw new BuildFailedException(msg + buf.toString(),BuildFailedException.STAGING);  }}  }
class C{  public void faceEntity(Entity entity,float p_70625_2_,float p_70625_3_){  double d0=entity.posX - this.posX;  double d2=entity.posZ - this.posZ;  double d1;  if (entity instanceof EntityLivingBase) {    EntityLivingBase entitylivingbase=(EntityLivingBase)entity;    d1=entitylivingbase.posY + (double)entitylivingbase.getEyeHeight() - (this.posY + (double)this.getEyeHeight());  } else {    d1=(entity.boundingBox.minY + entity.boundingBox.maxY) / 2.0D - (this.posY + (double)this.getEyeHeight());  }  double d3=(double)MathHelper.sqrt_double(d0 * d0 + d2 * d2);  float f2=(float)(Math.atan2(d2,d0) * 180.0D / Math.PI) - 90.0F;  float f3=(float)(-(Math.atan2(d1,d3) * 180.0D / Math.PI));  this.rotationPitch=this.updateRotation(this.rotationPitch,f3,p_70625_3_);  this.rotationYaw=this.updateRotation(this.rotationYaw,f2,p_70625_2_);}  }
class C{  public static String extractDuplexGroupName(LocoNetMessage m){switch (getDuplexGroupIdentityMessageType(m)) {case DUPLEX_GROUP_NAME_ETC_REPORT_MESSAGE:case DUPLEX_GROUP_NAME_WRITE_MESSAGE:    return extractGroupName(m);default :  return null;}}  }
class C{  public static void createEntriesK1andK2(){  try {    Region r1=cache.getRegion(Region.SEPARATOR + REGION_NAME);    assertNotNull(r1);    if (!r1.containsKey("key1")) {      r1.create("key1","key-1");    }    if (!r1.containsKey("key2")) {      r1.create("key2","key-2");    }    assertEquals(r1.getEntry("key1").getValue(),"key-1");    assertEquals(r1.getEntry("key2").getValue(),"key-2");  } catch (  Exception ex) {    Assert.fail("failed while createEntriesK1andK2()",ex);  }}  }
class C{  public static void write(String filepath,Properties theProperties,String propComments) throws IOException {  BufferedOutputStream bos=null;  try {    File file=new File(filepath);    bos=new BufferedOutputStream(new FileOutputStream(file));    theProperties.store(bos,propComments);  }  finally {    if (bos != null) {      bos.close();      bos=null;    }  }}  }
class C{  public void fireNeuronTypeChanged(final NeuronUpdateRule old,final NeuronUpdateRule changed){  for (  NeuronListener listener : neuronListeners) {    listener.neuronTypeChanged(new NetworkEvent<NeuronUpdateRule>(this,old,changed));  }}  }
class C{  protected static void validateConfigurationHierarchy(final Configuration c){  Map<String,Integer> hierarchyMap=new HashMap<>();  Set<String> multipleHierarchies=new HashSet<>();  for (  Configuration subConfig : c.getSubConfigurations()) {    String hierarchy=subConfig.getHierarchy();    if (!hierarchyMap.containsKey(hierarchy)) {      hierarchyMap.put(hierarchy,1);    } else {      int count=hierarchyMap.get(hierarchy);      hierarchyMap.put(hierarchy,++count);      multipleHierarchies.add(hierarchy);    }  }  if (multipleHierarchies.size() > 0) {    StringBuilder msg=new StringBuilder();    msg.append("Configuration for ").append(c.getHierarchy()).append(" contains  multiple SubConfigurations with the same hierarchy id. ");    for (    String hierarchy : multipleHierarchies) {      msg.append(hierarchy).append(" ").append(hierarchyMap.get(hierarchy).toString()).append(" times ");    }    throw new IllegalArgumentException(msg.toString().trim());  }  for (  Configuration subConfig : c.getSubConfigurations()) {    validateConfigurationHierarchy(subConfig);  }}  }
class C{  public Matrix3f scaling(float x,float y,float z){  m00=x;  m01=0.0f;  m02=0.0f;  m10=0.0f;  m11=y;  m12=0.0f;  m20=0.0f;  m21=0.0f;  m22=z;  return this;}  }
class C{  public void java_lang_System_initProperties(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  ReferenceVariable sysProps=helper.staticField("java.lang.System","props");  helper.assign(returnVar,sysProps);  helper.assign(sysProps,params[0]);}  }
class C{  public InvoiceHistory(Dialog frame,int C_BPartner_ID,int M_Product_ID,int M_Warehouse_ID,int M_AttributeSetInstance_ID){  super(frame,Msg.getMsg(Env.getCtx(),"PriceHistory"),true);  log.config("C_BPartner_ID=" + C_BPartner_ID + ", M_Product_ID="+ M_Product_ID+ ", M_Warehouse_ID="+ M_Warehouse_ID+ ", M_AttributeSetInstance_ID="+ M_AttributeSetInstance_ID);  m_C_BPartner_ID=C_BPartner_ID;  m_M_Product_ID=M_Product_ID;  m_M_Warehouse_ID=M_Warehouse_ID;  m_M_AttributeSetInstance_ID=M_AttributeSetInstance_ID;  try {    jbInit();    dynInit();  } catch (  Exception ex) {    log.log(Level.SEVERE,"",ex);  }  mainPanel.setPreferredSize(new Dimension(700,400));  AEnv.positionCenterWindow(frame,this);}  }
class C{  public void update(){  super.fireContentsChanged(this,0,data.size() - 1);}  }
class C{  public boolean isExpanded(TreePath path){  if (path != null) {    FHTreeStateNode lastNode=getNodeForPath(path,true,false);    return (lastNode != null && lastNode.isExpanded());  }  return false;}  }
class C{  private void removeNode(final NaviNode node){  if (node.getRawNode() instanceof INaviGroupNode) {    ((INaviGroupNode)node.getRawNode()).removeGroupListener(m_groupNodeListener);  }  m_selectedNodes.remove(node);  m_graphInternals.removeNode(node);  m_graph.updateViews();}  }
class C{  public void forceSnapGravity(int sSnapGravity){  refreshScreenSize();  if (sSnapGravity == 0) {    MovableWindow.unsnap();    return;  }  mSnapWindowHolder.updateSnap(sSnapGravity);  calculateSnap();  finishSnap(true);}  }
class C{  public void startSwitch(String filename,int uploadId){synchronized (switchLock) {    if (!switching && !new File(filename).equals(currentFile)) {      switchFilename=filename;      switchUploadId=uploadId;      switchData=0;      switching=true;      doSwitch();    }  }}  }
class C{  public int parseOptions(String[] args,int i){  for (int size=args.length; i < size; i++) {    if (args[i].equals("-suppressDeclaration")) {      setSuppressDeclaration(true);    } else     if (args[i].equals("-omitEncoding")) {      setOmitEncoding(true);    } else     if (args[i].equals("-indent")) {      setIndent(args[++i]);    } else     if (args[i].equals("-indentSize")) {      setIndentSize(Integer.parseInt(args[++i]));    } else     if (args[i].startsWith("-expandEmpty")) {      setExpandEmptyElements(true);    } else     if (args[i].equals("-encoding")) {      setEncoding(args[++i]);    } else     if (args[i].equals("-newlines")) {      setNewlines(true);    } else     if (args[i].equals("-lineSeparator")) {      setLineSeparator(args[++i]);    } else     if (args[i].equals("-trimText")) {      setTrimText(true);    } else     if (args[i].equals("-padText")) {      setPadText(true);    } else     if (args[i].startsWith("-xhtml")) {      setXHTML(true);    } else {      return i;    }  }  return i;}  }
class C{  public synchronized void disableExclusiveProcessing(String controllerId,String instanceId,PropertyHandler paramHandler) throws APPlatformException {  logger.debug("disableExclusiveProcessing('{}')",instanceId);  platformService.unlockServiceInstance(controllerId,instanceId,paramHandler.getTPAuthentication());}  }
class C{  @Override public boolean equals(final Object o){  if (this == o) {    return true;  }  if (!(o instanceof Type)) {    return false;  }  Type t=(Type)o;  if (sort != t.sort) {    return false;  }  if (sort >= ARRAY) {    if (len != t.len) {      return false;    }    for (int i=off, j=t.off, end=i + len; i < end; i++, j++) {      if (buf[i] != t.buf[j]) {        return false;      }    }  }  return true;}  }
class C{  public static BigdataSailRepository open(final String journalFile){  return open(getProperties(journalFile));}  }
class C{  private void addSelfIntersectionNode(int argIndex,Coordinate coord,int loc){  if (isBoundaryNode(argIndex,coord))   return;  if (loc == Location.BOUNDARY && useBoundaryDeterminationRule)   insertBoundaryPoint(argIndex,coord); else   insertPoint(argIndex,coord,loc);}  }
class C{  public CompiledScript compileInternal(Script script,HasContextAndHeaders context){  if (script == null) {    throw new IllegalArgumentException("The parameter script (Script) must not be null.");  }  String lang=script.getLang() == null ? defaultLang : script.getLang();  ScriptType type=script.getType();  String name=script.getScript();  if (logger.isTraceEnabled()) {    logger.trace("Compiling lang: [{}] type: [{}] script: {}",lang,type,name);  }  ScriptEngineService scriptEngineService=getScriptEngineServiceForLang(lang);  if (type == ScriptType.FILE) {    String cacheKey=getCacheKey(scriptEngineService,name,null);    CompiledScript compiledScript=staticCache.get(cacheKey);    if (compiledScript == null) {      throw new IllegalArgumentException("Unable to find on disk file script [" + name + "] using lang ["+ lang+ "]");    }    return compiledScript;  }  String code=script.getScript();  if (type == ScriptType.INDEXED) {    final IndexedScript indexedScript=new IndexedScript(lang,name);    name=indexedScript.id;    code=getScriptFromIndex(indexedScript.lang,indexedScript.id,context);  }  String cacheKey=getCacheKey(scriptEngineService,type == ScriptType.INLINE ? null : name,code);  CompiledScript compiledScript=cache.getIfPresent(cacheKey);  if (compiledScript == null) {    try {      compiledScript=new CompiledScript(type,name,lang,scriptEngineService.compile(code));    } catch (    Exception exception) {      throw new ScriptException("Failed to compile " + type + " script ["+ name+ "] using lang ["+ lang+ "]",exception);    }    scriptMetrics.onCompilation();    cache.put(cacheKey,compiledScript);  }  return compiledScript;}  }
class C{  public FullSyncRequestMessage(FullSyncRequestMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }}  }
class C{  public boolean intersects(Rectangle2D r){  Rectangle2D b=getBounds();  if (b != null) {    return (b.intersects(r) && paintedArea != null && paintedArea.intersects(r));  }  return false;}  }
class C{  @Override public float estimateCost(Rule rule){  float lmEstimate=0.0f;  boolean considerIncompleteNgrams=true;  int[] enWords=getRuleIds(rule);  List<Integer> words=new ArrayList<>();  boolean skipStart=(enWords[0] == startSymbolId);  for (  int currentWord : enWords) {    if (FormatUtils.isNonterminal(currentWord)) {      lmEstimate+=scoreChunkLogP(words,considerIncompleteNgrams,skipStart);      words.clear();      skipStart=false;    } else {      words.add(currentWord);    }  }  lmEstimate+=scoreChunkLogP(words,considerIncompleteNgrams,skipStart);  final float oovEstimate=(withOovFeature) ? getOovs(enWords) : 0f;  return weight * lmEstimate + oovWeight * oovEstimate;}  }
class C{  public JimpleLocal(String name,Type t){  this.name=name;  this.type=t;  Scene.v().getLocalNumberer().add(this);}  }
class C{  public static boolean testAabSphere(Vector3fc min,Vector3fc max,Vector3fc center,float radiusSquared){  return testAabSphere(min.x(),min.y(),min.z(),max.x(),max.y(),max.z(),center.x(),center.y(),center.z(),radiusSquared);}  }
class C{  @LargeTest public void testNavigationByHeading() throws Exception {  sExecutedTestCount++;  String html="<!DOCTYPE html>" + "<html>" + "<head>"+ "</head>"+ "<body>"+ "<h1>Heading one</h1>"+ "<p>"+ "This is some text"+ "</p>"+ "<h2>Heading two</h2>"+ "<p>"+ "This is some text"+ "</p>"+ "<h3>Heading three</h3>"+ "<p>"+ "This is some text"+ "</p>"+ "<h4>Heading four</h4>"+ "<p>"+ "This is some text"+ "</p>"+ "<h5>Heading five</h5>"+ "<p>"+ "This is some text"+ "</p>"+ "<h6>Heading six</h6>"+ "</body>"+ "</html>";  WebView webView=loadHTML(html);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_RIGHT,META_STATE_ALT_LEFT_ON);  assertSelectionString("3");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<h1>Heading one</h1>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<h2>Heading two</h2>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<h3>Heading three</h3>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<h4>Heading four</h4>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<h5>Heading five</h5>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<h6>Heading six</h6>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString(null);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("<h5>Heading five</h5>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("<h4>Heading four</h4>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("<h3>Heading three</h3>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("<h2>Heading two</h2>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("<h1>Heading one</h1>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString(null);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<h2>Heading two</h2>");}  }
class C{  public IndexInvalidException(String msg,Throwable cause){  super(msg);  initCause(cause);}  }
class C{  Optional<String> hostname(){  return Optional.ofNullable(hostname);}  }
class C{  public void add(NamedRangeSet other){  List<NamedRange> newRanges=new ArrayList<NamedRange>();  int thisPos=0;  int otherPos=0;  while (thisPos < ranges.size() || otherPos < other.ranges.size()) {    NamedRange toAdd;    if (thisPos < ranges.size() && (otherPos >= other.ranges.size() || ranges.get(thisPos).start <= other.ranges.get(otherPos).start)) {      toAdd=ranges.get(thisPos++);    } else {      toAdd=other.ranges.get(otherPos++);    }    if (newRanges.isEmpty() || toAdd.start > newRanges.get(newRanges.size() - 1).end + 1) {      newRanges.add(new NamedRange(toAdd.start,toAdd.end,toAdd.name));    } else {      newRanges.get(newRanges.size() - 1).end=toAdd.end;    }  }  this.ranges=newRanges;}  }
class C{  public static double deviation(double[] x){  double deviation=0;  double mean=mean(x);  for (  double e : x) {    deviation+=Math.pow(e - mean,2);  }  return Math.sqrt(deviation / (x.length - 1));}  }
class C{  public int read(byte b[],int off,int len) throws IOException {  if (len == 0)   return 0;  if (in == null)   in=owner.readNotify();  return in.read(b,off,len);}  }
class C{  public static void extract(AzExecMessage message) throws Exception {  List<LineageRecord> result=extractLineage(message);  for (  LineageRecord lr : result) {    message.databaseWriter.append(lr);  }  logger.debug("Find " + result.size() + " Lineage record in execution "+ message.toString());  message.databaseWriter.flush();}  }
class C{  public CalibratedGyroscopeProvider(SensorManager sensorManager){  super(sensorManager);  sensorList.add(sensorManager.getDefaultSensor(Sensor.TYPE_GYROSCOPE));}  }
class C{  public static JPopupMenu leftShift(JPopupMenu self,String str){  self.add(str);  return self;}  }
class C{  public String toString(){  final String TAB=" ";  StringBuffer retValue=new StringBuffer();  retValue.append("HeaderCriterion ( ").append("headerName = ").append(this.headerName).append(TAB).append("operator = ").append(this.operator).append(TAB).append(" )");  return retValue.toString();}  }
class C{  public boolean baseIsLeftToRight(){  return bidiBase.baseIsLeftToRight();}  }
class C{  private Instances cleanseCross(Instances data) throws Exception {  Instance inst;  Instances crossSet=new Instances(data);  Instances temp=new Instances(data,data.numInstances());  Instances inverseSet=new Instances(data,data.numInstances());  int count=0;  double ans;  int iterations=0;  int classIndex=m_classIndex;  if (classIndex < 0) {    classIndex=data.classIndex();  }  if (classIndex < 0) {    classIndex=data.numAttributes() - 1;  }  while (count != crossSet.numInstances() && crossSet.numInstances() >= m_numOfCrossValidationFolds) {    count=crossSet.numInstances();    iterations++;    if (m_numOfCleansingIterations > 0 && iterations > m_numOfCleansingIterations) {      break;    }    crossSet.setClassIndex(classIndex);    if (crossSet.classAttribute().isNominal()) {      crossSet.stratify(m_numOfCrossValidationFolds);    }    temp=new Instances(crossSet,crossSet.numInstances());    for (int fold=0; fold < m_numOfCrossValidationFolds; fold++) {      Instances train=crossSet.trainCV(m_numOfCrossValidationFolds,fold);      m_cleansingClassifier.buildClassifier(train);      Instances test=crossSet.testCV(m_numOfCrossValidationFolds,fold);      for (int i=0; i < test.numInstances(); i++) {        inst=test.instance(i);        ans=m_cleansingClassifier.classifyInstance(inst);        if (crossSet.classAttribute().isNumeric()) {          if (ans >= inst.classValue() - m_numericClassifyThreshold && ans <= inst.classValue() + m_numericClassifyThreshold) {            temp.add(inst);          } else           if (m_invertMatching) {            inverseSet.add(inst);          }        } else {          if (ans == inst.classValue()) {            temp.add(inst);          } else           if (m_invertMatching) {            inverseSet.add(inst);          }        }      }    }    crossSet=temp;  }  if (m_invertMatching) {    inverseSet.setClassIndex(data.classIndex());    return inverseSet;  } else {    crossSet.setClassIndex(data.classIndex());    return crossSet;  }}  }
class C{  protected Node deepCopyInto(Node n){  super.deepCopyInto(n);  AbstractElementNS ae=(AbstractElementNS)n;  ae.namespaceURI=namespaceURI;  return n;}  }
class C{  public static org.oscm.vo.VOEventDefinition convertToApi(org.oscm.internal.vo.VOEventDefinition oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOEventDefinition newVO=new org.oscm.vo.VOEventDefinition();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setEventType(EnumConverter.convert(oldVO.getEventType(),org.oscm.types.enumtypes.EventType.class));  newVO.setEventId(oldVO.getEventId());  newVO.setEventDescription(oldVO.getEventDescription());  return newVO;}  }
class C{  @Override public boolean contains(Point2D.Double p){  return getBounds().contains(p);}  }
class C{  @Override protected void onDraw(Canvas canvas){  super.onDraw(canvas);  drawDarkenSurroundingArea(canvas);  drawCircleBorder(canvas);  if (mHandleMode == HANDLE_DOWN || mHandleMode == HANDLE_MOVE) {    if (mDragDirection == SIDE) {      drawHandles(canvas);    }    if (mHasGuideLine && (mDragDirection == SIDE || mDragDirection == CENTER)) {      drawGuideLine(canvas);    }  }}  }
class C{  public QueryFirstRequest clone(){  QueryFirstRequest result=new QueryFirstRequest();  result.RequestHeader=RequestHeader == null ? null : RequestHeader.clone();  result.View=View == null ? null : View.clone();  if (NodeTypes != null) {    result.NodeTypes=new NodeTypeDescription[NodeTypes.length];    for (int i=0; i < NodeTypes.length; i++)     result.NodeTypes[i]=NodeTypes[i].clone();  }  result.Filter=Filter == null ? null : Filter.clone();  result.MaxDataSetsToReturn=MaxDataSetsToReturn;  result.MaxReferencesToReturn=MaxReferencesToReturn;  return result;}  }
class C{  private EditReviewHolder editReview(boolean scroll){  ListView list=getListView();  View view=a.getLayoutInflater().inflate(R.layout.reviews_edit,list,false);  EditReviewHolder r=ViewHolder.get(view,EditReviewHolder.class);  r.mTitle.setText(mReviewId == 0 ? R.string.add_review_title : R.string.edit_review_title);  r.mRatings.setAdapter(ArrayAdapter.createFromResource(a,R.array.ratings,R.layout.rating));  r.mRatings.setSelection(mRatingPos >= 0 ? mRatingPos : DEFAULT_RATING_POS);  r.mComments.setText(mComments);  list.addHeaderView(view);  ((BaseAdapter)getListAdapter()).notifyDataSetChanged();  if (scroll) {    list.smoothScrollToPositionFromTop(1,Themes.getActionBarSize(a) * 2 + mDividerHeight);    r.mComments.requestFocus();    if (a instanceof RestaurantActivity && ((RestaurantActivity)a).getCurrentTabFragment() == this) {      InputMethods.show(r.mComments);    }  }  mEditing=true;  a.invalidateOptionsMenu();  return r;}  }
class C{  public GroovyClassLoader(GroovyClassLoader parent){  this(parent,parent.config,false);}  }
class C{  public RecognizeOptions build(){  return new RecognizeOptions(this);}  }
class C{  public void testBug41448() throws Exception {  createTable("testBug41448","(pk INT PRIMARY KEY AUTO_INCREMENT, field1 VARCHAR(4))");  this.stmt.executeUpdate("INSERT INTO testBug41448 (field1) VALUES ('abc')",Statement.RETURN_GENERATED_KEYS);  this.stmt.getGeneratedKeys();  this.stmt.executeUpdate("INSERT INTO testBug41448 (field1) VALUES ('def')",new int[]{1});  this.stmt.getGeneratedKeys();  this.stmt.executeUpdate("INSERT INTO testBug41448 (field1) VALUES ('ghi')",new String[]{"pk"});  this.stmt.getGeneratedKeys();  this.stmt.executeUpdate("INSERT INTO testBug41448 (field1) VALUES ('ghi')");  try {    this.stmt.getGeneratedKeys();    fail("Expected a SQLException here");  } catch (  SQLException sqlEx) {  }  this.stmt.execute("INSERT INTO testBug41448 (field1) VALUES ('jkl')",Statement.RETURN_GENERATED_KEYS);  this.stmt.getGeneratedKeys();  this.stmt.execute("INSERT INTO testBug41448 (field1) VALUES ('mno')",new int[]{1});  this.stmt.getGeneratedKeys();  this.stmt.execute("INSERT INTO testBug41448 (field1) VALUES ('pqr')",new String[]{"pk"});  this.stmt.getGeneratedKeys();  this.stmt.execute("INSERT INTO testBug41448 (field1) VALUES ('stu')");  try {    this.stmt.getGeneratedKeys();    fail("Expected a SQLException here");  } catch (  SQLException sqlEx) {  }  this.pstmt=this.conn.prepareStatement("INSERT INTO testBug41448 (field1) VALUES (?)",Statement.RETURN_GENERATED_KEYS);  this.pstmt.setString(1,"abc");  this.pstmt.executeUpdate();  this.pstmt.getGeneratedKeys();  this.pstmt.execute();  this.pstmt.getGeneratedKeys();  this.pstmt=this.conn.prepareStatement("INSERT INTO testBug41448 (field1) VALUES (?)",new int[]{1});  this.pstmt.setString(1,"abc");  this.pstmt.executeUpdate();  this.pstmt.getGeneratedKeys();  this.pstmt.execute();  this.pstmt.getGeneratedKeys();  this.pstmt=this.conn.prepareStatement("INSERT INTO testBug41448 (field1) VALUES (?)",new String[]{"pk"});  this.pstmt.setString(1,"abc");  this.pstmt.executeUpdate();  this.pstmt.getGeneratedKeys();  this.pstmt.execute();  this.pstmt.getGeneratedKeys();  this.pstmt=this.conn.prepareStatement("INSERT INTO testBug41448 (field1) VALUES (?)");  this.pstmt.setString(1,"abc");  this.pstmt.executeUpdate();  try {    this.pstmt.getGeneratedKeys();    fail("Expected a SQLException here");  } catch (  SQLException sqlEx) {  }  this.pstmt.execute();  try {    this.pstmt.getGeneratedKeys();    fail("Expected a SQLException here");  } catch (  SQLException sqlEx) {  }}  }
class C{  @Override public boolean equals(Object object){  if (!(object instanceof HttpMessage)) {    return false;  }  HttpMessage msg=(HttpMessage)object;  boolean result=false;  if (!this.getRequestHeader().getMethod().equalsIgnoreCase(msg.getRequestHeader().getMethod())) {    return false;  }  URI uri1=this.getRequestHeader().getURI();  URI uri2=msg.getRequestHeader().getURI();  if (uri1 == null) {    if (uri2 != null) {      return false;    }    return true;  } else   if (uri2 == null) {    return false;  }  try {    if (uri1.getHost() == null || uri2.getHost() == null || !uri1.getHost().equalsIgnoreCase(uri2.getHost())) {      return false;    }    if (uri1.getPort() != uri2.getPort()) {      return false;    }    String pathQuery1=uri1.getPathQuery();    String pathQuery2=uri2.getPathQuery();    if (pathQuery1 == null && pathQuery2 == null) {      return true;    } else     if (pathQuery1 != null && pathQuery2 != null) {      return pathQuery1.equalsIgnoreCase(pathQuery2);    } else     if (pathQuery1 == null || pathQuery2 == null) {      return false;    }    if (this.getRequestHeader().getMethod().equalsIgnoreCase(HttpRequestHeader.POST)) {      return this.getRequestBody().equals(msg.getRequestBody());    }    result=true;  } catch (  URIException e) {    try {      result=this.getRequestHeader().getURI().toString().equalsIgnoreCase(msg.getRequestHeader().getURI().toString());    } catch (    Exception e1) {      log.error(e.getMessage(),e);    }  }  return result;}  }
class C{  public boolean isIdle(){  return deltaQueue.isEmpty() || deltaQueue.delay() > 0;}  }
class C{  public static java.lang.String toString(int i){  return null;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case RegularExpressionPackage.REGULAR_EXPRESSION_BODY__PATTERN:    return basicSetPattern(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private void tryClaimAnt(){  try {    antInterface.requestForceClaimInterface(context.getString(R.string.my_tracks_app_name));  } catch (  AntInterfaceException e) {    handleAntError();  }}  }
class C{  private static void checkDebug(){  try {    if (Boolean.getBoolean("gfAgentDebug")) {      mx4j.log.Log.setDefaultPriority(mx4j.log.Logger.TRACE);    }  } catch (  VirtualMachineError err) {    SystemFailure.initiateFailure(err);    throw err;  }catch (  Throwable t) {    SystemFailure.checkFailure();  }}  }
class C{  public SequencesReader single(){  assert !mIsPaired;  return mSingle;}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  @Override protected boolean playVideoItem(){  if (super.playVideoItem()) {    updateVideoControls();    return true;  }  return false;}  }
class C{  public final Mono<T> otherwiseReturn(final T fallback){  return otherwise(null);}  }
class C{  static Register findOrCreateRegister(Object heapType,int v1,int v2,HashMap<UseRecord,Register> registers,GenericRegisterPool pool,TypeReference type){  UseRecord key=new UseRecord(heapType,v1,v2);  Register result=registers.get(key);  if (result == null) {    result=pool.makeTemp(type).getRegister();    registers.put(key,result);  }  return result;}  }
class C{  private void readObject(ObjectInputStream in) throws ClassNotFoundException, IOException {  in.defaultReadObject();  setBeforeCaretText(this.beforeCaret);  setAfterCaretText(this.afterCaret);}  }
class C{  @Override public boolean load(URL url,boolean registerDeferred) throws JmriConfigureXmlException {  if (javax.swing.SwingUtilities.isEventDispatchThread()) {    return loadOnSwingThread(url,registerDeferred);  } else {    final java.util.concurrent.atomic.AtomicReference<Boolean> result=new java.util.concurrent.atomic.AtomicReference<>();    try {      javax.swing.SwingUtilities.invokeAndWait(null);    } catch (    InterruptedException e) {      throw new JmriConfigureXmlException(e);    }catch (    java.lang.reflect.InvocationTargetException e) {      throw new JmriConfigureXmlException(e);    }    return result.get();  }}  }
class C{  public static BigDecimal calculateAveragePO(MProduct product,int M_AttributeSetInstance_ID,MAcctSchema as,int AD_Org_ID){  String sql="SELECT t.MovementQty, mp.Qty, ol.QtyOrdered, ol.PriceCost, ol.PriceActual," + " o.C_Currency_ID, o.DateAcct, o.C_ConversionType_ID," + " o.AD_Client_ID, o.AD_Org_ID, t.M_Transaction_ID "+ "FROM M_Transaction t"+ " INNER JOIN M_MatchPO mp ON (t.M_InOutLine_ID=mp.M_InOutLine_ID)"+ " INNER JOIN C_OrderLine ol ON (mp.C_OrderLine_ID=ol.C_OrderLine_ID)"+ " INNER JOIN C_Order o ON (ol.C_Order_ID=o.C_Order_ID) "+ "WHERE t.M_Product_ID=?";  if (AD_Org_ID != 0)   sql+=" AND t.AD_Org_ID=?"; else   if (M_AttributeSetInstance_ID != 0)   sql+=" AND t.M_AttributeSetInstance_ID=?";  sql+=" ORDER BY t.M_Transaction_ID";  PreparedStatement pstmt=null;  ResultSet rs=null;  BigDecimal newStockQty=Env.ZERO;  BigDecimal newAverageAmt=Env.ZERO;  int oldTransaction_ID=0;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,product.getM_Product_ID());    if (AD_Org_ID != 0)     pstmt.setInt(2,AD_Org_ID); else     if (M_AttributeSetInstance_ID != 0)     pstmt.setInt(2,M_AttributeSetInstance_ID);    rs=pstmt.executeQuery();    while (rs.next()) {      BigDecimal oldStockQty=newStockQty;      BigDecimal movementQty=rs.getBigDecimal(1);      int M_Transaction_ID=rs.getInt(11);      if (M_Transaction_ID != oldTransaction_ID)       newStockQty=oldStockQty.add(movementQty);      M_Transaction_ID=oldTransaction_ID;      BigDecimal matchQty=rs.getBigDecimal(2);      if (matchQty == null) {        s_log.finer("Movement=" + movementQty + ", StockQty="+ newStockQty);        continue;      }      BigDecimal price=rs.getBigDecimal(4);      if (price == null || price.signum() == 0)       price=rs.getBigDecimal(5);      int C_Currency_ID=rs.getInt(6);      Timestamp DateAcct=rs.getTimestamp(7);      int C_ConversionType_ID=rs.getInt(8);      int Client_ID=rs.getInt(9);      int Org_ID=rs.getInt(10);      BigDecimal cost=MConversionRate.convert(product.getCtx(),price,C_Currency_ID,as.getC_Currency_ID(),DateAcct,C_ConversionType_ID,Client_ID,Org_ID);      BigDecimal oldAverageAmt=newAverageAmt;      BigDecimal averageCurrent=oldStockQty.multiply(oldAverageAmt);      BigDecimal averageIncrease=matchQty.multiply(cost);      BigDecimal newAmt=averageCurrent.add(averageIncrease);      newAmt=newAmt.setScale(as.getCostingPrecision(),BigDecimal.ROUND_HALF_UP);      newAverageAmt=newAmt.divide(newStockQty,as.getCostingPrecision(),BigDecimal.ROUND_HALF_UP);      s_log.finer("Movement=" + movementQty + ", StockQty="+ newStockQty+ ", Match="+ matchQty+ ", Cost="+ cost+ ", NewAvg="+ newAverageAmt);    }  } catch (  SQLException e) {    throw new DBException(e,sql);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (newAverageAmt != null && newAverageAmt.signum() != 0) {    s_log.finer(product.getName() + " = " + newAverageAmt);    return newAverageAmt;  }  return null;}  }
class C{  public boolean isClosedOrPartial(){  return ((ConsCell)getTerm()).isClosedOrPartial();}  }
class C{  @Override public boolean isShowing(){  return trayIsShowing;}  }
class C{  public static final double transposeTimes(final double[] v1,final double[] v2){  assert (v2.length == v1.length) : ERR_MATRIX_INNERDIM;  double s=0;  for (int k=0; k < v1.length; k++) {    s+=v1[k] * v2[k];  }  return s;}  }
class C{  public static double L_LogLoss(double y,double rpred,double C){  double ans=Math.min(Utils.eq(y,rpred) ? 0.0 : -((y * Math.log(rpred)) + ((1.0 - y) * Math.log(1.0 - rpred))),C);  return (Double.isNaN(ans) ? 0.0 : ans);}  }
class C{  public boolean addGpsTags(double latitude,double longitude){  ExifTag latTag=buildTag(TAG_GPS_LATITUDE,toExifLatLong(latitude));  ExifTag longTag=buildTag(TAG_GPS_LONGITUDE,toExifLatLong(longitude));  ExifTag latRefTag=buildTag(TAG_GPS_LATITUDE_REF,latitude >= 0 ? ExifInterface.GpsLatitudeRef.NORTH : ExifInterface.GpsLatitudeRef.SOUTH);  ExifTag longRefTag=buildTag(TAG_GPS_LONGITUDE_REF,longitude >= 0 ? ExifInterface.GpsLongitudeRef.EAST : ExifInterface.GpsLongitudeRef.WEST);  if (latTag == null || longTag == null || latRefTag == null || longRefTag == null) {    return false;  }  setTag(latTag);  setTag(longTag);  setTag(latRefTag);  setTag(longRefTag);  return true;}  }
class C{  final public static String toString(final byte[] key){  if (key == null)   return NULL;  return toString(key,0,key.length);}  }
class C{  @Override public void flush() throws IOException {synchronized (lock) {    out.flush();  }}  }
class C{  public String globalInfo(){  return "Class for performing a Bias-Variance decomposition on any classifier " + "using the method specified in:\n\n" + getTechnicalInformation().toString();}  }
class C{  public double slideSubtree(MutableTree tree){  double logHastingsRatio;  NodeRef i, newParent, newChild;  do {    i=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));  } while (tree.getRoot() == i);  NodeRef iP=tree.getParent(i);  NodeRef CiP=getOtherChild(tree,iP,i);  NodeRef PiP=tree.getParent(iP);  double delta=getDelta();  double oldHeight=tree.getNodeHeight(iP);  double newHeight=oldHeight + delta;  if (delta > 0) {    if (PiP != null && tree.getNodeHeight(PiP) < newHeight) {      newParent=PiP;      newChild=iP;      while (tree.getNodeHeight(newParent) < newHeight) {        newChild=newParent;        newParent=tree.getParent(newParent);        if (newParent == null)         break;      }      tree.beginTreeEdit();      if (tree.isRoot(newChild)) {        tree.removeChild(iP,CiP);        tree.removeChild(PiP,iP);        tree.addChild(iP,newChild);        tree.addChild(PiP,CiP);        tree.setRoot(iP);      } else {        tree.removeChild(iP,CiP);        tree.removeChild(PiP,iP);        tree.removeChild(newParent,newChild);        tree.addChild(iP,newChild);        tree.addChild(PiP,CiP);        tree.addChild(newParent,iP);      }      tree.setNodeHeight(iP,newHeight);      tree.endTreeEdit();      int possibleSources=intersectingEdges(tree,newChild,oldHeight,null);      logHastingsRatio=Math.log(1.0 / (double)possibleSources);    } else {      tree.setNodeHeight(iP,newHeight);      logHastingsRatio=0.0;    }  } else {    if (tree.getNodeHeight(i) > newHeight) {      return Double.NEGATIVE_INFINITY;    }    if (tree.getNodeHeight(CiP) > newHeight) {      ArrayList newChildren=new ArrayList();      int possibleDestinations=intersectingEdges(tree,CiP,newHeight,newChildren);      if (newChildren.size() == 0) {        return Double.NEGATIVE_INFINITY;      }      int childIndex=MathUtils.nextInt(newChildren.size());      newChild=(NodeRef)newChildren.get(childIndex);      newParent=tree.getParent(newChild);      tree.beginTreeEdit();      if (tree.isRoot(iP)) {        tree.removeChild(iP,CiP);        tree.removeChild(newParent,newChild);        tree.addChild(iP,newChild);        tree.addChild(newParent,iP);        tree.setRoot(CiP);      } else {        tree.removeChild(iP,CiP);        tree.removeChild(PiP,iP);        tree.removeChild(newParent,newChild);        tree.addChild(iP,newChild);        tree.addChild(PiP,CiP);        tree.addChild(newParent,iP);      }      tree.setNodeHeight(iP,newHeight);      tree.endTreeEdit();      logHastingsRatio=Math.log((double)possibleDestinations);    } else {      tree.setNodeHeight(iP,newHeight);      logHastingsRatio=0.0;    }  }  return logHastingsRatio;}  }
class C{  private Vector2 rotatePoint(Vector2 point,Vector2 rotationCenter,float angle){  angle=(float)(angle * (Math.PI / 180f));  float rotatedX=(float)(Math.cos(angle) * (point.x - rotationCenter.x) - Math.sin(angle) * (point.y - rotationCenter.y) + rotationCenter.x);  float rotatedY=(float)(Math.sin(angle) * (point.x - rotationCenter.x) + Math.cos(angle) * (point.y - rotationCenter.y) + rotationCenter.y);  return new Vector2(rotatedX,rotatedY);}  }
class C{  @Deprecated private List<CharSequence> buildLimitedNetworksList(){  final Context context=getActivity();  final ArrayList<CharSequence> limited=Lists.newArrayList();  if (hasSubscription(context)) {    final String subscriberId=getActiveSubscriberId(context);    if (mPolicyEditor.hasLimitedPolicy(buildTemplateMobileAll(subscriberId))) {      limited.add(getText(R.string.data_usage_list_mobile));    }    if (mPolicyEditor.hasLimitedPolicy(buildTemplateMobile3gLower(subscriberId))) {      limited.add(getText(R.string.data_usage_tab_3g));    }    if (mPolicyEditor.hasLimitedPolicy(buildTemplateMobile4g(subscriberId))) {      limited.add(getText(R.string.data_usage_tab_4g));    }  }  if (mPolicyEditor.hasLimitedPolicy(buildTemplateWifiWildcard())) {    limited.add(getText(R.string.data_usage_tab_wifi));  }  if (mPolicyEditor.hasLimitedPolicy(buildTemplateEthernet())) {    limited.add(getText(R.string.data_usage_tab_ethernet));  }  return limited;}  }
class C{  public GuacamoleClientTooManyException(String message){  super(message);}  }
class C{  private String augmentDataObjectName(DataObject dataObject){  if (dataObject instanceof Host) {    URI clusterResource=((Host)dataObject).getCluster();    if (clusterResource != null) {      Cluster cluster=client.findById(Cluster.class,clusterResource);      if (cluster != null) {        return String.format("%s [cluster: %s]",dataObject.getLabel(),cluster.getLabel());      }    }  }  return dataObject.getLabel();}  }
class C{  private Optional<IN4JSProject> findRuntimeEnvironemtnWithName(final String projectId){  for (  IN4JSProject project : n4jsCore.findAllProjects()) {    if (project.getProjectType() == ProjectType.RUNTIME_ENVIRONMENT && project.getProjectId().equals(projectId)) {      return Optional.of(project);    }  }  return Optional.absent();}  }
class C{  int readEntry(int position,int offset) throws ArrayIndexOutOfBoundsException {{    if (offset >= slotsize)     throw new ArrayIndexOutOfBoundsException(XMLMessages.createXMLMessage(XMLErrorResources.ER_OFFSET_BIGGER_THAN_SLOT,null));    position*=slotsize;    int chunkpos=position >> lowbits;    int slotpos=position & lowmask;    int[] chunk=chunks.elementAt(chunkpos);    return chunk[slotpos + offset];  }}  }
class C{  public boolean insert(int val){  Integer v=val;  if (list.contains(v)) {    return false;  }  list.add(v);  return true;}  }
class C{  public double distance(final java.awt.geom.Point2D p){  final double dx=(double)this.x - p.getX();  final double dy=(double)this.y - p.getY();  return Math.sqrt(dx * dx + dy * dy);}  }
class C{  private String createColumnMethods(StringBuffer mandatory,String columnName,boolean isUpdateable,boolean isMandatory,int displayType,int AD_Reference_ID,int fieldLength,String defaultValue,String ValueMin,String ValueMax,String VFormat,String Callout,String Name,String Description,boolean virtualColumn,boolean IsEncrypted,boolean IsKey,int AD_Table_ID){  Class<?> clazz=ModelInterfaceGenerator.getClass(columnName,displayType,AD_Reference_ID);  String dataType=ModelInterfaceGenerator.getDataTypeName(clazz,displayType);  if (defaultValue == null)   defaultValue="";  if (DisplayType.isLOB(displayType))   fieldLength=0;  String setValue="\t\tset_Value";  if (IsEncrypted)   setValue="\t\tset_ValueE";  if (!isUpdateable) {    setValue="\t\tset_ValueNoCheck";    if (IsEncrypted)     setValue="\t\tset_ValueNoCheckE";  }  StringBuffer sb=new StringBuffer();  if (DisplayType.isID(displayType) && !IsKey) {    String fieldName=ModelInterfaceGenerator.getFieldName(columnName);    String referenceClassName=ModelInterfaceGenerator.getReferenceClassName(AD_Table_ID,columnName,displayType,AD_Reference_ID);    if (fieldName != null && referenceClassName != null) {      sb.append(NL).append("\tpublic " + referenceClassName + " get").append(fieldName).append("() throws RuntimeException").append(NL).append("    {").append(NL).append("\t\treturn (" + referenceClassName + ")MTable.get(getCtx(), "+ referenceClassName+ ".Table_Name)").append(NL).append("\t\t\t.getPO(get" + columnName + "(), get_TrxName());").append("\t}").append(NL);      addImportClass(clazz);    }  }  generateJavaSetComment(columnName,Name,Description,sb);  sb.append("\tpublic void set").append(columnName).append(" (").append(dataType).append(" ").append(columnName).append(")").append(NL).append("\t{").append(NL);  if (AD_Reference_ID != 0 && String.class == clazz) {    String staticVar=addListValidation(sb,AD_Reference_ID,columnName);    sb.insert(0,staticVar);  }  if (virtualColumn) {    sb.append("\t\tthrow new IllegalArgumentException (\"").append(columnName).append(" is virtual column\");");  } else   if (clazz.equals(Integer.class)) {    if (columnName.endsWith("_ID")) {      int firstOK=1;      if (columnName.equals("AD_Client_ID") || columnName.equals("AD_Org_ID") || columnName.equals("Record_ID")|| columnName.equals("C_DocType_ID")|| columnName.equals("Node_ID")|| columnName.equals("AD_Role_ID")|| columnName.equals("M_AttributeSet_ID")|| columnName.equals("M_AttributeSetInstance_ID"))       firstOK=0;      sb.append("\t\tif (").append(columnName).append(" < ").append(firstOK).append(") ").append(NL).append("\t").append(setValue).append(" (").append("COLUMNNAME_").append(columnName).append(", null);").append(NL).append("\t\telse ").append(NL).append("\t");    }    sb.append(setValue).append(" (").append("COLUMNNAME_").append(columnName).append(", Integer.valueOf(").append(columnName).append("));").append(NL);  } else   if (clazz.equals(Boolean.class))   sb.append(setValue).append(" (").append("COLUMNNAME_").append(columnName).append(", Boolean.valueOf(").append(columnName).append("));").append(NL); else {    sb.append(setValue).append(" (").append("COLUMNNAME_").append(columnName).append(", ").append(columnName).append(");").append(NL);  }  sb.append("\t}").append(NL);  if (isMandatory) {    mandatory.append("\t\t\tset").append(columnName).append(" (");    if (clazz.equals(Integer.class))     mandatory.append("0"); else     if (clazz.equals(Boolean.class)) {      if (defaultValue.indexOf('Y') != -1)       mandatory.append(true); else       mandatory.append("false");    } else     if (clazz.equals(BigDecimal.class))     mandatory.append("Env.ZERO"); else     if (clazz.equals(Timestamp.class))     mandatory.append("new Timestamp( System.currentTimeMillis() )"); else     mandatory.append("null");    mandatory.append(");").append(NL);    if (defaultValue.length() > 0)     mandatory.append("// ").append(defaultValue).append(NL);  }  generateJavaGetComment(Name,Description,sb);  String getValue="get_Value";  if (IsEncrypted)   getValue="get_ValueE";  sb.append("\tpublic ").append(dataType);  if (clazz.equals(Boolean.class)) {    sb.append(" is");    if (columnName.toLowerCase().startsWith("is"))     sb.append(columnName.substring(2)); else     sb.append(columnName);  } else {    sb.append(" get").append(columnName);  }  sb.append(" () ").append(NL).append("\t{").append(NL).append("\t\t");  if (clazz.equals(Integer.class)) {    sb.append("Integer ii = (Integer)").append(getValue).append("(").append("COLUMNNAME_").append(columnName).append(");").append(NL).append("\t\tif (ii == null)").append(NL).append("\t\t\t return 0;").append(NL).append("\t\treturn ii.intValue();").append(NL);  } else   if (clazz.equals(BigDecimal.class)) {    sb.append("BigDecimal bd = (BigDecimal)").append(getValue).append("(").append("COLUMNNAME_").append(columnName).append(");").append(NL).append("\t\tif (bd == null)").append(NL).append("\t\t\t return Env.ZERO;").append(NL).append("\t\treturn bd;").append(NL);    addImportClass(java.math.BigDecimal.class);    addImportClass(org.compiere.util.Env.class);  } else   if (clazz.equals(Boolean.class)) {    sb.append("Object oo = ").append(getValue).append("(").append("COLUMNNAME_").append(columnName).append(");").append(NL).append("\t\tif (oo != null) ").append(NL).append("\t\t{").append(NL).append("\t\t\t if (oo instanceof Boolean) ").append(NL).append("\t\t\t\t return ((Boolean)oo).booleanValue(); ").append(NL).append("\t\t\treturn \"Y\".equals(oo);").append(NL).append("\t\t}").append(NL).append("\t\treturn false;").append(NL);  } else   if (dataType.equals("Object")) {    sb.append("\t\treturn ").append(getValue).append("(").append("COLUMNNAME_").append(columnName).append(");").append(NL);  } else {    sb.append("return (").append(dataType).append(")").append(getValue).append("(").append("COLUMNNAME_").append(columnName).append(");").append(NL);    addImportClass(clazz);  }  sb.append("\t}").append(NL);  return sb.toString();}  }
class C{  public final static byte[] stream2Byte(InputStream is) throws IOException {  ByteArrayOutputStream baos=new ByteArrayOutputStream();  int len=0;  byte[] b=new byte[1024];  while ((len=is.read(b,0,b.length)) != -1) {    baos.write(b,0,len);  }  byte[] buffer=baos.toByteArray();  return buffer;}  }
class C{  public double num(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return (m_left.num(xctxt) % m_right.num(xctxt));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void indexDocument(Document doc){  indexDocuments(Arrays.asList(new Document[]{doc}));}  }
class C{  static int[] convertMidTerms(int[] k){  int[] res=new int[3];  if (k.length == 1) {    res[0]=k[0];  } else {    if (k.length != 3) {      throw new IllegalArgumentException("Only Trinomials and pentanomials supported");    }    if (k[0] < k[1] && k[0] < k[2]) {      res[0]=k[0];      if (k[1] < k[2]) {        res[1]=k[1];        res[2]=k[2];      } else {        res[1]=k[2];        res[2]=k[1];      }    } else     if (k[1] < k[2]) {      res[0]=k[1];      if (k[0] < k[2]) {        res[1]=k[0];        res[2]=k[2];      } else {        res[1]=k[2];        res[2]=k[0];      }    } else {      res[0]=k[2];      if (k[0] < k[1]) {        res[1]=k[0];        res[2]=k[1];      } else {        res[1]=k[1];        res[2]=k[0];      }    }  }  return res;}  }
class C{  public static String valueFor(String key,String defaultVal){  Configuration conf=instance();  String val=conf.properties.getProperty(key);  val=(val == null ? defaultVal : val);  if (val == null) {    conf.warning("CONFIGURATION: no value found for key " + key + " and no default given.");  }  return val;}  }
class C{  public synchronized void removeActionListener(ActionListener l){  if ((l != null) && (getAction() == l)) {    setAction(null);  } else {    listenerList.remove(ActionListener.class,l);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case SexecPackage.STATE_VECTOR__SIZE:    return size != SIZE_EDEFAULT;case SexecPackage.STATE_VECTOR__OFFSET:  return offset != OFFSET_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public static long[] toPrimitive(final Long[] array,final long valueForNull){  if (array == null) {    return null;  } else   if (array.length == 0) {    return ArrayUtils.EMPTY_LONG_ARRAY;  }  final long[] result=new long[array.length];  for (int i=0; i < array.length; i++) {    Long b=array[i];    result[i]=b == null ? valueForNull : b.longValue();  }  return result;}  }
class C{  public void validate() throws Exception {  if (crawlStorageFolder == null) {    throw new Exception("Crawl storage folder is not set in the CrawlConfig.");  }  if (politenessDelay < 0) {    throw new Exception("Invalid value for politeness delay: " + politenessDelay);  }  if (maxDepthOfCrawling < -1) {    throw new Exception("Maximum crawl depth should be either a positive number or -1 for unlimited depth.");  }  if (maxDepthOfCrawling > Short.MAX_VALUE) {    throw new Exception("Maximum value for crawl depth is " + Short.MAX_VALUE);  }}  }
class C{  public Object[] parse(String source,ParsePosition pos){  if (source == null) {    Object[] empty={};    return empty;  }  int maximumArgumentNumber=-1;  for (int i=0; i <= maxOffset; i++) {    if (argumentNumbers[i] > maximumArgumentNumber) {      maximumArgumentNumber=argumentNumbers[i];    }  }  Object[] resultArray=new Object[maximumArgumentNumber + 1];  int patternOffset=0;  int sourceOffset=pos.index;  ParsePosition tempStatus=new ParsePosition(0);  for (int i=0; i <= maxOffset; ++i) {    int len=offsets[i] - patternOffset;    if (len == 0 || pattern.regionMatches(patternOffset,source,sourceOffset,len)) {      sourceOffset+=len;      patternOffset+=len;    } else {      pos.errorIndex=sourceOffset;      return null;    }    if (formats[i] == null) {      int tempLength=(i != maxOffset) ? offsets[i + 1] : pattern.length();      int next;      if (patternOffset >= tempLength) {        next=source.length();      } else {        next=source.indexOf(pattern.substring(patternOffset,tempLength),sourceOffset);      }      if (next < 0) {        pos.errorIndex=sourceOffset;        return null;      } else {        String strValue=source.substring(sourceOffset,next);        if (!strValue.equals("{" + argumentNumbers[i] + "}"))         resultArray[argumentNumbers[i]]=source.substring(sourceOffset,next);        sourceOffset=next;      }    } else {      tempStatus.index=sourceOffset;      resultArray[argumentNumbers[i]]=formats[i].parseObject(source,tempStatus);      if (tempStatus.index == sourceOffset) {        pos.errorIndex=sourceOffset;        return null;      }      sourceOffset=tempStatus.index;    }  }  int len=pattern.length() - patternOffset;  if (len == 0 || pattern.regionMatches(patternOffset,source,sourceOffset,len)) {    pos.index=sourceOffset + len;  } else {    pos.errorIndex=sourceOffset;    return null;  }  return resultArray;}  }
class C{  @Override public RegularTimePeriod next(){  Minute result;  if (this.minute != LAST_MINUTE_IN_HOUR) {    result=new Minute(this.minute + 1,getHour());  } else {    Hour nextHour=(Hour)getHour().next();    if (nextHour != null) {      result=new Minute(FIRST_MINUTE_IN_HOUR,nextHour);    } else {      result=null;    }  }  return result;}  }
class C{  public void selectDistributionSetValue(){  selectedDefaultDisSetType=(Long)combobox.getValue();  if (!selectedDefaultDisSetType.equals(currentDefaultDisSetType)) {    changeIcon.setVisible(true);    notifyConfigurationChanged();  } else {    changeIcon.setVisible(false);  }}  }
class C{  public IntroFragmentModel compile(){  return new IntroFragmentModel(introFragment == null ? new SimpleIntroFragment() : introFragment,title,description,image,backgroundColor,imageElevation,titleTextColor,descriptionTextColor);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:02.458 -0500",hash_original_method="B0CD1CF37C47B6EE8CA9750CE89F4BC8",hash_generated_method="3F9500F6CC498B34F0757D541AC9F0D3") @DSVerified @DSSpec(DSCat.IO) @DSSink({DSSinkKind.NETWORK}) public int soml(String reversePath) throws IOException {  return sendCommand(SMTPCommand.SOML,reversePath);}  }
class C{  private int checkInterruptWhileWaiting(Node node){  return Thread.interrupted() ? (transferAfterCancelledWait(node) ? THROW_IE : REINTERRUPT) : 0;}  }
class C{  public void actionPerformed(ActionEvent ae){  long nowTime=System.currentTimeMillis();  long elapsedTime=nowTime - prevTime;  long totalTime=nowTime - startTime;  System.out.println("Elapsed time = " + elapsedTime);  if (totalTime > DURATION) {    timer.stop();  }  prevTime=nowTime;  try {    if (firstTime) {      Thread.sleep(INITIAL_PROCESSING_TIME);      firstTime=false;    } else {      Thread.sleep(PROCESSING_TIME);    }  } catch (  Exception e) {  }}  }
class C{  public void addTree(TreeRTG tree,boolean allowed){  if (allowed) {    this.rtgTrees.add(tree);  }}  }
class C{  public static Set<Feature> conjoin(Set<Feature> feats1,Set<Feature> feats2){  if (feats1.size() == 0 || feats2.size() == 0)   return new LinkedHashSet<>();  Set<Feature> features=new LinkedHashSet<>(feats1.size() * feats2.size());  for (  Feature a : feats1) {    for (    Feature b : feats2) {      if (a == b)       features.add(a); else       features.add(a.conjoinWith(b));    }  }  return features;}  }
class C{  public static void write(File file,CharSequence data,Charset encoding) throws IOException {  write(file,data,encoding,false);}  }
class C{  public static ScriptEngine createEngine(){  ScriptEngine engine=manager.getEngineByName("nashorn");  if (engine == null) {    engine=manager.getEngineByName("rhino");  }  return engine;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GroupImage'";  db.execSQL(sql);}  }
class C{  public static void main(String[] args){  String alg="SHA";  boolean file=false;  if (args.length == 0 || args.length > 4) {    printUsage();    return;  }  for (int i=0; i < args.length; i++) {    String currArg=args[i].toLowerCase(Locale.US);    if (currArg.equals("-help") || currArg.equals("-usage")) {      printUsage();      return;    }    if (currArg.equals("-alg")) {      alg=args[i + 1];    }    if (currArg.equals("-file")) {      file=true;    }  }  if (file) {    digestFile(args[args.length - 1],alg);  } else {    try {      String hash=digestString(args[args.length - 1],alg);      System.out.println("Hash is: " + hash);    } catch (    NoSuchAlgorithmException nsae) {      System.out.println("No such algorithm available");    }  }}  }
class C{  public static Range shift(Range base,double delta){  return shift(base,delta,false);}  }
class C{  private static ApiUsage of(List<IN4JSProject> projects,Map<IN4JSProject,IN4JSProject> concreteApiImplProjectMapping,ApiImplMapping apiImplMapping,boolean implementationIdRequired){  return new ApiUsage(null,projects,concreteApiImplProjectMapping,apiImplMapping,Collections.emptyList(),implementationIdRequired);}  }
class C{  @Override public int describeContents(){  return 0;}  }
class C{  public void println(String[] values) throws IOException {  for (int i=0; i < values.length; i++) {    print(values[i]);  }  println();}  }
class C{  private void recomputeFocus(MotionEvent event){  for (int i=0; i < mHighlightViews.size(); i++) {    HighlightView hv=mHighlightViews.get(i);    hv.setFocus(false);    hv.invalidate();  }  for (int i=0; i < mHighlightViews.size(); i++) {    HighlightView hv=mHighlightViews.get(i);    int edge=hv.getHit(event.getX(),event.getY());    if (edge != HighlightView.GROW_NONE) {      if (!hv.hasFocus()) {        hv.setFocus(true);        hv.invalidate();      }      break;    }  }  invalidate();}  }
class C{  @Deprecated public AltFormat(String name,WireFormat wireFormat,ContentType contentType,List<ContentType> acceptList,boolean isSelectableByType){  this(builder().setName(name).setWireFormat(wireFormat).setContentType(contentType).setAcceptableTypes(acceptList).setSelectableByType(isSelectableByType).check());}  }
class C{  protected void reportMetricsIfNeeded(){  if (getGatherPerformanceMetrics()) {    if ((System.currentTimeMillis() - this.metricsLastReportedMs) > getReportMetricsIntervalMillis()) {      reportMetrics();    }  }}  }
class C{  @Override public Set<byte[]> keySet(){  final TreeSet<byte[]> set=new TreeSet<byte[]>(this.table.ordering);  try {    final Iterator<byte[]> i=this.table.keys(true,false);    while (i.hasNext()) {      set.add(i.next());    }  } catch (  final IOException e) {  }  return set;}  }
class C{  protected void computeAverageChainingDistances(KNNQuery<O> knnq,DistanceQuery<O> dq,DBIDs ids,WritableDoubleDataStore acds){  FiniteProgress lrdsProgress=LOG.isVerbose() ? new FiniteProgress("Computing average chaining distances",ids.size(),LOG) : null;  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    final KNNList neighbors=knnq.getKNNForDBID(iter,k);    final int r=neighbors.size();    DoubleDBIDListIter it1=neighbors.iter(), it2=neighbors.iter();    final double[] mindists=new double[r];    for (int i=0; it1.valid(); it1.advance(), ++i) {      mindists[i]=DBIDUtil.equal(it1,iter) ? Double.NaN : it1.doubleValue();    }    double acsum=0.;    for (int j=((r < k) ? r : k) - 1; j > 0; --j) {      int minpos=-1;      double mindist=Double.NaN;      for (int i=0; i < mindists.length; ++i) {        double curdist=mindists[i];        if (curdist == curdist && !(curdist > mindist)) {          minpos=i;          mindist=curdist;        }      }      acsum+=mindist * j;      mindists[minpos]=Double.NaN;      it1.seek(minpos);      it2.seek(0);      for (int i=0; it2.valid(); it2.advance(), ++i) {        final double curdist=mindists[i];        if (curdist != curdist) {          continue;        }        double newdist=dq.distance(it1,it2);        if (newdist < curdist) {          mindists[i]=newdist;        }      }    }    acds.putDouble(iter,acsum / (r * 0.5 * (r - 1.)));    LOG.incrementProcessed(lrdsProgress);  }  LOG.ensureCompleted(lrdsProgress);}  }
class C{  public boolean isEmtpy(){  return depth() == 0;}  }
class C{  @Override protected void onPrivateMessage(String sender,String login,String hostname,String target,String text){  Message message=new Message(" " + sender + " - "+ text);  String queryNick=sender;  if (queryNick.equals(this.getNick())) {    queryNick=target;  }  Conversation conversation=server.getConversation(queryNick);  if (conversation == null) {    conversation=new Query(queryNick);    conversation.setHistorySize(service.getSettings().getHistorySize());    conversation.addMessage(message);    server.addConversation(conversation);    Intent intent=Broadcast.createConversationIntent(Broadcast.CONVERSATION_NEW,server.getId(),queryNick);    service.sendBroadcast(intent);  } else {    conversation.addMessage(message);    Intent intent=Broadcast.createConversationIntent(Broadcast.CONVERSATION_MESSAGE,server.getId(),queryNick);    service.sendBroadcast(intent);  }  if (sender.equals(this.getNick())) {    return;  }  if (conversation.getStatus() != Conversation.STATUS_SELECTED || !server.getIsForeground()) {    service.addNewMention(server.getId(),conversation," " + sender + " - "+ text,service.getSettings().isVibrateHighlightEnabled(),service.getSettings().isSoundHighlightEnabled(),service.getSettings().isLedHighlightEnabled());  }  if (isMentioned(text)) {    message.setColor(Message.COLOR_RED);    conversation.setStatus(Conversation.STATUS_HIGHLIGHT);  }}  }
class C{  private static String formatSampleRate(int rate){  return MHZ_FORMATTER.format((double)rate / 1E6d);}  }
class C{  public boolean isSet(final String flag){  final Flag aFlag=getFlag(flag);  return (aFlag != null) && aFlag.isSet();}  }
class C{  private void transferPlaylistToModels(PlaylistV2 playlist){  if (playlist != null) {    mPlaylistLoading=true;    mAliasModel.addAliases(playlist.getAliases());    mChannelModel.addChannels(playlist.getChannels());    mChannelMapModel.addChannelMaps(playlist.getChannelMaps());    mPlaylistLoading=false;  }}  }
class C{  public void write(char c) throws IOException {  if (_outputStream == null)   throw new IOException("Writer closed");  if ((c < 0xd800) || (c > 0xdfff)) {    write((int)c);  } else   if (c < 0xdc00) {    _highSurrogate=c;  } else {    int code=((_highSurrogate - 0xd800) << 10) + (c - 0xdc00) + 0x10000;    write(code);  }}  }
class C{  public boolean contains(Point2D p){  return path.contains(p);}  }
class C{  protected void closeDown(){  try {    if (!region.isDestroyed()) {      region.destroyRegion();    }  } catch (  Exception e) {    this.logWriter.error("DiskRegionTestingBase::closeDown:Exception in destroyiong the region",e);  }}  }
class C{  public CreatePacFileDialog(Shell parent){  super(parent,SWT.CLOSE | SWT.TITLE | SWT.MIN| SWT.RESIZE);}  }
class C{  public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {  String name=method.getName();  if (Object.class == method.getDeclaringClass()) {    if ("equals".equals(name)) {      Object obj=args[0];      return new Boolean(checkEquals(obj));    } else     if ("toString".equals(name))     return annotation.toString(); else     if ("hashCode".equals(name))     return new Integer(hashCode());  } else   if ("annotationType".equals(name) && method.getParameterTypes().length == 0)   return getAnnotationType();  MemberValue mv=annotation.getMemberValue(name);  if (mv == null)   return getDefault(name,method); else   return mv.getValue(classLoader,pool,method);}  }
class C{  public boolean dumpNamespace(String namespace){synchronized (this) {    if (usingNamespaces(namespace)) {      Hashtable h=(Hashtable)namespaceHash.remove(namespace);      if (h == null)       return false;      h.clear();      return true;    }    return false;  }}  }
class C{  public void filter(Geometry geom){  if (geom instanceof LineString) {    LineString line=(LineString)geom;    if (line.isEmpty())     return;    int minSize=((LineString)line).isClosed() ? 4 : 2;    TaggedLineString taggedLine=new TaggedLineString((LineString)line,minSize);    linestringMap.put(line,taggedLine);  }}  }
class C{  public void shutdown(){  if (timerTask != null) {    timerTask.cancel();    timerTask=null;  }  if (timer != null) {    timer.cancel();    timer.purge();    timer=null;  }  periodicTask.shutdown();}  }
class C{  public static void checkSlashes(int depth,boolean create,String ans,String ask) throws Exception {  check(ans,ask);  if (depth == 0)   return;  checkSlash(depth,create,ans,ask,"/");  checkSlash(depth,create,ans,ask,"//");  checkSlash(depth,create,ans,ask,"///");  if (win32) {    checkSlash(depth,create,ans,ask,"\\");    checkSlash(depth,create,ans,ask,"\\\\");    checkSlash(depth,create,ans,ask,"\\/");    checkSlash(depth,create,ans,ask,"/\\");    checkSlash(depth,create,ans,ask,"\\\\\\");  }}  }
class C{  public RouteTest(String name){  super(name);}  }
class C{  private int calculateTotalKey(@NonNull String text){  String[] lines=text.split("\n");  int number=0;  for (int i=0; i < lines.length; i++) {    number+=KEY_CODE.equals(lines[i]) ? 1 : 0;  }  return number;}  }
class C{  public void appendToDDLWriter(String stringToWrite){  appendToDDLWriter(createSchemaWriter,stringToWrite);}  }
class C{  public void testInputResources() throws Exception {  File f=this.initFile("testInputResources");  writeAscendingIntFile(f,100);  for (int fcnt=0; fcnt < 25000; fcnt++) {    BufferedFileDataInput bfdi=new BufferedFileDataInput(f);    long offset=bfdi.getOffset();    for (int i=0; i < 100; i++) {      String position="fcnt: " + fcnt + " i: "+ i;      assertEquals(position,i,bfdi.readInt());      offset+=4;      assertEquals(position,offset,bfdi.getOffset());    }    bfdi.close();  }}  }
class C{  @Override public void close(){  if (begun)   throw new IllegalStateException(getClass().getSimpleName() + " close() without end()");}  }
class C{  public static void downto(Date self,Date to,Closure closure){  if (self.compareTo(to) >= 0) {    for (Date i=(Date)self.clone(); i.compareTo(to) >= 0; i=previous(i)) {      closure.call(i);    }  } else   throw new GroovyRuntimeException("The argument (" + to + ") to downto() cannot be later than the value ("+ self+ ") it's called on.");}  }
class C{  public void addHeaderLine(String line){  mLines.add(line);}  }
class C{  static <T extends Entity>Optional<T> lookup(Repository repository,Class<T> klass,EntityIndex<T,UUID> keyAttribute,UUID id){  try (ResultSet<EntityHandle<T>> resultSet=repository.query(klass,equal(keyAttribute,id))){    if (resultSet.isEmpty()) {      return Optional.empty();    } else {      return Optional.of(resultSet.uniqueResult().get());    }  } }  }
class C{  protected void writeXml(MListTable<?> table,OutputStream outputStream) throws IOException {  final List<?> list=table.getList();  TransportFormatAdapter.writeXml((Serializable)list,outputStream);}  }
class C{  public void removeAll(){  checkWidget();  text.setText("");  table.removeAll();}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof GenericEntity))   return false;  try {    return this.compareTo((GenericEntity)obj) == 0;  } catch (  ClassCastException e) {    return false;  }}  }
class C{  public ParetoDominanceComparator(){  super(new AggregateConstraintComparator(),new ParetoObjectiveComparator());}  }
class C{  public static void addSentencePreviousMeta(Vertex question,Vertex answer,Vertex previous,boolean require,Network network){  Relationship relationship=question.getRelationship(Primitive.RESPONSE,answer);  if (relationship != null) {    Vertex meta=relationship.getMeta();    if (previous != null) {      meta=network.createMeta(relationship);      meta.addRelationship(Primitive.PREVIOUS,previous);    }    if (meta != null) {      if (require) {        meta.addRelationship(Primitive.REQUIRE,Primitive.PREVIOUS);      } else {        Relationship required=meta.getRelationship(Primitive.REQUIRE,Primitive.PREVIOUS);        if (required != null) {          relationship.getMeta().internalRemoveRelationship(required);        }      }    }  }  network.checkReduction(question);  Collection<Relationship> synonyms=question.getRelationships(Primitive.SYNONYM);  if (synonyms != null) {    for (    Relationship synonym : synonyms) {      relationship=synonym.getTarget().getRelationship(Primitive.RESPONSE,answer);      if (relationship != null) {        Vertex meta=relationship.getMeta();        if (previous != null) {          meta=network.createMeta(relationship);          meta.addRelationship(Primitive.PREVIOUS,previous);        }        if (meta != null) {          if (require) {            meta.addRelationship(Primitive.REQUIRE,Primitive.PREVIOUS);          } else {            Relationship required=meta.getRelationship(Primitive.REQUIRE,Primitive.PREVIOUS);            if (required != null) {              relationship.getMeta().internalRemoveRelationship(required);            }          }        }      }    }  }}  }
class C{  protected MarkerImpl(){  super();}  }
class C{  public void removeObsoletePreviews(ArrayList<Object> list){  Utilities.assertWorkerThread();  LongSparseArray<HashSet<String>> validPackages=new LongSparseArray<>();  for (  Object obj : list) {    final UserHandleCompat user;    final String pkg;    if (obj instanceof ResolveInfo) {      user=UserHandleCompat.myUserHandle();      pkg=((ResolveInfo)obj).activityInfo.packageName;    } else {      LauncherAppWidgetProviderInfo info=(LauncherAppWidgetProviderInfo)obj;      user=mWidgetManager.getUser(info);      pkg=info.provider.getPackageName();    }    final long userId=mUserManager.getSerialNumberForUser(user);    HashSet<String> packages=validPackages.get(userId);    if (packages == null) {      packages=new HashSet<>();      validPackages.put(userId,packages);    }    packages.add(pkg);  }  LongSparseArray<HashSet<String>> packagesToDelete=new LongSparseArray<>();  Cursor c=null;  try {    c=mDb.query(new String[]{CacheDb.COLUMN_USER,CacheDb.COLUMN_PACKAGE,CacheDb.COLUMN_LAST_UPDATED,CacheDb.COLUMN_VERSION},null,null);    while (c.moveToNext()) {      long userId=c.getLong(0);      String pkg=c.getString(1);      long lastUpdated=c.getLong(2);      long version=c.getLong(3);      HashSet<String> packages=validPackages.get(userId);      if (packages != null && packages.contains(pkg)) {        long[] versions=getPackageVersion(pkg);        if (versions[0] == version && versions[1] == lastUpdated) {          continue;        }      }      packages=packagesToDelete.get(userId);      if (packages == null) {        packages=new HashSet<>();        packagesToDelete.put(userId,packages);      }      packages.add(pkg);    }    for (int i=0; i < packagesToDelete.size(); i++) {      long userId=packagesToDelete.keyAt(i);      UserHandleCompat user=mUserManager.getUserForSerialNumber(userId);      for (      String pkg : packagesToDelete.valueAt(i)) {        removePackage(pkg,user,userId);      }    }  } catch (  SQLException e) {    Log.e(TAG,"Error updating widget previews",e);  } finally {    if (c != null) {      c.close();    }  }}  }
class C{  public EchoBreakpointHitParser(final ClientReader clientReader){  super(clientReader,DebugCommandType.RESP_BPE_HIT);}  }
class C{  protected ObjectLiteralImpl(){  super();}  }
class C{  public static void checkGlError(String op){  int error=GLES20.glGetError();  if (error != GLES20.GL_NO_ERROR) {    String msg=op + ": glError 0x" + Integer.toHexString(error);    Log.e(TAG,msg);    throw new RuntimeException(msg);  }}  }
class C{  public UniformDiscrete(int min,int max){  setMinMax(min,max);}  }
class C{  @SuppressWarnings("UnusedDeclaration") @Beta(Beta.Feature.Sandbox) public static void enableSandbox(){  Fabric.getLogger().i(Digits.TAG,"Sandbox is enabled");  getInstance().getSandboxConfig().enable();  getInstance().getApiClientManager().createNewClient();}  }
class C{  public void generateServicesMap(){  try {    File metaInfFile=getMetaInfFile();    File serviceMapFile=new File(metaInfFile,"crux-remote");    if (serviceMapFile.exists() && !isOverride()) {      logger.info("Service map already exists. Skipping generation...");      return;    }    initializeScannerURLs();    Set<String> searchClassesByInterface=ClassScanner.searchClassesByInterface(RemoteService.class);    Properties cruxRemote=new Properties();    for (    String serviceClass : searchClassesByInterface) {      Class<?> clazz=Class.forName(serviceClass);      if (clazz.isInterface()) {        Class<?> service=Services.getService(serviceClass);        if (service != null) {          cruxRemote.put(serviceClass,service.getCanonicalName());        }      }    }    if (metaInfFile.exists()) {      if (!metaInfFile.isDirectory()) {        throw new ServiceMapperException("Can not create a META-INF directory on " + getProjectDir().getCanonicalPath());      }    } else {      metaInfFile.mkdirs();    }    cruxRemote.store(new FileOutputStream(serviceMapFile),"Crux RemoteServices implementations");  } catch (  IOException e) {    throw new ServiceMapperException("Error creating remote service map",e);  }catch (  ClassNotFoundException e) {    throw new ServiceMapperException("Error creating remote service map",e);  }}  }
class C{  public static boolean isConvolveOpValid(ConvolveOp cop){  Kernel kernel=cop.getKernel();  int kw=kernel.getWidth();  int kh=kernel.getHeight();  if (!(kw == 3 && kh == 3) && !(kw == 5 && kh == 5)) {    return false;  }  return true;}  }
class C{  public static Map<String,Object> returnMessage(String code,String message){  Map<String,Object> result=new HashMap<String,Object>();  if (code != null)   result.put(ModelService.RESPONSE_MESSAGE,code);  if (message != null)   result.put(ModelService.SUCCESS_MESSAGE,message);  return result;}  }
class C{  public static List<String> tokenize(String arguments){  return tokenize(arguments,false);}  }
class C{  public IndexingStats stats(String... types){  IndexingStats.Stats total=totalStats.stats();  Map<String,IndexingStats.Stats> typesSt=null;  if (types != null && types.length > 0) {    typesSt=new HashMap<>(typesStats.size());    if (types.length == 1 && types[0].equals("_all")) {      for (      Map.Entry<String,StatsHolder> entry : typesStats.entrySet()) {        typesSt.put(entry.getKey(),entry.getValue().stats());      }    } else {      for (      Map.Entry<String,StatsHolder> entry : typesStats.entrySet()) {        if (Regex.simpleMatch(types,entry.getKey())) {          typesSt.put(entry.getKey(),entry.getValue().stats());        }      }    }  }  return new IndexingStats(total,typesSt);}  }
class C{  public static CertPath buildPath(String[] fileNames) throws Exception {  return buildPath("",fileNames);}  }
class C{  public void forceRemoveCompletion(){  if (!replicatingNodes.isEmpty() || !tokenMetadata.getLeavingEndpoints().isEmpty()) {    logger.warn("Removal not confirmed for for {}",StringUtils.join(this.replicatingNodes,","));    for (    InetAddress endpoint : tokenMetadata.getLeavingEndpoints()) {      UUID hostId=tokenMetadata.getHostId(endpoint);      Gossiper.instance.advertiseTokenRemoved(endpoint,hostId);      excise(tokenMetadata.getTokens(endpoint),endpoint);    }    replicatingNodes.clear();    removingNode=null;  } else {    logger.warn("No tokens to force removal on, call 'removenode' first");  }}  }
class C{  public void fillFromToWith(int from,int to,Object val){  checkRangeFromTo(from,to,this.size);  for (int i=from; i <= to; )   setQuick(i++,val);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:26.340 -0500",hash_original_method="AC949E64AEE76B7FF936E7A1B08DF381",hash_generated_method="07410662D5F8988EAC507F19EF8D94E0") void onMMIDone(GsmMmiCode mmi){  if (mPendingMMIs.remove(mmi) || mmi.isUssdRequest()) {    mMmiCompleteRegistrants.notifyRegistrants(new AsyncResult(null,mmi,null));  }}  }
class C{  public JSONArray put(Collection<?> value){  this.put(new JSONArray(value));  return this;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public synchronized void needHeartBeat(){  threadsNeedingHeartBeat++;  progress.progress();  if (threadsNeedingHeartBeat == 1) {  }}  }
class C{  public WrappedRuntimeException(Exception e){  super(e.getMessage());  m_exception=e;}  }
class C{  public void unread(char ch) throws IOException {  this.currentReader.pbReader.unread(ch);}  }
class C{  public void removeFromLists(int key){  this.subjectArea.remove(key);  this.courseNbr.remove(key);  this.itype.remove(key);  this.classNumber.remove(key);}  }
class C{  @Override public String toString(){  return "m = " + m + ", t = "+ t+ " k_0 "+ k_0;}  }
class C{  public ScannerToken<? extends Object> readNextTerminal() throws IOException {  if (0 == fNumberOfBufferedTokens)   return fScanner.readNextTerminal(); else {    fNumberOfBufferedTokens--;    ScannerToken<? extends Object> t=fTokenQueue.remove(0);    return t;  }}  }
class C{  void compWriteObjectNotify(){  byte count=JComponent.getWriteObjCounter(this);  JComponent.setWriteObjCounter(this,(byte)(count + 1));  if (count != 0) {    return;  }  uninstallUIAndProperties();  if (getToolTipText() != null || this instanceof javax.swing.table.JTableHeader) {    ToolTipManager.sharedInstance().unregisterComponent(JComponent.this);  }}  }
class C{  private void reset(String TableName){  String sql="UPDATE " + TableName + " SET Processing='N' WHERE AD_Client_ID="+ p_AD_Client_ID+ " AND (Processing<>'N' OR Processing IS NULL)";  int unlocked=DB.executeUpdate(sql,get_TrxName());  sql="UPDATE " + TableName + " SET Posted='N' WHERE AD_Client_ID="+ p_AD_Client_ID+ " AND (Posted NOT IN ('Y','N') OR Posted IS NULL) AND Processed='Y'";  int invalid=DB.executeUpdate(sql,get_TrxName());  if (unlocked + invalid != 0)   log.fine(TableName + " - Unlocked=" + unlocked+ " - Invalid="+ invalid);  m_countReset+=unlocked + invalid;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public FastCharArrayReader(char buf[]){  this.buf=buf;  this.pos=0;  this.count=buf.length;}  }
class C{  public static synchronized void initialize(){  if (agent != null) {    return;  }  Config config=ConfigFactory.load();  boolean useBaggage=config.getBoolean("pivot-tracing.agent.use_baggage");  boolean useDynamic=config.getBoolean("pivot-tracing.agent.use_dynamic");  boolean emitIfNoResults=config.getBoolean("pivot-tracing.agent.emit_if_no_results");  String resultsTopic=config.getString("pivot-tracing.pubsub.results_topic");  int reportInterval=config.getInt("pivot-tracing.agent.report_interval_ms");  BaggageAPI baggageApi=useBaggage ? new BaggageAPIImpl() : new BaggageAPIDisabled();  EmitAPI emitApi=new EmitAPIImpl(reportInterval,resultsTopic,emitIfNoResults);  DynamicManager dynamic=useDynamic ? DynamicInstrumentation.get() : null;  agent=new PTAgent(baggageApi,emitApi,dynamic);  PrivilegedProxy.Register(agent);  System.out.println("Pivot Tracing initialized");}  }
class C{  public boolean meets(PressurizedInput input){  if (input == null || !input.isValid()) {    return false;  }  if (!(StackUtils.equalsWildcard(input.theSolid,theSolid) && input.theFluid.isFluidEqual(theFluid) && input.theGas.isGasEqual(theGas))) {    return false;  }  return input.theSolid.stackSize >= theSolid.stackSize && input.theFluid.amount >= theFluid.amount && input.theGas.amount >= theGas.amount;}  }
class C{  private int moveGap(int offset,int remove,int oldGapSize,int newGapSize,int newGapStart){  final int newGapEnd=newGapStart + newGapSize;  if (offset < fGapStart) {    int afterRemove=offset + remove;    if (afterRemove < fGapStart) {      final int betweenSize=fGapStart - afterRemove;      arrayCopy(afterRemove,fContent,newGapEnd,betweenSize);    }  } else {    final int offsetShifted=offset + oldGapSize;    final int betweenSize=offsetShifted - fGapEnd;    arrayCopy(fGapEnd,fContent,fGapStart,betweenSize);  }  return newGapEnd;}  }
class C{  private void drawHexView(final Graphics g){  final int standardSize=2 * getCharacterWidth(g);  final int firstX=(-m_firstColumn * m_charWidth) + m_paddingHexLeft + m_offsetViewWidth;  int x=firstX;  int y=m_paddingTop;  boolean evenColumn=true;  byte[] data=null;  int bytesToDraw;  if (m_status == DefinitionStatus.DEFINED) {    bytesToDraw=getBytesToDraw();    data=m_dataProvider.getData(getFirstVisibleOffset(),bytesToDraw);  } else {    bytesToDraw=getMaximumVisibleBytes();  }  long currentOffset=getFirstVisibleOffset();  for (int i=0; i < bytesToDraw; i++, currentOffset++) {    final ColoredRange range=findColoredRange(currentOffset);    if (i != 0) {      if ((i % m_bytesPerRow) == 0) {        x=firstX;        y+=m_rowHeight;        evenColumn=true;      } else       if ((i % m_bytesPerColumn) == 0) {        x+=m_columnSpacing;        evenColumn=!evenColumn;      }    }    if (isEnabled()) {      if (isSelectedOffset(currentOffset)) {        g.setColor(m_selectionColor);        g.fillRect(x,y - m_charHeight,2 * m_charWidth,m_charHeight + 2);        g.setColor(evenColumn ? m_fontColorHex1 : m_fontColorHex2);      } else       if ((range != null) && range.containsOffset(currentOffset)) {        final Color bgColor=range.getBackgroundColor();        if (bgColor != null) {          g.setColor(bgColor);        }        g.fillRect(x,y - m_charHeight,2 * m_charWidth,m_charHeight + 2);        if (range.getColor() != null) {          g.setColor(range.getColor());        } else {          g.setColor(evenColumn ? m_fontColorHex1 : m_fontColorHex2);        }      } else {        if ((m_colormap != null) && m_colormap.colorize(data,i)) {          final Color backgroundColor=m_colormap.getBackgroundColor(data,i);          final Color foregroundColor=m_colormap.getForegroundColor(data,i);          if (backgroundColor != null) {            g.setColor(backgroundColor);            g.fillRect(x,y - m_charHeight,2 * m_charWidth,m_charHeight + 2);          }          if (foregroundColor != null) {            g.setColor(foregroundColor);          }        } else {          g.setColor(evenColumn ? m_fontColorHex1 : m_fontColorHex2);        }      }    } else {      g.setColor(m_disabledColor != m_bgColorHex ? m_disabledColor : Color.WHITE);    }    if (m_status == DefinitionStatus.DEFINED) {      final int columnBytes=Math.min(m_dataProvider.getDataLength() - i,m_bytesPerColumn);      final int dataPosition=m_flipBytes ? ((i / m_bytesPerColumn) * m_bytesPerColumn) + (columnBytes - (i % columnBytes) - 1) : i;      g.drawString(HEX_BYTES[data[dataPosition] & 0xFF],x,y);    } else {      g.drawString("??",x,y);    }    x+=standardSize;  }}  }
class C{  public Node encode(mxCodec enc,Object obj){  String name=mxCodecRegistry.getName(obj);  Element node=enc.document.createElement(name);  if (obj instanceof mxStylesheet) {    mxStylesheet stylesheet=(mxStylesheet)obj;    Iterator<Map.Entry<String,Map<String,Object>>> it=stylesheet.getStyles().entrySet().iterator();    while (it.hasNext()) {      Map.Entry<String,Map<String,Object>> entry=it.next();      Element styleNode=enc.document.createElement("add");      String stylename=entry.getKey();      styleNode.setAttribute("as",stylename);      Map<String,Object> style=entry.getValue();      Iterator<Map.Entry<String,Object>> it2=style.entrySet().iterator();      while (it2.hasNext()) {        Map.Entry<String,Object> entry2=it2.next();        Element entryNode=enc.document.createElement("add");        entryNode.setAttribute("as",String.valueOf(entry2.getKey()));        entryNode.setAttribute("value",String.valueOf(entry2.getValue()));        styleNode.appendChild(entryNode);      }      if (styleNode.getChildNodes().getLength() > 0) {        node.appendChild(styleNode);      }    }  }  return node;}  }
class C{  public void endVisit(ArrayInitializer node){}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  @CanIgnoreReturnValue public static <T>T readLines(URL url,Charset charset,LineProcessor<T> callback) throws IOException {  return asCharSource(url,charset).readLines(callback);}  }
class C{  public boolean asksAllowsChildren(){  return asksAllowsChildren;}  }
class C{  public void mouseReleased(MouseEvent event){  tryPopup(event);}  }
class C{  private void findStabbedSegments(Coordinate stabbingRayLeftPt,DirectedEdge dirEdge,List stabbedSegments){  Coordinate[] pts=dirEdge.getEdge().getCoordinates();  for (int i=0; i < pts.length - 1; i++) {    seg.p0=pts[i];    seg.p1=pts[i + 1];    if (seg.p0.y > seg.p1.y)     seg.reverse();    double maxx=Math.max(seg.p0.x,seg.p1.x);    if (maxx < stabbingRayLeftPt.x)     continue;    if (seg.isHorizontal())     continue;    if (stabbingRayLeftPt.y < seg.p0.y || stabbingRayLeftPt.y > seg.p1.y)     continue;    if (CGAlgorithms.computeOrientation(seg.p0,seg.p1,stabbingRayLeftPt) == CGAlgorithms.RIGHT)     continue;    int depth=dirEdge.getDepth(Position.LEFT);    if (!seg.p0.equals(pts[i]))     depth=dirEdge.getDepth(Position.RIGHT);    DepthSegment ds=new DepthSegment(seg,depth);    stabbedSegments.add(ds);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-06 08:48:10.882 -0400",hash_original_method="5702A363D6AA8AC6DC93E3805C32E157",hash_generated_method="B62E1D2DA86DD6FBB9E0231DBC0CFAD3") private PrintDocumentInfo(){}  }
class C{  public CopySourceEdit(int offset,int length,CopyTargetEdit target){  this(offset,length);  setTargetEdit(target);}  }
class C{  public boolean isSetError(){  return this.error != null;}  }
class C{  public int hashCode(){  int hash=hashCode;  if (hash == 0) {    hash=1;    if (fullName != null) {      hash+=fullName.hashCode();    } else {      hash+=relativeName.hashCode();    }    hashCode=hash;  }  return hash;}  }
class C{  public DepthFirstSearch(int bound){  this.depthBound=bound;}  }
class C{  public DtoProductAssociationServiceImpl(final DtoFactory dtoFactory,final GenericService<ProductAssociation> productAssociationGenericService,final AdaptersRepository adaptersRepository){  super(dtoFactory,productAssociationGenericService,adaptersRepository);  productAssociationService=(ProductAssociationService)productAssociationGenericService;}  }
class C{  public void write(char[] cbuf,int off,int len) throws IOException {  if (len > 0) {    checkWrite();  }  super.write(cbuf,off,len);}  }
class C{  private String renderTupleExpr(TupleExpr theExpr) throws Exception {  SerqlTupleExprRenderer aRenderer=new SerqlTupleExprRenderer();  aRenderer.mProjection=new ArrayList<ProjectionElemList>(mProjection);  aRenderer.mDistinct=mDistinct;  aRenderer.mReduced=mReduced;  aRenderer.mExtensions=new HashMap<String,ValueExpr>(mExtensions);  aRenderer.mOrdering=new ArrayList<OrderElem>(mOrdering);  aRenderer.mLimit=mLimit;  aRenderer.mOffset=mOffset;  return aRenderer.render(theExpr);}  }
class C{  public static void drawToPng(final String dest,final AnnotatedTypeMirror type){  drawToPng(new File(dest),type);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected User(String username,String password){  super();  Assert.hasText(username,"Not allowed to create an User with an empty username");  Assert.hasText(password,"Not allowed to create an User with an empty password");  this.username=username;  this.password=password;}  }
class C{  int loadInt() throws IOException {  is.readFully(buf,0,4);  return luacLittleEndian ? (buf[3] << 24) | ((0xff & buf[2]) << 16) | ((0xff & buf[1]) << 8)| (0xff & buf[0]) : (buf[0] << 24) | ((0xff & buf[1]) << 16) | ((0xff & buf[2]) << 8)| (0xff & buf[3]);}  }
class C{  public static void registerFirewallContentObserver(Context context,ContentObserver observer){  context.getContentResolver().registerContentObserver(Uri.parse(String.format(FIREWALL_URI_STR,"")),true,observer);}  }
class C{  private byte[] readLineBytesSlowly(){  ByteArrayOutputStream bout=null;  while (true) {    ensureFill();    byte b=buf[count++];    if (b == '\r') {      ensureFill();      byte c=buf[count++];      if (c == '\n') {        break;      }      if (bout == null) {        bout=new ByteArrayOutputStream(16);      }      bout.write(b);      bout.write(c);    } else {      if (bout == null) {        bout=new ByteArrayOutputStream(16);      }      bout.write(b);    }  }  return bout == null ? new byte[0] : bout.toByteArray();}  }
class C{  public void addCommonBits(Geometry geom){  Translater trans=new Translater(commonCoord);  geom.apply(trans);  geom.geometryChanged();}  }
class C{  public X509Name(String dirName){  this(DefaultReverse,DefaultLookUp,dirName);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:39.977 -0500",hash_original_method="8F1CC5D4BDA427578EB68B001E341FDD",hash_generated_method="1276A69927832A306A1F253BA90ADEA6") public Builder detectNetwork(){  return enable(DETECT_NETWORK);}  }
class C{  public static CartFragment newInstance(boolean showTabBar){  CartFragment fragment=new CartFragment();  Bundle args=new Bundle();  args.putBoolean(SHOW_TAB_BAR,showTabBar);  fragment.setArguments(args);  return fragment;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean isUndefined(final Field destination,final Field source){  info=null;  for (  IOperationAnalyzer analyzer : analyzers)   if (analyzer.verifyConditions(destination,source))   info=analyzer.getInfoOperation(destination,source);  if (isNull(info))   info=undefinedOperation();  boolean conversionMethodExists=conversionAnalyzer.fieldsToCheck(destination,source);  OperationType operationType=info.getOperationType();  if (operationType.isUndefined() && !conversionMethodExists)   return true;  if (conversionMethodExists)   info.setInstructionType(operationType.isBasic() ? OperationType.BASIC_CONVERSION : OperationType.CONVERSION);  return false;}  }
class C{  public void addHeaderView(View header){  if (header == null) {    throw new IllegalArgumentException("header is null");  }  mHeaderViews.add(header);}  }
class C{  protected static Instances toInstances(JSONNode json,boolean onlyHeader){  Instances result;  JSONNode header;  JSONNode attributes;  JSONNode data;  ArrayList<Attribute> atts;  Attribute att;  Instance inst;  int i;  int classIndex;  boolean[] classAtt;  header=json.getChild(HEADER);  if (header == null) {    System.err.println("No '" + HEADER + "' section!");    return null;  }  data=json.getChild(DATA);  if (data == null) {    System.err.println("No '" + DATA + "' section!");    return null;  }  attributes=header.getChild(ATTRIBUTES);  if (attributes == null) {    System.err.println("No '" + ATTRIBUTES + "' array!");    return null;  }  atts=new ArrayList<Attribute>();  classAtt=new boolean[1];  classIndex=-1;  for (i=0; i < attributes.getChildCount(); i++) {    att=toAttribute((JSONNode)attributes.getChildAt(i),classAtt);    if (att == null) {      System.err.println("Could not convert attribute #" + (i + 1) + "!");      return null;    }    if (classAtt[0])     classIndex=i;    atts.add(att);  }  result=new Instances(header.getChild(RELATION).getValue("unknown").toString(),atts,(onlyHeader ? 0 : data.getChildCount()));  result.setClassIndex(classIndex);  if (!onlyHeader) {    for (i=0; i < data.getChildCount(); i++) {      inst=toInstance((JSONNode)data.getChildAt(i),result);      if (inst == null) {        System.err.println("Could not convert instance #" + (i + 1) + "!");        return null;      }      result.add(inst);    }  }  return result;}  }
class C{  public int increment(){  assert (error == null);  return isPair ? 2 : 1;}  }
class C{  public HttpClient(String url){  this.url=url;}  }
class C{  private void highlightLine(final NaviNode node,final INaviCodeNode codeNode,final double y){  final double yPos=y - node.getY();  final int row=node.positionToRow(yPos);  final INaviInstruction instruction=CCodeNodeHelpers.lineToInstruction(codeNode,row);  if (instruction == null) {    return;  }  if (m_highlightedInstructions.contains(instruction)) {    codeNode.setInstructionColor(instruction,CHighlightLayers.HIGHLIGHTING_LAYER,null);    m_highlightedInstructions.remove(instruction);  } else {    codeNode.setInstructionColor(instruction,CHighlightLayers.HIGHLIGHTING_LAYER,new Color(0x36D0FE));    m_highlightedInstructions.add(instruction);  }}  }
class C{  public String toString(){  return this.getClass().getName() + "(" + tau+ ")";}  }
class C{  private static long mixK1(long k1){  k1*=C1;  k1=Long.rotateLeft(k1,31);  k1*=C2;  return k1;}  }
class C{  private void invalidateCachedDurationForContainerSuites(){  myDuration=null;  myDurationIsCached=false;  final SMTestProxy containerSuite=getParent();  if (containerSuite != null) {    containerSuite.invalidateCachedDurationForContainerSuites();  }}  }
class C{  public void enableUserDefinedRPC(){  int enabledRpc=scannerParam.getTargetParamsEnabledRPC();  enabledRpc|=ScannerParam.RPC_USERDEF;  scannerParam.setTargetParamsEnabledRPC(enabledRpc);}  }
class C{  public static String requestPath(URL url){  String fileOnly=url.getFile();  if (fileOnly == null) {    return "/";  } else   if (!fileOnly.startsWith("/")) {    return "/" + fileOnly;  } else {    return fileOnly;  }}  }
class C{  protected Packet(short packettype){  sig=new byte[]{'X','B','M','C'};  minver=0;  majver=2;  this.packettype=packettype;}  }
class C{  public static void write(CharSequence data,Writer output) throws IOException {  if (data != null) {    write(data.toString(),output);  }}  }
class C{  void removePhiInput(int j){  assert (OP_phi == this.op);  Expr[] a=new Expr[args.length - 1];  System.arraycopy(args,0,a,0,j);  System.arraycopy(args,j + 1,a,j,args.length - j - 1);  args=a;  Edge[] ed=new Edge[pred.length - 1];  System.arraycopy(pred,0,ed,0,j);  System.arraycopy(pred,j + 1,ed,j,pred.length - j - 1);  pred=ed;}  }
class C{  private void copyAndShift(Object src,long off,int len){  ensureCapacity(pos + len);  GridUnsafe.copyMemory(src,off,null,data + pos,len);  shift(len);}  }
class C{  public String toString(){  return ":" + getValue();}  }
class C{  public static long parseOctal(byte[] header,int offset,int length){  long result=0;  boolean stillPadding=true;  int end=offset + length;  for (int i=offset; i < end; ++i) {    if (header[i] == 0) {      break;    }    if (header[i] == (byte)' ' || header[i] == '0') {      if (stillPadding) {        continue;      }      if (header[i] == (byte)' ') {        break;      }    }    stillPadding=false;    result=(result << 3) + (header[i] - '0');  }  return result;}  }
class C{  private PartialTextMatchRule(final String field,final String value){  super();  if (!RESOLVER.isField(field)) {    throw new IllegalArgumentException("Invalid partial text rule - " + field + " is not a supported field");  }  this.field=field;  this.value=value;}  }
class C{  public static Double toRef(double d){  return new Double(d);}  }
class C{  public TimeSeriesTableModel(TimeSeries series,boolean editable){  this.series=series;  this.series.addChangeListener(this);  this.editable=editable;}  }
class C{  public DividerItemDecoration(Context context){  final TypedArray styledAttributes=context.obtainStyledAttributes(ATTRS);  mDivider=styledAttributes.getDrawable(0);  styledAttributes.recycle();}  }
class C{  public ColumnInfo(String colHeader,String colSQL,Class<?> colClass){  this(colHeader,colSQL,colClass,true,false,null);}  }
class C{  public void ifPresentOrElse(Consumer<? super T> action,Runnable emptyAction){  if (value != null) {    action.accept(value);  } else {    emptyAction.run();  }}  }
class C{  public void reset(){  packetCount=0;  octetCount=0;  setLong(packetCount,20,24);  setLong(octetCount,24,28);  delta=now=oldnow=0;}  }
class C{  public static void bindBack(Form currentForm,LazyValue<Form> destination){  new SwipeBackSupport().bind(currentForm,destination);}  }
class C{  public void testForInfiniteLoop(){  MonthlyCalendar monthlyCalendar=new MonthlyCalendar();  for (int i=1; i < 9; i++) {    monthlyCalendar.setDayExcluded(i,true);  }  Calendar c=Calendar.getInstance();  c.set(2007,11,8,12,0,0);  monthlyCalendar.getNextIncludedTime(c.getTime().getTime());}  }
class C{  public DriverPropertyInfo(String name,String value){  this.name=name;  this.value=value;}  }
class C{  public Timeline end(){  if (isBuilt)   throw new RuntimeException("You can't push anything to a timeline once it is started");  if (current == this)   throw new RuntimeException("Nothing to end...");  current=current.parent;  return this;}  }
class C{  static void errorMissingAttribute(String systemID,int lineNr,String elementName,String attributeName) throws XMLValidationException {  throw new XMLValidationException(XMLValidationException.MISSING_ATTRIBUTE,systemID,lineNr,elementName,attributeName,null,"Element " + elementName + " expects an attribute named "+ attributeName);}  }
class C{  private boolean pushLimitIntoOrder(Mutable<ILogicalOperator> opRef,Mutable<ILogicalOperator> opRef2,IOptimizationContext context) throws AlgebricksException {  PhysicalOptimizationConfig physicalOptimizationConfig=context.getPhysicalOptimizationConfig();  LimitOperator limitOp=(LimitOperator)opRef.getValue();  OrderOperator orderOp=(OrderOperator)opRef2.getValue();  long topK=-1;  if (orderOp.getPhysicalOperator().getOperatorTag() != PhysicalOperatorTag.STABLE_SORT) {    return false;  }  if (limitOp.getMaxObjects().getValue().getExpressionTag() == LogicalExpressionTag.CONSTANT) {    topK=AccessMethodUtils.getInt64Constant(limitOp.getMaxObjects());    if (topK > Integer.MAX_VALUE) {      return false;    }    if (topK < 0) {      topK=0;    }  } else {    return false;  }  if (limitOp.getOffset().getValue() != null) {    if (limitOp.getOffset().getValue().getExpressionTag() == LogicalExpressionTag.CONSTANT) {      long offset=AccessMethodUtils.getInt64Constant(limitOp.getOffset());      if (offset < 0) {        offset=0;      }      if (offset >= Integer.MAX_VALUE - topK) {        return false;      }      topK+=offset;    } else {      return false;    }  }  OrderOperator newOrderOp=new OrderOperator(orderOp.getOrderExpressions(),(int)topK);  newOrderOp.setPhysicalOperator(new StableSortPOperator(physicalOptimizationConfig.getMaxFramesExternalSort(),newOrderOp.getTopK()));  newOrderOp.getInputs().addAll(orderOp.getInputs());  newOrderOp.setExecutionMode(orderOp.getExecutionMode());  newOrderOp.recomputeSchema();  newOrderOp.computeDeliveredPhysicalProperties(context);  opRef2.setValue(newOrderOp);  context.computeAndSetTypeEnvironmentForOperator(newOrderOp);  context.addToDontApplySet(this,limitOp);  return true;}  }
class C{  public static void main(String[] args) throws IOException, SAXException, ParserConfigurationException {  final Pattern filter=getRequiredPerformanceCountersFilter();  System.err.println("required counter pattern: " + filter);  final CounterSet counterSet=new CounterSet();  for (  String s : args) {    final File file=new File(s);    readCountersFromFile(file,counterSet,filter,new DefaultInstrumentFactory(60,PeriodEnum.Minutes,false));  }  System.out.println("counters: " + counterSet.asXML(null));}  }
class C{  public synchronized void attachManagedResources(String routerPath,Router router){  if (SCHEMA_BASE_PATH.equals(routerPath)) {    this.schemaRouter=router;  } else {    throw new SolrException(ErrorCode.SERVER_ERROR,routerPath + " not supported by the RestManager");  }  int numAttached=0;  for (  String resourceId : managed.keySet()) {    if (resourceId.startsWith(routerPath)) {      String path=resourceId.substring(routerPath.length());      attachManagedResource(managed.get(resourceId),path,router);      ++numAttached;    }  }  log.info("Attached {} ManagedResource endpoints to Restlet router: {}",numAttached,routerPath);}  }
class C{  protected double updateCloudetProcessingWithoutSchedulingFutureEventsForce(){  double currentTime=CloudSim.clock();  double minTime=Double.MAX_VALUE;  double timeDiff=currentTime - getLastProcessTime();  double timeFrameDatacenterEnergy=0.0;  Log.printLine("\n\n--------------------------------------------------------------\n\n");  Log.formatLine("Power data center: New resource usage for the time frame starting at %.2f:",currentTime);  for (  PowerContainerHost host : this.<PowerContainerHost>getHostList()) {    Log.printLine();    double time=host.updateContainerVmsProcessing(currentTime);    if (time < minTime) {      minTime=time;    }    Log.formatLine("%.2f: [Host #%d] utilization is %.2f%%",currentTime,host.getId(),host.getUtilizationOfCpu() * 100);  }  if (timeDiff > 0) {    Log.formatLine("\nEnergy consumption for the last time frame from %.2f to %.2f:",getLastProcessTime(),currentTime);    for (    PowerContainerHost host : this.<PowerContainerHost>getHostList()) {      double previousUtilizationOfCpu=host.getPreviousUtilizationOfCpu();      double utilizationOfCpu=host.getUtilizationOfCpu();      double timeFrameHostEnergy=host.getEnergyLinearInterpolation(previousUtilizationOfCpu,utilizationOfCpu,timeDiff);      timeFrameDatacenterEnergy+=timeFrameHostEnergy;      Log.printLine();      Log.formatLine("%.2f: [Host #%d] utilization at %.2f was %.2f%%, now is %.2f%%",currentTime,host.getId(),getLastProcessTime(),previousUtilizationOfCpu * 100,utilizationOfCpu * 100);      Log.formatLine("%.2f: [Host #%d] energy is %.2f W*sec",currentTime,host.getId(),timeFrameHostEnergy);    }    Log.formatLine("\n%.2f: Data center's energy is %.2f W*sec\n",currentTime,timeFrameDatacenterEnergy);    getDatacenterEnergyList().add(timeFrameDatacenterEnergy);  }  setPower(getPower() + timeFrameDatacenterEnergy);  String[] msg={Double.toString(currentTime),Double.toString(getPower())};  try {    getDatacenterEnergyWriter().writeTofile(msg);  } catch (  IOException e) {    e.printStackTrace();  }  checkCloudletCompletion();  int numberOfActiveHosts=0;  for (  PowerContainerHost host : this.<PowerContainerHost>getHostList()) {    for (    ContainerVm vm : host.getCompletedVms()) {      getVmAllocationPolicy().deallocateHostForVm(vm);      getContainerVmList().remove(vm);      Log.printLine(String.format("VM #%d has been deallocated from host #%d",vm.getId(),host.getId()));    }    if (host.getVmList().size() != 0) {      numberOfActiveHosts++;    }  }  updateNumberOfVmsContainers();  getActiveHostList().add((double)numberOfActiveHosts);  int numberOfActiveVms=getNumberOfVms();  getActiveVmList().add((double)numberOfActiveVms);  int numberOfContainers=getNumberOfContainers();  Log.print(String.format("The number of Containers Up and running is %d",numberOfContainers));  Log.printLine();  Log.print(String.format("The number of Vms Up and running is %d",numberOfActiveVms));  Log.printLine();  Log.print(String.format("The number of Hosts Up and running is %d",numberOfActiveHosts));  Log.printLine();  setLastProcessTime(currentTime);  return minTime;}  }
class C{  @Override public boolean filter(long tweet){  return bipartiteGraph.getRightNodeDegree(tweet) < minEngagement;}  }
class C{  @Override public int read() throws IOException {  if (buf == null) {    throw new IOException();  }  if (pos < buf.length) {    return (buf[pos++] & 0xFF);  }  return in.read();}  }
class C{  public void estimateActivities(String filename,double radius){  int lineCounter=0;  int lineMultiplier=1;  try {    Scanner input=new Scanner(new BufferedReader(new FileReader(new File(filename))));    input.nextLine();    while (input.hasNextLine()) {      if (lineCounter == lineMultiplier) {        log.info("Number of activities processed: " + lineCounter);        lineMultiplier*=2;      }      String[] line=input.nextLine().split(",");      double x=Double.parseDouble(line[1]);      double y=Double.parseDouble(line[2]);      int position=line[3].indexOf("H");      int hour=Integer.parseInt(line[3].substring(position - 2,position));      Collection<MyGridCell> cells=grid.getDisk(x,y,radius);      float value=((float)1) / ((float)cells.size());      for (      MyGridCell cell : cells) {        cell.addToTotalCount(value);        cell.addToHourCount(hour,value);      }      lineCounter++;    }  } catch (  FileNotFoundException e) {    e.printStackTrace();  }  log.info("Number of activities processed: " + lineCounter + " (Completed)");}  }
class C{  public int nextInt(){  return nextInt(this.mean);}  }
class C{  public static boolean isValidIfd(int ifdId){  return ifdId == IfdId.TYPE_IFD_0 || ifdId == IfdId.TYPE_IFD_1 || ifdId == IfdId.TYPE_IFD_EXIF || ifdId == IfdId.TYPE_IFD_INTEROPERABILITY || ifdId == IfdId.TYPE_IFD_GPS;}  }
class C{  public boolean isValid(){  return (min <= max);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof IntervalXYDelegate)) {    return false;  }  IntervalXYDelegate that=(IntervalXYDelegate)obj;  if (this.autoWidth != that.autoWidth) {    return false;  }  if (this.intervalPositionFactor != that.intervalPositionFactor) {    return false;  }  if (this.fixedIntervalWidth != that.fixedIntervalWidth) {    return false;  }  return true;}  }
class C{  protected void onGLContextCreated(GL10 gl){}  }
class C{  public SearchRequestBuilder addAggregation(AbstractAggregationBuilder aggregation){  sourceBuilder().aggregation(aggregation);  return this;}  }
class C{  public CTagSortingHandler(){  super(CTagTransferable.TAG_FLAVOR);}  }
class C{  public boolean isCostingLevelOrg(){  return COSTINGLEVEL_Organization.equals(getCostingLevel());}  }
class C{  protected void createShape(DrawContext dc){  Globe globe=dc.getGlobe();  Vec4 pt1=globe.computePointFromLocation(this.position1);  Vec4 pt2=globe.computePointFromLocation(this.position2);  Vec4 pt3=globe.computePointFromLocation(this.position3);  LatLon mid=LatLon.interpolateGreatCircle(0.5,this.position1,this.position2);  Vec4 ptMid=globe.computePointFromLocation(mid);  Vec4 offset=pt3.subtract3(ptMid);  double width=pt1.subtract3(pt2).getLength3();  double length=offset.getLength3();  double distance=Math.min(width,length) * this.getCurvature();  Vec4 ptCorner1=pt1.add3(offset);  Vec4 ptCorner2=pt2.add3(offset);  List<Position> positions=new ArrayList<Position>();  int intervals=this.getIntervals();  positions.add(this.position1);  this.computeRoundCorner(globe,positions,pt1,ptCorner1,pt3,distance,intervals);  positions.add(this.position3);  this.computeRoundCorner(globe,positions,pt3,ptCorner2,pt2,distance,intervals);  positions.add(this.position2);  this.path=this.createPath();  this.path.setPositions(positions);}  }
class C{  @Override public void updateTimestamp(String columnLabel,Timestamp x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateTimestamp(" + quote(columnLabel) + ", x);");    }    update(columnLabel,x == null ? (Value)ValueNull.INSTANCE : ValueTimestamp.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  protected void addFragment(int containerViewId,Fragment fragment,boolean addToBackStack){  if (containerViewId > -1 && fragment != null) {    FragmentTransaction ft=getSupportFragmentManager().beginTransaction();    ft.add(containerViewId,fragment,fragment.getClass().getName());    if (addToBackStack) {      ft.addToBackStack(null);    }    ft.commit();  }}  }
class C{  private boolean bothLinksHaveSameLinkStats(Link linkA,Link linkB){  boolean bothLinksHaveSameLinkStats=true;  if (!linkA.getAllowedModes().equals(linkB.getAllowedModes())) {    bothLinksHaveSameLinkStats=false;  }  if (linkA.getFreespeed() != linkB.getFreespeed()) {    bothLinksHaveSameLinkStats=false;  }  if (linkA.getCapacity() != linkB.getCapacity()) {    bothLinksHaveSameLinkStats=false;  }  if (linkA.getNumberOfLanes() != linkB.getNumberOfLanes()) {    bothLinksHaveSameLinkStats=false;  }  return bothLinksHaveSameLinkStats;}  }
class C{  protected final void writeOut(byte[] data) throws IOException {  writeOut(data,0,data.length);}  }
class C{  protected boolean testRanges(char ch){  int range_size=ranges.size();  if (range_size == 0) {    return false;  } else   if (range_size == 1) {    return ranges.get(0).includes(ch);  } else {    int pos=find(ch);    if ((pos != range_size) && ranges.get(pos).includes(ch)) {      return true;    }    if ((pos != 0) && ranges.get(pos - 1).includes(ch)) {      return true;    }    return false;  }}  }
class C{  private void testLobStaysOpenUntilCommitted() throws Exception {  Connection conn=getConnection();  stat=conn.createStatement();  stat.execute("create table test(id identity, c clob, b blob)");  PreparedStatement prep=conn.prepareStatement("insert into test values(null, ?, ?)");  prep.setString(1,"");  prep.setBytes(2,new byte[0]);  prep.execute();  Random r=new Random(1);  char[] chars=new char[100000];  for (int i=0; i < chars.length; i++) {    chars[i]=(char)r.nextInt(10000);  }  String d=new String(chars);  prep.setCharacterStream(1,new StringReader(d),-1);  byte[] bytes=new byte[100000];  r.nextBytes(bytes);  prep.setBinaryStream(2,new ByteArrayInputStream(bytes),-1);  prep.execute();  conn.setAutoCommit(false);  ResultSet rs=stat.executeQuery("select * from test order by id");  rs.next();  Clob c1=rs.getClob(2);  Blob b1=rs.getBlob(3);  rs.next();  Clob c2=rs.getClob(2);  Blob b2=rs.getBlob(3);  assertFalse(rs.next());  rs.close();  assertEquals(0,c1.length());  assertEquals(0,b1.length());  assertEquals(chars.length,c2.length());  assertEquals(bytes.length,b2.length());  assertEquals("",c1.getSubString(1,0));  assertEquals(new byte[0],b1.getBytes(1,0));  assertEquals(d,c2.getSubString(1,(int)c2.length()));  assertEquals(bytes,b2.getBytes(1,(int)b2.length()));  stat.execute("drop table test");  conn.close();}  }
class C{  private static CreateVmResponse checkCreateVmResponse(CreateVmResponse createVmResponse) throws RpcException {  logger.info("Checking {}",createVmResponse);switch (createVmResponse.getResult()) {case OK:    break;case DISK_NOT_FOUND:  throw new DiskNotFoundException(createVmResponse.getError());case IMAGE_NOT_FOUND:throw new ImageNotFoundException(createVmResponse.getError());case INVALID_RESERVATION:throw new InvalidReservationException(createVmResponse.getError());case NETWORK_NOT_FOUND:throw new NetworkNotFoundException(createVmResponse.getError());case SYSTEM_ERROR:throw new SystemErrorException(createVmResponse.getError());default :throw new RpcException(String.format("Unknown result: %s",createVmResponse.getResult()));}return createVmResponse;}  }
class C{  private void close(){  Window window=getWindow();  if (window != null) {    window.dispatchEvent(new WindowEvent(window,WindowEvent.WINDOW_CLOSING));  }}  }
class C{  public NotBoundException(String s){  super(s);}  }
class C{  public static InputStream toInputStream(String input){  return toInputStream(input,Charset.defaultCharset());}  }
class C{  protected static ExifParser parse(InputStream inputStream,int options,ExifInterface iRef) throws IOException, ExifInvalidFormatException {  return new ExifParser(inputStream,options,iRef);}  }
class C{  protected static void drawDataPoint(double x,double y,double xprev,double yprev,int size,int shape,Graphics gx){  drawDataPoint(x,y,size,shape,gx);  gx.drawLine((int)x,(int)y,(int)xprev,(int)yprev);}  }
class C{  public void notifySelectedAreasChanged(boolean isSet){  if (isSet) {    if (sasPanelState == sasPanelState.GONE) {      slideSas(SasPanelState.FULL);    }  } else {    slideSas(SasPanelState.GONE);  }}  }
class C{  public ByDay(Integer num,DayOfWeek day){  this.num=num;  this.day=day;}  }
class C{  @Override protected EClass eStaticClass(){  return SGraphPackage.Literals.CHOICE;}  }
class C{  static boolean paramNameMatchesRegex(String paramName,String paramRegex){  assert paramRegex.charAt(0) == '/';  assert paramRegex.charAt(paramRegex.length() - 1) == '/';  assert paramRegex.length() > 2;  String regex=paramRegex.substring(1,paramRegex.length() - 1);  return Pattern.compile(regex).matcher(paramName).find();}  }
class C{  @Override public void close(){  setHosting(false);}  }
class C{  public boolean isDisplayValues(){  return mDisplayValues;}  }
class C{  private boolean journalRebuildRequired(){  final int redundantOpCompactThreshold=2000;  return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.size();}  }
class C{  public boolean verify(byte[] signature){  if (forSigning) {    throw new IllegalStateException("RainbowDigestSigner not initialised for verification");  }  byte[] hash=new byte[messDigest.getDigestSize()];  messDigest.doFinal(hash,0);  return messSigner.verifySignature(hash,signature);}  }
class C{  public void doFilter(ServletRequest request,ServletResponse response,FilterChain filterChain) throws IOException, ServletException {  HttpServletRequest httpRequest=(HttpServletRequest)request;  String entidad=null;  if (SesionHelper.authenticate(httpRequest)) {    entidad=SesionHelper.getEntidad(httpRequest);  }  if (entidad != null) {    httpRequest.getSession().setAttribute(ConstantesGestionUsuariosAdministracion.PARAMETRO_ID_ENTIDAD,entidad);  }  String oEntidad=(String)httpRequest.getSession().getAttribute(ConstantesGestionUsuariosAdministracion.PARAMETRO_ID_ENTIDAD);  MultiEntityContextHolder.setEntity(oEntidad);  filterChain.doFilter(request,response);}  }
class C{  protected static String copyRequestAttributeToURLParam(HttpServletRequest httpRequest,String attribute,String url){  String value=(String)httpRequest.getAttribute(attribute);  if (value != null) {    if (url.indexOf(attribute) == -1) {      char appendChar=(url.indexOf('?') == -1) ? '?' : '&';      url+=(appendChar + attribute + "="+ value);    }  }  return url;}  }
class C{  private float strokeWidth(long width){  if (prefs != null)   return Math.min(prefs.getMaxStrokeWidth(),STROKE_FACTOR / width);  return STROKE_FACTOR / width;}  }
class C{  private Offer findOffer(final Long id){  return ofy().load().type(Offer.class).id(id).now();}  }
class C{  public static void makeFiles(ArrayList<File> d) throws FileNotFoundException {  for (int i=0; i < d.size(); i++) {    makeFiles(3,d.get(i),"TestJavafile",".java");    makeFiles(2,d.get(i),"TestTextfile",".txt");    makeFiles(2,d.get(i),"TestDatfile",".dat");  }}  }
class C{  protected void addBackupsToRestoreRequestBuffer(FbService service,ServiceRequestBuffer restoreSPB){  for (  PathSizeStruct pathSize : backupPaths) {    restoreSPB.addArgument(isc_spb_bkp_file,pathSize.getPath());  }}  }
class C{  public void addTypeEqualities(TypeVariable target,AnnotatedTypeMirror type,Set<AnnotationMirror> hierarchies){  final Equalities equalities=targetToRecords.get(target).equalities;  final Set<AnnotationMirror> equalityTops=equalities.types.get(type);  if (equalityTops == null) {    equalities.types.put(type,new HashSet<>(hierarchies));  } else {    equalityTops.addAll(hierarchies);  }}  }
class C{  private void toString(StringBuilder acc,int prec,boolean expand){  if (this.meta != null && !expand) {    acc.append(this.meta);    return;  }  boolean paren=op.getPrec() < prec;  if (paren)   acc.append('(');  toString(acc,expand);  if (paren)   acc.append(')');}  }
class C{  public Duration minus(long amount){  return withDurationAdded(amount,-1);}  }
class C{  static public Cylinder computeBoundingCylinder(Globe globe,double verticalExaggeration,Sector sector){  if (globe == null) {    String msg=Logging.getMessage("nullValue.GlobeIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (sector == null) {    String msg=Logging.getMessage("nullValue.SectorIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  double[] minAndMaxElevations=globe.getMinAndMaxElevations(sector);  return computeBoundingCylinder(globe,verticalExaggeration,sector,minAndMaxElevations[0],minAndMaxElevations[1]);}  }
class C{  @Override public V put(int key,@NotNull V value){  return put(key,value,false);}  }
class C{  public static DAOPortfolio newInstance(){  try {    final DAOPortfolio returnInstance=new DAOPortfolio();    DAOPortfolio code=null;    for (Iterator<Decode> iterCodes=returnInstance.getCodesDecodes().iterator(); iterCodes.hasNext(); ) {      code=(DAOPortfolio)iterCodes.next();      Portfolio portfolio=(Portfolio)code.getObject();      if (portfolio.getIsDefault())       return code;    }    if (null == code) {      code=returnInstance;    }    return code;  } catch (  ValueTypeException e) {    return null;  }}  }
class C{  public CActionOpenScriptingDialog(final JFrame parent){  super("New Scripting Window");  m_parent=Preconditions.checkNotNull(parent,"IE01846: Parent argument can not be null");  putValue(MNEMONIC_KEY,(int)"HK_MENU_SCRIPTING".charAt(0));}  }
class C{  public GemFireCheckedException(String message,Throwable cause){  super(message);  this.initCause(cause);}  }
class C{  protected IssueCommentsEntry insertComment(URL commentsFeedUrl,IssueCommentsEntry entry) throws IOException, ServiceException {  return service.insert(commentsFeedUrl,entry);}  }
class C{  @Override protected InfixExpression createCorrectOddnessCheck(ASTRewrite rewrite,Expression numberExpression){  Assert.isNotNull(rewrite);  Assert.isNotNull(numberExpression);  final AST ast=rewrite.getAST();  InfixExpression andOddnessCheck=ast.newInfixExpression();  ParenthesizedExpression parenthesizedExpression=ast.newParenthesizedExpression();  InfixExpression andExpression=ast.newInfixExpression();  andExpression.setLeftOperand((Expression)rewrite.createMoveTarget(numberExpression));  andExpression.setOperator(AND);  andExpression.setRightOperand(ast.newNumberLiteral("1"));  parenthesizedExpression.setExpression(andExpression);  andOddnessCheck.setLeftOperand(parenthesizedExpression);  andOddnessCheck.setOperator(EQUALS);  andOddnessCheck.setRightOperand(ast.newNumberLiteral("1"));  return andOddnessCheck;}  }
class C{  static void appendConstant(final StringBuffer buf,final Object cst){  if (cst == null) {    buf.append("null");  } else   if (cst instanceof String) {    appendString(buf,(String)cst);  } else   if (cst instanceof Type) {    buf.append("Type.getType(\"");    buf.append(((Type)cst).getDescriptor());    buf.append("\")");  } else   if (cst instanceof Handle) {    buf.append("new Handle(");    Handle h=(Handle)cst;    buf.append("Opcodes.").append(HANDLE_TAG[h.getTag()]).append(", \"");    buf.append(h.getOwner()).append("\", \"");    buf.append(h.getName()).append("\", \"");    buf.append(h.getDesc()).append("\")");  } else   if (cst instanceof Byte) {    buf.append("new Byte((byte)").append(cst).append(')');  } else   if (cst instanceof Boolean) {    buf.append(((Boolean)cst).booleanValue() ? "Boolean.TRUE" : "Boolean.FALSE");  } else   if (cst instanceof Short) {    buf.append("new Short((short)").append(cst).append(')');  } else   if (cst instanceof Character) {    int c=((Character)cst).charValue();    buf.append("new Character((char)").append(c).append(')');  } else   if (cst instanceof Integer) {    buf.append("new Integer(").append(cst).append(')');  } else   if (cst instanceof Float) {    buf.append("new Float(\"").append(cst).append("\")");  } else   if (cst instanceof Long) {    buf.append("new Long(").append(cst).append("L)");  } else   if (cst instanceof Double) {    buf.append("new Double(\"").append(cst).append("\")");  } else   if (cst instanceof byte[]) {    byte[] v=(byte[])cst;    buf.append("new byte[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]);    }    buf.append('}');  } else   if (cst instanceof boolean[]) {    boolean[] v=(boolean[])cst;    buf.append("new boolean[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]);    }    buf.append('}');  } else   if (cst instanceof short[]) {    short[] v=(short[])cst;    buf.append("new short[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append("(short)").append(v[i]);    }    buf.append('}');  } else   if (cst instanceof char[]) {    char[] v=(char[])cst;    buf.append("new char[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append("(char)").append((int)v[i]);    }    buf.append('}');  } else   if (cst instanceof int[]) {    int[] v=(int[])cst;    buf.append("new int[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]);    }    buf.append('}');  } else   if (cst instanceof long[]) {    long[] v=(long[])cst;    buf.append("new long[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]).append('L');    }    buf.append('}');  } else   if (cst instanceof float[]) {    float[] v=(float[])cst;    buf.append("new float[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]).append('f');    }    buf.append('}');  } else   if (cst instanceof double[]) {    double[] v=(double[])cst;    buf.append("new double[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]).append('d');    }    buf.append('}');  }}  }
class C{  protected void basicProcess(final DM dm,final boolean waitForGrantor){  final boolean isDebugEnabled_DLS=logger.isTraceEnabled(LogMarker.DLS);  if (isDebugEnabled_DLS) {    logger.trace(LogMarker.DLS,"[basicProcess] {}",this);  }  final DLockQueryReplyMessage replyMsg=new DLockQueryReplyMessage();  replyMsg.setProcessorId(this.processorId);  replyMsg.setRecipient(getSender());  replyMsg.replyCode=DLockQueryReplyMessage.NOT_GRANTOR;  replyMsg.lesseeThread=null;  replyMsg.leaseId=DLockService.INVALID_LEASE_ID;  replyMsg.leaseExpireTime=0;  try {    if (svc == null || svc.isDestroyed())     return;    if (waitForGrantor) {      try {        this.grantor=DLockGrantor.waitForGrantor(this.svc);      } catch (      InterruptedException e) {        Thread.currentThread().interrupt();        this.grantor=null;      }    }    if (grantor == null || grantor.isDestroyed()) {      return;    }    if (lockBatch) {      throw new UnsupportedOperationException("DLockQueryProcessor does not support lock batches");    } else {      DLockGrantToken grantToken;      try {        grantToken=grantor.handleLockQuery(this);      } catch (      InterruptedException e) {        Thread.currentThread().interrupt();        grantToken=null;      }      if (grantToken != null) {synchronized (grantToken) {          if (!grantToken.isDestroyed()) {            replyMsg.lesseeThread=grantToken.getRemoteThread();            replyMsg.leaseId=grantToken.getLockId();            replyMsg.leaseExpireTime=grantToken.getLeaseExpireTime();          }        }      }    }    replyMsg.replyCode=DLockQueryReplyMessage.OK;  } catch (  LockGrantorDestroyedException ignore) {  }catch (  LockServiceDestroyedException ignore) {  }catch (  RuntimeException e) {    replyMsg.setException(new ReplyException(e));    if (isDebugEnabled_DLS) {      logger.trace(LogMarker.DLS,"[basicProcess] caught RuntimeException",e);    }  }catch (  VirtualMachineError err) {    SystemFailure.initiateFailure(err);    throw err;  }catch (  Error e) {    SystemFailure.checkFailure();    replyMsg.setException(new ReplyException(e));    if (isDebugEnabled_DLS) {      logger.trace(LogMarker.DLS,"[basicProcess] caught Error",e);    }  } finally {    if (dm.getId().equals(getSender())) {      replyMsg.setSender(getSender());      replyMsg.dmProcess(dm);    } else {      dm.putOutgoing(replyMsg);    }  }}  }
class C{  private static String searchDirectories(final File[] paths,final String[] exeNames){  for (  final File path : paths) {    if (path.exists()) {      for (      final File subDirectory : path.listFiles()) {        if (StringUtils.startsWith(subDirectory.getName(),TF_DIRECTORY_PREFIX) && subDirectory.isDirectory()) {          final String verifiedPath=checkTfPath(subDirectory.getPath(),exeNames);          if (verifiedPath != null) {            return verifiedPath;          }        }      }    }  }  return null;}  }
class C{  public void testZipDeflateInflateStress() throws Exception {  final int DATA_SIZE=16384;  Random random=new Random(42);  for (int j=1; j <= 2; j++) {    byte[] input=new byte[DATA_SIZE];    if (j == 1) {      random.nextBytes(input);    } else {      int pos=0;      while (pos < input.length) {        byte what=(byte)random.nextInt(256);        int howMany=random.nextInt(32);        if (pos + howMany >= input.length) {          howMany=input.length - pos;        }        Arrays.fill(input,pos,pos + howMany,what);        pos+=howMany;      }    }    for (int i=1; i <= 9; i++) {      System.out.println("ZipDeflateInflateStress test (" + j + ","+ i+ ")...");      byte[] zipped=new byte[2 * DATA_SIZE];      Deflater deflater=new Deflater(i);      deflater.setInput(input);      deflater.finish();      deflater.deflate(zipped);      deflater.end();      byte[] output=new byte[DATA_SIZE];      Inflater inflater=new Inflater();      inflater.setInput(zipped);      inflater.finished();      inflater.inflate(output);      inflater.end();      assertEquals(input,output);    }  }}  }
class C{  @Override public void undo(){  File tempFile;  Instances inst;  ObjectInputStream ooi;  if (canUndo()) {    tempFile=m_UndoList.get(m_UndoList.size() - 1);    try {      ooi=new ObjectInputStream(new BufferedInputStream(new FileInputStream(tempFile)));      inst=(Instances)ooi.readObject();      ooi.close();      setInstances(inst);      notifyListener(new TableModelEvent(this,TableModelEvent.HEADER_ROW));      notifyListener(new TableModelEvent(this));    } catch (    Exception e) {      e.printStackTrace();    }    tempFile.delete();    m_UndoList.remove(m_UndoList.size() - 1);  }}  }
class C{  public void sendReject(long refSeqNum,long sessionRejectReason,CharSequence text) throws IOException {  prepare(txMessage,Reject);  txMessage.addField(RefSeqNum).setInt(refSeqNum);  txMessage.addField(SessionRejectReason).setInt(sessionRejectReason);  txMessage.addField(Text).setString(text);  send(txMessage);}  }
class C{  public void updateAccess(boolean chat,boolean editor,boolean commercial,boolean user,boolean subs,boolean follow){  boolean empty=currentUsername.isEmpty() || currentToken.isEmpty();  access.setVisible(!empty);  accessLabel.setVisible(!empty);  StringBuilder b=new StringBuilder("<html><body style='line-height:28px;'>");  b.append(accessStatusImage(chat)).append("&nbsp;Chat access<br />");  b.append(accessStatusImage(user)).append("&nbsp;Read user info<br />");  b.append(accessStatusImage(editor)).append("&nbsp;Editor access<br />");  b.append(accessStatusImage(commercial)).append("&nbsp;Run commercials<br />");  b.append(accessStatusImage(subs)).append("&nbsp;Show subscribers<br />");  b.append(accessStatusImage(follow)).append("&nbsp;Follow channels");  access.setText(b.toString());  update();}  }
class C{  public void beginSnapshotting(String workspaceId) throws NotFoundException, ConflictException {  try (StripedLocks.WriteLock ignored=stripedLocks.acquireWriteLock(workspaceId)){    getRunningState(workspaceId).status=SNAPSHOTTING;  } }  }
class C{  public GetEventsParams withUntilSecond(long untilSecond){  this.untilSecond=untilSecond;  return this;}  }
class C{  private Function<String,TagState> newTagRetriever(TaggingClient client){  return null;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.FUNCTION_DEFINITION__DEFINED_TYPE:    return definedType != null;case N4JSPackage.FUNCTION_DEFINITION__FPARS:  return fpars != null && !fpars.isEmpty();case N4JSPackage.FUNCTION_DEFINITION__RETURN_TYPE_REF:return returnTypeRef != null;case N4JSPackage.FUNCTION_DEFINITION__GENERATOR:return generator != GENERATOR_EDEFAULT;case N4JSPackage.FUNCTION_DEFINITION__DECLARED_ASYNC:return declaredAsync != DECLARED_ASYNC_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public synchronized void addListener(final IGlobalProgressManagerListener listener){  m_listeners.addListener(listener);}  }
class C{  protected void sendRedirect(HttpServletRequest httpRequest,HttpServletResponse response,String relativePath) throws IOException {  sendRedirectStatic(httpRequest,response,relativePath);}  }
class C{  private void showPickAction(boolean show){  mCards.getCard(CARD_PICKER).setActionVisibility(ACTION_PICK_PLACE,show);}  }
class C{  public void updateRendering(AffineTransform u2d,boolean dbr,boolean cpt,Shape aoi,int width,int height){  repaintManager.setupRenderer(u2d,dbr,aoi,width,height);  List l=new ArrayList(1);  l.add(aoi);  updateRendering(l,cpt);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:48.363 -0500",hash_original_method="742EA2900A6EB88CE28517352A724CD7",hash_generated_method="34500EE607CF681AAABF6AB99F1567DF") private void resolveProperties(){  if (arePropertiesResolved) {    return;  }  Class<?> cl=forClass();  isProxy=Proxy.isProxyClass(cl);  isEnum=Enum.class.isAssignableFrom(cl);  isSerializable=isSerializable(cl);  isExternalizable=isExternalizable(cl);  arePropertiesResolved=true;}  }
class C{  public static void transformedBooleanComparison(){  transformedBooleanComparison++;}  }
class C{  public void attrAdded(Attr node,String newv){  if (!changing && baseVal != null) {    baseVal.invalidate();  }  fireBaseAttributeListeners();  if (!hasAnimVal) {    fireAnimatedAttributeListeners();  }}  }
class C{  public synchronized long size(){  return size;}  }
class C{  public void clearWho(){  super.removeElement(Who.KEY);}  }
class C{  public SeqNoRange(long minSeqNo,long maxSeqNo){  this.minSeqNo=minSeqNo;  this.maxSeqNo=maxSeqNo;}  }
class C{  private void fireProcessViewChanged(){  for (  ExtendedProcessEditor editor : processEditors.getListeners(ExtendedProcessEditor.class)) {    editor.processViewChanged(process);  }}  }
class C{  private String prepareURL(){  String str="http://download.finance.yahoo.com/d/quotes.csv?";  str+="s=";  for (int i=0; i < symbolList.size(); i++) {    if (i != 0) {      str+=",";    }    str+=symbolList.get(i);  }  str+="&f=";  for (  String format : parameterList) {    str+=format;  }  str+="&e=.csv";  return str;}  }
class C{  private void updateConnection(){  if ((debuggerConnection == null) || !isConnected()) {    debuggerConnection=new DebugConnection(template.getHost(),template.getPort());  }}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    try {      return new FileInputStream(entry.getCleanFile(index));    } catch (    FileNotFoundException e) {      return null;    }  }}  }
class C{  public void updateZoningMapAndvalidateExportMask(URI varrayURI,Map<URI,List<StoragePort>> initiatorPortMap,URI exportMaskURI,Map<String,Set<String>> directorToInitiatorIds,Map<String,Initiator> idToInitiatorMap,Map<String,String> portWwnToClusterMap,StorageSystem vplex,StorageSystem array,String clusterId,String stepId){  try {    WorkflowStepCompleter.stepExecuting(stepId);    ExportMask exportMask=_dbClient.queryObject(ExportMask.class,exportMaskURI);    updateZoningMap(initiatorPortMap,directorToInitiatorIds,exportMask);    boolean passed=VPlexBackEndOrchestratorUtil.validateExportMask(varrayURI,initiatorPortMap,exportMask,null,directorToInitiatorIds,idToInitiatorMap,_dbClient,_coordinator,portWwnToClusterMap);    if (!passed) {      exportMask.setInactive(Boolean.TRUE);      _dbClient.persistObject(exportMask);      _log.error("Export Mask is not suitable for VPLEX to backend storage system");      WorkflowStepCompleter.stepFailed(stepId,VPlexApiException.exceptions.couldNotFindValidArrayExportMask(vplex.getNativeGuid(),array.getNativeGuid(),clusterId));      throw VPlexApiException.exceptions.couldNotFindValidArrayExportMask(vplex.getNativeGuid(),array.getNativeGuid(),clusterId);    }    WorkflowStepCompleter.stepSucceded(stepId);  } catch (  Exception ex) {    _log.error("Failed to validate export mask for cinder: ",ex);    VPlexApiException vplexex=DeviceControllerExceptions.vplex.failedToValidateExportMask(exportMaskURI.toString(),ex);    WorkflowStepCompleter.stepFailed(stepId,vplexex);  }}  }
class C{  public boolean isKeepTags(){  return keepTags;}  }
class C{  protected void forceSetComponentCount(int count){  mComponentCountActual=count;}  }
class C{  protected void serializeEntityReference(EntityReference node,boolean bStart) throws SAXException {  if (bStart) {    EntityReference eref=node;    if ((fFeatures & ENTITIES) != 0) {      if ((fFeatures & WELLFORMED) != 0) {        isEntityReferneceWellFormed(node);      }      if ((fFeatures & NAMESPACES) != 0) {        checkUnboundPrefixInEntRef(node);      }    }    if (fLexicalHandler != null) {      fLexicalHandler.startEntity(eref.getNodeName());    }  } else {    EntityReference eref=node;    if (fLexicalHandler != null) {      fLexicalHandler.endEntity(eref.getNodeName());    }  }}  }
class C{  public Address(String zipCode,String city){  this.zipCode=zipCode;  this.city=city;}  }
class C{  public boolean decodeValueLength(int startIndex){  if ((wspData[startIndex] & 0xff) > WAP_PDU_LENGTH_QUOTE) {    return false;  }  if (wspData[startIndex] < WAP_PDU_LENGTH_QUOTE) {    unsigned32bit=wspData[startIndex];    dataLength=1;  } else {    decodeUintvarInteger(startIndex + 1);    dataLength++;  }  return true;}  }
class C{  private String printSelectionResults(){  StringBuffer text=new StringBuffer();  text.append("\n\n=== Attribute Selection on all input data ===\n\n" + "Search Method:\n");  text.append(m_searchMethod.toString());  text.append("\nAttribute ");  if (m_ASEvaluator instanceof SubsetEvaluator) {    text.append("Subset Evaluator (");  } else {    text.append("Evaluator (");  }  if (!(m_ASEvaluator instanceof UnsupervisedSubsetEvaluator) && !(m_ASEvaluator instanceof UnsupervisedAttributeEvaluator)) {    text.append("supervised, ");    text.append("Class (");    if (m_trainInstances.attribute(m_trainInstances.classIndex()).isNumeric()) {      text.append("numeric): ");    } else {      text.append("nominal): ");    }    text.append((m_trainInstances.classIndex() + 1) + " " + m_trainInstances.attribute(m_trainInstances.classIndex()).name()+ "):\n");  } else {    text.append("unsupervised):\n");  }  text.append(m_ASEvaluator.toString() + "\n");  return text.toString();}  }
class C{  protected void updatePeProvisioning(){  getPeMap().clear();  for (  Pe pe : getPeList()) {    pe.getPeProvisioner().deallocateMipsForAllVms();  }  Iterator<Pe> peIterator=getPeList().iterator();  Pe pe=peIterator.next();  PeProvisioner peProvisioner=pe.getPeProvisioner();  double availableMips=peProvisioner.getAvailableMips();  for (  Map.Entry<String,List<Double>> entry : getMipsMap().entrySet()) {    String vmUid=entry.getKey();    getPeMap().put(vmUid,new LinkedList<Pe>());    for (    double mips : entry.getValue()) {      while (mips >= 0.1) {        if (availableMips >= mips) {          peProvisioner.allocateMipsForVm(vmUid,mips);          getPeMap().get(vmUid).add(pe);          availableMips-=mips;          break;        } else {          peProvisioner.allocateMipsForVm(vmUid,availableMips);          getPeMap().get(vmUid).add(pe);          mips-=availableMips;          if (mips <= 0.1) {            break;          }          if (!peIterator.hasNext()) {            Log.printConcatLine("There is no enough MIPS (",mips,") to accommodate VM ",vmUid);          }          pe=peIterator.next();          peProvisioner=pe.getPeProvisioner();          availableMips=peProvisioner.getAvailableMips();        }      }    }  }}  }
class C{  @Override protected void withBindHolder(itemGridCellBinder holder,JRitem data,int position){}  }
class C{  public synchronized boolean isClosed(){  return journalWriter == null;}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SeaGlassButtonUI();}  }
class C{  private boolean translateReadyOps(int ops,int initialOps,SelectionKeyImpl sk){  int intOps=sk.nioInterestOps();  int oldOps=sk.nioReadyOps();  int newOps=initialOps;  if ((ops & Net.POLLNVAL) != 0) {    return false;  }  if ((ops & (Net.POLLERR | Net.POLLHUP)) != 0) {    newOps=intOps;    sk.nioReadyOps(newOps);    return (newOps & ~oldOps) != 0;  }  if (((ops & Net.POLLIN) != 0) && ((intOps & SelectionKey.OP_READ) != 0))   newOps|=SelectionKey.OP_READ;  if (((ops & Net.POLLOUT) != 0) && ((intOps & SelectionKey.OP_WRITE) != 0))   newOps|=SelectionKey.OP_WRITE;  sk.nioReadyOps(newOps);  return (newOps & ~oldOps) != 0;}  }
class C{  static public void openTx(long startTime){  if (log.isInfoEnabled())   log.info(TimestampUtility.toString(startTime));}  }
class C{  @Override public void show(){  final Stage stage=getStage();  stage.getRoot().clearChildren();  LmlUtilities.appendActorsToStage(stage,actors);}  }
class C{  public void testIntsCount(){  LongAdder counter=new LongAdder();  ThreadLocalRandom r=ThreadLocalRandom.current();  long size=0;  for (int reps=0; reps < REPS; ++reps) {    counter.reset();    r.ints(size).parallel().forEach(null);    assertEquals(counter.sum(),size);    size+=524959;  }}  }
class C{  public DeleteReferencesRequest clone(){  DeleteReferencesRequest result=new DeleteReferencesRequest();  result.RequestHeader=RequestHeader == null ? null : RequestHeader.clone();  if (ReferencesToDelete != null) {    result.ReferencesToDelete=new DeleteReferencesItem[ReferencesToDelete.length];    for (int i=0; i < ReferencesToDelete.length; i++)     result.ReferencesToDelete[i]=ReferencesToDelete[i].clone();  }  return result;}  }
class C{  public void reverse(){  int[] newBits=new int[bits.length];  int size=this.size;  for (int i=0; i < size; i++) {    if (get(size - i - 1)) {      newBits[i >> 5]|=1 << (i & 0x1F);    }  }  bits=newBits;}  }
class C{  public DoubleMatrix1D like(int size){  return content.like(size);}  }
class C{  public static UploadFragment newInstance(){  return new UploadFragment();}  }
class C{  protected void validateState(State current){  ValidationUtils.validateState(current);  checkNotNull(current.executionState,"ExecutionState cannot be null.");  checkIsPositiveNumber(current.triggersSuccess,"triggersSuccess");  checkIsPositiveNumber(current.triggersError,"triggersError");}  }
class C{  private Transform lookup(Class type) throws Exception {  if (!error.contains(type)) {    Transform transform=cache.fetch(type);    if (transform != null) {      return transform;    }    return match(type);  }  return null;}  }
class C{  public NISTCTSBlockCipher(int type,BlockCipher cipher){  this.type=type;  this.cipher=new CBCBlockCipher(cipher);  blockSize=cipher.getBlockSize();  buf=new byte[blockSize * 2];  bufOff=0;}  }
class C{  @Ignore("This test is flakey and causes tests to fail pretty often.") @Test public void maxUnderReplicationTest() throws EventDeliveryException, IOException {  Configuration conf=new Configuration();  conf.set("dfs.replication",String.valueOf(3));  cluster=new MiniDFSCluster(conf,3,true,null);  cluster.waitActive();  String outputDir="/flume/underReplicationTest";  Path outputDirPath=new Path(outputDir);  logger.info("Running test with output dir: {}",outputDir);  FileSystem fs=cluster.getFileSystem();  if (fs.exists(outputDirPath)) {    fs.delete(outputDirPath,true);  }  String nnURL=getNameNodeURL(cluster);  logger.info("Namenode address: {}",nnURL);  Context chanCtx=new Context();  MemoryChannel channel=new MemoryChannel();  channel.setName("simpleHDFSTest-mem-chan");  channel.configure(chanCtx);  channel.start();  Context sinkCtx=new Context();  sinkCtx.put("hdfs.path",nnURL + outputDir);  sinkCtx.put("hdfs.fileType",HDFSWriterFactory.DATA_STREAM_TYPE);  sinkCtx.put("hdfs.batchSize",Integer.toString(1));  BDREHDFSEventSink sink=new BDREHDFSEventSink();  sink.setName("simpleHDFSTest-hdfs-sink");  sink.configure(sinkCtx);  sink.setChannel(channel);  sink.start();  channel.getTransaction().begin();  try {    for (int i=0; i < 50; i++) {      channel.put(EventBuilder.withBody("yarg " + i,Charsets.UTF_8));    }    channel.getTransaction().commit();  }  finally {    channel.getTransaction().close();  }  logger.info("Running process(). Create new file.");  sink.process();  logger.info("Running process(). Same file.");  sink.process();  logger.info("Killing datanode #1...");  cluster.stopDataNode(0);  logger.info("Running process(). Create new file? (racy)");  sink.process();  for (int i=3; i < 50; i++) {    logger.info("Running process().");    sink.process();  }  sink.stop();  channel.stop();  FileStatus[] statuses=fs.listStatus(outputDirPath);  Assert.assertNotNull("No files found written to HDFS",statuses);  for (  FileStatus status : statuses) {    Path filePath=status.getPath();    logger.info("Found file on DFS: {}",filePath);    FSDataInputStream stream=fs.open(filePath);    BufferedReader reader=new BufferedReader(new InputStreamReader(stream));    String line=reader.readLine();    logger.info("First line in file {}: {}",filePath,line);    Assert.assertTrue(line.startsWith("yarg"));  }  System.out.println("There are " + statuses.length + " files.");  Assert.assertEquals("31 files expected, found " + statuses.length,31,statuses.length);  if (!KEEP_DATA) {    fs.delete(outputDirPath,true);  }  cluster.shutdown();  cluster=null;}  }
class C{  public ViPRCatalogClient2 withAuthToken(String token){  setAuthToken(token);  return this;}  }
class C{  public void execute() throws BuildException {  bundleDir=new File(mRootDir,bundleProperties.getApplicationName() + ".app");  if (bundleDir.exists()) {    Delete deleteTask=new Delete();    deleteTask.setProject(getProject());    deleteTask.setDir(bundleDir);    deleteTask.execute();  }  if (mRootDir == null)   throw new BuildException("Required attribute \"dir\" is not set.");  if (mJarAttrs.isEmpty() && mJarFileSets.isEmpty() && mJarFileLists.isEmpty())   throw new BuildException("Either the attribute \"jar\" must " + "be set, or one or more jarfilelists or " + "jarfilesets must be added.");  if (!mJarAttrs.isEmpty() && (!mJarFileSets.isEmpty() || !mJarFileLists.isEmpty()))   throw new BuildException("Cannot set both the attribute " + "\"jars\" and use jar filesets/filelists.  Use only one or the other.");  if (bundleProperties.getApplicationName() == null)   throw new BuildException("Required attribute \"name\" is not set.");  if (bundleProperties.getMainClass() == null)   throw new BuildException("Required attribute \"mainclass\" is not set.");  if (useOldPropertyNames())   bundleProperties.addJavaProperty(ABOUTMENU_KEY,bundleProperties.getCFBundleName());  String antiAliasedProperty=useOldPropertyNames() ? "com.apple.macosx.AntiAliasedGraphicsOn" : "apple.awt.antialiasing";  if (mAntiAliasedGraphics != null)   bundleProperties.addJavaProperty(antiAliasedProperty,mAntiAliasedGraphics.toString());  String antiAliasedTextProperty=useOldPropertyNames() ? "com.apple.macosx.AntiAliasedTextOn" : "apple.awt.textantialiasing";  if (mAntiAliasedText != null)   bundleProperties.addJavaProperty(antiAliasedTextProperty,mAntiAliasedText.toString());  if (useOldPropertyNames() && (mLiveResize != null))   bundleProperties.addJavaProperty("com.apple.mrj.application.live-resize",mLiveResize.toString());  String screenMenuBarProperty=useOldPropertyNames() ? "com.apple.macos.useScreenMenuBar" : "apple.laf.useScreenMenuBar";  if (mScreenMenuBar != null)   bundleProperties.addJavaProperty(screenMenuBarProperty,mScreenMenuBar.toString());  if ((useOldPropertyNames() == false) && (mGrowbox != null))   bundleProperties.addJavaProperty("apple.awt.showGrowBox",mGrowbox.toString());  if (useOldPropertyNames() && (mGrowboxIntrudes != null))   bundleProperties.addJavaProperty("com.apple.mrj.application.growbox.intrudes",mGrowboxIntrudes.toString());  if (!mRootDir.exists() || (mRootDir.exists() && !mRootDir.isDirectory()))   throw new BuildException("Destination directory specified by \"dir\" " + "attribute must already exist.");  if (bundleDir.exists())   throw new BuildException("The directory/bundle \"" + bundleDir.getName() + "\" already exists, cannot continue.");  log("Creating application bundle: " + bundleDir);  if (!bundleDir.mkdir())   throw new BuildException("Unable to create bundle: " + bundleDir);  mContentsDir=new File(bundleDir,"Contents");  if (!mContentsDir.mkdir())   throw new BuildException("Unable to create directory " + mContentsDir);  mMacOsDir=new File(mContentsDir,"MacOS");  if (!mMacOsDir.mkdir())   throw new BuildException("Unable to create directory " + mMacOsDir);  mResourcesDir=new File(mContentsDir,"Resources");  if (!mResourcesDir.mkdir())   throw new BuildException("Unable to create directory " + mResourcesDir);  mJavaDir=new File(bundleProperties.getJavaVersion() < 1.7 ? mResourcesDir : mContentsDir,"Java");  if (!mJavaDir.mkdir())   throw new BuildException("Unable to create directory " + mJavaDir);  if (mAppIcon != null) {    try {      File dest=new File(mResourcesDir,mAppIcon.getName());      if (mVerbose)       log("Copying application icon file to \"" + bundlePath(dest) + "\"");      mFileUtils.copyFile(mAppIcon,dest);    } catch (    IOException ex) {      throw new BuildException("Cannot copy icon file: " + ex);    }  }  try {    Iterator itor=bundleProperties.getDocumentTypes().iterator();    while (itor.hasNext()) {      DocumentType documentType=(DocumentType)itor.next();      File iconFile=documentType.getIconFile();      if (iconFile != null) {        File dest=new File(mResourcesDir,iconFile.getName());        if (mVerbose)         log("Copying document icon file to \"" + bundlePath(dest) + "\"");        mFileUtils.copyFile(iconFile,dest);      }    }  } catch (  IOException ex) {    throw new BuildException("Cannot copy document icon file: " + ex);  }  processJarAttrs();  processJarFileSets();  processJarFileLists();  processExecAttrs();  processExecFileSets();  processExecFileLists();  processResourceFileSets();  processJavaFileSets();  processResourceFileLists();  processJavaFileLists();  processExtraClassPathAttrs();  processExtraClassPathFileSets();  processExtraClassPathFileLists();  copyHelpBooks();  copyApplicationStub();  writeInfoPlist();  writePkgInfo();}  }
class C{  public boolean destroyVolume(String volumeName,boolean force){  if (log.isDebugEnabled()) {    log.debug("Deleting volume with params[name,force]: " + volumeName + ","+ force);  }  FlexVolume vol=new FlexVolume(server.getNaServer(),volumeName);  boolean result=vol.destroyVolume(force);  return result;}  }
class C{  @Override public void insert(Item x,int position){  Item[] newItems=(Item[])new Object[items.length + 1];  System.arraycopy(items,0,newItems,0,position);  newItems[position]=x;  System.arraycopy(items,position,newItems,position + 1,items.length - position);  items=newItems;}  }
class C{  public final boolean checkLimits(ConsensusMessage msg){  outOfContextLock.lock();  int lastConsId=tomLayer.getLastExec();  int inExec=tomLayer.getInExec();  Logger.println("(ExecutionManager.checkLimits) Received message  " + msg);  Logger.println("(ExecutionManager.checkLimits) I'm at consensus " + inExec + " and my last consensus is "+ lastConsId);  boolean isRetrievingState=tomLayer.isRetrievingState();  if (isRetrievingState) {    Logger.println("(ExecutionManager.checkLimits) I'm waiting for a state");  }  boolean canProcessTheMessage=false;  if (isRetrievingState || (!(lastConsId == -1 && msg.getNumber() >= (lastConsId + revivalHighMark)) && (msg.getNumber() > lastConsId && (msg.getNumber() < (lastConsId + paxosHighMark))) && !(stopped && msg.getNumber() >= (lastConsId + timeoutHighMark)))) {    if (stopped) {      stoppedMsgsLock.lock();      if (stopped) {        Logger.println("(ExecutionManager.checkLimits) adding message for consensus " + msg.getNumber() + " to stoopped");        stoppedMsgs.add(msg);      }      stoppedMsgsLock.unlock();    } else {      if (isRetrievingState || msg.getNumber() > (lastConsId + 1) || (inExec != -1 && inExec < msg.getNumber()) || (inExec == -1 && msg.getType() != MessageFactory.PROPOSE)) {        Logger.println("(ExecutionManager.checkLimits) Message for consensus " + msg.getNumber() + " is out of context, adding it to out of context set");        addOutOfContextMessage(msg);      } else {        Logger.println("(ExecutionManager.checkLimits) message for consensus " + msg.getNumber() + " can be processed");        canProcessTheMessage=true;      }    }  } else   if ((lastConsId == -1 && msg.getNumber() >= (lastConsId + revivalHighMark)) || (msg.getNumber() >= (lastConsId + paxosHighMark)) || (stopped && msg.getNumber() >= (lastConsId + timeoutHighMark))) {    Logger.println("(ExecutionManager.checkLimits) Message for consensus " + msg.getNumber() + " is beyond the paxos highmark, adding it to out of context set");    addOutOfContextMessage(msg);    if (controller.getStaticConf().isStateTransferEnabled()) {      tomLayer.getStateManager().analyzeState(msg.getNumber());    } else {      System.out.println("##################################################################################");      System.out.println("- Ahead-of-time message discarded");      System.out.println("- If many messages of the same consensus are discarded, the replica can halt!");      System.out.println("- Try to increase the 'system.paxos.highMarc' configuration parameter.");      System.out.println("- Last consensus executed: " + lastConsId);      System.out.println("##################################################################################");    }  }  outOfContextLock.unlock();  return canProcessTheMessage;}  }
class C{  public void dispose() throws GSSException {  try {    destroy();  } catch (  DestroyFailedException e) {    GSSException gssException=new GSSException(GSSException.FAILURE,-1,"Could not destroy credentials - " + e.getMessage());    gssException.initCause(e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.094 -0500",hash_original_method="512A5161660D68AB5470903C03DA343E",hash_generated_method="9A8C94856F8B55E80E440B65AAF5FD74") public void copyFrom(Bitmap b){  mRS.validate();  validateBitmapSize(b);  validateBitmapFormat(b);  mRS.nAllocationCopyFromBitmap(getID(),b);}  }
class C{  public NameCharacterValidator(final String parameterValue){  this.parameterValue=parameterValue;}  }
class C{  public Builder gravity(int gravity){  return this;}  }
class C{  @Override public DirichletDensityFunction copy(){  return new DirichletDensityFunction(alphas);}  }
class C{  public void deleteKeystoneEndpoint(KeystoneApiClient keystoneApi,String serviceId){  _log.debug("START - deleteKeystoneEndpoint");  if (serviceId != null) {    EndpointResponse endpoints=keystoneApi.getKeystoneEndpoints();    EndpointV2 endpointToDelete=findEndpoint(endpoints,serviceId);    if (endpointToDelete != null) {      keystoneApi.deleteKeystoneEndpoint(endpointToDelete.getId());      _log.debug("Keystone endpoint deleted");    }  }  _log.debug("END - deleteKeystoneEndpoint");}  }
class C{  public LinearGradientPaint(Point2D start,Point2D end,float[] fractions,Color[] colors,CycleMethodEnum cycleMethod,ColorSpaceEnum colorSpace){  this(start,end,fractions,colors,cycleMethod,colorSpace,new AffineTransform());}  }
class C{  public static void printUserSitemaps(WebmasterToolsService myService,String siteUrl) throws ServiceException, IOException {  System.out.println("Printing user's Sitemaps:");  try {    String siteId=URLEncoder.encode(siteUrl,"UTF-8");    URL feedUrl=getSitemapsFeedUrl(siteUrl);    SitemapsFeed resultFeed=myService.getFeed(feedUrl,SitemapsFeed.class);    for (    SitemapsEntry entry : resultFeed.getEntries()) {      System.out.println("\t" + entry.getTitle().getPlainText());    }  } catch (  MalformedURLException e) {    throw new IOException("URL for site URL is malformed.");  }}  }
class C{  void handleSenderOpen(final ProtonConnection con,final ProtonSender sender){  final Source remoteSource=sender.getRemoteSource();  LOG.debug("client [{}] wants to open a link for receiving messages [address: {}]",con.getRemoteContainer(),remoteSource);  try {    final ResourceIdentifier targetResource=getResourceIdentifier(remoteSource.getAddress());    final Endpoint endpoint=getEndpoint(targetResource);    if (endpoint == null) {      handleUnknownEndpoint(con,sender,targetResource);    } else {      final String user=getUserFromConnection(con);      checkAuthorizationToAttach(user,targetResource,Permission.READ,null);    }  } catch (  final IllegalArgumentException e) {    LOG.debug("client has provided invalid resource identifier as target address",e);    sender.close();  }}  }
class C{  public double nextDouble(double k){  double u, v, w, c, z;  if (k <= 0.0)   throw new IllegalArgumentException();  if (k_set != k) {    tau=1.0 + Math.sqrt(1.0 + 4.0 * k * k);    rho=(tau - Math.sqrt(2.0 * tau)) / (2.0 * k);    r=(1.0 + rho * rho) / (2.0 * rho);    k_set=k;  }  do {    u=randomGenerator.raw();    v=randomGenerator.raw();    z=Math.cos(Math.PI * u);    w=(1.0 + r * z) / (r + z);    c=k * (r - w);  } while ((c * (2.0 - c) < v) && (Math.log(c / v) + 1.0 < c));  return (randomGenerator.raw() > 0.5) ? Math.acos(w) : -Math.acos(w);}  }
class C{  @Override public SAXBuilder createDocumentBuilder(){  return createDocumentBuilder(null);}  }
class C{  public static boolean shouldUseLightForegroundOnBackground(int backgroundColor){  return getContrastForColor(backgroundColor) >= CONTRAST_LIGHT_ITEM_THRESHOLD;}  }
class C{  public static <K,V,K2,V2>MutableMap<K2,V2> collect(Map<K,V> map,Function2<? super K,? super V,Pair<K2,V2>> function){  return MapIterate.collect(map,function,UnifiedMap.newMap(map.size()));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:38.207 -0500",hash_original_method="B760B570F2C2CE8C78B1C4B9AE67037F",hash_generated_method="F657FCFE78415ACE6587EA6D62EB320C") private static int[] parsePortAttribute(final String portValue) throws MalformedCookieException {  StringTokenizer st=new StringTokenizer(portValue,",");  int[] ports=new int[st.countTokens()];  try {    int i=0;    while (st.hasMoreTokens()) {      ports[i]=Integer.parseInt(st.nextToken().trim());      if (ports[i] < 0) {        throw new MalformedCookieException("Invalid Port attribute.");      }      ++i;    }  } catch (  NumberFormatException e) {    throw new MalformedCookieException("Invalid Port " + "attribute: " + e.getMessage());  }  return ports;}  }
class C{  public Set<Map.Entry<String,JsonElement>> entrySet(){  return members.entrySet();}  }
class C{  public void connect(int timeout,String host,int tcpPort,int udpPort) throws IOException {  connect(timeout,InetAddress.getByName(host),tcpPort,udpPort);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:19.274 -0500",hash_original_method="BBF3C380B9774B27B4245C54F7894533",hash_generated_method="29490970C6EB4A3079390A7C66417EFB") private boolean matchesMobile(NetworkIdentity ident){  if (ident.mType == TYPE_WIMAX) {    return true;  } else {    return (contains(DATA_USAGE_NETWORK_TYPES,ident.mType) && Objects.equal(mSubscriberId,ident.mSubscriberId));  }}  }
class C{  static private void loadPropertiesFile(File file){  if (file.isDirectory()) {    File[] files=file.listFiles();    for (    File f : files) {      if (f.isFile() && f.getName().endsWith(PROPERTIES_SUFFIX) && f.getName().startsWith(PROPERTIES_PREFIX)) {        FileReader reader=null;        try {          Properties props=new Properties();          reader=new FileReader(f);          props.load(reader);          definitions.add(loadDefinition(props));        } catch (        IOException e) {          log.log(Level.SEVERE,"loadPropertiesFile(): Error loading definition {0}",file.getAbsoluteFile());          log.log(Level.SEVERE,"loadPropertiesFile(): Error loading definition...",e);        } finally {          if (reader != null) {            try {              reader.close();            } catch (            IOException ex) {            }          }        }      }    }  }}  }
class C{  public static Token newToken(int ofKind,String image){switch (ofKind) {default :    return new Token(ofKind,image);}}  }
class C{  public Comment createComment(Note note,String action,String comment){  Comment newComment=new Comment();  newComment.setText(comment);switch (action) {case NoteActivity.CLOSE:    newComment.setAction(Comment.ACTION_CLOSE);  break;case NoteActivity.COMMENT:newComment.setAction(Comment.ACTION_COMMENT);break;case NoteActivity.REOPEN:newComment.setAction(Comment.ACTION_REOPEN);break;default :newComment.setAction(Comment.ACTION_OPEN);break;}newComment.setNote(note);return newComment;}  }
class C{  public PropertyField(String label,String initialValue,boolean isReadWrite){  this(label,initialValue,isReadWrite,null,SHOW_TEXTFIELD);}  }
class C{  public TransformVariablesShift(BBOBFunction function,double[] offset){  super(function);  this.offset=offset;}  }
class C{  public boolean isModified(){  return isModified;}  }
class C{  public static boolean canCoerce(Class numberClassToBeCoerced,Class numberClassToCoerceTo){  Class boxedFrom=getBoxedType(numberClassToBeCoerced);  Class boxedTo=getBoxedType(numberClassToCoerceTo);  if (!isNumeric(numberClassToBeCoerced)) {    throw new IllegalArgumentException("Class '" + numberClassToBeCoerced + "' is not a numeric type'");  }  if (boxedTo == Float.class) {    return ((boxedFrom == Byte.class) || (boxedFrom == Short.class) || (boxedFrom == Integer.class)|| (boxedFrom == Long.class)|| (boxedFrom == Float.class));  } else   if (boxedTo == Double.class) {    return ((boxedFrom == Byte.class) || (boxedFrom == Short.class) || (boxedFrom == Integer.class)|| (boxedFrom == Long.class)|| (boxedFrom == Float.class)|| (boxedFrom == Double.class));  } else   if (boxedTo == BigDecimal.class) {    return ((boxedFrom == Byte.class) || (boxedFrom == Short.class) || (boxedFrom == Integer.class)|| (boxedFrom == Long.class)|| (boxedFrom == Float.class)|| (boxedFrom == Double.class)|| (boxedFrom == BigInteger.class)|| (boxedFrom == BigDecimal.class));  } else   if (boxedTo == BigInteger.class) {    return ((boxedFrom == Byte.class) || (boxedFrom == Short.class) || (boxedFrom == Integer.class)|| (boxedFrom == Long.class)|| (boxedFrom == BigInteger.class));  } else   if (boxedTo == Long.class) {    return ((boxedFrom == Byte.class) || (boxedFrom == Short.class) || (boxedFrom == Integer.class)|| (boxedFrom == Long.class));  } else   if ((boxedTo == Integer.class) || (boxedTo == Short.class) || (boxedTo == Byte.class)) {    return ((boxedFrom == Byte.class) || (boxedFrom == Short.class) || (boxedFrom == Integer.class));  } else {    throw new IllegalArgumentException("Class '" + numberClassToCoerceTo + "' is not a numeric type'");  }}  }
class C{  public void clean(){  clean(stringClassMap.values());  clean(stringClassMap2.values());  clean(classStringMap.keySet());}  }
class C{  private void dropTables(SQLiteDatabase paramSQLiteDatabase){  for (  String table : sTables) {    try {      paramSQLiteDatabase.execSQL("DROP TABLE IF EXISTS " + table);    } catch (    Exception localException) {      localException.printStackTrace();    }  }}  }
class C{  public boolean naive(){  return soot.PhaseOptions.getBoolean(options,"naive");}  }
class C{  public static com.vmware.vim.sso.PrincipalId fromIdmPrincipalId(PrincipalId subject){  assert subject != null;  return new com.vmware.vim.sso.PrincipalId(subject.getName(),subject.getDomain());}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  public List<SoftwareVersion> findInstallableVersions(final boolean forceInstall,final SoftwareVersion localCurrent,final List<SoftwareVersion> localVersions){  List<SoftwareVersion> newVersionList=findNewVersions(localCurrent,localVersions,forceInstall);  if (newVersionList.isEmpty()) {    return newVersionList;  }  RepositoryContent repositoryContent=readRepository(_repo);  try {    if (repositoryContent.getContentType().toLowerCase().contains("text/xml")) {      return finInstallableVersionsFromCatalogRepo(readCatalog(readInputStream(repositoryContent.getContentStream())),newVersionList,localVersions);    } else {      return findInstallableVersionsFromDirectoryRepo(newVersionList,localVersions);    }  } catch (  RemoteRepositoryException e) {    throw e;  }catch (  Exception e) {    throw SyssvcException.syssvcExceptions.remoteRepoError(MessageFormat.format("Failed to parse the remote repository {0} input={1} ({2})",_repo,Strings.repr(repositoryContent),e));  } finally {    try {      if (null != repositoryContent.getContentStream()) {        repositoryContent.getContentStream().close();      }    } catch (    IOException e) {      _log.error("Failed to close input stream: " + e);    }  }}  }
class C{  public String attributeIndicesTipText(){  return "Specify range of attributes to act on; " + "this is a comma separated list of attribute indices, with " + "\"first\" and \"last\" valid values; specify an inclusive "+ "range with \"-\"; eg: \"first-3,5,6-10,last\".";}  }
class C{  public static int murmurhash3_x86_32(byte[] data,int offset,int len,int seed){  final int c1=0xcc9e2d51;  final int c2=0x1b873593;  int h1=seed;  int roundedEnd=offset + (len & 0xfffffffc);  for (int i=offset; i < roundedEnd; i+=4) {    int k1=(data[i] & 0xff) | ((data[i + 1] & 0xff) << 8) | ((data[i + 2] & 0xff) << 16)| (data[i + 3] << 24);    k1*=c1;    k1=(k1 << 15) | (k1 >>> 17);    k1*=c2;    h1^=k1;    h1=(h1 << 13) | (h1 >>> 19);    h1=h1 * 5 + 0xe6546b64;  }  int k1=0;switch (len & 0x03) {case 3:    k1=(data[roundedEnd + 2] & 0xff) << 16;case 2:  k1|=(data[roundedEnd + 1] & 0xff) << 8;case 1:k1|=(data[roundedEnd] & 0xff);k1*=c1;k1=(k1 << 15) | (k1 >>> 17);k1*=c2;h1^=k1;}h1^=len;h1^=h1 >>> 16;h1*=0x85ebca6b;h1^=h1 >>> 13;h1*=0xc2b2ae35;h1^=h1 >>> 16;return h1;}  }
class C{  public static boolean isWellFormedSmsAddress(String address){  String networkPortion=PhoneNumberUtils.extractNetworkPortion(address);  return (!(networkPortion.equals("+") || TextUtils.isEmpty(networkPortion))) && isDialable(networkPortion);}  }
class C{  public CustomProperty(String value){  this();  setValue(value);}  }
class C{  public void runtimeInit(TransformerImpl transformer) throws TransformerException {}  }
class C{  public boolean contains(int s){  if (null == m_map)   return false;  for (int i=0; i < m_firstFree; i++) {    int node=m_map[i];    if (node == s)     return true;  }  return false;}  }
class C{  public void add(Permission permission){  perms.put(permission,permission);}  }
class C{  public byte byteAt(int offset){  return ref.bytes[offset];}  }
class C{  public IThumbnailRequest buildRequest(final List<Option> options){  return new ThumbnailRequest(getRequestUrl(),getClient(),options);}  }
class C{  public static <T,U extends T,V extends T>T inject(Object self,U initialValue,Closure<V> closure){  Iterator iter=InvokerHelper.asIterator(self);  return (T)inject(iter,initialValue,closure);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  static void handleReopen(){  if (_allowVisible) {    if (!_visibleOnce)     restoreView();    setAppVisible(true);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    calculateRaster();  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  public boolean isSetB1000(){  return this.b1000 != null;}  }
class C{  public int tabForCoordinate(JTabbedPane pane,int x,int y){  return tabForCoordinate(pane,x,y,true);}  }
class C{  public Period withYears(int years){  int[] values=getValues();  getPeriodType().setIndexedField(this,PeriodType.YEAR_INDEX,values,years);  return new Period(values,getPeriodType());}  }
class C{  @Override public void visit(NodeVisitor v){  if (v.visit(this)) {    target.visit(v);    for (    AstNode arg : getArguments()) {      arg.visit(v);    }  }}  }
class C{  public boolean fitWithinDimenions(){  return fitWithinDimensions;}  }
class C{  public void writeInt(int v) throws IOException {  _os.write(v >> 24);  _os.write(v >> 16);  _os.write(v >> 8);  _os.write(v);}  }
class C{  static MediaType createApplicationType(String subtype){  return create(APPLICATION_TYPE,subtype);}  }
class C{  public static void main(String[] argv){  runFilter(new RemoveWithValues(),argv);}  }
class C{  public Primitive castToType(Class toType,int operation) throws UtilEvalError {  return castPrimitive(toType,getType(),this,false,operation);}  }
class C{  public PrinterResolution(int crossFeedResolution,int feedResolution,int units){  super(crossFeedResolution,feedResolution,units);}  }
class C{  protected void appendShortInteger(int value){  append((value | 0x80) & 0xff);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  double x, y;  int progress;  int i, n;  double[][] vertices=null;  int numFeatures;  int oneHundredthTotal;  ShapeType shapeType, outputShapeType;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    if (shapeType.getBaseType() != ShapeType.POLYGON && shapeType.getBaseType() != ShapeType.POLYLINE) {      showFeedback("This tool only works with shapefiles of a polygon or line base shape type.");      return;    }    outputShapeType=ShapeType.POINT;    int numOutputFields=input.getAttributeTable().getFieldCount() + 1;    int numInputFields=input.getAttributeTable().getFieldCount();    DBFField[] inputFields=input.getAttributeTable().getAllFields();    DBFField fields[]=new DBFField[numOutputFields];    fields[0]=new DBFField();    fields[0].setName("PARENT_ID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    System.arraycopy(inputFields,0,fields,1,numInputFields);    ShapeFile output=new ShapeFile(outputFile,outputShapeType,fields);    output.setProjectionStringFromOtherShapefile(input);    numFeatures=input.getNumberOfRecords();    oneHundredthTotal=numFeatures / 100;    n=0;    progress=0;    int recordNum;    for (    ShapeFileRecord record : input.records) {      recordNum=record.getRecordNumber();      Object[] attData=input.getAttributeTable().getRecord(recordNum - 1);      vertices=new double[0][0];switch (shapeType) {case POLYGON:        whitebox.geospatialfiles.shapefile.Polygon recPolygon=(whitebox.geospatialfiles.shapefile.Polygon)(record.getGeometry());      vertices=recPolygon.getPoints();    break;case POLYGONZ:  PolygonZ recPolygonZ=(PolygonZ)(record.getGeometry());vertices=recPolygonZ.getPoints();break;case POLYGONM:PolygonM recPolygonM=(PolygonM)(record.getGeometry());vertices=recPolygonM.getPoints();break;case POLYLINE:PolyLine recPolyline=(PolyLine)(record.getGeometry());vertices=recPolyline.getPoints();break;case POLYLINEZ:PolyLineZ recPolylineZ=(PolyLineZ)(record.getGeometry());vertices=recPolylineZ.getPoints();break;case POLYLINEM:PolyLineM recPolylineM=(PolyLineM)(record.getGeometry());vertices=recPolylineM.getPoints();break;}for (i=0; i < vertices.length; i++) {x=vertices[i][0];y=vertices[i][1];Object[] rowData=new Object[numOutputFields];rowData[0]=(double)recordNum - 1;System.arraycopy(attData,0,rowData,1,numInputFields);output.addRecord(new whitebox.geospatialfiles.shapefile.Point(x,y),rowData);}n++;if (n >= oneHundredthTotal) {n=0;if (cancelOp) {cancelOperation();return;}progress++;updateProgress(progress);}}output.write();updateProgress("Displaying vector: ",0);returnData(outputFile);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public boolean closeIfStale() throws IOException {  if (isOpen && isStale()) {    LOG.debug("Connection is stale, closing...");    close();    return true;  }  return false;}  }
class C{  public String previousToken(){  if (hasPrevious()) {    return tokens[--tokenPos];  }  return null;}  }
class C{  void flushDeferredWrites() throws IgniteCheckedException {  assert isHeldByCurrentThread();  assert handshakeFinished;  while (!deferredWriteQueue.isEmpty()) {    WriteRequest req=deferredWriteQueue.poll();    req.future().onDone((GridNioFuture<Object>)parent.proceedSessionWrite(ses,req.buffer()));  }}  }
class C{  public int hashCode(){  int hash=this.getClass().hashCode();  for (int x=0; x < rules.length; x++)   if (rules[x] != null)   hash+=rules[x].hashCode();  return hash;}  }
class C{  @Nonnull public BugInstance addField(FieldDescriptor fieldDescriptor){  FieldAnnotation fieldAnnotation=FieldAnnotation.fromFieldDescriptor(fieldDescriptor);  add(fieldAnnotation);  return this;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public ASN1ValueCollection(int tagNumber,ASN1Type type){  super(tagNumber);  this.type=type;}  }
class C{  public AddWorldParameterDialog(java.awt.Frame parent,boolean modal,Diagram diagram,Point clickPosition){  super(parent,modal);  initComponents();  DefaultComboBoxModel model=new DefaultComboBoxModel();  for (  UniformBinding binding : UniformBinding.values()) {    model.addElement(binding);  }  this.diagram=diagram;  this.clickPosition=clickPosition;  nameField.setModel(model);}  }
class C{  public TcpClient(){  this(SocketCreatorFactory.getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR));}  }
class C{  public static boolean isInstallableEditing(EnumSet<EmbeddingFlags> flagSet){  return flagSet.isEmpty();}  }
class C{  public void writeBody(OutputStream os,MimeBodyPart msg) throws IOException {  if (msg instanceof MimeMultipart) {    String ct=msg.getContentType().getValue();    if (ct.startsWith("application/vnd.wap.multipart.")) {    } else {      writeMultipart(os,(MimeMultipart)msg);    }  } else {    os.write(msg.getBody());    os.write("\r\n".getBytes());  }}  }
class C{  public void clear(){  final ReentrantLock lock=this.lock;  lock.lock();  try {    setArray(new Object[0]);  }  finally {    lock.unlock();  }}  }
class C{  public RequestLine parseSIPRequestLine(String requestLine) throws ParseException {  requestLine+="\n";  return new RequestLineParser(requestLine).parse();}  }
class C{  public FilteringBatchMessageListenerAdapter(BatchMessageListener<K,V> delegate,RecordFilterStrategy<K,V> recordFilterStrategy){  super(delegate,recordFilterStrategy);}  }
class C{  public static String processLineBreaksHTML(String text){  if (text == null) {    String msg=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  text=text.replaceAll("\n","");  text=text.replaceAll("(?i)<br\\s?.*?>","\n");  text=text.replaceAll("(?i)<p\\s?.*?>","");  text=text.replaceAll("(?i)</p>","\n\n");  return text;}  }
class C{  public long allocateSlot(){  return toLong(bucketNum,lastSlot++);}  }
class C{  @Override public boolean tileExists(String id){  return (tileExists(id,depthTree));}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) static <E extends Comparable<E>>AutoSortedCollection<E> createAutoSortedCollection(int initial){  return new AutoListSortedCollection<>(new ObjectArrayList<>(initial),null);}  }
class C{  public void startPrefixMapping(String prefix,String uri) throws org.xml.sax.SAXException {  m_prefixMappings.addElement(prefix);  m_prefixMappings.addElement(uri);}  }
class C{  private void _serializeArray(Array array,StringBuilder sb,Set<Object> done) throws ConverterException {  _serializeList(array.toList(),sb,done);}  }
class C{  private EntityPropertyDiff generateClassDiffFor(Object diffObject,@Nullable Object firstValue,@Nullable Object secondValue,ViewProperty viewProperty,MetaProperty metaProperty,Stack<Object> diffBranch){  boolean isLinkChange=!ObjectUtils.equals(firstValue,secondValue);  isLinkChange=!(diffObject instanceof EmbeddableEntity) && isLinkChange;  EntityClassPropertyDiff classPropertyDiff=new EntityClassPropertyDiff(firstValue,secondValue,viewProperty,metaProperty,isLinkChange);  boolean isInternalChange=false;  diffBranch.push(diffObject);  List<EntityPropertyDiff> propertyDiffs=getPropertyDiffs(viewProperty.getView(),(Entity)firstValue,(Entity)secondValue,diffBranch);  diffBranch.pop();  if (!propertyDiffs.isEmpty()) {    isInternalChange=true;    classPropertyDiff.setPropertyDiffs(propertyDiffs);  }  if (isInternalChange || isLinkChange)   return classPropertyDiff; else   return null;}  }
class C{  VPlexVirtualVolumeInfo findVirtualVolume(String volumeName,boolean fetchAtts) throws VPlexApiException {  if (volumeName == null) {    throw VPlexApiException.exceptions.cantFindRequestedVolumeNull();  }  VPlexVirtualVolumeInfo virtualVolumeInfo=null;  List<VPlexClusterInfo> clusterInfoList=getClusterInfoLite();  for (  VPlexClusterInfo clusterInfo : clusterInfoList) {    virtualVolumeInfo=findVirtualVolume(clusterInfo.getName(),volumeName,fetchAtts);    if (virtualVolumeInfo != null) {      break;    }  }  if (virtualVolumeInfo == null) {    throw VPlexApiException.exceptions.cantFindRequestedVolume(volumeName);  }  return virtualVolumeInfo;}  }
class C{  public DefaultListModel(T... items){  this.items=createList(items);}  }
class C{  public void testConstrBIScale(){  String a="1231212478987482988429808779810457634781384756794987";  BigInteger bA=new BigInteger(a);  int aScale=10;  BigDecimal aNumber=new BigDecimal(bA,aScale);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  public static TypeReference newExceptionReference(int exceptionIndex){  return new TypeReference((THROWS << 24) | (exceptionIndex << 8));}  }
class C{  public int read(byte[] b,int off,int len) throws IOException {  if (b == null) {    throw new NullPointerException();  }  if ((off < 0) || (len < 0) || (off + len > b.length)) {    throw new IndexOutOfBoundsException();  }  if (len == 0) {    return 0;  }  long pos=readUntil(pointer + len);  if (pos <= pointer) {    return -1;  }  byte[] buf=(byte[])data.get((int)(pointer >> SECTOR_SHIFT));  int nbytes=Math.min(len,SECTOR_SIZE - (int)(pointer & SECTOR_MASK));  System.arraycopy(buf,(int)(pointer & SECTOR_MASK),b,off,nbytes);  pointer+=nbytes;  return nbytes;}  }
class C{  public void removeKnot(int n){  if (numKnots <= 4)   return;  if (n < numKnots - 1) {    System.arraycopy(xKnots,n + 1,xKnots,n,numKnots - n - 1);    System.arraycopy(yKnots,n + 1,yKnots,n,numKnots - n - 1);    System.arraycopy(knotTypes,n + 1,knotTypes,n,numKnots - n - 1);  }  numKnots--;  if (xKnots[1] > 0)   xKnots[1]=0;  rebuildGradient();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override protected void wrapUp() throws Exception {  m_b=-(m_bLow + m_bUp) / 2.0;  m_target=null;  m_error=null;  super.wrapUp();}  }
class C{  protected double switchedLog10(double val){  return this.smallLogFlag ? Math.log(val) / LOG10_VALUE : adjustedLog10(val);}  }
class C{  @Override public boolean performOperation(int generation){  return true;}  }
class C{  private void populateXtremIOAccessProfile(AccessProfile accessProfile,StorageProvider providerInfo){  accessProfile.setSystemId(providerInfo.getId());  accessProfile.setSystemClazz(providerInfo.getClass());  accessProfile.setIpAddress(providerInfo.getIPAddress());  accessProfile.setUserName(providerInfo.getUserName());  accessProfile.setPassword(providerInfo.getPassword());  accessProfile.setSystemType(DiscoveredDataObject.Type.xtremio.name());  accessProfile.setPortNumber(providerInfo.getPortNumber());  accessProfile.setSslEnable(String.valueOf(providerInfo.getUseSSL()));}  }
class C{  @Override public byte[] serialize(){  byte[] payloadData=null;  if (payload != null) {    payload.setParent(this);    payloadData=payload.serialize();  }  int optionsLength=0;  if (this.options != null)   optionsLength=this.options.length / 4;  this.headerLength=(byte)(5 + optionsLength);  this.totalLength=(short)(this.headerLength * 4 + ((payloadData == null) ? 0 : payloadData.length));  byte[] data=new byte[this.totalLength];  ByteBuffer bb=ByteBuffer.wrap(data);  bb.put((byte)(((this.version & 0xf) << 4) | (this.headerLength & 0xf)));  bb.put(this.diffServ);  bb.putShort(this.totalLength);  bb.putShort(this.identification);  bb.putShort((short)(((this.flags & IPV4_FLAGS_MASK) << IPV4_FLAGS_SHIFT) | (this.fragmentOffset & IPV4_OFFSET_MASK)));  bb.put(this.ttl);  bb.put((byte)this.protocol.getIpProtocolNumber());  bb.putShort(this.checksum);  bb.putInt(this.sourceAddress.getInt());  bb.putInt(this.destinationAddress.getInt());  if (this.options != null)   bb.put(this.options);  if (payloadData != null)   bb.put(payloadData);  if (this.checksum == 0) {    bb.rewind();    int accumulation=0;    for (int i=0; i < this.headerLength * 2; ++i) {      accumulation+=0xffff & bb.getShort();    }    accumulation=((accumulation >> 16) & 0xffff) + (accumulation & 0xffff);    this.checksum=(short)(~accumulation & 0xffff);    bb.putShort(10,this.checksum);  }  return data;}  }
class C{  public boolean unlockIt(){  log.info(toString());  setProcessing(false);  return true;}  }
class C{  protected PreOrPostCondition_Impl(){  super();}  }
class C{  public void paintCheckBoxMenuItemBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public static int[] toIntArray(float[] array){  int[] result=new int[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(int)array[i];  }  return result;}  }
class C{  public void add(File file,String pathForEntry,String password) throws IOException, UnsupportedEncodingException {  FileInputStream fis=new FileInputStream(file);  try {    add(pathForEntry,fis,password);  }  finally {    fis.close();  }}  }
class C{  public void deleteConsistencyGroup(String cgName) throws VPlexApiException {  s_logger.info("Request to delete consistency group on VPlex at {}",_baseURI);  _cgMgr.deleteConsistencyGroup(cgName);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:04.392 -0500",hash_original_method="56717C4466E220164D65DBB18C5ECF92",hash_generated_method="2E212131A24D5A272E84C349FE7D0F17") public void transferTo(InputChannel outParameter){  if (outParameter == null) {    throw new IllegalArgumentException("outParameter must not be null");  }  nativeTransferTo(outParameter);}  }
class C{  public UnchangeableAllowingOnBehalfActingException(String message){  super(message);}  }
class C{  public void remove(CFrame window){  if (windows.remove(window)) {    window.removeComponentListener(eventListener);    window.removeWindowListener(eventListener);  }}  }
class C{  protected final void destroyDefaultSetup(){  if (this.shell != null) {    executeCommand(shell,"exit");    this.shell.terminate();    this.shell=null;  }  disconnectAllFromDS();  Host.getHost(0).getVM(0).invoke("verify service stopped",null);}  }
class C{  boolean computeSuperClasses(){  Set<OwlClass> ancestors=new HashSet<OwlClass>();  Set<OwlClass> frontier=new HashSet<OwlClass>(superClasses);  while (!frontier.isEmpty()) {    Set<OwlClass> next=new HashSet<OwlClass>();    for (    OwlClass ancestor : frontier) {      ancestors.add(ancestor);      next.addAll(ancestor.superClasses);    }    next.removeAll(ancestors);    frontier=next;  }  boolean newInfo=!ancestors.equals(superClasses);  superClasses=ancestors;  return newInfo;}  }
class C{  public void loadFile(String filename,AbstractFileLoader... loaders){  ArffPanel panel;  panel=new ArffPanel(filename,loaders);  panel.addChangeListener(this);  tabbedPane.addTab(panel.getTitle(),panel);  tabbedPane.setSelectedIndex(tabbedPane.getTabCount() - 1);}  }
class C{  public void createVertexAndNormalBuffersOnly(){  mVertices.compact().position(0);  mNormals.compact().position(0);  createBuffer(mVertexBufferInfo,BufferType.FLOAT_BUFFER,mVertices,GLES20.GL_ARRAY_BUFFER);  createBuffer(mNormalBufferInfo,BufferType.FLOAT_BUFFER,mNormals,GLES20.GL_ARRAY_BUFFER);  GLES20.glBindBuffer(GLES20.GL_ELEMENT_ARRAY_BUFFER,0);  GLES20.glBindBuffer(GLES20.GL_ARRAY_BUFFER,0);}  }
class C{  public int size(){  return count;}  }
class C{  public int waitFor() throws InterruptedException {  if (vm == null)   throw new IllegalStateException("can't wait for JavaVM that hasn't started");  int status=vm.waitFor();  outPipe.join();  errPipe.join();  return status;}  }
class C{  public PriorityQueue(Collection<? extends E> c){  if (c instanceof PriorityQueue) {    getFromPriorityQueue((PriorityQueue<? extends E>)c);  } else   if (c instanceof SortedSet) {    getFromSortedSet((SortedSet<? extends E>)c);  } else {    initSize(c);    addAll(c);  }}  }
class C{  public void endElement(StylesheetHandler handler,String uri,String localName,String rawName) throws org.xml.sax.SAXException {  ProcessorCharacters charProcessor=(ProcessorCharacters)handler.getProcessorFor(null,"text()","text");  charProcessor.setXslTextElement(null);}  }
class C{  public GCTimeCap(){  super(Options.set,"GC Time Cap","Try to limit reference counting collections to this time cap",1000000);}  }
class C{  private CGraphFunctions(){}  }
class C{  public static void addPackage(String packagename){  packages.add(packagename);}  }
class C{  public Builder cancelAndEdit(){  JobManager.instance().cancel(getJobId());  Builder builder=new Builder(this,false);  mTransient=false;  if (!isPeriodic()) {    long offset=System.currentTimeMillis() - mScheduledAt;    long minValue=1L;    builder.setExecutionWindow(Math.max(minValue,getStartMs() - offset),Math.max(minValue,getEndMs() - offset));  }  return builder;}  }
class C{  @Xpect @ParameterParser(syntax="('at' arg1=OFFSET)?") public void scopeWithResource(@N4JSCommaSeparatedValuesExpectation IN4JSCommaSeparatedValuesExpectation expectation,ICrossEReferenceAndEObject arg1){  EObject eobj=arg1.getEObject();  IScope scope=scopeProvider.getScope(eobj,arg1.getCrossEReference());  for (  IEObjectDescription eo : scope.getAllElements()) {    eo.getEObjectURI();  }  URI uri=eobj == null ? null : eobj.eResource() == null ? null : eobj.eResource().getURI();  expectation.assertEquals(new ScopeAwareIterable(uri,false,scope),new IsInScopeWithOptionalPositionPredicate(converter,uri,false,scope));}  }
class C{  public List<JCAnnotation> translateAnnotations(List<JCAnnotation> trees){  for (List<JCAnnotation> l=trees; l.nonEmpty(); l=l.tail)   l.head=translate(l.head);  return trees;}  }
class C{  public void dumpToConsole(){  this.log.info("Dumping arrival delay histogram...");  System.out.println("delay; count");  for (int i=0; i < this.arrivalDelay.length; i++) {    System.out.println(i + "; " + this.arrivalDelay[i]);  }  this.log.info("Dumping departure delay histogram...");  System.out.println("delay; count");  for (int i=0; i < this.departureDelay.length; i++) {    System.out.println(i + "; " + this.departureDelay[i]);  }}  }
class C{  @RequestMapping(value="/{cubeName}/build",method={RequestMethod.PUT}) @ResponseBody public JobInstance build(@PathVariable String cubeName,@RequestBody JobBuildRequest req){  return rebuild(cubeName,req);}  }
class C{  public FileElement(String fileName){  this.filePath=fileName;}  }
class C{  public static int uninstallSilent(Context context,String packageName,boolean isKeepData){  if (packageName == null || packageName.length() == 0) {    return DELETE_FAILED_INVALID_PACKAGE;  }  StringBuilder command=new StringBuilder().append("LD_LIBRARY_PATH=/vendor/lib:/system/lib pm uninstall").append(isKeepData ? " -k " : " ").append(packageName.replace(" ","\\ "));  CommandResult commandResult=ShellUtils.execCommand(command.toString(),!isSystemApplication(context),true);  if (commandResult.successMsg != null && (commandResult.successMsg.contains("Success") || commandResult.successMsg.contains("success"))) {    return DELETE_SUCCEEDED;  }  Log.e(TAG,new StringBuilder().append("uninstallSilent successMsg:").append(commandResult.successMsg).append(", ErrorMsg:").append(commandResult.errorMsg).toString());  if (commandResult.errorMsg == null) {    return DELETE_FAILED_INTERNAL_ERROR;  }  if (commandResult.errorMsg.contains("Permission denied")) {    return DELETE_FAILED_PERMISSION_DENIED;  }  return DELETE_FAILED_INTERNAL_ERROR;}  }
class C{  @SuppressFBWarnings(value="NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE",justification="no npe in getters") public CreateContainerCmd fillContainerConfig(CreateContainerCmd containerConfig){  if (StringUtils.isNotBlank(hostname)) {    containerConfig.withHostName(hostname);  }  String[] cmd=getDockerCommandArray();  if (cmd.length > 0) {    containerConfig.withCmd(cmd);  }  containerConfig.withPortBindings(Iterables.toArray(getPortMappings(),PortBinding.class));  if (BooleanUtils.isTrue(getBindAllPorts())) {    containerConfig.withPublishAllPorts(getBindAllPorts());  }  if (BooleanUtils.isTrue(getPrivileged())) {    containerConfig.withPrivileged(getPrivileged());  }  if (getCpuShares() != null && getCpuShares() > 0) {    containerConfig.withCpuShares(getCpuShares());  }  if (getMemoryLimit() != null && getMemoryLimit() > 0) {    Long memoryInByte=getMemoryLimit() * 1024 * 1024;    containerConfig.withMemory(memoryInByte);  }  if (CollectionUtils.isNotEmpty(getDnsHosts())) {    containerConfig.withDns(getDnsHosts().toArray(new String[getDnsHosts().size()]));  }  if (CollectionUtils.isNotEmpty(getVolumes())) {    ArrayList<Volume> vols=new ArrayList<>();    ArrayList<Bind> binds=new ArrayList<>();    for (    String vol : getVolumes()) {      final String[] group=vol.split(":");      if (group.length > 1) {        if (group[1].equals("/")) {          throw new IllegalArgumentException("Invalid bind mount: destination can't be '/'");        }        binds.add(Bind.parse(vol));      } else       if (vol.equals("/")) {        throw new IllegalArgumentException("Invalid volume: path can't be '/'");      } else {        vols.add(new Volume(vol));      }    }    containerConfig.withVolumes(vols.toArray(new Volume[vols.size()]));    containerConfig.withBinds(binds.toArray(new Bind[binds.size()]));  }  if (CollectionUtils.isNotEmpty(getVolumesFrom())) {    ArrayList<VolumesFrom> volFrom=new ArrayList<>();    for (    String volFromStr : getVolumesFrom()) {      volFrom.add(new VolumesFrom(volFromStr));    }    containerConfig.withVolumesFrom(volFrom.toArray(new VolumesFrom[volFrom.size()]));  }  if (BooleanUtils.isTrue(getTty())) {    containerConfig.withTty(getTty());  }  if (CollectionUtils.isNotEmpty(getEnvironment())) {    containerConfig.withEnv(getEnvironment().toArray(new String[getEnvironment().size()]));  }  if (StringUtils.isNotBlank(getMacAddress())) {    containerConfig.withMacAddress(getMacAddress());  }  if (CollectionUtils.isNotEmpty(getExtraHosts())) {    containerConfig.withExtraHosts(getExtraHosts().toArray(new String[getExtraHosts().size()]));  }  if (StringUtils.isNotBlank(getNetworkMode())) {    containerConfig.withNetworkMode(getNetworkMode());  }  if (!getDevices().isEmpty()) {    containerConfig.withDevices(getDevices().stream().map(null).collect(Collectors.toList()));  }  if (StringUtils.isNotBlank(getCpusetCpus())) {    containerConfig.withCpusetCpus(getCpusetCpus());  }  if (StringUtils.isNotBlank(getCpusetMems())) {    containerConfig.withCpusetMems(getCpusetMems());  }  if (!getLinks().isEmpty()) {    containerConfig.withLinks(getLinks().stream().map(null).collect(Collectors.toList()));  }  return containerConfig;}  }
class C{  private static long[] computeParameters(final LongIterator iterator){  long v=-1, prev=-1, c=0;  while (iterator.hasNext()) {    v=iterator.nextLong();    if (prev > v)     throw new IllegalArgumentException("The list of values is not monotone: " + prev + " > "+ v);    prev=v;    c++;  }  return new long[]{c,v};}  }
class C{  private void markFinalFieldsAsLiterals(){  for (  RVMField f : getStaticFields()) {    if (f.isFinal()) {      Offset fieldOffset=f.getOffset();      if (Statics.isReference(Statics.offsetAsSlot(fieldOffset))) {        Statics.markAsReferenceLiteral(fieldOffset);      } else {        Statics.markAsNumericLiteral(f.getSize(),fieldOffset);      }    }  }}  }
class C{  public CategoryInfo(String id,String name,BufferedImage image,String texttip,Boolean catshowname,String colour,Integer catorder){  m_sID=id;  m_sName=name;  m_Image=image;  m_sTextTip=texttip;  m_bCatShowName=catshowname;  m_sColour=colour;  m_iCatOrder=catorder;}  }
class C{  @Nullable public static PkiVerificationData verifyPaymentRequestPki(Protos.PaymentRequest paymentRequest,KeyStore trustStore) throws PaymentProtocolException {  List<X509Certificate> certs=null;  try {    final String pkiType=paymentRequest.getPkiType();    if ("none".equals(pkiType))     return null;    String algorithm;    if ("x509+sha256".equals(pkiType))     algorithm="SHA256withRSA"; else     if ("x509+sha1".equals(pkiType))     algorithm="SHA1withRSA"; else     throw new PaymentProtocolException.InvalidPkiType("Unsupported PKI type: " + pkiType);    Protos.X509Certificates protoCerts=Protos.X509Certificates.parseFrom(paymentRequest.getPkiData());    if (protoCerts.getCertificateCount() == 0)     throw new PaymentProtocolException.InvalidPkiData("No certificates provided in message: server config error");    CertificateFactory certificateFactory=CertificateFactory.getInstance("X.509");    certs=Lists.newArrayList();    for (    ByteString bytes : protoCerts.getCertificateList())     certs.add((X509Certificate)certificateFactory.generateCertificate(bytes.newInput()));    CertPath path=certificateFactory.generateCertPath(certs);    PKIXParameters params=new PKIXParameters(trustStore);    params.setRevocationEnabled(false);    CertPathValidator validator=CertPathValidator.getInstance("PKIX");    PKIXCertPathValidatorResult result=(PKIXCertPathValidatorResult)validator.validate(path,params);    PublicKey publicKey=result.getPublicKey();    Signature signature=Signature.getInstance(algorithm);    signature.initVerify(publicKey);    Protos.PaymentRequest.Builder reqToCheck=paymentRequest.toBuilder();    reqToCheck.setSignature(ByteString.EMPTY);    signature.update(reqToCheck.build().toByteArray());    if (!signature.verify(paymentRequest.getSignature().toByteArray()))     throw new PaymentProtocolException.PkiVerificationException("Invalid signature, this payment request is not valid.");    final X509Certificate cert=certs.get(0);    String displayName=X509Utils.getDisplayNameFromCertificate(cert,true);    if (displayName == null)     throw new PaymentProtocolException.PkiVerificationException("Could not extract name from certificate");    return new PkiVerificationData(displayName,publicKey,result.getTrustAnchor());  } catch (  InvalidProtocolBufferException e) {    throw new PaymentProtocolException.InvalidPkiData(e);  }catch (  CertificateException e) {    throw new PaymentProtocolException.PkiVerificationException(e);  }catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }catch (  InvalidAlgorithmParameterException e) {    throw new RuntimeException(e);  }catch (  CertPathValidatorException e) {    throw new PaymentProtocolException.PkiVerificationException(e,certs);  }catch (  InvalidKeyException e) {    throw new PaymentProtocolException.PkiVerificationException(e);  }catch (  SignatureException e) {    throw new PaymentProtocolException.PkiVerificationException(e);  }catch (  KeyStoreException e) {    throw new RuntimeException(e);  }}  }
class C{  public static JCExpression typeIn(JCExpression tree){switch (tree.getTag()) {case ANNOTATED_TYPE:    return ((JCAnnotatedType)tree).underlyingType;case IDENT:case TYPEIDENT:case SELECT:case TYPEARRAY:case WILDCARD:case TYPEPARAMETER:case TYPEAPPLY:case ERRONEOUS:  return tree;default :throw new AssertionError("Unexpected type tree: " + tree);}}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case STORE_NAME:  return isSetStoreName();case KEY:return isSetKey();case VERSIONED_VALUE:return isSetVersionedValue();case VALUE:return isSetValue();}throw new IllegalStateException();}  }
class C{  public static double hypot(double a,double b){  double r;  if (Math.abs(a) > Math.abs(b)) {    r=b / a;    r=Math.abs(a) * Math.sqrt(1 + r * r);  } else   if (b != 0) {    r=a / b;    r=Math.abs(b) * Math.sqrt(1 + r * r);  } else {    r=0.0;  }  return r;}  }
class C{  public static boolean isBetween(final float x,final float a,final float b){  return (a > b) ? x <= a && x >= b : x <= b && x >= a;}  }
class C{  public Compactor compactor(){  return compactor;}  }
class C{  public static Ignite start(URL springCfgUrl,@Nullable ApplicationContext springCtx) throws IgniteCheckedException {  return IgnitionEx.start(springCfgUrl,null,new GridSpringResourceContextImpl(springCtx),null);}  }
class C{  public static float[] closestPoint(float x,float y,float node1X,float node1Y,float node2X,float node2Y){  float dx=node2X - node1X;  float dy=node2Y - node1Y;  float cx, cy;  if (dx == 0.0d && dy == 0.0d) {    cx=node1X;    cy=node1Y;  } else {    final double u=((x - node1X) * dx + (y - node1Y) * dy) / (dx * dx + dy * dy);    if (u < 0.0d) {      cx=node1X;      cy=node1Y;    } else     if (u > 1.0d) {      cx=node2X;      cy=node2Y;    } else {      cx=(float)(node1X + u * dx);      cy=(float)(node1Y + u * dy);    }  }  return new float[]{cx,cy};}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:58.185 -0500",hash_original_method="BE93B3D03F00A664B96E561F38428949",hash_generated_method="3C77521596384CF49A716E87F62A934D") public void removeGpsStatusListener(GpsStatus.Listener listener){  try {    GpsStatusListenerTransport transport=mGpsStatusListeners.remove(listener);    if (transport != null) {      mService.removeGpsStatusListener(transport);    }  } catch (  RemoteException e) {    Log.e(TAG,"RemoteException in unregisterGpsStatusListener: ",e);  }}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public void sync() throws SailException {synchronized (syncSemaphore) {    if (persist && contentsChanged) {      logger.debug("syncing data to file...");      try {        IsolationLevels level=IsolationLevels.SNAPSHOT;        SailDataset explicit=store.getExplicitSailSource().dataset(level);        SailDataset inferred=store.getInferredSailSource().dataset(level);        try {          new FileIO(store.getValueFactory()).write(explicit,inferred,syncFile,dataFile);        }  finally {          explicit.close();          inferred.close();        }        contentsChanged=false;        logger.debug("Data synced to file");      } catch (      IOException e) {        logger.error("Failed to sync to file",e);        throw new SailException(e);      }    }  }}  }
class C{  private boolean isOverridden(OutputNode node,Object value) throws Exception {  return factory.setOverride(entry,value,node);}  }
class C{  private void printCertFromStream(InputStream in,PrintStream out) throws Exception {  Collection<? extends Certificate> c=null;  try {    c=cf.generateCertificates(in);  } catch (  CertificateException ce) {    throw new Exception(rb.getString("Failed.to.parse.input"),ce);  }  if (c.isEmpty()) {    throw new Exception(rb.getString("Empty.input"));  }  Certificate[] certs=c.toArray(new Certificate[c.size()]);  for (int i=0; i < certs.length; i++) {    X509Certificate x509Cert=null;    try {      x509Cert=(X509Certificate)certs[i];    } catch (    ClassCastException cce) {      throw new Exception(rb.getString("Not.X.509.certificate"));    }    if (certs.length > 1) {      MessageFormat form=new MessageFormat(rb.getString("Certificate.i.1."));      Object[] source={new Integer(i + 1)};      out.println(form.format(source));    }    if (rfc)     dumpCert(x509Cert,out); else     printX509Cert(x509Cert,out);    if (i < (certs.length - 1)) {      out.println();    }  }}  }
class C{  public HashConversion(String[] initData){  initFromStrings(initData);}  }
class C{  public void testConfigure() throws Exception {  configuration.configure(container);  assertTrue(configuration.getFileHandler().exists(configuration.getHome() + "/config.xml"));  assertTrue(configuration.getFileHandler().exists(configuration.getHome() + "/DefaultAuthenticatorInit.ldift"));  assertTrue(configuration.getFileHandler().exists(configuration.getHome() + "/applications/cargocpc.war"));}  }
class C{  @PostConstruct public void postConstruct() throws Exception {  if (log.isInfoEnabled()) {    log.info("|-Invocation Data Access Service active...");  }}  }
class C{  public static double[] toDoubleArray(long[] array){  double[] result=new double[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(double)array[i];  }  return result;}  }
class C{  public boolean isPropertyAgnostic(){  return isPropertyAgnostic;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:47:23.137 -0400",hash_original_method="D3EA499101C50F733538C7F2C71C7FCD",hash_generated_method="D3EA499101C50F733538C7F2C71C7FCD") void initialize(CharSequence title,Drawable icon){  setClickable(true);  setFocusable(true);  if (mTextAppearance != -1) {    setTextAppearance(mTextAppearanceContext,mTextAppearance);  }  setTitle(title);  setIcon(icon);}  }
class C{  private void insert(ByteString byteString){  int depthBin=getDepthBinForLength(byteString.size());  int binEnd=minLengthByDepth[depthBin + 1];  if (prefixesStack.isEmpty() || prefixesStack.peek().size() >= binEnd) {    prefixesStack.push(byteString);  } else {    int binStart=minLengthByDepth[depthBin];    ByteString newTree=prefixesStack.pop();    while (!prefixesStack.isEmpty() && prefixesStack.peek().size() < binStart) {      ByteString left=prefixesStack.pop();      newTree=new RopeByteString(left,newTree);    }    newTree=new RopeByteString(newTree,byteString);    while (!prefixesStack.isEmpty()) {      depthBin=getDepthBinForLength(newTree.size());      binEnd=minLengthByDepth[depthBin + 1];      if (prefixesStack.peek().size() < binEnd) {        ByteString left=prefixesStack.pop();        newTree=new RopeByteString(left,newTree);      } else {        break;      }    }    prefixesStack.push(newTree);  }}  }
class C{  private LinkedList<Diff> diff_main(String text1,String text2,boolean checklines,long deadline){  if (text1 == null || text2 == null) {    throw new IllegalArgumentException("Null inputs. (diff_main)");  }  LinkedList<Diff> diffs;  if (text1.equals(text2)) {    diffs=new LinkedList<Diff>();    if (text1.length() != 0) {      diffs.add(new Diff(Operation.EQUAL,text1));    }    return diffs;  }  int commonlength=diff_commonPrefix(text1,text2);  String commonprefix=text1.substring(0,commonlength);  text1=text1.substring(commonlength);  text2=text2.substring(commonlength);  commonlength=diff_commonSuffix(text1,text2);  String commonsuffix=text1.substring(text1.length() - commonlength);  text1=text1.substring(0,text1.length() - commonlength);  text2=text2.substring(0,text2.length() - commonlength);  diffs=diff_compute(text1,text2,checklines,deadline);  if (commonprefix.length() != 0) {    diffs.addFirst(new Diff(Operation.EQUAL,commonprefix));  }  if (commonsuffix.length() != 0) {    diffs.addLast(new Diff(Operation.EQUAL,commonsuffix));  }  diff_cleanupMerge(diffs);  return diffs;}  }
class C{  public AlternativeName(boolean which,byte[] encoding) throws IOException {  super(encoding);  this.which=which;  this.alternativeNames=(GeneralNames)GeneralNames.ASN1.decode(encoding);}  }
class C{  public static boolean isEmbedded(){  return !isSimulation();}  }
class C{  public Lock tryExclusiveLock(){  if (lock.isActiveLock()) {    return null;  }synchronized (this) {    if (lock.isActiveLock()) {      return null;    }    return createLock();  }}  }
class C{  public static double discharge(ItemStack itemStack,double amount){  if (itemStack != null) {    if (itemStack.getItem() instanceof IEnergizedItem) {      IEnergizedItem energizedItem=(IEnergizedItem)itemStack.getItem();      if (energizedItem.canSend(itemStack)) {        double energyToUse=Math.min(energizedItem.getMaxTransfer(itemStack),Math.min(energizedItem.getEnergy(itemStack),amount));        energizedItem.setEnergy(itemStack,energizedItem.getEnergy(itemStack) - energyToUse);        return energyToUse;      }    }  }  return 0;}  }
class C{  public boolean isCancelled(){  return !this.send;}  }
class C{  public Document read(InputStream in,String systemId) throws DocumentException {  InputSource source=new InputSource(in);  source.setSystemId(systemId);  if (this.encoding != null) {    source.setEncoding(this.encoding);  }  return read(source);}  }
class C{  public void testConstrDoubleMinus01(){  double a=-1.E-1;  int aScale=55;  BigInteger bA=new BigInteger("-1000000000000000055511151231257827021181583404541015625");  BigDecimal aNumber=new BigDecimal(a);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  public ByteVector(byte[] values){  this.values=new byte[values.length];  System.arraycopy(values,0,this.values,0,values.length);}  }
class C{  public void writeEntityToNBT(NBTTagCompound p_70014_1_){  p_70014_1_.setShort("xTile",(short)this.field_145791_d);  p_70014_1_.setShort("yTile",(short)this.field_145792_e);  p_70014_1_.setShort("zTile",(short)this.field_145789_f);  p_70014_1_.setShort("life",(short)this.ticksInGround);  p_70014_1_.setByte("inTile",(byte)Block.getIdFromBlock(this.field_145790_g));  p_70014_1_.setByte("inData",(byte)this.inData);  p_70014_1_.setByte("shake",(byte)this.arrowShake);  p_70014_1_.setByte("inGround",(byte)(this.inGround ? 1 : 0));  p_70014_1_.setByte("pickup",(byte)this.canBePickedUp);  p_70014_1_.setDouble("damage",this.damage);}  }
class C{  private static int searchSomeElements(BloomIndex<Integer> bfi,int startRange,int endRange,int nbSearchesToDo){  int minSearchSteps=10000000;  int maxSearchSteps=0;  long sumSearchSteps=0;  int nbSearches=0;  int nbFound=0;  int elem;  SearchStatistics stat=new SearchStatistics();  long sumSearchTime=0;  for (int i=0; i < nbSearchesToDo; i++) {    elem=(int)(Math.floor(Math.random() * (endRange - startRange) + startRange));    stat.clear();    long startTime=System.currentTimeMillis();    List<Integer> results=bfi.search(elem,stat);    long endTime=System.currentTimeMillis();    long diffTime=endTime - startTime;    sumSearchTime+=diffTime;    if (results.size() > 0) {      nbFound++;    }    nbSearches++;    if (stat.nbBFChecks < minSearchSteps) {      minSearchSteps=stat.nbBFChecks;    }    if (stat.nbBFChecks > maxSearchSteps) {      maxSearchSteps=stat.nbBFChecks;    }    sumSearchSteps+=stat.nbBFChecks;  }  System.out.print(" |Min steps| " + minSearchSteps + "| Max steps | "+ maxSearchSteps+ "| Avg steps | "+ (double)sumSearchSteps / nbSearches + "| Avg time millis | " + (double)sumSearchTime / nbSearches + "| Total time millis | " + sumSearchTime + "| Nb searches | " + nbSearches);  return nbFound;}  }
