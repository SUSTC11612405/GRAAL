class C{  @Override public String onProcessConfiguration(final ProcessConfigurationRequest processConfigurationRequest){  ProcessConfigurationResponse processConfigurationResponse=new ProcessConfigurationResponse();  if (processConfigurationRequest == null) {    LOGGER.error("onProcessConfiguration(null) called - rejecting the request.");    processConfigurationResponse.setConfigurationXML(ProcessConfigurationResponse.CONF_REJECTED);    return this.xmlConverter.toXml(processConfigurationResponse);  }  processConfigurationResponse.setProcessName(processConfigurationRequest.getProcessName());  if (LOGGER.isDebugEnabled()) {    StringBuilder str=new StringBuilder("onProcessConfiguration([");    str.append(processConfigurationRequest.getProcessName());    str.append(", ");    str.append(processConfigurationRequest.getProcessPIK());    str.append("]) called.");    LOGGER.debug(str.toString());  }  try {    Long processId=processCache.getProcessId(processConfigurationRequest.getProcessName());    Process processCopy=processCache.getCopy(processId);    LOGGER.info("onProcessConfiguration - Configuration request for DAQ " + processCopy.getName() + " authorized.");    if (processConfigurationRequest.getProcessPIK().equals(processCopy.getProcessPIK())) {      LOGGER.info("onProcessConfiguration - SERVER_CONFIG");      this.processFacade.setLocalConfig(processId,LocalConfig.N);    }    processConfigurationResponse.setConfigurationXML(processXMLProvider.getProcessConfigXML(processCopy));    LOGGER.info("onProcessConfiguration - Returning configuration XML to DAQ " + processCopy.getName());  } catch (  CacheElementNotFoundException cacheEx) {    LOGGER.warn("onProcessConfiguration - process not found in cache (name = " + processConfigurationRequest.getProcessName() + ") - unable to accept connection request.",cacheEx);    processConfigurationResponse.setConfigurationXML(ProcessConfigurationResponse.CONF_REJECTED);  }catch (  Exception e) {    LOGGER.error(new StringBuffer("onProcessConfiguration - An unexpected Exception occurred.").toString(),e);    processConfigurationResponse.setConfigurationXML(ProcessConfigurationResponse.CONF_REJECTED);  }  return this.xmlConverter.toXml(processConfigurationResponse);}  }
class C{  private void logSlowRequests(long requestLifetime,Request<?> request,byte[] responseContents,StatusLine statusLine){  if (DEBUG || requestLifetime > SLOW_REQUEST_THRESHOLD_MS) {    VolleyLog.d("HTTP response for request=<%s> [lifetime=%d], [size=%s], " + "[rc=%d], [retryCount=%s]",request,requestLifetime,responseContents != null ? responseContents.length : "null",statusLine.getStatusCode(),request.getRetryPolicy().getCurrentRetryCount());  }}  }
class C{  public FriendsGetOnlineQueryWithMobile offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  public List<GenericValue> makeAllOrderItemSurveyResponses(){  List<GenericValue> allInfos=new LinkedList<GenericValue>();  for (  ShoppingCartItem item : this) {    List<String> responses=UtilGenerics.checkList(item.getAttribute("surveyResponses"));    GenericValue response=null;    if (responses != null) {      for (      String responseId : responses) {        try {          response=this.getDelegator().findOne("SurveyResponse",UtilMisc.toMap("surveyResponseId",responseId),false);        } catch (        GenericEntityException e) {          Debug.logError(e,"Unable to obtain SurveyResponse record for ID : " + responseId,module);        }      }    } else {      String surveyResponseId=(String)item.getAttribute("surveyResponseId");      try {        response=this.getDelegator().findOne("SurveyResponse",UtilMisc.toMap("surveyResponseId",surveyResponseId),false);      } catch (      GenericEntityException e) {        Debug.logError(e,"Unable to obtain SurveyResponse record for ID : " + surveyResponseId,module);      }    }    if (response != null) {      response.set("orderItemSeqId",item.getOrderItemSeqId());      allInfos.add(response);    }  }  return allInfos;}  }
class C{  @SuppressLint("NewApi") public void sendText(Context context) throws ActivityNotFoundException {  if (Utils.hasKitKat()) {    String defaultSmsPackageName=Telephony.Sms.getDefaultSmsPackage(context);    Intent sendIntent=new Intent(Intent.ACTION_SENDTO,Uri.parse("smsto:" + Uri.encode(getNumber())));    if (defaultSmsPackageName != null) {      sendIntent.setPackage(defaultSmsPackageName);    }    context.startActivity(sendIntent);  } else {    Intent textIntent=new Intent();    textIntent.setAction(Intent.ACTION_VIEW);    textIntent.setData(Uri.fromParts("sms",getNumber(),null));    context.startActivity(textIntent);  }}  }
class C{  @POST @Path("{experimentID}/buckets") @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) @ApiOperation(value="Modify a bucket for an experiment",notes="Can only modify buckets for an experiment that is in DRAFT state.",response=Bucket.class) @Timed public Response postBucket(@PathParam("experimentID") @ApiParam(value="Experiment ID") final Experiment.ID experimentID,@ApiParam(required=true,defaultValue=DEFAULT_MODBUCK) final Bucket newBucketEntity,@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String authorizationHeader){  Username userName=authorization.getUser(authorizationHeader);  Experiment experiment=experiments.getExperiment(experimentID);  if (experiment == null) {    throw new ExperimentNotFoundException(experimentID);  }  authorization.checkUserPermissions(userName,experiment.getApplicationName(),CREATE);  Bucket newBucket=Bucket.from(newBucketEntity).withExperimentID(experimentID).build();  LOGGER.warn("Bucket edited: user " + userName.toString() + " is adding bucket "+ newBucket.toString()+ " to experiment "+ experimentID.toString());  UserInfo user=authorization.getUserInfo(userName);  Bucket bucket=buckets.createBucket(experimentID,newBucket,user);  assert bucket != null : "Created bucket was null";  return httpHeader.headers(CREATED).entity(bucket).build();}  }
class C{  public void saveFrame(File file) throws IOException {  if (!eglCore.isCurrent(eGLSurface)) {    throw new RuntimeException("Expected EGL context/surface is not current");  }  String filename=file.toString();  int width=getWidth();  int height=getHeight();  ByteBuffer buf=ByteBuffer.allocateDirect(width * height * 4);  buf.order(ByteOrder.LITTLE_ENDIAN);  GLES20.glReadPixels(0,0,width,height,GLES20.GL_RGBA,GLES20.GL_UNSIGNED_BYTE,buf);  GlUtil.checkGlError("glReadPixels");  buf.rewind();  BufferedOutputStream bos=null;  try {    bos=new BufferedOutputStream(new FileOutputStream(filename));    Bitmap bmp=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);    bmp.copyPixelsFromBuffer(buf);    bmp.compress(Bitmap.CompressFormat.PNG,90,bos);    bmp.recycle();  }  finally {    if (bos != null)     bos.close();  }  Log.i(TAG,"Saved " + width + "x"+ height+ " frame as '"+ filename+ "'");}  }
class C{  public void addValidationRuleGroup(ValidationRuleGroup validationRuleGroup){  groups.add(validationRuleGroup);  validationRuleGroup.getMembers().add(this);}  }
class C{  @Override public Object clone(){  return GenericValue.create(this);}  }
class C{  public boolean isFull(){  return hi() - lo() == 2 * S2.M_PI;}  }
class C{  protected final void applyTheme(AppTheme theme){  preferences.persistSelectedTheme(theme);  restartActivity();  int enterAnimation=android.R.anim.fade_in;  int exitAnimation=android.R.anim.fade_out;  overridePendingTransition(enterAnimation,exitAnimation);}  }
class C{  private static boolean isInCornerTargetZone(float x,float y,float handleX,float handleY,float targetRadius){  if (Math.abs(x - handleX) <= targetRadius && Math.abs(y - handleY) <= targetRadius) {    return true;  }  return false;}  }
class C{  public static byte[] generateKey(){  byte[] keyData=new byte[KEY_LENGTH];  secureRandom.nextBytes(keyData);  byte[] ivData=new byte[IV_LENGTH];  secureRandom.nextBytes(ivData);  byte[] key=new byte[IV_LENGTH + KEY_LENGTH];  System.arraycopy(ivData,0,key,0,IV_LENGTH);  System.arraycopy(keyData,0,key,IV_LENGTH,KEY_LENGTH);  return key;}  }
class C{  @Override public boolean isCellEditable(int rowIndex,int columnIndex){  return true;}  }
class C{  public OffscreenSurface(EglCore eglCore,int width,int height){  super(eglCore);  createOffscreenSurface(width,height);}  }
class C{  public int addNodeRow(){  return getNodeTable().addRow();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_AlwaysHit_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200327,skillname);}  }
class C{  private MulticastAnnouncement decodeMulticastAnnouncement(final DatagramPacket pkt) throws IOException {  int pv;  try {    pv=ByteBuffer.wrap(pkt.getData(),pkt.getOffset(),pkt.getLength()).getInt();  } catch (  BufferUnderflowException e) {    throw new DiscoveryProtocolException(null,e);  }  multicastAnnouncementConstraints.checkProtocolVersion(pv);  final Discovery disco=getDiscovery(pv);  return disco.decodeMulticastAnnouncement(pkt,multicastAnnouncementConstraints.getUnfulfilledConstraints(),true);}  }
class C{  public ComparableWeakReference(T referent,ReferenceQueue<? super T> q){  super(referent,q);}  }
class C{  private Paillier deserializePaillier(JsonObject paillier){  BigInteger p=new BigInteger(paillier.get("p").getAsString());  BigInteger q=new BigInteger(paillier.get("q").getAsString());  int bitLength=paillier.get("bitLength").getAsInt();  return new Paillier(p,q,bitLength);}  }
class C{  @SpaceDataEvent public Data processData(Data data){  try {    Thread.sleep(workDuration);  } catch (  InterruptedException e) {  }  data.setProcessed(true);  data.setData("PROCESSED : " + data.getRawData());  log.info(" ------ PROCESSED : " + data);  return data;}  }
class C{  private boolean casHead(HeadIndex<K,V> cmp,HeadIndex<K,V> val){  return UNSAFE.compareAndSwapObject(this,headOffset,cmp,val);}  }
class C{  protected void addJob(BundleContext context,Class<? extends Job> clazz,String cronExpression){  String jobName=clazz.getName();  String jobGroup=FrameworkUtil.getBundle(clazz).getSymbolicName();  JobDetail job=new JobDetail(jobName,jobGroup,clazz);  job.setDurability(false);  job.setVolatility(true);  job.setDescription(jobName);  try {    CronTrigger trigger=new CronTrigger(jobName,jobGroup,cronExpression);    if (scheduler == null) {      if (schedulerProperties == null) {        schedulerProperties=getDefaultSchedulerProperties();      }      scheduler=new StdSchedulerFactory(schedulerProperties).getScheduler();      scheduler.start();    }    Date date=scheduler.scheduleJob(job,trigger);    Logger.info(this,"Scheduled job " + jobName + ", next trigger is on "+ date);  } catch (  ParseException e) {    Logger.error(this,"Cron expression '" + cronExpression + "' has an exception. Throwing IllegalArgumentException",e);    throw new IllegalArgumentException(e);  }catch (  SchedulerException e) {    Logger.error(this,"Unable to schedule job " + jobName,e);  }}  }
class C{  private void refresh(){  isLoadingData=true;  isLoadingMoreData=true;  mOnRefreshListener.onRefresh();}  }
class C{  protected AudioFacade(@NonNull Context context){  this(new Media(context),new Playlist(context),new Album(context),new Genre(context),new Artist(context));}  }
class C{  public BasenameList subList(int fromIndex,int toIndex){  Vector subVec=new Vector(toIndex - fromIndex,DEFAULT_INCREMENT);  for (int i=fromIndex; i < toIndex; i++)   subVec.add(this.getName(i));  return (new BasenameList(this.fromDir,this.fromExt,subVec));}  }
class C{  @Override public void createSomething(Object newKey){}  }
class C{  public PhotosGetQuery feedType(String value){  return unsafeParam("feed_type",value);}  }
class C{  void boxes(ValueBox... boxes){  this.boxes=boxes;}  }
class C{  public void callTakePicture(int returnType,int encodingType){  boolean saveAlbumPermission=PermissionHelper.hasPermission(this,Manifest.permission.READ_EXTERNAL_STORAGE);  boolean takePicturePermission=PermissionHelper.hasPermission(this,Manifest.permission.CAMERA);  if (!takePicturePermission) {    takePicturePermission=true;    try {      PackageManager packageManager=this.cordova.getActivity().getPackageManager();      String[] permissionsInPackage=packageManager.getPackageInfo(this.cordova.getActivity().getPackageName(),PackageManager.GET_PERMISSIONS).requestedPermissions;      if (permissionsInPackage != null) {        for (        String permission : permissionsInPackage) {          if (permission.equals(Manifest.permission.CAMERA)) {            takePicturePermission=false;            break;          }        }      }    } catch (    NameNotFoundException e) {    }  }  if (takePicturePermission && saveAlbumPermission) {    takePicture(returnType,encodingType);  } else   if (saveAlbumPermission && !takePicturePermission) {    PermissionHelper.requestPermission(this,TAKE_PIC_SEC,Manifest.permission.CAMERA);  } else   if (!saveAlbumPermission && takePicturePermission) {    PermissionHelper.requestPermission(this,TAKE_PIC_SEC,Manifest.permission.READ_EXTERNAL_STORAGE);  } else {    PermissionHelper.requestPermissions(this,TAKE_PIC_SEC,permissions);  }}  }
class C{  static void checkParameterArrayIsNotNull(final String parameterName,final int[] parameterValues){  checkParameterIsNotNull(parameterName,parameterValues);  if (parameterValues.length == 0) {    throw new IllegalArgumentException(parameterName + " cannot be empty.");  }}  }
class C{  public static void init(PLogConfig config){  safelySetConfig(config);}  }
class C{  public static boolean isEmpty(CharSequence str){  return TextUtils.isEmpty(str);}  }
class C{  public static ExpirationDatePickerDialogFragment newInstance(OCFile file,long chosenDateInMillis){  Bundle arguments=new Bundle();  arguments.putParcelable(ARG_FILE,file);  arguments.putLong(ARG_CHOSEN_DATE_IN_MILLIS,chosenDateInMillis);  ExpirationDatePickerDialogFragment dialog=new ExpirationDatePickerDialogFragment();  dialog.setArguments(arguments);  return dialog;}  }
class C{  public static int rgba(float r,float g,float b,float a){  return ((((int)(a * 255 + 0.5)) & 0xFF) << 24) | ((((int)(r * 255 + 0.5)) & 0xFF) << 16) | ((((int)(g * 255 + 0.5)) & 0xFF) << 8)| (((int)(b * 255 + 0.5)) & 0xFF);}  }
class C{  public boolean interiorIntersects(S2LatLngRect other){  return (lat.interiorIntersects(other.lat) && lng.interiorIntersects(other.lng));}  }
class C{  private void instantiate(){  managers=new AbstractAnnotationManager[]{new AnnotationContextManager(androidUnitTest),new AnnotationActivityManager(androidUnitTest),new AnnotationFragmentManager(androidUnitTest),new AnnotationViewManager(androidUnitTest)};  activityManager=(AnnotationActivityManager)managers[1];  fragmentManager=(AnnotationFragmentManager)managers[2];}  }
class C{  private BSPTree<Sphere1D> previousInternalNode(BSPTree<Sphere1D> node){  if (childBefore(node).getCut() != null) {    return leafBefore(node).getParent();  }  while (isBeforeParent(node)) {    node=node.getParent();  }  return node.getParent();}  }
class C{  @SuppressWarnings("rawtypes") private boolean sameType(Object flowSet){  return (flowSet instanceof ArrayPackedSet && ((ArrayPackedSet)flowSet).map == map);}  }
class C{  public void startRecording(String file){switch (this.mode) {case PLAY:    Log.d(LOG_TAG,"AudioPlayer Error: Can't record in play mode.");  sendErrorStatus(MEDIA_ERR_ABORTED);break;case NONE:this.audioFile=file;this.recorder.setAudioSource(MediaRecorder.AudioSource.MIC);this.recorder.setOutputFormat(MediaRecorder.OutputFormat.DEFAULT);this.recorder.setAudioEncoder(MediaRecorder.AudioEncoder.DEFAULT);this.recorder.setOutputFile(this.tempFile);try {this.recorder.prepare();this.recorder.start();this.setState(STATE.MEDIA_RUNNING);return;} catch (IllegalStateException e) {e.printStackTrace();}catch (IOException e) {e.printStackTrace();}sendErrorStatus(MEDIA_ERR_ABORTED);break;case RECORD:Log.d(LOG_TAG,"AudioPlayer Error: Already recording.");sendErrorStatus(MEDIA_ERR_ABORTED);}}  }
class C{  public void join(TransactionParticipant part,long crashCount) throws UnknownTransactionException, CannotJoinException, CrashCountException, RemoteException {  if (crashCount == EMBEDDED_CRASH_COUNT)   mgr.join(id,part,crashCount,this); else   mgr.join(id,part,crashCount);}  }
class C{  @Override public boolean markSupported(){  return false;}  }
class C{  public static int compareTo(double x,double y,double eps){  if (equals(x,y,eps)) {    return 0;  } else   if (x < y) {    return -1;  }  return 1;}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  public final void goToLastProcessedLine(final int lastCommited) throws DataFallbackException {  fFileController.closeFallbackInputStream();  int readLines=fFileController.getReadBackLines();  fFileController.goToLine(readLines + lastCommited);}  }
class C{  @Override public int hashCode(){  return 37 * (37 * 17 + numerator.hashCode()) + denominator.hashCode();}  }
class C{  public DatabaseGetSchoolClassesQuery countryId(Integer value){  return unsafeParam("country_id",value);}  }
class C{  public void resetTime(){}  }
class C{  public static MultilayerPerceptronClassificationModel load(JavaSparkContext jsc,String classifierFileName){  Object object=jsc.objectFile(classifierFileName).first();  return ((MultilayerPerceptronClassificationModel)object);}  }
class C{  private int recalculate(String method,WeaponTypeWrapper weapon,int attackSpeed,int time){  int finalTime=0;  TreeMap<WeaponType,float[]> list=new TreeMap<WeaponType,float[]>();  float dagger[]={600f,1200f};  list.put(WeaponType.DAGGER_1H,dagger);  float mace[]={750f,1500f};  list.put(WeaponType.MACE_1H,mace);  list.put(WeaponType.GUN_1H,mace);  list.put(WeaponType.TOOLHOE_1H,mace);  float sword1h[]={700f,1400f};  list.put(WeaponType.SWORD_1H,sword1h);  float bookorb[]={1100f,2200f};  list.put(WeaponType.BOOK_2H,bookorb);  list.put(WeaponType.ORB_2H,bookorb);  float polearm[]={1400f,2800f};  list.put(WeaponType.POLEARM_2H,polearm);  list.put(WeaponType.TOOLPICK_2H,polearm);  list.put(WeaponType.TOOLROD_2H,polearm);  list.put(WeaponType.CANNON_2H,polearm);  list.put(WeaponType.GUN_2H,polearm);  list.put(WeaponType.KEYBLADE_2H,polearm);  list.put(WeaponType.KEYHAMMER_2H,polearm);  float staff[]={1000f,2000f};  list.put(WeaponType.STAFF_2H,staff);  list.put(WeaponType.HARP_2H,staff);  float swordbow[]={1200f,2400f};  list.put(WeaponType.SWORD_2H,swordbow);  list.put(WeaponType.BOW,swordbow);  float speed=0;  if (method.equalsIgnoreCase("base")) {    speed=list.get(weapon.getMainHand())[1];    if (weapon.getOffHand() != null) {      speed+=(list.get(weapon.getOffHand())[1] * 0.25);    }  } else   if (method.equalsIgnoreCase("cap")) {    speed=list.get(weapon.getMainHand())[0];    if (weapon.getOffHand() != null) {      speed+=(list.get(weapon.getOffHand())[0] * 0.25);    }  } else {    try {      speed=Float.parseFloat(method);    } catch (    Exception e) {    }  }  finalTime=Math.round((float)time / (float)attackSpeed * speed);  return finalTime;}  }
class C{  public static ValueAnimator animateDummy(int duration){  ValueAnimator a=ValueAnimator.ofFloat(0,1);  a.setDuration(duration);  a.start();  return a;}  }
class C{  public void takeHeapDump(Application application,boolean openView){  heapDumpProvider.createHeapDump(application,openView);}  }
class C{  public boolean isOrQuery(){  return hasQuery();}  }
class C{  public static Matrix read(BufferedReader input) throws java.io.IOException {  StreamTokenizer tokenizer=new StreamTokenizer(input);  tokenizer.resetSyntax();  tokenizer.wordChars(0,255);  tokenizer.whitespaceChars(0,' ');  tokenizer.eolIsSignificant(true);  java.util.Vector v=new java.util.Vector();  while (tokenizer.nextToken() == StreamTokenizer.TT_EOL)   ;  if (tokenizer.ttype == StreamTokenizer.TT_EOF)   throw new java.io.IOException("Unexpected EOF on matrix read.");  do {    v.addElement(Double.valueOf(tokenizer.sval));  } while (tokenizer.nextToken() == StreamTokenizer.TT_WORD);  int n=v.size();  double row[]=new double[n];  for (int j=0; j < n; j++)   row[j]=((Double)v.elementAt(j)).doubleValue();  v.removeAllElements();  v.addElement(row);  while (tokenizer.nextToken() == StreamTokenizer.TT_WORD) {    v.addElement(row=new double[n]);    int j=0;    do {      if (j >= n)       throw new java.io.IOException("Row " + v.size() + " is too long.");      row[j++]=Double.valueOf(tokenizer.sval).doubleValue();    } while (tokenizer.nextToken() == StreamTokenizer.TT_WORD);    if (j < n)     throw new java.io.IOException("Row " + v.size() + " is too short.");  }  int m=v.size();  double[][] A=new double[m][];  v.copyInto(A);  return new Matrix(A);}  }
class C{  public Vector3f mult(Vector3f vec){  return mult(vec,null);}  }
class C{  public boolean dynomiteCheck(){  logger.info("Dynomite check with Redis Ping");  if (!dynomiteRedisCheck()) {    try {      logger.error("Dynomite was down");      this.dynProcess.stop();      sleeper.sleepQuietly(1000);      return false;    } catch (    IOException e) {      logger.error("Dynomite cannot be restarted --> Requires manual restart" + e.getMessage());    }  }  return true;}  }
class C{  public static String parseCharset(Map<String,String> headers,String defaultCharset){  String contentType=headers.get(HTTP.CONTENT_TYPE);  if (contentType != null) {    String[] params=contentType.split(";");    for (int i=1; i < params.length; i++) {      String[] pair=params[i].trim().split("=");      if (pair.length == 2) {        if (pair[0].equals("charset")) {          return pair[1];        }      }    }  }  return defaultCharset;}  }
class C{  public StartRecord(BasicLogRecord rec){  txNum=(Long)rec.nextVal(BIGINT).asJavaVal();  lsn=rec.getLSN();}  }
class C{  public TopNMapperRequestHandler(DataRequestHandler next){  this.next=next;}  }
class C{  public static double toDouble(Object v,double defaultValue){  if (v != null) {    if (v instanceof Integer) {      return (Integer)v;    }    if (v instanceof Float) {      return (Float)v;    }    if (v instanceof Double) {      return ((Double)v).doubleValue();    }    String s=v.toString().trim();    StringBuilder sb=new StringBuilder();    for (int i=0; i < s.length(); i++) {      char c=s.charAt(i);      if (c >= '0' && c <= '9') {        sb.append(c);      } else       if (c == '-' && sb.length() == 0) {        sb.append(c);      } else       if (c == '.') {        if (sb.indexOf(".") > -1) {          break;        } else {          sb.append(c);        }      } else       if (sb.length() > 0) {        break;      }    }    s=sb.toString();    try {      return Double.parseDouble(s);    } catch (    Exception e) {      log.error(e);    }  }  return defaultValue;}  }
class C{  private void postropheToWords(String tokenVal){  int index=tokenVal.indexOf('\'');  String bbb=tokenVal.substring(index).toLowerCase();  if (inStringArray(bbb,postrophes)) {    String aaa=tokenVal.substring(0,index);    tokenToWords(aaa);    wordRelation.addWord(bbb);  } else   if (bbb.equals("'tve")) {    String aaa=tokenVal.substring(0,index - 2);    tokenToWords(aaa);    wordRelation.addWord("'ve");  } else {    StringBuffer buffer=new StringBuffer(tokenVal);    buffer.deleteCharAt(index);    tokenToWords(buffer.toString());  }}  }
class C{  protected void decorateTextLabel(ISVNLocalResource svnResource,LocalResourceStatus status,IDecoration decoration,boolean isDirty){  Map bindings=new HashMap(6);  if (svnResource.getIResource().getLocation() == null) {    return;  }  if (status.isUnversioned())   return;  IDecoratorComponent[][] format;  int type=svnResource.getIResource().getType();  if (type == IResource.FOLDER) {    format=folderDecoratorFormat;  } else   if (type == IResource.PROJECT) {    format=projectDecoratorFormat;  } else {    format=fileDecoratorFormat;  }  if (isDirty & !status.isAdded()) {    bindings.put(SVNDecoratorConfiguration.DIRTY_FLAG,dirtyFlag);  }  if (status.getUrlString() != null) {    String label=null;    ISVNRepositoryLocation repository=status.getRepository();    if (repository != null) {      label=status.getRepository().getLabel();    }    bindings.put(SVNDecoratorConfiguration.RESOURCE_LABEL,label == null ? status.getUrlString() : label);    bindings.put(SVNDecoratorConfiguration.RESOURCE_URL,Util.unescape(status.getUrlString()));    SVNUrl repositoryRoot=null;    if (repository != null) {      repositoryRoot=repository.getRepositoryRoot();    }    if (repositoryRoot != null) {      int urlLen=status.getUrlString().length();      int rootLen=repositoryRoot.toString().length() + 1;      String shortUrl;      if (urlLen > rootLen)       shortUrl=status.getUrlString().substring(rootLen); else       shortUrl=status.getUrlString();      bindings.put(SVNDecoratorConfiguration.RESOURCE_URL_SHORT,Util.unescape(shortUrl));    }  }  if (status.isAdded()) {    bindings.put(SVNDecoratorConfiguration.ADDED_FLAG,addedFlag);  } else   if (SVNStatusKind.EXTERNAL.equals(status.getTextStatus())) {    bindings.put(SVNDecoratorConfiguration.EXTERNAL_FLAG,externalFlag);  } else {    if ((status.getTextStatus() != SVNStatusKind.UNVERSIONED) && (status.getTextStatus() != SVNStatusKind.ADDED)) {      if (status.getLastChangedRevision() != null) {        bindings.put(SVNDecoratorConfiguration.RESOURCE_REVISION,status.getLastChangedRevision().toString());      }      if (status.getLastCommitAuthor() != null) {        bindings.put(SVNDecoratorConfiguration.RESOURCE_AUTHOR,status.getLastCommitAuthor());      }    }    if (status.getLastChangedDate() != null) {      bindings.put(SVNDecoratorConfiguration.RESOURCE_DATE,dateFormat.format(status.getLastChangedDate()));    }  }  SVNDecoratorConfiguration.decorate(decoration,format,bindings);}  }
class C{  public static byte[] fromHex(String hex){  try {    return Hex.decodeHex(hex.toCharArray());  } catch (  DecoderException e) {    return null;  }}  }
class C{  private void clustering(int tagetClusterSize){  clustering(tagetClusterSize,"Average");}  }
class C{  public WidgetsGetCommentsQuery(VkApiClient client){  super(client,"widgets.getComments",GetCommentsResponse.class);}  }
class C{  public static int toDecimal(String binary){  long num=Long.parseLong(binary);  long rem;  while (num > 0) {    rem=num % 10;    num=num / 10;    if (rem != 0 && rem != 1) {      System.out.println("This is not a binary number.");      System.out.println("Please try once again.");      return -1;    }  }  return Integer.parseInt(binary,2);}  }
class C{  public View findViewById(int id){  View v;  if (mSlidingMenu != null) {    v=mSlidingMenu.findViewById(id);    if (v != null)     return v;  }  return null;}  }
class C{  public static void writeLines(File file,String encoding,Collection<?> lines,String lineEnding,boolean append) throws IOException {  FileOutputStream out=null;  try {    out=openOutputStream(file,append);    final BufferedOutputStream buffer=new BufferedOutputStream(out);    IOUtils.writeLines(lines,lineEnding,buffer,encoding);    buffer.flush();    out.close();  }  finally {    IOUtils.closeQuietly(out);  }}  }
class C{  public boolean isPure(){  if (!mutated.get(PurityGlobalNode.node).isEmpty())   return false;  Set<PurityNode> A=new HashSet<PurityNode>();  Set<PurityNode> B=new HashSet<PurityNode>();  internalPassNodes(paramNodes,A,false);  internalPassNodes(globEscape,B,true);  internalPassNode(PurityGlobalNode.node,B,true);  Iterator<PurityNode> it=A.iterator();  while (it.hasNext()) {    PurityNode n=it.next();    if (B.contains(n) || !mutated.get(n).isEmpty())     return false;  }  return true;}  }
class C{  public WallGetCommentsQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public static double ssReg(double[] residuals,double[] targetAttribute){  double mean=sum(targetAttribute) / targetAttribute.length;  double ret=0;  for (int i=0; i < residuals.length; i++) {    ret+=Math.pow(residuals[i] - mean,2);  }  return ret;}  }
class C{  public static InputStream toInputStream(CharSequence input,Charset encoding){  return toInputStream(input.toString(),encoding);}  }
class C{  public double addElementRolling(double value){  double discarded=internalArray[startIndex];  if ((startIndex + (numElements + 1)) > internalArray.length) {    expand();  }  startIndex+=1;  internalArray[startIndex + (numElements - 1)]=value;  if (shouldContract()) {    contract();  }  return discarded;}  }
class C{  public static boolean checkNetwork(Context context){  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo networkInfo=connectivityManager == null ? null : connectivityManager.getActiveNetworkInfo();  return networkInfo != null && networkInfo.isConnected();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_TOWER_DEFENCE_INVITED_HIM(String value0){  return new SM_SYSTEM_MESSAGE(1400952,value0);}  }
class C{  public static boolean isAccountClassClass(GenericValue glAccountClass,String parentGlAccountClassId) throws GenericEntityException {  if (glAccountClass == null)   return false;  if (parentGlAccountClassId.equals(glAccountClass.get("glAccountClassId"))) {    return true;  }  String parentClassId=glAccountClass.getString("parentClassId");  if (parentClassId == null) {    return false;  }  if (parentClassId.equals(parentGlAccountClassId)) {    return true;  }  return isAccountClassClass(glAccountClass.getRelatedOne("ParentGlAccountClass",true),parentGlAccountClassId);}  }
class C{  public void sort(){  Arrays.sort(_data,0,_pos);}  }
class C{  public void processNewData(int off,int len){  for (int i=off; i < off + len; i++) {    buf[i]=buf[i] * buf[i];    assert buf[i] >= 0;  }}  }
class C{  public boolean isSharedBroker(String host){  for (  NamespaceIsolationData policyData : this.policies.values()) {    NamespaceIsolationPolicyImpl policy=new NamespaceIsolationPolicyImpl(policyData);    if (policy.isPrimaryBroker(host)) {      return false;    }  }  return true;}  }
class C{  public synchronized void stopPreview(){  if (autoFocusManager != null) {    autoFocusManager.stop();    autoFocusManager=null;  }  if (camera != null && previewing) {    camera.getCamera().stopPreview();    previewCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public FilenameUtils(){  super();}  }
class C{  public RequestHandle head(String url,RequestParams params,ResponseHandlerInterface responseHandler){  return head(null,url,params,responseHandler);}  }
class C{  public void userButton(ActionEvent event){  Object source=event.getSource();  if (source == nameDialog) {    setFontName((String)nameDialog.getSelectedItem());  } else   if (source == sizeDialog) {    setPointSize((String)sizeDialog.getSelectedItem());  } else {    System.err.println("Error in userButton(): unknown ActionEvent: " + event);  }}  }
class C{  public MessagesGetChatUsersQueryWithChatIdsFields(VkApiClient client,UserActor actor,List<Integer> chatIds,List<UserField> fields){  super(client,"messages.getChatUsers",GetChatUsersChatIdsFieldsResponse.class);  accessToken(actor.getAccessToken());  chatIds(chatIds);  fields(fields);}  }
class C{  public Configuration(){  this(true);}  }
class C{  public static final int daysBetween(Calendar early,Calendar late){  return (int)(toJulian(late) - toJulian(early));}  }
class C{  public void addSpawnPoints(Collection<SpawnPoint> spawnPoints){  if (spawnPoints == null || spawnPoints.isEmpty()) {    return;  }  complete=true;  this.spawnPoints.addAll(spawnPoints);}  }
class C{  public void dumpBinary(String path){  try {    FileOutputStream fos=new FileOutputStream(path);    DataOutputStream os=new DataOutputStream(fos);    int written;    os.writeInt(MAGIC);    os.writeInt(VERSION);    os.writeInt(sampleRate);    os.writeInt(numChannels);    os.writeFloat(lpcMin);    os.writeFloat(lpcRange);    os.writeInt(diphoneMap.size());    for (Iterator i=diphoneMap.values().iterator(); i.hasNext(); ) {      Diphone diphone=(Diphone)i.next();      diphone.dumpBinary(os);    }    os.flush();    fos.close();  } catch (  FileNotFoundException fe) {    throw new Error("Can't dump binary database " + fe.getMessage());  }catch (  IOException ioe) {    throw new Error("Can't write binary database " + ioe.getMessage());  }}  }
class C{  private void modifySkipCountForDeletedImage(int index){  int skipCount=0;  for (int i=0, n=mSkipListSize; i < n; i++) {    long v=mSkipList[i];    int offset=(int)(v & 0xFFFFFFFF);    if (skipCount + offset > index) {      mSkipList[i]=v - 1;      break;    }    skipCount+=offset;  }}  }
class C{  <T>T onFind(Class<T> modelClass,long id,boolean isEager){  List<T> dataList=query(modelClass,null,"id = ?",new String[]{String.valueOf(id)},null,null,null,null,getForeignKeyAssociations(modelClass.getName(),isEager));  if (dataList.size() > 0) {    return dataList.get(0);  }  return null;}  }
class C{  private String convertStreamToString(final InputStream input){  if (input == null)   return null;  final BufferedReader reader=new BufferedReader(new InputStreamReader(input));  final StringBuilder sBuf=new StringBuilder();  String line;  try {    while ((line=reader.readLine()) != null) {      sBuf.append(line);    }  } catch (  IOException e) {    Log.e("Places Error",e.getMessage());  } finally {    try {      input.close();      reader.close();    } catch (    IOException e) {      Log.e("Places Error",e.getMessage());    }  }  return sBuf.toString();}  }
class C{  public JsonObject add(String name,double value){  add(name,Json.value(value));  return this;}  }
class C{  public boolean isHighlightWithInvisibleEdge(){  return highlightWithInvisibleEdge;}  }
class C{  public ContentSettingException(int type,String pattern,ContentSetting setting,String source){  mContentSettingType=type;  mPattern=pattern;  mContentSetting=setting;  mSource=source;}  }
class C{  @Override public Long predictedDataNeeded(final double rate,final double allocation_percent_1,final double allocation_percent_2,final double effect_size){  if (rate < 0.0 || rate > 1.0) {    throw new IllegalArgumentException("Action rate must be in the interval [0, 1].");  }  if (allocation_percent_1 <= 0.0 || allocation_percent_1 >= 1.0) {    throw new IllegalArgumentException("Allocation percent must be in the interval (0, 1).");  }  if (allocation_percent_2 <= 0.0 || allocation_percent_2 >= 1.0) {    throw new IllegalArgumentException("Allocation percent must be in the interval (0, 1).");  }  if (effect_size < -1.0 || effect_size > 1.0) {    throw new IllegalArgumentException("Effect size must be in the interval [-1, 1].");  }  if (Double.doubleToRawLongBits(effect_size) == 0L) {    throw new IllegalArgumentException("Effect size must not equal 0");  }  double zval=DecisionAdjuster.scaledZ(confidenceLevel,maxDecisions);  return Math.round(rate * (1 - rate) * (1.0 / allocation_percent_1 + 1.0 / allocation_percent_2)* zval* zval / effect_size / effect_size);}  }
class C{  public static <S,K,M extends Map<K,S>>Collector<S,?,M> toDictionary(Function<? super S,? extends K> keyMapper,Supplier<M> mapSupplier){  return Collectors.toMap(keyMapper,Function.identity(),StreamUtils.throwingMerger(),mapSupplier);}  }
class C{  public CountClearEntriesSpaceOperationRequest(){}  }
class C{  public int size(){  return fDepth;}  }
class C{  public static void align(Scout.Arrange type,ArrayList<ConstraintWidget> widgetList,boolean applyConstraints){  int margin=Scout.getMargin();  ConstraintWidget[] widgets=new ConstraintWidget[widgetList.size()];  widgets=widgetList.toArray(widgets);switch (type) {case AlignHorizontallyCenter:case AlignHorizontallyLeft:case AlignHorizontallyRight:    Arrays.sort(widgets,sSortY);  if (rootDistance(widgets[0]) > rootDistance(widgets[widgets.length - 1])) {    reverse(widgets);  }break;case DistributeVertically:Arrays.sort(widgets,sSortY);break;case AlignVerticallyTop:case AlignVerticallyMiddle:case AlignBaseline:case AlignVerticallyBottom:Arrays.sort(widgets,sSortX);if (rootDistance(widgets[0]) > rootDistance(widgets[widgets.length - 1])) {reverse(widgets);}break;case DistributeHorizontally:Arrays.sort(widgets,sSortX);break;}switch (type) {case CenterHorizontally:{Rectangle rectangle=new Rectangle();WidgetContainer parent=(WidgetContainer)widgets[0].getParent();ConstraintWidget[] pears=new ConstraintWidget[parent.getChildren().size()];pears=parent.getChildren().toArray(pears);for (ConstraintWidget widget : widgets) {rectangle.x=widget.getX();rectangle.y=widget.getY();rectangle.width=widget.getWidth();rectangle.height=widget.getHeight();int westDistance=gap(Direction.WEST,rectangle,pears);int eastDistance=gap(Direction.EAST,rectangle,pears);int x=widget.getX();if (applyConstraints) {ConstraintWidget westConnect=gapWidget(Direction.WEST,rectangle,pears);ConstraintWidget eastConnect=gapWidget(Direction.EAST,rectangle,pears);ConstraintAnchor.Type dir=ConstraintAnchor.Type.RIGHT;if (westConnect == parent) {dir=ConstraintAnchor.Type.LEFT;}widget.connect(ConstraintAnchor.Type.LEFT,westConnect,dir,0);dir=ConstraintAnchor.Type.LEFT;if (eastConnect == parent) {dir=ConstraintAnchor.Type.RIGHT;}widget.connect(ConstraintAnchor.Type.RIGHT,eastConnect,dir,0);widget.setHorizontalBiasPercent(.5f);} else {widget.setX(x + (eastDistance - westDistance) / 2);}}}break;case CenterVertically:{Rectangle rectangle=new Rectangle();WidgetContainer parent=(WidgetContainer)widgets[0].getParent();ConstraintWidget[] pears=new ConstraintWidget[parent.getChildren().size()];pears=parent.getChildren().toArray(pears);for (ConstraintWidget widget : widgets) {rectangle.x=widget.getX();rectangle.y=widget.getY();rectangle.width=widget.getWidth();rectangle.height=widget.getHeight();int northDistance=gap(Direction.NORTH,rectangle,pears);int southDistance=gap(Direction.SOUTH,rectangle,pears);int Y=widget.getY();if (applyConstraints) {ConstraintWidget northConnect=gapWidget(Direction.NORTH,rectangle,pears);ConstraintWidget southConnect=gapWidget(Direction.SOUTH,rectangle,pears);ConstraintAnchor.Type dir=ConstraintAnchor.Type.BOTTOM;if (northConnect == parent) {dir=ConstraintAnchor.Type.TOP;}widget.connect(ConstraintAnchor.Type.TOP,northConnect,dir,0);dir=ConstraintAnchor.Type.TOP;if (southConnect == parent) {dir=ConstraintAnchor.Type.BOTTOM;}widget.connect(ConstraintAnchor.Type.BOTTOM,southConnect,dir,0);widget.setVerticalBiasPercent(.5f);} else {widget.setY(Y + (southDistance - northDistance) / 2);}}}break;case CenterHorizontallyInParent:{for (ConstraintWidget widget : widgets) {int parentWidth=widget.getParent().getWidth();int width=widget.getWidth();widget.setX((parentWidth - width) / 2);if (applyConstraints) {widget.connect(ConstraintAnchor.Type.CENTER_X,widget.getParent(),ConstraintAnchor.Type.CENTER_X,0);widget.setHorizontalBiasPercent(.5f);}}}break;case CenterVerticallyInParent:{for (ConstraintWidget widget : widgets) {int parentHeight=widget.getParent().getHeight();int height=widget.getHeight();widget.setY((parentHeight - height) / 2);if (applyConstraints) {widget.connect(ConstraintAnchor.Type.CENTER_Y,widget.getParent(),ConstraintAnchor.Type.CENTER_Y,0);widget.setVerticalBiasPercent(.5f);}}}break;case AlignHorizontallyCenter:{int count=0;float avg=0;for (ConstraintWidget widget : widgets) {avg+=widget.getX() + widget.getWidth() / 2.0f;count++;}avg/=count;ConstraintWidget previousWidget=null;for (ConstraintWidget widget : widgets) {float current=widget.getWidth() / 2.0f;widget.setX((int)(avg - current));if (applyConstraints) {if (previousWidget != null) {widget.connect(ConstraintAnchor.Type.CENTER_X,previousWidget,ConstraintAnchor.Type.CENTER_X,0);}}previousWidget=widget;}}break;case AlignHorizontallyLeft:{int min=Integer.MAX_VALUE;for (ConstraintWidget widget : widgets) {min=Math.min(min,widget.getX());}ConstraintWidget previousWidget=null;for (ConstraintWidget widget : widgets) {widget.setX(min);if (applyConstraints) {if (previousWidget != null) {widget.resetAnchor(widget.getAnchor(ConstraintAnchor.Type.RIGHT));widget.connect(ConstraintAnchor.Type.LEFT,previousWidget,ConstraintAnchor.Type.LEFT,0);}}previousWidget=widget;}}break;case AlignHorizontallyRight:{int max=Integer.MIN_VALUE;for (ConstraintWidget widget : widgets) {max=Math.max(max,widget.getX() + widget.getWidth());}ConstraintWidget previousWidget=null;for (ConstraintWidget widget : widgets) {float current=widget.getWidth();widget.setX((int)(max - current));if (applyConstraints) {if (previousWidget != null) {widget.resetAnchor(widget.getAnchor(ConstraintAnchor.Type.LEFT));widget.connect(ConstraintAnchor.Type.RIGHT,previousWidget,ConstraintAnchor.Type.RIGHT,0);}}previousWidget=widget;}}break;case AlignVerticallyTop:{int min=Integer.MAX_VALUE;for (ConstraintWidget widget : widgets) {min=Math.min(min,widget.getY());}ConstraintWidget previousWidget=null;for (ConstraintWidget widget : widgets) {widget.setY(min);if (applyConstraints) {if (previousWidget != null) {widget.resetAnchor(widget.getAnchor(ConstraintAnchor.Type.BOTTOM));widget.connect(ConstraintAnchor.Type.TOP,previousWidget,ConstraintAnchor.Type.TOP,0);}}previousWidget=widget;}}break;case AlignVerticallyMiddle:{int count=0;float avg=0;for (ConstraintWidget widget : widgets) {avg+=widget.getY() + widget.getHeight() / 2.0f;count++;}avg/=count;ConstraintWidget previousWidget=null;for (ConstraintWidget widget : widgets) {float current=widget.getHeight() / 2.0f;widget.setY((int)(avg - current));if (applyConstraints) {if (previousWidget != null) {widget.connect(ConstraintAnchor.Type.CENTER_Y,previousWidget,ConstraintAnchor.Type.CENTER_Y,0);}}previousWidget=widget;}}break;case AlignBaseline:{int count=0;float avg=0;int number_of_constrained=0;ConstraintWidget fixedWidget=null;for (ConstraintWidget widget : widgets) {if (isVerticallyConstrained(widget)) {number_of_constrained++;fixedWidget=widget;}avg+=widget.getY() + widget.getBaselineDistance();count++;}avg/=count;if (number_of_constrained == 1) {avg=fixedWidget.getY() + fixedWidget.getBaselineDistance();}ConstraintWidget previousWidget=null;if (!applyConstraints || number_of_constrained == 0) {for (ConstraintWidget widget : widgets) {float baseline=widget.getBaselineDistance();widget.setY((int)(avg - baseline));if (applyConstraints) {if (previousWidget != null) {widget.connect(ConstraintAnchor.Type.BASELINE,previousWidget,ConstraintAnchor.Type.BASELINE,0);}}previousWidget=widget;}} else {ArrayList<ConstraintWidget> unconstrained=new ArrayList<>();ArrayList<ConstraintWidget> constrained=new ArrayList<>();for (ConstraintWidget widget : widgets) {if (isVerticallyConstrained(widget)) {constrained.add(widget);} else {unconstrained.add(widget);}}while (!unconstrained.isEmpty()) {ConstraintWidget to=null;ConstraintWidget from=null;int min=Integer.MAX_VALUE;for (ConstraintWidget fromCandidate : unconstrained) {for (ConstraintWidget toCandidate : constrained) {int fromLeft=fromCandidate.getX();int fromRight=fromLeft + fromCandidate.getWidth();int toLeft=toCandidate.getX();int toRight=toLeft + toCandidate.getWidth();int dist=Math.abs(toLeft - fromLeft);dist=Math.min(dist,Math.abs(toLeft - fromRight));dist=Math.min(dist,Math.abs(toRight - fromRight));dist=Math.min(dist,Math.abs(toRight - fromLeft));if (dist < min) {min=dist;to=toCandidate;from=fromCandidate;}}}from.connect(ConstraintAnchor.Type.BASELINE,to,ConstraintAnchor.Type.BASELINE,0);constrained.add(from);unconstrained.remove(from);}}}break;case AlignVerticallyBottom:{int max=Integer.MIN_VALUE;for (ConstraintWidget widget : widgets) {max=Math.max(max,widget.getY() + widget.getHeight());}ConstraintWidget previousWidget=null;for (ConstraintWidget widget : widgets) {float current=widget.getHeight();widget.setY((int)(max - current));if (applyConstraints) {if (previousWidget != null) {widget.resetAnchor(widget.getAnchor(ConstraintAnchor.Type.TOP));widget.connect(ConstraintAnchor.Type.BOTTOM,previousWidget,ConstraintAnchor.Type.BOTTOM,0);}}previousWidget=widget;}}break;case DistributeVertically:{int count=0;int sum=0;int min=widgetList.get(0).getY();int max=widgetList.get(0).getY() + widgetList.get(0).getHeight();for (ConstraintWidget widget : widgets) {int start=widget.getY();int size=widget.getHeight();int end=start + size;sum+=size;min=Math.min(min,start);max=Math.max(max,end);count++;}int gaps=count - 1;int totalGap=max - min - sum;int lastY=min;boolean reverse=rootDistanceY(widgets[0]) > rootDistanceY(widgets[widgets.length - 1]);for (int i=0; i < count; i++) {if (i > 0) {int size=widgets[i - 1].getHeight();min+=size;int pos=min + (totalGap * i) / gaps;widgets[i].setY(pos);if (applyConstraints) {if (reverse) {widgets[i - 1].connect(ConstraintAnchor.Type.BOTTOM,widgets[i],ConstraintAnchor.Type.TOP,pos - lastY - size);} else {widgets[i].connect(ConstraintAnchor.Type.TOP,widgets[i - 1],ConstraintAnchor.Type.BOTTOM,pos - lastY - size);}lastY=pos;}}}}break;case DistributeHorizontally:{int count=0;int sum=0;int min=widgetList.get(0).getX();int max=widgetList.get(0).getX() + widgetList.get(0).getHeight();for (ConstraintWidget widget : widgets) {int start=widget.getX();int size=widget.getWidth();int end=start + size;sum+=size;min=Math.min(min,start);max=Math.max(max,end);count++;}int gaps=count - 1;int totalGap=max - min - sum;int lastX=min;boolean reverse=rootDistanceX(widgets[0]) > rootDistanceX(widgets[widgets.length - 1]);for (int i=0; i < count; i++) {if (i > 0) {int size=widgets[i - 1].getWidth();min+=size;int pos=min + (totalGap * i) / gaps;widgets[i].setX(pos);if (applyConstraints) {if (reverse) {widgets[i - 1].connect(ConstraintAnchor.Type.RIGHT,widgets[i],ConstraintAnchor.Type.LEFT,pos - lastX - size);} else {widgets[i].connect(ConstraintAnchor.Type.LEFT,widgets[i - 1],ConstraintAnchor.Type.RIGHT,pos - lastX - size);}lastX=pos;}}}}break;case VerticalPack:{Rectangle original=getBoundingBox(widgetList);ConstraintWidget[] wArray=new ConstraintWidget[widgetList.size()];wArray=widgetList.toArray(wArray);Arrays.sort(wArray,null);ScoutWidget[] list=ScoutWidget.getWidgetArray((WidgetContainer)widgetList.get(0).getParent());for (ConstraintWidget cw : wArray) {for (ScoutWidget scoutWidget : list) {if (scoutWidget.mConstraintWidget == cw) {int gapN=scoutWidget.gap(Direction.NORTH,list);int newY=margin + scoutWidget.mConstraintWidget.getY() - gapN;newY=Math.max(newY,original.y);scoutWidget.setY(newY);}}}}break;case HorizontalPack:{Rectangle original=getBoundingBox(widgetList);ConstraintWidget[] wArray=new ConstraintWidget[widgetList.size()];wArray=widgetList.toArray(wArray);Arrays.sort(wArray,null);ScoutWidget[] list=ScoutWidget.getWidgetArray((WidgetContainer)widgetList.get(0).getParent());for (ConstraintWidget cw : wArray) {for (ScoutWidget scoutWidget : list) {if (scoutWidget.mConstraintWidget == cw) {int gapW=scoutWidget.gap(Direction.WEST,list);int newX=margin + scoutWidget.mConstraintWidget.getX() - gapW;newX=Math.max(newX,original.x);scoutWidget.setX(newX);}}}}break;case ExpandVertically:{expandVertically(widgetList,margin);}break;case ExpandHorizontally:{expandHorizontally(widgetList,margin);}break;}}  }
class C{  public SM_BLOCK_RESPONSE(int code,String playerName){  this.code=code;  this.playerName=playerName;}  }
class C{  public boolean remove(final int location,final T object){  final boolean removed=this.data.remove(object);  this.notifyItemRangeRemoved(location,this.data.size());  return removed;}  }
class C{  public ItemCursor queryItems(){  return mHelper.queryItems();}  }
class C{  public static boolean isLocal(Value val){  return (getEquivalentValueRoot(val) instanceof Local);}  }
class C{  public static void main(String[] args){  final DeploymentEventDTO build=createTestDeploymentEvent();  send(build,ElasticsearchClient.DEPLOYMENT);}  }
class C{  public NotFiniteNumberException(Number wrong,Object... args){  this(LocalizedFormats.NOT_FINITE_NUMBER,wrong,args);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public CharType fullCopy(){  CharType tree=(CharType)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SignetBurst_A_TO_ME(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200715,skillcaster,num0,skillname);}  }
class C{  private UrlUtil(){}  }
class C{  public void clearTransaction(){  modifiedConcepts.clear();  modifiedCastings.clear();  modifiedResources.clear();}  }
class C{  public void removeACL(Collection<String> listIPs,int from,int to){  AmazonEC2 client=null;  try {    client=getEc2Client();    List<IpPermission> ipPermissions=new ArrayList<IpPermission>();    ipPermissions.add(new IpPermission().withFromPort(from).withIpProtocol("tcp").withIpRanges(listIPs).withToPort(to));    if (this.insEnvIdentity.isClassic()) {      client.revokeSecurityGroupIngress(new RevokeSecurityGroupIngressRequest(config.getACLGroupName(),ipPermissions));      logger.info("Done removing from ACL within classic env for running instance: " + StringUtils.join(listIPs,","));    } else {      RevokeSecurityGroupIngressRequest req=new RevokeSecurityGroupIngressRequest();      req.withGroupId(getVpcGroupId());      client.revokeSecurityGroupIngress(req.withIpPermissions(ipPermissions));      logger.info("Done removing from ACL within vpc env for running instance: " + StringUtils.join(listIPs,","));    }  }  finally {    if (client != null)     client.shutdown();  }}  }
class C{  public StackScroller(Context context){  mFlywheel=true;  mScrollerX=new SplineStackScroller(context);  mScrollerY=new SplineStackScroller(context);  initContants();}  }
class C{  @Override public void populate(List<DataFlavor> dataFlavourList,List<DataFlavor> destinationFolderList,List<DataFlavor> destinationGeoServerList){  dataFlavourList.add(FILE_DATAITEM_FLAVOR);  dataFlavourList.add(DataFlavourManager.FOLDER_DATAITEM_FLAVOR);  dataFlavourList.add(GEOSERVER_STYLE_DATAITEM_FLAVOUR);  dataFlavourList.add(GEOSERVER_LAYER_DATAITEM_FLAVOUR);  dataFlavourList.add(GEOSERVER_DATAITEM_FLAVOUR);  dataFlavourList.add(GEOSERVER_OVERALL_DATAITEM_FLAVOUR);  destinationFolderList.add(FILE_DATAITEM_FLAVOR);  destinationFolderList.add(GEOSERVER_STYLE_DATAITEM_FLAVOUR);  destinationGeoServerList.add(FILE_DATAITEM_FLAVOR);  destinationGeoServerList.add(GEOSERVER_STYLE_DATAITEM_FLAVOUR);}  }
class C{  public void checkDataSource(Map<String,ModelEntity> modelEntities,List<String> messages,boolean addMissing) throws GenericEntityException {  genericDAO.checkDb(modelEntities,messages,addMissing);}  }
class C{  public void writeBytes(byte[] value,int offset,int length) throws JMSException {  initializeWriting();  try {    this.dataOut.write(_BYTES);    this.dataOut.writeInt(length);    this.dataOut.write(value,offset,length);  } catch (  IOException ioe) {    raise(ioe);  }}  }
class C{  private static boolean possiblyValidListLiteral(PsiElement element){  if (element instanceof ListLiteral || element instanceof GlobExpression) {    return true;  }  if (element instanceof LiteralExpression) {    return false;  }  if (element instanceof LoadStatement || element instanceof FunctionStatement) {    return false;  }  return true;}  }
class C{  @Nullable public static String readTextFromDisk(@NotNull File file,boolean warnIfNotExists){  assert file.isAbsolute();  try {    return Files.toString(file,Charsets.UTF_8);  } catch (  IOException e) {    if (warnIfNotExists) {      LOG.warn(e);    }    return null;  }}  }
class C{  @Override public void removeRaster(Symbolizer symbolizer){}  }
class C{  public CropImageOptions(){  DisplayMetrics dm=Resources.getSystem().getDisplayMetrics();  cropShape=CropImageView.CropShape.RECTANGLE;  snapRadius=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,3,dm);  touchRadius=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,24,dm);  guidelines=CropImageView.Guidelines.ON_TOUCH;  scaleType=CropImageView.ScaleType.FIT_CENTER;  showCropOverlay=true;  showProgressBar=true;  autoZoomEnabled=true;  maxZoom=4;  initialCropWindowPaddingRatio=0.1f;  fixAspectRatio=false;  aspectRatioX=1;  aspectRatioY=1;  borderLineThickness=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,3,dm);  borderLineColor=Color.argb(170,255,255,255);  borderCornerThickness=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,2,dm);  borderCornerOffset=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,5,dm);  borderCornerLength=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,14,dm);  borderCornerColor=Color.WHITE;  guidelinesThickness=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,1,dm);  guidelinesColor=Color.argb(170,255,255,255);  backgroundColor=Color.argb(119,0,0,0);  minCropWindowWidth=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,42,dm);  minCropWindowHeight=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,42,dm);  minCropResultWidth=40;  minCropResultHeight=40;  maxCropResultWidth=99999;  maxCropResultHeight=99999;  activityTitle="";  activityMenuIconColor=0;  outputUri=Uri.EMPTY;  outputCompressFormat=Bitmap.CompressFormat.JPEG;  outputCompressQuality=90;  outputRequestWidth=0;  outputRequestHeight=0;  noOutputImage=false;  initialCropWindowRectangle=null;  initialRotation=-1;  allowRotation=true;  allowCounterRotation=false;  rotationDegrees=90;}  }
class C{  public static final Future<?> newFollowingToTargetCheckTask(final QuestEnv env,Npc npc,Npc target){  return ThreadPoolManager.getInstance().scheduleAtFixedRate(new FollowingNpcCheckTask(env,new TargetDestinationChecker(npc,target)),1000,1000);}  }
class C{  public TrustSource add(TrustSource trustSource){  if (trustSource == null) {    throw new IllegalArgumentException("TrustSource cannot be null");  }  return add(trustSource.getTrustedCAs());}  }
class C{  public static ByteBuffer encode(String string) throws CharacterCodingException {  return encode(string,true);}  }
class C{  private static Entry update(Entry e,Entry mods){  try {    Entry ec=e.getClass().newInstance();    Field[] mfields=getFields(mods);    Field[] efields=getFields(e,mods,mfields);    for (int i=efields.length; --i >= 0; ) {      efields[i].set(ec,efields[i].get(e));    }    for (int i=mfields.length; --i >= 0; ) {      Object val=mfields[i].get(mods);      if (val != null)       efields[i].set(ec,val);    }    return ec;  } catch (  InstantiationException ex) {    throw new IllegalArgumentException("unexpected InstantiationException");  }catch (  IllegalAccessException ex) {    throw new IllegalArgumentException("unexpected IllegalAccessException");  }}  }
class C{  public void tabPageLoadFinished(int id){  StripLayoutTab tab=findTabById(id);  if (tab != null)   tab.pageLoadingFinished();}  }
class C{  public DistributedLogNamespaceBuilder clientId(String clientId){  this._clientId=clientId;  return this;}  }
class C{  public static JobTrigger.ExecutionWindowTrigger executionWindow(int windowStart,int windowEnd){  if (windowStart < 0) {    throw new IllegalArgumentException("Window start can't be less than 0");  } else   if (windowEnd < windowStart) {    throw new IllegalArgumentException("Window end can't be less than window start");  }  return new JobTrigger.ExecutionWindowTrigger(windowStart,windowEnd);}  }
class C{  public WallGetRepostsQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  @Override public boolean equals(Object descObj){  if (!(descObj instanceof XMLSchemaDescription))   return false;  XMLSchemaDescription desc=(XMLSchemaDescription)descObj;  if (fNamespace != null)   return fNamespace.equals(desc.getTargetNamespace()); else   return desc.getTargetNamespace() == null;}  }
class C{  private static boolean appendOdexesToClassPath(Context cxt,File dexDir,String[] names){  String strDexDir=dexDir.getAbsolutePath();  ArrayList<String> jarPaths=new ArrayList<String>();  for (int i=0; i < names.length; i++) {    String jarPath=strDexDir + '/' + names[i];    File f=new File(jarPath);    if (f.isFile()) {      jarPaths.add(jarPath);    }  }  String[] jarsOfDex=new String[jarPaths.size()];  jarPaths.toArray(jarsOfDex);  PathClassLoader pcl=(PathClassLoader)cxt.getClassLoader();  try {    if (Build.VERSION.SDK_INT < SDK_INT_ICS) {      FrameworkHack.appendDexListImplUnderICS(jarsOfDex,pcl,dexDir);    } else {      boolean kitkatPlus=Build.VERSION.SDK_INT >= SDK_INT_KITKAT;      boolean marshmallowPlus=Build.VERSION.SDK_INT >= SDK_INT_MARSHMALLOW;      ArrayList<File> jarFiles=DexDex.strings2Files(jarsOfDex);      FrameworkHack.appendDexListImplICS(jarFiles,pcl,dexDir,kitkatPlus,marshmallowPlus);    }    for (    String jarName : names) {      theAppended.add(jarName);    }    if (debug) {      Log.d(TAG,"appendOdexesToClassPath completed : " + pcl);      Log.d(TAG,"theAppended : " + theAppended);    }  } catch (  Exception ex) {    throw new RuntimeException(ex);  }  return true;}  }
class C{  protected ShoppingCartItem(){}  }
class C{  public Map<Double,K> sortItems(List<K> items,PokemonGo api){  Map<Double,K> result=new TreeMap<>();  for (  K point : items) {    result.put(distFrom(api.getLatitude(),api.getLongitude(),point.getLatitude(),point.getLongitude()),point);  }  return result;}  }
class C{  private HTSUttModel createUttModel(List<Element> predictFromElements) throws MaryConfigurationException {  int i, k, s, t, mstate, frame, durInFrames, durStateInFrames, numVoicedInModel;  HTSModel m;  List<Element> predictorElements=predictFromElements;  List<Target> predictorTargets=getTargets(predictorElements);  FeatureVector fv;  HTSUttModel um=new HTSUttModel();  FeatureDefinition feaDef=htsData.getFeatureDefinition();  float duration;  double diffdurOld=0.0;  double diffdurNew=0.0;  float f0s[]=null;  try {    for (i=0; i < predictorTargets.size(); i++) {      fv=predictorTargets.get(i).getFeatureVector();      Element e=predictFromElements.get(i);      um.addUttModel(new HTSModel(cart.getNumStates()));      m=um.getUttModel(i);      m.setPhoneName(fv.getFeatureAsString(feaDef.getFeatureIndex("phone"),feaDef));      if (htsData.getUseContextDependentGV()) {        if (m.getPhoneName().contentEquals("_"))         m.setGvSwitch(false);      }      um.setNumModel(um.getNumModel() + 1);      um.setNumState(um.getNumState() + cart.getNumStates());      duration=Integer.parseInt(e.getAttribute("d")) * 0.001f;      durInFrames=(int)(duration / fperiodsec);      durStateInFrames=durInFrames / cart.getNumStates();      m.setTotalDur(0);      for (s=0; s < cart.getNumStates(); s++) {        m.setDur(s,durStateInFrames);        m.setTotalDur(m.getTotalDur() + m.getDur(s));      }      um.setTotalFrame(um.getTotalFrame() + m.getTotalDur());      System.out.format("createUttModel: duration=%.3f sec. durInFrames=%d  durStateInFrames=%d  m.getTotalDur()=%d\n",duration,durInFrames,durStateInFrames,m.getTotalDur());      cart.searchLf0InCartTree(m,fv,feaDef,htsData.getUV());      for (mstate=0; mstate < cart.getNumStates(); mstate++) {        for (frame=0; frame < m.getDur(mstate); frame++)         if (m.getVoiced(mstate))         um.setLf0Frame(um.getLf0Frame() + 1);      }    }    return um;  } catch (  Exception e) {    throw new MaryConfigurationException("Error searching in tree when creating utterance model. ",e);  }}  }
class C{  protected void fireTupleEvent(Tuple t,int type){  if (m_tupleListeners != null && m_tupleListeners.size() > 0) {    Object[] lstnrs=m_tupleListeners.getArray();    Tuple[] ts=new Tuple[]{t};    for (int i=0; i < lstnrs.length; ++i) {      TupleSetListener tsl=(TupleSetListener)lstnrs[i];      if (type == EventConstants.INSERT) {        tsl.tupleSetChanged(this,ts,EMPTY_ARRAY);      } else {        tsl.tupleSetChanged(this,EMPTY_ARRAY,ts);      }    }  }}  }
class C{  public static JpaModule newServerModule(EntityManagerFactory emFactory,EntityManager em,TransactionRunner transactionRunner){  return new JpaModule(emFactory,em,transactionRunner);}  }
class C{  public UnrevealBuilder withCurvedTranslation(final PointF curveControlPoint){  this.mCurveControlPoint=curveControlPoint;  return this.withCurvedTranslation();}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  void detectNonRecursive(DynamicAABBTreeLeaf<E,T> node,DynamicAABBTreeNode root,BroadphaseFilter<E,T> filter,List<BroadphasePair<E,T>> pairs){  DynamicAABBTreeNode test=root;  while (test != null) {    if (test.aabb.overlaps(node.aabb)) {      if (test.left != null) {        test=test.left;        continue;      } else {        @SuppressWarnings("unchecked") DynamicAABBTreeLeaf<E,T> leaf=(DynamicAABBTreeLeaf<E,T>)test;        if (!leaf.tested && leaf.collidable != node.collidable) {          if (filter.isAllowed(node.collidable,node.fixture,leaf.collidable,leaf.fixture)) {            BroadphasePair<E,T> pair=new BroadphasePair<E,T>(node.collidable,node.fixture,leaf.collidable,leaf.fixture);            pairs.add(pair);          }        }      }    }    boolean nextNodeFound=false;    while (test.parent != null) {      if (test == test.parent.left) {        test=test.parent.right;        nextNodeFound=true;        break;      }      test=test.parent;    }    if (!nextNodeFound)     break;  }}  }
class C{  public Builder detectRetina(Boolean detectRetina){  this.detectRetina=detectRetina;  return this;}  }
class C{  public Element makeXmlElement(Document document,String prefix){  Element element=null;  if (prefix == null)   prefix="";  if (document != null)   element=document.createElement(prefix + this.getEntityName());  if (element == null)   return null;  Iterator<ModelField> modelFields=this.getModelEntity().getFieldsIterator();  while (modelFields.hasNext()) {    ModelField modelField=modelFields.next();    String name=modelField.getName();    String value=this.getString(name);    if (value != null) {      if (value.indexOf('\n') >= 0 || value.indexOf('\r') >= 0) {        UtilXml.addChildElementCDATAValue(element,name,value,document);      } else {        element.setAttribute(name,value);      }    }  }  return element;}  }
class C{  private void init(View rootView){  mRecyclerView=(RecyclerView)rootView.findViewById(R.id.recycler_view);  speakersRecyclerView=(RecyclerView)rootView.findViewById(R.id.speakers_recycler_view);  progressDialog=new ProgressDialog(getContext());  root=(CoordinatorLayout)rootView.findViewById(R.id.root);  connectAPI=new ConnectAPI(getContext());  groupList=new ArrayList<>();  user=DataHandler.getInstance(getContext()).getUser();  if (!MainActivity.ISGUEST) {    if (user == null) {      startActivity(new Intent(getActivity(),AuthenticationActivity.class));      getActivity().finish();    }  }}  }
class C{  @Override public void pluginInitialize(){  this.initTelephonyReceiver();}  }
class C{  void returnLocal(Local right){  ret.clear();  ret.addAll(locals.get(right));  if (doCheck)   sanityCheck();}  }
class C{  public MessagesGetLongPollHistoryQuery fields(List<EnumParam> value){  return unsafeParam("fields",value);}  }
class C{  public BaseAlertDialog(Context context){  super(context);  widthScale(0.88f);  mLlContainer=new LinearLayout(context);  mLlContainer.setOrientation(LinearLayout.VERTICAL);  mTvTitle=new TextView(context);  mTvContent=new TextView(context);  mLlBtns=new LinearLayout(context);  mLlBtns.setOrientation(LinearLayout.HORIZONTAL);  mTvBtnLeft=new TextView(context);  mTvBtnLeft.setGravity(Gravity.CENTER);  mTvBtnMiddle=new TextView(context);  mTvBtnMiddle.setGravity(Gravity.CENTER);  mTvBtnRight=new TextView(context);  mTvBtnRight.setGravity(Gravity.CENTER);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set colorTable=");  String name=np.getWordMatchesRespectingCase(ColorTableManager.getNames());  boolean isHeatMap;  if (np.peekMatchIgnoreCase("heatMap")) {    np.matchIgnoreCase("heatMap=");    isHeatMap=np.getBoolean();  } else   isHeatMap=false;  np.matchIgnoreCase(";");  if (isHeatMap) {    getDir().getDocument().getChartColorManager().setHeatMapTable(name);    ColorTableManager.setDefaultColorTableHeatMap(name);  } else {    getDir().getDocument().getChartColorManager().setColorTable(name);    ColorTableManager.setDefaultColorTable(name);  }  getDir().getDocument().setDirty(true);}  }
class C{  public WebElement clickElementIfExists(final List<WebElement> elements,final String elementName){  for (  WebElement element : elements) {    if (elementName.equals(element.getText())) {      element.click();      return element;    }  }  throw new IllegalArgumentException(String.format("There is no element named %s",elementName));}  }
class C{  public void stopReplicationService() throws Exception {  if (false == isAutoRecoveryEnabled()) {    return;  }  for (  Entry<BookieServer,AutoRecoveryMain> autoRecoveryProcess : autoRecoveryProcesses.entrySet()) {    autoRecoveryProcess.getValue().shutdown();    LOG.debug("Shutdown Auditor Recovery for the bookie:" + autoRecoveryProcess.getKey().getLocalAddress());  }}  }
class C{  public ClearCacheRequest(Cache cache,Runnable callback){  super(Method.GET,null,null);  mCache=cache;  mCallback=callback;}  }
class C{  public LegendComponent(Orientation orientation,int frequencyMillis){  mFrequencyMillis=frequencyMillis;  mOrientation=orientation;  mLastUpdate=0;}  }
class C{  public double chiSquare(final double[] expected,final long[] observed) throws MathIllegalArgumentException {  if (expected.length < 2) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,expected.length,2);  }  MathUtils.checkDimension(expected.length,observed.length);  MathArrays.checkPositive(expected);  MathArrays.checkNonNegative(observed);  double sumExpected=0d;  double sumObserved=0d;  for (int i=0; i < observed.length; i++) {    sumExpected+=expected[i];    sumObserved+=observed[i];  }  double ratio=1.0d;  boolean rescale=false;  if (FastMath.abs(sumExpected - sumObserved) > 10E-6) {    ratio=sumObserved / sumExpected;    rescale=true;  }  double sumSq=0.0d;  for (int i=0; i < observed.length; i++) {    if (rescale) {      final double dev=observed[i] - ratio * expected[i];      sumSq+=dev * dev / (ratio * expected[i]);    } else {      final double dev=observed[i] - expected[i];      sumSq+=dev * dev / expected[i];    }  }  return sumSq;}  }
class C{  public static void main(String[] sArgs){  Hashtable hSwitches=gr.demokritos.iit.jinsect.utils.parseCommandLineSwitches(sArgs);  String sInputDir=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"inputDir",".");  boolean bInputDirFlat=Boolean.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"inputDirFlat",Boolean.FALSE.toString()));  String sModel=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"model","");  String sDocumentMatrix=gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"docMatrix","");  int iLevels=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"levels","5")).intValue();  int iIterations=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"iters","10000")).intValue();  int iBurnInIterations=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"burnIn","1000")).intValue();  double dAlpha=Double.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"alpha","2.0")).doubleValue();  double dBeta=Double.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"beta","0.5")).doubleValue();  int iThreads=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"threads",String.valueOf(Runtime.getRuntime().availableProcessors()))).intValue();  boolean bRecalc=Boolean.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"recalc","FALSE")).booleanValue();  int iTextMeanSize=Integer.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"textMeanSize","250")).intValue();  if (Boolean.valueOf(gr.demokritos.iit.jinsect.utils.getSwitch(hSwitches,"help","FALSE")).booleanValue()) {    printSyntax();    return;  }  ConsoleNotificationListener cnlReporting=new ConsoleNotificationListener();  TreeMap<Integer,String> tmIdxToStr=new TreeMap<Integer,String>();  System.err.println("Initializing HLDA...");  int[][] dtm=null;  boolean bMatrixLoadedOK=false;  if ((sDocumentMatrix.length() != 0) && !bRecalc) {    try {      System.err.println("Loading document-term matrix...");      FileInputStream fis=new FileInputStream(sDocumentMatrix);      ObjectInputStream ois=new ObjectInputStream(fis);      dtm=(int[][])ois.readObject();      tmIdxToStr=(TreeMap<Integer,String>)ois.readObject();      ois.close();      fis.close();      bMatrixLoadedOK=true;    } catch (    Exception e) {      System.err.println("Could not load document term matrix.");    }  }  ;  if (!bMatrixLoadedOK) {    DocumentSet dm=new DocumentSet(sInputDir,1.0);    dm.createSets(false,1.0,bInputDirFlat);    System.err.print("Calculating document term matrix...");    dtm=HierLDACaller.getDocumentTermMatrix(dm.getTrainingSet(),tmIdxToStr);    System.err.println("Done.");    System.err.println("Saving document-term matrix...");    if (sDocumentMatrix.length() != 0) {      try {        FileOutputStream fos=new FileOutputStream(sDocumentMatrix);        ObjectOutputStream oos=new ObjectOutputStream(fos);        oos.writeObject(dtm);        oos.writeObject(tmIdxToStr);        oos.close();        fos.close();      } catch (      Exception e) {        System.err.println("Could not save document term matrix.");        e.printStackTrace(System.err);      }    }  }  HierLDAGibbs hierLDA=null;  boolean bHLDALoadedOK=false;  if ((sModel.length() != 0) && !bRecalc) {    File fLDAModel=new File(sModel);    try {      System.err.println("Loading HLDA model...");      FileInputStream fis=new FileInputStream(fLDAModel);      ObjectInputStream ois=new ObjectInputStream(fis);      hierLDA=(HierLDAGibbs)ois.readObject();      ois.close();      fis.close();      bHLDALoadedOK=true;    } catch (    Exception e) {      System.err.println("Could not load HLDA model...");      hierLDA=new HierLDAGibbs(iLevels,dtm,dAlpha,dBeta);      System.err.println("Performing HLDA sampling...");      hierLDA.setProgressIndicator(cnlReporting);      hierLDA.performGibbs(iIterations,iBurnInIterations,Runtime.getRuntime().availableProcessors());    }  } else {    hierLDA=new HierLDAGibbs(iLevels,dtm,dAlpha,dBeta);    hierLDA.setProgressIndicator(cnlReporting);    System.err.println("Performing HLDA sampling...");    hierLDA.performGibbs(iIterations,iBurnInIterations,Runtime.getRuntime().availableProcessors());  }  if ((sModel.length() != 0) && (!bHLDALoadedOK)) {    try {      System.err.println("Saving HLDA model...");      FileOutputStream fos=new FileOutputStream(sModel);      ObjectOutputStream oos=new ObjectOutputStream(fos);      oos.writeObject(hierLDA);      oos.close();      fos.close();    } catch (    Exception e) {      System.err.println("Could not save document term matrix.");      e.printStackTrace(System.err);    }  }  System.err.println("Initializing and training grammaticality estimator...");  grammaticalityEstimator ge=new grammaticalityEstimator(sInputDir,1,-1,1,3,2,bInputDirFlat);  ge.train();  System.err.println("Initializing text generator...");  HLDATextGenerator tg=new HLDATextGenerator(hierLDA,new DistributionDocumentEvaluator(tmIdxToStr,ge),tmIdxToStr);  for (int iGramVinc=1; iGramVinc < 2; iGramVinc++) {    System.err.println("Creating text... Grammar rank " + iGramVinc);    Vector<Integer> vText=tg.generateNormalText(iTextMeanSize,iGramVinc);    String sText=tg.getVectorToText(vText);    sText=sText.replaceAll("_/"," ");    sText=sText.replaceAll("\\\\_"," ");    System.out.println(sText);    System.err.println("Grammaticality:" + ge.getNormality(sText));  }  System.err.println("Complete.");  System.exit(0);}  }
class C{  private void placeChild(View child,int gravity){  LayoutParams lp=(LayoutParams)child.getLayoutParams();  int availableWidth=Math.max(0,mEnd - mStart - lp.startMargin- lp.endMargin);  if (child.getMeasuredWidth() > availableWidth || gravity == Gravity.FILL_HORIZONTAL) {    measureChildWithFixedWidth(child,availableWidth);  }  if (gravity == Gravity.START || gravity == Gravity.FILL_HORIZONTAL) {    lp.start=mStart + lp.startMargin;    mStart=lp.start + child.getMeasuredWidth() + lp.endMargin;  } else {    lp.start=mEnd - lp.endMargin - child.getMeasuredWidth();    mEnd=lp.start - lp.startMargin;  }  lp.top=mTop + lp.topMargin;  mBottom=Math.max(mBottom,lp.top + child.getMeasuredHeight() + lp.bottomMargin);}  }
class C{  public void addGenericAttr(GenericAttr g){  generic.addElement(g);  g.resolve(this);}  }
class C{  public void sample(String input,String output,int numPosts) throws IOException {  Random random=new Random();  JsonUtil J=new JsonUtil();  Map<String,List<String>> userposts=new Hashtable<String,List<String>>();  RecordReader reader=new RecordReader(input);  while (reader.next()) {    Post p=J.fromJson(reader.value(),Post.class);    String userid=p.getUserId();    List<String> posts=userposts.get(userid);    if (posts == null) {      posts=new ArrayList<String>();      userposts.put(userid,posts);    }    posts.add(reader.value());    if (reader.numRead() % 1000 == 0) {      LOG.info("read: " + reader.numRead());    }  }  LOG.info("total " + reader.numRead() + " posts and "+ userposts.size()+ "users");  reader.close();  RecordWriter writer=new RecordWriter(output);  int total=0;  for (  Entry<String,List<String>> e : userposts.entrySet()) {    List<String> posts=e.getValue();    int n=0;    while (n < numPosts && posts.size() > 0) {      writer.add(posts.remove(random.nextInt(posts.size())));      n++;    }    total+=n;  }  LOG.info("write " + total + " posts.");  writer.close();}  }
class C{  public static boolean isNotModified(HttpServletRequest request,HttpServletResponse response,String tag){  tag=tag != null ? (QUOTE + tag + QUOTE) : null;  String inputTag=request.getHeader(HEADER_IF_NONE_MATCH);  response.setHeader(HEADER_ETAG,tag);  if (inputTag != null && inputTag.equals(tag)) {    response.setStatus(HttpServletResponse.SC_NOT_MODIFIED);    return true;  }  return false;}  }
class C{  public Bucket(String label,String experimentId,double allocationPercent,boolean isControl){  this(label,experimentId,allocationPercent,isControl,null);}  }
class C{  public static float interpolateLinear(float scale,float startValue,float endValue){  if (startValue == endValue) {    return startValue;  }  if (scale <= 0f) {    return startValue;  }  if (scale >= 1f) {    return endValue;  }  return ((1f - scale) * startValue) + (scale * endValue);}  }
class C{  boolean result(String feature){  ViterbiPath path;  if (timeline == null || timeline.next == null) {    return true;  }  path=findBestPath();  if (path == null) {    return false;  }  for (; path != null; path=path.from) {    if (path.candidate != null) {      path.candidate.item.getFeatures().setObject(feature,path.candidate.value);    }  }  return true;}  }
class C{  public static Future<Void> closeSequence(ExecutorService executorService,AsyncCloseable... closeables){  return closeSequence(executorService,false,closeables);}  }
class C{  public MessagesGetQuery out(Boolean value){  return unsafeParam("out",value);}  }
class C{  public static final void main(String[] argv){  Logger.getLogger("prefuse").setLevel(Level.WARNING);  FisheyeMenu fm=demo();  JFrame f=new JFrame("p r e f u s e  |  f i s h e y e");  f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  f.getContentPane().add(fm);  f.pack();  f.setVisible(true);}  }
class C{  private String findLastStringAssignment(Stmt stmt,Local local,BiDiInterproceduralCFG<Unit,SootMethod> cfg){  if (stmt instanceof AssignStmt) {    AssignStmt assign=(AssignStmt)stmt;    if (assign.getLeftOp() == local) {      if (assign.getRightOp() instanceof StringConstant)       return ((StringConstant)assign.getRightOp()).value;    }  }  for (  Unit pred : cfg.getPredsOf(stmt)) {    if (!(pred instanceof Stmt))     continue;    String lastAssignment=findLastStringAssignment((Stmt)pred,local,cfg);    if (lastAssignment != null)     return lastAssignment;  }  return null;}  }
class C{  public ServerRequestException(final String pErrorMessage){  super(pErrorMessage);}  }
class C{  static byte[] convertBoolArrayToByteArray(boolean[] boolArr){  byte[] byteArr=new byte[(boolArr.length + 7) / 8];  for (int i=0; i < byteArr.length; i++) {    byteArr[i]=readByte(boolArr,8 * i);  }  return byteArr;}  }
class C{  public ExecutorDelivery(Executor executor){  mResponsePoster=executor;}  }
class C{  public List<Menu> loadMenu(User me,String name){  return loadMenu(me,0,name);}  }
class C{  private void DrawPrimitive(DrawBlock b,World w) throws Exception {  XMLBlockState blockType=new XMLBlockState(b.getType(),b.getColour(),b.getFace(),b.getVariant());  if (!blockType.isValid())   throw new Exception("Unrecogised item type: " + b.getType().value());  BlockPos pos=new BlockPos(b.getX(),b.getY(),b.getZ());  setBlockState(w,pos,blockType);}  }
class C{  @Override public String toString(){  final StringBuilder builder=new StringBuilder(32);  builder.append("Validations []");  return builder.toString();}  }
class C{  public CART(FeatureDefinition featDef){  super(featDef);}  }
class C{  protected void notifyShowContextualSearch(GSAContextDisplaySelection selectionContext,@Nullable URL baseContentViewUrl){  if (!mPolicy.canSendSurroundings(baseContentViewUrl))   selectionContext=null;  for (  ContextualSearchObserver observer : mObservers) {    observer.onShowContextualSearch(selectionContext);  }}  }
class C{  public StandardParserConfiguration(SymbolTable symbolTable){  this(symbolTable,null,null);}  }
class C{  public static void i(String tag,String s){  if (LOG.INFO >= LOGLEVEL)   Log.i(tag,s);}  }
class C{  public boolean updateStatsAndReturnWhetherAllowed(){  long now=SystemClock.elapsedRealtime();  long deltaMs=now - mLastRequestMs;  if (deltaMs < mDelayMs)   return false;  mLastRequestMs=now;  if (deltaMs < 2 * mDelayMs) {    mDelayMs=Math.min(MAX_DELAY,mDelayMs * 2);  } else {    mDelayMs=MIN_DELAY;  }  return true;}  }
class C{  @RequestMapping("generalError") public String generalError(HttpServletRequest request,HttpServletResponse response,Model model){  Integer statusCode=(Integer)request.getAttribute("javax.servlet.error.status_code");  Throwable throwable=(Throwable)request.getAttribute("javax.servlet.error.exception");  String exceptionMessage=getExceptionMessage(throwable,statusCode);  String requestUri=(String)request.getAttribute("javax.servlet.error.request_uri");  if (requestUri == null) {    requestUri="Unknown";  }  String message=MessageFormat.format("{0} returned for {1} with message {2}",statusCode,requestUri,exceptionMessage);  model.addAttribute("errorMessage",message);  return "error/general";}  }
class C{  protected MarketEditQuery mainPhotoId(int value){  return unsafeParam("main_photo_id",value);}  }
class C{  protected void handleAndroidResourceFiles(String apk,Set<String> fileNameFilter,IResourceHandler handler){  File apkF=new File(apk);  if (!apkF.exists())   throw new RuntimeException("file '" + apk + "' does not exist!");  try {    ZipFile archive=null;    try {      archive=new ZipFile(apkF);      Enumeration<?> entries=archive.entries();      while (entries.hasMoreElements()) {        ZipEntry entry=(ZipEntry)entries.nextElement();        String entryName=entry.getName();        handler.handleResourceFile(entryName,fileNameFilter,archive.getInputStream(entry));      }    }  finally {      if (archive != null)       archive.close();    }  } catch (  Exception e) {    System.err.println("Error when looking for XML resource files in apk " + apk + ": "+ e);    e.printStackTrace();    if (e instanceof RuntimeException)     throw (RuntimeException)e; else     throw new RuntimeException(e);  }}  }
class C{  public boolean isLessThan(GameTime gt){  return this.getTime() < gt.getTime();}  }
class C{  public static int compareTimestamp(GenericRecord first,GenericRecord second,String timestampFieldName){  Long ts1=(Long)first.get(timestampFieldName);  Long ts2=(Long)second.get(timestampFieldName);  if (ts1 < ts2)   return -1; else   if (ts1 > ts2)   return 1; else   return 0;}  }
class C{  public SFFS(int solSize,boolean b0,boolean logSol){  interceptTerm=b0;  logSolution=logSol;  solutionSize=solSize;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Root_END_A_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200906,skilltarget);}  }
class C{  public void activateFetched(){  this.firebaseRemoteConfig.activateFetched();}  }
class C{  public byte[] serialize(){  StringBuilder sb=new StringBuilder();  sb.append(metadataFormatVersion).append(LINE_SPLITTER);  sb.append(dlType).append(LINE_SPLITTER);  sb.append(dlConfig.serialize());  LOG.debug("Serialized dl metadata {}.",sb);  return sb.toString().getBytes(UTF_8);}  }
class C{  private void renewClaimedTasks(){  try {    List<ClaimedTask> claimedTasks=ImmutableList.copyOf(_claimedTasks.values());    List<ScanRangeTask> tasks=Lists.newArrayList();    for (    ClaimedTask claimedTask : claimedTasks) {      if (claimedTask.isComplete()) {        _log.info("Complete claimed task found during renew: id={}",claimedTask.getTaskId());        _claimedTasks.remove(claimedTask.getTaskId());      } else       if (claimedTask.isStarted()) {        tasks.add(claimedTask.getTask());      }    }    if (!tasks.isEmpty()) {      _scanWorkflow.renewScanRangeTasks(tasks,QUEUE_RENEW_TTL);      for (      ScanRangeTask task : tasks) {        _log.info("Renewed scan range task: {}",task);      }    }  } catch (  Exception e) {    _log.error("Failed to renew scan ranges",e);  }}  }
class C{  public final void encrypt(ByteBuffer buf){  if (!isEnabled) {    isEnabled=true;    log.debug("packet is not encrypted... send in SM_KEY");    return;  }  packetKey.encrypt(buf);}  }
class C{  public static FieldSelector of(ImmutableList<Field> fields){  return new FieldSelector(fields);}  }
class C{  private void buildSpectrogram(){  short[] amplitudes=wave.getSampleAmplitudes();  int numSamples=amplitudes.length;  int pointer=0;  if (overlapFactor > 1) {    int numOverlappedSamples=numSamples * overlapFactor;    int backSamples=fftSampleSize * (overlapFactor - 1) / overlapFactor;    int fftSampleSize_1=fftSampleSize - 1;    short[] overlapAmp=new short[numOverlappedSamples];    pointer=0;    for (int i=0; i < amplitudes.length; i++) {      overlapAmp[pointer++]=amplitudes[i];      if (pointer % fftSampleSize == fftSampleSize_1) {        i-=backSamples;      }    }    numSamples=numOverlappedSamples;    amplitudes=overlapAmp;  }  numFrames=numSamples / fftSampleSize;  framesPerSecond=(int)(numFrames / wave.length());  WindowFunction window=new WindowFunction();  window.setWindowType("Hamming");  double[] win=window.generate(fftSampleSize);  double[][] signals=new double[numFrames][];  for (int f=0; f < numFrames; f++) {    signals[f]=new double[fftSampleSize];    int startSample=f * fftSampleSize;    for (int n=0; n < fftSampleSize; n++) {      signals[f][n]=amplitudes[startSample + n] * win[n];    }  }  absoluteSpectrogram=new double[numFrames][];  FastFourierTransform fft=new FastFourierTransform();  for (int i=0; i < numFrames; i++) {    absoluteSpectrogram[i]=fft.getMagnitudes(signals[i]);  }  if (absoluteSpectrogram.length > 0) {    numFrequencyUnit=absoluteSpectrogram[0].length;    unitFrequency=(double)wave.getWaveHeader().getSampleRate() / 2 / numFrequencyUnit;    spectrogram=new double[numFrames][numFrequencyUnit];    double maxAmp=Double.MIN_VALUE;    double minAmp=Double.MAX_VALUE;    for (int i=0; i < numFrames; i++) {      for (int j=0; j < numFrequencyUnit; j++) {        if (absoluteSpectrogram[i][j] > maxAmp) {          maxAmp=absoluteSpectrogram[i][j];        } else         if (absoluteSpectrogram[i][j] < minAmp) {          minAmp=absoluteSpectrogram[i][j];        }      }    }    double minValidAmp=0.00000000001F;    if (minAmp == 0) {      minAmp=minValidAmp;    }    double diff=Math.log10(maxAmp / minAmp);    for (int i=0; i < numFrames; i++) {      for (int j=0; j < numFrequencyUnit; j++) {        if (absoluteSpectrogram[i][j] < minValidAmp) {          spectrogram[i][j]=0;        } else {          spectrogram[i][j]=(Math.log10(absoluteSpectrogram[i][j] / minAmp)) / diff;        }      }    }  }}  }
class C{  void beginEndElement(Augmentations elementAugs){  fInEndElement=true;  fElementAugs=elementAugs;}  }
class C{  public void addNewLine(){  if (symbolTree == null) {    return;  }  Object oldValueObj=sldWriter.encodeSLD(null,SelectedSymbol.getInstance().getSld());  LineSymbolizer newLineSymbolizer=DefaultSymbols.createDefaultLineSymbolizer();  DefaultMutableTreeNode ruleNode=getRuleTreeNode();  SelectedSymbol.getInstance().addSymbolizerToRule(newLineSymbolizer);  DefaultMutableTreeNode newNode=sldTree.addObject(ruleNode,newLineSymbolizer,true);  if (newNode != null) {    sldTree.addObject(newNode,SLDTreeLeafFactory.getInstance().getStroke(newLineSymbolizer),true);    TreePath newPath=getPath(newNode);    symbolTree.setSelectionPath(newPath);    Object newValueObj=sldWriter.encodeSLD(null,SelectedSymbol.getInstance().getSld());    UndoManager.getInstance().addUndoEvent(new UndoEvent(sldTree.getUndoObject(),getClass().getName(),oldValueObj,newValueObj));  }}  }
class C{  @Override public int read(byte[] b,int off,int len) throws IOException {  int sampleSizeInBytes=frameSize / inputChannels;  int outputFrameSize=sampleSizeInBytes;  int nFrames=len / outputFrameSize;  boolean bigEndian=getFormat().isBigEndian();  byte[] inputBytes=new byte[nFrames * frameSize];  int nInputBytes=super.read(inputBytes,0,inputBytes.length);  if (nInputBytes <= 0)   return nInputBytes;  if (inputMode == AudioPlayer.STEREO) {    for (int i=0, j=off; i < nInputBytes; i+=frameSize, j+=outputFrameSize) {      int sample=0;      for (int c=0; c < inputChannels; c++) {        if (sampleSizeInBytes == 1) {          sample+=inputBytes[i] << 8;        } else         if (sampleSizeInBytes == 2) {          byte lobyte;          byte hibyte;          if (!bigEndian) {            lobyte=inputBytes[i];            hibyte=inputBytes[i + 1];          } else {            lobyte=inputBytes[i + 1];            hibyte=inputBytes[i];          }          sample+=hibyte << 8 | lobyte & 0xFF;        } else {          assert sampleSizeInBytes == 3 : "Unsupported sample size in bytes: " + sampleSizeInBytes;          byte lobyte;          byte midbyte;          byte hibyte;          if (!bigEndian) {            lobyte=inputBytes[i];            midbyte=inputBytes[i + 1];            hibyte=inputBytes[i + 2];          } else {            lobyte=inputBytes[i + 2];            midbyte=inputBytes[i + 1];            hibyte=inputBytes[i];          }          sample+=hibyte << 16 | (midbyte & 0xFF) << 8 | lobyte & 0xFF;        }      }      sample/=inputChannels;      if (sampleSizeInBytes == 1) {        b[j]=(byte)((sample >> 8) & 0xFF);      } else       if (sampleSizeInBytes == 2) {        byte lobyte=(byte)(sample & 0xFF);        byte hibyte=(byte)(sample >> 8);        if (!bigEndian) {          b[j]=lobyte;          b[j + 1]=hibyte;        } else {          b[j]=hibyte;          b[j + 1]=lobyte;        }      } else {        assert sampleSizeInBytes == 3 : "Unsupported sample size in bytes: " + sampleSizeInBytes;        byte lobyte=(byte)(sample & 0xFF);        byte midbyte=(byte)((sample >> 8) & 0xFF);        byte hibyte=(byte)(sample >> 16);        if (!bigEndian) {          b[j]=lobyte;          b[j + 1]=midbyte;          b[j + 2]=hibyte;        } else {          b[j]=hibyte;          b[j + 1]=midbyte;          b[j + 2]=lobyte;        }      }    }  } else   if (inputMode == AudioPlayer.LEFT_ONLY) {    for (int i=0, j=off; i < nInputBytes; i+=frameSize, j+=outputFrameSize) {      for (int k=0; k < sampleSizeInBytes; k++) {        b[j + k]=inputBytes[i + k];      }    }  } else {    assert inputMode == AudioPlayer.RIGHT_ONLY : "unexpected input mode: " + inputMode;    for (int i=0, j=off; i < nInputBytes; i+=frameSize, j+=outputFrameSize) {      for (int k=0; k < sampleSizeInBytes; k++) {        b[j + k]=inputBytes[i + k + sampleSizeInBytes];      }    }  }  return nInputBytes / inputChannels;}  }
class C{  public PhotosDeleteCommentQuery deleteComment(UserActor actor,int commentId){  return new PhotosDeleteCommentQuery(getClient(),actor,commentId);}  }
class C{  <T>List<T> onFind(Class<T> modelClass,String[] columns,String[] conditions,String orderBy,String limit,boolean isEager){  BaseUtility.checkConditionsCorrect(conditions);  List<T> dataList=query(modelClass,columns,getWhereClause(conditions),getWhereArgs(conditions),null,null,orderBy,limit,getForeignKeyAssociations(modelClass.getName(),isEager));  return dataList;}  }
class C{  public static <T>String toXml(Class<T> clazz,T object){  return CLASS_2_XSTREAM_INSTANCE.get(clazz).toXML(object);}  }
class C{  protected int toScreen(int xOrY){  Dimension sz=getSize();  int min=getMinimum();  double scale;  if (orientation == VERTICAL) {    scale=(sz.height - (2 * ARROW_SZ)) / (double)(getMaximum() - min);  } else {    scale=(sz.width - (2 * ARROW_SZ)) / (double)(getMaximum() - min);  }  if (direction == LEFTRIGHT_TOPBOTTOM) {    return (int)(ARROW_SZ + ((xOrY - min) * scale) + 0.5);  } else {    if (orientation == VERTICAL) {      return (int)(sz.height - (xOrY - min) * scale - ARROW_SZ + 0.5);    } else {      return (int)(sz.width - (xOrY - min) * scale - ARROW_SZ + 0.5);    }  }}  }
class C{  protected void analyzeAssociatedModels(DataSupport baseObj,Collection<AssociationsInfo> associationInfos){  try {    for (    AssociationsInfo associationInfo : associationInfos) {      if (associationInfo.getAssociationType() == Const.Model.MANY_TO_ONE) {        new Many2OneAnalyzer().analyze(baseObj,associationInfo);      } else       if (associationInfo.getAssociationType() == Const.Model.ONE_TO_ONE) {        new One2OneAnalyzer().analyze(baseObj,associationInfo);      } else       if (associationInfo.getAssociationType() == Const.Model.MANY_TO_MANY) {        new Many2ManyAnalyzer().analyze(baseObj,associationInfo);      }    }  } catch (  Exception e) {    throw new DataSupportException(e.getMessage());  }}  }
class C{  public String replaceBackTrickyPhones(String lab){  String s=lab;  if (actualPhones.containsKey(lab)) {    s=actualPhones.get(lab);  }  return s;}  }
class C{  public static byte[] decode(String encoded){  if (encoded == null) {    return null;  }  char[] base64Data=encoded.toCharArray();  int len=removeWhiteSpace(base64Data);  if (len % FOURBYTE != 0) {    return null;  }  int numberQuadruple=(len / FOURBYTE);  if (numberQuadruple == 0) {    return new byte[0];  }  byte decodedData[]=null;  byte b1=0, b2=0, b3=0, b4=0;  char d1=0, d2=0, d3=0, d4=0;  int i=0;  int encodedIndex=0;  int dataIndex=0;  decodedData=new byte[(numberQuadruple) * 3];  for (; i < numberQuadruple - 1; i++) {    if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++])) || !isData((d3=base64Data[dataIndex++]))|| !isData((d4=base64Data[dataIndex++]))) {      return null;    }    b1=base64Alphabet[d1];    b2=base64Alphabet[d2];    b3=base64Alphabet[d3];    b4=base64Alphabet[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++]))) {    return null;  }  b1=base64Alphabet[d1];  b2=base64Alphabet[d2];  d3=base64Data[dataIndex++];  d4=base64Data[dataIndex++];  if (!isData((d3)) || !isData((d4))) {    if (isPad(d3) && isPad(d4)) {      if ((b2 & 0xf) != 0) {        return null;      }      byte[] tmp=new byte[i * 3 + 1];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      return tmp;    } else     if (!isPad(d3) && isPad(d4)) {      b3=base64Alphabet[d3];      if ((b3 & 0x3) != 0) {        return null;      }      byte[] tmp=new byte[i * 3 + 2];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);      tmp[encodedIndex]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));      return tmp;    } else {      return null;    }  } else {    b3=base64Alphabet[d3];    b4=base64Alphabet[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  return decodedData;}  }
class C{  public boolean isAxisModulusCustom(){  return mIsAxisModulusCustom;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_PET_ABANDON_EXPIRE_TIME_COMPLETE(String value0){  return new SM_SYSTEM_MESSAGE(1401194,value0);}  }
class C{  public Value trim(Value str,Value trimChar,Boolean where){  throw new RuntimeException("Unsupported operation.");}  }
class C{  UnrevealBuilder(@NonNull final View viewToUnreveal){  this.mViewToUnreveal=viewToUnreveal;}  }
class C{  public static String separatorsToSystem(String path){  if (path == null) {    return null;  }  if (isSystemWindows()) {    return separatorsToWindows(path);  } else {    return separatorsToUnix(path);  }}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public static void main(String[] args){  try {    LuaState L=LuaStateFactory.newLuaState();    L.openLibs();    if (args.length > 0) {      for (int i=0; i < args.length; i++) {        int res=L.LloadFile(args[i]);        if (res == 0) {          res=L.pcall(0,0,0);        }        if (res != 0) {          throw new LuaException("Error on file: " + args[i] + ". "+ L.toString(-1));        }      }      return;    }    System.out.println("API Lua Java - console mode.");    BufferedReader inp=new BufferedReader(new InputStreamReader(System.in));    String line;    System.out.print("> ");    while ((line=inp.readLine()) != null && !line.equals("exit")) {      int ret=L.LloadBuffer(line.getBytes(),"from console");      if (ret == 0) {        ret=L.pcall(0,0,0);      }      if (ret != 0) {        System.err.println("Error on line: " + line);        System.err.println(L.toString(-1));      }      System.out.print("> ");    }    L.close();  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public int size(){  return edges.size();}  }
class C{  public int find(int x){  if (array[x] < 0) {    return x;  } else {    array[x]=find(array[x]);    return array[x];  }}  }
class C{  public static Response makeErrorResponse(StatusType status,DruidQuery<?> druidQuery,Throwable cause,ObjectWriter writer){  String reason=null;  String description=null;  if (cause instanceof ProcessingException && cause.getCause() != null) {    cause=cause.getCause();  }  if (cause != null) {    reason=cause.getClass().getName();    description=String.valueOf(cause.getMessage());  }  return makeErrorResponse(status.getStatusCode(),reason,description,druidQuery,writer);}  }
class C{  public boolean selectServiceTab(String url){  url=url.replaceAll(".*://","");  for (int i=0; i < tabbedPane.getTabCount(); i++) {    if (tabbedPane.getTitleAt(i).equalsIgnoreCase(url)) {      tabbedPane.setSelectedIndex(i);      return true;    }  }  return false;}  }
class C{  public RegisterEntryTypeDescriptorSpaceOperationRequest(){}  }
class C{  public ExperimentChangeEvent(UserInfo user,ExperimentBase experiment,String propertyName,String before,String after){  super(user,propertyName,before,after);  if (experiment == null) {    throw new IllegalArgumentException("Experiment must not be null!");  }  this.experiment=experiment;  this.appName=experiment.getApplicationName();}  }
class C{  @Subscribe(threadMode=ThreadMode.MAIN) public void onEventMainThread(LinkEvent event){  final String fragmentTag=event.getFragmentTag();  mRTApi.removeFragment(fragmentTag);  if (!event.wasCancelled() && ID_01_LINK_FRAGMENT.equals(fragmentTag)) {    RTEditText editor=getActiveEditor();    if (editor != null) {      Link link=event.getLink();      String url=null;      if (link != null && link.isValid()) {        Selection selection=mLinkSelection != null && mLinkSelection.end() <= editor.length() ? mLinkSelection : new Selection(editor);        String linkText=link.getLinkText();        Editable str=editor.getText();        str.replace(selection.start(),selection.end(),linkText);        editor.setSelection(selection.start(),selection.start() + linkText.length());        url=link.getUrl();      }      editor.applyEffect(Effects.LINK,url);    }  }}  }
class C{  private static float drawDash(Path2D.Float path,float dashPercentage,long prevX,long prevY,long nextX,long nextY,double currXNorm,double currYNorm){  if (prevX == nextX && prevY == nextY) {    return dashPercentage;  }  double xd, yd;  double prevXNorm=path.getCurrentPoint().getX();  double prevYNorm=path.getCurrentPoint().getY();  float pathLength=(float)Point2D.distance(prevXNorm,prevYNorm,currXNorm,currYNorm);  float dashLength=computeDashLength(DASH_LENGTH,X_TO_Y_RATIO,prevX,prevY,nextX,nextY,prevXNorm,prevYNorm,currXNorm,currYNorm);  float drawLength=dashLength / 2;  float currentDashPosition=dashPercentage * dashLength;  while (pathLength > 0) {    xd=currXNorm - prevXNorm;    yd=currYNorm - prevYNorm;    if (currentDashPosition > drawLength) {      float currentDrawLength=currentDashPosition - drawLength;      float pathLengthToDraw=pathLength > currentDrawLength ? currentDrawLength : pathLength;      path.lineTo(prevXNorm + xd * pathLengthToDraw / pathLength,prevYNorm + yd * pathLengthToDraw / pathLength);      currentDashPosition-=pathLengthToDraw;      pathLength-=pathLengthToDraw;    } else {      float pathLengthToDraw=pathLength > currentDashPosition ? currentDashPosition : pathLength;      path.moveTo(prevXNorm + xd * pathLengthToDraw / pathLength,prevYNorm + yd * pathLengthToDraw / pathLength);      currentDashPosition-=pathLengthToDraw;      pathLength-=pathLengthToDraw;    }    prevXNorm=path.getCurrentPoint().getX();    prevYNorm=path.getCurrentPoint().getY();    if (currentDashPosition == 0) {      currentDashPosition=dashLength;    }  }  return currentDashPosition / dashLength;}  }
class C{  @SuppressWarnings("unused") @Deprecated private boolean isDataExists(DataSupport baseObj,DataSupport associatedModel){  boolean exists=false;  SQLiteDatabase db=Connector.getDatabase();  Cursor cursor=null;  try {    cursor=db.query(getJoinTableName(baseObj,associatedModel),null,getSelection(baseObj,associatedModel),getSelectionArgs(baseObj,associatedModel),null,null,null);    exists=cursor.getCount() > 0;  } catch (  Exception e) {    e.printStackTrace();    return true;  } finally {    cursor.close();  }  return exists;}  }
class C{  public int equivHashCode(){  final int prime=31;  int result=1;  result=prime * result + ((name == null) ? 0 : name.hashCode());  result=prime * result + ((type == null) ? 0 : type.hashCode());  return result;}  }
class C{  public StatisticalReferenceDataset[] createAll() throws IOException {  return new StatisticalReferenceDataset[]{createKirby2(),createMGH17()};}  }
class C{  private static int assignLevelToAspect(ConfigAspect aspect,Map<Class<? extends ConfigAspect>,ConfigAspect> aspectsByType,List<Class<? extends ConfigAspect>> visiting,Map<ConfigAspect,Integer> aspectToLevel){  Class<? extends ConfigAspect> aspectType=aspect.getClass();  if (aspectToLevel.containsKey(aspect)) {    return aspectToLevel.get(aspect);  }  if (visiting.contains(aspectType)) {    throw new IllegalStateException(String.format("Cyclic dependency between config aspect attributes. Cycle is: %s <- %s",aspectType,Joiner.on(" <- ").join(visiting)));  }  visiting.add(aspectType);  Integer childMaxHeight=0;  for (  Class<? extends ConfigAspect> dep : aspect.mergeDependencies()) {    if (aspectsByType.containsKey(dep)) {      Integer childHeight=assignLevelToAspect(aspectsByType.get(dep),aspectsByType,visiting,aspectToLevel);      childMaxHeight=childHeight > childMaxHeight ? childHeight : childMaxHeight;    } else {      throw new IllegalStateException(String.format("config aspect %s depends on an unregistered aspect %s.",aspectType.getSimpleName(),dep.getSimpleName()));    }  }  visiting.remove(aspectType);  aspectToLevel.put(aspect,childMaxHeight + 1);  return childMaxHeight + 1;}  }
class C{  public long dump(RandomAccessFile rafIn) throws IOException {  long before=rafIn.getFilePointer();  rafIn.writeUTF(procHeader);  long after=rafIn.getFilePointer();  return after - before;}  }
class C{  public Future execute(CompletionCallback callback){  if (callback == null)   throw new IllegalArgumentException("Callback cannot be null");  TaskManagerImpl taskManager=new TaskManagerImpl(this.executor_,this.task_,callback);  this.executor_.execute(taskManager);  return new Future(taskManager);}  }
class C{  public String join(String separator) throws JSONException {  int len=this.length();  StringBuilder sb=new StringBuilder();  for (int i=0; i < len; i+=1) {    if (i > 0) {      sb.append(separator);    }    sb.append(JSONObject.valueToString(this.myArrayList.get(i)));  }  return sb.toString();}  }
class C{  public static float calculateWidth(float height,float targetAspectRatio){  return targetAspectRatio * height;}  }
class C{  public DexlibAbstractInstruction instructionAtAddress(int address){  DexlibAbstractInstruction i=null;  while (i == null && address >= 0) {    i=instructionAtAddress.get(address);    address--;  }  return i;}  }
class C{  private double[] resample(double[] sample,int k){  final int len=sample.length;  final double[] out=new double[k];  for (int i=0; i < k; i++) {    out[i]=gen.nextInt(len);  }  return out;}  }
class C{  public StatsGetQuery appId(Integer value){  return unsafeParam("app_id",value);}  }
class C{  public DocumentWordDistroGraph(){  MinSize=1;  MaxSize=2;  CorrelationWindow=3;}  }
class C{  public static LegendOptionData decodeXML(Document document,String elementName){  LegendOptionData legendOptionData=new LegendOptionData();  if ((document != null) && (elementName != null)) {    NodeList nodeList=document.getElementsByTagName(elementName);    if (nodeList.getLength() > 0) {      Node node=nodeList.item(0);      Node child=node.getFirstChild();      while (child != null) {        if (child.getNodeType() == Node.ELEMENT_NODE) {          String nodeName=child.getNodeName();          if (nodeName.compareToIgnoreCase(IMAGE_WIDTH) == 0) {            legendOptionData.setImageWidth(decodeIntElement(document,child));          } else           if (nodeName.compareToIgnoreCase(IMAGE_HEIGHT) == 0) {            legendOptionData.setImageHeight(decodeIntElement(document,child));          } else           if (nodeName.compareToIgnoreCase(IMAGE_DPI) == 0) {            legendOptionData.setDpi(decodeIntElement(document,child));          } else           if (nodeName.compareToIgnoreCase(IMAGE_SIZE) == 0) {            legendOptionData.setImageSize(decodeIntElement(document,child));          } else           if (nodeName.compareToIgnoreCase(MAINTAIN_ASPECT_RATIO) == 0) {            legendOptionData.setMaintainAspectRatio(decodeBooleanElement(document,child));          } else           if (nodeName.compareToIgnoreCase(SHOW_LABELS) == 0) {            legendOptionData.setShowLabels(decodeBooleanElement(document,child));          } else           if (nodeName.compareToIgnoreCase(SHOW_TITLE) == 0) {            legendOptionData.setShowTitle(decodeBooleanElement(document,child));          } else           if (nodeName.compareToIgnoreCase(SPLIT_SYMBOLIZERS) == 0) {            legendOptionData.setSplitSymbolizers(decodeBooleanElement(document,child));          } else           if (nodeName.compareToIgnoreCase(FONT_ANTI_ALIASING) == 0) {            legendOptionData.setFontAntiAliasing(decodeBooleanElement(document,child));          } else           if (nodeName.compareToIgnoreCase(SHOW_BORDER) == 0) {            legendOptionData.setBorder(decodeBooleanElement(document,child));          } else           if (nodeName.compareToIgnoreCase(BAND_INFORMATION) == 0) {            legendOptionData.setBandInformation(decodeBooleanElement(document,child));          } else           if (nodeName.compareToIgnoreCase(BACKGROUND_TRANSPARENT) == 0) {            legendOptionData.setTransparent(decodeBooleanElement(document,child));          } else           if (nodeName.compareToIgnoreCase(LABEL_FONT) == 0) {            legendOptionData.setLabelFont(decodeFontElement(document,child));          } else           if (nodeName.compareToIgnoreCase(LABEL_FONT_COLOUR) == 0) {            legendOptionData.setLabelFontColour(decodeColourElement(document,child));          } else           if (nodeName.compareToIgnoreCase(BORDER_COLOUR) == 0) {            legendOptionData.setBorderColour(decodeColourElement(document,child));          } else           if (nodeName.compareToIgnoreCase(BACKGROUND_COLOUR) == 0) {            legendOptionData.setBackgroundColour(decodeColourElement(document,child));          }        }        child=child.getNextSibling();      }    }  }  return legendOptionData;}  }
class C{  public static Map<String,Object> storeIncomingEmail(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  MimeMessageWrapper wrapper=(MimeMessageWrapper)context.get("messageWrapper");  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  String partyIdTo=null;  String partyIdFrom=null;  String contentType=null;  String communicationEventId=null;  String contactMechIdFrom=null;  String contactMechIdTo=null;  Map<String,Object> result=null;  try {    String contentTypeRaw=wrapper.getContentType();    int idx=contentTypeRaw.indexOf(";");    if (idx == -1)     idx=contentTypeRaw.length();    contentType=contentTypeRaw.substring(0,idx);    if (contentType == null || contentType.equals(""))     contentType="text/html";    contentType=contentType.toLowerCase();    Address[] addressesFrom=wrapper.getFrom();    Address[] addressesTo=wrapper.getTo();    Address[] addressesCC=wrapper.getCc();    Address[] addressesBCC=wrapper.getBcc();    String messageId=wrapper.getMessageId().replaceAll("[<>]","");    String aboutThisEmail="message [" + messageId + "] from ["+ ((addressesFrom == null || addressesFrom[0] == null) ? "not found" : addressesFrom[0].toString())+ "] to ["+ ((addressesTo == null || addressesTo[0] == null) ? "not found" : addressesTo[0].toString())+ "]";    if (Debug.verboseOn())     Debug.logVerbose("Processing Incoming Email " + aboutThisEmail,module);    String spamHeaderName=EntityUtilProperties.getPropertyValue("general.properties","mail.spam.name","N",delegator);    String configHeaderValue=EntityUtilProperties.getPropertyValue("general.properties","mail.spam.value",delegator);    if (!spamHeaderName.equals("N") && wrapper.getHeader(spamHeaderName) != null && wrapper.getHeader(spamHeaderName).length > 0) {      String msgHeaderValue=wrapper.getHeader(spamHeaderName)[0];      if (msgHeaderValue != null && msgHeaderValue.startsWith(configHeaderValue)) {        Debug.logInfo("Incoming Email message ignored, was detected by external spam checker",module);        return ServiceUtil.returnSuccess(UtilProperties.getMessage(resource,"PartyCommEventMessageIgnoredDetectedByExternalSpamChecker",locale));      }    }    if (addressesFrom == null) {      Debug.logInfo("Incoming Email message ignored, had not 'from' email address",module);      return ServiceUtil.returnSuccess(UtilProperties.getMessage(resource,"PartyCommEventMessageIgnoredNoFromAddressSpecified",locale));    }    List<GenericValue> commEvents;    try {      commEvents=EntityQuery.use(delegator).from("CommunicationEvent").where("messageId",messageId).queryList();    } catch (    GenericEntityException e) {      Debug.logError(e,module);      return ServiceUtil.returnError(e.getMessage());    }    if (!commEvents.isEmpty()) {      Debug.logInfo("Ignoring Duplicate Email: " + aboutThisEmail,module);      return ServiceUtil.returnSuccess(UtilProperties.getMessage(resource,"PartyCommEventMessageIgnoredDuplicateMessageId",locale));    }    List<Map<String,Object>> toParties=buildListOfPartyInfoFromEmailAddresses(addressesTo,userLogin,dispatcher);    List<Map<String,Object>> ccParties=buildListOfPartyInfoFromEmailAddresses(addressesCC,userLogin,dispatcher);    List<Map<String,Object>> bccParties=buildListOfPartyInfoFromEmailAddresses(addressesBCC,userLogin,dispatcher);    if (!toParties.isEmpty()) {      Map<String,Object> firstAddressTo=toParties.get(0);      partyIdTo=(String)firstAddressTo.get("partyId");      contactMechIdTo=(String)firstAddressTo.get("contactMechId");    }    String deliveredTo=wrapper.getFirstHeader("Delivered-To");    if (deliveredTo != null) {      String dn=deliveredTo.substring(deliveredTo.indexOf("@") + 1,deliveredTo.length());      if (deliveredTo.startsWith(dn)) {        deliveredTo=deliveredTo.substring(dn.length() + 1,deliveredTo.length());      }    }    if ((partyIdTo == null) && (deliveredTo != null)) {      result=dispatcher.runSync("findPartyFromEmailAddress",UtilMisc.<String,Object>toMap("address",deliveredTo,"userLogin",userLogin));      partyIdTo=(String)result.get("partyId");      contactMechIdTo=(String)result.get("contactMechId");    }    if (userLogin.get("partyId") == null && partyIdTo != null) {      int ch=0;      for (ch=partyIdTo.length(); ch > 0 && Character.isDigit(partyIdTo.charAt(ch - 1)); ch--) {      }      userLogin.put("partyId",partyIdTo.substring(0,ch));    }    result=getParyInfoFromEmailAddress(addressesFrom,userLogin,dispatcher);    partyIdFrom=(String)result.get("partyId");    contactMechIdFrom=(String)result.get("contactMechId");    Map<String,Object> commEventMap=new HashMap<String,Object>();    commEventMap.put("communicationEventTypeId","AUTO_EMAIL_COMM");    commEventMap.put("contactMechTypeId","EMAIL_ADDRESS");    commEventMap.put("messageId",messageId);    String subject=wrapper.getSubject();    commEventMap.put("subject",subject);    commEventMap.put("entryDate",nowTimestamp);    commEventMap.put("datetimeStarted",UtilDateTime.toTimestamp(wrapper.getSentDate()));    commEventMap.put("datetimeEnded",UtilDateTime.toTimestamp(wrapper.getReceivedDate()));    commEventMap.put("roleTypeIdFrom","_NA_");    commEventMap.put("roleTypeIdTo","_NA_");    String messageBodyContentType=wrapper.getMessageBodyContentType();    if (messageBodyContentType.indexOf(";") > -1) {      messageBodyContentType=messageBodyContentType.substring(0,messageBodyContentType.indexOf(";"));    }    String messageBody=null;    if (wrapper.getMainPartCount() > 1) {      for (int ind=0; ind < wrapper.getMainPartCount(); ind++) {        BodyPart p=wrapper.getPart(ind + "");        if (p.getContentType().toLowerCase().indexOf("text/plain") > -1) {          messageBody=(String)p.getContent();          break;        }      }    }    if (messageBody == null) {      messageBody=wrapper.getMessageBody();    }    commEventMap.put("content",messageBody);    commEventMap.put("contentMimeTypeId",messageBodyContentType.toLowerCase());    String[] inReplyTo=wrapper.getHeader("In-Reply-To");    if (inReplyTo != null && inReplyTo[0] != null) {      GenericValue parentCommEvent=null;      try {        parentCommEvent=EntityQuery.use(delegator).from("CommunicationEvent").where("messageId",inReplyTo[0].replaceAll("[<>]","")).queryFirst();      } catch (      GenericEntityException e) {        Debug.logError(e,module);      }      if (parentCommEvent != null) {        String parentCommEventId=parentCommEvent.getString("communicationEventId");        String orgCommEventId=parentCommEvent.getString("origCommEventId");        if (orgCommEventId == null)         orgCommEventId=parentCommEventId;        commEventMap.put("parentCommEventId",parentCommEventId);        commEventMap.put("origCommEventId",orgCommEventId);      }    }    populateAddressesFromMessage(wrapper,commEventMap);    String commNote="";    if (partyIdFrom != null) {      commEventMap.put("partyIdFrom",partyIdFrom);      commEventMap.put("contactMechIdFrom",contactMechIdFrom);    } else {      commNote+="Sent from: " + ((InternetAddress)addressesFrom[0]).getAddress() + "; ";      commNote+="Sent Name from: " + ((InternetAddress)addressesFrom[0]).getPersonal() + "; ";    }    if (partyIdTo != null) {      commEventMap.put("partyIdTo",partyIdTo);      commEventMap.put("contactMechIdTo",contactMechIdTo);    } else {      commNote+="Sent to: " + ((InternetAddress)addressesTo[0]).getAddress() + "; ";      if (deliveredTo != null) {        commNote+="Delivered-To: " + deliveredTo + "; ";      }    }    commNote+="Sent to: " + ((InternetAddress)addressesTo[0]).getAddress() + "; ";    commNote+="Delivered-To: " + deliveredTo + "; ";    if (partyIdTo != null && partyIdFrom != null) {      commEventMap.put("statusId","COM_ENTERED");    } else {      commEventMap.put("statusId","COM_UNKNOWN_PARTY");    }    if (commNote.length() > 255)     commNote=commNote.substring(0,255);    if (!("".equals(commNote))) {      commEventMap.put("note",commNote);    }    commEventMap.put("userLogin",userLogin);    StringBuilder headerString=new StringBuilder();    Enumeration<?> headerLines=wrapper.getMessage().getAllHeaderLines();    while (headerLines.hasMoreElements()) {      headerString.append(System.getProperty("line.separator"));      headerString.append(headerLines.nextElement());    }    String header=headerString.toString();    commEventMap.put("headerString",header.replaceAll("[<>]",""));    result=dispatcher.runSync("createCommunicationEvent",commEventMap);    communicationEventId=(String)result.get("communicationEventId");    Debug.logInfo("Persisting New Email: " + aboutThisEmail + " into CommunicationEventId: "+ communicationEventId,module);    createAttachmentContent(dispatcher,delegator,wrapper,communicationEventId,userLogin);    createCommEventRoles(userLogin,delegator,dispatcher,communicationEventId,toParties,"ADDRESSEE");    createCommEventRoles(userLogin,delegator,dispatcher,communicationEventId,ccParties,"CC");    createCommEventRoles(userLogin,delegator,dispatcher,communicationEventId,bccParties,"BCC");    List<Map<String,Object>> toWorkEffortInfos=buildListOfWorkEffortInfoFromEmailAddresses(addressesTo,userLogin,dispatcher);    List<Map<String,Object>> ccWorkEffortInfos=buildListOfWorkEffortInfoFromEmailAddresses(addressesCC,userLogin,dispatcher);    List<Map<String,Object>> bccWorkEffortInfos=buildListOfWorkEffortInfoFromEmailAddresses(addressesBCC,userLogin,dispatcher);    createCommunicationEventWorkEffs(userLogin,dispatcher,toWorkEffortInfos,communicationEventId);    createCommunicationEventWorkEffs(userLogin,dispatcher,ccWorkEffortInfos,communicationEventId);    createCommunicationEventWorkEffs(userLogin,dispatcher,bccWorkEffortInfos,communicationEventId);    Map<String,Object> results=ServiceUtil.returnSuccess();    results.put("communicationEventId",communicationEventId);    results.put("statusId",commEventMap.get("statusId"));    return results;  } catch (  MessagingException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }catch (  GenericServiceException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }catch (  Exception e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }}  }
class C{  static boolean isAlive(Vertex vertex){  if (vertex == null)   return false;  try {    return vertex.property(Schema.BaseType.TYPE.name()).isPresent();  } catch (  IllegalStateException e) {    return false;  }}  }
class C{  public static boolean isPrimitive(Type type){  return PRIMITIVE_TO_WRAPPER_TYPE.containsKey(type);}  }
class C{  public AdsGetSuggestionsQueryWithRegions cities(String value){  return unsafeParam("cities",value);}  }
class C{  public Entity createEntity(String name) throws DOMException {  if (errorChecking && !isXMLName(name,xml11Version)) {    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"INVALID_CHARACTER_ERR",null);    throw new DOMException(DOMException.INVALID_CHARACTER_ERR,msg);  }  return new EntityImpl(this,name);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ONE_NO_LONGER_INCLUDED(String value0){  return new SM_SYSTEM_MESSAGE(1300636,value0);}  }
class C{  protected void determineTargetPitchmarks(List<SelectedUnit> units){  for (  SelectedUnit unit : units) {    UnitData unitData=(UnitData)unit.getConcatenationData();    assert unitData != null : "Should not have null unitdata here";    Datagram[] datagrams=unitData.getFrames();    Datagram[] frames=null;    if (datagrams != null && datagrams.length > 0) {      frames=datagrams;    } else {      int targetLength=(int)(unit.getTarget().getTargetDurationInSeconds() * timeline.getSampleRate());      frames=new Datagram[]{createZeroDatagram(targetLength)};    }    int unitDuration=0;    for (int i=0; i < frames.length; i++) {      int dur=(int)frames[i].getDuration();      unitDuration+=frames[i].getDuration();    }    unitData.setUnitDuration(unitDuration);    unitData.setFrames(frames);  }}  }
class C{  public int propagator(){  String s=soot.PhaseOptions.getString(options,"propagator");  if (s.equalsIgnoreCase("iter"))   return propagator_iter;  if (s.equalsIgnoreCase("worklist"))   return propagator_worklist;  if (s.equalsIgnoreCase("cycle"))   return propagator_cycle;  if (s.equalsIgnoreCase("merge"))   return propagator_merge;  if (s.equalsIgnoreCase("alias"))   return propagator_alias;  if (s.equalsIgnoreCase("none"))   return propagator_none;  throw new RuntimeException("Invalid value " + s + " of phase option propagator");}  }
class C{  public static String currentTimeString(){  return TestUtils.relativeTimeString(0);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ParConstructorDecl fullCopy(){  ParConstructorDecl tree=(ParConstructorDecl)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public final void writeBoolean(boolean b){  write(b ? 1 : 0);}  }
class C{  @NotNull public String computePreferredTheme(@NotNull Configuration configuration){  MergedManifest manifest=MergedManifest.get(myModule);  String activity=configuration.getActivity();  if (activity != null) {    String activityFqcn=activity;    if (activity.startsWith(".")) {      String pkg=StringUtil.notNullize(manifest.getPackage());      activityFqcn=pkg + activity;    }    ActivityAttributes attributes=manifest.getActivityAttributes(activityFqcn);    if (attributes != null) {      String theme=attributes.getTheme();      if (theme != null && theme.startsWith(SdkConstants.PREFIX_RESOURCE_REF)) {        return theme;      }    }    attributes=manifest.getActivityAttributes(activity);    if (attributes != null) {      String theme=attributes.getTheme();      if (theme != null && theme.startsWith(SdkConstants.PREFIX_RESOURCE_REF)) {        return theme;      }    }  }  return manifest.getDefaultTheme(configuration.getTarget(),configuration.getScreenSize(),configuration.getDevice());}  }
class C{  @Override public void clusterOffline(ClusterNode clusterNode){  LOGGER.warn("Detected Terracotta cluster offline event for node: " + clusterNode.getId());  String hostname;  try {    hostname=InetAddress.getLocalHost().getHostName();  } catch (  Exception e) {    LOGGER.error("Unable to get local hostname",e);    hostname="#unknown host#";  }  SMS_LOGGER.warn("Initiating C2MON server shutdown of " + System.getProperty("c2mon.server.name") + " on "+ hostname);}  }
class C{  public static void createESInput(){  String esTestIndex=SystemConfiguration.getProperty(DistributedTestDriver.ES_INPUT_NODES_PROPERTY) + ":" + SystemConfiguration.getProperty(DistributedTestDriver.ES_INPUT_PORT_PROPERTY)+ "/"+ SystemConfiguration.getProperty(DistributedTestDriver.ES_INPUT_INDEX_PROPERTY);  String esType=SystemConfiguration.getProperty(DistributedTestDriver.ES_INPUT_TYPE_PROPERTY);  logger.info("ES input being created at " + esTestIndex + " with type "+ esType);  logger.info("Creating new testindex:");  ProcessBuilder pCreate=new ProcessBuilder("curl","-XPUT",esTestIndex);  try {    TestUtils.executeCommand(pCreate);  } catch (  IOException e) {    e.printStackTrace();  }  logger.info(" \n \n Adding elements to testindex:");  String indexTypeNum1=esTestIndex + "/" + esType+ "/1";  logger.info("indexTypeNum1 = " + indexTypeNum1);  ProcessBuilder pAdd1=new ProcessBuilder("curl","-XPUT",indexTypeNum1,"-d","{\"qname\":\"a.b.c.com\",\"date\":\"2016-02-20T23:29:05.000Z\",\"qtype\":[\"1\"]" + ",\"rcode\":\"0\",\"src_ip\":\"55.55.55.55\",\"dest_ip\":\"1.2.3.6\"" + ",\"ip\":[\"10.20.30.40\",\"10.20.30.60\"]}");  String indexTypeNum2=esTestIndex + "/" + esType+ "/2";  logger.info("indexTypeNum2 = " + indexTypeNum2);  ProcessBuilder pAdd2=new ProcessBuilder("curl","-XPUT",indexTypeNum2,"-d","{\"qname\":\"d.e.com\",\"date\":\"2016-02-20T23:29:06.000Z\",\"qtype\":[\"1\"]" + ",\"rcode\":\"0\",\"src_ip\":\"127.128.129.130\",\"dest_ip\":\"1.2.3.4\"" + ",\"ip\":[\"5.6.7.8\"]}");  String indexTypeNum3=esTestIndex + "/" + esType+ "/3";  logger.info("indexTypeNum3 = " + indexTypeNum3);  ProcessBuilder pAdd3=new ProcessBuilder("curl","-XPUT",indexTypeNum3,"-d","{\"qname\":\"d.e.com\",\"date\":\"2016-02-20T23:29:07.000Z\",\"qtype\":[\"1\"]" + ",\"rcode\":\"0\",\"src_ip\":\"131.132.133.134\",\"dest_ip\":\"9.10.11.12\"" + ",\"ip\":[\"13.14.15.16\"]}");  String indexTypeNum4=esTestIndex + "/" + esType+ "/4";  logger.info("indexTypeNum4 = " + indexTypeNum4);  ProcessBuilder pAdd4=new ProcessBuilder("curl","-XPUT",indexTypeNum4,"-d","{\"qname\":\"d.e.com\",\"date\":\"2016-02-20T23:29:08.000Z\",\"qtype\":[\"1\"]" + ",\"rcode\":\"3\",\"src_ip\":\"135.136.137.138\",\"dest_ip\":\"17.18.19.20\"" + ",\"ip\":[\"21.22.23.24\"]}");  String indexTypeNum5=esTestIndex + "/" + esType+ "/5";  logger.info("indexTypeNum5 = " + indexTypeNum5);  ProcessBuilder pAdd5=new ProcessBuilder("curl","-XPUT",indexTypeNum5,"-d","{\"qname\":\"d.e.com\",\"date\":\"2016-02-20T23:29:09.000Z\",\"qtype\":[\"1\"]" + ",\"rcode\":\"0\",\"src_ip\":\"139.140.141.142\",\"dest_ip\":\"25.26.27.28\"" + ",\"ip\":[\"5.6.7.8\"]}");  String indexTypeNum6=esTestIndex + "/" + esType+ "/6";  logger.info("indexTypeNum6 = " + indexTypeNum6);  ProcessBuilder pAdd6=new ProcessBuilder("curl","-XPUT",indexTypeNum6,"-d","{\"qname\":\"d.e.com\",\"date\":\"2016-02-20T23:29:10.000Z\",\"qtype\":[\"1\"]" + ",\"rcode\":\"0\",\"src_ip\":\"143.144.145.146\",\"dest_ip\":\"33.34.35.36\"" + ",\"ip\":[\"5.6.7.8\"]}");  String indexTypeNum7=esTestIndex + "/" + esType+ "/7";  logger.info("indexTypeNum7 = " + indexTypeNum7);  ProcessBuilder pAdd7=new ProcessBuilder("curl","-XPUT",indexTypeNum7,"-d","{\"qname\":\"something.else\",\"date\":\"2016-02-20T23:29:11.000Z\",\"qtype\":[\"1\"]" + ",\"rcode\":\"0\",\"src_ip\":\"1.1.1.1\",\"dest_ip\":\"2.2.2.2\"" + ",\"ip\":[\"3.3.3.3\"]}");  String indexTypeNum8=esTestIndex + "/" + esType+ "/8";  logger.info("indexTypeNum8 = " + indexTypeNum8);  ProcessBuilder pAdd8=new ProcessBuilder("curl","-XPUT",indexTypeNum8,"-d","{\"qname\":\"something.else2\",\"date\":\"2016-02-20T23:29:12.000Z\",\"qtype\":[\"1\"]" + ",\"rcode\":\"0\",\"src_ip\":\"5.6.7.8\",\"dest_ip\":\"2.2.2.22\"" + ",\"ip\":[\"3.3.3.132\"]}");  String indexTypeNum9=esTestIndex + "/" + esType+ "/9";  logger.info("indexTypeNum9 = " + indexTypeNum9);  ProcessBuilder pAdd9=new ProcessBuilder("curl","-XPUT",indexTypeNum9,"-d","{\"qname\":\"something.else.on.stoplist\",\"date\":\"2016-02-20T23:29:13.000Z\",\"qtype\":[\"1\"]" + ",\"rcode\":\"0\",\"src_ip\":\"55.55.55.55\",\"dest_ip\":\"2.2.2.232\"" + ",\"ip\":[\"3.3.3.132\"]}");  try {    TestUtils.executeCommand(pAdd1);    TestUtils.executeCommand(pAdd2);    TestUtils.executeCommand(pAdd3);    TestUtils.executeCommand(pAdd4);    TestUtils.executeCommand(pAdd5);    TestUtils.executeCommand(pAdd6);    TestUtils.executeCommand(pAdd7);    TestUtils.executeCommand(pAdd8);    TestUtils.executeCommand(pAdd9);  } catch (  IOException e) {    e.printStackTrace();  }  for (int i=1; i < 7; ++i) {    logger.info("Retrieving element number = " + i + " from "+ esTestIndex);    String elementGet=esTestIndex + "/" + esType+ "/"+ i;    logger.info("elementGet = " + elementGet);    ProcessBuilder pGet=new ProcessBuilder("curl","-XGET",elementGet);    try {      TestUtils.executeCommand(pGet);    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  public void add(Input key){synchronized (this.keys) {    this.keys.put(key.getEvent(),key);  }}  }
class C{  public void remoteResourceMoved(ISVNRemoteResource resource,ISVNRemoteFolder destinationFolder,String destinationResourceName){  for (  ISVNListener listener : repositoryListeners) {    listener.remoteResourceMoved(resource,destinationFolder,destinationResourceName);  }}  }
class C{  @SuppressWarnings("unused") public int batchDelete(ObjectInfo objInfo,String[] keys,Map failKeys) throws MyException {  ServerInfo server;  ProtoCommon.PkgHeader header;  byte[] bsPackage;  int offset;  Iterator it;  Map.Entry entry;  String key;  String value;  byte[] bsKey;  byte[] bsValue;  int i;  header=new ProtoCommon.PkgHeader();  header.key_hash_code=objInfo.getHashCode();  server=this.serverGroup.getServer(header.key_hash_code);  if (server == null) {    this.status=2;    return -1 * this.status;  }  try {    header.body_len=objInfo.getPackLength() + 4;    header.cmd=ProtoCommon.FDHT_PROTO_CMD_BATCH_DEL;    header.keep_alive=(byte)(this.serverGroup.keep_alive ? 1 : 0);    header.timestamp=(int)(System.currentTimeMillis() / 1000);    header.expires=0;    for (i=0; i < keys.length; i++) {      header.body_len+=4 + keys[i].getBytes(ClientGlobal.g_charset).length;    }    bsPackage=new byte[ProtoCommon.FDHT_PROTO_PKG_HEADER_SIZE + header.body_len];    ProtoCommon.packHeader(header,bsPackage);    offset=objInfo.pack(bsPackage,ProtoCommon.FDHT_PROTO_PKG_HEADER_SIZE);    ProtoCommon.int2buff(keys.length,bsPackage,offset);    offset+=4;    for (i=0; i < keys.length; i++) {      bsKey=keys[i].getBytes(ClientGlobal.g_charset);      ProtoCommon.int2buff(bsKey.length,bsPackage,offset);      offset+=4;      System.arraycopy(bsKey,0,bsPackage,offset,bsKey.length);      offset+=bsKey.length;    }    OutputStream out=server.sock.getOutputStream();    out.write(bsPackage);    ProtoCommon.PkgInfo pkgInfo=ProtoCommon.recvPackage(server.sock.getInputStream(),ProtoCommon.FDHT_PROTO_CMD_RESP,-1);    return this.parseBatchUpdate(keys.length,server,pkgInfo,failKeys);  } catch (  IOException ex) {    System.err.println("server " + server.address.getAddress().getHostAddress() + ":"+ server.address.getPort()+ " IOException, error msg: "+ ex.getMessage());    this.serverGroup.forceClose(server);    this.status=5;    return -1 * this.status;  } finally {    this.serverGroup.closeServer(server);  }}  }
class C{  private void drawNodeLabels(Graphics2D gc,List<Node> drawableNodeLabels){{    boolean scaleHasChanged=(oldXScale != trans.getScaleX() || oldYScale != trans.getScaleY());    if (scaleHasChanged) {      oldXScale=trans.getScaleX();      oldYScale=trans.getScaleY();      for (      Node v : drawableNodeLabels) {        if (v == getTree().getRoot())         setLabelLayout(v,ViewBase.WEST); else         if (v.getOutDegree() == 0) {          setLabelLayout(v,ViewBase.EAST);        } else         if (v.getInDegree() == 1 && v.getOutDegree() == 1) {          setLabelLayout(v,ViewBase.NORTH);        } else {          setLabelLayout(v,ViewBase.NORTHWEST);        }      }    }    List<Pair<Node,Node>> pairs=new LinkedList<>();    for (    Node v : drawableNodeLabels) {      if (getNV(v) == null || !getNV(v).isLabelVisible())       continue;      final Rectangle box=getNV(v).getLabelRect(trans);      if (box != null) {        for (        Node w : drawableNodeLabels) {          if (w == v)           break;          try {            if (getGraph().getOutDegree(v) > 0 || getGraph().getOutDegree(w) > 0) {              final Rectangle rect=getNV(w).getLabelRect(trans);              if (rect != null && box.intersects(rect))               pairs.add(new Pair<>(v,w));            }          } catch (          Exception ex) {          }        }      }    }    final Random random=new Random(26660);    for (int run=0; run < 20; run++) {      boolean changed=false;      for (Iterator it=Basic.randomize(pairs.iterator(),random); it.hasNext(); ) {        Pair pair=(Pair)it.next();        Node v=(Node)pair.getFirst();        Node w=(Node)pair.getSecond();        Rectangle rv=getNV(v).getLabelRect(trans);        Rectangle rw=getNV(w).getLabelRect(trans);        if (rv != null && rw != null && rv.intersects(rw)) {          Point pv=getNV(v).getLabelPosition(trans);          Point pw=getNV(w).getLabelPosition(trans);          if (pv == null || pw == null)           continue;          if (rv.x <= rw.x) {            pv.x-=Math.max(1,rv.height / 3);            pw.x+=Math.max(1,rw.height / 3);          } else {            pv.x+=Math.max(1,rv.height / 3);            pw.x-=Math.max(1,rw.height / 3);          }          if (rv.y <= rw.y) {            pv.y-=Math.max(1,rv.height / 3);            pw.y+=Math.max(1,rw.height / 3);          } else {            pv.y+=Math.max(1,rv.height / 3);            pw.y-=Math.max(1,rw.height / 3);          }          if (getGraph().getOutDegree(v) > 0) {            getNV(v).setLabelPosition(pv.x,pv.y,trans);            changed=true;          }          if (getGraph().getOutDegree(w) > 0) {            getNV(w).setLabelPosition(pw.x,pw.y,trans);            changed=true;          }        }      }      if (!changed)       break;    }  }  for (  Node v : drawableNodeLabels) {    if (getSelected(v)) {      nodeDrawer.drawLabel(v,true);    } else     getNV(v).drawLabel(gc,trans,getFont());  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_GET_COIN_MULTI_IDARENA(int num1,String value0s){  return new SM_SYSTEM_MESSAGE(1400937,num1,value0s);}  }
class C{  @Override protected void checkProperty(String propertyId) throws XMLConfigurationException {  if (propertyId.startsWith(Constants.XERCES_PROPERTY_PREFIX)) {    final int suffixLength=propertyId.length() - Constants.XERCES_PROPERTY_PREFIX.length();    if (suffixLength == Constants.DTD_SCANNER_PROPERTY.length() && propertyId.endsWith(Constants.DTD_SCANNER_PROPERTY)) {      return;    }  }  if (propertyId.startsWith(Constants.SAX_PROPERTY_PREFIX)) {    final int suffixLength=propertyId.length() - Constants.SAX_PROPERTY_PREFIX.length();    if (suffixLength == Constants.XML_STRING_PROPERTY.length() && propertyId.endsWith(Constants.XML_STRING_PROPERTY)) {      short type=XMLConfigurationException.NOT_SUPPORTED;      throw new XMLConfigurationException(type,propertyId);    }  }  super.checkProperty(propertyId);}  }
class C{  private void mergeInner(Interval interval){  Interval previous=peekLast();  LinkedList<Interval> buffer=new LinkedList<>();  while (previous != null && interval.getStart().isBefore(previous.getStart())) {    buffer.addFirst(previous);    removeLast();    previous=peekLast();  }  appendWithMerge(interval);  buffer.stream().forEach(null);}  }
class C{  public static byte[] decodeFromFile(String filename) throws java.io.IOException {  byte[] decodedData=null;  InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=null;    int length=0;    int numBytes=0;    if (file.length() > Integer.MAX_VALUE) {      throw new java.io.IOException("File is too big for this convenience method (" + file.length() + " bytes).");    }    buffer=new byte[(int)file.length()];    bis=new InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.DECODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    decodedData=new byte[length];    System.arraycopy(buffer,0,decodedData,0,length);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return decodedData;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Spin_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200591,skillcaster,skillname);}  }
class C{  public String toString(){  return "ConnectionAbsoluteTime[" + time + "]";}  }
class C{  public static final String roll(String isoString,int field,boolean up) throws ParseException {  return roll(isoString,DATETIME_PATTERN,field,up);}  }
class C{  private boolean parseEscapedField(int fieldUpto) throws ParseException {  int fieldStart=bufferUpto;  int writeTo=bufferUpto;  bufferUpto++;  while (bufferUpto < bytes.length) {    byte b=bytes[bufferUpto++];    if (b == DOUBLE_QUOTE) {      if (bufferUpto == bytes.length) {        return false;      }      if (bytes[bufferUpto] == DOUBLE_QUOTE) {        bytes[writeTo++]=DOUBLE_QUOTE;        bufferUpto++;      } else {        if (bufferUpto == bytes.length) {          return false;        }        if (bytes[bufferUpto] == delimChar) {          bufferUpto++;        } else         if (bytes[bufferUpto] != NEWLINE) {          throw new IllegalArgumentException("doc at offset " + lastDocStart + ": closing quote must appear only at the end of the cell");        }        addOneField(fieldUpto,fieldStart,writeTo - fieldStart);        return true;      }    } else {      bytes[writeTo++]=b;    }  }  return false;}  }
class C{  public void endDocument() throws SAXException {  writeText4Links();  write('\n');  super.endDocument();  try {    flush();  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  void updateInstalledState(){  Module module=getModule();  boolean isInstalled=getBuildSystemOperations(module.getProject()).isServiceInstalled(module,getMetadata());  getContext().installed().set(isInstalled);}  }
class C{  public static byte[] decode(byte[] source) throws Base64DecoderException {  return decode(source,0,source.length);}  }
class C{  public static boolean putInt(Context context,String key,int value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putInt(key,value);  return editor.commit();}  }
class C{  private boolean isOptionEmpty(Object opt){  boolean empty=false;  if (opt instanceof Option1AType) {    Option1AType opt1A=(Option1AType)opt;    empty=opt1A.getTrack1() == null && opt1A.getTrack2() == null && opt1A.getTrack3() == null;  } else   if (opt instanceof Option2Type) {    Option2Type opt2=(Option2Type)opt;    empty=opt2.getTrack1() == null && opt2.getTrack2() == null && opt2.getTrack3() == null && opt2.getTrack4() == null && opt2.getTrack5() == null && opt2.getTrack6() == null && opt2.getTrack7() == null && opt2.getTrack8() == null;  } else   if (opt instanceof Option3Type) {    Option3Type opt3=(Option3Type)opt;    empty=opt3.getTrack1() == null && opt3.getTrack2() == null;  } else   if (opt instanceof Option4Type) {    Option4Type opt4=(Option4Type)opt;    empty=opt4.getTrack1() == null && opt4.getTrack2() == null && opt4.getTrack3() == null && opt4.getTrack4() == null && opt4.getTrack5() == null && opt4.getTrack6() == null && opt4.getTrack7() == null;  } else   if (opt instanceof Option5Type) {    Option5Type opt5=(Option5Type)opt;    empty=opt5.getTrack1() == null && opt5.getTrack2() == null;  } else   if (opt instanceof Option6Type) {    Option6Type opt6=(Option6Type)opt;    empty=opt6.getTrack1() == null;  } else {  }  return empty;}  }
class C{  public void clear(){  clearIntentHistory();  mInitialNavigationType=NAVIGATION_TYPE_NONE;  mIsOnEffectiveRedirectChain=false;  mLastCommittedEntryIndexBeforeStartingNavigation=0;  mShouldNotOverrideUrlLoadingUntilNewUrlLoading=false;}  }
class C{  public Set<Value> mayAliases(Value v,Unit u){  Set<Value> res=new HashSet<Value>();  Set<Set<Value>> flow=getFlowBefore(u);  for (  Set<Value> set : flow) {    if (set.contains(v))     res.addAll(set);  }  return res;}  }
class C{  @Override public void finished(){  QueueFinalizer queueFinalizer=new QueueFinalizer();  queueFinalizer.finalizeQueue(tasks,completionService,executorService);  try {    webDriverRegistry.shutdown();    reportingHandler.endOfSuite();  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();  }}  }
class C{  @Override public void updateValue(String key,int count,String value){  String updatedKey=String.format("%s%s%d",key,DELIMETER,count);  updateValue(updatedKey,value);}  }
class C{  public String providePath(){  return "/blockcanary/";}  }
class C{  private static float computeSimilarity(Lane a,Lane b){  int same=0;  int diff=0;  int firstCoordinate=Math.max(a.getFirstNonGapPosition(),b.getFirstNonGapPosition());  int lastCoordinate=Math.min(a.getLastNonGapPosition(),b.getLastNonGapPosition());  for (int i=firstCoordinate; i <= lastCoordinate; i++) {    char cha=a.charAt(i);    char chb=b.charAt(i);    if (Character.isLetter(cha) && Character.isLetter(chb)) {      if (Character.toLowerCase(cha) == Character.toLowerCase((chb)))       same++; else       diff++;    }  }  return Math.max(same > 0 ? 1 : 0,same - 3 * diff);}  }
class C{  public boolean want(Edge e){  String tgtMethod=e.tgt().toString();  String tgtClass=e.tgt().getDeclaringClass().toString();  String srcMethod=e.src().toString();  String srcClass=e.src().getDeclaringClass().toString();  if (tgtClass.startsWith("sun."))   return false;  if (tgtClass.startsWith("com.sun."))   return false;  if (tgtMethod.endsWith("void <clinit>()>"))   return false;  if ((tgtClass.startsWith("java.") || tgtClass.startsWith("javax.")) && e.tgt().toString().endsWith("boolean equals(java.lang.Object)>"))   return false;  if (tgtClass.startsWith("java.util") || srcClass.startsWith("java.util"))   return false;  if (tgtClass.startsWith("java.lang") || srcClass.startsWith("java.lang"))   return false;  if (tgtClass.startsWith("java"))   return false;  if (e.tgt().isSynchronized())   return false;  if (tns != null) {    Iterator<CriticalSection> tnIt=tns.iterator();    while (tnIt.hasNext()) {      CriticalSection tn=tnIt.next();      if (tn != exemptTn && tn.units.contains(e.srcStmt())) {        return false;      }    }  }  return true;}  }
class C{  public void absolutize(URI p_base){  if (m_path.length() == 0 && m_scheme == null && m_host == null && m_regAuthority == null) {    m_scheme=p_base.getScheme();    m_userinfo=p_base.getUserinfo();    m_host=p_base.getHost();    m_port=p_base.getPort();    m_regAuthority=p_base.getRegBasedAuthority();    m_path=p_base.getPath();    if (m_queryString == null) {      m_queryString=p_base.getQueryString();      if (m_fragment == null) {        m_fragment=p_base.getFragment();      }    }    return;  }  if (m_scheme == null) {    m_scheme=p_base.getScheme();  } else {    return;  }  if (m_host == null && m_regAuthority == null) {    m_userinfo=p_base.getUserinfo();    m_host=p_base.getHost();    m_port=p_base.getPort();    m_regAuthority=p_base.getRegBasedAuthority();  } else {    return;  }  if (m_path.length() > 0 && m_path.startsWith("/")) {    return;  }  String path="";  String basePath=p_base.getPath();  if (basePath != null && basePath.length() > 0) {    int lastSlash=basePath.lastIndexOf('/');    if (lastSlash != -1) {      path=basePath.substring(0,lastSlash + 1);    }  } else   if (m_path.length() > 0) {    path="/";  }  path=path.concat(m_path);  int index=-1;  while ((index=path.indexOf("/./")) != -1) {    path=path.substring(0,index + 1).concat(path.substring(index + 3));  }  if (path.endsWith("/.")) {    path=path.substring(0,path.length() - 1);  }  index=1;  int segIndex=-1;  String tempString=null;  while ((index=path.indexOf("/../",index)) > 0) {    tempString=path.substring(0,path.indexOf("/../"));    segIndex=tempString.lastIndexOf('/');    if (segIndex != -1) {      if (!tempString.substring(segIndex).equals("..")) {        path=path.substring(0,segIndex + 1).concat(path.substring(index + 4));        index=segIndex;      } else {        index+=4;      }    } else {      index+=4;    }  }  if (path.endsWith("/..")) {    tempString=path.substring(0,path.length() - 3);    segIndex=tempString.lastIndexOf('/');    if (segIndex != -1) {      path=path.substring(0,segIndex + 1);    }  }  m_path=path;}  }
class C{  public void updateEnableState(){  applyAction.setEnabled(true);}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  @Override public JavaDStream<DataSet> createStream(){  JavaPairInputDStream<String,String> messages=KafkaUtils.createStream(jssc,zkHost,"canova",Collections.singletonMap(kafkaTopic,kafkaPartitions));  JavaDStream<DataSet> dataset=messages.flatMap(new DataSetFlatmap(numLabels,recordToDataSetFunction)).cache();  return dataset;}  }
class C{  private void updateScroll(final float yScrolled){  if (yScrolled == 0) {    return;  }  mTargetOffset+=yScrolled;  if (STATUS.isRefreshStatus(mStatus)) {    mHeaderOffset=mTargetOffset;    mFooterOffset=0;  } else   if (STATUS.isLoadMoreStatus(mStatus)) {    mFooterOffset=mTargetOffset;    mHeaderOffset=0;  }  if (mDebug) {    Log.i(TAG,"mTargetOffset = " + mTargetOffset);  }  layoutChildren();  invalidate();}  }
class C{  private void update(DataApprovalLevel dataApprovalLevel,int index){  dataApprovalLevel.setLevel(index + 1);  dataApprovalLevelStore.update(dataApprovalLevel);}  }
class C{  private static int compareInt(final int a,final int b){  int result=0;  if (a > b) {    result=1;  } else   if (a < b) {    result=-1;  }  return result;}  }
class C{  public static BaseResource from(IResource resource,LocalResourceStatus localResourceStatus){  if (SVNNodeKind.FILE.equals(localResourceStatus.getNodeKind())) {    return new BaseFile(resource,localResourceStatus);  } else {    return new BaseFolder(resource,localResourceStatus);  }}  }
class C{  public FileAlterationObserver(File directory,FileFilter fileFilter,IOCase caseSensitivity){  this(new FileEntry(directory),fileFilter,caseSensitivity);}  }
class C{  public static Polynomial mean(Polynomial[] p){  int order=p[0].getOrder();  double[] meanCoeffs=new double[order + 1];  for (int k=0; k <= order; k++) {    for (int i=0; i < p.length; i++) {      meanCoeffs[k]+=p[i].coeffs[k];    }    meanCoeffs[k]/=p.length;  }  return new Polynomial(meanCoeffs);}  }
class C{  void reset(){  myParserCount=0;  myParserFiles=null;  myLayoutName=null;  myLayoutEmbeddedParser=null;}  }
class C{  @Override public void connect(SLDEditorFileInterface editorFile){  reset();  this.editorFileInterface=editorFile;  if (editorFileInterface != null) {    this.dataSourceProperties=editorFile.getDataSource();    if (this.dataSourceProperties != null) {      createExampleDataSource();      createUserLayerDataSources();      if (this.dataSourceProperties.isEmpty()) {        openWithoutDataSource();      } else {        openExternalDataSource();      }    }  }}  }
class C{  public AudioGetAlbumsQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  static final LinkedVertexHull mergeHulls(LinkedVertexHull left,LinkedVertexHull right){  LinkedVertexHull hull=new LinkedVertexHull();  hull.leftMost=left.leftMost;  hull.rightMost=right.rightMost;  LinkedVertex lu=left.rightMost;  LinkedVertex ru=right.leftMost;  Vector2 upper=lu.point.to(ru.point);  for (int i=0; i < left.size * right.size; i++) {    Vector2 lv=lu.point.to(lu.next.point);    Vector2 rv=ru.point.to(ru.prev.point);    double crossR=rv.cross(upper);    double crossL=upper.getNegative().cross(lv);    if (crossR > 0.0 && crossL > 0.0) {      break;    }    if (crossR <= 0.0) {      ru=ru.prev;    }    if (crossL <= 0.0) {      lu=lu.next;    }    upper=lu.point.to(ru.point);  }  LinkedVertex ll=left.rightMost;  LinkedVertex rl=right.leftMost;  Vector2 lower=ll.point.to(rl.point);  for (int i=0; i < left.size * right.size; i++) {    Vector2 lv=ll.point.to(ll.prev.point);    Vector2 rv=rl.point.to(rl.next.point);    double crossR=lower.cross(rv);    double crossL=lv.cross(lower.getNegative());    if (crossR > 0.0 && crossL > 0.0) {      break;    }    if (crossR <= 0.0) {      rl=rl.next;    }    if (crossL <= 0.0) {      ll=ll.prev;    }    lower=ll.point.to(rl.point);  }  lu.prev=ru;  ru.next=lu;  ll.next=rl;  rl.prev=ll;  hull.root=lu;  LinkedVertex v0=hull.root;  LinkedVertex v=v0;  int size=0;  do {    size++;    v=v.next;  } while (v != v0);  hull.size=size;  return hull;}  }
class C{  private void tokenToWords(String tokenVal){  FeatureSet tokenFeatures=tokenItem.getFeatures();  String itemName=tokenFeatures.getString("name");  int tokenLength=tokenVal.length();  if (tokenFeatures.isPresent("phones")) {    wordRelation.addWord(tokenVal);  } else   if ((tokenVal.equals("a") || tokenVal.equals("A")) && ((tokenItem.getNext() == null) || !(tokenVal.equals(itemName)) || !(tokenItem.findFeature("punc").equals("")))) {    wordRelation.addWord("_a");  } else   if (matches(alphabetPattern,tokenVal)) {    if (matches(romanNumbersPattern,tokenVal)) {      romanToWords(tokenVal);    } else     if (matches(illionPattern,tokenVal) && matches(usMoneyPattern,(String)tokenItem.findFeature("p.name"))) {      wordRelation.addWord(tokenVal);      wordRelation.addWord("dollars");    } else     if (matches(drStPattern,tokenVal)) {      drStToWords(tokenVal);    } else     if (tokenVal.equals("Mr")) {      tokenItem.getFeatures().setString("punc","");      wordRelation.addWord("mister");    } else     if (tokenVal.equals("Mrs")) {      tokenItem.getFeatures().setString("punc","");      wordRelation.addWord("missus");    } else     if (tokenLength == 1 && isUppercaseLetter(tokenVal.charAt(0)) && tokenItem.findFeature("n.whitespace").equals(" ") && isUppercaseLetter(((String)tokenItem.findFeature("n.name")).charAt(0))) {      tokenFeatures.setString("punc","");      String aaa=tokenVal.toLowerCase();      if (aaa.equals("a")) {        wordRelation.addWord("_a");      } else {        wordRelation.addWord(aaa);      }    } else     if (isStateName(tokenVal)) {    } else     if (tokenLength > 1 && !isPronounceable(tokenVal)) {      NumberExpander.expandLetters(tokenVal,wordRelation);    } else {      wordRelation.addWord(tokenVal.toLowerCase());    }  } else   if (matches(dottedAbbrevPattern,tokenVal)) {    String aaa=Utilities.deleteChar(tokenVal,'.');    NumberExpander.expandLetters(aaa,wordRelation);  } else   if (matches(commaIntPattern,tokenVal)) {    String aaa=Utilities.deleteChar(tokenVal,',');    NumberExpander.expandReal(aaa,wordRelation);  } else   if (matches(sevenPhoneNumberPattern,tokenVal)) {    int dashIndex=tokenVal.indexOf('-');    String aaa=tokenVal.substring(0,dashIndex);    String bbb=tokenVal.substring(dashIndex + 1);    NumberExpander.expandDigits(aaa,wordRelation);    wordRelation.addBreak();    NumberExpander.expandDigits(bbb,wordRelation);  } else   if (matchesPartPhoneNumber(tokenVal)) {    String punctuation=(String)tokenItem.findFeature("punc");    if (punctuation.equals("")) {      tokenItem.getFeatures().setString("punc",",");    }    NumberExpander.expandDigits(tokenVal,wordRelation);    wordRelation.addBreak();  } else   if (matches(numberTimePattern,tokenVal)) {    int colonIndex=tokenVal.indexOf(':');    String aaa=tokenVal.substring(0,colonIndex);    String bbb=tokenVal.substring(colonIndex + 1);    NumberExpander.expandNumber(aaa,wordRelation);    if (!(bbb.equals("00"))) {      NumberExpander.expandID(bbb,wordRelation);    }  } else   if (matches(digits2DashPattern,tokenVal)) {    digitsDashToWords(tokenVal);  } else   if (matches(digitsPattern,tokenVal)) {    digitsToWords(tokenVal);  } else   if (tokenLength == 1 && isUppercaseLetter(tokenVal.charAt(0)) && tokenItem.findFeature("n.whitespace").equals(" ") && isUppercaseLetter(((String)tokenItem.findFeature("n.name")).charAt(0))) {    tokenFeatures.setString("punc","");    String aaa=tokenVal.toLowerCase();    if (aaa.equals("a")) {      wordRelation.addWord("_a");    } else {      wordRelation.addWord(aaa);    }  } else   if (matches(doublePattern,tokenVal)) {    NumberExpander.expandReal(tokenVal,wordRelation);  } else   if (matches(ordinalPattern,tokenVal)) {    String aaa=tokenVal.substring(0,tokenLength - 2);    NumberExpander.expandOrdinal(aaa,wordRelation);  } else   if (matches(usMoneyPattern,tokenVal)) {    usMoneyToWords(tokenVal);  } else   if (tokenLength > 0 && tokenVal.charAt(tokenLength - 1) == '%') {    tokenToWords(tokenVal.substring(0,tokenLength - 1));    wordRelation.addWord("per");    wordRelation.addWord("cent");  } else   if (matches(numessPattern,tokenVal)) {    tokenToWords(tokenVal.substring(0,tokenLength - 1));    wordRelation.addWord("'s");  } else   if (tokenVal.indexOf('\'') != -1) {    postropheToWords(tokenVal);  } else   if (matches(digitsSlashDigitsPattern,tokenVal) && tokenVal.equals(itemName)) {    digitsSlashDigitsToWords(tokenVal);  } else   if (tokenVal.indexOf('-') != -1) {    dashToWords(tokenVal);  } else   if (tokenLength > 1 && !matches(alphabetPattern,tokenVal)) {    notJustAlphasToWords(tokenVal);  } else {    wordRelation.addWord(tokenVal.toLowerCase());  }}  }
class C{  @Override public void build(@NotNull AndroidGradleBuildTarget target,@NotNull DirtyFilesHolder<AndroidGradleBuildTarget.RootDescriptor,AndroidGradleBuildTarget> holder,@NotNull BuildOutputConsumer outputConsumer,@NotNull CompileContext context) throws ProjectBuildException, IOException {  JpsProject project=target.getProject();  checkUnsupportedModules(project,context);  BuilderExecutionSettings executionSettings;  try {    executionSettings=new BuilderExecutionSettings();  } catch (  RuntimeException e) {    throw new ProjectBuildException(e);  }  LOG.info("Using execution settings: " + executionSettings);  List<String> buildTasks=executionSettings.getGradleTasksToInvoke();  if (buildTasks.isEmpty()) {    String format="No build tasks found for project '%1$s'. Nothing done.";    LOG.info(String.format(format,project.getName()));    return;  }  context.processMessage(AndroidGradleJps.createCompilerMessage(BuildMessage.Kind.INFO,"Executing tasks: " + buildTasks));  String msg="Gradle build using tasks: " + buildTasks;  context.processMessage(new ProgressMessage(msg));  LOG.info(msg);  ensureTempDirExists();  String androidHome=null;  if (!AndroidGradleSettings.isAndroidSdkDirInLocalPropertiesFile(executionSettings.getProjectDir())) {    androidHome=getAndroidHomeFromModuleSdk(project);  }  String format="About to build project '%1$s' located at %2$s";  LOG.info(String.format(format,project.getName(),executionSettings.getProjectDir().getAbsolutePath()));  doBuild(context,buildTasks,executionSettings,androidHome);}  }
class C{  public void switchToNextTab(){  switchToTab(1);}  }
class C{  private String featureNameFromGTFAttribute(String attributeName){  String xname=this.name;  if (attributeName != null) {    xname=this.getAttribute(attributeName);    if (xname == null) {      xname=".";    }  } else   if (this.getAttribute("Name") != null) {    xname=this.getAttribute("Name");  } else   if (this.getAttribute("ID") != null) {    xname=this.getAttribute("ID");  } else   if (this.getAttribute("transcript_name") != null) {    xname=this.getAttribute("transcript_name");  } else   if (this.getAttribute("transcript_id") != null) {    xname=this.getAttribute("transcript_id");  } else   if (this.getAttribute("gene_name") != null) {    xname=this.getAttribute("gene_name");  } else   if (this.getAttribute("gene_id") != null) {    xname=this.getAttribute("gene_id");  } else {  }  return xname;}  }
class C{  private static void drawShadowedArrow(Graphics2D g,ColorSet colorSet,Polygon arrow,int x,int y){  Color pre=g.getColor();  Stroke s=g.getStroke();  if (colorSet.getStyle() == WidgetDecorator.BLUEPRINT_STYLE) {    g.setPaint(colorSet.getBackgroundPaint());    g.setStroke(sLineShadowStroke);  } else {    g.setColor(sShadowColor);    g.setStroke(sShadowStroke);  }  ConnectionDraw.drawArrow(g,arrow,x,y);  g.setColor(pre);  g.setStroke(s);  ConnectionDraw.drawArrow(g,arrow,x,y);}  }
class C{  private static byte[] encode3to4(byte[] b4,byte[] threeBytes,int numSigBytes,int options){  encode3to4(threeBytes,0,numSigBytes,b4,0,options);  return b4;}  }
class C{  protected void mouseClicked(int mouseX,int mouseY,int mouseButton) throws IOException {  super.mouseClicked(mouseX,mouseY,mouseButton);  for (  GuiTextField gtf : this.fields)   gtf.mouseClicked(mouseX,mouseY,mouseButton);}  }
class C{  public Vector3D toVector3D(){  return new Vector3D(x.getReal(),y.getReal(),z.getReal());}  }
class C{  public NativeInitializationController(Context context,ChromeActivityNativeDelegate activityDelegate){  mContext=context.getApplicationContext();  mHandler=new Handler(Looper.getMainLooper());  mActivityDelegate=activityDelegate;}  }
class C{  private void waitForCurrentAssetExtractionToFinish(Asset asset) throws InterruptedException {  int retry=1;  int maxRetry=5;  List<AssetExtraction> runningAssetExtractions=assetExtractionRepository.findByAssetAndPollableTaskIsNotNullAndPollableTaskFinishedDateIsNull(asset);  while (!runningAssetExtractions.isEmpty()) {    if (retry <= maxRetry) {      Thread.sleep(retry * 1000);      retry++;      runningAssetExtractions=assetExtractionRepository.findByAssetAndPollableTaskIsNotNullAndPollableTaskFinishedDateIsNull(asset);    } else {      throw new AssetExtractionConflictException("Retry exhausted while waiting for an existing asset extraction for asset " + asset.getId() + " to finish.");    }  }}  }
class C{  public boolean run(String allowed,String option){  if (!hasOption(option)) {    return true;  }  String selection=getOptionValue(option);  String[] selectionList=selection.split(",");  for (  String selectionItem : selectionList) {    if (selectionItem.equals(allowed)) {      return true;    }  }  return false;}  }
class C{  @Deprecated public void onFailure(Throwable error){}  }
class C{  private void writeAmplification(ByteBuffer buf){  Item item=ownerItem;  writeC(buf,item.isAmplified() ? 1 : 0);  writeH(buf,item.getBuffSkill());  writeC(buf,0);}  }
class C{  private static short byteswap(short val){  return ((short)((((val) & 0xff00) >>> 8) + (((val) & 0x00ff) << 8)));}  }
class C{  private void initSpringSecurity(ServletContext servletContext,EnumSet<DispatcherType> disps){  log.debug("Registering Spring Security Filter");  FilterRegistration.Dynamic springSecurityFilter=servletContext.addFilter("springSecurityFilterChain",new DelegatingFilterProxy());  springSecurityFilter.addMappingForUrlPatterns(disps,false,"/*");}  }
class C{  protected void scavenge(){  if (isStopping() || isStopped())   return;  Thread thread=Thread.currentThread();  ClassLoader origClassLoader=thread.getContextClassLoader();  _scavengeCount++;  try {    if (_loader != null)     thread.setContextClassLoader(_loader);    long now=System.currentTimeMillis();    if (Log.isDebugEnabled())     Log.debug("Scavenging old sessions, expiring before: " + (now));    Object[] expiredSessions;    do {      expiredSessions=findExpiredSessions((now));      for (int i=0; i < expiredSessions.length; i++) {        if (Log.isDebugEnabled())         Log.debug("Timing out expired session " + expiredSessions[i]);        GigaSessionManager.Session expiredSession=new GigaSessionManager.Session(GigaSessionManager.this,(SessionData)expiredSessions[i]);        expiredSession.timeout();        if (Log.isDebugEnabled())         Log.debug("Expiring old session " + expiredSession._data);      }    } while (expiredSessions.length > 0);    lastSessionCount=-1;  } catch (  Throwable t) {    if (t instanceof ThreadDeath)     throw ((ThreadDeath)t);    Log.warn("Problem scavenging sessions",t);  } finally {    thread.setContextClassLoader(origClassLoader);  }}  }
class C{  public Builder withDefaultRange(Range<Integer> versionRange){  Preconditions.checkNotNull(versionRange);  defaultVersionRange=versionRange;  return this;}  }
class C{  protected void onStop(){  setActiveForm(null);}  }
class C{  public CmpgExpr newCmpgExpr(Value op1,Value op2){  return new JCmpgExpr(op1,op2);}  }
class C{  public void sendToFilterModuleByDynamicTimedeadbandFilterer(final SourceDataTag currentSourceDataTag,final ValueUpdate update,final int filterType){  doSendToFilterModule(currentSourceDataTag,update,new SourceDataTagQuality(),true,filterType);}  }
class C{  private void addOrDeleteBoundaries(Document doc){  NodeIterator it=((DocumentTraversal)doc).createNodeIterator(doc,NodeFilter.SHOW_ELEMENT,new NameNodeFilter(MaryXML.BOUNDARY),false);  Element boundary=null;  List bi1prosodyElements=null;  while ((boundary=(Element)it.nextNode()) != null) {    int minBI=3;    Element prosody=(Element)DomUtils.getAncestor(boundary,MaryXML.PROSODY);    if (prosody != null) {      ProsodicSettings settings=(ProsodicSettings)prosodyMap.get(prosody);      assert settings != null;      int rate=settings.rate();      int numberOfPauses=settings.numberOfPauses();      if (numberOfPauses <= 50)       minBI=5; else       if (numberOfPauses <= 75)       minBI=4; else       if (numberOfPauses > 150)       minBI=1; else       if (numberOfPauses > 125)       minBI=2;      if (rate < 90 && minBI > 1)       minBI--;      if (minBI == 1) {        if (bi1prosodyElements == null)         bi1prosodyElements=new ArrayList();        bi1prosodyElements.add(prosody);      }    }    int bi=3;    try {      bi=Integer.parseInt(boundary.getAttribute("breakindex"));    } catch (    NumberFormatException e) {      Log.i(Mary.LOG,"Unexpected breakindex value `" + boundary.getAttribute("breakindex") + "', assuming "+ bi);    }    if (bi < minBI && !boundary.hasAttribute("duration")) {      boundary.setAttribute("duration","0");    }  }  if (bi1prosodyElements != null) {    Iterator elIt=bi1prosodyElements.iterator();    while (elIt.hasNext()) {      Element prosody=(Element)elIt.next();      NodeIterator nodeIt=((DocumentTraversal)doc).createNodeIterator(prosody,NodeFilter.SHOW_ELEMENT,new NameNodeFilter(MaryXML.TOKEN,MaryXML.BOUNDARY),false);      Element el=null;      Element prevEl=null;      while ((el=(Element)nodeIt.nextNode()) != null) {        if (el.getTagName().equals(MaryXML.TOKEN) && prevEl != null && prevEl.getTagName().equals(MaryXML.TOKEN)) {          Element newBoundary=MaryXML.createElement(doc,MaryXML.BOUNDARY);          newBoundary.setAttribute("breakindex","1");          el.getParentNode().insertBefore(newBoundary,el);        }        prevEl=el;      }    }  }}  }
class C{  public static Zmat bahi(Zmat B,Zmat A) throws JampackException {  Zludpp LU;  A.getProperties();  B.getProperties();  if (A.nr != A.nc)   throw new JampackException("Rectangular matrix.");  if (A.nr != B.nc)   throw new JampackException("Inconsistent dimensions.");  if (Parameters.History) {    A.clean();    if (A.LU == null)     A.LU=new Zludpp(A);    LU=A.LU;  } else   LU=new Zludpp(A);  return H.o(Solve.aib(A,H.o(B)));}  }
class C{  private void initFilter(ReplicationFilterWrapper filterHolder,String url) throws SpaceComponentsInitializeException {  try {    filterHolder.init(_space,url,_replicationPolicy);  } catch (  RuntimeException re) {    if (_shutdownSpaceOnInitFailure) {      throw new SpaceComponentsInitializeException("Failed to initialize replication filter - " + filterHolder.getClassName(),re);    }  }}  }
class C{  public boolean verify(byte[] hash,byte[] signature){  return crypto.verify(hash,signature,pub);}  }
class C{  public boolean isBorder(){  return border;}  }
class C{  public UsersGetSubscriptionsQueryWithExtended offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  protected void onSlideAnimationEnd(){}  }
class C{  public String typeName(){  return "interfacemethodref";}  }
class C{  protected void readRasterConfigFile(VendorOptionFactoryInterface vendorOptionFactory,UpdateSymbolInterface parent,String filename){  internal_readConfigFile(vendorOptionFactory,parent.getClass(),parent,filename,true,true);}  }
class C{  private static float spacing(MotionEvent event){  float x=event.getX(0) - event.getX(1);  float y=event.getY(0) - event.getY(1);  return (float)Math.sqrt(x * x + y * y);}  }
class C{  public static boolean isGeneralPunctuation(char c){  return isRange(c,'\u2000','\u206F');}  }
class C{  public static Map<String,Object> prodFindFeatureTypes(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  String productId=(String)context.get("productId");  String productFeatureApplTypeId=(String)context.get("productFeatureApplTypeId");  if (UtilValidate.isEmpty(productFeatureApplTypeId)) {    productFeatureApplTypeId="SELECTABLE_FEATURE";  }  Locale locale=(Locale)context.get("locale");  String errMsg=null;  Set<String> featureSet=new LinkedHashSet<String>();  try {    List<GenericValue> features=EntityQuery.use(delegator).from("ProductFeatureAndAppl").where("productId",productId,"productFeatureApplTypeId",productFeatureApplTypeId).orderBy("sequenceNum","productFeatureTypeId").cache(true).filterByDate().queryList();    for (    GenericValue v : features) {      featureSet.add(v.getString("productFeatureTypeId"));    }  } catch (  GenericEntityException e) {    Map<String,String> messageMap=UtilMisc.toMap("errProductFeatures",e.toString());    errMsg=UtilProperties.getMessage(resourceError,"productservices.problem_reading_product_features_errors",messageMap,locale);    Debug.logError(e,errMsg,module);    return ServiceUtil.returnError(errMsg);  }  if (featureSet.size() == 0) {    String emptyAction=(String)context.get("emptyAction");    if (!"success".equals(emptyAction)) {      errMsg=UtilProperties.getMessage(resourceError,"productservices.problem_reading_product_features",locale);      if ("fail".equals(emptyAction)) {        return ServiceUtil.returnFailure(errMsg);      } else       if ("error".equals(emptyAction)) {        Debug.logError(errMsg + " for product " + productId,module);        return ServiceUtil.returnError(errMsg);      } else {        Debug.logWarning(errMsg + " for product " + productId,module);      }    }  }  Map<String,Object> result=ServiceUtil.returnSuccess();  result.put("featureSet",featureSet);  return result;}  }
class C{  public URI(URI p_other){  initialize(p_other);}  }
class C{  public static IOFileFilter magicNumberFileFilter(byte[] magicNumber,long offset){  return new MagicNumberFileFilter(magicNumber,offset);}  }
class C{  public float distanceSquared(Vector2f v){  double dx=x - v.x;  double dy=y - v.y;  return (float)(dx * dx + dy * dy);}  }
class C{  @Override public void endDocument(Augmentations augs) throws XNIException {  try {    if (fDocumentHandler != null) {      fDocumentHandler.endDocument();    }    if (fContentHandler != null) {      fContentHandler.endDocument();    }  } catch (  SAXException e) {    throw new XNIException(e);  }}  }
class C{  public ValidationException(Object concerned,String strCompatibilityMessage){  this(concerned,strCompatibilityMessage,strCompatibilityMessage,false);}  }
class C{  public Param(String name,String desc,Type type,Object defaultValue){  this.name=name;  this.desc=desc;  this.type=type;  this.defaultValue=defaultValue;  if (defaultValue != null) {    type.validate(defaultValue);  }}  }
class C{  protected void buildMetricMakers(MetricDictionary metricDictionary){  longSumMaker=new LongSumMaker(metricDictionary);  sketchCountMaker=new SketchCountMaker(metricDictionary,sketchSize);  productMaker=new ArithmeticMaker(metricDictionary,ArithmeticPostAggregationFunction.MULTIPLY);  simpleDailyAverageMaker=new AggregationAverageMaker(metricDictionary,DAY);  rowNumMaker=new RowNumMaker(metricDictionary);}  }
class C{  private String processUtt(Scanner s,HTSUttModel um,HMMData htsData,CartTreeSet cart) throws Exception {  int i, mstate, frame, k, statesDuration, newStateDuration;  HTSModel m;  String nextLine;  double diffdurOld=0.0;  double diffdurNew=0.0;  float fperiodmillisec=((float)htsData.getFperiod() / (float)htsData.getRate()) * 1000;  float fperiodsec=((float)htsData.getFperiod() / (float)htsData.getRate());  Integer dur;  boolean firstPh=true;  boolean lastPh=false;  Float durSec;  Integer numLab=0;  FeatureVector fv;  FeatureDefinition feaDef=htsData.getFeatureDefinition();  while (s.hasNext()) {    nextLine=s.nextLine();    if (nextLine.trim().equals(""))     break;  }  int numLines=0;  while (s.hasNext()) {    nextLine=s.nextLine();    if (nextLine.trim().equals(""))     break;    numLines++;  }  i=0;  while (s.hasNext()) {    nextLine=s.nextLine();    fv=feaDef.toFeatureVector(0,nextLine);    um.addUttModel(new HTSModel(cart.getNumStates()));    m=um.getUttModel(i);    m.setPhoneName(fv.getFeatureAsString(feaDef.getFeatureIndex("phone"),feaDef));    if (!(s.hasNext()))     lastPh=true;    diffdurNew=cart.searchDurInCartTree(m,fv,htsData,firstPh,lastPh,diffdurOld);    um.setTotalFrame(um.getTotalFrame() + m.getTotalDur());    m.setTotalDurMillisec((int)(fperiodmillisec * m.getTotalDur()));    diffdurOld=diffdurNew;    durSec=um.getTotalFrame() * fperiodsec;    numLab++;    dur=m.getTotalDurMillisec();    um.concatRealisedAcoustParams(m.getPhoneName() + " " + dur.toString()+ "\n");    cart.searchLf0InCartTree(m,fv,feaDef,htsData.getUV());    um.setNumModel(um.getNumModel() + 1);    um.setNumState(um.getNumState() + cart.getNumStates());    i++;    if (firstPh)     firstPh=false;  }  for (i=0; i < um.getNumUttModel(); i++) {    m=um.getUttModel(i);    for (mstate=0; mstate < cart.getNumStates(); mstate++)     for (frame=0; frame < m.getDur(mstate); frame++)     if (m.getVoiced(mstate))     um.setLf0Frame(um.getLf0Frame() + 1);  }  return um.getRealisedAcoustParams();}  }
class C{  public boolean isSelected(){  ClusterViewer viewer=getViewer();  return viewer.getDataType().equalsIgnoreCase("SEED");}  }
class C{  public EqualsSpacePredicate(Object expectedValue,FunctionCallDescription functionCallDescription){  super(expectedValue,functionCallDescription);}  }
class C{  private ISpaceFilterEntry createFilterEntry(Object subject){  ISpaceFilterEntry result;  if (subject == null)   result=null; else   if (subject instanceof ISpaceFilterEntry)   result=(ISpaceFilterEntry)subject; else   if (subject instanceof IEntryPacket) {    IEntryPacket packet=(IEntryPacket)subject;    ITypeDesc typeDesc=packet.getTypeDescriptor();    if (typeDesc == null)     typeDesc=_typeManager.getTypeDesc(packet.getTypeName());    result=new SpaceUpdateFilterEntryImpl(packet,typeDesc);  } else   if (subject instanceof ITemplateHolder) {    ITemplateHolder templateHolder=(ITemplateHolder)subject;    ITypeDesc typeDesc=_typeManager.getTypeDesc(templateHolder.getClassName());    if (!templateHolder.isChange())     result=new SpaceFilterEntryImpl(templateHolder,typeDesc); else {      Collection<SpaceEntryMutator> mutators=templateHolder.getMutators();      if (templateHolder.getAnswerHolder() != null && templateHolder.getAnswerHolder().getAnswerPacket() != null && templateHolder.getAnswerHolder().getAnswerPacket().m_EntryPacket != null) {        IEntryPacket entryPacket=templateHolder.getAnswerHolder().getAnswerPacket().m_EntryPacket;        result=new SpaceAfterChangeFilterEntryImpl(templateHolder,entryPacket,typeDesc,mutators);      } else       result=new SpaceBeforeChangeFilterEntryImpl(templateHolder,typeDesc,mutators);    }  } else   if (subject instanceof IEntryHolder) {    IEntryHolder entryHolder=(IEntryHolder)subject;    ITypeDesc typeDesc=_typeManager.getTypeDesc(entryHolder.getClassName());    result=new SpaceFilterEntryImpl(entryHolder,typeDesc);  } else   if (subject instanceof NotifyContext) {    NotifyContext notifyContext=(NotifyContext)subject;    IEntryHolder entryHolder=notifyContext.getEntry();    ITypeDesc typeDesc=_typeManager.getTypeDesc(entryHolder.getClassName());    result=new NotifyEvent(entryHolder,typeDesc,notifyContext);  } else   if (subject instanceof SpaceTaskWrapper)   result=new ExecutionFilterEntry(((SpaceTaskWrapper)subject).getWrappedTask()); else   result=new ExecutionFilterEntry(subject);  return result;}  }
class C{  public IllegalPluginAccessException(String msg){  super(msg);}  }
class C{  public static void constantAttributes(SimpleMethod method,Element element,String... attributeNames) throws ValidationException {  for (  String name : attributeNames) {    String attributeValue=element.getAttribute(name);    if (!MiniLangUtil.isConstantAttribute(attributeValue)) {      handleError("Constant attribute \"" + name + "\" cannot contain an expression.",method,element);    }  }}  }
class C{  public int append_file(String group_name,String appender_filename,byte[] file_buff) throws IOException, MyException {  return this.do_append_file(group_name,appender_filename,file_buff.length,new UploadBuff(file_buff,0,file_buff.length));}  }
class C{  public static <T>T bkResult(Future<T> result) throws BKException {  try {    return Await.result(result);  } catch (  BKException bke) {    throw bke;  }catch (  InterruptedException ie) {    throw BKException.create(BKException.Code.InterruptedException);  }catch (  Exception e) {    logger.warn("Encountered unexpected exception on waiting bookkeeper results : ",e);    throw BKException.create(BKException.Code.UnexpectedConditionException);  }}  }
class C{  public Item appendItem(Item originalItem){  ItemContents contents;  Item newItem;  if (originalItem == null) {    contents=null;  } else {    contents=originalItem.getSharedContents();  }  newItem=new Item(this,contents);  if (head == null) {    head=newItem;  }  if (tail != null) {    tail.attach(newItem);  }  tail=newItem;  return newItem;}  }
class C{  @Provides @Singleton @GlobalFullConsistencyZooKeeper CuratorFramework provideGlobalFullConsistencyZooKeeperConnection(@Global CuratorFramework curator){  return withComponentNamespace(curator,"fct");}  }
class C{  protected void traverseLocal(XSParticleDecl particle,Element elmDecl,XSDocumentInfo schemaDoc,SchemaGrammar grammar,int allContextFlags,XSObject parent,String[] localNSDecls){  if (localNSDecls != null) {    schemaDoc.fNamespaceSupport.setEffectiveContext(localNSDecls);  }  Object[] attrValues=fAttrChecker.checkAttributes(elmDecl,false,schemaDoc);  QName refAtt=(QName)attrValues[XSAttributeChecker.ATTIDX_REF];  XInt minAtt=(XInt)attrValues[XSAttributeChecker.ATTIDX_MINOCCURS];  XInt maxAtt=(XInt)attrValues[XSAttributeChecker.ATTIDX_MAXOCCURS];  XSElementDecl element=null;  XSAnnotationImpl annotation=null;  if (elmDecl.getAttributeNode(SchemaSymbols.ATT_REF) != null) {    if (refAtt != null) {      element=(XSElementDecl)fSchemaHandler.getGlobalDecl(schemaDoc,XSDHandler.ELEMENT_TYPE,refAtt,elmDecl);      Element child=DOMUtil.getFirstChildElement(elmDecl);      if (child != null && DOMUtil.getLocalName(child).equals(SchemaSymbols.ELT_ANNOTATION)) {        annotation=traverseAnnotationDecl(child,attrValues,false,schemaDoc);        child=DOMUtil.getNextSiblingElement(child);      } else {        String text=DOMUtil.getSyntheticAnnotation(elmDecl);        if (text != null) {          annotation=traverseSyntheticAnnotation(elmDecl,text,attrValues,false,schemaDoc);        }      }      if (child != null) {        reportSchemaError("src-element.2.2",new Object[]{refAtt.rawname,DOMUtil.getLocalName(child)},child);      }    } else {      element=null;    }  } else {    element=traverseNamedElement(elmDecl,attrValues,schemaDoc,grammar,false,parent);  }  particle.fMinOccurs=minAtt.intValue();  particle.fMaxOccurs=maxAtt.intValue();  if (element != null) {    particle.fType=XSParticleDecl.PARTICLE_ELEMENT;    particle.fValue=element;  } else {    particle.fType=XSParticleDecl.PARTICLE_EMPTY;  }  if (refAtt != null) {    XSObjectList annotations;    if (annotation != null) {      annotations=new XSObjectListImpl();      ((XSObjectListImpl)annotations).addXSObject(annotation);    } else {      annotations=XSObjectListImpl.EMPTY_LIST;    }    particle.fAnnotations=annotations;  } else {    particle.fAnnotations=((element != null) ? element.fAnnotations : XSObjectListImpl.EMPTY_LIST);  }  Long defaultVals=(Long)attrValues[XSAttributeChecker.ATTIDX_FROMDEFAULT];  checkOccurrences(particle,SchemaSymbols.ELT_ELEMENT,(Element)elmDecl.getParentNode(),allContextFlags,defaultVals.longValue());  fAttrChecker.returnAttrArray(attrValues,schemaDoc);}  }
class C{  public PhotosGetAlbumsQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public BoundMethodAccess fullCopy(){  BoundMethodAccess tree=(BoundMethodAccess)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  @Override public void element(String elementName,Augmentations augmentations) throws XNIException {}  }
class C{  public DataSourceAttributeData(Name name,Class<?> type,Object value){  super();  this.name=name;  this.type=type;  this.value=value;}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public AudioDoubleDataSource(AudioInputStream ais,boolean isAutomaticClippingControl){  this.ais=ais;  if (ais.getFormat().getChannels() > 1) {    throw new IllegalArgumentException("Can only deal with mono signals");  }  int bitsPerSample=ais.getFormat().getSampleSizeInBits();  if (bitsPerSample != 8 && bitsPerSample != 16 && bitsPerSample != 24) {    throw new IllegalArgumentException("Can deal with sample size 8, 16 or 24, but not " + bitsPerSample);  }  this.bytesPerSample=bitsPerSample / 8;  this.bigEndian=ais.getFormat().isBigEndian();  this.samplingRate=(int)ais.getFormat().getSampleRate();  this.byteBuf=new byte[BYTEBUFFER_LENGTH];  this.hasMoreData=true;  this.scaleInd=-1;  this.bAutomaticClippingControl=isAutomaticClippingControl;  if (bAutomaticClippingControl) {    scales=new double[20];    for (int i=0; i < scales.length; i++)     scales[i]=1.0;  } else   scales=null;}  }
class C{  public static void i(String msg){  if (isDebug) {    Log.i(TAG,msg);  }}  }
class C{  public void java_lang_ClassLoader_defineClass0(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getClassObject());}  }
class C{  private QueryParser(QueryBuilder queryBuilder){  this.queryBuilder=queryBuilder;  registerDefaultAggregates();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelNPCDeBuff_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201258,skillcaster,skillname);}  }
class C{  private String printCFormat(char x){  int nPrint=1;  int width=fieldWidth;  if (!fieldWidthSet)   width=nPrint;  char[] ca=new char[width];  int i=0;  if (leftJustify) {    ca[0]=x;    for (i=1; i <= width - nPrint; i++)     ca[i]=' ';  } else {    for (i=0; i < width - nPrint; i++)     ca[i]=' ';    ca[i]=x;  }  return new String(ca);}  }
class C{  public Dfp divide(int divisor){  if (nans != FINITE) {    if (isNaN()) {      return this;    }    if (nans == INFINITE) {      return newInstance(this);    }  }  if (divisor == 0) {    field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);    Dfp result=newInstance(getZero());    result.sign=sign;    result.nans=INFINITE;    result=dotrap(DfpField.FLAG_DIV_ZERO,DIVIDE_TRAP,getZero(),result);    return result;  }  if (divisor < 0 || divisor >= RADIX) {    field.setIEEEFlagsBits(DfpField.FLAG_INVALID);    Dfp result=newInstance(getZero());    result.nans=QNAN;    result=dotrap(DfpField.FLAG_INVALID,DIVIDE_TRAP,result,result);    return result;  }  Dfp result=newInstance(this);  int rl=0;  for (int i=mant.length - 1; i >= 0; i--) {    final int r=rl * RADIX + result.mant[i];    final int rh=r / divisor;    rl=r - rh * divisor;    result.mant[i]=rh;  }  if (result.mant[mant.length - 1] == 0) {    result.shiftLeft();    final int r=rl * RADIX;    final int rh=r / divisor;    rl=r - rh * divisor;    result.mant[0]=rh;  }  final int excp=result.round(rl * RADIX / divisor);  if (excp != 0) {    result=dotrap(excp,DIVIDE_TRAP,result,result);  }  return result;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ITEM_SEAL_STATUS_UNSEALDONE(String value0){  return new SM_SYSTEM_MESSAGE(1400808,value0);}  }
class C{  public static void writeWritablesToFile(String outputPath,String delim,List<List<Writable>> writables,JavaSparkContext sc) throws IOException {  StringBuilder sb=new StringBuilder();  for (  List<Writable> list : writables) {    boolean first=true;    for (    Writable w : list) {      sb.append(w.toString());      if (!first)       sb.append(delim);      first=false;    }    sb.append("\n");  }  writeStringToFile(outputPath,sb.toString(),sc);}  }
class C{  public static void assertSameMembers(ThrowableSet.Pair p,RefLikeType[] caughtIncluded,AnySubType[] caughtExcluded,RefLikeType[] uncaughtIncluded,AnySubType[] uncaughtExcluded){  assertSameMembers(p.getCaught(),caughtIncluded,caughtExcluded);  assertSameMembers(p.getUncaught(),uncaughtIncluded,uncaughtExcluded);}  }
class C{  @Override public boolean isRunning(){  return running;}  }
class C{  private void writeDictionaryFile() throws IOException {  ColumnDictionaryChunk columnDictionaryChunk=new ColumnDictionaryChunk();  columnDictionaryChunk.setValues(oneDictionaryChunkList);  writeThriftObject(columnDictionaryChunk);}  }
class C{  private Rect calcBounds(Drawable drawable,int gravity){  Rect bounds=new Rect();  int w=drawable.getIntrinsicWidth();  int h=drawable.getIntrinsicHeight();  Rect container=wrapper.getBounds();  if (w == -1 && h == -1) {    w=container.width();    h=container.height();  }  Gravity.apply(gravity,w,h,container,bounds);  return bounds;}  }
class C{  public static String encode(byte[] binaryData){  if (binaryData == null)   return null;  int lengthDataBits=binaryData.length * EIGHTBIT;  if (lengthDataBits == 0) {    return "";  }  int fewerThan24bits=lengthDataBits % TWENTYFOURBITGROUP;  int numberTriplets=lengthDataBits / TWENTYFOURBITGROUP;  int numberQuartet=fewerThan24bits != 0 ? numberTriplets + 1 : numberTriplets;  char encodedData[]=null;  encodedData=new char[numberQuartet * 4];  byte k=0, l=0, b1=0, b2=0, b3=0;  int encodedIndex=0;  int dataIndex=0;  if (fDebug) {    System.out.println("number of triplets = " + numberTriplets);  }  for (int i=0; i < numberTriplets; i++) {    b1=binaryData[dataIndex++];    b2=binaryData[dataIndex++];    b3=binaryData[dataIndex++];    if (fDebug) {      System.out.println("b1= " + b1 + ", b2= "+ b2+ ", b3= "+ b3);    }    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    byte val3=((b3 & SIGN) == 0) ? (byte)(b3 >> 6) : (byte)((b3) >> 6 ^ 0xfc);    if (fDebug) {      System.out.println("val2 = " + val2);      System.out.println("k4   = " + (k << 4));      System.out.println("vak  = " + (val2 | (k << 4)));    }    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[(l << 2) | val3];    encodedData[encodedIndex++]=lookUpBase64Alphabet[b3 & 0x3f];  }  if (fewerThan24bits == EIGHTBIT) {    b1=binaryData[dataIndex];    k=(byte)(b1 & 0x03);    if (fDebug) {      System.out.println("b1=" + b1);      System.out.println("b1<<2 = " + (b1 >> 2));    }    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[k << 4];    encodedData[encodedIndex++]=PAD;    encodedData[encodedIndex++]=PAD;  } else   if (fewerThan24bits == SIXTEENBIT) {    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[l << 2];    encodedData[encodedIndex++]=PAD;  }  return new String(encodedData);}  }
class C{  public boolean execute(String action,JSONArray args,CallbackContext callbackContext) throws JSONException {  this.callbackContext=callbackContext;  if (action.equals("takePicture")) {    this.srcType=CAMERA;    this.destType=FILE_URI;    this.saveToPhotoAlbum=false;    this.targetHeight=0;    this.targetWidth=0;    this.encodingType=JPEG;    this.mediaType=PICTURE;    this.mQuality=80;    this.destType=args.getInt(1);    this.srcType=args.getInt(2);    this.mQuality=args.getInt(0);    this.targetWidth=args.getInt(3);    this.targetHeight=args.getInt(4);    this.encodingType=args.getInt(5);    this.mediaType=args.getInt(6);    this.allowEdit=args.getBoolean(7);    this.correctOrientation=args.getBoolean(8);    this.saveToPhotoAlbum=args.getBoolean(9);    if (this.targetWidth < 1) {      this.targetWidth=-1;    }    if (this.targetHeight < 1) {      this.targetHeight=-1;    }    if (this.targetHeight == -1 && this.targetWidth == -1 && this.mQuality == 100 && !this.correctOrientation && this.encodingType == PNG && this.srcType == CAMERA) {      this.encodingType=JPEG;    }    try {      if (this.srcType == CAMERA) {        this.callTakePicture(destType,encodingType);      } else       if ((this.srcType == PHOTOLIBRARY) || (this.srcType == SAVEDPHOTOALBUM)) {        if (!PermissionHelper.hasPermission(this,permissions[0])) {          PermissionHelper.requestPermission(this,SAVE_TO_ALBUM_SEC,Manifest.permission.READ_EXTERNAL_STORAGE);        } else {          this.getImage(this.srcType,destType,encodingType);        }      }    } catch (    IllegalArgumentException e) {      callbackContext.error("Illegal Argument Exception");      PluginResult r=new PluginResult(PluginResult.Status.ERROR);      callbackContext.sendPluginResult(r);      return true;    }    PluginResult r=new PluginResult(PluginResult.Status.NO_RESULT);    r.setKeepCallback(true);    callbackContext.sendPluginResult(r);    return true;  }  return false;}  }
class C{  private void openTestAction(String file,String name) throws ParserConfigurationException, SAXException, IOException {  this.currentFileName=name + ".xml";  int option=JOptionPane.showConfirmDialog(this,Messages.getString("dialog.test.open.warning.text"),MessageFormat.format(Messages.getString("dialog.test.open.warning.title"),name),JOptionPane.YES_NO_CANCEL_OPTION);  if (option == JOptionPane.YES_OPTION) {    String simName=Simulation.DEFAULT_SIMULATION_NAME;synchronized (Simulation.LOCK) {      this.simulation=XmlReader.fromXml(this.getClass().getResourceAsStream(file));      simName=this.simulation.getWorld().getUserData().toString();      this.pnlSimulation.setSimulation(this.simulation);      this.pnlContacts.setContactCounter(this.simulation.getContactCounter());    }    this.clearAllSnapshots();    this.setTitle(this.getWindowTitle() + " - " + simName);    this.setCompiledSimulation(false);  }}  }
class C{  public static BigInteger factorial(int value){  if (value == 1)   return BigInteger.valueOf(1); else   return BigInteger.valueOf(value).multiply(factorial(value - 1));}  }
class C{  @Override public void addSLDOutputListener(SLDOutputInterface sldOutput){  sldOutputList.add(sldOutput);}  }
class C{  public double calculateUsableCapacity(double storageparentusablecapacity,double storagereplicausablecapacity,double storagecloneusablecapacity,double storagepersistentusablecapacity,double storagesuspendusablecapacity,double swappowerstatecapacityreduction){  double d=(storageparentusablecapacity + storagereplicausablecapacity + storagecloneusablecapacity+ storagepersistentusablecapacity+ storagesuspendusablecapacity+ swappowerstatecapacityreduction);  d=(double)Math.round(d * 100) / 100;  return d;}  }
class C{  public void writeObject(Object value) throws JMSException {  initializeWriting();  if (value == null) {    try {      this.dataOut.write(_NULL);    } catch (    IOException ioe) {      raise(ioe);    }  } else   if (value instanceof String) {    writeString(value.toString());  } else   if (value instanceof Character) {    writeChar(((Character)value).charValue());  } else   if (value instanceof Boolean) {    writeBoolean(((Boolean)value).booleanValue());  } else   if (value instanceof Byte) {    writeByte(((Byte)value).byteValue());  } else   if (value instanceof Short) {    writeShort(((Short)value).shortValue());  } else   if (value instanceof Integer) {    writeInt(((Integer)value).intValue());  } else   if (value instanceof Float) {    writeFloat(((Float)value).floatValue());  } else   if (value instanceof Double) {    writeDouble(((Double)value).doubleValue());  } else   if (value instanceof byte[]) {    writeBytes((byte[])value);  }}  }
class C{  public static void hideKeyboard(View view){  try {    InputMethodManager imm=(InputMethodManager)view.getContext().getSystemService(Context.INPUT_METHOD_SERVICE);    imm.hideSoftInputFromWindow(view.getWindowToken(),0);  } catch (  RuntimeException e) {    Timber.w(e,"Error on hideKeyboard()");  }}  }
class C{  protected Future<Void> closeNoThrow(){  Promise<Void> closeFuture;synchronized (this) {    if (null != closePromise) {      return closePromise;    }    closeFuture=closePromise=new Promise<Void>();  }  cancelTruncation();  Utils.closeSequence(bkDistributedLogManager.getScheduler(),true,getCachedLogWriter(),getAllocatedLogWriter(),getCachedWriteHandler()).proxyTo(closeFuture);  return closeFuture;}  }
class C{  public AudioSearchQuery sort(AudioSearchSort value){  return unsafeParam("sort",value);}  }
class C{  public static List<String> serializeDataSelection(boolean wantReadText,boolean wantMatches){  DataSelection dataSelection=new DataSelection();  dataSelection.setWantReadText(wantReadText);  dataSelection.setWantMatches(wantMatches);  return serializeDataSelection(dataSelection);}  }
class C{  void receiveQuery(Json json){  queryExecutor.submit(null);}  }
class C{  public static void unsplitAssignColorsToLocals(Body unitBody,Map<Local,Object> localToGroup,Map<Local,Integer> localToColor,Map<Object,Integer> groupToColorCount){  ExceptionalUnitGraph unitGraph=new ExceptionalUnitGraph(unitBody,PedanticThrowAnalysis.v(),Options.v().omit_excepting_unit_edges());  LiveLocals liveLocals;  liveLocals=new SimpleLiveLocals(unitGraph);  UnitInterferenceGraph intGraph=new UnitInterferenceGraph(unitBody,localToGroup,liveLocals);  Map<Local,String> localToOriginalName=new HashMap<Local,String>();{    for (    Local local : intGraph.getLocals()) {      int signIndex;      signIndex=local.getName().indexOf("#");      if (signIndex != -1) {        localToOriginalName.put(local,local.getName().substring(0,signIndex));      } else       localToOriginalName.put(local,local.getName());    }  }  Map<StringGroupPair,List<Integer>> originalNameAndGroupToColors=new HashMap<StringGroupPair,List<Integer>>();{    int[] freeColors=new int[10];    for (    Local local : intGraph.getLocals()) {      if (localToColor.containsKey(local)) {        continue;      }      Object group=localToGroup.get(local);      int colorCount=groupToColorCount.get(group).intValue();      if (freeColors.length < colorCount)       freeColors=new int[Math.max(freeColors.length * 2,colorCount)];{        for (int i=0; i < colorCount; i++)         freeColors[i]=1;      }{        Local[] interferences=intGraph.getInterferencesOf(local);        for (        Local element : interferences) {          if (localToColor.containsKey(element)) {            int usedColor=localToColor.get(element).intValue();            freeColors[usedColor]=0;          }        }      }{        String originalName=localToOriginalName.get(local);        List<Integer> originalNameColors=originalNameAndGroupToColors.get(new StringGroupPair(originalName,group));        if (originalNameColors == null) {          originalNameColors=new ArrayList<Integer>();          originalNameAndGroupToColors.put(new StringGroupPair(originalName,group),originalNameColors);        }        boolean found=false;        int assignedColor=0;{          Iterator<Integer> colorIt=originalNameColors.iterator();          while (colorIt.hasNext()) {            Integer color=colorIt.next();            if (freeColors[color.intValue()] == 1) {              found=true;              assignedColor=color.intValue();            }          }        }        if (!found) {          assignedColor=colorCount++;          groupToColorCount.put(group,new Integer(colorCount));          originalNameColors.add(new Integer(assignedColor));        }        localToColor.put(local,new Integer(assignedColor));      }    }  }}  }
class C{  public final void privateInitialize(String serviceName,CordovaInterface cordova,CordovaWebView webView,CordovaPreferences preferences){  assert this.cordova == null;  this.serviceName=serviceName;  this.cordova=cordova;  this.webView=webView;  this.preferences=preferences;  initialize(cordova,webView);  pluginInitialize();}  }
class C{  private void begin_Back_Pos(){  position.y=Settings.nGameAsteroidSceneHeight;  position.x=posX + this.map_controler.syncCnt;  velocity.set(new Math_Vector(0,0));  status=BACKPOS;}  }
class C{  protected final boolean handlePossibleCenter(int[] stateCount,int i,int j,boolean pureBarcode){  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2]+ stateCount[3]+ stateCount[4];  float centerJ=centerFromEnd(stateCount,j);  float centerI=crossCheckVertical(i,(int)centerJ,stateCount[2],stateCountTotal);  if (!Float.isNaN(centerI)) {    centerJ=crossCheckHorizontal((int)centerJ,(int)centerI,stateCount[2],stateCountTotal);    if (!Float.isNaN(centerJ) && (!pureBarcode || crossCheckDiagonal((int)centerI,(int)centerJ,stateCount[2],stateCountTotal))) {      float estimatedModuleSize=(float)stateCountTotal / 7.0f;      boolean found=false;      for (int index=0; index < possibleCenters.size(); index++) {        FinderPattern center=possibleCenters.get(index);        if (center.aboutEquals(estimatedModuleSize,centerI,centerJ)) {          possibleCenters.set(index,center.combineEstimate(centerI,centerJ,estimatedModuleSize));          found=true;          break;        }      }      if (!found) {        FinderPattern point=new FinderPattern(centerJ,centerI,estimatedModuleSize);        possibleCenters.add(point);        if (resultPointCallback != null) {          resultPointCallback.foundPossibleResultPoint(point);        }      }      return true;    }  }  return false;}  }
class C{  public static int handle(ItemStack stack){  if (stack == null)   return 0;  FuelEvent event=new FuelEvent(stack);  OpenModLoader.getEventBus().post(event);  return event.duration;}  }
class C{  public ErrorEntry(String message){  super();  this.message=message;}  }
class C{  public static String join(CharSequence delimiter,Object[] tokens){  StringBuilder sb=new StringBuilder();  boolean firstTime=true;  for (  Object token : tokens) {    if (firstTime) {      firstTime=false;    } else {      sb.append(delimiter);    }    sb.append(token);  }  return sb.toString();}  }
class C{  public long time(int i){  long offset=0;  for (int j=indices.length - 1; j >= 0; j--) {    if (i >= indices[j]) {      offset=offsets[j];      break;    }  }  return offset + rtimes[i];}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  mSensorManager=(SensorManager)getSystemService(SENSOR_SERVICE);  mPowerManager=(PowerManager)getSystemService(POWER_SERVICE);  mWindowManager=(WindowManager)getSystemService(WINDOW_SERVICE);  mDisplay=mWindowManager.getDefaultDisplay();  mWakeLock=mPowerManager.newWakeLock(PowerManager.SCREEN_BRIGHT_WAKE_LOCK,getClass().getName());  mSimulationView=new SimulationView(this);  mSimulationView.setBackgroundResource(R.drawable.wood);  setContentView(mSimulationView);}  }
class C{  public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public StatelessChunkScrollableDataIterator(SQLQuery sqlQuery,SessionFactory sessionFactory,int fetchSize,boolean performOrderById,int chunkSize){  super(sqlQuery,sessionFactory,fetchSize,performOrderById,chunkSize);}  }
class C{  @Override public void onReceivedHttpAuthRequest(WebView view,HttpAuthHandler handler,String host,String realm){  AuthenticationToken token=this.getAuthenticationToken(host,realm);  if (token != null) {    handler.proceed(token.getUserName(),token.getPassword());    return;  }  PluginManager pluginManager=this.parentEngine.pluginManager;  if (pluginManager != null && pluginManager.onReceivedHttpAuthRequest(null,new CordovaHttpAuthHandler(handler),host,realm)) {    parentEngine.client.clearLoadTimeoutTimer();    return;  }  super.onReceivedHttpAuthRequest(view,handler,host,realm);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_QUEST_ACQUIRE_ERROR_GUILD_LEVEL(String value0){  return new SM_SYSTEM_MESSAGE(1300569,value0);}  }
class C{  public Value abs(Value num){  throw new RuntimeException("Unsupported operation.");}  }
class C{  public static boolean isToday(Date date){  return android.text.format.DateUtils.isToday(date.getTime());}  }
class C{  public void cipher(byte[] data,int offset,int length){  int blockNumber=length >> 3;  int p;  for (int k=0; k < blockNumber; k++) {    p=offset + (k << 3);    int xl=byteArrayToInteger(data,p);    int xr=byteArrayToInteger(data,p + 4);    int tmp;    for (int i=0; i < 16; i++) {      xl=xl ^ pArray[i];      xr=F(xl) ^ xr;      tmp=xl;      xl=xr;      xr=tmp;    }    tmp=xl;    xl=xr;    xr=tmp;    xr^=pArray[16];    xl^=pArray[17];    integerToByteArray(xl,data,p);    integerToByteArray(xr,data,p + 4);  }}  }
class C{  public static double[] invert(double[] a) throws IllegalArgumentException {  if (a == null) {    throw new IllegalArgumentException("Argument cannot be null");  }  double[] c=new double[a.length];  for (int i=0; i < a.length; i++) {    c[i]=1.0 / a[i];  }  return c;}  }
class C{  @Override public void close(){}  }
class C{  public DimensionRow findDimensionRowByKeyValue(String value){  return dimension.findDimensionRowByKeyValue(value);}  }
class C{  public static boolean isCategoryChildOf(Delegator delegator,LocalDispatcher dispatcher,String parentProductCategoryId,String productCategoryId){  try {    List<EntityCondition> rolllupConds=FastList.newInstance();    rolllupConds.add(EntityCondition.makeCondition("parentProductCategoryId",parentProductCategoryId));    rolllupConds.add(EntityCondition.makeCondition("productCategoryId",productCategoryId));    rolllupConds.add(EntityUtil.getFilterByDateExpr());    Collection<GenericValue> rollups=EntityQuery.use(delegator).from("ProductCategoryRollup").where(rolllupConds).cache().queryList();    return !rollups.isEmpty();  } catch (  GenericEntityException e) {    Debug.logWarning(e,module);  }  return false;}  }
class C{  private void makeOrmTest(int id){switch (id) {case 0:    testSave();  break;case 1:testInsert();break;case 2:testUpdate();break;case 3:testUpdateColumn();break;case 4:testQueryAll();break;case 5:testQueryByWhere();break;case 6:testQueryByID();break;case 7:testQueryAnyUwant();break;case 8:testMapping();break;case 9:testDelete();break;case 10:testDeleteByIndex();break;case 11:testDeleteByWhereBuilder();break;case 12:testDeleteAll();break;case 13:testLargeScaleUseLite();break;case 14:testLargeScaleUseSystem();break;default :break;}}  }
class C{  public void addBodyDecl(BodyDecl node){  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();  list.addChild(node);}  }
class C{  public Line sharedLineWith(final Vertex vertex){  for (  final Line line1 : lines) {    for (    final Line line2 : vertex.lines) {      if (line1 == line2) {        return line1;      }    }  }  return null;}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  private void assertViews(final List<View> views,final View... expectedViews){  assertEquals("It should have " + expectedViews.length + " views.",expectedViews.length,views.size());  for (int expectedViewsIndex=0; expectedViewsIndex < expectedViews.length; expectedViewsIndex++) {    final View expectedView=expectedViews[expectedViewsIndex];    assertTrue("It should contain " + expectedView.getClass().getSimpleName() + " at position "+ expectedViewsIndex+ ".",views.get(expectedViewsIndex) == expectedView);  }}  }
class C{  public LoadObject(int state){  this.state=state;}  }
class C{  private List findPhonemes(Map lexicon){  List phonemeList=new ArrayList();  for (Iterator i=lexicon.keySet().iterator(); i.hasNext(); ) {    String key=(String)i.next();    String[] phonemes=getPhones(lexicon,key);    for (int index=0; index < phonemes.length; index++) {      if (!phonemeList.contains(phonemes[index])) {        phonemeList.add(phonemes[index]);      }    }  }  return phonemeList;}  }
class C{  @Override public Writer append(char value){  builder.append(value);  return this;}  }
class C{  public void bindWith(final Line line){  lines.add(line);}  }
class C{  public void cancel(){  mCancellationRequested.set(true);}  }
class C{  public void resetColors(){  mColors=new ArrayList<>();}  }
class C{  public EtcdClient build() throws ConnectException, AuthFailedException {  checkState(!endpoints.isEmpty() || nameResolverFactory != null,"please configure ectd serve endpoints or nameResolverFactory before build.");  return new EtcdClient(null,this);}  }
class C{  public KMeansClustering(int numberClusters,PointList pl,boolean normalize,int maxIterations) throws IllegalArgumentException {  if (numberClusters < 1)   throw new IllegalArgumentException("the number of clusters to find must be at leat one;");  if (maxIterations < 1)   throw new IllegalArgumentException("the maximal number of iterations must be at least one;");  if (pl == null)   throw new IllegalArgumentException("the given point list must not be a null value;");  this.numberClusters=numberClusters;  this.dimension=pl.getDimension();  this.clusters=new Cluster[numberClusters];  this.normalize=normalize;  this.maxIterations=maxIterations;  this.mean=pl.getMean();  this.variance=pl.getVariance();  this.stdDeviation=variance.pow(0.5d);  if (normalize)   this.data=pl.normalize(); else   this.data=pl;  int[] startPoints=new int[numberClusters];  for (int i=0; i < numberClusters; ) {    startPoints[i]=rnd.nextInt(pl.size());    for (int j=0; j < i; j++) {      if (startPoints[j] == startPoints[i])       i--;    }    i++;  }  for (int i=0; i < numberClusters; i++)   clusters[i]=new Cluster(this.data.get(startPoints[i]));}  }
class C{  public PrepareJob(Transaction tr,TaskManager pool,WakeupManager wm,ClientLog log,ParticipantHandle[] handles,Object xid,ConcurrentMap<String,IDirectSpaceProxy> proxiesMap){  super(pool,wm,false);  if (log == null)   throw new IllegalArgumentException("PrepareJob: PrepareJob: " + "log is null");  this.log=log;  if (!(tr instanceof ServerTransaction))   throw new IllegalArgumentException("PrepareJob: PrepareJob: " + "must be a ServerTransaction");  this.tr=(ServerTransaction)tr;  if (handles == null)   throw new IllegalArgumentException("PrepareJob: PrepareJob: " + "must have participants");  if (handles.length == 0)   throw new IllegalArgumentException("PrepareJob: PrepareJob: " + "must have participants");  this.handles=handles;  _xid=xid;  _proxiesMap=proxiesMap;}  }
class C{  protected URL createPingUrl(@NotNull String app,@NotNull String version,@NotNull String id,@Nullable Map<String,String> extras) throws UnsupportedEncodingException, MalformedURLException {  String osName=URLEncoder.encode(getOsName().getOsFull(),"UTF-8");  String osArch=URLEncoder.encode(getOsArch(),"UTF-8");  String jvmArch=URLEncoder.encode(getJvmInfo(),"UTF-8");  String extraStr="";  if (extras != null && !extras.isEmpty()) {    StringBuilder sb=new StringBuilder();    for (    Map.Entry<String,String> entry : extras.entrySet()) {      sb.append('&').append(entry.getKey()).append('=').append(entry.getValue());    }    extraStr=sb.toString();  }  URL url=new URL("http","tools.google.com","/service/update?as=androidsdk_" + app + "&id="+ id+ "&version="+ version+ "&os="+ osName+ "&osa="+ osArch+ "&vma="+ jvmArch+ extraStr);  return url;}  }
class C{  @Override protected ArrayList<Point> internalTrim(ArrayList<Point> input){  int length=input.size();  float leaveOutPeriod=(float)length / (length - DataNormalizer.POINT_COUNT);  ArrayList<Point> result=new ArrayList<>(DataNormalizer.POINT_COUNT);  int previousBase=-1;  for (int i=0; i < length; i++) {    if (i == 0) {      previousBase=0;      result.add(input.get(0));      continue;    }    int newBase=(int)((i + 1) / leaveOutPeriod);    if (newBase == previousBase) {      result.add(input.get(i));    }    previousBase=newBase;  }  return new DataCutTrimmer().trim(result);}  }
class C{  public void done(){synchronized (myTasks) {    myTasks.remove(myTasks.size() - 1);    myTasks.notifyAll();  }}  }
class C{  private static boolean pullDependenciesIntoMap(@NotNull PsiElement root,@NotNull Map<String,Multimap<String,GradleCoordinate>> allConfigurations,@Nullable List<String> unparsedDependencies){  boolean wasMapUpdated=false;  for (  PsiElement existingElem : root.getChildren()) {    if (existingElem instanceof GrCall) {      PsiElement reference=existingElem.getFirstChild();      if (reference instanceof GrReferenceExpression) {        final String configurationName=reference.getText();        boolean parsed=false;        GrCall call=(GrCall)existingElem;        GrArgumentList arguments=call.getArgumentList();        if (arguments != null && call.getClosureArguments().length == 0) {          GrExpression[] expressionArguments=arguments.getExpressionArguments();          if (expressionArguments.length == 1 && expressionArguments[0] instanceof GrLiteral) {            Object value=((GrLiteral)expressionArguments[0]).getValue();            if (value instanceof String) {              String coordinateText=(String)value;              GradleCoordinate coordinate=GradleCoordinate.parseCoordinateString(coordinateText);              if (coordinate != null) {                parsed=true;                Multimap<String,GradleCoordinate> map=allConfigurations.get(configurationName);                if (map == null) {                  map=LinkedListMultimap.create();                  allConfigurations.put(configurationName,map);                }                if (!map.get(coordinate.getId()).contains(coordinate)) {                  map.put(coordinate.getId(),coordinate);                  existingElem.delete();                  wasMapUpdated=true;                }              }            }          }          if (!parsed && unparsedDependencies != null) {            unparsedDependencies.add(existingElem.getText());          }        }      }    }  }  return wasMapUpdated;}  }
class C{  public void doWriteAndClose(String fName,boolean isBinary,boolean isBigEndian) throws IOException {  DataOutputStream dos=null;  try {    dos=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(fName)));  } catch (  FileNotFoundException e) {    throw new RuntimeException("Can't open file [" + fName + "] for writing.",e);  }  dos.writeBytes("EST_File Track\n");  if (isBinary) {    dos.writeBytes("DataType binary\n");    if (isBigEndian)     dos.writeBytes("ByteOrder 10\n"); else     dos.writeBytes("ByteOrder 01\n");  } else {    dos.writeBytes("DataType ascii\n");  }  int numChannels;  if (frames != null && frames.length > 0 && frames[0] != null)   numChannels=frames[0].length; else   numChannels=0;  dos.writeBytes("NumFrames " + times.length + "\n"+ "NumChannels "+ numChannels+ "\n"+ "NumAuxChannels 0\n"+ "EqualSpace 0\n"+ "BreaksPresent true\n"+ "CommentChar ;\n");  String K;  for (int k=0; k < numChannels; k++) {    K=Integer.toString(k);    dos.writeBytes("Channel_" + K + " "+ feaType+ "_"+ K+ "\n");  }  dos.writeBytes("EST_Header_End\n");  if (isBinary) {    for (int i=0; i < times.length; i++) {      General.writeFloat(dos,isBigEndian,times[i]);      General.writeFloat(dos,isBigEndian,1.0f);      for (int k=0; k < numChannels; k++) {        General.writeFloat(dos,isBigEndian,frames[i][k]);      }    }  } else {    for (int i=0; i < times.length; i++) {      dos.writeBytes(Float.toString(times[i]));      dos.writeBytes("\t1\t");      if (numChannels > 0) {        dos.writeBytes(Float.toString(frames[i][0]));        for (int k=1; k < frames[0].length; k++) {          dos.writeBytes(" " + Float.toString(frames[i][k]));        }      }      dos.writeBytes("\n");    }  }  dos.flush();  dos.close();}  }
class C{  public static void multiplyDirect(Matrix a,Matrix b,Matrix result){  for (int i=0; i < a.rows; i++) {    for (int j=0; j < a.cols; j++) {      result.set(i,j,a.get(i,j) * b.get(i,j));    }  }}  }
class C{  static boolean isRtlMargin(String attribute){  if (SdkConstants.ATTR_LAYOUT_MARGIN_LEFT.equals(attribute) || SdkConstants.ATTR_LAYOUT_MARGIN_RIGHT.equals(attribute)) {    return true;  }  return false;}  }
class C{  public static void checkUiThread(){  if (Looper.getMainLooper() != Looper.myLooper()) {    throw new IllegalStateException("Must be called from the main thread. Was: " + Thread.currentThread());  }}  }
class C{  private boolean isSameNode(Node m,Node n){  return (fUseIsSameNode) ? m.isSameNode(n) : m == n;}  }
class C{  public static final <T>T deserializeRaw(final InputStream input,final Class<T> clazz) throws IOException, ReflectiveOperationException {  Objects.requireNonNull(input,"The input stream is null");  Objects.requireNonNull(input,"The class is null");  final Externalizer<T,T> externalizer=of(clazz);  try (final ObjectInputStream objected=new ObjectInputStream(input)){    return externalizer.readObject(objected);  } }  }
class C{  public double sum(){  double result=0;  for (  double[] dArr : A)   for (  double d : dArr)   result+=d;  return result;}  }
class C{  public boolean hasBOM(ByteOrderMark bom) throws IOException {  if (!boms.contains(bom)) {    throw new IllegalArgumentException("Stream not configure to detect " + bom);  }  return byteOrderMark != null && getBOM().equals(bom);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set colorMatchesVsReference=");  boolean value=np.getBoolean();  np.matchIgnoreCase(";");  AlignmentViewer viewer=(AlignmentViewer)getViewer();  viewer.getAlignmentViewerPanel().getAlignmentPanel().setColorMatchesVsReference(value);  ProgramProperties.put("ColorMatchesVsReference",value);  viewer.repaint();}  }
class C{  public static void main(String[] sArgs){  TAC2008UpdateSummarizationFileSet t=new TAC2008UpdateSummarizationFileSet("/home/ggianna/JInsect/TAC2008/UpdateSumm08_test_docs_files/");  t.createSets();  System.err.println("Training set:");  System.err.println(utils.printIterable(t.getTrainingSet(),"\n"));  System.err.println("Training set:");  System.err.println(utils.printIterable(t.getTestSet(),"\n"));  System.err.println("Per category:");  for (  String sCategory : (List<String>)t.getCategories()) {    System.err.println(utils.printIterable(t.getFilesFromCategory(sCategory),"\n"));  }  String sLastCat=(String)t.getCategories().get(t.getCategories().size() - 1);  String sFile=((CategorizedFileEntry)t.getFilesFromCategory(sLastCat).get(0)).getFileName();  System.out.println(t.loadFile(sFile));}  }
class C{  public Property addNodeProperty(String nodePath,String propertyName,String propertyValue,int propertyType) throws RepositoryException {  LOG.debug("Adding property '{}'='{}' to node '{}'",propertyName,propertyValue,nodePath);  session.refresh(true);  Node node=session.getNode(nodePath);  Property property=node.setProperty(propertyName,propertyValue,propertyType);  session.save();  return property;}  }
class C{  public static UShort valueOf(int value) throws NumberFormatException {  return new UShort(value);}  }
class C{  protected AbstractFormat(final NumberFormat format){  this(format,(NumberFormat)format.clone());}  }
class C{  @Override public int hashCode(){  return 37 * (37 * 17 + numerator) + denominator;}  }
class C{  public static void w(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_WARNING) {    return;  }  Log.w(tag,msg,throwable);}  }
class C{  public UnregisterReplicationLocalViewRequestInfo(){}  }
class C{  public HttpClient(URL url,Map<String,Object> parameters){  this.url=url.toExternalForm();  this.parameters=parameters;}  }
class C{  public CountModifiers remove(CountModifiers modifiers){  return createIfNeeded(super.remove(modifiers));}  }
class C{  public AccountLookupContactsQuery contacts(List<String> value){  return unsafeParam("contacts",value);}  }
class C{  public Polygon2D(int[] xpoints,int[] ypoints,int npoints){  if (npoints > xpoints.length || npoints > ypoints.length) {    throw new IndexOutOfBoundsException("npoints > xpoints.length || npoints > ypoints.length");  }  this.npoints=npoints;  this.xpoints=new float[npoints];  this.ypoints=new float[npoints];  for (int i=0; i < npoints; i++) {    this.xpoints[i]=xpoints[i];    this.ypoints[i]=ypoints[i];  }  calculatePath();}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  public static boolean isNoReturnValue(int mod){  return Modifiers.contains(mod,UpdateModifiers.NO_RETURN_VALUE);}  }
class C{  public int delete_file1(String file_id) throws IOException, MyException {  String[] parts=new String[2];  this.errno=this.split_file_id(file_id,parts);  if (this.errno != 0) {    return this.errno;  }  return this.delete_file(parts[0],parts[1]);}  }
class C{  public BreadthFirstIterator(Iterator it,int depth,int traversal){  init(it,depth,traversal);}  }
class C{  protected MarketDeleteAlbumQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  public boolean isAssignableFrom(final Class<?> other){  if (other == null) {    return false;  }  if (this.isParameterized()) {    return false;  }  return this.getRawType().isAssignableFrom(other);}  }
class C{  public PhotosGetQuery extended(Boolean value){  return unsafeParam("extended",value);}  }
class C{  @Override public int searchOrderCount(OrderReqDto reqDto){  return sessionTemplate.selectOne(NAMESPACE + ".searchOrderCount",reqDto);}  }
class C{  public BoardGetTopicsQuery order(BoardGetTopicsOrder value){  return unsafeParam("order",value);}  }
class C{  public PaddingDecimalFormat(String pattern,DecimalFormatSymbols symbols,int minLength){  super(pattern,symbols);  minimumLength=minLength;}  }
class C{  @Override public void resetMediaPlayer(){  if (SHOW_LOGS)   Logger.v(TAG,">> resetMediaPlayer, mCurrentPlayerState " + mCurrentPlayerState);  mPlayerHandler.pauseQueueProcessing(TAG);  if (SHOW_LOGS)   Logger.v(TAG,"resetMediaPlayer, mCurrentPlayerState " + mCurrentPlayerState);  mPlayerHandler.clearAllPendingMessages(TAG);  resetReleaseClearCurrentPlayer();  mPlayerHandler.resumeQueueProcessing(TAG);  if (SHOW_LOGS)   Logger.v(TAG,"<< resetMediaPlayer, mCurrentPlayerState " + mCurrentPlayerState);}  }
class C{  public void Notify(Object oSender,Object oParams){  double dVar=((Double)oParams).doubleValue();  long lLeft=(long)((1.0 - dVar) * (double)(new Date().getTime() - dStart.getTime()) / dVar);  String sLeft;  if (((int)(dVar * 10000) % 5) == 0) {    if (dVar < 0.0001)     sLeft="Calculating remaining time..."; else     sLeft=String.format("%35s",gr.demokritos.iit.jinsect.utils.millisToMinSecString(lLeft));    System.err.print(String.format("%5.3f%%",((Double)oParams).doubleValue() * 100.0) + " complete..." + sLeft+ "\r");  }}  }
class C{  public HttpTemplateParser(DiagCollector diagCollector,Location location,String template,int configVersion){  this.diagCollector=diagCollector;  this.location=location;  this.template=template;  this.configVersion=configVersion;  Matcher matcher=CUSTOM_VERB_PATTERN.matcher(template);  if (matcher.find()) {    this.customVerb=matcher.group(1);    this.tokens=TOKEN_PATTERN.matcher(template.substring(0,matcher.start()));  } else {    this.customVerb=null;    this.tokens=TOKEN_PATTERN.matcher(template);  }  this.current=tokens.find() ? tokens.group().trim() : null;}  }
class C{  public int size(){  return m_fields.length;}  }
class C{  static String[] splitOnTokens(String text){  if (text.indexOf('?') == -1 && text.indexOf('*') == -1) {    return new String[]{text};  }  char[] array=text.toCharArray();  ArrayList<String> list=new ArrayList<String>();  StringBuilder buffer=new StringBuilder();  for (int i=0; i < array.length; i++) {    if (array[i] == '?' || array[i] == '*') {      if (buffer.length() != 0) {        list.add(buffer.toString());        buffer.setLength(0);      }      if (array[i] == '?') {        list.add("?");      } else       if (list.isEmpty() || i > 0 && list.get(list.size() - 1).equals("*") == false) {        list.add("*");      }    } else {      buffer.append(array[i]);    }  }  if (buffer.length() != 0) {    list.add(buffer.toString());  }  return list.toArray(new String[list.size()]);}  }
class C{  private void createFilterList(FilterNode node,List<Filter> filterList){  for (int index=0; index < node.getChildCount(); index++) {    FilterNode filterNode=(FilterNode)node.getChildAt(index);    Filter filter=addFilter(filterNode);    filterList.add(filter);  }}  }
class C{  public DatagramPacket readPacket() throws IOException {  DatagramPacket dp=new DatagramPacket(new byte[65535],65535);  try {    socket.receive(dp);    dp.setData(Arrays.copyOf(dp.getData(),dp.getLength()));    return dp;  } catch (  SocketTimeoutException e) {    return null;  }}  }
class C{  public void grow(double b){  clip[6]+=b;  clip[7]+=b;}  }
class C{  protected BoardRestoreCommentQuery topicId(int value){  return unsafeParam("topic_id",value);}  }
class C{  private OCFile(Parcel source){  mId=source.readLong();  mParentId=source.readLong();  mLength=source.readLong();  mCreationTimestamp=source.readLong();  mModifiedTimestamp=source.readLong();  mModifiedTimestampAtLastSyncForData=source.readLong();  mRemotePath=source.readString();  mLocalPath=source.readString();  mMimeType=source.readString();  mNeedsUpdating=source.readInt() == 0;  mFavorite=source.readInt() == 1;  mLastSyncDateForProperties=source.readLong();  mLastSyncDateForData=source.readLong();  mEtag=source.readString();  mShareByLink=source.readInt() == 1;  mPublicLink=source.readString();  mPermissions=source.readString();  mRemoteId=source.readString();  mNeedsUpdateThumbnail=source.readInt() == 1;  mIsDownloading=source.readInt() == 1;  mEtagInConflict=source.readString();  mShareWithSharee=source.readInt() == 1;}  }
class C{  public GroupsGetMembersQueryWithFields(VkApiClient client,Actor actor,UserField... fields){  super(client,"groups.getMembers",GetMembersFieldsResponse.class);  accessToken(actor.getAccessToken());  fields(fields);}  }
class C{  public static boolean isWindowsSystem(){  return SYSTEM_SEPARATOR == WINDOWS_SEPARATOR;}  }
class C{  @MainThread public static void onPause(@NonNull final String componentId){  checkMainThread();  activeComponentIdsToTargets.remove(componentId);}  }
class C{  public final ScheduledTask schedule(SchedulerTask task,Quantum interval){  return schedule(task,interval,true);}  }
class C{  public static void e(String tag,String s){  if (LOG.ERROR >= LOGLEVEL)   Log.e(tag,s);}  }
class C{  public LeadsCompleteQuery(VkApiClient client,String vkSid,String secret){  super(client,"leads.complete",Complete.class);  vkSid(vkSid);  secret(secret);}  }
class C{  public static void equals(final DataTagCacheObject dataTag1,final DataTagCacheObject dataTag2){  equalsTag(dataTag1,dataTag2);  assertEquals(dataTag1.getEquipmentId(),dataTag2.getEquipmentId());  assertEquals(dataTag1.getAddress().toConfigXML(),dataTag2.getAddress().toConfigXML());  assertEquals(dataTag1.getCacheTimestamp(),dataTag2.getCacheTimestamp());  assertEquals(dataTag1.getDaqTimestamp(),dataTag2.getDaqTimestamp());  assertEquals(dataTag1.getStatus(),dataTag2.getStatus());  assertEquals(dataTag1.getProcessId(),dataTag2.getProcessId());  assertEquals(dataTag1.isLogged(),dataTag2.isLogged());}  }
class C{  public static boolean isMonth(String s){  if (isEmpty(s))   return defaultEmptyOK;  return isIntegerInRange(s,1,12);}  }
class C{  public static ByteBuffer createByteBuffer(int size){  ByteBuffer buf=ByteBuffer.allocateDirect(size).order(ByteOrder.nativeOrder());  buf.clear();  if (trackDirectMemory) {    trackingHash.put(buf,ref);  }  return buf;}  }
class C{  @Override public List<Period> generatePeriods(DateTimeUnit dateTimeUnit){  org.hisp.dhis.calendar.Calendar cal=getCalendar();  dateTimeUnit.setMonth(1);  dateTimeUnit.setDay(1);  int year=dateTimeUnit.getYear();  List<Period> periods=Lists.newArrayList();  while (year == dateTimeUnit.getYear()) {    periods.add(createPeriod(dateTimeUnit,cal));    dateTimeUnit=cal.plusMonths(dateTimeUnit,3);  }  return periods;}  }
class C{  private boolean update(final Object pValue,final String pValueDesc,final Timestamp pTimestamp){  boolean retval=false;synchronized (BUFFER_LOCK) {    if (this.timestamp.before(pTimestamp) || this.timestamp.equals(pTimestamp)) {      this.value=pValue;      this.qualityCollection.clear();      this.qualityDescriptions.clear();      this.valueDesc=pValueDesc;      this.timestamp=pTimestamp;      retval=true;    }  }  return retval;}  }
class C{  public JPanel createLegendPanel(){  JPanel legendPanel=new JPanel();  legendPanel.setLayout(new GridLayout(2,1));  legendPanel.add(getLegendPanel());  JPanel symbolTreePanel=getSymbolTree();  legendPanel.add(symbolTreePanel);  return legendPanel;}  }
class C{  int convertMouse(MouseEvent event){  int result;  if (panelFont == null)   return (NO_MOUSE);  int colOff=event.getX() - GRID_WIDTH - PANEL_MARGIN;  int colNum=colOff / horizStep;  int colRem=colOff % horizStep;  if ((colNum >= panelColumns) || (colRem < TEXT_MARGIN) || (colRem > (horizStep - GRID_WIDTH - TEXT_MARGIN))) {    return (NO_MOUSE);  }  int rowOff=event.getY() - GRID_WIDTH - PANEL_MARGIN;  int rowNum=rowOff / vertiStep;  int rowRem=rowOff % vertiStep;  if ((rowRem < TEXT_MARGIN) || (rowRem > (vertiStep - GRID_WIDTH - TEXT_MARGIN))) {    return (NO_MOUSE);  }  result=cornerIndex + (rowNum * panelColumns) + colNum;  if (result >= cellCount)   return (NO_MOUSE);  return (result);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_QUEST_QIMSG_ACQUIRE(){  return new SM_SYSTEM_MESSAGE(1300609);}  }
class C{  public static Map<String,Object> sendMailFromUrl(DispatchContext ctx,Map<String,? extends Object> rcontext){  Map<String,Object> sendMailContext=UtilMisc.makeMapWritable(rcontext);  String bodyUrl=(String)sendMailContext.remove("bodyUrl");  Map<String,Object> bodyUrlParameters=UtilGenerics.checkMap(sendMailContext.remove("bodyUrlParameters"));  Locale locale=(Locale)rcontext.get("locale");  LocalDispatcher dispatcher=ctx.getDispatcher();  URL url=null;  try {    url=new URL(bodyUrl);  } catch (  MalformedURLException e) {    Debug.logWarning(e,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonEmailSendMalformedUrl",UtilMisc.toMap("bodyUrl",bodyUrl,"errorString",e.toString()),locale));  }  HttpClient httpClient=new HttpClient(url,bodyUrlParameters);  String body=null;  try {    body=httpClient.post();  } catch (  HttpClientException e) {    Debug.logWarning(e,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonEmailSendGettingError",UtilMisc.toMap("errorString",e.toString()),locale));  }  sendMailContext.put("body",body);  Map<String,Object> sendMailResult;  try {    sendMailResult=dispatcher.runSync("sendMail",sendMailContext);  } catch (  GenericServiceException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  return sendMailResult;}  }
class C{  public PhotosGetQuery photoIds(String... value){  return unsafeParam("photo_ids",value);}  }
class C{  public void callHandler(String handlerName,String data,CallBackFunction callBack){  doSend(handlerName,data,callBack);}  }
class C{  public static void process(List<Packages> pkgList) throws Exception {  init();  String[] temps=templates.split(",");  String[] vmFiles=new String[temps.length];  for (int i=0; i < temps.length; i++) {    vmFiles[i]=temps[i] + ".vm";  }  for (  Packages pkg : pkgList) {    for (    String vmFile : vmFiles) {      generator(vmFile,pkg);    }  }}  }
class C{  public byte readByte(int position){  if (position < 0 || position >= Page.pageSize) {    throw new PageException("readByte is out of bounds of page");  }  return pageData.get(position);}  }
class C{  public HTTPTunnelConnector(String proxyHost,int proxyPort,String proxyUser,String proxyPass){  this.proxyHost=proxyHost;  this.proxyPort=proxyPort;  this.proxyUser=proxyUser;  this.proxyPass=proxyPass;}  }
class C{  protected void onLoadMore(WXScrollView scrollView,int x,int y){  try {    String offset=mDomObj.attr.getLoadMoreOffset();    if (TextUtils.isEmpty(offset)) {      return;    }    int contentH=scrollView.getChildAt(0).getHeight();    int scrollerH=scrollView.getHeight();    int offScreenY=contentH - y - scrollerH;    if (offScreenY < Integer.parseInt(offset)) {      if (WXEnvironment.isApkDebugable()) {        WXLogUtils.d("[WXScroller-onScroll] offScreenY :" + offScreenY);      }      if (mContentHeight != contentH) {        WXSDKManager.getInstance().fireEvent(mInstanceId,mDomObj.ref,WXEventType.LIST_LOAD_MORE);        mContentHeight=contentH;      }    }  } catch (  Exception e) {    WXLogUtils.d("[WXScroller-onScroll] ",e);  }}  }
class C{  public static final byte[] multiplyBytes(final byte[] in,final int count,final int mul){  byte[] ret=new byte[count * mul];  for (int x=0; x < count * mul; x++) {    ret[x]=in[x % count];  }  return ret;}  }
class C{  public void put(String sample,HiddenAttribute attribute,Object value){  put(sample,attribute.toString(),value);}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ITEM_SEAL_STATUS_UNSEALMAX(String value0){  return new SM_SYSTEM_MESSAGE(1400805,value0);}  }
class C{  public static Object evaluate(String language,String script,Class<?> scriptClass,Map<String,Object> context) throws Exception {  Assert.notNull("context",context);  if (scriptClass != null) {    return InvokerHelper.createScript(scriptClass,GroovyUtil.getBinding(context)).run();  }  try {    CompiledScript compiledScript=compileScriptString(language,script);    if (compiledScript != null) {      return executeScript(compiledScript,null,createScriptContext(context),null);    }    ScriptEngineManager manager=new ScriptEngineManager();    ScriptEngine engine=manager.getEngineByName(language);    if (engine == null) {      throw new IllegalArgumentException("The script type is not supported for language: " + language);    }    if (Debug.verboseOn()) {      Debug.logVerbose("Begin processing script [" + script + "] using engine "+ engine.getClass().getName(),module);    }    ScriptContext scriptContext=createScriptContext(context);    return engine.eval(script,scriptContext);  } catch (  Exception e) {    String errMsg="Error running " + language + " script ["+ script+ "]: "+ e.toString();    Debug.logWarning(e,errMsg,module);    throw new IllegalArgumentException(errMsg);  }}  }
class C{  static Object newInstance(String className,ClassLoader cl,boolean doFallback) throws ConfigurationError {  try {    Class providerClass=findProviderClass(className,cl,doFallback);    Object instance=providerClass.newInstance();    if (DEBUG)     debugPrintln("created new instance of " + providerClass + " using ClassLoader: "+ cl);    return instance;  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + className + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + className + " could not be instantiated: "+ x,x);  }}  }
class C{  public void readAuxBlocks(FileFooterRMA3 fileFooter,IInputReader reader,Map<String,byte[]> name2AuxBlock) throws IOException {  reader.seek(fileFooter.getAuxStart());  for (int i=0; i < count && reader.getPosition() < fileFooter.getAuxFooter(); i++) {    String name=reader.readString();    int length=reader.readInt();    byte[] bytes=new byte[length];    reader.read(bytes,0,length);    name2AuxBlock.put(name,bytes);  }}  }
class C{  public static String formatPercentage(Double percentage){  if (percentage == null)   return "";  return formatPercentage(percentage.doubleValue());}  }
class C{  public AemList removeItem(final AemListItem item){  item.remove();  bobcatWait.withTimeout(Timeouts.BIG).until(null,2);  return this;}  }
class C{  private static void computeCorrelationMatrix(int rank,double[][] vectors,Distances distances){  double[] mean=new double[rank];  for (  double[] row : vectors) {    for (int col=0; col < rank; col++) {      mean[col]+=row[col];    }  }  for (int col=0; col < rank; col++) {    mean[col]/=vectors.length;  }  double[] stddev=new double[rank];  for (  double[] row : vectors) {    for (int col=0; col < rank; col++) {      stddev[col]+=(row[col] - mean[col]) * (row[col] - mean[col]);    }  }  for (int col=0; col < rank; col++) {    stddev[col]=Math.sqrt(stddev[col] / vectors.length);  }  for (int di=0; di < rank; di++) {    distances.set(di + 1,di + 1,0);    for (int dj=di + 1; dj < rank; dj++) {      double cor=0;      for (      double[] row : vectors) {        cor+=(row[di] - mean[di]) * (row[dj] - mean[dj]) / (stddev[di] * stddev[dj]);      }      cor/=vectors.length;      distances.set(di + 1,dj + 1,cor);    }  }}  }
class C{  public void shutdown(final long timeout,final TimeUnit timeUnit) throws TimeoutException {  final long timeOutAt=System.currentTimeMillis() + timeUnit.toMillis(timeout);  while (hasBacklog()) {    if (timeout >= 0 && System.currentTimeMillis() > timeOutAt) {      throw TimeoutException.INSTANCE;    }  }  halt();}  }
class C{  private void updateRingColor(float interpolatedTime,Ring ring){  if (interpolatedTime > COLOR_START_DELAY_OFFSET) {    ring.setColor(evaluateColorChange((interpolatedTime - COLOR_START_DELAY_OFFSET) / (1.0f - COLOR_START_DELAY_OFFSET),ring.getStartingColor(),ring.getNextColor()));  }}  }
class C{  public static IOCase forName(String name){  if (IOCase.SENSITIVE.name.equals(name)) {    return IOCase.SENSITIVE;  }  if (IOCase.INSENSITIVE.name.equals(name)) {    return IOCase.INSENSITIVE;  }  if (IOCase.SYSTEM.name.equals(name)) {    return IOCase.SYSTEM;  }  throw new IllegalArgumentException("Invalid IOCase name: " + name);}  }
class C{  public void add(int val){  ensureCapacity(_pos + 1);  _data[_pos++]=val;}  }
class C{  public final void dbUnavailable(final boolean alarmUp,final String exceptionMsg,final String dbInfo){  if (alarmUp == FallbackAlarmsInterface.ACTIVATED) {    ArrayList recipients=new ArrayList();    MailDetailsBean mailDetails=new MailDetailsBean();    mailDetails.setSender("mruizgar@cern.ch");    recipients.add("mruizgar@cern.ch");    mailDetails.setToRecipients(recipients);    mailDetails.setSubject("DB Unavailable");    mailDetails.setMessage("The DB connection to " + dbInfo + "could not be established due to: "+ exceptionMsg);    mailDetails.setServer("cernmx.cern.ch");    SMTPMailSender mailSender=new SMTPMailSender();    try {      mailSender.sendMail(mailDetails);    } catch (    MailSenderException e) {      LOG.debug(e.getMessage());    }  }}  }
class C{  public VideoEditAlbumQuery privacy(String... value){  return unsafeParam("privacy",value);}  }
class C{  private String computeGlobalReadAlignment(boolean dna2ProteinMode,String globallyAlignedReference,String locallyAlignedRead,int readGlobalAlignmentLength) throws IOException {  if (readGlobalAlignmentLength < 20) {    System.err.print("\nreference:  ");    if (!dna2ProteinMode) {      for (int i=0; i < globallyAlignedReference.length(); i++) {        System.err.print(" " + globallyAlignedReference.charAt(i) + " ");      }    } else {      for (int i=0; i < globallyAlignedReference.length(); i++) {        System.err.print(" <" + globallyAlignedReference.charAt(i) + "> ");      }    }    System.err.println("\t\ttotal: " + globallyAlignedReference.length() + " letters: "+ (globallyAlignedReference.length() - Basic.countOccurrences(globallyAlignedReference,'-'))+ " gaps: "+ Basic.countOccurrences(globallyAlignedReference,'-'));    System.err.print("local read: ");    if (!dna2ProteinMode) {      for (int i=0; i < locallyAlignedRead.length(); i++) {        System.err.print(" " + locallyAlignedRead.charAt(i) + " ");      }    } else {      int i=0;      while (i < locallyAlignedRead.length()) {        if (locallyAlignedRead.charAt(i) == '[') {          System.err.print("[");          i++;        } else         System.err.print(" ");        System.err.print(String.format("%c%c%c",locallyAlignedRead.charAt(i++),locallyAlignedRead.charAt(i++),locallyAlignedRead.charAt(i++)));        if (i < locallyAlignedRead.length() && locallyAlignedRead.charAt(i) == ']') {          System.err.print("]");          i++;        } else         System.err.print(" ");      }    }    System.err.println("\t\ttotal: " + locallyAlignedRead.length() + " letters: "+ (locallyAlignedRead.length() - Basic.countOccurrences(locallyAlignedRead,'-'))+ " gaps: "+ Basic.countOccurrences(locallyAlignedRead,'-'));  }  final StringBuilder buf=new StringBuilder();  if (dna2ProteinMode) {    int localPos=0;    boolean inInsertion=false;    for (int globalPos=0; globalPos < globallyAlignedReference.length() && localPos < locallyAlignedRead.length(); globalPos++) {      if (locallyAlignedRead.charAt(localPos) == '[') {        if (inInsertion)         throw new IOException("inInsertion=true: Already in insertion");        inInsertion=true;        localPos++;      } else       if (locallyAlignedRead.charAt(localPos) == ']') {        if (!inInsertion)         throw new IOException("inInsertion=false: Not in insertion");        inInsertion=false;        localPos++;      }      if (inInsertion) {        if (globallyAlignedReference.charAt(globalPos) == '-') {          buf.append(locallyAlignedRead.charAt(localPos++));          buf.append(locallyAlignedRead.charAt(localPos++));          buf.append(locallyAlignedRead.charAt(localPos++));        } else         localPos+=3;      } else {        if (globallyAlignedReference.charAt(globalPos) == '-') {          buf.append("---");        } else {          buf.append(locallyAlignedRead.charAt(localPos++));          buf.append(locallyAlignedRead.charAt(localPos++));          buf.append(locallyAlignedRead.charAt(localPos++));        }      }    }  } else {    int localPos=0;    boolean inInsertion=false;    for (int globalPos=0; globalPos < globallyAlignedReference.length() && localPos < locallyAlignedRead.length(); globalPos++) {      if (locallyAlignedRead.charAt(localPos) == '[') {        if (inInsertion)         throw new IOException("inInsertion=true: Already in insertion");        inInsertion=true;        localPos++;      } else       if (locallyAlignedRead.charAt(localPos) == ']') {        if (!inInsertion)         throw new IOException("inInsertion=false: Not in insertion");        inInsertion=false;        localPos++;      }      if (inInsertion) {        if (globallyAlignedReference.charAt(globalPos) == '-') {          buf.append(locallyAlignedRead.charAt(localPos++));        } else         localPos++;      } else {        if (globallyAlignedReference.charAt(globalPos) == '-') {          buf.append("-");        } else {          buf.append(locallyAlignedRead.charAt(localPos++));        }      }    }  }  String result=buf.toString();  if (result.length() == readGlobalAlignmentLength)   return result; else {    int missing=readGlobalAlignmentLength - result.length();    for (int i=0; i < missing; i++) {      buf.append("-");    }    return buf.toString();  }}  }
class C{  public CMUDiphoneVoice(String name,Gender gender,Age age,String description,Locale locale,String domain,String organization,CMULexicon lexicon,URL database){  super(name,gender,age,description,locale,domain,organization,lexicon);  setRate(150f);  setPitch(100F);  setPitchRange(11F);  this.database=database;}  }
class C{  private void normalizedPowerFFT(double[] re){  double[] im=new double[re.length];  double r, i;  fft(re,im,FFT_FORWARD);  for (int j=0; j < re.length; j++) {    r=re[j] / windowFunctionSum * 2;    i=im[j] / windowFunctionSum * 2;    re[j]=r * r + i * i;  }}  }
class C{  public TrainedLTS(AllophoneSet aPhonSet,InputStream treeStream,boolean removeTrailingOneFromPhones) throws IOException, MaryConfigurationException {  this.allophoneSet=aPhonSet;  this.loadTree(treeStream);  this.removeTrailingOneFromPhones=removeTrailingOneFromPhones;}  }
class C{  public static void main(String[] args){  EnvVarDlg dlg=new EnvVarDlg(EnvironmentVariableManager.getInstance());  dlg.showDialog();}  }
class C{  public static void ensureUnarchived(Experiment experiment,Project project,DataController dc){  if (experiment != null) {    if (experiment.isArchived()) {      experiment.setArchived(false);      dc.updateExperiment(experiment,LoggingConsumer.<Success>expectSuccess(TAG,"Unarchiving experiment"));    }    if (project != null) {      if (experiment.getProjectId().equals(project.getProjectId())) {        if (project.isArchived()) {          project.setArchived(false);          dc.updateProject(project,LoggingConsumer.<Success>expectSuccess(TAG,"Unarchiving project"));        }      } else {        throw new IllegalStateException("Selected project " + project.getProjectId() + " is not the right parent of selected experiment "+ experiment.getExperimentId()+ " (should be "+ experiment.getProjectId()+ ")");      }    }  }}  }
class C{  protected PhotosSaveMarketPhotoQuery server(int value){  return unsafeParam("server",value);}  }
class C{  @Override public synchronized void mark(int readlimit){  markFbIndex=fbIndex;  markedAtStart=firstBytes == null;  in.mark(readlimit);}  }
class C{  private void load(ByteBuffer input){  magic=input.getInt();  version=input.getInt();  type=input.getInt();}  }
class C{  private static void checkValidFunction(final Object function){  if (!Thinr.runtimeChecksEnabled) {    return;  }  if (function == null) {    throw new IllegalArgumentException("Don't pass NULL.");  }  Field[] functionFields=function.getClass().getDeclaredFields();  if (functionFields.length > 0) {    for (    Field functionField : functionFields) {      if (!FUNCTION_CLASS_FIELD_WHITE_LIST.contains(functionField.getName())) {        throw new IllegalArgumentException("Don't reference outer variables and fields from Lambdas / nested classes used here." + Arrays.toString(functionFields));      }    }  }}  }
class C{  protected void resetInternalState(){  setStepStart(null);  setStepSize(minStep.multiply(maxStep).sqrt());}  }
class C{  public ValueUnitPair(Value value,Unit unit){  setValue(value);  setUnit(unit);}  }
class C{  public GoogleUserCredentialProvider(OkHttpClient client,Time time) throws LoginFailedException, RemoteServerException {  this.time=time;  this.client=client;}  }
class C{  public void connect(){  connection.connect();  this.folder=connection.getFolder();}  }
class C{  @Override public void endCDATA(Augmentations augs) throws XNIException {}  }
class C{  public String reflection_log(){  return soot.PhaseOptions.getString(options,"reflection-log");}  }
class C{  public void uploadUpdate(Context context,Account account,OCFile[] existingFiles,Integer behaviour,Boolean forceOverwrite){  Intent intent=new Intent(context,FileUploader.class);  intent.putExtra(FileUploader.KEY_ACCOUNT,account);  intent.putExtra(FileUploader.KEY_FILE,existingFiles);  intent.putExtra(FileUploader.KEY_LOCAL_BEHAVIOUR,behaviour);  intent.putExtra(FileUploader.KEY_FORCE_OVERWRITE,forceOverwrite);  context.startService(intent);}  }
class C{  SAXParserImpl(SAXParserFactoryImpl spf,Hashtable features,boolean secureProcessing) throws SAXException {  xmlReader=new JAXPSAXParser(this);  xmlReader.setFeature0(NAMESPACES_FEATURE,spf.isNamespaceAware());  xmlReader.setFeature0(NAMESPACE_PREFIXES_FEATURE,!spf.isNamespaceAware());  if (spf.isXIncludeAware()) {    xmlReader.setFeature0(XINCLUDE_FEATURE,true);  }  if (secureProcessing) {    xmlReader.setProperty0(SECURITY_MANAGER,new SecurityManager());  }  setFeatures(features);  if (spf.isValidating()) {    fInitErrorHandler=new DefaultValidationErrorHandler();    xmlReader.setErrorHandler(fInitErrorHandler);  } else {    fInitErrorHandler=xmlReader.getErrorHandler();  }  xmlReader.setFeature0(VALIDATION_FEATURE,spf.isValidating());  this.grammar=spf.getSchema();  if (grammar != null) {    XMLParserConfiguration config=xmlReader.getXMLParserConfiguration();    XMLComponent validatorComponent=null;    if (grammar instanceof XSGrammarPoolContainer) {      validatorComponent=new XMLSchemaValidator();      fSchemaValidationManager=new ValidationManager();      fUnparsedEntityHandler=new UnparsedEntityHandler(fSchemaValidationManager);      config.setDTDHandler(fUnparsedEntityHandler);      fUnparsedEntityHandler.setDTDHandler(xmlReader);      xmlReader.setDTDSource(fUnparsedEntityHandler);      fSchemaValidatorComponentManager=new SchemaValidatorConfiguration(config,(XSGrammarPoolContainer)grammar,fSchemaValidationManager);    } else {      validatorComponent=new JAXPValidatorComponent(grammar.newValidatorHandler());      fSchemaValidationManager=null;      fUnparsedEntityHandler=null;      fSchemaValidatorComponentManager=config;    }    config.addRecognizedFeatures(validatorComponent.getRecognizedFeatures());    config.addRecognizedProperties(validatorComponent.getRecognizedProperties());    config.setDocumentHandler((XMLDocumentHandler)validatorComponent);    ((XMLDocumentSource)validatorComponent).setDocumentHandler(xmlReader);    xmlReader.setDocumentSource((XMLDocumentSource)validatorComponent);    fSchemaValidator=validatorComponent;  } else {    fSchemaValidationManager=null;    fUnparsedEntityHandler=null;    fSchemaValidatorComponentManager=null;    fSchemaValidator=null;  }  fInitEntityResolver=xmlReader.getEntityResolver();}  }
class C{  public SimpleMetricGroup(GroupName name,Iterable<? extends Metric> m){  this(name);  m.forEach(null);}  }
class C{  private void initializeFragmentState(){  AddEditBookmarkFragment baseAddEditFragment=(AddEditBookmarkFragment)getFragmentManager().findFragmentByTag(BASE_ADD_EDIT_FRAGMENT_TAG);  setActionListenerOnAddEdit(baseAddEditFragment);  Fragment selectFolderFragment=getFragmentManager().findFragmentByTag(BASE_SELECT_FOLDER_FRAGMENT_TAG);  if (selectFolderFragment != null) {    setActionListenerOnFolderSelection((SelectBookmarkFolderFragment)selectFolderFragment);    FragmentTransaction fragmentTransaction=getFragmentManager().beginTransaction();    fragmentTransaction.hide(baseAddEditFragment);    Fragment addFolderFragment=getFragmentManager().findFragmentByTag(ADD_FOLDER_FRAGMENT_TAG);    if (addFolderFragment != null) {      fragmentTransaction.hide(selectFolderFragment);      setActionListenerOnAddEdit((AddEditBookmarkFragment)addFolderFragment);      Fragment addFolderSelectFolderFragment=getFragmentManager().findFragmentByTag(ADD_FOLDER_SELECT_FOLDER_FRAGMENT_TAG);      if (addFolderSelectFolderFragment != null) {        setActionListenerOnFolderSelection((SelectBookmarkFolderFragment)addFolderSelectFolderFragment);        fragmentTransaction.hide(addFolderFragment);        fragmentTransaction.show(addFolderSelectFolderFragment);      } else {        fragmentTransaction.show(addFolderFragment);      }    } else {      fragmentTransaction.show(selectFolderFragment);    }    fragmentTransaction.commit();  }}  }
class C{  public static X509Certificate[] createCertificateChain(String certChainPEM){  AssertUtil.assertNotNull(certChainPEM,"certChainPEM should not be null.");  List<X509Certificate> chain=new ArrayList<>();  try (PEMParser parser=new PEMParser(new StringReader(certChainPEM))){    JcaX509CertificateConverter converter=new JcaX509CertificateConverter();    X509CertificateHolder certificateHolder;    while ((certificateHolder=(X509CertificateHolder)parser.readObject()) != null) {      chain.add(converter.getCertificate(certificateHolder));    }  } catch (  IOException|CertificateException e) {    throw new RuntimeException("Failed to create certificate: " + certChainPEM,e);  }  if (chain.isEmpty()) {    throw new RuntimeException("A valid certificate was not found: " + certChainPEM);  }  return chain.toArray(new X509Certificate[chain.size()]);}  }
class C{  protected void drawLabels(Canvas c,float pos,PointF anchor){  final float labelRotationAngleDegrees=mXAxis.getLabelRotationAngle();  float[] position=new float[]{0f,0f};  for (int i=mMinX; i <= mMaxX; i+=mXAxis.mAxisLabelModulus) {    position[0]=i;    mTrans.pointValuesToPixel(position);    if (mViewPortHandler.isInBoundsX(position[0])) {      String label=mXAxis.getValues().get(i);      if (mXAxis.isAvoidFirstLastClippingEnabled()) {        if (i == mXAxis.getValues().size() - 1 && mXAxis.getValues().size() > 1) {          float width=Utils.calcTextWidth(mAxisLabelPaint,label);          if (width > mViewPortHandler.offsetRight() * 2 && position[0] + width > mViewPortHandler.getChartWidth())           position[0]-=width / 2;        } else         if (i == 0) {          float width=Utils.calcTextWidth(mAxisLabelPaint,label);          position[0]+=width / 2;        }      }      drawLabel(c,label,i,position[0],pos,anchor,labelRotationAngleDegrees);    }  }}  }
class C{  public TObjectHash(int initialCapacity){  super(initialCapacity);  this._hashingStrategy=this;}  }
class C{  @Override public long longValue(){  return (long)doubleValue();}  }
class C{  private long calculateBezier(float interpolatedTime,float point0,float point1,float point2){  return Math.round((Math.pow((1 - interpolatedTime),2) * point0) + (2 * (1 - interpolatedTime) * interpolatedTime* point1) + (Math.pow(interpolatedTime,2) * point2));}  }
class C{  public static String byteCountToDisplaySize(long size){  return byteCountToDisplaySize(BigInteger.valueOf(size));}  }
class C{  public static int hash(double value){  return new Double(value).hashCode();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ResurrectBase_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201240,skillcaster,skillname);}  }
class C{  public void addWord(String sWord){  if (!AddSubStrings) {    WordDefinition wd=new WordDefinition(sWord);    WordDefs.add(wd);    return;  }  int iLen=sWord.length();  for (int iNGramSize=1; iNGramSize <= iLen; iNGramSize++) {    for (int iCurStart=0; iCurStart < iLen; iCurStart++) {      if (iLen < iCurStart + iNGramSize)       break;      String sCurNGram=sWord.substring(iCurStart,iCurStart + iNGramSize);      if (sCurNGram.length() <= this.MaxWordSize) {        WordDefinition wdDef=new WordDefinition(sCurNGram);        this.WordDefs.add(wdDef);      }    }  }}  }
class C{  public void tabClosingEffect(long time,int id){  if (mStackTabs == null)   return;  int newIndex=0;  boolean needAnimation=false;  for (int i=0; i < mStackTabs.length; ++i) {    if (mStackTabs[i].getId() == id) {      needAnimation|=!mStackTabs[i].isDying();      mStackTabs[i].setDying(true);    } else {      mStackTabs[i].setNewIndex(newIndex++);    }  }  if (needAnimation) {    mScrollOffsetForDyingTabs=mScrollOffset;    mSpacing=computeSpacing(newIndex);    startAnimation(time,OverviewAnimationType.DISCARD);  }  if (newIndex == 0) {    mIsDying=true;  }}  }
class C{  public String loadDocumentDatelineToString(String sDocID){  return loadDocumentElement(sDocID,DATELINE_TAG);}  }
class C{  public static final void expelAlliance(Player expelledPlayer,Player expelGiver){  Preconditions.checkNotNull(expelledPlayer,"Expelled player should not be null");  Preconditions.checkNotNull(expelGiver,"ExpelGiver player should not be null");  Preconditions.checkArgument(expelGiver.isInLeague(),"Expelled player should be in league");  Preconditions.checkArgument(expelledPlayer.isInLeague(),"ExpelGiver should be in league");  Preconditions.checkArgument(expelGiver.getPlayerAlliance2().getLeague().isLeader(expelGiver.getPlayerAlliance2()),"ExpelGiver alliance should be the leader of league");  Preconditions.checkArgument(expelGiver.getPlayerAlliance2().isLeader(expelGiver),"ExpelGiver should be the leader of alliance");  PlayerAlliance alliance=expelGiver.getPlayerAlliance2();  League league=alliance.getLeague();  league.onEvent(new LeagueLeftEvent(league,expelledPlayer.getPlayerAlliance2(),LeaveReson.EXPEL));}  }
class C{  public static Map<String,Object> updateContentAssoc(DispatchContext dctx,Map<String,? extends Object> rcontext){  Map<String,Object> context=UtilMisc.makeMapWritable(rcontext);  context.put("entityOperation","_UPDATE");  List<String> targetOperationList=ContentWorker.prepTargetOperationList(context,"_UPDATE");  List<String> contentPurposeList=ContentWorker.prepContentPurposeList(context);  context.put("targetOperationList",targetOperationList);  context.put("contentPurposeList",contentPurposeList);  context.put("skipPermissionCheck",null);  Map<String,Object> result=updateContentAssocMethod(dctx,context);  return result;}  }
class C{  public static boolean orderedCCW(S2Point a,S2Point b,S2Point c,S2Point o){  int sum=0;  if (robustCCW(b,o,a) >= 0) {    ++sum;  }  if (robustCCW(c,o,b) >= 0) {    ++sum;  }  if (robustCCW(a,o,c) > 0) {    ++sum;  }  return sum >= 2;}  }
class C{  @PUT @Path("applications/{applicationName}/experiments/{experimentLabel}/users/{userID}") @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) @Timed public Response updateAssignment(@PathParam("applicationName") @ApiParam(value="Application Name") final Application.Name applicationName,@PathParam("experimentLabel") @ApiParam(value="Experiment Label") final Experiment.Label experimentLabel,@PathParam("userID") @ApiParam(value="User ID") final User.ID userID,@ApiParam(value="Submitted Data") final Map<String,Object> submittedData,@QueryParam("context") @DefaultValue("PROD") @ApiParam(value="context for the experiment, eg \"QA\", \"PROD\"") final Context context){  if (submittedData == null) {    throw new IllegalArgumentException("Assignment JSON not found in request body");  }  Label submittedLabel;  boolean overwrite;  if (submittedData.containsKey("assignment")) {    String submittedAssignment=(String)submittedData.get("assignment");    submittedLabel=submittedAssignment != null ? Label.valueOf(submittedAssignment) : null;  } else {    throw new IllegalArgumentException("Request entity JSON must contain an \"assignment\" property");  }  overwrite=submittedData.containsKey("overwrite") && (boolean)submittedData.get("overwrite");  Assignment response=assignments.putAssignment(userID,applicationName,experimentLabel,context,submittedLabel,overwrite);  return httpHeader.headers().entity(toMap(response)).build();}  }
class C{  synchronized public void performHostDiscovery(MetricRegistry metricRegistry){  if (_hostDiscoveryPerformed) {    return;  }  Iterable<String> hosts=null;  if (_seeds != null) {    hosts=Splitter.on(',').trimResults().split(_seeds);  }  if (_zooKeeperServiceName != null) {    checkState(hosts == null,"Too many host discovery mechanisms configured.");    checkState(_curator != null,"ZooKeeper host discovery is configured but withZooKeeperHostDiscovery() was not called.");    try (HostDiscovery hostDiscovery=new ZooKeeperHostDiscovery(_curator,_zooKeeperServiceName,metricRegistry)){      List<String> hostList=Lists.newArrayList();      for (      ServiceEndPoint endPoint : hostDiscovery.getHosts()) {        hostList.add(endPoint.getId());        if (_partitioner == null && endPoint.getPayload() != null) {          JsonNode payload=JsonHelper.fromJson(endPoint.getPayload(),JsonNode.class);          String partitioner=payload.path("partitioner").textValue();          if (partitioner != null) {            _partitioner=CassandraPartitioner.fromClass(partitioner);          }        }      }      hosts=hostList;    } catch (    IOException ex) {    }  }  checkState(hosts != null,"No Cassandra host discovery mechanisms are configured.");  checkState(!Iterables.isEmpty(hosts),"Unable to discover any Cassandra seed instances.");  checkState(_partitioner != null,"Cassandra partitioner not configured or discoverable.");  _seeds=Joiner.on(',').join(hosts);  _hostDiscoveryPerformed=true;}  }
class C{  public ConfigurationParser() throws ParserConfigurationException {  this(false,Thread.currentThread().getContextClassLoader());}  }
class C{  public static long[] transformLongArray(Long[] source){  long[] destin=new long[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  public boolean hasNonUidOutputIdScheme(){  return outputIdScheme != null && !IdentifiableProperty.UID.equals(outputIdScheme);}  }
class C{  protected boolean isValidUser(String user){  return USER_PATTERN.matcher(user).matches();}  }
class C{  public static boolean isNotNull(final Object object){  boolean isNotNull=false;  if (object != null) {    isNotNull=true;  }  return isNotNull;}  }
class C{  @Override public Fraction multiply(final int i){  return multiply(new Fraction(i));}  }
class C{  public boolean isApplicable(){  return getViewer() instanceof GraphView && (((GraphView)getViewer()).getSelectedNodes().size() > 0 || ((GraphView)getViewer()).getSelectedEdges().size() > 0);}  }
class C{  private void decode(byte[] data,int width,int height){  long start=System.currentTimeMillis();  Result rawResult=null;  PlanarYUVLuminanceSource source=activity.getCameraManager().buildLuminanceSource(data,width,height);  if (source != null) {    BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));    try {      rawResult=multiFormatReader.decodeWithState(bitmap);    } catch (    ReaderException re) {    } finally {      multiFormatReader.reset();    }  }  Handler handler=activity.getHandler();  if (rawResult != null) {    long end=System.currentTimeMillis();    Log.d(TAG,"Found barcode in " + (end - start) + " ms");    if (handler != null) {      Message message=Message.obtain(handler,R.id.decode_succeeded,rawResult);      Bundle bundle=new Bundle();      bundleThumbnail(source,bundle);      message.setData(bundle);      message.sendToTarget();    }  } else {    if (handler != null) {      Message message=Message.obtain(handler,R.id.decode_failed);      message.sendToTarget();    }  }}  }
class C{  public boolean hasChild(Spatial spat){  if (children.contains(spat)) {    return true;  }  for (int i=0, max=getQuantity(); i < max; i++) {    Spatial child=children.get(i);    if (child instanceof Node && ((Node)child).hasChild(spat)) {      return true;    }  }  return false;}  }
class C{  public SparseGradient toDegrees(){  return new SparseGradient(FastMath.toDegrees(value),FastMath.toDegrees(1.0),derivatives);}  }
class C{  public boolean match(Context context,IEntryHolder entry,ITemplateHolder template,int skipAlreadyMatchedFixedPropertyIndex,String skipAlreadyMatchedIndexPath,boolean safeEntry){  MatchResult res=template.match(_cacheManager,entry,skipAlreadyMatchedFixedPropertyIndex,skipAlreadyMatchedIndexPath,safeEntry,context,_regexCache);  return res != MatchResult.NONE;}  }
class C{  protected void drawXAxis(Graphics2D gc){}  }
class C{  public Matrix inverse(){  return solve(identity(m,m));}  }
class C{  public ConnectionConsumer createDurableConnectionConsumer(Topic topic,String subscriptionName,String messageSelector,ServerSessionPool sessionPool,int maxMessages) throws JMSException {  throw new IllegalStateException("Forbidden call on a QueueConnection.");}  }
class C{  @Deprecated public ItemStack(final int type,final int amount,final short damage){  this.type=type;  this.amount=amount;  this.durability=damage;}  }
class C{  public static void unsetHistory(){  History=false;}  }
class C{  public WallRepostQuery repost(UserActor actor,String object){  return new WallRepostQuery(getClient(),actor,object);}  }
class C{  public boolean containsCause(Class<? extends Throwable> exceptionClass){  return containsCause(exceptionClass,getCauses());}  }
class C{  public static void disableConsoleLogging(){  consoleLoggingEnabled=false;}  }
class C{  public ScriptingExecutor<T> scriptingExecutor(){  return remotingConfigurer.proxy();}  }
class C{  @Override public void propertyChange(PropertyChangeEvent evt){  String prop=evt.getPropertyName();  if ("AccessibleValue".equals(prop) || "AccessibleText".equals(prop) || ("AccessibleVisibleData".equals(prop) && evt.getSource().getClass().getName().contains("JList"))) {    _modified=true;  }}  }
class C{  private static boolean checkNullForMeasures(Object object){  Object[] measures=(Object[])object;  for (  Object measure : measures) {    if (null != measure) {      return false;    }  }  return true;}  }
class C{  public boolean hasSuperClassAccess(){  return getSuperClassAccessOpt().getNumChild() != 0;}  }
class C{  @SuppressWarnings("serial") public RequestParams(final String key,final String value){  this(new HashMap<String,String>(){{      put(key,value);    }  });}  }
class C{  public static byte[] hexStringToByte(String hex){  byte[] bts=new byte[hex.length() / 2];  for (int i=0; i < bts.length; i++) {    bts[i]=(byte)Integer.parseInt(hex.substring(2 * i,2 * i + 2),16);  }  return bts;}  }
class C{  private void eliminateFallthroughIfs(Body body){  boolean changed=false;  do {    changed=false;    IfStmt ifs=null;    Iterator<Unit> unitIt=body.getUnits().snapshotIterator();    while (unitIt.hasNext()) {      Unit u=unitIt.next();      if (ifs != null && ifs.getTarget() == u) {        body.getUnits().remove(ifs);        changed=true;      }      ifs=null;      if (u instanceof IfStmt)       ifs=(IfStmt)u;    }  } while (changed);}  }
class C{  public static boolean hasJellyBean(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN;}  }
class C{  public static Paint newGuidelinePaint(@NonNull Resources resources){  final Paint paint=new Paint();  paint.setStyle(Paint.Style.STROKE);  paint.setStrokeWidth(resources.getDimension(R.dimen.guideline_thickness));  paint.setColor(resources.getColor(R.color.guideline));  return paint;}  }
class C{  @Override public void undoAction(UndoInterface undoRedoObject){  if ((attributeComboBox != null) && (undoRedoObject != null)) {    if (undoRedoObject.getOldValue() instanceof String) {      String oldValue=(String)undoRedoObject.getOldValue();      attributeComboBox.setSelectedItem(oldValue);    }  }}  }
class C{  public static boolean isChinese(int codePoint){  return codePoint >= ChineseLanguageConstants.CHINESE_START && codePoint <= ChineseLanguageConstants.CHINESE_END;}  }
class C{  private void initializeCounterFile(){  try {    openCounterDataOutputStream();    dOutput.write("0");    dOutput.newLine();    dOutput.flush();    if (LOG.isDebugEnabled())     LOG.debug("initializeCounterFile() - The counter file has been updated with zero");  } catch (  IOException e) {    LOG.error("initializeCounterFile() - Error while trying to write in the counter file");  }catch (  DataFallbackException e) {    LOG.error("initializeCounterFile() - The counter file could not be opened");  } finally {    try {      closeCounterDataOutputStream();    } catch (    DataFallbackException ex) {      LOG.error("initializeCounterFile() - The counter file could not be closed");    }  }}  }
class C{  private static String doNormalize(String filename,char separator,boolean keepSeparator){  if (filename == null) {    return null;  }  int size=filename.length();  if (size == 0) {    return filename;  }  int prefix=getPrefixLength(filename);  if (prefix < 0) {    return null;  }  char[] array=new char[size + 2];  filename.getChars(0,filename.length(),array,0);  char otherSeparator=separator == SYSTEM_SEPARATOR ? OTHER_SEPARATOR : SYSTEM_SEPARATOR;  for (int i=0; i < array.length; i++) {    if (array[i] == otherSeparator) {      array[i]=separator;    }  }  boolean lastIsDirectory=true;  if (array[size - 1] != separator) {    array[size++]=separator;    lastIsDirectory=false;  }  for (int i=prefix + 1; i < size; i++) {    if (array[i] == separator && array[i - 1] == separator) {      System.arraycopy(array,i,array,i - 1,size - i);      size--;      i--;    }  }  for (int i=prefix + 1; i < size; i++) {    if (array[i] == separator && array[i - 1] == '.' && (i == prefix + 1 || array[i - 2] == separator)) {      if (i == size - 1) {        lastIsDirectory=true;      }      System.arraycopy(array,i + 1,array,i - 1,size - i);      size-=2;      i--;    }  }  outer:   for (int i=prefix + 2; i < size; i++) {    if (array[i] == separator && array[i - 1] == '.' && array[i - 2] == '.' && (i == prefix + 2 || array[i - 3] == separator)) {      if (i == prefix + 2) {        return null;      }      if (i == size - 1) {        lastIsDirectory=true;      }      int j;      for (j=i - 4; j >= prefix; j--) {        if (array[j] == separator) {          System.arraycopy(array,i + 1,array,j + 1,size - i);          size-=i - j;          i=j + 1;          continue outer;        }      }      System.arraycopy(array,i + 1,array,prefix,size - i);      size-=i + 1 - prefix;      i=prefix + 1;    }  }  if (size <= 0) {    return "";  }  if (size <= prefix) {    return new String(array,0,size);  }  if (lastIsDirectory && keepSeparator) {    return new String(array,0,size);  }  return new String(array,0,size - 1);}  }
class C{  @Override public void process(WatchedEvent event){  if (Event.EventType.None == event.getType() && Event.KeeperState.Expired == event.getState()) {    Set<String> keySet=new HashSet<String>(listeners.keySet());    for (    String logSegmentsPath : keySet) {      scheduleTask(logSegmentsPath,new ReadLogSegmentsTask(logSegmentsPath,this),0L);    }    return;  }  String path=event.getPath();  if (null == path) {    return;  }switch (event.getType()) {case NodeDeleted:    listeners.remove(path);  break;case NodeChildrenChanged:new ReadLogSegmentsTask(path,this).run();break;default :break;}}  }
class C{  private void calculateCallbackMethods(ARSCFileParser resParser,LayoutFileParser lfp) throws IOException {  AnalyzeJimpleClass jimpleClass=null;  boolean hasChanged=true;  while (hasChanged) {    hasChanged=false;    soot.G.reset();    initializeSoot();    createMainMethod();    if (jimpleClass == null) {      if (callbackClasses == null) {        jimpleClass=new AnalyzeJimpleClass(entrypoints);      } else {        jimpleClass=new AnalyzeJimpleClass(entrypoints,callbackClasses);      }      jimpleClass.collectCallbackMethods();      lfp.parseLayoutFile(apkFileLocation,entrypoints);    } else     jimpleClass.collectCallbackMethodsIncremental();    PackManager.v().getPack("wjpp").apply();    PackManager.v().getPack("cg").apply();    PackManager.v().getPack("wjtp").apply();    for (    Entry<String,Set<SootMethodAndClass>> entry : jimpleClass.getCallbackMethods().entrySet()) {      if (this.callbackMethods.containsKey(entry.getKey())) {        if (this.callbackMethods.get(entry.getKey()).addAll(entry.getValue()))         hasChanged=true;      } else {        this.callbackMethods.put(entry.getKey(),new HashSet<>(entry.getValue()));        hasChanged=true;      }    }    if (entrypoints.addAll(jimpleClass.getDynamicManifestComponents()))     hasChanged=true;  }  for (  Entry<String,Set<Integer>> lcentry : jimpleClass.getLayoutClasses().entrySet()) {    final SootClass callbackClass=Scene.v().getSootClass(lcentry.getKey());    for (    Integer classId : lcentry.getValue()) {      AbstractResource resource=resParser.findResource(classId);      if (resource instanceof StringResource) {        final String layoutFileName=((StringResource)resource).getValue();        Set<String> callbackMethods=lfp.getCallbackMethods().get(layoutFileName);        if (callbackMethods != null) {          for (          String methodName : callbackMethods) {            final String subSig="void " + methodName + "(android.view.View)";            SootClass currentClass=callbackClass;            while (true) {              SootMethod callbackMethod=currentClass.getMethodUnsafe(subSig);              if (callbackMethod != null) {                addCallbackMethod(callbackClass.getName(),new AndroidMethod(callbackMethod));                break;              }              if (!currentClass.hasSuperclass()) {                System.err.println("Callback method " + methodName + " not found in class "+ callbackClass.getName());                break;              }              currentClass=currentClass.getSuperclass();            }          }        }        Set<LayoutControl> controls=lfp.getUserControls().get(layoutFileName);        if (controls != null)         for (        LayoutControl lc : controls)         registerCallbackMethodsForView(callbackClass,lc);      } else       System.err.println("Unexpected resource type for layout class");    }  }{    Set<SootMethodAndClass> callbacksPlain=new HashSet<SootMethodAndClass>();    for (    Set<SootMethodAndClass> set : this.callbackMethods.values())     callbacksPlain.addAll(set);    System.out.println("Found " + callbacksPlain.size() + " callback methods for "+ this.callbackMethods.size()+ " components");  }}  }
class C{  public static void registerSpaceMBean(String spaceName,SpaceImpl spaceImpl){  MBeanServer mBeanServer=getMBeanServer(spaceImpl.getContainerName());  if (mBeanServer == null)   return;  if (m_MBeansRepository.containsKey(spaceImpl.getServiceName()))   return;  try {    IJSpace remoteSpaceProxy=spaceImpl.getSingleProxy();    JMXSpace mbean=new JMXSpace(remoteSpaceProxy,JSPACE_MBEAN_DESCR_URL);    ObjectName objName=ObjectNameFactory.buildObjectName(DEFAULT_DOMAIN,mbean.getType(),spaceImpl.getContainerName() + '-' + spaceName);    m_MBeansRepository.put(spaceImpl.getServiceName(),mBeanServer.registerMBean(mbean,objName));    JMXSpaceExt mbeanExt=new JMXSpaceExt(remoteSpaceProxy,mbean.m_spaceConfig,JSPACE_EXT_MBEAN_DESCR_URL);    ObjectName objNameExt=ObjectNameFactory.buildObjectName(DEFAULT_DOMAIN,mbeanExt.getType(),spaceImpl.getContainerName() + '-' + spaceName);    m_MBeansRepository.put(spaceImpl.getServiceName() + "Ext",mBeanServer.registerMBean(mbeanExt,objNameExt));    if (_logger.isLoggable(Level.CONFIG)) {      _logger.config("\nSpace <" + spaceImpl.getServiceName() + "> MBean was registered successfully.\n");    }  } catch (  InstanceAlreadyExistsException e) {    if (_logger.isLoggable(Level.CONFIG)) {      _logger.config("Space MBean is already registered for <" + spaceImpl.getServiceName() + ">");    }  }catch (  Exception ex) {    if (_logger.isLoggable(Level.WARNING)) {      _logger.log(Level.WARNING,"Failed to register MBean for <" + spaceImpl.getServiceName() + "> space.",ex);    }  }}  }
class C{  @Override public void updateClassifications(String[] names,List<UpdateItem> updateItemList,ProgressListener progressListener) throws IOException, CanceledException {  final UpdateItemList updateItems=(UpdateItemList)updateItemList;  final int numClassifications=names.length;  long maxProgress=0;  for (int i=0; i < numClassifications; i++) {    maxProgress+=updateItems.getClassIds(i).size();  }  progressListener.setMaximum(maxProgress);  RMA3FileModifier rma3FileModifier=new RMA3FileModifier(fileName);  rma3FileModifier.startModification();  for (int i=0; i < numClassifications; i++) {    if (Basic.toString(ClassificationType.values()," ").contains(names[i])) {      ClassificationType classificationType=ClassificationType.valueOf(names[i]);      final Map<Integer,ListOfLongs> classId2Locations=new HashMap<>();      for (      Integer classId : updateItems.getClassIds(i)) {        int weightedSize=updateItems.getSize(i,classId);        final ListOfLongs positions=new ListOfLongs();        classId2Locations.put(classId,positions);        if (weightedSize > 0) {          for (UpdateItem item=updateItems.getFirst(i,classId); item != null; item=updateItems.getUpdateItem(item.getNextInClassification(i))) {            positions.add(item.getReadUId());          }        }        progressListener.incrementProgress();      }      rma3FileModifier.updateClassification(classificationType,classId2Locations);    } else     System.err.println("Unsupported classification type: " + names[i]);  }  rma3FileModifier.finishModification();}  }
class C{  protected Set<Map<String,String>> generateSlices(PhysicalTableDictionary tableDictionary,UriInfo uriInfo) throws BadApiRequestException {  if (tableDictionary.isEmpty()) {    String msg=EMPTY_DICTIONARY.logFormat("Slices cannot be found. Physical Table");    throw new BadApiRequestException(msg);  }  Set<Map<String,String>> generated=tableDictionary.entrySet().stream().map(null).collect(Collectors.toCollection(null));  LOG.trace("Generated set of slices: {}",generated);  return generated;}  }
class C{  protected Object cloneBody(){  if (Body == null) {    return null;  }  byte[] body=(byte[])Body;  byte[] cloned=new byte[body.length];  System.arraycopy(body,0,cloned,0,body.length);  return cloned;}  }
class C{  public VideoDeleteAlbumQuery(VkApiClient client,UserActor actor,int albumId){  super(client,"video.deleteAlbum",OkResponse.class);  accessToken(actor.getAccessToken());  albumId(albumId);}  }
class C{  public void addImplements(Access node){  List<Access> list=(parent == null || state == null) ? getImplementsListNoTransform() : getImplementsList();  list.addChild(node);}  }
class C{  private static Map<String,VirtualFile> findSiblings(@Nullable VirtualFile directory,Project project,Set<VirtualFile> seen){  if (directory == null) {    return Collections.emptyMap();  } else {    if (seen.contains(directory)) {      return findSiblings(null,project,seen);    }    seen.add(directory);    VirtualFile settings=directory.findChild(SdkConstants.FN_SETTINGS_GRADLE);    if (settings == null) {      return findSiblings(directory.getParent(),project,seen);    } else {      return GradleModuleImporter.getSubProjects(settings,project);    }  }}  }
class C{  static boolean isPlaintext(Buffer buffer){  try {    Buffer prefix=new Buffer();    long byteCount=buffer.size() < 64 ? buffer.size() : 64;    buffer.copyTo(prefix,0,byteCount);    for (int i=0; i < 16; i++) {      if (prefix.exhausted()) {        break;      }      int codePoint=prefix.readUtf8CodePoint();      if (Character.isISOControl(codePoint) && !Character.isWhitespace(codePoint)) {        return false;      }    }    return true;  } catch (  EOFException e) {    return false;  }}  }
class C{  public TrackWiggles(String filename,GenomicCoords gc,int bdgDataColIdx) throws IOException {  this.setGc(gc);  this.setFilename(filename);  this.bdgDataColIdx=bdgDataColIdx;  if (Utils.getFileTypeFromName(this.getFilename()).equals(TrackFormat.BIGWIG)) {    this.bigWigReader=new BBFileReader(this.getFilename());    if (!this.bigWigReader.getBBFileHeader().isBigWig()) {      throw new RuntimeException("Invalid file type " + this.getFilename());    }  }  this.update();}  }
class C{  @Override public String toString(){  return name;}  }
class C{  public synchronized int size(){  return count;}  }
class C{  public AemDialog open(final By clickableArea){  open(currentScope.findElement(clickableArea));  return this;}  }
class C{  TypeNode typeNode(int id,Type type,ClassHierarchy hierarchy){  if (type == null || hierarchy == null) {    throw new InternalTypingException();  }  this.id=id;  this.hierarchy=hierarchy;  type.apply(this);  return result;}  }
class C{  public boolean contains(WriteModifiers modifiers){  return super.contains(modifiers);}  }
class C{  public List<Menu> loadMenu(User me,int id,String name){  Beans<Menu> bs=null;  Menu m=null;  if (name != null) {    m=Menu.load(id,name);    if (m != null) {      bs=m.submenu();    }  } else {    bs=Menu.submenu(id);  }  List<Menu> list=bs == null ? null : bs.getList();  Menu.filterAccess(list,me);  return list;}  }
class C{  public PhoneDuration(float mean,float standardDeviation){  this.mean=mean;  this.standardDeviation=standardDeviation;}  }
class C{  protected void initComparator(){  if (Comparator == null)   Comparator=new NGramCachedGraphComparator();}  }
class C{  @Override public void createIndex(){  Clusterer=new AverageLinkClusterer();  initComparator();  ProgressEvent peCreation=new ProgressEvent("Index creation",0.0);  if (Notifier != null)   Notifier.Notify(this,peCreation.updateSubtask("Calculating clusters..."));  Clusterer.calculateClusters(NamedObjects,Comparator);  if (Notifier != null)   Notifier.Notify(this,peCreation.updateSubtask("Getting hierarchy..."));  Hierarchy=Clusterer.getHierarchy();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Protect_INTERVAL_A_TO_ME(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200702,skillcaster,num0,skillname);}  }
class C{  protected void reset() throws XNIException {  int count=fComponents.size();  for (int i=0; i < count; i++) {    XMLComponent c=(XMLComponent)fComponents.get(i);    c.reset(this);  }}  }
class C{  public static Map<String,Object> testRandomAuthorize(DispatchContext dctx,Map<String,? extends Object> context){  Locale locale=(Locale)context.get("locale");  Map<String,Object> result=ServiceUtil.returnSuccess();  String refNum=UtilDateTime.nowAsString();  Random r=new Random();  int i=r.nextInt(9);  if (i < 5 || i % 2 == 0) {    result.put("authResult",Boolean.TRUE);    result.put("authFlag","A");  } else {    result.put("authResult",Boolean.FALSE);    result.put("authFlag","D");  }  result.put("processAmount",context.get("processAmount"));  result.put("authRefNum",refNum);  result.put("authAltRefNum",refNum);  result.put("authCode","100");  result.put("authMessage",UtilProperties.getMessage(resource,"AccountingPaymentTestCapture",locale));  return result;}  }
class C{  private void initialiseLogger(){  if (System.getProperty(LOG_FILE_CONFIG_SYSTEM_PROPERTY) == null)   System.setProperty(LOG_FILE_CONFIG_SYSTEM_PROPERTY,getProjectPath() + DEFAULT_LOG_CONFIG_FILE);  System.setProperty(LOG_FILE_OUTPUT_SYSTEM_PROPERTY,getPath(LOGGING_FILE_PATH));  if (!(new File(System.getProperty(LOG_FILE_CONFIG_SYSTEM_PROPERTY))).exists()) {    LoggerFactory.getLogger(ConfigProperties.class).error(ErrorMessage.NO_LOG_CONFIG_FILE.getMessage(System.getProperty(LOG_FILE_CONFIG_SYSTEM_PROPERTY)));  } else {    LOG=LoggerFactory.getLogger(ConfigProperties.class);    LOG.info("Logging configuration file in use:[" + System.getProperty(LOG_FILE_CONFIG_SYSTEM_PROPERTY) + "]");  }}  }
class C{  public SimpleSimilarity(double dInit){  Simil=Double.valueOf(dInit);}  }
class C{  public static SM_SYSTEM_MESSAGE _STR_MSG_Heal_TO_ME(int num0){  return new SM_SYSTEM_MESSAGE(1390216,num0);}  }
class C{  public BlurDrawable(Activity activity){  this(activity.getWindow().getDecorView());}  }
class C{  private static String[] splitWorker(String str,String separatorChars,int max,boolean preserveAllTokens){  if (str == null) {    return null;  }  int len=str.length();  if (len == 0) {    return EMPTY_STRING_ARRAY;  }  List list=new ArrayList();  int sizePlus1=1;  int i=0, start=0;  boolean match=false;  boolean lastMatch=false;  if (separatorChars == null) {    while (i < len) {      if (Character.isWhitespace(str.charAt(i))) {        if (match || preserveAllTokens) {          lastMatch=true;          if (sizePlus1++ == max) {            i=len;            lastMatch=false;          }          list.add(str.substring(start,i));          match=false;        }        start=++i;        continue;      }      lastMatch=false;      match=true;      i++;    }  } else   if (separatorChars.length() == 1) {    char sep=separatorChars.charAt(0);    while (i < len) {      if (str.charAt(i) == sep) {        if (match || preserveAllTokens) {          lastMatch=true;          if (sizePlus1++ == max) {            i=len;            lastMatch=false;          }          list.add(str.substring(start,i));          match=false;        }        start=++i;        continue;      }      lastMatch=false;      match=true;      i++;    }  } else {    while (i < len) {      if (separatorChars.indexOf(str.charAt(i)) >= 0) {        if (match || preserveAllTokens) {          lastMatch=true;          if (sizePlus1++ == max) {            i=len;            lastMatch=false;          }          list.add(str.substring(start,i));          match=false;        }        start=++i;        continue;      }      lastMatch=false;      match=true;      i++;    }  }  if (match || (preserveAllTokens && lastMatch)) {    list.add(str.substring(start,i));  }  return (String[])list.toArray(new String[list.size()]);}  }
class C{  @Override public int hashCode(){  return fDomain.hashCode() + fKey.hashCode();}  }
class C{  public void addBodyDecl(BodyDecl node){  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();  list.addChild(node);}  }
class C{  public Jim2Mov(ImageProvider ip,MovieInfoProvider mip){  this.ip=ip;  this.mip=mip;  itm=new ImagesToMovie(this);}  }
class C{  public void onActivityResult(int requestCode,int resultCode,Intent data){  if (mInitializationComplete) {    mActivityDelegate.onActivityResultWithNative(requestCode,resultCode,data);  } else {    if (mPendingActivityResults == null) {      mPendingActivityResults=new ArrayList<ActivityResult>(1);    }    mPendingActivityResults.add(new ActivityResult(requestCode,resultCode,data));  }}  }
class C{  public Result withMetricValue(MetricColumn metricColumn,Object value){  Map<MetricColumn,Object> newMetricValues=new LinkedHashMap<>(metricValues);  newMetricValues.put(metricColumn,value);  return new Result(dimensionRows,newMetricValues,timeStamp);}  }
class C{  public String lookupText(String inputtype,String outputtype,String locale,String voice,String inputtext) throws SQLException {  return lookupText(inputtype,outputtype,locale,voice,null,null,null,inputtext);}  }
class C{  private static void addVerticalSmallSpring(Path2D.Float path,int x0,int y1,int y2){  int springHeight=2;  int springWidth=2;  int distance=Math.abs(y2 - y1);  int numSprings=(distance / (springHeight));  int leftOver=(distance - (numSprings * springHeight)) / 2;  path.lineTo(x0,y1);  path.lineTo(x0,y1 - leftOver);  int count=0;  if (y1 > y2) {    for (int y=y1 - leftOver; y > y2 + leftOver; y-=springHeight) {      int x=(count % 2 == 0) ? x0 - springWidth : x0 + springWidth;      path.lineTo(x,y);      count++;    }  } else {    for (int y=y1 + leftOver; y < y2 - leftOver; y+=springHeight) {      int x=(count % 2 == 0) ? x0 - springWidth : x0 + springWidth;      path.lineTo(x,y);      count++;    }  }  path.lineTo(x0,y2 + leftOver);  path.lineTo(x0,y2);}  }
class C{  public String findTitleFormattingTag(){  bobcatWait.withTimeout(Timeouts.MEDIUM).until(ExpectedConditions.visibilityOf(currentScope));  WebElement titleTagFound=currentScope.findElement(TITLE_TAG_BY);  return titleTagFound.getTagName();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_PAY_ACCOUNT_OTHER(String value0,long highestValue){  return new SM_SYSTEM_MESSAGE(1390186,value0,highestValue);}  }
class C{  public static GenericValue searchDuplicatedAncestor(String productId,String productIdKey,String bomType,Date inDate,Delegator delegator,LocalDispatcher dispatcher,GenericValue userLogin) throws GenericEntityException {  return searchDuplicatedAncestor(productId,productIdKey,null,bomType,inDate,delegator,dispatcher,userLogin);}  }
class C{  public final void testWriteLine(){  FallbackFileController fFileController=new FallbackFileController(PATH);  FallbackImpl fallbackImpl=new FallbackImpl();  try {    fFileController.openFallbackOutputStream();    fFileController.writeLine(fallbackImpl);    fFileController.closeFallbackOutputStream();  } catch (  DataFallbackException e) {    fail("An error has ocurred while trying to write in the fallback log file");  }  assertFalse(fFileController.isFallBackFileEmpty());}  }
class C{  public void revealHiddenPotential(){  final MapleItemInformationProvider ii=MapleItemInformationProvider.getInstance();  final int reqLevel=ii.getReqLevel(getItemId()) / 10;  final List<List<StructItemOption>> pots=new LinkedList<>(MapleItemInformationProvider.getInstance().getAllPotentialInfo().values());  if (getPotentialByLine(0) < 0) {    int newState=-getPotentialByLine(0);    if (newState > Equip.LEGENDARY) {      newState=Equip.LEGENDARY;    } else     if (newState < Equip.RARE) {      newState=Equip.RARE;    }    while (getStateByPotential(getPotential()) != newState) {      for (int i=0; i < getPotential().length; i++) {        if (getPotentialByLine(i) == 0) {          break;        }        boolean rewarded=false;        while (!rewarded) {          StructItemOption pot=pots.get(Randomizer.nextInt(pots.size())).get(reqLevel);          if (pot != null && pot.reqLevel <= reqLevel && GameConstants.optionTypeFits(pot.optionType,getItemId()) && GameConstants.potentialIDFits(pot.opID,newState,i) && !GameConstants.isBonusPot(pot.opID)) {            setPotentialByLine(i,pot.opID);            rewarded=true;          }        }      }    }  }  if (getBonusPotentialByLine(0) < 0) {    int newState=-getBonusPotentialByLine(0);    if (newState > Equip.LEGENDARY) {      newState=Equip.LEGENDARY;    } else     if (newState < Equip.RARE) {      newState=Equip.RARE;    }    while (getStateByPotential(getBonusPotential()) != newState) {      for (int i=0; i < getBonusPotential().length; i++) {        if (getBonusPotentialByLine(i) == 0) {          break;        }        boolean rewarded=false;        while (!rewarded) {          StructItemOption pot=pots.get(Randomizer.nextInt(pots.size())).get(reqLevel);          if (pot != null && pot.reqLevel <= reqLevel && GameConstants.optionTypeFits(pot.optionType,getItemId()) && GameConstants.potentialIDFits(pot.opID,newState,i) && GameConstants.isBonusPot(pot.opID)) {            setBonusPotentialByLine(i,pot.opID);            rewarded=true;          }        }      }    }  }}  }
class C{  public boolean isRepair(){  return repair;}  }
class C{  public int putIfAbsent(K key,int value){  int index=insertionIndex(key);  if (index < 0)   return _values[-index - 1];  return doPut(key,value,index);}  }
class C{  public Builder integerToCategorical(String columnName,List<String> categoryStateNames){  return transform(new IntegerToCategoricalTransform(columnName,categoryStateNames));}  }
class C{  public void addSubstitutionGroup(XSElementDecl[] elements){  XSElementDecl subHead, element;  Vector subGroup;  for (int i=elements.length - 1; i >= 0; i--) {    element=elements[i];    subHead=element.fSubGroup;    subGroup=(Vector)fSubGroupsB.get(subHead);    if (subGroup == null) {      subGroup=new Vector();      fSubGroupsB.put(subHead,subGroup);    }    subGroup.addElement(element);  }}  }
class C{  public SequenceTemplateParameterContext initSequence(SequenceType seqType,SequenceUUID uuid){  if (!sequences.containsKey(seqType) || !sequences.get(seqType).contains(uuid)) {    int seqNum=getSequenceCount(seqType);    doAddParameter(seqType,uuid,SequenceContextParameters.UUID,uuid.getUuid());    doAddParameter(seqType,uuid,SequenceContextParameters.TYPE,seqType.value());    doAddParameter(seqType,uuid,SequenceContextParameters.NUM,String.valueOf(seqNum));  }  return this;}  }
class C{  public IntervalFeatureSet(Map<String,List<IntervalFeature>> intervalMap,TrackFormat type){  this.intervalMap=intervalMap;  this.sortIntervalsWithinChroms();  this.type=type;}  }
class C{  @ColorInt private int extractIntAttribute(Context context,int[] attribute){  TypedValue typedValue=new TypedValue();  TypedArray a=context.obtainStyledAttributes(typedValue.data,attribute);  int color=a.getColor(0,0);  a.recycle();  return color;}  }
class C{  private static double calculateAngle(SensorEvent event,GeomagneticField magneticField){  float azimuth=getAzimuth(event);  double angle;  if (magneticField != null) {    angle=Math.toDegrees(azimuth) + magneticField.getDeclination();  } else {    angle=Math.toDegrees(azimuth);  }  angle=(angle + 360) % 360;  return angle;}  }
class C{  public VideoGetTagsQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public void clearParsys(String parsys,String componentName){  globalBar.switchToEditMode();  while (getParsys(parsys).isComponentPresent(componentName)) {    deleteComponent(parsys,componentName);  }}  }
class C{  private void updateThingType(){  if (getThing().getThingTypeUID().equals(ZWaveBindingConstants.ZWAVE_THING_UID) == false) {    finalTypeSet=true;    return;  }  String parmManufacturer=this.getThing().getProperties().get(ZWaveBindingConstants.PROPERTY_MANUFACTURER);  if (parmManufacturer == null) {    logger.debug("NODE {}: MANUFACTURER not set",nodeId);    return;  }  String parmDeviceType=this.getThing().getProperties().get(ZWaveBindingConstants.PROPERTY_DEVICETYPE);  if (parmDeviceType == null) {    logger.debug("NODE {}: TYPE not set",nodeId);    return;  }  String parmDeviceId=this.getThing().getProperties().get(ZWaveBindingConstants.PROPERTY_DEVICEID);  if (parmDeviceId == null) {    logger.debug("NODE {}: ID not set",nodeId);    return;  }  String parmVersion=this.getThing().getProperties().get(ZWaveBindingConstants.PROPERTY_VERSION);  if (parmVersion == null) {    logger.debug("NODE {}: VERSION not set {}",nodeId);    return;  }  int deviceType;  int deviceId;  int deviceManufacturer;  try {    deviceManufacturer=Integer.parseInt(parmManufacturer);    deviceType=Integer.parseInt(parmDeviceType);    deviceId=Integer.parseInt(parmDeviceId);  } catch (  final NumberFormatException ex) {    logger.debug("NODE {}: Unable to parse device data",nodeId);    return;  }  ZWaveProduct foundProduct=null;  for (  ZWaveProduct product : ZWaveConfigProvider.getProductIndex()) {    if (product == null) {      continue;    }    if (product.match(deviceManufacturer,deviceType,deviceId,parmVersion) == true) {      foundProduct=product;      break;    }  }  if (foundProduct == null) {    return;  }  changeThingType(foundProduct.getThingTypeUID(),getConfig());  finalTypeSet=true;}  }
class C{  public static Document parseDocument(File file) throws ParserConfigurationException, SAXException, IOException {  return parseDocument(file,false);}  }
class C{  public static long calculateDifferentMinute(Date startDate,Date endDate){  return calculateDifference(startDate,endDate,DifferenceMode.Minute);}  }
class C{  public void addBodyDecl(BodyDecl node){  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();  list.addChild(node);}  }
class C{  public void removeRecord(Record record){  this.numRecords--;  int count=0;  for (  DataType value : record.getValues()) {switch (value.type()) {case INT:      this.histograms.get(count).removeValue(value.getInt());    break;case STRING:  this.histograms.get(count).removeValue(value.getString());break;case BOOL:this.histograms.get(count).removeValue(value.getBool());break;case FLOAT:this.histograms.get(count).removeValue(value.getFloat());break;default :break;}count++;}}  }
class C{  private void saveProject(){  saveProject(false);}  }
class C{  public void addJVMArg(String args){  if (args == null)   return;  List<String> listJvmArgs=ExecutorUtils.tokenize(args,null);  for (  String sp : listJvmArgs)   addJVMArg(new Argument(sp));}  }
class C{  public BaseMqttMessage(final long id,final String topic,final MqttMessage message){  super(id,topic,null,new Date());  this.rawMessage=message;}  }
class C{  public String toString(){  int len=this.name.length();  if (this.value != null)   len+=1 + this.value.length();  CharArrayBuffer buffer=new CharArrayBuffer(len);  buffer.append(this.name);  if (this.value != null) {    buffer.append("=");    buffer.append(this.value);  }  return buffer.toString();}  }
class C{  public AdamsBashforthFieldIntegrator(final Field<T> field,final int nSteps,final double minStep,final double maxStep,final double scalAbsoluteTolerance,final double scalRelativeTolerance) throws MathIllegalArgumentException {  super(field,METHOD_NAME,nSteps,nSteps,minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);}  }
class C{  public Inventories(PokemonGo api){  this.api=api;  itemBag=new ItemBag(api);  pokebank=new PokeBank();  candyjar=new CandyJar(api);  pokedex=new Pokedex();  hatchery=new Hatchery(api);}  }
class C{  public BrokenInputStream(IOException exception){  this.exception=exception;}  }
class C{  private double stage(final int n,double previousStageResult,double min,double diffMaxMin) throws MathIllegalStateException {  final long np=1L << (n - 1);  double sum=0;  final double spacing=diffMaxMin / np;  double x=min + 0.5 * spacing;  for (long i=0; i < np; i++) {    sum+=computeObjectiveValue(x);    x+=spacing;  }  return 0.5 * (previousStageResult + sum * spacing);}  }
class C{  public AwsIotCompletion(String topic,AWSIotQos qos,String payload,long timeout){  super(topic,qos,payload);  this.timeout=timeout;  this.request=null;  this.isAsync=false;}  }
class C{  protected Control createDialogArea(Composite parent){  GridData gd;  Composite dialogComp=(Composite)super.createDialogArea(parent);  Composite topComp=new Composite(dialogComp,SWT.NONE);  gd=new GridData(GridData.FILL_BOTH);  topComp.setLayoutData(gd);  GridLayout topLayout=new GridLayout();  topLayout.numColumns=2;  topComp.setLayout(topLayout);  setTitle(Messages.getString("SootConfigManagerDialog.Soot_Configurations_Manager"));  setMessage("");  Composite selection=createSelectionArea(topComp);  gd=new GridData(GridData.FILL_BOTH);  gd.horizontalSpan=1;  selection.setLayoutData(gd);  Control specialButtons=createSpecialButtonBar(topComp);  gd=new GridData(GridData.FILL_BOTH);  specialButtons.setLayoutData(gd);  Label separator=new Label(topComp,SWT.HORIZONTAL | SWT.SEPARATOR);  gd=new GridData(GridData.FILL_HORIZONTAL);  gd.horizontalSpan=2;  separator.setLayoutData(gd);  dialogComp.layout(true);  return dialogComp;}  }
class C{  public float nextFloat(){  int y;  if (mti >= N) {    int kk;    final int[] mt=this.mt;    final int[] mag01=this.mag01;    for (kk=0; kk < N - M; kk++) {      y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + M] ^ (y >>> 1) ^ mag01[y & 0x1];    }    for (; kk < N - 1; kk++) {      y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + (M - N)] ^ (y >>> 1) ^ mag01[y & 0x1];    }    y=(mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);    mt[N - 1]=mt[M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];    mti=0;  }  y=mt[mti++];  y^=y >>> 11;  y^=(y << 7) & TEMPERING_MASK_B;  y^=(y << 15) & TEMPERING_MASK_C;  y^=(y >>> 18);  return (y >>> 8) / ((float)(1 << 24));}  }
class C{  public String readAll(){  if (!scanner.hasNextLine())   return "";  String result=scanner.useDelimiter(EVERYTHING_PATTERN).next();  scanner.useDelimiter(WHITESPACE_PATTERN);  return result;}  }
class C{  public boolean isUptoDate(){  return uptodate;}  }
class C{  public static int extractReadsByTaxonomy(final ProgressListener progressListener,final Set<Integer> taxIds,final String outDirectory,final String outFileName,final Document doc,final boolean summarized) throws IOException, CanceledException {  Map<Integer,String> classId2Name=new HashMap<>();  Map<Integer,Collection<Integer>> classId2Descendants=new HashMap<>();  for (  Integer id : taxIds) {    classId2Name.put(id,TaxonomyData.getName2IdMap().get(id));    if (summarized)     classId2Descendants.put(id,TaxonomyData.getTree().getAllDescendants(id));  }  return extractReads(progressListener,ClassificationType.Taxonomy.toString(),taxIds,classId2Name,classId2Descendants,outDirectory,outFileName,doc,summarized);}  }
class C{  private StringBuilder appendUnboundedParameterList(StringBuilder buffer,CompletionProposal methodProposal){  char[] signature=SignatureUtil.fix83600(methodProposal.getSignature());  char[][] parameterNames=methodProposal.findParameterNames(null);  char[][] parameterTypes=Signature.getParameterTypes(signature);  for (int i=0; i < parameterTypes.length; i++)   parameterTypes[i]=createTypeDisplayName(SignatureUtil.getLowerBound(parameterTypes[i]));  if (Flags.isVarargs(methodProposal.getFlags())) {    int index=parameterTypes.length - 1;    parameterTypes[index]=convertToVararg(parameterTypes[index]);  }  return appendParameterSignature(buffer,parameterTypes,parameterNames);}  }
class C{  protected void onCreate(Bundle icicle){  super.onCreate(icicle);  mAccountAuthenticatorResponse=getIntent().getParcelableExtra(AccountManager.KEY_ACCOUNT_AUTHENTICATOR_RESPONSE);  if (mAccountAuthenticatorResponse != null) {    mAccountAuthenticatorResponse.onRequestContinued();  }}  }
class C{  static void calculate(){  for (  byte levelByte : itemLevels) {    short level=(short)(levelByte & 0xFF);    if (level < 10) {      continue;    }    int countIndex=0;    for (    short countByte : fullCounts) {      short count=(short)(countByte & 0xFF);      int finalLevel=level;      if (finalLevel % 5 == 0) {        finalLevel--;      }      int pointLevel=(int)itemLevels[(finalLevel / 5)];      int feedPoints=Math.max(0,pointLevel - 5) / 5 * 8;      pointValues[finalLevel / 5][countIndex++]=getPoints(feedPoints,count);    }  }}  }
class C{  public Bitmap updateDebugBitmap(){  if (!initedNative)   return null;  if (!NativeInterface.arwUpdateDebugTexture32(debugImageData)) {    return null;  }  int w=debugBitmap.getWidth();  int h=debugBitmap.getHeight();  int idx1, idx2;  for (int y=0; y < h; y++) {    for (int x=0; x < w; x++) {      idx1=(y * w + x) * 4;      idx2=(y * w + x);      debugImageColors[idx2]=Color.argb(255,debugImageData[idx1],debugImageData[idx1 + 1],debugImageData[idx1 + 2]);    }  }  debugBitmap.setPixels(debugImageColors,0,w,0,0,w,h);  return debugBitmap;}  }
class C{  private DynamicExecutor(){}  }
class C{  public static boolean isHexDigit(char c){  return hexDigits.indexOf(c) >= 0;}  }
class C{  private boolean awaitRunning(Service service,long timeoutAt){  if (service.isRunning()) {    return true;  }  long waitMillis=timeoutAt - System.currentTimeMillis();  if (waitMillis <= 0) {    return false;  }  try {    service.start().get(waitMillis,TimeUnit.MILLISECONDS);  } catch (  Exception e) {  }  return service.isRunning();}  }
class C{  private void wait_(){  final WakeupListener w=new WakeupListener(null);  BufferedIterator.this.setWakeup(null);  while (!w.isReleasable()) {    try {      ForkJoinPool.managedBlock(w);    } catch (    InterruptedException ex) {      LOG.log(Level.WARNING,"interrupted wait",ex);    }  }}  }
class C{  synchronized void undo(RTEditText editor){  Stack<Operation> undoStack=getUndoStack(editor);  if (!undoStack.empty()) {    Stack<Operation> redoStack=getRedoStack(editor);    Operation op=undoStack.pop();    push(op,redoStack);    op.undo(editor);    while (!undoStack.empty() && op.canMerge(undoStack.peek())) {      op=undoStack.pop();      push(op,redoStack);      op.undo(editor);    }  }}  }
class C{  public static void encode(File source,File target) throws IOException {  InputStream inputStream=null;  OutputStream outputStream=null;  try {    inputStream=new FileInputStream(source);    outputStream=new FileOutputStream(target);    Base64.encode(inputStream,outputStream);  }  finally {    if (outputStream != null) {      try {        outputStream.close();      } catch (      Throwable t) {        ;      }    }    if (inputStream != null) {      try {        inputStream.close();      } catch (      Throwable t) {        ;      }    }  }}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public Application(String name){  this.name=name;}  }
class C{  public void releaseThreadReadLock(){  _readLocks[getSegmentIdByCurrentThreadId()].unlock();}  }
class C{  public static void int2buff(int n,byte[] bs,int offset){  bs[offset]=(byte)((n >> 24) & 0xFF);  bs[offset + 1]=(byte)((n >> 16) & 0xFF);  bs[offset + 2]=(byte)((n >> 8) & 0xFF);  bs[offset + 3]=(byte)(n & 0xFF);  return;}  }
class C{  public PlacesAddQuery type(Integer value){  return unsafeParam("type",value);}  }
class C{  public static String separatorsToUnix(String path){  if (path == null || path.indexOf(WINDOWS_SEPARATOR) == -1) {    return path;  }  return path.replace(WINDOWS_SEPARATOR,UNIX_SEPARATOR);}  }
class C{  public static IncludeReference create(@NonNull Module module,@NonNull VirtualFile fromFile,@Nullable VirtualFile toFile){  return new IncludeReference(module,fromFile,toFile);}  }
class C{  public StreamingStatistics copy(){  return new StreamingStatistics(this);}  }
class C{  @Override protected boolean requireRecentSdk(){  return true;}  }
class C{  @Override public boolean dispatchTouchEvent(MotionEvent ev){  return true;}  }
class C{  public static void verifyInterval(final double lower,final double upper) throws MathIllegalArgumentException {  if (lower >= upper) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.ENDPOINTS_NOT_AN_INTERVAL,lower,upper,false);  }}  }
class C{  public String taggerCorpusFileName(){switch (language) {case ENGLISH:    return "/export/dat/tag/en/brown.txt";case VIETNAMESE:  return "/export/dat/tag/vi/vtb-tagged.txt";}return null;}  }
class C{  public final TestSubscriber<T> await(Duration timeout){  if (cdl.getCount() == 0) {    return this;  }  try {    if (!cdl.await(timeout.toMillis(),TimeUnit.MILLISECONDS)) {      throw new AssertionError("No complete or error signal before timeout");    }    return this;  } catch (  InterruptedException ex) {    throw new AssertionError("Wait interrupted",ex);  }}  }
class C{  public static void mainQuickTest2() throws UnsupportedAudioFileException, IOException {  BaselinePreprocessor pp=new BaselinePreprocessor();  BaselineFeatureExtractor fe=new BaselineFeatureExtractor();  WeightedCodebookTrainerParams pa=new WeightedCodebookTrainerParams();  pa.codebookHeader.codebookType=WeightedCodebookFileHeader.FRAMES;  pa.codebookHeader.sourceTag="neutralF";  pa.codebookHeader.targetTag="angryF";  pa.trainingBaseFolder="/project/mary/marcela/VoiceConversion/Neutral-Spike-Conversion/codebook/neutral2angry";  pa.sourceTrainingFolder="/project/mary/marcela/VoiceConversion/Neutral-Spike-Conversion/codebook/neutral/train_99";  pa.targetTrainingFolder="/project/mary/marcela/VoiceConversion/Neutral-Spike-Conversion/codebook/angry/train_99";  pa.indexMapFileExtension=".imf";  pa.codebookHeader.lsfParams.dimension=20;  pa.codebookHeader.lsfParams.preCoef=0.97f;  pa.codebookHeader.lsfParams.skipsize=0.010f;  pa.codebookHeader.lsfParams.winsize=0.020f;  pa.codebookHeader.lsfParams.windowType=Window.HAMMING;  String baseFile=StringUtils.checkLastSlash(pa.trainingBaseFolder) + pa.codebookHeader.sourceTag + "_X_"+ pa.codebookHeader.targetTag;  pa.codebookFile=baseFile + "_99" + WeightedCodebookFile.DEFAULT_EXTENSION;  pa.pitchMappingFile=baseFile + "_99" + PitchMappingFile.DEFAULT_EXTENSION;  pa.isForcedAnalysis=false;  pa.codebookHeader.ptcParams.windowSizeInSeconds=0.040;  pa.codebookHeader.ptcParams.skipSizeInSeconds=0.005;  pa.codebookHeader.ptcParams.voicingThreshold=0.30;  pa.codebookHeader.ptcParams.isDoublingCheck=false;  pa.codebookHeader.ptcParams.isHalvingCheck=false;  pa.codebookHeader.ptcParams.minimumF0=40.0f;  pa.codebookHeader.ptcParams.maximumF0=400.0f;  pa.codebookHeader.ptcParams.centerClippingRatio=0.3;  pa.codebookHeader.ptcParams.cutOff1=pa.codebookHeader.ptcParams.minimumF0 - 20.0;  pa.codebookHeader.ptcParams.cutOff2=pa.codebookHeader.ptcParams.maximumF0 + 200.0;  pa.codebookHeader.energyParams.windowSizeInSeconds=0.020;  pa.codebookHeader.energyParams.skipSizeInSeconds=0.010;  TotalStandardDeviations tsd=new TotalStandardDeviations();  tsd.lsf=1.5;  tsd.f0=1.0;  tsd.duration=1.0;  tsd.energy=2.0;  pa.gaussianEliminatorParams.isActive=true;  pa.gaussianEliminatorParams.isCheckLsfOutliers=true;  pa.gaussianEliminatorParams.isEliminateTooSimilarLsf=true;  pa.gaussianEliminatorParams.isCheckF0Outliers=true;  pa.gaussianEliminatorParams.isCheckDurationOutliers=true;  pa.gaussianEliminatorParams.isCheckEnergyOutliers=true;  pa.gaussianEliminatorParams.totalStandardDeviations=new TotalStandardDeviations(tsd);  pa.kmeansEliminatorParams.isActive=true;  pa.kmeansEliminatorParams.eliminationAlgorithm=KMeansMappingEliminatorParams.ELIMINATE_MEAN_DISTANCE_MISMATCHES;  pa.kmeansEliminatorParams.distanceType=DistanceComputer.NORMALIZED_EUCLIDEAN_DISTANCE;  pa.kmeansEliminatorParams.isGlobalVariance=true;  pa.kmeansEliminatorParams.isSeparateClustering=false;  tsd.general=0.1;  pa.kmeansEliminatorParams.numClusters=30;  tsd.lsf=1.0;  tsd.f0=1.0;  tsd.duration=1.0;  tsd.energy=1.0;  pa.kmeansEliminatorParams.numClustersLsf=30;  pa.kmeansEliminatorParams.numClustersF0=50;  pa.kmeansEliminatorParams.numClustersDuration=5;  pa.kmeansEliminatorParams.numClustersEnergy=5;  pa.kmeansEliminatorParams.isCheckLsfOutliers=true;  pa.kmeansEliminatorParams.isCheckF0Outliers=false;  pa.kmeansEliminatorParams.isCheckDurationOutliers=false;  pa.kmeansEliminatorParams.isCheckEnergyOutliers=false;  pa.kmeansEliminatorParams.totalStandardDeviations=new TotalStandardDeviations(tsd);  WeightedCodebookParallelTrainer t=new WeightedCodebookParallelTrainer(pp,fe,pa);  t.run();  System.out.println("Training completed...");}  }
class C{  public void invalidateAuthToken(){  mAccountManager.invalidateAuthToken(AccountConstants.ACCOUNT_TYPE,mAuthToken);  mAuthToken=null;}  }
class C{  public boolean isSSA(){  return isSSA;}  }
class C{  public void restartWithNewConfiguration(){  setWeather(currentWeather,currentWeather == Constants.weatherStatus.RAIN ? rainTime : snowTime,fadeOutTime,currentWeather == Constants.weatherStatus.RAIN ? rainParticles : snowParticles);  startAnimation();}  }
class C{  protected final double calcOverallSimilarity(GraphSimilarity gsSim){  return (gsSim.SizeSimilarity == 0) ? 0.0 : gsSim.ValueSimilarity / gsSim.SizeSimilarity;}  }
class C{  @RequestMapping(value="/{id}",method=DELETE,produces=APPLICATION_JSON_VALUE) public ResponseEntity<Void> delete(@PathVariable Integer id) throws URISyntaxException {  log.debug("Delete by id Role : {}",id);  try {    roleRepository.delete(id);    return ResponseEntity.ok().build();  } catch (  Exception x) {    return ResponseEntity.status(HttpStatus.CONFLICT).build();  }}  }
class C{  public <T>Every<T> every(Task<T> task){  return new Every<>(this.executor_,task);}  }
class C{  static final void intToByteArray(int value,byte[] bytes,int startIndex){  int i=startIndex * 4;  bytes[i]=(byte)(value >>> 24);  bytes[i + 1]=(byte)(value >>> 16);  bytes[i + 2]=(byte)(value >>> 8);  bytes[i + 3]=(byte)(value);}  }
class C{  public QueueReader<E> reader(){  return new QueueReader<E>((E[])q,index);}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output,Charset encoding) throws IOException {  if (lines == null) {    return;  }  if (lineEnding == null) {    lineEnding=LINE_SEPARATOR;  }  Charset cs=Charsets.toCharset(encoding);  for (  Object line : lines) {    if (line != null) {      output.write(line.toString().getBytes(cs));    }    output.write(lineEnding.getBytes(cs));  }}  }
class C{  public PhotosSearchQuery sort(Integer value){  return unsafeParam("sort",value);}  }
class C{  public DefaultScrollableDataIterator(String entityName,SessionFactory sessionFactory,int fetchSize,boolean performOrderById,int from,int size){  super(entityName,sessionFactory,fetchSize,performOrderById,from,size);}  }
class C{  public static Set<Interval> mergeIntervalSet(Set<Interval> unmergedIntervals){  TreeSet<Interval> sortedIntervals=new TreeSet<>(IntervalStartComparator.INSTANCE);  for (  Interval mergingInterval : unmergedIntervals) {    Iterator<Interval> it=sortedIntervals.iterator();    while (it.hasNext()) {      Interval sortedInterval=it.next();      if (mergingInterval.overlaps(sortedInterval) || mergingInterval.abuts(sortedInterval)) {        it.remove();        DateTime start=(mergingInterval.getStart().isBefore(sortedInterval.getStart())) ? mergingInterval.getStart() : sortedInterval.getStart();        DateTime end=(mergingInterval.getEnd().isAfter(sortedInterval.getEnd())) ? mergingInterval.getEnd() : sortedInterval.getEnd();        mergingInterval=new Interval(start,end);      }    }    sortedIntervals.add(mergingInterval);  }  return sortedIntervals;}  }
class C{  public ZWaveAssociationCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);  versionMax=MAX_SUPPORTED_VERSION;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelNPCDeBuff_A_TO_B(String skillcaster,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201262,skillcaster,skilltarget,skillname);}  }
class C{  protected boolean readConstantPool(DataInputStream d) throws IOException {  byte tag;  cp_info cp;  int i;  boolean skipone;  constant_pool=new cp_info[constant_pool_count];  skipone=false;  for (i=1; i < constant_pool_count; i++) {    if (skipone) {      skipone=false;      continue;    }    tag=(byte)d.readUnsignedByte();switch (tag) {case cp_info.CONSTANT_Class:      cp=new CONSTANT_Class_info();    ((CONSTANT_Class_info)cp).name_index=d.readUnsignedShort();  if (debug)   G.v().out.println("Constant pool[" + i + "]: Class");break;case cp_info.CONSTANT_Fieldref:cp=new CONSTANT_Fieldref_info();((CONSTANT_Fieldref_info)cp).class_index=d.readUnsignedShort();((CONSTANT_Fieldref_info)cp).name_and_type_index=d.readUnsignedShort();if (debug) G.v().out.println("Constant pool[" + i + "]: Fieldref");break;case cp_info.CONSTANT_Methodref:cp=new CONSTANT_Methodref_info();((CONSTANT_Methodref_info)cp).class_index=d.readUnsignedShort();((CONSTANT_Methodref_info)cp).name_and_type_index=d.readUnsignedShort();if (debug) G.v().out.println("Constant pool[" + i + "]: Methodref");break;case cp_info.CONSTANT_InterfaceMethodref:cp=new CONSTANT_InterfaceMethodref_info();((CONSTANT_InterfaceMethodref_info)cp).class_index=d.readUnsignedShort();((CONSTANT_InterfaceMethodref_info)cp).name_and_type_index=d.readUnsignedShort();if (debug) G.v().out.println("Constant pool[" + i + "]: MethodHandle");break;case cp_info.CONSTANT_String:cp=new CONSTANT_String_info();((CONSTANT_String_info)cp).string_index=d.readUnsignedShort();if (debug) G.v().out.println("Constant pool[" + i + "]: String");break;case cp_info.CONSTANT_Integer:cp=new CONSTANT_Integer_info();((CONSTANT_Integer_info)cp).bytes=d.readInt();if (debug) G.v().out.println("Constant pool[" + i + "]: Integer = "+ ((CONSTANT_Integer_info)cp).bytes);break;case cp_info.CONSTANT_Float:cp=new CONSTANT_Float_info();((CONSTANT_Float_info)cp).bytes=d.readInt();if (debug) G.v().out.println("Constant pool[" + i + "]: Float = "+ ((CONSTANT_Float_info)cp).convert());break;case cp_info.CONSTANT_Long:cp=new CONSTANT_Long_info();((CONSTANT_Long_info)cp).high=d.readInt() & 0xFFFFFFFFL;((CONSTANT_Long_info)cp).low=d.readInt() & 0xFFFFFFFFL;if (debug) {String temp=cp.toString(constant_pool);G.v().out.println("Constant pool[" + i + "]: Long = "+ temp);}skipone=true;break;case cp_info.CONSTANT_Double:cp=new CONSTANT_Double_info();((CONSTANT_Double_info)cp).high=d.readInt() & 0xFFFFFFFFL;((CONSTANT_Double_info)cp).low=d.readInt() & 0xFFFFFFFFL;if (debug) G.v().out.println("Constant pool[" + i + "]: Double = "+ ((CONSTANT_Double_info)cp).convert());skipone=true;break;case cp_info.CONSTANT_NameAndType:cp=new CONSTANT_NameAndType_info();((CONSTANT_NameAndType_info)cp).name_index=d.readUnsignedShort();((CONSTANT_NameAndType_info)cp).descriptor_index=d.readUnsignedShort();if (debug) G.v().out.println("Constant pool[" + i + "]: Name and Type");break;case cp_info.CONSTANT_Utf8:CONSTANT_Utf8_info cputf8=new CONSTANT_Utf8_info(d);cp=(cp_info)CONSTANT_Utf8_collector.v().add(cputf8);if (debug) G.v().out.println("Constant pool[" + i + "]: Utf8 = \""+ cputf8.convert()+ "\"");break;case cp_info.CONSTANT_MethodHandle:cp=new CONSTANT_MethodHandle_info();((CONSTANT_MethodHandle_info)cp).kind=d.readByte();((CONSTANT_MethodHandle_info)cp).target_index=d.readUnsignedShort();break;case cp_info.CONSTANT_InvokeDynamic:cp=new CONSTANT_InvokeDynamic_info();((CONSTANT_InvokeDynamic_info)cp).bootstrap_method_index=d.readUnsignedShort();((CONSTANT_InvokeDynamic_info)cp).name_and_type_index=d.readUnsignedShort();break;default :G.v().out.println("Unknown tag in constant pool: " + tag + " at entry "+ i);return false;}cp.tag=tag;constant_pool[i]=cp;}return true;}  }
class C{  public List<SootMethod> resolveAbstractDispatch(List<SootClass> classes,SootMethod m){  m.getDeclaringClass().checkLevel(SootClass.HIERARCHY);  Set<SootMethod> s=new ArraySet<SootMethod>();  for (  SootClass sootClass : classes) {    s.addAll(resolveAbstractDispatch(sootClass,m));  }  return Collections.unmodifiableList(new ArrayList<SootMethod>(s));}  }
class C{  public void addAnnotations(Annotation... annotations){  for (  Annotation annotation : annotations) {    this.annotationToAnnotationViewMap.put(annotation,null);  }  this.update();}  }
class C{  public static byte[] toByteArray(URLConnection urlConn) throws IOException {  InputStream inputStream=urlConn.getInputStream();  try {    return IOUtils.toByteArray(inputStream);  }  finally {    inputStream.close();  }}  }
class C{  public static double exp(double lambda){  if (!(lambda > 0.0))   throw new IllegalArgumentException("Rate lambda must be positive");  return -Math.log(1 - uniform()) / lambda;}  }
class C{  public static boolean canUseItem(Player player,Item item){  for (  Restrictions restrictions : RESTRICTIONS[RestrictionMode.canUseItem.ordinal()]) {    if (!restrictions.canUseItem(player,item)) {      return false;    }  }  return true;}  }
class C{  private void takePicture(){  lockFocus();}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public static <T>Type<T> valueOf(final WildcardType var){  Set<Type<?>> bounds=new HashSet<Type<?>>(var.getUpperBounds().length + var.getLowerBounds().length);  for (int i=0, len=var.getUpperBounds().length; i < len; ++i) {    bounds.add(valueOf(var.getUpperBounds()[i]));  }  for (int i=0, len=var.getLowerBounds().length; i < len; ++i) {    bounds.add(valueOf(var.getLowerBounds()[i]));  }  return (Type<T>)refineBounds(bounds);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATKDrain_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200567,skilltarget,skillname);}  }
class C{  private void Hunter_SniperSkills(){  if (getOwner().isCasting() || isAlreadyDead()) {    return;  }  int rand=Rnd.get(1,2);switch (rand) {case 1:    useSkill(21292);  break;case 2:useSkill(21293);break;}}  }
class C{  private boolean isIP6SubnetFilter(String token){  return IPWithSubnetChecker.isValidIP6Range(token);}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  public PassresetExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public void resetIDTables(){  fIdTable.clear();  fIdRefTable.clear();}  }
class C{  public static JavaRDD<List<Writable>> normalize(Schema schema,JavaRDD<List<Writable>> data,List<String> skipColumns){  return normalize(schema,data,0,1,skipColumns);}  }
class C{  public static boolean equalsIncludingNaN(float x,float y,float eps){  return equalsIncludingNaN(x,y) || (FastMath.abs(y - x) <= eps);}  }
class C{  private boolean isConfigurationPluginAvailable(){  if (configurationPluginAvailable == null) {    try {      String value=APILocator.getPluginAPI().loadProperty(pluginName,"environment");      configurationPluginAvailable=(value != null);    } catch (    Exception e) {      Logger.warn(this,"Exception while trying to get property 'environment' ",e);      configurationPluginAvailable=false;    }    Logger.info(this,"Configuration plugin available: " + configurationPluginAvailable);  }  return configurationPluginAvailable;}  }
class C{  public void showSvnProperties(ISVNLocalResource resource) throws SVNException {  this.resource=resource;  if (resource != null) {    setContentDescription(Policy.bind("SvnPropertiesView.titleWithArgument",resource.getName()));  } else {    setContentDescription("");  }  refresh();}  }
class C{  public SM_STATS_INFO(Player player){  this.player=player;  this.pcd=player.getCommonData();  this.pgs=player.getGameStats();  this.pls=player.getLifeStats();}  }
class C{  private void tryLoadData(){  if (books.size() != 0) {    onLoadBooksSuccess(books);  } else   if (isSubscriptionInactive(loadBookSubscription)) {    getView().showLoading();    loadData();  } else {    getView().showLoading();  }}  }
class C{  protected void af(boolean b){  Assert.assertFalse(b);}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  public synchronized long size(){  return size;}  }
class C{  public static final void drawPolygon(GL2 gl,Vector2[] vs,boolean points){  gl.glBegin(GL.GL_LINE_LOOP);  for (int i=0; i < vs.length; i++) {    Vector2 v=vs[i];    gl.glVertex2d(v.x,v.y);  }  gl.glEnd();  if (points) {    gl.glBegin(GL.GL_POINTS);    for (int i=0; i < vs.length; i++) {      Vector2 v=vs[i];      gl.glVertex2d(v.x,v.y);    }    gl.glEnd();  }}  }
class C{  private static TxnManager constrainServer(TxnManager txnMgr,MethodConstraints methodConstraints){  return (TxnManager)((RemoteMethodControl)txnMgr).setConstraints(methodConstraints);}  }
class C{  public void updateConfiguration() throws IOException {  long storeMaxMem=getStoreMaxMem();  if (config.getRedisCompatibleEngine().equals(ArdbRocksDbRedisCompatible.DYNO_ARDB)) {    ArdbRocksDbRedisCompatible rocksDb=new ArdbRocksDbRedisCompatible(storeMaxMem,config.getWriteBufferSize(),config.getMaxWriteBufferNumber(),config.getMinWriteBufferToMerge());    rocksDb.updateConfiguration(ArdbRocksDbRedisCompatible.DYNO_ARDB_CONF_PATH);  } else {    logger.info("Updating redis.conf: " + config.getRedisConf());    Path confPath=Paths.get(config.getRedisConf());    Path backupPath=Paths.get(config.getRedisConf() + ".bkp");    if (!Files.exists(backupPath)) {      logger.info("Backing up original redis.conf at: " + backupPath);      Files.copy(confPath,backupPath,COPY_ATTRIBUTES);    }    if (config.isRedisPersistenceEnabled() && config.isRedisAofEnabled()) {      logger.info("Persistence with AOF is enabled");    } else     if (config.isRedisPersistenceEnabled() && !config.isRedisAofEnabled()) {      logger.info("Persistence with RDB is enabled");    }    List<String> lines=Files.readAllLines(confPath,Charsets.UTF_8);    boolean saveReplaced=false;    for (int i=0; i < lines.size(); i++) {      String line=lines.get(i);      if (line.startsWith("#") && !line.matches(REDIS_CONF_SAVE_SCHEDULE)) {        continue;      }      if (line.matches(REDIS_CONF_MAXMEMORY_PATTERN)) {        String maxMemConf="maxmemory " + storeMaxMem + "kb";        logger.info("Updating Redis property: " + maxMemConf);        lines.set(i,maxMemConf);      }      if (config.isRedisPersistenceEnabled() && config.isRedisAofEnabled()) {        if (line.matches(REDIS_CONF_APPENDONLY)) {          String appendOnly="appendonly yes";          logger.info("Updating Redis property: " + appendOnly);          lines.set(i,appendOnly);        } else         if (line.matches(REDIS_CONF_APPENDFSYNC)) {          String appendfsync="appendfsync no";          logger.info("Updating Redis property: " + appendfsync);          lines.set(i,appendfsync);        } else         if (line.matches(REDIS_CONF_AUTOAOFREWRITEPERCENTAGE)) {          String autoAofRewritePercentage="auto-aof-rewrite-percentage 100";          logger.info("Updating Redis property: " + autoAofRewritePercentage);          lines.set(i,autoAofRewritePercentage);        } else         if (line.matches(REDIS_CONF_SAVE_SCHEDULE)) {          String saveSchedule="# save 60 10000";          logger.info("Updating Redis property: " + saveSchedule);          lines.set(i,saveSchedule);        }      } else       if (config.isRedisPersistenceEnabled() && !config.isRedisAofEnabled()) {        if (line.matches(REDIS_CONF_STOP_WRITES_BGSAVE_ERROR)) {          String bgsaveerror="stop-writes-on-bgsave-error no";          logger.info("Updating Redis property: " + bgsaveerror);          lines.set(i,bgsaveerror);        } else         if (line.matches(REDIS_CONF_SAVE_SCHEDULE) && !saveReplaced) {          saveReplaced=true;          String saveSchedule="save 60 10000";          logger.info("Updating Redis property: " + saveSchedule);          lines.set(i,saveSchedule);        } else         if (line.matches(REDIS_CONF_APPENDONLY)) {          String appendOnly="appendonly no";          logger.info("Updating Redis property: " + appendOnly);          lines.set(i,appendOnly);        }      }    }    Files.write(confPath,lines,Charsets.UTF_8,WRITE,TRUNCATE_EXISTING);  }}  }
class C{  public DecisionSupport(Map hCategoryEstimations,String sSuggestedCategory,String sCorrectCategory){  CategoryEstimations=new TreeMap();  CategoryEstimations.putAll(hCategoryEstimations);  SuggestedCategory=new String(sSuggestedCategory);  CorrectCategory=new String(sCorrectCategory);}  }
class C{  public ItemStack dispenseStack(IBlockSource source,ItemStack stack){  if (FluidUtil.getFluidContained(stack) != null) {    return dumpContainer(source,stack);  } else {    return fillContainer(source,stack);  }}  }
class C{  public short[] interpolate(int oldSampleRate,int newSampleRate,short[] samples){  if (oldSampleRate == newSampleRate) {    return samples;  }  int newLength=Math.round(((float)samples.length / oldSampleRate * newSampleRate));  float lengthMultiplier=(float)newLength / samples.length;  short[] interpolatedSamples=new short[newLength];  for (int i=0; i < newLength; i++) {    float currentPosition=i / lengthMultiplier;    int nearestLeftPosition=(int)currentPosition;    int nearestRightPosition=nearestLeftPosition + 1;    if (nearestRightPosition >= samples.length) {      nearestRightPosition=samples.length - 1;    }    float slope=samples[nearestRightPosition] - samples[nearestLeftPosition];    float positionFromLeft=currentPosition - nearestLeftPosition;    interpolatedSamples[i]=(short)(slope * positionFromLeft + samples[nearestLeftPosition]);  }  return interpolatedSamples;}  }
class C{  public boolean isDividerAllowedAbove(){  return mDividerAllowedAbove;}  }
class C{  public void requestDropList(Player player,int npcId){  DropNpc dropNpc=DropRegistrationService.getInstance().getDropRegistrationMap().get(npcId);  if (player == null || dropNpc == null) {    return;  }  if (!dropNpc.containsKey(player.getObjectId()) && !dropNpc.isFreeForAll()) {    PacketSendUtility.sendPacket(player,SM_SYSTEM_MESSAGE.STR_LOOT_NO_RIGHT);    return;  }  if (dropNpc.isBeingLooted()) {    PacketSendUtility.sendPacket(player,SM_SYSTEM_MESSAGE.STR_LOOT_FAIL_ONLOOTING);    return;  }  dropNpc.setBeingLooted(player);  VisibleObject visObj=World.getInstance().findVisibleObject(npcId);  if (visObj instanceof Npc) {    Npc npc=((Npc)visObj);    ScheduledFuture<?> decayTask=(ScheduledFuture<?>)npc.getController().cancelTask(TaskId.DECAY);    if (decayTask != null) {      long reamingDecayTime=decayTask.getDelay(TimeUnit.MILLISECONDS);      dropNpc.setReamingDecayTime(reamingDecayTime);    }  }  Set<DropItem> dropItems=DropRegistrationService.getInstance().getCurrentDropMap().get(npcId);  if (dropItems == null) {    dropItems=Collections.emptySet();  }  PacketSendUtility.sendPacket(player,new SM_LOOT_ITEMLIST(npcId,dropItems,player));  PacketSendUtility.sendPacket(player,new SM_LOOT_STATUS(npcId,2));  player.unsetState(CreatureState.ACTIVE);  player.setState(CreatureState.LOOTING);  player.setLootingNpcOid(npcId);  PacketSendUtility.broadcastPacket(player,new SM_EMOTION(player,EmotionType.START_LOOT,0,npcId),true);}  }
class C{  private static boolean registrarsEqual(UnicastResponse resp1,UnicastResponse resp2){  return resp1 != null && resp2 != null && resp2.getRegistrar().equals(resp1.getRegistrar());}  }
class C{  public void expand(S1Angle minRadius,int maxLevelDiff){  int minLevel=S2CellId.MAX_LEVEL;  for (  S2CellId id : this) {    minLevel=Math.min(minLevel,id.level());  }  int radiusLevel=S2Projections.MIN_WIDTH.getMaxLevel(minRadius.radians());  if (radiusLevel == 0 && minRadius.radians() > S2Projections.MIN_WIDTH.getValue(0)) {    expand(0);  }  expand(Math.min(minLevel + maxLevelDiff,radiusLevel));}  }
class C{  protected static boolean equals(byte[] syncBytes,byte[] oldBytes){  if (syncBytes == null || oldBytes == null)   return syncBytes == oldBytes;  if (syncBytes.length != oldBytes.length)   return false;  for (int i=0; i < oldBytes.length; i++) {    if (oldBytes[i] != syncBytes[i]) {      return false;    }  }  return true;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CHAT_ROOM_VOICE_FINISH_NOTIFY(String value0){  return new SM_SYSTEM_MESSAGE(1300954,value0);}  }
class C{  @Override public void onRemoval(RemovalNotification<ResourceKey<K>,R> notification){  ResourceKey<K> resourceKey=notification.getKey();  for (; ; ) {    Status status=resourceKey.getStatus();switch (status) {case IDLE:      if (resourceKey.goFromIdleToDead()) {        discardFromIdle(resourceKey,notification.getValue());        return;      }    break;case IN_FLIGHT:  if (resourceKey.goFromInFlightToRetired()) {    return;  }break;case RETIRED:if (resourceKey.goFromRetiredToDead()) {discardFromRetired(resourceKey,notification.getValue());return;}break;default :throw new IllegalStateException("Unnexpected state: " + status);}}}  }
class C{  public double norm2(){  return (new SingularValueDecomposition(this).norm2());}  }
class C{  public SM_CREATE_CHARACTER(PlayerAccountData accPlData,int responseCode){  this.player=accPlData;  this.responseCode=responseCode;}  }
class C{  public static void putSdkDependentParams(@NotNull ScopedStateStore state){  final AndroidSdkHandler sdkHandler=AndroidSdkUtils.tryToChooseSdkHandler();  StudioLoggerProgressIndicator progress=new StudioLoggerProgressIndicator(ConfigureAndroidProjectPath.class);  BuildToolInfo buildTool=sdkHandler.getLatestBuildTool(progress,false);  Revision minimumRequiredBuildToolVersion=Revision.parseRevision(SdkConstants.MIN_BUILD_TOOLS_VERSION);  StudioSdkUtil.reloadRemoteSdkWithModalProgress();  GradleCoordinate constraintCoordinate=GradleCoordinate.parseCoordinateString(SdkConstants.CONSTRAINT_LAYOUT_LIB_ARTIFACT + ":+");  RepositoryPackages packages=sdkHandler.getSdkManager(progress).getPackages();  RepoPackage constraintPackage=SdkMavenRepository.findBestPackageMatching(constraintCoordinate,packages.getLocalPackages().values());  if (constraintPackage == null) {    constraintPackage=SdkMavenRepository.findBestPackageMatching(constraintCoordinate,packages.getRemotePackages().values());    if (constraintPackage != null) {      state.listPush(WizardConstants.INSTALL_REQUESTS_KEY,constraintPackage.getPath());    }  }  if (buildTool != null && buildTool.getRevision().compareTo(minimumRequiredBuildToolVersion) >= 0) {    state.put(WizardConstants.BUILD_TOOLS_VERSION_KEY,buildTool.getRevision().toString());  } else {    state.listPush(WizardConstants.INSTALL_REQUESTS_KEY,DetailsTypes.getBuildToolsPath(minimumRequiredBuildToolVersion));    state.put(WizardConstants.BUILD_TOOLS_VERSION_KEY,minimumRequiredBuildToolVersion.toString());  }  File location=sdkHandler.getLocation();  if (location != null) {    state.put(WizardConstants.SDK_DIR_KEY,FileUtil.toSystemIndependentName(location.getPath()));  }}  }
class C{  public static StyledLayerDescriptor readSLDFile(File file){  StyledLayerDescriptor sld=null;  if (file != null) {    StyleFactory styleFactory=CommonFactoryFinder.getStyleFactory();    try {      URL url=file.toURI().toURL();      SLDParser styleReader=new SLDParser(styleFactory,url);      setResourcelocator(styleReader,file.toURI().toURL());      sld=styleReader.parseSLD();    } catch (    MalformedURLException e) {      ConsoleManager.getInstance().exception(SLDUtils.class,e);    }catch (    IOException e) {      ConsoleManager.getInstance().exception(SLDUtils.class,e);    }  }  return sld;}  }
class C{  static boolean isSuccessRateEnough(Launch launch,SendCase option){switch (option) {case ALWAYS:    return true;case FAILED:  return launch.getStatus().equals(Status.FAILED);case TO_INVESTIGATE:return launch.getStatistics().getIssueCounter().getToInvestigateTotal() > 0;case MORE_10:return getSuccessRate(launch) > 0.1;case MORE_20:return getSuccessRate(launch) > 0.2;case MORE_50:return getSuccessRate(launch) > 0.5;default :return false;}}  }
class C{  private Socket ssl(Socket socket,String host,int port) throws IOException {  return sslSocketFactory.createSocket(socket,host,port,true);}  }
class C{  public void addScreenLocation(String name){  if (name != null) {    this.screenLocationSet.add(name);  }}  }
class C{  public DataColorAction(String group,String dataField,int dataType,String colorField){  super(group,colorField);  setDataType(dataType);  setDataField(dataField);}  }
class C{  public static Object[] ordinalArray(Iterator tuples,String field,Comparator cmp){  HashSet set=new HashSet();  while (tuples.hasNext())   set.add(((Tuple)tuples.next()).get(field));  Object[] o=set.toArray();  Arrays.sort(o,cmp);  return o;}  }
class C{  public int addRow(){  int r;  if (m_openrows == null || m_openrows.isEmpty()) {    r=(m_firstid == 0 ? ++m_curid : --m_firstid);  } else {    int key=m_openrows.firstKey();    r=m_openrows.remove(key);  }  return r;}  }
class C{  public EntityResolverWrapper(EntityResolver entityResolver){  setEntityResolver(entityResolver);}  }
class C{  public void childrenSeparator(short separator) throws XNIException {}  }
class C{  public TopNMetric(String metricName,SortDirection order){  this(metricName);  if (order == SortDirection.ASC) {    this.type=TopNMetricType.INVERTED;    this.metricName=Optional.empty();    this.nested=Optional.of(new TopNMetric(metricName));  }}  }
class C{  public static String createBaseRGBString(Color c){  return "-fx-base: " + createRGBString(c);}  }
class C{  public SecureGetAppBalanceQuery(VkApiClient client,ServiceActor actor){  super(client,"secure.getAppBalance",Integer.class);  accessToken(actor.getAccessToken());  clientSecret(actor.getClientSecret());}  }
class C{  private void unidirectionalCondition(DataSupport baseObj,DataSupport associatedModel){  dealsAssociationsOnTheSideWithoutFK(baseObj,associatedModel);}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  executeImmediately(getSyntax());}  }
class C{  private void checkBatchSize(){  if (loader.getBatchSize() > 1) {    LOG.warn("Loading with batch size [" + loader.getBatchSize() + "]. This can cause conflicts on commit.");  }}  }
class C{  @Override public void initTrigger(){  Calendar calendar=Calendar.getInstance();  calendar.set(Calendar.HOUR_OF_DAY,hour);  calendar.set(Calendar.MINUTE,minute);  calendar.set(Calendar.SECOND,second);  long delay=calendar.getTimeInMillis() - System.currentTimeMillis();  if (delay < 0) {    delay+=DAY_IN_MSEC;  }  ThreadPoolManager.getInstance().scheduleAtFixedRate(this,delay,DAY_IN_MSEC);}  }
class C{  @Override public void endExternalSubset(Augmentations augmentations) throws XNIException {}  }
class C{  @Override public void publish(String topic,String payload,long timeout) throws AWSIotException, AWSIotTimeoutException {  super.publish(topic,payload,timeout);}  }
class C{  public void onOk(int taskId){  TransferablePlayer tplayer=this.transfers.remove(taskId);  textLog.info("taskId:" + taskId + "; [TransferComplete]");  PlayerService.deletePlayerFromDB(tplayer.playerId);}  }
class C{  public TaxonomyClusterViewer(final MainViewer viewer){  super(viewer.getDir(),viewer,ClassificationType.Taxonomy.toString());}  }
class C{  @Override public boolean loadSLDString(boolean isFolder,boolean isDataSource,List<SLDDataInterface> sldFilesToLoad){  boolean loadNewSymbol=true;  if (!isFolder) {    if (sldFilesToLoad.size() == 1) {      SLDDataInterface firstObject=sldFilesToLoad.get(0);      if (firstObject != null) {        if (dataEditedFlag && !isUnderTestFlag()) {          Object[] options={Localisation.getString(SLDEditor.class,"common.discard"),Localisation.getString(SLDEditor.class,"common.cancel")};          int result=JOptionPane.showOptionDialog(frame,Localisation.getString(SLDEditor.class,"SLDEditor.unsavedChanges"),Localisation.getString(SLDEditor.class,"SLDEditor.unsavedChangesTitle"),JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE,null,options,options[1]);          loadNewSymbol=(result == JOptionPane.OK_OPTION);        }        if (loadNewSymbol) {          String layerName=firstObject.getLayerName();          File sldEditorFile=firstObject.getSldEditorFile();          if (sldEditorFile != null) {            ConsoleManager.getInstance().information(this,String.format("%s : %s",Localisation.getString(getClass(),"SLDEditor.loadedSLDEditorFile"),sldEditorFile.getAbsolutePath()));          }          ConsoleManager.getInstance().information(this,String.format("%s : %s",Localisation.getString(getClass(),"SLDEditor.loadedSLDFile"),layerName));          StyledLayerDescriptor sld=SLDUtils.createSLDFromString(firstObject);          SelectedSymbol selectedSymbolInstance=SelectedSymbol.getInstance();          selectedSymbolInstance.setSld(sld);          selectedSymbolInstance.setFilename(layerName);          selectedSymbolInstance.setName(layerName);          SLDEditorFile.getInstance().setSLDData(firstObject);          dataSource.reset();          dataSource.connect(SLDEditorFile.getInstance());          if (sldEditorFile != null) {            PrefData prefData=PrefManager.getInstance().getPrefData();            prefData.setVendorOptionVersionList(firstObject.getVendorOptionList());            PrefManager.getInstance().setPrefData(prefData);          }          LegendManager.getInstance().SLDLoaded(firstObject.getLegendOptions());          SLDEditorFile.getInstance().fileOpenedSaved();        }      }    }    if (!isDataSource) {      UndoManager.getInstance().fileLoaded();      Controller.getInstance().setPopulating(true);      uiMgr.populateUI(sldFilesToLoad.size());      Controller.getInstance().setPopulating(false);    }  }  return loadNewSymbol;}  }
class C{  public static Tuple min(Iterator tuples,String field,Comparator cmp){  Tuple t=null, tmp;  Object min=null;  if (tuples.hasNext()) {    t=(Tuple)tuples.next();    min=t.get(field);  }  while (tuples.hasNext()) {    tmp=(Tuple)tuples.next();    Object obj=tmp.get(field);    if (cmp.compare(obj,min) < 0) {      t=tmp;      min=obj;    }  }  return t;}  }
class C{  protected void tag(String tag,ArrayList names,ArrayList values,int nattr,boolean close){  spacing();  m_out.print('<');  m_out.print(tag);  for (int i=0; i < nattr; ++i) {    m_out.print(' ');    m_out.print((String)names.get(i));    m_out.print('=');    m_out.print('\"');    escapeString((String)values.get(i));    m_out.print('\"');  }  if (close)   m_out.print('/');  m_out.print('>');  println();  if (!close) {    m_tagStack.add(tag);  }}  }
class C{  @SuppressFBWarnings("DM_EXIT") @Override public IBinder onBind(Intent intent){  mMessenger=new Messenger(new IncomingHandler(getApplicationContext()));  try {    new LauncherWarmUpTask().execute(getApplicationContext());    ((ChromeApplication)getApplication()).startBrowserProcessesAndLoadLibrariesSync(true);    ApplicationInitialization.enableFullscreenFlags(getApplicationContext().getResources(),getApplicationContext(),R.dimen.control_container_height);  } catch (  ProcessInitException e) {    Log.e(this.getClass().toString(),"ProcessInitException while starting the browser process");    System.exit(-1);  }  return mMessenger.getBinder();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FIELDABYSS_LIGHTBOSS_KILLED(String value1,String value0){  return new SM_SYSTEM_MESSAGE(1400324,value1,value0);}  }
class C{  @Override default boolean aligns(DateTime dateTime){  return dateTime.equals(roundFloor(dateTime));}  }
class C{  public static <V>List<V> invertList(List<V> sourceList){  if (isEmpty(sourceList)) {    return sourceList;  }  List<V> invertList=new ArrayList<V>(sourceList.size());  for (int i=sourceList.size() - 1; i >= 0; i--) {    invertList.add(sourceList.get(i));  }  return invertList;}  }
class C{  public void apply() throws SynthesisException {  Log.d(Mary.LOG,"Viterbi running with beam size " + beamSize);  for (ViterbiPoint point=firstPoint; point.next != null; point=point.next) {    Target target=point.target;    List<ViterbiCandidate> candidates=database.getCandidates(target);    if (candidates.size() == 0) {      if (target instanceof DiphoneTarget) {        Log.d(Mary.LOG,"No diphone '" + target.getName() + "' -- will build from halfphones");        DiphoneTarget dt=(DiphoneTarget)target;        Target left=dt.left;        Target right=dt.right;        point.setTarget(left);        ViterbiPoint newP=new ViterbiPoint(right);        newP.next=point.next;        point.next=newP;        candidates=database.getCandidates(left);        if (candidates.size() == 0)         throw new SynthesisException("Cannot even find any halfphone unit for target " + left);      } else {        throw new SynthesisException("Cannot find any units for target " + target);      }    }    assert candidates.size() > 0;    Collections.sort(candidates);    point.candidates=candidates;    assert beamSize != 0;    List<ViterbiPath> paths=point.paths;    int nPaths=paths.size();    if (beamSize != -1 && beamSize < nPaths) {      nPaths=beamSize;    }    int i=0;    int iMax=nPaths;    for (    ViterbiPath pp : paths) {      assert pp != null;      candidates=point.candidates;      assert candidates != null;      int j=0;      int jMax=beamSize;      for (      ViterbiCandidate c : candidates) {        ViterbiPath np=getPath(pp,c);        addPath(point.next,np);        if (++j == jMax)         break;      }      if (++i == iMax)       break;    }  }}  }
class C{  @Override public void saveGenericEntity(Object entity){  final Session session=this.sessionFactory.openSession();  final Transaction transaction=session.beginTransaction();  session.saveOrUpdate(entity);  transaction.commit();  session.close();}  }
class C{  public boolean containsEx(String memberName){  return legionMemberExByName.containsKey(memberName);}  }
class C{  public AudioGetRecommendationsQuery shuffle(Boolean value){  return unsafeParam("shuffle",value);}  }
class C{  public InvalidConfigurationException(){}  }
class C{  public ThrowableSet mightThrowImplicitly(ThrowStmt t){  return ThrowableSet.Manager.v().ALL_THROWABLES;}  }
class C{  public void removeDragComponent(){  if (myDragDropWidget != null) {    myWidgetsScene.removeWidget(myDragDropWidget);    myDragDropWidget=null;  }}  }
class C{  public static Map<String,String> extractDimColsDataTypeValues(String colDataTypes){  Map<String,String> mapOfColNameDataType=new HashMap<String,String>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  if (null == colDataTypes || colDataTypes.isEmpty()) {    return mapOfColNameDataType;  }  String[] colArray=colDataTypes.split(CarbonCommonConstants.AMPERSAND_SPC_CHARACTER);  String[] colValueArray=null;  for (  String colArrayVal : colArray) {    colValueArray=colArrayVal.split(CarbonCommonConstants.COMA_SPC_CHARACTER);    mapOfColNameDataType.put(colValueArray[0].toLowerCase(),colValueArray[1]);  }  return mapOfColNameDataType;}  }
class C{  @Deployment(resources={"org/activiti/engine/test/api/event/TaskEventsTest.testEventFiring.bpmn20.xml"}) public void testEventFiringOrdering(){  TestActivitiEntityEventTaskListener tlistener=new TestActivitiEntityEventTaskListener(Task.class);  processEngineConfiguration.getEventDispatcher().addEventListener(tlistener);  try {    runtimeService.startProcessInstanceByKey("testTaskLocalVars");    Task task=taskService.createTaskQuery().singleResult();    Map<String,Object> taskParams=new HashMap<String,Object>();    taskService.complete(task.getId(),taskParams,true);    ActivitiEntityEvent event=(ActivitiEntityEvent)tlistener.getEventsReceived().get(0);    assertEquals(ActivitiEventType.ENTITY_CREATED,event.getType());    assertTrue(event.getEntity() instanceof Task);    event=(ActivitiEntityEvent)tlistener.getEventsReceived().get(1);    assertEquals(ActivitiEventType.ENTITY_INITIALIZED,event.getType());    assertTrue(event.getEntity() instanceof Task);    event=(ActivitiEntityEvent)tlistener.getEventsReceived().get(2);    assertEquals(ActivitiEventType.TASK_CREATED,event.getType());    assertTrue(event.getEntity() instanceof Task);    Task taskFromEvent=tlistener.getTasks().get(2);    assertEquals(task.getId(),taskFromEvent.getId());    assertEquals("The ScriptTaskListener must set this value before the dispatchEvent fires.","scriptedAssignee",taskFromEvent.getAssignee());    assertEquals("The ScriptTaskListener must set this value before the dispatchEvent fires.",877,taskFromEvent.getPriority());    taskService.createTaskQuery().singleResult();  }  finally {    processEngineConfiguration.getEventDispatcher().removeEventListener(tlistener);  }}  }
class C{  public static File[] convertFileCollectionToFileArray(Collection<File> files){  return files.toArray(new File[files.size()]);}  }
class C{  public Edge addEdge(Node s,Node t){  nodeCheck(s,true);  nodeCheck(t,true);  int e=addEdge(s.getRow(),t.getRow());  return getEdge(e);}  }
class C{  @Inject public DefaultAsynchronousWorkflowsBuilder(ApiJobStore apiJobStore,PreResponseStore preResponseStore,Clock timestampGenerator){  this.apiJobStore=apiJobStore;  this.preResponseStore=preResponseStore;  this.timestampGenerator=timestampGenerator;}  }
class C{  public static final void shuffle(double[] a,int start,int len,Random r){  for (int i=start + len; i > 1; --i) {    double t=a[i];    int j=r.nextInt(i);    a[i]=a[j];    a[j]=t;  }}  }
class C{  public boolean isInverted(){  return mInverted;}  }
class C{  @Override public V remove(Object obj){  throw new UnsupportedOperationException();}  }
class C{  public Schema schema(){  return theSchema;}  }
class C{  public UrlValidator(String[] schemes){  this(schemes,0L);}  }
class C{  public static SparklerConfiguration newDefaultConfig(){  Yaml yaml=new Yaml();  InputStream input=null;  SparklerConfiguration sparklerConf=null;  try {    input=Constants.class.getClassLoader().getResourceAsStream(file.SPARKLER_DEFAULT);    Map<String,Object> yamlMap=(Map<String,Object>)yaml.load(input);    sparklerConf=new SparklerConfiguration(yamlMap);  } catch (  Exception e) {    e.printStackTrace();  } finally {    IOUtils.closeQuietly(input);  }  if (sparklerConf != null) {    sparklerConf.put(key.UUID_KEY,UUID.randomUUID().toString());  }  return sparklerConf;}  }
class C{  public StructStorageStat[] listStorages(TrackerServer trackerServer,String groupName) throws IOException {  final String storageIpAddr=null;  return this.listStorages(trackerServer,groupName,storageIpAddr);}  }
class C{  public static Aggregate<Map<String,Concept>,Optional<Number>> median(String varName){  return Aggregates.median(varName);}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  protected void callUserDataHandlers(Node n,Node c,short operation){  if (userData == null) {    return;  }  if (n instanceof NodeImpl) {    Hashtable t=((NodeImpl)n).getUserDataRecord();    if (t == null || t.isEmpty()) {      return;    }    callUserDataHandlers(n,c,operation,t);  }}  }
class C{  @Override public void processingInstruction(String target,String data) throws SAXException {  if (saxParser != null) {    saxParser.processingInstruction(target,data);  }}  }
class C{  public static final Optional<ArrayList<SteamVRApp>> parseManifest(final File manifest){  try (Scanner scanner=new Scanner(manifest)){    final JSONParser parser=new JSONParser();    final ArrayList<SteamVRApp> toReturn=new ArrayList<>();    final StringBuilder builder=new StringBuilder();    while (scanner.hasNextLine())     builder.append(scanner.nextLine() + "\n");    scanner.close();    final JSONObject object=(JSONObject)parser.parse(builder.toString());    final JSONArray applications=(JSONArray)object.get("applications");    final Iterator<?> iterator=applications.iterator();    while (iterator.hasNext()) {      final JSONObject currentApplication=(JSONObject)iterator.next();      final String appKey=(String)currentApplication.get("app_key");      final String launchType=(String)currentApplication.get("launch_type");      final JSONObject strings=(JSONObject)currentApplication.get("strings");      JSONObject english=(JSONObject)strings.get("en_us");      final String name=(String)english.get("name");      final String imagePath=(String)currentApplication.get("image_path");      final String launchURL=(String)currentApplication.get("url");      toReturn.add(new SteamVRApp(-1,appKey,launchType,name,imagePath,launchURL));    }    if (toReturn.size() > 0)     return Optional.of(toReturn);  } catch (  Exception e) {    e.printStackTrace();  }  return Optional.empty();}  }
class C{  public int writeFieldId(FieldId fieldId){  int off=data.position();  writeUnsignedShort(fieldId.declaringClassIndex);  writeUnsignedShort(fieldId.typeIndex);  writeInt(fieldId.nameIndex);  return off;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_INSTANCE_REGISTER_CANCELED_WTH_DIFFICULTY(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1401055,value0,value1);}  }
class C{  static void addPermissionsForURLs(URL[] urls,PermissionCollection perms,boolean forLoader){  for (int i=0; i < urls.length; i++) {    URL url=urls[i];    try {      URLConnection urlConnection=url.openConnection();      Permission p=urlConnection.getPermission();      if (p != null) {        if (p instanceof FilePermission) {          String path=p.getName();          int endIndex=path.lastIndexOf(File.separatorChar);          if (endIndex != -1) {            path=path.substring(0,endIndex + 1);            if (path.endsWith(File.separator)) {              path+="-";            }            Permission p2=new FilePermission(path,"read");            if (!perms.implies(p2)) {              perms.add(p2);            }          } else {            if (!perms.implies(p)) {              perms.add(p);            }          }        } else {          if (!perms.implies(p)) {            perms.add(p);          }          if (forLoader) {            URL hostURL=url;            for (URLConnection conn=urlConnection; conn instanceof JarURLConnection; ) {              hostURL=((JarURLConnection)conn).getJarFileURL();              conn=hostURL.openConnection();            }            String host=hostURL.getHost();            if (host != null && p.implies(new SocketPermission(host,"resolve"))) {              Permission p2=new SocketPermission(host,"connect,accept");              if (!perms.implies(p2)) {                perms.add(p2);              }            }          }        }      }    } catch (    IOException e) {    }  }}  }
class C{  public SpaceTypeDescriptorBuilder addFixedProperty(String propertyName,Class<?> propertyType){  return addFixedProperty(propertyName,propertyType,SpaceDocumentSupport.DEFAULT,StorageType.DEFAULT);}  }
class C{  public static boolean isServiceRunning(Context context,String className){  boolean isRunning=false;  ActivityManager activityManager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  List<ActivityManager.RunningServiceInfo> serviceInfos=activityManager.getRunningServices(Integer.MAX_VALUE);  for (  ActivityManager.RunningServiceInfo si : serviceInfos) {    if (className.equals(si.service.getClassName())) {      isRunning=true;    }  }  return isRunning;}  }
class C{  protected boolean changeState(State oldState,State newState,boolean force) throws RemoteException {  Object service=_electTemplate.getService();  ActiveElectionState oldJoinState=new ActiveElectionState(oldState);  ActiveElectionState newJoinState=new ActiveElectionState(newState);  while (!isTerminate()) {    try {      _namingService.modifyNamingAttributes(service,new Entry[]{oldJoinState},new Entry[]{newJoinState});      setCurrentState(newState);      if (_logger.isLoggable(Level.FINE)) {        _logger.fine("Changed state from [" + (oldState == null ? "any" : oldState) + "] to ["+ newState+ "]");      }      return true;    } catch (    RemoteException ex) {      String msg="ChangeState failed for service: " + service.getClass();      if (force)       msg=msg + ".ForceChange enabled - Retry again...";      if (_logger.isLoggable(Level.FINE))       _logger.log(Level.FINE,msg,ex);      if (force) {        try {          Thread.sleep(_config.getYieldTime());          continue;        } catch (        InterruptedException e) {          return false;        }      }      throw new RemoteException(msg,ex);    }  }  return false;}  }
class C{  public boolean isUsed(){  return myUsed;}  }
class C{  public boolean isValid(){  return (quality == null || quality.isValid());}  }
class C{  private int testInRange(long actual,long expected,long epsilon){  long min=expected - epsilon;  long max=expected + epsilon;  return actual < min ? -1 : actual > max ? 1 : 0;}  }
class C{  LandlordLeaseMap(Landlord landlord,Uuid landlordUuid,Lease lease,long duration){  super(lease,duration);  if (landlord == null)   throw new NullPointerException("Landlord must be non-null");  if (landlordUuid == null)   throw new NullPointerException("landlordUuid must be non-null");  this.landlord=landlord;  this.landlordUuid=landlordUuid;}  }
class C{  public PromptingDialog(Shell shell,IResource[] resources,IPromptCondition condition,String title){  this.condition=condition;  this.resources=resources;  this.title=title;  this.shell=shell;  this.hasMultipleResources=resources.length > 1;  if (hasMultipleResources) {    buttons=new String[]{IDialogConstants.YES_LABEL,IDialogConstants.YES_TO_ALL_LABEL,IDialogConstants.NO_LABEL,IDialogConstants.CANCEL_LABEL};  } else {    buttons=new String[]{IDialogConstants.OK_LABEL,IDialogConstants.CANCEL_LABEL};  }}  }
class C{  public void save(Writer writer){  YAML.get().dump(saveMap(),writer);}  }
class C{  public FieldCP(String clazz,String name,String sig){  uniq=(clazz + "&%$#&" + name+ "*()#$"+ sig).intern();  this.clazz=new ClassCP(clazz);  this.nt=new NameTypeCP(name,sig);}  }
class C{  public boolean reflected(){  return reflected;}  }
class C{  public T val(){  return v;}  }
class C{  @Override public long skip(long n) throws IOException {  double[] data=source.getData((int)n);  return data.length;}  }
class C{  protected List<byte[]> convertStringListToByteArray(List<String> valueList){  List<byte[]> byteArrayList=new ArrayList<>(valueList.size());  for (  String value : valueList) {    byteArrayList.add(value.getBytes(Charset.defaultCharset()));  }  return byteArrayList;}  }
class C{  private static Bitmap resizePhoto(Bitmap realImage,float maxImageSize,boolean filter){  float ratio=Math.min((float)maxImageSize / realImage.getWidth(),(float)maxImageSize / realImage.getHeight());  int width=Math.round((float)ratio * realImage.getWidth());  int height=Math.round((float)ratio * realImage.getHeight());  Bitmap newBitmap=Bitmap.createScaledBitmap(realImage,width,height,filter);  return newBitmap;}  }
class C{  @deprecated public char next(){  if (this.pos < this.end - 1) {    this.pos+=1;    return this.text.charAt(this.pos);  }  this.pos=this.end;  return 65535;}  }
class C{  public void actionPerformed(ActionEvent ev){  execute("set index=" + PearsonDistance.PEARSON_DISTANCE + ";");}  }
class C{  @Override public double evaluate(final double[] values,final int begin,final int length) throws MathIllegalArgumentException {  double min=Double.NaN;  if (MathArrays.verifyValues(values,begin,length)) {    min=values[begin];    for (int i=begin; i < begin + length; i++) {      if (!Double.isNaN(values[i])) {        min=(min < values[i]) ? min : values[i];      }    }  }  return min;}  }
class C{  public TemplateDruidQuery withInnerQuery(TemplateDruidQuery newNestedQuery){  return new TemplateDruidQuery(aggregations,postAggregations,newNestedQuery,timeGrain);}  }
class C{  public static byte[] toByteArray(InputStream input) throws IOException {  ByteArrayOutputStream output=new ByteArrayOutputStream();  copy(input,output);  return output.toByteArray();}  }
class C{  public SiteAdminGrid deactivatePage(String title){  selectPageByTitle(title);  deactivateSelectedPage();  return this;}  }
class C{  @Override public void endGeneralEntity(String name,Augmentations augs) throws XNIException {  if (fDocumentHandler != null && !fOnlyPassPrefixMappingEvents) {    fDocumentHandler.endGeneralEntity(name,augs);  }}  }
class C{  public static byte[] toByteArray(InputStream input) throws IOException {  ByteArrayOutputStream output=new ByteArrayOutputStream();  copy(input,output);  return output.toByteArray();}  }
class C{  @Override public void close() throws IOException {  if (null != dictionarySortIndexThriftReader) {    dictionarySortIndexThriftReader.close();  }}  }
class C{  public FieldPanel(int xPos,String labelString){  this(xPos,labelString,BasePanel.WIDGET_HEIGHT);}  }
class C{  public int calculateStorageSize(int vmfullclonesize,int vmdeltasize,int vmpersistentdisksize,int vmdisposabledisksize,int vmlogsize,int vmswapsize,int vmvideoswapsize){  final int i=vmfullclonesize + vmdeltasize + vmpersistentdisksize+ vmdisposabledisksize+ vmlogsize+ vmswapsize+ vmvideoswapsize;  return i;}  }
class C{  public void clearDoubleHeaderCache(){  clearSubHeaderCache();  clearHeaderCache();}  }
class C{  public void doMeasure(int widthMeasureSpec,int heightMeasureSpec){  if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) {    int tempSpec=widthMeasureSpec;    widthMeasureSpec=heightMeasureSpec;    heightMeasureSpec=tempSpec;  }  int width=View.getDefaultSize(mVideoWidth,widthMeasureSpec);  int height=View.getDefaultSize(mVideoHeight,heightMeasureSpec);  if (mCurrentAspectRatio == IRenderView.AR_MATCH_PARENT) {    width=widthMeasureSpec;    height=heightMeasureSpec;  } else   if (mVideoWidth > 0 && mVideoHeight > 0) {    int widthSpecMode=View.MeasureSpec.getMode(widthMeasureSpec);    int widthSpecSize=View.MeasureSpec.getSize(widthMeasureSpec);    int heightSpecMode=View.MeasureSpec.getMode(heightMeasureSpec);    int heightSpecSize=View.MeasureSpec.getSize(heightMeasureSpec);    if (widthSpecMode == View.MeasureSpec.AT_MOST && heightSpecMode == View.MeasureSpec.AT_MOST) {      float specAspectRatio=(float)widthSpecSize / (float)heightSpecSize;      float displayAspectRatio;switch (mCurrentAspectRatio) {case IRenderView.AR_16_9_FIT_PARENT:        displayAspectRatio=16.0f / 9.0f;      if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270)       displayAspectRatio=1.0f / displayAspectRatio;    break;case IRenderView.AR_4_3_FIT_PARENT:  displayAspectRatio=4.0f / 3.0f;if (mVideoRotationDegree == 90 || mVideoRotationDegree == 270) displayAspectRatio=1.0f / displayAspectRatio;break;case IRenderView.AR_ASPECT_FIT_PARENT:case IRenderView.AR_ASPECT_FILL_PARENT:case IRenderView.AR_ASPECT_WRAP_CONTENT:default :displayAspectRatio=(float)mVideoWidth / (float)mVideoHeight;if (mVideoSarNum > 0 && mVideoSarDen > 0) displayAspectRatio=displayAspectRatio * mVideoSarNum / mVideoSarDen;break;}boolean shouldBeWider=displayAspectRatio > specAspectRatio;switch (mCurrentAspectRatio) {case IRenderView.AR_ASPECT_FIT_PARENT:case IRenderView.AR_16_9_FIT_PARENT:case IRenderView.AR_4_3_FIT_PARENT:if (shouldBeWider) {width=widthSpecSize;height=(int)(width / displayAspectRatio);} else {height=heightSpecSize;width=(int)(height * displayAspectRatio);}break;case IRenderView.AR_ASPECT_FILL_PARENT:if (shouldBeWider) {height=heightSpecSize;width=(int)(height * displayAspectRatio);} else {width=widthSpecSize;height=(int)(width / displayAspectRatio);}break;case IRenderView.AR_ASPECT_WRAP_CONTENT:default :if (shouldBeWider) {width=Math.min(mVideoWidth,widthSpecSize);height=(int)(width / displayAspectRatio);} else {height=Math.min(mVideoHeight,heightSpecSize);width=(int)(height * displayAspectRatio);}break;}} else if (widthSpecMode == View.MeasureSpec.EXACTLY && heightSpecMode == View.MeasureSpec.EXACTLY) {width=widthSpecSize;height=heightSpecSize;if (mVideoWidth * height < width * mVideoHeight) {width=height * mVideoWidth / mVideoHeight;} else if (mVideoWidth * height > width * mVideoHeight) {height=width * mVideoHeight / mVideoWidth;}} else if (widthSpecMode == View.MeasureSpec.EXACTLY) {width=widthSpecSize;height=width * mVideoHeight / mVideoWidth;if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {height=heightSpecSize;}} else if (heightSpecMode == View.MeasureSpec.EXACTLY) {height=heightSpecSize;width=height * mVideoWidth / mVideoHeight;if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {width=widthSpecSize;}} else {width=mVideoWidth;height=mVideoHeight;if (heightSpecMode == View.MeasureSpec.AT_MOST && height > heightSpecSize) {height=heightSpecSize;width=height * mVideoWidth / mVideoHeight;}if (widthSpecMode == View.MeasureSpec.AT_MOST && width > widthSpecSize) {width=widthSpecSize;height=width * mVideoHeight / mVideoWidth;}}} else {}mMeasuredWidth=width;mMeasuredHeight=height;}  }
class C{  public JSONArray toJSONArray(JSONArray names) throws JSONException {  if (names == null || names.length() == 0) {    return null;  }  JSONArray ja=new JSONArray();  for (int i=0; i < names.length(); i+=1) {    ja.put(this.opt(names.getString(i)));  }  return ja;}  }
class C{  private boolean isCurrentValueAvailable(final SourceDataTag tag){  boolean isAvailable=(tag.getCurrentValue() != null) && (tag.getCurrentValue().getValue() != null);  if (this.equipmentLogger.isTraceEnabled())   this.equipmentLogger.trace(format("isCurrentValueAvailable - Tag %d : %b",tag.getId(),isAvailable));  return isAvailable;}  }
class C{  public SizeAnimator(){  super();}  }
class C{  public static Bitmap decodeSampledBitmapFromFile(String filename,int reqWidth,int reqHeight,ImageCache cache){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeFile(filename,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  if (Utils.hasHoneycomb()) {    addInBitmapOptions(options,cache);  }  options.inJustDecodeBounds=false;  return BitmapFactory.decodeFile(filename,options);}  }
class C{  @RequestMapping(value="/{id}",method=GET,produces=APPLICATION_JSON_VALUE) public ResponseEntity<ProjectDTO> findById(@PathVariable Integer id) throws URISyntaxException {  log.debug("Find by id Project : {}",id);  return Optional.ofNullable(projectDTOService.findOne(id)).map(null).orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));}  }
class C{  private void handleOuterClassThisInit(soot.SootMethod sootMethod){  SootField this0Field=body.getMethod().getDeclaringClass().getFieldByNameUnsafe("this$0");  if (this0Field != null) {    soot.jimple.FieldRef fieldRef=soot.jimple.Jimple.v().newInstanceFieldRef(specialThisLocal,this0Field.makeRef());    soot.jimple.AssignStmt stmt=soot.jimple.Jimple.v().newAssignStmt(fieldRef,outerClassParamLocal);    body.getUnits().add(stmt);  }}  }
class C{  @Override public void initialize(SinkTaskContext context){  iTaskContext=context;}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public Builder duplicateColumns(List<String> columnNames,List<String> newNames){  return transform(new DuplicateColumnsTransform(columnNames,newNames));}  }
class C{  private AudioInputStream synthesizeVocalization(AudioFileFormat aft,Element domElement) throws SynthesisException {  int numberOfBackChannels=unitFileReader.getNumberOfUnits();  int backchannelNumber=vSelector.getBestMatchingCandidate(domElement);  assert backchannelNumber < numberOfBackChannels : "This voice has " + numberOfBackChannels + " backchannels only. so it doesn't support unit number "+ backchannelNumber;  return synthesizeSelectedVocalization(backchannelNumber,aft,domElement);}  }
class C{  public boolean add(Object e){synchronized (this) {    Object[] elements=getArray();    int len=elements.length;    Object[] newElements=copyOf(elements,len + 1);    newElements[len]=e;    setArray(newElements);  }  return true;}  }
class C{  public boolean verbose(){  return soot.PhaseOptions.getBoolean(options,"verbose");}  }
class C{  private void notifyListeners(){  for (  LegendOptionDataUpdateInterface listener : listenerList) {    listener.updateLegendOptionData(data);  }}  }
class C{  public LongArrayList top(int n){  LongArrayList top=new LongArrayList();  long[] values=data.toLongArray();  LongArrays.parallelQuickSort(values,ReverseLongComparator.instance());  for (int i=0; i < n && i < values.length; i++) {    top.add(values[i]);  }  return top;}  }
class C{  Node(){  key=null;  next=prev=this;}  }
class C{  private void skip(int n){  idx+=n;}  }
class C{  private Table readTable(int index){  TableBlock block=_blocks.get(getBlock(index));  return block.getTable(getBlockOffset(index));}  }
class C{  @Override public int read(byte[] buf) throws IOException {  return read(buf,0,buf.length);}  }
class C{  public Builder addColumnFloat(String name){  return addColumn(new FloatMetaData(name));}  }
class C{  private static void populateExtensions(ToolSelectionInterface toolMgr){  extensionList.add(new GeoServerInput(toolMgr));  extensionList.add(new FileSystemInput(toolMgr));}  }
class C{  @SneakyThrows public static boolean exists(final CuratorFramework client,final String path){  boolean exists=false;  try {    final Stat stat=client.checkExists().forPath(path);    exists=stat != null;  } catch (  Exception ex) {    log.error("failed check stat of path: {}, error: {}",path,ex);    throw ex;  }  return exists;}  }
class C{  public <R>Plan<R> then(Function<? super T,? extends R> selector){  return JoinPatterns.then(o,selector);}  }
class C{  private void optimizeFiles(Map<Key,TSData> files){  files=files.entrySet().stream().map(null).flatMap(null).collect(Collectors.toMap(null,null));  if (files.isEmpty())   return;  final List<Key> keys=new ArrayList<>(files.keySet());  LOG.log(Level.INFO,"kicking off optimization of {0}",keys.stream().map(null).collect(Collectors.toList()));  CompletableFuture<Void> task=new TSDataOptimizerTask(dir_).addAll(files.values()).run().thenAccept(null);  pendingTasks.add(task);  task.whenComplete(null);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_ALLIANCE_HE_IS_ALREADY_MEMBER_OF_OUR_ALLIANCE(String value0){  return new SM_SYSTEM_MESSAGE(1300193,value0);}  }
class C{  public long cookie(){  return cookie;}  }
class C{  @NonNull public static StorableFence and(@NonNull Collection<StorableFence> fences){  StorableFence metaFence=new StorableFence(Type.META);  metaFence.mAndFences.addAll(fences);  return metaFence;}  }
class C{  public static ValueGetterSpacePredicate<ServerEntry> propertyLessEqual(String propertyName,Comparable<?> value){  return property(propertyName,lessEqual(value));}  }
class C{  public CannotNestException(String desc){  super(desc);}  }
class C{  public void requestPreviewFrame(Handler handler,int message){  if (mCamera != null && mPreviewing) {    mPreviewCallback.setHandler(handler,message);    mCamera.setOneShotPreviewCallback(mPreviewCallback);  }}  }
class C{  public int createDeferredNotation(String notationName,String publicId,String systemId,String baseURI){  int nodeIndex=createNode(Node.NOTATION_NODE);  int chunk=nodeIndex >> CHUNK_SHIFT;  int index=nodeIndex & CHUNK_MASK;  int extraDataIndex=createNode(Node.NOTATION_NODE);  int echunk=extraDataIndex >> CHUNK_SHIFT;  int eindex=extraDataIndex & CHUNK_MASK;  setChunkValue(fNodeName,notationName,chunk,index);  setChunkValue(fNodeValue,publicId,chunk,index);  setChunkValue(fNodeURI,systemId,chunk,index);  setChunkIndex(fNodeExtra,extraDataIndex,chunk,index);  setChunkValue(fNodeName,baseURI,echunk,eindex);  return nodeIndex;}  }
class C{  public boolean isStable(){  return myFeatures.contains(FEATURE_STABLE);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostSpellAttackEffect_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200335,skillname);}  }
class C{  public SampleInfo(int sampleRate,int numberOfChannels,int residualFold,float coeffMin,float coeffRange,float postEmphasis){  this.sampleRate=sampleRate;  this.numberOfChannels=numberOfChannels;  this.residualFold=residualFold;  this.coeffMin=coeffMin;  this.coeffRange=coeffRange;  this.postEmphasis=postEmphasis;}  }
class C{  public VideoCreateCommentQuery stickerId(Integer value){  return unsafeParam("sticker_id",value);}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  public Vector3f normalizeLocal(){  float length=x * x + y * y + z * z;  if (length != 1f && length != 0f) {    length=1.0f / FastMath.sqrt(length);    x*=length;    y*=length;    z*=length;  }  return this;}  }
class C{  private boolean instantiateType(String index,String type,EsTag tag){  if ((cacheIndicesTypes.containsKey(index) && cacheIndicesTypes.get(index).contains(type)) || !checkIndex(index)) {    log.warn("instantiateType() - Bad type adding to index {}, type: {}",index,type);  }  String mapping=null;  if (!typeIsPresent(index,type)) {    mapping=chooseMapping(tag);    log.debug("instantiateIndex() - Adding a new mapping to index {} for type {}: ",index,type,mapping);  }  return connector.createIndexTypeMapping(index,type,mapping);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public Modifiers fullCopy(){  Modifiers tree=(Modifiers)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  @Override public void onRequestSinglePhotoSuccess(Call<Photo> call,Response<Photo> response){  if (response.isSuccessful() && response.body() != null) {    Mysplash.getInstance().setPhoto(response.body());    view.dismissRequestDialog();    view.drawBrowsableView();  } else {    ((PhotoService)model.getService()).requestAPhoto(model.getBrowsableDataKey(),this);  }}  }
class C{  public boolean seek(final SeekOp op){  if (SHOULD_CHECK) {    requireNonNull(op);    checkNotClosed();    txn.checkReady();  }  final int rc=LIB.mdb_cursor_get(ptrCursor,txn.pointerKey(),txn.pointerVal(),op.getCode());  if (rc == MDB_NOTFOUND) {    return false;  }  checkRc(rc);  txn.keyOut();  txn.valOut();  return true;}  }
class C{  @Override public void comment(XMLString text,Augmentations augs) throws XNIException {  if (fAnnotationDepth > -1) {    schemaDOM.comment(text);  }}  }
class C{  private void downloadPhotoSuccess(Context c,long missionId){  for (int i=0; i < DownloadHelper.getInstance(c).entityList.size(); i++) {    if (DownloadHelper.getInstance(c).entityList.get(i).missionId == missionId) {      DownloadMissionEntity entity=DownloadHelper.getInstance(c).entityList.get(i);      c.sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE,Uri.parse("file://" + Environment.getExternalStorageDirectory() + Mysplash.DOWNLOAD_PATH+ entity.photoId+ Mysplash.DOWNLOAD_FORMAT)));switch (entity.downloadType) {case DownloadHelper.DOWNLOAD_TYPE:        if (Mysplash.getInstance() != null && Mysplash.getInstance().getTopActivity() != null) {          simpleDownloadSuccess(entity);        }      break;case DownloadHelper.SHARE_TYPE:{      if (Mysplash.getInstance() != null && Mysplash.getInstance().getTopActivity() != null) {        shareDownloadSuccess(entity);      }      break;    }case DownloadHelper.WALLPAPER_TYPE:{    if (Mysplash.getInstance() != null && Mysplash.getInstance().getTopActivity() != null) {      wallpaperDownloadSuccess(entity);    }    break;  }}DownloadHelper.getInstance(c).downloadPhotoSuccess(i);return;}}}  }
class C{  public boolean hasASTForSootName(String name){  if (sootNameToAST == null)   return false;  if (sootNameToAST.containsKey(name))   return true;  return false;}  }
class C{  public int[][] fromFile(File file) throws IOException {  BufferedImage image=ImageIO.read(file);  image=scalingIfNeed(image,true);  return toIntArrayArray(image);}  }
class C{  public static boolean isInternationalPhoneNumber(String s){  if (isEmpty(s))   return defaultEmptyOK;  String normalizedPhone=stripCharsInBag(s,phoneNumberDelimiters);  return isPositiveInteger(normalizedPhone);}  }
class C{  private void drawShadows(Canvas canvas){  int height=(int)(3 * getItemHeight());  topShadow.setBounds(0,0,getWidth(),height);  topShadow.draw(canvas);  bottomShadow.setBounds(0,getHeight() - height,getWidth(),getHeight());  bottomShadow.draw(canvas);}  }
class C{  public String resolveNotation(String notationName,String publicId,String systemId) throws IOException {  String resolved=null;  catalogManager.debug.message(3,"resolveNotation(" + notationName + ","+ publicId+ ","+ systemId+ ")");  systemId=normalizeURI(systemId);  if (publicId != null && publicId.startsWith("urn:publicid:")) {    publicId=PublicId.decodeURN(publicId);  }  if (systemId != null && systemId.startsWith("urn:publicid:")) {    systemId=PublicId.decodeURN(systemId);    if (publicId != null && !publicId.equals(systemId)) {      catalogManager.debug.message(1,"urn:publicid: system identifier differs from public identifier; using public identifier");      systemId=null;    } else {      publicId=systemId;      systemId=null;    }  }  if (systemId != null) {    resolved=resolveLocalSystem(systemId);    if (resolved != null) {      return resolved;    }  }  if (publicId != null) {    resolved=resolveLocalPublic(NOTATION,notationName,publicId,systemId);    if (resolved != null) {      return resolved;    }  }  boolean over=default_override;  Enumeration en=catalogEntries.elements();  while (en.hasMoreElements()) {    CatalogEntry e=(CatalogEntry)en.nextElement();    if (e.getEntryType() == OVERRIDE) {      over=e.getEntryArg(0).equalsIgnoreCase("YES");      continue;    }    if (e.getEntryType() == NOTATION && e.getEntryArg(0).equals(notationName)) {      if (over || systemId == null) {        return e.getEntryArg(1);      }    }  }  return resolveSubordinateCatalogs(NOTATION,notationName,publicId,systemId);}  }
class C{  private void initLabels(){  CompareConfiguration cc=getCompareConfiguration();  cc.setLeftEditable(!readOnly);  cc.setRightEditable(false);  String title;  String leftLabel;  String rightLabel;  if (resources.length > 1) {    title=Policy.bind("SVNLocalBaseCompareInput.0") + remoteRevision;    leftLabel=Policy.bind("SVNLocalBaseCompareInput.1");    rightLabel=remoteRevision.toString();  } else {    title=Policy.bind("SVNCompareRevisionsInput.compareResourceAndVersions",new Object[]{resources[0].getName()});    leftLabel=Policy.bind("SVNCompareRevisionsInput.workspace",new Object[]{resources[0].getName()});    rightLabel=Policy.bind("SVNCompareRevisionsInput.repository",new Object[]{resources[0].getName()});  }  setTitle(title);  cc.setLeftLabel(leftLabel);  cc.setRightLabel(rightLabel);}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public static boolean isCoordinate(String value){  try {    String[] lnglat=value.trim().split(",");    float lng=Float.parseFloat(lnglat[0]);    float lat=Float.parseFloat(lnglat[1]);    return (lng >= -180 && lng <= 180 && lat >= -90 && lat <= 90);  } catch (  Exception x) {    return false;  }}  }
class C{  public ColumnMetadata(Table table,String column,Comparator cmp,boolean dynamic){  m_table=table;  m_field=column;  m_cmp=cmp;  m_dynamic=dynamic;}  }
class C{  public String[] listUsers(){  ResponseEntity<String[]> response=restTemplate.exchange(url + RMAControllerMappings.LIST_USERS_MAPPING,HttpMethod.GET,request,String[].class);  return response.getBody();}  }
class C{  public boolean testValue(String sldContentString,TreeSelectionData selectionData,FieldIdEnum field,XMLFieldBase testValue){  boolean passed=false;  Document doc=getXMLDocument(sldContentString);  String extractedString=getString(doc,selectionData,field,null);  if (testValue instanceof XMLSetFieldLiteralString) {    XMLSetFieldLiteralString stringLiteral=(XMLSetFieldLiteralString)testValue;    String valueToTest=stringLiteral.getValue();    passed=(valueToTest.compareTo(extractedString) == 0);  } else   if (testValue instanceof XMLSetFieldLiteralDouble) {    XMLSetFieldLiteralDouble doubleLiteral=(XMLSetFieldLiteralDouble)testValue;    if ((extractedString != null) && !extractedString.isEmpty()) {      Double convertedValue=Double.valueOf(extractedString);      passed=(Math.abs(convertedValue - doubleLiteral.getValue()) < 0.001);    }  } else   if (testValue instanceof XMLSetFieldLiteralInt) {    XMLSetFieldLiteralInt intLiteral=(XMLSetFieldLiteralInt)testValue;    if ((extractedString != null) && !extractedString.isEmpty()) {      passed=(Integer.valueOf(extractedString).intValue() == intLiteral.getValue().intValue());    }  } else   if (testValue instanceof XMLSetFieldLiteralBoolean) {    XMLSetFieldLiteralBoolean booleanLiteral=(XMLSetFieldLiteralBoolean)testValue;    if ((extractedString != null) && !extractedString.isEmpty()) {      passed=(Boolean.valueOf(extractedString) == booleanLiteral.isValue());    }  }  System.out.println("Checking : " + field + " "+ extractedString+ " "+ (passed ? "PASS" : "FAIL"));  return passed;}  }
class C{  private String saveFileOnDisk(String filePathToSave,String fileContent) throws IOException {  File file=new File(filePathToSave);  Files.createParentDirs(file);  Files.write(fileContent,file,Charset.defaultCharset());  return filePathToSave;}  }
class C{  public void addBodyDecl(BodyDecl node){  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();  list.addChild(node);}  }
class C{  final void triangulateYMonotonePolygon(MonotonePolygon<DoubleEdgeListVertex> monotonePolygon){  List<MonotoneVertex<DoubleEdgeListVertex>> stack=new ArrayList<MonotoneVertex<DoubleEdgeListVertex>>();  List<MonotoneVertex<DoubleEdgeListVertex>> vertices=monotonePolygon.vertices;  stack.add(vertices.get(0));  stack.add(vertices.get(1));  int i=2;  while (!stack.isEmpty()) {    MonotoneVertex<DoubleEdgeListVertex> v=vertices.get(i);    MonotoneVertex<DoubleEdgeListVertex> vBot=stack.get(0);    MonotoneVertex<DoubleEdgeListVertex> vTop=stack.get(stack.size() - 1);    if (v.isAdjacent(vBot) && !v.isAdjacent(vTop)) {      while (stack.size() > 1) {        MonotoneVertex<DoubleEdgeListVertex> vt=stack.remove(stack.size() - 1);        this.addHalfEdges(v.data,vt.data);      }      stack.clear();      stack.add(vTop);      stack.add(v);    } else     if (v.isAdjacent(vTop) && !v.isAdjacent(vBot)) {      double cross=0;      int sSize=stack.size();      while (sSize > 1) {        MonotoneVertex<DoubleEdgeListVertex> vt=stack.get(sSize - 1);        MonotoneVertex<DoubleEdgeListVertex> vt1=stack.get(sSize - 2);        Vector2 p1=v.data.point;        Vector2 p2=vt.data.point;        Vector2 p3=vt1.data.point;        if (v.chainType == MonotoneChainType.LEFT || v.chainType == MonotoneChainType.BOTTOM) {          Vector2 v1=p2.to(p3);          Vector2 v2=p2.to(p1);          cross=v1.cross(v2);        } else {          Vector2 v1=p1.to(p2);          Vector2 v2=p3.to(p2);          cross=v1.cross(v2);        }        if (cross < Epsilon.E) {          this.addHalfEdges(v.data,vt1.data);          stack.remove(sSize - 1);          sSize--;        } else {          break;        }      }      stack.add(v);    } else     if (v.isAdjacent(vTop) && v.isAdjacent(vBot)) {      stack.remove(stack.size() - 1);      while (stack.size() > 1) {        MonotoneVertex<DoubleEdgeListVertex> vt=stack.remove(stack.size() - 1);        this.addHalfEdges(v.data,vt.data);      }      break;    }    i++;  }}  }
class C{  public void populateAll() throws GeneralException {  ArtifactInfoContext infoContext=new ArtifactInfoContext();  ArtifactInfoGatherer infoGatherer=new ArtifactInfoGatherer(infoContext);  try {    if (this.modelForm instanceof ModelSingleForm) {      infoGatherer.visit((ModelSingleForm)this.modelForm);    } else {      infoGatherer.visit((ModelGrid)this.modelForm);    }  } catch (  Exception e) {    throw new GeneralException(e);  }  populateEntitiesFromNameSet(infoContext.getEntityNames());  populateServicesFromNameSet(infoContext.getServiceNames());  this.populateFormExtended();  this.populateLinkedRequests(infoContext.getRequestLocations());  this.populateTargetedRequests(infoContext.getTargetLocations());}  }
class C{  public static String escapeString(String str,char escapeChar,char charToEscape){  return escapeString(str,escapeChar,new char[]{charToEscape});}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;}  }
class C{  public static String utf8Encode(String str,String defultReturn){  if (!isEmpty(str) && str.getBytes().length != str.length()) {    try {      return URLEncoder.encode(str,"UTF-8");    } catch (    UnsupportedEncodingException e) {      return defultReturn;    }  }  return str;}  }
class C{  private void openMainAndFinish(@NonNull SplashLibrary splashLibrary){  final String initialized=splashLibrary.initializedString();  Toast.makeText(this,initialized,Toast.LENGTH_SHORT).show();  Intent intent=new Intent(this,MainActivity.class);  intent.putExtra(MainActivity.EXTRA_USEFUL_STRING,splashLibrary.usefulString());  startActivity(intent);  finish();}  }
class C{  public boolean syncStarted(boolean notifyUser){synchronized (myLock) {    if (mySyncInProgress) {      LOG.info(String.format("Sync already in progress for project '%1$s'.",myProject.getName()));      return false;    }    mySyncInProgress=true;  }  LOG.info(String.format("Started sync with Gradle for project '%1$s'.",myProject.getName()));  addInfoToEventLog("Gradle sync started");  cleanUpProjectPreferences();  if (notifyUser) {    notifyUser();  }  syncPublisher(null);  trackSyncEvent(ACTION_GRADLE_SYNC_STARTED);  return true;}  }
class C{  private void saveRepositoryLocaleWithCycleCheck(RepositoryLocale repositoryLocale,Map<String,RepositoryLocale> repositoryLocalesMap,Set<String> bcp47TagsInParents,Set<String> addedBcp47Tags) throws RepositoryLocaleCreationException {  checkCycle(repositoryLocale,bcp47TagsInParents);  if (repositoryLocale.getParentLocale() != null) {    logger.debug("Repository locale has a parent, process it first");    RepositoryLocale parentRepositoryLocaleFromMap=repositoryLocalesMap.get(repositoryLocale.getParentLocale().getLocale().getBcp47Tag());    if (parentRepositoryLocaleFromMap == null) {      throw new RepositoryLocaleCreationException("The parent RepositoryLocale was not specified in the 1st level set");    } else {      saveRepositoryLocaleWithCycleCheck(parentRepositoryLocaleFromMap,repositoryLocalesMap,bcp47TagsInParents,addedBcp47Tags);    }  }  String bcp47Tag=repositoryLocale.getLocale().getBcp47Tag();  if (!addedBcp47Tags.contains(bcp47Tag)) {    addRepositoryLocale(repositoryLocale.getRepository(),bcp47Tag,repositoryLocale.getParentLocale() != null ? repositoryLocale.getParentLocale().getLocale().getBcp47Tag() : null,repositoryLocale.isToBeFullyTranslated());    addedBcp47Tags.add(bcp47Tag);  } else {    logger.debug(bcp47Tag + " has already been added.  Don't need to add again");  }}  }
class C{  public boolean isSelected(){  ClusterViewer viewer=getViewer();  return viewer.getPcoaTab() != null && viewer.getPcoaTab().getFirstPC() == 0 && viewer.getPcoaTab().getSecondPC() == 2 && !viewer.getPcoaTab().isIs3dMode();}  }
class C{  public FinderPatternFinder(BitMatrix image){  this(image,null);}  }
class C{  public FunctionTableModel(){  columnList.add(Localisation.getString(FunctionTableModel.class,"FunctionTableModel.parameter"));  columnList.add(Localisation.getString(FunctionTableModel.class,"FunctionTableModel.type"));  columnList.add(Localisation.getString(FunctionTableModel.class,"FunctionTableModel.optional"));  columnList.add(Localisation.getString(FunctionTableModel.class,"FunctionTableModel.value"));}  }
class C{  public static boolean isFileOlder(File file,File reference){  if (reference == null) {    throw new IllegalArgumentException("No specified reference file");  }  if (!reference.exists()) {    throw new IllegalArgumentException("The reference file '" + reference + "' doesn't exist");  }  return isFileOlder(file,reference.lastModified());}  }
class C{  @Override public void onAddCommandTag(final ISourceCommandTag sourceCommandTag,final ChangeReport changeReport){  changeReport.appendError("The equipment has no implementation to" + " add command tags. You have to restart the DAQ.");  changeReport.setState(CHANGE_STATE.REBOOT);}  }
class C{  protected Map<String,Object> runService(MapMessage message){  Map<String,? extends Object> context=null;  String serviceName=null;  String xmlContext=null;  try {    serviceName=message.getString("serviceName");    xmlContext=message.getString("serviceContext");    if (serviceName == null || xmlContext == null) {      Debug.logError("Message received is not an OFB service message. Ignored!",module);      return null;    }    Object o=XmlSerializer.deserialize(xmlContext,dispatcher.getDelegator());    if (Debug.verboseOn())     Debug.logVerbose("De-Serialized Context --> " + o,module);    if (ObjectType.instanceOf(o,"java.util.Map"))     context=UtilGenerics.checkMap(o);  } catch (  JMSException je) {    Debug.logError(je,"Problems reading message.",module);  }catch (  Exception e) {    Debug.logError(e,"Problems deserializing the service context.",module);  }  try {    ModelService model=dispatcher.getDispatchContext().getModelService(serviceName);    if (!model.export) {      Debug.logWarning("Attempt to invoke a non-exported service: " + serviceName,module);      return null;    }  } catch (  GenericServiceException e) {    Debug.logError(e,"Unable to get ModelService for service : " + serviceName,module);  }  if (Debug.verboseOn())   Debug.logVerbose("Running service: " + serviceName,module);  Map<String,Object> result=null;  if (context != null) {    try {      result=dispatcher.runSync(serviceName,context);    } catch (    GenericServiceException gse) {      Debug.logError(gse,"Problems with service invocation.",module);    }  }  return result;}  }
class C{  public void addBodyDecl(BodyDecl node){  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();  list.addChild(node);}  }
class C{  public Asn1Object read() throws IOException {  int tag=in.read();  if (tag == -1)   throw new IOException("Invalid DER: stream too short, missing tag");  int length=getLength();  byte[] value=new byte[length];  int n=in.read(value);  if (n < length)   throw new IOException("Invalid DER: stream too short, missing value");  Asn1Object o=new Asn1Object(tag,length,value);  return o;}  }
class C{  public void enableDashedLine(float lineLength,float spaceLength,float phase){  mDashPathEffect=new DashPathEffect(new float[]{lineLength,spaceLength},phase);}  }
class C{  @Override public void run(){  try {    if (_delay > 0) {      fallAsleep(_delay);    }    while (!isInterrupted()) {      super.run();      fallAsleep();    }  } catch (  InterruptedException ie) {    interrupt();  }}  }
class C{  public static void writeSwappedFloat(OutputStream output,float value) throws IOException {  writeSwappedInteger(output,Float.floatToIntBits(value));}  }
class C{  @Override public Constant asConstant(){  throw new ClassCastException();}  }
class C{  public SM_LOGIN_FAIL(AionAuthResponse response){  super(0x01);  this.response=response;}  }
class C{  protected void initLookup(){  m_lookup=new HashMap();  for (int i=0; i < m_names.length; ++i) {    m_lookup.put(m_names[i],new Integer(i));  }}  }
class C{  public PokemonTableController(final GridPane gridPane){  super();  this.gridPane=gridPane;  initializeController();}  }
class C{  default String resourceName(String tableName,String type){  return String.format(RESOURCE_NAME,tableName,type);}  }
class C{  public int append_file1(String appender_file_id,byte[] file_buff) throws IOException, MyException {  String[] parts=new String[2];  this.errno=this.split_file_id(appender_file_id,parts);  if (this.errno != 0) {    return this.errno;  }  return this.append_file(parts[0],parts[1],file_buff);}  }
class C{  @Deployment public void testNonInterruptingSignal(){  ProcessInstance pi=runtimeService.startProcessInstanceByKey("nonInterruptingSignalEvent");  List<Task> tasks=taskService.createTaskQuery().processInstanceId(pi.getProcessInstanceId()).list();  assertEquals(1,tasks.size());  Task currentTask=tasks.get(0);  assertEquals("My User Task",currentTask.getName());  runtimeService.signalEventReceived("alert");  tasks=taskService.createTaskQuery().processInstanceId(pi.getProcessInstanceId()).list();  assertEquals(2,tasks.size());  for (  Task task : tasks) {    if (!task.getName().equals("My User Task") && !task.getName().equals("My Second User Task")) {      fail("Expected: <My User Task> or <My Second User Task> but was <" + task.getName() + ">.");    }  }  taskService.complete(taskService.createTaskQuery().taskName("My User Task").singleResult().getId());  tasks=taskService.createTaskQuery().processInstanceId(pi.getProcessInstanceId()).list();  assertEquals(1,tasks.size());  currentTask=tasks.get(0);  assertEquals("My Second User Task",currentTask.getName());}  }
class C{  private void validateType(TypeImpl conceptType){  if (conceptType.isAbstract() && !ValidateGlobalRules.validateIsAbstractHasNoIncomingIsaEdges(conceptType))   errorsFound.add(ErrorMessage.VALIDATION_IS_ABSTRACT.getMessage(conceptType.getId()));}  }
class C{  public Future<?> scheduleHpRestoreTask(CreatureLifeStats<? extends Creature> lifeStats){  return ThreadPoolManager.getInstance().scheduleAtFixedRate(new HpRestoreTask(lifeStats),1700,DEFAULT_DELAY);}  }
class C{  @Override public boolean remove(Object o){  return backedSet.remove(o);}  }
class C{  public static Link valueOf(String val){  Matcher matcher=parse.matcher(val);  if (!matcher.matches())   throw new RuntimeException("Failed to parse link: " + val);  Link link=new Link();  link.href=matcher.group(1);  String[] props=matcher.group(2).split(";");  HashMap<String,String> map=new HashMap();  for (  String prop : props) {    String[] split=prop.split("=");    map.put(split[0].trim(),split[1].trim());  }  if (map.containsKey("rel")) {    link.relationship=map.get("rel");  }  if (map.containsKey("type")) {    link.type=map.get("type");  }  return link;}  }
class C{  public static JsonObject createBackground(ITextBackground background){  if (instance != null) {    return instance.internal_createBackground(background);  }  return null;}  }
class C{  void insertedNode(NodeImpl node,NodeImpl newInternal,boolean replace){}  }
class C{  public boolean isCompatible(Split split){  return !(getA().intersects(split.getA()) && getA().intersects(split.getB()) && getB().intersects(split.getA())&& getB().intersects(split.getB()));}  }
class C{  public static void buildMouseOverData(JsonObject json){  float partialTicks=0;  Entity viewer=Minecraft.getMinecraft().thePlayer;  float depth=50;  Vec3 eyePos=viewer.getPositionEyes(partialTicks);  Vec3 lookVec=viewer.getLook(partialTicks);  Vec3 searchVec=eyePos.addVector(lookVec.xCoord * depth,lookVec.yCoord * depth,lookVec.zCoord * depth);  MovingObjectPosition mop=Minecraft.getMinecraft().theWorld.rayTraceBlocks(eyePos,searchVec,false,false,false);  MovingObjectPosition mopEnt=findEntity(eyePos,lookVec,depth,mop,true);  if (mopEnt != null)   mop=mopEnt;  if (mop == null) {    return;  }  double hitDist=mop.hitVec.distanceTo(eyePos);  double blockReach=Minecraft.getMinecraft().playerController.getBlockReachDistance();  double entityReach=Minecraft.getMinecraft().playerController.extendedReach() ? 6.0 : 3.0;  JsonObject jsonMop=new JsonObject();  if (mop.typeOfHit == MovingObjectPosition.MovingObjectType.BLOCK) {    jsonMop.addProperty("hitType","block");    jsonMop.addProperty("x",mop.hitVec.xCoord);    jsonMop.addProperty("y",mop.hitVec.yCoord);    jsonMop.addProperty("z",mop.hitVec.zCoord);    IBlockState state=Minecraft.getMinecraft().theWorld.getBlockState(mop.getBlockPos());    List<IProperty> extraProperties=new ArrayList<IProperty>();    DrawBlock db=MinecraftTypeHelper.getDrawBlockFromBlockState(state,extraProperties);    jsonMop.addProperty("type",db.getType().value());    if (db.getColour() != null)     jsonMop.addProperty("colour",db.getColour().value());    if (db.getVariant() != null)     jsonMop.addProperty("variant",db.getVariant().getValue());    if (db.getFace() != null)     jsonMop.addProperty("facing",db.getFace().value());    if (extraProperties.size() > 0) {      for (      IProperty prop : extraProperties) {        String key="prop_" + prop.getName();        if (prop.getValueClass() == Boolean.class)         jsonMop.addProperty(key,Boolean.valueOf(state.getValue(prop).toString())); else         if (prop.getValueClass() == Integer.class)         jsonMop.addProperty(key,Integer.valueOf(state.getValue(prop).toString())); else         jsonMop.addProperty(key,state.getValue(prop).toString());      }    }    jsonMop.addProperty("inRange",hitDist <= blockReach);  } else   if (mop.typeOfHit == MovingObjectPosition.MovingObjectType.ENTITY) {    Entity entity=mop.entityHit;    if (entity != null) {      jsonMop.addProperty("x",entity.posX);      jsonMop.addProperty("y",entity.posY);      jsonMop.addProperty("z",entity.posZ);      String name=entity.getName();      String hitType="entity";      if (entity instanceof EntityItem) {        ItemStack is=((EntityItem)entity).getEntityItem();        DrawItem di=MinecraftTypeHelper.getDrawItemFromItemStack(is);        if (di.getColour() != null)         jsonMop.addProperty("colour",di.getColour().value());        if (di.getVariant() != null)         jsonMop.addProperty("variant",di.getVariant().getValue());        jsonMop.addProperty("stackSize",is.stackSize);        name=di.getType();        hitType="item";      }      jsonMop.addProperty("type",name);      jsonMop.addProperty("hitType",hitType);    }    jsonMop.addProperty("inRange",hitDist <= entityReach);  }  json.add("LineOfSight",jsonMop);}  }
class C{  public WriteEntriesSpaceOperationRequest(){}  }
class C{  public static RequestQueue newRequestQueue(int threadPoolSize){  return NoHttp.newRequestQueue(DiskCacheStore.INSTANCE,OkHttpRestConnection.getInstance(),threadPoolSize);}  }
class C{  public VideoGetQueryWithExtended ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  @Override public int fillChunkData(byte[] data,int offset,int rowId,KeyStructureInfo restructuringInfo){  byte[] maskedKey=getMaskedKey(dataChunk,rowId * chunkAttributes.getColumnValueSize(),restructuringInfo);  System.arraycopy(maskedKey,0,data,offset,maskedKey.length);  return maskedKey.length;}  }
class C{  protected void animateToNearestState(){  final PanelState nearestState=findNearestPanelStateFromHeight(getHeight());  final float displacement=getPanelHeightFromState(nearestState) - getHeight();  final long duration=calculateAnimationDuration(INITIAL_ANIMATION_VELOCITY_DP_PER_SECOND,displacement);  animatePanelToState(nearestState,StateChangeReason.SWIPE,duration);}  }
class C{  public boolean isCutOffApproximation(){  return this.cutOffApproximation;}  }
class C{  @Override public String toString(){  String str=null;  if (denominator == 1) {    str=Integer.toString(numerator);  } else   if (numerator == 0) {    str="0";  } else {    str=numerator + " / " + denominator;  }  return str;}  }
class C{  public EquipmentLogger(final String eqNameAndId,final String className,final String handlerClassName){  if (className != null && !className.equals("")) {    logger=Logger.getLogger(eqNameAndId + "." + className);  } else {    logger=Logger.getLogger(eqNameAndId);  }  ndcPush=handlerClassName;  this.eqNameAndId=eqNameAndId;}  }
class C{  private RectangleNode mergeOneToOne(){  long x_min=Long.MAX_VALUE, y_min=Long.MAX_VALUE;  long x_max=Long.MIN_VALUE, y_max=Long.MIN_VALUE;  SegmentNode p=header[GeometricManager.ONE_TO_ONE];  header[GeometricManager.ONE_TO_ONE]=null;  size[GeometricManager.ONE_TO_ONE]=0;  while (p != null) {    if (p.I1 < x_min)     x_min=p.I1;    if (p.I2 < y_min)     y_min=p.I2;    if (p.I1 + p.L > x_max)     x_max=p.I1 + p.L;    if (p.I2 + p.L > y_max)     y_max=p.I2 + p.L;    p=reclaimSegmentNode(p);  }  RectangleNode q=getRectangleNode();  q.I1=x_min;  q.I2=y_min;  q.L=x_max - x_min;  q.L_prime=y_max - y_min;  return q;}  }
class C{  public static MessageType create(ProtoContainerElement parent,DescriptorProto proto,String path,ExtensionPool extensionPool){  return new MessageType(parent,proto,path,extensionPool);}  }
class C{  public CovarianceSingularityException(PointList list){  super("Covariance matrix got singular;");  this.list=list;}  }
class C{  @Override public int compareTo(@Nullable final ReadableVersionNumber other){  int result=0;  if (other == null) {    result=-1;  } else {    Check.notNull(other.getGroups(),"other.getGroups()");    final int length=groups.size() < other.getGroups().size() ? groups.size() : other.getGroups().size();    final AlphanumComparator comparator=new AlphanumComparator();    result=comparator.compare(toVersionString(groups.subList(0,length)),toVersionString(other.getGroups().subList(0,length)));    if (result == 0) {      result=groups.size() > other.getGroups().size() ? 1 : groups.size() < other.getGroups().size() ? -1 : 0;    }    if (result == 0) {      result=extension.compareTo(other.getExtension());    }    if (result == 0) {      result=comparator.compare(toVersionString(),other.toVersionString());    }  }  return result;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SubTypeExtendDuration_A_TO_SELF(String skillcaster,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200879,skillcaster,value0,skillname);}  }
class C{  public static Map<String,Object> testService(DispatchContext dctx,Map<String,?> context){  Map<String,Object> response=ServiceUtil.returnSuccess();  if (context.size() > 0) {    for (    Map.Entry<String,?> entry : context.entrySet()) {      Object cKey=entry.getKey();      Object value=entry.getValue();      System.out.println("---- SVC-CONTEXT: " + cKey + " => "+ value);    }  }  if (!context.containsKey("message")) {    response.put("resp","no message found");  } else {    System.out.println("-----SERVICE TEST----- : " + (String)context.get("message"));    response.put("resp","service done");  }  System.out.println("----- SVC: " + dctx.getName() + " -----");  return response;}  }
class C{  public static void displayToastTop(Context context,String msg,int durationInSeconds,int yOffset){  int toastDurationInMilliSeconds=durationInSeconds * 1000;  int toastRefreshRateInMilliSeconds=2 * 1000;  SpannableString s=new SpannableString(msg);  s.setSpan(new TypefaceSpan(context,RELATIVE_PATH_TO_TYPEFACE),0,s.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);  final Toast toast=Toast.makeText(context,s,Toast.LENGTH_LONG);  toast.setGravity(Gravity.TOP,0,yOffset);  runCustomToast(toast,toastDurationInMilliSeconds,toastRefreshRateInMilliSeconds);}  }
class C{  public static Histogram syncHistogram(Histogram hist){  double maxRecs=0.0;  for (  String fld : hist.fields()) {    double numRecs=0.0;    for (    Bucket bkt : hist.buckets(fld))     numRecs+=bkt.frequency();    if (Double.compare(numRecs,maxRecs) > 0)     maxRecs=numRecs;  }  Histogram syncHist=new Histogram(hist.fields());  for (  String fld : hist.fields()) {    double numRecs=0.0;    for (    Bucket bkt : hist.buckets(fld))     numRecs+=bkt.frequency();    double extrapolation=maxRecs / numRecs;    for (    Bucket bkt : hist.buckets(fld))     syncHist.addBucket(fld,new Bucket(bkt.valueRange(),extrapolation * bkt.frequency(),bkt.distinctValues(),bkt.valuePercentiles()));  }  return syncHist;}  }
class C{  public Response doPatch(String url){  return doPatch(url,null);}  }
class C{  public boolean isInInstance(){  return getPosition().isInstanceMap();}  }
class C{  public double calculateReplicaUsableCapacity(int vmthinsizeparentvm,int poolsnapshotcount,int desktoppoolcount,int datastorecount,int storageoverhead,String storagetiering){  boolean b=false;  if (storagetiering.equalsIgnoreCase("On")) {    b=true;  } else {    b=false;  }  double d=0;  if (b) {    d=(vmthinsizeparentvm * desktoppoolcount * poolsnapshotcount) / 1048576.0;  } else {    d=(vmthinsizeparentvm * poolsnapshotcount * desktoppoolcount* datastorecount) / 1048576.0;  }  d*=(1.0 + (storageoverhead / 100.0));  d=(double)Math.round(d * 100) / 100;  return d;}  }
class C{  public ClassSource find(String className){  String fileName=className.replace('.','/') + ".class";  SourceLocator.FoundFile file=SourceLocator.v().lookupInClassPath(fileName);  if (file == null)   return null;  return new CoffiClassSource(className,file.inputStream(),file.inputFile().getAbsolutePath(),file.zipFile == null ? null : file.zipFile.getName());}  }
class C{  public GroupsDeleteLinkQuery(VkApiClient client,UserActor actor,int groupId,int linkId){  super(client,"groups.deleteLink",OkResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);  linkId(linkId);}  }
class C{  public static String gmlCoordinatesToString(String coordinates,String precision) throws ParseException {  int nDecimals=Integer.parseInt(precision);  StringBuilder sb=new StringBuilder();  for (  String coordinate : coordinates.trim().split("\\s")) {    String[] point=coordinate.split(",");    String lat=parseCoordinate(point[0],nDecimals,NF), lon=parseCoordinate(point[1],nDecimals,NF);    sb.append("[").append(lat).append(",").append(lon).append("],");  }  return sb.length() > 0 ? sb.deleteCharAt(sb.length() - 1).toString() : "";}  }
class C{  private Hex(){}  }
class C{  public DocumentNGramDistroGraph allNotIn(DocumentNGramDistroGraph dgOtherGraph){  EdgeCachedLocator eclLocator=new EdgeCachedLocator(100);  DocumentNGramDistroGraph dgClone=(DocumentNGramDistroGraph)clone();  for (int iCurLvl=MinSize; iCurLvl <= MaxSize; iCurLvl++) {    UniqueVertexGraph gCloneLevel=dgClone.getGraphLevelByNGramSize(iCurLvl);    UniqueVertexGraph gOtherGraphLevel=dgOtherGraph.getGraphLevelByNGramSize(iCurLvl);    if (gOtherGraphLevel == null)     continue;    java.util.Iterator iIter=gCloneLevel.getEdgeSet().iterator();    while (iIter.hasNext()) {      WeightedEdge weCurItem=(WeightedEdge)iIter.next();      Edge eEdge=eclLocator.locateDirectedEdgeInGraph(gOtherGraphLevel,weCurItem.getVertexA(),weCurItem.getVertexB());      if (eEdge != null)       try {        gCloneLevel.removeEdge(weCurItem);        dgClone.getEdgesToDistros().remove(weCurItem);        iIter=gCloneLevel.getEdgeSet().iterator();      } catch (      Exception ex) {        ex.printStackTrace();      }    }  }  return dgClone;}  }
class C{  public static void initTxMgr(){  txMgr=new TransactionMgr();}  }
class C{  public static GenericEntity createGenericEntity(GenericEntity value){  if (value == null) {    throw new IllegalArgumentException("Cannot create a GenericEntity with a null value parameter");  }  GenericEntity newEntity=new GenericEntity();  newEntity.init(value);  return newEntity;}  }
class C{  private static boolean intersectsLatEdge(S2Point a,S2Point b,double lat,S1Interval lng){  S2Point z=S2Point.normalize(S2.robustCrossProd(a,b));  if (z.z < 0) {    z=S2Point.neg(z);  }  S2Point y=S2Point.normalize(S2.robustCrossProd(z,new S2Point(0,0,1)));  S2Point x=S2Point.crossProd(y,z);  double sinLat=Math.sin(lat);  if (Math.abs(sinLat) >= x.z) {    return false;  }  double cosTheta=sinLat / x.z;  double sinTheta=Math.sqrt(1 - cosTheta * cosTheta);  double theta=Math.atan2(sinTheta,cosTheta);  S1Interval abTheta=S1Interval.fromPointPair(Math.atan2(a.dotProd(y),a.dotProd(x)),Math.atan2(b.dotProd(y),b.dotProd(x)));  if (abTheta.contains(theta)) {    S2Point isect=S2Point.add(S2Point.mul(x,cosTheta),S2Point.mul(y,sinTheta));    if (lng.contains(Math.atan2(isect.y,isect.x))) {      return true;    }  }  if (abTheta.contains(-theta)) {    S2Point intersection=S2Point.sub(S2Point.mul(x,cosTheta),S2Point.mul(y,sinTheta));    if (lng.contains(Math.atan2(intersection.y,intersection.x))) {      return true;    }  }  return false;}  }
class C{  @RequestMapping(value="/races",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Race> createRace(@RequestBody Race race) throws URISyntaxException {  log.debug("REST request to save Race : {}",race);  if (race.getRaceId() != null) {    return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("race","idexists","A new race cannot already have an ID")).body(null);  }  Race result=raceRepository.save(race);  return ResponseEntity.created(new URI("/api/races/" + result.getRaceId())).headers(HeaderUtil.createEntityCreationAlert("race",result.getRaceId().toString())).body(result);}  }
class C{  public GroupsGetMembersQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public static boolean expressionHasErrors(String expression){  final JEP parser=getJep();  parser.parseExpression(expression);  return parser.hasError();}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("hide attribute=");  Set<String> attributes=new HashSet<>();  while (!np.peekMatchIgnoreCase(";")) {    String attribute=np.getWordRespectCase();    attributes.add(attribute);  }  np.matchIgnoreCase(";");  if (attributes.size() > 0) {    final SamplesViewer viewer=((SamplesViewer)getViewer());    viewer.getSamplesTable().hideColumns(attributes.toArray(new String[attributes.size()]));  }}  }
class C{  public ProductPlan(Plan p1,Plan p2){  this.p1=p1;  this.p2=p2;  schema.addAll(p1.schema());  schema.addAll(p2.schema());  hist=productHistogram(p1.histogram(),p2.histogram());}  }
class C{  public int order(){  return coeffs.length;}  }
class C{  @Override public void execute(ActionInvocation invocation) throws Exception {  JFreeChart stackChart=(JFreeChart)invocation.getStack().findValue("chart");  chart=stackChart != null ? stackChart : chart;  Integer stackHeight=(Integer)invocation.getStack().findValue("height");  height=stackHeight != null && stackHeight > 0 ? stackHeight : height != null ? height : DEFAULT_HEIGHT;  Integer stackWidth=(Integer)invocation.getStack().findValue("width");  width=stackWidth != null && stackWidth > 0 ? stackWidth : width != null ? width : DEFAULT_WIDTH;  String stackFilename=(String)invocation.getStack().findValue("filename");  filename=StringUtils.defaultIfEmpty(stackFilename,DEFAULT_FILENAME);  if (chart == null) {    log.warn("No chart found");    return;  }  HttpServletResponse response=ServletActionContext.getResponse();  ContextUtils.configureResponse(response,ContextUtils.CONTENT_TYPE_PNG,true,filename,false);  OutputStream os=response.getOutputStream();  ChartUtilities.writeChartAsPNG(os,chart,width,height);  os.flush();}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  String input=JOptionPane.showInputDialog(getViewer().getFrame(),"Enter label of node to scroll to","None");  if (input != null) {    input=input.trim();    if (input.length() > 0)     execute("scrollTo node='" + input + "';");  }}  }
class C{  private void saveInstantUploadPathOnPreferences(){  SharedPreferences appPrefs=PreferenceManager.getDefaultSharedPreferences(getApplicationContext());  SharedPreferences.Editor editor=appPrefs.edit();  editor.putString("instant_upload_path",mUploadPath);  editor.commit();}  }
class C{  public Latin1Reader(InputStream inputStream,byte[] buffer){  fInputStream=inputStream;  fBuffer=buffer;}  }
class C{  public RateLimitFilter() throws SystemConfigException {  rateLimiter=new RateLimiter();}  }
class C{  public MainTest(String testName){  super(testName);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_REMOVE_ITEM_OPTION_NOT_ENOUGH_GOLD(String value0){  return new SM_SYSTEM_MESSAGE(1300472,value0);}  }
class C{  public XMLStreamException(String msg){  super(msg);}  }
class C{  public static byte[] objectToByteBuffer(Object obj) throws Exception {  byte[] result=null;synchronized (outStream) {    outStream.reset();    ObjectOutputStream out=new ObjectOutputStream(outStream);    out.writeObject(obj);    out.flush();    result=outStream.toByteArray();    out.close();  }  return result;}  }
class C{  protected void writeLSD() throws IOException {  writeShort(width);  writeShort(height);  out.write((0x80 | 0x70 | 0x00| palSize));  out.write(0);  out.write(0);}  }
class C{  public static void launch(Context context,String startLabelId,int activeSensorIndex,boolean fromRecord,boolean createTask,Bundle options){  final Intent intent=new Intent(context,RunReviewActivity.class);  intent.putExtra(RunReviewFragment.ARG_START_LABEL_ID,startLabelId);  intent.putExtra(RunReviewFragment.ARG_SENSOR_INDEX,activeSensorIndex);  intent.putExtra(EXTRA_FROM_RECORD,fromRecord);  intent.putExtra(EXTRA_CREATE_TASK,createTask);  context.startActivity(intent,options);}  }
class C{  public static byte[] decode(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decode(bytes,0,bytes.length);}  }
class C{  private void checkHttpParameterConditions(Method method,Field field,Set<MessageType> visited){  TypeRef type=field.getType();  WellKnownType wkt=type.getWellKnownType();  if (type.isMap()) {    error(method,"map field '%s' referred to by message '%s' cannot be mapped as an HTTP parameter.",field.getFullName(),getInputMessageName(method));    return;  }  if (type.isMessage()) {    if (wkt.allowedAsHttpParameter()) {      return;    }    if (!visited.add(type.getMessageType())) {      error(method,"cyclic message field '%s' referred to by message '%s' cannot be mapped " + "as an HTTP parameter.",field.getFullName(),getInputMessageName(method));      return;    }    if (type.isRepeated()) {      error(method,"repeated message field '%s' referred to by message '%s' cannot be mapped " + "as an HTTP parameter.",field.getFullName(),getInputMessageName(method));    }    checkHttpParameterConditions(method,type.getMessageType().getFields(),visited);    visited.remove(type.getMessageType());  }}  }
class C{  public static <S extends RealFieldElement<S>>FieldODEStateAndDerivative<S> taylor(final FieldEquationsMapper<S> equationsMapper,final FieldODEStateAndDerivative<S> reference,final S time,final S stepSize,final S[] scaled,final Array2DRowFieldMatrix<S> nordsieck){  final S x=time.subtract(reference.getTime());  final S normalizedAbscissa=x.divide(stepSize);  S[] stateVariation=MathArrays.buildArray(time.getField(),scaled.length);  Arrays.fill(stateVariation,time.getField().getZero());  S[] estimatedDerivatives=MathArrays.buildArray(time.getField(),scaled.length);  Arrays.fill(estimatedDerivatives,time.getField().getZero());  final S[][] nData=nordsieck.getDataRef();  for (int i=nData.length - 1; i >= 0; --i) {    final int order=i + 2;    final S[] nDataI=nData[i];    final S power=normalizedAbscissa.pow(order);    for (int j=0; j < nDataI.length; ++j) {      final S d=nDataI[j].multiply(power);      stateVariation[j]=stateVariation[j].add(d);      estimatedDerivatives[j]=estimatedDerivatives[j].add(d.multiply(order));    }  }  S[] estimatedState=reference.getCompleteState();  for (int j=0; j < stateVariation.length; ++j) {    stateVariation[j]=stateVariation[j].add(scaled[j].multiply(normalizedAbscissa));    estimatedState[j]=estimatedState[j].add(stateVariation[j]);    estimatedDerivatives[j]=estimatedDerivatives[j].add(scaled[j].multiply(normalizedAbscissa)).divide(x);  }  return equationsMapper.mapStateAndDerivative(time,estimatedState,estimatedDerivatives);}  }
class C{  protected boolean isAffectAllLines(Object... conditions){  if (conditions != null && conditions.length == 0) {    return true;  }  return false;}  }
class C{  public void addTokenRangeToCurrentBatchForCluster(String cluster,String placement,Collection<ScanRange> ranges){  PlanBatch batch=_clusterTails.get(cluster);  if (batch == null) {    batch=new PlanBatch();    _clusterHeads.put(cluster,batch);    _clusterTails.put(cluster,batch);  }  batch.addPlanItem(new PlanItem(placement,ranges));}  }
class C{  public Tailer(File file,TailerListener listener,long delayMillis,boolean end){  this(file,listener,delayMillis,end,DEFAULT_BUFSIZE);}  }
class C{  public SoftReferenceGrammarPool(){  fGrammars=new Entry[TABLE_SIZE];  fPoolIsLocked=false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SubTypeBoostResist_A_TO_B(String skilltarget,String value0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201031,skilltarget,value0,skillcaster,skillname);}  }
class C{  public static <U>AtomicIntegerFieldUpdater<U> newUpdater(Class<U> tclass,String fieldName){  if (UnsafeHolder.isAvailable()) {    return new AtomicIntegerFieldUpdaterImpl<U>(tclass,fieldName);  }  return AtomicIntegerFieldUpdater.newUpdater(tclass,fieldName);}  }
class C{  public void zoomToFit(int availableWidth,int availableHeight,boolean allowZoomIn,int horizontalMargin,int verticalMargin){  int sceneWidth=myImage.getWidth();  int sceneHeight=myImage.getHeight();  int shadowSize=hasDropShadow() ? myUseLargeShadows ? SHADOW_SIZE : SMALL_SHADOW_SIZE : 0;  availableWidth-=shadowSize;  availableHeight-=shadowSize;  if (sceneWidth > 0 && sceneHeight > 0) {    int hDelta=availableWidth - sceneWidth;    int xMargin=0;    if (hDelta > 2 * horizontalMargin) {      xMargin=horizontalMargin;    } else     if (hDelta > 0) {      xMargin=hDelta / 2;    }    int vDelta=availableHeight - sceneHeight;    int yMargin=0;    if (vDelta > 2 * verticalMargin) {      yMargin=verticalMargin;    } else     if (vDelta > 0) {      yMargin=vDelta / 2;    }    double hScale=(availableWidth - 2 * xMargin) / (double)sceneWidth;    double vScale=(availableHeight - 2 * yMargin) / (double)sceneHeight;    double scale=Math.min(hScale,vScale);    if (!allowZoomIn) {      scale=Math.min(1.0,scale);    }    setScale(scale);  }}  }
class C{  @Override public void remove(){  throw new UnsupportedOperationException();}  }
class C{  public static boolean putLong(Context context,String key,long value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putLong(key,value);  return editor.commit();}  }
class C{  public void notifyListeners(double oldValue,double newValue){  for (  SpinnerNotifyInterface observer : observers) {    observer.notify(oldValue,newValue);  }}  }
class C{  public static NativePage createNativePageForURL(String url,NativePage candidatePage,Tab tab,TabModelSelector tabModelSelector,Activity activity){  return createNativePageForURL(url,candidatePage,tab,tabModelSelector,activity,tab.isIncognito());}  }
class C{  public synchronized boolean isCompleted(){  return completed;}  }
class C{  public int lowerEndpoint(){  return lowerBound.endpoint();}  }
class C{  public void populateComplete(GeoServerConnection connection){  updateButtonState();}  }
class C{  @Override public int length(){  return Histogram.length() + Graph.length();}  }
class C{  public AudioInputStream convertToAudioInputStream(AudioFormat audioFormat) throws IOException {  if (ram) {    assert os instanceof ByteArrayOutputStream;    assert f == null;    byte[] audioData=((ByteArrayOutputStream)os).toByteArray();    return new AudioInputStream(new ByteArrayInputStream(audioData),audioFormat,audioData.length / audioFormat.getFrameSize());  } else {    assert os instanceof FileOutputStream;    assert f != null;    os.close();    long byteLength=f.length();    return new AudioInputStream(new FileInputStream(f),audioFormat,byteLength / audioFormat.getFrameSize());  }}  }
class C{  public Edge addEdge(Vertex vHead,Vertex vTail) throws Exception {  WeightedEdge e;  if ((e=(WeightedEdge)utils.locateDirectedEdgeInGraph(this,vHead,vTail)) == null) {    e=(WeightedEdge)super.addEdge(vHead,vTail);    e.setWeight(1.0);  } else {    e.setWeight(e.getWeight() + 1.0);  }  return e;}  }
class C{  private static int calculateNumberOfRows(int m,int k,int c){  int r=((m + 1 + k) / c) + 1;  if (c * r >= (m + 1 + k+ c)) {    r--;  }  return r;}  }
class C{  public int backend(){  String s=soot.PhaseOptions.getString(options,"backend");  if (s.equalsIgnoreCase("auto"))   return backend_auto;  if (s.equalsIgnoreCase("buddy"))   return backend_buddy;  if (s.equalsIgnoreCase("cudd"))   return backend_cudd;  if (s.equalsIgnoreCase("sable"))   return backend_sable;  if (s.equalsIgnoreCase("javabdd"))   return backend_javabdd;  if (s.equalsIgnoreCase("none"))   return backend_none;  throw new RuntimeException("Invalid value " + s + " of phase option backend");}  }
class C{  public Matrix3f invertLocal(){  float det=determinant();  if (FastMath.abs(det) <= FastMath.FLT_EPSILON) {    return zero();  }  float f00=m11 * m22 - m12 * m21;  float f01=m02 * m21 - m01 * m22;  float f02=m01 * m12 - m02 * m11;  float f10=m12 * m20 - m10 * m22;  float f11=m00 * m22 - m02 * m20;  float f12=m02 * m10 - m00 * m12;  float f20=m10 * m21 - m11 * m20;  float f21=m01 * m20 - m00 * m21;  float f22=m00 * m11 - m01 * m10;  m00=f00;  m01=f01;  m02=f02;  m10=f10;  m11=f11;  m12=f12;  m20=f20;  m21=f21;  m22=f22;  multLocal(1f / det);  return this;}  }
class C{  private static double log(final double x,final double[] hiPrec){  if (x == 0) {    return Double.NEGATIVE_INFINITY;  }  long bits=Double.doubleToRawLongBits(x);  if (((bits & 0x8000000000000000L) != 0 || Double.isNaN(x)) && x != 0.0) {    if (hiPrec != null) {      hiPrec[0]=Double.NaN;    }    return Double.NaN;  }  if (x == Double.POSITIVE_INFINITY) {    if (hiPrec != null) {      hiPrec[0]=Double.POSITIVE_INFINITY;    }    return Double.POSITIVE_INFINITY;  }  int exp=(int)(bits >> 52) - 1023;  if ((bits & 0x7ff0000000000000L) == 0) {    if (x == 0) {      if (hiPrec != null) {        hiPrec[0]=Double.NEGATIVE_INFINITY;      }      return Double.NEGATIVE_INFINITY;    }    bits<<=1;    while ((bits & 0x0010000000000000L) == 0) {      --exp;      bits<<=1;    }  }  if ((exp == -1 || exp == 0) && x < 1.01 && x > 0.99 && hiPrec == null) {    double xa=x - 1.0;    double xb=xa - x + 1.0;    double tmp=xa * HEX_40000000;    double aa=xa + tmp - tmp;    double ab=xa - aa;    xa=aa;    xb=ab;    final double[] lnCoef_last=LN_QUICK_COEF[LN_QUICK_COEF.length - 1];    double ya=lnCoef_last[0];    double yb=lnCoef_last[1];    for (int i=LN_QUICK_COEF.length - 2; i >= 0; i--) {      aa=ya * xa;      ab=ya * xb + yb * xa + yb * xb;      tmp=aa * HEX_40000000;      ya=aa + tmp - tmp;      yb=aa - ya + ab;      final double[] lnCoef_i=LN_QUICK_COEF[i];      aa=ya + lnCoef_i[0];      ab=yb + lnCoef_i[1];      tmp=aa * HEX_40000000;      ya=aa + tmp - tmp;      yb=aa - ya + ab;    }    aa=ya * xa;    ab=ya * xb + yb * xa + yb * xb;    tmp=aa * HEX_40000000;    ya=aa + tmp - tmp;    yb=aa - ya + ab;    return ya + yb;  }  final double[] lnm=lnMant.LN_MANT[(int)((bits & 0x000ffc0000000000L) >> 42)];  final double epsilon=(bits & 0x3ffffffffffL) / (TWO_POWER_52 + (bits & 0x000ffc0000000000L));  double lnza=0.0;  double lnzb=0.0;  if (hiPrec != null) {    double tmp=epsilon * HEX_40000000;    double aa=epsilon + tmp - tmp;    double ab=epsilon - aa;    double xa=aa;    double xb=ab;    final double numer=bits & 0x3ffffffffffL;    final double denom=TWO_POWER_52 + (bits & 0x000ffc0000000000L);    aa=numer - xa * denom - xb * denom;    xb+=aa / denom;    final double[] lnCoef_last=LN_HI_PREC_COEF[LN_HI_PREC_COEF.length - 1];    double ya=lnCoef_last[0];    double yb=lnCoef_last[1];    for (int i=LN_HI_PREC_COEF.length - 2; i >= 0; i--) {      aa=ya * xa;      ab=ya * xb + yb * xa + yb * xb;      tmp=aa * HEX_40000000;      ya=aa + tmp - tmp;      yb=aa - ya + ab;      final double[] lnCoef_i=LN_HI_PREC_COEF[i];      aa=ya + lnCoef_i[0];      ab=yb + lnCoef_i[1];      tmp=aa * HEX_40000000;      ya=aa + tmp - tmp;      yb=aa - ya + ab;    }    aa=ya * xa;    ab=ya * xb + yb * xa + yb * xb;    lnza=aa + ab;    lnzb=-(lnza - aa - ab);  } else {    lnza=-0.16624882440418567;    lnza=lnza * epsilon + 0.19999954120254515;    lnza=lnza * epsilon + -0.2499999997677497;    lnza=lnza * epsilon + 0.3333333333332802;    lnza=lnza * epsilon + -0.5;    lnza=lnza * epsilon + 1.0;    lnza*=epsilon;  }  double a=LN_2_A * exp;  double b=0.0;  double c=a + lnm[0];  double d=-(c - a - lnm[0]);  a=c;  b+=d;  c=a + lnza;  d=-(c - a - lnza);  a=c;  b+=d;  c=a + LN_2_B * exp;  d=-(c - a - LN_2_B * exp);  a=c;  b+=d;  c=a + lnm[1];  d=-(c - a - lnm[1]);  a=c;  b+=d;  c=a + lnzb;  d=-(c - a - lnzb);  a=c;  b+=d;  if (hiPrec != null) {    hiPrec[0]=a;    hiPrec[1]=b;  }  return a + b;}  }
class C{  protected StmtBody(SootMethod m){  super(m);}  }
class C{  public static void pickImage(Activity activity){  String chooserTitle=activity.getString(R.string.pick_image_intent_text);  pickImage(activity,chooserTitle);}  }
class C{  public static List<String> prepContentPurposeList(Map<String,Object> context){  List<String> contentPurposeList=UtilGenerics.checkList(context.get("contentPurposeList"));  String contentPurposeString=(String)context.get("contentPurposeString");  if (Debug.infoOn()) {    Debug.logInfo("in prepContentPurposeList, contentPurposeString(0):" + contentPurposeString,"");  }  if (UtilValidate.isNotEmpty(contentPurposeString)) {    List<String> purposesFromString=StringUtil.split(contentPurposeString,"|");    if (UtilValidate.isEmpty(contentPurposeList)) {      contentPurposeList=FastList.newInstance();    }    contentPurposeList.addAll(purposesFromString);  }  if (UtilValidate.isEmpty(contentPurposeList)) {    contentPurposeList=FastList.newInstance();  }  if (Debug.infoOn()) {    Debug.logInfo("in prepContentPurposeList, contentPurposeList(0):" + contentPurposeList,"");  }  return contentPurposeList;}  }
class C{  protected void resetOptions(){  m_InfoGains=null;  m_missing_merge=true;  m_Binarize=false;}  }
class C{  public static void w(String tag,String s){  if (LOG.WARN >= LOGLEVEL)   Log.w(tag,s);}  }
class C{  @Override public void redoAction(UndoInterface undoRedoObject){  if ((checkBox != null) && (undoRedoObject != null)) {    if (undoRedoObject.getNewValue() instanceof Boolean) {      Boolean newValue=(Boolean)undoRedoObject.getNewValue();      checkBox.setSelected(newValue.booleanValue());    }  }}  }
class C{  public static <T>String join(Collection<T> collection,String separator,Function<T,String> stringMapper){  if (collection == null) {    return null;  }  List<String> list=collection.stream().map(stringMapper).collect(Collectors.toList());  return StringUtils.join(list,separator);}  }
class C{  protected boolean handleStartElement(QName element,XMLAttributes attributes,Augmentations augs) throws XNIException {  if (!fSeenRootElement) {    fPerformValidation=validate();    fSeenRootElement=true;    fValidationManager.setEntityState(fDTDGrammar);    fValidationManager.setGrammarFound(fSeenDoctypeDecl);    rootElementSpecified(element);  }  if (fDTDGrammar == null) {    if (!fPerformValidation) {      fCurrentElementIndex=-1;      fCurrentContentSpecType=-1;      fInElementContent=false;    }    if (fPerformValidation) {      fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"MSG_GRAMMAR_NOT_FOUND",new Object[]{element.rawname},XMLErrorReporter.SEVERITY_ERROR);    }    if (fDocumentSource != null) {      fDocumentSource.setDocumentHandler(fDocumentHandler);      if (fDocumentHandler != null)       fDocumentHandler.setDocumentSource(fDocumentSource);      return true;    }  } else {    fCurrentElementIndex=fDTDGrammar.getElementDeclIndex(element);    fCurrentContentSpecType=fDTDGrammar.getContentSpecType(fCurrentElementIndex);    if (fCurrentContentSpecType == -1 && fPerformValidation) {      fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"MSG_ELEMENT_NOT_DECLARED",new Object[]{element.rawname},XMLErrorReporter.SEVERITY_ERROR);    }    addDTDDefaultAttrsAndValidate(element,fCurrentElementIndex,attributes);  }  fInElementContent=fCurrentContentSpecType == XMLElementDecl.TYPE_CHILDREN;  fElementDepth++;  if (fPerformValidation) {    if (fElementChildrenOffsetStack.length <= fElementDepth) {      int newarray[]=new int[fElementChildrenOffsetStack.length * 2];      System.arraycopy(fElementChildrenOffsetStack,0,newarray,0,fElementChildrenOffsetStack.length);      fElementChildrenOffsetStack=newarray;    }    fElementChildrenOffsetStack[fElementDepth]=fElementChildrenLength;    if (fElementChildren.length <= fElementChildrenLength) {      QName[] newarray=new QName[fElementChildrenLength * 2];      System.arraycopy(fElementChildren,0,newarray,0,fElementChildren.length);      fElementChildren=newarray;    }    QName qname=fElementChildren[fElementChildrenLength];    if (qname == null) {      for (int i=fElementChildrenLength; i < fElementChildren.length; i++) {        fElementChildren[i]=new QName();      }      qname=fElementChildren[fElementChildrenLength];    }    qname.setValues(element);    fElementChildrenLength++;  }  fCurrentElement.setValues(element);  ensureStackCapacity(fElementDepth);  fElementQNamePartsStack[fElementDepth].setValues(fCurrentElement);  fElementIndexStack[fElementDepth]=fCurrentElementIndex;  fContentSpecTypeStack[fElementDepth]=fCurrentContentSpecType;  startNamespaceScope(element,attributes,augs);  return false;}  }
class C{  public static EnumType create(ProtoContainerElement parent,EnumDescriptorProto proto,String path){  return new EnumType(parent,proto,path);}  }
class C{  public static boolean calculatePhysicalDodgeRate(Creature attacker,Creature attacked,int accMod){  if (attacker.getObserveController().checkAttackerStatus(AttackStatus.DODGE)) {    return true;  }  if (attacked.getObserveController().checkAttackStatus(AttackStatus.DODGE)) {    return true;  }  float accuracy=attacker.getGameStats().getMainHandPAccuracy().getCurrent() + accMod;  float dodge=0;  if (attacked instanceof Player) {    dodge=attacked.getGameStats().getEvasion().getBonus() + getMovementModifier(attacked,StatEnum.EVASION,attacked.getGameStats().getEvasion().getBase()) + attacked.getGameStats().getStat(StatEnum.PVP_DODGE,0).getCurrent();  } else {    dodge=attacked.getGameStats().getEvasion().getBonus() + getMovementModifier(attacked,StatEnum.EVASION,attacked.getGameStats().getEvasion().getBase());  }  float dodgeRate=dodge - accuracy;  if (attacked instanceof Npc) {    int levelDiff=attacked.getLevel() - attacker.getLevel();    dodgeRate*=1 + getNpcLevelDiffMod(levelDiff,0);    if (((Npc)attacked).hasStatic()) {      return false;    }  }  return calculatePhysicalEvasion(dodgeRate,300);}  }
class C{  public Well44497b(int seed){  super(K,seed);}  }
class C{  public Memory(String name,int amount){  this.name=name;  this.amount=amount;}  }
class C{  public FloatColumn neg(){  FloatColumn newColumn=FloatColumn.create(name() + "[neg]",size());  for (  float value : this) {    newColumn.add(value * -1);  }  return newColumn;}  }
class C{  public void beginClearText(int hashAlgorithm) throws IOException {  String hash;switch (hashAlgorithm) {case HashAlgorithmTags.SHA1:    hash="SHA1";  break;case HashAlgorithmTags.SHA256:hash="SHA256";break;case HashAlgorithmTags.SHA384:hash="SHA384";break;case HashAlgorithmTags.SHA512:hash="SHA512";break;case HashAlgorithmTags.MD2:hash="MD2";break;case HashAlgorithmTags.MD5:hash="MD5";break;case HashAlgorithmTags.RIPEMD160:hash="RIPEMD160";break;default :throw new IOException("unknown hash algorithm tag in beginClearText: " + hashAlgorithm);}String armorHdr="-----BEGIN PGP SIGNED MESSAGE-----" + nl;String hdrs="Hash: " + hash + nl+ nl;for (int i=0; i != armorHdr.length(); i++) {out.write(armorHdr.charAt(i));}for (int i=0; i != hdrs.length(); i++) {out.write(hdrs.charAt(i));}clearText=true;newLine=true;lastb=0;}  }
class C{  private String convertTimeStampToString(String factTimeStamp){  SimpleDateFormat parser=new SimpleDateFormat(CarbonCommonConstants.CARBON_TIMESTAMP);  Date dateToStr=null;  try {    dateToStr=parser.parse(factTimeStamp);    return Long.toString(dateToStr.getTime());  } catch (  ParseException e) {    LOGGER.error("Cannot convert" + factTimeStamp + " to Time/Long type value"+ e.getMessage());    return null;  }}  }
class C{  @deprecated public char current(){  if ((this.pos >= this.begin) && (this.pos < this.end)) {    return this.text.charAt(this.pos);  }  return 65535;}  }
class C{  public PagesGetQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  protected DfpDec(final DfpField factory,double x){  super(factory,x);  round(0);}  }
class C{  public static final Edge locateDirectedEdgeInGraph(UniqueVertexGraph gGraph,Vertex vHead,Vertex vTail){  try {    vHead=locateVertexInGraph(gGraph,vHead);    if (vHead == null)     return null;    vTail=locateVertexInGraph(gGraph,vTail);    if (vTail == null)     return null;    List lEdges=gGraph.getEdges(vHead);    java.util.Iterator iIter=lEdges.iterator();    String sTailLbl=vTail.getLabel();    while (iIter.hasNext()) {      Edge eCurrent=(Edge)iIter.next();      if (vHead != vTail) {        if (eCurrent.getVertexB().getLabel().compareTo(sTailLbl) == 0)         return eCurrent;      } else {        if ((eCurrent.getVertexA().getLabel().equals(sTailLbl)) && (eCurrent.getVertexB().getLabel().equals(sTailLbl)))         return eCurrent;      }    }    return null;  } catch (  NullPointerException e) {    return null;  }}  }
class C{  private ServerConstants(){}  }
class C{  public boolean removeTuple(Tuple t){  if (t instanceof Node) {    return removeNode((Node)t);  } else   if (t instanceof Edge) {    return removeEdge((Edge)t);  } else {    throw new IllegalArgumentException("Input tuple must be part of this graph");  }}  }
class C{  public String reflection_log(){  return soot.PhaseOptions.getString(options,"reflection-log");}  }
class C{  public static List<X509Certificate> decodeCertificates(byte[] certificateBytes) throws UaException {  Preconditions.checkNotNull(certificateBytes,"certificateBytes cannot be null");  CertificateFactory factory;  try {    factory=CertificateFactory.getInstance("X.509");  } catch (  CertificateException e) {    throw new UaException(StatusCodes.Bad_InternalError,e);  }  try {    Collection<? extends Certificate> certificates=factory.generateCertificates(new ByteArrayInputStream(certificateBytes));    return certificates.stream().map(null).collect(Collectors.toList());  } catch (  CertificateException e) {    throw new UaException(StatusCodes.Bad_CertificateInvalid,e);  }}  }
class C{  public static void addGlue(JComponent b,boolean horiz){  b.add(horiz ? Box.createHorizontalGlue() : Box.createVerticalGlue());}  }
class C{  static String encodeHighLevel(String msg,Compaction compaction,Charset encoding) throws WriterException {  StringBuilder sb=new StringBuilder(msg.length());  if (encoding == null) {    encoding=DEFAULT_ENCODING;  } else   if (!DEFAULT_ENCODING.equals(encoding)) {    CharacterSetECI eci=CharacterSetECI.getCharacterSetECIByName(encoding.name());    if (eci != null) {      encodingECI(eci.getValue(),sb);    }  }  int len=msg.length();  int p=0;  int textSubMode=SUBMODE_ALPHA;  if (compaction == Compaction.TEXT) {    encodeText(msg,p,len,sb,textSubMode);  } else   if (compaction == Compaction.BYTE) {    byte[] bytes=msg.getBytes(encoding);    encodeBinary(bytes,p,bytes.length,BYTE_COMPACTION,sb);  } else   if (compaction == Compaction.NUMERIC) {    sb.append((char)LATCH_TO_NUMERIC);    encodeNumeric(msg,p,len,sb);  } else {    int encodingMode=TEXT_COMPACTION;    while (p < len) {      int n=determineConsecutiveDigitCount(msg,p);      if (n >= 13) {        sb.append((char)LATCH_TO_NUMERIC);        encodingMode=NUMERIC_COMPACTION;        textSubMode=SUBMODE_ALPHA;        encodeNumeric(msg,p,n,sb);        p+=n;      } else {        int t=determineConsecutiveTextCount(msg,p);        if (t >= 5 || n == len) {          if (encodingMode != TEXT_COMPACTION) {            sb.append((char)LATCH_TO_TEXT);            encodingMode=TEXT_COMPACTION;            textSubMode=SUBMODE_ALPHA;          }          textSubMode=encodeText(msg,p,t,sb,textSubMode);          p+=t;        } else {          int b=determineConsecutiveBinaryCount(msg,p,encoding);          if (b == 0) {            b=1;          }          byte[] bytes=msg.substring(p,p + b).getBytes(encoding);          if (bytes.length == 1 && encodingMode == TEXT_COMPACTION) {            encodeBinary(bytes,0,1,TEXT_COMPACTION,sb);          } else {            encodeBinary(bytes,0,bytes.length,encodingMode,sb);            encodingMode=BYTE_COMPACTION;            textSubMode=SUBMODE_ALPHA;          }          p+=b;        }      }    }  }  return sb.toString();}  }
class C{  public SwapReadOnlyIterator(long inSwapStartIndex){  _memoryIteratorExhausted=true;  _memoryIterator=null;  try {    _externalIterator=_externalStorage.readOnlyIterator(inSwapStartIndex);  } catch (  StorageException e) {    throw new SwapStorageException(e);  }}  }
class C{  public boolean hasSuperClassAccess(){  return getSuperClassAccessOpt().getNumChild() != 0;}  }
class C{  public static <T>OperatorSemaphore<T> semaphore(Observable<Boolean> go){  return new OperatorSemaphore<>(go);}  }
class C{  public void clear(){  if (mSize != 0) {    freeArrays(mHashes,mArray,mSize);    mHashes=ContainerHelpers.EMPTY_INTS;    mArray=ContainerHelpers.EMPTY_OBJECTS;    mSize=0;  }}  }
class C{  private void createVirtualDisplay(){  Point size=new Point();  display.getSize(size);  width=size.x;  height=size.y;  imageReader=ImageReader.newInstance(width,height,PixelFormat.RGBA_8888,2);  virtualDisplay=mediaProjection.createVirtualDisplay(SCREENCAP_NAME,width,height,density,VIRTUAL_DISPLAY_FLAGS,imageReader.getSurface(),null,handler);  handler.postDelayed(getRunnableThatTakesScreenshot(),2);}  }
class C{  public Set<Type> possibleTypes(){  return Collections.emptySet();}  }
class C{  public IsSubinterval(SimplifiedIntervalList supplyList){  super(supplyList,IS_SUBINTERVAL,false);}  }
class C{  public static void write(String data,Writer output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  @Nullable public static NlComponent findImmediateComponent(@NotNull ScreenView view,@SwingCoordinate int swingX,@SwingCoordinate int swingY){  if (view.getModel().getComponents().isEmpty()) {    return null;  }  SelectionModel selectionModel=view.getSelectionModel();  NlComponent start=null;  if (selectionModel.isEmpty()) {    start=view.getModel().getComponents().get(0).getRoot();  } else {    start=selectionModel.getPrimary();  }  NlComponent found=start.findImmediateLeafAt(getAndroidX(view,swingX),getAndroidY(view,swingY));  if (found == null) {    found=findComponent(view,swingX,swingY);  }  return found;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_HealCastorOnTargetDead_INTERVAL_ME_TO_B(String skilltarget,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200527,skilltarget,num0,skillname);}  }
class C{  private static boolean isTextObscured(JComponent c,String s){  Graphics g=c.getGraphics();  FontMetrics fm=g.getFontMetrics(c.getFont());  int sw=fm.stringWidth(s);  return (sw > c.getWidth());}  }
class C{  public Window(Collection<String> words,int begin,int end){  this(words,5,begin,end);}  }
class C{  public S2Point toPointRaw(){  MutableInteger i=new MutableInteger(0);  MutableInteger j=new MutableInteger(0);  int face=toFaceIJOrientation(i,j,null);  int delta=isLeaf() ? 1 : (((i.intValue() ^ (((int)id) >>> 2)) & 1) != 0) ? 2 : 0;  int si=(i.intValue() << 1) + delta - MAX_SIZE;  int ti=(j.intValue() << 1) + delta - MAX_SIZE;  return faceSiTiToXYZ(face,si,ti);}  }
class C{  public static void createWorkerDialog(final Task<?> readAndProcess){  final Alert dialog=new Alert(AlertType.INFORMATION);  dialog.setTitle(readAndProcess.getTitle());  dialog.setHeaderText(null);  final ButtonType bgButtonType=new ButtonType("Run in background",ButtonData.APPLY);  dialog.getButtonTypes().setAll(ButtonType.CANCEL,bgButtonType);  final Label progressMessage=new Label();  progressMessage.textProperty().bind(readAndProcess.messageProperty());  dialog.setResultConverter(null);  final WorkerProgressPane content=new WorkerProgressPane(dialog);  content.setMaxWidth(Double.MAX_VALUE);  VBox vbox=new VBox(10,progressMessage,content);  vbox.setMaxWidth(Double.MAX_VALUE);  vbox.setPrefSize(400,80);  dialog.getDialogPane().setContent(vbox);  content.setWorker(readAndProcess);}  }
class C{  public long id(){  return id;}  }
class C{  public org.datavec.api.berkeley.PriorityQueue<E> asMinPriorityQueue(){  org.datavec.api.berkeley.PriorityQueue<E> pq=new org.datavec.api.berkeley.PriorityQueue<E>(entries.size());  for (  Entry<E,Double> entry : entries.entrySet()) {    pq.add(entry.getKey(),-entry.getValue());  }  return pq;}  }
class C{  public IElementType advance() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  CharSequence zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    int zzAttributes=zzAttrL[zzState];    if ((zzAttributes & 1) == 1) {      zzAction=zzState;    }    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL) {          zzInput=Character.codePointAt(zzBufferL,zzCurrentPosL);          zzCurrentPosL+=Character.charCount(zzInput);        } else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=Character.codePointAt(zzBufferL,zzCurrentPosL);            zzCurrentPosL+=Character.charCount(zzInput);          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {      zzAtEOF=true;      return null;    } else {switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 1:{          return TokenType.BAD_CHARACTER;        }case 11:      break;case 2:{      return TokenType.WHITE_SPACE;    }case 12:  break;case 3:{  return ProguardTypes.CRLF;}case 13:break;case 4:{return ProguardTypes.LINE_CMT;}case 14:break;case 5:{yybegin(YYINITIAL);return ProguardTypes.CLOSE_BRACE;}case 15:break;case 6:{return ProguardTypes.FLAG_ARG;}case 16:break;case 7:{yybegin(YYINITIAL);return ProguardTypes.CRLF;}case 17:break;case 8:{yybegin(STATE_JAVA_SECTION);return ProguardTypes.OPEN_BRACE;}case 18:break;case 9:{yybegin(STATE_FLAG_ARG);return ProguardTypes.FLAG_NAME;}case 19:break;case 10:{return ProguardTypes.JAVA_DECL;}case 20:break;default :zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public void selectFirstSymbol(){  if (SelectedSymbol.getInstance().getSld() != null) {    symbolTree.setSelectionRow(0);  } else {    if (displayPanel != null) {      displayPanel.show(null,null);    }    if (renderList != null) {      for (      RenderSymbolInterface render : renderList) {        render.renderSymbol();      }    }  }}  }
class C{  protected boolean check(MapleCharacter c,int npcid){  if (dayByDay) {  }  if (normalAutoStart) {  }  if (lvmin > -1) {    return c.getLevel() >= lvmin;  }  if (lvmax > -1) {    return c.getLevel() >= lvmax;  }  if (mbmin > 0) {    return c.getMonsterBook().getSeen() >= mbmin;  }  if (charismaMin > 0) {    return c.getTrait(MapleTraitType.getByQuestName("charisma")).getLevel() >= charismaMin;  }  if (charmMin > 0) {    return c.getTrait(MapleTraitType.getByQuestName("charm")).getLevel() >= charmMin;  }  if (craftMin > 0) {    return c.getTrait(MapleTraitType.getByQuestName("craft")).getLevel() >= craftMin;  }  if (insightMin > 0) {    return c.getTrait(MapleTraitType.getByQuestName("insight")).getLevel() >= insightMin;  }  if (senseMin > 0) {    return c.getTrait(MapleTraitType.getByQuestName("sense")).getLevel() >= senseMin;  }  if (willMin > 0) {    return c.getTrait(MapleTraitType.getByQuestName("will")).getLevel() >= willMin;  }  if (pop > 0) {    return c.getFame() >= pop;  }  if (pettamenessmin > 0) {    Stream<MaplePet> pets=c.getPets().stream();    Predicate<MaplePet> pet=null;    return pets.anyMatch(pet);  }  if (subJobFlag > 0) {    return c.getSubcategory() == (subJobFlag / 2);  }  if (npc > 0) {    return npcid == npc;  }  if (interval > -1) {    long time=System.currentTimeMillis() - interval * 60 * 1000L;    return c.getQuest(quest).getStatus() != 2 || c.getQuest(quest).getCompletionTime() <= time;  }  if (!end.isEmpty()) {    String timeStr=end;    if (timeStr == null || timeStr.length() <= 0)     return true;    Calendar cal=Calendar.getInstance();    int year=Integer.parseInt(timeStr.substring(0,4));    int month=Integer.parseInt(timeStr.substring(4,6));    int date=Integer.parseInt(timeStr.substring(6,8));    int hour=Integer.parseInt(timeStr.substring(8,10));    cal.set(year,month,date,hour,0);    return cal.getTimeInMillis() >= System.currentTimeMillis();  }  if (!startscript.isEmpty()) {  }  if (!endscript.isEmpty()) {  }  if (!fieldEnter.isEmpty()) {    return fieldEnter.contains(c.getMapId());  }  if (!jobs.isEmpty()) {    return (jobs.contains(c.getJob()) || c.isGM());  }  if (!skills.isEmpty()) {    for (    Entry<Integer,Boolean> a : skills.entrySet()) {      int skillid=a.getKey();      boolean acquire=a.getValue();      Skill skill=SkillFactory.getSkill(skillid);      if (acquire) {        int s=skill.isFourthJob() ? c.getMasterLevel(skill) : c.getSkillLevel(skill);        if (s == 0) {          return false;        }      } else {        if (c.getSkillLevel(skill) > 0 || c.getMasterLevel(skill) > 0) {          return false;        }      }    }    return true;  }  if (!quests.isEmpty()) {    for (    Entry<Integer,Byte> a : quests.entrySet()) {      MapleQuestStatus q=c.getQuest(MapleQuest.getInstance(a.getKey()));      byte state=a.getValue();      if (state != 0) {        if (q == null && state == 0) {          continue;        }        if (q == null || q.getStatus() != state) {          return false;        }      }    }    return true;  }  if (!items.isEmpty()) {    for (    Entry<Integer,Integer> a : items.entrySet()) {      int itemid=a.getKey();      short quantity=0;      MapleInventoryType iType=GameConstants.getInventoryType(itemid);      for (      Item item : c.getInventory(iType).listById(itemid)) {        quantity+=item.getQuantity();      }      int count=a.getValue();      if (quantity < count || (count <= 0 && quantity > 0)) {        return false;      }    }    return true;  }  if (!mobs.isEmpty()) {    for (    Entry<Integer,Integer> a : mobs.entrySet()) {      int mobId=a.getKey();      int killReq=a.getValue();      if (c.getQuest(quest).getMobKills(mobId) < killReq) {        return false;      }    }    return true;  }  if (!pets.isEmpty()) {    return pets.stream().anyMatch(null);  }  return true;}  }
class C{  static public int[] removeIndex(int[] X,int x){  int newX[]=new int[X.length - 1];  int j=0;  for (int i=0; i < X.length; i++)   if (X[i] != x)   newX[j++]=X[i];  return newX;}  }
class C{  public final void run(){  while (keepAlive) {synchronized (working) {      if (runObj == null) {        try {          working.wait();        } catch (        InterruptedException ignore) {          ;        }      }      try {        if (runObj != null) {          runObj.run();          runObj=null;        }synchronized (complete) {          complete.notifyAll();        }      } catch (      Throwable t) {        if (logger.isLoggable(Level.FINEST))         logger.log(Level.FINEST,"Running poolable thread id=" + threadID,t);      } finally {        try {          pool.release(this);        } catch (        Exception e) {          if (logger.isLoggable(Level.FINEST))           logger.log(Level.FINEST,"Releasing poolable thread " + "id=" + threadID,e);        }      }    }  }}  }
class C{  @Override public void actionPerformed(AnActionEvent e){  ScreenView screenView=mySurface.getCurrentScreenView();  if (screenView != null) {    LintAnnotationsModel lintModel=screenView.getModel().getLintAnnotationsModel();    if (lintModel != null && lintModel.getIssueCount() > 0) {      new LintNotificationPanel(screenView,lintModel).show(e);    }  }}  }
class C{  @Override public boolean accept(File directory,String fileName){  if (!super.accept(directory,fileName))   return false;  String firstLine=Basic.getFirstLineFromFile(new File(fileName));  return firstLine != null && firstLine.startsWith("Reading from fasta file");}  }
class C{  public static String generateCode(){  return generateCode(CODESIZE);}  }
class C{  public void addItemRelation(String relationName,Item item){  relations.setObject(relationName,item);}  }
class C{  public void drawChartTransposed(Graphics2D gc){  int x0=2;  int x1=getWidth() - 2;  int y0=getHeight() - bottomMargin;  int y1=topMargin;  if (x0 >= x1)   return;  SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);  Rectangle deviceBBox=new Rectangle(x0,y1,x1 - x0,y0 - y1);  int diameter=Math.min(deviceBBox.width,deviceBBox.height) - 70;  deviceBBox.x=deviceBBox.x + (deviceBBox.width - diameter) / 2;  deviceBBox.y=deviceBBox.y + (deviceBBox.height - diameter) / 2;  if (getChartData().getMaxTotalSeries() <= 0) {    return;  }  String className=getChartData().getClassNames().iterator().next();  double factor=360.0 / getChartData().getTotalForClassIncludingDisabledSeries(className);  double totalValue=0;  Arc2D arc=new Arc2D.Double();  arc.setArcType(Arc2D.PIE);  arc.setFrame(deviceBBox.x + 1,deviceBBox.y + 1,diameter,diameter);  Point center=new Point((int)arc.getFrame().getCenterX(),(int)arc.getFrame().getCenterY());  gc.setFont(getFont(ChartViewer.FontKeys.ValuesFont.toString()));  for (  String series : getChartData().getSeriesNames()) {    double value=getChartData().getValue(series,className).doubleValue();    if (value > 0) {      arc.setAngleStart(totalValue * factor);      arc.setAngleExtent(value * factor);      totalValue+=value;      gc.setColor(getChartColors().getSampleColor(series));      if (sgc != null)       sgc.setCurrentItem(new String[]{series,className});      gc.fill(arc);      if (sgc != null)       sgc.clearCurrentItem();      gc.setColor(Color.black);      gc.draw(arc);      boolean isSelected=getChartData().getChartSelection().isSelected(series,null);      if (isShowValues() || isSelected) {        double textAngle=Geometry.deg2rad(360 - (arc.getAngleStart() + arc.getAngleExtent() / 2));        Point2D apt=Geometry.translateByAngle(center,textAngle,diameter / 2 + 5);        if (isSelected)         gc.setColor(ProgramProperties.SELECTION_COLOR_ADDITIONAL_TEXT); else         gc.setColor(getFontColor(ChartViewer.FontKeys.ValuesFont.toString(),Color.DARK_GRAY));        if (sgc != null)         sgc.setCurrentItem(new String[]{series,className});        drawString(gc,"" + (int)value,apt.getX(),apt.getY(),textAngle);        if (sgc != null)         sgc.clearCurrentItem();      }    }  }  if (chartData.getChartSelection().getSelectedSeries().size() > 0) {    totalValue=0;    gc.setStroke(HEAVY_STROKE);    gc.setColor(ProgramProperties.SELECTION_COLOR);    for (    String series : getChartData().getSeriesNames()) {      double value=getChartData().getValue(series,className).doubleValue();      arc.setAngleStart(totalValue * factor);      arc.setAngleExtent(value * factor);      totalValue+=value;      if (getChartData().getChartSelection().isSelected(series,null)) {        gc.draw(arc);      }    }    gc.setStroke(NORMAL_STROKE);  }}  }
class C{  protected void clearBoxes(){  for (int i=0; i < mPassCodeEditTexts.length; i++) {    mPassCodeEditTexts[i].setText("");  }  mPassCodeEditTexts[0].requestFocus();}  }
class C{  public void acceptInput(String input){  if (currentPrompt != null) {    if (localEchoEnabled) {      context.getForWhom().sendRawMessage(prefix.getPrefix(context) + input);    }    for (    ConversationCanceller canceller : cancellers) {      if (canceller.cancelBasedOnInput(context,input)) {        abandon(new ConversationAbandonedEvent(this,canceller));        return;      }    }    currentPrompt=currentPrompt.acceptInput(context,input);    outputNextPrompt();  }}  }
class C{  public StringRequest(String url,Listener<String> listener,ErrorListener errorListener){  this(Method.GET,url,listener,errorListener);}  }
class C{  @Deployment(resources={"org/activiti/engine/test/bpmn/event/timer/StartTimerEventTest.testDurationStartTimerEvent.bpmn20.xml"}) public void testTimerStartEventDeployment(){  ProcessDefinitionEntity processDefinition=(ProcessDefinitionEntity)repositoryService.createProcessDefinitionQuery().processDefinitionKey("startTimerEventExample").singleResult();  ActivitiEntityEvent processDefinitionCreated=ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_CREATED,processDefinition);  TimerJobEntity timer=(TimerJobEntity)managementService.createTimerJobQuery().singleResult();  ActivitiEntityEvent timerCreated=ActivitiEventBuilder.createEntityEvent(ActivitiEventType.ENTITY_CREATED,timer);  assertSequence(processDefinitionCreated,timerCreated);  listener.clearEventsReceived();}  }
class C{  private void rotateRight(Node<K,V> root){  Node<K,V> pivot=root.left;  Node<K,V> right=root.right;  Node<K,V> pivotLeft=pivot.left;  Node<K,V> pivotRight=pivot.right;  root.left=pivotRight;  if (pivotRight != null) {    pivotRight.parent=root;  }  replaceInParent(root,pivot);  pivot.right=root;  root.parent=pivot;  root.height=Math.max(right != null ? right.height : 0,pivotRight != null ? pivotRight.height : 0) + 1;  pivot.height=Math.max(root.height,pivotLeft != null ? pivotLeft.height : 0) + 1;}  }
class C{  public void moveRelativeTo(float dx,float dy){  moveTo(currentXOffset + dx,currentYOffset + dy);}  }
class C{  public static String generateRandomHexString(int numChars){  StringBuilder sb=new StringBuilder();  while (sb.length() < numChars) {    sb.append(Integer.toHexString(RANDOM.nextInt()));  }  return sb.toString().substring(0,numChars);}  }
class C{  private LangUtils(){}  }
class C{  @SuppressWarnings("unchecked") public static <T>T convert(Object from,Class<T> to){  checkNotNull(to);  if (from == null) {    return null;  }  to=(Class<T>)wrap(to);  if (to.isAssignableFrom(from.getClass())) {    return to.cast(from);  }  String converterId=from.getClass().getName() + "_" + to.getName();  Method converter=CONVERTERS.get(converterId);  if (converter == null) {    throw new UnsupportedOperationException("Cannot convert from " + from.getClass().getName() + " to "+ to.getName()+ ". Requested converter does not exist.");  }  try {    Object val=converter.invoke(to,from);    return to.cast(val);  } catch (  Exception e) {    throw new RuntimeException("Cannot convert from " + from.getClass().getName() + " to "+ to.getName()+ ". Conversion failed with "+ e.getMessage(),e);  }}  }
class C{  public FriendsSearchQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  private void playNext(){  SpotlightView.Builder next=queue.poll();  if (next != null) {    next.show().setReady(true);  } else {    Log.d(TAG,"END OF QUEUE");    resetTour();  }}  }
class C{  @Override public void onMessageReceived(RemoteMessage remoteMessage){  Log.e(TAG,"From: " + remoteMessage.getFrom());  Log.e(TAG,"From: " + remoteMessage.getData().get("body"));  String data=remoteMessage.getData().get("body");  sendNotification(data);}  }
class C{  public ConceptualGraph(){}  }
class C{  public LPCDatagram(long setDuration,short[] quantizedCoeffs,byte[] quantizedResidual){  super(setDuration);  this.quantizedCoeffs=quantizedCoeffs;  this.quantizedResidual=quantizedResidual;}  }
class C{  public boolean isPinchZoomEnabled(){  return mPinchZoomEnabled;}  }
class C{  @Override public Node item(int index){  return nodeListItem(index);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_DAY_CANNOT_OWN_SHOP(String value0){  return new SM_SYSTEM_MESSAGE(1400942,value0);}  }
class C{  ByteVector put11(final int b1,final int b2){  int length=this.length;  if (length + 2 > data.length) {    enlarge(2);  }  byte[] data=this.data;  data[length++]=(byte)b1;  data[length++]=(byte)b2;  this.length=length;  return this;}  }
class C{  public boolean rightIdentified(){  for (  TrieNode n : this.labelId2node.values()) {    if (!n.hasId())     return false;  }  return true;}  }
class C{  @OnClick(R.id.loadDataButton) public void loadData(){  Log.d(TAG,"executeAction action called");  hideKeyboardIfShown();  String requestDuration=mRequestDurationEditText.getText().toString();  try {    Integer.valueOf(requestDuration);  } catch (  Exception e) {    requestDuration="5";  }  mApiInterface.sleep(requestDuration).subscribeOn(Schedulers.io()).compose(getRxPhoenix().<JsonElement>surviveConfigChanges(REQUEST_SLOW));  Toast.makeText(this,"Started loading data from: http://fake-response.appspot.com/?sleep=" + requestDuration,Toast.LENGTH_SHORT).show();}  }
class C{  public DocsSaveQuery tags(String value){  return unsafeParam("tags",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_PROC_EFFECT_OCCURRED(int value0){  return new SM_SYSTEM_MESSAGE(1301062,new DescriptionId(value0));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Curse_END_ME_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200471,skilltarget);}  }
class C{  public DuplicateAionObjectException(Throwable cause){  super(cause);}  }
