class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case MappingPackage.INFO_MODEL_PROPERTY_SOURCE__PROPERTY:    setProperty((FunctionblockProperty)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  @Override public void mouseClicked(MouseEvent evt){  delegate.mouseMoved(evt);}  }
class C{  private void generateVectorDrawableResult(VectorDrawable vector,String nextVectorName,boolean isLast,boolean isFirst) throws IOException {  CustomLogger.logError("generateVectorDrawableResult" + vector.getFileName() + " islast=="+ isLast);  if (!vectorAlreadyDefined.contains(vector.getFileName())) {    currentVectorFileName=vector.getFileName();    CustomLogger.logError("Generating the following file " + currentVectorFileName);    File vectorFile=new File(drawableFolder,currentVectorFileName + ".xml");    BufferedWriter vectorBW=createIt(vectorFile);    CustomLogger.log("Generating the following file " + vectorFile.getAbsolutePath());    generateVectorDrawable(vector,vectorBW,isLast);    vectorAlreadyDefined.add(vector.getFileName());    vectorBW.flush();    vectorBW.close();  }  if (!isLast) {    File animatedVectorFile=new File(drawableFolder,animatedVector.replace("#fileName",currentVectorFileName));    BufferedWriter animatedVectorBW=createIt(animatedVectorFile);    CustomLogger.log("Generating the following file " + animatedVectorFile.getAbsolutePath());    CustomLogger.logError("----------->Generating the following file " + animatedVectorFile.getAbsolutePath() + ", next VectorName="+ nextVectorName);    generateAnimatedVector(vector,animatedVectorBW,nextVectorName,false);    generateAnimatorSet(vector,false);    animatedVectorBW.flush();    animatedVectorBW.close();  }  if (!isLast) {    File animatedVectorFile=new File(drawableFolder,animatedVector.replace("#fileName",currentVectorFileName + reverse));    BufferedWriter animatedVectorBW=createIt(animatedVectorFile);    CustomLogger.log("Generating the following file " + animatedVectorFile.getAbsolutePath());    CustomLogger.logError("----------->Generating the following file " + animatedVectorFile.getAbsolutePath() + ", next VectorName="+ nextVectorName);    generateAnimatedVector(vector,animatedVectorBW,nextVectorName,true);    generateAnimatorSet(vector,true);    animatedVectorBW.flush();    animatedVectorBW.close();  }}  }
class C{  public String toClass() throws VerifierException {  String code=getLicense();  String repeatCountField=null;  Variable vla=null;  code+=getPackage();  code+=getImport();  code+=generatedByLD2J();  code+=getLayoutDesc();  code+=("public interface " + this.structName + " extends "+ (this.superclass == null ? "Layout" : this.superclass.getStructName())+ " {\n\n");  code+=getSizeOfMethod();  System.out.println("Struct name: " + this.structName);  for (  Variable var : variables) {    if (null != var.repeatCountField) {      code+="\t";      code+=var.getVLAGetter();      repeatCountField=var.getRepeatCountField();      vla=var;    } else     if (Helper.is1DArray(var.getArraySize())) {      code+="\t";      if (var.isPrimArray) {        code+=var.getPrim1DArrayGetter();      } else {        code+=var.get1DArrayGetter();      }    } else     if (Helper.is2DArray(var.getArraySize())) {      code+="\t";      if (var.isPrimArray) {        code+=var.getPrim2DArrayGetter();      } else {        code+=var.get2DArrayGetter();      }    } else     if (Helper.isPointer(var.getType())) {    } else {      code+="\t";      code+=var.getGetter();    }    System.out.println(var);  }  if (containsVLA) {    code+=bindLocationWithInitializer(vla);  }  for (  Variable var : variables) {    if (Helper.isNestedStruct(var.getType()) || Helper.isArray(var.getArraySize()) || (var.getName().equals(repeatCountField))) {      continue;    }    code+="\t";    code+=var.getSetter();  }  for (  Variable var : variables) {    if (!Helper.isPointer(var.getType())) {      code+=getToStringMethod();      break;    }  }  code+="}\n";  return code;}  }
class C{  @Override public void notifyMessage(SprogMessage m){}  }
class C{  @Override public boolean onOptionsItemSelected(MenuItem item){switch (item.getItemId()) {case R.id.start_service_menu:{      startService(new Intent(TrackerActivity.this,TrackerService.class));      break;    }case R.id.stop_service_menu:{    stopService(new Intent(TrackerActivity.this,TrackerService.class));    break;  }case R.id.settings_menu:{  launchSettings();  break;}case R.id.export_kml:{exportKML();break;}case R.id.export_csv:{exportCSV();break;}case R.id.clear_data_menu:{clearData();break;}}return super.onOptionsItemSelected(item);}  }
class C{  public void recreate(EglCore newEglCore){  if (mSurface == null) {    throw new RuntimeException("not yet implemented for SurfaceTexture");  }  mEglCore=newEglCore;  createWindowSurface(mSurface);}  }
class C{  public boolean startsWith(XMLString prefix){  return startsWith(prefix,0);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:16.137 -0500",hash_original_method="8A7B1748C796BD03C7089BCC55139778",hash_generated_method="FBCBBA947FA5D3697DF7D9EC2582A303") public ProtocolException(String detailMessage){  super(detailMessage);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void writeEndVCard() throws IOException {  if (!open) {    throw new IllegalStateException(Messages.INSTANCE.getExceptionMessage(1));  }  generator.writeEndArray();  generator.writeEndArray();  open=false;}  }
class C{  public static void redirect(InputStream inputStream){  new RedirectStream(inputStream).start();}  }
class C{  public boolean isHighQuality(){  return m_highQuality;}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  final RPAction teleport=new RPAction();  teleport.put("type","teleport");  teleport.put("target",params[0]);  teleport.put("zone",params[1]);  teleport.put("x",params[2]);  teleport.put("y",params[3]);  ClientSingletonRepository.getClientFramework().send(teleport);  return true;}  }
class C{  private void decreaseKeyUnchecked(Entry<T> entry,double priority){  entry.mPriority=priority;  if (entry.mParent != null && entry.mPriority <= entry.mParent.mPriority)   cutNode(entry);  if (entry.mPriority <= mMin.mPriority)   mMin=entry;}  }
class C{  public Map<String,Long> delete(Statement stmt,Qualifier... qualifiers){  if (qualifiers == null || qualifiers.length == 0) {    ExecuteTask task=client.execute(null,stmt,QUERY_MODULE,"delete_record");    task.waitTillComplete();    return null;  }  if (qualifiers.length == 1 && qualifiers[0] instanceof KeyQualifier) {    KeyQualifier keyQualifier=(KeyQualifier)qualifiers[0];    Key key=keyQualifier.makeKey(stmt.getNamespace(),stmt.getSetName());    this.client.delete(null,key);    Map<String,Long> map=new HashMap<String,Long>();    map.put("read",1L);    map.put("write",1L);    return map;  }  KeyRecordIterator results=select(stmt,true,null,qualifiers);  return delete(results);}  }
class C{  public boolean isDraggable(){  return draggable;}  }
class C{  public void insertChildBefore(HtmlNode node,HtmlNode nodeToInsert){  int index=getChildIndex(node);  if (index >= 0) {    insertChild(index,nodeToInsert);  }}  }
class C{  public boolean exists(){  return SQLiteUtils.intQuery(toExistsSql(),getArguments()) != 0;}  }
class C{  public Builder userName(final String user_name){  this.userName=user_name;  return this;}  }
class C{  public boolean isCollapseFieldSeparators(){  return collapseFieldSeparators;}  }
class C{  private final long youngAvailable(){  final MemoryUsage usage=getUsage(eden,true);  return usage.getCommitted() - usage.getUsed();}  }
class C{  private static String convertToQuotedString(String string){  if (string == null || string.length() == 0) {    return null;  }  if (string.charAt(0) == '"' && string.charAt(string.length() - 1) == '"') {    return string;  }  return '\"' + string + '\"';}  }
class C{  public static Number intdiv(Number left,Number right){  return NumberMath.intdiv(left,right);}  }
class C{  @Deprecated public String sign(String buf,SecretKey key,String algorithm){  return sign2(buf.getBytes(),key,algorithm);}  }
class C{  private void fireKamikazeSuicideAttacks(final Unit unitUnderFire,final IntegerMap<Resource> numberOfAttacks,final IntegerMap<Resource> resourcesAndAttackValues,final PlayerID firingEnemy,final Territory location){  final GameData data=getData();  final int diceSides=data.getDiceSides();  final CompositeChange change=new CompositeChange();  int hits=0;  int[] rolls=null;  if (games.strategy.triplea.Properties.getLow_Luck(data)) {    int power=0;    for (    final Entry<Resource,Integer> entry : numberOfAttacks.entrySet()) {      final Resource r=entry.getKey();      final int num=entry.getValue();      change.add(ChangeFactory.changeResourcesChange(firingEnemy,r,-num));      power+=num * resourcesAndAttackValues.getInt(r);    }    if (power > 0) {      hits=power / diceSides;      final int remainder=power % diceSides;      if (remainder > 0) {        rolls=m_bridge.getRandom(diceSides,1,firingEnemy,DiceType.COMBAT,"Rolling for remainder in Kamikaze Suicide Attack on unit: " + unitUnderFire.getType().getName());        if (remainder > rolls[0]) {          hits++;        }      }    }  } else {    final int numTokens=numberOfAttacks.totalValues();    rolls=m_bridge.getRandom(diceSides,numTokens,firingEnemy,DiceType.COMBAT,"Rolling for Kamikaze Suicide Attack on unit: " + unitUnderFire.getType().getName());    final int[] powerOfTokens=new int[numTokens];    int j=0;    for (    final Entry<Resource,Integer> entry : numberOfAttacks.entrySet()) {      final Resource r=entry.getKey();      int num=entry.getValue();      change.add(ChangeFactory.changeResourcesChange(firingEnemy,r,-num));      final int power=resourcesAndAttackValues.getInt(r);      while (num > 0) {        powerOfTokens[j]=power;        j++;        num--;      }    }    for (int i=0; i < rolls.length; i++) {      if (powerOfTokens[i] > rolls[i]) {        hits++;      }    }  }  final String title="Kamikaze Suicide Attack attacks " + MyFormatter.unitsToText(Collections.singleton(unitUnderFire));  final String dice=" scoring " + hits + " hits.  Rolls: "+ MyFormatter.asDice(rolls);  m_bridge.getHistoryWriter().startEvent(title + dice,unitUnderFire);  if (hits > 0) {    final UnitAttachment ua=UnitAttachment.get(unitUnderFire.getType());    final int currentHits=unitUnderFire.getHits();    if (ua.getHitPoints() <= currentHits + hits) {      change.add(ChangeFactory.removeUnits(location,Collections.singleton(unitUnderFire)));    } else {      final IntegerMap<Unit> hitMap=new IntegerMap<>();      hitMap.put(unitUnderFire,hits + unitUnderFire.getHits());      change.add(ChangeFactory.unitsHit(hitMap));      m_bridge.getHistoryWriter().addChildToEvent("Units damaged: " + MyFormatter.unitsToText(Collections.singleton(unitUnderFire)),unitUnderFire);    }  }  if (!change.isEmpty()) {    m_bridge.addChange(change);  }  m_battleTracker.addNoBombardAllowedFromHere(location);  final Collection<PlayerID> playersInvolved=new ArrayList<>();  playersInvolved.add(m_player);  playersInvolved.add(firingEnemy);  this.getDisplay().reportMessageToPlayers(playersInvolved,null,title + dice,title);}  }
class C{  public In(Scanner scanner){  this.scanner=scanner;}  }
class C{  public double fMeasure(double beta){  final double beta2=beta * beta;  double fmeasure=((1 + beta2) * pairconfuse[0]) / ((1 + beta2) * pairconfuse[0] + beta2 * pairconfuse[1] + pairconfuse[2]);  return fmeasure;}  }
class C{  public void putString(String key,String value){  if (key != null && value != null) {    mPreferences.edit().putString(key,value).apply();  }}  }
class C{  public void interceptPacket(Packet packet){  packet.addExtension(this);}  }
class C{  @VisibleForTesting static MapsFeature buildMapsMarkerFeature(String title,String description,String iconUrl,Location location){  MapsFeature mapsFeature=new MapsFeature();  mapsFeature.setType(MapsFeature.MARKER);  mapsFeature.generateAndroidId();  mapsFeature.setTitle(TextUtils.isEmpty(title) ? EMPTY_TITLE : title);  mapsFeature.setDescription(description.replaceAll("\n","<br>"));  mapsFeature.setIconUrl(iconUrl);  mapsFeature.addPoint(location);  return mapsFeature;}  }
class C{  protected void init(){  status=STATUS_OK;  frameCount=0;  frames=new ArrayList();  gct=null;  lct=null;}  }
class C{  private int createForecastRunResult(int M_Warehouse_ID){  int records=0;  ForecastEngine engine=ForecastFactory.getForecastEngine(getAD_Client_ID());  for (  MPPForecastRunMaster master : MPPForecastRunMaster.getLines(getCtx(),p_PP_ForecastRun_ID,get_TrxName())) {    DataSet series=new DataSet();    series.setPeriods(m_run.getPeriodHistory());    MProduct product=MProduct.get(getCtx(),master.getM_Product_ID());    List<MPPForecastRunDetail> details=MPPForecastRunMaster.getDetails(getCtx(),master.get_ID(),get_TrxName());    for (    MPPForecastRunDetail detail : details) {      MPPPeriod period=(MPPPeriod)detail.getPP_Period();      DataElement data=new DataElement(master.get_ID(),period.getPeriodNo(),detail.getQtyCalculated(),null);      series.addDataElement(data);    }    DataSet results=engine.getForecast(m_forecast_rule.getCalculationClass(),master.get_ID(),series,master.getFactorAlpha().doubleValue(),master.getFactorGamma().doubleValue(),master.getFactorBeta().doubleValue(),master.getFactorMultiplier().doubleValue(),master.getFactorScale().doubleValue(),master.getFactorUser().doubleValue());    Enumeration<DataElement> elements=results.getDataElements();    while (elements.hasMoreElements()) {      DataElement element=elements.nextElement();      MUOM uom=(MUOM)product.getC_UOM();      MPPForecastRunResult result=new MPPForecastRunResult(getCtx(),0,get_TrxName());      result.setPP_ForecastRun_ID(m_run.get_ID());      result.setPP_ForecastRunMaster_ID(element.getKey());      result.setDescription(element.getDescription());      BigDecimal qty=(BigDecimal)element.getValue();      result.setQtyCalculated(qty);      result.setQtyPlan(uom.round(qty,true));      result.setIsActive(true);      result.setPP_Period_ID(MPPPeriod.getIDByPeriodNo(m_period_definition_target,element.getPeriodNo()));      result.setPeriodNo(element.getPeriodNo());      result.saveEx();      records++;    }  }  return records;}  }
class C{  public GameEntityChangeEvent(final Object source,final Entity entity,final Vector<UnitLocation> movePath,Entity oldEntity){  super(source,entity);  this.oldEntity=oldEntity;  this.movePath=movePath;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static VOUser toVOUser(PlatformUser platformUser){  if (platformUser == null) {    return null;  }  VOUser voUser=new VOUser();  updateVoUser(platformUser,voUser);  return voUser;}  }
class C{  public static String toHexString(int i){  return toHexString(toByteArray(i));}  }
class C{  public static void registerMaskFlags(CFlags flags){  flags.registerOptional('f',REQUIRE_FLAGS,Integer.class,"INT","decimal mask indicating SAM FLAG bits that must be set for the record").setCategory(SENSITIVITY_TUNING);  flags.registerOptional('F',FILTER_FLAGS,Integer.class,"INT","decimal mask indicating SAM FLAG bits that must not be set for the record").setCategory(SENSITIVITY_TUNING);}  }
class C{  public Map<String,String> prepareInstallProperties(@Nullable String configFile,@Nullable Path binaries,InstallType installType,Artifact artifact,Version version2Install,boolean isInstall) throws IOException {switch (artifact.getName()) {case InstallManagerArtifact.NAME:    return Collections.emptyMap();case CDECArtifact.NAME:  Map<String,String> properties;if (isInstall) {  if (binaries != null) {    properties=loadConfigProperties(binaries,installType);  } else   if (configFile != null) {    properties=loadConfigProperties(configFile);  } else {    properties=loadCodenvyDefaultProperties(version2Install,installType);  }  if (installType == InstallType.MULTI_SERVER) {    setupSSHAccessProperties(properties);  }  setupSshKeyParts(properties);  setupProxyProperties(properties);} else {  Map<String,String> newProperties;  if (binaries != null) {    newProperties=loadConfigProperties(binaries,installType);  } else {    Optional<Version> installVersion=artifact.getInstalledVersion();    if (!installVersion.isPresent()) {      throw new IOException("It is impossible to obtain installed version.");    }    newProperties=configFile != null ? loadConfigProperties(configFile) : loadCodenvyDefaultProperties(version2Install,installType);  }  properties=merge(loadInstalledCodenvyProperties(installType),newProperties);  properties.put(Config.VERSION,version2Install.toString());  if (installType == InstallType.MULTI_SERVER) {    properties.put(Config.PUPPET_MASTER_HOST_NAME,fetchMasterHostName());  }}return properties;default :throw new ArtifactNotFoundException(artifact);}}  }
class C{  public static void main(String[] args){  run(new TestDupParamWarn(),ARGS,NO_TEST,NEGATED_TEST);}  }
class C{  public short popShort(){  BaseTypeWrapper wrapper=(BaseTypeWrapper)this.pop();  Short value=(Short)wrapper.getValue();  return value.shortValue();}  }
class C{  public static byte[] encode(byte[] source,int off,int len,byte[] alphabet,int maxLineLength){  int lenDiv3=(len + 2) / 3;  int len43=lenDiv3 * 4;  byte[] outBuff=new byte[len43 + (len43 / maxLineLength)];  int d=0;  int e=0;  int len2=len - 2;  int lineLength=0;  for (; d < len2; d+=3, e+=4) {    int inBuff=((source[d + off] << 24) >>> 8) | ((source[d + 1 + off] << 24) >>> 16) | ((source[d + 2 + off] << 24) >>> 24);    outBuff[e]=alphabet[(inBuff >>> 18)];    outBuff[e + 1]=alphabet[(inBuff >>> 12) & 0x3f];    outBuff[e + 2]=alphabet[(inBuff >>> 6) & 0x3f];    outBuff[e + 3]=alphabet[(inBuff) & 0x3f];    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;      lineLength=0;    }  }  if (d < len) {    encode3to4(source,d + off,len - d,outBuff,e,alphabet);    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;    }    e+=4;  }  assert (e == outBuff.length);  return outBuff;}  }
class C{  public synchronized void add(LongBuffer argBuf){  add(argBuf.data,argBuf.length);}  }
class C{  public int[] longest(int[][] mat){  int[] res=new int[]{};  if (mat == null || mat.length == 0 || mat[0].length == 0)   return res;  int m=mat.length;  int n=mat[0].length;  cache=new int[m][n];  int maxStart=0;  int maxPath=0;  for (int i=0; i < m; i++)   for (int j=0; j < n; j++) {    int path=dfs(i,j,mat);    if (path > maxPath) {      maxStart=mat[i][j];      maxPath=path;    }  }  res=new int[maxPath];  for (int i=0; i < maxPath; i++)   res[i]=maxStart + i;  return res;}  }
class C{  public WrapElement(String wrapString,String paramString){  this(wrapString,paramString,null);}  }
class C{  public AccountHeaderBuilder withCompactStyle(boolean compactStyle){  this.mCompactStyle=compactStyle;  return this;}  }
class C{  private double simulateParameters(double[] curparams){  for (int i=0; i < numfit; i++) {    for (int j=0; j < numfit; j++) {      alpha[i][j]=0.0;    }  }  for (int i=0; i < numfit; i++) {    beta[i]=0.0;  }  double newchisq=0.0;  for (int di=0; di < x.length; di++) {    FittingFunctionResult res=func.eval(x[di],curparams);    double sigma2inv=1.0 / (s[di] * s[di]);    double deltay=y[di] - res.y;    int i2=0;    for (int i=0; i < numfit; i++) {      if (dofit[i]) {        double wt=res.gradients[i] * sigma2inv;        int j2=0;        for (int j=0; j <= i; j++) {          if (dofit[j]) {            alpha[i2][j2]+=wt * res.gradients[j];            j2++;          }        }        beta[i2]=beta[i2] + deltay * wt;        i2++;      }    }    newchisq=newchisq + deltay * deltay * sigma2inv;  }  for (int i=1; i < numfit; i++) {    for (int j=i + 1; j < numfit; j++) {      alpha[i][j]=alpha[j][i];    }  }  return newchisq;}  }
class C{  void deleteLocalDevice(String deviceName) throws VPlexApiException {  s_logger.info("Deleting local device {}",deviceName);  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  VPlexDeviceInfo deviceInfo=discoveryMgr.findLocalDevice(deviceName);  if (deviceInfo != null) {    s_logger.info("Tearing down local device {}",deviceName);    dismantleResource(deviceInfo.getPath(),true,true);  } else   if (deviceName.startsWith(VPlexApiConstants.DEVICE_PREFIX)) {    s_logger.info("Destroying extents for local device {}",deviceName);    StringBuilder nameBuilder=new StringBuilder(VPlexApiConstants.EXTENT_PREFIX);    nameBuilder.append(deviceName.substring(VPlexApiConstants.DEVICE_PREFIX.length()));    nameBuilder.append(VPlexApiConstants.EXTENT_SUFFIX);    deleteExtent(nameBuilder.toString());  }}  }
class C{  public synchronized void begin(Vector2 mousePosition){  this.active=true;  this.beginPosition=mousePosition;}  }
class C{  public boolean visit(InsertEdit edit){  return visitNode(edit);}  }
class C{  public static boolean shouldAutoComplete(){  for (  ICorporeaAutoCompleteController controller : autoCompleteControllers)   if (controller.shouldAutoComplete())   return true;  return false;}  }
class C{  private boolean discoverEndpointsByFabric(){  boolean byFabric=false;  try {    byFabric=Boolean.valueOf(ControllerUtils.getPropertyValueFromCoordinator(_coordinator,"controller_ns_brocade_discovery_by_fabric_association"));  } catch (  Exception ex) {    _log.warn("Failed to get the values for controller_ns_brocade_discovery_by_fabric_association from system configurations " + ex.getMessage());  }  return byFabric;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node addressNode;  NodeList childList;  Node child;  String value;  Node grandChild;  int length;  java.util.List result=new java.util.ArrayList();  java.util.List expectedNormal=new java.util.ArrayList();  expectedNormal.add("\u03b2");  expectedNormal.add(" Dallas, ");  expectedNormal.add("\u03b3");  expectedNormal.add("\n 98554");  java.util.List expectedExpanded=new java.util.ArrayList();  expectedExpanded.add("\u03b2 Dallas, \u03b3\n 98554");  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("acronym");  addressNode=elementList.item(1);  childList=addressNode.getChildNodes();  length=(int)childList.getLength();  for (int indexN1007C=0; indexN1007C < childList.getLength(); indexN1007C++) {    child=(Node)childList.item(indexN1007C);    value=child.getNodeValue();    if ((value == null)) {      grandChild=child.getFirstChild();      assertNotNull("grandChildNotNull",grandChild);      value=grandChild.getNodeValue();      result.add(value);    } else {      result.add(value);    }  }  if (equals(1,length)) {    assertEquals("assertEqCoalescing",expectedExpanded,result);  } else {    assertEquals("assertEqNormal",expectedNormal,result);  }}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1;    int progress, oldProgress=-1;    double[] data1;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData=inputFile1.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile1.getPreferredPalette());    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        if (z1 != noData && z1 != 0) {          outputFile.setValue(row,col,1 / z1);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private MultiPolygon readMultiPolygonText() throws IOException, ParseException {  String nextToken=getNextEmptyOrOpener();  if (nextToken.equals(EMPTY)) {    return geometryFactory.createMultiPolygon(new Polygon[]{});  }  ArrayList polygons=new ArrayList();  Polygon polygon=readPolygonText();  polygons.add(polygon);  nextToken=getNextCloserOrComma();  while (nextToken.equals(COMMA)) {    polygon=readPolygonText();    polygons.add(polygon);    nextToken=getNextCloserOrComma();  }  Polygon[] array=new Polygon[polygons.size()];  return geometryFactory.createMultiPolygon((Polygon[])polygons.toArray(array));}  }
class C{  public String[][] convertToStringFrame(String input,String meta) throws IOException {  try {    JSONObject jmtd=new JSONObject(meta);    int rows=jmtd.getInt(DataExpression.READROWPARAM);    int cols=jmtd.getInt(DataExpression.READCOLPARAM);    String format=jmtd.getString(DataExpression.FORMAT_TYPE);    if (!(DataExpression.FORMAT_TYPE_VALUE_TEXT.equals(format) || DataExpression.FORMAT_TYPE_VALUE_MATRIXMARKET.equals(format))) {      throw new IOException("Invalid input format (expected: text or mm): " + format);    }    return convertToStringFrame(input,rows,cols);  } catch (  Exception ex) {    throw new IOException(ex);  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public AreaVO updateArea(AreaVO areaVO){  DbConnection conn=getConnection();  try {    DbUpdateFns.update(conn,TABLE_NAME,COLUM_NAMES_LIST,new SigiaDbInputRecord(COL_DEFS,areaVO),getWhereClauseByKey(areaVO.getId()));    return areaVO;  } catch (  Exception e) {    logger.error(e.getMessage());    throw new DBException(e.getMessage());  }}  }
class C{  public String toString(){  return "Contribution ID=" + mContributionId + ", Rejoin ID="+ mRejoinId+ ", Subject="+ mSubject+ ", Participants="+ mParticipants.size()+ ", Timestamp="+ mTimestamp;}  }
class C{  public PreRenderViewEvent(UIViewRoot root){  super(root);}  }
class C{  public int describeContents(){  return 0;}  }
class C{  @Override public void remove(){  knownChunks.clear();  chunkLock.clear();  saveData();  getInventory().removeViewer(this);  getInventory().getCraftingInventory().removeViewer(this);  permissions.clearPermissions();  getServer().setPlayerOnline(this,false);  getWorld().getRawPlayers().remove(this);  if (scoreboard != null) {    scoreboard.unsubscribe(this);    scoreboard=null;  }  super.remove();}  }
class C{  public void testDoubleValue(){  DoubleAccumulator ai=new DoubleAccumulator(null,0.0);  assertEquals(0.0,ai.doubleValue());  ai.accumulate(1.0);  assertEquals(1.0,ai.doubleValue());}  }
class C{  public static void PostForJsonInstantly(String url,String deviceBssid,JSONObject json,Runnable disconnectedCallback,HeaderPair... headers){  MeshCommunicationUtils.HttpNonResponsePost(url,deviceBssid,json,headers);}  }
class C{  public void analyze2(CompilationUnit unit,TypeTable typeTable){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:11.627 -0500",hash_original_method="6281E295952C34947D74AA92CC697B16",hash_generated_method="0BFF8C9EE4FB80415F134AE778E04B54") public boolean more(){  return pos < in.length();}  }
class C{  public boolean execute(String action,String rawArgs,CallbackContext callbackContext) throws JSONException {  JSONArray args=new JSONArray(rawArgs);  return execute(action,args,callbackContext);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case DomPackage.DOCLET__LINE_TAGS:    getLineTags().clear();  return;}super.eUnset(featureID);}  }
class C{  protected final void RESOLVE(Instruction s){  Operand target=loadFromJTOC(burs.ir,Entrypoints.optResolveMethod.getOffset(),VM.BuildFor32Addr ? DW : QW);  EMIT(CPOS(s,MIR_Call.mutate0(s,CALL_SAVE_VOLATILE,null,null,target,MethodOperand.STATIC(Entrypoints.optResolveMethod))));}  }
class C{  private static byte[] decode_base64(final String s,final int maxolen) throws IllegalArgumentException {  final StringBuffer rs=new StringBuffer();  int off=0;  final int slen=s.length();  int olen=0;  byte ret[];  byte c1, c2, c3, c4, o;  if (maxolen <= 0) {    throw new IllegalArgumentException("Invalid maxolen");  }  while (off < slen - 1 && olen < maxolen) {    c1=char64(s.charAt(off++));    c2=char64(s.charAt(off++));    if (c1 == -1 || c2 == -1) {      break;    }    o=(byte)(c1 << 2);    o|=(c2 & 0x30) >> 4;    rs.append((char)o);    if (++olen >= maxolen || off >= slen) {      break;    }    c3=char64(s.charAt(off++));    if (c3 == -1) {      break;    }    o=(byte)((c2 & 0x0f) << 4);    o|=(c3 & 0x3c) >> 2;    rs.append((char)o);    if (++olen >= maxolen || off >= slen) {      break;    }    c4=char64(s.charAt(off++));    o=(byte)((c3 & 0x03) << 6);    o|=c4;    rs.append((char)o);    ++olen;  }  ret=new byte[olen];  for (off=0; off < olen; off++) {    ret[off]=(byte)rs.charAt(off);  }  return ret;}  }
class C{  public static Calendar reduceCalendar(Calendar calendar){  calendar.set(Calendar.MILLISECOND,0);  calendar.set(Calendar.SECOND,0);  calendar.set(Calendar.MINUTE,0);  calendar.set(Calendar.HOUR,0);  calendar.set(Calendar.HOUR_OF_DAY,0);  return calendar;}  }
class C{  public Vector3f(Vector4f vector){  if (vector.w() != 0) {    this.points[0]=vector.x() / vector.w();    this.points[1]=vector.y() / vector.w();    this.points[2]=vector.z() / vector.w();  } else {    this.points[0]=vector.x();    this.points[1]=vector.y();    this.points[2]=vector.z();  }}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public TObjectHash(int initialCapacity){  super(initialCapacity);}  }
class C{  public TextSizeSpan(int size,boolean dip){  mSize=size;  mDip=dip;}  }
class C{  @Override protected Object createOutputTuple(){  try {    return outputClass.newInstance();  } catch (  InstantiationException e) {    throw new RuntimeException(e);  }catch (  IllegalAccessException e) {    throw new RuntimeException(e);  }}  }
class C{  @Override public boolean isAggregateObjectMapping(){  return true;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean rejectIt(){  log.info(toString());  setIsApproved(false);  return true;}  }
class C{  public static HttpServletRequest buildMockRequestObjectFromUrl(String string) throws MalformedURLException, UnsupportedEncodingException {  Cookie[] expectedCookies=new Cookie[]{};  URL url=new URL(string);  Map<String,String> queryMap=getQueryMap(url.getQuery());  String samlRequestParameter=getParameterFromQueryMap(queryMap,Shared.SAML_REQUEST_PARAMETER);  String relayStateParameter=getParameterFromQueryMap(queryMap,Shared.RELAY_STATE_PARAMETER);  String sigAlgParameter=getParameterFromQueryMap(queryMap,Shared.SIGNATURE_ALGORITHM_PARAMETER);  String signatureParameter=getParameterFromQueryMap(queryMap,Shared.SIGNATURE_PARAMETER);  StringBuffer sbRequestUrl=new StringBuffer();  sbRequestUrl.append(string.replace("?" + url.getQuery(),""));  HttpServletRequest request=createMock(HttpServletRequest.class);  expect(request.getCookies()).andReturn(expectedCookies).anyTimes();  expect(request.getParameter(Shared.SAML_REQUEST_PARAMETER)).andReturn(samlRequestParameter).anyTimes();  expect(request.getParameter(Shared.RELAY_STATE_PARAMETER)).andReturn(relayStateParameter).anyTimes();  expect(request.getParameter(Shared.SIGNATURE_ALGORITHM_PARAMETER)).andReturn(sigAlgParameter).anyTimes();  expect(request.getParameter(Shared.SIGNATURE_PARAMETER)).andReturn(signatureParameter).anyTimes();  expect(request.getRequestURL()).andReturn(sbRequestUrl).anyTimes();  expect(request.getParameter(Shared.REQUEST_AUTH_PARAM)).andReturn(TestConstants.AUTHORIZATION).anyTimes();  String queryString=Shared.SAML_REQUEST_PARAMETER + "=" + samlRequestParameter;  if (relayStateParameter != null) {    queryString=queryString + "&" + Shared.RELAY_STATE_PARAMETER+ "="+ relayStateParameter;  }  if (sigAlgParameter != null) {    queryString=queryString + "&" + Shared.SIGNATURE_ALGORITHM_PARAMETER+ "="+ sigAlgParameter;  }  if (signatureParameter != null) {    queryString=queryString + "&" + Shared.SIGNATURE_PARAMETER+ "="+ signatureParameter;  }  expect(request.getQueryString()).andReturn(queryString).anyTimes();  replay(request);  return request;}  }
class C{  @Override public void reset(Parameters parameters){  reset(getUrl().addParameters(parameters.getParameters()));}  }
class C{  @Override public void onRestoreInstanceState(Parcelable state){  SavedState ss=(SavedState)state;  super.onRestoreInstanceState(ss.getSuperState());  this.canSlide=ss.canSlide;  this.runAnimationOnFinishInflate=ss.runAnimationOnFinishInflate;  this.horizontalDragRange=ss.horizontalDragRange;  this.verticalDragRange=ss.verticalDragRange;  this.dragPosition=ss.dragPosition;  this.dragLimit=ss.dragLimit;  this.tension=ss.tension;  this.friction=ss.friction;}  }
class C{  public void throwException() throws Exception {  throw new Exception("Hello from throwException()");}  }
class C{  public String encodeBody(){  return encodeProduct();}  }
class C{  public static int decode(byte[] data,OutputStream out) throws IOException {  int outLen=0;  byte[] cache=new byte[INPUT_BYTES_PER_CHUNK];  int cachedBytes=0;  for (  byte b : data) {    final byte d=DECODING_TABLE[MASK_BYTE_UNSIGNED & b];    if (d == INVALID_BYTE) {      continue;    }    cache[cachedBytes++]=d;    if (cachedBytes == INPUT_BYTES_PER_CHUNK) {      final byte b1=cache[0];      final byte b2=cache[1];      final byte b3=cache[2];      final byte b4=cache[3];      if (b1 == PAD_BYTE || b2 == PAD_BYTE) {        throw new IOException("Invalid Base64 input: incorrect padding, first two bytes cannot be padding");      }      out.write((b1 << 2) | (b2 >> 4));      outLen++;      if (b3 != PAD_BYTE) {        out.write((b2 << 4) | (b3 >> 2));        outLen++;        if (b4 != PAD_BYTE) {          out.write((b3 << 6) | b4);          outLen++;        }      } else       if (b4 != PAD_BYTE) {        throw new IOException("Invalid Base64 input: incorrect padding, 4th byte must be padding if 3rd byte is");      }      cachedBytes=0;    }  }  if (cachedBytes != 0) {    throw new IOException("Invalid Base64 input: truncated");  }  return outLen;}  }
class C{  @Override public String toString(){  return getRootFile().getAbsolutePath();}  }
class C{  public static ValueDate fromMillis(long ms){  return fromDateValue(DateTimeUtils.dateValueFromDate(ms));}  }
class C{  private Id<DgGreen> createLights(Id<Link> fromLinkId,Id<Lane> fromLaneId,Id<Link> outLinkId,Id<Link> backLinkId,DgCrossingNode inLinkToNode,DgCrossing crossing){  if (backLinkId != null && backLinkId.equals(outLinkId)) {    return null;  }  Id<DgGreen> lightId=this.idConverter.convertFromLinkIdToLinkId2LightId(fromLinkId,fromLaneId,outLinkId);  log.debug("    light id: " + lightId);  Id<Link> convertedOutLinkId=Id.create(this.idConverter.convertLinkId2FromCrossingNodeId(outLinkId),Link.class);  log.debug("    outLinkId : " + outLinkId + " converted id: "+ convertedOutLinkId);  DgCrossingNode outLinkFromNode=crossing.getNodes().get(convertedOutLinkId);  if (outLinkFromNode == null) {    log.error("Crossing " + crossing.getId() + " has no node with id "+ convertedOutLinkId);    throw new IllegalStateException("outLinkFromNode not found.");  }  Collection<DgStreet> crossingLights=crossing.getLights().values();  boolean sameLightExists=false;  for (  DgStreet crossingLight : crossingLights) {    if (crossingLight.getFromNode().equals(inLinkToNode) && crossingLight.getToNode().equals(outLinkFromNode))     sameLightExists=true;  }  if (!sameLightExists) {    DgStreet street=new DgStreet(Id.create(lightId,DgStreet.class),inLinkToNode,outLinkFromNode);    street.setCost(0);    crossing.addLight(street);    return lightId;  }  return null;}  }
class C{  @Override public final java.awt.Shape generateShapeFromPath(final float[][] CTM,final float thickness,final int cmd){  return new java.awt.geom.GeneralPath();}  }
class C{  StyledString createJavadocMethodProposalLabel(CompletionProposal methodProposal){  StyledString nameBuffer=new StyledString();  nameBuffer.append(methodProposal.getCompletion());  nameBuffer.append(QUALIFIER_SEPARATOR,StyledString.QUALIFIER_STYLER);  String declaringType=extractDeclaringTypeFQN(methodProposal);  declaringType=Signature.getSimpleName(declaringType);  nameBuffer.append(declaringType,StyledString.QUALIFIER_STYLER);  return Strings.markJavaElementLabelLTR(nameBuffer);}  }
class C{  public void drain(){  m_nvmasvc.drain(m_nid);}  }
class C{  public void replaceFile(InputStream inputStreamFile,String fileExt){  m_pathFile=null;  m_inputStreamFile=inputStreamFile;  m_fileExt=fileExt;  m_isUpdateFile=true;  if (!isModified())   setEditFlag(FolderEditFlag.UPDATE);}  }
class C{  protected Set<T> buildItemSet(List<Integer> bitIds,Set<T> outItems){  if (outItems == null)   outItems=new HashSet<T>();  if (bitIds == null)   return outItems;  for (  Integer id : bitIds) {    List<T> regionItems=this.items.get(id.toString());    if (regionItems == null)     continue;    for (    T item : regionItems) {      outItems.add(item);    }  }  return outItems;}  }
class C{  public JSONObject put(String key,double value) throws JSONException {  this.put(key,new Double(value));  return this;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static byte[] stringToGsm8BitPacked(String s){  byte[] ret;  int septets=countGsmSeptetsUsingTables(s,true,0,0);  ret=new byte[septets];  stringToGsm8BitUnpackedField(s,ret,0,ret.length);  return ret;}  }
class C{  public void markMetadataChanged(){  this.metadataChangeFlag.setValue(Boolean.TRUE);}  }
class C{  private View makeAndAddView(int position,int childrenBottomOrTop,boolean flow,boolean selected){  View child;  int childrenLeft;  if (!mDataChanged) {    child=mRecycler.getActiveView(position);    if (child != null) {      if (ViewDebug.TRACE_RECYCLER) {        ViewDebug.trace(child,ViewDebug.RecyclerTraceType.RECYCLE_FROM_ACTIVE_HEAP,position,getChildCount());      }      childrenLeft=getItemLeft(position);      setupChild(child,position,childrenBottomOrTop,flow,childrenLeft,selected,true);      return child;    }  }  onItemAddedToList(position,flow);  childrenLeft=getItemLeft(position);  child=obtainView(position,mIsScrap);  setupChild(child,position,childrenBottomOrTop,flow,childrenLeft,selected,mIsScrap[0]);  return child;}  }
class C{  public void addGetters(int assignedPropertyNumber,String propertyName){  for (  EventType type : knownTypes) {    EventPropertyGetter getter=type.getGetter(propertyName);    VariantPropertyGetterRow row=allGetters.get(type);    if (row == null) {synchronized (this) {        row=new VariantPropertyGetterRow(type,new EventPropertyGetter[assignedPropertyNumber + 1]);        allGetters.put(type,row);      }    }    row.addGetter(assignedPropertyNumber,getter);  }  properties.add(propertyName);}  }
class C{  public static boolean isPrimitive(TypeReference ref){  if (ref.dimensions() > 0)   return false;  return PRIMITIVE_TYPE_NAME_PATTERN.matcher(toQualifiedName(ref.getTypeName())).matches();}  }
class C{  public static void copyToClipboard(final ZyGraphNode<?> node){  Preconditions.checkNotNull(node,"Error: Node argument can not be null");  final IZyNodeRealizer realizer=node.getRealizer();  final ZyLabelContent content=realizer.getNodeContent();  if (content.isSelectable()) {    final ZyLabelContent zyContent=content;    final StringBuilder textBuilder=new StringBuilder();    for (    final ZyLineContent zyLineContent : zyContent) {      textBuilder.append(zyLineContent.getText());      textBuilder.append("\n");    }    ClipboardHelpers.copyToClipboard(textBuilder.toString());  }}  }
class C{  private boolean zzRefill() throws java.io.IOException {  if (zzStartRead > 0) {    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);    zzEndRead-=zzStartRead;    zzCurrentPos-=zzStartRead;    zzMarkedPos-=zzStartRead;    zzStartRead=0;  }  if (zzCurrentPos >= zzBuffer.length) {    char newBuffer[]=new char[zzCurrentPos * 2];    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);    zzBuffer=newBuffer;  }  int numRead=zzReader.read(zzBuffer,zzEndRead,zzBuffer.length - zzEndRead);  if (numRead > 0) {    zzEndRead+=numRead;    return false;  }  if (numRead == 0) {    int c=zzReader.read();    if (c == -1) {      return true;    } else {      zzBuffer[zzEndRead++]=(char)c;      return false;    }  }  return true;}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public Integer loadIdNameValues(DbOutputStatement statement,Integer idx) throws Exception {  int index=idx.intValue();  if (_logger.isDebugEnabled())   _logger.debug("loadIdNameValue");  _id=statement.getLongInteger(index++);  _name=statement.getShortText(index++);  return new Integer(index);}  }
class C{  public static final float min(float a,float b,float c){  return (a < b) ? ((a < c) ? a : c) : ((b < c) ? b : c);}  }
class C{  public boolean equals(final Object obj){  if (obj instanceof RFC1960SimpleFilter) {    final RFC1960SimpleFilter filter=(RFC1960SimpleFilter)obj;    return comparator == filter.comparator && id.equals(filter.id) && value.equals(filter.value);  }  return false;}  }
class C{  static public double kn(int nn,double x) throws ArithmeticException {  final double EUL=5.772156649015328606065e-1;  final double MAXNUM=Double.MAX_VALUE;  final int MAXFAC=31;  double k, kf, nk1f, nkf, zn, t, s, z0, z;  double ans, fn, pn, pk, zmn, tlg, tox;  int i, n;  if (nn < 0)   n=-nn; else   n=nn;  if (n > MAXFAC)   throw new ArithmeticException("Overflow");  if (x <= 0.0)   throw new IllegalArgumentException();  if (x <= 9.55) {    ans=0.0;    z0=0.25 * x * x;    fn=1.0;    pn=0.0;    zmn=1.0;    tox=2.0 / x;    if (n > 0) {      pn=-EUL;      k=1.0;      for (i=1; i < n; i++) {        pn+=1.0 / k;        k+=1.0;        fn*=k;      }      zmn=tox;      if (n == 1) {        ans=1.0 / x;      } else {        nk1f=fn / n;        kf=1.0;        s=nk1f;        z=-z0;        zn=1.0;        for (i=1; i < n; i++) {          nk1f=nk1f / (n - i);          kf=kf * i;          zn*=z;          t=nk1f * zn / kf;          s+=t;          if ((MAXNUM - Math.abs(t)) < Math.abs(s))           throw new ArithmeticException("Overflow");          if ((tox > 1.0) && ((MAXNUM / tox) < zmn))           throw new ArithmeticException("Overflow");          zmn*=tox;        }        s*=0.5;        t=Math.abs(s);        if ((zmn > 1.0) && ((MAXNUM / zmn) < t))         throw new ArithmeticException("Overflow");        if ((t > 1.0) && ((MAXNUM / t) < zmn))         throw new ArithmeticException("Overflow");        ans=s * zmn;      }    }    tlg=2.0 * Math.log(0.5 * x);    pk=-EUL;    if (n == 0) {      pn=pk;      t=1.0;    } else {      pn=pn + 1.0 / n;      t=1.0 / fn;    }    s=(pk + pn - tlg) * t;    k=1.0;    do {      t*=z0 / (k * (k + n));      pk+=1.0 / k;      pn+=1.0 / (k + n);      s+=(pk + pn - tlg) * t;      k+=1.0;    } while (Math.abs(t / s) > MACHEP);    s=0.5 * s / zmn;    if ((n & 1) > 0)     s=-s;    ans+=s;    return (ans);  }  if (x > MAXLOG)   throw new ArithmeticException("Underflow");  k=n;  pn=4.0 * k * k;  pk=1.0;  z0=8.0 * x;  fn=1.0;  t=1.0;  s=t;  nkf=MAXNUM;  i=0;  do {    z=pn - pk * pk;    t=t * z / (fn * z0);    nk1f=Math.abs(t);    if ((i >= n) && (nk1f > nkf)) {      ans=Math.exp(-x) * Math.sqrt(Math.PI / (2.0 * x)) * s;      return (ans);    }    nkf=nk1f;    s+=t;    fn+=1.0;    pk+=2.0;    i+=1;  } while (Math.abs(t / s) > MACHEP);  ans=Math.exp(-x) * Math.sqrt(Math.PI / (2.0 * x)) * s;  return (ans);}  }
class C{  public br(String clear_type,String title){  setClear(clear_type);  setTitle(title);}  }
class C{  @Override public String toString(){  return m_Display;}  }
class C{  public EditingGraphMousePlugin(int modifiers,Supplier<V> vertexFactory,Supplier<E> edgeFactory){  super(modifiers);  this.cursor=Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR);  this.vertexSupport=new SimpleVertexSupport<V,E>(vertexFactory);  this.edgeSupport=new SimpleEdgeSupport<V,E>(edgeFactory);}  }
class C{  private int clusterProcessedInstance(Instance instance,boolean updateErrors,boolean useFastDistCalc,long[] instanceCanopies){  double minDist=Integer.MAX_VALUE;  int bestCluster=0;  for (int i=0; i < m_NumClusters; i++) {    double dist;    if (useFastDistCalc) {      if (m_speedUpDistanceCompWithCanopies && instanceCanopies != null && instanceCanopies.length > 0) {        try {          if (!Canopy.nonEmptyCanopySetIntersection(m_centroidCanopyAssignments.get(i),instanceCanopies)) {            continue;          }        } catch (        Exception ex) {          ex.printStackTrace();        }        dist=m_DistanceFunction.distance(instance,m_ClusterCentroids.instance(i),minDist);      } else {        dist=m_DistanceFunction.distance(instance,m_ClusterCentroids.instance(i),minDist);      }    } else {      dist=m_DistanceFunction.distance(instance,m_ClusterCentroids.instance(i));    }    if (dist < minDist) {      minDist=dist;      bestCluster=i;    }  }  if (updateErrors) {    if (m_DistanceFunction instanceof EuclideanDistance) {      minDist*=minDist * instance.weight();    }    m_squaredErrors[bestCluster]+=minDist;  }  return bestCluster;}  }
class C{  public Address fax(Phone fax){  this.fax=fax;  return this;}  }
class C{  private synchronized void invokeReadAheadCallback(){  if (null != readAheadCallback) {    if (LOG.isTraceEnabled()) {      LOG.trace("Cache has space, schedule the read ahead");    }    readAheadCallback.resumeReadAhead();    readAheadCallback=null;  }}  }
class C{  private View createCustomViewInternal(View parent,View view,String name,Context viewContext,AttributeSet attrs) throws Exception {  if (view == null && name.indexOf('.') > -1) {    if (mConstructorArgs == null)     mConstructorArgs=ReflectionUtils.getField(LayoutInflater.class,"mConstructorArgs");    final Object[] mConstructorArgsArr=(Object[])ReflectionUtils.getValue(mConstructorArgs,this);    final Object lastContext=mConstructorArgsArr[0];    mConstructorArgsArr[0]=viewContext;    ReflectionUtils.setValue(mConstructorArgs,this,mConstructorArgsArr);    try {      view=createView(name,null,attrs);    } catch (    ClassNotFoundException ignored) {    } finally {      mConstructorArgsArr[0]=lastContext;      ReflectionUtils.setValue(mConstructorArgs,this,mConstructorArgsArr);    }  }  return view;}  }
class C{  public String toPattern(){  return pattern;}  }
class C{  public void removeHandler(Handler handler){  if (this.isNamed) {    LogManager.getLogManager().checkAccess();  }  if (handler == null) {    return;  }  this.handlers.remove(handler);  updateDalvikLogHandler();}  }
class C{  private CTrackingResultsHighlighter(){}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) @Test public void testNodeProcessing(){  LineTokenizerKeyVal oper=new LineTokenizerKeyVal();  HashTestSink tokenSink=new HashTestSink();  oper.setSplitBy(",");  oper.setSplitTokenBy("=");  oper.tokens.setSink(tokenSink);  oper.beginWindow(0);  String input1="a=2,b=3,c=4";  String input2="d=2";  String input3="";  int numTuples=1000;  for (int i=0; i < numTuples; i++) {    oper.data.process(input1);    oper.data.process(input2);    oper.data.process(input3);  }  oper.endWindow();  Assert.assertEquals("number emitted tuples",2,tokenSink.map.size());  HashMap<Object,Object> smap=tokenSink.map;  for (  Map.Entry<Object,Object> e : smap.entrySet()) {    HashMap<String,String> kmap=(HashMap<String,String>)e.getKey();    for (    Map.Entry<String,String> o : kmap.entrySet()) {      String key=o.getKey();      String val=o.getValue();      if (key.equals("a")) {        Assert.assertEquals("value of \"a\"","2",val);      } else       if (key.equals("b")) {        Assert.assertEquals("value of \"b\"","3",val);      } else       if (key.equals("c")) {        Assert.assertEquals("value of \"c\"","4",val);      } else       if (key.equals("d")) {        Assert.assertEquals("value of \"d\"","2",val);      }    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public long manhattanDistance(final Int3D p){  return Math.abs((long)this.x - p.x) + Math.abs((long)this.y - p.y) + Math.abs((long)this.z - p.z);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MPInstancePara[").append(get_ID()).append("-").append(getParameterName());  if (getP_String() != null) {    sb.append("(s)=").append(getP_String());    if (getP_String_To() != null)     sb.append(" - ").append(getP_String_To());  }  BigDecimal bd=(BigDecimal)get_Value("P_Number");  if (bd != null) {    sb.append("(n)=").append(bd);    BigDecimal bd2=(BigDecimal)get_Value("P_Number_To");    if (bd2 != null)     sb.append(" - ").append(bd2);  }  if (getP_Date() != null) {    sb.append("(d)=").append(getP_Date());    if (getP_Date_To() != null)     sb.append(" - ").append(getP_Date_To());  }  sb.append("]");  return sb.toString();}  }
class C{  public DoubleMatrix(){}  }
class C{  public Boolean isIncompleteExtents(){  return incompleteExtents;}  }
class C{  public static void fill(long[] array,long value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public boolean supportsCustomEditor(){  return false;}  }
class C{  public boolean isInSegment(double angle){  if (angle >= mStartAngle && angle <= mEndAngle) {    return true;  }  double cAngle=angle % 360;  double startAngle=mStartAngle;  double stopAngle=mEndAngle;  while (stopAngle > 360) {    startAngle-=360;    stopAngle-=360;  }  return cAngle >= startAngle && cAngle <= stopAngle;}  }
class C{  public void train(String savename) throws IOException {  System.out.println("Starting KLUE Train");  System.out.println("Tweets: " + tweetList.size());  Tagger tagger=new Tagger();  tagger.loadModel("resources/tagger/model.20120919.txt");  Map<String,Double> afinnLexi=this.loadAFINN();  int featurecount=0;  Map<String,Integer> nGramMap=new HashMap<String,Integer>();  ArrayList<Attribute> attributeList=new ArrayList<Attribute>();  for (  Tweet tweet : tweetList) {    this.preProcessTweet(tweet);    this.tokenizeAndTag(tagger,tweet);    this.negate(tweet);    Set<String> nGramSet=this.getNGrams(tweet,2);    for (    String nGram : nGramSet) {      if (!nGramMap.containsKey(nGram)) {        nGramMap.put(nGram,featurecount++);        attributeList.add(new Attribute("NGRAM_" + nGram));      }    }  }  Attribute sentiAFINNPos=new Attribute("sentiAFINNPos");  attributeList.add(sentiAFINNPos);  featurecount++;  Attribute sentiAFINNNeg=new Attribute("sentiAFINNNeg");  attributeList.add(sentiAFINNNeg);  featurecount++;  Attribute sentiAFINNTotal=new Attribute("sentiAFINNTotal");  attributeList.add(sentiAFINNTotal);  featurecount++;  Attribute sentiAFINNScore=new Attribute("sentiAFINNScore");  attributeList.add(sentiAFINNScore);  featurecount++;  Attribute sentiEmoPos=new Attribute("sentiEmoPos");  attributeList.add(sentiEmoPos);  featurecount++;  Attribute sentiEmoNeg=new Attribute("sentiEmoNeg");  attributeList.add(sentiEmoNeg);  featurecount++;  Attribute sentiEmoTotal=new Attribute("sentiEmoTotal");  attributeList.add(sentiEmoTotal);  featurecount++;  Attribute sentiEmoScore=new Attribute("sentiEmoScore");  attributeList.add(sentiEmoScore);  featurecount++;  Attribute tokenCount=new Attribute("tokenCount");  attributeList.add(tokenCount);  featurecount++;  ArrayList<String> fvClassVal=new ArrayList<String>();  fvClassVal.add("positive");  fvClassVal.add("neutral");  fvClassVal.add("negative");  Attribute classAttribute=new Attribute("Class",fvClassVal);  attributeList.add(classAttribute);  featurecount++;  Instances trainingSet=new Instances("test",attributeList,tweetList.size());  trainingSet.setClassIndex(classAttribute.index());  for (  Tweet tweet : tweetList) {    SparseInstance instance=new SparseInstance(0);    Set<String> nGramSet=tweet.getnGramList();    for (    String nGram : nGramSet) {      Integer index=nGramMap.get(nGram);      if (index != null) {        instance.setValue(index,1);      }    }    List<Double> afinnScore=this.getAFINNScore(afinnLexi,tweet.getStemList());    instance.setValue(sentiAFINNPos,afinnScore.get(0));    instance.setValue(sentiAFINNNeg,afinnScore.get(1));    instance.setValue(sentiAFINNTotal,afinnScore.get(2));    instance.setValue(sentiAFINNScore,afinnScore.get(3));    List<Double> emoScore=this.getEmoScore(tweet);    instance.setValue(sentiEmoPos,emoScore.get(0));    instance.setValue(sentiEmoNeg,emoScore.get(1));    instance.setValue(sentiEmoTotal,emoScore.get(2));    instance.setValue(sentiEmoScore,emoScore.get(3));    instance.setValue(tokenCount,tweet.getWordList().size());    instance.setValue(classAttribute,tweet.getSentiment());    trainingSet.add(instance);  }  ArffSaver saver=new ArffSaver();  saver.setInstances(trainingSet);  saver.setFile(new File("resources/arff/Trained-Features-KLUE" + savename + ".arff"));  saver.writeBatch();  System.out.println("Trained-Features-KLUE" + savename + " saved");}  }
class C{  public boolean isConnected(int first,int second){  return find(first) == find(second);}  }
class C{  public void testOpenWithChecksumFailure() throws Exception {  File logDir=prepareLogDir("testOpenWithChecksumFailure");  DiskLog log=openLog(logDir,false);  writeEventsToLog(log,3);  LogFile lf=log.getLogFile(2);  RandomAccessFile raf=new RandomAccessFile(lf.getFile(),"rw");  long len=raf.length();  raf.seek(len - 8);  raf.writeLong(99);  raf.close();  log.release();  try {    log=openLog(logDir,false);    throw new Exception("Able to open log with bad checksum!");  } catch (  LogConsistencyException e) {    logger.info("Received expected exception" + e.toString());  }  findSeqnoWithoutChecksums(logDir,2);}  }
class C{  public RFC822Name(DerValue derValue) throws IOException {  name=derValue.getIA5String();  parseName(name);}  }
class C{  public void putLenString(String s){  if (s == null) {    putFieldLength(0);  } else {    byte[] b=s.getBytes();    ensureCapacity(9 + b.length);    putFieldLength(b.length);    System.arraycopy(b,0,this.byteBuffer,this.position,b.length);    this.position+=b.length;  }}  }
class C{  public static IProject createProject(String projectName) throws CoreException {  IWorkspaceRoot workspaceRoot=ResourcesPlugin.getWorkspace().getRoot();  IProject project=workspaceRoot.getProject(projectName);  if (project.exists()) {    throw new IllegalStateException("Project " + projectName + " already exists in this workspace");  }  IProgressMonitor monitor=new NullProgressMonitor();  BuildPathsBlock.createProject(project,project.getLocationURI(),monitor);  return project;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void contextDestroyed(ServletContextEvent event){  logger.info("Finished to shutdown all thread pools.");}  }
class C{  public ByteBuffer dataBuffer(){  finished();  return bb;}  }
class C{  public void addContent(Component header,Component body){  add(new AccordionContent(header,body));}  }
class C{  public SendableDocumentMessage.SendableDocumentMessageBuilder document(InputFile document){  this.document=document;  return this;}  }
class C{  public JSONObject run(){  try {    URL url=new URL(JsonRequest.this.url);    HttpURLConnection connection=(HttpURLConnection)url.openConnection();    connection.setUseCaches(false);    connection.connect();    InputStream responseStream=connection.getInputStream();    String response=Utils.readStream(responseStream);    return new JSONObject(response);  } catch (  java.io.IOException|JSONException e) {    FreshAirLog.e("Error executing JSONRequest",e);    return null;  }}  }
class C{  public static boolean isUnknown(PngChunk c){  return c instanceof PngChunkUNKNOWN;}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  private DefaultWorldIconTypes hasSuitableIslandFoundation(int chunkX,int chunkY,List<EndIsland> endIslands){  DefaultWorldIconTypes result=null;  for (  EndIsland island : endIslands) {    float influence=island.influenceAtChunk(chunkX,chunkY);    if (influence >= REQUIRED_INFLUENCE) {      return DefaultWorldIconTypes.END_CITY;    } else     if (influence >= 0) {      result=DefaultWorldIconTypes.POSSIBLE_END_CITY;    }  }  return result;}  }
class C{  public static int toRealPosition(int position,int count){  position=position - 1;  if (position < 0) {    position+=count;  } else {    position=position % count;  }  return position;}  }
class C{  public String read(){  return fmt.read();}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case EipPackage.TRANSFORMER__TO_CHANNELS:    return ((InternalEList<?>)getToChannels()).basicRemove(otherEnd,msgs);case EipPackage.TRANSFORMER__FROM_CHANNELS:  return ((InternalEList<?>)getFromChannels()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static byte[] string2utf(String s){  return chars2utf(s.toCharArray());}  }
class C{  public long addCompletedDownload(String title,String description,boolean isMediaScannerScannable,String mimeType,String path,long length,boolean showNotification){  validateArgumentIsNonEmpty("title",title);  validateArgumentIsNonEmpty("description",description);  validateArgumentIsNonEmpty("path",path);  validateArgumentIsNonEmpty("mimeType",mimeType);  if (length < 0) {    throw new IllegalArgumentException(" invalid value for param: totalBytes");  }  Request request=new Request(NON_DOWNLOADMANAGER_DOWNLOAD).setTitle(title).setDescription(description).setMimeType(mimeType).setNotificationVisibility(showNotification ? NotificationVisibility.ONLY_WHEN_COMPLETE : NotificationVisibility.HIDDEN);  if (isMediaScannerScannable) {    request.allowScanningByMediaScanner();  }  return addCompletedBatch(request.asBatch());}  }
class C{  public String sendMsgWaitingEmail(int count,String dest) throws SmsException, IOException {  return sendMsgWaiting(MwiType.EMAIL,count,dest);}  }
class C{  public static String[] quotedSplit(String line,Pattern separatorPattern,char quotingChar,char escapeChar){  int[] quoteSplitIndices=new int[line.length()];  char lastChar='0';  int lastSplitIndex=-1;  for (int i=0; i < line.length(); i++) {    char currentChar=line.charAt(i);    if (currentChar == quotingChar) {      boolean escaped=false;      if (i != 0 && lastChar == escapeChar) {        escaped=true;      }      if (!escaped) {        quoteSplitIndices[++lastSplitIndex]=i;      }    }    lastChar=currentChar;  }  List<String> quotedSplits=new LinkedList<>();  if (lastSplitIndex < 0) {    line=line.replaceAll("\\\\\"","\"");    quotedSplits.add(line);  } else {    int start=0;    for (int i=0; i <= lastSplitIndex; i++) {      int end=quoteSplitIndices[i];      String part="";      if (end > start) {        part=line.substring(start,end);      }      part=part.replaceAll("\\\\\"","\"");      quotedSplits.add(part);      start=end + 1;    }    if (start < line.length()) {      String part=line.substring(start);      part=part.replaceAll("\\\\\"","\"");      quotedSplits.add(part);    }  }  List<String> result=new LinkedList<>();  boolean isSplitPart=true;  int index=0;  for (  String part : quotedSplits) {    if (index > 0 || part.trim().length() > 0) {      if (isSplitPart) {        String[] separatedParts=separatorPattern.split(part,-1);        for (int s=0; s < separatedParts.length; s++) {          String currentPart=separatedParts[s].trim();          if (currentPart.length() == 0) {            if (s == 0 && index == 0) {              result.add(currentPart);            } else             if (s == separatedParts.length - 1 && index == quotedSplits.size() - 1) {              result.add(currentPart);            } else             if (s > 0 && s < separatedParts.length - 1) {              result.add(currentPart);            }          } else {            result.add(currentPart);          }        }      } else {        result.add(part);      }    }    isSplitPart=!isSplitPart;    index++;  }  String[] resultArray=new String[result.size()];  result.toArray(resultArray);  return resultArray;}  }
class C{  public void rm(String fileName) throws IOException {  int req_id=generateNextRequestID();  TypesWriter tw=new TypesWriter();  tw.writeString(fileName,charsetName);  sendMessage(Packet.SSH_FXP_REMOVE,req_id,tw.getBytes());  expectStatusOKMessage(req_id);}  }
class C{  public void testRemoveAllPartial(){  Trie remove=buildTrie(m_Data[0]);  Trie clone=(Trie)m_Trie.clone();  m_Trie.removeAll(remove);  assertEquals("Removing of 1 string",clone.size(),m_Trie.size() + 1);}  }
class C{  public Boolean isRTPTCP(){  return rtptcp;}  }
class C{  public static int nextSmallerPrime(int n){  if (n <= 2) {    return 1;  }  if (n == 3) {    return 2;  }  if ((n & 1) == 0) {    n--;  } else {    n-=2;  }  while (n > 3 & !isPrime(n)) {    n-=2;  }  return n;}  }
class C{  public T5(V1 v1,V2 v2,V3 v3,V4 v4,V5 v5){  super(v1,v2,v3,v4,v5);}  }
class C{  @Override public boolean isEnabled(){  return this.enabled;}  }
class C{  public void encodeParity(byte[][] shards,int offset,int byteCount){  checkBuffersAndSizes(shards,offset,byteCount);  byte[][] outputs=new byte[parityShardCount][];  System.arraycopy(shards,dataShardCount,outputs,0,parityShardCount);  codingLoop.codeSomeShards(parityRows,shards,dataShardCount,outputs,parityShardCount,offset,byteCount);}  }
class C{  @SuppressWarnings("unchecked") public static <T>Predicate<T> alwaysFalse(){  return (Predicate<T>)FALSE;}  }
class C{  private boolean isDecoLeft(){switch (quadrant) {case IDecoration.TOP_LEFT:case IDecoration.BOTTOM_LEFT:    return true;default :  return false;}}  }
class C{  @Override public boolean hasActiveECM(){  if (!game.getOptions().booleanOption("stratops_ecm") || !game.getBoard().inSpace()) {    return super.hasActiveECM();  }  return getECMRange() >= 0;}  }
class C{  public boolean isUnpaired(){  for (  int id : clusterIds) {    if (id == UNCLUSTERED) {      return true;    }  }  return false;}  }
class C{  public FilteredWarmEmissionHandler(final double simulationEndTime,final int noOfTimeBins,final Network network,final AreaFilter areaFilter){  this(simulationEndTime,noOfTimeBins,null,null,network,areaFilter);  LOGGER.info("Area filtering is used, result will include links falls inside the given shape and persons from all user groups.");}  }
class C{  public ToplevelPane(GhciSession ghci){  super();  this.attachedBlocks=new HashSet<>();  this.bottomLayer=new Pane();  this.blockLayer=new Pane(this.bottomLayer);  this.wireLayer=new Pane(this.blockLayer);  this.getChildren().add(this.wireLayer);  this.ghci=ghci;  TouchContext context=new TouchContext(this,true);  context.setPanningAction(null);}  }
class C{  public static void clearClientCredentials(Context context){  SharedPreferences mainPref=context.getSharedPreferences(Constants.PACKAGE_NAME,Context.MODE_PRIVATE);  Editor editor=mainPref.edit();  editor.putString(Constants.CLIENT_ID,null);  editor.putString(Constants.CLIENT_SECRET,null);  editor.commit();}  }
class C{  public static int psfFirmwareVersionToInt(String firmwareVersion){  int version=Emulator.getInstance().getFirmwareVersion();  if (firmwareVersion != null) {    while (!Character.isDigit(firmwareVersion.charAt(firmwareVersion.length() - 1))) {      firmwareVersion=firmwareVersion.substring(0,firmwareVersion.length() - 1);    }    version=(int)(Float.parseFloat(firmwareVersion) * 100);    if (version < 150) {      version=150;    }  }  return version;}  }
class C{  public void add(RegularTimePeriod period,BigDecimal pivotPrice,String pivotSide){  if (!this.isEmpty()) {    PivotItem item0=(PivotItem)this.getDataItem(0);    if (!period.getClass().equals(item0.getPeriod().getClass())) {      throw new IllegalArgumentException("Can't mix RegularTimePeriod class types.");    }  }  super.add(new PivotItem(period,pivotPrice,pivotSide),true);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public boolean hasNonExecutedStatements(){  return getNonExecutedIndex() != -1;}  }
class C{  private void readReference(){  String sql;  if (Env.isBaseLanguage(Env.getCtx(),"AD_Ref_List"))   sql="SELECT Value, Name, Description FROM AD_Ref_List " + "WHERE AD_Reference_ID=135 ORDER BY Name"; else   sql="SELECT l.Value, t.Name, t.Description " + "FROM AD_Ref_List l, AD_Ref_List_Trl t " + "WHERE l.AD_Ref_List_ID=t.AD_Ref_List_ID"+ " AND t.AD_Language='" + Env.getAD_Language(Env.getCtx()) + "'"+ " AND l.AD_Reference_ID=135 ORDER BY t.Name";  ArrayList<String> v_value=new ArrayList<String>();  ArrayList<String> v_name=new ArrayList<String>();  ArrayList<String> v_description=new ArrayList<String>();  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      String value=rs.getString(1);      String name=rs.getString(2);      String description=rs.getString(3);      if (description == null)       description="";      v_value.add(value);      v_name.add(name);      v_description.add(description);    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }  int size=v_value.size();  s_value=new String[size];  s_name=new String[size];  s_description=new String[size];  for (int i=0; i < size; i++) {    s_value[i]=(String)v_value.get(i);    s_name[i]=(String)v_name.get(i);    s_description[i]=(String)v_description.get(i);  }}  }
class C{  public boolean isMult(){  return m_isMult;}  }
class C{  public boolean isCustomDataPath(){  return isCustomDataPath;}  }
class C{  public synchronized RegularTimePeriod advanceTime(){  RegularTimePeriod nextInstant=this.pointsInTime[this.newestAt].next();  this.newestAt=this.oldestAt;  boolean extremaChanged=false;  float oldMax=0.0f;  if (this.maxValue != null) {    oldMax=this.maxValue.floatValue();  }  for (int s=0; s < getSeriesCount(); s++) {    if (this.valueHistory[s].getData(this.oldestAt) == oldMax) {      extremaChanged=true;    }    if (extremaChanged) {      break;    }  }  if (extremaChanged) {    invalidateRangeInfo();  }  float wiper=(float)0.0;  for (int s=0; s < getSeriesCount(); s++) {    this.valueHistory[s].enterData(this.newestAt,wiper);  }  this.pointsInTime[this.newestAt]=nextInstant;  this.oldestAt++;  if (this.oldestAt >= this.historyCount) {    this.oldestAt=0;  }  long startL=this.domainStart.longValue();  this.domainStart=new Long(startL + this.deltaTime);  long endL=this.domainEnd.longValue();  this.domainEnd=new Long(endL + this.deltaTime);  this.domainRange=new Range(startL,endL);  fireSeriesChanged();  return nextInstant;}  }
class C{  public ConnectionTcp findConnectionByThreadId(long threadId){  for (  PortTcp listener : getPorts()) {    ConnectionTcp conn=listener.findConnectionByThreadId(threadId);    if (conn != null)     return conn;  }  return null;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void acceptClassifier(BatchClassifierEvent e){  if (m_dataSourceListeners.size() > 0 || m_trainingSetListeners.size() > 0 || m_testSetListeners.size() > 0) {    if (e.getTestSet() == null) {      return;    }    if ((e.getTestSet().isStructureOnly() || e.getTestSet().getDataSet().numInstances() == 0) && e.getTestSet().getDataSet().classIndex() < 0) {      return;    }    if (e.getTestSet().getDataSet().classIndex() < 0) {      if (m_logger != null) {        m_logger.logMessage("[PredictionAppender] " + statusMessagePrefix() + "No class attribute set in the data!");        m_logger.statusMessage(statusMessagePrefix() + "ERROR: Can't append probablities - see log.");      }      stop();      return;    }    Instances testSet=e.getTestSet().getDataSet();    Instances trainSet=e.getTrainSet().getDataSet();    int setNum=e.getSetNumber();    int maxNum=e.getMaxSetNumber();    weka.classifiers.Classifier classifier=e.getClassifier();    String relationNameModifier="_set_" + e.getSetNumber() + "_of_"+ e.getMaxSetNumber();    if (!m_appendProbabilities || testSet.classAttribute().isNumeric()) {      try {        Instances newTestSetInstances=makeDataSetClass(testSet,trainSet,classifier,relationNameModifier);        Instances newTrainingSetInstances=makeDataSetClass(trainSet,trainSet,classifier,relationNameModifier);        if (m_trainingSetListeners.size() > 0) {          TrainingSetEvent tse=new TrainingSetEvent(this,new Instances(newTrainingSetInstances,0));          tse.m_setNumber=setNum;          tse.m_maxSetNumber=maxNum;          notifyTrainingSetAvailable(tse);          for (int i=0; i < trainSet.numInstances(); i++) {            double predClass=classifier.classifyInstance(trainSet.instance(i));            newTrainingSetInstances.instance(i).setValue(newTrainingSetInstances.numAttributes() - 1,predClass);          }          tse=new TrainingSetEvent(this,newTrainingSetInstances);          tse.m_setNumber=setNum;          tse.m_maxSetNumber=maxNum;          notifyTrainingSetAvailable(tse);        }        if (m_testSetListeners.size() > 0) {          TestSetEvent tse=new TestSetEvent(this,new Instances(newTestSetInstances,0));          tse.m_setNumber=setNum;          tse.m_maxSetNumber=maxNum;          notifyTestSetAvailable(tse);        }        if (m_dataSourceListeners.size() > 0) {          notifyDataSetAvailable(new DataSetEvent(this,new Instances(newTestSetInstances,0)));        }        if (e.getTestSet().isStructureOnly()) {          m_format=newTestSetInstances;        }        if (m_dataSourceListeners.size() > 0 || m_testSetListeners.size() > 0) {          for (int i=0; i < testSet.numInstances(); i++) {            Instance tempInst=testSet.instance(i);            if (tempInst.isMissing(tempInst.classIndex()) && !(classifier instanceof weka.classifiers.misc.InputMappedClassifier)) {              tempInst=(Instance)testSet.instance(i).copy();              tempInst.setDataset(trainSet);            }            double predClass=classifier.classifyInstance(tempInst);            newTestSetInstances.instance(i).setValue(newTestSetInstances.numAttributes() - 1,predClass);          }        }        if (m_testSetListeners.size() > 0) {          TestSetEvent tse=new TestSetEvent(this,newTestSetInstances);          tse.m_setNumber=setNum;          tse.m_maxSetNumber=maxNum;          notifyTestSetAvailable(tse);        }        if (m_dataSourceListeners.size() > 0) {          notifyDataSetAvailable(new DataSetEvent(this,newTestSetInstances));        }        return;      } catch (      Exception ex) {        ex.printStackTrace();      }    }    if (m_appendProbabilities) {      try {        Instances newTestSetInstances=makeDataSetProbabilities(testSet,trainSet,classifier,relationNameModifier);        Instances newTrainingSetInstances=makeDataSetProbabilities(trainSet,trainSet,classifier,relationNameModifier);        if (m_trainingSetListeners.size() > 0) {          TrainingSetEvent tse=new TrainingSetEvent(this,new Instances(newTrainingSetInstances,0));          tse.m_setNumber=setNum;          tse.m_maxSetNumber=maxNum;          notifyTrainingSetAvailable(tse);          for (int i=0; i < trainSet.numInstances(); i++) {            double[] preds=classifier.distributionForInstance(trainSet.instance(i));            for (int j=0; j < trainSet.classAttribute().numValues(); j++) {              newTrainingSetInstances.instance(i).setValue(trainSet.numAttributes() + j,preds[j]);            }          }          tse=new TrainingSetEvent(this,newTrainingSetInstances);          tse.m_setNumber=setNum;          tse.m_maxSetNumber=maxNum;          notifyTrainingSetAvailable(tse);        }        if (m_testSetListeners.size() > 0) {          TestSetEvent tse=new TestSetEvent(this,new Instances(newTestSetInstances,0));          tse.m_setNumber=setNum;          tse.m_maxSetNumber=maxNum;          notifyTestSetAvailable(tse);        }        if (m_dataSourceListeners.size() > 0) {          notifyDataSetAvailable(new DataSetEvent(this,new Instances(newTestSetInstances,0)));        }        if (e.getTestSet().isStructureOnly()) {          m_format=newTestSetInstances;        }        if (m_dataSourceListeners.size() > 0 || m_testSetListeners.size() > 0) {          for (int i=0; i < testSet.numInstances(); i++) {            Instance tempInst=testSet.instance(i);            if (tempInst.isMissing(tempInst.classIndex()) && !(classifier instanceof weka.classifiers.misc.InputMappedClassifier)) {              tempInst=(Instance)testSet.instance(i).copy();              tempInst.setDataset(trainSet);            }            double[] preds=classifier.distributionForInstance(tempInst);            for (int j=0; j < tempInst.classAttribute().numValues(); j++) {              newTestSetInstances.instance(i).setValue(testSet.numAttributes() + j,preds[j]);            }          }        }        if (m_testSetListeners.size() > 0) {          TestSetEvent tse=new TestSetEvent(this,newTestSetInstances);          tse.m_setNumber=setNum;          tse.m_maxSetNumber=maxNum;          notifyTestSetAvailable(tse);        }        if (m_dataSourceListeners.size() > 0) {          notifyDataSetAvailable(new DataSetEvent(this,newTestSetInstances));        }      } catch (      Exception ex) {        ex.printStackTrace();      }    }  }}  }
class C{  private void removeInstancesFromContainers(ArrayList<Container> containers,Map<Integer,List<InstanceId>> allocation,Map<String,Integer> componentsToScaleDown){  ArrayList<RamRequirement> ramRequirements=getSortedRAMInstances(componentsToScaleDown);  for (  RamRequirement ramRequirement : ramRequirements) {    String component=ramRequirement.getComponentName();    int numInstancesToRemove=-componentsToScaleDown.get(component);    for (int j=0; j < numInstancesToRemove; j++) {      Pair<Integer,InstanceId> idPair=removeFFDInstance(containers,component);      List<InstanceId> instances=allocation.get(idPair.first);      instances.remove(idPair.second);      allocation.put(idPair.first,instances);    }  }}  }
class C{  public Channel basicGetChannel(){  return channel;}  }
class C{  Date toDate(Calendar calendar){  return calendar.getTime();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static int codePointBefore(char[] seq,int index,int start){  if (seq == null) {    throw new NullPointerException();  }  int len=seq.length;  if (index <= start || index > len || start < 0 || start >= len) {    throw new IndexOutOfBoundsException();  }  char low=seq[--index];  if (--index < start) {    return low;  }  char high=seq[index];  if (isSurrogatePair(high,low)) {    return toCodePoint(high,low);  }  return low;}  }
class C{  public static KeyID findKeyID(int keyCode){  for (int i=0; i < idCode.length; ++i) {    if (keyCode == idCode[i]) {      return (KeyID.values()[i]);    }  }  return (null);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node entRef;  Node entText;  Node createdNode;  Node replacedChild;  doc=(Document)load("staff",true);  entRef=doc.createEntityReference("ent4");  assertNotNull("createdEntRefNotNull",entRef);  entText=entRef.getFirstChild();  createdNode=doc.createElement("newChild");{    boolean success=false;    try {      replacedChild=entRef.replaceChild(createdNode,entText);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case GamlPackage.UNIT_NAME__REF:    setRef((UnitFakeDefinition)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  protected CC buildCC(int s[],Instances D) throws Exception {  CC h=new CC();  h.prepareChain(s);  h.setClassifier(m_Classifier);  h.buildClassifier(new Instances(D));  return h;}  }
class C{  public boolean verify(String hostname,javax.net.ssl.SSLSession session){  return (true);}  }
class C{  public void testComplexObject() throws Exception {  FixtureObject aTestObj=new FixtureObject();  ObjectMapper aMapper=new ObjectMapper();  StringWriter aWriter=new StringWriter();  JsonGenerator aGen=new JsonFactory().createJsonGenerator(aWriter);  aMapper.writeValue(aGen,aTestObj);  aGen.close();  JsonParser jp=new JsonFactory().createJsonParser(new StringReader(aWriter.toString()));  assertEquals(JsonToken.START_OBJECT,jp.nextToken());  while (jp.nextToken() != JsonToken.END_OBJECT) {    assertEquals(JsonToken.FIELD_NAME,jp.getCurrentToken());    String name=jp.getCurrentName();    JsonToken t=jp.nextToken();    if (name.equals("uri")) {      assertToken(JsonToken.VALUE_STRING,t);      assertEquals(FixtureObject.VALUE_URSTR,getAndVerifyText(jp));    } else     if (name.equals("url")) {      assertToken(JsonToken.VALUE_STRING,t);      assertEquals(FixtureObject.VALUE_URSTR,getAndVerifyText(jp));    } else     if (name.equals("testNull")) {      assertToken(JsonToken.VALUE_NULL,t);    } else     if (name.equals("testString")) {      assertToken(JsonToken.VALUE_STRING,t);      assertEquals(FixtureObject.VALUE_STRING,getAndVerifyText(jp));    } else     if (name.equals("testBoolean")) {      assertToken(JsonToken.VALUE_TRUE,t);    } else     if (name.equals("testEnum")) {      assertToken(JsonToken.VALUE_STRING,t);      assertEquals(FixtureObject.VALUE_ENUM.toString(),getAndVerifyText(jp));    } else     if (name.equals("testInteger")) {      assertToken(JsonToken.VALUE_NUMBER_INT,t);      assertEquals(jp.getIntValue(),FixtureObject.VALUE_INT);    } else     if (name.equals("testLong")) {      assertToken(JsonToken.VALUE_NUMBER_INT,t);      assertEquals(jp.getLongValue(),FixtureObject.VALUE_LONG);    } else     if (name.equals("testBigInteger")) {      assertToken(JsonToken.VALUE_NUMBER_INT,t);      assertEquals(jp.getLongValue(),FixtureObject.VALUE_BIGINT.longValue());    } else     if (name.equals("testBigDecimal")) {      assertToken(JsonToken.VALUE_NUMBER_FLOAT,t);      assertEquals(jp.getText(),FixtureObject.VALUE_BIGDEC.toString());    } else     if (name.equals("testCharacter")) {      assertToken(JsonToken.VALUE_STRING,t);      assertEquals(String.valueOf(FixtureObject.VALUE_CHAR),getAndVerifyText(jp));    } else     if (name.equals("testShort")) {      assertToken(JsonToken.VALUE_NUMBER_INT,t);      assertEquals(jp.getIntValue(),FixtureObject.VALUE_SHORT);    } else     if (name.equals("testByte")) {      assertToken(JsonToken.VALUE_NUMBER_INT,t);      assertEquals(jp.getIntValue(),FixtureObject.VALUE_BYTE);    } else     if (name.equals("testFloat")) {      assertToken(JsonToken.VALUE_NUMBER_FLOAT,t);      assertEquals(jp.getDecimalValue().floatValue(),FixtureObject.VALUE_FLOAT);    } else     if (name.equals("testDouble")) {      assertToken(JsonToken.VALUE_NUMBER_FLOAT,t);      assertEquals(jp.getDoubleValue(),FixtureObject.VALUE_DBL);    } else     if (name.equals("testStringBuffer")) {      assertToken(JsonToken.VALUE_STRING,t);      assertEquals(FixtureObject.VALUE_STRING,getAndVerifyText(jp));    } else     if (name.equals("testError")) {      assertToken(JsonToken.START_OBJECT,t);      while (jp.nextToken() == JsonToken.FIELD_NAME) {        name=jp.getCurrentName();        if (name.equals("cause")) {          assertEquals(JsonToken.VALUE_NULL,jp.nextToken());        } else         if (name.equals("message")) {          assertEquals(JsonToken.VALUE_STRING,jp.nextToken());          assertEquals(FixtureObject.VALUE_ERRTXT,getAndVerifyText(jp));        } else         if (name.equals("localizedMessage")) {          assertEquals(JsonToken.VALUE_STRING,jp.nextToken());        } else         if (name.equals("stackTrace")) {          assertEquals(JsonToken.START_ARRAY,jp.nextToken());          int i=0;          while (jp.nextToken() != JsonToken.END_ARRAY) {            if (i >= 100000) {              assertTrue("Probably run away loop in test. StackTrack Array was not properly closed.",false);            }          }        } else {          fail("Unexpected field name '" + name + "'");        }      }      assertEquals(JsonToken.END_OBJECT,jp.getCurrentToken());    } else {      fail("Unexpected field, name '" + name + "'");    }  }  assertNull(jp.nextToken());}  }
class C{  public int size(){  return prefixes.size();}  }
class C{  public NotificationChain basicSetDeclaredName(LiteralOrComputedPropertyName newDeclaredName,NotificationChain msgs){  LiteralOrComputedPropertyName oldDeclaredName=declaredName;  declaredName=newDeclaredName;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.PROPERTY_ASSIGNMENT__DECLARED_NAME,oldDeclaredName,newDeclaredName);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public Map<String,Object> addCategoryDefaults(String catalogId,String categoryId,String itemGroupNumber){  ArrayList<String> errorMsgs=new ArrayList<String>();  Map<String,Object> result=null;  String errMsg=null;  if (categoryId == null || categoryId.length() <= 0) {    errMsg=UtilProperties.getMessage(resource_error,"cart.category_not_specified_to_add_from",this.cart.getLocale());    result=ServiceUtil.returnError(errMsg);    return result;  }  Collection<GenericValue> prodCatMemberCol=null;  try {    prodCatMemberCol=EntityQuery.use(delegator).from("ProductCategoryMember").where("productCategoryId",categoryId).cache(true).queryList();  } catch (  GenericEntityException e) {    Debug.logWarning(e.toString(),module);    Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("categoryId",categoryId);    messageMap.put("message",e.getMessage());    errMsg=UtilProperties.getMessage(resource_error,"cart.could_not_get_products_in_category_cart",messageMap,this.cart.getLocale());    result=ServiceUtil.returnError(errMsg);    return result;  }  if (prodCatMemberCol == null) {    Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("categoryId",categoryId);    errMsg=UtilProperties.getMessage(resource_error,"cart.could_not_get_products_in_category",messageMap,this.cart.getLocale());    result=ServiceUtil.returnError(errMsg);    return result;  }  BigDecimal totalQuantity=BigDecimal.ZERO;  for (  GenericValue productCategoryMember : prodCatMemberCol) {    BigDecimal quantity=productCategoryMember.getBigDecimal("quantity");    if (quantity != null && quantity.compareTo(BigDecimal.ZERO) > 0) {      try {        this.cart.addOrIncreaseItem(productCategoryMember.getString("productId"),null,quantity,null,null,null,null,null,null,null,catalogId,null,null,itemGroupNumber,null,dispatcher);        totalQuantity=totalQuantity.add(quantity);      } catch (      CartItemModifyException e) {        errorMsgs.add(e.getMessage());      }catch (      ItemNotFoundException e) {        errorMsgs.add(e.getMessage());      }    }  }  if (errorMsgs.size() > 0) {    result=ServiceUtil.returnError(errorMsgs);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);    return result;  }  result=ServiceUtil.returnSuccess();  result.put("totalQuantity",totalQuantity);  return result;}  }
class C{  private static byte[] readCheckedBytes(byte[] buffer,int dataSize) throws InvalidProtocolBufferNanoException {  CheckedMessage wrapper=new CheckedMessage();  MessageNano.mergeFrom(wrapper,buffer,0,dataSize);  CRC32 checksum=new CRC32();  checksum.update(wrapper.payload);  if (wrapper.checksum != checksum.getValue()) {    throw new InvalidProtocolBufferNanoException("checksum does not match");  }  return wrapper.payload;}  }
class C{  private boolean addEdge(Edge e){  if (e.u < 0 || e.u > getSize() - 1)   throw new IllegalArgumentException("No such index: " + e.u);  if (e.v < 0 || e.v > getSize() - 1)   throw new IllegalArgumentException("No such index: " + e.v);  if (!neighbors.get(e.u).contains(e)) {    neighbors.get(e.u).add(e);    return true;  } else {    return false;  }}  }
class C{  public final void test_chooseEngineServerAlias(){  X509ExtendedKeyManager km=new MyX509ExtendedKeyManager();  if (km.chooseEngineServerAlias(null,null,null) != null) {    fail("non null result");  }}  }
class C{  public TypeRefsFactoryImpl(){  super();}  }
class C{  public final void printSymbol(CharSequence text) throws IOException {  if (text == null) {    appendAscii("null.symbol");  } else   if (text.length() == 0) {    throw new EmptySymbolException();  } else   if (symbolNeedsQuoting(text,true)) {    appendAscii('\'');    printCodePoints(text,SYMBOL_ESCAPE_CODES);    appendAscii('\'');  } else {    appendAscii(text);  }}  }
class C{  @SuppressForbidden(reason="ProcessBuilder requires java.io.File for CWD") public void forkTest() throws Exception {  List<String> cmd=new ArrayList<>();  cmd.add(Paths.get(System.getProperty("java.home"),"bin","java").toString());  cmd.add("-Xmx512m");  cmd.add("-Dtests.crashmode=true");  cmd.add("-Dtests.nightly=true");  cmd.add("-DtempDir=" + tempDir);  cmd.add("-Dtests.seed=" + SeedUtils.formatSeed(random().nextLong()));  cmd.add("-ea");  cmd.add("-cp");  cmd.add(System.getProperty("java.class.path"));  cmd.add("org.junit.runner.JUnitCore");  cmd.add(getClass().getName());  ProcessBuilder pb=new ProcessBuilder(cmd).directory(tempDir.toFile()).redirectInput(Redirect.INHERIT).redirectErrorStream(true);  Process p=pb.start();  PrintStream childOut=System.err;  Thread stdoutPumper=ThreadPumper.start(p.getInputStream(),childOut);  if (VERBOSE)   childOut.println(">>> Begin subprocess output");  p.waitFor();  stdoutPumper.join();  if (VERBOSE)   childOut.println("<<< End subprocess output");}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  int progress;  int i, n, FID;  int oneHundredthTotal;  int numRecs;  ShapeType shapeType;  boolean convexHullAroundEachFeature=true;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  convexHullAroundEachFeature=Boolean.parseBoolean(args[2]);  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    numRecs=input.getNumberOfRecords();    DBFField fields[]=new DBFField[1];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    ShapeFile output=new ShapeFile(outputFile,ShapeType.POLYGON,fields);    output.setProjectionStringFromOtherShapefile(input);    if (convexHullAroundEachFeature && (shapeType.getBaseType() == ShapeType.POLYLINE || shapeType.getBaseType() == ShapeType.POLYGON)) {      FID=0;      n=0;      oneHundredthTotal=numRecs / 100;      progress=0;      com.vividsolutions.jts.geom.Geometry[] recJTSPoly=null;      n=0;      for (      ShapeFileRecord record : input.records) {        FID++;        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSPoly=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSPoly.length; a++) {            com.vividsolutions.jts.geom.Geometry ch=recJTSPoly[a].convexHull();            if (ch instanceof com.vividsolutions.jts.geom.Polygon) {              com.vividsolutions.jts.geom.Polygon chPoly=(com.vividsolutions.jts.geom.Polygon)ch;              ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();              int[] parts=new int[chPoly.getNumInteriorRing() + 1];              Coordinate[] buffCoords=chPoly.getExteriorRing().getCoordinates();              for (i=0; i < buffCoords.length; i++) {                pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));              }              for (int b=0; b < chPoly.getNumInteriorRing(); b++) {                parts[b + 1]=pnts.size();                buffCoords=chPoly.getInteriorRingN(b).getCoordinates();                for (i=buffCoords.length - 1; i >= 0; i--) {                  pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));                }              }              PointsList pl=new PointsList(pnts);              whitebox.geospatialfiles.shapefile.Polygon wbPoly=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());              Object[] rowData=new Object[1];              rowData[0]=new Double(FID);              output.addRecord(wbPoly,rowData);            }          }        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress(progress);        }      }    } else {      com.vividsolutions.jts.geom.Geometry[] recJTSPoly=null;      ArrayList<Coordinate> coordsList=new ArrayList<>();      n=0;      oneHundredthTotal=numRecs / 100;      progress=0;      FID=0;      for (      ShapeFileRecord record : input.records) {        FID++;        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSPoly=record.getGeometry().getJTSGeometries();          for (i=0; i < recJTSPoly.length; i++) {            Coordinate[] coords=recJTSPoly[i].getCoordinates();            for (int a=0; a < coords.length; a++) {              coordsList.add(coords[a]);            }          }        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Reading shapefile data:",progress);        }      }      int numPoints=coordsList.size();      Coordinate[] coords=new Coordinate[numPoints];      for (i=0; i < numPoints; i++) {        coords[i]=coordsList.get(i);      }      GeometryFactory factory=new GeometryFactory();      com.vividsolutions.jts.geom.MultiPoint mp=factory.createMultiPoint(coords);      updateProgress("Calculating convex hull:",-1);      com.vividsolutions.jts.geom.Geometry ch=mp.convexHull();      if (ch instanceof com.vividsolutions.jts.geom.Polygon) {        com.vividsolutions.jts.geom.Polygon chPoly=(com.vividsolutions.jts.geom.Polygon)ch;        ArrayList<ShapefilePoint> pnts=new ArrayList<>();        int[] parts=new int[chPoly.getNumInteriorRing() + 1];        Coordinate[] buffCoords=chPoly.getExteriorRing().getCoordinates();        if (!Topology.isClockwisePolygon(buffCoords)) {          for (i=buffCoords.length - 1; i >= 0; i--) {            pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));          }        } else {          for (i=0; i < buffCoords.length; i++) {            pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));          }        }        for (int b=0; b < chPoly.getNumInteriorRing(); b++) {          parts[b + 1]=pnts.size();          buffCoords=chPoly.getInteriorRingN(b).getCoordinates();          if (Topology.isClockwisePolygon(buffCoords)) {            for (i=buffCoords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));            }          } else {            for (i=0; i < buffCoords.length; i++) {              pnts.add(new ShapefilePoint(buffCoords[i].x,buffCoords[i].y));            }          }        }        PointsList pl=new PointsList(pnts);        whitebox.geospatialfiles.shapefile.Polygon wbPoly=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());        Object[] rowData=new Object[1];        rowData[0]=new Double(FID);        output.addRecord(wbPoly,rowData);      }    }    output.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public int invalidateByPrefix(String prefix){  int deleted=0;  for (  String key : keys()) {    if (key.startsWith(prefix)) {      invalidate(key);      deleted++;    }  }  return deleted;}  }
class C{  public boolean isToggle(){  return toggle;}  }
class C{  public static Function createFunction(String name){  Class type=(Class)s_functionTable.get(name);  if (type == null) {    throw new IllegalArgumentException("Unrecognized function name");  }  try {    return (Function)type.newInstance();  } catch (  InstantiationException e) {    throw new RuntimeException(e);  }catch (  IllegalAccessException e) {    throw new RuntimeException(e);  }}  }
class C{  public void addCustomName(ActionEvent event) throws AbortProcessingException {  if ((customName != null) && (!customName.trim().equals(""))) {    customName=customName.trim();    for (    CharacterBean item : dataList) {      if (item.getName().equals(customName)) {        reset();        return;      }    }    CharacterBean item=new CharacterBean();    item.setName(customName);    item.setSpecies(speciesPropertyMap.get(customSpecies));    dataList.add(item);  }}  }
class C{  @Override public void run(){  amIActive=true;  String demHeader;  String outputFileName;  boolean flag;  int row, col;  double xCoord, yCoord;  int progress;  int i;  double value, z, zN;  double contourInterval;  double baseContour;  double zConvFactor=1.0;  int FID=0;  double topNeighbour, leftNeighbour;  int[] rowVals=new int[2];  int[] colVals=new int[2];  int traceDirection=0;  int previousTraceDirection=0;  double currentHalfRow=0, currentHalfCol=0;  double[] elevClassData=new double[4];  long numPoints;  double contourValue=0;  boolean val1, val2;  boolean[] edges=new boolean[4];  boolean[] untraversed=new boolean[4];  int[] visitedData=new int[4];  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  demHeader=args[0];  outputFileName=args[1];  contourInterval=Double.parseDouble(args[2]);  if (contourInterval <= 0) {    showFeedback("The contour interval must be greater than zero.");    return;  }  baseContour=Double.parseDouble(args[3]);  zConvFactor=Double.parseDouble(args[4]);  if ((demHeader == null) || (outputFileName == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(demHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    double gridResX=DEM.getCellSizeX();    double gridResY=DEM.getCellSizeY();    double east=DEM.getEast() - gridResX / 2.0;    double west=DEM.getWest() + gridResX / 2.0;    double EWRange=east - west;    double north=DEM.getNorth() - gridResY / 2.0;    double south=DEM.getSouth() + gridResY / 2.0;    double NSRange=north - south;    String tempHeader1=demHeader.replace(".dep","_temp1.dep");    WhiteboxRaster temp1=new WhiteboxRaster(tempHeader1,"rw",demHeader,WhiteboxRaster.DataType.INTEGER,0);    temp1.isTemporaryFile=true;    ShapeFile output=new ShapeFile(outputFileName,ShapeType.POLYLINE);    DBFField fields[]=new DBFField[2];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    fields[1]=new DBFField();    fields[1].setName("ELEV");    fields[1].setDataType(DBFField.DBFDataType.NUMERIC);    fields[1].setFieldLength(10);    fields[1].setDecimalCount(3);    String DBFName=output.getDatabaseFile();    DBFWriter writer=new DBFWriter(new File(DBFName));    writer.setFields(fields);    int[] parts={0};    for (row=0; row < rows; row++) {      col=0;      z=DEM.getValue(row,col);      if (z != noData) {        z=baseContour + Math.floor(((z * zConvFactor) - baseContour) / contourInterval) * contourInterval;        zN=DEM.getValue(row - 1,col);        topNeighbour=baseContour + Math.floor(((zN * zConvFactor) - baseContour) / contourInterval) * contourInterval;        if (topNeighbour != z && zN != noData) {          contourValue=Math.max(z,topNeighbour);          currentHalfRow=row - 0.5;          currentHalfCol=-0.5;          traceDirection=-1;          numPoints=0;          FID++;          PointsList points=new PointsList();          flag=true;          do {            rowVals[0]=(int)Math.floor(currentHalfRow);            rowVals[1]=(int)Math.ceil(currentHalfRow);            colVals[0]=(int)Math.floor(currentHalfCol);            colVals[1]=(int)Math.ceil(currentHalfCol);            if (DEM.getValue(rowVals[0],colVals[0]) != noData) {              elevClassData[0]=baseContour + Math.floor(((DEM.getValue(rowVals[0],colVals[0]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;            } else {              elevClassData[0]=noData;            }            if (DEM.getValue(rowVals[0],colVals[1]) != noData) {              elevClassData[1]=baseContour + Math.floor(((DEM.getValue(rowVals[0],colVals[1]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;            } else {              elevClassData[1]=noData;            }            if (DEM.getValue(rowVals[1],colVals[0]) != noData) {              elevClassData[2]=baseContour + Math.floor(((DEM.getValue(rowVals[1],colVals[0]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;            } else {              elevClassData[2]=noData;            }            if (DEM.getValue(rowVals[1],colVals[1]) != noData) {              elevClassData[3]=baseContour + Math.floor(((DEM.getValue(rowVals[1],colVals[1]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;            } else {              elevClassData[3]=noData;            }            edges=new boolean[4];            if (elevClassData[1] != elevClassData[3] && Math.min(elevClassData[1],elevClassData[3]) != noData) {              edges[0]=true;            }            if (elevClassData[2] != elevClassData[3] && Math.min(elevClassData[2],elevClassData[3]) != noData) {              edges[1]=true;            }            if (elevClassData[0] != elevClassData[2] && Math.min(elevClassData[0],elevClassData[2]) != noData) {              edges[2]=true;            }            if (elevClassData[0] != elevClassData[1] && Math.min(elevClassData[0],elevClassData[1]) != noData) {              edges[3]=true;            }            visitedData=new int[4];            visitedData[0]=(int)temp1.getValue(rowVals[0],colVals[0]);            visitedData[1]=(int)temp1.getValue(rowVals[0],colVals[1]);            visitedData[2]=(int)temp1.getValue(rowVals[1],colVals[0]);            visitedData[3]=(int)temp1.getValue(rowVals[1],colVals[1]);            untraversed=new boolean[4];            if (visitedData[1] == 0 && visitedData[3] == 0) {              untraversed[0]=true;            } else {              val1=BitOps.checkBit(visitedData[1],2);              val2=BitOps.checkBit(visitedData[3],0);              untraversed[0]=!(val1 | val2);            }            if (visitedData[2] == 0 && visitedData[3] == 0) {              untraversed[1]=true;            } else {              val1=BitOps.checkBit(visitedData[2],1);              val2=BitOps.checkBit(visitedData[3],3);              untraversed[1]=!(val1 | val2);            }            if (visitedData[0] == 0 && visitedData[2] == 0) {              untraversed[2]=true;            } else {              val1=BitOps.checkBit(visitedData[0],2);              val2=BitOps.checkBit(visitedData[2],0);              untraversed[2]=!(val1 | val2);            }            if (visitedData[0] == 0 && visitedData[1] == 0) {              untraversed[3]=true;            } else {              val1=BitOps.checkBit(visitedData[0],1);              val2=BitOps.checkBit(visitedData[1],3);              untraversed[3]=!(val1 | val2);            }            previousTraceDirection=traceDirection;            if (edges[0] && untraversed[0]) {              traceDirection=0;            } else             if (edges[1] && untraversed[1]) {              traceDirection=1;            } else             if (edges[2] && untraversed[2]) {              traceDirection=2;            } else             if (edges[3] && untraversed[3]) {              traceDirection=3;            } else {              traceDirection=-1;              flag=false;            }            if (previousTraceDirection != traceDirection) {              xCoord=west + (currentHalfCol / cols) * EWRange;              yCoord=north - (currentHalfRow / rows) * NSRange;              points.addPoint(xCoord,yCoord);            }switch (traceDirection) {case 0:              currentHalfCol+=1.0;            temp1.setValue(rowVals[0],colVals[1],BitOps.setBit(visitedData[1],2));          temp1.setValue(rowVals[1],colVals[1],BitOps.setBit(visitedData[3],0));        break;case 1:      currentHalfRow+=1.0;    temp1.setValue(rowVals[1],colVals[0],BitOps.setBit(visitedData[2],1));  temp1.setValue(rowVals[1],colVals[1],BitOps.setBit(visitedData[3],3));break;case 2:currentHalfCol-=1.0;temp1.setValue(rowVals[0],colVals[0],BitOps.setBit(visitedData[0],2));temp1.setValue(rowVals[1],colVals[0],BitOps.setBit(visitedData[2],0));break;case 3:currentHalfRow-=1.0;temp1.setValue(rowVals[0],colVals[0],BitOps.setBit(visitedData[0],1));temp1.setValue(rowVals[0],colVals[1],BitOps.setBit(visitedData[1],3));break;}numPoints++;if (numPoints > 1000000) {flag=false;}} while (flag);if (numPoints > 1) {PolyLine line=new PolyLine(parts,points.getPointsArray());output.addRecord(line);Object[] rowData=new Object[2];rowData[0]=new Double(FID);rowData[1]=new Double(contourValue);writer.addRecord(rowData);}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress("Loop 1 of 5:",progress);}for (col=0; col < cols; col++) {row=0;z=DEM.getValue(row,col);if (z != noData) {z=baseContour + Math.floor(((z * zConvFactor) - baseContour) / contourInterval) * contourInterval;zN=DEM.getValue(row,col - 1);leftNeighbour=baseContour + Math.floor(((zN * zConvFactor) - baseContour) / contourInterval) * contourInterval;if (leftNeighbour != z && zN != noData) {contourValue=Math.max(z,leftNeighbour);currentHalfRow=-0.5;currentHalfCol=col - 0.5;traceDirection=-1;numPoints=0;FID++;PointsList points=new PointsList();flag=true;do {rowVals[0]=(int)Math.floor(currentHalfRow);rowVals[1]=(int)Math.ceil(currentHalfRow);colVals[0]=(int)Math.floor(currentHalfCol);colVals[1]=(int)Math.ceil(currentHalfCol);if (DEM.getValue(rowVals[0],colVals[0]) != noData) {elevClassData[0]=baseContour + Math.floor(((DEM.getValue(rowVals[0],colVals[0]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[0]=noData;}if (DEM.getValue(rowVals[0],colVals[1]) != noData) {elevClassData[1]=baseContour + Math.floor(((DEM.getValue(rowVals[0],colVals[1]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[1]=noData;}if (DEM.getValue(rowVals[1],colVals[0]) != noData) {elevClassData[2]=baseContour + Math.floor(((DEM.getValue(rowVals[1],colVals[0]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[2]=noData;}if (DEM.getValue(rowVals[1],colVals[1]) != noData) {elevClassData[3]=baseContour + Math.floor(((DEM.getValue(rowVals[1],colVals[1]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[3]=noData;}edges=new boolean[4];if (elevClassData[1] != elevClassData[3] && Math.min(elevClassData[1],elevClassData[3]) != noData) {edges[0]=true;}if (elevClassData[2] != elevClassData[3] && Math.min(elevClassData[2],elevClassData[3]) != noData) {edges[1]=true;}if (elevClassData[0] != elevClassData[2] && Math.min(elevClassData[0],elevClassData[2]) != noData) {edges[2]=true;}if (elevClassData[0] != elevClassData[1] && Math.min(elevClassData[0],elevClassData[1]) != noData) {edges[3]=true;}visitedData=new int[4];visitedData[0]=(int)temp1.getValue(rowVals[0],colVals[0]);visitedData[1]=(int)temp1.getValue(rowVals[0],colVals[1]);visitedData[2]=(int)temp1.getValue(rowVals[1],colVals[0]);visitedData[3]=(int)temp1.getValue(rowVals[1],colVals[1]);untraversed=new boolean[4];if (visitedData[1] == 0 && visitedData[3] == 0) {untraversed[0]=true;} else {val1=BitOps.checkBit(visitedData[1],2);val2=BitOps.checkBit(visitedData[3],0);untraversed[0]=!(val1 | val2);}if (visitedData[2] == 0 && visitedData[3] == 0) {untraversed[1]=true;} else {val1=BitOps.checkBit(visitedData[2],1);val2=BitOps.checkBit(visitedData[3],3);untraversed[1]=!(val1 | val2);}if (visitedData[0] == 0 && visitedData[2] == 0) {untraversed[2]=true;} else {val1=BitOps.checkBit(visitedData[0],2);val2=BitOps.checkBit(visitedData[2],0);untraversed[2]=!(val1 | val2);}if (visitedData[0] == 0 && visitedData[1] == 0) {untraversed[3]=true;} else {val1=BitOps.checkBit(visitedData[0],1);val2=BitOps.checkBit(visitedData[1],3);untraversed[3]=!(val1 | val2);}previousTraceDirection=traceDirection;if (edges[0] && untraversed[0]) {traceDirection=0;} else if (edges[1] && untraversed[1]) {traceDirection=1;} else if (edges[2] && untraversed[2]) {traceDirection=2;} else if (edges[3] && untraversed[3]) {traceDirection=3;} else {traceDirection=-1;flag=false;}if (previousTraceDirection != traceDirection) {xCoord=west + (currentHalfCol / cols) * EWRange;yCoord=north - (currentHalfRow / rows) * NSRange;points.addPoint(xCoord,yCoord);}switch (traceDirection) {case 0:currentHalfCol+=1.0;temp1.setValue(rowVals[0],colVals[1],BitOps.setBit(visitedData[1],2));temp1.setValue(rowVals[1],colVals[1],BitOps.setBit(visitedData[3],0));break;case 1:currentHalfRow+=1.0;temp1.setValue(rowVals[1],colVals[0],BitOps.setBit(visitedData[2],1));temp1.setValue(rowVals[1],colVals[1],BitOps.setBit(visitedData[3],3));break;case 2:currentHalfCol-=1.0;temp1.setValue(rowVals[0],colVals[0],BitOps.setBit(visitedData[0],2));temp1.setValue(rowVals[1],colVals[0],BitOps.setBit(visitedData[2],0));break;case 3:currentHalfRow-=1.0;temp1.setValue(rowVals[0],colVals[0],BitOps.setBit(visitedData[0],1));temp1.setValue(rowVals[0],colVals[1],BitOps.setBit(visitedData[1],3));break;}numPoints++;if (numPoints > 1000000) {flag=false;}} while (flag);if (numPoints > 1) {PolyLine line=new PolyLine(parts,points.getPointsArray());output.addRecord(line);Object[] rowData=new Object[2];rowData[0]=new Double(FID);rowData[1]=new Double(contourValue);writer.addRecord(rowData);}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * col / (cols - 1));updateProgress("Loop 2 of 5:",progress);}for (row=0; row < rows; row++) {col=cols - 1;z=DEM.getValue(row,col);if (z != noData) {z=baseContour + Math.floor(((z * zConvFactor) - baseContour) / contourInterval) * contourInterval;zN=DEM.getValue(row - 1,col);topNeighbour=baseContour + Math.floor(((zN * zConvFactor) - baseContour) / contourInterval) * contourInterval;if (topNeighbour != z && zN != noData) {contourValue=Math.max(z,topNeighbour);currentHalfRow=row - 0.5;currentHalfCol=col + 0.5;traceDirection=-1;numPoints=0;FID++;PointsList points=new PointsList();flag=true;do {rowVals[0]=(int)Math.floor(currentHalfRow);rowVals[1]=(int)Math.ceil(currentHalfRow);colVals[0]=(int)Math.floor(currentHalfCol);colVals[1]=(int)Math.ceil(currentHalfCol);if (DEM.getValue(rowVals[0],colVals[0]) != noData) {elevClassData[0]=baseContour + Math.floor(((DEM.getValue(rowVals[0],colVals[0]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[0]=noData;}if (DEM.getValue(rowVals[0],colVals[1]) != noData) {elevClassData[1]=baseContour + Math.floor(((DEM.getValue(rowVals[0],colVals[1]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[1]=noData;}if (DEM.getValue(rowVals[1],colVals[0]) != noData) {elevClassData[2]=baseContour + Math.floor(((DEM.getValue(rowVals[1],colVals[0]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[2]=noData;}if (DEM.getValue(rowVals[1],colVals[1]) != noData) {elevClassData[3]=baseContour + Math.floor(((DEM.getValue(rowVals[1],colVals[1]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[3]=noData;}edges=new boolean[4];if (elevClassData[1] != elevClassData[3] && Math.min(elevClassData[1],elevClassData[3]) != noData) {edges[0]=true;}if (elevClassData[2] != elevClassData[3] && Math.min(elevClassData[2],elevClassData[3]) != noData) {edges[1]=true;}if (elevClassData[0] != elevClassData[2] && Math.min(elevClassData[0],elevClassData[2]) != noData) {edges[2]=true;}if (elevClassData[0] != elevClassData[1] && Math.min(elevClassData[0],elevClassData[1]) != noData) {edges[3]=true;}visitedData=new int[4];visitedData[0]=(int)temp1.getValue(rowVals[0],colVals[0]);visitedData[1]=(int)temp1.getValue(rowVals[0],colVals[1]);visitedData[2]=(int)temp1.getValue(rowVals[1],colVals[0]);visitedData[3]=(int)temp1.getValue(rowVals[1],colVals[1]);untraversed=new boolean[4];if (visitedData[1] == 0 && visitedData[3] == 0) {untraversed[0]=true;} else {val1=BitOps.checkBit(visitedData[1],2);val2=BitOps.checkBit(visitedData[3],0);untraversed[0]=!(val1 | val2);}if (visitedData[2] == 0 && visitedData[3] == 0) {untraversed[1]=true;} else {val1=BitOps.checkBit(visitedData[2],1);val2=BitOps.checkBit(visitedData[3],3);untraversed[1]=!(val1 | val2);}if (visitedData[0] == 0 && visitedData[2] == 0) {untraversed[2]=true;} else {val1=BitOps.checkBit(visitedData[0],2);val2=BitOps.checkBit(visitedData[2],0);untraversed[2]=!(val1 | val2);}if (visitedData[0] == 0 && visitedData[1] == 0) {untraversed[3]=true;} else {val1=BitOps.checkBit(visitedData[0],1);val2=BitOps.checkBit(visitedData[1],3);untraversed[3]=!(val1 | val2);}previousTraceDirection=traceDirection;if (edges[0] && untraversed[0]) {traceDirection=0;} else if (edges[1] && untraversed[1]) {traceDirection=1;} else if (edges[2] && untraversed[2]) {traceDirection=2;} else if (edges[3] && untraversed[3]) {traceDirection=3;} else {traceDirection=-1;flag=false;}if (previousTraceDirection != traceDirection) {xCoord=west + (currentHalfCol / cols) * EWRange;yCoord=north - (currentHalfRow / rows) * NSRange;points.addPoint(xCoord,yCoord);}switch (traceDirection) {case 0:currentHalfCol+=1.0;temp1.setValue(rowVals[0],colVals[1],BitOps.setBit(visitedData[1],2));temp1.setValue(rowVals[1],colVals[1],BitOps.setBit(visitedData[3],0));break;case 1:currentHalfRow+=1.0;temp1.setValue(rowVals[1],colVals[0],BitOps.setBit(visitedData[2],1));temp1.setValue(rowVals[1],colVals[1],BitOps.setBit(visitedData[3],3));break;case 2:currentHalfCol-=1.0;temp1.setValue(rowVals[0],colVals[0],BitOps.setBit(visitedData[0],2));temp1.setValue(rowVals[1],colVals[0],BitOps.setBit(visitedData[2],0));break;case 3:currentHalfRow-=1.0;temp1.setValue(rowVals[0],colVals[0],BitOps.setBit(visitedData[0],1));temp1.setValue(rowVals[0],colVals[1],BitOps.setBit(visitedData[1],3));break;}numPoints++;if (numPoints > 1000000) {flag=false;}} while (flag);if (numPoints > 1) {PolyLine line=new PolyLine(parts,points.getPointsArray());output.addRecord(line);Object[] rowData=new Object[2];rowData[0]=new Double(FID);rowData[1]=new Double(contourValue);writer.addRecord(rowData);}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress("Loop 3 of 5:",progress);}for (col=0; col < cols; col++) {row=rows - 1;z=DEM.getValue(row,col);if (z != noData) {z=baseContour + Math.floor(((z * zConvFactor) - baseContour) / contourInterval) * contourInterval;zN=DEM.getValue(row,col - 1);leftNeighbour=baseContour + Math.floor(((zN * zConvFactor) - baseContour) / contourInterval) * contourInterval;if (leftNeighbour != z && zN != noData) {contourValue=Math.max(z,leftNeighbour);currentHalfRow=row + 0.5;currentHalfCol=col - 0.5;traceDirection=-1;numPoints=0;FID++;PointsList points=new PointsList();flag=true;do {rowVals[0]=(int)Math.floor(currentHalfRow);rowVals[1]=(int)Math.ceil(currentHalfRow);colVals[0]=(int)Math.floor(currentHalfCol);colVals[1]=(int)Math.ceil(currentHalfCol);if (DEM.getValue(rowVals[0],colVals[0]) != noData) {elevClassData[0]=baseContour + Math.floor(((DEM.getValue(rowVals[0],colVals[0]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[0]=noData;}if (DEM.getValue(rowVals[0],colVals[1]) != noData) {elevClassData[1]=baseContour + Math.floor(((DEM.getValue(rowVals[0],colVals[1]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[1]=noData;}if (DEM.getValue(rowVals[1],colVals[0]) != noData) {elevClassData[2]=baseContour + Math.floor(((DEM.getValue(rowVals[1],colVals[0]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[2]=noData;}if (DEM.getValue(rowVals[1],colVals[1]) != noData) {elevClassData[3]=baseContour + Math.floor(((DEM.getValue(rowVals[1],colVals[1]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[3]=noData;}edges=new boolean[4];if (elevClassData[1] != elevClassData[3] && Math.min(elevClassData[1],elevClassData[3]) != noData) {edges[0]=true;}if (elevClassData[2] != elevClassData[3] && Math.min(elevClassData[2],elevClassData[3]) != noData) {edges[1]=true;}if (elevClassData[0] != elevClassData[2] && Math.min(elevClassData[0],elevClassData[2]) != noData) {edges[2]=true;}if (elevClassData[0] != elevClassData[1] && Math.min(elevClassData[0],elevClassData[1]) != noData) {edges[3]=true;}visitedData=new int[4];visitedData[0]=(int)temp1.getValue(rowVals[0],colVals[0]);visitedData[1]=(int)temp1.getValue(rowVals[0],colVals[1]);visitedData[2]=(int)temp1.getValue(rowVals[1],colVals[0]);visitedData[3]=(int)temp1.getValue(rowVals[1],colVals[1]);untraversed=new boolean[4];if (visitedData[1] == 0 && visitedData[3] == 0) {untraversed[0]=true;} else {val1=BitOps.checkBit(visitedData[1],2);val2=BitOps.checkBit(visitedData[3],0);untraversed[0]=!(val1 | val2);}if (visitedData[2] == 0 && visitedData[3] == 0) {untraversed[1]=true;} else {val1=BitOps.checkBit(visitedData[2],1);val2=BitOps.checkBit(visitedData[3],3);untraversed[1]=!(val1 | val2);}if (visitedData[0] == 0 && visitedData[2] == 0) {untraversed[2]=true;} else {val1=BitOps.checkBit(visitedData[0],2);val2=BitOps.checkBit(visitedData[2],0);untraversed[2]=!(val1 | val2);}if (visitedData[0] == 0 && visitedData[1] == 0) {untraversed[3]=true;} else {val1=BitOps.checkBit(visitedData[0],1);val2=BitOps.checkBit(visitedData[1],3);untraversed[3]=!(val1 | val2);}previousTraceDirection=traceDirection;if (edges[0] && untraversed[0]) {traceDirection=0;} else if (edges[1] && untraversed[1]) {traceDirection=1;} else if (edges[2] && untraversed[2]) {traceDirection=2;} else if (edges[3] && untraversed[3]) {traceDirection=3;} else {traceDirection=-1;flag=false;}if (previousTraceDirection != traceDirection) {xCoord=west + (currentHalfCol / cols) * EWRange;yCoord=north - (currentHalfRow / rows) * NSRange;points.addPoint(xCoord,yCoord);}switch (traceDirection) {case 0:currentHalfCol+=1.0;temp1.setValue(rowVals[0],colVals[1],BitOps.setBit(visitedData[1],2));temp1.setValue(rowVals[1],colVals[1],BitOps.setBit(visitedData[3],0));break;case 1:currentHalfRow+=1.0;temp1.setValue(rowVals[1],colVals[0],BitOps.setBit(visitedData[2],1));temp1.setValue(rowVals[1],colVals[1],BitOps.setBit(visitedData[3],3));break;case 2:currentHalfCol-=1.0;temp1.setValue(rowVals[0],colVals[0],BitOps.setBit(visitedData[0],2));temp1.setValue(rowVals[1],colVals[0],BitOps.setBit(visitedData[2],0));break;case 3:currentHalfRow-=1.0;temp1.setValue(rowVals[0],colVals[0],BitOps.setBit(visitedData[0],1));temp1.setValue(rowVals[0],colVals[1],BitOps.setBit(visitedData[1],3));break;}numPoints++;if (numPoints > 1000000) {flag=false;}} while (flag);if (numPoints > 1) {PolyLine line=new PolyLine(parts,points.getPointsArray());output.addRecord(line);Object[] rowData=new Object[2];rowData[0]=new Double(FID);rowData[1]=new Double(contourValue);writer.addRecord(rowData);}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * col / (cols - 1));updateProgress("Loop 4 of 5:",progress);}for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {z=DEM.getValue(row,col);if (z != noData) {z=baseContour + Math.floor(((z * zConvFactor) - baseContour) / contourInterval) * contourInterval;zN=DEM.getValue(row - 1,col);topNeighbour=baseContour + Math.floor(((zN * zConvFactor) - baseContour) / contourInterval) * contourInterval;value=DEM.getValue(row,col - 1);leftNeighbour=baseContour + Math.floor(((value * zConvFactor) - baseContour) / contourInterval) * contourInterval;if ((topNeighbour != z && zN != noData) || (leftNeighbour != z && value != noData)) {contourValue=Math.max(z,topNeighbour);currentHalfRow=row - 0.5;currentHalfCol=col - 0.5;traceDirection=-1;numPoints=0;FID++;PointsList points=new PointsList();flag=true;do {rowVals[0]=(int)Math.floor(currentHalfRow);rowVals[1]=(int)Math.ceil(currentHalfRow);colVals[0]=(int)Math.floor(currentHalfCol);colVals[1]=(int)Math.ceil(currentHalfCol);if (DEM.getValue(rowVals[0],colVals[0]) != noData) {elevClassData[0]=baseContour + Math.floor(((DEM.getValue(rowVals[0],colVals[0]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[0]=noData;}if (DEM.getValue(rowVals[0],colVals[1]) != noData) {elevClassData[1]=baseContour + Math.floor(((DEM.getValue(rowVals[0],colVals[1]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[1]=noData;}if (DEM.getValue(rowVals[1],colVals[0]) != noData) {elevClassData[2]=baseContour + Math.floor(((DEM.getValue(rowVals[1],colVals[0]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[2]=noData;}if (DEM.getValue(rowVals[1],colVals[1]) != noData) {elevClassData[3]=baseContour + Math.floor(((DEM.getValue(rowVals[1],colVals[1]) * zConvFactor) - baseContour) / contourInterval) * contourInterval;} else {elevClassData[3]=noData;}edges=new boolean[4];if (elevClassData[1] != elevClassData[3] && Math.min(elevClassData[1],elevClassData[3]) != noData) {edges[0]=true;}if (elevClassData[2] != elevClassData[3] && Math.min(elevClassData[2],elevClassData[3]) != noData) {edges[1]=true;}if (elevClassData[0] != elevClassData[2] && Math.min(elevClassData[0],elevClassData[2]) != noData) {edges[2]=true;}if (elevClassData[0] != elevClassData[1] && Math.min(elevClassData[0],elevClassData[1]) != noData) {edges[3]=true;}visitedData=new int[4];visitedData[0]=(int)temp1.getValue(rowVals[0],colVals[0]);visitedData[1]=(int)temp1.getValue(rowVals[0],colVals[1]);visitedData[2]=(int)temp1.getValue(rowVals[1],colVals[0]);visitedData[3]=(int)temp1.getValue(rowVals[1],colVals[1]);untraversed=new boolean[4];if (visitedData[1] == 0 && visitedData[3] == 0) {untraversed[0]=true;} else {val1=BitOps.checkBit(visitedData[1],2);val2=BitOps.checkBit(visitedData[3],0);untraversed[0]=!(val1 | val2);}if (visitedData[2] == 0 && visitedData[3] == 0) {untraversed[1]=true;} else {val1=BitOps.checkBit(visitedData[2],1);val2=BitOps.checkBit(visitedData[3],3);untraversed[1]=!(val1 | val2);}if (visitedData[0] == 0 && visitedData[2] == 0) {untraversed[2]=true;} else {val1=BitOps.checkBit(visitedData[0],2);val2=BitOps.checkBit(visitedData[2],0);untraversed[2]=!(val1 | val2);}if (visitedData[0] == 0 && visitedData[1] == 0) {untraversed[3]=true;} else {val1=BitOps.checkBit(visitedData[0],1);val2=BitOps.checkBit(visitedData[1],3);untraversed[3]=!(val1 | val2);}previousTraceDirection=traceDirection;if (edges[0] && untraversed[0]) {traceDirection=0;} else if (edges[1] && untraversed[1]) {traceDirection=1;} else if (edges[2] && untraversed[2]) {traceDirection=2;} else if (edges[3] && untraversed[3]) {traceDirection=3;} else {traceDirection=-1;flag=false;}if (previousTraceDirection != traceDirection) {xCoord=west + (currentHalfCol / cols) * EWRange;yCoord=north - (currentHalfRow / rows) * NSRange;points.addPoint(xCoord,yCoord);}switch (traceDirection) {case 0:currentHalfCol+=1.0;temp1.setValue(rowVals[0],colVals[1],BitOps.setBit(visitedData[1],2));temp1.setValue(rowVals[1],colVals[1],BitOps.setBit(visitedData[3],0));break;case 1:currentHalfRow+=1.0;temp1.setValue(rowVals[1],colVals[0],BitOps.setBit(visitedData[2],1));temp1.setValue(rowVals[1],colVals[1],BitOps.setBit(visitedData[3],3));break;case 2:currentHalfCol-=1.0;temp1.setValue(rowVals[0],colVals[0],BitOps.setBit(visitedData[0],2));temp1.setValue(rowVals[1],colVals[0],BitOps.setBit(visitedData[2],0));break;case 3:currentHalfRow-=1.0;temp1.setValue(rowVals[0],colVals[0],BitOps.setBit(visitedData[0],1));temp1.setValue(rowVals[0],colVals[1],BitOps.setBit(visitedData[1],3));break;}numPoints++;if (numPoints > 1000000) {flag=false;}} while (flag);if (numPoints > 1) {PolyLine line=new PolyLine(parts,points.getPointsArray());output.addRecord(line);Object[] rowData=new Object[2];rowData[0]=new Double(FID);rowData[1]=new Double(contourValue);writer.addRecord(rowData);}}}}if (cancelOp) {cancelOperation();return;}progress=(int)(100f * row / (rows - 1));updateProgress("Loop 5 of 5:",progress);}DEM.close();temp1.close();output.write();writer.write();returnData(outputFileName);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public boolean matches(String versionRange) throws IllegalArgumentException {  Validate.notEmpty(versionRange,"Parameter versionRange must not be null nor empty.");  try {    return impl.satisfies(versionRange);  } catch (  com.github.zafarkhaja.semver.ParseException e) {    throw new IllegalArgumentException("Parameter versionRange is not valid.");  }}  }
class C{  public void logout(){  if (SecurityContextHolder.getContext().getAuthentication() != null && SecurityContextHolder.getContext().getAuthentication().isAuthenticated()) {    SecurityUser securityUser=(SecurityUser)SecurityContextHolder.getContext().getAuthentication().getPrincipal();    UserDTO userDTO=MockUsers.findById(securityUser.getId());    if (userDTO != null) {      userDTO.setSecretKey(null);    }  }}  }
class C{  public final void checkAccess(){  SecurityManager currentManager=System.getSecurityManager();  if (currentManager != null) {    currentManager.checkAccess(this);  }}  }
class C{  public HttpAuthHeader(String header){  if (header != null) {    parseHeader(header);  }}  }
class C{  private InputStream toBufferedInputStream(){  int remaining=count;  if (remaining == 0) {    return new ClosedInputStream();  }  List<ByteArrayInputStream> list=new ArrayList<ByteArrayInputStream>(buffers.size());  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    list.add(new ByteArrayInputStream(buf,0,c));    remaining-=c;    if (remaining == 0) {      break;    }  }  return new SequenceInputStream(Collections.enumeration(list));}  }
class C{  public static boolean isString(FTypeRef typeRef){  return isBasicType(typeRef,FBasicTypeId.STRING);}  }
class C{  public static void addChemicalWasherRecipe(GasStack input,GasStack output){  try {    Class recipeClass=Class.forName("mekanism.common.recipe.RecipeHandler");    Method m=recipeClass.getMethod("addChemicalWasherRecipe",GasStack.class,GasStack.class);    m.invoke(null,input,output);  } catch (  Exception e) {    System.err.println("Error while adding recipe: " + e.getMessage());  }}  }
class C{  protected Shape bufferShape(Shape shape,double distErr){  if (distErr <= 0)   throw new IllegalArgumentException("distErr must be > 0");  SpatialContext ctx=grid.getSpatialContext();  if (shape instanceof Point) {    return ctx.makeCircle((Point)shape,distErr);  } else   if (shape instanceof Circle) {    Circle circle=(Circle)shape;    double newDist=circle.getRadius() + distErr;    if (ctx.isGeo() && newDist > 180)     newDist=180;    return ctx.makeCircle(circle.getCenter(),newDist);  } else {    Rectangle bbox=shape.getBoundingBox();    double newMinX=bbox.getMinX() - distErr;    double newMaxX=bbox.getMaxX() + distErr;    double newMinY=bbox.getMinY() - distErr;    double newMaxY=bbox.getMaxY() + distErr;    if (ctx.isGeo()) {      if (newMinY < -90)       newMinY=-90;      if (newMaxY > 90)       newMaxY=90;      if (newMinY == -90 || newMaxY == 90 || bbox.getWidth() + 2 * distErr > 360) {        newMinX=-180;        newMaxX=180;      } else {        newMinX=DistanceUtils.normLonDEG(newMinX);        newMaxX=DistanceUtils.normLonDEG(newMaxX);      }    } else {      newMinX=Math.max(newMinX,ctx.getWorldBounds().getMinX());      newMaxX=Math.min(newMaxX,ctx.getWorldBounds().getMaxX());      newMinY=Math.max(newMinY,ctx.getWorldBounds().getMinY());      newMaxY=Math.min(newMaxY,ctx.getWorldBounds().getMaxY());    }    return ctx.makeRectangle(newMinX,newMaxX,newMinY,newMaxY);  }}  }
class C{  public PaymentInformationException(){}  }
class C{  public static void unregister(JComponent comp){  assert INSTANCE != null : "Unregister asymmetrically called";  if (null != INSTANCE && INSTANCE.detachFrom(comp) == 0) {    INSTANCE.hide();    INSTANCE=null;  }}  }
class C{  public DisiWrapper topList(){  final DisiWrapper[] heap=this.heap;  final int size=this.size;  DisiWrapper list=heap[0];  list.next=null;  if (size >= 3) {    list=topList(list,heap,size,1);    list=topList(list,heap,size,2);  } else   if (size == 2 && heap[1].doc == list.doc) {    list=prepend(heap[1],list);  }  return list;}  }
class C{  private void doDdpOrientation(Graph graph,Node l,Node a,Node b,Node c){  Set<Node> sepset=new HashSet<>();  for (  SepsetMapDci msepset : sepsetMaps) {    List<Node> condSet=msepset.get(l,c);    if (condSet != null) {      sepset.addAll(condSet);    }  }  if (sepset.contains(b)) {    graph.setEndpoint(c,b,Endpoint.TAIL);    changeFlag=true;  } else {    if (!isArrowpointAllowed(graph,a,b)) {      return;    }    if (!isArrowpointAllowed(graph,c,b)) {      return;    }    graph.setEndpoint(a,b,Endpoint.ARROW);    graph.setEndpoint(c,b,Endpoint.ARROW);    changeFlag=true;  }}  }
class C{  static void accumSingleGeneric(int counts[],int startTermIndex,SortedDocValues si,DocIdSetIterator disi,int subIndex,OrdinalMap map) throws IOException {  final LongValues ordmap=map == null ? null : map.getGlobalOrds(subIndex);  int doc;  while ((doc=disi.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {    int term=si.getOrd(doc);    if (map != null && term >= 0) {      term=(int)ordmap.get(term);    }    int arrIdx=term - startTermIndex;    if (arrIdx >= 0 && arrIdx < counts.length)     counts[arrIdx]++;  }}  }
class C{  public boolean omitEnd(){  return oEnd;}  }
class C{  public static void generateRPClass(){  final RPClass rpclass=new RPClass(TRANSITION_GRAPH);  rpclass.addAttribute(DATA,Type.LONG_STRING);}  }
class C{  private void write_ieee_extended(DataOutputStream dos,double f) throws IOException {  int exponent=16398;  double highMantissa=f;  while (highMantissa < 44000) {    highMantissa*=2;    exponent--;  }  dos.writeShort(exponent);  dos.writeInt(((int)highMantissa) << 16);  dos.writeInt(0);}  }
class C{  @SuppressWarnings("deprecation") protected void processStyledAttributes(@NonNull TypedArray a){  mOvalDimmedLayer=a.getBoolean(R.styleable.ucrop_UCropView_ucrop_oval_dimmed_layer,DEFAULT_OVAL_DIMMED_LAYER);  mDimmedColor=a.getColor(R.styleable.ucrop_UCropView_ucrop_dimmed_color,getResources().getColor(R.color.ucrop_color_default_dimmed));  mDimmedStrokePaint.setColor(mDimmedColor);  mDimmedStrokePaint.setStyle(Paint.Style.STROKE);  mDimmedStrokePaint.setStrokeWidth(1);  initCropFrameStyle(a);  mShowCropFrame=a.getBoolean(R.styleable.ucrop_UCropView_ucrop_show_frame,DEFAULT_SHOW_CROP_FRAME);  initCropGridStyle(a);  mShowCropGrid=a.getBoolean(R.styleable.ucrop_UCropView_ucrop_show_grid,DEFAULT_SHOW_CROP_GRID);}  }
class C{  public static Document xcalProperty(ICalPropertyScribe<? extends ICalProperty> marshaller){  QName qname=marshaller.getQName();  Document document=XmlUtils.createDocument();  Element element=document.createElementNS(qname.getNamespaceURI(),qname.getLocalPart());  document.appendChild(element);  return document;}  }
class C{  public static byte[] generateCertRequest(String keyId,ClientId memberId,KeyUsageInfo keyUsage,String subjectName) throws Exception {  GenerateCertRequestResponse response=execute(new GenerateCertRequest(keyId,memberId,keyUsage,subjectName));  byte[] certRequestBytes=response.getCertRequest();  LOG.trace("Cert request with length of {} bytes generated",certRequestBytes.length);  return certRequestBytes;}  }
class C{  public static boolean hasSessionCookie(HttpServletRequest req,SessionManager sessionManager,String tenant){  boolean retval=false;  if (req != null) {    String sessionId=getCookieValue(req.getCookies(),Shared.getTenantSessionCookieName(tenant),null);    if (sessionId != null && sessionManager != null) {      Session session=sessionManager.get(sessionId);      if (session != null && session.isValid())       retval=true;    }  }  return retval;}  }
class C{  public boolean isDoiReservedOrAssigned(){  return doiReservedOrAssigned;}  }
class C{  public void leaveLastErrorLevel(){  if (!errorsStatusStack.isEmpty()) {    errorsStatusStack.pop();  }}  }
class C{  public void registerHandler(RestRequest.Method method,String path,RestHandler handler){switch (method) {case GET:    getHandlers.insert(path,handler);  break;case DELETE:deleteHandlers.insert(path,handler);break;case POST:postHandlers.insert(path,handler);break;case PUT:putHandlers.insert(path,handler);break;case OPTIONS:optionsHandlers.insert(path,handler);break;case HEAD:headHandlers.insert(path,handler);break;default :throw new IllegalArgumentException("Can't handle [" + method + "] for path ["+ path+ "]");}}  }
class C{  public ServerReflexiveCandidate(TransportAddress address,HostCandidate base,TransportAddress stunSrvrAddr,CandidateExtendedType extendedType){  this(address,base,stunSrvrAddr,null,extendedType);}  }
class C{  public void start(){  managedPairs.add(createPort());  fixNames();  inPorts.addObserver(observer,false);  outPorts.addObserver(observer,false);}  }
class C{  private ReplaceTokens createMetaserverPortToken(){  ReplaceTokens.Token tokenPort=new ReplaceTokens.Token();  tokenPort.setKey(GeneralPropertySet.RMI_PORT);  String port=getPropertyValue(GeneralPropertySet.RMI_PORT);  if (port == null) {    throw new IllegalArgumentException("Property " + GeneralPropertySet.RMI_PORT + " not set!");  }  tokenPort.setValue(port);  ReplaceTokens replacePort=new ReplaceTokens();  replacePort.addConfiguredToken(tokenPort);  return replacePort;}  }
class C{  private void configureSyslog() throws Exception {  String syslogHost=rsvc.getString(RuntimeConstants.LOGSYSTEM_LOG4J_SYSLOGD_HOST);  String syslogFacility=rsvc.getString(RuntimeConstants.LOGSYSTEM_LOG4J_SYSLOGD_FACILITY);  if (syslogHost == null || syslogHost.trim().equals("") || syslogFacility == null) {    return;  }  Appender appender=new SyslogAppender();  ((SyslogAppender)appender).setLayout(layout);  ((SyslogAppender)appender).setSyslogHost(syslogHost);  ((SyslogAppender)appender).setFacility(syslogFacility);  logger.addAppender(appender);}  }
class C{  private void validateUrl(FacesContext context,UIComponent uiComponent,String value){  UrlValidator toValidate=new UrlValidator();  toValidate.validate(context,uiComponent,value);}  }
class C{  public void addAttribute(String uri,String localName,String rawName,String type,String value) throws SAXException {  if (m_elemContext.m_startTagOpen) {    addAttributeAlways(uri,localName,rawName,type,value,false);  }}  }
class C{  public Index(Tokenizer tokenizer,Stemmer stemmer,JedisPool pool){  this.tokenizer=tokenizer;  this.stemmer=stemmer;  this.pool=pool;}  }
class C{  public BlobStoreIndexShardSnapshot fromXContent(XContentParser parser,ParseFieldMatcher parseFieldMatcher) throws IOException {  String snapshot=null;  long indexVersion=-1;  long startTime=0;  long time=0;  int numberOfFiles=0;  long totalSize=0;  List<FileInfo> indexFiles=new ArrayList<>();  if (parser.currentToken() == null) {    parser.nextToken();  }  XContentParser.Token token=parser.currentToken();  if (token == XContentParser.Token.START_OBJECT) {    while ((token=parser.nextToken()) != XContentParser.Token.END_OBJECT) {      if (token == XContentParser.Token.FIELD_NAME) {        String currentFieldName=parser.currentName();        token=parser.nextToken();        if (token.isValue()) {          if (parseFieldMatcher.match(currentFieldName,ParseFields.NAME)) {            snapshot=parser.text();          } else           if (parseFieldMatcher.match(currentFieldName,ParseFields.INDEX_VERSION)) {            indexVersion=parser.longValue();          } else           if (parseFieldMatcher.match(currentFieldName,ParseFields.START_TIME)) {            startTime=parser.longValue();          } else           if (parseFieldMatcher.match(currentFieldName,ParseFields.TIME)) {            time=parser.longValue();          } else           if (parseFieldMatcher.match(currentFieldName,ParseFields.NUMBER_OF_FILES)) {            numberOfFiles=parser.intValue();          } else           if (parseFieldMatcher.match(currentFieldName,ParseFields.TOTAL_SIZE)) {            totalSize=parser.longValue();          } else {            throw new ElasticsearchParseException("unknown parameter [{}]",currentFieldName);          }        } else         if (token == XContentParser.Token.START_ARRAY) {          if (parseFieldMatcher.match(currentFieldName,ParseFields.FILES)) {            while ((parser.nextToken()) != XContentParser.Token.END_ARRAY) {              indexFiles.add(FileInfo.fromXContent(parser));            }          } else {            throw new ElasticsearchParseException("unknown parameter [{}]",currentFieldName);          }        } else {          throw new ElasticsearchParseException("unexpected token  [{}]",token);        }      } else {        throw new ElasticsearchParseException("unexpected token [{}]",token);      }    }  }  return new BlobStoreIndexShardSnapshot(snapshot,indexVersion,Collections.unmodifiableList(indexFiles),startTime,time,numberOfFiles,totalSize);}  }
class C{  @Override protected void onDraw(Canvas canvas){  if (mPathWhite != null && mPathBlack != null) {    float textX=Math.max(getPaddingLeft() - (int)(mBubbleWidth / 4.0f),mProgress * mWidth / 100 - (int)(mBubbleWidth / 4.0f));    float textY=mHeight / 2 - mBubbleHeight / 2 + calculateDeltaY();switch (mState) {case STATE_WORKING:      canvas.save();    float speed=(getProgress() - mTarget) / 20;  mBubbleAngle+=speed * 10;if (mBubbleAngle > 20) {  mBubbleAngle=20;}if (mBubbleAngle < -20) {mBubbleAngle=-20;}if (Math.abs(speed) < 1) {mSpeedAngle-=mBubbleAngle / 20;mSpeedAngle*=.9f;}mBubbleAngle+=mSpeedAngle;canvas.rotate(mBubbleAngle,bubbleAnchorX,bubbleAnchorY);canvas.drawPath(mPathBubble,mPaintBubble);canvas.drawText(String.valueOf((int)mProgress) + " %",textX,textY,mPaintText);canvas.restore();break;case STATE_FAILED:canvas.save();canvas.rotate(mFailAngle,bubbleAnchorX,bubbleAnchorY);canvas.drawPath(mPathBubble,mPaintBubble);canvas.rotate(mFailAngle,bubbleAnchorX,textY - mBubbleHeight / 7);mPaintText.setColor(getResources().getColor(mColorFail));textX=Math.max(getPaddingLeft() - (int)(mBubbleWidth / 3.2f),mProgress * mWidth / 100 - (int)(mBubbleWidth / 3.2f));canvas.drawText(getResources().getString(R.string.failed),textX,textY,mPaintText);canvas.restore();break;case STATE_SUCCESS:canvas.save();mPaintText.setColor(getResources().getColor(mColorSuccess));textX=Math.max(getPaddingLeft() - (int)(mBubbleWidth / 3.2f),mProgress * mWidth / 100 - (int)(mBubbleWidth / 3.2f));Matrix flipMatrix=new Matrix();flipMatrix.setScale(mFlipFactor,1,bubbleAnchorX,bubbleAnchorY);canvas.concat(flipMatrix);canvas.drawPath(mPathBubble,mPaintBubble);canvas.concat(flipMatrix);canvas.drawText(getResources().getString(R.string.done),textX,textY,mPaintText);canvas.restore();break;}canvas.drawPath(mPathBlack,mPaintBlack);canvas.drawPath(mPathWhite,mPaintWhite);}}  }
class C{  public final void turnTo(double angle){  angle=Geometric.clampAngleDegree(angle);  orientation=Geometric.clampAngleDegree(angle);  Geometric.rotateTo(velocity,Math.toRadians(orientation));}  }
class C{  void recordAccess(LinkedIdentityHashMap<K,V> m){  LinkedIdentityHashMap<K,V> lm=(LinkedIdentityHashMap<K,V>)m;  if (lm.accessOrder) {    lm.modCount++;    remove();    addBefore(lm.header);  }}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public static final void reverseWinding(Vector2... points){  if (points == null)   throw new NullPointerException(Messages.getString("geometry.nullPointArray"));  int size=points.length;  if (size == 1 || size == 0)   return;  int i=0;  int j=size - 1;  Vector2 temp=null;  while (j > i) {    temp=points[j];    points[j]=points[i];    points[i]=temp;    j--;    i++;  }}  }
class C{  public boolean haveFinished(Jobs jobs){  final StepExecutionState executionState=getState();  return StepExecutionState.STEP_EXECUTION_SUCCESSFUL == executionState || StepExecutionState.STEP_EXECUTION_FAILED == executionState && this.getExecutions().size() >= this.getStep(jobs).getRetries();}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == StructuralTypeRef.class) {switch (derivedFeatureID) {case TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL__AST_STRUCTURAL_MEMBERS:      return TypeRefsPackage.STRUCTURAL_TYPE_REF__AST_STRUCTURAL_MEMBERS;case TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL__STRUCTURAL_TYPE:    return TypeRefsPackage.STRUCTURAL_TYPE_REF__STRUCTURAL_TYPE;case TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL__GEN_STRUCTURAL_MEMBERS:  return TypeRefsPackage.STRUCTURAL_TYPE_REF__GEN_STRUCTURAL_MEMBERS;case TypeRefsPackage.THIS_TYPE_REF_STRUCTURAL__POSTPONED_SUBSTITUTIONS:return TypeRefsPackage.STRUCTURAL_TYPE_REF__POSTPONED_SUBSTITUTIONS;default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public String toString(){  return this.h1 + "<->" + this.h2+ " ["+ this.startTime+ "-"+ (this.endTime > 0 ? this.endTime : "n/a")+ "]";}  }
class C{  private void noSuccessor(){  if (compute == FRAMES) {    Label l=new Label();    l.frame=new Frame();    l.frame.owner=l;    l.resolve(this,code.length,code.data);    previousBlock.successor=l;    previousBlock=l;  } else {    currentBlock.outputStackMax=maxStackSize;  }  currentBlock=null;}  }
class C{  @Override public String generateToolTip(ContourDataset data,int item){  double x=data.getXValue(0,item);  double y=data.getYValue(0,item);  double z=data.getZValue(0,item);  String xString;  if (data.isDateAxis(0)) {    SimpleDateFormat formatter=new java.text.SimpleDateFormat("MM/dd/yyyy hh:mm:ss");    StringBuffer strbuf=new StringBuffer();    strbuf=formatter.format(new Date((long)x),strbuf,new java.text.FieldPosition(0));    xString=strbuf.toString();  } else {    xString=this.valueForm.format(x);  }  if (!Double.isNaN(z)) {    return "X: " + xString + ", Y: "+ this.valueForm.format(y)+ ", Z: "+ this.valueForm.format(z);  } else {    return "X: " + xString + ", Y: "+ this.valueForm.format(y)+ ", Z: no data";  }}  }
class C{  public float sp2px(float sp){  final float scale=getResources().getDisplayMetrics().scaledDensity;  return sp * scale;}  }
class C{  public JPanel generateContentPanelHelp(String title,String help_title,String help_link,String icon){  ConfigurationController config=new ConfigurationController(true);  JPanel panelContent=new JPanel(new BorderLayout());  JPanel header=new JPanel();  ImageIcon icon_image=generateIcon(icon);  header.add(new JLabel(title,icon_image,JLabel.CENTER)).setForeground(Color.WHITE);  header.setBackground(Color.decode("#F75D59"));  panelContent.setBorder(BorderFactory.createLineBorder(Color.BLACK));  JPanel container=new JPanel();  container.setLayout(new BoxLayout(container,BoxLayout.Y_AXIS));  if (!(help_title.equals("") && help_link.equals(""))) {    container.add(new URLLabel(help_title,help_link));    container.add(new JLabel("   "));  }  container.add(new JLabel("   "));  if ((!this.showGroupsHelp) && (!this.showLargeDatabase) && (!this.showScalability)&& (!this.showPolicies)&& (!this.showExtensionAttributes)&& (!this.showSystemRequirements)&& (!this.showCheckinFreq)&& (!this.showPrinters)&& (!this.showScripts)&& (!this.loginInOutHooks)&& (!this.strongerPassword)) {    JLabel text=new JLabel("<html>The JSS is in excellent health.</html>");    text.setHorizontalAlignment(SwingConstants.CENTER);    container.add(text);    JLabel thumbsup=new JLabel(StringConstants.THUMBSUP);    thumbsup.setHorizontalAlignment(SwingConstants.CENTER);    container.add(thumbsup);  } else {    container.add(new JLabel(""));    JLabel text=new JLabel("<html>The below links will be helpful in solving issues<br>detected by this tool in the JSS.<br></html>");    container.add(text);    container.add(new JLabel("       "));  }  if (this.mysql_osx_version_bug) {    container.add(new URLLabel("<html><u>The tool has detected a version of OSX/MySQL that is known</u><br><u>to cause issues. Click for a link to the bug report.</u><br></html>","http://bugs.mysql.com/bug.php?id=71960"));    container.add(new JLabel("   "));  }  if (this.showGroupsHelp) {    container.add(new URLLabel("<html><u>One or more of the smart groups has potential issues.</u><br><u>Click for recommended configuration.</u><br></html>","Smart Groups that contain more than " + config.getValue("configurations,smart_groups","criteria_count")[0] + " can increase smart group calculation times.\nAttempt to limit the number of criteria, especially when using the group for scoping.\nSmart Groups with other Smart Groups as criteria are also discouraged.\nPlease consider revising these groups."));    container.add(new JLabel("   "));  }  if (this.showLargeDatabase) {    container.add(new URLLabel("<html><u>The JSS database is larger than expected.</u><br><u>Click for a few common reasons and solutions.</u></html>","LINK TO LARGE DB/SCALABILITY  KB ARTICLE"));    container.add(new JLabel("   "));  }  if (this.showScalability) {    container.add(new URLLabel("<html><u>The JSS could encounter scalability problems in the future.</u><br><u>Click for a scalability guide.</u></html>","LINK TO GENERAL SCALABILITY ARTICLE"));    container.add(new JLabel("   "));  }  if (this.showPolicies) {    container.add(new URLLabel("<html><u>One or more policies could potentially have issues.</u> <br><u>Click to find out why.</u></html>","Policies that are ongoing, triggered by a check in and include an update inventory\ncan potentially cause issues. The database can grow in size relatively fast. Make sure these type of policies\nare not running to often."));    container.add(new JLabel("   "));  }  if (this.showExtensionAttributes) {    container.add(new URLLabel("<html><u>The tool has detected a large amount of extension attributes.</u> <br><u>Click to learn about inventory updates.</u></html>","Every time an update inventory occurs, the extension attributes must \ncalculate. This isn't a big deal for a number \nof EAs; but once the JSS contains a lot it starts to add up.\nThis is especially true if the extension attribute is a script."));    container.add(new JLabel("   "));  }  if (this.showSystemRequirements) {    container.add(new URLLabel("<html><u>One or more recommended system requirement has not been met.</u> <br><u>Click to view system requirements.</u></html>","http://resources.jamfsoftware.com/documents/products/Casper-Suite-System-Requirements.pdf"));    container.add(new JLabel("   "));  }  if (this.showCheckinFreq) {    container.add(new URLLabel("<html><u>Given the JSS environment size, the check in frequency is a bit too frequent.</u><br><u>Click to learn about recommended times.</u></html>","500 Devices: Any check in frequency is recommended.\n\n500-5,000 Devices: 15-30 Min check in time recommended\n\n5,000+: 30 Min check in time recommended."));    container.add(new JLabel("   "));  }  if (this.showPrinters) {    container.add(new URLLabel("<html><u>Printers with large driver packages detected.</u><br><u>Click to learn about increasing max packet size.</u></html>","Often times Xerox printers have driver packages over\n1GB in size. This requires us to update the SQL max packed size."));    container.add(new JLabel("   "));  }  if (this.showScripts) {    container.add(new URLLabel("<html><u>The tool has identified one or more issues with your scripts.</u><br><u>Click to learn about common script issues.</u></html>","This tool checks for multiple things that could be \nwrong with scripts. For example, using 'rm-rf' (discouraged) or referencing the old JSS binary location. \nThey could also contain the 'jamf recon' command in the script. This can cause database bloat.\nPlease double check the scripts listed."));    container.add(new JLabel("   "));  }  if (this.strongerPassword) {    container.add(new URLLabel("<html><u>The JSS login password requirement is weak.</u><br><u>Consider updating it.</u></html>",this.JSSURL + "/passwordPolicy.html"));    container.add(new JLabel("   "));  }  if (this.loginInOutHooks) {    container.add(new URLLabel("<html><u>Log In/Out hooks have not been configured.</u><br><u>Click to configure them.</u></html>",this.JSSURL + "/computerCheckIn.html"));    container.add(new JLabel("   "));  }  if (this.showChange && (!this.isCloudJSS)) {    container.add(new URLLabel("<html><u>Change Management is not enabled.</u><br><u>Click to enable it.</u></html>",this.JSSURL + "/changeManagement.html"));    container.add(new JLabel("   "));  }  if (this.mobileDeviceTableCountMismatch) {    container.add(new URLLabel("<html><u>This JSS database contains a mismatch for computer device counts.</u><br><u>Click to learn more.</u></html>","Ghost records in the database can cause strain on the JSS Server.\nIf the JSS is experiencing performance issues, please contact support.\nThe device counts can be viewed near the end of the report JSON."));    container.add(new JLabel("   "));  }  if (this.computerDeviceTableCountMismatch) {    container.add(new URLLabel("<html><u>This JSS database contains a mismatch for mobile device counts.</u><br><u>Click to learn more.</u></html>","Ghost records in the database can cause strain on the JSS Server.\nIf the JSS is experiencing performance issues, please contact support.\nThe device counts can be viewed near the end of the report JSON."));    container.add(new JLabel("   "));  }  container.setBackground(Color.decode("#FFFFFF"));  JScrollPane data=new JScrollPane(container);  panelContent.add(header,BorderLayout.NORTH);  panelContent.add(data,BorderLayout.CENTER);  data.getViewport().setBackground(Color.WHITE);  return panelContent;}  }
class C{  public void logEvent(String eventName,Bundle parameters){  logEvent(eventName,null,parameters,false);}  }
class C{  public static String toSummaryString(Instances i,HashMap<String,String[]> FDs){  StringBuilder summary=new StringBuilder();  summary.append("Num FDs: " + FDs.keySet().size() + "\n\n");  int counter=1;  for (  String premise : FDs.keySet()) {    StringBuilder fd=new StringBuilder();    fd.append(Utils.padLeft("" + (counter++),4) + "   ");    fd.append(i.attribute(Integer.parseInt(premise)).name());    fd.append(" -> ");    for (    String RHS : FDs.get(premise)) {      fd.append(i.attribute(Integer.parseInt(RHS)).name() + ", ");    }    fd.deleteCharAt(fd.length() - 1);    fd.deleteCharAt(fd.length() - 1);    summary.append(fd.toString() + "\n");  }  return summary.toString();}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.N4_INTERFACE_DECLARATION;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:40.274 -0500",hash_original_method="E890325AD4CF04CF90789A3947029902",hash_generated_method="3B75490E6FBB8EBCBCA6C1BB22DDEA67") void remove(){  InputMethodManager imm=InputMethodManager.getInstance(mContext);  if (imm.isActive(this)) {    imm.hideSoftInputFromWindow(getWindowToken(),0);  }  mInsideRemove=true;  boolean isFocused=hasFocus();  mWebView.removeView(this);  if (isFocused) {    mWebView.requestFocus();  }  mInsideRemove=false;  mHandler.removeCallbacksAndMessages(null);}  }
class C{  public int findJulianDayFromPosition(int position){  if (mRowInfo == null || position < 0) {    return 0;  }  int len=mRowInfo.size();  if (position >= len)   return 0;  for (int index=position; index >= 0; index--) {    RowInfo row=mRowInfo.get(index);    if (row.mType == TYPE_DAY) {      return row.mDay;    }  }  return 0;}  }
class C{  boolean resolve(final MethodWriter owner,final int position,final byte[] data){  boolean needUpdate=false;  this.status|=RESOLVED;  this.position=position;  int i=0;  while (i < referenceCount) {    int source=srcAndRefPositions[i++];    int reference=srcAndRefPositions[i++];    int offset;    if (source >= 0) {      offset=position - source;      if (offset < Short.MIN_VALUE || offset > Short.MAX_VALUE) {        int opcode=data[reference - 1] & 0xFF;        if (opcode <= Opcodes.JSR) {          data[reference - 1]=(byte)(opcode + 49);        } else {          data[reference - 1]=(byte)(opcode + 20);        }        needUpdate=true;      }      data[reference++]=(byte)(offset >>> 8);      data[reference]=(byte)offset;    } else {      offset=position + source + 1;      data[reference++]=(byte)(offset >>> 24);      data[reference++]=(byte)(offset >>> 16);      data[reference++]=(byte)(offset >>> 8);      data[reference]=(byte)offset;    }  }  return needUpdate;}  }
class C{  private void displaySimple(PrintStream output){  output.println("First-Order Effects");  for (int j=0; j < P; j++) {    double[] a0=new double[N];    double[] a1=new double[N];    double[] a2=new double[N];    for (int i=0; i < N; i++) {      a0[i]=A[i];      a1[i]=C_A[i][j];      a2[i]=B[i];    }    double value=computeFirstOrder(a0,a1,a2,N);    output.print(value < 0 ? 0.0 : value);    if (j < P - 1) {      output.print('\t');    }  }  output.println();  output.println("Total-Order Effects");  for (int j=0; j < P; j++) {    double[] a0=new double[N];    double[] a1=new double[N];    double[] a2=new double[N];    for (int i=0; i < N; i++) {      a0[i]=A[i];      a1[i]=C_A[i][j];      a2[i]=B[i];    }    double value=computeTotalOrder(a0,a1,a2,N);    output.print(value < 0 ? 0.0 : value);    if (j < P - 1) {      output.print('\t');    }  }  output.println();}  }
class C{  @SuppressWarnings("deprecation") private void reply(ParallelTaskState state,Exception t){  task.setState(state);  logger.info("task.state : " + task.getState().toString());  logger.info("task.totalJobNumActual : " + task.getRequestNumActual() + " InitCount: "+ task.getRequestNum());  logger.info("task.response received Num {} ",task.getResponsedNum());  if (state == ParallelTaskState.COMPLETED_WITH_ERROR) {    task.getTaskErrorMetas().add(new TaskErrorMeta(TaskErrorType.COMMAND_MANAGER_ERROR,t == null ? "NA" : t.getLocalizedMessage()));    String curTimeStr=PcDateUtils.getNowDateTimeStrStandard();    logger.info("COMPLETED_WITH_ERROR.  " + this.requestCount + " at time: "+ curTimeStr);    if (t instanceof ExecutionManagerExecutionException && ((ExecutionManagerExecutionException)t).getType() == ManagerExceptionType.TIMEOUT) {      for (      Entry<String,NodeReqResponse> entry : task.getParallelTaskResult().entrySet()) {        if (entry.getValue() != null && entry.getValue().getSingleTaskResponse() == null) {          ResponseOnSingleTask response=new ResponseOnSingleTask();          response.setReceiveTimeInManager(curTimeStr);          response.setError(true);          response.setErrorMessage(t.getLocalizedMessage() + " Response was not received");          response.setReceiveTime(curTimeStr);          entry.getValue().setSingleTaskResponse(response);          logger.info("Found empty response for {}",entry.getKey());        }      }    }  } else {    logger.info("SUCCESSFUL GOT ON ALL RESPONSES: Received all the expected messages. Count matches: " + this.requestCount + " at time: "+ PcDateUtils.getNowDateTimeStrStandard());  }  ResponseFromManager batchResponseFromManager=new ResponseFromManager(responseMap.size());  responseMap.clear();  director.tell(batchResponseFromManager,getSelf());  endTime=System.currentTimeMillis();  task.setExecutionEndTime(endTime);  double durationSec=(endTime - startTime) / 1000.0;  task.setDurationSec(durationSec);  logger.info("\nTime taken to get all responses back : " + durationSec + " secs");  task.setExecutionEndTime(endTime);  for (  ActorRef worker : workers.values()) {    getContext().stop(worker);  }  workers.clear();  if (batchSenderAsstManager != null && !batchSenderAsstManager.isTerminated()) {    getContext().stop(batchSenderAsstManager);  }  if (timeoutMessageCancellable != null) {    timeoutMessageCancellable.cancel();  }  if (getSelf() != null && !getSelf().isTerminated()) {    getContext().stop(getSelf());  }}  }
class C{  private static boolean slowEquals(byte[] a,byte[] b){  int diff=a.length ^ b.length;  for (int i=0; i < a.length && i < b.length; i++)   diff|=a[i] ^ b[i];  return diff == 0;}  }
class C{  public CubicArea(Location corner1,Location corner2){  if (corner1.getWorld() != corner2.getWorld()) {    throw new IllegalArgumentException("The two corners must be in the same world.");  }  this.world=corner1.getWorld();  if (corner1.getBlockX() > corner2.getBlockX()) {    this.x1=corner1.getBlockX();    this.x2=corner2.getBlockX();  } else {    this.x1=corner2.getBlockX();    this.x2=corner1.getBlockX();  }  if (corner1.getBlockY() > corner2.getBlockY()) {    this.y1=corner1.getBlockY();    this.y2=corner2.getBlockY();  } else {    this.y1=corner2.getBlockY();    this.y2=corner1.getBlockY();  }  if (corner1.getBlockZ() > corner2.getBlockZ()) {    this.z1=corner1.getBlockZ();    this.z2=corner2.getBlockZ();  } else {    this.z1=corner2.getBlockZ();    this.z2=corner1.getBlockZ();  }}  }
class C{  protected void sequence_TerminalExpression(ISerializationContext context,ColorLiteral semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.EXPRESSION__OP) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.EXPRESSION__OP));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getTerminalExpressionAccess().getOpCOLORTerminalRuleCall_2_1_0(),semanticObject.getOp());  feeder.finish();}  }
class C{  public void visitIincInsn(int var,int increment){  if (mv != null) {    mv.visitIincInsn(var,increment);  }}  }
class C{  public static void removeTestsThatDoNotCompile(List<TestCase> tests){  logger.info("Going to execute: removeTestsThatDoNotCompile");  if (tests == null || tests.isEmpty()) {    return;  }  Iterator<TestCase> iter=tests.iterator();  while (iter.hasNext()) {    if (!TimeController.getInstance().hasTimeToExecuteATestCase()) {      break;    }    TestCase test=iter.next();    File dir=createNewTmpDir();    if (dir == null) {      logger.warn("Failed to create tmp dir");      return;    }    logger.debug("Created tmp folder: " + dir.getAbsolutePath());    try {      List<TestCase> singleList=new ArrayList<TestCase>();      singleList.add(test);      List<File> generated=compileTests(singleList,dir);      if (generated == null) {        iter.remove();        String code=test.toCode();        logger.error("Failed to compile test case:\n" + code);      }    }  finally {      if (dir != null) {        try {          FileUtils.deleteDirectory(dir);          logger.debug("Deleted tmp folder: " + dir.getAbsolutePath());        } catch (        Exception e) {          logger.error("Cannot delete tmp dir: " + dir.getAbsolutePath(),e);        }      }    }  }}  }
class C{  protected static final float incrementValue(final float baseline,final float step,final float gamma,final float lambda){  return baseline + step - gamma * lambda * baseline;}  }
class C{  public FindInfo(Vectorer vec,String sText,int iField,boolean bMatchCase,int iMatch){  m_vec=vec;  m_sText=sText;  m_iField=iField;  m_bMatchCase=bMatchCase;  m_iMatch=iMatch;  if (iMatch == MATCH_REGEXP) {    m_TextPattern=m_bMatchCase ? Pattern.compile(m_sText) : Pattern.compile(m_sText,Pattern.CASE_INSENSITIVE);  } else {    m_sTextCompare=m_bMatchCase ? m_sText : m_sText.toUpperCase();  }}  }
class C{  public boolean isAcceptCorporate(){  Object oo=get_Value(COLUMNNAME_AcceptCorporate);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public void bindDisappearEvent(WXComponent component){  setWatch(AppearanceHelper.DISAPPEAR,component,true);}  }
class C{  public void testToArray1_BadArg(){  LinkedBlockingQueue q=populatedQueue(SIZE);  try {    q.toArray(new String[10]);    shouldThrow();  } catch (  ArrayStoreException success) {  }}  }
class C{  public MyDefaultListCellRenderer(){  setOpaque(false);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:09.207 -0500",hash_original_method="745591040780C0D8C5D54F59927D5E79",hash_generated_method="8923EB396029333E94EFB164EAB0AD22") public void rLineTo(float dx,float dy){  isSimplePath=false;  addTaint(dx + dy);}  }
class C{  public static Geo[] posToGa(String coords){  return posToGa(coords.split(" "));}  }
class C{  default B addEffect(final FireworkEffect effect){  this.meta().addEffect(effect);  return this.getBuilder();}  }
class C{  public static void addPermission(Permission perm,ClassLoader loader){  for (; loader != null; loader=loader.getParent()) {    if (loader instanceof EnvironmentClassLoader) {      EnvironmentClassLoader envLoader=(EnvironmentClassLoader)loader;      envLoader.addPermission(perm);    }  }}  }
class C{  @Override public ValueLobDb copyToTemp(){  return this;}  }
class C{  public HttpURLConnection(final HttpMethod method,final URL url){  super(url);  this.method=method;  this.url=url;}  }
class C{  public void updateLookAndFeel(String name,String className){  try {    UIManager.setLookAndFeel(className);  } catch (  Exception e) {    String errMsg="The " + name + " look-and-feel ";    if (e instanceof UnsupportedLookAndFeelException) {      errMsg+="is not supported on this platform.";    } else     if (e instanceof ClassNotFoundException) {      errMsg+="could not be found.";    } else {      errMsg+="could not be loaded.";    }    log.error(errMsg);  }}  }
class C{  public TypeMapperComponentImpl(){  this.mappers=new ConcurrentHashMap<>();  install(Date.class,null);  install(Date.class,null);  install(Date.class,null);  install(Timestamp.class,null);  install(Timestamp.class,null);  install(Timestamp.class,null);  install(Time.class,null);  install(Time.class,null);  install(Time.class,null);  install(String.class,null);  install(String.class,null);  install(String.class,null);  install(BigDecimal.class,null);  install(Clob.class,null);  install(Integer.class,null);  install(Byte.class,null);  install(Short.class,null);  install(Integer.class,null);  install(Long.class,null);  install(Float.class,null);  install(Double.class,null);  install(Boolean.class,null);  install(Character.class,null);}  }
class C{  private <T extends Request,U extends Response>void handleResponse(T request,U response,Throwable error,CompletableFuture<U> future){  if (open) {    if (error == null) {      if (response.status() == Response.Status.OK || response.error() == CopycatError.Type.COMMAND_ERROR || response.error() == CopycatError.Type.QUERY_ERROR || response.error() == CopycatError.Type.APPLICATION_ERROR || response.error() == CopycatError.Type.UNKNOWN_SESSION_ERROR) {        future.complete(response);      } else {        next().whenComplete(null);      }    } else     if (error instanceof ConnectException || error instanceof TimeoutException || error instanceof TransportException|| error instanceof ClosedChannelException) {      next().whenComplete(null);    } else {      future.completeExceptionally(error);    }  }}  }
class C{  private void forceGC(){  System.gc();  try {    Thread.sleep(m_gctimeout);  } catch (  Exception ex) {  }}  }
class C{  public void destroy(){  log.fine("destroy");}  }
class C{  public Properties toProperties(){  Properties properties=new Properties();  properties.setProperty("rack",rack);  properties.setProperty("dc",dataCenter);  return properties;}  }
class C{  public DataReader(){}  }
class C{  public void expungeStaleEntries(){  target.expungeStaleEntries();}  }
class C{  public static void saveChartAsJPEG(File file,JFreeChart chart,int width,int height) throws IOException {  saveChartAsJPEG(file,chart,width,height,null);}  }
class C{  public SearchEvent(SearchPanel source,String searchText,boolean regExp){  super(source);  m_Parameters=new SearchParameters(searchText,regExp);}  }
class C{  static boolean isAlphaNum(int ch){  return isAlpha(ch) || isNumeric(ch);}  }
class C{  public void addAttachment(Attachment attachment){  addProperty(attachment);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SXTAB");  translateAll(environment,instruction,"SXTAB",instructions);}  }
class C{  @Override public synchronized CloneableIterator<byte[]> keys(final boolean up,final byte[] firstKey) throws IOException {  this.flushBuffer();  return super.keys(up,firstKey);}  }
class C{  public static final int red(int color){  return (color >> 16) & 0xFF;}  }
class C{  private void showPreviousView(){  try {    FormController formController=Collect.getInstance().getFormController();    if (formController.currentPromptIsQuestion()) {      saveAnswersForCurrentScreen(DO_NOT_EVALUATE_CONSTRAINTS);    }    if (formController.getEvent() != FormEntryController.EVENT_BEGINNING_OF_FORM) {      int event=formController.stepToPreviousScreenEvent();      if (event == FormEntryController.EVENT_BEGINNING_OF_FORM || event == FormEntryController.EVENT_GROUP || event == FormEntryController.EVENT_QUESTION) {        if ((++viewCount) % SAVEPOINT_INTERVAL == 0) {          nonblockingCreateSavePointData();        }      }      View next=createView(event,false);      showView(next,AnimationType.LEFT);    } else {      mBeenSwiped=false;    }  } catch (  JavaRosaException e) {    Log.e(t,e.getMessage(),e);    createErrorDialog(e.getCause().getMessage(),DO_NOT_EXIT);  }}  }
class C{  public static Object unwrap(Object obj){  if (obj == Primitive.VOID)   return null;  if (obj instanceof Primitive)   return ((Primitive)obj).getValue(); else   return obj;}  }
class C{  public Object clone(){  try {    Decimal other=(Decimal)super.clone();    return other;  } catch (  CloneNotSupportedException e) {    return null;  }}  }
class C{  public boolean updateLockdownVpn(){  try {    return mService.updateLockdownVpn();  } catch (  RemoteException e) {    return false;  }}  }
class C{  public static StorageSizes computeSizes(Frame<BasicValue> frame,int offset,int length){  Validate.notNull(frame);  Validate.isTrue(offset >= 0);  Validate.isTrue(length >= 0);  Validate.isTrue(offset < frame.getStackSize());  Validate.isTrue(offset + length <= frame.getStackSize());  int intsSize=0;  int longsSize=0;  int floatsSize=0;  int doublesSize=0;  int objectsSize=0;  for (int i=offset + length - 1; i >= offset; i--) {    BasicValue basicValue=frame.getStack(i);    Type type=basicValue.getType();    if ("Lnull;".equals(type.getDescriptor())) {      continue;    }switch (type.getSort()) {case Type.BOOLEAN:case Type.BYTE:case Type.SHORT:case Type.CHAR:case Type.INT:      intsSize++;    break;case Type.FLOAT:  floatsSize++;break;case Type.LONG:longsSize++;break;case Type.DOUBLE:doublesSize++;break;case Type.ARRAY:case Type.OBJECT:objectsSize++;break;case Type.METHOD:case Type.VOID:default :throw new IllegalStateException();}}return new StorageSizes(intsSize,longsSize,floatsSize,doublesSize,objectsSize);}  }
class C{  public CompiereColor(Color lineColor,Color backColor,float lineWidth,int lineDistance){  if (lineColor == null || backColor == null)   throw new java.lang.IllegalArgumentException(EXCEPTION_TEXT);  m_type=TYPE_LINES;  m_primaryColor=backColor;  m_secondaryColor=lineColor;  m_lineWidth=lineWidth;  m_lineDistance=lineDistance;}  }
class C{  public void test_readFully$BII() throws IOException {  byte[] buf=new byte[testLength];  RandomAccessFile raf=new java.io.RandomAccessFile(fileName,"rw");  raf.writeBytes(testString);  raf.seek(0);  try {    raf.readFully(null);    fail("Test 1: NullPointerException expected.");  } catch (  NullPointerException e) {  }  raf.readFully(buf,5,testLength - 10);  for (int i=0; i < 5; i++) {    assertEquals("Test 2: Incorrect bytes read;",0,buf[i]);  }  assertEquals("Test 3: Incorrect bytes written or read;",testString.substring(0,testLength - 10),new String(buf,5,testLength - 10));  try {    raf.readFully(buf,3,testLength - 6);    fail("Test 4: EOFException expected.");  } catch (  EOFException e) {  }  try {    raf.readFully(buf,-1,1);    fail("Test 5: IndexOutOfBoundsException expected.");  } catch (  IndexOutOfBoundsException e) {  }  try {    raf.readFully(buf,0,-1);    fail("Test 6: IndexOutOfBoundsException expected.");  } catch (  IndexOutOfBoundsException e) {  }  try {    raf.readFully(buf,2,testLength);    fail("Test 7: IndexOutOfBoundsException expected.");  } catch (  IndexOutOfBoundsException e) {  }  raf.close();  try {    raf.readFully(buf);    fail("Test 8: IOException expected.");  } catch (  IOException e) {  }}  }
class C{  public UnitSelectorDialog(ClientGUI cl,UnitLoadingDialog uld){  super(cl.frame,Messages.getString("MechSelectorDialog.title"),true);  unitLoadingDialog=uld;  if (null != cl) {    frame=cl.getFrame();    client=cl.getClient();    clientgui=cl;  }  unitModel=new MechTableModel();  initComponents();  GUIPreferences guip=GUIPreferences.getInstance();  int width=guip.getMechSelectorSizeWidth();  int height=guip.getMechSelectorSizeHeight();  setSize(width,height);  if (null != cl) {    setLocationRelativeTo(cl.frame);    asd=new AdvancedSearchDialog(cl.frame,client.getGame().getOptions().intOption("year"));  }}  }
class C{  public void receiveErrorqueryStorageLuns(java.lang.Exception e){}  }
class C{  public double num(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return m_val;}  }
class C{  public boolean addURL(Path path){  return addURL(path,true);}  }
class C{  private synchronized int decrementSessionRefs(){  if (refCnt != 0)   refCnt--;  return refCnt;}  }
class C{  public void create(){  setLayout(createLayoutManager());  createComponents();}  }
class C{  public boolean isEmpty(){  return m_keys.isEmpty();}  }
class C{  public TransactionOutput addOutput(TransactionOutput to){  unCache();  to.setParent(this);  outputs.add(to);  adjustLength(outputs.size(),to.length);  return to;}  }
class C{  public static void testSeven(){  for (int i=0; i < 3; i++) {    Bridge.desactivate();    LogManager manager=new LogManager(){    };    Logger logger1=manager.getLogger("");    Logger logger1b=manager.getLogger("");    assertNull(logger1);    assertNull(logger1b);    Logger global=new Bridge.CustomLogger(Logger.GLOBAL_LOGGER_NAME);    manager.addLogger(global);    Logger logger2=manager.getLogger(Logger.GLOBAL_LOGGER_NAME);    Logger logger2b=manager.getLogger(Logger.GLOBAL_LOGGER_NAME);    assertNotNull(logger2);    assertNotNull(logger2b);    assertEquals(logger2,global);    assertEquals(logger2b,global);    Logger logger3=manager.getLogger("");    Logger logger3b=manager.getLogger("");    assertNull(logger3);    assertNull(logger3b);    Logger root=new Bridge.CustomLogger("");    manager.addLogger(root);    Logger logger4=manager.getLogger("");    Logger logger4b=manager.getLogger("");    assertNotNull(logger4);    assertNotNull(logger4b);    assertEquals(logger4,root);    assertEquals(logger4b,root);    for (int j=0; j < 3; j++) {      Bridge.changeContext();      Logger logger5=manager.getLogger("");      Logger logger5b=manager.getLogger("");      Logger expectedRoot=(System.getSecurityManager() == null ? root : null);      assertEquals(logger5,expectedRoot);      assertEquals(logger5b,expectedRoot);      if (System.getSecurityManager() != null) {        assertNull(manager.getLogger(Logger.GLOBAL_LOGGER_NAME));      } else {        assertEquals(global,manager.getLogger(Logger.GLOBAL_LOGGER_NAME));      }      Logger global2=new Bridge.CustomLogger(Logger.GLOBAL_LOGGER_NAME);      manager.addLogger(global2);      Logger logger6=manager.getLogger(Logger.GLOBAL_LOGGER_NAME);      Logger logger6b=manager.getLogger(Logger.GLOBAL_LOGGER_NAME);      Logger expectedGlobal=(System.getSecurityManager() == null ? global : global2);      assertNotNull(logger6);      assertNotNull(logger6b);      assertEquals(logger6,expectedGlobal);      assertEquals(logger6b,expectedGlobal);      if (System.getSecurityManager() != null) {        assertNull(manager.getLogger(""));      } else {        assertEquals(root,manager.getLogger(""));      }      Logger root2=new Bridge.CustomLogger("");      manager.addLogger(root2);      expectedRoot=(System.getSecurityManager() == null ? root : root2);      Logger logger7=manager.getLogger("");      Logger logger7b=manager.getLogger("");      assertNotNull(logger7);      assertNotNull(logger7b);      assertEquals(logger7,expectedRoot);      assertEquals(logger7b,expectedRoot);    }  }}  }
class C{  public AnnotationLayer(){}  }
class C{  private static double remainderPiFast(double angle){  if (USE_JDK_MATH) {    return jdkRemainderPi(angle);  }  boolean negateResult=false;  if (angle < 0.0) {    angle=-angle;    negateResult=true;  }  if (angle <= TWO_POW_26 * Math.PI) {  } else   if (angle <= TWO_POW_52 * Math.PI) {    final double fn=(int)(angle * (PI_INV / TWO_POW_26) + 0.5);    angle=angle - fn * (PI_HI * TWO_POW_26) - fn * (PI_LO * TWO_POW_26);    if (angle < 0.0) {      angle=-angle;      negateResult=!negateResult;    }  } else   if (angle < Double.POSITIVE_INFINITY) {    return 0.0;  } else {    return Double.NaN;  }  final double fn=(int)(angle * PI_INV + 0.5);  angle=angle - fn * PI_HI - fn * PI_LO;  if (angle < -Math.PI / 2) {    angle=angle + PI_HI + PI_LO;  } else   if (angle > Math.PI / 2) {    angle=angle - PI_HI - PI_LO;  }  return negateResult ? -angle : angle;}  }
class C{  public void didBatchUpdates(){  removeClearedEntries();}  }
class C{  public synchronized boolean obtainLock(Connection conn,String lockName) throws LockException {  lockName=lockName.intern();  if (log.isDebugEnabled()) {    log.debug("Lock '" + lockName + "' is desired by: "+ Thread.currentThread().getName());  }  if (!isLockOwner(conn,lockName)) {    if (log.isDebugEnabled()) {      log.debug("Lock '" + lockName + "' is being obtained: "+ Thread.currentThread().getName());    }    while (locks.contains(lockName)) {      try {        this.wait();      } catch (      InterruptedException ie) {        if (log.isDebugEnabled()) {          log.debug("Lock '" + lockName + "' was not obtained by: "+ Thread.currentThread().getName());        }      }    }    Transaction t=getTransaction();    if (t != null) {      try {        t.registerSynchronization(new SemaphoreSynchronization(lockName));      } catch (      Exception e) {        throw new LockException("Failed to register semaphore with Transaction.",e);      }    }    if (log.isDebugEnabled()) {      log.debug("Lock '" + lockName + "' given to: "+ Thread.currentThread().getName());    }    getThreadLocks().add(lockName);    locks.add(lockName);  } else   if (log.isDebugEnabled()) {    log.debug("Lock '" + lockName + "' already owned by: "+ Thread.currentThread().getName()+ " -- but not owner!",new Exception("stack-trace of wrongful returner"));  }  return true;}  }
class C{  @FXML public void loadFile(){  Alert alert=new Alert(Alert.AlertType.CONFIRMATION);  alert.setTitle("WARNING");  alert.setHeaderText("You are about to load a new Fingerprint file, the fingerprint you are\ncurrently viewing will be closed and any unsaved changed will be lost.");  alert.setContentText("Do you wish to proceed?");  Optional<ButtonType> result=alert.showAndWait();  if (result.get() == ButtonType.OK) {    FileChooser fc=new FileChooser();    fc.setTitle("Load a Fingerprint");    if (this.defaultFingerprintFolder != null) {      fc.setInitialDirectory(this.defaultFingerprintFolder);    }    fc.getExtensionFilters().add(new FileChooser.ExtensionFilter("Fingerprint","*.xml"));    File file=fc.showOpenDialog(this.stage);    if (file != null) {      this.defaultFingerprintFolder=file.getParentFile();      loadFile(file);    }  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.364 -0500",hash_original_method="C2BB18E49C39C3C8DD51F191BCC5B3D5",hash_generated_method="3172C7A30AC9EA9D20E23D2663796EE5") public static char reverseBytes(char c){  return (char)((c << 8) | (c >> 8));}  }
class C{  @Override protected EClass eStaticClass(){  return EipPackage.Literals.CHANNEL;}  }
class C{  public void installUI(JComponent c){  super.installUI(c);}  }
class C{  public ActionErrors validateForm(MotivoPrestamoForm motivosForm,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  if (StringUtils.isEmpty(motivosForm.getMotivo())) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(Constants.ETIQUETA_DESCRIPCION,request.getLocale())));  }  if (motivosForm.getTipoUsuario() == 0) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(Constants.ETIQUETA_TIPO_USUARIO,request.getLocale())));  }  if (motivosForm.getTipoUsuario() == PrestamosConstants.TIPO_INTERNO_INT && motivosForm.getVisibilidad() == 0) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(Constants.ETIQUETA_VISIBILIDAD,request.getLocale())));  }  return errors;}  }
class C{  public boolean hasLineNumbers(){  return hasLineNumbers;}  }
class C{  public static boolean deleteFiles(final File file){  boolean ok=true;  if (file != null) {    if (file.isDirectory()) {      final File[] files=file.listFiles();      if (files != null) {        for (        final File f : files) {          if (f.isFile()) {            ok&=f.delete();          }        }      } else {        ok=false;      }      ok&=file.delete();    }  }  return ok;}  }
class C{  public boolean isCopyMatchingFields(){  return copyMatchingFields;}  }
class C{  public void addError(String msg,RefactoringStatusContext context){  fEntries.add(new RefactoringStatusEntry(RefactoringStatus.ERROR,msg,context));  fSeverity=Math.max(fSeverity,ERROR);}  }
class C{  public String login(int AD_Org_ID,int AD_Role_ID,int AD_User_ID){  log.info("AD_User_ID=" + AD_User_ID);  return null;}  }
class C{  public void beforeFirst() throws SQLException {  crsInternal.beforeFirst();}  }
class C{  public FlatteningPathIterator(PathIterator src,double flatness,int limit){  if (flatness < 0.0) {    throw new IllegalArgumentException("flatness must be >= 0");  }  if (limit < 0) {    throw new IllegalArgumentException("limit must be >= 0");  }  this.src=src;  this.squareflat=flatness * flatness;  this.limit=limit;  this.levels=new int[limit + 1];  next(false);}  }
class C{  public void checkFieldCacheSource() throws SolrException {  if (!(indexed() || hasDocValues())) {    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"can not use FieldCache on a field which is neither indexed nor has doc values: " + getName());  }  if (multiValued()) {    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"can not use FieldCache on multivalued field: " + getName());  }}  }
class C{  public final synchronized void connect(String hostname,int port,String password) throws IOException, IrcException, NickAlreadyInUseException {  _registered=false;  _server=hostname;  _port=port;  _password=password;  if (isConnected()) {    throw new IOException("The PircBot is already connected to an IRC server.  Disconnect first.");  }  _autoNickTries=1;  this.removeAllChannels();  if (_useSSL) {    try {      SSLContext context=SSLContext.getInstance("TLS");      context.init(null,new X509TrustManager[]{new NaiveTrustManager()},null);      SSLSocketFactory factory=context.getSocketFactory();      SSLSocket ssocket=(SSLSocket)factory.createSocket(hostname,port);      setSNIHost(factory,ssocket,hostname);      ssocket.startHandshake();      _socket=ssocket;    } catch (    Exception e) {      throw new IOException("Cannot open SSL socket");    }  } else {    _socket=new Socket(hostname,port);  }  _inetAddress=_socket.getLocalAddress();  InputStreamReader inputStreamReader=null;  OutputStreamWriter outputStreamWriter=null;  if (getEncoding() != null) {    inputStreamReader=new InputStreamReader(_socket.getInputStream(),getEncoding());    outputStreamWriter=new OutputStreamWriter(_socket.getOutputStream(),getEncoding());  } else {    inputStreamReader=new InputStreamReader(_socket.getInputStream());    outputStreamWriter=new OutputStreamWriter(_socket.getOutputStream());  }  BufferedReader breader=new BufferedReader(inputStreamReader);  BufferedWriter bwriter=new BufferedWriter(outputStreamWriter);  if (password != null && !password.equals("")) {    OutputThread.sendRawLine(this,bwriter,"PASS " + password);  }  String nick=this.getName();  if (saslUsername != null) {    OutputThread.sendRawLine(this,bwriter,"CAP LS");    OutputThread.sendRawLine(this,bwriter,"CAP REQ : sasl multi-prefix");    OutputThread.sendRawLine(this,bwriter,"CAP END");    OutputThread.sendRawLine(this,bwriter,"AUTHENTICATE PLAIN");    String authString=saslUsername + "\0" + saslUsername+ "\0"+ saslPassword;    String authStringEncoded=Base64.encodeBytes(authString.getBytes());    while (authStringEncoded.length() >= 400) {      String toSend=authStringEncoded.substring(0,400);      authString=authStringEncoded.substring(400);      OutputThread.sendRawLine(this,bwriter,"AUTHENTICATE " + toSend);    }    if (authStringEncoded.length() > 0) {      OutputThread.sendRawLine(this,bwriter,"AUTHENTICATE " + authStringEncoded);    } else {      OutputThread.sendRawLine(this,bwriter,"AUTHENTICATE +");    }  }  OutputThread.sendRawLine(this,bwriter,"NICK " + nick);  OutputThread.sendRawLine(this,bwriter,"USER " + this.getLogin() + " 8 * :"+ this.getVersion());  _inputThread=new InputThread(this,_socket,breader,bwriter);  this.setNick(nick);  String line=null;  line=breader.readLine();  if (line == null) {    throw new IOException("Could not connect to server");  }  this.handleLine(line);  _socket.setSoTimeout(5 * 60 * 1000);  _inputThread.start();  if (_outputThread == null) {    _outputThread=new OutputThread(this,_outQueue);    _outputThread.start();  }  this.onConnect();}  }
class C{  private void sendDeclineEMail(HttpServletRequest request,MPayment p,WebUser wu,WebOrder wo){  StringBuffer message=new StringBuffer(p.getErrorMessage()).append(" - ").append(p.getCurrencyISO()).append(" ").append(p.getPayAmt()).append(" (Reference=").append(p.getR_PnRef()).append(") ");  if (wo != null)   message.append("\nfor Order: ").append(wo.getDocumentNo());  JSPEnv.sendEMail(request,wu,MMailMsg.MAILMSGTYPE_PaymentError,new Object[]{p.getDocumentNo() + " (" + p.getCurrencyISO()+ " "+ p.getPayAmt()+ ")",wu.getName(),message.toString()});}  }
class C{  private Direction canLocalHaveHorizontalAnnotations(ModifiersTree modifiers){  int markerAnnotations=0;  for (  AnnotationTree annotation : modifiers.getAnnotations()) {    if (annotation.getArguments().isEmpty()) {      markerAnnotations++;    }  }  return markerAnnotations <= 1 && markerAnnotations == modifiers.getAnnotations().size() ? Direction.HORIZONTAL : Direction.VERTICAL;}  }
class C{  public CqQuery newCq(String cqName,String queryString,CqAttributes cqAttributes) throws QueryInvalidException, CqExistsException, CqException {  if (cqName == null) {    throw new IllegalArgumentException(LocalizedStrings.DefaultQueryService_CQNAME_MUST_NOT_BE_NULL.toLocalizedString());  }  ClientCQ cq=(ClientCQ)getCqService().newCq(cqName,queryString,cqAttributes,this.pool,false);  return cq;}  }
class C{  public static Map<String,Set<String>> parse(final URI uri,boolean decodeQueryParam){  Map<String,Set<String>> result=Collections.emptyMap();  final String query=uri.getRawQuery();  if (query != null && query.length() > 0) {    result=new HashMap<>();    parse(result,new Scanner(query),null,decodeQueryParam);  }  return result;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Nullable public static byte[] readByteArray(DataInput in) throws IOException {  int len=in.readInt();  if (len == -1)   return null;  byte[] res=new byte[len];  in.readFully(res);  return res;}  }
class C{  private void addGumball(float xPos,float yPos){  Gumball gumball=new Gumball();  gumball.mXInitPos=xPos;  gumball.mYInitPos=yPos;  gumball.mSoundPoolId=UUID.randomUUID();  mSoundPoolId.put(gumball.mSoundPoolId,false);  mGameView.addGumball(gumball);  mSoundPool.play(mSoundBallDrop,1,1,0,0,1);}  }
class C{  public ImageNameStrategyResolverImpl(final ImageNameStrategy defaultStrategy,final List<ImageNameStrategy> urlToStrategies){  this.defaultStrategy=defaultStrategy;  final Map<String,ImageNameStrategy> urlToStrategyMap=new HashMap<String,ImageNameStrategy>();  for (  final ImageNameStrategy strategy : urlToStrategies) {    urlToStrategyMap.put(strategy.getUrlPath(),strategy);  }  this.urlToStrategyMap=urlToStrategyMap;  this.urls=new ArrayList<String>(urlToStrategyMap.keySet()).toArray(new String[urlToStrategyMap.keySet().size()]);}  }
class C{  public int toContentSettingsType(){  return mContentSettingsType;}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData1);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            outputFile.setValue(row,col,z1 - z2);          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile1.getPreferredPalette());      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            outputFile.setValue(row,col,z1 - constant2);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.FLOAT,noData);      outputFile.setPreferredPalette(inputFile2.getPreferredPalette());      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            outputFile.setValue(row,col,constant1 - z2);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private static void deleteTransactionEntry(FinanceService service,String entryUrl) throws IOException, MalformedURLException, ServiceException {  System.out.println("Deleting Entry at location: " + entryUrl);  service.delete(new URL(entryUrl));  System.out.println("Delete Successful");}  }
class C{  public static ArrayList<ArrayList<String>> fileTokenizer(String fin){  File file=new File(fin);  BufferedReader br;  FileReader fr;  ArrayList<String> lines=new ArrayList<String>();  try {    fr=new FileReader(file);    br=new BufferedReader(fr);    String line;    try {      while ((line=br.readLine()) != null) {        if (line.length() > 0) {          lines.add(line);        }      }    } catch (    IOException ex) {    }  } catch (  FileNotFoundException ex) {  }  ArrayList<ArrayList<String>> tokenized_list=new ArrayList<ArrayList<String>>();  for (  String s : lines) {    ArrayList<String> tokens=new ArrayList<String>();    StringTokenizer st=new StringTokenizer(s," \t\n\r\f,");    while (st.hasMoreTokens()) {      tokens.add(st.nextToken());    }    tokenized_list.add(tokens);  }  return tokenized_list;}  }
class C{  public Boolean isMessageBusTunnelEnabled(){  return messageBusTunnelEnabled;}  }
class C{  public static boolean isIgnoredPermission(String permission){  if (permission == null) {    return false;  }  return getIgnoredPermissions().contains(permission);}  }
class C{  private LogUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  protected double defaultNoiseRate(){  return 0.0;}  }
class C{  public DebuggerTemplate findDebugger(final int debuggerId){  for (  final DebuggerTemplate description : debuggers) {    if (description.getId() == debuggerId) {      return description;    }  }  return null;}  }
class C{  public void actionPerformed(ActionEvent e){  StoreXmlThrottlesLayoutAction sxta=new StoreXmlThrottlesLayoutAction();  sxta.saveThrottlesLayout(new File(ThrottleFrame.getDefaultThrottleFilename()));}  }
class C{  public static boolean sendAdbCmd(InputStream is,OutputStream os,String cmd) throws IOException {  byte[] buf=new byte[ADB_RESPONSE_SIZE];  cmd=String.format("%04X",cmd.length()) + cmd;  os.write(cmd.getBytes());  int read=is.read(buf);  if (read != ADB_RESPONSE_SIZE || !ADB_OK.equals(new String(buf))) {    Log.w(LOGTAG,"adb cmd faild.");    return false;  }  return true;}  }
class C{  public WrappedByteBuffer putIntAt(int index,int v){  _checkForWriteAt(index,4);  _buf.putInt(index,v);  return this;}  }
class C{  private boolean holdsNoInvalidOrDuplicateModifiers(ModifiableElement elem){  boolean hasIssue=false;  final Set<N4Modifier> checked=new HashSet<>();  for (int idx=0; idx < elem.getDeclaredModifiers().size(); idx++) {    final N4Modifier mod=elem.getDeclaredModifiers().get(idx);    final boolean duplicate=!checked.add(mod);    if (!ModifierUtils.isValid(elem.eClass(),mod)) {      final ILeafNode node=ModifierUtils.getNodeForModifier(elem,idx);      addIssue(IssueCodes.getMessageForSYN_MODIFIER_INVALID(mod.getName(),keywordProvider.keyword(elem)),elem,node.getOffset(),node.getLength(),IssueCodes.SYN_MODIFIER_INVALID);      hasIssue=true;    } else     if (duplicate) {      final ILeafNode node=ModifierUtils.getNodeForModifier(elem,idx);      addIssue(IssueCodes.getMessageForSYN_MODIFIER_DUPLICATE(mod.getName()),elem,node.getOffset(),node.getLength(),IssueCodes.SYN_MODIFIER_DUPLICATE);      hasIssue=true;    }  }  return !hasIssue;}  }
class C{  public static Path[] files(Path directory,String glob) throws IOException {  try (DirectoryStream<Path> stream=Files.newDirectoryStream(directory,glob)){    return Iterators.toArray(stream.iterator(),Path.class);  } }  }
class C{  protected QName createQName(String name,Namespace namespace){  return new QName(name,namespace);}  }
class C{  public _ContinuousIntegrationType(final _ContinuousIntegrationType_Flag[] flags){  super(flags);}  }
class C{  public HashCodeBuilder append(int[] array){  if (array == null) {    iTotal=iTotal * iConstant;  } else {    for (int i=0; i < array.length; i++) {      append(array[i]);    }  }  return this;}  }
class C{  public TopicObject(){  super();}  }
class C{  public void valueChanged(ListSelectionEvent event){  if (!event.getValueIsAdjusting()) {    ListSelectionModel model=(ListSelectionModel)event.getSource();    if (model.getLeadSelectionIndex() > -1) {      clearStatusBarMessage();      int row=m_tradeOrderTable.convertRowIndexToModel(model.getLeadSelectionIndex());      int i=0;      for (      TradeOrder tradeOrder : m_tradeOrderModel.getData().getTradeOrders()) {        if (i == row) {          cancelButton.setTransferObject(tradeOrder);          executeButton.setTransferObject(tradeOrder);          propertiesButton.setTransferObject(tradeOrder);          break;        }        i++;      }    } else {      cancelButton.setTransferObject(new Aspects());      executeButton.setTransferObject(null);      propertiesButton.setTransferObject(null);    }  }}  }
class C{  @Override public void putAll(Map<? extends Double,? extends Float> map){  Iterator<? extends Entry<? extends Double,? extends Float>> it=map.entrySet().iterator();  for (int i=map.size(); i-- > 0; ) {    Entry<? extends Double,? extends Float> e=it.next();    this.put(e.getKey(),e.getValue());  }}  }
class C{  public static int EREMOTEIO(){  return 121;}  }
class C{  public DefaultCDATA(String text){  super(text);}  }
class C{  public static Coordinate[] atLeastNCoordinatesOrNothing(int n,Coordinate[] c){  return c.length >= n ? c : new Coordinate[]{};}  }
class C{  public static void playFavorites(final Context context){  playAll(getSongListForFavorites(context),0,false);}  }
class C{  public AttachmentEntry uploadAttachment(File file,String parentUrl) throws IOException, ServiceException {  return uploadAttachment(file,parentUrl,file.getName(),"");}  }
class C{  public static void main(String[] args) throws Exception {  File cwd=new File(".");  System.out.println("============ Gradle Fury Validation ============");  System.out.println("CWD is " + cwd.getAbsolutePath());  cwdDir=cwd.getAbsolutePath();  init(cwd);  System.out.println("using " + gpg);  System.out.println("using " + version);  String homeDir=System.getProperty("user.home");  for (int i=0; i < allArtifacts.length; i++) {    allArtifacts[i]=allArtifacts[i].replaceAll(VERSION,version);    allArtifacts[i]=allArtifacts[i].replaceAll("~",homeDir);  }  for (int i=0; i < allPoms.length; i++) {    allPoms[i]=allPoms[i].replaceAll(VERSION,version);    allPoms[i]=allPoms[i].replaceAll("~",homeDir);  }  for (int i=0; i < allSignedArtifacts.length; i++) {    allSignedArtifacts[i]=allSignedArtifacts[i].replaceAll(VERSION,version);    allSignedArtifacts[i]=allSignedArtifacts[i].replaceFirst("\\,",cwdDir);  }  Class[] classesToRun=null;  Options options=new Options();  options.addOption("publishWithSig",false,"Also run tests against nexus with gpg signatures");  options.addOption("publishWithNoSig",false,"Also run tests against nexus without signatures");  options.addOption("withSite",false,"Also run tests for the site");  options.addOption("help",false,"Help");  CommandLineParser parser=new DefaultParser();  CommandLine cmd=parser.parse(options,args);  if (cmd.hasOption("help")) {    HelpFormatter formatter=new HelpFormatter();    formatter.printHelp("gradle-fury-validation",options);    return;  }  if (cmd.hasOption("publishWithSig")) {    classesToRun=new Class[normalTests.length + signatureTests.length];    int index=0;    for (int i=0; i < normalTests.length; i++) {      classesToRun[index]=normalTests[i];      index++;    }    for (int i=0; i < signatureTests.length; i++) {      classesToRun[index]=signatureTests[i];      index++;    }  } else   if (cmd.hasOption("publishWithNoSig")) {    classesToRun=new Class[normalTests.length + noSignatureTests.length];    int index=0;    for (int i=0; i < normalTests.length; i++) {      classesToRun[index]=normalTests[i];      index++;    }    for (int i=0; i < noSignatureTests.length; i++) {      classesToRun[index]=noSignatureTests[i];      index++;    }  } else   if (cmd.hasOption("withSite")) {    classesToRun=new Class[normalTests.length + siteTests.length];    int index=0;    for (int i=0; i < normalTests.length; i++) {      classesToRun[index]=normalTests[i];      index++;    }    for (int i=0; i < siteTests.length; i++) {      classesToRun[index]=siteTests[i];      index++;    }  } else {    classesToRun=normalTests;  }  Result result=null;  JUnitCore junit=new JUnitCore();  result=junit.run(classesToRun);  PrintStream bw=System.out;  bw.println("Technical Conformance Kit (TCK) Test Results generated " + new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()));  bw.println("____________________________________________");  bw.println("Summary");  bw.println("Failed Test Cases: " + result.getFailureCount());  bw.println("Skipped Test Cases: " + result.getIgnoreCount());  bw.println("Ran Test Cases: " + result.getRunCount());  bw.println("Time: " + result.getRunTime());  bw.println("____________________________________________");  bw.println("Tests Ran");  for (int i=0; i < normalTests.length; i++) {    bw.println(normalTests[i].getCanonicalName());  }  bw.println("____________________________________________");  bw.println("Failed Test cases");  bw.println("____________________________________________");  for (int i=0; i < result.getFailures().size(); i++) {    try {      try {        bw.println(result.getFailures().get(i).getTestHeader());      } catch (      Exception ex) {        bw.println(ex.getMessage());      }      try {        bw.println(result.getFailures().get(i).getDescription().getClassName());      } catch (      Exception ex) {        bw.println(ex.getMessage());      }      try {        bw.println(result.getFailures().get(i).getDescription().getMethodName() == null ? "null method!" : result.getFailures().get(i).getDescription().getMethodName());      } catch (      Exception ex) {        bw.println(ex.getMessage());      }      try {        System.out.println("[FAIL] " + result.getFailures().get(i).getDescription().getClassName() + ":"+ result.getFailures().get(i).getDescription().getMethodName());      } catch (      Exception ex) {      }      try {        bw.println(result.getFailures().get(i).getMessage() == null ? "no message" : result.getFailures().get(i).getMessage());      } catch (      Exception ex) {        bw.println(ex.getMessage());      }      try {        bw.println(result.getFailures().get(i).getTrace());      } catch (      Exception ex) {        bw.println(ex.getMessage());      }      bw.println("____________________________________________");    } catch (    Exception ex) {      ex.printStackTrace();    }  }  System.out.println("____________________________________________");  System.out.println("Summary");  System.out.println("Failed Test Cases: " + result.getFailureCount());  System.out.println("Skipped Test Cases: " + result.getIgnoreCount());  System.out.println("Ran Test Cases: " + result.getRunCount());  System.out.println("Time: " + result.getRunTime() + "ms which is "+ org.apache.commons.lang3.time.DurationFormatUtils.formatDurationHMS(result.getRunTime()));  System.out.println("-------------------------------------");  junit=null;  System.out.println("Exit code: " + result.getFailureCount());  System.exit(result.getFailureCount());}  }
class C{  protected static void transformSocketToSSLSocket(MysqlIO mysqlIO) throws SQLException {  SocketFactory sslFact=new StandardSSLSocketFactory(getSSLSocketFactoryDefaultOrConfigured(mysqlIO),mysqlIO.socketFactory,mysqlIO.mysqlConnection);  try {    mysqlIO.mysqlConnection=sslFact.connect(mysqlIO.host,mysqlIO.port,null);    List<String> allowedProtocols=new ArrayList<String>();    List<String> supportedProtocols=Arrays.asList(((SSLSocket)mysqlIO.mysqlConnection).getSupportedProtocols());    for (    String protocol : (mysqlIO.versionMeetsMinimum(5,6,0) && Util.isEnterpriseEdition(mysqlIO.getServerVersion()) ? new String[]{"TLSv1.2","TLSv1.1","TLSv1"} : new String[]{"TLSv1.1","TLSv1"})) {      if (supportedProtocols.contains(protocol)) {        allowedProtocols.add(protocol);      }    }    ((SSLSocket)mysqlIO.mysqlConnection).setEnabledProtocols(allowedProtocols.toArray(new String[0]));    String enabledSSLCipherSuites=mysqlIO.connection.getEnabledSSLCipherSuites();    boolean overrideCiphers=enabledSSLCipherSuites != null && enabledSSLCipherSuites.length() > 0;    List<String> allowedCiphers=null;    if (overrideCiphers) {      allowedCiphers=new ArrayList<String>();      List<String> availableCiphers=Arrays.asList(((SSLSocket)mysqlIO.mysqlConnection).getEnabledCipherSuites());      for (      String cipher : enabledSSLCipherSuites.split("\\s*,\\s*")) {        if (availableCiphers.contains(cipher)) {          allowedCiphers.add(cipher);        }      }    } else {      boolean disableDHAlgorithm=false;      if (mysqlIO.versionMeetsMinimum(5,5,45) && !mysqlIO.versionMeetsMinimum(5,6,0) || mysqlIO.versionMeetsMinimum(5,6,26) && !mysqlIO.versionMeetsMinimum(5,7,0) || mysqlIO.versionMeetsMinimum(5,7,6)) {        if (Util.getJVMVersion() < 8) {          disableDHAlgorithm=true;        }      } else       if (Util.getJVMVersion() >= 8) {        disableDHAlgorithm=true;      }      if (disableDHAlgorithm) {        allowedCiphers=new ArrayList<String>();        for (        String cipher : ((SSLSocket)mysqlIO.mysqlConnection).getEnabledCipherSuites()) {          if (!(disableDHAlgorithm && (cipher.indexOf("_DHE_") > -1 || cipher.indexOf("_DH_") > -1))) {            allowedCiphers.add(cipher);          }        }      }    }    if (allowedCiphers != null) {      ((SSLSocket)mysqlIO.mysqlConnection).setEnabledCipherSuites(allowedCiphers.toArray(new String[0]));    }    ((SSLSocket)mysqlIO.mysqlConnection).startHandshake();    if (mysqlIO.connection.getUseUnbufferedInput()) {      mysqlIO.mysqlInput=mysqlIO.mysqlConnection.getInputStream();    } else {      mysqlIO.mysqlInput=new BufferedInputStream(mysqlIO.mysqlConnection.getInputStream(),16384);    }    mysqlIO.mysqlOutput=new BufferedOutputStream(mysqlIO.mysqlConnection.getOutputStream(),16384);    mysqlIO.mysqlOutput.flush();    mysqlIO.socketFactory=sslFact;  } catch (  IOException ioEx) {    throw SQLError.createCommunicationsException(mysqlIO.connection,mysqlIO.getLastPacketSentTimeMs(),mysqlIO.getLastPacketReceivedTimeMs(),ioEx,mysqlIO.getExceptionInterceptor());  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:24.227 -0500",hash_original_method="DBF93F6482092FD1B1DD0B14B0D97B21",hash_generated_method="52F16005BD1B2C063C973E495CF61BDB") void handleExternalEntity(String context,String publicId,String systemId) throws SAXException, IOException {  EntityResolver entityResolver=xmlReader.entityResolver;  if (entityResolver == null) {    return;  }  if (this.systemId != null) {    try {      URI systemUri=new URI(systemId);      if (!systemUri.isAbsolute() && !systemUri.isOpaque()) {        URI baseUri=new URI(this.systemId);        systemUri=baseUri.resolve(systemUri);        systemId=systemUri.toString();      }    } catch (    Exception e) {      System.logI("Could not resolve '" + systemId + "' relative to"+ " '"+ this.systemId+ "' at "+ locator,e);    }  }  InputSource inputSource=entityResolver.resolveEntity(publicId,systemId);  if (inputSource == null) {    return;  }  String encoding=pickEncoding(inputSource);  int pointer=createEntityParser(this.pointer,context);  try {    EntityParser entityParser=new EntityParser(encoding,xmlReader,pointer,inputSource.getPublicId(),inputSource.getSystemId());    parseExternalEntity(entityParser,inputSource);  }  finally {    releaseParser(pointer);  }}  }
class C{  protected void hideTitleBar(){  mTitleView.setVisibility(View.GONE);}  }
class C{  public boolean hasValue(){  return super.hasTextValue();}  }
class C{  public Set<URI> checkForActiveCatalogServiceAclsUsingUserGroup(String label){  Set<URI> catalogServiceUsingUserGroup=null;  List<URI> catalogServiceURIList=_dbClient.queryByType(CatalogService.class,true);  if (catalogServiceURIList == null || !catalogServiceURIList.iterator().hasNext()) {    _log.warn("There are no catalog service configured.");    return catalogServiceUsingUserGroup;  }  List<CatalogService> catalogServices=_dbClient.queryObject(CatalogService.class,catalogServiceURIList);  if (CollectionUtils.isEmpty(catalogServices)) {    _log.error("Could not find the Catalog service objects for the Ids {}",catalogServiceURIList.toString());    return catalogServiceUsingUserGroup;  }  catalogServiceUsingUserGroup=new HashSet<URI>();  for (  CatalogService catalogService : catalogServices) {    if (catalogService == null) {      _log.info("Invalid catalog service");      continue;    }    if (CollectionUtils.isEmpty(catalogService.getAcls())) {      _log.debug("ACLs not configured for Catalog service {}",catalogService.getLabel());      continue;    }    Set<String> aclKeys=catalogService.getAcls().keySet();    if (checkUserGroupWithPermissionKeys(label,aclKeys)) {      catalogServiceUsingUserGroup.add(catalogService.getId());    }  }  return catalogServiceUsingUserGroup;}  }
class C{  public void addNode(Node n){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESET_NOT_MUTABLE,null));  this.addElement(n);}  }
class C{  public boolean isFixedLayout(){  return fixedLayout;}  }
class C{  public boolean onEnterKeyPress(View view){  return showAppMenu(view,false);}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  @SuppressWarnings("unchecked") public void test_binarySearchLjava_util_ListLjava_lang_Object(){  List localList=new LinkedList();  assertEquals(-1,Collections.binarySearch(localList,new Object()));  localList.add(new Object());  try {    Collections.binarySearch(localList,new Integer(1));    fail("Should throw ClassCastException");  } catch (  ClassCastException e) {  }  LinkedList<String> lls=new LinkedList<String>();  lls.add("1");  lls.add("2");  lls.add("3");  lls.add("4");  lls.add("");  LinkedList ll=lls;  try {    Collections.binarySearch(ll,new Integer(10));    fail("ClassCastException expected");  } catch (  ClassCastException e) {  }}  }
class C{  public static void pushNodeNamespace(Node node,Stack<PrefixMapping> namespaces){  String uri=node.getNamespace();  for (int i=0, size=namespaces.size(); i < size; i++) {    PrefixMapping pm=namespaces.get(i);    if (pm.equals(uri)) {      namespaces.push(pm);      return;    }  }  namespaces.push(new PrefixMapping(uri));}  }
class C{  public static long runMultiThreaded(Iterable<Callable<?>> calls,GridTestSafeThreadFactory threadFactory) throws Exception {  if (!busyLock.enterBusy())   throw new IllegalStateException("Failed to start new threads (test is being stopped).");  Collection<Thread> threads=new ArrayList<>();  long time;  try {    for (    Callable<?> call : calls)     threads.add(threadFactory.newThread(call));    time=System.currentTimeMillis();    for (    Thread t : threads)     t.start();  }  finally {    busyLock.leaveBusy();  }  for (  Thread t : threads)   t.join();  time=System.currentTimeMillis() - time;  threadFactory.checkError();  return time;}  }
class C{  private boolean metricsIsInAwsDimensionSelect(MetricRule rule,Metric metric){  Set<String> dimensionSelectKeys=rule.awsDimensionSelect.keySet();  for (  Dimension dimension : metric.getDimensions()) {    String dimensionName=dimension.getName();    String dimensionValue=dimension.getValue();    if (dimensionSelectKeys.contains(dimensionName)) {      List<String> allowedDimensionValues=rule.awsDimensionSelect.get(dimensionName);      if (!allowedDimensionValues.contains(dimensionValue)) {        return false;      }    }  }  return true;}  }
class C{  public static String serialize(final Calendar src){  final SimpleDateFormat dateFormat=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'.'SSS'Z'",Locale.ROOT);  dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));  return dateFormat.format(src.getTime());}  }
class C{  protected Object resolveObject(Object obj){  if (obj instanceof StdStream) {    return ((StdStream)obj).getStream();  }  return obj;}  }
class C{  private static void cleanPartitionedRegionMetaDataForNode(GemFireCacheImpl cache,Node node,PartitionRegionConfig prConf,String regionIdentifier){  if (logger.isDebugEnabled()) {    logger.debug("Cleaning PartitionedRegion meta data for node={} for Partitioned Region={} configuration={}",node,regionIdentifier,prConf);  }  PartitionedRegionHelper.removeGlobalMetadataForFailedNode(node,regionIdentifier,cache);  if (logger.isDebugEnabled()) {    logger.debug("Done Cleaning PartitionedRegion meta data for memberId={} for {}",node,regionIdentifier);  }}  }
class C{  public static int color(ColorHolder colorHolder,Context ctx,@AttrRes int colorStyle,@ColorRes int colorDefault){  if (colorHolder == null) {    return UIUtils.getThemeColorFromAttrOrRes(ctx,colorStyle,colorDefault);  } else {    return colorHolder.color(ctx,colorStyle,colorDefault);  }}  }
class C{  public void updateDeltas(int deltaX,int deltaY){  if (mLeftBorderActive) {    mDeltaX=Math.max(-mBaselineX,deltaX);    mDeltaX=Math.min(mBaselineWidth - 2 * mTouchTargetWidth,mDeltaX);  } else   if (mRightBorderActive) {    mDeltaX=Math.min(mDragLayer.getWidth() - (mBaselineX + mBaselineWidth),deltaX);    mDeltaX=Math.max(-mBaselineWidth + 2 * mTouchTargetWidth,mDeltaX);  }  if (mTopBorderActive) {    mDeltaY=Math.max(-mBaselineY,deltaY);    mDeltaY=Math.min(mBaselineHeight - 2 * mTouchTargetWidth,mDeltaY);  } else   if (mBottomBorderActive) {    mDeltaY=Math.min(mDragLayer.getHeight() - (mBaselineY + mBaselineHeight),deltaY);    mDeltaY=Math.max(-mBaselineHeight + 2 * mTouchTargetWidth,mDeltaY);  }}  }
class C{  public static void run(AdExchangeSeller adExchangeSeller,String adClientId,long maxReportPageSize) throws Exception {  System.out.println("=================================================================");  System.out.printf("Running report for ad client %s\n",adClientId);  System.out.println("=================================================================");  Date today=new Date();  Calendar calendar=Calendar.getInstance();  calendar.setTime(today);  calendar.add(Calendar.DATE,-7);  Date oneWeekAgo=calendar.getTime();  String startDate=DATE_FORMATTER.format(oneWeekAgo);  String endDate=DATE_FORMATTER.format(today);  Generate request=adExchangeSeller.reports().generate(startDate,endDate);  request.setFilter(Arrays.asList("AD_CLIENT_ID==" + escapeFilterParameter(adClientId)));  request.setMetric(Arrays.asList("PAGE_VIEWS","AD_REQUESTS","AD_REQUESTS_COVERAGE","CLICKS","AD_REQUESTS_CTR","COST_PER_CLICK","AD_REQUESTS_RPM","EARNINGS"));  request.setDimension(Arrays.asList("DATE"));  request.setSort(Arrays.asList("+DATE"));  request.setMaxResults(maxReportPageSize);  Report response=request.execute();  if (response.getRows() == null || response.getRows().isEmpty()) {    System.out.println("No rows returned.");    return;  }  displayHeaders(response.getHeaders());  displayRows(response.getRows());  int totalRows=Math.min(response.getTotalMatchedRows().intValue(),ROW_LIMIT);  for (long startIndex=response.getRows().size(); startIndex < totalRows; startIndex+=response.getRows().size()) {    long pageSize=Math.min(maxReportPageSize,totalRows - startIndex);    request.setStartIndex(startIndex);    request.setMaxResults(pageSize);    response=request.execute();    if (response.getRows() == null || response.getRows().isEmpty()) {      break;    }    displayRows(response.getRows());  }  System.out.println();}  }
class C{  public void introduceConstraint(String name,TypeClass typeClass){  TypeVar var=this.getVar(name);  var.introduceConstraint(typeClass);}  }
class C{  public StringBuilder deleteCharAt(int index){  deleteCharAt0(index);  return this;}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public int offsetRequested(){  return offs;}  }
class C{  private boolean parseBackticks(){  String ticks=match(TICKS_HERE);  if (ticks == null) {    return false;  }  int afterOpenTicks=index;  String matched;  while ((matched=match(TICKS)) != null) {    if (matched.equals(ticks)) {      Code node=new Code();      String content=input.substring(afterOpenTicks,index - ticks.length());      String literal=WHITESPACE.matcher(content.trim()).replaceAll(" ");      node.setLiteral(literal);      appendNode(node);      return true;    }  }  index=afterOpenTicks;  appendText(ticks);  return true;}  }
class C{  public BulletParser parseAttributes(final boolean parseAttributes){  this.parseAttributes=parseAttributes;  return this;}  }
class C{  public static void storeImportedChannels(Context context,int operationType,List<Channel> channelList) throws RemoteException, OperationApplicationException {  if (channelList != null && channelList.size() > 0) {    ContentResolver contentResolver=context.getContentResolver();    ArrayList<ContentProviderOperation> operations=new ArrayList<>(channelList.size());    for (    Channel channel : channelList) {      ContentProviderOperation operation=null;switch (operationType) {case ChannelModel.UPDATE:        operation=ContentProviderOperation.newUpdate(PremoContract.ChannelEntry.CONTENT_URI).withValues(ChannelModel.fromChannel(channel)).withSelection(PremoContract.ChannelEntry._ID + " = ?",new String[]{String.valueOf(channel.getId())}).build();      break;case ChannelModel.ADD:    operation=ContentProviderOperation.newInsert(PremoContract.ChannelEntry.CONTENT_URI).withValues(ChannelModel.fromChannel(channel)).build();  break;case ChannelModel.DELETE:operation=ContentProviderOperation.newDelete(PremoContract.ChannelEntry.CONTENT_URI).withSelection(PremoContract.ChannelEntry._ID + " = ?",new String[]{String.valueOf(channel.getId())}).build();break;}if (operation != null) {operations.add(operation);}}if (operations.size() > 0) {contentResolver.applyBatch(PremoContract.CONTENT_AUTHORITY,operations);}}}  }
class C{  public synchronized void redo() throws CannotRedoException {  if (inProgress) {    UndoableEdit edit=editToBeRedone();    if (edit == null) {      throw new CannotRedoException();    }    redoTo(edit);  } else {    super.redo();  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public MGF1ParameterSpec(String mdName){  if (mdName == null) {    throw new NullPointerException("digest algorithm is null");  }  this.mdName=mdName;}  }
class C{  private void hideObject(){  float[] rotationMatrix=new float[16];  float[] posVec=new float[4];  float angleXZ=(float)Math.random() * 180 + 90;  Matrix.setRotateM(rotationMatrix,0,angleXZ,0f,1f,0f);  float oldObjectDistance=objectDistance;  objectDistance=(float)Math.random() * (MAX_MODEL_DISTANCE - MIN_MODEL_DISTANCE) + MIN_MODEL_DISTANCE;  float objectScalingFactor=objectDistance / oldObjectDistance;  Matrix.scaleM(rotationMatrix,0,objectScalingFactor,objectScalingFactor,objectScalingFactor);  Matrix.multiplyMV(posVec,0,rotationMatrix,0,modelCube,12);  float angleY=(float)Math.random() * 80 - 40;  angleY=(float)Math.toRadians(angleY);  float newY=(float)Math.tan(angleY) * objectDistance;  modelPosition[0]=posVec[0];  modelPosition[1]=newY;  modelPosition[2]=posVec[2];  updateModelPosition();}  }
class C{  public final void testGetMidTermsOfReductionPolynomial03(){  int[] a=new int[]{367};  int[] b=new ECFieldF2m(1999,a).getMidTermsOfReductionPolynomial();  assertTrue(Arrays.equals(a,b));}  }
class C{  public static DateTime toDate(String str,boolean alsoNumbers,TimeZone tz,DateTime defaultValue){  return DateCaster.toDateAdvanced(str,alsoNumbers ? DateCaster.CONVERTING_TYPE_OFFSET : DateCaster.CONVERTING_TYPE_NONE,tz,defaultValue);}  }
class C{  synchronized void println(String s,int _verbosity,Log log,boolean _announcement,boolean _reposting) throws OutputException {  if (log == null)   return;  if (log.writer == null)   throw new OutputException("Log with a null writer: " + log);  if (!log.postAnnouncements && _announcement)   return;  if (log.silent)   return;  log.writer.println(s);  log.writer.flush();  if (store && _announcement && !_reposting)   announcements.addElement(new Announcement(s));}  }
class C{  public List<Object> select(Fields selector){  return delegate.select(selector.getDelegate());}  }
class C{  public final void testAddAllHelperTextColorIdsFromCollection(){  Collection<Integer> helperTextColors1=new LinkedList<>();  helperTextColors1.add(android.R.color.black);  helperTextColors1.add(android.R.color.darker_gray);  PasswordEditText passwordEditText=new PasswordEditText(getContext());  passwordEditText.addAllHelperTextColorIds(helperTextColors1);  passwordEditText.addAllHelperTextColorIds(helperTextColors1);  Collection<Integer> helperTextColors2=passwordEditText.getHelperTextColors();  assertEquals(helperTextColors1.size(),helperTextColors2.size());  Iterator<Integer> iterator=helperTextColors2.iterator();  assertEquals(getContext().getResources().getColor(android.R.color.black),(int)iterator.next());  assertEquals(getContext().getResources().getColor(android.R.color.darker_gray),(int)iterator.next());}  }
class C{  public final MutableDouble3D multiplyIn(final double val){  x=x * val;  y=y * val;  z=z * val;  return this;}  }
class C{  private final static byte[] writeTemplate(final String servletname,final InputStream in,final OutputStream out,final serverObjects pattern,final byte[] prefix) throws IOException {  final PushbackInputStream pis=new PushbackInputStream(in,100);  final ByteArrayOutputStream keyStream=new ByteArrayOutputStream(4048);  byte[] key;  byte[] multi_key;  byte[] replacement;  int bb;  final ByteBuffer structure=new ByteBuffer();  final String clientbrowserlang=pattern.get("clientlanguage");  while (transferUntil(pis,out,hashChar)) {    bb=pis.read();    keyStream.reset();    if ((bb & 0xFF) == lcbr) {      if (transferUntil(pis,keyStream,mClose)) {        bb=pis.read();        if ((bb & 0xFF) != 10) {          pis.unread(bb);        }        multi_key=keyStream.toByteArray();        keyStream.reset();        if (transferUntil(pis,keyStream,appendBytes(mOpen,slashChar,multi_key,mClose))) {          bb=pis.read();          if ((bb & 0xFF) != 10) {            pis.unread(bb);          }          final byte[] text=keyStream.toByteArray();          int num=0;          final String patternKey=getPatternKey(prefix,multi_key);          if (pattern.containsKey(patternKey) && !pattern.get(patternKey).isEmpty()) {            try {              num=Integer.parseInt(pattern.get(patternKey));            } catch (            final NumberFormatException e) {              ConcurrentLog.logException(e);              num=0;            }          }          structure.append('<').append(multi_key).append(multi_num).append(ASCII.getBytes(Integer.toString(num))).append(close_quotetagn);          for (int i=0; i < num; i++) {            final PushbackInputStream pis2=new PushbackInputStream(new ByteArrayInputStream(text));            structure.append(writeTemplate(servletname,pis2,out,pattern,newPrefix(prefix,multi_key,i)));          }          structure.append(open_endtag).append(multi_key).append(close_tagn);        } else {          ConcurrentLog.severe("TEMPLATE","No Close Key found for #{" + UTF8.String(multi_key) + "}#"+ " in "+ servletname);        }      }    } else     if ((bb & 0xFF) == lrbr) {      int others=0;      final ByteBuffer text=new ByteBuffer();      transferUntil(pis,keyStream,aClose);      key=keyStream.toByteArray();      keyStream.reset();      boolean byName=false;      int whichPattern=0;      byte[] patternName=new byte[0];      final String patternKey=getPatternKey(prefix,key);      final String patternId=pattern.get(patternKey);      if (patternId == null) {        whichPattern=0;      } else {        if ("true".equals(patternId)) {          whichPattern=1;        } else         if ("false".equals(patternId)) {          whichPattern=0;        } else         try {          whichPattern=Integer.parseInt(patternId);        } catch (        final NumberFormatException e) {          whichPattern=0;          byName=true;          patternName=UTF8.getBytes(patternId);        }      }      int currentPattern=0;      boolean found=false;      keyStream.reset();      PushbackInputStream pis2;      if (byName) {        transferUntil(pis,keyStream,appendBytes(PP,patternName,null,null));        if (pis.available() == 0) {          ConcurrentLog.severe("TEMPLATE","Bad Key-Value pair in #()# construct: key=\"" + patternKey + "\", value=\""+ UTF8.String(patternName)+ "\" in "+ servletname);          final byte[] sb=structure.getBytes();          structure.close();          text.close();          return sb;        }        keyStream.reset();        transferUntil(pis,keyStream,dpdpa);        pis2=new PushbackInputStream(new ByteArrayInputStream(keyStream.toByteArray()));        structure.append(writeTemplate(servletname,pis2,out,pattern,newPrefix(prefix,key)));        transferUntil(pis,keyStream,appendBytes(hash_brackopen_slash,key,brackclose_hash,null));        if (pis.available() == 0) {          ConcurrentLog.severe("TEMPLATE","No Close Key found for #(" + UTF8.String(key) + ")# (by Name) in "+ servletname);        }      } else {        while (!found) {          bb=pis.read();          if ((bb & 0xFF) == hashChar) {            bb=pis.read();            if ((bb & 0xFF) == lrbr) {              transferUntil(pis,keyStream,aClose);              if (java.util.Arrays.equals(keyStream.toByteArray(),appendBytes(slashChar,key,null,null))) {                pis2=new PushbackInputStream(new ByteArrayInputStream(text.getBytes()));                structure.append('<').append(key).append(alternative_which).append(ASCII.getBytes(Integer.toString(whichPattern))).append(ASCII.getBytes("\" found=\"0\">\n"));                structure.append(writeTemplate(servletname,pis2,out,pattern,newPrefix(prefix,key)));                structure.append(open_endtag).append(key).append(close_tagn);                found=true;              } else               if (others > 0 && keyStream.toString().startsWith("/")) {                others--;                text.append(aOpen).append(keyStream.toByteArray()).append(brackclose_hash);              } else {                others++;                text.append(aOpen).append(keyStream.toByteArray()).append(brackclose_hash);              }              keyStream.reset();              continue;            }            pis.unread(bb);            bb=(hashChar);          } else           if ((bb & 0xFF) == ':' && others == 0) {            bb=pis.read();            if ((bb & 0xFF) == ':') {              if (currentPattern == whichPattern) {                pis2=new PushbackInputStream(new ByteArrayInputStream(text.getBytes()));                structure.append('<').append(key).append(alternative_which).append(ASCII.getBytes(Integer.toString(whichPattern))).append(ASCII.getBytes("\" found=\"0\">\n"));                structure.append(writeTemplate(servletname,pis2,out,pattern,newPrefix(prefix,key)));                structure.append(open_endtag).append(key).append(close_tagn);                transferUntil(pis,keyStream,appendBytes(hash_brackopen_slash,key,brackclose_hash,null));                found=true;              }              currentPattern++;              text.clear();              continue;            }            text.append(':');          }          if (!found) {            text.append((byte)bb);          }        }      }      text.close();    } else     if ((bb & 0xFF) == lbr) {      if (transferUntil(pis,keyStream,pClose)) {        key=keyStream.toByteArray();        final String patternKey=getPatternKey(prefix,key);        replacement=replacePattern(patternKey,pattern);        structure.append('<').append(key).append(ASCII.getBytes(" type=\"normal\">\n"));        structure.append(replacement);        structure.append(ASCII.getBytes("</")).append(key).append(close_tagn);        FileUtils.copy(replacement,out);      } else {        FileUtils.copy(pis,out);        pis.close();        final byte[] sb=structure.getBytes();        structure.close();        keyStream.close();        return sb;      }    } else     if ((bb & 0xFF) == pcChar) {      keyStream.reset();      if (transferUntil(pis,keyStream,iClose)) {        byte[] filename=keyStream.toByteArray();        if ((filename[0] == lbr) && (filename[filename.length - 1] == rbr)) {          final byte[] newFilename=new byte[filename.length - 2];          System.arraycopy(filename,1,newFilename,0,newFilename.length);          final String patternkey=getPatternKey(prefix,newFilename);          filename=replacePattern(patternkey,pattern);        }        if (filename.length > 0 && !java.util.Arrays.equals(filename,UNRESOLVED_PATTERN)) {          final ByteBuffer include=new ByteBuffer();          BufferedReader br=null;          try {            br=new BufferedReader(new InputStreamReader(new FileInputStream(HTTPDFileHandler.getLocalizedFile(UTF8.String(filename),clientbrowserlang)),StandardCharsets.UTF_8));            String line="";            while ((line=br.readLine()) != null) {              include.append(UTF8.getBytes(line)).append(ASCII.getBytes(net.yacy.server.serverCore.CRLF_STRING));            }          } catch (          final IOException e) {            ConcurrentLog.severe("FILEHANDLER","Include Error with file " + UTF8.String(filename) + ": "+ e.getMessage());          } finally {            if (br != null)             try {              br.close();              br=null;            } catch (            final Exception e) {            }          }          final PushbackInputStream pis2=new PushbackInputStream(new ByteArrayInputStream(include.getBytes()));          structure.append(ASCII.getBytes("<fileinclude file=\"")).append(filename).append(close_tagn);          structure.append(writeTemplate(servletname,pis2,out,pattern,new byte[0]));          structure.append(ASCII.getBytes("</fileinclude>\n"));          include.close();        }      }    } else {      out.write(hashChar);      out.write(bb);    }  }  final byte[] sb=structure.getBytes();  structure.close();  return sb;}  }
class C{  public T caseTStructMethod(TStructMethod object){  return null;}  }
class C{  public synchronized StorageProcessor[] queryStorageProcessors(String[] processorId) throws InvalidArgument, InvalidSession, StorageFault, NotImplemented {  final String methodName="queryStorageProcessors(): ";  log.debug(methodName + "Entry");  List<StorageProcessor> processorList=null;  try {    Boolean supportsBlock=new Boolean(_config.getConfigValue("config/service/storageTopology/storageArray/support-block-profile"));    if (!supportsBlock) {      log.error(methodName + " This function is not implemented");      throw FaultUtil.NotImplemented("This function is not implemented");    }    if (processorId != null) {      log.debug(methodName + "input processor Ids " + Arrays.asList(processorId));    } else {      log.debug(methodName + "input processor Ids " + processorId);    }    String storageProcessorId=this.getProcessorId();    if (!Util.isEmpty(processorId)) {      for (      String inputProcessorId : processorId) {        if (Util.isEmpty(inputProcessorId) == true || inputProcessorId.startsWith(STORAGEPROCESSOR_IDENTIFIER_PREFIX) == false) {          throw FaultUtil.InvalidArgument("Given processor Id(s) are invalid");        }      }    }    processorList=new ArrayList<StorageProcessor>();    if (Util.isEmpty(processorId)) {      StorageProcessor processor=new StorageProcessor();      log.debug(methodName + " adding storage processor id[" + storageProcessorId+ "]");      processor.setUniqueIdentifier(storageProcessorId);      processor.addSpIdentifier(storageProcessorId);      processorList.add(processor);    } else {      for (      String inputProcessorId : processorId) {        if (inputProcessorId != null && storageProcessorId.equals(inputProcessorId)) {          StorageProcessor processor=new StorageProcessor();          log.debug(methodName + " adding storage processor id[" + storageProcessorId+ "]");          processor.addSpIdentifier(storageProcessorId);          processor.setUniqueIdentifier(storageProcessorId);          processorList.add(processor);        }      }    }  } catch (  InvalidArgument e) {    log.error(methodName + "InvalidArgument occured",e);    throw (e);  }catch (  NotImplemented e) {    log.error(methodName + "NotImplemented occured",e);    throw FaultUtil.StorageFault(e);  }catch (  Exception e) {    log.error(methodName + "Unexpected exception occured",e);    throw FaultUtil.StorageFault(e);  }  log.debug(methodName + "Exit returning processors of size[" + processorList.size()+ "]");  return processorList.toArray(new StorageProcessor[0]);}  }
class C{  @Override public void connection_rollback(FilterChain chain,ConnectionProxy connection) throws SQLException {  super.connection_rollback(chain,connection);  connectionLog("{conn " + connection.getId() + "} rollback");}  }
class C{  protected void changeSpillDefinitionPos(LIRInstruction op,AllocatableValue operand,Interval interval,int defPos){  assert interval.isSplitParent() : "can only be called for split parents";switch (interval.spillState()) {case NoDefinitionFound:    assert interval.spillDefinitionPos() == -1 : "must no be set before";  interval.setSpillDefinitionPos(defPos);interval.setSpillState(SpillState.NoSpillStore);break;case NoSpillStore:assert defPos <= interval.spillDefinitionPos() : "positions are processed in reverse order when intervals are created";if (defPos < interval.spillDefinitionPos() - 2) {interval.setSpillState(SpillState.NoOptimization);} else {assert allocator.blockForId(defPos) == allocator.blockForId(interval.spillDefinitionPos()) : "block must be equal";}break;case NoOptimization:break;default :throw new BailoutException("other states not allowed at this time");}}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (leaf: ");  result.append(leaf);  result.append(')');  return result.toString();}  }
class C{  final DoubleEdgeList createTriangulation(Vector2... points){  if (points == null)   throw new NullPointerException(Messages.getString("geometry.decompose.nullArray"));  int size=points.length;  if (size < 4)   throw new IllegalArgumentException(Messages.getString("geometry.decompose.invalidSize"));  double winding=Geometry.getWinding(points);  if (winding < 0.0) {    Geometry.reverseWinding(points);  }  SweepLineState sweepstate=new SweepLineState();  PriorityQueue<SweepLineVertex> queue=sweepstate.initialize(points);  while (!queue.isEmpty()) {    SweepLineVertex vertex=queue.poll();    if (vertex.type == SweepLineVertexType.START) {      this.start(vertex,sweepstate);    } else     if (vertex.type == SweepLineVertexType.END) {      this.end(vertex,sweepstate);    } else     if (vertex.type == SweepLineVertexType.SPLIT) {      this.split(vertex,sweepstate);    } else     if (vertex.type == SweepLineVertexType.MERGE) {      this.merge(vertex,sweepstate);    } else     if (vertex.type == SweepLineVertexType.REGULAR) {      this.regular(vertex,sweepstate);    }  }  sweepstate.dcel.triangulateYMonotonePolygons();  return sweepstate.dcel;}  }
class C{  public boolean linkBlockSnapshotSessionTargetGroup(URI systemURI,URI snapshotSessionURI,List<URI> snapshotURIs,String copyMode,Boolean targetsExist,String stepId){  TaskCompleter completer=null;  try {    StorageSystem system=_dbClient.queryObject(StorageSystem.class,systemURI);    completer=new BlockSnapshotSessionLinkTargetCompleter(snapshotSessionURI,snapshotURIs,stepId);    getDevice(system.getSystemType()).doLinkBlockSnapshotSessionTargetGroup(system,snapshotSessionURI,snapshotURIs,copyMode,targetsExist,completer);  } catch (  Exception e) {    if (completer != null) {      ServiceError serviceError=DeviceControllerException.errors.jobFailed(e);      completer.error(_dbClient,serviceError);    } else {      throw DeviceControllerException.exceptions.linkBlockSnapshotSessionTargetsFailed(e);    }  }  return true;}  }
class C{  public boolean equals(Object o){  boolean ret=false;  if (o instanceof PropagationImp) {    PropagationImp other=(PropagationImp)o;    CompositeTransaction otherCt=(CompositeTransaction)other.lineage_.peek();    CompositeTransaction ct=(CompositeTransaction)lineage_.peek();    ret=ct.isSameTransaction(otherCt);  }  return ret;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  MultiplePiePlot clone=(MultiplePiePlot)super.clone();  clone.pieChart=(JFreeChart)this.pieChart.clone();  clone.sectionPaints=new HashMap(this.sectionPaints);  clone.legendItemShape=ShapeUtilities.clone(this.legendItemShape);  return clone;}  }
class C{  public void testSomeStartNodesNotUseable(){  Fixture f=new Fixture();  TestTimeCost tc=new TestTimeCost();  tc.setData(Id.create(1,Link.class),2.0,2.0);  tc.setData(Id.create(2,Link.class),1.0,1.0);  tc.setData(Id.create(3,Link.class),3.0,3.0);  tc.setData(Id.create(4,Link.class),2.0,2.0);  tc.setData(Id.create(5,Link.class),1.0,1.0);  tc.setData(Id.create(6,Link.class),3.0,3.0);  tc.setData(Id.create(7,Link.class),4.0,4.0);  MultiNodeDijkstra dijkstra=new MultiNodeDijkstra(f.network,tc,tc);  Map<Node,InitialNode> fromNodes=new HashMap<Node,InitialNode>();  fromNodes.put(f.network.getNodes().get(Id.create(2,Node.class)),new InitialNode(2.0,2.0));  fromNodes.put(f.network.getNodes().get(Id.create(4,Node.class)),new InitialNode(3.0,3.0));  Map<Node,InitialNode> toNodes=new HashMap<Node,InitialNode>();  toNodes.put(f.network.getNodes().get(Id.create(5,Node.class)),new InitialNode(1.0,1.0));  toNodes.put(f.network.getNodes().get(Id.create(6,Node.class)),new InitialNode(3.0,3.0));  Path p=dijkstra.calcLeastCostPath(fromNodes,toNodes,null);  assertNotNull("no path found!",p);  assertEquals(3,p.links.size());  assertEquals("2",p.links.get(0).getId().toString());  assertEquals("7",p.links.get(1).getId().toString());  assertEquals("5",p.links.get(2).getId().toString());}  }
class C{  public void build(Instances D,Classifier H) throws Exception {  T=transform(D);  h=AbstractClassifier.makeCopy(H);  h.buildClassifier(T);  T.clear();}  }
class C{  public <LayoutBinding extends ViewDataBinding>Observable<SimpleViewHolder<DataType,LayoutBinding>> bindRecyclerView(@NonNull final RecyclerView recyclerView,@NonNull @LayoutRes final int item_layout){  mRxAdapterForTypes=null;  mRxAdapter=new RxAdapter(item_layout,mDataSet);  recyclerView.setAdapter(mRxAdapter);  return mRxAdapter.asObservable();}  }
class C{  private List<Map<String,Object>> globFiles(final Draft2Job job,final File workingDir,HashAlgorithm hashAlgorithm,final Draft2OutputPort outputPort,Object outputBinding) throws Draft2GlobException {  if (outputPort.getOutputBinding() != null) {    outputBinding=outputPort.getOutputBinding();  }  if (outputBinding == null) {    logger.debug("Output binding is empty. Skip output extraction.");    return null;  }  Object glob=Draft2BindingHelper.getGlob(outputBinding);  if (glob == null) {    logger.debug("GLOB does not exist. Skip output extraction.");    return null;  }  Set<File> paths=globService.glob(job,workingDir,glob);  if (paths == null) {    logger.info("Glob service didn't find any files.");    return null;  }  logger.debug("Glob service returned result {}",paths);  final List<Map<String,Object>> result=new ArrayList<>();  for (  File path : paths) {    try {      logger.info("Processing {}.",path);      File file=path;      Map<String,Object> fileData=new HashMap<>();      Draft2FileValueHelper.setFileType(fileData);      if (hashAlgorithm != null) {        Draft2FileValueHelper.setChecksum(file,fileData,hashAlgorithm);      }      Draft2FileValueHelper.setSize(file.length(),fileData);      Draft2FileValueHelper.setName(file.getName(),fileData);      Draft2FileValueHelper.setPath(file.getAbsolutePath(),fileData);      List<?> secondaryFiles=getSecondaryFiles(job,hashAlgorithm,fileData,file.getAbsolutePath(),outputBinding);      if (secondaryFiles != null) {        Draft2FileValueHelper.setSecondaryFiles(secondaryFiles,fileData);      }      Object metadata=Draft2BindingHelper.getMetadata(outputBinding);      metadata=metadataService.evaluateMetadataExpressions(job,fileData,metadata);      logger.info("Metadata expressions evaluated. Metadata is {}.",metadata);      if (metadata != null) {        Draft2FileValueHelper.setMetadata(metadata,fileData);      }      metadata=metadataService.processMetadata(job,fileData,outputPort,outputBinding);      if (metadata != null) {        logger.info("Metadata for {} resolved. Metadata is {}",outputPort.getId(),metadata);        Draft2FileValueHelper.setMetadata(metadata,fileData);      } else {        logger.info("Metadata for {} output is empty.",outputPort.getId());      }      result.add(fileData);      boolean loadContents=Draft2BindingHelper.loadContents(outputBinding);      if (loadContents) {        Draft2FileValueHelper.setContents(fileData);      }    } catch (    Exception e) {      logger.error("Failed to extract outputs",e);      throw new Draft2GlobException("Failed to extract outputs.",e);    }  }  return result;}  }
class C{  public void testRefinementStringEncodingBlockBoxRoundTrip(){  final int numIters=atLeast(100);  for (int i=0; i < numIters; i++) {    final int numStrs=atLeast(1);    List<String> data=new ArrayList<String>(numStrs);    for (int j=0; j < numStrs; j++) {      data.add(TestUtil.randomUnicodeString(random()));    }    String encoded=PivotFacetHelper.encodeRefinementValuePath(data);    List<String> decoded=PivotFacetHelper.decodeRefinementValuePath(encoded);    assertEquals(data,decoded);  }}  }
class C{  public void addElements(final int index,final K a[],final int offset,final int length){  ensureIndex(index);  ObjectArrays.ensureOffsetLength(a,offset,length);  grow(size + length);  System.arraycopy(this.a,index,this.a,index + length,size - index);  System.arraycopy(a,offset,this.a,index,length);  size+=length;}  }
class C{  Rule relationalExpressionChaining(){  return Sequence(forLeftAssociativeBinaryExpression("exprRelational",FirstOf(String("<="),String(">="),solitarySymbol('<'),solitarySymbol('>')),shiftExpressionChaining()),set(),Optional(Sequence(Sequence(String("instanceof"),group.basics.testLexBreak(),group.basics.optWS()),group.types.type().label("type")).label("typeCt")).label("instanceof"),set(actions.createInstanceOfExpression(value(),value("instanceof/typeCt/type"))));}  }
class C{  public void addService(String service,String className){  PluginEntry entry=new PluginEntry(service,className,false);  this.addService(entry);}  }
class C{  public Text createKey(){  return (Text)ReflectionUtils.newInstance(Text.class,conf);}  }
class C{  private void scaleCoverBitmap(Bitmap bitmap){  int fitSide=bitmap.getWidth() > bitmap.getHeight() ? bitmap.getHeight() : bitmap.getWidth();  float scaleRate=(float)mWidth / (float)fitSide;  mBitmapCoverImage=Bitmap.createScaledBitmap(bitmap,(int)(bitmap.getWidth() * scaleRate),(int)(bitmap.getHeight() * scaleRate),false);  if (bitmap.getWidth() > mWidth)   mBitmapCoverImage=Bitmap.createBitmap(mBitmapCoverImage,mBitmapCoverImage.getWidth() / 2 - mWidth / 2,0,mWidth,mHeight); else   mBitmapCoverImage=Bitmap.createBitmap(mBitmapCoverImage,0,mBitmapCoverImage.getHeight() / 2 - mHeight / 2,mWidth,mHeight);  postInvalidate();}  }
class C{  public boolean intersect(Rect r){  return intersect(r.left,r.top,r.right,r.bottom);}  }
class C{  public BikeCustomizedOsmNetworkReader(final Network network,final CoordinateTransformation transformation,final boolean useHighwayDefaults){  this.network=network;  this.transform=transformation;  if (useHighwayDefaults) {    log.info("Falling back to default values.");    this.setHighwayDefaults(1,"motorway",2,120.0 / 3.6,1.0,2000,true);    this.setHighwayDefaults(1,"motorway_link",1,80.0 / 3.6,1.0,1500,true);    this.setHighwayDefaults(2,"trunk",1,80.0 / 3.6,1.0,2000);    this.setHighwayDefaults(2,"trunk_link",1,50.0 / 3.6,1.0,1500);    this.setHighwayDefaults(3,"primary",1,80.0 / 3.6,1.0,1500);    this.setHighwayDefaults(3,"primary_link",1,60.0 / 3.6,1.0,1500);    this.setHighwayDefaults(4,"secondary",1,60.0 / 3.6,1.0,1000);    this.setHighwayDefaults(4,"secondary_link",1,60.0 / 3.6,1.0,1000);    this.setHighwayDefaults(5,"tertiary",1,45.0 / 3.6,1.0,600);    this.setHighwayDefaults(5,"tertiary_link",1,45.0 / 3.6,1.0,600);    this.setHighwayDefaults(6,"minor",1,45.0 / 3.6,1.0,600);    this.setHighwayDefaults(6,"unclassified",1,45.0 / 3.6,1.0,600);    this.setHighwayDefaults(6,"residential",1,30.0 / 3.6,1.0,600);    this.setHighwayDefaults(6,"living_street",1,15.0 / 3.6,1.0,300);    this.setHighwayDefaults(7,"track",1,10.0 / 3.6,1.0,50);    this.setHighwayDefaults(7,"cycleway",1,10.0 / 3.6,1.0,50);    this.setHighwayDefaults(8,"service",1,10.0 / 3.6,1.0,50);    this.setHighwayDefaults(8,"path",1,10.0 / 3.6,1.0,50);    this.setHighwayDefaults(8,"pedestrian",1,10.0 / 3.6,1.0,50);    this.setHighwayDefaults(8,"footway",1,10.0 / 3.6,1.0,50);  }}  }
class C{  public IndexedPropertyDescriptor(String propertyName,Class<?> beanClass) throws IntrospectionException {  super(propertyName,beanClass);  setIndexedByName(beanClass,"get".concat(initialUpperCase(propertyName)),"set".concat(initialUpperCase(propertyName)));}  }
class C{  public boolean writeHeader(OutputStream os){  try {    writeInt(os,CACHE_MAGIC);    writeString(os,key);    writeString(os,etag == null ? "" : etag);    writeLong(os,serverDate);    writeLong(os,ttl);    writeLong(os,softTtl);    writeStringStringMap(responseHeaders,os);    os.flush();    return true;  } catch (  IOException e) {    VolleyLog.d("%s",e.toString());    return false;  }}  }
class C{  public static void log(final String msg){  if (DEBUG) {    System.out.println("XMLDog:" + msg);  }}  }
class C{  public static long[] zero(int bits){  return new long[(bits > 0) ? ((bits - 1) >>> LONG_LOG2_SIZE) + 1 : 1];}  }
class C{  public Population normalize(Population population){  Population result=new Population();  normalize(population,result);  return result;}  }
class C{  private void updatePercentageSummary(){  int value=PreferencesUtils.getInt(this,R.string.track_color_mode_percentage_key,PreferencesUtils.TRACK_COLOR_MODE_PERCENTAGE_DEFAULT);  percentagePreference.setSummary(getString(R.string.settings_map_percentage_summary,value));}  }
class C{  public static final boolean isSegmentNearRadialRegion(Geo s1,Geo s2,Geo rCenter,double rRadius,double near){  return s1.isInside(s2,near + rRadius,rCenter);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  Throwable cause=super.getCause();  if (!(cause instanceof IOException))   throw new InvalidObjectException("Cause must be an IOException");}  }
class C{  protected String doIt() throws Exception {  log.info("AD_Issue_ID=" + m_AD_Issue_ID);  if (!MSystem.get(getCtx()).isAutoErrorReport())   return "NOT reported - Enable Error Reporting in Window System";  MIssue issue=new MIssue(getCtx(),m_AD_Issue_ID,get_TrxName());  if (issue.get_ID() == 0)   return "No Issue to report - ID=" + m_AD_Issue_ID;  String error=issue.report();  if (error != null)   throw new AdempiereSystemError(error);  if (issue.save())   return "Issue Reported: " + issue.getRequestDocumentNo();  throw new AdempiereSystemError("Issue Not Saved");}  }
class C{  @AfterClass public static void deleteLogDir(){  if (logDir != null) {    FileUtils.deleteQuietly(logDir);  }}  }
class C{  private void makeNextVariableID(ClassNode type,boolean useReferenceDirectly){  currentVariableIndex=nextVariableIndex;  if ((type == ClassHelper.long_TYPE || type == ClassHelper.double_TYPE) && !useReferenceDirectly) {    nextVariableIndex++;  }  nextVariableIndex++;}  }
class C{  private static void writeResults(final Connector accumuloConn,final String pcjTableName,final Collection<BindingSet> results) throws PcjException {  checkNotNull(accumuloConn);  checkNotNull(pcjTableName);  checkNotNull(results);  final PcjMetadata metadata=new PcjTables().getPcjMetadata(accumuloConn,pcjTableName);  BatchWriter writer=null;  try {    writer=accumuloConn.createBatchWriter(pcjTableName,new BatchWriterConfig());    for (    final BindingSet result : results) {      final Set<Mutation> addResultMutations=makeWriteResultMutations(metadata.getVarOrders(),result);      writer.addMutations(addResultMutations);    }  } catch (  TableNotFoundException|MutationsRejectedException e) {    throw new PcjException("Could not add results to the PCJ table named: " + pcjTableName,e);  } finally {    if (writer != null) {      try {        writer.close();      } catch (      final MutationsRejectedException e) {        throw new PcjException("Could not add results to a PCJ table because some of the mutations were rejected.",e);      }    }  }}  }
class C{  public boolean isDefaultRouteSet(){  return mDefaultRouteSet.get();}  }
class C{  @Override public void validate(Password password){  if (historySize == 0) {    return;  }  String username=password.getUsername();  if (username == null || username.trim().length() == 0) {    return;  }  String text=password.getPassword();  List<String> previousPasswords=password.getPreviousPasswords(historySize);  if (previousPasswords.isEmpty()) {    _log.info("Pass since no password in history list.");    return;  }  for (int i=0; i < previousPasswords.size(); i++) {    if (passwordUtils.match(text,previousPasswords.get(i))) {      _log.info(MessageFormat.format("fail, match previous password #{0}",i));      throw BadRequestException.badRequests.passwordInvalidHistory(historySize);    }    _log.info(MessageFormat.format("good, do not match previous password #{0}",i));  }  _log.info("pass");}  }
class C{  public void createSubUsageScenario10_changeServiceIdAndUnitInBP_2() throws Exception {  VendorData supplierData=setupNewSupplier("2012-11-01 08:00:00");  setCutOffDay(supplierData.getAdminKey(),1);  CustomerData customerData=registerCustomer(supplierData);  VOServiceDetails serviceDetails=createPublishActivateService(supplierData,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES_PARS,"SCENARIO10_PERUNIT_WEEK_SERVICE_2");  UserGroup unit1=createUnitAndAssignVisibleService(customerData,"Unit1_2","Unit1_2 reference",serviceDetails,supplierData.getMarketplace(0));  UserGroup unit2=createUnitAndAssignVisibleService(customerData,"Unit2_2","Unit2_2 reference",serviceDetails,supplierData.getMarketplace(0));  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.weeksToMillis(0.3));  VOSubscriptionDetails subDetails=subscribeWithAssignToUnit(customerData.getAdminUser(),"SCENARIO10_PERUNIT_WEEK_CHSRVINBP_2",unit1.getKey(),serviceDetails,DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.weeksToMillis(0.3),"ADMIN");  VOServiceDetails upgradeService=createAndRegisterCompatibleService(supplierData,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES,serviceDetails,"SCENARIO10_PERUNIT_WEEK_UPGR_SERVICE_2");  VOSubscriptionDetails upgradedSubDetails=upgrade(customerData.getAdminUser(),subDetails,upgradeService,DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.weeksToMillis(0.3));  serviceDetails=updateServiceId(supplierData,serviceDetails,"SCENARIO10_PERUNIT_WEEK_NEW_SERVICE_2","2012-12-20 00:00:00");  upgradedSubDetails=changeSubscriptionUnit(customerData.getAdminKey(),upgradedSubDetails,unit2.getKey(),"2012-12-20 00:00:00");  unsubscribe(customerData.getAdminKey(),upgradedSubDetails.getSubscriptionId(),DateTimeHandling.calculateMillis("2012-12-31 13:13:13"));  resetCutOffDay(supplierData.getAdminKey());  cacheTestData("SCENARIO10_PERUNIT_WEEK_CHSRVINBP_2",new TestData(supplierData));}  }
class C{  private static void simplifyTernary(TernaryInsn insn){  IfCondition condition=insn.getCondition();  if (condition.isCompare()) {    simplifyIf(condition.getCompare().getInsn());  } else {    insn.simplifyCondition();  }}  }
class C{  public DrawerBuilder withDrawerItems(@NonNull List<IDrawerItem> drawerItems){  this.getItemAdapter().set(drawerItems);  return this;}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public static List<Intersection> intersectTriangleTypes(final Line line,FloatBuffer vertices,IntBuffer indices,int triangleType){  if (triangleType == GL.GL_TRIANGLES)   return Triangle.intersectTriangles(line,vertices,indices); else   if (triangleType == GL.GL_TRIANGLE_STRIP)   return Triangle.intersectTriStrip(line,vertices,indices); else   if (triangleType == GL.GL_TRIANGLE_FAN)   return Triangle.intersectTriFan(line,vertices,indices);  return null;}  }
class C{  @NoInline public static void computeDU(IR ir){  clearDU(ir);  for (Instruction instr=ir.firstInstructionInCodeOrder(); instr != null; instr=instr.nextInstructionInCodeOrder()) {    Enumeration<Operand> defs=instr.getPureDefs();    Enumeration<Operand> uses=instr.getUses();    while (defs.hasMoreElements()) {      Operand op=defs.nextElement();      if (op instanceof RegisterOperand) {        RegisterOperand rop=(RegisterOperand)op;        recordDef(rop);      }    }    while (uses.hasMoreElements()) {      Operand op=uses.nextElement();      if (op instanceof RegisterOperand) {        RegisterOperand rop=(RegisterOperand)op;        recordUse(rop);      }    }  }  Register next;  for (Register reg=ir.regpool.getFirstSymbolicRegister(); reg != null; reg=next) {    next=reg.getNext();    if (reg.defList == null && reg.useList == null) {      if (DEBUG) {        VM.sysWrite("Removing " + reg + " from the register pool\n");      }      ir.regpool.removeRegister(reg);    }  }}  }
class C{  private void warmupMiss(){  hot();  moveToStackTop();}  }
class C{  @Kroll.method public void cancelNotificationById(int notificationId){  try {    NotificationManager notificationManager=(NotificationManager)TiApplication.getInstance().getApplicationContext().getSystemService(TiApplication.NOTIFICATION_SERVICE);    notificationManager.cancel(notificationId);    Log.i(LCAT,"Notification " + notificationId + " cleared successfully");  } catch (  Exception ex) {    Log.e(LCAT,"Cannot cancel notification:" + notificationId + " Error: "+ ex.getMessage());  }}  }
class C{  private void removeLetter(StringBuilder text){  int length=text.codePointCount(0,text.length());  if (length < 2) {    return;  }  int index=Rand.rand(length);  int chrIndex=text.offsetByCodePoints(0,index);  int chr=text.codePointAt(chrIndex);  int toRemove=Character.charCount(chr);  for (int i=0; i < toRemove; i++) {    text.deleteCharAt(chrIndex);  }}  }
class C{  public Double3D tv(final Double3D d1,final Double3D d2){  return new Double3D(tdx(d1.x,d2.x),tdy(d1.y,d2.y),tdz(d1.z,d2.z));}  }
class C{  public boolean isRequired(){  return required;}  }
class C{  public static String toBase64(Object o,String charset,String defaultValue){  byte[] b;  if (o instanceof byte[])   b=(byte[])o; else   if (o instanceof String)   return toB64((String)o,charset,defaultValue); else   if (o instanceof ObjectWrap) {    return toBase64(((ObjectWrap)o).getEmbededObject(defaultValue),charset,defaultValue);  } else   if (o == null)   return toBase64("",charset,defaultValue); else {    String str=toString(o,null);    if (str != null)     return toBase64(str,charset,defaultValue);    b=toBinary(o,null);    if (b == null)     return defaultValue;  }  return toB64(b,defaultValue);}  }
class C{  public static String uncapitalize(String str){  return changeFirstCharacterCase(false,str);}  }
class C{  @Override public void updateCycleView(Cycle cycle){  dataAdapter.setCycle(cycle);}  }
class C{  private void clearAllChannels(){  for (int i=0; i < CHANNELS; i++) {    channelConfig[i].setChannelState(ChannelStates.CLOSED);  }  setSensorState(SensorState.DISCONNECTED);}  }
class C{  public Object[] toArray(){  final Object[] items=this.items;  final ReentrantLock lock=this.lock;  lock.lock();  try {    final int count=this.count;    Object[] a=new Object[count];    int n=items.length - takeIndex;    if (count <= n) {      System.arraycopy(items,takeIndex,a,0,count);    } else {      System.arraycopy(items,takeIndex,a,0,n);      System.arraycopy(items,0,a,n,count - n);    }    return a;  }  finally {    lock.unlock();  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  @Override public boolean isCompressed(){  return compressed;}  }
class C{  @NonNull public static Animator fadeOut(){  return alpha(0);}  }
class C{  @Override public int hashCode(){  throw new UnsupportedOperationException("hashCode() is not supported because sets are mutable");}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  Attr addrAttr;  String attrValue;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  testAddr=(Element)elementList.item(0);  addrAttr=testAddr.getAttributeNode("domestic");  attrValue=addrAttr.getNodeValue();  assertEquals("nodeAttributeNodeValueAssert1","Yes",attrValue);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void changedUpdate(DocumentEvent e){  updateTree(e);}  }
class C{  public CFieldMenu(final JTextField filterField){  add(new CFilterModulesAction(filterField));}  }
class C{  @Override protected ILineSegment[] transform(ILineSegment[] segments,int width,int height){  ArrayList<ILineSegment> als=new ArrayList<ILineSegment>();  double minX=0;  double minY=0;  double maxX=0;  double maxY=0;  for (  ILineSegment ils : segments) {    double x1=ils.getStart().getX();    double y1=ils.getStart().getY();    double x2=ils.getEnd().getX();    double y2=ils.getEnd().getY();    if (x1 < minX) {      minX=x1;    }    if (x2 < minX) {      minX=x2;    }    if (y1 < minY) {      minY=y1;    }    if (y2 < minY) {      minY=y2;    }    if (x1 > maxX) {      maxX=x1;    }    if (x2 > maxX) {      maxX=x2;    }    if (y1 > maxY) {      maxY=y1;    }    if (y2 > maxY) {      maxY=y2;    }  }  double xFactor=1.0 * width / (maxX - minX);  double yFactor=1.0 * height / (maxY - minY);  if (!shouldScale()) {    ILineSegment[] copy=new ILineSegment[segments.length];    for (int i=0; i < copy.length; i++) {      copy[i]=segments[i];    }    return copy;  }  for (  ILineSegment ils : segments) {    ILineSegment newOne=new TwoDLineSegment(new TwoDPoint(ils.getStart().getX() * xFactor,ils.getStart().getY() * yFactor),new TwoDPoint(ils.getEnd().getX() * xFactor,ils.getEnd().getY() * yFactor));    als.add(newOne);  }  return als.toArray(new ILineSegment[0]);}  }
class C{  public void onServiceDisconnected(ComponentName className){  Log.e(TAG,"Unexpected disconnect from Face Unlock service");  mHandler.sendEmptyMessage(MSG_SERVICE_DISCONNECTED);}  }
class C{  @Deprecated public boolean isVoice(){  return hasVoice;}  }
class C{  private Object createTestUsingFieldInjection() throws Exception {  List<FrameworkField> annotatedFieldsByParameter=getAnnotatedFieldsByParameter();  if (annotatedFieldsByParameter.size() != fParameters.length) {    throw new Exception("Wrong number of parameters and @Parameter fields." + " @Parameter fields counted: " + annotatedFieldsByParameter.size() + ", available parameters: "+ fParameters.length+ ".");  }  Object testClassInstance=getTestClass().getJavaClass().newInstance();  for (  FrameworkField each : annotatedFieldsByParameter) {    Field field=each.getField();    Parameter annotation=field.getAnnotation(Parameter.class);    int index=annotation.value();    try {      field.set(testClassInstance,fParameters[index]);    } catch (    IllegalArgumentException iare) {      throw new Exception(getTestClass().getName() + ": Trying to set " + field.getName()+ " with the value "+ fParameters[index]+ " that is not the right type ("+ fParameters[index].getClass().getSimpleName()+ " instead of "+ field.getType().getSimpleName()+ ").",iare);    }  }  return testClassInstance;}  }
class C{  public ZDT6(int numberOfVariables){  super(numberOfVariables);}  }
class C{  private void refreshTags(){  tagCloudBean.resetTagsForMarketplace();  services=new LinkedList<Service>();  getServicePagingBean().setResultSize(0);}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    target.setCaretPosition(target.getCaretPosition());  }}  }
class C{  public int nextInt(){  return nextInt(n,p);}  }
class C{  public void writeGenotype(final EvolutionState state,final DataOutput dataOutput) throws IOException {  dataOutput.writeInt(trees.length);  for (int x=0; x < trees.length; x++)   trees[x].writeTree(state,dataOutput);}  }
class C{  public String nativeSQL(String sql) throws SQLException {  return getEscapedParser().parse(sql);}  }
class C{  public ReadWritePair(ReadStreamOld readStream,WriteStreamOld writeStream){  _readStream=readStream;  _writeStream=writeStream;}  }
class C{  public HadoopIgfsCommunicationException(String msg,Exception cause){  super(msg,cause);}  }
class C{  private AFTPClient actionCreateDir() throws IOException, PageException {  required("directory",directory);  AFTPClient client=getClient();  client.makeDirectory(directory);  writeCfftp(client);  return client;}  }
class C{  public int diff_levenshtein(LinkedList<Diff> diffs){  int levenshtein=0;  int insertions=0;  int deletions=0;  for (  Diff aDiff : diffs) {switch (aDiff.operation) {case INSERT:      insertions+=aDiff.text.length();    break;case DELETE:  deletions+=aDiff.text.length();break;case EQUAL:levenshtein+=Math.max(insertions,deletions);insertions=0;deletions=0;break;}}levenshtein+=Math.max(insertions,deletions);return levenshtein;}  }
class C{  public SQLInvalidAuthorizationSpecException(Throwable cause){  super(cause);}  }
class C{  public void put(String key,InputStream stream,String name,String contentType,boolean autoClose){  if (key != null && stream != null) {    streamParams.put(key,StreamWrapper.newInstance(stream,name,contentType,autoClose));  }}  }
class C{  private boolean sendMessage(UnitResults unitResults,Map<String,String> coverage,LintResults lintResults) throws IOException, ConduitAPIException {  JSONObject result=diffClient.sendHarbormasterMessage(phid,harbormasterSuccess,unitResults,coverage,lintResults);  if (result.containsKey("error_info") && !(result.get("error_info") instanceof JSONNull)) {    info(String.format("Error from Harbormaster: %s",result.getString("error_info")));    failTask();    return false;  } else {    this.result=Result.SUCCESS;  }  return true;}  }
class C{  private boolean isCandidateSelection(int childIndex,int direction){  final int count=getChildCount();  final int invertedIndex=count - 1 - childIndex;  int rowStart;  int rowEnd;  if (!mStackFromBottom) {    rowStart=childIndex - (childIndex % mNumColumns);    rowEnd=Math.max(rowStart + mNumColumns - 1,count);  } else {    rowEnd=count - 1 - (invertedIndex - (invertedIndex % mNumColumns));    rowStart=Math.max(0,rowEnd - mNumColumns + 1);  }switch (direction) {case View.FOCUS_RIGHT:    return childIndex == rowStart;case View.FOCUS_DOWN:  return rowStart == 0;case View.FOCUS_LEFT:return childIndex == rowEnd;case View.FOCUS_UP:return rowEnd == count - 1;case View.FOCUS_FORWARD:return childIndex == rowStart && rowStart == 0;case View.FOCUS_BACKWARD:return childIndex == rowEnd && rowEnd == count - 1;default :throw new IllegalArgumentException("direction must be one of " + "{FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, FOCUS_RIGHT, " + "FOCUS_FORWARD, FOCUS_BACKWARD}.");}}  }
class C{  @Override public VariableSet validate(DMLProgram dmlProg,VariableSet ids,HashMap<String,ConstIdentifier> constVars,boolean conditional) throws LanguageException, ParseException, IOException {  if (_statements.size() > 1) {    LOG.error(this.printBlockErrorLocation() + "FunctionStatementBlock should have only 1 statement (FunctionStatement)");    throw new LanguageException(this.printBlockErrorLocation() + "FunctionStatementBlock should have only 1 statement (FunctionStatement)");  }  FunctionStatement fstmt=(FunctionStatement)_statements.get(0);  ArrayList<DataIdentifier> inputValues=fstmt.getInputParams();  for (  DataIdentifier inputValue : inputValues) {    if (inputValue.getDataType() == DataType.MATRIX && inputValue.getValueType() != ValueType.DOUBLE) {      raiseValidateError("for function " + fstmt.getName() + ", input variable "+ inputValue.getName()+ " has an unsupported value type of "+ inputValue.getValueType()+ ".",false);    }  }  if (!(fstmt instanceof ExternalFunctionStatement)) {    this._dmlProg=dmlProg;    for (    StatementBlock sb : fstmt.getBody()) {      ids=sb.validate(dmlProg,ids,constVars,conditional);      constVars=sb.getConstOut();    }    if (fstmt.getBody().size() > 0)     _constVarsIn.putAll(fstmt.getBody().get(0).getConstIn());    if (fstmt.getBody().size() > 1)     _constVarsOut.putAll(fstmt.getBody().get(fstmt.getBody().size() - 1).getConstOut());    ArrayList<DataIdentifier> returnValues=fstmt.getOutputParams();    for (    DataIdentifier returnValue : returnValues) {      DataIdentifier curr=ids.getVariable(returnValue.getName());      if (curr == null) {        raiseValidateError("for function " + fstmt.getName() + ", return variable "+ returnValue.getName()+ " must be defined in function ",conditional);      }      if (curr.getDataType() == DataType.UNKNOWN) {        raiseValidateError("for function " + fstmt.getName() + ", return variable "+ curr.getName()+ " data type of "+ curr.getDataType()+ " may not match data type in function signature of "+ returnValue.getDataType(),true);      }      if (curr.getValueType() == ValueType.UNKNOWN) {        raiseValidateError("for function " + fstmt.getName() + ", return variable "+ curr.getName()+ " data type of "+ curr.getValueType()+ " may not match data type in function signature of "+ returnValue.getValueType(),true);      }      if (curr.getDataType() != DataType.UNKNOWN && !curr.getDataType().equals(returnValue.getDataType())) {        raiseValidateError("for function " + fstmt.getName() + ", return variable "+ curr.getName()+ " data type of "+ curr.getDataType()+ " does not match data type in function signature of "+ returnValue.getDataType(),conditional);      }      if (curr.getValueType() != ValueType.UNKNOWN && !curr.getValueType().equals(returnValue.getValueType())) {        if (curr.getDataType() == DataType.SCALAR && returnValue.getDataType() == DataType.SCALAR) {          if (returnValue.getValueType() == ValueType.DOUBLE) {            if (curr.getValueType() == ValueType.INT) {              IntIdentifier currIntValue=(IntIdentifier)constVars.get(curr.getName());              if (currIntValue != null) {                DoubleIdentifier currDoubleValue=new DoubleIdentifier(currIntValue.getValue(),curr.getFilename(),curr.getBeginLine(),curr.getBeginColumn(),curr.getEndLine(),curr.getEndColumn());                constVars.put(curr.getName(),currDoubleValue);              }              LOG.warn(curr.printWarningLocation() + "for function " + fstmt.getName()+ ", return variable "+ curr.getName()+ " value type of "+ curr.getValueType()+ " does not match value type in function signature of "+ returnValue.getValueType()+ " but was safely cast");              curr.setValueType(ValueType.DOUBLE);              ids.addVariable(curr.getName(),curr);            } else {              LOG.error(curr.printErrorLocation() + "for function " + fstmt.getName()+ ", return variable "+ curr.getName()+ " value type of "+ curr.getValueType()+ " does not match value type in function signature of "+ returnValue.getValueType()+ " and cannot safely cast value");              throw new LanguageException(curr.printErrorLocation() + "for function " + fstmt.getName()+ ", return variable "+ curr.getName()+ " value type of "+ curr.getValueType()+ " does not match value type in function signature of "+ returnValue.getValueType()+ " and cannot safely cast value");            }          }          if (returnValue.getValueType() == ValueType.INT) {            LOG.error(curr.printErrorLocation() + "for function " + fstmt.getName()+ ", return variable "+ curr.getName()+ " value type of "+ curr.getValueType()+ " does not match value type in function signature of "+ returnValue.getValueType()+ " and cannot safely cast "+ curr.getValueType()+ " as "+ returnValue.getValueType());            throw new LanguageException(curr.printErrorLocation() + "for function " + fstmt.getName()+ ", return variable "+ curr.getName()+ " value type of "+ curr.getValueType()+ " does not match value type in function signature of "+ returnValue.getValueType()+ " and cannot safely cast "+ curr.getValueType()+ " as "+ returnValue.getValueType());          }        } else {          LOG.error(curr.printErrorLocation() + "for function " + fstmt.getName()+ ", return variable "+ curr.getName()+ " value type of "+ curr.getValueType()+ " does not match value type in function signature of "+ returnValue.getValueType()+ " and cannot safely cast double as int");          throw new LanguageException(curr.printErrorLocation() + "for function " + fstmt.getName()+ ", return variable "+ curr.getName()+ " value type of "+ curr.getValueType()+ " does not match value type in function signature of "+ returnValue.getValueType()+ " and cannot safely cast "+ curr.getValueType()+ " as "+ returnValue.getValueType());        }      }    }  } else {    ExternalFunctionStatement efstmt=(ExternalFunctionStatement)fstmt;    efstmt.validateParameters(this);    this._dmlProg=dmlProg;    for (    StatementBlock sb : efstmt.getBody()) {      ids=sb.validate(dmlProg,ids,constVars,conditional);      constVars=sb.getConstOut();    }  }  return ids;}  }
class C{  public void logMark(long streamId,long readLimit){  addEntry(new Entry(TYPE_MARK,null,null,streamId,null,null,null,null,null,null,null,null,null,readLimit,null,null,null,null,null,null));}  }
class C{  public static void addDiscoverInfoByNode(String nodeVer,DiscoverInfo info){  caps.put(nodeVer,info);  if (persistentCache != null)   persistentCache.addDiscoverInfoByNodePersistent(nodeVer,info);}  }
class C{  private void sendHead(){  final int size;  mTotal=mPacket.getLength();  if (mTotal <= 0)   size=0; else {    byte[] bytes=getBuffer();    bytes[0]=mPacket.getPacketType();    BitConverter.toBytes(mTotal,bytes,1);    short infoLen=mPacket.readInfo(bytes,HeadSize);    BitConverter.toBytes(infoLen,bytes,HeadSize - 2);    size=HeadSize + infoLen;  }  if (size > 0) {    mCursor=0;    mProgress=0;    notifyProgress();    mPacket.startPacket();    sendAsync(0,size);  } else {    mPacket=null;    sendNext();  }}  }
class C{  @PostConstruct public void initApplication() throws IOException {  if (env.getActiveProfiles().length == 0) {    log.warn("No Spring profile configured, running with default configuration");  } else {    log.info("Running with Spring profile(s) : {}",Arrays.toString(env.getActiveProfiles()));    Collection<String> activeProfiles=Arrays.asList(env.getActiveProfiles());    if (activeProfiles.contains(Constants.SPRING_PROFILE_DEVELOPMENT) && activeProfiles.contains(Constants.SPRING_PROFILE_PRODUCTION)) {      log.error("You have misconfigured your application! " + "It should not run with both the 'dev' and 'prod' profiles at the same time.");    }    if (activeProfiles.contains(Constants.SPRING_PROFILE_PRODUCTION) && activeProfiles.contains(Constants.SPRING_PROFILE_FAST)) {      log.error("You have misconfigured your application! " + "It should not run with both the 'prod' and 'fast' profiles at the same time.");    }    if (activeProfiles.contains(Constants.SPRING_PROFILE_DEVELOPMENT) && activeProfiles.contains(Constants.SPRING_PROFILE_CLOUD)) {      log.error("You have misconfigured your application! " + "It should not run with both the 'dev' and 'cloud' profiles at the same time.");    }  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void printRoundInfo(boolean lastRound){  if (printRounds || verbose) {    List<ClassSymbol> tlc=lastRound ? List.<ClassSymbol>nil() : topLevelClasses;    Set<TypeElement> ap=lastRound ? Collections.<TypeElement>emptySet() : annotationsPresent;    log.printLines("x.print.rounds",number,"{" + tlc.toString(", ") + "}",ap,lastRound);  }}  }
class C{  @GenerateLink(rel="download artifact") @GET @Path("/public/download/{artifact}/{version}") @Produces(MediaType.APPLICATION_OCTET_STREAM) public Response downloadPublicArtifact(@PathParam("artifact") String artifact,@PathParam("version") String version){  try {    return doDownloadArtifact(artifact,version,null);  } catch (  ArtifactNotFoundException e) {    return Response.status(Response.Status.NOT_FOUND).entity("Unexpected error. Can't download the artifact " + artifact + ":"+ version+ ". "+ e.getMessage()).build();  }catch (  Exception e) {    LOG.error(e.getMessage(),e);    return Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity("Unexpected error. Can't download the artifact " + artifact + ":"+ version+ ". "+ e.getMessage()).build();  }}  }
class C{  public static List<SampledRule> extractRules(SentencePair sentencePair,int length,int maxTargetPhrase){  int minTarget=Integer.MAX_VALUE;  int maxTarget=-1;  final int startSource=sentencePair.wordPosition;  final int endSource=startSource + length;  for (int sourcePos=startSource; sourcePos < endSource; sourcePos++) {    assert sourcePos < sentencePair.sourceLength() : String.format("[%d,%d) %d %d ",startSource,endSource,sourcePos,sentencePair.sourceLength());    if (!sentencePair.isSourceUnaligned(sourcePos)) {      int[] targetPositions=sentencePair.f2e(sourcePos);      for (      int targetPos : targetPositions) {        if (targetPos < minTarget) {          minTarget=targetPos;        }        if (targetPos > maxTarget) {          maxTarget=targetPos;        }      }    }  }  if (maxTarget < 0 || maxTarget - minTarget >= maxTargetPhrase)   return Collections.emptyList();  for (int i=minTarget; i <= maxTarget; ++i) {    if (!sentencePair.isTargetUnaligned(i)) {      int[] srcPositions=sentencePair.e2f(i);      for (      int sourcePos : srcPositions) {        if (sourcePos < startSource || sourcePos >= endSource) {          return Collections.emptyList();        }      }    }  }  List<SampledRule> ruleList=new ArrayList<>();  for (int startTarget=minTarget; (startTarget >= 0 && startTarget > maxTarget - maxTargetPhrase && (startTarget == minTarget || sentencePair.isTargetUnaligned(startTarget))); startTarget--) {    for (int endTarget=maxTarget; (endTarget < sentencePair.targetLength() && endTarget < startTarget + maxTargetPhrase && (endTarget == maxTarget || sentencePair.isTargetUnaligned(endTarget))); endTarget++) {      final int fertility=Math.abs((endTarget - startTarget + 1) - (endSource - startSource));      if (fertility > MAX_FERTILITY)       break;      SampledRule r=new SampledRule(startSource,endSource,startTarget,endTarget + 1,sentencePair);      ruleList.add(r);    }  }  return ruleList;}  }
class C{  public boolean equals(int value){  return this.value == value;}  }
class C{  NoResultAction changeCurrentMode(Mode mode){  return new RejectAction(getModeUsage().changeCurrentMode(mode));}  }
class C{  public static GeoPath makeGeoPath(final PlanetModel planetModel,final double maxCutoffAngle,final GeoPoint[] pathPoints){  return new GeoStandardPath(planetModel,maxCutoffAngle,pathPoints);}  }
class C{  public TechnicalServiceNotAliveException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public int size(){  return numRows;}  }
class C{  public int size(){  return points.size();}  }
class C{  @Override public int hashCode(){  return isPresent ? Double.hashCode(value) : 0;}  }
class C{  public static boolean checkGMLFootprint(String footprint){  try {    Configuration configuration=new GMLConfiguration();    Parser parser=new Parser(configuration);    Geometry geom=(Geometry)parser.parse(new InputSource(new StringReader(footprint)));    if (!geom.isEmpty() && !geom.isValid()) {      logger.error("Wrong footprint");      return false;    }  } catch (  Exception e) {    logger.error("Error in extracted footprint: " + e.getMessage());    return false;  }  return true;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.SINGLETON___SINGLETON_1:    setSingleton_1(SINGLETON_1_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public static <K,V>SortedMap<K,V> asImmutable(SortedMap<K,V> self){  return Collections.unmodifiableSortedMap(self);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public boolean isDefault(){  return getExpression() == null;}  }
class C{  public Object executeCqOnRedundantsAndPrimary(boolean executeWithInitialResults) throws CqClosedException, RegionNotFoundException, CqException {  Object initialResults=null;synchronized (this.cqState) {    if (this.isClosed()) {      throw new CqClosedException(LocalizedStrings.CqQueryImpl_CQ_IS_CLOSED_CQNAME_0.toLocalizedString(this.cqName));    }    if (this.isRunning()) {      throw new IllegalStateException(LocalizedStrings.CqQueryImpl_CQ_IS_IN_RUNNING_STATE_CQNAME_0.toLocalizedString(this.cqName));    }    if (logger.isDebugEnabled()) {      logger.debug("Performing Execute {} request for CQ. CqName: {}",((executeWithInitialResults) ? "WithInitialResult" : ""),this.cqName);    }    this.cqBaseRegion=(LocalRegion)cqService.getCache().getRegion(this.regionName);    if (!cqService.isServer()) {      if (this.cqProxy == null) {        initConnectionProxy();      }      boolean success=false;      try {        if (this.proxyCache != null) {          if (this.proxyCache.isClosed()) {            throw new CacheClosedException("Cache is closed for this user.");          }          UserAttributes.userAttributes.set(this.proxyCache.getUserAttributes());        }        if (executeWithInitialResults) {          initialResults=cqProxy.createWithIR(this);          if (initialResults == null) {            String errMsg="Failed to execute the CQ.  CqName: " + this.cqName + ", Query String is: "+ this.queryString;            throw new CqException(errMsg);          }        } else {          cqProxy.create(this);        }        success=true;      } catch (      Exception ex) {        if (this.shutdownInProgress()) {          throw new CqException("System shutdown in progress.");        }        if (ex.getCause() instanceof GemFireSecurityException) {          if (securityLogWriter.warningEnabled()) {            securityLogWriter.warning(LocalizedStrings.CqQueryImpl_EXCEPTION_WHILE_EXECUTING_CQ_EXCEPTION_0,ex,null);          }          throw new CqException(ex.getCause().getMessage(),ex.getCause());        } else         if (ex instanceof CqException) {          throw (CqException)ex;        } else {          String errMsg=LocalizedStrings.CqQueryImpl_FAILED_TO_EXECUTE_THE_CQ_CQNAME_0_QUERY_STRING_IS_1_ERROR_FROM_LAST_SERVER_2.toLocalizedString(new Object[]{this.cqName,this.queryString,ex.getLocalizedMessage()});          if (logger.isDebugEnabled()) {            logger.debug(errMsg,ex);          }          throw new CqException(errMsg,ex);        }      } finally {        if (!success && !this.shutdownInProgress()) {          try {            cqProxy.close(this);          } catch (          Exception e) {            if (logger.isDebugEnabled()) {              logger.debug("Exception cleaning up failed cq",e);            }            UserAttributes.userAttributes.set(null);          }        }        UserAttributes.userAttributes.set(null);      }    }    this.cqState.setState(CqStateImpl.RUNNING);  }  if (!cqService.isServer()) {    connected=true;    CqListener[] cqListeners=getCqAttributes().getCqListeners();    for (int lCnt=0; lCnt < cqListeners.length; lCnt++) {      if (cqListeners[lCnt] != null) {        if (cqListeners[lCnt] instanceof CqStatusListener) {          CqStatusListener listener=(CqStatusListener)cqListeners[lCnt];          listener.onCqConnected();        }      }    }  }  this.cqService.stats.incCqsActive();  this.cqService.stats.decCqsStopped();  return initialResults;}  }
class C{  public MediaFormat(){  mMap=new HashMap<String,Object>();}  }
class C{  public static RegionRequest createForCreateSubregion(CacheInfo c,String parentPath,String name,RegionAttributes attrs){  RegionRequest m=new RegionRequest();  m.action=CREATE_VM_REGION;  m.cacheId=c.getId();  m.path=parentPath;  m.newRegionName=name;  m.newRegionAttributes=new RemoteRegionAttributes(attrs);  RegionRequest.setFriendlyName(m);  return m;}  }
class C{  public int available() throws IOException {  if (in == null)   throw new XZIOException("Stream closed");  if (exception != null)   throw exception;  return in.available();}  }
class C{  @Override public final void postSetUp() throws Exception {  map.clear();  final Host host=Host.getHost(0);  serverVM0=host.getVM(0);  serverVM1=host.getVM(1);  clientVM1=host.getVM(2);  clientVM2=host.getVM(3);  PORT1=serverVM0.invoke(null);  PORT2=serverVM1.invoke(null);  numOfCreates=0;  numOfUpdates=0;  numOfInvalidates=0;}  }
class C{  public void mouseScroll(int delta){  if (isZoom) {    viewpointNode.magnify(-mouseScrollDirection * delta);  } else {    viewpointNode.dolly(mouseScrollDirection * 2 * delta);    Spatial spat=doPick(viewpointNode.getCenterX(),viewpointNode.getCenterY(),pickPosition,pickNormal,false);    if (spat != null) {      viewpointNode.setLookAt(pickPosition);    }  }}  }
class C{  @After public void cleanEnv() throws IOException {  FileUtils.deleteDirectory(localTempPath.toFile());  S3FileTransferRequestParamsDto s3FileTransferRequestParamsDto=s3DaoTestHelper.getTestS3FileTransferRequestParamsDto();  s3FileTransferRequestParamsDto.setS3KeyPrefix(TEST_S3_KEY_PREFIX + "/");  s3Dao.deleteDirectory(s3FileTransferRequestParamsDto);}  }
class C{  public static TaskExecution createAndStoreTaskExecutionWithParams(TaskRepository taskRepository){  TaskExecution expectedTaskExecution=TestVerifierUtils.createSampleTaskExecutionNoArg();  List<String> params=new ArrayList<String>();  params.add(UUID.randomUUID().toString());  params.add(UUID.randomUUID().toString());  expectedTaskExecution.setArguments(params);  expectedTaskExecution=taskRepository.createTaskExecution(expectedTaskExecution.getTaskName(),expectedTaskExecution.getStartTime(),expectedTaskExecution.getArguments(),expectedTaskExecution.getExternalExecutionId());  return expectedTaskExecution;}  }
class C{  public static ECPoint decodePoint(byte[] encoded,EllipticCurve curve){  if ((encoded.length == 0) || (encoded[0] != 0x04)) {    LOGGER.severe("Only uncompressed point format supported.");    return null;  }  int fieldSize=(curve.getField().getFieldSize() + 7) / 8;  if (encoded.length != (fieldSize * 2) + 1) {    LOGGER.severe("Point does not match field size.");    return null;  }  byte[] xb=new byte[fieldSize];  byte[] yb=new byte[fieldSize];  System.arraycopy(encoded,1,xb,0,fieldSize);  System.arraycopy(encoded,fieldSize + 1,yb,0,fieldSize);  return new ECPoint(new BigInteger(1,xb),new BigInteger(1,yb));}  }
class C{  public static String toJson(Object o) throws Exception {  return objectMapper.writeValueAsString(o);}  }
class C{  public static final boolean isLeapYear(int year){  return ((year & 0x3) == 0) && ((year % 100 != 0) || (year % 400 == 0));}  }
class C{  @Nullable public static String lambdaEnclosingClassName(String clsName){  int idx=clsName.indexOf("$$Lambda$");  return idx != -1 ? clsName.substring(0,idx) : null;}  }
class C{  private static void generateReservationTokenAttribute(ReservationTokenAttribute token,int nb){  long left=System.currentTimeMillis();  long right=random.nextLong();  int b=nb / 2;  for (int i=0; i < b; i++) {    token.reservationToken[i]=(byte)((left >> (i * 8)) & 0xFFL);    token.reservationToken[i + b]=(byte)((right >> (i * 8)) & 0xFFL);  }  token.hashCode=(token.reservationToken[3] << 24 & 0xFF000000) | (token.reservationToken[2] << 16 & 0x00FF0000) | (token.reservationToken[1] << 8 & 0x0000FF00)| (token.reservationToken[0] & 0x000000FF);}  }
class C{  protected void onInitTypeWithThrowable(Throwable throwable){  if (isTypeInit() || throwable == null) {    return;  }  if (throwable instanceof FailReason) {    FailReason failReason=(FailReason)throwable;    onInitTypeWithOriginalThrowable(failReason.getOriginalCause());    if (isTypeInit()) {      return;    }    onInitTypeWithFailReasonInternal(failReason);  } else {    onInitTypeWithOriginalThrowable(throwable);  }}  }
class C{  @Override public boolean handles(ResultHistoryList history,int index){  return (getClassifier(history,index) instanceof MultiLabelDrawable);}  }
class C{  public boolean isSwipeToRefreshEnabled(){  return swipeRefreshLayout.isEnabled();}  }
class C{  public static String formatRedditUrl(String url){  url=url.replaceFirst("(?i)^(https?://)?(www\\.)?((ssl|pay|amp)\\.)?","");  if (url.matches("(?i)[a-z0-9-_]+\\.reddit\\.com.*")) {    String subdomain=url.split("\\.",2)[0];    String domainRegex="(?i)" + subdomain + "\\.reddit\\.com";    if (subdomain.equalsIgnoreCase("np")) {      url=url.replaceFirst(domainRegex,"reddit.com");      url="np" + url;    } else     if (subdomain.matches("beta|blog|code|mod|out|store")) {      return "";    } else     if (subdomain.matches("(?i)([_a-z0-9]{2}-)?[_a-z0-9]{1,2}")) {      url=url.replaceFirst(domainRegex,"reddit.com");    } else {      url=url.replaceFirst(domainRegex,"reddit.com/r/" + subdomain);    }  }  if (url.startsWith("/"))   url="reddit.com" + url;  if (url.endsWith("/"))   url=url.substring(0,url.length() - 1);  if (url.matches("(?i)[^/]++/(?>wiki|help)(?>$|/.*)")) {    url=url.replaceFirst("(?i)/(?>wiki|help)","/r/reddit.com/wiki");  }  return url;}  }
class C{  public static String repeat(String str,int repeat){  StringBuilder buffer=new StringBuilder(repeat * str.length());  for (int i=0; i < repeat; i++) {    buffer.append(str);  }  return buffer.toString();}  }
class C{  private void addItem(Strategy item) throws ValueTypeException {  DefaultMutableTreeNode node=new DefaultMutableTreeNode(item);  m_root.add(node);  m_nodeMap.put(node,item);  for (  Rule rule : item.getRules()) {    DefaultMutableTreeNode childNode=new DefaultMutableTreeNode(rule);    m_nodeMap.put(childNode,rule);    node.add(childNode);  }}  }
class C{  public boolean isStealthy(){  return dest || sneak_camo || sneak_ir|| sneak_ecm;}  }
class C{  public static synchronized AbstractMessage receiveMsgProto(Socket socket){  DataInputStream din=null;  try {    din=new DataInputStream(socket.getInputStream());    int msgType=din.readUnsignedByte();    if (msgType == MsgType.REGISTRATION) {      Registration reg=Registration.parseDelimitedFrom(din);      if (!reg.hasBlob() || !reg.hasChangeKey() || !reg.hasAllowsUnsignedKeychange()|| !reg.hasAllowsPublicLookup()) {        Logging.log("Malformed registration message");      } else {        return reg;      }    } else     if (msgType == MsgType.KEY_LOOKUP) {      KeyLookup lookup=KeyLookup.parseDelimitedFrom(din);      if (!lookup.hasName() || !lookup.hasEpoch() || lookup.getEpoch() <= 0) {        Logging.log("Malformed key lookup");      } else {        return lookup;      }    } else     if (msgType == MsgType.COMMITMENT_REQ) {      CommitmentReq commReq=CommitmentReq.parseDelimitedFrom(din);      if (!commReq.hasType() || !commReq.hasEpoch() || commReq.getEpoch() <= 0) {        Logging.log("Malformed commitment request message");      } else {        return commReq;      }    } else     if (msgType == MsgType.ULNCHANGE_REQ) {      ULNChangeReq ulnChange=ULNChangeReq.parseDelimitedFrom(din);      if (!ulnChange.hasName() || !ulnChange.hasNewBlob() || !ulnChange.hasNewChangeKey()|| !ulnChange.hasAllowsUnsignedKeychange()|| !ulnChange.hasAllowsPublicLookup()) {        Logging.log("Malformed uln change req");      } else {        return ulnChange;      }    } else     if (msgType == MsgType.SIGNED_ULNCHANGE_REQ) {      SignedULNChangeReq sulnReq=SignedULNChangeReq.parseDelimitedFrom(din);      if (!sulnReq.hasReq() || !sulnReq.hasSig() || !sulnReq.getReq().hasName()) {        Logging.log("Malformed signed uln change req");      } else {        return sulnReq;      }    } else {      Logging.log("Unknown incoming message type");    }  } catch (  InvalidProtocolBufferException e) {    Logging.error("parsing a protobuf message");  }catch (  IOException e) {    Logging.error("receiving data from client");  }  return null;}  }
class C{  @Override public void onDestroy(){  Log_OC.d(TAG,"onDestroy - finishing observation of favorite files");  unregisterReceiver(mDownloadReceiver);  Iterator<FolderObserver> itOCFolder=mFolderObserversMap.values().iterator();  while (itOCFolder.hasNext()) {    itOCFolder.next().stopWatching();  }  mFolderObserversMap.clear();  mFolderObserversMap=null;  super.onDestroy();}  }
class C{  public MediaType withParameters(Multimap<String,String> parameters){  return create(type,subtype,parameters);}  }
class C{  public double calcPSR(){  if (!enabled) {    return 0;  } else {    if (spikeResponder != null) {      spikeResponder.update(this);    } else {      return calcWeightedSum();    }    if (delay == 0) {      return psr;    } else {      dlyVal=dequeu();      enqueu(psr);      return dlyVal;    }  }}  }
class C{  public SampleDataRecord(String path,List<Object> sampleData){  this.source="hdfs";  this.path=path;  this.sampleData="{\"sample\": " + sampleData.toString() + " }";}  }
class C{  @Override public void visit(NodeVisitor v){  if (v.visit(this)) {    body.visit(v);    condition.visit(v);  }}  }
class C{  public void normalise(){  for (  Assignment cond : table.keySet()) {    table.get(cond).normalise();  }}  }
class C{  @KnownFailure("Not supported : pattern with %") public void test_getColumnsArbitrary() throws SQLException {  ResultSet setAllNull=null;  ResultSet setMixed=null;  ResultSet allArbitrary=null;  String[] tablesName={DatabaseCreator.TEST_TABLE1,DatabaseCreator.TEST_TABLE3};  Arrays.sort(tablesName);  int setSize=0;  try {    allArbitrary=meta.getColumns("%","%","%","%");    assertNotNull(allArbitrary);    checkColumnsShape(allArbitrary);    setSize=crossCheckGetColumnsAndResultSetMetaData(allArbitrary,false);    assertEquals(6,setSize);    setMixed=meta.getColumns(null,null,"%","%");    assertNotNull(setMixed);    checkColumnsShape(setMixed);    setSize=crossCheckGetColumnsAndResultSetMetaData(setMixed,false);    assertEquals(6,setSize);  } catch (  SQLException e) {    fail("Unexpected exception: " + e.getMessage());  }  conn.close();  try {    meta.getColumns(null,null,DatabaseCreator.TEST_TABLE1,"%");    fail("SQLException not thrown");  } catch (  SQLException e) {  }}  }
class C{  public DefaultMutableTreeNode(Object userObject,boolean allowsChildren){  super();  parent=null;  this.allowsChildren=allowsChildren;  this.userObject=userObject;}  }
class C{  public void runtimeInit(TransformerImpl transformer) throws TransformerException {}  }
class C{  @SuppressWarnings("LeakingThisInConstructor") public NodePanel(ShaderNodeVariable singleOut,NodePanel.NodeType type){  super();  List<ShaderNodeVariable> outputs=new ArrayList<ShaderNodeVariable>();  outputs.add(singleOut);  this.type=type;  init(new ArrayList<ShaderNodeVariable>(),outputs);  addKeyListener(this);  toolBar=new NodeToolBar(this);}  }
class C{  public AnchorUpdateControl(Layout layout,String action,boolean overItem){  this(new Layout[]{layout},action,overItem);}  }
class C{  static String add_escapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  @SuppressWarnings("deprecation") @Override public void stop(){  for (  Map.Entry<String,List<Object>> e : m_listenees.entrySet()) {    List<Object> l=e.getValue();    for (    Object o : l) {      if (o instanceof BeanCommon) {        ((BeanCommon)o).stop();      }    }  }  if (m_executorPool != null) {    m_executorPool.shutdownNow();    m_executorPool.purge();    m_executorPool=null;  }  m_reject=false;  m_batchStarted=false;  block(false);  m_visual.setStatic();  if (m_oldText.length() > 0) {  }}  }
class C{  public static Weigher<byte[]> byteArray(){  return ByteArrayWeigher.INSTANCE;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected ExifTag addTag(ExifTag tag,int ifdId){  if (tag != null && ExifTag.isValidIfd(ifdId)) {    IfdData ifdData=getOrCreateIfdData(ifdId);    return ifdData.setTag(tag);  }  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:56.924 -0500",hash_original_method="2FE33ABC0A8D366A40495EBCED9F5958",hash_generated_method="AEFE42ADD2D2344BC1E390875D1D1047") public void compose(Transformation t){  mAlpha*=t.getAlpha();  mMatrix.preConcat(t.getMatrix());}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  private static int parseFullAtomVersion(int fullAtomInt){  return 0x000000FF & (fullAtomInt >> 24);}  }
class C{  public boolean isUpdateNeeded(){  int storedVersion=getStoredJettyVersion();  if (storedVersion <= 0)   return true;  try {    PackageInfo pi=getPackageManager().getPackageInfo(getPackageName(),0);    if (pi == null)     return true;    if (pi.versionCode != storedVersion)     return true;    File alwaysUpdate=new File(__JETTY_DIR,".update");    if (alwaysUpdate.exists()) {      Log.i(TAG,"Always Update tag found " + alwaysUpdate);      return true;    }  } catch (  Exception e) {    return true;  }  return false;}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level3.xpath.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DOMTestDocumentBuilderFactory factory=new BatikTestDocumentBuilderFactory(new DocumentBuilderSetting[0]);  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  public void visitTypeInsn(int opcode,String type){  if (mv != null) {    mv.visitTypeInsn(opcode,type);  }}  }
class C{  private int findMatchingTypeArgumentIndex(String signature,String argument){  String[] typeArguments=Signature.getTypeArguments(signature);  for (int i=0; i < typeArguments.length; i++) {    if (Signature.getSignatureSimpleName(typeArguments[i]).equals(argument))     return i;  }  return -1;}  }
class C{  public void openKeyPurchaseMenu(){  if (ultraCosmetics.getEconomy() == null) {    return;  }}  }
class C{  public User(int userId,String userName,Gender gender){  super();  this.userId=userId;  this.userName=userName;  this.gender=gender;}  }
class C{  public int maximalSquareB(char[][] matrix){  if (matrix == null) {    return 0;  }  int r=matrix.length;  int c=r == 0 ? 0 : matrix[0].length;  int[] dp=new int[c + 1];  int prev=0;  int maxLen=0;  for (int i=1; i <= r; i++) {    for (int j=1; j <= c; j++) {      int temp=dp[j];      if (matrix[i - 1][j - 1] == '1') {        dp[j]=Math.min(Math.min(dp[j - 1],dp[j]),prev) + 1;        maxLen=Math.max(maxLen,dp[j]);      } else {        dp[j]=0;      }      prev=temp;    }  }  return maxLen * maxLen;}  }
class C{  public static Predicates<String> contains(String otherString){  return new ContainsString(otherString);}  }
class C{  public void removeReadingListener(ReadingListener l){  if (readingListeners.contains(l)) {    readingListeners.removeElement(l);  }}  }
class C{  private void createDaySlot(ArrayList<MAssignmentSlot> list,MAssignmentSlot ma){  Timestamp start=ma.getStartTime();  GregorianCalendar calStart=new GregorianCalendar();  calStart.setTime(start);  calStart.set(Calendar.HOUR_OF_DAY,0);  calStart.set(Calendar.MINUTE,0);  calStart.set(Calendar.SECOND,0);  calStart.set(Calendar.MILLISECOND,0);  Timestamp end=ma.getEndTime();  GregorianCalendar calEnd=new GregorianCalendar();  calEnd.setTime(end);  calEnd.set(Calendar.HOUR_OF_DAY,0);  calEnd.set(Calendar.MINUTE,0);  calEnd.set(Calendar.SECOND,0);  calEnd.set(Calendar.MILLISECOND,0);  while (calStart.before(calEnd)) {    Timestamp xStart=new Timestamp(calStart.getTimeInMillis());    calStart.add(Calendar.DAY_OF_YEAR,1);    Timestamp xEnd=new Timestamp(calStart.getTimeInMillis());    MAssignmentSlot myMa=new MAssignmentSlot(xStart,xEnd,ma.getName(),ma.getDescription(),ma.getStatus());    list.add(myMa);  }}  }
class C{  public PrintInfo(ProcessInfo pi){  setName(pi.getTitle());  setAD_Process_ID(pi.getAD_Process_ID());  setAD_Table_ID(pi.getTable_ID());  setRecord_ID(pi.getRecord_ID());}  }
class C{  public MethodTemplate addInitialVariable(Variable var){  this.initialVars.add(var);  return this;}  }
class C{  public StringChunk(Table table,String min,String max,long nbBlocks){  this(table,min,max);  this.nbBlocks=nbBlocks;}  }
class C{  private static int availableCapacity(Buffer buffer){  return buffer.capacity() - buffer.limit();}  }
class C{  public String toString(){  Set<String> msgTypes=getMessageTypes();  Set<String> enumTypes=getEnumTypes();  return "types: " + msgTypes + "\nenums: "+ enumTypes+ "\n"+ mFileDescSet;}  }
class C{  @SuppressLint("DrawAllocation") @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){  int widthMode=MeasureSpec.getMode(widthMeasureSpec);  int heightMode=MeasureSpec.getMode(heightMeasureSpec);  int maxWidth=MeasureSpec.getSize(widthMeasureSpec);  int maxHeight=MeasureSpec.getSize(heightMeasureSpec);  if (widthMode == MeasureSpec.UNSPECIFIED)   maxWidth=Integer.MAX_VALUE;  if (heightMode == MeasureSpec.UNSPECIFIED)   maxHeight=Integer.MAX_VALUE;  int paddingLeft=getPaddingLeft();  int paddingTop=getPaddingTop();  int paddingRight=getPaddingRight();  int paddingBottom=getPaddingBottom();  int maxRightBound=maxWidth - paddingRight;  int maxBottomBound=maxHeight - paddingBottom;  int left;  int top;  int right;  int bottom;  int rightBound=paddingLeft;  int maxRightNoPadding=rightBound;  int bottomBound;  int lastMaxBottom=paddingTop;  int maxBottom=lastMaxBottom;  int childWidth;  int childHeight;  int lineStartIndex=0;  int lineEndIndex;  rectList.clear();  int childCount=getChildCount();  for (int index=0; index < childCount; index++) {    final View child=getChildAt(index);    child.measure(MeasureSpec.UNSPECIFIED,MeasureSpec.UNSPECIFIED);    if (child.getVisibility() == View.GONE)     continue;    final LayoutParams lp=(LayoutParams)child.getLayoutParams();    childWidth=child.getMeasuredWidth();    childHeight=child.getMeasuredHeight();    left=rightBound + lp.leftMargin;    right=left + childWidth;    rightBound=right + lp.rightMargin;    if (rightBound > maxRightBound) {      lineEndIndex=index;      adjustBaseLine(maxBottom - lastMaxBottom,lineStartIndex,lineEndIndex);      if (maxBottom >= maxBottomBound)       break;      if (lineEndIndex == lineStartIndex) {        child.measure(MeasureSpec.makeMeasureSpec(maxWidth - paddingLeft - paddingRight- lp.leftMargin- lp.rightMargin,MeasureSpec.AT_MOST),MeasureSpec.UNSPECIFIED);        childWidth=child.getMeasuredWidth();        childHeight=child.getMeasuredHeight();      }      left=paddingLeft + lp.leftMargin;      right=left + childWidth;      rightBound=right + lp.rightMargin;      lastMaxBottom=maxBottom;      top=lastMaxBottom + lp.topMargin;      bottom=top + childHeight;      bottomBound=bottom + lp.bottomMargin;      lineStartIndex=index;    } else {      top=lastMaxBottom + lp.topMargin;      bottom=top + childHeight;      bottomBound=bottom + lp.bottomMargin;    }    if (rightBound > maxRightNoPadding)     maxRightNoPadding=rightBound;    if (bottomBound > maxBottom)     maxBottom=bottomBound;    Rect rect=new Rect();    rect.left=left;    rect.top=top;    rect.right=right;    rect.bottom=bottom;    rectList.add(rect);  }  adjustBaseLine(maxBottom - lastMaxBottom,lineStartIndex,rectList.size());  int measuredWidth;  int measuredHeight;  if (widthMode == MeasureSpec.EXACTLY)   measuredWidth=maxWidth; else   measuredWidth=maxRightNoPadding + paddingRight;  if (heightMode == MeasureSpec.EXACTLY)   measuredHeight=maxHeight; else {    measuredHeight=maxBottom + paddingBottom;    if (heightMode == MeasureSpec.AT_MOST)     measuredHeight=measuredHeight > maxHeight ? maxHeight : measuredHeight;  }  setMeasuredDimension(measuredWidth,measuredHeight);}  }
class C{  public void open(int port) throws IOException {  mAcceptSocket=new ServerSocket(port);}  }
class C{  private static void createServicesForMarketplace1(int marketableServiceCount) throws Exception {  servicesForMarketplace1=new LinkedList<VOService>();  VOTechnicalService technicalService=createTechnicalService("tp1",spService_TechnologyProvider);  accountService_TechnologyProvider.addSuppliersForTechnicalService(technicalService,getOrganizationIds(supplierList));  VOMarketplace mp1=getMarketplace("1");  for (int i=0; i < marketableServiceCount; i++) {    VOService service=createService("service",Integer.toString(i),mp1,spService_SupplierList.get(0),mpService_SupplierList.get(0),technicalService);    servicesForMarketplace1.add(service);  }}  }
class C{  public static final boolean stringEquals(String s1,String s2){  return objectEquals(s1,s2);}  }
class C{  public void sendSystemModeChange(int nEntity,int nSystem,int nMode){  Object[] data={new Integer(nEntity),new Integer(nSystem),new Integer(nMode)};  send(new Packet(Packet.COMMAND_ENTITY_SYSTEMMODECHANGE,data));}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:13.042 -0500",hash_original_method="08F42BFD1EBF12CF3276DCDF0956FF23",hash_generated_method="8E0CE9AD094D416BA7CB8E50F612FB48") public void resetTransition(){  mAlpha=0;  mTransitionState=TRANSITION_NONE;  invalidateSelf();}  }
class C{  public ConfigPaymentPanelBluePay20POST(){  initComponents();}  }
class C{  public OMGraphic edit(OMGraphic g,DrawingToolRequestor requestor,boolean showGUI){  if (g == null) {    if (DEBUG) {      Debug.output("OMDrawingTool.edit(): can't edit null OMGraphic.");    }    return null;  }  if (getCurrentEditable() != null) {    if (DEBUG) {      Debug.output("OMDrawingTool.edit(): can't edit " + g.getClass().getName() + ", drawing tool busy with another graphic.");    }    return null;  }  this.requestor=requestor;  if (showGUI) {    if (DEBUG) {      Debug.output("OMDrawingTool.edit(): showing GUI per request");    }    setMask(SHOW_GUI_BEHAVIOR_MASK);  } else {    if (DEBUG) {      Debug.output("OMDrawingTool.edit(): NOT showing GUI per request");    }    unsetMask(SHOW_GUI_BEHAVIOR_MASK);  }  EditableOMGraphic eomg=getEditableGraphic(g);  if (eomg != null) {    eomg.setShowGUI(isMask(SHOW_GUI_BEHAVIOR_MASK));    eomg.setActionMask(OMGraphic.UPDATE_GRAPHIC_MASK);    return edit(eomg,requestor);  }  return null;}  }
class C{  public static <T>T each(T self,Closure closure){  each(InvokerHelper.asIterator(self),closure);  return self;}  }
class C{  public boolean isDiscontinued(){  Object oo=get_Value(COLUMNNAME_Discontinued);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static boolean constantTimeEq(byte[] a,byte[] b){  if (a.length != b.length) {    return false;  }  int result=0;  for (int i=0; i < a.length; i++) {    result|=a[i] ^ b[i];  }  return result == 0;}  }
class C{  public Matrix4f translationRotateTowards(float posX,float posY,float posZ,float dirX,float dirY,float dirZ,float upX,float upY,float upZ){  float invDirLength=1.0f / (float)Math.sqrt(dirX * dirX + dirY * dirY + dirZ * dirZ);  float ndirX=dirX * invDirLength;  float ndirY=dirY * invDirLength;  float ndirZ=dirZ * invDirLength;  float leftX, leftY, leftZ;  leftX=upY * ndirZ - upZ * ndirY;  leftY=upZ * ndirX - upX * ndirZ;  leftZ=upX * ndirY - upY * ndirX;  float invLeftLength=1.0f / (float)Math.sqrt(leftX * leftX + leftY * leftY + leftZ * leftZ);  leftX*=invLeftLength;  leftY*=invLeftLength;  leftZ*=invLeftLength;  float upnX=ndirY * leftZ - ndirZ * leftY;  float upnY=ndirZ * leftX - ndirX * leftZ;  float upnZ=ndirX * leftY - ndirY * leftX;  this._m00(leftX);  this._m01(leftY);  this._m02(leftZ);  this._m03(0.0f);  this._m10(upnX);  this._m11(upnY);  this._m12(upnZ);  this._m13(0.0f);  this._m20(ndirX);  this._m21(ndirY);  this._m22(ndirZ);  this._m23(0.0f);  this._m30(posX);  this._m31(posY);  this._m32(posZ);  this._m33(1.0f);  _properties(PROPERTY_AFFINE);  return this;}  }
class C{  protected IContainer<?,GamaPair<K,V>> buildValues(final IScope scope,final IContainer objects){  return GamaMapType.staticCast(scope,objects,type.getKeyType(),type.getContentType(),false);}  }
class C{  public static boolean encodeToFile(byte[] dataToEncode,String filename){  boolean success=false;  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.ENCODE);    bos.write(dataToEncode);    success=true;  } catch (  java.io.IOException e) {    success=false;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }  return success;}  }
class C{  public ValidatorException(Collection<FacesMessage> messages){  this.messages=messages;}  }
class C{  public CShowResultsAction(){  super("Results");}  }
class C{  public AfterCode_ createAfterCode_(){  AfterCode_Impl afterCode_=new AfterCode_Impl();  return afterCode_;}  }
class C{  public void execute(){  DataModel dataModel=getDataModel();  IKnowledge knowledge=(IKnowledge)params2.get("knowledge",new Knowledge2());  if (initialGraph == null) {    initialGraph=new EdgeListGraph(dataModel.getVariables());  }  Graph graph2=new EdgeListGraph(initialGraph);  graph2=GraphUtils.replaceNodes(graph2,dataModel.getVariables());  Bff search;  if (dataModel instanceof DataSet) {    DataSet dataSet=(DataSet)dataModel;    if (getAlgorithmType() == AlgorithmType.BEAM) {      search=new BffBeam(graph2,dataSet,knowledge);    } else     if (getAlgorithmType() == AlgorithmType.FGS) {      search=new BffGes(graph2,dataSet);      search.setKnowledge(knowledge);    } else {      throw new IllegalStateException();    }  } else   if (dataModel instanceof CovarianceMatrix) {    CovarianceMatrix covarianceMatrix=(CovarianceMatrix)dataModel;    if (getAlgorithmType() == AlgorithmType.BEAM) {      search=new BffBeam(graph2,covarianceMatrix,knowledge);    } else     if (getAlgorithmType() == AlgorithmType.FGS) {      throw new IllegalArgumentException("GES method requires a dataset; a covariance matrix was provided.");    } else {      throw new IllegalStateException();    }  } else {    throw new IllegalStateException();  }  Parameters params=getParams();  search.setAlpha(params.getDouble("alpha",0.001));  search.setBeamWidth(params.getInt("beamWidth",5));  search.setHighPValueAlpha(params.getDouble("zeroEdgeP",0.05));  this.graph=search.search();  setOriginalSemIm(search.getOriginalSemIm());  this.newSemIm=search.getNewSemIm();  fireGraphChange(graph);  if (getSourceGraph() != null) {    GraphUtils.arrangeBySourceGraph(graph,getSourceGraph());  } else   if (knowledge.isDefaultToKnowledgeLayout()) {    SearchGraphUtils.arrangeByKnowledgeTiers(graph,knowledge);  } else {    GraphUtils.circleLayout(graph,200,200,150);  }  setResultGraph(SearchGraphUtils.patternForDag(graph,knowledge));}  }
class C{  public CDFT(double[] xr,double[] xi,double[] yr,double[] yi,int log2N){  if (log2N < 3)   throw new IllegalArgumentException("DFT size must be >= 8");  this.yr=yr;  this.yi=yi;  this.log2N=log2N;  N=1 << log2N;  createTable();  if (log2N == 3)   dft=new CDFTsr8(0,1,0); else   if (log2N == 4)   dft=new CDFTsr16(0,1,0); else   if (log2N >= 5)   dft=new CDFTsr(log2N,c,c3,s,s3);  dft.link(xr,xi,yr,yi);  arraysUnlinked=false;}  }
class C{  public byte[] composeString(byte[] oldString,byte newString){  int length=oldString.length;  byte[] string=new byte[length + 1];  System.arraycopy(oldString,0,string,0,length);  string[length]=newString;  return string;}  }
class C{  public static void notEmpty(String string){  if (string == null || string.length() == 0)   throw new IllegalArgumentException("String must not be empty");}  }
class C{  public T caseSetterDeclaration(SetterDeclaration object){  return null;}  }
class C{  private void playSound(String id){  String fileName=client.settings.getString(id + "SoundFile");  long volume=client.settings.getLong(id + "SoundVolume");  int delay=((Long)client.settings.getLong(id + "SoundDelay")).intValue();  Sound.play(fileName,volume,id,delay);}  }
class C{  public boolean isNodeAddr(long addr){  final long offset=getOffset(addr);  final int length=getByteCount(addr);  final boolean isNodeAddr=offset >= offsetNodes && (offset + length) <= (offsetNodes + extentNodes);  return isNodeAddr;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode15.class,args);}  }
class C{  @Deprecated public Debug debug(){  return new Debug(config);}  }
class C{  private boolean updateUserDefined(){  MGoal[] goals=MGoal.getMeasureGoals(getCtx(),getPA_Measure_ID());  for (  MGoal goal : goals) {    BigDecimal amt=Env.ZERO;    PO po=new MTable(getCtx(),get_Table_ID(),get_TrxName()).getPO(get_ID(),get_TrxName());    StringTokenizer st=new StringTokenizer(getCalculationClass(),";,",false);    while (st.hasMoreTokens()) {      String cmd=st.nextToken().trim();      String retValue="";      if (cmd.toLowerCase().startsWith(MRule.SCRIPT_PREFIX)) {        MRule rule=MRule.get(getCtx(),cmd.substring(MRule.SCRIPT_PREFIX.length()));        if (rule == null) {          retValue="Script " + cmd + " not found";          log.log(Level.SEVERE,retValue);          break;        }        if (!(rule.getEventType().equals(MRule.EVENTTYPE_MeasureForPerformanceAnalysis) && rule.getRuleType().equals(MRule.RULETYPE_JSR223ScriptingAPIs))) {          retValue="Script " + cmd + " must be of type JSR 223 and event measure";          log.log(Level.SEVERE,retValue);          break;        }        ScriptEngine engine=rule.getScriptEngine();        MRule.setContext(engine,po.getCtx(),0);        engine.put(MRule.ARGUMENTS_PREFIX + "Ctx",po.getCtx());        engine.put(MRule.ARGUMENTS_PREFIX + "PO",po);        try {          Object value=engine.eval(rule.getScript());          amt=(BigDecimal)value;        } catch (        Exception e) {          log.log(Level.SEVERE,"",e);          retValue="Script Invalid: " + e.toString();          return false;        }      } else {        MeasureInterface custom=null;        try {          Class<?> clazz=Class.forName(cmd);          custom=(MeasureInterface)clazz.newInstance();        } catch (        Exception e) {          log.log(Level.SEVERE,"No custom measure class " + cmd + " - "+ e.toString(),e);          return false;        }        try {          amt=custom.getValue();        } catch (        Exception e) {          log.log(Level.SEVERE,custom.toString(),e);          return false;        }      }      if (!Util.isEmpty(retValue)) {        log.severe(retValue);        return false;      }    }    goal.setMeasureActual(amt);    goal.save(get_TrxName());  }  return true;}  }
class C{  public void testMasterLeaveAwareRunnable() throws Exception {  Ignite ignite=startGrid(1);  startGrid(2);  final TestBinarylizableMasterLeaveAwareRunnable runnable=new TestBinarylizableMasterLeaveAwareRunnable();  ignite.compute(ignite.cluster().forRemotes()).run(runnable);  assert TestBinarylizableRunnable.executed.get();  assert TestBinarylizableRunnable.writeCalled.get();  assert TestBinarylizableRunnable.readCalled.get();  assert TestBinarylizableMasterLeaveAwareRunnable.writeCalled.get();  assert TestBinarylizableMasterLeaveAwareRunnable.readCalled.get();}  }
class C{  public boolean isDisableDefaultServer(){  return this.disableDefaultServer;}  }
class C{  protected JMenuBar createMenuBar(View v){  JMenuBar mb=new JMenuBar();  JMenu fileMenu=null;  JMenu editMenu=null;  JMenu helpMenu=null;  JMenu viewMenu=null;  JMenu windowMenu=null;  String fileMenuText=labels.getString("file.text");  String editMenuText=labels.getString("edit.text");  String viewMenuText=labels.getString("view.text");  String windowMenuText=labels.getString("window.text");  String helpMenuText=labels.getString("help.text");  LinkedList<JMenu> ll=new LinkedList<JMenu>();  getModel().getMenuBuilder().addOtherMenus(ll,this,v);  for (  JMenu mm : ll) {    String text=mm.getText();    if (text == null) {    } else     if (text.equals(fileMenuText)) {      fileMenu=mm;      continue;    } else     if (text.equals(editMenuText)) {      editMenu=mm;      continue;    } else     if (text.equals(viewMenuText)) {      viewMenu=mm;      continue;    } else     if (text.equals(windowMenuText)) {      windowMenu=mm;      continue;    } else     if (text.equals(helpMenuText)) {      helpMenu=mm;      continue;    }    mb.add(mm);  }  if (fileMenu == null) {    fileMenu=createFileMenu(v);  }  if (editMenu == null) {    editMenu=createEditMenu(v);  }  if (viewMenu == null) {    viewMenu=createViewMenu(v);  }  if (windowMenu == null) {    windowMenu=createWindowMenu(v);  }  if (helpMenu == null) {    helpMenu=createHelpMenu(v);  }  if (fileMenu != null) {    mb.add(fileMenu,0);  }  if (editMenu != null) {    mb.add(editMenu,Math.min(1,mb.getComponentCount()));  }  if (viewMenu != null) {    mb.add(viewMenu,Math.min(2,mb.getComponentCount()));  }  if (windowMenu != null) {    mb.add(windowMenu);  }  if (helpMenu != null) {    mb.add(helpMenu);  }  return mb;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected StepPattern stepPattern(int opPos,int stepCount,StepPattern ancestorPattern) throws TransformerException {  int startOpPos=opPos;  int stepType=getOp(opPos);  if (OpCodes.ENDOP == stepType) {    return null;  }  boolean addMagicSelf=true;  int endStep=getNextOpPos(opPos);  StepPattern pattern;  int argLen;switch (stepType) {case OpCodes.OP_FUNCTION:    if (DEBUG)     System.out.println("MATCH_FUNCTION: " + m_currentPattern);  addMagicSelf=false;argLen=getOp(opPos + OpMap.MAPINDEX_LENGTH);pattern=new FunctionPattern(compileFunction(opPos),Axis.PARENT,Axis.CHILD);break;case OpCodes.FROM_ROOT:if (DEBUG) System.out.println("FROM_ROOT, " + m_currentPattern);addMagicSelf=false;argLen=getArgLengthOfStep(opPos);opPos=getFirstChildPosOfStep(opPos);pattern=new StepPattern(DTMFilter.SHOW_DOCUMENT | DTMFilter.SHOW_DOCUMENT_FRAGMENT,Axis.PARENT,Axis.CHILD);break;case OpCodes.MATCH_ATTRIBUTE:if (DEBUG) System.out.println("MATCH_ATTRIBUTE: " + getStepLocalName(startOpPos) + ", "+ m_currentPattern);argLen=getArgLengthOfStep(opPos);opPos=getFirstChildPosOfStep(opPos);pattern=new StepPattern(DTMFilter.SHOW_ATTRIBUTE,getStepNS(startOpPos),getStepLocalName(startOpPos),Axis.PARENT,Axis.ATTRIBUTE);break;case OpCodes.MATCH_ANY_ANCESTOR:if (DEBUG) System.out.println("MATCH_ANY_ANCESTOR: " + getStepLocalName(startOpPos) + ", "+ m_currentPattern);argLen=getArgLengthOfStep(opPos);opPos=getFirstChildPosOfStep(opPos);int what=getWhatToShow(startOpPos);if (0x00000500 == what) addMagicSelf=false;pattern=new StepPattern(getWhatToShow(startOpPos),getStepNS(startOpPos),getStepLocalName(startOpPos),Axis.ANCESTOR,Axis.CHILD);break;case OpCodes.MATCH_IMMEDIATE_ANCESTOR:if (DEBUG) System.out.println("MATCH_IMMEDIATE_ANCESTOR: " + getStepLocalName(startOpPos) + ", "+ m_currentPattern);argLen=getArgLengthOfStep(opPos);opPos=getFirstChildPosOfStep(opPos);pattern=new StepPattern(getWhatToShow(startOpPos),getStepNS(startOpPos),getStepLocalName(startOpPos),Axis.PARENT,Axis.CHILD);break;default :error(XPATHErrorResources.ER_UNKNOWN_MATCH_OPERATION,null);return null;}pattern.setPredicates(getCompiledPredicates(opPos + argLen));if (null == ancestorPattern) {} else {pattern.setRelativePathPattern(ancestorPattern);}StepPattern relativePathPattern=stepPattern(endStep,stepCount + 1,pattern);return (null != relativePathPattern) ? relativePathPattern : pattern;}  }
class C{  public void insertHistory(String value) throws HeaderCardException {  insertCommentStyle(HISTORY.key(),value);}  }
class C{  public double interceptStdErr(){  return Math.sqrt(svar0);}  }
class C{  Object convertToDefaultObject(Value v){  Object o;switch (v.getType()) {case Value.CLOB:{      int id=getNextId(TraceObject.CLOB);      o=new JdbcClob(this,v,id);      break;    }case Value.BLOB:{    int id=getNextId(TraceObject.BLOB);    o=new JdbcBlob(this,v,id);    break;  }case Value.JAVA_OBJECT:if (SysProperties.serializeJavaObject) {  o=JdbcUtils.deserialize(v.getBytesNoCopy());  break;}default :o=v.getObject();}return o;}  }
class C{  public void addColumnName(String name) throws CsvException {  if (rowCount > 0) {    throw new CsvException("Attempt to add column after writing one or more rows");  }  int index=names.size() + 1;  names.put(name,index);}  }
class C{  public static IStatus validateMethodName(String name,String sourceLevel,String complianceLevel){  return validateIdentifier(name,sourceLevel,complianceLevel);}  }
class C{  private void renameFolder() throws VcsException, IOException {  FilePath folder=getChildPath(mySandboxRoot,FOLDER_NAME_2);  rename(folder,FOLDER_NAME_3);  folder=getChildPath(mySandboxRoot,FOLDER_NAME_3);  assertFolder(folder,1);}  }
class C{  @Override public void start(Map<String,String> map){  try {    port=Integer.parseInt(map.get(MongodbSourceConnector.PORT));  } catch (  Exception e) {    throw new ConnectException(MongodbSourceConnector.PORT + " config should be an Integer");  }  try {    batchSize=Integer.parseInt(map.get(MongodbSourceConnector.BATCH_SIZE));  } catch (  Exception e) {    throw new ConnectException(MongodbSourceConnector.BATCH_SIZE + " config should be an Integer");  }  schemaName=map.get(MongodbSourceConnector.SCHEMA_NAME);  topicPrefix=map.get(MongodbSourceConnector.TOPIC_PREFIX);  host=map.get(MongodbSourceConnector.HOST);  databases=Arrays.asList(map.get(MongodbSourceConnector.DATABASES).split(","));  log.trace("Creating schema");  if (schemas == null) {    schemas=new HashMap<>();  }  for (  String db : databases) {    db=db.replaceAll("[\\s.]","_");    if (schemas.get(db) == null)     schemas.put(db,SchemaBuilder.struct().name(schemaName.concat("_").concat(db)).field("timestamp",Schema.OPTIONAL_INT32_SCHEMA).field("order",Schema.OPTIONAL_INT32_SCHEMA).field("operation",Schema.OPTIONAL_STRING_SCHEMA).field("database",Schema.OPTIONAL_STRING_SCHEMA).field("object",Schema.OPTIONAL_STRING_SCHEMA).build());  }  loadOffsets();  reader=new MongodbReader(host,port,databases,offsets);  reader.run();}  }
class C{  protected void onCreate(Bundle icicle){  super.onCreate(icicle);  mAccountAuthenticatorResponse=getIntent().getParcelableExtra(AccountManager.KEY_ACCOUNT_AUTHENTICATOR_RESPONSE);  if (mAccountAuthenticatorResponse != null) {    mAccountAuthenticatorResponse.onRequestContinued();  }}  }
class C{  public byte[] embedMark(File sigFile,File coverFile,String stegoFileName) throws OpenStegoException {  if (!this.plugin.getPurposes().contains(OpenStegoPlugin.Purpose.WATERMARKING)) {    throw new OpenStegoException(null,OpenStego.NAMESPACE,OpenStegoException.PLUGIN_DOES_NOT_SUPPORT_WM);  }  InputStream is=null;  String filename=null;  try {    if (sigFile == null) {      is=System.in;    } else {      is=new FileInputStream(sigFile);      filename=sigFile.getName();    }    return embedMark(CommonUtil.getStreamBytes(is),filename,coverFile == null ? null : CommonUtil.getFileBytes(coverFile),coverFile == null ? null : coverFile.getName(),stegoFileName);  } catch (  IOException ioEx) {    throw new OpenStegoException(ioEx);  }}  }
class C{  public GF2nPolynomialElement invertSquare() throws ArithmeticException {  GF2nPolynomialElement n;  GF2nPolynomialElement u;  int i, j, k, b;  if (isZero()) {    throw new ArithmeticException();  }  b=mField.getDegree() - 1;  n=new GF2nPolynomialElement(this);  n.polynomial.expandN((mDegree << 1) + 32);  n.polynomial.reduceN();  k=1;  for (i=IntegerFunctions.floorLog(b) - 1; i >= 0; i--) {    u=new GF2nPolynomialElement(n);    for (j=1; j <= k; j++) {      u.squareThisPreCalc();    }    n.multiplyThisBy(u);    k<<=1;    if ((b & bitMask[i]) != 0) {      n.squareThisPreCalc();      n.multiplyThisBy(this);      k+=1;    }  }  n.squareThisPreCalc();  return n;}  }
class C{  public final void connect() throws RcsPermissionDeniedException {  if (!sApiCompatible) {    try {      sApiCompatible=mRcsServiceControl.isCompatible(this);      if (!sApiCompatible) {        throw new RcsPermissionDeniedException("The TAPI client version of the image sharing service is not compatible with the TAPI service implementation version on this device!");      }    } catch (    RcsServiceException e) {      throw new RcsPermissionDeniedException("The compatibility of TAPI client version with the TAPI service implementation version of this device cannot be checked for the image sharing service!",e);    }  }  Intent serviceIntent=new Intent(IImageSharingService.class.getName());  serviceIntent.setPackage(RcsServiceControl.RCS_STACK_PACKAGENAME);  mCtx.bindService(serviceIntent,apiConnection,0);}  }
class C{  private static String toAnnotation(Global global){  Attribute attribute=new Attribute(global.getValue(),global.getAttributes());  attribute.setGet(global.getGet());  attribute.setSet(global.getSet());  String accessor=toJMapAccessor(attribute);  StringBuilder str=new StringBuilder();  if (!isEmpty(accessor))   str.append(accessor);  str.append("@JGlobalMap(");  boolean before=false;  if (global.getValue() != null) {    str.append("value=\"" + global.getValue() + "\"");    before=true;  }  SimplyAttribute[] attributes=global.getAttributes();  if (attributes != null) {    if (before)     str.append(", "); else     before=true;    str.append("attributes={");    for (int i=0; i < attributes.length; i++) {      str.append("\"" + attributes[i].getName() + "\"");      if (i < attributes.length - 1)       str.append(", ");    }    str.append("}");  }  Class<?>[] classes=global.getClasses();  if (classes != null) {    if (before)     str.append(", "); else     before=true;    str.append("classes={");    for (int i=0; i < classes.length; i++) {      str.append(classes[i].getSimpleName() + ".class");      if (i < classes.length - 1)       str.append(", ");    }    str.append("}");  }  String[] excluded=global.getExcluded();  if (excluded != null) {    if (before)     str.append(", ");    str.append("excluded={");    for (int i=0; i < excluded.length; i++) {      str.append("\"" + excluded[i] + "\"");      if (i < excluded.length - 1)       str.append(", ");    }    str.append("}");  }  str.append(")");  if ("@JGlobalMap()".equals(str.toString()))   return "@JGlobalMap";  return str.toString();}  }
class C{  public void registerReceiver(Context context){  assert Looper.getMainLooper() == Looper.myLooper();  if (!mIsRegistered.getAndSet(true)) {    context.registerReceiver(this,new IntentFilter(Intent.ACTION_SCREEN_ON));    mNeedToRunActions.set(true);  }}  }
class C{  public void clear(){  this.normal=null;  this.distance=0;  this.point1=null;  this.point2=null;}  }
class C{  public Style12Parser(){}  }
class C{  public void repaint(Shape area){  if (area == null)   return;  RectListManager rlm=new RectListManager();  rlm.add(usr2dev.createTransformedShape(area).getBounds());  repaint(rlm);}  }
class C{  public void trimToLiveSet(Set<ObjectReference> liveSet){  int removed=0;  Iterator<ObjectReference> iterator=objects.keySet().iterator();  while (iterator.hasNext()) {    ObjectReference current=iterator.next();    if (!liveSet.contains(current)) {      Entry entry=objects.get(current);      if (VERBOSE || ObjectModel.isWatched(current)) {        Trace.printf(Item.SANITY,"Object death: %s",entry.formatHistory());      }      entry.kill();    }    removed++;  }  Trace.trace(Item.SANITY,"Trimmed %d dead objects from object table",removed);}  }
class C{  protected void clearDatacenters(){  for (  Vm vm : getVmsCreatedList()) {    Log.printConcatLine(CloudSim.clock(),": " + getName(),": Destroying VM #",vm.getId());    sendNow(getVmsToDatacentersMap().get(vm.getId()),CloudSimTags.VM_DESTROY,vm);  }  getVmsCreatedList().clear();}  }
class C{  public DateConverter(){  super();}  }
class C{  private void buildPostBusinessObjectDataStorageFilesResponse(MockCloseableHttpResponse response,URI uri) throws JAXBException {  BusinessObjectDataStorageFilesCreateResponse businessObjectDataStorageFilesCreateResponse=new BusinessObjectDataStorageFilesCreateResponse();  response.setEntity(getHttpEntity(businessObjectDataStorageFilesCreateResponse));}  }
class C{  public void fetchNull() throws BerException {  fetchNull(NullTag);}  }
class C{  public StrBuilder insert(int index,float value){  return insert(index,String.valueOf(value));}  }
class C{  public void testDrainTasksTo(){  final CountDownLatch done=new CountDownLatch(1);  SubFJP p=new SubFJP();  PoolCleaner cleaner=null;  try {    cleaner=cleaner(p);    ForkJoinTask<?> a=p.submit(awaiter(done));    ForkJoinTask<?> b=p.submit(awaiter(done));    ForkJoinTask<?> c=p.submit(awaiter(done));    ArrayList<ForkJoinTask<?>> al=new ArrayList();    p.drainTasksTo(al);    assertTrue(al.size() > 0);    for (    ForkJoinTask<?> r : al) {      assertTrue(r == a || r == b || r == c);      assertFalse(r.isDone());    }    done.countDown();  }  finally {    if (cleaner != null) {      cleaner.close();    }  }}  }
class C{  private WebResourceStatistics computeNumberOfFailedOccurrences(WebResourceStatistics wrStatistics,WebResource webResource,boolean isManualAudit){  int nbOfFailedOccurences=this.getNumberOfOccurrencesByWebResourceAndResultType(webResource.getId(),TestSolution.FAILED,isManualAudit).intValue();  wrStatistics.setNbOfFailedOccurences(nbOfFailedOccurences);  return wrStatistics;}  }
class C{  public static double nextOut(double d){  if (d > 0.0)   return Math.nextUp(d); else   return -Math.nextUp(-d);}  }
class C{  public void startElement(String ns,String localName,String name,Attributes atts) throws org.xml.sax.SAXException {  Element elem;  if ((null == ns) || (ns.length() == 0))   elem=m_doc.createElementNS(null,name); else   elem=m_doc.createElementNS(ns,name);  append(elem);  try {    int nAtts=atts.getLength();    if (0 != nAtts) {      for (int i=0; i < nAtts; i++) {        if (atts.getType(i).equalsIgnoreCase("ID"))         setIDAttribute(atts.getValue(i),elem);        String attrNS=atts.getURI(i);        if ("".equals(attrNS))         attrNS=null;        String attrQName=atts.getQName(i);        if (attrQName.startsWith("xmlns:"))         attrNS="http://www.w3.org/2000/xmlns/";        elem.setAttributeNS(attrNS,attrQName,atts.getValue(i));      }    }    m_elemStack.push(elem);    m_currentNode=elem;  } catch (  java.lang.Exception de) {    throw new org.xml.sax.SAXException(de);  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof ModuloAxis)) {    return false;  }  ModuloAxis that=(ModuloAxis)obj;  if (this.displayStart != that.displayStart) {    return false;  }  if (this.displayEnd != that.displayEnd) {    return false;  }  if (!this.fixedRange.equals(that.fixedRange)) {    return false;  }  return super.equals(obj);}  }
class C{  final public boolean isSourceDefault(){  return getSourceGraph() == null;}  }
class C{  public static String removeFromQueryString(String queryString,String matching) throws UnsupportedEncodingException {  if (queryString == null) {    return null;  }  StringBuffer resultQStr=new StringBuffer();  for (  String pair : queryString.split("&")) {    int eq=pair.indexOf("=");    String key=null;    if (eq < 0) {      key=URLDecoder.decode(pair,UTF8_ENCODING);    } else {      key=URLDecoder.decode(pair.substring(0,eq),UTF8_ENCODING);    }    if (!key.equalsIgnoreCase(matching)) {      if (resultQStr.length() > 0) {        resultQStr.append("&");      }      resultQStr.append(pair);    }  }  return resultQStr.toString();}  }
class C{  public int hashCode(){  int result=17;  if (key != null) {    result=37 * key.hashCode();  }  if (repository != null) {    result=37 * repository.hashCode();  }  return result;}  }
class C{  private static int categorizeByYear2014Method(Context c){  ArrayList<Integer> componentYears=new ArrayList<Integer>();  conditionallyAdd(componentYears,getNumCoresYear());  conditionallyAdd(componentYears,getClockSpeedYear());  conditionallyAdd(componentYears,getRamYear(c));  if (componentYears.isEmpty())   return CLASS_UNKNOWN;  Collections.sort(componentYears);  if ((componentYears.size() & 0x01) == 1) {    return componentYears.get(componentYears.size() / 2);  } else {    int baseIndex=componentYears.size() / 2 - 1;    return componentYears.get(baseIndex) + (componentYears.get(baseIndex + 1) - componentYears.get(baseIndex)) / 2;  }}  }
class C{  private void drawLine(Graphics2D g2,Line2D line,double x0,double y0,double x1,double y1,Rectangle2D dataArea){  if (Double.isNaN(x0) || Double.isNaN(x1) || Double.isNaN(y0)|| Double.isNaN(y1)) {    return;  }  line.setLine(x0,y0,x1,y1);  boolean visible=LineUtilities.clipLine(line,dataArea);  if (visible) {    g2.draw(line);  }}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GroupFile'";  db.execSQL(sql);}  }
class C{  public void testStub() throws Exception {  FooRequest fooRequest=FooRequest.newBuilder().build();  BarRequest barRequest=BarRequest.newBuilder().build();  MockCallback<FooResponse> fooCallback=new MockCallback<FooResponse>();  MockCallback<BarResponse> barCallback=new MockCallback<BarResponse>();  RpcChannel mockChannel=control.createMock(RpcChannel.class);  TestService stub=TestService.newStub(mockChannel);  mockChannel.callMethod(EasyMock.same(fooDescriptor),EasyMock.same(mockController),EasyMock.same(fooRequest),EasyMock.same(FooResponse.getDefaultInstance()),this.<Message>wrapsCallback(fooCallback));  mockChannel.callMethod(EasyMock.same(barDescriptor),EasyMock.same(mockController),EasyMock.same(barRequest),EasyMock.same(BarResponse.getDefaultInstance()),this.<Message>wrapsCallback(barCallback));  control.replay();  stub.foo(mockController,fooRequest,fooCallback);  stub.bar(mockController,barRequest,barCallback);  control.verify();}  }
class C{  public int next(){  if (_currentNode != NULL) {    int node=_currentNode;    _currentNode=_nextsib(node);    return returnNode(makeNodeHandle(node));  }  return END;}  }
class C{  public SQLTransientException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public void sendRequestHeader(final HttpRequest request) throws HttpException, IOException {  if (request == null) {    throw new IllegalArgumentException("HTTP request may not be null");  }  assertOpen();  this.requestWriter.write(request);  this.metrics.incrementRequestCount();}  }
class C{  public boolean hasValueInfo(){  return !receiverValue.equals("") || methodArgumentValues != null;}  }
class C{  public int diff_commonSuffix(String text1,String text2){  int text1_length=text1.length();  int text2_length=text2.length();  int n=Math.min(text1_length,text2_length);  for (int i=1; i <= n; i++) {    if (text1.charAt(text1_length - i) != text2.charAt(text2_length - i)) {      return i - 1;    }  }  return n;}  }
class C{  public Object evaluate(ExecutionContext context) throws FunctionDomainException, TypeMismatchException, NameResolutionException, QueryInvocationTargetException {  throw new UnsupportedOperationException(LocalizedStrings.CompiledIteratorDef_NOT_TO_BE_EVALUATED_DIRECTLY.toLocalizedString());}  }
class C{  private boolean passPackageNameFilter(String resourceName){  for (  String context : packageWhitelist) {    if (resourceName.startsWith(context)) {      return true;    }  }  return false;}  }
class C{  public static byte[] convertToPem(Certificate... objects) throws IOException, CertificateEncodingException {  ByteArrayOutputStream bao=new ByteArrayOutputStream();  Writer writer=new OutputStreamWriter(bao,Charsets.US_ASCII);  PemWriter pw=new PemWriter(writer);  for (  Certificate o : objects) {    pw.writeObject(new PemObject("CERTIFICATE",o.getEncoded()));  }  pw.close();  return bao.toByteArray();}  }
class C{  public int hashCode(){  return super.hashCode();}  }
class C{  public static void registerMBean(ConnectionInfo connectionInfo,Database database) throws JMException {  String path=connectionInfo.getName();  if (!MBEANS.containsKey(path)) {    MBeanServer mbeanServer=ManagementFactory.getPlatformMBeanServer();    String name=database.getShortName();    ObjectName mbeanObjectName=getObjectName(name,path);    MBEANS.put(path,mbeanObjectName);    DatabaseInfo info=new DatabaseInfo(database);    Object mbean=new DocumentedMBean(info,DatabaseInfoMBean.class);    mbeanServer.registerMBean(mbean,mbeanObjectName);  }}  }
class C{  @EventHandler public void onPlayerJoin(PlayerJoinEvent event){  addPlayer(event.getPlayer());}  }
class C{  public GmItemType(){}  }
class C{  public String normalizeSystemName(String systemName){  int i=matchTentative(systemName);  if (i >= 0) {    return ((LightManager)getMgr(i)).normalizeSystemName(systemName);  }  return "";}  }
class C{  public Person(int id,String firstName,String lastName,double salary){  this(id,0,firstName,lastName,salary);}  }
class C{  public boolean hasNulls(){  if (values.length != key.getColumns().size())   return true;  for (int i=0; i < values.length; i++) {    if (values[i] == null)     return true;  }  return false;}  }
class C{  public void buildIndexMapping() throws SQLException {  int numFields=this.fields.length;  this.columnLabelToIndex=new TreeMap<String,Integer>(String.CASE_INSENSITIVE_ORDER);  this.fullColumnNameToIndex=new TreeMap<String,Integer>(String.CASE_INSENSITIVE_ORDER);  this.columnNameToIndex=new TreeMap<String,Integer>(String.CASE_INSENSITIVE_ORDER);  for (int i=numFields - 1; i >= 0; i--) {    Integer index=Integer.valueOf(i);    String columnName=this.fields[i].getOriginalName();    String columnLabel=this.fields[i].getName();    String fullColumnName=this.fields[i].getFullName();    if (columnLabel != null) {      this.columnLabelToIndex.put(columnLabel,index);    }    if (fullColumnName != null) {      this.fullColumnNameToIndex.put(fullColumnName,index);    }    if (columnName != null) {      this.columnNameToIndex.put(columnName,index);    }  }  this.hasBuiltIndexMapping=true;}  }
class C{  public void testEquality(){  RegistrationKey key1=new RegistrationKey(new SimpleContainerIdentity("container"),"hint");  RegistrationKey key2=new RegistrationKey(new SimpleContainerIdentity("container"),"hint");  RegistrationKey key3=new RegistrationKey(new SimpleContainerIdentity("container"),"otherHint");  RegistrationKey key4=new RegistrationKey(new SimpleContainerIdentity("otherContainer"),"hint");  RegistrationKey key5=new RegistrationKey(new SimpleContainerIdentity("otherContainer"),"otherHint");  RegistrationKey key6=new RegistrationKey(new FullContainerIdentity("container",ContainerType.INSTALLED),"hint");  RegistrationKey key7=new RegistrationKey(new FullContainerIdentity("container",ContainerType.INSTALLED),"hint");  RegistrationKey key8=new RegistrationKey(new FullContainerIdentity("container",ContainerType.EMBEDDED),"hint");  RegistrationKey key9=new RegistrationKey(new FullContainerIdentity("otherContainer",ContainerType.INSTALLED),"hint");  RegistrationKey key10=new RegistrationKey(new FullContainerIdentity("container",ContainerType.INSTALLED),"otherHint");  assertTrue(key1.equals(key2));  assertTrue(key1.hashCode() == key2.hashCode());  assertFalse(key1.equals(key3));  assertFalse(key1.equals(key4));  assertFalse(key1.equals(key5));  assertFalse(key1.equals(key6));  assertTrue(key6.equals(key7));  assertTrue(key6.hashCode() == key7.hashCode());  assertFalse(key6.equals(key8));  assertFalse(key6.equals(key9));  assertFalse(key6.equals(key10));}  }
class C{  public void initialise(int k,double epsilon) throws Exception {  this.epsilon=epsilon;  super.initialise(k);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void removeKey(String key){  Cacheable cacheable=lruCacheMap.get(key);  if (null != cacheable) {    currentSize=currentSize - cacheable.getMemorySize();  }  lruCacheMap.remove(key);  LOGGER.info("Removed level entry from InMemory level lru cache :: " + key);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public String toString(){  return "[ (" + getLeft() + ", "+ getTop()+ ") - ("+ getRight()+ ", "+ getBottom()+ ") ]";}  }
class C{  public static Geometry[] snap(Geometry g0,Geometry g1,double snapTolerance){  Geometry[] snapGeom=new Geometry[2];  GeometrySnapper snapper0=new GeometrySnapper(g0);  snapGeom[0]=snapper0.snapTo(g1,snapTolerance);  GeometrySnapper snapper1=new GeometrySnapper(g1);  snapGeom[1]=snapper1.snapTo(snapGeom[0],snapTolerance);  return snapGeom;}  }
class C{  protected void initForm(){  log.info("");  try {    jbInit();    dynInit();    this.setWidth("100%");    this.setClosable(true);    this.setTitle("Import File Loader");    this.setBorder("normal");    Borderlayout layout=new Borderlayout();    layout.setHeight("100%");    layout.setWidth("100%");    this.appendChild(layout);    North north=new North();    layout.appendChild(north);    north.appendChild(northPanel);    Center center=new Center();    center.setFlex(true);    layout.appendChild(center);    center.appendChild(centerPanel);    South south=new South();    layout.appendChild(south);    south.appendChild(confirmPanel);  } catch (  Exception e) {    log.log(Level.SEVERE,"init",e);  }}  }
class C{  public void testInvokeAny5() throws Throwable {  ExecutorService e=new ForkJoinPool(1);  PoolCleaner cleaner=null;  try {    cleaner=cleaner(e);    List<Callable<String>> l=new ArrayList<Callable<String>>();    l.add(new NPETask());    try {      e.invokeAny(l);      shouldThrow();    } catch (    ExecutionException success) {      assertTrue(success.getCause() instanceof NullPointerException);    }  }  finally {    if (cleaner != null) {      cleaner.close();    }  }}  }
class C{  public boolean isSetNewlong(){  return EncodingUtils.testBit(__isset_bitfield,__NEWLONG_ISSET_ID);}  }
class C{  private void tryParseElExpression(final IDOMAttr attr){  final IRegion attrValueRegion=XmlUtilities.getAttributeValueRegion(attr);  String attrValue=attr.getNodeValue();  if (attrValueRegion == null || attrValue == null) {    return;  }  List<IRegion> exprContentRegions=UiBinderUtilities.getElExpressionRegions(attrValue);  for (  final IRegion exprContentRegion : exprContentRegions) {    String exprContents=attrValue.substring(exprContentRegion.getOffset(),exprContentRegion.getOffset() + exprContentRegion.getLength());    ElExpressionFirstFragment firstFragment=UiBinderUtilities.findMatchingElExpressionFirstFragment(exprContents,firstFragmentComputer.getFirstFragments());    if (firstFragment == null) {      setFieldReferenceFirstFragmentUndefinedError(attrValueRegion,exprContentRegion,exprContents);      continue;    }    String allButFirstFragment=UiBinderUtilities.getAllButFirstFragment(exprContents);    int allButFirstFragmentOffsetInDoc=attrValueRegion.getOffset() + exprContentRegion.getOffset() + (exprContents.length() - allButFirstFragment.length());    IType fieldType=UiBinderXmlModelUtilities.resolveElementToJavaType((IDOMElement)firstFragment.getNode(),javaProject);    if (UiBinderXmlModelUtilities.isStyleElement(firstFragment.getNode())) {      Region fieldRefRegion=new Region(exprContentRegion.getOffset() + attrValueRegion.getOffset(),exprContentRegion.getLength());      tryParseCssElExpression((IDOMElement)firstFragment.getNode(),allButFirstFragment,allButFirstFragmentOffsetInDoc,fieldRefRegion);    } else     if (fieldType != null) {      tryParseJavaElExpression(fieldType,allButFirstFragment,allButFirstFragmentOffsetInDoc);    }  }}  }
class C{  @Override public void capabilitiesFilterChanged(CapabilitiesFilterChangeEvent e){  if (e.getFilter() == null) {    updateCapabilitiesFilter(null);  } else {    updateCapabilitiesFilter((Capabilities)e.getFilter().clone());  }}  }
class C{  public XMeansCore(ExampleSet eSet,int k_min,int k_max,boolean kpp,int maxOptimizationSteps,int maxRuns,OperatorDescription description,DistanceMeasure measure,String cluster_alg){  super(description);  this.exampleSet=eSet;  this.measure=measure;  this.k_max=k_max;  this.k_min=k_min;  this.kpp=kpp;  this.maxOptimizationSteps=maxOptimizationSteps;  this.maxRuns=maxRuns;  this.description=description;  this.centroidAssignments=new int[exampleSet.size()];  this.ClusteringAlgorithm=cluster_alg;}  }
class C{  public static boolean writeXMPMeta(String filename,XMPMeta meta){  if (!filename.toLowerCase().endsWith(".jpg") && !filename.toLowerCase().endsWith(".jpeg")) {    Log.d(TAG,"XMP parse: only jpeg file is supported");    return false;  }  List<Section> sections=null;  try {    sections=parse(new FileInputStream(filename),false);    sections=insertXMPSection(sections,meta);    if (sections == null) {      return false;    }  } catch (  FileNotFoundException e) {    Log.e(TAG,"Could not read file: " + filename,e);    return false;  }  FileOutputStream os=null;  try {    os=new FileOutputStream(filename);    writeJpegFile(os,sections);  } catch (  IOException e) {    Log.d(TAG,"Write file failed:" + filename,e);    return false;  } finally {    if (os != null) {      try {        os.close();      } catch (      IOException e) {      }    }  }  return true;}  }
class C{  public boolean isInTransit(){  Object oo=get_Value(COLUMNNAME_IsInTransit);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void init(CipherParameters param){  if (!(param instanceof ECPublicKeyParameters)) {    throw new IllegalArgumentException("ECPublicKeyParameters are required for fixed transform.");  }  this.key=(ECPublicKeyParameters)param;}  }
class C{  static boolean isSubclass(Class<?> a,Class<?> b){  if (a == b) {    return true;  }  if (a == null || b == null) {    return false;  }  for (Class<?> x=a; x != null; x=x.getSuperclass()) {    if (x == b) {      return true;    }    if (b.isInterface()) {      Class<?>[] interfaces=x.getInterfaces();      for (int i=0; i < interfaces.length; i++) {        if (isSubclass(interfaces[i],b)) {          return true;        }      }    }  }  return false;}  }
class C{  @After public void tearDown() throws Exception {  assertFalse(threadFailed);}  }
class C{  @HLEFunction(nid=0x7ED29E40,version=150) public int sceRtcSetTick(TPointer timeAddr,TPointer64 ticksAddr){  long ticks=ticksAddr.getValue() - rtcMagicOffset;  ScePspDateTime time=ScePspDateTime.fromMicros(ticks);  time.write(timeAddr);  return 0;}  }
class C{  public final double[] distributionForInstance(Instance instance) throws Exception {  double[] doubles=new double[instance.numClasses()];  for (int i=0; i < doubles.length; i++) {    doubles[i]=getProbs(i,instance,1);  }  return doubles;}  }
class C{  @SuppressWarnings("unchecked") public static <T>int binarySearch(List<? extends T> list,T object,Comparator<? super T> comparator){  if (comparator == null) {    return Collections.binarySearch((List<? extends java.lang.Comparable<? super T>>)list,object);  }  if (!(list instanceof RandomAccess)) {    ListIterator<? extends T> it=list.listIterator();    while (it.hasNext()) {      int result;      if ((result=-comparator.compare(it.next(),object)) <= 0) {        if (result == 0) {          return it.previousIndex();        }        return -it.previousIndex() - 1;      }    }    return -list.size() - 1;  }  int low=0, mid=list.size(), high=mid - 1, result=-1;  while (low <= high) {    mid=(low + high) >> 1;    if ((result=-comparator.compare(list.get(mid),object)) > 0) {      low=mid + 1;    } else     if (result == 0) {      return mid;    } else {      high=mid - 1;    }  }  return -mid - (result < 0 ? 1 : 2);}  }
class C{  public ParticleSystem(Activity a,int maxParticles,int drawableRedId,long timeToLive,int parentViewId){  this(a,maxParticles,a.getResources().getDrawable(drawableRedId),timeToLive,parentViewId);}  }
class C{  public OnDiskArrayPageFile(int pageSize,String fileName){  super(pageSize);  this.filename=new File(fileName);  existed=this.filename.exists();}  }
class C{  public Iterable<Object> loadAll(String yaml){  return loadAll(new StringReader(yaml));}  }
class C{  public static List<File> searchSpreadsheets(Context context,String accountName){  try {    GoogleAccountCredential googleAccountCredential=SendToGoogleUtils.getGoogleAccountCredential(context,accountName,SendToGoogleUtils.DRIVE_SCOPE);    if (googleAccountCredential == null) {      return null;    }    Drive drive=SyncUtils.getDriveService(googleAccountCredential);    com.google.api.services.drive.Drive.Files.List list=drive.files().list().setQ(String.format(Locale.US,SendSpreadsheetsAsyncTask.GET_SPREADSHEET_QUERY,SPREADSHEETS_NAME));    return list.execute().getItems();  } catch (  Exception e) {    Log.e(TAG,"Unable to search spreadsheets.",e);  }  return null;}  }
class C{  public boolean hasField(final int number){  if (number == 0) {    throw new IllegalArgumentException("Zero is not a valid field number.");  }  return number == lastFieldNumber || fields.containsKey(number);}  }
class C{  public void remove(String key) throws MqttPersistenceException {  checkIsOpen();  try {    FileConnection file=(FileConnection)Connector.open(clientDir.getURL() + key + MESSAGE_FILE_EXTENSION);    ;    if (file.exists()) {      file.delete();    }  } catch (  IOException ex) {    throw new MqttPersistenceException(ex);  }}  }
class C{  private Watcher initWatcher(SolrZkClient zkClient){  wrappedWatcher=new LeaderStateWatcher();  return zkClient.wrapWatcher(wrappedWatcher);}  }
class C{  public void testZeroOne(){  String numA="0";  String numB="1";  String res="1";  BigInteger aNumber=new BigInteger(numA);  BigInteger bNumber=new BigInteger(numB);  BigInteger result=aNumber.xor(bNumber);  assertTrue(res.equals(result.toString()));}  }
class C{  public AbUnSlideViewPager(Context context,AttributeSet attrs){  super(context,attrs);  this.enabled=false;}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRaster output;  int cols, rows;  int progress=0;  int col, row;  double value;  double gridResolution=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputFieldsString=args[0];  String outputHeader=args[1];  polyOrder=Integer.parseInt(args[2]);  if (polyOrder < 0) {    polyOrder=0;  }  if (polyOrder > 10) {    polyOrder=10;  }  if ((inputFieldsString.length() < 2) || (outputHeader.isEmpty())) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  gridResolution=Double.parseDouble((args[3]));  try {    String[] inputs=inputFieldsString.split(";");    String inputFile=inputs[0];    String fieldName=inputs[1];    ShapeFile shapefile=new ShapeFile(inputFile);    if (shapefile.getShapeType().getBaseType() != ShapeType.POINT) {      showFeedback("The input shapefile must be of a 'point' data type.");      return;    }    AttributeTable table=shapefile.getAttributeTable();    String[] fieldNames=table.getAttributeTableFieldNames();    int fieldNumber=0;    for (int a=0; a < fieldNames.length; a++) {      if (fieldNames[a].equals(fieldName)) {        fieldNumber=a;        break;      }    }    DBFField field=table.getField(fieldNumber);    if (field.getDataType() != DBFDataType.FLOAT && field.getDataType() != DBFDataType.NUMERIC) {      showFeedback("The selected attribute field must be of a numerical type.");      return;    }    double north=shapefile.getyMax();    double south=shapefile.getyMin();    double east=shapefile.getxMax();    double west=shapefile.getxMin();    rows=(int)(Math.abs(north - south) / gridResolution);    cols=(int)(Math.abs(east - west) / gridResolution);    double noData=-32768.0;    output=new WhiteboxRaster(outputHeader,north,south,east,west,rows,cols,WhiteboxRasterBase.DataScale.CONTINUOUS,WhiteboxRasterBase.DataType.FLOAT,0,noData);    ArrayList<Double> xList=new ArrayList<>();    ArrayList<Double> yList=new ArrayList<>();    ArrayList<Double> zList=new ArrayList<>();    double[][] geometry;    for (    ShapeFileRecord record : shapefile.records) {      geometry=getXYFromShapefileRecord(record);      Object[] attData=table.getRecord(record.getRecordNumber() - 1);      value=(double)attData[fieldNumber];      for (int i=0; i < geometry.length; i++) {        xList.add(geometry[i][0]);        yList.add(geometry[i][1]);        zList.add(value);      }    }    int numPoints=xList.size();    double[] x=new double[numPoints];    double[] y=new double[numPoints];    double[] z=new double[numPoints];    for (int a=0; a < numPoints; a++) {      x[a]=(double)xList.get(a);      y[a]=(double)yList.get(a);      z[a]=(double)zList.get(a);    }    String inputHeaderShort=shapefile.getShortName();    double rsquare=calculateEquation(x,y,z);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        value=getForwardCoordinates(output.getXCoordinateFromColumn(col),output.getYCoordinateFromRow(row));        output.setValue(row,col,value);      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(row * 100.0 / rows);      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);    StringBuilder sb=new StringBuilder();    sb.append("TREND SURFACE ANALYSIS OUTPUT\n\n");    sb.append("Input File:\t").append(inputHeaderShort).append("\n");    sb.append("Polynomial Order:\t").append(polyOrder).append("\n\n");    sb.append("Coefficent #\t").append("Value\n");    for (int a=0; a < regressCoefficents.length; a++) {      sb.append((a + 1)).append("\t").append(regressCoefficents[a]).append("\n");    }    sb.append("\nR-square:\t").append(rsquare);    returnData(sb.toString());  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected void handleException(JMSException je){  if (endTime == 0) {    endTime=System.currentTimeMillis();  }  Exception le=je.getLinkedException();  Throwable t=je.getCause();  if ((null == t) && (null != le) && (t != le)) {    je.initCause(le);  }  handleException((Exception)je);}  }
class C{  @Deprecated public void onFailure(Throwable error){}  }
class C{  private void zoomAt(int xPos,int yPos,float zoomValue){  double[] target=scene.getOGLPos(xPos,yPos);  scene.zoomAt(target[0],target[1],target[2],zoomValue);}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public void configure(double iMinEnergyReceived,double iMaxEnergyReceived,double iActivationEnergy,double iMaxStoredEnergy){  if (iMinEnergyReceived > maxEnergyReceived) {    maxEnergyReceived=iMinEnergyReceived;  } else {    maxEnergyReceived=iMaxEnergyReceived;  }  minEnergyReceived=iMinEnergyReceived;  maxEnergyStored=iMaxStoredEnergy;  activationEnergy=iActivationEnergy;}  }
class C{  public void unregisterVariable(String label){  if (label != null) {    variables.remove(label);  }}  }
class C{  public PriorityQueue(){  this(DEFAULT_CAPACITY);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("doGet from " + request.getRemoteHost() + " - "+ request.getRemoteAddr()+ " - forward to notes.jsp");  String url="/notes.jsp";  HttpSession session=request.getSession(false);  if (session == null || session.getAttribute(WebInfo.NAME) == null)   url="/login.jsp"; else {    session.removeAttribute(WebSessionCtx.HDR_MESSAGE);    WebInfo info=(WebInfo)session.getAttribute(WebInfo.NAME);    if (info != null)     info.setMessage("");    String msg=streamAttachment(request,response);    if (msg == null || msg.length() == 0)     return;    if (info != null)     info.setMessage(msg);  }  log.info("doGet - Forward to " + url);  RequestDispatcher dispatcher=getServletContext().getRequestDispatcher(url);  dispatcher.forward(request,response);}  }
class C{  public Object trunc(InstanceScope scope,Object v){  if (v == null)   return null;  if (v instanceof List) {    List<?> elems=(List<?>)v;    if (elems.size() <= 1)     return null;    return elems.subList(0,elems.size() - 1);  }  v=convertAnythingIteratableToIterator(scope,v);  if (v instanceof Iterator) {    List<Object> a=new ArrayList<Object>();    Iterator<?> it=(Iterator<?>)v;    while (it.hasNext()) {      Object o=it.next();      if (it.hasNext())       a.add(o);    }    return a;  }  return null;}  }
class C{  public static DoubleMatrix[] jblas_symmetricGeneralizedEigenvectors(double[][] A,double[][] B){  return org.jblas.Eigen.symmetricGeneralizedEigenvectors(new DoubleMatrix(A),new DoubleMatrix(B));}  }
class C{  public boolean isCountrySupported(String countryCode){  return getOrganizationToCountry(countryCode) != null;}  }
class C{  public Vec4 toHomogeneousPoint3(){  if (this.w == 1.0)   return this;  return new Vec4(this.x,this.y,this.z,1.0);}  }
class C{  public boolean isEmpty(){  return this.N == 0;}  }
class C{  public boolean isParentOf(Node node1,Node node2){  for (  Edge edge : getEdges(node1)) {    Node sub=Edges.traverseDirected(node1,(edge));    if (sub == node2) {      return true;    }  }  return false;}  }
class C{  @Override public boolean isPinned(){  return (endpointA.isPinned());}  }
class C{  private synchronized static boolean installShutdownSocketHandler(){  final int shutdownSocket=Config.parms.getInt("so");  if (shutdownSocket != 0 && socketThread == null) {    socketThread=new ShutdownSocketHandler(shutdownSocket);    socketThread.start();  }  return true;}  }
class C{  private void initScaleType(){  set("FIT_XY",ImageView.ScaleType.FIT_XY.name());  set("FIT_START",ImageView.ScaleType.FIT_START.name());  set("FIT_END",ImageView.ScaleType.FIT_END.name());  set("FIT_CENTER",ImageView.ScaleType.FIT_CENTER.name());  set("CENTER",ImageView.ScaleType.CENTER.name());  set("CENTER_CROP",ImageView.ScaleType.CENTER_CROP.name());  set("CENTER_INSIDE",ImageView.ScaleType.CENTER_INSIDE.name());  set("MATRIX",ImageView.ScaleType.MATRIX.name());}  }
class C{  public void shutdownSafely(){  log().info("Robot Shutting Down...");  Async.INSTANCE.finish();  shutdownCommon();  System.exit(0);}  }
class C{  public synchronized void addResult(DistributedMember distributedMember,Object resultOfSingleExecution){  this.resultList.add(resultOfSingleExecution);}  }
class C{  public boolean contains(float x,float y){  TextBlock text=mText;  if (text == null) {    return false;  }  RectF rect=new RectF(text.getBoundingBox());  rect.left=translateX(rect.left);  rect.top=translateY(rect.top);  rect.right=translateX(rect.right);  rect.bottom=translateY(rect.bottom);  return (rect.left < x && rect.right > x && rect.top < y && rect.bottom > y);}  }
class C{  @Override public void shutdown(){  super.shutdown();  disconnect();}  }
class C{  private boolean scrollViewCanScrollVertically(ScrollView scrollView,int direction){  final int offset=Math.max(0,scrollView.getScrollY());  final int range=computeVerticalScrollRange(scrollView) - scrollView.getHeight();  if (range == 0)   return false;  if (direction < 0) {    return offset > 0;  } else {    return offset < range - 1;  }}  }
class C{  private void showHideFormMessage(){  if (jmxAssignments.isEmpty()) {    formPage.getManagedForm().getMessageManager().addMessage(this,"No JMX bean assignment defined",null,IMessageProvider.INFORMATION);  } else {    formPage.getManagedForm().getMessageManager().removeMessage(this);  }}  }
class C{  @After public void tearDown() throws Exception {}  }
class C{  public static java.awt.event.MouseEvent toAwtMouseEvent(final org.eclipse.swt.events.MouseEvent event){  int button=java.awt.event.MouseEvent.NOBUTTON;switch (event.button) {case 1:    button=java.awt.event.MouseEvent.BUTTON1;  break;case 2:button=java.awt.event.MouseEvent.BUTTON2;break;case 3:button=java.awt.event.MouseEvent.BUTTON3;break;}int modifiers=0;if ((event.stateMask & SWT.CTRL) != 0) {modifiers|=InputEvent.CTRL_DOWN_MASK;}if ((event.stateMask & SWT.SHIFT) != 0) {modifiers|=InputEvent.SHIFT_DOWN_MASK;}if ((event.stateMask & SWT.ALT) != 0) {modifiers|=InputEvent.ALT_DOWN_MASK;}final java.awt.event.MouseEvent awtMouseEvent=new java.awt.event.MouseEvent(DUMMY_PANEL,event.hashCode(),event.time,modifiers,event.x,event.y,event.count,false,button);return awtMouseEvent;}  }
class C{  public Future<ReplDBMSHeader> watchForProcessedHeartbeat(String name,boolean terminate) throws InterruptedException {  Future<ReplDBMSHeader> watch=progressTracker.watchForProcessedHeartbeat(name,terminate);  notifyThreads();  return watch;}  }
class C{  public boolean equals(Object duration){  if (this == duration) {    return true;  }  if (duration instanceof ReadableDuration == false) {    return false;  }  ReadableDuration other=(ReadableDuration)duration;  return (getMillis() == other.getMillis());}  }
class C{  public static boolean isStrict(int mod){  return (mod & STRICT) != 0;}  }
class C{  @Override public V put(K key,V value){  V result=putImpl(key,value);  if (removeEldestEntry(head)) {    remove(head.key);  }  return result;}  }
class C{  public void filterMovies(Map<MovieSearchOptions,Object> filter){  Matcher<Movie> matcher=new MovieExtendedMatcher(filter);  fireChanged(matcher);  if (MovieModuleManager.MOVIE_SETTINGS.isStoreUiFilters()) {    MovieModuleManager.MOVIE_SETTINGS.setUiFilters(filter);    Globals.settings.saveSettings();  }}  }
class C{  protected void isCommentWellFormed(String data){  if (data == null || (data.length() == 0)) {    return;  }  char[] dataarray=data.toCharArray();  int datalength=dataarray.length;  if (fIsXMLVersion11) {    int i=0;    while (i < datalength) {      char c=dataarray[i++];      if (XML11Char.isXML11Invalid(c)) {        if (XMLChar.isHighSurrogate(c) && i < datalength) {          char c2=dataarray[i++];          if (XMLChar.isLowSurrogate(c2) && XMLChar.isSupplemental(XMLChar.supplemental(c,c2))) {            continue;          }        }        String msg=Utils.messages.createMessage(MsgKey.ER_WF_INVALID_CHARACTER_IN_COMMENT,new Object[]{new Character(c)});        if (fErrorHandler != null) {          fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER,null,null,null));        }      } else       if (c == '-' && i < datalength && dataarray[i] == '-') {        String msg=Utils.messages.createMessage(MsgKey.ER_WF_DASH_IN_COMMENT,null);        if (fErrorHandler != null) {          fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER,null,null,null));        }      }    }  } else {    int i=0;    while (i < datalength) {      char c=dataarray[i++];      if (XMLChar.isInvalid(c)) {        if (XMLChar.isHighSurrogate(c) && i < datalength) {          char c2=dataarray[i++];          if (XMLChar.isLowSurrogate(c2) && XMLChar.isSupplemental(XMLChar.supplemental(c,c2))) {            continue;          }        }        String msg=Utils.messages.createMessage(MsgKey.ER_WF_INVALID_CHARACTER_IN_COMMENT,new Object[]{new Character(c)});        if (fErrorHandler != null) {          fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER,null,null,null));        }      } else       if (c == '-' && i < datalength && dataarray[i] == '-') {        String msg=Utils.messages.createMessage(MsgKey.ER_WF_DASH_IN_COMMENT,null);        if (fErrorHandler != null) {          fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_FATAL_ERROR,msg,MsgKey.ER_WF_INVALID_CHARACTER,null,null,null));        }      }    }  }  return;}  }
class C{  public void putBytes(byte[] bytes){  ensureCapacity(bytes.length);  System.arraycopy(bytes,0,this.byteBuffer,this.position,bytes.length);  this.position+=bytes.length;}  }
class C{  public CheckConditionsOperation(Refactoring refactoring,int style){  Assert.isNotNull(refactoring);  fRefactoring=refactoring;  fStyle=style;  Assert.isTrue(checkStyle(fStyle));}  }
class C{  public static boolean isLessThanUnsigned(long n1,long n2){  return (n1 < n2) ^ ((n1 < 0) != (n2 < 0));}  }
class C{  public static <T>String toString(TreeDef<T> treeDef,T root){  return toString(treeDef,root,null);}  }
class C{  SortedSet<BasicInterval> headSetInclusive(BasicInterval upperBound){  BasicInterval newUpperBound=new BasicInterval(upperBound.getBegin() + 1,upperBound.getEnd());  return headSet(newUpperBound);}  }
class C{  private static <T>T run(PrivilegedAction<T> action){  return System.getSecurityManager() != null ? AccessController.doPrivileged(action) : action.run();}  }
class C{  public ObjectFactory(){}  }
class C{  public static List<String> pruneAndDeterministicallySort(Collection<String> raw){  ArrayList<String> names=new ArrayList<>(37);  for (  String f : raw) {    if (f.equals("_version_")) {      continue;    }    names.add(f);  }  Collections.sort(names);  Collections.shuffle(names,random());  return Collections.<String>unmodifiableList(names);}  }
class C{  private boolean allCellsIntersectQuery(Cell cell){  SpatialRelation relate=cell.getShape().relate(queryShape);  if (cell.getLevel() == detailLevel)   return relate.intersects();  if (relate == SpatialRelation.WITHIN)   return true;  if (relate == SpatialRelation.DISJOINT)   return false;  CellIterator subCells=cell.getNextLevelCells(null);  while (subCells.hasNext()) {    Cell subCell=subCells.next();    if (!allCellsIntersectQuery(subCell))     return false;  }  return true;}  }
class C{  public NotesToSync syncNotes(List<Note> localNotes,List<Note> remoteNotes){  Map<String,Note> localNoteIds=new HashMap<>();  Map<String,Note> remoteNoteIds=new HashMap<>();  List<Note> updatedOnServer=new ArrayList<>();  List<Note> noteUpdatesForServer=new ArrayList<>();  List<Note> newRemoteNotes=new ArrayList<>();  List<Note> localNotesToDelete=new ArrayList<>();  List<Note> localMovedNotes=new ArrayList<>();  for (  Note localNote : localNotes) {    localNoteIds.put(localNote.getId(),localNote);  }  for (  Note remoteNote : remoteNotes) {    remoteNoteIds.put(remoteNote.getId(),remoteNote);  }  for (  String key : localNoteIds.keySet()) {    Note localNote=localNoteIds.get(key);    if (remoteNoteIds.containsKey(key)) {      Note remoteNote=remoteNoteIds.get(key);      if (localNote.getSyncStatus() == DatabaseContract.NoteEntry.NOTE_STATUS.edited) {        if (localNote.getUpdatedAt().after(remoteNote.getUpdatedAt())) {          noteUpdatesForServer.add(localNote);          if (!localNote.getNotebookId().equals(remoteNote.getNotebookId())) {            localMovedNotes.add(localNote);          }        }      } else       if (localNote.getUpdatedAt().before(remoteNote.getUpdatedAt())) {        if (localNote.getSyncStatus() == DatabaseContract.NoteEntry.NOTE_STATUS.synced) {          updatedOnServer.add(remoteNote);        } else         if (localNote.getSyncStatus() == DatabaseContract.NoteEntry.NOTE_STATUS.edited) {          Log.d(LOG_TAG,"Sync conflict");          updatedOnServer.add(remoteNote);        }      }      remoteNoteIds.remove(key);    } else {      localNotesToDelete.add(localNote);    }  }  for (  String key : remoteNoteIds.keySet()) {    Note remoteNote=remoteNoteIds.get(key);    if (localNoteIds.containsKey(key)) {      Log.e(LOG_TAG,"Key should be already removed");    } else {      newRemoteNotes.add(remoteNote);    }  }  return new NotesToSync(noteUpdatesForServer,updatedOnServer,newRemoteNotes,localNotesToDelete,localMovedNotes);}  }
class C{  private void decryptBlock(int[] value){  int left=value[1];  int right=value[0];  right^=p[17];  left^=p[16] ^ F(right);  right^=p[15] ^ F(left);  left^=p[14] ^ F(right);  right^=p[13] ^ F(left);  left^=p[12] ^ F(right);  right^=p[11] ^ F(left);  left^=p[10] ^ F(right);  right^=p[9] ^ F(left);  left^=p[8] ^ F(right);  right^=p[7] ^ F(left);  left^=p[6] ^ F(right);  right^=p[5] ^ F(left);  left^=p[4] ^ F(right);  right^=p[3] ^ F(left);  left^=p[2] ^ F(right);  right^=p[1] ^ F(left);  left^=p[0];  value[0]=left;  value[1]=right;}  }
class C{  public void testToPlainStringNegNegExp(){  String a="-123809648392384754573567356745735.63567890295784902768787678287E-100";  BigDecimal aNumber=new BigDecimal(a);  String result="-0.000000000000000000000000000000000000000000000000000000000000000000012380964839238475457356735674573563567890295784902768787678287";  assertTrue("incorrect value",aNumber.toPlainString().equals(result));}  }
class C{  @RequestMapping(value={"/{id}/{cg}","/{id}/{cg}/"},method=RequestMethod.GET) @ResponseBody public RestWrapper listConfigGroup(@PathVariable("id") Integer processId,@PathVariable("cg") String configGroup,Principal principal){  RestWrapper restWrapper=null;  try {    Process parentProcess=processDAO.get(processId);    if (parentProcess.getProcess() != null)     processDAO.securityCheck(parentProcess.getProcess().getProcessId(),principal.getName(),"read"); else     processDAO.securityCheck(processId,principal.getName(),"read");    List<Properties> propertiesList=new ArrayList<Properties>();    List<com.wipro.ats.bdre.md.dao.jpa.Properties> jpaPropertiesList=new ArrayList<com.wipro.ats.bdre.md.dao.jpa.Properties>();    jpaPropertiesList=propertiesDAO.getPropertiesForConfig(processId,configGroup);    Integer counter=jpaPropertiesList.size();    for (    com.wipro.ats.bdre.md.dao.jpa.Properties properties : jpaPropertiesList) {      com.wipro.ats.bdre.md.beans.table.Properties returnProperties=new com.wipro.ats.bdre.md.beans.table.Properties();      returnProperties.setProcessId(properties.getProcess().getProcessId());      returnProperties.setConfigGroup(properties.getConfigGroup());      returnProperties.setKey(properties.getId().getPropKey());      returnProperties.setValue(properties.getPropValue());      returnProperties.setDescription(properties.getDescription());      returnProperties.setCounter(counter);      propertiesList.add(returnProperties);    }    restWrapper=new RestWrapper(propertiesList,RestWrapper.OK);    LOGGER.info("Record with ID:" + processId + "and config group"+ configGroup+ "selected from Properties by User:"+ principal.getName());  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }catch (  SecurityException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  protected List<Account> computeStaticAccounts(){  return new ArrayList<Account>();}  }
class C{  private static void singleSender(final Context context,ArrayList<MessageItem> messages,long threadId,final NotificationCompat.Builder builder,ConversationPrefsHelper conversationPrefs,final Integer privateNotifications){  MessageItem message=messages.get(0);  Intent threadIntent=new Intent(context,MainActivity.class);  threadIntent.putExtra(MessageListActivity.ARG_THREAD_ID,threadId);  PendingIntent threadPI=PendingIntent.getActivity(context,buildRequestCode(threadId,1),threadIntent,PendingIntent.FLAG_UPDATE_CURRENT);  Intent readIntent=new Intent(ACTION_MARK_READ);  readIntent.putExtra("thread_id",threadId);  PendingIntent readPI=PendingIntent.getBroadcast(context,buildRequestCode(threadId,2),readIntent,PendingIntent.FLAG_UPDATE_CURRENT);  Intent seenIntent=new Intent(ACTION_MARK_SEEN);  PendingIntent seenPI=PendingIntent.getBroadcast(context,buildRequestCode(threadId,4),seenIntent,PendingIntent.FLAG_UPDATE_CURRENT);  NotificationCompat.InboxStyle inboxStyle=new NotificationCompat.InboxStyle();  for (  MessageItem message1 : messages) {    inboxStyle.addLine(message1.mBody);  }  String notificationTitle=message.mContact;  if (!(privateNotifications == 0))   inboxStyle=null;  if (privateNotifications == 2)   notificationTitle="QKSMS";  int unreadMessageCount=SmsHelper.getUnreadMessageCount(context);  builder.setContentTitle(notificationTitle).setContentText(SmsHelper.getUnseenSMSCount(context,threadId) + " " + sRes.getString(R.string.new_messages)).setLargeIcon(getLargeIcon(context,Contact.get(message.mAddress,false),privateNotifications)).setContentIntent(threadPI).setNumber(unreadMessageCount).setStyle(inboxStyle).setColor(ThemeManager.getColor()).addAction(R.drawable.ic_accept,sRes.getString(R.string.read),readPI).extend(RemoteMessagingReceiver.getConversationExtender(context,message.mContact,message.mAddress,threadId)).setDeleteIntent(seenPI);  if (Build.VERSION.SDK_INT < 24) {    Intent replyIntent=new Intent(context,QKReplyActivity.class);    replyIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);    replyIntent.putExtra(QKReplyActivity.EXTRA_THREAD_ID,threadId);    replyIntent.putExtra(QKReplyActivity.EXTRA_SHOW_KEYBOARD,true);    PendingIntent replyPI=PendingIntent.getActivity(context,buildRequestCode(threadId,0),replyIntent,PendingIntent.FLAG_UPDATE_CURRENT);    builder.addAction(R.drawable.ic_reply,sRes.getString(R.string.reply),replyPI);  } else {    builder.addAction(RemoteMessagingReceiver.getReplyAction(context,message.mAddress,threadId));  }  if (conversationPrefs.getCallButtonEnabled()) {    Intent callIntent=new Intent(Intent.ACTION_CALL);    callIntent.setData(Uri.parse("tel:" + message.mAddress));    PendingIntent callPI=PendingIntent.getActivity(context,buildRequestCode(threadId,3),callIntent,PendingIntent.FLAG_UPDATE_CURRENT);    builder.addAction(R.drawable.ic_call,sRes.getString(R.string.call),callPI);  }  notify(context,(int)threadId,builder.build());}  }
class C{  public boolean intersects(S2CellId id){  int pos=Collections.binarySearch(cellIds,id);  if (pos < 0) {    pos=-pos - 1;  }  if (pos < cellIds.size() && cellIds.get(pos).rangeMin().lessOrEquals(id.rangeMax())) {    return true;  }  return pos != 0 && cellIds.get(pos - 1).rangeMax().greaterOrEquals(id.rangeMin());}  }
class C{  public void forEachDst(Allocation ain,Allocation aout){}  }
class C{  public FloatMatrix put(int[] rindices,int[] cindices,float v){  for (int i=0; i < rindices.length; i++) {    for (int j=0; j < cindices.length; j++) {      put(rindices[i],cindices[j],v);    }  }  return this;}  }
class C{  private void doClick(MenuSelectionManager msm,MouseEvent e){  if (!isInternalFrameSystemMenu()) {    @NonNls ActionMap map=menuItem.getActionMap();    if (map != null) {      Action audioAction=map.get(getPropertyPrefix() + ".commandSound");      if (audioAction != null) {        BasicLookAndFeel lf=(BasicLookAndFeel)UIManager.getLookAndFeel();        try {          Method playSoundMethod=BasicLookAndFeel.class.getDeclaredMethod(PLAY_SOUND_METHOD,new Class[]{Action.class});          playSoundMethod.setAccessible(true);          playSoundMethod.invoke(lf,new Object[]{audioAction});        } catch (        Exception ignored) {        }      }    }  }  if (msm == null) {    msm=MenuSelectionManager.defaultManager();  }  msm.clearSelectedPath();  ((ActionMenuItem)menuItem).fireActionPerformed(new ActionEvent(menuItem,ActionEvent.ACTION_PERFORMED,null,e.getWhen(),e.getModifiers()));}  }
class C{  public DoubleColumn(int nrows){  this(nrows,nrows,0);}  }
class C{  public static BufferedImage loadCompatibleImage(URL resource) throws IOException {  BufferedImage image=ImageIO.read(resource);  return toCompatibleImage(image);}  }
class C{  public final CharSequence yytext(){  return zzBuffer.subSequence(zzStartRead,zzMarkedPos);}  }
class C{  @Override public BaseComponent duplicate(){  return new TranslatableComponent(this);}  }
class C{  public static void assertU(String update){  assertU(null,update);}  }
class C{  public long executeInsert(){  acquireReference();  try {    return getSession().executeForLastInsertedRowId(getSql(),getBindArgs(),getConnectionFlags(),null);  } catch (  SQLiteDatabaseCorruptException ex) {    onCorruption();    throw ex;  } finally {    releaseReference();  }}  }
class C{  public void drawLine(int x0,int y0,int x1,int y1){  Line2D line=new Line2D.Float(x0,y0,x1,y1);  if (g.getClipBounds() == null || line.intersects(g.getClipBounds())) {    g.draw(line);  }}  }
class C{  public void toggleHorn(){  VSDSound snd=sound_list.get("HORN");  if (snd.isPlaying()) {    snd.stop();  } else {    snd.loop();  }}  }
class C{  private void maybeCacheBitmapDuringRender(int frameNumber,Bitmap bitmap){  boolean cacheBitmap=false;synchronized (this) {    boolean shouldCache=mBitmapsToKeepCached.get(frameNumber);    if (shouldCache) {      cacheBitmap=mCachedBitmaps.get(frameNumber) == null;    }  }  if (cacheBitmap) {    copyAndCacheBitmapDuringRendering(frameNumber,bitmap);  }}  }
class C{  public void test_agg12() throws MalformedQueryException {  final String query="PREFIX : <http://www.example.org/>\n" + "SELECT ?O1 (COUNT(?O2) AS ?C)\n" + "WHERE { ?S :p ?O1; :q ?O2 } GROUP BY (?O1 + ?O2)";  negativeTest(query);}  }
class C{  private static void init(Context context,String prefsName,int mode){  preferences=context.getSharedPreferences(prefsName,mode);}  }
class C{  public static void deleteType(final Connection connection,final BaseType baseType,final INaviModule module) throws CouldntDeleteException {  try {    final PreparedStatement statement=connection.prepareStatement("DELETE FROM " + CTableNames.BASE_TYPES_TABLE + " WHERE module_id = ? AND id = ?");    try {      statement.setInt(1,module.getConfiguration().getId());      statement.setInt(2,baseType.getId());      statement.executeUpdate();    }  finally {      statement.close();    }  } catch (  final SQLException exception) {    throw new CouldntDeleteException(exception);  }}  }
class C{  protected void doGetData(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  Properties properties=null;  try {    properties=buildProperties(request.getPathInfo(),KEY_DEVICE_ID,KEY_DEVICE_TYPE_ID,KEY_MESSAGE_TYPE_ID,KEY_LIMIT);  } catch (  IllegalArgumentException e) {    printError(response,e.getMessage());    return;  }  try {    String tableName=properties.getProperty(KEY_TABLE_NAME);    if (!isTableExists(tableName)) {      printError(response,"A table with the name [" + tableName + "] does not exist in the data base. Please, send some messages of type '"+ properties.getProperty(KEY_MESSAGE_TYPE_ID)+ "' first on behalf of the device.");      return;    }  } catch (  SQLException e) {    printError(response,e.getMessage());    return;  }  String tableData=null;  try {    tableData=selectTableData(properties);  } catch (  SQLException e) {    printError(response,e.getMessage());    return;  }  printJson(response,tableData);}  }
class C{  public void filterInputEvent(InputEvent event,int policyFlags) throws RemoteException {  if (DEBUG)   Slog.d(TAG,event.toString());  try {    if (event.getSource() != InputDevice.SOURCE_GESTURE_SENSOR || !(event instanceof MotionEvent)) {      try {        mHost.sendInputEvent(event,policyFlags);      } catch (      RemoteException e) {      }      return;    }    MotionEvent motionEvent=(MotionEvent)event;    mGestureDetector.onTouchEvent(motionEvent);  }  finally {    event.recycle();  }}  }
class C{  public synchronized void removeRoom(String room){  if (!Helper.validateStream(room)) {    return;  }  room=room.toLowerCase();  if (rooms.remove(room)) {    unsubRoom(room);    removeEmotes(room);    prevEmotesets.remove(room);  }}  }
class C{  public Vector4f mul(Matrix4x3fc mat){  return mul(mat,this);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:40.930 -0500",hash_original_method="BB88C0CE3A8E823447F9A5A2F73C21EF",hash_generated_method="DF9A814AAF225F544A6AC46306B744BC") private static String KD(String secret,String data){  return H(secret + ":" + data);}  }
class C{  public QoSRule(Pattern urlPattern){  this.urlPattern=urlPattern;  actions=new HashSet<>();}  }
class C{  public int size(){  return predictions.size();}  }
class C{  public void clear(){  this.getChildren().clear();}  }
class C{  void readLineString(LineString geometry,int xcols,int ycols,double xmin,double ymin,double xmax,double ymax){  CoordinateSequence cs=geometry.getCoordinateSequence();  Node oldNode=null;  for (int i=0; i < cs.size(); i++) {    double x=cs.getX(i), y=cs.getY(i);    int xint=(int)Math.floor(xcols * (x - xmin) / (xmax - xmin)), yint=(int)(ycols - Math.floor(ycols * (y - ymin) / (ymax - ymin)));    if (xint >= gridWidth) {      continue;    } else     if (yint >= gridHeight) {      continue;    }    Bag ns=nodes.getObjectsAtLocation(xint,yint);    Node n;    if (ns == null) {      n=new Node(new Location(xint,yint));      nodes.setObjectLocation(n,xint,yint);    } else {      n=(Node)ns.get(0);    }    if (oldNode == n) {      continue;    }    if (i == 0) {      oldNode=n;      continue;    }    int weight=(int)n.loc.distanceTo(oldNode.loc);    Edge e=new Edge(oldNode,n,weight);    roadNetwork.addEdge(e);    oldNode.links.add(e);    n.links.add(e);    oldNode=n;  }}  }
class C{  public String toSparseString(int format,int fractionDigits,boolean quoteNominal){  StringBuffer str=new StringBuffer();  Attribute labelAttribute=getAttributes().getSpecial(Attributes.LABEL_NAME);  if ((format == SparseFormatDataRowReader.FORMAT_YX) && (labelAttribute != null)) {    str.append(getValueAsString(labelAttribute,fractionDigits,quoteNominal) + " ");  }  Attribute idAttribute=getAttributes().getSpecial(Attributes.ID_NAME);  if (idAttribute != null) {    str.append("id:" + getValueAsString(idAttribute,fractionDigits,quoteNominal) + " ");  }  Attribute weightAttribute=getAttributes().getSpecial(Attributes.WEIGHT_NAME);  if (weightAttribute != null) {    str.append("w:" + getValueAsString(weightAttribute,fractionDigits,quoteNominal) + " ");  }  Attribute batchAttribute=getAttributes().getSpecial(Attributes.BATCH_NAME);  if (batchAttribute != null) {    str.append("b:" + getValueAsString(batchAttribute,fractionDigits,quoteNominal) + " ");  }  str.append(getAttributesAsSparseString(SEPARATOR,SPARSE_SEPARATOR,fractionDigits,quoteNominal) + " ");  if ((format == SparseFormatDataRowReader.FORMAT_PREFIX) && (labelAttribute != null)) {    str.append("l:" + getValueAsString(labelAttribute,fractionDigits,quoteNominal));  }  if ((format == SparseFormatDataRowReader.FORMAT_XY) && (labelAttribute != null)) {    str.append(getValueAsString(labelAttribute,fractionDigits,quoteNominal));  }  return str.toString();}  }
class C{  public Image scaledSmallerRatio(int width,int height){  float hRatio=((float)height) / ((float)getHeight());  float wRatio=((float)width) / ((float)getWidth());  if (hRatio < wRatio) {    return scaled((int)(getWidth() * hRatio),height);  } else {    return scaled(width,(int)(getHeight() * wRatio));  }}  }
class C{  public static ClassificationDataSet loadC(InputStreamReader isr,double sparseRatio) throws IOException {  return loadC(isr,sparseRatio,-1);}  }
class C{  @Override public boolean storesUpperCaseQuotedIdentifiers() throws SQLException {  debugCodeCall("storesUpperCaseQuotedIdentifiers");  String m=conn.getMode();  if (m.equals("MySQL")) {    return true;  }  return false;}  }
class C{  public Quaternionf rotationYXZ(float angleY,float angleX,float angleZ){  float sx=(float)Math.sin(angleX * 0.5);  float cx=(float)Math.cos(angleX * 0.5);  float sy=(float)Math.sin(angleY * 0.5);  float cy=(float)Math.cos(angleY * 0.5);  float sz=(float)Math.sin(angleZ * 0.5);  float cz=(float)Math.cos(angleZ * 0.5);  float x=cy * sx;  float y=sy * cx;  float z=sy * sx;  float w=cy * cx;  this.x=x * cz + y * sz;  this.y=y * cz - x * sz;  this.z=w * sz - z * cz;  this.w=w * cz + z * sz;  return this;}  }
class C{  public EncryptionKey(DerValue encoding) throws Asn1Exception, IOException {  DerValue der;  if (encoding.getTag() != DerValue.tag_Sequence) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }  der=encoding.getData().getDerValue();  if ((der.getTag() & (byte)0x1F) == (byte)0x00) {    keyType=der.getData().getBigInteger().intValue();  } else   throw new Asn1Exception(Krb5.ASN1_BAD_ID);  der=encoding.getData().getDerValue();  if ((der.getTag() & (byte)0x1F) == (byte)0x01) {    keyValue=der.getData().getOctetString();  } else   throw new Asn1Exception(Krb5.ASN1_BAD_ID);  if (der.getData().available() > 0) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  }}  }
class C{  public NexusBlock findNextBlock() throws IOException {  findToken("BEGIN",true);  String blockName=readToken(";");  return findBlockName(blockName);}  }
class C{  public org.codehaus.cargo.container.packager.Packager createPackager(org.codehaus.cargo.container.Container container) throws MojoExecutionException {  org.codehaus.cargo.container.packager.Packager packager;  PackagerFactory factory=new DefaultPackagerFactory();  PackagerType type=PackagerType.toType(getType());  if (getImplementation() != null) {    try {      Class packagerClass=Class.forName(getImplementation(),true,this.getClass().getClassLoader());      factory.registerPackager(container.getId(),type,packagerClass);    } catch (    ClassNotFoundException cnfe) {      throw new MojoExecutionException("Custom packager implementation [" + getImplementation() + "] cannot be loaded",cnfe);    }  }  packager=factory.createPackager(container.getId(),type,getOutputLocation());  return packager;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:23.805 -0400",hash_original_method="D95F95F909AD55031AB32141DC830DFD",hash_generated_method="1CF55DCF2B73BDEC8755EB8FB09464AB") private void onRequestOobData(String objectPath,int nativeData){  String address=checkPairingRequestAndGetAddress(objectPath,nativeData);  if (address == null)   return;  Intent intent=new Intent(BluetoothDevice.ACTION_PAIRING_REQUEST);  intent.putExtra(BluetoothDevice.EXTRA_DEVICE,mAdapter.getRemoteDevice(address));  intent.putExtra(BluetoothDevice.EXTRA_PAIRING_VARIANT,BluetoothDevice.PAIRING_VARIANT_OOB_CONSENT);  mContext.sendBroadcast(intent,BLUETOOTH_ADMIN_PERM);}  }
class C{  public void shouldMatch(String pattern){  Matcher stdoutMatcher=Pattern.compile(pattern,Pattern.MULTILINE).matcher(stdout);  Matcher stderrMatcher=Pattern.compile(pattern,Pattern.MULTILINE).matcher(stderr);  if (!stdoutMatcher.find() && !stderrMatcher.find()) {    reportDiagnosticSummary();    throw new RuntimeException("'" + pattern + "' missing from stdout/stderr \n");  }}  }
class C{  OutputStream createOutputResultStream(File reportFile) throws IOException {  logResult("Created xml report file at file://%s",reportFile.getAbsolutePath());  return new FileOutputStream(reportFile);}  }
class C{  public LinkedList<Patch> patch_make(String text1,String text2,LinkedList<Diff> diffs){  return patch_make(text1,diffs);}  }
class C{  public String toString(){  return this.subDescriptorBO.toString();}  }
class C{  protected JPanel makeDndIconPanel(){  _dndPanel=new JPanel();  String fileName="resources/icons/throttles/RoundRedCircle20.png";  NamedIcon icon=new NamedIcon(fileName,fileName);  JPanel panel=new JPanel();  panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black),Bundle.getMessage("BeanNamePortal")));  try {    JLabel label=new IconDragJLabel(new DataFlavor(Editor.POSITIONABLE_FLAVOR));    label.setIcon(icon);    label.setName(Bundle.getMessage("BeanNamePortal"));    panel.add(label);  } catch (  java.lang.ClassNotFoundException cnfe) {    cnfe.printStackTrace();  }  _dndPanel.add(panel);  return _dndPanel;}  }
class C{  public void isAbbreviated(boolean b){  mAbbreviated=b;  invalidate();  requestLayout();}  }
class C{  public Period minusMonths(int months){  return plusMonths(-months);}  }
class C{  public EncoderTestSuiteBuilder mark(){  if (_markedSuite == null) {    _markedSuite=new TestSuite();  }  _markedSuite.addTest(_suite.testAt(_suite.testCount() - 1));  return this;}  }
class C{  @Override public void initialize(){  DryRunTool dryRun=new DryRunTool(graphModel,edgeMatcher);  dryRun.layoutTree();  HierarchicalLayoutTool layoutTool=new RadialLayoutTool(graphModel,edgeMatcher,dryRun.getLeafCount());  Collection<GraphNode> layoutNodes=graphModel.getNodes();  positions=Maps.newHashMapWithExpectedSize(layoutNodes.size());  layoutTool.layoutTree();  Point2dUtils.translatePos(region,layoutNodes,positions);}  }
class C{  @Override public void close() throws java.io.IOException {  flushBase64();  super.close();  buffer=null;  out=null;}  }
class C{  public PropertyInspector(Properties properties,int index,Frame parent,GUIState simulation){  this.properties=properties;  this.index=index;  this.simulation=simulation;}  }
class C{  @SuppressWarnings("rawtypes") @Test(expected=IllegalArgumentException.class) public void testNotEmptyCollectionString(){  Validator.notEmpty(new ArrayList(),error);}  }
class C{  private boolean validateUpdateBufferStrategy(boolean update){  boolean valid=true;  IStrategyConfig bufferStrategy=(IStrategyConfig)bufferCombo.getData(bufferCombo.getItem(bufferCombo.getSelectionIndex()));  if (bufferStrategy instanceof SizeBufferStrategyConfig) {    try {      int size=Integer.parseInt(bufferValue.getText());      if (size <= 0) {        showSizeBufferStrategyValidationMessage();        valid=false;      } else {        if (update) {          ((SizeBufferStrategyConfig)bufferStrategy).setSize(size);        }      }    } catch (    NumberFormatException exception) {      showSizeBufferStrategyValidationMessage();      valid=false;    }  }  if (update) {    environment.setBufferStrategyConfig(bufferStrategy);  }  return valid;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:12.681 -0500",hash_original_method="13B1FF58505B03B773361DF63AF568E6",hash_generated_method="9F267A49ADDC5290BF7F6DFE87C65E78") public POP3MessageInfo(){  number=size=0;  identifier=null;}  }
class C{  public static ColorOwn forStringOrNull(String colorString,Transparency transparency){  try {    return forString(colorString,transparency);  } catch (  StyleException e) {    return null;  }}  }
class C{  @Override public void reset(){  min_=Constants.DBL_MAX;  max_=Constants.DBL_MIN;  sampleNumber_=0;  downsideSampleNumber_=0;  sampleWeight_=0.0;  downsideSampleWeight_=0.0;  sum_=0.0;  quadraticSum_=0.0;  downsideQuadraticSum_=0.0;  cubicSum_=0.0;  fourthPowerSum_=0.0;}  }
class C{  synchronized public SampleIterator iterator(){  return new SampleIterator();}  }
class C{  public CSVParser(char separator){  this(separator,DEFAULT_QUOTE_CHARACTER,DEFAULT_ESCAPE_CHARACTER);}  }
class C{  public static String chomp(String str){  return chomp(str,"\n");}  }
class C{  public int whichPath(DataPoint data){  int paths=getNumberOfPaths();  if (paths < 0)   return paths; else   if (paths == 1)   return 0; else   if (splittingAttribute < catAttributes.length)   return data.getCategoricalValue(splittingAttribute);  int numerAttribute=splittingAttribute - catAttributes.length;  double val=data.getNumericalValues().get(numerAttribute);  if (Double.isNaN(val))   return -1;  if (results != null) {    int pos=Collections.binarySearch(boundries,val);    pos=pos < 0 ? -pos - 1 : pos;    return owners.get(pos);  } else {    if (regressionResults.length == 1)     return 0; else     if (val <= regressionResults[2])     return 0; else     return 1;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 11:05:18.437 -0500",hash_original_method="F7A45991E1ECACD98052095A0CF35DFD",hash_generated_method="B9708DDEA54191B576AFA9E10646C1E7") @DSVerified @DSBan(DSCat.PRIVATE_METHOD) private void updateHeartbeat(){  final long now=SystemClock.elapsedRealtime();  if (now < mLastHeartbeatSendTime + HEARTBEAT_SEND_INTERVAL_IN_MS)   return;  try {    mLastHeartbeatSendTime=now;    if (mSyncContext != null) {      mSyncContext.sendHeartbeat();    }  } catch (  RemoteException e) {  }}  }
class C{  private int divaddLong(int dh,int dl,int[] result,int offset){  long carry=0;  long sum=(dl & LONG_MASK) + (result[1 + offset] & LONG_MASK);  result[1 + offset]=(int)sum;  sum=(dh & LONG_MASK) + (result[offset] & LONG_MASK) + carry;  result[offset]=(int)sum;  carry=sum >>> 32;  return (int)carry;}  }
class C{  @CanIgnoreReturnValue public Stopwatch start(){  checkState(!isRunning,"This stopwatch is already running.");  isRunning=true;  startTick=ticker.read();  return this;}  }
class C{  private void draw(final ExecutionUnit process,final Graphics2D g2,final ProcessRendererModel rendererModel,final boolean printing){  if (!visualizer.isActive()) {    return;  }  WorkflowAnnotations annotations=rendererModel.getProcessAnnotations(process);  if (annotations != null) {    for (    WorkflowAnnotation anno : annotations.getAnnotationsDrawOrder()) {      if (anno.equals(model.getSelected())) {        continue;      }      Graphics2D g2P=(Graphics2D)g2.create();      drawer.drawAnnotation(anno,g2P,printing);      g2P.dispose();    }  }}  }
class C{  public static void i(String tag,String msg){  if (sLevel > LEVEL_INFO) {    return;  }  Log.i(tag,msg);}  }
class C{  static void uninitialize(){  AppContext ctx=AppContext.getAppContext();  PropertyChangeListener pcl=(PropertyChangeListener)ctx.get("SeaGlassStyle.defaults.pcl");  if (pcl != null) {    UIManager.getDefaults().removePropertyChangeListener(pcl);    UIManager.getLookAndFeelDefaults().removePropertyChangeListener(pcl);  }  ctx.put("SeaGlassStyle.defaults",null);}  }
class C{  public static boolean withinMethod(Declaration decl){  return container(decl) instanceof Function;}  }
class C{  private void handleAutoOpenAfterDownload(DownloadInfo info,long downloadId){  if (OMADownloadHandler.OMA_DOWNLOAD_DESCRIPTOR_MIME.equalsIgnoreCase(info.getMimeType())) {    mOMADownloadHandler.handleOMADownload(info,downloadId);    return;  }  DownloadManager manager=(DownloadManager)mContext.getSystemService(Context.DOWNLOAD_SERVICE);  Uri uri=manager.getUriForDownloadedFile(downloadId);  Intent launchIntent=new Intent(Intent.ACTION_VIEW);  launchIntent.setDataAndType(uri,manager.getMimeTypeForDownloadedFile(downloadId));  launchIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_GRANT_READ_URI_PERMISSION);  openIntent(mContext,launchIntent,true);}  }
class C{  public CertificateList toASN1Structure(){  return x509CRL;}  }
class C{  public void testHostAddressesAreEqual() throws Exception {  String myHostName=InetAddress.getLocalHost().getHostName();  String google="www.google.com";  assertTrue("Same host is equal",HostAddressService.addressesAreEqual(myHostName,myHostName));  assertFalse("My host compared to google.com is not equal",HostAddressService.addressesAreEqual(google,myHostName));}  }
class C{  public static void editComment(final SQLProvider provider,final Integer commentId,final Integer userId,final String newComment) throws CouldntSaveDataException {  Preconditions.checkNotNull(provider,"IE00436: provider argument can not be null");  Preconditions.checkNotNull(commentId,"IE00437: commentId argument can not be null");  Preconditions.checkNotNull(userId,"IE00438: userId argument can not be null");  Preconditions.checkNotNull(newComment,"IE00439: newComment argument can not be null");  final String function="{ call edit_comment(?, ?, ?) }";  try (CallableStatement editCommentFunction=provider.getConnection().getConnection().prepareCall(function)){    editCommentFunction.setInt(1,commentId);    editCommentFunction.setInt(2,userId);    editCommentFunction.setString(3,newComment);    editCommentFunction.execute();  } catch (  final SQLException exception) {    throw new CouldntSaveDataException(exception);  }}  }
class C{  private void traceAction(Bundle data){  if (traceCallback != null) {    String severity=data.getString(MqttServiceConstants.CALLBACK_TRACE_SEVERITY);    String message=data.getString(MqttServiceConstants.CALLBACK_ERROR_MESSAGE);    String tag=data.getString(MqttServiceConstants.CALLBACK_TRACE_TAG);    if (MqttServiceConstants.TRACE_DEBUG.equals(severity))     traceCallback.traceDebug(tag,message); else     if (MqttServiceConstants.TRACE_ERROR.equals(severity))     traceCallback.traceError(tag,message); else {      Exception e=(Exception)data.getSerializable(MqttServiceConstants.CALLBACK_EXCEPTION);      traceCallback.traceException(tag,message,e);    }  }}  }
class C{  public boolean complete(){  return getPrincipalId() != null;}  }
class C{  public void addTransition(int source,int dest,int label){  addTransition(source,dest,label,label);}  }
class C{  public String create() throws SaaSApplicationException {  if (newTechnicalService != null) {    newTechnicalService.setBillingIdentifier(getDefaultBillingIdentifier());    VOTechnicalService created=getProvisioningService().createTechnicalService(newTechnicalService.getVo());    sessionBean.setSelectedTechnicalServiceKey(created.getKey());    addMessage(null,FacesMessage.SEVERITY_INFO,INFO_TECH_SERVICE_CREATED,new Object[]{newTechnicalService.getTechnicalServiceId()});    newTechnicalService=null;    technicalServices=null;    menuBean.setCurrentPageLink(MenuBean.LINK_TECHSERVICE_EDIT);  }  return OUTCOME_SUCCESS;}  }
class C{  protected ECPoint multiplyPositive(ECPoint p,BigInteger k){  int width=Math.max(2,Math.min(16,getWindowSize(k.bitLength())));  WNafPreCompInfo wnafPreCompInfo=WNafUtil.precompute(p,width,true);  ECPoint[] preComp=wnafPreCompInfo.getPreComp();  ECPoint[] preCompNeg=wnafPreCompInfo.getPreCompNeg();  int[] wnaf=WNafUtil.generateCompactWindowNaf(width,k);  ECPoint R=p.getCurve().getInfinity();  int i=wnaf.length;  if (i > 1) {    int wi=wnaf[--i];    int digit=wi >> 16, zeroes=wi & 0xFFFF;    int n=Math.abs(digit);    ECPoint[] table=digit < 0 ? preCompNeg : preComp;    if ((n << 2) < (1 << width)) {      int highest=LongArray.bitLengths[n];      int scale=width - highest;      int lowBits=n ^ (1 << (highest - 1));      int i1=((1 << (width - 1)) - 1);      int i2=(lowBits << scale) + 1;      R=table[i1 >>> 1].add(table[i2 >>> 1]);      zeroes-=scale;    } else {      R=table[n >>> 1];    }    R=R.timesPow2(zeroes);  }  while (i > 0) {    int wi=wnaf[--i];    int digit=wi >> 16, zeroes=wi & 0xFFFF;    int n=Math.abs(digit);    ECPoint[] table=digit < 0 ? preCompNeg : preComp;    ECPoint r=table[n >>> 1];    R=R.twicePlus(r);    R=R.timesPow2(zeroes);  }  return R;}  }
class C{  public static double colorDistance(double r1,double g1,double b1,double r2,double g2,double b2){  double a=(r2 - r1) + 0.1;  double b=(g2 - g1) + 0.1;  double c=(b2 - b1) + 0.1;  return Math.sqrt(a * a + b * b + c * c);}  }
class C{  public static Motion createEaseInMotion(int sourceValue,int destinationValue,int duration){  return createCubicBezierMotion(sourceValue,destinationValue,duration,0f,0.42f,1f,1f);}  }
class C{  private Instruction do_astore(int index){  Operand op1=pop();  if (op1 instanceof ReturnAddressOperand) {    setLocal(index,op1);    return null;  }  boolean doConstantProp=false;  if ((op1 instanceof NullConstantOperand) || (op1 instanceof AddressConstantOperand)) {    doConstantProp=true;  }  TypeReference type=op1.getType();  if (LOCALS_ON_STACK) {    replaceLocalsOnStack(index,type);  }  if (ELIM_COPY_LOCALS) {    if (op1 instanceof RegisterOperand) {      RegisterOperand rop1=(RegisterOperand)op1;      Register r1=rop1.getRegister();      if (lastInstr != null && ResultCarrier.conforms(lastInstr) && ResultCarrier.hasResult(lastInstr) && !r1.isLocal() && r1 == ResultCarrier.getResult(lastInstr).getRegister()) {        if (DBG_ELIMCOPY) {          db("eliminated copy " + op1 + " to "+ index);        }        RegisterOperand newop0=gc.makeLocal(index,rop1);        ResultCarrier.setResult(lastInstr,newop0);        setLocal(index,newop0);        gc.getTemps().release(rop1);        return null;      }    }  }  RegisterOperand op0;  if (op1 instanceof RegisterOperand) {    RegisterOperand rop1=(RegisterOperand)op1;    op0=gc.makeLocal(index,rop1);    if (hasGuard(rop1)) {      RegisterOperand g0=gc.makeNullCheckGuard(op0.getRegister());      appendInstruction(Move.create(GUARD_MOVE,g0.copyRO(),copyGuardFromOperand(rop1)));      setGuardForRegOp(op0,g0);    }  } else {    op0=gc.makeLocal(index,type);  }  if (CP_IN_LOCALS) {    setLocal(index,doConstantProp ? op1 : op0);  } else {    setLocal(index,op0);  }  Instruction s=Move.create(REF_MOVE,op0,op1);  setSourcePosition(s);  return s;}  }
class C{  public Builder withTerm(long term){  request.term=Assert.arg(term,term > 0,"term must be positive");  return this;}  }
class C{  public Configurator(Provider<TunnelRequestService> tunnelRequestServiceProvider){  this.tunnelRequestServiceProvider=tunnelRequestServiceProvider;}  }
class C{  public void addListener(ILabelProviderListener listener){}  }
class C{  public String addPostVolumeExpandSteps(Workflow workflow,String waitFor,List<VolumeDescriptor> volumeDescriptors,String taskId) throws WorkflowException {  List<VolumeDescriptor> volumeDescriptorsTypeFilter=VolumeDescriptor.filterByType(volumeDescriptors,new VolumeDescriptor.Type[]{VolumeDescriptor.Type.RP_SOURCE,VolumeDescriptor.Type.RP_EXISTING_SOURCE,VolumeDescriptor.Type.RP_VPLEX_VIRT_SOURCE},new VolumeDescriptor.Type[]{});  if (volumeDescriptorsTypeFilter.isEmpty()) {    return waitFor;  }  for (  VolumeDescriptor descriptor : volumeDescriptorsTypeFilter) {    Volume volume=_dbClient.queryObject(Volume.class,descriptor.getVolumeURI());    ProtectionSystem rpSystem=_dbClient.queryObject(ProtectionSystem.class,volume.getProtectionController());    Map<String,RecreateReplicationSetRequestParams> rsetParams=new HashMap<String,RecreateReplicationSetRequestParams>();    RecreateReplicationSetRequestParams rsetParam=getReplicationSettings(rpSystem,volume.getId());    rsetParams.put(RPHelper.getRPWWn(volume.getId(),_dbClient),rsetParam);    String stepId=workflow.createStepId();    Workflow.Method recreateRSetExecuteMethod=new Workflow.Method(METHOD_RECREATE_RSET_STEP,rpSystem.getId(),Arrays.asList(volume.getId()),rsetParams);    workflow.createStep(STEP_POST_VOLUME_EXPAND,"Post volume Expand, Recreate replication set subtask for RP: " + volume.toString(),waitFor,rpSystem.getId(),rpSystem.getSystemType(),this.getClass(),recreateRSetExecuteMethod,null,stepId);    _log.info("Recreate Replication Set in workflow");  }  return STEP_POST_VOLUME_EXPAND;}  }
class C{  public FragmentManager(SequenceDiagram diagram){  this.diagram=diagram;  openFragments=new LinkedList<Fragment>();  closingFragments=new LinkedList<Fragment>();  fragmentLabels=new LinkedList<String>();}  }
class C{  protected void initLST(){  logger.fine("initializing Library Selection Table (LST)");  try {    if (lst == null) {      if (dataPaths == null) {        logger.info("VPFLayer|" + getName() + ": path not set");      } else {        logger.fine("VPFLayer.initLST(dataPaths)");        lst=new LibrarySelectionTable(dataPaths);        lst.setCutoffScale(cutoffScale);      }    }  } catch (  com.bbn.openmap.io.FormatException f) {    throw new java.lang.IllegalArgumentException(f.getMessage());  }}  }
class C{  private Utils(){  throw new AssertionError();}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public boolean isUseLogitScaleParameterFromMATSim(){  return useLogitScaleParameterFromMATSim;}  }
class C{  @Deprecated private boolean detach(){  assert isOpenGLAttached() : "FATAL: Director: Can't detach the OpenGL View, because it is not attached. Attach it first.";  ViewGroup vg=(ViewGroup)openGLView_.getParent();  vg.removeView(vg);  assert (!isOpenGLAttached()) : "FATAL: Director: Can't detach the OpenGL View, it is still attached to the superview.";  return true;}  }
class C{  public static void cleanStaleExportMasks(DbClient dbClient,URI vplexUri){  log.info("starting clean up of stale export masks for vplex {}",vplexUri);  List<ExportMask> exportMasks=ExportMaskUtils.getExportMasksForStorageSystem(dbClient,vplexUri);  VPlexApiClient client=null;  try {    client=VPlexControllerUtils.getVPlexAPIClient(VPlexApiFactory.getInstance(),vplexUri,dbClient);  } catch (  URISyntaxException ex) {    log.error("URISyntaxException encountered: ",ex);  }  if (null == client) {    log.error("Couldn't load vplex api client, skipping stale export mask cleanup.");    return;  }  List<VPlexStorageViewInfo> storageViewsOnDevice=client.getStorageViewsLite();  Set<String> svNativeIds=new HashSet<String>();  Set<String> svNames=new HashSet<String>();  for (  VPlexStorageViewInfo sv : storageViewsOnDevice) {    svNativeIds.add(sv.getPath());    svNames.add(sv.getName());  }  Set<ExportMask> staleExportMasks=new HashSet<ExportMask>();  Map<ExportGroup,Set<ExportMask>> exportGroupToStaleMaskMap=new HashMap<ExportGroup,Set<ExportMask>>();  Map<URI,ExportGroup> exportGroupUriMap=new HashMap<URI,ExportGroup>();  for (  ExportMask exportMask : exportMasks) {    if (null != exportMask && !exportMask.getInactive() && (exportMask.getNativeId() != null && !exportMask.getNativeId().isEmpty())) {      boolean noNativeIdMatch=(null != exportMask.getNativeId()) && !svNativeIds.contains(exportMask.getNativeId());      boolean noMaskNameMatch=(null != exportMask.getMaskName()) && !svNames.contains(exportMask.getMaskName());      if (noNativeIdMatch || noMaskNameMatch) {        log.info("ExportMask {} is not found on VPLEX",exportMask.getMaskName());        boolean hasActiveVolumes=false;        if (exportMask.hasAnyUserAddedVolumes()) {          List<URI> userAddedVolUris=URIUtil.toURIList(exportMask.getUserAddedVolumes().values());          List<Volume> userAddedVols=dbClient.queryObject(Volume.class,userAddedVolUris);          for (          Volume vol : userAddedVols) {            if (null != vol && !vol.getInactive()) {              hasActiveVolumes=true;              break;            }          }        }        if (hasActiveVolumes) {          log.warn("ExportMask {} has active user added volumes, so will not remove from database.",exportMask.forDisplay());          continue;        }        staleExportMasks.add(exportMask);        List<ExportGroup> egList=ExportUtils.getExportGroupsForMask(exportMask.getId(),dbClient);        if (!CollectionUtils.isEmpty(egList)) {          for (          ExportGroup exportGroup : egList) {            if (null == exportGroup || exportGroup.getInactive()) {              continue;            }            if (!exportGroupUriMap.containsKey(exportGroup.getId())) {              exportGroupUriMap.put(exportGroup.getId(),exportGroup);            } else {              exportGroup=exportGroupUriMap.get(exportGroup.getId());            }            if (!exportGroupToStaleMaskMap.containsKey(exportGroup)) {              exportGroupToStaleMaskMap.put(exportGroup,new HashSet<ExportMask>());            }            exportGroupToStaleMaskMap.get(exportGroup).add(exportMask);            log.info("Stale ExportMask {} will be removed from ExportGroup {}",exportMask.getMaskName(),exportGroup.getLabel());          }        }      }    }  }  if (!CollectionUtils.isEmpty(staleExportMasks)) {    dbClient.markForDeletion(staleExportMasks);    log.info("Deleted {} stale ExportMasks from database.",staleExportMasks.size());    if (!CollectionUtils.isEmpty(exportGroupToStaleMaskMap.keySet())) {      for (      Entry<ExportGroup,Set<ExportMask>> entry : exportGroupToStaleMaskMap.entrySet()) {        ExportGroup exportGroup=entry.getKey();        for (        ExportMask exportMask : entry.getValue()) {          log.info("Removing ExportMask {} from ExportGroup {}",exportMask.getMaskName(),exportGroup.getLabel());          exportGroup.removeExportMask(exportMask.getId());        }      }      dbClient.updateObject(exportGroupToStaleMaskMap.keySet());    }  }  log.info("Stale Export Mask cleanup complete.");}  }
class C{  public static void addFlag(Vector options,String text,char flag){  addFlag(options,text,"" + flag);}  }
class C{  @Override public boolean supportsUnionAll(){  debugCodeCall("supportsUnionAll");  return true;}  }
class C{  public StackBlurFilter(int radius,int iterations){  if (radius < 1) {    radius=1;  }  if (iterations < 1) {    iterations=1;  }  this.radius=radius;  this.iterations=iterations;}  }
class C{  public static int successor(final int n) throws NoSuccessorException {  if (Integer.MAX_VALUE == n) {    throw new NoSuccessorException();  } else {    return n + 1;  }}  }
class C{  @Override public void perform(IR _ir){  ir=_ir;  if (ir.options.PROFILE_FREQUENCY_STRATEGY == OptOptions.PROFILE_DUMB_FREQ) {    setDumbFrequencies(ir);    return;  }  ir.cfg.resetTopSorted();  ir.cfg.buildTopSort();  topOrder=new BasicBlock[ir.cfg.numberOfNodes()];  int idx=0;  for (BasicBlock ptr=ir.cfg.entry(); ptr != null; ptr=(BasicBlock)ptr.getForwardSortedNext()) {    topOrder[idx++]=ptr;    ptr.setExecutionFrequency(0f);    ptr.clearScratchFlag();  }  lst=ir.HIRInfo.loopStructureTree;  if (lst != null) {    computeLoopMultipliers(lst.getRoot());    for (Enumeration<BasicBlock> e=ir.getBasicBlocks(); e.hasMoreElements(); ) {      BasicBlock bb=e.nextElement();      bb.setExecutionFrequency(0f);      bb.clearScratchFlag();    }  }  computeBlockFrequencies();  computeInfrequentBlocks(ir);}  }
class C{  public static String listCapabilities(Capabilities c){  String result;  Iterator<Capability> iter;  result="";  iter=c.capabilities();  while (iter.hasNext()) {    if (result.length() != 0) {      result+=", ";    }    result+=iter.next().toString();  }  return result;}  }
class C{  public void write(byte[] b,int off,int len) throws IOException {  if (file.isOpen() == false && file instanceof SmbNamedPipe) {    file.send(new TransWaitNamedPipe("\\pipe" + file.unc),new TransWaitNamedPipeResponse());  }  writeDirect(b,off,len,0);}  }
class C{  private URI findHostURI(List<VNXeBase> initiators,VNXeApiClient apiClient,DbClient dbClient){  if (initiators != null && !initiators.isEmpty()) {    for (    VNXeBase init : initiators) {      VNXeHostInitiator vnxeInitiator=apiClient.getHostInitiator(init.getId());      String portwwn=vnxeInitiator.getPortWWN();      if (portwwn == null || portwwn.isEmpty()) {        continue;      }      Initiator initiator=NetworkUtil.getInitiator(portwwn,dbClient);      if (initiator != null && !initiator.getInactive()) {        URI hostURI=initiator.getHost();        if (!NullColumnValueGetter.isNullURI(hostURI)) {          return hostURI;        }      }    }  }  return null;}  }
class C{  public synchronized void update(int cmid,double numCounts){  int index=findOrCreateHeapIdx(cmid);  counts[index]+=numCounts;  heapifyUp(index);  totalCountsTaken+=numCounts;  if (DEBUG)   validityCheck();}  }
class C{  @Override public int search(byte[] searchKey){  throw new UnsupportedOperationException();}  }
class C{  private int checkObjectIndices() throws ConnectionException {  CheckType checkType=CheckType.OBJECT_INDICES;  helper.logMessage("\nStart to check DataObject records that the related index is missing.\n",false,toConsole);  DbConsistencyStatus status=getStatusFromZk();  Collection<DataObjectType> resumeDataCfs=resumeFromWorkingPoint(checkType,status.getWorkingPoint());  int totalCorruptedCount=0;  for (  DataObjectType dataCf : resumeDataCfs) {    int corruptedCount=helper.checkCFIndices(dataCf,toConsole);    status=getStatusFromZk();    if (!toConsole && isCancelled(status)) {      cancel(status);    }    if (!toConsole) {      status.update(this.totalCount,checkType.name(),dataCf.getCF().getName(),corruptedCount);      persistStatus(status);    }    totalCorruptedCount+=corruptedCount;  }  DbCheckerFileWriter.close();  String msg=String.format("\nFinish to check DataObject records index: totally checked %d data CFs, " + "%d corrupted rows found.\n",resumeDataCfs.size(),totalCorruptedCount);  helper.logMessage(msg,false,toConsole);  return totalCorruptedCount;}  }
class C{  public synchronized void removeDragSourceListener(DragSourceListener dsl){  if (listener != null && listener.equals(dsl)) {    listener=null;  } else   throw new IllegalArgumentException();}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public void incrLeafCount(){  m_LeafCount++;}  }
class C{  public CreateFactoryParams codenvyJsonFileLocation(String codenvyJsonFileLocation){  this.codenvyJsonFileLocation=codenvyJsonFileLocation;  return this;}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.topic_like_tv:    if (!added) {      this.topicEla.addView(this.addIv);      this.added=true;      this.likeTv.setTextColor(likeAddedColor);      this.omitTv.setText(this.getString(this.getOmitVieStringFormatId(),Constant.AVATARS.length + 1));    } else {      this.topicEla.removeView(this.addIv);      this.added=false;      this.likeTv.setTextColor(likeColor);      this.omitTv.setText(this.getString(this.getOmitVieStringFormatId(),Constant.AVATARS.length));    }  break;case R.id.topic_share_tv:break;case R.id.topic_chat_tv:break;}}  }
class C{  public static byte[] I2OSP(long input){  byte[] output=new byte[8];  output[0]=(byte)(input >>> 56);  output[1]=(byte)(input >>> 48);  output[2]=(byte)(input >>> 40);  output[3]=(byte)(input >>> 32);  output[4]=(byte)(input >>> 24);  output[5]=(byte)(input >>> 16);  output[6]=(byte)(input >>> 8);  output[7]=(byte)input;  return output;}  }
class C{  public static FrozenNativePage freeze(NativePage nativePage){  FrozenNativePage fnp=new FrozenNativePage(nativePage);  nativePage.destroy();  return fnp;}  }
class C{  private boolean cacheComplete(){  final boolean complete;  if (m_cache != null) {    complete=m_cache.isComplete();  } else {    complete=false;  }  return complete;}  }
class C{  public void writeLine(String[] column){  String str=column[0];  for (int i=1; i < column.length; ++i) {    str+=", " + column[i];  }  writer.println(str);}  }
class C{  private void init(){  if (null != schemaAnalyser.getFilterList()) {    if (schemaAnalyser.getFilterList().isEmpty()) {      filterList.add(new QName(URI_NS_DS,"SignedInfo"));      filterList.add(new QName(URI_NS_DS,"SignatureValue"));      schemaAnalyser.setFilterList(filterList);    }  }  maxPossibilites=0;  List<Payload> usedPayloads=new ArrayList<Payload>();  for (  Payload payload : payloadList) {    ++countSignedElements;    if (payload.getReferringElement() instanceof ReferenceElement) {      ++countElementsReferedByID;    } else     if (payload.getReferringElement() instanceof XPathElement) {      ++countElementsReferedByXPath;    }    if (payload.hasPayload() || payload.isTimestamp()) {      Element payloadElement;      try {        payloadElement=payload.getPayloadElement();      } catch (      InvalidPayloadException e) {        LOG.warn("Could not get Payload Element for " + payload.getSignedElement().getNodeName() + " / Skipping.");        continue;      }      Element refferingElement=payload.getReferringElement().getElementNode();      PayloadElement pay=new PayloadElement(payloadElement,refferingElement);      SignedElement sig=new SignedElement(payload.getSignedElement(),refferingElement);      XPathAnalyser xpa;      xpa=new XPathAnalyser(payload.getReferringElement(),sig,pay,schemaAnalyser);      if (xpa.isFastXPath()) {        ++countElementsReferedByFastXPath;      } else       if (xpa.isPrefixfreeTransformedFastXPath()) {        ++countElementsReferedByPrefixfreeTransformedFastXPath;      }      int possibilities=xpa.getMaxPossibilites();      if (possibilities > 0) {        maxPossibilites=(maxPossibilites == 0 ? possibilities : maxPossibilites * possibilities);        analyserList.add(xpa);        usedPayloads.add(payload);      }    } else {      LOG.info("No payload for " + payload.getSignedElement().getNodeName() + " detected / Skipping.");    }  }  this.payloadList=usedPayloads;}  }
class C{  public float modelX(float x,float y,float z){  return g.modelX(x,y,z);}  }
class C{  @NotNull public static SqlArray of(@NotNull String type,@NotNull Object[] values){  return of(type,asList(values));}  }
class C{  protected TungstenProperties readConfig() throws Exception {  TungstenProperties conf=null;  File propsFile=new File(configFile);  if (!propsFile.exists() || !propsFile.canRead()) {    throw new Exception("Properties file not found: " + propsFile.getAbsolutePath(),null);  }  conf=new TungstenProperties();  try {    conf.load(new FileInputStream(propsFile));  } catch (  IOException e) {    throw new Exception("Unable to read properties file: " + propsFile.getAbsolutePath() + " ("+ e.getMessage()+ ")",null);  }  return conf;}  }
class C{  public boolean hasParent(){  return parts.size() > 1;}  }
class C{  public GtExpr newGtExpr(Value op1,Value op2){  return new JGtExpr(op1,op2);}  }
class C{  protected List<Position> computeArrowheadPositions(DrawContext dc,Position startPosition,Position endPosition){  Globe globe=dc.getGlobe();  Vec4 p1=globe.computePointFromPosition(startPosition);  Vec4 pB=globe.computePointFromPosition(endPosition);  Vec4 vB1=p1.subtract3(pB);  double arrowLengthFraction=this.getArrowLength();  Vec4 arrowBase=pB.add3(vB1.multiply3(arrowLengthFraction));  Vec4 normal=globe.computeSurfaceNormalAtPoint(arrowBase);  double arrowLength=vB1.getLength3() * arrowLengthFraction;  double arrowHalfWidth=arrowLength * this.getArrowAngle().tanHalfAngle();  Vec4 perpendicular=vB1.cross3(normal);  perpendicular=perpendicular.normalize3().multiply3(arrowHalfWidth);  Vec4 pA=arrowBase.add3(perpendicular);  Vec4 pC=arrowBase.subtract3(perpendicular);  return TacticalGraphicUtil.asPositionList(globe,pA,pB,pC);}  }
class C{  private static void removeSpuriousNodes(DialogueState reduced){  for (  ChanceNode node : new HashSet<ChanceNode>(reduced.getChanceNodes())) {    if (node.getInputNodes().isEmpty() && node.getOutputNodes().isEmpty() && node.getDistrib() instanceof CategoricalTable&& node.getProb(ValueFactory.none()) > 0.99) {      reduced.removeNode(node.getId());      continue;    } else     if (node.getDistrib() instanceof EquivalenceDistribution && node.getInputNodeIds().isEmpty()) {      reduced.removeNode(node.getId());    }    node.pruneValues(VALUE_PRUNING_THRESHOLD);    if (node.getNbValues() == 1 && !node.getOutputNodes().isEmpty() && reduced.getIncrementalVars().isEmpty()) {      Assignment onlyAssign=new Assignment(node.getId(),node.sample());      for (      ChanceNode outputNode : node.getOutputNodes(ChanceNode.class)) {        if (!(outputNode.getDistrib() instanceof AnchoredRule)) {          ProbDistribution curDistrib=outputNode.getDistrib();          outputNode.removeInputNode(node.getId());          if (outputNode.getInputNodeIds().isEmpty()) {            outputNode.setDistrib(curDistrib.getProbDistrib(onlyAssign));          } else {            outputNode.setDistrib(curDistrib.getPosterior(onlyAssign));          }        }      }    }  }}  }
class C{  protected boolean isOobInlineChanged(){  return true;}  }
class C{  public int parseNumericTimeZone() throws ParseException {  boolean switchSign=false;  char first=orig[index++];  if (first == '+') {    switchSign=true;  } else   if (first != '-') {    throw new ParseException("Bad Numeric TimeZone",index);  }  int tz=parseNumber();  int offset=(tz / 100) * 60 + (tz % 100);  if (switchSign) {    return -offset;  } else {    return offset;  }}  }
class C{  public UIColumnTestCase(String name){  super(name);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private static int leftIdx(int parentIdx){  return childIdx(parentIdx,0);}  }
class C{  long interpretLength(byte[] info,int position) throws SQLException {  if (info[position] != ISCConstants.isc_info_blob_total_length)   throw new FBSQLException("Length is not available.");  int dataLength=VaxEncoding.iscVaxInteger(info,position + 1,2);  return VaxEncoding.iscVaxLong(info,position + 3,dataLength);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void verifySnapResults() throws Exception {  log.info("Verifying updated snapshot sresults for BlockSnapshotReplicationGroupInstanceMigration.");  BlockSnapshot snap=_dbClient.queryObject(BlockSnapshot.class,snapURI);  Assert.assertNotNull("replicationGroupInstance shouldn't be null",snap.getReplicationGroupInstance());  Assert.assertEquals("replicationGroupInstance should be set from the snapGroupInstance",groupInstance,snap.getReplicationGroupInstance());}  }
class C{  public QRegion(Region region,boolean includeKeys){  if (region == null)   throw new IllegalArgumentException(LocalizedStrings.QRegion_REGION_CAN_NOT_BE_NULL.toLocalizedString());  this.region=region;  Class constraint=this.region.getAttributes().getValueConstraint();  if (constraint == null)   constraint=Object.class;  ResultsCollectionWrapper res=null;  if (includeKeys) {    res=new ResultsCollectionWrapper(TypeUtils.getObjectType(constraint),this.region.entrySet());  } else {    res=new ResultsCollectionWrapper(TypeUtils.getObjectType(constraint),this.region.values());  }  res.setModifiable(false);  if (!DefaultQueryService.COPY_ON_READ_AT_ENTRY_LEVEL) {    res.setIgnoreCopyOnReadForQuery(true);  }  this.values=res;}  }
class C{  public void skippedEntity(String name) throws org.xml.sax.SAXException {  if (!m_shouldProcess)   return;  getCurrentProcessor().skippedEntity(this,name);}  }
class C{  public void clearExif(){  mData=new ExifData(DEFAULT_BYTE_ORDER);}  }
class C{  void bringToFront(Callback<Void,Void> callback){  EventHandler<? super MouseEvent> eventFilter=null;  final boolean bindSize=prefSizeProperty.get().isBound();  prefSizeProperty.get().unbind();  maxSizeProperty.get().unbind();  this.addEventFilter(MouseEvent.ANY,eventFilter);  EventHandler<ActionEvent> drawerDrawer=null;  if (sizeProperty.get().get() > getDefaultDrawerSize()) {    tempDrawerSize=sizeProperty.get().get();    ParallelTransition parallelTransition=new ParallelTransition(new OutDrawerSizeTransition(),new DrawerTransition(translateProperty.get(),initTranslate.doubleValue()));    parallelTransition.setOnFinished(drawerDrawer);    parallelTransition.play();  } else {    if (drawerTransition.getStatus().equals(Status.STOPPED) && translateProperty.get() == 0) {      drawerTransition.setRate(-1);      drawerTransition.setOnFinished(drawerDrawer);      drawerTransition.play();    }    tempDrawerSize=getDefaultDrawerSize();  }}  }
class C{  public ResultEnvelope makeResults(PointSet pointSet,boolean includeTimes,boolean includeHistograms,boolean includeIsochrones){  ResultEnvelope envelope=new ResultEnvelope();  envelope.worstCase=new ResultSet(maxs,pointSet,includeTimes,includeHistograms,includeIsochrones);  envelope.avgCase=new ResultSet(avgs,pointSet,includeTimes,includeHistograms,includeIsochrones);  envelope.bestCase=new ResultSet(mins,pointSet,includeTimes,includeHistograms,includeIsochrones);  return envelope;}  }
class C{  public void releaseStreamAllocation() throws IOException {  streamAllocation.release();}  }
class C{  private boolean cmd_saveProject(int C_Project_ID){  log.config("C_Project_ID=" + C_Project_ID);  MProject project=new MProject(Env.getCtx(),C_Project_ID,null);  if (project.get_ID() == 0) {    log.log(Level.SEVERE,"Not found - C_Project_ID=" + C_Project_ID);    return false;  }  int lineCount=0;  for (int i=0; i < m_selectionList.size(); i++) {    if (isSelectionSelected(m_selectionList.get(i))) {      BigDecimal qty=m_qtyList.get(i).getValue();      int M_Product_ID=m_productList.get(i).intValue();      MProjectLine pl=new MProjectLine(project);      pl.setM_Product_ID(M_Product_ID);      pl.setPlannedQty(qty);      if (pl.save())       lineCount++; else       log.log(Level.SEVERE,"Line not saved");    }  }  FDialog.info(-1,this,project.getName() + " " + Msg.translate(Env.getCtx(),"Inserted")+ "="+ lineCount);  log.config("#" + lineCount);  return true;}  }
class C{  public boolean hasVaryAll(){  return varyFields.contains("*");}  }
class C{  private File classFileForClass(String binaryName,File destDir){  return fileForClass(binaryName,destDir,".class");}  }
class C{  protected void prepareTest(String localData,List<String> endpointData) throws Exception {  if (endpointData.size() > MAX_ENDPOINTS)   throw new RuntimeException("MAX_ENDPOINTs to low, " + endpointData.size() + " repositories needed. Adjust configuration");  if (localData != null) {    loadDataSet(localRepository,localData);  }  int i=1;  for (  String s : endpointData) {    loadDataSet(getRepository(i++),s);  }}  }
class C{  public static String resolveEntities(String text){  int ampIndex=text.indexOf('&');  if (ampIndex == -1) {    return text;  }  StringBuilder sb=new StringBuilder((int)(1.1 * text.length()));  int prevIndex=0;  while (ampIndex >= 0) {    int colonIndex=text.indexOf(';',ampIndex);    sb.append(text.substring(prevIndex,ampIndex));    sb.append(resolveEntity(text.substring(ampIndex + 1,colonIndex)));    prevIndex=colonIndex + 1;    ampIndex=text.indexOf('&',prevIndex);  }  sb.append(text.substring(prevIndex));  return sb.toString();}  }
class C{  @Override public void fire(String data){  RPAction action=new RPAction();  action.put("type",Actions.PROGRESS_STATUS);  if (progressType != null) {    action.put("progress_type",progressType);  }  if (dataKey != null) {    action.put(dataKey,data);  }  StendhalClient.get().send(action);}  }
class C{  public void delete(String id,String cfName,boolean force) throws Exception {  Class clazz=_cfMap.get(cfName);  if (clazz == null) {    System.err.println("Unknown Column Family: " + cfName);    return;  }  boolean deleted=queryAndDeleteObject(URI.create(id),clazz,force);  if (deleted) {    log.info("The object {} is deleted from the column family {}",id,cfName);  } else {    log.info("The object {} is NOT deleted from the column family {}",id,cfName);  }}  }
class C{  protected Entity defEntity(String name,int type,String str){  int len=str.length();  char data[]=new char[len];  str.getChars(0,len,data,0);  return defineEntity(name,type,data);}  }
class C{  public void writeHeaderPart(AnnotatedOutput out){  throwIfNotPrepared();  int sz=classDefs.size();  int offset=(sz == 0) ? 0 : getFileOffset();  if (out.annotates()) {    out.annotate(4,"class_defs_size: " + Hex.u4(sz));    out.annotate(4,"class_defs_off:  " + Hex.u4(offset));  }  out.writeInt(sz);  out.writeInt(offset);}  }
class C{  WizardBranchController(SimpleWizardInfo base){  if (base == null)   throw new NullPointerException("No base");  this.base=base;}  }
class C{  public static boolean toBooleanValue(boolean b){  return b;}  }
class C{  public Boolean isSiteAffinityEnabled(){  return siteAffinityEnabled;}  }
class C{  public DERSequence(ASN1Encodable[] array){  super(array);}  }
class C{  public final boolean isLocallyConsistent(){  TBPar pos=new TBPar(this.size());  TBPar neg=new TBPar(this.size());  for (int i=0; i < this.size(); i++) {    LiveExprNode ln=this.exprAt(i);    if (ln instanceof LNState) {      pos.addElement(ln);    } else     if (ln instanceof LNNeg) {      LiveExprNode body=((LNNeg)ln).getBody();      if (body instanceof LNState) {        neg.addElement(body);      }    }  }  for (int i=0; i < pos.size(); i++) {    if (neg.member(pos.exprAt(i))) {      return false;    }  }  return true;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.CONSTRAINT_EXPR___NEGATIVE_CONSTRAINT_1:    return ((InternalEList<?>)getNegativeConstraint_1()).basicRemove(otherEnd,msgs);case UmplePackage.CONSTRAINT_EXPR___STRING_EXPR_1:  return ((InternalEList<?>)getStringExpr_1()).basicRemove(otherEnd,msgs);case UmplePackage.CONSTRAINT_EXPR___BOOL_EXPR_1:return ((InternalEList<?>)getBoolExpr_1()).basicRemove(otherEnd,msgs);case UmplePackage.CONSTRAINT_EXPR___GEN_EXPR_1:return ((InternalEList<?>)getGenExpr_1()).basicRemove(otherEnd,msgs);case UmplePackage.CONSTRAINT_EXPR___NUM_EXPR_1:return ((InternalEList<?>)getNumExpr_1()).basicRemove(otherEnd,msgs);case UmplePackage.CONSTRAINT_EXPR___ANONYMOUS_CONSTRAINT_EXPR_11:return ((InternalEList<?>)getAnonymous_constraintExpr_1_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static Icon darken(Icon icon){  Image img=getImage(icon);  if (img == null)   return icon;  img=darken(img);  return new IconUIResource(new ImageIcon(img));}  }
class C{  public void createEmptyDB(SQLiteDatabase db){  db.execSQL("DROP TABLE IF EXISTS " + TABLE_FAVORITES);  db.execSQL("DROP TABLE IF EXISTS " + TABLE_WORKSPACE_SCREENS);  onCreate(db);}  }
class C{  protected void paintContentBorder(SeaGlassContext ss,Graphics g,int tabPlacement,int selectedIndex){  int width=tabPane.getWidth();  int height=tabPane.getHeight();  Insets insets=tabPane.getInsets();  int x=insets.left;  int y=insets.top;  int w=width - insets.right - insets.left;  int h=height - insets.top - insets.bottom;switch (tabPlacement) {case LEFT:    x+=calculateTabAreaWidth(tabPlacement,runCount,maxTabWidth);  w-=(x - insets.left);break;case RIGHT:w-=calculateTabAreaWidth(tabPlacement,runCount,maxTabWidth);break;case BOTTOM:h-=calculateTabAreaHeight(tabPlacement,runCount,maxTabHeight);break;case TOP:default :y+=calculateTabAreaHeight(tabPlacement,runCount,maxTabHeight);h-=(y - insets.top);}SeaGlassLookAndFeel.updateSubregion(ss,g,new Rectangle(x,y,w,h));ss.getPainter().paintTabbedPaneContentBackground(ss,g,x,y,w,h);ss.getPainter().paintTabbedPaneContentBorder(ss,g,x,y,w,h);}  }
class C{  public void visitLocalVariable(String name,String desc,String signature,Label start,Label end,int index){  if (mv != null) {    mv.visitLocalVariable(name,desc,signature,start,end,index);  }}  }
class C{  public static DeleteUsersResponseE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  DeleteUsersResponseE object=new DeleteUsersResponseE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","deleteUsersResponse").equals(reader.getName())) {          object.setDeleteUsersResponse(org.oscm.xsd.DeleteUsersResponse.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public static ITypeBinding normalizeForDeclarationUse(ITypeBinding binding,AST ast){  if (binding.isNullType())   return ast.resolveWellKnownType("java.lang.Object");  if (binding.isPrimitive())   return binding;  binding=normalizeTypeBinding(binding);  if (binding == null || !binding.isWildcardType())   return binding;  if (binding.isUpperbound()) {    return binding.getBound();  } else {    return ast.resolveWellKnownType("java.lang.Object");  }}  }
class C{  public <X extends Throwable>FluentSupplier<R> recover(final Class<X> type,final Supplier<R> onError){  return FluentFunctions.of(null);}  }
class C{  public static byte[] keyHash(byte[] data){  byte[] ph=new byte[20];  try {    byte[] sha256=MessageDigest.getInstance("SHA-256").digest(data);    RIPEMD160Digest digest=new RIPEMD160Digest();    digest.update(sha256,0,sha256.length);    digest.doFinal(ph,0);  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }  return ph;}  }
class C{  public static String intToString(int value,int nChars){  String strValue=Integer.toString(value);  StringBuilder strBuf=new StringBuilder(nChars);  for (int i=strValue.length(); i < nChars; i++) {    strBuf.append('0');  }  strBuf.append(strValue);  return strBuf.toString();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:27.942 -0500",hash_original_method="4F8C4B940AF7AE45F87D198B1B467EBE",hash_generated_method="1F8B361ECFDD8AC5A25EB4FFFB7BD686") public ViewPropertyAnimator scaleY(float value){  animateProperty(SCALE_Y,value);  return this;}  }
class C{  public void configureManagers(){  tm=new LocoNetThrottledTransmitter(getLnTrafficController(),mTurnoutExtraSpace);  log.debug("ThrottleTransmitted configured with :" + mTurnoutExtraSpace);  if (sm != null) {    sm.setThrottledTransmitter(tm,mTurnoutNoRetry);    log.debug("set turnout retry: " + mTurnoutNoRetry);  }  InstanceManager.store(getPowerManager(),jmri.PowerManager.class);  InstanceManager.setSensorManager(getSensorManager());  InstanceManager.setTurnoutManager(getTurnoutManager());  InstanceManager.setLightManager(getLightManager());  InstanceManager.setThrottleManager(getThrottleManager());  jmri.InstanceManager.setProgrammerManager(getProgrammerManager());  InstanceManager.setReporterManager(getReporterManager());  InstanceManager.setConsistManager(getConsistManager());  InstanceManager.addClockControl(getClockControl());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public static boolean isAlphanumericSpace(String str){  if (str == null) {    return false;  }  int sz=str.length();  for (int i=0; i < sz; i++) {    if ((Character.isLetterOrDigit(str.charAt(i)) == false) && (str.charAt(i) != ' ')) {      return false;    }  }  return true;}  }
class C{  public FreeTextSuggester(Analyzer analyzer){  this(analyzer,analyzer,DEFAULT_GRAMS);}  }
class C{  public void accept(){  tcp.passiveOpen();  clientsocket=new MySocket("localHost",999);  try {    tcp.syn();    q.acquire_semC();  } catch (  Exception e) {  }  q.release_semC();  tcp.ack();}  }
class C{  static public void selectIntialPoints(DataSet d,int[] indices,DistanceMetric dm,List<Double> accelCache,Random rand,SeedSelection selectionMethod,ExecutorService threadpool){  try {    int k=indices.length;    if (selectionMethod == SeedSelection.RANDOM) {      Set<Integer> indecies=new IntSet(k);      while (indecies.size() != k)       indecies.add(rand.nextInt(d.getSampleSize()));      int j=0;      for (      Integer i : indecies)       indices[j++]=i;    } else     if (selectionMethod == SeedSelection.KPP) {      if (threadpool == null || threadpool instanceof FakeExecutor)       kppSelection(indices,rand,d,k,dm,accelCache); else       kppSelection(indices,rand,d,k,dm,accelCache,threadpool);    } else     if (selectionMethod == SeedSelection.FARTHEST_FIRST) {      if (threadpool == null)       ffSelection(indices,rand,d,k,dm,accelCache,new FakeExecutor()); else       ffSelection(indices,rand,d,k,dm,accelCache,threadpool);    } else     if (selectionMethod == SeedSelection.MEAN_QUANTILES) {      if (threadpool == null)       mqSelection(indices,d,k,dm,accelCache,new FakeExecutor()); else       mqSelection(indices,d,k,dm,accelCache,threadpool);    }  } catch (  InterruptedException ex) {    Logger.getLogger(SeedSelectionMethods.class.getName()).log(Level.SEVERE,null,ex);  }catch (  ExecutionException ex) {    Logger.getLogger(SeedSelectionMethods.class.getName()).log(Level.SEVERE,null,ex);  }}  }
class C{  public Instant minus(ReadableDuration duration){  return withDurationAdded(duration,-1);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    calculateFractalDimensionRaster();  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateFractalDimensionVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  static BOSHClientConnEvent createConnectionClosedOnErrorEvent(final BOSHClient source,final List<ComposableBody> outstanding,final Throwable cause){  return new BOSHClientConnEvent(source,false,outstanding,cause);}  }
class C{  protected SVGOMFontFaceSrcElement(){}  }
class C{  @Deprecated public ContentItem content(String content){  this.content=content;  return this;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:25.388 -0500",hash_original_method="8FD2790587F2719E68EBC052DE90327C",hash_generated_method="8FD2790587F2719E68EBC052DE90327C") void add(ThreadLocal<?> key,Object value){  for (int index=key.hash & mask; ; index=next(index)) {    Object k=table[index];    if (k == null) {      table[index]=key.reference;      table[index + 1]=value;      return;    }  }}  }
class C{  @SuppressWarnings("rawtypes") private BackchainTypeResourceIterator(IChunkedOrderedIterator<ISPO> _src,Iterator<ISPO> src,PushbackIterator<IV> resourceIds,PushbackIterator<IV> posItr,final IV rdfType,final IV rdfsResource){  this._src=_src;  this.keyOrder=_src.getKeyOrder();  this.src=src;  this.resourceIds=resourceIds;  this.posItr=posItr;  this.rdfType=rdfType;  this.rdfsResource=rdfsResource;}  }
class C{  public AggregateFuture(List<Future<T>> components){  this.components.addAll(components);}  }
class C{  synchronized static Object findRegisteredComponentOfType(JComponent from,Class target){  JRootPane rp=SwingUtilities.getRootPane(from);  if (rp != null) {    for (int counter=components.size() - 1; counter >= 0; counter--) {      Object component=((WeakReference)components.get(counter)).get();      if (component == null) {        components.remove(counter);      } else       if (target.isInstance(component) && SwingUtilities.getRootPane((Component)component) == rp) {        return component;      }    }  }  return null;}  }
class C{  public GridTuple6(@Nullable V1 v1,@Nullable V2 v2,@Nullable V3 v3,@Nullable V4 v4,@Nullable V5 v5,@Nullable V6 v6){  this.v1=v1;  this.v2=v2;  this.v3=v3;  this.v4=v4;  this.v5=v5;  this.v6=v6;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  final XObject obj=m_arg0.execute(xctxt);  final double val=obj.num();  if (val >= -0.5 && val < 0)   return new XNumber(-0.0);  if (val == 0.0)   return new XNumber(val);  return new XNumber(java.lang.Math.floor(val + 0.5));}  }
class C{  public ReadRegistersSynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  private static int readBERInternal(InputStream is,ByteArrayOutputStream bout,int tag) throws IOException {  if (tag == -1) {    tag=is.read();    if (tag == -1) {      throw new IOException("BER/DER tag info absent");    }    if ((tag & 0x1f) == 0x1f) {      throw new IOException("Multi octets tag not supported");    }    bout.write(tag);  }  int n=is.read();  if (n == -1) {    throw new IOException("BER/DER length info absent");  }  bout.write(n);  int length;  if (n == 0x80) {    if ((tag & 0x20) != 0x20) {      throw new IOException("Non constructed encoding must have definite length");    }    while (true) {      int subTag=readBERInternal(is,bout,-1);      if (subTag == 0) {        break;      }    }  } else {    if (n < 0x80) {      length=n;    } else     if (n == 0x81) {      length=is.read();      if (length == -1) {        throw new IOException("Incomplete BER/DER length info");      }      bout.write(length);    } else     if (n == 0x82) {      int highByte=is.read();      int lowByte=is.read();      if (lowByte == -1) {        throw new IOException("Incomplete BER/DER length info");      }      bout.write(highByte);      bout.write(lowByte);      length=(highByte << 8) | lowByte;    } else     if (n == 0x83) {      int highByte=is.read();      int midByte=is.read();      int lowByte=is.read();      if (lowByte == -1) {        throw new IOException("Incomplete BER/DER length info");      }      bout.write(highByte);      bout.write(midByte);      bout.write(lowByte);      length=(highByte << 16) | (midByte << 8) | lowByte;    } else     if (n == 0x84) {      int highByte=is.read();      int nextByte=is.read();      int midByte=is.read();      int lowByte=is.read();      if (lowByte == -1) {        throw new IOException("Incomplete BER/DER length info");      }      if (highByte > 127) {        throw new IOException("Invalid BER/DER data (a little huge?)");      }      bout.write(highByte);      bout.write(nextByte);      bout.write(midByte);      bout.write(lowByte);      length=(highByte << 24) | (nextByte << 16) | (midByte << 8)| lowByte;    } else {      throw new IOException("Invalid BER/DER data (too huge?)");    }    if (readFully(is,bout,length) != length) {      throw new IOException("Incomplete BER/DER data");    }  }  return tag;}  }
class C{  public void onCordovaInit(PluginManager pluginManager){  this.pluginManager=pluginManager;  if (savedResult != null) {    onActivityResult(savedResult.requestCode,savedResult.resultCode,savedResult.intent);  }}  }
class C{  private <T>List<T> removeDuplicate(List<T> listWithDuplicates){  List<T> uniqueList=new ArrayList<T>(new LinkedHashSet<T>(listWithDuplicates));  return uniqueList;}  }
class C{  private int stackPriority(char opp){switch (opp) {case 'l':case 'b':case 'c':case 'e':case 's':case 'f':case 'h':case 'r':case 't':case 'n':    return 3;case '^':  return 2;case '*':return 2;case '/':return 2;case '+':return 1;case '-':return 1;case '(':return 0;case ')':return -1;default :throw new IllegalArgumentException("Unrecognized operator:" + opp);}}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override protected void updateResult(SnmpVarBind[] result){  final Enumeration<SnmpVarBind> e=varBind.elements();  final int max=result.length;  for (int i=0; i < size; i++) {    if (e.hasMoreElements() == false)     return;    final int pos=translation[i];    if (pos >= max) {      if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {        SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,SnmpSubRequestHandler.class.getName(),"updateResult","Position '" + pos + "' is out of bound...");      }      continue;    }    final SnmpVarBind element=e.nextElement();    if (element == null)     continue;    if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {      SNMP_ADAPTOR_LOGGER.logp(Level.FINER,SnmpSubRequestHandler.class.getName(),"updateResult","Non repeaters Current element : " + element + " from agent : "+ agent);    }    final SnmpVarBind res=findVarBind(element,result[pos]);    if (res == null)     continue;    result[pos]=res;  }  int localR=size - nonRepeat;  for (int i=2; i <= maxRepeat; i++) {    for (int r=0; r < localR; r++) {      final int pos=(i - 1) * globalR + translation[nonRepeat + r];      if (pos >= max)       return;      if (e.hasMoreElements() == false)       return;      final SnmpVarBind element=e.nextElement();      if (element == null)       continue;      if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {        SNMP_ADAPTOR_LOGGER.logp(Level.FINER,SnmpSubRequestHandler.class.getName(),"updateResult","Repeaters Current element : " + element + " from agent : "+ agent);      }      final SnmpVarBind res=findVarBind(element,result[pos]);      if (res == null)       continue;      result[pos]=res;    }  }}  }
class C{  private void applyTransformEnd(){  currentMatrix=transformations.pop();}  }
class C{  public static double incompleteGamma(double a,double x){  double ans, ax, c, r;  if (x <= 0 || a <= 0)   return 0.0;  if (x > 1.0 && x > a)   return 1.0 - incompleteGammaComplement(a,x);  ax=a * Math.log(x) - x - lnGamma(a);  if (ax < -MAXLOG)   return (0.0);  ax=Math.exp(ax);  r=a;  c=1.0;  ans=1.0;  do {    r+=1.0;    c*=x / r;    ans+=c;  } while (c / ans > MACHEP);  return (ans * ax / a);}  }
class C{  public OSTenantListRestRep registerOpenStackTenants(OpenStackTenantListParam list){  return client.post(OSTenantListRestRep.class,list,baseUrl);}  }
class C{  public CreateIndexRequest aliases(String source){  return aliases(new BytesArray(source));}  }
class C{  final public CashFlow nextCashFlow(final Leg cashFlows,Date settlement){  if (settlement.isNull()) {    settlement=new Settings().evaluationDate();  }  for (int i=0; i < cashFlows.size(); ++i) {    if (!cashFlows.get(i).hasOccurred(settlement))     return cashFlows.get(i);  }  return null;}  }
class C{  @Override protected void onStart(){  super.onStart();  Log.d(TAG,"onStart() - the activity is about to become visible");}  }
class C{  public boolean isNegative(){  return neg;}  }
class C{  private boolean checkPlayServices(){  GoogleApiAvailability apiAvailability=GoogleApiAvailability.getInstance();  int resultCode=apiAvailability.isGooglePlayServicesAvailable(context);  if (resultCode != ConnectionResult.SUCCESS) {    if (apiAvailability.isUserResolvableError(resultCode))     apiAvailability.getErrorDialog(getActivity(),resultCode,PLAY_SERVICES_RESOLUTION_REQUEST).show();    return false;  }  return true;}  }
class C{  public static ConfigurationDirectory downloadConfiguration(final String path,final String sourceAnchor) throws Exception {  ProcessBuilder pb=new ProcessBuilder(ConfProxyProperties.getDownloadScriptPath(),sourceAnchor,path);  pb.redirectErrorStream(true);  pb.redirectOutput(ProcessBuilder.Redirect.INHERIT);  log.debug("Running '{} {} {}' ...",ConfProxyProperties.getDownloadScriptPath(),sourceAnchor,path);  runConfClient(pb);  return new ConfigurationDirectory(path);}  }
class C{  @Override public void doFilter(ServletRequest request,ServletResponse response,FilterChain chain) throws IOException, ServletException {  HttpServletResponse res=((HttpServletResponse)response);  res.setHeader("Cache-Control","max-age=0, no-store, must-revalidate");  res.setHeader("Pragma","no-cache");  res.setHeader("Expires","0");  chain.doFilter(request,res);}  }
class C{  public AsynchronousProgramExecutor(String account,String message){  this.account=account;  this.message=message;}  }
class C{  protected static float[] convertKernelMatrix(Element filterElement,int[] orderXY,BridgeContext ctx){  String s=filterElement.getAttributeNS(null,SVG_KERNEL_MATRIX_ATTRIBUTE);  if (s.length() == 0) {    throw new BridgeException(ctx,filterElement,ERR_ATTRIBUTE_MISSING,new Object[]{SVG_KERNEL_MATRIX_ATTRIBUTE});  }  int size=orderXY[0] * orderXY[1];  float[] kernelMatrix=new float[size];  StringTokenizer tokens=new StringTokenizer(s," ,");  int i=0;  try {    while (tokens.hasMoreTokens() && i < size) {      kernelMatrix[i++]=SVGUtilities.convertSVGNumber(tokens.nextToken());    }  } catch (  NumberFormatException nfEx) {    throw new BridgeException(ctx,filterElement,nfEx,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_KERNEL_MATRIX_ATTRIBUTE,s,nfEx});  }  if (i != size) {    throw new BridgeException(ctx,filterElement,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_KERNEL_MATRIX_ATTRIBUTE,s});  }  return kernelMatrix;}  }
class C{  public void createUnknownChildren(){  this.dirtyDescendents=0;  children=new ViewNode[AreaPanel.NUM_SUB_PANELS];  AreaPanel ap=ap();  for (int i=0; i < children.length; i++) {    AreaPanel childAp=ap.getSubAreaPanel(i);    if (childAp != null) {      children[i]=new ViewNode();      children[i].status=null;      children[i].dirtyDescendents=1;      children[i].apId=childAp.id;      this.dirtyDescendents++;    }  }}  }
class C{  public boolean isNotBlank(final CharSequence cs){  return !isBlank(cs);}  }
class C{  public String syncDatabase(){  MTable table=new MTable(getCtx(),getAD_Table_ID(),get_TrxName());  if (table.isView())   return "Cannot sync view";  table.set_TrxName(get_TrxName());  if (table.get_ID() == 0)   throw new AdempiereException("@NotFound@ @AD_Table_ID@ " + getAD_Table_ID());  Connection conn=null;  try {    conn=DB.getConnectionRO();    DatabaseMetaData md=conn.getMetaData();    String catalog=DB.getDatabase().getCatalog();    String schema=DB.getDatabase().getSchema();    String tableName=table.getTableName();    if (md.storesUpperCaseIdentifiers()) {      tableName=tableName.toUpperCase();    } else     if (md.storesLowerCaseIdentifiers()) {      tableName=tableName.toLowerCase();    }    int noColumns=0;    String sql=null;    ResultSet rs=md.getColumns(catalog,schema,tableName,null);    while (rs.next()) {      noColumns++;      String columnName=rs.getString("COLUMN_NAME");      if (!columnName.equalsIgnoreCase(getColumnName()))       continue;      boolean notNull=DatabaseMetaData.columnNoNulls == rs.getInt("NULLABLE");      sql=getSQLModify(table,isMandatory() != notNull);      break;    }    rs.close();    rs=null;    if (noColumns == 0)     sql=table.getSQLCreate(); else     if (sql == null)     sql=getSQLAdd(table);    if (sql == null)     return "No sql";    if (sql.indexOf(DB.SQLSTATEMENT_SEPARATOR) == -1) {      DB.executeUpdateEx(sql,get_TrxName());    } else {      String statements[]=sql.split(DB.SQLSTATEMENT_SEPARATOR);      for (int i=0; i < statements.length; i++) {        DB.executeUpdateEx(statements[i],get_TrxName());      }    }    POInfo.removeFromCache(getAD_Table_ID());    return sql;  } catch (  SQLException e) {    throw new AdempiereException(e);  } finally {    if (conn != null) {      try {        conn.close();      } catch (      Exception e) {      }    }  }}  }
class C{  private void assertBufferContainsExpectedStrings(ByteBuffer buffer,final String expectedString){  assertTrue(Bytes.indexOf(buffer.array(),expectedString.getBytes(Charsets.US_ASCII)) >= 0);}  }
class C{  void toFile(String fileName) throws IOException {  FileOutputStream out=new FileOutputStream(fileName);  ObjectOutputStream oout=new ObjectOutputStream(new BufferedOutputStream(out));  System.err.println("Writing object model...");  oout.writeObject(this);  oout.close();  System.err.println("Done!");}  }
class C{  private boolean isFlipCandidate(Instruction cb,Instruction target){  Instruction next=cb.nextInstructionInCodeOrder();  if (!isMIR_Branch(next)) {    return false;  }  next=firstRealInstructionFollowing(next);  if (next != target) {    return false;  }  return true;}  }
class C{  public static int hexDigitToInt(final char hexDigit){  final int digit=Character.digit(hexDigit,16);  if (digit < 0) {    throw new IllegalArgumentException("Cannot interpret '" + hexDigit + "' as a hexadecimal digit");  }  return digit;}  }
class C{  protected RemoteObject(RemoteRef newref){  ref=newref;}  }
class C{  private void prepareAddParam(){  if (paramsAdded)   sb.append('&'); else {    sb.append('?');    paramsAdded=true;  }}  }
class C{  public void addAssociatedGefahr(GefaehrdungsUmsetzung gefaehrdung){  if (!associatedGefaehrdungen.contains(gefaehrdung)) {    associatedGefaehrdungen.add(gefaehrdung);  }}  }
class C{  public ClientDynamicTexture(){  this(512,512);}  }
class C{  public static ComponentUI createUI(JComponent c){  return s_radioButtonUI;}  }
class C{  public RealPrimeCICDecimate(int decimation,int order,int passFrequency,int attenuation,WindowType windowType){  this(decimation,order,passFrequency,attenuation,windowType,2048);}  }
class C{  private void generateZeroStatisticsRecord(FileShare fsObj){  try {    Stat zeroStatRecord=new Stat();    zeroStatRecord.setTimeInMillis(System.currentTimeMillis());    zeroStatRecord.setTimeCollected(System.currentTimeMillis());    zeroStatRecord.setServiceType(Constants._File);    zeroStatRecord.setAllocatedCapacity(0);    zeroStatRecord.setProvisionedCapacity(0);    zeroStatRecord.setBandwidthIn(0);    zeroStatRecord.setBandwidthOut(0);    zeroStatRecord.setNativeGuid(fsObj.getNativeGuid());    zeroStatRecord.setSnapshotCapacity(0);    zeroStatRecord.setSnapshotCount(0);    zeroStatRecord.setResourceId(fsObj.getId());    zeroStatRecord.setVirtualPool(fsObj.getVirtualPool());    zeroStatRecord.setProject(fsObj.getProject().getURI());    zeroStatRecord.setTenant(fsObj.getTenant().getURI());    _dbClient.insertTimeSeries(StatTimeSeries.class,zeroStatRecord);  } catch (  Exception e) {    _log.error("Zero Stat Record Creation failed for FileShare : {}",fsObj.getId(),e);  }}  }
class C{  @Deprecated static public AcelaSensorManager instance(){  return null;}  }
class C{  public void removeListener(final IFilterPanelListener<T> listener){  m_listeners.removeListener(listener);}  }
class C{  public AssociationDefinition_ createAssociationDefinition_(){  AssociationDefinition_Impl associationDefinition_=new AssociationDefinition_Impl();  return associationDefinition_;}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public void reset(){  currentBuffer=null;  currentBufferIndex=-1;  bufferPosition=0;  bufferStart=0;  bufferLength=0;  file.setLength(0);  if (crc != null) {    crc.reset();  }}  }
class C{  public static String wrap(String s,int n){  StringBuffer b=new StringBuffer();  boolean wrapPending=false;  for (int i=0; i < s.length(); i++) {    if (i % n == 0 && i > 0) {      wrapPending=true;    }    char c=s.charAt(i);    if (wrapPending && c == ' ') {      b.append("\n");      wrapPending=false;    } else {      b.append(c);    }  }  return b.toString();}  }
class C{  public XMLOptions(Reader reader) throws Exception {  this();  getXMLDocument().read(reader);}  }
class C{  public boolean isArmed(){  return armed;}  }
class C{  private boolean isIndirectlyUsed(){  if (this.expression instanceof MessageSend) {    MethodBinding method=((MessageSend)this.expression).binding;    if (method instanceof ParameterizedGenericMethodBinding && ((ParameterizedGenericMethodBinding)method).inferredReturnType) {      if (this.expectedType == null) {        return true;      }      if (this.resolvedType != this.expectedType) {        return true;      }    }  }  if (this.expectedType != null && this.resolvedType.isBaseType() && !this.resolvedType.isCompatibleWith(this.expectedType)) {    return true;  }  return false;}  }
class C{  protected Set<FunctionInterface> findUnusedFunctions(Set<UnitInterface> units){  Set<FunctionInterface> allFunctions=new HashSet<FunctionInterface>();  Set<FunctionInterface> usedFunctions=new HashSet<FunctionInterface>();  for (  UnitInterface unit : units) {    List<FunctionInterface> unitFunctions=getUnitFunctions(unit);    allFunctions.addAll(unitFunctions);    for (    FunctionInterface unitFunction : unitFunctions) {      for (      FunctionInterface usedFunction : unitFunction.getCalledFunctions()) {        usedFunctions.add(usedFunction);      }    }  }  allFunctions.removeAll(usedFunctions);  return allFunctions;}  }
class C{  public void insert(int index,String v){  if (v == null) {    insertNull(index);  } else {    _insert(index,textNode(v));  }}  }
class C{  public static int size(double[] array){  return Array.getLength(array);}  }
class C{  static public String logoutUser(HttpSession session) throws NumberFormatException, IOException {  logger.debug("logoutUser - " + session.getId());  if (session.getAttribute(Constants.SUB_KEY) == null || session.getAttribute(Constants.CM_ID) == null) {    logger.error("logoutUser - subKey or bssId missing!");    return null;  }  return deleteServiceSession(Long.parseLong(session.getAttribute(Constants.SUB_KEY).toString()),session.getAttribute(Constants.CM_ID).toString());}  }
class C{  private static boolean doSelfValidation(){  char lastChar=UNIHANS[0];  String lastString=Character.toString(lastChar);  for (  char c : UNIHANS) {    if (lastChar == c) {      continue;    }    final String curString=Character.toString(c);    int cmp=COLLATOR.compare(lastString,curString);    if (cmp >= 0) {      Log.e(TAG,"Internal error in Unihan table. " + "The last string \"" + lastString + "\" is greater than current string \""+ curString+ "\".");      return false;    }    lastString=curString;  }  return true;}  }
class C{  @SuppressWarnings("unchecked") protected void notifyTestSetProduced(TestSetEvent tse){  Vector<TestSetListener> l;synchronized (this) {    l=(Vector<TestSetListener>)m_testListeners.clone();  }  if (l.size() > 0) {    for (int i=0; i < l.size(); i++) {      if (m_splitThread == null) {        break;      }      l.elementAt(i).acceptTestSet(tse);    }  }}  }
class C{  public static IToken CreateToken(Cursor c){  if (c == null) {    return null;  }  IToken token=null;  int tokenType=c.getInt(c.getColumnIndexOrThrow(TokenDbAdapter.KEY_TOKEN_TYPE));switch (tokenType) {case TokenDbAdapter.TOKEN_TYPE_EVENT:    token=CreateHotpToken(c);  break;case TokenDbAdapter.TOKEN_TYPE_TIME:token=CreateTotpToken(c);break;default :return null;}token.setId(c.getLong(c.getColumnIndex(TokenDbAdapter.KEY_TOKEN_ROWID)));return token;}  }
class C{  static <T>Stream<T> makeRef(AbstractPipeline<?,T,?> upstream,Comparator<? super T> comparator){  return new OfRef<>(upstream,comparator);}  }
class C{  public boolean isOptionChecked(String key){  for (int i=0; i < checkboxPanel.getComponents().length; i++) {    JCheckBox checkbox=(JCheckBox)checkboxPanel.getComponent(i);    if (checkbox.getText().equals(getI18n(key))) {      if (checkbox.isSelected()) {        return true;      } else {        return false;      }    }  }  return false;}  }
class C{  public boolean isMXBean(){  return isMXBean;}  }
class C{  public synchronized final Map<K,V> snapshot(){  return new LinkedHashMap<K,V>(map);}  }
class C{  @Override protected EClass eStaticClass(){  return StextPackage.Literals.LOCAL_REACTION;}  }
class C{  public static long hash64(final byte[] data,int length,int seed){  final long m=0xc6a4a7935bd1e995L;  final int r=47;  long h=(seed & 0xffffffffl) ^ (length * m);  int length8=length / 8;  for (int i=0; i < length8; i++) {    final int i8=i * 8;    long k=((long)data[i8 + 0] & 0xff) + (((long)data[i8 + 1] & 0xff) << 8) + (((long)data[i8 + 2] & 0xff) << 16)+ (((long)data[i8 + 3] & 0xff) << 24)+ (((long)data[i8 + 4] & 0xff) << 32)+ (((long)data[i8 + 5] & 0xff) << 40)+ (((long)data[i8 + 6] & 0xff) << 48)+ (((long)data[i8 + 7] & 0xff) << 56);    k*=m;    k^=k >>> r;    k*=m;    h^=k;    h*=m;  }switch (length % 8) {case 7:    h^=(long)(data[(length & ~7) + 6] & 0xff) << 48;case 6:  h^=(long)(data[(length & ~7) + 5] & 0xff) << 40;case 5:h^=(long)(data[(length & ~7) + 4] & 0xff) << 32;case 4:h^=(long)(data[(length & ~7) + 3] & 0xff) << 24;case 3:h^=(long)(data[(length & ~7) + 2] & 0xff) << 16;case 2:h^=(long)(data[(length & ~7) + 1] & 0xff) << 8;case 1:h^=(long)(data[length & ~7] & 0xff);h*=m;};h^=h >>> r;h*=m;h^=h >>> r;return h;}  }
class C{  private NonGrantorDestroyedProcessor(DM dm,InternalDistributedMember grantor){  super(dm,grantor);}  }
class C{  public ExpressionType merge(final ExpressionType other){  String newTypeString=typeString;  boolean modified=false;  if (other.hasColor() && !hasColor()) {    newTypeString+=SUFFIX_COLOR;    modified=true;  }  if (other.hasQuestion() && !hasQuestion()) {    newTypeString+=SUFFIX_QUESTION;    modified=true;  }  if (other.isConditional() && !isConditional()) {    newTypeString+=SUFFIX_CONDITIONAL;    modified=true;  }  if (other.isPronoun() && !isPronoun()) {    newTypeString+=SUFFIX_PRONOUN;    modified=true;  }  if (other.isNegated() != isNegated()) {    newTypeString+=SUFFIX_NEGATED;    modified=true;  }  if (other.isDynamic() && !isDynamic()) {    newTypeString+=SUFFIX_DYNAMIC;    modified=true;  }  if (modified) {    return new ExpressionType(newTypeString);  } else {    return this;  }}  }
class C{  public BackchainOwlSameAsPropertiesIterator(IChunkedOrderedIterator<ISPO> src,IV s,IV p,IV o,AbstractTripleStore db,final IV sameAs){  if (s != null && o != null) {    this.delegate=new BackchainOwlSameAsPropertiesSPOIterator(src,s,p,o,db,sameAs);  } else   if (s != null && o == null) {    this.delegate=new BackchainOwlSameAsPropertiesSPIterator(src,s,p,db,sameAs);  } else   if (s == null && o != null) {    this.delegate=new BackchainOwlSameAsPropertiesPOIterator(src,p,o,db,sameAs);  } else   if (s == null && o == null) {    this.delegate=new BackchainOwlSameAsPropertiesPIterator(src,p,db,sameAs);  } else   throw new AssertionError();  if (RECORD_STACK_TRACES) {    StringWriter sw=new StringWriter();    new Exception("Stack trace").printStackTrace(new PrintWriter(sw));    stack=sw.toString();  }}  }
class C{  public boolean containsEvent(EventBean theEvent){  for (int i=0; i < count; i++) {    if (events[i].equals(theEvent)) {      return true;    }  }  return false;}  }
class C{  protected void drawView(Graphics2D g,Rectangle r,View view,int fontHeight,int y){  float x=r.x;  LayeredHighlighter h=(LayeredHighlighter)host.getHighlighter();  RSyntaxDocument document=(RSyntaxDocument)getDocument();  Element map=getElement();  int p0=view.getStartOffset();  int lineNumber=map.getElementIndex(p0);  int p1=view.getEndOffset();  setSegment(p0,p1 - 1,document,drawSeg);  int start=p0 - drawSeg.offset;  Token token=document.getTokenListForLine(lineNumber);  if (token != null && token.type == Token.NULL) {    h.paintLayeredHighlights(g,p0,p1,r,host,this);    return;  }  while (token != null && token.isPaintable()) {    int p=calculateBreakPosition(p0,token,x);    x=r.x;    h.paintLayeredHighlights(g,p0,p,r,host,this);    while (token != null && token.isPaintable() && token.offset + token.textCount - 1 < p) {      x=token.paint(g,x,y,host,this);      token=token.getNextToken();    }    if (token != null && token.isPaintable() && token.offset < p) {      int tokenOffset=token.offset;      Token temp=new DefaultToken(drawSeg,tokenOffset - start,p - 1 - start,tokenOffset,token.type);      temp.paint(g,x,y,host,this);      temp=null;      token.makeStartAt(p);    }    p0=(p == p0) ? p1 : p;    y+=fontHeight;  }  if (host.getEOLMarkersVisible()) {    g.setColor(host.getForegroundForTokenType(Token.WHITESPACE));    g.setFont(host.getFontForTokenType(Token.WHITESPACE));    g.drawString("\u00B6",x,y - fontHeight);  }}  }
class C{  public Evaluation(Instances data) throws Exception {  this(data,null);}  }
class C{  public static void generateRPClass(){  final RPClass rpclass=new RPClass(Events.GROUP_CHANGE);  rpclass.add(DefinitionClass.ATTRIBUTE,"leader",Type.STRING);  rpclass.add(DefinitionClass.ATTRIBUTE,"members",Type.STRING);  rpclass.add(DefinitionClass.ATTRIBUTE,"lootmode",Type.STRING);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void main(String[] ops){  System.out.println("Binomial standard error (0.5, 100): " + Statistics.binomialStandardError(0.5,100));  System.out.println("Chi-squared probability (2.558, 10): " + Statistics.chiSquaredProbability(2.558,10));  System.out.println("Normal probability (0.2): " + Statistics.normalProbability(0.2));  System.out.println("F probability (5.1922, 4, 5): " + Statistics.FProbability(5.1922,4,5));  System.out.println("lnGamma(6): " + Statistics.lnGamma(6));}  }
class C{  @Override public void postRegister(Boolean registrationDone){  super.postRegister(registrationDone);}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.TENANT_ADMIN}) public TaskResourceRep createVcenter(VcenterCreateParam createParam,@QueryParam("validate_connection") @DefaultValue("false") final Boolean validateConnection,@QueryParam("discover_vcenter") @DefaultValue("true") final Boolean discoverVcenter){  Vcenter vcenter=createVcenter(createParam,validateConnection);  vcenter.setRegistrationStatus(DiscoveredDataObject.RegistrationStatus.REGISTERED.toString());  _dbClient.createObject(vcenter);  auditOp(OperationTypeEnum.CREATE_VCENTER,true,null,vcenter.auditParameters());  if (discoverVcenter) {    return doDiscoverVcenter(queryObject(Vcenter.class,vcenter.getId(),true));  } else {    return createManualReadyTask(vcenter);  }}  }
class C{  void validateConfiguration() throws InvalidConfigurationException {  if (previewTable.getModel().getRowCount() == 0) {    throw new InvalidConfigurationException();  }  if (configuration.hasHeaderRow() && configuration.getHeaderRow() > configuration.getStartingRow()) {    notifyHeaderRowBehindStartRow();    throw new InvalidConfigurationException();  } else   if (keepBubble) {    throw new InvalidConfigurationException();  } else {    killCurrentErrorBubbleWindow();  }}  }
class C{  public T caseN4EnumLiteral(N4EnumLiteral object){  return null;}  }
class C{  public ObjectStack(int blocksize){  super(blocksize);}  }
class C{  protected void compact(){  if (lastSegmentCrossingList != null && !lastSegmentCrossingList.isEmpty()) {    crossings.addAll(lastSegmentCrossingList);    lastSegmentCrossingList.clear();    lastSegmentCrossingList=null;  }  Object[] bc=crossings.toArray();  crossings=new ArrayList(bc.length);  BoundaryCrossing current, previous=null;  for (int i=0; i < bc.length; i++) {    current=(BoundaryCrossing)bc[i];    if (previous != null && previous.geo.distance(current.geo) == 0.0) {      if (previous.out != null)       previous.in=current.in;      if (current.out != null) {        previous.out=current.out;      }      continue;    } else {      if (current.out != null) {        current.in=null;      }    }    crossings.add(current);    previous=current;  }}  }
class C{  protected void undeploy(HttpServletResponse response,String contextPath) throws IOException {  boolean error=false;  if (!contextPath.startsWith("/")) {    sendError(response,"Path must start with a forward slash");    error=true;  }  Object handler=getContextHandler(contextPath);  if (handler == null) {    sendError(response,"Could not find handler for the context " + contextPath);    error=true;  }  try {    ((ContextHandler)handler).stop();  } catch (  Exception e) {    sendError(response,"Could not stop context handler " + contextPath);    Log.getLogger(this.getClass()).warn(e);    error=true;  }  if (error) {    return;  } else {    chc.removeHandler((ContextHandler)handler);    String webAppLocation=getWebAppLocation((WebAppContext)handler);    File webAppFile=new File(webAppLocation);    if (!webAppFile.exists()) {      sendError(response,"Can't find a valid file for the context " + contextPath);    } else     if (!webAppFile.getPath().startsWith(webAppDirectory.getPath())) {      sendMessage(response,"Webapp with context " + contextPath + " has been undeployed but not removed from the filesystem");    } else {      boolean deleted=false;      if (webAppFile.isFile()) {        deleted=webAppFile.delete();      } else {        deleteDirectory(webAppFile);        deleted=!webAppFile.exists();      }      if (deleted) {        sendMessage(response,"Webapp with context " + contextPath + " has been undeployed and removed from the filesystem");      } else {        sendError(response,"Webapp with context " + contextPath + " has been undeployed but it couldn't be removed from the filesystem");      }    }  }}  }
class C{  public static void composeThroughMask(Raster src,WritableRaster dst,Raster sel){  int x=src.getMinX();  int y=src.getMinY();  int w=src.getWidth();  int h=src.getHeight();  int srcRGB[]=null;  int selRGB[]=null;  int dstRGB[]=null;  for (int i=0; i < h; i++) {    srcRGB=src.getPixels(x,y,w,1,srcRGB);    selRGB=sel.getPixels(x,y,w,1,selRGB);    dstRGB=dst.getPixels(x,y,w,1,dstRGB);    int k=x;    for (int j=0; j < w; j++) {      int sr=srcRGB[k];      int dir=dstRGB[k];      int sg=srcRGB[k + 1];      int dig=dstRGB[k + 1];      int sb=srcRGB[k + 2];      int dib=dstRGB[k + 2];      int sa=srcRGB[k + 3];      int dia=dstRGB[k + 3];      float a=selRGB[k + 3] / 255f;      float ac=1 - a;      dstRGB[k]=(int)(a * sr + ac * dir);      dstRGB[k + 1]=(int)(a * sg + ac * dig);      dstRGB[k + 2]=(int)(a * sb + ac * dib);      dstRGB[k + 3]=(int)(a * sa + ac * dia);      k+=4;    }    dst.setPixels(x,y,w,1,dstRGB);    y++;  }}  }
class C{  private boolean isClusterStable(){  return helper.isClusterStable();}  }
class C{  public ValueExp apply(ObjectName name) throws BadStringOperationException, BadBinaryOpValueExpException, BadAttributeValueExpException, InvalidApplicationException {  ValueExp val1=exp1.apply(name);  ValueExp val2=exp2.apply(name);  String sval1;  String sval2;  double dval1;  double dval2;  long lval1;  long lval2;  boolean numeric=val1 instanceof NumericValueExp;  if (numeric) {    if (((NumericValueExp)val1).isLong()) {      lval1=((NumericValueExp)val1).longValue();      lval2=((NumericValueExp)val2).longValue();switch (op) {case Query.PLUS:        return Query.value(lval1 + lval2);case Query.TIMES:      return Query.value(lval1 * lval2);case Query.MINUS:    return Query.value(lval1 - lval2);case Query.DIV:  return Query.value(lval1 / lval2);}} else {dval1=((NumericValueExp)val1).doubleValue();dval2=((NumericValueExp)val2).doubleValue();switch (op) {case Query.PLUS:return Query.value(dval1 + dval2);case Query.TIMES:return Query.value(dval1 * dval2);case Query.MINUS:return Query.value(dval1 - dval2);case Query.DIV:return Query.value(dval1 / dval2);}}} else {sval1=((StringValueExp)val1).getValue();sval2=((StringValueExp)val2).getValue();switch (op) {case Query.PLUS:return new StringValueExp(sval1 + sval2);default :throw new BadStringOperationException(opString());}}throw new BadBinaryOpValueExpException(this);}  }
class C{  public void start(String tag,String[] names,String[] values,int nattr){  tag(tag,names,values,nattr,false);}  }
class C{  public NodeList selectNodeList(Node contextNode,String str,Node namespaceNode) throws TransformerException {  XObject list=eval(contextNode,str,namespaceNode);  return list.nodelist();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static String htmlify(String text){  String emojifiedStr=emojify(text);  return htmlifyHelper(emojifiedStr,false,false);}  }
class C{  public void editButtonActionPerformed(){  curNode.setUserAddress(jmri.util.StringUtil.bytesFromHexString(nodeAddrField.getText()));  curNode.setGlobalAddress(jmri.util.StringUtil.bytesFromHexString(nodeAddr64Field.getText()));  this.dispatchEvent(new WindowEvent(this,WindowEvent.WINDOW_CLOSING));}  }
class C{  private boolean parseFunction(){  if (!(curToken instanceof Id) || isELReserved(curToken.toString())) {    return false;  }  String s1=null;  String s2=curToken.toString();  int mark=getIndex();  if (hasNext()) {    boolean nodotSeen=prevToken == null || (prevToken.toChar() != '.');    Token t=nextToken();    if (t.toChar() == ':') {      if (hasNext()) {        Token t2=nextToken();        if (t2 instanceof Id) {          s1=s2;          s2=t2.toString();          if (hasNext()) {            t=nextToken();          }        }      }    }    if (t.toChar() == '(' && nodotSeen) {      ELexpr.add(new ELNode.Function(s1,s2));      return true;    }  }  setIndex(mark);  return false;}  }
class C{  public void remove(String name){  if (impl.formalArguments == null) {    if (impl.hasFormalArgs) {      throw new IllegalArgumentException("no such attribute: " + name);    }    return;  }  FormalArgument arg=impl.formalArguments.get(name);  if (arg == null) {    throw new IllegalArgumentException("no such attribute: " + name);  }  locals[arg.index]=EMPTY_ATTR;}  }
class C{  boolean isGenOp(SyntaxTreeNode tn){  int kind=tn.getKind();  if (kind == N_GenPrefixOp || kind == N_GenNonExpPrefixOp || kind == N_GenInfixOp || kind == N_GenPostfixOp || kind == N_FcnAppl)   return true; else   return false;}  }
class C{  public static HttpClient createClient(final SolrParams params,ClientConnectionManager cm){  final ModifiableSolrParams config=new ModifiableSolrParams(params);  if (logger.isDebugEnabled()) {    logger.debug("Creating new http client, config:" + config);  }  final DefaultHttpClient httpClient=new DefaultHttpClient(cm);  configureClient(httpClient,config);  return httpClient;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public static void main(String[] args) throws Exception {  GUILauncher.launchApplication(GUIChooser.class,"MEKA GUIChooser",false,new String[0]);}  }
class C{  public static int[] makeBitSet(int max){  int size=(max + 0x1f) >> 5;  return new int[size];}  }
class C{  private void validateVdcRoleAssignmentChange(VirtualDataCenter vdc){  StorageOSUser user=(StorageOSUser)sc.getUserPrincipal();  if (_localUsers.keySet().contains(user.getName())) {    return;  }  if (!user.getRoles().contains(Role.SECURITY_ADMIN.name())) {    throw APIException.forbidden.insufficientPermissionsForUser(user.getName());  }  StorageOSUser tempUser=user.clone();  tempUser.setRoles(new StringSet());  _permissionsHelper.populateZoneRoles(tempUser,vdc);  _log.info(tempUser.toString());  if (!tempUser.getRoles().contains(Role.SECURITY_ADMIN.name())) {    throw APIException.forbidden.securityAdminCantDropHisOwnSecurityAdminRole(user.getName());  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Playlist p=getPlaylist(stack);  return p == null ? null : p.getSegments();}  }
class C{  public void endUnprotected(int depth){  for (int i=0; i < depth; i++)   lock.acquire();}  }
class C{  public void reset(){  mRecordable=mSourceRecordable;  setIdentifier(mSource);  mPriority=Priority.DEFAULT_PRIORITY;  List<MetadataType> toRemove=new ArrayList<>();  for (  MetadataType type : mMetadata.keySet()) {    Metadata metadata=mMetadata.get(type);    if (metadata != null) {      if (metadata.isTemporal()) {        toRemove.add(type);      } else {        processMetadata(metadata);      }    }  }  for (  MetadataType type : toRemove) {    mMetadata.remove(type);  }  mUpdated=true;}  }
class C{  public Iterator<String> fileNameIterator(){  return resultList.iterator();}  }
class C{  @Override public String write(List<EvaluationStatistics> stats){  log("Writing " + stats.size() + " statistics to: "+ m_File);  try {    SerializationHelper.write(m_File.getAbsolutePath(),stats);    return null;  } catch (  Exception e) {    return handleException("Failed to write statistics to: " + m_File,e);  }}  }
class C{  public Builder(){}  }
class C{  public Token(int kind){  this(kind,null);}  }
class C{  public static void copyMutationMappingFile(File originDir,File destinationDir) throws IOException {  final File originFile=new File(originDir,MUTATION_MAP_FILE);  if (originFile.exists()) {    final SdfId id=readMutationMap(originDir);    writeMutationMappingFile(destinationDir,id);  }}  }
class C{  public String associatorTipText(){  return "The base associator to be used.";}  }
class C{  public Analyzer includeSpacing(){  includeSpacing=true;  return this;}  }
class C{  public TransformVariablesConditioning(BBOBFunction function,double alpha){  super(function);  this.alpha=alpha;}  }
class C{  @Override public boolean equals(Object other){  return sameClassAs(other) && equalsTo(getClass().cast(other));}  }
class C{  public NbtTagCompound(){  super("");  this.tags=new HashMap<>(8);}  }
class C{  static public PrefixCoder newCoder(final BitVector shortestCodeWord,final int[] length,final int[] symbol){  if (shortestCodeWord == null)   throw new IllegalArgumentException();  if (shortestCodeWord.size() == 0)   throw new IllegalArgumentException();  if (length == null)   throw new IllegalArgumentException();  if (length.length == 0)   throw new IllegalArgumentException();  if (symbol == null)   throw new IllegalArgumentException();  if (symbol.length == 0)   throw new IllegalArgumentException();  final int size=length.length;  int s=symbol[0];  int l=length[0];  long value=0;  BitVector v;  final BitVector[] codeWord=new BitVector[size];  final long[] longCodeWord=new long[size];  codeWord[s]=LongArrayBitVector.getInstance().length(l);  for (int i=1; i < size; i++) {    s=symbol[i];    if (length[i] == l)     value++; else {      value++;      value<<=length[i] - l;      if (ASSERTS)       assert length[i] > l;      l=length[i];    }    v=LongArrayBitVector.getInstance().length(l);    for (int j=l; j-- != 0; )     if ((1L << j & value) != 0)     v.set(l - 1 - j);    codeWord[s]=v;    longCodeWord[s]=value;  }  return new Fast64CodeWordCoder(codeWord,longCodeWord);}  }
class C{  public void dispose(){  m_threadPanel.dispose();  m_synchronizer.removeListener(m_internalSynchronizerListener);  m_synchronizer.dispose();}  }
class C{  public final void testAddAllConstraintsFromCollection(){  Constraint<CharSequence> constraint1=Constraints.containsNumber();  Constraint<CharSequence> constraint2=Constraints.containsLetter();  Collection<Constraint<CharSequence>> constraints1=new LinkedList<>();  constraints1.add(constraint1);  constraints1.add(constraint2);  PasswordEditText passwordEditText=new PasswordEditText(getContext());  passwordEditText.addAllConstraints(constraints1);  passwordEditText.addAllConstraints(constraints1);  Collection<Constraint<CharSequence>> constraints2=passwordEditText.getConstraints();  assertEquals(constraints1.size(),constraints2.size());  Iterator<Constraint<CharSequence>> iterator=constraints2.iterator();  assertEquals(constraint1,iterator.next());  assertEquals(constraint2,iterator.next());}  }
class C{  @Override public void removeInstanceSnapshot(MachineSource machineSource) throws SnapshotException {  throw new SnapshotException("Snapshot feature is unsupported for ssh machine implementation");}  }
class C{  public BufferOverflowException(){}  }
class C{  static void generateMemberAccess(Tree.StaticMemberOrTypeExpression expr,GenerateCallback callback,String lhs,final GenerateJsVisitor gen){  Declaration decl=expr.getDeclaration();  boolean paren=false;  String plainName=null;  if (decl == null && gen.isInDynamicBlock()) {    plainName=expr.getIdentifier().getText();  } else   if (TypeUtils.isNativeJs(decl)) {    plainName=decl.getName();  }  if (plainName != null) {    if ((lhs != null) && (lhs.length() > 0)) {      gen.out(lhs,".");    }    gen.out(plainName,"=");  } else {    boolean protoCall=gen.opts.isOptimize() && (gen.getSuperMemberScope(expr) != null);    if (gen.accessDirectly(decl) && !(protoCall && AttributeGenerator.defineAsProperty(decl))) {      gen.out(gen.memberAccessBase(expr,decl,true,lhs),"=");    } else {      gen.out(gen.memberAccessBase(expr,decl,true,lhs),protoCall ? ".call(this," : "(");      paren=true;    }  }  callback.generateValue();  if (paren) {    gen.out(")");  }}  }
class C{  public void onThreadWaitTimeout(SceKernelThreadInfo thread){  if (removeWaitingThread(thread)) {    thread.cpuContext._v0=ERROR_KERNEL_WAIT_TIMEOUT;  } else {    log.warn("Sema deleted while we were waiting for it! (timeout expired)");    thread.cpuContext._v0=ERROR_KERNEL_WAIT_DELETE;  }}  }
class C{  public int top() throws java.lang.Exception {  if (vstack.empty())   throw new Exception("Internal parser error: top() called on empty virtual stack");  return ((Integer)vstack.peek()).intValue();}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws org.xml.sax.SAXException {  ElemAttributeSet eat=new ElemAttributeSet();  eat.setLocaterInfo(handler.getLocator());  try {    eat.setPrefixes(handler.getNamespaceSupport());  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }  eat.setDOMBackPointer(handler.getOriginatingNode());  setPropertiesFromAttributes(handler,rawName,attributes,eat);  handler.getStylesheet().setAttributeSet(eat);  ElemTemplateElement parent=handler.getElemTemplateElement();  parent.appendChild(eat);  handler.pushElemTemplateElement(eat);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (stack.getUIMgr() != null && stack.getUIMgr().getUIClientType() == UIClient.REMOTE_UI && stack.getUIMgr().getRootPanel().getRenderEngine() instanceof MiniClientSageRenderer) {    return ((MiniClientSageRenderer)stack.getUIMgr().getRootPanel().getRenderEngine()).supportsAdvancedDeinterlacing() ? Boolean.TRUE : Boolean.FALSE;  }  return Boolean.FALSE;}  }
class C{  public void encode(DerOutputStream out) throws IOException {  DerOutputStream tmp=new DerOutputStream();  policyIdentifier.encode(tmp);  if (!policyQualifiers.isEmpty()) {    DerOutputStream tmp2=new DerOutputStream();    for (    PolicyQualifierInfo pq : policyQualifiers) {      tmp2.write(pq.getEncoded());    }    tmp.write(DerValue.tag_Sequence,tmp2);  }  out.write(DerValue.tag_Sequence,tmp);}  }
class C{  public CF4(){  this(10);}  }
class C{  public static String encodeString(String s){  return new String(encode(s.getBytes()));}  }
class C{  private void create1SignalOn3WayCrossing(SignalSystemsData ss){  SignalSystemsDataFactory fac=ss.getFactory();  SignalSystemData system=fac.createSignalSystemData(Id.create(1,SignalSystem.class));  ss.addSignalSystemData(system);  SignalData signal=fac.createSignalData(Id.create(23,Signal.class));  system.addSignalData(signal);  signal.setLinkId(Id.create(23,Link.class));  signal=fac.createSignalData(Id.create(43,Signal.class));  system.addSignalData(signal);  signal.setLinkId(Id.create(43,Link.class));  signal=fac.createSignalData(Id.create(13,Signal.class));  system.addSignalData(signal);  signal.setLinkId(Id.create(13,Link.class));}  }
class C{  public static boolean hasIndirectType(Resource instance,Resource expectedType){  if (expectedType.getModel() == null) {    expectedType=expectedType.inModel(instance.getModel());  }  StmtIterator it=instance.listProperties(RDF.type);  while (it.hasNext()) {    Statement s=it.next();    if (s.getObject().isResource()) {      Resource actualType=s.getResource();      if (actualType.equals(expectedType) || JenaUtil.hasSuperClass(actualType,expectedType)) {        it.close();        return true;      }    }  }  return false;}  }
class C{  public CharBuffer insert(int index,String string){  if (string == null) {    string="null";  }  int length=length();  if (index < 0 || length < index)   throw new StringIndexOutOfBoundsException();  int len=string.length();  ensureCapacity(len + length);  int tail=length() - index;  char[] buffer=buffer();  for (int i=tail - 1; i >= 0; i--)   buffer[index + len + i]=buffer[index + i];  string.getChars(0,len,buffer,index);  length(length + len);  return this;}  }
class C{  void startOperation(int threadId,LoadedClass loadedClass,long time,Operation.Type type){  Operation o=new Operation(this,loadedClass,time,operationCount++,type);  operations.add(o);  LinkedList<Operation> stack=stacks.get(threadId);  if (stack == null) {    stack=new LinkedList<Operation>();    stacks.put(threadId,stack);  }  if (!stack.isEmpty()) {    stack.getLast().subops.add(o);  }  stack.add(o);}  }
class C{  public final RenderBuffer putLong(long x){  unsafe.putLong(curAddress,x);  curAddress+=SIZEOF_LONG;  return this;}  }
class C{  @Override protected void releasePendingBatch(){  if (this.pendingPreparedStatement != null) {    if (logger.isDebugEnabled()) {      logger.debug("Releasing pending batch variables");    }    try {      this.pendingPreparedStatement.close();    } catch (    SQLException e) {    } finally {      this.pendingPreparedStatement=null;      this.pendingRowChanges=null;      this.pendingSqlStatement=null;    }  }}  }
class C{  public T caseNamedElement(NamedElement object){  return null;}  }
class C{  public static PGPPublicKey loadPublicKeyBytes(byte[] data){  try {    return lookupPublicSubkey(new BcPGPPublicKeyRing(data),KeyRequirement.ENCRYPT).get();  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  private Integer[] createVertices(int count){  Integer[] v=new Integer[count];  for (int i=0; i < count; i++) {    v[i]=new Integer(i);    graph.addVertex(v[i]);  }  return v;}  }
class C{  public static final long total(){  return runtime.totalMemory();}  }
class C{  public ComplexBuffer(float[] samples){  super(samples);}  }
class C{  protected static void midPointStep(double fracdim,int size,int delta,int elevationMap[][],int step,boolean newBorder){  int d1, d2;  int delta5;  int x, y;  d1=size >> (step - 1);  d2=d1 / 2;  fracdim=(1.0 - fracdim) / 2.0;  delta=(int)(delta * Math.exp(-0.6931 * fracdim * (2.0 * step - 1)));  delta5=delta << 5;  x=d2;  do {    y=d2;    do {      elevationMap[x][y]=middleValue(elevationMap[x + d2][y + d2],elevationMap[x + d2][y - d2],elevationMap[x - d2][y + d2],elevationMap[x - d2][y - d2],delta5);      y+=d1;    } while (y < size - d2);    x+=d1;  } while (x < size - d2);  delta=(int)(delta * Math.exp(-0.6931 * fracdim));  delta5=delta << 5;  if (newBorder) {    x=d2;    do {      y=x;      elevationMap[0][x]=middleValue(elevationMap[0][x + d2],elevationMap[0][x - d2],elevationMap[d2][x],delta5);      elevationMap[size][x]=middleValue(elevationMap[size - 1][x + d2],elevationMap[size - 1][x - d2],elevationMap[size - d2 - 1][x],delta5);      y=0;      elevationMap[x][0]=middleValue(elevationMap[x + d2][0],elevationMap[x - d2][0],elevationMap[x][d2],delta5);      elevationMap[x][size]=middleValue(elevationMap[x + d2][size - 1],elevationMap[x - d2][size - 1],elevationMap[x][size - d2 - 1],delta5);      x+=d1;    } while (x < size - d2);  }  diagMid(new Point(d2,d1),d1,d2,delta5,size,elevationMap);  diagMid(new Point(d1,d2),d1,d2,delta5,size,elevationMap);}  }
class C{  @Override public void onRemoveConversation(String target){  int position=pagerAdapter.getPositionByName(target);  if (position != -1) {    pagerAdapter.removeConversation(position);  }}  }
class C{  public void releaseTargetVersionLock(){  try {    if (_targetLock != null) {      _targetLock.release();    }  } catch (  Exception e) {    _log.error("Can not release target version lock",e);  }}  }
class C{  @Override protected void updateFigure(PositionableShape p){  PositionableRectangle pos=(PositionableRectangle)p;  p._width=getInteger(_widthText,p._width);  p._height=getInteger(_heightText,p._height);  pos.makeShape();  setPositionableParams(pos);}  }
class C{  @Override public void printStackTrace(PrintWriter s){  if (s != null) {    super.printStackTrace(s);    SQLException next=getNextException();    for (int i=0; i < 100 && next != null; i++) {      s.println(next.toString());      next=next.getNextException();    }    if (next != null) {      s.println("(truncated)");    }  }}  }
