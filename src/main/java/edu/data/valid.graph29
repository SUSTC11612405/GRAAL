class C{  static ReplayPromise<Void> allReplay(final Duration timeout,final Promise<?>... promises){  return allReplay(timeout,System.currentTimeMillis(),promises);}  }
class C{  public static VirtualListViewResponseControl newControl(final int targetPosition,final int contentCount,final ResultCode result,final ByteString contextID){  Reject.ifNull(result);  Reject.ifFalse(targetPosition >= 0,"targetPosition is less than 0");  Reject.ifFalse(contentCount >= 0,"contentCount is less than 0");  return new VirtualListViewResponseControl(false,targetPosition,contentCount,result,contextID);}  }
class C{  public boolean isCombining(){  return (glyphType & 0x3) == COMBINING;}  }
class C{  protected KeyPairGenerator(String algorithm){  this.algorithm=algorithm;}  }
class C{  public Observable<Long> activeCountObservable(String type){  io.vertx.rx.java.ObservableFuture<Long> handler=io.vertx.rx.java.RxHelper.observableFuture();  activeCount(type,handler.toHandler());  return handler;}  }
class C{  static public void assertEquals(byte expected,byte actual){  assertEquals(null,expected,actual);}  }
class C{  protected void tearDown(){  objArray=null;  objArray2=null;  hm=null;}  }
class C{  public int next(){  _currentNode=(_currentNode == DTM.NULL) ? DTM.NULL : _nextsib2(_currentNode);  return returnNode(makeNodeHandle(_currentNode));}  }
class C{  public FSWMLPostConsumerHandler(HttpServletRequest request,HttpServletResponse response,IDPDescriptorType idpDescriptor,String idpEntityId,FSAuthnRequest authnRequest,boolean doFederate,String relayState){  super(request,response,idpDescriptor,idpEntityId,authnRequest,doFederate,relayState);}  }
class C{  public double noise(double x,double y,double z,double w,double frequency,double amplitude,boolean normalized){  double result=0;  double amp=1;  double freq=1;  double max=0;  x*=xScale;  y*=yScale;  z*=zScale;  w*=wScale;  for (  NoiseGenerator octave : octaves) {    result+=((SimplexNoiseGenerator)octave).noise(x * freq,y * freq,z * freq,w * freq) * amp;    max+=amp;    freq*=frequency;    amp*=amplitude;  }  if (normalized) {    result/=max;  }  return result;}  }
class C{  public boolean scanData(String delimiter,XMLStringBuffer buffer) throws IOException {  boolean done=false;  int delimLen=delimiter.length();  char charAt0=delimiter.charAt(0);  boolean external=fCurrentEntity.isExternal();  do {    if (fCurrentEntity.position == fCurrentEntity.count) {      load(0,true);    } else     if (fCurrentEntity.position >= fCurrentEntity.count - delimLen) {      System.arraycopy(fCurrentEntity.ch,fCurrentEntity.position,fCurrentEntity.ch,0,fCurrentEntity.count - fCurrentEntity.position);      load(fCurrentEntity.count - fCurrentEntity.position,false);      fCurrentEntity.position=0;    }    if (fCurrentEntity.position >= fCurrentEntity.count - delimLen) {      int length=fCurrentEntity.count - fCurrentEntity.position;      buffer.append(fCurrentEntity.ch,fCurrentEntity.position,length);      fCurrentEntity.position=fCurrentEntity.count;      load(0,true);      return false;    }    int offset=fCurrentEntity.position;    int c=fCurrentEntity.ch[offset];    int newlines=0;    if (c == '\n' || (c == '\r' && external)) {      do {        c=fCurrentEntity.ch[fCurrentEntity.position++];        if (c == '\r' && external) {          newlines++;          if (fCurrentEntity.position == fCurrentEntity.count) {            offset=0;            fCurrentEntity.position=newlines;            if (load(newlines,false)) {              break;            }          }          if (fCurrentEntity.ch[fCurrentEntity.position] == '\n') {            fCurrentEntity.position++;            offset++;          } else {            newlines++;          }        } else         if (c == '\n') {          newlines++;          if (fCurrentEntity.position == fCurrentEntity.count) {            offset=0;            fCurrentEntity.position=newlines;            fCurrentEntity.count=newlines;            if (load(newlines,false)) {              break;            }          }        } else {          fCurrentEntity.position--;          break;        }      } while (fCurrentEntity.position < fCurrentEntity.count - 1);      for (int i=offset; i < fCurrentEntity.position; i++) {        fCurrentEntity.ch[i]='\n';      }      int length=fCurrentEntity.position - offset;      if (fCurrentEntity.position == fCurrentEntity.count - 1) {        buffer.append(fCurrentEntity.ch,offset,length);        return true;      }    }    OUTER:     while (fCurrentEntity.position < fCurrentEntity.count) {      c=fCurrentEntity.ch[fCurrentEntity.position++];      if (c == charAt0) {        int delimOffset=fCurrentEntity.position - 1;        for (int i=1; i < delimLen; i++) {          if (fCurrentEntity.position == fCurrentEntity.count) {            fCurrentEntity.position-=i;            break OUTER;          }          c=fCurrentEntity.ch[fCurrentEntity.position++];          if (delimiter.charAt(i) != c) {            fCurrentEntity.position--;            break;          }        }        if (fCurrentEntity.position == delimOffset + delimLen) {          done=true;          break;        }      } else       if (c == '\n' || (external && c == '\r')) {        fCurrentEntity.position--;        break;      } else       if (XMLChar.isInvalid(c)) {        fCurrentEntity.position--;        int length=fCurrentEntity.position - offset;        buffer.append(fCurrentEntity.ch,offset,length);        return true;      }    }    int length=fCurrentEntity.position - offset;    if (done) {      length-=delimLen;    }    buffer.append(fCurrentEntity.ch,offset,length);  } while (!done);  return !done;}  }
class C{  public IdentityMembershipConditionAddViewBean(){  super("IdentityMembershipConditionAdd",DEFAULT_DISPLAY_URL);}  }
class C{  public TRANSACTION_MODE(int minor,CompletionStatus completed){  this("",minor,completed);}  }
class C{  public AuthorizationCode(JsonValue token) throws InvalidGrantException {  super(token);  if (!OAUTH_CODE_TYPE.equals(getTokenName())) {    throw new InvalidGrantException("Token is not an authorization code token: " + getTokenId());  }}  }
class C{  public <T>void publish(String channel,T message){  call(null);}  }
class C{  public DragSourceDropEvent(DragSourceContext dsc){  super(dsc);  dropSuccess=false;}  }
class C{  public static void invalidateSession(Object session,HttpServletRequest request,HttpServletResponse response,String protocol) throws SessionException {  SessionProvider provider=SessionManager.getProvider();  if (!isMultipleProtocolSession(session,protocol)) {    provider.invalidateSession(session,request,response);  } else {    removeFederationProtocol(session,protocol);  }}  }
class C{  public GetComplete createGetComplete() throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.GET_COMPLETE);  if (obj == null) {    return new GetCompleteImpl();  } else {    return (GetComplete)obj;  }}  }
class C{  public void removeChangeListener(ChangeListener l){  listenerList.remove(ChangeListener.class,l);}  }
class C{  public static boolean verifySLORequest(LogoutRequest sloRequest,String realm,String remoteEntity,String hostEntity,String hostEntityRole) throws SAML2Exception, SessionException {  String method="verifySLORequest : ";  boolean needVerifySignature=SAML2Utils.getWantLogoutRequestSigned(realm,hostEntity,hostEntityRole);  if (needVerifySignature == false) {    if (debug.messageEnabled()) {      debug.message(method + "SLORequest doesn't need to be verified.");    }    return true;  }  if (debug.messageEnabled()) {    debug.message(method + "realm is : " + realm);    debug.message(method + "remoteEntity is : " + remoteEntity);    debug.message(method + "Host Entity role is : " + hostEntityRole);  }  boolean valid=false;  Set<X509Certificate> signingCerts;  if (hostEntityRole.equalsIgnoreCase(SAML2Constants.IDP_ROLE)) {    SPSSODescriptorElement spSSODesc=metaManager.getSPSSODescriptor(realm,remoteEntity);    signingCerts=KeyUtil.getVerificationCerts(spSSODesc,remoteEntity,SAML2Constants.SP_ROLE);  } else {    IDPSSODescriptorElement idpSSODesc=metaManager.getIDPSSODescriptor(realm,remoteEntity);    signingCerts=KeyUtil.getVerificationCerts(idpSSODesc,remoteEntity,SAML2Constants.IDP_ROLE);  }  if (!signingCerts.isEmpty()) {    valid=sloRequest.isSignatureValid(signingCerts);    if (debug.messageEnabled()) {      debug.message(method + "Signature is : " + valid);    }  } else {    debug.error("Incorrect configuration for Signing Certificate.");    throw new SAML2Exception(SAML2Utils.bundle.getString("metaDataError"));  }  return valid;}  }
class C{  private CommandHandlerEnum(final Command command1){  this.command=command1;}  }
class C{  public int length(){  return mText.length - mGapLength;}  }
class C{  public static MatchedValuesRequestControl newControl(final boolean isCritical,final Collection<Filter> filters){  Reject.ifNull(filters);  Reject.ifFalse(filters.size() > 0,"filters is empty");  List<Filter> copyOfFilters;  if (filters.size() == 1) {    copyOfFilters=Collections.singletonList(validateFilter(filters.iterator().next()));  } else {    copyOfFilters=new ArrayList<>(filters.size());    for (    final Filter filter : filters) {      copyOfFilters.add(validateFilter(filter));    }    copyOfFilters=Collections.unmodifiableList(copyOfFilters);  }  return new MatchedValuesRequestControl(isCritical,copyOfFilters);}  }
class C{  public CodeStream putByte(final int b){  ensureCapacity(1);  _data[_length++]=(byte)(b & 0xFF);  return this;}  }
class C{  public MenuBuilder(ConsoleApplication app){  this.app=app;}  }
class C{  @Override public EnumEvalResult evaluate(AciEvalContext evalCtx){  EnumEvalResult matched=evalCtx.hasAuthenticationMethod(authMethod,saslMech);  return matched.getRet(type,false);}  }
class C{  protected List<Record> fetchRecords() throws IOException {  List<Record> records;  if (recordHandler.getFinishedBytes() != null) {    records=recordHandler.parseRecords(recordHandler.getFinishedBytes());    recordHandler.setFinishedBytes(null);  } else {    byte[] rawResponse=transportHandler.fetchData();    while ((records=recordHandler.parseRecords(rawResponse)) == null) {      rawResponse=ArrayConverter.concatenate(rawResponse,transportHandler.fetchData());    }  }  return records;}  }
class C{  public boolean deleteTrack(Track track){synchronized (tracks) {    return tracks.removeElement(track);  }}  }
class C{  public void test_PasswordCallback(){  String prompt="promptTest";  try {    PasswordCallback pc=new PasswordCallback(prompt,true);    assertNotNull("Null object returned",pc);    assertEquals(prompt,pc.getPrompt());    assertEquals(true,pc.isEchoOn());  } catch (  Exception e) {    fail("Unexpected exception: " + e);  }  try {    PasswordCallback pc=new PasswordCallback(prompt,false);    assertNotNull("Null object returned",pc);    assertEquals(prompt,pc.getPrompt());    assertEquals(false,pc.isEchoOn());  } catch (  Exception e) {    fail("Unexpected exception: " + e);  }  try {    PasswordCallback pc=new PasswordCallback(null,true);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException npe) {  }  try {    PasswordCallback pc=new PasswordCallback("",true);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException npe) {  }}  }
class C{  @Override public void fireballHit(){  runDeathSeq=fireballHit=true;  parent.getChildren().remove(spriteBoundsArray[5]);  spriteBoundsArray[5]=null;  spriteFrame.setImage(playerStates.get(3));  main.Main.enemyCount++;}  }
class C{  public boolean isEncrypted(){  return cipherInfo.encrypt;}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiViewportUI();  return MultiLookAndFeel.createUIs(mui,((MultiViewportUI)mui).uis,a);}  }
class C{  int readEntry(int position,int offset) throws ArrayIndexOutOfBoundsException {{    if (offset >= slotsize)     throw new ArrayIndexOutOfBoundsException(XMLMessages.createXMLMessage(XMLErrorResources.ER_OFFSET_BIGGER_THAN_SLOT,null));    position*=slotsize;    int chunkpos=position >> lowbits;    int slotpos=position & lowmask;    int[] chunk=chunks.elementAt(chunkpos);    return chunk[slotpos + offset];  }}  }
class C{  final int compare(MutableBigInteger b){  int blen=b.intLen;  if (intLen < blen)   return -1;  if (intLen > blen)   return 1;  int[] bval=b.value;  for (int i=offset, j=b.offset; i < intLen + offset; i++, j++) {    int b1=value[i] + 0x80000000;    int b2=bval[j] + 0x80000000;    if (b1 < b2)     return -1;    if (b1 > b2)     return 1;  }  return 0;}  }
class C{  public boolean equals(Object other){  if (!this.getClass().equals(other.getClass()))   return false; else {    TCPMessageChannel that=(TCPMessageChannel)other;    if (this.mySock != that.mySock)     return false; else     return true;  }}  }
class C{  private DelayedConfigAddListener registerAddListenerForTestParentDelayed(ConfigurationRepository configRepository,ServerManagedObject<RootCfg> root,ConfigurationAddListener<TestParentCfg> parentListener) throws Exception {  root.registerAddListener(TestCfg.getTestOneToManyParentRelationDefinition(),parentListener);  ArgumentCaptor<DelayedConfigAddListener> registered=ArgumentCaptor.forClass(DelayedConfigAddListener.class);  verify(configRepository).registerAddListener(eq(ROOT_CONFIG_DN),registered.capture());  return registered.getValue();}  }
class C{  public String toXML(){  StringBuilder sb=new StringBuilder(300);  sb.append("<").append(POLICY_DECISION).append(">").append(PolicyUtils.CRLF);  if ((responseAttributes != null) && (responseAttributes != Collections.EMPTY_MAP)) {    sb.append("<").append(RESPONSE_ATTRIBUTES);    sb.append(">").append(PolicyUtils.CRLF);    sb.append(PolicyUtils.mapToXMLString(responseAttributes));    sb.append("<").append("/").append(RESPONSE_ATTRIBUTES);    sb.append(">").append(PolicyUtils.CRLF);  }  Iterator actionNames=actionDecisions.keySet().iterator();  while (actionNames.hasNext()) {    String actionName=(String)actionNames.next();    ActionDecision actionDecision=(ActionDecision)actionDecisions.get(actionName);    sb.append(actionDecision.toXML());  }  if (responseDecisions != null) {    sb.append("<").append(RESPONSE_DECISIONS).append(">").append(PolicyUtils.CRLF);    sb.append(PolicyUtils.mapToXMLString(responseDecisions));    sb.append("</").append(RESPONSE_DECISIONS).append(">").append(PolicyUtils.CRLF);  }  sb.append("</").append(POLICY_DECISION).append(">");  sb.append(PolicyUtils.CRLF);  return sb.toString();}  }
class C{  public static boolean processKeyBindings(KeyEvent event){  if (event != null) {    if (event.isConsumed()) {      return false;    }    Component component=event.getComponent();    boolean pressed=(event.getID() == KeyEvent.KEY_PRESSED);    if (!isValidKeyEventForKeyBindings(event)) {      return false;    }    while (component != null) {      if (component instanceof JComponent) {        return ((JComponent)component).processKeyBindings(event,pressed);      }      if ((component instanceof Applet) || (component instanceof Window)) {        return JComponent.processKeyBindingsForAllComponents(event,(Container)component,pressed);      }      component=component.getParent();    }  }  return false;}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.AltOElement createAltOElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.AltOElementImpl();}  }
class C{  private boolean toRetransmitFinalResponse(int T2){  if (--retransmissionTicksLeft == 0) {    if (2 * prevRetransmissionTicks <= T2)     this.retransmissionTicksLeft=2 * prevRetransmissionTicks; else     this.retransmissionTicksLeft=prevRetransmissionTicks;    this.prevRetransmissionTicks=retransmissionTicksLeft;    return true;  } else   return false;}  }
class C{  private void checkForCorrectNumbersOfConnectedDSs(int[][] possibleExpectedDSsNumbers,String msg) throws Exception {  int secTimeout=30;  int nSec=0;  int[] finalDSsNumbers=new int[possibleExpectedDSsNumbers[0].length];  while (true) {    for (    int[] expectedDSsNumbers : possibleExpectedDSsNumbers) {      int nOk=0;      int nRSs=0;      for (int j=0; j < finalDSsNumbers.length; j++) {        int expectedDSNumber=expectedDSsNumbers[j];        if (expectedDSNumber != -1) {          nRSs++;          int connectedDSs=getNbDSsConnectedToRS(j);          if (connectedDSs == expectedDSNumber) {            nOk++;          }          finalDSsNumbers[j]=connectedDSs;        } else {          finalDSsNumbers[j]=-1;        }      }      if (nOk == nRSs) {        debugInfo("checkForCorrectNumbersOfConnectedDSs: got expected " + "connections " + toString(expectedDSsNumbers) + " after "+ nSec+ " seconds.");        return;      }    }    Thread.sleep(1000);    nSec++;    assertTrue(nSec <= secTimeout,"checkForCorrectNumbersOfConnectedDSs: could not get expected " + "connections " + toString(possibleExpectedDSsNumbers) + " after "+ (nSec - 1)+ " seconds. Got this result : "+ toString(finalDSsNumbers)+ " ["+ msg+ "]");  }}  }
class C{  private OpendsJmxConnector sslConnect(String user,String password,long jmxPort) throws Exception {  Map<String,Object> env=new HashMap<>();  String[] credentials;  if (user == null && password == null) {    credentials=null;  } else {    credentials=new String[]{user,password};  }  env.put("jmx.remote.credentials",credentials);  KeyStore ks=KeyStore.getInstance("JKS");  FileInputStream keyStoreFile=new FileInputStream(getJmxKeystorePath());  ks.load(keyStoreFile,"password".toCharArray());  keyStoreFile.close();  TrustManagerFactory tmf=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());  tmf.init(ks);  env.put(JmxConnectionHandler.TRUST_MANAGER_ARRAY_KEY,tmf.getTrustManagers());  OpendsJmxConnector opendsConnector;  try {    opendsConnector=new OpendsJmxConnector("localhost",(int)jmxPort,env);    opendsConnector.connect();    return opendsConnector;  } catch (  Exception e) {    return null;  }}  }
class C{  protected void notifyDataInvalidatedEvent(){  if (datasetObservers != null) {    for (    DataSetObserver observer : datasetObservers) {      observer.onInvalidated();    }  }}  }
class C{  public MemoryUserDatabase(){  this(null);}  }
class C{  static Promise<Void> blockingPromiseNotify(){  return new BlockingPromise<>();}  }
class C{  public DsnCircle(DsnLayer p_layer,double[] p_coor){  super(p_layer);  coor=p_coor;}  }
class C{  @AndroidOnly("Test filed on RI: getRevokedCertificate throws " + "RuntimeException.") public void testGetRevokedCertificate(){  try {    tbt_crl.getRevokedCertificate((X509Certificate)null);    fail("NullPointerException should be thrown " + "in the case of null input data.");  } catch (  NullPointerException e) {  }  try {    CertificateFactory cf=CertificateFactory.getInstance("X.509");    X509Certificate cert=(X509Certificate)cf.generateCertificate(certArray);    tbt_crl.getRevokedCertificate(cert);  } catch (  Exception e) {    fail("Unexpected exception: " + e);  }}  }
class C{  @Override protected void finalize(){  try {    super.finalize();  } catch (  Throwable t) {    throw new AssertionError(t);  }}  }
class C{  @Create(operationDescription=@Operation(errors={@ApiError(code=400,description=CORE_TOKEN_RESOURCE + "error.unexpected.bad.request." + DESCRIPTION),@ApiError(code=500,description=CORE_TOKEN_RESOURCE + "error.unexpected.server.error." + DESCRIPTION)},description=CORE_TOKEN_RESOURCE + CREATE_DESCRIPTION)) public Promise<ResourceResponse,ResourceException> createInstance(Context serverContext,CreateRequest createRequest){  String principal=PrincipalRestUtils.getPrincipalNameFromServerContext(serverContext);  String json=createRequest.getContent().toString();  Token token=serialisation.deserialise(json,Token.class);  try {    store.createAsync(token);    Map<String,String> result=new HashMap<String,String>();    result.put(TOKEN_ID,token.getTokenId());    ResourceResponse resource=newResourceResponse(token.getTokenId(),String.valueOf(currentTimeMillis()),new JsonValue(result));    debug("CREATE by {0}: Stored token with ID: {1}",principal,token.getTokenId());    return newResultPromise(resource);  } catch (  IllegalArgumentException e) {    return new BadRequestException(e.getMessage()).asPromise();  }catch (  CoreTokenException e) {    error(e,"CREATE by {0}: Error creating token resource with ID: {1}",principal,token.getTokenId());    return generateException(e).asPromise();  }}  }
class C{  public final void testGetPrivateExponent(){  RSAPrivateKeySpec rpks=new RSAPrivateKeySpec(BigInteger.valueOf(1234567890L),BigInteger.valueOf(3L));  assertEquals(3L,rpks.getPrivateExponent().longValue());}  }
class C{  @Override public void paintCurrentValue(Graphics g,Rectangle bounds,boolean hasFocus){  ListCellRenderer renderer=comboBox.getRenderer();  Component c;  c=renderer.getListCellRendererComponent(listBox,comboBox.getSelectedItem(),-1,false,false);  boolean shouldValidate=false;  if (c instanceof JPanel) {    shouldValidate=true;  }  if (c instanceof UIResource) {    c.setName("ComboBox.renderer");  }  boolean force=forceOpaque && c instanceof JComponent;  if (force) {    ((JComponent)c).setOpaque(false);  }  int x=bounds.x, y=bounds.y, w=bounds.width, h=bounds.height;  if (padding != null) {    x=bounds.x + padding.left;    y=bounds.y + padding.top;    w=bounds.width - (padding.left + padding.right);    h=bounds.height - (padding.top + padding.bottom);  }  currentValuePane.paintComponent(g,c,comboBox,x,y,w,h,shouldValidate);  if (force) {    ((JComponent)c).setOpaque(true);  }}  }
class C{  void onDragExit(){  if (mDragging) {    mDragging=false;  }  mDragCell[0]=mDragCell[1]=-1;  mDragOutlineAnims[mDragOutlineCurrent].animateOut();  mDragOutlineCurrent=(mDragOutlineCurrent + 1) % mDragOutlineAnims.length;  revertTempState();  setIsDragOverlapping(false);}  }
class C{  public static EntryChangeNotificationResponseControl newControl(final PersistentSearchChangeType type,final String previousName,final long changeNumber){  return new EntryChangeNotificationResponseControl(false,type,DN.valueOf(previousName),changeNumber);}  }
class C{  public ApiErrorAssert hasI18nDescriptions(){  for (  ApiError error : actual) {    assertI18nDescription(error.description(),annotatedClass);  }  return this;}  }
class C{  private void toggleEnableJmxConnector(OpendsJmxConnector jmxc,DN testedConnector,boolean enabled) throws Exception {  MBeanServerConnection mbsc=jmxc.getMBeanServerConnection();  String jmxName=JMXMBean.getJmxName(testedConnector);  ObjectName name=ObjectName.getInstance(jmxName);  Attribute status=(Attribute)mbsc.getAttribute(name,"ds-cfg-enabled");  if (status != null) {    status.getValue();  }  Attribute attr=new Attribute("ds-cfg-enabled",enabled);  mbsc.setAttribute(name,attr);  status=(Attribute)mbsc.getAttribute(name,"ds-cfg-enabled");  status=null;}  }
class C{  @Override public void performTask(TokenStorageAdapter adapter) throws DataLayerException {  Reject.ifTrue(tokenFilter.getReturnFields().isEmpty());  handler.processResults(adapter.partialQuery(tokenFilter));}  }
class C{  public void canonicalizeResources(Subject adminSubject,String realm) throws EntitlementException {  ResourceName resComp=getResourceComparator(adminSubject,realm);  if ((resourceNames != null) && !resourceNames.isEmpty()) {    Set<String> temp=new HashSet<String>();    for (    String r : resourceNames) {      temp.add(resComp.canonicalize(r));    }    resourceNames=temp;  }}  }
class C{  public X509AttributeCertificateHolder(AttributeCertificate attrCert){  this.attrCert=attrCert;  this.extensions=attrCert.getAcinfo().getExtensions();}  }
class C{  public static boolean isCookieDomainValid(String cookieDomain){  return StringUtils.isEmpty(cookieDomain) || !cookieDomain.contains(":");}  }
class C{  public final void testGetAlgParameters02() throws IOException {  boolean performed=false;  for (int i=0; i < EncryptedPrivateKeyInfoData.algName0.length; i++) {    try {      EncryptedPrivateKeyInfo epki=new EncryptedPrivateKeyInfo(EncryptedPrivateKeyInfoData.getValidEncryptedPrivateKeyInfoEncoding(EncryptedPrivateKeyInfoData.algName0[i][0],false));      assertNull(epki.getAlgParameters());      performed=true;    } catch (    NoSuchAlgorithmException allowedFailure) {    }  }  assertTrue("Test not performed",performed);}  }
class C{  protected void expireSessions(PrintWriter writer,ContextName cn,HttpServletRequest req,StringManager smClient){  int idle=-1;  String idleParam=req.getParameter("idle");  if (idleParam != null) {    try {      idle=Integer.parseInt(idleParam);    } catch (    NumberFormatException e) {      log("Could not parse idle parameter to an int: " + idleParam);    }  }  sessions(writer,cn,idle,smClient);}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  throw new NotSerializableException();}  }
class C{  public static String normalizeDigestName(String algo){  if (fixNames.containsKey(algo))   return fixNames.get(algo);  return algo;}  }
class C{  public static Bitmap snapShotWithStatusBar(Activity activity){  View view=activity.getWindow().getDecorView();  view.setDrawingCacheEnabled(true);  view.buildDrawingCache();  Bitmap bmp=view.getDrawingCache();  int width=getScreenWidth(activity);  int height=getScreenHeight(activity);  Bitmap bp=null;  bp=Bitmap.createBitmap(bmp,0,0,width,height);  view.destroyDrawingCache();  return bp;}  }
class C{  public SessionMonitoringTimingStore createSessionMonitoringTimingStore(){  return InjectorHolder.getInstance(SessionMonitoringTimingStore.class);}  }
class C{  public static String toHexAndPrintableChars(byte[] bytes){  final StringBuilder s=new StringBuilder().append("bytes [ ").append(Utils.toSpacedHex(ByteBuffer.wrap(bytes))).append(" ] chars (");  for (int i=0; i < bytes.length; i++) {    final byte b=bytes[i];    if (b >= 32 && b < 127) {      s.append((char)b);    } else {      s.append('.');    }  }  s.append(")");  return s.toString();}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap entities;  NamedNodeMap attributes;  Entity entity;  Notation notation;  Element element;  NodeList elementList;  Node newNode;  doc=(Document)load("staffNS",true);  docType=doc.getDoctype();  entities=docType.getEntities();  assertNotNull("entitiesNotNull",entities);  entity=(Entity)entities.getNamedItem("ent1");  elementList=doc.getElementsByTagNameNS("http://www.nist.gov","address");  element=(Element)elementList.item(0);  attributes=element.getAttributes();{    boolean success=false;    try {      newNode=attributes.setNamedItemNS(entity);    } catch (    DOMException ex) {      success=(ex.code == DOMException.HIERARCHY_REQUEST_ERR);    }    assertTrue("throw_HIERARCHY_REQUEST_ERR",success);  }}  }
class C{  public static String format(String pattern,Date d,TimeZone tz,String l){  MessageFormat mf=new MessageFormat("");  mf.setLocale(getLocale(l));  mf.applyPattern(pattern);  ((DateFormat)mf.getFormats()[0]).setTimeZone(tz);  DateFormat df1=((DateFormat)mf.getFormats()[0]);  if (df1 != null) {    df1.setTimeZone(tz);  }  DateFormat df2=((DateFormat)mf.getFormats()[1]);  if (df2 != null) {    df2.setTimeZone(tz);  }  return format(mf,d);}  }
class C{  public synchronized boolean removeAll(Collection<?> c){  return super.removeAll(c);}  }
class C{  public static final Index createTestBankIndexLoanYear(){  Index lastname=new Index("issueyear");  lastname.isUnique(false);  ArrayList<IndexField> fields=new ArrayList<>(1);  fields.add(new IndexField("approvalfy",FieldDataType.INTEGER));  lastname.setFields(fields);  lastname.setTable(Fixtures.createTestWorldBankTable());  return lastname;}  }
class C{  public ReedSolomonException(String message){  super(message);}  }
class C{  public synchronized void addActionListener(ActionListener l){  if (l == null) {    return;  }  actionListener=AWTEventMulticaster.add(actionListener,l);  newEventsOnly=true;}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.X509DataType createX509DataType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.X509DataTypeImpl();}  }
class C{  public static boolean isLineSupported(Line.Info info){  Mixer mixer;  Mixer.Info[] infoArray=getMixerInfo();  for (int i=0; i < infoArray.length; i++) {    if (infoArray[i] != null) {      mixer=getMixer(infoArray[i]);      if (mixer.isLineSupported(info)) {        return true;      }    }  }  return false;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  IOutput outputWriter=getOutputWriter();  try {    init(rc);    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_ADD_AMSDK_PLUGIN",params);    loadLDIFs();    String xmlData=loadDAIService();    addAMSDKSubSchema(xmlData);    loadDelegrationPolicies(xmlData);    updateServerConfigXML();    updateDSAMEUserPassword();    outputWriter.printlnMessage(params[0] + ": " + getResourceString("datastore-add-amsdk-idrepo-plugin-succeeded"));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_ADD_AMSDK_PLUGIN",params);  } catch (  Exception e) {    String[] p={"Adding AMSDK plugin",e.getMessage()};    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_ADD_AMSDK_PLUGIN",p);    outputWriter.printlnMessage(params[0] + ": " + getResourceString("datastore-add-amsdk-idrepo-plugin-failed")+ ": "+ e.getMessage());  }}  }
class C{  public PushMessage(String recipient,String body,String subject,String messageId){  Reject.ifNull(recipient);  Reject.ifNull(body);  Reject.ifNull(subject);  this.recipient=recipient;  this.body=body;  this.subject=subject;  if (messageId == null) {    this.messageId=UUID.randomUUID().toString() + Time.currentTimeMillis();  } else {    this.messageId=messageId;  }}  }
class C{  protected void layoutMajorAxis(int targetSpan,int axis,int[] offsets,int[] spans){  long preferred=0;  int n=getViewCount();  for (int i=0; i < n; i++) {    View v=getView(i);    spans[i]=(int)v.getPreferredSpan(axis);    preferred+=spans[i];  }  long desiredAdjustment=targetSpan - preferred;  float adjustmentFactor=0.0f;  int[] diffs=null;  if (desiredAdjustment != 0) {    long totalSpan=0;    diffs=new int[n];    for (int i=0; i < n; i++) {      View v=getView(i);      int tmp;      if (desiredAdjustment < 0) {        tmp=(int)v.getMinimumSpan(axis);        diffs[i]=spans[i] - tmp;      } else {        tmp=(int)v.getMaximumSpan(axis);        diffs[i]=tmp - spans[i];      }      totalSpan+=tmp;    }    float maximumAdjustment=Math.abs(totalSpan - preferred);    adjustmentFactor=desiredAdjustment / maximumAdjustment;    adjustmentFactor=Math.min(adjustmentFactor,1.0f);    adjustmentFactor=Math.max(adjustmentFactor,-1.0f);  }  int totalOffset=0;  for (int i=0; i < n; i++) {    offsets[i]=totalOffset;    if (desiredAdjustment != 0) {      float adjF=adjustmentFactor * diffs[i];      spans[i]+=Math.round(adjF);    }    totalOffset=(int)Math.min((long)totalOffset + (long)spans[i],Integer.MAX_VALUE);  }}  }
class C{  private int yearLength(int year){  return isLeapYear(year) ? 366 : 365;}  }
class C{  public synchronized void disableAllTypes(){  enabledTypes.clear();}  }
class C{  public NodeSearcherQueue(String name,int threadCount){  this.name=name;  threadGroup=new ThreadGroup(name);  for (int i=0; i < threadCount; i++) {    Thread t=new Thread(threadGroup,this,name + "[" + i+ "]");    t.setPriority(Thread.MIN_PRIORITY);    t.start();  }}  }
class C{  @Override public String composeName(String name,String prefix){  return prefix + "/" + name;}  }
class C{  protected void doProppatch(HttpServletRequest req,HttpServletResponse resp) throws IOException {  if (readOnly) {    resp.sendError(WebdavStatus.SC_FORBIDDEN);    return;  }  if (isLocked(req)) {    resp.sendError(WebdavStatus.SC_LOCKED);    return;  }  resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED);}  }
class C{  public static String guessDisplayUserFromSession(Session in_session){  Object user=SessionUtils.guessUserFromSession(in_session);  return escapeXml(user);}  }
class C{  public static byte[] unsynchronize(byte[] abySource){  ByteArrayInputStream input=new ByteArrayInputStream(abySource);  ByteArrayOutputStream output=new ByteArrayOutputStream(abySource.length);  int count=0;  while (input.available() > 0) {    int firstByte=input.read();    count++;    output.write(firstByte);    if ((firstByte & MPEGFrameHeader.SYNC_BYTE1) == MPEGFrameHeader.SYNC_BYTE1) {      if (input.available() > 0) {        input.mark(1);        int secondByte=input.read();        if ((secondByte & MPEGFrameHeader.SYNC_BYTE2) == MPEGFrameHeader.SYNC_BYTE2) {          if (logger.isLoggable(Level.FINEST)) {            logger.finest("Writing unsynchronisation bit at:" + count);          }          output.write(0);        } else         if (secondByte == 0) {          if (logger.isLoggable(Level.FINEST)) {            logger.finest("Inserting zero unsynchronisation bit at:" + count);          }          output.write(0);        }        input.reset();      }    }  }  if ((abySource[abySource.length - 1] & MPEGFrameHeader.SYNC_BYTE1) == MPEGFrameHeader.SYNC_BYTE1) {    logger.finest("Adding unsynchronisation bit at end of stream");    output.write(0);  }  return output.toByteArray();}  }
class C{  protected void resetLocation(int endOffset,int g1){  if (undoLocation != endOffset) {    this.rec.index=undoLocation;  } else {    this.rec.index=g1;  }}  }
class C{  public FurnaceRecipe(ItemStack result,MaterialData source){  this(result,source.getItemType(),source.getData(),0);}  }
class C{  protected void checkClosingStatus(){  if (closed) {    throw new PdfException(PdfException.DocumentClosedItIsImpossibleToExecuteAction);  }}  }
class C{  public static PasswordPolicyResponseControl newControl(final PasswordPolicyWarningType warningType,final int warningValue){  Reject.ifNull(warningType);  Reject.ifFalse(warningValue >= 0,"warningValue is negative");  return new PasswordPolicyResponseControl(false,warningType,warningValue,null);}  }
class C{  boolean customSetUIProperty(String propertyName,Object value){  if (propertyName == "echoChar") {    if (!echoCharSet) {      setEchoChar((Character)value);      echoCharSet=false;    }    return true;  }  return false;}  }
class C{  public int hashCode(){  return alignment ^ leader ^ Math.round(position);}  }
class C{  public boolean isCompressed(){  return isCompressed;}  }
class C{  public String encode(){  String encoded_string;  encoded_string=MEDIA_FIELD;  if (media != null)   encoded_string+=media.toLowerCase() + Separators.SP + port;  if (nports > 1)   encoded_string+=Separators.SLASH + nports;  if (proto != null)   encoded_string+=Separators.SP + proto;  if (formats != null)   encoded_string+=Separators.SP + encodeFormats();  encoded_string+=Separators.NEWLINE;  return encoded_string;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  adminSSOToken=getAdminSSOToken();  if (!XACMLUtils.hasPermission(realm,adminSSOToken,"READ")) {    String errorMessage=MessageFormat.format(getResourceString("permission-denied"),"list-xacml",getAdminID());    String[] args={realm,"ANY",errorMessage};    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_GET_POLICY_IN_REALM",args);    throw new CLIException(errorMessage,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }  adminSubject=SubjectUtils.createSubject(adminSSOToken);  realm=getStringOptionValue(IArgument.REALM_NAME);  getPolicyNamesOnly=isOptionSet("namesonly");  filters=convertToSearchFilters((List)rc.getOption(ARGUMENT_POLICY_NAMES));  outfile=getStringOptionValue(IArgument.OUTPUT_FILE);  outputWriter=getOutputWriter();  if (getPolicyNamesOnly) {    getPolicyNames();  } else {    getPolicies();  }}  }
class C{  public ID3v24Tag(){  frameMap=new LinkedHashMap();  encryptedFrameMap=new LinkedHashMap();}  }
class C{  private ConditionResult processSubstring(SearchFilter completeFilter,Entry entry) throws DirectoryException {  if (getAttributeType() == null) {    LocalizableMessage message=ERR_SEARCH_FILTER_SUBSTRING_NO_ATTRIBUTE_TYPE.get(entry.getName(),toString());    throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);  }  if (subInitialElement == null && subFinalElement == null && (subAnyElements == null || subAnyElements.isEmpty())) {    LocalizableMessage message=ERR_SEARCH_FILTER_SUBSTRING_NO_SUBSTRING_COMPONENTS.get(entry.getName(),toString(),getAttributeType().getNameOrOID());    throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);  }  Iterable<Attribute> attrs=entry.getAllAttributes(attributeDescription);  if (isEmpty(attrs)) {    if (logger.isTraceEnabled()) {      logger.trace("Returning FALSE for substring component %s in " + "filter %s because entry %s didn't have attribute " + "type %s",this,completeFilter,entry.getName(),getAttributeType().getNameOrOID());    }    return ConditionResult.FALSE;  }  ConditionResult result=ConditionResult.FALSE;  for (  Attribute a : attrs) {switch (a.matchesSubstring(subInitialElement,subAnyElements,subFinalElement)) {case TRUE:      if (logger.isTraceEnabled()) {        logger.trace("Returning TRUE for substring component %s in " + "filter %s for entry %s",this,completeFilter,entry.getName());      }    return ConditionResult.TRUE;case FALSE:  break;case UNDEFINED:if (logger.isTraceEnabled()) {  logger.trace("Undefined result encountered for substring " + "component %s in filter %s for entry %s",this,completeFilter,entry.getName());}result=ConditionResult.UNDEFINED;break;default :}}if (logger.isTraceEnabled()) {logger.trace("Returning %s for substring component %s in filter " + "%s for entry %s",result,this,completeFilter,entry.getName());}return result;}  }
class C{  @SideOnly(Side.CLIENT) public static void createTooltip(ItemStack stack,List<String> tooltip){  if (isTeslaHolder(stack,EnumFacing.DOWN)) {    final KeyBinding keyBindSneak=Minecraft.getMinecraft().gameSettings.keyBindSneak;    final ITeslaHolder holder=TeslaUtils.getTeslaHolder(stack,EnumFacing.DOWN);    if (GameSettings.isKeyDown(keyBindSneak)) {      addHolderInfo(holder,tooltip);      if (holder instanceof BaseTeslaContainer) {        final BaseTeslaContainer container=(BaseTeslaContainer)holder;        tooltip.add(ChatFormatting.DARK_AQUA + I18n.format("tooltip.tesla.input",Long.toString(container.getInputRate())));        tooltip.add(ChatFormatting.DARK_AQUA + I18n.format("tooltip.tesla.output",Long.toString(container.getOutputRate())));      }    } else     tooltip.add(I18n.format("tooltip.tesla.showinfo",ChatFormatting.DARK_AQUA,keyBindSneak.getDisplayName(),ChatFormatting.GRAY));  }}  }
class C{  public void testSetCertificateCheckingLjava_X509Certificate() throws CertificateException {  X509CRLSelector selector=new X509CRLSelector();  CertificateFactory certFact=CertificateFactory.getInstance("X509");  X509Certificate cert=(X509Certificate)certFact.generateCertificate(new ByteArrayInputStream(TestUtils.getX509Certificate_v3()));  TestCRL crl=new TestCRL();  selector.setCertificateChecking(cert);  assertTrue("The CRL should match the selection criteria.",selector.match(crl));  assertEquals(cert,selector.getCertificateChecking());  selector.setCertificateChecking(null);  assertTrue("The CRL should match the selection criteria.",selector.match(crl));  assertNull(selector.getCertificateChecking());}  }
class C{  public static void fill(Object[] a,int fromIndex,int toIndex,Object val){  rangeCheck(a.length,fromIndex,toIndex);  for (int i=fromIndex; i < toIndex; i++)   a[i]=val;}  }
class C{  public void removeAllMembers() throws UMSException {  if (getMemberCount() == 0) {    return;  }  modify(Collections.singleton(new Modification(ModificationType.DELETE,Attributes.emptyAttribute(MEMBER_ATTR_NAME))));  save();}  }
class C{  public ResourceAccessStatement(String resourceID,ProxySubject proxySubject,Subject subject) throws SAMLException {  if (subject == null) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("ResourceAccessStatement: should" + " contain one subject.");    }    throw new SAMLRequesterException(SAMLUtils.bundle.getString("oneElement"));  } else {    this._subject=subject;  }  _resourceID=new ResourceID(resourceID);  _proxySubject=proxySubject;}  }
class C{  public void testSetBitNegativeInside4(){  String as="-4294967295";  int number=0;  BigInteger aNumber=new BigInteger(as);  BigInteger result=aNumber.setBit(number);  assertEquals(as,result.toString());}  }
class C{  public Period multipliedBy(int scalar){  if (this == ZERO || scalar == 1) {    return this;  }  return create(Math.multiplyExact(years,scalar),Math.multiplyExact(months,scalar),Math.multiplyExact(days,scalar));}  }
class C{  protected TreeExpansionListener createTreeExpansionListener(){  return getHandler();}  }
class C{  public void close() throws IOException {  if (!closed) {    if (usesDefaultInflater)     inf.end();    in.close();    closed=true;  }}  }
class C{  public void dragExit(DragSourceEvent dse){  DragSourceListener dsl=listener;  if (dsl != null) {    dsl.dragExit(dse);  }  getDragSource().processDragExit(dse);  updateCurrentCursor(DnDConstants.ACTION_NONE,DnDConstants.ACTION_NONE,DEFAULT);}  }
class C{  public final BufferedImage filter(BufferedImage src,BufferedImage dst){  if (src == null) {    throw new NullPointerException("src image is null");  }  if (src == dst) {    throw new IllegalArgumentException("src image cannot be the " + "same as the dst image");  }  boolean needToConvert=false;  ColorModel srcCM=src.getColorModel();  ColorModel dstCM;  BufferedImage origDst=dst;  if (dst == null) {    dst=createCompatibleDestImage(src,null);    dstCM=srcCM;    origDst=dst;  } else {    dstCM=dst.getColorModel();    if (srcCM.getColorSpace().getType() != dstCM.getColorSpace().getType()) {      int type=xform.getType();      boolean needTrans=((type & (xform.TYPE_MASK_ROTATION | xform.TYPE_GENERAL_TRANSFORM)) != 0);      if (!needTrans && type != xform.TYPE_TRANSLATION && type != xform.TYPE_IDENTITY) {        double[] mtx=new double[4];        xform.getMatrix(mtx);        needTrans=(mtx[0] != (int)mtx[0] || mtx[3] != (int)mtx[3]);      }      if (needTrans && srcCM.getTransparency() == Transparency.OPAQUE) {        ColorConvertOp ccop=new ColorConvertOp(hints);        BufferedImage tmpSrc=null;        int sw=src.getWidth();        int sh=src.getHeight();        if (dstCM.getTransparency() == Transparency.OPAQUE) {          tmpSrc=new BufferedImage(sw,sh,BufferedImage.TYPE_INT_ARGB);        } else {          WritableRaster r=dstCM.createCompatibleWritableRaster(sw,sh);          tmpSrc=new BufferedImage(dstCM,r,dstCM.isAlphaPremultiplied(),null);        }        src=ccop.filter(src,tmpSrc);      } else {        needToConvert=true;        dst=createCompatibleDestImage(src,null);      }    }  }  if (interpolationType != TYPE_NEAREST_NEIGHBOR && dst.getColorModel() instanceof IndexColorModel) {    dst=new BufferedImage(dst.getWidth(),dst.getHeight(),BufferedImage.TYPE_INT_ARGB);  }  if (ImagingLib.filter(this,src,dst) == null) {    throw new ImagingOpException("Unable to transform src image");  }  if (needToConvert) {    ColorConvertOp ccop=new ColorConvertOp(hints);    ccop.filter(dst,origDst);  } else   if (origDst != dst) {    java.awt.Graphics2D g=origDst.createGraphics();    try {      g.setComposite(AlphaComposite.Src);      g.drawImage(dst,0,0,null);    }  finally {      g.dispose();    }  }  return origDst;}  }
class C{  public static String toString(boolean value){  return String.valueOf(value);}  }
class C{  public void onLoginSuccess(Map requestParamsMap,HttpServletRequest request,HttpServletResponse response,SSOToken ssoToken) throws AuthenticationException {  try {    if (!useHashedPassword) {      String userpasswd=request.getParameter(PASSWORD_TOKEN);      if (userpasswd != null) {        ssoToken.setProperty("EncryptedUserPassword",Crypt.encrypt(userpasswd));      }    } else {      String userName=ssoToken.getPrincipal().getName();      String universalID=ssoToken.getProperty("sun.am.UniversalIdentifier");      if (debug.messageEnabled()) {        debug.message("WSSReplayPassword:Authenticated user : " + userName);        debug.message("WSSReplayPassword:Authenticated UUID : " + universalID);      }      AMIdentity amId=new AMIdentity(getAdminToken(),universalID);      Set tmp=amId.getAttribute("userPassword");      if (tmp != null && !tmp.isEmpty()) {        String userPassword=(String)tmp.iterator().next();        ssoToken.setProperty("HashedUserPassword",userPassword);      }    }  } catch (  SSOException sse) {    debug.warning("WSSReplayPasswd.onLoginSuccess: " + "sso exception",sse);  }catch (  IdRepoException ire) {    if (debug.warningEnabled()) {      debug.warning("WSSReplayPassword.onLoginSuccess: ",ire);    }  }}  }
class C{  @Override public Foo findByField2_First(boolean field2,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=fetchByField2_First(field2,orderByComparator);  if (foo != null) {    return foo;  }  StringBundler msg=new StringBundler(4);  msg.append(_NO_SUCH_ENTITY_WITH_KEY);  msg.append("field2=");  msg.append(field2);  msg.append(StringPool.CLOSE_CURLY_BRACE);  throw new NoSuchFooException(msg.toString());}  }
class C{  private ModifyDNOperation renameEntry(DN targetDN,RDN newRDN,DN parentDN,boolean markConflict){  ModifyDNOperation newOp=new ModifyDNOperationBasis(conn,nextOperationID(),nextMessageID(),new ArrayList<Control>(0),targetDN,newRDN,false,parentDN);  if (markConflict) {    Attribute attr=Attributes.create(DS_SYNC_CONFLICT,targetDN.toString());    newOp.addModification(new Modification(ModificationType.REPLACE,attr));  } else {    Attribute attr=Attributes.empty(DS_SYNC_CONFLICT);    newOp.addModification(new Modification(ModificationType.DELETE,attr));  }  runAsSynchronizedOperation(newOp);  return newOp;}  }
class C{  public static PlainSASLBindRequest unmodifiablePlainSASLBindRequest(final PlainSASLBindRequest request){  if (request instanceof UnmodifiablePlainSASLBindRequestImpl) {    return request;  }  return new UnmodifiablePlainSASLBindRequestImpl(request);}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws XACMLException {  StringBuffer sb=new StringBuffer(2000);  String nsPrefix="";  String nsDeclaration="";  if (includeNSPrefix) {    nsPrefix=XACMLConstants.CONTEXT_NS_PREFIX + ":";  }  if (declareNS) {    nsDeclaration=XACMLConstants.CONTEXT_NS_DECLARATION;  }  sb.append("<").append(nsPrefix).append(XACMLConstants.STATUS_CODE).append(" ").append(nsDeclaration);  if (value != null) {    sb.append(XACMLConstants.VALUE).append("=").append(XACMLSDKUtils.quote(value));  }  sb.append(">");  if (minorCodeValue != null) {    sb.append("<").append(nsPrefix).append(XACMLConstants.STATUS_CODE).append(" ").append(nsDeclaration).append(XACMLConstants.VALUE).append("=").append(XACMLSDKUtils.quote(minorCodeValue)).append(">");    sb.append("</").append(nsPrefix).append(XACMLConstants.STATUS_CODE).append(">");  }  sb.append("</").append(nsPrefix).append(XACMLConstants.STATUS_CODE).append(">\n");  return sb.toString();}  }
class C{  public PdfCanvas resetStrokeColorGray(){  return setStrokeColorGray(0);}  }
class C{  public UMSException(String message){  super(message);  xcptMessage=message;}  }
class C{  public StructMember(String __name,org.omg.CORBA.TypeCode __type,org.omg.CORBA.IDLType __type_def){  name=__name;  type=__type;  type_def=__type_def;}  }
class C{  public HttpClientCreationException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void testZeroPos(){  String numA="0";  String numB="27384627835298756289327365";  String res="27384627835298756289327365";  BigInteger aNumber=new BigInteger(numA);  BigInteger bNumber=new BigInteger(numB);  BigInteger result=aNumber.xor(bNumber);  assertTrue(res.equals(result.toString()));}  }
class C{  private boolean isDSEConfigAttribute(Attribute attribute){  AttributeType attrType=attribute.getAttributeDescription().getAttributeType();  return attrType.hasName(ATTR_ROOT_DSE_SUBORDINATE_BASE_DN) || attrType.hasName(ATTR_ROOTDSE_SHOW_ALL_ATTRIBUTES) || attrType.hasName(ATTR_COMMON_NAME);}  }
class C{  public static URI resolve(final URI baseURI,URI reference){  if (baseURI == null) {    throw new IllegalArgumentException("Base URI may nor be null");  }  if (reference == null) {    throw new IllegalArgumentException("Reference URI may nor be null");  }  boolean emptyReference=reference.toString().length() == 0;  if (emptyReference) {    reference=URI.create("#");  }  URI resolved=baseURI.resolve(reference);  if (emptyReference) {    String resolvedString=resolved.toString();    resolved=URI.create(resolvedString.substring(0,resolvedString.indexOf('#')));  }  return resolved;}  }
class C{  public void removeLayoutComponent(Component child){}  }
class C{  boolean accessAllowed(AciContainer container){  DN dn=container.getResourceDN();  if (container.hasRights(ACI_WRITE_ADD) || container.hasRights(ACI_WRITE_DELETE)) {    container.setRights(container.getRights() | ACI_WRITE);  }  if (container.getCurrentAttributeValue() != null && container.hasRights(ACI_WRITE) && isAttributeDN(container.getCurrentAttributeType())) {    String dnString=null;    try {      dnString=container.getCurrentAttributeValue().toString();      DN tmpDN=DN.valueOf(dnString);      if (tmpDN.equals(container.getClientDN())) {        container.setRights(container.getRights() | ACI_SELF);      }    } catch (    LocalizedIllegalArgumentException ex) {      logger.warn(WARN_ACI_NOT_VALID_DN,dnString);    }  }  List<Aci> candidates=aciList.getCandidateAcis(dn);  createApplicableList(candidates,container);  final boolean ret=testApplicableLists(container);  if (container.isGetEffectiveRightsEval()) {    container.setEvalSummary(AciEffectiveRights.createSummary(container,ret));  }  return ret;}  }
class C{  @Override protected Class<?> findClass(final String className) throws ClassNotFoundException {  String partialName=className.replace('.','/');  final String classFileName=new StringBuilder(partialName).append(".class").toString();  String packageName=null;  int position=partialName.lastIndexOf('/');  if ((position=partialName.lastIndexOf('/')) != -1) {    packageName=partialName.substring(0,position);  }  int n=0;  while (true) {    URLHandler handler=getHandler(n++);    if (handler == null) {      break;    }    Class<?> res=handler.findClass(packageName,classFileName,className);    if (res != null) {      return res;    }  }  throw new ClassNotFoundException(className);}  }
class C{  protected boolean isMultiSelectEvent(MouseEvent event){  return (SwingUtilities.isLeftMouseButton(event) && event.isShiftDown());}  }
class C{  public org.omg.CosNaming.NamingContext bind_new_context(org.omg.CosNaming.NameComponent[] n) throws org.omg.CosNaming.NamingContextPackage.NotFound, org.omg.CosNaming.NamingContextPackage.AlreadyBound, org.omg.CosNaming.NamingContextPackage.CannotProceed, org.omg.CosNaming.NamingContextPackage.InvalidName {  org.omg.CORBA.portable.InputStream $in=null;  try {    org.omg.CORBA.portable.OutputStream $out=_request("bind_new_context",true);    org.omg.CosNaming.NameHelper.write($out,n);    $in=_invoke($out);    org.omg.CosNaming.NamingContext $result=org.omg.CosNaming.NamingContextHelper.read($in);    return $result;  } catch (  org.omg.CORBA.portable.ApplicationException $ex) {    $in=$ex.getInputStream();    String _id=$ex.getId();    if (_id.equals("IDL:omg.org/CosNaming/NamingContext/NotFound:1.0"))     throw org.omg.CosNaming.NamingContextPackage.NotFoundHelper.read($in); else     if (_id.equals("IDL:omg.org/CosNaming/NamingContext/AlreadyBound:1.0"))     throw org.omg.CosNaming.NamingContextPackage.AlreadyBoundHelper.read($in); else     if (_id.equals("IDL:omg.org/CosNaming/NamingContext/CannotProceed:1.0"))     throw org.omg.CosNaming.NamingContextPackage.CannotProceedHelper.read($in); else     if (_id.equals("IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0"))     throw org.omg.CosNaming.NamingContextPackage.InvalidNameHelper.read($in); else     throw new org.omg.CORBA.MARSHAL(_id);  }catch (  org.omg.CORBA.portable.RemarshalException $rm) {    return bind_new_context(n);  } finally {    _releaseReply($in);  }}  }
class C{  protected void initializeStartingState(){  for (int i=0; i < mElements.size(); i++) {    PaperOnboardingPage PaperOnboardingPage=mElements.get(i);    ViewGroup bottomBarIconElement=createPagerIconElement(PaperOnboardingPage.getBottomBarIconRes(),i == 0);    mPagerIconsContainer.addView(bottomBarIconElement);  }  PaperOnboardingPage activeElement=getActiveElement();  ViewGroup initialContentText=createContentTextView(activeElement);  mContentTextContainer.addView(initialContentText);  ImageView initContentIcon=createContentIconView(activeElement);  mContentIconContainer.addView(initContentIcon);  mRootLayout.setBackgroundColor(activeElement.getBgColor());}  }
class C{  public boolean isGlobal(){  return isglobal;}  }
class C{  protected void addWatchedResources(DeployedApplication app,String docBase,Context context){  File docBaseFile=null;  if (docBase != null) {    docBaseFile=new File(docBase);    if (!docBaseFile.isAbsolute()) {      docBaseFile=new File(host.getAppBaseFile(),docBase);    }  }  String[] watchedResources=context.findWatchedResources();  for (int i=0; i < watchedResources.length; i++) {    File resource=new File(watchedResources[i]);    if (!resource.isAbsolute()) {      if (docBase != null) {        resource=new File(docBaseFile,watchedResources[i]);      } else {        if (log.isDebugEnabled())         log.debug("Ignoring non-existent WatchedResource '" + resource.getAbsolutePath() + "'");        continue;      }    }    if (log.isDebugEnabled())     log.debug("Watching WatchedResource '" + resource.getAbsolutePath() + "'");    app.reloadResources.put(resource.getAbsolutePath(),Long.valueOf(resource.lastModified()));  }}  }
class C{  public void insert_char(char value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_char",_opsClass);  DynEnumOperations $self=(DynEnumOperations)$so.servant;  try {    $self.insert_char(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public ExpressionTokenizer(String expr){  this.expr=expr.trim().toCharArray();  this.length=this.expr.length;}  }
class C{  final boolean load(int offset,boolean changeEntity) throws IOException {  int count=fCurrentEntity.reader.read(fCurrentEntity.ch,offset,DEFAULT_XMLDECL_BUFFER_SIZE);  boolean entityChanged=false;  if (count != -1) {    if (count != 0) {      fCurrentEntity.count=count + offset;      fCurrentEntity.position=offset;    }  } else {    fCurrentEntity.count=offset;    fCurrentEntity.position=offset;    entityChanged=true;    if (changeEntity) {      endEntity();      if (fCurrentEntity == null) {        throw new EOFException();      }      if (fCurrentEntity.position == fCurrentEntity.count) {        load(0,false);      }    }  }  return entityChanged;}  }
class C{  public static void closeIfNotNull(Closeable closeable){  if (closeable != null) {    try {      closeable.close();    } catch (    IOException ignored) {    }  }}  }
class C{  public static StringArgument hostNameArgument(final String defaultHostName) throws ArgumentException {  return hostNameArgument(defaultHostName,null);}  }
class C{  public org.omg.CORBA.TypeCode _type(){  return ORB.init().get_primitive_tc(TCKind.tk_value);}  }
class C{  public XObject(){}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFileTmp),Util.US_ASCII));  try {    writer.write(MAGIC);    writer.write("\n");    writer.write(VERSION_1);    writer.write("\n");    writer.write(Integer.toString(appVersion));    writer.write("\n");    writer.write(Integer.toString(valueCount));    writer.write("\n");    writer.write("\n");    for (    Entry entry : lruEntries.values()) {      if (entry.currentEditor != null) {        writer.write(DIRTY + ' ' + entry.key+ '\n');      } else {        writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');      }    }  }  finally {    writer.close();  }  if (journalFile.exists()) {    renameTo(journalFile,journalFileBackup,true);  }  renameTo(journalFileTmp,journalFile,false);  journalFileBackup.delete();  journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII));}  }
class C{  LocalBackendBindOperation(BindOperation bind){  super(bind);  LocalBackendWorkflowElement.attachLocalOperation(bind,this);}  }
class C{  public final void testCertPathCertPathRep(){  MyCertPath cp=new MyCertPath(testEncoding);  MyCertPathRep rep=cp.new MyCertPathRep("MyEncoding",testEncoding);  assertEquals(testEncoding,rep.getData());  assertEquals("MyEncoding",rep.getType());  try {    cp.new MyCertPathRep(null,null);  } catch (  Exception e) {    fail("Unexpected exeption " + e.getMessage());  }}  }
class C{  public boolean isSticky(){  return block.getType() == Material.PISTON_STICKY_BASE || block.getType() == Material.PISTON_MOVING_PIECE;}  }
class C{  public static LineString fromJson(String json){  GsonBuilder gson=new GsonBuilder();  gson.registerTypeAdapter(Position.class,new PositionDeserializer());  return gson.create().fromJson(json,LineString.class);}  }
class C{  public void addClickingListener(OnWheelClickedListener listener){  clickingListeners.add(listener);}  }
class C{  private static TypeDescription cqlStatementDescription(){  return new TypeDescription.Latent("org.apache.cassandra.cql3.CQLStatement",Modifier.INTERFACE,null,null);}  }
class C{  private int yearMonthToDayOfYear(int prolepticYear,int month){  int epochMonthFirst=yearToEpochMonth(prolepticYear);  return epochMonthToEpochDay(epochMonthFirst + month) - epochMonthToEpochDay(epochMonthFirst);}  }
class C{  public final boolean hasContended(){  return head != null;}  }
class C{  void writeValueProperties(String fullId,long dbId,String localId,JsonValue value,Connection connection) throws SQLException {  if (cfg.hasPossibleSearchableProperties()) {    Integer batchingCount=0;    PreparedStatement propCreateStatement=getPreparedStatement(connection,QueryDefinition.PROPCREATEQUERYSTR);    try {      batchingCount=writeValueProperties(fullId,dbId,localId,value,connection,propCreateStatement,batchingCount);      if (enableBatching && batchingCount > 0) {        int[] numUpdates=propCreateStatement.executeBatch();        logger.debug("Batch update of objectproperties updated: {}",numUpdates);        if (logger.isDebugEnabled()) {          logger.debug("Writing batch of objectproperties, updated: {}",Arrays.asList(numUpdates));        }        propCreateStatement.clearBatch();      }    }  finally {      CleanupHelper.loggedClose(propCreateStatement);    }  }}  }
class C{  public boolean containsValue(int value){  return contains(value);}  }
class C{  public ClientKeyExchange(byte[] encrypted_pre_master_secret,boolean isTLS){  this.exchange_keys=encrypted_pre_master_secret;  length=this.exchange_keys.length;  if (isTLS) {    length+=2;  }  this.isTLS=isTLS;  isRSA=true;}  }
class C{  public boolean accept(String name){  return (pattern == null) ? true : (pattern.matcher(name.toLowerCase()).matches());}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.MgmtDataElement createMgmtDataElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.MgmtDataElementImpl();}  }
class C{  @Override public void start() throws java.io.IOException {  getTransport().connect();}  }
class C{  public static JsonPropertyMapper json(final AttributeDescription attribute){  return new JsonPropertyMapper(attribute);}  }
class C{  public static void fill(double[] a,int fromIndex,int toIndex,double val){  rangeCheck(a.length,fromIndex,toIndex);  for (int i=fromIndex; i < toIndex; i++)   a[i]=val;}  }
class C{  public boolean handles(Instruction i){  return i.getIndex() >= startPC.getIndex() && i.getIndex() < endPC.getIndex();}  }
class C{  synchronized void updateSessionServiceDynamics(ServiceSchemaManager scm) throws SMSException {  sessionSchema=scm.getDynamicSchema();  if (debug.messageEnabled()) {    Map attrs=sessionSchema.getAttributeDefaults();    String defaultMaxSessionTime=CollectionHelper.getMapAttr(attrs,ISAuthConstants.MAX_SESSION_TIME,"120");    String defaultMaxIdleTime=CollectionHelper.getMapAttr(attrs,ISAuthConstants.SESS_MAX_IDLE_TIME,"30");    String defaultMaxCachingTime=CollectionHelper.getMapAttr(attrs,ISAuthConstants.SESS_MAX_CACHING_TIME,"3");    debug.message("AuthD.defaultMaxSessionTime=" + defaultMaxSessionTime + "\nAuthD.defaultMaxIdleTime="+ defaultMaxIdleTime+ "\nAuthD.defaultMaxCachingTime="+ defaultMaxCachingTime);  }}  }
class C{  public InvalidTagException(){}  }
class C{  public static PdfAction createURI(String uri){  return createURI(uri,false);}  }
class C{  private void checkStartLogs(String[] vals){  Enumeration loggerNames=getLoggerNames();  boolean loggingIsActive=false;  boolean levelIsOff=true;  if (vals == null) {    return;  }  for (int i=0; i <= NEWLEVEL; i++) {    if ((vals[i] == null) || (vals[i].length() == 0)) {      return;    }  }  if (vals[NEWSTATUS] != null) {    loggingIsActive=vals[NEWSTATUS].equals("ACTIVE");  }  if (vals[NEWLEVEL] != null) {    levelIsOff=vals[NEWLEVEL].equals("OFF");  }  if (loggingIsActive) {    if (!vals[OLDBACKEND].equals(vals[NEWBACKEND]) || !vals[OLDLOCATION].equals(vals[NEWLOCATION]) || !vals[OLDSECURITYSTATUS].equals(vals[NEWSECURITYSTATUS])|| !vals[OLDSTATUS].equals(vals[NEWSTATUS])|| !vals[OLDLEVEL].equals(vals[NEWLEVEL])) {      loggerNames=getLoggerNames();      String saveLevel=vals[NEWLEVEL];      Level level=Level.INFO;      try {        level=Level.parse(vals[NEWLEVEL]);      } catch (      IllegalArgumentException iaex) {      }      while (loggerNames.hasMoreElements()) {        vals[NEWLEVEL]=saveLevel;        String curEl=(String)loggerNames.nextElement();        if (curEl.length() != 0 && curEl.length() != 0 && !curEl.equals("global")) {          Logger l=(Logger)Logger.getLogger(curEl);          Level tlevel=l.getLevel();          if (levelIsOff) {            if (tlevel != Level.OFF) {              vals[NEWLEVEL]=tlevel.toString();              logIt(l,vals,LogConstants.START_LOG_CONFIG_NAME);            }          } else {            logIt(l,vals,LogConstants.START_LOG_CONFIG_NAME);          }        }      }    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element addrNode;  Attr addrAttr;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("address");  addrNode=(Element)elementList.item(3);  addrAttr=addrNode.getAttributeNode("xmlns");{    boolean success=false;    try {      addrAttr.setPrefix("xxx");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  public void validate(){}  }
class C{  public double noise(double x,double frequency,double amplitude){  return noise(x,0,0,frequency,amplitude);}  }
class C{  public void addInfo(EntriesInfoFieldKey key,String value){  this.entryInfo.put(key.toString(),value);}  }
class C{  public static String encodeHighLevel(String msg,SymbolShapeHint shape,Dimension minSize,Dimension maxSize){  Encoder[] encoders={new ASCIIEncoder(),new C40Encoder(),new TextEncoder(),new X12Encoder(),new EdifactEncoder(),new Base256Encoder()};  EncoderContext context=new EncoderContext(msg);  context.setSymbolShape(shape);  context.setSizeConstraints(minSize,maxSize);  if (msg.startsWith(MACRO_05_HEADER) && msg.endsWith(MACRO_TRAILER)) {    context.writeCodeword(MACRO_05);    context.setSkipAtEnd(2);    context.pos+=MACRO_05_HEADER.length();  } else   if (msg.startsWith(MACRO_06_HEADER) && msg.endsWith(MACRO_TRAILER)) {    context.writeCodeword(MACRO_06);    context.setSkipAtEnd(2);    context.pos+=MACRO_06_HEADER.length();  }  int encodingMode=ASCII_ENCODATION;  while (context.hasMoreCharacters()) {    encoders[encodingMode].encode(context);    if (context.getNewEncoding() >= 0) {      encodingMode=context.getNewEncoding();      context.resetEncoderSignal();    }  }  int len=context.getCodewordCount();  context.updateSymbolInfo();  int capacity=context.getSymbolInfo().getDataCapacity();  if (len < capacity) {    if (encodingMode != ASCII_ENCODATION && encodingMode != BASE256_ENCODATION) {      context.writeCodeword('\u00fe');    }  }  StringBuilder codewords=context.getCodewords();  if (codewords.length() < capacity) {    codewords.append(PAD);  }  while (codewords.length() < capacity) {    codewords.append(randomize253State(PAD,codewords.length() + 1));  }  return context.getCodewords().toString();}  }
class C{  public static void validateOid(int[] oid){  if (oid == null) {    throw new NullPointerException("oid == null");  }  if (oid.length < 2) {    throw new IllegalArgumentException("OID MUST have at least 2 subidentifiers");  }  if (oid[0] > 2) {    throw new IllegalArgumentException("Valid values for first subidentifier are 0, 1 and 2");  } else   if (oid[0] != 2 && oid[1] > 39) {    throw new IllegalArgumentException("If the first subidentifier has 0 or 1 value the second subidentifier value MUST be less than 40");  }}  }
class C{  public IncompleteAnnotationException(Class<? extends Annotation> annotationType,String elementName){  super("The element " + elementName + " is not complete for the annotation "+ annotationType.getName());  this.annotationType=annotationType;  this.elementName=elementName;}  }
class C{  public void stateChanged(ChangeEvent e){  if (e == null) {    throw new NullPointerException();  }  Object newModelValue=model.getValue();  firePropertyChange(ACCESSIBLE_VALUE_PROPERTY,oldModelValue,newModelValue);  firePropertyChange(ACCESSIBLE_TEXT_PROPERTY,null,0);  oldModelValue=newModelValue;}  }
class C{  protected EncodingChunkReader(){}  }
class C{  MonitorMsg(byte[] in,short version) throws DataFormatException {  final ByteArrayScanner scanner=new ByteArrayScanner(in);  if (scanner.nextByte() != MSG_TYPE_REPL_SERVER_MONITOR) {    throw new DataFormatException("input is not a valid " + getClass().getCanonicalName());  }  if (version == ProtocolVersion.REPLICATION_PROTOCOL_V1) {    this.senderID=scanner.nextIntUTF8();    this.destination=scanner.nextIntUTF8();  } else   if (version <= ProtocolVersion.REPLICATION_PROTOCOL_V3) {    this.senderID=scanner.nextShort();    this.destination=scanner.nextShort();  } else {    this.senderID=scanner.nextInt();    this.destination=scanner.nextInt();  }  ASN1Reader asn1Reader=scanner.getASN1Reader();  try {    asn1Reader.readStartSequence();    while (asn1Reader.hasNextElement()) {      ServerState newState=new ServerState();      int serverId=0;      long outime=0;      boolean isLDAPServer=false;      asn1Reader.readStartSequence();      while (asn1Reader.hasNextElement()) {        CSN csn;        if (version >= ProtocolVersion.REPLICATION_PROTOCOL_V7) {          csn=CSN.valueOf(asn1Reader.readOctetString());        } else {          csn=CSN.valueOf(asn1Reader.readOctetStringAsString());        }        if (data.replServerDbState != null && serverId == 0) {          serverId=csn.getServerId();          outime=csn.getTime();          isLDAPServer=csn.getSeqnum() > 0;        } else {          newState.update(csn);        }      }      asn1Reader.readEndSequence();      if (data.replServerDbState == null) {        data.replServerDbState=newState;      } else {        setServerState(serverId,newState,outime,isLDAPServer);      }    }    asn1Reader.readEndSequence();  } catch (  Exception e) {  }}  }
class C{  public boolean contains(PlaPointInt p_point){  return p_point.is_contained_in(bounding_box);}  }
class C{  public String toString(){  StringBuilder toString=new StringBuilder().append("Thread Name: ").append(thread.getName()).append(", Alive: ").append(thread.isAlive());  return toString.toString();}  }
class C{  public Object object(){  return str();}  }
class C{  public void testConstructorSignBytesPositive4(){  byte aBytes[]={127,56,100,-2};  int aSign=1;  byte rBytes[]={127,56,100,-2};  BigInteger aNumber=new BigInteger(aSign,aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  public org.omg.DynamicAny.DynAny create_dyn_any(org.omg.CORBA.Any value) throws org.omg.DynamicAny.DynAnyFactoryPackage.InconsistentTypeCode {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("create_dyn_any",_opsClass);  DynAnyFactoryOperations $self=(DynAnyFactoryOperations)$so.servant;  try {    return $self.create_dyn_any(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public static int combine(int hashCode,long value){  int v=(int)(value ^ (value >>> 32));  return combine(hashCode,v);}  }
class C{  @Override public Binding next() throws NamingException {  return nextElementInternal();}  }
class C{  public SQLTransientException(Throwable cause){  super(cause);}  }
class C{  @SuppressWarnings("unused") @DataProvider(name="testIncludePrecommitProvider") private Object[][] testIncludePrecommitProvider(){  return new Object[][]{{1,new String[]{"inetOrgPerson","displayName"}}};}  }
class C{  public static IOFileFilter falseFileFilter(){  return FalseFileFilter.FALSE;}  }
class C{  public static Cookie newCookie(String name,String value,int maxAge,String path,String domain){  Cookie cookie=null;  if (cookieEncoding) {    cookie=new Cookie(name,URLEncDec.encode(value));  } else {    cookie=new Cookie(name,value);  }  cookie.setMaxAge(maxAge);  if ((path != null) && (path.length() > 0)) {    cookie.setPath(path);  } else {    cookie.setPath("/");  }  if ((domain != null) && (domain.length() > 0)) {    cookie.setDomain(domain);  }  cookie.setSecure(isCookieSecure());  return cookie;}  }
class C{  public static String marshal(TokenRestriction tokenRestriction) throws Exception {  ByteArrayOutputStream bs=new ByteArrayOutputStream();  ObjectOutputStream os=new ObjectOutputStream(bs);  os.writeObject(tokenRestriction);  os.flush();  os.close();  return Base64.encode(bs.toByteArray());}  }
class C{  @Inject public ServerConfigurationFactory(DSConfigMgr config){  this.config=config;}  }
class C{  public static byte[] toByteArray(URI uri) throws IOException {  return IOUtils.toByteArray(uri.toURL());}  }
class C{  public ELException(){  super();}  }
class C{  public void focusLost(FocusEvent e){  ((FocusListener)a).focusLost(e);  ((FocusListener)b).focusLost(e);}  }
class C{  public static void removeServersFromSite(SSOToken ssoToken,String siteName,Collection serverInstanceNames) throws SMSException, SSOException, ConfigurationException {  String siteId=getSiteId(ssoToken,siteName);  if (siteId != null) {    for (Iterator i=serverInstanceNames.iterator(); i.hasNext(); ) {      String svr=(String)i.next();      ServerConfiguration.removeFromSite(ssoToken,svr,siteName);    }  }}  }
class C{  @Override public void removeService(Service service){synchronized (servicesLock) {    int j=-1;    for (int i=0; i < services.length; i++) {      if (service == services[i]) {        j=i;        break;      }    }    if (j < 0)     return;    try {      services[j].stop();    } catch (    LifecycleException e) {    }    int k=0;    Service results[]=new Service[services.length - 1];    for (int i=0; i < services.length; i++) {      if (i != j)       results[k++]=services[i];    }    services=results;    support.firePropertyChange("service",service,null);  }}  }
class C{  private NSObject parseDateString(){  String numericalString=parseString();  if (numericalString.length() > 4 && numericalString.charAt(4) == DATE_DATE_FIELD_DELIMITER) {    try {      return new NSDate(numericalString);    } catch (    Exception ex) {    }  }  return new NSString(numericalString);}  }
class C{  public String transformToString(ElemTemplateElement elem) throws TransformerException {  ElemTemplateElement firstChild=elem.getFirstChildElem();  if (null == firstChild)   return "";  if (elem.hasTextLitOnly() && m_optimizer) {    return ((ElemTextLiteral)firstChild).getNodeValue();  }  SerializationHandler savedRTreeHandler=this.m_serializationHandler;  StringWriter sw=(StringWriter)m_stringWriterObjectPool.getInstance();  m_serializationHandler=(ToTextStream)m_textResultHandlerObjectPool.getInstance();  if (null == m_serializationHandler) {    Serializer serializer=org.apache.xml.serializer.SerializerFactory.getSerializer(m_textformat.getProperties());    m_serializationHandler=(SerializationHandler)serializer;  }  m_serializationHandler.setTransformer(this);  m_serializationHandler.setWriter(sw);  String result;  try {    executeChildTemplates(elem,true);    this.m_serializationHandler.endDocument();    result=sw.toString();  } catch (  org.xml.sax.SAXException se) {    throw new TransformerException(se);  } finally {    sw.getBuffer().setLength(0);    try {      sw.close();    } catch (    Exception ioe) {    }    m_stringWriterObjectPool.freeInstance(sw);    m_serializationHandler.reset();    m_textResultHandlerObjectPool.freeInstance(m_serializationHandler);    m_serializationHandler=savedRTreeHandler;  }  return result;}  }
class C{  public String toString(boolean includeNS,boolean declareNS,boolean includeHeader){  if (signed && (xmlString != null)) {    return xmlString;  }  StringBuffer xml=new StringBuffer(300);  if (includeHeader) {    xml.append("<?xml version=\"1.0\" encoding=\"").append(SAMLConstants.DEFAULT_ENCODING).append("\" ?>\n");  }  String prefix="";  String uri="";  if (includeNS) {    prefix=SAMLConstants.PROTOCOL_PREFIX;  }  if (declareNS) {    uri=SAMLConstants.PROTOCOL_NAMESPACE_STRING;  }  String instantString=DateUtils.toUTCDateFormat(issueInstant);  xml.append("<").append(prefix).append("Request").append(uri).append(" RequestID=\"").append(requestID).append("\"").append(" MajorVersion=\"").append(majorVersion).append("\"").append(" MinorVersion=\"").append(minorVersion).append("\"").append(" IssueInstant=\"").append(instantString).append("\"").append(">\n");  if ((respondWiths != null) && (respondWiths != Collections.EMPTY_LIST)) {    Iterator i=respondWiths.iterator();    String respondWith=null;    while (i.hasNext()) {      respondWith=(String)i.next();      xml.append("<").append(prefix).append("RespondWith>");      if (respondWith.startsWith(SAMLConstants.ASSERTION_PREFIX)) {        xml.append(respondWith);      } else {        try {          xml.append(checkAndGetRespondWith(respondWith));        } catch (        SAMLException e) {          SAMLUtils.debug.error("Request.toString: ",e);          xml.append(respondWith);        }      }      xml.append("</").append(prefix).append("RespondWith>\n");    }  }  if (signed) {    if (signatureString != null) {      xml.append(signatureString);    } else     if (signature != null) {      signatureString=XMLUtils.print(signature);      xml.append(signatureString);    }  }  Iterator j;switch (contentType) {case AUTHENTICATION_QUERY:    xml.append(((AuthenticationQuery)query).toString(includeNS,false));  break;case AUTHORIZATION_DECISION_QUERY:xml.append(((AuthorizationDecisionQuery)query).toString(includeNS,false));break;case ATTRIBUTE_QUERY:xml.append(((AttributeQuery)query).toString(includeNS,false));break;case ASSERTION_ID_REFERENCE:j=assertionIDRefs.iterator();while (j.hasNext()) {xml.append(((AssertionIDReference)j.next()).toString(true,true));}break;case ASSERTION_ARTIFACT:j=artifacts.iterator();while (j.hasNext()) {xml.append(((AssertionArtifact)j.next()).toString(includeNS,false));}break;default :break;}xml.append("</").append(prefix).append("Request>\n");return xml.toString();}  }
class C{  public void endElement(String uri,String localName,String qName) throws SAXException {}  }
class C{  public boolean isConnectionRegistered(ConnectionWrapper conn){  for (  String key : connectionTable.keySet()) {    final ConnectionRecord cr=connectionTable.get(key);    if (cr.conn != null) {      final ConnectionWrapper c=cr.conn.getConnectionWrapper();      if (c.getHostPort().equals(conn.getHostPort()) && c.getBindDn().equals(conn.getBindDn()) && c.getBindPassword().equals(conn.getBindPassword())&& c.getConnectionType() == conn.getConnectionType()) {        return true;      }    }  }  return false;}  }
class C{  protected boolean arePathsContiguous(TreePath[] paths){  if (rowMapper == null || paths.length < 2)   return true; else {    BitSet bitSet=new BitSet(32);    int anIndex, counter, min;    int pathCount=paths.length;    int validCount=0;    TreePath[] tempPath=new TreePath[1];    tempPath[0]=paths[0];    min=rowMapper.getRowsForPaths(tempPath)[0];    for (counter=0; counter < pathCount; counter++) {      if (paths[counter] != null) {        tempPath[0]=paths[counter];        int[] rows=rowMapper.getRowsForPaths(tempPath);        if (rows == null) {          return false;        }        anIndex=rows[0];        if (anIndex == -1 || anIndex < (min - pathCount) || anIndex > (min + pathCount))         return false;        if (anIndex < min)         min=anIndex;        if (!bitSet.get(anIndex)) {          bitSet.set(anIndex);          validCount++;        }      }    }    int maxCounter=validCount + min;    for (counter=min; counter < maxCounter; counter++)     if (!bitSet.get(counter))     return false;  }  return true;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.MgmtDataElement createMgmtDataElement(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.MgmtDataElementImpl(value);}  }
class C{  ADSContextException(ErrorType error){  this(error,null);}  }
class C{  public static Object[] copyObjects(Object[] obj,ORB orb) throws RemoteException {  if (utilDelegate != null) {    return utilDelegate.copyObjects(obj,orb);  }  return null;}  }
class C{  public static Map<String,String> fetchVarParams(QueryRequest request){  Map<String,String> wfParams=new HashMap<String,String>();  Iterator<Entry<String,String>> itAll=request.getAdditionalParameters().entrySet().iterator();  while (itAll.hasNext()) {    Map.Entry<String,String> e=itAll.next();    if ((e.getKey().startsWith(ActivitiConstants.VARIABLE_QUERY_PREFIX))) {      wfParams.put(e.getKey().substring(4),e.getValue());    }  }  return wfParams;}  }
class C{  public NameAlreadyBoundException(String explanation){  super(explanation);}  }
class C{  private void generateInstanceCertificateIfAbsent() throws InitializationException {  final String certAlias=ADS_CERTIFICATE_ALIAS;  try {    if (certificateManager.aliasInUse(certAlias)) {      return;    }  } catch (  Exception e) {    LocalizableMessage message=ERR_TRUSTSTORE_CANNOT_ADD_CERT.get(certAlias,trustStoreFile,getExceptionMessage(e));    throw new InitializationException(message,e);  }  try {    final KeyType keyType=KeyType.getTypeOrDefault(certAlias);    certificateManager.generateSelfSignedCertificate(keyType,certAlias,getADSCertificateSubjectDN(keyType),getADSCertificateValidity());  } catch (  Exception e) {    LocalizableMessage message=ERR_TRUSTSTORE_CANNOT_GENERATE_CERT.get(certAlias,trustStoreFile,getExceptionMessage(e));    throw new InitializationException(message,e);  }}  }
class C{  public void testRadix2Pos(){  String value="101000011111000000110101010101010101010001001010101010101010010101010101010000100010010";  int radix=2;  BigInteger aNumber=new BigInteger(value,radix);  String result=aNumber.toString(radix);  assertTrue(result.equals(value));}  }
class C{  protected SetOfIntegerSyntax(String members){  this.members=parse(members);}  }
class C{  private synchronized void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if ((handler=getURLStreamHandler(protocol)) == null) {    throw new IOException("unknown protocol: " + protocol);  }  if (authority == null && ((host != null && host.length() > 0) || port != -1)) {    if (host == null)     host="";    authority=(port == -1) ? host : host + ":" + port;    int at=host.lastIndexOf('@');    if (at != -1) {      userInfo=host.substring(0,at);      host=host.substring(at + 1);    }  } else   if (authority != null) {    int ind=authority.indexOf('@');    if (ind != -1)     userInfo=authority.substring(0,ind);  }  path=null;  query=null;  if (file != null) {    int q=file.lastIndexOf('?');    if (q != -1) {      query=file.substring(q + 1);      path=file.substring(0,q);    } else     path=file;  }}  }
class C{  StringBuilder toNormalizedUrlSafeString(final StringBuilder builder){switch (size()) {case 0:    if (this == MIN_VALUE) {      builder.append(RDN_CHAR_SEPARATOR);    } else {      builder.append(AVA_CHAR_SEPARATOR);    }  break;case 1:getFirstAVA().toNormalizedUrlSafe(builder);break;default :Iterator<AVA> it=getSortedAvas();it.next().toNormalizedUrlSafe(builder);while (it.hasNext()) {builder.append(AVA_CHAR_SEPARATOR);it.next().toNormalizedUrlSafe(builder);}break;}return builder;}  }
class C{  public void resetPairs(){  PairedTextEncodedStringNullTerminated.ValuePairs value=((PairedTextEncodedStringNullTerminated)getObject(DataTypes.OBJ_TEXT)).getValue();  value.getMapping().clear();}  }
class C{  @Override public long dynamicQueryCount(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery){  return _fooLocalService.dynamicQueryCount(dynamicQuery);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.ConditionAbstractType createConditionAbstractType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.ConditionAbstractTypeImpl();}  }
class C{  public boolean visitTopLevelVariableOrParamDecl(ElemTemplateElement elem){  return true;}  }
class C{  final long now(){  return System.nanoTime();}  }
class C{  public void test_putLjava_lang_ObjectLjava_lang_Object(){  hm.put("KEY","VALUE");  assertEquals("Failed to install key/value pair","VALUE",hm.get("KEY"));  LinkedHashMap m=new LinkedHashMap();  m.put(new Short((short)0),"short");  m.put(null,"test");  m.put(new Integer(0),"int");  assertEquals("Failed adding to bucket containing null","short",m.get(new Short((short)0)));  assertEquals("Failed adding to bucket containing null2","int",m.get(new Integer(0)));}  }
class C{  private void doRequestProcessing(HttpServletRequest request,HttpServletResponse response,ProviderDescriptorType hostedProviderDesc,BaseConfigType hostedConfig,String hostedProviderRole,String realm,String hostedEntityId,String providerAlias,FSNameRegistrationRequest regisRequest){  FSUtils.debug.message("Entered FSRegistrationRequestServlet::doRequestProcessing");  String remoteEntityId=regisRequest.getProviderId();  String retURL=null;  ProviderDescriptorType remoteDesc=null;  boolean isIDP=false;  try {    if (hostedProviderRole.equalsIgnoreCase(IFSConstants.SP)) {      remoteDesc=metaManager.getIDPDescriptor(realm,remoteEntityId);      isIDP=true;    } else {      remoteDesc=metaManager.getSPDescriptor(realm,remoteEntityId);    }    retURL=remoteDesc.getRegisterNameIdentifierServiceReturnURL();  } catch (  IDFFMetaException e) {    FSUtils.debug.error("FSRegistrationRequestServlet.doRequest " + "Processing: Can not retrieve remote provider data." + remoteEntityId);    String[] data={remoteEntityId,realm};    LogUtil.error(Level.INFO,LogUtil.INVALID_PROVIDER,data);    FSServiceUtils.returnToSource(response,retURL,COMMON_ERROR_PAGE,IFSConstants.REGISTRATION_FAILED,IFSConstants.METADATA_ERROR);    return;  }  boolean bVerify=true;  if (FSServiceUtils.isSigningOn()) {    try {      if (remoteDesc != null) {        FSUtils.debug.message("Calling verifyRegistrationSignature");        bVerify=verifyRegistrationSignature(request,remoteDesc,remoteEntityId,isIDP);      } else {        FSUtils.debug.error("Cannot retrieve provider descriptor.");        String[] data={remoteEntityId,realm};        LogUtil.error(Level.INFO,LogUtil.INVALID_PROVIDER,data);        FSServiceUtils.returnToSource(response,retURL,COMMON_ERROR_PAGE,IFSConstants.REGISTRATION_FAILED,IFSConstants.METADATA_ERROR);        return;      }    } catch (    FSException e) {      FSUtils.debug.error("FSRegistrationRequestServlet::processRegistrationRequest " + "Signature on registration request is invalid" + "Cannot proceed federation registration");      String[] data={FSUtils.bundle.getString(IFSConstants.REGISTRATION_INVALID_SIGNATURE)};      LogUtil.error(Level.INFO,LogUtil.INVALID_SIGNATURE,data);      FSServiceUtils.returnToSource(response,retURL,COMMON_ERROR_PAGE,IFSConstants.REGISTRATION_FAILED,IFSConstants.METADATA_ERROR);      return;    }catch (    SAMLException e) {      FSUtils.debug.error("FSRegistrationRequestServlet::processRegistrationRequest" + "Signature on registration request is invalid" + "Cannot proceed federation registration");      String[] data={FSUtils.bundle.getString(IFSConstants.REGISTRATION_INVALID_SIGNATURE)};      LogUtil.error(Level.INFO,LogUtil.INVALID_SIGNATURE,data);      FSServiceUtils.returnToSource(response,retURL,COMMON_ERROR_PAGE,IFSConstants.REGISTRATION_FAILED,IFSConstants.METADATA_ERROR);      return;    }  }  if (bVerify) {    if (metaManager.isTrustedProvider(realm,hostedEntityId,remoteEntityId)) {      FSNameRegistrationHandler regisHandler=new FSNameRegistrationHandler();      if (regisHandler != null) {        regisHandler.setHostedDescriptor(hostedProviderDesc);        regisHandler.setHostedDescriptorConfig(hostedConfig);        regisHandler.setRemoteDescriptor(remoteDesc);        regisHandler.setRemoteEntityId(remoteEntityId);        regisHandler.setHostedEntityId(hostedEntityId);        regisHandler.setHostedProviderRole(hostedProviderRole);        regisHandler.setMetaAlias(providerAlias);        regisHandler.setRealm(realm);        regisHandler.processRegistrationRequest(request,response,regisRequest);        return;      } else {        FSUtils.debug.error("Unable to get registration " + "handler. User account Not valid");      }    } else {      FSUtils.debug.error("Remote provider not in trusted list");    }  } else {    FSUtils.debug.error("FSRegistrationRequestServlet::doRequestProcesing " + "Signature on registration request is invalid" + "Cannot proceed name registration");    String[] data={FSUtils.bundle.getString(IFSConstants.REGISTRATION_INVALID_SIGNATURE)};    LogUtil.error(Level.INFO,LogUtil.INVALID_SIGNATURE,data);  }  FSServiceUtils.returnToSource(response,retURL,COMMON_ERROR_PAGE,IFSConstants.REGISTRATION_FAILED,IFSConstants.METADATA_ERROR);  return;}  }
class C{  private static void assertFieldName(String fieldName) throws XMPException {  if (fieldName == null || fieldName.length() == 0) {    throw new XMPException("Empty f name",XMPError.BADXPATH);  }}  }
class C{  @AfterClass(alwaysRun=true) public void clearSuccessfulTestParams2(){  Set<Object[]> paramsSet=successfulTestParams.keySet();  if (paramsSet == null) {    return;  }  for (  Object[] params : paramsSet) {    if (failedTestParams.containsKey(params)) {      continue;    }    for (int i=0; i < params.length; i++) {      params[i]=null;    }  }  successfulTestParams.clear();  failedTestParams.clear();}  }
class C{  PersistentServerState(DN baseDN,int serverId,ServerState state){  this.baseDN=baseDN;  this.serverId=serverId;  this.state=state;  loadState();}  }
class C{  public Assertion(String assertionID,java.lang.String issuer,Date issueInstant,Set statements) throws SAMLException {  super(assertionID,issuer,issueInstant,statements);}  }
class C{  public void show(@IdRes final int itemId){  map.add(itemId);  navigation.invalidateBadge(itemId);}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  String schemaType=getStringOptionValue(IArgument.SCHEMA_TYPE);  String subSchemaName=getStringOptionValue(IArgument.SUBSCHEMA_NAME);  String inheritance=getStringOptionValue(ARGUMENT_INHERITANCE);  IOutput outputWriter=getOutputWriter();  String[] params={serviceName,schemaType,subSchemaName};  ServiceSchema ss=getServiceSchema();  try {    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_MODIFY_INHERITANCE_SUB_SCHEMA",params);    ss.setInheritance(inheritance);    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_MODIFY_INHERITANCE_SUB_SCHEMA",params);    outputWriter.printlnMessage(MessageFormat.format(getResourceString("modify-inheritance-succeed"),(Object[])params));  } catch (  SSOException e) {    String[] args={serviceName,schemaType,subSchemaName,e.getMessage()};    debugError("ModifyInheritance.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_MODIFY_INHERITANCE_SUB_SCHEMA",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={serviceName,schemaType,subSchemaName,e.getMessage()};    debugError("ModifyInheritance.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_MODIFY_INHERITANCE_SUB_SCHEMA",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public BatchUpdateException(Throwable cause){  this(null,cause);}  }
class C{  private static char checkQuotes(String quotes,char openQuote) throws XMPException {  char closeQuote;  int charKind=classifyCharacter(openQuote);  if (charKind != UCK_QUOTE) {    throw new XMPException("Invalid quoting character",XMPError.BADPARAM);  }  if (quotes.length() == 1) {    closeQuote=openQuote;  } else {    closeQuote=quotes.charAt(1);    charKind=classifyCharacter(closeQuote);    if (charKind != UCK_QUOTE) {      throw new XMPException("Invalid quoting character",XMPError.BADPARAM);    }  }  if (closeQuote != getClosingQuote(openQuote)) {    throw new XMPException("Mismatched quote pair",XMPError.BADPARAM);  }  return closeQuote;}  }
class C{  private void select(JSpinner spinner){  JComponent editor=spinner.getEditor();  if (editor instanceof JSpinner.DateEditor) {    JSpinner.DateEditor dateEditor=(JSpinner.DateEditor)editor;    JFormattedTextField ftf=dateEditor.getTextField();    Format format=dateEditor.getFormat();    Object value;    if (format != null && (value=spinner.getValue()) != null) {      SpinnerDateModel model=dateEditor.getModel();      DateFormat.Field field=DateFormat.Field.ofCalendarField(model.getCalendarField());      if (field != null) {        try {          AttributedCharacterIterator iterator=format.formatToCharacterIterator(value);          if (!select(ftf,iterator,field) && field == DateFormat.Field.HOUR0) {            select(ftf,iterator,DateFormat.Field.HOUR1);          }        } catch (        IllegalArgumentException iae) {        }      }    }  }}  }
class C{  public static SearchRequest newSearchRequest(final DN name,final SearchScope scope,final SearchFilter filter,final String... attributeDescriptions) throws NullPointerException {  Reject.ifNull(name,scope,filter);  final SearchRequest request=new SearchRequest(name,scope,filter);  for (  final String attributeDescription : attributeDescriptions) {    request.addAttribute(attributeDescription);  }  return request;}  }
class C{  public void destroy() throws org.omg.CosNaming.NamingContextPackage.NotEmpty {  org.omg.CORBA.portable.InputStream $in=null;  try {    org.omg.CORBA.portable.OutputStream $out=_request("destroy",true);    $in=_invoke($out);    return;  } catch (  org.omg.CORBA.portable.ApplicationException $ex) {    $in=$ex.getInputStream();    String _id=$ex.getId();    if (_id.equals("IDL:omg.org/CosNaming/NamingContext/NotEmpty:1.0"))     throw org.omg.CosNaming.NamingContextPackage.NotEmptyHelper.read($in); else     throw new org.omg.CORBA.MARSHAL(_id);  }catch (  org.omg.CORBA.portable.RemarshalException $rm) {    destroy();  } finally {    _releaseReply($in);  }}  }
class C{  public short acceptNode(int n,XPathContext xctxt){  try {    xctxt.pushCurrentNode(n);    xctxt.pushIteratorRoot(m_context);    if (DEBUG) {      System.out.println("traverser: " + m_traverser);      System.out.print("node: " + n);      System.out.println(", " + m_cdtm.getNodeName(n));      System.out.println("pattern: " + m_pattern.toString());      m_pattern.debugWhatToShow(m_pattern.getWhatToShow());    }    XObject score=m_pattern.execute(xctxt);    if (DEBUG) {      System.out.println("score: " + score);      System.out.println("skip: " + (score == NodeTest.SCORE_NONE));    }    return (score == NodeTest.SCORE_NONE) ? DTMIterator.FILTER_SKIP : DTMIterator.FILTER_ACCEPT;  } catch (  javax.xml.transform.TransformerException se) {    throw new RuntimeException(se.getMessage());  } finally {    xctxt.popCurrentNode();    xctxt.popIteratorRoot();  }}  }
class C{  public int compare(File file1,File file2){  return caseSensitivity.checkCompareTo(file1.getPath(),file2.getPath());}  }
class C{  public void finalizeGroupManager(){  DirectoryServer.deregisterInternalPlugin(this);  DirectoryServer.deregisterBackendInitializationListener(this);  deregisterAllGroups();  for (  Group<?> groupImplementation : groupImplementations.values()) {    groupImplementation.finalizeGroupImplementation();  }  groupImplementations.clear();}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public void removeListener(PrintStreamListener listener){  listeners.remove(listener);}  }
class C{  public int indexOf(Object elem,int index){  return delegate.indexOf(elem,index);}  }
class C{  @Override public void run(){  long latestCount=keyCount;  long deltaCount=latestCount - previousCount;  long latestTime=System.currentTimeMillis();  long deltaTime=latestTime - previousTime;  if (deltaTime == 0) {    return;  }  float rate=1000f * deltaCount / deltaTime;  logger.info(NOTE_VERIFY_PROGRESS_REPORT,latestCount,totalCount,errorCount,rate);  try {    Runtime runtime=Runtime.getRuntime();    long freeMemory=runtime.freeMemory() / MB;    float cacheMissRate=0;    logger.debug(INFO_CACHE_AND_MEMORY_REPORT,freeMemory,cacheMissRate);  } catch (  StorageRuntimeException e) {    logger.traceException(e);  }  previousCount=latestCount;  previousTime=latestTime;}  }
class C{  public E peek(int n) throws EmptyStackException {  int m=(size() - n) - 1;  if (m < 0) {    throw new EmptyStackException();  } else {    return get(m);  }}  }
class C{  public Builder optionalAttributes(final String... attributeNamesOrOIDs){  this.optionalAttributeOIDs.addAll(asList(attributeNamesOrOIDs));  return this;}  }
class C{  public static void main(String[] args){  try {    ControlPanelLog.initLogFileHandler(File.createTempFile(LOG_FILE_PREFIX,LOG_FILE_SUFFIX));  } catch (  Throwable t) {    System.err.println("Unable to initialize log");    t.printStackTrace();  }  argParser=new ControlPanelArgumentParser(ControlPanelLauncher.class.getName(),INFO_CONTROL_PANEL_LAUNCHER_USAGE_DESCRIPTION.get());  try {    argParser.initializeArguments();    argParser.parseArguments(args);  } catch (  ArgumentException ae) {    argParser.displayMessageAndUsageReference(System.err,ERR_ERROR_PARSING_ARGS.get(ae.getMessage()));    System.exit(ErrorReturnCode.ERROR_PARSING_ARGS.getReturnCode());  }  if (argParser.usageOrVersionDisplayed()) {    ControlPanelLog.closeAndDeleteLogFile();    System.exit(ErrorReturnCode.SUCCESSFUL_NOP.getReturnCode());  }  if (!argParser.isRemote()) {    try {      BuildVersion.checkVersionMismatch();    } catch (    InitializationException e) {      System.err.println(wrapText(e.getMessage(),MAX_LINE_WIDTH));      System.exit(ErrorReturnCode.ERROR_UNEXPECTED.getReturnCode());    }  }  if (!argParser.usageOrVersionDisplayed()) {    int exitCode=launchControlPanel(args);    if (exitCode != 0) {      String logFileName=null;      if (ControlPanelLog.getLogFile() != null) {        logFileName=ControlPanelLog.getLogFile().toString();      }      if (logFileName != null) {        System.err.println(wrapText(ERR_CONTROL_PANEL_LAUNCHER_GUI_LAUNCH_FAILED_DETAILS.get(logFileName),Utils.getCommandLineMaxLineWidth()));      } else {        System.err.println(wrapText(ERR_CONTROL_PANEL_LAUNCHER_GUI_LAUNCH_FAILED.get(),Utils.getCommandLineMaxLineWidth()));      }      System.exit(exitCode);    }  }  ControlPanelLog.closeAndDeleteLogFile();}  }
class C{  protected static void processCRLB1(DistributionPoint dp,Object cert,X509CRL crl) throws AnnotatedException {  ASN1Primitive idp=CertPathValidatorUtilities.getExtensionValue(crl,ISSUING_DISTRIBUTION_POINT);  boolean isIndirect=false;  if (idp != null) {    if (IssuingDistributionPoint.getInstance(idp).isIndirectCRL()) {      isIndirect=true;    }  }  byte[] issuerBytes=CertPathValidatorUtilities.getIssuerPrincipal(crl).getEncoded();  boolean matchIssuer=false;  if (dp.getCRLIssuer() != null) {    GeneralName genNames[]=dp.getCRLIssuer().getNames();    for (int j=0; j < genNames.length; j++) {      if (genNames[j].getTagNo() == GeneralName.directoryName) {        try {          if (Arrays.areEqual(genNames[j].getName().toASN1Primitive().getEncoded(),issuerBytes)) {            matchIssuer=true;          }        } catch (        IOException e) {          throw new AnnotatedException("CRL issuer information from distribution point cannot be decoded.",e);        }      }    }    if (matchIssuer && !isIndirect) {      throw new AnnotatedException("Distribution point contains cRLIssuer field but CRL is not indirect.");    }    if (!matchIssuer) {      throw new AnnotatedException("CRL issuer of CRL does not match CRL issuer of distribution point.");    }  } else {    if (CertPathValidatorUtilities.getIssuerPrincipal(crl).equals(CertPathValidatorUtilities.getEncodedIssuerPrincipal(cert))) {      matchIssuer=true;    }  }  if (!matchIssuer) {    throw new AnnotatedException("Cannot find matching CRL issuer for certificate.");  }}  }
class C{  protected PaperOnboardingPage toggleToNextElement(){  if (mActiveElementIndex + 1 < mElements.size()) {    mActiveElementIndex++;    return mElements.size() > mActiveElementIndex ? mElements.get(mActiveElementIndex) : null;  } else   return null;}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.ResourceIDElement createResourceIDElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.ResourceIDElementImpl();}  }
class C{  public com.sun.identity.saml2.jaxb.entityconfig.ValueElement createValueElement(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.entityconfig.impl.ValueElementImpl(value);}  }
class C{  public String findWithinHorizon(String pattern,int horizon){  return findWithinHorizon(patternCache.forName(pattern),horizon);}  }
class C{  public PluginResult.PreParse invokePreParseSearchPlugins(PreParseSearchOperation searchOperation) throws CanceledOperationException {  PluginResult.PreParse result=null;  for (  DirectoryServerPlugin p : preParseSearchPlugins) {    if (isInternalOperation(searchOperation,p)) {      continue;    }    try {      result=p.doPreParse(searchOperation);    } catch (    CanceledOperationException coe) {      throw coe;    }catch (    Exception e) {      return handlePreParseException(e,searchOperation,p);    }    if (result == null) {      return handlePreParseResult(searchOperation,p);    } else     if (!result.continuePluginProcessing()) {      return result;    }  }  if (result == null) {    result=PluginResult.PreParse.continueOperationProcessing();  }  return result;}  }
class C{  public void store() throws SAMLException {  try {    keyProvider.store();  } catch (  KeyStoreException e) {    throw new SAMLException(e.getMessage());  }catch (  CertificateException e) {    throw new SAMLException(e.getMessage());  }catch (  NoSuchAlgorithmException e) {    throw new SAMLException(e.getMessage());  }catch (  IOException e) {    throw new SAMLException(e.getMessage());  }}  }
class C{  public AMPostViewBean(){  super(PAGE_NAME);  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  @Override public Promise<ActionResponse,ResourceException> actionCollection(Context context,ActionRequest request){  return RestUtils.generateUnsupportedOperation();}  }
class C{  public NSObject put(String key,Object obj){  return put(key,NSObject.wrap(obj));}  }
class C{  protected void addImpl(Component comp,Object constraints,int index){  if (comp instanceof Separator) {    if (getOrientation() == VERTICAL) {      ((Separator)comp).setOrientation(JSeparator.HORIZONTAL);    } else {      ((Separator)comp).setOrientation(JSeparator.VERTICAL);    }  }  super.addImpl(comp,constraints,index);  if (comp instanceof JButton) {    ((JButton)comp).setDefaultCapable(false);  }}  }
class C{  public AMSearchResults searchUsers(String wildcard,AMSearchControl searchControl,String avfilter) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(USER),getSearchFilter(AMObject.USER),wildcard,searchControl,avfilter);}  }
class C{  public static void copyJarFile(String srcDir,String destDir,String filename) throws Exception {  String src=srcDir + FILE_SEP + filename;  String dest=destDir + FILE_SEP + filename;  JarInputStream jarIn=null;  JarOutputStream jarOut=null;  try {    jarIn=new JarInputStream(new FileInputStream(src));    jarOut=new JarOutputStream(new FileOutputStream(dest));    byte[] buffer=new byte[4096];    JarEntry entry;    while ((entry=jarIn.getNextJarEntry()) != null) {      jarOut.putNextEntry(entry);      int bytesRead;      while ((bytesRead=jarIn.read(buffer)) != -1) {        jarOut.write(buffer,0,bytesRead);      }    }  } catch (  Exception e) {    Debug.log("FileUtils.copyJarFile(): Error occurred while copying " + "jar file: " + src + " to: "+ dest,e);    throw e;  } finally {    if (jarIn != null) {      try {        jarIn.close();      } catch (      IOException e) {        Debug.log("FileUtils.copyJarFile(): Error occurred while " + "closing input stream for: " + src);      }    }    if (jarOut != null) {      try {        jarOut.flush();        jarOut.close();      } catch (      IOException e) {        Debug.log("FileUtils.copyJarFile(): Error occurred while " + "closing output stream for: " + dest);      }    }  }}  }
class C{  private void raiseErrorEvent(int dialogTimeoutError){  raiseErrorEvent(dialogTimeoutError,null);}  }
class C{  public void auditAccessDenied(String resource,String action,String authzModule,SSOToken token){  init();  if (authzLogger != null && msgProvider != null) {    final LogRecord record=msgProvider.createLogRecord("ACCESS_DENY",new String[]{"DENY > " + resource,action,authzModule},token);    if (record != null) {      authzLogger.log(record,AccessController.doPrivileged(AdminTokenAction.getInstance()));    }  }}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  public void editingCanceled(ChangeEvent e){  getHandler().editingCanceled(e);}  }
class C{  private void verifyCommit(LoginModule... modules) throws LoginException {  for (  LoginModule module : modules) {    verify(module).commit();  }}  }
class C{  public AMPostCallBackException(String msg,String errorCode){  super(msg,errorCode);}  }
class C{  public Leaves(final Material type,TreeSpecies species,boolean isDecayable){  super(type,species);  setDecayable(isDecayable);}  }
class C{  public static void closeSession() throws HibernateException {  Session session=(Session)threadLocal.get();  threadLocal.set(null);  if (session != null) {    session.close();  }}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER'";  db.execSQL(sql);}  }
class C{  @SuppressWarnings("WeakerAccess") public void updateData(@Nullable OrderedRealmCollection<T> data){  if (hasAutoUpdates) {    if (adapterData != null) {      removeListener(adapterData);    }    if (data != null) {      addListener(data);    }  }  this.adapterData=data;  notifyDataSetChanged();}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.RequireClientEntropyElement createRequireClientEntropyElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.RequireClientEntropyElementImpl();}  }
class C{  public static void putLong(String key,long value){  if (mSharedPreferences == null) {    return;  }  Editor editor=mSharedPreferences.edit();  editor.putLong(key,value);  editor.apply();}  }
class C{  public static List<Foo> findAll(){  return getPersistence().findAll();}  }
class C{  public void addColumn(Object columnName,Vector columnData){  columnIdentifiers.addElement(columnName);  if (columnData != null) {    int columnSize=columnData.size();    if (columnSize > getRowCount()) {      dataVector.setSize(columnSize);    }    justifyRows(0,getRowCount());    int newColumn=getColumnCount() - 1;    for (int i=0; i < columnSize; i++) {      Vector row=(Vector)dataVector.elementAt(i);      row.setElementAt(columnData.elementAt(i),newColumn);    }  } else {    justifyRows(0,getRowCount());  }  fireTableStructureChanged();}  }
class C{  public void deleteChar(AttributedCharacterIterator newParagraph,int deletePos){  fStart=newParagraph.getBeginIndex();  int end=newParagraph.getEndIndex();  if (end - fStart != fChars.length - 1) {    initAll(newParagraph);  }  char[] newChars=new char[end - fStart];  int changedIndex=deletePos - fStart;  System.arraycopy(fChars,0,newChars,0,deletePos - fStart);  System.arraycopy(fChars,changedIndex + 1,newChars,changedIndex,end - deletePos);  fChars=newChars;  if (fBidi != null) {    fBidi=new Bidi(newParagraph);    if (fBidi.isLeftToRight()) {      fBidi=null;    }  }  fParagraph=StyledParagraph.deleteChar(newParagraph,fChars,deletePos,fParagraph);  invalidateComponents();}  }
class C{  private void fillOccupation(int time,int duration){  for (int i=0; i < duration; i++) {    occupationTable[time + i]++;  }}  }
class C{  public TextLayout nextLayout(float wrappingWidth,int offsetLimit,boolean requireNextWord){  if (pos < limit) {    int layoutLimit=nextOffset(wrappingWidth,offsetLimit,requireNextWord);    if (layoutLimit == pos) {      return null;    }    TextLayout result=measurer.getLayout(pos,layoutLimit);    pos=layoutLimit;    return result;  } else {    return null;  }}  }
class C{  private static final String[] split(String path,String pat){  Vector<String> comps=new Vector<>();  int pos=path.indexOf(pat);  int start=0;  while (pos >= 0) {    if (pos > start) {      String comp=path.substring(start,pos);      comps.add(comp);    }    start=pos + pat.length();    pos=path.indexOf(pat,start);  }  if (start < path.length()) {    comps.add(path.substring(start));  }  String[] result=new String[comps.size()];  for (int i=0; i < comps.size(); i++) {    result[i]=comps.elementAt(i);  }  return result;}  }
class C{  public static void cacheResult(Foo foo){  getPersistence().cacheResult(foo);}  }
class C{  @Override public Foo fetchByUuid_Last(String uuid,OrderByComparator<Foo> orderByComparator){  int count=countByUuid(uuid);  if (count == 0) {    return null;  }  List<Foo> list=findByUuid(uuid,count - 1,count,orderByComparator);  if (!list.isEmpty()) {    return list.get(0);  }  return null;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.AuthnResponseEnvelopeElement createAuthnResponseEnvelopeElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.AuthnResponseEnvelopeElementImpl();}  }
class C{  public boolean is_trace_obstacle(BrdItem p_item){  for (int index=0; index < net_nos_arr.length; ++index) {    if (!p_item.is_trace_obstacle(net_nos_arr[index]))     return false;  }  return true;}  }
class C{  public IncompatibleClassChangeError(){  super();}  }
class C{  public static JButton makeJButton(LocalizableMessage label,LocalizableMessage tooltip){  JButton b=new JButton();  if (label != null) {    b.setText(label.toString());  }  if (tooltip != null) {    b.setToolTipText(tooltip.toString());  }  b.setOpaque(false);  return b;}  }
class C{  protected String toDisplayString(String resourceBundleName,Locale locale){  loadResourceBundle(resourceBundleName,locale);  Object o=table.get(locale);  if (o != null && o instanceof Hashtable) {    Hashtable resourceTable=(Hashtable)o;    o=resourceTable.get(key);    if (o != null && o instanceof String) {      return (String)o;    }  }  return key;}  }
class C{  public ShapeTileBox bounding_box(){  if (bounding_box != null)   return bounding_box;  PlaPointFloat start_corner=start_point_approx();  PlaPointFloat end_corner=end_point_approx();  double llx=Math.min(start_corner.v_x,end_corner.v_x);  double lly=Math.min(start_corner.v_y,end_corner.v_y);  double urx=Math.max(start_corner.v_x,end_corner.v_x);  double ury=Math.max(start_corner.v_y,end_corner.v_y);  PlaPointInt lower_left=new PlaPointInt(Math.floor(llx),Math.floor(lly));  PlaPointInt upper_right=new PlaPointInt(Math.ceil(urx),Math.ceil(ury));  bounding_box=new ShapeTileBox(lower_left,upper_right);  return bounding_box;}  }
class C{  public static void logDeleteResponse(DeleteOperation deleteOperation){  for (  AccessLogPublisher<?> publisher : getAccessLogPublishers()) {    publisher.logDeleteResponse(deleteOperation);  }}  }
class C{  public static boolean binaryDataIsBmpFormat(byte[] data){  if (data.length < 2) {    return false;  }  return (0x42 == (data[0] & 0xff)) && (0x4d == (data[1] & 0xff));}  }
class C{  public static SessionIDCorrector create(){  Map<String,String> serverToSite=new HashMap<>();  try {    for (    Object s : WebtopNaming.getAllServerIDs()) {      String serverId=s.toString();      String siteId=WebtopNaming.getSiteID(serverId);      if (serverId.equals(siteId)) {        siteId=null;      }      debug.message("{} Mapping Server {} to Site {}",HEADER,serverId,siteId);      serverToSite.put(serverId,siteId);    }    debug.message("{} Mapping complete",HEADER);  } catch (  Exception e) {    debug.error("Failed to build Autocorrect Mapping",e);    return null;  }  return new SessionIDCorrector(serverToSite);}  }
class C{  private Map<String,Object> createFireEventParam(MotionEvent motionEvent,int pos){  JSONArray jsonArray=new JSONArray(motionEvent.getPointerCount());  if (motionEvent.getActionMasked() == MotionEvent.ACTION_MOVE) {    for (int i=0; i < motionEvent.getPointerCount(); i++) {      jsonArray.add(createJSONObject(motionEvent,pos,i));    }  } else   if (isPointerNumChanged(motionEvent)) {    int pointerIndex=motionEvent.getActionIndex();    jsonArray.add(createJSONObject(motionEvent,CUR_EVENT,pointerIndex));  }  Map<String,Object> map=new HashMap<>();  map.put(GestureInfo.HISTORICAL_XY,jsonArray);  return map;}  }
class C{  public boolean canBeEncoded(){  for (ListIterator<String> li=((Values)value).getList().listIterator(); li.hasNext(); ) {    TextEncodedStringNullTerminated next=new TextEncodedStringNullTerminated(identifier,frameBody,li.next());    if (!next.canBeEncoded()) {      return false;    }  }  return true;}  }
class C{  public SampleModel createCompatibleSampleModel(int w,int h){  int[] bandOffsets=new int[numComponents];  for (int i=0; i < numComponents; i++) {    bandOffsets[i]=i;  }switch (transferType) {case DataBuffer.TYPE_BYTE:case DataBuffer.TYPE_USHORT:    return new PixelInterleavedSampleModel(transferType,w,h,numComponents,w * numComponents,bandOffsets);default :  return new ComponentSampleModel(transferType,w,h,numComponents,w * numComponents,bandOffsets);}}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(removeNamedItemNS03.class,args);}  }
class C{  public void login() throws AuthLoginException {  login(null);}  }
class C{  public ResourceMatch compare(String requestResource,String targetResource,boolean wildcardCompare){  int beginIndex1=0;  int endIndex1=0;  int beginIndex2=0;  int endIndex2=0;  int strlen1=0;  int strlen2=0;  String substr=null;  if ((requestResource == null) && (targetResource == null)) {    return (ResourceMatch.EXACT_MATCH);  }  if (((requestResource == null) || (targetResource == null))) {    return (ResourceMatch.NO_MATCH);  }  if (!caseSensitive) {    requestResource=requestResource.toLowerCase();    targetResource=targetResource.toLowerCase();  }  requestResource=reverseString(requestResource);  targetResource=reverseString(targetResource);  while (requestResource.endsWith(delimiter)) {    int len=requestResource.length();    requestResource=requestResource.substring(0,len - 1);  }  while (targetResource.endsWith(delimiter)) {    int len=targetResource.length();    targetResource=targetResource.substring(0,len - 1);  }  strlen1=requestResource.length();  strlen2=targetResource.length();  endIndex2=targetResource.indexOf(wildcard,beginIndex2);  if ((!wildcardCompare) || (endIndex2 == -1)) {    if (requestResource.equals(targetResource)) {      return (ResourceMatch.EXACT_MATCH);    }    if (targetResource.startsWith(requestResource + delimiter)) {      return (ResourceMatch.SUB_RESOURCE_MATCH);    }    if (requestResource.startsWith(targetResource + delimiter)) {      return (ResourceMatch.SUPER_RESOURCE_MATCH);    }    return (ResourceMatch.NO_MATCH);  }  substr=targetResource.substring(beginIndex2,endIndex2);  if (endIndex2 > beginIndex2) {    if (!(requestResource.startsWith(substr))) {      if (substr.startsWith(requestResource + delimiter)) {        return (ResourceMatch.SUB_RESOURCE_MATCH);      }      return (ResourceMatch.NO_MATCH);    }  }  beginIndex1=beginIndex1 + (endIndex2 - beginIndex2);  if (endIndex2 >= strlen2 - 1) {    return (ResourceMatch.WILDCARD_MATCH);  }  beginIndex2=endIndex2 + 1;  while ((endIndex2=targetResource.indexOf(wildcard,beginIndex2)) != -1) {    substr=targetResource.substring(beginIndex2,endIndex2);    if (endIndex2 > beginIndex2) {      if ((beginIndex1=requestResource.indexOf(substr,beginIndex1)) == -1) {        return (ResourceMatch.SUB_RESOURCE_MATCH);      }    }    beginIndex1=beginIndex1 + (endIndex2 - beginIndex2);    if (endIndex2 >= strlen2 - 1) {      return (ResourceMatch.WILDCARD_MATCH);    }    beginIndex2=endIndex2 + 1;  }  substr=targetResource.substring(beginIndex2,strlen2);  if ((endIndex1=requestResource.lastIndexOf(substr,strlen1 - 1)) == -1) {    return (ResourceMatch.SUB_RESOURCE_MATCH);  }  if (beginIndex1 > endIndex1) {    return (ResourceMatch.SUB_RESOURCE_MATCH);  }  beginIndex1=endIndex1;  if ((strlen1 - beginIndex1) == (strlen2 - beginIndex2)) {    return (ResourceMatch.WILDCARD_MATCH);  }  beginIndex1=beginIndex1 + (strlen2 - beginIndex2);  substr=requestResource.substring(beginIndex1,beginIndex1 + 1);  if (substr.equals(delimiter)) {    return (ResourceMatch.SUPER_RESOURCE_MATCH);  }  return (ResourceMatch.SUB_RESOURCE_MATCH);}  }
class C{  public static void registerCertificateMapper(DN mapperDN,CertificateMapper<?> mapper){  directoryServer.certificateMappers.put(mapperDN,mapper);}  }
class C{  public boolean equals(Object obj){  return (obj != null && obj instanceof CompoundName && impl.equals(((CompoundName)obj).impl));}  }
class C{  @NonNull public static Interpolator rasterize(Interpolator interpolator){  return rasterize(255,interpolator);}  }
class C{  public String encodeBody(){  return encodeBody(new StringBuilder()).toString();}  }
class C{  public NamingSecurityException(){  super();}  }
class C{  @AfterClass(alwaysRun=true) public void nullMemberVariablesAfterTest2(){  Class<?> cls=getClass();  while (DirectoryServerTestCase.class.isAssignableFrom(cls) && !DirectoryServerTestCase.class.equals(cls)) {    for (    Field field : cls.getDeclaredFields()) {      int modifiers=field.getModifiers();      Class<?> fieldClass=field.getType();      if (!fieldClass.isPrimitive() && !fieldClass.isEnum() && !Modifier.isFinal(modifiers)&& !Modifier.isStatic(modifiers)) {        field.setAccessible(true);        try {          field.set(this,null);        } catch (        IllegalAccessException e) {        }      }    }    cls=cls.getSuperclass();  }}  }
class C{  public final String readInput(LocalizableMessage prompt,final String defaultValue) throws ClientException {  return readInput(prompt,defaultValue,null);}  }
class C{  private static <T>void displayPropertySyntax(ConsoleApplication app,PropertyDefinition<T> d){  PropertyDefinitionUsageBuilder b=new PropertyDefinitionUsageBuilder(true);  TableBuilder builder=new TableBuilder();  builder.startRow();  builder.appendCell(INFO_EDITOR_HEADING_SYNTAX.get());  builder.appendCell(b.getUsage(d));  TextTablePrinter printer=new TextTablePrinter(app.getErrorStream());  printer.setDisplayHeadings(false);  printer.setIndentWidth(4);  printer.setColumnWidth(1,0);  builder.print(printer);}  }
class C{  @Override public void republishExistingInstances() throws STSPublishException {  if (AMSetupServlet.isCurrentConfigurationValid()) {    final List<RestSTSInstanceConfig> publishedInstances=getPublishedInstances();    for (    RestSTSInstanceConfig instanceConfig : publishedInstances) {      Injector instanceInjector;      try {        instanceInjector=Guice.createInjector(new RestSTSInstanceModule(instanceConfig));      } catch (      Exception e) {        logger.error("Exception caught creating the guice injector in republish corresponding to rest sts " + "instance: " + instanceConfig.toJson() + ". This instance cannot be republished. Exception: "+ e);        continue;      }      try {        publishInstance(instanceConfig,instanceInjector.getInstance(RestSTS.class),true);        logger.info("Republished Rest STS instance corresponding to config " + instanceConfig.toJson());      } catch (      STSPublishException e) {        logger.error("Exception caught publishing rest sts " + "instance: " + instanceConfig.toJson() + ". This instance cannot be republished. Exception: "+ e);        continue;      }    }  }}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){}  }
class C{  public void requestPasswordPolicyDN(){  operations.add(PasswordPolicyStateOperationType.GET_PASSWORD_POLICY_DN);}  }
class C{  public synchronized void unregister(Listener listener){  boolean changed=false;  for (  List<RegisteredListener> list : handlerslots.values()) {    for (ListIterator<RegisteredListener> i=list.listIterator(); i.hasNext(); ) {      if (i.next().getListener().equals(listener)) {        i.remove();        changed=true;      }    }  }  if (changed)   handlers=null;}  }
class C{  public boolean equals(Object o){  if (o instanceof Name) {    Comparator<String> c=ASCIICaseInsensitiveComparator.CASE_INSENSITIVE_ORDER;    return c.compare(name,((Name)o).name) == 0;  } else {    return false;  }}  }
class C{  public synchronized void select(int selectionStart,int selectionEnd){  String text=getText();  if (selectionStart < 0) {    selectionStart=0;  }  if (selectionStart > text.length()) {    selectionStart=text.length();  }  if (selectionEnd > text.length()) {    selectionEnd=text.length();  }  if (selectionEnd < selectionStart) {    selectionEnd=selectionStart;  }  this.selectionStart=selectionStart;  this.selectionEnd=selectionEnd;  TextComponentPeer peer=(TextComponentPeer)this.peer;  if (peer != null) {    peer.select(selectionStart,selectionEnd);  }}  }
class C{  public ProxySelector proxySelector(){  return proxySelector;}  }
class C{  public void refresh(){  freert.graphics.GdiContext graphics_context=get_board_handling().gdi_context;  for (int i=0; i < graphics_context.layer_count(); ++i) {    set_slider_value(i,graphics_context.get_raw_layer_visibility(i));  }}  }
class C{  public IllegalAccessException(){  super();}  }
class C{  public InvalidAppSSOTokenException(String rbName,String errCode,Object[] args,Throwable t){  super(rbName,errCode,args,t);}  }
class C{  public void unlock(){  if (poolProperties.getUseLock() || this.poolProperties.isPoolSweeperEnabled()) {    lock.writeLock().unlock();  }}  }
class C{  protected void loadImage(Image image){  MediaTracker mTracker=getTracker();synchronized (mTracker) {    int id=getNextID();    mTracker.addImage(image,id);    try {      mTracker.waitForID(id,0);    } catch (    InterruptedException e) {      System.out.println("INTERRUPTED while loading Image");    }    loadStatus=mTracker.statusID(id,false);    mTracker.removeImage(image,id);    width=image.getWidth(imageObserver);    height=image.getHeight(imageObserver);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeclonenodetrue.class,args);}  }
class C{  public void testNegPos(){  byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  byte bBytes[]={0};  int aSign=-1;  int bSign=0;  byte rBytes[]={-1,1,2,3,3,-6,-15,-24,-40,-49,-58,-67,-6,-15,-23};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.or(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    int offs=target.getCaretPosition();    Element elem=Utilities.getParagraphElement(target,offs);    offs=Math.min(target.getDocument().getLength(),elem.getEndOffset());    if (select) {      target.moveCaretPosition(offs);    } else {      target.setCaretPosition(offs);    }  }}  }
class C{  public String toString(){  return ("LDAPPrincipal:  " + name);}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  String currentRealm=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);  try {    if (reconstructPolicy()) {    } else {      CachedPolicy cachedPolicy=getCachedPolicy();      PolicyModel model=(PolicyModel)getModel();      try {        model.replacePolicy(currentRealm,cachedPolicy.getPolicy());        setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","policy.modified.message");        cachedPolicy.setPolicyModified(false);      } catch (      AMConsoleException e) {        setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());      }    }    forwardTo();  } catch (  AMConsoleException e) {    debug.warning("PolicyNormalEditViewBean.handleButton1Request",e);    redirectToStartURL();  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hasAttributes01.class,args);}  }
class C{  public SignaturePermissions(PdfDictionary sigDict,SignaturePermissions previous){  if (previous != null) {    annotationsAllowed&=previous.isAnnotationsAllowed();    fillInAllowed&=previous.isFillInAllowed();    fieldLocks.addAll(previous.getFieldLocks());  }  PdfArray ref=sigDict.getAsArray(PdfName.Reference);  if (ref != null) {    for (int i=0; i < ref.size(); i++) {      PdfDictionary dict=ref.getAsDictionary(i);      PdfDictionary params=dict.getAsDictionary(PdfName.TransformParams);      if (PdfName.DocMDP.equals(dict.getAsName(PdfName.TransformMethod))) {        certification=true;      }      PdfName action=params.getAsName(PdfName.Action);      if (action != null) {        fieldLocks.add(new FieldLock(action,params.getAsArray(PdfName.Fields)));      }      PdfNumber p=params.getAsNumber(PdfName.P);      if (p == null)       continue;switch (p.intValue()) {default :        break;case 1:      fillInAllowed&=false;case 2:    annotationsAllowed&=false;}}}}  }
class C{  public boolean isErrorLoggable(Level level){  SSOToken authSSOToken=(SSOToken)AccessController.doPrivileged(AdminTokenAction.getInstance());  if ((authSSOToken == null) || !logStatus) {    return false;  }  return errorLogger.isLoggable(level);}  }
class C{  public boolean hasResourceField(){  return resourcesField != null;}  }
class C{  public AntiWindow(){  initialize();}  }
class C{  public String emitPattern(){  return emitPattern(true);}  }
class C{  @Override protected synchronized void open(){  super.open();  if (currentLogFile.length() == 0) {    writer.println("#Fields: " + pattern);    writer.println("#Version: 2.0");    writer.println("#Software: " + ServerInfo.getServerInfo());  }}  }
class C{  public AnonymousSASLMechanismHandler(){  super();}  }
class C{  protected HiddenFileFilter(){}  }
class C{  public static SearchFilter createExtensibleMatchFilter(AttributeType attributeType,Set<String> attributeOptions,ByteString assertionValue,String matchingRuleID,boolean dnAttributes) throws DirectoryException {  if (attributeType == null && matchingRuleID == null) {    LocalizableMessage message=ERR_SEARCH_FILTER_CREATE_EXTENSIBLE_MATCH_NO_AT_OR_MR.get();    throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);  }  return new SearchFilter(FilterType.EXTENSIBLE_MATCH,null,null,attributeType,attributeOptions,assertionValue,null,null,null,matchingRuleID,dnAttributes);}  }
class C{  public boolean isIcon(){  return isIcon;}  }
class C{  private byte[] maskGeneratorFunction1(byte[] Z,int zOff,int zLen,int length){  byte[] mask=new byte[length];  byte[] hashBuf=new byte[mgf1Hash.getDigestSize()];  byte[] C=new byte[4];  int counter=0;  mgf1Hash.reset();  while (counter < (length / hashBuf.length)) {    ItoOSP(counter,C);    mgf1Hash.update(Z,zOff,zLen);    mgf1Hash.update(C,0,C.length);    mgf1Hash.doFinal(hashBuf,0);    System.arraycopy(hashBuf,0,mask,counter * hashBuf.length,hashBuf.length);    counter++;  }  if ((counter * hashBuf.length) < length) {    ItoOSP(counter,C);    mgf1Hash.update(Z,zOff,zLen);    mgf1Hash.update(C,0,C.length);    mgf1Hash.doFinal(hashBuf,0);    System.arraycopy(hashBuf,0,mask,counter * hashBuf.length,mask.length - (counter * hashBuf.length));  }  return mask;}  }
class C{  public void deleteArtworkField() throws KeyNotFoundException {  this.deleteField(VorbisCommentFieldKey.METADATA_BLOCK_PICTURE);  this.deleteField(VorbisCommentFieldKey.COVERART);  this.deleteField(VorbisCommentFieldKey.COVERARTMIME);}  }
class C{  public boolean handleNameRegistration(HttpServletRequest request,HttpServletResponse response,Object ssoToken){  regisSource=IFSConstants.REGIS_LINK;  FSUtils.debug.message("Entered FSNameRegistrationHandler::handleNameRegistration");  this.request=request;  this.response=response;  this.ssoToken=ssoToken;  setRegistrationURL();  if (managerInst == null) {    FSUtils.debug.error("FSNameRegistrationHandler " + "Account Manager instance is null");    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSNameRegistrationHandler::handleNameRegistration" + "failed to get Account Manager instance");    }    returnLocallyAtSource(response,false);    return false;  }  try {    this.userID=SessionManager.getProvider().getPrincipalName(ssoToken);  } catch (  SessionException e) {    FSUtils.debug.error("FSNameRegistrationHandler Constructor::SessionException:",e);    LogUtil.error(Level.INFO,"USER_NOT_FOUND",null,ssoToken);    return false;  }  return (doRemoteRegistration());}  }
class C{  public final int _exptype2(int identity){  if (identity < m_blocksize)   return m_exptype_map0[identity]; else   return m_exptype_map[identity >>> m_SHIFT][identity & m_MASK];}  }
class C{  NetClass append(BrdLayerStructure p_layer_structure,ClearanceMatrix p_clearance_matrix,IteraBoard itera_board){  GuiResources resources=itera_board.newGuiResources("rules.resources.Default");  String name_front=resources.getString("class");  String new_name=null;  Integer index=0;  for (; ; ) {    ++index;    new_name=name_front + index.toString();    if (get(new_name) == null)     break;  }  return append(new_name,p_layer_structure,p_clearance_matrix);}  }
class C{  private TypeSpec.Builder generateTypeBuilder(){  String clzName=parser.getClzName();  clzName=clzName + SUFFIX;  return TypeSpec.classBuilder(clzName).addModifiers(Modifier.PUBLIC);}  }
class C{  private boolean hasFallbackChildren(){  for (ElemTemplateElement child=m_firstChild; child != null; child=child.m_nextSibling) {    if (child.getXSLToken() == Constants.ELEMNAME_FALLBACK)     return true;  }  return false;}  }
class C{  public static DeleteSubCommandHandler create(SubCommandArgumentParser parser,ManagedObjectPath<?,?> p,OptionalRelationDefinition<?,?> r) throws ArgumentException {  return new DeleteSubCommandHandler(parser,p,r,p.child(r));}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.PrivateKeyProtectionElement createPrivateKeyProtectionElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.PrivateKeyProtectionElementImpl();}  }
class C{  public java.sql.Date readDate() throws SQLException {  return (java.sql.Date)getNextAttribute();}  }
class C{  public SMViewBeanBase(String name){  super(name);}  }
class C{  private void createCRUDOperationsTable(SnmpMib myMib,TableCtsCRUDOperationsTable table,List<OperationEntry> operationEntries) throws SnmpStatusException {  for (  OperationEntry oe : operationEntries) {    final CtsCRUDOperationsEntry entry=new CtsCRUDOperationsEntryImpl(myMib,debug);    entry.OperationTableIndex=oe.OperationTableIndex;    table.addEntry(entry);  }}  }
class C{  public boolean unsetOrdering(Object first,Object second){  DigraphNode firstPONode=(DigraphNode)poNodes.get(first);  DigraphNode secondPONode=(DigraphNode)poNodes.get(second);  return firstPONode.removeEdge(secondPONode) || secondPONode.removeEdge(firstPONode);}  }
class C{  public Element encrypt(String xmlString,Key recipientPublicKey,SecretKey secretKey,String dataEncAlgorithm,int dataEncStrength,String recipientEntityID,String outerElementName) throws SAML2Exception {  String classMethod="FMEncProvider.encrypt: ";  if (SAML2SDKUtils.debug.messageEnabled()) {    SAML2SDKUtils.debug.message("{} : Data encryption algorithm = '{}'",classMethod,dataEncAlgorithm);    SAML2SDKUtils.debug.message("{} : Data encryption strength = '{}'",classMethod,dataEncStrength);    SAML2SDKUtils.debug.message("{} : Unique identifier of the recipient = '{}'",classMethod,recipientEntityID);  }  if (xmlString == null || xmlString.length() == 0 || recipientPublicKey == null || dataEncAlgorithm == null || dataEncAlgorithm.length() == 0 || outerElementName == null || outerElementName.length() == 0) {    SAML2SDKUtils.debug.error(classMethod + "Null input parameter(s).");    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("nullInput"));  }  if (!dataEncAlgorithm.equals(XMLCipher.AES_128) && !dataEncAlgorithm.equals(XMLCipher.AES_192) && !dataEncAlgorithm.equals(XMLCipher.AES_256)&& !dataEncAlgorithm.equals(XMLCipher.TRIPLEDES)) {    SAML2SDKUtils.debug.error("{} : The encryption algorithm '{}' is not supported",classMethod,dataEncAlgorithm);    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("unsupportedKeyAlg"));  }  if ((dataEncAlgorithm.equals(XMLCipher.AES_128) && dataEncStrength != 128) || (dataEncAlgorithm.equals(XMLCipher.AES_192) && dataEncStrength != 192) || (dataEncAlgorithm.equals(XMLCipher.AES_256) && dataEncStrength != 256)) {    SAML2SDKUtils.debug.error("{} : Data encryption algorithm '{}' and strength '{}' mismatch.",classMethod,dataEncAlgorithm,dataEncStrength);    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("algSizeMismatch"));  }  Document doc=XMLUtils.toDOMDocument(xmlString,SAML2SDKUtils.debug);  if (doc == null) {    SAML2SDKUtils.debug.error("{} : the XML '{}' String can't be parsed.",classMethod,xmlString);    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("errorObtainingElement"));  }  if (dataEncStrength <= 0) {    dataEncStrength=128;  }  Element rootElement=doc.getDocumentElement();  if (rootElement == null) {    SAML2SDKUtils.debug.error("{} : the XML '{}' String is empty.",classMethod,xmlString);    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("emptyDoc"));  }  if (secretKey == null) {    if (recipientEntityID != null) {      if (cachedKeys.containsKey(recipientEntityID)) {        secretKey=(SecretKey)cachedKeys.get(recipientEntityID);      } else {        secretKey=generateSecretKey(dataEncAlgorithm,dataEncStrength);        cachedKeys.put(recipientEntityID,secretKey);      }    } else {      secretKey=generateSecretKey(dataEncAlgorithm,dataEncStrength);    }    if (secretKey == null) {      throw new SAML2Exception(SAML2SDKUtils.bundle.getString("errorGenerateKey"));    }  }  XMLCipher cipher=null;  String publicKeyEncAlg=recipientPublicKey.getAlgorithm();  try {    SAML2SDKUtils.debug.message("{} : public key encryption algorithm '{}'",classMethod,publicKeyEncAlg);    if (publicKeyEncAlg.equals(EncryptionConstants.RSA)) {      cipher=XMLCipher.getInstance(XMLCipher.RSA_v1dot5);    } else     if (publicKeyEncAlg.equals(EncryptionConstants.TRIPLEDES)) {      cipher=XMLCipher.getInstance(XMLCipher.TRIPLEDES_KeyWrap);    } else     if (publicKeyEncAlg.equals(EncryptionConstants.AES)) {      cipher=XMLCipher.getInstance(XMLCipher.AES_128_KeyWrap);    } else {      SAML2SDKUtils.debug.error("{} : public key encryption algorithm '{}' unsupported",classMethod,publicKeyEncAlg);      throw new SAML2Exception(SAML2SDKUtils.bundle.getString("unsupportedKeyAlg"));    }  } catch (  XMLEncryptionException xe1) {    SAML2SDKUtils.debug.error("{} : Unable to obtain cipher with public key algorithm '{}'.",classMethod,publicKeyEncAlg,xe1);    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("noCipherForPublicKeyAlg"));  }  try {    cipher.init(XMLCipher.WRAP_MODE,recipientPublicKey);  } catch (  XMLEncryptionException xe2) {    SAML2SDKUtils.debug.error(classMethod + "Failed to initialize cipher with public key",xe2);    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("failedInitCipherWithPublicKey"));  }  EncryptedKey encryptedKey=null;  try {    encryptedKey=cipher.encryptKey(doc,secretKey);  } catch (  XMLEncryptionException xe3) {    SAML2SDKUtils.debug.error(classMethod + "Failed to encrypt secret key with public key",xe3);    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("failedEncryptingSecretKeyWithPublicKey"));  }  try {    cipher=XMLCipher.getInstance(dataEncAlgorithm);  } catch (  XMLEncryptionException xe4) {    SAML2SDKUtils.debug.error(classMethod + "Failed to obtain a cipher for " + "data encryption algorithm"+ dataEncAlgorithm,xe4);    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("cipherNotAvailableForDataEncAlg"));  }  try {    cipher.init(XMLCipher.ENCRYPT_MODE,secretKey);  } catch (  XMLEncryptionException xe5) {    SAML2SDKUtils.debug.error(classMethod + "Failed to initialize cipher with secret key.",xe5);    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("failedInitCipherWithSecretKey"));  }  Document resultDoc=null;  try {    resultDoc=cipher.doFinal(doc,rootElement);  } catch (  Exception e) {    SAML2SDKUtils.debug.error(classMethod + "Failed to do the final data encryption.",e);    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("failedEncryptingData"));  }  Element ek=null;  try {    ek=cipher.martial(doc,encryptedKey);  } catch (  Exception xe6) {    SAML2SDKUtils.debug.error(classMethod + "Failed to martial the encrypted key",xe6);    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("failedMartialingEncryptedKey"));  }  String outerElemNS=SAML2Constants.ASSERTION_NAMESPACE_URI;  String outerElemPrefix="saml";  if (outerElementName.equals("NewEncryptedID")) {    outerElemNS=SAML2Constants.PROTOCOL_NAMESPACE;    outerElemPrefix="samlp";  }  Element outerElement=resultDoc.createElementNS(outerElemNS,outerElemPrefix + ":" + outerElementName);  outerElement.setAttributeNS(SAML2Constants.NS_XML,"xmlns:" + outerElemPrefix,outerElemNS);  Element ed=resultDoc.getDocumentElement();  resultDoc.replaceChild(outerElement,ed);  outerElement.appendChild(ed);  if (encryptedKeyInKeyInfo) {    Element dsElement=resultDoc.createElementNS(SAML2Constants.NS_XMLSIG,"ds:KeyInfo");    dsElement.setAttributeNS(SAML2Constants.NS_XML,"xmlns:ds",SAML2Constants.NS_XMLSIG);    dsElement.appendChild(ek);    NodeList nl=ed.getElementsByTagNameNS(SAML2Constants.NS_XMLENC,"CipherData");    if ((nl == null) || (nl.getLength() == 0)) {      SAML2SDKUtils.debug.error(classMethod + "Unable to find required xenc:CipherData Element.");      throw new SAML2Exception(SAML2SDKUtils.bundle.getString("failedEncryptingData"));    }    Element cipherDataElement=(Element)nl.item(0);    ed.insertBefore(dsElement,cipherDataElement);  } else {    outerElement.appendChild(ek);  }  return resultDoc.getDocumentElement();}  }
class C{  private int readAnnotationValue(int v,final char[] buf,final String name,final AnnotationVisitor av){  int i;  if (av == null) {switch (b[v] & 0xFF) {case 'e':      return v + 5;case '@':    return readAnnotationValues(v + 3,buf,true,null);case '[':  return readAnnotationValues(v + 1,buf,false,null);default :return v + 3;}}switch (b[v++] & 0xFF) {case 'I':case 'J':case 'F':case 'D':av.visit(name,readConst(readUnsignedShort(v),buf));v+=2;break;case 'B':av.visit(name,(byte)readInt(items[readUnsignedShort(v)]));v+=2;break;case 'Z':av.visit(name,readInt(items[readUnsignedShort(v)]) == 0 ? Boolean.FALSE : Boolean.TRUE);v+=2;break;case 'S':av.visit(name,(short)readInt(items[readUnsignedShort(v)]));v+=2;break;case 'C':av.visit(name,(char)readInt(items[readUnsignedShort(v)]));v+=2;break;case 's':av.visit(name,readUTF8(v,buf));v+=2;break;case 'e':av.visitEnum(name,readUTF8(v,buf),readUTF8(v + 2,buf));v+=4;break;case 'c':av.visit(name,Type.getType(readUTF8(v,buf)));v+=2;break;case '@':v=readAnnotationValues(v + 2,buf,true,av.visitAnnotation(name,readUTF8(v,buf)));break;case '[':int size=readUnsignedShort(v);v+=2;if (size == 0) {return readAnnotationValues(v - 2,buf,false,av.visitArray(name));}switch (this.b[v++] & 0xFF) {case 'B':byte[] bv=new byte[size];for (i=0; i < size; i++) {bv[i]=(byte)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,bv);--v;break;case 'Z':boolean[] zv=new boolean[size];for (i=0; i < size; i++) {zv[i]=readInt(items[readUnsignedShort(v)]) != 0;v+=3;}av.visit(name,zv);--v;break;case 'S':short[] sv=new short[size];for (i=0; i < size; i++) {sv[i]=(short)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,sv);--v;break;case 'C':char[] cv=new char[size];for (i=0; i < size; i++) {cv[i]=(char)readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,cv);--v;break;case 'I':int[] iv=new int[size];for (i=0; i < size; i++) {iv[i]=readInt(items[readUnsignedShort(v)]);v+=3;}av.visit(name,iv);--v;break;case 'J':long[] lv=new long[size];for (i=0; i < size; i++) {lv[i]=readLong(items[readUnsignedShort(v)]);v+=3;}av.visit(name,lv);--v;break;case 'F':float[] fv=new float[size];for (i=0; i < size; i++) {fv[i]=Float.intBitsToFloat(readInt(items[readUnsignedShort(v)]));v+=3;}av.visit(name,fv);--v;break;case 'D':double[] dv=new double[size];for (i=0; i < size; i++) {dv[i]=Double.longBitsToDouble(readLong(items[readUnsignedShort(v)]));v+=3;}av.visit(name,dv);--v;break;default :v=readAnnotationValues(v - 3,buf,false,av.visitArray(name));}}return v;}  }
class C{  private static void assertQualName(String qualName) throws XMPException {  if (qualName == null || qualName.length() == 0) {    throw new XMPException("Empty qualifier name",XMPError.BADXPATH);  }}  }
class C{  @Override public void repaint(){}  }
class C{  public FileReader(FileDescriptor fd){  super(new FileInputStream(fd));}  }
class C{  protected void stopAutoScrolling(){  isAutoScrolling=false;  if (autoscrollTimer != null) {    autoscrollTimer.stop();    autoscrollTimer=null;  }}  }
class C{  Node(E item){  UNSAFE.putObject(this,itemOffset,item);}  }
class C{  public static boolean keepName(MappedMember mm){  if (mm.getDesc().equals("([Ljava/lang/String;)V") && mm.getOriginalName().equals("main")) {    return true;  }  if (mm.getOriginalName().contains("<")) {    return true;  }  if (isNameWhitelisted(mm.getOriginalName())) {    return true;  }  return false;}  }
class C{  public AuthPrincipal(String name){  super(name);}  }
class C{  public void saveFrame(File file) throws IOException {  if (!mEglCore.isCurrent(mEGLSurface)) {    throw new RuntimeException("Expected EGL context/surface is not current");  }  String filename=file.toString();  int width=getWidth();  int height=getHeight();  ByteBuffer buf=ByteBuffer.allocateDirect(width * height * 4);  buf.order(ByteOrder.LITTLE_ENDIAN);  GLES20.glReadPixels(0,0,width,height,GLES20.GL_RGBA,GLES20.GL_UNSIGNED_BYTE,buf);  GlUtil.checkGlError("glReadPixels");  buf.rewind();  BufferedOutputStream bos=null;  try {    bos=new BufferedOutputStream(new FileOutputStream(filename));    Bitmap bmp=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);    bmp.copyPixelsFromBuffer(buf);    bmp.compress(Bitmap.CompressFormat.PNG,90,bos);    bmp.recycle();  }  finally {    if (bos != null)     bos.close();  }  Log.d(TAG,"Saved " + width + "x"+ height+ " frame as '"+ filename+ "'");}  }
class C{  public String toXMLString() throws FSMsgException {  return this.toXMLString(true,true);}  }
class C{  public void test_putValue(){  SSLSession s=clientSession;  mySSLSessionBindingListener sbl=new mySSLSessionBindingListener();  assertNotNull(s.getValueNames());  assertEquals(0,s.getValueNames().length);  s.putValue("Name_01",sbl);  s.putValue("Name_02",sbl);  s.putValue("Name_03",sbl);  assertEquals(3,s.getValueNames().length);  s.removeValue("Name_01");  assertEquals(2,s.getValueNames().length);  try {    s.putValue(null,null);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException expected) {  }  try {    s.putValue("ABC",null);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException expected) {  }  try {    s.putValue(null,sbl);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException expected) {  }  try {    s.removeValue(null);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException expected) {  }}  }
class C{  public static List<Long> traverse1RowFile(String fileName) throws IOException {  logger.debug("Parsing bucket file from: " + fileName);  ArrayList<Long> fileToArraylist=new ArrayList<>();  String[] splitString=readFile(fileName).trim().split(",");  logger.debug("Bucket list contains " + splitString.length + " buckets.");  for (int i=0; i < splitString.length; i++) {    try {      fileToArraylist.add(new Long(splitString[i]));    } catch (    NumberFormatException e) {      logger.error("Could not parse token: " + splitString[i] + " from file: "+ fileName+ " at index: "+ i,e);      throw e;    }  }  logger.debug("Done parsing bucket file from: " + fileName);  return fileToArraylist;}  }
class C{  static Handler remove(Handler h,Label start,Label end){  if (h == null) {    return null;  } else {    h.next=remove(h.next,start,end);  }  int hstart=h.start.position;  int hend=h.end.position;  int s=start.position;  int e=end == null ? Integer.MAX_VALUE : end.position;  if (s < hend && e > hstart) {    if (s <= hstart) {      if (e >= hend) {        h=h.next;      } else {        h.start=end;      }    } else     if (e >= hend) {      h.end=start;    } else {      Handler g=new Handler();      g.start=end;      g.end=h.end;      g.handler=h.handler;      g.desc=h.desc;      g.type=h.type;      g.next=h.next;      h.end=start;      h.next=g;    }  }  return h;}  }
class C{  public void testGetDateAndTime(){  X509CRLSelector selector=new X509CRLSelector();  assertNull("Initially the dateAndTime criteria should be null.",selector.getDateAndTime());  Date date=new Date(200);  selector.setDateAndTime(date);  assertTrue("The result should be equal to specified.",date.equals(selector.getDateAndTime()));}  }
class C{  public void executeQuery(String query) throws IOException {  try {    log.debug("Using in-process Hive instance.");    String[] argv=getHiveArgs("-S","-e",query);    int status=cliDriver.run(argv);    if (status != 0) {      throw new IOException("Hive CliDriver exited with status=" + status);    }  } catch (  Exception e) {    throw new IOException("Exception thrown in Hive",e);  }}  }
class C{  @Override public void removePropertyChangeListener(PropertyChangeListener listener){  support.removePropertyChangeListener(listener);}  }
class C{  public void updateSizes(@ProgressDrawableSize int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  private static int computeDimension(ResultPoint topLeft,ResultPoint topRight,ResultPoint bottomLeft,float moduleSize) throws NotFoundException {  int tltrCentersDimension=MathUtils.round(ResultPoint.distance(topLeft,topRight) / moduleSize);  int tlblCentersDimension=MathUtils.round(ResultPoint.distance(topLeft,bottomLeft) / moduleSize);  int dimension=((tltrCentersDimension + tlblCentersDimension) / 2) + 7;switch (dimension & 0x03) {case 0:    dimension++;  break;case 2:dimension--;break;case 3:throw NotFoundException.getNotFoundInstance();}return dimension;}  }
class C{  public static IntegerArgument connectTimeOutHiddenArgument() throws ArgumentException {  return connectTimeOutArgument(true);}  }
class C{  public static void e(String tag,String msg){  if (sLevel > LEVEL_ERROR) {    return;  }  Log.e(tag,msg);}  }
class C{  ConnectionWithControls findConnectionForLocalEntry(BasicNode node) throws LdapException {  return findConnectionForLocalEntry(node,isConfigurationNode(node));}  }
class C{  public void bind_context(org.omg.CosNaming.NameComponent[] n,org.omg.CosNaming.NamingContext nc) throws org.omg.CosNaming.NamingContextPackage.NotFound, org.omg.CosNaming.NamingContextPackage.CannotProceed, org.omg.CosNaming.NamingContextPackage.InvalidName, org.omg.CosNaming.NamingContextPackage.AlreadyBound {  org.omg.CORBA.portable.InputStream $in=null;  try {    org.omg.CORBA.portable.OutputStream $out=_request("bind_context",true);    org.omg.CosNaming.NameHelper.write($out,n);    org.omg.CosNaming.NamingContextHelper.write($out,nc);    $in=_invoke($out);    return;  } catch (  org.omg.CORBA.portable.ApplicationException $ex) {    $in=$ex.getInputStream();    String _id=$ex.getId();    if (_id.equals("IDL:omg.org/CosNaming/NamingContext/NotFound:1.0"))     throw org.omg.CosNaming.NamingContextPackage.NotFoundHelper.read($in); else     if (_id.equals("IDL:omg.org/CosNaming/NamingContext/CannotProceed:1.0"))     throw org.omg.CosNaming.NamingContextPackage.CannotProceedHelper.read($in); else     if (_id.equals("IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0"))     throw org.omg.CosNaming.NamingContextPackage.InvalidNameHelper.read($in); else     if (_id.equals("IDL:omg.org/CosNaming/NamingContext/AlreadyBound:1.0"))     throw org.omg.CosNaming.NamingContextPackage.AlreadyBoundHelper.read($in); else     throw new org.omg.CORBA.MARSHAL(_id);  }catch (  org.omg.CORBA.portable.RemarshalException $rm) {    bind_context(n,nc);  } finally {    _releaseReply($in);  }}  }
class C{  public Name add(int posn,String comp) throws InvalidNameException {  Rdn rdn=(new Rfc2253Parser(comp)).parseRdn();  rdns.add(posn,rdn);  unparsed=null;  return this;}  }
class C{  public void write(int b) throws IOException {  out.write(b);  cksum.update(b);}  }
class C{  public static StorageStatus working(){  return WORKING;}  }
class C{  public static boolean encryptNIinSessionContext(){  return encryptNI;}  }
class C{  public Message sendRequest(Message requestMessage,String connectTo,String certAlias,String soapAction,String returnToURL,HttpServletRequest httpRequest,HttpServletResponse httpResponse) throws InteractionException, InteractionRedirectException, SOAPBindingException, SOAPFaultException {  if (debug.messageEnabled()) {    debug.message("InteractionManager.sendRequest():" + " entering with messageID=" + requestMessage.getCorrelationHeader().getMessageID() + ":refToMessageID="+ requestMessage.getCorrelationHeader().getRefToMessageID()+ ":requestMessage="+ requestMessage);  }  if (interactionConfig.wscIncludesUserInteractionHeader()) {    Enumeration locales=httpRequest.getLocales();    List acceptLanguages=new ArrayList();    while (locales.hasMoreElements()) {      acceptLanguages.add(locales.nextElement().toString());    }    if (debug.messageEnabled()) {      debug.message("InteractionManager.sendRequest():" + "Accept-Language specified by httpRequest=" + acceptLanguages);    }    UserInteractionElement ue=createUserInteractionElement(acceptLanguages);    String id=SAMLUtils.generateID();    ue.setId(id);    if (ue != null) {      try {        Element element=Utils.convertJAXBToElement(ue);        requestMessage.setOtherSOAPHeader(element,id);      } catch (      JAXBException je) {        debug.error("InteractionManager.sendRequest():" + "not setting userInteractionHeader:" + "can not convert JAXBObject to Element",je);      }    }  }  Message responseMessage=null;  try {    if (debug.messageEnabled()) {      debug.message("InteractionManager.sendRequest():" + "invoking soap Client.sendRequest():" + ":requestMessage=" + requestMessage + ":connecTo="+ connectTo);    }    if (LogUtil.isLogEnabled()) {      String[] objs=new String[1];      objs[0]=requestMessage.getCorrelationHeader().getMessageID();      LogUtil.access(Level.INFO,LogUtil.IS_SENDING_MESSAGE,objs);    }    responseMessage=Client.sendRequest(requestMessage,connectTo,certAlias,soapAction);  } catch (  SOAPFaultException sfe) {    if (debug.messageEnabled()) {      debug.message("InteractionManager.sendRequest():" + " catching SOAPFaultException=" + sfe);    }    String redirectURL=getRedirectURL(sfe);    if (redirectURL == null) {      throw sfe;    }    String responseID=getResponseID(sfe);    responseMessage=handleRedirectRequest(requestMessage,redirectURL,responseID,connectTo,certAlias,soapAction,returnToURL,httpRequest,httpResponse);  }  if (debug.messageEnabled()) {    debug.message("InteractionManager.sendRequest():" + " returning response message=" + responseMessage);  }  if (LogUtil.isLogEnabled()) {    String[] objs=new String[2];    objs[0]=responseMessage.getCorrelationHeader().getMessageID();    objs[1]=requestMessage.getCorrelationHeader().getMessageID();    LogUtil.access(Level.INFO,LogUtil.IS_RETURNING_RESPONSE_MESSAGE,objs);  }  return responseMessage;}  }
class C{  public StringBuilder encodeBody(StringBuilder retval){  return retval.append(optionTag);}  }
class C{  public boolean hasController(){  return (controller != null);}  }
class C{  public NewAuthConfigViewBean(){  super("NewAuthConfig");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);  createPageTitleModel();  createPropertyModel();  registerChildren();}  }
class C{  public java.io.Serializable read_value(java.lang.Class clz){  throw new org.omg.CORBA.NO_IMPLEMENT();}  }
class C{  @Override public boolean isInboundDone(){  return isInboundDone || engine_was_closed;}  }
class C{  protected String paramString(){  String rootPaneString=(rootPane != null ? rootPane.toString() : "");  String rootPaneCheckingEnabledString=(rootPaneCheckingEnabled ? "true" : "false");  String closableString=(closable ? "true" : "false");  String isClosedString=(isClosed ? "true" : "false");  String maximizableString=(maximizable ? "true" : "false");  String isMaximumString=(isMaximum ? "true" : "false");  String iconableString=(iconable ? "true" : "false");  String isIconString=(isIcon ? "true" : "false");  String resizableString=(resizable ? "true" : "false");  String isSelectedString=(isSelected ? "true" : "false");  String frameIconString=(frameIcon != null ? frameIcon.toString() : "");  String titleString=(title != null ? title : "");  String desktopIconString=(desktopIcon != null ? desktopIcon.toString() : "");  String openedString=(opened ? "true" : "false");  String defaultCloseOperationString;  if (defaultCloseOperation == HIDE_ON_CLOSE) {    defaultCloseOperationString="HIDE_ON_CLOSE";  } else   if (defaultCloseOperation == DISPOSE_ON_CLOSE) {    defaultCloseOperationString="DISPOSE_ON_CLOSE";  } else   if (defaultCloseOperation == DO_NOTHING_ON_CLOSE) {    defaultCloseOperationString="DO_NOTHING_ON_CLOSE";  } else   defaultCloseOperationString="";  return super.paramString() + ",closable=" + closableString+ ",defaultCloseOperation="+ defaultCloseOperationString+ ",desktopIcon="+ desktopIconString+ ",frameIcon="+ frameIconString+ ",iconable="+ iconableString+ ",isClosed="+ isClosedString+ ",isIcon="+ isIconString+ ",isMaximum="+ isMaximumString+ ",isSelected="+ isSelectedString+ ",maximizable="+ maximizableString+ ",opened="+ openedString+ ",resizable="+ resizableString+ ",rootPane="+ rootPaneString+ ",rootPaneCheckingEnabled="+ rootPaneCheckingEnabledString+ ",title="+ titleString;}  }
class C{  public Observable<Account> updateAccountObservable(Account account){  io.vertx.rx.java.ObservableFuture<Account> resultHandler=io.vertx.rx.java.RxHelper.observableFuture();  updateAccount(account,resultHandler.toHandler());  return resultHandler;}  }
class C{  public boolean hasAttribute(String name){  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return false;}  }
class C{  private static String doNormalize(String filename,char separator,boolean keepSeparator){  if (filename == null) {    return null;  }  int size=filename.length();  if (size == 0) {    return filename;  }  int prefix=getPrefixLength(filename);  if (prefix < 0) {    return null;  }  char[] array=new char[size + 2];  filename.getChars(0,filename.length(),array,0);  char otherSeparator=separator == SYSTEM_SEPARATOR ? OTHER_SEPARATOR : SYSTEM_SEPARATOR;  for (int i=0; i < array.length; i++) {    if (array[i] == otherSeparator) {      array[i]=separator;    }  }  boolean lastIsDirectory=true;  if (array[size - 1] != separator) {    array[size++]=separator;    lastIsDirectory=false;  }  for (int i=prefix + 1; i < size; i++) {    if (array[i] == separator && array[i - 1] == separator) {      System.arraycopy(array,i,array,i - 1,size - i);      size--;      i--;    }  }  for (int i=prefix + 1; i < size; i++) {    if (array[i] == separator && array[i - 1] == '.' && (i == prefix + 1 || array[i - 2] == separator)) {      if (i == size - 1) {        lastIsDirectory=true;      }      System.arraycopy(array,i + 1,array,i - 1,size - i);      size-=2;      i--;    }  }  outer:   for (int i=prefix + 2; i < size; i++) {    if (array[i] == separator && array[i - 1] == '.' && array[i - 2] == '.' && (i == prefix + 2 || array[i - 3] == separator)) {      if (i == prefix + 2) {        return null;      }      if (i == size - 1) {        lastIsDirectory=true;      }      int j;      for (j=i - 4; j >= prefix; j--) {        if (array[j] == separator) {          System.arraycopy(array,i + 1,array,j + 1,size - i);          size-=i - j;          i=j + 1;          continue outer;        }      }      System.arraycopy(array,i + 1,array,prefix,size - i);      size-=i + 1 - prefix;      i=prefix + 1;    }  }  if (size <= 0) {    return "";  }  if (size <= prefix) {    return new String(array,0,size);  }  if (lastIsDirectory && keepSeparator) {    return new String(array,0,size);  }  return new String(array,0,size - 1);}  }
class C{  private static boolean isNullOrEmpty(final String string){  return (string == null || "".equals(string));}  }
class C{  public Request createRequest(URI requestURI,String method,CallIdHeader callId,CSeqHeader cSeq,FromHeader from,ToHeader to,List via,MaxForwardsHeader maxForwards,byte[] content,ContentTypeHeader contentType) throws ParseException {  if (requestURI == null || method == null || callId == null || cSeq == null || from == null || to == null || via == null || maxForwards == null || content == null || contentType == null)   throw new ParseException("JAIN-SIP Exception, some parameters are missing" + ", unable to create the request",0);  SIPRequest sipRequest=new SIPRequest();  sipRequest.setRequestURI(requestURI);  sipRequest.setMethod(method);  sipRequest.setCallId(callId);  sipRequest.setCSeq(cSeq);  sipRequest.setFrom(from);  sipRequest.setTo(to);  sipRequest.setVia(via);  sipRequest.setMaxForwards(maxForwards);  sipRequest.setHeader((ContentType)contentType);  sipRequest.setMessageContent(content);  if (userAgent != null) {    sipRequest.setHeader(userAgent);  }  return sipRequest;}  }
class C{  public void assignRole(String roleDN) throws AMException, SSOException {  SSOTokenManager.getInstance().validateToken(super.token);  Set userDNs=new HashSet();  userDNs.add(super.entryDN);  dsServices.modifyMemberShip(super.token,userDNs,roleDN,ROLE,ADD_MEMBER);}  }
class C{  public boolean hasAccessType(EnumAccessType accessType){  return perm.hasAccessType(accessType);}  }
class C{  public static boolean isConnectionFast(int type,int subType){  if (type == ConnectivityManager.TYPE_WIFI) {    return true;  } else   if (type == ConnectivityManager.TYPE_MOBILE) {switch (subType) {case TelephonyManager.NETWORK_TYPE_1xRTT:      return false;case TelephonyManager.NETWORK_TYPE_CDMA:    return false;case TelephonyManager.NETWORK_TYPE_EDGE:  return false;case TelephonyManager.NETWORK_TYPE_EVDO_0:return true;case TelephonyManager.NETWORK_TYPE_EVDO_A:return true;case TelephonyManager.NETWORK_TYPE_GPRS:return false;case TelephonyManager.NETWORK_TYPE_HSDPA:return true;case TelephonyManager.NETWORK_TYPE_HSPA:return true;case TelephonyManager.NETWORK_TYPE_HSUPA:return true;case TelephonyManager.NETWORK_TYPE_UMTS:return true;case TelephonyManager.NETWORK_TYPE_EHRPD:return true;case TelephonyManager.NETWORK_TYPE_EVDO_B:return true;case TelephonyManager.NETWORK_TYPE_HSPAP:return true;case TelephonyManager.NETWORK_TYPE_IDEN:return false;case TelephonyManager.NETWORK_TYPE_LTE:return true;case TelephonyManager.NETWORK_TYPE_UNKNOWN:default :return false;}} else {return false;}}  }
class C{  public void dragDropEnd(DragSourceDropEvent dsde){  ((DragSourceListener)a).dragDropEnd(dsde);  ((DragSourceListener)b).dragDropEnd(dsde);}  }
class C{  public Duration withSeconds(long seconds){  return create(seconds,nanos);}  }
class C{  private Object toggleExponentSign(int offset,char aChar) throws BadLocationException, ParseException {  String string=getFormattedTextField().getText();  int replaceLength=0;  int loc=getAttributeStart(NumberFormat.Field.EXPONENT_SIGN);  if (loc >= 0) {    replaceLength=1;    offset=loc;  }  if (aChar == getPositiveSign()) {    string=getReplaceString(offset,replaceLength,null);  } else {    string=getReplaceString(offset,replaceLength,new String(new char[]{aChar}));  }  return stringToValue(string);}  }
class C{  private boolean isNavigationKey(KeyEvent event){  InputMap inputMap=list.getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);  KeyStroke key=KeyStroke.getKeyStrokeForEvent(event);  if (inputMap != null && inputMap.get(key) != null) {    return true;  }  return false;}  }
class C{  public void restart(){  mInit=false;  launchInspector(WXEnvironment.sRemoteDebugMode);  if (mWXBridge == null) {    mWXBridge=new WXBridge();  }}  }
class C{  private void parseMinorVersion(String version) throws FSMsgException {  try {    minorVersion=Integer.parseInt(version);  } catch (  NumberFormatException e) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSNameIdentifierMappingRequest." + "parseMinorVersion: invalid MinorVersion: " + version,e);    }    throw new FSMsgException("wrongInput",null);  }  if (minorVersion > IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSNameIdentifierMappingRequest." + "parseMinorVersion: MinorVersion is too high");    }    throw new FSMsgException("requestVersionTooHigh",null);  } else   if (minorVersion < IFSConstants.FF_11_PROTOCOL_MINOR_VERSION) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSNameIdentifierMappingRequest." + "parseMinorVersion: MinorVersion is too low");    }    throw new FSMsgException("requestVersionTooLow",null);  }}  }
class C{  public void testValueOfLongNegative2(){  long longVal=-58930018L;  BigInteger aNumber=BigInteger.valueOf(longVal);  byte rBytes[]={-4,124,-52,-98};  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,aNumber.signum());}  }
class C{  public INVALID_ACTIVITY(String detailMessage){  this(detailMessage,0,CompletionStatus.COMPLETED_NO);}  }
class C{  public void skippedEntity(String name) throws SAXException {}  }
class C{  public void write(ByteArrayOutputStream tagBuffer){  logger.config("Write Frame to Buffer" + getIdentifier());  ByteBuffer headerBuffer=ByteBuffer.allocate(getFrameHeaderSize());  ByteArrayOutputStream bodyOutputStream=new ByteArrayOutputStream();  ((AbstractID3v2FrameBody)frameBody).write(bodyOutputStream);  headerBuffer.put(Utils.getDefaultBytes(getIdentifier(),"ISO-8859-1"),0,getFrameIdSize());  encodeSize(headerBuffer,frameBody.getSize());  try {    tagBuffer.write(headerBuffer.array());    tagBuffer.write(bodyOutputStream.toByteArray());  } catch (  IOException ioe) {    throw new RuntimeException(ioe);  }}  }
class C{  private void readObject(ObjectInputStream os) throws IOException, ClassNotFoundException {  os.defaultReadObject();  AnnotationMember[] defs=getElementsDescription(klazz);  AnnotationMember[] old=elements;  List<AnnotationMember> merged=new ArrayList<AnnotationMember>(defs.length + old.length);  nextOld:   for (  AnnotationMember el1 : old) {    for (    AnnotationMember el2 : defs) {      if (el2.name.equals(el1.name)) {        continue nextOld;      }    }    merged.add(el1);  }  nextNew:   for (  AnnotationMember def : defs) {    for (    AnnotationMember val : old) {      if (val.name.equals(def.name)) {        merged.add(val.setDefinition(def));        continue nextNew;      }    }    merged.add(def);  }  elements=merged.toArray(new AnnotationMember[merged.size()]);}  }
class C{  protected View createChild(String name){  View view=null;  if (name.equals(TBL_SESSIONS)) {    SerializedField szCache=(SerializedField)getChild(SZ_CACHE);    populateTableModel((List)szCache.getSerializedObj());    view=new CCActionTable(this,tblModel,name);  } else   if (name.equals(PAGETITLE)) {    view=new CCPageTitle(this,ptModel,name);  } else   if (tblModel.isChildSupported(name)) {    view=tblModel.createChild(this,name);  } else   if (name.equals(CHILD_SERVER_NAME_MENU)) {    view=new CCDropDownMenu(this,name,null);  } else   if (name.equals(LOGOUT_URL)) {    return new CCStaticTextField(this,LOGOUT_URL,"");  } else   if (name.equals(CHILD_SERVER_NAME_HREF)) {    view=new CCHref(this,name,null);  } else {    view=super.createChild(name);  }  return view;}  }
class C{  public void disallow(final Result result,final String message){  this.result=result;  this.message=message;}  }
class C{  public int available() throws IOException {  ensureOpen();  if (entryEOF) {    return 0;  } else {    return 1;  }}  }
class C{  public static String escapeValue(String value){  value=value.replaceAll("'","\\\\'");  return "'" + value + "'";}  }
class C{  public void entityReference(String name) throws org.xml.sax.SAXException {  if (m_tracer != null)   super.fireEntityReference(name);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodechildnodes.class,args);}  }
class C{  public static AttrSet combineAttrSets(AttrSet attrSet1,AttrSet attrSet2){  AttrSet retAttrSet=new AttrSet();  if (attrSet1 != null) {    int count=attrSet1.size();    for (int i=0; i < count; i++) {      Attr attr=attrSet1.elementAt(i);      retAttrSet.add(attr);    }  }  if (attrSet2 != null) {    int count=attrSet2.size();    for (int i=0; i < count; i++) {      Attr attr=attrSet2.elementAt(i);      retAttrSet.add(attr);    }  }  return retAttrSet;}  }
class C{  public List<MappedMember> findMethodsByDesc(String text){  List<MappedMember> list=new ArrayList<MappedMember>();  for (  MappedMember mm : getMethods()) {    if (mm.getDesc().equals(text)) {      list.add(mm);    }  }  return list;}  }
class C{  public void handleBtnSearchRequest(RequestInvocationEvent event){  forwardTo();}  }
class C{  private synchronized boolean removeMapping(Object key,Object value){  int hash=Collections.secondaryHash(key);  HashtableEntry<K,V>[] tab=table;  int index=hash & (tab.length - 1);  for (HashtableEntry<K,V> e=tab[index], prev=null; e != null; prev=e, e=e.next) {    if (e.hash == hash && e.key.equals(key)) {      if (!e.value.equals(value)) {        return false;      }      if (prev == null) {        tab[index]=e.next;      } else {        prev.next=e.next;      }      modCount++;      size--;      return true;    }  }  return false;}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.AssertionURIRefElement createAssertionURIRefElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.AssertionURIRefElementImpl();}  }
class C{  public void logAccessMessage(String msgIdName,String[] data,SSOToken token){  try {    getLogMessageProvider();  } catch (  IOException e) {    logger.error(e.getMessage(),e);    logger.error("disabling logging");    logStatus=false;  }  if ((accessLogger != null) && (msgProvider != null)) {    final LogRecord lr=msgProvider.createLogRecord(msgIdName,data,token);    if (lr != null) {      final SSOToken ssoToken=AccessController.doPrivileged(AdminTokenAction.getInstance());      accessLogger.log(lr,ssoToken);    }  }}  }
class C{  public PipedInputStream(PipedOutputStream src) throws IOException {  this(src,DEFAULT_PIPE_SIZE);}  }
class C{  public void goToNextColor(){  mColorIndex=(mColorIndex + 1) % (mColors.length);}  }
class C{  private void addSubentry(Entry entry) throws DirectoryException {  SubEntry subEntry=new SubEntry(entry);  SubtreeSpecification subSpec=subEntry.getSubTreeSpecification();  DN subDN=subSpec.getBaseDN();  lock.writeLock().lock();  try {    Map<DN,List<SubEntry>> subEntryMap=getSubEntryMap(subEntry);    List<SubEntry> subList=subEntryMap.get(subDN);    if (subList == null) {      subList=new ArrayList<>();      subEntryMap.put(subDN,subList);    }    dit2SubEntry.put(entry.getName(),subEntry);    subList.add(subEntry);  }  finally {    lock.writeLock().unlock();  }}  }
class C{  @Override public String toString(){  if (stringValue == null) {    final StringBuilder builder=new StringBuilder();    avas[0].toString(builder);    for (int i=1; i < avas.length; i++) {      builder.append(AVA_CHAR_SEPARATOR);      avas[i].toString(builder);    }    stringValue=builder.toString();  }  return stringValue;}  }
class C{  public static void registerPasswordStorageScheme(DN configEntryDN,PasswordStorageScheme<?> scheme){  directoryServer.passwordStorageSchemesByDN.put(configEntryDN,scheme);  String name=toLowerCase(scheme.getStorageSchemeName());  directoryServer.passwordStorageSchemes.put(name,scheme);  if (scheme.supportsAuthPasswordSyntax()) {    directoryServer.authPasswordStorageSchemes.put(scheme.getAuthPasswordSchemeName(),scheme);  }}  }
class C{  private void noSuccessor(){  if (compute == FRAMES) {    Label l=new Label();    l.frame=new Frame();    l.frame.owner=l;    l.resolve(this,code.length,code.data);    previousBlock.successor=l;    previousBlock=l;  } else {    currentBlock.outputStackMax=maxStackSize;  }  currentBlock=null;}  }
class C{  public Component add(Component component){  if (!(component instanceof UIResource)) {    addTab(component.getName(),component);  } else {    super.add(component);  }  return component;}  }
class C{  public boolean isEmpty(){  return (id3Tag == null || id3Tag.isEmpty());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode11.class,args);}  }
class C{  public byte[] bytes(){  return bytes;}  }
class C{  protected void textAreaContent(AttributeSet attr) throws BadLocationException, IOException {  Document doc=(Document)attr.getAttribute(StyleConstants.ModelAttribute);  if (doc != null && doc.getLength() > 0) {    if (segment == null) {      segment=new Segment();    }    doc.getText(0,doc.getLength(),segment);    if (segment.count > 0) {      inTextArea=true;      incrIndent();      indentSmart();      setCanWrapLines(true);      replaceEntities=true;      write(segment.array,segment.offset,segment.count);      replaceEntities=false;      setCanWrapLines(false);      writeLineSeparator();      inTextArea=false;      decrIndent();    }  }}  }
class C{  @Override public Object invoke(ELContext context,Object[] params) throws PropertyNotFoundException, MethodNotFoundException, ELException {  EvaluationContext ctx=new EvaluationContext(context,this.fnMapper,this.varMapper);  ctx.notifyBeforeEvaluation(getExpressionString());  Object result=this.getNode().invoke(ctx,this.paramTypes,params);  ctx.notifyAfterEvaluation(getExpressionString());  return result;}  }
class C{  public void testGetMaxCRL(){  X509CRLSelector selector=new X509CRLSelector();  assertNull("Initially the maxCRL should be null.",selector.getMaxCRL());  BigInteger maxCRL=new BigInteger("10000");  selector.setMaxCRLNumber(maxCRL);  assertTrue("The result should be equal to specified.",maxCRL.equals(selector.getMaxCRL()));}  }
class C{  public static JPasswordField makeJPasswordField(LocalizableMessage text,LocalizableMessage tooltip,int size,TextStyle style){  JPasswordField f=new JPasswordField();  updateTextFieldComponent(f,text,tooltip,size,style);  f.addFocusListener(new TextFieldFocusListener(f));  return f;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeentitynodevalue.class,args);}  }
class C{  private void initMetrics(ServletContext servletContext,EnumSet<DispatcherType> disps){  log.debug("Initializing Metrics registries");  servletContext.setAttribute(InstrumentedFilter.REGISTRY_ATTRIBUTE,metricRegistry);  servletContext.setAttribute(MetricsServlet.METRICS_REGISTRY,metricRegistry);  log.debug("Registering Metrics Filter");  FilterRegistration.Dynamic metricsFilter=servletContext.addFilter("webappMetricsFilter",new InstrumentedFilter());  metricsFilter.addMappingForUrlPatterns(disps,true,"/*");  metricsFilter.setAsyncSupported(true);  log.debug("Registering Metrics Servlet");  ServletRegistration.Dynamic metricsAdminServlet=servletContext.addServlet("metricsServlet",new MetricsServlet());  metricsAdminServlet.addMapping("/management/jhipster/metrics/*");  metricsAdminServlet.setAsyncSupported(true);  metricsAdminServlet.setLoadOnStartup(2);}  }
class C{  public boolean markSupported(){  return stream.markSupported();}  }
class C{  public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {  return super.newInstance(javaContentInterface);}  }
class C{  public void create(SSOToken token,String objName,Map attrs) throws SMSException, SSOException {  if ((objName == null) || (objName.length() == 0) || (attrs == null)) {    throw new IllegalArgumentException("SMSEnhancedFlatFileObject.create: " + "One or more arguments is null or empty");  }  String attributeFileName=null;  mRWLock.readRequest();  try {    if (root.isExists(mRootDir,objName)) {      String errmsg="SMSEnhancedFlatFileObject.create: object " + objName;      mDebug.error(errmsg);      throw new ServiceAlreadyExistsException(errmsg);    }  }  finally {    mRWLock.readDone();  }  mRWLock.writeRequest();  if (root.isExists(mRootDir,objName)) {    String errmsg="SMSEnhancedFlatFileObject.create: object " + objName;    mDebug.error(errmsg);    throw new ServiceAlreadyExistsException(errmsg);  }  SMSFlatFileTreeNode node=new SMSFlatFileTreeNode(objName);  String filepath=node.getAttributeFilename(mRootDir);  try {    Set sunserviceids=null;    Set sunxmlkeyvals=null;    Properties props=new Properties();    Set keys=attrs.keySet();    if (keys != null) {      for (Iterator i=keys.iterator(); i.hasNext(); ) {        String key=(String)i.next();        Set vals=(Set)attrs.get(key);        if (key.equalsIgnoreCase(SMSEntry.ATTR_SERVICE_ID)) {          sunserviceids=vals;        } else         if (key.equalsIgnoreCase(SMSEntry.ATTR_XML_KEYVAL)) {          sunxmlkeyvals=vals;        }        props.put(key,toValString(vals));      }    }    try {      File attrFile=new File(filepath);      try {        if (!attrFile.createNewFile()) {          String errmsg="SMSEnhancedFlatFileObject.create: object " + objName + ": Could not create file "+ filepath;          mDebug.error(errmsg);          throw new SMSException(errmsg);        }      } catch (      IOException e) {        String errmsg="SMSEnhancedFlatFileObject.create: object " + objName + " IOException encountered when creating file "+ filepath+ ". Exception: "+ e.getMessage();        mDebug.error("SMSEnhancedFlatFileObject.create",e);        throw new SMSException(errmsg);      }      saveProperties(props,attrFile,objName);      createSunServiceIdFiles(node,sunserviceids);      createSunXmlKeyValFiles(node,sunxmlkeyvals);      if (!root.addChild(node)) {        throw new SMSException("parent not found for node name=" + objName);      }      saveDirectoryTree();    } catch (    SMSException e) {      File attrFile=new File(filepath);      try {        attrFile.delete();      } catch (      SecurityException se) {      }      throw e;    }  }  finally {    mRWLock.writeDone();  }}  }
class C{  public static String decode(byte[] in,char[] out,int offset,int utfSize) throws UTFDataFormatException {  int count=0, s=0, a;  while (count < utfSize) {    if ((out[s]=(char)in[offset + count++]) < '\u0080') {      s++;    } else     if (((a=out[s]) & 0xe0) == 0xc0) {      if (count >= utfSize) {        throw new UTFDataFormatException("bad second byte at " + count);      }      int b=in[offset + count++];      if ((b & 0xC0) != 0x80) {        throw new UTFDataFormatException("bad second byte at " + (count - 1));      }      out[s++]=(char)(((a & 0x1F) << 6) | (b & 0x3F));    } else     if ((a & 0xf0) == 0xe0) {      if (count + 1 >= utfSize) {        throw new UTFDataFormatException("bad third byte at " + (count + 1));      }      int b=in[offset + count++];      int c=in[offset + count++];      if (((b & 0xC0) != 0x80) || ((c & 0xC0) != 0x80)) {        throw new UTFDataFormatException("bad second or third byte at " + (count - 2));      }      out[s++]=(char)(((a & 0x0F) << 12) | ((b & 0x3F) << 6) | (c & 0x3F));    } else {      throw new UTFDataFormatException("bad byte at " + (count - 1));    }  }  return new String(out,0,s);}  }
class C{  @Override public void handleException(final LdapException exception){  notifyOffline(exception);}  }
class C{  public static void sort(int[] array,int start,int end){  DualPivotQuicksort.sort(array,start,end);}  }
class C{  public static Bitmap byteToBitmap(byte[] b){  return (b == null || b.length == 0) ? null : BitmapFactory.decodeByteArray(b,0,b.length);}  }
class C{  public boolean exists(String pid){  logger.debug("Config exists call for {}",pid);  boolean exists=false;  if (isReady(0) && requireRepository) {    String id=pidToId(pid);    try {      ReadRequest readRequest=Requests.newReadRequest(id);      ResourceResponse existing=repo.read(readRequest);      exists=(existing != null);    } catch (    NotFoundException ex) {      exists=false;    }catch (    ResourceException ex) {      throw new RuntimeException("Failed to check if configuration exists in repository: " + ex.getMessage(),ex);    }  }  if (!exists) {    exists=tempStore.containsKey(pid);    if (exists) {      logger.debug("Entry exists in temporary store for '{}'",pid);    }  } else {    logger.debug("Entry exists for '{}'",pid);  }  if (!exists) {    logger.debug("Entry does not exist for '{}'",pid);  }  return exists;}  }
class C{  public Cache(int capacity,float loadFactor){  if (capacity < 0)   throw new IllegalArgumentException("Illegal Capacity: " + capacity);  if (loadFactor <= 0)   throw new IllegalArgumentException("Illegal Load: " + loadFactor);  if (capacity == 0)   capacity=1;  this.loadFactor=loadFactor;  table=new Entry[capacity];  threshold=(int)(capacity * loadFactor);  maxSize=capacity;  lruTracker=new LRUList();}  }
class C{  public void logFailed(String str,String logId,boolean appendAuthType,String error){  try {    String logFailed=str;    if (str == null) {      logFailed=LazyConfig.AUTHD.bundle.getString("loginFailed");    }    List<String> dataList=new ArrayList<String>();    dataList.add(logFailed);    StringBuilder messageId=new StringBuilder();    messageId.append(logId);    if ((indexType != null) && (indexType != AuthContext.IndexType.COMPOSITE_ADVICE)) {      if (appendAuthType) {        messageId.append("_").append(indexType.toString().toUpperCase());      }      dataList.add(indexType.toString());      if (indexName != null) {        dataList.add(indexName);      }    }    if (error != null) {      messageId.append("_").append(error);    }    String[] data=dataList.toArray(new String[dataList.size()]);    String contextId=null;    try {      SSOToken localSSOToken=getSSOToken();      if (localSSOToken != null) {        contextId=localSSOToken.getProperty(Constants.AM_CTX_ID);      }    } catch (    SSOException ssoe) {      DEBUG.message("Error while retrieving SSOToken for login failure: " + ssoe.getMessage());    }    Hashtable<String,String> props=new Hashtable<String,String>();    if (client != null) {      props.put(LogConstants.IP_ADDR,client);    }    if (userDN != null) {      props.put(LogConstants.LOGIN_ID,userDN);    } else     if (getFailureTokenId() != null) {      props.put(LogConstants.LOGIN_ID,getFailureTokenId());    } else     if (callbacksPerState != null && !callbacksPerState.values().isEmpty()) {      for (      Callback[] cb : callbacksPerState.values()) {        for (        Callback aCb : cb) {          if (aCb instanceof NameCallback) {            userDN=((NameCallback)aCb).getName();            if (DEBUG.messageEnabled()) {              DEBUG.message("userDN is null, setting to " + userDN);            }            props.put(LogConstants.LOGIN_ID,userDN);          }        }      }    }    if (orgDN != null) {      props.put(LogConstants.DOMAIN,orgDN);    }    if ((failureModuleList != null) && (failureModuleList.length() > 0)) {      props.put(LogConstants.MODULE_NAME,failureModuleList);    }    InternalSession session=getReferencedSession();    if (session != null) {      props.put(LogConstants.LOGIN_ID_SID,finalSessionId.toString());    }    if (contextId != null) {      props.put(LogConstants.CONTEXT_ID,contextId);    }    LazyConfig.AUTHD.logIt(data,LazyConfig.AUTHD.LOG_ERROR,messageId.toString(),props);  } catch (  Exception e) {    DEBUG.error("Error creating logFailed message",e);  }}  }
class C{  private boolean validateID(String sId){  return !siteIdSet.isEmpty() && siteIdSet.contains(sId);}  }
class C{  public void openFrame(JInternalFrame f){  if (f.getDesktopIcon().getParent() != null) {    f.getDesktopIcon().getParent().add(f);    removeIconFor(f);  }}  }
class C{  public Callback build(){  Reject.ifTrue(-1 == callbackIndex,"callback index required");  Reject.ifNull(scheme,"uri scheme is required");  Reject.ifNull(host,"uri host is required");  Reject.ifNull(port,"uri port is required");  final String uri=makeUri();  final String callback=CALLBACK_STRING + callbackIndex;  return new ScriptTextOutputCallback(GenerationUtils.getQRCodeGenerationJavascriptForAuthenticatorAppRegistration(callback,uri));}  }
class C{  public Point2D board_to_screen(PlaPointFloat p_point){  PlaPointFloat rotated_point=p_point.rotate_rad(rotation_radiants,rotation_pole);  double x, y;  if (mirror_left_right) {    x=(design_box_with_offset.width() - rotated_point.v_x - 1) * scale_factor + display_x_offset;  } else {    x=rotated_point.v_x * scale_factor - display_x_offset;  }  if (mirror_top_bottom) {    y=(design_box_with_offset.height() - rotated_point.v_y - 1) * scale_factor + display_y_offset;  } else {    y=rotated_point.v_y * scale_factor - display_y_offset;  }  return new Point2D.Double(x,y);}  }
class C{  @Override public boolean onContextItemSelected(MenuItem item){  int position=((AdapterView.AdapterContextMenuInfo)item.getMenuInfo()).position;  View itemView=mLvFavorites.getAdapter().getView(position,null,mLvFavorites);  TextView stationFreqView=(TextView)itemView.findViewById(R.id.lv_station_freq);  TextView stationNameView=(TextView)itemView.findViewById(R.id.lv_station_name);  mDlgStationFreq=FmRadioUtils.computeStation(Float.parseFloat(stationFreqView.getText().toString()));  mDlgStationName=stationNameView.getText().toString();switch (item.getItemId()) {case CONTMENU_ID_ADD:    showAddFavoriteDialog();  break;case CONTMENU_ID_EDIT:showEditFavoriteDialog();break;case CONTMENU_ID_DELETE:showDeleteFavoriteDialog();break;default :Log.d(TAG,"invalid menu item");break;}return false;}  }
class C{  private static String contentsOfFile(File file){  StringBuilder contents=new StringBuilder();  BufferedReader reader=null;  try {    reader=new BufferedReader(new InputStreamReader(new FileInputStream(file),"utf-8"));    String line;    while ((line=reader.readLine()) != null) {      contents.append(line);      contents.append("\n");    }  } catch (  Exception e) {    e.printStackTrace();  } finally {    if (reader != null) {      try {        reader.close();      } catch (      IOException ignored) {      }    }  }  return contents.toString();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(notationgetpublicidnull.class,args);}  }
class C{  public boolean isEmpty(){  return head == tail;}  }
class C{  public static JTextArea createTextArea(LocalizableMessage text,int rows,int cols){  JTextArea ta=new JTextArea(text.toString(),rows,cols);  ta.setFont(ColorAndFontConstants.defaultFont);  return ta;}  }
class C{  public int next(){  final int startNode=_startNode;  if (_startNode == NULL) {    return NULL;  }  int node=_currentNode;  int expType;  final int nodeType=_nodeType;  if (nodeType != DTM.ELEMENT_NODE) {    do {      node++;      expType=_exptype2(node);      if (NULL == expType || _parent2(node) < startNode && startNode != node) {        _currentNode=NULL;        return END;      }    } while (expType != nodeType);  } else   if (startNode == DTMDefaultBase.ROOTNODE) {    do {      node++;      expType=_exptype2(node);      if (NULL == expType) {        _currentNode=NULL;        return END;      }    } while (expType < DTM.NTYPES || m_extendedTypes[expType].getNodeType() != DTM.ELEMENT_NODE);  } else {    do {      node++;      expType=_exptype2(node);      if (NULL == expType || _parent2(node) < startNode && startNode != node) {        _currentNode=NULL;        return END;      }    } while (expType < DTM.NTYPES || m_extendedTypes[expType].getNodeType() != DTM.ELEMENT_NODE);  }  _currentNode=node;  return returnNode(makeNodeHandle(node));}  }
class C{  public static IOFileFilter or(IOFileFilter... filters){  return new OrFileFilter(toList(filters));}  }
class C{  private Collection<String> deepMatchAll(String[] names,int threshold){  if (names.length < 2 || names.length < threshold) {    return emptySet();  }  String common=commonSequenceMatcher.matchFirstCommonSequence(names);  if (common != null) {    return singleton(common);  }  List<String> results=new ArrayList<String>();  results.addAll(deepMatchAll(Arrays.copyOfRange(names,0,names.length / 2),threshold));  results.addAll(deepMatchAll(Arrays.copyOfRange(names,names.length / 2,names.length),threshold));  return results;}  }
class C{  public MemoryHandler(){  sealed=false;  configure();  sealed=true;  LogManager manager=LogManager.getLogManager();  String handlerName=getClass().getName();  String targetName=manager.getProperty(handlerName + ".target");  if (targetName == null) {    throw new RuntimeException("The handler " + handlerName + " does not specify a target");  }  Class<?> clz;  try {    clz=ClassLoader.getSystemClassLoader().loadClass(targetName);    target=(Handler)clz.newInstance();  } catch (  ClassNotFoundException|InstantiationException|IllegalAccessException e) {    throw new RuntimeException("MemoryHandler can't load handler target \"" + targetName + "\"",e);  }  init();}  }
class C{  public synchronized void discardAllEdits(){  for (  UndoableEdit e : edits) {    e.die();  }  edits=new Vector<UndoableEdit>();  indexOfNextAdd=0;}  }
class C{  public void destroy(){synchronized (SyncOp) {    rtmpSender.destroy();    videoClient.destroy();    audioClient.destroy();    rtmpSender=null;    videoClient=null;    audioClient=null;    LogTools.d("RESClient,destroy()");  }}  }
class C{  @Override public void removeByField2(boolean field2){  for (  Foo foo : findByField2(field2,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)) {    remove(foo);  }}  }
class C{  public boolean isUserRegistrationEnabled(){  return userRegistrationEnabled;}  }
class C{  public static Foo fetchByUUID_G(java.lang.String uuid,long groupId){  return getPersistence().fetchByUUID_G(uuid,groupId);}  }
class C{  public int hashCode(){  if (hashCode == -1) {    hashCode=ASCIICaseInsensitiveComparator.lowerCaseHashCode(name);  }  return hashCode;}  }
class C{  private static float convertFromMicrometers(int x,int units){  if (units < 1) {    throw new IllegalArgumentException("units is < 1");  }  return ((float)x) / ((float)units);}  }
class C{  protected void sendNoRpcChannelReply(RpcMessage msg,Member destination){  try {    if (msg instanceof RpcMessage.NoRpcChannelReply)     return;    RpcMessage.NoRpcChannelReply reply=new RpcMessage.NoRpcChannelReply(msg.rpcId,msg.uuid);    send(new Member[]{destination},reply,Channel.SEND_OPTIONS_ASYNCHRONOUS);  } catch (  Exception x) {    log.error(sm.getString("groupChannel.sendFail.noRpcChannelReply"),x);  }}  }
class C{  private void grow(){  m_allocatedSize*=2;  boolean newVector[]=new boolean[m_allocatedSize];  System.arraycopy(m_values,0,newVector,0,m_index + 1);  m_values=newVector;}  }
class C{  @Inject public SocialUserDetailsStage(@SelfService Client httpClient,@SelfService PropertyMappingService mappingService){  this.httpClient=httpClient;  this.mappingService=mappingService;}  }
class C{  public DetectorResult detect() throws NotFoundException, FormatException {  return detect(null);}  }
class C{  protected TrueFileFilter(){}  }
class C{  public synchronized void mark(int readlimit){}  }
class C{  @Override public boolean equals(Object o){  if (o == null) {    return false;  }  if (o == this) {    return true;  }  if (!(o instanceof SearchFilter)) {    return false;  }  SearchFilter f=(SearchFilter)o;  if (filterType != f.filterType) {    return false;  }switch (filterType) {case AND:case OR:    return andOrEqual(f);case NOT:  return notComponent.equals(f.notComponent);case SUBSTRING:return substringEqual(f);case PRESENT:return attributeDescription.equals(f.attributeDescription);case EXTENSIBLE_MATCH:return extensibleEqual(f);case EQUALITY:case APPROXIMATE_MATCH:case GREATER_OR_EQUAL:case LESS_OR_EQUAL:return attributeDescription.equals(f.attributeDescription) && assertionValue.equals(f.assertionValue);default :return false;}}  }
class C{  void saveSubjectState(){  if (principalList != null) {    requestMap.put(ISAuthConstants.PRINCIPAL_LIST,principalList);  }}  }
class C{  public XMLSignatureException(Throwable t){  super(t);}  }
class C{  private boolean isControl(Element elem){  return elem.isLeaf();}  }
class C{  synchronized void enqueue(Reference<? extends T> reference){  if (head == null) {    reference.queueNext=reference;  } else {    reference.queueNext=head;  }  head=reference;  notify();}  }
class C{  public AttributeI18NKeyComparator(Collator collator){  this.collator=collator;}  }
class C{  protected void countProximityPosition(int i){  if (i < m_proximityPositions.length)   m_proximityPositions[i]--;}  }
class C{  private static String URLencodedCompositeAdvice(String queryParams){  StringBuilder sb=new StringBuilder(400);  StringTokenizer st=new StringTokenizer(queryParams,"&");  String adviceString=null;  while (st.hasMoreTokens()) {    String str=st.nextToken();    if (str.indexOf(COMPOSITE_ADVICE) != -1) {      adviceString=str;    } else {      sb.append(str).append("&");    }  }  int index=adviceString.indexOf("=");  String value=adviceString.substring(index + 1);  sb.append(COMPOSITE_ADVICE).append("=");  sb.append(URLEncDec.encode(value));  return sb.toString();}  }
class C{  public static XingFrame parseXingFrame(ByteBuffer header) throws InvalidAudioFrameException {  XingFrame xingFrame=new XingFrame(header);  return xingFrame;}  }
class C{  public void recurseSubFrames(ProfileStack stack,int depth,long count,HashMap<String,HashMap<ProfileStack,Long>> stacksByMethod){  if (depth < 0) {    return;  }  String cName=stack.getClassName(depth);  String mName=stack.getMethodName(depth);  ProfileStackFrame f=new ProfileStackFrame(cName,mName);  int lineNumber=stack.getLineNumber(depth);  ProfileStackFrame subFrame=subordinateFrames.get(f);  if (subFrame == null) {    subFrame=f;    subordinateFrames.put(subFrame,subFrame);  }  subFrame.updateLineNumberCount(lineNumber,count);  String classAndMethod=cName + "." + mName;  HashMap<ProfileStack,Long> stackMap=stacksByMethod.get(classAndMethod);  if (stackMap == null) {    stackMap=new HashMap<>();    stacksByMethod.put(classAndMethod,stackMap);  }  stackMap.put(stack,count);  subFrame.recurseSubFrames(stack,depth - 1,count,stacksByMethod);}  }
class C{  public PlaSegmentInt opposite(){  return new PlaSegmentInt(end.opposite(),middle.opposite(),start.opposite());}  }
class C{  @SuppressWarnings("deprecation") public void onEvent(final DisruptorShortEventEntry eventEntry,final long sequence,final boolean endOfBatch) throws Exception {  long diff=eventEntry.endTime - eventEntry.startTime;  MonitoringInfo entry=map.get(eventEntry.eventName.asString());  if (entry == null) {    entry=new MonitoringInfo();    map.put(eventEntry.eventName.asString(),entry);  }  entry.totalTime+=diff;  entry.totalInvokes++;}  }
class C{  public void visitLineNumber(int line,Label start){  if (mv != null) {    mv.visitLineNumber(line,start);  }}  }
class C{  public Builder(){  config=new PushNotificationServiceConfig();}  }
class C{  private boolean calc_horizontal_first_to_door(ExpandObject p_to_door,PlaPointFloat p_from_point,PlaPointFloat p_to_point){  ShapeTile door_shape=p_to_door.get_shape();  ShapeTileBox from_door_box=door_shape.bounding_box();  if (p_to_door.get_dimension().is_area()) {    return from_door_box.height() <= from_door_box.width();  }  PlaSegmentFloat door_line_segment=door_shape.diagonal_corner_segment();  PlaPointFloat left_corner;  PlaPointFloat right_corner;  if (door_line_segment.point_a.v_x < door_line_segment.point_b.v_x || door_line_segment.point_a.v_x == door_line_segment.point_b.v_x && door_line_segment.point_a.v_y <= door_line_segment.point_b.v_y) {    left_corner=door_line_segment.point_a;    right_corner=door_line_segment.point_b;  } else {    left_corner=door_line_segment.point_b;    right_corner=door_line_segment.point_a;  }  double door_dx=right_corner.v_x - left_corner.v_x;  double door_dy=right_corner.v_y - left_corner.v_y;  double abs_door_dy=Math.abs(door_dy);  double door_max_width=Math.max(door_dx,abs_door_dy);  boolean result;  double door_half_max_width=0.5 * door_max_width;  if (from_door_box.width() <= door_half_max_width) {    result=false;  } else   if (from_door_box.height() <= door_half_max_width) {    result=true;  } else {    double dx=p_to_point.v_x - p_from_point.v_x;    double dy=p_to_point.v_y - p_from_point.v_y;    if (left_corner.v_y < right_corner.v_y) {      if (Signum.of(dx) == Signum.of(dy)) {        result=Math.abs(dx) < Math.abs(dy);      } else {        result=Math.abs(dx) > Math.abs(dy);      }    } else {      if (Signum.of(dx) == Signum.of(dy)) {        result=Math.abs(dx) > Math.abs(dy);      } else {        result=Math.abs(dx) < Math.abs(dy);      }    }  }  return result;}  }
class C{  public boolean remove_via(BrdViaInfo p_via){  return vinfo_list.remove(p_via);}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  String schemaType=getStringOptionValue(IArgument.SCHEMA_TYPE);  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  String subSchemaName=getStringOptionValue(IArgument.SUBSCHEMA_NAME);  String datafile=getStringOptionValue(IArgument.DATA_FILE);  List attrValues=rc.getOption(IArgument.ATTRIBUTE_VALUES);  if ((datafile == null) && (attrValues == null)) {    throw new CLIException(getResourceString("missing-attributevalues"),ExitCodes.INCORRECT_OPTION,rc.getSubCommand().getName());  }  Map attributeValues=AttributeValues.parse(getCommandManager(),datafile,attrValues);  ServiceSchema ss=getServiceSchema();  IOutput outputWriter=getOutputWriter();  String attributeName=null;  try {    Map mapOldValues=ss.getAttributeDefaults();    for (Iterator i=attributeValues.keySet().iterator(); i.hasNext(); ) {      attributeName=(String)i.next();      String[] params={serviceName,schemaType,subSchemaName,attributeName};      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_ADD_SCHEMA_ATTR_DEFAULTS",params);      Set oldValues=(Set)mapOldValues.get(attributeName);      Set newValues=((oldValues == null) || oldValues.isEmpty()) ? new HashSet() : new HashSet(oldValues);      newValues.addAll((Set)attributeValues.get(attributeName));      ss.setAttributeDefaults(attributeName,newValues);      writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_ADD_SCHEMA_ATTR_DEFAULTS",params);      outputWriter.printlnMessage(MessageFormat.format(getResourceString("schema-add-attribute-defaults-succeed"),(Object[])params));    }  } catch (  SSOException e) {    String[] args={serviceName,schemaType,subSchemaName,attributeName,e.getMessage()};    debugError("AddAttributeDefaults.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_ADD_SCHEMA_ATTR_DEFAULTS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={serviceName,schemaType,subSchemaName,attributeName,e.getMessage()};    debugError("AddAttributeDefaults.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_ADD_SCHEMA_ATTR_DEFAULTS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public void warn(Object message){}  }
class C{  public void printin(String s){  writer.print(SPACES.substring(0,indent));  writer.print(s);}  }
class C{  public static Pnt circumcenter(Pnt[] simplex){  int dim=simplex[0].dimension();  if (simplex.length - 1 != dim)   throw new IllegalArgumentException("Dimension mismatch");  Pnt[] matrix=new Pnt[dim];  for (int i=0; i < dim; i++)   matrix[i]=simplex[i].bisector(simplex[i + 1]);  Pnt hCenter=cross(matrix);  double last=hCenter.coordinates[dim];  double[] result=new double[dim];  for (int i=0; i < dim; i++)   result[i]=hCenter.coordinates[i] / last;  return new Pnt(result);}  }
class C{  @DataProvider(name="stringValues") public Object[][] createStringValues(){  return new Object[][]{{"\"\"",true},{"\"escaped\"\"dquotes\"",true},{"\"valid Unicode \u00D6\u00C4\"",true},{"\"only one \" \"",false},{"invalid without dquotes",false},{"\"missing end",false},{"\"valid string\" with extra trailing characters",false}};}  }
class C{  public HashAttributeSet(Attribute attribute){  this(attribute,Attribute.class);}  }
class C{  private void checkSchema(Attribute attr,Arg4<Object,Object,Object,Object> invalidSyntaxErrorMsg,Arg3<Object,Object,Object> invalidSyntaxNoValueErrorMsg) throws DirectoryException {  AcceptRejectWarn syntaxPolicy=DirectoryServer.getSyntaxEnforcementPolicy();  AttributeDescription attrDesc=attr.getAttributeDescription();  Syntax syntax=attrDesc.getAttributeType().getSyntax();  LocalizableMessageBuilder invalidReason=new LocalizableMessageBuilder();  for (  ByteString v : attr) {    if (!syntax.valueIsAcceptable(v,invalidReason)) {      LocalizableMessage msg=isHumanReadable(syntax) ? invalidSyntaxErrorMsg.get(entryDN,attrDesc,v,invalidReason) : invalidSyntaxNoValueErrorMsg.get(entryDN,attrDesc,invalidReason);switch (syntaxPolicy) {case REJECT:        throw newDirectoryException(currentEntry,ResultCode.INVALID_ATTRIBUTE_SYNTAX,msg);case WARN:      setResultCode(ResultCode.INVALID_ATTRIBUTE_SYNTAX);    logger.error(msg);  invalidReason=new LocalizableMessageBuilder();break;}}}}  }
class C{  public static String acronym(String self){  return compile("\\s|\\B\\p{Alnum}+",UNICODE_CHARACTER_CLASS).matcher(space(sortName(self)," ")).replaceAll("");}  }
class C{  protected void updateLayoutState(){  int fixedCellHeight=list.getFixedCellHeight();  int fixedCellWidth=list.getFixedCellWidth();  cellWidth=(fixedCellWidth != -1) ? fixedCellWidth : -1;  if (fixedCellHeight != -1) {    cellHeight=fixedCellHeight;    cellHeights=null;  } else {    cellHeight=-1;    cellHeights=new int[list.getModel().getSize()];  }  if ((fixedCellWidth == -1) || (fixedCellHeight == -1)) {    ListModel dataModel=list.getModel();    int dataModelSize=dataModel.getSize();    ListCellRenderer renderer=list.getCellRenderer();    if (renderer != null) {      for (int index=0; index < dataModelSize; index++) {        Object value=dataModel.getElementAt(index);        Component c=renderer.getListCellRendererComponent(list,value,index,false,false);        rendererPane.add(c);        Dimension cellSize=c.getPreferredSize();        if (fixedCellWidth == -1) {          cellWidth=Math.max(cellSize.width,cellWidth);        }        if (fixedCellHeight == -1) {          cellHeights[index]=cellSize.height;        }      }    } else {      if (cellWidth == -1) {        cellWidth=0;      }      if (cellHeights == null) {        cellHeights=new int[dataModelSize];      }      for (int index=0; index < dataModelSize; index++) {        cellHeights[index]=0;      }    }  }  columnCount=1;  if (layoutOrientation != JList.VERTICAL) {    updateHorizontalLayoutState(fixedCellWidth,fixedCellHeight);  }}  }
class C{  public IllegalPathStateException(){}  }
class C{  public XObject execute(XPathContext xctxt,int context,DTM dtm,int expType) throws javax.xml.transform.TransformerException {  if (m_whatToShow == DTMFilter.SHOW_ALL)   return m_score;  int nodeBit=(m_whatToShow & (0x00000001 << ((dtm.getNodeType(context)) - 1)));switch (nodeBit) {case DTMFilter.SHOW_DOCUMENT_FRAGMENT:case DTMFilter.SHOW_DOCUMENT:    return SCORE_OTHER;case DTMFilter.SHOW_COMMENT:  return m_score;case DTMFilter.SHOW_CDATA_SECTION:case DTMFilter.SHOW_TEXT:return m_score;case DTMFilter.SHOW_PROCESSING_INSTRUCTION:return subPartMatch(dtm.getNodeName(context),m_name) ? m_score : SCORE_NONE;case DTMFilter.SHOW_NAMESPACE:{String ns=dtm.getLocalName(context);return (subPartMatch(ns,m_name)) ? m_score : SCORE_NONE;}case DTMFilter.SHOW_ATTRIBUTE:case DTMFilter.SHOW_ELEMENT:{return (m_isTotallyWild || (subPartMatchNS(dtm.getNamespaceURI(context),m_namespace) && subPartMatch(dtm.getLocalName(context),m_name))) ? m_score : SCORE_NONE;}default :return SCORE_NONE;}}  }
class C{  public void initializeProperties(Properties properties){  com.iplanet.am.util.SystemProperties.initializeProperties(properties);}  }
class C{  public SchemaBuilder addToSchemaOverwrite(){  return getSchemaBuilder().addMatchingRule(new MatchingRule(this),true);}  }
class C{  public void clearPassword(){  if (inputPassword != null) {    for (int i=0; i < inputPassword.length; i++)     inputPassword[i]=' ';  }}  }
class C{  public final String toString(){  return (name + ", early reflection delay " + earlyReflectionDelay+ " ns, early reflection intensity "+ earlyReflectionIntensity+ " dB, late deflection delay "+ lateReflectionDelay+ " ns, late reflection intensity "+ lateReflectionIntensity+ " dB, decay time "+ decayTime);}  }
class C{  public RequireHeader createRequireHeader(String optionTag) throws ParseException {  if (optionTag == null)   throw new NullPointerException("null optionTag");  Require require=new Require();  require.setOptionTag(optionTag);  return require;}  }
class C{  private static final boolean compareAndSetWaitStatus(Node node,int expect,int update){  return unsafe.compareAndSwapInt(node,waitStatusOffset,expect,update);}  }
class C{  public FrameBodyTDRC(FrameBodyTRDA body){  originalID=ID3v23Frames.FRAME_ID_V3_TRDA;  date=body.getText();  setObjectValue(DataTypes.OBJ_TEXT_ENCODING,TextEncoding.ISO_8859_1);  setObjectValue(DataTypes.OBJ_TEXT,getFormattedText());}  }
class C{  protected SheetCollate(int value){  super(value);}  }
class C{  protected void startEditingTimer(){  if (timer == null) {    timer=new Timer(1200,this);    timer.setRepeats(false);  }  timer.start();}  }
class C{  public GlobalDecorator(final Decorator parent,final JsonValue config,final String... reservedFieldNames){  this.parent=parent;  this.decorators=config.expect(Map.class).clone();  for (  String reservedFieldName : reservedFieldNames) {    decorators.remove(reservedFieldName);  }}  }
class C{  public static void addServersToSite(SSOToken ssoToken,String siteName,Collection serverInstanceNames) throws SMSException, SSOException, ConfigurationException {  String siteId=getSiteId(ssoToken,siteName);  if (siteId != null) {    for (Iterator i=serverInstanceNames.iterator(); i.hasNext(); ) {      String svr=(String)i.next();      ServerConfiguration.addToSite(ssoToken,svr,siteName);    }  }}  }
class C{  @SuppressWarnings("unused") public static int valueRangeLimit(int value,int startValue,int endValue){  return (int)ScWidget.valueRangeLimit((float)value,(float)startValue,(float)endValue);}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.AddrTypeElement createAddrTypeElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.AddrTypeElementImpl();}  }
class C{  public void updateMessageWritten(LDAPMessage message){  messagesWritten.getAndIncrement();switch (message.getProtocolOp().getType()) {case OP_TYPE_ADD_RESPONSE:    addResponses.getAndIncrement();  operationsCompleted.getAndIncrement();break;case OP_TYPE_BIND_RESPONSE:bindResponses.getAndIncrement();operationsCompleted.getAndIncrement();break;case OP_TYPE_COMPARE_RESPONSE:compareResponses.getAndIncrement();operationsCompleted.getAndIncrement();break;case OP_TYPE_DELETE_RESPONSE:deleteResponses.getAndIncrement();operationsCompleted.getAndIncrement();break;case OP_TYPE_EXTENDED_RESPONSE:extendedResponses.getAndIncrement();if (message.getMessageID() > 0) {operationsCompleted.getAndIncrement();}break;case OP_TYPE_MODIFY_RESPONSE:modifyResponses.getAndIncrement();operationsCompleted.getAndIncrement();break;case OP_TYPE_MODIFY_DN_RESPONSE:modifyDNResponses.getAndIncrement();operationsCompleted.getAndIncrement();break;case OP_TYPE_SEARCH_RESULT_ENTRY:searchResultEntries.getAndIncrement();break;case OP_TYPE_SEARCH_RESULT_REFERENCE:searchResultReferences.getAndIncrement();break;case OP_TYPE_SEARCH_RESULT_DONE:searchResultsDone.getAndIncrement();operationsCompleted.getAndIncrement();break;}}  }
class C{  protected void fireStateChanged(){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ChangeListener.class) {      if (changeEvent == null) {        changeEvent=new ChangeEvent(this);      }      ((ChangeListener)listeners[i + 1]).stateChanged(changeEvent);    }  }}  }
class C{  public OmnidroidException(int code,String message,Throwable cause){  super(message,cause);  this.code=code;}  }
class C{  private ThreadGroup(){  this.name="main";  this.parent=null;}  }
class C{  protected void resetChildrenPaths(TreePath parentPath){  removeMapping(this);  if (parentPath == null)   path=new TreePath(getUserObject()); else   path=parentPath.pathByAddingChild(getUserObject());  addMapping(this);  for (int counter=getChildCount() - 1; counter >= 0; counter--)   ((TreeStateNode)getChildAt(counter)).resetChildrenPaths(path);}  }
class C{  public Object clone(){  SIPResponse retval=(SIPResponse)super.clone();  if (this.statusLine != null)   retval.statusLine=(StatusLine)this.statusLine.clone();  return retval;}  }
class C{  private static int nextKeyIndex(int i,int len){  return (i + 2 < len ? i + 2 : 0);}  }
class C{  public void signXML() throws SAMLException {  String certAlias=SystemConfigurationUtil.getProperty(Constants.SAML_XMLSIG_CERT_ALIAS);  signXML(certAlias);}  }
class C{  public Boolean isAutoStopEnabled(){  return autoStopEnable;}  }
class C{  private boolean isMember(String invocatorUuid) throws SSOException, PolicyException {  boolean subjectMatch=false;  if (invocatorUuid == null) {    if (DEBUG.warningEnabled()) {      DEBUG.warning("AMIdentityMembershipCondition.isMember():" + "invocatorUuid is null");      DEBUG.warning("AMIdentityMembershipCondition.isMember():" + "returning false");    }    return false;  }  if (DEBUG.messageEnabled()) {    DEBUG.warning("AMIdentityMembershipCondition.isMember():" + "invocatorUuid:" + invocatorUuid);  }  if (!nameValues.isEmpty()) {    Iterator valueIter=nameValues.iterator();    while (valueIter.hasNext()) {      String nameValue=(String)valueIter.next();      if (DEBUG.messageEnabled()) {        DEBUG.message("AMIndentityMembershipCondition.isMember(): " + "checking membership with nameValue = " + nameValue + ", invocatorUuid = "+ invocatorUuid);      }      try {        AMIdentity invocatorIdentity=IdUtils.getIdentity(getAdminToken(),invocatorUuid);        if (invocatorIdentity == null) {          if (DEBUG.messageEnabled()) {            DEBUG.message("AMidentityMembershipCondition.isMember():" + "invocatorIdentity is null for " + "invocatorUuid = "+ invocatorUuid);            DEBUG.message("AMidentityMembershipCondition.isMember():" + "returning false");          }          return false;        }        AMIdentity nameValueIdentity=IdUtils.getIdentity(getAdminToken(),nameValue);        if (nameValueIdentity == null) {          if (DEBUG.messageEnabled()) {            DEBUG.message("AMidentityMembershipCondition.isMember():" + "nameValueidentity is null for " + "nameValue = "+ nameValue);            DEBUG.message("AMidentityMembershipCondition.isMember():" + "returning false");          }          return false;        }        IdType invocatorIdType=invocatorIdentity.getType();        IdType nameValueIdType=nameValueIdentity.getType();        Set allowedMemberTypes=null;        if (invocatorIdentity.equals(nameValueIdentity)) {          if (DEBUG.messageEnabled()) {            DEBUG.message("AMidentityMembershipCondition.isMember():" + "invocatorIdentity equals " + " nameValueIdentity:"+ "membership=true");          }          subjectMatch=true;        } else         if (((allowedMemberTypes=nameValueIdType.canHaveMembers()) != null) && allowedMemberTypes.contains(invocatorIdType)) {          subjectMatch=invocatorIdentity.isMember(nameValueIdentity);          if (DEBUG.messageEnabled()) {            DEBUG.message("AMIdentityMembershipCondition.isMember():" + "invocatorIdentityType " + invocatorIdType + " can be a member of "+ " nameValueIdentityType "+ nameValueIdType+ ":membership="+ subjectMatch);          }        } else {          subjectMatch=false;          if (DEBUG.messageEnabled()) {            DEBUG.message("AMIdentityMembershipCondition.isMember():" + "invocatoridentityType " + invocatorIdType + " can be a member of "+ " nameValueIdentityType "+ nameValueIdType+ ":membership="+ subjectMatch);          }        }        if (subjectMatch) {          break;        }      } catch (      IdRepoException ire) {        DEBUG.warning("AMidentityMembershipCondition.isMember():" + "can not check membership for invocator " + invocatorUuid + ", nameValue "+ nameValue,ire);        String[] args={invocatorUuid,nameValue};        throw (new PolicyException(ResBundleUtils.rbName,"am_id_subject_membership_evaluation_error",args,ire));      }    }  }  if (DEBUG.messageEnabled()) {    DEBUG.message("AMIdentityMembershipCondition.isMember():" + "invocatorUuidr=" + invocatorUuid + ",nameValues="+ nameValues+ ",subjectMatch="+ subjectMatch);  }  return subjectMatch;}  }
class C{  public void testCertPathValidator02(){  try {    CertPathValidator.getInstance(null);    fail("NullPointerException or NoSuchAlgorithmException must be thrown when algorithm is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertPathValidator.getInstance(invalidValues[i]);      fail("NoSuchAlgorithmException must be thrown");    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  public static StringValueExp value(String val){  return new StringValueExp(val);}  }
class C{  private void cleanUpTempSchemaFiles(HashMap<String,File> tempSchemaFiles){  deleteFiles(tempSchemaFiles.values());}  }
class C{  protected int placeTo(ByteBuffer[] dsts,int offset,int length){  if (buffer == null) {    return 0;  }  int pos=0;  int len=buffer.length;  int rem;  for (int i=offset; i < offset + length; i++) {    rem=dsts[i].remaining();    if (len - pos < rem) {      dsts[i].put(buffer,pos,len - pos);      pos=len;      break;    }    dsts[i].put(buffer,pos,rem);    pos+=rem;  }  if (pos != len) {    throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLException("The received application data could not be fully written" + "into the destination buffers"));  }  buffer=null;  return len;}  }
class C{  public void visitEnd(){  if (fv != null) {    fv.visitEnd();  }}  }
class C{  public UnsupportedCharsetException(String charsetName){  super(String.valueOf(charsetName));  this.charsetName=charsetName;}  }
class C{  protected Object createSelfEvaluationMBean(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){  selfPolicyEvaluation=new SelfEvaluationImpl(this);  return selfPolicyEvaluation;}  }
class C{  private void replaceSecondPageAndRenumberPageSeqs(OggVorbisTagReader.OggVorbisHeaderSizes originalHeaderSizes,int newCommentLength,int newSecondPageLength,OggPageHeader secondPageHeader,ByteBuffer newComment,RandomAccessFile raf,RandomAccessFile rafTemp) throws IOException, CannotReadException, CannotWriteException {  logger.fine("WriteOgg Type 2");  ByteBuffer secondPageBuffer=startCreateBasicSecondPage(originalHeaderSizes,newCommentLength,newSecondPageLength,secondPageHeader,newComment);  int pageSequence=secondPageHeader.getPageSequence();  byte[] setupHeaderData=reader.convertToVorbisSetupHeaderPacketAndAdditionalPackets(originalHeaderSizes.getSetupHeaderStartPosition(),raf);  logger.finest(setupHeaderData.length + ":" + secondPageBuffer.position()+ ":"+ secondPageBuffer.capacity());  secondPageBuffer.put(setupHeaderData);  calculateChecksumOverPage(secondPageBuffer);  rafTemp.getChannel().write(secondPageBuffer);  writeRemainingPages(pageSequence,raf,rafTemp);}  }
class C{  public void collectDialogTermiatedEvent(SipProvider provider) throws TooManyListenersException {  initCollectors(provider);  provider.addSipListener(dialogTerminationCollector);}  }
class C{  private void createPageTitleModel(){  ptModel=new CCPageTitleModel(getClass().getClassLoader().getResourceAsStream("com/sun/identity/console/fileUploaderPageTitle.xml"));}  }
class C{  public final Collection<? extends Certificate> generateCertificates(InputStream inStream) throws CertificateException {  return spiImpl.engineGenerateCertificates(inStream);}  }
class C{  static void signResponse(Response response,String realm,String pepEntityID,String pdpEntityID) throws SAML2Exception {  String classMethod="signResponse : ";  String attrName="wantXACMLAuthzDecisionResponseSigned";  String wantResponseSigned=SAML2Utils.getAttributeValueFromXACMLConfig(realm,SAML2Constants.PEP_ROLE,pepEntityID,attrName);  if (wantResponseSigned == null || wantResponseSigned.equalsIgnoreCase("false")) {    if (debug.messageEnabled()) {      debug.message(classMethod + "Response doesn't need to be signed.");    }  } else {    String pdpSignCertAlias=SAML2Utils.getAttributeValueFromXACMLConfig(realm,SAML2Constants.PDP_ROLE,pdpEntityID,SAML2Constants.SIGNING_CERT_ALIAS);    if (pdpSignCertAlias == null) {      debug.error(classMethod + "PDP certificate alias is null.");      String[] data={realm,pdpEntityID};      LogUtil.error(Level.INFO,LogUtil.NULL_PDP_SIGN_CERT_ALIAS,data);      throw new SAML2Exception("missingSigningCertAlias");    }    if (debug.messageEnabled()) {      debug.message(classMethod + "realm is : " + realm);      debug.message(classMethod + "pepEntityID is :" + pepEntityID);      debug.message(classMethod + "pdpEntityID : " + pdpEntityID);      debug.message(classMethod + "wantResponseSigned" + wantResponseSigned);      debug.message(classMethod + "Cert Alias:" + pdpSignCertAlias);    }    KeyProvider keyProvider=KeyUtil.getKeyProviderInstance();    if (keyProvider == null) {      debug.error(classMethod + "Unable to get a key provider instance.");      throw new SAML2Exception("nullKeyProvider");    }    PrivateKey signingKey=keyProvider.getPrivateKey(pdpSignCertAlias);    X509Certificate signingCert=keyProvider.getX509Certificate(pdpSignCertAlias);    if (signingKey != null) {      response.sign(signingKey,signingCert);    } else {      debug.error("Incorrect configuration for Signing Certificate.");      throw new SAML2Exception("metaDataError");    }  }}  }
class C{  public LazyObjectAccessor(ConnectionFactory connectionFactory,String componentContext,String localId){  this.connectionFactory=connectionFactory;  this.componentContext=componentContext;  this.localId=localId;}  }
class C{  private void parseAndStore(final String allowedOrigins,final String allowedHttpMethods,final String allowedHttpHeaders,final String exposedHeaders,final String supportsCredentials,final String preflightMaxAge,final String decorateRequest) throws ServletException {  if (allowedOrigins != null) {    if (allowedOrigins.trim().equals("*")) {      this.anyOriginAllowed=true;    } else {      this.anyOriginAllowed=false;      Set<String> setAllowedOrigins=parseStringToSet(allowedOrigins);      this.allowedOrigins.clear();      this.allowedOrigins.addAll(setAllowedOrigins);    }  }  if (allowedHttpMethods != null) {    Set<String> setAllowedHttpMethods=parseStringToSet(allowedHttpMethods);    this.allowedHttpMethods.clear();    this.allowedHttpMethods.addAll(setAllowedHttpMethods);  }  if (allowedHttpHeaders != null) {    Set<String> setAllowedHttpHeaders=parseStringToSet(allowedHttpHeaders);    Set<String> lowerCaseHeaders=new HashSet<>();    for (    String header : setAllowedHttpHeaders) {      String lowerCase=header.toLowerCase(Locale.ENGLISH);      lowerCaseHeaders.add(lowerCase);    }    this.allowedHttpHeaders.clear();    this.allowedHttpHeaders.addAll(lowerCaseHeaders);  }  if (exposedHeaders != null) {    Set<String> setExposedHeaders=parseStringToSet(exposedHeaders);    this.exposedHeaders.clear();    this.exposedHeaders.addAll(setExposedHeaders);  }  if (supportsCredentials != null) {    this.supportsCredentials=Boolean.parseBoolean(supportsCredentials);  }  if (preflightMaxAge != null) {    try {      if (!preflightMaxAge.isEmpty()) {        this.preflightMaxAge=Long.parseLong(preflightMaxAge);      } else {        this.preflightMaxAge=0L;      }    } catch (    NumberFormatException e) {      throw new ServletException(sm.getString("corsFilter.invalidPreflightMaxAge"),e);    }  }  if (decorateRequest != null) {    this.decorateRequest=Boolean.parseBoolean(decorateRequest);  }}  }
class C{  public void testConstructorSignBytesZeroNull2(){  byte aBytes[]={};  int aSign=0;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,aNumber.signum());}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  public void registerMethodHandler(MethodHandler handler){  methodHandlers.add(handler);}  }
class C{  @Override public void removeSuper(Session session){  super.remove(session,false);}  }
class C{  public static boolean isExtension(String filename,Collection<String> extensions){  if (filename == null) {    return false;  }  if (extensions == null || extensions.isEmpty()) {    return indexOfExtension(filename) == -1;  }  String fileExt=getExtension(filename);  for (  String extension : extensions) {    if (fileExt.equals(extension)) {      return true;    }  }  return false;}  }
class C{  @Override protected void propertyChange(PropertyChangeEvent evt){  if (SynthLookAndFeel.shouldUpdateStyle(evt)) {    updateStyle((JTextComponent)evt.getSource());  }  super.propertyChange(evt);}  }
class C{  public void stop(String className,LocalizableMessage reason){  DirectoryServer.shutDown(className,reason);}  }
class C{  public void close() throws IOException {  guard.close();  RandomAccessFile localRaf=raf;  if (localRaf != null) {synchronized (localRaf) {      raf=null;      localRaf.close();    }    if (fileToDeleteOnClose != null) {      fileToDeleteOnClose.delete();      fileToDeleteOnClose=null;    }  }}  }
class C{  public JKReportException(String arg0,Throwable arg1){  super(arg0,arg1);}  }
class C{  public void validate() throws SessionException {  String siteID=getExtension().getSiteID();  String primaryID=getExtension().getPrimaryID();  String errorMessage=null;  if (StringUtils.isEmpty(siteID)) {    errorMessage="Invalid session ID, Site ID is null or empty";  } else   if (primaryID == null) {    if (!WebtopNaming.isServer(siteID)) {      errorMessage="Invalid session ID, Site ID \"" + siteID + "\" either points to a non-existent server,"+ " or to a site";    }    String realSiteID=WebtopNaming.getSiteID(siteID);    if (errorMessage == null && realSiteID != null && !realSiteID.equals(siteID)) {      errorMessage="Invalid session ID, Site ID \"" + siteID + "\" points to a server, but its "+ "corresponding site ID is not present in the session ID";    }  } else {    if (!WebtopNaming.isServer(primaryID)) {      errorMessage="Invalid session ID, Primary ID \"" + primaryID + "\" either points to a non-existent "+ "server, or to a site";    }    String realSiteID=WebtopNaming.getSiteID(primaryID);    if (errorMessage == null) {      if (realSiteID == null || realSiteID.equals(primaryID)) {        errorMessage="Invalid session ID, Primary ID \"" + primaryID + "\" server isn't member of Site "+ "ID \""+ siteID+ "\"";      } else       if (!realSiteID.equals(siteID)) {        errorMessage="Invalid session ID, Primary ID \"" + primaryID + "\" server doesn't belong"+ " to Site ID \""+ siteID+ "\"";      }    }  }  if (errorMessage != null) {    if (debug.warningEnabled()) {      debug.warning(errorMessage);    }    throw new SessionException(errorMessage);  }}  }
class C{  public void start() throws LifecycleException {  getServer();  getConnector();  server.start();}  }
class C{  public AMSearchResults searchGroups(String wildcard,Map avPairs,AMSearchControl searchControl) throws AMException, SSOException {  String filter="(|" + getSearchFilter(AMObject.GROUP) + getSearchFilter(AMObject.DYNAMIC_GROUP)+ getSearchFilter(AMObject.ASSIGNABLE_DYNAMIC_GROUP)+ ")";  return searchObjects(AMNamingAttrManager.getNamingAttr(GROUP),filter,wildcard,avPairs,searchControl);}  }
class C{  public static double bearing(Position p1,Position p2){  return bearing(Point.fromCoordinates(p1),Point.fromCoordinates(p2));}  }
class C{  public static synchronized boolean isEmpty(){  return services.isEmpty();}  }
class C{  public void onDestroy(){}  }
class C{  public boolean beginTextBoxDisplay(ChildDisplayEvent event){  return (curCallback != null) && (curCallback instanceof NameCallback);}  }
class C{  public void testEntrySetSetValue(){  TreeMap<String,String> map=new TreeMap<String,String>();  map.put("A","a");  map.put("B","b");  map.put("C","c");  Iterator<Entry<String,String>> iterator=map.entrySet().iterator();  Entry<String,String> entryA=iterator.next();  assertEquals("a",entryA.setValue("x"));  assertEquals("x",entryA.getValue());  assertEquals("x",map.get("A"));  Entry<String,String> entryB=iterator.next();  assertEquals("b",entryB.setValue("y"));  Entry<String,String> entryC=iterator.next();  assertEquals("c",entryC.setValue("z"));  assertEquals("y",entryB.getValue());  assertEquals("y",map.get("B"));  assertEquals("z",entryC.getValue());  assertEquals("z",map.get("C"));}  }
class C{  public FSPostLoginException(Throwable t,String msg){  super(t,msg);}  }
class C{  protected void threadStart(){  if (thread != null)   return;  if (backgroundProcessorDelay <= 0)   return;  threadDone=false;  String threadName="ContainerBackgroundProcessor[" + toString() + "]";  thread=new Thread(new ContainerBackgroundProcessor(),threadName);  thread.setDaemon(true);  thread.start();}  }
class C{  private void removeBranchID(Request request){  ViaHeader viaHeader=(ViaHeader)request.getHeader(ViaHeader.NAME);  viaHeader.removeParameter("branch");}  }
class C{  public CSN nextCSN() throws DataFormatException {  try {    return CSN.valueOf(bytes.readByteSequence(CSN.BYTE_ENCODING_LENGTH));  } catch (  IndexOutOfBoundsException e) {    throw new DataFormatException(e.getMessage());  }}  }
class C{  private static final byte[] toOctets(String password,int identifier){  byte[] octets=new byte[19];  byte[] s=password.getBytes(StandardCharsets.UTF_8);  if (s.length < 16) {    byte[] s2=new byte[16];    System.arraycopy(s,0,s2,0,s.length);    for (int i=s.length; i < 16; i++) {      s2[i]=0;    }    s=s2;  }  octets[0]=(byte)AttributeType.CHAP_PASSWORD.getTypeCode();  octets[1]=19;  octets[2]=(byte)identifier;  System.arraycopy(s,0,octets,3,16);  return octets;}  }
class C{  @Override public void onMessageReceived(Context context,String from,Bundle data){  String notificationMesg=data.getString("mp_message");  Log.d("MP",notificationMesg);}  }
class C{  private void drawResultPoints(Bitmap barcode,float scaleFactor,Result rawResult){  ResultPoint[] points=rawResult.getResultPoints();  if (points != null && points.length > 0) {    Canvas canvas=new Canvas(barcode);    Paint paint=new Paint();    paint.setColor(getResources().getColor(R.color.result_points));    if (points.length == 2) {      paint.setStrokeWidth(4.0f);      drawLine(canvas,paint,points[0],points[1],scaleFactor);    } else     if (points.length == 4 && (rawResult.getBarcodeFormat() == BarcodeFormat.UPC_A || rawResult.getBarcodeFormat() == BarcodeFormat.EAN_13)) {      drawLine(canvas,paint,points[0],points[1],scaleFactor);      drawLine(canvas,paint,points[2],points[3],scaleFactor);    } else {      paint.setStrokeWidth(10.0f);      for (      ResultPoint point : points) {        if (point != null) {          canvas.drawPoint(scaleFactor * point.getX(),scaleFactor * point.getY(),paint);        }      }    }  }}  }
class C{  public void onCallBack(Bundle bundle){  Message msg=mHandler.obtainMessage(bundle.getInt(FmRadioListener.CALLBACK_FLAG));  msg.setData(bundle);  mHandler.sendMessage(msg);}  }
class C{  void waitIfPending(DN parentDN) throws InterruptedException {  final CountDownLatch l=pendingMap.get(parentDN);  if (l != null) {    l.await();  }}  }
class C{  ModifyMsg(byte[] in) throws DataFormatException {  final ByteArrayScanner scanner=new ByteArrayScanner(in);  decodeHeader(scanner,MSG_TYPE_MODIFY,MSG_TYPE_MODIFY_V1);  if (protocolVersion <= 3) {    decodeBody_V123(scanner);  } else {    decodeBody_V4(scanner);  }  if (protocolVersion == ProtocolVersion.getCurrentVersion()) {    bytes=in;  }}  }
class C{  private HashEntry<K,V> scanAndLockForPut(K key,int hash,V value){  HashEntry<K,V> first=entryForHash(this,hash);  HashEntry<K,V> e=first;  HashEntry<K,V> node=null;  int retries=-1;  while (!tryLock()) {    HashEntry<K,V> f;    if (retries < 0) {      if (e == null) {        if (node == null)         node=new HashEntry<K,V>(hash,key,value,null);        retries=0;      } else       if (key.equals(e.key))       retries=0; else       e=e.next;    } else     if (++retries > MAX_SCAN_RETRIES) {      lock();      break;    } else     if ((retries & 1) == 0 && (f=entryForHash(this,hash)) != first) {      e=first=f;      retries=-1;    }  }  return node;}  }
class C{  public void discardRecording(){  if (recorder != null) {    try {      recorder.stop();      recorder.release();      recorder=null;      if (file != null && file.exists() && !file.isDirectory()) {        file.delete();      }    } catch (    IllegalStateException e) {    }catch (    RuntimeException e) {    }    isRecording=false;  }}  }
class C{  @DataProvider(name="writeCommentDataProvider") public Object[][] createTestWriteCommentData(){  return new Object[][]{{"",40,new String[]{"# "}},{"one two three four five six seven " + "eight nine ten eleven twelve thirteen " + "fourteen fifteen sixteen seventeen "+ "eighteen nineteen",40,new String[]{"# one two three four five six seven","# eight nine ten eleven twelve thirteen","# fourteen fifteen sixteen seventeen","# eighteen nineteen"}},{"one two three four five six seven " + "eight nine ten\neleven twelve thirteen " + "fourteen fifteen\r\nsixteen seventeen "+ "eighteen nineteen",40,new String[]{"# one two three four five six seven","# eight nine ten","# eleven twelve thirteen fourteen","# fifteen","# sixteen seventeen eighteen nineteen"}},{"one two three four five six seven " + "eight nine ten eleven twelve thirteen " + "fourteen fifteen sixteen seventeen "+ "eighteen nineteen",-1,new String[]{"# one two three four five " + "six seven eight nine ten eleven " + "twelve thirteen fourteen fifteen "+ "sixteen seventeen eighteen nineteen"}},{"onetwothreefourfivesixseven" + "eightnineteneleventwelvethirteen" + "fourteenfifteensixteenseventeen"+ "eighteennineteen",40,new String[]{"# onetwothreefourfivesixseveneightninete","# neleventwelvethirteenfourteenfifteensi","# xteenseventeeneighteennineteen"}}};}  }
class C{  public PdfDocument(PdfReader reader){  if (reader == null) {    throw new NullPointerException("reader");  }  documentId=incrementDocumentId();  this.reader=reader;  this.properties=new StampingProperties();  open(null);}  }
class C{  public ContainerEvent(Component source,int id,Component child){  super(source,id);  this.child=child;}  }
class C{  public ImageCapabilities(boolean accelerated){  this.accelerated=accelerated;}  }
class C{  public void paste(){  if (isEditable() && isEnabled()) {    invokeAction("paste",TransferHandler.getPasteAction());  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodesetnodevaluenomodificationallowederr.class,args);}  }
class C{  public void mousePressed(MouseEvent e){  ((MouseListener)a).mousePressed(e);  ((MouseListener)b).mousePressed(e);}  }
class C{  private static synchronized void initCerts(){  if (ROOT_CA != null) {    return;  }  ROOT_CA=new Builder().aliasPrefix("RootCA").subject("CN=Test Root Certificate Authority").ca(true).build();  INTERMEDIATE_CA=new Builder().aliasPrefix("IntermediateCA").subject("CN=Test Intermediate Certificate Authority").ca(true).signer(ROOT_CA.getPrivateKey("RSA","RSA")).rootCa(ROOT_CA.getRootCertificate("RSA")).build();  SERVER=new Builder().aliasPrefix("server").signer(INTERMEDIATE_CA.getPrivateKey("RSA","RSA")).rootCa(INTERMEDIATE_CA.getRootCertificate("RSA")).build();  CLIENT=new TestKeyStore(createClient(INTERMEDIATE_CA.keyStore),null,null);  CLIENT_CERTIFICATE=new Builder().aliasPrefix("client").subject("emailAddress=test@user").signer(INTERMEDIATE_CA.getPrivateKey("RSA","RSA")).rootCa(INTERMEDIATE_CA.getRootCertificate("RSA")).build();  TestKeyStore rootCa2=new Builder().aliasPrefix("RootCA2").subject("CN=Test Root Certificate Authority 2").ca(true).build();  CLIENT_2=new TestKeyStore(createClient(rootCa2.keyStore),null,null);}  }
class C{  public void initMatchPattern(Compiler compiler,String expression,PrefixResolver namespaceContext) throws javax.xml.transform.TransformerException {  m_ops=compiler;  m_namespaceContext=namespaceContext;  m_functionTable=compiler.getFunctionTable();  Lexer lexer=new Lexer(compiler,namespaceContext,this);  lexer.tokenize(expression);  m_ops.setOp(0,OpCodes.OP_MATCHPATTERN);  m_ops.setOp(OpMap.MAPINDEX_LENGTH,2);  nextToken();  Pattern();  if (null != m_token) {    String extraTokens="";    while (null != m_token) {      extraTokens+="'" + m_token + "'";      nextToken();      if (null != m_token)       extraTokens+=", ";    }    error(XPATHErrorResources.ER_EXTRA_ILLEGAL_TOKENS,new Object[]{extraTokens});  }  m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),OpCodes.ENDOP);  m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);  m_ops.shrink();}  }
class C{  public static boolean isMemoryDB(String dbURL) throws InvalidException {  if (dbURL == null) {    throw new InvalidException("dbURL is not set");  }  return dbURL.startsWith("memory:");}  }
class C{  private boolean hasDuplicateMetaAliases(String specification){  Set<String> metaAliases=new HashSet<String>();  if (idpAlias != null && !idpAlias.isEmpty()) {    if (!metaAliases.add(idpAlias)) {      return true;    }  }  if (spAlias != null && !spAlias.isEmpty()) {    if (!metaAliases.add(spAlias)) {      return true;    }  }  if (FederationManager.DEFAULT_SPECIFICATION.equalsIgnoreCase(specification)) {    if (attraAlias != null && !attraAlias.isEmpty()) {      if (!metaAliases.add(attraAlias)) {        return true;      }    }    if (attrqAlias != null && !attrqAlias.isEmpty()) {      if (!metaAliases.add(attrqAlias)) {        return true;      }    }    if (authnaAlias != null && !authnaAlias.isEmpty()) {      if (!metaAliases.add(authnaAlias)) {        return true;      }    }    if (pdpAlias != null && !pdpAlias.isEmpty()) {      if (!metaAliases.add(pdpAlias)) {        return true;      }    }    if (pdpAlias != null && !pdpAlias.isEmpty()) {      if (!metaAliases.add(pdpAlias)) {        return true;      }    }    if (affiAlias != null && !affiAlias.isEmpty()) {      if (!metaAliases.add(affiAlias)) {        return true;      }    }  }  return false;}  }
class C{  public void clear(){  this.ch=null;  this.offset=0;  this.length=-1;}  }
class C{  private static LDAPFilter createApproximateFilter(AttributeValueAssertion ava) throws IOException {  return LDAPFilter.createApproximateFilter(ava.getName(),ByteStringUtility.convertValue(ava.getValue()));}  }
class C{  public synchronized void removePeer(JsonRpcPeer peer){  if (mReceivingPeers.remove(peer) != null) {    mReceivingPeersSnapshot=null;    if (mListener != null) {      mListener.onPeerUnregistered(peer);    }  }}  }
class C{  public JTextField(){  this(null,null,0);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodenotationnodetype.class,args);}  }
class C{  private void assertTokenIsValid(AccessTokenVerifier.TokenState headerToken,AccessTokenVerifier.TokenState queryToken) throws InvalidTokenException {  if (!headerToken.isValid() && !queryToken.isValid()) {    logger.error("Access Token not valid");    throw new InvalidTokenException();  }}  }
class C{  public static ClassModder hookMethodStart(AbstractMatcher<String> matcher,String methodName,String methodDesc,String injectedMethodOwner,String injectedMethodName){  return hookMethodStart(matcher,methodName,methodDesc,injectedMethodOwner,injectedMethodName,"()V");}  }
class C{  @Override public EnumEvalResult evaluate(AciEvalContext evalCtx){  EnumEvalResult matched=EnumEvalResult.FALSE;  GregorianCalendar calendar=new GregorianCalendar();  EnumDayOfWeek dayofweek=EnumDayOfWeek.getDayOfWeek(calendar.get(Calendar.DAY_OF_WEEK));  if (days.contains(dayofweek)) {    matched=EnumEvalResult.TRUE;  }  return matched.getRet(type,false);}  }
class C{  public static com.liferay.blade.samples.servicebuilder.model.Foo deleteFoo(long fooId) throws com.liferay.portal.kernel.exception.PortalException {  return getService().deleteFoo(fooId);}  }
class C{  public Potion(PotionType type,int level){  this(type);  Validate.notNull(type,"Type cannot be null");  Validate.isTrue(level > 0 && level < 3,"Level must be 1 or 2");  this.level=level;}  }
class C{  private static boolean isManageDsaITOperation(Operation operation){  for (  Control control : operation.getRequestControls()) {    if (ServerConstants.OID_MANAGE_DSAIT_CONTROL.equals(control.getOID())) {      return true;    }  }  return false;}  }
class C{  public int read(byte[] buf,int off,int len) throws IOException {  len=in.read(buf,off,len);  if (len != -1) {    cksum.update(buf,off,len);  }  return len;}  }
class C{  public void paintDesktopIconBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public Boolean isAutoStopTimeEnabled(){  return autoStopTimeEnable;}  }
class C{  public static void updateStyles(Component c){  if (c instanceof JComponent) {    String name=c.getName();    c.setName(null);    if (name != null) {      c.setName(name);    }    ((JComponent)c).revalidate();  }  Component[] children=null;  if (c instanceof JMenu) {    children=((JMenu)c).getMenuComponents();  } else   if (c instanceof Container) {    children=((Container)c).getComponents();  }  if (children != null) {    for (    Component child : children) {      updateStyles(child);    }  }  c.repaint();}  }
class C{  public static TimeOfDay decode(String expr,EnumBindRuleType type) throws AciException {  int valueAsInt=0;  if (!timeofdayRegex.matcher(expr).matches()) {    LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_TIMEOFDAY.get(expr);    throw new AciException(message);  }  try {    valueAsInt=Integer.parseInt(expr);  } catch (  NumberFormatException nfe) {    LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_TIMEOFDAY_FORMAT.get(expr,nfe.getMessage());    throw new AciException(message);  }  if (valueAsInt < 0 || valueAsInt > 2359) {    LocalizableMessage message=WARN_ACI_SYNTAX_INVALID_TIMEOFDAY_RANGE.get(expr);    throw new AciException(message);  }  return new TimeOfDay(valueAsInt,type);}  }
class C{  @Override public void resume(){}  }
class C{  private void doRequestProcessing(HttpServletRequest request,HttpServletResponse response,ProviderDescriptorType hostedProviderDesc,BaseConfigType hostedConfig,String hostedProviderRole,String realm,String hostedEntityId,String providerAlias,FSFederationTerminationNotification reqTermination){  FSUtils.debug.message("Entered FSTerminationRequestServlet::doRequestProcessing");  String remoteEntityId=reqTermination.getProviderId();  String retURL=null;  ProviderDescriptorType remoteDesc=null;  boolean isIDP=false;  try {    if (hostedProviderRole.equalsIgnoreCase(IFSConstants.SP)) {      remoteDesc=metaManager.getIDPDescriptor(realm,remoteEntityId);      isIDP=true;    } else {      remoteDesc=metaManager.getSPDescriptor(realm,remoteEntityId);    }    if (remoteDesc == null) {      throw new IDFFMetaException((String)null);    }    retURL=remoteDesc.getFederationTerminationServiceReturnURL();  } catch (  IDFFMetaException e) {    FSUtils.debug.error("FSTerminationRequestServlet.doRequest " + "Processing: Can not retrieve remote provider data." + remoteEntityId);    String[] data={remoteEntityId,realm};    LogUtil.error(Level.INFO,LogUtil.INVALID_PROVIDER,data);    FSServiceUtils.returnToSource(response,retURL,commonErrorPage,IFSConstants.TERMINATION_INVALID_FEDERATION,IFSConstants.METADATA_ERROR);    return;  }  boolean bVerify=true;  if (FSServiceUtils.isSigningOn()) {    try {      if (remoteDesc != null) {        FSUtils.debug.message("Calling verifyTerminationSignature");        bVerify=verifyTerminationSignature(request,remoteDesc,remoteEntityId,isIDP);      } else {        FSUtils.debug.error("Remote provider metadata not found.");        String[] data={remoteEntityId,realm};        LogUtil.error(Level.INFO,LogUtil.INVALID_PROVIDER,data);        FSServiceUtils.returnToSource(response,retURL,commonErrorPage,IFSConstants.TERMINATION_INVALID_FEDERATION,IFSConstants.METADATA_ERROR);        return;      }    } catch (    FSException e) {      FSUtils.debug.error("FSTerminationRequestServlet::doRequestProcessing " + "Signature on termination request is invalid" + "Cannot proceed federation termination");      String[] data={FSUtils.bundle.getString(IFSConstants.TERMINATION_INVALID_SIGNATURE)};      LogUtil.error(Level.INFO,LogUtil.INVALID_SIGNATURE,data);      FSServiceUtils.returnToSource(response,retURL,commonErrorPage,IFSConstants.TERMINATION_INVALID_FEDERATION,IFSConstants.METADATA_ERROR);      return;    }catch (    SAMLException e) {      FSUtils.debug.error("FSFedTerminationHandler::doRequestProcessing " + "Signature on termination request is invalid" + "Cannot proceed federation termination");      String[] data={FSUtils.bundle.getString(IFSConstants.TERMINATION_INVALID_SIGNATURE)};      LogUtil.error(Level.INFO,LogUtil.INVALID_SIGNATURE,data);      FSServiceUtils.returnToSource(response,retURL,commonErrorPage,IFSConstants.TERMINATION_INVALID_FEDERATION,IFSConstants.METADATA_ERROR);      return;    }  }  if (bVerify) {    if (metaManager.isTrustedProvider(realm,hostedEntityId,remoteEntityId)) {      FSServiceManager instService=FSServiceManager.getInstance();      if (instService != null) {        FSFedTerminationHandler termHandler=instService.getFedTerminationHandler(reqTermination,hostedConfig,realm,hostedEntityId,hostedProviderRole,providerAlias,remoteEntityId);        if (termHandler != null) {          termHandler.setHostedDescriptor(hostedProviderDesc);          termHandler.setHostedDescriptorConfig(hostedConfig);          termHandler.setRealm(realm);          termHandler.setHostedEntityId(hostedEntityId);          termHandler.setHostedProviderRole(hostedProviderRole);          termHandler.setMetaAlias(providerAlias);          termHandler.setRemoteEntityId(remoteEntityId);          termHandler.setRemoteDescriptor(remoteDesc);          termHandler.processTerminationRequest(request,response,reqTermination);          return;        } else {          FSUtils.debug.error("Unable to get termination " + "handler. User account Not valid");        }      } else {        FSUtils.debug.error("FSServiceManager instance is null" + " Cannot process termination request");      }    } else {      FSUtils.debug.error("Remote provider not in trusted list");    }  } else {    FSUtils.debug.error("FSTerminationRequestServlet::doRequestProcesing " + "Signature on termination request is invalid" + "Cannot proceed federation termination");    String[] data={FSUtils.bundle.getString(IFSConstants.TERMINATION_INVALID_SIGNATURE)};    LogUtil.error(Level.INFO,LogUtil.INVALID_SIGNATURE,data);  }  FSServiceUtils.returnToSource(response,retURL,commonErrorPage,IFSConstants.TERMINATION_INVALID_FEDERATION,IFSConstants.METADATA_ERROR);}  }
class C{  public boolean handlePrack(SIPRequest prackRequest){  if (!this.isServer()) {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))     logger.logDebug("Dropping Prack -- not a server Dialog");    return false;  }  SIPServerTransaction sipServerTransaction=(SIPServerTransaction)this.getFirstTransactionInt();  byte[] sipResponse=sipServerTransaction.getReliableProvisionalResponse();  if (sipResponse == null) {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))     logger.logDebug("Dropping Prack -- ReliableResponse not found");    return false;  }  RAck rack=(RAck)prackRequest.getHeader(RAckHeader.NAME);  if (rack == null) {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))     logger.logDebug("Dropping Prack -- rack header not found");    return false;  }  if (!rack.getMethod().equals(sipServerTransaction.getPendingReliableResponseMethod())) {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))     logger.logDebug("Dropping Prack -- CSeq Header does not match PRACK");    return false;  }  if (rack.getCSeqNumberLong() != sipServerTransaction.getPendingReliableCSeqNumber()) {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))     logger.logDebug("Dropping Prack -- CSeq Header does not match PRACK");    return false;  }  if (rack.getRSequenceNumber() != sipServerTransaction.getPendingReliableRSeqNumber()) {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))     logger.logDebug("Dropping Prack -- RSeq Header does not match PRACK");    return false;  }  return sipServerTransaction.prackRecieved();}  }
class C{  void popSpaceHandling(){  m_spacePreserveStack.pop();}  }
class C{  public InitCodeView generateInitCode(MethodTransformerContext methodContext,InitCodeContext initCodeContext){  InitCodeNode rootNode=InitCodeNode.createTree(initCodeContext);  if (initCodeContext.outputType() == InitCodeOutputType.FieldList) {    return buildInitCodeViewFlattened(methodContext,rootNode);  } else {    return buildInitCodeViewRequestObject(methodContext,rootNode);  }}  }
class C{  public SolidBorder(Color color,float width){  super(color,width);}  }
class C{  public SIPHeader parse() throws ParseException {  RecordRouteList recordRouteList=new RecordRouteList();  if (debug)   dbg_enter("RecordRouteParser.parse");  try {    this.lexer.match(TokenTypes.RECORD_ROUTE);    this.lexer.SPorHT();    this.lexer.match(':');    this.lexer.SPorHT();    while (true) {      RecordRoute recordRoute=new RecordRoute();      super.parse(recordRoute);      recordRouteList.add(recordRoute);      this.lexer.SPorHT();      char la=lexer.lookAhead(0);      if (la == ',') {        this.lexer.match(',');        this.lexer.SPorHT();      } else       if (la == '\n')       break; else       throw createParseException("unexpected char");    }    return recordRouteList;  }  finally {    if (debug)     dbg_leave("RecordRouteParser.parse");  }}  }
class C{  @SuppressWarnings("rawtypes") public Dictionary load(String pid) throws IOException {  logger.debug("Config load call for {}",pid);  Dictionary result=null;  try {    if (isReady(0) && requireRepository) {      String id=pidToId(pid);      ReadRequest readRequest=Requests.newReadRequest(id);      ResourceResponse existing=repo.read(readRequest);      Map<String,Object> existingConfig=existing.getContent().asMap();      Object configMap=existingConfig.get(JSONEnhancedConfig.JSON_CONFIG_PROPERTY);      if (configMap != null) {        ((Map)configMap).remove(ResourceResponse.FIELD_CONTENT_ID);      }      String configString=serializeConfig(configMap);      existingConfig.put(JSONEnhancedConfig.JSON_CONFIG_PROPERTY,configString);      if (existing.getContent().get(FACTORY_PID).isMap() && existing.getContent().get(FACTORY_PID).isDefined(SERVICE_PID) && existing.getContent().get(FACTORY_PID).get(SERVICE_PID).isString()) {        existingConfig.put(FACTORY_PID,existing.getContent().get(FACTORY_PID).get(SERVICE_PID).asString());      }      logger.debug("Config loaded {} {}",pid,existing);      result=mapToDict(existingConfig);    } else     if (!requireRepository) {      result=tempStore.get(pid);      if (result == null) {        throw new IOException("No entry for " + pid + " exists.");      }      logger.debug("Config loaded from temporary store {} {}",pid,result);    }  } catch (  NotFoundException ex) {    result=tempStore.get(pid);    if (result == null) {      throw new IOException("No entry for " + pid + " exists.");    }    logger.debug("Config loaded from temporary store {} {}",pid,result);  }catch (  ResourceException ex) {    throw new IOException("Failed to load configuration in repository: " + ex.getMessage(),ex);  }  return result;}  }
class C{  public static boolean isString(final Object value){  if (Objects.isNull(value)) {    throw new IllegalArgumentException("value can't be null");  }  return value instanceof String;}  }
class C{  public Observable<Boolean> existsJobObservable(long id){  io.vertx.rx.java.ObservableFuture<Boolean> handler=io.vertx.rx.java.RxHelper.observableFuture();  existsJob(id,handler.toHandler());  return handler;}  }
class C{  public static String translateHashToString(byte[] hash){  StringBuilder hashBuffer=new StringBuilder();  for (int i=0; i < hash.length; i++) {    hashBuffer.append(Character.forDigit((hash[i] >> 4) & 0x0F,16));    hashBuffer.append(Character.forDigit(hash[i] & 0x0F,16));  }  return hashBuffer.toString();}  }
class C{  public final void popCurrentExpressionNode(){  m_currentExpressionNodes.quickPop(1);}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  private synchronized void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  java.io.ObjectOutputStream.PutField fields=s.putFields();  fields.put("value",value);  fields.put("count",count);  fields.put("shared",false);  s.writeFields();}  }
class C{  public Map<String,Object> verifyToken(String realm,String hostEntityId,int timeskew) throws WSFederationException {  String classMethod="SAML11RequestedSecurityToken.verifyToken";  String issuer=assertion.getIssuer();  WSFederationMetaManager metaManager=WSFederationUtils.getMetaManager();  String remoteEntityId=metaManager.getEntityByTokenIssuerName(realm,issuer);  if (!metaManager.isTrustedProvider(realm,hostEntityId,remoteEntityId)) {    String[] data={LogUtil.isErrorLoggable(Level.FINER) ? this.toString() : this.getTokenId(),realm,hostEntityId};    LogUtil.error(Level.INFO,LogUtil.UNTRUSTED_ISSUER,data,null);    throw new WSFederationException(WSFederationUtils.bundle.getString("untrustedIssuer"));  }  SPSSOConfigElement spConfig=metaManager.getSPSSOConfig(realm,hostEntityId);  if (spConfig == null) {    debug.error(classMethod + "cannot find configuration for SP " + hostEntityId);    throw new WSFederationException("unableToFindSPConfiguration");  }  String strWantAssertionSigned=WSFederationMetaUtils.getAttribute(spConfig,WSFederationConstants.WANT_ASSERTION_SIGNED);  boolean wantAssertionSigned=(strWantAssertionSigned != null) ? Boolean.parseBoolean(strWantAssertionSigned) : true;  if (wantAssertionSigned && (!WSFederationUtils.isSignatureValid(assertion,realm,remoteEntityId))) {    throw new WSFederationException(WSFederationUtils.bundle.getString("invalidSignature"));  }  Subject assertionSubject=null;  Iterator stmtIter=assertion.getStatement().iterator();  while (stmtIter.hasNext()) {    Statement statement=(Statement)stmtIter.next();    if (statement.getStatementType() == Statement.AUTHENTICATION_STATEMENT) {      assertionSubject=((SubjectStatement)statement).getSubject();      break;    }  }  if (assertionSubject == null) {    String[] data={LogUtil.isErrorLoggable(Level.FINER) ? this.toString() : this.getTokenId()};    LogUtil.error(Level.INFO,LogUtil.MISSING_SUBJECT,data,null);    throw new WSFederationException(WSFederationUtils.bundle.getString("missingSubject"));  }  if (!WSFederationUtils.isTimeValid(assertion,timeskew)) {    throw new WSFederationException(WSFederationUtils.bundle.getString("timeInvalid"));  }  List assertions=new ArrayList();  assertions.add(assertion);  Map<String,Object> attrMap=new HashMap<String,Object>();  attrMap.put(SAML2Constants.SUBJECT,assertionSubject);  attrMap.put(SAML2Constants.POST_ASSERTION,assertion);  attrMap.put(SAML2Constants.ASSERTIONS,assertions);  int authLevel=0;  if (authLevel >= 0) {    attrMap.put(SAML2Constants.AUTH_LEVEL,new Integer(authLevel));  }  Date sessionNotOnOrAfter=assertion.getConditions().getNotOnorAfter();  if (sessionNotOnOrAfter != null) {    long maxSessionTime=(sessionNotOnOrAfter.getTime() - currentTimeMillis()) / 60000;    if (maxSessionTime > 0) {      attrMap.put(SAML2Constants.MAX_SESSION_TIME,new Long(maxSessionTime));    }  }  if (debug.messageEnabled()) {    debug.message(classMethod + " Attribute Map : " + attrMap);  }  return attrMap;}  }
class C{  @BindingAdapter("bind:imageUrl") public static void loadImage(DraweeView draweeView,String url){  if (!TextUtils.isEmpty(url)) {    ImageRequestBuilder builder=ImageRequestBuilder.newBuilderWithSource(Uri.parse(url)).setLowestPermittedRequestLevel(ImageRequest.RequestLevel.FULL_FETCH).setLocalThumbnailPreviewsEnabled(true).setAutoRotateEnabled(true);    DraweeController controller=Fresco.newDraweeControllerBuilder().setImageRequest(builder.build()).setAutoPlayAnimations(true).setOldController(draweeView.getController()).build();    draweeView.setController(controller);  }}  }
class C{  public String elementPath(ProtoElement elt,boolean fullyQualified){  String prefix=PythonProtoElements.prefixInFile(elt);  String path;  if (fullyQualified) {    path=elt.getFile().getProto().getPackage() + "." + PythonProtoElements.getPbFileName(elt);  } else {    path=fileToModule(elt.getFile());  }  if (Strings.isNullOrEmpty(path)) {    path=prefix;  } else {    if (!Strings.isNullOrEmpty(prefix)) {      path+="." + prefix;    }  }  path+="." + elt.getSimpleName();  return path;}  }
class C{  public int compare(Object o1,Object o2){  SMSubConfig s1=(SMSubConfig)o1;  SMSubConfig s2=(SMSubConfig)o2;  int compareType=collator.compare(s1.getType(),s2.getType());  return (compareType != 0) ? compareType : collator.compare(s1.getName(),s2.getName());}  }
class C{  public static BooleanArgument useSSLArgument() throws ArgumentException {  return BooleanArgument.builder(OPTION_LONG_USE_SSL).shortIdentifier(OPTION_SHORT_USE_SSL).description(INFO_DESCRIPTION_USE_SSL.get()).buildArgument();}  }
class C{  public static void fill(long[] a,long val){  for (int i=0, len=a.length; i < len; i++)   a[i]=val;}  }
class C{  public static RebuildIndexParameters rebuildIndexParams(){  return new RebuildIndexParameters();}  }
class C{  @SuppressWarnings("unchecked") @Override public PdfArray makeIndirect(PdfDocument document){  return (PdfArray)super.makeIndirect(document);}  }
class C{  private NSArray parseArray() throws ParseException {  skip();  skipWhitespacesAndComments();  List<NSObject> objects=new LinkedList<NSObject>();  while (!accept(ARRAY_END_TOKEN)) {    objects.add(parseObject());    skipWhitespacesAndComments();    if (accept(ARRAY_ITEM_DELIMITER_TOKEN)) {      skip();    } else {      break;    }    skipWhitespacesAndComments();  }  read(ARRAY_END_TOKEN);  return new NSArray(objects.toArray(new NSObject[objects.size()]));}  }
class C{  public JButton(Action a){  this();  setAction(a);}  }
class C{  public EntryChangelogNotificationControl(boolean isCritical,String cookie){  super(OID_ECL_COOKIE_EXCHANGE_CONTROL,isCritical);  this.cookie=cookie;}  }
class C{  boolean isValidated(){  return schema != null;}  }
class C{  public CommunicationException(String explanation){  super(explanation);}  }
class C{  private void handleNewPermissions() throws SSOException, SMSException {  for (  ChangeSet<String,Node> change : newPermissions) {    final String configName=change.getIdentifier();    final Node configNode=change.getData();    final Map<String,Set<String>> newAttributes=parseAttributeValuePairTags(configNode);    newAttributes.put(RESOURCE,transformSet(newAttributes.get(RESOURCE),tagSwapFunc));    permissionsConfig.addSubConfig(configName,PERMISSION,CONFIG_PRIORITY,newAttributes);  }}  }
class C{  private void heapify(){  Object[] array=queue;  int n=size;  int half=(n >>> 1) - 1;  Comparator<? super E> cmp=comparator;  if (cmp == null) {    for (int i=half; i >= 0; i--)     siftDownComparable(i,(E)array[i],array,n);  } else {    for (int i=half; i >= 0; i--)     siftDownUsingComparator(i,(E)array[i],array,n,cmp);  }}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  public static int decode(String data,OutputStream out) throws IOException {  return encoder.decode(data,out);}  }
class C{  @Override public boolean onCreateOptionsMenu(Menu menu){  menu.add(Menu.NONE,MENU_HELP,Menu.NONE,getString(R.string.help)).setIcon(android.R.drawable.ic_menu_help).setAlphabeticShortcut('h');  return super.onCreateOptionsMenu(menu);}  }
class C{  public PermissionCollection newPermissionCollection(){  debug.message("ISPermission:: newISPermissionCollection() called");  return new ISPermissionCollection();}  }
class C{  public static boolean isFinal(final Field field){  return Modifier.isFinal(field.getModifiers());}  }
class C{  public ImageIcon(URL location){  this(location,location.toExternalForm());}  }
class C{  public void resetRecords(){  this.records.clear();}  }
class C{  public NetNosList remove_from_net(int net_no){  int current_len=net_nos_arr.length;  ArrayList<Integer> risul=new ArrayList<Integer>(current_len);  for (int index=0; index < current_len; index++) {    int a_net_no=net_nos_arr[index];    if (a_net_no == net_no)     continue;    risul.add(a_net_no);  }  if (risul.size() == current_len)   return null;  return new NetNosList(risul);}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public void allowDetachToRelease(boolean allowRelease){}  }
class C{  public MARSHAL(int minor,CompletionStatus completed){  this("",minor,completed);}  }
class C{  @SuppressWarnings("unchecked") public <T>T[] toArray(T[] a){  if (a.length < size)   return (T[])Arrays.copyOf(elementData,size,a.getClass());  System.arraycopy(elementData,0,a,0,size);  if (a.length > size)   a[size]=null;  return a;}  }
class C{  public static byte[] readAllBytes(Path path) throws IOException {  try (SeekableByteChannel sbc=Files.newByteChannel(path);InputStream in=Channels.newInputStream(sbc)){    long size=sbc.size();    if (size > (long)MAX_BUFFER_SIZE)     throw new OutOfMemoryError("Required array size too large");    return read(in,(int)size);  } }  }
class C{  public static void copy(byte[] input,Writer output) throws IOException {  ByteArrayInputStream in=new ByteArrayInputStream(input);  copy(in,output);}  }
class C{  public AbandonOperationWrapper(AbandonOperation abandon){  super(abandon);}  }
class C{  public synchronized static void load() throws Exception {  if (!isBootstrap) {    String basedir=System.getProperty(JVM_OPT_BOOTSTRAP);    if (load(basedir,false) == null) {      throw new ConfiguratorException("configurator.cannot.bootstrap",null,Locale.getDefault());    }    SystemProperties.initializeProperties("com.iplanet.am.naming.url",SystemProperties.getServerInstanceName() + "/namingservice");  }}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if ((ui != null) && (getUIClassID().equals(uiClassID))) {    ui.installUI(this);  }  if (getToolTipText() == null && haveRegistered) {    ToolTipManager.sharedInstance().registerComponent(this);  }}  }
class C{  @Override public ApplicationParameter[] findApplicationParameters(){synchronized (applicationParametersLock) {    return (applicationParameters);  }}  }
class C{  private boolean solveNamingConflict(DeleteOperation op,LDAPUpdateMsg msg){  ResultCode result=op.getResultCode();  DeleteContext ctx=(DeleteContext)op.getAttachment(SYNCHROCONTEXT);  String entryUUID=ctx.getEntryUUID();  if (result == ResultCode.NO_SUCH_OBJECT) {    DN currentDN=findEntryDN(entryUUID);    if (currentDN == null) {      numResolvedNamingConflicts.incrementAndGet();      return true;    } else {      msg.setDN(currentDN);      numResolvedNamingConflicts.incrementAndGet();      return false;    }  } else   if (result == ResultCode.NOT_ALLOWED_ON_NONLEAF) {    if (findAndRenameChild(op.getEntryDN(),op)) {      numUnresolvedNamingConflicts.incrementAndGet();    }    return false;  } else {    logger.error(ERR_ERROR_REPLAYING_OPERATION,op,ctx.getCSN(),result,op.getErrorMessage());    return true;  }}  }
class C{  private int runSubCommand(SubCommandHandler handler){  try {    final MenuResult<Integer> result=handler.run(this,factory);    if (result.isSuccess()) {      if (isInteractive() && handler.isCommandBuilderUseful()) {        printCommandBuilder(getCommandBuilder(handler));      }      return result.getValue();    } else {      return ReturnCode.ERROR_UNEXPECTED.get();    }  } catch (  ArgumentException e) {    errPrintln(e.getMessageObject());    return ReturnCode.ERROR_UNEXPECTED.get();  }catch (  ClientException e) {    Throwable cause=e.getCause();    errPrintln();    if (cause instanceof ManagedObjectDecodingException) {      displayManagedObjectDecodingException(this,(ManagedObjectDecodingException)cause);    } else     if (cause instanceof MissingMandatoryPropertiesException) {      displayMissingMandatoryPropertyException(this,(MissingMandatoryPropertiesException)cause);    } else     if (cause instanceof OperationRejectedException) {      displayOperationRejectedException(this,(OperationRejectedException)cause);    } else {      errPrintln(e.getMessageObject());    }    errPrintln();    return ReturnCode.ERROR_UNEXPECTED.get();  }catch (  Exception e) {    errPrintln(LocalizableMessage.raw(stackTraceToSingleLineString(e,true)));    return ReturnCode.ERROR_UNEXPECTED.get();  }}  }
class C{  protected void parseDOMAttributes(Element element) throws SAML2Exception {  super.parseDOMAttributes(element);}  }
class C{  public static boolean removeFromCache(String key,DiskCache diskCache){  File file=diskCache.getFile(key);  return file != null && file.exists() && file.delete();}  }
class C{  public JLabel(Icon image,int horizontalAlignment){  this(null,image,horizontalAlignment);}  }
class C{  public static void error(String msg){  debugInst.debug(IDebug.ERROR,msg);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeattributenodename.class,args);}  }
class C{  private void verifyLogin(LoginModule... modules) throws LoginException {  for (  LoginModule module : modules) {    verify(module).login();  }}  }
class C{  private Set<T> convertResults(Collection<Token> tokens){  Set<T> results=new HashSet<T>();  for (  Token token : tokens) {    results.add(adapter.fromToken(token));  }  return results;}  }
class C{  public DsnKeywordPackage(String p_name,DsnPinInfo[] p_pin_info_arr,Collection<DsnShape> p_outline,Collection<DsnScopeArea> p_keepouts,Collection<DsnScopeArea> p_via_keepouts,Collection<DsnScopeArea> p_place_keepouts,boolean p_is_front){  name=p_name;  pin_info_arr=p_pin_info_arr;  outline=p_outline;  keepouts=p_keepouts;  via_keepouts=p_via_keepouts;  place_keepouts=p_place_keepouts;  is_front=p_is_front;}  }
class C{  public EnvironmentImpl(){}  }
class C{  public void clear(){  final ReentrantLock lock=this.lock;  lock.lock();  try {    q.clear();  }  finally {    lock.unlock();  }}  }
class C{  public StructMember(){}  }
class C{  public void testSetBitNegativeInside1(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=-1;  int number=15;  byte rBytes[]={-2,127,-57,-101,1,75,-90,-46,-92,-4,14,-36,-26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.setBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public JInternalFrame(String title){  this(title,false,false,false,false);}  }
class C{  public void removeAttributeNS(String namespaceURI,String localName){  removeAttribute(localName);}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  if (null != m_attributeSetsNames) {    applyAttrSets(transformer,getStylesheetRoot(),m_attributeSetsNames);  }}  }
class C{  void amendAuthConfig(final JsonValue authModuleConfig){  final JsonValue socialAuthTemplate=getSocialAuthTemplate();  if (socialAuthTemplate.asMap().isEmpty()) {    logger.debug("SOCIAL_PROVIDERS module was not found.");    return;  }  authModuleConfig.asList(Map.class).remove(socialAuthTemplate.asMap());  if (identityProviderService != null) {    authModuleConfig.asList().addAll(FluentIterable.from(identityProviderService.getIdentityProviders()).transform(new SocialAuthModuleConfigFactory(socialAuthTemplate)).toList());  }}  }
class C{  private void findColorspace(PdfObject colorspace,boolean allowIndexed){  if (colorspace == null && bpc == 1) {    stride=(int)((width * bpc + 7) / 8);    pngColorType=0;  } else   if (PdfName.DeviceGray.equals(colorspace)) {    stride=(int)((width * bpc + 7) / 8);    pngColorType=0;  } else   if (PdfName.DeviceRGB.equals(colorspace)) {    if (bpc == 8 || bpc == 16) {      stride=(int)((width * bpc * 3 + 7) / 8);      pngColorType=2;    }  } else   if (colorspace instanceof PdfArray) {    PdfArray ca=(PdfArray)colorspace;    PdfObject tyca=ca.get(0);    if (PdfName.CalGray.equals(tyca)) {      stride=(int)((width * bpc + 7) / 8);      pngColorType=0;    } else     if (PdfName.CalRGB.equals(tyca)) {      if (bpc == 8 || bpc == 16) {        stride=(int)((width * bpc * 3 + 7) / 8);        pngColorType=2;      }    } else     if (PdfName.ICCBased.equals(tyca)) {      PdfStream pr=(PdfStream)ca.get(1);      int n=pr.getAsNumber(PdfName.N).intValue();      if (n == 1) {        stride=(int)((width * bpc + 7) / 8);        pngColorType=0;        icc=pr.getBytes();      } else       if (n == 3) {        stride=(int)((width * bpc * 3 + 7) / 8);        pngColorType=2;        icc=pr.getBytes();      }    } else     if (allowIndexed && PdfName.Indexed.equals(tyca)) {      findColorspace(ca.get(1),false);      if (pngColorType == 2) {        PdfObject id2=ca.get(3);        if (id2 instanceof PdfString) {          palette=((PdfString)id2).getValueBytes();        } else         if (id2 instanceof PdfStream) {          palette=(((PdfStream)id2)).getBytes();        }        stride=(int)((width * bpc + 7) / 8);        pngColorType=3;      }    }  }}  }
class C{  public void test_binarySearchLjava_util_ListLjava_lang_ObjectLjava_util_Comparator(){  final int rSize=myReversedLinkedList.size();  ReversedMyIntComparator comp=new ReversedMyIntComparator();  try {    Collections.binarySearch(null,new Object(),comp);    fail("Expected NullPointerException for null list parameter");  } catch (  NullPointerException e) {  }  for (int counter=0; counter < rSize; counter++) {    assertTrue("Returned incorrect binary search item position using custom comparator",myReversedLinkedList.get(Collections.binarySearch(myReversedLinkedList,myReversedLinkedList.get(counter),comp)) == myReversedLinkedList.get(counter));  }}  }
class C{  private void updateEnabling(){  base64.setEnabled(useBase64.isSelected());  file.setEnabled(useFile.isSelected());  browse.setEnabled(useFile.isSelected());  refreshButton.setEnabled(useFile.isSelected());}  }
class C{  protected void checkStream() throws IOException {  if (closed) {    throw new IOException("Stream closed");  }}  }
class C{  @Override public void onUIRefreshBegin(PtrFrameLayout frame){  mDrawable.setAlpha(255);  mDrawable.start();}  }
class C{  public static ImageIcon createImageIcon(byte[] bytes,int maxHeight,LocalizableMessage description,boolean useFast){  ImageIcon icon=new ImageIcon(bytes,description.toString());  if (maxHeight > icon.getIconHeight() || icon.getIconHeight() <= 0) {    return icon;  }  int newHeight=maxHeight;  int newWidth=(newHeight * icon.getIconWidth()) / icon.getIconHeight();  int algo=useFast ? Image.SCALE_FAST : Image.SCALE_SMOOTH;  Image scaledImage=icon.getImage().getScaledInstance(newWidth,newHeight,algo);  return new ImageIcon(scaledImage);}  }
class C{  public RxGalleryFinal cropOvalDimmedLayer(boolean isOval){  configuration.setOvalDimmedLayer(isOval);  return this;}  }
class C{  public int compareTo(UUID uuid){  if (uuid == this) {    return 0;  }  if (this.mostSigBits != uuid.mostSigBits) {    return this.mostSigBits < uuid.mostSigBits ? -1 : 1;  }  if (this.leastSigBits != uuid.leastSigBits) {    return this.leastSigBits < uuid.leastSigBits ? -1 : 1;  }  return 0;}  }
class C{  protected void engineUpdate(byte[] b,int off,int len) throws SignatureException {  msgDigest.update(b,off,len);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode08.class,args);}  }
class C{  public ExtendedKeyUsage(byte[] encoding){  super(encoding);}  }
class C{  private SearchFilter buildSearchFilterFrom(final DN baseDN,final String attrName){  final RDN rdn=baseDN.rdn();  AttributeType attrType=DirectoryServer.getSchema().getAttributeType(attrName);  final ByteString attrValue=rdn.getAttributeValue(attrType);  if (attrValue != null) {    return SearchFilter.createEqualityFilter(attrType,attrValue);  }  return null;}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  private void shutdown(){  if (!mExecutor.isShutdown() && !mExecutor.isTerminated()) {    mExecutor.shutdown();  }}  }
class C{  protected static boolean cleanSessionMap(String userDn,String metaAlias,FSSession session){  FSUtils.debug.message("Entered cleanSessionMap");  FSSessionManager sessionMgr=FSSessionManager.getInstance(metaAlias);synchronized (sessionMgr) {    if (session == null) {      sessionMgr.removeSessionList(userDn);    } else {      sessionMgr.removeSession(userDn,session);    }  }  FSUtils.debug.message("Leaving cleanSessionMap");  return true;}  }
class C{  public void handleTblRequestHandlerListButtonDeleteRequest(RequestInvocationEvent event) throws ModelControlException {  setSubmitCycle(true);  CCActionTable table=(CCActionTable)getChild(SCSOAPBindingModelImpl.ATTRIBUTE_NAME_REQUEST_HANDLER_LIST);  table.restoreStateData();  CCActionTableModel tblModel=(CCActionTableModel)propertySheetModel.getModel(SCSOAPBindingModelImpl.ATTRIBUTE_NAME_REQUEST_HANDLER_LIST);  Integer[] selected=tblModel.getSelectedRows();  if ((selected != null) && (selected.length > 0)) {    OrderedSet tblValues=(OrderedSet)getPageSessionAttribute(SCSOAPBindingModelImpl.ATTRIBUTE_NAME_REQUEST_HANDLER_LIST);    tblValues.removeAll(selected);    setPageSessionAttribute(SCSOAPBindingModelImpl.ATTRIBUTE_NAME_REQUEST_HANDLER_LIST,tblValues);    populateRequestHandlerListTable(tblValues);    setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","message.profile.modified");    setPageSessionAttribute(PAGE_MODIFIED,"1");  }  forwardTo();}  }
class C{  private synchronized void initDependencies(){  if (!isInitialised()) {    factory=InjectorHolder.getInstance(SSOTokenFactory.class);    requestUtils=InjectorHolder.getInstance(AuthnRequestUtils.class);  }}  }
class C{  @Override public void write(char[] chr) throws IOException {  try {    int len=0;    if (chr != null) {      len=chr.length;    }    beforeWrite(len);    out.write(chr);    afterWrite(len);  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  public boolean verifySignature(byte[] signedObject,byte[] mac) throws Exception {  try {    PublicKey loggerPubKey=null;    X509Certificate certs[]=ksManager.getCertificateChain(loggerKey);    X509Certificate cert=certs[0];    loggerPubKey=cert.getPublicKey();    Signature verifySign=Signature.getInstance(signingAlgorithm);    verifySign.initVerify(loggerPubKey);    verifySign.update(mac);    return verifySign.verify(signedObject);  } catch (  Exception e) {    Debug.error("SecureLogHelper.verifySignature() : " + " Exception : ",e);    throw new Exception(e.getMessage());  }}  }
class C{  private String result(HttpURLConnection conn,boolean input) throws IOException {  StringBuffer sb=new StringBuffer();  if (input) {    InputStream is=conn.getInputStream();    BufferedReader reader=new BufferedReader(new InputStreamReader(is,"utf-8"));    String line=null;    while ((line=reader.readLine()) != null) {      sb.append(line);    }    reader.close();    is.close();  }  Map<String,Object> result=new HashMap<String,Object>();  result.put("code",conn.getResponseCode());  result.put("mesg",conn.getResponseMessage());  result.put("type",conn.getContentType());  result.put("data",sb);  String output=String.valueOf(conn.getResponseCode());  setOutputResponseCode(output);  Gson gson=new Gson();  String json=gson.toJson(result);  logger.info("json = " + json);  return json;}  }
class C{  @Override public void addTransformer(ClassFileTransformer transformer){  if (transformer == null) {    throw new IllegalArgumentException(sm.getString("webappClassLoader.addTransformer.illegalArgument",getContextName()));  }  if (this.transformers.contains(transformer)) {    log.warn(sm.getString("webappClassLoader.addTransformer.duplicate",transformer,getContextName()));    return;  }  this.transformers.add(transformer);  log.info(sm.getString("webappClassLoader.addTransformer",transformer,getContextName()));}  }
class C{  public TestChangeNotificationListener() throws DirectoryException {  super(DN.valueOf("cn=TestChangeNotificationListener"),EnumSet.of(POST_RESPONSE_ADD,POST_RESPONSE_MODIFY,POST_RESPONSE_MODIFY_DN,POST_RESPONSE_DELETE),true);}  }
class C{  void addReasons(ReasonsMask mask){  _reasons=_reasons | mask.getReasons();}  }
class C{  int registerFontDirectory(String dir){  return registerFontDirectory(dir,false);}  }
class C{  public boolean addAll(RoleUnresolvedList roleList) throws IndexOutOfBoundsException {  if (roleList == null) {    return true;  }  return (super.addAll(roleList));}  }
class C{  public FileAlterationMonitor(long interval,FileAlterationObserver... observers){  this(interval);  if (observers != null) {    for (    FileAlterationObserver observer : observers) {      addObserver(observer);    }  }}  }
class C{  static byte[] encryptData(byte[] password,int size,byte[] data){  try {    Cipher c=Cipher.getInstance(ENCRYPT_DATA_ALGORITHM);    c.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(password,SECRET_KEY_ALGORITHM),CBC_SALT_DATA);    c.update(new byte[]{(byte)(size >> 24),(byte)(size >> 16),(byte)(size >> 8),(byte)(size)});    return c.doFinal(data);  } catch (  Exception e) {    throw new IllegalStateException(ENCRYPT_DATA_ALGORITHM + " is not available",e);  }}  }
class C{  public boolean isRepresentationClassInputStream(){  return ioInputStreamClass.isAssignableFrom(representationClass);}  }
class C{  private void removeUnusedWidgetsFromFields(PdfPage page){  if (page.isFlushed()) {    return;  }  List<PdfAnnotation> annots=page.getAnnotations();  for (  PdfAnnotation annot : annots) {    if (annot.getSubtype().equals(PdfName.Widget)) {      ((PdfWidgetAnnotation)annot).releaseFormFieldFromWidgetAnnotation();    }  }}  }
class C{  public PersistentLicense(LicenseLog log,License license,String user){  super(license);  this.log=log;  this.user=user;}  }
class C{  public SearchControls(int scope,long countlim,int timelim,String[] attrs,boolean retobj,boolean deref){  searchScope=scope;  timeLimit=timelim;  derefLink=deref;  returnObj=retobj;  countLimit=countlim;  attributesToReturn=attrs;}  }
class C{  IndexedPropertyDescriptor(Class<?> bean,String base,Method read,Method write,Method readIndexed,Method writeIndexed) throws IntrospectionException {  super(bean,base,read,write);  setIndexedReadMethod0(readIndexed);  setIndexedWriteMethod0(writeIndexed);  setIndexedPropertyType(findIndexedPropertyType(readIndexed,writeIndexed));}  }
class C{  public void makeImmutable(){  if (isMutable) {    if ((nameID != null) && (nameID.isMutable())) {      nameID.makeImmutable();    }    if ((extensions != null) && (extensions.isMutable())) {      extensions.makeImmutable();    }    isMutable=false;  }}  }
class C{  public ExpandVetoException(TreeExpansionEvent event,String message){  super(message);  this.event=event;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  SubContextList subContextList=xctxt.getCurrentNodeList();  int currentNode=DTM.NULL;  if (null != subContextList) {    if (subContextList instanceof PredicatedNodeTest) {      LocPathIterator iter=((PredicatedNodeTest)subContextList).getLocPathIterator();      currentNode=iter.getCurrentContextNode();    } else     if (subContextList instanceof StepPattern) {      throw new RuntimeException(XSLMessages.createMessage(XSLTErrorResources.ER_PROCESSOR_ERROR,null));    }  } else {    currentNode=xctxt.getContextNode();  }  return new XNodeSet(currentNode,xctxt.getDTMManager());}  }
class C{  public void testInsertOfManyRowsUsingOneThread(){  Logger.global.info("java.sql stress test: single thread and many operations.");  int maxConnections=getConnectionNum();  Logger.global.info("Opening " + maxConnections + " to database "+ Support_SQL.getFilename());  openConnections(maxConnections);  int tasksPerConnection=Support_SQL.sqlMaxTasks / maxConnections;  Logger.global.info("TasksPerConnection =  " + Support_SQL.sqlMaxTasks + " by (maxConnections) "+ maxConnections+ " = "+ tasksPerConnection);  int pk=1;  for (int i=0; i < vc.size(); ++i) {    Logger.global.info(" creating " + tasksPerConnection + "tasks for Connection "+ i);    Connection c=vc.elementAt(i);    for (int j=0; j < tasksPerConnection; ++j) {      insertNewRecord(c,pk++);    }  }  try {    ResultSet rs=statement.executeQuery("SELECT COUNT(*) as counter FROM " + DatabaseCreator.TEST_TABLE2);    assertTrue("RecordSet is empty",rs.next());    assertEquals("Incorrect number of records",tasksPerConnection * maxConnections,rs.getInt("counter"));    rs.close();  } catch (  SQLException sql) {    fail("Unexpected SQLException " + sql.toString());  }}  }
class C{  public synchronized void removeHostAlias(String alias){  alias=renameWildcardHost(alias);  MappedHost hostMapping=exactFind(hosts,alias);  if (hostMapping == null || !hostMapping.isAlias()) {    return;  }  MappedHost[] newHosts=new MappedHost[hosts.length - 1];  if (removeMap(hosts,newHosts,alias)) {    hosts=newHosts;    hostMapping.getRealHost().removeAlias(hostMapping);  }}  }
class C{  public String toString(){  if (m_namespace != null && m_namespace.length() > 0)   return "{" + m_namespace + "}"+ m_extensionName; else   return m_extensionName;}  }
class C{  Item newInteger(final int value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(INT).putInt(value);    result=new Item(index++,key);    put(result);  }  return result;}  }
class C{  public boolean isReferralPolicy(){  return referralPolicy;}  }
class C{  public static int compare(byte[] a,byte[] a2){  if (a == a2) {    return 0;  }  if (a == null) {    return -1;  }  if (a2 == null) {    return 1;  }  int minLength=Math.min(a.length,a2.length);  for (int i=0; i < minLength; i++) {    int firstByte=0xFF & a[i];    int secondByte=0xFF & a2[i];    if (firstByte != secondByte) {      if (firstByte < secondByte) {        return -1;      } else       if (firstByte > secondByte) {        return 1;      }    }  }  return a.length - a2.length;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  String url=getStringOptionValue(ARGUMENT_URL);  ServiceSchemaManager ssm=getServiceSchemaManager();  IOutput outputWriter=getOutputWriter();  try {    String[] params={serviceName,url};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_SET_SERVICE_SCHEMA_PROPERTIES_VIEW_BEAN_URL",params);    ssm.setPropertiesViewBeanURL(url);    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_SET_SERVICE_SCHEMA_PROPERTIES_VIEW_BEAN_URL",params);    outputWriter.printlnMessage(MessageFormat.format(getResourceString("service-schema-set-properties-view-bean-url-succeed"),(Object[])params));  } catch (  SSOException e) {    String[] args={serviceName,url,e.getMessage()};    debugError("SetServiceSchemaPropertiesViewBeanURL.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SET_SERVICE_SCHEMA_PROPERTIES_VIEW_BEAN_URL",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={serviceName,url,e.getMessage()};    debugError("SetServiceSchemaPropertiesViewBeanURL.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SET_SERVICE_SCHEMA_PROPERTIES_VIEW_BEAN_URL",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public byte[] decode(byte[] bytes) throws DecoderException {  return decodeUrl(bytes);}  }
class C{  public DefaultSignedAttributeTableGenerator(){  table=new Hashtable();}  }
class C{  private IOEvent determineSelectableIOEventAfter(IOEvent event){  if (event == whylineUI.getTrace().getIOHistory().getLastEvent())   return event;  for (  IOEvent io : whylineUI.getTrace().getIOHistory().getIteratorForEventsAfter(event))   if (io.segmentsOutput() && ioEventIsOfDesiredType(io))   return io;  return event;}  }
class C{  public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj instanceof AttributeSet) {    AttributeSet attrs=(AttributeSet)obj;    return isEqual(attrs);  }  return false;}  }
class C{  private void decryptBlock(byte[] src,int srcIndex,byte[] dst,int dstIndex){  int x2=BytesTo32Bits(src,srcIndex) ^ gSubKeys[OUTPUT_WHITEN];  int x3=BytesTo32Bits(src,srcIndex + 4) ^ gSubKeys[OUTPUT_WHITEN + 1];  int x0=BytesTo32Bits(src,srcIndex + 8) ^ gSubKeys[OUTPUT_WHITEN + 2];  int x1=BytesTo32Bits(src,srcIndex + 12) ^ gSubKeys[OUTPUT_WHITEN + 3];  int k=ROUND_SUBKEYS + 2 * ROUNDS - 1;  int t0, t1;  for (int r=0; r < ROUNDS; r+=2) {    t0=Fe32_0(x2);    t1=Fe32_3(x3);    x1^=t0 + 2 * t1 + gSubKeys[k--];    x0=(x0 << 1 | x0 >>> 31) ^ (t0 + t1 + gSubKeys[k--]);    x1=x1 >>> 1 | x1 << 31;    t0=Fe32_0(x0);    t1=Fe32_3(x1);    x3^=t0 + 2 * t1 + gSubKeys[k--];    x2=(x2 << 1 | x2 >>> 31) ^ (t0 + t1 + gSubKeys[k--]);    x3=x3 >>> 1 | x3 << 31;  }  Bits32ToBytes(x0 ^ gSubKeys[INPUT_WHITEN],dst,dstIndex);  Bits32ToBytes(x1 ^ gSubKeys[INPUT_WHITEN + 1],dst,dstIndex + 4);  Bits32ToBytes(x2 ^ gSubKeys[INPUT_WHITEN + 2],dst,dstIndex + 8);  Bits32ToBytes(x3 ^ gSubKeys[INPUT_WHITEN + 3],dst,dstIndex + 12);}  }
class C{  public NamingSecurityException(String explanation){  super(explanation);}  }
class C{  public static boolean isMarkup(int c){  return c == '<' || c == '&' || c == '%';}  }
class C{  public CryptoException(String message,Throwable cause){  super(message);  this.cause=cause;}  }
class C{  public boolean isAnyPolicyInhibited(){  return anyPolicyInhibited;}  }
class C{  public AsfFieldIterator(final Iterator<TagField> iterator){  assert iterator != null;  this.fieldIterator=iterator;}  }
class C{  public int hashCode(){  int result=31 * declaringClass.hashCode() + methodName.hashCode();  result=31 * result + Objects.hashCode(fileName);  result=31 * result + lineNumber;  return result;}  }
class C{  public String toXMLString() throws SAML2Exception {  return xmlString;}  }
class C{  public void handleTblButtonAddRequest(RequestInvocationEvent event){  ServicesSelectViewBean vb=(ServicesSelectViewBean)getViewBean(ServicesSelectViewBean.class);  unlockPageTrail();  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  @KnownFailure(" Ticket 91 : relies on not supported features: getCatalog, keys") public void test_getPrimaryKeysLjava_lang_StringLjava_lang_StringLjava_lang_String() throws SQLException {  ResultSet rs=meta.getPrimaryKeys(conn.getCatalog(),null,DatabaseCreator.TEST_TABLE1);  ResultSetMetaData rsmd=rs.getMetaData();  assertTrue("Rows not obtained",rs.next());  int col=rsmd.getColumnCount();  assertEquals("Incorrect number of columns",6,col);  String[] columnNames={"TABLE_CAT","TABLE_SCHEM","TABLE_NAME","COLUMN_NAME","KEY_SEQ","PK_NAME"};  for (int c=1; c <= col; ++c) {    assertEquals("Incorrect column name",columnNames[c - 1],rsmd.getColumnName(c));  }  assertEquals("Incorrect table catalogue",conn.getCatalog(),rs.getString("TABLE_CAT").toLowerCase());  assertEquals("Incorrect table schema","",rs.getString("TABLE_SCHEM"));  assertEquals("Incorrect table name",DatabaseCreator.TEST_TABLE1,rs.getString("TABLE_NAME").toLowerCase());  assertEquals("Incorrect column name","id",rs.getString("COLUMN_NAME").toLowerCase());  assertEquals("Incorrect sequence number",1,rs.getShort("KEY_SEQ"));  assertEquals("Incorrect primary key name","primary",rs.getString("PK_NAME").toLowerCase());  rs.close();  conn.close();  try {    meta.getPrimaryKeys(conn.getCatalog(),null,DatabaseCreator.TEST_TABLE1);    fail("SQLException not thrown");  } catch (  SQLException e) {  }}  }
class C{  protected void nonBlockingFlush(){  LinkedList<LogRecord> tempBuffer=null;synchronized (this) {    if (recordBuffer.size() <= 0) {      if (Debug.messageEnabled()) {        Debug.message(tableName + ":DBHandler:nonBlockingFlush: no records in buffer to write");      }      return;    }    String tableName=getTableName();    if (tableName == null) {      Debug.error(tableName + ":DBHandler:nonBlockingFlush:NullLocationException: table name is null");      int recordsToBeDropped=recordBuffer.size();      recordBuffer.clear();      if (MonitoringUtil.isRunning() && dbLogHandlerForMonitoring != null) {        dbLogHandlerForMonitoring.incHandlerDroppedCount(recordsToBeDropped);      }      return;    } else {      tempBuffer=recordBuffer;      recordBuffer=new LinkedList<LogRecord>();    }  }  LogTask task=new LogTask(tempBuffer);  try {    LoggingThread.getInstance().run(task);  } catch (  ThreadPoolException ex) {synchronized (this) {      task.run();    }  }}  }
class C{  public static void sort(short[] array,int start,int end){  DualPivotQuicksort.sort(array,start,end);}  }
class C{  public boolean isLogPackets(){  return this.logPackets;}  }
class C{  public static KeyListener remove(KeyListener l,KeyListener oldl){  return (KeyListener)removeInternal(l,oldl);}  }
class C{  private void resizeCropViewRect(float touchX,float touchY){  mTempRect.set(mCropViewRect);switch (mCurrentTouchCornerIndex) {case 0:    mTempRect.set(touchX,touchY,mCropViewRect.right,mCropViewRect.bottom);  break;case 1:mTempRect.set(mCropViewRect.left,touchY,touchX,mCropViewRect.bottom);break;case 2:mTempRect.set(mCropViewRect.left,mCropViewRect.top,touchX,touchY);break;case 3:mTempRect.set(touchX,mCropViewRect.top,mCropViewRect.right,touchY);break;}boolean changeHeight=mTempRect.height() >= mCropRectMinSize;boolean changeWidth=mTempRect.width() >= mCropRectMinSize;mCropViewRect.set(changeWidth ? mTempRect.left : mCropViewRect.left,changeHeight ? mTempRect.top : mCropViewRect.top,changeWidth ? mTempRect.right : mCropViewRect.right,changeHeight ? mTempRect.bottom : mCropViewRect.bottom);if (changeHeight || changeWidth) {updateGridPoints();postInvalidate();}}  }
class C{  public IDRepoViewBean(){  super("IDRepo");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);  createTableModel();  createPageTitleModel();  registerChildren();}  }
class C{  @Override public void removeMapping(String mapping){  mappingsLock.writeLock().lock();  try {    mappings.remove(mapping);  }  finally {    mappingsLock.writeLock().unlock();  }  if (parent.getState().equals(LifecycleState.STARTED))   fireContainerEvent(REMOVE_MAPPING_EVENT,mapping);}  }
class C{  public int read() throws IOException {synchronized (lock) {    ensureOpen();    if (pos < buf.length)     return buf[pos++]; else     return super.read();  }}  }
class C{  public static int length(Object value){  if (value == null) {    return 0;  } else   if (value instanceof CharSequence) {    return ((CharSequence)value).length();  } else   if (value instanceof Collection) {    return ((Collection<?>)value).size();  } else   if (value instanceof Map) {    return ((Map<?,?>)value).size();  } else   if (value instanceof Object[]) {    return ((Object[])value).length;  } else   if (value.getClass().isArray()) {    return Array.getLength(value);  }  return 0;}  }
class C{  public long readLock(){  long s=state, next;  return ((whead == wtail && (s & ABITS) < RFULL && U.compareAndSwapLong(this,STATE,s,next=s + RUNIT)) ? next : acquireRead(false,0L));}  }
class C{  public static void resetJAASConfig(){  try {    Configuration.setConfiguration(defaultConfig);  } catch (  java.lang.SecurityException e) {    System.err.println("AMLoginContext:resetJAASConfig to default:" + e.getMessage());  }}  }
class C{  public static void main(String[] args){  Holder holder=new Holder();  Blah blah=new Blah();  holder.mValue=blah;  System.out.println("Assignment was allowed");  try {    holder.mValue.run();    System.err.println("ERROR: did not get expected ICCE");  } catch (  IncompatibleClassChangeError icce) {    System.out.println("Got expected IncompatibleClassChangeError");  }  Comparable cmp=(Comparable)holder.mValue;  cmp.compareTo(cmp);  System.out.println("Done");}  }
class C{  private boolean addSchedule(ScheduleConfig scheduleConfig,String jobName,boolean update) throws SchedulerException, ParseException {  try {synchronized (LOCK) {      final Class<?> scheduleClass=scheduleConfig.getConcurrentExecution() ? SchedulerServiceJob.class : StatefulSchedulerServiceJob.class;      final JobDetail job=new JobDetail(jobName,GROUP_NAME,scheduleClass);      job.setVolatility(scheduleConfig.isPersisted());      job.setJobDataMap(createJobDataMap(jobName,scheduleConfig));      final Trigger trigger=scheduleConfig.getTriggerType().newTrigger(scheduleConfig,jobName);      final Scheduler scheduler=scheduleConfig.isPersisted() ? persistentScheduler : inMemoryScheduler;      if (update) {        deleteSchedule(jobName);      }      if (scheduleConfig.isEnabled()) {        job.setDurability(false);        scheduler.scheduleJob(job,trigger);        logger.info("Job {} scheduled with schedule {}, timezone {}, start time {}, end time {}.",jobName,scheduleConfig.getCronSchedule(),scheduleConfig.getTimeZone(),scheduleConfig.getStartTime(),scheduleConfig.getEndTime());      } else {        job.setDurability(true);        scheduler.addJob(job,false);        logger.info("Job {} added with schedule {}, timezone {}, start time {}, end time {}.",jobName,scheduleConfig.getCronSchedule(),scheduleConfig.getTimeZone(),scheduleConfig.getStartTime(),scheduleConfig.getEndTime());      }    }  } catch (  ObjectAlreadyExistsException ex) {    throw ex;  }catch (  SchedulerException ex) {    logger.warn("Failed to create scheduler service for " + jobName + ": "+ ex.getMessage(),ex);    throw ex;  }  return true;}  }
class C{  @Descriptor("Exports all configurations.") public void configexport(CommandSession session,@Descriptor(USER_PASS_DESC) @MetaVar(USER_PASS_METAVAR) @Parameter(names={"-u","--user"},absentValue=USER_PASS_DEFAULT) final String userPass,@Descriptor(IDM_URL_DESC) @MetaVar(IDM_URL_METAVAR) @Parameter(names={"--url"},absentValue=IDM_URL_DEFAULT) final String idmUrl,@Descriptor(IDM_PORT_DESC) @MetaVar(IDM_PORT_METAVAR) @Parameter(names={"-P","--port"},absentValue="") final String idmPort,@Descriptor("target directory") String target){  try (final HttpRemoteJsonResource resource=new HttpRemoteJsonResource(getUrl(idmUrl),getPort(idmPort),getUsername(userPass),getPassword(userPass))){    File targetDir=IdentityServer.getFileForPath(target);    if (!targetDir.exists()) {      targetDir.mkdirs();    }    session.getConsole().println("[ConfigExport] Export JSON configurations to:");    session.getConsole().append("[ConfigExport] \t").println(targetDir.getAbsolutePath());    ResourceResponse responseValue=resource.read(null,Requests.newReadRequest("config"));    Iterator<JsonValue> iterator=responseValue.getContent().get("configurations").iterator();    String bkpPostfix="." + (new SimpleDateFormat("yyyy-MM-dd'T'HH-mm-ss")).format(new Date()) + ".bkp";    while (iterator.hasNext()) {      String id=iterator.next().get("_id").required().asString();      if (!id.startsWith("org.apache")) {        try {          responseValue=resource.read(null,Requests.newReadRequest("config/" + id));          if (null != responseValue.getContent() && !responseValue.getContent().isNull()) {            File configFile=new File(targetDir,id.replace("/","-") + ".json");            if (configFile.exists()) {              configFile.renameTo(new File(configFile.getParentFile(),configFile.getName() + bkpPostfix));            }            mapper.writerWithDefaultPrettyPrinter().writeValue(configFile,responseValue.getContent().getObject());            prettyPrint(session.getConsole(),"ConfigExport",id,null);          }        } catch (        Exception e) {          prettyPrint(session.getConsole(),"ConfigExport",id,e.getMessage());        }      }    }  } catch (  ResourceException e) {    failAndExit(session,REMOTE_OPERATION_FAILED,e.getMessage());  }catch (  Exception e) {    failAndExit(session,OPERATION_FAILED,e.getMessage());  }}  }
class C{  public void parse(String systemId) throws IOException, SAXException {  parse(new InputSource(systemId));}  }
class C{  public synchronized int size(){  return count;}  }
class C{  public PrinterMoreInfo(URI uri){  super(uri);}  }
class C{  public Patch(int bank,int program){  this.bank=bank;  this.program=program;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.SignaturePropertyType createSignaturePropertyType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.SignaturePropertyTypeImpl();}  }
class C{  public void testPosPosSameLength(){  byte aBytes[]={-128,56,100,-2,-76,89,45,91,3,-15,35,26,-117};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=1;  int bSign=1;  byte rBytes[]={0,-128,56,100,4,4,17,37,16,1,64,1,10,3};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.and(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public void upgrade(UpgradeParameters parameters) throws EmbeddedDirectoryServerException {  int returnCode=UpgradeCli.main(parameters.toCommandLineArguments(configParams.getConfigurationFile()),!isRunning(),outStream,errStream);  if (returnCode != 0) {    throw new EmbeddedDirectoryServerException(ERR_EMBEDDED_SERVER_UPGRADE.get(configParams.getServerRootDirectory(),returnCode));  }}  }
class C{  public AMAuthenticationAuditEventBuilder entryList(List<AuthenticationAuditEntry> entries){  List<Map<String,Object>> convertedEntries=new ArrayList<>();  for (  AuthenticationAuditEntry entry : entries) {    convertedEntries.add(entry.toMap());  }  super.entries(convertedEntries);  return this;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.RegisterNameIdentifierRequestElement createRegisterNameIdentifierRequestElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.RegisterNameIdentifierRequestElementImpl();}  }
class C{  void errorContext() throws ChangedCharSetException {  for (; (stack != null) && (stack.tag.getElement() != dtd.body); stack=stack.next) {    handleEndTag(stack.tag);  }  if (stack == null) {    legalElementContext(dtd.body);    startTag(makeTag(dtd.body,true));  }}  }
class C{  public boolean equals(Object otherObject){  if (otherObject == null) {    return false;  }  if (!otherObject.getClass().equals(this.getClass())) {    return false;  }  DuplicateNameValueList other=(DuplicateNameValueList)otherObject;  if (nameValueMap.size() != other.nameValueMap.size()) {    return false;  }  Iterator<String> li=this.nameValueMap.keySet().iterator();  while (li.hasNext()) {    String key=(String)li.next();    Collection nv1=this.getNameValue(key);    Collection nv2=(Collection)other.nameValueMap.get(key);    if (nv2 == null)     return false; else     if (!nv2.equals(nv1))     return false;  }  return true;}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.EntitiesDescriptorType createEntitiesDescriptorType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.EntitiesDescriptorTypeImpl();}  }
class C{  private boolean isSearchable(AttributeType attributeType,SearchFilter filter,int depth){switch (filter.getFilterType()) {case AND:    if (depth >= MAX_NESTED_FILTER_DEPTH) {      return false;    }  for (  SearchFilter f : filter.getFilterComponents()) {    if (isSearchable(attributeType,f,depth + 1)) {      return true;    }  }return false;case EQUALITY:return filter.getAttributeType().equals(attributeType);default :return false;}}  }
class C{  private static void toPOSIXString(FilePermission p,StringBuilder buffer,String owner,String group,String other){  buffer.append(owner);  buffer.append(p.isOwnerReadable() ? "r" : "-");  buffer.append(p.isOwnerWritable() ? "w" : "-");  buffer.append(p.isOwnerExecutable() ? "x" : "-");  buffer.append(group);  buffer.append(p.isGroupReadable() ? "r" : "-");  buffer.append(p.isGroupWritable() ? "w" : "-");  buffer.append(p.isGroupExecutable() ? "x" : "-");  buffer.append(other);  buffer.append(p.isOtherReadable() ? "r" : "-");  buffer.append(p.isOtherWritable() ? "w" : "-");  buffer.append(p.isOtherExecutable() ? "x" : "-");}  }
class C{  public boolean endsWith(List<Rdn> rdns){  if (rdns == null) {    return false;  }  int len1=this.rdns.size();  int len2=rdns.size();  return (len1 >= len2 && doesListMatch(len1 - len2,len1,rdns));}  }
class C{  @Override public void close() throws IOException {  eof=false;  position=0;  mark=-1;}  }
class C{  public Expression compile(int opPos) throws TransformerException {  int op=getOp(opPos);  Expression expr=null;switch (op) {case OpCodes.OP_XPATH:    expr=compile(opPos + 2);  break;case OpCodes.OP_OR:expr=or(opPos);break;case OpCodes.OP_AND:expr=and(opPos);break;case OpCodes.OP_NOTEQUALS:expr=notequals(opPos);break;case OpCodes.OP_EQUALS:expr=equals(opPos);break;case OpCodes.OP_LTE:expr=lte(opPos);break;case OpCodes.OP_LT:expr=lt(opPos);break;case OpCodes.OP_GTE:expr=gte(opPos);break;case OpCodes.OP_GT:expr=gt(opPos);break;case OpCodes.OP_PLUS:expr=plus(opPos);break;case OpCodes.OP_MINUS:expr=minus(opPos);break;case OpCodes.OP_MULT:expr=mult(opPos);break;case OpCodes.OP_DIV:expr=div(opPos);break;case OpCodes.OP_MOD:expr=mod(opPos);break;case OpCodes.OP_NEG:expr=neg(opPos);break;case OpCodes.OP_STRING:expr=string(opPos);break;case OpCodes.OP_BOOL:expr=bool(opPos);break;case OpCodes.OP_NUMBER:expr=number(opPos);break;case OpCodes.OP_UNION:expr=union(opPos);break;case OpCodes.OP_LITERAL:expr=literal(opPos);break;case OpCodes.OP_VARIABLE:expr=variable(opPos);break;case OpCodes.OP_GROUP:expr=group(opPos);break;case OpCodes.OP_NUMBERLIT:expr=numberlit(opPos);break;case OpCodes.OP_ARGUMENT:expr=arg(opPos);break;case OpCodes.OP_EXTFUNCTION:expr=compileExtension(opPos);break;case OpCodes.OP_FUNCTION:expr=compileFunction(opPos);break;case OpCodes.OP_LOCATIONPATH:expr=locationPath(opPos);break;case OpCodes.OP_PREDICATE:expr=null;break;case OpCodes.OP_MATCHPATTERN:expr=matchPattern(opPos + 2);break;case OpCodes.OP_LOCATIONPATHPATTERN:expr=locationPathPattern(opPos);break;case OpCodes.OP_QUO:error(XPATHErrorResources.ER_UNKNOWN_OPCODE,new Object[]{"quo"});break;default :error(XPATHErrorResources.ER_UNKNOWN_OPCODE,new Object[]{Integer.toString(getOp(opPos))});}return expr;}  }
class C{  public void addAnnotation(String a){  applicationIdentifiers.add(a);}  }
class C{  public SecurityVerifyHeader createSecurityVerifyHeader(){  SecurityVerify secVerify=new SecurityVerify();  return secVerify;}  }
class C{  public void handleTblSupportedContainerHrefActionRequest(RequestInvocationEvent event) throws ModelControlException {  try {    Map values=getValues();    onBeforeSaveProfile(values);    setPageSessionAttribute(PROPERTY_ATTRIBUTE,(HashMap)values);    WSPPServiceSupportedContainerEditViewBean vb=(WSPPServiceSupportedContainerEditViewBean)getViewBean(WSPPServiceSupportedContainerEditViewBean.class);    unlockPageTrail();    passPgSessionMap(vb);    vb.populateValues((String)getDisplayFieldValue("tblSupportedContainerHrefAction"));    vb.forwardTo(getRequestContext());  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());    forwardTo();  }}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"SAVED_DAILY_DETAIL\" ("+ "\"_id\" INTEGER PRIMARY KEY ,"+ "\"BODY\" TEXT,"+ "\"IMAGE_SOURCE\" TEXT,"+ "\"IMAGE\" TEXT,"+ "\"TITLE\" TEXT,"+ "\"SHARE_URL\" TEXT,"+ "\"JS\" TEXT,"+ "\"CSS\" TEXT);");}  }
class C{  public SearchResults search(String filter,SearchControl searchControl) throws InvalidSearchFilterException, UMSException {  int scope=SearchControl.SCOPE_SUB;  if (searchControl != null) {    scope=searchControl.getSearchScope(scope);  }  SearchResults results=DataLayer.getInstance().searchIDs(getPrincipal(),getGuid(),scope,filter,searchControl);  results.setPrincipal(getPrincipal());  return results;}  }
class C{  public LifetimeExceededException(final String message){  super(message);}  }
class C{  public void testCertPathValidator09() throws NoSuchAlgorithmException, NoSuchProviderException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  try {    CertPathValidator.getInstance(null,defaultProvider);    fail("NullPointerException or NoSuchAlgorithmException must be thrown when algorithm is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertPathValidator.getInstance(invalidValues[i],defaultProvider);      fail("NoSuchAlgorithm must be thrown");    } catch (    NoSuchAlgorithmException e1) {    }  }}  }
class C{  private TypeInfo createTypeInfo(Method method,boolean isRequest){  String typeName=isRequest ? typeNameGenerator.getRequestTypeName(methodNameComponents.get(method.getName())) : typeNameGenerator.getMessageTypeName(typeNameGenerator.getResponseTypeUrl(method.getResponseTypeUrl()));  String subpackage=typeNameGenerator.getSubpackage(isRequest);  MessageTypeInfo messageTypeInfo=MessageTypeInfo.newBuilder().typeName(typeName).subpackage(subpackage).fields(new HashMap<String,FieldInfo>()).build();  return TypeInfo.newBuilder().kind(Field.Kind.TYPE_MESSAGE).isMap(false).mapKey(null).mapValue(null).isArray(false).isMessage(true).message(messageTypeInfo).build();}  }
class C{  public void addAudioFileModificationListener(AudioFileModificationListener listener){  this.modificationHandler.addAudioFileModificationListener(listener);}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String configName=getStringOptionValue(AuthOptions.AUTH_CONFIG_NAME);  String[] params={realm,configName};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_GET_AUTH_CONFIG_ENTRIES",params);  try {    Map configData=AMAuthConfigUtils.getNamedConfig(configName,realm,adminSSOToken);    IOutput outputWriter=getOutputWriter();    boolean hasData=false;    if ((configData != null) && !configData.isEmpty()) {      Set tmp=(Set)configData.get(AuthOptions.AUTH_CONFIG_ATTR);      if ((tmp != null) && !tmp.isEmpty()) {        hasData=true;        String xml=(String)tmp.iterator().next();        List entryList=new ArrayList(AMAuthConfigUtils.xmlToAuthConfigurationEntry(xml));        outputWriter.printlnMessage(getResourceString("authentication-get-auth-config-entries-succeeded"));        for (Iterator i=entryList.iterator(); i.hasNext(); ) {          AuthConfigurationEntry e=(AuthConfigurationEntry)i.next();          String options=e.getOptions();          if (options == null) {            options="";          }          Object[] args={e.getLoginModuleName(),e.getControlFlag(),options};          outputWriter.printlnMessage(MessageFormat.format(getResourceString("authentication-get-auth-config-entries-entry"),args));        }      }    } else {      writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_GET_AUTH_CONFIG_ENTRIES",params);      throw new CLIException(getResourceString("authentication-get-auth-config-entries-not-found"),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }    if (!hasData) {      outputWriter.printlnMessage(getResourceString("authentication-get-auth-config-entries-no-values"));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_GET_AUTH_CONFIG_ENTRIES",params);  } catch (  AMConfigurationException e) {    debugError("GetAuthConfigurationEntries.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_GET_AUTH_CONFIG_ENTRIES",params);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    debugError("GetAuthConfigurationEntries.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_GET_AUTH_CONFIG_ENTRIES",params);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    debugError("GetAuthConfigurationEntries.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_GET_AUTH_CONFIG_ENTRIES",params);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  @Override public int read() throws IOException {  if (buf == null) {    throw new IOException();  }  if (pos < buf.length) {    return (buf[pos++] & 0xFF);  }  return in.read();}  }
class C{  public InterruptedByTimeoutException(){}  }
class C{  public LinkedHashSet(Collection<? extends E> c){  super(Math.max(2 * c.size(),11),.75f,true);  addAll(c);}  }
class C{  public void warning(SAXParseException e) throws SAXException {}  }
class C{  public static Object parse(Reader in){  try {    JSONParser parser=new JSONParser();    return parser.parse(in);  } catch (  Exception e) {    return null;  }}  }
class C{  @Override public void removeFilterMap(FilterMap filterMap){  filterMaps.remove(filterMap);  fireContainerEvent("removeFilterMap",filterMap);}  }
class C{  public void updateCOMSODFile(X509Certificate newCertificate){  try {    COMFile comFile=lds.getCOMFile();    SODFile sodFile=lds.getSODFile();    String digestAlg=sodFile.getDigestAlgorithm();    String signatureAlg=sodFile.getDigestEncryptionAlgorithm();    X509Certificate cert=newCertificate != null ? newCertificate : sodFile.getDocSigningCertificate();    byte[] signature=sodFile.getEncryptedDigest();    Map<Integer,byte[]> dgHashes=new TreeMap<Integer,byte[]>();    List<Short> dgFids=lds.getDataGroupList();    MessageDigest digest=null;    digest=MessageDigest.getInstance(digestAlg);    for (    Short fid : dgFids) {      if (fid != PassportService.EF_COM && fid != PassportService.EF_SOD && fid != cvcaFID) {        int length=lds.getLength(fid);        InputStream inputStream=lds.getInputStream(fid);        if (inputStream == null) {          LOGGER.warning("Could not get input stream for " + Integer.toHexString(fid));          continue;        }        DataInputStream dataInputStream=new DataInputStream(inputStream);        byte[] data=new byte[length];        dataInputStream.readFully(data);        byte tag=data[0];        dgHashes.put(LDSFileUtil.lookupDataGroupNumberByTag(tag),digest.digest(data));        comFile.insertTag((int)(tag & 0xFF));      }    }    if (docSigningPrivateKey != null) {      sodFile=new SODFile(digestAlg,signatureAlg,dgHashes,docSigningPrivateKey,cert);    } else {      sodFile=new SODFile(digestAlg,signatureAlg,dgHashes,signature,cert);    }    lds.add(comFile);    lds.add(sodFile);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  @Override public String toString(){  return "L" + System.identityHashCode(this);}  }
class C{  public static void generateSelfSignedCertificate(KeyStore ks,String ksType,String ksPath,KeyType keyType,String alias,char[] pwd,String dn,int validity) throws KeyStoreException {  PlatformIMPL.generateSelfSignedCertificate(ks,ksType,ksPath,keyType,alias,pwd,dn,validity);}  }
class C{  public final String elementAt(int i){  return m_map[i];}  }
class C{  public static boolean isWebDavMethod(String method){  return StringUtils.equals(method,PROPFIND) || StringUtils.equals(method,PROPPATCH) || StringUtils.equals(method,MKCOL)|| StringUtils.equals(method,COPY)|| StringUtils.equals(method,MOVE)|| StringUtils.equals(method,LOCK)|| StringUtils.equals(method,UNLOCK);}  }
class C{  public static Foo toModel(FooSoap soapModel){  if (soapModel == null) {    return null;  }  Foo model=new FooImpl();  model.setUuid(soapModel.getUuid());  model.setFooId(soapModel.getFooId());  model.setGroupId(soapModel.getGroupId());  model.setCompanyId(soapModel.getCompanyId());  model.setUserId(soapModel.getUserId());  model.setUserName(soapModel.getUserName());  model.setCreateDate(soapModel.getCreateDate());  model.setModifiedDate(soapModel.getModifiedDate());  model.setField1(soapModel.getField1());  model.setField2(soapModel.getField2());  model.setField3(soapModel.getField3());  model.setField4(soapModel.getField4());  model.setField5(soapModel.getField5());  return model;}  }
class C{  public void testAscii() throws Exception {  String str="AbCdEfGhIjKlMnOpQrStUvWxYzX";  ByteArrayInputStream aa=new ByteArrayInputStream(str.getBytes("ISO8859_1"));  InputStreamReader a=new InputStreamReader(aa,"ISO8859_1");  try {    int x=a.read();    assertEquals('A',x);    char[] c=new char[26];    x=a.read(c,0,26);    assertEquals("ISO-8859-1",a.getEncoding());    assertEquals(26,x);    assertEquals("bCdEfGhIjKlMnOpQrStUvWxYzX",String.valueOf(c));  }  finally {    a.close();  }}  }
class C{  public void adjustmentValueChanged(AdjustmentEvent e){  ((AdjustmentListener)a).adjustmentValueChanged(e);  ((AdjustmentListener)b).adjustmentValueChanged(e);}  }
class C{  private Object canonicalize(Object input) throws JSONException {  if (input instanceof JSONArray) {    JSONArray array=(JSONArray)input;    List<Object> result=new ArrayList<Object>();    for (int i=0; i < array.length(); i++) {      result.add(canonicalize(array.opt(i)));    }    return result;  } else   if (input instanceof JSONObject) {    JSONObject object=(JSONObject)input;    Map<String,Object> result=new HashMap<String,Object>();    for (Iterator<?> i=object.keys(); i.hasNext(); ) {      String key=(String)i.next();      result.put(key,canonicalize(object.get(key)));    }    return result;  } else   if (input == null || input.equals(JSONObject.NULL)) {    return JSONObject.NULL;  } else {    return input;  }}  }
class C{  public Reason(){  super(NAME);}  }
class C{  private boolean isGenerateFullConfig(JsonValue requestConfig){  return !requestConfig.get(CONNECTOR_REF).isNull() && !requestConfig.get(CONNECTOR_REF).get(CONNECTOR_NAME).isNull() && !requestConfig.get(CONFIGURATION_PROPERTIES).isNull();}  }
class C{  public SSOToken createSSOToken(String tokenId,boolean invokedByAuth) throws SSOException, UnsupportedOperationException {  return createSSOToken(tokenId,invokedByAuth,true);}  }
class C{  protected boolean wasIcon(JInternalFrame f){  return (f.getClientProperty(HAS_BEEN_ICONIFIED_PROPERTY) == Boolean.TRUE);}  }
class C{  public static String encodeURL(String url,HttpServletRequest request,AuthContext ac){  if (isCookieSupported(request)) {    return (url);  }  String cookieName=getAuthCookieName();  if (ac.getStatus() == AuthContext.Status.SUCCESS) {    cookieName=getCookieName();  }  String encodedURL=url;  if (urlRewriteInPath) {    encodedURL=encodeURL(url,SessionUtils.SEMICOLON,false,cookieName,ac.getAuthIdentifier());  } else {    encodedURL=encodeURL(url,SessionUtils.QUERY,true,cookieName,ac.getAuthIdentifier());  }  if (utilDebug.messageEnabled()) {    utilDebug.message("encodeURL : URL='{}', \nRewritten URL='{}'",url,encodedURL);  }  return encodedURL;}  }
class C{  public void createAgentGroup(String realmName,String name,String type) throws AMConsoleException {  String[] params={realmName,name,type};  try {    logEvent("ATTEMPT_CREATE_AGENT_GROUP",params);    AgentConfiguration.createAgentGroup(getUserSSOToken(),realmName,name,type,AgentConfiguration.getDefaultValues(type,true));    logEvent("SUCCEED_CREATE_AGENT_GROUP",params);  } catch (  ConfigurationException e) {    String[] paramsEx={realmName,name,type,getErrorString(e)};    logEvent("EXCEPTION_CREATE_AGENT_GROUP",paramsEx);    debug.warning("AgentsModelImpl.createAgentGroup",e);    throw new AMConsoleException(getErrorString(e));  }catch (  SSOException e) {    String[] paramsEx={realmName,name,type,getErrorString(e)};    logEvent("EXCEPTION_CREATE_AGENT_GROUP",paramsEx);    debug.warning("AgentsModelImpl.createAgentGroup",e);    throw new AMConsoleException(getErrorString(e));  }catch (  IdRepoException e) {    String[] paramsEx={realmName,name,type,getErrorString(e)};    logEvent("EXCEPTION_CREATE_AGENT_GROUP",paramsEx);    debug.warning("AgentsModelImpl.createAgentGroup",e);    throw new AMConsoleException(getErrorString(e));  }catch (  SMSException e) {    String[] paramsEx={realmName,name,type,getErrorString(e)};    logEvent("EXCEPTION_CREATE_AGENT_GROUP",paramsEx);    debug.warning("AgentsModelImpl.createAgentGroup",e);    throw new AMConsoleException(getErrorString(e));  }}  }
class C{  private StringBuffer format(BigInteger number,StringBuffer result,FieldPosition fieldPosition){  fieldPosition.setBeginIndex(0);  fieldPosition.setEndIndex(0);  return format(number,result,fieldPosition.getFieldDelegate(),false);}  }
class C{  private static boolean isSpecialDomain(final String domain){  final String ucDomain=domain.toUpperCase(Locale.ENGLISH);  return ucDomain.endsWith(".COM") || ucDomain.endsWith(".EDU") || ucDomain.endsWith(".NET")|| ucDomain.endsWith(".GOV")|| ucDomain.endsWith(".MIL")|| ucDomain.endsWith(".ORG")|| ucDomain.endsWith(".INT");}  }
class C{  @Override public String toString(){  if (isSSL != null) {    return (isSSL ? "ldaps" : "ldap") + COLON_SLASH_SLASH + host+ SEPARATOR+ port;  } else {    return host + SEPARATOR + port;  }}  }
class C{  @SuppressWarnings("unused") public static void translatePoint(PointF point,float offset,float angle){  float radiant=(float)Math.toRadians(angle);  point.x+=(float)(Math.cos(radiant) * offset);  point.y+=(float)(Math.sin(radiant) * offset);}  }
class C{  public void test_ConstructorLjava_lang_StringLjava_lang_String(){  Locale x=new Locale("xx","CV");  assertTrue("Failed to create Locale",x.getCountry().equals("CV") && x.getVariant().equals(""));  try {    new Locale("xx",null);    fail("NullPointerException expected");  } catch (  NullPointerException e) {  }  try {    new Locale(null,"CV");    fail("NullPointerException expected");  } catch (  NullPointerException e) {  }}  }
class C{  public JProgressBar(){  this(defaultOrientation);}  }
class C{  public XObject eval(Node contextNode,String str) throws TransformerException {  return eval(contextNode,str,contextNode);}  }
class C{  public TypeName(String name){  this(name,name);}  }
class C{  public JPasswordField(int columns){  this(null,null,columns);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  Attr domesticAttr;  String name;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testEmployee=(Element)elementList.item(0);  domesticAttr=testEmployee.getAttributeNode("domestic");  name=domesticAttr.getNodeName();  assertEquals("elementGetAttributeNodeAssert","domestic",name);}  }
class C{  public static Hyphenation hyphenate(String lang,String country,String word,int leftMin,int rightMin){  return hyphenate(lang,country,null,word,leftMin,rightMin);}  }
class C{  private IntentParser(){}  }
class C{  public void testAlgorithmParameterGenerator07() throws NoSuchAlgorithmException {  if (!DSASupported) {    fail(validAlgName + " algorithm is not supported");    return;  }  Provider provider=null;  for (int i=0; i < algs.length; i++) {    try {      AlgorithmParameterGenerator.getInstance(algs[i],provider);      fail("IllegalArgumentException must be thrown when provider is null");    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  public boolean hasMultiple(){  return multiple;}  }
class C{  private int doWrapAndSend(final ByteBuffer unwrappedData) throws IOException {synchronized (wrapLock) {    while (true) {      abortOnSSLException();      final SSLEngineResult result;      try {        result=sslEngine.wrap(unwrappedData,sendWrappedBuffer);      } catch (      SSLException e) {        sslException=e;        throw e;      }switch (result.getStatus()) {case BUFFER_OVERFLOW:        final int newSize=sslEngine.getSession().getPacketBufferSize();      final ByteBuffer newSendWrappedBuffer=ByteBuffer.allocate(sendWrappedBuffer.position() + newSize);    sendWrappedBuffer.flip();  newSendWrappedBuffer.put(sendWrappedBuffer);sendWrappedBuffer=newSendWrappedBuffer;break;case BUFFER_UNDERFLOW:sslException=new SSLException("Got unexpected underflow while wrapping");throw sslException;case CLOSED:throw new ClosedChannelException();default :sendWrappedBuffer.flip();while (sendWrappedBuffer.hasRemaining()) {channel.write(sendWrappedBuffer);}final int written=sendWrappedBuffer.position();sendWrappedBuffer.clear();return written;}}}}  }
class C{  public static void fill(boolean[] a,int fromIndex,int toIndex,boolean val){  rangeCheck(a.length,fromIndex,toIndex);  for (int i=fromIndex; i < toIndex; i++)   a[i]=val;}  }
class C{  public NameClassPair(String name,String className,boolean isRelative){  this.name=name;  this.className=className;  this.isRel=isRelative;}  }
class C{  public void replaceSubject(String subjectName,Subject subject,boolean exclusive) throws NameNotFoundException {  if (!users.containsKey(subjectName)) {    String[] objs={subjectName};    throw (new NameNotFoundException(ResBundleUtils.rbName,"name_not_present",objs,subjectName,PolicyException.USER_COLLECTION));  }  users.put(subjectName,new QualifiedSubject(subject,exclusive));}  }
class C{  public void onOffhook() throws IllegalStateException {  currentState.offhook();}  }
class C{  @Override public Foo fetchByUuid_First(String uuid,OrderByComparator<Foo> orderByComparator){  List<Foo> list=findByUuid(uuid,0,1,orderByComparator);  if (!list.isEmpty()) {    return list.get(0);  }  return null;}  }
class C{  public static boolean isInitialized(){  return mInitialized;}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap entities;  Node entityNode;  int nodeType;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  entities=docType.getEntities();  assertNotNull("entitiesNotNull",entities);  entityNode=entities.getNamedItem("ent1");  assertNotNull("ent1NotNull",entityNode);  nodeType=(int)entityNode.getNodeType();  assertEquals("entityNodeType",6,nodeType);}  }
class C{  public BAD_QOS(String detailMessage){  this(detailMessage,0,CompletionStatus.COMPLETED_NO);}  }
class C{  public void createAdministrator(boolean createAdministrator){  this.createAdministrator=createAdministrator;}  }
class C{  @Deprecated public static Player[] _INVALID_getOnlinePlayers(){  return server._INVALID_getOnlinePlayers();}  }
class C{  private boolean checkParameters(DirectoryRMIServerSocketFactory that){  return needClientCertificate == that.needClientCertificate && sslSocketFactory.equals(that.sslSocketFactory);}  }
class C{  public boolean isAuthorized(Object credential,String action,Object data,Map env){  return false;}  }
class C{  public static boolean isVersionNewer(){  if (!evaluatedUpgradeVersion) {    isVersionNewer=isVersionNewer(getCurrentVersion(),getWarFileVersion());    evaluatedUpgradeVersion=true;  }  return isVersionNewer;}  }
class C{  public GenericTagTextField(String fieldId,String initialContent){  this.id=fieldId;  this.content=initialContent;}  }
class C{  public void Logi(String msg){  if (mDebug) {    if (TextUtils.isEmpty(msg)) {      throw new NullPointerException("The message is null!");    }    Log.i(Constants.DEBUG_TAG,msg);  }}  }
class C{  protected void _finishToken() throws IOException {  _tokenIncomplete=false;  if (_currToken == JsonToken.VALUE_STRING) {    final int len=_decodedLength;    if (len > (_inputEnd - _inputPtr)) {      if (len >= _inputBuffer.length) {        _finishLongText(len);        return;      }      _loadToHaveAtLeast(len);    }    _finishShortText(len);    return;  }  if (_currToken == JsonToken.VALUE_EMBEDDED_OBJECT) {    _binaryValue=_finishBytes(_decodedLength);    return;  }  _throwInternal();}  }
class C{  public ByteArrayBuilder appendBoolean(boolean b){  appendByte(b ? 1 : 0);  return this;}  }
class C{  public RedirectException(){  super();}  }
class C{  public Set createFilteredRoles(Set roleNames) throws AMException, SSOException {  Iterator iter=roleNames.iterator();  Set roles=new HashSet();  while (iter.hasNext()) {    String roleName=(String)iter.next();    String roleDN=AMNamingAttrManager.getNamingAttr(FILTERED_ROLE) + "=" + roleName+ ","+ entryDN;    AMFilteredRoleImpl roleImpl=new AMFilteredRoleImpl(token,roleDN);    roleImpl.create();    roles.add(roleImpl);  }  return roles;}  }
class C{  public void logStackTrace(){  this.logStackTrace(TRACE_DEBUG);}  }
class C{  public void testGeneralPunctuationCategory(){  String[] s={",","!","\"","#","%","&","'","(",")","-",".","/"};  String regexp="\\p{P}";  for (int i=0; i < s.length; i++) {    Pattern pattern=Pattern.compile(regexp);    Matcher matcher=pattern.matcher(s[i]);    assertTrue(matcher.find());  }}  }
class C{  @Deprecated public static JSONObject parseJson(String response) throws JSONException, FacebookError {  if (response.equals("false")) {    throw new FacebookError("request failed");  }  if (response.equals("true")) {    response="{value : true}";  }  JSONObject json=new JSONObject(response);  if (json.has("error")) {    JSONObject error=json.getJSONObject("error");    throw new FacebookError(error.getString("message"),error.getString("type"),0);  }  if (json.has("error_code") && json.has("error_msg")) {    throw new FacebookError(json.getString("error_msg"),"",Integer.parseInt(json.getString("error_code")));  }  if (json.has("error_code")) {    throw new FacebookError("request failed","",Integer.parseInt(json.getString("error_code")));  }  if (json.has("error_msg")) {    throw new FacebookError(json.getString("error_msg"));  }  if (json.has("error_reason")) {    throw new FacebookError(json.getString("error_reason"));  }  return json;}  }
class C{  public void test_Of_EE(){  EnumSet<EnumWithInnerClass> enumSet=EnumSet.of(EnumWithInnerClass.a,EnumWithInnerClass.b);  assertEquals("enumSet should have length 2:",2,enumSet.size());  assertTrue("enumSet should contain EnumWithSubclass.a:",enumSet.contains(EnumWithInnerClass.a));  assertTrue("enumSet should contain EnumWithSubclass.b:",enumSet.contains(EnumWithInnerClass.b));  try {    EnumSet.of((EnumWithInnerClass)null,EnumWithInnerClass.a);    fail("Should throw NullPointerException");  } catch (  NullPointerException npe) {  }  try {    EnumSet.of(EnumWithInnerClass.a,(EnumWithInnerClass)null);    fail("Should throw NullPointerException");  } catch (  NullPointerException npe) {  }  try {    EnumSet.of((EnumWithInnerClass)null,(EnumWithInnerClass)null);    fail("Should throw NullPointerException");  } catch (  NullPointerException npe) {  }  enumSet=EnumSet.of(EnumWithInnerClass.a,EnumWithInnerClass.a);  assertEquals("Size of enumSet should be 1",1,enumSet.size());  EnumSet<HugeEnumWithInnerClass> hugeEnumSet=EnumSet.of(HugeEnumWithInnerClass.a,HugeEnumWithInnerClass.b);  assertEquals(2,hugeEnumSet.size());  assertTrue(hugeEnumSet.contains(HugeEnumWithInnerClass.a));  assertTrue(hugeEnumSet.contains(HugeEnumWithInnerClass.b));  try {    EnumSet.of((HugeEnumWithInnerClass)null,HugeEnumWithInnerClass.a);    fail("Should throw NullPointerException");  } catch (  NullPointerException npe) {  }  try {    EnumSet.of(HugeEnumWithInnerClass.a,(HugeEnumWithInnerClass)null);    fail("Should throw NullPointerException");  } catch (  NullPointerException npe) {  }  try {    EnumSet.of((HugeEnumWithInnerClass)null,(HugeEnumWithInnerClass)null);    fail("Should throw NullPointerException");  } catch (  NullPointerException npe) {  }  hugeEnumSet=EnumSet.of(HugeEnumWithInnerClass.a,HugeEnumWithInnerClass.a);  assertEquals(1,hugeEnumSet.size());}  }
class C{  protected void installDefaults(){  list.setLayout(null);  LookAndFeel.installBorder(list,"List.border");  LookAndFeel.installColorsAndFont(list,"List.background","List.foreground","List.font");  LookAndFeel.installProperty(list,"opaque",Boolean.TRUE);  if (list.getCellRenderer() == null) {    list.setCellRenderer((ListCellRenderer)(UIManager.get("List.cellRenderer")));  }  Color sbg=list.getSelectionBackground();  if (sbg == null || sbg instanceof UIResource) {    list.setSelectionBackground(UIManager.getColor("List.selectionBackground"));  }  Color sfg=list.getSelectionForeground();  if (sfg == null || sfg instanceof UIResource) {    list.setSelectionForeground(UIManager.getColor("List.selectionForeground"));  }  Long l=(Long)UIManager.get("List.timeFactor");  timeFactor=(l != null) ? l.longValue() : 1000L;  updateIsFileList();}  }
class C{  public static Optional<String> head(final String value){  return first(value,1);}  }
class C{  public ImageIcon(byte[] imageData){  this.image=Toolkit.getDefaultToolkit().createImage(imageData);  if (image == null) {    return;  }  Object o=image.getProperty("comment",imageObserver);  if (o instanceof String) {    description=(String)o;  }  loadImage(image);}  }
class C{  protected void updateDefaultValues(Set defaultValues,Document doc) throws SMSException, SSOException {  if (ss != null) {    Map tempattrs=new HashMap(1);    tempattrs.put(getName(),defaultValues);    ss.validateAttributes(tempattrs);  }  boolean encode=false;  if (getSyntax().equals(Syntax.PASSWORD) || getSyntax().equals(Syntax.ENCRYPTED_PASSWORD)) {    encode=true;  }  StringBuffer sb=new StringBuffer(100);  sb.append(XML_PREFIX).append(DEFAULT_VALUES_BEGIN);  Iterator items=defaultValues.iterator();  while (items.hasNext()) {    sb.append(VALUE_BEGIN);    if (encode) {      String encString=(String)items.next();      try {        encString=(String)AccessController.doPrivileged(new EncodeAction(encString));      } catch (      Throwable e) {        debug.error("AttributeSchema: Unable to encode",e);      }      sb.append(encString);    } else {      sb.append(SMSSchema.escapeSpecialCharacters((String)items.next()));    }    sb.append(VALUE_END);  }  sb.append(DEFAULT_VALUES_END);  updateXMLDocument(sb,SMSUtils.ATTRIBUTE_DEFAULT_ELEMENT,doc);}  }
class C{  @DataProvider(name="cipherParametersData") public Object[][] cipherParametersData(){  return new Object[][]{{new CipherParameters(null,null,null,128)},{new CipherParameters("AES","CFB","NoPadding",128)},{new CipherParameters("Blowfish","CFB","NoPadding",128)},{new CipherParameters("RC4",null,null,104)},{new CipherParameters("RC4","NONE","NoPadding",128)},{new CipherParameters("DES","CFB","NoPadding",56)},{new CipherParameters("DESede","ECB","PKCS5Padding",168)}};}  }
class C{  private Object readResolve() throws ObjectStreamException {  return m_transStateArray[m_transactionState];}  }
class C{  public static Set<String> decodeOID(String expr,LocalizableMessage msg) throws AciException {  Set<String> OIDs=new HashSet<>();  if (Pattern.matches(oidListRegex,expr)) {    Pattern separatorPattern=Pattern.compile(LOGICAL_OR);    String oidString=expr.replaceAll(ZERO_OR_MORE_WHITESPACE,"");    String[] oidArray=separatorPattern.split(oidString);    for (    String oid : oidArray) {      verifyOid(oid);      OIDs.add(oid);    }  } else {    throw new AciException(msg);  }  return OIDs;}  }
class C{  private static synchronized void initJNDIContext() throws SyncFactoryException {  if ((ic != null) && (lazyJNDICtxRefresh == false)) {    try {      parseProperties(parseJNDIContext());      lazyJNDICtxRefresh=true;    } catch (    NamingException e) {      e.printStackTrace();      throw new SyncFactoryException("SPI: NamingException: " + e.getExplanation());    }catch (    Exception e) {      e.printStackTrace();      throw new SyncFactoryException("SPI: Exception: " + e.getMessage());    }  }}  }
class C{  public DeviceRgb(float r,float g,float b){  super(new PdfDeviceCs.Rgb(),new float[]{r > 1 ? 1 : (r > 0 ? r : 0),g > 1 ? 1 : (g > 0 ? g : 0),b > 1 ? 1 : (b > 0 ? b : 0)});  if (r > 1 || r < 0 || g > 1 || g < 0 || b > 1 || b < 0) {    Logger LOGGER=LoggerFactory.getLogger(DeviceRgb.class);    LOGGER.warn(LogMessageConstant.COLORANT_INTENSITIES_INVALID);  }}  }
class C{  public String createAMTemplate(SSOToken token,String entryDN,int objectType,String serviceName,Map attributes,int priority) throws AMException {  COSManager cm=null;  DirectCOSDefinition dCOS=null;  String roleDN=null;  try {    PersistentObject po=UMSObject.getObjectHandle(token,new Guid(entryDN));switch (objectType) {case AMObject.ROLE:case AMObject.FILTERED_ROLE:      roleDN=entryDN;    cm=COSManager.getCOSManager(token,po.getParentGuid());  dCOS=(DirectCOSDefinition)cm.getDefinition(serviceName);break;case AMObject.ORGANIZATION:case AMObject.ORGANIZATIONAL_UNIT:case AMObject.PEOPLE_CONTAINER:roleDN="cn=" + CONTAINER_DEFAULT_TEMPLATE_ROLE + ","+ entryDN;cm=COSManager.getCOSManager(token,po.getGuid());dCOS=(DirectCOSDefinition)cm.getDefinition(serviceName);break;default :throw new AMException(token,"450");}AttrSet attrSet=CommonUtils.mapToAttrSet(attributes);if (priority != AMTemplate.UNDEFINED_PRIORITY) {Attr attr=new Attr("cospriority");attr.addValue("" + priority);attrSet.add(attr);}COSTemplate template=createCOSTemplate(serviceName,attrSet,roleDN);dCOS.addCOSTemplate(template);return template.getGuid().toString();} catch (COSNotFoundException e) {if (debug.messageEnabled()) {debug.message("DirectoryServicesImpl.createAMTemplate() " + "COSDefinition for service: " + serviceName + " not found: ",e);}Object[] args={serviceName};String locale=CommonUtils.getUserLocale(token);throw new AMException(AMSDKBundle.getString("459",locale),"459",args);}catch (EntryAlreadyExistsException e) {if (debug.messageEnabled()) {debug.message("DirectoryServicesImpl.createAMTemplate: template " + "already exists for " + serviceName,e);}String params[]={serviceName};String locale=CommonUtils.getUserLocale(token);throw new AMException(AMSDKBundle.getString("854",params,locale),"854",params);}catch (AccessRightsException e) {if (debug.warningEnabled()) {debug.warning("DirectoryServicesImpl.createAMTemplate() " + "Insufficient access rights to create template for: " + serviceName + " & entryDN: "+ entryDN,e);}throw new AMException(token,"460");}catch (UMSException e) {if (debug.warningEnabled()) {debug.warning("DirectoryServicesImpl.createAMTemplate() Unable" + " to create AMTemplate for: " + serviceName + " & entryDN: "+ entryDN,e);}Object[] args={serviceName};String locale=CommonUtils.getUserLocale(token);throw new AMException(AMSDKBundle.getString("459",locale),"459",args,e);}catch (Exception e) {if (debug.warningEnabled()) debug.warning("DirectoryServicesImpl.createAMTemplate",e);throw new AMException(token,"451");}}  }
class C{  private boolean isFirstElemHTML(){  boolean isHTML;  isHTML=getLocalNameUnknown(m_firstElementName).equalsIgnoreCase("html");  if (isHTML && m_firstElementURI != null && !EMPTYSTRING.equals(m_firstElementURI)) {    isHTML=false;  }  if (isHTML && m_namespacePrefix != null) {    final int max=m_namespacePrefix.size();    for (int i=0; i < max; i++) {      final String prefix=(String)m_namespacePrefix.elementAt(i);      final String uri=(String)m_namespaceURI.elementAt(i);      if (m_firstElementPrefix != null && m_firstElementPrefix.equals(prefix) && !EMPTYSTRING.equals(uri)) {        isHTML=false;        break;      }    }  }  return isHTML;}  }
class C{  public void removeAttributeValues(String attrName,Set values) throws SMSException, SSOException {  validateServiceConfigImpl();  SMSEntry e=sc.getSMSEntry();  SMSUtils.removeAttributeValues(e,attrName,values,ss.getSearchableAttributeNames());  saveSMSEntry(e);}  }
class C{  private void emitUnboxing(Wrapper wrapper){  String owner="java/lang/" + wrapper.wrapperType().getSimpleName();  String name=wrapper.primitiveSimpleName() + "Value";  String desc="()" + wrapper.basicTypeChar();  emitReferenceCast(wrapper.wrapperType(),null);  mv.visitMethodInsn(Opcodes.INVOKEVIRTUAL,owner,name,desc,false);}  }
class C{  public boolean willThrowExceptionIfKeyWasNotFound(){  return throwex;}  }
class C{  public final int indexOf(int elem,int index){  for (int i=index; i < m_firstFree; i++) {    if (m_map[i] == elem)     return i;  }  return java.lang.Integer.MIN_VALUE;}  }
class C{  private void updateServerGroup(String groupID,Map<ServerGroupProperty,Object> serverGroupProperties) throws ADSContextException {  String dn="cn=" + Rdn.escapeValue(groupID) + ","+ getServerGroupContainerDN();  try {    if (serverGroupProperties.containsKey(ServerGroupProperty.UID)) {      String newGroupId=serverGroupProperties.get(ServerGroupProperty.UID).toString();      if (!newGroupId.equals(groupID)) {        String newDN=("cn=" + Rdn.escapeValue(newGroupId) + ","+ getServerGroupContainerDN());        throwIfNotSuccess(connectionWrapper.getConnection().modifyDN(dn,newDN));        dn=newDN;      }      serverGroupProperties.remove(ServerGroupProperty.UID);    }    if (serverGroupProperties.isEmpty()) {      return;    }    ModifyRequest request=newModifyRequest(dn);    for (    ServerGroupProperty prop : serverGroupProperties.keySet()) {      request.addModification(new Modification(REPLACE,makeAttrFromServerGroupProperty(prop,serverGroupProperties.get(prop))));    }    throwIfNotSuccess(connectionWrapper.getConnection().modify(request));  } catch (  EntryNotFoundException x) {    throw new ADSContextException(ErrorType.NOT_YET_REGISTERED);  }catch (  LdapException x) {    if (x.getResult().getResultCode().equals(ResultCode.ENTRY_ALREADY_EXISTS)) {      throw new ADSContextException(ErrorType.ALREADY_REGISTERED);    }    throw new ADSContextException(ErrorType.ERROR_UNEXPECTED,x);  }}  }
class C{  public RxGalleryFinal cropHideBottomControls(boolean hide){  configuration.setHideBottomControls(hide);  return this;}  }
class C{  public static byte[] decodeHex(char[] data) throws DecoderException {  int len=data.length;  if ((len & 0x01) != 0) {    throw new DecoderException("Odd number of characters.");  }  byte[] out=new byte[len >> 1];  for (int i=0, j=0; j < len; i++) {    int f=toDigit(data[j],j) << 4;    j++;    f=f | toDigit(data[j],j);    j++;    out[i]=(byte)(f & 0xFF);  }  return out;}  }
class C{  protected int _dataOrQName(int identity){  if (identity < m_size)   return m_dataOrQName.elementAt(identity);  while (true) {    boolean isMore=nextNode();    if (!isMore)     return NULL; else     if (identity < m_size)     return m_dataOrQName.elementAt(identity);  }}  }
class C{  public int length(){  return count;}  }
class C{  public FileUploaderViewBean(){  super("FileUploader");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);  createPageTitleModel();  registerChildren();}  }
class C{  public static void removeByUuid(java.lang.String uuid){  getPersistence().removeByUuid(uuid);}  }
class C{  private void buildMobileVisionBarcodeDetector(){  String focusMode=Camera.Parameters.FOCUS_MODE_FIXED;  if (mAutoFocusEnabled) {    focusMode=Camera.Parameters.FOCUS_MODE_CONTINUOUS_PICTURE;  }  mBarcodeDetector=new BarcodeDetector.Builder(mActivity).setBarcodeFormats(mBarcodeFormats).build();  mCameraSource=new CameraSource.Builder(mActivity,mBarcodeDetector).setFacing(mFacing).setFlashMode(mFlashEnabledByDefault ? Camera.Parameters.FLASH_MODE_TORCH : null).setFocusMode(focusMode).build();}  }
class C{  public ECPResponseImpl(String xmlString) throws SAML2Exception {  Document xmlDocument=XMLUtils.toDOMDocument(xmlString,SAML2SDKUtils.debug);  if (xmlDocument == null) {    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("errorObtainingElement"));  }  parseElement(xmlDocument.getDocumentElement());}  }
class C{  public void loading(){  mHintView.setVisibility(View.GONE);  mProgressBar.setVisibility(View.VISIBLE);}  }
class C{  public String addExtension(String testFileName){  return testFileName + ".svg";}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.AuthnAuthorityDescriptorElement createAuthnAuthorityDescriptorElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.AuthnAuthorityDescriptorElementImpl();}  }
class C{  public PlaPointInt round_to_the_left(PlaDirection p_dir){  PlaPointFloat dir=p_dir.to_float();  double rounded_x;  if (dir.v_y > 0) {    rounded_x=Math.floor(v_x);  } else   if (dir.v_y < 0) {    rounded_x=Math.ceil(v_x);  } else {    rounded_x=Math.round(v_x);  }  double rounded_y;  if (dir.v_x > 0) {    rounded_y=Math.ceil(v_y);  } else   if (dir.v_x < 0) {    rounded_y=Math.floor(v_y);  } else {    rounded_y=Math.round(v_y);  }  return new PlaPointInt(rounded_x,rounded_y);}  }
class C{  public void removeMAddr(){  if (uriParms != null)   uriParms.delete(MADDR);}  }
class C{  public static void readFully(Input in,long position,byte[] buffer,int offset,int length) throws IOException {  int nread=0;  while (nread < length) {    int nbytes=in.read(position + nread,buffer,offset + nread,length - nread);    if (nbytes < 0) {      throw new IOException("End of stream reached before reading fully.");    }    nread+=nbytes;  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  String strong;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("code");  testEmployee=elementList.item(1);  strong=testEmployee.getNodeName();  assertEqualsAutoCase("element","nodename","code",strong);  strong=((Element)testEmployee).getTagName();  assertEqualsAutoCase("element","tagname","code",strong);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.SubjectConfirmationDataElement createSubjectConfirmationDataElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.SubjectConfirmationDataElementImpl();}  }
class C{  public static void storeProperties(Properties props){  String classMethod="UpgradeUtils:storeProperties : ";  String fileName=basedir + File.separator + DIR_UPGRADE+ File.separator+ DIR_CONFIG+ File.separator+ BACKUP_AMCONFIG;  try {    props.store(new FileOutputStream(fileName),null);    propertyFileMap.put(fileName,props);  } catch (  IOException e) {    debug.error(classMethod + "Error writing to AMConfig.properties.bak file " + fileName);  }}  }
class C{  protected Object readResolve() throws ObjectStreamException {  try {    if (type == Type.SECRET && RAW.equals(format)) {      return new SecretKeySpec(encoded,algorithm);    } else     if (type == Type.PUBLIC && X509.equals(format)) {      KeyFactory f=KeyFactory.getInstance(algorithm);      return f.generatePublic(new X509EncodedKeySpec(encoded));    } else     if (type == Type.PRIVATE && PKCS8.equals(format)) {      KeyFactory f=KeyFactory.getInstance(algorithm);      return f.generatePrivate(new PKCS8EncodedKeySpec(encoded));    } else {      throw new NotSerializableException("unrecognized type/format combination: " + type + "/"+ format);    }  } catch (  NotSerializableException nse) {    throw nse;  }catch (  Exception e) {    NotSerializableException nse=new NotSerializableException("java.security.Key: " + "[" + type + "] "+ "["+ algorithm+ "] "+ "["+ format+ "]");    nse.initCause(e);    throw nse;  }}  }
class C{  public SimpleCountingIdlingResource(String resourceName){  mResourceName=checkNotNull(resourceName);}  }
class C{  public boolean isIconifiable(){  return iconable;}  }
class C{  public AttributeFilter includeAttribute(final AttributeDescription attributeDescription){  allocatedRequestedAttributes();  requestedAttributes.put(attributeDescription,attributeDescription);  return this;}  }
class C{  public void processed(String sourceId,String targetId,boolean linkExisted,String linkId,boolean linkCreated,Situation situation,ReconAction action){  String id;  if (phase == Phase.SOURCE) {    id=sourceId;  } else {    id=targetId;  }  parentStat.processed(sourceId,targetId,linkExisted,linkId,linkCreated,situation,action);  if (id != null) {    processedEntries.incrementAndGet();    if (situation != null) {      List<String> situationIds=ids.get(situation);      if (situationIds != null) {        situationIds.add(id);      }    }  }}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws org.xml.sax.SAXException {  if (m_savedLastOrder == null)   m_savedLastOrder=new IntStack();  m_savedLastOrder.push(getElemDef().getLastOrder());  getElemDef().setLastOrder(-1);}  }
class C{  public RequirementsBuilder addProperty(String name,String description){  addProperty(name,"string",description);  return this;}  }
class C{  @Overridden boolean equalsCommon(CraftMetaItem that){  return ((this.hasDisplayName() ? that.hasDisplayName() && this.displayName.equals(that.displayName) : !that.hasDisplayName())) && (this.hasEnchants() ? that.hasEnchants() && this.enchantments.equals(that.enchantments) : !that.hasEnchants()) && (this.hasLore() ? that.hasLore() && this.lore.equals(that.lore) : !that.hasLore())&& (this.hasRepairCost() ? that.hasRepairCost() && this.repairCost == that.repairCost : !that.hasRepairCost())&& (this.unhandledTags.equals(that.unhandledTags))&& (this.hideFlag == that.hideFlag);}  }
class C{  @Override public void uncaughtException(Thread t,Throwable e){  if (e instanceof ThreadDeath) {    return;  }  logger.traceException(e);  LocalizableMessage message=ERR_UNCAUGHT_THREAD_EXCEPTION.get(t.getName(),stackTraceToSingleLineString(e));  logger.error(message);  DirectoryServer.sendAlertNotification(this,ALERT_TYPE_UNCAUGHT_EXCEPTION,message);}  }
class C{  public boolean isRequestedSessionIdValid(){  return this._getHttpServletRequest() != null && this._getHttpServletRequest().isRequestedSessionIdValid();}  }
class C{  public ImageIcon(){}  }
class C{  public static void forceDeleteOnExit(File file) throws IOException {  if (file.isDirectory()) {    deleteDirectoryOnExit(file);  } else {    file.deleteOnExit();  }}  }
class C{  public Shape modelToView(int pos,Shape a,Position.Bias b) throws BadLocationException {  Container c=getContainer();  if (c instanceof JPasswordField) {    JPasswordField f=(JPasswordField)c;    if (!f.echoCharIsSet()) {      return super.modelToView(pos,a,b);    }    char echoChar=f.getEchoChar();    FontMetrics m=f.getFontMetrics(f.getFont());    Rectangle alloc=adjustAllocation(a).getBounds();    int dx=(pos - getStartOffset()) * m.charWidth(echoChar);    alloc.x+=dx;    alloc.width=1;    return alloc;  }  return null;}  }
class C{  @SuppressWarnings("unchecked") public void writeByte(byte x) throws SQLException {  attribs.add(Byte.valueOf(x));}  }
class C{  private String convertIntToIntString(int quoteParam){  String quoteParamString=(new Integer(quoteParam)).toString();  return quoteParamString;}  }
class C{  public String createRandomBytes(int byteNum){  byte[] secretBytes=new byte[byteNum];  secureRandom.nextBytes(secretBytes);  return Base64.encode(secretBytes);}  }
class C{  protected void concatenate(GenericObjectList objList,boolean topFlag){  if (!topFlag) {    this.addAll(objList);  } else {    this.addAll(0,objList);  }}  }
class C{  public static void decodeToFile(String dataToDecode,String filename) throws java.io.IOException {  B64OutputStream bos=null;  try {    bos=new B64OutputStream(new java.io.FileOutputStream(filename),Base64.DECODE);    bos.write(dataToDecode.getBytes(PREFERRED_ENCODING));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiProgressBarUI();  return MultiLookAndFeel.createUIs(mui,((MultiProgressBarUI)mui).uis,a);}  }
class C{  protected DialogTypeSelection(int value){  super(value);}  }
class C{  public static void moveDirectoryToDirectory(File src,File destDir,boolean createDestDir) throws IOException {  if (src == null) {    throw new NullPointerException("Source must not be null");  }  if (destDir == null) {    throw new NullPointerException("Destination directory must not be null");  }  if (!destDir.exists() && createDestDir) {    destDir.mkdirs();  }  if (!destDir.exists()) {    throw new FileNotFoundException("Destination directory '" + destDir + "' does not exist [createDestDir="+ createDestDir+ "]");  }  if (!destDir.isDirectory()) {    throw new IOException("Destination '" + destDir + "' is not a directory");  }  moveDirectory(src,new File(destDir,src.getName()));}  }
class C{  public boolean shouldImportRequestObjectParamElementType(Field field){  return true;}  }
class C{  public JMenuItem insert(JMenuItem mi,int pos){  if (pos < 0) {    throw new IllegalArgumentException("index less than zero.");  }  ensurePopupMenuCreated();  popupMenu.insert(mi,pos);  return mi;}  }
class C{  public void writeProperty(String namespace,String name,String value){  writeElement(namespace,name,OPENING);  buffer.append(value);  writeElement(namespace,name,CLOSING);}  }
class C{  public void paintComponent(Graphics g){  if (getFrame() != null) {    setState(getFrame().getExtendedState());  }  JRootPane rootPane=getRootPane();  Window window=getWindow();  boolean leftToRight=(window == null) ? rootPane.getComponentOrientation().isLeftToRight() : window.getComponentOrientation().isLeftToRight();  boolean isSelected=(window == null) ? true : window.isActive();  int width=getWidth();  int height=getHeight();  Color background;  Color foreground;  Color darkShadow;  MetalBumps bumps;  if (isSelected) {    background=activeBackground;    foreground=activeForeground;    darkShadow=activeShadow;    bumps=activeBumps;  } else {    background=inactiveBackground;    foreground=inactiveForeground;    darkShadow=inactiveShadow;    bumps=inactiveBumps;  }  g.setColor(background);  g.fillRect(0,0,width,height);  g.setColor(darkShadow);  g.drawLine(0,height - 1,width,height - 1);  g.drawLine(0,0,0,0);  g.drawLine(width - 1,0,width - 1,0);  int xOffset=leftToRight ? 5 : width - 5;  if (getWindowDecorationStyle() == JRootPane.FRAME) {    xOffset+=leftToRight ? IMAGE_WIDTH + 5 : -IMAGE_WIDTH - 5;  }  String theTitle=getTitle();  if (theTitle != null) {    FontMetrics fm=SwingUtilities2.getFontMetrics(rootPane,g);    g.setColor(foreground);    int yOffset=((height - fm.getHeight()) / 2) + fm.getAscent();    Rectangle rect=new Rectangle(0,0,0,0);    if (iconifyButton != null && iconifyButton.getParent() != null) {      rect=iconifyButton.getBounds();    }    int titleW;    if (leftToRight) {      if (rect.x == 0) {        rect.x=window.getWidth() - window.getInsets().right - 2;      }      titleW=rect.x - xOffset - 4;      theTitle=SwingUtilities2.clipStringIfNecessary(rootPane,fm,theTitle,titleW);    } else {      titleW=xOffset - rect.x - rect.width- 4;      theTitle=SwingUtilities2.clipStringIfNecessary(rootPane,fm,theTitle,titleW);      xOffset-=SwingUtilities2.stringWidth(rootPane,fm,theTitle);    }    int titleLength=SwingUtilities2.stringWidth(rootPane,fm,theTitle);    SwingUtilities2.drawString(rootPane,g,theTitle,xOffset,yOffset);    xOffset+=leftToRight ? titleLength + 5 : -5;  }  int bumpXOffset;  int bumpLength;  if (leftToRight) {    bumpLength=width - buttonsWidth - xOffset- 5;    bumpXOffset=xOffset;  } else {    bumpLength=xOffset - buttonsWidth - 5;    bumpXOffset=buttonsWidth + 5;  }  int bumpYOffset=3;  int bumpHeight=getHeight() - (2 * bumpYOffset);  bumps.setBumpArea(bumpLength,bumpHeight);  bumps.paintIcon(this,g,bumpXOffset,bumpYOffset);}  }
class C{  private void changeRecordingMode(boolean recordingMode){  Log.d(TAG,"changeRecordingMode: " + recordingMode);  if (mIsInRecordingMode == recordingMode) {    Log.e(TAG,"FM already " + (recordingMode ? "in" : "NOT in") + "recording mode!");    return;  }  mIsInRecordingMode=recordingMode;  mService.setRecordingModeAsync(recordingMode);  switchRecordLayout(recordingMode);}  }
class C{  public WoodenStep(final TreeSpecies species,boolean inv){  super(DEFAULT_TYPE,species);  setInverted(inv);}  }
class C{  public boolean omitEnd(){  return oEnd;}  }
class C{  public String toString(){  String text="";switch (m_dialogState) {case _EARLY:    text="Early Dialog";  break;case _CONFIRMED:text="Confirmed Dialog";break;case _COMPLETED:text="Completed Dialog";break;case _TERMINATED:text="Terminated Dialog";break;default :text="Error while printing Dialog State";break;}return text;}  }
class C{  private void resolveRelativeTimestamps(){  final List<EventTimingCode> codes=(List<EventTimingCode>)getObjectValue(DataTypes.OBJ_TIMED_EVENT_LIST);  long lastTimestamp=0;  for (  final EventTimingCode code : codes) {    final long translatedTimestamp=code.getTimestamp() == 0 ? lastTimestamp : code.getTimestamp();    code.setTimestamp(translatedTimestamp);    lastTimestamp=translatedTimestamp;  }}  }
class C{  public boolean hasDetails(String sku){  return mSkuMap.containsKey(sku);}  }
class C{  public ReaperRun(final long startTime,final long runTime,final long numberOfDeletedSessions){  this.startTime=startTime;  this.runTime=runTime;  this.numberOfDeletedSessions=numberOfDeletedSessions;}  }
class C{  public void identityRenamed(String universalId){  if (DelegationManager.debug.messageEnabled()) {    DelegationManager.debug.message("DelegationPolicyImpl: renamed universalId=" + universalId);  }  cleanupCache();}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder(120);  sb.append("ResourceName:").append(resourceName).append(";");  sb.append("PolicyNames:").append(policyNames.toString());  return sb.toString();}  }
class C{  protected void modifyFlags(){  String str=getIdentifier();  if (ID3v24Frames.getInstanceOf().isDiscardIfFileAltered(str)) {    writeFlags|=(byte)MASK_FILE_ALTER_PRESERVATION;    writeFlags&=(byte)~MASK_TAG_ALTER_PRESERVATION;  } else {    writeFlags&=(byte)~MASK_FILE_ALTER_PRESERVATION;    writeFlags&=(byte)~MASK_TAG_ALTER_PRESERVATION;  }}  }
class C{  public void removeEntries(int start,int length){  int sizes[]=getSizes();  int end=start + length;  int n=a.length - length;  a=new int[n];  for (int i=0; i < start; i++) {    a[i]=sizes[i];  }  for (int i=start; i < n; i++) {    a[i]=sizes[i + length];  }  setSizes(a);}  }
class C{  @Override public List<Foo> findByUuid(String uuid){  return findByUuid(uuid,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null);}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.EvidenceType createEvidenceType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.EvidenceTypeImpl();}  }
class C{  public PendingInstallShortcutInfo(Intent data,Context context){  this.data=data;  mContext=context;  launchIntent=data.getParcelableExtra(Intent.EXTRA_SHORTCUT_INTENT);  label=data.getStringExtra(Intent.EXTRA_SHORTCUT_NAME);  user=UserHandleCompat.myUserHandle();  activityInfo=null;}  }
class C{  private void ensureOpen() throws IOException {  if (buf == null)   throw new IOException("Stream closed");}  }
class C{  public static Set<String> splitHost(RelaxedURL url){  Set<String> results=new HashSet<String>();  String host=url.getHostname().toLowerCase();  results.add("://");  results.add("://" + host);  int idx=host.indexOf('.');  while (idx != -1) {    results.add("://" + host.substring(idx));    idx=host.indexOf('.',idx + 1);  }  return results;}  }
class C{  private static final <T,E extends MapElement<T>>E exactFindIgnoreCase(E[] map,CharChunk name){  int pos=findIgnoreCase(map,name);  if (pos >= 0) {    E result=map[pos];    if (name.equalsIgnoreCase(result.name)) {      return result;    }  }  return null;}  }
class C{  public void selectAllAccessibleSelection(){  TreeModel model=JTree.this.getModel();  if (model != null) {    int childCount=getAccessibleChildrenCount();    TreePath path;    for (int i=0; i < childCount; i++) {      path=getChildTreePath(i);      JTree.this.addSelectionPath(path);    }  }}  }
class C{  public SpinnerListModel(Object[] values){  if (values == null || values.length == 0) {    throw new IllegalArgumentException("SpinnerListModel(Object[]) expects non-null non-empty Object[]");  }  this.list=Arrays.asList(values);  this.index=0;}  }
class C{  public void validate(ConnectionConfig config) throws InvalidConfigurationException {  if (config.getLDAPURLs() == null || config.getLDAPURLs().isEmpty()) {    throw new InvalidConfigurationException("Invalid host URL.");  }  for (  LDAPURL url : config.getLDAPURLs()) {    if (url.getPort() < 0 || url.getPort() > 65535) {      throw new InvalidConfigurationException("Port outside of valid range.");    }  }  if (config.getBindDN() == null) {    throw new InvalidConfigurationException("Bind DN missing");  }  if (config.getBindPassword() == null) {    throw new InvalidConfigurationException("Bind Password missing");  }  if (config.getMaxConnections() < 0) {    throw new InvalidConfigurationException("Invalid maximum connections");  }}  }
class C{  public final void pressReturnToContinue(){  try {    readLineOfInput(INFO_MENU_PROMPT_RETURN_TO_CONTINUE.get());  } catch (  final ClientException e) {  }}  }
class C{  public static CMSSignedData replaceSigners(CMSSignedData signedData,SignerInformationStore signerInformationStore){  CMSSignedData cms=new CMSSignedData(signedData);  cms.signerInfoStore=signerInformationStore;  ASN1EncodableVector digestAlgs=new ASN1EncodableVector();  ASN1EncodableVector vec=new ASN1EncodableVector();  Iterator it=signerInformationStore.getSigners().iterator();  while (it.hasNext()) {    SignerInformation signer=(SignerInformation)it.next();    digestAlgs.add(CMSSignedHelper.INSTANCE.fixAlgID(signer.getDigestAlgorithmID()));    vec.add(signer.toASN1Structure());  }  ASN1Set digests=new DERSet(digestAlgs);  ASN1Set signers=new DERSet(vec);  ASN1Sequence sD=(ASN1Sequence)signedData.signedData.toASN1Primitive();  vec=new ASN1EncodableVector();  vec.add(sD.getObjectAt(0));  vec.add(digests);  for (int i=2; i != sD.size() - 1; i++) {    vec.add(sD.getObjectAt(i));  }  vec.add(signers);  cms.signedData=SignedData.getInstance(new BERSequence(vec));  cms.contentInfo=new ContentInfo(cms.contentInfo.getContentType(),cms.signedData);  return cms;}  }
class C{  static Constant readConstant(final DataInput input) throws IOException, ClassFormatException {  final byte b=input.readByte();  int skipSize;switch (b) {case Const.CONSTANT_Class:    return new ConstantClass(input);case Const.CONSTANT_Integer:  return new ConstantInteger(input);case Const.CONSTANT_Float:return new ConstantFloat(input);case Const.CONSTANT_Long:return new ConstantLong(input);case Const.CONSTANT_Double:return new ConstantDouble(input);case Const.CONSTANT_Utf8:return ConstantUtf8.getInstance(input);case Const.CONSTANT_String:case Const.CONSTANT_MethodType:skipSize=2;break;case Const.CONSTANT_MethodHandle:skipSize=3;break;case Const.CONSTANT_Fieldref:case Const.CONSTANT_Methodref:case Const.CONSTANT_InterfaceMethodref:case Const.CONSTANT_NameAndType:case Const.CONSTANT_InvokeDynamic:skipSize=4;break;default :throw new ClassFormatException("Invalid byte tag in constant pool: " + b);}Utility.skipFully(input,skipSize);return null;}  }
class C{  public void paintScrollBarTrackBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBorder(context,g,x,y,w,h,orientation);}  }
class C{  public FrameBodyTPE2(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  void addToParent(Element headerE){  Document doc=headerE.getOwnerDocument();  Element usageDirectiveHeaderE=doc.createElementNS(SOAPBindingConstants.NS_SOAP_BINDING,SOAPBindingConstants.PTAG_USAGE_DIRECTIVE);  headerE.appendChild(usageDirectiveHeaderE);  usageDirectiveHeaderE.setAttributeNS(null,SOAPBindingConstants.ATTR_REF,ref);  if (id != null) {    usageDirectiveHeaderE.setAttributeNS(null,SOAPBindingConstants.ATTR_id,id);  }  if (mustUnderstand != null) {    usageDirectiveHeaderE.setAttributeNS(SOAPBindingConstants.NS_SOAP,SOAPBindingConstants.PATTR_MUSTUNDERSTAND,Utils.BooleanToString(mustUnderstand));  }  if (actor != null) {    usageDirectiveHeaderE.setAttributeNS(SOAPBindingConstants.NS_SOAP,SOAPBindingConstants.PATTR_ACTOR,actor);  }  if (elements != null && !elements.isEmpty()) {    Iterator iter=elements.iterator();    while (iter.hasNext()) {      Element childE=(Element)iter.next();      usageDirectiveHeaderE.appendChild(doc.importNode(childE,true));    }  }}  }
class C{  public SIPResponse createResponse(int statusCode){  String reasonPhrase=SIPResponse.getReasonPhrase(statusCode);  return this.createResponse(statusCode,reasonPhrase);}  }
class C{  public void deleteField(FieldKey genericKey){switch (genericKey) {case ARTIST:    setArtist("");  break;case ALBUM:setAlbum("");break;case TITLE:setTitle("");break;case GENRE:setGenre("");break;case YEAR:setYear("");break;case COMMENT:setComment("");break;}}  }
class C{  public void update(byte[] input,int inOff,int length){  digest.update(input,inOff,length);}  }
class C{  public static void logSearchResultReference(SearchOperation searchOperation,SearchResultReference searchReference){  for (  AccessLogPublisher<?> publisher : getAccessLogPublishers()) {    publisher.logSearchResultReference(searchOperation,searchReference);  }}  }
class C{  public PdfFormXObject copyAsFormXObject(PdfDocument toDocument) throws IOException {  PdfFormXObject xObject=new PdfFormXObject(getCropBox());  List<PdfName> excludedKeys=new ArrayList<>(Arrays.asList(PdfName.MediaBox,PdfName.CropBox,PdfName.Contents));  excludedKeys.addAll(this.excludedKeys);  PdfDictionary dictionary=getPdfObject().copyTo(toDocument,excludedKeys,true);  xObject.getPdfObject().getOutputStream().write(getContentBytes());  xObject.getPdfObject().mergeDifferent(dictionary);  if (!xObject.getPdfObject().containsKey(PdfName.Resources)) {    PdfObject copyResource=getResources().getPdfObject().copyTo(toDocument,true);    xObject.getPdfObject().put(PdfName.Resources,copyResource);  }  return xObject;}  }
class C{  public void invalidateSizes(){  visibleNodesChanged();}  }
class C{  @SuppressWarnings("unused") public void draw(Canvas canvas){  if (!this.mVisible || this.mPath == null)   return;  if (this.mColors != null && this.mColors.length == 1) {    this.mPaint.setColor(this.mColors[0]);  }  this.onDraw(canvas);}  }
class C{  public void addItem(String key,PdfNumber n){  PdfCollectionField field=schema.getField(key);  if (field.subType == PdfCollectionField.NUMBER) {    getPdfObject().put(new PdfName(key),n);  }}  }
class C{  @RequestMapping(value="/hello",method=RequestMethod.GET,produces=MediaTypes.TEXT_PLAIN_UTF_8) public String hello(String name){  return "Hello," + name + "!";}  }
class C{  private void updateRegion(){  Insets i=autoScroll.getAutoscrollInsets();  Dimension size=component.getSize();  if (size.width != outer.width || size.height != outer.height)   outer.reshape(0,0,size.width,size.height);  if (inner.x != i.left || inner.y != i.top)   inner.setLocation(i.left,i.top);  int newWidth=size.width - (i.left + i.right);  int newHeight=size.height - (i.top + i.bottom);  if (newWidth != inner.width || newHeight != inner.height)   inner.setSize(newWidth,newHeight);}  }
class C{  public NonReadableChannelException(){}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return m_arg0.execute(xctxt).bool() ? XBoolean.S_FALSE : XBoolean.S_TRUE;}  }
class C{  public void testField(){  checkKey mk=new checkKey();  assertEquals("Incorrect serialVersionUID",mk.getSerVerUID(),6603384152749567654L);}  }
class C{  public Object next_token() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    int zzAttributes=zzAttrL[zzState];    if ((zzAttributes & 1) == 1) {      zzAction=zzState;    }    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL) {          zzInput=Character.codePointAt(zzBufferL,zzCurrentPosL,zzEndReadL);          zzCurrentPosL+=Character.charCount(zzInput);        } else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=Character.codePointAt(zzBufferL,zzCurrentPosL,zzEndReadL);            zzCurrentPosL+=Character.charCount(zzInput);          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {      zzAtEOF=true;      return null;    } else {switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 1:{          throw new Error("Illegal character <" + yytext() + ">");        }case 86:      break;case 2:{    }case 87:  break;case 3:{  return yytext();}case 88:break;case 4:{return new Integer(yytext());}case 89:break;case 5:{return GuiConfigKeyword.OPEN_BRACKET;}case 90:break;case 6:{return GuiConfigKeyword.CLOSED_BRACKET;}case 91:break;case 7:{return new Double(yytext());}case 92:break;case 8:{return GuiConfigKeyword.ON;}case 93:break;case 9:{return GuiConfigKeyword.OFF;}case 94:break;case 10:{return GuiConfigKeyword.VIAS;}case 95:break;case 11:{return GuiConfigKeyword.NONE;}case 96:break;case 12:{return GuiConfigKeyword.PINS;}case 97:break;case 13:{return GuiConfigKeyword.FIXED;}case 98:break;case 14:{return GuiConfigKeyword.BOUNDS;}case 99:break;case 15:{return GuiConfigKeyword.TRACES;}case 100:break;case 16:{return GuiConfigKeyword.COLORS;}case 101:break;case 17:{return GuiConfigKeyword.VISIBLE;}case 102:break;case 18:{return GuiConfigKeyword.UNFIXED;}case 103:break;case 19:{return GuiConfigKeyword.OUTLINE;}case 104:break;case 20:{return GuiConfigKeyword.DYNAMIC;}case 105:break;case 21:{return GuiConfigKeyword.KEEPOUT;}case 106:break;case 22:{return GuiConfigKeyword.HILIGHT;}case 107:break;case 23:{return GuiConfigKeyword.WINDOWS;}case 108:break;case 24:{return GuiConfigKeyword.NET_INFO;}case 109:break;case 25:{return GuiConfigKeyword.EDIT_VIAS;}case 110:break;case 26:{return GuiConfigKeyword.VIA_RULES;}case 111:break;case 27:{return GuiConfigKeyword.SNAPSHOTS;}case 112:break;case 28:{return GuiConfigKeyword.STITCHING;}case 113:break;case 29:{return GuiConfigKeyword.PARAMETER;}case 114:break;case 30:{return GuiConfigKeyword.VIOLATIONS;}case 115:break;case 31:{return GuiConfigKeyword.BACKGROUND;}case 116:break;case 32:{return GuiConfigKeyword.ROUTE_MODE;}case 117:break;case 33:{return GuiConfigKeyword.CONDUCTION;}case 118:break;case 34:{return GuiConfigKeyword.FIXED_VIAS;}case 119:break;case 35:{return GuiConfigKeyword.ALL_VISIBLE;}case 120:break;case 36:{return GuiConfigKeyword.VIA_KEEPOUT;}case 121:break;case 37:{return GuiConfigKeyword.INCOMPLETES;}case 122:break;case 38:{return GuiConfigKeyword.BOARD_FRAME;}case 123:break;case 39:{return GuiConfigKeyword.NOT_VISIBLE;}case 124:break;case 40:{return GuiConfigKeyword.GUI_DEFAULTS;}case 125:break;case 41:{return GuiConfigKeyword.MANUAL_RULES;}case 126:break;case 42:{return GuiConfigKeyword.CURRENT_ONLY;}case 127:break;case 43:{return GuiConfigKeyword.FIXED_TRACES;}case 128:break;case 44:{return GuiConfigKeyword.PACKAGE_INFO;}case 129:break;case 45:{return GuiConfigKeyword.SHOVE_ENABLED;}case 130:break;case 46:{return GuiConfigKeyword.NINETY_DEGREE;}case 131:break;case 47:{return GuiConfigKeyword.ROUTE_DETAILS;}case 132:break;case 48:{return GuiConfigKeyword.OBJECT_COLORS;}case 133:break;case 49:{return GuiConfigKeyword.CURRENT_LAYER;}case 134:break;case 50:{return GuiConfigKeyword.COLOR_MANAGER;}case 135:break;case 51:{return GuiConfigKeyword.PADSTACK_INFO;}case 136:break;case 52:{return GuiConfigKeyword.EDIT_NET_RULES;}case 137:break;case 53:{return GuiConfigKeyword.RULE_SELECTION;}case 138:break;case 54:{return GuiConfigKeyword.MOVE_PARAMETER;}case 139:break;case 55:{return GuiConfigKeyword.COMPONENT_INFO;}case 140:break;case 56:{return GuiConfigKeyword.COMPONENT_BACK;}case 141:break;case 57:{return GuiConfigKeyword.COMPONENT_GRID;}case 142:break;case 58:{return GuiConfigKeyword.DISPLAY_REGION;}case 143:break;case 59:{return GuiConfigKeyword.LENGTH_MATCHING;}case 144:break;case 60:{return GuiConfigKeyword.VIOLATIONS_INFO;}case 145:break;case 61:{return GuiConfigKeyword.ROUTE_PARAMETER;}case 146:break;case 62:{return GuiConfigKeyword.COMPONENT_FRONT;}case 147:break;case 63:{return GuiConfigKeyword.ASSIGN_NET_RULES;}case 148:break;case 64:{return GuiConfigKeyword.LAYER_VISIBILITY;}case 149:break;case 65:{return GuiConfigKeyword.INCOMPLETES_INFO;}case 150:break;case 66:{return GuiConfigKeyword.SELECT_PARAMETER;}case 151:break;case 67:{return GuiConfigKeyword.SELECTABLE_ITEMS;}case 152:break;case 68:{return GuiConfigKeyword.SELECTION_LAYERS;}case 153:break;case 69:{return GuiConfigKeyword.CLEARANCE_MATRIX;}case 154:break;case 70:{return GuiConfigKeyword.FORTYFIVE_DEGREE;}case 155:break;case 71:{return GuiConfigKeyword.INTERACTIVE_STATE;}case 156:break;case 72:{return GuiConfigKeyword.OBJECT_VISIBILITY;}case 157:break;case 73:{return GuiConfigKeyword.PULL_TIGHT_REGION;}case 158:break;case 74:{return GuiConfigKeyword.AUTOROUTE_PARAMETER;}case 159:break;case 75:{return GuiConfigKeyword.PULL_TIGHT_ACCURACY;}case 160:break;case 76:{return GuiConfigKeyword.MANUAL_RULE_SETTINGS;}case 161:break;case 77:{return GuiConfigKeyword.DISPLAY_MISCELLANIOUS;}case 162:break;case 78:{return GuiConfigKeyword.VIA_SNAP_TO_SMD_CENTER;}case 163:break;case 79:{return GuiConfigKeyword.CLEARANCE_COMPENSATION;}case 164:break;case 80:{return GuiConfigKeyword.PUSH_AND_SHOVE_ENABLED;}case 165:break;case 81:{return GuiConfigKeyword.AUTOMATIC_LAYER_DIMMING;}case 166:break;case 82:{return GuiConfigKeyword.IGNORE_CONDUCTION_AREAS;}case 167:break;case 83:{return GuiConfigKeyword.DRAG_COMPONENTS_ENABLED;}case 168:break;case 84:{return GuiConfigKeyword.HILIGHT_ROUTING_OBSTACLE;}case 169:break;case 85:{return GuiConfigKeyword.DESELECTED_SNAPSHOT_ATTRIBUTES;}case 170:break;default :zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public static Element convertJAXBToElement(Object jaxbObj) throws JAXBException {  Marshaller m=jc.createMarshaller();  try {    m.setProperty("com.sun.xml.bind.namespacePrefixMapper",new NamespacePrefixMapperImpl());  } catch (  PropertyException ex) {    debug.error("Utils.convertJAXBToElement",ex);  }  Document doc=null;  try {    doc=XMLUtils.newDocument();  } catch (  Exception ex) {    debug.error("Utils.convertJAXBToElement:",ex);  }  m.marshal(jaxbObj,doc);  return doc.getDocumentElement();}  }
class C{  public void endDocument() throws SAXException {}  }
class C{  public void stop(){  if (running) {    mSensorManager.unregisterListener(this);    mSensorThread.quit();    running=false;  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  NodeList elementList;  doc=(Document)load("staffNS",false);  element=doc.getDocumentElement();  elementList=element.getElementsByTagNameNS("http://www.altavista.com","*");  assertSize("elementgetelementsbytagnamens05",1,elementList);}  }
class C{  public void playStream(InputStream stream){  try {    byte[] data=convertStreamToByteArray(stream);    if (data.length > 28) {      sampleRate=readInt(data,24);    }    int headSize=44, metaDataSize=48;    int destPos=headSize + metaDataSize;    int rawLength=data.length - destPos;    byte[] d=new byte[rawLength];    System.arraycopy(data,destPos,d,0,rawLength);    initPlayer();    audioTrack.write(d,0,d.length);    stream.close();    if (audioTrack != null && audioTrack.getState() != AudioTrack.STATE_UNINITIALIZED) {      audioTrack.release();    }  } catch (  IOException e2) {    Log.e(TAG,e2.getMessage());  }}  }
class C{  private void loadClass(String name,WebappClassLoader cl) throws Exception {  try (InputStream is=cl.getResourceAsStream("org/apache/tomcat/unittest/" + name + ".class")){    byte[] classBytes=new byte[2048];    int offset=0;    int read=is.read(classBytes,offset,classBytes.length - offset);    while (read > -1) {      offset+=read;      if (offset == classBytes.length) {        byte[] tmp=new byte[classBytes.length * 2];        System.arraycopy(classBytes,0,tmp,0,classBytes.length);        classBytes=tmp;      }      read=is.read(classBytes,offset,classBytes.length - offset);    }    Class<?> lpClass=cl.doDefineClass("org.apache.tomcat.unittest." + name,classBytes,0,offset,cl.getClass().getProtectionDomain());    Object obj=lpClass.newInstance();    obj.toString();  } }  }
class C{  private void collectText(){  if (textNodeCount > 1) {    firstTextNode.setText(textBuffer.toString());  }  textNodeCount=0;}  }
class C{  public final void pushPair(int v1,int v2){  if (null == m_map) {    m_map=new int[m_blocksize];    m_mapSize=m_blocksize;  } else {    if ((m_firstFree + 2) >= m_mapSize) {      m_mapSize+=m_blocksize;      int newMap[]=new int[m_mapSize];      System.arraycopy(m_map,0,newMap,0,m_firstFree);      m_map=newMap;    }  }  m_map[m_firstFree]=v1;  m_map[m_firstFree + 1]=v2;  m_firstFree+=2;}  }
class C{  public boolean isAscending(){  return isAscending;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeappendchildchildexists.class,args);}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String idName=getStringOptionValue(ARGUMENT_ID_NAME);  String type=getStringOptionValue(ARGUMENT_ID_TYPE);  IdType idType=convert2IdType(type);  String memberIdName=getStringOptionValue(ARGUMENT_MEMBER_IDNAME);  String memberType=getStringOptionValue(ARGUMENT_MEMBER_IDTYPE);  IdType memberIdType=convert2IdType(memberType);  String[] params={realm,type,idName,memberIdName,memberType};  try {    AMIdentityRepository amir=new AMIdentityRepository(adminSSOToken,realm);    Set memberOfs=memberIdType.canBeMemberOf();    if (!memberOfs.contains(idType)) {      String[] args={type,memberType};      throw new CLIException(MessageFormat.format(getResourceString("idrepo-cannot-be-member"),(Object[])args),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_IDREPO_IS_MEMBER",params);    AMIdentity amid=new AMIdentity(adminSSOToken,idName,idType,realm,null);    AMIdentity memberAmid=new AMIdentity(adminSSOToken,memberIdName,memberIdType,realm,null);    String[] args={memberIdName,idName};    if (memberAmid.isMember(amid)) {      String msg=getResourceString("idrepo-ismembers-positive-result");      outputWriter.printlnMessage(MessageFormat.format(msg,(Object[])args));    } else {      String msg=getResourceString("idrepo-ismembers-negative-result");      outputWriter.printlnMessage(MessageFormat.format(msg,(Object[])args));    }    outputWriter.printlnMessage(MessageFormat.format(getResourceString("idrepo-get-ismember-succeed"),(Object[])params));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_IDREPO_IS_MEMBER",params);  } catch (  IdRepoException e) {    String[] args={realm,type,idName,memberIdName,memberType,e.getMessage()};    debugError("IsMember.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_IDREPO_IS_MEMBER",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={realm,type,idName,memberIdName,memberType,e.getMessage()};    debugError("IsMember.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_IDREPO_IS_MEMBER",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public void parse(InputSource input) throws IOException, SAXException {  setupXMLReader();  xmlReader.parse(input);}  }
class C{  @Override public void deleteITable(String tableName){  logger.info("Deleting iTable: " + tableName);  String stmt=String.format(TABLE_DELETE_CQL,tableName);  PreparedStatement createStmt=PreparedStatementFactory.getPreparedStatement(stmt,session);  BoundStatement bs=new BoundStatement(createStmt);  session.execute(bs);}  }
class C{  public Set createDynamicGroups(Map dynamicGroups) throws AMException, SSOException {  Iterator iter=dynamicGroups.keySet().iterator();  Set groups=new HashSet();  while (iter.hasNext()) {    String groupName=(String)iter.next();    String groupDN=AMNamingAttrManager.getNamingAttr(GROUP) + "=" + groupName+ ","+ super.entryDN;    Map attributes=(Map)dynamicGroups.get(groupName);    AMDynamicGroupImpl groupImpl=new AMDynamicGroupImpl(super.token,groupDN);    groupImpl.setAttributes(attributes);    groupImpl.create();    groups.add(groupImpl);  }  return groups;}  }
class C{  @Override public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  String realm=getStringOptionValue(IArgument.REALM_NAME);  String name=getStringOptionValue(PARAM_NAME);  String[] params={realm,name};  Set<SubjectImplementation> newSubjects=getSubjects(rc);  Subject userSubject=SubjectUtils.createSubject(getAdminSSOToken());  ApplicationPrivilegeManager apm=ApplicationPrivilegeManager.getInstance(realm,userSubject);  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_UPDATE_APPLICATION_PRIVILEGE",params);  try {    ApplicationPrivilege appPrivilege=apm.getPrivilege(name);    Set<SubjectImplementation> origSubjects=appPrivilege.getSubjects();    origSubjects.removeAll(newSubjects);    if (origSubjects.isEmpty()) {      throw new CLIException(getResourceString("remove-application-privilege-subjects-emptied-subjects"),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }    appPrivilege.setSubject(origSubjects);    apm.replacePrivilege(appPrivilege);    Object[] msgParam={name};    getOutputWriter().printlnMessage(MessageFormat.format(getResourceString("update-application-privilege-succeeded"),msgParam));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEEDED_UPDATE_APPLICATION_PRIVILEGE",params);  } catch (  EntitlementException ex) {    String[] paramExs={realm,name,ex.getMessage()};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"FAILED_UPDATE_APPLICATION_PRIVILEGE",paramExs);    throw new CLIException(ex,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public void removeStaticGroup(String groupDN) throws AMException, SSOException {  SSOTokenManager.getInstance().validateToken(super.token);  Set userDNs=new HashSet();  userDNs.add(super.entryDN);  dsServices.modifyMemberShip(super.token,userDNs,groupDN,GROUP,REMOVE_MEMBER);}  }
class C{  protected void flushModifiedWaitingObjects(){  PdfXrefTable xref=document.getXref();  for (int i=1; i < xref.size(); i++) {    PdfIndirectReference indirectReference=xref.get(i);    if (null != indirectReference) {      PdfObject obj=indirectReference.getRefersTo(false);      if (obj != null && !obj.equals(objectStream) && obj.isModified()) {        obj.flush();      }    }  }  if (objectStream != null && objectStream.getSize() > 0) {    objectStream.flush();    objectStream=null;  }}  }
class C{  public DHParameterSpec(BigInteger p,BigInteger g){  this.p=p;  this.g=g;  this.l=0;}  }
class C{  public boolean containsSortKeys() throws DirectoryException {  return !getSortKeys().isEmpty();}  }
class C{  public boolean isDefined(Object attrName){  return table.containsKey(attrName);}  }
class C{  public boolean hasBinaryAttributes(){  return false;}  }
class C{  public void processRefer(RequestEvent requestEvent,ServerTransaction serverTransaction) throws ParseException, SipException, InvalidArgumentException {  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request refer=requestEvent.getRequest();  logger.info("referee: got an REFER sending Accepted");  logger.info("referee:  " + refer.getMethod());  dialog=requestEvent.getDialog();  logger.info("referee : dialog = " + requestEvent.getDialog());  ReferToHeader refTo=(ReferToHeader)refer.getHeader(ReferToHeader.NAME);  if (refTo == null) {    Response bad=messageFactory.createResponse(Response.BAD_REQUEST,refer);    bad.setReasonPhrase("Missing Refer-To");    sipProvider.sendResponse(bad);    TestHarness.fail("Bad REFER request. Missing Refer-To.");  }  if (!tryingSent && "udp".equalsIgnoreCase(transport)) {    tryingSent=true;    sipProvider.sendResponse(messageFactory.createResponse(100,refer));    return;  }  Response response=null;  ServerTransaction st=requestEvent.getServerTransaction();  if (st == null) {    st=sipProvider.getNewServerTransaction(refer);  }  String toTag=Integer.toHexString((int)(Math.random() * Integer.MAX_VALUE));  response=messageFactory.createResponse(202,refer);  ToHeader toHeader=(ToHeader)response.getHeader(ToHeader.NAME);  TestHarness.assertNull("To-tag!=null but no dialog match! My dialog=" + dialog,toHeader.getTag());  toHeader.setTag(toTag);  this.dialog=st.getDialog();  this.dialog.terminateOnBye(false);  if (dialog != null) {    logger.info("Dialog " + dialog);    logger.info("Dialog state " + dialog.getState());    logger.info("local tag=" + dialog.getLocalTag());    logger.info("remote tag=" + dialog.getRemoteTag());  }  Address address=addressFactory.createAddress("Referee <sip:127.0.0.1>");  ((SipURI)address.getURI()).setPort(mySipProvider.getListeningPoint(transport).getPort());  ContactHeader contactHeader=headerFactory.createContactHeader(address);  response.addHeader(contactHeader);  ExpiresHeader expires=(ExpiresHeader)refer.getHeader(ExpiresHeader.NAME);  if (expires == null) {    expires=headerFactory.createExpiresHeader(30);  }  response.addHeader(expires);  TestHarness.assertNull(dialog.getState());  st.sendResponse(response);  TestHarness.assertEquals(DialogState.CONFIRMED,dialog.getState());  referEvent=headerFactory.createEventHeader("refer");  long id=((CSeqHeader)refer.getHeader("CSeq")).getSeqNumber();  referEvent.setEventId(Long.toString(id));  sendInvite(refTo);}  }
class C{  public NumberEditor(JSpinner spinner,String decimalFormatPattern){  this(spinner,new DecimalFormat(decimalFormatPattern));}  }
class C{  public RequestSet parseXML(){  if (document == null) {    return null;  }  Element reqSetElem=document.getDocumentElement();  RequestSet reqSet=new RequestSet();  setRequestSetAttributes(reqSetElem,reqSet);  NodeList requests=reqSetElem.getElementsByTagName("Request");  if (requests == null) {    return reqSet;  }  int nodeLen=requests.getLength();  for (int i=0; i < nodeLen; i++) {    reqSet.addRequest(parseRequestElement((Element)requests.item(i)));  }  return reqSet;}  }
class C{  private static boolean checkCondition(Assertion assertion) throws IOException {  if (assertion == null) {    return false;  }  if (!assertion.isSignatureValid()) {    debug.error(bundle.getString("assertionSignatureNotValid"));    return false;  }  if (!(assertion.isTimeValid())) {    debug.error(bundle.getString("assertionTimeNotValid"));    return false;  }  Conditions cnds=assertion.getConditions();  Set audienceCnd=new HashSet();  audienceCnd=cnds.getAudienceRestrictionCondition();  Iterator it=null;  if (audienceCnd != null) {    if (!audienceCnd.isEmpty()) {      it=audienceCnd.iterator();      while (it.hasNext()) {        if ((((AudienceRestrictionCondition)it.next()).evaluate()) == Condition.INDETERMINATE) {          if (debug.messageEnabled()) {            debug.message("Audience " + "RestrictionConditions is indeterminate.");          }        } else {          debug.error("Failed AudienceRestrictionCondition");          return false;        }      }    }  }  return true;}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  public ECPRequest createECPRequest() throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.ECP_REQUEST);  if (obj == null) {    return new ECPRequestImpl();  } else {    return (ECPRequest)obj;  }}  }
class C{  private void checkAndSetFastPathStatus(){  boolean fastPathWasOn=isFastPath;  if ((roundingMode == RoundingMode.HALF_EVEN) && (isGroupingUsed()) && (groupingSize == 3)&& (multiplier == 1)&& (!decimalSeparatorAlwaysShown)&& (!useExponentialNotation)) {    isFastPath=((minimumIntegerDigits == 1) && (maximumIntegerDigits >= 10));    if (isFastPath) {      if (isCurrencyFormat) {        if ((minimumFractionDigits != 2) || (maximumFractionDigits != 2))         isFastPath=false;      } else       if ((minimumFractionDigits != 0) || (maximumFractionDigits != 3))       isFastPath=false;    }  } else   isFastPath=false;  if (isFastPath) {    if (fastPathData == null)     fastPathData=new FastPathData();    fastPathData.zeroDelta=symbols.getZeroDigit() - '0';    fastPathData.groupingChar=symbols.getGroupingSeparator();    fastPathData.fractionalMaxIntBound=(isCurrencyFormat) ? 99 : 999;    fastPathData.fractionalScaleFactor=(isCurrencyFormat) ? 100.0d : 1000.0d;    fastPathData.positiveAffixesRequired=(positivePrefix.length() != 0) || (positiveSuffix.length() != 0);    fastPathData.negativeAffixesRequired=(negativePrefix.length() != 0) || (negativeSuffix.length() != 0);    int maxNbIntegralDigits=10;    int maxNbGroups=3;    int containerSize=Math.max(positivePrefix.length(),negativePrefix.length()) + maxNbIntegralDigits + maxNbGroups+ 1+ maximumFractionDigits+ Math.max(positiveSuffix.length(),negativeSuffix.length());    fastPathData.fastPathContainer=new char[containerSize];    fastPathData.charsPositiveSuffix=positiveSuffix.toCharArray();    fastPathData.charsNegativeSuffix=negativeSuffix.toCharArray();    fastPathData.charsPositivePrefix=positivePrefix.toCharArray();    fastPathData.charsNegativePrefix=negativePrefix.toCharArray();    int longestPrefixLength=Math.max(positivePrefix.length(),negativePrefix.length());    int decimalPointIndex=maxNbIntegralDigits + maxNbGroups + longestPrefixLength;    fastPathData.integralLastIndex=decimalPointIndex - 1;    fastPathData.fractionalFirstIndex=decimalPointIndex + 1;    fastPathData.fastPathContainer[decimalPointIndex]=isCurrencyFormat ? symbols.getMonetaryDecimalSeparator() : symbols.getDecimalSeparator();  } else   if (fastPathWasOn) {    fastPathData.fastPathContainer=null;    fastPathData.charsPositiveSuffix=null;    fastPathData.charsNegativeSuffix=null;    fastPathData.charsPositivePrefix=null;    fastPathData.charsNegativePrefix=null;  }  fastPathCheckNeeded=false;}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  forwardToServicesViewBean();}  }
class C{  public PWResetQuestionModelImpl(){  super();}  }
class C{  public boolean hasCache(){  final NodeVector nv=getVector();  return (nv != null);}  }
class C{  private void cancelAnimation(){  if (mStateAnimator != null) {    mStateAnimator.setDuration(0);    mStateAnimator.cancel();  }  mStateAnimator=null;}  }
class C{  public CachingBlacklist(Blacklist<T> delegate,int maxSize,long purgeDelayMs){  this(delegate,maxSize,purgeDelayMs,TimeService.SYSTEM);}  }
class C{  public DTMDefaultBaseIterators(DTMManager mgr,Source source,int dtmIdentity,DTMWSFilter whiteSpaceFilter,XMLStringFactory xstringfactory,boolean doIndexing){  super(mgr,source,dtmIdentity,whiteSpaceFilter,xstringfactory,doIndexing);}  }
class C{  public boolean hasNext(){  if (returnProperty != null) {    return true;  }  if (state == ITERATE_NODE) {    return reportNode();  } else   if (state == ITERATE_CHILDREN) {    if (childrenIterator == null) {      childrenIterator=visitedNode.iterateChildren();    }    boolean hasNext=iterateChildren(childrenIterator);    if (!hasNext && visitedNode.hasQualifier() && !getOptions().isOmitQualifiers()) {      state=ITERATE_QUALIFIER;      childrenIterator=null;      hasNext=hasNext();    }    return hasNext;  } else {    if (childrenIterator == null) {      childrenIterator=visitedNode.iterateQualifier();    }    return iterateChildren(childrenIterator);  }}  }
class C{  public boolean isDestroyed(){  return destroyed;}  }
class C{  public void updateGraceLoginTimes(){  if (logger.isTraceEnabled()) {    logger.trace("Updating grace login times for user %s",userDNString);  }  List<Long> graceTimes=getGraceLoginTimes();  long highestGraceTime=computeHighestTime(graceTimes);  graceTimes.add(highestGraceTime);  AttributeType type=DirectoryServer.getSchema().getAttributeType(OP_ATTR_PWPOLICY_GRACE_LOGIN_TIME);  Attribute addAttr=Attributes.create(type,GeneralizedTimeSyntax.format(highestGraceTime));  modifications.add(new Modification(ModificationType.ADD,addAttr,true));}  }
class C{  public boolean isEditable(){  return editable;}  }
class C{  public String toStringImpl(){  return new StringBuilder().append(routing).toString();}  }
class C{  public DictionaryPasswordValidator(){  super();}  }
class C{  public void removeLayoutComponent(Component comp){synchronized (comp.getTreeLock()) {    if (comp == center) {      center=null;    } else     if (comp == north) {      north=null;    } else     if (comp == south) {      south=null;    } else     if (comp == east) {      east=null;    } else     if (comp == west) {      west=null;    }    if (comp == firstLine) {      firstLine=null;    } else     if (comp == lastLine) {      lastLine=null;    } else     if (comp == firstItem) {      firstItem=null;    } else     if (comp == lastItem) {      lastItem=null;    }  }}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.SignatureValueType createSignatureValueType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.SignatureValueTypeImpl();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeclonefalsenocopytext.class,args);}  }
class C{  public DataBufferInt(int size,int numBanks){  super(STABLE,TYPE_INT,size,numBanks);  bankdata=new int[numBanks][];  for (int i=0; i < numBanks; i++) {    bankdata[i]=new int[size];  }  data=bankdata[0];}  }
class C{  static boolean isLoggingStackTraceElement(StackTraceElement trace){  String name=trace.getClassName();  return name.startsWith(Thread.class.getName()) || name.startsWith(DebugTracer.class.getName()) || name.startsWith(OPENDJ_LOGGER_ADAPTER_CLASS_NAME)|| name.startsWith(LocalizedLogger.class.getName());}  }
class C{  public void removeSelectionPaths(TreePath[] paths){  if (paths != null && selection != null && paths.length > 0) {    if (!canPathsBeRemoved(paths)) {      clearSelection();    } else {      Vector<PathPlaceHolder> pathsToRemove=null;      for (int removeCounter=paths.length - 1; removeCounter >= 0; removeCounter--) {        if (paths[removeCounter] != null) {          if (uniquePaths.get(paths[removeCounter]) != null) {            if (pathsToRemove == null)             pathsToRemove=new Vector<PathPlaceHolder>(paths.length);            uniquePaths.remove(paths[removeCounter]);            pathsToRemove.addElement(new PathPlaceHolder(paths[removeCounter],false));          }        }      }      if (pathsToRemove != null) {        int removeCount=pathsToRemove.size();        TreePath beginLeadPath=leadPath;        if (removeCount == selection.length) {          selection=null;        } else {          Enumeration<TreePath> pEnum=uniquePaths.keys();          int validCount=0;          selection=new TreePath[selection.length - removeCount];          while (pEnum.hasMoreElements()) {            selection[validCount++]=pEnum.nextElement();          }        }        if (leadPath != null && uniquePaths.get(leadPath) == null) {          if (selection != null) {            leadPath=selection[selection.length - 1];          } else {            leadPath=null;          }        } else         if (selection != null) {          leadPath=selection[selection.length - 1];        } else {          leadPath=null;        }        updateLeadIndex();        resetRowSelection();        notifyPathChange(pathsToRemove,beginLeadPath);      }    }  }}  }
class C{  public SmAuthStatus release(String parameter,String secret){  return SmAuthStatus.SMAUTH_SUCCESS;}  }
class C{  public boolean equals(Object other){  if (!this.getClass().equals(other.getClass()))   return false; else {    NioTcpMessageChannel that=(NioTcpMessageChannel)other;    if (this.socketChannel != that.socketChannel)     return false; else     return true;  }}  }
class C{  public final boolean equals(Object obj){  return super.equals(obj);}  }
class C{  public void testParseNullYieldsJSONObjectNull() throws JSONException {  JSONArray array=new JSONArray("[\"null\",null]");  array.put((Collection)null);  assertEquals("null",array.get(0));  assertEquals(JSONObject.NULL,array.get(1));  try {    array.get(2);    fail();  } catch (  JSONException e) {  }  assertEquals("null",array.getString(0));  assertEquals("null",array.getString(1));  try {    array.getString(2);    fail();  } catch (  JSONException e) {  }}  }
class C{  public ConnectionPendingException(){}  }
class C{  @Fluent public Job onStart(Handler<Job> handler){  this.on("start",null);  return this;}  }
class C{  @DataProvider(name="identifiedChoicdeIdentifierValues") public Object[][] createIdentifiedChoicdeIdentifierValues(){  return new Object[][]{{"serialNumber:",true},{"issuer1:",true},{"Serialnumber:",false},{"0serialnumber:",false},{"serial Number:",false},{"missingColon",false}};}  }
class C{  public final void connectProxy(HttpHost proxy,boolean secure){  if (proxy == null) {    throw new IllegalArgumentException("Proxy host may not be null.");  }  if (this.connected) {    throw new IllegalStateException("Already connected.");  }  this.connected=true;  this.proxyChain=new HttpHost[]{proxy};  this.secure=secure;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.MustSupportRefThumbprintElement createMustSupportRefThumbprintElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.MustSupportRefThumbprintElementImpl();}  }
class C{  static void writeEpochSec(long epochSec,DataOutput out) throws IOException {  if (epochSec >= -4575744000L && epochSec < 10413792000L && epochSec % 900 == 0) {    int store=(int)((epochSec + 4575744000L) / 900);    out.writeByte((store >>> 16) & 255);    out.writeByte((store >>> 8) & 255);    out.writeByte(store & 255);  } else {    out.writeByte(255);    out.writeLong(epochSec);  }}  }
class C{  public boolean equals(Object obj){  if (obj == null) {    return false;  }  if (this == obj) {    return true;  }  if (!(obj instanceof WindowsDesktopSSOPrincipal)) {    return false;  }  WindowsDesktopSSOPrincipal wtp=(WindowsDesktopSSOPrincipal)obj;  if (name.equals(wtp.getName())) {    return true;  }  return false;}  }
class C{  public com.sun.identity.liberty.ws.meta.jaxb.ExtensionType createExtensionType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.meta.jaxb.impl.ExtensionTypeImpl();}  }
class C{  static float min(float red,float green,float blue){  float min=(red < green) ? red : green;  return (min < blue) ? min : blue;}  }
class C{  public static void main(final String[] args){  final int retCode=new LDAPCompare().run(args);  System.exit(filterExitCode(retCode));}  }
class C{  public boolean isBound(){  return bound || oldImpl;}  }
class C{  public IllegalArgumentException(){  super();}  }
class C{  public void paint(Graphics g,int offs0,int offs1,Shape bounds,JTextComponent c){  Rectangle alloc=bounds.getBounds();  try {    TextUI mapper=c.getUI();    Rectangle p0=mapper.modelToView(c,offs0);    Rectangle p1=mapper.modelToView(c,offs1);    Color color=getColor();    if (color == null) {      g.setColor(c.getSelectionColor());    } else {      g.setColor(color);    }    if (p0.y == p1.y) {      Rectangle r=p0.union(p1);      g.fillRect(r.x,r.y,r.width,r.height);    } else {      int p0ToMarginWidth=alloc.x + alloc.width - p0.x;      g.fillRect(p0.x,p0.y,p0ToMarginWidth,p0.height);      if ((p0.y + p0.height) != p1.y) {        g.fillRect(alloc.x,p0.y + p0.height,alloc.width,p1.y - (p0.y + p0.height));      }      g.fillRect(alloc.x,p1.y,(p1.x - alloc.x),p1.height);    }  } catch (  BadLocationException e) {  }}  }
class C{  public ExtensionHandler launch() throws TransformerException {  ExtensionHandler handler=null;  try {    Class cl=ExtensionHandler.getClassForName(m_handlerClass);    Constructor con=null;    if (m_sig != null)     con=cl.getConstructor(m_sig); else {      Constructor[] cons=cl.getConstructors();      for (int i=0; i < cons.length; i++) {        if (cons[i].getParameterTypes().length == m_args.length) {          con=cons[i];          break;        }      }    }    if (con != null)     handler=(ExtensionHandler)con.newInstance(m_args); else     throw new TransformerException("ExtensionHandler constructor not found");  } catch (  Exception e) {    throw new TransformerException(e);  }  return handler;}  }
class C{  @Override public void update(){  if (!tileExit) {    yPos-=pushThreshold;    updatePosition();    if (!custCollide(4,true))     tileExit=true;    return;  }  if (initJump == 0) {    yVel-=14.93f * REL_HEIGHT;    xVel+=REL_HEIGHT;    initJump++;  } else   if (initJump == 2) {    yVel+=14.93f * REL_HEIGHT;    xVel-=REL_HEIGHT;    initJump++;  }  if (frameControl % 3 == 0) {    spriteFrame.setImage(playerStates.get(frameControl / 3));    if (frameControl == 66)     frameControl=0;  }  frameControl++;  if (!bottomCollide(false)) {    if (yPos > HEIGHT) {      cycleStats=true;      return;    }    yVel+=gravity;    yPos+=yVel;  } else {    yVel=jumpVel;    yPos+=yVel;    while (custCollide(4,false)) {      yPos--;      for (int i=0; i < spriteBoundsArray.length; i++)       if (spriteBoundsArray[i] != null)       spriteBoundsArray[i].setTranslateY(yPos);      spriteFrame.setTranslateY(yPos);    }    if (initJump == 1)     initJump++;  }  if (rightCollide(false) || leftCollide(false))   xVel=-xVel;  if (checkPlayerCollided()) {    Main.updateScore(1500);    powerup_consumed=true;    cycleStats=true;  }  xPos+=xVel;  updatePosition();}  }
class C{  private TopologyMsg performPhaseTwoHandshake(ConnectedRS electedRS,ServerStatus initStatus){  try {    final StartSessionMsg startSessionMsg;    startSessionMsg=new StartSessionMsg(initStatus,domain.getRefUrls(),domain.isAssured(),domain.getAssuredMode(),domain.getAssuredSdLevel());    startSessionMsg.setEclIncludes(domain.getEclIncludes(domain.getServerId()),domain.getEclIncludesForDeletes(domain.getServerId()));    final Session session=electedRS.session;    session.publish(startSessionMsg);    final TopologyMsg topologyMsg=(TopologyMsg)session.receive();    if (logger.isTraceEnabled()) {      debugInfo("RB HANDSHAKE SENT:\n" + startSessionMsg + "\nAND RECEIVED:\n"+ topologyMsg);    }    session.setSoTimeout(timeout);    setConnectedRS(electedRS);    return topologyMsg;  } catch (  Exception e) {    logger.error(WARN_EXCEPTION_STARTING_SESSION_PHASE,getServerId(),electedRS.rsInfo.getServerURL(),getBaseDN(),stackTraceToSingleLineString(e));    setConnectedRS(ConnectedRS.noConnectedRS());    return null;  }}  }
class C{  public void close() throws IOException {  in.close();  monitor.close();}  }
class C{  public WhereBuilder or(String columnName,String op,Object value){  appendCondition(whereItems.size() == 0 ? null : "OR",columnName,op,value);  return this;}  }
class C{  public String toString(){  return name;}  }
class C{  @Override public int update(ByteBuffer inBuffer,ByteBuffer outBuffer) throws ShortBufferException {  return cipher.update(inBuffer,outBuffer);}  }
class C{  public DataBufferDouble(int size,int numBanks){  super(STABLE,TYPE_DOUBLE,size,numBanks);  bankdata=new double[numBanks][];  for (int i=0; i < numBanks; i++) {    bankdata[i]=new double[size];  }  data=bankdata[0];}  }
class C{  public Scoping createScoping(Element value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.SCOPING,value);  if (obj == null) {    return new ScopingImpl(value);  } else {    return (Scoping)obj;  }}  }
class C{  public RMRealmViewBean(){  super("RMRealm");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);  createTableModel();  ptModel=new CCPageTitleModel(getClass().getClassLoader().getResourceAsStream("com/sun/identity/console/simplePageTitle.xml"));  registerChildren();}  }
class C{  public static void readFully(InputStream in,byte[] dst) throws IOException {  readFully(in,dst,0,dst.length);}  }
class C{  public static boolean wantPOSTResponseSigned(String realm,String hostEntityId,String entityRole){  if (debug.messageEnabled()) {    String method="SAML2Utils:getWantPOSTResponseSigned : ";    debug.message(method + ": realm - " + realm+ "/: hostEntityId - "+ hostEntityId+ ": entityRole - "+ entityRole);  }  String wantSigned=getAttributeValueFromSSOConfig(realm,hostEntityId,entityRole,SAML2Constants.WANT_POST_RESPONSE_SIGNED);  return "true".equalsIgnoreCase(wantSigned);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapinuseattributeerr.class,args);}  }
class C{  @Override public void flush(){  for (  OutputStream s : targetStreams) {    try {      s.flush();    } catch (    Exception e) {      logger.traceException(e);    }  }}  }
class C{  private void registerWrapper(Wrapper wrapper){  Context context=(Context)wrapper.getParent();  String contextPath=context.getPath();  if ("/".equals(contextPath)) {    contextPath="";  }  String version=context.getWebappVersion();  String hostName=context.getParent().getName();  List<WrapperMappingInfo> wrappers=new ArrayList<>();  prepareWrapperMappingInfo(context,wrapper,wrappers);  mapper.addWrappers(hostName,contextPath,version,wrappers);  if (log.isDebugEnabled()) {    log.debug(sm.getString("mapperListener.registerWrapper",wrapper.getName(),contextPath,service));  }}  }
class C{  public AuthThreadManager(){  debug=Debug.getInstance("amThreadManager");  defaultSleepTime=AuthD.getAuth().getDefaultSleepTime();  if (debug.messageEnabled()) {    debug.message("Default sleep time : " + defaultSleepTime);  }}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  logger.info("shootme: got an ACK! ");  logger.info("Dialog = " + requestEvent.getDialog());  if (requestEvent.getDialog() != null) {    logger.info("Dialog State = " + requestEvent.getDialog().getState());  } else {    logger.debug("No dialog !!");  }  this.ackSeen=true;}  }
class C{  public R visitACI(ACIPropertyDefinition pd,String v,P p){  return visitUnknown(pd,v,p);}  }
class C{  private void notifyListener(){  if (listener != null) {    listener.update(bytesRead,contentLength,items);  }}  }
class C{  @Override public int hashCode(){  return (state != null) ? state.hashCode() : super.hashCode();}  }
class C{  public void addHandler(Handler handler) throws SecurityException {  handler.getClass();  checkPermission();  handlers.add(handler);}  }
class C{  public R visitAttributeType(AttributeTypePropertyDefinition pd,P p){  return visitUnknown(pd,p);}  }
class C{  @Override public void onCreate(){  super.onCreate();  ArrayList<MenuItem> mMenuItems=new ArrayList<>();  for (int i=0; i < menuIcons.length; i++) {    mMenuItems.add(new MenuItem(menuIcons[i],Const.MENU_ITEMS[i],android.R.color.black,this));  }  mFloatMenu=new FloatMenu.Builder(this).menuItems(mMenuItems).build();  mFloatMenu.show();}  }
class C{  @Inject public ResourceSetRegistrationEndpoint(OAuth2ProviderSettingsFactory providerSettingsFactory,ResourceSetDescriptionValidator validator,OAuth2RequestFactory requestFactory,Set<ResourceSetRegistrationHook> hooks,ResourceSetLabelRegistration labelRegistration,ExtensionFilterManager extensionFilterManager,ExceptionHandler exceptionHandler,UmaLabelsStore umaLabelsStore,JacksonRepresentationFactory jacksonRepresentationFactory){  this.providerSettingsFactory=providerSettingsFactory;  this.validator=validator;  this.requestFactory=requestFactory;  this.hooks=hooks;  this.labelRegistration=labelRegistration;  this.extensionFilterManager=extensionFilterManager;  this.exceptionHandler=exceptionHandler;  this.umaLabelsStore=umaLabelsStore;  this.jacksonRepresentationFactory=jacksonRepresentationFactory;}  }
class C{  public SerializedField(ContainerView parent,String name,Serializable value){  super(parent,parent.getDefaultModel(),name,name,null);  setValue(value,false);}  }
class C{  private Base64(){}  }
class C{  protected void init(String owner,MethodNode m) throws AnalyzerException {}  }
class C{  public UserDNNotificationMessageTemplateElement(){}  }
class C{  @Override public void reset() throws IOException {  fOffset=0;  fSurrogate=-1;}  }
class C{  public Object removeAttribute(String name,int scope){  checkName(name);switch (scope) {case ENGINE_SCOPE:    if (getBindings(ENGINE_SCOPE) != null) {      return getBindings(ENGINE_SCOPE).remove(name);    }  return null;case GLOBAL_SCOPE:if (getBindings(GLOBAL_SCOPE) != null) {  return getBindings(GLOBAL_SCOPE).remove(name);}return null;default :throw new IllegalArgumentException("Illegal scope value.");}}  }
class C{  public static SASLResponse sendRequest(SASLRequest saslReq,String connectTo) throws AuthnSvcException {  Message req=new Message();  req.setSOAPBody(saslReq.toElement());  req.getCorrelationHeader().setRefToMessageID(saslReq.getRefToMessageID());  Message resp=null;  try {    resp=Client.sendRequest(req,connectTo);  } catch (  Exception ex) {    AuthnSvcUtils.debug.error("AuthnSvcClient.sendRequest:",ex);    throw new AuthnSvcException(ex);  }  List list=resp.getBodies(AuthnSvcConstants.NS_AUTHN_SVC,AuthnSvcConstants.TAG_SASL_RESPONSE);  if (list.isEmpty()) {    throw new AuthnSvcException("missingSASLResponse");  } else   if (list.size() > 1) {    throw new AuthnSvcException("tooManySASLResponse");  }  SASLResponse saslResp=new SASLResponse((Element)list.get(0));  saslResp.setMessageID(resp.getCorrelationHeader().getMessageID());  saslResp.setRefToMessageID(resp.getCorrelationHeader().getRefToMessageID());  return saslResp;}  }
class C{  protected void doOptions(HttpServletRequest req,HttpServletResponse resp) throws ServletException, IOException {  Method[] methods=getAllDeclaredMethods(this.getClass());  boolean ALLOW_GET=false;  boolean ALLOW_HEAD=false;  boolean ALLOW_POST=false;  boolean ALLOW_PUT=false;  boolean ALLOW_DELETE=false;  boolean ALLOW_TRACE=true;  boolean ALLOW_OPTIONS=true;  for (int i=0; i < methods.length; i++) {    Method m=methods[i];    if (m.getName().equals("doGet")) {      ALLOW_GET=true;      ALLOW_HEAD=true;    }    if (m.getName().equals("doPost"))     ALLOW_POST=true;    if (m.getName().equals("doPut"))     ALLOW_PUT=true;    if (m.getName().equals("doDelete"))     ALLOW_DELETE=true;  }  String allow=null;  if (ALLOW_GET)   allow=METHOD_GET;  if (ALLOW_HEAD)   if (allow == null)   allow=METHOD_HEAD; else   allow+=", " + METHOD_HEAD;  if (ALLOW_POST)   if (allow == null)   allow=METHOD_POST; else   allow+=", " + METHOD_POST;  if (ALLOW_PUT)   if (allow == null)   allow=METHOD_PUT; else   allow+=", " + METHOD_PUT;  if (ALLOW_DELETE)   if (allow == null)   allow=METHOD_DELETE; else   allow+=", " + METHOD_DELETE;  if (ALLOW_TRACE)   if (allow == null)   allow=METHOD_TRACE; else   allow+=", " + METHOD_TRACE;  if (ALLOW_OPTIONS)   if (allow == null)   allow=METHOD_OPTIONS; else   allow+=", " + METHOD_OPTIONS;  resp.setHeader("Allow",allow);}  }
class C{  private long triggerTime(long delay,TimeUnit unit){  return triggerTime(unit.toNanos((delay < 0) ? 0 : delay));}  }
class C{  public static void redirect(String path,HttpServletRequest request,HttpServletResponse response) throws IOException {  FacesContext currentInstance=FacesContext.getCurrentInstance();  if (currentInstance != null) {    request=(HttpServletRequest)currentInstance.getExternalContext().getRequest();    response=(HttpServletResponse)currentInstance.getExternalContext().getResponse();  }  String fullPath=request.getContextPath() + path;  String facesRequest=request.getHeader("Faces-Request");  if (facesRequest != null && "partial/ajax".equals(facesRequest)) {    if (currentInstance != null) {      currentInstance.getExternalContext().redirect(fullPath);      currentInstance.responseComplete();    } else {      response.setContentType("text/xml");      response.getWriter().append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>").printf("<partial-response><redirect url=\"%s\"></redirect></partial-response>",fullPath);    }  } else {    response.sendRedirect(fullPath);  }}  }
class C{  private AMPassword(){  cleared=true;}  }
class C{  public void callPredicateVisitors(XPathVisitor visitor){  m_expr.callVisitors(new filterExprOwner(),visitor);  super.callPredicateVisitors(visitor);}  }
class C{  public final void testHashCode04(){  assertTrue(new ECFieldF2m(2000,new int[]{981,2,1}).hashCode() == new ECFieldF2m(2000,new int[]{981,2,1}).hashCode());}  }
class C{  public void configChanged(ConfigurationActionEvent event){  if (getDebug().messageEnabled()) {    getDebug().message("SystemConfigurationUtil.configChanged: " + "type = " + event.getType() + ", configuration name = "+ event.getConfigurationName()+ ", component name = "+ event.getComponentName()+ ", realm = "+ event.getRealm());  }  try {    update();  } catch (  ConfigurationException ex) {    getDebug().error("SystemConfigurationUtil.configChanged: ",ex);  }}  }
class C{  HopImpl(String hop) throws IllegalArgumentException {  if (hop == null)   throw new IllegalArgumentException("Null arg!");  int brack=hop.indexOf(']');  int colon=hop.indexOf(':',brack);  int slash=hop.indexOf('/',colon);  if (colon > 0) {    this.host=hop.substring(0,colon);    String portstr;    if (slash > 0) {      portstr=hop.substring(colon + 1,slash);      this.transport=hop.substring(slash + 1);    } else {      portstr=hop.substring(colon + 1);      this.transport="UDP";    }    try {      port=Integer.parseInt(portstr);    } catch (    NumberFormatException ex) {      throw new IllegalArgumentException("Bad port spec");    }  } else {    if (slash > 0) {      this.host=hop.substring(0,slash);      this.transport=hop.substring(slash + 1);      this.port=transport.equalsIgnoreCase("TLS") ? 5061 : 5060;    } else {      this.host=hop;      this.transport="UDP";      this.port=5060;    }  }  if (host == null || host.length() == 0)   throw new IllegalArgumentException("no host!");  this.host=this.host.trim();  this.transport=this.transport.trim();  if ((brack > 0) && host.charAt(0) != '[') {    throw new IllegalArgumentException("Bad IPv6 reference spec");  }}  }
class C{  public boolean hasBeenExpanded(TreePath path){  return (path != null && expandedState.get(path) != null);}  }
class C{  public synchronized void closeDriver(){  if (camera != null) {    camera.getCamera().release();    camera=null;    framingRect=null;    framingRectInPreview=null;  }}  }
class C{  protected void validateSuccessfulReadResponse(JsonValue relationshipField,ResourceResponse resourceResponse) throws BadRequestException {  String reversePropertyName=getRelationshipProvider().getSchemaField().getReversePropertyName();  JsonValue reverseProperty=resourceResponse.getContent().get(reversePropertyName);  if (reverseProperty.isNotNull() && !reverseProperty.isCollection()) {    String ref=relationshipField.get(REFERENCE_ID).asString();    logger.debug(format("Reference ''{0}''->''{1}'' is in conflict with existing reverse reference ''{1}/{2}''->''{3}''",relationshipField.getPointer(),ref,reversePropertyName,reverseProperty.get(RelationshipUtil.REFERENCE_ID).asString()));    throw new BadRequestException(format("Reference ''{0}''->''{1}'' is in conflict with existing reverse reference ''{1}/{2}''",relationshipField.getPointer(),ref,reversePropertyName));  }}  }
class C{  public static Integer integerValue(Long V) throws SnmpStatusException {  long v=V.longValue();  if (v > (pow(2,31) - 1)) {    throw new SnmpStatusException("Returned intrumented value size too big");  }  Integer ret=new Integer(V.intValue());  return ret;}  }
class C{  public static void updateAgentGroup(SSOToken ssoToken,String realm,String agentGroupName,Map attrValues,boolean bSet) throws IdRepoException, SSOException, SMSException, ConfigurationException {  AMIdentity amid=new AMIdentity(ssoToken,agentGroupName,IdType.AGENTGROUP,realm,null);  String agentType=getAgentType(amid);  Map attributeValues=parseAttributeMap(agentType,attrValues);  if (attributeValues.containsKey(ATTR_NAME_PWD)) {    throw new ConfigurationException("update.agent.group.cannot.have.password",null);  }  if (!bSet) {    Map origValues=amid.getAttributes(attributeValues.keySet());    for (Iterator i=attributeValues.keySet().iterator(); i.hasNext(); ) {      String attrName=(String)i.next();      attributeValues.put(attrName,updateAttrValues(agentType,attrName,(Set)origValues.get(attrName),(Set)attributeValues.get(attrName)));    }  }  amid.setAttributes(attributeValues);  amid.store();}  }
class C{  public void verify(PublicKey key) throws CertificateException, NoSuchAlgorithmException, InvalidKeyException, NoSuchProviderException, SignatureException {}  }
class C{  private URIUtils(){}  }
class C{  public static void writeManager(PrintWriter writer,Object[] args,int mode){  if (mode == 0) {    writer.print(MessageFormat.format(Constants.MANAGER_SECTION,args));  }}  }
class C{  public final int hashCode(){  if (address() == null)   return type().hashCode();  return type().hashCode() + address().hashCode();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(textsplittextnomodificationallowederr.class,args);}  }
class C{  Mark skipUntil(String limit){  Mark ret=mark();  int limlen=limit.length();  char firstChar=limit.charAt(0);  Boolean result=null;  Mark restart=null;  skip:   while ((result=indexOf(firstChar,ret)) != null) {    if (result.booleanValue()) {      if (restart != null) {        restart.init(current,true);      } else {        restart=mark();      }      for (int i=1; i < limlen; i++) {        if (peekChar() == limit.charAt(i)) {          nextChar();        } else {          current.init(restart,true);          continue skip;        }      }      return ret;    }  }  return null;}  }
class C{  @SuppressWarnings("unchecked") @Override public PdfBoolean copyTo(PdfDocument document){  return (PdfBoolean)super.copyTo(document,true);}  }
class C{  private void ensurePathIsExpanded(TreePath aPath,boolean expandLast){  if (aPath != null) {    if (treeModel.isLeaf(aPath.getLastPathComponent())) {      aPath=aPath.getParentPath();      expandLast=true;    }    if (aPath != null) {      TreeStateNode lastNode=getNodeForPath(aPath,false,true);      if (lastNode != null) {        lastNode.makeVisible();        if (expandLast)         lastNode.expand();      }    }  }}  }
class C{  public boolean visitFunction(ExpressionOwner owner,Function func){  if ((func instanceof FuncPosition) || (func instanceof FuncLast))   m_hasPositionalPred=true;  return true;}  }
class C{  public OAuth2RestletException(int statusCode,String error,String description,String state){  this(statusCode,error,description,null,state);}  }
class C{  private boolean addWorker(Runnable firstTask,boolean core){  retry:   for (; ; ) {    int c=ctl.get();    int rs=runStateOf(c);    if (rs >= SHUTDOWN && !(rs == SHUTDOWN && firstTask == null && !workQueue.isEmpty()))     return false;    for (; ; ) {      int wc=workerCountOf(c);      if (wc >= CAPACITY || wc >= (core ? corePoolSize : maximumPoolSize))       return false;      if (compareAndIncrementWorkerCount(c))       break retry;      c=ctl.get();      if (runStateOf(c) != rs)       continue retry;    }  }  boolean workerStarted=false;  boolean workerAdded=false;  Worker w=null;  try {    w=new Worker(firstTask);    final Thread t=w.thread;    if (t != null) {      final ReentrantLock mainLock=this.mainLock;      mainLock.lock();      try {        int rs=runStateOf(ctl.get());        if (rs < SHUTDOWN || (rs == SHUTDOWN && firstTask == null)) {          if (t.isAlive())           throw new IllegalThreadStateException();          workers.add(w);          int s=workers.size();          if (s > largestPoolSize)           largestPoolSize=s;          workerAdded=true;        }      }  finally {        mainLock.unlock();      }      if (workerAdded) {        t.start();        workerStarted=true;      }    }  }  finally {    if (!workerStarted)     addWorkerFailed(w);  }  return workerStarted;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrparentnodenull.class,args);}  }
