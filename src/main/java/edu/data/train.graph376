class C{  public int viewToModel(float x,float y,Shape a,Position.Bias[] bias){  Rectangle alloc=(Rectangle)a;  if (x < alloc.x + (alloc.width / 2)) {    bias[0]=Position.Bias.Forward;    return getStartOffset();  }  bias[0]=Position.Bias.Backward;  return getEndOffset();}  }
class C{  public void registerSubtypes(NamedType... types){  getSubtypeResolver().registerSubtypes(types);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MDocTypeCounter[");  sb.append(get_ID()).append(",").append(getName()).append(",C_DocType_ID=").append(getC_DocType_ID()).append(",Counter=").append(getCounter_C_DocType_ID()).append(",DocAction=").append(getDocAction()).append("]");  return sb.toString();}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.N4_MEMBER_DECLARATION___GET_DEFINED_TYPE_ELEMENT:    return getDefinedTypeElement();case N4JSPackage.N4_MEMBER_DECLARATION___IS_DECLARED_STATIC:  return isDeclaredStatic();case N4JSPackage.N4_MEMBER_DECLARATION___IS_STATIC:return isStatic();case N4JSPackage.N4_MEMBER_DECLARATION___IS_DECLARED_FINAL:return isDeclaredFinal();case N4JSPackage.N4_MEMBER_DECLARATION___IS_FINAL:return isFinal();case N4JSPackage.N4_MEMBER_DECLARATION___IS_CONSTRUCTOR:return isConstructor();case N4JSPackage.N4_MEMBER_DECLARATION___IS_CALLABLE_CONSTRUCTOR:return isCallableConstructor();case N4JSPackage.N4_MEMBER_DECLARATION___GET_NAME:return getName();case N4JSPackage.N4_MEMBER_DECLARATION___GET_DECLARED_TYPE_REF:return getDeclaredTypeRef();}return super.eInvoke(operationID,arguments);}  }
class C{  public void write(PrintWriter writer){  for (int i=0; i < count; i++) {    writer.println(keys[i] + "\t" + values[i]);  }  writer.flush();}  }
class C{  Divider<T> nextVertical(){  return nextVertical;}  }
class C{  @SuppressWarnings("unchecked") @Deprecated public OperatorDescription(final ClassLoader classLoader,final String key,final String name,final String className,final String shortDescription,final String longDescription,final String groupName,final String iconName,final String deprecationInfo,final Plugin provider) throws ClassNotFoundException {  this.key=key;  this.clazz=(Class<? extends Operator>)Class.forName(className,true,classLoader);  this.documentation=new OperatorDocumentation(name);  this.documentation.setSynopsis(shortDescription);  this.documentation.setDocumentation(longDescription);  this.documentation.setDeprecation(deprecationInfo);  this.fullyQualifiedGroupKey=groupName;  this.provider=provider;  setIconName(iconName);  updateIcons();}  }
class C{  private void readSequenceEnd(){  popContext();}  }
class C{  private String handleInitiatorRemoval(StorageSystem vplex,Workflow workflow,ExportGroup exportGroup,ExportMask exportMask,List<URI> hostInitiatorURIs,List<URI> targetURIs,String zoneStep,boolean removeAllInits,URI computeResourceId){  _log.info("these initiators are being marked for removal from export mask {}: {}",exportMask.getMaskName(),CommonTransformerFunctions.collectionToString(hostInitiatorURIs));  String lastStep;  Workflow.Method removeInitiatorMethod=storageViewRemoveInitiatorsMethod(vplex.getId(),exportGroup.getId(),exportMask.getId(),hostInitiatorURIs,targetURIs);  Workflow.Method removeInitiatorRollbackMethod=new Workflow.Method(ROLLBACK_METHOD_NULL);  lastStep=workflow.createStep("storageView","Removing " + hostInitiatorURIs.toString(),zoneStep,vplex.getId(),vplex.getSystemType(),this.getClass(),removeInitiatorMethod,removeInitiatorRollbackMethod,null);  Map<URI,List<URI>> exportMaskToInitiators=new HashMap<URI,List<URI>>();  exportMaskToInitiators.put(exportMask.getId(),hostInitiatorURIs);  List<NetworkZoningParam> zoningParam=NetworkZoningParam.convertExportMaskInitiatorMapsToNetworkZoningParam(exportGroup.getId(),exportMaskToInitiators,_dbClient);  Workflow.Method zoneRemoveInitiatorsMethod=_networkDeviceController.zoneExportRemoveInitiatorsMethod(zoningParam);  Workflow.Method zoneNullRollbackMethod=_networkDeviceController.zoneNullRollbackMethod();  lastStep=workflow.createStep(null,"Zone remove initiataors mask: " + exportMask.getMaskName(),lastStep,nullURI,"network-system",_networkDeviceController.getClass(),zoneRemoveInitiatorsMethod,zoneNullRollbackMethod,null);  if (removeAllInits) {    _log.info("all initiators are being removed...");    if (exportMask.getUserAddedVolumes() != null && !exportMask.getUserAddedVolumes().isEmpty()) {      StringMap volumes=exportMask.getUserAddedVolumes();      List<URI> volumeURIList=new ArrayList<URI>();      if (volumes != null) {        for (        String vol : volumes.values()) {          URI volumeURI=URI.create(vol);          volumeURIList.add(volumeURI);        }      }      Map<String,Set<ExportMask>> sharedExportMask=VPlexUtil.getSharedStorageView(exportGroup,vplex.getId(),_dbClient);      if (ExportUtils.checkIfAnyExistingInitiatorsNotInComputeResource(exportMask,computeResourceId,_dbClient)) {        _log.info("Not removing volumes from storage view because there are existing initiators in storage view {} ",exportMask.getMaskName());      } else       if (sharedExportMask.containsKey(exportMask.getMaskName())) {        _log.info("Multiple Export mask share same stoarge view %s hence volumes will only be removed in the database. ",exportMask.getMaskName());        Map<URI,BlockObject> blockObjectCache=new HashMap<URI,BlockObject>();        List<String> blockObjectNames=new ArrayList<String>();        for (        URI boURI : volumeURIList) {          BlockObject blockObject=Volume.fetchExportMaskBlockObject(_dbClient,boURI);          blockObjectNames.add(blockObject.getDeviceLabel());          blockObjectCache.put(blockObject.getId(),blockObject);        }        exportMask.removeVolumes(volumeURIList);        for (        URI volumeURI : volumeURIList) {          BlockObject blockObject=blockObjectCache.get(volumeURI);          if (blockObject != null) {            if (blockObject.getWWN() != null) {              exportMask.removeFromUserCreatedVolumes(blockObject);            } else {              _log.warn("Could not remove volume " + blockObject.getId() + " from export mask "+ exportMask.getLabel()+ " because it does not have a WWN.  Assumed not in mask, likely part of a rollback operation");            }          }        }        _dbClient.updateObject(exportMask);        _log.info("successfully removed " + blockObjectNames + " from exportmask "+ exportMask.getMaskName()+ " in ViPR database only.");        _log.info("removing ExportMask {} from ExportGroup {}",exportMask.getId(),exportGroup.getId());        exportGroup.removeExportMask(exportMask.getId());        _dbClient.updateObject(exportGroup);      } else {        _log.info("creating a remove volumes workflow step with " + exportMask.getMaskName() + " for volumes "+ CommonTransformerFunctions.collectionToString(volumes.values()));        Workflow.Method storageViewRemoveVolume=storageViewRemoveVolumesMethod(vplex.getId(),exportMask,volumeURIList);        lastStep=workflow.createStep("removeVolumes",String.format("Removing volumes from export on storage array %s (%s) for export mask %s (%s)",vplex.getNativeGuid(),vplex.getId().toString(),exportMask.getMaskName(),exportMask.getId()),lastStep,vplex.getId(),vplex.getSystemType(),this.getClass(),storageViewRemoveVolume,null,null);        List<NetworkZoningParam> zoningParamB=NetworkZoningParam.convertExportMasksToNetworkZoningParam(exportGroup.getId(),Collections.singletonList(exportMask.getId()),_dbClient);        Workflow.Method zoneRemoveVolumesMethod=_networkDeviceController.zoneExportRemoveVolumesMethod(zoningParamB,volumeURIList);        lastStep=workflow.createStep(null,"Zone remove volumes mask: " + exportMask.getMaskName(),lastStep,nullURI,"network-system",_networkDeviceController.getClass(),zoneRemoveVolumesMethod,zoneNullRollbackMethod,null);      }    }  }  return lastStep;}  }
class C{  private static Element findSingleChildElementByTag(Element parent,String tag) throws MissionParseException {  Node node=null;  NodeList nodes=parent.getElementsByTagName(tag);  for (int i=0; i < nodes.getLength(); i++) {    node=nodes.item(i);    if (isElementNode(node)) {      break;    }    node=null;  }  if (!tag.equals(ELEMENT_NEXT_MOMENT) && node == null) {    throw new MissionParseException(tag + " could not be found.");  }  return (Element)node;}  }
class C{  public static boolean isValid(List<S2Point> vertices){  return new S2Loop(vertices).isValid();}  }
class C{  public PrincipalId(String name,String domain){  Validate.notEmpty(name,"name");  Validate.notEmpty(domain,"domain");  this._name=name;  this._domain=domain;}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData1);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            if (z1 > z2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            if (z1 > constant2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            if (z2 > constant1) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public XYItemRendererState initialise(Graphics2D g2,Rectangle2D dataArea,XYPlot plot,XYDataset data,PlotRenderingInfo info){  XYAreaRendererState state=new XYAreaRendererState(info);  state.setProcessVisibleItemsOnly(false);  return state;}  }
class C{  public void selectEntity(int en){  clearAttacks();  refreshAll();  if (clientgui.getClient().getGame().getEntity(en) != null) {    cen=en;    clientgui.setSelectedEntityNum(en);    clientgui.mechD.displayEntity(ce());    if (!ce().isOffBoard()) {      clientgui.getBoardView().highlight(ce().getPosition());    }    clientgui.getBoardView().select(null);    clientgui.getBoardView().cursor(null);    refreshAll();    clientgui.bv.centerOnHex(ce().getPosition());    clientgui.getMenuBar().setEntity(ce());    setTwistEnabled(ce().canChangeSecondaryFacing() && ce().getCrew().isActive());    setFlipArmsEnabled(ce().canFlipArms());    updateSearchlight();  } else {    System.err.println("FiringDisplay: tried to " + "select non-existant entity: " + en);  }  clientgui.getBoardView().clearFiringSolutionData();}  }
class C{  public void println(){  if (text != null) {    text.append(Out.NL);    col=0;  } else   super.println();}  }
class C{  public void addVetoableChangeListener(VetoableChangeListener listener){  if (m_changeSupport == null)   m_changeSupport=new VetoableChangeSupport(this);  if (listener != null)   m_changeSupport.addVetoableChangeListener(listener);}  }
class C{  public List<List<Integer>> fourSum(int[] num,int target){  List<List<Integer>> res=new ArrayList<List<Integer>>();  if (num == null || num.length < 4)   return res;  Arrays.sort(num);  for (int i=0; i < num.length - 3; i++) {    if (i > 0 && num[i] == num[i - 1])     continue;    for (int j=i + 1; j < num.length - 2; j++) {      if (j > i + 1 && num[j] == num[j - 1])       continue;      int newTar=target - num[i] - num[j];      int l=j + 1;      int r=num.length - 1;      while (l < r) {        if (l > j + 1 && num[l] == num[l - 1]) {          l++;          continue;        }        if (r < num.length - 1 && num[r] == num[r + 1]) {          r--;          continue;        }        int sum=num[l] + num[r];        if (sum < newTar)         l++; else         if (sum > newTar)         r--; else {          res.add(new ArrayList<Integer>(Arrays.asList(num[i],num[j],num[l],num[r])));          l++;          r--;        }      }    }  }  return res;}  }
class C{  public static AccountTotals createAccountTotals(final String rawJSON) throws TwitterException {  try {    final JSONObject json=new JSONObject(rawJSON);    return accountTotalsConstructor.newInstance(json);  } catch (  final InstantiationException e) {    throw new TwitterException(e);  }catch (  final IllegalAccessException e) {    throw new AssertionError(e);  }catch (  final InvocationTargetException e) {    throw new TwitterException(e);  }catch (  final JSONException e) {    throw new TwitterException(e);  }}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);}  }
class C{  public AttributeInUseException(String explanation){  super(explanation);}  }
class C{  public void copyInto(int strOffset,byte[] bytes,int arrayOffset,int len){  System.arraycopy(m_bytes,m_offset + strOffset,bytes,arrayOffset,len);}  }
class C{  public boolean isEmitBOM(){  return emitBOM;}  }
class C{  public BitSet isScanRequired(byte[][] blkMaxVal,byte[][] blkMinVal){  BitSet bitSet=new BitSet(1);  bitSet.flip(0,1);  return bitSet;}  }
class C{  public boolean inOverview(){  return false;}  }
class C{  protected void startShape(int tagType,int id,Rect outline) throws IOException {  startTag(tagType,id,true);  outline.write(out);}  }
class C{  public boolean isComplete(){  String ds=getDocStatus();  return DOCSTATUS_Completed.equals(ds) || DOCSTATUS_Closed.equals(ds) || DOCSTATUS_Reversed.equals(ds);}  }
class C{  public static String nullSafeToString(short[] array){  if (array == null) {    return NULL_STRING;  }  int length=array.length;  if (length == 0) {    return EMPTY_ARRAY;  }  StringBuffer buffer=new StringBuffer();  for (int i=0; i < length; i++) {    if (i == 0) {      buffer.append(ARRAY_START);    } else {      buffer.append(ARRAY_ELEMENT_SEPARATOR);    }    buffer.append(array[i]);  }  buffer.append(ARRAY_END);  return buffer.toString();}  }
class C{  private Token encapsulatedTokenLexer(Token tkn,int c) throws IOException {  int startLineNumber=getLineNumber();  for (; ; ) {    c=in.read();    if (c == '\\' && strategy.getUnicodeEscapeInterpretation() && in.lookAhead() == 'u') {      tkn.content.append((char)unicodeEscapeLexer(c));    } else     if (c == strategy.getEscape()) {      tkn.content.append((char)readEscape(c));    } else     if (c == strategy.getEncapsulator()) {      if (in.lookAhead() == strategy.getEncapsulator()) {        c=in.read();        tkn.content.append((char)c);      } else {        for (; ; ) {          c=in.read();          if (c == strategy.getDelimiter()) {            tkn.type=TT_TOKEN;            tkn.isReady=true;            return tkn;          } else           if (isEndOfFile(c)) {            tkn.type=TT_EOF;            tkn.isReady=true;            return tkn;          } else           if (isEndOfLine(c)) {            tkn.type=TT_EORECORD;            tkn.isReady=true;            return tkn;          } else           if (!isWhitespace(c)) {            throw new IOException("(line " + getLineNumber() + ") invalid char between encapsulated token end delimiter");          }        }      }    } else     if (isEndOfFile(c)) {      throw new IOException("(startline " + startLineNumber + ")"+ "eof reached before encapsulated token finished");    } else {      tkn.content.append((char)c);    }  }}  }
class C{  public static KeyczarReader generateKeyczarReader(DefaultKeyType type,KeyPurpose purpose) throws KeyczarException {  return generateKeyczarReader(type,purpose,type.defaultSize());}  }
class C{  public Builder fileName(String fileName){  return set("fileName",fileName);}  }
class C{  public static Test suite(String property){  return suite(addAll(property),getMissing(property));}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public final void write(BufferedDataOutputStream dos) throws IOException {  dos.writeInt(this.tok);  dos.writeInt(this.getVarLoc());  dos.writeInt(this.s.length());  dos.writeString(this.s);}  }
class C{  BayesNetRepresentation copy(){  BayesNetRepresentation b=new BayesNetRepresentation(m_nNodes);  b.m_bits=new boolean[m_bits.length];  for (int i=0; i < m_nNodes * m_nNodes; i++) {    b.m_bits[i]=m_bits[i];  }  b.m_fScore=m_fScore;  return b;}  }
class C{  public void testDetermineMetadata() throws Exception {  contextFactory.projectConfigs.put("moe_config.txt","{\"name\": \"foo\", \"repositories\": {\"internal\": {\"type\": \"dummy\"}}}");  ProjectContext context=contextFactory.create("moe_config.txt");  DetermineMetadataDirective d=new DetermineMetadataDirective(context,ui,new Migrator(new DraftRevision.Factory(ui),NO_SCRUBBERS,ui,null));  d.repositoryExpression="internal(revision=\"1,2\")";  assertEquals(0,d.perform());  RevisionMetadata expected=RevisionMetadata.builder().id("1, 2").author("author, author").date(new DateTime(1L)).description("description\n\n-------------\ndescription").withParents(Revision.create("parent","internal"),Revision.create("parent","internal")).build();  assertThat(stream.toString().trim()).isEqualTo(expected.toString().trim());}  }
class C{  public boolean handleFile(File file){  return true;}  }
class C{  private Attachment updateAttachment(int dbid,int filesize){  Attachment a=getDaoFactory().getDAO(Attachment.class).findById(dbid);  if (a.getFileSize() == null) {    PropertyType newType=HUITypeFactory.getInstance().getEntityType(a.getEntity().getEntityType()).getPropertyType(Attachment.PROP_SIZE);    a.getEntity().createNewProperty(newType,String.valueOf(filesize));  }  return a;}  }
class C{  public void testDecode() throws Exception {  Message expectedReturn=bindingRequest;  Message actualReturn=Message.decode(msgFixture.bindingRequest,(char)0,(char)msgFixture.bindingRequest.length);  assertEquals("A binding request was not properly decoded",expectedReturn,actualReturn);  expectedReturn=bindingResponse;  actualReturn=Message.decode(msgFixture.bindingResponse,(char)0,(char)msgFixture.bindingResponse.length);  assertEquals("A binding response was not properly decoded",expectedReturn,actualReturn);}  }
class C{  public boolean isEmpty(){  return n == 0;}  }
class C{  protected double[][] makeJointVectorForPast(double[] destination){  try {    return MatrixUtils.makeDelayEmbeddingVector(destination,k,k - 1,destination.length - k);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public String message(){  return message;}  }
class C{  public Object jjtAccept(PartitionParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case GamlPackage.MODEL__NAME:    return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);case GamlPackage.MODEL__PRAGMAS:  return pragmas != null && !pragmas.isEmpty();case GamlPackage.MODEL__IMPORTS:return imports != null && !imports.isEmpty();case GamlPackage.MODEL__BLOCK:return block != null;}return super.eIsSet(featureID);}  }
class C{  public BootstrapSampler(){}  }
class C{  public List children(){  return this.children;}  }
class C{  private static Range mnpUniquenessRange(String ref,String pred){  assert ref.length() == pred.length() && ref.length() > 1 && !ref.equals(pred);  int diffStart=0;  int diffEnd=ref.length() - 1;  while (ref.charAt(diffStart) == pred.charAt(diffStart)) {    diffStart++;  }  while (ref.charAt(diffEnd) == pred.charAt(diffEnd)) {    diffEnd--;  }  return new Range(diffStart,diffEnd + 1);}  }
class C{  protected List<TrazaAuditoriaVO> buildTrazasRegistro(IsicresAuditEventVO auditEvent){  List<TrazaAuditoriaVO> result=new ArrayList();  if (ConfiguratorAudit.getInstance().getPropertyBoolean(ConfigurationAuditFileKeys.KEY_AUDITORIA_ENABLE)) {    List<IsicresAuditoriaEventHandler> builders=getHandlers(auditEvent);    for (Iterator iterator=builders.iterator(); iterator.hasNext(); ) {      IsicresAuditoriaEventHandler isicresAuditoriaEventHandler=(IsicresAuditoriaEventHandler)iterator.next();      Object halderResult=isicresAuditoriaEventHandler.handle(auditEvent);      if (isicresAuditoriaEventHandler.getTypeHandler() == IsicresEventAuditHandlerTypeEnum.TRAZA_BUILDER) {        result.addAll((Collection<? extends TrazaAuditoriaVO>)halderResult);      }    }  }  return result;}  }
class C{  protected static void log(String s){  if (LOCAL_LOGV)   Log.v(TAG,s);}  }
class C{  protected void updateShape(OMGeometry geometry,Projection p,boolean forceProject){  if (forceProject) {    geometry.generate(p);  } else {    geometry.regenerate(p);  }  if (geometry.isVisible()) {    GeneralPath gp=geometry.getShape();    if (gp == null) {      return;    }    setShape(appendShapeEdge(getShape(),gp,connectParts));    geometry.setShape((GeneralPath)null);  }  setLabelLocation(getShape(),p);}  }
class C{  public boolean isInBitmapMemoryCache(final Uri uri){  if (uri == null) {    return false;  }  Predicate<CacheKey> bitmapCachePredicate=predicateForUri(uri);  return mBitmapMemoryCache.contains(bitmapCachePredicate);}  }
class C{  public static double acosInRange(double value){  if (value <= -1) {    return Math.PI;  } else   if (value >= 1) {    return 0.0;  } else {    return FastMath.acos(value);  }}  }
class C{  public void deleteCopy(RecoverPointVolumeProtectionInfo copyToDelete) throws RecoverPointException {  ConsistencyGroupCopyUID cgCopyUID=RecoverPointUtils.mapRPVolumeProtectionInfoToCGCopyUID(copyToDelete);  String copyName=null;  String cgName=null;  try {    copyName=functionalAPI.getGroupCopyName(cgCopyUID);    cgName=functionalAPI.getGroupName(cgCopyUID.getGroupUID());    List<ConsistencyGroupCopyUID> productionCopiesUIDs=functionalAPI.getGroupSettings(cgCopyUID.getGroupUID()).getProductionCopiesUIDs();    for (    ConsistencyGroupCopyUID productionCopyUID : productionCopiesUIDs) {      if (RecoverPointUtils.copiesEqual(productionCopyUID,cgCopyUID)) {        throw RecoverPointException.exceptions.cantCallDeleteCopyUsingProductionVolume(copyName,cgName);      }      functionalAPI.removeConsistencyGroupCopy(cgCopyUID);      logger.info("Deleted copy " + copyName + " for consistency group "+ cgName);    }  } catch (  FunctionalAPIActionFailedException_Exception e) {    throw RecoverPointException.exceptions.failedToDeleteCopy(copyName,cgName,e);  }catch (  FunctionalAPIInternalError_Exception e) {    throw RecoverPointException.exceptions.failedToDeleteCopy(copyName,cgName,e);  }}  }
class C{  private static boolean isSorted(Comparable[] a){  return isSorted(a,0,a.length - 1);}  }
class C{  public boolean isLoggingEnabled(){  return log.isLoggingEnabled();}  }
class C{  @Override public void initializeLogging(){  LogWrapper logWrapper=new LogWrapper();  Log.setLogNode(logWrapper);  MessageOnlyLogFilter msgFilter=new MessageOnlyLogFilter();  logWrapper.setNext(msgFilter);  LogFragment logFragment=(LogFragment)getSupportFragmentManager().findFragmentById(R.id.log_fragment);  msgFilter.setNext(logFragment.getLogView());  Log.i(TAG,"Ready");}  }
class C{  @SuppressWarnings("ErrorNotRethrown") private long allocate0(long size,boolean init,boolean reserved,AtomicLong cnt) throws GridOffHeapOutOfMemoryException {  assert size > 0;  if (!reserved)   cnt.addAndGet(size);  try {    long ptr=GridUnsafe.allocateMemory(size);    if (init)     fill(ptr,size,FREE);    if (lsnr != null)     lsnr.onEvent(ALLOCATE);    return ptr;  } catch (  OutOfMemoryError ignore) {    if (!reserved)     cnt.addAndGet(-size);    throw new GridOffHeapOutOfMemoryException(totalSize(),size);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (!Sage.WINDOWS_OS)   return null;  return DShowCaptureDevice.getAudioInputPaths0();}  }
class C{  @SuppressWarnings("unchecked") private void checkFieldsCompliance(){  for (  JDiffField field : jDiffFields) {    try {      Field f=findMatchingField(field);      if (f == null) {        mResultObserver.notifyFailure(SignatureTestActivity.FAILURE_TYPE.MISSING_FIELD,field.toReadableString(mAbsoluteClassName),"No field with correct signature found:" + field.toSignatureString());      } else       if (f.getModifiers() != field.mModifier) {        mResultObserver.notifyFailure(SignatureTestActivity.FAILURE_TYPE.MISMATCH_FIELD,field.toReadableString(mAbsoluteClassName),"Non-compatible field modifiers found when looking for " + field.toSignatureString());      } else       if (!f.getType().getCanonicalName().equals(field.mFieldType)) {        String genericTypeName=null;        Type type=f.getGenericType();        if (type != null) {          genericTypeName=type instanceof Class ? ((Class)type).getName() : type.toString();        }        if (genericTypeName == null || !genericTypeName.equals(field.mFieldType)) {          mResultObserver.notifyFailure(SignatureTestActivity.FAILURE_TYPE.MISMATCH_FIELD,field.toReadableString(mAbsoluteClassName),"Non-compatible field type found when looking for " + field.toSignatureString());        }      }    } catch (    Exception e) {      SignatureTestLog.e("Got exception when checking field compliance",e);      mResultObserver.notifyFailure(SignatureTestActivity.FAILURE_TYPE.CAUGHT_EXCEPTION,field.toReadableString(mAbsoluteClassName),"Exception!");    }  }}  }
class C{  public boolean next() throws GenericDataSourceException {  try {    return _rs.next();  } catch (  SQLException sqle) {    throw new GenericDataSourceException("SQL Exception while executing the following:" + _sql,sqle);  }}  }
class C{  public int size(){  Seg<K,V>[] segs=this.segs;  long sum=0;  long check=0;  int[] mc=new int[segs.length];  for (int k=0; k < RETRIES_BEFORE_LOCK; ++k) {    check=0;    sum=0;    int mcsum=0;    for (int i=0; i < segs.length; ++i) {      sum+=segs[i].cnt;      mcsum+=mc[i]=segs[i].modCnt;    }    if (mcsum != 0) {      for (int i=0; i < segs.length; ++i) {        check+=segs[i].cnt;        if (mc[i] != segs[i].modCnt) {          check=-1;          break;        }      }    }    if (check == sum)     break;  }  if (check != sum) {    sum=0;    for (int i=0; i < segs.length; ++i)     segs[i].lock();    for (int i=0; i < segs.length; ++i)     sum+=segs[i].cnt;    for (int i=0; i < segs.length; ++i)     segs[i].unlock();  }  if (sum > Integer.MAX_VALUE)   return Integer.MAX_VALUE; else   return (int)sum;}  }
class C{  public int length(){  return length;}  }
class C{  public static void clearCache(String prefix){  clearCache(defaultPath,prefix);}  }
class C{  public static String buildSdpAnswer(VideoCodec codec,int localRtpPort,MediaDescription inviteVideoMedia){  if (inviteVideoMedia != null) {    SdpOrientationExtension extension=SdpOrientationExtension.create(inviteVideoMedia);    if (extension != null) {      return buildSdpWithOrientationExtension(codec,localRtpPort,extension.getExtensionId());    }  }  return buildSdpWithoutOrientation(codec,localRtpPort);}  }
class C{  public EmailListRecipientEntry(){  super();  getCategories().add(EMAILLIST_RECIPIENT_CATEGORY);}  }
class C{  void syncProgress(SeekBar seekBar){  int progress=seekBar.getProgress();  if (progress != mProgress) {    if (callChangeListener(progress)) {      setProgress(progress,false);    } else {      seekBar.setProgress(mProgress);    }  }}  }
class C{  public DateTime(Calendar value){  this.value=value.getTimeInMillis() * 10000 + OffsetToGregorianCalendarZero;}  }
class C{  public static CgSamBamSequenceDataSource fromInputFiles(List<File> files,boolean flattenPaired,SamFilter filter){  return new CgSamBamSequenceDataSource(new FileStreamIterator(files,null),flattenPaired,filter);}  }
class C{  public void blurPhoto(final Activity context,final String artist,final String album){  Bitmap artistImage=mFetcher.getCachedBitmap(artist);  if (artistImage == null) {    artistImage=mFetcher.getCachedArtwork(album,artist);  }  if (artistImage == null) {    artistImage=BitmapFactory.decodeResource(getResources(),R.drawable.theme_preview);  }  if (artistImage != null) {    try {      final Bitmap blur=BitmapUtils.createBlurredBitmap(artistImage);      mPhoto.setImageBitmap(blur);    } catch (    Throwable t) {    }  }}  }
class C{  public void adjustmentValueChanged(AdjustmentEvent e){  ((AdjustmentListener)a).adjustmentValueChanged(e);  ((AdjustmentListener)b).adjustmentValueChanged(e);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("C_AcctSchema_ID"))     p_C_AcctSchema_ID=para[i].getParameterAsInt(); else     if (name.equals("C_ConversionTypeReval_ID"))     p_C_ConversionTypeReval_ID=para[i].getParameterAsInt(); else     if (name.equals("DateReval"))     p_DateReval=(Timestamp)para[i].getParameter(); else     if (name.equals("APAR"))     p_APAR=(String)para[i].getParameter(); else     if (name.equals("IsAllCurrencies"))     p_IsAllCurrencies="Y".equals((String)para[i].getParameter()); else     if (name.equals("C_Currency_ID"))     p_C_Currency_ID=para[i].getParameterAsInt(); else     if (name.equals("C_DocTypeReval_ID"))     p_C_DocTypeReval_ID=para[i].getParameterAsInt(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  public static void centerActor(final Actor actor,final Stage stage){  if (actor != null && stage != null) {    actor.setPosition((int)(stage.getWidth() / 2f - actor.getWidth() / 2f),(int)(stage.getHeight() / 2f - actor.getHeight() / 2f));  }}  }
class C{  public ProxyCacheResource(){  this(false);}  }
class C{  @Override public void clear(){  array=ArrayUtilRt.EMPTY_OBJECT_ARRAY;}  }
class C{  public static int readInt(int r){  if (r < 1 || r > 32)   throw new IllegalArgumentException("Illegal value of r = " + r);  if (r == 32)   return readInt();  int x=0;  for (int i=0; i < r; i++) {    x<<=1;    boolean bit=readBoolean();    if (bit)     x|=1;  }  return x;}  }
class C{  protected boolean pluginMetricIsMaximisable(AbstractEvaluationMetric m,String statName){  return m.statisticIsMaximisable(statName);}  }
class C{  private void adjustRightByAspectRatio(RectF rect,float aspectRatio){  rect.right=rect.left + rect.height() * aspectRatio;}  }
class C{  public final boolean sendMessage(Message msg){  return mExec.sendMessage(msg);}  }
class C{  public static INode randomize(int n){  INode prev=goal;  ArrayList<INode> visited=new ArrayList<INode>();  visited.add(goal);  while (n > 0) {    ArrayList<INode> nodes=new ArrayList<INode>();    for (Iterator<IMove> it=prev.validMoves().iterator(); it.hasNext(); ) {      INode copy=prev.copy();      IMove move=it.next();      move.execute(copy);      copy.storedData(new Transition(move,prev));      if (!visited.contains(copy)) {        nodes.add(copy);      }    }    int numFailures=5;    while (numFailures > 0) {      try {        int rnd=(int)(Math.random() * nodes.size());        prev=nodes.get(rnd);        break;      } catch (      IndexOutOfBoundsException ioobe) {        numFailures--;      }    }    visited.add(prev);    n--;  }  return prev;}  }
class C{  public final void log(String filename,int lineNumber,String method,String tag,int level,String message){  final LogMessage lm=new LogMessage(LogMessage.LOGMSG_TYPE_LOG,nextSequenceNumber.getAndIncrement());  lm.addInt16(level,LogMessage.PART_KEY_LEVEL);  if (filename != null) {    lm.addString(filename,LogMessage.PART_KEY_FILENAME);    if (lineNumber != 0)     lm.addInt32(lineNumber,LogMessage.PART_KEY_LINENUMBER);  }  if (method != null)   lm.addString(method,LogMessage.PART_KEY_FUNCTIONNAME);  if (tag != null && !tag.isEmpty())   lm.addString(tag,LogMessage.PART_KEY_TAG);  lm.addString(message,LogMessage.PART_KEY_MESSAGE);  log(lm);}  }
class C{  private void focusFirst(){  if (this.listElement.hasChildNodes()) {    this.listElement.getFirstElementChild().focus();  }}  }
class C{  public HttpServletResponse postExecute(HttpServletResponse response){  if (logger.isDebugLoggingEnabled()) {    logger.logDebug("postExecute " + this);  }  return response;}  }
class C{  public void handleNotification(Notification notification,Object hb){  AdminDistributedSystemJmxImpl systemJmx=(AdminDistributedSystemJmxImpl)this.system;  if (!systemJmx.isRmiClientCountZero()) {    Helper.handleNotification(this,notification,hb);  }}  }
class C{  public AbstractRdfRepositoryIntegrationTestBase(){  this(WikibaseUris.getURISystem());}  }
class C{  public void showPopupMenu(int reactTag,ReadableArray items,Callback error,Callback success){  assertViewExists(reactTag,"showPopupMenu");  mOperationsQueue.enqueueShowPopupMenu(reactTag,items,error,success);}  }
class C{  public void actionPerformed(ActionEvent x){  JComponent component=Autoscroller.component;  if (component == null || !component.isShowing() || (event == null)) {    _stop(component);    return;  }  Point screenLocation=component.getLocationOnScreen();  MouseEvent e=new MouseEvent(component,event.getID(),event.getWhen(),event.getModifiers(),event.getX() - screenLocation.x,event.getY() - screenLocation.y,event.getXOnScreen(),event.getYOnScreen(),event.getClickCount(),event.isPopupTrigger(),MouseEvent.NOBUTTON);  component.superProcessMouseMotionEvent(e);}  }
class C{  public boolean configureFixedIPLease(IPv4Address ip,MacAddress mac){  DHCPBinding binding=this.getDHCPbindingFromIPv4(ip);  if (binding != null) {    binding.setMACAddress(mac);    binding.setStaticIPLease(true);    binding.setLeaseStatus(false);    return true;  } else {    return false;  }}  }
class C{  @Override public void onClick(float x,float y,float scale){  for (int i=0, poisSize=pois.size(); i < poisSize; i++) {    POI poi=pois.get(i);    if (poi.contains(x,y,scale)) {      Toast.makeText(context,poi.name,Toast.LENGTH_LONG).show();      animateTo(x,y);      break;    }  }}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case StextPackage.REACTION_TRIGGER__TRIGGERS:    return triggers != null && !triggers.isEmpty();case StextPackage.REACTION_TRIGGER__GUARD:  return guard != null;}return super.eIsSet(featureID);}  }
class C{  public ProjectTodoIdObject(ProjectTodoIdObject parent){  this.id=parent.getId();  this.projectId=parent.getProjectId();  this.todoId=parent.getTodoId();}  }
class C{  public void add(SwapValue val) throws IgniteSpiException {  lock.lock();  try {    boolean largeVal=val.len > maxSize;    if (largeVal) {      if (!queueSizeWarn) {        U.warn(log,"Trying to save in swap entry which have size more than write queue size. " + "You may wish to increase 'maxWriteQueueSize' in FileSwapSpaceSpi configuration " + "[queueMaxSize=" + maxSize + ", valSize="+ val.len+ ']');        queueSizeWarn=true;      }      while (size >= minTakeSize)       mayAdd.await();    } else {      while (size + val.len > maxSize)       mayAdd.await();    }    size+=val.len;    deq.addLast(val);    if (size >= minTakeSize)     mayTake.signalAll();  } catch (  InterruptedException e) {    throw new IgniteSpiException(e);  } finally {    lock.unlock();  }}  }
class C{  public void reset(){  internalReset(0L);}  }
class C{  public SwingWindowsBuilderTest(){  setTitle("JavaStud");  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  setBounds(100,100,480,340);  contentPane=new JPanel();  contentPane.setBorder(new EmptyBorder(5,5,5,5));  setContentPane(contentPane);  contentPane.setLayout(null);  contentPane.add(getNameLabel());  contentPane.add(getNameText());  contentPane.add(getBtnOk());  contentPane.add(getStatusLabel());  contentPane.add(getPanel());  contentPane.add(getChckbxAge());  contentPane.add(getComboBox());  contentPane.add(getPasswordField());  contentPane.add(getSeparator());}  }
class C{  void deleteStore(){  String file=getFileName();  if (file != null) {    FileUtils.delete(file);  }}  }
class C{  public T caseMultilineComment_(MultilineComment_ object){  return null;}  }
class C{  @Override public void addRuleInstances(Digester digester){  digester.addObjectCreate("profiles",Profiles.class);  digester.addObjectCreate(PROFILES_PROFILE,Profile.class);  digester.addObjectCreate(PROFILES_PROFILE_SETTING,Setting.class);  digester.addSetNext(PROFILES_PROFILE,"addProfile");  digester.addSetNext(PROFILES_PROFILE_SETTING,"addSetting");  digester.addSetProperties(PROFILES_PROFILE,"kind","kind");  digester.addSetProperties(PROFILES_PROFILE_SETTING,"id","id");  digester.addSetProperties(PROFILES_PROFILE_SETTING,"value","value");}  }
class C{  public int min(){  if (size() == 0) {    throw new IllegalStateException("cannot find minimum of an empty list");  }  int min=_data[_pos - 1];  for (int i=_pos - 1; i-- > 0; ) {    min=Math.min(min,_data[_pos]);  }  return min;}  }
class C{  public MovingAverageTask(final String name,final Callable<? extends Number> sampleTask,final double w){  if (name == null)   throw new IllegalArgumentException();  if (sampleTask == null)   throw new IllegalArgumentException();  if (w <= 0d || w >= 1d)   throw new IllegalArgumentException();  this.name=name;  this.sampleTask=sampleTask;  this.w=w;}  }
class C{  public String post(String url,Bundle params,Bundle headers) throws ParseException, ClientProtocolException, IOException {  final DefaultHttpClient client=newClient();  HttpPost post=new HttpPost(url);  AndroidHttpClient.modifyRequestToAcceptGzipResponse(post);  if (headers != null) {    for (    String key : headers.keySet()) {      post.addHeader(key,headers.getString(key));    }  }  if (params != null) {    List<NameValuePair> pairs=new ArrayList<NameValuePair>();    for (    String key : params.keySet()) {      pairs.add(new BasicNameValuePair(key,params.getString(key)));    }    post.setEntity(new UrlEncodedFormEntity(pairs));  }  HttpResponse response=client.execute(post);  int statusCode=response.getStatusLine().getStatusCode();  if (statusCode == HttpStatus.NO_CONTENT) {    logger.debug("HTTP 204 NO CONTENT");    if (response.containsHeader("Set-Cookie")) {      Header header=response.getFirstHeader("Set-Cookie");      JSONObject json=new JSONObject();      try {        json.put("cookie",header.getValue());      } catch (      JSONException e) {        logger.error(e);      }      client.getConnectionManager().shutdown();      return json.toString();    }  } else   if (statusCode == HttpStatus.UNAUTHORIZED) {    logger.debug("Response of HTTP 401");    JSONObject json=new JSONObject();    try {      json.put("error","401");    } catch (    JSONException e) {      logger.error(e);    }    client.getConnectionManager().shutdown();    return json.toString();  }  InputStream inputStream=AndroidHttpClient.getUngzippedContent(response.getEntity());  String strRes=IOUtils.toString(inputStream,Charset.defaultCharset());  client.getConnectionManager().shutdown();  return strRes;}  }
class C{  void pulse(){  if (previousPlacementTicks > 0 && --previousPlacementTicks == 0) {    previousPlacement=null;  }  Message message;  while ((message=messageQueue.poll()) != null) {    if (disconnected) {      break;    }    super.messageReceived(message);  }  if (disconnected) {    connectionManager.sessionInactivated(this);    if (player == null) {      return;    }    player.remove();    Message userListMessage=UserListItemMessage.removeOne(player.getUniqueId());    for (    GlowPlayer player : server.getRawOnlinePlayers()) {      if (player.canSee(this.player)) {        player.getSession().send(userListMessage);      } else {        player.stopHidingDisconnectedPlayer(this.player);      }    }    GlowServer.logger.info(player.getName() + " [" + address+ "] lost connection");    if (player.isSleeping()) {      player.leaveBed(false);    }    String text=EventFactory.onPlayerQuit(player).getQuitMessage();    if (online && text != null && !text.isEmpty()) {      server.broadcastMessage(text);    }    player=null;  }}  }
class C{  public static boolean instanceofDoubleArray(Object o){  return getImplementation().instanceofDoubleArray(o);}  }
class C{  public static void main(String[] args){  System.out.println(getVersion());}  }
class C{  private void fixVerticalAlignment(LayoutResult lr,Rectangle r){  int delta=0;  if (r.y < viewRect.y) {    delta=viewRect.y - r.y;  } else   if (r.y + r.height > viewRect.y + viewRect.height) {    delta=viewRect.y + viewRect.height - r.y - r.height;  }  if (delta != 0) {    lr.checkRect.y+=delta;    lr.iconRect.y+=delta;    lr.textRect.y+=delta;    lr.accRect.y+=delta;    lr.arrowRect.y+=delta;    lr.labelRect.y+=delta;  }}  }
class C{  public static IMultipart createPart(ResourceLocation partType,PacketBuffer buf){  IAdvancedPartFactory factory=partProviders.get(partType);  return factory == null ? null : factory.createPart(partType,buf);}  }
class C{  public Iterator<byte[]> keysBkp(final boolean up) throws IOException {  return this.bkpbase.keys(up,false);}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == ScriptElement.class) {switch (derivedFeatureID) {default :      return -1;  }}if (baseClass == AnnotableScriptElement.class) {switch (derivedFeatureID) {case N4JSPackage.N4_TYPE_DECLARATION__ANNOTATION_LIST:    return N4JSPackage.ANNOTABLE_SCRIPT_ELEMENT__ANNOTATION_LIST;default :  return -1;}}if (baseClass == ModifiableElement.class) {switch (derivedFeatureID) {case N4JSPackage.N4_TYPE_DECLARATION__DECLARED_MODIFIERS:return N4JSPackage.MODIFIABLE_ELEMENT__DECLARED_MODIFIERS;default :return -1;}}if (baseClass == ExportableElement.class) {switch (derivedFeatureID) {default :return -1;}}if (baseClass == NamedElement.class) {switch (derivedFeatureID) {default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public void run(){  try {synchronized (this) {      while (true) {        while (this.poolFile == null || this.isFull || !this.canRead) {          this.wait();          if (this.finished) {            return;          }        }        ValueInputStream vis=new ValueInputStream(this.poolFile);        for (int i=0; i < this.buf.length; i++) {          this.buf[i]=TLCState.Empty.createEmpty();          this.buf[i].read(vis);        }        vis.close();        this.poolFile=null;        this.isFull=true;      }    }  } catch (  Exception e) {    MP.printError(EC.SYSTEM_ERROR_READING_POOL,e.getMessage(),e);    System.exit(1);  }}  }
class C{  YearMonth(YearMonth partial,Chronology chrono){  super(partial,chrono);}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  throw new NotSerializableException();}  }
class C{  public BatchSentenceScript(Session s,String script){  super(s);  m_sScript=script;}  }
class C{  public NodeList convertToNodeset(){  if (m_obj instanceof NodeList)   return (NodeList)m_obj; else   return new org.apache.xml.dtm.ref.DTMNodeList(asNodeIterator());}  }
class C{  protected static SQLException convertException(Exception e){  SQLException e2=new SQLException("Error while indexing document","FULLTEXT");  e2.initCause(e);  return e2;}  }
class C{  public void addChild(final Condition condition){  if (children == null) {    children=new ArrayList<Condition>();  }  children.add(condition);}  }
class C{  public int numLevels(){  return this.levels.length;}  }
class C{  public int readUByte(int index){  if (!this.boundsCheck(index,1)) {    throw new IndexOutOfBoundsException("Index attempted to be read from is out of bounds: " + Integer.toHexString(index));  }  int b=this.array.get(this.boundOffset(index));  if (b < 0) {    throw new IndexOutOfBoundsException("Index attempted to be read from is out of bounds: " + Integer.toHexString(index));  }  return b;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) public void loadWmlObject(String SID,Long room_id,Long fileExplorerItemId,Long whiteboardId){  try {    Long users_id=sessionManagement.checkSession(SID);    Long user_level=userManagement.getUserLevelByID(users_id);    if (authLevelManagement.checkUserLevel(user_level)) {      IConnection current=Red5.getConnectionLocal();      RoomClient currentClient=this.clientListManager.getClientByStreamId(current.getClient().getId());      if (currentClient == null) {        return;      }      String current_dir=ScopeApplicationAdapter.webAppPath + File.separatorChar + OpenmeetingsVariables.UPLOAD_DIR+ File.separatorChar;      log.debug("### this is my working directory: " + current_dir);      FileExplorerItem fileExplorerItem=fileExplorerItemDao.getFileExplorerItemsById(fileExplorerItemId);      ArrayList roomItems=libraryWmlLoader.loadWmlFile(current_dir,fileExplorerItem.getWmlFilePath());      Map whiteboardObjClear=new HashMap();      whiteboardObjClear.put(2,"clear");      whiteboardObjClear.put(3,null);      WhiteboardManagement.getInstance().addWhiteBoardObjectById(room_id,whiteboardObjClear,whiteboardId);      for (int k=0; k < roomItems.size(); k++) {        ArrayList actionObject=(ArrayList)roomItems.get(k);        Map whiteboardObj=new HashMap();        whiteboardObj.put(2,"draw");        whiteboardObj.put(3,actionObject);        WhiteboardManagement.getInstance().addWhiteBoardObjectById(room_id,whiteboardObj,whiteboardId);      }      Map<String,Object> sendObject=new HashMap<String,Object>();      sendObject.put("id",whiteboardId);      sendObject.put("roomitems",roomItems);      Collection<Set<IConnection>> conCollection=current.getScope().getConnections();      for (      Set<IConnection> conset : conCollection) {        for (        IConnection conn : conset) {          if (conn != null) {            if (conn instanceof IServiceCapableConnection) {              RoomClient rcl=this.clientListManager.getClientByStreamId(conn.getClient().getId());              if ((rcl == null) || (rcl.getIsScreenClient() != null && rcl.getIsScreenClient())) {                continue;              } else {                ((IServiceCapableConnection)conn).invoke("loadWmlToWhiteboardById",new Object[]{sendObject},this);              }            }          }        }      }    }  } catch (  Exception err) {    log.error("[loadWmlObject] ",err);  }}  }
class C{  public static Object[] formObjectArray(double[] data){  Object[] object=new Double[data.length];  for (int i=0; i < object.length; i++) {    object[i]=new Double(data[i]);  }  return object;}  }
class C{  @Override public synchronized void invalidate(String key,boolean fullExpire){  Entry entry=get(key);  if (entry != null) {    entry.softTtl=0;    if (fullExpire) {      entry.ttl=0;    }    put(key,entry);  }}  }
class C{  public static byte[] decrypt(final SecretKeySpec key,final byte[] iv,final byte[] decodedCipherText) throws GeneralSecurityException {  final Cipher cipher=Cipher.getInstance(AES_MODE);  IvParameterSpec ivSpec=new IvParameterSpec(iv);  cipher.init(Cipher.DECRYPT_MODE,key,ivSpec);  byte[] decryptedBytes=cipher.doFinal(decodedCipherText);  return decryptedBytes;}  }
class C{  private void returnReferences(Transaction tx,AMQSession session) throws Exception {  if (session == null || session.isClosed()) {    return;  }  RefsOperation oper=(RefsOperation)tx.getProperty(TransactionPropertyIndexes.REFS_OPERATION);  if (oper != null) {    List<MessageReference> ackRefs=oper.getReferencesToAcknowledge();    for (ListIterator<MessageReference> referenceIterator=ackRefs.listIterator(ackRefs.size()); referenceIterator.hasPrevious(); ) {      MessageReference ref=referenceIterator.previous();      Long consumerID=ref.getConsumerId();      ServerConsumer consumer=null;      if (consumerID != null) {        consumer=session.getCoreSession().locateConsumer(consumerID);      }      if (consumer != null) {        referenceIterator.remove();        ref.incrementDeliveryCount();        consumer.backToDelivering(ref);      }    }  }}  }
class C{  public PartitionUtil(int partitionLength,int[] count,int[] length){  if (partitionLength < 1 || partitionLength > 32768) {    throw new IllegalArgumentException("partitionLength must be between 0 and 32768");  }  if ((partitionLength & partitionLength - 1) != 0) {    throw new IllegalArgumentException("partitionLength must be 2^n");  }  if (count == null || length == null || (count.length != length.length)) {    throw new IllegalArgumentException("error,check your scope & scopeLength definition.");  }  this.partitionLength=partitionLength;  this.andValue=partitionLength - 1;  this.segment=new int[partitionLength];  int segmentLength=0;  for (int i=0; i < count.length; i++) {    segmentLength+=count[i];  }  int[] ai=new int[segmentLength + 1];  int index=0;  for (int i=0; i < count.length; i++) {    for (int j=0; j < count[i]; j++) {      ai[++index]=ai[index - 1] + length[i];    }  }  if (ai[ai.length - 1] != this.partitionLength) {    throw new IllegalArgumentException("error,check your partitionScope definition.");  }  for (int i=1; i < ai.length; i++) {    for (int j=ai[i - 1]; j < ai[i]; j++) {      segment[j]=(i - 1);    }  }}  }
class C{  @Override public boolean isBusy(){  return (m_ioThread != null);}  }
class C{  public void sort(){  List<InstalledApp> old_list=new ArrayList<InstalledApp>(_installed_apps);  Collections.sort(_installed_apps,_get_comparator());  for (  InstalledApp app : _installed_apps) {    notifyItemMoved(old_list.indexOf(app),_installed_apps.indexOf(app));  }}  }
class C{  public static double normVectorCoefOfPerpendicularProjection(double x,double y,double v0x,double v0y,double vdx,double vdy){  double numerator=(x - v0x) * vdx + (y - v0y) * vdy;  double denomenator=vdx * vdx + vdy * vdy;  double r=numerator / denomenator;  return r;}  }
class C{  public Instances kNearestNeighbours(Instance target,int kNN) throws Exception {  boolean print=false;  if (m_Stats != null)   m_Stats.searchStart();  MyHeap heap=new MyHeap(kNN);  double distance;  int firstkNN=0;  for (int i=0; i < m_Instances.numInstances(); i++) {    if (target == m_Instances.instance(i))     continue;    if (m_Stats != null)     m_Stats.incrPointCount();    if (firstkNN < kNN) {      if (print)       System.out.println("K(a): " + (heap.size() + heap.noOfKthNearest()));      distance=m_DistanceFunction.distance(target,m_Instances.instance(i),Double.POSITIVE_INFINITY,m_Stats);      if (distance == 0.0 && m_SkipIdentical)       if (i < m_Instances.numInstances() - 1)       continue; else       heap.put(i,distance);      heap.put(i,distance);      firstkNN++;    } else {      MyHeapElement temp=heap.peek();      if (print)       System.out.println("K(b): " + (heap.size() + heap.noOfKthNearest()));      distance=m_DistanceFunction.distance(target,m_Instances.instance(i),temp.distance,m_Stats);      if (distance == 0.0 && m_SkipIdentical)       continue;      if (distance < temp.distance) {        heap.putBySubstitute(i,distance);      } else       if (distance == temp.distance) {        heap.putKthNearest(i,distance);      }    }  }  Instances neighbours=new Instances(m_Instances,(heap.size() + heap.noOfKthNearest()));  m_Distances=new double[heap.size() + heap.noOfKthNearest()];  int[] indices=new int[heap.size() + heap.noOfKthNearest()];  int i=1;  MyHeapElement h;  while (heap.noOfKthNearest() > 0) {    h=heap.getKthNearest();    indices[indices.length - i]=h.index;    m_Distances[indices.length - i]=h.distance;    i++;  }  while (heap.size() > 0) {    h=heap.get();    indices[indices.length - i]=h.index;    m_Distances[indices.length - i]=h.distance;    i++;  }  m_DistanceFunction.postProcessDistances(m_Distances);  for (int k=0; k < indices.length; k++) {    neighbours.add(m_Instances.instance(indices[k]));  }  if (m_Stats != null)   m_Stats.searchFinish();  return neighbours;}  }
class C{  static private String toUpperCaseFast(final String s){  boolean different=false;  final int mx=s.length();  char[] chars=new char[mx];  for (int i=0; i < mx; i++) {    char ch=s.charAt(i);    if ('a' <= ch && ch <= 'z') {      ch=(char)(ch + ('A' - 'a'));      different=true;    }    chars[i]=ch;  }  final String upper;  if (different)   upper=String.valueOf(chars); else   upper=s;  return upper;}  }
class C{  void clear(){  while (oldest != null) {    Sample removed=oldest;    oldest=removed.next;    pool.release(removed);  }  newest=null;  sampleCount=0;  acceleratingCount=0;}  }
class C{  public ColorList rotateRYB(int angle){  for (  TColor c : colors) {    c.rotateRYB(angle);  }  return this;}  }
class C{  public void addMouseListener(final EventHandler<MouseEvent> handler){  addOnMouseClickedListener(handler);  addOnMouseEnteredListener(handler);  addOnMouseExitedListener(handler);  addOnMousePressedListener(handler);  addOnMouseReleasedListener(handler);  addOnMouseDraggedListener(handler);  addOnMouseMovedListener(handler);}  }
class C{  public void resetDefaults(){  this.transactional=true;  this.skipMaintenance=false;  this.cancelMaintenance=false;  this.skipOpenedEvent=false;  this.maxCachedIncidenceSetSize=10000;  this.useSystemAtomAttributes=true;}  }
class C{  public void test_type_casts_unsigned_long() throws Exception {  new TestHelper("type_cast_unsigned_long","type_cast_unsigned_long.rq","empty.trig","type_cast_unsigned_long.srx").runTest();}  }
class C{  public ObjectFactory(){}  }
class C{  private void checkReadOnlyParent(File target,Throwable exception) throws CoreException {  File parent=target.getParentFile();  if (parent != null && (attributes(parent) & EFS.ATTRIBUTE_READ_ONLY) != 0) {    String message=NLS.bind(Messages.readOnlyParent,target.getAbsolutePath());    Policy.error(EFS.ERROR_PARENT_READ_ONLY,message,exception);  }}  }
class C{  protected void ensureCapacity(int newCapacity){  int oldCapacity=data.length;  if (newCapacity <= oldCapacity) {    return;  }  if (size == 0) {    threshold=calculateThreshold(newCapacity,loadFactor);    data=new HashEntry[newCapacity];  } else {    HashEntry oldEntries[]=data;    HashEntry newEntries[]=new HashEntry[newCapacity];    modCount++;    for (int i=oldCapacity - 1; i >= 0; i--) {      HashEntry entry=oldEntries[i];      if (entry != null) {        oldEntries[i]=null;        do {          HashEntry next=entry.next;          int index=hashIndex(entry.hashCode,newCapacity);          entry.next=newEntries[index];          newEntries[index]=entry;          entry=next;        } while (entry != null);      }    }    threshold=calculateThreshold(newCapacity,loadFactor);    data=newEntries;  }}  }
class C{  public void close(){synchronized (closeLock) {    if (!is_open)     return;    ArrayList<Throwable> problems=new ArrayList<Throwable>();    try {      eventManager.dispatch(this,new HGClosingEvent());    } catch (    Throwable t) {      problems.add(t);    }    try {      replace(statsHandle,stats);    } catch (    Throwable t) {      problems.add(t);    }    try {      cache.close();    } catch (    Throwable t) {      problems.add(t);    }    try {      idx_manager.close();    } catch (    Throwable t) {      problems.add(t);    }    try {      eventManager.clear();    } catch (    Throwable t) {      problems.add(t);    }    try {      store.close();    } catch (    Throwable t) {      problems.add(t);    }    is_open=false;    for (    Throwable t : problems) {      System.err.println("Problem during HyperGraph close, stack trace of exception follows:");      t.printStackTrace(System.err);    }  }}  }
class C{  public void afterEmitGetter(JavaFileWriter writer,PropertyGenerator propertyGenerator,MethodDeclarationParameters getterParams) throws IOException {}  }
class C{  public void updateAttributeValue(String ns,String ln,AnimatableValue val){  LiveAttributeValue a=getLiveAttributeValue(ns,ln);  ((AbstractSVGAnimatedValue)a).updateAnimatedValue(val);}  }
class C{  public static float byteToFloat(byte b,int numMantissaBits,int zeroExp){  if (b == 0)   return 0.0f;  int bits=(b & 0xff) << (24 - numMantissaBits);  bits+=(63 - zeroExp) << 24;  return Float.intBitsToFloat(bits);}  }
class C{  protected Map<String,String> doRequest(String httpsURL,String requestMethod,OAuthParameters oparams,String body){  if (privateKey == null) {    throw new MCApiRuntimeException(new UnrecoverableKeyException(NULL_PRIVATEKEY_ERROR_MESSAGE));  }  if (body != null && body.length() > 0) {    oparams=setOauthBodyHashParameter(body,oparams);  }  HttpsURLConnection con=null;  try {    con=setupConnection(httpsURL,requestMethod,oparams,body);    con.connect();    if (body != null) {      writeBodyToConnection(body,con);    }    return checkForErrorsAndReturnResponse(con);  } catch (  IOException e) {    throw new MCApiRuntimeException(e);  } finally {    if (con != null) {      con.disconnect();    }  }}  }
class C{  public org.apache.flex.forks.batik.script.Window createWindow(){  return createWindow(null,null);}  }
class C{  @Override public Overlay buildOverlay(MapView map,Style defaultStyle,Styler styler,KmlPlacemark kmlPlacemark,KmlDocument kmlDocument){  Polyline lineStringOverlay=new Polyline();  lineStringOverlay.setGeodesic(true);  lineStringOverlay.setPoints(mCoordinates);  lineStringOverlay.setTitle(kmlPlacemark.mName);  lineStringOverlay.setSnippet(kmlPlacemark.mDescription);  lineStringOverlay.setSubDescription(kmlPlacemark.getExtendedDataAsText());  if (styler != null)   styler.onLineString(lineStringOverlay,kmlPlacemark,this); else {    applyDefaultStyling(lineStringOverlay,defaultStyle,kmlPlacemark,kmlDocument,map);  }  return lineStringOverlay;}  }
class C{  public void testInvalidateLock() throws IOException {  Directory dir=getDirectory(createTempDir());  NativeFSLockFactory.NativeFSLock lock=(NativeFSLockFactory.NativeFSLock)dir.obtainLock("test.lock");  lock.ensureValid();  lock.lock.release();  expectThrows(AlreadyClosedException.class,null);  IOUtils.closeWhileHandlingException(lock);  dir.close();}  }
class C{  @Deprecated public static InputStream openStreamAtUrl(String uri){  InputStream is=null;  try {    final URLConnection uc=new URL(uri).openConnection();    System.setProperty("sun.net.client.defaultConnectTimeout",String.valueOf(10 * 1000));    System.setProperty("sun.net.client.defaultReadTimeout",String.valueOf(30 * 1000));    uc.connect();    is=uc.getInputStream();  } catch (  java.net.MalformedURLException e) {    XRLog.exception("bad URL given: " + uri,e);  }catch (  FileNotFoundException e) {    XRLog.exception("item at URI " + uri + " not found");  }catch (  IOException e) {    XRLog.exception("IO problem for " + uri,e);  }  return is;}  }
class C{  private void useGameAndClose(){  save=true;  setVisible(false);}  }
class C{  public Object load(NBTTagCompound tag,String key){  if (tag != null && key != null) {    NBTBase saveTag=tag.getTag(key);    if (saveTag instanceof NBTTagFloat) {      return tag.getFloat(key);    } else     if (saveTag instanceof NBTTagDouble) {      return tag.getDouble(key);    } else     if (saveTag instanceof NBTTagInt) {      return tag.getInteger(key);    } else     if (saveTag instanceof NBTTagString) {      return tag.getString(key);    } else     if (saveTag instanceof NBTTagShort) {      return tag.getShort(key);    } else     if (saveTag instanceof NBTTagByte) {      if (tag.getBoolean("isBoolean")) {        return tag.getBoolean(key);      } else {        return tag.getByte(key);      }    } else     if (saveTag instanceof NBTTagLong) {      return tag.getLong(key);    } else     if (saveTag instanceof NBTTagByteArray) {      return tag.getByteArray(key);    } else     if (saveTag instanceof NBTTagIntArray) {      return tag.getIntArray(key);    } else     if (saveTag instanceof NBTTagCompound) {      NBTTagCompound innerTag=tag.getCompoundTag(key);      return toNova(innerTag);    }  }  return null;}  }
class C{  public void validateVarEntryId(SnmpOid rowOid,long var,Object data) throws SnmpStatusException {  node.validateVarId(var,data);}  }
class C{  @Override public V put(K key,V value){  K k=(K)maskNull(key);  int h=System.identityHashCode(k);  Entry<K,V>[] tab=getTable();  int i=indexFor(h,tab.length);  for (Entry<K,V> e=tab[i]; e != null; e=e.next) {    if (h == e.hash && eq(k,e.get())) {      V oldValue=e.value;      if (value != oldValue)       e.value=value;      return oldValue;    }  }  modCount++;  Entry<K,V> e=tab[i];  tab[i]=new Entry<K,V>(k,value,queue,h,e);  if (++size >= threshold)   resize(tab.length * 2);  return null;}  }
class C{  public void subscribeForIndications(String subscriptionsIdentifier) throws Exception {  s_logger.debug("Entering {}",Thread.currentThread().getStackTrace()[1].getMethodName());  s_logger.info("Initiating subscrption for monitoring use cases");  try {    if ((_listener != null)) {      _listener.register(this);    }    _subscriptionManager=new CimSubscriptionManager(this,subscriptionsIdentifier);    _subscriptionManager.subscribe();  } catch (  Exception e) {    s_logger.error("Error occurred while making subscription",e);    _subscriptionManager.unsubscribe();    throw e;  }  s_logger.info("Subscription for the {} is completed",subscriptionsIdentifier);  s_logger.debug("Exiting {}",Thread.currentThread().getStackTrace()[1].getMethodName());}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  private static byte[] lmv2Response(final byte[] hash,final byte[] challenge,final byte[] clientData) throws AuthenticationException {  final HMACMD5 hmacMD5=new HMACMD5(hash);  hmacMD5.update(challenge);  hmacMD5.update(clientData);  final byte[] mac=hmacMD5.getOutput();  final byte[] lmv2Response=new byte[mac.length + clientData.length];  System.arraycopy(mac,0,lmv2Response,0,mac.length);  System.arraycopy(clientData,0,lmv2Response,mac.length,clientData.length);  return lmv2Response;}  }
class C{  public Property yearOfCentury(){  return new Property(this,getChronology().yearOfCentury());}  }
class C{  public void resetFiltering(){  filter.resetFiltering();}  }
class C{  @Override public boolean supportsSubqueriesInQuantifieds(){  debugCodeCall("supportsSubqueriesInQuantifieds");  return true;}  }
class C{  private void error(String msg,Throwable tble){  String finalMsg="FAILED " + (msg != null ? msg : "");  if (tble != null) {    throw new RuntimeException(finalMsg,tble);  }  throw new RuntimeException(finalMsg);}  }
class C{  public int constrains(GeneralNameInterface inputName) throws UnsupportedOperationException {  int constraintType;  if (inputName == null)   constraintType=NAME_DIFF_TYPE; else   if (inputName.getType() != NAME_OID)   constraintType=NAME_DIFF_TYPE; else   if (this.equals((OIDName)inputName))   constraintType=NAME_MATCH; else   throw new UnsupportedOperationException("Narrowing and widening are not supported for OIDNames");  return constraintType;}  }
class C{  public static void addFile(String s) throws IOException {  File f=new File(s);  addFile(f);}  }
class C{  public GenericPropertySheet(Object target,int x,int y,PropertyEditor pe,BeanBox beanBox){  this(false,target,new Rectangle(x,y,100,100),pe,beanBox);}  }
class C{  public static boolean requestsReturnToHdrPlus(SettingsManager settingsManager,String moduleScope){  return settingsManager.getBoolean(moduleScope,KEY_REQUEST_RETURN_HDR_PLUS);}  }
class C{  private Iterable<FragmentLoader> createLoaders(List<LayerDeclaration> declarations,World world,BiomeSelection biomeSelection,AmidstSettings settings){  return Collections.unmodifiableList(Arrays.asList(new AlphaInitializer(declarations.get(LayerIds.ALPHA),settings.fragmentFading),new BiomeDataLoader(declarations.get(LayerIds.BIOME_DATA),world.getBiomeDataOracle()),new EndIslandsLoader(declarations.get(LayerIds.END_ISLANDS),world.getEndIslandOracle()),new ImageLoader(declarations.get(LayerIds.BACKGROUND),Resolution.QUARTER,new BackgroundColorProvider(new BiomeColorProvider(biomeSelection,settings.biomeProfileSelection),new TheEndColorProvider())),new ImageLoader(declarations.get(LayerIds.SLIME),Resolution.CHUNK,new SlimeColorProvider(world.getSlimeChunkOracle())),new WorldIconLoader<Void>(declarations.get(LayerIds.SPAWN),world.getSpawnProducer()),new WorldIconLoader<Void>(declarations.get(LayerIds.STRONGHOLD),world.getStrongholdProducer()),new WorldIconLoader<Void>(declarations.get(LayerIds.PLAYER),world.getPlayerProducer()),new WorldIconLoader<Void>(declarations.get(LayerIds.VILLAGE),world.getVillageProducer()),new WorldIconLoader<Void>(declarations.get(LayerIds.TEMPLE),world.getTempleProducer()),new WorldIconLoader<Void>(declarations.get(LayerIds.MINESHAFT),world.getMineshaftProducer()),new WorldIconLoader<Void>(declarations.get(LayerIds.OCEAN_MONUMENT),world.getOceanMonumentProducer()),new WorldIconLoader<Void>(declarations.get(LayerIds.NETHER_FORTRESS),world.getNetherFortressProducer()),new WorldIconLoader<List<EndIsland>>(declarations.get(LayerIds.END_CITY),world.getEndCityProducer(),null)));}  }
class C{  public int costInline(int thresh,Environment env,Context ctx){  return 1 + cond.costInline(thresh,env,ctx) + ((body != null) ? body.costInline(thresh,env,ctx) : 0);}  }
class C{  public void unparsedEntityDecl(String name,String publicId,String systemId,String notationName) throws SAXException {}  }
class C{  public ChainTypeCompositeELResolver(ELResolverChainType chainType){  _wrapped=new DemuxCompositeELResolver(chainType);  _chainType=chainType;}  }
class C{  public boolean hasNodesInContextFromSiteTree(){  return hasNodesInContext((SiteNode)session.getSiteTree().getRoot());}  }
class C{  public float boost(){  return this.boost;}  }
class C{  public static double blackFormula(final Option.Type optionType,@Real final double strike,@Real final double forward,@StdDev final double stddev){  return blackFormula(optionType,strike,forward,stddev,1.0,0.0);}  }
class C{  public static void check(RegExps rs,Macros m,File f){  macros=m;  int num=rs.getNum();  for (int i=0; i < num; i++) {    RegExp r=rs.getRegExp(i);    RegExp l=rs.getLookAhead(i);    Action a=rs.getAction(i);    if (r != null && l != null && maybeEmtpy(r)) {      if (a == null)       Out.error(ErrorMessages.EMPTY_MATCH,""); else       Out.error(f,ErrorMessages.EMPTY_MATCH,a.priority - 1,-1);    }  }}  }
class C{  protected void log(@Nullable Exception cause){  logger.infofmt(cause,"%s",message);}  }
class C{  private static boolean doesLandExistAt(final Territory t,final GameData data,final boolean neutral){  boolean isLand=false;  final Set<Territory> checkList=data.getMap().getNeighbors(t,Matches.TerritoryIsLand);  if (!neutral) {    final Iterator<Territory> nIter=checkList.iterator();    while (nIter.hasNext()) {      final Territory nTerr=nIter.next();      if (Matches.TerritoryIsNeutralButNotWater.match(nTerr)) {        nIter.remove();      }    }  }  for (  final Territory checkNeutral : checkList) {    if (Matches.TerritoryIsNotImpassable.match(checkNeutral)) {      isLand=true;    }  }  return isLand;}  }
class C{  private void dialogChanged(){  IResource resource=ResourcesPlugin.getWorkspace().getRoot().findMember(new Path(getContainerName()));  String fileName=getFileName();  if (getContainerName().length() == 0) {    updateStatus("File container must be specified");    return;  }  if (resource == null || (resource.getType() & (IResource.PROJECT | IResource.FOLDER)) == 0) {    updateStatus("File container must exist");    return;  }  if (!resource.isAccessible()) {    updateStatus("Project must be writable");    return;  }  if (fileName.length() == 0) {    updateStatus("File name must be specified");    return;  }  if (fileName.replace('\\','/').indexOf('/',1) > 0) {    updateStatus("File name must be valid");    return;  }  int dotLoc=fileName.lastIndexOf('.');  if (dotLoc != -1) {    String ext=fileName.substring(dotLoc + 1);    if (!ext.equalsIgnoreCase("dpans")) {      updateStatus("File extension must be \"dpans\"");      return;    }  } else {    updateStatus("File extension must be \"dpans\"");    return;  }  updateStatus(null);}  }
class C{  public final void test_createSocket_05() throws Exception {  SocketFactory sf=SocketFactory.getDefault();  int sport=new ServerSocket(0).getLocalPort();  int[] invalidPorts={Integer.MIN_VALUE,-1,65536,Integer.MAX_VALUE};  Socket s=sf.createSocket(InetAddress.getLocalHost().getHostName(),sport,InetAddress.getLocalHost(),0);  assertNotNull(s);  assertTrue("1: Failed to create socket",s.getPort() == sport);  try {    sf.createSocket("bla-bla",sport,InetAddress.getLocalHost(),0);    fail("UnknownHostException wasn't thrown");  } catch (  UnknownHostException expected) {  }  for (int i=0; i < invalidPorts.length; i++) {    try {      sf.createSocket(InetAddress.getLocalHost().getHostName(),invalidPorts[i],InetAddress.getLocalHost(),0);      fail("IllegalArgumentException wasn't thrown for " + invalidPorts[i]);    } catch (    IllegalArgumentException expected) {    }    try {      sf.createSocket(InetAddress.getLocalHost().getHostName(),sport,InetAddress.getLocalHost(),invalidPorts[i]);      fail("IllegalArgumentException wasn't thrown for " + invalidPorts[i]);    } catch (    IllegalArgumentException expected) {    }  }  try {    sf.createSocket(InetAddress.getLocalHost().getHostName(),8081,InetAddress.getLocalHost(),8082);    fail("IOException wasn't thrown ...");  } catch (  IOException expected) {  }}  }
class C{  private boolean casHead(HeadIndex<K,V> cmp,HeadIndex<K,V> val){  return UNSAFE.compareAndSwapObject(this,headOffset,cmp,val);}  }
class C{  public double angle(){  return angle(this);}  }
class C{  public static void requireNonNulls(Object o0,Object o1){  if (o0 == null) {    throw new NullPointerException(FIRST_ARG_IS_NULL);  }  if (o1 == null) {    throw new NullPointerException(SECOND_ARG_IS_NULL);  }}  }
class C{  public FieldNameAnalyzer copyAndAddAll(Collection<? extends Map.Entry<String,Analyzer>> mappers){  CopyOnWriteHashMap<String,Analyzer> analyzers=this.analyzers;  for (  Map.Entry<String,Analyzer> entry : mappers) {    Analyzer analyzer=entry.getValue();    if (analyzer == null) {      analyzer=defaultAnalyzer;    }    analyzers=analyzers.copyAndPut(entry.getKey(),analyzer);  }  return new FieldNameAnalyzer(analyzers,defaultAnalyzer);}  }
class C{  protected void paint(SynthContext context,Graphics g){}  }
class C{  public static Test suite(){  return (new TestSuite(DefaultActionITCase.class));}  }
class C{  private static boolean less(Comparable v,Comparable w){  return v.compareTo(w) < 0;}  }
class C{  public boolean contains(Terminal terminal){  return terminals.contains(terminal);}  }
class C{  public Period withDays(int days){  if (days == this.days) {    return this;  }  return create(years,months,days);}  }
class C{  public String instanceName(Object instance){  if (instance == null) {    return "null";  }  if (instance instanceof Class) {    return unqualifiedClassName((Class)instance);  } else {    String result=valueToName.get(instance);    if (result != null) {      return result;    }    Class<?> type=instance.getClass();    String className=unqualifiedClassName(type);    Integer size=nameToCount.get(className);    int instanceNumber=(size == null) ? 0 : (size).intValue() + 1;    nameToCount.put(className,new Integer(instanceNumber));    result=className + instanceNumber;    valueToName.put(instance,result);    return result;  }}  }
class C{  private boolean hasOtherQueuedParentNode(Lop tmpNode,ArrayList<Lop> queuedNodes,Lop node){  if (queuedNodes.isEmpty())   return false;  boolean[] nodeMarked=node.get_reachable();  boolean[] tmpMarked=tmpNode.get_reachable();  long nodeid=IDMap.get(node.getID());  long tmpid=IDMap.get(tmpNode.getID());  for (  Lop qnode : queuedNodes) {    int id=IDMap.get(qnode.getID());    if ((id != nodeid && nodeMarked[id]) && (id != tmpid && tmpMarked[id]))     return true;  }  return false;}  }
class C{  public Vertex createWord(String text,Vertex meaning,Network network){  return createWord(text,meaning,false,network,null,null,null,null,null);}  }
class C{  public void addChange(final Change change){  assertCorrectThread();  if (!isCurrentEvent() && !isCurrentStep()) {    new IllegalStateException("Not in an event, but trying to add change:" + change + " current is:"+ m_current).printStackTrace(System.out);    startEvent("Bad Event for change: \n" + change.toString());  }  m_history.changeAdded(change);}  }
class C{  @Override public boolean add(E e){  return addLastImpl(e);}  }
class C{  public static boolean isEmpty(CharSequence str){  return str == null || str.length() == 0;}  }
class C{  public void addHandler(Object handler) throws Exception {  if (addHandlerMethod == null) {    throw new ContainerException("No Jetty instance to deploy to");  }  addHandlerMethod.invoke(contextHandlers,new Object[]{handler});  Method m=getServer().getClass().getMethod("isStarted",new Class[]{});  if (((Boolean)m.invoke(getServer(),null)).booleanValue()) {    handlerClass.getMethod("start",new Class[]{}).invoke(handler,null);  }}  }
class C{  @Override public Connector findConnector(Point2D.Double p,ConnectionFigure prototype){  return new ChopRectangleConnector(this);}  }
class C{  private int resolveAxis(int axis,ComponentOrientation o){  int absoluteAxis;  if (axis == LINE_AXIS) {    absoluteAxis=o.isHorizontal() ? X_AXIS : Y_AXIS;  } else   if (axis == PAGE_AXIS) {    absoluteAxis=o.isHorizontal() ? Y_AXIS : X_AXIS;  } else {    absoluteAxis=axis;  }  return absoluteAxis;}  }
class C{  public static boolean schemasMatch(Table srcTable,Table destTable){  return srcTable.getSd().getCols().equals(destTable.getSd().getCols()) && srcTable.getPartitionKeys().equals(destTable.getPartitionKeys());}  }
class C{  public void doDelete(){  jTextArea1.setText("");}  }
class C{  private void processPortStats(Map<String,Object> context,Map<String,MetricHeaderInfo> metricHeaderInfoMap,Map<String,Double> maxValues,Map<String,String> lastSample){  Map<URI,PortStat> portStatMap=new HashMap<>();  for (  String metricKey : metricHeaderInfoMap.keySet()) {    MetricHeaderInfo headerInfo=metricHeaderInfoMap.get(metricKey);    if (headerInfo.type == MetricHeaderInfo.Type.PORT) {      handlePortStat(metricKey,headerInfo,portStatMap,maxValues,lastSample);    }  }  for (  URI portURI : portStatMap.keySet()) {    PortStat stat=portStatMap.get(portURI);    if (stat.allFilled()) {      portMetricsProcessor.processFEPortMetrics(stat.kbytes,stat.iops,stat.port,stat.sampleTime);      addPortMetric(context,stat);    } else {      log.warn("Failed to process stats for port {}",portURI);    }  }}  }
class C{  public int countMisfiredTriggersInState(Connection conn,String state1,long ts) throws SQLException {  PreparedStatement ps=null;  ResultSet rs=null;  try {    ps=conn.prepareStatement(rtp(COUNT_MISFIRED_TRIGGERS_IN_STATE));    ps.setBigDecimal(1,new BigDecimal(String.valueOf(ts)));    ps.setString(2,state1);    rs=ps.executeQuery();    if (rs.next()) {      return rs.getInt(1);    }    throw new SQLException("No misfired trigger count returned.");  }  finally {    closeResultSet(rs);    closeStatement(ps);  }}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="DE_MIGHT_IGNORE",justification="we are trying to close a failed connection, it doesn't matter if it generates an error") @Override public void recover(){  if (!allowConnectionRecovery) {    return;  }  opened=false;  try {    socketConn.close();  } catch (  IOException e) {  }  reconnect();}  }
class C{  public ColorBlock4x4(){  for (int i=0; i < 16; i++) {    this.color[i]=new Color32();  }}  }
class C{  public long findKey(Object value,boolean identity,long notFound){  V[] valueTable=this.valueTable;  if (value == null) {    if (hasZeroValue && zeroValue == null)     return 0;    long[] keyTable=this.keyTable;    for (int i=capacity + stashSize; i-- > 0; )     if (keyTable[i] != EMPTY && valueTable[i] == null)     return keyTable[i];  } else   if (identity) {    if (value == zeroValue)     return 0;    for (int i=capacity + stashSize; i-- > 0; )     if (valueTable[i] == value)     return keyTable[i];  } else {    if (hasZeroValue && value.equals(zeroValue))     return 0;    for (int i=capacity + stashSize; i-- > 0; )     if (value.equals(valueTable[i]))     return keyTable[i];  }  return notFound;}  }
class C{  private Query readScanQuery(BinaryRawReaderEx reader){  boolean loc=reader.readBoolean();  final int pageSize=reader.readInt();  boolean hasPart=reader.readBoolean();  Integer part=hasPart ? reader.readInt() : null;  ScanQuery qry=new ScanQuery().setPageSize(pageSize);  qry.setPartition(part);  Object pred=reader.readObjectDetached();  if (pred != null)   qry.setFilter(platformCtx.createCacheEntryFilter(pred,0));  qry.setLocal(loc);  return qry;}  }
class C{  public boolean isGeneric(){  for (  Type type : list) {    if (type.isGeneric()) {      return true;    }  }  return false;}  }
class C{  private static double hypot(double a,double b){  double r=0;  if (Math.abs(a) > Math.abs(b)) {    r=b / a;    r=Math.abs(a) * Math.sqrt(1 + r * r);  } else   if (b != 0) {    r=a / b;    r=Math.abs(b) * Math.sqrt(1 + r * r);  }  return r;}  }
class C{  public boolean regionMatches(int thisStart,String string,int start,int length){  if (string == null) {    throw new NullPointerException();  }  if (start < 0 || string.count - start < length) {    return false;  }  if (thisStart < 0 || count - thisStart < length) {    return false;  }  if (length <= 0) {    return true;  }  int o1=offset + thisStart, o2=string.offset + start;  for (int i=0; i < length; ++i) {    if (value[o1 + i] != string.value[o2 + i]) {      return false;    }  }  return true;}  }
class C{  public PriorityQueue(int initialCapacity){  this(initialCapacity,null);}  }
class C{  public boolean equals(Object otherObj){  if (otherObj == null) {    return false;  }  try {    return mTarget.asBinder().equals(((Messenger)otherObj).mTarget.asBinder());  } catch (  ClassCastException e) {  }  return false;}  }
class C{  private void writeValue(int curLen){  for (int i=0; i < curLen; i++)   newData[newDataPos++]=data[dataPos++];}  }
class C{  public void add(Set<Locale> locales){  if (locales != null && locales.size() > 0) {    List<String> localeList=new ArrayList<String>();    for (    Locale locale : locales) {      localeList.add(locale.toString());    }    map.put(LOCALES_PARAMETER,localeList);  }}  }
class C{  public CIDR(String cidrOrIP){  String[] parts=cidrOrIP.split("/");  if ((parts.length < 1) || (parts.length > 2))   throw new IllegalArgumentException(cidrOrIP + " does not represent an IP address or CIDR");  bits=(1 == parts.length) ? 32 : Short.parseShort(parts[1]);  if ((bits < 1) || (bits > 32))   throw new IllegalArgumentException(cidrOrIP + " does not represent an IP address or ICDR, /" + bits+ " is outside of [1:32]");  this.firstIP=toIP(parts[0]);}  }
class C{  public static boolean isInRange(double min,double max,double a){  return (min <= a) && (a <= max);}  }
class C{  public DiskBasedCache(File rootDirectory,int maxCacheSizeInBytes){  mRootDirectory=rootDirectory;  mMaxCacheSizeInBytes=maxCacheSizeInBytes;}  }
class C{  public static boolean isOutputZipFormat(Configuration conf){  return conf.getBoolean(OUTPUT_ZIP_FILE,false);}  }
class C{  protected void validateState(State currentState){  ValidationUtils.validateState(currentState);}  }
class C{  public void endElement() throws IOException {  String elementQName=elementStack.pop();  nsStack.pop();  if (writingStartTag) {    writer.write("/>");    writingStartTag=false;    return;  }  writer.write("</");  writer.write(elementQName);  writer.write('>');}  }
class C{  public BufferedGroupingRDFHandler(RDFHandler... handlers){  this(DEFAULT_BUFFER_SIZE,handlers);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void updateVDisplay(boolean next){  if (m_archives == null)   m_archives=new MArchive[0];  if (next)   m_index++; else   m_index--;  if (m_index >= m_archives.length - 1)   m_index=m_archives.length - 1;  if (m_index < 0)   m_index=0;  bBack.setEnabled(m_index > 0);  bNext.setEnabled(m_index < m_archives.length - 1);  updateArchive.setEnabled(false);  log.info("Index=" + m_index + ", Length="+ m_archives.length);  if (m_archives.length == 0) {    positionInfo.setText("No Record Found");    createdByField.setText("");    createdField.setValue(null);    nameField.setText("");    descriptionField.setText("");    helpField.setText("");    pdfViewer.clearDocument();    return;  }  positionInfo.setText(m_index + 1 + " "+ Msg.getMsg(Env.getCtx(),"of")+ " "+ m_archives.length);  MArchive ar=m_archives[m_index];  createdByField.setText(ar.getCreatedByName());  createdField.setValue(ar.getCreated());  nameField.setText(ar.getName());  descriptionField.setText(ar.getDescription());  helpField.setText(ar.getHelp());  try {    InputStream in=ar.getInputStream();    pdfViewer.setScale(reportField.isSelected() ? 50 : 75);    if (in != null)     pdfViewer.loadPDF(in); else     pdfViewer.clearDocument();  } catch (  Exception e) {    log.log(Level.SEVERE,"pdf",e);    pdfViewer.clearDocument();  }}  }
class C{  private String rewriteLocation(String value){  StringBuffer header=new StringBuffer();  Matcher matcher=linkPattern.matcher(value);  while (matcher.find()) {    String link=matcher.group(3).replaceAll("\\$","\\\\$");    if (link.length() == 0) {      link="/";    }    String location=matcher.group(2) + link;    Server matchingServer=null;    String fullPath=server.getDomainName() + server.getPath() + "/";    if (location.startsWith(fullPath)) {      matchingServer=server;    }    if (matchingServer == null) {      matchingServer=serverChain.getServerMapped(location);    }    if (matchingServer != null && !link.startsWith(contextPath)) {      link=link.substring(matchingServer.getPath().length());      link=matchingServer.getRule().revert(link);      matcher.appendReplacement(header,"$1" + ownHostName + contextPath+ link);    }  }  matcher.appendTail(header);  log.debug("Location header rewritten " + value + " >> "+ header.toString());  return header.toString();}  }
class C{  public void addAttendee(Attendee attendee){  addProperty(attendee);}  }
class C{  public static ArrayList viewMMovementHistory(Properties ctx,String docStatus,Integer month,Integer year) throws OperationException {  ArrayList<StockMovementBean> stockMovementList=new ArrayList<StockMovementBean>();  StockMovementBean stockMovementBean=null;  StringBuffer sql=new StringBuffer();  sql.append(" SELECT M_MOVEMENT_ID").append(" FROM M_MOVEMENT ").append(" WHERE AD_CLIENT_ID = ").append(Env.getAD_Client_ID(ctx)).append(" AND AD_ORG_ID = ").append(Env.getAD_Org_ID(ctx));  if (docStatus != null) {    sql=sql.append(" and docstatus='").append(docStatus).append("'");  }  if (month != null) {    String mm=String.valueOf(month);    if (mm.length() == 1) {      mm="0" + mm;    }    sql=sql.append(" AND TO_CHAR(MOVEMENTDATE, 'mm')= '").append(mm).append("'");  }  if (year != null) {    sql=sql.append(" AND TO_CHAR(MOVEMENTDATE, 'yyyy') ='").append(year).append("'");  }  sql.append(" ORDER BY DOCUMENTNO DESC ");  PreparedStatement pstmt=DB.prepareStatement(sql.toString(),null);  try {    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      stockMovementBean=new StockMovementBean();      stockMovementBean.setMovementId(rs.getInt(1));      MMovement mmovement=new MMovement(ctx,stockMovementBean.getMovementId(),null);      stockMovementBean.setIsActive(mmovement.isActive());      stockMovementBean.setDocumentNo(mmovement.getDocumentNo());      MDocType docType=new MDocType(ctx,mmovement.getC_DocType_ID(),null);      String documentType=docType.getName();      stockMovementBean.setDocumentType(documentType);      stockMovementBean.setMovementDate(mmovement.getMovementDate().toString());      stockMovementBean.setDescription(mmovement.getDescription());      stockMovementBean.setDocStatus(mmovement.getDocStatus());      if (mmovement.isApproved() == true) {        stockMovementBean.setIsApproved("Y");      } else {        stockMovementBean.setIsApproved("N");      }      stockMovementList.add(stockMovementBean);    }    rs.close();  } catch (  SQLException e) {    throw new OperationException(e);  } finally {    try {      pstmt.close();    } catch (    SQLException e) {    }  }  return stockMovementList;}  }
class C{  void createRaytracingTexture(){  this.raytraceTexture=glGenTextures();  glBindTexture(GL_TEXTURE_2D,raytraceTexture);  glTexStorage2D(GL_TEXTURE_2D,1,GL_RGBA8,width,height);  glBindTexture(GL_TEXTURE_2D,0);}  }
class C{  public String toString(){  return this.nodes.toString();}  }
class C{  protected static boolean matchUserLanguage(String s,String userLanguages){  StringTokenizer st=new StringTokenizer(userLanguages,", ");  while (st.hasMoreTokens()) {    String t=st.nextToken();    if (s.startsWith(t)) {      if (s.length() > t.length()) {        return (s.charAt(t.length()) == '-');      }      return true;    }  }  return false;}  }
class C{  public CursorIterator<T> queryAsIterator(){  QuantumFluxCursor<T> cursor=queryAsCursor();  return new CursorIterator<>(cursor.getTableDetails(),cursor);}  }
class C{  public void makeDirty(){}  }
class C{  public ComplexBuffer filter(RealBuffer buffer){  return new ComplexBuffer(filter(buffer.getSamples()));}  }
class C{  public static void replaceValue(ExampleSet exampleSet,Attribute attribute,String oldValue,String newValue){  if (!attribute.isNominal()) {    throw new RuntimeException("Example-Tools: replaceValue is only supported for nominal attributes.");  }  NominalMapping mapping=attribute.getMapping();  if (oldValue.equals("?")) {    for (    Example example : exampleSet) {      if (Double.isNaN(example.getValue(attribute))) {        example.setValue(attribute,mapping.mapString(newValue));      }    }  } else {    int oldIndex=mapping.getIndex(oldValue);    if (oldIndex < 0) {      throw new RuntimeException("Example-Tools: replaceValue cannot be performed since old value was not defined in the attribute.");    }    if (newValue.equals("?")) {      for (      Example example : exampleSet) {        int index=mapping.getIndex(example.getValueAsString(attribute));        if (index == oldIndex) {          example.setValue(attribute,Double.NaN);        }      }      return;    }    int newIndex=mapping.getIndex(newValue);    if (newIndex >= 0) {      for (      Example example : exampleSet) {        int index=mapping.getIndex(example.getValueAsString(attribute));        if (index == oldIndex) {          example.setValue(attribute,newIndex);        }      }    } else {      mapping.setMapping(newValue,oldIndex);    }  }}  }
class C{  public SpecificationElementItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public void changedUpdate(DocumentEvent changes,Shape a,ViewFactory f){  updateDamage(changes,a,f);}  }
class C{  private void doLoad(HttpServletRequest request,ClassEditForm frm,Class_ c,String op){  Department managingDept=c.getManagingDept();  String parentClassName="-";  Long parentClassId=null;  if (c.getParentClass() != null) {    parentClassName=c.getParentClass().toString();    parentClassId=c.getParentClass().getUniqueId();  }  CourseOffering cco=c.getSchedulingSubpart().getControllingCourseOffering();  frm.setClassId(c.getUniqueId());  frm.setSection(c.getSectionNumberString());  frm.setClassName(c.getClassLabel());  SchedulingSubpart ss=c.getSchedulingSubpart();  String itypeDesc=c.getItypeDesc();  if (ss.getInstrOfferingConfig().getInstructionalOffering().hasMultipleConfigurations())   itypeDesc+=" [" + ss.getInstrOfferingConfig().getName() + "]";  frm.setItypeDesc(itypeDesc);  frm.setParentClassName(parentClassName);  frm.setParentClassId(parentClassId);  frm.setSubjectAreaId(cco.getSubjectArea().getUniqueId().toString());  frm.setInstrOfferingId(cco.getInstructionalOffering().getUniqueId().toString());  frm.setSubpart(c.getSchedulingSubpart().getUniqueId());  frm.setCourseName(cco.getInstructionalOffering().getCourseName());  frm.setCourseTitle(cco.getTitle());  frm.setManagingDept(managingDept.getUniqueId());  frm.setManagingDeptLabel(managingDept.getManagingDeptLabel());  frm.setUnlimitedEnroll(c.getSchedulingSubpart().getInstrOfferingConfig().isUnlimitedEnrollment());  frm.setAccommodation(StudentAccomodation.toHtml(StudentAccomodation.getAccommodations(c)));  Class_ next=c.getNextClass(sessionContext,Right.ClassEdit);  frm.setNextId(next == null ? null : next.getUniqueId().toString());  Class_ previous=c.getPreviousClass(sessionContext,Right.ClassEdit);  frm.setPreviousId(previous == null ? null : previous.getUniqueId().toString());  frm.setMinRoomLimit(c.getMinRoomLimit());  frm.setEnrollment(c.getEnrollment());  if (op.equals("init")) {    frm.setExpectedCapacity(c.getExpectedCapacity());    frm.setDatePattern(c.getDatePattern() == null ? new Long(-1) : c.getDatePattern().getUniqueId());    frm.setNbrRooms(c.getNbrRooms());    frm.setNotes(c.getNotes());    frm.setManagingDept(c.getManagingDept().getUniqueId());    frm.setSchedulePrintNote(c.getSchedulePrintNote());    frm.setClassSuffix(c.getDivSecNumber());    frm.setMaxExpectedCapacity(c.getMaxExpectedCapacity());    frm.setRoomRatio(c.getRoomRatio());    frm.setEnabledForStudentScheduling(c.isEnabledForStudentScheduling());    frm.setDisplayInstructor(c.isDisplayInstructor());    List instructors=new ArrayList(c.getClassInstructors());    InstructorComparator ic=new InstructorComparator();    ic.setCompareBy(ic.COMPARE_BY_LEAD);    Collections.sort(instructors,ic);    for (Iterator iter=instructors.iterator(); iter.hasNext(); ) {      ClassInstructor classInstr=(ClassInstructor)iter.next();      frm.addToInstructors(classInstr);    }    if (instructors.isEmpty())     frm.addToInstructors(null);  }}  }
class C{  public boolean nextYRange(int range[]){  curIndex+=numXbands * 2;  numXbands=0;  if (curIndex >= region.endIndex) {    return false;  }  range[1]=region.bands[curIndex++];  range[3]=region.bands[curIndex++];  numXbands=region.bands[curIndex++];  return true;}  }
class C{  public void unlock(@Nullable Object o){  getLock(o).unlock();}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(')');  return result.toString();}  }
class C{  protected FamilyHierachySvgElementBuilder(){}  }
class C{  public ICalWriter(File file,ICalVersion targetVersion) throws IOException {  this(file,false,targetVersion);}  }
class C{  public SBX(double probability,double distributionIndex){  this.probability=probability;  this.distributionIndex=distributionIndex;}  }
class C{  public void parseFile() throws IOException, ReplicatorException {  lookupSchemaTableCol=new Hashtable<String,Hashtable<String,Hashtable<String,RenameRequest>>>();  logger.info("Parsing " + definitionFile + ":");  CSVReader reader=new CSVReader(new FileReader(definitionFile));  String[] cols;  while ((cols=reader.readNext()) != null) {    if (cols.length == 1 && cols[0].length() == 0) {    } else     if (cols.length > 0 && cols[0].length() > 0 && cols[0].charAt(0) == '#') {    } else     if (cols.length == 6) {      cols[5]=cleanup(cols[5]);      RenameRequest rename=new RenameRequest(cols[0],cols[1],cols[2],cols[3],cols[4],cols[5]);      logger.info(rename.toString());      for (int c=0; c < 6; c++) {        if (c < 3 && cols[c].compareTo("-") == 0)         throw new ReplicatorException("Minus used on the left side (minus means \"leave as original\"): " + cols[c]);        if (c >= 3 && cols[c].compareTo("*") == 0)         throw new ReplicatorException("Asterisk used on the right side (asterisk means \"match all occurances\"): " + cols[c]);        if (cols[c].indexOf('*') > 0)         throw new ReplicatorException("Part-string asterisk matching is not supported: " + cols[c]);      }      validate(rename);      populateLookup(rename);    } else {      StringBuilder sb=new StringBuilder();      for (int i=0; i < cols.length; i++) {        sb.append(cols[i]);        if (i < (cols.length - 1))         sb.append(",");      }      throw new ReplicatorException("Incorrect row format in " + definitionFile + " (should be six columns, comment or an empty line): "+ sb.toString());    }  }}  }
class C{  public SymbolReference<? extends ValueDeclaration> solveSymbolInType(TypeDeclaration typeDeclaration,String name){  if (typeDeclaration instanceof JavaParserClassDeclaration) {    Context ctx=((JavaParserClassDeclaration)typeDeclaration).getContext();    return ctx.solveSymbol(name,typeSolver);  }  if (typeDeclaration instanceof JavaParserInterfaceDeclaration) {    Context ctx=((JavaParserInterfaceDeclaration)typeDeclaration).getContext();    return ctx.solveSymbol(name,typeSolver);  }  if (typeDeclaration instanceof JavaParserEnumDeclaration) {    Context ctx=((JavaParserEnumDeclaration)typeDeclaration).getContext();    return ctx.solveSymbol(name,typeSolver);  }  if (typeDeclaration instanceof ReflectionClassDeclaration) {    return ((ReflectionClassDeclaration)typeDeclaration).solveSymbol(name,typeSolver);  }  if (typeDeclaration instanceof ReflectionInterfaceDeclaration) {    return ((ReflectionInterfaceDeclaration)typeDeclaration).solveSymbol(name,typeSolver);  }  if (typeDeclaration instanceof JavassistClassDeclaration) {    return ((JavassistClassDeclaration)typeDeclaration).solveSymbol(name,typeSolver);  }  return SymbolReference.unsolved(ValueDeclaration.class);}  }
class C{  public static long[][] convertToLongArray(double[][] vals){  long[][] ret=new long[vals.length][];  for (int i=0; i < vals.length; i++) {    double[] valsi=vals[i];    long[] reti=ret[i]=new long[valsi.length];    for (int j=0; j < valsi.length; j++) {      long a=(long)valsi[j];      if (a == valsi[j])       reti[j]=a; else       return null;    }  }  return ret;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:58.058 -0400",hash_original_method="847744E50C0F667B1CC040D26B6B22E8",hash_generated_method="9393EBDE2371CD541CA28FEDE3778976") public synchronized void stop(long stopInterval) throws Exception {  if (running == false) {    throw new IllegalStateException("Monitor is not running");  }  running=false;  try {    thread.join(stopInterval);  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();  }  for (  FileAlterationObserver observer : observers) {    observer.destroy();  }}  }
class C{  public Matrix divAssign(final double scalar){  if (addr.isContiguous()) {    for (int addr=0; addr < size(); addr++) {      $[addr]/=scalar;    }  } else {    final Address.MatrixAddress.MatrixOffset dst=this.addr.offset();    for (int row=0; row < rows(); row++) {      dst.setRow(row);      for (int col=0; col < cols(); col++) {        $[dst.op()]/=scalar;        dst.nextCol();      }    }  }  return this;}  }
class C{  public T3Glyph(final ObjectInput os){  try {    final byte[] dvr=(byte[])os.readObject();    glyphDisplay=new T3Display(dvr,null);    maxWidth=os.readInt();    maxHeight=os.readInt();    lockColours=os.readBoolean();  } catch (  final Exception e) {    LogWriter.writeLog("Exception: " + e.getMessage());  }}  }
class C{  public DESCipher(){  core=new CipherCore(new DESCrypt(),DESConstants.DES_BLOCK_SIZE);}  }
class C{  static byte[] applyMaskStream(byte[] objectData,byte[] maskData,final ImageData imageData,final PdfObject newMask,final PdfObject XObject){  int w=imageData.getWidth();  int h=imageData.getHeight();  final int maskW=newMask.getInt(PdfDictionary.Width);  final int maskH=newMask.getInt(PdfDictionary.Height);  int maskD=newMask.getInt(PdfDictionary.BitsPerComponent);  final boolean isImageMask=newMask.getBoolean(PdfDictionary.ImageMask);  if (isImageMask) {    maskD=1;  }  if (maskD != 8) {    maskData=ColorSpaceConvertor.normaliseTo8Bit(maskD,maskW,maskH,maskData);  }  final float[] maskDecodeArray=newMask.getFloatArray(PdfDictionary.Decode);  if (maskDecodeArray != null) {    float diff=maskDecodeArray[1] - maskDecodeArray[0];    if (diff == -1) {      for (int i=0; i < maskData.length; i++) {        maskData[i]=(byte)(maskData[i] ^ 255);      }    }  }  if (w == maskW && h == maskH) {    objectData=buildUnscaledByteArray(w,h,objectData,maskData);  } else   if (w < maskW) {    objectData=upScaleImageToMask(w,h,maskW,maskH,objectData,maskData);    XObject.setIntNumber(PdfDictionary.Width,maskW);    XObject.setIntNumber(PdfDictionary.Height,maskH);  } else {    objectData=upScaleMaskToImage(w,h,maskW,maskH,objectData,maskData);  }  XObject.setIntNumber(PdfDictionary.BitsPerComponent,8);  return objectData;}  }
class C{  private void testRowSumsSquared(String testName,boolean sparse,boolean vector,boolean rewrites,ExecType platform){  boolean rewritesOld=OptimizerUtils.ALLOW_ALGEBRAIC_SIMPLIFICATION;  OptimizerUtils.ALLOW_ALGEBRAIC_SIMPLIFICATION=rewrites;  RUNTIME_PLATFORM platformOld=rtplatform;switch (platform) {case MR:    rtplatform=RUNTIME_PLATFORM.HADOOP;  break;case SPARK:rtplatform=RUNTIME_PLATFORM.SPARK;break;default :rtplatform=RUNTIME_PLATFORM.SINGLE_NODE;break;}boolean sparkConfigOld=DMLScript.USE_LOCAL_SPARK_CONFIG;if (rtplatform == RUNTIME_PLATFORM.SPARK) DMLScript.USE_LOCAL_SPARK_CONFIG=true;try {getAndLoadTestConfiguration(testName);String HOME=SCRIPT_DIR + TEST_DIR;fullDMLScriptName=HOME + testName + ".dml";programArgs=new String[]{"-explain","-stats","-args",input(INPUT_NAME),output(OUTPUT_NAME)};fullRScriptName=HOME + testName + ".R";rCmd="Rscript" + " " + fullRScriptName + " "+ inputDir()+ " "+ expectedDir();double sparsity=sparse ? sparsity2 : sparsity1;int columns=vector ? 1 : cols;double[][] X=getRandomMatrix(rows,columns,-1,1,sparsity,7);writeInputMatrixWithMTD(INPUT_NAME,X,true);runTest(true,false,null,-1);runRScript(true);HashMap<CellIndex,Double> dmlfile=readDMLMatrixFromHDFS(OUTPUT_NAME);HashMap<CellIndex,Double> rfile=readRMatrixFromFS(OUTPUT_NAME);TestUtils.compareMatrices(dmlfile,rfile,eps,"Stat-DML","Stat-R");if (rewrites && (platform == ExecType.SPARK || platform == ExecType.CP)) {String prefix=(platform == ExecType.SPARK) ? Instruction.SP_INST_PREFIX : "";String opcode=prefix + op;boolean rewriteApplied=Statistics.getCPHeavyHitterOpCodes().contains(opcode);if (vector) Assert.assertFalse("Rewrite applied to vector case.",rewriteApplied); else Assert.assertTrue("Rewrite not applied to matrix case.",rewriteApplied);}}  finally {OptimizerUtils.ALLOW_ALGEBRAIC_SIMPLIFICATION=rewritesOld;rtplatform=platformOld;DMLScript.USE_LOCAL_SPARK_CONFIG=sparkConfigOld;}}  }
class C{  public ClientMessage sendMessage(SimpleString address,byte[] body){  ClientMessage message=createMessage(body);  sendMessage(address,message);  return message;}  }
class C{  public void initialise(int sourceDimensions,int destDimensions,double kernelWidth){  super.initialise(sourceDimensions,destDimensions);  this.kernelWidth=kernelWidth;  mvkeSource.initialise(sourceDimensions,kernelWidth);  mvkeDest.initialise(destDimensions,kernelWidth);  mvkeJoint.initialise(sourceDimensions + destDimensions,kernelWidth);}  }
class C{  @Override public void execute(MetricTimeSeries timeSeries,FunctionValueMap functionValueMap){  if (timeSeries.size() <= 0) {    functionValueMap.add(this,Double.NaN);    return;  }  functionValueMap.add(this,de.qaware.chronix.solr.query.analysis.functions.math.StdDev.dev(timeSeries.getValues()));}  }
class C{  private void startForegroundCompat(int id,Notification notification){  if (mStartForeground != null) {    mStartForegroundArgs[0]=Integer.valueOf(id);    mStartForegroundArgs[1]=notification;    try {      mStartForeground.invoke(this,mStartForegroundArgs);    } catch (    InvocationTargetException e) {    }catch (    IllegalAccessException e) {    }  } else {    try {      Method setForeground=getClass().getMethod("setForeground",mSetForegroudSignaure);      setForeground.invoke(this,new Object[]{true});    } catch (    NoSuchMethodException exception) {    }catch (    InvocationTargetException e) {    }catch (    IllegalAccessException e) {    }    notificationManager.notify(id,notification);  }}  }
class C{  public static int weekNumber(Timestamp input){  return weekNumber(input,TimeZone.getDefault(),Locale.getDefault());}  }
class C{  public int sumOfLeftLeaves(TreeNode root){  int res=0;  if (root != null) {    if (isLeaf(root.left)) {      res+=root.left.val;    } else {      res+=sumOfLeftLeaves(root.left);    }    res+=sumOfLeftLeaves(root.right);  }  return res;}  }
class C{  private int newLocal(int typecode){  int reg=nextreg;  int w=width(typecode);  nextreg=reg + w;  if (nextreg > max_locals)   max_locals=nextreg;  return reg;}  }
class C{  public Promise<Node> reveal(final Path path){  return reveal(path,true);}  }
class C{  private void processAssertionError(AssertionError e){  String title=e.getClass().getSimpleName() + " (simulation paused)";  String msg=e.getMessage();  String txt=(msg != null ? msg : "") + " at simtime " + SimClock.getIntTime()+ "\n\ncaught at:\n"+ e.getStackTrace()[0].toString()+ "\nNote that the simulation might be in inconsistent state, "+ "continue only with caution.\n\n Show rest of the stack trace?";  if (guiControls != null) {    guiControls.setPaused(true);  }  int selection=JOptionPane.showOptionDialog(getParentFrame(),txt,title,JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE,null,null,null);  if (selection == 0) {    txt="";    for (    StackTraceElement trace : e.getStackTrace()) {      txt+=trace.toString() + "\n";    }    JOptionPane.showMessageDialog(getParentFrame(),txt,"stack trace",JOptionPane.INFORMATION_MESSAGE);  }}  }
class C{  public int write(Writer writer,ResultSet rs) throws SQLException {  this.output=writer;  return writeResultSet(rs);}  }
class C{  public ContainerInfo inspectContainer(final InspectContainerParams params) throws IOException {  try (DockerConnection connection=connectionFactory.openConnection(dockerDaemonUri).method("GET").path(apiVersionPathPrefix + "/containers/" + params.getContainer()+ "/json")){    addQueryParamIfNotNull(connection,"size",params.isReturnContainerSize());    final DockerResponse response=connection.request();    if (OK.getStatusCode() != response.getStatus()) {      throw getDockerException(response);    }    return parseResponseStreamAndClose(response.getInputStream(),ContainerInfo.class);  } }  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public Bindings add(String property,JTextArea textArea,String defaultValue){  registerPropertyChangeListener(textArea);  return add(new JTextComponentBinding(property,textArea,defaultValue));}  }
class C{  public static InfiniteScrollAdapter createInfiniteScroll(Container cont,Runnable fetchMore,boolean fetchOnCreate){  InfiniteScrollAdapter a=new InfiniteScrollAdapter();  cont.putClientProperty("cn1$infinite",a);  a.infiniteContainer=cont;  a.fetchMore=fetchMore;  if (fetchOnCreate) {    cont.addComponent(a.ip);    Display.getInstance().callSerially(fetchMore);  } else {    a.infiniteContainer.addComponent(a.endMarker);  }  return a;}  }
class C{  private void handleAntError(){  clearAllChannels();}  }
class C{  public void init(String title){  mTitleView=(TextView)findViewById(R.id.most_visited_title);  mThumbnailView=(MostVisitedThumbnail)findViewById(R.id.most_visited_thumbnail);  mTitleView.setText(title);  mTitlePaddingStart=ApiCompatibilityUtils.getPaddingStart(mTitleView);  mFaviconSize=getResources().getDimensionPixelSize(R.dimen.default_favicon_size);  int extraPaddingStart=mFaviconSize + mTitleView.getCompoundDrawablePadding();  ApiCompatibilityUtils.setPaddingRelative(mTitleView,mTitlePaddingStart + extraPaddingStart,0,0,0);}  }
class C{  private static boolean isWindowsAbsolutePath(String systemId){  if (!isAbsolutePath(systemId))   return false;  if (systemId.length() > 2 && systemId.charAt(1) == ':' && Character.isLetter(systemId.charAt(0)) && (systemId.charAt(2) == '\\' || systemId.charAt(2) == '/'))   return true; else   return false;}  }
class C{  @Override public Long hlen(final String key){  checkIsInMultiOrPipeline();  client.hlen(key);  return client.getIntegerReply();}  }
class C{  public boolean containsMgmtData(){  return this.lengthMgmtData() > 0;}  }
class C{  private boolean applyAVM(TestSuiteChromosome suite,int testIndex,TestChromosome test,LocalSearchObjective<TestSuiteChromosome> objective){  logger.debug("Local search on test " + testIndex + ", current fitness: "+ suite.getFitness());  final List<FitnessFunction<? extends Chromosome>> fitnessFunctions=objective.getFitnessFunctions();  TestSuiteLocalSearchObjective testCaseLocalSearchObjective=TestSuiteLocalSearchObjective.buildNewTestSuiteLocalSearchObjective(fitnessFunctions,suite,testIndex);  AVMTestCaseLocalSearch testCaselocalSearch=new AVMTestCaseLocalSearch();  boolean improved=testCaselocalSearch.doSearch(test,testCaseLocalSearchObjective);  return improved;}  }
class C{  public boolean equals(Object other){  if (other instanceof CSeqHeader) {    final CSeqHeader o=(CSeqHeader)other;    return this.getSeqNumber() == o.getSeqNumber() && this.getMethod().equals(o.getMethod());  }  return false;}  }
class C{  private static void printAllocations(List<AllocLocationModel> allocSources,StringBuffer buf){  for (  AllocLocationModel allocLoc : allocSources) {    buf.append("    <allocation> " + allocLoc + "\n");    for (    CallLocationModel callLoc : allocLoc.getCallsOnAlloc())     buf.append("      <call> " + callLoc + "\n");  }}  }
class C{  public void clear(){  clear(true);}  }
class C{  public boolean isSetClassName(){  return this.className != null;}  }
class C{  public static int parseHexInt(String x){  try {    return (int)Long.parseLong(x,16);  } catch (  NumberFormatException e) {    throw newIllegalStateException(ERROR_FILE_CORRUPT,"Error parsing the value {0}",x,e);  }}  }
class C{  public static Side newInstance(){  final Side returnInstance=new Side();  returnInstance.setDefaultCode();  return returnInstance;}  }
class C{  private void readHeader() throws IOException {  if (image == null) {    ImageInputStream iis=null;    Object in=getInput();    if (in instanceof byte[]) {      iis=ImageIO.createImageInputStream((byte[])in);    } else     if (in instanceof ImageInputStream) {      iis=(ImageInputStream)in;    } else     if (in instanceof InputStream) {      iis=new MemoryCacheImageInputStream((InputStream)in);    } else {      throw new IOException("Can't handle input of type " + in);    }    image=read(iis,isYCCKInversed);  }}  }
class C{  @Override public boolean hasFailed(){  return failed;}  }
class C{  public void removeObserver(final Observer observer){  deleteObserver(observer);}  }
class C{  private void validateCreateInformation(Date startTime,String taskName){  Assert.notNull(startTime,"TaskExecution start time cannot be null.");  if (taskName != null && taskName.length() > this.maxTaskNameSize) {    throw new IllegalArgumentException("TaskName length exceeds " + this.maxTaskNameSize + " characters");  }}  }
class C{  public static boolean isInit(){  return isInit;}  }
class C{  public static PsiType banalize(final PsiType t){  if (t instanceof PsiClassType) {    final PsiClassType.ClassResolveResult result=resolveType(t);    final PsiClass theClass=result.getElement();    if (theClass == null) {      return t;    }    final PsiSubstitutor theSubst=result.getSubstitutor();    final PsiManager theManager=theClass.getManager();    PsiSubstitutor subst=PsiSubstitutor.EMPTY;    for (    final PsiTypeParameter theParm : theSubst.getSubstitutionMap().keySet()) {      final PsiType actualType=theSubst.substitute(theParm);      if (actualType == null) {        subst=subst.put(theParm,Bottom.BOTTOM);      } else       if (actualType instanceof PsiWildcardType) {        final PsiWildcardType wctype=(PsiWildcardType)actualType;        final PsiType bound=wctype.getBound();        if (bound == null) {          subst=subst.put(theParm,actualType);        } else {          final PsiType banabound=banalize(bound);          subst=subst.put(theParm,wctype.isExtends() ? PsiWildcardType.createExtends(theManager,banabound) : PsiWildcardType.createSuper(theManager,banabound));        }      } else {        final PsiType banType=banalize(actualType);        if (banType == null) {          return t;        }        subst=subst.put(theParm,banType);      }    }    return JavaPsiFacade.getInstance(theManager.getProject()).getElementFactory().createType(theClass,subst);  } else   if (t instanceof PsiArrayType) {    return banalize(((PsiArrayType)t).getComponentType()).createArrayType();  }  return t;}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public MetaData modifyMetaData(MetaData unmodifiedMetaData){  return unmodifiedMetaData;}  }
class C{  public int[] searchRange(int[] A,int target){  int[] range={-1,-1};  if (A == null || A.length == 0)   return range;  int index=binarySearch(A,0,A.length - 1,target);  if (index != -1) {    int left=index;    int right=index;    range[0]=left;    range[1]=right;    while ((left=binarySearch(A,0,left - 1,target)) != -1)     range[0]=left;    while ((right=binarySearch(A,right + 1,A.length - 1,target)) != -1)     range[1]=right;  }  return range;}  }
class C{  public static boolean isValidIpAddress(String ipAddress){  boolean result=false;  if ((ipAddress != null) && (!ipAddress.equals("127.0.0.1")) && (!ipAddress.equals("localhost"))) {    result=true;  }  return result;}  }
class C{  protected void updateKeys(ProcessVar pv){  keys=pv.keySet().toArray();  Arrays.sort(keys);}  }
class C{  public Charset charset(){  return charset != null ? Charset.forName(charset) : null;}  }
class C{  public LocalDateTime withYearOfEra(int yearOfEra){  return withLocalMillis(getChronology().yearOfEra().set(getLocalMillis(),yearOfEra));}  }
class C{  public static <E>List<E> sealList(Collection<E> c){  return Collections.unmodifiableList(new ArrayList<>(c));}  }
class C{  XSLTElementDef(XSLTSchema schema,String namespace,String name,String nameAlias,XSLTElementDef[] elements,XSLTAttributeDef[] attributes,XSLTElementProcessor contentHandler,Class classObject,boolean has_order,int order,boolean multiAllowed){  this(schema,namespace,name,nameAlias,elements,attributes,contentHandler,classObject,order,multiAllowed);  this.m_isOrdered=has_order;}  }
class C{  private void initMessageConsumer(){  if ((mMessageConsumer == null) && isLoggedIn()) {    mMessageConsumer=new ChatRabbitMQConnector(HttpConstants.getChatUrl(),HttpConstants.getChatPort(),VIRTUAL_HOST,String.format(Locale.US,EXCHANGE_NAME_FORMAT,UserInfo.INSTANCE.getId()),AbstractRabbitMQConnector.ExchangeType.FANOUT);    Logger.d(TAG,"consumer initialized");    mMessageConsumer.setOnReceiveMessageHandler(ChatService.this);    mMessageConsumer.setOnDisconnectCallback(ChatService.this);  }}  }
class C{  static public void assertTrue(String message,boolean condition){  if (!condition) {    fail(message);  }}  }
class C{  public boolean contains(Vector3 v){  if (min.x > v.x)   return false;  if (max.x < v.x)   return false;  if (min.y > v.y)   return false;  if (max.y < v.y)   return false;  if (min.z > v.z)   return false;  if (max.z < v.z)   return false;  return true;}  }
class C{  public QuotedStringTokenizer(String text){  this(text," ",false);}  }
class C{  private static String[] makeArray(Set<String> one,Set<String> two){  Set<String> all=new HashSet<String>(one);  all.addAll(two);  return all.toArray(new String[all.size()]);}  }
class C{  public String useUnsmoothedTipText(){  return "Whether to use unsmoothed predictions.";}  }
class C{  static public Locator southWest(){  return southWest(false);}  }
class C{  public static float calculateTop(float left,float right,float bottom,float targetAspectRatio){  final float width=right - left;  final float top=bottom - (width / targetAspectRatio);  return top;}  }
class C{  public InfomodelSource createInfomodelSource(){  InfomodelSourceImpl infomodelSource=new InfomodelSourceImpl();  return infomodelSource;}  }
class C{  public static char combine2bytesToU16(byte high,byte low){  char highU8=convertByte2Uint8(high);  char lowU8=convertByte2Uint8(low);  return (char)(highU8 << 8 | lowU8);}  }
class C{  void removeEQ(Object o){  final ReentrantLock lock=this.lock;  lock.lock();  try {    for (Iterator<E> it=q.iterator(); it.hasNext(); ) {      if (o == it.next()) {        it.remove();        break;      }    }  }  finally {    lock.unlock();  }}  }
class C{  public static boolean validateUint16(String value){  try {    int intValue=Integer.parseInt(value);    return intValue >= 0 && intValue <= 65535;  } catch (  Exception e) {    return false;  }}  }
class C{  public final void point(Vec3D v){  gfx.point(v.x,v.y,v.z);}  }
class C{  private Set<IVariable<?>> _getJoinVars(final SubqueryBase aSubquery,final IGroupMemberNode theNode,final Set<IVariable<?>> vars){  final Set<IVariable<?>> boundBySubquery=getDefinitelyProducedBindings(aSubquery);  if (log.isInfoEnabled()) {    log.info(boundBySubquery);  }  final Set<IVariable<?>> incomingBindings=getDefinitelyIncomingBindings(theNode,new LinkedHashSet<IVariable<?>>());  if (log.isInfoEnabled()) {    log.info(incomingBindings);  }  boundBySubquery.retainAll(incomingBindings);  if (log.isInfoEnabled()) {    log.info(boundBySubquery);  }  vars.addAll(boundBySubquery);  if (log.isInfoEnabled()) {    log.info(vars);  }  return vars;}  }
class C{  public void addSize(int sizeAdded){  count+=sizeAdded;}  }
class C{  public String bucketName(){  return this.bucketName;}  }
class C{  public void clearRow(int nodeIndex,int rowIndex){  for (int colIndex=0; colIndex < getNumColumns(nodeIndex); colIndex++) {    setProbability(nodeIndex,rowIndex,colIndex,Double.NaN);  }}  }
class C{  public MissingBody(){  requestFileName="missing-body.query";}  }
class C{  public static <E extends Comparable<E>>SingleLinkedNode<E> reverseLinkedListInGroups(SingleLinkedNode<E> node,int k){  SingleLinkedNode<E> curr=node, prev=null, next=null;  int i=0;  while (curr != null && i < k) {    next=curr.next;    curr.next=prev;    prev=curr;    curr=next;    i++;  }  if (next != null) {    node.next=reverseLinkedListInGroups(next,k);  }  return prev;}  }
class C{  public MatFileInputStream(ByteBuffer buf,int type){  this.type=type;  this.buf=buf;}  }
class C{  public VolumeListsImpl(){  _list=new ArrayList();}  }
class C{  public static BoundingShape circle(double radius){  return new BoundingShape(ShapeType.CIRCLE,new Dimension2D(radius * 2,radius * 2),new Dimension2D(radius * 2,radius * 2));}  }
class C{  private void skipWhitespace(){  matcher.usePattern(WHITESPACE);  if (matcher.lookingAt()) {    matcher.region(matcher.end(),matcher.regionEnd());  }}  }
class C{  public PlaneModel(Double length,Double width,Color color){  this.length=length;  this.width=width;  this.color=color;}  }
class C{  @Override public void input(Object input,Network network){  if (!isEnabled()) {    return;  }  try {    if (input instanceof Status) {      Status tweet=(Status)input;      log("Processing status",Bot.FINE,tweet.getText(),tweet.getId());      if ((System.currentTimeMillis() - tweet.getCreatedAt().getTime()) > DAY) {        log("Day old status",Bot.FINE,tweet.getId(),tweet.getCreatedAt().getTime());        return;      }      if (this.processedTweets.contains(tweet.getId())) {        log("Already processed status",Bot.FINE,tweet.getText(),tweet.getId());        return;      }      this.processedTweets.add(tweet.getId());      String name=tweet.getUser().getScreenName();      String replyTo=tweet.getInReplyToScreenName();      String text=tweet.getText().trim();      TextStream stream=new TextStream(text);      String firstWord=null;      if (stream.peek() == '@') {        stream.next();        String replyTo2=stream.nextWord();        firstWord=stream.peekWord();        text=stream.upToEnd().trim();        if (!replyTo2.equals(replyTo)) {          log("Reply to does not match:",Bot.FINE,replyTo2,replyTo);        }        replyTo=replyTo2;        if (replyTo.equals(this.userName)) {          if ("follow".equals(firstWord)) {            log("Adding friend",Level.INFO,tweet.getUser().getScreenName());            getConnection().createFriendship(tweet.getUser().getId());          } else           if ("unfollow".equals(firstWord)) {            log("Removing friend",Level.INFO,tweet.getUser().getScreenName());            getConnection().destroyFriendship(tweet.getUser().getId());          }        }      }      if (!tweet.isRetweet() && !tweet.getUser().isProtected()) {        stream.reset();        List<String> words=stream.allWords();        for (        String keywords : getRetweet()) {          List<String> keyWords=new TextStream(keywords).allWords();          if (!keyWords.isEmpty()) {            if (words.containsAll(keyWords)) {              retweet(tweet);              break;            }          }        }      }      log("Input status",Level.FINE,tweet.getText(),name,replyTo);      this.tweetsProcessed++;      inputSentence(text,name,replyTo,tweet,network);    }  } catch (  Exception exception) {    log(exception);  }}  }
class C{  public FakeTmmTaskAction(String type,int amount,int workUnits){  this.amount=amount;  this.workUnits=workUnits;  this.type=type;  putValue(NAME,"TASK: add " + amount + " "+ type+ " task ("+ workUnits+ " workUnits)");}  }
class C{  public String utf8ToString(){  final char[] ref=new char[length];  final int len=UnicodeUtil.UTF8toUTF16(bytes,offset,length,ref);  return new String(ref,0,len);}  }
class C{  public static void generateRPClass(){  final RPClass rpclass=new RPClass(Events.GROUP_INVITE);  rpclass.add(DefinitionClass.ATTRIBUTE,"leader",Type.STRING);  rpclass.add(DefinitionClass.ATTRIBUTE,"expire",Type.FLAG);}  }
class C{  private boolean pathologicalCase(String text){  String tag=toRegex(CollectionUtil.first(tags));  String regex=String.format("(?is)(<\\s*(%s)\\s*.*?>)",tag);  Matcher match=compile(regex).matcher(text);  if (match.find()) {    regex=String.format("(?is)(.*?)(<\\s*/\\s*(%s)\\s*.*?>)",tag);    return !compile(regex).matcher(text).find(match.end());  }  return true;}  }
class C{  public static void main(String[] args) throws Throwable {  NoTimestampTest test=new NoTimestampTest();  test.start();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void addSubmitRecords(ChangeAttribute ca,List<SubmitRecord> submitRecords){  ca.submitRecords=new ArrayList<>();  for (  SubmitRecord submitRecord : submitRecords) {    SubmitRecordAttribute sa=new SubmitRecordAttribute();    sa.status=submitRecord.status.name();    if (submitRecord.status != SubmitRecord.Status.RULE_ERROR) {      addSubmitRecordLabels(submitRecord,sa);    }    ca.submitRecords.add(sa);  }  if (ca.submitRecords.isEmpty()) {    ca.submitRecords=null;  }}  }
class C{  public boolean isValid(String principal,String ticket){  if ("anonymous".equals(principal) && "anonymous".equals(ticket))   return true;  Entry entry=sessions.get(principal);  return entry != null && entry.ticket.equals(ticket);}  }
class C{  public StreamDeletedException(String stream){  super(String.format("Event stream '%s' is deleted.",stream));  this.stream=stream;}  }
class C{  private void drawNormals(Renderer r){  if (showNormals) {    Debugger.drawNormals(rootNode,r);  }}  }
class C{  Assignment(AST ast){  super(ast);}  }
class C{  @SuppressWarnings("unchecked") public static Map<String,LinkedHashSet<String>> highlighting(final SimpleOrderedMap<Object> val){  Map<String,LinkedHashSet<String>> snippets=new HashMap<String,LinkedHashSet<String>>();  if (val == null)   return snippets;  int sz=val.size();  Object v, vv;  for (int i=0; i < sz; i++) {    String n=val.getName(i);    v=val.getVal(i);    if (v instanceof SimpleOrderedMap) {      int sz1=((SimpleOrderedMap<Object>)v).size();      LinkedHashSet<String> t=new LinkedHashSet<String>();      for (int j=0; j < sz1; j++) {        vv=((SimpleOrderedMap<Object>)v).getVal(j);        if (vv instanceof String[]) {          for (          String t0 : ((String[])vv))           t.add(t0);        }      }      snippets.put(n,t);    }  }  return snippets;}  }
class C{  public void startPrefixMapping(String prefix,String uri) throws SAXException {}  }
class C{  protected Node findActionArgumentNode(List<Node> nodes,ActionArgument arg){  for (  Node node : nodes) {    if (arg.isNameOrAlias(getUnprefixedNodeName(node)))     return node;  }  return null;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case StextPackage.GUARD__EXPRESSION:    setExpression((Expression)null);  return;}super.eUnset(featureID);}  }
class C{  public static String digest(DigestAlgorithm digestAlgoritm,Token token){  byte[] digest=digest(digestAlgoritm,token.getEncoded());  return Base64.encodeBase64String(digest);}  }
class C{  public static boolean validateUrl(String value){  try {    URL url=new URL((String)value);  } catch (  MalformedURLException e) {    return false;  }  return true;}  }
class C{  public final Uri storeLogFile(final LogFile logFile,final int sessionId){  final ContentValues values=new ContentValues();  values.put(Schema.COL_MANUFACTURER,logFile.getManufacturer());  values.put(Schema.COL_MODEL,logFile.getModel());  values.put(Schema.COL_REVISION,logFile.getRevision());  values.put(Schema.COL_SWID,logFile.getSwid());  values.put(Schema.COL_SWVER,logFile.getSwVersion());  values.put(Schema.COL_TIMESTAMP,System.currentTimeMillis());  values.put(Schema.COL_SESSION_ID,sessionId);  return contentResolver.insert(ContentProvider.CONTENT_URI_LOGFILE,values);}  }
class C{  public static void createCollection(Set<String> solrHosts,String collectionName,String configName,int numShards,int replicationFactor,int numShardsPerNode,String solrcoreHttpPath) throws Exception {  logger.info("createCollection this is the collection " + collectionName + "  and this is the replicationFactor: "+ replicationFactor);  String command=String.format("http://%s:%s/solr/admin/collections?wt=json&action=CREATE&name=%s&numShards=%d&replicationFactor=%d&collection.configName=%s&maxShardsPerNode=%d",solrHosts.toArray()[0],DEFAULT_SOLR_PORT,collectionName,numShards,replicationFactor,configName,numShardsPerNode);  if (!StringUtils.isBlank(solrcoreHttpPath)) {    command+="&collection.solrcoreproperties=" + solrcoreHttpPath;  }  logger.info("createCollection this is the collection " + collectionName + "  and this is the command: "+ command);  String result=SolrInteractionUtils.executeSolrCommand(command);  logger.info(result);}  }
class C{  public InstanceProvider(Jenkins jenkins,String pluginName,String className,Logger logger){  this.provider=new BaseProvider<T>(jenkins,pluginName,logger);  this.pluginName=pluginName;  this.className=className;  this.logger=logger;}  }
class C{  public static byte[] bitmapToByte(Bitmap b){  if (b == null) {    return null;  }  ByteArrayOutputStream o=new ByteArrayOutputStream();  b.compress(Bitmap.CompressFormat.PNG,100,o);  return o.toByteArray();}  }
class C{  public AVLTreeST(){}  }
class C{  @Override public List<String> onTabComplete(CommandSender sender,Command command,String label,String[] args){  if (args.length == 1) {    return getSuggestions(args[0],"debug","reload","convert","player","group");  } else   if (args.length == 2 || args.length == 3) {    if (args[0].equalsIgnoreCase("player")) {      if (args.length == 2) {        List<String> suggestions=new ArrayList<>();        for (        Player player : Bukkit.getOnlinePlayers()) {          if (player.getName().toLowerCase().startsWith(args[1].toLowerCase())) {            suggestions.add(player.getName());          }        }        return suggestions;      } else {        return getSuggestions(args[2],"clear","prefix","suffix","priority");      }    } else     if (args[0].equalsIgnoreCase("group")) {      if (args.length == 2) {        List<String> data=new ArrayList<>(handler.getGroupData().size() + 4);        data.add("list");        data.add("add");        data.add("remove");        data.add("order");        for (        GroupData groupData : handler.getGroupData()) {          data.add(groupData.getGroupName());        }        return getSuggestions(args[1],data.toArray(new String[data.size()]));      } else {        return getSuggestions(args[2],"clear","prefix","suffix","permission","priority");      }    }  }  return new ArrayList<>();}  }
class C{  public static File createTempDirectory() throws IOException {  return FileUtils.createTempDir(PREFIX,SUFFIX);}  }
class C{  private void deleteCurrentFile(File fileToDelete) throws IOException {  logger.info("Preparing to delete file {}",fileToDelete);  if (!fileToDelete.exists()) {    logger.warn("Unable to delete nonexistent file: {}",fileToDelete);    return;  }  if (!fileToDelete.delete()) {    throw new IOException("Unable to delete spool file: " + fileToDelete);  }  deleteMetaFile();}  }
class C{  public boolean isRegarding(Socket socket){  return socket.equals(this.socket);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:43.334 -0500",hash_original_method="5088685B92B0533111B1789635B9B452",hash_generated_method="26BE9D5EBA83E15A05E65873FF8E9852") public void close() throws IOException {  if (!this.closed) {    this.closed=true;    this.out.flush();  }}  }
class C{  public File createSwitchListFile(String name){  return createFile(getDefaultSwitchListName(name),false);}  }
class C{  public JsonArray remove(int index){  values.remove(index);  return this;}  }
class C{  public void findAndInit(Object someObj){  if (someObj instanceof MapBean) {    ((MapBean)someObj).setMapBeanRepaintPolicy(this);    setMap((MapBean)someObj);    if (DEBUG) {      Debug.output(getClass().getName() + " found MapBean");    }  }}  }
class C{  private PreferenceLayout createPreferenceLayout(Preference preference,PreferenceLayout in){  PreferenceLayout pl=in != null ? in : new PreferenceLayout();  pl.name=preference.getClass().getName();  pl.resId=preference.getLayoutResource();  pl.widgetResId=preference.getWidgetLayoutResource();  return pl;}  }
class C{  public static void Register(PrivilegedAgent agent){  PrivilegedProxy.agent=agent;}  }
class C{  public T caseAnonymous_constantDeclaration_2_(Anonymous_constantDeclaration_2_ object){  return null;}  }
class C{  public Rectangle2D expand(Rectangle2D area,Rectangle2D result){  if (result == null) {    result=new Rectangle2D.Double();  }  result.setRect(area.getX() - this.left,area.getY() - this.top,area.getWidth() + this.left + this.right,area.getHeight() + this.top + this.bottom);  return result;}  }
class C{  public synchronized void measure(String operation,int latency){  if (!data.containsKey(operation)) {synchronized (this) {      if (!data.containsKey(operation)) {        data.put(operation,constructOneMeasurement(operation));      }    }  }  try {    data.get(operation).measure(latency);  } catch (  java.lang.ArrayIndexOutOfBoundsException e) {    System.out.println("ERROR: java.lang.ArrayIndexOutOfBoundsException - ignoring and continuing");    e.printStackTrace();    e.printStackTrace(System.out);  }}  }
class C{  public Bound<T> withNumShards(int numShards){  checkArgument(numShards >= 0);  return new Bound<>(name,filenamePrefix,filenameSuffix,header,footer,coder,numShards,shardTemplate,validate,writableByteChannelFactory);}  }
class C{  protected MessageProcessor createMessageProcessor(InetAddress ipAddress,int port,String transport) throws java.io.IOException {  if (transport.equalsIgnoreCase("udp")) {    UDPMessageProcessor udpMessageProcessor=new UDPMessageProcessor(ipAddress,this,port);    this.addMessageProcessor(udpMessageProcessor);    this.udpFlag=true;    return udpMessageProcessor;  } else   if (transport.equalsIgnoreCase("tcp")) {    TCPMessageProcessor tcpMessageProcessor=new TCPMessageProcessor(ipAddress,this,port);    this.addMessageProcessor(tcpMessageProcessor);    return tcpMessageProcessor;  } else   if (transport.equalsIgnoreCase("tls")) {    TLSMessageProcessor tlsMessageProcessor=new TLSMessageProcessor(ipAddress,this,port);    this.addMessageProcessor(tlsMessageProcessor);    return tlsMessageProcessor;  } else   if (transport.equalsIgnoreCase("sctp")) {    try {      Class<?> mpc=ClassLoader.getSystemClassLoader().loadClass("gov2.nist.javax2.sip.stack.sctp.SCTPMessageProcessor");      MessageProcessor mp=(MessageProcessor)mpc.newInstance();      mp.initialize(ipAddress,port,this);      this.addMessageProcessor(mp);      return mp;    } catch (    ClassNotFoundException e) {      throw new IllegalArgumentException("SCTP not supported (needs Java 7 and SCTP jar in classpath)");    }catch (    InstantiationException ie) {      throw new IllegalArgumentException("Error initializing SCTP",ie);    }catch (    IllegalAccessException ie) {      throw new IllegalArgumentException("Error initializing SCTP",ie);    }  } else {    throw new IllegalArgumentException("bad transport");  }}  }
class C{  public String lambdaTipText(){  return "The regularization constant. (default = 0.0001)";}  }
class C{  public MailMessage clearRecipientsCc(){  cc.clear();  return this;}  }
class C{  public Dimension preferredLayoutSize(Container parent){  Dimension rd, mbd;  Insets i=getInsets();  if (contentPane != null) {    rd=contentPane.getPreferredSize();  } else {    rd=parent.getSize();  }  if (menuBar != null && menuBar.isVisible()) {    mbd=menuBar.getPreferredSize();  } else {    mbd=new Dimension(0,0);  }  return new Dimension(Math.max(rd.width,mbd.width) + i.left + i.right,rd.height + mbd.height + i.top+ i.bottom);}  }
class C{  public void waitForCGCopyState(FunctionalAPIImpl impl,ConsistencyGroupCopyUID groupCopy,StorageAccessState accessState) throws FunctionalAPIActionFailedException_Exception, FunctionalAPIInternalError_Exception, InterruptedException, RecoverPointException {  if (accessState == null) {    throw RecoverPointException.exceptions.waitForInvalidCopyState("null");  }  ConsistencyGroupUID groupUID=groupCopy.getGroupUID();  List<ConsistencyGroupCopyState> groupCopyStateList;  String cgName=impl.getGroupName(groupCopy.getGroupUID());  String cgCopyName=impl.getGroupCopyName(groupCopy);  final int maxMinutes=30;  final int sleepTimeSeconds=15;  final int secondsPerMin=60;  final int numItersPerMin=secondsPerMin / sleepTimeSeconds;  logger.info(String.format("Waiting up to %d minutes for consistency group copy state to change to %s.  Copy name: %s, consistency group name: %s.",maxMinutes,accessState.toString(),cgCopyName,cgName));  for (int minIter=0; minIter < maxMinutes; minIter++) {    for (int perMinIter=0; perMinIter < numItersPerMin; perMinIter++) {      groupCopyStateList=impl.getGroupState(groupUID).getGroupCopiesStates();      for (      ConsistencyGroupCopyState groupCopyState : groupCopyStateList) {        if (RecoverPointUtils.copiesEqual(groupCopyState.getCopyUID(),groupCopy)) {          StorageAccessState copyAccessState=groupCopyState.getStorageAccessState();          logger.info("Current Copy Access State: " + copyAccessState);          if (copyAccessState.equals(accessState)) {            logger.info(String.format("Copy %s of group %s is in %s state.",cgCopyName,cgName,copyAccessState.toString()));            return;          }        }      }      logger.info("Copy image " + cgCopyName + " of group "+ cgName+ " not in correct state.  Sleeping "+ sleepTimeSeconds+ " seconds");      try {        Thread.sleep(Long.valueOf(sleepTimeSeconds * numMillisInSecond));      } catch (      InterruptedException e) {        Thread.currentThread().interrupt();      }    }  }  throw RecoverPointException.exceptions.stateChangeNeverCompleted();}  }
class C{  @Override public int hashCode(){  return this.getEventId().hashCode();}  }
class C{  @Override public boolean isEnabled(){  return mIsEnabled;}  }
class C{  public static void sort(double[] array){  sort(0,array.length,array);}  }
class C{  void implCompress(byte[] buf,int ofs){  b2iLittle64(buf,ofs,x);  int a=state[0];  int b=state[1];  int c=state[2];  int d=state[3];  a=FF(a,b,c,d,x[0],S11);  d=FF(d,a,b,c,x[1],S12);  c=FF(c,d,a,b,x[2],S13);  b=FF(b,c,d,a,x[3],S14);  a=FF(a,b,c,d,x[4],S11);  d=FF(d,a,b,c,x[5],S12);  c=FF(c,d,a,b,x[6],S13);  b=FF(b,c,d,a,x[7],S14);  a=FF(a,b,c,d,x[8],S11);  d=FF(d,a,b,c,x[9],S12);  c=FF(c,d,a,b,x[10],S13);  b=FF(b,c,d,a,x[11],S14);  a=FF(a,b,c,d,x[12],S11);  d=FF(d,a,b,c,x[13],S12);  c=FF(c,d,a,b,x[14],S13);  b=FF(b,c,d,a,x[15],S14);  a=GG(a,b,c,d,x[0],S21);  d=GG(d,a,b,c,x[4],S22);  c=GG(c,d,a,b,x[8],S23);  b=GG(b,c,d,a,x[12],S24);  a=GG(a,b,c,d,x[1],S21);  d=GG(d,a,b,c,x[5],S22);  c=GG(c,d,a,b,x[9],S23);  b=GG(b,c,d,a,x[13],S24);  a=GG(a,b,c,d,x[2],S21);  d=GG(d,a,b,c,x[6],S22);  c=GG(c,d,a,b,x[10],S23);  b=GG(b,c,d,a,x[14],S24);  a=GG(a,b,c,d,x[3],S21);  d=GG(d,a,b,c,x[7],S22);  c=GG(c,d,a,b,x[11],S23);  b=GG(b,c,d,a,x[15],S24);  a=HH(a,b,c,d,x[0],S31);  d=HH(d,a,b,c,x[8],S32);  c=HH(c,d,a,b,x[4],S33);  b=HH(b,c,d,a,x[12],S34);  a=HH(a,b,c,d,x[2],S31);  d=HH(d,a,b,c,x[10],S32);  c=HH(c,d,a,b,x[6],S33);  b=HH(b,c,d,a,x[14],S34);  a=HH(a,b,c,d,x[1],S31);  d=HH(d,a,b,c,x[9],S32);  c=HH(c,d,a,b,x[5],S33);  b=HH(b,c,d,a,x[13],S34);  a=HH(a,b,c,d,x[3],S31);  d=HH(d,a,b,c,x[11],S32);  c=HH(c,d,a,b,x[7],S33);  b=HH(b,c,d,a,x[15],S34);  state[0]+=a;  state[1]+=b;  state[2]+=c;  state[3]+=d;}  }
class C{  public static BufferedImage createCompatibleTranslucentImage(int width,int height){  return isHeadless() ? new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB) : getGraphicsConfiguration().createCompatibleImage(width,height,Transparency.TRANSLUCENT);}  }
class C{  @TargetApi(Build.VERSION_CODES.M) @Override public void onRequestPermissionsResult(int requestCode,@NonNull String[] permissions,@NonNull int[] grantResults){  if (mPermissionRequest != null) {    mPermissionRequest.onRequestPermissionsResult(requestCode,permissions,grantResults);    mPermissionRequest=null;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:08.193 -0500",hash_original_method="EC2DC464BD3BB987F4ACA997202AA983",hash_generated_method="C1F063A87C38C41A8C0646FAC8DC1A82") public void removeValue(String name){  if (name == null) {    throw new IllegalArgumentException("name == null");  }  Object old=values.remove(name);  if (old instanceof SSLSessionBindingListener) {    SSLSessionBindingListener listener=(SSLSessionBindingListener)old;    listener.valueUnbound(new SSLSessionBindingEvent(this,name));  }}  }
class C{  public static int rotationTo(int s1,int s2){  if ((s1 & 6) == (s2 & 6)) {    throw new IllegalArgumentException("Faces " + s1 + " and "+ s2+ " are opposites");  }  return rotSideMap[s1 * 6 + s2];}  }
class C{  @Override protected void initData(){  long oldTime=System.currentTimeMillis() - 1200000;  Date date=new Date(oldTime);  this.string2DateTv.setText(DateUtils.string2Date(date.toString(),"yyyy-MM-dd").toString());  this.date2StringTv.setText(DateUtils.date2String(oldTime,"yyyy-MM-dd HH:mm:ss"));  this.getYearMonthDayTv.setText(new Date(DateUtils.getYearMonthDay(oldTime)).toString());  this.date2yyyyMMddTv.setText(DateUtils.date2yyyyMMdd(date));  this.date2MMddWeekTv.setText(DateUtils.date2MMddWeek(date));  this.date2yyyyMMddWeekTv.setText(DateUtils.date2yyyyMMddWeek(date));  this.time24To12Tv.setText(DateUtils.time24To12("16:26"));  this.getTimestampStringTv.setText(DateUtils.getTimestampString(date));}  }
class C{  private String toString(String spacing){  String str=spacing;  if (!textElement) {    str+="<" + getTagName();    if (attributes != null) {      for (Enumeration e=attributes.keys(); e.hasMoreElements(); ) {        String attrStr=(String)e.nextElement();        String val=(String)attributes.get(attrStr);        str+=" " + attrStr + "='"+ val+ "'";      }    }    str+=">\n";    if (children != null) {      for (int i=0; i < children.size(); i++) {        str+=((Element)children.get(i)).toString(spacing + ' ');      }    }    str+=spacing + "</" + getTagName()+ ">\n";  } else {    str+="'" + name + "'\n";  }  return str;}  }
class C{  public void print(boolean b){  return;}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  @AfterClass public void stopJetty() throws Exception {  server.stop();}  }
class C{  public static <R,C,V>Cell<R,C,V> immutableCell(@Nullable R rowKey,@Nullable C columnKey,@Nullable V value){  return new ImmutableCell<R,C,V>(rowKey,columnKey,value);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void repaintLine(int line){  int y=textArea.getInsets().top;  y+=line * cellHeight;  repaint(0,y,cellWidth,cellHeight);}  }
class C{  public static int findMinutesInReminderList(ArrayList<Integer> values,int minutes){  int index=values.indexOf(minutes);  if (index == -1) {    Log.e(TAG,"Cannot find minutes (" + minutes + ") in list");    return 0;  }  return index;}  }
class C{  public void skippedEntity(String name) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#skippedEntity: " + name);  if (m_contentHandler != null) {    m_contentHandler.skippedEntity(name);  }}  }
class C{  public XmlParser(Context context,int changeLogFileResourceId){  super(context);  this.mChangeLogFileResourceId=changeLogFileResourceId;}  }
class C{  public Parameters(){  this.target=TEX2D;  this.format=ARGB;  this.sampling=BILINEAR;  this.mipmaps=true;  this.wrapU=CLAMP;  this.wrapV=CLAMP;}  }
class C{  public void showFolderFragmentActionItems(String filePath,MenuInflater inflater,Menu menu,boolean showPaste){  getMenu().clear();  inflater.inflate(R.menu.files_folders_fragment,menu);  getActionBar().setDisplayShowTitleEnabled(false);  getActionBar().setDisplayUseLogoEnabled(false);  getActionBar().setDisplayShowCustomEnabled(true);  getActionBar().setHomeButtonEnabled(true);  getActionBar().setLogo(0);  getActionBar().setIcon(0);  if (showPaste) {    menu.findItem(R.id.action_paste).setVisible(true);    menu.findItem(R.id.action_cancel).setVisible(true);    getActionBar().setBackgroundDrawable(mContext.getResources().getDrawable(R.drawable.cab_background_top_apptheme));    if (Build.VERSION.SDK_INT == Build.VERSION_CODES.KITKAT)     getWindow().setBackgroundDrawable(new ColorDrawable(0xFF002E3E));  } else {    menu.findItem(R.id.action_paste).setVisible(false);    menu.findItem(R.id.action_cancel).setVisible(false);    getActionBar().setBackgroundDrawable(UIElementsHelper.getGeneralActionBarBackground(mContext));    if (Build.VERSION.SDK_INT == Build.VERSION_CODES.KITKAT)     getWindow().setBackgroundDrawable(UIElementsHelper.getGeneralActionBarBackground(mContext));  }  LayoutInflater inflator=LayoutInflater.from(this);  View view=inflator.inflate(R.layout.custom_actionbar_layout,null);  TextView titleText=(TextView)view.findViewById(R.id.custom_actionbar_title);  titleText.setText(filePath);  titleText.setSelected(true);  titleText.setTextColor(0xFFFFFFFF);  getActionBar().setCustomView(view);}  }
class C{  @Override public Phase advancePhase(Phase phase){  if (phase == left) {    return right;  }  if (phase == right) {    return done;  }  return left;}  }
class C{  private void createCameraSource(){  Context context=getApplicationContext();  FaceDetector faceDetector=new FaceDetector.Builder(context).build();  FaceTrackerFactory faceFactory=new FaceTrackerFactory(mGraphicOverlay);  faceDetector.setProcessor(new MultiProcessor.Builder<>(faceFactory).build());  BarcodeDetector barcodeDetector=new BarcodeDetector.Builder(context).build();  BarcodeTrackerFactory barcodeFactory=new BarcodeTrackerFactory(mGraphicOverlay);  barcodeDetector.setProcessor(new MultiProcessor.Builder<>(barcodeFactory).build());  MultiDetector multiDetector=new MultiDetector.Builder().add(faceDetector).add(barcodeDetector).build();  if (!multiDetector.isOperational()) {    Log.w(TAG,"Detector dependencies are not yet available.");    IntentFilter lowstorageFilter=new IntentFilter(Intent.ACTION_DEVICE_STORAGE_LOW);    boolean hasLowStorage=registerReceiver(null,lowstorageFilter) != null;    if (hasLowStorage) {      Toast.makeText(this,R.string.low_storage_error,Toast.LENGTH_LONG).show();      Log.w(TAG,getString(R.string.low_storage_error));    }  }  mCameraSource=new CameraSource.Builder(getApplicationContext(),multiDetector).setFacing(CameraSource.CAMERA_FACING_BACK).setRequestedPreviewSize(1600,1024).setRequestedFps(15.0f).build();}  }
class C{  public KMLScreenImageImpl(KMLTraversalContext tc,KMLScreenOverlay overlay){  this.parent=overlay;  if (tc == null) {    String msg=Logging.getMessage("nullValue.TraversalContextIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (overlay == null) {    String msg=Logging.getMessage("nullValue.ParentIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  KMLVec2 xy=this.parent.getScreenXY();  if (xy != null) {    this.screenOffset=new Offset(xy.getX(),xy.getY(),KMLUtil.kmlUnitsToWWUnits(xy.getXunits()),KMLUtil.kmlUnitsToWWUnits(xy.getYunits()));  }  xy=this.parent.getOverlayXY();  if (xy != null) {    this.imageOffset=new Offset(xy.getX(),xy.getY(),KMLUtil.kmlUnitsToWWUnits(xy.getXunits()),KMLUtil.kmlUnitsToWWUnits(xy.getYunits()));  }  this.setRotation(overlay.getRotation());  xy=this.parent.getRotationXY();  if (xy != null) {    setRotationOffset(new Offset(xy.getX(),xy.getY(),KMLUtil.kmlUnitsToWWUnits(xy.getXunits()),KMLUtil.kmlUnitsToWWUnits(xy.getYunits())));  }  String colorStr=overlay.getColor();  if (colorStr != null) {    Color color=WWUtil.decodeColorABGR(colorStr);    this.setColor(color);  }  KMLVec2 kmlSize=this.parent.getSize();  if (kmlSize != null) {    Size size=new Size();    size.setWidth(getSizeMode(kmlSize.getX()),kmlSize.getX(),KMLUtil.kmlUnitsToWWUnits(kmlSize.getXunits()));    size.setHeight(getSizeMode(kmlSize.getY()),kmlSize.getY(),KMLUtil.kmlUnitsToWWUnits(kmlSize.getYunits()));    this.setSize(size);  }}  }
class C{  @Override public List<T> findByExample(final T exampleT){  return persistenceService.findByExample(exampleT);}  }
class C{  public static String dumpAsString(ASN1Encodable obj){  StringBuffer buf=new StringBuffer();  _dumpAsString("",false,obj.toASN1Primitive(),buf);  return buf.toString();}  }
class C{  public static Control move(List<String> urls,String newDirPath,OnMoveDownloadFilesListener onMoveDownloadFilesListener){  return getFileDownloadManager().move(urls,newDirPath,onMoveDownloadFilesListener);}  }
class C{  public void removeListener(IProblemChangedListener listener){  fListeners.remove(listener);  if (fListeners.isEmpty()) {    ResourceUtils.getWorkspace().removeResourceChangeListener(this);  }}  }
class C{  public Maybe<Zipper<A>> maybeForwards(){  return Maybe.JustWhenTrue(!isEnd(),null);}  }
class C{  public IndependenceTest indTestSubset(List vars){  return null;}  }
class C{  public static SAXParser newSAXParser(String schemaLanguage,boolean namespaceAware,boolean validating,File schema) throws SAXException, ParserConfigurationException {  SchemaFactory schemaFactory=SchemaFactory.newInstance(schemaLanguage);  return newSAXParser(namespaceAware,validating,schemaFactory.newSchema(schema));}  }
class C{  public PermissionCollection newPermissionCollection(){  return new ExecPermissionCollection();}  }
class C{  public void addDatasource(String name,String rpnExpression){  CDef cDef=new CDef(name,rpnExpression);  sources.put(name,cDef);}  }
class C{  @Override public boolean hasActiveShield(int location){  if ((location != Mech.LOC_RARM) && (location != Mech.LOC_LARM)) {    return false;  }  if (isShutDown() || (getCrew().isKoThisRound() || getCrew().isUnconscious())) {    return false;  }  for (int slot=0; slot < this.getNumberOfCriticals(location); slot++) {    CriticalSlot cs=getCritical(location,slot);    if (cs == null) {      continue;    }    if (cs.getType() != CriticalSlot.TYPE_EQUIPMENT) {      continue;    }    if (cs.isDamaged()) {      continue;    }    Mounted m=cs.getMount();    EquipmentType type=m.getType();    if ((type instanceof MiscType) && ((MiscType)type).isShield() && m.curMode().equals(MiscType.S_ACTIVE_SHIELD)) {      return m.getCurrentDamageCapacity(this,m.getLocation()) > 0;    }  }  return false;}  }
class C{  public void diff_cleanupMerge(LinkedList<Diff> diffs){  diffs.add(new Diff(Operation.EQUAL,""));  ListIterator<Diff> pointer=diffs.listIterator();  int count_delete=0;  int count_insert=0;  String text_delete="";  String text_insert="";  Diff thisDiff=pointer.next();  Diff prevEqual=null;  int commonlength;  while (thisDiff != null) {switch (thisDiff.operation) {case INSERT:      count_insert++;    text_insert+=thisDiff.text;  prevEqual=null;break;case DELETE:count_delete++;text_delete+=thisDiff.text;prevEqual=null;break;case EQUAL:if (count_delete + count_insert > 1) {boolean both_types=count_delete != 0 && count_insert != 0;pointer.previous();while (count_delete-- > 0) {pointer.previous();pointer.remove();}while (count_insert-- > 0) {pointer.previous();pointer.remove();}if (both_types) {commonlength=diff_commonPrefix(text_insert,text_delete);if (commonlength != 0) {if (pointer.hasPrevious()) {thisDiff=pointer.previous();assert thisDiff.operation == Operation.EQUAL : "Previous diff should have been an equality.";thisDiff.text+=text_insert.substring(0,commonlength);pointer.next();} else {pointer.add(new Diff(Operation.EQUAL,text_insert.substring(0,commonlength)));}text_insert=text_insert.substring(commonlength);text_delete=text_delete.substring(commonlength);}commonlength=diff_commonSuffix(text_insert,text_delete);if (commonlength != 0) {thisDiff=pointer.next();thisDiff.text=text_insert.substring(text_insert.length() - commonlength) + thisDiff.text;text_insert=text_insert.substring(0,text_insert.length() - commonlength);text_delete=text_delete.substring(0,text_delete.length() - commonlength);pointer.previous();}}if (text_delete.length() != 0) {pointer.add(new Diff(Operation.DELETE,text_delete));}if (text_insert.length() != 0) {pointer.add(new Diff(Operation.INSERT,text_insert));}thisDiff=pointer.hasNext() ? pointer.next() : null;} else if (prevEqual != null) {prevEqual.text+=thisDiff.text;pointer.remove();thisDiff=pointer.previous();pointer.next();}count_insert=0;count_delete=0;text_delete="";text_insert="";prevEqual=thisDiff;break;}thisDiff=pointer.hasNext() ? pointer.next() : null;}if (diffs.getLast().text.length() == 0) {diffs.removeLast();}boolean changes=false;pointer=diffs.listIterator();Diff prevDiff=pointer.hasNext() ? pointer.next() : null;thisDiff=pointer.hasNext() ? pointer.next() : null;Diff nextDiff=pointer.hasNext() ? pointer.next() : null;while (nextDiff != null) {if (prevDiff.operation == Operation.EQUAL && nextDiff.operation == Operation.EQUAL) {if (thisDiff.text.endsWith(prevDiff.text)) {thisDiff.text=prevDiff.text + thisDiff.text.substring(0,thisDiff.text.length() - prevDiff.text.length());nextDiff.text=prevDiff.text + nextDiff.text;pointer.previous();pointer.previous();pointer.previous();pointer.remove();pointer.next();thisDiff=pointer.next();nextDiff=pointer.hasNext() ? pointer.next() : null;changes=true;} else if (thisDiff.text.startsWith(nextDiff.text)) {prevDiff.text+=nextDiff.text;thisDiff.text=thisDiff.text.substring(nextDiff.text.length()) + nextDiff.text;pointer.remove();nextDiff=pointer.hasNext() ? pointer.next() : null;changes=true;}}prevDiff=thisDiff;thisDiff=nextDiff;nextDiff=pointer.hasNext() ? pointer.next() : null;}if (changes) {diff_cleanupMerge(diffs);}}  }
class C{  public static String nullSafeClassName(Object obj){  return (obj != null ? obj.getClass().getName() : NULL_STRING);}  }
class C{  ServiceDocumentDescription buildDocumentDescription(String servicePath){  Service s=findService(servicePath);  if (s == null) {    return null;  }  return buildDocumentDescription(s);}  }
class C{  public double[] unCompress(byte[] compInput){  try {    return Snappy.uncompressDoubleArray(compInput);  } catch (  IOException e) {    LOGGER.error(e,e.getMessage());  }  return null;}  }
class C{  public void updateButtonActionPerformed(){  if (!readPollTimeout()) {    return;  }  if (!readSendDelay()) {    return;  }  if (!readNumInputBits()) {    return;  }  if (!readNumOutputBits()) {    return;  }  setNodeParameters();  changedNode=true;  editMode=false;  curNode=null;  addButton.setVisible(true);  editButton.setVisible(true);  deleteButton.setVisible(true);  doneButton.setVisible(true);  updateButton.setVisible(false);  cancelButton.setVisible(false);  nodeAddrField.setVisible(true);  nodeAddrStatic.setVisible(false);  statusText2.setText(stdStatus2);  statusText3.setText(stdStatus3);  statusText1.setText(rb.getString("FeedBackUpdate") + " " + Integer.toString(nodeAddress));  errorInStatus1=true;}  }
class C{  public boolean isPrivate(){  return Modifier.isPrivate(getAccessFlags());}  }
class C{  private static AC parseAxisConstraint(String s,boolean isCols){  s=s.trim();  if (s.length() == 0)   return new AC();  s=s.toLowerCase();  ArrayList<String> parts=getRowColAndGapsTrimmed(s);  BoundSize[] gaps=new BoundSize[(parts.size() >> 1) + 1];  for (int i=0, iSz=parts.size(), gIx=0; i < iSz; i+=2, gIx++)   gaps[gIx]=parseBoundSize(parts.get(i),true,isCols);  DimConstraint[] colSpecs=new DimConstraint[parts.size() >> 1];  for (int i=0, gIx=0; i < colSpecs.length; i++, gIx++) {    if (gIx >= gaps.length - 1)     gIx=gaps.length - 2;    colSpecs[i]=parseDimConstraint(parts.get((i << 1) + 1),gaps[gIx],gaps[gIx + 1],isCols);  }  AC ac=new AC();  ac.setConstaints(colSpecs);  return ac;}  }
class C{  public void execute(Runnable runnable){  if (!pool.isShutdown())   pool.execute(runnable); else   NotesLog.e("had shut down");}  }
class C{  int readChar() throws IOException {  int ch=read();  if (ch == '<' || ch < 0) {    _peek=ch;    return -1;  }  if (ch == '&') {    ch=read();    if (ch == '#') {      ch=read();      if (ch >= '0' && ch <= '9') {        int v=0;        for (; ch >= '0' && ch <= '9'; ch=read()) {          v=10 * v + ch - '0';        }        if (ch != ';')         throw error("expected ';' at " + (char)ch);        return (char)v;      } else       throw error("expected digit at " + (char)ch);    } else {      _entityBuffer.setLength(0);      for (; ch >= 'a' && ch <= 'z'; ch=read())       _entityBuffer.append((char)ch);      String entity=_entityBuffer.toString();      if (ch != ';')       throw expectedChar("';'",ch);      if (entity.equals("amp"))       return '&'; else       if (entity.equals("apos"))       return '\''; else       if (entity.equals("quot"))       return '"'; else       if (entity.equals("lt"))       return '<'; else       if (entity.equals("gt"))       return '>'; else       throw new BurlapProtocolException("unknown XML entity &" + entity + "; at `"+ (char)ch+ "'");    }  } else   if (ch < 0x80)   return (char)ch; else   if ((ch & 0xe0) == 0xc0) {    int ch1=read();    int v=((ch & 0x1f) << 6) + (ch1 & 0x3f);    return (char)v;  } else   if ((ch & 0xf0) == 0xe0) {    int ch1=read();    int ch2=read();    int v=((ch & 0x0f) << 12) + ((ch1 & 0x3f) << 6) + (ch2 & 0x3f);    return (char)v;  } else   throw new BurlapProtocolException("bad utf-8 encoding");}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public boolean isSetTotalSpace(){  return EncodingUtils.testBit(__isset_bitfield,__TOTALSPACE_ISSET_ID);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case DatatypePackage.ENUM_LITERAL_PROPERTY_ATTRIBUTE__TYPE:    return type != TYPE_EDEFAULT;case DatatypePackage.ENUM_LITERAL_PROPERTY_ATTRIBUTE__VALUE:  return value != null;}return super.eIsSet(featureID);}  }
class C{  public boolean isPartialReturn(){  return partialReturn;}  }
class C{  public static Bitmap decodeSampledBitmapFromFile(String filename,int reqWidth,int reqHeight,ImageCache cache){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeFile(filename,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  if (Utils.hasHoneycomb()) {    addInBitmapOptions(options,cache);  }  options.inJustDecodeBounds=false;  return BitmapFactory.decodeFile(filename,options);}  }
class C{  public Color bluef(float blue){  return rgba(red(),green(),colorConvert(blue),alpha());}  }
class C{  public static void ignoreException(String pattern){  if (SolrException.ignorePatterns == null)   SolrException.ignorePatterns=new HashSet<>();  SolrException.ignorePatterns.add(pattern);}  }
class C{  public RegulatedInputStream build() throws IllegalArgumentException, RegulationException {  return new RegulatedInputStream(this);}  }
class C{  private String toString(ITypeRoot javaElement){  if (javaElement == null)   return "null"; else   return javaElement.getElementName();}  }
class C{  private static void writeSolutionProgressToFile(ArrayList<ArrayList<Double>> solutionProgress,String fileName){  try {    BufferedWriter output=new BufferedWriter(new FileWriter(new File(fileName)));    try {      output.write("Iteration,Best,Average,Worst");      output.newLine();      int iteration=0;      for (      ArrayList<Double> solution : solutionProgress) {        output.write(String.valueOf(iteration));        output.write(",");        output.write(String.valueOf(solution.get(0)));        output.write(",");        output.write(String.valueOf(solution.get(1)));        output.write(",");        output.write(String.valueOf(solution.get(2)));        output.newLine();        iteration++;      }    }  finally {      output.close();    }  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public boolean domainMatch(String host,String domain){  boolean match=host.equals(domain) || (domain.startsWith(".") && host.endsWith(domain));  return match;}  }
class C{  public static int generateLongSocketSerial(){synchronized (SERIAL_LOCK) {    return SERIAL_LONG_TASK++;  }}  }
class C{  @After public void cleanEnv() throws IOException {  FileUtils.deleteDirectory(localTempPath.toFile());  for (  S3FileTransferRequestParamsDto params : Arrays.asList(s3DaoTestHelper.getTestS3FileTransferRequestParamsDto(),S3FileTransferRequestParamsDto.builder().s3BucketName(storageDaoTestHelper.getS3LoadingDockBucketName()).s3KeyPrefix(TEST_S3_KEY_PREFIX + "/").build(),S3FileTransferRequestParamsDto.builder().s3BucketName(storageDaoTestHelper.getS3ExternalBucketName()).s3KeyPrefix(TEST_S3_KEY_PREFIX + "/").build())) {    if (!s3Dao.listDirectory(params).isEmpty()) {      s3Dao.deleteDirectory(params);    }  }  s3Operations.rollback();}  }
class C{  public Polynomial denominator(){  return new Polynomial(D);}  }
class C{  public void user_init() throws java.lang.Exception {  lexer.init();}  }
class C{  public static boolean exists(IndexSearcher searcher,Query query,Filter filter,EarlyTerminatingCollector collector) throws IOException {  collector.reset();  countWithEarlyTermination(searcher,filter,query,collector);  return collector.exists();}  }
class C{  public void removeData(HGPersistentHandle handle){  impl.removeData(handle);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SGenPackage.FEATURE_PARAMETER_VALUE__PARAMETER:    setParameter((FeatureParameter)null);  return;case SGenPackage.FEATURE_PARAMETER_VALUE__EXPRESSION:setExpression((Literal)null);return;}super.eUnset(featureID);}  }
class C{  public FloatMatrix repmat(int rowMult,int columnMult){  FloatMatrix result=new FloatMatrix(rows * rowMult,columns * columnMult);  for (int c=0; c < columnMult; c++) {    for (int r=0; r < rowMult; r++) {      for (int i=0; i < rows; i++) {        for (int j=0; j < columns; j++) {          result.put(r * rows + i,c * columns + j,get(i,j));        }      }    }  }  return result;}  }
class C{  private static String toString(double[][] m,NumberFormat nf,List<String> variables){  String result;  if (nf == null) {    throw new NullPointerException("NumberFormat must not be null.");  }  if (variables == null) {    variables=new ArrayList<>();    for (int i=0; i < m[0].length; i++) {      variables.add("V" + (i + 1));    }  }  if (m == null) {    result=nullMessage();  } else {    TextTable textTable=new TextTable(m.length + 1,m[0].length);    for (int i=0; i < variables.size(); i++) {      textTable.setToken(0,i,variables.get(i));    }    for (int i=0; i < m.length; i++) {      for (int j=0; j < m[0].length; j++) {        textTable.setToken(i + 1,j,m[i][j] == 0 ? " " : nf.format(m[i][j]));      }    }    result="\n" + textTable.toString();  }  return result;}  }
class C{  public void stop(){  if (!mSearching)   return;  mSearching=false;  for (  DiscoveryProvider provider : discoveryProviders) {    provider.stop();  }  if (multicastLock.isHeld()) {    multicastLock.release();  }}  }
class C{  public static void UF5(double[] x,double[] f,int nx){  int count1=0;  int count2=0;  double sum1=0.0;  double sum2=0.0;  double yj;  double hj;  double N=10.0;  double E=0.1;  for (int j=2; j <= nx; j++) {    yj=x[j - 1] - Math.sin(6.0 * PI * x[0] + j * PI / nx);    hj=2.0 * yj * yj - Math.cos(4.0 * PI * yj) + 1.0;    if (j % 2 == 0) {      sum2+=hj;      count2++;    } else {      sum1+=hj;      count1++;    }  }  hj=(0.5 / N + E) * Math.abs(Math.sin(2.0 * N * PI* x[0]));  f[0]=x[0] + hj + 2.0 * sum1 / (double)count1;  f[1]=1.0 - x[0] + hj + 2.0 * sum2 / (double)count2;}  }
class C{  public FileImageInputStream(RandomAccessFile raf){  if (raf == null) {    throw new IllegalArgumentException("raf == null!");  }  this.raf=raf;  disposerRecord=new CloseableDisposerRecord(raf);  if (getClass() == FileImageInputStream.class) {    disposerReferent=new Object();    Disposer.addRecord(disposerReferent,disposerRecord);  } else {    disposerReferent=new StreamFinalizer(this);  }}  }
class C{  public static boolean isPrintable(int letter){  if ((letter < 0x20 && letter != 0x0A && letter != 0x0D) || letter == 0x7F) {    return false;  }  if (UNICODE_PRIVATE_START <= letter && letter <= UNICODE_PRIVATE_END) {    return false;  }  return true;}  }
class C{  public boolean sendRequest(int opCode,byte[] head,HeaderSet header,PrivateInputStream privateInput) throws IOException {  if (head != null) {    if ((head.length + 3) > ObexHelper.MAX_PACKET_SIZE_INT) {      throw new IOException("header too large ");    }  }  int bytesReceived;  ByteArrayOutputStream out=new ByteArrayOutputStream();  out.write((byte)opCode);  if (head == null) {    out.write(0x00);    out.write(0x03);  } else {    out.write((byte)((head.length + 3) >> 8));    out.write((byte)(head.length + 3));    out.write(head);  }  mOutput.write(out.toByteArray());  mOutput.flush();  header.responseCode=mInput.read();  int length=((mInput.read() << 8) | (mInput.read()));  if (length > ObexHelper.MAX_PACKET_SIZE_INT) {    throw new IOException("Packet received exceeds packet size limit");  }  if (length > ObexHelper.BASE_PACKET_LENGTH) {    byte[] data=null;    if (opCode == ObexHelper.OBEX_OPCODE_CONNECT) {      @SuppressWarnings("unused") int version=mInput.read();      @SuppressWarnings("unused") int flags=mInput.read();      maxPacketSize=(mInput.read() << 8) + mInput.read();      if (maxPacketSize > ObexHelper.MAX_CLIENT_PACKET_SIZE) {        maxPacketSize=ObexHelper.MAX_CLIENT_PACKET_SIZE;      }      if (length > 7) {        data=new byte[length - 7];        bytesReceived=mInput.read(data);        while (bytesReceived != (length - 7)) {          bytesReceived+=mInput.read(data,bytesReceived,data.length - bytesReceived);        }      } else {        return true;      }    } else {      data=new byte[length - 3];      bytesReceived=mInput.read(data);      while (bytesReceived != (length - 3)) {        bytesReceived+=mInput.read(data,bytesReceived,data.length - bytesReceived);      }      if (opCode == ObexHelper.OBEX_OPCODE_ABORT) {        return true;      }    }    byte[] body=ObexHelper.updateHeaderSet(header,data);    if ((privateInput != null) && (body != null)) {      privateInput.writeBytes(body,1);      mTotalSize+=(long)(body.length - 1);      if ((body[0] == HeaderSet.END_OF_BODY) && (header.getHeader(HeaderSet.LENGTH) == null)) {        header.setHeader(HeaderSet.LENGTH,mTotalSize);        mTotalSize=0;      }    }    if (header.mConnectionID != null) {      mConnectionId=new byte[4];      System.arraycopy(header.mConnectionID,0,mConnectionId,0,4);    }    if (header.mAuthResp != null) {      if (!handleAuthResp(header.mAuthResp)) {        setRequestInactive();        throw new IOException("Authentication Failed");      }    }    if ((header.responseCode == ResponseCodes.OBEX_HTTP_UNAUTHORIZED) && (header.mAuthChall != null)) {      if (handleAuthChall(header)) {        out.write((byte)HeaderSet.AUTH_RESPONSE);        out.write((byte)((header.mAuthResp.length + 3) >> 8));        out.write((byte)(header.mAuthResp.length + 3));        out.write(header.mAuthResp);        header.mAuthChall=null;        header.mAuthResp=null;        byte[] sendHeaders=new byte[out.size() - 3];        System.arraycopy(out.toByteArray(),3,sendHeaders,0,sendHeaders.length);        return sendRequest(opCode,sendHeaders,header,privateInput);      }    }  }  return true;}  }
class C{  @Override public void processChallenge(final Header header) throws MalformedChallengeException {  super.processChallenge(header);  this.complete=true;}  }
class C{  protected void activateNode(InactiveHNode toActivate,SplitNode parent,String parentBranch){  HNode leaf=new ActiveHNode();  leaf.m_classDistribution=toActivate.m_classDistribution;  if (parent == null) {    m_root=leaf;  } else {    parent.setChild(parentBranch,leaf);  }  m_activeLeafCount++;  m_inactiveLeafCount--;}  }
class C{  public boolean isOnFreeFertileGround(){  if (this.getZone() == null) {    return false;  } else {    final StendhalRPZone zone=this.getZone();    boolean passes=false;    for (    Entity entity : zone.getEntitiesAt(getX(),getY())) {      if (entity instanceof FlowerGrower) {        if (!equals(entity)) {          return false;        }      } else {        if (entity instanceof FertileGround) {          passes=true;        }      }    }    return passes;  }}  }
class C{  static boolean buildPolygonShape(final GeoCompositePolygon rval,final MutableBoolean seenConcave,final PlanetModel planetModel,final List<GeoPoint> pointsList,final BitSet internalEdges,final int startPointIndex,final int endPointIndex,final SidedPlane startingEdge,final List<GeoPolygon> holes,final GeoPoint testPoint){  final EdgeBuffer edgeBuffer=new EdgeBuffer(pointsList,internalEdges,startPointIndex,endPointIndex,startingEdge);  Edge stoppingPoint=edgeBuffer.pickOne();  Edge currentEdge=stoppingPoint;  while (true) {    if (currentEdge == null) {      break;    }    final Boolean foundIt=findConvexPolygon(planetModel,currentEdge,rval,edgeBuffer,holes,testPoint);    if (foundIt == null) {      return false;    }    if (foundIt) {      stoppingPoint=edgeBuffer.pickOne();      currentEdge=stoppingPoint;      continue;    }    currentEdge=edgeBuffer.getNext(currentEdge);    if (currentEdge == stoppingPoint) {      break;    }  }  final Iterator<Edge> checkIterator=edgeBuffer.iterator();  while (checkIterator.hasNext()) {    final Edge checkEdge=checkIterator.next();    final SidedPlane flippedPlane=new SidedPlane(checkEdge.plane);    final Iterator<Edge> confirmIterator=edgeBuffer.iterator();    while (confirmIterator.hasNext()) {      final Edge confirmEdge=confirmIterator.next();      if (confirmEdge == checkEdge) {        continue;      }      final GeoPoint thePoint;      if (checkEdge.startPoint != confirmEdge.startPoint && checkEdge.endPoint != confirmEdge.startPoint && !flippedPlane.isWithin(confirmEdge.startPoint)) {        thePoint=confirmEdge.startPoint;      } else       if (checkEdge.startPoint != confirmEdge.endPoint && checkEdge.endPoint != confirmEdge.endPoint && !flippedPlane.isWithin(confirmEdge.endPoint)) {        thePoint=confirmEdge.endPoint;      } else {        thePoint=null;      }      if (thePoint != null) {        final List<GeoPoint> thirdPartPoints=new ArrayList<>(3);        final BitSet thirdPartInternal=new BitSet();        thirdPartPoints.add(checkEdge.startPoint);        thirdPartInternal.set(0,checkEdge.isInternal);        thirdPartPoints.add(checkEdge.endPoint);        thirdPartInternal.set(1,true);        thirdPartPoints.add(thePoint);        assert checkEdge.plane.isWithin(thePoint) : "Point was on wrong side of complementary plane, so must be on the right side of the non-complementary plane!";        final GeoPolygon convexPart=new GeoConvexPolygon(planetModel,thirdPartPoints,holes,thirdPartInternal,true);        rval.addShape(convexPart);        Edge loopEdge=edgeBuffer.getPrevious(checkEdge);        final List<GeoPoint> firstPartPoints=new ArrayList<>();        final BitSet firstPartInternal=new BitSet();        int i=0;        while (true) {          firstPartPoints.add(loopEdge.endPoint);          if (loopEdge.endPoint == thePoint) {            break;          }          firstPartInternal.set(i++,loopEdge.isInternal);          loopEdge=edgeBuffer.getPrevious(loopEdge);        }        firstPartInternal.set(i,true);        if (buildPolygonShape(rval,seenConcave,planetModel,firstPartPoints,firstPartInternal,firstPartPoints.size() - 1,0,new SidedPlane(checkEdge.endPoint,false,checkEdge.startPoint,thePoint),holes,testPoint) == false) {          return false;        }        final List<GeoPoint> secondPartPoints=new ArrayList<>();        final BitSet secondPartInternal=new BitSet();        loopEdge=edgeBuffer.getNext(checkEdge);        i=0;        while (true) {          secondPartPoints.add(loopEdge.startPoint);          if (loopEdge.startPoint == thePoint) {            break;          }          secondPartInternal.set(i++,loopEdge.isInternal);          loopEdge=edgeBuffer.getNext(loopEdge);        }        secondPartInternal.set(i,true);        if (buildPolygonShape(rval,seenConcave,planetModel,secondPartPoints,secondPartInternal,secondPartPoints.size() - 1,0,new SidedPlane(checkEdge.startPoint,false,checkEdge.endPoint,thePoint),holes,testPoint) == false) {          return false;        }        return true;      }    }  }  if (makeConcavePolygon(planetModel,rval,seenConcave,edgeBuffer,holes,testPoint) == false) {    return false;  }  return true;}  }
class C{  public BlockingObservableAssert<T> emitsNoValues(){  isNotNull();  valuesCountIs(0);  return this;}  }
class C{  private void merge(final WordAlignmentState state){  if (!stack.isEmpty() && state.isComplete()) {    final WordAlignmentState parentState=stack.pop();    if (parentState.isComplete()) {      throw new IllegalStateException("Parent state already complete");    }    parentState.substituteIn(state);    merge(parentState);  } else {    stack.add(state);  }}  }
class C{  public static void crashIfBackgroundThread(){  if (BuildConfig.DEBUG) {    if (Thread.currentThread() != Looper.getMainLooper().getThread()) {      throw new IllegalStateException("This method should be called from the Main Thread");    }  }}  }
class C{  public static CAddressSpace readAddressSpace(final AbstractSQLProvider provider,final int addressSpaceId,final INaviProject project) throws SQLException {  final String query="SELECT name, description, creation_date, modification_date " + " FROM " + CTableNames.ADDRESS_SPACES_TABLE + " WHERE id = "+ addressSpaceId;  final ResultSet resultSet=provider.getConnection().executeQuery(query,true);  try {    while (resultSet.next()) {      final String name=PostgreSQLHelpers.readString(resultSet,"name");      final String description=PostgreSQLHelpers.readString(resultSet,"description");      final Timestamp creationDate=resultSet.getTimestamp("creation_date");      final Timestamp modificationDate=resultSet.getTimestamp("modification_date");      return new CAddressSpace(addressSpaceId,name,description == null ? "" : description,creationDate,modificationDate,new HashMap<INaviModule,IAddress>(),null,provider,project);    }  }  finally {    resultSet.close();  }  return null;}  }
class C{  public List compileProjectionAttributes(String projectionAttributes){  try {    OQLLexer lexer=new OQLLexer(new StringReader(projectionAttributes));    OQLParser parser=new OQLParser(lexer);    parser.setASTNodeClass("org.apache.geode.cache.query.internal.parse.ASTUnsupported");    parser.loneProjectionAttributes();    GemFireAST n=(GemFireAST)parser.getAST();    if (n.getType() == TOK_STAR) {      return null;    }    n.compile(this);  } catch (  Exception ex) {    throw new QueryInvalidException(LocalizedStrings.QCompiler_SYNTAX_ERROR_IN_QUERY_0.toLocalizedString(ex.getMessage()),ex);  }  Assert.assertTrue(stackSize() == 1,"stack size = " + stackSize() + ";stack="+ this.stack);  return (List)pop();}  }
class C{  private void handleInsertArticles(final Collection<Article> articles,boolean isCaching){  if (!articles.isEmpty()) {    int minId=Integer.MAX_VALUE;    int maxId=Integer.MIN_VALUE;    for (    Article article : articles) {      if (article.id > maxId)       maxId=article.id;      if (article.id < minId)       minId=article.id;    }    DBHelper.getInstance().purgeLastArticles(articles.size());    DBHelper.getInstance().insertArticles(articles);    if (isCaching) {      Controller.getInstance().setSinceId(maxId);      Controller.getInstance().setLastSync(System.currentTimeMillis());    }  }}  }
class C{  private void installProxies(N4JSResource resource,EObject obj,IDiagnosticProducer producer){  ICompositeNode node=NodeModelUtils.getNode(obj);  if (node == null)   return;  installProxies(resource,obj,producer,node,false);}  }
class C{  private void interpolateSG(){  this.interpolatedSG=new SpatialGrid(sg.getXmin(),sg.getYmin(),sg.getXmax(),sg.getYmax(),sg.getResolution() / 2,Double.NaN);  for (double x=this.sg.getXmin(); x <= this.sg.getXmax(); x+=this.sg.getResolution() / 2) {    for (double y=this.sg.getYmin(); y <= this.sg.getYmax(); y+=this.sg.getResolution() / 2) {      this.interpolatedSG.setValue(this.interpolation.interpolate(x,y),x,y);    }  }}  }
class C{  private PdfObject readCompressedStream(PdfObject rootObj,int pointer,final PdfFileReader currentPdfFile,final ObjectReader objectReader,final PdfObject linearObj) throws PdfException {  while (pointer != -1) {    movePointer(pointer);    final byte[] raw=objectReader.readObjectData(-1,null);    final StringBuilder objectName=new StringBuilder();    char current1, last=' ';    int matched=0, i1=0;    while (i1 < raw.length) {      current1=(char)raw[i1];      if (current1 == 10 || current1 == 13) {        current1=' ';      }      if (current1 == ' ' && last == ' ') {        matched=0;      } else       if (current1 == pattern.charAt(matched)) {        matched++;      } else {        matched=0;        objectName.append(current1);      }      if (matched == 3) {        break;      }      last=current1;      i1++;    }    objectName.append('R');    final PdfObject pdfObject=new CompressedObject(objectName.toString());    pdfObject.setCompressedStream(true);    final ObjectDecoder objectDecoder=new ObjectDecoder(currentPdfFile);    objectDecoder.readDictionaryAsObject(pdfObject,0,raw);    final int[] fieldSizes=pdfObject.getIntArray(PdfDictionary.W);    byte[] xrefs=pdfObject.getDecodedStream();    if (xrefs == null) {      xrefs=currentPdfFile.readStream(pdfObject,true,true,false,false,true,null);    }    final int[] Index=pdfObject.getIntArray(PdfDictionary.Index);    if (Index == null) {      CompressedObjects.readCompressedOffsets(0,0,pdfObject.getInt(PdfDictionary.Size),fieldSizes,xrefs,offset,pdf_datafile);    } else {      final int count=Index.length;      int pntr=0;      for (int aa=0; aa < count; aa+=2) {        pntr=CompressedObjects.readCompressedOffsets(pntr,Index[aa],Index[aa + 1],fieldSizes,xrefs,offset,pdf_datafile);      }    }    if (rootObj == null) {      rootObj=pdfObject.getDictionary(PdfDictionary.Root);      encryptObj=pdfObject.getDictionary(PdfDictionary.Encrypt);      if (encryptObj != null) {        final byte[][] IDs=pdfObject.getStringArray(PdfDictionary.ID);        if (IDs != null && this.ID == null) {          this.ID=IDs[0];        }      }      infoObject=pdfObject.getDictionary(PdfDictionary.Info);    }    if (linearObj != null) {      pointer=-1;    } else {      pointer=pdfObject.getInt(PdfDictionary.Prev);      if (pointer != -1 && !isCompressedStream(pointer,(int)eof)) {        return readLegacyReferenceTable(rootObj,pointer,(int)eof,currentPdfFile);      }    }  }  return rootObj;}  }
class C{  @Override public void resetIdentifyUser(){  tracker.resetIdentifyUser();}  }
class C{  public boolean canBeLongAddress(int address){  return isLongAddress(address);}  }
class C{  public boolean removeSpace(){  int start=pos;  while (pos < lcText.length && lcText[pos] == ' ') {    pos++;  }  return (start < pos);}  }
class C{  private boolean arrowScrollImpl(int direction){  if (getChildCount() <= 0) {    return false;  }  View selectedView=getSelectedView();  int selectedPos=mSelectedPosition;  int nextSelectedPosition=lookForSelectablePositionOnScreen(direction);  int amountToScroll=amountToScroll(direction,nextSelectedPosition);  final ArrowScrollFocusResult focusResult=mItemsCanFocus ? arrowScrollFocused(direction) : null;  if (focusResult != null) {    nextSelectedPosition=focusResult.getSelectedPosition();    amountToScroll=focusResult.getAmountToScroll();  }  boolean needToRedraw=focusResult != null;  if (nextSelectedPosition != INVALID_POSITION) {    handleNewSelectionChange(selectedView,direction,nextSelectedPosition,focusResult != null);    setSelectedPositionInt(nextSelectedPosition);    setNextSelectedPositionInt(nextSelectedPosition);    selectedView=getSelectedView();    selectedPos=nextSelectedPosition;    if (mItemsCanFocus && focusResult == null) {      final View focused=getFocusedChild();      if (focused != null) {        focused.clearFocus();      }    }    needToRedraw=true;    checkSelectionChanged();  }  if (amountToScroll > 0) {    scrollListItemsBy((direction == View.FOCUS_UP) ? amountToScroll : -amountToScroll);    needToRedraw=true;  }  if (mItemsCanFocus && (focusResult == null) && selectedView != null && selectedView.hasFocus()) {    final View focused=selectedView.findFocus();    if (!isViewAncestorOf(focused,this) || distanceToView(focused) > 0) {      focused.clearFocus();    }  }  if (nextSelectedPosition == INVALID_POSITION && selectedView != null && !isViewAncestorOf(selectedView,this)) {    selectedView=null;    hideSelector();    mResurrectToPosition=INVALID_POSITION;  }  if (needToRedraw) {    if (selectedView != null) {      positionSelector(selectedPos,selectedView);      mSelectedLeft=selectedView.getLeft();    }    if (!awakenScrollBars()) {      invalidate();    }    invokeOnItemScrollListener();    return true;  }  return false;}  }
class C{  SortedSet<String> typesToImport(){  SortedSet<String> typesToImport=new TreeSet<String>();  for (  Map.Entry<String,Spelling> entry : imports.entrySet()) {    if (entry.getValue().importIt) {      typesToImport.add(entry.getKey());    }  }  return typesToImport;}  }
class C{  public boolean writeCharacteristic(BluetoothGattCharacteristic characteristic,byte[] value){  if (mBluetoothGatt != null) {    characteristic.setValue(value);    return mBluetoothGatt.writeCharacteristic(characteristic);  }  return false;}  }
class C{  private void invokeInsn(final int opcode,final Type type,final Method method,final boolean itf){  String owner=type.getSort() == Type.ARRAY ? type.getDescriptor() : type.getInternalName();  mv.visitMethodInsn(opcode,owner,method.getName(),method.getDescriptor(),itf);}  }
class C{  public void hide(){  if (mDecor != null) {    mDecor.setVisibility(View.GONE);  }}  }
class C{  public int addNodeInDocOrder(int node,boolean test,XPathContext support){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));  int insertIndex=-1;  if (test) {    int size=size(), i;    for (i=size - 1; i >= 0; i--) {      int child=elementAt(i);      if (child == node) {        i=-2;        break;      }      DTM dtm=support.getDTM(node);      if (!dtm.isNodeAfter(node,child)) {        break;      }    }    if (i != -2) {      insertIndex=i + 1;      insertElementAt(node,insertIndex);    }  } else {    insertIndex=this.size();    boolean foundit=false;    for (int i=0; i < insertIndex; i++) {      if (i == node) {        foundit=true;        break;      }    }    if (!foundit)     addElement(node);  }  return insertIndex;}  }
class C{  public static int asInt(byte[] data,int n){  if ((data == null) || (data.length == 0)) {    throw new SketchesArgumentException("Input is null or empty.");  }  return asInteger(toLongArray(data),n);}  }
class C{  public void accept(final ClassVisitor cv){  String[] exceptions=new String[this.exceptions.size()];  this.exceptions.toArray(exceptions);  MethodVisitor mv=cv.visitMethod(access,name,desc,signature,exceptions);  if (mv != null) {    accept(mv);  }}  }
class C{  public int rate(String... words){  int result=0;  for (  String word : words) {    for (    Tag tag : tags) {      if (tag.matches(word) > 0) {        result++;        break;      }    }  }  return result;}  }
class C{  public static void unregisterProtocol(final String id){  if (id == null) {    throw new IllegalArgumentException("id is null");  }  PROTOCOLS.remove(id);}  }
class C{  @Override public void update(int firstRow,int lastRow,int firstColumn,int lastColumn,int what){  this.firstRow=firstRow;  this.lastRow=lastRow;  this.firstColumn=firstColumn;  this.lastColumn=lastColumn;  model.fireTableStructureChanged();}  }
class C{  public int findKthLargest2(int[] nums,int k){  k=nums.length - k;  int l=0;  int r=nums.length - 1;  while (l < r) {    final int j=partition(nums,l,r);    if (j < k) {      l=j + 1;    } else     if (j > k) {      r=j - 1;    } else {      break;    }  }  return nums[k];}  }
class C{  public static void copy(InputStream i,OutputStream o,int bufferSize) throws IOException {  try {    copyNoClose(i,o,bufferSize);  }  finally {    Util.getImplementation().cleanup(o);    Util.getImplementation().cleanup(i);  }}  }
class C{  public LiteralTree buildLiteral(Object value){  return maker.Literal(value);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:38.209 -0500",hash_original_method="0B3635DA28D858C95C4C22FD8015492F",hash_generated_method="5295B2FA1B13FD60058F0714D4624A49") private static boolean portMatch(int port,int[] ports){  boolean portInList=false;  for (int i=0, len=ports.length; i < len; i++) {    if (port == ports[i]) {      portInList=true;      break;    }  }  return portInList;}  }
class C{  public static void demo6(){  double[][] values={{3,0,-3.4,0},{5.1,0,+3.0123456789,0},{16.37,0.0,2.5,0},{-16.3,0,-3.012345678E-4,-1},{1236.3456789,0,7,-1.2}};  String[] columnNames={"W","X","Y","Z"};  String[] rowNames={"SunJDK1.2.2 classic","IBMJDK1.1.8","SunJDK1.3 Hotspot","other1","other2"};  System.out.println(new Formatter().toString(cern.colt.matrix.DoubleFactory2D.dense.make(values)));  System.out.println(new Formatter().toTitleString(cern.colt.matrix.DoubleFactory2D.dense.make(values),rowNames,columnNames,"vendor","density","title"));}  }
class C{  private static boolean isSerializable(CtClass clazz) throws NotFoundException {  ClassPool pool=clazz.getClassPool();  return clazz.subtypeOf(pool.get("java.io.Serializable"));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  validateSessionToRollForwardTo(errors);  return errors;}  }
class C{  private void addConnectionDescendants(Collection<Connection> connections,List<ObjectPermission.Type> permissions) throws GuacamoleException {  if (connections.isEmpty())   return;  Collection<String> identifiers=new ArrayList<String>();  for (  Connection connection : connections)   identifiers.addAll(connection.getSharingProfileIdentifiers());  if (permissions != null && !permissions.isEmpty())   identifiers=sharingProfilePermissions.getAccessibleObjects(permissions,identifiers);  if (!identifiers.isEmpty()) {    Collection<SharingProfile> sharingProfiles=sharingProfileDirectory.getAll(identifiers);    addSharingProfiles(sharingProfiles);  }}  }
class C{  protected T childValue(T parentValue){  return parentValue;}  }
class C{  protected boolean isJobSucceeded(String currentStatus){  return (CinderConstants.ComponentStatus.AVAILABLE.getStatus().equalsIgnoreCase(currentStatus) || CinderConstants.ComponentStatus.IN_USE.getStatus().equalsIgnoreCase(currentStatus) || CinderConstants.ComponentStatus.DELETED.getStatus().equalsIgnoreCase(currentStatus));}  }
class C{  static int sortKey(InetAddress address,boolean prefer_v6){  int key=address.getAddress().length;  if (prefer_v6) {    key=-key;  }  if (address.isAnyLocalAddress()) {    key+=5;  }  if (address.isMulticastAddress()) {    key+=4;  }  if (address.isLoopbackAddress()) {    key+=3;  }  if (address.isLinkLocalAddress()) {    key+=2;  }  if (address.isSiteLocalAddress()) {    key+=1;  }  return key;}  }
class C{  private boolean match(Class<?>[] declaredTypes,Class<?>[] actualTypes){  if (declaredTypes.length == actualTypes.length) {    for (int i=0; i < actualTypes.length; i++) {      if (actualTypes[i] == NULL.class)       continue;      if (wrapper(declaredTypes[i]).isAssignableFrom(wrapper(actualTypes[i])))       continue;      return false;    }    return true;  } else {    return false;  }}  }
class C{  public void migrateProperties(){  Network memory=getBot().memory().newMemory();  Vertex sense=memory.createVertex(getPrimitive());  Vertex property=sense.getRelationship(Primitive.USER);  if (property != null) {    this.username=(String)property.getData();  }  property=sense.getRelationship(Primitive.PASSWORD);  if ((property != null) && (this.username != null)) {    String data=(String)property.getData();    if (data.startsWith("&&")) {      try {        this.password=Utils.decrypt(Utils.KEY,data.substring(2,data.length()));      } catch (      Exception exception) {        this.password=Utils.decrypt(this.username,data);      }    } else {      this.password=Utils.decrypt(this.username,data);    }  }  property=sense.getRelationship(Primitive.EMAILADDRESS);  if (property != null) {    this.emailAddress=(String)property.getData();    setIsEnabled(true);  }  property=sense.getRelationship(Primitive.SSL);  if (property != null) {    this.isSSLRequired=(Boolean)property.getData();  }  property=sense.getRelationship(Primitive.SIGNATURE);  if (property != null) {    this.signature=(String)property.getData();  }  property=sense.getRelationship(Primitive.INCOMINGHOST);  if (property != null) {    this.incomingHost=(String)property.getData();  }  property=sense.getRelationship(Primitive.INCOMINGPORT);  if (property != null) {    this.incomingPort=((Number)property.getData()).intValue();  }  property=sense.getRelationship(Primitive.OUTGOINGHOST);  if (property != null) {    this.outgoingHost=(String)property.getData();  }  property=sense.getRelationship(Primitive.OUTGOINGPORT);  if (property != null) {    this.outgoingPort=((Number)property.getData()).intValue();  }  property=sense.getRelationship(Primitive.PROTOCOL);  if (property != null) {    this.protocol=(String)property.getData();  }  sense.internalRemoveRelationships(Primitive.USER);  sense.internalRemoveRelationships(Primitive.PASSWORD);  sense.internalRemoveRelationships(Primitive.EMAILADDRESS);  sense.internalRemoveRelationships(Primitive.SSL);  sense.internalRemoveRelationships(Primitive.SIGNATURE);  sense.internalRemoveRelationships(Primitive.INCOMINGHOST);  sense.internalRemoveRelationships(Primitive.INCOMINGPORT);  sense.internalRemoveRelationships(Primitive.OUTGOINGHOST);  sense.internalRemoveRelationships(Primitive.OUTGOINGPORT);  sense.internalRemoveRelationships(Primitive.PROTOCOL);  memory.save();  saveProperties();}  }
class C{  public static StackTraceFormatter createStackTraceFormatter(){  return new DefaultStackTraceFormatter();}  }
class C{  public void test_EnableSessionCreation() throws IOException {  SSLSocket ssl=getSSLSocket();  assertTrue(ssl.getEnableSessionCreation());  ssl.setEnableSessionCreation(false);  assertFalse(ssl.getEnableSessionCreation());  ssl.setEnableSessionCreation(true);  assertTrue(ssl.getEnableSessionCreation());  ssl.close();}  }
class C{  public final void hackGravity(double rsize,Node root){  MathVector pos0=(MathVector)pos.clone();  HG hg=new HG(this,pos);  hg=root.walkSubTree(rsize * rsize,hg);  phi=hg.phi0;  newAcc=hg.acc0;}  }
class C{  public FloatMatrix mini(FloatMatrix other,FloatMatrix result){  if (result == this) {    for (int i=0; i < length; i++) {      if (get(i) > other.get(i)) {        put(i,other.get(i));      }    }  } else {    for (int i=0; i < length; i++) {      if (get(i) > other.get(i)) {        result.put(i,other.get(i));      } else {        result.put(i,get(i));      }    }  }  return result;}  }
class C{  public static <E extends Comparable<E>>boolean isLoopPresentUsingHashMap(SingleLinkedNode<E> node){  HashMap<SingleLinkedNode<E>,Boolean> map=new HashMap<>();  SingleLinkedNode<E> curr=node;  while (curr != null) {    if (map.get(curr) != null && map.get(curr) == true) {      return true;    }    map.put(curr,true);    curr=curr.next;  }  return false;}  }
class C{  @JavascriptInterface public void showToast(String toast){  Toast.makeText(getApplicationContext(),toast,Toast.LENGTH_SHORT).show();  Log.d("DEBUG","SHOW TOAST");}  }
class C{  public static String javaStringEnc(String s){  int ln=s.length();  for (int i=0; i < ln; i++) {    char c=s.charAt(i);    if (c == '"' || c == '\\' || c < 0x20) {      StringBuilder b=new StringBuilder(ln + 4);      b.append(s.substring(0,i));      while (true) {        if (c == '"') {          b.append("\\\"");        } else         if (c == '\\') {          b.append("\\\\");        } else         if (c < 0x20) {          if (c == '\n') {            b.append("\\n");          } else           if (c == '\r') {            b.append("\\r");          } else           if (c == '\f') {            b.append("\\f");          } else           if (c == '\b') {            b.append("\\b");          } else           if (c == '\t') {            b.append("\\t");          } else {            b.append("\\u00");            int x=c / 0x10;            b.append((char)(x < 0xA ? x + '0' : x - 0xA + 'a'));            x=c & 0xF;            b.append((char)(x < 0xA ? x + '0' : x - 0xA + 'a'));          }        } else {          b.append(c);        }        i++;        if (i >= ln) {          return b.toString();        }        c=s.charAt(i);      }    }  }  return s;}  }
class C{  public static int[] concat(int[]... arrays){  assert arrays != null;  assert arrays.length > 1;  int len=0;  for (  int[] a : arrays)   len+=a.length;  int[] r=Arrays.copyOf(arrays[0],len);  for (int i=1, shift=0; i < arrays.length; i++) {    shift+=arrays[i - 1].length;    System.arraycopy(arrays[i],0,r,shift,arrays[i].length);  }  return r;}  }
class C{  public static Vector<Entity> loadFrom(File file) throws IOException {  MULParser parser=new MULParser();  InputStream listStream=new FileInputStream(file);  parser.parse(listStream);  listStream.close();  if (parser.hasWarningMessage()) {    System.out.println(parser.getWarningMessage());  }  return parser.getEntities();}  }
class C{  public static final int binarySearch(int[] a,int key,int begin,int end){  int x1=begin;  int x2=end;  int i=x1 + (x2 - x1) / 2;  while (x1 < x2) {    if (a[i] == key) {      return i;    } else     if (a[i] < key) {      x1=i + 1;    } else {      x2=i;    }    i=x1 + (x2 - x1) / 2;  }  return -1 * (i + 1);}  }
class C{  public Builder hours(Integer hours){  this.hours=hours;  return this;}  }
class C{  private void testConnection(){  final String executable=getCurrentExecutablePath();  if (myAppSettings != null) {    myAppSettings.setPathToGit(executable);  }  final GitVersion version;  try {    version=GitVersion.identifyVersion(executable);  } catch (  Exception e) {    Messages.showErrorDialog(myRootPanel,e.getMessage(),GitBundle.getString("find.git.error.title"));    return;  }  if (version.isSupported()) {    Messages.showInfoMessage(myRootPanel,String.format("<html>%s<br>Git version is %s</html>",GitBundle.getString("find.git.success.title"),version.toString()),GitBundle.getString("find.git.success.title"));  } else {    Messages.showWarningDialog(myRootPanel,GitBundle.message("find.git.unsupported.message",version.toString(),GitVersion.MIN),GitBundle.getString("find.git.success.title"));  }}  }
class C{  void cancel(boolean waitForResponse){  cancelled=true;  if (!waitForResponse) {    if (lock.tryLock()) {      try {        lockCondition.signal();      }  finally {        lock.unlock();      }    }  }}  }
class C{  protected Instance process(Instance instance) throws Exception {  m_Reorder.input(instance);  m_Reorder.batchFinished();  return m_Reorder.output();}  }
class C{  public void documentosPendientesExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  saveCurrentInvocation(KeysClientsInvocations.DOCUMENTOS_VITALES_GESTIONAR_DOCUMENTOS_PENDIENTES,request);  request.setAttribute(DocumentosVitalesConstants.DOCUMENTOS_VITALES_KEY,getGestionDocumentosVitalesBI(request).getDocumentosVitalesAGestionar());  setReturnActionFordward(request,mappings.findForward("listado_documentos_vitales"));}  }
class C{  @Override public void onCardboardTrigger(){  RajLog.i("onCardboardTrigger");}  }
class C{  private void clearInitiators(List<Initiator> initiators,String protocol){  Iterator<Initiator> iterator=initiators.iterator();  while (iterator.hasNext()) {    Initiator initiator=iterator.next();    if (StringUtils.equals(initiator.getProtocol(),protocol)) {      iterator.remove();    }  }}  }
class C{  public FacebookException(String message){  super(message);}  }
class C{  public WCS100DescribeCoverage parse(Object... args) throws XMLStreamException {  XMLEventParserContext ctx=this.parserContext;  QName docName=new QName(this.getNamespaceURI(),"CoverageDescription");  for (XMLEvent event=ctx.nextEvent(); ctx.hasNext(); event=ctx.nextEvent()) {    if (event == null)     continue;    if (event.isStartElement() && event.asStartElement().getName().equals(docName)) {      this.doParseEventAttributes(ctx,event);      ctx.setDefaultNamespaceURI(this.getNamespaceURI());      this.registerParsers(ctx);      super.parse(ctx,event,args);      return this;    }  }  return null;}  }
class C{  @Override public int value(){  return -1;}  }
class C{  public static String makePrefix(String name){  StringBuffer prefix=new StringBuffer();  char[] nameArray=name.toCharArray();  for (  char ch : nameArray) {    if (Character.isLetterOrDigit(ch)) {      prefix.append(ch);    } else {      prefix.append("_");    }  }  return prefix.toString();}  }
class C{  public double variationOfInformation(){  return (2 * entropyJoint() - (entropyFirst() + entropySecond()));}  }
class C{  public Boolean isAutoPreInstallAllowed(){  return autoPreInstallAllowed;}  }
class C{  public String srandmember(final String key){  checkIsInMulti();  client.srandmember(key);  return client.getBulkReply();}  }
class C{  public void addService(String service,String className){  PluginEntry entry=new PluginEntry(service,className,false);  this.addService(entry);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static double[] parseVectorString(String vectorString){  String[] parsedString=vectorString.split(",");  double[] vector=new double[parsedString.length];  for (int j=0; j < parsedString.length; j++) {    double val=Utils.doubleParsable(parsedString[j]);    vector[j]=Double.isNaN(val) ? 0 : val;  }  return vector;}  }
class C{  public FrequentItemsetsResult run(Relation<BitVector> relation){  DBIDs ids=relation.getDBIDs();  List<Itemset> solution=new ArrayList<>();  final int size=ids.size();  final int needed=getMinimumSupport(size);  VectorFieldTypeInformation<BitVector> meta=RelationUtil.assumeVectorField(relation);  if (size > 0) {    final int dim=meta.getDimensionality();    Duration timeone=LOG.newDuration(STAT + "1-items.time").begin();    List<OneItemset> oneitems=buildFrequentOneItemsets(relation,dim,needed);    LOG.statistics(timeone.end());    if (LOG.isStatistics()) {      LOG.statistics(new LongStatistic(STAT + "1-items.frequent",oneitems.size()));      LOG.statistics(new LongStatistic(STAT + "1-items.transactions",ids.size()));    }    if (LOG.isDebuggingFine()) {      LOG.debugFine(debugDumpCandidates(new StringBuilder(),oneitems,meta));    }    if (minlength <= 1) {      solution.addAll(oneitems);    }    if (oneitems.size() >= 2 && maxlength >= 2) {      Duration timetwo=LOG.newDuration(STAT + "2-items.time").begin();      ArrayModifiableDBIDs survivors=DBIDUtil.newArray(ids.size());      List<? extends Itemset> candidates=buildFrequentTwoItemsets(oneitems,relation,dim,needed,ids,survivors);      ids=survivors;      LOG.statistics(timetwo.end());      if (LOG.isStatistics()) {        LOG.statistics(new LongStatistic(STAT + "2-items.frequent",candidates.size()));        LOG.statistics(new LongStatistic(STAT + "2-items.transactions",ids.size()));      }      if (LOG.isDebuggingFine()) {        LOG.debugFine(debugDumpCandidates(new StringBuilder(),candidates,meta));      }      if (minlength <= 2) {        solution.addAll(candidates);      }      for (int length=3; length <= maxlength && candidates.size() >= length; length++) {        Duration timel=LOG.newDuration(STAT + length + "-items.time").begin();        candidates=aprioriGenerate(candidates,length,dim);        if (LOG.isDebuggingFinest()) {          LOG.debugFinest(debugDumpCandidates(new StringBuilder().append("Before pruning: "),candidates,meta));        }        survivors=DBIDUtil.newArray(ids.size());        candidates=frequentItemsets(candidates,relation,needed,ids,survivors,length);        ids=survivors;        LOG.statistics(timel.end());        if (LOG.isStatistics()) {          LOG.statistics(new LongStatistic(STAT + length + "-items.frequent",candidates.size()));          LOG.statistics(new LongStatistic(STAT + length + "-items.transactions",ids.size()));        }        if (LOG.isDebuggingFine()) {          LOG.debugFine(debugDumpCandidates(new StringBuilder(),candidates,meta));        }        solution.addAll(candidates);      }    }  }  return new FrequentItemsetsResult("APRIORI","apriori",solution,meta);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_numExpr_2_();}  }
class C{  public IMouseState createEdgePressedLeftState(final Edge e,final MouseEvent event){  final CEdgePressedLeftState state=new CEdgePressedLeftState(this,m_graph,e);  m_factory.createEdgePressedLeftAction().execute(state,event);  return state;}  }
class C{  @Override public boolean close(){  this.distributor.getSubscribers().forEach(null);  return true;}  }
class C{  public <V>boolean hasMeta(int key,V val){  Object v=meta(key);  return v != null && v.equals(val);}  }
class C{  public void addEmotion(final Collection<String> triggerStrings,final String npcAction){  add(ConversationStates.IDLE,triggerStrings,ConversationStates.IDLE,null,new NPCEmoteAction(npcAction));  add(ConversationStates.ATTENDING,triggerStrings,ConversationStates.ATTENDING,null,new NPCEmoteAction(npcAction));}  }
class C{  public boolean isAccept(int state){  return this.isAccept.get(state);}  }
class C{  public GeneralizedSemPm(SemGraph graph){  if (graph == null) {    throw new NullPointerException("Graph must not be null.");  }  this.graph=new SemGraph(graph);  this.graph.setShowErrorTerms(true);  for (  Edge edge : this.graph.getEdges()) {    if (Edges.isBidirectedEdge(edge)) {      throw new IllegalArgumentException("The generalized SEM PM cannot currently deal with bidirected " + "edges. Sorry.");    }  }  this.nodes=Collections.unmodifiableList(this.graph.getNodes());  for (  Node node : nodes) {    namesToNodes.put(node.getName(),node);  }  this.variableNodes=new ArrayList<>();  this.measuredNodes=new ArrayList<>();  for (  Node variable : this.nodes) {    if (variable.getNodeType() == NodeType.MEASURED || variable.getNodeType() == NodeType.LATENT) {      variableNodes.add(variable);    }    if (variable.getNodeType() == NodeType.MEASURED) {      measuredNodes.add(variable);    }  }  this.errorNodes=new ArrayList<>();  for (  Node variable : this.variableNodes) {    List<Node> parents=this.graph.getParents(variable);    boolean added=false;    for (    Node _node : parents) {      if (_node.getNodeType() == NodeType.ERROR) {        errorNodes.add(_node);        added=true;        break;      }    }    if (!added) {      if (!added)       errorNodes.add(null);    }  }  this.referencedParameters=new HashMap<>();  this.referencedNodes=new HashMap<>();  this.nodeExpressions=new HashMap<>();  this.nodeExpressionStrings=new HashMap<>();  this.parameterExpressions=new HashMap<>();  this.parameterExpressionStrings=new HashMap<>();  this.parameterEstimationInitializationExpressions=new HashMap<>();  this.parameterEstimationInitializationExpressionStrings=new HashMap<>();  this.startsWithParametersTemplates=new HashMap<>();  this.startsWithParametersEstimationInitializationTemplates=new HashMap<>();  this.variableNames=new ArrayList<>();  for (  Node _node : variableNodes)   variableNames.add(_node.getName());  for (  Node _node : errorNodes)   variableNames.add(_node.getName());  try {    List<Node> variableNodes=getVariableNodes();    for (int i=0; i < variableNodes.size(); i++) {      Node node=variableNodes.get(i);      if (!this.graph.isParameterizable(node))       continue;      if (nodeExpressions.get(node) != null) {        continue;      }      String variablestemplate=getVariablesTemplate();      String formula=TemplateExpander.getInstance().expandTemplate(variablestemplate,this,node);      setNodeExpression(node,formula);      Set<String> parameters=getReferencedParameters(node);      String parametersTemplate=getParametersTemplate();      for (      String parameter : parameters) {        if (parameterExpressions.get(parameter) != null) {        } else         if (parametersTemplate != null) {          setParameterExpression(parameter,parametersTemplate);        } else         if (this.graph.isTimeLagModel()) {          String expressionString="Split(-0.9, -.1, .1, 0.9)";          setParameterExpression(parameter,expressionString);          setParametersTemplate(expressionString);        } else {          String expressionString="Split(-1.5, -.5, .5, 1.5)";          setParameterExpression(parameter,expressionString);          setParametersTemplate(expressionString);        }      }      for (      String parameter : parameters) {        if (parameterEstimationInitializationExpressions.get(parameter) != null) {        } else         if (parametersTemplate != null) {          setParameterEstimationInitializationExpression(parameter,parametersTemplate);        } else         if (this.graph.isTimeLagModel()) {          String expressionString="Split(-0.9, -.1, .1, 0.9)";          setParameterEstimationInitializationExpression(parameter,expressionString);        } else {          String expressionString="Split(-1.5, -.5, .5, 1.5)";          setParameterEstimationInitializationExpression(parameter,expressionString);        }        setStartsWithParametersTemplate("s","Split(-1.5, -.5, .5, 1.5)");        setStartsWithParametersEstimationInitializaationTemplate("s","Split(-1.5, -.5, .5, 1.5)");      }    }    for (    Node node : errorNodes) {      if (node == null)       continue;      String template=getErrorsTemplate();      String formula=TemplateExpander.getInstance().expandTemplate(template,this,node);      setNodeExpression(node,formula);      Set<String> parameters=getReferencedParameters(node);      setStartsWithParametersTemplate("s","U(1, 3)");      setStartsWithParametersEstimationInitializaationTemplate("s","U(1, 3)");      for (      String parameter : parameters) {        setParameterExpression(parameter,"U(1, 3)");      }    }  } catch (  ParseException e) {    throw new IllegalStateException("Parse error in constructing initial model.",e);  }}  }
class C{  public CipherParameters generateDerivedParameters(int keySize,int ivSize){  keySize=keySize / 8;  ivSize=ivSize / 8;  if ((keySize + ivSize) > digest.getDigestSize()) {    throw new IllegalArgumentException("Can't generate a derived key " + (keySize + ivSize) + " bytes long.");  }  byte[] dKey=generateDerivedKey();  return new ParametersWithIV(new KeyParameter(dKey,0,keySize),dKey,keySize,ivSize);}  }
class C{  protected void sequence_WordBoundary(ISerializationContext context,WordBoundary semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  List<Instruction> interpretRelevantInstructions(final List<Instruction> instructions){  return instructionReducer.reduceInstructions(instructions);}  }
class C{  protected void sequence_AnnotatedExportableElement(ISerializationContext context,N4EnumDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  boolean shift(){  if (!it.hasNext()) {    return false;  }  head=it.next();  comparable=DateValueComparison.comparable(head);  return true;}  }
class C{  public void add(Node parent,Node child){  NodeDescriptor nodeDescriptor=getWrapper(parent);  insert(nodeDescriptor,nodeDescriptor.getChildren().size(),child);}  }
class C{  public Object visit(ASTStart node,Object data){  return data;}  }
class C{  public SingleMessageTrackingMeasurer(MessagePropagationSimulation sim){  this.sim=sim;  this.trackedMessage=new Message(UUID.randomUUID().toString(),1.0);  this.timestepToPropagation=new HashMap<Double,Integer>();}  }
class C{  private void printStatementsInBody(Body body,java.io.PrintWriter out,LabeledUnitPrinter up,UnitGraph unitGraph){  Chain units=body.getUnits();  Iterator unitIt=units.iterator();  Unit currentStmt=null, previousStmt;  while (unitIt.hasNext()) {    previousStmt=currentStmt;    currentStmt=(Unit)unitIt.next();{      if (currentStmt != units.getFirst()) {        if (unitGraph.getSuccsOf(previousStmt).size() != 1 || unitGraph.getPredsOf(currentStmt).size() != 1 || up.labels().containsKey(currentStmt)) {          up.newline();        } else {          List succs=unitGraph.getSuccsOf(previousStmt);          if (succs.get(0) != currentStmt) {            up.newline();          }        }      }      if (up.labels().containsKey(currentStmt)) {        up.unitRef(currentStmt,true);        up.literal(":");        up.newline();      }      if (up.references().containsKey(currentStmt)) {        up.unitRef(currentStmt,false);      }    }    up.startUnit(currentStmt);    currentStmt.toString(up);    up.endUnit(currentStmt);    up.literal(";");    up.newline();    if (Options.v().print_tags_in_output()) {      Iterator tagIterator=currentStmt.getTags().iterator();      while (tagIterator.hasNext()) {        Tag t=(Tag)tagIterator.next();        up.noIndent();        up.literal("/*");        up.literal(t.toString());        up.literal("*/");        up.newline();      }    }  }  out.print(up.toString());  if (addJimpleLn()) {    setJimpleLnNum(up.getPositionTagger().getEndLn());  }{    Iterator trapIt=body.getTraps().iterator();    if (trapIt.hasNext()) {      out.println();      incJimpleLnNum();    }    while (trapIt.hasNext()) {      Trap trap=(Trap)trapIt.next();      out.println("        catch " + Scene.v().quotedNameOf(trap.getException().getName()) + " from "+ up.labels().get(trap.getBeginUnit())+ " to "+ up.labels().get(trap.getEndUnit())+ " with "+ up.labels().get(trap.getHandlerUnit())+ ";");      incJimpleLnNum();    }  }{    Iterator lvsIt=body.getLocalVariables().iterator();    if (lvsIt.hasNext()) {      out.println();      incJimpleLnNum();    }    while (lvsIt.hasNext()) {      LocalVariable lv=(LocalVariable)lvsIt.next();      out.println("        localvar index=" + lv.getIndex() + " name="+ Scene.v().quotedNameOf(lv.getName())+ " type="+ Scene.v().quotedNameOf(lv.getDescriptor())+ " start="+ up.labels().get(lv.getStartUnit())+ " end="+ (lv.getEndUnit() != null ? up.labels().get(lv.getEndUnit()) : "<end_of_method>")+ ";");      incJimpleLnNum();    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.734 -0400",hash_original_method="5DBBCC36A1E40C37C83AB1F6C81AA43A",hash_generated_method="2B3CBDD6BB133BD8B3BB410A0086EA3A") @SuppressWarnings("unchecked") public CompositeFileComparator(Comparator<File>... delegates){  if (delegates == null) {    this.delegates=(Comparator<File>[])NO_COMPARATORS;  } else {    this.delegates=(Comparator<File>[])new Comparator<?>[delegates.length];    System.arraycopy(delegates,0,this.delegates,0,delegates.length);  }}  }
class C{  public void addUtility(Assignment input,double value){  if (distrib instanceof UtilityTable) {    ((UtilityTable)distrib).setUtil(input,value);  } else {    log.warning("utility distribution is not a table, cannot add value");  }}  }
class C{  protected final static byte cleanSpecificFeatures(byte esmClass){  return (byte)(esmClass & 0x3f);}  }
class C{  @Override public DataRefNode findFirstDataBlock(DataRefNode dataRefBlock,IndexKey searchKey){  BTreeNode rootNode=(BTreeNode)dataRefBlock;  while (!rootNode.isLeafNode()) {    rootNode=findFirstLeafNode(searchKey,rootNode);  }  return rootNode;}  }
class C{  public boolean isBetaFunctionality(){  Object oo=get_Value(COLUMNNAME_IsBetaFunctionality);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public NotificationChain basicSetEffect(Effect newEffect,NotificationChain msgs){  Effect oldEffect=effect;  effect=newEffect;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SGraphPackage.REACTION__EFFECT,oldEffect,newEffect);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @Override protected void onActivityResult(int requestCode,int resultCode,Intent dataIntent){  if (requestCode != REQUEST_CODE_EDIT) {    return;  }  if (resultCode != RESULT_OK) {    return;  }  setResult(RESULT_OK,dataIntent);}  }
class C{  @Override public void close() throws IOException {  nioFile.close();}  }
class C{  public int compare(AVA a1,AVA a2){  boolean a1Has2253=a1.hasRFC2253Keyword();  boolean a2Has2253=a2.hasRFC2253Keyword();  if (a1Has2253 == a2Has2253) {    return a1.toRFC2253CanonicalString().compareTo(a2.toRFC2253CanonicalString());  } else {    if (a1Has2253) {      return -1;    } else {      return 1;    }  }}  }
class C{  @Override public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;}  }
class C{  public static boolean shuffle(Object[] objArray,int shuffleCount){  int length;  if (objArray == null || shuffleCount < 0 || (length=objArray.length) < shuffleCount) {    return false;  }  for (int i=1; i <= shuffleCount; i++) {    int random=getRandom(length - i);    Object temp=objArray[length - i];    objArray[length - i]=objArray[random];    objArray[random]=temp;  }  return true;}  }
class C{  public Object lookup(Name name) throws NamingException {  checkIsDestroyed();  try {    Name parsedName=getParsedName(name);    String nameComponent=parsedName.get(0);    Object res=ctxMaps.get(nameComponent);    if (res instanceof UserTransactionImpl) {      res=new UserTransactionImpl();    }    if (!ctxMaps.containsKey(nameComponent)) {      throw new NameNotFoundException(LocalizedStrings.ContextImpl_NAME_0_NOT_FOUND.toLocalizedString(name));    } else     if (parsedName.size() > 1) {      if (res instanceof ContextImpl) {        res=((ContextImpl)res).lookup(parsedName.getSuffix(1));      } else {        throw new NotContextException(LocalizedStrings.ContextImpl_EXPECTED_CONTEXTIMPL_BUT_FOUND_0.toLocalizedString(res));      }    }    return res;  } catch (  NameNotFoundException e) {    LogWriterI18n writer=TransactionUtils.getLogWriterI18n();    if (writer.infoEnabled())     writer.info(LocalizedStrings.ContextImpl_CONTEXTIMPL_LOOKUP_ERROR_WHILE_LOOKING_UP_0,name,e);    throw new NameNotFoundException(LocalizedStrings.ContextImpl_NAME_0_NOT_FOUND.toLocalizedString(new Object[]{name}));  }catch (  SystemException se) {    LogWriterI18n writer=TransactionUtils.getLogWriterI18n();    if (writer.severeEnabled())     writer.info(LocalizedStrings.ContextImpl_CONTEXTIMPL_LOOKUP_ERROR_WHILE_CREATING_USERTRANSACTION_OBJECT,se);    throw new NameNotFoundException(LocalizedStrings.ContextImpl_CONTEXTIMPL_LOOKUP_ERROR_WHILE_CREATING_USERTRANSACTION_OBJECT.toLocalizedString());  }}  }
class C{  public boolean containsValue(double val){  byte[] states=_states;  double[] vals=_values;  for (int i=vals.length; i-- > 0; ) {    if (states[i] == FULL && val == vals[i]) {      return true;    }  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.519 -0400",hash_original_method="D69D2D85CE24AE2BFF71755854F84C3E",hash_generated_method="83F1AA0554504DB97209E7C3EDDB1001") public AndFileFilter(){  this.fileFilters=new ArrayList<IOFileFilter>();}  }
class C{  @Override public boolean supportsOpenCursorsAcrossRollback(){  debugCodeCall("supportsOpenCursorsAcrossRollback");  return false;}  }
class C{  private Vector applyCSS(HTMLElement element,HTMLComponent htmlC,CSSElement[] css,Vector nestedSelectors,Vector siblingSelectors){  String id=element.getAttributeById(HTMLElement.ATTR_ID);  String className=element.getAttributeById(HTMLElement.ATTR_CLASS);  Vector nextNestedSelectors=new Vector();  Vector nextSiblingSelectors=null;  if (!HTMLComponent.PROCESS_HTML_MP1_ONLY) {    nextSiblingSelectors=new Vector();  }  for (int e=0; e < css.length; e++) {    CSSElement currentSelector=css[e];    checkSelector(currentSelector,element,htmlC,className,id,nextNestedSelectors,nextSiblingSelectors);  }  if (nestedSelectors != null) {    for (Enumeration e=nestedSelectors.elements(); e.hasMoreElements(); ) {      CSSElement currentSelector=(CSSElement)e.nextElement();      checkSelector(currentSelector,element,htmlC,className,id,nextNestedSelectors,nextSiblingSelectors);    }  }  if ((!HTMLComponent.PROCESS_HTML_MP1_ONLY) && (siblingSelectors != null)) {    for (Enumeration e=siblingSelectors.elements(); e.hasMoreElements(); ) {      CSSElement currentSelector=(CSSElement)e.nextElement();      checkSelector(currentSelector,element,htmlC,className,id,nextNestedSelectors,nextSiblingSelectors);    }  }  if (nextNestedSelectors.size() == 0) {    nextNestedSelectors=null;  }  if ((!HTMLComponent.PROCESS_HTML_MP1_ONLY) && (nextSiblingSelectors.size() == 0)) {    nextSiblingSelectors=null;  }  applyStyleAttribute(element,htmlC);  Vector curSiblingSelectors=null;  for (int i=0; i < element.getNumChildren(); i++) {    HTMLElement child=(HTMLElement)element.getChildAt(i);    Vector v=applyCSS(child,htmlC,css,nextNestedSelectors,curSiblingSelectors);    if (!child.isTextElement()) {      curSiblingSelectors=v;    }  }  return nextSiblingSelectors;}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  return null;}  }
class C{  public int readDictionaryAsObject(final PdfObject pdfObject,int i,final byte[] raw){  if (endPt == -1) {    endPt=raw.length;  }  if (debugFastCode) {    padding+="   ";  }  final int length=raw.length;  if (debugFastCode) {    ObjectUtils.showData(pdfObject,i,length,raw,padding);  }  i=readObjectDataValues(pdfObject,i,raw,length);  if (!pdfObject.ignoreStream() && pdfObject.getGeneralType(-1) != PdfDictionary.ID) {    Stream.readStreamData(pdfObject,i,raw,length,objectReader);  }  if (pdfObject.getObjectType() == PdfDictionary.Form) {    Form.setFieldNames(pdfObject,objectReader);  }  if (debugFastCode) {    final int len=padding.length();    if (len > 3) {      padding=padding.substring(0,len - 3);    }  }  return i;}  }
class C{  static String byteArrayToBase64(byte[] a){  return byteArrayToBase64(a,false);}  }
class C{  private synchronized Path readGlyph(int base,int offset){  FlPoint pt=new FlPoint();  Range r=getIndexEntry(base,offset);  Path gp=new Path();  int hold=pos;  stackptr=0;  parseGlyph(r,gp,pt);  pos=hold;  gp.transform(at);  return gp;}  }
class C{  public boolean disableStatePersistence(){  return this.disableStatePersistence;}  }
class C{  public boolean isMandatory(FDPropertyHost host){  if (!hasMandatoryProps.containsKey(host)) {    createEntry(host);  }  return hasMandatoryProps.get(host);}  }
class C{  @Override public synchronized void close() throws IOException {  if (!initialized || closed) {    closed=true;    return;  }  for (  Entry entry : lruEntries.values().toArray(new Entry[lruEntries.size()])) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;  closed=true;}  }
class C{  protected void copyBlockDataChunk(DimensionColumnDataChunk[] dimensionColumnDataChunks,int rowNumber,byte[] input){  byte[] data=(byte[])dimensionColumnDataChunks[blockIndex].getCompleteDataChunk();  if (null != dimensionColumnDataChunks[blockIndex].getAttributes().getInvertedIndexes()) {    System.arraycopy(data,dimensionColumnDataChunks[blockIndex].getAttributes().getInvertedIndexesReverse()[rowNumber] * dimensionColumnDataChunks[blockIndex].getAttributes().getColumnValueSize(),input,0,dimensionColumnDataChunks[blockIndex].getAttributes().getColumnValueSize());  } else {    System.arraycopy(data,rowNumber * dimensionColumnDataChunks[blockIndex].getAttributes().getColumnValueSize(),input,0,dimensionColumnDataChunks[blockIndex].getAttributes().getColumnValueSize());  }}  }
class C{  public static boolean isDefaultRestartBackup(){  return DEFAULT_RESTART_BACKUP;}  }
class C{  private ZonedDateTime resolveOffset(ZoneOffset offset){  if (offset.equals(this.offset) == false && zone.getRules().isValidOffset(dateTime,offset)) {    return new ZonedDateTime(dateTime,offset,zone);  }  return this;}  }
class C{  private void saveDebuggers(){  try {    final ListModel<DebuggerTemplate> model=m_checkedList.getModel();    final List<DebuggerTemplate> oldDebuggers=m_project.getConfiguration().getDebuggers();    for (int i=0; i < model.getSize(); ++i) {      final DebuggerTemplate debugger=model.getElementAt(i);      if (m_checkedList.isChecked(i) && !oldDebuggers.contains(debugger)) {        m_project.getConfiguration().addDebugger(debugger);      } else       if (!m_checkedList.isChecked(i) && oldDebuggers.contains(debugger)) {        m_project.getConfiguration().removeDebugger(model.getElementAt(i));      }    }  } catch (  final CouldntSaveDataException e) {    CUtilityFunctions.logException(e);    final String innerMessage="E00173: " + "Could not save project debuggers";    final String innerDescription=CUtilityFunctions.createDescription(String.format("The new debuggers of the project '%s' could not be saved.",m_project.getConfiguration().getName()),new String[]{"There was a problem with the database connection."},new String[]{"The project keeps its old debuggers."});    NaviErrorDialog.show(SwingUtilities.getWindowAncestor(CProjectNodeComponent.this),innerMessage,innerDescription,e);  }}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  public static void silentCloseOutputStream(OutputStream os){  try {    if (os != null) {      os.close();    }  } catch (  IOException e) {    Log.w(LOG_TAG,"Cannot close output stream",e);  }}  }
class C{  private void trainIncrementalPSIVectors(String iterationTag) throws IOException {  String fieldName=PREDICATION_FIELD;  Terms allTerms=luceneUtils.getTermsForField(fieldName);  TermsEnum termsEnum=allTerms.iterator(null);  BytesRef bytes;  int pc=0;  while ((bytes=termsEnum.next()) != null) {    Term term=new Term(fieldName,bytes);    pc++;    if ((pc > 0) && ((pc % 10000 == 0) || (pc < 10000 && pc % 1000 == 0))) {      VerbatimLogger.info("Processed " + pc + " unique predications ... ");    }    DocsEnum termDocs=luceneUtils.getDocsForTerm(term);    termDocs.nextDoc();    Document document=luceneUtils.getDoc(termDocs.docID());    String subject=document.get(SUBJECT_FIELD);    String predicate=document.get(PREDICATE_FIELD);    String object=document.get(OBJECT_FIELD);    if (!(elementalItemVectors.containsVector(object) && elementalItemVectors.containsVector(subject) && elementalPredicateVectors.containsVector(predicate))) {      logger.fine("skipping predication " + subject + " "+ predicate+ " "+ object);      continue;    }    float sWeight=1;    float oWeight=1;    float pWeight=1;    float predWeight=1;    predWeight=luceneUtils.getGlobalTermWeight(new Term(PREDICATE_FIELD,predicate));    sWeight=luceneUtils.getGlobalTermWeight(new Term(SUBJECT_FIELD,subject));    oWeight=luceneUtils.getGlobalTermWeight(new Term(OBJECT_FIELD,object));    pWeight=luceneUtils.getLocalTermWeight(luceneUtils.getGlobalTermFreq(term));    if (flagConfig.termweight().equals(TermWeight.SQRT))     predWeight=0;    Vector subjectSemanticVector=semanticItemVectors.getVector(subject);    Vector objectSemanticVector=semanticItemVectors.getVector(object);    Vector subjectElementalVector=elementalItemVectors.getVector(subject);    Vector objectElementalVector=elementalItemVectors.getVector(object);    Vector predicateElementalVector=elementalPredicateVectors.getVector(predicate);    Vector predicateElementalVectorInv=elementalPredicateVectors.getVector(predicate + "-INV");    Vector objToAdd=objectElementalVector.copy();    objToAdd.bind(predicateElementalVector);    subjectSemanticVector.superpose(objToAdd,pWeight * (oWeight + predWeight),null);    Vector subjToAdd=subjectElementalVector.copy();    subjToAdd.bind(predicateElementalVectorInv);    objectSemanticVector.superpose(subjToAdd,pWeight * (sWeight + predWeight),null);    if (flagConfig.trainingcycles() > 0) {      Vector predicateSemanticVector=semanticPredicateVectors.getVector(predicate);      Vector predicateSemanticVectorInv=semanticPredicateVectors.getVector(predicate + "-INV");      Vector permutedSubjectElementalVector=VectorFactory.createZeroVector(flagConfig.vectortype(),flagConfig.dimension());      Vector permutedObjectElementalVector=VectorFactory.createZeroVector(flagConfig.vectortype(),flagConfig.dimension());      permutedSubjectElementalVector.superpose(subjectElementalVector,1,predicatePermutation);      permutedObjectElementalVector.superpose(objectElementalVector,1,predicatePermutation);      permutedSubjectElementalVector.normalize();      permutedObjectElementalVector.normalize();      Vector predToAdd=subjectElementalVector.copy();      predToAdd.bind(permutedObjectElementalVector);      predicateSemanticVector.superpose(predToAdd,sWeight * oWeight,null);      Vector predToAddInv=objectElementalVector.copy();      predToAddInv.bind(permutedSubjectElementalVector);      predicateSemanticVectorInv.superpose(predToAddInv,oWeight * sWeight,null);    }  }  Enumeration<ObjectVector> e=semanticItemVectors.getAllVectors();  while (e.hasMoreElements()) {    e.nextElement().getVector().normalize();  }  e=semanticPredicateVectors.getAllVectors();  while (e.hasMoreElements()) {    e.nextElement().getVector().normalize();  }  VectorStoreWriter.writeVectors(flagConfig.semanticvectorfile() + iterationTag,flagConfig,semanticItemVectors);  if (flagConfig.trainingcycles() > 0) {    VectorStoreWriter.writeVectors(flagConfig.semanticpredicatevectorfile() + iterationTag,flagConfig,semanticPredicateVectors);  }  VerbatimLogger.info("Finished writing this round of semantic item and predicate vectors.\n");}  }
class C{  public static void copy(String in,Writer out) throws IOException {  Assert.notNull(in,"No input String specified");  Assert.notNull(out,"No Writer specified");  try {    out.write(in);  }  finally {    try {      out.close();    } catch (    IOException ex) {    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  NamedNodeMap notations;  Node notationNode;  NamedNodeMap attrList;  doc=(Document)load("staff",false);  docType=doc.getDoctype();  assertNotNull("docTypeNotNull",docType);  notations=docType.getNotations();  assertNotNull("notationsNotNull",notations);  notationNode=notations.getNamedItem("notation1");  assertNotNull("notationNotNull",notationNode);  attrList=notationNode.getAttributes();  assertNull("nodeNotationNodeAttributesAssert1",attrList);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:19.675 -0500",hash_original_method="A9275A3C5F8B97D3BA22658E0542618D",hash_generated_method="7665B655F99C9555F433E87E917F6A46") public boolean isAcceptingText(){  checkFocus();  return mServedInputConnection != null;}  }
class C{  public static String create(mxICell cell){  String result="";  if (cell != null) {    mxICell parent=cell.getParent();    while (parent != null) {      int index=parent.getIndex(cell);      result=index + mxCellPath.PATH_SEPARATOR + result;      cell=parent;      parent=cell.getParent();    }  }  return (result.length() > 1) ? result.substring(0,result.length() - 1) : "";}  }
class C{  protected boolean updateLink(@Nonnull Link lk,@Nonnull LinkInfo existingInfo,@Nonnull LinkInfo newInfo){  boolean linkChanged=false;  boolean ignoreBDDP_haveLLDPalready=false;  if (existingInfo.getMulticastValidTime() == null && newInfo.getMulticastValidTime() != null) {    if (existingInfo.getUnicastValidTime() == null) {      log.debug("Link is BDDP. Changed.");      linkChanged=true;    } else {      ignoreBDDP_haveLLDPalready=true;    }  } else   if (existingInfo.getUnicastValidTime() == null && newInfo.getUnicastValidTime() != null) {    log.debug("Link is LLDP. Changed.");    linkChanged=true;  }  if (newInfo.getUnicastValidTime() != null) {    existingInfo.setUnicastValidTime(newInfo.getUnicastValidTime());  } else   if (newInfo.getMulticastValidTime() != null) {    existingInfo.setMulticastValidTime(newInfo.getMulticastValidTime());  }  U64 currentLatency=existingInfo.getCurrentLatency();  U64 latencyToUse=existingInfo.addObservedLatency(lk.getLatency());  if (currentLatency == null) {  } else   if (!latencyToUse.equals(currentLatency) && !ignoreBDDP_haveLLDPalready) {    log.debug("Updating link {} latency to {}ms",lk.toKeyString(),latencyToUse.getValue());    lk.setLatency(latencyToUse);    linkChanged=true;  } else {    log.trace("No need to update link latency {}",lk.toString());  }  return linkChanged;}  }
class C{  @Override public void initializeConnection() throws QueryException {  super.initializeConnection();  try {    reconnectFailedConnection(new SearchFilter(true));  } catch (  QueryException e) {    checkInitialConnection(e);  }}  }
class C{  private void resolvePorts(){  if (proxySource != null && proxySource instanceof ProxyOutputPort) {    OutputPort<?> outputPort=proxySource;    while (outputPort instanceof ProxyOutputPort) {      outputPort=((ProxyOutputPort<?>)outputPort).get();    }    setSource(outputPort);  }  for (  InputPort<?> inputPort : proxySinks) {    while (inputPort instanceof ProxyInputPort) {      inputPort=((ProxyInputPort<?>)inputPort).get();    }    addSink(inputPort);  }  proxySource=null;  proxySinks.clear();}  }
class C{  String upload(String url,String fileName,InputStream in) throws IOException {  HttpURLConnection conn=(HttpURLConnection)new URL(url).openConnection();  conn.setDoOutput(true);  conn.setDoInput(true);  conn.setUseCaches(false);  conn.setRequestMethod("POST");  conn.setRequestProperty("Connection","Keep-Alive");  String boundary=UUID.randomUUID().toString();  conn.setRequestProperty("Content-Type","multipart/form-data;boundary=" + boundary);  conn.connect();  DataOutputStream out=new DataOutputStream(conn.getOutputStream());  out.writeBytes("--" + boundary + "--\r\n");  out.writeBytes("Content-Disposition: form-data; name=\"upload\";" + " filename=\"" + fileName + "\"\r\n\r\n");  IOUtils.copyAndCloseInput(in,out);  out.writeBytes("\r\n--" + boundary + "--\r\n");  out.close();  int code=conn.getResponseCode();  if (code != HttpURLConnection.HTTP_OK) {    throw new IOException("Result code: " + code);  }  in=conn.getInputStream();  String result=IOUtils.readStringAndClose(new InputStreamReader(in),-1);  conn.disconnect();  return result;}  }
class C{  private void encodePendingBytes(final boolean pad) throws IOException {  int eLen=this.count / 3 * 3;  for (int s=0; s < eLen; ) {    int i=(this.buf[s++] & 0xff) << 16 | (this.buf[s++] & 0xff) << 8 | this.buf[s++] & 0xff;    if (this.encCount + 4 > this.chars.length) {      this.drainCharBuffer();    }    this.chars[this.encCount++]=Base64OutputStreamWriter.CA[i >>> 18 & 0x3f];    this.chars[this.encCount++]=Base64OutputStreamWriter.CA[i >>> 12 & 0x3f];    this.chars[this.encCount++]=Base64OutputStreamWriter.CA[i >>> 6 & 0x3f];    this.chars[this.encCount++]=Base64OutputStreamWriter.CA[i & 0x3f];  }  int left=this.count - eLen;  if (!pad) {    System.arraycopy(this.buf,eLen,this.buf,0,left);    this.count=left;  } else {    this.drainCharBuffer();    if (left > 0) {      int i=(this.buf[eLen] & 0xff) << 10 | (left == 2 ? (this.buf[this.count - 1] & 0xff) << 2 : 0);      this.writer.write(Base64OutputStreamWriter.CA[i >> 12]);      this.writer.write(Base64OutputStreamWriter.CA[i >>> 6 & 0x3f]);      this.writer.write(left == 2 ? Base64OutputStreamWriter.CA[i & 0x3f] : '=');      this.writer.write('=');    }  }}  }
class C{  public synchronized void engineSetCertificateEntry(String alias,Certificate cert) throws KeyStoreException {  token.ensureValid();  checkWrite();  if (cert == null) {    throw new KeyStoreException("invalid null certificate");  }  KeyStore.Entry entry=null;  entry=new KeyStore.TrustedCertificateEntry(cert);  engineSetEntry(alias,entry,null);}  }
class C{  private void disconnectSessions(){  if (!(service instanceof IoAcceptor)) {    return;  }  if (!((IoAcceptor)service).isCloseOnDeactivation()) {    return;  }  Object lock=new Object();  IoFutureListener<IoFuture> listener=new LockNotifyingListener(lock);  for (  IoSession s : managedSessions.values()) {    s.close(true).addListener(listener);  }  try {synchronized (lock) {      while (!managedSessions.isEmpty()) {        lock.wait(500);      }    }  } catch (  InterruptedException ie) {  }}  }
class C{  public SignatureVisitor visitArrayType(){  return this;}  }
class C{  public static void colorizeToolbar(Toolbar toolbarView,int toolbarIconsColor,Activity activity){  final PorterDuffColorFilter colorFilter=new PorterDuffColorFilter(toolbarIconsColor,PorterDuff.Mode.SRC_IN);  for (int i=0; i < toolbarView.getChildCount(); i++) {    final View v=toolbarView.getChildAt(i);    doColorizing(v,colorFilter,toolbarIconsColor);  }  toolbarView.setTitleTextColor(toolbarIconsColor);  toolbarView.setSubtitleTextColor(toolbarIconsColor);}  }
class C{  public static Dom transplant(Node node){  if (node.getNodeType() == Node.DOCUMENT_NODE) {    node=((Document)node).getDocumentElement();  } else   if (node.getNodeType() == Node.DOCUMENT_FRAGMENT_NODE) {    return new Dom((DocumentFragment)node);  }  DocumentFragment f=node.getOwnerDocument().createDocumentFragment();  f.appendChild(node);  Nodes.setFilePositionFor(f,Nodes.getFilePositionFor(node));  return new Dom(f);}  }
class C{  static boolean isSynthetic(Member m){  if (IS_SYNTHETIC != null) {    try {      return ((Boolean)IS_SYNTHETIC.invoke(m,null)).booleanValue();    } catch (    Exception e) {    }  }  return false;}  }
class C{  public synchronized Session createSession(User user){  Session session=new Session(this,user,++nextSessionId);  userSessions.add(session);  if (trace.isDebugEnabled()) {    trace.debug("create session id[{0}]",session.getId(),"engine");  }  return session;}  }
class C{  protected MediaSizeName(int value){  super(value);}  }
class C{  public static boolean canSwapCols(Matrix matrix,int col1,int col2,int row1){  boolean response=true;  for (int row=row1 + 1; row < matrix.getRowCount(); ++row) {    if (0 == matrix.getAsDouble(row,col1)) {      if (0 != matrix.getAsDouble(row,col2)) {        response=false;        break;      }    }  }  return response;}  }
class C{  public boolean isBeforeFirst(){  return this.index == -1 && this.rows.size() != 0;}  }
class C{  public static CommandFuture executeAsync(Command command){  return executeAsync(command,CommandContext.defaultContext());}  }
class C{  private void testRepeatVarsNoRepeat(final RepeatVars repeatVars) throws IllegalAccessException {  Assert.assertEquals(repeatVars.isRepeatDownload(),false);  Assert.assertEquals(repeatVars.isRepeatUpload(),false);  Assert.assertEquals(repeatVars.isFirstDownloadRepeat(),false);  Assert.assertEquals(repeatVars.isFirstUploadRepeat(),false);  testRepeatVarsInit(repeatVars);}  }
class C{  public void visitVarInsn(int opcode,int var){  if (mv != null) {    mv.visitVarInsn(opcode,var);  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.871 -0500",hash_original_method="3B37EFF40C149A7A244BFEF0002B2C93",hash_generated_method="2C24111E3C33F98C179B82A67E3EFE53") public boolean endsWith(String suffix){  return getTaintBoolean();}  }
class C{  protected void incrementAnimationIndex(){  int newValue=getAnimationIndex() + 1;  if (newValue < numFrames) {    setAnimationIndex(newValue);  } else {    setAnimationIndex(0);  }}  }
class C{  public final void sendMessageDelayed(int what,Object obj,long delayMillis){  SmHandler smh=mSmHandler;  if (smh == null)   return;  smh.sendMessageDelayed(obtainMessage(what,obj),delayMillis);}  }
class C{  public void addContentView(View view,ViewGroup.LayoutParams params){  getWindow().addContentView(view,params);  initActionBar();}  }
class C{  public void testInsertRemove() throws Exception {  AtomicIntervalGuard<String> ati=new AtomicIntervalGuard<String>(4);  Integer[] t={new Integer(0),new Integer(1),new Integer(2)};  ati.report(t[0],2,20,"2");  ati.unreport(t[0]);  ati.validate();  assertEquals("empty list",0,ati.size());  assertEquals("No high seqno",-1,ati.getHiSeqno());  assertEquals("No low seqno",-1,ati.getLowSeqno());  assertEquals("Interval is zero",0,ati.getInterval());  ati.report(t[0],1,10,"1");  ati.report(t[1],4,40,"4");  ati.report(t[2],3,30,"3");  ati.unreport(t[0]);  ati.validate();  assertEquals("two items in list",2,ati.size());  assertEquals("Head #1",3,ati.getLowSeqno());  assertEquals("Tail #1",4,ati.getHiSeqno());  assertEquals("Head #1 -datum","3",ati.getLowDatum());  assertEquals("Tail #1 -datum","4",ati.getHiDatum());  ati.report(t[0],1,20,"1");  ati.unreport(t[1]);  ati.validate();  assertEquals("two items in list",2,ati.size());  assertEquals("Head #2",1,ati.getLowSeqno());  assertEquals("Tail #2",3,ati.getHiSeqno());  assertEquals("Head #2 -datum","1",ati.getLowDatum());  assertEquals("Tail #2 -datum","3",ati.getHiDatum());  ati.report(t[1],4,45,"4");  ati.unreport(t[2]);  ati.validate();  assertEquals("two items in list",2,ati.size());  assertEquals("Head #3",1,ati.getLowSeqno());  assertEquals("Tail #3",4,ati.getHiSeqno());  assertEquals("Head #3 -datum","1",ati.getLowDatum());  assertEquals("Tail #3 -datum","4",ati.getHiDatum());}  }
class C{  public Location location(){  validateStackFrame();  return location;}  }
class C{  public IdentityHashMap(Map<? extends K,? extends V> map){  this(map.size() < 6 ? 11 : map.size() * 2);  putAllImpl(map);}  }
class C{  public void run(){  logger.debug("Running PoolThread");  do {    try {      logger.debug(this.toString());      taskPool.take().run();    } catch (    Exception ex) {      if (running) {        logger.error("Problem starting receiver thread",ex);      }    }  } while (running);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:06.765 -0500",hash_original_method="BC5B318F45FBBBBC44050BD05FD123C0",hash_generated_method="D399C7E10126385D5C50DCE64A629E53") public ExpandableListConnector(ExpandableListAdapter expandableListAdapter){  mExpGroupMetadataList=new ArrayList<GroupMetadata>();  setExpandableListAdapter(expandableListAdapter);}  }
class C{  public ConnectionConfig(String p,String m){  super();  hostName=p;  if (m != null) {    manufacturerName=m;  }}  }
class C{  public void flush(){  if (eventLoop.inEventLoop()) {    pending++;    if (pending >= maxPending) {      pending=0;      channel.flush();    }  }  if (woken == 0 && WOKEN.compareAndSet(this,0,1)) {    woken=1;    eventLoop.execute(wakeup);  }}  }
class C{  @Override public synchronized void commit() throws SQLException {  try {    debugCodeCall("commit");    checkClosedForWrite();    try {      commit=prepareCommand("COMMIT",commit);      commit.executeUpdate();    }  finally {      afterWriting();    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public Tab addItems(List<Item> items){  for (  Item item : items)   mItems.add(item);  return this;}  }
class C{  @Override public long length() throws SQLException {  try {    debugCodeCall("length");    checkClosed();    if (value.getType() == Value.CLOB) {      long precision=value.getPrecision();      if (precision > 0) {        return precision;      }    }    return IOUtils.copyAndCloseInput(value.getReader(),null,Long.MAX_VALUE);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static void pause(){  pause(250);}  }
class C{  private View createCustomViewInternal(View parent,View view,String name,Context viewContext,AttributeSet attrs){  if (view == null && name.indexOf('.') > -1) {    if (mConstructorArgs == null)     mConstructorArgs=ReflectionUtils.getField(LayoutInflater.class,"mConstructorArgs");    final Object[] mConstructorArgsArr=(Object[])ReflectionUtils.getValue(mConstructorArgs,this);    final Object lastContext=mConstructorArgsArr[0];    mConstructorArgsArr[0]=viewContext;    ReflectionUtils.setValue(mConstructorArgs,this,mConstructorArgsArr);    try {      view=createView(name,null,attrs);    } catch (    ClassNotFoundException ignored) {    } finally {      mConstructorArgsArr[0]=lastContext;      ReflectionUtils.setValue(mConstructorArgs,this,mConstructorArgsArr);    }  }  return view;}  }
class C{  public Vertex define(Vertex source,Vertex vertex,Vertex vertex2){  return define(source,vertex,vertex2,null,null,null);}  }
class C{  public void primitivePaint(Graphics2D g2d){  if (image == null)   return;  GraphicsUtil.drawImage(g2d,image);}  }
class C{  public void testDrainTo(){  LinkedBlockingDeque q=populatedDeque(SIZE);  ArrayList l=new ArrayList();  q.drainTo(l);  assertEquals(q.size(),0);  assertEquals(l.size(),SIZE);  for (int i=0; i < SIZE; ++i)   assertEquals(l.get(i),new Integer(i));  q.add(zero);  q.add(one);  assertFalse(q.isEmpty());  assertTrue(q.contains(zero));  assertTrue(q.contains(one));  l.clear();  q.drainTo(l);  assertEquals(q.size(),0);  assertEquals(l.size(),2);  for (int i=0; i < 2; ++i)   assertEquals(l.get(i),new Integer(i));}  }
class C{  public boolean isMcastId(){  return this.host.isMulticastAddress();}  }
class C{  public TPS currentRow(){  return currentRow(null);}  }
class C{  public void testDoubleProperty(){  testDoubleProperty(DatasourcePropertySet.CONNECTION_TYPE,"javax.sql.DataSource",DatasourcePropertySet.DRIVER_CLASS,"org.hsqldb.jdbcDriver");}  }
class C{  public static Set<String> uriListToSet(List<URI> uris){  Set<String> set=new HashSet<String>();  if (uris != null && !uris.isEmpty()) {    for (    URI uri : uris) {      set.add(uri.toString());    }  }  return set;}  }
class C{  private void appendVertices(PrintWriter out){  for (  Vertex vertex : exportVertices) {    float x=(vertex.x + x_offset) * file_scale;    float y=(vertex.y + y_offset) * file_scale;    float z=(vertex.z + z_offset) * file_scale;    BigDecimal xRound=new BigDecimal(x).setScale(3,RoundingMode.HALF_UP);    BigDecimal yRound=new BigDecimal(y).setScale(3,RoundingMode.HALF_UP);    BigDecimal zRound=new BigDecimal(z).setScale(3,RoundingMode.HALF_UP);    out.print("v " + xRound.toPlainString() + " "+ yRound.toPlainString()+ " "+ zRound.toPlainString());    out.println();  }}  }
class C{  public void mousePressed(MouseEvent e){  JTableHeader hdr=(JTableHeader)e.getSource();  int mask=e.getModifiers();  JTable tbl=hdr.getTable();  if ((mask & MouseEvent.SHIFT_MASK) != 0)   tbl.setAutoResizeMode(sMode); else   if ((mask & MouseEvent.CTRL_MASK) != 0)   tbl.setAutoResizeMode(cMode); else   if ((mask & MouseEvent.ALT_MASK) != 0)   tbl.setAutoResizeMode(aMode); else   tbl.setAutoResizeMode(dMode);}  }
class C{  protected void skipUntil(Reader r,char until) throws IOException {  char c;  do {    c=(char)r.read();  } while (c != until && c != (char)-1);}  }
class C{  @Override public String toString(){  return super.toString() + "[charsetName=" + this.charset+ "]";}  }
class C{  private void updatePrimitiveCounts(){  final int maxIndex=_indexBuffer != null ? _indexBuffer.getBufferLimit() : _vertexCount;  final int maxSection=_indexLengths != null ? _indexLengths.length : 1;  if (_primitiveCounts.length != maxSection) {    _primitiveCounts=new int[maxSection];  }  for (int i=0; i < maxSection; i++) {    final int size=_indexLengths != null ? _indexLengths[i] : maxIndex;    final int count=IndexMode.getPrimitiveCount(getIndexMode(i),size);    _primitiveCounts[i]=Math.max(0,count);  }}  }
class C{  public boolean doWindowDeActivated(){  return true;}  }
class C{  public boolean isAnyOutputSpent(){  for (  TransactionOutput output : outputs) {    if (!output.isAvailableForSpending())     return true;  }  return false;}  }
class C{  public Resin3xStandaloneLocalConfigurationCapability(){  this.propertySupportMap.put(ResinPropertySet.SOCKETWAIT_PORT,Boolean.TRUE);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static VMRequest fixedSize(int mb){  if (VM.HEAP_LAYOUT_64BIT) {    return common64Bit(false);  }  return new VMRequest(REQUEST_EXTENT,Address.zero(),Word.fromIntSignExtend(mb).lsh(LOG_BYTES_IN_MBYTE).toExtent(),0f,false);}  }
class C{  public Map<URI,List<URI>> assignStoragePorts(StorageSystem storage,ExportGroup exportGroup,List<Initiator> initiators,StringSetMap existingZoningMap,ExportPathParams pathParams,Collection<URI> volumeURIs,NetworkDeviceController networkDeviceController,URI virtualArrayUri,String token){  StringSetMap preZonedZoningMap=assignPrezonedStoragePorts(storage,exportGroup,initiators,existingZoningMap,pathParams,volumeURIs,networkDeviceController,virtualArrayUri,token);  Map<URI,List<URI>> assignments=assignStoragePorts(storage,virtualArrayUri,initiators,pathParams,preZonedZoningMap,volumeURIs);  ExportUtils.addPrezonedAssignments(existingZoningMap,assignments,preZonedZoningMap);  return assignments;}  }
class C{  public Buffer read() throws NetworkException {  VideoSample sample=(VideoSample)getPlayer().readSample();  if (sample == null) {    throw new NetworkException("Failed to read video sample!");  }  buffer.setData(sample.getData());  buffer.setLength(sample.getLength());  buffer.setFormat(getFormat());  buffer.setSequenceNumber(seqNo++);  if (sample.isMarker()) {    buffer.setFlags(Buffer.FLAG_RTP_MARKER);  }  buffer.setTimestamp(sample.getTimestamp());  buffer.setVideoOrientation(sample.getVideoOrientation());  return buffer;}  }
class C{  public boolean shouldOverrideCopyOperation(Collection eObjects,Map hintMap){  return false;}  }
class C{  public boolean isSwitchHandshakeComplete(){  if (this.state.channelHandshakeComplete) {    return connection.getListener().isSwitchHandshakeComplete(connection);  } else {    return false;  }}  }
class C{  public final static byte[] createType1Message(String workStation,String domain,Integer customFlags,byte[] osVersion){  byte[] msg=null;  if (osVersion != null && osVersion.length != 8) {    throw new IllegalArgumentException("osVersion parameter should be a 8 byte wide array");  }  if (workStation == null || domain == null) {    throw new IllegalArgumentException("workStation and domain must be non null");  }  int flags=customFlags != null ? customFlags | FLAG_NEGOTIATE_WORKSTATION_SUPPLIED | FLAG_NEGOTIATE_DOMAIN_SUPPLIED : DEFAULT_FLAGS;  ByteArrayOutputStream baos=new ByteArrayOutputStream();  try {    baos.write(NTLM_SIGNATURE);    baos.write(ByteUtilities.writeInt(MESSAGE_TYPE_1));    baos.write(ByteUtilities.writeInt(flags));    byte[] domainData=ByteUtilities.getOEMStringAsByteArray(domain);    byte[] workStationData=ByteUtilities.getOEMStringAsByteArray(workStation);    int pos=(osVersion != null) ? 40 : 32;    baos.write(writeSecurityBuffer((short)domainData.length,pos + workStationData.length));    baos.write(writeSecurityBuffer((short)workStationData.length,pos));    if (osVersion != null) {      baos.write(osVersion);    }    baos.write(workStationData);    baos.write(domainData);    msg=baos.toByteArray();    baos.close();  } catch (  IOException e) {    return null;  }  return msg;}  }
class C{  public void oneTimeDriverEpilog(DriverThread dt){  if (verbose)   System.out.println(dt.getName() + ": oneTimeDriverEpilog() called");}  }
class C{  public void gotoEnterVsoURL(){  model.getTfsImportPageModel().signOut();  model.setVsoSelected(false);}  }
class C{  private void generate(PrintWriter pw){  try {    Source src=new SAXSource(this,new InputSource());    Result res=new StreamResult(pw);    TransformerFactory xFactory=TransformerFactory.newInstance();    Transformer xform=xFactory.newTransformer();    xform.setOutputProperty(OutputKeys.METHOD,"xml");    xform.setOutputProperty(OutputKeys.INDENT,"yes");    if (!useSchema) {      xform.setOutputProperty(OutputKeys.DOCTYPE_SYSTEM,version.getSystemId());      xform.setOutputProperty(OutputKeys.DOCTYPE_PUBLIC,version.getPublicId());    }    xform.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","2");    xform.transform(src,res);    pw.flush();  } catch (  Exception ex) {    RuntimeException ex2=new RuntimeException(LocalizedStrings.CacheXmlGenerator_AN_EXCEPTION_WAS_THROWN_WHILE_GENERATING_XML.toLocalizedString());    ex2.initCause(ex);    throw ex2;  }}  }
class C{  public void traceFieldNotInHostJdk(){  traceNulledWord(": field not in host jdk");}  }
class C{  public Reader reader(String id,int version,String encoding) throws UnsupportedEncodingException {  if (INFO)   log.info("id=" + id + ", version="+ version+ ", encoding="+ encoding);  if (encoding == null) {    throw new IllegalStateException();  }  return new InputStreamReader(inputStream(id,version),encoding);}  }
class C{  protected void addToChannelsPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Endpoint_toChannels_feature"),getString("_UI_PropertyDescriptor_description","_UI_Endpoint_toChannels_feature","_UI_Endpoint_type"),EipPackage.Literals.ENDPOINT__TO_CHANNELS,true,false,true,null,null,null));}  }
class C{  public void registerCustomTooltipRenderer(RenderTooltipInterface renderer){  if (renderer == null) {    throw new InvalidParameterException("Error setting TooltipRenderer, renderer may not be null");  }  this.tooltipRenderer=renderer;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public NativeDaemonEvent execute(String cmd,Object... args) throws NativeDaemonConnectorException {  final NativeDaemonEvent[] events=executeForList(cmd,args);  if (events.length != 1) {    throw new NativeDaemonConnectorException("Expected exactly one response, but received " + events.length);  }  return events[0];}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (getC_UOM_ID() == getC_UOM_To_ID()) {    log.saveError("Error",Msg.parseTranslation(getCtx(),"@C_UOM_ID@ = @C_UOM_To_ID@"));    return false;  }  if (getMultiplyRate().compareTo(Env.ZERO) <= 0) {    log.saveError("Error",Msg.parseTranslation(getCtx(),"@MultiplyRate@ <= 0"));    return false;  }  if (MSysConfig.getBooleanValue("ProductUOMConversionUOMValidate",true)) {    if (getM_Product_ID() != 0 && (newRecord || is_ValueChanged("M_Product_ID"))) {      MProduct product=MProduct.get(getCtx(),getM_Product_ID());      if (product.getC_UOM_ID() != getC_UOM_ID()) {        MUOM uom=MUOM.get(getCtx(),product.getC_UOM_ID());        log.saveError("ProductUOMConversionUOMError",uom.getName());        return false;      }    }  }  if (MSysConfig.getBooleanValue("ProductUOMConversionRateValidate",true)) {    if (getM_Product_ID() != 0 && getDivideRate().compareTo(Env.ONE) < 0) {      log.saveError("ProductUOMConversionRateError","");      return false;    }  }  return true;}  }
class C{  public static void remove(EventType eventType,FilterHandle filterCallback,EventTypeIndexBuilderIndexLookupablePair[] treePathInfo,FilterHandleSetNode topNode){  if ((ExecutionPathDebugLog.isDebugEnabled) && (log.isDebugEnabled())) {    log.debug(".remove (" + Thread.currentThread().getId() + ") Removing filterCallback "+ " type "+ eventType.getName()+ " topNode="+ topNode+ " filterCallback="+ filterCallback);  }  removeFromNode(filterCallback,topNode,treePathInfo,0);}  }
class C{  public static String escapeLikePattern(String pattern,char escape){  if (escape == '%' || escape == '_') {    throw new IllegalArgumentException("Invalid escape character: " + escape);  }  if (isEmpty(pattern)) {    return "";  }  StringBuilder sb=new StringBuilder();  for (int i=0; i < pattern.length(); i++) {    char c=pattern.charAt(i);    if (c == '%' || c == '_' || c == escape) {      sb.append(escape);    }    sb.append(c);  }  return sb.toString();}  }
class C{  public CToggleButton(String text,boolean selected){  this(text,null,selected);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case DomPackage.LINE_TAG__DOCLET:    return basicGetDoclet() != null;}return super.eIsSet(featureID);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tCompresses the data (uses '" + ArffLoader.FILE_EXTENSION_COMPRESSED + "' as extension instead of '"+ ArffLoader.FILE_EXTENSION+ "')\n"+ "\t(default: off)","compress",0,"-compress"));  result.addElement(new Option("\tThe maximum number of digits to print after the decimal\n" + "\tplace for numeric values (default: 6)","decimal",1,"-decimal <num>"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  public CategorySeries(String title){  mTitle=title;}  }
class C{  public void translateCanvas(Canvas canvas){  if (applicationScale == 1.5f) {    final float tinyOffset=2.0f / (3 * 255);    canvas.translate(tinyOffset,tinyOffset);  }  canvas.scale(applicationScale,applicationScale);}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 4:{        addNullToken();        return firstToken;      }case 24:    break;case 21:{    yybegin(YYINITIAL);    addToken(start,zzStartRead + 1,Token.COMMENT_MULTILINE);  }case 25:break;case 19:{start=zzMarkedPos - 2;yybegin(MLC);}case 26:break;case 5:{addToken(Token.WHITESPACE);}case 27:break;case 18:{addToken(Token.LITERAL_NUMBER_HEXADECIMAL);}case 28:break;case 17:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 29:break;case 20:{addToken(Token.RESERVED_WORD);}case 30:break;case 8:{addToken(Token.SEPARATOR);}case 31:break;case 2:{addToken(Token.IDENTIFIER);}case 32:break;case 15:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addNullToken();return firstToken;}case 33:break;case 11:{}case 34:break;case 1:{addToken(Token.ERROR_IDENTIFIER);}case 35:break;case 12:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 36:break;case 23:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_EOL);start=zzMarkedPos;}case 37:break;case 22:{int temp=zzStartRead;addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);addHyperlinkToken(temp,zzMarkedPos - 1,Token.COMMENT_MULTILINE);start=zzMarkedPos;}case 38:break;case 16:{addToken(Token.ERROR_NUMBER_FORMAT);}case 39:break;case 9:{start=zzMarkedPos - 1;yybegin(STRING);}case 40:break;case 7:{start=zzMarkedPos - 1;yybegin(EOL_COMMENT);}case 41:break;case 3:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 42:break;case 6:{addToken(Token.OPERATOR);}case 43:break;case 13:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.LITERAL_STRING_DOUBLE_QUOTE);}case 44:break;case 10:{}case 45:break;case 14:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 46:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case EOL_COMMENT:{addToken(start,zzStartRead - 1,Token.COMMENT_EOL);addNullToken();return firstToken;}case 513:break;case STRING:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 514:break;case YYINITIAL:{addNullToken();return firstToken;}case 515:break;case MLC:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 516:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public static int systemIndexOf(String o){  return systemIndex.indexOf(o);}  }
class C{  private static Map<String,Integer> determineAttributeSizes(Bag geometries){  Map<String,Integer> attributeSizes=new HashMap<String,Integer>();  for (int i=0; i < geometries.size(); i++) {    MasonGeometry mg=(MasonGeometry)geometries.objs[i];    for (    String attributeName : mg.getAttributes().keySet()) {      Integer attributeSize=null;      try {        AttributeValue av=(AttributeValue)mg.getAttribute(attributeName);        if (av.getValue() instanceof Boolean) {          attributeSize=1;        } else {          Object value=av.getValue();          String stringValue=value.toString();          byte[] rawValue=stringValue.getBytes("US-ASCII");          if (value instanceof String) {            attributeSize=Math.min(rawValue.length,256);          } else           if (value instanceof Double) {            attributeSize=19;          } else {            attributeSize=Math.min(rawValue.length,18);          }        }      } catch (      UnsupportedEncodingException ex) {        Logger.getLogger(ShapeFileExporter.class.getName()).log(Level.SEVERE,null,ex);      }      if (attributeSizes.containsKey(attributeName)) {        Integer storedSize=attributeSizes.get(attributeName);        if (storedSize < attributeSize) {          attributeSizes.put(attributeName,attributeSize);        }      } else {        attributeSizes.put(attributeName,attributeSize);      }    }  }  return attributeSizes;}  }
class C{  public static long[] toLongArray(float[] array){  long[] result=new long[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(long)array[i];  }  return result;}  }
class C{  public Map<StoragePort,Long> computeStoragePortUsage(List<StoragePort> candidatePorts){  Map<StoragePort,Long> usages=new HashMap<StoragePort,Long>();  if (candidatePorts.isEmpty()) {    return usages;  }  StorageSystem system=_dbClient.queryObject(StorageSystem.class,candidatePorts.get(0).getStorageDevice());  return _portMetricsProcessor.computeStoragePortUsage(candidatePorts,system,true);}  }
class C{  private static int search(int value,int[] array,int start,int length){  int power=1 << getHighBit(length);  int extra=length - power;  int probe=power;  int index=start;  if (value >= array[index + extra]) {    index+=extra;  }  while (probe > 1) {    probe>>=1;    if (value >= array[index + probe]) {      index+=probe;    }  }  return index;}  }
class C{  public T caseConstraintToken_(ConstraintToken_ object){  return null;}  }
class C{  public final LC maxWidth(String width){  setWidth(LayoutUtil.derive(getWidth(),null,null,ConstraintParser.parseUnitValue(width,true)));  return this;}  }
class C{  public static <E>Map<String,E> parseMap(InputStream is,Class<E> jsonObjectClass) throws IOException {  return mapperFor(jsonObjectClass).parseMap(is);}  }
class C{  public void close() throws IOException {  isClosed=true;  impl.close();}  }
class C{  public static AttributedString assignArabicForms(AttributedString as){  if (!containsArabic(as)) {    return as;  }  AttributedCharacterIterator aci=as.getIterator();  int numChars=aci.getEndIndex() - aci.getBeginIndex();  int[] charOrder=null;  if (numChars >= 3) {    char prevChar=aci.first();    char c=aci.next();    int i=1;    for (char nextChar=aci.next(); nextChar != AttributedCharacterIterator.DONE; prevChar=c, c=nextChar, nextChar=aci.next(), i++) {      if (arabicCharTransparent(c)) {        if (hasSubstitute(prevChar,nextChar)) {          if (charOrder == null) {            charOrder=new int[numChars];            for (int j=0; j < numChars; j++) {              charOrder[j]=j + aci.getBeginIndex();            }          }          int temp=charOrder[i];          charOrder[i]=charOrder[i - 1];          charOrder[i - 1]=temp;        }      }    }  }  if (charOrder != null) {    StringBuffer reorderedString=new StringBuffer(numChars);    char c;    for (int i=0; i < numChars; i++) {      c=aci.setIndex(charOrder[i]);      reorderedString.append(c);    }    AttributedString reorderedAS;    reorderedAS=new AttributedString(reorderedString.toString());    for (int i=0; i < numChars; i++) {      aci.setIndex(charOrder[i]);      Map attributes=aci.getAttributes();      reorderedAS.addAttributes(attributes,i,i + 1);    }    if (charOrder[0] != aci.getBeginIndex()) {      aci.setIndex(charOrder[0]);      Float x=(Float)aci.getAttribute(GVTAttributedCharacterIterator.TextAttribute.X);      Float y=(Float)aci.getAttribute(GVTAttributedCharacterIterator.TextAttribute.Y);      if (x != null && !x.isNaN()) {        reorderedAS.addAttribute(GVTAttributedCharacterIterator.TextAttribute.X,new Float(Float.NaN),charOrder[0],charOrder[0] + 1);        reorderedAS.addAttribute(GVTAttributedCharacterIterator.TextAttribute.X,x,0,1);      }      if (y != null && !y.isNaN()) {        reorderedAS.addAttribute(GVTAttributedCharacterIterator.TextAttribute.Y,new Float(Float.NaN),charOrder[0],charOrder[0] + 1);        reorderedAS.addAttribute(GVTAttributedCharacterIterator.TextAttribute.Y,y,0,1);      }    }    as=reorderedAS;  }  aci=as.getIterator();  int runStart=-1;  int idx=aci.getBeginIndex();  for (int c=aci.first(); c != AttributedCharacterIterator.DONE; c=aci.next(), idx++) {    if ((c >= arabicStart) && (c <= arabicEnd)) {      if (runStart == -1)       runStart=idx;    } else     if (runStart != -1) {      as.addAttribute(ARABIC_FORM,ARABIC_NONE,runStart,idx);      runStart=-1;    }  }  if (runStart != -1)   as.addAttribute(ARABIC_FORM,ARABIC_NONE,runStart,idx);  aci=as.getIterator();  int end=aci.getBeginIndex();  Integer currentForm=ARABIC_NONE;  while (aci.setIndex(end) != AttributedCharacterIterator.DONE) {    int start=aci.getRunStart(ARABIC_FORM);    end=aci.getRunLimit(ARABIC_FORM);    char currentChar=aci.setIndex(start);    currentForm=(Integer)aci.getAttribute(ARABIC_FORM);    if (currentForm == null) {      continue;    }    int currentIndex=start;    int prevCharIndex=start - 1;    while (currentIndex < end) {      char prevChar=currentChar;      currentChar=aci.setIndex(currentIndex);      while (arabicCharTransparent(currentChar) && (currentIndex < end)) {        currentIndex++;        currentChar=aci.setIndex(currentIndex);      }      if (currentIndex >= end) {        break;      }      Integer prevForm=currentForm;      currentForm=ARABIC_NONE;      if (prevCharIndex >= start) {        if (arabicCharShapesRight(prevChar) && arabicCharShapesLeft(currentChar)) {          prevForm=new Integer(prevForm.intValue() + 1);          as.addAttribute(ARABIC_FORM,prevForm,prevCharIndex,prevCharIndex + 1);          currentForm=ARABIC_INITIAL;        } else         if (arabicCharShaped(currentChar)) {          currentForm=ARABIC_ISOLATED;        }      } else       if (arabicCharShaped(currentChar)) {        currentForm=ARABIC_ISOLATED;      }      if (currentForm != ARABIC_NONE)       as.addAttribute(ARABIC_FORM,currentForm,currentIndex,currentIndex + 1);      prevCharIndex=currentIndex;      currentIndex++;    }  }  return as;}  }
class C{  @Override public CamusRequest clone(){  return new EtlRequest(context,topic,leaderId,partition,uri,offset);}  }
class C{  protected void registerSelf(){  ConfigureManager cm=InstanceManager.getNullableDefault(jmri.ConfigureManager.class);  if (cm != null) {    cm.registerConfig(this,jmri.Manager.SIGNALMASTLOGICS);  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public String remove(Object key){  return _pairs.remove(key);}  }
class C{  public DisposableArray(final Type[] array){  super(array);}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  public boolean updateStoragePoolObjectFromVNXStoragePoolIndication(){  return retriveAndProcessIndicationAttributeValues(CIMConstants.STORAGE_POOL_INDICATION_FREE_CAPACITY,CIMConstants.STORAGE_POOL_INDICATION_POOL_NAME,CIMConstants.STORAGE_POOL_INDICATION_TOTAL_CAPACITY,CIMConstants.STORAGE_POOL_INDICATION_SUBSCRIBED_CAPACITY);}  }
class C{  public I buildInvocation(I invocation) throws ConfigException {  return getInvocationBuilder().routeInvocation(invocation);}  }
class C{  public CEvaluationException(final String msg){  super(msg);}  }
class C{  protected void correlatedPointRemovedCallback(int removedCorrelatedTimeStep){}  }
class C{  public V remove(int key){  V prev=null;  int index=index(key);  if (index >= 0) {    prev=unwrapNull(_values[index]);    removeAt(index);  }  return prev;}  }
class C{  public void testIndexingWithFacets() throws Exception {  String algLines[]={"# ----- properties ","content.source=org.apache.lucene.benchmark.byTask.feeds.LineDocSource","docs.file=" + getReuters20LinesFile(),"content.source.log.step=100","content.source.forever=false","directory=RAMDirectory","doc.stored=false","merge.factor=3","doc.tokenized=false","debug.level=1","# ----- alg ","ResetSystemErase","CreateIndex","CreateTaxonomyIndex","{ \"AddDocs\"  AddFacetedDoc > : * ","CloseIndex","CloseTaxonomyIndex","OpenTaxonomyReader"};  Benchmark benchmark=execBenchmark(algLines);  PerfRunData runData=benchmark.getRunData();  assertNull("taxo writer was not properly closed",runData.getTaxonomyWriter());  TaxonomyReader taxoReader=runData.getTaxonomyReader();  assertNotNull("taxo reader was not opened",taxoReader);  assertTrue("nothing was added to the taxnomy (expecting root and at least one addtional category)",taxoReader.getSize() > 1);  taxoReader.close();}  }
class C{  public TreeNode deserialize(String data){  this.data=data;  return desHelper();}  }
class C{  public void reconfigure(SQLiteDatabaseConfiguration configuration){  if (configuration == null) {    throw new IllegalArgumentException("configuration must not be null.");  }synchronized (mLock) {    throwIfClosedLocked();    boolean walModeChanged=((configuration.openFlags ^ mConfiguration.openFlags) & SQLiteDatabase.ENABLE_WRITE_AHEAD_LOGGING) != 0;    if (walModeChanged) {      if (!mAcquiredConnections.isEmpty()) {        throw new IllegalStateException("Write Ahead Logging (WAL) mode cannot " + "be enabled or disabled while there are transactions in " + "progress.  Finish all transactions and release all active "+ "database connections first.");      }      closeAvailableNonPrimaryConnectionsAndLogExceptionsLocked();      assert mAvailableNonPrimaryConnections.isEmpty();    }    boolean foreignKeyModeChanged=configuration.foreignKeyConstraintsEnabled != mConfiguration.foreignKeyConstraintsEnabled;    if (foreignKeyModeChanged) {      if (!mAcquiredConnections.isEmpty()) {        throw new IllegalStateException("Foreign Key Constraints cannot " + "be enabled or disabled while there are transactions in " + "progress.  Finish all transactions and release all active "+ "database connections first.");      }    }    if (mConfiguration.openFlags != configuration.openFlags) {      if (walModeChanged) {        closeAvailableConnectionsAndLogExceptionsLocked();      }      SQLiteConnection newPrimaryConnection=openConnectionLocked(configuration,true);      closeAvailableConnectionsAndLogExceptionsLocked();      discardAcquiredConnectionsLocked();      mAvailablePrimaryConnection=newPrimaryConnection;      mConfiguration.updateParametersFrom(configuration);      setMaxConnectionPoolSizeLocked();    } else {      mConfiguration.updateParametersFrom(configuration);      setMaxConnectionPoolSizeLocked();      closeExcessConnectionsAndLogExceptionsLocked();      reconfigureAllConnectionsLocked();    }    wakeConnectionWaitersLocked();  }}  }
class C{  private int readField(final ClassVisitor classVisitor,final Context context,int u){  char[] c=context.buffer;  int access=readUnsignedShort(u);  String name=readUTF8(u + 2,c);  String desc=readUTF8(u + 4,c);  u+=6;  String signature=null;  int anns=0;  int ianns=0;  int tanns=0;  int itanns=0;  Object value=null;  Attribute attributes=null;  for (int i=readUnsignedShort(u); i > 0; --i) {    String attrName=readUTF8(u + 2,c);    if ("ConstantValue".equals(attrName)) {      int item=readUnsignedShort(u + 8);      value=item == 0 ? null : readConst(item,c);    } else     if (SIGNATURES && "Signature".equals(attrName)) {      signature=readUTF8(u + 8,c);    } else     if ("Deprecated".equals(attrName)) {      access|=Opcodes.ACC_DEPRECATED;    } else     if ("Synthetic".equals(attrName)) {      access|=Opcodes.ACC_SYNTHETIC | ClassWriter.ACC_SYNTHETIC_ATTRIBUTE;    } else     if (ANNOTATIONS && "RuntimeVisibleAnnotations".equals(attrName)) {      anns=u + 8;    } else     if (ANNOTATIONS && "RuntimeVisibleTypeAnnotations".equals(attrName)) {      tanns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleAnnotations".equals(attrName)) {      ianns=u + 8;    } else     if (ANNOTATIONS && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {      itanns=u + 8;    } else {      Attribute attr=readAttribute(context.attrs,attrName,u + 8,readInt(u + 4),c,-1,null);      if (attr != null) {        attr.next=attributes;        attributes=attr;      }    }    u+=6 + readInt(u + 4);  }  u+=2;  FieldVisitor fv=classVisitor.visitField(access,name,desc,signature,value);  if (fv == null) {    return u;  }  if (ANNOTATIONS && anns != 0) {    for (int i=readUnsignedShort(anns), v=anns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,fv.visitAnnotation(readUTF8(v,c),true));    }  }  if (ANNOTATIONS && ianns != 0) {    for (int i=readUnsignedShort(ianns), v=ianns + 2; i > 0; --i) {      v=readAnnotationValues(v + 2,c,true,fv.visitAnnotation(readUTF8(v,c),false));    }  }  if (ANNOTATIONS && tanns != 0) {    for (int i=readUnsignedShort(tanns), v=tanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,fv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),true));    }  }  if (ANNOTATIONS && itanns != 0) {    for (int i=readUnsignedShort(itanns), v=itanns + 2; i > 0; --i) {      v=readAnnotationTarget(context,v);      v=readAnnotationValues(v + 2,c,true,fv.visitTypeAnnotation(context.typeRef,context.typePath,readUTF8(v,c),false));    }  }  while (attributes != null) {    Attribute attr=attributes.next;    attributes.next=null;    fv.visitAttribute(attributes);    attributes=attr;  }  fv.visitEnd();  return u;}  }
class C{  protected void validateSource(Factory factory) throws ApiException {  String type=factory.getSource().getProject().getType();  String location=factory.getSource().getProject().getLocation();  String parameterTypeName="source.project.type";  String parameterLocationName="source.project.location";  if (!("git".equals(type) || "esbwso2".equals(type))) {    throw new ConflictException("Parameter '" + parameterTypeName + "' has illegal value.");  }  if (isNullOrEmpty(location)) {    throw new ConflictException(format(FactoryConstants.PARAMETRIZED_ILLEGAL_PARAMETER_VALUE_MESSAGE,parameterLocationName,location));  } else {    try {      URLDecoder.decode(location,"UTF-8");    } catch (    IllegalArgumentException|UnsupportedEncodingException e) {      throw new ConflictException(format(FactoryConstants.PARAMETRIZED_ILLEGAL_PARAMETER_VALUE_MESSAGE,parameterLocationName,location));    }  }}  }
class C{  public QuadBuilder addVertexInferUV(Vec3d pos){  int relIndex=this.vertices.size() % 4;  float u=0.0F;  float v=0.0F;switch (relIndex) {default :case 0:    break;case 1:  v=16.0F;break;case 2:u=16.0F;v=16.0F;break;case 3:u=16.0F;break;}this.vertices.add(new Vertex(pos,u,v,this.sprite,this.switchUV,this.transformation,this.color,this.normal));return this;}  }
class C{  public static ReilInstruction createJcc(final Address address,final ReilOperand jumpCondition,final ReilOperand jumpTarget){  return new ReilInstruction(address,ReilMnemonics.JCC,jumpCondition,ReilOperand.EMPTY_OPERAND,jumpTarget);}  }
class C{  private void readObject(java.io.ObjectInputStream ois) throws IOException, ClassNotFoundException {  CertificateFactory cf;  Hashtable<String,CertificateFactory> cfs=null;  ois.defaultReadObject();  int size=ois.readInt();  if (size > 0) {    cfs=new Hashtable<String,CertificateFactory>(3);    this.certs=new java.security.cert.Certificate[size];  }  for (int i=0; i < size; i++) {    String certType=ois.readUTF();    if (cfs.containsKey(certType)) {      cf=cfs.get(certType);    } else {      try {        cf=CertificateFactory.getInstance(certType);      } catch (      CertificateException ce) {        throw new ClassNotFoundException("Certificate factory for " + certType + " not found");      }      cfs.put(certType,cf);    }    byte[] encoded=null;    try {      encoded=new byte[ois.readInt()];    } catch (    OutOfMemoryError oome) {      throw new IOException("Certificate too big");    }    ois.readFully(encoded);    ByteArrayInputStream bais=new ByteArrayInputStream(encoded);    try {      this.certs[i]=cf.generateCertificate(bais);    } catch (    CertificateException ce) {      throw new IOException(ce.getMessage());    }    bais.close();  }  try {    this.signers=((CodeSigner[])ois.readObject()).clone();  } catch (  IOException ioe) {  }}  }
class C{  protected void updateTemplate(File directory,FileFilter filter,EditPage edit){  File[] children=directory.listFiles(filter);  for (  File child : children) {    if (!child.getName().equals(PageInstance.DETAIL)) {      try {        Page page=DispatcherLogic.getPage(child);        page.getLayout().setTemplate(edit.template);        page.getDetailLayout().setTemplate(edit.detailTemplate);        DispatcherLogic.savePage(child,page);      } catch (      Exception e) {        logger.warn("Could not set template of " + child.getAbsolutePath(),e);      }    }    updateTemplate(child,filter,edit);  }}  }
class C{  public String mapMethodName(String owner,String name,String desc){  return name;}  }
class C{  public int score(IGameState state,IPlayer ip){  TicTacToeState tttState=(TicTacToeState)state;  TicTacToeBoard board=tttState.board();  Player p=(Player)ip;  int n=numInRow(board,3,p.getOpponentMark());  if (n > 0) {    return MoveEvaluation.minimum();  }  n=numInRow(board,3,p.getMark());  if (n > 0) {    return MoveEvaluation.maximum();  }  int n1=availableRow(board,p.getMark());  int n2=availableRow(board,p.getOpponentMark());  return n1 - n2;}  }
class C{  private void pan(){  if (isHorizontal())   pan(startRange,getPositionValue(start.x,false),getPositionValue(end.x,false)); else   pan(startRange,getPositionValue(start.y,false),getPositionValue(end.y,false));}  }
class C{  public void useUpperCaseForComparisons(boolean useUpperCaseForComparisons){  if (this.useUpperCaseForComparisons != useUpperCaseForComparisons) {    this.useUpperCaseForComparisons=useUpperCaseForComparisons;    this.setNameForComparisons(null);  }}  }
class C{  private void animatePropertyBy(int constantName,float byValue){  float fromValue=getValue(constantName);  animatePropertyBy(constantName,fromValue,byValue);}  }
class C{  public StandardPieSectionLabelGenerator(String labelFormat){  this(labelFormat,NumberFormat.getNumberInstance(),NumberFormat.getPercentInstance());}  }
class C{  public long count(){  return xStats.count();}  }
class C{  public void add(int id,String name,String val){  FolderTokenExtFld fld;  fld=new FolderTokenExtFld(id,name,val);  m_extFlds.add(fld);}  }
class C{  public void unregisterOnSharedPreferenceChangeListener(SharedPreferences.OnSharedPreferenceChangeListener listener){  preferences.unregisterOnSharedPreferenceChangeListener(listener);}  }
class C{  private File createNewLogFile(String basename) throws IOException {  return XmlConfigUtils.createNewXmlFile(basename);}  }
class C{  ScheduledFutureTask(Runnable r,V result,long ns){  super(r,result);  this.time=ns;  this.period=0;  this.sequenceNumber=sequencer.getAndIncrement();}  }
class C{  @Override public final int support(){  return m_ruleSupCounter;}  }
class C{  public static ByteBuffer ensureCapacity(ByteBuffer buff,int len){  len+=1024;  if (buff.remaining() > len) {    return buff;  }  return grow(buff,len);}  }
class C{  public static <T>ObjectAnimator ofInt(T target,Property<T,Integer> property,int... values){  ObjectAnimator anim=new ObjectAnimator(target,property);  anim.setIntValues(values);  return anim;}  }
class C{  protected static String encode(final String value){  return UriUtils.encode(value);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  mNum=getArguments() != null ? getArguments().getInt("num") : 1;}  }
class C{  public View wholeTab(){  return completeView;}  }
class C{  public Node(final char[] a,final int offset,final int length,final boolean isWord,final int numNodes){  path=new char[length];  System.arraycopy(a,offset,path,0,length);  this.isWord=isWord;  this.numNodes=numNodes;}  }
class C{  public BaseType pointedToBy(){  return pointedToBy;}  }
class C{  public SimpleColorMap(double minLevel,double maxLevel,Color minColor,Color maxColor){  setLevels(minLevel,maxLevel,minColor,maxColor);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (not: ");  result.append(not);  result.append(')');  return result.toString();}  }
class C{  private static void applyOpenSSLFix() throws SecurityException {  if ((Build.VERSION.SDK_INT < VERSION_CODE_JELLY_BEAN) || (Build.VERSION.SDK_INT > VERSION_CODE_JELLY_BEAN_MR2)) {    return;  }  try {    Class.forName("org.apache.harmony.xnet.provider.jsse.NativeCrypto").getMethod("RAND_seed",byte[].class).invoke(null,generateSeed());    int bytesRead=(Integer)Class.forName("org.apache.harmony.xnet.provider.jsse.NativeCrypto").getMethod("RAND_load_file",String.class,long.class).invoke(null,"/dev/urandom",1024);    if (bytesRead != 1024) {      throw new IOException("Unexpected number of bytes read from Linux PRNG: " + bytesRead);    }  } catch (  Exception e) {    throw new SecurityException("Failed to seed OpenSSL PRNG",e);  }}  }
class C{  public static CompiereColor showDialog(Dialog owner,CompiereColor color){  ColorEditor cce=new ColorEditor(owner,color);  if (cce.isSaved())   return cce.getColor();  return color;}  }
class C{  public void testShiftLeft5(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=-1;  int number=45;  byte rBytes[]={-49,-8,-13,96,41,116,-38,84,-97,-127,-37,-100,-64,0,0,0,0,0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.shiftLeft(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public void testLoggingDisabledSamplingDisabled() throws Exception {  sampling=false;  startUp();  assert !logEnabled();}  }
class C{  public mat4 inverted(){  mat4 result=new mat4(this);  mat4_util_inplace_invert(result.m);  return result;}  }
class C{  @SuppressWarnings("unchecked") public <ContainingType extends MessageLite>GeneratedMessageLite.GeneratedExtension<ContainingType,?> findLiteExtensionByNumber(final ContainingType containingTypeDefaultInstance,final int fieldNumber){  return (GeneratedMessageLite.GeneratedExtension<ContainingType,?>)extensionsByNumber.get(new ObjectIntPair(containingTypeDefaultInstance,fieldNumber));}  }
class C{  public static void deleteDirectory(final File directory){  final File[] filesInTestDir=directory.listFiles();  if (filesInTestDir != null) {    for (    final File eachFile : filesInTestDir) {      eachFile.delete();    }  }  directory.delete();}  }
class C{  public static void main(String argv[]) throws Exception {  PingLauncher launcher=new PingLauncher();  try {    launcher.process(argv);  } catch (  Throwable e) {    logger.fatal("ERROR: " + e.getMessage(),e);  }  exitWithSuccess();}  }
class C{  public void onPinch(long time,float x0,float y0,float x1,float y1,boolean firstEvent){  if ((mOverviewAnimationType != OverviewAnimationType.START_PINCH && mOverviewAnimationType != OverviewAnimationType.NONE) || mStackTabs == null) {    return;  }  if (mPinch0TabIndex < 0)   startAnimation(time,OverviewAnimationType.START_PINCH);  boolean inverse=(mCurrentMode == Orientation.PORTRAIT) ? y0 > y1 : LocalizationUtils.isLayoutRtl() ? (x0 <= x1) : (x0 > x1);  float pinch0X=inverse ? x1 : x0;  float pinch0Y=inverse ? y1 : y0;  float pinch1X=inverse ? x0 : x1;  float pinch1Y=inverse ? y0 : y1;  float pinch0Offset=(mCurrentMode == Orientation.PORTRAIT) ? pinch0Y : LocalizationUtils.isLayoutRtl() ? -pinch0X : pinch0X;  float pinch1Offset=(mCurrentMode == Orientation.PORTRAIT) ? pinch1Y : LocalizationUtils.isLayoutRtl() ? -pinch1X : pinch1X;  if (firstEvent) {    mPinch0TabIndex=-1;    mPinch1TabIndex=-1;    mScrollingTab=null;    commitDiscard(time,false);  }  int pinch0TabIndex=mPinch0TabIndex;  int pinch1TabIndex=mPinch1TabIndex;  if (mPinch0TabIndex < 0) {    pinch0TabIndex=getTabIndexAtPositon(pinch0X,pinch0Y);    pinch1TabIndex=getTabIndexAtPositon(pinch1X,pinch1Y);    if (pinch0TabIndex < 0 || pinch1TabIndex < 0) {      pinch0TabIndex=-1;      pinch1TabIndex=-1;    }  }  if (pinch0TabIndex >= 0 && mPinch0TabIndex == pinch0TabIndex && mPinch1TabIndex == pinch1TabIndex) {    final float minScrollTarget=getMinScroll(false);    final float maxScrollTarget=getMaxScroll(false);    final float oldScrollTarget=MathUtils.clamp(mScrollTarget,minScrollTarget,maxScrollTarget);    if (pinch0TabIndex >= pinch1TabIndex) {      float screenDelta0=pinch0Offset - mLastPinch0Offset;      if (pinch0TabIndex == 0) {        setScrollTarget(oldScrollTarget + screenDelta0,false);      } else {        float tab0ScrollSpace=mStackTabs[pinch0TabIndex].getScrollOffset() + oldScrollTarget;        float tab0Screen=scrollToScreen(tab0ScrollSpace);        float tab0ScrollFinal=screenToScroll(tab0Screen + screenDelta0);        setScrollTarget(tab0ScrollFinal - mStackTabs[pinch0TabIndex].getScrollOffset(),false);      }    } else {      float screenDelta0=pinch0Offset - mLastPinch0Offset;      float tab0ScreenBefore=approxScreen(mStackTabs[pinch0TabIndex],oldScrollTarget);      float tab0ScreenAfter=tab0ScreenBefore + screenDelta0;      float screenDelta1=pinch1Offset - mLastPinch1Offset;      float tab1ScreenBefore=approxScreen(mStackTabs[pinch1TabIndex],oldScrollTarget);      float tab1ScreenAfter=tab1ScreenBefore + screenDelta1;      float globalScrollBefore=screenToScroll(tab0ScreenBefore);      float globalScrollAfter=screenToScroll((tab0ScreenAfter + tab0ScreenBefore) / 2);      setScrollTarget(oldScrollTarget + globalScrollAfter - globalScrollBefore,true);      float minScreen=tab0ScreenAfter;      float maxScreen=tab0ScreenAfter;      for (int i=pinch0TabIndex; i <= pinch1TabIndex; i++) {        float screenBefore=approxScreen(mStackTabs[i],oldScrollTarget);        float t=(screenBefore - tab0ScreenBefore) / (tab1ScreenBefore - tab0ScreenBefore);        float screenAfter=(1 - t) * tab0ScreenAfter + t * tab1ScreenAfter;        screenAfter=Math.max(minScreen,screenAfter);        screenAfter=Math.min(maxScreen,screenAfter);        minScreen=screenAfter + StackTab.sStackedTabVisibleSize;        maxScreen=screenAfter + mStackTabs[i].getSizeInScrollDirection(mCurrentMode);        float newScrollOffset=screenToScroll(screenAfter) - mScrollTarget;        mStackTabs[i].setScrollOffset(newScrollOffset);      }      float delta1=tab1ScreenAfter - tab1ScreenBefore;      for (int i=pinch1TabIndex + 1; i < mStackTabs.length; i++) {        delta1/=2;        float screenAfter=approxScreen(mStackTabs[i],oldScrollTarget) + delta1;        screenAfter=Math.max(minScreen,screenAfter);        screenAfter=Math.min(maxScreen,screenAfter);        minScreen=screenAfter + StackTab.sStackedTabVisibleSize;        maxScreen=screenAfter + mStackTabs[i].getSizeInScrollDirection(mCurrentMode);        mStackTabs[i].setScrollOffset(screenToScroll(screenAfter) - mScrollTarget);      }      minScreen=tab0ScreenAfter;      maxScreen=tab0ScreenAfter;      float posScreen=tab0ScreenAfter;      float delta0=tab0ScreenAfter - tab0ScreenBefore;      for (int i=pinch0TabIndex - 1; i > 0; i--) {        delta0/=2;        minScreen=posScreen - mStackTabs[i].getSizeInScrollDirection(mCurrentMode);        maxScreen=posScreen - StackTab.sStackedTabVisibleSize;        float screenAfter=approxScreen(mStackTabs[i],oldScrollTarget) + delta0;        screenAfter=Math.max(minScreen,screenAfter);        screenAfter=Math.min(maxScreen,screenAfter);        mStackTabs[i].setScrollOffset(screenToScroll(screenAfter) - mScrollTarget);      }    }  }  mPinch0TabIndex=pinch0TabIndex;  mPinch1TabIndex=pinch1TabIndex;  mLastPinch0Offset=pinch0Offset;  mLastPinch1Offset=pinch1Offset;  mEvenOutProgress=0.0f;  requestUpdate();}  }
class C{  public boolean hasShortName(){  return hasExtension(ShortName.class);}  }
class C{  public Yaml(BaseConstructor constructor,Representer representer,DumperOptions dumperOptions,Resolver resolver){  if (!constructor.isExplicitPropertyUtils()) {    constructor.setPropertyUtils(representer.getPropertyUtils());  } else   if (!representer.isExplicitPropertyUtils()) {    representer.setPropertyUtils(constructor.getPropertyUtils());  }  this.constructor=constructor;  representer.setDefaultFlowStyle(dumperOptions.getDefaultFlowStyle());  representer.setDefaultScalarStyle(dumperOptions.getDefaultScalarStyle());  representer.getPropertyUtils().setAllowReadOnlyProperties(dumperOptions.isAllowReadOnlyProperties());  representer.setTimeZone(dumperOptions.getTimeZone());  this.representer=representer;  this.dumperOptions=dumperOptions;  this.resolver=resolver;  this.name="Yaml:" + System.identityHashCode(this);}  }
class C{  public static List<org.oscm.internal.vo.VOUsageLicense> convertToUpVOUsageLicense(List<org.oscm.vo.VOUsageLicense> oldVO){  if (oldVO == null) {    return null;  }  List<org.oscm.internal.vo.VOUsageLicense> newVO=new ArrayList<org.oscm.internal.vo.VOUsageLicense>();  for (  org.oscm.vo.VOUsageLicense tmp : oldVO) {    newVO.add(convertToUp(tmp));  }  return newVO;}  }
class C{  public static boolean hasWifiRadio(Context context){  if (TEST_RADIOS) {    return SystemProperties.get(TEST_RADIOS_PROP).contains("wifi");  }  final ConnectivityManager conn=ConnectivityManager.from(context);  return conn.isNetworkSupported(TYPE_WIFI);}  }
class C{  public CursorResponseMessage(CursorResponseMessage other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  this.cursorId=other.cursorId;  if (other.isSetValues()) {    List<KeyedValues> __this__values=new ArrayList<KeyedValues>();    for (    KeyedValues other_element : other.values) {      __this__values.add(new KeyedValues(other_element));    }    this.values=__this__values;  }}  }
class C{  @Override public Iterator<Vertex> readVertices(final InputStream inputStream,final Function<Attachable<Vertex>,Vertex> vertexAttachMethod,final Function<Attachable<Edge>,Edge> edgeAttachMethod,final Direction attachEdgesOfThisDirection) throws IOException {  throw Io.Exceptions.readerFormatIsForFullGraphSerializationOnly(this.getClass());}  }
class C{  @POST @Path("internal/cluster/poweroff") @Produces({MediaType.APPLICATION_JSON}) public Response internalPowerOffCluster(@QueryParam("force") String forceSet) throws Exception {  _log.info("Poweroff cluster");  return powerOffCluster(forceSet);}  }
class C{  protected static void loadStandardWidgets(){  for (  Class<?> clz : ModelScreenWidget.class.getClasses()) {    try {      if (ModelScreenWidget.class.isAssignableFrom(clz) && (clz.getModifiers() & Modifier.ABSTRACT) == 0) {        try {          Field field=clz.getField("TAG_NAME");          Object fieldObject=field.get(null);          if (fieldObject != null) {            Class<? extends ModelScreenWidget> widgetClass=UtilGenerics.cast(clz);            registerScreenWidget(fieldObject.toString(),widgetClass);          }        } catch (        Exception e) {        }      }    } catch (    Exception e) {      Debug.logError(e,module);    }  }  try {    registerScreenWidget("iterate-section",IterateSectionWidget.class);  } catch (  Exception e) {    Debug.logError(e,module);  }}  }
class C{  public void updateDataset(CandleDataset source,int seriesIndex,boolean newBar){  if (source == null) {    throw new IllegalArgumentException("Null source (CandleDataset).");  }  for (int x=0; x < this.getSeriesCount(); x++) {    MACDSeries series=this.getSeries(x);    series.updateSeries(source.getSeries(seriesIndex),source.getSeries(seriesIndex).getItemCount() - 1,newBar);  }}  }
class C{  public void addProperty(String key,Object value){  ri.addProperty(key,value);}  }
class C{  final public void disable_tracing(){}  }
class C{  public CollectionModel(Collection collection,BeansWrapper wrapper){  super(collection,wrapper);}  }
class C{  @Override public void close() throws IOException {  eos=true;  super.close();}  }
class C{  public void handleCacheCloseEvent(SystemMemberCacheEvent event){  String memberId=event.getMemberId();  SystemMemberJmx systemMemberJmx=(SystemMemberJmx)findCacheOrAppVmById(memberId);  if (systemMemberJmx != null) {    systemMemberJmx.handleCacheClose(event);  }}  }
class C{  public final Cancellation subscribe(){  return subscribe(null,null,null);}  }
class C{  @Override public void add(final Reader input,final String baseURI,final RDFFormat format,final Resource... c) throws IOException, RDFParseException, RepositoryException {  final AddOp op=new AddOp(input,format);  add(op,c);}  }
class C{  public Binominal(){  super("statistical.binom",2,Ontology.INTEGER);}  }
class C{  public IgniteInterruptedException(String msg,InterruptedException cause){  super(msg,cause);}  }
class C{  public void subscribe(String clientHandle,String topic,int qos,String invocationContext,String activityToken){  MqttConnection client=getConnection(clientHandle);  client.subscribe(topic,qos,invocationContext,activityToken);}  }
class C{  public static JSONObject createEmitOpenMessage(List<String> messagesIds,String userId){  JSONObject obj=new JSONObject();  try {    JSONArray jsonArray=new JSONArray();    for (    String item : messagesIds) {      jsonArray.put(item);    }    obj.put("messageIDs",jsonArray);    obj.put("userID",userId);    return obj;  } catch (  JSONException e) {    e.printStackTrace();  }  return obj;}  }
class C{  public boolean equals(XMLString obj2){  if (this == obj2) {    return true;  }  int n=m_length;  if (n == obj2.length()) {    FastStringBuffer fsb=fsb();    int i=m_start;    int j=0;    while (n-- != 0) {      if (fsb.charAt(i) != obj2.charAt(j)) {        return false;      }      i++;      j++;    }    return true;  }  return false;}  }
class C{  public static String toBits(final long x){  final StringBuilder sb=new StringBuilder();  long t=x;  boolean first=false;  for (int i=0; i < 64; i++) {    if (t < 0) {      sb.append("1");      first=true;    } else     if (first) {      sb.append("0");    }    t=t << 1;  }  assert t == 0;  return sb.toString();}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildMineArea(zone);}  }
class C{  private FileSystem fileSystemForUser(){  String user=IgfsUserContext.currentUser();  if (F.isEmpty(user))   user=IgfsUtils.fixUserName(dfltUsrName);  assert !F.isEmpty(user);  try {    return (FileSystem)factory.get(user);  } catch (  IOException ioe) {    throw new IgniteException(ioe);  }}  }
class C{  public final void testVerifyPublicKey2() throws InvalidKeyException, CertificateException, NoSuchAlgorithmException, NoSuchProviderException, SignatureException, InvalidAlgorithmParameterException, IOException {  Certificate c1=new MyCertificate("TEST_TYPE",testEncoding);  c1.verify(null);  cert.verify(cert.getPublicKey());  PublicKey k=cert.getPublicKey();  MyModifiablePublicKey changedEncoding=new MyModifiablePublicKey(k);  changedEncoding.setEncoding(new byte[cert.getEncoded().length - 1]);  try {    cert.verify(c1.getPublicKey());    fail();  } catch (  InvalidKeyException expected) {  }  try {    cert.verify(changedEncoding);    fail();  } catch (  Exception expected) {  }}  }
class C{  @Override protected void storeState(){  storedLogSCCSLikelihood=logSCCSLikelihood;  storedLogSCCSPrior=logSCCSPrior;  storedBetaChanged=betaChanged;  storedPrecisionChanged=precisionChanged;  storedPrecision=precision.getParameterValue(0);}  }
class C{  private void readUnlockedThread(){  final long thisThreadId=Thread.currentThread().getId();  final Integer entry=threadLockMap.get(thisThreadId);  assert entry != null;  if (entry.intValue() == 1) {    threadLockMap.remove(thisThreadId);  } else {    threadLockMap.put(thisThreadId,entry.intValue() - 1);  }}  }
class C{  public boolean isMultiValued(final String name){  return metadata.get(name) != null && metadata.get(name).length > 1;}  }
class C{  protected Segment createSegment(List newPoints){  return new Segment(newPoints);}  }
class C{  public static ArrayList<Page> pageCreatorButtons(ArrayList<Page> pages,Item manualType){  ArrayList<Page> newPages=new ArrayList<>();  int pageAmount=pages.size();  int times=0;  while (pageAmount > 0) {    ArrayList<Page> pagesTemp=new ArrayList<>();    pagesTemp.addAll(pages.subList(7 * times,(pageAmount > 7 ? 7 + 7 * times : 7 * times + pageAmount)));    int height=0;    ArrayList<ManualWidgetBase> widgets=new ArrayList<>();    for (    Page page : pagesTemp) {      widgets.add(new ButtonWidget(15,10 + height,page));      height+=20;    }    newPages.add(new Page("index" + times,(ArrayList<ManualWidgetBase>)widgets.clone(),false,manualType));    widgets.clear();    pagesTemp.clear();    pageAmount-=7;    times++;  }  return newPages;}  }
class C{  public RRset(){  rrs=new ArrayList(1);  nsigs=0;  position=0;}  }
class C{  public static boolean isInJail(final Player inmate){  final StendhalRPZone zone=inmate.getZone();  if ((zone != null) && zone.equals(jailzone)) {    for (    final Rectangle cellBlock : cellBlocks) {      if (cellBlock.contains(inmate.getX(),inmate.getY())) {        return true;      }    }  }  return false;}  }
class C{  @HLEFunction(nid=0xB58E61B7,version=150) public int sceNetAdhocMatchingSetHelloOpt(@CheckArgument("checkMatchingId") int matchingId,int optLen,@CanBeNull TPointer optData){  if (log.isTraceEnabled()) {    log.trace(String.format("Hello opt data: %s",Utilities.getMemoryDump(optData.getAddress(),optLen)));  }  matchingObjects.get(matchingId).setHelloOpt(optLen,optData.getAddress());  return 0;}  }
class C{  public void skip(long n){  if (!hasNext()) {    return;  }  if (n < 10) {    while (n-- > 0) {      fetchNext();    }    return;  }  long index=map.getKeyIndex(current);  K k=map.getKey(index + n);  pos=null;  min(root,k);  fetchNext();}  }
class C{  public List<List<Object>> retrieveEntityValues(String typeId,String[] propertyNames){  return retrieveEntityValues(typeId,propertyNames,new Class[0]);}  }
class C{  public static void decodeFileToFile(String infile,String outfile) throws java.io.IOException {  byte[] decoded=Base64.decodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(decoded);  }  finally {    try {      if (out != null) {        out.close();      }    } catch (    Exception ignored) {    }  }}  }
class C{  protected ASN1Primitive buildObject(int tag,int tagNo,int length) throws IOException {  boolean isConstructed=(tag & CONSTRUCTED) != 0;  DefiniteLengthInputStream defIn=new DefiniteLengthInputStream(this,length);  if ((tag & APPLICATION) != 0) {    return new DERApplicationSpecific(isConstructed,tagNo,defIn.toByteArray());  }  if ((tag & TAGGED) != 0) {    return new ASN1StreamParser(defIn).readTaggedObject(isConstructed,tagNo);  }  if (isConstructed) {switch (tagNo) {case OCTET_STRING:      ASN1EncodableVector v=buildDEREncodableVector(defIn);    ASN1OctetString[] strings=new ASN1OctetString[v.size()];  for (int i=0; i != strings.length; i++) {    strings[i]=(ASN1OctetString)v.get(i);  }return new BEROctetString(strings);case SEQUENCE:if (lazyEvaluate) {return new LazyEncodedSequence(defIn.toByteArray());} else {return DERFactory.createSequence(buildDEREncodableVector(defIn));}case SET:return DERFactory.createSet(buildDEREncodableVector(defIn));case EXTERNAL:return new DERExternal(buildDEREncodableVector(defIn));default :throw new IOException("unknown tag " + tagNo + " encountered");}}return createPrimitiveDERObject(tagNo,defIn,tmpBuffers);}  }
class C{  private File writeToFile(final InputStream uploadedInputStream,final String fileName){  final File file=new File(fileName);  try {    final OutputStream out=new FileOutputStream(new File(fileName));    int read=0;    final byte[] bytes=new byte[1024];    while ((read=uploadedInputStream.read(bytes)) != -1)     out.write(bytes,0,read);    out.flush();    out.close();  } catch (  final IOException e) {  }  return file;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected HARegionQueue createHARegionQueue(String name,HARegionQueueAttributes attrs) throws IOException, ClassNotFoundException, CacheException, InterruptedException {  AttributesFactory factory=new AttributesFactory();  factory.setDataPolicy(DataPolicy.REPLICATE);  factory.setScope(Scope.DISTRIBUTED_ACK);  HARegionQueue regionqueue=HARegionQueue.getHARegionQueueInstance(name,cache,attrs,HARegionQueue.NON_BLOCKING_HA_QUEUE,false);  return regionqueue;}  }
class C{  public _WeaveLexer(java.io.Reader in){  this.zzReader=in;}  }
class C{  private void processIcons(SolrInputDocument doc,boolean allAttr,LinkedHashMap<DigestURL,String> inboundLinks,LinkedHashMap<DigestURL,String> outboundLinks,Collection<IconEntry> icons){  if (icons != null) {    final List<String> protocols=new ArrayList<String>(icons.size());    final String[] sizes=new String[icons.size()];    final String[] stubs=new String[icons.size()];    final String[] rels=new String[icons.size()];    int i=0;    for (    final IconEntry ie : icons) {      final DigestURL url=ie.getUrl();      if (inboundLinks != null) {        inboundLinks.remove(url);      }      if (outboundLinks != null) {        outboundLinks.remove(url);      }      String protocol=url.getProtocol();      protocols.add(protocol);      sizes[i]=ie.sizesToString();      stubs[i]=url.toString().substring(protocol.length() + 3);      rels[i]=ie.relToString();      i++;    }    if (allAttr || contains(CollectionSchema.icons_protocol_sxt)) {      add(doc,CollectionSchema.icons_protocol_sxt,protocolList2indexedList(protocols));    }    if (allAttr || contains(CollectionSchema.icons_urlstub_sxt)) {      add(doc,CollectionSchema.icons_urlstub_sxt,stubs);    }    if (allAttr || contains(CollectionSchema.icons_rel_sxt)) {      add(doc,CollectionSchema.icons_rel_sxt,rels);    }    if (allAttr || contains(CollectionSchema.icons_sizes_sxt)) {      add(doc,CollectionSchema.icons_sizes_sxt,sizes);    }  }}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.rosePaint=SerialUtilities.readPaint(stream);  this.roseCenterPaint=SerialUtilities.readPaint(stream);  this.roseHighlightPaint=SerialUtilities.readPaint(stream);}  }
class C{  public final void sendMessage(int what){  SmHandler smh=mSmHandler;  if (smh == null)   return;  smh.sendMessage(obtainMessage(what));}  }
class C{  public static void notWhitespace(final String str,final String name,final int maxLength){  if (StringUtils.isNullOrWhitespace(str) || str.length() > maxLength) {    final String message=String.format("%s cannot be null, empty, or whitespace, or have length greater than %d",name,maxLength);    throw new IllegalArgumentException(message);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.186 -0400",hash_original_method="DDA974D994A98517522781E48387F448",hash_generated_method="1686848766FE1B692A209C4625EB1817") public static String toString(URL url,Charset encoding) throws IOException {  InputStream inputStream=url.openStream();  try {    return toString(inputStream,encoding);  }  finally {    inputStream.close();  }}  }
class C{  public static long hash(long val){  return FNVhash64(val);}  }
class C{  public void testMoveRenameFileDestinationRoot() throws Exception {  IgfsPath file=new IgfsPath("/" + FILE.name());  create(igfs,paths(DIR,SUBDIR),paths(FILE));  igfs.rename(FILE,file);  checkExist(igfs,igfsSecondary,file);  checkNotExist(igfs,igfsSecondary,FILE);}  }
class C{  private static boolean isXLargeTablet(final Context context){  return (context.getResources().getConfiguration().screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_XLARGE;}  }
class C{  public Node<E> head(){  return head;}  }
class C{  public boolean isIconRowHeaderEnabled(){  for (int i=0; i < getComponentCount(); i++) {    if (getComponent(i) == iconArea) {      return true;    }  }  return false;}  }
class C{  @Override public String toString(){  return String.format("CubePos(%d, %d, %d)",cubeX,cubeY,cubeZ);}  }
class C{  public List<GenericDataDB> loadAllDeepFromCursor(Cursor cursor){  int count=cursor.getCount();  List<GenericDataDB> list=new ArrayList<GenericDataDB>(count);  if (cursor.moveToFirst()) {    if (identityScope != null) {      identityScope.lock();      identityScope.reserveRoom(count);    }    try {      do {        list.add(loadCurrentDeep(cursor,false));      } while (cursor.moveToNext());    }  finally {      if (identityScope != null) {        identityScope.unlock();      }    }  }  return list;}  }
class C{  public VLADBuilder(IndexReader reader,LireFeature lireFeature,int numDocsForVocabulary){  this.numDocsForVocabulary=numDocsForVocabulary;  this.reader=reader;  this.lireFeature=lireFeature;}  }
class C{  public void advanceProcessingTime(Instant newProcessingTime) throws Exception {  timerInternals.advanceProcessingTime(TimerCallback.NO_OP,newProcessingTime);}  }
class C{  @Override public synchronized int read(){  return pos < count ? buf[pos++] & 0xFF : -1;}  }
class C{  public static String toString(Properties props,String comment){  String result;  StringWriter writer;  result=null;  try {    writer=new StringWriter();    collapse(props).store(writer,comment);    writer.flush();    writer.close();    result=writer.toString();  } catch (  Exception e) {    result=null;    System.err.println("Failed to turn props into string: " + props);    e.printStackTrace();  }  return result;}  }
class C{  public static boolean isNotEmpty(double[] array){  return (array != null && array.length != 0);}  }
class C{  protected SVGGeneratorContext(Document domFactory){  setDOMFactory(domFactory);}  }
class C{  private void loadWorkflow(Properties ctx,int AD_Workflow_ID,HttpSession sess){  MWorkflow wf=new MWorkflow(ctx,AD_Workflow_ID,null);  MWFNode[] nodes=wf.getNodes(true,Env.getContextAsInt(ctx,"#AD_Client_ID"));  MWFNode wfn=null;  ArrayList nodes_ID=new ArrayList();  for (int i=0; i < nodes.length; i++) {    wfn=nodes[i];    nodes_ID.add(new Integer(wfn.getAD_WF_Node_ID()));  }  int imageMap[][]=generateImageMap(nodes_ID);  sess.setAttribute(WORKFLOW,wf);  sess.setAttribute(NODES,nodes);  sess.setAttribute(NODES_ID,nodes_ID);  sess.setAttribute(IMAGE_MAP,imageMap);  sess.setAttribute(ACTIVE_NODE,new Integer(-999));}  }
class C{  @SuppressWarnings("rawtypes") public static Map<String,String> parseKeyAndValueToMap(JSONObject sourceObj){  if (sourceObj == null) {    return null;  }  Map<String,String> keyAndValueMap=new HashMap<String,String>();  for (Iterator iter=sourceObj.keys(); iter.hasNext(); ) {    String key=(String)iter.next();    MapUtils.putMapNotEmptyKey(keyAndValueMap,key,getString(sourceObj,key,""));  }  return keyAndValueMap;}  }
class C{  public static RegionMap createVM(PlaceHolderDiskRegion owner,DiskStoreImpl ds,InternalRegionArguments internalRegionArgs){  RegionMap.Attributes ma=new RegionMap.Attributes();  ma.statisticsEnabled=owner.getStatisticsEnabled();  ma.loadFactor=owner.getLoadFactor();  ma.initialCapacity=owner.getInitialCapacity();  ma.concurrencyLevel=owner.getConcurrencyLevel();  if (owner.getLruAlgorithm() != 0) {    return new VMLRURegionMap(owner,ma,internalRegionArgs);  } else {    return new VMRegionMap(owner,ma,internalRegionArgs);  }}  }
class C{  public TarEntry(String name){  this(name,false);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.471 -0400",hash_original_method="2ECB3DE44318CC6265E9907690BC7DD5",hash_generated_method="D675EC37FA9255991C252D8C324462E8") public LineIterator(final Reader reader) throws IllegalArgumentException {  if (reader == null) {    throw new IllegalArgumentException("Reader must not be null");  }  if (reader instanceof BufferedReader) {    bufferedReader=(BufferedReader)reader;  } else {    bufferedReader=new BufferedReader(reader);  }}  }
class C{  public boolean hasValue(){  return value != null;}  }
class C{  public boolean overlaps(Bounds bounds){  return this.start == bounds.start || this.end == bounds.end || ((this.start < bounds.end) && (this.end > bounds.start));}  }
class C{  public boolean containsDuplicateFeatures(){  List<Feature> checkedFeatures=new LinkedList<Feature>();  for (  Feature f : features) {    for (    Feature f2 : checkedFeatures) {      if (f.equals(f2))       return true;    }    checkedFeatures.add(f);  }  return false;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_namednodemapsetnameditemthatexists.class,args);}  }
class C{  protected void fillNotificationParameters(final OrderEvent orderEvent,final String emailTemplateName,final Map<String,Object> params,final String... emailsAddresses){  if (StringUtils.isNotBlank(emailTemplateName)) {    final CustomerOrder customerOrder=orderEvent.getCustomerOrder();    for (    String emailAddr : emailsAddresses) {      final HashMap<String,Object> map=new HashMap<String,Object>();      if (params != null) {        map.putAll(params);      }      map.put(StandardMessageListener.SHOP_CODE,customerOrder.getShop().getCode());      map.put(StandardMessageListener.CUSTOMER_EMAIL,emailAddr);      map.put(StandardMessageListener.RESULT,true);      map.put(StandardMessageListener.ROOT,customerOrder);      map.put(StandardMessageListener.TEMPLATE_FOLDER,themeService.getMailTemplateChainByShopId(customerOrder.getShop().getShopId()));      map.put(StandardMessageListener.SHOP,customerOrder.getShop());      map.put(StandardMessageListener.CUSTOMER,customerOrder.getCustomer());      map.put(StandardMessageListener.SHIPPING_ADDRESS,customerOrder.getShippingAddressDetails());      map.put(StandardMessageListener.BILLING_ADDRESS,customerOrder.getBillingAddressDetails());      map.put(StandardMessageListener.TEMPLATE_NAME,emailTemplateName);      map.put(StandardMessageListener.LOCALE,customerOrder.getLocale());      if (orderEvent.getCustomerOrderDelivery() != null) {        final CustomerOrderDelivery delivery=orderEvent.getCustomerOrderDelivery();        map.put(StandardMessageListener.DELIVERY,delivery);        final I18NModel carrierName=new FailoverStringI18NModel(delivery.getCarrierSla().getCarrier().getDisplayName(),delivery.getCarrierSla().getCarrier().getName());        map.put(StandardMessageListener.DELIVERY_CARRIER,carrierName.getValue(customerOrder.getLocale()));        final I18NModel carrierSlaName=new FailoverStringI18NModel(delivery.getCarrierSla().getDisplayName(),delivery.getCarrierSla().getName());        map.put(StandardMessageListener.DELIVERY_CARRIER_SLA,carrierSlaName.getValue(customerOrder.getLocale()));        map.put(StandardMessageListener.DELIVERY_NUM,delivery.getDeliveryNum());        map.put(StandardMessageListener.DELIVERY_EXTERNAL_NUM,delivery.getRefNo());      } else {        final Map<String,String> carrier=new HashMap<String,String>();        final Map<String,String> carrierSla=new HashMap<String,String>();        for (        final CustomerOrderDelivery delivery : customerOrder.getDelivery()) {          final I18NModel carrierName=new FailoverStringI18NModel(delivery.getCarrierSla().getCarrier().getDisplayName(),delivery.getCarrierSla().getCarrier().getName());          carrier.put(delivery.getDeliveryNum(),carrierName.getValue(customerOrder.getLocale()));          final I18NModel carrierSlaName=new FailoverStringI18NModel(delivery.getCarrierSla().getDisplayName(),delivery.getCarrierSla().getName());          carrierSla.put(delivery.getDeliveryNum(),carrierSlaName.getValue(customerOrder.getLocale()));        }        map.put(StandardMessageListener.DELIVERY_CARRIER,carrier);        map.put(StandardMessageListener.DELIVERY_CARRIER_SLA,carrierSla);      }      sendNotification(map);    }  }}  }
class C{  public CombinedXYChart(XYMultipleSeriesDataset dataset,XYMultipleSeriesRenderer renderer,XYCombinedChartDef[] chartDefinitions){  super(dataset,renderer);  this.chartDefinitions=chartDefinitions;  int length=chartDefinitions.length;  mCharts=new XYChart[length];  for (int i=0; i < length; i++) {    try {      mCharts[i]=getXYChart(chartDefinitions[i].getType());    } catch (    Exception e) {    }    if (mCharts[i] == null) {      throw new IllegalArgumentException("Unknown chart type " + chartDefinitions[i].getType());    } else {      XYMultipleSeriesDataset newDataset=new XYMultipleSeriesDataset();      XYMultipleSeriesRenderer newRenderer=new XYMultipleSeriesRenderer();      for (      int seriesIndex : chartDefinitions[i].getSeriesIndex()) {        newDataset.addSeries(dataset.getSeriesAt(seriesIndex));        newRenderer.addSeriesRenderer(renderer.getSeriesRendererAt(seriesIndex));      }      newRenderer.setBarSpacing(renderer.getBarSpacing());      newRenderer.setPointSize(renderer.getPointSize());      mCharts[i].setDatasetRenderer(newDataset,newRenderer);    }  }}  }
class C{  private boolean checkOnline(){  if ((target == null) || (target.isGhost() && (sender.getAdminLevel() < AdministrationAction.getLevelForCommand("ghostmode")))) {    sender.sendPrivateText("No player named \"" + targetName + "\" is currently active.");    return false;  }  return true;}  }
class C{  public boolean isValid(){  Object oo=get_Value(COLUMNNAME_IsValid);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void methodReturn(ReturnOp retOp){  StackFrame calleeFrame=env.top();  env.pop();  StackFrame callerFrame=env.top();  if (retOp.hasOperand()) {    callerFrame.setResult(retOp.getOperand(calleeFrame));  }  nesting--;  pc=callerFrame.getSavedPc();  code=callerFrame.getSavedMethod();}  }
class C{  public PVector mult(PVector source,PVector target){  if (target == null) {    target=new PVector();  }  target.x=m00 * source.x + m01 * source.y + m02;  target.y=m10 * source.x + m11 * source.y + m12;  return target;}  }
class C{  private URL buildSettingsUrl(String username,String setting) throws IOException {  String userDomain=domain;  if (username.contains("@")) {    String[] matches=username.split("@");    username=matches[0];    userDomain=matches[1];  }  URL url=new URL(Constants.PROTOCOL + "://" + Constants.APPS_APIS_DOMAIN+ Constants.APPS_APIS_URL+ "/"+ userDomain+ "/"+ username+ "/"+ setting);  return url;}  }
class C{  public static <P,T extends AsyncTask<P,?,?>>void execute(T task){  execute(task,(P[])null);}  }
class C{  public static BufferedWriter newWriter(File file,Charset charset) throws FileNotFoundException {  checkNotNull(file);  checkNotNull(charset);  return new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file),charset));}  }
class C{  public static void markAsProcessing(ModelClient modelClient,DataObject target){  if (target instanceof DiscoveredSystemObject) {    DiscoveredSystemObject obj=(DiscoveredSystemObject)target;    obj.setDiscoveryStatus(DataCollectionJobStatus.IN_PROGRESS.name());    modelClient.save(obj);  }}  }
class C{  boolean isSSL(){  return ssl;}  }
class C{  public void resetExtremeGravityPSRs(){  extremeGravityRolls.removeAllElements();}  }
class C{  @Override public MultipleFileDownload downloadDirectory(String bucketName,String keyPrefix,File destinationDirectory,TransferManager transferManager){  LOGGER.debug("downloadDirectory(): bucketName = " + bucketName + ", keyPrefix = "+ keyPrefix+ ", destinationDirectory = "+ destinationDirectory);  MockS3Bucket mockS3Bucket=mockS3Buckets.get(bucketName);  List<Download> downloads=new ArrayList<>();  long totalBytes=0;  if (mockS3Bucket != null) {    for (    MockS3Object mockS3Object : mockS3Bucket.getObjects().values()) {      if (mockS3Object.getKey().startsWith(keyPrefix)) {        String filePath=destinationDirectory.getAbsolutePath() + "/" + mockS3Object.getKey();        File file=new File(filePath);        file.getParentFile().mkdirs();        try (FileOutputStream fileOutputStream=new FileOutputStream(file)){          LOGGER.debug("downloadDirectory(): Writing file " + file);          fileOutputStream.write(mockS3Object.getData());          totalBytes+=mockS3Object.getData().length;          downloads.add(new DownloadImpl(null,null,null,null,null,new GetObjectRequest(bucketName,mockS3Object.getKey()),file,mockS3Object.getObjectMetadata(),false));        } catch (        IOException e) {          throw new RuntimeException("Error writing to file " + file,e);        }      }    }  }  TransferProgress progress=new TransferProgress();  progress.setTotalBytesToTransfer(totalBytes);  progress.updateProgress(totalBytes);  MultipleFileDownloadImpl multipleFileDownload=new MultipleFileDownloadImpl(null,progress,null,keyPrefix,bucketName,downloads);  multipleFileDownload.setState(TransferState.Completed);  return multipleFileDownload;}  }
class C{  public static void d(String tag,String msg){  if (sLevel > LEVEL_DEBUG) {    return;  }  Log.d(tag,msg);}  }
class C{  @Override public ListStepsResult listStepsRequest(AmazonElasticMapReduceClient emrClient,ListStepsRequest listStepsRequest){  return emrClient.listSteps(listStepsRequest);}  }
class C{  public BMW384(){  super();}  }
class C{  public double nextDouble(double least,double bound){  if (least >= bound)   throw new IllegalArgumentException();  return nextDouble() * (bound - least) + least;}  }
class C{  public final Object elementAt(int i){  return m_map[i];}  }
class C{  public void addRow(Object[] row){  list.addRow(row);}  }
class C{  public Map<String,RawProtein<PfamHmmer3RawMatch>> process(Map<String,RawProtein<PfamHmmer3RawMatch>> proteinIdToRawMatchMap) throws IOException {  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("Pfam A Post Processing: Number of proteins being considered: " + ((proteinIdToRawMatchMap == null) ? 0 : proteinIdToRawMatchMap.size()));  }  if (clanData == null) {    clanData=clanFileParser.getClanData();  }  final Map<String,RawProtein<PfamHmmer3RawMatch>> proteinIdToRawProteinMap=new HashMap<String,RawProtein<PfamHmmer3RawMatch>>();  if (proteinIdToRawMatchMap == null) {    return proteinIdToRawProteinMap;  }  long startNanos=System.nanoTime();  SeedAlignmentDataRetriever.SeedAlignmentData seedAlignmentData=null;  if (seedAlignmentDataRetriever != null) {    seedAlignmentData=seedAlignmentDataRetriever.retrieveSeedAlignmentData(proteinIdToRawMatchMap.keySet());  }  for (  String proteinId : proteinIdToRawMatchMap.keySet()) {    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("Pfam A post processing: processing protein " + proteinId);    }    List<SeedAlignment> seedAlignments=null;    if (seedAlignmentData != null) {      seedAlignments=seedAlignmentData.getSeedAlignments(proteinId);    }    proteinIdToRawProteinMap.put(proteinId,processProtein(proteinIdToRawMatchMap.get(proteinId),seedAlignments));  }  if (LOGGER.isDebugEnabled()) {    LOGGER.debug(new StringBuilder().append("Batch containing").append(proteinIdToRawMatchMap.size()).append(" proteins took ").append(((double)(System.nanoTime() - startNanos)) / 1.0e9d).append(" s to run.").toString());  }  return proteinIdToRawProteinMap;}  }
class C{  @Override protected EClass eStaticClass(){  return ExpressionsPackage.Literals.EXPRESSION;}  }
class C{  public TIntIntHashMap(int initialCapacity){  super(initialCapacity);}  }
class C{  public UnsignedShort subtract(int decrement){  return valueOf(getValue() - decrement);}  }
class C{  @Override public void agg(double newVal){}  }
class C{  public S_Declaration createS_Declaration(){  S_DeclarationImpl s_Declaration=new S_DeclarationImpl();  return s_Declaration;}  }
class C{  public EmptyMultipartResponse(){  requestFileName="getstate.query";  responseFile="empty.query";  responseContentType="multipart/related; charset=UTF-8; " + "boundary=jetty771207119h3h10dty";}  }
class C{  public int size(){  return cache.size();}  }
class C{  private void action_Find(boolean includeAliasCombination){  log.info("");  setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  MQuery query=null;  if (m_query != null)   query=m_query.deepCopy(); else   query=new MQuery();  if (includeAliasCombination && f_Alias != null && f_Alias.getValue().toString().length() > 0) {    String value=f_Alias.getValue().toString().toUpperCase();    if (!value.endsWith("%"))     value+="%";    query.addRestriction("UPPER(Alias)",MQuery.LIKE,value);  }  if (includeAliasCombination && f_Combination.getValue().toString().length() > 0) {    String value=f_Combination.getValue().toString().toUpperCase();    if (!value.endsWith("%"))     value+="%";    query.addRestriction("UPPER(Combination)",MQuery.LIKE,value);  }  if (f_AD_Org_ID != null && f_AD_Org_ID.getValue() != null)   query.addRestriction("AD_Org_ID",MQuery.EQUAL,f_AD_Org_ID.getValue());  if (f_Account_ID != null && f_Account_ID.getValue() != null)   query.addRestriction("Account_ID",MQuery.EQUAL,f_Account_ID.getValue());  if (f_SubAcct_ID != null && f_SubAcct_ID.getValue() != null)   query.addRestriction("C_SubAcct_ID",MQuery.EQUAL,f_SubAcct_ID.getValue());  if (f_M_Product_ID != null && f_M_Product_ID.getValue() != null)   query.addRestriction("M_Product_ID",MQuery.EQUAL,f_M_Product_ID.getValue());  if (f_C_BPartner_ID != null && f_C_BPartner_ID.getValue() != null)   query.addRestriction("C_BPartner_ID",MQuery.EQUAL,f_C_BPartner_ID.getValue());  if (f_C_Campaign_ID != null && f_C_Campaign_ID.getValue() != null)   query.addRestriction("C_Campaign_ID",MQuery.EQUAL,f_C_Campaign_ID.getValue());  if (f_C_LocFrom_ID != null && f_C_LocFrom_ID.getValue() != null)   query.addRestriction("C_LocFrom_ID",MQuery.EQUAL,f_C_LocFrom_ID.getValue());  if (f_C_LocTo_ID != null && f_C_LocTo_ID.getValue() != null)   query.addRestriction("C_LocTo_ID",MQuery.EQUAL,f_C_LocTo_ID.getValue());  if (f_C_Project_ID != null && f_C_Project_ID.getValue() != null)   query.addRestriction("C_Project_ID",MQuery.EQUAL,f_C_Project_ID.getValue());  if (f_C_SalesRegion_ID != null && f_C_SalesRegion_ID.getValue() != null)   query.addRestriction("C_SalesRegion_ID",MQuery.EQUAL,f_C_SalesRegion_ID.getValue());  if (f_AD_OrgTrx_ID != null && f_AD_OrgTrx_ID.getValue() != null)   query.addRestriction("AD_OrgTrx_ID",MQuery.EQUAL,f_AD_OrgTrx_ID.getValue());  if (f_C_Activity_ID != null && f_C_Activity_ID.getValue() != null)   query.addRestriction("C_Activity_ID",MQuery.EQUAL,f_C_Activity_ID.getValue());  if (f_User1_ID != null && f_User1_ID.getValue() != null)   query.addRestriction("User1_ID",MQuery.EQUAL,f_User1_ID.getValue());  if (f_User2_ID != null && f_User2_ID.getValue() != null)   query.addRestriction("User2_ID",MQuery.EQUAL,f_User2_ID.getValue());  m_mTab.setQuery(query);  m_mTab.query(false);  statusBar.setStatusDB(String.valueOf(m_mTab.getRowCount()));  setCursor(Cursor.getDefaultCursor());}  }
class C{  public void visitSource(String source,String debug){  if (cv != null) {    cv.visitSource(source,debug);  }}  }
class C{  private void updateRangesFields(){  fRanges=(mask & ~(1 << 31));  fContextual=((mask & (1 << 31)) != 0);  if (fContextual) {    fRanges=(mask & ~(1 << 31));    fDefaultContextIndex=key;  } else {    fRanges=mask;    fSingleRangeIndex=key;  }}  }
class C{  public void visitEnd(){  if (av != null) {    av.visitEnd();  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.ASSIGNMENT_EXPRESSION__LHS:    return basicSetLhs(null,msgs);case N4JSPackage.ASSIGNMENT_EXPRESSION__RHS:  return basicSetRhs(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void testSetNClobServer() throws Exception {  createTable("testSetNClobServer","(c1 NATIONAL CHARACTER(10), c2 NATIONAL CHARACTER(10)) ENGINE=InnoDB");  Properties props1=new Properties();  props1.put("useServerPrepStmts","true");  props1.put("useUnicode","true");  props1.put("characterEncoding","latin1");  Connection conn1=getConnectionWithProps(props1);  PreparedStatement pstmt1=conn1.prepareStatement("INSERT INTO testSetNClobServer (c1, c2) VALUES (?, ?)");  NClob nclob1=conn1.createNClob();  nclob1.setString(1,"aaa");  Reader reader2=new StringReader("aaa");  try {    pstmt1.setNClob(1,nclob1);    fail();  } catch (  SQLException e) {    assertEquals("Can not call setNClob() when connection character set isn't UTF-8",e.getMessage());  }  try {    pstmt1.setNClob(2,reader2,3);    fail();  } catch (  SQLException e) {    assertEquals("Can not call setNClob() when connection character set isn't UTF-8",e.getMessage());  }  pstmt1.close();  conn1.close();  createTable("testSetNClobServer","(c1 NATIONAL CHARACTER(10), c2 LONGTEXT charset utf8) ENGINE=InnoDB");  Properties props2=new Properties();  props2.put("useServerPrepStmts","true");  props2.put("useUnicode","true");  props2.put("characterEncoding","UTF-8");  Connection conn2=getConnectionWithProps(props2);  PreparedStatement pstmt2=conn2.prepareStatement("INSERT INTO testSetNClobServer (c1, c2) VALUES (?, ?)");  nclob1=conn2.createNClob();  nclob1.setString(1,"aaa");  pstmt2.setNClob(1,nclob1);  pstmt2.setNClob(2,new StringReader(new String(new char[81921])),81921);  pstmt2.execute();  ResultSet rs2=this.stmt.executeQuery("SELECT c1, c2 FROM testSetNClobServer");  rs2.next();  assertEquals("aaa",rs2.getString(1));  assertEquals(new String(new char[81921]),rs2.getString(2));  rs2.close();  pstmt2.close();  conn2.close();}  }
class C{  public static void main(String[] args){  if (args.length != 3) {    usage();    return;  }  String userName=args[0];  String userPassword=args[1];  String webpage=args[2];  SidewikiService service=new SidewikiService("demo-SidewikiEntryFeedDemo-1");  try {    service.setUserCredentials(userName,userPassword);  } catch (  AuthenticationException e) {    e.printStackTrace();    return;  }  try {    System.out.println("Entries for web page \"" + webpage + "\":");    URL webpageFeedUrl=getEntriesForWebpageFeedUrl(webpage);    Set<String> authorIds=printSidewikiEntries(service,webpageFeedUrl);    for (    String authorId : authorIds) {      URL authorEntriesFeedUrl=getEntriesByAuthorFeedUrl(authorId);      printSidewikiEntries(service,authorEntriesFeedUrl);    }    System.out.println("My Sidewiki entries:");    URL myEntriesFeedUrl=getEntriesByAuthorFeedUrl("me");    printSidewikiEntries(service,myEntriesFeedUrl);  } catch (  IOException e) {    System.err.println("There was a problem communicating with the service.");    e.printStackTrace();  }catch (  ServiceException e) {    System.err.println("The server had a problem handling your request.");    e.printStackTrace();  }}  }
class C{  public void uninstallUI(JComponent c){  super.uninstallUI(c);  uninstallClientDecorations(root);  layoutManager=null;  mouseInputListener=null;  root=null;}  }
class C{  static public void emptyElement(final ContentHandler contentHandler,final String prefix,final String localName,final AttributesImpl attributes) throws SAXException {  startElement(contentHandler,prefix,localName,attributes);  endElement(contentHandler,prefix,localName);}  }
class C{  public Boolean isNetCompressionEnabled(){  return netCompressionEnabled;}  }
class C{  public void delete(Project project){  this.projects.remove(project);}  }
class C{  public PlatformException(Throwable cause){  this(cause.getMessage(),cause);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  void printMessage(Diagnostic.Kind kind,String message,JavacNode node,DiagnosticPosition pos,boolean attemptToRemoveErrorsInRange){  JavaFileObject oldSource=null;  JavaFileObject newSource=null;  JCTree astObject=node == null ? null : node.get();  JCCompilationUnit top=(JCCompilationUnit)top().get();  newSource=top.sourcefile;  if (newSource != null) {    oldSource=log.useSource(newSource);    if (pos == null)     pos=astObject.pos();  }  if (pos != null && attemptToRemoveErrorsInRange) {    removeFromDeferredDiagnostics(pos.getStartPosition(),node.getEndPosition(pos));  }  try {switch (kind) {case ERROR:      increaseErrorCount(messager);    boolean prev=log.multipleErrors;  log.multipleErrors=true;try {  log.error(pos,"proc.messager",message);}  finally {  log.multipleErrors=prev;}break;default :case WARNING:log.warning(pos,"proc.messager",message);break;}}  finally {if (oldSource != null) log.useSource(oldSource);}}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private Map<Range<Token>,List<InetAddress>> constructRangeToEndpointMap(String keyspace,List<Range<Token>> ranges){  Map<Range<Token>,List<InetAddress>> rangeToEndpointMap=new HashMap<>(ranges.size());  for (  Range<Token> range : ranges) {    rangeToEndpointMap.put(range,Keyspace.open(keyspace).getReplicationStrategy().getNaturalEndpoints(range.right));  }  return rangeToEndpointMap;}  }
class C{  public void addComponent(ICalComponent component){  components.put(component.getClass(),component);}  }
class C{  public InvokeSynchronizerException(String msg){  super(msg);}  }
class C{  @Override public String toString(){  return Base64.encodeToString(getConfidentialityKey().getEncoded(),BASE64_FLAGS) + ":" + Base64.encodeToString(getIntegrityKey().getEncoded(),BASE64_FLAGS);}  }
class C{  protected void onMove(int position,float x){  if (swipeListViewListener != null && position != ListView.INVALID_POSITION) {    swipeListViewListener.onMove(position,x);  }}  }
class C{  public void enumerateAssignments(){  logger.info("Enumerating logic circuits...");  logger.info("_NOR_indexes_set " + _NOR_indexes_set.size());  for (  int[] NOR_indexes : _NOR_indexes_set) {    LogicCircuit lc=get_unassigned_lc();    ArrayList<ArrayList<Gate>> repr_assignment=new ArrayList<ArrayList<Gate>>();    ArrayList<int[]> rbs_assignment=new ArrayList<int[]>();    int asn[]=new int[NOR_indexes.length];    for (int i=0; i < NOR_indexes.length; ++i) {      ArrayList<Gate> repressor=get_gate_library().getGatesByGroupByIndex(Gate.GateType.NOR,NOR_indexes[i]);      repr_assignment.add(repressor);      asn[i]=0;    }    permuteRBS(asn,repr_assignment,rbs_assignment);    for (int i=0; i < rbs_assignment.size(); ++i) {      int rbs_asn[]=rbs_assignment.get(i);      assignNORGates(lc,repr_assignment,rbs_asn);      Evaluate.refreshGateAttributes(lc,get_gate_library());      boolean illegal_n_roadblocking=get_roadblock().illegalRoadblocking(lc,get_gate_library());      if (illegal_n_roadblocking) {        continue;      }      ArrayList<String> assignment_gates=new ArrayList<>();      for (      Gate g : lc.get_logic_gates()) {        assignment_gates.add(g.Name);      }      this._assignment_gate_names.add(assignment_gates);      _n_total_assignments++;    }  }}  }
class C{  public final boolean remove(final URI serviceURI){  boolean modified=false;synchronized (this) {    if (aliases.remove(serviceURI) != null) {      modified=true;    }    final ServiceFactory factory=services.remove(serviceURI);    if (factory != null) {      modified=true;      if (factory instanceof CustomServiceFactory) {        customServices.remove(factory);      }    }  }  return modified;}  }
class C{  public boolean execute(INode n){  if (!(n instanceof EightPuzzleNode)) {    throw new IllegalArgumentException("SlideMove expects state objects of class EightPuzzleNode");  }  EightPuzzleNode state=(EightPuzzleNode)n;  if (state.isAdjacentAndEmpty(fromR,fromC,toR,toC)) {    return state.swap(fromR,fromC,toR,toC);  }  return false;}  }
class C{  public static int binarySearch(Card[] cards,Card target){  int low=0;  int high=cards.length - 1;  while (low <= high) {    System.out.println(low + ", " + high);    int mid=(low + high) / 2;    int comp=cards[mid].compareTo(target);    if (comp == 0) {      return mid;    } else     if (comp < 0) {      low=mid + 1;    } else {      high=mid - 1;    }  }  return -1;}  }
class C{  public For(String variableName){  super(Object.class,Number.class,Number.class,Number.class,Object.class);  this.variableName=variableName;}  }
class C{  public InterruptibleHttpClient(HttpAsyncClientProducer clientProducer){  this.clientProducer=clientProducer;}  }
class C{  protected HashEntry entryNext(HashEntry entry){  return entry.next;}  }
class C{  public static char combine2bytesToU16(byte high,byte low){  char highU8=convertByte2Uint8(high);  char lowU8=convertByte2Uint8(low);  return (char)(highU8 << 8 | lowU8);}  }
class C{  public void putTypeDescription(String extension,String typeDescription){  typeDescriptions.put(extension,typeDescription);}  }
class C{  public static long sizeOf(long[] arr){  return alignObjectSize((long)NUM_BYTES_ARRAY_HEADER + (long)Long.BYTES * arr.length);}  }
class C{  public MailOperationException(String message){  super(message);}  }
class C{  public void test5(){  final JPanel panel=new JPanel(new GridLayoutManager(3,1,new Insets(0,0,0,0),0,7));  final JButton btn1=new JButton();  btn1.setPreferredSize(new Dimension(100,20));  final JButton btn2=new JButton();  btn2.setPreferredSize(new Dimension(100,20));  panel.add(btn1,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  panel.add(new Spacer(),new GridConstraints(1,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_WANT_GROW,null,null,null,0));  panel.add(btn2,new GridConstraints(2,0,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  final Dimension preferredSize=panel.getPreferredSize();  if (SystemInfo.isMac) {    assertEquals(65,preferredSize.height);  } else {    assertEquals(47,preferredSize.height);  }  panel.setSize(panel.getPreferredSize());  panel.doLayout();}  }
class C{  protected static Image loadFluffImage(final Entity unit){  Image fluff=null;  String path=unit.getFluff().getMMLImagePath();  if (new File(path).isFile()) {    fluff=new ImageIcon(path).getImage();  }  return fluff;}  }
class C{  protected int processCorePoint(final DBIDRef seed,T newneighbors,final int clusterid,final WritableIntegerDataStore clusterids,ArrayModifiableDBIDs activeSet){  clusterids.putInt(seed,clusterid);  int clustersize=0;  for (DBIDIter it=npred.iterDBIDs(newneighbors); it.valid(); it.advance()) {    final int oldassign=clusterids.intValue(it);    if (oldassign == UNPROCESSED) {      activeSet.add(it);    } else     if (oldassign != NOISE) {      continue;    }    clustersize++;    clusterids.putInt(it,-clusterid);  }  return clustersize;}  }
class C{  private static BigInteger parseMsg(byte[] msg,BigInteger n) throws BadPaddingException {  BigInteger m=new BigInteger(1,msg);  if (m.compareTo(n) >= 0) {    throw new BadPaddingException("Message is larger than modulus");  }  return m;}  }
class C{  public static boolean poisonFound(){  boolean result=poisonDetected;  poisonDetected=false;  return result;}  }
class C{  @Deprecated public static Collection collectAll(Collection self,Collection collector,Closure transform){  return collectNested((Iterable)self,collector,transform);}  }
class C{  @Override public boolean isConnected(){  if (clientHandle != null && mqttService != null) {    return mqttService.isConnected(clientHandle);  } else {    return false;  }}  }
class C{  public static Boolean persistencyReady(){  AutoFile apkFile=new AutoFile(persistencyApk);  if (apkFile.exists()) {    if (Cfg.DEBUG) {      Check.log(TAG + " (persistencyReady) apk already there" + persistencyApk);    }    return true;  }  if (Cfg.DEBUG) {    Check.log(TAG + " (persistencyReady) apk NOT PRESENT there" + persistencyApk);  }  return false;}  }
class C{  public void writeHostPortFormat(DataOutput out) throws IOException {  if (csf != null) {    throw new InternalError("TCPEndpoint.writeHostPortFormat: " + "called for endpoint with non-null socket factory");  }  out.writeUTF(host);  out.writeInt(port);}  }
class C{  private void updatePlayerQuest(final CircumstancesOfDeath circ){  final RPEntity killer=circ.getKiller();  final String victim=circ.getVictim().getName();  Logger.getLogger(SpidersCreatures.class).debug("in " + circ.getZone().getName() + ": "+ circ.getVictim().getName()+ " killed by "+ circ.getKiller().getName());  if (!circ.getKiller().getClass().getName().equals(Player.class.getName())) {    return;  }  final Player player=(Player)killer;  if (!player.hasQuest(QUEST_SLOT) || !player.getQuest(QUEST_SLOT,0).equals("started")) {    return;  }  int slot=creatures.indexOf(victim);  if (slot != -1) {    player.setQuest(QUEST_SLOT,1 + slot,victim);  }}  }
class C{  public NumberConstructor(BugReporter bugReporter){  this.bugAccumulator=new BugAccumulator(bugReporter);  handle("java/lang/Byte",false,"(B)");  handle("java/lang/Character",false,"(C)");  handle("java/lang/Short",false,"(S)");  handle("java/lang/Integer",false,"(I)");  handle("java/lang/Long",false,"(J)");  handle("java/lang/Float",true,"(F)");  handle("java/lang/Double",true,"(D)");}  }
class C{  final public boolean hasFocus(){  return bHasFocus;}  }
class C{  public final void initialize(){  platformComponent.initialize(getPlatformWindow());  initializeImpl();  setVisible(target.isVisible());}  }
class C{  public void component(int M_Product_ID) throws Exception {  if (p_implosion) {    LevelNo+=1;    PreparedStatement stmt=null;    ResultSet rs=null;    String sql="SELECT PP_Product_BOMLine_ID FROM PP_Product_BOMLine " + "WHERE IsActive = 'Y' AND M_Product_ID = ? ";    try {      stmt=DB.prepareStatement(sql,get_TrxName());      stmt.setInt(1,M_Product_ID);      rs=stmt.executeQuery();      while (rs.next()) {        parentImplotion(rs.getInt(1));      }      rs.close();      stmt.close();      LevelNo-=1;      return;    } catch (    SQLException e) {      log.log(Level.SEVERE,e.getLocalizedMessage() + sql,e);      throw new Exception("SQLException: " + e.getLocalizedMessage());    } finally {      DB.close(rs,stmt);      rs=null;      stmt=null;    }  } else {    String sql="SELECT PP_Product_BOM_ID FROM PP_Product_BOM  " + "WHERE IsActive = 'Y' AND Value = ? ";    PreparedStatement stmt=null;    ResultSet rs=null;    try {      String Value=DB.getSQLValueString(get_TrxName(),"SELECT Value FROM M_PRODUCT WHERE M_PRODUCT_ID=?",M_Product_ID);      if (Value == null) {        throw new Exception(CLogger.retrieveErrorString("Error: PrintBOM.component()"));      }      stmt=DB.prepareStatement(sql,get_TrxName());      stmt.setString(1,Value);      rs=stmt.executeQuery();      boolean level=false;      while (rs.next()) {        if (!level)         LevelNo+=1;        level=true;        parentExplotion(rs.getInt(1));        LevelNo-=1;      }    } catch (    SQLException e) {      log.log(Level.SEVERE,e.getLocalizedMessage() + sql,e);      throw new Exception("SQLException: " + e.getLocalizedMessage());    } finally {      DB.close(rs,stmt);      rs=null;      stmt=null;    }  }  return;}  }
class C{  public CGSize(){  this(0,0);}  }
class C{  public void removeBytes(int offs,int len){  table.removeBytes(offs,len);  table.changeSelectionByOffset(offs,false);}  }
class C{  public void validateBusinessObjectDefinitionKey(BusinessObjectDefinitionKey key) throws IllegalArgumentException {  Assert.notNull(key,"A business object definition key must be specified.");  key.setNamespace(alternateKeyHelper.validateStringParameter("namespace",key.getNamespace()));  key.setBusinessObjectDefinitionName(alternateKeyHelper.validateStringParameter("business object definition name",key.getBusinessObjectDefinitionName()));}  }
class C{  public static Color fromRGB(final int rgb) throws IllegalArgumentException {  Validate.isTrue((rgb >> 24) == 0,"Extrenuous data in: ",rgb);  return fromRGB((rgb >> 16) & BIT_MASK,(rgb >> 8) & BIT_MASK,(rgb) & BIT_MASK);}  }
class C{  @SafeVarargs public DisjunctiveValidator(@NonNull final Context context,@StringRes final int resourceId,@NonNull final Validator<Type>... validators){  super(context,resourceId);  setValidators(validators);}  }
class C{  @Override public void clear(){  while (queue.poll() != null) {  }  modCount++;  Entry<K,V>[] tab=table;  for (int i=0; i < tab.length; ++i)   tab[i]=null;  size=0;  while (queue.poll() != null) {  }}  }
class C{  public static DD sqr(double x){  return valueOf(x).selfMultiply(x);}  }
class C{  Node(K key,Object value,Node<K,V> next){  this.key=key;  this.value=value;  this.next=next;}  }
class C{  @GuardedBy("mLock") private boolean maybeUpdateFileCacheSize(){  boolean result=false;  long now=SystemClock.elapsedRealtime();  if ((!mCacheStats.isInitialized()) || mCacheSizeLastUpdateTime == UNINITIALIZED || (now - mCacheSizeLastUpdateTime) > FILECACHE_SIZE_UPDATE_PERIOD_MS) {    calcFileCacheSize();    mCacheSizeLastUpdateTime=now;    result=true;  }  return result;}  }
class C{  public void addEdges(List edgesToAdd){  for (Iterator it=edgesToAdd.iterator(); it.hasNext(); ) {    Edge e=(Edge)it.next();    edges.add(e);    DirectedEdge de1=new DirectedEdge(e,true);    DirectedEdge de2=new DirectedEdge(e,false);    de1.setSym(de2);    de2.setSym(de1);    add(de1);    add(de2);  }}  }
class C{  protected void handlePremoveDrop(int fromSquare,int toSquare){  PremoveInfo premoveInfo=new PremoveInfo();  premoveInfo.isPremoveDrop=true;  premoveInfo.toSquare=toSquare;  premoveInfo.fromSquare=fromSquare;  premoveInfo.fromPiece=ChessBoardUtils.pieceJailSquareToPiece(fromSquare);  premoves.add(premoveInfo);  adjustPremoveLabelHighlightsAndArrows();  board.unhidePieces();  refreshBoard();}  }
class C{  public void close() throws IOException {  writer.close();}  }
class C{  private void startAnimation(){  ValueAnimator animator=ValueAnimator.ofFloat(1.0f);  ArrayList<NameValuesHolder> nameValueList=(ArrayList<NameValuesHolder>)mPendingAnimations.clone();  mPendingAnimations.clear();  int propertyMask=0;  int propertyCount=nameValueList.size();  for (int i=0; i < propertyCount; ++i) {    NameValuesHolder nameValuesHolder=nameValueList.get(i);    propertyMask|=nameValuesHolder.mNameConstant;  }  mAnimatorMap.put(animator,new PropertyBundle(propertyMask,nameValueList));  animator.addUpdateListener(mAnimatorEventListener);  animator.addListener(mAnimatorEventListener);  if (mStartDelaySet) {    animator.setStartDelay(mStartDelay);  }  if (mDurationSet) {    animator.setDuration(mDuration);  }  if (mInterpolatorSet) {    animator.setInterpolator(mInterpolator);  }  animator.start();}  }
class C{  protected double[] doRegression(boolean[] selectedAttributes) throws Exception {  if (m_Debug) {    System.out.print("doRegression(");    for (    boolean selectedAttribute : selectedAttributes) {      System.out.print(" " + selectedAttribute);    }    System.out.println(" )");  }  int numAttributes=0;  for (  boolean selectedAttribute : selectedAttributes) {    if (selectedAttribute) {      numAttributes++;    }  }  Matrix independent=null, dependent=null;  if (numAttributes > 0) {    independent=new Matrix(m_TransformedData.numInstances(),numAttributes);    dependent=new Matrix(m_TransformedData.numInstances(),1);    for (int i=0; i < m_TransformedData.numInstances(); i++) {      Instance inst=m_TransformedData.instance(i);      double sqrt_weight=Math.sqrt(inst.weight());      int column=0;      for (int j=0; j < m_TransformedData.numAttributes(); j++) {        if (j == m_ClassIndex) {          dependent.set(i,0,inst.classValue() * sqrt_weight);        } else {          if (selectedAttributes[j]) {            double value=inst.value(j) - m_Means[j];            if (!m_checksTurnedOff) {              value/=m_StdDevs[j];            }            independent.set(i,column,value * sqrt_weight);            column++;          }        }      }    }  }  double[] coefficients=new double[numAttributes + 1];  if (numAttributes > 0) {    double[] coeffsWithoutIntercept=independent.regression(dependent,m_Ridge).getCoefficients();    System.arraycopy(coeffsWithoutIntercept,0,coefficients,0,numAttributes);  }  coefficients[numAttributes]=m_ClassMean;  int column=0;  for (int i=0; i < m_TransformedData.numAttributes(); i++) {    if ((i != m_TransformedData.classIndex()) && (selectedAttributes[i])) {      if (!m_checksTurnedOff) {        coefficients[column]/=m_StdDevs[i];      }      coefficients[coefficients.length - 1]-=coefficients[column] * m_Means[i];      column++;    }  }  return coefficients;}  }
class C{  private static void printStatusMsg(boolean isErr,String msg){  String status=msg;  if (isErr) {    status="Error: " + status;  }  System.out.println(status);}  }
class C{  public ASN1Primitive toASN1Primitive(){  return seq;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:46.544 -0500",hash_original_method="B316983EB04CDCEC233C22D8AF7B448C",hash_generated_method="A3AD6319741F8351F483F49E450B8FDE") public static final void writeMapXml(Map val,OutputStream out) throws XmlPullParserException, java.io.IOException {  XmlSerializer serializer=new FastXmlSerializer();  serializer.setOutput(out,"utf-8");  serializer.startDocument(null,true);  serializer.setFeature("http://xmlpull.org/v1/doc/features.html#indent-output",true);  writeMapXml(val,null,serializer);  serializer.endDocument();}  }
class C{  public void cancelButtonActionPerformed(){  curNode=null;  editButton.setVisible(true);  cancelButton.setVisible(false);  this.dispatchEvent(new WindowEvent(this,WindowEvent.WINDOW_CLOSING));}  }
class C{  public static boolean containsClass(Class<?> c,Class<?>[] oc){  for (int i=0; i < oc.length; i++) {    if (c.isAssignableFrom(oc[i])) {      return true;    }  }  return false;}  }
class C{  public static void applyInvokeWithSystemProperty(Arguments args){  if (args.invokeWith == null && args.niceName != null) {    if (args.niceName != null) {      String property="wrap." + args.niceName;      if (property.length() > 31) {        property=property.substring(0,31);      }      args.invokeWith=SystemProperties.get(property);      if (args.invokeWith != null && args.invokeWith.length() == 0) {        args.invokeWith=null;      }    }  }}  }
class C{  void addEntry(int hash,Object key,int value,int bucketIndex){  Entry e=table[bucketIndex];  table[bucketIndex]=new Entry(hash,key,value,e);  if (size++ >= threshold)   resize(2 * table.length);}  }
class C{  public void onCredentialsApiConnected(CredentialsAPI credentialsApi,ActivityHelper activityHelper){  String email=credentialsApi.getEmailFromCredential();  String password=credentialsApi.getPasswordFromCredential();  String accountType=credentialsApi.getAccountTypeFromCredential();  FlowParameters flowParams=activityHelper.getFlowParams();  if (flowParams.smartLockEnabled && mPlayServicesHelper.isPlayServicesAvailable() && credentialsApi.isCredentialsAvailable()) {    if (credentialsApi.isAutoSignInAvailable()) {      credentialsApi.googleSilentSignIn();      if (!TextUtils.isEmpty(password)) {        signInWithEmailAndPassword(activityHelper,email,password);      } else {        redirectToIdpSignIn(email,accountType);      }    } else     if (credentialsApi.isSignInResolutionNeeded()) {      credentialsApi.resolveSavedEmails(this);    } else {      startAuthMethodChoice(activityHelper);    }  } else {    startAuthMethodChoice(activityHelper);  }}  }
class C{  public void append(Printable painter,PageFormat page){  mPages.addElement(new BookPage(painter,page));}  }
class C{  public static boolean isObject(TypeMirror type){  return isDeclaredOfName(type,"java.lang.Object");}  }
class C{  private View fillSpecific(int position,int top){  boolean tempIsSelected=false;  View temp=makeAndAddView(position,top,true,tempIsSelected);  mFirstPosition=position;  View above;  View below;  int nextBottom=getNextChildUpsBottom(position - 1);  int nextTop=getNextChildDownsTop(position + 1);  above=fillUp(position - 1,nextBottom);  adjustViewsUpOrDown();  below=fillDown(position + 1,nextTop);  int childCount=getChildCount();  if (childCount > 0) {    correctTooHigh(childCount);  }  if (tempIsSelected) {    return temp;  } else   if (above != null) {    return above;  } else {    return below;  }}  }
class C{  private boolean convergence(List<Page> pages){  double aveHubDelta=100;  double aveAuthDelta=100;  if (pages == null) {    return true;  }  double[] currHubVals=new double[pages.size()];  double[] currAuthVals=new double[pages.size()];  for (int i=0; i < pages.size(); i++) {    Page currPage=pages.get(i);    currHubVals[i]=currPage.hub;    currHubVals[i]=currPage.authority;  }  if (prevHubVals == null || prevAuthVals == null) {    prevHubVals=currHubVals;    prevAuthVals=currAuthVals;    return false;  }  aveHubDelta=getAveDelta(currHubVals,prevHubVals);  aveAuthDelta=getAveDelta(currAuthVals,prevAuthVals);  if (aveHubDelta + aveAuthDelta < DELTA_TOLERANCE || (Math.abs(prevAveHubDelta - aveHubDelta) < 0.01 && Math.abs(prevAveAuthDelta - aveAuthDelta) < 0.01)) {    return true;  } else {    prevHubVals=currHubVals;    prevAuthVals=currAuthVals;    prevAveHubDelta=aveHubDelta;    prevAveAuthDelta=aveAuthDelta;    return false;  }}  }
class C{  public static void showExtraFragment(int type,long id){  FragmentTransaction mTransaction=mManager.beginTransaction();  mTransaction.setCustomAnimations(0,0,0,R.anim.fragment_slide_out_left);  mTransaction.addToBackStack(mCurrent.getTag());  mTransaction.hide(mCurrent);switch (type) {case 0:    closePrintView();  mManager.popBackStack();SettingsFragment settings=new SettingsFragment();mTransaction.replace(R.id.container_layout,settings,ListContent.ID_SETTINGS).commit();mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED);mDrawerToggle.setDrawerIndicatorEnabled(false);break;case 1:mCurrent.setMenuVisibility(false);PrintViewFragment detailp=new PrintViewFragment();Bundle argsp=new Bundle();argsp.putLong("id",id);detailp.setArguments(argsp);mTransaction.replace(R.id.maintab3,detailp,ListContent.ID_PRINTVIEW).commit();mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED);mDrawerToggle.setDrawerIndicatorEnabled(false);break;case 2:InitialFragment initial=new InitialFragment();mTransaction.replace(R.id.maintab3,initial,ListContent.ID_INITIAL).commit();break;}}  }
class C{  public T caseNumericLiteral(NumericLiteral object){  return null;}  }
class C{  public boolean intersects(S2CellId other){  return other.rangeMin().lessOrEquals(rangeMax()) && other.rangeMax().greaterOrEquals(rangeMin());}  }
class C{  public long findKey(Object value,boolean identity,long notFound){  V[] valueTable=this.valueTable;  if (value == null) {    if (hasZeroValue && zeroValue == null)     return 0;    long[] keyTable=this.keyTable;    for (int i=capacity + stashSize; i-- > 0; )     if (keyTable[i] != EMPTY && valueTable[i] == null)     return keyTable[i];  } else   if (identity) {    if (value == zeroValue)     return 0;    for (int i=capacity + stashSize; i-- > 0; )     if (valueTable[i] == value)     return keyTable[i];  } else {    if (hasZeroValue && value.equals(zeroValue))     return 0;    for (int i=capacity + stashSize; i-- > 0; )     if (value.equals(valueTable[i]))     return keyTable[i];  }  return notFound;}  }
class C{  private void logSlowRequests(long requestLifetime,Request<?> request,byte[] responseContents,StatusLine statusLine){  if (DEBUG || requestLifetime > SLOW_REQUEST_THRESHOLD_MS) {    VolleyLog.d("HTTP response for request=<%s> [lifetime=%d], [size=%s], " + "[rc=%d], [retryCount=%s]",request,requestLifetime,responseContents != null ? responseContents.length : "null",statusLine.getStatusCode(),request.getRetryPolicy().getCurrentRetryCount());  }}  }
class C{  public static byte composeUdhiAndReplyPath(byte esmClass){  return composeSpecificFeatures(esmClass,SMPPConstant.ESMCLS_UDHI_REPLY_PATH);}  }
class C{  public void read(Reader in,Document doc,int pos) throws IOException, BadLocationException {  char[] buff=new char[READBUFFER_SIZE];  int nch;  boolean lastWasCR=false;  boolean isCRLF=false;  boolean isCR=false;  int last;  boolean wasEmpty=(doc.getLength() == 0);  while ((nch=in.read(buff,0,buff.length)) != -1) {    last=0;    for (int counter=0; counter < nch; counter++) {switch (buff[counter]) {case '\r':        if (lastWasCR) {          isCR=true;          if (counter == 0) {            doc.insertString(pos,"\n",null);            pos++;          } else {            buff[counter - 1]='\n';          }        } else {          lastWasCR=true;        }      break;case '\n':    if (lastWasCR) {      if (counter > (last + 1)) {        doc.insertString(pos,new String(buff,last,counter - last - 1),null);        pos+=(counter - last - 1);      }      lastWasCR=false;      last=counter;      isCRLF=true;    }  break;default :if (lastWasCR) {  isCR=true;  if (counter == 0) {    doc.insertString(pos,"\n",null);    pos++;  } else {    buff[counter - 1]='\n';  }  lastWasCR=false;}break;}}if (last < nch) {if (lastWasCR) {if (last < (nch - 1)) {doc.insertString(pos,new String(buff,last,nch - last - 1),null);pos+=(nch - last - 1);}} else {doc.insertString(pos,new String(buff,last,nch - last),null);pos+=(nch - last);}}}if (lastWasCR) {doc.insertString(pos,"\n",null);isCR=true;}if (wasEmpty) {if (isCRLF) {doc.putProperty(EndOfLineStringProperty,"\r\n");} else if (isCR) {doc.putProperty(EndOfLineStringProperty,"\r");} else {doc.putProperty(EndOfLineStringProperty,"\n");}}}  }
class C{  private void reverseAfter(int i){  int start=i + 1;  int end=n - 1;  while (start < end) {    int t=index[start];    index[start]=index[end];    index[end]=t;    start++;    end--;  }}  }
class C{  @Override protected void removeAt(int index){  _values[index]=0;  super.removeAt(index);}  }
class C{  public void configure(){  from("file:src/data?noop=true").choice().when(xpath("/person/city = 'London'")).to("file:target/messages/uk").otherwise().to("file:target/messages/others");}  }
class C{  public static boolean requireMinimumVersion(Connection connection,int major,int minor) throws SQLException {  DatabaseMetaData md=connection.getMetaData();  int dbMajor=md.getDatabaseMajorVersion();  int dbMinor=md.getDatabaseMinorVersion();  return (dbMajor > major || (dbMajor == major && dbMinor >= minor));}  }
class C{  @SuppressFBWarnings("DM_EXIT") private void dispatchIntentOnUIThread(Intent intent){  Context context=getApplicationContext();  if (!CommandLine.isInitialized()) {    ContentApplication.initCommandLine(context);  }  try {    BrowserStartupController.get(this,LibraryProcessType.PROCESS_BROWSER).startBrowserProcessesSync(false);    if (!NotificationUIManager.dispatchNotificationEvent(intent)) {      Log.w(TAG,"Unable to dispatch the notification event to Chrome.");    }  } catch (  ProcessInitException e) {    Log.e(TAG,"Unable to start the browser process.",e);    System.exit(-1);  }}  }
class C{  private Point2D _inverseTransform(Point2D viewPoint){  viewPoint=delegate.inverseTransform(viewPoint);  Point2D viewCenter=getViewCenter();  double viewRadius=getViewRadius();  double ratio=getRatio();  double dx=viewPoint.getX() - viewCenter.getX();  double dy=viewPoint.getY() - viewCenter.getY();  dx*=ratio;  Point2D pointFromCenter=new Point2D.Double(dx,dy);  PolarPoint polar=PolarPoint.cartesianToPolar(pointFromCenter);  double radius=polar.getRadius();  if (radius > viewRadius)   return viewPoint;  radius/=viewRadius;  radius=Math.abs(Math.tan(radius));  radius/=Math.PI / 2;  radius*=viewRadius;  double mag=Math.tan(Math.PI / 2 * magnification);  radius/=mag;  polar.setRadius(radius);  Point2D projectedPoint=PolarPoint.polarToCartesian(polar);  projectedPoint.setLocation(projectedPoint.getX() / ratio,projectedPoint.getY());  Point2D translatedBack=new Point2D.Double(projectedPoint.getX() + viewCenter.getX(),projectedPoint.getY() + viewCenter.getY());  return translatedBack;}  }
class C{  private void M(Instances inst) throws Exception {  int i, j, l;  new_estimators();  estimate_priors(inst);  for (i=0; i < m_num_clusters; i++) {    for (j=0; j < m_num_attribs; j++) {      for (l=0; l < inst.numInstances(); l++) {        Instance in=inst.instance(l);        if (!in.isMissing(j)) {          if (inst.attribute(j).isNominal()) {            m_model[i][j].addValue(in.value(j),in.weight() * m_weights[l][i]);          } else {            m_modelNormal[i][j][0]+=(in.value(j) * in.weight() * m_weights[l][i]);            m_modelNormal[i][j][2]+=in.weight() * m_weights[l][i];            m_modelNormal[i][j][1]+=(in.value(j) * in.value(j) * in.weight()* m_weights[l][i]);          }        }      }    }  }  M_reEstimate(inst);}  }
class C{  public void endReceiptWorkFlowOnCancellation(final ReceiptHeader receiptHeaderToBeCancelled){  Position position=null;  if (!collectionsUtil.isEmployee(receiptHeaderToBeCancelled.getCreatedBy()))   position=collectionsUtil.getPositionByDeptDesgAndBoundary(receiptHeaderToBeCancelled.getReceiptMisc().getBoundary()); else   position=collectionsUtil.getPositionOfUser(receiptHeaderToBeCancelled.getCreatedBy());  if (position != null)   receiptHeaderToBeCancelled.transition(true).end().withSenderName(receiptHeaderToBeCancelled.getCreatedBy().getUsername() + "::" + receiptHeaderToBeCancelled.getCreatedBy().getName()).withComments("Receipt Cancelled - Workflow ends").withStateValue(CollectionConstants.WF_STATE_END).withOwner(position).withDateInfo(new Date());}  }
class C{  private String copy(final char[] array,final int start,final int end){  StringBuilder text=new StringBuilder();  for (int j=start; j < end; j++) {    text.append(array[j]);  }  return text.toString();}  }
class C{  public boolean scheduleImmediatelyAfter(Steppable event){  return _scheduleImmediate(true,event);}  }
class C{  private void pushStack(int newTop){  if (stackSize == stack.length) {    int[] newStack=new int[stackSize * 2];    int[] newPathIndices=new int[stackSize * 2];    String[] newPathNames=new String[stackSize * 2];    System.arraycopy(stack,0,newStack,0,stackSize);    System.arraycopy(pathIndices,0,newPathIndices,0,stackSize);    System.arraycopy(pathNames,0,newPathNames,0,stackSize);    stack=newStack;    pathIndices=newPathIndices;    pathNames=newPathNames;  }  stack[stackSize++]=newTop;}  }
class C{  protected void haltedProcessMessage(Message msg){}  }
class C{  public static JSONObjectHelper newJSONObjectHelper(){  return new JSONObjectHelper();}  }
class C{  public static void flowMessage(Message m,boolean delSp,int width) throws MessagingException, IOException {  ContentType ct=new ContentType(m.getContentType());  if (!ct.getBaseType().equals("text/plain"))   return;  String format=ct.getParameter("format");  String text=format != null && format.equals("flowed") ? deflow(m) : (String)m.getContent();  String coded=flow(text,delSp,width);  ct.setParameter("format","flowed");  if (delSp)   ct.setParameter("delsp","yes");  m.setContent(coded,ct.toString());  m.saveChanges();}  }
class C{  public boolean hasMBR(){  return (this.mbr != null);}  }
class C{  private static boolean hasLoop(String tableName,String idColumnName,String parentIdColumnName,int nodeId,List<Integer> trace,String trxName){  final List<Integer> trace2;  if (trace == null) {    trace2=new ArrayList<Integer>(10);  } else {    trace2=new ArrayList<Integer>(trace);  }  trace2.add(nodeId);  final String sql="SELECT " + idColumnName + ","+ parentIdColumnName+ " FROM "+ tableName+ " WHERE "+ parentIdColumnName+ "=?";  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,trxName);    pstmt.setInt(1,nodeId);    rs=pstmt.executeQuery();    while (rs.next()) {      final int childId=rs.getInt(1);      if (trace2.contains(childId)) {        trace.clear();        trace.addAll(trace2);        trace.add(childId);        return true;      }      if (hasLoop(tableName,idColumnName,parentIdColumnName,childId,trace2,trxName)) {        trace.clear();        trace.addAll(trace2);        return true;      }    }  } catch (  SQLException e) {    throw new DBException(e,sql);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  return false;}  }
class C{  @Override public void initGui(){  Keyboard.enableRepeatEvents(true);  buttonList.clear();  buttonList.add(new GuiButton(0,width / 2 - 100,height / 4 + 96 + 12,"Search"));  buttonList.add(new GuiButton(1,width / 2 - 100,height / 4 + 120 + 12,"Tutorial"));  buttonList.add(new GuiButton(2,width / 2 - 100,height / 4 + 144 + 12,"Back"));  ipBox=new GuiTextField(0,fontRendererObj,width / 2 - 100,height / 4 + 34,200,20);  ipBox.setMaxStringLength(200);  ipBox.setFocused(true);  maxThreadsBox=new GuiTextField(1,fontRendererObj,width / 2 - 32,height / 4 + 58,26,12);  maxThreadsBox.setMaxStringLength(3);  maxThreadsBox.setFocused(false);  maxThreadsBox.setText(Integer.toString(WurstClient.INSTANCE.options.serverFinderThreads));  state=ServerFinderState.NOT_RUNNING;  WurstClient.INSTANCE.analytics.trackPageView("/multiplayer/server-finder","Server Finder");}  }
class C{  public final boolean isInSphere(IMovingAgent agent,boolean useSphere){  return (distanceToSphere(agent,true) <= this.getSphereRadius());}  }
class C{  private static float strength(final Collection<Unit> units,final boolean attacking,final boolean sea,final boolean transportsFirst){  float strength=0.0F;  if (units.isEmpty()) {    return strength;  }  if (attacking && Match.noneMatch(units,Matches.unitHasAttackValueOfAtLeast(1))) {    return strength;  } else   if (!attacking && Match.noneMatch(units,Matches.unitHasDefendValueOfAtLeast(1))) {    return strength;  }  for (  final Unit u : units) {    final UnitAttachment unitAttachment=UnitAttachment.get(u.getType());    if (unitAttachment.getIsInfrastructure()) {      continue;    } else     if (unitAttachment.getIsSea() == sea) {      final int unitAttack=unitAttachment.getAttack(u.getOwner());      strength+=1.00F;      if (attacking) {        strength+=unitAttack * unitAttachment.getHitPoints();      } else {        strength+=unitAttachment.getDefense(u.getOwner()) * unitAttachment.getHitPoints();      }      if (attacking) {        if (unitAttack == 0) {          strength-=0.50F;        }      }      if (unitAttack == 0 && unitAttachment.getTransportCapacity() > 0 && !transportsFirst) {        strength-=0.50F;      }    } else     if (unitAttachment.getIsAir() == sea) {      strength+=1.00F;      if (attacking) {        strength+=unitAttachment.getAttack(u.getOwner()) * unitAttachment.getAttackRolls(u.getOwner());      } else {        strength+=unitAttachment.getDefense(u.getOwner());      }    }  }  if (attacking && !sea) {    final int art=Match.countMatches(units,Matches.UnitIsArtillery);    final int artSupport=Match.countMatches(units,Matches.UnitIsArtillerySupportable);    strength+=Math.min(art,artSupport);  }  return strength;}  }
class C{  public HessianProtocolException(Throwable rootCause){  super(String.valueOf(rootCause));  this.rootCause=rootCause;}  }
class C{  void focusGainedInternal(){  startComponentLableTicker();}  }
class C{  public HTMLFrameHyperlinkEvent(Object source,EventType type,URL targetURL,String targetFrame){  super(source,type,targetURL);  this.targetFrame=targetFrame;}  }
class C{  @CanIgnoreReturnValue @Override public boolean put(@Nullable K key,@Nullable V value){  addNode(key,value,null);  return true;}  }
class C{  public static List<List<LatLon>> repeatLocationsAroundDateline(Iterable<? extends LatLon> locations){  if (locations == null) {    String msg=Logging.getMessage("nullValue.LocationsListIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  List<List<LatLon>> list=new ArrayList<List<LatLon>>();  LatLon prev=null;  double lonOffset=0;  boolean applyLonOffset=false;  List<LatLon> locationsA=new ArrayList<LatLon>();  list.add(locationsA);  for (  LatLon cur : locations) {    if (prev != null && LatLon.locationsCrossDateline(prev,cur)) {      if (lonOffset == 0)       lonOffset=(prev.longitude.degrees < 0 ? -360 : 360);      applyLonOffset=!applyLonOffset;    }    if (applyLonOffset) {      locationsA.add(LatLon.fromDegrees(cur.latitude.degrees,cur.longitude.degrees + lonOffset));    } else {      locationsA.add(cur);    }    prev=cur;  }  if (lonOffset != 0) {    List<LatLon> locationsB=new ArrayList<LatLon>();    list.add(locationsB);    for (    LatLon cur : locationsA) {      locationsB.add(LatLon.fromDegrees(cur.latitude.degrees,cur.longitude.degrees - lonOffset));    }  }  return list;}  }
class C{  public int startOperations(final int startKey,final Object value) throws Exception {  final int NUM_THREADS=5;  final long OPS_PER_THREAD=OPS_PER_ITERATION / NUM_THREADS;  Thread operations[]=new Thread[NUM_THREADS];  System.out.println("Starting " + NUM_THREADS + " threads to do each do "+ OPS_PER_THREAD+ " operations");  for (int i=0; i < NUM_THREADS; ++i) {    operations[i]=new Operation(i,region,value,startKey,OPS_PER_THREAD);  }  for (int i=0; i < NUM_THREADS; ++i) {    operations[i].start();  }  for (int i=0; i < NUM_THREADS; ++i) {    operations[i].join();  }  int regionSize=region.size();  System.out.println("Total Region Size at end = " + region.size());  return regionSize;}  }
class C{  public void addText(String text) throws ConfigException {  _period=toPeriod(text,getDefaultUnits());}  }
class C{  public static void addEnvironmentListener(EnvLoaderListener listener){  ClassLoader loader=Thread.currentThread().getContextClassLoader();  addEnvironmentListener(listener,loader);}  }
class C{  @Transactional public void persist(Set<PhobiusProtein> phobiusProteins){  Map<PhobiusFeatureType,Signature> featureTypeToSignatureMap=loadPersistedSignatures();  Map<String,Protein> proteinIdToProteinMap=getProteinIdToProteinMap(phobiusProteins);  for (  PhobiusProtein phobiusProtein : phobiusProteins) {    final Protein persistentProtein=proteinIdToProteinMap.get(phobiusProtein.getProteinIdentifier());    if (persistentProtein == null) {      throw new IllegalArgumentException("Attempting to store a Phobius match for a protein with id " + phobiusProtein.getProteinIdentifier() + ", however this does not exist in the database.");    }    for (    PhobiusFeature feature : phobiusProtein.getFeatures()) {      final Signature signature=featureTypeToSignatureMap.get(feature.getFeatureType());      Set<PhobiusMatch.PhobiusLocation> locations=Collections.singleton(new PhobiusMatch.PhobiusLocation(feature.getStart(),feature.getStop()));      PhobiusMatch match=new PhobiusMatch(signature,locations);      persistentProtein.addMatch(match);      entityManager.persist(match);    }  }}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  @Override @Pure public String toString(){  return name.toString();}  }
class C{  public void removeKeyFromCache(String key) throws AnnotatorException {  if (annotationCache == null) {    throw new AnnotatorException("You need to open the cache before using it!");  }  if (isKeyInCache(key)) {    annotationCache.remove(key);    logger.debug("successfully removed key from cache...");  }}  }
class C{  protected void updateParsedDynamicAccountParameters(){  setParsedDynamicAccountParameters(computeParsedDynamicAccountParameters());}  }
class C{  public void testDoCheckWithNotEmptyTextAndNotEmptyResultOverridenByConstructor(){  LOGGER.debug("doCheckWithNotEmptyTextAndNotEmptyResultOverridenByConstructor");  elements.add(element);  mockTestSolutionHandler.addTestSolution(TestSolution.FAILED);  expectLastCall().once();  expect(mockTextElementBuilder.buildTextFromElement(element)).andReturn("something");  mockProcessRemarkService.addSourceCodeRemarkOnElement(TestSolution.FAILED,element,TEXT_NOT_EMPTY_MSG);  expectLastCall().once();  TextEmptinessChecker instance=new TextEmptinessChecker(mockTextElementBuilder,new ImmutablePair(TestSolution.PASSED,TEXT_EMPTY_MSG),new ImmutablePair(TestSolution.FAILED,TEXT_NOT_EMPTY_MSG));  instance.setProcessRemarkService(mockProcessRemarkService);  replay(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler,mockProcessRemarkService);  instance.doCheck(mockSSPHandler,elements,mockTestSolutionHandler);  verify(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler,mockProcessRemarkService);}  }
class C{  private void copyArrays(){  String[] oldSyms=_symbols;  int size=oldSyms.length;  _symbols=new String[size];  System.arraycopy(oldSyms,0,_symbols,0,size);  Bucket[] oldBuckets=_buckets;  size=oldBuckets.length;  _buckets=new Bucket[size];  System.arraycopy(oldBuckets,0,_buckets,0,size);}  }
class C{  @Override public boolean isAllowedToTransferFile(ContactId contact) throws RemoteException {  if (contact == null) {    throw new ServerApiIllegalArgumentException("contact must not be null!");  }  try {    Capabilities remoteCapabilities=mContactManager.getContactCapabilities(contact);    if (remoteCapabilities == null) {      if (sLogger.isActivated()) {        sLogger.debug("Cannot transfer file as the capabilities of contact " + contact + " are not known.");      }      return false;    }    FileTransferProtocol protocol=getFileTransferProtocolForOneToOneFileTransfer(contact);    if (protocol == null) {      if (sLogger.isActivated()) {        sLogger.debug("Cannot transfer file as no valid file transfer protocol could be determined.");      }      return false;    }    MessagingMode mode=mRcsSettings.getMessagingMode();switch (mode) {case INTEGRATED:case SEAMLESS:      if ((FileTransferProtocol.MSRP == protocol && mRcsSettings.isFtAlwaysOn()) || (FileTransferProtocol.HTTP == protocol && mRcsSettings.isFtHttpCapAlwaysOn())) {        break;      }    if (!mImService.isCapabilitiesValid(remoteCapabilities)) {      if (sLogger.isActivated()) {        sLogger.debug("Cannot transfer file as the cached capabilities of contact " + contact + " are not valid anymore for one-to-one communication.");      }      return false;    }  break;default :break;}return true;} catch (ServerApiBaseException e) {if (!e.shouldNotBeLogged()) {sLogger.error(ExceptionUtil.getFullStackTrace(e));}throw e;}catch (Exception e) {sLogger.error(ExceptionUtil.getFullStackTrace(e));throw new ServerApiGenericException(e);}}  }
class C{  public boolean containsType(GasStack stack){  if (stack == null || stack.amount == 0) {    return false;  }  return stack.isGasEqual(theGas);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:48.007 -0400",hash_original_method="293291CBEB865291500E80151FFE418B",hash_generated_method="6A5A1A6CBB12E585FC918B50A74AC4FA") protected void write(StringBuffer buffer){  System.err.println(buffer.toString());}  }
class C{  public BST(E[] objects){  for (int i=0; i < objects.length; i++)   insert(objects[i]);}  }
class C{  public StringBody(final String text) throws UnsupportedEncodingException {  this(text,"text/plain",null);}  }
class C{  public List<IComment> appendLocalComment(final String comment) throws com.google.security.zynamics.binnavi.API.disassembly.CouldntSaveDataException, com.google.security.zynamics.binnavi.API.disassembly.CouldntLoadDataException {  List<IComment> currentComments=new ArrayList<IComment>();  try {    currentComments=m_node.getComments().appendLocalCodeNodeComment(comment);  } catch (  final CouldntSaveDataException exception) {    throw new com.google.security.zynamics.binnavi.API.disassembly.CouldntSaveDataException(exception);  }catch (  final CouldntLoadDataException exception) {    throw new com.google.security.zynamics.binnavi.API.disassembly.CouldntLoadDataException(exception);  }  return currentComments;}  }
class C{  public SnackbarBuilder messageTextColorRes(@ColorRes int messageTextColor){  this.messageTextColor=getColor(messageTextColor);  return this;}  }
class C{  protected final XObject executeRelativePathPattern(XPathContext xctxt,DTM dtm,int currentNode) throws javax.xml.transform.TransformerException {  XObject score=NodeTest.SCORE_NONE;  int context=currentNode;  DTMAxisTraverser traverser;  traverser=dtm.getAxisTraverser(m_axis);  for (int relative=traverser.first(context); DTM.NULL != relative; relative=traverser.next(context,relative)) {    try {      xctxt.pushCurrentNode(relative);      score=execute(xctxt);      if (score != NodeTest.SCORE_NONE)       break;    }  finally {      xctxt.popCurrentNode();    }  }  return score;}  }
class C{  @Override public boolean onPreparePanel(int featureId,View view,Menu menu){  if (featureId == Window.FEATURE_OPTIONS_PANEL && menu != null) {    if (mOptionsMenuInvalidated) {      mOptionsMenuInvalidated=false;      menu.clear();      onCreatePanelMenu(featureId,menu);    }    boolean goforit=super.onPreparePanel(featureId,view,menu);    goforit|=mFragments.dispatchPrepareOptionsMenu(menu);    return goforit;  }  return super.onPreparePanel(featureId,view,menu);}  }
class C{  public script addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public final double[] toArray4(double[] array,int offset){  if (array == null) {    throw new IllegalArgumentException("Array Is Null");  }  return toDoubleArray(array,offset,4);}  }
class C{  public static String checkPathEnding(String path){  path.replace('\\','/');  if (path.endsWith("/"))   return path; else   return path + "/";}  }
class C{  public DPolicyMappingChooser(JFrame parent,String title,PolicyMapping policyMapping){  super(parent,title,ModalityType.DOCUMENT_MODAL);  initComponents(policyMapping);}  }
class C{  static String stripLeadingAndTrailingQuotes(String str){  if (str.startsWith("\"")) {    str=str.substring(1,str.length());  }  if (str.endsWith("\"")) {    str=str.substring(0,str.length() - 1);  }  return str;}  }
class C{  public PeriodType withSecondsRemoved(){  return withFieldRemoved(6,"NoSeconds");}  }
class C{  public static boolean isContentType(String contentType,Message message){  if (contentType == null) {    return message.getContentType() == null;  } else {    return contentType.equals(message.getContentType());  }}  }
class C{  private void updateRecoverPointVolumes(UnManagedExportMask mask,List<Initiator> initiators){  StringBuilder nonRecoverPointInitiators=new StringBuilder();  int rpPortInitiatorCount=0;  for (  Initiator init : initiators) {    if (this._rpPortInitiators.contains(init.getId())) {      _logger.info("export mask {} contains RPA initiator {}",mask.getMaskName(),init.getInitiatorPort());      rpPortInitiatorCount++;    } else {      nonRecoverPointInitiators.append(init.getInitiatorPort()).append(" ");    }  }  if (rpPortInitiatorCount > 0) {    _logger.info("export mask {} contains {} RPA initiators",mask.getMaskName(),rpPortInitiatorCount);    if (rpPortInitiatorCount < initiators.size()) {      _logger.warn("   there are some ports in this mask that are not " + "RPA initiators: " + nonRecoverPointInitiators);    }    Set<String> unmanagedRecoverPointMasks=(Set<String>)_keyMap.get(Constants.UNMANAGED_RECOVERPOINT_MASKS_SET);    if (unmanagedRecoverPointMasks == null) {      unmanagedRecoverPointMasks=new HashSet<String>();      _keyMap.put(Constants.UNMANAGED_RECOVERPOINT_MASKS_SET,unmanagedRecoverPointMasks);    }    _logger.info("adding mask {} to unmanaged RP masks list",mask.getMaskName());    unmanagedRecoverPointMasks.add(mask.getId().toString());  }}  }
class C{  public boolean endsWith(final String str){  if (str == null) {    return false;  }  final int len=str.length();  if (len == 0) {    return true;  }  if (len > size) {    return false;  }  int pos=size - len;  for (int i=0; i < len; i++, pos++) {    if (buffer[pos] != str.charAt(i)) {      return false;    }  }  return true;}  }
class C{  protected void installListeners(int eventID){  Window topLevelWindows[]=EventQueueMonitor.getTopLevelWindows();  if (topLevelWindows != null) {    for (int i=0; i < topLevelWindows.length; i++) {      installListeners(topLevelWindows[i],eventID);    }  }}  }
class C{  public String convertTClassifierIterableToString(EDataType eDataType,Object instanceValue){  return super.convertToString(instanceValue);}  }
class C{  public static final Token newToken(int ofKind){switch (ofKind) {default :    return new Token();}}  }
class C{  private static void copyStringAttVals(InstanceHolder holder,Map<String,Integer> stringAttIndexes){  for (  String attName : stringAttIndexes.keySet()) {    Attribute att=holder.m_instance.dataset().attribute(attName);    String val=holder.m_instance.stringValue(att);    if (holder.m_stringVals == null) {      holder.m_stringVals=new HashMap<String,String>();    }    holder.m_stringVals.put(attName,val);  }}  }
class C{  public CSearchResult(final long offset,final int length){  m_offset=offset;  m_length=length;}  }
class C{  private int measureWidth(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    int count=mViewPager.getAdapter().getCount();    if (mViewPager.getAdapter() instanceof InfinitePagerAdapter) {      count=((InfinitePagerAdapter)mViewPager.getAdapter()).getRealCount();    }    result=getPaddingLeft() + getPaddingRight() + (count * mLineWidth)+ ((count - 1) * mGapWidth);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)Math.ceil(result);}  }
class C{  public boolean isResolvedTypeInferredFromExpectedType(){  return this.ast.getBindingResolver().isResolvedTypeInferredFromExpectedType(this);}  }
class C{  private void add(final IProgressOperation operation){  final GridBagConstraints constraints=new GridBagConstraints();  constraints.fill=GridBagConstraints.HORIZONTAL;  constraints.gridy=counter++;  constraints.gridx=0;  constraints.weightx=1;  constraints.weighty=1;  m_progressPanel.add(operation.getProgressPanel(),constraints);}  }
class C{  public BaseCreateLinkRequestBuilder(final String requestUrl,final IOneDriveClient client,final List<Option> options,final String type){  super(requestUrl,client,options);  mType=type;}  }
class C{  @Override @SuppressWarnings("FinalizeDoesntCallSuperFinalize") protected final void finalize(){}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void parse(byte[] cs,Path gp,FlPoint pt,FlPoint wid){  int loc=0;  float x1, x2, x3, y1, y2, y3;  while (loc < cs.length) {    int v=((int)cs[loc++]) & 0xff;    if (v == 255) {      stack[sloc++]=((((int)cs[loc]) & 0xff) << 24) + ((((int)cs[loc + 1]) & 0xff) << 16) + ((((int)cs[loc + 2]) & 0xff) << 8)+ ((((int)cs[loc + 3]) & 0xff));      loc+=4;    } else     if (v >= 251) {      stack[sloc++]=-((v - 251) << 8) - (((int)cs[loc]) & 0xff) - 108;      loc++;    } else     if (v >= 247) {      stack[sloc++]=((v - 247) << 8) + (((int)cs[loc]) & 0xff) + 108;      loc++;    } else     if (v >= 32) {      stack[sloc++]=v - 139;    } else {switch (v) {case 0:        throw new RuntimeException("Bad command (" + v + ")");case 1:      sloc=0;    break;case 2:  throw new RuntimeException("Bad command (" + v + ")");case 3:sloc=0;break;case 4:pt.y+=pop();gp.moveTo(pt.x,pt.y);sloc=0;break;case 5:pt.y+=pop();pt.x+=pop();gp.lineTo(pt.x,pt.y);sloc=0;break;case 6:pt.x+=pop();gp.lineTo(pt.x,pt.y);sloc=0;break;case 7:pt.y+=pop();gp.lineTo(pt.x,pt.y);sloc=0;break;case 8:y3=pop();x3=pop();y2=pop();x2=pop();y1=pop();x1=pop();gp.cubicTo(pt.x + x1,pt.y + y1,pt.x + x1 + x2,pt.y + y1 + y2,pt.x + x1 + x2+ x3,pt.y + y1 + y2+ y3);pt.x+=x1 + x2 + x3;pt.y+=y1 + y2 + y3;sloc=0;break;case 9:gp.close();sloc=0;break;case 10:int n=(int)pop();if (subrs[n] == null) {System.out.println("No subroutine #" + n);} else {callcount++;if (callcount > 10) {System.out.println("Call stack too large");} else {parse(subrs[n],gp,pt,wid);}callcount--;}break;case 11:return;case 12:v=((int)cs[loc++]) & 0xff;if (v == 6) {char a=(char)pop();char b=(char)pop();float y=pop();float x=pop();buildAccentChar(x,y,a,b,gp);sloc=0;} else if (v == 7) {wid.y=pop();wid.x=pop();pt.y=pop();pt.x=pop();sloc=0;} else if (v == 12) {float b=pop();float a=pop();stack[sloc++]=a / b;} else if (v == 33) {pt.y=pop();pt.x=pop();gp.moveTo(pt.x,pt.y);sloc=0;} else if (v == 0) {sloc=0;} else if (v == 1) {sloc=0;} else if (v == 2) {sloc=0;} else if (v == 16) {int cn=(int)pop();int countargs=(int)pop();switch (cn) {case 0:psStack[psLoc++]=pop();psStack[psLoc++]=pop();pop();break;case 3:psStack[psLoc++]=3;break;default :for (int i=0; i > countargs; i--) {psStack[psLoc++]=pop();}break;}} else if (v == 17) {stack[sloc++]=psStack[psLoc - 1];psLoc--;} else {throw new RuntimeException("Bad command (" + v + ")");}break;case 13:wid.x=pop();wid.y=0;pt.x=pop();pt.y=0;sloc=0;break;case 14:break;case 15:case 16:case 17:case 18:case 19:case 20:throw new RuntimeException("Bad command (" + v + ")");case 21:pt.y+=pop();pt.x+=pop();gp.moveTo(pt.x,pt.y);sloc=0;break;case 22:pt.x+=pop();gp.moveTo(pt.x,pt.y);sloc=0;break;case 23:case 24:case 25:case 26:case 27:case 28:case 29:throw new RuntimeException("Bad command (" + v + ")");case 30:x3=pop();y2=pop();x2=pop();y1=pop();x1=y3=0;gp.cubicTo(pt.x,pt.y + y1,pt.x + x2,pt.y + y1 + y2,pt.x + x2 + x3,pt.y + y1 + y2);pt.x+=x2 + x3;pt.y+=y1 + y2;sloc=0;break;case 31:y3=pop();y2=pop();x2=pop();x1=pop();y1=x3=0;gp.cubicTo(pt.x + x1,pt.y,pt.x + x1 + x2,pt.y + y2,pt.x + x1 + x2,pt.y + y2 + y3);pt.x+=x1 + x2;pt.y+=y2 + y3;sloc=0;break;}}}}  }
class C{  private static boolean isFile(String input){  return input.toLowerCase().startsWith("file");}  }
class C{  public boolean hasAuthority(){  return (_authority != null) || _is_net_path;}  }
class C{  static boolean substringMatches(boolean lowerCase,String source,int startIndex,String match){  if (startIndex + match.length() > source.length())   return false;  for (int i=0; i < match.length(); i++) {    char s=source.charAt(startIndex + i);    char m=match.charAt(i);    if (s == m)     continue;    if (lowerCase && Character.toLowerCase(s) == m)     continue;    return false;  }  return true;}  }
class C{  public void taskSessionId(IgniteUuid sesId){  assert sesId != null;  this.sesId=sesId;}  }
class C{  public String generateRulesTipText(){  return "Whether to generate rules (decision list) rather than a tree.";}  }
class C{  public void sendMessage(ContactId contact){  try {    String content="Hello world";    getMultimediaSessionApi().sendInstantMultimediaMessage(MessagingSessionUtils.SERVICE_ID,contact,content.getBytes(),MessagingSessionUtils.SERVICE_CONTENT_TYPE);    Utils.displayToast(this,getString(R.string.label_instant_message_sent));  } catch (  RcsServiceException e) {    showExceptionThenExit(e);  }}  }
class C{  public boolean isOverlappedBy(final Range<T> otherRange){  if (otherRange == null) {    return false;  }  return otherRange.contains(minimum) || otherRange.contains(maximum) || contains(otherRange.minimum);}  }
class C{  public void cpDir(String fromDir,String toDir){  StringBuilder buf=new StringBuilder();  String command=String.format(ImageServerDialogProperties.getString("cmd.cpDir"),fromDir,toDir);  sendWaitFor(command,defaultTimeout,prompts,buf);  log.debug(buf.toString());}  }
class C{  @Deprecated public Date(int year,int month,int date,int hrs,int min,int sec){  int y=year + 1900;  if (month >= 12) {    y+=month / 12;    month%=12;  } else   if (month < 0) {    y+=CalendarUtils.floorDivide(month,12);    month=CalendarUtils.mod(month,12);  }  BaseCalendar cal=getCalendarSystem(y);  cdate=(BaseCalendar.Date)cal.newCalendarDate(TimeZone.getDefaultRef());  cdate.setNormalizedDate(y,month + 1,date).setTimeOfDay(hrs,min,sec,0);  getTimeImpl();  cdate=null;}  }
class C{  public static Object convertStringToObject(String value,Class<?> type){  Object obj=null;  try {    if (String.class.equals(type)) {      obj=value;    }    if (Long.class.equals(type) || long.class.equals(type)) {      obj=Long.parseLong(value);    } else     if (Integer.class.equals(type) || int.class.equals(type)) {      obj=Integer.parseInt(value);    } else     if (Double.class.equals(type) || double.class.equals(type)) {      obj=Double.parseDouble(value);    } else     if (Float.class.equals(type) || float.class.equals(type)) {      obj=Float.parseFloat(value);    }    if (obj != null)     return obj;  } catch (  NumberFormatException ex) {    throw new IllegalArgumentException("Fail to convert string: " + value + " into type of "+ type,ex);  }  throw new IllegalArgumentException("Fail to convert string: " + value + " into type of "+ type+ ", illegal type: "+ type);}  }
class C{  public boolean isLockGrantor(){  return lockGrantor;}  }
class C{  public void initProperties(){  if (this.initProperties) {    return;  }synchronized (this) {    if (this.initProperties) {      return;    }    getBot().memory().loadProperties("Twitter");    String property=this.bot.memory().getProperty("Twitter.welcomeMessage");    if (property != null) {      this.welcomeMessage=property;    }    property=this.bot.memory().getProperty("Twitter.autoFollow");    if (property != null) {      this.autoFollow=Boolean.valueOf(property);    }    property=this.bot.memory().getProperty("Twitter.autoFollowFriendsFriends");    if (property != null) {      this.autoFollowFriendsFriends=Boolean.valueOf(property);    }    property=this.bot.memory().getProperty("Twitter.autoFollowFriendsFollowers");    if (property != null) {      this.autoFollowFriendsFollowers=Boolean.valueOf(property);    }    property=this.bot.memory().getProperty("Twitter.followMessages");    if (property != null) {      this.followMessages=Boolean.valueOf(property);    }    property=this.bot.memory().getProperty("Twitter.maxFriends");    if (property != null) {      this.maxFriends=Integer.valueOf(property);    }    property=this.bot.memory().getProperty("Twitter.maxStatus");    if (property != null) {      this.maxStatus=Integer.valueOf(property);    }    property=this.bot.memory().getProperty("Twitter.maxSearch");    if (property != null) {      this.maxSearch=Integer.valueOf(property);    }    property=this.bot.memory().getProperty("Twitter.processStatus");    if (property != null) {      this.processStatus=Boolean.valueOf(property);    }    property=this.bot.memory().getProperty("Twitter.listenStatus");    if (property != null) {      this.listenStatus=Boolean.valueOf(property);    }    property=this.bot.memory().getProperty("Twitter.replyToMentions");    if (property != null) {      this.replyToMentions=Boolean.valueOf(property);    }    property=this.bot.memory().getProperty("Twitter.replyToMessages");    if (property != null) {      this.replyToMessages=Boolean.valueOf(property);    }    property=this.bot.memory().getProperty("Twitter.autoTweet");    if (property != null) {      this.autoTweet=Boolean.valueOf(property);    }    property=this.bot.memory().getProperty("Twitter.autoTweetHours");    if (property != null) {      this.autoTweetHours=Integer.valueOf(property);    }    Network memory=getBot().memory().newMemory();    Vertex twitter=memory.createVertex(getPrimitive());    this.statusKeywords=new ArrayList<String>();    List<Relationship> keywords=twitter.orderedRelationships(Primitive.STATUSKEYWORDS);    if (keywords != null) {      for (      Relationship relationship : keywords) {        String text=((String)relationship.getTarget().getData()).trim();        if (!text.isEmpty()) {          this.statusKeywords.add(text);        }      }    }    this.retweet=new ArrayList<String>();    keywords=twitter.orderedRelationships(Primitive.RETWEET);    if (keywords != null) {      for (      Relationship relationship : keywords) {        String text=((String)relationship.getTarget().getData()).trim();        if (!text.isEmpty()) {          this.retweet.add(text);        }      }    }    this.autoFollowKeywords=new ArrayList<String>();    List<Relationship> search=twitter.orderedRelationships(Primitive.AUTOFOLLOWKEYWORDS);    if (search != null) {      for (      Relationship relationship : search) {        String text=((String)relationship.getTarget().getData()).trim();        if (!text.isEmpty()) {          this.autoFollowKeywords.add(text);        }      }    }    this.autoFollowSearch=new ArrayList<String>();    search=twitter.orderedRelationships(Primitive.AUTOFOLLOWSEARCH);    if (search != null) {      for (      Relationship relationship : search) {        String text=((String)relationship.getTarget().getData()).trim();        if (!text.isEmpty()) {          this.autoFollowSearch.add(text);        }      }    }    this.tweetSearch=new ArrayList<String>();    search=twitter.orderedRelationships(Primitive.TWEETSEARCH);    if (search != null) {      for (      Relationship relationship : search) {        String text=((String)relationship.getTarget().getData()).trim();        if (!text.isEmpty()) {          this.tweetSearch.add(text);        }      }    }    this.tweetRSS=new ArrayList<String>();    List<Relationship> rss=twitter.orderedRelationships(Primitive.TWEETRSS);    if (rss != null) {      for (      Relationship relationship : rss) {        String text=((String)relationship.getTarget().getData()).trim();        if (!text.isEmpty()) {          this.tweetRSS.add(text);        }      }    }    this.rssKeywords=new ArrayList<String>();    keywords=twitter.orderedRelationships(Primitive.RSSKEYWORDS);    if (keywords != null) {      for (      Relationship relationship : keywords) {        String text=((String)relationship.getTarget().getData()).trim();        this.rssKeywords.add(text);      }    }    this.initProperties=true;  }}  }
class C{  private boolean valid(final int startIndex,final String line,String identifier){  int pos=identStart(line,identifier);  return pos != -1 && pos > startIndex && identifier.length() >= 2;}  }
class C{  public static Pair<ExprTableAccessNode,ExprDotNode> checkTableNameGetExprForSubproperty(TableService tableService,String tableName,String subproperty){  TableMetadata metadata=tableService.getTableMetadata(tableName);  if (metadata == null) {    return null;  }  int index=ASTUtil.unescapedIndexOfDot(subproperty);  if (index == -1) {    if (metadata.getKeyTypes().length > 0) {      return null;    }    ExprTableAccessNodeSubprop tableNode=new ExprTableAccessNodeSubprop(tableName,subproperty);    return new Pair<ExprTableAccessNode,ExprDotNode>(tableNode,null);  }  List<ExprChainedSpec> chainedSpecs=new ArrayList<ExprChainedSpec>(1);  chainedSpecs.add(new ExprChainedSpec(subproperty.substring(index + 1),Collections.<ExprNode>emptyList(),true));  ExprTableAccessNodeSubprop tableNode=new ExprTableAccessNodeSubprop(tableName,subproperty.substring(0,index));  ExprDotNode dotNode=new ExprDotNode(chainedSpecs,false,false);  dotNode.addChildNode(tableNode);  return new Pair<ExprTableAccessNode,ExprDotNode>(tableNode,dotNode);}  }
class C{  void resetAllocIndex(){  resetAllocIndex(0);}  }
class C{  public static FieldRepository make(String rawSig,GenericsFactory f){  return new FieldRepository(rawSig,f);}  }
class C{  @Inline public final ObjectReference pop(){  if (checkDequeue(1)) {    return uncheckedDequeue().toObjectReference();  } else {    return ObjectReference.nullReference();  }}  }
class C{  public void testSealedObject1() throws Exception {  String secret="secret string";  try {    new SealedObject(secret,null);    fail("NullPointerException should be thrown in the case " + "of null cipher.");  } catch (  NullPointerException e) {  }  KeyGenerator kg=KeyGenerator.getInstance("DES");  Key key=kg.generateKey();  IvParameterSpec ips=new IvParameterSpec(new byte[]{1,2,3,4,5,6,7,8});  Cipher cipher=Cipher.getInstance("DES/CBC/PKCS5Padding");  cipher.init(Cipher.ENCRYPT_MODE,key,ips);  SealedObject so=new SealedObject(secret,cipher);  cipher=Cipher.getInstance("DES/CBC/NoPadding");  cipher.init(Cipher.ENCRYPT_MODE,key,ips);  try {    new SealedObject(secret,cipher);    fail("IllegalBlockSizeException expected");  } catch (  IllegalBlockSizeException e) {  }}  }
class C{  public void test_txIsolation() throws IOException {  final Properties p=new Properties(getProperties());  p.setProperty(AbstractTripleStore.Options.AXIOMS_CLASS,NoAxioms.class.getName());  p.setProperty(AbstractTripleStore.Options.VOCABULARY_CLASS,NoVocabulary.class.getName());  final AbstractTripleStore initialKb=getStore(p);  try {    final String namespace=initialKb.getNamespace() + "_test";    final IIndexManager indexManager=initialKb.getIndexManager();    final ITransactionService txService=((Journal)indexManager).getTransactionManager().getTransactionService();{      final long tx0=txService.newTx(ITx.READ_COMMITTED);      assertNull(indexManager.getResourceLocator().locate(namespace,tx0));      txService.abort(tx0);    }{      final long txCreate=txService.newTx(ITx.UNISOLATED);      assertNull(indexManager.getResourceLocator().locate(namespace,txCreate));      final AbstractTripleStore txCreateView=new LocalTripleStore(indexManager,namespace,Long.valueOf(txCreate),p);      txCreateView.create();      txService.commit(txCreate);    }    final AbstractTripleStore unisolatedStore=((AbstractTripleStore)indexManager.getResourceLocator().locate(namespace,ITx.UNISOLATED));    final BigdataValueFactory f=unisolatedStore.getValueFactory();    final BigdataURI john=f.createURI("http://www.bigdata.com/john");    final BigdataURI loves=f.createURI("http://www.bigdata.com/loves");    final BigdataURI mary=f.createURI("http://www.bigdata.com/mary");    final BigdataValue[] terms=new BigdataValue[]{john,loves,mary};    unisolatedStore.getLexiconRelation().addTerms(terms,terms.length,false);{      final long tx1=txService.newTx(ITx.READ_COMMITTED);      final AbstractTripleStore tx1View=(AbstractTripleStore)indexManager.getResourceLocator().locate(namespace,tx1);      assertEquals(0L,tx1View.getExplicitStatementCount(null));      final long tx2=txService.newTx(ITx.UNISOLATED);      final long tx3=txService.newTx(ITx.UNISOLATED);      final AbstractTripleStore tx2View=(AbstractTripleStore)indexManager.getResourceLocator().locate(namespace,tx2);      final AbstractTripleStore tx3View=(AbstractTripleStore)indexManager.getResourceLocator().locate(namespace,tx3);{        final StatementBuffer<Statement> sb=new StatementBuffer<Statement>(tx2View,10);        sb.add(john,loves,mary);        sb.flush();      }      assertFalse(tx1View.hasStatement(john,loves,mary));      assertFalse(tx3View.hasStatement(john,loves,mary));      assertTrue(tx2View.hasStatement(john,loves,mary));      txService.commit(tx2);      assertFalse(tx1View.hasStatement(john,loves,mary));      assertFalse(tx3View.hasStatement(john,loves,mary));      final long tx4=txService.newTx(ITx.READ_COMMITTED);      final AbstractTripleStore tx4View=(AbstractTripleStore)indexManager.getResourceLocator().locate(namespace,tx4);      final long tx5=txService.newTx(ITx.READ_COMMITTED);      final AbstractTripleStore tx5View=(AbstractTripleStore)indexManager.getResourceLocator().locate(namespace,tx5);      assertTrue(tx4View.hasStatement(john,loves,mary));      assertTrue(tx5View.hasStatement(john,loves,mary));{        final StatementBuffer<Statement> sb=new StatementBuffer<Statement>(tx3View,10);        sb.add(john,loves,mary);        sb.flush();      }      txService.commit(tx3);      txService.abort(tx1);      txService.abort(tx4);      txService.abort(tx5);    }  }  finally {    initialKb.__tearDownUnitTest();  }}  }
class C{  public JDirectoryChooser(File currentDirectory,FileSystemView fsv){  super(currentDirectory,fsv);  setShowingCreateDirectory(true);}  }
class C{  private String attr(String name,Element element){  String res=text(element,"@" + name);  int i=name.indexOf(':');  if (res.length() == 0 && i >= 0) {    return attr(name.substring(i + 1),element);  }  return res;}  }
class C{  public MultiTextEdit(int offset,int length){  super(offset,length);  fDefined=true;}  }
class C{  public RequestMethodsRequestCondition(RequestMethod... requestMethods){  this(asList(requestMethods));}  }
class C{  protected ListSelector addListSetting(String name,int width,int height,boolean enableSortingButtons){  ListSelector result=new ListSelector(this,enableSortingButtons);  result.setPreferredSize(new Dimension(width,height));  listSettings.put(name,result);  return result;}  }
class C{  public CRLReasonCodeExtension(Boolean critical,Object value) throws IOException {  this.extensionId=PKIXExtensions.ReasonCode_Id;  this.critical=critical.booleanValue();  this.extensionValue=(byte[])value;  DerValue val=new DerValue(this.extensionValue);  this.reasonCode=val.getEnumerated();}  }
class C{  @NoInline public static void postProcess(RVMThread myThread){  CodeArray bridge=myThread.bridgeInstructions;  Address bridgeaddr=Magic.objectAsAddress(bridge);  if (VM.TraceOnStackReplacement) {    VM.sysWrite("osr post processing\n");  }  Offset offset=myThread.tsFPOffset.plus(STACKFRAME_RETURN_ADDRESS_OFFSET);  Magic.objectAsAddress(myThread.getStack()).store(bridgeaddr,offset);  myThread.tsFPOffset=Offset.zero();  myThread.isWaitingForOsr=false;  myThread.bridgeInstructions=null;}  }
class C{  public void startUnRegistration(Context context){  String regId=Preference.getString(context,Constants.PreferenceFlag.REG_ID);  if (regId != null && !regId.isEmpty()) {    String serverIP=Constants.DEFAULT_HOST;    String prefIP=Preference.getString(context,Constants.PreferenceFlag.IP);    if (prefIP != null) {      serverIP=prefIP;    }    if (serverIP != null && !serverIP.isEmpty()) {      ServerConfig utils=new ServerConfig();      utils.setServerIP(serverIP);      CommonUtils.callSecuredAPI(context,utils.getAPIServerURL(context) + Constants.UNREGISTER_ENDPOINT + regId,HTTP_METHODS.DELETE,null,AgentDeviceAdminReceiver.this,Constants.UNREGISTER_REQUEST_CODE);      try {        LocalNotification.stopPolling(context);        CommonUtils.unRegisterClientApp(context,AgentDeviceAdminReceiver.this);        CommonUtils.clearAppData(context);      } catch (      AndroidAgentException e) {        Log.e(TAG,"Error occurred while removing Oauth application",e);      }    } else {      Log.e(TAG,"There is no valid IP to contact the server");    }  }}  }
class C{  private void DTDprolog() throws SAXException, IOException {  final java.io.Writer writer=m_writer;  if (m_needToOutputDocTypeDecl) {    outputDocTypeDecl(m_elemContext.m_elementName,false);    m_needToOutputDocTypeDecl=false;  }  if (m_inDoctype) {    writer.write(" [");    writer.write(m_lineSep,0,m_lineSepLen);    m_inDoctype=false;  }}  }
class C{  public void remove(View view){  mOverlayViewGroup.remove(view);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public ConvexHullOutlineHandle(SVGPathFigure owner,boolean isTransformHandle,boolean isHoverHandle){  super(owner);  if (isTransformHandle) {    if (isHoverHandle) {      stroke1Enabled=HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_1_HOVER;      strokeColor1Enabled=HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_1_HOVER;      stroke2Enabled=HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_2_HOVER;      strokeColor2Enabled=HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_2_HOVER;    } else {      stroke1Enabled=HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_1;      strokeColor1Enabled=HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_1;      stroke2Enabled=HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_2;      strokeColor2Enabled=HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_2;    }    stroke1Disabled=HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_1_DISABLED;    strokeColor1Disabled=HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_1_DISABLED;    stroke2Disabled=HandleAttributeKeys.TRANSFORM_BOUNDS_STROKE_2_DISABLED;    strokeColor2Disabled=HandleAttributeKeys.TRANSFORM_BOUNDS_COLOR_2_DISABLED;  } else {    if (isHoverHandle) {      stroke1Enabled=HandleAttributeKeys.RESIZE_BOUNDS_STROKE_1_HOVER;      strokeColor1Enabled=HandleAttributeKeys.RESIZE_BOUNDS_COLOR_1_HOVER;      stroke2Enabled=HandleAttributeKeys.RESIZE_BOUNDS_STROKE_2_HOVER;      strokeColor2Enabled=HandleAttributeKeys.RESIZE_BOUNDS_COLOR_2_HOVER;    } else {      stroke1Enabled=HandleAttributeKeys.RESIZE_BOUNDS_STROKE_1;      strokeColor1Enabled=HandleAttributeKeys.RESIZE_BOUNDS_COLOR_1;      stroke2Enabled=HandleAttributeKeys.RESIZE_BOUNDS_STROKE_2;      strokeColor2Enabled=HandleAttributeKeys.RESIZE_BOUNDS_COLOR_2;    }    stroke1Disabled=HandleAttributeKeys.RESIZE_BOUNDS_STROKE_1_DISABLED;    strokeColor1Disabled=HandleAttributeKeys.RESIZE_BOUNDS_COLOR_1_DISABLED;    stroke2Disabled=HandleAttributeKeys.RESIZE_BOUNDS_STROKE_2_DISABLED;    strokeColor2Disabled=HandleAttributeKeys.RESIZE_BOUNDS_COLOR_2_DISABLED;  }}  }
class C{  private void onNodeLeft(UUID nodeId){  GridClockDeltaSnapshot curr=pendingSnapshot;  if (curr != null)   curr.onNodeLeft(nodeId);}  }
class C{  public static void main(String[] args) throws Exception {  Scanner input=new Scanner(System.in);  System.out.print("Enter directory name: ");  File dir=new File(input.next());  if (dir.isDirectory()) {    System.out.println("Directory already exists");    System.exit(0);  }  if (dir.mkdirs()) {    System.out.println("Directory created successfully");  }}  }
class C{  public FitnessBasedArchive(FitnessEvaluator evaluator,int capacity){  this(evaluator,capacity,new ParetoDominanceComparator());}  }
class C{  public RDFFormat(String name,String mimeType,Charset charset,String fileExtension,boolean supportsNamespaces,boolean supportsContexts){  this(name,Arrays.asList(mimeType),charset,Arrays.asList(fileExtension),supportsNamespaces,supportsContexts);}  }
class C{  public static Resources openLayered(String resource,int dpi) throws IOException {  Resources r=open(resource + ".res",dpi);  String[] over=Display.getInstance().getPlatformOverrides();  int olen=over.length;  for (int iter=0; iter < olen; iter++) {    InputStream i=Display.getInstance().getResourceAsStream(classLoader,resource + "_" + over[iter]+ ".ovr");    if (i != null) {      r.override(i);      i.close();    }  }  return r;}  }
class C{  public boolean isData(){  return data != null;}  }
class C{  public static void onEvent(final Context context,final String event_id,final String label,final int acc,final HashMap<String,String> stringMap){  log.onEvent(context,new PostEvent(context,event_id,label,acc + "",0,stringMap));}  }
class C{  public LoginException(String message){  super(message);}  }
class C{  public boolean letsEnergyIn(byte aSide,int aCoverID,int aCoverVariable,ICoverable aTileEntity){  return false;}  }
class C{  @Override protected AcceptStatus accept(BytesRef term) throws IOException {  return AcceptStatus.YES;}  }
class C{  public T caseEntryPointSpec(EntryPointSpec object){  return null;}  }
class C{  public void printCase(Vertex equation,Writer writer,String indent,Set<Vertex> elements,List<Vertex> newVariables,List<Vertex> newEquations,List<Vertex> newStates,Network network) throws IOException {  Vertex variable=equation.getRelationship(Primitive.CASE);  Vertex pattern=equation.getRelationship(Primitive.PATTERN);  Vertex template=equation.getRelationship(Primitive.TEMPLATE);  Vertex that=equation.getRelationship(Primitive.THAT);  Vertex topic=equation.getRelationship(Primitive.TOPIC);  Vertex as=equation.getRelationship(Primitive.AS);  List<Relationship> states=equation.orderedRelationships(Primitive.GOTO);  List<Relationship> fors=equation.orderedRelationships(Primitive.FOR);  if (variable == null && pattern == null) {    return;  }  if ((variable != null) && variable.instanceOf(Primitive.VARIABLE) && (!elements.contains(variable))) {    newVariables.add(variable);    elements.add(variable);  }  writer.write(indent);  if (pattern != null) {    writer.write("pattern ");    variable=pattern;  } else {    writer.write("case ");  }  if (variable.instanceOf(Primitive.EQUATION)) {    writer.write("(");  }  printElement(variable,writer,indent,newEquations,newVariables,elements,network);  if (variable.instanceOf(Primitive.EQUATION)) {    writer.write(")");  }  if (as != null) {    writer.write(" as ");    printElement(as,writer,indent,newEquations,newVariables,elements,network);  }  if (topic != null) {    writer.write("\r\n");    writer.write(indent);    writer.write("\t");    writer.write("topic ");    printElement(topic,writer,indent,newEquations,newVariables,elements,network);  }  if (that != null) {    writer.write("\r\n");    writer.write(indent);    writer.write("\t");    writer.write("that ");    printElement(that,writer,indent,newEquations,newVariables,elements,network);  }  if (template != null) {    writer.write("\r\n");    writer.write(indent);    writer.write("\t");    writer.write("template ");    if (template.instanceOf(Primitive.EQUATION)) {      writer.write("(");    }    printElement(template,writer,indent,newEquations,newVariables,elements,network);    if (template.instanceOf(Primitive.EQUATION)) {      writer.write(")");    }  }  if (states != null) {    if ((states.size() == 1) && (states.get(0).getTarget().is(Primitive.RETURN))) {      writer.write(" return");    } else {      writer.write(" goto ");      for (Iterator<Relationship> iterator=states.iterator(); iterator.hasNext(); ) {        Vertex state=iterator.next().getTarget();        if (!elements.contains(state)) {          newStates.add(state);          elements.add(state);        }        printElement(state,writer,indent,null,newVariables,elements,network);        if (iterator.hasNext()) {          writer.write(", ");        }      }    }  }  if (fors != null) {    writer.write(" for each ");    for (Iterator<Relationship> iterator=fors.iterator(); iterator.hasNext(); ) {      Vertex argument=iterator.next().getTarget();      if (argument.instanceOf(Primitive.VARIABLE) && (!elements.contains(argument))) {        newVariables.add(argument);        elements.add(argument);      }      printElement(argument,writer,indent,null,newVariables,elements,network);      if (iterator.hasNext()) {        writer.write(" of ");      }    }  }  writer.write(";\r\n\r\n");}  }
class C{  public Long zrank(final String key,final String member){  checkIsInMulti();  client.zrank(key,member);  return client.getIntegerReply();}  }
class C{  static Intent createEmailIntent(Context context,long eventId,String body){  String ownerAccount=null;  String syncAccount=null;  String eventTitle=null;  String eventOrganizer=null;  Cursor eventCursor=getEventCursor(context,eventId);  try {    if (eventCursor != null && eventCursor.moveToFirst()) {      ownerAccount=eventCursor.getString(EVENT_INDEX_OWNER_ACCOUNT);      syncAccount=eventCursor.getString(EVENT_INDEX_ACCOUNT_NAME);      eventTitle=eventCursor.getString(EVENT_INDEX_TITLE);      eventOrganizer=eventCursor.getString(EVENT_INDEX_ORGANIZER);    }  }  finally {    if (eventCursor != null) {      eventCursor.close();    }  }  if (TextUtils.isEmpty(eventTitle)) {    eventTitle=context.getResources().getString(R.string.no_title_label);  }  List<String> toEmails=new ArrayList<String>();  List<String> ccEmails=new ArrayList<String>();  Cursor attendeesCursor=getAttendeesCursor(context,eventId);  try {    if (attendeesCursor != null && attendeesCursor.moveToFirst()) {      do {        int status=attendeesCursor.getInt(ATTENDEES_INDEX_STATUS);        String email=attendeesCursor.getString(ATTENDEES_INDEX_EMAIL);switch (status) {case Attendees.ATTENDEE_STATUS_DECLINED:          addIfEmailable(ccEmails,email,syncAccount);        break;default :      addIfEmailable(toEmails,email,syncAccount);  }} while (attendeesCursor.moveToNext());}}  finally {if (attendeesCursor != null) {attendeesCursor.close();}}if (toEmails.size() == 0 && ccEmails.size() == 0 && eventOrganizer != null) {addIfEmailable(toEmails,eventOrganizer,syncAccount);}Intent intent=null;if (ownerAccount != null && (toEmails.size() > 0 || ccEmails.size() > 0)) {intent=Utils.createEmailAttendeesIntent(context.getResources(),eventTitle,body,toEmails,ccEmails,ownerAccount);}if (intent == null) {return null;} else {intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);return intent;}}  }
class C{  public void write(int code) throws IOException {  if (_byteBuffer == null)   throw new IOException("Writer closed");  if ((code & 0xffffff80) == 0) {    _byteBuffer.put((byte)code);  } else {    write2(code);  }}  }
class C{  private static void closeEmbeddedDBConnection(){  try {    final String dbConnectionURL=PROTOCOL + DEFAULT_DBNAME + ";shutdown=true";    DriverManager.getConnection(dbConnectionURL);  } catch (  SQLException se) {    mLogger.trace("Database shut down normally.",se);  } finally {    embeddedDBConnection=null;  }}  }
class C{  public void addTabFragment(TabFragment tabFragment){  fragmentList.add(tabFragment);}  }
class C{  public void paint(Graphics2D g2D,Rectangle bounds,boolean isView,boolean isCopy){  m_ctx.put(CONTEXT_PAGE,m_pageInfo);  StringBuffer sb=new StringBuffer();  if (m_pageCount != 1)   sb.append(Msg.getMsg(m_ctx,"Page")).append(" ").append(m_pageNo).append(" ").append(Msg.getMsg(m_ctx,"of")).append(" ").append(m_pageCount); else   sb.append(" ");  m_ctx.put(CONTEXT_MULTIPAGE,sb.toString());  sb=new StringBuffer();  if (isCopy)   sb.append("(").append(Msg.getMsg(m_ctx,"DocumentCopy")).append(")"); else   sb.append(" ");  m_ctx.put(CONTEXT_COPY,sb.toString());  g2D.setColor(Color.white);  g2D.fillRect(bounds.x,bounds.y,bounds.width,bounds.height);  if (m_image != null) {    int x=(bounds.width / 2) - (m_image.getWidth(null) / 2);    int y=(bounds.height / 2) - (m_image.getHeight(null) / 2);    g2D.drawImage(m_image,x,y,null);  }  Point pageStart=new Point(bounds.getLocation());  for (int i=0; i < m_elements.size(); i++) {    PrintElement e=(PrintElement)m_elements.get(i);    e.paint(g2D,m_pageNo,pageStart,m_ctx,isView);  }}  }
class C{  private static ValueAnimator loadAnimator(Context context,AttributeSet attrs,ValueAnimator anim) throws NotFoundException {  TypedArray a=context.obtainStyledAttributes(attrs,Animator);  long duration=a.getInt(Animator_duration,0);  long startDelay=a.getInt(Animator_startOffset,0);  int valueType=a.getInt(Animator_valueType,VALUE_TYPE_FLOAT);  if (anim == null) {    anim=new ValueAnimator();  }  int valueFromIndex=Animator_valueFrom;  int valueToIndex=Animator_valueTo;  boolean getFloats=(valueType == VALUE_TYPE_FLOAT);  TypedValue tvFrom=a.peekValue(valueFromIndex);  boolean hasFrom=(tvFrom != null);  int fromType=hasFrom ? tvFrom.type : 0;  TypedValue tvTo=a.peekValue(valueToIndex);  boolean hasTo=(tvTo != null);  int toType=hasTo ? tvTo.type : 0;  if ((hasFrom && (fromType >= TypedValue.TYPE_FIRST_COLOR_INT) && (fromType <= TypedValue.TYPE_LAST_COLOR_INT)) || (hasTo && (toType >= TypedValue.TYPE_FIRST_COLOR_INT) && (toType <= TypedValue.TYPE_LAST_COLOR_INT))) {    getFloats=false;    anim.setEvaluator(new ArgbEvaluator());  }  if (getFloats) {    float valueFrom;    float valueTo;    if (hasFrom) {      if (fromType == TypedValue.TYPE_DIMENSION) {        valueFrom=a.getDimension(valueFromIndex,0f);      } else {        valueFrom=a.getFloat(valueFromIndex,0f);      }      if (hasTo) {        if (toType == TypedValue.TYPE_DIMENSION) {          valueTo=a.getDimension(valueToIndex,0f);        } else {          valueTo=a.getFloat(valueToIndex,0f);        }        anim.setFloatValues(valueFrom,valueTo);      } else {        anim.setFloatValues(valueFrom);      }    } else {      if (toType == TypedValue.TYPE_DIMENSION) {        valueTo=a.getDimension(valueToIndex,0f);      } else {        valueTo=a.getFloat(valueToIndex,0f);      }      anim.setFloatValues(valueTo);    }  } else {    int valueFrom;    int valueTo;    if (hasFrom) {      if (fromType == TypedValue.TYPE_DIMENSION) {        valueFrom=(int)a.getDimension(valueFromIndex,0f);      } else       if ((fromType >= TypedValue.TYPE_FIRST_COLOR_INT) && (fromType <= TypedValue.TYPE_LAST_COLOR_INT)) {        valueFrom=a.getColor(valueFromIndex,0);      } else {        valueFrom=a.getInt(valueFromIndex,0);      }      if (hasTo) {        if (toType == TypedValue.TYPE_DIMENSION) {          valueTo=(int)a.getDimension(valueToIndex,0f);        } else         if ((toType >= TypedValue.TYPE_FIRST_COLOR_INT) && (toType <= TypedValue.TYPE_LAST_COLOR_INT)) {          valueTo=a.getColor(valueToIndex,0);        } else {          valueTo=a.getInt(valueToIndex,0);        }        anim.setIntValues(valueFrom,valueTo);      } else {        anim.setIntValues(valueFrom);      }    } else {      if (hasTo) {        if (toType == TypedValue.TYPE_DIMENSION) {          valueTo=(int)a.getDimension(valueToIndex,0f);        } else         if ((toType >= TypedValue.TYPE_FIRST_COLOR_INT) && (toType <= TypedValue.TYPE_LAST_COLOR_INT)) {          valueTo=a.getColor(valueToIndex,0);        } else {          valueTo=a.getInt(valueToIndex,0);        }        anim.setIntValues(valueTo);      }    }  }  anim.setDuration(duration);  anim.setStartDelay(startDelay);  if (a.hasValue(Animator_repeatCount)) {    anim.setRepeatCount(a.getInt(Animator_repeatCount,0));  }  if (a.hasValue(Animator_repeatMode)) {    anim.setRepeatMode(a.getInt(Animator_repeatMode,ValueAnimator.RESTART));  }  final int resID=a.getResourceId(Animator_interpolator,0);  if (resID > 0) {    anim.setInterpolator(AnimationUtils.loadInterpolator(context,resID));  }  a.recycle();  return anim;}  }
class C{  public static void countLetters(int[] count,String str){  for (int i=0; i < str.length(); i++) {    if (Character.isLetter(str.charAt(i)))     count[(int)(str.charAt(i) - 'A')]++;  }}  }
class C{  public void testProviderURL(){  RuntimeConfiguration configuration=new Jonas4xRuntimeConfiguration();  configuration.setProperty(RemotePropertySet.URI,"foo");  Hashtable<String,Object> connectionOptions=factory.readConfiguration(configuration);  assertEquals(connectionOptions.get(Context.INITIAL_CONTEXT_FACTORY),MEJBMBeanServerConnectionFactory.DEFAULT_JNDI_INITIAL_CTX_FACTORY);  assertEquals(connectionOptions.get(Context.PROVIDER_URL),"foo");  assertNull(connectionOptions.get(Context.SECURITY_PRINCIPAL));  assertNull(connectionOptions.get(Context.SECURITY_CREDENTIALS));  assertEquals(factory.mejbJndiPath,MEJBMBeanServerConnectionFactory.DEFAULT_JNDI_MEJB_PATH);  assertNull(factory.username);  assertNull(factory.password);  assertNull(factory.jaasFile);  assertNull(factory.jaasEntry);}  }
class C{  protected HttpResponse executePOST(String request,HttpEntity entity,String... params) throws IOException {  ensureOpen();  HttpPost m=new HttpPost(queryString(request,params));  m.setEntity(entity);  HttpResponse response=httpc.execute(m);  verifyStatus(response);  return response;}  }
class C{  public static Node removeChildren(Node node){  if (node.getNodeType() == Node.ELEMENT_NODE) {    NodeList children=node.getChildNodes();    for (int i=0; i < children.getLength(); i++) {      Node child=children.item(i);      Node temp=node.removeChild(child);      i--;    }  }  return node;}  }
class C{  public static void swap(List list,int i,int j){  Object tmp=list.get(i);  list.set(i,list.get(j));  list.set(j,tmp);}  }
class C{  public void div(){  RatPoly top=pop();  RatPoly next=pop();  push(next.div(top));}  }
class C{  public void add(Symbol symbol){  symbols.add(symbol);}  }
class C{  public void optionRestoreView(){  if (mDataList.size() > 0) {    String pathStl=mDataList.get(0).getPathFile();    mDataList.clear();    openFile(pathStl);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void updateRepresentation(SqlStatementData dataToDisplay){  if (null != dataToDisplay) {    String boldSql=StringUtils.replaceEach(dataToDisplay.getSql(),new String[]{"?","<",">","&"},new String[]{"<b>?</b>","&lt;","&gt;","&amp;"});    if (CollectionUtils.isNotEmpty(dataToDisplay.getParameterValues())) {      int index=0;      StringBuilder stringBuilder=new StringBuilder(boldSql.length());      for (int i=0; i < boldSql.length(); i++) {        char c=boldSql.charAt(i);        if ('?' == c) {          String parameter=dataToDisplay.getParameterValues().get(index);          if ((null == parameter) || "".equals(parameter.trim())) {            stringBuilder.append(c);          } else {            stringBuilder.append(parameter);          }          index=index + 1;        } else {          stringBuilder.append(c);        }      }      boldSql=stringBuilder.toString();    }    formText.setText("<form><p>" + boldSql + "</p></form>",true,false);  } else {    formText.setText("",false,false);  }  main.layout();  fitSizeOfScrolledContent();}  }
class C{  @Override public void toBytes(ByteBuf buf){  buf.writeInt(numPigs);  buf.writeByte(hand.ordinal());}  }
class C{  @Override public void close(){  if (!closed) {    while (!stack.isEmpty()) {      pop();    }    closed=true;  }}  }
class C{  public DTSweepConstraint(TriangulationPoint p1,TriangulationPoint p2){  p=p1;  q=p2;  if (p1.getY() > p2.getY()) {    q=p1;    p=p2;  } else   if (p1.getY() == p2.getY()) {    if (p1.getX() > p2.getX()) {      q=p1;      p=p2;    } else     if (p1.getX() == p2.getX()) {      logger.info("Failed to create constraint {}={}",p1,p2);    }  }  q.addEdge(this);}  }
class C{  public String nextKeyMarker(){  return nextKeyMarker;}  }
class C{  public Builder contentItems(List<ContentItem> contentItems){  this.contentItems=contentItems;  contentType=HttpMediaType.APPLICATION_JSON;  return this;}  }
class C{  @Override protected void checkValid() throws URIException {  if (!(equals(_scheme,DEFAULT_SCHEME) || _scheme == null)) {    throw new URIException(URIException.PARSING,"wrong class use");  }}  }
class C{  public void init() throws ServletException {}  }
class C{  private TaskResourceRep createManualReadyTask(Vcenter vcenter){  Operation op=new Operation();  op.setResourceType(ResourceOperationTypeEnum.DISCOVER_VCENTER);  op.ready("Vcenter not discoverable.");  String taskId=UUID.randomUUID().toString();  _dbClient.createTaskOpStatus(Host.class,vcenter.getId(),taskId,op);  return toTask(vcenter,taskId,op);}  }
class C{  public Shape createArrowRight(final double x,final double y,final double w,final double h){  path.reset();  path.moveTo(x,y);  path.lineTo(x + w,y + h / 2);  path.lineTo(x,y + h);  path.closePath();  return path;}  }
class C{  public static void assertFalse(String message,boolean condition){  if (condition) {    fail(message);  }}  }
class C{  public static void v(String tag,String msg){  if (sLevel > LEVEL_VERBOSE) {    return;  }  Log.v(tag,msg);}  }
class C{  @Override public void test(List<T> list) throws ParameterException {  Set<T> values=new HashSet<>();  for (  T pv : list) {    if (!values.add(pv)) {      Object[] parametervaluesarr=list.toArray();      throw new WrongParameterValueException("Global Parameter Constraint Error:\n" + "Parameter values must have different values. Current values: " + Arrays.deepToString(parametervaluesarr) + ".\n");    }  }}  }
class C{  @Override protected EClass eStaticClass(){  return RegularExpressionPackage.Literals.QUANTIFIER;}  }
class C{  public static synchronized void copyChart(final JFreeChartPlotEngine engine){  Clipboard systemClipboard=Toolkit.getDefaultToolkit().getSystemClipboard();  Insets insets=engine.getChartPanel().getInsets();  int w=engine.getChartPanel().getWidth() - insets.left - insets.right;  int h=engine.getChartPanel().getHeight() - insets.top - insets.bottom;  BufferedImage img=new BufferedImage(w,h,BufferedImage.TYPE_INT_ARGB);  Graphics2D g2=img.createGraphics();  engine.getChartPanel().print(g2);  g2.dispose();  systemClipboard.setContents(new TransferableImage(img),null);}  }
class C{  boolean notifyIndirectHit(DebuggerNode source,DebuggerNode node,Frame frame) throws BreakpointConditionFailure {  if (!isEnabled()) {    return false;  }  assert node.getBreakpoint() == this;  if (source != node) {    if (!((BreakpointNode)node).shouldBreak(frame)) {      return false;    }  } else {  }  if (this.hitCount.incrementAndGet() <= ignoreCount) {    return false;  }  if (isOneShot()) {    setEnabled(false);  }  return true;}  }
class C{  public Iterator iterator(){  return godeToDode.values().iterator();}  }
class C{  protected boolean[] canHandleOnlyClass(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,int classType){  print("only class in data");  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,false,classType);  print("...");  ArrayList<String> accepts=new ArrayList<String>();  accepts.add("class");  accepts.add("zeror");  int numTrain=getNumInstances(), numTest=getNumInstances(), missingLevel=0;  boolean predictorMissing=false, classMissing=false;  return runBasicTest(false,false,false,false,false,false,classType,missingLevel,predictorMissing,classMissing,numTrain,numTest,2,accepts);}  }
class C{  public static void localVarValueChanged(int newValue,String localVar,int lineNumber){  instance.localVarValueChanged(localVar,lineNumber,newValue);}  }
class C{  public void testNonSearchable(){  Searchables searchables=new Searchables(mContext,0);  searchables.buildSearchableList();  ComponentName nonActivity=new ComponentName("com.android.frameworks.coretests","com.android.frameworks.coretests.activity.NO_SEARCH_ACTIVITY");  SearchableInfo si=searchables.getSearchableInfo(nonActivity);  assertNull(si);}  }
class C{  public String wikiRuleString(XMLDocumentationHandler handler,String prefix){  StringBuffer buffer=new StringBuffer(prefix + "One of:\n");  for (  XMLSyntaxRule rule : rules) {    buffer.append(rule.wikiRuleString(handler,prefix + "*"));  }  buffer.append("\n");  return buffer.toString();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (stack.getUIMgr() == null)   return Sage.childrenNames(getString(stack)); else   return stack.getUIMgr().childrenNames(getString(stack));}  }
class C{  public boolean isPrepared(){  if (!prepared && tracksBuilt) {    for (int i=0; i < sampleQueues.size(); i++) {      if (!sampleQueues.valueAt(i).hasFormat()) {        return false;      }    }    prepared=true;    sampleQueueFormats=new MediaFormat[sampleQueues.size()];    for (int i=0; i < sampleQueueFormats.length; i++) {      MediaFormat format=sampleQueues.valueAt(i).getFormat();      if (MimeTypes.isVideo(format.mimeType) && (adaptiveMaxWidth != MediaFormat.NO_VALUE || adaptiveMaxHeight != MediaFormat.NO_VALUE)) {        format=format.copyWithMaxVideoDimensions(adaptiveMaxWidth,adaptiveMaxHeight);      }      sampleQueueFormats[i]=format;    }  }  return prepared;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected void parsePageRule(){  String page=null;  String ppage=null;  if (current == LexicalUnits.IDENTIFIER) {    page=scanner.getStringValue();    nextIgnoreSpaces();    if (current == LexicalUnits.COLON) {      nextIgnoreSpaces();      if (current != LexicalUnits.IDENTIFIER) {        reportError("identifier");        return;      }      ppage=scanner.getStringValue();      nextIgnoreSpaces();    }  }  try {    documentHandler.startPage(page,ppage);    if (current != LexicalUnits.LEFT_CURLY_BRACE) {      reportError("left.curly.brace");    } else {      nextIgnoreSpaces();      try {        parseStyleDeclaration(true);      } catch (      CSSParseException e) {        reportError(e);      }    }  }  finally {    documentHandler.endPage(page,ppage);  }}  }
class C{  public Response cacheResponse(){  return cacheResponse;}  }
class C{  public void test_verify$BII() throws Exception {  Signature sig=Signature.getInstance("DSA");  sig.initSign(getDsaKeys().getPrivate());  sig.update(MESSAGE.getBytes());  byte[] signature=sig.sign();  sig.initVerify(getDsaKeys().getPublic());  sig.update(MESSAGE.getBytes());  assertTrue("Sign/Verify does not pass",sig.verify(signature,0,signature.length));  try {    sig.verify(null,0,signature.length);    fail();  } catch (  IllegalArgumentException expected) {  }  try {    sig.verify(signature,-5,signature.length);    fail();  } catch (  IllegalArgumentException expected) {  }  if (StandardNames.IS_RI) {    try {      sig.verify(signature,signature.length,0);      fail();    } catch (    SignatureException expected) {    }  } else {    boolean verified=sig.verify(signature,signature.length,0);    assertFalse(verified);  }  try {    sig.verify(signature,0,signature.length * 2);    fail();  } catch (  IllegalArgumentException expected) {  }}  }
class C{  private void cloneLabeler(Object returnValue){  MonProxyLabelerInt labeler=getLabeler();  MonProxy monProxy=MonProxyFactory.getMonProxy((Proxy)returnValue);  labeler=(MonProxyLabelerInt)labeler.clone();  labeler.init(monProxy);  monProxy.setLabeler(labeler);}  }
class C{  public boolean columnUpdated(int idx) throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  @Override public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs){switch (eContainerFeatureID()) {case SGraphPackage.STATE__PARENT_REGION:    return eInternalContainer().eInverseRemove(this,SGraphPackage.REGION__VERTICES,Region.class,msgs);}return super.eBasicRemoveFromContainerFeature(msgs);}  }
class C{  public static <T>LazyPOrderedSetX<T> fromIterable(Reducer<POrderedSet<T>> collector,Iterable<T> it){  if (it instanceof LazyPOrderedSetX)   return (LazyPOrderedSetX<T>)it;  if (it instanceof POrderedSet)   return new LazyPOrderedSetX<T>((POrderedSet<T>)it,collector);  return new LazyPOrderedSetX<T>(Flux.fromIterable(it),collector);}  }
class C{  public void addLiteralResultAttribute(AVT avt){  if (null == m_avts)   m_avts=new ArrayList();  m_avts.add(avt);}  }
class C{  public void valueOf(final Type type){  if (type.getSort() == Type.OBJECT || type.getSort() == Type.ARRAY) {    return;  }  if (type == Type.VOID_TYPE) {    push((String)null);  } else {    Type boxed=getBoxedType(type);    invokeStatic(boxed,new Method("valueOf",boxed,new Type[]{type}));  }}  }
class C{  public boolean stealPoints(TempNode newAnchor,Vector<TempNode> anchors,Vector<double[]> anchorDistances){  double maxDist=Double.NEGATIVE_INFINITY;  double[] distArray=anchorDistances.lastElement();  for (  double element : distArray) {    if (maxDist < element) {      maxDist=element;    }  }  boolean anyPointsStolen=false, pointsStolen=false;  TempNode anchorI;  double newDist, distI, interAnchMidDist;  Instance newAnchInst=newAnchor.anchor, anchIInst;  for (int i=0; i < anchors.size(); i++) {    anchorI=anchors.elementAt(i);    anchIInst=anchorI.anchor;    pointsStolen=false;    interAnchMidDist=m_DistanceFunction.distance(newAnchInst,anchIInst) / 2D;    for (int j=0; j < anchorI.points.length(); j++) {      ListNode tmp=anchorI.points.get(j);      if (tmp.distance < interAnchMidDist) {        break;      }      newDist=m_DistanceFunction.distance(newAnchInst,m_Instances.instance(tmp.idx));      distI=tmp.distance;      if (newDist < distI) {        newAnchor.points.insertReverseSorted(tmp.idx,newDist);        anchorI.points.remove(j);        anyPointsStolen=pointsStolen=true;      }    }    if (pointsStolen) {      anchorI.radius=anchorI.points.getFirst().distance;    }  }  return anyPointsStolen;}  }
class C{  public static double insertRandom(HashMap<String,Integer> hashMap,int N,int L){  Stopwatch sw=new Stopwatch();  String s="cat";  for (int i=0; i < N; i++) {    s=StringUtils.randomString(L);    hashMap.put(s,new Integer(i));  }  return sw.elapsedTime();}  }
