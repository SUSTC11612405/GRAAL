class C{  public static void main(String[] args) throws IOException {  for (  String classname : args) {    System.out.println(getConstants(classname));  }}  }
class C{  private static Solution search(INode initial,INode goal){  if (initial.equals(goal)) {    return new Solution(initial,goal);  }  open=StateStorageFactory.create(StateStorageFactory.STACK);  open.insert(initial.copy());  closed=StateStorageFactory.create(StateStorageFactory.HASH);  while (!open.isEmpty()) {    INode n=open.remove();    closed.insert(n);    DepthTransition trans=(DepthTransition)n.storedData();    DoubleLinkedList<IMove> moves=n.validMoves();    for (Iterator<IMove> it=moves.iterator(); it.hasNext(); ) {      IMove move=it.next();      INode successor=n.copy();      move.execute(successor);      if (closed.contains(successor) != null) {        String key=successor.key().toString();        if (nearMisses.contains(key)) {          System.out.println("on Depth:" + trans.depth + " we encounter "+ key+ " which");          System.out.println("leads to a solution but is in our closed set!");          System.out.println("search tree closed:" + (closed.size() + " open:" + open.size()));        }        continue;      }      int depth=1;      if (trans != null) {        depth=trans.depth + 1;      }      successor.storedData(new DepthTransition(move,n,depth));      if (successor.equals(goal)) {        return new Solution(initial,successor);      }      if (depth < maxDepth) {        open.insert(successor);      } else {        if (withinOne(successor,goal)) {          System.out.println("Within one of solution and had to stop:\n" + successor);          System.out.println("search tree closed:" + (closed.size() + " open:" + open.size()));          nearMisses.add(successor.key().toString());          addAllToNearMisses(n);        } else         if (withinTwo(successor,goal)) {          System.out.println("Within two of solution and had to stop:\n" + successor);          System.out.println("search tree closed:" + (closed.size() + " open:" + open.size()));          nearMisses.add(successor.key().toString());          addAllToNearMisses(n);        } else         if (withinThree(successor,goal)) {          System.out.println("Within three of solution and had to stop:\n" + successor);          System.out.println("search tree closed:" + (closed.size() + " open:" + open.size()));          nearMisses.add(successor.key().toString());          addAllToNearMisses(n);        }      }    }  }  return new Solution(initial,goal,false);}  }
class C{  public VectorPortrayal2D(int shape){  this(shape,null,null,null,null);}  }
class C{  public boolean create(YouTubePlaylist youTubePlaylist){  SQLiteDatabase db=dbHelper.getWritableDatabase();  ContentValues values=new ContentValues();  values.put(YouTubePlaylistEntry.COLUMN_PLAYLIST_ID,youTubePlaylist.getId());  values.put(YouTubePlaylistEntry.COLUMN_TITLE,youTubePlaylist.getTitle());  values.put(YouTubePlaylistEntry.COLUMN_VIDEOS_NUMBER,youTubePlaylist.getNumberOfVideos());  values.put(YouTubePlaylistEntry.COLUMN_STATUS,youTubePlaylist.getStatus());  values.put(YouTubePlaylistEntry.COLUMN_THUMBNAIL_URL,youTubePlaylist.getThumbnailURL());  return db.insert(YouTubePlaylistEntry.TABLE_NAME,YouTubePlaylistEntry.COLUMN_NAME_NULLABLE,values) > 0;}  }
class C{  @Override public void onScrolled(RecyclerView recyclerView,int dx,int dy){  super.onScrolled(recyclerView,dx,dy);  LinearLayoutManager layoutManager=(LinearLayoutManager)recyclerView.getLayoutManager();  totalItemCount=layoutManager.getItemCount();  lastVisibleItem=layoutManager.findLastVisibleItemPosition();  if (lastVisibleItem != totalItemCount - 1) {    bottom=false;  }  if (!bottom && !loading && totalItemCount < (lastVisibleItem + Constant.VISIBLE_THRESHOLD)) {    new LatestArticleTask().execute(mAdapter.getBottomArticleId());    loading=true;  }}  }
class C{  protected boolean[] datasetIntegrity(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType,boolean predictorMissing,boolean classMissing){  print("associator doesn't alter original datasets");  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);  print("...");  int numTrain=getNumInstances(), numClasses=2, missingLevel=20;  boolean[] result=new boolean[2];  Instances train=null;  Associator associator=null;  try {    train=makeTestDataset(42,numTrain,nominalPredictor ? getNumNominal() : 0,numericPredictor ? getNumNumeric() : 0,stringPredictor ? getNumString() : 0,datePredictor ? getNumDate() : 0,relationalPredictor ? getNumRelational() : 0,numClasses,classType,multiInstance);    if (missingLevel > 0) {      addMissing(train,missingLevel,predictorMissing,classMissing);    }    associator=AbstractAssociator.makeCopies(getAssociator(),1)[0];  } catch (  Exception ex) {    throw new Error("Error setting up for tests: " + ex.getMessage());  }  try {    Instances trainCopy=new Instances(train);    associator.buildAssociations(trainCopy);    compareDatasets(train,trainCopy);    println("yes");    result[0]=true;  } catch (  Exception ex) {    println("no");    result[0]=false;    if (m_Debug) {      println("\n=== Full Report ===");      print("Problem during building");      println(": " + ex.getMessage() + "\n");      println("Here is the dataset:\n");      println("=== Train Dataset ===\n" + train.toString() + "\n");    }  }  return result;}  }
class C{  public JMenu createSelectionMenu(){  JMenu selectionMenu=new JMenu("Select");  selectionMenu.add(actionManager.getSelectAllAction());  selectionMenu.add(actionManager.getSelectAllWeightsAction());  selectionMenu.add(actionManager.getSelectAllNeuronsAction());  selectionMenu.add(actionManager.getSelectIncomingWeightsAction());  selectionMenu.add(actionManager.getSelectOutgoingWeightsAction());  return selectionMenu;}  }
class C{  @Override public final void execute(WorkItem workItem,WorkflowSession workflowSession,MetaDataMap args) throws WorkflowException {  final WorkflowData workflowData=workItem.getWorkflowData();  final String type=workflowData.getPayloadType();  if (!StringUtils.equals(type,"JCR_PATH")) {    return;  }  final String path=workflowData.getPayload().toString();  ResourceResolver resourceResolver=null;  try {    resourceResolver=getResourceResolver(workflowSession.getSession());    if (wrappedWorkflowProcess == null) {      log.error("Wrapped Workflow Process is null");    } else     if (isProcessableWithWrappedWorkflow(resourceResolver,path)) {      wrappedWorkflowProcess.execute(workItem,workflowSession,args);    } else {      log.info("Skipping processing [ {} ] with wrapped workflow process [ {} ]",path,wrappedWorkflowProcess.getClass().getName());    }  } catch (  Exception e) {    log.error("Unable to complete processing the Workflow Process step",e);    throw new WorkflowException("Unable to complete processing the Workflow Process step",e);  }}  }
class C{  public static String reflectionToString(Object object,ToStringStyle style){  return ReflectionToStringBuilder.toString(object,style);}  }
class C{  @Override public double lengthToJava2D(double length,Rectangle2D area,RectangleEdge edge){  double axisLength=0.0;  if (this.displayEnd > this.displayStart) {    axisLength=this.displayEnd - this.displayStart;  } else {    axisLength=(this.fixedRange.getUpperBound() - this.displayStart) + (this.displayEnd - this.fixedRange.getLowerBound());  }  double areaLength;  if (RectangleEdge.isLeftOrRight(edge)) {    areaLength=area.getHeight();  } else {    areaLength=area.getWidth();  }  return (length / axisLength) * areaLength;}  }
class C{  public StorageProcessor[] queryStorageProcessors(String[] processorId) throws InvalidArgument, InvalidSession, StorageFault, NotImplemented {  final String methodName="queryStorageProcessors(): ";  log.info(methodName + "Entry");  if (processorId != null) {    log.debug(methodName + "input processorIds[" + Arrays.asList(processorId)+ "]");  }  sslUtil.checkHttpRequest(true,true);  SOSManager sosManager=contextManager.getSOSManager();  StorageProcessor[] processors=sosManager.queryStorageProcessors(processorId);  log.info(methodName + "Exit returning processors of size[" + processors.length+ "]");  return processors;}  }
class C{  public void usingOr(){  BiPredicate<Employee,Manager> isPersonalAssistant=empManagerPredicate.or(managerHasAssistantPredicate);}  }
class C{  void initializeServices(){  for (  Map.Entry<ServiceType,Service> entry : services.entrySet()) {    ServiceType serviceType=entry.getKey();    Service service=entry.getValue();    String apiKey=null;    if (serviceType == ServiceType.PAGERDUTY) {      apiKey=foamApiKeys.pagerDuty();    } else     if (serviceType == ServiceType.HOCKEYAPP) {      apiKey=foamApiKeys.hockeyApp();    } else     if (serviceType == ServiceType.PAPERTRAIL) {      apiKey=foamApiKeys.papertrail();    } else     if (serviceType == ServiceType.LOGENTRIES) {      apiKey=foamApiKeys.logentries();    } else     if (serviceType == ServiceType.MIXPANEL) {      apiKey=foamApiKeys.mixpanel();    } else     if (serviceType == ServiceType.GOOGLE_ANALYTICS) {      apiKey=foamApiKeys.googleAnalytics();    } else     if (serviceType == ServiceType.FLURRY) {      if (((Flurry)service).checkForJar()) {        apiKey=foamApiKeys.flurry();      }    } else     if (serviceType == ServiceType.GRAPHITE) {      apiKey=foamApiKeys.graphite();    }    if (new Utils().isNotBlank(apiKey)) {      service.enable(apiKey);    }  }}  }
class C{  SSLSocketImpl(SSLContextImpl context,InetAddress host,int port) throws IOException {  super();  init(context,false);  SocketAddress socketAddress=new InetSocketAddress(host,port);  connect(socketAddress,0);}  }
class C{  public static boolean isAngularCLIProject(IProject project){  return project.exists(ANGULAR_CLI_JSON_PATH);}  }
class C{  public ST(String template){  this(STGroup.defaultGroup,template);}  }
class C{  public void addRow(Effector effector){  data.add(effector);}  }
class C{  public static void showKeyboard(Context context,View field){  try {    field.requestFocus();    InputMethodManager imm=(InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);    imm.showSoftInput(field,InputMethodManager.SHOW_IMPLICIT);  } catch (  Exception ex) {    Log.e("Caffeine","Error occurred trying to show the keyboard.  Exception=" + ex);  }}  }
class C{  private void update(@NotNull FormattingStateId state,double completionRate){  ProgressIndicator indicator=getIndicator();  if (indicator == null) {    return;  }  updateTextIfNecessary(state);  myLastState=state;  double newFraction=0;  for (  FormattingStateId prevState : state.getPreviousStates()) {    newFraction+=MAX_PROGRESS_VALUE * prevState.getProgressWeight() / TOTAL_WEIGHT;  }  newFraction+=completionRate * state.getProgressWeight() / TOTAL_WEIGHT;  double currentFraction=indicator.getFraction();  if (newFraction - currentFraction < MAX_PROGRESS_VALUE / 100) {    return;  }  indicator.setFraction(newFraction);}  }
class C{  public static long scaleLargeTimestamp(long timestamp,long multiplier,long divisor){  if (divisor >= multiplier && (divisor % multiplier) == 0) {    long divisionFactor=divisor / multiplier;    return timestamp / divisionFactor;  } else   if (divisor < multiplier && (multiplier % divisor) == 0) {    long multiplicationFactor=multiplier / divisor;    return timestamp * multiplicationFactor;  } else {    double multiplicationFactor=(double)multiplier / divisor;    return (long)(timestamp * multiplicationFactor);  }}  }
class C{  public boolean endNalUnit(int discardPadding){  if (!isFilling) {    return false;  }  nalLength-=discardPadding;  isFilling=false;  isCompleted=true;  return true;}  }
class C{  public boolean isValidOn(Date date){  return !date.before(x509Certificate.getStartDate().getDate()) && !date.after(x509Certificate.getEndDate().getDate());}  }
class C{  public UnsupportedDigestAlgorithmException(){  super();}  }
class C{  public boolean visitTopLevelInstruction(ElemTemplateElement elem){  return true;}  }
class C{  public static void main(String[] ops){  double[] doublesWithNaN={4.5,6.7,Double.NaN,3.4,4.8,1.2,3.4};  double[] doubles={4.5,6.7,6.7,3.4,4.8,1.2,3.4,6.7,6.7,3.4};  int[] ints={12,6,2,18,16,6,7,5,18,18,17};  try {    System.out.println("First option split up:");    if (ops.length > 0) {      String[] firstOptionSplitUp=Utils.splitOptions(ops[0]);      for (      String element : firstOptionSplitUp) {        System.out.println(element);      }    }    System.out.println("Partitioned options: ");    String[] partitionedOptions=Utils.partitionOptions(ops);    for (    String partitionedOption : partitionedOptions) {      System.out.println(partitionedOption);    }    System.out.println("Get position of flag -f: " + Utils.getOptionPos('f',ops));    System.out.println("Get flag -f: " + Utils.getFlag('f',ops));    System.out.println("Get position of option -o: " + Utils.getOptionPos('o',ops));    System.out.println("Get option -o: " + Utils.getOption('o',ops));    System.out.println("Checking for remaining options... ");    Utils.checkForRemainingOptions(ops);    System.out.println("Original array with NaN (doubles): ");    for (    double element : doublesWithNaN) {      System.out.print(element + " ");    }    System.out.println();    System.out.println("Original array (doubles): ");    for (    double d : doubles) {      System.out.print(d + " ");    }    System.out.println();    System.out.println("Original array (ints): ");    for (    int j : ints) {      System.out.print(j + " ");    }    System.out.println();    System.out.println("Correlation: " + Utils.correlation(doubles,doubles,doubles.length));    System.out.println("Mean: " + Utils.mean(doubles));    System.out.println("Variance: " + Utils.variance(doubles));    System.out.println("Sum (doubles): " + Utils.sum(doubles));    System.out.println("Sum (ints): " + Utils.sum(ints));    System.out.println("Max index (doubles): " + Utils.maxIndex(doubles));    System.out.println("Max index (ints): " + Utils.maxIndex(ints));    System.out.println("Min index (doubles): " + Utils.minIndex(doubles));    System.out.println("Min index (ints): " + Utils.minIndex(ints));    System.out.println("Median (doubles): " + Utils.kthSmallestValue(doubles,doubles.length / 2));    System.out.println("Median (ints): " + Utils.kthSmallestValue(ints,ints.length / 2));    System.out.println("Sorted array with NaN (doubles): ");    int[] sorted=Utils.sort(doublesWithNaN);    for (int i=0; i < doublesWithNaN.length; i++) {      System.out.print(doublesWithNaN[sorted[i]] + " ");    }    System.out.println();    System.out.println("Sorted array (doubles): ");    sorted=Utils.sort(doubles);    for (int i=0; i < doubles.length; i++) {      System.out.print(doubles[sorted[i]] + " ");    }    System.out.println();    System.out.println("Sorted array (ints): ");    sorted=Utils.sort(ints);    for (int i=0; i < ints.length; i++) {      System.out.print(ints[sorted[i]] + " ");    }    System.out.println();    System.out.println("Indices from stable sort (doubles): ");    sorted=Utils.stableSort(doubles);    for (int i=0; i < doubles.length; i++) {      System.out.print(sorted[i] + " ");    }    System.out.println();    System.out.println("Indices from sort (ints): ");    sorted=Utils.sort(ints);    for (int i=0; i < ints.length; i++) {      System.out.print(sorted[i] + " ");    }    System.out.println();    System.out.println("Normalized array (doubles): ");    Utils.normalize(doubles);    for (    double d : doubles) {      System.out.print(d + " ");    }    System.out.println();    System.out.println("Normalized again (doubles): ");    Utils.normalize(doubles,Utils.sum(doubles));    for (    double d : doubles) {      System.out.print(d + " ");    }    System.out.println();    System.out.println("-4.58: " + Utils.doubleToString(-4.57826535,2));    System.out.println("-6.78: " + Utils.doubleToString(-6.78214234,6,2));    System.out.println("5.70001 == 5.7 ? " + Utils.eq(5.70001,5.7));    System.out.println("5.70001 > 5.7 ? " + Utils.gr(5.70001,5.7));    System.out.println("5.70001 >= 5.7 ? " + Utils.grOrEq(5.70001,5.7));    System.out.println("5.7 < 5.70001 ? " + Utils.sm(5.7,5.70001));    System.out.println("5.7 <= 5.70001 ? " + Utils.smOrEq(5.7,5.70001));    System.out.println("Info (ints): " + Utils.info(ints));    System.out.println("log2(4.6): " + Utils.log2(4.6));    System.out.println("5 * log(5): " + Utils.xlogx(5));    System.out.println("5.5 rounded: " + Utils.round(5.5));    System.out.println("5.55555 rounded to 2 decimal places: " + Utils.roundDouble(5.55555,2));    System.out.println("Array-Dimensions of 'new int[][]': " + Utils.getArrayDimensions(new int[][]{}));    System.out.println("Array-Dimensions of 'new int[][]{{1,2,3},{4,5,6}}': " + Utils.getArrayDimensions(new int[][]{{1,2,3},{4,5,6}}));    String[][][] s=new String[3][4][];    System.out.println("Array-Dimensions of 'new String[3][4][]': " + Utils.getArrayDimensions(s));  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public List<String> compactExtension(String value,int start){  List<String> result=new ArrayList<String>();  if (start > value.length()) {    result.add(value);    return result;  }  WbXmlExtensionDef extDef=new WbXmlExtensionDef(value.substring(start),(byte)0x0);  for (  WbXmlExtensionDef ext : extsByValue.tailSet(extDef)) {    List<String> found=matches(value,ext.getValue(),start,false);    if (found != null) {      return found;    }  }  result.add(value);  return result;}  }
class C{  public boolean isInPeriod(Timestamp date){  if (date == null)   return false;  Timestamp dateOnly=TimeUtil.getDay(date);  Timestamp from=TimeUtil.getDay(getStartDate());  if (dateOnly.before(from))   return false;  Timestamp to=TimeUtil.getDay(getEndDate());  if (dateOnly.after(to))   return false;  return true;}  }
class C{  public DestinationWrapper<Destination> lookupDestination(String uri,Session session) throws JMSException, NamingException {  if (usingJNDI) {    return lookupDestinationFromJNDI(uri);  } else {    throw new JMSException("Abstract destinations cannot be created (should be using JNDI?)");  }}  }
class C{  public VNXeCommandJob createFileSystemQuotaAsync(FileSystemQuotaCreateParam param) throws VNXeException {  _logger.info("Async create quota with name: " + param.getName());  _url=URL;  MultivaluedMap<String,String> queryParams=new MultivaluedMapImpl();  queryParams.add(VNXeConstants.TIMEOUT,"0");  setQueryParameters(queryParams);  return postRequestAsync(param);}  }
class C{  public FileWriter(String fileName,boolean append) throws IOException {  super(new FileOutputStream(fileName,append));}  }
class C{  public boolean contains(Point2D p){  return (p.x() >= xmin) && (p.x() <= xmax) && (p.y() >= ymin)&& (p.y() <= ymax);}  }
class C{  public void testBug20242() throws Exception {  if (versionMeetsMinimum(5,0)) {    try {      Class.forName("org.jboss.resource.adapter.jdbc.ValidConnectionChecker");    } catch (    Exception ex) {      System.out.println("The testBug20242() is ignored because required class isn't available:");      ex.printStackTrace();      return;    }    MysqlXADataSource xaDs=new MysqlXADataSource();    xaDs.setUrl(dbUrl);    MysqlValidConnectionChecker checker=new MysqlValidConnectionChecker();    assertNull(checker.isValidConnection(xaDs.getXAConnection().getConnection()));  }}  }
class C{  protected TraceLevel_Impl(){  super();}  }
class C{  public boolean equals(Object other){  if (other == this) {    return true;  }  if (other == null) {    return false;  }  if (other.getClass() != this.getClass()) {    return false;  }  Action that=(Action)other;  return this.x == that.x && this.y == that.y && this.dir == that.dir && this.type == that.type;}  }
class C{  public void configurePathMatching(PathMatchConfigurer configurer){}  }
class C{  public final void showDataUnavailable(){  name.setText(NOT_AVAILABLE);  description.setText(NOT_AVAILABLE,false,false);  size.setText(NOT_AVAILABLE);  cmrVersion.setText(NOT_AVAILABLE);  if (showDataDownloaded) {    downloaded.setText(NOT_AVAILABLE);  }}  }
class C{  static int writeUTF(String str,DataOutput out) throws IOException {  int strlen=str.length();  int utflen=0;  int c, count=0;  for (int i=0; i < strlen; i++) {    c=str.charAt(i);    if ((c >= 0x0001) && (c <= 0x007F)) {      utflen++;    } else     if (c > 0x07FF) {      utflen+=3;    } else {      utflen+=2;    }  }  if (utflen > 65535)   throw new UTFDataFormatException("encoded string too long: " + utflen + " bytes");  byte[] bytearr=null;  if (out instanceof DataOutputStream) {    DataOutputStream dos=(DataOutputStream)out;    if (dos.bytearr == null || (dos.bytearr.length < (utflen + 2)))     dos.bytearr=new byte[(utflen * 2) + 2];    bytearr=dos.bytearr;  } else {    bytearr=new byte[utflen + 2];  }  bytearr[count++]=(byte)((utflen >>> 8) & 0xFF);  bytearr[count++]=(byte)((utflen >>> 0) & 0xFF);  int i=0;  for (i=0; i < strlen; i++) {    c=str.charAt(i);    if (!((c >= 0x0001) && (c <= 0x007F)))     break;    bytearr[count++]=(byte)c;  }  for (; i < strlen; i++) {    c=str.charAt(i);    if ((c >= 0x0001) && (c <= 0x007F)) {      bytearr[count++]=(byte)c;    } else     if (c > 0x07FF) {      bytearr[count++]=(byte)(0xE0 | ((c >> 12) & 0x0F));      bytearr[count++]=(byte)(0x80 | ((c >> 6) & 0x3F));      bytearr[count++]=(byte)(0x80 | ((c >> 0) & 0x3F));    } else {      bytearr[count++]=(byte)(0xC0 | ((c >> 6) & 0x1F));      bytearr[count++]=(byte)(0x80 | ((c >> 0) & 0x3F));    }  }  out.write(bytearr,0,utflen + 2);  return utflen + 2;}  }
class C{  public Storage(int size){  values=new long[size];}  }
class C{  public String toPattern(){  StringBuffer buffer=new StringBuffer();  for (int i=0; i <= maxOffset; i++) {    appendQuoted(buffer,strings[i]);    buffer.append('{');    buffer.append(argumentNumbers[i]);    Format format=formats[i];    String pattern=null;    if (format instanceof ChoiceFormat) {      buffer.append(",choice,");      pattern=((ChoiceFormat)format).toPattern();    } else     if (format instanceof DecimalFormat) {      pattern=decodeDecimalFormat(buffer,format);    } else     if (format instanceof SimpleDateFormat) {      pattern=decodeSimpleDateFormat(buffer,format);    } else     if (format != null) {      throw new IllegalArgumentException("Unknown format");    }    if (pattern != null) {      boolean quote=false;      int index=0, length=pattern.length(), count=0;      while (index < length) {        char ch=pattern.charAt(index++);        if (ch == '\'') {          quote=!quote;        }        if (!quote) {          if (ch == '{') {            count++;          }          if (ch == '}') {            if (count > 0) {              count--;            } else {              buffer.append("'}");              ch='\'';            }          }        }        buffer.append(ch);      }    }    buffer.append('}');  }  if (maxOffset + 1 < strings.length) {    appendQuoted(buffer,strings[maxOffset + 1]);  }  return buffer.toString();}  }
class C{  public String draw(IGraphEntity n){  return "[style=filled fillcolor=gray50 " + "label=\"" + n.nodeLabel() + "|GOAL\"]";}  }
class C{  public static byte[] statusBytes(byte[] response){  return new byte[]{response[response.length - 2],response[response.length - 1]};}  }
class C{  protected GroovyScriptEngine createGroovyScriptEngine(){  return new GroovyScriptEngine(this);}  }
class C{  public static REnvironment createSrcfile(String path){  return createSrcfile(FileSystems.getDefault().getPath(Utils.tildeExpand(path)));}  }
class C{  public TMessage readMessageBegin() throws TException {  byte protocolId=readByte();  if (protocolId != PROTOCOL_ID) {    throw new TProtocolException("Expected protocol id " + Integer.toHexString(PROTOCOL_ID) + " but got "+ Integer.toHexString(protocolId));  }  byte versionAndType=readByte();  byte version=(byte)(versionAndType & VERSION_MASK);  if (version != VERSION) {    throw new TProtocolException("Expected version " + VERSION + " but got "+ version);  }  byte type=(byte)((versionAndType >> TYPE_SHIFT_AMOUNT) & TYPE_BITS);  int seqid=readVarint32();  String messageName=readString();  return new TMessage(messageName,type,seqid);}  }
class C{  public LocalVariableInfo(RopMethod method){  if (method == null) {    throw new NullPointerException("method == null");  }  BasicBlockList blocks=method.getBlocks();  int maxLabel=blocks.getMaxLabel();  this.regCount=blocks.getRegCount();  this.emptySet=new RegisterSpecSet(regCount);  this.blockStarts=new RegisterSpecSet[maxLabel];  this.insnAssignments=new HashMap<Insn,RegisterSpec>(blocks.getInstructionCount());  emptySet.setImmutable();}  }
class C{  protected double regressionPrediction(Instance transformedInstance,boolean[] selectedAttributes,double[] coefficients) throws Exception {  double result=0;  int column=0;  for (int j=0; j < transformedInstance.numAttributes(); j++) {    if ((m_ClassIndex != j) && (selectedAttributes[j])) {      result+=coefficients[column] * transformedInstance.value(j);      column++;    }  }  result+=coefficients[column];  return result;}  }
class C{  protected void updateProgressBar(){  progressBar.redraw();}  }
class C{  public static boolean isSeparator(char c){  return isNewLineChar(c) || c == '\t' || c == ' ';}  }
class C{  @Override protected void onPause(){  super.onPause();  Log.d(TAG,"onPause() - another activity is taking focus (this activity is about to be \"paused\")");}  }
class C{  public static boolean isValidPhoneNumber(String number){  final PhoneNumberUtil util=PhoneNumberUtil.getInstance();  try {    final Phonenumber.PhoneNumber phoneNumber=util.parse(number,getSimCountryCode());    return (util.isValidNumber(phoneNumber)) | (String.valueOf(phoneNumber.getNationalNumber()).length() == 10);  } catch (  NumberParseException e) {    return false;  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:30.567 -0500",hash_original_method="2E3FAB2711A493998A5CD02CF97D3862",hash_generated_method="88D47F1314328668F8579B4CB5297971") private static int roundUpToPowerOfTwo(int i){  i--;  i|=i >>> 1;  i|=i >>> 2;  i|=i >>> 4;  i|=i >>> 8;  i|=i >>> 16;  return i + 1;}  }
class C{  public CategoryDataset createDataset2(){  DefaultCategoryDataset result=new DefaultCategoryDataset();  String series1="Third";  String series2="Fourth";  String type1="Type 1";  String type2="Type 2";  String type3="Type 3";  String type4="Type 4";  String type5="Type 5";  String type6="Type 6";  String type7="Type 7";  String type8="Type 8";  result.addValue(11.0,series1,type1);  result.addValue(14.0,series1,type2);  result.addValue(13.0,series1,type3);  result.addValue(15.0,series1,type4);  result.addValue(15.0,series1,type5);  result.addValue(17.0,series1,type6);  result.addValue(17.0,series1,type7);  result.addValue(18.0,series1,type8);  result.addValue(15.0,series2,type1);  result.addValue(17.0,series2,type2);  result.addValue(16.0,series2,type3);  result.addValue(18.0,series2,type4);  result.addValue(14.0,series2,type5);  result.addValue(14.0,series2,type6);  result.addValue(12.0,series2,type7);  result.addValue(11.0,series2,type8);  return result;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>();  newVector.addElement(new Option("\tNumber of attributes to randomly investigate.\t(default 0)\n" + "\t(<0 = int(log_2(#predictors)+1)).","K",1,"-K <number of attributes>"));  newVector.addElement(new Option("\tSet minimum number of instances per leaf.\n\t(default 1)","M",1,"-M <minimum number of instances>"));  newVector.addElement(new Option("\tSet minimum numeric class variance proportion\n" + "\tof train variance for split (default 1e-3).","V",1,"-V <minimum variance for split>"));  newVector.addElement(new Option("\tSeed for random number generator.\n" + "\t(default 1)","S",1,"-S <num>"));  newVector.addElement(new Option("\tThe maximum depth of the tree, 0 for unlimited.\n" + "\t(default 0)","depth",1,"-depth <num>"));  newVector.addElement(new Option("\tNumber of folds for backfitting " + "(default 0, no backfitting).","N",1,"-N <num>"));  newVector.addElement(new Option("\tAllow unclassified instances.","U",0,"-U"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  public SQLSyntaxErrorException(Throwable cause){  super(cause);}  }
class C{  public void lostOwnership(Clipboard clipboard,Transferable contents){}  }
class C{  public void addFunnel(List<Long> funnel) throws HiveException {  if (elements.isEmpty()) {    elements.addAll(funnel);  } else {    if (elements.size() != funnel.size()) {      throw new UDFArgumentTypeException(0,"Funnels must be of the same size to merge!");    }    for (int i=0; i < funnel.size(); i++) {      elements.set(i,(funnel.get(i) + elements.get(i)));    }  }}  }
class C{  public void testMT() throws Exception {  tryMT(3);}  }
class C{  public NTUserPrincipal(String name){  if (name == null) {    java.text.MessageFormat form=new java.text.MessageFormat(sun.security.util.ResourcesMgr.getString("invalid.null.input.value","sun.security.util.AuthResources"));    Object[] source={"name"};    throw new NullPointerException(form.format(source));  }  this.name=name;}  }
class C{  public void applyNoDataSettings(Chart chart){  chart.setNoDataText(mApplication.getString(R.string.chart_no_data_text));  Paint p=chart.getPaint(Chart.PAINT_INFO);  p.setTextSize(NO_DATA_TEXT_SIZE);  Context appContext=mApplication.getApplicationContext();  p.setColor(ContextCompat.getColor(appContext,android.R.color.tertiary_text_light));}  }
class C{  protected void checkParameterCount(int len){  int min=0, max=Integer.MAX_VALUE;switch (info.type) {case COALESCE:case CSVREAD:case LEAST:case GREATEST:    min=1;  break;case NOW:case CURRENT_TIMESTAMP:case RAND:max=1;break;case COMPRESS:case LTRIM:case RTRIM:case TRIM:case FILE_READ:case ROUND:case XMLTEXT:case TRUNCATE:case TO_TIMESTAMP:min=1;max=2;break;case TO_CHAR:case TO_DATE:min=1;max=3;break;case ORA_HASH:min=1;max=3;break;case REPLACE:case LOCATE:case INSTR:case SUBSTR:case SUBSTRING:case LPAD:case RPAD:min=2;max=3;break;case CONCAT:case CONCAT_WS:case CSVWRITE:min=2;break;case XMLNODE:min=1;max=4;break;case FORMATDATETIME:case PARSEDATETIME:min=2;max=4;break;case CURRVAL:case NEXTVAL:min=1;max=2;break;case DECODE:case CASE:min=3;break;case REGEXP_REPLACE:min=3;max=4;break;case REGEXP_LIKE:min=2;max=3;break;default :DbException.throwInternalError("type=" + info.type);}boolean ok=(len >= min) && (len <= max);if (!ok) {throw DbException.get(ErrorCode.INVALID_PARAMETER_COUNT_2,info.name,min + ".." + max);}}  }
class C{  public static Operand offsetOperand(Offset o){  if (VM.BuildFor64Addr) {    return new LongConstantOperand(o.toLong());  } else {    return new IntConstantOperand(o.toInt());  }}  }
class C{  public void addPaymentMethod(String method){  addTextAttribute(PAYMENT_METHOD_ATTRIBUTE,method);}  }
class C{  public ErdosRenyiGenerator(GraphBuilder<G,V,E> builder){  this.builder=builder;}  }
class C{  public CClipboardMenu(final NaviNode node,final int line){  super("Clipboard");  final INaviCodeNode cnode=(INaviCodeNode)node.getRawNode();  if (line != -1) {    final INaviInstruction instruction=CCodeNodeHelpers.lineToInstruction(cnode,line);    if (instruction != null) {      add(CActionProxy.proxy(new CCopyAddressAction(instruction)));    }    add(CActionProxy.proxy(new CCopyLineAction(node,line)));  }  add(CActionProxy.proxy(new CCopyNodeAction(node)));}  }
class C{  private void updateEntity(final OdorWorldEntity entity,final int time){  float dx=entity.getVelocityX();  float oldX=entity.getX();  float newX=oldX + dx * time;  float dy=entity.getVelocityY();  float oldY=entity.getY();  float newY=oldY + dy * time;  if (dx != 0) {    entity.setX(entity.getX() + dx);  }  if (dy != 0) {    entity.setY(entity.getY() + dy);  }  entity.getBehavior().apply(time);  entity.setHasCollided(false);  for (  OdorWorldEntity otherEntity : entityList) {    if (entity == otherEntity) {      continue;    }    if (otherEntity.getReducedBounds().intersects(entity.getReducedBounds())) {      otherEntity.setHasCollided(true);    }  }  entity.update();}  }
class C{  @Override public double maxImpurity(){  return m_maxImpurity;}  }
class C{  public static ValueDate fromMillis(long ms){  return fromDateValue(DateTimeUtils.dateValueFromDate(ms));}  }
class C{  public void removeSiteVisibleStorageArrayEntry(String internalSiteName,String serialNumber){  if (this.siteVisibleStorageArrays == null) {    return;  }  if (this.siteVisibleStorageArrays.get(internalSiteName) == null) {    return;  }  this.siteVisibleStorageArrays.remove(internalSiteName,serialNumber);}  }
class C{  public static void main(String[] args){  System.out.println(UUID.randomUUID());}  }
class C{  public ParameterDatabase(File file,String[] args) throws FileNotFoundException, IOException {  this();  label="File: " + file.getPath();  directory=new File(file.getParent());  ParameterDatabase files=new ParameterDatabase(file);  ParameterDatabase a=new ParameterDatabase();  a.parents.addElement(files);  boolean hasArgs=false;  for (int x=0; x < args.length - 1; x++) {    if (args[x].equals("-p")) {      String s=args[x + 1].trim();      if (s.length() == 0)       continue;      int eq=s.indexOf('=');      if (eq <= 0)       continue;      put(s.substring(0,eq),s.substring(eq + 1));      if (!hasArgs) {        label=label + "    Args:  ";        hasArgs=true;      }      label=label + s + "  ";    }  }  parents.addElement(a);}  }
class C{  public void toEPLElement(StringWriter writer){  expression.toEPL(writer,ExpressionPrecedenceEnum.MINIMUM);  if (annotatedByEventFlag) {    writer.write(" @eventbean");  }  if (asName != null) {    writer.write(" as ");    writer.write(asName);  }}  }
class C{  public void readWwwAuthenticateHeader(String header){  if (header != null) {    mIsDigestAuthentication=header.startsWith(HttpDigestMd5Authentication.HTTP_DIGEST_SCHEMA);    if (!mIsDigestAuthentication) {      return;    }    String value=getValue(header,"realm");    mDigest.setRealm(value);    value=getValue(header,"opaque");    mDigest.setOpaque(value);    value=getValue(header,"qop");    mDigest.setQop(value);    value=getValue(header,"nonce");    mDigest.setNextnonce(value);  }}  }
class C{  @RequestProcessing(value="/article/reward",method=HTTPRequestMethod.POST) @Before(adviceClass=StopwatchStartAdvice.class) @After(adviceClass=StopwatchEndAdvice.class) public void reward(final HttpServletRequest request,final HttpServletResponse response,final HTTPRequestContext context) throws Exception {  final JSONObject currentUser=userQueryService.getCurrentUser(request);  if (null == currentUser) {    response.sendError(HttpServletResponse.SC_FORBIDDEN);    return;  }  final String articleId=request.getParameter(Article.ARTICLE_T_ID);  if (Strings.isEmptyOrNull(articleId)) {    response.sendError(HttpServletResponse.SC_BAD_REQUEST);    return;  }  context.renderJSON();  try {    articleMgmtService.reward(articleId,currentUser.optString(Keys.OBJECT_ID));  } catch (  final ServiceException e) {    context.renderMsg(langPropsService.get("transferFailLabel"));    return;  }  final JSONObject article=articleQueryService.getArticle(articleId);  if (null == article) {    return;  }  articleQueryService.processArticleContent(article,request);  context.renderTrueResult().renderJSONValue(Article.ARTICLE_REWARD_CONTENT,article.optString(Article.ARTICLE_REWARD_CONTENT));}  }
class C{  public static String encode(final long l){  return "l" + Long.toString(l) + "|";}  }
class C{  private int determineTargetPage(int currentPage,float pageOffset,int velocity,int deltaX){  int targetPage;  if (Math.abs(deltaX) > flingDistance && Math.abs(velocity) > minimumVelocity) {    if (virtualPos < 0) {      targetPage=velocity > 0 ? currentPage : currentPage + 1;    } else {      targetPage=velocity > 0 ? currentPage + 1 : currentPage;    }  } else {    final float truncator=currentPage >= currentItem ? 0.4f : 0.6f;    targetPage=(int)(currentPage + pageOffset + truncator);  }  if (items.size() > 0) {    final ItemInfo firstItem=items.get(0);    final ItemInfo lastItem=items.get(items.size() - 1);    targetPage=Math.max(firstItem.position,Math.min(targetPage,lastItem.position));  }  if (targetPage > currentPage && onCardChangeListener != null) {    onCardChangeListener.onCardDismissed(currentPage,virtualPos > 0);  }  return targetPage;}  }
class C{  public Task<ComputeImageServerRestRep> create(ComputeImageServerCreate input){  return postTask(input,baseUrl);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.752 -0400",hash_original_method="6F66D971E54163B78A2414F4E7CCFEB2",hash_generated_method="011ADAE59111CF5825D22375957FD7F1") public boolean isExists(){  return exists;}  }
class C{  @Override public Trie reduce(Reduce by){  List<Trie> h=new ArrayList<>();  for (  Trie trie : tries)   h.add(trie.reduce(by));  MultiTrie m=new MultiTrie(forward);  m.tries=h;  return m;}  }
class C{  public void advance(){  moveToNextIndex();}  }
class C{  @Override public void onRenderSurfaceSizeChanged(GL10 gl,int width,int height){  super.onRenderSurfaceSizeChanged(gl,width,height);  mConnectedTextureId=-1;  mIsCameraConfigured=false;}  }
class C{  public Collection engineGenerateCertificates(InputStream inStream) throws CertificateException {  java.security.cert.Certificate cert;  List certs=new ArrayList();  while ((cert=engineGenerateCertificate(inStream)) != null) {    certs.add(cert);  }  return certs;}  }
class C{  public Image rotate90Degrees(boolean maintainOpacity){  return Display.impl.rotate90Degrees(this,maintainOpacity);}  }
class C{  public void addChannel(int serverId,String name,String password){  ContentValues values=new ContentValues();  values.put(ChannelConstants.NAME,name);  values.put(ChannelConstants.PASSWORD,password);  values.put(ChannelConstants.SERVER,serverId);  this.getWritableDatabase().insert(ChannelConstants.TABLE_NAME,null,values);}  }
class C{  @YesNoResult public static int showYesNoDialog(String message,@Nls(capitalization=Nls.Capitalization.Title) String title,String yesText,String noText,@Nullable Icon icon){  return showYesNoDialog(message,title,yesText,noText,icon,null);}  }
class C{  public static void appendN(char c,int n,StringBuilder sb){  for (int i=n; i > 0; i--) {    sb.append(c);  }}  }
class C{  protected void drawActor(int x,int y,int w,int h,Color fillColor,Paint fillPaint,Color penColor,boolean shadow){  float width=w * 2 / 6;  GeneralPath path=new GeneralPath();  path.moveTo(x,y + h);  path.curveTo(x,y + 3 * h / 5,x,y + 2 * h / 5,x + w / 2,y + 2 * h / 5);  path.curveTo(x + w / 2 - width,y + 2 * h / 5,x + w / 2 - width,y,x + w / 2,y);  path.curveTo(x + w / 2 + width,y,x + w / 2 + width,y + 2 * h / 5,x + w / 2,y + 2 * h / 5);  path.curveTo(x + w,y + 2 * h / 5,x + w,y + 3 * h / 5,x + w,y + h);  path.closePath();  drawPath(path,fillColor,fillPaint,penColor,shadow);}  }
class C{  public StrBuilder deleteAll(char ch){  for (int i=0; i < size; i++) {    if (buffer[i] == ch) {      int start=i;      while (++i < size) {        if (buffer[i] != ch) {          break;        }      }      int len=i - start;      deleteImpl(start,i,len);      i-=len;    }  }  return this;}  }
class C{  public boolean[][] old_minimize(){  int i, j;  int c;  Out.print(numStates + " states before minimization, ");  if (numStates == 0) {    Out.error(ErrorMessages.ZERO_STATES);    throw new GeneratorException();  }  if (Options.no_minimize) {    Out.println("minimization skipped.");    return null;  }  boolean[][] equiv=new boolean[numStates][];  StatePairList[][] list=new StatePairList[numStates][];  for (i=1; i < numStates; i++) {    list[i]=new StatePairList[i];    equiv[i]=new boolean[i];    for (j=0; j < i; j++) {      if (isFinal[i] && isFinal[j])       equiv[i][j]=action[i].isEquiv(action[j]); else       equiv[i][j]=!isFinal[j] && !isFinal[i];    }  }  for (i=1; i < numStates; i++) {    Out.debug("Testing state " + i);    for (j=0; j < i; j++) {      if (equiv[i][j]) {        for (c=0; c < numInput; c++) {          if (equiv[i][j]) {            int p=table[i][c];            int q=table[j][c];            if (p < q) {              int t=p;              p=q;              q=t;            }            if (p >= 0 || q >= 0) {              if (p != q && (p == -1 || q == -1 || !equiv[p][q])) {                equiv[i][j]=false;                if (list[i][j] != null)                 list[i][j].markAll(list,equiv);              }            }          }        }        if (equiv[i][j]) {          for (c=0; c < numInput; c++) {            int p=table[i][c];            int q=table[j][c];            if (p < q) {              int t=p;              p=q;              q=t;            }            if (p != q && p >= 0 && q >= 0) {              if (list[p][q] == null) {                list[p][q]=new StatePairList();              }              list[p][q].addPair(i,j);            }          }        } else {        }      }    }  }  return equiv;}  }
class C{  public ParserAdapter() throws SAXException {  String driver=System.getProperty("org.xml.sax.parser");  try {    setup(ParserFactory.makeParser());  } catch (  ClassNotFoundException e1) {    throw new SAXException("Cannot find SAX1 driver class " + driver,e1);  }catch (  IllegalAccessException e2) {    throw new SAXException("SAX1 driver class " + driver + " found but cannot be loaded",e2);  }catch (  InstantiationException e3) {    throw new SAXException("SAX1 driver class " + driver + " loaded but cannot be instantiated",e3);  }catch (  ClassCastException e4) {    throw new SAXException("SAX1 driver class " + driver + " does not implement org.xml.sax.Parser");  }catch (  NullPointerException e5) {    throw new SAXException("System property org.xml.sax.parser not specified");  }}  }
class C{  static public void assertGroupIntegrity(ViewGroup parent){  final int count=parent.getChildCount();  assertTrue("child count should be >= 0",count >= 0);  for (int i=0; i < count; i++) {    assertNotNull("group should not contain null children",parent.getChildAt(i));    assertSame(parent,parent.getChildAt(i).getParent());  }}  }
class C{  public LargeList(AerospikeClient client,WritePolicy policy,Key key,String binName){  this.client=client;  this.policy=policy;  this.key=key;  this.binName=Value.get(binName);  this.binNameString=this.binName.toString();}  }
class C{  static public void broadcastStickyIntent(Intent intent,String permission,int userId){  try {    getDefault().broadcastIntent(null,intent,null,null,Activity.RESULT_OK,null,null,null,AppOpsManager.OP_NONE,false,true,userId);  } catch (  RemoteException ex) {  }}  }
class C{  public void handleRecenterRequest(Properties requestProperties,OutputStream out) throws IOException, MapRequestFormatException {  Proj projection=ImageServerUtils.createOMProjection(requestProperties,defaultProjection);  String contentType=HttpConnection.CONTENT_PLAIN;  String response;  try {    int x=Integer.parseInt(requestProperties.getProperty(X));    int y=Integer.parseInt(requestProperties.getProperty(Y));    projection.setCenter(projection.inverse(x,y));  } catch (  Exception exc) {    Debug.output("MSH: Invalid Azimuth");  }  response=Math.round(projection.getCenter().getY() * 100.0) / 100.0 + ":" + Math.round(projection.getCenter().getX() * 100.0) / 100.0;  HttpConnection.writeHttpResponse(out,contentType,response);}  }
class C{  @Override public void execute(StepInstance stepInstance,String temporaryFileDirectory){  if (LOGGER.isInfoEnabled()) {    LOGGER.info("Starting step with Id " + this.getId());  }  final String fastaFilePathName=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,fastaFilePathTemplate);  final List<Protein> proteins=proteinDAO.getProteinsBetweenIds(stepInstance.getBottomProtein(),stepInstance.getTopProtein());  if (LOGGER.isInfoEnabled()) {    LOGGER.info("Writing " + proteins.size() + " proteins to FASTA file...");  }  try {    fastaFileWriter.writeFastaFile(proteins,fastaFilePathName);  } catch (  IOException e) {    throw new IllegalStateException("IOException thrown when attempting to write a fasta file to " + fastaFilePathName,e);  }catch (  FastaFileWriter.FastaFileWritingException e) {    throw new IllegalStateException("FastaFileWriter.FastaFileWritingException thrown when attempting to write a fasta file to " + fastaFilePathName,e);  }  if (LOGGER.isInfoEnabled()) {    LOGGER.info("Step with Id " + this.getId() + " finished.");  }}  }
class C{  private String toString(Unit u){  if (u == null)   return "<last instruction>";  if (u instanceof GotoStmt) {    GotoStmt goto_stmt=(GotoStmt)u;    return String.format("goto %d (line %d)",lnums.get(goto_stmt.getTarget()),lnums.get(u));  } else   if (u instanceof IfStmt) {    IfStmt if_stmt=(IfStmt)u;    return String.format("if %s goto %d (line %d)",if_stmt.getCondition(),lnums.get(if_stmt.getTarget()),lnums.get(u));  } else   return String.format("%s (line %d)",u,lnums.get(u));}  }
class C{  @Inject public N4JSDiagnostician(Registry registry){  super(registry);}  }
class C{  int replicationFactor(){  if (_partitionInfo.isEmpty()) {    return -1;  }  Node[] replicas=_partitionInfo.get(0).replicas();  if (replicas == null) {    return -1;  }  int replicationFactor=replicas.length;  for (  PartitionInfo partitionInfo : _partitionInfo) {    if (partitionInfo.replicas() == null) {      return -1;    }    if (replicationFactor != partitionInfo.replicas().length) {      return -1;    }  }  return replicationFactor;}  }
class C{  public ExpandVetoException(TreeExpansionEvent event,String message){  super(message);  this.event=event;}  }
class C{  @Override public boolean supportsOpenCursorsAcrossCommit(){  debugCodeCall("supportsOpenCursorsAcrossCommit");  return false;}  }
class C{  public void externalEntityDecl(String name,String publicId,String systemId) throws SAXException {}  }
class C{  public void testAbnormalInvokeAll2(){  testAbnormalInvokeAll2(mainPool());}  }
class C{  public void insertUpdate(DocumentEvent de){  changedUpdate(de);}  }
class C{  @Override public void apply(FaceletContext ctx,UIComponent parent) throws IOException {  if (parent == null || !(ComponentHandler.isNew(parent))) {    return;  }  if (parent instanceof EditableValueHolder) {    applyAttachedObject(ctx.getFacesContext(),parent);  } else   if (parent.getAttributes().containsKey(Resource.COMPONENT_RESOURCE_KEY)) {    CompositeComponentTagHandler.getAttachedObjectHandlers(parent).add(this);  } else {    throw new TagException(this.tag,"Parent is not of type EditableValueHolder, type is: " + parent);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override protected void handleMatch(RequestMappingInfo info,String lookupPath,ServerWebExchange exchange){  super.handleMatch(info,lookupPath,exchange);  String bestPattern;  Map<String,String> uriVariables;  Map<String,String> decodedUriVariables;  Set<String> patterns=info.getPatternsCondition().getPatterns();  if (patterns.isEmpty()) {    bestPattern=lookupPath;    uriVariables=Collections.emptyMap();    decodedUriVariables=Collections.emptyMap();  } else {    bestPattern=patterns.iterator().next();    uriVariables=getPathMatcher().extractUriTemplateVariables(bestPattern,lookupPath);    decodedUriVariables=getPathHelper().decodePathVariables(exchange,uriVariables);  }  exchange.getAttributes().put(BEST_MATCHING_PATTERN_ATTRIBUTE,bestPattern);  exchange.getAttributes().put(URI_TEMPLATE_VARIABLES_ATTRIBUTE,decodedUriVariables);  Map<String,MultiValueMap<String,String>> matrixVars=extractMatrixVariables(exchange,uriVariables);  exchange.getAttributes().put(MATRIX_VARIABLES_ATTRIBUTE,matrixVars);  if (!info.getProducesCondition().getProducibleMediaTypes().isEmpty()) {    Set<MediaType> mediaTypes=info.getProducesCondition().getProducibleMediaTypes();    exchange.getAttributes().put(PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE,mediaTypes);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  final Node<E> succ(Node<E> p){  Node<E> next=p.next;  return (p == next) ? head : next;}  }
class C{  @Override public void onFailure(IMqttToken token,Throwable exception){switch (action) {case CONNECT:    connect(exception);  break;case DISCONNECT:disconnect(exception);break;case SUBSCRIBE:subscribe(exception);break;case PUBLISH:publish(exception);break;}}  }
class C{  public double cond(){  return new SingularValueDecomposition(this).cond();}  }
class C{  public R paramsToMultipartEntity(){  try {    mHttpEntity=createMultipartEntity(false);  } catch (  IOException e) {    e.printStackTrace();  }  return (R)this;}  }
class C{  public static boolean isCloneInConsistencyGroup(URI cloneURI,DbClient dbClient){  return getCloneConsistencyGroup(cloneURI,dbClient) != null;}  }
class C{  public static byte[] digestMessage(SIGRecord sig,Message msg,byte[] previous){  DNSOutput out=new DNSOutput();  digestSIG(out,sig);  if (previous != null)   out.writeByteArray(previous);  msg.toWire(out);  return out.toByteArray();}  }
class C{  public RelationConstraint(final String type,final String subType,final String pos,final String source,final String target){  this.type=type;  this.subType=subType;  this.pos=pos;  if (pos != null && pos.length() > 0) {    this.posChar=Character.toLowerCase(pos.charAt(0));  } else {    this.posChar='?';  }  this.source=source;  this.target=target;}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getActionCommand() == "OnlyReceipt") {    if (fcheckReceipt.isSelected())     fcheckPayment.setSelected(false);  }  if (e.getActionCommand() == "OnlyPayment") {    if (fcheckPayment.isSelected())     fcheckReceipt.setSelected(false);  }  super.actionPerformed(e);}  }
class C{  public void sendError(int i) throws IOException {  statusCode=i;  super.sendError(i);}  }
class C{  public static int copyAndCloseBoth(Reader input,Writer output) throws IOException {  try {    return copyAndCloseOutput(input,output);  }  finally {    input.close();  }}  }
class C{  public void addFirst(E e){  Node<E> newNode=new Node<>(e);  newNode.next=head;  head=newNode;  size++;  if (tail == null)   tail=head;}  }
class C{  public Builder withIndex(long index){  buffer.writeLong(16,index);  return this;}  }
class C{  public void arrayLength(){  mv.visitInsn(Opcodes.ARRAYLENGTH);}  }
class C{  public Object opt(int index){  return (index < 0 || index >= this.length()) ? null : this.myArrayList.get(index);}  }
class C{  public MultiBotManager(){  managerNumber=MANAGER_COUNT.getAndIncrement();  ThreadPoolExecutor defaultPool=(ThreadPoolExecutor)Executors.newCachedThreadPool();  defaultPool.allowCoreThreadTimeOut(true);  this.botPool=MoreExecutors.listeningDecorator(defaultPool);}  }
class C{  public static void removeAllPrefrences(Context context,String PREFS_FILE_NAME){  prefs=context.getSharedPreferences(PREFS_FILE_NAME,Context.MODE_PRIVATE);  Editor editor=prefs.edit();  editor.clear();  editor.apply();}  }
class C{  public double nextDouble(){  return org.evosuite.runtime.Random.nextDouble();}  }
class C{  public RxJava1ClientWebRequestBuilder cookie(String name,String value){  this.delegate.cookie(name,value);  return this;}  }
class C{  protected void clearTooltip(final AbstractZyGraph<?,?> graph){  graph.getView().setToolTipText(null);}  }
class C{  public void paintOptionPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  private void onClick(){  onIdentityserverUrlUpdate();  onHomeserverUrlUpdate();  InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);  imm.hideSoftInputFromWindow(mHomeServerText.getWindowToken(),0);}  }
class C{  @Step("Asserting element {1} is visible after {2} seconds") public static void assertElementIsVisibleAfter(AugmentedFunctions driver,By by,int timeoutInSeconds){  Preconditions.checkNotNull(driver);  Preconditions.checkNotNull(by);  try {    driver.findElementsVisibleAfter(by,timeoutInSeconds);  } catch (  TimeoutException e) {    throw new AssertionError(String.format("Element %s is not visible after %s seconds",by,timeoutInSeconds),e);  }}  }
class C{  private void write(OutputNode node,Map map,Mode mode) throws Exception {  String root=entry.getEntry();  String name=style.getElement(root);  for (  Object index : map.keySet()) {    OutputNode next=node.getChild(name);    Object item=map.get(index);    next.setMode(mode);    key.write(next,index);    value.write(next,item);  }}  }
class C{  public static void activateToken(String tokenId,char[] password) throws Exception {  PasswordStore.storePassword(tokenId,password);  LOG.trace("Activating token '{}'",tokenId);  execute(new ActivateToken(tokenId,true));}  }
class C{  public Task<ProtectionSystemRestRep> discover(URI id){  return postTask(getIdUrl() + "/discover",id);}  }
class C{  public void unselectedChoiceStates(){  touchListener.unselectedChoiceStates();}  }
class C{  LazyPainter(String className,Enum which){  if (className == null) {    throw new IllegalArgumentException("The className must be specified");  }  this.className=className;  this.which=which;}  }
class C{  public void clearChoices(){}  }
class C{  @SideEffectFree protected void printBound(final String keyWord,final AnnotatedTypeMirror field,final Set<AnnotatedTypeMirror> visiting,final StringBuilder sb){  if (!currentPrintVerboseGenerics && (field == null || field.getKind() == TypeKind.NULL)) {    return;  }  sb.append(" ");  sb.append(keyWord);  sb.append(" ");  if (field == null) {    sb.append("<null>");  } else   if (field.getKind() != TypeKind.NULL) {    sb.append(visit(field,visiting));  } else {    sb.append(annoFormatter.formatAnnotationString(field.getAnnotations(),currentPrintInvisibleSetting));    sb.append("Void");  }}  }
class C{  BCRSAPrivateCrtKey(RSAPrivateKey key){  this.modulus=key.getModulus();  this.publicExponent=key.getPublicExponent();  this.privateExponent=key.getPrivateExponent();  this.primeP=key.getPrime1();  this.primeQ=key.getPrime2();  this.primeExponentP=key.getExponent1();  this.primeExponentQ=key.getExponent2();  this.crtCoefficient=key.getCoefficient();}  }
class C{  private static void dualPivotQuicksort(float[] a,int left,int right){  int sixth=(right - left + 1) / 6;  int e1=left + sixth;  int e5=right - sixth;  int e3=(left + right) >>> 1;  int e4=e3 + sixth;  int e2=e3 - sixth;  float ae1=a[e1], ae2=a[e2], ae3=a[e3], ae4=a[e4], ae5=a[e5];  if (ae1 > ae2) {    float t=ae1;    ae1=ae2;    ae2=t;  }  if (ae4 > ae5) {    float t=ae4;    ae4=ae5;    ae5=t;  }  if (ae1 > ae3) {    float t=ae1;    ae1=ae3;    ae3=t;  }  if (ae2 > ae3) {    float t=ae2;    ae2=ae3;    ae3=t;  }  if (ae1 > ae4) {    float t=ae1;    ae1=ae4;    ae4=t;  }  if (ae3 > ae4) {    float t=ae3;    ae3=ae4;    ae4=t;  }  if (ae2 > ae5) {    float t=ae2;    ae2=ae5;    ae5=t;  }  if (ae2 > ae3) {    float t=ae2;    ae2=ae3;    ae3=t;  }  if (ae4 > ae5) {    float t=ae4;    ae4=ae5;    ae5=t;  }  a[e1]=ae1;  a[e3]=ae3;  a[e5]=ae5;  float pivot1=ae2;  a[e2]=a[left];  float pivot2=ae4;  a[e4]=a[right];  int less=left + 1;  int great=right - 1;  boolean pivotsDiffer=(pivot1 != pivot2);  if (pivotsDiffer) {    outer:     for (int k=less; k <= great; k++) {      float ak=a[k];      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=a[great];          a[great--]=ak;        }      }    }  } else {    for (int k=less; k <= great; k++) {      float ak=a[k];      if (ak == pivot1) {        continue;      }      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else {        while (a[great] > pivot1) {          great--;        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=pivot1;          a[great--]=ak;        }      }    }  }  a[left]=a[less - 1];  a[less - 1]=pivot1;  a[right]=a[great + 1];  a[great + 1]=pivot2;  doSort(a,left,less - 2);  doSort(a,great + 2,right);  if (!pivotsDiffer) {    return;  }  if (less < e1 && great > e5) {    while (a[less] == pivot1) {      less++;    }    while (a[great] == pivot2) {      great--;    }    outer:     for (int k=less; k <= great; k++) {      float ak=a[k];      if (ak == pivot2) {        while (a[great] == pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] == pivot1) {          a[k]=a[less];          a[less++]=pivot1;        } else {          a[k]=a[great];        }        a[great--]=pivot2;      } else       if (ak == pivot1) {        a[k]=a[less];        a[less++]=pivot1;      }    }  }  doSort(a,less,great);}  }
class C{  public void registerSubtypes(Class<?>... classes){  getSubtypeResolver().registerSubtypes(classes);}  }
class C{  public boolean scrollTo(int line,int offset){  if (visibleLines == 0) {    setFirstLine(Math.max(0,line - electricScroll));    return true;  }  int newFirstLine=firstLine;  int newHorizontalOffset=horizontalOffset;  if (line < firstLine + electricScroll) {    newFirstLine=Math.max(0,line - electricScroll);  } else   if (line + electricScroll >= firstLine + visibleLines) {    newFirstLine=(line - visibleLines) + electricScroll + 1;    if (newFirstLine + visibleLines >= getLineCount())     newFirstLine=getLineCount() - visibleLines;    if (newFirstLine < 0)     newFirstLine=0;  }  int x=_offsetToX(line,offset);  int width=painter.getFontMetrics().charWidth('w');  if (x < 0) {    newHorizontalOffset=Math.min(0,horizontalOffset - x + width + 5);  } else   if (x + width >= painter.getWidth()) {    newHorizontalOffset=horizontalOffset + (painter.getWidth() - x) - width - 5;  }  return setOrigin(newFirstLine,newHorizontalOffset);}  }
class C{  private void eliminarUsuariosOrgano(GestionOrganizacionBI organizacionBI,OrganizacionVO organizacionVO){  organizacionBI.eliminarUsuariosOrgano(organizacionVO.getId());}  }
class C{  public TermsLookupQueryBuilder lookupIndex(String lookupIndex){  this.lookupIndex=lookupIndex;  return this;}  }
class C{  public TaskBuilder syncTo(Synchronizable synchronizable){  Validate.notNull(synchronizable,"Can't synchronize to null object");  this.async=false;  this.synchronizable=synchronizable;  return this;}  }
class C{  public int value(){  return _map._values[_index];}  }
class C{  private static UpdaterState loadUpdaterState(String wtsInitialFile){  int delim=wtsInitialFile.lastIndexOf('.');  if (delim < 0)   return null;  String fileName=wtsInitialFile.substring(0,delim) + STATE_FILE_EXTENSION;  return IOTools.deserialize(fileName,UpdaterState.class,SerializationMode.BIN_GZ);}  }
class C{  @Override public void destroy(){  expiry=null;}  }
class C{  @Override public UpdateResponse addBeans(Collection<?> beans,int commitWithinMs) throws SolrServerException, IOException {  if (!this.writeEnabled)   return _dummyOKResponse;  UpdateResponse ur=null;  for (  SolrClient s : this.shards)   ur=s.addBeans(beans,commitWithinMs);  return ur;}  }
class C{  private void compareIdBookSessionAndBookRequest(Integer bookIDSession,Integer bookIDRequest,UseCaseConf useCaseConf) throws Exception {  if (_logger.isDebugEnabled()) {    _logger.debug("compareIdBookSessionAndBookRequest");  }  if (!bookIDSession.equals(bookIDRequest)) {    validateIDBookInCache(bookIDRequest,useCaseConf);  }}  }
class C{  private void listen() throws RemoteException {  assert Thread.holdsLock(this);  TCPEndpoint ep=getEndpoint();  int port=ep.getPort();  if (server == null) {    if (tcpLog.isLoggable(Log.BRIEF)) {      tcpLog.log(Log.BRIEF,"(port " + port + ") create server socket");    }    try {      server=ep.newServerSocket();      Thread t=AccessController.doPrivileged(new NewThreadAction(new AcceptLoop(server),"TCP Accept-" + port,true));      t.start();    } catch (    java.net.BindException e) {      throw new ExportException("Port already in use: " + port,e);    }catch (    IOException e) {      throw new ExportException("Listen failed on port: " + port,e);    }  } else {    SecurityManager sm=System.getSecurityManager();    if (sm != null) {      sm.checkListen(port);    }  }}  }
class C{  private Constants(){}  }
class C{  public static void verifiesAccessorMethods(Class<?> clazz,MappedField... fields){  verifyGetterMethods(clazz,fields);  verifySetterMethods(clazz,fields);}  }
class C{  public XYSeries(String title){  this(title,0);}  }
class C{  protected void addNamespace(WbXmlNamespaceDef ns){  nsByNamespace.put(ns.getNamespace(),ns);  nsByPrefix.put(ns.getPrefix(),ns);}  }
class C{  @NoInline public static int computeSize(int numVirtualMethods){  return TIB_FIRST_VIRTUAL_METHOD_INDEX + numVirtualMethods + lazyMethodInvokerTrampolineWords();}  }
class C{  public ChangeMethodSignatureDescriptor(){  super(IJavaRefactorings.CHANGE_METHOD_SIGNATURE);}  }
class C{  @Override @TransactionAttribute(TransactionAttributeType.NOT_SUPPORTED) public InstanceStatus updateUsers(String instanceId,ProvisioningSettings settings,List<ServiceUser> users) throws APPlatformException {  return null;}  }
class C{  public static double[] processPriceSignal(double newPriceSignal,double oldInternalPriceSignal,double minimumPriceSignal){  double[] result=new double[2];  if (newPriceSignal > maxPriceBaseLoad) {    minimumPriceSignal=Math.max(newPriceSignal,minimumPriceSignal);  }  if (newPriceSignal > maxPriceBaseLoad && oldInternalPriceSignal > maxPriceBaseLoad) {    newPriceSignal=getCorrectiveStepFactor() * oldInternalPriceSignal;    minimumPriceSignal=Math.max(newPriceSignal,minimumPriceSignal);  }  if (newPriceSignal < minimumPriceSignal) {    newPriceSignal=minimumPriceSignal;  }  result[0]=newPriceSignal;  result[1]=minimumPriceSignal;  return result;}  }
class C{  public void unregisterInterest(Object key,int interestType,boolean isClosing,boolean keepAlive){  if (interestType == InterestType.KEY && key instanceof List) {    unregisterInterestList((List)key,isClosing,keepAlive);  } else {    RegisterInterestTracker rit=this.pool.getRITracker();    boolean removed=rit.removeSingleInterest(this.region,key,interestType,false,false) || rit.removeSingleInterest(this.region,key,interestType,true,false) || rit.removeSingleInterest(this.region,key,interestType,false,true)|| rit.removeSingleInterest(this.region,key,interestType,true,true);    if (removed) {      UnregisterInterestOp.execute(this.pool,this.regionName,key,interestType,isClosing,keepAlive);    }  }}  }
class C{  public static byte[] ATransOpToXRQualityName(int affineTranformOp){switch (affineTranformOp) {case AffineTransformOp.TYPE_NEAREST_NEIGHBOR:    return FAST_NAME;case AffineTransformOp.TYPE_BILINEAR:  return GOOD_NAME;case AffineTransformOp.TYPE_BICUBIC:return BEST_NAME;}return null;}  }
class C{  private void cmd_matchTo(){  String selection=(String)matchTo.getSelectedItem();  xMatchedToBorder.setTitle(selection);  xMatchedToScrollPane.repaint();  xMatchedToTable.setRowCount(0);}  }
class C{  private boolean isGamblingZoneAndIsDice(final Entity entity,final Player player){  final StendhalRPZone zone=player.getZone();  return "int_semos_tavern_0".equals(zone.getName()) && ("dice").equals(entity.getTitle());}  }
class C{  private static void writeDebuggerExceptionSettings(final DebuggerOptions options,final DebugTargetSettings target,final int debuggerId) throws CouldntSaveDataException {  target.writeSetting("show_debugger_options","1");  for (  final DebuggerException pe : options.getExceptions()) {    target.writeSetting(DebuggerException.getSettingKey(pe,debuggerId),Integer.toString(pe.getExceptionAction().getValue()));  }}  }
class C{  protected ConnectionFactory createConnectionFactory(String uri,String name) throws Exception {  ConnectionFactoryParser parser=new ConnectionFactoryParser();  return parser.newObject(parser.expandURI(uri),name);}  }
class C{  @Override public Vertex parseGotoByteCode(DataInputStream dataStream,Network network) throws IOException {  Vertex expression=network.createTemporyVertex();  expression.addRelationship(Primitive.INSTANTIATION,Primitive.GOTO);  long id=dataStream.readLong();  if (id == 0) {    return expression;  }  Vertex element=network.findById(id);  if (element == null) {    return expression;  }  if (element.is(Primitive.FINALLY)) {    expression.addRelationship(Primitive.FINALLY,Primitive.FINALLY);    id=dataStream.readLong();    if (id == 0) {      return expression;    }    element=network.findById(id);    if (element == null) {      return expression;    }  }  expression.addRelationship(Primitive.GOTO,element);  id=dataStream.readLong();  if (id == 0) {    return expression;  }  element=network.findById(id);  if (element == null) {    return expression;  }  if (element.is(Primitive.ARGUMENT)) {    id=dataStream.readLong();    while (id > 0) {      element=network.findById(id);      if (element != null) {        expression.addRelationship(Primitive.ARGUMENT,element,Integer.MAX_VALUE);      }      id=dataStream.readLong();    }    id=dataStream.readLong();  }  return expression;}  }
class C{  public void initStack(int numberOfStacked,StackPageTransformer.Orientation orientation,float currentPageScale,float topStackedScale,float overlapFactor,StackPageTransformer.Gravity gravity){  setOrientation(orientation.getViewPagerOrientation());  setPageTransformer(false,new StackPageTransformer(numberOfStacked,orientation,currentPageScale,topStackedScale,overlapFactor,gravity));  setOffscreenPageLimit(numberOfStacked + 1);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void draw(Graphics2D g,OdorWorld world,int screenWidth,int screenHeight){  if (background == null || screenHeight > background.getHeight(null)) {    g.setColor(Color.white);    g.fillRect(0,0,screenWidth,screenHeight);  }  if (background != null) {    g.drawImage(background,0,0,null);  }  for (  OdorWorldEntity entity : world.getObjectList()) {    int x=Math.round(entity.getX());    int y=Math.round(entity.getY());    while (g.drawImage(entity.getImage(),x,y,null) == false) {      ;    }    for (    Effector effector : entity.getEffectors()) {      if (effector instanceof Speech) {        if (((Speech)effector).isActivated()) {          RotatingEntity rotatingEntity=(RotatingEntity)entity;          g.drawImage(getSpeechBalloon((Speech)effector),null,getBalloonLocationX((RotatingEntity)entity),getBalloonLocationY((RotatingEntity)entity));        }      }      if (entity.isShowSensors()) {        for (        Sensor sensor : entity.getSensors()) {          if (sensor instanceof TileSensor) {            TileSensor tile=(TileSensor)sensor;            g.drawRect(tile.getX(),tile.getY(),tile.getWidth(),tile.getHeight());          } else           if (sensor instanceof Hearing) {            if (((Hearing)sensor).isActivated()) {              RotatingEntity rotatingEntity=(RotatingEntity)entity;              g.drawImage(getHearingSensorImage((Hearing)sensor),null,getBalloonLocationX(rotatingEntity),getBalloonLocationY((RotatingEntity)entity));            }          } else           if (sensor instanceof SmellSensor) {            double val=SimbrainMath.getVectorNorm(((SmellSensor)sensor).getCurrentValue());            float saturation=0;            if (world.getTotalSmellVectorLength() > 0) {              saturation=checkValid((float)Math.abs(val / (1 * world.getTotalSmellVectorLength())));            }            g.setPaint(Color.getHSBColor(sensorColor,saturation,1));            double[] location=((SmellSensor)sensor).getLocation();            g.fillOval((int)location[0] - SENSOR_DIAMATER / 2,(int)location[1] - SENSOR_DIAMATER / 2,SENSOR_DIAMATER,SENSOR_DIAMATER);            g.setColor(Color.black);            g.drawOval((int)location[0] - SENSOR_DIAMATER / 2,(int)location[1] - SENSOR_DIAMATER / 2,SENSOR_DIAMATER,SENSOR_DIAMATER);          }        }      }    }  }}  }
class C{  public void testEmptyWithAnnotations() throws Exception {  ObjectMapper mapper=new ObjectMapper();  try {    serializeAsString(mapper,new Empty());  } catch (  JsonMappingException e) {    verifyException(e,"No serializer found for class");  }  assertEquals("{}",serializeAsString(mapper,new EmptyWithAnno()));  mapper=new ObjectMapper();  mapper.getSerializationConfig().addMixInAnnotations(Empty.class,EmptyWithAnno.class);  assertEquals("{}",serializeAsString(mapper,new Empty()));}  }
class C{  public static final Polygon flipAlongTheYAxis(Polygon polygon){  return Geometry.flip(polygon,Vector2.Y_AXIS,null);}  }
class C{  public boolean isSupported(){  return false;}  }
class C{  public NPrism(int sides,double radiusTop,double radiusBase,double eccentricity,double height){  this(sides,radiusTop,radiusBase,eccentricity,height,true);}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.RESERVED_LITERAL;}  }
class C{  public void copyFrom(Properties src){  copyFrom(src,true);}  }
class C{  @SuppressWarnings("unchecked") public static ResolveResult createUsingURL(String url,Hashtable<?,?> env) throws NamingException {  CNCtx ctx=new CNCtx();  if (env != null) {    env=(Hashtable<?,?>)env.clone();  }  ctx._env=(Hashtable<String,java.lang.Object>)env;  String rest=ctx.initUsingUrl(env != null ? (org.omg.CORBA.ORB)env.get("java.naming.corba.orb") : null,url,env);  return new ResolveResult(ctx,parser.parse(rest));}  }
class C{  private static Path doPath(String s){  int n=s.length();  ParserHelper ph=new ParserHelper(s,0);  ph.skipWhitespace();  Path p=new Path();  float lastX=0;  float lastY=0;  float lastX1=0;  float lastY1=0;  float subPathStartX=0;  float subPathStartY=0;  char prevCmd=0;  while (ph.pos < n) {    char cmd=s.charAt(ph.pos);switch (cmd) {case '-':case '+':case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':      if (prevCmd == 'm' || prevCmd == 'M') {        cmd=(char)((prevCmd) - 1);        break;      } else       if (("lhvcsqta").indexOf(Character.toLowerCase(prevCmd)) >= 0) {        cmd=prevCmd;        break;      }default :{      ph.advance();      prevCmd=cmd;    }}boolean wasCurve=false;switch (cmd) {case 'M':case 'm':{    float x=ph.nextFloat();    float y=ph.nextFloat();    if (cmd == 'm') {      subPathStartX+=x;      subPathStartY+=y;      p.rMoveTo(x,y);      lastX+=x;      lastY+=y;    } else {      subPathStartX=x;      subPathStartY=y;      p.moveTo(x,y);      lastX=x;      lastY=y;    }    break;  }case 'Z':case 'z':{  p.close();  p.moveTo(subPathStartX,subPathStartY);  lastX=subPathStartX;  lastY=subPathStartY;  lastX1=subPathStartX;  lastY1=subPathStartY;  wasCurve=true;  break;}case 'T':case 't':case 'L':case 'l':{float x=ph.nextFloat();float y=ph.nextFloat();if (cmd == 'l') {  p.rLineTo(x,y);  lastX+=x;  lastY+=y;} else {  p.lineTo(x,y);  lastX=x;  lastY=y;}break;}case 'H':case 'h':{float x=ph.nextFloat();if (cmd == 'h') {p.rLineTo(x,0);lastX+=x;} else {p.lineTo(x,lastY);lastX=x;}break;}case 'V':case 'v':{float y=ph.nextFloat();if (cmd == 'v') {p.rLineTo(0,y);lastY+=y;} else {p.lineTo(lastX,y);lastY=y;}break;}case 'C':case 'c':{wasCurve=true;float x1=ph.nextFloat();float y1=ph.nextFloat();float x2=ph.nextFloat();float y2=ph.nextFloat();float x=ph.nextFloat();float y=ph.nextFloat();if (cmd == 'c') {x1+=lastX;x2+=lastX;x+=lastX;y1+=lastY;y2+=lastY;y+=lastY;}p.cubicTo(x1,y1,x2,y2,x,y);lastX1=x2;lastY1=y2;lastX=x;lastY=y;break;}case 'Q':case 'q':case 'S':case 's':{wasCurve=true;float x2=ph.nextFloat();float y2=ph.nextFloat();float x=ph.nextFloat();float y=ph.nextFloat();if (Character.isLowerCase(cmd)) {x2+=lastX;x+=lastX;y2+=lastY;y+=lastY;}float x1=2 * lastX - lastX1;float y1=2 * lastY - lastY1;p.cubicTo(x1,y1,x2,y2,x,y);lastX1=x2;lastY1=y2;lastX=x;lastY=y;break;}case 'A':case 'a':{float rx=ph.nextFloat();float ry=ph.nextFloat();float theta=ph.nextFloat();int largeArc=ph.nextFlag();int sweepArc=ph.nextFlag();float x=ph.nextFloat();float y=ph.nextFloat();if (cmd == 'a') {x+=lastX;y+=lastY;}drawArc(p,lastX,lastY,x,y,rx,ry,theta,largeArc,sweepArc);lastX=x;lastY=y;break;}default :Log.w(TAG,"Invalid path command: " + cmd);ph.advance();}if (!wasCurve) {lastX1=lastX;lastY1=lastY;}ph.skipWhitespace();}return p;}  }
class C{  public void testJobCounters() throws Exception {  IgniteFileSystem igfs=grid(0).fileSystem(HadoopAbstractSelfTest.igfsName);  igfs.mkdirs(new IgfsPath(PATH_INPUT));  try (BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(igfs.create(new IgfsPath(PATH_INPUT + "/test.file"),true)))){    bw.write("alpha\n" + "beta\n" + "gamma\n"+ "alpha\n"+ "beta\n"+ "gamma\n"+ "alpha\n"+ "beta\n"+ "gamma\n");  }   Configuration conf=config(HadoopAbstractSelfTest.REST_PORT);  final Job job=Job.getInstance(conf);  job.setOutputKeyClass(Text.class);  job.setOutputValueClass(IntWritable.class);  job.setMapperClass(TestCountingMapper.class);  job.setReducerClass(TestCountingReducer.class);  job.setCombinerClass(TestCountingCombiner.class);  FileInputFormat.setInputPaths(job,new Path(PATH_INPUT));  FileOutputFormat.setOutputPath(job,new Path(PATH_OUTPUT));  job.submit();  final Counter cntr=job.getCounters().findCounter(TestCounter.COUNTER1);  assertEquals(0,cntr.getValue());  cntr.increment(10);  assertEquals(10,cntr.getValue());  setupLockFile.delete();  mapLockFile.delete();  job.waitForCompletion(false);  assertEquals("job must end successfully",JobStatus.State.SUCCEEDED,job.getStatus().getState());  final Counters counters=job.getCounters();  assertNotNull("counters cannot be null",counters);  assertEquals("wrong counters count",3,counters.countCounters());  assertEquals("wrong counter value",15,counters.findCounter(TestCounter.COUNTER1).getValue());  assertEquals("wrong counter value",3,counters.findCounter(TestCounter.COUNTER2).getValue());  assertEquals("wrong counter value",3,counters.findCounter(TestCounter.COUNTER3).getValue());}  }
class C{  public boolean checkForRWPaths(){  boolean result=false;  String[] lines=mountReader();  for (  String line : lines) {    String[] args=line.split(" ");    if (args.length < 4) {      QLog.e("Error formatting mount line: " + line);      continue;    }    String mountPoint=args[1];    String mountOptions=args[3];    for (    String pathToCheck : Const.pathsThatShouldNotBeWrtiable) {      if (mountPoint.equalsIgnoreCase(pathToCheck)) {        for (        String option : mountOptions.split(",")) {          if (option.equalsIgnoreCase("rw")) {            QLog.v(pathToCheck + " path is mounted with rw permissions! " + line);            result=true;            break;          }        }      }    }  }  return result;}  }
class C{  public void remove(T object){  int pos;synchronized (mLock) {    pos=getPosition(object);    if (pos == -1)     return;    mObjects.remove(pos);  }  if (mNotifyOnChange)   notifyItemRemoved(pos);}  }
class C{  public static void cleanSharedPreferences(Context context){  deleteFilesInDirectory(new File(context.getFilesDir().getPath() + context.getPackageName() + "/shared_prefs"));}  }
class C{  public static void normalizeRegex(CharSequence s,Appendable out) throws IOException {  new Escaper(requireEndUnescaped(rebalance(s,'[',']')),REGEX_EMBEDDABLE_ESCAPES,NO_NON_ASCII,JS_ENCODER,out).normalize();}  }
class C{  public void cancel(){  isCanceled.set(true);}  }
class C{  public Rest connectTimeoutSeconds(final Integer connectTimeoutSeconds){  this.connectTimeoutSeconds=connectTimeoutSeconds;  return this;}  }
class C{  public JRadioButtonMenuItem(Icon icon,boolean selected){  this(null,icon,selected);}  }
class C{  private void computeDigestAlt(final Object snapshot,final MessageDigest digest) throws DigestException, IOException {  if (snapshot != null)   throw new UnsupportedOperationException();  m_allocationWriteLock.lock();  try {    for (    FixedAllocator fa : m_allocs) {      fa.computeDigest(snapshot,digest);    }  }  finally {    m_allocationWriteLock.unlock();  }{    final byte[] data=digest.digest();    final StringBuffer sb=new StringBuffer();    for (    byte b : data) {      if (sb.length() > 0)       sb.append(",");      sb.append(b);    }    log.warn("STORE DIGEST: " + sb.toString());    log.warn("Free Deferrals: " + this.m_deferredFreeOut.getBytesWritten());  }}  }
class C{  public void addVariableSystemWide(String key,String value){  addVariable(key,value);  if (this != getSystemWide()) {    getSystemWide().addVariableSystemWide(key,value);  }  System.setProperty(key,value);}  }
class C{  public MLBDistSplit(){  super();}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.BEFORE_CODE___OPERATION_NAME_1:    setOperationName_1((String)newValue);  return;case UmplePackage.BEFORE_CODE___ANONYMOUS_BEFORE_CODE_11:getAnonymous_beforeCode_1_1().clear();getAnonymous_beforeCode_1_1().addAll((Collection<? extends Anonymous_beforeCode_1_>)newValue);return;case UmplePackage.BEFORE_CODE___CODE_1:setCode_1((String)newValue);return;case UmplePackage.BEFORE_CODE___ANONYMOUS_BEFORE_CODE_21:getAnonymous_beforeCode_2_1().clear();getAnonymous_beforeCode_2_1().addAll((Collection<? extends Anonymous_beforeCode_2_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void test_getInnerCause02_find_exact(){  Throwable cause=new Exception();  Throwable t=new Throwable(cause);  assertTrue(cause == getInnerCause(t,Exception.class));}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public static void actionRename(PageContext pc,Resource directory,String strNewdirectory,String serverPassword,boolean createPath,Object acl,String storage) throws PageException {  SecurityManager securityManager=pc.getConfig().getSecurityManager();  securityManager.checkFileLocation(pc.getConfig(),directory,serverPassword);  if (!directory.exists())   throw new ApplicationException("the directory [" + directory.toString() + "] doesn't exist");  if (!directory.isDirectory())   throw new ApplicationException("the file [" + directory.toString() + "] exists, but it isn't a directory");  if (!directory.canRead())   throw new ApplicationException("no access to read directory [" + directory.toString() + "]");  if (strNewdirectory == null)   throw new ApplicationException("the attribute [newDirectory] is not defined");  Resource newdirectory=toDestination(pc,strNewdirectory,directory);  securityManager.checkFileLocation(pc.getConfig(),newdirectory,serverPassword);  if (newdirectory.exists())   throw new ApplicationException("new directory [" + newdirectory.toString() + "] already exists");  if (createPath) {    newdirectory.getParentResource().mkdirs();  }  try {    directory.moveTo(newdirectory);  } catch (  Throwable t) {    throw Caster.toPageException(t);  }  setS3Attrs(pc,directory,acl,storage);}  }
class C{  public boolean finish(){  if (!started)   return false;  boolean ok=true;  started=false;  try {    out.write(0x3b);    out.flush();    if (closeStream) {      out.close();    }  } catch (  IOException e) {    ok=false;  }  return ok;}  }
class C{  private static boolean checkForStringIsEmpty(GrExpression condition,GrExpression elseBranch){  if (condition instanceof GrMethodCall)   condition=((GrMethodCall)condition).getInvokedExpression();  if (!(condition instanceof GrReferenceExpression))   return false;  final GrExpression qualifier=((GrReferenceExpression)condition).getQualifier();  if (qualifier == null)   return false;  if (!PsiEquivalenceUtil.areElementsEquivalent(qualifier,elseBranch))   return false;  final PsiType type=qualifier.getType();  if (type == null)   return false;  if (!type.equalsToText(CommonClassNames.JAVA_LANG_STRING))   return false;  final PsiElement resolved=((GrReferenceExpression)condition).resolve();  return resolved instanceof PsiMethod && "isEmpty".equals(((PsiMethod)resolved).getName()) && ((PsiMethod)resolved).getParameterList().getParametersCount() == 0;}  }
class C{  public Z21Message(String m){  super(m);  setBinary(true);  byte b[]=jmri.util.StringUtil.bytesFromHexString(m);  if (b.length == 0) {    _nDataChars=0;    _dataChars=null;    return;  }  _nDataChars=b.length;  _dataChars=new int[_nDataChars];  for (int i=0; i < b.length; i++) {    setElement(i,b[i]);  }}  }
class C{  @SuppressWarnings("unchecked") public void onExchangeDone(AffinityTopologyVersion topVer,Collection<DynamicCacheChangeRequest> reqs,Throwable err){  for (  GridCacheAdapter<?,?> cache : caches.values()) {    GridCacheContext<?,?> cacheCtx=cache.context();    if (F.eq(cacheCtx.startTopologyVersion(),topVer)) {      if (cacheCtx.preloader() != null)       cacheCtx.preloader().onInitialExchangeComplete(err);      String masked=maskNull(cacheCtx.name());      jCacheProxies.put(masked,new IgniteCacheProxy(cache.context(),cache,null,false));    }  }  if (!F.isEmpty(reqs) && err == null) {    for (    DynamicCacheChangeRequest req : reqs) {      String masked=maskNull(req.cacheName());      if (req.stop()) {        stopGateway(req);        prepareCacheStop(req);      } else       if (req.close() && req.initiatingNodeId().equals(ctx.localNodeId())) {        IgniteCacheProxy<?,?> proxy=jCacheProxies.remove(masked);        if (proxy != null) {          if (proxy.context().affinityNode()) {            GridCacheAdapter<?,?> cache=caches.get(masked);            if (cache != null)             jCacheProxies.put(masked,new IgniteCacheProxy(cache.context(),cache,null,false));          } else {            proxy.context().gate().onStopped();            prepareCacheStop(req);          }        }      }      completeStartFuture(req);    }  }}  }
class C{  public VerletParticle3D(float x,float y,float z){  this(x,y,z,1);}  }
class C{  public IgnoreCharacterEncodingHttpRequestWrapper(HttpServletRequest request) throws UnsupportedEncodingException {  super(request);  if (request.getCharacterEncoding() == null) {    request.setCharacterEncoding(Constants.CHARACTER_ENCODING_UTF8);  }}  }
class C{  protected void addCommentPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Step_comment_feature"),getString("_UI_PropertyDescriptor_description","_UI_Step_comment_feature","_UI_Step_type"),SexecPackage.Literals.STEP__COMMENT,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public InvalidPhraseException(){}  }
class C{  public OracleCollection createCollection(String collectionName) throws OracleException {  return OracleDatabaseImpl.this.createCollection(collectionName);}  }
class C{  public static void sort(long[] array){  sort(0,array.length,array);}  }
class C{  public static boolean vPoolSpecifiesProtection(final VirtualPool virtualPool){  return virtualPool.getProtectionVarraySettings() != null && !virtualPool.getProtectionVarraySettings().isEmpty();}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:33.554 -0500",hash_original_method="C17135FC5CC76AEB5F88156629F51796",hash_generated_method="B29099714AF8AAA83987C7A4AD7ED6B1") public TelURLImpl(){  this.scheme="tel";}  }
class C{  public int compareTo(CondensedLine other){  if (this == other || this.equals(other)) {    return 0;  }  int comp=this.type.compareTo(other.type);  if (comp == 0) {    final Integer thisStart=this.getStart();    final Integer otherStart=other.getStart();    if (thisStart != null && otherStart != null) {      comp=thisStart - otherStart;    }  }  if (comp == 0) {    comp=this.getSuperMatchList().size() - other.getSuperMatchList().size();  }  if (comp == 0) {    comp=this.hashCode() - other.hashCode();  }  return comp;}  }
class C{  private static void insertMarks(StyledString styledString,String originalString,String processedString){  int originalLength=originalString.length();  int processedStringLength=processedString.length();  char orig=originalLength > 0 ? originalString.charAt(0) : '\0';  for (int o=0, p=0; p < processedStringLength; p++) {    char processed=processedString.charAt(p);    if (o < originalLength) {      if (orig == processed) {        o++;        if (o < originalLength)         orig=originalString.charAt(o);        continue;      }    }    styledString.insert(processed,p);  }}  }
class C{  public DataSetBuilder<T> emit(T record){  builder.emit(record);  return this;}  }
class C{  public synchronized void cancelRemotePortForwarding(int bindPort) throws IOException {  if (tm == null)   throw new IllegalStateException("You need to establish a connection first.");  if (!authenticated)   throw new IllegalStateException("The connection is not authenticated.");  cm.requestCancelGlobalForward(bindPort);}  }
class C{  private List<Node<T>> mergeDividersHorizontallyWithPeripheralMove(SurfacePriviledged<T> surface,Node<T> node){  List<Node<T>> affectedNodes=new ArrayList<Node<T>>();  double dividerAllowance=surface.getDividerSize() * 2;  double mergeLoc=node.r.getMaxX() - Math.rint(node.r.width / 2);  List<Divider<T>> prevSearchResults=surface.getSearchResults(node.prevVertical);  boolean resultsAreLeading=node.prevHorizontal.leadingJoins.contains(prevSearchResults.get(0));  Set<Divider<T>> moveList=resultsAreLeading ? new HashSet<Divider<T>>(node.prevHorizontal.leadingJoins) : new HashSet<Divider<T>>(node.nextHorizontal.trailingJoins);  moveList.addAll(prevSearchResults);  double reductionAmt=Math.rint((node.r.width / 2d) + dividerAllowance / (double)(moveList.size() + 1));  for (  Divider<T> d : moveList) {    moveDivider(surface,affectedNodes,d,null,new Point2D.Double(d.r.x + reductionAmt,0),surface.getDividerSize());  }  prevSearchResults=surface.getSearchResults(node.nextVertical);  resultsAreLeading=node.prevHorizontal.leadingJoins.contains(prevSearchResults.get(0));  moveList=resultsAreLeading ? new HashSet<Divider<T>>(node.prevHorizontal.leadingJoins) : new HashSet<Divider<T>>(node.nextHorizontal.trailingJoins);  moveList.addAll(prevSearchResults);  reductionAmt=Math.rint((node.r.width / 2d) + dividerAllowance / (double)(moveList.size() + 1));  for (  Divider<T> d : moveList) {    moveDivider(surface,affectedNodes,d,null,new Point2D.Double(d.r.x - reductionAmt,0),surface.getDividerSize());  }  affectedNodes.addAll(mergeDividers(surface,node.prevVertical,node.nextVertical,mergeLoc));  return affectedNodes;}  }
class C{  private static void idle(long periodMs){  final long target=System.currentTimeMillis() + periodMs;  do {    Thread.yield();  } while (System.currentTimeMillis() < target);}  }
class C{  public static void init(){  if (ToastBootstrap.isSimulation)   setupSim();  registerNatives();}  }
class C{  public static ConnectivityGrid ConnectivityGridFactory(int key,double maxRange){  if (gridobjects.containsKey((Integer)key)) {    return (ConnectivityGrid)gridobjects.get((Integer)key);  } else {    ConnectivityGrid newgrid=new ConnectivityGrid((int)Math.ceil(maxRange * cellSizeMultiplier));    gridobjects.put((Integer)key,newgrid);    return newgrid;  }}  }
class C{  void addFillComponents(Container panel,int[] cols,int[] rows){  Dimension filler=new Dimension(10,10);  boolean filled_cell_11=false;  CellConstraints cc=new CellConstraints();  if (cols.length > 0 && rows.length > 0) {    if (cols[0] == 1 && rows[0] == 1) {      panel.add(Box.createRigidArea(filler),cc.xy(1,1));      filled_cell_11=true;    }  }  for (int index=0; index < cols.length; index++) {    if (cols[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));  }  for (int index=0; index < rows.length; index++) {    if (rows[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));  }}  }
class C{  public TrainingSet(double[][] inputData,double[][] targetData){  super();  this.inputData=inputData;  this.targetData=targetData;}  }
class C{  private void adjustCategories(DiscreteVariable variable,int numCategories){  List<String> categories=new LinkedList<>(variable.getCategories());  List<String> newCategories=new LinkedList<>(categories);  if (categories.size() > numCategories) {    for (int i=variable.getCategories().size() - 1; i >= numCategories; i++) {      newCategories.remove(i);    }  } else   if (categories.size() < numCategories) {    for (int i=categories.size(); i < numCategories; i++) {      String category=DataUtils.defaultCategory(i);      if (categories.contains(category)) {        continue;      }      newCategories.add(category);    }  }  DiscreteVariable to=new DiscreteVariable(variable.getName(),newCategories);  changeVariable(variable,to);}  }
class C{  void adjustBreaker(long delta){  if (this.breakerService != null) {    CircuitBreaker breaker=this.breakerService.getBreaker(CircuitBreaker.REQUEST);    if (this.checkBreaker == true) {      if (delta > 0) {        try {          breaker.addEstimateBytesAndMaybeBreak(delta,"<reused_arrays>");        } catch (        CircuitBreakingException e) {          breaker.addWithoutBreaking(delta);          throw e;        }      } else {        breaker.addWithoutBreaking(delta);      }    } else {      breaker.addWithoutBreaking(delta);    }  }}  }
class C{  private void initialize(){  this.setLayout(new CardLayout());  this.setName(PANEL_NAME);  regexesPanel=new MultipleRegexesOptionsPanel(View.getSingleton().getSessionDialog());  this.add(getPanelSession(),getPanelSession().getName());}  }
class C{  public static double blackFormulaStdDevDerivative(final PlainVanillaPayoff payoff,@Real final double forward,@StdDev final double stddev,@DiscountFactor final double discount,@Real final double displacement){  return blackFormulaStdDevDerivative(payoff.strike(),forward,stddev,discount,displacement);}  }
class C{  @SuppressWarnings("MagicNumber") Response<RT,ET> parseResponse(okhttp3.Response rawResponse) throws IOException {  ResponseBody rawBody=rawResponse.body();  rawResponse=rawResponse.newBuilder().body(new NoContentResponseBody(rawBody.contentType(),rawBody.contentLength())).build();  ExceptionCatchingRequestBody catchingBody=new ExceptionCatchingRequestBody(rawBody);  int code=rawResponse.code();  if (code < 200 || code >= 300) {    try {      if (code == 401) {        ResponseBody bufferedBody=buffer(catchingBody);        api.notifyAuthError(Response.error(bufferedBody,rawResponse));        throw new IOException("401 Unauthorized");      }      ET errorBody=api.converter().convertFromBody(errorType,catchingBody);      return Response.error(errorBody,rawResponse);    } catch (    EOFException eofe) {      return Response.error(null,rawResponse);    }catch (    RuntimeException e) {      catchingBody.throwIfCaught();      throw e;    } finally {      closeQuietly(catchingBody);    }  }  if (code == 204 || code == 205) {    return Response.success(null,rawResponse);  }  try {    RT body=api.converter().convertFromBody(responseType,catchingBody);    String contentRange=rawResponse.header(ContentRange.HEADER_NAME);    return Response.success(body,ContentRange.parse(contentRange),rawResponse);  } catch (  RuntimeException e) {    catchingBody.throwIfCaught();    throw e;  } finally {    closeQuietly(catchingBody);  }}  }
class C{  public void readBIF(String instring) throws BIFFormatException {  BIFParser bp=new BIFParser(instring,m_nodes,m_edges);  try {    graphID=bp.parse();  } catch (  BIFFormatException bf) {    System.out.println("BIF format error");    bf.printStackTrace();  }catch (  Exception ex) {    ex.printStackTrace();    return;  }  setAppropriateNodeSize();  if (m_le != null) {    m_le.setNodeSize(paddedNodeWidth,nodeHeight);  }}  }
class C{  public static Builder builder(GridClientNode from,boolean skipAttrs,boolean skipMetrics){  Builder b=new Builder(new GridClientNodeImpl()).nodeId(from.nodeId()).consistentId(from.consistentId()).tcpAddresses(from.tcpAddresses()).tcpPort(from.tcpPort()).caches(from.caches()).connectable(from.connectable());  if (!skipAttrs)   b.attributes(from.attributes());  if (!skipMetrics)   b.metrics(from.metrics());  return b;}  }
class C{  public void post(Object event){  postRemote(event);  postLocal(event);}  }
class C{  public void initializeComment(final ArrayList<IComment> comments){  m_node.initializeLocalFunctionComment(comments);  for (  final IFunctionNodeListener listener : m_listeners) {    try {      listener.initializedComment(this,comments);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  public void addInstanceNumberAttribute(){  String originalRelationName=m_plotInstances.relationName();  int originalClassIndex=m_plotInstances.classIndex();  try {    Add addF=new Add();    addF.setAttributeName("Instance_number");    addF.setAttributeIndex("first");    addF.setInputFormat(m_plotInstances);    m_plotInstances=Filter.useFilter(m_plotInstances,addF);    m_plotInstances.setClassIndex(originalClassIndex + 1);    for (int i=0; i < m_plotInstances.numInstances(); i++) {      m_plotInstances.instance(i).setValue(0,i);    }    m_plotInstances.setRelationName(originalRelationName);  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public int E(){  return E;}  }
class C{  boolean inSameSubroutine(final Label block){  if ((status & VISITED) == 0 || (block.status & VISITED) == 0) {    return false;  }  for (int i=0; i < srcAndRefPositions.length; ++i) {    if ((srcAndRefPositions[i] & block.srcAndRefPositions[i]) != 0) {      return true;    }  }  return false;}  }
class C{  private void groupingNetwork(List<NetworkGroup> networkGroups){  List<IEspDevice> userDevices=BEspUser.getBuilder().getInstance().getAllDeviceList();  for (int i=0; i < userDevices.size(); i++) {    IEspDevice device=userDevices.get(i);    String rootBssid=device.getRootDeviceBssid();    String bssid=device.getBssid();    if (rootBssid.equals(bssid)) {      NetworkGroup networkGroup=new NetworkGroup();      networkGroup.rootDeviceKey=device.getKey();      networkGroup.bssids.append(bssid).append(',');      addDeviceState(networkGroup,device);      networkGroups.add(networkGroup);      userDevices.remove(i--);      continue;    }  }  for (int i=0; i < userDevices.size(); i++) {    IEspDevice device=userDevices.get(i);    String rootBssid=device.getRootDeviceBssid();    String bssid=device.getBssid();    if (!rootBssid.equals(bssid)) {      for (      NetworkGroup ng : networkGroups) {        if (ng.bssids.toString().contains(rootBssid)) {          ng.bssids.append(bssid).append(',');          addDeviceState(ng,device);          break;        }      }    }  }  for (int i=0; i < userDevices.size(); i++) {    IEspDeviceState state=userDevices.get(i).getDeviceState();    if (!state.isStateLocal() && !state.isStateInternet()) {      userDevices.remove(i--);    }  }  for (int i=0; i < userDevices.size(); i++) {    IEspDevice device=userDevices.get(i);    String bssid=device.getBssid();    NetworkGroup networkGroup=new NetworkGroup();    networkGroup.rootDeviceKey=device.getKey();    networkGroup.bssids.append(bssid).append(',');    addDeviceState(networkGroup,device);    networkGroups.add(networkGroup);  }}  }
class C{  @Override public final void process(final DistributionManager dm){  Throwable thr=null;  boolean sendReply=true;  PartitionedRegion pr=null;  try {    logger.info(LocalizedMessage.create(LocalizedStrings.RemoveIndexesMessage_TRYING_TO_GET_PR_WITH_ID___0,this.regionId));    pr=PartitionedRegion.getPRFromId(this.regionId);    logger.info(LocalizedMessage.create(LocalizedStrings.RemoveIndexesMessage_REMOVE_INDEXES_MESSAGE_GOT_THE_PR__0,pr));    if (pr == null) {      throw new PartitionedRegionException(LocalizedStrings.RemoveIndexesMessage_COULD_NOT_GET_PARTITIONED_REGION_FROM_ID_0_FOR_MESSAGE_1_RECEIVED_ON_MEMBER_2_MAP_3.toLocalizedString(new Object[]{Integer.valueOf(this.regionId),this,dm.getId(),PartitionedRegion.dumpPRId()}));    }    sendReply=operateOnPartitionedRegion(dm,pr,0);  } catch (  PRLocallyDestroyedException pde) {    if (logger.isDebugEnabled()) {      logger.debug("Region is locally Destroyed ");    }    thr=pde;  }catch (  VirtualMachineError err) {    SystemFailure.initiateFailure(err);    throw err;  }catch (  Throwable t) {    SystemFailure.checkFailure();    if (this.processorId == 0) {      logger.debug("{} exception while processing message: {}",this,t.getMessage(),t);    } else     if (logger.isTraceEnabled(LogMarker.DM) && (t instanceof RuntimeException)) {      logger.debug("Exception caught while processing message: {}",t.getMessage(),t);    }    if (t instanceof RegionDestroyedException && pr != null) {      if (pr.isClosed) {        logger.info(LocalizedMessage.create(LocalizedStrings.RemoveIndexesMessage_REGION_IS_LOCALLY_DESTROYED_THROWING_REGIONDESTROYEDEXCEPTION_FOR__0,pr));        thr=new RegionDestroyedException(LocalizedStrings.RemoveIndexesMessage_REGION_IS_LOCALLY_DESTROYED_ON_0.toLocalizedString(dm.getId()),pr.getFullPath());      }    } else {      thr=t;    }  } finally {    if (sendReply && this.processorId != 0) {      ReplyException rex=null;      if (thr != null) {        rex=new ReplyException(thr);      }      sendReply(getSender(),this.processorId,dm,rex,pr,0);    }  }}  }
class C{  public Ed25519FieldElement decode(){  long h0=fourBytesToLong(this.values,0);  long h1=threeBytesToLong(this.values,4) << 6;  long h2=threeBytesToLong(this.values,7) << 5;  long h3=threeBytesToLong(this.values,10) << 3;  long h4=threeBytesToLong(this.values,13) << 2;  long h5=fourBytesToLong(this.values,16);  long h6=threeBytesToLong(this.values,20) << 7;  long h7=threeBytesToLong(this.values,23) << 5;  long h8=threeBytesToLong(this.values,26) << 4;  long h9=(threeBytesToLong(this.values,29) & 0x7FFFFF) << 2;  final long carry0;  final long carry1;  final long carry2;  final long carry3;  final long carry4;  final long carry5;  final long carry6;  final long carry7;  final long carry8;  final long carry9;  carry9=(h9 + (long)(1 << 24)) >> 25;  h0+=carry9 * 19;  h9-=carry9 << 25;  carry1=(h1 + (long)(1 << 24)) >> 25;  h2+=carry1;  h1-=carry1 << 25;  carry3=(h3 + (long)(1 << 24)) >> 25;  h4+=carry3;  h3-=carry3 << 25;  carry5=(h5 + (long)(1 << 24)) >> 25;  h6+=carry5;  h5-=carry5 << 25;  carry7=(h7 + (long)(1 << 24)) >> 25;  h8+=carry7;  h7-=carry7 << 25;  carry0=(h0 + (long)(1 << 25)) >> 26;  h1+=carry0;  h0-=carry0 << 26;  carry2=(h2 + (long)(1 << 25)) >> 26;  h3+=carry2;  h2-=carry2 << 26;  carry4=(h4 + (long)(1 << 25)) >> 26;  h5+=carry4;  h4-=carry4 << 26;  carry6=(h6 + (long)(1 << 25)) >> 26;  h7+=carry6;  h6-=carry6 << 26;  carry8=(h8 + (long)(1 << 25)) >> 26;  h9+=carry8;  h8-=carry8 << 26;  final int[] h=new int[10];  h[0]=(int)h0;  h[1]=(int)h1;  h[2]=(int)h2;  h[3]=(int)h3;  h[4]=(int)h4;  h[5]=(int)h5;  h[6]=(int)h6;  h[7]=(int)h7;  h[8]=(int)h8;  h[9]=(int)h9;  return new Ed25519FieldElement(h);}  }
class C{  public void warning(SAXParseException ex) throws SAXException {}  }
class C{  public boolean isInitialized(String field){  return (_initialized.contains(field));}  }
class C{  public String dateReplacementValueTipText(){  return "The constant to replace missing values in date attributes with";}  }
class C{  public HttpRoute(HttpHost target,InetAddress local,boolean secure){  this(local,target,null,secure,TunnelType.PLAIN,LayerType.PLAIN);}  }
class C{  public static CategoryLabelPositions replaceTopPosition(CategoryLabelPositions base,CategoryLabelPosition top){  ParamChecks.nullNotPermitted(base,"base");  ParamChecks.nullNotPermitted(top,"top");  return new CategoryLabelPositions(top,base.getLabelPosition(RectangleEdge.BOTTOM),base.getLabelPosition(RectangleEdge.LEFT),base.getLabelPosition(RectangleEdge.RIGHT));}  }
class C{  private void killSpider(String name){  final Creature creature=new Creature();  creature.put("class","");  creature.put("subclass","");  creature.setName(name);  creature.setHP(1);  creature.setAtkXP(1);  creature.setDefXP(1);  creature.setSounds(new LinkedList<String>());  final Creature spider=new Creature(creature);  spider.registerObjectsForNotification(observer);  player.teleport(basement,5,5,null,player);  StendhalRPAction.placeat(basement,spider,51,50);  spider.onDead(player,true);}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public void finishFunction(String functionName){  stopTimer(functionName);  logger.debug("Finishing function {}",functionName);}  }
class C{  private void hashNodes() throws Exception {  for (int levelStart=nodes.length / 2; levelStart > 0; levelStart/=2) {    int levelEnd=levelStart * 2;    LOG.trace("Combining: {}-{}",levelStart,levelEnd);    for (int i=levelStart; i < levelEnd && nodes[i] != null && nodes[i + 1] != null; i+=2) {      LOG.trace("Nodes: Combining {} and {}",i,i + 1);      byte[] stepDigest=digestHashStep(hashAlgorithm,nodes[i],nodes[i + 1]);      LOG.trace("Storing at {}",parentIdx(i));      nodes[parentIdx(i)]=stepDigest;    }  }}  }
class C{  public Token next() throws IOException {  skipWhitespace();  int c=reader.read();  if (c < 0) {    return new Token(Token.EOF);  } else   if (c == '\n') {    return new Token(Token.EOL);  } else   if (c == '\'' || c == '"') {    return munchString(c);  } else   if (c == '/') {    return maybeComment();  } else   if (single.get(c)) {    return new Token(Token.SINGLE,String.valueOf((char)c));  } else {    reader.unread(c);    return parseWord();  }}  }
class C{  public String toString(){  StringBuilder s=new StringBuilder();  for (int i=0; i < d; i++)   s.append(data[i] + " ");  return s.toString();}  }
class C{  public void visitAttribute(final Attribute attr){  buf.setLength(0);  buf.append(tab).append("ATTRIBUTE ");  appendDescriptor(-1,attr.type);  if (attr instanceof Textifiable) {    ((Textifiable)attr).textify(buf,null);  } else {    buf.append(" : unknown\n");  }  text.add(buf.toString());}  }
class C{  public int ff_h264_check_intra_pred_mode(int mode){  int[] top=new int[]{H264PredictionContext.LEFT_DC_PRED8x8,1,-1,-1,0,0,0};  int[] left=new int[]{H264PredictionContext.TOP_DC_PRED8x8,-1,2,-1,H264PredictionContext.DC_128_PRED8x8,0,0};  if (mode > 6) {    return -1;  }  if (0 == (this.top_samples_available & 0x08000)) {    mode=top[mode];    if (mode < 0) {      return -1;    }  }  if ((this.left_samples_available & 0x08080) != 0x08080) {    mode=left[mode];    if (0 != (this.left_samples_available & 0x08080)) {      mode=H264PredictionContext.ALZHEIMER_DC_L0T_PRED8x8 + ((this.left_samples_available & 0x08000) == 0 ? 1 : 0) + 2 * (mode == H264PredictionContext.DC_128_PRED8x8 ? 1 : 0);    }    if (mode < 0) {      return -1;    }  }  return mode;}  }
class C{  public ConcurrentOffHeapHashMap(PageSource tableSource,Factory<? extends StorageEngine<? super K,? super V>> storageEngineFactory){  super(new ReadWriteLockedOffHeapHashMapFactory<K,V>(tableSource,storageEngineFactory));}  }
class C{  public boolean bindnotreleasehack(){  return bindnotreleasehack;}  }
class C{  @SuppressWarnings("unchecked") public static <T>T invokeStaticMethod(final String className,final String methodName,final Class<?>[] types,final Object... args) throws ReflectionException {  return (T)helper(null,className,methodName,types,args);}  }
class C{  public TrainingSetPanel(){  final JSplitPane split=new JSplitPane(JSplitPane.HORIZONTAL_SPLIT);  JPanel filler1=new JPanel();  filler1.setBackground(Color.lightGray);  JPanel filler2=new JPanel();  filler2.setBackground(Color.lightGray);  split.setLeftComponent(filler1);  split.setRightComponent(filler2);  split.setResizeWeight(.5);  split.setBorder(null);  setLayout(new GridBagLayout());  GridBagConstraints wholePanelConstraints=new GridBagConstraints();  wholePanelConstraints.fill=GridBagConstraints.BOTH;  wholePanelConstraints.weightx=0.5;  wholePanelConstraints.weighty=0.5;  wholePanelConstraints.gridx=0;  wholePanelConstraints.gridy=0;  add(split,wholePanelConstraints);}  }
class C{  public static String timeToString(long time,Resolution resolution){  final Date date=new Date(round(time,resolution));  return TL_FORMATS.get()[resolution.formatLen].format(date);}  }
class C{  public static boolean containsFile(File dir,File[] files){  for (  File child : dir.listFiles()) {    if (child.isDirectory()) {      if (containsFile(child,files)) {        return true;      }    } else {      for (      File file : files) {        if (child.getAbsolutePath().equals(file.getAbsolutePath())) {          return true;        }      }    }  }  return false;}  }
class C{  public static void copy(URL from,OutputStream to) throws IOException {  asByteSource(from).copyTo(to);}  }
class C{  public boolean isSupported(String jid){  try {    DiscoverInfo result=ServiceDiscoveryManager.getInstanceFor(connection).discoverInfo(jid);    return result.containsFeature(DeliveryReceipt.NAMESPACE);  } catch (  XMPPException e) {    return false;  }}  }
class C{  public void appendNodes(NodeVector nodes){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));  super.appendNodes(nodes);}  }
class C{  public void initDebugInfo(FrameMap frameMap,boolean canHaveRegisters){  debugInfo=new DebugInfo(topFrame,virtualObjects);}  }
class C{  @Override public void init(Resource connection,Map<String,Object> config) throws BaleenException {  SharedMongoResource mongo;  try {    mongo=(SharedMongoResource)connection;  } catch (  ClassCastException cce) {    throw new InvalidParameterException("Unable to cast connection parameter to SharedMongoResource",cce);  }  valueField=DEFAULT_VALUE_FIELD;  if (config.containsKey(CONFIG_VALUE_FIELD)) {    valueField=config.get(CONFIG_VALUE_FIELD).toString();  }  String collection=DEFAULT_COLLECTION;  if (config.containsKey(CONFIG_COLLECTION)) {    collection=config.get(CONFIG_COLLECTION).toString();  }  coll=mongo.getDB().getCollection(collection);  super.init(connection,config);}  }
class C{  private void loadCustomPrefixes(ArrayList<String> sourcePrefixes){  s_logger.log(Level.FINE,"loadCustomPrefixes",getDirection());  ArrayList<String> entityTypes=new ArrayList<String>();  StringBuffer result=new StringBuffer();  String sql=s_dbEngine.sqlAD_getCustomEntityPrefixes(getVendor(),getCatalog(),getSchema());  ResultSet rs=null;  java.sql.Statement stmt=null;  if (isObjectExists("ad_entitytype",m_tables)) {    stmt=setStatement();    rs=executeQuery(stmt,sql);    while (getResultSetNext(rs)) {      String s=getResultSetString(rs,"EntityType").toUpperCase();      if (!entityTypes.contains(s)) {        if (isTarget()) {          if (sourcePrefixes != null) {            if (!sourcePrefixes.contains(s)) {              entityTypes.add(s);            }          } else {            entityTypes.add(s);          }        } else {          entityTypes.add(s);        }      }    }    releaseResultSet(rs);    releaseStatement(stmt);  }  if (!entityTypes.contains("CUST"))   entityTypes.add("CUST");  if (!entityTypes.contains("EXT"))   entityTypes.add("EXT");  if (!entityTypes.contains("XX"))   entityTypes.add("XX");  java.util.Collections.sort(entityTypes);  m_customPrefixes=new ArrayList<String>(entityTypes);  for (Iterator<String> it=entityTypes.iterator(); it.hasNext(); ) {    String s=it.next();    if (result.length() > 0)     result.append(", ");    result.append(s).append("_");  }  s_logger.log(Level.FINE,"customPrefixesLoaded",new Object[]{getDirection(),result});  s_logger.flush();}  }
class C{  public boolean hasImprovedSensors(){  for (  Mounted equip : getMisc()) {    if (equip.getType().hasFlag(MiscType.F_BAP)) {      if (equip.getType().getInternalName().equals(Sensor.ISIMPROVED) || equip.getType().getInternalName().equals(Sensor.CLIMPROVED)) {        return true;      }    }  }  return false;}  }
class C{  private void handleConfigurationChanged(Context context){  try {    Configuration config=context.getResources().getConfiguration();    if (mMonitorOrientation) {      int newOrientation=config.orientation;      if (newOrientation != mDeviceOrientation) {        mDeviceOrientation=newOrientation;        setOrientationForAudioSystem();      }    }    if (mMonitorRotation) {      int newRotation=((WindowManager)context.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay().getRotation();      if (newRotation != mDeviceRotation) {        mDeviceRotation=newRotation;        setRotationForAudioSystem();      }    }    sendMsg(mAudioHandler,MSG_CONFIGURE_SAFE_MEDIA_VOLUME,SENDMSG_REPLACE,0,0,null,0);    boolean cameraSoundForced=mContext.getResources().getBoolean(com.android.internal.R.bool.config_camera_sound_forced);synchronized (mSettingsLock) {synchronized (mCameraSoundForced) {        if (cameraSoundForced != mCameraSoundForced) {          mCameraSoundForced=cameraSoundForced;          VolumeStreamState s=mStreamStates[AudioSystem.STREAM_SYSTEM_ENFORCED];          if (cameraSoundForced) {            s.setAllIndexesToMax();            mRingerModeAffectedStreams&=~(1 << AudioSystem.STREAM_SYSTEM_ENFORCED);          } else {            s.setAllIndexes(mStreamStates[AudioSystem.STREAM_SYSTEM]);            mRingerModeAffectedStreams|=(1 << AudioSystem.STREAM_SYSTEM_ENFORCED);          }          setRingerModeInt(getRingerMode(),false);          sendMsg(mAudioHandler,MSG_SET_FORCE_USE,SENDMSG_QUEUE,AudioSystem.FOR_SYSTEM,cameraSoundForced ? AudioSystem.FORCE_SYSTEM_ENFORCED : AudioSystem.FORCE_NONE,null,0);          sendMsg(mAudioHandler,MSG_SET_ALL_VOLUMES,SENDMSG_QUEUE,0,0,mStreamStates[AudioSystem.STREAM_SYSTEM_ENFORCED],0);        }      }    }    mVolumePanel.setLayoutDirection(config.getLayoutDirection());  } catch (  Exception e) {    Log.e(TAG,"Error handling configuration change: ",e);  }}  }
class C{  @Override public Set<Map.Entry<K,V>> entrySet(){  HashMap<K,V> map=new HashMap<K,V>();  for (  K k : keySet()) {    map.put(k,find(k).value);  }  return map.entrySet();}  }
class C{  public Rule(final String name,final boolean water,final GameData data,final int... coordinate){  super(name,data);  m_water=water;  m_units=new UnitCollection(this,getData());  if (data.getMap().isCoordinateValid(coordinate)) {    m_coordinate=coordinate;  } else {    throw new IllegalArgumentException("Invalid coordinate: " + coordinate[0] + ","+ coordinate[1]);  }}  }
class C{  public static JComponent findView(PropertyEditor editor){  JComponent result;  result=null;  if (editor.supportsCustomEditor() && editor.isPaintable()) {    result=new PropertyPanel(editor);  } else   if (editor.supportsCustomEditor() && (editor.getCustomEditor() instanceof JComponent)) {    result=(JComponent)editor.getCustomEditor();  } else   if (editor.getTags() != null) {    result=new PropertyValueSelector(editor);  } else   if (editor.getAsText() != null) {    result=new PropertyText(editor);  }  return result;}  }
class C{  public static byte[] encode(byte[] source,int off,int len,byte[] alphabet,int maxLineLength){  int lenDiv3=(len + 2) / 3;  int len43=lenDiv3 * 4;  byte[] outBuff=new byte[len43 + (len43 / maxLineLength)];  int d=0;  int e=0;  int len2=len - 2;  int lineLength=0;  for (; d < len2; d+=3, e+=4) {    int inBuff=((source[d + off] << 24) >>> 8) | ((source[d + 1 + off] << 24) >>> 16) | ((source[d + 2 + off] << 24) >>> 24);    outBuff[e]=alphabet[(inBuff >>> 18)];    outBuff[e + 1]=alphabet[(inBuff >>> 12) & 0x3f];    outBuff[e + 2]=alphabet[(inBuff >>> 6) & 0x3f];    outBuff[e + 3]=alphabet[(inBuff) & 0x3f];    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;      lineLength=0;    }  }  if (d < len) {    encode3to4(source,d + off,len - d,outBuff,e,alphabet);    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;    }    e+=4;  }  assert (e == outBuff.length);  return outBuff;}  }
class C{  protected void stopTimer(){  if (timer != null) {    timer.stop();  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  static InternetDomainName validateHostName(String name) throws EppException {  if (name == null) {    return null;  }  if (name.length() > 253) {    throw new HostNameTooLongException();  }  try {    InternetDomainName hostName=InternetDomainName.from(name);    if (hostName.isUnderPublicSuffix()) {      if (hostName.parent().isUnderPublicSuffix()) {        return hostName;      }    } else {      Optional<InternetDomainName> tldParsed=findTldForName(hostName);      int suffixSize=tldParsed.isPresent() ? tldParsed.get().parts().size() : 1;      if (hostName.parts().size() >= suffixSize + 2) {        return hostName;      }    }    throw new HostNameTooShallowException();  } catch (  IllegalArgumentException e) {    throw new InvalidHostNameException();  }}  }
class C{  private static final String hosthash6(final String protocol,final String host,final int port){  final StringBuilder hash=new StringBuilder(12);  final int id=Domains.getDomainID(host,null);  int p=host.lastIndexOf('.');  String dom=(p > 0) ? dom=host.substring(0,p) : "";  p=dom.lastIndexOf('.');  if (p > 0)   dom=dom.substring(p + 1);  final int l=dom.length();  final int domlengthKey=(l <= 8) ? 0 : (l <= 12) ? 1 : (l <= 16) ? 2 : 3;  final byte flagbyte=(byte)(((protocol.equals("http")) ? 0 : 32) | (id << 2) | domlengthKey);  hash.append(hosthash5(protocol,host,port));  hash.append(Base64Order.enhancedCoder.encodeByte(flagbyte));  return hash.toString();}  }
class C{  public static String property(String name,Object value){  if (value == null || value.equals(-1) || value.equals(-1L)) {    return "";  }  if (Number.class.isAssignableFrom(value.getClass())) {    if (Long.MAX_VALUE == ((Number)value).longValue()) {      return "\"" + name + "\" : \"unbounded\"";    }    return "\"" + name + "\" : "+ value.toString();  }  if (Boolean.class.isAssignableFrom(value.getClass())) {    return "\"" + name + "\" : "+ value.toString();  }  return "\"" + name + "\" : "+ (String.class.isAssignableFrom(value.getClass()) ? "\"" + value.toString().replaceAll("\"","\\\"") + "\"" : value);}  }
class C{  boolean inPlace(){  return inPlace;}  }
class C{  public void processStream() throws IOException {  if (getContentType() != null && shouldRewrite(getContentType())) {    outStream.rewrite(server);  }  super.getOutputStream().flush();  super.getOutputStream().close();  outStream.close();  originalWriter.close();  outWriter.close();}  }
class C{  public DVDMultiFile(){}  }
class C{  void processEquals(){  double result=0;  if (this.displayMode != DISPLAY_MODE.ERROR) {    try {      result=processLastOperator();      displayResult(result);    } catch (    final DivideByZeroException e) {      displayErrorMessage(ResourceManager.CALCULATOR_DIVIDE_BY_ZERO);    }    this.lastOperator=CHARACTER_ZERO;  }}  }
class C{  protected static boolean U16(int value){  return (value & 0xffff) == 0;}  }
class C{  @Override public Cell merge(Cell m,Cell e){  if (m.cmd == e.cmd && m.ref == e.ref && m.skip == e.skip) {    Cell c=new Cell(m);    c.cnt+=e.cnt;    return c;  } else {    return null;  }}  }
class C{  public static final long free(){  return runtime.freeMemory();}  }
class C{  public Solution copy(){  List<String> newRepresentation=new ArrayList<String>(this.representation.size());  for (  String id : this.representation) {    newRepresentation.add(id);  }  Solution ss=new Solution(newRepresentation,this.getObjective(),this.solutionMatrix);  Map<String,String> newAllocation=new HashMap<String,String>();  for (  String id : this.allocation.keySet()) {    newAllocation.put(id,this.allocation.get(id));  }  ss.allocation=newAllocation;  return ss;}  }
class C{  public Month(int month,Year year){  if ((month < 1) || (month > 12)) {    throw new IllegalArgumentException("Month outside valid range.");  }  this.month=month;  this.year=year.getYear();  peg(Calendar.getInstance());}  }
class C{  public boolean isOneDotNine(){  return jdkVersion == JDK1_9;}  }
class C{  @Override public void onMissing(Detector.Detections<Barcode> detectionResults){  mOverlay.remove(mGraphic);}  }
class C{  public void flip(boolean animate){  if (mFrontView == null || mBackView == null) {    throw new NullPointerException("You must specify a front and back view for the " + "FlippableView, through either a constructor, XML attribute, or method");  }  if (!mIsBackShowing) {    if (mViewFlipper.getDisplayedChild() == 1) {      return;    }    if (animate) {      mViewFlipper.setInAnimation(mContext,R.anim.grow_from_middle);      mViewFlipper.setOutAnimation(mContext,R.anim.shrink_to_middle);    }    mViewFlipper.showPrevious();  } else {    if (mViewFlipper.getDisplayedChild() == 0) {      return;    }    if (animate) {      mViewFlipper.setInAnimation(mContext,R.anim.grow_from_middle);      mViewFlipper.setOutAnimation(mContext,R.anim.shrink_to_middle);    }    mViewFlipper.showNext();  }  mIsBackShowing=!mIsBackShowing;}  }
class C{  protected Set<NodePortTuple> identifyBroadcastDomainPorts(){  Set<NodePortTuple> broadcastDomainPorts=new HashSet<NodePortTuple>();  broadcastDomainPorts.addAll(this.portBroadcastDomainLinks.keySet());  Set<NodePortTuple> additionalNpt=new HashSet<NodePortTuple>();  Map<NodePortTuple,Set<Link>> spLinks=new HashMap<NodePortTuple,Set<Link>>();  for (  NodePortTuple npt : switchPortLinks.keySet()) {    spLinks.put(npt,new HashSet<Link>(switchPortLinks.get(npt)));  }  for (  NodePortTuple npt : spLinks.keySet()) {    Set<Link> links=spLinks.get(npt);    boolean bdPort=false;    ArrayList<Link> linkArray=new ArrayList<Link>();    if (links.size() > 2) {      bdPort=true;    } else     if (links.size() == 2) {      for (      Link l : links) {        linkArray.add(l);      }      Link l1=linkArray.get(0);      Link l2=linkArray.get(1);      if (!l1.getSrc().equals(l2.getDst()) || !l1.getSrcPort().equals(l2.getDstPort()) || !l1.getDst().equals(l2.getSrc())|| !l1.getDstPort().equals(l2.getSrcPort())) {        bdPort=true;      }    }    if (bdPort && (broadcastDomainPorts.contains(npt) == false)) {      additionalNpt.add(npt);    }  }  if (additionalNpt.size() > 0) {    log.warn("The following switch ports have multiple " + "links incident on them, so these ports will be treated " + " as braodcast domain ports. {}",additionalNpt);    broadcastDomainPorts.addAll(additionalNpt);  }  return broadcastDomainPorts;}  }
class C{  public boolean hasMaxAge(){  return max_age != null;}  }
class C{  void initialize(HTTPRequest request,String tld){  setAuthorizationHeader(request,getMarksDbLordnCredentials(tld));}  }
class C{  private static String addIndentationCompensation(final String message,final Level level){  final StringBuilder builder=new StringBuilder();  final int compensateLength=(level.toString().length() - 4) * 2;  if (compensateLength == 0) {    return message;  }  for (int i=0; i < compensateLength; i++) {    builder.append(" ");  }  builder.append(message);  return builder.toString();}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypesPackage.TENUM_LITERAL___GET_CONTAINING_MODULE:    return getContainingModule();}return super.eInvoke(operationID,arguments);}  }
class C{  public boolean equals(Object object){  return (object != null && object instanceof URISyntax && this.uri.equals(((URISyntax)object).uri));}  }
class C{  @Override public double binWidth(double value){  throw new UnsupportedOperationException("It is no obvious what to return here. Probably you want to use a linear discretizer with bin width 1.0");}  }
class C{  private void analyse(StructuralNode node) throws Exception {  if (node.getHistoryReference() == null) {    return;  }  if (!parent.nodeInScope(node.getName())) {    return;  }  HttpMessage baseMsg=node.getHistoryReference().getHttpMessage();  URI baseUri=(URI)baseMsg.getRequestHeader().getURI().clone();  baseUri.setQuery(null);  if (mapVisited.get(baseUri.toString()) != null) {    return;  }  String path=getRandomPathSuffix(node,baseUri);  HttpMessage msg=baseMsg.cloneRequest();  URI uri=(URI)baseUri.clone();  uri.setPath(path);  msg.getRequestHeader().setURI(uri);  sendAndReceive(msg);  if (msg.getResponseHeader().getStatusCode() == HttpStatusCode.NOT_FOUND) {    addAnalysedHost(baseUri,msg,SampleResponse.ERROR_PAGE_RFC);    return;  }  if (HttpStatusCode.isRedirection(msg.getResponseHeader().getStatusCode())) {    addAnalysedHost(baseUri,msg,SampleResponse.ERROR_PAGE_REDIRECT);    return;  }  if (msg.getResponseHeader().getStatusCode() != HttpStatusCode.OK) {    addAnalysedHost(baseUri,msg,SampleResponse.ERROR_PAGE_NON_RFC);    return;  }  HttpMessage msg2=baseMsg.cloneRequest();  URI uri2=msg2.getRequestHeader().getURI();  String path2=getRandomPathSuffix(node,uri2);  uri2=(URI)baseUri.clone();  uri2.setPath(path2);  msg2.getRequestHeader().setURI(uri2);  sendAndReceive(msg2);  String resBody1=msg.getResponseBody().toString().replaceAll(p_REMOVE_HEADER,"");  String resBody2=msg2.getResponseBody().toString().replaceAll(p_REMOVE_HEADER,"");  if (resBody1.equals(resBody2)) {    msg.getResponseBody().setBody(resBody1);    addAnalysedHost(baseUri,msg,SampleResponse.ERROR_PAGE_STATIC);    return;  }  resBody1=resBody1.replaceAll(getPathRegex(uri),"").replaceAll("\\s[012]\\d:[0-5]\\d:[0-5]\\d\\s","");  resBody2=resBody2.replaceAll(getPathRegex(uri2),"").replaceAll("\\s[012]\\d:[0-5]\\d:[0-5]\\d\\s","");  if (resBody1.equals(resBody2)) {    msg.getResponseBody().setBody(resBody1);    addAnalysedHost(baseUri,msg,SampleResponse.ERROR_PAGE_DYNAMIC_BUT_DETERMINISTIC);    return;  }  addAnalysedHost(baseUri,msg,SampleResponse.ERROR_PAGE_UNDETERMINISTIC);}  }
class C{  public void paintArrowButtonForeground(SynthContext context,Graphics g,int x,int y,int w,int h,int direction){}  }
class C{  boolean answeredBy(DNSEntry rec){  return this.isSameRecordClass(rec) && this.isSameType(rec) && this.getName().equals(rec.getName());}  }
class C{  public void notify(Measurement m){  if (filterNumber != null && m.getReading() != null && !filterNumber.equals(m.getReading().getID())) {    return;  }  lastMeasurement=m;  if (!m.isOkPoint() || m.getZ() < -20 || m.getZ() > 20) {    state=false;  } else {    state=true;  }  if (_text) {    super.setText("" + m.getReading().getID());  }  displayState();  if (!state) {    return;  }  double xn=m.getX();  double yn=m.getY();  int x=sxOrigin + (int)(sxScale * xn);  int y=syOrigin + (int)(syScale * yn);  setLocation(x,y);}  }
class C{  public void clearRow(int nodeIndex,int rowIndex){  for (int colIndex=0; colIndex < getNumColumns(nodeIndex); colIndex++) {    setProbability(nodeIndex,rowIndex,colIndex,Double.NaN);  }}  }
class C{  public boolean hasNormalOff(){  return normalOffImage != null;}  }
class C{  private void resetPortfolioComboBox(final DAODecodeComboBoxEditor editorComboBox) throws ValueTypeException {  Vector<Decode> codesNew=((new DAOPortfolio()).getCodesDecodes());  DefaultComboBoxModel<Decode> model=new DefaultComboBoxModel<Decode>(codesNew);  editorComboBox.setModel(model);  editorComboBox.setItem(DAOPortfolio.newInstance());  editorComboBox.setRenderer(new DecodeComboBoxRenderer());}  }
class C{  private static boolean copy(FloatBuffer buffer,Pointer pointer,int elements,float expected[]){  log("Buffer     : " + buffer);  log("position   : " + buffer.position());  log("limit      : " + buffer.limit());  if (buffer.hasArray()) {    log("arrayOffset: " + buffer.arrayOffset() + " ");    log("array      : " + Arrays.toString(buffer.array()));  }  String contents="contents   : ";  for (int i=buffer.position(); i < buffer.limit(); i++) {    contents+=buffer.get(i);    if (i < buffer.limit() - 1) {      contents+=", ";    }  }  log(contents + "\n");  float result[]=new float[elements];  cudaMemcpy(Pointer.to(result),pointer,elements * Sizeof.FLOAT,cudaMemcpyHostToHost);  boolean passed=Arrays.equals(result,expected);  log("result     : " + Arrays.toString(result));  log("passed?    : " + passed);  return passed;}  }
class C{  public String checkException(Exception ex){  if (ex instanceof JPlagException) {    JPlagException jex=(JPlagException)ex;    return "JPlagException: " + jex.getExceptionType() + ": "+ jex.getDescription()+ "<br />"+ jex.getRepair();  } else   if (ex instanceof RemoteException) {    ex.printStackTrace();    return "RemoteException: " + ex.toString();  } else {    ex.printStackTrace();    return "Unknown exception: " + ex.toString();  }}  }
class C{  private Set<String> loadFile(String fileName) throws IOException {  Set<String> container=new HashSet<String>();  FileInputStream fstream=null;  DataInputStream in=null;  BufferedReader br=null;  try {    fstream=new FileInputStream(fileName);    in=new DataInputStream(fstream);    br=new BufferedReader(new InputStreamReader(in));    String strLine;    while ((strLine=br.readLine()) != null) {      container.add(strLine);    }  }  finally {    if (br != null) {      br.close();    }    if (in != null) {      in.close();    }    if (fstream != null) {      fstream.close();    }  }  return container;}  }
class C{  public static boolean verify(PublicKey publicKey,String signedData,String signature){  Signature sig;  try {    sig=Signature.getInstance(SIGNATURE_ALGORITHM);    sig.initVerify(publicKey);    sig.update(signedData.getBytes());    if (!sig.verify(Base64.decode(signature))) {      Log.e(TAG,"Signature verification failed.");      return false;    }    return true;  } catch (  NoSuchAlgorithmException e) {    Log.e(TAG,"NoSuchAlgorithmException.");  }catch (  InvalidKeyException e) {    Log.e(TAG,"Invalid key specification.");  }catch (  SignatureException e) {    Log.e(TAG,"Signature exception.");  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");  }  return false;}  }
class C{  public VisionWorldComponent(final String name,VisionWorldModel model){  super(name);  visionWorld=new VisionWorld(model);  initAttributes();}  }
class C{  @SuppressWarnings("deprecation") private static void clearCookies(){  CookieManager cookieManager=CookieManager.getInstance();  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    cookieManager.removeAllCookies(null);  } else {    cookieManager.removeAllCookie();  }}  }
class C{  public MqttException(Throwable cause){  super();  this.reasonCode=REASON_CODE_CLIENT_EXCEPTION;  this.cause=cause;}  }
class C{  @SuppressWarnings("TooBroadScope") public void testLogMisc() throws Exception {  IgfsLogger log=IgfsLogger.logger(ENDPOINT,IGFS_NAME,LOG_DIR,10);  String newFile="/dir3/file.test";  String file1="/dir3/file1.test";  String file2="/dir3/file1.test";  log.logMakeDirectory(PATH,PRIMARY);  log.logRename(PATH,PRIMARY,new IgfsPath(newFile));  log.logListDirectory(PATH,PRIMARY,new String[]{file1,file2});  log.logDelete(PATH,PRIMARY,false);  log.close();  checkLog(new SB().a(U.jvmPid() + d() + TYPE_DIR_MAKE+ d()+ PATH_STR_ESCAPED+ d()+ PRIMARY+ d(17)).toString(),new SB().a(U.jvmPid() + d() + TYPE_RENAME+ d()+ PATH_STR_ESCAPED+ d()+ PRIMARY+ d(15)+ newFile+ d(2)).toString(),new SB().a(U.jvmPid() + d() + TYPE_DIR_LIST+ d()+ PATH_STR_ESCAPED+ d()+ PRIMARY+ d(17)+ file1+ DELIM_FIELD_VAL+ file2).toString(),new SB().a(U.jvmPid() + d() + TYPE_DELETE+ d(1)+ PATH_STR_ESCAPED+ d()+ PRIMARY+ d(16)+ 0+ d()).toString());}  }
class C{  @Override public int hashCode(){  return 346;}  }
class C{  private boolean compareNumber(Number valueObj,String value1,String value2){  BigDecimal valueObjB=null;  BigDecimal value1B=null;  BigDecimal value2B=null;  try {    if (valueObj instanceof BigDecimal)     valueObjB=(BigDecimal)valueObj; else     if (valueObj instanceof Integer)     valueObjB=new BigDecimal(((Integer)valueObj).intValue()); else     valueObjB=new BigDecimal(String.valueOf(valueObj));  } catch (  Exception e) {    log.fine("compareNumber - valueObj=" + valueObj + " - "+ e.toString());    return compareString(valueObj,value1,value2);  }  try {    value1B=new BigDecimal(value1);  } catch (  Exception e) {    log.fine("compareNumber - value1=" + value1 + " - "+ e.toString());    return compareString(valueObj,value1,value2);  }  String op=getOperation();  if (OPERATION_Eq.equals(op))   return valueObjB.compareTo(value1B) == 0; else   if (OPERATION_Gt.equals(op))   return valueObjB.compareTo(value1B) > 0; else   if (OPERATION_GtEq.equals(op))   return valueObjB.compareTo(value1B) >= 0; else   if (OPERATION_Le.equals(op))   return valueObjB.compareTo(value1B) < 0; else   if (OPERATION_LeEq.equals(op))   return valueObjB.compareTo(value1B) <= 0; else   if (OPERATION_Like.equals(op))   return valueObjB.compareTo(value1B) == 0; else   if (OPERATION_NotEq.equals(op))   return valueObjB.compareTo(value1B) != 0; else   if (OPERATION_Sql.equals(op))   throw new IllegalArgumentException("SQL not Implemented"); else   if (OPERATION_X.equals(op)) {    if (valueObjB.compareTo(value1B) < 0)     return false;    try {      value2B=new BigDecimal(String.valueOf(value2));      return valueObjB.compareTo(value2B) <= 0;    } catch (    Exception e) {      log.fine("compareNumber - value2=" + value2 + " - "+ e.toString());      return false;    }  }  throw new IllegalArgumentException("Unknown Operation=" + op);}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMFESpotLightElement(prefix,(AbstractDocument)doc);}  }
class C{  public static IStatus validateImportDeclaration(String name,String sourceLevel,String complianceLevel){  if (name == null || name.length() == 0) {    return new Status(IStatus.ERROR,org.eclipse.jdt.core.JavaCore.PLUGIN_ID,-1,Messages.convention_import_nullImport,null);  }  if (name.charAt(name.length() - 1) == '*') {    if (name.charAt(name.length() - 2) == '.') {      return validatePackageName(name.substring(0,name.length() - 2),sourceLevel,complianceLevel);    } else {      return new Status(IStatus.ERROR,org.eclipse.jdt.core.JavaCore.PLUGIN_ID,-1,Messages.convention_import_unqualifiedImport,null);    }  }  return validatePackageName(name,sourceLevel,complianceLevel);}  }
class C{  public Continuous3D(double discretization,double width,double height,double length){  this.discretization=discretization;  this.width=width;  this.height=height;  this.length=length;}  }
class C{  OptionsPaneFactory(){}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.main);  mHandler=new Handler();  mDungeonsPurchaseObserver=new DungeonsPurchaseObserver(mHandler);  mBillingService=new BillingService();  mBillingService.setContext(this);  mPurchaseDatabase=new PurchaseDatabase(this);  setupWidgets();  ResponseHandler.register(mDungeonsPurchaseObserver);  if (!mBillingService.checkBillingSupported()) {    showDialog(DIALOG_CANNOT_CONNECT_ID);  }  if (!mBillingService.checkBillingSupported(Consts.ITEM_TYPE_SUBSCRIPTION)) {    showDialog(DIALOG_SUBSCRIPTIONS_NOT_SUPPORTED_ID);  }}  }
class C{  public void release(){  value=null;}  }
class C{  protected SelectedTag defaultPattern(){  return new SelectedTag(RANDOM,TAGS_PATTERN);}  }
class C{  @Nullable private static byte[] fromHex(String hex) throws DecoderException {  return hex == null ? null : Hex.decodeHex(hex.toCharArray());}  }
class C{  @Override public void start(){  if (!isRunning) {    discoveryController.start(fireTVListener);    isRunning=true;  }}  }
class C{  public MetaData modifyMetaData(ExampleSetMetaData unmodifiedMetaData){  return unmodifiedMetaData;}  }
class C{  public String toStringNoCache(){  StringBuffer sb=new StringBuffer("identity(").append(getDSMembership()).append(",connection=").append(uniqueId);  if (identity != null) {    DurableClientAttributes dca=getDurableAttributes();    if (dca.getId().length() > 0) {      sb.append(",durableAttributes=").append(getDurableAttributes()).append(')').toString();    }  }  return sb.toString();}  }
class C{  public static String reflectionToString(Object object,ToStringStyle style,boolean outputTransients,Class reflectUpToClass){  return ReflectionToStringBuilder.toString(object,style,outputTransients,false,reflectUpToClass);}  }
class C{  static void tick(){  if (Timings.isTimingsEnabled()) {    boolean violated=FULL_SERVER_TICK.isViolated();    for (    TimingHandler handler : HANDLERS) {      if (handler.isSpecial()) {        continue;      }      handler.processTick(violated);    }    TimingHistory.playerTicks+=SpongeImpl.getGame().getServer().getOnlinePlayers().size();    TimingHistory.timedTicks++;  }}  }
class C{  public void normal(){  mHintView.setVisibility(View.VISIBLE);  mProgressBar.setVisibility(View.GONE);}  }
class C{  public static String[] appendSelectionArgs(String[] originalValues,String[] newValues){  if (originalValues == null || originalValues.length == 0) {    return newValues;  }  String[] result=new String[originalValues.length + newValues.length];  System.arraycopy(originalValues,0,result,0,originalValues.length);  System.arraycopy(newValues,0,result,originalValues.length,newValues.length);  return result;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(1);  newVector.addAll(Collections.list(super.listOptions()));  newVector.addElement(new Option("\tName of a directory to search for cost files when loading\n" + "\tcosts on demand (default current directory).","D",1,"-D <directory>"));  return newVector.elements();}  }
class C{  public String contentType(){  return contentType;}  }
class C{  @Override public Rectangle2D drawShape(final IShape shape,final ShapeDrawingAttributes attributes){  if (shape == null) {    return null;  }  if (sceneBuffer.getSceneToUpdate() == null) {    return null;  }  if (highlight) {    attributes.color=GamaColor.getInt(data.getHighlightColor().getRGB());  }  sceneBuffer.getSceneToUpdate().addGeometry(shape.getInnerGeometry(),attributes);  return rect;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.CLASS_CONTENT___COMMENT_1:    return getComment_1();case UmplePackage.CLASS_CONTENT___CLASS_DEFINITION_1:  return getClassDefinition_1();case UmplePackage.CLASS_CONTENT___TRACE_1:return getTrace_1();case UmplePackage.CLASS_CONTENT___POSITION_1:return getPosition_1();case UmplePackage.CLASS_CONTENT___DISPLAY_COLOR_1:return getDisplayColor_1();case UmplePackage.CLASS_CONTENT___ABSTRACT_1:return getAbstract_1();case UmplePackage.CLASS_CONTENT___INVARIANT_1:return getInvariant_1();case UmplePackage.CLASS_CONTENT___SOFTWARE_PATTERN_1:return getSoftwarePattern_1();case UmplePackage.CLASS_CONTENT___DEPEND_1:return getDepend_1();case UmplePackage.CLASS_CONTENT___SYMMETRIC_REFLEXIVE_ASSOCIATION_1:return getSymmetricReflexiveAssociation_1();case UmplePackage.CLASS_CONTENT___ATTRIBUTE_1:return getAttribute_1();case UmplePackage.CLASS_CONTENT___STATE_MACHINE_1:return getStateMachine_1();case UmplePackage.CLASS_CONTENT___INLINE_ASSOCIATION_1:return getInlineAssociation_1();case UmplePackage.CLASS_CONTENT___CONCRETE_METHOD_DECLARATION_1:return getConcreteMethodDeclaration_1();case UmplePackage.CLASS_CONTENT___CONSTANT_DECLARATION_1:return getConstantDeclaration_1();case UmplePackage.CLASS_CONTENT___EXTRA_CODE_1:return getExtraCode_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.TEMPLATE_SEGMENT__RAW_VALUE:    setRawValue(RAW_VALUE_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  protected void update(int progress){  double dProgress=(double)progress;  int len=endVals.getItemCount();  for (int i=0; i < len; i++) {    double x=endVals.getX(i);    double y=endVals.getY(i);    double val=endVals.getValue(i);    int startIndex=startVals.getIndexForKey(x);    int endindex=i;    double startY=startIndex == -1 ? 0.0 : startVals.getY(startIndex);    double endY=y;    double tweenY=startY + (endY - startY) * dProgress / 100.0;    double startVal=startIndex == -1 ? 0.0 : startVals.getValue(startIndex);    double endVal=val;    double tweenVal=startVal + (endVal - startVal) * dProgress / 100.0;    int seriesIndex=series.getIndexForKey(x);    if (seriesIndex > -1) {      series.remove(seriesIndex);    }    series.add(x,tweenY,tweenVal);  }}  }
class C{  public boolean equals(Object other){  if (_set.equals(other)) {    return true;  } else   if (other instanceof Set) {    Set that=(Set)other;    if (that.size() != _set.size()) {      return false;    } else {      Iterator it=that.iterator();      for (int i=that.size(); i-- > 0; ) {        Object val=it.next();        if (val instanceof Float) {          float v=unwrap(val);          if (_set.contains(v)) {          } else {            return false;          }        } else {          return false;        }      }      return true;    }  } else {    return false;  }}  }
class C{  protected Object cloneValue(){  Object value=getValue();  if (value instanceof Node) {    value=((Node)value).cloneNode(true);  }  return value;}  }
class C{  private void measureChild(View child,LayoutParams params,int myWidth,int myHeight){  int childWidthMeasureSpec=getChildMeasureSpec(params.mLeft,params.mRight,params.width,params.leftMargin,params.rightMargin,mPaddingLeft,mPaddingRight,myWidth);  int childHeightMeasureSpec=getChildMeasureSpec(params.mTop,params.mBottom,params.height,params.topMargin,params.bottomMargin,mPaddingTop,mPaddingBottom,myHeight);  child.measure(childWidthMeasureSpec,childHeightMeasureSpec);}  }
class C{  @Override protected boolean shouldComposeCreationImage(){  return true;}  }
class C{  private void stopAuthenticatedSession(HttpServletRequest request,HttpServletResponse response,String sessionToken) throws IOException, ServletException {  if (sessionToken != null) {    revokeSessionToken(sessionToken);    clearSessionTokenCookie(request,response);  }  String url=request.getContextPath();  response.sendRedirect(response.encodeRedirectURL(url));}  }
class C{  protected void countSortFromTo(int from,int to,byte min,byte max){  if (size == 0)   return;  checkRangeFromTo(from,to,size);  final int width=(int)(max - min + 1);  int[] counts=new int[width];  byte[] theElements=elements;  for (int i=from; i <= to; )   counts[(int)(theElements[i++] - min)]++;  int fromIndex=from;  byte val=min;  for (int i=0; i < width; i++, val++) {    int c=counts[i];    if (c > 0) {      if (c == 1)       theElements[fromIndex++]=val; else {        int toIndex=fromIndex + c - 1;        fillFromToWith(fromIndex,toIndex,val);        fromIndex=toIndex + 1;      }    }  }}  }
class C{  public void actionPerformed(ActionEvent e){  super.actionPerformed(e);  if (e.getActionCommand() == RedrawCmd) {    doPrepare();  }}  }
class C{  public void listen(StanzaListener stanzaListener,StanzaFilter stanzaFilter){  connection.addAsyncStanzaListener(stanzaListener,stanzaFilter);  logger.info("Listening for incoming XMPP Stanzas...");}  }
class C{  protected V create(K key){  return null;}  }
class C{  public boolean doVerify(final Project project,final DataContext dataContext,final ProgressHandler progressHandler){  ProgressHandler progressHandlerSubTask=progressHandler == null ? new EmptyProgresssHandler() : progressHandler.startSubTasks(1,"progress.verify.project",project.getName());  progressHandlerSubTask.next("progress.verify.check.environment");  MessageManager messageManager=getMessageManager(project);  boolean ret=true;  int exitNow=Messages.OK;  SlingServerTreeSelectionHandler selectionHandler=getSelectionHandler(project);  ServerConnectionManager serverConnectionManager=ComponentProvider.getComponent(project,ServerConnectionManager.class);  ServerConfigurationManager serverConfigurationManager=getConfigurationManager(project);  if (selectionHandler != null && serverConnectionManager != null && messageManager != null) {    ServerConfiguration source=selectionHandler.getCurrentConfiguration();    if (source != null) {      try {        progressHandlerSubTask.next("progress.verify.rebind.module");        messageManager.sendInfoNotification("server.configuration.start.verification",source.getName());        List<ServerConfiguration.Module> unboundModules=null;        try {          unboundModules=serverConnectionManager.findUnboundModules(source);        } catch (        IllegalArgumentException e) {          messageManager.showAlertWithOptions(NotificationType.ERROR,"server.configuration.verification.failed.due.to.bind.exception",source.getName(),e.getMessage());          return false;        } finally {          serverConfigurationManager.updateCurrentServerConfiguration();        }        if (unboundModules != null && !unboundModules.isEmpty()) {          progressHandlerSubTask.next("progress.verify.update.server.configuration");          ret=false;          ProgressHandler progressHandlerSubTaskLoop=progressHandlerSubTask.startSubTasks(unboundModules.size(),"Check Server Configuration Modules");          for (          ServerConfiguration.Module module : unboundModules) {            progressHandlerSubTaskLoop.next("progress.veriy.update.server.configuration",module.getName());            exitNow=messageManager.showAlertWithOptions(NotificationType.WARNING,"server.configuration.unresolved.module",module.getName());            if (exitNow == 1) {              source.removeModule(module);              if (serverConfigurationManager != null) {                serverConfigurationManager.updateServerConfiguration(source);              }            } else             if (exitNow == Messages.CANCEL) {              return false;            }          }        }        Repository repository=ServerConnectionManager.obtainRepository(source,messageManager);        if (repository != null) {          progressHandlerSubTask.next("progress.verify.check.modules");          ProgressHandler progressHandlerSubTaskLoop=progressHandlerSubTask.startSubTasks(2 * source.getModuleList().size(),"progress.verify.check.modules");          for (          ServerConfiguration.Module module : source.getModuleList()) {            progressHandlerSubTaskLoop.next("progress.verify.check.module",module.getName());            if (module.isSlingPackage()) {              Filter filter=null;              try {                filter=module.getSlingProject().loadFilter();                if (filter == null) {                  boolean isGeneratedFilter=false;                  SlingModuleFacet slingModuleFacet=SlingModuleFacet.getFacetByModule(module.getUnifiedModule().getModule());                  if (slingModuleFacet != null) {                    SlingModuleFacetConfiguration slingModuleFacetConfiguration=slingModuleFacet.getConfiguration();                    if (slingModuleFacetConfiguration.isGeneratedFilter()) {                      isGeneratedFilter=true;                    }                  }                  if (!isGeneratedFilter) {                    ret=false;                    exitNow=messageManager.showAlertWithOptions(NotificationType.ERROR,"server.configuration.filter.file.not.found",module.getName());                    module.setStatus(ServerConfiguration.SynchronizationStatus.compromised);                    if (exitNow == Messages.CANCEL) {                      return false;                    }                  } else {                  }                }              } catch (              ConnectorException e) {                ret=false;                exitNow=messageManager.showAlertWithOptions(NotificationType.ERROR,"server.configuration.filter.file.failure",module.getName(),e.getMessage());                module.setStatus(ServerConfiguration.SynchronizationStatus.compromised);                if (exitNow == Messages.CANCEL) {                  return false;                }              }              List<String> resourceList=serverConnectionManager.findContentResources(module);              if (resourceList.isEmpty()) {                ret=false;                exitNow=messageManager.showAlertWithOptions(NotificationType.ERROR,"server.configuration.content.folder.not.found",module.getName());                module.setStatus(ServerConfiguration.SynchronizationStatus.compromised);                if (exitNow == Messages.CANCEL) {                  return false;                }              }              Object temp=dataContext.getData(VERIFY_CONTENT_WITH_WARNINGS);              boolean verifyWithWarnings=!(temp instanceof Boolean) || ((Boolean)temp);              if (verifyWithWarnings && filter != null) {                progressHandlerSubTaskLoop.next("progress.verify.check.resource.files");                ProgressHandler progressHandlerSubTaskLoop2=progressHandlerSubTaskLoop.startSubTasks(resourceList.size(),"Check Resources");                for (                String contentPath : resourceList) {                  progressHandlerSubTaskLoop2.next("progress.verify.check.resource.files",contentPath);                  VirtualFile rootFile=project.getProjectFile().getFileSystem().findFileByPath(contentPath);                  if (rootFile != null) {                    Result childResult=checkFolderContent(repository,messageManager,serverConnectionManager,module,null,rootFile,filter);                    if (childResult.isCancelled) {                      return false;                    } else                     if (!childResult.isOk) {                      ret=false;                    }                  }                }              }            }          }        } else {          ret=false;        }      } catch (      RuntimeException e) {        messageManager.sendUnexpectedException(e);      } finally {        messageManager.sendInfoNotification("server.configuration.end.verification",source.getName());      }    }  }  return ret;}  }
class C{  public BType addBuilder(MType message){  ensureMutableMessageList();  ensureBuilders();  SingleFieldBuilder<MType,BType,IType> builder=new SingleFieldBuilder<MType,BType,IType>(message,this,isClean);  messages.add(null);  builders.add(builder);  onChanged();  incrementModCounts();  return builder.getBuilder();}  }
class C{  @Override public String toNodeString(){  return getTypeString() + " " + _toNode;}  }
class C{  public synchronized OMGraphicList prepare(){  OMGraphicList ret=new OMGraphicList(movingPoints);  ret.generate(getProjection());  return ret;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public void classLoaderDestroy(DynamicClassLoader loader){  removeLoader(loader);  _localHandlers.remove(loader);  HandlerEntry ownHandlers=_ownHandlers.getLevel(loader);  if (ownHandlers != null)   _ownHandlers.remove(loader);  if (ownHandlers != null)   ownHandlers.destroy();  if (_localLevel != null)   _localLevel.remove(loader);  updateEffectiveLevel(_systemClassLoader);}  }
class C{  public void rollback(final Savepoint savepoint) throws SQLException {  Statement st=createStatement();  st.execute("ROLLBACK TO SAVEPOINT " + savepoint.toString());  st.close();}  }
class C{  @Autowired public WsRemoteShopServiceImpl(final DtoShopService dtoShopService,@Qualifier("uiFederationFacade") final FederationFacade federationFacade){  super(dtoShopService);  this.federationFacade=federationFacade;}  }
class C{  public MariaSelectResultSet(ColumnInformation[] columnInformation,Statement statement,Protocol protocol,ReadPacketFetcher fetcher,boolean isBinaryEncoded,int resultSetScrollType,int fetchSize,boolean isCanHaveCallableResultset){  this.statement=statement;  this.isClosed=false;  this.protocol=protocol;  if (protocol != null) {    this.options=protocol.getOptions();    this.cal=protocol.getCalendar();    this.dataTypeMappingFlags=protocol.getDataTypeMappingFlags();    this.returnTableAlias=this.options.useOldAliasMetadataBehavior;  } else {    this.options=null;    this.cal=null;    this.dataTypeMappingFlags=3;    this.returnTableAlias=false;  }  this.columnsInformation=columnInformation;  this.columnNameMap=new ColumnNameMap(columnsInformation);  this.statement=statement;  this.columnInformationLength=columnInformation.length;  this.packetFetcher=fetcher;  this.inputStream=packetFetcher.getInputStream();  this.isEof=false;  this.isBinaryEncoded=isBinaryEncoded;  this.fetchSize=fetchSize;  this.resultSetScrollType=resultSetScrollType;  this.resultSet=new ArrayList<>();  this.resultSetSize=0;  this.dataFetchTime=0;  this.rowPointer=-1;  this.callableResult=isCanHaveCallableResultset;}  }
class C{  public SVGOMDocument(DocumentType dt,DOMImplementation impl){  super(dt,impl);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:01.579 -0500",hash_original_method="CCA8F1BE638FE2EC5E8781CBB11ADD24",hash_generated_method="62D8BFB57A16275661B174BCC84E5871") private View findFocusableViewInMyBounds(final boolean topFocus,final int top,View preferredFocusable){  final int fadingEdgeLength=getVerticalFadingEdgeLength() / 2;  final int topWithoutFadingEdge=top + fadingEdgeLength;  final int bottomWithoutFadingEdge=top + getHeight() - fadingEdgeLength;  if ((preferredFocusable != null) && (preferredFocusable.getTop() < bottomWithoutFadingEdge) && (preferredFocusable.getBottom() > topWithoutFadingEdge)) {    return preferredFocusable;  }  return findFocusableViewInBounds(topFocus,topWithoutFadingEdge,bottomWithoutFadingEdge);}  }
class C{  void startAnimation(){  if (getVisibility() != VISIBLE) {    return;  }  if (mIndeterminateDrawable instanceof Animatable) {    mShouldStartAnimationDrawable=true;    mAnimation=null;  } else {    if (mInterpolator == null) {      mInterpolator=new LinearInterpolator();    }    mTransformation=new Transformation();    mAnimation=new AlphaAnimation(0.0f,1.0f);    mAnimation.setRepeatMode(mBehavior);    mAnimation.setRepeatCount(Animation.INFINITE);    mAnimation.setDuration(mDuration);    mAnimation.setInterpolator(mInterpolator);    mAnimation.setStartTime(Animation.START_ON_FIRST_FRAME);  }  postInvalidate();}  }
class C{  public void jumpLabel(String label) throws IOException {  printer.println(indent + label + ":");}  }
class C{  public static long idForHash(String hash){  String[] proj={_ID};  String sel=EMAIL_HASH + " = ?";  String[] args={hash};  return Cursors.firstLong(cr().query(CONTENT_URI,proj,sel,args,null));}  }
class C{  public void refreshContent(ProjectPK projectPk){  RedisCacheManager.getInstance().refresh(projectPk.toUUID() + "/domains");}  }
class C{  public static boolean isPrintableString(String str){  for (int i=str.length() - 1; i >= 0; i--) {    char ch=str.charAt(i);    if (ch > 0x007f) {      return false;    }    if ('a' <= ch && ch <= 'z') {      continue;    }    if ('A' <= ch && ch <= 'Z') {      continue;    }    if ('0' <= ch && ch <= '9') {      continue;    }switch (ch) {case ' ':case '\'':case '(':case ')':case '+':case '-':case '.':case ':':case '=':case '?':case '/':case ',':      continue;  }  return false;}return true;}  }
class C{  public boolean isUnknown(){  return true;}  }
class C{  public void mouseWheelMoved(MouseWheelEvent event){}  }
class C{  public static boolean streamToFile(final InputStream inputStream,final File targetFile,final boolean doAppend){  if (inputStream == null || !isWritable(targetFile,true)) {    Log.e(FileUtils.class,"streamToFile(): Null parameter or can't make path dirs");    return false;  }  boolean isSucceed=false;  final int buffer_size=1024;  OutputStream outputStream=null;  try {    outputStream=new FileOutputStream(targetFile,doAppend);    byte[] bytes=new byte[buffer_size];    int count=0;    while ((count=inputStream.read(bytes,0,buffer_size)) > 0)     outputStream.write(bytes,0,count);    isSucceed=true;    outputStream.flush();  } catch (  FileNotFoundException e) {    e.printStackTrace();  }catch (  IndexOutOfBoundsException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  } finally {    if (outputStream != null)     try {      sync(outputStream);      outputStream.close();    } catch (    IOException e) {    }  }  return isSucceed;}  }
class C{  public static String showInternalInputDialog(Component parentComponent,Object message,String title,int messageType){  return (String)showInternalInputDialog(parentComponent,message,title,messageType,null,null,null);}  }
class C{  public TransactionStore(MVStore store){  this(store,new ObjectDataType());}  }
class C{  protected void layout(int width,int height){  super.layout(Integer.MAX_VALUE - 1,height);}  }
class C{  public void saveRegistry(Registry registry){  try {    Output output=new Output(new FileOutputStream(Registry.HOME_DATA_FILE));    RegistryDescriptor descriptor=DescriptorConverter.convert(registry);    kryo.writeObject(output,descriptor);    output.flush();    output.close();  } catch (  FileNotFoundException e) {    e.printStackTrace();  }}  }
class C{  public ExecutorService shutdown(){  pool.shutdown();  return pool;}  }
class C{  @SuppressWarnings("unchecked") private void notifyTextListeners(TextEvent te){  Vector<TextListener> l;synchronized (this) {    l=(Vector<TextListener>)m_textListeners.clone();  }  if (l.size() > 0) {    for (int i=0; i < l.size(); i++) {      l.elementAt(i).acceptText(te);    }  }}  }
class C{  @Override public void run(){  amIActive=true;  String destHeader=null;  WhiteboxRaster image=null;  WhiteboxRaster destination=null;  WhiteboxRasterInfo imageInfo=null;  int nCols=0;  int nRows=0;  double imageNoData=-32768;  double outputNoData=-32768;  int numImages;  double x, y, z;  int progress=0;  int col, row;  int a, i;  String inputFilesString=null;  String[] imageFiles;  String resampleMethod="nearest neighbour";  double north, south, east, west;  double gridResX, gridResY;  int currentFile=-1;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  destHeader=args[1];  resampleMethod=args[2].toLowerCase().trim();  if (!resampleMethod.equals("nearest neighbour") && !resampleMethod.equals("bilinear") && !resampleMethod.equals("cubic convolution")) {    showFeedback("Resample method not recognized");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  if (numImages < 1) {    showFeedback("At least one images must be specified.");    return;  }  try {    destination=new WhiteboxRaster(destHeader,"rw");    nCols=destination.getNumberColumns();    nRows=destination.getNumberRows();    int nColsLessOne=nCols - 1;    int nRowsLessOne=nRows - 1;    north=destination.getNorth();    south=destination.getSouth();    east=destination.getEast();    west=destination.getWest();    gridResX=destination.getCellSizeX();    gridResY=destination.getCellSizeY();    double northernEdge=north - gridResY;    double westernEdge=west + gridResX;    if (north < south) {      northernEdge=north + gridResY;    }    if (east < west) {      westernEdge=west - gridResX;    }    outputNoData=destination.getNoDataValue();    double yRange=north - south - gridResY;    double xRange=east - west - gridResX;    int sourceCol, sourceRow;    double[][] imageData=new double[numImages][11];    for (a=0; a < numImages; a++) {      imageInfo=new WhiteboxRasterInfo(imageFiles[a]);      imageData[a][0]=imageInfo.getNorth();      imageData[a][1]=imageInfo.getSouth();      imageData[a][2]=imageInfo.getEast();      imageData[a][3]=imageInfo.getWest();      imageData[a][4]=imageInfo.getNumberRows();      imageData[a][5]=imageInfo.getNumberColumns();      imageData[a][6]=imageInfo.getCellSizeX();      imageData[a][7]=imageInfo.getCellSizeY();      imageData[a][8]=imageInfo.getNoDataValue();      imageData[a][9]=imageInfo.getEast() - imageInfo.getWest();      imageData[a][10]=imageInfo.getNorth() - imageInfo.getSouth();    }    if (resampleMethod.equals("nearest neighbour")) {      for (row=0; row < nRows; row++) {        y=northernEdge - (yRange * row) / nRowsLessOne;        for (col=0; col < nCols; col++) {          x=westernEdge + (xRange * col) / nColsLessOne;          for (a=0; a < numImages; a++) {            if (isBetween(y,imageData[a][0],imageData[a][1]) && isBetween(x,imageData[a][2],imageData[a][3])) {              if (a != currentFile) {                if (currentFile >= 0) {                  image.close();                }                image=new WhiteboxRaster(imageFiles[a],"r");                currentFile=a;              }              sourceRow=(int)Math.round((imageData[a][0] - y) / imageData[a][10] * (imageData[a][4] - 0.5));              sourceCol=(int)Math.round((x - imageData[a][3]) / imageData[a][9] * (imageData[a][5] - 0.5));              z=image.getValue(sourceRow,sourceCol);              if (z != imageData[a][8]) {                destination.setValue(row,col,z);                break;              } else {                destination.setValue(row,col,outputNoData);              }            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRows - 1));        updateProgress(progress);      }      image.close();    } else {      if (destination.getDataType() != WhiteboxRaster.DataType.DOUBLE && destination.getDataType() != WhiteboxRaster.DataType.FLOAT) {        showFeedback("The destination image is not of an appropriate data" + " type (i.e. double or float) to perform this operation.");        return;      }      double dX, dY;      double srcRow, srcCol;      double originRow, originCol;      double rowN, colN;      double sumOfDist;      double[] shiftX;      double[] shiftY;      int numNeighbours=0;      double[][] neighbour;      if (resampleMethod.equals("cubic convolution")) {        shiftX=new double[]{-1,0,1,2,-1,0,1,2,-1,0,1,2,-1,0,1,2};        shiftY=new double[]{-1,-1,-1,-1,0,0,0,0,1,1,1,1,2,2,2,2};        numNeighbours=16;        neighbour=new double[16][2];      } else {        shiftX=new double[]{0,1,0,1};        shiftY=new double[]{0,0,1,1};        numNeighbours=4;        neighbour=new double[4][2];      }      for (row=0; row < nRows; row++) {        y=northernEdge - (yRange * row) / nRowsLessOne;        for (col=0; col < nCols; col++) {          x=westernEdge + (xRange * col) / nColsLessOne;          for (a=0; a < numImages; a++) {            if (isBetween(y,imageData[a][0],imageData[a][1]) && isBetween(x,imageData[a][2],imageData[a][3])) {              if (a != currentFile) {                if (currentFile >= 0) {                  image.close();                }                image=new WhiteboxRaster(imageFiles[a],"r");                currentFile=a;              }              imageNoData=imageData[a][8];              srcRow=(imageData[a][0] - y) / imageData[a][10] * (imageData[a][4] - 0.5);              srcCol=(x - imageData[a][3]) / imageData[a][9] * (imageData[a][5] - 0.5);              originRow=Math.floor(srcRow);              originCol=Math.floor(srcCol);              sumOfDist=0;              for (i=0; i < numNeighbours; i++) {                rowN=originRow + shiftY[i];                colN=originCol + shiftX[i];                neighbour[i][0]=image.getValue((int)rowN,(int)colN);                dY=rowN - srcRow;                dX=colN - srcCol;                if ((dX + dY) != 0 && neighbour[i][0] != imageNoData) {                  neighbour[i][1]=1 / (dX * dX + dY * dY);                  sumOfDist+=neighbour[i][1];                } else                 if (neighbour[i][0] == imageNoData) {                  neighbour[i][1]=0;                } else {                  destination.setValue(row,col,neighbour[i][0]);                  break;                }              }              if (sumOfDist > 0) {                z=0;                for (i=0; i < numNeighbours; i++) {                  z+=(neighbour[i][0] * neighbour[i][1]) / sumOfDist;                }                destination.setValue(row,col,z);                break;              } else {                destination.setValue(row,col,outputNoData);              }            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRows - 1));        updateProgress(progress);      }      image.close();    }    destination.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    destination.addMetadataEntry("Created on " + new Date());    destination.close();    returnData(destHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private Object executeEQ(PageContext pc,SQL sql,Query qr,Operation2 expression,int row) throws PageException {  return (executeCompare(pc,sql,qr,expression,row) == 0) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public void updateBoolean(String columnName,boolean x) throws SQLException {  updateBoolean(findColumn(columnName),x);}  }
class C{  @Override @SuppressWarnings("rawtypes") public Long deserializeKey(final ITuple tuple){  final byte[] key=tuple.getKeyBuffer().array();  final long id=KeyBuilder.decodeLong(key,0);  return id;}  }
class C{  public String globalInfo(){  return "Converts all nominal attributes into binary numeric attributes. An " + "attribute with k values is transformed into k binary attributes if " + "the class is nominal (using the one-attribute-per-value approach). "+ "Binary attributes are left binary, if option '-A' is not given."+ "If the class is numeric, you might want to use the supervised version of "+ "this filter.";}  }
class C{  public void onNativeLibraryReady(WindowAndroid windowAndroid,TabContentManager tabContentManager){  assert mLayerTitleCache == null : "Should be called once";  if (DeviceClassManager.enableLayerDecorationCache()) {    mLayerTitleCache=new LayerTitleCache(getContext());  }  mCompositorView.initNativeCompositor(SysUtils.isLowEndDevice(),windowAndroid,mLayerTitleCache,tabContentManager);  if (mLayerTitleCache != null) {    mLayerTitleCache.setResourceManager(getResourceManager());  }  if (mControlContainer != null) {    mCompositorView.getResourceManager().getDynamicResourceLoader().registerResource(R.id.control_container,mControlContainer.getToolbarResourceAdapter());  }}  }
class C{  protected boolean afterDelete(boolean success){  setHeader();  return success;}  }
class C{  public Builder(String userName){  this(userName,null);  if (Strings.isNullOrEmpty(userName)) {    throw new IllegalArgumentException("userName must not be null or empty.");  }}  }
class C{  private void exportTest(CasIdmClient idmClient,boolean exportPrivateData) throws Exception, FileNotFoundException, TransformerConfigurationException, TransformerFactoryConfigurationError, TransformerException, ParserConfigurationException, SAXException, IOException {  Document tenantDoc=idmClient.exportTenantConfiguration(_expTenantName,exportPrivateData);  persistDoc(tenantDoc,_exportedConfigFile);  loadFileAndvalidate(idmClient,_exportedConfigFile);}  }
class C{  public static void writeFile(ClassFile cf,String directoryName) throws CannotCompileException {  try {    writeFile0(cf,directoryName);  } catch (  IOException e) {    throw new CannotCompileException(e);  }}  }
class C{  public void show(Animation anim){  show(true,anim);}  }
class C{  public ITPS read(final Schema schema,final Object primaryKey,final long fromTime,final long toTime,final INameFilter filter){  assertArgs(schema,primaryKey,fromTime,toTime);  if (log.isInfoEnabled()) {    String ts="N/A";    if (getIndex() instanceof IClientIndex) {      ts=TimestampUtility.toString(((IClientIndex)getIndex()).getTimestamp());    } else     if (getIndex() instanceof AbstractBTree) {      ts=TimestampUtility.toString(((AbstractBTree)getIndex()).getLastCommitTime());    }    log.info("ts=" + ts + ", schema="+ schema.getName()+ ", primaryKey="+ primaryKey+ ", fromTime="+ fromTime+ ", toTime="+ toTime+ ", filter="+ (filter == null ? "N/A" : filter.getClass().getName()));  }  final AtomicRowRead proc=new AtomicRowRead(schema,primaryKey,fromTime,toTime,filter);  final byte[] key=schema.fromKey(ndx.getIndexMetadata().getKeyBuilder(),primaryKey).getKey();  return (TPS)ndx.submit(key,proc);}  }
class C{  public T caseAssertion(Assertion object){  return null;}  }
class C{  public void javacWarning(String message){  javacWarning(message,null);}  }
class C{  private View createNewLangView(){  JPlagCreator.showMessageDialog(Messages.getString("Preferences.New_language_setting"),Messages.getString("Preferences.New_language_setting_DESC"));  view.dispose();  view.destroy();  view=null;  System.gc();  atujplag.updateServerInfo(this);  View mainWindow=new View(atujplag);  mainWindow.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  mainWindow.pack();  mainWindow.setLocationRelativeTo(null);  mainWindow.setVisible(true);  return mainWindow;}  }
class C{  public CollectionTimeline build(){  if (collectionId == null) {    throw new IllegalStateException("collection id must not be null");  }  return new CollectionTimeline(tweetUi,collectionId,maxItemsPerRequest);}  }
class C{  protected static boolean isDiagnosticsEnabled(){  return LogFactory.isDiagnosticsEnabled();}  }
class C{  public int countTokens(){  if (this.tokenCount >= 0) {    return this.tokenCount;  }  int tokenCount=0;  int savedPosition=position;  boolean savedEmptyReturned=emptyReturned;  int workingPosition=position;  boolean workingEmptyReturned=emptyReturned;  boolean onToken=advancePosition();  while (position != workingPosition || emptyReturned != workingEmptyReturned) {    if (onToken) {      tokenCount++;    }    workingPosition=position;    workingEmptyReturned=emptyReturned;    onToken=advancePosition();  }  position=savedPosition;  emptyReturned=savedEmptyReturned;  this.tokenCount=tokenCount;  return tokenCount;}  }
class C{  private StringBuffer format(BigDecimal number,StringBuffer result,FieldPosition fieldPosition){  fieldPosition.setBeginIndex(0);  fieldPosition.setEndIndex(0);  return format(number,result,fieldPosition.getFieldDelegate());}  }
class C{  private boolean bothLinksAreShorterThanThreshold(Link linkA,Link linkB,double thresholdLength){  boolean hasTwoShortLinks=false;  if (linkA.getLength() < thresholdLength && linkB.getLength() < thresholdLength) {    hasTwoShortLinks=true;  }  return hasTwoShortLinks;}  }
class C{  private boolean saveAnswersForCurrentScreen(boolean evaluateConstraints){  FormController formController=Collect.getInstance().getFormController();  if (formController.currentPromptIsQuestion()) {    LinkedHashMap<FormIndex,IAnswerData> answers=((ODKView)mCurrentView).getAnswers();    try {      FailedConstraint constraint=formController.saveAllScreenAnswers(answers,evaluateConstraints);      if (constraint != null) {        createConstraintToast(constraint.index,constraint.status);        return false;      }    } catch (    JavaRosaException e) {      Log.e(t,e.getMessage(),e);      createErrorDialog(e.getCause().getMessage(),DO_NOT_EXIT);      return false;    }  }  return true;}  }
class C{  public static Pattern makePattern(final String expression){  Check.notNull(expression,"expression");  try {    return Pattern.compile(expression,EXPRESSION_FLAGS);  } catch (  final PatternSyntaxException e) {    return null;  }}  }
class C{  public Enumeration<Instruction> reverseInstrEnumerator(){  return IREnumeration.reverseGlobalIE(this);}  }
class C{  public Tower(){  super();}  }
class C{  protected void appendFieldEnd(StringBuffer buffer,String fieldName){  appendFieldSeparator(buffer);}  }
class C{  @Override public int read() throws java.io.IOException {  if (position < 0) {    if (encode) {      byte[] b3=new byte[3];      int numBinaryBytes=0;      for (int i=0; i < 3; i++) {        int b=in.read();        if (b >= 0) {          b3[i]=(byte)b;          numBinaryBytes++;        } else {          break;        }      }      if (numBinaryBytes > 0) {        encode3to4(b3,0,numBinaryBytes,buffer,0,options);        position=0;        numSigBytes=4;      } else {        return -1;      }    } else {      byte[] b4=new byte[4];      int i=0;      for (i=0; i < 4; i++) {        int b=0;        do {          b=in.read();        } while (b >= 0 && decodabet[b & 0x7f] <= WHITE_SPACE_ENC);        if (b < 0) {          break;        }        b4[i]=(byte)b;      }      if (i == 4) {        numSigBytes=decode4to3(b4,0,buffer,0,options);        position=0;      } else       if (i == 0) {        return -1;      } else {        throw new java.io.IOException("Improperly padded Base64 input.");      }    }  }  if (position >= 0) {    if (position >= numSigBytes) {      return -1;    }    if (encode && breakLines && lineLength >= MAX_LINE_LENGTH) {      lineLength=0;      return '\n';    } else {      lineLength++;      int b=buffer[position++];      if (position >= bufferLength) {        position=-1;      }      return b & 0xFF;    }  } else {    throw new java.io.IOException("Error in Base64 code reading stream.");  }}  }
class C{  public double newValue(int x,int y,double value){  if (field instanceof IntGrid2D)   value=(int)value;  tmpGCI.x=x;  tmpGCI.y=y;  QuadPortrayal quadPortrayal=(QuadPortrayal)getPortrayalForObject(tmpGCI);  if (quadPortrayal.getMap().validLevel(value))   return value;  if (field != null) {    if (field instanceof DoubleGrid2D)     return ((DoubleGrid2D)field).field[x][y]; else     if (field instanceof ObjectGrid2D)     return doubleValue(((ObjectGrid2D)field).field[x][y]); else     return ((IntGrid2D)field).field[x][y];  } else   return quadPortrayal.getMap().defaultValue();}  }
class C{  public DeprecationLogger(ESLogger parentLogger){  String name=parentLogger.getName();  if (name.startsWith("org.elasticsearch")) {    name=name.replace("org.elasticsearch.","org.elasticsearch.deprecation.");  } else {    name="deprecation." + name;  }  this.logger=ESLoggerFactory.getLogger(parentLogger.getPrefix(),name);}  }
class C{  private static IASTFragment createFragmentForSubPartBySourceRange(ASTNode node,ISourceRange range,ICompilationUnit cu) throws JavaModelException {  return FragmentForSubPartBySourceRangeFactory.createFragmentFor(node,range,cu);}  }
class C{  @SuppressWarnings("unchecked") public static <K,V>ImmutableSetMultimap<K,V> of(){  return (ImmutableSetMultimap<K,V>)EmptyImmutableSetMultimap.INSTANCE;}  }
class C{  public int length(){  return this.myArrayList.size();}  }
class C{  public Select.SelectForExample SELECT(){  return TestTable1.SELECT().selectForExample(this.example);}  }
class C{  public void endPrefixMapping(String prefix) throws org.xml.sax.SAXException {}  }
class C{  public Hex(final Charset charset){  this.charset=charset;}  }
class C{  public void registerAdded(){  count++;  lastDate=System.currentTimeMillis();}  }
class C{  public int multipleDoubleVectorCrossover(final int min,final int max,final int start,final int subpopulation,final Individual[] inds,final EvolutionState state,final int thread){  if (!(inds[0] instanceof DoubleVectorIndividual))   state.output.fatal("Trying to produce double vector individuals when you can't!");  if (sources.length <= 2)   state.output.error("Only two parents specified!");  int n=typicalIndsProduced();  if (n < min)   n=min;  if (n > max)   n=max;  for (int i=0; i < parents.length; i++) {    sources[i].produce(1,1,i,subpopulation,parents,state,thread);    if (!(sources[i] instanceof BreedingPipeline))     parents[i]=(DoubleVectorIndividual)(parents[i].clone());  }  VectorSpecies species=(VectorSpecies)inds[0].species;  for (int i=0; i < parents[0].genomeLength(); i++) {    if (state.random[thread].nextBoolean(species.crossoverProbability)) {      for (int j=parents.length - 1; j > 0; j--) {        int swapIndex=state.random[thread].nextInt(j);        double temp=((DoubleVectorIndividual)parents[j]).genome[i];        ((DoubleVectorIndividual)parents[j]).genome[i]=((DoubleVectorIndividual)parents[swapIndex]).genome[i];        ((DoubleVectorIndividual)parents[swapIndex]).genome[i]=temp;      }    }  }  for (int i=0, q=start; i < parents.length; i++, q++) {    parents[i].evaluated=false;    if (q < inds.length) {      inds[q]=(DoubleVectorIndividual)parents[i];    }  }  return n;}  }
class C{  public boolean equals(Object objectToCompare){  if (this == objectToCompare) {    return true;  }  if (objectToCompare == null) {    return false;  }  if (!(objectToCompare instanceof ExceptionMessage)) {    return false;  }  boolean equal=false;  ExceptionMessage otherExceptionMessage=(ExceptionMessage)objectToCompare;  boolean codeMatches=false;  boolean messageMatches=false;  if (null == m_code) {    codeMatches=(null == otherExceptionMessage.m_code);  } else {    codeMatches=(m_code.equals(otherExceptionMessage.m_code));  }  if (null == m_message) {    messageMatches=(null == otherExceptionMessage.m_message);  } else {    messageMatches=(m_message.equals(otherExceptionMessage.m_message));  }  if (codeMatches && messageMatches) {    equal=true;  }  return equal;}  }
class C{  public ClusterConfig(List<Node> nodes,short thisNodeId,AuthScheme authScheme,String keyStorePath,String keyStorePassword) throws SyncException {  init(nodes,thisNodeId,authScheme,keyStorePath,keyStorePassword);}  }
class C{  public boolean isAccessor(){  return (Objects.equal(this.getMemberType(),MemberType.SETTER) || Objects.equal(this.getMemberType(),MemberType.GETTER));}  }
class C{  public boolean isEmpty(){  return scanner.getRoot() == null;}  }
class C{  public DivExpr newDivExpr(Value op1,Value op2){  return new JDivExpr(op1,op2);}  }
class C{  public boolean isCurrency(int column) throws SQLException {  return false;}  }
class C{  public void testCertPathBuilder14() throws NoSuchAlgorithmException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  for (int i=0; i < validValues.length; i++) {    CertPathBuilder cpb2=CertPathBuilder.getInstance(validValues[i],defaultProvider);    assertEquals("Incorrect provider",cpb2.getProvider(),defaultProvider);    try {      CertPathBuilder cpb3=CertPathBuilder.getInstance(validValues[i],defaultProviderName);      assertEquals("Incorrect provider",cpb3.getProvider(),defaultProvider);    } catch (    NoSuchProviderException e) {      fail("Unexpected NoSuchProviderException " + e.getMessage());    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:51.871 -0500",hash_original_method="54930D8E89EFC71A5AA62EEEA5BD364C",hash_generated_method="51262DF640D5CA19086BA71421BEABE1") public static void applyDebuggerSystemProperty(Arguments args){  if ("1".equals(SystemProperties.get("ro.debuggable"))) {    args.debugFlags|=Zygote.DEBUG_ENABLE_DEBUGGER;  }}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  if (evt.getPropertyName() == MouseDelegator.ActiveModeProperty) {    mmID=((MapMouseMode)evt.getNewValue()).getID().intern();    checkMouseMode();  }}  }
class C{  @Override public Void visitBinary(BinaryTree node,Void p){  final ExpressionTree leftOp=node.getLeftOperand();  final ExpressionTree rightOp=node.getRightOperand();  if (isUnboxingOperation(node)) {    checkForNullability(leftOp,UNBOXING_OF_NULLABLE);    checkForNullability(rightOp,UNBOXING_OF_NULLABLE);  }  checkForRedundantTests(node);  return super.visitBinary(node,p);}  }
class C{  public static Long[] transformLongArray(long[] source){  Long[] destin=new Long[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  static SQLWarning convertShowWarningsToSQLWarnings(Connection connection,int warningCountIfKnown,boolean forTruncationOnly) throws SQLException {  java.sql.Statement stmt=null;  java.sql.ResultSet warnRs=null;  SQLWarning currentWarning=null;  try {    if (warningCountIfKnown < 100) {      stmt=connection.createStatement();      if (stmt.getMaxRows() != 0) {        stmt.setMaxRows(0);      }    } else {      stmt=connection.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,java.sql.ResultSet.CONCUR_READ_ONLY);      stmt.setFetchSize(Integer.MIN_VALUE);    }    warnRs=stmt.executeQuery("SHOW WARNINGS");    while (warnRs.next()) {      int code=warnRs.getInt("Code");      if (forTruncationOnly) {        if (code == MysqlErrorNumbers.ER_WARN_DATA_TRUNCATED || code == MysqlErrorNumbers.ER_WARN_DATA_OUT_OF_RANGE) {          DataTruncation newTruncation=new MysqlDataTruncation(warnRs.getString("Message"),0,false,false,0,0,code);          if (currentWarning == null) {            currentWarning=newTruncation;          } else {            currentWarning.setNextWarning(newTruncation);          }        }      } else {        String message=warnRs.getString("Message");        SQLWarning newWarning=new SQLWarning(message,SQLError.mysqlToSqlState(code,connection.getUseSqlStateCodes()),code);        if (currentWarning == null) {          currentWarning=newWarning;        } else {          currentWarning.setNextWarning(newWarning);        }      }    }    if (forTruncationOnly && (currentWarning != null)) {      throw currentWarning;    }    return currentWarning;  }  finally {    SQLException reThrow=null;    if (warnRs != null) {      try {        warnRs.close();      } catch (      SQLException sqlEx) {        reThrow=sqlEx;      }    }    if (stmt != null) {      try {        stmt.close();      } catch (      SQLException sqlEx) {        reThrow=sqlEx;      }    }    if (reThrow != null) {      throw reThrow;    }  }}  }
class C{  public boolean isUseMipMaps(){  return this.useMipMaps;}  }
class C{  public static Object respond(final RequestHeader header,final serverObjects post,final serverSwitch env){  final Switchboard sb=(Switchboard)env;  String ext=header.get("EXT",null);  boolean isPNGTarget="png".equalsIgnoreCase(ext);  ImageInputStream imageInStream=null;  InputStream inStream=null;  byte[] resultBytes=null;  try {    if (MemoryControl.shortStatus()) {      pngIconCache.clear();    }    final boolean auth=Domains.isLocalhost(header.get(HeaderFramework.CONNECTION_PROP_CLIENTIP,"")) || sb.verifyAuthentication(header);    DigestURL url=VIEWER.parseURL(post,auth);    final String normalizedURL=url.toNormalform(false);    if (isPNGTarget) {      resultBytes=pngIconCache.get(normalizedURL);    }    if (resultBytes == null) {      String urlExt=MultiProtocolURL.getFileExtension(url.getFileName());      if (ext != null && ext.equalsIgnoreCase(urlExt) && ImageViewer.isBrowserRendered(urlExt)) {        return VIEWER.openInputStream(post,sb.loader,auth,url);      }      if (url.isFile()) {        imageInStream=ImageIO.createImageInputStream(url.getFSFile());      } else {        inStream=VIEWER.openInputStream(post,sb.loader,auth,url);        imageInStream=ImageIO.createImageInputStream(inStream);      }      EncodedImage encodedIcon=VIEWER.parseAndScale(post,auth,url,ext,imageInStream);      if (encodedIcon != null && !encodedIcon.getImage().isEmpty()) {        resultBytes=encodedIcon.getImage().getBytes();        if (isPNGTarget && encodedIcon.getImage().length() <= 10240) {          pngIconCache.put(normalizedURL,resultBytes);        }      }    }  } catch (  IOException e) {    ConcurrentLog.fine("ViewFavicon","Error loading favicon, default one wille be used : " + e);  } finally {    if (inStream != null) {      try {        inStream.close();      } catch (      IOException ignored) {      }    }    if (resultBytes == null) {      if (ext == null || isPNGTarget) {        if (defaultPNGEncodedIcon == null) {          defaultPNGEncodedIcon=loadDefaultIcon(post,sb,ext);        }        resultBytes=defaultPNGEncodedIcon;      } else {        resultBytes=loadDefaultIcon(post,sb,ext);      }    }  }  return new ByteArrayInputStream(resultBytes);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  String outputData=null;  WhiteboxRaster DEMGrid=null;  String inputFilesString=null;  String suffix="no OTOs";  String[] gridFiles;  WhiteboxRaster output=null;  int row, col;  int progress=0;  double noData=0;  int rows, cols;  int a, b;  double z1, z2, w1;  double[][] subGridDEM;  int colOffset, rowOffset;  boolean flag;  double minEdgeSlope=0;  int loopNum=0;  int numCellsChanged=0;  int prevNumCellsChanged=0;  boolean[] activeTile=new boolean[1];  int[][] tileCorners=new int[2][1];  boolean didSomethingHappen=false;  int currentTile, numTiles=0;  long numValidCells=0;  double cumulativeChange=0;  boolean iterateRemoveOTOs=false;  try {    if (args.length <= 0) {      showFeedback("Plugin parameters have not been set.");      return;    }    inputFilesString=args[0];    suffix=args[1];    OTOMaxSize=(int)(Math.round(Double.valueOf(args[2])));    int halfOTOMaxSize=OTOMaxSize / 2;    double[] data=new double[OTOMaxSize + 2];    minEdgeSlope=Double.valueOf(args[3]);    iterateRemoveOTOs=Boolean.parseBoolean(args[4]);    if (suffix.equals("")) {      suffix="no OTOs";    }    if ((inputFilesString == null)) {      showFeedback("One or more of the input parameters have not been set properly.");      return;    }    if (OTOMaxSize < 5) {      OTOMaxSize=5;    }    gridFiles=inputFilesString.split(";");    int numPointFiles=gridFiles.length;    for (int j=0; j < numPointFiles; j++) {      inputHeader=gridFiles[j];      outputHeader=gridFiles[j].replace(".dep"," " + suffix + ".dep");      outputData=outputHeader.replace(".dep",".tas");      String tempHeaderFile=inputHeader.replace(".dep","_temp.dep");      String tempDataFile=inputHeader.replace(".dep","_temp.tas");      FileUtilities.copyFile(new File(inputHeader),new File(tempHeaderFile));      FileUtilities.copyFile(new File(inputHeader.replace(".dep",".tas")),new File(tempDataFile));      do {        numValidCells=0;        loopNum++;        prevNumCellsChanged=numCellsChanged;        numCellsChanged=0;        DEMGrid=new WhiteboxRaster(tempHeaderFile,"rw");        rows=DEMGrid.getNumberRows();        cols=DEMGrid.getNumberColumns();        noData=DEMGrid.getNoDataValue();        double resolution=(DEMGrid.getCellSizeX() + DEMGrid.getCellSizeY()) / 2;        if (loopNum == 1) {          minOTOHeight=Math.tan(minEdgeSlope * Math.PI / 180) * resolution;          if (minOTOHeight < 0) {            minOTOHeight=0;          }        }        cumulativeChange=0;        updateProgress("DEM " + (j + 1) + " Loop number "+ loopNum+ ":",-1);        if (loopNum == 1) {          FileUtilities.copyFile(new File(tempHeaderFile),new File(outputHeader));          FileUtilities.copyFile(new File(tempDataFile),new File(outputData));          output=new WhiteboxRaster(outputHeader,"rw");          colOffset=0;          flag=true;          do {            data[0]=noData;            data[OTOMaxSize + 1]=noData;            a=0;            for (col=colOffset; col < colOffset + OTOMaxSize; col++) {              data[a + 1]=output.getValue(0,col);              if (data[a + 1] != noData) {                numValidCells++;              }              a++;            }            if (numValidCells > 2) {              cleavePeaks1D(data,noData);            }            a=0;            for (col=colOffset; col < colOffset + OTOMaxSize; col++) {              z1=output.getValue(0,col);              z2=data[a + 1];              if (z2 < z1) {                output.setValue(0,col,z2);              }              a++;            }            data[0]=noData;            data[OTOMaxSize + 1]=noData;            numValidCells=0;            a=0;            for (col=colOffset; col < colOffset + OTOMaxSize; col++) {              data[a + 1]=output.getValue(rows - 1,col);              if (data[a + 1] != noData) {                numValidCells++;              }              a++;            }            if (numValidCells > 2) {              cleavePeaks1D(data,noData);            }            a=0;            for (col=colOffset; col < colOffset + OTOMaxSize; col++) {              z1=output.getValue(rows - 1,col);              z2=data[a + 1];              if (z2 < z1) {                output.setValue(rows - 1,col,z2);              }              a++;            }            colOffset+=halfOTOMaxSize;            if (colOffset > cols - 1) {              flag=false;            }          } while (flag);          rowOffset=0;          flag=true;          do {            data[0]=noData;            data[OTOMaxSize + 1]=noData;            numValidCells=0;            a=0;            for (row=rowOffset; row < rowOffset + OTOMaxSize; row++) {              data[a + 1]=output.getValue(row,0);              if (data[a + 1] != noData) {                numValidCells++;              }              a++;            }            if (numValidCells > 2) {              cleavePeaks1D(data,noData);            }            a=0;            for (row=rowOffset; row < rowOffset + OTOMaxSize; row++) {              z1=output.getValue(row,0);              z2=data[a + 1];              if (z2 < z1) {                output.setValue(row,0,z2);              }              a++;            }            data[0]=noData;            data[OTOMaxSize + 1]=noData;            numValidCells=0;            a=0;            for (row=rowOffset; row < rowOffset + OTOMaxSize; row++) {              data[a + 1]=output.getValue(row,cols - 1);              if (data[a + 1] != noData) {                numValidCells++;              }              a++;            }            if (numValidCells > 2) {              cleavePeaks1D(data,noData);            }            a=0;            for (row=rowOffset; row < rowOffset + OTOMaxSize; row++) {              z1=output.getValue(row,cols - 1);              z2=data[a + 1];              if (z2 < z1) {                output.setValue(row,cols - 1,z2);              }              a++;            }            rowOffset+=halfOTOMaxSize;            if (rowOffset > rows - 1) {              flag=false;            }          } while (flag);          colOffset=-1;          rowOffset=-1;          flag=true;          numTiles=-1;          do {            numTiles++;            colOffset+=halfOTOMaxSize;            if (colOffset > cols - 1) {              colOffset=-1;              rowOffset+=halfOTOMaxSize;              if (rowOffset > rows - 1) {                flag=false;              }            }          } while (flag);          activeTile=new boolean[numTiles + 1];          tileCorners=new int[2][numTiles + 1];          colOffset=-1;          rowOffset=-1;          flag=true;          currentTile=-1;          do {            currentTile++;            activeTile[currentTile]=true;            tileCorners[0][currentTile]=colOffset;            tileCorners[1][currentTile]=rowOffset;            colOffset+=halfOTOMaxSize;            if (colOffset > cols - 1) {              colOffset=-1;              rowOffset+=halfOTOMaxSize;              if (rowOffset > rows - 1) {                flag=false;              }            }          } while (flag);        } else {          output=new WhiteboxRaster(outputHeader,"rw");        }        colOffset=-1;        rowOffset=-1;        flag=true;        currentTile=-1;        do {          currentTile++;          if (activeTile[currentTile]) {            subGridDEM=new double[OTOMaxSize + 2][OTOMaxSize + 2];            for (row=0; row < OTOMaxSize + 2; row++) {              subGridDEM[row][0]=noData;              subGridDEM[row][OTOMaxSize + 1]=noData;            }            for (col=0; col < OTOMaxSize + 2; col++) {              subGridDEM[0][col]=noData;              subGridDEM[OTOMaxSize + 1][col]=noData;            }            numValidCells=0;            a=0;            b=0;            for (row=rowOffset; row < rowOffset + OTOMaxSize; row++) {              for (col=colOffset; col < colOffset + OTOMaxSize; col++) {                subGridDEM[b + 1][a + 1]=DEMGrid.getValue(row,col);                if (subGridDEM[b + 1][a + 1] != noData) {                  numValidCells++;                }                a++;                if (a == OTOMaxSize) {                  a=0;                }              }              b++;            }            if (numValidCells > 3) {              cleavePeaks2D(subGridDEM,noData);            }            a=0;            b=0;            didSomethingHappen=false;            for (row=rowOffset; row < rowOffset + OTOMaxSize; row++) {              for (col=colOffset; col < colOffset + OTOMaxSize; col++) {                z2=subGridDEM[b + 1][a + 1];                w1=output.getValue(row,col);                if (z2 < w1) {                  output.setValue(row,col,z2);                  cumulativeChange+=(w1 - z2) * (w1 - z2);                  didSomethingHappen=true;                  numCellsChanged++;                }                a++;                if (a == OTOMaxSize) {                  a=0;                }              }              b++;            }            if (!didSomethingHappen) {              activeTile[currentTile]=false;            }          }          colOffset+=halfOTOMaxSize;          if (colOffset > cols - 1) {            colOffset=-1;            rowOffset+=halfOTOMaxSize;            if (rowOffset > rows - 1) {              flag=false;            }            if (cancelOp) {              cancelOperation();              return;            }          }          progress=(int)(currentTile * 100d / (numTiles - 1d));          updateProgress((int)progress);        } while (flag);        DEMGrid.close();        output.close();        if (numCellsChanged > 0) {          FileUtilities.copyFile(new File(outputHeader),new File(tempHeaderFile));          FileUtilities.copyFile(new File(outputHeader.replace(".dep",".tas")),new File(tempDataFile));        }      } while ((numCellsChanged > 0) && (numCellsChanged != prevNumCellsChanged) && (loopNum < 501)&& (cumulativeChange > 0.5)&& iterateRemoveOTOs);      if ((new File(tempHeaderFile)).exists()) {        (new File(tempHeaderFile)).delete();      }      if ((new File(tempDataFile)).exists()) {        (new File(tempDataFile)).delete();      }    }    returnData(gridFiles[0].replace(".dep"," " + suffix + ".dep"));  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean isUseWalkParameterFromMATSim(){  return useWalkParameterFromMATSim;}  }
class C{  public void cleanup(){  Map<String,String> buddies=player.getMap("buddies");  if (buddies != null) {    Collection<String> lowerBuddies=new HashSet<String>();    Collection<String> duplicates=new ArrayList<String>();    for (    String name : buddies.keySet()) {      if (!lowerBuddies.add(name.toLowerCase())) {        duplicates.add(name);      }    }    for (    String duplicateName : duplicates) {      player.removeBuddy(duplicateName);      new GameEvent(player.getName(),"buddy","remove",duplicateName).raise();    }    DBCommand command=new QueryCanonicalCharacterNamesCommand(player,player.getBuddies());    DBCommandQueue.get().enqueueAndAwaitResult(command,handle);    TurnNotifier.get().notifyInTurns(0,new TurnListenerDecorator(this));  }}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writeShape(getArea(),stream);}  }
class C{  public SIGRecord(Name name,int dclass,long ttl,int covered,int alg,long origttl,Date expire,Date timeSigned,int footprint,Name signer,byte[] signature){  super(name,Type.SIG,dclass,ttl,covered,alg,origttl,expire,timeSigned,footprint,signer,signature);}  }
class C{  public final PdfObject readReferenceTable(final PdfObject linearObj,final PdfFileReader currentPdfFile,final ObjectReader objectReader) throws PdfException {  int pointer=-1;  final int eof=(int)this.eof;  boolean islinearizedCompressed=false;  if (linearObj == null) {    pointer=readFirstStartRef();  } else {    final byte[] data=pdf_datafile.getPdfBuffer();    final int count=data.length;    int ptr=5;    for (int i=0; i < count; i++) {      if (data[i] == 'e' && data[i + 1] == 'n' && data[i + 2] == 'd' && data[i + 3] == 'o' && data[i + 4] == 'b' && data[i + 5] == 'j') {        ptr=i + 6;      }      if (data[i] == 'x' && data[i + 1] == 'r' && data[i + 2] == 'e' && data[i + 3] == 'f') {        pointer=i;        i=count;      } else       if (data[i] == 'X' && data[i + 1] == 'R' && data[i + 2] == 'e' && data[i + 3] == 'f') {        islinearizedCompressed=true;        pointer=ptr;        while (data[pointer] == 10 || data[pointer] == 13 || data[pointer] == 32) {          pointer++;        }        i=count;      }    }  }  offset.addXref(pointer);  PdfObject rootObj=null;  if (pointer >= eof || pointer == 0) {    LogWriter.writeLog("Pointer not if file - trying to manually find startref");    offset.setRefTableInvalid(true);    try {      rootObj=new PageObject(BrokenRefTable.findOffsets(pdf_datafile,offset));    } catch (    Error err) {      throw new PdfException(err.getMessage() + " attempting to manually scan file for objects");    }    currentPdfFile.readObject(rootObj);    return rootObj;  } else   if (islinearizedCompressed || isCompressedStream(pointer,eof)) {    return readCompressedStream(rootObj,pointer,currentPdfFile,objectReader,linearObj);  } else {    return readLegacyReferenceTable(rootObj,pointer,eof,currentPdfFile);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:01.585 -0500",hash_original_method="A91F01B0D3E07B9BAFA73C694BEFBC5B",hash_generated_method="B9D13965655950C2F38660C7F9171895") private static int extractSelCodeFromOtaSpNum(String dialStr){  int dialStrLen=dialStr.length();  int sysSelCodeInt=INVALID_SYSTEM_SELECTION_CODE;  if ((dialStr.regionMatches(0,IS683A_FEATURE_CODE,0,IS683A_FEATURE_CODE_NUM_DIGITS)) && (dialStrLen >= (IS683A_FEATURE_CODE_NUM_DIGITS + IS683A_SYS_SEL_CODE_NUM_DIGITS))) {    sysSelCodeInt=Integer.parseInt(dialStr.substring(IS683A_FEATURE_CODE_NUM_DIGITS,IS683A_FEATURE_CODE_NUM_DIGITS + IS683A_SYS_SEL_CODE_NUM_DIGITS));  }  if (DBG)   Log.d(LOG_TAG,"extractSelCodeFromOtaSpNum " + sysSelCodeInt);  return sysSelCodeInt;}  }
class C{  public void attributeReplaced(ServletRequestAttributeEvent event){  String attrName=event.getName();  Object newValue=event.getServletRequest().getAttribute(attrName);  if (event.getValue() != newValue) {    handleAttributeEvent(attrName,event.getValue(),ELUtils.Scope.REQUEST);  }}  }
class C{  static void errorUnexpectedCDATA(String systemID,int lineNr) throws XMLParseException {  throw new XMLParseException(systemID,lineNr,"No CDATA section is expected here");}  }
class C{  @Override public void removeAttribute(Attribute attribute){  removeAttribute(attribute.getTableIndex());}  }
class C{  public Matrix4d m20(double m20){  this.m20=m20;  properties&=~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE | PROPERTY_TRANSLATION);  return this;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  private long[] mapToKenLmIds(int[] ids,List<HGNode> tailNodes,boolean isOnlyEstimate){  long[] kenIds=new long[ids.length];  for (int x=0; x < ids.length; x++) {    int id=ids[x];    if (isNonterminal(id)) {      if (isOnlyEstimate) {        kenIds[x]=-1;      } else {        int index=-(id + 1);        final KenLMState state=(KenLMState)tailNodes.get(index).getDPState(stateIndex);        kenIds[x]=-state.getState();      }    } else {      kenIds[x]=id;    }  }  return kenIds;}  }
class C{  public void ping() throws IOException {  PacketPING p=new PacketPING();  p.send(hostAddress,hostPort);}  }
class C{  private void stopDrag(MouseEvent event){  IEntity entity=dragged.getEntity();  DropTarget target=getCurrentDropTarget();  if ((target != null) && target.canAccept(entity) && (target instanceof Component)) {    if (entity != null) {      Point componentPoint=SwingUtilities.convertPoint(this,point,(Component)target);      if (showAmountChooser(event,entity)) {        DropAmountChooser chooser=new DropAmountChooser((StackableItem)entity,target,componentPoint);        chooser.show((Component)target,componentPoint);      } else {        target.dropEntity(entity,-1,componentPoint);      }    }  }  dragged.release();  dragged=null;}  }
class C{  public void push(final double value){  long bits=Double.doubleToLongBits(value);  if (bits == 0L || bits == 0x3ff0000000000000L) {    mv.visitInsn(Opcodes.DCONST_0 + (int)value);  } else {    mv.visitLdcInsn(value);  }}  }
class C{  private void appendTypeParameterSignaturesLabel(String[] typeParamSigs,StringBuilder builder){  if (typeParamSigs.length > 0) {    builder.append(getLT());    for (int i=0; i < typeParamSigs.length; i++) {      if (i > 0) {        builder.append(JavaElementLabels.COMMA_STRING);      }      builder.append(Signature.getTypeVariable(typeParamSigs[i]));    }    builder.append(getGT());  }}  }
class C{  private static void compareTimeSources(String ts1name,String ts2name,TimeSource ts1,TimeSource ts2){  out.println("--- " + ts1name + " vs "+ ts2name+ " START ---");  SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd_HH:mm:ss.SSS");  for (int i=0; i < 30; i++) {    long ts1millis=ts1.millis();    long ts2millis=ts2.millis();    String ts1date=sdf.format(new Date(ts1millis));    String ts2date=sdf.format(new Date(ts2millis));    long millisDiff=ts1millis - ts2millis;    out.printf("diff=%5d %s %s %s %s%n",millisDiff,ts1name,ts1date.toString(),ts2name,ts2date.toString());    try {      Thread.sleep(75);    } catch (    InterruptedException e) {      out.println("Interrupted: " + Arrays.toString(e.getStackTrace()));    }  }  out.println("--- " + ts1name + " vs "+ ts2name+ " END ---");  out.println();}  }
class C{  public boolean isIncludeNullsCampaign(){  Object oo=get_Value(COLUMNNAME_IsIncludeNullsCampaign);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  void selectType(Environment env,Context ctx,int tm){  right=convert(env,ctx,Type.tBoolean,right);}  }
class C{  public static Set<org.oscm.internal.vo.Setting> convertToUpSetting(Set<org.oscm.vo.Setting> oldVO){  if (oldVO == null) {    return null;  }  Set<org.oscm.internal.vo.Setting> newVO=new HashSet<org.oscm.internal.vo.Setting>();  for (  org.oscm.vo.Setting tmp : oldVO) {    newVO.add(convertToUp(tmp));  }  return newVO;}  }
class C{  @Override public final boolean delete(DBIDRef id){  O obj=relation.get(id);  IndexTreePath<SpatialEntry> deletionPath=findPathToObject(getRootPath(),obj,id);  if (deletionPath == null) {    return false;  }  deletePath(deletionPath);  return true;}  }
class C{  protected NativePointerObject(NativePointerObject other){  this.nativePointer=other.nativePointer;}  }
class C{  public static boolean hasAPI(final int mApiLevel){  return Build.VERSION.SDK_INT >= mApiLevel;}  }
class C{  private Rectangle saveClip(Graphics g){  return new Rectangle(g.getClipX(),g.getClipY(),g.getClipWidth(),g.getClipHeight());}  }
class C{  public EDIPartyName(String assignerName,String partyName){  this.assigner=assignerName;  this.party=partyName;}  }
class C{  public boolean isFullyZoomedOut(){  return mViewPortHandler.isFullyZoomedOut();}  }
class C{  public ThymeleafTemplateEngine(TemplateResolver templateResolver){  initialize(templateResolver);}  }
class C{  public static ObjectAnimator ofInt(Object target,String propertyName,int... values){  ObjectAnimator anim=new ObjectAnimator(target,propertyName);  anim.setIntValues(values);  return anim;}  }
class C{  protected boolean removeLeastRecentlyUsedEntry(){  if (this.entryMap.isEmpty())   return false;  Entry[] timeOrderedEntries=new Entry[this.entryMap.size()];  Arrays.sort(this.entryMap.values().toArray(timeOrderedEntries));  Entry entryToRemove=timeOrderedEntries[0];  this.entryMap.remove(entryToRemove.key);  this.doRemove(entryToRemove);  return true;}  }
class C{  private void cleanUpResources(){  if (!cache.isClosed() && InternalDistributedSystem.getConnectedInstance() != null) {    if (repo.getLocalMonitoringRegion() != null) {      for (      String name : repo.getLocalMonitoringRegion().keySet()) {        ObjectName objName=null;        try {          objName=ObjectName.getInstance(name);          unMarkForFederation(objName);        } catch (        MalformedObjectNameException e) {          if (logger.isDebugEnabled()) {            logger.debug("Unable to clean MBean: {} due to {}",objName,e.getMessage(),e);          }        }catch (        NullPointerException e) {          if (logger.isDebugEnabled()) {            logger.debug("Unable to clean MBean: {} due to {}",objName,e.getMessage(),e);          }        }      }      repo.destroyLocalMonitoringRegion();    }    if (repo.getLocalNotificationRegion() != null) {      repo.destroyLocalNotifRegion();    }  }}  }
class C{  @Override public String toString(){  return Integer.toString(this.year);}  }
class C{  static Constructor of(){  return new ConstructorImpl();}  }
class C{  public static IntsRef toUTF32(CharSequence s,IntsRefBuilder scratch){  int charIdx=0;  int intIdx=0;  final int charLimit=s.length();  while (charIdx < charLimit) {    scratch.grow(intIdx + 1);    final int utf32=Character.codePointAt(s,charIdx);    scratch.setIntAt(intIdx,utf32);    charIdx+=Character.charCount(utf32);    intIdx++;  }  scratch.setLength(intIdx);  return scratch.get();}  }
class C{  public boolean fieldsToCheck(Field destination,Field source){  destinationName=destination.getName();  sourceName=source.getName();  if (!xml.conversionsLoad().isEmpty()) {    configurationType=XML;    if (config == DESTINATION) {      if (existsXmlConversion(destinationClass)) {        membership=Membership.DESTINATION;        return true;      }      if (existsXmlConversion(sourceClass)) {        membership=Membership.SOURCE;        return true;      }    } else {      if (existsXmlConversion(sourceClass)) {        membership=Membership.SOURCE;        return true;      }      if (existsXmlConversion(destinationClass)) {        membership=Membership.DESTINATION;        return true;      }    }  }  configurationType=ANNOTATION;  if (config == DESTINATION) {    if (existsAnnotatedConversion(destinationClass)) {      membership=Membership.DESTINATION;      return true;    }    if (existsAnnotatedConversion(sourceClass)) {      membership=Membership.SOURCE;      return true;    }  } else {    if (existsAnnotatedConversion(sourceClass)) {      membership=Membership.SOURCE;      return true;    }    if (existsAnnotatedConversion(destinationClass)) {      membership=Membership.DESTINATION;      return true;    }  }  return false;}  }
class C{  public void remove(RadioButton rb){  if (rb == null)   return;  buttons.removeElement(rb);  if (rb.isSelected())   clearSelection();  rb.setButtonGroup(null);}  }
class C{  private void assertArrayLength(int len,int elementSizeInBytes) throws DecodingException {  if (len < -1) {    throw new DecodingException(StatusCodes.Bad_DecodingError,"Illegal array length " + len);  }  int maxLen=ctx.getMaxArrayLength();  if (maxLen > 0 && len > maxLen) {    throw new DecodingException(StatusCodes.Bad_EncodingLimitsExceeded,"MaxArrayLength=" + maxLen + " < "+ len);  }  long l=len;  if (l * elementSizeInBytes > remaining()) {    throw new DecodingException(StatusCodes.Bad_EndOfStream,"Buffer underflow");  }}  }
class C{  void writeTo(byte[] b,int off){  System.arraycopy(buf,0,b,off,count);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:03.503 -0400",hash_original_method="CDBBF9685B9AF5133139869A227E00AD",hash_generated_method="9FE49F2CADAD3B7354A88EDBE95D90DD") public Cache(int pref_size){  this(pref_size,9);}  }
class C{  public static void d(String tag,String msg,Object... args){  if (sLevel > LEVEL_DEBUG) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.d(tag,msg);}  }
class C{  public void fitToScreen(){  m_fScaleX=10;  int nW=getWidth();  if (m_nLeafs > 0) {    m_fScaleX=nW / m_nLeafs;  }  m_fScaleY=10;  int nH=getHeight();  if (m_fHeight > 0) {    m_fScaleY=(nH - 10) / m_fHeight;  }  repaint();}  }
class C{  public static String formatElapsedTimeWithHour(long time){  String value=formatElapsedTime(time);  return TextUtils.split(value,":").length == 2 ? "0:" + value : value;}  }
class C{  public static OrientedFactory init(){  try {    OrientedFactory theOrientedFactory=(OrientedFactory)EPackage.Registry.INSTANCE.getEFactory("http:///org/eclipse/actor/oriented.ecore");    if (theOrientedFactory != null) {      return theOrientedFactory;    }  } catch (  Exception exception) {    EcorePlugin.INSTANCE.log(exception);  }  return new OrientedFactoryImpl();}  }
class C{  @Override public String nickname(){  return "oa";}  }
class C{  public GroovyTypeCheckingExtensionSupport(final StaticTypeCheckingVisitor typeCheckingVisitor,final String scriptPath,final CompilationUnit compilationUnit){  super(typeCheckingVisitor);  this.scriptPath=scriptPath;  this.compilationUnit=compilationUnit;}  }
class C{  @Override public void recycle(){  impl.recycle();}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public static void init(Context context){  if (cameraManager == null) {    cameraManager=new CameraManager(context);  }}  }
class C{  public static void closeWhileHandlingException(Iterable<? extends Closeable> objects){  for (  Closeable object : objects) {    try {      if (object != null) {        object.close();      }    } catch (    Throwable t) {    }  }}  }
class C{  public IStriterator<I,E> exclude(final Set<E> set){  throw new UnsupportedOperationException();}  }
class C{  private void prepareDots(){  removeAllViews();  for (int dotLoop=0; dotLoop < mMaxPage; dotLoop++) {    ImageView imageView=new ImageView(getContext());    LayoutParams params=new LayoutParams((int)mRadius,(int)mRadius);    if (dotLoop != 0) {      if (getOrientation() == HORIZONTAL)       params.setMargins((int)mDotGap,0,0,0); else       params.setMargins(0,(int)mDotGap,0,0);    }    imageView.setLayoutParams(params);    imageView.setImageDrawable(mStrokeDrawable);    imageView.setId(dotLoop);    addView(imageView);  }}  }
class C{  public int next(){  int node;  int type;  if (_startNode == NULL) {    return NULL;  }  node=_currentNode;  do {    node++;    type=_type(node);    if (NULL == type || !isDescendant(node)) {      _currentNode=NULL;      return END;    }  } while (type != _nodeType && _exptype(node) != _nodeType);  _currentNode=node;  return returnNode(makeNodeHandle(node));}  }
class C{  public void update(com.bbn.openmap.corba.CSpecialist.PolyPackage.PF_update update){  int npts;switch (update.discriminator().value()) {case com.bbn.openmap.corba.CSpecialist.PolyPackage.settableFields._PF_ll1:    LLPoint ll=update.ll1();  lat=ll.lat;lon=ll.lon;setNeedToRegenerate(true);break;case com.bbn.openmap.corba.CSpecialist.PolyPackage.settableFields._PF_cMode:int newMode=getCoordMode(update.cMode());if (newMode != coordMode) {coordMode=newMode;setNeedToRegenerate(true);}break;case com.bbn.openmap.corba.CSpecialist.PolyPackage.settableFields._PF_xypoints:com.bbn.openmap.corba.CSpecialist.XYPoint[] xypoints=update.xypoints();npts=xypoints.length;if (npts > 0) {xs=new int[npts];ys=new int[npts];for (int i=0; i < npts; i++) {xs[i]=xypoints[i].x;ys[i]=xypoints[i].y;}}if (renderType != RENDERTYPE_LATLON) setNeedToRegenerate(true);break;case com.bbn.openmap.corba.CSpecialist.PolyPackage.settableFields._PF_llpoints:com.bbn.openmap.corba.CSpecialist.LLPoint[] llpoints=update.llpoints();npts=llpoints.length;if (npts > 0) {rawllpts=new double[npts * 2];for (int i=0; i < npts; i+=2) {rawllpts[i]=llpoints[i].lat;rawllpts[i + 1]=llpoints[i].lon;}}if (renderType == RENDERTYPE_LATLON) setNeedToRegenerate(true);break;default :System.err.println("JPoly.update: invalid poly update");break;}}  }
class C{  public void togglePopup(){  getColumnControlPopup().toggleVisibility(this);}  }
class C{  public LiteralArrayIV(final InlineLiteralIV<?,?>... ivs){  super(DTE.Extension);  if (ivs == null || ivs.length == 0 || ivs.length > 256) {    throw new IllegalArgumentException();  }  this.ivs=ivs;}  }
class C{  public static String convertU8ToHexString(char u8){  return Integer.toHexString(u8);}  }
class C{  protected EqualsOp_Impl(){  super();}  }
class C{  @Override public void addAttribute(String name,float value){  String str=Float.toString(value);  if (str.endsWith(".0"))   str=str.substring(0,str.length() - 2);  current.setAttribute(name,str);}  }
class C{  public InlineQueryResultVideo.InlineQueryResultVideoBuilder videoDuration(int videoDuration){  this.video_duration=videoDuration;  return this;}  }
class C{  public SparseObjectMatrix2D(Object[][] values){  this(values.length,values.length == 0 ? 0 : values[0].length);  assign(values);}  }
class C{  private static IJavaProject createProject(String projectName,IClasspathEntry[] rawClasspaths) throws CoreException {  IProject project=ProjectUtilities.createProject(projectName);  NullProgressMonitor monitor=new NullProgressMonitor();  BuildPathsBlock.addJavaNature(project,monitor);  IJavaProject javaProject=JavaCore.create(project);  javaProject.setRawClasspath(rawClasspaths,monitor);  javaProject.open(monitor);  return javaProject;}  }
class C{  private static void loadData() throws Exception {  logger.debug("SharedUtils.loadData called");  InputStream is=getInputStream(CONFIG_FILE);  Validate.notNull(is);  try {    ServerConfig.initialize(is);  }  finally {    is.close();  }}  }
class C{  public GroovySocketServer(GroovyShell groovy,boolean isScriptFile,String scriptFilenameOrText,boolean autoOutput,int port){  this(groovy,getCodeSource(isScriptFile,scriptFilenameOrText),autoOutput,port);}  }
class C{  public void addChangingListener(OnWheelChangedListener listener){  changingListeners.add(listener);}  }
class C{  private boolean checkPduType(SnmpPduPacket pdu){  boolean result;switch (pdu.type) {case SnmpDefinitions.pduGetRequestPdu:case SnmpDefinitions.pduGetNextRequestPdu:case SnmpDefinitions.pduSetRequestPdu:case SnmpDefinitions.pduGetBulkRequestPdu:    result=true;  break;default :if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {  SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,dbgTag,"checkPduType","cannot respond to this kind of PDU");}result=false;break;}return result;}  }
class C{  public void testGetColumnKey(){  TaskSeriesCollection c=createCollection1();  assertEquals("Task 1",c.getColumnKey(0));  assertEquals("Task 2",c.getColumnKey(1));  assertEquals("Task 3",c.getColumnKey(2));}  }
class C{  public static void main(String[] args) throws IOException {  long maxCount=Long.MAX_VALUE;  if (args.length < 2) {    printUsageAndExit();  }  int i=0;  while (args[i].startsWith("-")) {switch (args[i]) {case "-m":      try {        maxCount=Long.parseLong(args[++i]);      } catch (      NumberFormatException ex) {        printUsageAndExit(ex.toString());      }    break;default :  printUsageAndExit("Unexpected option " + args[i]);}i++;}Pattern pattern=Pattern.compile(args[i++]);if (i == args.length) {printUsageAndExit("There are no files for input");}try {List<Path> files=Arrays.stream(args,i,args.length).map(null).flatMap(null).filter(null).collect(toList());files.parallelStream().flatMap(null).filter(pattern.asPredicate()).limit(maxCount).forEachOrdered(null);} catch (UncheckedIOException ioe) {printUsageAndExit(ioe.toString());}}  }
class C{  public boolean previous() throws SQLException {  if (updated) {    getResultSet().updateRow();    updated=false;  }  return getResultSet().previous();}  }
class C{  public ClientMessenger(final String host,final int port,final String name,final String mac,final IConnectionLogin login) throws IOException {  this(host,port,name,mac,new DefaultObjectStreamFactory(),login);}  }
class C{  public static String formatDateRange(Context context,long startMillis,long endMillis,int flags){  return mTZUtils.formatDateRange(context,startMillis,endMillis,flags);}  }
class C{  public Drawer buildView(){  mSliderLayout=(RelativeLayout)mActivity.getLayoutInflater().inflate(R.layout.material_drawer_slider,mDrawerLayout,false);  mSliderLayout.setBackgroundColor(UIUtils.getThemeColorFromAttrOrRes(mActivity,R.attr.material_drawer_background,R.color.material_drawer_background));  DrawerLayout.LayoutParams params=(DrawerLayout.LayoutParams)mSliderLayout.getLayoutParams();  if (params != null) {    params.gravity=mDrawerGravity;    params=DrawerUtils.processDrawerLayoutParams(this,params);    mSliderLayout.setLayoutParams(params);  }  createContent();  Drawer result=new Drawer(this);  if (mAccountHeader != null) {    mAccountHeader.setDrawer(result);  }  if (mSavedInstance != null && mSavedInstance.getBoolean(Drawer.BUNDLE_DRAWER_CONTENT_SWITCHED,false)) {    mAccountHeader.toggleSelectionList(mActivity);  }  handleShowOnFirstLaunch();  mActivity=null;  return result;}  }
class C{  public boolean hasBlockChain(){  return (localServices & NODE_NETWORK) == NODE_NETWORK;}  }
class C{  public void addImportedData(final Element domElement,final AVList params){  if (domElement == null) {    String message=Logging.getMessage("nullValue.DocumentIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.addToWorldWindow(domElement,params);  String description=this.getDescription(domElement);  Sector sector=this.getSector(domElement);  Box box=Box.createHorizontalBox();  box.setOpaque(false);  box.add(new JButton(new GoToSectorAction(sector)));  box.add(Box.createHorizontalStrut(10));  JLabel descLabel=new JLabel(description);  descLabel.setOpaque(false);  box.add(descLabel);  this.dataConfigPanel.add(box);  this.revalidate();}  }
class C{  public void unfollow(int followerId,int followeeId){  if (follow.get(followerId) != null) {    follow.get(followerId).remove((Integer)followeeId);  }}  }
class C{  public long toNanos(){  return TimeUnit.NANOSECONDS.convert(length,timeUnit);}  }
class C{  @Override public UIViewRoot restoreView(FacesContext context,String viewId,String renderKitId){  UIViewRoot result;  StateManagementStrategy strategy=null;  ViewDeclarationLanguage vdl=context.getApplication().getViewHandler().getViewDeclarationLanguage(context,viewId);  if (vdl != null) {    strategy=vdl.getStateManagementStrategy(context,viewId);  }  if (strategy != null) {    result=strategy.restoreView(context,viewId,renderKitId);  } else {    strategy=new JspStateManagementStrategy(context);    result=strategy.restoreView(context,viewId,renderKitId);  }  return result;}  }
class C{  public DateConverter(final boolean lenient){  this(DEFAULT_PATTERN,DEFAULT_ACCEPTABLE_FORMATS,lenient);}  }
class C{  public void freeEntry(BasicPoolEntry entry){  if (numEntries < 1) {    throw new IllegalStateException("No entry created for this pool. " + route);  }  if (numEntries <= freeEntries.size()) {    throw new IllegalStateException("No entry allocated from this pool. " + route);  }  freeEntries.add(entry);}  }
class C{  public void clear(){  for (int i=0; i < _values.length; i++) {    _keys[i]=null;    _values[i]=0;  }  _size=0;}  }
class C{  protected void computeSubdivisions(DrawContext dc,ShapeData shapeData){}  }
class C{  public static void closeSession(WriteTranSession session){  if (session != null) {    logger.debug("Closing Guzz WriteTranSession");    session.close();  }}  }
class C{  public void add(final FieldDescriptor type,final Message defaultInstance){  if (type.getJavaType() != FieldDescriptor.JavaType.MESSAGE) {    throw new IllegalArgumentException("ExtensionRegistry.add() provided a default instance for a " + "non-message extension.");  }  add(new ExtensionInfo(type,defaultInstance));}  }
class C{  public OMAbstractLine(){  super();}  }
class C{  @Override public String toResultString(){  StringBuffer result=new StringBuffer("");  AverageVector averageVector=average();  for (int averagableIndex=0; averagableIndex < averageVector.size(); averagableIndex++) {    result.append("Time series of averagable '" + ((this.getVector(0)).getAveragable(averagableIndex)).getName() + "':");    for (int timeIndex=0; timeIndex < this.size(); timeIndex++) {      AverageVector currentAveragables=getVector(timeIndex);      Averagable averagable=currentAveragables.getAveragable(averagableIndex);      result.append("  " + averagable.getAverage());    }    result.append(Tools.getLineSeparator());  }  for (int i=0; i < averageVector.size(); i++) {    Averagable averagable=averageVector.getAveragable(i);    result.append("  Average of averagable '" + averagable.getName() + "':  "+ averagable.getAverage());    if (averagable.getVariance() >= 0) {      result.append("  (" + averagable.getVariance() + ")");    }    result.append(Tools.getLineSeparator());  }  result.append(Tools.getLineSeparator());  return result.toString();}  }
class C{  public SAX2DTM2(DTMManager mgr,Source source,int dtmIdentity,DTMWSFilter whiteSpaceFilter,XMLStringFactory xstringfactory,boolean doIndexing){  this(mgr,source,dtmIdentity,whiteSpaceFilter,xstringfactory,doIndexing,DEFAULT_BLOCKSIZE,true,true,false);}  }
class C{  public void appendToDoc(String text,Font f,Color fg,Color bg,boolean underline){  appendToDoc(text,f,fg,bg,underline,true);}  }
class C{  @Override public boolean handleMouseClick(Point2D.Double p,MouseEvent evt,DrawingView view){  if (evt.getClickCount() == 2 && view.getHandleDetailLevel() % 2 == 0) {    for (    Figure child : getChildren()) {      SVGBezierFigure bf=(SVGBezierFigure)child;      int index=bf.findSegment(p,5f / view.getScaleFactor());      if (index != -1) {        bf.handleMouseClick(p,evt,view);        evt.consume();        return true;      }    }  }  return false;}  }
class C{  public int indexOf(Object elem){  if (elem == null) {    for (int i=0; i < size; i++)     if (elementData[i] == null)     return i;  } else {    for (int i=0; i < size; i++)     if (elem.equals(elementData[i]))     return i;  }  return -1;}  }
class C{  public Animator onCreateAnimator(int transit,boolean enter,int nextAnim){  return null;}  }
class C{  public void localDeploymentOwner(boolean locDepOwner){  this.locDepOwner=locDepOwner;}  }
class C{  public VerticalLayout(int vgap,int alignment){  this(vgap,alignment,TOP);}  }
class C{  public String numFoldsTipText(){  return "The number of folds for cross-validation used to generate " + "training data for logistic models (-1 means use training data).";}  }
class C{  public EventRaisingExpressionItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  private String resolveContext(){  if (isNotBlank(config.getContext())) {    return config.getContext();  }  GithubProjectProperty githubProperty=run.getParent().getProperty(GithubProjectProperty.class);  if (isNull(githubProperty) || isBlank(githubProperty.getDisplayName())) {    log.error("Unable to determine commit status context (the check name). " + "Argument 'context' not provided and no default configured. Using job name as fallback.");    return run.getParent().getFullName();  }  return githubProperty.getDisplayName();}  }
class C{  public static int findIndexOf(String str,String search){  if (str == null || search == null || search.length() == 0)   return -1;  int endIndex=-1;  int parCount=0;  boolean ignoringText=false;  int size=str.length();  while (++endIndex < size) {    char c=str.charAt(endIndex);    if (c == '\'')     ignoringText=!ignoringText; else     if (!ignoringText) {      if (parCount == 0 && c == search.charAt(0)) {        if (str.substring(endIndex).startsWith(search))         return endIndex;      } else       if (c == ')')       parCount--; else       if (c == '(')       parCount++;    }  }  return -1;}  }
class C{  private boolean init(){  return true;}  }
class C{  public static void endSection(){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {    android.os.Trace.endSection();  }}  }
class C{  public Generator(){  super(KEY);}  }
class C{  @Deprecated public static boolean isUnique(){  return true;}  }
class C{  @Override public Document document(Element rootElement){  if (this.descriptorClass != null) {    try {      Constructor constructor=this.descriptorClass.getConstructor(new Class[]{Element.class,DescriptorType.class});      Document doc=(Document)constructor.newInstance(new Object[]{rootElement,this});      return doc;    } catch (    Exception ex) {      throw new CargoException("Error constructing document type",ex);    }  }  return new Document(rootElement);}  }
class C{  TileSprite(final Sprite sprite,final int x,final int y,final int width,final int height,final Object reference){  this.sprite=sprite;  this.x=x;  this.y=y;  this.width=width;  this.height=height;  this.reference=reference;}  }
class C{  private void fireObjectRenamed(Binding newBd,String oldDN,long changeID){  if (namingListeners == null || namingListeners.size() == 0)   return;  Binding oldBd=null;  try {    LdapName dn=new LdapName(oldDN);    if (dn.startsWith(context.currentParsedDN)) {      String relDN=dn.getSuffix(context.currentParsedDN.size()).toString();      oldBd=new Binding(relDN,null);    }  } catch (  NamingException e) {  }  if (oldBd == null) {    oldBd=new Binding(oldDN,null,false);  }  NamingEvent e=new NamingEvent(eventSrc,NamingEvent.OBJECT_RENAMED,newBd,oldBd,new Long(changeID));  support.queueEvent(e,namingListeners);}  }
class C{  public Organization create(Organization newOrganization) throws ConflictException, ServerException {  requireNonNull(newOrganization,"Required non-null organization");  checkNameReservation(newOrganization.getName());  final OrganizationImpl organization=new OrganizationImpl(NameGenerator.generate("organization",16),newOrganization.getName(),newOrganization.getParent());  organizationDao.create(organization);  return organization;}  }
class C{  public boolean RM1StudyMode(String mac){  JsonObject out=broadlinkExecuteCommand(BroadlinkConstants.CMD_RM1_STUDY_ID,BroadlinkConstants.CMD_RM1_STUDY,mac);  int code=out.get(BroadlinkConstants.CODE).getAsInt();  return code == 0;}  }
class C{  public int next(){  int next=_currentNode;  int pos=--m_ancestorsPos;  _currentNode=(pos >= 0) ? m_ancestors.elementAt(m_ancestorsPos) : DTM.NULL;  return returnNode(next);}  }
class C{  public void arrayLoad(final Type type){  mv.visitInsn(type.getOpcode(Opcodes.IALOAD));}  }
class C{  public boolean equals(Object obj){  if (obj == null || (obj.getClass() != getClass())) {    return false;  }  AbstractAttributeCondition c=(AbstractAttributeCondition)obj;  return c.value.equals(value);}  }
class C{  public static void unzip(String zipFile,String location) throws IOException {  final int BUFFER_SIZE=10240;  int size;  byte[] buffer=new byte[BUFFER_SIZE];  try {    if (!location.endsWith("/")) {      location+="/";    }    File f=new File(location);    if (!f.isDirectory()) {      f.mkdirs();    }    ZipInputStream zin=new ZipInputStream(new BufferedInputStream(new FileInputStream(zipFile),BUFFER_SIZE));    try {      ZipEntry ze=null;      while ((ze=zin.getNextEntry()) != null) {        String path=location + ze.getName();        File unzipFile=new File(path);        if (ze.isDirectory()) {          if (!unzipFile.isDirectory()) {            unzipFile.mkdirs();          }        } else {          File parentDir=unzipFile.getParentFile();          if (null != parentDir) {            if (!parentDir.isDirectory()) {              parentDir.mkdirs();            }          }          FileOutputStream out=new FileOutputStream(unzipFile,false);          BufferedOutputStream fout=new BufferedOutputStream(out,BUFFER_SIZE);          try {            while ((size=zin.read(buffer,0,BUFFER_SIZE)) != -1) {              fout.write(buffer,0,size);            }            zin.closeEntry();          }  finally {            fout.flush();            fout.close();          }        }      }    }  finally {      zin.close();    }  } catch (  Exception e) {    Log.e(TAG,"Unzip exception",e);  }}  }
class C{  protected void handleJustify(float justificationWidth){}  }
class C{  private void resetMenuItems(boolean enable){  for (int i=0; i < severityItemList.length; ++i) {    MenuItem menuItem=severityItemList[i];    menuItem.setEnabled(enable);    menuItem.setSelection(false);  }}  }
class C{  @Override public void parse(XmlPullParser parser) throws XmlPullParserException, IOException {  if (!parser.getName().equals(TAG)) {    throw new XmlPullParserException(String.format("invalid XML: Expected %s tag but received %s",TAG,parser.getName()));  }  setName(getAttribute(parser,"name"));  int eventType=parser.next();  while (eventType != XmlPullParser.END_DOCUMENT) {    if (eventType == XmlPullParser.START_TAG && parser.getName().equals(TestSuite.TAG)) {      TestSuite suite=new TestSuite();      suite.parse(parser);      insertSuite(suite);    } else     if (eventType == XmlPullParser.START_TAG && parser.getName().equals(TestCase.TAG)) {      TestCase testCase=new TestCase();      testCase.parse(parser);      insertTestCase(testCase);    } else     if (eventType == XmlPullParser.END_TAG && parser.getName().equals(TAG)) {      return;    }    eventType=parser.next();  }}  }
class C{  void runWith(Closure c) throws Exception {  c.setDelegate(this);  c.setResolveStrategy(DELEGATE_FIRST);  c.call(this);  assign();}  }
class C{  public Vector2 floor(){  x=(float)Math.floor(x);  z=(float)Math.floor(z);  return this;}  }
class C{  @Override public ValueLobDb copyToTemp(){  return this;}  }
class C{  public FunctionNode(final View view,final INaviFunctionNode node,final Function function,final TagManager tagManager){  super(view,node,tagManager);  m_function=Preconditions.checkNotNull(function,"Error: Function argument can not be null");  m_node=node;}  }
class C{  public int[] findRowIndices(String value,String columnName){  return findRowIndices(value,getColumnIndex(columnName));}  }
class C{  private int intToSignedBits(int i,int size){  if (i < 0) {    i=(1 << size - 1) + (i & ((1 << size - 1) - 1));  }  return i;}  }
class C{  public static double abs(double x){  return Double.longBitsToDouble(MASK_NON_SIGN_LONG & Double.doubleToRawLongBits(x));}  }
class C{  private void createRecordHolderQueue(File[] listFiles){  this.recordHolderHeap=new PriorityQueue<SortTempFileChunkHolder>(listFiles.length);}  }
class C{  public DelegatingSetterDeclaration createDelegatingSetterDeclaration(){  DelegatingSetterDeclarationImpl delegatingSetterDeclaration=new DelegatingSetterDeclarationImpl();  return delegatingSetterDeclaration;}  }
class C{  public boolean isIgnoreLinearDependent(){  return ignoreLinearDependent;}  }
class C{  public RangeCondition includeUpper(Boolean includeUpper){  this.includeUpper=includeUpper;  return this;}  }
class C{  protected Node copyInto(Node n){  super.copyInto(n);  SVGOMElement e=(SVGOMElement)n;  e.prefix=prefix;  e.initializeAllLiveAttributes();  return n;}  }
class C{  @Override public void notifyDataSetChanged(){  super.notifyDataSetChanged();  mDataSetObservableExtended.notifyChanged();}  }
class C{  public File gunzip(final File inputFile,final File outputFile){  LOGGER.info(String.format("Ungzipping %s to dir %s.",inputFile.getAbsolutePath(),outputFile.getAbsolutePath()));  try (GZIPInputStream in=new GZIPInputStream(new FileInputStream(inputFile));FileOutputStream out=new FileOutputStream(outputFile)){    IOUtils.copy(in,out);    return outputFile;  } catch (  IOException e) {    throw new ArchiveException("Unable to gunzip file",e);  }}  }
class C{  public boolean addPermission(java.security.acl.Permission perm){  if (permList.contains(perm))   return false;  permList.addElement(perm);  return true;}  }
class C{  public void goToDetailScreen(Object sender){  navigationManager.navigate(sender).to(CounterDetailController.class);}  }
class C{  public void fixedAspectResizeInner(RectF newInner){  Matrix m=getRotMatrix();  Matrix m0=getInverseRotMatrix();  float aspectW=inner.width();  float aspectH=inner.height();  float aspRatio=aspectW / aspectH;  float[] corners=CropMath.getCornersFromRect(outer);  m.mapPoints(corners);  float[] oldInnerCorners=CropMath.getCornersFromRect(inner);  float[] newInnerCorners=CropMath.getCornersFromRect(newInner);  int fixed=-1;  if (inner.top == newInner.top) {    if (inner.left == newInner.left)     fixed=0; else     if (inner.right == newInner.right)     fixed=2;  } else   if (inner.bottom == newInner.bottom) {    if (inner.right == newInner.right)     fixed=4; else     if (inner.left == newInner.left)     fixed=6;  }  if (fixed == -1)   return;  float widthSoFar=newInner.width();  int moved=-1;  for (int i=0; i < newInnerCorners.length; i+=2) {    float[] c={newInnerCorners[i],newInnerCorners[i + 1]};    float[] c0=Arrays.copyOf(c,2);    m0.mapPoints(c0);    if (!CropMath.inclusiveContains(outer,c0[0],c0[1])) {      moved=i;      if (moved == fixed)       continue;      float[] l2=CropMath.closestSide(c,corners);      float[] l1={newInnerCorners[i],newInnerCorners[i + 1],oldInnerCorners[i],oldInnerCorners[i + 1]};      float[] p=GeometryMathUtils.lineIntersect(l1,l2);      if (p == null) {        p=new float[2];        p[0]=oldInnerCorners[i];        p[1]=oldInnerCorners[i + 1];      }      float fixed_x=oldInnerCorners[fixed];      float fixed_y=oldInnerCorners[fixed + 1];      float newWidth=Math.abs(fixed_x - p[0]);      float newHeight=Math.abs(fixed_y - p[1]);      newWidth=Math.max(newWidth,aspRatio * newHeight);      if (newWidth < widthSoFar)       widthSoFar=newWidth;    }  }  float heightSoFar=widthSoFar / aspRatio;  RectF ret=new RectF(inner);  if (fixed == 0) {    ret.right=ret.left + widthSoFar;    ret.bottom=ret.top + heightSoFar;  } else   if (fixed == 2) {    ret.left=ret.right - widthSoFar;    ret.bottom=ret.top + heightSoFar;  } else   if (fixed == 4) {    ret.left=ret.right - widthSoFar;    ret.top=ret.bottom - heightSoFar;  } else   if (fixed == 6) {    ret.right=ret.left + widthSoFar;    ret.top=ret.bottom - heightSoFar;  }  float[] retCorners=CropMath.getCornersFromRect(ret);  m0.mapPoints(retCorners);  innerRotated=retCorners;  reconstrain();}  }
class C{  public static FileInputStream newQueryInputStream(String queryDir,String fileName) throws Exception {  return new FileInputStream(queryDir + fileName);}  }
class C{  void incCount(){  this.count++;}  }
class C{  public boolean hasPendingData(){  return isInitialized() && bytesToFrames(submittedBytes) > audioTrackUtil.getPlaybackHeadPosition();}  }
class C{  public void merge(Types types,Overload subOverload){  for (  JCMethodDecl m : methods) {    if (m.getModifiers().getFlags().contains(Modifier.DEFAULT)) {      boolean overriden=false;      for (      JCMethodDecl subm : new ArrayList<>(subOverload.methods)) {        if (subm.getParameters().size() == m.getParameters().size()) {          overriden=true;          for (int i=0; i < subm.getParameters().size(); i++) {            if (!types.isAssignable(m.getParameters().get(i).type,subm.getParameters().get(i).type)) {              overriden=false;            }          }        }      }      if (!overriden) {        safeAdd(types,subOverload,m);      }    }  }  boolean merge=false;  for (  JCMethodDecl subm : new ArrayList<>(subOverload.methods)) {    boolean overrides=false;    for (    JCMethodDecl m : new ArrayList<>(methods)) {      if (subm.getParameters().size() == m.getParameters().size()) {        overrides=true;        for (int i=0; i < subm.getParameters().size(); i++) {          if (!types.isAssignable(m.getParameters().get(i).type,subm.getParameters().get(i).type)) {            overrides=false;          }        }      }    }    if (!overrides) {      merge=true;      safeAdd(types,this,subm);    }  }  merge=merge || methods.size() > 1;  if (merge) {    for (    JCMethodDecl m : methods) {      safeAdd(types,subOverload,m);    }  }}  }
class C{  public Message<E> preEvent(Message<E> message,StateMachine<S,E> stateMachine){  for (  StateMachineInterceptor<S,E> interceptor : interceptors) {    if ((message=interceptor.preEvent(message,stateMachine)) == null) {      break;    }  }  return message;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case FunctionblockPackage.REF_PARAM__TYPE:    setType((Type)null);  return;}super.eUnset(featureID);}  }
class C{  public T caseEvent(Event object){  return null;}  }
class C{  private void onAddEditTextToDialogView(View dialogView,EditText editText){  ViewGroup container=(ViewGroup)dialogView.findViewById(R.id.edittext_container);  if (container != null) {    container.addView(editText,ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT);  }}  }
class C{  private void addVcenterAclIfTenantAdmin(TenantOrg tenant,Vcenter vcenter){  vcenter.setTenant(NullColumnValueGetter.getNullURI());  URI tenantId;  if (tenant != null) {    tenantId=tenant.getId();  } else {    tenantId=URI.create(getUserFromContext().getTenantId());  }  if (_permissionsHelper.userHasGivenRole(getUserFromContext(),tenantId,Role.TENANT_ADMIN)) {    String aclKey=_permissionsHelper.getTenantUsePermissionKey(tenantId.toString());    vcenter.addAcl(aclKey,ACL.USE.name());    _log.debug("Adding {} to the vCenter {} acls",aclKey,vcenter.getLabel());  }}  }
class C{  void constructNode(String nodeName,String prefix,String nodeNamespace,TransformerImpl transformer) throws TransformerException {  boolean shouldAddAttrs;  try {    SerializationHandler rhandler=transformer.getResultTreeHandler();    if (null == nodeName) {      shouldAddAttrs=false;    } else {      if (null != prefix) {        rhandler.startPrefixMapping(prefix,nodeNamespace,true);      }      rhandler.startElement(nodeNamespace,QName.getLocalPart(nodeName),nodeName);      super.execute(transformer);      shouldAddAttrs=true;    }    transformer.executeChildTemplates(this,shouldAddAttrs);    if (null != nodeName) {      rhandler.endElement(nodeNamespace,QName.getLocalPart(nodeName),nodeName);      if (null != prefix) {        rhandler.endPrefixMapping(prefix);      }    }  } catch (  SAXException se) {    throw new TransformerException(se);  }}  }
class C{  public static int utf2chars(byte[] src,int sindex,char[] dst,int dindex,int len){  int i=sindex;  int j=dindex;  int limit=sindex + len;  while (i < limit) {    int b=src[i++] & 0xFF;    if (b >= 0xE0) {      b=(b & 0x0F) << 12;      b=b | (src[i++] & 0x3F) << 6;      b=b | (src[i++] & 0x3F);    } else     if (b >= 0xC0) {      b=(b & 0x1F) << 6;      b=b | (src[i++] & 0x3F);    }    dst[j++]=(char)b;  }  return j;}  }
class C{  public FieldDeclaration declarationOf(FieldBinding fieldBinding){  if (fieldBinding != null && this.fields != null) {    for (int i=0, max=this.fields.length; i < max; i++) {      FieldDeclaration fieldDecl;      if ((fieldDecl=this.fields[i]).binding == fieldBinding)       return fieldDecl;    }  }  return null;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public mxGraphLayout(mxGraph graph){  this.graph=graph;}  }
class C{  public FDModel loadModel(URI uri,URI root){  ModelPersistenceHandler persistenceHandler=createModelPersistenceHandler(resourceSetProvider.get());  return (FDModel)persistenceHandler.loadModel(uri,root);}  }
class C{  public void visitTypeVariable(String name){}  }
class C{  protected ActionMap createActionMap(){  ActionMap map=(ActionMap)UIManager.get("ScrollPane.actionMap");  map.put("edit",mxGraphActions.getEditAction());  map.put("delete",mxGraphActions.getDeleteAction());  map.put("home",mxGraphActions.getHomeAction());  map.put("enterGroup",mxGraphActions.getEnterGroupAction());  map.put("exitGroup",mxGraphActions.getExitGroupAction());  map.put("collapse",mxGraphActions.getCollapseAction());  map.put("expand",mxGraphActions.getExpandAction());  map.put("toBack",mxGraphActions.getToBackAction());  map.put("toFront",mxGraphActions.getToFrontAction());  map.put("selectNone",mxGraphActions.getSelectNoneAction());  map.put("selectAll",mxGraphActions.getSelectAllAction());  map.put("selectNext",mxGraphActions.getSelectNextAction());  map.put("selectPrevious",mxGraphActions.getSelectPreviousAction());  map.put("selectParent",mxGraphActions.getSelectParentAction());  map.put("selectChild",mxGraphActions.getSelectChildAction());  map.put("cut",TransferHandler.getCutAction());  map.put("copy",TransferHandler.getCopyAction());  map.put("paste",TransferHandler.getPasteAction());  map.put("group",mxGraphActions.getGroupAction());  map.put("ungroup",mxGraphActions.getUngroupAction());  map.put("zoomIn",mxGraphActions.getZoomInAction());  map.put("zoomOut",mxGraphActions.getZoomOutAction());  return map;}  }
class C{  @ObjectiveCName("changeNotificationsEnabledWithPeer:withValue:") public void changeNotificationsEnabled(Peer peer,boolean val){  modules.getSettingsModule().changeNotificationsEnabled(peer,val);}  }
class C{  public static void registerElementById(Element element,Attr id){  element.setIdAttributeNode(id,true);}  }
class C{  public void paintLineHighlights(Graphics g){  int count=lineHighlights == null ? 0 : lineHighlights.size();  if (count > 0) {    int docLen=textArea.getDocument().getLength();    Rectangle vr=textArea.getVisibleRect();    int lineHeight=textArea.getLineHeight();    try {      for (int i=0; i < count; i++) {        LineHighlightInfo lhi=(LineHighlightInfo)lineHighlights.get(i);        int offs=lhi.getOffset();        if (offs >= 0 && offs <= docLen) {          int y=textArea.yForLineContaining(offs);          if (y > vr.y - lineHeight) {            if (y < vr.y + vr.height) {              g.setColor(lhi.getColor());              g.fillRect(0,y,textArea.getWidth(),lineHeight);            } else {              break;            }          }        }      }    } catch (    BadLocationException ble) {      ble.printStackTrace();    }  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4mfPackage.PROJECT_REFERENCE__PROJECT:    return project != null;}return super.eIsSet(featureID);}  }
class C{  private void handleJsonSearchNotes(RequestAndResponse requestAndResponse) throws IOException, ServletException {  requestAndResponse.setResponseContentTypeJson();  String query=requestAndResponse.getParameter("q");  if (query == null) {    query="";  }  query=query.trim();  if (!isUserSignedIn(requestAndResponse)) {    returnJson400(requestAndResponse,servletText.errorRequiresSignIn(allowSaveIfNotSignedIn));  } else   if (isUsersAccountClosed(requestAndResponse)) {    returnJson400(requestAndResponse,servletText.errorAccountIsClosed());  } else {    try {      final StringBuilder result=new StringBuilder();      final User user=dbLogic.getUserById(getEffectiveUserId(requestAndResponse));      if (user != null) {        final ResultsPaginator paginator=new ResultsPaginator(requestAndResponse,null,result,null);        result.append("{ \"results\": [");        if (user != null) {          boolean first=true;          final List<?> results=dbLogic.searchEntriesForUserByNote(user.getId(),query,paginator.getStartPosition(),paginator.getMaxResults());          for (          final Object entryUncasted : results) {            final Entry entry=(Entry)entryUncasted;            final int resultNumber=paginator.next();            if (resultNumber == -1) {              continue;            } else             if (resultNumber == 0) {              break;            }            if (!first) {              result.append(",");              first=false;            }            result.append("\n");            result.append("{ \"id\":\"");            result.append(entry.getId());            result.append("\", \"note\":\"");            result.append(StringEscapeUtils.escapeJson(entry.getNoteOrTitle("")));            result.append("\", \"quotation\":\"");            result.append(StringEscapeUtils.escapeJson(entry.getQuotation("")));            result.append("\"}");          }        }        result.append("\n],\n\"more\": " + (paginator.hasMore() ? "true" : "false") + " }\n");      }      dbLogic.commit();      requestAndResponse.print(result.toString());    } catch (    EmptyQueryException e) {      returnJson400(requestAndResponse,servletText.errorNeedLongerQuery());    }catch (    final PersistenceException e) {      logger.log(Level.INFO,"Exception",e);      returnJson500(requestAndResponse,servletText.errorInternalDatabase());    }  }}  }
class C{  public String convertMemberAccessModifierToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  public Analyzer showIndividualValues(){  showIndividualValues=true;  return this;}  }
class C{  public static String generateDate(String format,long timestamp){  Calendar cal=Calendar.getInstance(Locale.getDefault());  cal.setTimeInMillis(timestamp);  String date=DateFormat.format(format,cal).toString();  return date;}  }
class C{  void checkStartCode(){  if (!startCode) {    throw new IllegalStateException("Cannot visit instructions before visitCode has been called.");  }}  }
class C{  @Override public void onAllCategoriesSelected(){  Intent intent=new Intent(getContext(),ChallengeActivity.class);  intent.putExtra(ChallengeActivity.EXTRA_CATEGORY_ID,CategoryDataSource.CATEGORY_ID_ALL);  startActivity(intent);}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="DM_DEFAULT_ENCODING",justification="Can only be called from the same instance so default encoding OK") private void redirectSystemStreams(){  System.setOut(this.getOutputStream());  System.setErr(this.getErrorStream());}  }
class C{  private void selectPhoto(){  Intent photoPickerIntent=new Intent(Intent.ACTION_PICK);  photoPickerIntent.setType("image/*");  startActivityForResult(photoPickerIntent,SELECT_PHOTO_INTENT);}  }
class C{  public DistributionLocatorId(InetAddress host,int port,String bindAddress,SSLConfig sslConfig){  this.host=host;  this.port=port;  this.bindAddress=validateBindAddress(bindAddress);  this.sslConfig=validateSSLConfig(sslConfig);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrappendchild1.class,args);}  }
class C{  @DSComment("Utility function") @DSSafe(DSCat.UTIL_FUNCTION) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:02.059 -0500",hash_original_method="C5EE9D72EF131FEA950520687E6D432D",hash_generated_method="4D141F4B433F72F4C5A0AF9C4C4E06BB") public static boolean isPresent(){  IBinder b=ServiceManager.getService(Context.LOCATION_SERVICE);  ILocationManager lm=ILocationManager.Stub.asInterface(b);  try {    return lm.geocoderIsPresent();  } catch (  RemoteException e) {    Log.e(TAG,"isPresent: got RemoteException",e);    return false;  }}  }
class C{  public void receiveCancel(SipRequest cancel) throws NetworkException, PayloadException {  super.receiveCancel(cancel);  requestContactCapabilities(getDialogPath().getRemoteParty());}  }
class C{  public SQLIntegrityConstraintViolationException(String reason,String sqlState,int vendorCode,Throwable cause){  super(reason,sqlState,vendorCode,cause);}  }
class C{  public double nextDouble(){  double rand=randomGenerator.nextDouble();  if (this.cdf == null)   return rand;  int nBins=cdf.length - 1;  int nbelow=0;  int nabove=nBins;  while (nabove > nbelow + 1) {    int middle=(nabove + nbelow + 1) >> 1;    if (rand >= cdf[middle])     nbelow=middle; else     nabove=middle;  }  if (this.interpolationType == NO_INTERPOLATION) {    return ((double)nbelow) / nBins;  } else   if (this.interpolationType == LINEAR_INTERPOLATION) {    double binMeasure=cdf[nabove] - cdf[nbelow];    if (binMeasure == 0.0) {      return (nbelow + 0.5) / nBins;    }    double binFraction=(rand - cdf[nbelow]) / binMeasure;    return (nbelow + binFraction) / nBins;  } else   throw new InternalError();}  }
class C{  public Blacklists createBlacklists(){  return mAdapter.create(Blacklists.class);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  @Override protected void createLabels(){  Iterable<Double> radii=this.getRadii();  if (radii == null)   return;  Iterator<String> altitudes=this.getAltitudes().iterator();  Iterator<? extends Angle> azimuths=this.getAzimuths().iterator();  Angle leftAzimuth=null;  Angle rightAzimuth=null;  for (  Double radius : radii) {    if (azimuths.hasNext())     leftAzimuth=azimuths.next();    if (azimuths.hasNext())     rightAzimuth=azimuths.next();    String alt=null;    if (altitudes.hasNext())     alt=altitudes.next();    this.addLabel(this.createRangeLabelString(radius,alt));    if (leftAzimuth != null)     this.addLabel(this.createAzimuthLabelString(leftAzimuth));    if (rightAzimuth != null)     this.addLabel(this.createAzimuthLabelString(rightAzimuth));  }}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (success && MEASURETYPE_Manual.equals(getMeasureType()))   updateManualGoals();  return success;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  int progress=0;  int a;  int filterSize=3;  double n;  double sum;  int dX[];  int dY[];  int midPoint;  int numPixelsInFilter;  double[] filterShape;  boolean reflectAtBorders=true;  double centreValue=0;  double neighbourhoodDist=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  neighbourhoodDist=Double.parseDouble(args[2]);  if (inputHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    DEM.isReflectedAtEdges=reflectAtBorders;    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("grey.pal");    filterSize=(int)(neighbourhoodDist / ((DEM.getCellSizeX() + DEM.getCellSizeY()) / 2));    if (Math.floor(filterSize / 2d) == (filterSize / 2d)) {      filterSize++;    }    numPixelsInFilter=filterSize * filterSize;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPoint=(int)Math.floor(filterSize / 2);    double aSqr=midPoint * midPoint;    double bSqr=midPoint * midPoint;    a=0;    for (row=0; row < filterSize; row++) {      for (col=0; col < filterSize; col++) {        dX[a]=col - midPoint;        dY[a]=row - midPoint;        z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;        if (z > 1) {          filterShape[a]=0;        } else {          filterShape[a]=1;        }        a++;      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        centreValue=DEM.getValue(row,col);        if (centreValue != noData) {          n=0;          sum=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            if ((x != midPoint) && (y != midPoint)) {              z=DEM.getValue(y,x);              if (z != noData) {                n+=filterShape[a];                sum+=z * filterShape[a];              }            }          }          z=centreValue - sum / n;          output.setValue(row,col,z);        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public SFS(int minFeatures,int maxFeatures,Classifier evaluater,double maxIncrease){  this(minFeatures,maxFeatures,evaluater.clone(),3,maxIncrease);}  }
class C{  public ServerSocket createServerSocket(int port) throws IOException {  return new ServerSocket(port,0,bindAddress);}  }
class C{  public boolean removePoint(ReadonlyVec3D p){  return points.remove(p);}  }
class C{  public void addCredentials(HomeserverConnectionConfig config){  if (null != config && config.getCredentials() != null) {    SharedPreferences prefs=mContext.getSharedPreferences(PREFS_LOGIN,Context.MODE_PRIVATE);    SharedPreferences.Editor editor=prefs.edit();    ArrayList<HomeserverConnectionConfig> configs=getCredentialsList();    configs.add(config);    ArrayList<JSONObject> serialized=new ArrayList<JSONObject>(configs.size());    try {      for (      HomeserverConnectionConfig c : configs) {        serialized.add(c.toJson());      }    } catch (    JSONException e) {      throw new RuntimeException("Failed to serialize connection config");    }    String ser=new JSONArray(serialized).toString();    Log.d(LOG_TAG,"Storing " + serialized.size() + " credentials");    editor.putString(PREFS_KEY_CONNECTION_CONFIGS,ser);    editor.commit();  }}  }
class C{  void removeMapping(RegionEntry entry,int opCode){  throw new RuntimeException(LocalizedStrings.PartitionedIndex_NOT_SUPPORTED_ON_PARTITIONED_INDEX.toLocalizedString());}  }
class C{  public static void deleteFilesInDirectory(final File directory,final FilenameFilter filter,final Logger logger,final boolean recurse,final boolean deleteEmptyDirectories) throws IOException {  if (null != directory && directory.isDirectory()) {    final File ingestFiles[]=directory.listFiles();    if (ingestFiles == null) {      throw new IOException("Unable to list directory content in: " + directory.getAbsolutePath());    }    for (    File ingestFile : ingestFiles) {      boolean process=(filter == null) ? true : filter.accept(directory,ingestFile.getName());      if (ingestFile.isFile() && process) {        FileUtils.deleteFile(ingestFile,logger,3);      }      if (ingestFile.isDirectory() && recurse) {        FileUtils.deleteFilesInDirectory(ingestFile,filter,logger,recurse,deleteEmptyDirectories);        if (deleteEmptyDirectories && ingestFile.list().length == 0) {          FileUtils.deleteFile(ingestFile,logger,3);        }      }    }  }}  }
class C{  public static <K,V>MutableMap<K,V> selectMapOnKey(Map<K,V> map,Predicate<? super K> predicate){  MutableMap<K,V> resultMap=UnifiedMap.newMap();  Procedure2<K,V> mapTransferProcedure=new MapPutProcedure<>(resultMap);  Procedure2<K,V> procedure=null;  MapIterate.forEachKeyValue(map,procedure);  return resultMap;}  }
class C{  private static void exportCoordinates(Map<String,Id<Link>> idMap,Network network){  FileWriter writer;  File file=new File(workingDirInputFiles + "CSLinkCoordinates.csv");  File file2=new File(workingDirInputFiles + "CSLinkCoordinates.txt");  try {    writer=new FileWriter(file);    writer.write("CS-Id;FromX;FromY;ToX;ToY" + System.getProperty("line.separator"));    writer.flush();    writer.close();  } catch (  IOException e) {    e.printStackTrace();  }  try {    writer=new FileWriter(file2);    writer.write("Generated code for creation of map (CSId2LinkId) by coordinates " + System.getProperty("line.separator"));    writer.flush();    writer.close();  } catch (  IOException e) {    e.printStackTrace();  }  for (  String csId : idMap.keySet()) {    double fromX=network.getLinks().get(idMap.get(csId)).getFromNode().getCoord().getX();    double fromY=network.getLinks().get(idMap.get(csId)).getFromNode().getCoord().getY();    double toX=network.getLinks().get(idMap.get(csId)).getToNode().getCoord().getX();    double toY=network.getLinks().get(idMap.get(csId)).getToNode().getCoord().getY();    System.out.println(csId + ": FromX: " + fromX+ ": FromY: "+ fromY+ " ; toX: "+ toX+ " ; toY: "+ toY);    try {      writer=new FileWriter(file,true);      writer.write(csId + ";" + fromX+ ";"+ fromY+ ";"+ toX+ ";"+ toY+ System.getProperty("line.separator"));      writer.flush();      writer.close();    } catch (    IOException e) {      e.printStackTrace();    }    try {      writer=new FileWriter(file2,true);      writer.write("csIdString2LinkCoordinates.put(\"" + csId + "\", new ArrayList<Double>(Arrays.asList("+ fromX+ ", "+ fromY+ ", "+ toX+ ", "+ toY+ ")));"+ System.getProperty("line.separator"));      writer.flush();      writer.close();    } catch (    IOException e) {      e.printStackTrace();    }  }}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  private void checkMapKeysToNodes(Affinity testAff,Affinity aff){  List<Integer> keys=new ArrayList<>(10000);  for (int i=0; i < 10000; ++i)   keys.add(i);  checkEqualMaps(testAff.mapKeysToNodes(keys),aff.mapKeysToNodes(keys));}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case GamlPackage.IMPORT__IMPORT_URI:    setImportURI(IMPORT_URI_EDEFAULT);  return;}super.eUnset(featureID);}  }
class C{  public StringBuilder computeIndentation(int offset,boolean assumeOpening){  indent=1;  StringBuilder indent=createIndent(this.indent);  if (this.indent < 0) {    unindent(indent);  }  if (indent == null) {    return null;  }  indent.append(getReferenceIndentation(offset));  return indent;}  }
class C{  public void mockUserSignedIn(){  Mockito.when(AuthUtils.isSignedIn()).thenReturn(true);  Mockito.when(AuthUtils.getUserId()).thenReturn("user_id");}  }
class C{  void checkCompilationOK(int rc){  if (rc != 0)   error("compilation failed, rc: " + rc);}  }
class C{  public static int toIPv4Address(byte[] ipAddress){  int ip=0;  for (int i=0; i < 4; i++) {    int t=(ipAddress[i] & 0xff) << ((3 - i) * 8);    ip|=t;  }  return ip;}  }
class C{  public void cleanup(){  if (activated) {    Bukkit.getScheduler().cancelTask(task);    close();  }  task=-1;  activated=false;}  }
class C{  public void updateEnd(Logger log){  m_instanceCount++;  m_sampleCount++;  double end=System.currentTimeMillis();  double temp=end - m_updateStart;  m_cumulativeTime+=temp;  boolean toFastToMeasure=false;  if ((end - m_startTime) >= m_sampleTime) {    computeUpdate(end);    if (log != null) {      log.statusMessage(m_statusMessagePrefix + "Processed " + m_instanceCount+ " insts @ "+ m_avInstsPerSec / m_numSamples + " insts/sec" + (toFastToMeasure ? "*" : ""));    }    m_sampleCount=0;    m_cumulativeTime=0;    m_startTime=System.currentTimeMillis();  }}  }
class C{  public void ensureVisible(int[] c){  TestUtils.ensureVisible(c);}  }
class C{  public JBBPFieldStruct parse(final InputStream in,final JBBPVarFieldProcessor varFieldProcessor,final JBBPExternalValueProvider externalValueProvider) throws IOException {  final JBBPBitInputStream bitInStream=in instanceof JBBPBitInputStream ? (JBBPBitInputStream)in : new JBBPBitInputStream(in,bitOrder);  this.finalStreamByteCounter=bitInStream.getCounter();  final JBBPNamedNumericFieldMap fieldMap;  if (this.compiledBlock.hasEvaluatedSizeArrays() || this.compiledBlock.hasVarFields()) {    fieldMap=new JBBPNamedNumericFieldMap(externalValueProvider);  } else {    fieldMap=null;  }  if (this.compiledBlock.hasVarFields()) {    JBBPUtils.assertNotNull(varFieldProcessor,"The Script contains VAR fields, a var field processor must be provided");  }  try {    return new JBBPFieldStruct(new JBBPNamedFieldInfo("","",-1),parseStruct(bitInStream,new JBBPIntCounter(),varFieldProcessor,fieldMap,new JBBPIntCounter(),new JBBPIntCounter(),false));  }  finally {    this.finalStreamByteCounter=bitInStream.getCounter();  }}  }
class C{  @Override public String describe(){  return ("You see a pool of blood.");}  }
class C{  protected Object evaluateLeftContainsRight(StructuredContent element,String lvalue,String rvalue){  return null;}  }
class C{  @Nullable private byte[] marshal(final Object obj) throws IOException {  if (marshaller != null) {    try {      return marshaller.marshal(obj);    } catch (    IgniteCheckedException e) {      throw new IOException(e);    }  }  return null;}  }
class C{  protected String paramString(){  String orientationString=(orientation == HORIZONTAL_SPLIT ? "HORIZONTAL_SPLIT" : "VERTICAL_SPLIT");  String continuousLayoutString=(continuousLayout ? "true" : "false");  String oneTouchExpandableString=(oneTouchExpandable ? "true" : "false");  return super.paramString() + ",continuousLayout=" + continuousLayoutString+ ",dividerSize="+ dividerSize+ ",lastDividerLocation="+ lastDividerLocation+ ",oneTouchExpandable="+ oneTouchExpandableString+ ",orientation="+ orientationString;}  }
class C{  public void forEach(Allocation aout){  forEach(0,null,aout,null);}  }
class C{  public void execute(){  mIsExecuting=true;  stageVersionCheck();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:48.039 -0500",hash_original_method="A423B7B4A530981615672A2507B78318",hash_generated_method="5F183A883A40B4B48DDCB6212970033D") public RequestLine parseRequestLine(final CharArrayBuffer buffer,final ParserCursor cursor) throws ParseException {  if (buffer == null) {    throw new IllegalArgumentException("Char array buffer may not be null");  }  if (cursor == null) {    throw new IllegalArgumentException("Parser cursor may not be null");  }  int indexFrom=cursor.getPos();  int indexTo=cursor.getUpperBound();  try {    skipWhitespace(buffer,cursor);    int i=cursor.getPos();    int blank=buffer.indexOf(' ',i,indexTo);    if (blank < 0) {      throw new ParseException("Invalid request line: " + buffer.substring(indexFrom,indexTo));    }    String method=buffer.substringTrimmed(i,blank);    cursor.updatePos(blank);    skipWhitespace(buffer,cursor);    i=cursor.getPos();    blank=buffer.indexOf(' ',i,indexTo);    if (blank < 0) {      throw new ParseException("Invalid request line: " + buffer.substring(indexFrom,indexTo));    }    String uri=buffer.substringTrimmed(i,blank);    cursor.updatePos(blank);    ProtocolVersion ver=parseProtocolVersion(buffer,cursor);    skipWhitespace(buffer,cursor);    if (!cursor.atEnd()) {      throw new ParseException("Invalid request line: " + buffer.substring(indexFrom,indexTo));    }    return createRequestLine(method,uri,ver);  } catch (  IndexOutOfBoundsException e) {    throw new ParseException("Invalid request line: " + buffer.substring(indexFrom,indexTo));  }}  }
class C{  protected void testScaleWithR(SIZE sz,RANGE rng,SPARSITY sp,RUNTIME_PLATFORM rt){  RUNTIME_PLATFORM oldrt=rtplatform;  rtplatform=rt;  try {    TestConfiguration config=getTestConfiguration("Scale");    config.addVariable("rows1",sz.size);    config.addVariable("rows2",rows2);    loadTestConfiguration(config);    String S_HOME=SCRIPT_DIR + TEST_DIR;    fullDMLScriptName=S_HOME + "Scale" + ".dml";    programArgs=new String[]{"-args",input("vector"),Integer.toString(sz.size),input("prob"),Integer.toString(rows2),output("mean"),output("std"),output("se"),output("var"),output("cv"),output("min"),output("max"),output("rng"),output("g1"),output("se_g1"),output("g2"),output("se_g2"),output("median"),output("iqm"),output("out_minus"),output("out_plus"),output("quantile")};    fullRScriptName=S_HOME + "Scale" + ".R";    rCmd="Rscript" + " " + fullRScriptName + " "+ inputDir()+ " "+ expectedDir();    double[][] vector=getRandomMatrix(sz.size,1,rng.min,rng.max,sp.sparsity,20160124165501L);    double[][] prob=getRandomMatrix(rows2,1,0,1,1,20160124165502L);    writeInputMatrix("vector",vector,true);    writeInputMatrix("prob",prob,true);    runTest(true,false,null,-1);    runRScript(true);    for (    String file : config.getOutputFiles()) {      HashMap<CellIndex,Double> dmlfile;      HashMap<CellIndex,Double> rfile;      if (file.endsWith(".scalar")) {        file=file.replace(".scalar","");        dmlfile=readDMLScalarFromHDFS(file);        rfile=readRScalarFromFS(file);      } else {        dmlfile=readDMLMatrixFromHDFS(file);        rfile=readRMatrixFromFS(file);      }      TestUtils.compareMatrices(dmlfile,rfile,epsilon,file + "-DML",file + "-R");    }  }  finally {    rtplatform=oldrt;  }}  }
class C{  public StoryObject(){  super();}  }
class C{  @Override public synchronized void close() throws IOException {  buffer=null;  isClosed=true;  notifyAll();}  }
class C{  public static void removeLocalBundle(String name,Version version,boolean removePhysical,boolean doubleTap) throws BundleException {  name=name.trim();  CFMLEngine engine=CFMLEngineFactory.getInstance();  CFMLEngineFactory factory=engine.getCFMLEngineFactory();  BundleFile bf=_getBundleFile(factory,name,version,null);  if (bf != null) {    BundleDefinition bd=bf.toBundleDefinition();    if (bd != null) {      Bundle b=bd.getLocalBundle();      if (b != null) {        stopIfNecessary(b);        b.uninstall();      }    }  }  if (!removePhysical)   return;  if (bf != null) {    if (!bf.getFile().delete() && doubleTap)     bf.getFile().deleteOnExit();  }}  }
class C{  public void addThreeForTeamA(View v){  scoreTeamA=scoreTeamA + 3;  displayForTeamA(scoreTeamA);}  }
class C{  public boolean isInProgress(){  return inProgress;}  }
class C{  private void saveVisibleInstances(){  ArrayList<PlotData2D> plots=m_plot.m_plot2D.getPlots();  if (plots != null) {    PlotData2D master=plots.get(0);    Instances saveInsts=new Instances(master.getPlotInstances());    for (int i=1; i < plots.size(); i++) {      PlotData2D temp=plots.get(i);      Instances addInsts=temp.getPlotInstances();      for (int j=0; j < addInsts.numInstances(); j++) {        saveInsts.add(addInsts.instance(j));      }    }    try {      int returnVal=m_FileChooser.showSaveDialog(this);      if (returnVal == JFileChooser.APPROVE_OPTION) {        File sFile=m_FileChooser.getSelectedFile();        if (!sFile.getName().toLowerCase().endsWith(Instances.FILE_EXTENSION)) {          sFile=new File(sFile.getParent(),sFile.getName() + Instances.FILE_EXTENSION);        }        File selected=sFile;        Writer w=new BufferedWriter(new FileWriter(selected));        w.write(saveInsts.toString());        w.close();      }    } catch (    Exception ex) {      ex.printStackTrace();    }  }}  }
class C{  private Map<String,Integer> initializeHeader() throws IOException {  Map<String,Integer> hdrMap=null;  final String[] formatHeader=this.format.getHeader();  if (formatHeader != null) {    hdrMap=new LinkedHashMap<String,Integer>();    String[] header=null;    if (formatHeader.length == 0) {      final CSVRecord nextRecord=this.nextRecord();      if (nextRecord != null) {        header=nextRecord.values();      }    } else {      if (this.format.getSkipHeaderRecord()) {        this.nextRecord();      }      header=formatHeader;    }    if (header != null) {      for (int i=0; i < header.length; i++) {        hdrMap.put(header[i],Integer.valueOf(i));      }    }  }  return hdrMap;}  }
class C{  public JSONArray put(int index,Collection<Object> value) throws JSONException {  this.put(index,new JSONArray(value));  return this;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static int convertLongToInt(long l){  if (l <= Integer.MIN_VALUE) {    return Integer.MIN_VALUE;  } else   if (l >= Integer.MAX_VALUE) {    return Integer.MAX_VALUE;  } else {    return (int)l;  }}  }
class C{  public void saveConfiguration(Configuration dertConfig){  File file=new File(dertConfig.getLandscapePath(),"dert");  file=new File(file,"config");  if (!file.exists())   file.mkdirs();  HashMap<String,Object> savedState=dertConfig.save();  try {    file=new File(file,dertConfig.label);    ObjectOutputStream oos=new ObjectOutputStream(new FileOutputStream(file));    oos.writeObject(savedState);    oos.flush();    oos.close();    addRecent(file.getAbsolutePath());  } catch (  Exception e) {    Console.getInstance().println("Error writing configuration.  See log.");    e.printStackTrace();  }  Console.getInstance().println("Saved configuration to " + dertConfig.label);}  }
class C{  public X509Certificate generateX509Certificate(PrivateKey key,String provider) throws NoSuchProviderException, SecurityException, SignatureException, InvalidKeyException {  return generateX509Certificate(key,provider,null);}  }
class C{  public void warn(String msg,Object args[]) throws org.xml.sax.SAXException {  String formattedMsg=XSLMessages.createWarning(msg,args);  SAXSourceLocator locator=getLocator();  ErrorListener handler=m_stylesheetProcessor.getErrorListener();  try {    if (null != handler)     handler.warning(new TransformerException(formattedMsg,locator));  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }}  }
class C{  protected void bufferInput(Instance instance){  if (instance != null) {    instance=(Instance)instance.copy();    copyValues(instance,true);    m_InputFormat.add(instance);  }}  }
class C{  public static void mixin(Class self,List<Class> categoryClasses){  mixin(getMetaClass(self),categoryClasses);}  }
class C{  public final Object car(){  return this.first.value;}  }
class C{  public MetadataEditorCompat putBitmap(int key,Bitmap bitmap){  if (sHasRemoteControlAPIs) {    try {      mPutBitmapMethod.invoke(mActualMetadataEditor,key,bitmap);    } catch (    Exception e) {      throw new RuntimeException(e.getMessage(),e);    }  }  return this;}  }
class C{  private static void displayUsage(){  String usageInstructions="USAGE:\n" + " -----------------------------------------------------------\n" + "  Basic command line usage:\n"+ "    ContactsExample [<options>] <authenticationInformation> "+ "<--contactfeed|--groupfeed> "+ "--action=<action> [<action options>]  "+ "(default contactfeed)\n"+ "  Scripting commands usage:\n"+ "    contactsExample [<options>] <authenticationInformation> "+ "<--contactfeed|--groupfeed>   --script=<script file>  "+ "(default contactFeed) \n"+ "  Print usage (this screen):\n"+ "   --help\n"+ " -----------------------------------------------------------\n\n"+ "  Options: \n"+ "    --base-url=<url to connect to> "+ "(default http://www.google.com/m8/feeds/) \n"+ "    --projection=[thin|full|property-KEY] "+ "(default thin)\n"+ "    --verbose : dumps communication information\n"+ "  Authentication Information (obligatory on command line): \n"+ "    --username=<username email> --password=<password>\n"+ "  Actions: \n"+ "     * list  list all contacts\n"+ "     * query  query contacts\n"+ "        options:\n"+ "             --showdeleted : shows also deleted contacts\n"+ "             --updated-min=YYYY-MM-DDTHH:MM:SS : only updated "+ "after the time specified\n"+ "             --requre-all-deleted=[true|false] : specifies "+ "server behaviour in case of placeholders for deleted entries are"+ "lost. Relevant only if --showdeleted and --updated-min also "+ "provided.\n"+ "             --orderby=lastmodified : order by last modified\n"+ "             --sortorder=[ascending|descending] : sort order\n"+ "             --max-results=<n> : return maximum n results\n"+ "             --start-index=<n> : return results starting from "+ "the starting index\n"+ "             --querygroupid=<groupid> : return results from the "+ "group\n"+ "    * add  add new contact\n"+ "        options:\n" + ElementHelper.getUsageString() + "    * delete  delete contact\n"+ "        options:\n"+ "             --id=<contact id>\n"+ "    * update  updates contact\n"+ "        options:\n"+ "             --id=<contact id>\n"+ ElementHelper.getUsageString();  System.err.println(usageInstructions);}  }
class C{  protected String byteArrayToHexString(byte[] bytes){  StringBuilder sb=new StringBuilder(bytes.length * 2);  for (  byte element : bytes) {    int v=element & 0xff;    if (v < 16) {      sb.append('0');    }    sb.append(Integer.toHexString(v));  }  return sb.toString().toUpperCase(Locale.US);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void writeBinary(final PacketOutputStream os) throws IOException {  if (length == Long.MAX_VALUE) {    os.sendStream(is);  } else {    os.sendStream(is,length);  }}  }
class C{  public Clash7Random(int seed){  for (int i=0; i < S.length; i++) {    S[i]=seed;    seed=1812433253 * ((seed ^ (seed >> 30)) + 1);  }}  }
class C{  public ListIterator<OMGeometry> listIteratorCopy(){  return new OMGeometryList(graphics).listIterator();}  }
class C{  public static void registerConfig(){  Config.registerSelf(WebSphereMQ.class);  npsurviverestart=Config.parms.getBoolean("js");  useUniqueQ=Config.parms.getBoolean("ju");  useOldJMS=Config.parms.getBoolean("jr");  ackCount=Config.parms.getInt("ja");  itx=Config.parms.getBoolean("jx");  autoCreateTopics=Config.parms.getBoolean("je");  sslCipherSuite=Config.parms.getString("jl");  providerVersion=Config.parms.getInt("jv");  receiveConversion=Config.parms.getString("jrc");}  }
class C{  public boolean isRemoveUnsupportedEncodings(){  return removeUnsupportedEncodings;}  }
class C{  public Builder converter(@NonNull Converter converter){  if (null == converter) {    throw new IllegalArgumentException("Converter must not be null.");  }  if (null != this.converter) {    throw new IllegalStateException("Converter already set.");  }  this.converter=converter;  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:35.854 -0500",hash_original_method="04C5A3803469FEAEE8E315143FC0F6BE",hash_generated_method="482341E6171E37182C148839FF0D7626") public final boolean hasDataAuthority(Uri data){  return matchDataAuthority(data) >= 0;}  }
class C{  ByteVector put11(final int b1,final int b2){  int length=this.length;  if (length + 2 > data.length) {    enlarge(2);  }  byte[] data=this.data;  data[length++]=(byte)b1;  data[length++]=(byte)b2;  this.length=length;  return this;}  }
class C{  public static List<Long> toLongList(@Nullable long[] arr){  if (arr == null || arr.length == 0)   return Collections.emptyList();  List<Long> ret=new ArrayList<>(arr.length);  for (  long l : arr)   ret.add(l);  return ret;}  }
class C{  public void next(){  if (!hasNext())   return;  vertexIndex++;  if (vertexIndex >= currentLine.getNumPoints()) {    componentIndex++;    loadCurrentLine();    vertexIndex=0;  }}  }
class C{  public Iterator<String> iterator(){  return toList().iterator();}  }
class C{  public static boolean isDigits(final String str){  if (StringUtils.isEmpty(str)) {    return false;  }  for (int i=0; i < str.length(); i++) {    if (!Character.isDigit(str.charAt(i))) {      return false;    }  }  return true;}  }
class C{  public PieSegment(int dataIndex,float value,float startAngle,float angle){  mStartAngle=startAngle;  mEndAngle=angle + startAngle;  mDataIndex=dataIndex;  mValue=value;}  }
class C{  public NumericTable(final double[][] data){  setData(data);}  }
class C{  public DiskAccessException(String msg,Throwable cause,String regionName){  super((regionName != null ? "For Region: " + regionName + ": " : "") + msg,cause);}  }
class C{  private void registerListener(final String requestUrl,final String target,String[] methods,Integer expireTime,String filter,Integer queueExpireTime,Map<String,String> staticHeaders,HookTriggerType type){  String body="{ \"destination\":\"" + target + "\"";  String m=null;  if (methods != null) {    for (    String method : methods) {      m+="\"" + method + "\", ";    }    m=m.endsWith(", ") ? m.substring(0,m.lastIndexOf(",")) : m;    m="\"methods\": [" + m + "]";  }  body+=expireTime != null ? ", \"" + HookHandler.EXPIRE_AFTER + "\" : "+ expireTime : "";  body+=queueExpireTime != null ? ", \"" + HookHandler.QUEUE_EXPIRE_AFTER + "\" : "+ queueExpireTime : "";  body+=filter != null ? ", \"filter\" : \"" + filter + "\"" : "";  body+=type != null ? ", \"type\" : \"" + type.text() + "\"" : "";  if (staticHeaders != null && staticHeaders.size() > 0) {    body=body + ", \"staticHeaders\" : {";    boolean notFirst=false;    for (    Map.Entry<String,String> entry : staticHeaders.entrySet()) {      body=body + (notFirst ? ", " : "") + "\""+ entry.getKey()+ "\" : \""+ entry.getValue()+ "\"";      if (!notFirst) {        notFirst=true;      }    }    body=body + "}";  }  body=body + "}";  with().body(body).put(requestUrl).then().assertThat().statusCode(200);}  }
class C{  public static void sort(byte[] a){  doSort(a,0,a.length - 1);}  }
class C{  protected Object extractAndConvertValue(ConsumerRecord<?,?> record,Type type){  return record.value() == null ? KafkaNull.INSTANCE : record.value();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void addPanelForContext(Context context,ContextPanelFactory contextPanelFactory,String[] panelPath){  AbstractContextPropertiesPanel panel=contextPanelFactory.getContextPanel(context);  panel.setSessionDialog(getSessionDialog());  getSessionDialog().addParamPanel(panelPath,panel,false);  this.contextPanels.add(panel);  List<AbstractContextPropertiesPanel> panels=contextPanelFactoriesPanels.get(contextPanelFactory);  if (panels == null) {    panels=new ArrayList<>();    contextPanelFactoriesPanels.put(contextPanelFactory,panels);  }  panels.add(panel);}  }
class C{  private void shutdownPrecaching(boolean tryAgainSoon){  mIsPrecaching=false;  releasePrecachingWakeLock();  PrecacheServiceLauncher.precachingFinished(getApplicationContext(),tryAgainSoon);  stopSelf();}  }
class C{  public static long round(double x){  return (long)floor(x + 0.5);}  }
class C{  private void reset(){  readDelay=0;  err=null;}  }
class C{  public UpdateInventoryOutput replyOk(){  UpdateInventoryOutput ok=new UpdateInventoryOutput();  ok.setCode("OK");  return ok;}  }
class C{  public static boolean isLetterOrNumber(int c){  return isLetter(c) || isNumber(c);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public samp addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public void updateModificationDate(){  try {    m_modificationDate=m_provider.getModificationDate(m_addressSpace);    for (    final IAddressSpaceConfigurationListener listener : m_listeners) {      try {        listener.changedModificationDate(m_addressSpace,m_modificationDate);      } catch (      final Exception exception) {        CUtilityFunctions.logException(exception);      }    }  } catch (  final CouldntLoadDataException e) {    CUtilityFunctions.logException(e);  }}  }
class C{  public void horizontalCarriagReturn(){  if (attributes.print == DTVCCDirection.LEFT_TO_RIGHT) {    penX=0;  } else   if (attributes.print == DTVCCDirection.RIGHT_TO_LEFT) {    penX=getCols();  } else   if (attributes.print == DTVCCDirection.TOP_TO_BOTTOM) {    penY=0;  } else   if (attributes.print == DTVCCDirection.BOTTOM_TO_TOP) {    penY=getRows();  }  if ((attributes.print == DTVCCDirection.TOP_TO_BOTTOM || attributes.print == DTVCCDirection.BOTTOM_TO_TOP) && (penX < getRows() && penX > -1)) {    dirty=true;    for (int i=0; i < getRows(); i++) {      buffer[i][penX]=0;      cellFormat[i][penX]=currentFormatFill;    }  } else   if ((attributes.print == DTVCCDirection.LEFT_TO_RIGHT || attributes.print == DTVCCDirection.RIGHT_TO_LEFT) && (penY < getCols() && penY > -1)) {    dirty=true;    for (int i=0; i < getCols(); i++) {      buffer[penY][i]=0;      cellFormat[penY][i]=currentFormatFill;    }  }  possiblyFlush();}  }
class C{  protected boolean isNextCharacterEscapable(String nextLine,boolean inQuotes,int i){  return inQuotes && nextLine.length() > (i + 1) && (nextLine.charAt(i + 1) == quotechar || nextLine.charAt(i + 1) == this.escape);}  }
class C{  protected void fireAttributeChanged(AttributeKey attribute,Object oldValue,Object newValue){  if (listenerList.getListenerCount() > 0 && (oldValue == null || newValue == null || !oldValue.equals(newValue))) {    FigureEvent event=null;    Object[] listeners=listenerList.getListenerList();    for (int i=listeners.length - 2; i >= 0; i-=2) {      if (listeners[i] == FigureListener.class) {        if (event == null) {          event=new FigureEvent(this,attribute,oldValue,newValue);        }        ((FigureListener)listeners[i + 1]).attributeChanged(event);      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:42.849 -0500",hash_original_method="969F39FFDE48B5771B1AAE0E71CBC46F",hash_generated_method="8893FE5FF37E5D9C026AE7EDC4F52572") public static long threadCpuTimeNanos(){  return VMDebug.threadCpuTimeNanos();}  }
class C{  public boolean removeEntry(Object o){  if (!(o instanceof Struct)) {    return false;  }  Struct s=(Struct)o;  if (!this.structType.equals(StructTypeImpl.typeFromStruct(s))) {    return false;  }  return removeFieldValues(s.getFieldValues());}  }
class C{  public static Annotations combine(Annotations annotations,Annotation annotation){  Annotations result=new Annotations();  result.addAll(annotations);  result.add(annotation);  result.setImmutable();  return result;}  }
class C{  public Position(double latitude,double longitude,double altitude){  super(latitude,longitude);  this.altitude=altitude;}  }
class C{  private double scanlong(int base,int start,int end){  long x=0;  boolean neg=(m_bytes[start] == '-');  for (int i=(neg ? start + 1 : start); i < end; i++) {    int digit=m_bytes[i] - (base <= 10 || (m_bytes[i] >= '0' && m_bytes[i] <= '9') ? '0' : m_bytes[i] >= 'A' && m_bytes[i] <= 'Z' ? ('A' - 10) : ('a' - 10));    if (digit < 0 || digit >= base)     return Double.NaN;    x=x * base + digit;    if (x < 0)     return Double.NaN;  }  return neg ? -x : x;}  }
class C{  public AccountHeaderBuilder withSelectionFirstLineShown(boolean selectionFirstLineShown){  this.mSelectionFirstLineShown=selectionFirstLineShown;  return this;}  }
class C{  public Dimension minimumLayoutSize(Container parent){  return calculateLayoutSize(parent,'m');}  }
class C{  @VisibleForTesting public boolean hasDoiReservedOrAssigned(Resource resource){  return (resource.getDoi() != null && resource.getIdentifierStatus() != IdentifierStatus.UNRESERVED);}  }
class C{  protected Elliptic(){}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:50.439 -0500",hash_original_method="5F3DDA40E6BDC67502A2E43BA75DBB15",hash_generated_method="53E34E84D66C405D5242529334219C37") private Object readResolve(){  if (list instanceof RandomAccess) {    return new UnmodifiableRandomAccessList<E>(list);  }  return this;}  }
class C{  public final boolean canSetDouble(String field){  return m_table.canSetDouble(field);}  }
class C{  public void print(){  System.out.println("stack: ");  int i;  for (i=pointer - 1; i >= 0 && i >= pointer - 5; i--) {    System.out.println(i + ": " + stack[i]);  }  if (i > 0) {    System.out.println("...");  }  System.out.println("");}  }
class C{  public ObjectFactory(){}  }
class C{  protected void cancelRead(){  for (  final Port port : Port.VALUES) {    final Pipe receivingPipe=getCasing().getReceivingPipe(getFace(),port);    receivingPipe.cancelRead();  }}  }
class C{  protected void calcModulus(){  if (mXAxis == null)   return;  float[] values=new float[9];  mViewPortHandler.getMatrixTouch().getValues(values);  mXAxis.mAxisLabelModulus=(int)Math.ceil((mData.getXValCount() * mXAxis.mLabelWidth) / (mViewPortHandler.contentWidth() * values[Matrix.MSCALE_X]));  if (mLogEnabled)   Log.i(LOG_TAG,"X-Axis modulus: " + mXAxis.mAxisLabelModulus + ", x-axis label width: "+ mXAxis.mLabelWidth+ ", content width: "+ mViewPortHandler.contentWidth());  if (mXAxis.mAxisLabelModulus < 1)   mXAxis.mAxisLabelModulus=1;}  }
class C{  public List<NamedRelatedResourceRep> listMigrations(URI id){  MigrationList response=client.get(MigrationList.class,getIdUrl() + "/migrations",id);  return defaultList(response.getMigrations());}  }
class C{  public AbSoapParams(Object obj){  try {    init();    Class<?> clazz=obj.getClass();    Field[] fields=clazz.getDeclaredFields();    for (    Field field : fields) {      String fieldName=field.getName();      field.setAccessible(true);      String fieldValue=(String)field.get(obj);      params.put(fieldName,fieldValue);    }  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public boolean isOrderMultipleDeliveriesAllowed(final CustomerOrder order){  try {    final Map<String,List<CustomerOrderDet>> deliveryGroups=getDeliveryGroups(order,false);    return (getPhysicalDeliveriesQty(deliveryGroups) > 1);  } catch (  SkuUnavailableException e) {    ShopCodeContext.getLog(this).warn("Unable to determine multi delivery, order contains unavailable sku. {}",order.getOrdernum(),e.getMessage());  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:39.190 -0500",hash_original_method="D4A0CDCFA2584BBC2247DBCF532082CA",hash_generated_method="4980F5671337308B811DE589FFF6DD54") public static boolean compareMimeTypes(String concreteType,String desiredType){  final int typeLength=desiredType.length();  if (typeLength == 3 && desiredType.equals("*/*")) {    return true;  }  final int slashpos=desiredType.indexOf('/');  if (slashpos > 0) {    if (typeLength == slashpos + 2 && desiredType.charAt(slashpos + 1) == '*') {      if (desiredType.regionMatches(0,concreteType,0,slashpos + 1)) {        return true;      }    } else     if (desiredType.equals(concreteType)) {      return true;    }  }  return false;}  }
class C{  @TargetApi(VERSION_CODES.LOLLIPOP) public static int fetchAccentColor(Context context,@ColorInt int defColor){  if (colorAccent == INVALID_COLOR) {    if (hasLollipop()) {      TypedArray androidAttr=context.getTheme().obtainStyledAttributes(new int[]{android.R.attr.colorAccent});      colorAccent=androidAttr.getColor(0,defColor);      androidAttr.recycle();    } else {      colorAccent=defColor;    }  }  return colorAccent;}  }
class C{  public static void main(String[] args){  Header.printHeader(ExtractOneDayTraces.class.toString(),args);  String date=args[0];  String inputfolder=args[1];  String outputFile=args[2];  int numberOfThreads=Integer.parseInt(args[3]);  ExtractOneDayTraces.Run(date,inputfolder,outputFile,numberOfThreads);  Header.printFooter();}  }
class C{  public static Image image(String imgFileName,int sz){  return new Image(Controls.class.getClassLoader().getResourceAsStream(String.format("media/%1$s_%2$dx%2$d.png",imgFileName,sz)));}  }
class C{  public GroupResult(boolean valid,boolean matching,int endIndex){  this.valid=valid;  this.matching=matching;  this.endIndex=endIndex;}  }
class C{  public Object callReadResolve(final Object result){  if (result == null) {    return null;  } else {    final Class<? extends Object> resultType=result.getClass();    final Method readResolveMethod=getRRMethod(resultType,"readResolve");    if (readResolveMethod != null) {      ErrorWritingException ex=null;      try {        return readResolveMethod.invoke(result);      } catch (      final IllegalAccessException e) {        ex=new ObjectAccessException("Cannot access method",e);      }catch (      final InvocationTargetException e) {        ex=new ConversionException("Failed calling method",e.getTargetException());      }      ex.add("method",resultType.getName() + ".readResolve()");      throw ex;    } else {      return result;    }  }}  }
class C{  private Ref dynamic() throws PageException {  int pos=cfml.getPos();  String name=identifier(false);  if (name == null) {    if (!cfml.forwardIfCurrent('('))     return null;    cfml.removeSpace();    Ref ref=assignOp();    if (!cfml.forwardIfCurrent(')'))     throw new InterpreterException("Invalid Syntax Closing [)] not found");    cfml.removeSpace();    return limited ? ref : subDynamic(ref);  }  cfml.removeSpace();  if (name.equalsIgnoreCase("TRUE")) {    cfml.removeSpace();    return LBoolean.TRUE;  } else   if (name.equalsIgnoreCase("FALSE")) {    cfml.removeSpace();    return LBoolean.FALSE;  } else   if (!isJson && name.equalsIgnoreCase("YES")) {    cfml.removeSpace();    return LBoolean.TRUE;  } else   if (!isJson && name.equalsIgnoreCase("NO")) {    cfml.removeSpace();    return LBoolean.FALSE;  } else   if (allowNullConstant && name.equalsIgnoreCase("NULL")) {    cfml.removeSpace();    return new LString(null);  } else   if (!limited && name.equalsIgnoreCase("NEW")) {    Ref res=newOp();    if (res != null)     return res;  }  return limited ? startElement(name) : subDynamic(startElement(name));}  }
class C{  public synchronized int commit(){  if (storageQueue.size() > 0) {    if (CloudPersona.getCurrentPersona().getToken() == null) {      CloudPersona.createAnonymous();    }    StorageRequest req=new StorageRequest();    req.setContentType("multipart/form-data");    req.setUrl(SERVER_URL + "/objStoreCommit");    req.setPost(true);    NetworkManager.getInstance().addToQueueAndWait(req);    int i=req.getReturnCode();    if (i == RETURN_CODE_SUCCESS) {      storageQueue.clear();      Storage.getInstance().deleteStorageFile("CN1StorageQueue");    }    return i;  }  return RETURN_CODE_EMPTY_QUEUE;}  }
class C{  private void ekskey(byte data[],byte key[]){  int i;  int koffp[]={0}, doffp[]={0};  int lr[]={0,0};  int plen=P.length, slen=S.length;  for (i=0; i < plen; i++) {    P[i]=P[i] ^ streamtoword(key,koffp);  }  for (i=0; i < plen; i+=2) {    lr[0]^=streamtoword(data,doffp);    lr[1]^=streamtoword(data,doffp);    encipher(lr,0);    P[i]=lr[0];    P[i + 1]=lr[1];  }  for (i=0; i < slen; i+=2) {    lr[0]^=streamtoword(data,doffp);    lr[1]^=streamtoword(data,doffp);    encipher(lr,0);    S[i]=lr[0];    S[i + 1]=lr[1];  }}  }
class C{  public boolean isLatest(){  return latest;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"USAD8");  translateAll(environment,instruction,"USAD8",instructions);}  }
class C{  @Override public V put(Long key,V value){  return wrapValue(_map.put(unwrapKey(key),unwrapValue(value)));}  }
class C{  public CurveCreator(int degree){  this.degree=degree;}  }
class C{  public boolean minify(PrintWriter logger,List<File> dependees,List<File> inputs,File output,Map<String,Object> options){  try {    List<Pair<InputSource,File>> inputSources=Lists.newArrayList();    for (    File f : inputs) {      inputSources.add(Pair.pair(new InputSource(f.getAbsoluteFile().toURI()),f));    }    Writer outputWriter=new OutputStreamWriter(new FileOutputStream(output),Charsets.UTF_8);    try {      return Minify.minify(inputSources,outputWriter,logger);    }  finally {      outputWriter.close();    }  } catch (  IOException ex) {    logger.println("Minifying failed: " + ex);    return false;  }}  }
class C{  public boolean isShowCustomTextGridX(){  return mShowCustomTextGridX;}  }
class C{  public long computeMillis(){  return computeMillis(false,null);}  }
class C{  public void openChat(View view){  Intent intent=new Intent(this,ChatActivity.class);  startActivity(intent);}  }
class C{  public String useMDLcorrectionTipText(){  return "Whether MDL correction is used when finding splits on numeric attributes.";}  }
class C{  protected void process(Row row){}  }
class C{  public STGroupFile(String fileName){  this(fileName,'<','>');}  }
class C{  private static void addPoint(final Bounds boundsInfo,final Membership[] bounds,final GeoPoint point){  for (  Membership bound : bounds) {    if (!bound.isWithin(point))     return;  }  boundsInfo.addPoint(point);}  }
class C{  public boolean isCycle(){  return isCycle;}  }
class C{  private void updateMigratedVirtualVolumeVpoolAndVarray(Volume volume,URI newVpoolURI,URI newVarrayURI){  if (newVpoolURI != null) {    Volume backendSrcVolume=VPlexUtil.getVPLEXBackendVolume(volume,true,_dbClient);    if (backendSrcVolume != null) {      if (backendSrcVolume.getVirtualPool().toString().equals(volume.getVirtualPool().toString())) {        backendSrcVolume.setVirtualPool(newVpoolURI);        _dbClient.updateObject(backendSrcVolume);      }    }    volume.setVirtualPool(newVpoolURI);  } else   if (newVarrayURI != null) {    volume.setVirtualArray(newVarrayURI);  }}  }
class C{  protected BrokerService createBroker() throws Exception {  BrokerService answer=new BrokerService();  configureBroker(answer);  answer.start();  return answer;}  }
class C{  public boolean isMandatory(){  return m_mandatory;}  }
class C{  public static void appendText(TextView view,String toAppend){  String currentText=getText(view);  view.setText(currentText + toAppend);}  }
class C{  public boolean isValid(){  Object oo=get_Value(COLUMNNAME_IsValid);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Spider downloader(Downloader downloader){  return setDownloader(downloader);}  }
class C{  public synchronized void shutdown(boolean immediate){  logger.info("Shutting down pipeline: " + name);  for (  Stage stage : stages)   stage.shutdown(immediate);  shutdownTaskExec.shutdownNow();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void addKeyAndVersion(Object key,VersionTag versionTag){  if (logger.isTraceEnabled(LogMarker.VERSIONED_OBJECT_LIST)) {    logger.trace(LogMarker.VERSIONED_OBJECT_LIST,"VersionedObjectList.addKeyAndVersion({}; {})",key,versionTag);  }  if (this.objects.size() > 0) {    throw new IllegalStateException("attempt to add key/version to a list containing objects");  }  this.keys.add(key);  if (this.regionIsVersioned) {    this.versionTags.add(versionTag);  }}  }
class C{  @Override protected void resetEditorFrom(WeaveConfiguration runnerConfiguration){  this.configurationPanel.getModuleCombo().setModules(runnerConfiguration.getValidModules());  Module selectedModule=runnerConfiguration.getModule();  if (selectedModule == null) {    Collection<Module> modules=runnerConfiguration.getValidModules();    if (modules.size() > 0) {      selectedModule=modules.iterator().next();    }  }  this.configurationPanel.getModuleCombo().setSelectedModule(selectedModule);  this.configurationPanel.getWeaveFile().setText(runnerConfiguration.getWeaveFile());  this.configurationPanel.getOutput().setText(runnerConfiguration.getWeaveOutput());  this.configurationPanel.getWeaveHome().setText(runnerConfiguration.getWeaveHome());  this.configurationPanel.getWeaveInputs().setItems(runnerConfiguration.getWeaveInputs());}  }
class C{  public UnregisterNodesResponse clone(){  UnregisterNodesResponse result=new UnregisterNodesResponse();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  return result;}  }
class C{  public Annotation(ConstPool cp,CtClass clazz) throws NotFoundException {  this(cp.addUtf8Info(Descriptor.of(clazz.getName())),cp);  if (!clazz.isInterface())   throw new RuntimeException("Only interfaces are allowed for Annotation creation.");  CtMethod methods[]=clazz.getDeclaredMethods();  if (methods.length > 0) {    members=new LinkedHashMap();  }  for (int i=0; i < methods.length; i++) {    CtClass returnType=methods[i].getReturnType();    addMemberValue(methods[i].getName(),createMemberValue(cp,returnType));  }}  }
class C{  public void insert(int offset,float value){  if (offset == _pos) {    add(value);    return;  }  ensureCapacity(_pos + 1);  System.arraycopy(_data,offset,_data,offset + 1,_pos - offset);  _data[offset]=value;  _pos++;}  }
class C{  public static void append(final CCachedExpressionTreeNode parent,final CCachedExpressionTreeNode child){  parent.getChildren().add(child);}  }
class C{  protected RuleStats runParallel(final IJoinNexus joinNexus,final IStep program,final List<Callable<RuleStats>> tasks) throws InterruptedException, ExecutionException {  if (log.isInfoEnabled())   log.info("program=" + program.getName() + ", #tasks="+ tasks.size());  if (indexManager == null)   throw new IllegalStateException();  final RuleStats totals=joinNexus.getRuleStatisticsFactory().newInstance(program);  final ExecutorService service=indexManager.getExecutorService();  final List<Future<RuleStats>> futures=service.invokeAll(tasks);  for (  Future<RuleStats> f : futures) {    final RuleStats tmp=f.get();    totals.add(tmp);  }  if (log.isInfoEnabled())   log.info("program=" + program.getName() + ", #tasks="+ tasks.size()+ " - done");  return totals;}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  for (int i=0; i < getLocals(); ++i) {    sb.append(getLocal(i));  }  sb.append(' ');  for (int i=0; i < getStackSize(); ++i) {    sb.append(getStack(i).toString());  }  return sb.toString();}  }
class C{  public static Action newInstance(){  final Action returnInstance=new Action();  returnInstance.setDefaultCode();  return returnInstance;}  }
class C{  public void reset(){  fProposals.clear();  for (Iterator<Entry<Document,Position>> it=fPositions.entrySet().iterator(); it.hasNext(); ) {    Entry<Document,Position> entry=it.next();    Document doc=entry.getKey();    Position position=entry.getValue();    doc.removePosition(position);  }  fPositions.clear();}  }
class C{  public BytesReference source(){  return source;}  }
class C{  public Transform match(Class type) throws Exception {  Transform value=matcher.match(type);  if (value != null) {    return value;  }  return matchType(type);}  }
class C{  public void registerReceiver(BroadcastReceiver receiver,IntentFilter filter){synchronized (mReceivers) {    ReceiverRecord entry=new ReceiverRecord(filter,receiver);    ArrayList<IntentFilter> filters=mReceivers.get(receiver);    if (filters == null) {      filters=new ArrayList<>(1);      mReceivers.put(receiver,filters);    }    filters.add(filter);    for (int i=0; i < filter.countActions(); i++) {      String action=filter.getAction(i);      ArrayList<ReceiverRecord> entries=mActions.get(action);      if (entries == null) {        entries=new ArrayList<>(1);        mActions.put(action,entries);      }      entries.add(entry);    }  }}  }
class C{  final private String syntaxDef2SyntaxDesc(Attributes attrs) throws NamingException {  StringBuffer syntaxDesc=new StringBuffer("( ");  Attribute attr=null;  int count=0;  attr=attrs.get(NUMERICOID_ID);  if (attr != null) {    syntaxDesc.append(writeNumericOID(attr));    count++;  } else {    throw new ConfigurationException("Attribute type doesn't" + "have a numeric OID");  }  attr=attrs.get(DESC_ID);  if (attr != null) {    syntaxDesc.append(writeQDString(attr));    count++;  }  if (count < attrs.size()) {    String attrId=null;    for (NamingEnumeration<? extends Attribute> ae=attrs.getAll(); ae.hasMoreElements(); ) {      attr=ae.next();      attrId=attr.getID();      if (attrId.equals(NUMERICOID_ID) || attrId.equals(DESC_ID)) {        continue;      } else {        syntaxDesc.append(writeQDStrings(attr));      }    }  }  syntaxDesc.append(")");  return syntaxDesc.toString();}  }
class C{  private ResourceNotFoundException(){}  }
class C{  public ul addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public final IonSystemBuilder copy(){  return new Mutable(this);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected final void putIntegerValue(long v){  final int end=start;  long mask=0x7f80000000000000L;  int byteNeeded=8;  if (v < 0) {    while (((mask & v) == mask) && (byteNeeded > 1)) {      mask=mask >> 8;      byteNeeded--;    }  } else {    while (((mask & v) == 0) && (byteNeeded > 1)) {      mask=mask >> 8;      byteNeeded--;    }  }  for (int i=0; i < byteNeeded; i++) {    bytes[--start]=(byte)v;    v=v >> 8;  }  putLength(end - start);}  }
class C{  public static void updateZobristCastle(ClassicGame game,int color,int kingStartSquare,int rookStartSquare,int kingEndSquare,int rookEndSquare){  game.zobristPositionHash^=zobrist(color,KING,kingStartSquare) ^ zobrist(color,KING,kingStartSquare) ^ zobrist(color,ROOK,rookStartSquare)^ zobrist(color,ROOK,rookEndSquare);}  }
class C{  public void profile(){  mProfile=true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-06 12:50:10.526 -0400",hash_original_method="C3B1B421E76AA8A22DF9F91B2B7F92A2",hash_generated_method="4AA2C46378B89CF24C27908243756013") public boolean hasAdvancedOption(String key){  PrintService.throwIfNotCalledOnMainThread();  return getInfo().hasAdvancedOption(key);}  }
class C{  public static void swap(CoordinateSequence seq,int i,int j){  if (i == j)   return;  for (int dim=0; dim < seq.getDimension(); dim++) {    double tmp=seq.getOrdinate(i,dim);    seq.setOrdinate(i,dim,seq.getOrdinate(j,dim));    seq.setOrdinate(j,dim,tmp);  }}  }
class C{  public Boolean isTopLevelDirectoryCreateSupported(){  return topLevelDirectoryCreateSupported;}  }
class C{  void transfer(Entry[] newTable){  Entry[] src=table;  int newCapacity=newTable.length;  for (int j=0; j < src.length; j++) {    Entry<K,V> e=src[j];    if (e != null) {      src[j]=null;      do {        Entry<K,V> next=e.next;        int i=indexFor(e.hash,newCapacity);        e.next=newTable[i];        newTable[i]=e;        e=next;      } while (e != null);    }  }}  }
class C{  public static void decodeToFile(String dataToDecode,String filename) throws java.io.IOException {  OutputStream bos=null;  try {    bos=new OutputStream(new java.io.FileOutputStream(filename),Base64.DECODE);    bos.write(dataToDecode.getBytes(PREFERRED_ENCODING));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }}  }
class C{  public String globalInfo(){  return "MLC-BMaD - Multi-Label Classification using Boolean Matrix Decomposition. Transforms " + "the labels using a Boolean matrix decomposition, the first resulting matrix are " + "used as latent labels and a classifier is trained to predict them. The second matrix is "+ "used in a multiplication to decompress the predicted latent labels.\n"+ "For more information see:\n"+ getTechnicalInformation();}  }
class C{  public static void main(String[] args){  In in=new In(args[0]);  int[] white=in.readAllInts();  StaticSETofInts set=new StaticSETofInts(white);  while (!StdIn.isEmpty()) {    int key=StdIn.readInt();    if (!set.contains(key))     StdOut.println(key);  }}  }
class C{  public StringBuilder(CharSequence seq){  this(seq.length() + 16);  append(seq);}  }
class C{  public ParsePhraseTypeOnly(String parseViewname){  this.parseViewname=parseViewname;}  }
class C{  public TypeIdItem intern(Type type){  if (type == null) {    throw new NullPointerException("type == null");  }  throwIfPrepared();  TypeIdItem result=typeIds.get(type);  if (result == null) {    result=new TypeIdItem(new CstType(type));    typeIds.put(type,result);  }  return result;}  }
class C{  @Override public boolean containsAll(int... values){  for (  int value : values) {    if (!this.contains(value)) {      return false;    }  }  return true;}  }
class C{  private void registerFormat(AltFormat format){  nameMap.put(format.getName(),format);  if (format.isSelectableByType()) {    typeMap.put(format.getContentType().getMediaType(),format);  }}  }
class C{  ZoneOffsetTransition(LocalDateTime transition,ZoneOffset offsetBefore,ZoneOffset offsetAfter){  Objects.requireNonNull(transition,"transition");  Objects.requireNonNull(offsetBefore,"offsetBefore");  Objects.requireNonNull(offsetAfter,"offsetAfter");  if (offsetBefore.equals(offsetAfter)) {    throw new IllegalArgumentException("Offsets must not be equal");  }  this.transition=transition;  this.offsetBefore=offsetBefore;  this.offsetAfter=offsetAfter;}  }
class C{  public void testasIntBuffer() throws IOException {  FileInputStream fis=new FileInputStream(tmpFile);  FileChannel fc=fis.getChannel();  MappedByteBuffer mmb=fc.map(FileChannel.MapMode.READ_ONLY,0,fc.size());  int len=mmb.capacity();  assertEquals("Got wrong number of bytes",46,len);  for (int i=0; i < 26; i++) {    byte b=mmb.get();    assertEquals("Got wrong byte value",(byte)'A' + i,b);  }  IntBuffer ibuffer=mmb.asIntBuffer();  for (int i=0; i < 5; i++) {    int val=ibuffer.get();    assertEquals("Got wrong int value",i + 1,val);  }  fc.close();}  }
class C{  @SuppressWarnings("unchecked") public CouplingMenuItem(final Workspace workspace,final String description,final PotentialProducer producer,final PotentialConsumer consumer){  super(description,workspace.getCouplingManager().containseEquivalentCoupling(new Coupling(producer.createProducer(),consumer.createConsumer())));  this.workspace=workspace;  this.potentialProducer=producer;  this.potentialConsumer=consumer;  addActionListener(listener);}  }
class C{  public IOTask<Void> saveTask(DataFile dataFile,SaveFile saveFile){  log.debug(null);  return FS.writeDataTask(saveFile,saveDir() + saveFile.getName() + SAVE_FILE_EXT).then(null).then(null);}  }
class C{  public static boolean isSigningRelated(String name){  name=name.toUpperCase(Locale.ENGLISH);  if (!name.startsWith("META-INF/")) {    return false;  }  name=name.substring(9);  if (name.indexOf('/') != -1) {    return false;  }  if (isBlockOrSF(name) || name.equals("MANIFEST.MF")) {    return true;  } else   if (name.startsWith("SIG-")) {    int extIndex=name.lastIndexOf('.');    if (extIndex != -1) {      String ext=name.substring(extIndex + 1);      if (ext.length() > 3 || ext.length() < 1) {        return false;      }      for (int index=0; index < ext.length(); index++) {        char cc=ext.charAt(index);        if ((cc < 'A' || cc > 'Z') && (cc < '0' || cc > '9')) {          return false;        }      }    }    return true;  }  return false;}  }
class C{  public void parseFromString(String in) throws IllegalArgumentException {  String[] parts=in.split(",");  if (parts.length > 1) {    _type=Type.valueOf(parts[0]);    _value=normalizeValue(_type,parts[1]);  } else {    throw APIException.badRequests.theParametersAreNotValid(in);  }  if (parts.length > 2) {    _specifier=parts[2];  }}  }
class C{  public boolean thisDeviceSpeaksTo(Peer other) throws NoSuchAlgorithmException, UnsupportedEncodingException {  if (other == null || other.getNetwork() == null || other.getNetwork().getBluetoothDevice() == null) {    return false;  }  return thisDeviceSpeaksTo(other.getNetwork().getBluetoothDevice());}  }
class C{  public static void cancelThumbnailRequest(ContentResolver cr,long origId){  InternalThumbnails.cancelThumbnailRequest(cr,origId,EXTERNAL_CONTENT_URI,InternalThumbnails.DEFAULT_GROUP_ID);}  }
class C{  @Deprecated public void processChanged(){}  }
class C{  public ActionForward executeAction(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  DynaValidatorForm oForm=(DynaValidatorForm)form;  String cDocumentoPago=null;  Liquidacion oLiquidacion=null;  try {    PagoElectronicoManagerHelper.realizarPago(request,oForm);    oLiquidacion=PagoElectronicoManagerHelper.obtenerDatosLiquidacion(request,oForm);    String cXMLDatos=PagoElectronicoManagerHelper.obtenerDocumentoPago(request,oForm);    cDocumentoPago=FormCreator.crearFinalPago(oLiquidacion.getTasa(),cXMLDatos,request);  } catch (  Exception e) {    logger.error(e.getMessage(),e);    request.setAttribute(ERROR_KEY,e.getMessage());    return mapping.findForward(ERROR_FORWARD);  }  request.setAttribute(DOC_PAGO_KEY,cDocumentoPago);  request.setAttribute(REFERENCIA_KEY,(String)oForm.get(PagoElectronicoManagerHelper.CAMPO_REFERENCIA));  return mapping.findForward(SUCCESS_FORWARD);}  }
class C{  public static final BigInteger convert(final long i){  return BigInteger.valueOf(i);}  }
class C{  private long readUint(ExtractorInput input) throws IOException, InterruptedException {  input.peekFully(scratch.data,0,1);  int value=scratch.data[0] & 0xFF;  if (value == 0) {    return Long.MIN_VALUE;  }  int mask=0x80;  int length=0;  while ((value & mask) == 0) {    mask>>=1;    length++;  }  value&=~mask;  input.peekFully(scratch.data,1,length);  for (int i=0; i < length; i++) {    value<<=8;    value+=scratch.data[i + 1] & 0xFF;  }  peekLength+=length + 1;  return value;}  }
class C{  public synchronized void playbackLastMacro(){  if (currentMacro != null) {    Action[] actions=getActions();    int numActions=actions.length;    List macroRecords=currentMacro.getMacroRecords();    int num=macroRecords.size();    if (num > 0) {      undoManager.beginInternalAtomicEdit();      try {        for (int i=0; i < num; i++) {          MacroRecord record=(MacroRecord)macroRecords.get(i);          for (int j=0; j < numActions; j++) {            if ((actions[j] instanceof RecordableTextAction) && record.id.equals(((RecordableTextAction)actions[j]).getMacroID())) {              actions[j].actionPerformed(new ActionEvent(this,ActionEvent.ACTION_PERFORMED,record.actionCommand));              break;            }          }        }      }  finally {        undoManager.endInternalAtomicEdit();      }    }  }}  }
class C{  public JSONObject toJSONObject(JSONArray names) throws JSONException {  if (names == null || names.length() == 0 || this.length() == 0) {    return null;  }  JSONObject jo=new JSONObject();  for (int i=0; i < names.length(); i+=1) {    jo.put(names.getString(i),this.opt(i));  }  return jo;}  }
class C{  private RandomUtil(long seed){  setSeed(seed);}  }
class C{  public Message associationResponse(ParameterList requestParams){  boolean isVersion2=requestParams.hasParameter("openid.ns");  _log.info("Processing association request...");  try {    AssociationRequest assocReq=AssociationRequest.createAssociationRequest(requestParams);    isVersion2=assocReq.isVersion2();    AssociationSessionType type=assocReq.getType();    if (!Association.isHmacSupported(type.getAssociationType()) || !DiffieHellmanSession.isDhSupported(type) || _minAssocSessEnc.isBetter(type)) {      throw new AssociationException("Unable create association for: " + type.getSessionType() + " / "+ type.getAssociationType());    } else {      Association assoc=_sharedAssociations.generate(type.getAssociationType(),_expireIn);      _log.info("Returning shared association; handle: " + assoc.getHandle());      return AssociationResponse.createAssociationResponse(assocReq,assoc);    }  } catch (  OpenIDException e) {    if (isVersion2) {      _log.warn("Cannot establish association, " + "responding with an OpenID2 association error.",e);      return AssociationError.createAssociationError(e.getMessage(),_prefAssocSessEnc);    } else {      _log.warn("Error processing an OpenID1 association request: " + e.getMessage() + " Responding with a dummy association.",e);      try {        Association dummyAssoc=_sharedAssociations.generate(Association.TYPE_HMAC_SHA1,0);        AssociationRequest dummyRequest=AssociationRequest.createAssociationRequest(AssociationSessionType.NO_ENCRYPTION_COMPAT_SHA1MAC);        return AssociationResponse.createAssociationResponse(dummyRequest,dummyAssoc);      } catch (      OpenIDException ee) {        _log.error("Error creating negative OpenID1 association response.",e);        return null;      }    }  }}  }
class C{  void fillDotGraph(String prefix,DotGraph out){  Map<PurityNode,String> nodeId=new HashMap<PurityNode,String>();  int id=0;  Iterator it=nodes.iterator();  while (it.hasNext()) {    PurityNode n=(PurityNode)it.next();    String label="N" + prefix + "_"+ id;    DotGraphNode node=out.drawNode(label);    node.setLabel(n.toString());    if (!n.isInside()) {      node.setStyle("dashed");      node.setAttribute("color","gray50");    }    if (globEscape.contains(n))     node.setAttribute("fontcolor","red");    nodeId.put(n,label);    id++;  }  it=edges.keySet().iterator();  while (it.hasNext()) {    PurityNode src=(PurityNode)it.next();    Iterator itt=edges.get(src).iterator();    while (itt.hasNext()) {      PurityEdge e=(PurityEdge)itt.next();      DotGraphEdge edge=out.drawEdge(nodeId.get(e.getSource()),nodeId.get(e.getTarget()));      edge.setLabel(e.getField());      if (!e.isInside()) {        edge.setStyle("dashed");        edge.setAttribute("color","gray50");        edge.setAttribute("fontcolor","gray40");      }    }  }  it=locals.keySet().iterator();  while (it.hasNext()) {    Local local=(Local)it.next();    if (!locals.get(local).isEmpty()) {      String label="L" + prefix + "_"+ id;      DotGraphNode node=out.drawNode(label);      node.setLabel(local.toString());      node.setShape("plaintext");      Iterator itt=locals.get(local).iterator();      while (itt.hasNext()) {        PurityNode dst=(PurityNode)itt.next();        out.drawEdge(label,nodeId.get(dst));      }      id++;    }  }  if (!ret.isEmpty()) {    DotGraphNode node=out.drawNode("ret_" + prefix);    node.setLabel("ret");    node.setShape("plaintext");    Iterator itt=ret.iterator();    while (itt.hasNext()) {      PurityNode dst=(PurityNode)itt.next();      out.drawEdge("ret_" + prefix,nodeId.get(dst));    }  }  it=mutated.keySet().iterator();  while (it.hasNext()) {    PurityNode n=(PurityNode)it.next();    Iterator itt=mutated.get(n).iterator();    while (itt.hasNext()) {      String f=(String)itt.next();      String label="M" + prefix + "_"+ id;      DotGraphNode node=out.drawNode(label);      node.setLabel("");      node.setShape("plaintext");      DotGraphEdge edge=out.drawEdge(nodeId.get(n),label);      edge.setLabel(f);      id++;    }  }}  }
class C{  private int subParseZoneString(String text,int start,CalendarBuilder calb){  boolean useSameName=false;  TimeZone currentTimeZone=getTimeZone();  int zoneIndex=formatData.getZoneIndex(currentTimeZone.getID());  TimeZone tz=null;  String[][] zoneStrings=formatData.getZoneStringsWrapper();  String[] zoneNames=null;  int nameIndex=0;  if (zoneIndex != -1) {    zoneNames=zoneStrings[zoneIndex];    if ((nameIndex=matchZoneString(text,start,zoneNames)) > 0) {      if (nameIndex <= 2) {        useSameName=zoneNames[nameIndex].equalsIgnoreCase(zoneNames[nameIndex + 2]);      }      tz=TimeZone.getTimeZone(zoneNames[0]);    }  }  if (tz == null) {    zoneIndex=formatData.getZoneIndex(TimeZone.getDefault().getID());    if (zoneIndex != -1) {      zoneNames=zoneStrings[zoneIndex];      if ((nameIndex=matchZoneString(text,start,zoneNames)) > 0) {        if (nameIndex <= 2) {          useSameName=zoneNames[nameIndex].equalsIgnoreCase(zoneNames[nameIndex + 2]);        }        tz=TimeZone.getTimeZone(zoneNames[0]);      }    }  }  if (tz == null) {    int len=zoneStrings.length;    for (int i=0; i < len; i++) {      zoneNames=zoneStrings[i];      if ((nameIndex=matchZoneString(text,start,zoneNames)) > 0) {        if (nameIndex <= 2) {          useSameName=zoneNames[nameIndex].equalsIgnoreCase(zoneNames[nameIndex + 2]);        }        tz=TimeZone.getTimeZone(zoneNames[0]);        break;      }    }  }  if (tz != null) {    if (!tz.equals(currentTimeZone)) {      setTimeZone(tz);    }    int dstAmount=(nameIndex >= 3) ? tz.getDSTSavings() : 0;    if (!(useSameName || (nameIndex >= 3 && dstAmount == 0))) {      calb.clear(Calendar.ZONE_OFFSET).set(Calendar.DST_OFFSET,dstAmount);    }    return (start + zoneNames[nameIndex].length());  }  return -start;}  }
class C{  public TemplateServlet(){  this.cache=new WeakHashMap<String,TemplateCacheEntry>();  this.engine=null;  this.generateBy=true;  this.fileEncodingParamVal=null;}  }
class C{  public void offset(int dx,int dy){  left+=dx;  top+=dy;  right+=dx;  bottom+=dy;}  }
class C{  public static long startTime(){  return System.nanoTime();}  }
class C{  public HAPbrpcException(Throwable arg0){  super(arg0);}  }
class C{  @DSSource({DSSourceKind.LOCATION}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.162 -0500",hash_original_method="A408B34F281395540EEED77731180C65",hash_generated_method="8161DBF71A1F31005E5910BA3A540D17") static public Allocation createTyped(RenderScript rs,Type type,int usage){  return createTyped(rs,type,MipmapControl.MIPMAP_NONE,usage);}  }
class C{  @Override public Void visitAnnotation(AnnotationTree node,Void p){  List<? extends ExpressionTree> args=node.getArguments();  if (args.isEmpty()) {    return null;  }  Element anno=TreeInfo.symbol((JCTree)node.getAnnotationType());  if (anno.toString().equals(DefaultQualifier.class.getName()) || anno.toString().equals(SuppressWarnings.class.getName())) {    return null;  }  Map<String,AnnotatedTypeMirror> annoTypes=new HashMap<String,AnnotatedTypeMirror>();  for (  Element encl : ElementFilter.methodsIn(anno.getEnclosedElements())) {    AnnotatedExecutableType exeatm=(AnnotatedExecutableType)atypeFactory.getAnnotatedType(encl);    AnnotatedTypeMirror retty=exeatm.getReturnType();    annoTypes.put(encl.getSimpleName().toString(),retty);  }  for (  ExpressionTree arg : args) {    if (!(arg instanceof AssignmentTree)) {      continue;    }    AssignmentTree at=(AssignmentTree)arg;    if (at.getExpression().getKind() == Tree.Kind.ANNOTATION) {      visitAnnotation((AnnotationTree)at.getExpression(),p);      continue;    }    if (at.getExpression().getKind() == Tree.Kind.NEW_ARRAY) {      NewArrayTree nat=(NewArrayTree)at.getExpression();      boolean isAnno=false;      for (      ExpressionTree init : nat.getInitializers()) {        if (init.getKind() == Tree.Kind.ANNOTATION) {          visitAnnotation((AnnotationTree)init,p);          isAnno=true;        }      }      if (isAnno) {        continue;      }    }    AnnotatedTypeMirror expected=annoTypes.get(at.getVariable().toString());    Pair<Tree,AnnotatedTypeMirror> preAssCtxt=visitorState.getAssignmentContext();{      ExpressionTree var=at.getVariable();      assert var instanceof IdentifierTree : "Expected IdentifierTree as context. Found: " + var;      AnnotatedTypeMirror meth=atypeFactory.getAnnotatedType(var);      assert meth instanceof AnnotatedExecutableType : "Expected AnnotatedExecutableType as context. Found: " + meth;      AnnotatedTypeMirror newctx=((AnnotatedExecutableType)meth).getReturnType();      visitorState.setAssignmentContext(Pair.<Tree,AnnotatedTypeMirror>of((Tree)null,newctx));    }    try {      AnnotatedTypeMirror actual=atypeFactory.getAnnotatedType(at.getExpression());      if (expected.getKind() != TypeKind.ARRAY) {        commonAssignmentCheck(expected,actual,at.getExpression(),"annotation.type.incompatible");      } else {        if (actual.getKind() == TypeKind.ARRAY) {          commonAssignmentCheck(expected,actual,at.getExpression(),"annotation.type.incompatible");        } else {          commonAssignmentCheck(((AnnotatedArrayType)expected).getComponentType(),actual,at.getExpression(),"annotation.type.incompatible");        }      }    }  finally {      visitorState.setAssignmentContext(preAssCtxt);    }  }  return null;}  }
class C{  protected BaseGameActivity(int requestedClients){  super();  setRequestedClients(requestedClients);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputFile;  double x, y;  int progress;  int n;  int featureNum, numFeatures;  int oneHundredthTotal;  ShapeType shapeType, outputShapeType;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    if (shapeType.getBaseType() != ShapeType.POLYGON) {      showFeedback("This tool only works with shapefiles of a polygon base shape type.");      return;    }    outputShapeType=ShapeType.POLYLINE;    if (shapeType == ShapeType.POLYGONZ) {      outputShapeType=ShapeType.POLYLINEZ;    } else     if (shapeType == ShapeType.POLYGONM) {      outputShapeType=ShapeType.POLYLINEM;    }    ShapeFile output=new ShapeFile(outputFile,outputShapeType);    output.setProjectionStringFromOtherShapefile(input);    FileUtilities.copyFile(new File(input.getDatabaseFile()),new File(output.getDatabaseFile()));    numFeatures=input.getNumberOfRecords();    oneHundredthTotal=numFeatures / 100;    n=0;    progress=0;    byte[] rawData;    whitebox.geospatialfiles.shapefile.Geometry recGeometry;    for (    ShapeFileRecord record : input.records) {      rawData=record.getGeometry().toByteBuffer().array();switch (outputShapeType) {case POLYLINE:        recGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(rawData);      break;case POLYLINEZ:    recGeometry=new PolyLineZ(rawData);  break;default :recGeometry=new PolyLineM(rawData);break;}output.addRecord(recGeometry);n++;if (n >= oneHundredthTotal) {n=0;if (cancelOp) {cancelOperation();return;}progress++;updateProgress(progress);}}output.write();updateProgress("Displaying vector: ",0);returnData(outputFile);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public boolean maxLength(String input,int maxLength){  return GenericValidator.maxLength(input,maxLength);}  }
class C{  private SimpleProtein queryByAccession(String ac) throws IOException {  return matchData.queryByAccession(ac);}  }
class C{  public void addTimeStamp(TemporalRecord timeStamp){  for (  OMGraphic geom : this) {    if (geom instanceof TemporalOMGraphic) {      ((TemporalOMGraphic)geom).addTimeStamp(timeStamp);    }  }}  }
class C{  private void processSingleTarget(Seed seed){  ConcurrentLog.fine(AutoSearch.class.getName(),"ask " + seed.getIP() + " "+ seed.getName()+ " for query="+ currentQuery);  if (seed.getFlagSolrAvailable()) {    SolrDocumentList docList=null;    SolrQuery solrQuery=new SolrQuery();    solrQuery.set(CommonParams.Q,currentQuery + " AND (" + CollectionSchema.httpstatus_i.name()+ ":200)");    solrQuery.set("q.op","AND");    solrQuery.set(CommonParams.ROWS,sb.getConfig(SwitchboardConstants.REMOTESEARCH_MAXCOUNT_USER,"20"));    this.setName("Protocol.solrQuery(" + solrQuery.getQuery() + " to "+ seed.hash+ ")");    try {      RemoteInstance instance=new RemoteInstance("http://" + seed.getPublicAddress(seed.getIP()) + "/solr/",null,null,10000);      try {        SolrConnector solrConnector=new RemoteSolrConnector(instance,true,null);        if (!solrConnector.isClosed()) {          try {            QueryResponse rsp=solrConnector.getResponseByParams(solrQuery);            docList=rsp.getResults();          } catch (          Throwable e) {          } finally {            solrConnector.close();          }        }      } catch (      Throwable ee) {      } finally {        instance.close();      }      if (docList != null) {        for (        SolrDocument d : docList) {          sb.index.fulltext().putDocument(sb.index.fulltext().getDefaultConfiguration().toSolrInputDocument(d));          this.gotresults++;        }        ConcurrentLog.info(AutoSearch.class.getName(),"added " + docList.size() + " results from "+ seed.getName()+ " to index for solrquery="+ currentQuery);      }    } catch (    Throwable eee) {    }  } else {    final String rssSearchServiceURL="http://" + seed.getPublicAddress(seed.getIP()) + "/yacysearch.rss";    try {      RSSFeed feed=loadSRURSS(rssSearchServiceURL,currentQuery,0,sb.getConfigInt(SwitchboardConstants.REMOTESEARCH_MAXCOUNT_USER,20),CacheStrategy.IFFRESH,false,ClientIdentification.yacyInternetCrawlerAgent);      final List<DigestURL> urls=new ArrayList<DigestURL>();      for (      final MultiProtocolURL entry : feed.getLinks()) {        urls.add(new DigestURL(entry,(byte[])null));        this.gotresults++;      }      sb.addToCrawler(urls,false);      ConcurrentLog.info(AutoSearch.class.getName(),"added " + urls.size() + " results from "+ seed.getName()+ " to index for query="+ currentQuery);    } catch (    IOException ex) {      ConcurrentLog.info(AutoSearch.class.getName(),"no answer from " + seed.getName());    }  }}  }
class C{  public void addFreeSwapSpace(long freeSwapSpace){  this.totalFreeSwapSpace+=freeSwapSpace;}  }
class C{  public Object readObject(Deserializer deserializer,Type target){  String className;  if (currentDataType == AMF.TYPE_CLASS_OBJECT) {    className=getString(buf);  } else {    className=null;  }  Object result=null;  if (className != null) {    Object instance;    if (className.equals("RecordSet")) {      result=new RecordSet(this);      storeReference(result);    } else     if (className.equals("RecordSetPage")) {      result=new RecordSetPage(this);      storeReference(result);    } else {      instance=newInstance(className);      if (instance != null) {        result=readBean(deserializer,instance);      }    }  } else {    result=readSimpleObject(deserializer);  }  return result;}  }
class C{  public boolean serialize(RowMutator mutator,DataObject val,LazyLoader lazyLoader){  if (!_clazz.isInstance(val)) {    throw new IllegalArgumentException();  }  try {    boolean indexFieldsModified=false;    URI id=(URI)_idField.getPropertyDescriptor().getReadMethod().invoke(val);    if (id == null) {      throw new IllegalArgumentException();    }    for (    ColumnField field : this._columnFieldMap.values()) {      setMappedByField(val,field);      indexFieldsModified|=field.serialize(val,mutator);    }    setLazyLoaders(val,lazyLoader);    return indexFieldsModified;  } catch (  final IllegalAccessException e) {    throw DatabaseException.fatals.serializationFailedId(val.getId(),e);  }catch (  final InvocationTargetException e) {    throw DatabaseException.fatals.serializationFailedId(val.getId(),e);  }}  }
class C{  public int hashCode(){  return _core_hash_cache;}  }
class C{  public static String toString(int rank,int suit){  StringBuffer sb=new StringBuffer();switch (rank) {case ACE:    sb.append(ACEabbreviation);  break;case JACK:sb.append(JACKabbreviation);break;case QUEEN:sb.append(QUEENabbreviation);break;case KING:sb.append(KINGabbreviation);break;default :if (rank < 2) throw new IllegalArgumentException("Illegal Rank for Card::toString().");if (rank > 10) throw new IllegalArgumentException("Illegal Rank for Card::toString().");sb.append(rank);}switch (suit) {case CLUBS:sb.append(CLUBSabbreviation);break;case DIAMONDS:sb.append(DIAMONDSabbreviation);break;case HEARTS:sb.append(HEARTSabbreviation);break;case SPADES:sb.append(SPADESabbreviation);break;default :throw new IllegalArgumentException("Illegal Suit for Card::toString().");}return sb.toString();}  }
class C{  private void playEarcon(int earconId){  String earconName=mEarconNames.get(earconId);  if (earconName == null) {    Integer resourceId=sSoundsResourceIds.get(earconId);    if (resourceId != null) {      earconName="[" + earconId + "]";      mTts.addEarcon(earconName,getPackageName(),resourceId);      mEarconNames.put(earconId,earconName);    }  }  mTts.playEarcon(earconName,QUEUING_MODE_INTERRUPT,null);}  }
class C{  @Override public boolean equals(Object object){  if (this == object) {    return true;  } else   if ((object == null) || (getClass() != object.getClass())) {    return false;  }  final Terrain other=(Terrain)object;  return (type == other.type) && (level == other.level);}  }
class C{  private Object handleDirectInvocation(final Method invokedMethod,final Object[] args) throws Throwable {  return invokedMethod.invoke(userImpl,args);}  }
class C{  public void edit(Handler h) throws CannotCompileException {}  }
class C{  private boolean dispatchDrawUsingBitmap(Canvas canvas){  Bitmap unmaskBitmap=tryObtainRenderUnmaskBitmap();  Bitmap maskBitmap=tryObtainRenderMaskBitmap();  if (unmaskBitmap == null || maskBitmap == null) {    return false;  }  drawUnmasked(new Canvas(unmaskBitmap));  canvas.drawBitmap(unmaskBitmap,0,0,mAlphaPaint);  drawMasked(new Canvas(maskBitmap));  canvas.drawBitmap(maskBitmap,0,0,null);  return true;}  }
class C{  protected StateMachine_Impl(){  super();}  }
class C{  public void testUnsupportedCallbackException04(){  UnsupportedCallbackException ucE;  for (int i=0; i < msgs.length; i++) {    ucE=new UnsupportedCallbackException(null,msgs[i]);    assertEquals("getMessage() must return: ".concat(msgs[i]),ucE.getMessage(),msgs[i]);    assertNull("getCallback() must return null.",ucE.getCallback());  }}  }
class C{  @Transactional public List<InstrumentOtherDetails> updateInstrumentOtherDetails(final List<Map<String,Object>> paramList) throws ApplicationRuntimeException {  InstrumentHeader iHeader=null;  InstrumentOtherDetails iOtherDetails=null;  final List<InstrumentOtherDetails> iOtherDetailsList=new ArrayList<InstrumentOtherDetails>();  for (  final Map<String,Object> iOtherDetailsMap : paramList) {    if (iOtherDetailsMap.get(INSTRUMENT_HEADER) == null)     throw new ApplicationRuntimeException(INSTRUMENT_HEADER + IS_NULL); else {      iHeader=(InstrumentHeader)iOtherDetailsMap.get(INSTRUMENT_HEADER);      iOtherDetails=instrumentOtherDetailsService.find("from InstrumentOtherDetails where instrumentHeaderId=?",iHeader);      if (iOtherDetails == null) {        iOtherDetails=new InstrumentOtherDetails();        iOtherDetails.setInstrumentHeaderId(iHeader);      }      if (iOtherDetailsMap.get(PAYIN_SLIP_ID) == null) {        if (LOGGER.isDebugEnabled())         LOGGER.debug("PayinSlip Id is null");      } else       iOtherDetails.setPayinslipId((CVoucherHeader)iOtherDetailsMap.get(PAYIN_SLIP_ID));      if (iOtherDetailsMap.get(INSTRUMENT_STATUS_DATE) != null) {        new java.sql.Date(((Date)iOtherDetailsMap.get(INSTRUMENT_STATUS_DATE)).getTime());        iOtherDetails.setInstrumentStatusDate(new java.sql.Date(((Date)iOtherDetailsMap.get(INSTRUMENT_STATUS_DATE)).getTime()));      }      if (iOtherDetailsMap.get(RECONCILED_AMOUNT) != null)       iOtherDetails.setReconciledAmount((BigDecimal)iOtherDetailsMap.get(RECONCILED_AMOUNT));      if (iOtherDetailsMap.get(STATUS_ID) == null)       throw new ApplicationRuntimeException("Required Object Status is not Found in the Map "); else       iHeader.setStatusId((EgwStatus)iOtherDetailsMap.get(STATUS_ID));      if (iOtherDetailsMap.get(TRANSACTION_NUMBER) != null)       iHeader.setTransactionNumber((String)iOtherDetailsMap.get(TRANSACTION_NUMBER));      if (iOtherDetailsMap.get(TRANSACTION_DATE) != null)       iHeader.setTransactionDate((Date)iOtherDetailsMap.get(TRANSACTION_DATE));      if (iOtherDetailsMap.get(BANKACCOUNTID) != null)       iHeader.setBankAccountId((Bankaccount)iOtherDetailsMap.get(BANKACCOUNTID));    }    instrumentOtherDetailsService.persist(iOtherDetails);    instrumentHeaderService.persist(iHeader);    if (LOGGER.isDebugEnabled())     LOGGER.debug("updated  otherdetails as " + iOtherDetails);    iOtherDetailsList.add(iOtherDetails);  }  return iOtherDetailsList;}  }
class C{  public synchronized boolean removePooledConnection(PooledConnection conn){  if (conns.remove(new ConnectionDesc(conn))) {    d("remove(): ",conn);    notifyAll();    d("remove(): notify");    td("Remove ",conn);    if (conns.isEmpty()) {      ref=null;    }    return true;  } else {    d("remove(): not found ",conn);    return false;  }}  }
class C{  public static ObservableList<SchemaDescriptor> schemas(Connection conn) throws SQLException {  Collection<String> dbSchemas=DbMetadataReader.getInstance().schemas(conn);  List<SchemaDescriptor> uiSchemas=new ArrayList<>(dbSchemas.size());  for (  String schema : dbSchemas)   uiSchemas.add(new SchemaDescriptor(schema,false));  return FXCollections.observableList(uiSchemas);}  }
class C{  protected void processId(OneToOneMapping mapping){  MetadataDescriptor referenceDescriptor=getReferenceDescriptor();  String referencePKClassName=referenceDescriptor.getPKClassName();  if (referencePKClassName != null) {    String pkClassName=getDescriptor().getPKClassName();    if (pkClassName == null) {      throw ValidationException.invalidCompositePKSpecification(getJavaClass(),pkClassName);    }    if (pkClassName.equals(referencePKClassName)) {      getOwningDescriptor().getPKClassIDs().clear();    } else {      getOwningDescriptor().validateDerivedPKClassId(getAttributeName(),referencePKClassName,getReferenceClassName());    }  } else {    MetadataClass type=null;    if (referenceDescriptor.getClassAccessor().hasDerivedId()) {      type=((ObjectAccessor)referenceDescriptor.getMappingAccessor(referenceDescriptor.getIdAttributeName())).getSimplePKType();    } else {      type=referenceDescriptor.getMappingAccessor(referenceDescriptor.getIdAttributeName()).getRawClass();    }    getOwningDescriptor().validateDerivedPKClassId(getAttributeName(),getBoxedType(type.getName()),getReferenceClassName());  }  getOwningDescriptor().addIdAttributeName(getAttributeName());  for (  DatabaseField pkField : mapping.getForeignKeyFields()) {    getOwningDescriptor().addPrimaryKeyField(pkField);  }}  }
class C{  public V put(K key,V value){  Object k=maskNull(key);  int h=hash(k);  Entry<K,V>[] tab=getTable();  int i=indexFor(h,tab.length);  for (Entry<K,V> e=tab[i]; e != null; e=e.next) {    if (h == e.hash && eq(k,e.get())) {      V oldValue=e.value;      if (value != oldValue)       e.value=value;      return oldValue;    }  }  modCount++;  Entry<K,V> e=tab[i];  tab[i]=new Entry<>(k,value,queue,h,e);  if (++size >= threshold)   resize(tab.length * 2);  return null;}  }
class C{  public HighlightBuilder tagsSchema(String schemaName){  this.tagsSchema=schemaName;  return this;}  }
class C{  private K lowestKey(){  ConcurrentSkipListMap.Node<K,V> n=loNode();  if (isBeforeEnd(n))   return n.key; else   throw new NoSuchElementException();}  }
class C{  public final boolean peek(){  return m_values[m_index];}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/shares") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskResourceRep share(@PathParam("id") URI id,FileSystemShareParam param) throws InternalException {  ArgValidator.checkFieldUriType(id,FileShare.class,"id");  ArgValidator.checkFieldNotNull(param.getShareName(),"name");  ArgValidator.checkFieldNotEmpty(param.getShareName(),"name");  FileShare fs=queryResource(id);  StorageSystem device=_dbClient.queryObject(StorageSystem.class,fs.getStorageDevice());  String task=UUID.randomUUID().toString();  VirtualPool vpool=_dbClient.queryObject(VirtualPool.class,fs.getVirtualPool());  if (!vpool.getProtocols().contains(StorageProtocol.File.CIFS.name())) {    throw APIException.methodNotAllowed.vPoolDoesntSupportProtocol("Vpool Doesnt support " + StorageProtocol.File.CIFS.name() + " protocol");  }  StoragePort sport=_fileScheduler.placeFileShareExport(fs,StorageProtocol.File.CIFS.name(),null);  if (param.getMaxUsers().equalsIgnoreCase(UNLIMITED_USERS)) {    param.setMaxUsers("-1");  }  ArgValidator.checkEntity(fs,id,isIdEmbeddedInURL(id));  if (param.getPermission() == null || param.getPermission().isEmpty()) {    param.setPermission(FileSMBShare.Permission.change.name());  }  String shareName=param.getShareName();  if (CifsShareUtility.doesShareExist(fs,shareName)) {    _log.error("CIFS share: {}, already exists",shareName);    throw APIException.badRequests.duplicateEntityWithField("CIFS share","name");  }  String path=fs.getPath();  _log.info("Path {}",path);  _log.info("Param Share Name : {} SubDirectory : {}",param.getShareName(),param.getSubDirectory());  boolean isSubDirPath=false;  if (param.getSubDirectory() != null && param.getSubDirectory().length() > 0) {    path+="/" + param.getSubDirectory();    isSubDirPath=true;    _log.info("Sub-directory path {}",path);  }  FileSMBShare smbShare=new FileSMBShare(shareName,param.getDescription(),param.getPermissionType(),param.getPermission(),param.getMaxUsers(),null,path);  smbShare.setStoragePortName(sport.getPortName());  smbShare.setStoragePortNetworkId(sport.getPortNetworkId());  smbShare.setStoragePortGroup(sport.getPortGroup());  smbShare.setSubDirPath(isSubDirPath);  _log.info(String.format("Create file system share --- File system id: %1$s, Share name: %2$s, StoragePort: %3$s, PermissionType: %4$s, " + "Permissions: %5$s, Description: %6$s, maxUsers: %7$s",id,smbShare.getName(),sport.getPortName(),smbShare.getPermissionType(),smbShare.getPermission(),smbShare.getDescription(),smbShare.getMaxUsers()));  _log.info("SMB share path {}",smbShare.getPath());  Operation op=_dbClient.createTaskOpStatus(FileShare.class,fs.getId(),task,ResourceOperationTypeEnum.CREATE_FILE_SYSTEM_SHARE);  FileServiceApi fileServiceApi=getFileShareServiceImpl(fs,_dbClient);  fileServiceApi.share(device.getId(),fs.getId(),smbShare,task);  auditOp(OperationTypeEnum.CREATE_FILE_SYSTEM_SHARE,true,AuditLogManager.AUDITOP_BEGIN,smbShare.getName(),smbShare.getPermissionType(),smbShare.getPermission(),smbShare.getMaxUsers(),smbShare.getDescription(),fs.getId().toString());  return toTask(fs,task,op);}  }
class C{  @Override protected List<Double> computeRelatedness(Page page1,Page page2) throws WikiApiException {  List<Double> relatednessValues=new ArrayList<Double>();  Set<Category> categories1=relatednessUtilities.getCategories(page1);  Set<Category> categories2=relatednessUtilities.getCategories(page2);  if (categories1 == null || categories2 == null) {    return null;  }  double depthOfHierarchy=catGraph.getDepth();  if (depthOfHierarchy == 0) {    logger.info("The depth of the hierarchy is 0. Cannot compute LeacockChodorow relatedness.");    return null;  }  for (  Category cat1 : categories1) {    for (    Category cat2 : categories2) {      int pathLength=catGraph.getTaxonomicallyBoundPathLengthInEdges(cat1,cat2);      if (pathLength < 0) {        continue;      }      double relatedness=Math.log((2 * depthOfHierarchy) / (pathLength + 1));      relatednessValues.add(relatedness);    }  }  return relatednessValues;}  }
class C{  public FastAdapterDialog<Item> add(int position,Item item){  mFastItemAdapter.add(position,item);  return this;}  }
class C{  public int keyAt(int index){  return mKeys[index];}  }
class C{  protected void readBitmap(){  currentFrame.ix=readShort();  currentFrame.iy=readShort();  currentFrame.iw=readShort();  currentFrame.ih=readShort();  final int packed=read();  lctFlag=(packed & 0x80) != 0;  lctSize=(int)Math.pow(2,(packed & 0x07) + 1);  currentFrame.interlace=(packed & 0x40) != 0;  if (lctFlag) {    currentFrame.lct=readColorTable(lctSize);  } else {    currentFrame.lct=null;  }  currentFrame.bufferFrameStart=rawData.position();  skipBitmapData();  if (err()) {    return;  }  frameCount++;  frames.add(currentFrame);}  }
class C{  public Rational(double[] num,double[] denom){  N=new Polynomial(num);  D=new Polynomial(denom);}  }
class C{  @Override public boolean derivesId(){  return hasId() || hasMapsId();}  }
class C{  public void doneButtonActionPerformed(){  if (editMode) {    editMode=false;    curNode=null;    addButton.setVisible(true);    editButton.setVisible(true);    deleteButton.setVisible(true);    doneButton.setVisible(true);    updateButton.setVisible(false);    cancelButton.setVisible(false);    nodeAddrField.setVisible(true);    nodeAddrStatic.setVisible(false);  }  if (changedNode) {    javax.swing.JOptionPane.showMessageDialog(this,rb.getString("Reminder1") + "\n" + rb.getString("Reminder2"),rb.getString("ReminderTitle"),javax.swing.JOptionPane.INFORMATION_MESSAGE);  }  setVisible(false);  dispose();}  }
class C{  public static boolean showGuidelines(){  if ((Math.abs(Edge.LEFT.getCoordinate() - Edge.RIGHT.getCoordinate()) < DEFAULT_SHOW_GUIDELINES_LIMIT) || (Math.abs(Edge.TOP.getCoordinate() - Edge.BOTTOM.getCoordinate()) < DEFAULT_SHOW_GUIDELINES_LIMIT))   return false; else   return true;}  }
class C{  protected void addTextEventListeners(BridgeContext ctx,NodeEventTarget e){  if (childNodeRemovedEventListener == null) {    childNodeRemovedEventListener=new DOMChildNodeRemovedEventListener();  }  if (subtreeModifiedEventListener == null) {    subtreeModifiedEventListener=new DOMSubtreeModifiedEventListener();  }  e.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeRemoved",childNodeRemovedEventListener,true,null);  ctx.storeEventListenerNS(e,XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeRemoved",childNodeRemovedEventListener,true);  e.addEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMSubtreeModified",subtreeModifiedEventListener,false,null);  ctx.storeEventListenerNS(e,XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMSubtreeModified",subtreeModifiedEventListener,false);}  }
class C{  public Object clone(){  try {    DateFormatSymbols other=(DateFormatSymbols)super.clone();    copyMembers(this,other);    return other;  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }}  }
class C{  public void fwdDctBlock8x8(int[][] input,int col,int row,double[][] output){  for (int i=0; i < NJPEG; i++) {    for (int j=0; j < NJPEG; j++) {      this.tmpIntArray[i][j]=input[col + i][row + j];    }  }  fwdDct8x8(this.tmpIntArray,output);}  }
class C{  private void testInputOperatorPartitioning(LogicalPlan dag) throws Exception {  File checkpointDir=new File(TEST_OUTPUT_DIR,"testInputOperatorPartitioning");  dag.getAttributes().put(LogicalPlan.APPLICATION_PATH,checkpointDir.getPath());  dag.setAttribute(Context.OperatorContext.STORAGE_AGENT,new AsyncFSStorageAgent(checkpointDir.getPath(),null));  PartitionableInputOperator input=dag.addOperator("input",new PartitionableInputOperator());  dag.setOperatorAttribute(input,OperatorContext.STATS_LISTENERS,Arrays.asList(new StatsListener[]{new PartitionLoadWatch()}));  StramLocalCluster lc=new StramLocalCluster(dag);  lc.setHeartbeatMonitoringEnabled(false);  lc.runAsync();  List<PTOperator> partitions=assertNumberPartitions(3,lc,dag.getMeta(input));  Set<String> partProperties=new HashSet<String>();  for (  PTOperator p : partitions) {    LocalStreamingContainer c=StramTestSupport.waitForActivation(lc,p);    Map<Integer,Node<?>> nodeMap=c.getNodes();    Assert.assertEquals("number operators " + nodeMap,1,nodeMap.size());    PartitionableInputOperator inputDeployed=(PartitionableInputOperator)nodeMap.get(p.getId()).getOperator();    Assert.assertNotNull(inputDeployed);    partProperties.add(inputDeployed.partitionProperty);    Checkpoint checkpoint=new Checkpoint(10L,0,0);    p.checkpoints.add(checkpoint);    p.setRecoveryCheckpoint(checkpoint);    AsyncFSStorageAgent agent=new AsyncFSStorageAgent(checkpointDir.getPath(),null);    agent.save(inputDeployed,p.getId(),10L);    agent.copyToHDFS(p.getId(),10L);  }  Assert.assertEquals("",Sets.newHashSet("partition_0","partition_1","partition_2"),partProperties);  PartitionLoadWatch.put(partitions.get(0),1);  int count=0;  long startMillis=System.currentTimeMillis();  while (count == 0 && startMillis > System.currentTimeMillis() - StramTestSupport.DEFAULT_TIMEOUT_MILLIS) {    count+=lc.dnmgr.processEvents();  }  PartitionLoadWatch.remove(partitions.get(0));  partitions=assertNumberPartitions(3,lc,dag.getMeta(input));  partProperties=new HashSet<String>();  for (  PTOperator p : partitions) {    LocalStreamingContainer c=StramTestSupport.waitForActivation(lc,p);    Map<Integer,Node<?>> nodeMap=c.getNodes();    Assert.assertEquals("number operators " + nodeMap,1,nodeMap.size());    PartitionableInputOperator inputDeployed=(PartitionableInputOperator)nodeMap.get(p.getId()).getOperator();    Assert.assertNotNull(inputDeployed);    partProperties.add(inputDeployed.partitionProperty);  }  Assert.assertEquals("",Sets.newHashSet("partition_0_0","partition_1_1","partition_2_2"),partProperties);  lc.shutdown();}  }
class C{  public void checkTransactionManagerToken(String xml) throws Exception {  XMLAssert.assertXpathEvaluatesTo("javax.transaction.UserTransaction","//Engine/DefaultContext/Resource[@name='UserTransaction']/@type",xml);  XMLAssert.assertXpathEvaluatesTo("Container","//Engine/DefaultContext/Resource[@name='UserTransaction']/@auth",xml);  XMLAssert.assertXpathEvaluatesTo("org.objectweb.jotm.UserTransactionFactory","//Engine/DefaultContext/ResourceParams[@name='UserTransaction']" + "/parameter[name='factory']/value",xml);  XMLAssert.assertXpathEvaluatesTo("60","//Engine/DefaultContext/ResourceParams[@name='UserTransaction']" + "/parameter[name='jotm.timeout']/value",xml);}  }
class C{  private KeyPair generateVapidKeys() throws NoSuchProviderException, NoSuchAlgorithmException, InvalidAlgorithmParameterException {  KeyPairGenerator keyPairGenerator=KeyPairGenerator.getInstance("ECDSA","BC");  keyPairGenerator.initialize(ECNamedCurveTable.getParameterSpec("prime256v1"),new SecureRandom());  return keyPairGenerator.generateKeyPair();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Long(Seeker.getInstance().getUsedImportedLibraryDiskspace());}  }
class C{  public ProvisioningSettings(HashMap<String,String> parameters,HashMap<String,String> configSettings,String locale){  super(configSettings);  this.parameters=parameters;  this.locale=locale;}  }
class C{  public CompilerConfiguration addCompilationCustomizers(CompilationCustomizer... customizers){  if (customizers == null)   throw new IllegalArgumentException("provided customizers list must not be null");  compilationCustomizers.addAll(Arrays.asList(customizers));  return this;}  }
class C{  public Response updateUser(UserEntity userEntity){  return restClient.put("users/" + userEntity.getUsername(),userEntity,new HashMap<String,String>());}  }
class C{  protected AdaptableHeuristicFunction createHeuristic(int heuIdx){  AdaptableHeuristicFunction ahf=null;switch (heuIdx) {case 0:    ahf=new H1();  break;default :ahf=new H2();}return ahf;}  }
class C{  public boolean isUninstallable(){  return uninstallable;}  }
class C{  protected void commitTransaction() throws SQLException {  try {    conn.commit();    commitCount++;  } catch (  SQLException e) {    logger.error("Failed to commit : " + e);    throw e;  } finally {    transactionStarted=false;    conn.setAutoCommit(true);  }}  }
class C{  public void add(Permission permission){  if (isReadOnly())   throw new SecurityException("attempt to add a Permission to a readonly Permissions object");  PermissionCollection pc;synchronized (this) {    pc=getPermissionCollection(permission,true);    pc.add(permission);  }  if (permission instanceof AllPermission) {    allPermission=pc;  }  if (permission instanceof UnresolvedPermission) {    hasUnresolved=true;  }}  }
class C{  private boolean isOutOfBounds(MotionEvent event){  final int x=(int)event.getX();  final int y=(int)event.getY();  final int slop=ViewConfiguration.get(getContext()).getScaledWindowTouchSlop();  final View decorView=getWindow().getDecorView();  return (x < -slop) || (y < -slop) || (x > (decorView.getWidth() + slop))|| (y > (decorView.getHeight() + slop));}  }
class C{  public void addAll(Iterator<? extends Number> values){  while (values.hasNext()) {    add(values.next().doubleValue());  }}  }
class C{  public void edge(boolean edge){  g.edge(edge);}  }
class C{  public TypeTuple(List<Type> list){  this.list=new ArrayList<>(list);}  }
class C{  public Range findValueRange(Range xRange,TimePeriodAnchor xAnchor,TimeZone zone){  ParamChecks.nullNotPermitted(xRange,"xRange");  ParamChecks.nullNotPermitted(xAnchor,"xAnchor");  ParamChecks.nullNotPermitted(zone,"zone");  if (this.data.isEmpty()) {    return null;  }  Calendar calendar=Calendar.getInstance(zone);  double lowY=Double.POSITIVE_INFINITY;  double highY=Double.NEGATIVE_INFINITY;  for (int i=0; i < this.data.size(); i++) {    TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(i);    long millis=item.getPeriod().getMillisecond(xAnchor,calendar);    if (xRange.contains(millis)) {      Number n=item.getValue();      if (n != null) {        double v=n.doubleValue();        lowY=minIgnoreNaN(lowY,v);        highY=maxIgnoreNaN(highY,v);      }    }  }  if (Double.isInfinite(lowY) && Double.isInfinite(highY)) {    if (lowY < highY) {      return new Range(lowY,highY);    } else {      return new Range(Double.NaN,Double.NaN);    }  }  return new Range(lowY,highY);}  }
class C{  public void testErrorOnEvalCall(){  Context cx=Context.enter();  try {    cx.setOptimizationLevel(-1);    Script script=cx.compileString("eval('myObject.f(3);');","test source",1,null);    cx.executeScriptWithContinuations(script,globalScope);    fail("Should throw IllegalStateException");  } catch (  WrappedException we) {    Throwable t=we.getWrappedException();    assertTrue(t instanceof IllegalStateException);    assertTrue(t.getMessage().startsWith("Cannot capture continuation"));  } finally {    Context.exit();  }}  }
class C{  public IgfsByteDelimiterRecordResolver(byte[]... delims){  if (delims == null || delims.length == 0)   throw new IllegalArgumentException("Delimiters cannot be null or empty.");  this.delims=delims;  int maxDelimLen=0;  for (  byte[] delim : delims) {    if (delim == null)     throw new IllegalArgumentException("Delimiter cannot be null."); else     if (maxDelimLen < delim.length)     maxDelimLen=delim.length;  }  this.maxDelimLen=maxDelimLen;}  }
class C{  @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case DomPackage.INLINE_TAG__TITLE:    if (title != null)     msgs=((InternalEObject)title).eInverseRemove(this,EOPPOSITE_FEATURE_BASE - DomPackage.INLINE_TAG__TITLE,null,msgs);  return basicSetTitle((TagTitle)otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  protected boolean[] canTakeOptions(){  boolean[] result=new boolean[2];  print("options...");  if (m_Associator instanceof OptionHandler) {    println("yes");    if (m_Debug) {      println("\n=== Full report ===");      Enumeration<Option> enu=((OptionHandler)m_Associator).listOptions();      while (enu.hasMoreElements()) {        Option option=enu.nextElement();        print(option.synopsis() + "\n" + option.description()+ "\n");      }      println("\n");    }    result[0]=true;  } else {    println("no");    result[0]=false;  }  return result;}  }
class C{  private static File ensureSuffix(File file,String suffix){  String fileName=file.getName();  if (!fileName.endsWith(suffix)) {    fileName+="." + suffix;    return new File(file.getParent(),fileName);  } else {    return file;  }}  }
class C{  public boolean isLog(){  return log;}  }
class C{  BigqueryConnection newConnection() throws Exception {  BigqueryConnection connection=new BigqueryConnection.Builder().setExecutorService(Executors.newFixedThreadPool(bigqueryNumThreads)).setCredential(newCredential()).setDatasetId(bigqueryDataset).setOverwrite(bigqueryOverwrite).setPollInterval(bigqueryPollInterval).build();  connection.initialize();  return connection;}  }
class C{  TransformIterator(final Iterator<B> itr,final TransformAction<B,A> act){  this.action=act;  this.iterator=itr;}  }
class C{  public void showDialog(){  setVisible(true);  toFront();}  }
class C{  private boolean downloadNewAndChangedFiles(final String contentUrl,final ManifestDiff diff){  final List<ManifestFile> downloadFiles=diff.getUpdateFiles();  boolean isFinishedWithSuccess=true;  try {    FileDownloader.downloadFiles(filesStructure.getDownloadFolder(),contentUrl,downloadFiles,requestHeaders);  } catch (  Exception e) {    e.printStackTrace();    isFinishedWithSuccess=false;  }  return isFinishedWithSuccess;}  }
class C{  public void removeForeignKey(int idx){  foreignKeys.remove(idx);}  }
class C{  public MatchTuples<T> assertThat(String key,Matcher matcher){  assertThat(new TupleMatcher<T>(key,matcher,mask));  return this;}  }
class C{  @Override public String generateToolTip(PieDataset dataset,Comparable key){  return generateSectionLabel(dataset,key);}  }
class C{  public void clear(){  if (showTimer != null) {    showTimer.cancel();    showTimer=null;  }  if (timer != null) {    timer.cancel();    timer=null;  }  removeStatus(this);}  }
class C{  public String optString(String key){  return this.optString(key,"");}  }
class C{  public static void deleteSitemap(WebmasterToolsService myService,String siteUrl,String sitemapUrl) throws IOException, ServiceException {  String siteId=URLEncoder.encode(siteUrl,"UTF-8");  String sitemapId=URLEncoder.encode(sitemapUrl,"UTF-8");  URL feedUrl=new URL(getSitemapsFeedUrl(siteId) + sitemapId);  SitemapsRegularEntry entry=myService.getEntry(feedUrl,SitemapsRegularEntry.class);  System.out.println("Now deleting Sitemap: " + sitemapUrl);  entry.delete();}  }
class C{  public static _InformationEditOptions fromString(final String value) throws SOAPSerializationException {  return (_InformationEditOptions)Enumeration.fromString(value,_InformationEditOptions.VALUES_TO_INSTANCES);}  }
class C{  static public void dispose(){  thisMenu=null;}  }
class C{  char[] convertToHex(byte[] hash){  int i;  byte j;  byte fifteen=15;  char[] hex=new char[32];  for (i=0; i < 16; i++) {    hex[i * 2]=getHexChar((byte)((hash[i] & 0xf0) >> 4));    hex[(i * 2) + 1]=getHexChar((byte)(hash[i] & 0x0f));  }  return hex;}  }
class C{  public Object convert(Class<?> targetType,Object valueToConvert) throws JavaTypeTranslatorException {  Money rVal=null;  if (valueToConvert == null) {    throw new JavaTypeTranslatorException("Null passed toObjectToMoney.convert()");  }  if (valueToConvert instanceof String) {    String stringValue=(String)valueToConvert;    rVal=new Money(stringValue);  } else {    throw new JavaTypeTranslatorException("internal error parsing value");  }  return (rVal);}  }
class C{  protected void sendFunctionGroup3(){  byte[] result=jmri.NmraPacket.function9Through12Packet(address,(address >= 100),getF9(),getF10(),getF11(),getF12());  TrafficController.instance().sendPacket(result,1);}  }
class C{  public AssociationRules(List<AssociationRule> rules,String producer){  m_rules=rules;  m_producer=producer;}  }
class C{  public static DomainHistoryObject<?> create(DomainObject<?> obj,ModificationType type,String user){  final DomainHistoryObject<?> history=createHistoryObject(obj);  history.setObjVersion(getVersion(obj,type));  history.setModtype(type);  final Long modificationTime=obj.getHistoryModificationTime();  Date currentDate=DateFactory.getInstance().getTransactionDate();  if (currentDate == null) {    currentDate=new Date();  }  if (modificationTime == null) {    history.setModdate(currentDate);  } else {    history.setModdate(new Date(modificationTime.longValue()));  }  history.setInvocationDate(currentDate);  history.setModuser(user);  return history;}  }
class C{  public void deleteMapIcon(MapIcon icon){  MapIcon existing=mIcons.get(icon.getName());  if (existing != null) {    mIcons.remove(icon.getName());    mSettings.removeSetting(existing);    broadcastSettingDeleted(existing);    scheduleSettingsSave();  }}  }
class C{  void write(final long addr,final ByteBuffer data){  final int position=buf.buffer().position();  buf.buffer().put(data);  writeCacheIndex.put(Long.valueOf(addr),Integer.valueOf(position));}  }
class C{  @Override public RecyclerView.ViewHolder newFooterHolder(View view){  return new UltimateRecyclerviewViewHolder<>(view);}  }
class C{  public boolean isValid(){  return valid;}  }
class C{  @Override public boolean accept(DatagramPacket p){  if (super.accept(p)) {    return true;  } else {    return false;  }}  }
class C{  public static boolean isVisorRequiredProperty(String name){  return "java.version".equals(name) || "java.vm.name".equals(name) || "os.arch".equals(name)|| "os.name".equals(name)|| "os.version".equals(name);}  }
class C{  public double margin(){  if ((m_Actual == MISSING_VALUE) || (m_Predicted == MISSING_VALUE)) {    return MISSING_VALUE;  }  double probActual=m_Distribution[(int)m_Actual];  double probNext=0;  for (int i=0; i < m_Distribution.length; i++)   if ((i != m_Actual) && (m_Distribution[i] > probNext))   probNext=m_Distribution[i];  return probActual - probNext;}  }
class C{  public Page replaceExceptFirst(PageFactory factory){  return replaceExceptFirst(factory,new NoAnimationFactory());}  }
class C{  public boolean importData(JComponent comp,Transferable t){  return false;}  }
class C{  private short parseShortError(String s,int def,String desc,Player player){  short val=(short)def;  try {    val=Short.parseShort(s);  } catch (  NumberFormatException e) {    player.sendPrivateText("Invalid " + desc + " value '"+ s+ "'.");  }  return val;}  }
class C{  public ReilOperand(final OperandSize size,final String value){  this(ReilHelpers.createOperand(OperandSize.valueOf(size),value));}  }
class C{  @Override public void mousePressed(MouseEvent e){  int x=e.getX();  int y=e.getY();  if (isPerformingAction(e,MainWindow.settings.getSelectAction())) {    selecting_area=true;    shaping_action=getCursorSelectionPosition(x,y);    if (shaping_action != CursorSelectionPosition.OUTSIDE) {      shaping_selection=true;      origin_x=x;      origin_y=y;      ssx=selection_start_x;      ssz=selection_start_z;      sex=selection_end_x;      sez=selection_end_z;      return;    }    setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));    selection_start_x=(int)Math.floor((e.getX() / zoom_level - shift_x) / 4);    selection_start_z=(int)Math.floor((e.getY() / zoom_level - shift_y) / 4);    if (selectchunks) {      if (selection_start_x % 16 != 0) {        selection_start_x=Math.round(selection_start_x / 16) * 16;      }      if (selection_start_z % 16 != 0) {        selection_start_z=Math.round(selection_start_z / 16) * 16;      }    }    return;  }  if (isPerformingAction(e,MainWindow.settings.getMoveAction())) {    setCursor(Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR));    last_x=e.getX();    last_y=e.getY();    moving_map=true;  }}  }
class C{  public ContinuousTimeFramer(FramingFlowType framingFlow) throws AdeException {  super();  m_outerFramingFlow=framingFlow;  setPropsFromFramingFlowType(m_outerFramingFlow);  processSplitFactors();}  }
class C{  public boolean isEOL(){  return (type == EOL || type == EOF);}  }
class C{  public StopAnalyzer(CharArraySet stopWords){  super(stopWords);}  }
class C{  public void loadPixels(){  g.loadPixels();  pixels=g.pixels;}  }
class C{  protected List<INode> findMultiLineComments(EObject eObject){  INode elementNode=NodeModelUtils.findActualNodeFor(eObject);  HiddenLeafs hLeafs=hla.getHiddenLeafsBefore(elementNode);  if (!hLeafs.containsComment()) {    return null;  }  List<LeafInfo> leafs=hLeafs.getLeafs();  List<INode> comments=new ArrayList<>();  final TerminalRule SL=grammarAccess.getSL_COMMENTRule();  for (  LeafInfo li : leafs) {    if (li instanceof CommentInfo) {      INode commentNode=li.getNode();      EObject ge=commentNode.getGrammarElement();      if (ge != SL) {        comments.add(commentNode);      }    }  }  return comments;}  }
class C{  public X509Name(boolean reverse,Hashtable lookUp,String dirName,X509NameEntryConverter converter){  this.converter=converter;  X509NameTokenizer nTok=new X509NameTokenizer(dirName);  while (nTok.hasMoreTokens()) {    String token=nTok.nextToken();    if (token.indexOf('+') > 0) {      X509NameTokenizer pTok=new X509NameTokenizer(token,'+');      addEntry(lookUp,pTok.nextToken(),FALSE);      while (pTok.hasMoreTokens()) {        addEntry(lookUp,pTok.nextToken(),TRUE);      }    } else {      addEntry(lookUp,token,FALSE);    }  }  if (reverse) {    Vector o=new Vector();    Vector v=new Vector();    Vector a=new Vector();    int count=1;    for (int i=0; i < this.ordering.size(); i++) {      if (((Boolean)this.added.elementAt(i)).booleanValue()) {        o.insertElementAt(this.ordering.elementAt(i),count);        v.insertElementAt(this.values.elementAt(i),count);        a.insertElementAt(this.added.elementAt(i),count);        count++;      } else {        o.insertElementAt(this.ordering.elementAt(i),0);        v.insertElementAt(this.values.elementAt(i),0);        a.insertElementAt(this.added.elementAt(i),0);        count=1;      }    }    this.ordering=o;    this.values=v;    this.added=a;  }}  }
class C{  public void visit(ASTNode[] nodes,SourceUnit source){  if (!(nodes[0] instanceof AnnotationNode) || !(nodes[1] instanceof AnnotatedNode)) {    throw new RuntimeException("Internal error: wrong types: $node.class / $parent.class");  }  AnnotationNode node=(AnnotationNode)nodes[0];  AnnotatedNode parent=(AnnotatedNode)nodes[1];  if (VetoableASTTransformation.hasVetoableAnnotation(parent)) {    return;  }  ClassNode declaringClass=parent.getDeclaringClass();  if (parent instanceof FieldNode) {    if ((((FieldNode)parent).getModifiers() & Opcodes.ACC_FINAL) != 0) {      source.getErrorCollector().addErrorAndContinue(new SyntaxErrorMessage(new SyntaxException("@groovy.beans.Bindable cannot annotate a final property.",node.getLineNumber(),node.getColumnNumber(),node.getLastLineNumber(),node.getLastColumnNumber()),source));    }    if (VetoableASTTransformation.hasVetoableAnnotation(parent.getDeclaringClass())) {      return;    }    addListenerToProperty(source,node,declaringClass,(FieldNode)parent);  } else   if (parent instanceof ClassNode) {    addListenerToClass(source,(ClassNode)parent);  }}  }
class C{  protected static TLCState BACK_TO_STATE(int number,String modelName){  TLCState state=new TLCState(number,modelName);  state.isBackToState=true;  return state;}  }
class C{  private boolean isValidPath(String path){  if (path == null) {    return false;  }  if (!PATH_PATTERN.matcher(path).matches()) {    return false;  }  int slash2Count=countToken("//",path);  int slashCount=countToken("/",path);  int dot2Count=countToken("..",path);  return (dot2Count <= 0) || ((slashCount - slash2Count - 1) > dot2Count);}  }
class C{  private int count(){  int n=data.getRowCount();  if (n >= 0) {    return (n);  }  n=-1;  while (true) {    data.setRowIndex(n++);    if (!data.isRowAvailable()) {      break;    }  }  return (n);}  }
class C{  public static void beginSection(String sectionName){  if (ExoPlayerLibraryInfo.TRACE_ENABLED && Util.SDK_INT >= 18) {    beginSectionV18(sectionName);  }}  }
class C{  private static <T>void batchCount(T[] array,int start,int end,CountProcedure<T> castProcedure){  for (int i=start; i < end; i++) {    castProcedure.value(array[i]);  }}  }
class C{  public void parse(InputStream in,String encoding) throws IOException, SAXException {  try {    _xmlReader.setInput(in,encoding);    parseAll();  } catch (  XMLStreamException e) {    if (e.getNestedException() instanceof IOException)     throw (IOException)e.getNestedException();    throw new SAXException(e.getMessage());  } finally {    _xmlReader.reset();  }}  }
class C{  private static void stuffDelayedControlTransfers(LIR l,AbstractBlockBase<?> block){  List<LIRInstruction> instructions=l.getLIRforBlock(block);  if (instructions.size() >= 2) {    LIRDependencyAccumulator acc=new LIRDependencyAccumulator();    SPARCDelayedControlTransfer delayedTransfer=null;    int delayTransferPosition=-1;    for (int i=instructions.size() - 1; i >= 0; i--) {      LIRInstruction inst=instructions.get(i);      boolean adjacent=delayTransferPosition - i == 1;      if (!adjacent || inst.destroysCallerSavedRegisters() || leavesRegisterWindow(inst)) {        delayedTransfer=null;      }      if (inst instanceof SPARCDelayedControlTransfer) {        delayedTransfer=(SPARCDelayedControlTransfer)inst;        acc.start(inst);        delayTransferPosition=i;      } else       if (delayedTransfer != null) {        boolean overlap=acc.add(inst);        if (!overlap && inst instanceof SPARCTailDelayedLIRInstruction) {          ((SPARCTailDelayedLIRInstruction)inst).setDelayedControlTransfer(delayedTransfer);          delayedTransfer=null;        }      }    }  }}  }
class C{  public boolean exists(@NotNull final URL url){  requireNonNull(url,"URL parameter cannot be null");  try {    final URLConnection urlConnection=url.openConnection();    urlConnection.setConnectTimeout(CONNECTION_TIMEOUT);    if (urlConnection instanceof HttpURLConnection) {      return exists((HttpURLConnection)urlConnection);    } else {      urlConnection.connect();      return true;    }  } catch (  IOException ioe) {    LOG.debug(UNABLE_TO_CHECK_MESSAGE,url,ioe);    return false;  }}  }
class C{  public void testClusterSerialization() throws IOException {  Cluster[] tc=new Cluster[12];  for (int i=0; i < tc.length; i++) {    double[] test=new double[128];    for (int j=0; j < test.length; j++) {      test[j]=(Math.random() * 1000);    }    tc[i]=new Cluster(test);  }  Cluster.writeClusters(tc,"test-tmp.dat");  Cluster[] clusters=Cluster.readClusters("test-tmp.dat");  for (int i=0; i < clusters.length; i++) {    System.out.println(clusters[i].toString().equals(tc[i].toString()));  }}  }
class C{  public static String convertTopLevelFont(String styles,FontData fontData){  boolean bold=(fontData.getStyle() & SWT.BOLD) != 0;  boolean italic=(fontData.getStyle() & SWT.ITALIC) != 0;  String size=Integer.toString(fontData.getHeight()) + UNIT;  String family="'" + fontData.getName() + "',sans-serif";  styles=styles.replaceFirst("(html\\s*\\{.*(?:\\s|;)font-size:\\s*)\\d+pt(\\;?.*\\})","$1" + size + "$2");  styles=styles.replaceFirst("(html\\s*\\{.*(?:\\s|;)font-weight:\\s*)\\w+(\\;?.*\\})","$1" + (bold ? "bold" : "normal") + "$2");  styles=styles.replaceFirst("(html\\s*\\{.*(?:\\s|;)font-style:\\s*)\\w+(\\;?.*\\})","$1" + (italic ? "italic" : "normal") + "$2");  styles=styles.replaceFirst("(html\\s*\\{.*(?:\\s|;)font-family:\\s*).+?(;.*\\})","$1" + family + "$2");  return styles;}  }
class C{  private boolean conditionM0(String value,int index){  if (charAt(value,index + 1) == 'M') {    return true;  }  return contains(value,index - 1,3,"UMB") && ((index + 1) == value.length() - 1 || contains(value,index + 2,2,"ER"));}  }
class C{  public void connect(String view){  try {    reader=new NetMapReader(server,port,this,view);    reader.start();    if (serverPanel != null) {      serverAddrField.setEnabled(false);      serverPortField.setEnabled(false);      controlButton.setText(ServerDisconnectCmd);      controlButton.setActionCommand(ServerDisconnectCmd);    }  } catch (  IOException e) {    Debug.message("netmap","Can't start reader: " + e);    disconnect();  }}  }
class C{  public void reset(){  digest.reset();  messageLength=0;  clearBlock(mBuf);  if (recoveredMessage != null) {    clearBlock(recoveredMessage);  }  recoveredMessage=null;  fullMessage=false;  if (preSig != null) {    preSig=null;    clearBlock(preBlock);    preBlock=null;  }}  }
class C{  public static OutputCatcher start(){  return new OutputCatcher();}  }
class C{  @Override protected void transfer(String seqRange) throws IOException {  final Long id=mNames.get(mHandler.handleSequenceName(seqRange).label());  if (id != null) {    transfer(id);  } else {    warnInvalidSequence(seqRange);  }}  }
class C{  public static void openBrowser(String url) throws Exception {  try {    String osName=StringUtils.toLowerEnglish(Utils.getProperty("os.name","linux"));    Runtime rt=Runtime.getRuntime();    String browser=Utils.getProperty(SysProperties.H2_BROWSER,null);    if (browser == null) {      try {        browser=System.getenv("BROWSER");      } catch (      SecurityException se) {      }    }    if (browser != null) {      if (browser.startsWith("call:")) {        browser=browser.substring("call:".length());        Utils.callStaticMethod(browser,url);      } else       if (browser.contains("%url")) {        String[] args=StringUtils.arraySplit(browser,',',false);        for (int i=0; i < args.length; i++) {          args[i]=StringUtils.replaceAll(args[i],"%url",url);        }        rt.exec(args);      } else       if (osName.contains("windows")) {        rt.exec(new String[]{"cmd.exe","/C",browser,url});      } else {        rt.exec(new String[]{browser,url});      }      return;    }    try {      Class<?> desktopClass=Class.forName("java.awt.Desktop");      Boolean supported=(Boolean)desktopClass.getMethod("isDesktopSupported").invoke(null,new Object[0]);      URI uri=new URI(url);      if (supported) {        Object desktop=desktopClass.getMethod("getDesktop").invoke(null,new Object[0]);        desktopClass.getMethod("browse",URI.class).invoke(desktop,uri);        return;      }    } catch (    Exception e) {    }    if (osName.contains("windows")) {      rt.exec(new String[]{"rundll32","url.dll,FileProtocolHandler",url});    } else     if (osName.contains("mac") || osName.contains("darwin")) {      Runtime.getRuntime().exec(new String[]{"open",url});    } else {      String[] browsers={"xdg-open","chromium","google-chrome","firefox","mozilla-firefox","mozilla","konqueror","netscape","opera","midori"};      boolean ok=false;      for (      String b : browsers) {        try {          rt.exec(new String[]{b,url});          ok=true;          break;        } catch (        Exception e) {        }      }      if (!ok) {        throw new Exception("Browser detection failed and system property " + SysProperties.H2_BROWSER + " not set");      }    }  } catch (  Exception e) {    throw new Exception("Failed to start a browser to open the URL " + url + ": "+ e.getMessage());  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (value: ");  result.append(value);  result.append(')');  return result.toString();}  }
class C{  public static void createSomeSupportedCountries(DataService mgr) throws NonUniqueBusinessKeyException {  findOrCreate(mgr,Locale.GERMANY.getCountry());  findOrCreate(mgr,Locale.JAPAN.getCountry());  findOrCreate(mgr,Locale.UK.getCountry());}  }
class C{  public CBCBlockCipherMac(BlockCipher cipher){  this(cipher,(cipher.getBlockSize() * 8) / 2,null);}  }
class C{  public Container() throws Exception {  this(false,null);}  }
class C{  protected void validateEntityId(BaseStorageEntity[] param){}  }
class C{  public void reset(){  count=0;}  }
class C{  public TBase<?,?> result(){  if (isException()) {    throw new IllegalStateException("not a reply but an exception");  }  return result;}  }
class C{  public void loadBasicClasses(){  for (int i=SootClass.BODIES; i >= SootClass.HIERARCHY; i--) {    for (    String name : basicclasses[i]) {      tryLoadClass(name,i);    }  }}  }
class C{  private void cancelNotification(){  final NotificationManager nm=(NotificationManager)getSystemService(NOTIFICATION_SERVICE);  nm.cancel(NOTIFICATION_ID);}  }
class C{  @Override public void run(){  amIActive=true;  String shapefile=null;  String inputFieldsString=null;  String[] fieldNames=null;  int numFields;  int progress=0;  int lastProgress=0;  int row;  int a, i, j;  double[] fieldAverages;  double[] fieldTotals;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFieldsString=args[0];  try {    String[] inputs=inputFieldsString.split(";");    shapefile=inputs[0];    numFields=inputs.length - 1;    fieldNames=new String[numFields];    System.arraycopy(inputs,1,fieldNames,0,numFields);    AttributeTable table=new AttributeTable(shapefile.replace(".shp",".dbf"));    int numRecs=table.getNumberOfRecords();    DBFField[] fields=table.getAllFields();    ArrayList<Integer> PCAFields=new ArrayList<Integer>();    for (j=0; j < fieldNames.length; j++) {      for (i=0; i < fields.length; i++) {        if (fields[i].getName().equals(fieldNames[j]) && (fields[i].getDataType() == DBFField.DBFDataType.NUMERIC || fields[i].getDataType() == DBFField.DBFDataType.FLOAT)) {          PCAFields.add(i);        }      }    }    if (numFields != PCAFields.size()) {      showFeedback("Not all of the specified database fields were found in the file or " + "a field of a non-numerical type was selected.");      return;    }    double[][] fieldArray=new double[numRecs][numFields];    Object[] rec;    for (i=0; i < numRecs; i++) {      rec=table.getRecord(i);      for (j=0; j < numFields; j++) {        fieldArray[i][j]=(Double)(rec[PCAFields.get(j)]);      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * i / (numRecs - 1));      if (progress != lastProgress) {        updateProgress("Reading data:",progress);      }      lastProgress=progress;    }    fieldAverages=new double[numFields];    fieldTotals=new double[numFields];    for (row=0; row < numRecs; row++) {      for (i=0; i < numFields; i++) {        fieldTotals[i]+=fieldArray[row][i];      }    }    for (i=0; i < numFields; i++) {      fieldAverages[i]=fieldTotals[i] / numRecs;    }    double[] fieldTotalDeviation=new double[numFields];    double[][] covariances=new double[numFields][numFields];    double[][] correlationMatrix=new double[numFields][numFields];    for (row=0; row < numRecs; row++) {      for (i=0; i < numFields; i++) {        fieldTotalDeviation[i]+=(fieldArray[row][i] - fieldAverages[i]) * (fieldArray[row][i] - fieldAverages[i]);        for (a=0; a < numFields; a++) {          covariances[i][a]+=(fieldArray[row][i] - fieldAverages[i]) * (fieldArray[row][a] - fieldAverages[a]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (numRecs - 1));      if (progress != lastProgress) {        updateProgress("Calculating covariances:",progress);      }      lastProgress=progress;    }    for (i=0; i < numFields; i++) {      for (a=0; a < numFields; a++) {        correlationMatrix[i][a]=covariances[i][a] / (Math.sqrt(fieldTotalDeviation[i] * fieldTotalDeviation[a]));      }    }    String ret="IMAGE CORRELATION MATRIX\n\n";    String headers="\t";    for (a=0; a < numFields; a++) {      headers=headers + "Field" + (a + 1)+ "\t";    }    ret+=headers;    DecimalFormat df=new DecimalFormat("0.0000");    for (a=0; a < numFields; a++) {      ret+="\nField" + (a + 1) + "\t";      for (int b=0; b <= a; b++) {        if (correlationMatrix[a][b] != -99) {          if (correlationMatrix[a][b] >= 0) {            ret+="  " + df.format(correlationMatrix[a][b]) + "\t";          } else {            ret+=df.format(correlationMatrix[a][b]) + "\t";          }        } else {          ret+="\t";        }      }    }    ret+="\n\n";    for (i=0; i < numFields; i++) {      ret+="Field " + (i + 1) + "\t"+ fieldNames[i]+ "\n";    }    returnData(ret);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public ScoringFunction createNewScoringFunction(Person person){  final CharyparNagelScoringParameters parameters=this.params.getScoringParameters(person);  SumScoringFunction sumScoringFunction=new SumScoringFunction();  sumScoringFunction.addScoringFunction(new CharyparNagelActivityScoring(parameters));  sumScoringFunction.addScoringFunction(new CharyparNagelLegScoring(parameters,this.network));  sumScoringFunction.addScoringFunction(new CharyparNagelMoneyScoring(parameters));  sumScoringFunction.addScoringFunction(new CharyparNagelAgentStuckScoring(parameters));  return sumScoringFunction;}  }
class C{  public void mouseExited(MouseEvent e){  if (AWTEventMonitor.mouseListener_private != null) {    AWTEventMonitor.mouseListener_private.mouseExited(e);  }}  }
class C{  public ProductSearchResult execute() throws ObjectNotFoundException {  List<Product> foundServices=new ArrayList<Product>();  int resultSize=0;  prepareSql();  if (doObjectQuery) {    foundServices=executeObjectQuery();    resultSize=foundServices.size();  }  if (doCountQuery) {    resultSize=executeCountQuery();  }  ProductSearchResult result=new ProductSearchResult();  result.setResultSize(resultSize);  result.setServices(foundServices);  return result;}  }
class C{  @Override protected void observableDeactivated(){  if (activationHandler != null) {    activationHandler.observableDeactivated(this);  }}  }
class C{  public int purge(){synchronized (impl) {    return impl.purge();  }}  }
class C{  public static boolean isArray(Element arrayE){  String name=arrayE.getTagName();  if (name.equals("Array") || name.equals("NUM-ARRAY") || name.equals("INT-ARRAY")|| name.equals("REAL-ARRAY")|| name.equals("STRING-ARRAY")|| isSparseArray(arrayE)) {    return true;  }  return false;}  }
class C{  public static JSONObject rowToJSONObject(JSONArray names,JSONTokener x) throws JSONException {  JSONArray ja=rowToJSONArray(x);  return ja != null ? ja.toJSONObject(names) : null;}  }
class C{  public boolean isGREATER(){  return value == GREATER;}  }
class C{  public boolean hasNext(){  if (bufferOffset < bufferFillSize) {    return true;  } else {    return this.fillBuffer();  }}  }
class C{  public UserModificationConstraintException(String message,UserModificationConstraintExceptionBean bean,Throwable cause){  super(message,bean,cause);  this.bean=bean;}  }
class C{  public static void onSaveState(Bundle bundle){  ReferenceHolder[] list=new ReferenceHolder[ManagerSuperCardToast.getInstance().getList().size()];  LinkedList<SuperCardToast> lister=ManagerSuperCardToast.getInstance().getList();  for (int i=0; i < list.length; i++) {    list[i]=new ReferenceHolder(lister.get(i));  }  bundle.putParcelableArray(BUNDLE_TAG,list);  SuperCardToast.cancelAllSuperCardToasts();}  }
class C{  public boolean isCompatible(int minimumRequiredVersion){  return isCompatible(new Version(minimumRequiredVersion));}  }
class C{  public SerialStruct(Struct in,Map<String,Class<?>> map) throws SerialException {  try {    SQLTypeName=in.getSQLTypeName();    System.out.println("SQLTypeName: " + SQLTypeName);    attribs=in.getAttributes(map);    mapToSerial(map);  } catch (  SQLException e) {    throw new SerialException(e.getMessage());  }}  }
class C{  public static void doRestoreState(Bundle b,SaveFieldInfo info,Object holder){  try {    if (b.get(info.saveField.value()) == null) {      return;    }switch (info.type) {case BundleSupportType.BYTE:      info.field.set(holder,b.getByte(info.saveField.value()));    break;case BundleSupportType.BYTE_ARRAY:  info.field.set(holder,b.getByteArray(info.saveField.value()));break;case BundleSupportType.SHORT:info.field.set(holder,b.getShort(info.saveField.value()));break;case BundleSupportType.SHORT_ARRAY:info.field.set(holder,b.getShortArray(info.saveField.value()));break;case BundleSupportType.INT:info.field.set(holder,b.getInt(info.saveField.value()));break;case BundleSupportType.INT_ARRAY:info.field.set(holder,b.getIntArray(info.saveField.value()));break;case BundleSupportType.BOOLEAN:info.field.set(holder,b.getBoolean(info.saveField.value()));break;case BundleSupportType.BOOLEAN_ARRAY:info.field.set(holder,b.getBooleanArray(info.saveField.value()));break;case BundleSupportType.DOUBLE:info.field.set(holder,b.getDouble(info.saveField.value()));break;case BundleSupportType.DOUBLE_ARRAY:info.field.set(holder,b.getDoubleArray(info.saveField.value()));break;case BundleSupportType.CHAR:info.field.set(holder,b.getChar(info.saveField.value()));break;case BundleSupportType.CHAR_ARRAY:info.field.set(holder,b.getCharArray(info.saveField.value()));break;case BundleSupportType.FLOAT:info.field.set(holder,b.getFloat(info.saveField.value()));break;case BundleSupportType.FLOAT_ARRAY:info.field.set(holder,b.getFloatArray(info.saveField.value()));break;case BundleSupportType.LONG:info.field.set(holder,b.getLong(info.saveField.value()));break;case BundleSupportType.LONG_ARRAY:info.field.set(holder,b.getLongArray(info.saveField.value()));break;case BundleSupportType.STRING:info.field.set(holder,b.getString(info.saveField.value()));break;case BundleSupportType.STRING_ARRAY:info.field.set(holder,b.getStringArray(info.saveField.value()));break;case BundleSupportType.CHAR_SEQUENCE:info.field.set(holder,b.getCharSequence(info.saveField.value()));break;case BundleSupportType.CHAR_SEQUENCE_ARRAY:info.field.set(holder,b.getCharSequenceArray(info.saveField.value()));break;case BundleSupportType.PARCELABLE:info.field.set(holder,b.getParcelable(info.saveField.value()));break;case BundleSupportType.PARCELABLE_ARRAY:info.field.set(holder,b.getParcelableArray(info.saveField.value()));break;case BundleSupportType.IBINDER:if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) info.field.set(holder,b.getBinder(info.saveField.value()));break;case BundleSupportType.BUNDLE:info.field.set(holder,b.getBundle(info.saveField.value()));break;case BundleSupportType.SERIALIZABLE:info.field.set(holder,b.getSerializable(info.saveField.value()));break;case BundleSupportType.SPARSE_PARCELABLE_ARRAY:info.field.set(holder,b.getSparseParcelableArray(info.saveField.value()));break;case BundleSupportType.INTEGER_ARRAY_lIST:info.field.set(holder,b.getIntegerArrayList(info.saveField.value()));break;case BundleSupportType.STRING_ARRAY_LIST:info.field.set(holder,b.getStringArrayList(info.saveField.value()));break;case BundleSupportType.PARCELABLE_ARRAY_LIST:info.field.set(holder,b.getParcelableArrayList(info.saveField.value()));break;case BundleSupportType.PARCELABLE_LIST:info.field.set(holder,b.getParcelableArrayList(info.saveField.value()));break;case BundleSupportType.CHAR_SEQUENCE_ARRAY_LIST:info.field.set(holder,b.getCharSequenceArrayList(info.saveField.value()));break;}} catch (Exception e) {throw new RuntimeException("Error to restore instance state ---> key = " + info.saveField.value(),e);}}  }
class C{  private List<WorkFlowMatrixDetails> checkWithOtherParams(final List<WorkFlowMatrixDetails> workFlowList,final Map workFlowObjectMap){  final List<WorkFlowMatrixDetails> tempList1=new ArrayList();  Date fromdate=null;  Date todate=null;  BigDecimal fromqty=null;  BigDecimal toqty=null;  if (workFlowObjectMap.get(FROMDATE) != null && workFlowObjectMap.get(FROMDATE) != "") {    fromdate=(Date)workFlowObjectMap.get(FROMDATE);  }  if (workFlowObjectMap.get(TODATE) != null && workFlowObjectMap.get(TODATE) != "") {    todate=(Date)workFlowObjectMap.get(TODATE);  }  if (workFlowObjectMap.get(FROMAMOUNT) != null && workFlowObjectMap.get(FROMAMOUNT) != "") {    fromqty=(BigDecimal)workFlowObjectMap.get(FROMAMOUNT);  }  if (workFlowObjectMap.get(TOAMOUNT) != null && workFlowObjectMap.get(TOAMOUNT) != "") {    toqty=(BigDecimal)workFlowObjectMap.get(TOAMOUNT);  }  if (fromdate != null && todate == null) {    for (    final WorkFlowMatrixDetails matrixdet : workFlowList) {      if (checkFromDateIsNotBeforeMatrixDate(fromdate,matrixdet) || (fromdate.before(matrixdet.getFromDate()) || fromdate.equals(matrixdet.getFromDate()))) {        tempList1.add(matrixdet);      }    }  }  if (fromdate != null && todate != null) {    for (    final WorkFlowMatrixDetails matrixdet : workFlowList) {      if ((fromdate.before(matrixdet.getFromDate()) || fromdate.equals(matrixdet.getFromDate())) && (todate.after(matrixdet.getToDate()) || todate.equals(matrixdet.getToDate()))) {        tempList1.add(matrixdet);      }    }  }  if (fromdate == null && todate == null) {    tempList1.addAll(workFlowList);  }  if (fromqty != null && toqty == null) {    final Iterator<WorkFlowMatrixDetails> matrixiterator=tempList1.iterator();    while (matrixiterator.hasNext()) {      final WorkFlowMatrixDetails matrixdet=matrixiterator.next();      if (matrixdet.getFromQty() == null || (matrixdet.getFromQty() != null && fromqty.compareTo(matrixdet.getFromQty()) > 0)) {        matrixiterator.remove();      }    }  } else   if (fromqty != null && toqty != null) {    final Iterator<WorkFlowMatrixDetails> matrixiterator=tempList1.iterator();    while (matrixiterator.hasNext()) {      final WorkFlowMatrixDetails matrixdet=matrixiterator.next();      if (matrixdet.getFromQty() == null || matrixdet.getToQty() == null) {        matrixiterator.remove();      } else {        if (matrixdet.getToQty() != null && (fromqty.doubleValue() >= (matrixdet.getFromQty().doubleValue()) && (toqty.doubleValue() <= (matrixdet.getToQty().doubleValue())))) {        } else {          matrixiterator.remove();        }      }    }  } else   if (fromqty == null && toqty != null) {    final Iterator<WorkFlowMatrixDetails> matrixiterator=tempList1.iterator();    while (matrixiterator.hasNext()) {      final WorkFlowMatrixDetails matrixdet=matrixiterator.next();      if (matrixdet.getFromQty() == null) {        matrixiterator.remove();      }      if (matrixdet.getToQty() != null) {        if (toqty.compareTo(matrixdet.getToQty()) < 0) {          matrixiterator.remove();        }      } else {        if (toqty.compareTo(matrixdet.getFromQty()) < 0) {          matrixiterator.remove();        }      }    }  }  if (fromqty == null && toqty == null && fromdate == null && todate == null) {    return workFlowList;  } else {    return tempList1;  }}  }
class C{  public final static <T>Stream<T> debounce(final Stream<T> stream,final long time,final TimeUnit t){  return new DebounceOperator<>(stream).debounce(time,t);}  }
class C{  public void removeListener(Class<? extends Entity> entityClass,String listenerBeanName){  lock.writeLock().lock();  try {    Set<String> set=dynamicListeners.get(entityClass);    if (set != null) {      set.remove(listenerBeanName);    }    cache.clear();  }  finally {    lock.writeLock().unlock();  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.TYPE_CONSTRAINT__VALUE:    return getValue();}return super.eGet(featureID,resolve,coreType);}  }
class C{  synchronized public static void sendEvent(final Event event){  for (  final EventBusListener listener : getListForEvent(event.getClass())) {    listener.update(event);  }}  }
class C{  public void addRoles(Collection<String> roles){  if (roles != null) {    this.roles.addAll(roles);  }}  }
class C{  public CounterMap(){  this(false);}  }
class C{  public MoveResult doTask() throws Exception {  final Event e=parentEvent.newSubEvent(OverflowSubtaskEnum.AtomicUpdate).start();  BuildResult bufferedWritesBuildResult=null;  try {    final BTree src=getIndex(getOnlyResource()).getMutableBTree();    final IndexMetadata indexMetadata=src.getIndexMetadata();    final String scaleOutIndexName=indexMetadata.getName();    final String targetIndexName=DataService.getIndexPartitionName(scaleOutIndexName,targetIndexPartitionId);    final LocalPartitionMetadata pmd=indexMetadata.getPartitionMetadata();    final PartitionLocator oldLocator=new PartitionLocator(pmd.getPartitionId(),resourceManager.getDataServiceUUID(),pmd.getLeftSeparatorKey(),pmd.getRightSeparatorKey());    final PartitionLocator newLocator=new PartitionLocator(targetIndexPartitionId,targetDataServiceUUID,pmd.getLeftSeparatorKey(),pmd.getRightSeparatorKey());    final long sourceCommitTime=src.getLastCommitTime();    bufferedWritesBuildResult=resourceManager.buildIndexSegment(sourceIndexName,src,false,sourceCommitTime,null,null,parentEvent);{      final IDataService targetDataService=resourceManager.getFederation().getDataService(targetDataServiceUUID);      if (targetDataService == null)       throw new Exception("No such data service: " + targetDataServiceUUID);{        final Event receiveIndexPartitionEvent=parentEvent.newSubEvent(OverflowSubtaskEnum.ReceiveIndexPartition).start();        try {          targetDataService.submit(new ReceiveIndexPartitionTask(indexMetadata,resourceManager.getDataServiceUUID(),targetIndexPartitionId,historicalWritesBuildResult.segmentMetadata,bufferedWritesBuildResult.segmentMetadata,resourceManager.getResourceService().getAddr())).get();        } catch (        ExecutionException ex) {          rollbackMove(ex,scaleOutIndexName,targetIndexName,targetDataService,oldLocator,newLocator);        }catch (        InterruptedException ex) {          rollbackMove(ex,scaleOutIndexName,targetIndexName,targetDataService,oldLocator,newLocator);        }catch (        IOException ex) {          rollbackMove(ex,scaleOutIndexName,targetIndexName,targetDataService,oldLocator,newLocator);        } finally {          receiveIndexPartitionEvent.end();        }      }      resourceManager.setIndexPartitionGone(getOnlyResource(),StaleLocatorReason.Move);      getJournal().dropIndex(getOnlyResource());      resourceManager.overflowCounters.indexPartitionMoveCounter.incrementAndGet();    }    return new MoveResult(scaleOutIndexName,src.getIndexMetadata(),targetDataServiceUUID,targetIndexPartitionId,oldLocator,newLocator);  }  finally {    if (bufferedWritesBuildResult != null) {      resourceManager.retentionSetRemove(bufferedWritesBuildResult.segmentMetadata.getUUID());      resourceManager.deleteResource(bufferedWritesBuildResult.segmentMetadata.getUUID(),false);    }    e.end();  }}  }
class C{  public void destroy(){  super.destroy();  if (node != null)   node.close();  if (keepAliveLatch != null)   keepAliveLatch.countDown();}  }
class C{  private int h(final int i,final int x){  return (int)((hash_coefs[i][0] * (long)x + hash_coefs[i][1]) % dict_size);}  }
class C{  protected void initAccessibilityParameter(MutableScenario scenario){  AccessibilityParameterConfigModule module=ConfigurationModule.getAccessibilityParameterConfigModule(scenario);  useRawSum=module.isUseRawSumsWithoutLn();  logitScaleParameter=module.getLogitScaleParameter();  inverseOfLogitScaleParameter=1 / (logitScaleParameter);  walkSpeedMeterPerHour=scenario.getConfig().plansCalcRoute().getTeleportedModeSpeeds().get(TransportMode.walk) * 3600.;  bikeSpeedMeterPerHour=15000.;  betaCarTT=module.getBetaCarTravelTime();  betaCarTTPower=module.getBetaCarTravelTimePower2();  betaCarLnTT=module.getBetaCarLnTravelTime();  betaCarTD=module.getBetaCarTravelDistance();  betaCarTDPower=module.getBetaCarTravelDistancePower2();  betaCarLnTD=module.getBetaCarLnTravelDistance();  betaCarTC=module.getBetaCarTravelCost();  betaCarTCPower=module.getBetaCarTravelCostPower2();  betaCarLnTC=module.getBetaCarLnTravelCost();  betaBikeTT=module.getBetaBikeTravelTime();  betaBikeTTPower=module.getBetaBikeTravelTimePower2();  betaBikeLnTT=module.getBetaBikeLnTravelTime();  betaBikeTD=module.getBetaBikeTravelDistance();  betaBikeTDPower=module.getBetaBikeTravelDistancePower2();  betaBikeLnTD=module.getBetaBikeLnTravelDistance();  betaBikeTC=module.getBetaBikeTravelCost();  betaBikeTCPower=module.getBetaBikeTravelCostPower2();  betaBikeLnTC=module.getBetaBikeLnTravelCost();  betaWalkTT=module.getBetaWalkTravelTime();  betaWalkTTPower=module.getBetaWalkTravelTimePower2();  betaWalkLnTT=module.getBetaWalkLnTravelTime();  betaWalkTD=module.getBetaWalkTravelDistance();  betaWalkTDPower=module.getBetaWalkTravelDistancePower2();  betaWalkLnTD=module.getBetaWalkLnTravelDistance();  betaWalkTC=module.getBetaWalkTravelCost();  betaWalkTCPower=module.getBetaWalkTravelCostPower2();  betaWalkLnTC=module.getBetaWalkLnTravelCost();  depatureTime=8. * 3600;  printParameterSettings();}  }
class C{  public void shutdown() throws SysException {  if (exported_) {    String exportClass=properties_.getProperty("com.atomikos.icatch.rmi_export_class");    try {      if ("PortableRemoteObject".equals(exportClass))       PortableRemoteObject.unexportObject(this); else       if ("UnicastRemoteObject".equals(exportClass))       UnicastRemoteObject.unexportObject(this,true);      Context ctx=getInitialContext();      ctx.unbind(name_);    } catch (    Exception e) {      throw new SysException(e.getMessage(),e);    }    exported_=false;  }}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1;    int progress, oldProgress=-1;    double[] data1;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData=inputFile1.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile1.getPreferredPalette());    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        if (z1 != noData && z1 != 0) {          outputFile.setValue(row,col,1 / z1);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void closeStartIfNecessary() throws IOException {  if (closeStart) {    writer.write(">");    closeStart=false;  }}  }
class C{  public void downloadImageToFileSystem(String file,SuccessCallback<Image> onSuccess,FailureCallback<Image> onFail){  downloadImageToFileSystem(file,onSuccess,onFail,true);}  }
class C{  private boolean validateUsername(String username){  int colon=username.indexOf(":");  if ((username.length() < 1) || (colon < 1)) {    if (logger.isLoggable(Level.FINE)) {      logger.log(Level.FINE,"Received a message with an improperly " + "formatted username");    }    return false;  }  String lfrag=username.substring(0,colon);  return getCredentialsManager().checkLocalUserName(lfrag);}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"USER\" ("+ "\"_id\" INTEGER PRIMARY KEY ,"+ "\"NAME\" TEXT NOT NULL ,"+ "\"AVATAR\" TEXT NOT NULL ,"+ "\"SETTINGS_ID\" INTEGER NOT NULL );");}  }
class C{  void addAvailableElement(QName elemName){  m_availElems.put(elemName,elemName);}  }
class C{  public boolean isEmpty(){  return count() == 0;}  }
class C{  public void execute(Notification notification){}  }
class C{  @Override default Eval<DoubleSummaryStatistics> summaryStatisticsDouble(final ToDoubleFunction<? super T> fn){  return Eval.later(null);}  }
class C{  public Builder metaWriteRoles(List<String> metaWriteRoles){  this.metaWriteRoles=metaWriteRoles;  return this;}  }
class C{  protected DelegatingGetterDeclarationImpl(){  super();}  }
class C{  private UTF16Reader(InputStream is){  this.is=is;}  }
class C{  public String calculateStdDevsTipText(){  return "Record standard deviations for each run.";}  }
class C{  public void actionPerformed(ActionEvent evt){  JMenuItem mi=(JMenuItem)evt.getSource();  if (mi.getActionCommand().equals("Undo")) {    undo.undo();  } else   if (mi.getActionCommand().equals("Redo")) {    undo.redo();  } else   if (mi.getActionCommand().equals("Copy")) {    this.copy();  } else   if (mi.getActionCommand().equals("Cut")) {    this.cut();  } else   if (mi.getActionCommand().equals("Paste")) {    this.paste();  } else   if (mi.getActionCommand().equals("Save")) {    this.saveAs();  } else   if (mi.getActionCommand().equals("Open")) {    this.openFile();  } else   if (mi.getActionCommand().equals("Print")) {    try {      print();    } catch (    PrinterException e) {    }  } else   if (mi.getActionCommand().equals("Find")) {    find();  } else   if (mi.getActionCommand().equals("Replace")) {    replace();  }  this.repaint();}  }
class C{  public byte[] transformBytes(String className,ClassReader reader){  int readFlags=ClassReader.SKIP_FRAMES;  ClassWriter writer=new ClassWriter(ClassWriter.COMPUTE_FRAMES);  ClassVisitor cv=writer;  if (Properties.RESET_STATIC_FIELDS) {    cv=new StaticAccessClassAdapter(cv,className);  }  cv=new ConcolicClassAdapter(cv,className);  if (Properties.RESET_STATIC_FIELDS) {    final CreateClassResetClassAdapter resetClassAdapter;    if (Properties.RESET_STATIC_FINAL_FIELDS) {      resetClassAdapter=new CreateClassResetClassAdapter(cv,className,true);    } else {      resetClassAdapter=new CreateClassResetClassAdapter(cv,className,false);    }    cv=resetClassAdapter;    EndOfClassInitializerVisitor exitClassInitAdapter=new EndOfClassInitializerVisitor(cv,className);    cv=exitClassInitAdapter;  }  if (TestSuiteWriterUtils.needToUseAgent()) {    cv=new MethodCallReplacementClassAdapter(cv,className);  }  reader.accept(cv,readFlags);  return writer.toByteArray();}  }
class C{  public NdefMessage(NdefRecord[] records){  if (records.length < 1) {    throw new IllegalArgumentException("must have at least one record");  }  for (  NdefRecord r : records) {    if (r == null) {      throw new NullPointerException("records cannot contain null");    }  }  mRecords=records;}  }
class C{  public RandomWeightingStrategy(){  this(DefaultImpact);}  }
class C{  public static void clear(){  protocol.clear();}  }
class C{  private double sigmoid(double x){  x=12.0 * x - 6.0;  return (1.0 / (1.0 + Math.exp(-1.0 * x)));}  }
class C{  @Override public void write(int b) throws IOException {  fileStream.write(b);  outputStream.write(b);}  }
class C{  public ListenKey startListening(String address) throws IOException {  if (address == null || address.length() == 0) {    address="0";  }  int splitIndex=address.indexOf(':');  String localaddr=null;  if (splitIndex >= 0) {    localaddr=address.substring(0,splitIndex);    address=address.substring(splitIndex + 1);  }  int port;  try {    port=Integer.decode(address).intValue();  } catch (  NumberFormatException e) {    throw new IllegalArgumentException("unable to parse port number in address");  }  return startListening(localaddr,port);}  }
class C{  public static boolean[] parseString(String[] values){  boolean[] result=new boolean[values.length];  for (int i=0; i < result.length; i++) {    result[i]=parseString(values[i]);  }  return result;}  }
class C{  public static String extractAlias(String path){  if (path.contains(ALIAS_DELIMITER)) {    return path.substring(path.indexOf(ALIAS_DELIMITER) + 4);  }  return StringUtils.EMPTY;}  }
class C{  void index(E type){  addOrUpdate(type);}  }
class C{  public T caseSingleIsA_(SingleIsA_ object){  return null;}  }
class C{  public XTableColumnModel(){}  }
class C{  public static void createTrackWithPause(int numberOfGpsData){  startRecording();  sendGps(numberOfGpsData);  pauseRecording();  resumeRecording();  sendGps(numberOfGpsData,numberOfGpsData);  stopRecording(true);}  }
class C{  public InlineQueryResultAudio.InlineQueryResultAudioBuilder title(String title){  this.title=title;  return this;}  }
class C{  BigQueryTableInserter(Bigquery client,PipelineOptions options){  this.client=client;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(getFile(stack).delete());}  }
class C{  public void run(){  if (!isHelping()) {switch (getCommand()) {case START:      info(start());    waitOnLocator();  break;case STATUS:info(status());break;case STOP:info(stop());break;case VERSION:info(version());break;default :usage();}} else {help(getCommand());}}  }
class C{  public static synchronized final ResourceManager instance(){  if (_instance == null)   _instance=new ResourceManager();  return _instance;}  }
class C{  public void testFlipBitPositiveOutside2(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=191;  byte rBytes[]={0,-128,0,0,0,0,0,0,0,0,0,0,1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.flipBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public String compressionTipText(){  return compressionToolTip();}  }
class C{  public ReplicationDiagnostics checkIfReplicationComplete(Pair<SolrCore,SolrCore> request,long totalTime,long maxTime) throws Exception {  String coreName=request.getLhs().name;  String hostName=request.getLhs().host;  ReplicationDiagnostics diagnostics=SolrInteractionUtils.checkReplicationStatus(hostName,coreName);  while ((diagnostics.isReplicating()) && (totalTime < maxTime)) {    logger.info("Core " + coreName + " is still replication.. Waiting for 2 seconds before checking the status again...");    diagnostics=SolrInteractionUtils.checkReplicationStatus(hostName,coreName);    logger.info("Waiting for: " + diagnostics.getEntity() + " "+ diagnostics.getPercentageComplete());    Thread.sleep(SolrInteractionUtils.DEFAULT_SLEEP_TIME);    totalTime+=2000;    diagnostics=SolrInteractionUtils.checkReplicationStatus(hostName,coreName);  }  logger.info("Core " + coreName + " has completed Replication. Moving onto core health checks for "+ coreName);  return diagnostics;}  }
class C{  public void addMapIcon(MapIcon icon){  MapIcon existing=mIcons.get(icon.getName());  if (existing == null) {    MapIcon newIcon=new MapIcon(icon.getName(),icon.getPath());    mIcons.put(newIcon.getName(),newIcon);    addSetting(newIcon);  } else {    existing.setName(icon.getName());    existing.setPath(icon.getPath());    broadcastSettingChange(existing);    scheduleSettingsSave();  }}  }
class C{  public EventReplayer inDescendingOrder(){  return new EventReplayer(events,null,filter);}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("AcsInfo[");  buffer.append("m_acsType = ").append(m_acsType);  buffer.append(", m_acsId = ").append(m_acsId);  return buffer.toString();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static RotationOptions disableRotation(){  return new RotationOptions(DISABLE_ROTATION,false);}  }
class C{  @Override public Class<? extends Task> taskClass(){  return MongodbSourceTask.class;}  }
class C{  @Override public void close(){synchronized (lock) {    if (isOpen()) {      buf=null;    }  }}  }
class C{  private Object readResolve(){  Chronology base=getBase();  int minDays=getMinimumDaysInFirstWeek();  minDays=(minDays == 0 ? 4 : minDays);  return base == null ? getInstance(DateTimeZone.UTC,minDays) : getInstance(base.getZone(),minDays);}  }
class C{  protected static int[] convertOrder(Element filterElement,BridgeContext ctx){  String s=filterElement.getAttributeNS(null,SVG_ORDER_ATTRIBUTE);  if (s.length() == 0) {    return new int[]{3,3};  }  int[] orderXY=new int[2];  StringTokenizer tokens=new StringTokenizer(s," ,");  try {    orderXY[0]=SVGUtilities.convertSVGInteger(tokens.nextToken());    if (tokens.hasMoreTokens()) {      orderXY[1]=SVGUtilities.convertSVGInteger(tokens.nextToken());    } else {      orderXY[1]=orderXY[0];    }  } catch (  NumberFormatException nfEx) {    throw new BridgeException(ctx,filterElement,nfEx,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_ORDER_ATTRIBUTE,s,nfEx});  }  if (tokens.hasMoreTokens() || orderXY[0] <= 0 || orderXY[1] <= 0) {    throw new BridgeException(ctx,filterElement,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_ORDER_ATTRIBUTE,s});  }  return orderXY;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(BigBrother.areSameShow(getAir(stack),getAir(stack),false));}  }
class C{  public void dialogFragment(Fragment to){  FragmentTransaction transaction=context.getSupportFragmentManager().beginTransaction();  if (!to.isAdded()) {    if (dialog_in != 0 && dialog_out != 0) {      transaction.setCustomAnimations(dialog_in,dialog_out).add(R.id.framLayoutId,to,to.getClass().getName()).commit();    } else {      transaction.add(R.id.framLayoutId,to,to.getClass().getName()).commit();    }  }}  }
class C{  public static void blur(int[] in,int[] out,int width,int height,float radius){  int widthMinus1=width - 1;  int r=(int)radius;  int tableSize=2 * r + 1;  int divide[]=new int[256 * tableSize];  for (int i=0; i < 256 * tableSize; i++)   divide[i]=i / tableSize;  int inIndex=0;  for (int y=0; y < height; y++) {    int outIndex=y;    int ta=0, tr=0, tg=0, tb=0;    for (int i=-r; i <= r; i++) {      int rgb=in[inIndex + ImageMath.clamp(i,0,width - 1)];      ta+=(rgb >> 24) & 0xff;      tr+=(rgb >> 16) & 0xff;      tg+=(rgb >> 8) & 0xff;      tb+=rgb & 0xff;    }    for (int x=0; x < width; x++) {      out[outIndex]=(divide[ta] << 24) | (divide[tr] << 16) | (divide[tg] << 8)| divide[tb];      int i1=x + r + 1;      if (i1 > widthMinus1)       i1=widthMinus1;      int i2=x - r;      if (i2 < 0)       i2=0;      int rgb1=in[inIndex + i1];      int rgb2=in[inIndex + i2];      ta+=((rgb1 >> 24) & 0xff) - ((rgb2 >> 24) & 0xff);      tr+=((rgb1 & 0xff0000) - (rgb2 & 0xff0000)) >> 16;      tg+=((rgb1 & 0xff00) - (rgb2 & 0xff00)) >> 8;      tb+=(rgb1 & 0xff) - (rgb2 & 0xff);      outIndex+=height;    }    inIndex+=width;  }}  }
class C{  public void notifyAddressThrottleFound(DccThrottle t){  if (log.isDebugEnabled()) {    log.debug("Throttle found");  }  mThrottle=t;  setEnabled(true);  mThrottle.addPropertyChangeListener(this);  setFnButtons();}  }
class C{  public School name(String name){  this.name=name;  return this;}  }
class C{  public boolean highlight(int row,int column){  XYPlot plot=getPlot();  OHLCDataset highLowData=(OHLCDataset)plot.getDataset();  int total_elements=highLowData.getItemCount(0);  boolean isLast=column == (total_elements - 1);  if (isLast) {    return true;  }  return false;}  }
class C{  @Override public Boolean isCreateXSLDirectory() throws AdeException {  return m_createXSLDirectory;}  }
class C{  public Attr createAttribute(String name) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  @Override public CloseableReference<Bitmap> decodeJPEGFromEncodedImage(EncodedImage encodedImage,Bitmap.Config bitmapConfig,int length){  boolean isJpegComplete=encodedImage.isCompleteAt(length);  final BitmapFactory.Options options=getDecodeOptionsForStream(encodedImage,bitmapConfig);  InputStream jpegDataStream=encodedImage.getInputStream();  Preconditions.checkNotNull(jpegDataStream);  if (encodedImage.getSize() > length) {    jpegDataStream=new LimitedInputStream(jpegDataStream,length);  }  if (!isJpegComplete) {    jpegDataStream=new TailAppendingInputStream(jpegDataStream,EOI_TAIL);  }  boolean retryOnFail=options.inPreferredConfig != Bitmap.Config.ARGB_8888;  try {    return decodeStaticImageFromStream(jpegDataStream,options);  } catch (  RuntimeException re) {    if (retryOnFail) {      return decodeFromEncodedImage(encodedImage,Bitmap.Config.ARGB_8888);    }    throw re;  }}  }
class C{  @Override public void printComponent(Graphics gr){  Graphics2D g=(Graphics2D)gr;  g.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION,RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  g.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,RenderingHints.VALUE_STROKE_NORMALIZE);  g.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS,RenderingHints.VALUE_FRACTIONALMETRICS_ON);  g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BICUBIC);  g.setRenderingHint(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);  g.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);  drawDrawing(g);}  }
class C{  public char indentation(){  return indentation;}  }
class C{  protected void initMetaData(RowSetMetaData md,ResultSetMetaData rsmd) throws SQLException {  int numCols=rsmd.getColumnCount();  md.setColumnCount(numCols);  for (int col=1; col <= numCols; col++) {    md.setAutoIncrement(col,rsmd.isAutoIncrement(col));    md.setCaseSensitive(col,rsmd.isCaseSensitive(col));    md.setCurrency(col,rsmd.isCurrency(col));    md.setNullable(col,rsmd.isNullable(col));    md.setSigned(col,rsmd.isSigned(col));    md.setSearchable(col,rsmd.isSearchable(col));    md.setColumnDisplaySize(col,rsmd.getColumnDisplaySize(col));    md.setColumnLabel(col,rsmd.getColumnLabel(col));    md.setColumnName(col,rsmd.getColumnName(col));    md.setSchemaName(col,rsmd.getSchemaName(col));    md.setPrecision(col,rsmd.getPrecision(col));    md.setScale(col,rsmd.getScale(col));    md.setTableName(col,rsmd.getTableName(col));    md.setCatalogName(col,rsmd.getCatalogName(col));    md.setColumnType(col,rsmd.getColumnType(col));    md.setColumnTypeName(col,rsmd.getColumnTypeName(col));  }}  }
class C{  public boolean isActive(GraphNode node){  NodeState result=findNodeState(node);  if (null == result) {    return false;  }  return ((result.discovered > 0) && (0 == result.explored));}  }
class C{  public static <S,E>boolean isSubstate(State<S,E> left,State<S,E> right){  if (left == null) {    return false;  }  Collection<State<S,E>> c=left.getStates();  c.remove(left);  return c.contains(right);}  }
class C{  public static void addSecondaryObjective(SecondaryObjective<?> objective){  secondaryObjectives.add(objective);}  }
class C{  public Date convertToDate(Universe universe,DimensionIndex index,Bound bound,String value,IntervalleObject compareFromInterval) throws ParseException, ScopeException, ComputingException {  if (value.equals("")) {    return null;  } else   if (value.startsWith("__")) {    if (value.toUpperCase().startsWith("__COMPARE_TO_")) {      if (compareFromInterval == null) {        return null;      }      if (value.equalsIgnoreCase("__COMPARE_TO_PREVIOUS_PERIOD")) {        LocalDate localLower=new LocalDate(((Date)compareFromInterval.getLowerBound()).getTime());        if (bound == Bound.UPPER) {          LocalDate date=localLower.minusDays(1);          return date.toDate();        } else {          LocalDate localUpper=new LocalDate(((Date)compareFromInterval.getUpperBound()).getTime());          Days days=Days.daysBetween(localLower,localUpper);          LocalDate date=localLower.minusDays(1 + days.getDays());          return date.toDate();        }      }      if (value.equalsIgnoreCase("__COMPARE_TO_PREVIOUS_MONTH")) {        LocalDate localLower=new LocalDate(((Date)compareFromInterval.getLowerBound()).getTime());        LocalDate compareLower=localLower.minusMonths(1);        if (bound == Bound.LOWER) {          return compareLower.toDate();        } else {          LocalDate localUpper=new LocalDate(((Date)compareFromInterval.getUpperBound()).getTime());          Days days=Days.daysBetween(localLower,localUpper);          LocalDate compareUpper=compareLower.plusDays(days.getDays());          return compareUpper.toDate();        }      }      if (value.equalsIgnoreCase("__COMPARE_TO_PREVIOUS_YEAR")) {        LocalDate localLower=new LocalDate(((Date)compareFromInterval.getLowerBound()).getTime());        LocalDate compareLower=localLower.minusYears(1);        if (bound == Bound.LOWER) {          return compareLower.toDate();        } else {          LocalDate localUpper=new LocalDate(((Date)compareFromInterval.getUpperBound()).getTime());          Days days=Days.daysBetween(localLower,localUpper);          LocalDate compareUpper=compareLower.plusDays(days.getDays());          return compareUpper.toDate();        }      }    } else {      Intervalle range=null;      if (index.getDimension().getType() == Type.CONTINUOUS) {        if (index.getStatus() == Status.DONE) {          List<DimensionMember> members=index.getMembers();          if (!members.isEmpty()) {            DimensionMember member=members.get(0);            Object object=member.getID();            if (object instanceof Intervalle) {              range=(Intervalle)object;            }          }        } else {          try {            DomainHierarchy hierarchy=universe.getDomainHierarchy(index.getAxis().getParent().getDomain());            hierarchy.isDone(index,null);          } catch (          ComputingException|InterruptedException|ExecutionException|TimeoutException e) {            throw new ComputingException("failed to retrieve period interval");          }        }      }      if (range == null) {        range=IntervalleObject.createInterval(new Date(),new Date());      }      if (value.equalsIgnoreCase("__ALL")) {        if (index.getDimension().getType() != Type.CONTINUOUS) {          return null;        }        if (bound == Bound.UPPER) {          return (Date)range.getUpperBound();        } else {          return (Date)range.getLowerBound();        }      }      if (value.equalsIgnoreCase("__LAST_DAY")) {        if (bound == Bound.UPPER) {          return (Date)range.getUpperBound();        } else {          return (Date)range.getUpperBound();        }      }      if (value.equalsIgnoreCase("__LAST_7_DAYS")) {        if (bound == Bound.UPPER) {          return (Date)range.getUpperBound();        } else {          LocalDate localUpper=new LocalDate(((Date)range.getUpperBound()).getTime());          LocalDate date=localUpper.minusDays(6);          return date.toDate();        }      }      if (value.equalsIgnoreCase("__CURRENT_MONTH")) {        if (bound == Bound.UPPER) {          return (Date)range.getUpperBound();        } else {          LocalDate localUpper=new LocalDate(((Date)range.getUpperBound()).getTime());          LocalDate date=localUpper.withDayOfMonth(1);          return date.toDate();        }      }      if (value.equalsIgnoreCase("__CURRENT_YEAR")) {        if (bound == Bound.UPPER) {          return (Date)range.getUpperBound();        } else {          LocalDate localUpper=new LocalDate(((Date)range.getUpperBound()).getTime());          LocalDate date=localUpper.withMonthOfYear(1).withDayOfMonth(1);          return date.toDate();        }      }      if (value.equalsIgnoreCase("__PREVIOUS_MONTH")) {        if (bound == Bound.UPPER) {          LocalDate localUpper=new LocalDate(((Date)range.getUpperBound()).getTime());          LocalDate date=localUpper.withDayOfMonth(1).minusDays(1);          return date.toDate();        } else {          LocalDate localUpper=new LocalDate(((Date)range.getUpperBound()).getTime());          LocalDate date=localUpper.withDayOfMonth(1).minusMonths(1);          return date.toDate();        }      }      if (value.equalsIgnoreCase("__PREVIOUS_YEAR")) {        if (bound == Bound.UPPER) {          LocalDate localUpper=new LocalDate(((Date)range.getUpperBound()).getTime());          LocalDate date=localUpper.withMonthOfYear(1).withDayOfMonth(1).minusDays(1);          return date.toDate();        } else {          LocalDate localUpper=new LocalDate(((Date)range.getUpperBound()).getTime());          LocalDate date=localUpper.withMonthOfYear(1).withDayOfMonth(1).minusYears(1);          return date.toDate();        }      }    }    throw new ScopeException("undefined facet expression alias: " + value);  } else   if (value.startsWith("=")) {    try {      String expr=value.substring(1);      DomainHierarchy hierarchy=universe.getDomainHierarchy(index.getAxis().getParent().getDomain(),true);      hierarchy.isDone(index,null);      Object defaultValue=evaluateExpression(universe,index,expr,compareFromInterval);      if (defaultValue == null) {        return null;      }      if (!(defaultValue instanceof Date)) {        throw new ScopeException("unable to parse the facet expression as a date: " + expr);      }      return (Date)defaultValue;    } catch (    ComputingException|InterruptedException|ExecutionException|TimeoutException e) {      throw new ComputingException("failed to retrieve period interval");    }  } else {    Date date=ServiceUtils.getInstance().toDate(value);    if (bound == Bound.UPPER && !index.getAxis().getDefinitionSafe().getImageDomain().isInstanceOf(IDomain.TIME)) {      return new LocalDate(date.getTime()).toDate();    } else {      return date;    }  }}  }
class C{  public void append(byte b){  grow(ref.length + 1);  ref.bytes[ref.length++]=b;}  }
class C{  protected final Collection<? extends ConfigGroup> clearParameterSetsForType(final String type){  return parameterSetsPerType.remove(type);}  }
class C{  public static boolean equals(final Object obj1,final Object obj2){  return obj1 == null ? obj2 == null : obj1.equals(obj2);}  }
class C{  public MonetaryFormat roundingMode(RoundingMode roundingMode){  if (roundingMode == this.roundingMode)   return this; else   return new MonetaryFormat(negativeSign,positiveSign,zeroDigit,decimalMark,minDecimals,decimalGroups,shift,roundingMode,codes,codeSeparator,codePrefixed);}  }
class C{  public SimpleWizard(SimpleWizardInfo info){  this.info=info;  info.setWizard(this);}  }
class C{  public boolean userCanCreateDept(int connectedUserId,int parentDeptId,String entidad) throws Exception {  boolean can=false;  int parentDeptMgrId=ISicresAdminDefsKeys.NULL_ID;  try {    if (parentDeptId == ISicresAdminDefsKeys.NULL_ID || parentDeptId == ISicresAdminDefsKeys.ROOT_DEPT_ID)     parentDeptMgrId=0; else     parentDeptMgrId=this.getDeptMgrId(parentDeptId,entidad);    can=hasUserDeptAuth(connectedUserId,USER_ACTION_ID_CREATE,ISicresAdminDefsKeys.NULL_ID,parentDeptMgrId,ISicresAdminDefsKeys.NULL_ID,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  }  return can;}  }
class C{  public void save(){  if (RapidMiner.getExecutionMode().canAccessFilesystem()) {    File file=FileSystemService.getUserConfigFile("usagestats.xml");    try {      LogService.getRoot().log(Level.CONFIG,"com.rapidminer.gui.tools.usagestats.UsageStatistics.saving_operator_usage");      XMLTools.stream(getXML(),file,StandardCharsets.UTF_8);    } catch (    Exception e) {      LogService.getRoot().log(Level.WARNING,I18N.getMessage(LogService.getRoot().getResourceBundle(),"com.rapidminer.gui.tools.usagestats.UsageStatistics.saving_operator_usage_error",e),e);    }  } else {    LogService.getRoot().config("com.rapidminer.gui.tools.usagestats.UsageStatistics.accessing_file_system_error_bypassing_save");  }}  }
class C{  public static IMultiPoint[] convert(IPoint[] pts){  IMultiPoint[] ret=new IMultiPoint[pts.length];  double[] params=new double[2];  for (int i=0; i < pts.length; i++) {    params[0]=pts[i].getX();    params[1]=pts[i].getY();    ret[i]=new Hyperpoint(params);  }  return ret;}  }
class C{  public static String encodeValue(String v_j,String v_k){  return String.valueOf(v_j) + "+" + String.valueOf(v_k);}  }
class C{  public int[] readAllInts(){  String[] fields=readAllStrings();  int[] vals=new int[fields.length];  for (int i=0; i < fields.length; i++)   vals[i]=Integer.parseInt(fields[i]);  return vals;}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == ParameterizedAccess.class) {switch (derivedFeatureID) {case N4JSPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION__TYPE_ARGS:      return N4JSPackage.PARAMETERIZED_ACCESS__TYPE_ARGS;default :    return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public static String readerToString(final Reader fileReader) throws IOException {  final StringBuilder sb=new StringBuilder();  try (BufferedReader br=new BufferedReader(fileReader)){    final char[] buffer=FileUtils.makeBuffer();    final int eof=-1;    for (int len=br.read(buffer); len > eof; len=br.read(buffer)) {      for (int i=0; i < len; i++) {        sb.append(buffer[i]);      }    }  }   return sb.toString();}  }
class C{  public boolean isSip(){  return isProtocol(SIP);}  }
class C{  public ModelRendererTurbo(ModelBase modelbase,int textureX,int textureY,int textureU,int textureV){  this(modelbase);  textureOffsetX=textureX;  textureOffsetY=textureY;  textureWidth=textureU;  textureHeight=textureV;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void runBlocking() throws Exception {  try {    start();    server.join();  }  finally {    server.destroy();    log.info("Server terminated.");  }}  }
class C{  public boolean isRequestContact(){  return this.request_contact;}  }
class C{  public void checkClientTrusted(X509Certificate[] chain,String authType){}  }
class C{  public int indexOfFromTo(int from,int to,boolean state){  IndexProcedure indexProcedure=new IndexProcedure();  forEachIndexFromToInState(from,to,state,indexProcedure);  return indexProcedure.foundPos;}  }
class C{  public AuthScope(final AuthScope authscope){  super();  if (authscope == null) {    throw new IllegalArgumentException("Scope may not be null");  }  this.host=authscope.getHost();  this.port=authscope.getPort();  this.realm=authscope.getRealm();  this.scheme=authscope.getScheme();}  }
class C{  public AbLinedEditText(Context context,AttributeSet attrs){  super(context,attrs);  mRect=new Rect();  mPaint=new Paint();  mPaint.setStyle(Paint.Style.STROKE);  mPaint.setColor(0x800000FF);}  }
class C{  protected XBLOMShadowTreeElement cloneTemplate(XBLOMTemplateElement template){  XBLOMShadowTreeElement clone=(XBLOMShadowTreeElement)template.getOwnerDocument().createElementNS(XBL_NAMESPACE_URI,XBL_SHADOW_TREE_TAG);  NamedNodeMap attrs=template.getAttributes();  for (int i=0; i < attrs.getLength(); i++) {    Attr attr=(Attr)attrs.item(i);    if (attr instanceof AbstractAttrNS) {      clone.setAttributeNodeNS(attr);    } else {      clone.setAttributeNode(attr);    }  }  for (Node n=template.getFirstChild(); n != null; n=n.getNextSibling()) {    clone.appendChild(n.cloneNode(true));  }  return clone;}  }
class C{  private void writeAverageLinkTolls(){  Config config=scenario.getConfig();  double vttsCar=((config.planCalcScore().getModes().get(TransportMode.car).getMarginalUtilityOfTraveling() / 3600) + (config.planCalcScore().getPerforming_utils_hr() / 3600)) / (config.planCalcScore().getMarginalUtilityOfMoney());  CausedDelayAnalyzer delayAnalyzer=new CausedDelayAnalyzer(congestionEventsFile,scenario,noOfTimeBins);  delayAnalyzer.run();  SortedMap<Double,Map<Id<Link>,Double>> timeBin2LinkId2Delay=delayAnalyzer.getTimeBin2LinkId2Delay();  SortedMap<Double,Map<Id<Link>,Set<Id<Person>>>> timeBin2LinkCount=delayAnalyzer.getTimeBin2Link2CausingPersons();  BufferedWriter writer=IOUtils.getBufferedWriter(runDir + "/analysis/linkId2Toll" + congestionImpl+ ".txt");  try {    writer.write("timeBin\tlinkId\tavgLinkTollEURO\n");    for (    double d : timeBin2LinkId2Delay.keySet()) {      for (      Id<Link> linkId : timeBin2LinkId2Delay.get(d).keySet()) {        double delay=timeBin2LinkId2Delay.get(d).get(linkId);        int count=timeBin2LinkCount.get(d).get(linkId).size();        double avgToll=0;        if (delay != 0 && count == 0)         throw new RuntimeException("Delay is not zero whereas person count is zero. Can not happen. Aborting..."); else         if (delay != 0 && count != 0) {          avgToll=vttsCar * (delay / count);        }        writer.write(d + "\t" + linkId+ "\t"+ avgToll+ "\n");      }    }    writer.close();  } catch (  Exception e) {    throw new RuntimeException("Data is not written in file. Reason: " + e);  }}  }
class C{  public void trace(String format,Object arg){  formatAndLog(Log.VERBOSE,format,arg);}  }
class C{  public void delete(URI id){  client.delete(String.class,getIdUrl(),id);}  }
class C{  public Map<Integer,Double> compute(double... dataset){  return computeInPlace(dataset.clone());}  }
class C{  public static int leastDiv(int a){  if (a < 0) {    a=-a;  }  if (a == 0) {    return 1;  }  if ((a & 1) == 0) {    return 2;  }  int p=3;  while (p <= (a / p)) {    if ((a % p) == 0) {      return p;    }    p+=2;  }  return a;}  }
class C{  public ResolvedFunction(final Address address){  this.address=address;  this.function=null;  this.memoryModule=null;}  }
class C{  public static SQLException create(String message,Throwable cause){  SQLException sqlException;  if (cause instanceof SQLException) {    sqlException=new SQLException(message,((SQLException)cause).getSQLState());  } else {    sqlException=new SQLException(message);  }  sqlException.initCause(cause);  return sqlException;}  }
class C{  protected void merge(Properties from,Properties to){  merge(from,to,null,null);}  }
class C{  public boolean isAllowWatching(){  return allowWatching;}  }
class C{  private void populateAboutThisCourse(String overview){  courseAbout.setVisibility(View.VISIBLE);  URLInterceptorWebViewClient client=new URLInterceptorWebViewClient(getActivity(),courseAboutWebView);  client.setAllLinksAsExternal(true);  StringBuilder buff=WebViewUtil.getIntialWebviewBuffer(getActivity(),logger);  buff.append("<body>");  buff.append("<div class=\"header\">");  buff.append(overview);  buff.append("</div>");  buff.append("</body>");  courseAboutWebView.clearCache(true);  courseAboutWebView.loadDataWithBaseURL(environment.getConfig().getApiHostURL(),buff.toString(),"text/html",HTTP.UTF_8,null);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void release(RrdDb rrdDb) throws IOException {  if (rrdDb == null) {    return;  }  RrdEntry ref;  try {    ref=getEntry(rrdDb.getPath(),false);  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();    throw new RuntimeException("release interrupted for " + rrdDb,e);  }  if (ref == null) {    return;  }  if (ref.count <= 0) {    passNext(ACTION.DROP,ref);    throw new IllegalStateException("Could not release [" + rrdDb.getPath() + "], the file was never requested");  }  if (--ref.count == 0) {    if (ref.rrdDb == null) {      passNext(ACTION.DROP,ref);      throw new IllegalStateException("Could not release [" + rrdDb.getPath() + "], pool corruption");    }    ref.rrdDb.close();    passNext(ACTION.DROP,ref);    ref.waitempty.countDown();  } else {    passNext(ACTION.SWAP,ref);  }}  }
class C{  protected Messages(){}  }
class C{  private static void findBidirectionalEdges(List<Tuple<Integer,Integer>> edgeList,String path,String fileName){  log.info("Looking for bidirectional edges.");  List<Tuple<Integer,Integer>> bidirectionalList=new ArrayList<Tuple<Integer,Integer>>();  List<Tuple<Integer,Integer>> toRemoveList=new ArrayList<Tuple<Integer,Integer>>();  for (int i=0; i < edgeList.size(); i++) {    Tuple<Integer,Integer> thisEdge=edgeList.get(i);    int source=thisEdge.getFirst();    int destination=thisEdge.getSecond();    Tuple<Integer,Integer> reverseEdge=new Tuple<Integer,Integer>(destination,source);    int reverseSource=reverseEdge.getFirst();    int reverseDestination=reverseEdge.getSecond();    if (toRemoveList.contains(reverseEdge)) {    } else {      for (int j=0; j < edgeList.size(); j++) {        Tuple<Integer,Integer> nextEdge=edgeList.get(j);        int nextSource=nextEdge.getFirst();        int nextDestination=nextEdge.getSecond();        if ((reverseSource == nextSource) && (reverseDestination == nextDestination)) {          bidirectionalList.add(thisEdge);          toRemoveList.add(thisEdge);          toRemoveList.add(nextEdge);        }      }    }  }  edgeList.removeAll(toRemoveList);  String bidirectionalFileName=fileName + "_bidirectional.txt";  String onedirectionalFileName=fileName + "_onedirectional.txt";  writeOutput(bidirectionalList,path,fileName,bidirectionalFileName);  writeOutput(edgeList,path,fileName,onedirectionalFileName);}  }
class C{  public static OptionType newInstance(String value){  final OptionType returnInstance=new OptionType();  returnInstance.setValue(value);  return returnInstance;}  }
