class C{  public boolean isReadOnly(){  return projectDescription.getPermissions() != null && projectDescription.getPermissions().size() == 1 && "read".equalsIgnoreCase(projectDescription.getPermissions().get(0));}  }
class C{  public DataFile2EntityXml(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:43.211 -0500",hash_original_method="D70623C6F3F3546E610A0761808ACD51",hash_generated_method="7153314C2BD4370663FC9A00A6B9E867") static void exhaustInputStream(final InputStream inStream) throws IOException {  byte buffer[]=new byte[1024];  while (inStream.read(buffer) >= 0) {    ;  }}  }
class C{  private void bes(Graph graph){  TetradLogger.getInstance().log("info","** BACKWARD EQUIVALENCE SEARCH");  initializeArrowsBackward(graph);  while (!sortedArrows.isEmpty()) {    Arrow arrow=sortedArrows.first();    sortedArrows.remove(arrow);    Node x=arrow.getA();    Node y=arrow.getB();    if (!graph.isAdjacentTo(x,y))     continue;    if (!validDelete(y,arrow.getHOrT(),arrow.getNaYX(),graph)) {      continue;    }    Set<Node> h=arrow.getHOrT();    double bump=arrow.getBump();    delete(x,y,h,graph,bump);    score+=bump;    rebuildPatternRestricted(graph,x,y);    storeGraph(graph);    reevaluateBackward(graph,x,y);  }}  }
class C{  public SymbolTableEntryOriginal basicGetDelegationBaseType(){  return delegationBaseType;}  }
class C{  public void zoomToPoint(float scale,PointF imagePoint,PointF viewPoint){  FLog.v(TAG,"zoomToPoint");  calculateZoomToPointTransform(mActiveTransform,scale,imagePoint,viewPoint,LIMIT_ALL);  onTransformChanged();}  }
class C{  public Label(double... c){  this(coordToString(c),AbstractDrawer.DEFAULT_COLOR,c);}  }
class C{  private static Query[] createQueries(List<Object> qs,Analyzer a){  QueryParser qp=new QueryParser(DocMaker.BODY_FIELD,a);  List<Object> queries=new ArrayList<>();  for (int i=0; i < qs.size(); i++) {    try {      Object query=qs.get(i);      Query q=null;      if (query instanceof String) {        q=qp.parse((String)query);      } else       if (query instanceof Query) {        q=(Query)query;      } else {        System.err.println("Unsupported Query Type: " + query);      }      if (q != null) {        queries.add(q);      }    } catch (    Exception e) {      e.printStackTrace();    }  }  return queries.toArray(new Query[0]);}  }
class C{  public ClusterMetricsSnapshot(ClusterGroup p){  assert p != null;  Collection<ClusterNode> nodes=p.nodes();  int size=nodes.size();  curJobWaitTime=Long.MAX_VALUE;  lastUpdateTime=0;  maxActiveJobs=0;  curActiveJobs=0;  avgActiveJobs=0;  maxWaitingJobs=0;  curWaitingJobs=0;  avgWaitingJobs=0;  maxRejectedJobs=0;  curRejectedJobs=0;  avgRejectedJobs=0;  maxCancelledJobs=0;  curCancelledJobs=0;  avgCancelledJobs=0;  totalRejectedJobs=0;  totalCancelledJobs=0;  totalExecutedJobs=0;  maxJobWaitTime=0;  avgJobWaitTime=0;  maxJobExecTime=0;  curJobExecTime=0;  avgJobExecTime=0;  totalExecTasks=0;  totalIdleTime=0;  curIdleTime=0;  availProcs=0;  load=0;  avgLoad=0;  gcLoad=0;  heapInit=0;  heapUsed=0;  heapCommitted=0;  heapMax=0;  nonHeapInit=0;  nonHeapUsed=0;  nonHeapCommitted=0;  nonHeapMax=0;  nonHeapTotal=0;  upTime=0;  startTime=0;  nodeStartTime=0;  threadCnt=0;  peakThreadCnt=0;  startedThreadCnt=0;  daemonThreadCnt=0;  lastDataVer=0;  sentMsgsCnt=0;  sentBytesCnt=0;  rcvdMsgsCnt=0;  rcvdBytesCnt=0;  outMesQueueSize=0;  heapTotal=0;  totalNodes=nodes.size();  for (  ClusterNode node : nodes) {    ClusterMetrics m=node.metrics();    lastUpdateTime=max(lastUpdateTime,node.metrics().getLastUpdateTime());    curActiveJobs+=m.getCurrentActiveJobs();    maxActiveJobs=max(maxActiveJobs,m.getCurrentActiveJobs());    avgActiveJobs+=m.getCurrentActiveJobs();    totalExecutedJobs+=m.getTotalExecutedJobs();    totalExecTasks+=m.getTotalExecutedTasks();    totalCancelledJobs+=m.getTotalCancelledJobs();    curCancelledJobs+=m.getCurrentCancelledJobs();    maxCancelledJobs=max(maxCancelledJobs,m.getCurrentCancelledJobs());    avgCancelledJobs+=m.getCurrentCancelledJobs();    totalRejectedJobs+=m.getTotalRejectedJobs();    curRejectedJobs+=m.getCurrentRejectedJobs();    maxRejectedJobs=max(maxRejectedJobs,m.getCurrentRejectedJobs());    avgRejectedJobs+=m.getCurrentRejectedJobs();    curWaitingJobs+=m.getCurrentJobWaitTime();    maxWaitingJobs=max(maxWaitingJobs,m.getCurrentWaitingJobs());    avgWaitingJobs+=m.getCurrentWaitingJobs();    maxJobExecTime=max(maxJobExecTime,m.getMaximumJobExecuteTime());    avgJobExecTime+=m.getAverageJobExecuteTime();    curJobExecTime+=m.getCurrentJobExecuteTime();    curJobWaitTime=min(curJobWaitTime,m.getCurrentJobWaitTime());    maxJobWaitTime=max(maxJobWaitTime,m.getCurrentJobWaitTime());    avgJobWaitTime+=m.getCurrentJobWaitTime();    daemonThreadCnt+=m.getCurrentDaemonThreadCount();    peakThreadCnt=max(peakThreadCnt,m.getCurrentThreadCount());    threadCnt+=m.getCurrentThreadCount();    startedThreadCnt+=m.getTotalStartedThreadCount();    curIdleTime+=m.getCurrentIdleTime();    totalIdleTime+=m.getTotalIdleTime();    heapCommitted+=m.getHeapMemoryCommitted();    heapUsed+=m.getHeapMemoryUsed();    heapMax=max(heapMax,m.getHeapMemoryMaximum());    heapTotal+=m.getHeapMemoryTotal();    heapInit+=m.getHeapMemoryInitialized();    nonHeapCommitted+=m.getNonHeapMemoryCommitted();    nonHeapUsed+=m.getNonHeapMemoryUsed();    nonHeapMax=max(nonHeapMax,m.getNonHeapMemoryMaximum());    nonHeapTotal+=m.getNonHeapMemoryTotal();    nonHeapInit+=m.getNonHeapMemoryInitialized();    upTime=max(upTime,m.getUpTime());    lastDataVer=max(lastDataVer,m.getLastDataVersion());    sentMsgsCnt+=m.getSentMessagesCount();    sentBytesCnt+=m.getSentBytesCount();    rcvdMsgsCnt+=m.getReceivedMessagesCount();    rcvdBytesCnt+=m.getReceivedBytesCount();    outMesQueueSize+=m.getOutboundMessagesQueueSize();    avgLoad+=m.getCurrentCpuLoad();  }  curJobExecTime/=size;  avgActiveJobs/=size;  avgCancelledJobs/=size;  avgRejectedJobs/=size;  avgWaitingJobs/=size;  avgJobExecTime/=size;  avgJobWaitTime/=size;  avgLoad/=size;  if (!F.isEmpty(nodes)) {    ClusterMetrics oldestNodeMetrics=oldest(nodes).metrics();    nodeStartTime=oldestNodeMetrics.getNodeStartTime();    startTime=oldestNodeMetrics.getStartTime();  }  Map<String,Collection<ClusterNode>> neighborhood=U.neighborhood(nodes);  gcLoad=gcCpus(neighborhood);  load=cpus(neighborhood);  availProcs=cpuCnt(neighborhood);}  }
class C{  @SneakyThrows public static X509Certificate readCertificate(InputStream is){  return (X509Certificate)CERT_FACTORY.generateCertificate(is);}  }
class C{  protected ServiceRefImpl(){  super();}  }
class C{  public PasswordEditText(Context context,AttributeSet attrs){  this(context,attrs,R.attr.mdPasswordEditTextStyle);}  }
class C{  private static String sanitizePath(String rawPath){  if (rawPath == null) {    return null;  }  return rawPath.replaceFirst("^~",System.getProperty("user.home"));}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  public static void read(final URL shpFile,GeomVectorField field,final Bag masked,Class<?> masonGeometryClass) throws FileNotFoundException, IOException, Exception {  if (shpFile == null) {    throw new IllegalArgumentException("shpFile is null; likely file not found");  }  if (!MasonGeometry.class.isAssignableFrom(masonGeometryClass)) {    throw new IllegalArgumentException("masonGeometryClass not a MasonGeometry class or subclass");  }  try {    FileInputStream shpFileInputStream=new FileInputStream(shpFile.getFile());    if (shpFileInputStream == null) {      throw new FileNotFoundException(shpFile.getFile());    }    FileChannel channel=shpFileInputStream.getChannel();    ByteBuffer byteBuf=channel.map(FileChannel.MapMode.READ_ONLY,0,(int)channel.size());    channel.close();    String dbfFilename=shpFile.getFile().substring(0,shpFile.getFile().lastIndexOf('.')) + ".dbf";    FileInputStream dbFileInputStream=new FileInputStream(dbfFilename);    FileChannel dbChannel=dbFileInputStream.getChannel();    ByteBuffer dbBuffer=dbChannel.map(FileChannel.MapMode.READ_ONLY,0,(int)dbChannel.size());    dbChannel.close();    dbBuffer.order(ByteOrder.LITTLE_ENDIAN);    int headerSize=dbBuffer.getShort(8);    int recordSize=dbBuffer.getShort(10);    int fieldCnt=(short)((headerSize - 1) / 32 - 1);class FieldDirEntry {      public String name;      public int fieldSize;    }    FieldDirEntry fields[]=new FieldDirEntry[fieldCnt];    RandomAccessFile inFile=new RandomAccessFile(dbfFilename,"r");    if (inFile == null) {      throw new FileNotFoundException(dbfFilename);    }    inFile.seek(32);    byte c[]=new byte[32];    char type[]=new char[fieldCnt];    int length;    for (int i=0; i < fieldCnt; i++) {      inFile.readFully(c,0,11);      int j=0;      for (j=0; j < 12 && c[j] != 0; j++)       ;      String name=new String(c,0,j);      type[i]=(char)inFile.readByte();      fields[i]=new FieldDirEntry();      fields[i].name=name;      inFile.read(c,0,4);      byte b=inFile.readByte();      if (b > 0) {        length=(int)b;      } else {        length=256 + (int)b;      }      fields[i].fieldSize=length;      inFile.skipBytes(15);    }    inFile.seek(0);    inFile.skipBytes(headerSize);    GeometryFactory geomFactory=new GeometryFactory();    byteBuf.position(100);    while (byteBuf.hasRemaining()) {      byteBuf.position(byteBuf.position() + 8);      byteBuf.order(ByteOrder.LITTLE_ENDIAN);      int recordType=byteBuf.getInt();      if (!isSupported(recordType)) {        System.out.println("Error: ShapeFileImporter.ingest(...): ShapeType " + typeToString(recordType) + " not supported.");        return;      }      byte r[]=new byte[recordSize];      inFile.read(r);      int start1=1;      Map<String,AttributeValue> attributes=new HashMap<String,AttributeValue>(fieldCnt);      for (int k=0; k < fieldCnt; k++) {        if (masked != null && !masked.contains(fields[k].name)) {          start1+=fields[k].fieldSize;          continue;        }        String rawAttributeValue=new String(r,start1,fields[k].fieldSize);        rawAttributeValue=rawAttributeValue.trim();        AttributeValue attributeValue=new AttributeValue();        if (rawAttributeValue.isEmpty()) {          attributeValue.setString(rawAttributeValue);        } else         if (type[k] == 'N') {          if (rawAttributeValue.length() == 0) {            attributeValue.setString("0");          }          if (rawAttributeValue.indexOf('.') != -1) {            attributeValue.setDouble(Double.valueOf(rawAttributeValue));          } else {            attributeValue.setInteger(Integer.valueOf(rawAttributeValue));          }        } else         if (type[k] == 'L') {          attributeValue.setValue(Boolean.valueOf(rawAttributeValue));        } else         if (type[k] == 'F') {          attributeValue.setValue(Double.valueOf(rawAttributeValue));        } else {          attributeValue.setString(rawAttributeValue);        }        attributes.put(fields[k].name,attributeValue);        start1+=fields[k].fieldSize;      }      Geometry geom=null;      if (recordType == POINT) {        Coordinate pt=new Coordinate(byteBuf.getDouble(),byteBuf.getDouble());        geom=geomFactory.createPoint(pt);      } else       if (recordType == POINTZ) {        Coordinate pt=new Coordinate(byteBuf.getDouble(),byteBuf.getDouble(),byteBuf.getDouble());        geom=geomFactory.createPoint(pt);      } else       if (recordType == POLYLINE || recordType == POLYGON) {        byteBuf.position(byteBuf.position() + 32);        int numParts=byteBuf.getInt();        int numPoints=byteBuf.getInt();        int partIndicies[]=new int[numParts];        for (int i=0; i < numParts; i++) {          partIndicies[i]=byteBuf.getInt();        }        Coordinate pointsArray[]=new Coordinate[numPoints];        for (int i=0; i < numPoints; i++) {          pointsArray[i]=new Coordinate(byteBuf.getDouble(),byteBuf.getDouble());        }        Geometry[] parts=new Geometry[numParts];        for (int i=0; i < numParts; i++) {          int start=partIndicies[i];          int end=numPoints;          if (i < numParts - 1) {            end=partIndicies[i + 1];          }          int size=end - start;          Coordinate coords[]=new Coordinate[size];          for (int j=0; j < size; j++) {            coords[j]=new Coordinate(pointsArray[start + j]);          }          if (recordType == POLYLINE) {            parts[i]=geomFactory.createLineString(coords);          } else {            parts[i]=geomFactory.createLinearRing(coords);          }        }        if (recordType == POLYLINE) {          LineString[] ls=new LineString[numParts];          for (int i=0; i < numParts; i++) {            ls[i]=(LineString)parts[i];          }          if (numParts == 1) {            geom=parts[0];          } else {            geom=geomFactory.createMultiLineString(ls);          }        } else {          geom=createPolygon(parts);        }      } else {        System.err.println("Unknown shape type in " + recordType);      }      if (geom != null) {        MasonGeometry masonGeometry=(MasonGeometry)masonGeometryClass.newInstance();        masonGeometry.geometry=geom;        if (!attributes.isEmpty()) {          masonGeometry.addAttributes(attributes);        }        field.addGeometry(masonGeometry);      }    }  } catch (  IOException e) {    System.out.println("Error in ShapeFileImporter!!");    System.out.println("SHP filename: " + shpFile);    throw e;  }}  }
class C{  public int size(){  unparcel();  return mMap.size();}  }
class C{  public SquareHighlighter(ChessBoard board){  this.board=board;  for (int i=0; i < 64; i++) {    decorators[i]=new HighlightDecorator(board.getSquare(i));  }  for (int i=0; i < 13; i++) {    if (board.getPieceJailSquares()[i] != null) {      dropSquareDecorators[i]=new HighlightDecorator(board.getPieceJailSquares()[i]);    }  }}  }
class C{  public NPCGroupsXMLLoader(final String uri){  try {    this.uri=new URI(uri);  } catch (  URISyntaxException e) {    logger.error(e,e);  }}  }
class C{  public UseableEntity2DView(){  this.action=ActionType.USE;}  }
class C{  public void displayGroupList(int arg0,String arg1){  _log.debug("displayGroupList: " + arg0 + " "+ arg1);}  }
class C{  private boolean checkDoubleForEquality(double expected,double actual){  if (expected == actual) {    return true;  }  if (Double.isNaN(expected) && !Double.isNaN(actual)) {    return false;  }  if (!Double.isNaN(expected) && Double.isNaN(actual)) {    return false;  }  final double MAX_RELATIVE_ERROR=0.000000001;  double relativeError;  if (Math.abs(actual) > Math.abs(expected)) {    relativeError=Math.abs((expected - actual) / actual);  } else {    relativeError=Math.abs((expected - actual) / expected);  }  if (relativeError > MAX_RELATIVE_ERROR) {    return false;  } else {    return true;  }}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public void clear(){  m_trie=new Trie(m_trie.isCaseSensitive());  super.clear();}  }
class C{  public boolean hasListeners(String listenerTypeName){synchronized (monData) {    if (!monData.hasListeners())     return false;    ListenerType type=getListenerType(listenerTypeName);    if (type == null)     return false; else     return type.hasListeners();  }}  }
class C{  public ImageSize scaleDown(int sampleSize){  return new ImageSize(width / sampleSize,height / sampleSize);}  }
class C{  public static List<VisibleActionGroup> renderActionGroup(@NotNull ActionGroup group,PresentationFactory presentationFactory,ActionManager actionManager,PerspectiveManager perspectiveManager){  Presentation presentation=presentationFactory.getPresentation(group);  ActionEvent event=new ActionEvent(presentation,actionManager,perspectiveManager);  if (!presentation.isVisible()) {    return null;  }  Action[] children=group.getChildren(event);  List<VisibleActionGroup> currentVisibleActionGroupList=new ArrayList<>();  List<Action> currentActionList=new ArrayList<>();  String currentGroupId=actionManager.getId(group);  for (  Action child : children) {    if (child == null) {      Log.error(Utils.class,"action is null: group=" + group + " group id="+ currentGroupId);      continue;    }    presentation=presentationFactory.getPresentation(child);    child.update(new ActionEvent(presentation,actionManager,perspectiveManager));    if (!presentation.isVisible()) {      continue;    }    if (child instanceof ActionGroup) {      ActionGroup actionGroup=(ActionGroup)child;      if (actionGroup.isPopup()) {        if (actionGroup.disableIfNoVisibleChildren()) {          final boolean visibleChildren=hasVisibleChildren(actionGroup,presentationFactory,actionManager,perspectiveManager);          if (actionGroup.hideIfNoVisibleChildren() && !visibleChildren) {            continue;          }          presentation.setEnabled(actionGroup.canBePerformed() || visibleChildren);        }        currentActionList.add(child);      } else {        List<VisibleActionGroup> newVisibleActionGroupList=renderActionGroup((ActionGroup)child,presentationFactory,actionManager,perspectiveManager);        currentVisibleActionGroupList.addAll(newVisibleActionGroupList);      }    } else     if (child instanceof Separator) {      if ((((Separator)child).getText() != null) || (!currentActionList.isEmpty() && !(currentActionList.get(currentActionList.size() - 1) instanceof Separator))) {        currentActionList.add(child);      }    } else {      currentActionList.add(child);    }  }  currentVisibleActionGroupList.add(0,new VisibleActionGroup(currentGroupId,currentActionList));  return currentVisibleActionGroupList;}  }
class C{  public void accessKeySVG12(float offset,String keyName){}  }
class C{  public StdTypeList withFirst(Type type){  int sz=size();  StdTypeList result=new StdTypeList(sz + 1);  result.set0(0,type);  for (int i=0; i < sz; i++) {    result.set0(i + 1,getOrNull0(i));  }  return result;}  }
class C{  private void initGrain(){  for (int i=0; i < 10; i++) {    output=getOutput();    nfsr=shift(nfsr,getOutputNFSR() ^ lfsr[0] ^ output);    lfsr=shift(lfsr,getOutputLFSR() ^ output);  }  initialised=true;}  }
class C{  public final boolean isListed(final BlacklistType blacklistType,final DigestURL url){  if (url == null) {    throw new IllegalArgumentException("url may not be null");  }  if (url.getHost() == null) {    return false;  }  HandleSet urlHashCache=getCacheUrlHashsSet(blacklistType);  if (urlHashCache == null) {    urlHashCache=new RowHandleSet(Word.commonHashLength,Word.commonHashOrder,0);    if (isListed(blacklistType,url.getHost().toLowerCase(),url.getFile())) {      try {        urlHashCache.put(url.hash());      } catch (      final SpaceExceededException e) {        ConcurrentLog.logException(e);      }      this.cachedUrlHashs.put(blacklistType,urlHashCache);    }  }  if (!urlHashCache.has(url.hash())) {    final boolean temp=isListed(blacklistType,url.getHost().toLowerCase(),url.getFile());    if (temp) {      try {        urlHashCache.put(url.hash());      } catch (      final SpaceExceededException e) {        ConcurrentLog.logException(e);      }    }    return temp;  }  return true;}  }
class C{  public N4ClassExpression createN4ClassExpression(){  N4ClassExpressionImpl n4ClassExpression=new N4ClassExpressionImpl();  return n4ClassExpression;}  }
class C{  private Pair<VirtualFile,VirtualFile> prepareFileInBothRepositories() throws IOException {  cd(myRepository);  String aFile="A.txt";  touch(aFile,"basic");  hg("add " + aFile);  hg("commit -m 'create file' ");  hg("update");  myRepository.refresh(false,true);  final VirtualFile parentFile=myRepository.findChild(aFile);  assertNotNull("Can't find " + aFile + " in parent repo!",parentFile);  cd(myChildRepo);  hg("pull");  hg("update");  myChildRepo.refresh(false,true);  final VirtualFile childFile=myChildRepo.findChild(aFile);  return Pair.create(parentFile,childFile);}  }
class C{  public PrintWriter out(){  return out;}  }
class C{  public T pop(){  if (size() > 0) {    return remove(size() - 1);  }  return null;}  }
class C{  public DoubleNode<E> prev(){  return prev;}  }
class C{  public CompositeOutputStream(OutputStream... out){  final Set<OutputStream> newSet=new HashSet<OutputStream>();  for (  OutputStream stream : out) {    newSet.add(stream);  }  this.streams=newSet;}  }
class C{  protected void writeDataDescriptor(ZipEntry ze) throws IOException {  if (ze.getMethod() != DEFLATED || raf != null) {    return;  }  writeOut(DD_SIG.getBytes());  writeOut((new ZipLong(entry.getCrc())).getBytes());  writeOut((new ZipLong(entry.getCompressedSize())).getBytes());  writeOut((new ZipLong(entry.getSize())).getBytes());  written+=16;}  }
class C{  public void configure(){  SpecificTrafficController tc=new SpecificTrafficController(this.getSystemConnectionMemo());  this.getSystemConnectionMemo().setTrafficController(tc);  tc.setAdapterMemo(this.getSystemConnectionMemo());  this.getSystemConnectionMemo().configureManagers();  tc.connectPort(this);  this.getSystemConnectionMemo().setSerialAddress(new jmri.jmrix.powerline.SerialAddress(this.getSystemConnectionMemo()));  sourceThread=new Thread(this);  sourceThread.setName("Powerline Simulator");  sourceThread.setPriority(Thread.MIN_PRIORITY);  sourceThread.start();}  }
class C{  private void addStepToForgetVolumes(Workflow workflow,URI vplexSystemURI,List<URI> volumeURIs,String waitFor){  List<VolumeInfo> nativeVolumeInfoList=getNativeVolumeInfo(volumeURIs);  workflow.createStep(VOLUME_FORGET_STEP,String.format("Forget Volumes:%n%s",BlockDeviceController.getVolumesMsg(_dbClient,volumeURIs)),waitFor,vplexSystemURI,DiscoveredDataObject.Type.vplex.name(),this.getClass(),createForgetVolumesMethod(vplexSystemURI,nativeVolumeInfoList),null,null);}  }
class C{  public void modelCheck() throws Exception {  boolean recovered=this.recover();  try {    if (!this.checkAssumptions())     return;    if (!this.doInit(false))     return;  } catch (  Throwable e) {    if (this.errState != null) {      MP.printError(EC.TLC_INITIAL_STATE,new String[]{e.getMessage(),this.errState.toString()});    } else {      MP.printError(EC.GENERAL,"computing initial states",e);    }    this.tool.setCallStack();    try {      this.numOfGenStates.set(0);      this.doInit(true);    } catch (    Throwable e1) {      MP.printError(EC.TLC_NESTED_EXPRESSION,this.tool.getCallStack().toString());    }    this.printSummary(false);    this.cleanup(false);    return;  }  if (recovered) {    MP.printMessage(EC.TLC_INIT_GENERATED3,new String[]{String.valueOf(this.numOfGenStates),String.valueOf(this.theInitStates.length)});  } else {    MP.printMessage(EC.TLC_INIT_GENERATED4,new String[]{String.valueOf(this.numOfGenStates),String.valueOf(this.theInitStates.length)});  }  if (this.actions.length == 0) {    this.reportSuccess();    this.printSummary(true);    this.cleanup(true);    return;  }  boolean success=false;  try {    boolean terminated=false;    for (int level=2; level <= TLCGlobals.DFIDMax; level++) {      if (terminated) {        if (this.errState == null) {          if (this.checkLiveness) {            MP.printMessage(EC.TLC_PROGRESS_STATS_DFID,new String[]{String.valueOf(this.numOfGenStates),String.valueOf(theFPSet.size())});            success=liveCheck.finalCheck();            if (!success)             return;          }          success=true;          this.reportSuccess();        } else         if (this.keepCallStack) {          this.tool.setCallStack();          try {            this.doNext(this.predErrState,this.predErrState.fingerPrint(),true,new ObjLongTable(10),new StateVec(1),new LongVec());          } catch (          Throwable e) {            MP.printError(EC.TLC_NESTED_EXPRESSION,this.tool.getCallStack().toString());          }        }        break;      }      MP.printMessage(EC.TLC_PROGRESS_STATS_DFID,new String[]{String.valueOf(level),String.valueOf(this.numOfGenStates),String.valueOf(this.theFPSet.size())});      FPIntSet.incLevel();      success=this.runTLC(level);      if (!success)       return;      for (int i=0; i < this.workers.length; i++) {        if (this.workers[i].isTerminated()) {          terminated=true;          break;        }      }      boolean moreLevel=false;      for (int i=0; i < this.workers.length; i++) {        if (this.workers[i].hasMoreLevel()) {          moreLevel=true;          break;        }      }      terminated=terminated || !moreLevel;    }  } catch (  Exception e) {    success=false;    if (!(e instanceof LiveException)) {      MP.printError(EC.GENERAL,e);    }  } finally {    this.printSummary(success);    this.cleanup(success);  }}  }
class C{  public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public void begin(Attributes attributes) throws Exception {  UIComponent uic=(UIComponent)digester.peek();  if (log.isTraceEnabled()) {    log.trace("component: " + uic.getId());  }  AttributesImpl attrs=new AttributesImpl(attributes);  for (int i=0; i < attrs.getLength(); i++) {    String qName=attributes.getQName(i);    attrs.setLocalName(i,qName);    attrs.setValue(i,attributes.getValue(qName));    if (log.isTraceEnabled()) {      log.trace("ComponentRule: qName: " + qName + " value: "+ attributes.getValue(qName));    }  }  bc.applyAttributesToComponentInstance(uic,attrs);  if (root == null) {    root=(UIComponent)digester.peek(digester.getCount() - 1);  }  root.getChildren().add(uic);  if (uic instanceof UIForm) {    root=uic;  }}  }
class C{  private void validateCapabilities(Context context,Context.Capabilities[] required) throws IllegalStateException {  String missing=Stream.of(required).filter(null).map(null).collect(Collectors.joining(", "));  if (StringUtils.isNotBlank(missing) || context == null) {    throw new IllegalStateException("missing required context: " + missing);  }}  }
class C{  public ToStringBuilder append(final String fieldName,final byte value){  style.append(buffer,fieldName,value);  return this;}  }
class C{  public boolean equals(Object o){  if (o == this)   return true;  if (!(o instanceof MBeanFeatureInfo))   return false;  MBeanFeatureInfo p=(MBeanFeatureInfo)o;  return (Objects.equals(p.getName(),getName()) && Objects.equals(p.getDescription(),getDescription()) && Objects.equals(p.getDescriptor(),getDescriptor()));}  }
class C{  public static double random(double min,double max){  double next=RANDOM.nextDouble();  return min + (next * max) - (next * min);}  }
class C{  public TypeAliasItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public static Test suite(){  return (new TestSuite(ViewParametersITCase.class));}  }
class C{  @Override protected T doSwitch(int classifierID,EObject theEObject){switch (classifierID) {case OrientedPackage.COMPONENT:{      Component component=(Component)theEObject;      T result=caseComponent(component);      if (result == null)       result=defaultCase(theEObject);      return result;    }case OrientedPackage.PORT:{    Port port=(Port)theEObject;    T result=casePort(port);    if (result == null)     result=defaultCase(theEObject);    return result;  }default :return defaultCase(theEObject);}}  }
class C{  public DummyStatisticsFactory(){}  }
class C{  private void collectExternalDependenciesFromIvyXmlFile(File ivyXmlFile) throws XPathExpressionException, IOException, SAXException {  String module=getModuleName(ivyXmlFile);  log("Collecting external dependencies from: " + ivyXmlFile.getPath(),verboseLevel);  Document document=documentBuilder.parse(ivyXmlFile);  String dependencyPath="/ivy-module/dependencies/dependency[not(starts-with(@conf,'start'))]";  NodeList dependencies=(NodeList)xpath.evaluate(dependencyPath,document,XPathConstants.NODESET);  for (int depNum=0; depNum < dependencies.getLength(); ++depNum) {    Element dependency=(Element)dependencies.item(depNum);    String groupId=dependency.getAttribute("org");    String artifactId=dependency.getAttribute("name");    String dependencyCoordinate=groupId + ':' + artifactId;    Set<String> classifiers=dependencyClassifiers.get(dependencyCoordinate);    if (null == classifiers) {      classifiers=new HashSet<>();      dependencyClassifiers.put(dependencyCoordinate,classifiers);    }    String conf=dependency.getAttribute("conf");    boolean confContainsTest=conf.contains("test");    boolean isOptional=globalOptionalExternalDependencies.contains(dependencyCoordinate) || (perModuleOptionalExternalDependencies.containsKey(module) && perModuleOptionalExternalDependencies.get(module).contains(dependencyCoordinate));    SortedSet<ExternalDependency> deps=allExternalDependencies.get(module);    if (null == deps) {      deps=new TreeSet<>();      allExternalDependencies.put(module,deps);    }    NodeList artifacts=null;    if (dependency.hasChildNodes()) {      artifacts=(NodeList)xpath.evaluate("artifact",dependency,XPathConstants.NODESET);    }    if (null != artifacts && artifacts.getLength() > 0) {      for (int artifactNum=0; artifactNum < artifacts.getLength(); ++artifactNum) {        Element artifact=(Element)artifacts.item(artifactNum);        String type=artifact.getAttribute("type");        String ext=artifact.getAttribute("ext");        boolean isTestDependency=confContainsTest && (type.equals("test") || !conf.contains("compile"));        if ((type.isEmpty() && ext.isEmpty()) || type.equals("jar") || ext.equals("jar")) {          String classifier=artifact.getAttribute("maven:classifier");          if (classifier.isEmpty()) {            classifier=null;          }          classifiers.add(classifier);          deps.add(new ExternalDependency(groupId,artifactId,classifier,isTestDependency,isOptional));        } else {          nonJarDependencies.add(dependencyCoordinate);        }      }    } else {      classifiers.add(null);      deps.add(new ExternalDependency(groupId,artifactId,null,confContainsTest,isOptional));    }  }}  }
class C{  public boolean isInvoiced(){  Object oo=get_Value(COLUMNNAME_IsInvoiced);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public TDoubleObjectHashMap(){  _hashingStrategy=this;}  }
class C{  public static void gluPerspective(GL10 gl,double fovy,double aspect,double zNear,double zFar){  double top=zNear * Math.tan(fovy * (Math.PI / 360.0));  double bottom=-top;  double left=bottom * aspect;  double right=top * aspect;  gl.glFrustumf((float)left,(float)right,(float)bottom,(float)top,(float)zNear,(float)zFar);}  }
class C{  protected List<Chunk> parseChunkSpec(String delimitedChunkDefinitions,String delimitedTokenText,List<MutableToken> untypedTokens){  List<Chunk> chunks=new ArrayList<>();  String[] chunkDefinitions=delimitedChunkDefinitions.split("\\|");  for (int i=0; i < chunkDefinitions.length; i++) {    chunks.add(parseChunk(chunkDefinitions[i],delimitedTokenText,untypedTokens));  }  return chunks;}  }
class C{  public Vector4d add(double x,double y,double z,double w){  this.x+=x;  this.y+=y;  this.z+=z;  this.w+=w;  return this;}  }
class C{  public OrganizationAlreadyExistsException(){}  }
class C{  public City(){  super(KEY);}  }
class C{  public static boolean isSameLength(final int[] array1,final int[] array2){  if (array1 == null && array2 != null && array2.length > 0 || array2 == null && array1 != null && array1.length > 0 || array1 != null && array2 != null && array1.length != array2.length) {    return false;  }  return true;}  }
class C{  public void printStackTrace(PrintWriter s){  super.printStackTrace(s);  if (reason != null) {    s.print("at ");    reason.printStackTrace(s);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void transformSelectedNodes(TransformerImpl transformer) throws TransformerException {  final XPathContext xctxt=transformer.getXPathContext();  final int sourceNode=xctxt.getCurrentNode();  DTMIterator sourceNodes=m_selectExpression.asIterator(xctxt,sourceNode);  try {    final Vector keys=(m_sortElems == null) ? null : transformer.processSortKeys(this,sourceNode);    if (null != keys)     sourceNodes=sortNodes(xctxt,keys,sourceNodes);    xctxt.pushCurrentNode(DTM.NULL);    IntStack currentNodes=xctxt.getCurrentNodeStack();    xctxt.pushCurrentExpressionNode(DTM.NULL);    IntStack currentExpressionNodes=xctxt.getCurrentExpressionNodeStack();    xctxt.pushSAXLocatorNull();    xctxt.pushContextNodeList(sourceNodes);    transformer.pushElemTemplateElement(null);    DTM dtm=xctxt.getDTM(sourceNode);    int docID=sourceNode & DTMManager.IDENT_DTM_DEFAULT;    int child;    while (DTM.NULL != (child=sourceNodes.nextNode())) {      currentNodes.setTop(child);      currentExpressionNodes.setTop(child);      if ((child & DTMManager.IDENT_DTM_DEFAULT) != docID) {        dtm=xctxt.getDTM(child);        docID=child & DTMManager.IDENT_DTM_DEFAULT;      }      final int nodeType=dtm.getNodeType(child);      for (ElemTemplateElement t=this.m_firstChild; t != null; t=t.m_nextSibling) {        xctxt.setSAXLocator(t);        transformer.setCurrentElement(t);        t.execute(transformer);      }      if (m_doc_cache_off) {        if (DEBUG)         System.out.println("JJK***** CACHE RELEASE *****\n" + "\tdtm=" + dtm.getDocumentBaseURI());        xctxt.getSourceTreeManager().removeDocumentFromCache(dtm.getDocument());        xctxt.release(dtm,false);      }    }  }  finally {    xctxt.popSAXLocator();    xctxt.popContextNodeList();    transformer.popElemTemplateElement();    xctxt.popCurrentExpressionNode();    xctxt.popCurrentNode();    sourceNodes.detach();  }}  }
class C{  public AbstractInsnNode[] toArray(){  int i=0;  AbstractInsnNode elem=first;  AbstractInsnNode[] insns=new AbstractInsnNode[size];  while (elem != null) {    insns[i]=elem;    elem.index=i++;    elem=elem.next;  }  return insns;}  }
class C{  @Override public TestFsm registerFsm(final String sessionId){  if (debugEnabled) {    LOGGER.debug("Registering new FSM with '" + sessionId + "' session ID...");  }  final TestFsm fsm=getSession(sessionId);  if (debugEnabled) {    LOGGER.debug("FSM has been successfully registered with '" + sessionId + "' session ID.");  }  return fsm;}  }
class C{  public static String normalizeSubject(String subj,String prefix){  StringBuilder subject=new StringBuilder(subj);  int prefixLength=prefix.length();  int index=subject.indexOf(prefix);  if (index != 0) {    if (index > 0) {      subject.delete(index,index + prefixLength);    }    subject.insert(0,prefix);  }  String match="Re:";  index=subject.indexOf(match,prefixLength);  while (index > -1) {    subject.replace(index,index + match.length(),"RE:");    index=subject.indexOf(match,prefixLength);  }  match="RE:";  int indexRE=subject.indexOf(match,prefixLength) + match.length();  index=subject.indexOf(match,indexRE);  while (index > 0) {    subject.delete(index,index + match.length());    index=subject.indexOf(match,indexRE);  }  match="  ";  index=subject.indexOf(match,prefixLength);  while (index > -1) {    subject.replace(index,index + match.length()," ");    index=subject.indexOf(match,prefixLength);  }  return subject.toString();}  }
class C{  @Override public Pair<OperandSize,String> generate(final ITranslationEnvironment environment,final long offset,final List<ReilInstruction> instructions) throws InternalTranslationException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  Preconditions.checkArgument(offset >= 0,"Error: Argument offset can't be less than 0");  final String negatedCarry=environment.getNextVariableString();  instructions.add(ReilHelpers.createBisz(offset,OperandSize.BYTE,Helpers.CARRY_FLAG,OperandSize.BYTE,negatedCarry));  return new Pair<OperandSize,String>(OperandSize.BYTE,negatedCarry);}  }
class C{  public URLInputReader(java.net.URL url) throws IOException {  if (Debug.debugging("binaryfile")) {    Debug.output("URLInputReader created from URL ");  }  inputURL=url;  reopen();  name=url.getProtocol() + "://" + url.getHost()+ url.getFile();}  }
class C{  public ST createStringTemplateInternally(CompiledST impl){  ST st=createStringTemplate(impl);  if (trackCreationEvents && st.debugState != null) {    st.debugState.newSTEvent=null;  }  return st;}  }
class C{  @Override public Map toMap(ResultSet rs) throws SQLException {  Map result=new CaseInsensitiveHashMap();  ResultSetMetaData rsmd=rs.getMetaData();  int cols=rsmd.getColumnCount();  for (int i=1; i <= cols; i++) {    result.put(rsmd.getColumnName(i),rs.getObject(i));  }  return result;}  }
class C{  public static DrawerLayout.LayoutParams processDrawerLayoutParams(DrawerBuilder drawer,DrawerLayout.LayoutParams params){  if (params != null) {    if (drawer.mDrawerGravity != null && (drawer.mDrawerGravity == Gravity.RIGHT || drawer.mDrawerGravity == Gravity.END)) {      params.rightMargin=0;      if (Build.VERSION.SDK_INT >= 17) {        params.setMarginEnd(0);      }      params.leftMargin=drawer.mActivity.getResources().getDimensionPixelSize(R.dimen.material_drawer_margin);      if (Build.VERSION.SDK_INT >= 17) {        params.setMarginEnd(drawer.mActivity.getResources().getDimensionPixelSize(R.dimen.material_drawer_margin));      }    }    if (drawer.mDisplayBelowStatusBar != null && drawer.mDisplayBelowStatusBar && Build.VERSION.SDK_INT >= 19) {      params.topMargin=UIUtils.getStatusBarHeight(drawer.mActivity,true);    }    if (drawer.mDrawerWidth > -1) {      params.width=drawer.mDrawerWidth;    } else {      params.width=DrawerUIUtils.getOptimalDrawerWidth(drawer.mActivity);    }  }  return params;}  }
class C{  public static void e(String tag,String msg){  if (sLevel > LEVEL_ERROR) {    return;  }  Log.e(tag,msg);}  }
class C{  @Override public boolean canChangeSecondaryFacing(){  return !hasActiveFieldArtillery();}  }
class C{  public acronym addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public String[] processName(String qName,String[] parts,boolean isAttribute){  String[] name=currentContext.processName(qName,isAttribute);  if (name == null)   return null;  System.arraycopy(name,0,parts,0,3);  return parts;}  }
class C{  private static boolean hasSpecializedHandlerIntents(Context context,Intent intent){  try {    PackageManager pm=context.getPackageManager();    List<ResolveInfo> handlers=pm.queryIntentActivities(intent,PackageManager.GET_RESOLVED_FILTER);    if (handlers == null || handlers.isEmpty()) {      return false;    }    for (    ResolveInfo resolveInfo : handlers) {      IntentFilter filter=resolveInfo.filter;      if (filter == null)       continue;      if (filter.countDataAuthorities() == 0 || filter.countDataPaths() == 0)       continue;      if (resolveInfo.activityInfo == null)       continue;      return true;    }  } catch (  RuntimeException e) {    Log.e(TAG,"Runtime exception while getting specialized handlers");  }  return false;}  }
class C{  @Override public void releaseToRefresh(){}  }
class C{  private void close() throws IOException {  try {    if (m_state != null) {      m_state.close();    }  }  finally {    reset();  }}  }
class C{  public boolean isSetKey(){  return this.key != null;}  }
class C{  @Override public void writeExternal(ObjectOutput out) throws IOException {  super.writeExternal(out);  out.writeObject(conservativeApproximation);  out.writeObject(progressiveApproximation);}  }
class C{  public Property basicGetEventProperty(){  return eventProperty;}  }
class C{  public void stop(){  paused=true;}  }
class C{  private Configuration(Parcel source){  readFromParcel(source);}  }
class C{  public void dropTables(DatabaseSession session,JPAMSchemaManager schemaManager,boolean build){  buildConstraints(schemaManager,build);  boolean shouldLogExceptionStackTrace=session.getSessionLog().shouldLogExceptionStackTrace();  int level=session.getSessionLog().getLevel();  if (shouldLogExceptionStackTrace) {    session.getSessionLog().setShouldLogExceptionStackTrace(false);  }  if (level > SessionLog.FINE) {    session.getSessionLog().setLevel(SessionLog.SEVERE);  }  try {    dropConstraints(session,schemaManager,false);    String sequenceTableName=getSequenceTableName(session);    List<TableDefinition> tables=getTableDefinitions();    int trys=1;    if (JPAMSchemaManager.FORCE_DROP) {      trys=5;    }    while ((trys > 0) && !tables.isEmpty()) {      trys--;      List<TableDefinition> failed=new ArrayList<TableDefinition>();      for (      TableDefinition table : tables) {        if (!table.getName().equals(sequenceTableName)) {          try {            schemaManager.dropObject(table);          } catch (          DatabaseException exception) {            failed.add(table);            if (!shouldIgnoreDatabaseException()) {              throw exception;            }          }        }      }      tables=failed;    }  }  finally {    if (shouldLogExceptionStackTrace) {      session.getSessionLog().setShouldLogExceptionStackTrace(true);    }    if (level > SessionLog.FINE) {      session.getSessionLog().setLevel(level);    }  }}  }
class C{  @Override public void startDocument() throws SAXException {  try {    writer.write("<!DOCTYPE html>\n");  } catch (  IOException e) {    throw (SAXException)new SAXException(e).initCause(e);  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:08.708 -0500",hash_original_method="84FF645EE0B76DB0D5B552F9A7A0DC94",hash_generated_method="2C9F9172277FBCC77F44B8EB9FF01C29") public java.util.Iterator<HDR> iterator(){  return this.hlist.listIterator();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:24.391 -0400",hash_original_method="3492963B9799FA768D7650AC10A0F976",hash_generated_method="05FA181A353EB1D2A8C6F63EB83AD424") public String toString(){  int iMax=array.length - 1;  if (iMax == -1)   return "[]";  StringBuilder b=new StringBuilder();  b.append('[');  for (int i=0; ; i++) {    b.append(getRaw(byteOffset(i)));    if (i == iMax)     return b.append(']').toString();    b.append(',').append(' ');  }}  }
class C{  private BlockTable[] readBlockTableEntries(final int blockTableEntires) throws IOException {  final int size=blockTableEntires * BlockTable.BLOCK_TABLE_STRUCTURE_SIZE;  final ByteBuffer blockTablesBuffer=AlgorithmUtil.decryptData(readFullBuffer(size),size,BLOCK_TABLE_DECRYPTION_KEY);  final BlockTable[] blockTables=new BlockTable[blockTableEntires];  for (int i=0; i < blockTables.length; i++) {    final BlockTable blockTable=new BlockTable();    blockTable.blockOffset=blockTablesBuffer.getInt();    blockTable.blockSize=blockTablesBuffer.getInt();    blockTable.fileSize=blockTablesBuffer.getInt();    blockTable.flags=blockTablesBuffer.getInt();    blockTables[i]=blockTable;  }  return blockTables;}  }
class C{  public void addRule(Rule rule){  if (rules.size() <= 0) {    this.arity=rule.getArity();    this.sourceTokens=rule.getFrench();  }  if (rule.getArity() != this.arity) {    return;  }  rules.add(rule);  sorted=false;  rule.setFrench(this.sourceTokens);}  }
class C{  @SuppressWarnings("unchecked") private UpdateBatchResult updateWithBatch(final ClusterNode node,final boolean hasNear,final GridNearAtomicUpdateRequest req,final GridNearAtomicUpdateResponse res,final List<GridDhtCacheEntry> locked,final GridCacheVersion ver,@Nullable GridDhtAtomicUpdateFuture dhtFut,final CI2<GridNearAtomicUpdateRequest,GridNearAtomicUpdateResponse> completionCb,final boolean replicate,final String taskName,@Nullable final IgniteCacheExpiryPolicy expiry,final boolean sndPrevVal) throws GridCacheEntryRemovedException {  assert !ctx.dr().receiveEnabled();  assert !req.returnValue() || req.operation() == TRANSFORM;  if (!F.isEmpty(req.filter()) && ctx.loadPreviousValue()) {    try {      reloadIfNeeded(locked);    } catch (    IgniteCheckedException e) {      res.addFailedKeys(req.keys(),e);      return new UpdateBatchResult();    }  }  int size=req.keys().size();  Map<KeyCacheObject,CacheObject> putMap=null;  Map<KeyCacheObject,EntryProcessor<Object,Object,Object>> entryProcessorMap=null;  Collection<KeyCacheObject> rmvKeys=null;  List<CacheObject> writeVals=null;  UpdateBatchResult updRes=new UpdateBatchResult();  List<GridDhtCacheEntry> filtered=new ArrayList<>(size);  GridCacheOperation op=req.operation();  GridCacheReturn invokeRes=null;  int firstEntryIdx=0;  boolean intercept=ctx.config().getInterceptor() != null;  for (int i=0; i < locked.size(); i++) {    GridDhtCacheEntry entry=locked.get(i);    if (entry == null)     continue;    try {      if (!checkFilter(entry,req,res)) {        if (expiry != null && entry.hasValue()) {          long ttl=expiry.forAccess();          if (ttl != CU.TTL_NOT_CHANGED) {            entry.updateTtl(null,ttl);            expiry.ttlUpdated(entry.key(),entry.version(),entry.readers());          }        }        if (log.isDebugEnabled())         log.debug("Entry did not pass the filter (will skip write) [entry=" + entry + ", filter="+ Arrays.toString(req.filter())+ ", res="+ res+ ']');        if (hasNear)         res.addSkippedIndex(i);        firstEntryIdx++;        continue;      }      if (op == TRANSFORM) {        EntryProcessor<Object,Object,Object> entryProcessor=req.entryProcessor(i);        CacheObject old=entry.innerGet(ver,null,true,true,true,true,true,req.subjectId(),entryProcessor,taskName,null,req.keepBinary());        Object oldVal=null;        Object updatedVal=null;        CacheInvokeEntry<Object,Object> invokeEntry=new CacheInvokeEntry(entry.key(),old,entry.version(),req.keepBinary(),entry);        CacheObject updated;        try {          Object computed=entryProcessor.process(invokeEntry,req.invokeArguments());          if (computed != null) {            if (invokeRes == null)             invokeRes=new GridCacheReturn(node.isLocal());            computed=ctx.unwrapTemporary(computed);            invokeRes.addEntryProcessResult(ctx,entry.key(),invokeEntry.key(),computed,null,req.keepBinary());          }          if (!invokeEntry.modified())           continue;          updatedVal=ctx.unwrapTemporary(invokeEntry.getValue());          updated=ctx.toCacheObject(updatedVal);        } catch (        Exception e) {          if (invokeRes == null)           invokeRes=new GridCacheReturn(node.isLocal());          invokeRes.addEntryProcessResult(ctx,entry.key(),invokeEntry.key(),null,e,req.keepBinary());          updated=old;        }        if (updated == null) {          if (intercept) {            CacheLazyEntry e=new CacheLazyEntry(ctx,entry.key(),invokeEntry.key(),old,oldVal,req.keepBinary());            IgniteBiTuple<Boolean,?> interceptorRes=ctx.config().getInterceptor().onBeforeRemove(e);            if (ctx.cancelRemove(interceptorRes))             continue;          }          if (putMap != null) {            dhtFut=updatePartialBatch(hasNear,firstEntryIdx,filtered,ver,node,writeVals,putMap,null,entryProcessorMap,dhtFut,completionCb,req,res,replicate,updRes,taskName,expiry,sndPrevVal);            firstEntryIdx=i;            putMap=null;            writeVals=null;            entryProcessorMap=null;            filtered=new ArrayList<>();          }          if (rmvKeys == null)           rmvKeys=new ArrayList<>(size);          rmvKeys.add(entry.key());        } else {          if (intercept) {            CacheLazyEntry e=new CacheLazyEntry(ctx,entry.key(),invokeEntry.key(),old,oldVal,req.keepBinary());            Object val=ctx.config().getInterceptor().onBeforePut(e,updatedVal);            if (val == null)             continue;            updated=ctx.toCacheObject(ctx.unwrapTemporary(val));          }          if (rmvKeys != null) {            dhtFut=updatePartialBatch(hasNear,firstEntryIdx,filtered,ver,node,null,null,rmvKeys,entryProcessorMap,dhtFut,completionCb,req,res,replicate,updRes,taskName,expiry,sndPrevVal);            firstEntryIdx=i;            rmvKeys=null;            entryProcessorMap=null;            filtered=new ArrayList<>();          }          if (putMap == null) {            putMap=new LinkedHashMap<>(size,1.0f);            writeVals=new ArrayList<>(size);          }          putMap.put(entry.key(),updated);          writeVals.add(updated);        }        if (entryProcessorMap == null)         entryProcessorMap=new HashMap<>();        entryProcessorMap.put(entry.key(),entryProcessor);      } else       if (op == UPDATE) {        CacheObject updated=req.value(i);        if (intercept) {          CacheObject old=entry.innerGet(null,null,true,ctx.loadPreviousValue(),true,true,true,req.subjectId(),null,taskName,null,req.keepBinary());          Object val=ctx.config().getInterceptor().onBeforePut(new CacheLazyEntry(ctx,entry.key(),old,req.keepBinary()),ctx.unwrapBinaryIfNeeded(updated,req.keepBinary(),false));          if (val == null)           continue;          updated=ctx.toCacheObject(ctx.unwrapTemporary(val));        }        assert updated != null;        if (putMap == null) {          putMap=new LinkedHashMap<>(size,1.0f);          writeVals=new ArrayList<>(size);        }        putMap.put(entry.key(),updated);        writeVals.add(updated);      } else {        assert op == DELETE;        if (intercept) {          CacheObject old=entry.innerGet(null,null,true,ctx.loadPreviousValue(),true,true,true,req.subjectId(),null,taskName,null,req.keepBinary());          IgniteBiTuple<Boolean,?> interceptorRes=ctx.config().getInterceptor().onBeforeRemove(new CacheLazyEntry(ctx,entry.key(),old,req.keepBinary()));          if (ctx.cancelRemove(interceptorRes))           continue;        }        if (rmvKeys == null)         rmvKeys=new ArrayList<>(size);        rmvKeys.add(entry.key());      }      filtered.add(entry);    } catch (    IgniteCheckedException e) {      res.addFailedKey(entry.key(),e);    }  }  if (putMap != null || rmvKeys != null) {    dhtFut=updatePartialBatch(hasNear,firstEntryIdx,filtered,ver,node,writeVals,putMap,rmvKeys,entryProcessorMap,dhtFut,completionCb,req,res,replicate,updRes,taskName,expiry,sndPrevVal);  } else   assert filtered.isEmpty();  updRes.dhtFuture(dhtFut);  updRes.invokeResult(invokeRes);  return updRes;}  }
class C{  public final double sampleActive(){  return _activeCount.get();}  }
class C{  public synchronized int status(){  return this.status;}  }
class C{  private void installSnapshot(){  Snapshot currentSnapshot=state.getSnapshotStore().currentSnapshot();  if (currentSnapshot != null && currentSnapshot.index() > log.compactor().snapshotIndex() && currentSnapshot.index() == lastApplied && stateMachine instanceof Snapshottable) {    LOGGER.info("{} - Installing snapshot {}",state.getCluster().member().address(),currentSnapshot.index());    executor.executor().execute(null);    log.compactor().snapshotIndex(currentSnapshot.index());  }}  }
class C{  public final boolean postDelayed(Runnable r,long delayMillis){  return mExec.postDelayed(wrapRunnable(r),delayMillis);}  }
class C{  public void onTaskFinish(HadoopTaskInfo info,long ts){  if (info.type() == HadoopTaskType.REDUCE && lastShuffleMsg != null) {    evts.add(new T2<>(eventName("SHUFFLE",reducerNum,"start"),firstShuffleMsg));    evts.add(new T2<>(eventName("SHUFFLE",reducerNum,"finish"),lastShuffleMsg));    lastShuffleMsg=null;  }  evts.add(new T2<>(eventName(info,"finish"),ts));}  }
class C{  public static Ignite start(IgniteConfiguration cfg,@Nullable ApplicationContext springCtx) throws IgniteCheckedException {  return IgnitionEx.start(cfg,new GridSpringResourceContextImpl(springCtx));}  }
class C{  public final synchronized int maxPV(){  if (computerPlayer == null)   return 1;  return computerPlayer.getMaxPV();}  }
class C{  public void reverse(){  byte tmp;  int limit=size / 2;  int j=size - 1;  byte[] theElements=elements;  for (int i=0; i < limit; ) {    tmp=theElements[i];    theElements[i++]=theElements[j];    theElements[j--]=tmp;  }}  }
class C{  public static String toClassName(String descriptor){  int arrayDim=0;  int i=0;  char c=descriptor.charAt(0);  while (c == '[') {    ++arrayDim;    c=descriptor.charAt(++i);  }  String name;  if (c == 'L') {    int i2=descriptor.indexOf(';',i++);    name=descriptor.substring(i,i2).replace('/','.');    i=i2;  } else   if (c == 'V')   name="void"; else   if (c == 'I')   name="int"; else   if (c == 'B')   name="byte"; else   if (c == 'J')   name="long"; else   if (c == 'D')   name="double"; else   if (c == 'F')   name="float"; else   if (c == 'C')   name="char"; else   if (c == 'S')   name="short"; else   if (c == 'Z')   name="boolean"; else   throw new RuntimeException("bad descriptor: " + descriptor);  if (i + 1 != descriptor.length())   throw new RuntimeException("multiple descriptors?: " + descriptor);  if (arrayDim == 0)   return name; else {    StringBuffer sbuf=new StringBuffer(name);    do {      sbuf.append("[]");    } while (--arrayDim > 0);    return sbuf.toString();  }}  }
class C{  public Integer loadIdValue(DbOutputStatement statement,Integer idx) throws Exception {  int index=idx.intValue();  if (_logger.isDebugEnabled())   _logger.debug("loadIdValue");  _id=statement.getLongInteger(index++);  return new Integer(index);}  }
class C{  public boolean isPersonalArchivo(){  if (ListUtils.isNotEmpty(getCustodyArchiveList())) {    return true;  }  return false;}  }
class C{  public PageOutputStream(PageStore store,int trunkPage,BitField exclude,int logKey,boolean atEnd){  this.trace=store.getTrace();  this.store=store;  this.trunkPageId=trunkPage;  this.exclude=exclude;  this.logKey=logKey - 1;  this.atEnd=atEnd;  minPageId=atEnd ? trunkPage : 0;}  }
class C{  public static Document createXMLReportList(List reportList){  Document document=DocumentHelper.createDocument();  Element root=document.addElement(XML_SICRESLIST_TEXT);  Element nodelist=root.addElement(XML_NODELIST_TEXT);  if (reportList != null && !reportList.isEmpty()) {    ScrReport scrReport=null;    String des=null;    for (Iterator it=reportList.iterator(); it.hasNext(); ) {      scrReport=(ScrReport)it.next();      Element node=nodelist.addElement(XML_NODE_UPPER_TEXT);      node.addElement(XML_ID_TEXT).addText(scrReport.getId().toString());      des="";      if (scrReport.getDescription() != null) {        des=scrReport.getDescription();      }      node.addElement(XML_NAME_UPPER_TEXT).add(DocumentHelper.createCDATA(des));    }  } else {    nodelist.addElement(XML_NODE_UPPER_TEXT);  }  return document;}  }
class C{  public static <X extends Exception>String toString(Iteration<?,X> iter,String separator) throws X {  StringBuilder sb=new StringBuilder();  toString(iter,separator,sb);  return sb.toString();}  }
class C{  public void andWith(QueryPredicate predicate){  for (  AndCondition child : children) {    child.andWith(predicate);  }}  }
class C{  private static int[] stripLeadingZeroInts(int val[]){  int vlen=val.length;  int keep;  for (keep=0; keep < vlen && val[keep] == 0; keep++)   ;  return java.util.Arrays.copyOfRange(val,keep,vlen);}  }
class C{  public void clearCurrentThread(boolean isCompletionListener){  if (isCompletionListener) {    completionListenerThread=null;  } else {    messageListenerThreads.remove(Thread.currentThread().getId());  }}  }
class C{  public CatchBlock createCatchBlock(){  CatchBlockImpl catchBlock=new CatchBlockImpl();  return catchBlock;}  }
class C{  public Task<ProtectionSystemRestRep> discover(URI id,String type){  UriBuilder builder=client.uriBuilder(getIdUrl() + "/discover");  if (type != null && !type.equals("")) {    builder=builder.queryParam("namespace",type);  }  return postTaskURI(builder.build(id));}  }
class C{  public void addPrimaryKeyRelationship(ERDAssociation table,boolean reflect){  if (primaryKeyRelationships == null) {    primaryKeyRelationships=new ArrayList<>();  }  primaryKeyRelationships.add(table);  if (reflect) {    firePropertyChange(INPUT,null,table);  }}  }
class C{  Population corner_sort(Population population){  Population unique=new Population();  Population duplicates=new Population();  for (int i=0; i < population.size(); i++) {    if (unique.contains(population.get(i))) {      duplicates.add(population.get(i));    } else {      boolean isDuplicate=false;      for (int j=0; j < unique.size(); j++) {        if (Arrays.equals(unique.get(j).getObjectives(),population.get(i).getObjectives())) {          duplicates.add(population.get(i));          isDuplicate=true;          break;        }      }      if (!isDuplicate) {        unique.add(population.get(i));      }    }  }  List<Population> sortedSets=new ArrayList<Population>();  for (int i=0; i < problem.getNumberOfObjectives(); i++) {    sortedSets.add(orderBySmallestObjective(i,unique));  }  for (int i=0; i < problem.getNumberOfObjectives(); i++) {    sortedSets.add(orderBySmallestSquaredValue(i,unique));  }  Population result=new Population();  int current_id=0;  int current_f=0;  while (result.size() < unique.size()) {    Solution r=sortedSets.get(current_f).get(current_id);    if (!result.contains(r)) {      result.add(r);    }    current_f++;    if (current_f >= 2 * problem.getNumberOfObjectives()) {      current_f=0;      current_id++;    }  }  result.addAll(duplicates);  Population prunedSet=new Population();  for (int i=0; i < 2 * problem.getNumberOfObjectives(); i++) {    prunedSet.add(result.get(i));  }  return prunedSet;}  }
class C{  private void fireHyperlinkUpdate(HyperlinkEvent e){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == HyperlinkListener.class) {      ((HyperlinkListener)listeners[i + 1]).hyperlinkUpdate(e);    }  }}  }
class C{  public ECFieldElement sqrt(){  int[] x1=this.x;  if (Nat256.isZero(x1) || Nat256.isOne(x1)) {    return this;  }  int[] x2=Nat256.create();  SecP256K1Field.square(x1,x2);  SecP256K1Field.multiply(x2,x1,x2);  int[] x3=Nat256.create();  SecP256K1Field.square(x2,x3);  SecP256K1Field.multiply(x3,x1,x3);  int[] x6=Nat256.create();  SecP256K1Field.squareN(x3,3,x6);  SecP256K1Field.multiply(x6,x3,x6);  int[] x9=x6;  SecP256K1Field.squareN(x6,3,x9);  SecP256K1Field.multiply(x9,x3,x9);  int[] x11=x9;  SecP256K1Field.squareN(x9,2,x11);  SecP256K1Field.multiply(x11,x2,x11);  int[] x22=Nat256.create();  SecP256K1Field.squareN(x11,11,x22);  SecP256K1Field.multiply(x22,x11,x22);  int[] x44=x11;  SecP256K1Field.squareN(x22,22,x44);  SecP256K1Field.multiply(x44,x22,x44);  int[] x88=Nat256.create();  SecP256K1Field.squareN(x44,44,x88);  SecP256K1Field.multiply(x88,x44,x88);  int[] x176=Nat256.create();  SecP256K1Field.squareN(x88,88,x176);  SecP256K1Field.multiply(x176,x88,x176);  int[] x220=x88;  SecP256K1Field.squareN(x176,44,x220);  SecP256K1Field.multiply(x220,x44,x220);  int[] x223=x44;  SecP256K1Field.squareN(x220,3,x223);  SecP256K1Field.multiply(x223,x3,x223);  int[] t1=x223;  SecP256K1Field.squareN(t1,23,t1);  SecP256K1Field.multiply(t1,x22,t1);  SecP256K1Field.squareN(t1,6,t1);  SecP256K1Field.multiply(t1,x2,t1);  SecP256K1Field.squareN(t1,2,t1);  int[] t2=x2;  SecP256K1Field.square(t1,t2);  return Nat256.eq(x1,t2) ? new SecP256K1FieldElement(t1) : null;}  }
class C{  @Override public boolean canUndo(){  return !m_UndoList.isEmpty();}  }
class C{  public int recordReturnType(CtClass type,String castName,String resultName,SymbolTable tbl) throws CompileError {  returnType=type;  returnCastName=castName;  returnVarName=resultName;  if (resultName == null)   return -1; else {    int varNo=getMaxLocals();    int locals=varNo + recordVar(type,resultName,varNo,tbl);    setMaxLocals(locals);    return varNo;  }}  }
class C{  private String match(ScheduleInfo scheduleInfo,ExecutionWindow window){  String msg="";  ExecutionWindowHelper windowHelper=new ExecutionWindowHelper(window);  if (!windowHelper.inHourMinWindow(scheduleInfo.getHourOfDay(),scheduleInfo.getMinuteOfHour())) {    msg="Schedule hour/minute info does not match with execution window.";    return msg;  }  if (scheduleInfo.getReoccurrence() == 1)   return msg;switch (scheduleInfo.getCycleType()) {case MINUTELY:case HOURLY:    log.warn("Not all of the orders would be scheduled due to schedule cycle type {}",scheduleInfo.getCycleType());  break;case DAILY:if (!window.getExecutionWindowType().equals(ExecutionWindowType.DAILY.name())) {  msg="Schedule cycle type has conflicts with execution window.";}break;case WEEKLY:if (window.getExecutionWindowType().equals(ExecutionWindowType.MONTHLY.name())) {msg="Schedule cycle type has conflicts with execution window.";} else if (window.getExecutionWindowType().equals(ExecutionWindowType.WEEKLY.name())) {if (window.getDayOfWeek() != Integer.valueOf(scheduleInfo.getSectionsInCycle().get(0))) {msg="Scheduled date has conflicts with execution window.";}}break;case MONTHLY:if (window.getExecutionWindowType().equals(ExecutionWindowType.WEEKLY.name())) {msg="Schedule cycle type has conflicts with execution window.";} else if (window.getExecutionWindowType().equals(ExecutionWindowType.MONTHLY.name())) {if (window.getDayOfMonth() != Integer.valueOf(scheduleInfo.getSectionsInCycle().get(0))) {msg="Scheduled date has conflicts with execution window.";}}break;default :log.error("not expected schedule cycle.");}return msg;}  }
class C{  @Override public void playSequential(Duration dismissDelay){  sq.getChildren().get(1).setDelay(dismissDelay);  sq.play();}  }
class C{  public boolean inPaintedArea(Point2D pt){  if (painters == null)   return false;  for (int i=0; i < count; ++i) {    if (painters[i].inPaintedArea(pt))     return true;  }  return false;}  }
class C{  protected void makeUnitCone(int subdivisions,List<Geometry> meshes){  float radius=1.0f;  Geometry dest;  GeometryBuilder gb=this.getGeometryBuilder();  gb.setOrientation(GeometryBuilder.OUTSIDE);  for (int index=0; index < getFaceCount(); index++) {    GeometryBuilder.IndexedTriangleBuffer itb=gb.tessellateConeBuffer(index,radius,subdivisions);    FloatBuffer normalBuffer=Buffers.newDirectFloatBuffer(3 * itb.getVertexCount());    gb.makeIndexedTriangleBufferNormals(itb,normalBuffer);    FloatBuffer textureCoordBuffer=Buffers.newDirectFloatBuffer(2 * itb.getVertexCount());    gb.makeUnitConeTextureCoordinates(index,textureCoordBuffer,subdivisions);    dest=new Geometry();    dest.setElementData(GL.GL_TRIANGLES,itb.getIndexCount(),itb.getIndices());    dest.setVertexData(itb.getVertexCount(),itb.getVertices());    dest.setNormalData(normalBuffer.limit(),normalBuffer);    dest.setTextureCoordData(textureCoordBuffer.limit(),textureCoordBuffer);    meshes.add(index,dest);  }}  }
class C{  public String toString(Tag tag){  return "<DT><B>" + HEADER + "</B><DD>"+ "<table cellpadding=2 cellspacing=0><tr><td bgcolor=\"#BBFFFF\">"+ umpleLinkText(tag.text())+ "</td></tr></table></DD>\n";}  }
class C{  private static int findSubsequenceStart(String[] subSequence,Sequence<IString> sequence,int startIndex){  for (int i=startIndex, sequenceSize=sequence.size(); i < sequenceSize; ++i) {    if (i + subSequence.length > sequenceSize)     break;    if (subSequence[0].equals(sequence.get(i).toString())) {      if (subSequence.length == 1)       return i;      for (int j=1; j < subSequence.length; ++j) {        if (subSequence[j].equals(sequence.get(i + j).toString())) {          if (j + 1 == subSequence.length) {            return i;          }        } else {          break;        }      }    }  }  return -1;}  }
class C{  public boolean isEmpty(){  return false;}  }
class C{  public Bindings addOptComponent(String property,Class clazz,JToggleButton c,boolean enabledByDefault){  Binding b=new OptComponentBinding(this,property,clazz,c,enabledByDefault);  if (_optComponents.containsKey(property)) {    throw new BindingException(Messages.getString("Bindings.duplicate.binding"));  }  _optComponents.put(property,b);  return this;}  }
class C{  public void subdivide(double t,Segment s0,Segment s1){  Cubic c0=null, c1=null;  if (s0 instanceof Cubic)   c0=(Cubic)s0;  if (s1 instanceof Cubic)   c1=(Cubic)s1;  subdivide(t,c0,c1);}  }
class C{  public void testSomeStartNodesNotUseable(boolean fastRouter){  Fixture f=new Fixture();  TestTimeCost tc=new TestTimeCost();  tc.setData(Id.create(1,Link.class),2.0,2.0);  tc.setData(Id.create(2,Link.class),1.0,1.0);  tc.setData(Id.create(3,Link.class),3.0,3.0);  tc.setData(Id.create(4,Link.class),2.0,2.0);  tc.setData(Id.create(5,Link.class),1.0,1.0);  tc.setData(Id.create(6,Link.class),3.0,3.0);  tc.setData(Id.create(7,Link.class),4.0,4.0);  MultiNodeDijkstra dijkstra=makeMultiNodeDikstra(f.network,tc,tc,fastRouter);  List<InitialNode> fromNodes=new ArrayList<InitialNode>();  List<InitialNode> toNodes=new ArrayList<InitialNode>();  fromNodes.add(new InitialNode(f.network.getNodes().get(Id.create(2,Node.class)),2.0,2.0));  fromNodes.add(new InitialNode(f.network.getNodes().get(Id.create(4,Node.class)),3.0,3.0));  toNodes.add(new InitialNode(f.network.getNodes().get(Id.create(5,Node.class)),1.0,1.0));  toNodes.add(new InitialNode(f.network.getNodes().get(Id.create(3,Node.class)),3.0,3.0));  Node fromNode=dijkstra.createImaginaryNode(fromNodes);  Node toNode=dijkstra.createImaginaryNode(toNodes);  Path p=createPath(dijkstra,fromNode,toNode);  Assert.assertNotNull("no path found!",p);  Assert.assertEquals(3,p.links.size());  Assert.assertEquals("2",p.links.get(0).getId().toString());  Assert.assertEquals("7",p.links.get(1).getId().toString());  Assert.assertEquals("5",p.links.get(2).getId().toString());}  }
class C{  @Override public void failure(int requestId,int errorCode,String message){}  }
class C{  public boolean hasReadOnly(){  return getReadOnly() != null;}  }
class C{  public static TranBlob createBlob(InputStream stream,int length){  return new TranBlob(new BlobImpl(stream,length),false);}  }
class C{  static String toString(Object o){  return o == null ? null : o instanceof String ? (String)o : concatenate((List)o);}  }
class C{  public void recompose(StylesheetRoot root){  root.recomposeVariables(this);}  }
class C{  protected NamedIcon makeTextOverlaidIcon(String text,NamedIcon ic){  String url=ic.getURL();  NamedIcon icon=new NamedIcon(url,url);  int textWidth=getFontMetrics(getFont()).stringWidth(text);  int iconWidth=icon.getIconWidth();  int textHeight=getFontMetrics(getFont()).getHeight();  int iconHeight=icon.getIconHeight();  int width=Math.max(textWidth,iconWidth);  int height=Math.max(textHeight,iconHeight);  int hOffset=Math.max((textWidth - iconWidth) / 2,0);  int vOffset=Math.max((textHeight - iconHeight) / 2,0);  if (_popupUtil != null) {    if (_popupUtil.getFixedWidth() != 0) {switch (_popupUtil.getJustification()) {case PositionablePopupUtil.LEFT:        hOffset=_popupUtil.getBorderSize();      break;case PositionablePopupUtil.RIGHT:    hOffset=_popupUtil.getFixedWidth() - width;  hOffset+=_popupUtil.getBorderSize();break;default :hOffset=Math.max((_popupUtil.getFixedWidth() - width) / 2,0);hOffset+=_popupUtil.getBorderSize();break;}width=_popupUtil.getFixedWidth() + 2 * _popupUtil.getBorderSize();} else {width+=2 * (_popupUtil.getMargin() + _popupUtil.getBorderSize());hOffset+=_popupUtil.getMargin() + _popupUtil.getBorderSize();}if (_popupUtil.getFixedHeight() != 0) {vOffset=Math.max(vOffset + (_popupUtil.getFixedHeight() - height) / 2,0);vOffset+=_popupUtil.getBorderSize();height=_popupUtil.getFixedHeight() + 2 * _popupUtil.getBorderSize();} else {height+=2 * (_popupUtil.getMargin() + _popupUtil.getBorderSize());vOffset+=_popupUtil.getMargin() + _popupUtil.getBorderSize();}}BufferedImage bufIm=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB);Graphics2D g2d=bufIm.createGraphics();g2d.setRenderingHint(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_QUALITY);g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);g2d.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION,RenderingHints.VALUE_ALPHA_INTERPOLATION_QUALITY);g2d.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BICUBIC);if (_popupUtil != null) {if (_popupUtil.hasBackground()) {g2d.setColor(_popupUtil.getBackground());g2d.fillRect(0,0,width,height);}if (_popupUtil.getBorderSize() != 0) {g2d.setColor(_popupUtil.getBorderColor());g2d.setStroke(new java.awt.BasicStroke(2 * _popupUtil.getBorderSize()));g2d.drawRect(0,0,width,height);}}g2d.drawImage(icon.getImage(),AffineTransform.getTranslateInstance(hOffset,vOffset + 1),this);g2d.setFont(getFont());hOffset=Math.max((width - textWidth) / 2,0);vOffset=Math.max((height - textHeight) / 2,0) + getFontMetrics(getFont()).getAscent();g2d.setColor(getForeground());g2d.drawString(text,hOffset,vOffset);icon=new NamedIcon(bufIm);g2d.dispose();icon.setURL(url);return icon;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void removeSlaves(){  slaves.forEach(null);  slaves=new ArrayList<>();}  }
class C{  public TColor blend(ReadonlyTColor c,float t){  float[] crgb=c.toRGBAArray(null);  rgb[0]+=(crgb[0] - rgb[0]) * t;  rgb[1]+=(crgb[1] - rgb[1]) * t;  rgb[2]+=(crgb[2] - rgb[2]) * t;  alpha+=(c.alpha() - alpha) * t;  return setRGB(rgb);}  }
class C{  public static <E>ConstantSet<E> of(E... elements){  SparseSet<E> sparse=new SparseSet<E>();  for (  E e : elements)   sparse.add(e);  return new ConstantSet<E>(sparse);}  }
class C{  protected void tearDown(){}  }
class C{  public boolean decRefCount(){  int rc=refCountUpdater.decrementAndGet(this);  if (rc < 0) {    throw new IllegalStateException("rc=" + rc);  }  return rc == 0;}  }
class C{  public StrBuilder appendln(char ch){  return append(ch).appendNewLine();}  }
class C{  public static void fail(int errorCode,Throwable cause){  throw new RuntimeException(MP.getMessage(errorCode,cause.getMessage()),cause);}  }
class C{  public void init(String channelId) throws IOException {  init(channelId,false);}  }
class C{  @Inline public void addEvent(EventType et,int ival1,int ival2,int ival3,int ival4){  if (!enabled)   return;  addEventInternal(et,ival1,ival2,ival3,ival4);}  }
class C{  public void sendMessage(String message){  checkSocket();  this.socket.sendTextMessage(message);}  }
class C{  private void parseAndFillEndpoint(Node endpointNode,Channel incomingChannel,EList<Endpoint> endpoints,EList<Channel> channels){  if (endpointNode != null) {    if (endpointNode.getNodeType() == Node.ELEMENT_NODE) {      if (incomingChannel != null) {        channels.add(incomingChannel);      }      Element endpointElement=(Element)endpointNode;      Endpoint endpoint=null;      boolean inspectChildren=false;      if ("from".equals(endpointElement.getLocalName())) {        String uri=endpointElement.getAttribute("uri");        if (uri.startsWith("direct:")) {          String id=endpointElement.getAttribute("id");          incomingChannel=retrieveChannelByName(id,channels);        } else {          endpoint=EipFactory.eINSTANCE.createGateway();        }      } else       if ("transform".equals(endpointElement.getLocalName())) {        endpoint=EipFactory.eINSTANCE.createTransformer();      } else       if ("choice".equals(endpointElement.getLocalName())) {        endpoint=EipFactory.eINSTANCE.createRouter();        inspectChildren=true;      } else       if ("filter".equals(endpointElement.getLocalName())) {        endpoint=EipFactory.eINSTANCE.createFilter();        inspectChildren=true;      } else       if ("pipeline".equals(endpointElement.getLocalName())) {        endpoint=EipFactory.eINSTANCE.createCompositeProcessor();        inspectChildren=true;      } else       if ("split".equals(endpointElement.getLocalName())) {        endpoint=EipFactory.eINSTANCE.createSplitter();        inspectChildren=true;        String strategyRef=endpointElement.getAttribute("strategyRef");        if (strategyRef != null && strategyRef.length() > 0) {          String id=endpointElement.getAttribute("id");          String name=id.substring(0,id.indexOf('|'));          String outgoingChannelName=id.substring(id.indexOf('|') + 1);          Aggregator aggregator=EipFactory.eINSTANCE.createAggregator();          aggregator.setName(name);          aggregator.setStrategy(strategyRef);          Channel outgoingChannel=retrieveChannelByName(outgoingChannelName,channels);          if (outgoingChannel == null) {            outgoingChannel=EipFactory.eINSTANCE.createChannel();            outgoingChannel.setName(outgoingChannelName);            channels.add(outgoingChannel);          }          aggregator.getToChannels().add(outgoingChannel);          currentAggregator=aggregator;        }      } else       if ("when".equals(endpointElement.getLocalName())) {        inspectChildren=true;      } else       if ("otherwise".equals(endpointElement.getLocalName())) {        inspectChildren=true;      } else       if ("multicast".equals(endpointElement.getLocalName())) {        inspectChildren=true;        String strategyRef=endpointElement.getAttribute("strategyRef");        if (strategyRef != null && strategyRef.length() > 0) {          String id=endpointElement.getAttribute("id");          String name=id.substring(0,id.indexOf('|'));          String outgoingChannelName=id.substring(id.indexOf('|') + 1);          Aggregator aggregator=EipFactory.eINSTANCE.createAggregator();          aggregator.setName(name);          aggregator.setStrategy(strategyRef);          Channel outgoingChannel=retrieveChannelByName(outgoingChannelName,channels);          if (outgoingChannel == null) {            outgoingChannel=EipFactory.eINSTANCE.createChannel();            outgoingChannel.setName(outgoingChannelName);            channels.add(outgoingChannel);          }          aggregator.getToChannels().add(outgoingChannel);          currentAggregator=aggregator;        }      } else       if ("resequence".equals(endpointElement.getLocalName())) {        endpoint=EipFactory.eINSTANCE.createResequencer();        inspectChildren=true;      } else       if ("stream-config".equals(endpointElement.getLocalName())) {        Endpoint lastEndpoint=endpoints.get(endpoints.size() - 1);        if (lastEndpoint instanceof Resequencer) {          ((Resequencer)lastEndpoint).setStreamSequences(true);        }      } else       if ("to".equals(endpointElement.getLocalName())) {        String uri=endpointElement.getAttribute("uri");        if (uri.startsWith("xslt:")) {          endpoint=EipFactory.eINSTANCE.createTransformer();        } else         if (uri.startsWith("switchyard:")) {          endpoint=EipFactory.eINSTANCE.createServiceActivator();        } else         if (uri.startsWith("direct:")) {          String id=endpointElement.getAttribute("id");          Channel multicast=retrieveChannelByName(id,channels);          if (multicast == null) {            multicast=EipFactory.eINSTANCE.createChannel();            multicast.setName(endpointElement.getAttribute("id"));            System.err.println("Adding mc channel with name: " + multicast.getName());            channels.add(multicast);          }          Endpoint lastEndpoint=endpoints.get(endpoints.size() - 1);          lastEndpoint.getToChannels().add(multicast);        }      } else {        System.err.println("Got an unsupported: " + endpointElement.getLocalName());      }      if (endpoint != null) {        String id=endpointElement.getAttribute("id");        String endpointName=id;        String outgoingChannelName=null;        if (id != null && id.contains("|")) {          endpointName=id.substring(0,id.indexOf('|'));          outgoingChannelName=id.substring(id.indexOf('|') + 1);        }        endpoint.setName(endpointName);        endpoints.add(endpoint);        if (incomingChannel != null) {          incomingChannel.setToEndpoint(endpoint);        }        incomingChannel=EipFactory.eINSTANCE.createChannel();        incomingChannel.setFromEndpoint(endpoint);        if (outgoingChannelName != null) {          incomingChannel.setName(outgoingChannelName);          channels.add(incomingChannel);        }      }      if (inspectChildren) {        Node firstChild=endpointNode.getFirstChild();        if (endpoint instanceof CompositeProcessor) {          parseAndFillEndpoint(firstChild,incomingChannel,((CompositeProcessor)endpoint).getOwnedEndpoints(),channels);        } else {          parseAndFillEndpoint(firstChild,incomingChannel,endpoints,channels);        }        if (currentAggregator != null && ("multicast".equals(endpointElement.getLocalName()) || "split".equals(endpointElement.getLocalName()))) {          endpoints.add(currentAggregator);          currentAggregator=null;        }      }    }    if (endpointNode.getNextSibling() != null) {      parseAndFillEndpoint(endpointNode.getNextSibling(),incomingChannel,endpoints,channels);    }  }}  }
class C{  public boolean hasRules(){  if (rules == null) {    return false;  }  return rules.size() > 0;}  }
class C{  @Override protected boolean isZoneLevelResource(){  return false;}  }
class C{  protected void addConversionErrorMessage(FacesContext context,UIComponent component,ConverterException ce){  String converterMessageString=null;  FacesMessage message;  UIInput input;  if (component instanceof UIInput) {    input=(UIInput)component;    converterMessageString=input.getConverterMessage();    input.setValid(false);  }  if (null != converterMessageString) {    message=new FacesMessage(FacesMessage.SEVERITY_ERROR,converterMessageString,converterMessageString);  } else {    message=ce.getFacesMessage();    if (message == null) {      message=MessageFactory.getMessage(context,UIInput.CONVERSION_MESSAGE_ID);      if (message.getDetail() == null) {        message.setDetail(ce.getMessage());      }    }  }  context.addMessage(component != null ? component.getClientId(context) : null,message);}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData1);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            if (z1 != z2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            if (z1 != constant2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            if (z2 != constant1) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static Color parseColor(String colorString) throws NumberFormatException {  return ColorFactory.parseColor(colorString,false);}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  static public void assertFalse(String message,boolean condition){  assertTrue(message,!condition);}  }
class C{  public void popSubQueryInfo(){  subQueryInfo=subQueryInfo.getUpper();}  }
class C{  public BlobRegressionTest(String name){  super(name);}  }
class C{  @Override protected void mouseClicked(int par1,int par2,int par3) throws IOException {  super.mouseClicked(par1,par2,par3);  commandBox.mouseClicked(par1,par2,par3);}  }
class C{  public Color(int r,int g,int b){  this.r=r;  this.g=g;  this.b=b;}  }
class C{  public AbstractLongList partFromTo(int from,int to){  if (size == 0)   return new LongArrayList(0);  checkRangeFromTo(from,to,size);  long[] part=new long[to - from + 1];  System.arraycopy(elements,from,part,0,to - from + 1);  return new LongArrayList(part);}  }
class C{  public static IEditorInput createFileEditorInput(IFile file) throws CoreException {  if (file == null)   throw new IllegalArgumentException("File is null");  return new MindMapEditorInput(file.getLocationURI());}  }
class C{  protected void processEntity(IXMLReader reader,IXMLEntityResolver entityResolver) throws Exception {  if (!XMLUtil.checkLiteral(reader,"NTITY")) {    XMLUtil.skipTag(reader);    return;  }  XMLUtil.skipWhitespace(reader,null);  char ch=XMLUtil.readChar(reader,'\0');  if (ch == '%') {    XMLUtil.skipWhitespace(reader,null);    entityResolver=this.parameterEntityResolver;  } else {    reader.unread(ch);  }  String key=XMLUtil.scanIdentifier(reader);  XMLUtil.skipWhitespace(reader,null);  ch=XMLUtil.readChar(reader,'%');  String systemID=null;  String publicID=null;switch (ch) {case 'P':    if (!XMLUtil.checkLiteral(reader,"UBLIC")) {      XMLUtil.skipTag(reader);      return;    }  XMLUtil.skipWhitespace(reader,null);publicID=XMLUtil.scanString(reader,'%',this.parameterEntityResolver);XMLUtil.skipWhitespace(reader,null);systemID=XMLUtil.scanString(reader,'%',this.parameterEntityResolver);XMLUtil.skipWhitespace(reader,null);XMLUtil.readChar(reader,'%');break;case 'S':if (!XMLUtil.checkLiteral(reader,"YSTEM")) {XMLUtil.skipTag(reader);return;}XMLUtil.skipWhitespace(reader,null);systemID=XMLUtil.scanString(reader,'%',this.parameterEntityResolver);XMLUtil.skipWhitespace(reader,null);XMLUtil.readChar(reader,'%');break;case '"':case '\'':reader.unread(ch);String value=XMLUtil.scanString(reader,'%',this.parameterEntityResolver);entityResolver.addInternalEntity(key,value);XMLUtil.skipWhitespace(reader,null);XMLUtil.readChar(reader,'%');break;default :XMLUtil.skipTag(reader);}if (systemID != null) {entityResolver.addExternalEntity(key,publicID,systemID);}}  }
class C{  static public void main(String[] args) throws Exception {  if (args.length != 4) {    System.err.printf("Usage: java %s metric_name reference_prefix system1 system2%n",SignificanceTest.class.getName());    System.exit(-1);  }  String evalMetricName=args[0];  String referencePrefix=args[1];  String system1TransFilename=args[2];  String system2TransFilename=args[3];  boolean doNIST=true;  List<List<Sequence<IString>>> references=MetricUtils.readReferences(IOTools.fileNamesFromPathPrefix(referencePrefix),doNIST);  EvaluationMetric<IString,String> eval=CorpusLevelMetricFactory.newMetric(evalMetricName,references);  List<Sequence<IString>> system1Trans=IStrings.tokenizeFile(system1TransFilename,doNIST);  List<Sequence<IString>> system2Trans=IStrings.tokenizeFile(system2TransFilename,doNIST);  if (system1Trans.size() != system2Trans.size()) {    System.err.printf("Warning: %s contains %d translations while %s contains %d translations%n",system1TransFilename,system1Trans.size(),system2TransFilename,system2Trans.size());    int min=Math.min(system1Trans.size(),system2Trans.size());    System.err.printf("Truncating both to %d translations%n",min);    system1Trans=system1Trans.subList(0,min);    system2Trans=system2Trans.subList(0,min);  }  double system1Eval=scoreList(system1Trans,eval);  double system2Eval=scoreList(system2Trans,eval);  double trueSystemDiff=Math.abs(system1Eval - system2Eval);  System.out.printf("System1 Eval: %f System2 Eval: %f abs(Diff): %f%n",system1Eval,system2Eval,trueSystemDiff);  System.out.printf("Sampling...");  Random r=new Random(8682522807148012L);  int matchedOrExceededDiffs=0;  for (int i=0; i < SAMPLES; i++) {    if ((i % 10) == 0)     System.out.printf(".");    List<Sequence<IString>> sample1Trans=new ArrayList<>(system1Trans.size());    List<Sequence<IString>> sample2Trans=new ArrayList<>(system2Trans.size());    int sz=system1Trans.size();    for (int ii=0; ii < sz; ii++) {      if (r.nextDouble() >= 0.5) {        sample1Trans.add(system1Trans.get(ii));        sample2Trans.add(system2Trans.get(ii));      } else {        sample1Trans.add(system2Trans.get(ii));        sample2Trans.add(system1Trans.get(ii));      }    }    double sample1Eval=scoreList(sample1Trans,eval);    double sample2Eval=scoreList(sample2Trans,eval);    double sampleDiff=Math.abs(sample1Eval - sample2Eval);    if (sampleDiff >= trueSystemDiff)     matchedOrExceededDiffs++;  }  double p=(matchedOrExceededDiffs + 1.0) / (SAMPLES + 1.0);  System.out.printf("%np = %f (%d+1)/(%d+1)%n",p,matchedOrExceededDiffs,SAMPLES);}  }
class C{  public static float gain(float a,float b){  float c=(1.0f / b - 2.0f) * (1.0f - 2.0f * a);  if (a < 0.5)   return a / (c + 1.0f);  return (c - a) / (c - 1.0f);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public FiringDisplay(final ClientGUI clientgui){  super(clientgui);  clientgui.getClient().getGame().addGameListener(this);  clientgui.getBoardView().addBoardViewListener(this);  shiftheld=false;  attacks=new Vector<AbstractEntityAction>();  setupStatusBar(Messages.getString("FiringDisplay.waitingForFiringPhase"));  buttons=new HashMap<FiringCommand,MegamekButton>((int)(FiringCommand.values().length * 1.25 + 0.5));  for (  FiringCommand cmd : FiringCommand.values()) {    String title=Messages.getString("FiringDisplay." + cmd.getCmd());    MegamekButton newButton=new MegamekButton(title,SkinSpecification.UIComponents.PhaseDisplayButton.getComp());    newButton.addActionListener(this);    newButton.setActionCommand(cmd.getCmd());    newButton.setEnabled(false);    buttons.put(cmd,newButton);  }  numButtonGroups=(int)Math.ceil((buttons.size() + 0.0) / buttonsPerGroup);  butDone.setText("<html><b>" + Messages.getString("FiringDisplay.Done") + "</b></html>");  butDone.setEnabled(false);  layoutScreen();  setupButtonPanel();  clientgui.bv.addKeyListener(this);  clientgui.mechD.wPan.weaponList.addListSelectionListener(this);  clientgui.mechD.wPan.weaponList.addKeyListener(this);  ash=new AimedShotHandler(this);  registerKeyCommands();}  }
class C{  public static String generateResetKey(){  return RandomStringUtils.randomNumeric(DEF_COUNT);}  }
class C{  public static void erode(Mat img,int amount){  Mat kernel=Imgproc.getStructuringElement(Imgproc.CV_SHAPE_RECT,new Size(2 * amount + 1,2 * amount + 1),new Point(amount,amount));  Imgproc.erode(img,img,kernel);}  }
class C{  boolean appendMarker(Node<V> f){  return casNext(f,new Node<V>(f));}  }
class C{  @Override protected void append(E eventObject){  if (!isStarted()) {    return;  }  if (evWarnError != null) {    ILoggingEvent ev=((ILoggingEvent)eventObject);    if (ev.getLevel().equals(Level.ERROR) || ev.getLevel().equals(Level.WARN)) {      evWarnError.updateEventWithFlush(new WarnErrorEvent(ev.getFormattedMessage(),ev.getLevel(),ev.getThreadName(),ev.getLoggerName()));    }  }}  }
class C{  public JsonObject(){  names=new Vector<String>();  values=new Vector<JsonValue>();  table=new HashIndexTable();}  }
class C{  public void previous(){  SetupWindow newWindow=_currentWindow.getPrevious();  try {    _currentWindow.applySettings(false);  } catch (  ApplySettingsException ase) {  }  show(newWindow);}  }
class C{  protected static void autoUnBoxing1(MethodVisitor mv,Type fieldType){switch (fieldType.getSort()) {case Type.BOOLEAN:    mv.visitTypeInsn(CHECKCAST,"java/lang/Boolean");  mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/Boolean","booleanValue","()Z");break;case Type.BYTE:mv.visitTypeInsn(CHECKCAST,"java/lang/Byte");mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/Byte","byteValue","()B");break;case Type.CHAR:mv.visitTypeInsn(CHECKCAST,"java/lang/Character");mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/Character","charValue","()C");break;case Type.SHORT:mv.visitTypeInsn(CHECKCAST,"java/lang/Short");mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/Short","shortValue","()S");break;case Type.INT:mv.visitTypeInsn(CHECKCAST,"java/lang/Integer");mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/Integer","intValue","()I");break;case Type.FLOAT:mv.visitTypeInsn(CHECKCAST,"java/lang/Float");mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/Float","floatValue","()F");break;case Type.LONG:mv.visitTypeInsn(CHECKCAST,"java/lang/Long");mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/Long","longValue","()J");break;case Type.DOUBLE:mv.visitTypeInsn(CHECKCAST,"java/lang/Double");mv.visitMethodInsn(INVOKEVIRTUAL,"java/lang/Double","doubleValue","()D");break;case Type.ARRAY:mv.visitTypeInsn(CHECKCAST,fieldType.getInternalName());break;default :mv.visitTypeInsn(CHECKCAST,fieldType.getInternalName());}}  }
class C{  public void addIssuerName(byte[] iss_name) throws IOException {  if (iss_name == null) {    throw new NullPointerException("iss_name == null");  }  if (issuerNames == null) {    issuerNames=new ArrayList<String>();  }  String name=new Name(iss_name).getName(X500Principal.CANONICAL);  if (!issuerNames.contains(name)) {    issuerNames.add(name);  }}  }
class C{  public void processFEPortMetrics(Long kbytes,Long iops,StoragePort port,Long sampleTime){  StringMap dbMetrics=port.getMetrics();  _log.info(String.format("FEPortMetrics %s %s kbytes %d iops %d sampleTime %d",port.getNativeGuid(),portName(port),kbytes,iops,sampleTime));  StorageSystem system=_dbClient.queryObject(StorageSystem.class,port.getStorageDevice());  Long iopsValue=MetricsKeys.getLong(MetricsKeys.iopsValue,dbMetrics);  Long kbytesValue=MetricsKeys.getLong(MetricsKeys.kbytesValue,dbMetrics);  Long lastSampleTimeValue=MetricsKeys.getLong(MetricsKeys.lastSampleTime,dbMetrics);  Long kbytesDelta=kbytes - kbytesValue;  if (kbytesDelta < 0) {    _log.info("Kbytes rolled over - delta is negative: " + kbytesDelta);  }  Long iopsDelta=iops - iopsValue;  Long portSpeed=port.getPortSpeed();  if (portSpeed == null || portSpeed == 0) {    _log.info("Port speed is zero or null- assuming 8 GBit: " + port.getNativeGuid());    portSpeed=8L;  }  Long maxKBytesPerSecond=portSpeed * KBYTES_PER_GBIT;  Long secondsDelta=(sampleTime - lastSampleTimeValue) / MSEC_PER_SEC;  if (secondsDelta < 0) {    secondsDelta=-secondsDelta;  }  if (kbytesDelta >= 0 && secondsDelta > 0 && secondsDelta < SECONDS_PER_YEAR) {    computePercentBusyAverages(kbytesDelta / secondsDelta,maxKBytesPerSecond,iopsDelta,dbMetrics,port.getNativeGuid(),portName(port),sampleTime,system);    List<StoragePort> portList=new ArrayList<StoragePort>();    portList.add(port);    updateStaticPortUsage(portList);    Double portMetric=computePortMetric(port);    MetricsKeys.putDouble(MetricsKeys.portMetric,portMetric,dbMetrics);    MetricsKeys.putLong(MetricsKeys.lastProcessingTime,System.currentTimeMillis(),dbMetrics);  }  MetricsKeys.putLong(MetricsKeys.kbytesValue,kbytes,dbMetrics);  MetricsKeys.putLong(MetricsKeys.iopsValue,iops,dbMetrics);  MetricsKeys.putLong(MetricsKeys.lastSampleTime,sampleTime,dbMetrics);  boolean countMetaMembers=(system.getSystemType().equals(DiscoveredDataObject.Type.vmax.name()) && !system.checkIfVmax3());  updateUnmanagedVolumeAndInitiatorCounts(port,countMetaMembers,dbMetrics);  port.setMetrics(dbMetrics);  _dbClient.persistObject(port);}  }
class C{  protected ReferenceEntry<K,V> next(){  return (ReferenceEntry<K,V>)next;}  }
class C{  public boolean equals(Object other){  if (other == null)   return false;  if (!other.getClass().equals(this.getClass())) {    return false;  }  CallIdentifier that=(CallIdentifier)other;  if (this.localId.compareTo(that.localId) != 0) {    return false;  }  if (this.host == that.host)   return true;  if ((this.host == null && that.host != null) || (this.host != null && that.host == null))   return false;  if (host.compareToIgnoreCase(that.host) != 0) {    return false;  }  return true;}  }
class C{  private void loadMusic(){  getSupportLoaderManager().initLoader(MUSIC_LOADER_ID,null,this);}  }
class C{  @Override public boolean isClosed(){  return rows == null && source == null;}  }
class C{  public static InstructionFragment newInstance(Recipe recipe,int sectionNumber){  InstructionFragment fragment=new InstructionFragment();  fragment.recipe=recipe;  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  public void add(final Stat s){  files+=s.files;  size+=s.size;  lines+=s.lines;}  }
class C{  public final Address overflowAlloc(int bytes,int align,int offset){  Address start=alignAllocationNoFill(largeCursor,align,offset);  Address end=start.plus(bytes);  if (end.GT(largeLimit)) {    requestForLarge=true;    Address rtn=allocSlowInline(bytes,align,offset);    requestForLarge=false;    return rtn;  }  fillAlignmentGap(largeCursor,start);  largeCursor=end;  return start;}  }
class C{  public Boolean isSilentPairing(){  return silentPairing;}  }
class C{  public IntArray(){  this(10);}  }
class C{  public void drawString(String str,int x,int y){  mGraphics.drawString(str,x,y);}  }
class C{  public WifiTransport(final String host){  super(host);}  }
class C{  @Override public final int hashCode(){  final long prime=2654435761L;  long result=1;  result=prime * result + ((first == null) ? 0 : first.hashCode());  result=prime * result + ((second == null) ? 0 : second.hashCode());  return (int)result;}  }
class C{  public boolean fitsType(Environment env,Context ctx,Type t){  try {    if (env.isMoreSpecific(this.type,t)) {      return true;    }    if (this.type.isType(TC_INT) && this.isConstant() && ctx != null) {      Expression n=this.inlineValue(env,ctx);      if (n != this && n instanceof ConstantExpression) {        return n.fitsType(env,ctx,t);      }    }    return false;  } catch (  ClassNotFound e) {    return false;  }}  }
class C{  public boolean isPost(){  return HttpMethod.POST.equals(getMethod());}  }
class C{  private final void updateBuffer(int offset){  fBufferOffset=offset;  if (fBufferOffset + fBuffer.length > fRangeOffset + fRangeLength)   fBufferLength=fRangeLength - (fBufferOffset - fRangeOffset); else   fBufferLength=fBuffer.length;  try {    final String content=fDocument.get(fBufferOffset,fBufferLength);    content.getChars(0,fBufferLength,fBuffer,0);  } catch (  BadLocationException e) {  }}  }
class C{  public static void openVideo(Context mContext,String videoPath){  Intent intent=new Intent("android.intent.action.VIEW");  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  intent.putExtra("oneshot",0);  intent.putExtra("configchange",0);  Uri uri=Uri.fromFile(new File(videoPath));  intent.setDataAndType(uri,"video/*");  mContext.startActivity(intent);}  }
class C{  public void addVetoableChangeListener(String propertyName,VetoableChangeListener in_vcl){  beanContextChildSupport.addVetoableChangeListener(propertyName,in_vcl);}  }
class C{  private void drawString(Object nativeFont,String str,int x,int y,int textDecoration,int fontHeight){  if (str.length() == 0) {    return;  }  if (textDecoration != 0) {    boolean raised=(textDecoration & Style.TEXT_DECORATION_3D) != 0;    boolean lowerd=(textDecoration & Style.TEXT_DECORATION_3D_LOWERED) != 0;    boolean north=(textDecoration & Style.TEXT_DECORATION_3D_SHADOW_NORTH) != 0;    if (raised || lowerd || north) {      textDecoration=textDecoration & (~Style.TEXT_DECORATION_3D) & (~Style.TEXT_DECORATION_3D_LOWERED)& (~Style.TEXT_DECORATION_3D_SHADOW_NORTH);      int c=getColor();      int a=getAlpha();      int newColor=0;      int offset=-2;      if (lowerd) {        offset=2;        newColor=0xffffff;      } else       if (north) {        offset=2;      }      setColor(newColor);      if (a == 0xff) {        setAlpha(140);      }      drawString(nativeFont,str,x,y + offset,textDecoration,fontHeight);      setAlpha(a);      setColor(c);      drawString(nativeFont,str,x,y,textDecoration,fontHeight);      return;    }    canvas.drawText(str,x,y - font.getFontAscent(),font);    if ((textDecoration & Style.TEXT_DECORATION_UNDERLINE) != 0) {      paint.setStyle(Paint.Style.FILL);      canvas.drawLine(x,y + fontHeight - 1,x + impl.stringWidth(nativeFont,str),y + fontHeight - 1,paint);    }    if ((textDecoration & Style.TEXT_DECORATION_STRIKETHRU) != 0) {      paint.setStyle(Paint.Style.FILL);      canvas.drawLine(x,y + fontHeight / 2,x + impl.stringWidth(nativeFont,str),y + fontHeight / 2,paint);    }    if ((textDecoration & Style.TEXT_DECORATION_OVERLINE) != 0) {      paint.setStyle(Paint.Style.FILL);      canvas.drawLine(x,y,x + impl.stringWidth(nativeFont,str),y,paint);    }  } else {    canvas.drawText(str,x,y - font.getFontAscent(),font);  }}  }
class C{  public ByteList ConstantDecimalInfo(ByteList bytes,Decimal128 value){  if (show_bytecode) {    cpool_out.write("\n      ConstantDecimalInfo " + value.toString());  }  bytes=value.toByteList(bytes);  return bytes;}  }
class C{  public static byte[] decodeFromFile(String filename) throws java.io.IOException {  byte[] decodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=null;    int length=0;    int numBytes=0;    if (file.length() > Integer.MAX_VALUE) {      throw new java.io.IOException("File is too big for this convenience method (" + file.length() + " bytes).");    }    buffer=new byte[(int)file.length()];    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.DECODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    decodedData=new byte[length];    System.arraycopy(buffer,0,decodedData,0,length);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return decodedData;}  }
class C{  public IoServiceListenerSupport(IoService service){  if (service == null) {    throw new IllegalArgumentException("service");  }  this.service=service;}  }
class C{  public HandlerPublisher(EventExecutor executor,Class<? extends T> subscriberMessageType){  this.executor=executor;  this.matcher=TypeParameterMatcher.get(subscriberMessageType);}  }
class C{  public void receiveVideoSharingInvitation(VideoStreamingSession session){  ContactId contact=session.getRemoteContact();  if (sLogger.isActivated()) {    sLogger.info(new StringBuilder("Receive video sharing invitation from ").append(contact.toString()).append(" displayName=").append(session.getRemoteDisplayName()).toString());  }  String sharingId=session.getSessionID();  VideoSharingPersistedStorageAccessor persistedStorage=new VideoSharingPersistedStorageAccessor(sharingId,mRichCallLog);  VideoSharingImpl videoSharing=new VideoSharingImpl(sharingId,mRichcallService,mBroadcaster,persistedStorage,this);  addVideoSharing(videoSharing,sharingId);  session.addListener(videoSharing);}  }
class C{  GemFireHealthJmxImpl(GfManagerAgent agent,AdminDistributedSystemJmxImpl system) throws AdminException {  super(agent,system);  this.mbeanName=new StringBuffer().append(MBEAN_NAME_PREFIX).append("GemFireHealth,id=").append(MBeanUtil.makeCompliantMBeanNameProperty(system.getId())).toString();  this.objectName=MBeanUtil.createMBean(this);}  }
class C{  public boolean isCritical(){  Object oo=get_Value(COLUMNNAME_IsCritical);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Statement orderBy(Object... columns){  statement.append(" ORDER BY ");  appendClauses(columns);  return this;}  }
class C{  public static LanguageVersion languageVersion(){  return LanguageVersion.JAVA_1_5;}  }
class C{  protected SymbolTableEntryInternalImpl(){  super();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void destroy(){  for (  EventTable table : tables) {    table.destroy();  }  tables.clear();  tableIndexesRefCount.clear();}  }
class C{  private String indent(){  assert (indent >= 0);  if (lastIndent != indent) {    indentCache="";    for (int i=0; i < indent; i++) {      indentCache+="    ";    }  }  return indentCache;}  }
class C{  public VersionTagReply(){}  }
class C{  public String peek(int numberChars){  return new String(_content,_index,numberChars);}  }
class C{  public boolean isDocOrdered(){  return m_inNaturalOrderStatic;}  }
class C{  public void buildTank_player(EntityPlayer player,EnumFacing inside){  if (getWorld().isRemote)   return;  buildPlayer=player;  buildTank(inside);}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN}) @Path("") public CatalogImageRestRep createCatalogImage(CatalogImageCreateParam createParam){  StorageOSUser user=getUserFromContext();  verifyAuthorizedInTenantOrg(createParam.getTenant(),user);  validateParam(createParam.getTenant(),createParam,null);  CatalogImage catalogImage=createNewObject(createParam.getTenant(),createParam);  catalogImageManager.createCatalogImage(catalogImage);  auditOpSuccess(OperationTypeEnum.CREATE_CATALOG_IMAGE,catalogImage.auditParameters());  return map(catalogImage);}  }
class C{  protected String doIt() throws Exception {  if (m_C_Project_ID == 0) {    return "Missing Mandatory Field Value (Project)";  }  MProject project=new MProject(getCtx(),m_C_Project_ID,get_TrxName());  log.info("doIt - " + project);  if (!MProject.PROJECTCATEGORY_AssetProject.equals(project.getProjectCategory()))   return "Project is not asset type";  MProduct product=new MProduct(getCtx(),m_Product_ID,get_TrxName());  MProductCategory pc=MProductCategory.get(getCtx(),product.getM_Product_Category_ID());  if (pc.getA_Asset_Group_ID() == 0) {    return "Product is not asset type";  }  MAssetAddition assetAdd=MAssetAddition.createAsset(project,product);  assetAdd.setDateAcct(m_DateTrx);  assetAdd.setDateDoc(m_DateTrx);  assetAdd.setM_Product_ID(m_Product_ID);  if (m_UseLifeYears > 0) {    assetAdd.setDeltaUseLifeYears(m_UseLifeYears);    assetAdd.setDeltaUseLifeYears_F(m_UseLifeYears);  }  assetAdd.saveEx();  if (!assetAdd.processIt(DocAction.ACTION_Complete)) {    return "Error Process Asset Addition";  }  assetAdd.saveEx();  message+=". @A_Asset_Addition_ID@ - " + assetAdd;  return "Asset Created " + message;}  }
class C{  public Where<T,ID> lt(String columnName,Object value) throws SQLException {  addClause(new SimpleComparison(columnName,findColumnFieldType(columnName),value,SimpleComparison.LESS_THAN_OPERATION));  return this;}  }
class C{  public ByteArray readByteArray(Type target){  throw new RuntimeException("ByteArray objects not supported with AMF0");}  }
class C{  @Override public String toString(){  return Utils.join(chunks);}  }
class C{  public ImagePortrayal3D(ImageIcon icon){  this(icon.getImage());}  }
class C{  private void resizePanel(){  if (parentFrame != null) {    int additionalParentHeight=(parentFrame.getBounds().height - scroller.getHeight());    scroller.resize();    int newHeight=scroller.getPreferredSize().height + additionalParentHeight;    if (newHeight > 300) {      parentFrame.pack();      parentFrame.setLocationRelativeTo(null);    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private static boolean hasSpecializedHandlerIntents(Context context,Intent intent){  try {    PackageManager pm=context.getPackageManager();    List<ResolveInfo> handlers=pm.queryIntentActivities(intent,PackageManager.GET_RESOLVED_FILTER);    if (handlers == null || handlers.size() == 0) {      return false;    }    for (    ResolveInfo resolveInfo : handlers) {      IntentFilter filter=resolveInfo.filter;      if (filter == null)       continue;      if (filter.countDataAuthorities() == 0 || filter.countDataPaths() == 0)       continue;      if (resolveInfo.activityInfo == null)       continue;      return true;    }  } catch (  RuntimeException e) {    Log.e(TAG,"Runtime exception while getting specialized handlers");  }  return false;}  }
class C{  public static void checkInt(BigInteger expected,IonValue actual){  checkType(IonType.INT,actual);  IonInt i=(IonInt)actual;  if (expected == null) {    assertTrue("expected null value",actual.isNullValue());  } else {    assertEquals("int content",expected,i.bigIntegerValue());  }}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public void deleteTrace(final TraceList trace) throws CouldntDeleteException {  Preconditions.checkNotNull(trace,"IE00167: Trace argument can not be null");  Preconditions.checkArgument(m_traces.contains(trace),"IE00168: Trace is not part of this module");  m_provider.deleteTrace(trace);  m_traces.remove(trace);  for (  final ITraceContainerListener listener : m_listeners) {    try {      listener.deletedTrace(this,trace);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  public void testMoveRenameDirectoryDestinationMissingPartially() throws Exception {  create(igfsSecondary,paths(DIR,SUBDIR,SUBSUBDIR,DIR_NEW,SUBDIR_NEW),null);  create(igfs,paths(DIR,SUBDIR,SUBSUBDIR,DIR_NEW),null);  igfs.rename(SUBSUBDIR,SUBSUBDIR_NEW);  checkExist(igfs,SUBDIR_NEW);  checkExist(igfs,igfsSecondary,SUBSUBDIR_NEW);  checkNotExist(igfs,igfsSecondary,SUBSUBDIR);}  }
class C{  public static Vector<Object> findInstances(Rectangle boundingBox,Integer... tab){  int index=0;  if (tab.length > 0) {    index=tab[0].intValue();  }  Vector<Object> components=null;  if (TABBED_COMPONENTS.size() > 0 && index < TABBED_COMPONENTS.size()) {    components=TABBED_COMPONENTS.get(index);  }  Graphics gx=null;  FontMetrics fm=null;  int centerX, centerY;  int minX=Integer.MAX_VALUE;  int minY=Integer.MAX_VALUE;  int maxX=Integer.MIN_VALUE;  int maxY=Integer.MIN_VALUE;  Vector<Object> result=new Vector<Object>();  for (int i=0; i < components.size(); i++) {    BeanInstance t=(BeanInstance)components.elementAt(i);    centerX=t.getX() + (t.getWidth() / 2);    centerY=t.getY() + (t.getHeight() / 2);    if (boundingBox.contains(centerX,centerY)) {      result.addElement(t);      if (gx == null) {        gx=((JComponent)t.getBean()).getGraphics();        gx.setFont(new Font(null,Font.PLAIN,9));        fm=gx.getFontMetrics();      }      String label="";      if (t.getBean() instanceof Visible) {        label=((Visible)t.getBean()).getVisual().getText();      }      int labelwidth=fm.stringWidth(label);      int brx=0;      int blx=0;      if (centerX - (labelwidth / 2) - 2 < t.getX()) {        blx=(centerX - (labelwidth / 2) - 2);        brx=centerX + (labelwidth / 2) + 2;      } else {        blx=t.getX() - 2;        brx=t.getX() + t.getWidth() + 2;      }      if (blx < minX) {        minX=blx;      }      if (brx > maxX) {        maxX=brx;      }      if (t.getY() - 2 < minY) {        minY=t.getY() - 2;      }      if (t.getY() + t.getHeight() + 2 > maxY) {        maxY=t.getY() + t.getHeight() + 2;      }    }  }  boundingBox.setBounds(minX,minY,maxX - minX,maxY - minY);  return result;}  }
class C{  public Builder tcpPort(int tcpPort){  impl.tcpPort=tcpPort;  return this;}  }
class C{  public TypedRead<K,V> withWatermarkFn(SerializableFunction<KV<K,V>,Instant> watermarkFn){  checkNotNull(watermarkFn);  return withWatermarkFn2(unwrapKafkaAndThen(watermarkFn));}  }
class C{  public ReplicatorCapabilities(TungstenProperties props) throws Exception {  Set<String> keys=props.keyNames();  for (  String key : keys) {    if (key.equals(ROLES)) {      List<String> tags=props.getStringList(key);      for (      String tag : tags) {        if (tag.equalsIgnoreCase(ROLE_MASTER)) {          addRole(ReplicatorCapabilities.ROLE_MASTER);        } else         if (tag.equalsIgnoreCase(ROLE_SLAVE)) {          addRole(ReplicatorCapabilities.ROLE_SLAVE);        } else         if (tag.equalsIgnoreCase(ROLE_RELAY)) {          addRole(ReplicatorCapabilities.ROLE_RELAY);        } else {          throw new Exception("Unknown capability role: " + tag);        }      }    } else     if (key.equals(MODEL)) {      String tag=props.getString(key);      if (tag.equalsIgnoreCase(MODEL_PUSH)) {        setModel(MODEL_PUSH);      } else       if (tag.equalsIgnoreCase(MODEL_PULL)) {        setModel(MODEL_PULL);      } else       if (tag.equalsIgnoreCase(MODEL_PEER)) {        setModel(MODEL_PEER);      } else       if (tag.equalsIgnoreCase(UNKNOWN)) {        setModel(UNKNOWN);      } else {        throw new Exception("Unknown value for model: " + tag);      }    } else     if (key.equals(CAP_CONSISTENCY)) {      setConsistencyCheck(props.getBoolean(CAP_CONSISTENCY));    } else     if (key.equals(CAP_HEARTBEAT)) {      setHeartbeat(props.getBoolean(CAP_HEARTBEAT));    } else     if (key.equals(CAP_FLUSH)) {      setFlush(props.getBoolean(CAP_FLUSH));    } else     if (key.equals(PROVISION)) {      String tag=props.getString(key);      if (tag.equalsIgnoreCase(PROVISION_DONOR)) {        setProvisionDriver(PROVISION_DONOR);      } else       if (tag.equalsIgnoreCase(PROVISION_JOINER)) {        setProvisionDriver(PROVISION_JOINER);      } else       if (tag.equalsIgnoreCase(UNKNOWN)) {        setProvisionDriver(UNKNOWN);      } else {        throw new Exception("Unknown provision driver: " + tag);      }    } else {      throw new Exception("Unknown capability: " + key);    }  }}  }
class C{  @Override public int compareTo(RawComparable key){  return reader.compareKeys(blockBuffer,getKeyOffset(),getKeyLength(),key.buffer(),key.offset(),key.size());}  }
class C{  public Collection engineGenerateCertificates(InputStream inStream) throws CertificateException {  java.security.cert.Certificate cert;  List certs=new ArrayList();  while ((cert=engineGenerateCertificate(inStream)) != null) {    certs.add(cert);  }  return certs;}  }
class C{  private void initializeLayout(){  BoxLayout layout=new BoxLayout(this,BoxLayout.Y_AXIS);  this.setLayout(layout);  this.add(synapseInfoPanel);  this.add(Box.createVerticalStrut(DEFAULT_VGAP));  this.add(updateInfoPanel);  if (editSpikeResponders != null) {    this.add(Box.createVerticalStrut(DEFAULT_VGAP));    this.add(editSpikeResponders);  }}  }
class C{  public void testPerformanceOnFullHits() throws Exception {  final int minPrefixLen=100;  final int maxPrefixLen=200;  runPerformanceTest(minPrefixLen,maxPrefixLen,num,onlyMorePopular);}  }
class C{  private static void fillIdentifyingFields(final Product product,final VOService voProduct){  voProduct.setServiceId(getProductId(product));}  }
class C{  public RegisterResponseMessage(RegisterResponseMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }}  }
class C{  public LoginFailedIPList listLoginFailedIPs(){  return client.get(LoginFailedIPList.class,CONFIG_LIST_BLOCK_IPS);}  }
class C{  public List<String> binaryTreePaths(TreeNode root){  List<String> paths=new ArrayList<>();  if (root != null) {    dfs(root,"",paths);  }  return paths;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void remove(ImageFetchable src){  final FetcherInfo info=FetcherInfo.getFetcherInfo();synchronized (info.waitList) {    if (info.waitList.contains(src)) {      info.waitList.removeElement(src);    }  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private boolean readPort(){  _currentUrlMarker.setIndex(UrlPart.PORT,_buffer.length());  int portLen=0;  while (!_reader.eof()) {    char curr=_reader.read();    portLen++;    if (curr == '/') {      _buffer.append(curr);      return readPath();    } else     if (curr == '?') {      _buffer.append(curr);      return readQueryString();    } else     if (curr == '#') {      _buffer.append(curr);      return readFragment();    } else     if (checkMatchingCharacter(curr) == CharacterMatch.CharacterMatchStop || !CharUtils.isNumeric(curr)) {      _reader.goBack();      if (portLen == 1) {        _buffer.delete(_buffer.length() - 1,_buffer.length());      }      _currentUrlMarker.unsetIndex(UrlPart.PORT);      return readEnd(ReadEndState.ValidUrl);    } else {      _buffer.append(curr);    }  }  return readEnd(ReadEndState.ValidUrl);}  }
class C{  public Matrix4x3f mulComponentWise(Matrix4x3fc other){  return mulComponentWise(other,this);}  }
class C{  private void prune(Node node,Graph graph,int depth){  TetradLogger.getInstance().log("pruning","Trying to remove edges adjacent to node " + node + ", depth = "+ depth+ ".");  List<Node> a=new LinkedList<>(graph.getAdjacentNodes(node));  NEXT_EDGE:   for (  Node y : a) {    List<Node> adjNode=new LinkedList<>(graph.getAdjacentNodes(node));    adjNode.remove(y);    adjNode=possibleParents(node,adjNode);    if (adjNode.size() < depth) {      continue;    }    ChoiceGenerator cg=new ChoiceGenerator(adjNode.size(),depth);    int[] choice;    while ((choice=cg.next()) != null) {      List<Node> condSet=GraphUtils.asList(choice,adjNode);      if (independent(node,y,condSet) && !edgeRequired(node,y)) {        graph.removeEdge(node,y);        if (graph.getEdges(y).isEmpty() && y != getTarget()) {          graph.removeNode(y);        }        continue NEXT_EDGE;      }    }  }  int numAdjacents=graph.getAdjacentNodes(node).size();  noteMaxAtDepth(depth,numAdjacents,node);}  }
class C{  public static ArchiveAccess createArchiveAccess(){  return new ArchiveAccessImpl();}  }
class C{  protected static ValueTrackerElement transformRegisterLiteral(final ReilInstruction instruction,final ValueTrackerElement incomingState,final IElementGenerator generator){  final boolean registerFirst=inputOperandsAreRegisterLiteral(instruction);  final ReilOperand registerOperand=registerFirst ? instruction.getFirstOperand() : instruction.getSecondOperand();  final ReilOperand literalOperand=registerFirst ? instruction.getSecondOperand() : instruction.getFirstOperand();  final ReilOperand outputOperand=instruction.getThirdOperand();  final IValueElement previousState=incomingState.getState(registerOperand.getValue());  final IValueElement result=getOutputValue(registerOperand,previousState,literalOperand,null,generator);  if (previousState instanceof BitwiseAnd) {    return AndSimplifier.simplifyAnd(instruction,registerOperand,literalOperand,(BitwiseAnd)previousState,incomingState,generator);  } else {    return incomingState.update(instruction,new Register(outputOperand.getValue()),result);  }}  }
class C{  public int hashCode(){  int hash=tx == null ? 0 : tx.hashCode();  if (defaulting) {    hash+=getAntiAliasingHint().hashCode();    hash+=getFractionalMetricsHint().hashCode();  } else {    hash+=aaHintValue.hashCode();    hash+=fmHintValue.hashCode();  }  return hash;}  }
class C{  public Document createDocument(){  User currentUser=UserServiceFactory.getUserService().getCurrentUser();  String userEmail=currentUser == null ? "" : currentUser.getEmail();  String userDomain=currentUser == null ? "" : currentUser.getAuthDomain();  String myDocId="PA6-5000";  Document doc=Document.newBuilder().setId(myDocId).addField(Field.newBuilder().setName("content").setText("the rain in spain")).addField(Field.newBuilder().setName("email").setText(userEmail)).addField(Field.newBuilder().setName("domain").setAtom(userDomain)).addField(Field.newBuilder().setName("published").setDate(new Date())).build();  return doc;}  }
class C{  public BlockDXT1(){}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  WhiteboxRaster image;  WhiteboxRaster output;  int cols, rows;  int progress=0;  int col, row;  double z;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  if ((inputHeader.isEmpty()) || (outputHeader.isEmpty())) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    image=new WhiteboxRaster(inputHeader,"r");    rows=image.getNumberRows();    cols=image.getNumberColumns();    double noData=image.getNoDataValue();    output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("blue_white_red.pal");    output.setDataScale(WhiteboxRaster.DataScale.CONTINUOUS);    image.close();    Random generator=new Random();    double[] data;    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != noData) {          z=generator.nextInt(101) / 100.0;          output.setValue(row,col,z);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(row * 100.0 / rows);      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static final boolean objectEquals(Object o1,Object o2){  if (o1 == null || o2 == null)   return (o1 == null && o2 == null);  return o1.equals(o2);}  }
class C{  @NotNull private Collection<PyPresenterTestMemberEntry> launchAndGetMembers(@NotNull final String className){  final PyExtractSuperclassPresenterImpl sut=configureByClass(className);  myMocksControl.replay();  sut.launch();  return getMembers();}  }
class C{  protected CCTMXMapInfo(String tmxFile){  super();  tilesets=new ArrayList<CCTMXTilesetInfo>();  layers=new ArrayList<CCTMXLayerInfo>();  filename=tmxFile;  objectGroups=new ArrayList<CCTMXObjectGroup>();  properties=new HashMap<String,String>();  tileProperties=new HashMap<String,HashMap<String,String>>();  currentString=new StringBuilder();  storingCharacters=false;  layerAttribs=TMXLayerAttribNone;  parentElement=TMXPropertyNone;  parseXMLFile(filename);}  }
class C{  public void voteComplete(QuorumVoteServerConnect quorumVote){  VoteRunnableHolder holder=voteRunnables.remove(quorumVote);  if (holder != null) {    for (    VoteRunnable runnable : holder.runnables) {      runnable.close();    }  }}  }
class C{  public synchronized void close(){  Throwable t=new Throwable("Closed due to user request.");  close(t,false);}  }
class C{  boolean handleDragging(MotionEvent event){  if (!mAppMenu.isShowing() || !mDragScrolling.isRunning())   return false;  final float rawX=event.getRawX();  final float rawY=event.getRawY();  final int roundedRawX=Math.round(rawX);  final int roundedRawY=Math.round(rawY);  final int eventActionMasked=event.getActionMasked();  final ListView listView=mAppMenu.getPopup().getListView();  mLastTouchX=rawX;  mLastTouchY=rawY;  if (eventActionMasked == MotionEvent.ACTION_CANCEL) {    mAppMenu.dismiss();    return true;  }  if (!mIsSingleTapUpHappened) {    mGestureSingleTapDetector.onTouchEvent(event);    if (mIsSingleTapUpHappened) {      finishDragging();    }  }  if (!mDragScrolling.isRunning())   return false;  boolean didPerformClick=false;  int itemAction=ITEM_ACTION_CLEAR_HIGHLIGHT_ALL;switch (eventActionMasked) {case MotionEvent.ACTION_DOWN:case MotionEvent.ACTION_MOVE:    itemAction=ITEM_ACTION_HIGHLIGHT;  break;case MotionEvent.ACTION_UP:itemAction=ITEM_ACTION_PERFORM;break;default :break;}didPerformClick=menuItemAction(roundedRawX,roundedRawY,itemAction);if (eventActionMasked == MotionEvent.ACTION_UP && !didPerformClick) {mAppMenu.dismiss();} else if (eventActionMasked == MotionEvent.ACTION_MOVE) {if (listView.getHeight() > 0) {float autoScrollAreaRatio=Math.min(AUTO_SCROLL_AREA_MAX_RATIO,mItemRowHeight * 1.2f / listView.getHeight());float normalizedY=(rawY - getScreenVisibleRect(listView).top) / listView.getHeight();if (normalizedY < autoScrollAreaRatio) {mDragScrollingVelocity=(normalizedY / autoScrollAreaRatio - 1.0f) * mAutoScrollFullVelocity;} else if (normalizedY > 1.0f - autoScrollAreaRatio) {mDragScrollingVelocity=((normalizedY - 1.0f) / autoScrollAreaRatio + 1.0f) * mAutoScrollFullVelocity;} else {mDragScrollingVelocity=0.0f;}}}return true;}  }
class C{  public static <V,W>Pair<V,W> create(V v,W w){  return new Pair<V,W>(v,w);}  }
class C{  @Override public void visitInnerClass(final String aname,final String outerName,final String innerName,final int attr_access){  if ((name != null) && name.equals(aname)) {    this.access=attr_access;  }  super.visitInnerClass(aname,outerName,innerName,attr_access);}  }
class C{  public long length() throws SQLException {  return actualSize;}  }
class C{  public static boolean isSelinuxFlagInEnabled(){  String selinux=null;  try {    Class<?> c=Class.forName("android.os.SystemProperties");    Method get=c.getMethod("get",String.class);    selinux=(String)get.invoke(c,"ro.build.selinux");  } catch (  Exception ignored) {  }  return "1".equals(selinux) ? true : false;}  }
class C{  public static Object destroyKey1(){  try {    Region region=cache.getRegion(Region.SEPARATOR + REGION_NAME);    assertNotNull(region);    region.destroy("key1");    return eventId;  } catch (  Exception e) {    fail("put failed due to ",e);  }  return null;}  }
class C{  public static <T>Observable.Transformer<T,T> subscribeOnComputationThreadTransformer(){  return null;}  }
class C{  public final TextBuilder append(Object obj){  if (obj instanceof String)   return append((String)obj);  if (obj instanceof Number)   return appendNumber((Number)obj);  return append(String.valueOf(obj));}  }
class C{  public static DateTime toDate(Object o,boolean alsoNumbers,TimeZone tz) throws PageException {  return DateCaster.toDateAdvanced(o,alsoNumbers ? DateCaster.CONVERTING_TYPE_OFFSET : DateCaster.CONVERTING_TYPE_NONE,tz);}  }
class C{  public synchronized String format(LogRecord record){  StringBuffer sb=new StringBuffer();  String message=formatMessage(record);  sb.append(message);  sb.append(lineSeparator);  return sb.toString();}  }
class C{  public boolean isDomainZeroBaselineVisible(){  return this.domainZeroBaselineVisible;}  }
class C{  public TimeSynchronizationResult(final TimeInstant timeStamp,final TimeOffset currentTimeOffset,final TimeOffset change){  this.timeStamp=timeStamp;  this.currentTimeOffset=currentTimeOffset;  this.change=change;}  }
class C{  public void addListDataListener(ListDataListener l){  listenerList.add(ListDataListener.class,l);}  }
class C{  public static long copyLarge(Reader input,Writer output,char[] buffer) throws IOException {  long count=0;  int n=0;  while (EOF != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  public Quaterniond mul(double qx,double qy,double qz,double qw){  set(w * qx + x * qw + y * qz - z * qy,w * qy - x * qz + y * qw + z * qx,w * qz + x * qy - y * qx + z * qw,w * qw - x * qx - y * qy - z * qz);  return this;}  }
class C{  private boolean isStaticAndFinal(VariableDeclaration variableDeclaration){  boolean isStatic=false;  boolean isFinal=false;  for (  KeywordModifier keywordModifier : variableDeclaration.astDefinition().astModifiers().astKeywords()) {    if (keywordModifier.astName().equals("static")) {      isStatic=true;    }    if (keywordModifier.astName().equals("final")) {      isFinal=true;    }  }  return isStatic && isFinal;}  }
class C{  public void test_getTrustManagers(){  try {    TrustManagerFactory trustMF=TrustManagerFactory.getInstance(getDefaultAlgorithm());    KeyStore ks=KeyStore.getInstance(KeyStore.getDefaultType());    ks.load(null,null);    trustMF.init(ks);    TrustManager[] tm=trustMF.getTrustManagers();    assertNotNull("Result has not be null",tm);    assertTrue("Length of result TrustManager array should not be 0",(tm.length > 0));  } catch (  Exception ex) {    fail("Unexpected exception " + ex.toString());  }}  }
class C{  private JDiffField loadFieldInfo(String className,XmlPullParser parser){  String fieldName=parser.getAttributeValue(null,ATTRIBUTE_NAME);  String fieldType=parser.getAttributeValue(null,ATTRIBUTE_TYPE);  int modifier=jdiffModifierToReflectionFormat(className,parser);  return new JDiffField(fieldName,fieldType,modifier);}  }
class C{  public Boolean isFirmwareUpgrade(){  return firmwareUpgrade;}  }
class C{  public ChannelFuture connect(SocketAddress serverAddress) throws InterruptedException {  setSocketAddress(serverAddress);  return connect().sync();}  }
class C{  public int next(){  for (++_currentNode; _sp >= 0; ++_currentNode) {    if (_currentNode < _stack[_sp]) {      int type=_type2(_currentNode);      if (type != ATTRIBUTE_NODE && type != NAMESPACE_NODE)       return returnNode(makeNodeHandle(_currentNode));    } else     --_sp;  }  return NULL;}  }
class C{  public BulletParser(final ParsingFactory factory){  this.factory=factory;}  }
class C{  public static Writable encodeBase64(Byte[] data){  return encodeBase64(DefaultTypeTransformation.convertToByteArray(data),false);}  }
class C{  public static int EREMOTE(){  return Errno.EREMOTE.intValue();}  }
class C{  @Override public int split(int leaf,TreeSplit split){  int indexOfNewNonLeaf=super.split(leaf,split);  DecisionTreeSplit dsplit=(DecisionTreeSplit)split;  for (int c=0; c < numClasses; c++) {    leafTargetDistributions[leaf][c]=dsplit.leftTargetDist[c];    leafTargetDistributions[numLeaves - 1][c]=dsplit.rightTargetDist[c];  }  normalizeLeafTargetDistributions(leaf);  normalizeLeafTargetDistributions(numLeaves - 1);  return indexOfNewNonLeaf;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean indexOnly(){  return (loaders.isEmpty() && !((indexColumns == null) || indexColumns.isEmpty()));}  }
class C{  protected void checkForDuplicateName(String name,Class<? extends DataObject> type){  checkForDuplicateName(name,type,null,null,_dbClient);}  }
class C{  public void testGuidEscapeSequence(){  check("CAST('12345678-9abc-def0-1234-123456789abc' AS UUID)","{guid '12345678-9abc-def0-1234-123456789abc'}");  check("select CAST('12345678-9abc-def0-1234-123456789abc' AS UUID) from SomeTable;","select {guid '12345678-9abc-def0-1234-123456789abc'} from SomeTable;");  check("select CAST('12345678-9abc-def0-1234-123456789abc' AS UUID)","select {guid '12345678-9abc-def0-1234-123456789abc'}");}  }
class C{  public static double sinQuick(final double angle){  if (USE_JDK_MATH) {    return Math.sin(angle);  }  return MyTSinCos.cosTab[(int)(Math.abs(angle - Math.PI / 2) * SIN_COS_INDEXER + 0.5) & SIN_COS_TABS_SIZE - 2];}  }
class C{  public void doOpen(){  try {    JFileChooser fileView=new JFileChooser();    fileView.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);    fileView.addChoosableFileFilter(new JavaFilter());    fileView.setAcceptAllFileFilterUsed(false);    if (null == m_strategyDir) {      fileView.setCurrentDirectory(new File(System.getProperty("user.dir")));    } else {      String dir=m_strategyDir + "/" + StrategyRule.PACKAGE.replace('.','/');      fileView.setCurrentDirectory(new File(dir));    }    int returnVal=fileView.showOpenDialog(this);    if (returnVal == JFileChooser.APPROVE_OPTION) {      String fileName=fileView.getSelectedFile().getPath();      if (null == fileName) {        this.setStatusBarMessage("No file selected ",BasePanel.INFORMATION);        return;      } else {        DefaultMutableTreeNode node=(DefaultMutableTreeNode)m_tree.getSelectionPath().getLastPathComponent();        setContent(readFile(fileName));        commentText.setText(null);        if (node.getUserObject() instanceof Strategy) {          createRule((Strategy)node.getUserObject());        }      }    }  } catch (  Exception ex) {    this.setErrorMessage("Exception while reading csv file.",ex.getMessage(),ex);  }}  }
class C{  public int compareTo(DiscoverInfo.Identity other){  String otherLang=other.lang == null ? "" : other.lang;  String thisLang=lang == null ? "" : lang;  String otherType=other.type == null ? "" : other.type;  String thisType=type == null ? "" : type;  if (category.equals(other.category)) {    if (thisType.equals(otherType)) {      if (thisLang.equals(otherLang)) {        return 0;      } else {        return thisLang.compareTo(otherLang);      }    } else {      return thisType.compareTo(otherType);    }  } else {    return category.compareTo(other.category);  }}  }
class C{  private void testBug71396PrepStatementCheck(Connection testConn,String query,int expRowCount,int maxRows) throws SQLException {  PreparedStatement chkPStmt;  chkPStmt=testConn.prepareStatement(query);  if (maxRows > 0) {    chkPStmt.setMaxRows(maxRows);  }  testBug71396PrepStatementCheck(chkPStmt,query,expRowCount);  chkPStmt.close();}  }
class C{  @Override public boolean next() throws SQLException {  if (source != null) {    rowId++;    currentRow=source.readRow();    if (currentRow != null) {      return true;    }  } else   if (rows != null && rowId < rows.size()) {    rowId++;    if (rowId < rows.size()) {      currentRow=rows.get(rowId);      return true;    }    currentRow=null;  }  if (autoClose) {    close();  }  return false;}  }
class C{  private static byte[] discardNonBase64Bytes(byte[] data){  byte temp[]=new byte[data.length];  int bytesCopied=0;  for (int i=0; i < data.length; i++) {    if (isValidBase64Byte(data[i])) {      temp[bytesCopied++]=data[i];    }  }  byte newData[]=new byte[bytesCopied];  System.arraycopy(temp,0,newData,0,bytesCopied);  return newData;}  }
class C{  private void parse(String line){  String message=null;  if (mTestRunInProgress || line.startsWith(Prefixes.TEST_RUN_MARKER)) {    if (line.startsWith(Prefixes.START_TEST_MARKER)) {      message=line.substring(Prefixes.START_TEST_MARKER.length()).trim();      processTestStartedTag(message);    } else     if (line.startsWith(Prefixes.OK_TEST_MARKER)) {      message=line.substring(Prefixes.OK_TEST_MARKER.length()).trim();      processOKTag(message);      clearCurrentTestResult();    } else     if (line.startsWith(Prefixes.FAILED_TEST_MARKER)) {      message=line.substring(Prefixes.FAILED_TEST_MARKER.length()).trim();      processFailedTag(message);      clearCurrentTestResult();    } else     if (line.startsWith(Prefixes.START_TEST_RUN_MARKER)) {      message=line.substring(Prefixes.TEST_RUN_MARKER.length()).trim();      processRunStartedTag(message);    } else     if (line.startsWith(Prefixes.TEST_RUN_MARKER)) {      message=line.substring(Prefixes.TEST_RUN_MARKER.length()).trim();      processRunCompletedTag(message);    } else     if (testInProgress()) {      appendTestOutputLine(line);    }  }}  }
class C{  public String toString(){  return toString(root,height,"") + "\n";}  }
class C{  private String[] listSeqnoFileNames(){  return fileIO.list(serviceDir,prefix);}  }
class C{  private void doCommonReturnToHive(){  AbstractMovingAgent entrance=hive.getEntrance();  doStepReturning(entrance);  if (entrance.isInSphere(this)) {    setState(State.unloadQueue);  }}  }
class C{  public Object clone(){  mxCellState clone=new mxCellState(view,cell,style);  if (absolutePoints != null) {    clone.absolutePoints=new ArrayList<mxPoint>();    for (int i=0; i < absolutePoints.size(); i++) {      clone.absolutePoints.add((mxPoint)absolutePoints.get(i).clone());    }  }  if (origin != null) {    clone.origin=(mxPoint)origin.clone();  }  if (absoluteOffset != null) {    clone.absoluteOffset=(mxPoint)absoluteOffset.clone();  }  if (boundingBox != null) {    clone.boundingBox=(mxRectangle)boundingBox.clone();  }  clone.terminalDistance=terminalDistance;  clone.segments=segments;  clone.length=length;  clone.x=x;  clone.y=y;  clone.width=width;  clone.height=height;  return clone;}  }
class C{  void initializeActiveLandmarks(final Node fromNode,final Node toNode,final int actLandmarkCount){  final PreProcessLandmarks.LandmarksData fromData=getPreProcessData(fromNode);  final PreProcessLandmarks.LandmarksData toData=getPreProcessData(toNode);  double[] estTravelTimes=new double[actLandmarkCount];  this.activeLandmarkIndexes=new int[actLandmarkCount];  for (int i=0; i < estTravelTimes.length; i++) {    estTravelTimes[i]=Time.UNDEFINED_TIME;  }  double tmpTravTime;  for (int i=0; i < this.landmarks.length; i++) {    tmpTravTime=estimateRemainingTravelCost(fromData,toData,i);    for (int j=0; j < estTravelTimes.length; j++) {      if (tmpTravTime > estTravelTimes[j]) {        for (int k=estTravelTimes.length - 1; k > j; k--) {          estTravelTimes[k]=estTravelTimes[k - 1];          this.activeLandmarkIndexes[k]=this.activeLandmarkIndexes[k - 1];        }        estTravelTimes[j]=tmpTravTime;        this.activeLandmarkIndexes[j]=i;        break;      }    }  }}  }
class C{  private static byte[] encode3to4(final byte[] b4,final byte[] threeBytes,final int numSigBytes,final int options){  Base64.encode3to4(threeBytes,0,numSigBytes,b4,0,options);  return b4;}  }
class C{  public static double[][] covarianceMatrix(double[][] data){  return covarianceMatrix(data,means(data));}  }
class C{  void loadTOS(Method m,Deque<Expr> stk,Deque<Expr> scp,Deque<Expr> out,Deque<Object> verbose,Set<Expr> live,Map<Integer,Integer> locals){  showstate(live,stk,scp,verbose);  Expr e=stk.removeLast();  if (e == stk.peekLast())   issue_dup(e,m,out,verbose); else   issue_load(e,m,out,verbose,live,locals);}  }
class C{  public void paint(Component c,Graphics g,int x,int y,int w,int h,Image source,Insets sInsets,Insets dInsets,PaintType type,int mask){  if (source == null) {    return;  }  super.paint(c,g,x,y,w,h,source,sInsets,dInsets,type,mask);}  }
class C{  public static GroupMatcher<JobKey> jobGroupEquals(String compareTo){  return GroupMatcher.groupEquals(compareTo);}  }
class C{  static RightThreadedBinaryTree<Integer> buildComplete(int n){  RightThreadedBinaryTree<Integer> bt=new RightThreadedBinaryTree<Integer>();  int b=(int)Math.pow(2,n - 1);  for (int i=0; i < n; i++) {    bt.insert(b);    for (int j=1; j <= Math.pow(2,i) - 1; j++) {      bt.insert(b + 2 * b * j);    }    b=b / 2;  }  return bt;}  }
class C{  public static HugLife readWorld(String worldName){  In in=new In("huglife/" + worldName + ".world");  HugLife h=new HugLife(WORLD_SIZE);  while (!in.isEmpty()) {    String creature=in.readString();    int x=in.readInt();    int y=in.readInt();switch (creature) {case "plip":      h.addCreature(x,y,new Plip());    break;case "samplecreature":  h.addCreature(x,y,new SampleCreature());break;}}return h;}  }
class C{  public NullType createNullType(){  NullTypeImpl nullType=new NullTypeImpl();  return nullType;}  }
class C{  public static void addProperty(AtlasVertex vertex,String propertyName,Object value){  String actualPropertyName=GraphHelper.encodePropertyKey(propertyName);  LOG.debug("Adding property {} = \"{}\" to vertex {}",actualPropertyName,value,string(vertex));  vertex.addProperty(actualPropertyName,value);}  }
class C{  private void processRestControllerClass(Class<?> clazz) throws MojoExecutionException {  JavaClassSource javaClassSource=sourceMap.get(clazz.getSimpleName());  if (javaClassSource == null) {    throw new MojoExecutionException("No source resource found for class \"" + clazz.getName() + "\".");  }  Api api=clazz.getAnnotation(Api.class);  boolean hidden=api != null && api.hidden();  if ((clazz.getAnnotation(RestController.class) != null) && (!hidden)) {    log.debug("Processing RestController class \"" + clazz.getName() + "\".");    String tagName=clazz.getSimpleName();    if (api != null && api.tags().length > 0) {      tagName=api.tags()[0];    } else {      Matcher matcher=tagPattern.matcher(clazz.getSimpleName());      if (matcher.find()) {        tagName=matcher.group("tag");      }    }    log.debug("Using tag name \"" + tagName + "\".");    swagger.addTag(new Tag().name(tagName));    for (    Method method : clazz.getDeclaredMethods()) {      List<Class<?>> methodParamClasses=new ArrayList<>();      for (      Parameter parameter : method.getParameters()) {        methodParamClasses.add(parameter.getType());      }      MethodSource<JavaClassSource> methodSource=javaClassSource.getMethod(method.getName(),methodParamClasses.toArray(new Class<?>[methodParamClasses.size()]));      if (methodSource == null) {        throw new MojoExecutionException("No method source found for class \"" + clazz.getName() + "\" and method name \""+ method.getName()+ "\".");      }      processRestControllerMethod(method,clazz.getAnnotation(RequestMapping.class),tagName,methodSource);    }  } else {    log.debug("Skipping class \"" + clazz.getName() + "\" because it is either not a RestController or it is hidden.");  }}  }
class C{  public AbstractConnectorExecutor(String configFile){  InputStream configFileInputStream=Thread.currentThread().getContextClassLoader().getResourceAsStream(configFile);  if (configFileInputStream == null) {    String msg="Could not find resource " + configFile + " in the classpath";    LOG.error(msg);    throw new IllegalStateException(msg);  }  Properties propertiesFile=new Properties();  Properties mergedProperties=new Properties();  try {    propertiesFile.load(configFileInputStream);    mergedProperties.putAll(propertiesFile);    mergedProperties.putAll(System.getProperties());    configFileInputStream.close();    this.config=new KinesisConnectorConfiguration(mergedProperties,new DefaultAWSCredentialsProviderChain());  } catch (  IOException e) {    String msg="Could not load properties file " + configFile + " from classpath";    LOG.error(msg,e);    throw new IllegalStateException(msg,e);  }  super.initialize(config,new NullMetricsFactory());}  }
class C{  public CollatedTermAttributeImpl(Collator collator){  this.collator=(Collator)collator.clone();}  }
class C{  public static Bitmap decodeResourceWithBackouts(Resources res,BitmapFactory.Options options,int id){  boolean noBitmap=true;  int num_tries=0;  if (options.inSampleSize < 1) {    options.inSampleSize=1;  }  Bitmap bmap=null;  while (noBitmap) {    try {      bmap=BitmapFactory.decodeResource(res,id,options);      noBitmap=false;    } catch (    java.lang.OutOfMemoryError e) {      if (++num_tries >= BITMAP_LOAD_BACKOUT_ATTEMPTS) {        throw e;      }      bmap=null;      System.gc();      options.inSampleSize*=2;    }  }  return bmap;}  }
class C{  public void infoNoCRLInfoFound(){  addInfo("No CRL info found !");}  }
class C{  public BluetoothHandsfreeClientCall(int id,int state,String number,boolean multiParty,boolean outgoing){  mId=id;  mState=state;  mNumber=number != null ? number : "";  mMultiParty=multiParty;  mOutgoing=outgoing;}  }
class C{  public SetQuestToYearAction(final String questname){  this.questname=checkNotNull(questname);  this.index=-1;}  }
class C{  @Override public HierarchicalStreamWriter createWriter(final Writer out){  return new JsonWriter(out);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node anotherElement;  NamedNodeMap anotherMap;  Node arg;  Node testAddress;  NamedNodeMap map;  Node setNode;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("address");  anotherElement=elementList.item(2);  anotherMap=anotherElement.getAttributes();  arg=anotherMap.getNamedItemNS("http://www.netzero.com","domestic");  testAddress=elementList.item(0);  map=testAddress.getAttributes();{    boolean success=false;    try {      setNode=map.setNamedItemNS(arg);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INUSE_ATTRIBUTE_ERR);    }    assertTrue("throw_INUSE_ATTRIBUTE_ERR",success);  }}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getStringExpr_();}  }
class C{  @Override @Deprecated public boolean awaitTermination(long l,TimeUnit timeUnit) throws InterruptedException {  throw new UnsupportedOperationException();}  }
class C{  public static void addImageFileToTheMapOfCatalogImages(String key,CachedFile file){  assert file != null : "Program Error: attempt to add 'null' file to image map";  assert (file.getName().equals("c2o_thumbnail.jpg") || file.getName().equals("c2o_resizedcover.jpg") || file.getName().equals(Constants.CALIBRE_COVER_FILENAME)) : "Program Error: Unexpected name '" + file.getName() + "' when trying to add image to map";  if (!mapOfImagesToCopy.containsKey(key)) {    mapOfImagesToCopy.put(key,file);  }}  }
class C{  public Iterable<Integer> post(){  return postorder;}  }
class C{  public Graph(Table nodes,Table edges,boolean directed,String nodeKey,String sourceKey,String targetKey){  init(nodes,edges,directed,nodeKey,sourceKey,targetKey);}  }
class C{  final void longAccumulate(long x,LongBinaryOperator fn,boolean wasUncontended){  int h;  if ((h=getProbe()) == 0) {    ThreadLocalRandom.current();    h=getProbe();    wasUncontended=true;  }  boolean collide=false;  for (; ; ) {    Cell[] as;    Cell a;    int n;    long v;    if ((as=cells) != null && (n=as.length) > 0) {      if ((a=as[(n - 1) & h]) == null) {        if (cellsBusy == 0) {          Cell r=new Cell(x);          if (cellsBusy == 0 && casCellsBusy()) {            boolean created=false;            try {              Cell[] rs;              int m, j;              if ((rs=cells) != null && (m=rs.length) > 0 && rs[j=(m - 1) & h] == null) {                rs[j]=r;                created=true;              }            }  finally {              cellsBusy=0;            }            if (created)             break;            continue;          }        }        collide=false;      } else       if (!wasUncontended)       wasUncontended=true; else       if (a.cas(v=a.value,((fn == null) ? v + x : fn.applyAsLong(v,x))))       break; else       if (n >= NCPU || cells != as)       collide=false; else       if (!collide)       collide=true; else       if (cellsBusy == 0 && casCellsBusy()) {        try {          if (cells == as) {            Cell[] rs=new Cell[n << 1];            for (int i=0; i < n; ++i)             rs[i]=as[i];            cells=rs;          }        }  finally {          cellsBusy=0;        }        collide=false;        continue;      }      h=advanceProbe(h);    } else     if (cellsBusy == 0 && cells == as && casCellsBusy()) {      boolean init=false;      try {        if (cells == as) {          Cell[] rs=new Cell[2];          rs[h & 1]=new Cell(x);          cells=rs;          init=true;        }      }  finally {        cellsBusy=0;      }      if (init)       break;    } else     if (casBase(v=base,((fn == null) ? v + x : fn.applyAsLong(v,x))))     break;  }}  }
class C{  public static void incrementRecycled(){  Log.d(TAG,"onBind: " + bound.get());  Log.d(TAG,"onRecycled: " + recycled.incrementAndGet());}  }
class C{  public static Typeface robotoBoldItalic(Context context){  sRobotoBoldItalic=getFontFromRes(R.raw.roboto_bolditalic,context);  return sRobotoBoldItalic;}  }
class C{  public FileTransfer transferFile(ContactId contact,Uri file,Disposition disposition,boolean attachFileIcon) throws RcsPersistentStorageException, RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    tryToGrantUriPermissionToStackServices(file);    IFileTransfer ftIntf=mApi.transferFile2(contact,file,disposition.toInt(),attachFileIcon);    if (ftIntf != null) {      return new FileTransfer(ftIntf);    }    return null;  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    RcsPersistentStorageException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public static JSONObject rowToJSONObject(JSONArray names,JSONTokener x) throws JSONException {  JSONArray ja=rowToJSONArray(x);  return ja != null ? ja.toJSONObject(names) : null;}  }
class C{  public void matrixChanged(){  m_tableModel.fireTableStructureChanged();  m_classesField.setText("" + m_matrix.size());}  }
class C{  public void back() throws JSONException {  if (this.usePrevious || this.index <= 0) {    throw new JSONException("Stepping back two steps is not supported");  }  this.index-=1;  this.character-=1;  this.usePrevious=true;  this.eof=false;}  }
class C{  public GBC fill(int value){  fill=value;  if ((value == HORIZONTAL) || (value == BOTH)) {    weightx=1.0;  }  if ((value == VERTICAL) || (value == BOTH)) {    weighty=1.0;  }  return this;}  }
class C{  public void updateCommitIndex(int index){  CoreCmd ccmd=getQueue.peek();  while (ccmd != null && ccmd.index <= index) {    ccmd.update(Command.STATUS_OK,cmember.leaderId);    getQueue.poll();    ccmd=getQueue.peek();  }}  }
class C{  public String toString(Instances instances,char outerDelim,char innerDelim){  StringBuffer text=new StringBuffer();  for (int i=0; i < instances.numAttributes(); i++) {    if (m_items[i] != -1) {      text.append(instances.attribute(i).name()).append('=').append(instances.attribute(i).value(m_items[i])).append(innerDelim);    }  }  int n=text.length();  if (n > 0) {    text.setCharAt(n - 1,outerDelim);  } else {    if (outerDelim != ' ' || innerDelim != ' ') {      text.append(outerDelim);    }  }  text.append(m_counter);  return text.toString();}  }
class C{  public ActivityTransitionExitHelper background(View background){  this.background=background;  return this;}  }
class C{  private OpenSSLSignature(String algorithm,EngineType engineType) throws NoSuchAlgorithmException {  super(algorithm);  if ("RSA-MD2".equals(algorithm)) {    throw new NoSuchAlgorithmException(algorithm);  }  this.engineType=engineType;  this.evpAlgorithm=algorithm;}  }
class C{  private void removeFromFavorites(){  for (  String game : list.getSelectedValuesList()) {    favorites.remove(game);  }  saveFavorites();  update();}  }
class C{  public static <T>Iterator<T> sort(Iterator<T> self){  return sort((Iterable<T>)toList(self)).listIterator();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Schwefel(int numberOfVariables){  super(numberOfVariables);}  }
class C{  public Expression parseExpression(String sql){  parameters=New.arrayList();  initialize(sql);  read();  return readExpression();}  }
class C{  public ServerProxyEmptyResponse(){  requestFileName="proxyemulator.query";  responseFile="empty.query";}  }
class C{  public void addAdjustmentListener(AdjustmentListener l){  listenerList.add(AdjustmentListener.class,l);}  }
class C{  public final AC shrink(float w,int... indexes){  Float sw=new Float(w);  for (int i=indexes.length - 1; i >= 0; i--) {    int ix=indexes[i];    makeSize(ix);    cList.get(ix).setShrink(sw);  }  return this;}  }
class C{  protected char checkZone(char zone){  zone=Character.toUpperCase(zone);  if (zone <= 'A' || zone == 'B' || zone == 'Y' || zone >= 'Z' || zone == 'I' || zone == 'O') {    throw new NumberFormatException("Invalid MGRSPoint zone letter: " + zone);  }  return zone;}  }
class C{  public String dc_language(){  if (this.languages == null)   return null;  if (this.languages.isEmpty())   return null;  if (this.languages.size() == 1)   return this.languages.iterator().next();  if (this.languages.contains(this.source.language()))   return this.source.language();  return this.languages.iterator().next();}  }
class C{  public int add(GL10 gl,Drawable background,String text,Paint textPaint){  return add(gl,background,text,textPaint,0,0);}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public void saveLink(ProjectLink link){}  }
class C{  public boolean match(UnionType node,Object other){  if (!(other instanceof UnionType)) {    return false;  }  UnionType o=(UnionType)other;  return safeSubtreeListMatch(node.types(),o.types());}  }
class C{  public void resetCount(){  if (originalCount == 0) {    releaseAll();  } else {    final int diff=originalCount - sync.getCount();    applyDelta(diff);  }}  }
class C{  static Object createReference(final int width,final int height){  return new ESRef(width,height);}  }
class C{  @Inline private void closeAndInsertHead(int arity){  queue.enqueue(head,arity,false);}  }
class C{  public final void removeCallbacksAndMessages(Object token){  mExec.removeCallbacksAndMessages(token);}  }
class C{  private int findNearestPair(double key,double secondaryKey){  int low=0;  int high=m_CondValues.size();  int middle=0;  while (low < high) {    middle=(low + high) / 2;    double current=m_CondValues.elementAt(middle).doubleValue();    if (current == key) {      double secondary=m_Values.elementAt(middle).doubleValue();      if (secondary == secondaryKey) {        return middle;      }      if (secondary > secondaryKey) {        high=middle;      } else       if (secondary < secondaryKey) {        low=middle + 1;      }    }    if (current > key) {      high=middle;    } else     if (current < key) {      low=middle + 1;    }  }  return low;}  }
class C{  private static boolean isIBMPre8(){  if (isClassPresent("com.ibm.misc.JarVersion")) {    String ver=System.getProperty("java.class.version","45");    if (ver != null && ver.length() >= 2) {      ver=ver.substring(0,2);      if ("52".compareTo(ver) > 0) {        return true;      }    }  }  return false;}  }
class C{  public void invalidateChildNodes(Node n){  XBLRecord rec=getRecord(n);  if (rec.childNodes != null) {    rec.childNodes.invalidate();  }  if (rec.scopedChildNodes != null) {    rec.scopedChildNodes.invalidate();  }}  }
class C{  public static boolean checkForProtectedVplexBackendVolume(DbClient dbClient,Volume volume){  if (checkForVplexBackEndVolume(dbClient,volume)) {    Volume vplexVolume=fetchVplexVolume(dbClient,volume);    if (vplexVolume != null && vplexVolume.checkForRp()) {      return true;    }  }  return false;}  }
class C{  public void requestFocus(){}  }
class C{  public static JSONObject toJSONObject(String string) throws JSONException {  return toJSONObject(new XMLTokener(string));}  }
class C{  private void declareExtensions(){  new CrawlIssuesFeed().declareExtensions(extProfile);  new KeywordsFeed().declareExtensions(extProfile);  new MessagesFeed().declareExtensions(extProfile);  new SitemapsFeed().declareExtensions(extProfile);  new SitesFeed().declareExtensions(extProfile);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!super.equals(obj)) {    return false;  }  if (!(obj instanceof XYPolygonAnnotation)) {    return false;  }  XYPolygonAnnotation that=(XYPolygonAnnotation)obj;  if (!Arrays.equals(this.polygon,that.polygon)) {    return false;  }  if (!ObjectUtilities.equal(this.stroke,that.stroke)) {    return false;  }  if (!PaintUtilities.equal(this.outlinePaint,that.outlinePaint)) {    return false;  }  if (!PaintUtilities.equal(this.fillPaint,that.fillPaint)) {    return false;  }  return true;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void reset() throws IOException {  ensureNotClosed();  nextSegment();}  }
class C{  public Context createSubcontext(String name) throws NamingException {  return createSubcontext(nameParser.parse(name));}  }
class C{  private final int internalNextInt(int origin,int bound){  int r=TLRandom.mix32(nextSeed());  if (origin < bound) {    int n=bound - origin, m=n - 1;    if ((n & m) == 0)     r=(r & m) + origin; else     if (n > 0) {      for (int u=r >>> 1; u + m - (r=u % n) < 0; u=TLRandom.mix32(nextSeed()) >>> 1)       ;      r+=origin;    } else {      while (r < origin || r >= bound)       r=TLRandom.mix32(nextSeed());    }  }  return r;}  }
class C{  private void throwTagException(Byte tag) throws IOException {  Byte[] expectedTags=PKCS9_VALUE_TAGS[index];  StringBuffer msg=new StringBuffer(100);  msg.append("Value of attribute ");  msg.append(oid.toString());  msg.append(" (");  msg.append(getName());  msg.append(") has wrong tag: ");  msg.append(tag.toString());  msg.append(".  Expected tags: ");  msg.append(expectedTags[0].toString());  for (int i=1; i < expectedTags.length; i++) {    msg.append(", ");    msg.append(expectedTags[i].toString());  }  msg.append(".");  throw new IOException(msg.toString());}  }
class C{  boolean isSelection(){  return !lines().isEmpty() || !offsets().isEmpty() || !lengths().isEmpty();}  }
class C{  @Override public void deliver(WriteStream os,OutHttp2 outHttp) throws IOException {  outHttp.writeFlow(_streamId,_credit);}  }
class C{  @Override public void initVertex(final IGASContext<PATHS.VS,PATHS.ES,Void> ctx,final IGASState<PATHS.VS,PATHS.ES,Void> state,final Value u){  state.getState(u).visit(0,null,null);}  }
class C{  public void resetOptions(){  m_removeMissingCols=false;  m_verbose=false;  m_delta=0.05;  m_minMetric=0.90;  m_numRules=10;  m_lowerBoundMinSupport=0.1;  m_upperBoundMinSupport=1.0;  m_significanceLevel=-1;  m_outputItemSets=false;  m_car=false;  m_classIndex=-1;  m_treatZeroAsMissing=false;  m_metricType=CONFIDENCE;}  }
class C{  public static void toXml(Object obj,OutputStream output){  xstream.toXML(obj,output);}  }
class C{  public static void execute(final PoolImpl pool,Function function,ServerFunctionExecutor executor,Object args,MemberMappedArgument memberMappedArg,boolean allServers,byte hasResult,ResultCollector rc,boolean isFnSerializationReqd,UserAttributes attributes,String[] groups){  final AbstractOp op=new ExecuteFunctionOpImpl(function,args,memberMappedArg,hasResult,rc,isFnSerializationReqd,(byte)0,groups,allServers,executor.isIgnoreDepartedMembers());  if (allServers && groups.length == 0) {    if (logger.isDebugEnabled()) {      logger.debug("ExecuteFunctionOp#execute : Sending Function Execution Message:{} to all servers using pool: {}",op.getMessage(),pool);    }    List callableTasks=constructAndGetFunctionTasks(pool,function,args,memberMappedArg,hasResult,rc,isFnSerializationReqd,attributes);    SingleHopClientExecutor.submitAll(callableTasks);  } else {    boolean reexecuteForServ=false;    AbstractOp reexecOp=null;    int retryAttempts=0;    boolean reexecute=false;    int maxRetryAttempts=0;    if (function.isHA())     maxRetryAttempts=pool.getRetryAttempts();    final boolean isDebugEnabled=logger.isDebugEnabled();    do {      try {        if (reexecuteForServ) {          if (isDebugEnabled) {            logger.debug("ExecuteFunctionOp#execute.reexecuteForServ : Sending Function Execution Message:{} to server using pool: {} with groups:{} all members:{} ignoreFailedMembers:{}",op.getMessage(),pool,Arrays.toString(groups),allServers,executor.isIgnoreDepartedMembers());          }          reexecOp=new ExecuteFunctionOpImpl(function,args,memberMappedArg,hasResult,rc,isFnSerializationReqd,(byte)1,groups,allServers,executor.isIgnoreDepartedMembers());          pool.execute(reexecOp,0);        } else {          if (isDebugEnabled) {            logger.debug("ExecuteFunctionOp#execute : Sending Function Execution Message:{} to server using pool: {} with groups:{} all members:{} ignoreFailedMembers:{}",op.getMessage(),pool,Arrays.toString(groups),allServers,executor.isIgnoreDepartedMembers());          }          pool.execute(op,0);        }        reexecute=false;        reexecuteForServ=false;      } catch (      InternalFunctionInvocationTargetException e) {        if (isDebugEnabled) {          logger.debug("ExecuteFunctionOp#execute : Received InternalFunctionInvocationTargetException. The failed node is {}",e.getFailedNodeSet());        }        reexecute=true;        rc.clearResults();      }catch (      ServerConnectivityException se) {        retryAttempts++;        if (isDebugEnabled) {          logger.debug("ExecuteFunctionOp#execute : Received ServerConnectivityException. The exception is {} The retryAttempt is : {} maxRetryAttempts  {}",se,retryAttempts,maxRetryAttempts);        }        if (se instanceof ServerOperationException) {          throw se;        }        if ((retryAttempts > maxRetryAttempts && maxRetryAttempts != -1))         throw se;        reexecuteForServ=true;        rc.clearResults();      }    } while (reexecuteForServ);    if (reexecute && function.isHA()) {      ExecuteFunctionOp.reexecute(pool,function,executor,rc,hasResult,isFnSerializationReqd,maxRetryAttempts - 1,groups,allServers);    }  }}  }
class C{  private static void createSMaskFill(final GraphicsState gs,final PdfObjectReader currentPdfFile,final DynamicVectorRenderer current,final ParserOptions parserOptions,final int formLevel,final float multiplyer){  final PdfObject maskObj=gs.SMask.getDictionary(PdfDictionary.G);  currentPdfFile.checkResolved(maskObj);  final float[] BBox;  BBox=maskObj.getFloatArray(PdfDictionary.BBox);  int fx=(int)(BBox[0] + 0.5f);  final int fy=(int)(BBox[1] + 0.5f);  final int fw=(int)(BBox[2] + 0.5f);  final int fh=(int)(BBox[3] + 0.5f);  if (fx < 0) {    fx=0;  }  final BufferedImage smaskImage=PDFObjectToImage.getImageFromPdfObject(maskObj,fx,fw,fy,fh,currentPdfFile,parserOptions,formLevel,multiplyer,false,1f);  final GraphicsState gs1=gs.deepCopy();  gs1.CTM=new float[][]{{smaskImage.getWidth(),0,1},{0,-smaskImage.getHeight(),1},{0,0,0}};  if (!current.isHTMLorSVG()) {    gs1.setBMValue(PdfDictionary.SMask);  }  gs1.x=fx;  gs1.y=fy;  gs1.CTM[2][0]=gs1.x;  gs1.CTM[2][1]=gs1.y;  current.drawImage(parserOptions.getPageNumber(),smaskImage,gs1,false,"F",-1);  smaskImage.flush();}  }
class C{  public static boolean testRayAar(Vector2dc origin,Vector2dc dir,Vector2dc min,Vector2dc max){  return testRayAar(origin.x(),origin.y(),dir.x(),dir.y(),min.x(),min.y(),max.x(),max.y());}  }
class C{  @Override public void changedUpdate(javax.swing.event.DocumentEvent e){}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType){  this(context,account,authTokenType,false);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_GEN_EXPR_2__INDEX_1:    setIndex_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  Item newDouble(final double value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(DOUBLE).putLong(key.longVal);    result=new Item(index,key);    index+=2;    put(result);  }  return result;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SRuntimePackage.COMPOSITE_SLOT__SLOTS:    getSlots().clear();  return;}super.eUnset(featureID);}  }
class C{  public void remove(int index){  mCategories.remove(index);  mTitles.remove(index);  mValues.remove(index);}  }
class C{  public String defaultHostname(){  return defaultHostname;}  }
class C{  public boolean isCompressionEnabled(){  return compression;}  }
class C{  public SqlMigration(){  this(null);}  }
class C{  public void testDetectLanguageTh(){  LOGGER.debug("detectLanguage th");  LanguageDetector instance=LanguageDetector.getInstance();  Document doc;  try {    doc=Jsoup.parse(new File(PATH + "th.wikipedia.org-wiki_20140701.html"),UTF_8);    LOGGER.debug("start detection");    assertEquals("th",instance.detectLanguage(doc.text()).getDetectedLanguage());    assertEquals("th",instance.detectLanguage(doc.text().toLowerCase()).getDetectedLanguage());    assertEquals("th",instance.detectLanguage(doc.text().toUpperCase()).getDetectedLanguage());    LOGGER.debug("detection ended");  } catch (  IOException ex) {    LOGGER.error(ex);  }catch (  NullPointerException npe) {    LOGGER.error("error while fetching page " + npe);  }}  }
class C{  public static ImportDeclaration createEmptyDeclaration(){  return new ImportDeclaration();}  }
class C{  private static String f(String msg){  return caller() + msg;}  }
class C{  static public CounterSetBTree create(final IRawStore store){  final IndexMetadata metadata=new IndexMetadata(UUID.randomUUID());  metadata.setBTreeClassName(CounterSetBTree.class.getName());  metadata.setTupleSerializer(new CounterSetBTreeTupleSerializer(new ASCIIKeyBuilderFactory(INITIAL_CAPACITY)));  return (CounterSetBTree)BTree.create(store,metadata);}  }
class C{  PackedBuffer(ByteBuffer bb){  this.bb=bb;  this.out=new PackedBufferOutput();  this.temp=new byte[SPAN_ID_BYTE_LENGTH];  this.packer=new MessagePacker(out,MSGPACK_CONF);}  }
class C{  public String toString(){  String ps="";  for (  Point2D p : points)   ps+=p + ";";  return ps;}  }
class C{  public boolean verbose(){  return soot.PhaseOptions.getBoolean(options,"verbose");}  }
class C{  public static SpeechletResponse newAskResponse(final OutputSpeech outputSpeech,final Reprompt reprompt,final Card card){  if (card == null) {    throw new IllegalArgumentException("Card cannot be null");  }  SpeechletResponse response=newAskResponse(outputSpeech,reprompt);  response.setCard(card);  return response;}  }
class C{  @NoWarning("NP") int fp1(int level){  Object x=null;  if (level > 0)   x=new Object();  if (level > 4)   return x.hashCode();  return 0;}  }
class C{  private StoragePort selectStoragePort(List<StoragePort> spList){  Collections.shuffle(spList);  return spList.get(0);}  }
class C{  public static boolean isPotentialLocalEmergencyNumber(String number,Context context){  return isLocalEmergencyNumberInternal(number,context,false);}  }
class C{  public static long[] remove(long[] buffer,int offset,int length){  int len2=buffer.length - length;  long temp[]=new long[len2];  System.arraycopy(buffer,0,temp,0,offset);  System.arraycopy(buffer,offset + length,temp,offset,len2 - offset);  return temp;}  }
class C{  public void clear(){  this.rowKeys.clear();  this.columnKeys.clear();  this.rows.clear();}  }
class C{  public void close() throws IOException {  finish();  out.close();}  }
class C{  @ModelAttribute public void addDataToModel(ModelMap model){  SearchData dataForSearchBar=new SearchData();  dataForSearchBar.setSearchMode("natural");  dataForSearchBar.setCurrentPage(1);  dataForSearchBar.setQueryText(null);  dataForSearchBar.setNumberResultsPerPage(10);  model.put("advancedSearchData",dataForSearchBar);}  }
class C{  private void transform(byte[] block,int offset){  for (int i=0; i < 16; i++)   X[i]=(block[offset++] & 0xFF) | (block[offset++] & 0xFF) << 8 | (block[offset++] & 0xFF) << 16 | (block[offset++] & 0xFF) << 24;  int A=context[0];  int B=context[1];  int C=context[2];  int D=context[3];  A=FF(A,B,C,D,X[0],3);  D=FF(D,A,B,C,X[1],7);  C=FF(C,D,A,B,X[2],11);  B=FF(B,C,D,A,X[3],19);  A=FF(A,B,C,D,X[4],3);  D=FF(D,A,B,C,X[5],7);  C=FF(C,D,A,B,X[6],11);  B=FF(B,C,D,A,X[7],19);  A=FF(A,B,C,D,X[8],3);  D=FF(D,A,B,C,X[9],7);  C=FF(C,D,A,B,X[10],11);  B=FF(B,C,D,A,X[11],19);  A=FF(A,B,C,D,X[12],3);  D=FF(D,A,B,C,X[13],7);  C=FF(C,D,A,B,X[14],11);  B=FF(B,C,D,A,X[15],19);  A=GG(A,B,C,D,X[0],3);  D=GG(D,A,B,C,X[4],5);  C=GG(C,D,A,B,X[8],9);  B=GG(B,C,D,A,X[12],13);  A=GG(A,B,C,D,X[1],3);  D=GG(D,A,B,C,X[5],5);  C=GG(C,D,A,B,X[9],9);  B=GG(B,C,D,A,X[13],13);  A=GG(A,B,C,D,X[2],3);  D=GG(D,A,B,C,X[6],5);  C=GG(C,D,A,B,X[10],9);  B=GG(B,C,D,A,X[14],13);  A=GG(A,B,C,D,X[3],3);  D=GG(D,A,B,C,X[7],5);  C=GG(C,D,A,B,X[11],9);  B=GG(B,C,D,A,X[15],13);  A=HH(A,B,C,D,X[0],3);  D=HH(D,A,B,C,X[8],9);  C=HH(C,D,A,B,X[4],11);  B=HH(B,C,D,A,X[12],15);  A=HH(A,B,C,D,X[2],3);  D=HH(D,A,B,C,X[10],9);  C=HH(C,D,A,B,X[6],11);  B=HH(B,C,D,A,X[14],15);  A=HH(A,B,C,D,X[1],3);  D=HH(D,A,B,C,X[9],9);  C=HH(C,D,A,B,X[5],11);  B=HH(B,C,D,A,X[13],15);  A=HH(A,B,C,D,X[3],3);  D=HH(D,A,B,C,X[11],9);  C=HH(C,D,A,B,X[7],11);  B=HH(B,C,D,A,X[15],15);  context[0]+=A;  context[1]+=B;  context[2]+=C;  context[3]+=D;}  }
class C{  public KeyInfoReference itemKeyInfoReference(int i) throws XMLSecurityException {  Element e=XMLUtils.selectDs11Node(this.constructionElement.getFirstChild(),Constants._TAG_KEYINFOREFERENCE,i);  if (e != null) {    return new KeyInfoReference(e,this.baseURI);  }  return null;}  }
class C{  public void test_getInnerCause01_find_exact(){  Throwable t=new RuntimeException();  assertTrue(t == getInnerCause(t,RuntimeException.class));}  }
class C{  private void genPreambleImports() throws JasperException {  Iterator<String> iter=pageInfo.getImports().iterator();  while (iter.hasNext()) {    out.printin("import ");    out.print(iter.next());    out.println(";");  }  out.println();}  }
class C{  int checkBlockLine(int[] par1ArrayOfInteger,int[] par2ArrayOfInteger){  int[] var3=new int[]{0,0,0};  byte var4=0;  byte var5;  for (var5=0; var4 < 3; ++var4) {    var3[var4]=par2ArrayOfInteger[var4] - par1ArrayOfInteger[var4];    if (Math.abs(var3[var4]) > Math.abs(var3[var5])) {      var5=var4;    }  }  if (var3[var5] == 0) {    return -1;  } else {    byte var6=otherCoordPairs[var5];    byte var7=otherCoordPairs[var5 + 3];    byte var8;    if (var3[var5] > 0) {      var8=1;    } else {      var8=-1;    }    double var9=(double)var3[var6] / (double)var3[var5];    double var11=(double)var3[var7] / (double)var3[var5];    int[] var13=new int[]{0,0,0};    int var14=0;    int var15;    for (var15=var3[var5] + var8; var14 != var15; var14+=var8) {      var13[var5]=par1ArrayOfInteger[var5] + var14;      var13[var6]=MathHelper.floor_double((double)par1ArrayOfInteger[var6] + (double)var14 * var9);      var13[var7]=MathHelper.floor_double((double)par1ArrayOfInteger[var7] + (double)var14 * var11);      Block var16=this.worldObj.getBlock(var13[0],var13[1],var13[2]);      if (var16 != Blocks.air && var16 != Blocks.leaves) {        break;      }    }    return var14 == var15 ? -1 : Math.abs(var14);  }}  }
class C{  public UplevelReference noteReference(Environment env,LocalMember target){  int targetScopeNumber=!isInScope(target) ? -1 : target.scopeNumber;  UplevelReference res=null;  int currentFrameNumber=-1;  for (Context refctx=this; refctx != null; refctx=refctx.prev) {    if (currentFrameNumber == refctx.frameNumber) {      continue;    }    currentFrameNumber=refctx.frameNumber;    if (targetScopeNumber >= currentFrameNumber) {      break;    }    ClassDefinition refc=refctx.field.getClassDefinition();    UplevelReference r=refc.getReference(target);    r.noteReference(env,refctx);    if (res == null) {      res=r;    }  }  return res;}  }
class C{  public static List<String> readLines(File file,String charset) throws IOException {  return IOGroovyMethods.readLines(newReader(file,charset));}  }
class C{  protected void addValuePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_TypeConstraint_value_feature"),getString("_UI_PropertyDescriptor_description","_UI_TypeConstraint_value_feature","_UI_TypeConstraint_type"),TypesPackage.Literals.TYPE_CONSTRAINT__VALUE,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public AddWorkingSetModificationStrategy(final IWorkingSet toAdd){  this(toAdd,APPEND_TO_END_INDEX,APPEND_TO_END_INDEX);}  }
class C{  protected void processCloudletCancel(int cloudletId,int userId,int vmId,int containerId){  Cloudlet cl=getVmAllocationPolicy().getHost(vmId,userId).getContainerVm(vmId,userId).getContainer(containerId,userId).getContainerCloudletScheduler().cloudletCancel(cloudletId);  sendNow(userId,CloudSimTags.CLOUDLET_CANCEL,cl);}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) synchronized public ICounterNode detach(final String path){  final ICounterNode node=getPath(path);  if (node != null && !node.isRoot()) {    final CounterSet p=(CounterSet)node.getParent();    p.children.remove(node.getName());    if (node.isCounterSet()) {      ((CounterSet)node).parent=null;    } else {      ((Counter)node).parent=null;    }  }  return node;}  }
class C{  public void removeComment(){  comment=null;}  }
class C{  private final ArrayList<Move> movesToSearch(SearchRequest sr){  ArrayList<Move> moves=null;  ArrayList<Move> legalMoves=new MoveGen().legalMoves(sr.currPos);  if (engineOptions.rootProbe)   moves=Probe.getInstance().removeNonOptimal(sr.currPos,legalMoves);  if (moves != null) {    sr.searchMoves=moves;  } else {    moves=legalMoves;    sr.searchMoves=null;  }  return moves;}  }
class C{  public static CCJumpTiles3D action(int j,float amp,ccGridSize gridSize,float d){  return new CCJumpTiles3D(j,amp,gridSize,d);}  }
class C{  public static List<NotificationDto> transformToDto(List<Notification> notifications){  if (notifications == null) {    throw new WebApplicationException("Null entity object cannot be converted to Dto object.",Status.INTERNAL_SERVER_ERROR);  }  List<NotificationDto> result=new ArrayList<NotificationDto>();  for (  Notification notification : notifications) {    result.add(transformToDto(notification));  }  return result;}  }
class C{  public void add(ITicket ticket){  if (tickets.contains(ticket)) {    return;  }  tickets.add(ticket);  tick|=ticket.shouldTick();}  }
class C{  public boolean isBoolean(){  return type == BOOLEAN;}  }
class C{  public static void checkForDuplicateNames(Map<String,Boolean> isDuplicateName,Cursor cursor,int nameIndex){  isDuplicateName.clear();  cursor.moveToPosition(-1);  while (cursor.moveToNext()) {    String displayName=cursor.getString(nameIndex);    if (displayName != null) {      isDuplicateName.put(displayName,isDuplicateName.containsKey(displayName));    }  }}  }
class C{  Object processNMTOKEN(StylesheetHandler handler,String uri,String name,String rawName,String value,ElemTemplateElement owner) throws org.xml.sax.SAXException {  if (getSupportsAVT()) {    try {      AVT avt=new AVT(handler,uri,name,rawName,value,owner);      if ((avt.isSimple()) && (!XML11Char.isXML11ValidNmtoken(value))) {        handleError(handler,XSLTErrorResources.INVALID_NMTOKEN,new Object[]{name,value},null);        return null;      }      return avt;    } catch (    TransformerException te) {      throw new org.xml.sax.SAXException(te);    }  } else {    if (!XML11Char.isXML11ValidNmtoken(value)) {      handleError(handler,XSLTErrorResources.INVALID_NMTOKEN,new Object[]{name,value},null);      return null;    }  }  return value;}  }
class C{  public boolean isStableNumber(){  return true;}  }
class C{  public String toString(){  StringBuffer retval=new StringBuffer("CDS:");  retval.append(vals.length).append("[");  for (int i=0; i < vals.length; i++) {    retval.append("(");    for (int j=0; j < vals[i].length; j++)     retval.append(vals[i][j]).append(", ");    retval.append(") ");  }  retval.append("]");  return retval.toString();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected void paintText(SeaGlassContext ss,Graphics g,int tabPlacement,Font font,FontMetrics metrics,int tabIndex,String title,Rectangle textRect,boolean isSelected){  g.setFont(font);  View v=getTextViewForTab(tabIndex);  if (v != null) {    v.paint(g,textRect);  } else {    int mnemIndex=tabPane.getDisplayedMnemonicIndexAt(tabIndex);    FontMetrics fm=SwingUtilities2.getFontMetrics(tabPane,g);    title=SwingUtilities2.clipStringIfNecessary(tabPane,fm,title,textRect.width);    g.setColor(ss.getStyle().getColor(ss,ColorType.TEXT_FOREGROUND));    ss.getStyle().getGraphicsUtils(ss).paintText(ss,g,title,textRect,mnemIndex);  }}  }
class C{  public static GT gt(final BackendKey key){  return new GT(key);}  }
class C{  public NotificationChain basicSetEntryAction(Step newEntryAction,NotificationChain msgs){  Step oldEntryAction=entryAction;  entryAction=newEntryAction;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SexecPackage.EXECUTION_FLOW__ENTRY_ACTION,oldEntryAction,newEntryAction);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  protected final void readBorder(final Element element){  final Element borderElement=LwXmlReader.getRequiredChild(element,UIFormXmlConstants.ELEMENT_BORDER);  setBorderType(BorderType.valueOf(LwXmlReader.getRequiredString(borderElement,UIFormXmlConstants.ATTRIBUTE_TYPE)));  StringDescriptor descriptor=LwXmlReader.getStringDescriptor(borderElement,UIFormXmlConstants.ATTRIBUTE_TITLE,UIFormXmlConstants.ATTRIBUTE_TITLE_RESOURCE_BUNDLE,UIFormXmlConstants.ATTRIBUTE_TITLE_KEY);  if (descriptor != null) {    setBorderTitle(descriptor);  }  myBorderTitleJustification=LwXmlReader.getOptionalInt(borderElement,UIFormXmlConstants.ATTRIBUTE_TITLE_JUSTIFICATION,0);  myBorderTitlePosition=LwXmlReader.getOptionalInt(borderElement,UIFormXmlConstants.ATTRIBUTE_TITLE_POSITION,0);  Element fontElement=LwXmlReader.getChild(borderElement,UIFormXmlConstants.ELEMENT_FONT);  if (fontElement != null) {    myBorderTitleFont=LwXmlReader.getFontDescriptor(fontElement);  }  myBorderTitleColor=LwXmlReader.getOptionalColorDescriptor(LwXmlReader.getChild(borderElement,UIFormXmlConstants.ELEMENT_TITLE_COLOR));  myBorderColor=LwXmlReader.getOptionalColorDescriptor(LwXmlReader.getChild(borderElement,UIFormXmlConstants.ELEMENT_COLOR));  Element sizeElement=LwXmlReader.getChild(borderElement,UIFormXmlConstants.ELEMENT_SIZE);  if (sizeElement != null) {    try {      myBorderSize=LwXmlReader.readInsets(sizeElement);    } catch (    Exception e) {      myBorderSize=null;    }  }}  }
class C{  @Override public void activeBecomeBackup() throws IOException {synchronized (metaRef) {    logger.info("[becomeBackup]");    ReplicationStoreMeta metaDup=dupReplicationStoreMeta();    metaDup.setBeginOffset(metaDup.getKeeperBeginOffset());    metaDup.setMasterRunid(metaDup.getKeeperRunid());    metaDup.setKeeperState(KeeperState.BACKUP);    saveMeta(metaDup);  }}  }
class C{  private List<Quadrant> findContainingQuadrants(Rect firstRect,Rect secondRect){  List<Quadrant> quadrants=new ArrayList<>();  int radiusX=(firstRect.right - firstRect.left) / 2;  int radiusY=(firstRect.bottom - firstRect.top) / 2;  for (  Quadrant quadrant : Quadrant.values()) {    int x=firstRect.centerX() + quadrant.getxSign() * radiusX;    int y=firstRect.centerY() + quadrant.getySign() * radiusY;    Rect quadrantRect=new Rect(Math.min(x,firstRect.centerX()),Math.min(y,firstRect.centerY()),Math.max(firstRect.centerX(),x),Math.max(firstRect.centerY(),y));    if (secondRect.contains(quadrantRect)) {      quadrants.add(quadrant);    }  }  return quadrants;}  }
class C{  @Override public Builder<K,V> putAll(K key,Iterable<? extends V> values){  super.putAll(key,values);  return this;}  }
class C{  public static JSONObject toJSONObject(String string) throws JSONException {  JSONObject jo=new JSONObject();  XMLTokener x=new XMLTokener(string);  while (x.more() && x.skipPast("<")) {    parse(x,jo,null);  }  return jo;}  }
class C{  public boolean isPhantomClass(){  return Scene.v().getPhantomClasses().contains(this);}  }
class C{  public void updateStatus(JobContext jobContext) throws Exception {  JobStatus jobStatus=getJobStatus();  try {    DbClient dbClient=jobContext.getDbClient();    if (jobStatus == Job.JobStatus.IN_PROGRESS) {      return;    } else     if (jobStatus == JobStatus.SUCCESS) {      String opId=_metaVolumeTaskCompleter.getVolumeTaskCompleter().getOpId();      WorkflowService.getInstance().storeStepData(opId,new ArrayList<String>());      _metaHead.getMetaVolumeMembers().clear();      dbClient.persistObject(_metaHead);    }  } catch (  Exception e) {    _log.error("Caught an exception while trying to process status for " + this.getJobName(),e);    setPostProcessingErrorStatus("Encountered an internal error during " + this.getJobName() + " job status processing : "+ e.getMessage());  } finally {    _metaVolumeTaskCompleter.setLastStepStatus(jobStatus);    if (_isLastJob) {      super.updateStatus(jobContext);    } else {      if (isJobInTerminalFailedState()) {        super.updateStatus(jobContext);      }    }  }}  }
class C{  private void handleInterruption(){}  }
class C{  public ImageException(String message,ImageExceptionBean bean){  super(message,bean);  this.bean=bean;}  }
class C{  public NonreceiverTerm(Type type,Object value){  if (type == null) {    throw new IllegalArgumentException("type should not be null.");  }  if (type.isVoid()) {    throw new IllegalArgumentException("type should not be void.");  }  if (type.isPrimitive() || type.isBoxedPrimitive()) {    if (value == null) {      if (type.isPrimitive()) {        throw new IllegalArgumentException("primitive-like values cannot be null.");      }    } else {      if (!type.isAssignableFromTypeOf(value)) {        throw new IllegalArgumentException("value.getClass()=" + value.getClass() + ",type="+ type);      }      if (!NonreceiverTerm.isNonreceiverType(value.getClass())) {        throw new IllegalArgumentException("value is not a primitive-like value.");      }    }  } else   if (type.isString()) {    if (value != null && !Value.stringLengthOK((String)value)) {      throw new IllegalArgumentException("String too long, length = " + ((String)value).length());    }  } else   if (!type.equals(JavaTypes.CLASS_TYPE)) {    if (value != null) {      throw new IllegalArgumentException("value must be null for non-primitive, non-string type " + type + " but was "+ value);    }  }  this.type=type;  this.value=value;}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/snapshots") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.ANY}) public TaskList createSnapshot(@PathParam("id") URI id,VolumeSnapshotParam param) throws InternalException {  ArgValidator.checkFieldUriType(id,Volume.class,"id");  Volume requestedVolume=queryVolumeResource(id);  VolumeIngestionUtil.checkOperationSupportedOnIngestedVolume(requestedVolume,ResourceOperationTypeEnum.CREATE_VOLUME_SNAPSHOT,_dbClient);  BlockServiceUtils.validateNotAnInternalBlockObject(requestedVolume,false);  if (param.getType() == null) {    param.setType(TechnologyType.NATIVE.toString());  }  String snapshotType=param.getType();  validateSourceVolumeHasExported(requestedVolume);  checkForPendingTasks(Arrays.asList(requestedVolume.getTenant().getURI()),Arrays.asList(requestedVolume));  validateCGIsNotInApplication(requestedVolume,snapshotType);  Boolean createInactive=Boolean.FALSE;  if (param.getCreateInactive() != null) {    createInactive=param.getCreateInactive();  }  Boolean readOnly=Boolean.FALSE;  if (param.getReadOnly() != null) {    readOnly=param.getReadOnly();  }  BlockServiceApi blockServiceApiImpl=getBlockServiceImpl(requestedVolume);  List<Volume> volumesToSnap=new ArrayList<Volume>();  volumesToSnap.addAll(blockServiceApiImpl.getVolumesToSnap(requestedVolume,snapshotType));  String snapshotNamePattern=param.getName();  String snapshotName=TimeUtils.formatDateForCurrent(snapshotNamePattern);  blockServiceApiImpl.validateCreateSnapshot(requestedVolume,volumesToSnap,snapshotType,snapshotName,getFullCopyManager());  String taskId=UUID.randomUUID().toString();  List<URI> snapshotURIs=new ArrayList<URI>();  List<BlockSnapshot> snapshots=blockServiceApiImpl.prepareSnapshots(volumesToSnap,snapshotType,snapshotName,snapshotURIs,taskId);  TaskList response=new TaskList();  for (  BlockSnapshot snapshot : snapshots) {    response.getTaskList().add(toTask(snapshot,taskId));  }  _dbClient.createTaskOpStatus(Volume.class,requestedVolume.getId(),taskId,ResourceOperationTypeEnum.CREATE_VOLUME_SNAPSHOT);  blockServiceApiImpl.createSnapshot(requestedVolume,snapshotURIs,snapshotType,createInactive,readOnly,taskId);  auditOp(OperationTypeEnum.CREATE_VOLUME_SNAPSHOT,true,AuditLogManager.AUDITOP_BEGIN,snapshotName,requestedVolume.getId().toString());  return response;}  }
class C{  public void emitLdc(int od){  if (od <= 255) {    emitop1(ldc1,od);  } else {    emitop2(ldc2,od);  }}  }
class C{  private long computeEndTime(long timeout){  long endTime=U.currentTimeMillis() + timeout;  if (endTime < 0)   endTime=Long.MAX_VALUE;  return endTime;}  }
class C{  public final void cdata(char ch[],int start,int length) throws org.xml.sax.SAXException {  if ((null != m_elemContext.m_elementName) && (m_elemContext.m_elementName.equalsIgnoreCase("SCRIPT") || m_elemContext.m_elementName.equalsIgnoreCase("STYLE"))) {    try {      if (m_elemContext.m_startTagOpen) {        closeStartTag();        m_elemContext.m_startTagOpen=false;      }      m_ispreserve=true;      if (shouldIndent())       indent();      writeNormalizedChars(ch,start,length,true,m_lineSepUse);    } catch (    IOException ioe) {      throw new org.xml.sax.SAXException(Utils.messages.createMessage(MsgKey.ER_OIERROR,null),ioe);    }  } else {    super.cdata(ch,start,length);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.EXPRESSION_STATEMENT__EXPRESSION:    return expression != null;}return super.eIsSet(featureID);}  }
class C{  public boolean supportsBearing(){  return mProperties.mSupportsBearing;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdatareplacedatamiddle.class,args);}  }
class C{  @SuppressWarnings("unchecked") public <T extends Actor>T createProxyActor(T base){  checkNotNull(base);  if (base instanceof Player) {    Player player=(Player)base;    Player permActor=queryCapability(Capability.PERMISSIONS).matchPlayer(player);    if (permActor == null) {      permActor=player;    }    Player cuiActor=queryCapability(Capability.WORLDEDIT_CUI).matchPlayer(player);    if (cuiActor == null) {      cuiActor=player;    }    try {      Class<?> clazz=Class.forName("com.sk89q.worldedit.extension.platform.PlayerProxy");      Constructor<?> constructor=clazz.getDeclaredConstructor(Player.class,Actor.class,Actor.class,World.class);      constructor.setAccessible(true);      return (T)constructor.newInstance(player,permActor,cuiActor,getWorldForEditing(player.getWorld()));    } catch (    Throwable e) {      throw new RuntimeException(e);    }  } else {    return base;  }}  }
class C{  public SortedEigenPairs copy(){  SortedEigenPairs cp=new SortedEigenPairs();  cp.eigenPairs=this.eigenPairs.clone();  return cp;}  }
class C{  @Override public String toAscii(){  checkIntegrity();  if (columns.isEmpty()) {    if (titles != null && titles.isEmpty()) {      return "";    }    if (titles == null) {      return "";    }  }  String computeBorder=getBorderLine();  String beginBorderLine;  String endBorderLine;  if (computeBorder != null) {    beginBorderLine=new StringBuilder(computeBorder).append("\n").toString();    endBorderLine=computeBorder;  } else {    beginBorderLine="";    endBorderLine="";  }  StringBuilder buffer=new StringBuilder(beginBorderLine);  String formatter=getFormatter();  String titleFormatter=getTitleFormatter();  if (titles != null) {    buffer.append(String.format(titleFormatter,(Object[])titles.toArray(new String[titles.size()])));    buffer.append(beginBorderLine);  }  if (!columns.isEmpty()) {    int nbRows=columns.get(0).size();    for (int row=0; row < nbRows; row++) {      buffer.append(String.format(formatter,(Object[])getRow(row)));    }    buffer.append(endBorderLine);  }  return buffer.toString();}  }
class C{  public void addDataSources(final int numDataSources){  int currentIndex=dataset.getColumnCount();  for (int i=0; i < numDataSources; i++) {    addColumn(currentIndex + i);  }}  }
class C{  protected void drawArrow(Canvas canvas){  if (jumpPoint.x != -1) {    canvas.drawCircle(jumpPoint.x,jumpPoint.y,smallRadius,smallPaint);  }  if (bezier) {    arrowPath.reset();    arrowPath.moveTo(c.x,c.y);    arrowPath.quadTo(e.x,e.y,d.x,d.y);    canvas.drawPath(arrowPath,arrowPaint);  } else   if (isLoading) {  } else   if (isCompleted) {  } else   if (isEnd) {    canvas.drawCircle(x,y,radius,loadingPaint);    drawArrowOrHook(canvas);  } else {    arrowPath.reset();    arrowPath.moveTo(a.x,a.y);    arrowPath.lineTo(b.x,b.y);    canvas.drawPath(arrowPath,arrowPaint);    canvas.drawCircle(a.x,a.y,smallRadius,smallPaint);    canvas.drawCircle(b.x,b.y,smallRadius,smallPaint);    drawArrowOrHook(canvas);  }}  }
class C{  public NoiseTagLdaModel(InputStream in) throws IOException {  GZIPInputStream zipin=new GZIPInputStream(in);  BufferedInputStream bin=new BufferedInputStream(zipin);  DataInputStream datain=new DataInputStream(bin);  numTopics=datain.readInt();  int numWords=datain.readInt();  alpha=datain.readDouble();  beta=datain.readDouble();  locked=datain.readBoolean();  wnz=new int[numTopics];  Arrays.fill(wnz,0);  for (int i=0; i < numWords; i++) {    String word=datain.readUTF();    int[] count=new int[numTopics];    for (int j=0; j < numTopics; j++) {      count[j]=datain.readInt();      wnz[j]+=count[j];      nw+=count[j];    }    nwz.put(word,count);  }  tnz=new int[numTopics + 1];  Arrays.fill(tnz,0);  int numTags=datain.readInt();  eta=datain.readDouble();  for (int i=0; i < numTags; i++) {    String word=datain.readUTF();    int[] count=new int[numTopics + 1];    for (int j=0; j < numTopics + 1; j++) {      count[j]=datain.readInt();      tnz[j]+=count[j];      nt+=count[j];    }    ntz.put(word,count);  }  noise=numTopics;}  }
class C{  public static mxFibonacciHeap union(mxFibonacciHeap h1,mxFibonacciHeap h2){  mxFibonacciHeap h=new mxFibonacciHeap();  if ((h1 != null) && (h2 != null)) {    h.min=h1.min;    if (h.min != null) {      if (h2.min != null) {        h.min.right.left=h2.min.left;        h2.min.left.right=h.min.right;        h.min.right=h2.min;        h2.min.left=h.min;        if (h2.min.key < h1.min.key) {          h.min=h2.min;        }      }    } else {      h.min=h2.min;    }    h.size=h1.size + h2.size;  }  return h;}  }
class C{  public Term withOption(String optionName,String optionValue){  Map<String,String> newOptions=ImmutableMap.<String,String>builder().putAll(options).put(optionName,optionValue).build();  return new Term(identifier,newOptions);}  }
class C{  public double phi(double element){  this.sort();  return cern.jet.stat.Descriptive.rankInterpolated(buffer,element) / this.size();}  }
class C{  public static int initTex(){  if (DEBUG)   Log.v(TAG,"initTex:");  return genSurfaceTextureID();}  }
class C{  @TargetApi(Build.VERSION_CODES.JELLY_BEAN) private int queueInputBuffer(MediaCodec codec,ByteBuffer[] inputBuffers,int index,SpeechRecord speechRecord){  if (speechRecord == null || speechRecord.getRecordingState() != SpeechRecord.RECORDSTATE_RECORDING) {    return -1;  }  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {    ByteBuffer inputBuffer=inputBuffers[index];    inputBuffer.clear();    int size=inputBuffer.limit();    byte[] buffer=new byte[size];    int status=read(speechRecord,buffer);    if (status < 0) {      handleError("status = " + status);      return -1;    }    inputBuffer.put(buffer);    codec.queueInputBuffer(index,0,size,0,0);    return size;  }  return -1;}  }
class C{  @Override public Object createFromString(EDataType eDataType,String initialValue){switch (eDataType.getClassifierID()) {case N4JSPackage.VARIABLE_STATEMENT_KEYWORD:    return createVariableStatementKeywordFromString(eDataType,initialValue);case N4JSPackage.PROPERTY_NAME_KIND:  return createPropertyNameKindFromString(eDataType,initialValue);case N4JSPackage.POSTFIX_OPERATOR:return createPostfixOperatorFromString(eDataType,initialValue);case N4JSPackage.UNARY_OPERATOR:return createUnaryOperatorFromString(eDataType,initialValue);case N4JSPackage.MULTIPLICATIVE_OPERATOR:return createMultiplicativeOperatorFromString(eDataType,initialValue);case N4JSPackage.ADDITIVE_OPERATOR:return createAdditiveOperatorFromString(eDataType,initialValue);case N4JSPackage.RELATIONAL_OPERATOR:return createRelationalOperatorFromString(eDataType,initialValue);case N4JSPackage.EQUALITY_OPERATOR:return createEqualityOperatorFromString(eDataType,initialValue);case N4JSPackage.BINARY_BITWISE_OPERATOR:return createBinaryBitwiseOperatorFromString(eDataType,initialValue);case N4JSPackage.BINARY_LOGICAL_OPERATOR:return createBinaryLogicalOperatorFromString(eDataType,initialValue);case N4JSPackage.SHIFT_OPERATOR:return createShiftOperatorFromString(eDataType,initialValue);case N4JSPackage.ASSIGNMENT_OPERATOR:return createAssignmentOperatorFromString(eDataType,initialValue);case N4JSPackage.N4_MODIFIER:return createN4ModifierFromString(eDataType,initialValue);case N4JSPackage.ITERATOR_OF_STATEMENT:return createIteratorOfStatementFromString(eDataType,initialValue);case N4JSPackage.ITERATOR_OF_RETURN_STATEMENT:return createIteratorOfReturnStatementFromString(eDataType,initialValue);default :throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");}}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    int offs=target.getCaretPosition();    boolean failed=false;    try {      Element curPara=Utilities.getParagraphElement(target,offs);      offs=Utilities.getPreviousWord(target,offs);      if (offs < curPara.getStartOffset()) {        offs=Utilities.getParagraphElement(target,offs).getEndOffset() - 1;      }    } catch (    BadLocationException bl) {      if (offs != 0) {        offs=0;      } else {        failed=true;      }    }    if (!failed) {      if (select) {        target.moveCaretPosition(offs);      } else {        target.setCaretPosition(offs);      }    } else {      UIManager.getLookAndFeel().provideErrorFeedback(target);    }  }}  }
class C{  public long maxTransferTime(long size,long kBps){  long transferTout=((size) / kBps) * 8 * 1000;  return transferTout > 3000 ? transferTout : 3000;}  }
class C{  public float aspectRatio(){  return (float)width / height;}  }
class C{  public List<FileHandler> fileHandlers(){  return subresources().fileHandlers();}  }
class C{  private void paintForeground(SynthContext ctx,Graphics g,int x,int y,int w,int h,AffineTransform transform){  SeaGlassPainter foregroundPainter=style.getForegroundPainter(ctx);  if (foregroundPainter != null) {    paint(foregroundPainter,ctx,g,x,y,w,h,transform);  }}  }
class C{  public int discretizeX(double position){  int i=(int)(position * oneOverSpaceWidth * trapGridWidth);  if (toroidalWorld)   return (i + trapGridWidth) % trapGridWidth;  i+=2 * trapGridWidth;  i%=(2 * trapGridWidth);  if (i < trapGridWidth)   return i;  return trapGridWidth - i;}  }
class C{  public static Test suite(){  return new TestSuite(TestPolynomial.class);}  }
class C{  public boolean add(E e){  if (offer(e))   return true; else   throw new IllegalStateException("Queue full");}  }
class C{  public void testBug73070() throws Exception {  if (!this.isSetForFabricTest) {    return;  }  this.conn=(FabricMySQLConnection)getNewDefaultDataSource().getConnection(this.username,this.password);  this.conn.setServerGroupName("fabric_test1_global");  this.conn.createStatement().executeUpdate("drop procedure if exists bug73070");  this.conn.createStatement().executeUpdate("create procedure bug73070(in x integer) select x");  CallableStatement stmt=this.conn.prepareCall("{call bug73070(?)}");  stmt.setInt(1,42);  ResultSet rs=stmt.executeQuery();  rs.next();  assertEquals(42,rs.getInt(1));  rs.close();  stmt.close();  this.conn.createStatement().executeUpdate("drop procedure bug73070");  this.conn.close();}  }
class C{  public String toString(boolean freq){  String result=m_attribute.name() + "=" + m_attribute.value(m_valueIndex);  if (freq) {    result+=":" + m_frequency;  }  return result;}  }
class C{  private boolean acceptsTypeArguments(Declaration dec,Type receiverType,List<Type> typeArguments,Tree.TypeArguments tas,Node parent){  boolean explicit=tas instanceof Tree.TypeArgumentList;  boolean typeExpression=parent instanceof Tree.SimpleType;  if (explicit && !typeExpression) {    Tree.TypeArgumentList tal=(Tree.TypeArgumentList)tas;    for (    Tree.Type t : tal.getTypes()) {      if (t instanceof Tree.StaticType) {        Tree.StaticType st=(Tree.StaticType)t;        Tree.TypeVariance var=st.getTypeVariance();        if (var != null) {          var.addError("use-site variance annotation may not occur in value expression");        }      }    }  }  if (dec == null) {    return false;  } else   if (isGeneric(dec)) {    if (typeArguments == null) {      return false;    } else {      return checkTypeArgumentAgainstDeclaration(receiverType,dec,typeArguments,tas,parent);    }  } else {    boolean empty=typeArguments == null || typeArguments.isEmpty();    if (dec instanceof TypeAlias && !empty) {      TypeAlias alias=(TypeAlias)dec;      dec=unwrapAliasedTypeConstructor(alias);      return checkTypeArgumentAgainstDeclaration(receiverType,dec,typeArguments,tas,parent);    }    if (dec instanceof Value && !empty) {      Value td=(Value)dec;      Type type=td.getType();      if (type != null) {        type=type.resolveAliases();        if (type.isTypeConstructor()) {          checkArgumentsAgainstTypeConstructor(typeArguments,tas,type,parent);          return true;        }      }    }    if (!empty || explicit) {      tas.addError("does not accept type arguments: '" + dec.getName(unit) + "' is not a generic declaration");    }    return empty;  }}  }
class C{  public StoreContext(ByteBuffer frameworkId,List<ByteBuffer> taskIds,List<ByteBuffer> taskNodes,List<ByteBuffer> pendingTasks,List<ByteBuffer> stagingTasks,List<ByteBuffer> activeTasks,List<ByteBuffer> lostTasks,List<ByteBuffer> killableTasks){  this.frameworkId=frameworkId;  this.taskIds=taskIds;  this.taskNodes=taskNodes;  this.pendingTasks=pendingTasks;  this.stagingTasks=stagingTasks;  this.activeTasks=activeTasks;  this.lostTasks=lostTasks;  this.killableTasks=killableTasks;}  }
class C{  public long count(){  return xStats.count();}  }
class C{  int balance(){switch (opc) {case opc_dead:case opc_label:case opc_iinc:case opc_arraylength:case opc_laload:case opc_daload:case opc_nop:case opc_ineg:case opc_fneg:case opc_lneg:case opc_dneg:case opc_i2f:case opc_f2i:case opc_l2d:case opc_d2l:case opc_i2b:case opc_i2c:case opc_i2s:case opc_jsr:case opc_goto:case opc_jsr_w:case opc_goto_w:case opc_return:case opc_ret:case opc_instanceof:case opc_checkcast:case opc_newarray:case opc_anewarray:case opc_try:case opc_swap:    return 0;case opc_ldc:case opc_ldc_w:case opc_bipush:case opc_sipush:case opc_aconst_null:case opc_iconst_m1:case opc_iconst_0:case opc_iconst_1:case opc_iconst_2:case opc_iconst_3:case opc_iconst_4:case opc_iconst_5:case opc_fconst_0:case opc_fconst_1:case opc_fconst_2:case opc_iload:case opc_fload:case opc_aload:case opc_dup:case opc_dup_x1:case opc_dup_x2:case opc_i2l:case opc_i2d:case opc_f2l:case opc_f2d:case opc_new:  return 1;case opc_lload:case opc_dload:case opc_dup2:case opc_dup2_x1:case opc_dup2_x2:case opc_ldc2_w:case opc_lconst_0:case opc_lconst_1:case opc_dconst_0:case opc_dconst_1:return 2;case opc_istore:case opc_fstore:case opc_astore:case opc_iaload:case opc_faload:case opc_aaload:case opc_baload:case opc_caload:case opc_saload:case opc_pop:case opc_iadd:case opc_fadd:case opc_isub:case opc_fsub:case opc_imul:case opc_fmul:case opc_idiv:case opc_fdiv:case opc_irem:case opc_frem:case opc_ishl:case opc_ishr:case opc_iushr:case opc_lshl:case opc_lshr:case opc_lushr:case opc_iand:case opc_ior:case opc_ixor:case opc_l2i:case opc_l2f:case opc_d2i:case opc_d2f:case opc_ifeq:case opc_ifne:case opc_iflt:case opc_ifle:case opc_ifgt:case opc_ifge:case opc_ifnull:case opc_ifnonnull:case opc_fcmpl:case opc_fcmpg:case opc_ireturn:case opc_freturn:case opc_areturn:case opc_tableswitch:case opc_lookupswitch:case opc_athrow:case opc_monitorenter:case opc_monitorexit:return -1;case opc_lstore:case opc_dstore:case opc_pop2:case opc_ladd:case opc_dadd:case opc_lsub:case opc_dsub:case opc_lmul:case opc_dmul:case opc_ldiv:case opc_ddiv:case opc_lrem:case opc_drem:case opc_land:case opc_lor:case opc_lxor:case opc_if_acmpeq:case opc_if_acmpne:case opc_if_icmpeq:case opc_if_icmpne:case opc_if_icmplt:case opc_if_icmple:case opc_if_icmpgt:case opc_if_icmpge:case opc_lreturn:case opc_dreturn:return -2;case opc_iastore:case opc_fastore:case opc_aastore:case opc_bastore:case opc_castore:case opc_sastore:case opc_lcmp:case opc_dcmpl:case opc_dcmpg:return -3;case opc_lastore:case opc_dastore:return -4;case opc_multianewarray:return 1 - ((ArrayData)value).nargs;case opc_getfield:return ((MemberDefinition)value).getType().stackSize() - 1;case opc_putfield:return -1 - ((MemberDefinition)value).getType().stackSize();case opc_getstatic:return ((MemberDefinition)value).getType().stackSize();case opc_putstatic:return -((MemberDefinition)value).getType().stackSize();case opc_invokevirtual:case opc_invokespecial:case opc_invokeinterface:return ((MemberDefinition)value).getType().getReturnType().stackSize() - (((MemberDefinition)value).getType().stackSize() + 1);case opc_invokestatic:return ((MemberDefinition)value).getType().getReturnType().stackSize() - (((MemberDefinition)value).getType().stackSize());}throw new CompilerError("invalid opcode: " + toString());}  }
class C{  public void ifPresent(Consumer<? super T> consumer){  if (value != null)   consumer.accept(value);}  }
class C{  public boolean isSet(){  return true;}  }
class C{  public static void logout(Context context,String accessToken,AsyncHttpResponseHandler responseHandler){  List<Header> headerList=new ArrayList<Header>();  headerList.add(new BasicHeader(ApiKey.HeadKey.ACCESS_TOKEN,accessToken));  try {    post(context,getApiServerUrl() + USER_LOGOUT,headerList,null,responseHandler);  } catch (  UnsupportedEncodingException e) {    e.printStackTrace();    responseHandler.onFailure(INNER_ERROR_CODE,null,null,e);  }}  }
class C{  private void applyAttachedObject(FaceletContext ctx,UIComponent parent,String eventName){  ClientBehaviorHolder bHolder=(ClientBehaviorHolder)parent;  if (null == eventName) {    eventName=bHolder.getDefaultEventName();    if (null == eventName) {      throw new TagException(this.tag,"Event attribute could not be determined: " + eventName);    }  } else {    Collection<String> eventNames=bHolder.getEventNames();    if (!eventNames.contains(eventName)) {      throw new TagException(this.tag,getUnsupportedEventMessage(eventName,eventNames,parent));    }  }  AjaxBehavior ajaxBehavior=createAjaxBehavior(ctx,eventName);  bHolder.addClientBehavior(eventName,ajaxBehavior);  RenderKitUtils.installJsfJsIfNecessary(ctx.getFacesContext());}  }
class C{  private static File findShmemJar(Collection<Throwable> errs,String igniteHome){  File libs=new File(igniteHome,"libs");  if (!libs.exists() || libs.isFile()) {    errs.add(new IllegalStateException("Failed to find libs folder in resolved IGNITE_HOME: " + igniteHome));    return null;  }  for (  File lib : libs.listFiles()) {    if (lib.getName().endsWith(".jar") && lib.getName().contains(JAR_NAME_BASE))     return lib;  }  errs.add(new IllegalStateException("Failed to find shmem jar in resolved IGNITE_HOME: " + igniteHome));  return null;}  }
class C{  protected Double wrapKey(double k){  return new Double(k);}  }
class C{  private void connectTxHsc2SerialDevices(SerialInterface serialInterface,St950x0 eeprom,LcdDriver lcdDriver,IoPort[] txIoPorts){  SpiBus bus=new SpiBus("bus",serialInterface);  bus.addSlaveDevice(eeprom);  bus.addSlaveDevice(lcdDriver);  bus.connect();  Pin.interconnect(txIoPorts[IoPort.PORT_4].getPin(6),eeprom.getSelectPin());  Pin.interconnect(txIoPorts[IoPort.PORT_E].getPin(6),lcdDriver.getSelectPin());}  }
class C{  public void updateThroughput(long currentTime){  throughputCalculationLock.lock();  try {    int interval=(int)(currentTime - lastThroughputCalculationTime);    long minInterval=getThroughputCalculationIntervalInMillis();    if ((minInterval == 0) || (interval < minInterval)) {      return;    }    long readBytes=this.readBytes;    long writtenBytes=this.writtenBytes;    long readMessages=this.readMessages;    long writtenMessages=this.writtenMessages;    readBytesThroughput=(readBytes - lastReadBytes) * 1000.0 / interval;    writtenBytesThroughput=(writtenBytes - lastWrittenBytes) * 1000.0 / interval;    readMessagesThroughput=(readMessages - lastReadMessages) * 1000.0 / interval;    writtenMessagesThroughput=(writtenMessages - lastWrittenMessages) * 1000.0 / interval;    if (readBytesThroughput > largestReadBytesThroughput) {      largestReadBytesThroughput=readBytesThroughput;    }    if (writtenBytesThroughput > largestWrittenBytesThroughput) {      largestWrittenBytesThroughput=writtenBytesThroughput;    }    if (readMessagesThroughput > largestReadMessagesThroughput) {      largestReadMessagesThroughput=readMessagesThroughput;    }    if (writtenMessagesThroughput > largestWrittenMessagesThroughput) {      largestWrittenMessagesThroughput=writtenMessagesThroughput;    }    lastReadBytes=readBytes;    lastWrittenBytes=writtenBytes;    lastReadMessages=readMessages;    lastWrittenMessages=writtenMessages;    lastThroughputCalculationTime=currentTime;  }  finally {    throughputCalculationLock.unlock();  }}  }
class C{  private static Object add(final Object array,final int index,final Object element,final Class<?> clss){  if (array == null) {    if (index != 0) {      throw new IndexOutOfBoundsException("Index: " + index + ", Length: 0");    }    final Object joinedArray=Array.newInstance(clss,1);    Array.set(joinedArray,0,element);    return joinedArray;  }  final int length=Array.getLength(array);  if (index > length || index < 0) {    throw new IndexOutOfBoundsException("Index: " + index + ", Length: "+ length);  }  final Object result=Array.newInstance(clss,length + 1);  System.arraycopy(array,0,result,0,index);  Array.set(result,index,element);  if (index < length) {    System.arraycopy(array,index,result,index + 1,length - index);  }  return result;}  }
class C{  @Override public boolean touchOver(Object sender){  if (!mIsInteractionLocked && mTouchStatus != PLSceneElementTouchStatus.PLSceneElementTouchStatusOver) {    mTouchStatus=PLSceneElementTouchStatus.PLSceneElementTouchStatusOver;    return true;  }  return false;}  }
class C{  public Transaction(NetworkParameters params,byte[] msg,int offset,@Nullable Message parent,boolean parseLazy,boolean parseRetain,int length) throws ProtocolException {  super(params,msg,offset,parent,parseLazy,parseRetain,length);}  }
class C{  private static HadoopFileBlock split(boolean igfs,String file,long start,long len,String... hosts){  URI uri=URI.create((igfs ? "igfs://igfs@" : "hdfs://") + file);  return new HadoopFileBlock(hosts,uri,start,len);}  }
class C{  static JSONObject readJsonFromUrlWithCmsHeader(String url) throws MalformedURLException, IOException, JSONException {  InputStream is=null;  JSONObject jObj=new JSONObject();  try {    HttpURLConnection.setFollowRedirects(false);    HttpURLConnection con=(HttpURLConnection)new URL(url).openConnection();    con.setRequestMethod("GET");    con.setConnectTimeout(ParallecGlobalConfig.urlConnectionConnectTimeoutMillis);    con.setReadTimeout(ParallecGlobalConfig.urlConnectionReadTimeoutMillis);    is=con.getInputStream();    BufferedReader rd=new BufferedReader(new InputStreamReader(is,Charset.forName("UTF-8")));    String jsonText=PcFileNetworkIoUtils.readAll(rd);    jObj=new JSONObject(jsonText);    rd.close();  } catch (  Exception t) {    logger.error("readJsonFromUrl() exception: " + t.getLocalizedMessage() + PcDateUtils.getNowDateTimeStrStandard());  } finally {    if (is != null) {      is.close();    }  }  return jObj;}  }
class C{  public void test_getInstanceLjava_lang_String02(){  try {    KeyManagerFactory.getInstance(null);    fail("NoSuchAlgorithmException or NullPointerException should be thrown (algorithm is null");  } catch (  NoSuchAlgorithmException e) {  }catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      KeyManagerFactory.getInstance(invalidValues[i]);      fail("NoSuchAlgorithmException was not thrown as expected for algorithm: ".concat(invalidValues[i]));    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  public long headerChecksum(){  return this.header().checksum();}  }
class C{  public Matrix3f m21(float m21){  this.m21=m21;  return this;}  }
class C{  public static ConditionOperand LESS(){  return new ConditionOperand(LESS);}  }
class C{  public static void register(){  GameRegistry.registerBlock(BasicBlock,ItemBlockBasic.class,"BasicBlock");  GameRegistry.registerBlock(BasicBlock2,ItemBlockBasic.class,"BasicBlock2");  GameRegistry.registerBlock(MachineBlock,ItemBlockMachine.class,"MachineBlock");  GameRegistry.registerBlock(MachineBlock2,ItemBlockMachine.class,"MachineBlock2");  GameRegistry.registerBlock(MachineBlock3,ItemBlockMachine.class,"MachineBlock3");  GameRegistry.registerBlock(OreBlock,ItemBlockOre.class,"OreBlock");  GameRegistry.registerBlock(EnergyCube,ItemBlockEnergyCube.class,"EnergyCube");  GameRegistry.registerBlock(ObsidianTNT,"ObsidianTNT");  GameRegistry.registerBlock(BoundingBlock,"BoundingBlock");  GameRegistry.registerBlock(GasTank,ItemBlockGasTank.class,"GasTank");  GameRegistry.registerBlock(CardboardBox,ItemBlockCardboardBox.class,"CardboardBox");  GameRegistry.registerBlock(PlasticBlock,ItemBlockPlastic.class,"PlasticBlock");  GameRegistry.registerBlock(SlickPlasticBlock,ItemBlockPlastic.class,"SlickPlasticBlock");  GameRegistry.registerBlock(GlowPlasticBlock,ItemBlockPlastic.class,"GlowPlasticBlock");  GameRegistry.registerBlock(ReinforcedPlasticBlock,ItemBlockPlastic.class,"ReinforcedPlasticBlock");  GameRegistry.registerBlock(RoadPlasticBlock,ItemBlockPlastic.class,"RoadPlasticBlock");  GameRegistry.registerBlock(PlasticFence,ItemBlockPlastic.class,"PlasticFence");  GameRegistry.registerBlock(SaltBlock,"SaltBlock");}  }
class C{  public static Matrix4 tangoPoseToMatrix(TangoPoseData tangoPose){  Vector3 v=new Vector3(tangoPose.translation[0],tangoPose.translation[1],tangoPose.translation[2]);  Quaternion q=new Quaternion(tangoPose.rotation[3],tangoPose.rotation[0],tangoPose.rotation[1],tangoPose.rotation[2]);  q.conjugate();  Matrix4 m=new Matrix4();  m.setAll(v,new Vector3(1,1,1),q);  return m;}  }
class C{  @Override public int hashCode(){  return (int)((this.latlon & Integer.MAX_VALUE) >> 1) + (int)(this.latlon >> 33);}  }
class C{  public boolean isScriptingEnabled(){  return scriptingEnabled;}  }
class C{  private void filterKnownVolumes(StorageSystem system,DbClient dbClient,XtremIOClient xtremIOClient,String xioClusterName,Set<String> igVolumes) throws Exception {  Iterator<String> itr=igVolumes.iterator();  while (itr.hasNext()) {    String volumeName=itr.next();    XtremIOVolume xioVolume=xtremIOClient.getVolumeDetails(volumeName,xioClusterName);    String managedVolumeNativeGuid=NativeGUIDGenerator.generateNativeGuidForVolumeOrBlockSnapShot(system.getNativeGuid(),xioVolume.getVolInfo().get(0));    Volume dbVolume=DiscoveryUtils.checkStorageVolumeExistsInDB(dbClient,managedVolumeNativeGuid);    if (dbVolume != null) {      itr.remove();    }  }}  }
class C{  public boolean isShadowEnabled(){  if (shadowMap == null) {    return (false);  }  return (shadowMap.getEnabled());}  }
class C{  public void resumeTraceSession(int traceSessionId) throws SQLException {  try (FbService service=attachServiceManager()){    service.startServiceAction(getTraceSPB(service,isc_action_svc_trace_resume,traceSessionId));    queueService(service);  } catch (  IOException ioe) {    throw new SQLException(ioe);  }}  }
class C{  public static String value(){  if (_value == null) {    _value=computeValue();  }  return _value;}  }
class C{  private void parseRecord(Element unitNode){  NodeList nl=unitNode.getChildNodes();  for (int i=0; i < nl.getLength(); i++) {    Node currNode=nl.item(i);    if (currNode.getParentNode() != unitNode) {      continue;    }    int nodeType=currNode.getNodeType();    if (nodeType == Node.ELEMENT_NODE) {      String nodeName=currNode.getNodeName();      if (nodeName.equalsIgnoreCase(UNIT)) {        parseUnit((Element)currNode,entities);      } else       if (nodeName.equalsIgnoreCase(SURVIVORS)) {        parseUnit((Element)currNode,survivors);      } else       if (nodeName.equalsIgnoreCase(ALLIES)) {        parseUnit((Element)currNode,allies);      } else       if (nodeName.equalsIgnoreCase(SALVAGE)) {        parseUnit((Element)currNode,salvage);      } else       if (nodeName.equalsIgnoreCase(DEVASTATED)) {        parseUnit((Element)currNode,devastated);      } else       if (nodeName.equalsIgnoreCase(KILLS)) {        parseKills((Element)currNode);      } else       if (nodeName.equalsIgnoreCase(ENTITY)) {        parseUnit((Element)currNode,entities);      } else       if (nodeName.equalsIgnoreCase(PILOT)) {        parsePilot((Element)currNode);      }    } else {      continue;    }  }}  }
class C{  public boolean isCellEditable(int screenRow,int screenCol){  CellEntry cell=getCell(screenRow + 1,screenCol + 1);  if (cell == null) {    return true;  } else {    return cell.getEditLink() != null;  }}  }
class C{  public Message sendMessage(Chat chat,SendableMessage message){  HttpResponse<String> response;  JSONObject jsonResponse=null;  Message messageResponse=null;switch (message.getType()) {case TEXT:{      SendableTextMessage textMessage=(SendableTextMessage)message;      try {        MultipartBody request=Unirest.post(getBotAPIUrl() + "sendMessage").field("chat_id",chat.getId(),"application/json; charset=utf8;").field("text",textMessage.getMessage(),"application/json; charset=utf8;").field("disable_web_page_preview",textMessage.isDisableWebPagePreview()).field("parse_mode",textMessage.getParseMode() != null ? textMessage.getParseMode().getModeName() : ParseMode.NONE);        Utils.processReplyContent(request,textMessage);        Utils.processNotificationContent(request,textMessage);        response=request.asString();        jsonResponse=Utils.processResponse(response);      } catch (      UnirestException e) {        e.printStackTrace();      }      break;    }case FORWARDED:{    SendableForwardMessage forwardMessage=(SendableForwardMessage)message;    try {      MultipartBody request=Unirest.post(getBotAPIUrl() + "forwardMessage").field("chat_id",chat.getId(),"application/json; charset=utf8;").field("from_chat_id",forwardMessage.getChatID()).field("message_id",forwardMessage.getMessageID());      Utils.processNotificationContent(request,forwardMessage);      response=request.asString();      jsonResponse=Utils.processResponse(response);    } catch (    UnirestException e) {      e.printStackTrace();    }    break;  }case PHOTO:{  SendablePhotoMessage photoMessage=(SendablePhotoMessage)message;  try {    MultipartBody request=Unirest.post(getBotAPIUrl() + "sendPhoto").field("chat_id",chat.getId(),"application/json; charset=utf8;").field("photo",photoMessage.getPhoto().getFileID() != null ? photoMessage.getPhoto().getFileID() : new FileContainer(photoMessage.getPhoto()),photoMessage.getPhoto().getFileID() == null);    if (photoMessage.getCaption() != null)     request.field("caption",photoMessage.getCaption(),"application/json; charset=utf8;");    Utils.processReplyContent(request,photoMessage);    Utils.processNotificationContent(request,photoMessage);    response=request.asString();    jsonResponse=Utils.processResponse(response);  } catch (  UnirestException e) {    e.printStackTrace();  }  messageResponse=Utils.checkResponseStatus(jsonResponse) ? (MessageImpl.createMessage(jsonResponse != null ? jsonResponse : null,this)) : null;  if (photoMessage.getPhoto().getFile() != null && messageResponse != null) {    if (!messageResponse.getContent().getType().equals(ContentType.PHOTO)) {      System.err.println("The API returned content type " + messageResponse.getContent().getType().name() + " when a "+ message.getType()+ " type was sent, this is not supported by this API and will break cacheing, please create an issue on github or message @zackpollard on telegram.");      break;    }    PhotoSize[] photoSizes=((PhotoContent)messageResponse.getContent()).getContent();    int largestPhotoSize=0;    int largestPhotoID=0;    for (int i=0; i < photoSizes.length; ++i) {      int size=photoSizes[i].getHeight() * photoSizes[i].getWidth();      if (largestPhotoSize < size) {        largestPhotoSize=size;        largestPhotoID=i;      }    }    fileManager.cacheFileID(photoMessage.getPhoto().getFile(),photoSizes[largestPhotoID].getFileId());  }  break;}case AUDIO:{SendableAudioMessage audioMessage=(SendableAudioMessage)message;try {  MultipartBody request=Unirest.post(getBotAPIUrl() + "sendAudio").field("chat_id",chat.getId(),"application/json; charset=utf8;").field("audio",audioMessage.getAudio().getFileID() != null ? audioMessage.getAudio().getFileID() : new FileContainer(audioMessage.getAudio()),audioMessage.getAudio().getFileID() == null);  Utils.processReplyContent(request,audioMessage);  Utils.processNotificationContent(request,audioMessage);  if (audioMessage.getDuration() != 0)   request.field("duration",audioMessage.getDuration());  if (audioMessage.getPerformer() != null)   request.field("performer",audioMessage.getPerformer(),"application/json; charset=utf8;");  if (audioMessage.getTitle() != null)   request.field("title",audioMessage.getTitle(),"application/json; charset=utf8;");  if (audioMessage.getCaption() != null)   request.field("caption",audioMessage.getCaption(),"application/json; charset=utf8;");  response=request.asString();  jsonResponse=Utils.processResponse(response);} catch (UnirestException e) {  e.printStackTrace();}messageResponse=Utils.checkResponseStatus(jsonResponse) ? (MessageImpl.createMessage(jsonResponse != null ? jsonResponse : null,this)) : null;if (audioMessage.getAudio().getFile() != null && messageResponse != null) {  String fileID;switch (messageResponse.getContent().getType()) {case AUDIO:    fileID=((AudioContent)messageResponse.getContent()).getContent().getFileId();  break;case VOICE:fileID=((VoiceContent)messageResponse.getContent()).getContent().getFileId();break;default :System.err.println("The API returned content type " + messageResponse.getContent().getType().name() + " when an audio type was sent, this is not supported by this API, please create an issue on github or message @zackpollard on telegram.");return null;}fileManager.cacheFileID(audioMessage.getAudio().getFile(),fileID);}break;}case DOCUMENT:{SendableDocumentMessage documentMessage=(SendableDocumentMessage)message;try {MultipartBody request=Unirest.post(getBotAPIUrl() + "sendDocument").field("chat_id",chat.getId(),"application/json; charset=utf8;").field("document",documentMessage.getDocument().getFileID() != null ? documentMessage.getDocument().getFileID() : new FileContainer(documentMessage.getDocument()),documentMessage.getDocument().getFileID() == null);if (documentMessage.getCaption() != null) request.field("caption",documentMessage.getCaption(),"application/json; charset=utf8;");Utils.processReplyContent(request,documentMessage);Utils.processNotificationContent(request,documentMessage);response=request.asString();jsonResponse=Utils.processResponse(response);} catch (UnirestException e) {e.printStackTrace();}messageResponse=Utils.checkResponseStatus(jsonResponse) ? (MessageImpl.createMessage(jsonResponse != null ? jsonResponse : null,this)) : null;if (documentMessage.getDocument().getFile() != null && messageResponse != null) {String fileID;switch (messageResponse.getContent().getType()) {case AUDIO:fileID=((AudioContent)messageResponse.getContent()).getContent().getFileId();break;case DOCUMENT:fileID=((DocumentContent)messageResponse.getContent()).getContent().getFileId();break;default :System.err.println("The API returned content type " + messageResponse.getContent().getType().name() + " when a document type was sent, this is not supported by this API, please create an issue on github or message @zackpollard on telegram.");return null;}fileManager.cacheFileID(documentMessage.getDocument().getFile(),fileID);}break;}case STICKER:SendableStickerMessage stickerMessage=(SendableStickerMessage)message;try {MultipartBody request=Unirest.post(getBotAPIUrl() + "sendSticker").field("chat_id",chat.getId(),"application/json; charset=utf8;").field("sticker",stickerMessage.getSticker().getFileID() != null ? stickerMessage.getSticker().getFileID() : new FileContainer(stickerMessage.getSticker()),stickerMessage.getSticker().getFileID() == null);Utils.processReplyContent(request,stickerMessage);Utils.processNotificationContent(request,stickerMessage);response=request.asString();jsonResponse=Utils.processResponse(response);} catch (UnirestException e) {e.printStackTrace();}messageResponse=Utils.checkResponseStatus(jsonResponse) ? (MessageImpl.createMessage(jsonResponse != null ? jsonResponse : null,this)) : null;if (stickerMessage.getSticker().getFile() != null && messageResponse != null) {if (!messageResponse.getContent().getType().equals(ContentType.STICKER)) {System.err.println("The API returned content type " + messageResponse.getContent().getType().name() + " when a "+ message.getType()+ " type was sent, this is not supported by this API and will break cacheing, please create an issue on github or message @zackpollard on telegram.");break;}Sticker sticker=((StickerContent)messageResponse.getContent()).getContent();fileManager.cacheFileID(stickerMessage.getSticker().getFile(),sticker.getFileId());}break;case VIDEO:SendableVideoMessage videoMessage=(SendableVideoMessage)message;try {MultipartBody request=Unirest.post(getBotAPIUrl() + "sendVideo").field("chat_id",chat.getId(),"application/json; charset=utf8;").field("video",videoMessage.getVideo().getFileID() != null ? videoMessage.getVideo().getFileID() : new FileContainer(videoMessage.getVideo()),videoMessage.getVideo().getFileID() == null);if (videoMessage.getDuration() > 0) request.field("duration",videoMessage.getDuration());if (videoMessage.getWidth() > 0) request.field("width",videoMessage.getWidth());if (videoMessage.getHeight() > 0) request.field("height",videoMessage.getHeight());if (videoMessage.getCaption() != null) request.field("caption",videoMessage.getCaption(),"application/json; charset=utf8;");Utils.processReplyContent(request,videoMessage);Utils.processNotificationContent(request,videoMessage);response=request.asString();jsonResponse=Utils.processResponse(response);} catch (UnirestException e) {e.printStackTrace();}messageResponse=Utils.checkResponseStatus(jsonResponse) ? (MessageImpl.createMessage(jsonResponse != null ? jsonResponse : null,this)) : null;if (videoMessage.getVideo().getFile() != null && messageResponse != null) {if (!messageResponse.getContent().getType().equals(ContentType.VIDEO)) {System.err.println("The API returned content type " + messageResponse.getContent().getType().name() + " when a "+ message.getType()+ " type was sent, this is not supported by this API and will break cacheing, please create an issue on github or message @zackpollard on telegram.");break;}Video video=((VideoContent)messageResponse.getContent()).getContent();fileManager.cacheFileID(videoMessage.getVideo().getFile(),video.getFileId());}break;case VOICE:SendableVoiceMessage voiceMessage=(SendableVoiceMessage)message;try {MultipartBody request=Unirest.post(getBotAPIUrl() + "sendVoice").field("chat_id",chat.getId(),"application/json; charset=utf8;").field("voice",voiceMessage.getVoice().getFileID() != null ? voiceMessage.getVoice().getFileID() : new FileContainer(voiceMessage.getVoice()),voiceMessage.getVoice().getFileID() == null);if (voiceMessage.getDuration() > 0) request.field("duration",voiceMessage.getDuration());if (voiceMessage.getCaption() != null) request.field("caption",voiceMessage.getCaption(),"application/json; charset=utf8;");Utils.processReplyContent(request,voiceMessage);Utils.processNotificationContent(request,voiceMessage);response=request.asString();jsonResponse=Utils.processResponse(response);} catch (UnirestException e) {e.printStackTrace();}messageResponse=Utils.checkResponseStatus(jsonResponse) ? (MessageImpl.createMessage(jsonResponse != null ? jsonResponse : null,this)) : null;if (voiceMessage.getVoice().getFile() != null && messageResponse != null) {if (!messageResponse.getContent().getType().equals(ContentType.VOICE)) {System.err.println("The API returned content type " + messageResponse.getContent().getType().name() + " when a "+ message.getType()+ " type was sent, this is not supported by this API and will break cacheing, please create an issue on github or message @zackpollard on telegram.");break;}Voice voice=((VoiceContent)messageResponse.getContent()).getContent();fileManager.cacheFileID(voiceMessage.getVoice().getFile(),voice.getFileId());}break;case LOCATION:SendableLocationMessage locationMessage=(SendableLocationMessage)message;try {MultipartBody request=Unirest.post(getBotAPIUrl() + "sendLocation").field("chat_id",chat.getId(),"application/json; charset=utf8;").field("latitude",locationMessage.getLatitude()).field("longitude",locationMessage.getLongitude());Utils.processReplyContent(request,locationMessage);Utils.processNotificationContent(request,locationMessage);response=request.asString();jsonResponse=Utils.processResponse(response);} catch (UnirestException e) {e.printStackTrace();}break;case VENUE:SendableVenueMessage venueMessage=(SendableVenueMessage)message;try {MultipartBody request=Unirest.post(getBotAPIUrl() + "sendLocation").field("chat_id",chat.getId(),"application/json; charset=utf8;").field("latitude",venueMessage.getLatitude()).field("longitude",venueMessage.getLongitude()).field("title",venueMessage.getTitle()).field("address",venueMessage.getAddress());if (venueMessage.getFoursquareId() != null) request.field("foursquare_id",venueMessage.getFoursquareId());Utils.processReplyContent(request,venueMessage);Utils.processNotificationContent(request,venueMessage);response=request.asString();jsonResponse=Utils.processResponse(response);} catch (UnirestException e) {e.printStackTrace();}break;case CHAT_ACTION:SendableChatAction sendableChatAction=(SendableChatAction)message;try {MultipartBody request=Unirest.post(getBotAPIUrl() + "sendChatAction").field("chat_id",chat.getId(),"application/json; charset=utf8;").field("action",sendableChatAction.getChatAction().getName());response=request.asString();} catch (UnirestException e) {e.printStackTrace();}return null;}return Utils.checkResponseStatus(jsonResponse) ? (messageResponse != null ? messageResponse : MessageImpl.createMessage(jsonResponse,this)) : null;}  }
class C{  public boolean isAnnotationMatch(StringBuilder annotationClassName){  int activeCount=0;  for (int i=_listeners.length - 1; i >= 0; i--) {    ScanListenerByteCode listener=_currentListeners[i];    if (listener == null)     continue;    if (listener.isScanMatchAnnotation(annotationClassName)) {      _currentListeners[i]=null;    } else     activeCount++;  }  return activeCount == 0;}  }
class C{  public long readLong(){  return ((buf[position++] & 0xff) + ((long)(buf[position++] & 0xff) << 8) + ((long)(buf[position++] & 0xff) << 16)+ ((long)(buf[position++] & 0xff) << 24)+ ((long)(buf[position++] & 0xff) << 32)+ ((long)(buf[position++] & 0xff) << 40)+ ((long)(buf[position++] & 0xff) << 48)+ ((long)(buf[position++] & 0xff) << 56));}  }
class C{  private int[] maxIntegerDigits(double[][] values){  int[] digits=new int[values[0].length];  for (int j=0; j < values[0].length; j++) {    for (    double[] value : values) {      digits[j]=Math.max(digits[j],integerDigits(value[j]));    }  }  return digits;}  }
class C{  public void executeTest(GridTestLog4jLogger log) throws Exception {  counter.incrementAndGet();  File workDir=U.resolveWorkDirectory("marshaller",false);  final MarshallerContextImpl.ContinuousQueryListener queryListener=new MarshallerContextImpl.ContinuousQueryListener(log,workDir);  final ArrayList evts=new ArrayList<CacheEntryEvent<Integer,String>>();  IgniteCacheProxy cache=new IgniteCacheProxy();  evts.add(new CacheContinuousQueryManager.CacheEntryEventImpl(cache,EventType.CREATED,1,String.class.getName()));  for (int i=0; i < 100; i++)   queryListener.onUpdated(evts);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.POSTFIX_EXPRESSION__EXPRESSION:    return basicSetExpression(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof BurlapRemote))   return false;  BurlapRemote remote=(BurlapRemote)obj;  return this.url.equals(remote.url);}  }
class C{  private void checkCompatibleVersion(){  if (!_dbClient.checkGeoCompatible(EXPECTED_GEO_VERSION)) {    throw APIException.badRequests.incompatibleGeoVersions(EXPECTED_GEO_VERSION,FEATURE_NAME);  }}  }
class C{  protected void addConditionPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_ConditionalRoute_condition_feature"),getString("_UI_PropertyDescriptor_description","_UI_ConditionalRoute_condition_feature","_UI_ConditionalRoute_type"),EipPackage.Literals.CONDITIONAL_ROUTE__CONDITION,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public MekaDialog(Frame owner,boolean modal){  this(owner,"",modal);}  }
class C{  public static PersonFull person(String idPerson,String profile,String filter) throws NetworkException {  String params=ServiceSecurity.construireParams(false,AllocineService.CODE,idPerson,AllocineService.PROFILE,profile,AllocineService.FILTER,filter);  String sed=ServiceSecurity.getSED();  String sig=ServiceSecurity.getSIG(params,sed);  try {    AllocineResponse response=getService().person(idPerson,profile,filter,sed,sig);    return response.getPerson();  } catch (  Exception e) {    e.printStackTrace();  }  return null;}  }
class C{  protected void initModules(Collection<IFloodlightModule> moduleSet) throws FloodlightModuleException {  for (  IFloodlightModule module : moduleSet) {    Map<Class<? extends IFloodlightService>,IFloodlightService> simpls=module.getServiceImpls();    if (simpls != null) {      for (      Entry<Class<? extends IFloodlightService>,IFloodlightService> s : simpls.entrySet()) {        if (logger.isDebugEnabled()) {          logger.debug("Setting " + s.getValue() + "  as provider for "+ s.getKey().getCanonicalName());        }        if (floodlightModuleContext.getServiceImpl(s.getKey()) == null) {          floodlightModuleContext.addService(s.getKey(),s.getValue());        } else {          throw new FloodlightModuleException("Cannot set " + s.getValue() + " as the provider for "+ s.getKey().getCanonicalName()+ " because "+ floodlightModuleContext.getServiceImpl(s.getKey())+ " already provides it");        }      }    }  }  for (  IFloodlightModule module : moduleSet) {    if (logger.isDebugEnabled()) {      logger.debug("Initializing " + module.getClass().getCanonicalName());    }    module.init(floodlightModuleContext);  }}  }
class C{  @Override public String toString(){  return "AssignmentFailure{" + "resource=" + resource + ", asking="+ asking+ ", used="+ used+ ", available="+ available+ ", message="+ message+ '}';}  }
class C{  public MeasurementGroup addMeasure(String name,double val,double min,double max,double exp,boolean lowerisbetter){  measurements.add(new Measurement(name,val,min,max,exp,lowerisbetter));  return this;}  }
class C{  private static List createList(Object obj0,Object obj1){  List list=new ArrayList();  list.add(obj0);  list.add(obj1);  return list;}  }
class C{  @DSComment("Potential intent to trigger other processing") @DSSafe(DSCat.INTENT_EXCHANGE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:09.458 -0500",hash_original_method="983951350B18B30CD357EFC4A5F8C533",hash_generated_method="369EAA9A7D333C9805FC57A65750D36F") public Intent putExtra(String name,byte value){  mExtras.put(name,value);  return this;}  }
class C{  public Builder maxConcurrentOperations(int maxConcurrentOperations){  this.maxConcurrentOperations=maxConcurrentOperations;  return this;}  }
class C{  public static IgniteUuid randomTrashId(){  return TRASH_IDS[ThreadLocalRandom.current().nextInt(TRASH_CONCURRENCY)];}  }
class C{  public static String convertStringToHexString(String data){  return conventBytesToHexString(data.getBytes());}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:37.738 -0500",hash_original_method="2D581361992135FCD53B75EF54E93588",hash_generated_method="B1E537B79598D41770319712D233687F") public MatrixCursor(String[] columnNames,int initialCapacity){  this.columnNames=columnNames;  this.columnCount=columnNames.length;  if (initialCapacity < 1) {    initialCapacity=1;  }  this.data=new Object[columnCount * initialCapacity];}  }
class C{  private ComparableTimSort(Object[] a){  this.a=a;  int len=a.length;  @SuppressWarnings({"unchecked","UnnecessaryLocalVariable"}) Object[] newArray=new Object[len < 2 * INITIAL_TMP_STORAGE_LENGTH ? len >>> 1 : INITIAL_TMP_STORAGE_LENGTH];  tmp=newArray;  int stackLen=(len < 120 ? 5 : len < 1542 ? 10 : len < 119151 ? 19 : 40);  runBase=new int[stackLen];  runLen=new int[stackLen];}  }
class C{  public int phenotype(int position,int[] genome){  if (position >= numNodes * (maxArity + 1))   return GENE_OUTPUT;  return position % (maxArity + 1) == 0 ? GENE_FUNCTION : GENE_ARGUMENT;}  }
class C{  public static void error(String errMsg){  IWorkbenchPage page=PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();  IWorkbenchPart part=page.getActivePart();  IActionBars bars=null;  if (part instanceof IViewPart) {    bars=((IViewPart)part).getViewSite().getActionBars();  } else   if (part instanceof IEditorPart) {    bars=((IEditorPart)part).getEditorSite().getActionBars();  }  if (bars != null) {    bars.getStatusLineManager().setErrorMessage(errMsg);  }  logger.debug(errMsg);}  }
class C{  @Override public EdgeDecorator<E> createEdge(E delegate){  return new EdgeDecorator<E>(delegate);}  }
class C{  public DefaultInputHandler(){  bindings=currentBindings=new Hashtable();}  }
class C{  public void onBlueButtonClick(View v){  if (isSubscribed()) {    final SharedPreferences settings=getSharedPreferencesForCurrentUser();    boolean entitled=settings.getBoolean(BLUE_BUTTON,false);    if (!entitled) {      String requestId=PurchasingManager.initiatePurchaseRequest(getResources().getString(R.string.entitlement_sku_blue));      storeRequestId(requestId,BLUE_BUTTON);    } else {      centerButton.setBackgroundDrawable(getResources().getDrawable(R.drawable.bluebutton));    }  } else {    generateSubscribeDialog();  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @SuppressWarnings("fallthrough") private int findHeaderEnd(byte[] bs){  boolean newline=true;  int len=bs.length;  for (int i=0; i < len; i++) {switch (bs[i]) {case '\r':      if (i < len - 1 && bs[i + 1] == '\n')       i++;case '\n':    if (newline)     return i + 1;  newline=true;break;default :newline=false;}}return len;}  }
class C{  public boolean isQueueInitialized(){  return this.initialized.get();}  }
class C{  protected double BFfactor(int c,int r){  double sum=0;  double multiplier=1.0;  for (int i=0; i < r; i++) {    sum+=multiplier * Math.exp((c * Math.log(r - i) - (SpecialFunctions.lnFactorial(i) + SpecialFunctions.lnFactorial(r - i))));    multiplier*=-1.0;  }  return sum;}  }
class C{  public SQLFeatureNotSupportedException(Throwable cause){  super(cause);}  }
class C{  @Override public void computeScroll(){  if (!isInEditMode() && dragHelper.continueSettling(true)) {    ViewCompat.postInvalidateOnAnimation(this);  }}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.ADDITIVE_EXPRESSION;}  }
class C{  public void testFloatsCompare(){  BytesRef left=new BytesRef(new byte[Float.BYTES]);  BytesRef right=new BytesRef(new byte[Float.BYTES]);  for (int i=0; i < 10000; i++) {    float leftValue=Float.intBitsToFloat(random().nextInt());    NumericUtils.intToSortableBytes(NumericUtils.floatToSortableInt(leftValue),left.bytes,left.offset);    float rightValue=Float.intBitsToFloat(random().nextInt());    NumericUtils.intToSortableBytes(NumericUtils.floatToSortableInt(rightValue),right.bytes,right.offset);    assertEquals(Integer.signum(Float.compare(leftValue,rightValue)),Integer.signum(left.compareTo(right)));  }}  }
class C{  public static <E extends Comparable<E>>void printList(DoubleLinkedNode<E> node){  DoubleLinkedNode<E> curr=node;  out.print("[");  if (curr == null) {    out.println("]");    return;  }  while (curr.next != null) {    out.print(curr.item.toString() + ",");    curr=curr.next;  }  out.println(curr.item.toString() + "]");}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document newDoc;  DocumentType docType=null;  DOMImplementation domImpl;  Attr attribute;  String namespaceURI="http://www.w3.org/XML/1998 /namespace";  String qualifiedName="xml:root";  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();  newDoc=domImpl.createDocument("http://www.w3.org/DOM/Test","dom:doc",docType);{    boolean success=false;    try {      attribute=newDoc.createAttributeNS(namespaceURI,qualifiedName);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("documentcreateattributeNS06",success);  }}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case ExpressionsPackage.HEX_LITERAL__VALUE:    setValue((Integer)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public PaymentInfoMagcard(String sHolderName,String sCardNumber,String sExpirationDate,String sTransactionID,double dTotal){  this(sHolderName,sCardNumber,sExpirationDate,null,null,null,sTransactionID,dTotal);}  }
class C{  public static <S>Builder<S> builder(S state){  return new Builder<>(state);}  }
class C{  public String compressOutputTipText(){  return "Optional compression of the output data";}  }
class C{  public ActionForward executeAction(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  StringBuffer sbUrl=new StringBuffer();  try {    sbUrl.append(WebAuthenticationHelper.getWebAuthDesconectURL(request));    request.getSession().invalidate();    response.sendRedirect(sbUrl.toString());    return null;  } catch (  Exception e) {    logger.error("Error obteniendo datos del usuario.");    return mapping.findForward("failure");  }}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(String.format("numerator = %d, denominator = %d%n",this.numerator,this.denominator));  return sb.toString();}  }
class C{  public static void copyIntoColumn(int[][] destination,int column,int[] source) throws Exception {  if (source.length != destination.length) {    throw new Exception("Destination column is not of the same length as the source (" + destination.length + " vs "+ source.length+ ")");  }  for (int r=0; r < destination.length; r++) {    destination[r][column]=source[r];  }}  }
class C{  public void testBadStreamSize(){  SplittableRandom r=new SplittableRandom();  executeAndCatchIAE(null);  executeAndCatchIAE(null);  executeAndCatchIAE(null);  executeAndCatchIAE(null);  executeAndCatchIAE(null);  executeAndCatchIAE(null);}  }
class C{  public JToggleGroup(int type,Object[] data){  this(type,new DefaultListModel(),new DefaultListSelectionModel());  DefaultListModel model=(DefaultListModel)m_data;  for (int i=0; i < data.length; ++i) {    model.addElement(data[i]);  }  initUI();}  }
class C{  public long add(long instant,long value){  throw unsupported();}  }
class C{  private void doGenKeyPair(String alias,String dname,String keyAlgName,int keysize,String sigAlgName) throws Exception {  if (keysize == -1) {    if ("EC".equalsIgnoreCase(keyAlgName)) {      keysize=256;    } else     if ("RSA".equalsIgnoreCase(keyAlgName)) {      keysize=2048;    } else {      keysize=1024;    }  }  if (alias == null) {    alias=keyAlias;  }  if (keyStore.containsAlias(alias)) {    MessageFormat form=new MessageFormat(rb.getString("Key.pair.not.generated.alias.alias.already.exists"));    Object[] source={alias};    throw new Exception(form.format(source));  }  if (sigAlgName == null) {    sigAlgName=getCompatibleSigAlgName(keyAlgName);  }  CertAndKeyGen keypair=new CertAndKeyGen(keyAlgName,sigAlgName,providerName);  X500Name x500Name;  if (dname == null) {    x500Name=getX500Name();  } else {    x500Name=new X500Name(dname);  }  keypair.generate(keysize);  PrivateKey privKey=keypair.getPrivateKey();  CertificateExtensions ext=createV3Extensions(null,null,v3ext,keypair.getPublicKeyAnyway(),null);  X509Certificate[] chain=new X509Certificate[1];  chain[0]=keypair.getSelfCertificate(x500Name,getStartDate(startDate),validity * 24L * 60L* 60L,ext);  if (verbose) {    MessageFormat form=new MessageFormat(rb.getString("Generating.keysize.bit.keyAlgName.key.pair.and.self.signed.certificate.sigAlgName.with.a.validity.of.validality.days.for"));    Object[] source={new Integer(keysize),privKey.getAlgorithm(),chain[0].getSigAlgName(),new Long(validity),x500Name};    System.err.println(form.format(source));  }  if (keyPass == null) {    keyPass=promptForKeyPass(alias,null,storePass);  }  keyStore.setKeyEntry(alias,privKey,keyPass,chain);}  }
class C{  public boolean isGL(){  return false;}  }
class C{  public final Hashtable initializeConstants(){  Vect consts=this.config.getConstants();  if (consts == null) {    return new Hashtable();  }  return this.makeConstantTable(consts);}  }
class C{  public ToStringBuilder append(String fieldName,float value){  style.append(buffer,fieldName,value);  return this;}  }
class C{  public boolean hasAdminRole(){  return getUserRoles().contains(UserRoleType.ORGANIZATION_ADMIN);}  }
class C{  public CGotoOffsetAction(final CDebugPerspectiveModel debugPerspectiveModel,final IAddress offset){  super(String.format("Goto offset %s",offset.toHexString()));  Preconditions.checkNotNull(debugPerspectiveModel,"IE01106: Debug perspective model argument can not be null");  m_debugPerspectiveModel=debugPerspectiveModel;  m_offset=offset;}  }
class C{  public void shutdown(int statusCode) throws IOException {synchronized (spdyWriter) {    int lastGoodStreamId;synchronized (this) {      if (shutdown) {        return;      }      shutdown=true;      lastGoodStreamId=this.lastGoodStreamId;    }    spdyWriter.goAway(0,lastGoodStreamId,statusCode);  }}  }
class C{  public boolean hasThumbnail(){  return hasExtension(MediaThumbnail.class);}  }
class C{  public static RefactoringStatus checkMethodInHierarchy(ITypeBinding type,String methodName,ITypeBinding returnType,ITypeBinding[] parameters){  RefactoringStatus result=new RefactoringStatus();  IMethodBinding method=Bindings.findMethodInHierarchy(type,methodName,parameters);  if (method != null) {    boolean returnTypeClash=false;    ITypeBinding methodReturnType=method.getReturnType();    if (returnType != null && methodReturnType != null) {      String returnTypeKey=returnType.getKey();      String methodReturnTypeKey=methodReturnType.getKey();      if (returnTypeKey == null && methodReturnTypeKey == null) {        returnTypeClash=returnType != methodReturnType;      } else       if (returnTypeKey != null && methodReturnTypeKey != null) {        returnTypeClash=!returnTypeKey.equals(methodReturnTypeKey);      }    }    ITypeBinding dc=method.getDeclaringClass();    if (returnTypeClash) {      result.addError(Messages.format(RefactoringCoreMessages.Checks_methodName_returnTypeClash,new Object[]{BasicElementLabels.getJavaElementName(methodName),BasicElementLabels.getJavaElementName(dc.getName())}),JavaStatusContext.create(method));    } else {      if (method.isConstructor()) {        result.addWarning(Messages.format(RefactoringCoreMessages.Checks_methodName_constructor,new Object[]{BasicElementLabels.getJavaElementName(dc.getName())}));      } else {        result.addError(Messages.format(RefactoringCoreMessages.Checks_methodName_overrides,new Object[]{BasicElementLabels.getJavaElementName(methodName),BasicElementLabels.getJavaElementName(dc.getName())}),JavaStatusContext.create(method));      }    }  }  return result;}  }
class C{  default <U,R>Zippable<R> zip(final Stream<? extends U> other,final BiFunction<? super T,? super U,? extends R> zipper){  return zip((Iterable<? extends U>)ReactiveSeq.fromStream(other),zipper);}  }
class C{  public void alignHorizontal(){  double min=Double.MAX_VALUE;  for (  Neuron neuron : getSelectedModelNeurons()) {    if (neuron.getY() < min) {      min=neuron.getY();    }  }  for (  Neuron neuron : getSelectedModelNeurons()) {    neuron.setY(min);  }  repaint();}  }
class C{  public static int showDialog(String message,@NotNull @Nls(capitalization=Nls.Capitalization.Title) String title,@NotNull String[] options,int defaultOptionIndex,int focusedOptionIndex,@Nullable Icon icon,@Nullable DialogWrapper.DoNotAskOption doNotAskOption){  if (isApplicationInUnitTestOrHeadless()) {    return ourTestImplementation.show(message);  }  try {    if (canShowMacSheetPanel()) {      return MacMessages.getInstance().showMessageDialog(title,message,options,false,null,defaultOptionIndex,focusedOptionIndex,doNotAskOption);    }  } catch (  MessageException ignored) {  }catch (  Exception reportThis) {    LOG.error(reportThis);  }  MessageDialog dialog=new MessageDialog(message,title,options,defaultOptionIndex,focusedOptionIndex,icon,doNotAskOption);  dialog.show();  return dialog.getExitCode();}  }
class C{  public ActivateSessionResponse activate() throws ServiceResultException {  UserIdentityToken token=EndpointUtil.createAnonymousIdentityToken(session.getEndpoint());  return activate(token,null);}  }
class C{  private void cleanupDiscovery(StorageSystem system){  try {    system.setReachableStatus(false);    _dbClient.persistObject(system);  } catch (  DatabaseException e) {    _logger.error("discoverStorage failed.  Failed to update discovery status to ERROR.",e);  }}  }
class C{  public long readLong(){  return scanner.nextLong();}  }
class C{  public CoreContainer(NodeConfig config){  this(config,new Properties());}  }
class C{  public void close(){  if (_consumer != null) {    _consumer.shutdown();  }}  }
class C{  void down(int nFrames) throws IncompatibleThreadStateException {  setCurrentFrameIndex(currentFrameIndex - nFrames);}  }
class C{  public JsonArrayRequest(String url,Listener<JSONArray> listener,ErrorListener errorListener){  super(Method.GET,url,null,listener,errorListener);}  }
class C{  protected void addPolyForIntersection(OMPoly poly1,OMPoly poly2,double dist,OMAreaList ret){  double[] p1Coords=poly1.getLatLonArray();  double[] p2Coords=poly2.getLatLonArray();  List<Geo> results=new LinkedList<Geo>();  Geo a1, a2, b1, b2;  Geo intersect=null;  int index1=0, index2=0;  for (; index2 + 3 < p2Coords.length; index2+=2) {    b1=new Geo(p2Coords[index2],p2Coords[index2 + 1],false);    b2=new Geo(p2Coords[index2 + 2],p2Coords[index2 + 3],false);    if (intersect == null) {      for (; index1 + 3 < p1Coords.length; index1+=2) {        a1=new Geo(p1Coords[index1],p1Coords[index1 + 1],false);        a2=new Geo(p1Coords[index1 + 2],p1Coords[index1 + 3],false);        intersect=Intersection.segmentsIntersect(a1,a2,b1,b2);        if (!tooClose(a1,dist)) {          results.add(a1);        }        if (intersect != null) {          if (!tooClose(intersect,dist)) {            results.add(intersect);          }          break;        }      }    }    if (intersect != null && !tooClose(b2,dist)) {      results.add(b2);    }  }  if (results.size() > 1) {    ret.add(getOMPolyFromGeos(results));  }}  }
class C{  public KMLVertexDescriptor(Graph graph){  kDistr=Degree.getInstance().values(graph.getVertices());}  }
class C{  public boolean isSetIntegerlist(){  return this.integerlist != null;}  }
class C{  public WrappedRuntimeException(Exception e){  super(e.getMessage());  m_exception=e;}  }
class C{  protected void removeAllSpecifiers(){  m_Specifiers.clear();}  }
class C{  public QueryBuilder(){}  }
class C{  public b removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public static boolean contentEquals(Reader input1,Reader input2) throws IOException {  input1=toBufferedReader(input1);  input2=toBufferedReader(input2);  int ch=input1.read();  while (EOF != ch) {    int ch2=input2.read();    if (ch != ch2) {      return false;    }    ch=input1.read();  }  int ch2=input2.read();  return ch2 == EOF;}  }
class C{  public static JCStatement generateNullCheck(JavacTreeMaker maker,JavacNode variable,JavacNode source){  NullCheckExceptionType exceptionType=source.getAst().readConfiguration(ConfigurationKeys.NON_NULL_EXCEPTION_TYPE);  if (exceptionType == null)   exceptionType=NullCheckExceptionType.NULL_POINTER_EXCEPTION;  JCVariableDecl varDecl=(JCVariableDecl)variable.get();  if (isPrimitive(varDecl.vartype))   return null;  Name fieldName=varDecl.name;  JCExpression exType=genTypeRef(variable,exceptionType.getExceptionType());  JCExpression exception=maker.NewClass(null,List.<JCExpression>nil(),exType,List.<JCExpression>of(maker.Literal(exceptionType.toExceptionMessage(fieldName.toString()))),null);  JCStatement throwStatement=maker.Throw(exception);  JCBlock throwBlock=maker.Block(0,List.of(throwStatement));  return maker.If(maker.Binary(CTC_EQUAL,maker.Ident(fieldName),maker.Literal(CTC_BOT,null)),throwBlock,null);}  }
class C{  public GeneralAlgorithmRunner(DataWrapper dataWrapper,GraphSource graphSource,GeneralAlgorithmRunner runner,Parameters parameters,KnowledgeBoxModel knowledgeBoxModel){  this(dataWrapper,graphSource,parameters,knowledgeBoxModel,null);  this.algorithm=runner.algorithm;}  }
class C{  public GeneralPath(int rule){  super(rule,INIT_SIZE);}  }
class C{  public static void dumbDeleteRecursive(File file) throws IOException {  if (file.isDirectory()) {    File[] fileList=file.listFiles();    if (fileList == null) {      return;    }    for (    File entry : fileList) {      dumbDeleteRecursive(entry);    }  }  if (!file.delete() && file.exists()) {    throw new IOException("could not delete: " + file);  }}  }
class C{  public static Point layerToScreen(Layer layer,float x,float y){  Point into=new Point(x,y);  return layerToScreen(layer,into,into);}  }
class C{  static public String formatUInt8(byte b){  return String.format("%#4x",new Byte(b).intValue() & 0xFF);}  }
class C{  public void visitVarInsn(int opcode,int var){  if (mv != null) {    mv.visitVarInsn(opcode,var);  }}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();{    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public static void writeAvailableByte(Object o,byte val){  Magic.setByteAtOffset(o,AVAILABLE_BITS_OFFSET,val);}  }
class C{  public static <A extends Annotation>A generateAnnotation(Attribute.Compound anno,Class<A> annoType){  AnnotationProxyMaker apm=new AnnotationProxyMaker(anno,annoType);  return annoType.cast(apm.generateAnnotation());}  }
class C{  private boolean formMatches(String glyphUnicode,String glyphForm,AttributedCharacterIterator aci,int currentIndex){  if (aci == null || glyphForm == null || glyphForm.length() == 0) {    return true;  }  char c=aci.setIndex(currentIndex);  Integer form=(Integer)aci.getAttribute(GVTAttributedCharacterIterator.TextAttribute.ARABIC_FORM);  if (form == null || form.equals(GVTAttributedCharacterIterator.TextAttribute.ARABIC_NONE)) {    return false;  }  if (glyphUnicode.length() > 1) {    boolean matched=true;    for (int j=1; j < glyphUnicode.length(); j++) {      c=aci.next();      if (glyphUnicode.charAt(j) != c) {        matched=false;        break;      }    }    aci.setIndex(currentIndex);    if (matched) {      aci.setIndex(currentIndex + glyphUnicode.length() - 1);      Integer lastForm=(Integer)aci.getAttribute(GVTAttributedCharacterIterator.TextAttribute.ARABIC_FORM);      aci.setIndex(currentIndex);      if (form != null && lastForm != null) {        if (form.equals(GVTAttributedCharacterIterator.TextAttribute.ARABIC_TERMINAL) && lastForm.equals(GVTAttributedCharacterIterator.TextAttribute.ARABIC_INITIAL)) {          return glyphForm.equals(SVGConstants.SVG_ISOLATED_VALUE);        } else         if (form.equals(GVTAttributedCharacterIterator.TextAttribute.ARABIC_TERMINAL)) {          return glyphForm.equals(SVGConstants.SVG_TERMINAL_VALUE);        } else         if (form.equals(GVTAttributedCharacterIterator.TextAttribute.ARABIC_MEDIAL) && lastForm.equals(GVTAttributedCharacterIterator.TextAttribute.ARABIC_MEDIAL)) {          return glyphForm.equals(SVGConstants.SVG_MEDIAL_VALUE);        }      }    }  }  if (form.equals(GVTAttributedCharacterIterator.TextAttribute.ARABIC_ISOLATED)) {    return glyphForm.equals(SVGConstants.SVG_ISOLATED_VALUE);  }  if (form.equals(GVTAttributedCharacterIterator.TextAttribute.ARABIC_TERMINAL)) {    return glyphForm.equals(SVGConstants.SVG_TERMINAL_VALUE);  }  if (form.equals(GVTAttributedCharacterIterator.TextAttribute.ARABIC_INITIAL)) {    return glyphForm.equals(SVGConstants.SVG_INITIAL_VALUE);  }  if (form.equals(GVTAttributedCharacterIterator.TextAttribute.ARABIC_MEDIAL)) {    return glyphForm.equals(SVGConstants.SVG_MEDIAL_VALUE);  }  return false;}  }
class C{  public AbIocEventListener itemClick(String method){  this.itemClickMethod=method;  return this;}  }
class C{  public NecronomiconCreationRitual(String unlocalizedName,int bookType,int dimension,float requiredEnergy,ItemStack item,Object... offerings){  this(unlocalizedName,bookType,dimension,requiredEnergy,false,item,offerings);}  }
class C{  @Deprecated public Map<String,Object> templateParams(){  return template == null ? null : template.getParams();}  }
class C{  @DELETE @Path("{entity}") public Response removeCredentialEntity(@PathParam("entity") String entity) throws IOException, IllegalArgumentException {  String user=SecurityUtils.getPrincipal();  logger.info("removeCredentialEntity for user {} entity {}",user,entity);  if (credentials.removeCredentialEntity(user,entity) == false) {    return new JsonResponse(Status.NOT_FOUND).build();  }  return new JsonResponse(Status.OK).build();}  }
class C{  private MemoryExampleTable performInnerJoin(ExampleSet leftExampleSet,ExampleSet rightExampleSet,List<AttributeSource> originalAttributeSources,List<Attribute> unionAttributeList,Pair<Attribute[],Attribute[]> keyAttributes) throws ProcessStoppedException {  MemoryExampleTable unionTable=new MemoryExampleTable(unionAttributeList);  Attribute[] leftKeyAttributes=null;  Attribute[] rightKeyAttributes=null;  Map<DoubleArrayWrapper,List<Example>> rightKeyMapping=null;  boolean useId=getParameterAsBoolean(PARAMETER_USE_ID);  if (!useId) {    leftKeyAttributes=keyAttributes.getFirst();    rightKeyAttributes=keyAttributes.getSecond();    rightKeyMapping=createKeyMapping(rightExampleSet,rightKeyAttributes,leftKeyAttributes);  }  int progressCounter=0;  for (  Example leftExample : leftExampleSet) {    List<Example> matchingRightExamples=getMatchingExamples(leftExampleSet,rightExampleSet,leftKeyAttributes,rightKeyMapping,useId,leftExample);    if (matchingRightExamples != null) {      for (      Example rightExample : matchingRightExamples) {        addCombinedOccurence(originalAttributeSources,unionAttributeList,unionTable,leftExample,rightExample);      }    }    ++progressCounter;    if (progressCounter % 100 == 0) {      getProgress().step(100);      progressCounter=0;    }  }  return unionTable;}  }
class C{  public Fits(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:10.414 -0500",hash_original_method="D30344A99981D107D0972206045C7C70",hash_generated_method="CCD5696868A6D4B61DC4FA02D7346CDA") public static void writeTexture(ETC1Texture texture,OutputStream output) throws IOException {  ByteBuffer dataBuffer=texture.getData();  int originalPosition=dataBuffer.position();  try {    int width=texture.getWidth();    int height=texture.getHeight();    ByteBuffer header=ByteBuffer.allocateDirect(ETC1.ETC_PKM_HEADER_SIZE).order(ByteOrder.nativeOrder());    ETC1.formatHeader(header,width,height);    byte[] ioBuffer=new byte[4096];    header.get(ioBuffer,0,ETC1.ETC_PKM_HEADER_SIZE);    output.write(ioBuffer,0,ETC1.ETC_PKM_HEADER_SIZE);    int encodedSize=ETC1.getEncodedDataSize(width,height);    for (int i=0; i < encodedSize; ) {      int chunkSize=Math.min(ioBuffer.length,encodedSize - i);      dataBuffer.get(ioBuffer,0,chunkSize);      output.write(ioBuffer,0,chunkSize);      i+=chunkSize;    }  }  finally {    dataBuffer.position(originalPosition);  }}  }
class C{  public void dispose(){  mYellow=null;  super.dispose();}  }
class C{  protected Object execute() throws IOException {  init();  if (!getSelectedRemote()) {    return null;  }  Codenvy codenvy=getMultiRemoteCodenvy().getCodenvy(remoteName);  if (codenvy == null) {    Ansi buffer=Ansi.ansi();    buffer.fg(RED);    buffer.a(format("Please login into the remote %s",remoteName));    buffer.reset();    System.out.println(buffer.toString());    return null;  }  if (!confirmation) {    String confirmLine=null;    if (isInteractive()) {      System.out.print("Confirm [y/N]");      System.out.flush();      try (BufferedReader reader=new BufferedReader(new InputStreamReader(session.getKeyboard(),Charset.defaultCharset()))){        confirmLine=reader.readLine();      }       System.out.println(System.lineSeparator());    } else {      ConsoleReader consoleReader=new ConsoleReader(System.in,System.out);      consoleReader.setExpandEvents(false);      confirmLine=consoleReader.readLine("Confirm [y/N]");    }    if (!"y".equalsIgnoreCase(confirmLine)) {      System.out.println("Cancelling action");      return null;    }  }  codenvy.factory().delete(factoryID).execute();  System.out.println(String.format("The factory with ID %s has been successfully deleted",factoryID));  return null;}  }
class C{  public void addVetoableChangeListener(VetoableChangeListener listener){  if (listener == null) {    return;  }  if (listener instanceof VetoableChangeListenerProxy) {    VetoableChangeListenerProxy proxy=(VetoableChangeListenerProxy)listener;    addVetoableChangeListener(proxy.getPropertyName(),proxy.getListener());  } else {    this.map.add(null,listener);  }}  }
class C{  public void acceptAlert(){  WebDriverWait wait=(WebDriverWait)new WebDriverWait(appiumDriver,maxWaitTime,500);  wait.until(ExpectedConditions.alertIsPresent());  Alert alrt=appiumDriver.switchTo().alert();  alrt.accept();}  }
class C{  synchronized public void sendX10Sequence(X10Sequence s,SerialListener l){  s.reset();  X10Sequence.Command c;  while ((c=s.getCommand()) != null) {    SerialMessage m;    if (c.isAddress()) {      m=SpecificMessage.getAddress(c.getHouseCode(),((X10Sequence.Address)c).getAddress());    } else     if (c.isFunction()) {      X10Sequence.Function f=(X10Sequence.Function)c;      if (f.getDimCount() > 0) {        m=SpecificMessage.getFunctionDim(f.getHouseCode(),f.getFunction(),f.getDimCount());      } else {        m=SpecificMessage.getFunction(f.getHouseCode(),f.getFunction());      }    } else {      X10Sequence.ExtData e=(X10Sequence.ExtData)c;      m=SpecificMessage.getExtCmd(c.getHouseCode(),e.getAddress(),e.getExtCmd(),e.getExtData());    }    sendSerialMessage(m,l);  }}  }
class C{  public boolean replaceValue(float value,float newValue){  if (Float.isNaN(value)) {    for (int i=0; i < count; i++) {      if (Float.isNaN(data[i])) {        data[i]=newValue;        return true;      }    }  } else {    int index=index(value);    if (index != -1) {      data[index]=newValue;      return true;    }  }  return false;}  }
class C{  public void addColumn(ColumnInfo info){  WTableColumn tableColumn;  tableColumn=new WTableColumn();  tableColumn.setHeaderValue(Util.cleanAmp(info.getColHeader()));  setColumnVisibility(tableColumn,info.getVisibility());  m_tableColumns.add(tableColumn);  return;}  }
class C{  public void end(){  AppContext.setSecurityContext(null);}  }
class C{  private Ref clip() throws PageException {  return checker();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void synthesize(String[] arguments){  Log.i(TAG,"Start requesting TTS... (" + this.codec + ")");  try {    parseParams(arguments);  } catch (  Exception e) {    e.printStackTrace();  }  if (this.codec == CODEC_WAV) {    this.sampleRate=CODEC_WAV_SAMPLE_RATE;  } else {    this.sampleRate=CODEC_OPUS_SAMPLE_RATE;  }  TTSThread thread=new TTSThread();  thread.setName("TTSThread");  thread.start();}  }
class C{  public void clearRecentlyPlayedList(){  recentlyPlayedVideos.clear();  videoListAdapter.notifyDataSetChanged();}  }
class C{  public String shortFormat(Date dt){  if (dt == null) {    return "";  }  Date now=new Date();  dt=new Date(dt.getTime());  if (mDate.format(now).equals(mDate.format(dt))) {    return sTime.format(dt);  } else   if (Math.abs(now.getTime() - dt.getTime()) < ONE_YEAR) {    return sDate.format(dt);  } else {    return mDate.format(dt);  }}  }
class C{  @SuppressWarnings("unchecked") public CompositeComparator(Comparator<? super T> comparator1,Comparator<? super T> comparator2){  this(new Comparator[]{comparator1,comparator2});}  }
class C{  @VisibleForTesting Optional<Boolean> checkForPAssertSuccess(DataflowPipelineJob job,@Nullable JobMetrics metrics) throws IOException {  State state=job.getState();  if (state == State.FAILED || state == State.CANCELLED) {    LOG.info("The pipeline failed");    return Optional.of(false);  }  if (metrics == null || metrics.getMetrics() == null) {    LOG.warn("Metrics not present for Dataflow job {}.",job.getJobId());    return Optional.absent();  }  int successes=0;  int failures=0;  for (  MetricUpdate metric : metrics.getMetrics()) {    if (metric.getName() == null || metric.getName().getContext() == null || !metric.getName().getContext().containsKey(TENTATIVE_COUNTER)) {      continue;    }    if (PAssert.SUCCESS_COUNTER.equals(metric.getName().getName())) {      successes+=((BigDecimal)metric.getScalar()).intValue();    } else     if (PAssert.FAILURE_COUNTER.equals(metric.getName().getName())) {      failures+=((BigDecimal)metric.getScalar()).intValue();    }  }  if (failures > 0) {    LOG.info("Found result while running Dataflow job {}. Found {} success, {} failures out of " + "{} expected assertions.",job.getJobId(),successes,failures,expectedNumberOfAssertions);    return Optional.of(false);  } else   if (successes >= expectedNumberOfAssertions) {    LOG.info("Found result while running Dataflow job {}. Found {} success, {} failures out of " + "{} expected assertions.",job.getJobId(),successes,failures,expectedNumberOfAssertions);    return Optional.of(true);  }  LOG.info("Running Dataflow job {}. Found {} success, {} failures out of {} expected " + "assertions.",job.getJobId(),successes,failures,expectedNumberOfAssertions);  return Optional.absent();}  }
class C{  private static Point2D.Double v2SubII(Point2D.Double a,Point2D.Double b){  Point2D.Double c=new Point2D.Double();  c.x=a.x - b.x;  c.y=a.y - b.y;  return (c);}  }
class C{  @Override public void provideParam(String qualifier,Object paramValue){  for (  String context : contexts) {    provideParamForContext(context,qualifier,paramValue);  }}  }
class C{  public ProtocolVersion(String version){  if (version == null) {    throw new IllegalArgumentException("null can not parsed to version");  }  Matcher versionMatcher=VERSION_PAT.matcher(version);  if (versionMatcher.find()) {    majorVersion=Integer.parseInt(versionMatcher.group(1));    minorVersion=Integer.parseInt(versionMatcher.group(2));  } else {    throw new IllegalArgumentException("version: " + version + " not supported");  }}  }
class C{  static Runnable logFailure(final Runnable runnable,Logger logger){  return null;}  }
class C{  private RegisterAttributes attributes(Register reg){  return registerAttributes[reg.number];}  }
class C{  private File launchReport(KeyNamePair pp,HttpServletRequest request,GridTab m_curTab,MQuery m_query){  WebSessionCtx wsc=WebSessionCtx.get(request);  MPrintFormat pf=MPrintFormat.get(wsc.ctx,pp.getKey(),false);  File file=launchReport(pf,request,m_curTab,m_query);  return file;}  }
class C{  public static boolean isNumber(final LuaValue target){  return target != null && target.type() == LuaValue.TNUMBER;}  }
class C{  private InetAddress socksGetServerAddress() throws UnknownHostException {  String proxyName;  InetSocketAddress addr=(InetSocketAddress)proxy.address();  proxyName=addr.getHostName();  if (proxyName == null) {    proxyName=addr.getAddress().getHostAddress();  }  return InetAddress.getByName(proxyName);}  }
class C{  public VarDefinition basicGetRef(){  return ref;}  }
class C{  @Transactional public ReceiptHeader persistChallan(final ReceiptHeader receiptHeader,final Position position,final String actionName,final String approvalRemarks) throws ApplicationRuntimeException {  final Integer validUpto=Integer.valueOf(collectionsUtil.getAppConfigValue(CollectionConstants.MODULE_NAME_COLLECTIONS_CONFIG,CollectionConstants.APPCONFIG_VALUE_CHALLANVALIDUPTO));  final Challan challan=receiptHeader.getChallan();  DateTime date=new DateTime(challan.getChallanDate());  date=date.plusDays(validUpto);  challan.setValidUpto(date.toDate());  if (challan.getChallanNumber() == null)   setChallanNumber(challan);  challan.setReceiptHeader(receiptHeader);  receiptHeader.setChallan(challan);  super.persist(receiptHeader);  LOGGER.info("Persisting challan with challan number " + challan.getChallanNumber());  challanService.workflowtransition(receiptHeader.getChallan(),position,actionName,approvalRemarks);  return receiptHeader;}  }
class C{  private int findToken(final String in,int start,MarkToken token){  int pos=start;  while (pos < in.length()) {    if (this.getToken(in,pos) == token) {      return pos;    }    pos++;  }  return -1;}  }
class C{  private static byte[] readFileToByteArray(final File file) throws IOException {  InputStream in=null;  try {    in=openInputStream(file);    return IOUtils.toByteArray(in);  }  finally {    IOUtils.closeQuietly(in);  }}  }
class C{  public static Map<String,Object> pullAndReportEntitySyncData(DispatchContext dctx,Map<String,? extends Object> context){  EntitySyncContext esc=null;  Locale locale=(Locale)context.get("locale");  try {    esc=new EntitySyncContext(dctx,context);    Debug.logInfo("Doing pullAndReportEntitySyncData for entitySyncId=" + esc.entitySyncId + ", currentRunStartTime="+ esc.currentRunStartTime+ ", currentRunEndTime="+ esc.currentRunEndTime,module);    if ("Y".equals(esc.entitySync.get("forPushOnly"))) {      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"EntityExtCannotDoEntitySyncPush",locale));    }    esc.runPullStartOrRestoreSavedResults();    while (esc.hasMoreTimeToSync()) {      esc.totalSplits++;      ArrayList<GenericValue> valuesToCreate=esc.assembleValuesToCreate();      ArrayList<GenericValue> valuesToStore=esc.assembleValuesToStore();      List<GenericEntity> keysToRemove=esc.assembleKeysToRemove();      esc.setTotalRowCounts(valuesToCreate,valuesToStore,keysToRemove);      if (Debug.infoOn())       Debug.logInfo("Service pullAndReportEntitySyncData returning - [" + valuesToCreate.size() + "] to create; ["+ valuesToStore.size()+ "] to store; ["+ keysToRemove.size()+ "] to remove; ["+ esc.totalRowsPerSplit+ "] total rows per split.",module);      if (esc.totalRowsPerSplit > 0) {        Map<String,Object> result=ServiceUtil.returnSuccess();        result.put("startDate",esc.startDate);        result.put("valuesToCreate",valuesToCreate);        result.put("valuesToStore",valuesToStore);        result.put("keysToRemove",keysToRemove);        return result;      } else {        esc.saveResultsReportedFromDataStore();        esc.advanceRunTimes();      }    }    if (!esc.hasMoreTimeToSync()) {      esc.saveFinalSyncResults();    }  } catch (  SyncAbortException e) {    return e.returnError(module);  }catch (  SyncErrorException e) {    e.saveSyncErrorInfo(esc);    return e.returnError(module);  }  return ServiceUtil.returnSuccess();}  }
class C{  public void onVerificationSmsSent(){  if (ENABLED) {    trackOpt("Verification SMS Sent",null);  }}  }
class C{  public StringLiteralConcatenation(StringLiteral str1,StringLiteral str2){  super(str1.sourceStart,str1.sourceEnd);  this.source=str1.source;  this.literals=new StringLiteral[INITIAL_SIZE];  this.counter=0;  this.literals[this.counter++]=str1;  extendsWith(str2);}  }
class C{  public void addProjectLabel(ProjectLabel projectLabel){  getProjectLabels().add(projectLabel);}  }
class C{  private void viewContact(){  Intent contactIntent=new Intent(ContactsContract.Intents.SHOW_OR_CREATE_CONTACT);  final String address=smsPopupPager.getActiveMessage().getAddress();  final boolean fromEmail=smsPopupPager.getActiveMessage().isEmail();  if (address != null) {    if (PhoneNumberUtils.isWellFormedSmsAddress(address)) {      contactIntent.setData(Uri.fromParts("tel",address,null));    } else     if (fromEmail) {      contactIntent.setData(Uri.fromParts("mailto",address,null));    }  }  if (contactIntent.resolveActivity(getPackageManager()) != null) {    startActivity(contactIntent);  }}  }
class C{  public synchronized void deleteManagedResource(ManagedResource res){  String resourceId=res.getResourceId();  ManagedResourceRegistration existingReg=registry.registered.get(resourceId);  int numObservers=existingReg.observers.size();  if (numObservers > 0) {    String errMsg=String.format(Locale.ROOT,"Cannot delete managed resource %s as it is being used by %d Solr components",resourceId,numObservers);    throw new SolrException(ErrorCode.FORBIDDEN,errMsg);  }  registry.registered.remove(resourceId);  managed.remove(resourceId);  try {    res.onResourceDeleted();  } catch (  IOException e) {    log.error("Error when trying to clean-up after deleting " + resourceId,e);  }}  }
class C{  public void unreserve(Object object){  reservedIdsLock.lock();  if (!reservedObjects.contains(object)) {    log.error(".unreserve FAILED, object=" + object);    reservedIdsLock.unlock();    return;  }  reservedObjects.remove(object);  reservedIdsLock.unlock();}  }
class C{  @Override public boolean hasNext(){  if (!isOpen)   return false;  if (m_src == null)   compile(realSource);  boolean ret=m_src.hasNext();  if (!ret) {    close();  }  return ret;}  }
class C{  public static float[] translateBounds(float[] target,float x,float y,float z,float[] src){  assert target.length == 6;  target[0]=src[0] + x;  target[1]=src[1] + y;  target[2]=src[2] + z;  target[3]=src[3] + x;  target[4]=src[4] + y;  target[5]=src[5] + z;  return target;}  }
class C{  protected void connectionLog(String message){  Logger.sqlInfoLog(message);}  }
class C{  public long optLong(String key){  return this.optLong(key,0);}  }
class C{  public MalformedConfigurationException(String message){  super(message);}  }
class C{  public IotDevice iotDevice(){  return device;}  }
class C{  @Nullable private Motion createMotionFromProperties(@NonNull final Spring spring,@NonNull final MotionProperty[] motionProperties,@Nullable final SpringListener[] springListeners,final int trackStrategy,final int followStrategy,final int restValue){  final MotionImitator[] motionImitators=new MotionImitator[motionProperties.length];  final Performer[] performers=new Performer[motionProperties.length];  for (int i=0; i < motionProperties.length; i++) {    final MotionProperty property=motionProperties[i];    motionImitators[i]=new MotionImitator(spring,property,restValue,trackStrategy,followStrategy);    performers[i]=new Performer(mView,property.getViewProperty());  }  return new Motion(spring,motionImitators,performers,springListeners);}  }
class C{  public SynchronizedProtocolEncoder(ProtocolEncoder encoder){  if (encoder == null) {    throw new IllegalArgumentException("encoder");  }  this.encoder=encoder;}  }
class C{  public boolean startPrefixMapping(String prefix,String uri,boolean shouldFlush) throws org.xml.sax.SAXException {  boolean pushed;  int pushDepth;  if (shouldFlush) {    flushPending();    pushDepth=m_elemContext.m_currentElemDepth + 1;  } else {    pushDepth=m_elemContext.m_currentElemDepth;  }  pushed=m_prefixMap.pushNamespace(prefix,uri,pushDepth);  if (pushed) {    String name;    if (EMPTYSTRING.equals(prefix)) {      name="xmlns";      addAttributeAlways(XMLNS_URI,name,name,"CDATA",uri,false);    } else {      if (!EMPTYSTRING.equals(uri)) {        name="xmlns:" + prefix;        addAttributeAlways(XMLNS_URI,prefix,name,"CDATA",uri,false);      }    }  }  return pushed;}  }
class C{  @RequestMapping(method=RequestMethod.GET,value="/{region}/{keys}",produces=MediaType.APPLICATION_JSON_UTF8_VALUE) @ApiOperation(value="read data for specific keys",notes="Read data for specific set of keys in region.",response=void.class) @ApiResponses({@ApiResponse(code=200,message="OK."),@ApiResponse(code=400,message="Bad Request."),@ApiResponse(code=401,message="Invalid Username or Password."),@ApiResponse(code=403,message="Insufficient privileges for operation."),@ApiResponse(code=404,message="Region does not exist."),@ApiResponse(code=500,message="GemFire throws an error or exception.")}) @PreAuthorize("@securityService.authorize('READ', #region, #keys)") public ResponseEntity<?> read(@PathVariable("region") String region,@PathVariable("keys") final String[] keys,@RequestParam(value="ignoreMissingKey",required=false) final String ignoreMissingKey){  logger.debug("Reading data for keys ({}) in Region ({})",ArrayUtils.toString(keys),region);  final HttpHeaders headers=new HttpHeaders();  region=decode(region);  if (keys.length == 1) {    Object value=getValue(region,keys[0]);    if (value == null) {      throw new ResourceNotFoundException(String.format("Key (%1$s) does not exist for region (%2$s) in cache!",keys[0],region));    }    final RegionEntryData<Object> data=new RegionEntryData<Object>(region);    headers.set("Content-Location",toUri(region,keys[0]).toASCIIString());    data.add(value);    return new ResponseEntity<RegionData<?>>(data,headers,HttpStatus.OK);  } else {    if (ignoreMissingKey != null && !(ignoreMissingKey.equalsIgnoreCase("true") || ignoreMissingKey.equalsIgnoreCase("false"))) {      String errorMessage=String.format("ignoreMissingKey param (%1$s) is not valid. valid usage is ignoreMissingKey=true!",ignoreMissingKey);      return new ResponseEntity<String>(convertErrorAsJson(errorMessage),HttpStatus.BAD_REQUEST);    }    if (!("true".equalsIgnoreCase(ignoreMissingKey))) {      List<String> unknownKeys=checkForMultipleKeysExist(region,keys);      if (unknownKeys.size() > 0) {        String unknownKeysAsStr=StringUtils.collectionToDelimitedString(unknownKeys,",");        String erroString=String.format("Requested keys (%1$s) not exist in region (%2$s)",StringUtils.collectionToDelimitedString(unknownKeys,","),region);        return new ResponseEntity<String>(convertErrorAsJson(erroString),headers,HttpStatus.BAD_REQUEST);      }    }    final Map<Object,Object> valueObjs=getValues(region,keys);    String keyList=StringUtils.collectionToDelimitedString(valueObjs.keySet(),",");    headers.set("Content-Location",toUri(region,keyList).toASCIIString());    final RegionData<Object> data=new RegionData<Object>(region);    data.add(valueObjs.values());    return new ResponseEntity<RegionData<?>>(data,headers,HttpStatus.OK);  }}  }
class C{  public void startPart(String contentType,String[] headers) throws IOException {  writeCurrentBoundary();  if (contentType != null) {    writeString(MimeUtils.HEADER_CONTENT_TYPE + ": " + contentType);    out.write(CRLF);  }  for (int i=0; headers != null && i < headers.length; i++) {    writeString(headers[i]);    out.write(CRLF);  }  out.write(CRLF);}  }
class C{  public CStartTraceAction(final JFrame parent,final IFrontEndDebuggerProvider debugger,final ZyGraph graph){  m_parent=Preconditions.checkNotNull(parent,"IE00303: Parent argument can not be null");  m_debugger=Preconditions.checkNotNull(debugger,"IE01538: Debugger argument can not be null");  m_graph=Preconditions.checkNotNull(graph,"IE01539: Graph argument can not be null");  putValue(Action.NAME,"BT");  putValue(Action.SHORT_DESCRIPTION,"Start Trace Mode");  putValue(Action.SMALL_ICON,new ImageIcon("data/record_up.jpg"));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static List<UserGroup> toUserGroups(List<POUserGroup> poUserGroups) throws ValidationException {  BLValidator.isNotNull("poUserGroups",poUserGroups);  List<UserGroup> userGroups=new ArrayList<UserGroup>();  for (  POUserGroup poUserGroup : poUserGroups) {    userGroups.add(toUserGroup(poUserGroup));  }  return userGroups;}  }
class C{  private boolean isUnconfirmed(){  int no=DB.getSQLValue(null,"SELECT COUNT(*) FROM M_InOutLineConfirm WHERE AD_Client_ID=?",Env.getAD_Client_ID(Env.getCtx()));  if (no > 0)   return true;  no=DB.getSQLValue(null,"SELECT COUNT(*) FROM M_MovementLineConfirm WHERE AD_Client_ID=?",Env.getAD_Client_ID(Env.getCtx()));  return no > 0;}  }
class C{  public boolean evaluate(EventBean theEvent){  return evaluatePerStream(new EventBean[]{theEvent});}  }
class C{  public static String toNTriplesString(Resource resource){  if (resource instanceof IRI) {    return toNTriplesString((IRI)resource);  } else   if (resource instanceof BNode) {    return toNTriplesString((BNode)resource);  } else {    throw new IllegalArgumentException("Unknown resource type: " + resource.getClass());  }}  }
class C{  public void customizePresentation(@NotNull ColoredTextContainer component){  XSourcePosition position=getSourcePosition();  if (position != null) {    component.append(position.getFile().getName(),SimpleTextAttributes.REGULAR_ATTRIBUTES);    component.append(":" + (position.getLine() + 1),SimpleTextAttributes.REGULAR_ATTRIBUTES);    component.setIcon(AllIcons.Debugger.StackFrame);  } else {    component.append(XDebuggerBundle.message("invalid.frame"),SimpleTextAttributes.ERROR_ATTRIBUTES);  }}  }
class C{  @Override public final void attrSplit(int attr,Instances inst) throws Exception {  int i, len, part;  Impurity imp;  int low=0;  int high=inst.numInstances() - 1;  this.initialize(low,high,attr);  if (number < 4) {    return;  }  len=((high - low + 1) < 5) ? 1 : (high - low + 1) / 5;  position=low;  part=low + len - 1;  imp=new Impurity(part,attr,inst,5);  for (i=low + len; i <= high - len - 1; i++) {    imp.incremental(inst.instance(i).classValue(),1);    if (Utils.eq(inst.instance(i + 1).value(attr),inst.instance(i).value(attr)) == false) {      if (imp.impurity > maxImpurity) {        maxImpurity=imp.impurity;        splitValue=(inst.instance(i).value(attr) + inst.instance(i + 1).value(attr)) * 0.5;        leftAve=imp.sl / imp.nl;        rightAve=imp.sr / imp.nr;        position=i;      }    }  }}  }
class C{  public Object jjtAccept(ParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  protected void onPause(){  super.onPause();  try {    if (client != null) {      client.stop();      Log.i("Jetty","Stopped httpclient");    }  } catch (  Exception e) {    Log.e("Jetty","Error stopping httpclient ",e);  } finally {    client=null;    if (fileInProgress != null) {      _progressBar.setVisibility(ProgressBar.INVISIBLE);      ((TextView)findViewById(R.id.loading)).setVisibility(TextView.INVISIBLE);      ((EditText)findViewById(R.id.download_url)).setText("");      ((EditText)findViewById(R.id.context_path)).setText("");      if (fileInProgress != null)       Installer.clean(fileInProgress);      fileInProgress=null;    }  }}  }
class C{  public T next(){  return array.cursorNext(cursorId);}  }
class C{  protected Sample sample(){  Sample sample=new Sample();  if (isTerminated) {    return sample;  }  try {    for (    BNode n : sortedNodes) {      String id=n.getId();      if (n.getInputNodeIds().isEmpty() && evidence.containsVar(id)) {        sample.addPair(id,evidence.getValue(id));      } else       if (n instanceof ChanceNode) {        sampleChanceNode((ChanceNode)n,sample);      } else       if (n instanceof ActionNode) {        sampleActionNode((ActionNode)n,sample);      } else       if (n instanceof UtilityNode) {        double newUtil=((UtilityNode)n).getUtility(sample);        sample.addUtility(newUtil);      }    }    sample.trim(queryVars);  } catch (  RuntimeException e) {    log.warning("exception caught: " + e);    e.printStackTrace();  }  return sample;}  }
class C{  public final boolean greaterEquals(ProtocolVersion version){  return isComparable(version) && (compareToVersion(version) >= 0);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:20.008 -0400",hash_original_method="BFDD71499687D637F57FF5151EA7665D",hash_generated_method="15D875AD3B87D08D9F9ACE2C248B6583") public boolean offer(E e,long timeout,TimeUnit unit){  return offer(e);}  }
class C{  public static void localizeParameterDefOption(DataService dm,long objKey) throws NonUniqueBusinessKeyException {  create(dm,objKey,LocalizedObjectTypes.OPTION_PARAMETER_DEF_DESC);}  }
class C{  public MultipartBuilder inline(InputStream is,String cidName){  return bodyPart(new StreamDataBodyPart("inline",is,cidName));}  }
class C{  public boolean hasNativeTheme(){  return impl.hasNativeTheme();}  }
class C{  @Override public boolean isIdentity(){  return isMatrixIdentity(mActiveTransform,1e-3f);}  }
class C{  public static boolean isODKTablesInstanceDataDirectory(File directory){  String dirPath=directory.getAbsolutePath();  if (dirPath.startsWith(Collect.ODK_ROOT)) {    dirPath=dirPath.substring(Collect.ODK_ROOT.length());    String[] parts=dirPath.split(File.separator);    if (parts.length == 4 && parts[1].equals("instances")) {      return true;    }  }  return false;}  }
class C{  protected TraceCase_Impl(){  super();}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  DefaultMultiValueCategoryDataset clone=(DefaultMultiValueCategoryDataset)super.clone();  clone.data=(KeyedObjects2D)this.data.clone();  return clone;}  }
class C{  private StringBuilder DFS(StringBuilder sb,TreeNode node,int depth){  for (int i=0; i < 2 * depth; i++) {    sb.append(' ');  }  sb.append(node).append('\n');  Enumeration<TreeNode> childEnum=node.getChildren();  while (childEnum.hasMoreElements()) {    TreeNode child=childEnum.nextElement();    DFS(sb,child,depth + 1);  }  return sb;}  }
class C{  @Override public Iterator<ReferenceContainer<WordReference>> iterator(){  return this.containers.iterator();}  }
class C{  private static Region split(Region t){  if (t.right.right.level == t.level) {    t=rotateWithRightChild(t);    t.level++;  }  return t;}  }
class C{  public void addEntry(int severity,String msg,RefactoringStatusContext context,String pluginId,int code){  fEntries.add(new RefactoringStatusEntry(severity,msg,context,pluginId,code));  fSeverity=Math.max(fSeverity,severity);}  }
class C{  private static <K,V>void putNew(Map<K,V> m,K key,V value){  if (key == null) {    ErrorReporter.errorAbort("StubParser: key is null!");    return;  }  if (m.containsKey(key) && !m.get(key).equals(value)) {    ErrorReporter.errorAbort("StubParser: key is already in map: " + LINE_SEPARATOR + "  "+ key+ " => "+ m.get(key)+ LINE_SEPARATOR+ "while adding: "+ LINE_SEPARATOR+ "  "+ key+ " => "+ value);  }  m.put(key,value);}  }
class C{  public void testPollFirst(){  LinkedBlockingDeque q=populatedDeque(SIZE);  for (int i=0; i < SIZE; ++i) {    assertEquals(i,q.pollFirst());  }  assertNull(q.pollFirst());}  }
class C{  public void addComponent(MultiblockComponent component){  if (getComponentForLocation(component.getRelativePosition()) != null)   throw new IllegalArgumentException("Location in multiblock already occupied");  components.add(component);  changeAxisForNewComponent(component.getRelativePosition());  calculateCostForNewComponent(component);  addComponentToLocationCache(component);}  }
class C{  public GenericAttrNS(String nsURI,String qname,AbstractDocument owner) throws DOMException {  super(nsURI,qname,owner);  setNodeName(qname);}  }
class C{  private void sendTaskSchedulerServicePatch(){  TaskSchedulerService.State s=new TaskSchedulerService.State();  TaskSchedulerServiceHelper.sendPatchToOwner(this,getHost(),HousekeeperServiceGroup.getTaskSchedulerImageHostToHostServiceUri(),s,UriUtils.buildUri(getHost(),getSelfLink()));}  }
class C{  public static StringBuilder appendMap(StringBuilder buff,HashMap<String,?> map){  ArrayList<String> list=New.arrayList(map.keySet());  Collections.sort(list);  for (  String k : list) {    appendMap(buff,k,map.get(k));  }  return buff;}  }
class C{  private static void createEntriesK1andK2(){  try {    Region r1=cache.getRegion(Region.SEPARATOR + REGION_NAME);    assertNotNull(r1);    if (!r1.containsKey("key1")) {      r1.create("key1","key-1");    }    if (!r1.containsKey("key2")) {      r1.create("key2","key-2");    }    assertEquals(r1.getEntry("key1").getValue(),"key-1");    assertEquals(r1.getEntry("key2").getValue(),"key-2");  } catch (  Exception ex) {    Assert.fail("failed while createEntries()",ex);  }}  }
class C{  @Override public void transactionCommited(final long commitTime){  if (listeners.isEmpty()) {    records.reset();  } else {    records.flush();    listeners.forEach(null);  }}  }
class C{  public void addEventListener(WalletEventListener listener){  addChangeEventListener(Threading.USER_THREAD,listener);  addCoinsReceivedEventListener(Threading.USER_THREAD,listener);  addCoinsSentEventListener(Threading.USER_THREAD,listener);  addKeyChainEventListener(Threading.USER_THREAD,listener);  addReorganizeEventListener(Threading.USER_THREAD,listener);  addScriptChangeEventListener(Threading.USER_THREAD,listener);  addTransactionConfidenceEventListener(Threading.USER_THREAD,listener);}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == TypableElement.class) {switch (derivedFeatureID) {default :      return -1;  }}if (baseClass == IdentifiableElement.class) {switch (derivedFeatureID) {case N4JSPackage.VARIABLE__NAME:    return TypesPackage.IDENTIFIABLE_ELEMENT__NAME;default :  return -1;}}if (baseClass == NamedElement.class) {switch (derivedFeatureID) {default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public boolean isRoot(File dir){  return roots.contains(dir);}  }
class C{  public static <S extends HasMouseDownHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    MouseDownEvent event=new MouseDownEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public void info(String msg,Object arg0,Object arg1,Object arg2){  innerLog(Level.INFO,null,msg,arg0,arg1,arg2,null);}  }
class C{  public static CommandResult execCommand(String[] commands,boolean isRoot,boolean isNeedResultMsg){  int result=-1;  if (commands == null || commands.length == 0) {    return new CommandResult(result,null,null);  }  Process process=null;  BufferedReader successResult=null;  BufferedReader errorResult=null;  StringBuilder successMsg=null;  StringBuilder errorMsg=null;  DataOutputStream os=null;  try {    process=Runtime.getRuntime().exec(isRoot ? COMMAND_SU : COMMAND_SH);    os=new DataOutputStream(process.getOutputStream());    for (    String command : commands) {      if (command == null) {        continue;      }      os.write(command.getBytes());      os.writeBytes(COMMAND_LINE_END);      os.flush();    }    os.writeBytes(COMMAND_EXIT);    os.flush();    result=process.waitFor();    if (isNeedResultMsg) {      successMsg=new StringBuilder();      errorMsg=new StringBuilder();      successResult=new BufferedReader(new InputStreamReader(process.getInputStream()));      errorResult=new BufferedReader(new InputStreamReader(process.getErrorStream()));      String s;      while ((s=successResult.readLine()) != null) {        successMsg.append(s);      }      while ((s=errorResult.readLine()) != null) {        errorMsg.append(s);      }    }  } catch (  IOException e) {    e.printStackTrace();  }catch (  Exception e) {    e.printStackTrace();  } finally {    try {      if (os != null) {        os.close();      }      if (successResult != null) {        successResult.close();      }      if (errorResult != null) {        errorResult.close();      }    } catch (    IOException e) {      e.printStackTrace();    }    if (process != null) {      process.destroy();    }  }  return new CommandResult(result,successMsg == null ? null : successMsg.toString(),errorMsg == null ? null : errorMsg.toString());}  }
class C{  protected CCBitmapFontConfiguration(String FNTfile){  super();  kerningDictionary=new IntMap<tKerningHashElement>();  parseConfigFile(FNTfile);}  }
class C{  public BufferedImage createCompatibleDestImage(BufferedImage src,ColorModel destCM){  BufferedImage dest=null;  if (destCM == null)   destCM=src.getColorModel();  dest=new BufferedImage(destCM,destCM.createCompatibleWritableRaster(src.getWidth(),src.getHeight()),destCM.isAlphaPremultiplied(),null);  return dest;}  }
class C{  public void newVariable(Element var,JComponent col,GridBagLayout g,GridBagConstraints cs,boolean showStdName){  String name=var.getAttribute("item").getValue();  int i=_varModel.findVarIndex(name);  if (i < 0) {    log.trace("Variable \"{}\" not found, omitted",name);    return;  }  Attribute attr;  String layout="left";  if ((attr=var.getAttribute("layout")) != null && attr.getValue() != null) {    layout=attr.getValue();  }  String label=name;  if (!showStdName) {    label=_varModel.getLabel(i);  }  String temp=LocaleSelector.getAttribute(var,"label");  if (temp != null) {    label=temp;  }  JComponent rep=getRepresentation(name,var);  varList.add(Integer.valueOf(i));  JLabel l=new WatchingLabel(label,rep);  int spaceWidth=getFontMetrics(l.getFont()).stringWidth(" ");  if (layout.equals("left")) {    cs.anchor=GridBagConstraints.EAST;    cs.ipadx=spaceWidth;    g.setConstraints(l,cs);    col.add(l);    cs.ipadx=0;    cs.gridx++;    cs.anchor=GridBagConstraints.WEST;    g.setConstraints(rep,cs);    col.add(rep);  } else   if (layout.equals("right")) {    cs.anchor=GridBagConstraints.EAST;    g.setConstraints(rep,cs);    col.add(rep);    cs.gridx++;    cs.anchor=GridBagConstraints.WEST;    cs.ipadx=spaceWidth;    g.setConstraints(l,cs);    col.add(l);    cs.ipadx=0;  } else   if (layout.equals("below")) {    cs.anchor=GridBagConstraints.CENTER;    g.setConstraints(rep,cs);    col.add(rep);    cs.gridy++;    cs.anchor=GridBagConstraints.WEST;    cs.ipadx=spaceWidth;    g.setConstraints(l,cs);    col.add(l);    cs.ipadx=0;  } else   if (layout.equals("above")) {    cs.anchor=GridBagConstraints.WEST;    cs.ipadx=spaceWidth;    g.setConstraints(l,cs);    col.add(l);    cs.ipadx=0;    cs.gridy++;    cs.anchor=GridBagConstraints.CENTER;    g.setConstraints(rep,cs);    col.add(rep);  } else {    log.error("layout internally inconsistent: " + layout);    return;  }}  }
class C{  public SelectionButtonDialogField(int buttonStyle){  super();  fIsSelected=false;  fAttachedDialogFields=null;  fButtonStyle=buttonStyle;}  }
class C{  public boolean isDirectory(){  if (file != null) {    return file.isDirectory();  }  if (linkFlag == LF_DIR) {    return true;  }  if (getName().endsWith("/")) {    return true;  }  return false;}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  doReadObject(in);}  }
class C{  private E xfer(E e,boolean haveData,int how,long nanos){  if (haveData && (e == null))   throw new NullPointerException();  Node s=null;  retry:   for (; ; ) {    for (Node h=head, p=h; p != null; ) {      boolean isData=p.isData;      Object item=p.item;      if (item != p && (item != null) == isData) {        if (isData == haveData)         break;        if (p.casItem(item,e)) {          for (Node q=p; q != h; ) {            Node n=q.next;            if (head == h && casHead(h,n == null ? q : n)) {              h.forgetNext();              break;            }            if ((h=head) == null || (q=h.next) == null || !q.isMatched())             break;          }          LockSupport.unpark(p.waiter);          return LinkedTransferQueue.<E>cast(item);        }      }      Node n=p.next;      p=(p != n) ? n : (h=head);    }    if (how != NOW) {      if (s == null)       s=new Node(e,haveData);      Node pred=tryAppend(s,haveData);      if (pred == null)       continue retry;      if (how != ASYNC)       return awaitMatch(s,pred,e,(how == TIMED),nanos);    }    return e;  }}  }
class C{  public void testSynonymsPhrase() throws Exception {  MultiPhraseQuery.Builder expectedQBuilder=new MultiPhraseQuery.Builder();  expectedQBuilder.add(new Term(FIELD,"old"));  expectedQBuilder.add(new Term[]{new Term(FIELD,"dogs"),new Term(FIELD,"dog")});  QueryParser qp=new QueryParser(FIELD,new MockSynonymAnalyzer());  assertEquals(expectedQBuilder.build(),qp.parse("\"old dogs\""));  qp.setDefaultOperator(Operator.AND);  assertEquals(expectedQBuilder.build(),qp.parse("\"old dogs\""));  BoostQuery expected=new BoostQuery(expectedQBuilder.build(),2f);  assertEquals(expected,qp.parse("\"old dogs\"^2"));  expectedQBuilder.setSlop(3);  expected=new BoostQuery(expectedQBuilder.build(),2f);  assertEquals(expected,qp.parse("\"old dogs\"~3^2"));}  }
class C{  public static String byteArray2String(final byte[] array,final String prefix,final String delimiter,final boolean brackets,final int radix){  if (array == null) {    return null;  }  final int maxlen=Integer.toString(0xFF,radix).length();  final String zero="00000000";  final String normDelim=delimiter == null ? " " : delimiter;  final String normPrefix=prefix == null ? "" : prefix;  final StringBuilder result=new StringBuilder(array.length * 4);  if (brackets) {    result.append('[');  }  boolean nofirst=false;  for (  final byte b : array) {    if (nofirst) {      result.append(normDelim);    } else {      nofirst=true;    }    result.append(normPrefix);    final String v=Integer.toString(b & 0xFF,radix);    if (v.length() < maxlen) {      result.append(zero.substring(0,maxlen - v.length()));    }    result.append(v.toUpperCase(Locale.ENGLISH));  }  if (brackets) {    result.append(']');  }  return result.toString();}  }
class C{  public SMIDAS(double eta,int epochs,double lambda,Loss loss,boolean reScale){  setEta(eta);  setEpochs(epochs);  setLambda(lambda);  setLoss(loss);  setReScale(reScale);}  }
class C{  public boolean isCumulative(){  return cumulative;}  }
class C{  protected String render(SQLSkin skin) throws RenderingException {  return this.insert.render(skin);}  }
class C{  public SpanFirstQueryBuilder queryName(String queryName){  this.queryName=queryName;  return this;}  }
class C{  public GitlabLabel createLabel(Serializable projectId,String name,String color) throws IOException {  String tailUrl=GitlabProject.URL + "/" + projectId+ GitlabLabel.URL;  return dispatch().with("name",name).with("color",color).to(tailUrl,GitlabLabel.class);}  }
class C{  private boolean isCollapsed(){  return mTabSpinner != null && mTabSpinner.getParent() == this;}  }
class C{  public DefaultMutableTreeNode(){  this(null);}  }
class C{  public static double var(int[] a){  if (a.length == 0)   return Double.NaN;  double avg=mean(a);  double sum=0.0;  for (int i=0; i < a.length; i++) {    sum+=(a[i] - avg) * (a[i] - avg);  }  return sum / (a.length - 1);}  }
class C{  @HLEFunction(nid=0xC58BCD9E,version=150) public int sceNetAdhocMatchingGetMembers(@CheckArgument("checkMatchingId") int matchingId,TPointer32 sizeAddr,@CanBeNull TPointer buf){  final int matchingMemberSize=12;  MatchingObject matchingObject=matchingObjects.get(matchingId);  List<pspNetMacAddress> members=matchingObject.getMembers();  int size=sizeAddr.getValue();  sizeAddr.setValue(matchingMemberSize * members.size());  if (log.isDebugEnabled()) {    log.debug(String.format("sceNetAdhocMatchingGetMembers returning size=%d",sizeAddr.getValue()));  }  if (buf.isNotNull()) {    int offset=0;    for (    pspNetMacAddress member : members) {      if (offset + matchingMemberSize > size || member == null) {        break;      }      if (log.isDebugEnabled()) {        log.debug(String.format("sceNetAdhocMatchingGetMembers returning %s at 0x%08X",member,buf.getAddress() + offset));      }      offset+=4;      member.write(buf,offset);      offset+=member.sizeof();      buf.setValue16(offset,(short)0);      offset+=2;    }    fillNextPointersInLinkedList(buf,offset,matchingMemberSize);  }  return 0;}  }
class C{  public synchronized int read(byte[] buf,int start,int count) throws InterruptedException {  while (mSize == 0 && !mClosed) {    wait(TIMEOUT);  }  if (mSize == 0 && mClosed) {    return -1;  } else {    final boolean wasFull=mSize == mBuf.length;    final int spaceUntilEnd=mBuf.length - mStart;    final int copied=Math.min(count,Math.min(mSize,spaceUntilEnd));    System.arraycopy(mBuf,mStart,buf,start,copied);    mStart+=copied;    mSize-=copied;    if (mStart == mBuf.length) {      mStart=0;    }    if (wasFull) {      notifyAll();    }    assert globalIntegrity();    if (copied / 1000 < mReadHist.length - 1) {      mReadHist[copied / 1000]++;    } else {      mReadHist[mReadHist.length - 1]++;    }    return copied;  }}  }
class C{  public SparseIntArray(int initialCapacity){  mKeys=new int[initialCapacity];  mValues=new int[initialCapacity];  mSize=0;}  }
class C{  public void startDocument() throws org.xml.sax.SAXException {}  }
class C{  public String toRFC1779String(){  return toRFC1779String(Collections.<String,String>emptyMap());}  }
class C{  @CheckForNull public static Dotcake fromJson(FileObject dotcakeFile){  if (!isDotcake(dotcakeFile)) {    return null;  }  try (InputStream inputStream=new BufferedInputStream(dotcakeFile.getInputStream())){    try (InputStreamReader reader=new InputStreamReader(inputStream,CakePHP3Constants.UTF8)){      Dotcake dotcake=JsonSimpleSupport.fromJson(reader,Dotcake.class);      if (dotcake == null) {        return null;      }      dotcake.setDotcakeFile(FileUtil.toFile(dotcakeFile));      return dotcake;    }   } catch (  UnsupportedEncodingException|FileNotFoundException ex) {    Exceptions.printStackTrace(ex);  }catch (  IOException ex) {    LOGGER.log(Level.WARNING,ex.getMessage());  }  return null;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:14.184 -0500",hash_original_method="0B6FE6D01B20019581445CB40F5DED3F",hash_generated_method="EBBEEB29C41D0AA39444F5EA24292722") @Override protected Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    throw new AssertionError(e);  }}  }
class C{  public void clearBackground(){  mBackgroundManager.setThemeDrawableResourceId(mDefaultBackground);}  }
class C{  public void discoverable(BluetoothAdapter adapter){  int mask=BluetoothReceiver.SCAN_MODE_CONNECTABLE_DISCOVERABLE_FLAG;  if (!adapter.isEnabled()) {    fail("discoverable() bluetooth not enabled");  }  int scanMode=adapter.getScanMode();  if (scanMode == BluetoothAdapter.SCAN_MODE_CONNECTABLE_DISCOVERABLE) {    return;  }  BluetoothReceiver receiver=getBluetoothReceiver(mask);  assertEquals(BluetoothAdapter.SCAN_MODE_CONNECTABLE,scanMode);  long start=System.currentTimeMillis();  assertTrue(adapter.setScanMode(BluetoothAdapter.SCAN_MODE_CONNECTABLE_DISCOVERABLE));  while (System.currentTimeMillis() - start < DISCOVERABLE_UNDISCOVERABLE_TIMEOUT) {    scanMode=adapter.getScanMode();    if (scanMode == BluetoothAdapter.SCAN_MODE_CONNECTABLE_DISCOVERABLE && (receiver.getFiredFlags() & mask) == mask) {      writeOutput(String.format("discoverable() completed in %d ms",(receiver.getCompletedTime() - start)));      removeReceiver(receiver);      return;    }    sleep(POLL_TIME);  }  int firedFlags=receiver.getFiredFlags();  removeReceiver(receiver);  fail(String.format("discoverable() timeout: scanMode=%d (expected %d), flags=0x%x " + "(expected 0x%x)",scanMode,BluetoothAdapter.SCAN_MODE_CONNECTABLE_DISCOVERABLE,firedFlags,mask));}  }
class C{  public static void sort(int[] data,int start,int end,Comparator<? super DBIDRef> comp){  quickSort(data,start,end - 1,comp,new IntegerDBIDVar(),new IntegerDBIDVar(),new IntegerDBIDVar());}  }
class C{  private void createItemsLayout(){  if (itemsLayout == null) {    itemsLayout=new LinearLayout(getContext());    itemsLayout.setOrientation(LinearLayout.VERTICAL);  }}  }
class C{  public static <T>FutureW<T> fromPublisher(final Publisher<T> pub,final Executor ex){  final ValueSubscriber<T> sub=ValueSubscriber.subscriber();  pub.subscribe(sub);  return sub.toFutureWAsync(ex);}  }
class C{  public static HttpServletResponse buildMockResponseObjectForResponse(final StringWriter sw) throws IOException {  HttpServletResponse response=createMock(HttpServletResponse.class);  response.setContentType("text/html");  expect(response.getWriter()).andReturn(new PrintWriter(sw)).anyTimes();  replay(response);  return response;}  }
class C{  public void testConnectExponentialBackoffStrategy() throws Throwable {  ConnectionStrategy strategy=ConnectionStrategies.EXPONENTIAL_BACKOFF;  ConnectionStrategy.Attempt attempt;  attempt=mock(ConnectionStrategy.Attempt.class);  when(attempt.attempt()).thenReturn(1);  strategy.attemptFailed(attempt);  verify(attempt).retry(Duration.ofSeconds(2));  attempt=mock(ConnectionStrategy.Attempt.class);  when(attempt.attempt()).thenReturn(2);  strategy.attemptFailed(attempt);  verify(attempt).retry(Duration.ofSeconds(4));  attempt=mock(ConnectionStrategy.Attempt.class);  when(attempt.attempt()).thenReturn(3);  strategy.attemptFailed(attempt);  verify(attempt).retry(Duration.ofSeconds(8));  attempt=mock(ConnectionStrategy.Attempt.class);  when(attempt.attempt()).thenReturn(4);  strategy.attemptFailed(attempt);  verify(attempt).retry(Duration.ofSeconds(16));  attempt=mock(ConnectionStrategy.Attempt.class);  when(attempt.attempt()).thenReturn(5);  strategy.attemptFailed(attempt);  verify(attempt).retry(Duration.ofSeconds(32));}  }
class C{  public Message(ZulipApp app,JSONObject message,Map<String,Person> personCache,Map<String,Stream> streamCache) throws JSONException {  this.setID(message.getInt("id"));  this.setSender(Person.getOrUpdate(app,message.getString("sender_email"),message.getString("sender_full_name"),message.getString("avatar_url"),personCache));  if (message.getString("type").equals("stream")) {    this.setType(MessageType.STREAM_MESSAGE);    String streamName=message.getString("display_recipient");    Stream stream=null;    if (streamCache != null) {      stream=streamCache.get(streamName);    }    if (stream == null) {      stream=Stream.getByName(app,streamName);      if (streamCache != null) {        streamCache.put(streamName,stream);      }    }    setStream(stream);  } else   if (message.getString("type").equals("private")) {    this.setType(MessageType.PRIVATE_MESSAGE);    JSONArray jsonRecipients=message.getJSONArray("display_recipient");    Person[] r=new Person[jsonRecipients.length()];    for (int i=0; i < jsonRecipients.length(); i++) {      JSONObject obj=jsonRecipients.getJSONObject(i);      Person person=Person.getOrUpdate(app,obj.getString("email"),obj.getString("full_name"),null,personCache);      r[i]=person;    }    setRecipients(recipientList(r));  }  String html=message.getString("content");  this.setFormattedContent(html);  Spanned formattedContent=formatContent(html,app);  this.setContent(formattedContent.toString());  if (this.getType() == MessageType.STREAM_MESSAGE) {    this.setSubject(message.getString("subject"));  } else {    this.setSubject(null);  }  this.setTimestamp(new Date(message.getLong("timestamp") * 1000));  this.setMessageRead(false);}  }
class C{  public GPUImage3x3ConvolutionFilter(){  this(new float[]{0.0f,0.0f,0.0f,0.0f,1.0f,0.0f,0.0f,0.0f,0.0f});}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.TRACE_OPTIONS___TRACE_OPTION_1:    return traceOption_1 != null && !traceOption_1.isEmpty();case UmplePackage.TRACE_OPTIONS___ANONYMOUS_TRACE_OPTIONS_11:  return anonymous_traceOptions_1_1 != null && !anonymous_traceOptions_1_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public void end() throws ProcessorError {}  }
class C{  @Override public void initMutator(int id){  super.initMutator(id);  mature.rebind(GenCopy.toSpace());}  }
class C{  public String reverseVowels(String s){  if (s == null || s.isEmpty())   return s;  StringBuilder sb=new StringBuilder(s);  String vowels="aeiouAEIOU";  int i=0;  int j=s.length() - 1;  while (i < j) {    while (i < j && vowels.indexOf(s.charAt(i)) == -1) {      i++;    }    while (i < j && vowels.indexOf(s.charAt(j)) == -1) {      j--;    }    char c=sb.charAt(i);    sb.setCharAt(i,sb.charAt(j));    sb.setCharAt(j,c);    i++;    j--;  }  return sb.toString();}  }
class C{  private static ValueLob createClob(Reader in,long length,DataHandler handler){  try {    if (handler == null) {      String s=IOUtils.readStringAndClose(in,(int)length);      return createSmallLob(Value.CLOB,s.getBytes(Constants.UTF8));    }    boolean compress=handler.getLobCompressionAlgorithm(Value.CLOB) != null;    long remaining=Long.MAX_VALUE;    if (length >= 0 && length < remaining) {      remaining=length;    }    int len=getBufferSize(handler,compress,remaining);    char[] buff;    if (len >= Integer.MAX_VALUE) {      String data=IOUtils.readStringAndClose(in,-1);      buff=data.toCharArray();      len=buff.length;    } else {      buff=new char[len];      len=IOUtils.readFully(in,buff,len);    }    if (len <= handler.getMaxLengthInplaceLob()) {      byte[] small=new String(buff,0,len).getBytes(Constants.UTF8);      return ValueLob.createSmallLob(Value.CLOB,small);    }    ValueLob lob=new ValueLob(Value.CLOB,null);    lob.createFromReader(buff,len,in,remaining,handler);    return lob;  } catch (  IOException e) {    throw DbException.convertIOException(e,null);  }}  }
class C{  public DropboxVirtualVolume(String rootDirectory,DropboxConnector mDBCon) throws FileNotFoundException {  super(new DropboxVirtualFile(rootDirectory,(DropboxVirtualVolume)null));  this.mDBCon=mDBCon;}  }
class C{  public static String compXmlString(byte[] xml,int sitOff,int stOff,int strInd){  if (strInd < 0)   return null;  int strOff=stOff + LEW(xml,sitOff + strInd * 4);  return compXmlStringAt(xml,strOff);}  }
class C{  private Region findReplace(final FindReplaceOperationCode operationCode,int startOffset,String findString,String replaceText,boolean forwardSearch,boolean caseSensitive,boolean wholeWord) throws BadLocationException {  if ((operationCode == REPLACE || operationCode == REPLACE_FIND_NEXT) && (fFindReplaceState != FIND_FIRST && fFindReplaceState != FIND_NEXT))   throw new IllegalStateException("illegal findReplace state: cannot replace without preceding find");  if (operationCode == FIND_FIRST) {    if (findString == null || findString.length() == 0)     return null;    if (startOffset < 0 || startOffset >= length())     throw new BadLocationException();    String patternFlags="g";    if (caseSensitive)     patternFlags+="i";    if (wholeWord)     findString="\\b" + findString + "\\b";    if (!wholeWord)     findString=asRegPattern(findString);    fFindReplaceMatchOffset=startOffset;    regExp=RegExp.compile(findString,patternFlags);    regExp.setLastIndex(fFindReplaceMatchOffset);  }  fFindReplaceState=operationCode;  if (operationCode != REPLACE) {    if (forwardSearch) {      MatchResult matchResult=regExp.exec(String.valueOf(this));      if (matchResult != null && matchResult.getGroupCount() > 0 && !matchResult.getGroup(0).isEmpty())       return new RegionImpl(matchResult.getIndex(),matchResult.getGroup(0).length());      return null;    }    regExp.setLastIndex(0);    MatchResult matchResult=regExp.exec(String.valueOf(this));    boolean found=matchResult != null;    int index=-1;    int length=-1;    while (found && matchResult.getIndex() + matchResult.getGroup(0).length() <= fFindReplaceMatchOffset + 1) {      index=matchResult.getIndex();      length=matchResult.getGroup(0).length();      regExp.setLastIndex(index + 1);      matchResult=regExp.exec(String.valueOf(this));      found=matchResult != null;    }    fFindReplaceMatchOffset=index;    if (index > -1) {      regExp.setLastIndex(index);      matchResult=regExp.exec(String.valueOf(this));      return new RegionImpl(index,length);    }    return null;  }  return null;}  }
class C{  public static void addScreenToHistory(String screeName){  if (BuildConfig.FABRIC_CONFIGURED) {    addScreen(screeName);    Crashlytics.setString(SCREEN_HISTORY,history.toString());  }}  }
class C{  @Deprecated public SimpleOrderedMap(List<Object> nameValuePairs){  super(nameValuePairs);}  }
class C{  public static String readHostileExceptionMessage(Throwable e){  String errorMsg=e.getClass().getName();  if (e.getMessage() != null) {    errorMsg+=": " + e.getMessage();  }  Throwable cause=e.getCause();  int safetyCounter=0;  while (cause != null && safetyCounter < 10) {    safetyCounter++;    errorMsg+=", cause:" + cause.getClass().getName();    if (cause.getMessage() != null) {      errorMsg+=": " + cause.getMessage();    }    cause=cause.getCause();  }  return errorMsg;}  }
class C{  public void close(){  db.close();}  }
class C{  public Caption(String caption,Font font,Color c,float alpha,Position position,int insets){  this.caption=caption;  this.font=font;  this.c=c;  this.alpha=alpha;  this.position=position;  this.insets=insets;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_ACTION_1__CODE_LANG_1:    return getCodeLang_1();case UmplePackage.ANONYMOUS_ACTION_1__CODE_LANGS_1:  return getCodeLangs_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private void addSynapseGroupRecurrent(SynapseGroup sg){  SynapseGroupNodeRecurrent synGNR=SynapseGroupNodeRecurrent.createRecurrentSynapseGN(this,sg);  objectNodeMap.put(sg,synGNR);  canvas.getLayer().addChild(synGNR);  NeuronGroupNode srcNode=(NeuronGroupNode)objectNodeMap.get(sg.getSourceNeuronGroup());  if (srcNode != null) {    srcNode.addPropertyChangeListener(PNode.PROPERTY_FULL_BOUNDS,synGNR);  }  if (sg.hasParentGroup()) {    SubnetworkNode parentNode=(SubnetworkNode)objectNodeMap.get(sg.getParentGroup());    if (parentNode != null) {      parentNode.addNode(synGNR);    }  }}  }
class C{  @Override public String toString(){  return "RefQueueWorker::" + this.workerThread;}  }
class C{  public byte returnByte(byte in){  oneByte[0]=in;  cipher.processBlock(oneByte,0,oneByte,0);  return oneByte[0];}  }
class C{  public void applyChanges(PhysicalPlan.PlanContext physicalPlanContext){  physicalPlan.deployChanges();}  }
class C{  private void createOrUpdateSLOBasedAutoTierPolicy(StorageSystem storageSystem,AutoTieringPolicy policy,String sloID,String sloName,String slo,String workload,String avgResponseTime){  boolean newPolicy=false;  if (null == policy) {    newPolicy=true;    policy=new AutoTieringPolicy();    policy.setId(URIUtil.createId(AutoTieringPolicy.class));    policy.setStorageSystem(storageSystem.getId());    policy.setNativeGuid(sloID);    policy.setSystemType(storageSystem.getSystemType());    policy.setVmaxSLO(slo);    policy.setVmaxWorkload(workload);  }  policy.setLabel(sloName);  policy.setPolicyName(sloName);  policy.setPolicyEnabled(true);  policy.setAvgExpectedResponseTime(Double.parseDouble(avgResponseTime));  policy.setProvisioningType(AutoTieringPolicy.ProvisioningType.ThinlyProvisioned.name());  if (newPolicy) {    newSLOList.add(policy);  } else {    updateSLOList.add(policy);  }}  }
class C{  private CompletableFuture<CopycatServer> start(Supplier<CompletableFuture<Void>> joiner){  if (started)   return CompletableFuture.completedFuture(this);  if (openFuture == null) {synchronized (this) {      if (openFuture == null) {        Function<Void,CompletionStage<CopycatServer>> completionFunction=null;        if (closeFuture == null) {          openFuture=listen().thenCompose(completionFunction);        } else {          openFuture=closeFuture.thenCompose(null);        }      }    }  }  return openFuture.whenComplete(null);}  }
class C{  public synchronized boolean createEvidence(final byte[] additionalData){  return createEvidence(additionalData,typeEvidenceId);}  }
class C{  public boolean contains(int index){  return index >= getFirst() && index <= getLast();}  }
class C{  public IVector2D(int c1,int c2){  defaultCapacity2=Math.max(defaultDefaultCapacity2,c2);  vector=new int[Math.max(defaultCapacity1,c1)][defaultCapacity2];  sizes=new IVector(c1);}  }
class C{  public GlassFish2xAsAdmin(String home){  super();  if (home == null) {    throw new CargoException("GlassFish home directory is not set");  }  this.home=home;}  }
class C{  @Override public void close(){  if (!this.closed) {    this.closed=true;    for (    TXRegionState r : this.regions.values()) {      r.close();    }  }}  }
class C{  public Set<Object> keySet(){  return map.keySet();}  }
class C{  public boolean exists(String blockName){  if (findStartIndex(blockName) == -1) {    return false;  }  if (findEndIndex(blockName) == -1) {    return false;  }  return true;}  }
class C{  public void drawRangeLine(Graphics2D g2,CategoryPlot plot,ValueAxis axis,Rectangle2D dataArea,double value,Paint paint,Stroke stroke){  Range range=axis.getRange();  if (!range.contains(value)) {    return;  }  PlotOrientation orientation=plot.getOrientation();  Line2D line=null;  double v=axis.valueToJava2D(value,dataArea,plot.getRangeAxisEdge());  if (orientation == PlotOrientation.HORIZONTAL) {    line=new Line2D.Double(v,dataArea.getMinY(),v,dataArea.getMaxY());  } else   if (orientation == PlotOrientation.VERTICAL) {    line=new Line2D.Double(dataArea.getMinX(),v,dataArea.getMaxX(),v);  }  g2.setPaint(paint);  g2.setStroke(stroke);  Object saved=g2.getRenderingHint(RenderingHints.KEY_STROKE_CONTROL);  g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,RenderingHints.VALUE_STROKE_NORMALIZE);  g2.draw(line);  g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,saved);}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  this.coordinatorRV=this.findView(R.id.coordinator_rv);}  }
class C{  public static void resumeTrack(TrackRecordingServiceConnection trackRecordingServiceConnection){  try {    ITrackRecordingService service=trackRecordingServiceConnection.getServiceIfBound();    if (service != null) {      service.resumeCurrentTrack();    }  } catch (  RemoteException e) {    Log.e(TAG,"Unable to resume track.",e);  }}  }
class C{  public boolean isNone(){  return NONE.equals(gender);}  }
class C{  public double eccentricity(){  return Math.sqrt(1 - (semiMinorAxis() * semiMinorAxis()) / (semiMajorAxis() * semiMajorAxis()));}  }
class C{  public static void clearInstances(){  instances.clear();}  }
class C{  private void postA11yHintRunnable(String hint){  cancelA11yHint();  mPendingHint=hint;  mSpeechController.addUtteranceCompleteAction(mSpeechController.peekNextUtteranceId(),mA11yHintRunnable);}  }
class C{  public StopNetworkAction(final NetworkPanel networkPanel){  if (networkPanel == null) {    throw new IllegalArgumentException("networkPanel must not be null");  }  this.networkPanel=networkPanel;  putValue(SMALL_ICON,ResourceManager.getImageIcon("Stop.png"));  putValue(SHORT_DESCRIPTION,"Stop iterating the network");}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.abs(z));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private static void runAscendingTest(final int wordLength,final int bytePadding,final int wordCount){  final long wordMask;  if (wordLength == 64) {    wordMask=~0L;  } else {    wordMask=(1L << wordLength) - 1L;  }  final BigEndianAscendingWordSerializer serializer=new BigEndianAscendingWordSerializer(wordLength,wordCount,bytePadding);  for (long i=0; i < wordCount; i++) {    serializer.writeWord(i & wordMask);  }  final byte[] bytes=serializer.getBytes();  final BigEndianAscendingWordDeserializer deserializer=new BigEndianAscendingWordDeserializer(wordLength,bytePadding,bytes);  assertEquals(deserializer.totalWordCount(),wordCount);  for (long i=0; i < wordCount; i++) {    assertEquals(deserializer.readWord(),i & wordMask);  }}  }
class C{  public static Stream<Base> streamReferent(JCas jCas,Map<ReferenceTarget,?> referentMap){  return JCasUtil.select(jCas,Base.class).stream().filter(null);}  }
class C{  public GuacamoleUnsupportedException(String message){  super(message);}  }
class C{  protected boolean checkArgs(String[] args){  landscapePath=null;  layerName=null;  filePath=null;  missing=null;  tileSize=0;  layerType=null;  margin=null;  globe=defaultGlobe;  color=Color.white;  elevAttrName=null;  for (int i=0; i < args.length; ++i) {    if (args[i].startsWith("-landscape=")) {      landscapePath=args[i].substring(11);      if (landscapePath.isEmpty()) {        landscapePath=null;      }    } else     if (args[i].startsWith("-globe=")) {      globe=args[i].substring(7);      if (globe.isEmpty()) {        globe=null;      } else {        globe=globe.substring(0,1).toUpperCase() + globe.substring(1).toLowerCase();        globe=(String)StringUtil.findString(globe,GLOBE_NAME,true);      }      if (globe == null) {        globe=defaultGlobe;      }    } else     if (args[i].startsWith("-file=")) {      filePath=args[i].substring(6);      if (filePath.isEmpty()) {        filePath=null;      }    } else     if (args[i].startsWith("-missing=")) {      missing=args[i].substring(9);      if (missing.isEmpty()) {        missing=null;      }    } else     if (args[i].startsWith("-tilesize=")) {      String str=args[i].substring(10);      if (!str.isEmpty()) {        str=(String)StringUtil.findString(str,TILE_SIZE,false);        tileSize=Integer.parseInt(str);      }    } else     if (args[i].startsWith("-color=")) {      String str=args[i].substring(7);      try {        color=StringUtil.stringToColor(str);      } catch (      Exception e) {        color=null;      }      if (color == null) {        System.out.println("Invalid color " + str + ". Setting to white.");        color=Color.white;      }    } else     if (args[i].startsWith("-type=")) {      String str=args[i].substring(6);      if (str.isEmpty()) {        layerType=null;      } else {        layerType=(LayerType)StringUtil.findString(str,LAYER_TYPE,true);      }    } else     if (args[i].startsWith("-name=")) {      layerName=args[i].substring(11);      if (layerName.isEmpty()) {        layerName=null;      }    } else     if (args[i].startsWith("-leftmargin=")) {      if (margin == null) {        margin=new int[4];      }      String str=args[i].substring(12);      margin[0]=Integer.parseInt(str,0);    } else     if (args[i].startsWith("-rightmargin=")) {      if (margin == null) {        margin=new int[4];      }      String str=args[i].substring(13);      margin[1]=Integer.parseInt(str,0);    } else     if (args[i].startsWith("-bottommargin=")) {      if (margin == null) {        margin=new int[4];      }      String str=args[i].substring(14);      margin[2]=Integer.parseInt(str,0);    } else     if (args[i].startsWith("-topmargin=")) {      if (margin == null) {        margin=new int[4];      }      String str=args[i].substring(11);      margin[3]=Integer.parseInt(str,0);    } else     if (args[i].startsWith("-elevattrname=")) {      elevAttrName=args[i].substring(14);    }  }  if ((landscapePath == null) || (filePath == null)) {    return (false);  }  String fPath=filePath.toLowerCase();  isVector=fPath.endsWith(".json");  if (isVector) {    if (layerName == null) {      layerName=StringUtil.getLabelFromFilePath(filePath);    }    if (color == null) {      color=Color.white;    }    return (true);  }  if (layerType == null) {    layerType=LayerType.elevation;    return (false);  }  if (layerType == LayerType.elevation) {    layerName="elevation";  } else   if (layerName == null) {    layerName=StringUtil.getLabelFromFilePath(filePath);  }  if (tileSize == 0) {    return (false);  }  if (!(fPath.endsWith(".img") || fPath.endsWith(".tiff") || fPath.endsWith(".tif")|| fPath.endsWith(".gtif")|| fPath.endsWith(".gtiff"))) {    throw new IllegalArgumentException("Only NASA PDS and GeoTIFF image formats and GeoJSON vector formats are supported.");  }  return (true);}  }
class C{  public synchronized void moveToEnd(Rsrc rsrc){  if (tail == rsrc)   return;  if (rsrc.getPrev() != null)   rsrc.getPrev().setNext(rsrc.getNext());  if (rsrc.getNext() != null)   rsrc.getNext().setPrev(rsrc.getPrev());  if (head == rsrc)   head=rsrc.getNext();  if (tail == rsrc)   tail=rsrc.getPrev();  rsrc.setNext(null);  rsrc.setPrev(null);  if (tail == null) {    head=rsrc;    tail=rsrc;    rsrc.setPrev(null);    rsrc.setNext(null);  } else {    rsrc.setPrev(tail);    tail.setNext(rsrc);    rsrc.setNext(null);    tail=rsrc;  }}  }
class C{  public h6(Element element){  addElement(element);}  }
class C{  private void connectDBSchema(){  s_logger.log(Level.FINE,"connectDBSchema",new Object[]{getSchema(),getDirection()});  Statement stmt=setStatement();  int step=0;  String sql=s_dbEngine.sqlAdmin_connectSchema(step,getVendor(),getCatalog(),getSchema());  while (sql != null) {    executeUpdate(stmt,sql,false,true);    step++;    sql=s_dbEngine.sqlAdmin_connectSchema(step,getVendor(),getCatalog(),getSchema());  }  releaseStatement(stmt);  s_logger.log(Level.FINE,"dbSchemaConnected",getSchema());  s_logger.flush();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:50.413 -0400",hash_original_method="20EC3E86A407C3B8FA8EE95F9E9C09C0",hash_generated_method="3338CD5330875F583AAAA6E85E3FE299") public static void writeSwappedDouble(byte[] data,int offset,double value){  writeSwappedLong(data,offset,Double.doubleToLongBits(value));}  }
class C{  protected void notifyDataInvalidatedEvent(){  if (datasetObservers != null) {    for (    DataSetObserver observer : datasetObservers) {      observer.onInvalidated();    }  }}  }
class C{  public static boolean isMarkovMatrix(double[][] m){  return isElementsPositive(m) && isEachColumnSum1(m);}  }
class C{  public void push(NavigationStack stack){  dispatcher.dispatch(add(History.NAV_TYPE_PUSH,stack));}  }
class C{  public boolean distributedExperimentSelected(){  return m_enableDistributedExperiment.isSelected();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:06.664 -0500",hash_original_method="9B65437FA923D12CE9D4363AF11C8369",hash_generated_method="36C0011C3F6F96837C4E739DA193138A") protected String encodeBody(){  StringBuffer encoding=new StringBuffer();  if (uri != null) {    encoding.append(LESS_THAN).append(uri.encode()).append(GREATER_THAN);  } else   if (string != null) {    encoding.append(string);  }  if (!parameters.isEmpty()) {    encoding.append(SEMICOLON).append(parameters.encode());  }  return encoding.toString();}  }
class C{  void reportStatus(IgniteLogger log){  assert log != null;  log=log.getLogger(getClass());  String latestVer=this.latestVer;  String downloadUrl=this.downloadUrl;  downloadUrl=downloadUrl != null ? downloadUrl : IgniteKernal.SITE;  if (latestVer != null)   if (latestVer.equals(ver)) {    if (!reportOnlyNew)     throttle(log,false,"Your version is up to date.");  } else   throttle(log,true,"New version is available at " + downloadUrl + ": "+ latestVer); else   if (!reportOnlyNew)   throttle(log,false,"Update status is not available.");}  }
class C{  public boolean isClose(){  return (this == REGION_CLOSE) || (this == CACHE_CLOSE) || (this == CACHE_RECONNECT)|| (this == FORCED_DISCONNECT);}  }
class C{  public void applyConfiguration(final ConfigSettings config){  clear();  Iterator<ArchiveDescription> aIt=config.archiveIterator();  while (aIt.hasNext()) {    addArchive(aIt.next());  }}  }
class C{  public static float max(final float... array){  validateArray(array);  float max=array[0];  for (int j=1; j < array.length; j++) {    if (Float.isNaN(array[j])) {      return Float.NaN;    }    if (array[j] > max) {      max=array[j];    }  }  return max;}  }
class C{  public void playTogether(Collection<Animator> items){  if (items != null && items.size() > 0) {    mNeedsSort=true;    Builder builder=null;    for (    Animator anim : items) {      if (builder == null) {        builder=play(anim);      } else {        builder.with(anim);      }    }  }}  }
class C{  public DistributedLogNamespaceBuilder featureProvider(FeatureProvider featureProvider){  this._featureProvider=featureProvider;  return this;}  }
class C{  public static void downloadImageToFileSystem(String url,String fileName,SuccessCallback<Image> onSuccess){  downloadImageToFileSystem(url,fileName,onSuccess,new CallbackAdapter<Image>());}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String s=getString(stack);  stack.getUIMgrSafe().addIRCodeForUE(getLong(stack),UserEvent.getEvtCodeForName(s));  return null;}  }
class C{  protected void calcYValueSum(List<? extends DataSet<?>> dataSets){  mYValueSum=0;  if (dataSets == null)   return;  for (int i=0; i < dataSets.size(); i++) {    mYValueSum+=Math.abs(dataSets.get(i).getYValueSum());  }}  }
class C{  public static Bitmap loadBitmap(String fileName,int scale) throws ImageLoadException {  return loadBitmap(new FileSource(fileName),scale);}  }
class C{  public boolean canEditTopicName(){  if (getChange().getStatus().isOpen()) {    return isOwner() || getRefControl().isOwner() || getProjectControl().isOwner()|| getUser().getCapabilities().canAdministrateServer()|| getRefControl().canEditTopicName();  }  return getRefControl().canForceEditTopicName();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public ServiceNotPublishedException(Object[] params){  super(params);}  }
class C{  @Override public void deallocatePesForAllContainerVms(){  super.deallocatePesForAllContainerVms();  getMipsMapRequested().clear();  setPesInUse(0);}  }
class C{  private MoreVersionsAppViewItem createMore(ViewItem item){  MoreVersionsAppViewItem moreVersionsItem=new MoreVersionsAppViewItem(numColumns);  moreVersionsItem.id=item.id.longValue();  moreVersionsItem.storeName=item.store.name;  moreVersionsItem.storeAvatar=item.store.avatar;  moreVersionsItem.storeId=item.store.id.longValue();  moreVersionsItem.storeTheme=item.store.appearance.theme;  moreVersionsItem.appName=item.name;  moreVersionsItem.packageName=item.packageName;  moreVersionsItem.versionName=item.file.vername;  moreVersionsItem.icon=item.icon;  moreVersionsItem.versionCode=item.file.vercode.intValue();  return moreVersionsItem;}  }
class C{  @Override public void updateDrawState(TextPaint ds){  super.updateDrawState(ds);  ds.setUnderlineText(link.isUnderlined());  ds.setFakeBoldText(link.isBold());  ds.setColor(textColor);  ds.bgColor=touched ? adjustAlpha(textColor,link.getHighlightAlpha()) : Color.TRANSPARENT;  if (link.getTypeface() != null)   ds.setTypeface(link.getTypeface());}  }
class C{  protected <T extends AbstractOptionValue<?,?>>AbstractOptions(Function<T,T> valueFilter,Iterable<T> values){  requireNonNull(valueFilter,"valueFilter");  requireNonNull(values,"values");  valueMap=new IdentityHashMap<>();  putAll(valueFilter,StreamSupport.stream(values.spliterator(),false));}  }
class C{  public String sqlObject_dropIndex(String vendorName,String catalogName,String schemaName,String indexName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlObject_dropIndex(catalogName,schemaName,indexName);}  }
class C{  public static int countMostCoveredGoals(){  return countGoalsIn(mostCoveredGoals);}  }
class C{  public void visitFormalTypeParameter(String name){}  }
class C{  public final int readUnsignedShort() throws IOException {  r.readFully(w,0,2);  return ((w[1] & 0xff) << 8 | (w[0] & 0xff));}  }
class C{  public void updateAsciiStream(String columnLabel,java.io.InputStream x,long length) throws SQLException {}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public final boolean isTracking(){  return mIsTracking;}  }
class C{  private static void updateUnOrderListSpanBeforeNewLine(Editable editable,int start,MDUnOrderListSpan mdUnOrderListSpan){  int position=EditUtils.findNextNewLineCharCompat(editable,start);  int startSpan=editable.getSpanStart(mdUnOrderListSpan);  int endSpan=editable.getSpanEnd(mdUnOrderListSpan);  if (endSpan <= position) {    return;  }  editable.removeSpan(mdUnOrderListSpan);  editable.setSpan(new MDUnOrderListSpan(10,mdUnOrderListSpan.getColor(),mdUnOrderListSpan.getNested()),startSpan,position,Spanned.SPAN_INCLUSIVE_INCLUSIVE);}  }
class C{  @Inject public HttpManager(Context context){  this.context=context;}  }
class C{  public RouterConfiguration load() throws ConfigurationException {  load(ConfigurationConstants.TR_PROPERTIES);  DataServicesConfiguration d=DataServicesConfiguration.getInstance();  String managerList=d.getProps().get(props.get(ConfigurationConstants.CLUSTER_CLUSTERNAME));  props.put(ConfigurationConstants.CLUSTER_MANAGER_LIST,managerList);  if (managerList == null)   logger.warn((MessageFormat.format("Could not retrieve a value for {0} by reading {1}",ConfigurationConstants.CLUSTER_MANAGER_LIST,ConfigurationConstants.TR_PROPERTIES)));  props.applyProperties(this,true);  loadClusterDataSourceMap();  return this;}  }
class C{  private static Set<Method> findLockedMethods(ClassContext classContext,SelfCalls selfCalls,Set<CallSite> obviouslyLockedSites){  JavaClass javaClass=classContext.getJavaClass();  Method[] methodList=javaClass.getMethods();  CallGraph callGraph=selfCalls.getCallGraph();  Set<Method> lockedMethodSet=new HashSet<Method>();  for (  Method method : methodList) {    if (method.isSynchronized()) {      lockedMethodSet.add(method);    }  }  boolean change;  do {    change=false;    for (Iterator<CallGraphEdge> i=callGraph.edgeIterator(); i.hasNext(); ) {      CallGraphEdge edge=i.next();      CallSite callSite=edge.getCallSite();      if (obviouslyLockedSites.contains(callSite) || lockedMethodSet.contains(callSite.getMethod())) {        CallGraphNode target=edge.getTarget();        if (lockedMethodSet.add(target.getMethod())) {          change=true;        }      }    }  } while (change);  if (DEBUG) {    System.out.println("Apparently locked methods:");    for (    Method method : lockedMethodSet) {      System.out.println("\t" + method.getName());    }  }  return lockedMethodSet;}  }
class C{  public static String toPinyin(char c){  if (isChinese(c)) {    if (c == PinyinData.CHAR_12295) {      return PinyinData.PINYIN_12295;    } else {      return PinyinData.PINYIN_TABLE[getPinyinCode(c)];    }  } else {    return String.valueOf(c);  }}  }
class C{  public static byte[] decodeLines(String s){  char[] buf=new char[s.length()];  int p=0;  for (int ip=0; ip < s.length(); ip++) {    char c=s.charAt(ip);    if (c != ' ' && c != '\r' && c != '\n' && c != '\t')     buf[p++]=c;  }  return decode(buf,0,p);}  }
class C{  public Integer loadAllValues(DbOutputStatement statement,Integer idx) throws Exception {  int index=idx.intValue();  setId(statement.getLongInteger(index++));  setReport(statement.getLongText(index++));  setTypeReport(statement.getLongInteger(index++));  setTypeArch(statement.getLongInteger(index++));  setAllArch(statement.getLongInteger(index++));  setAllOfics(statement.getLongInteger(index++));  setAllPerfs(statement.getLongInteger(index++));  setDescription(statement.getLongText(index++));  setFileData(statement.getBytes(index++));  return new Integer(index);}  }
class C{  public CopyAction(){  this(null);}  }
class C{  private TimeoutController(){}  }
class C{  public ExtensionSpider(){  super(NAME);  initialize();}  }
class C{  public Dashboard(PrincipalUser creator,String dashboardName,PrincipalUser owner){  super(creator);  setName(dashboardName);  setOwner(owner);}  }
class C{  public void validateIpInterfaceData(IpInterfaceParam param,IpInterface ipInterface){  String protocol=param.findProtocol() != null ? param.findProtocol() : ipInterface.getProtocol();  if (!HostInterface.Protocol.IPV4.toString().equals(protocol) && !HostInterface.Protocol.IPV6.toString().equals(protocol)) {    throw APIException.badRequests.invalidIpProtocol();  }  if (param.findIPaddress() != null) {    String ipAddress=param.findIPaddress();    if (HostInterface.Protocol.IPV4.toString().equals(protocol)) {      ArgValidator.checkFieldValidIPV4(ipAddress,"ipAddress");    } else {      ArgValidator.checkFieldValidIPV6(ipAddress,"ipAddress");    }  }  if (ipInterface == null || (param.findIPaddress() != null && !param.findIPaddress().equalsIgnoreCase(ipInterface.getIpAddress()))) {    checkDuplicateAltId(IpInterface.class,"ipAddress",EndpointUtility.changeCase(param.findIPaddress()),"IP interface");  }}  }
class C{  public boolean isMember(Principal p){  if ((p.hashCode() & super.hashCode()) == p.hashCode())   return true; else   return false;}  }
class C{  public SnmpString(String v){  value=v.getBytes();}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public boolean isReference(){  return false;}  }
class C{  public void testSuspend_closesExistingPatientCursor(){  mController.loadSearchResults();  TypedCursorFetchedEvent event=TypedCursorFetchedEventFactory.createEvent(Patient.class,getFakeAppPatientCursor());  mFakeCrudEventBus.post(event);  mController.suspend();  assertTrue(((FakeTypedCursor<Patient>)event.cursor).isClosed());}  }
class C{  void unlink(Node<E> p,Node<E> trail){  p.item=null;  trail.next=p.next;  if (last == p)   last=trail;  if (count.getAndDecrement() == capacity)   notFull.signal();}  }
class C{  protected long doHighlightingTest(){  return doHighlightingTest(getTestName(true) + ".bash");}  }
class C{  public static void reportStatus(int status){  RecordHistogram.recordEnumeratedHistogram("Search.IcingContextReportingStatus",status,STATUS_BOUNDARY);}  }
class C{  protected Object readResolve() throws ObjectStreamException {  try {    if (type == Type.SECRET && RAW.equals(format)) {      return new SecretKeySpec(encoded,algorithm);    } else     if (type == Type.PUBLIC && X509.equals(format)) {      KeyFactory f=KeyFactory.getInstance(algorithm);      return f.generatePublic(new X509EncodedKeySpec(encoded));    } else     if (type == Type.PRIVATE && PKCS8.equals(format)) {      KeyFactory f=KeyFactory.getInstance(algorithm);      return f.generatePrivate(new PKCS8EncodedKeySpec(encoded));    } else {      throw new NotSerializableException("unrecognized type/format combination: " + type + "/"+ format);    }  } catch (  NotSerializableException nse) {    throw nse;  }catch (  Exception e) {    NotSerializableException nse=new NotSerializableException("java.security.Key: " + "[" + type + "] "+ "["+ algorithm+ "] "+ "["+ format+ "]");    nse.initCause(e);    throw nse;  }}  }
class C{  public boolean isClosed(){  return closed;}  }
class C{  public void registerSensor(Sensor s,int rawaddr){  if ((rawaddr < 0) || (rawaddr >= MAXNODE)) {    log.error("Unexpected sensor ordinal in registerSensor: " + Integer.toString(rawaddr));    return;  }  int addr=-1;  addr=rawaddr - startingSensorAddress;  hasActiveSensors=true;  AcelaTrafficController.instance().setAcelaSensorsState(true);  if (startingSensorAddress < 0) {    log.info("Trying to register sensor too early: AS" + rawaddr);  } else {    if (sensorArray[addr] == null) {      sensorArray[addr]=s;      if (!sensorHasBeenInit[addr]) {        sensorNeedInit[addr]=true;      }    } else {      log.warn("Multiple registration of same sensor: CS" + rawaddr);    }  }}  }
class C{  public CrowdedScoringFunctionFactory(ScoringFunctionFactory delegate,EventsManager events){  this.delegate=delegate;  this.events=events;}  }
class C{  public boolean match(Certificate certificate){  if (!(certificate instanceof X509Certificate)) {    return false;  }  X509Certificate cert=(X509Certificate)certificate;  if ((certificateEquals != null) && !certificateEquals.equals(cert)) {    return false;  }  if ((serialNumber != null) && !serialNumber.equals(cert.getSerialNumber())) {    return false;  }  if ((issuer != null) && !issuer.equals(cert.getIssuerX500Principal())) {    return false;  }  if ((subject != null) && !subject.equals(cert.getSubjectX500Principal())) {    return false;  }  if ((subjectKeyIdentifier != null) && !Arrays.equals(subjectKeyIdentifier,getExtensionValue(cert,"2.5.29.14"))) {    return false;  }  if ((authorityKeyIdentifier != null) && !Arrays.equals(authorityKeyIdentifier,getExtensionValue(cert,"2.5.29.35"))) {    return false;  }  if (certificateValid != null) {    try {      cert.checkValidity(certificateValid);    } catch (    CertificateExpiredException e) {      return false;    }catch (    CertificateNotYetValidException e) {      return false;    }  }  if (privateKeyValid != null) {    try {      byte[] bytes=getExtensionValue(cert,"2.5.29.16");      if (bytes == null) {        return false;      }      PrivateKeyUsagePeriod pkup=(PrivateKeyUsagePeriod)PrivateKeyUsagePeriod.ASN1.decode(bytes);      Date notBefore=pkup.getNotBefore();      Date notAfter=pkup.getNotAfter();      if ((notBefore == null) && (notAfter == null)) {        return false;      }      if ((notBefore != null) && notBefore.compareTo(privateKeyValid) > 0) {        return false;      }      if ((notAfter != null) && notAfter.compareTo(privateKeyValid) < 0) {        return false;      }    } catch (    IOException e) {      return false;    }  }  if (subjectPublicKeyAlgID != null) {    try {      byte[] encoding=cert.getPublicKey().getEncoded();      AlgorithmIdentifier ai=((SubjectPublicKeyInfo)SubjectPublicKeyInfo.ASN1.decode(encoding)).getAlgorithmIdentifier();      if (!subjectPublicKeyAlgID.equals(ai.getAlgorithm())) {        return false;      }    } catch (    IOException e) {      e.printStackTrace();      return false;    }  }  if (subjectPublicKey != null) {    if (!Arrays.equals(subjectPublicKey,cert.getPublicKey().getEncoded())) {      return false;    }  }  if (keyUsage != null) {    boolean[] ku=cert.getKeyUsage();    if (ku != null) {      int i=0;      int min_length=(ku.length < keyUsage.length) ? ku.length : keyUsage.length;      for (; i < min_length; i++) {        if (keyUsage[i] && !ku[i]) {          return false;        }      }      for (; i < keyUsage.length; i++) {        if (keyUsage[i]) {          return false;        }      }    }  }  if (extendedKeyUsage != null) {    try {      List keyUsage=cert.getExtendedKeyUsage();      if (keyUsage != null) {        if (!keyUsage.containsAll(extendedKeyUsage)) {          return false;        }      }    } catch (    CertificateParsingException e) {      return false;    }  }  if (pathLen != -1) {    int p_len=cert.getBasicConstraints();    if ((pathLen < 0) && (p_len >= 0)) {      return false;    }    if ((pathLen > 0) && (pathLen > p_len)) {      return false;    }  }  if (subjectAltNames != null) {    PASSED:     try {      byte[] bytes=getExtensionValue(cert,"2.5.29.17");      if (bytes == null) {        return false;      }      List<GeneralName> sans=((GeneralNames)GeneralNames.ASN1.decode(bytes)).getNames();      if ((sans == null) || (sans.size() == 0)) {        return false;      }      boolean[][] map=new boolean[9][];      for (int i=0; i < 9; i++) {        map[i]=(subjectAltNames[i] == null) ? EmptyArray.BOOLEAN : new boolean[subjectAltNames[i].size()];      }      for (      GeneralName name : sans) {        int tag=name.getTag();        for (int i=0; i < map[tag].length; i++) {          if (subjectAltNames[tag].get(i).equals(name)) {            if (!matchAllNames) {              break PASSED;            }            map[tag][i]=true;          }        }      }      if (!matchAllNames) {        return false;      }      for (int tag=0; tag < 9; tag++) {        for (int name=0; name < map[tag].length; name++) {          if (!map[tag][name]) {            return false;          }        }      }    } catch (    IOException e) {      e.printStackTrace();      return false;    }  }  if (nameConstraints != null) {    if (!nameConstraints.isAcceptable(cert)) {      return false;    }  }  if (policies != null) {    byte[] bytes=getExtensionValue(cert,"2.5.29.32");    if (bytes == null) {      return false;    }    if (policies.size() == 0) {      return true;    }    PASSED:     try {      List<PolicyInformation> policyInformations=((CertificatePolicies)CertificatePolicies.ASN1.decode(bytes)).getPolicyInformations();      for (      PolicyInformation policyInformation : policyInformations) {        if (policies.contains(policyInformation.getPolicyIdentifier())) {          break PASSED;        }      }      return false;    } catch (    IOException e) {      return false;    }  }  if (pathToNames != null) {    byte[] bytes=getExtensionValue(cert,"2.5.29.30");    if (bytes != null) {      NameConstraints nameConstraints;      try {        nameConstraints=(NameConstraints)NameConstraints.ASN1.decode(bytes);      } catch (      IOException e) {        return false;      }      if (!nameConstraints.isAcceptable(pathToNames)) {        return false;      }    }  }  return true;}  }
class C{  public boolean isInline(){  return inline;}  }
class C{  public LIMIT LIMIT(String limit){  return new LIMIT(this,limit);}  }
class C{  private String renderPattern(StatementPattern thePattern) throws Exception {  return "{" + renderValueExpr(thePattern.getSubjectVar()) + "} "+ renderValueExpr(thePattern.getPredicateVar())+ " "+ "{"+ renderValueExpr(thePattern.getObjectVar())+ "} ";}  }
class C{  @Deprecated public void addSlideInFromBottomAnimator(@NonNull List<Animator> animators,@NonNull View view){  if (animatorsUsed.contains(AnimatorEnum.SLIDE_IN_LEFT) || animatorsUsed.contains(AnimatorEnum.SLIDE_IN_RIGHT) || animatorsUsed.contains(AnimatorEnum.SLIDE_IN_TOP)|| animatorsUsed.contains(AnimatorEnum.SLIDE_IN_BOTTOM))   return;  animators.add(ObjectAnimator.ofFloat(view,"translationY",mRecyclerView.getMeasuredHeight() >> 1,0));  animatorsUsed.add(AnimatorEnum.SLIDE_IN_BOTTOM);}  }
class C{  protected static void invalidateSwitchPoints(){  if (LOG_ENABLED) {    LOG.info("invalidating switch point");  }synchronized (IndyInterface.class) {    SwitchPoint old=switchPoint;    switchPoint=new SwitchPoint();    SwitchPoint.invalidateAll(new SwitchPoint[]{old});  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case GamlPackage.FUNCTION__ACTION:    setAction((Expression)null);  return;case GamlPackage.FUNCTION__PARAMETERS:setParameters((Parameters)null);return;case GamlPackage.FUNCTION__ARGS:setArgs((ExpressionList)null);return;case GamlPackage.FUNCTION__TYPE:setType((TypeInfo)null);return;}super.eUnset(featureID);}  }
class C{  public Rational(){  this(0,1);}  }
class C{  public DatasourceTransactionInterceptor(PlatformTransactionManager ptm,Properties attributes){  setTransactionManager(ptm);  setTransactionAttributes(attributes);}  }
class C{  public static synchronized void unregister(PurchaseObserver observer){  sPurchaseObserver=null;}  }
class C{  public static int skipVarint(ByteBuffer buffer){  int skipped=1;  long bytevalue;  while (((bytevalue=buffer.get()) & 0x80L) != 0) {    skipped++;    Preconditions.checkArgument(skipped <= 9,"Variable length quantity is too long");  }  return skipped;}  }
class C{  public static int highOrderLongToInt(long longValue){  return (int)(longValue >> 32);}  }
class C{  public Scope(S state){  this.key=UUID.randomUUID().toString();  phlux.create(key,state);}  }
class C{  public Frame<V> init(final Frame<? extends V> src){  returnValue=src.returnValue;  System.arraycopy(src.values,0,values,0,values.length);  top=src.top;  return this;}  }
class C{  private void ingestBackendExportMasks(IngestionRequestContext requestContext,VplexVolumeIngestionContext backendRequestContext) throws IngestionException {  for (  Entry<String,VolumeIngestionContext> entry : backendRequestContext.getProcessedUnManagedVolumeMap().entrySet()) {    String unManagedVolumeGUID=entry.getKey();    VolumeIngestionContext volumeContext=entry.getValue();    UnManagedVolume processedUnManagedVolume=volumeContext.getUnmanagedVolume();    VirtualArray virtualArray=backendRequestContext.getVarray(processedUnManagedVolume);    VirtualPool vPool=backendRequestContext.getVpool(processedUnManagedVolume);    if (processedUnManagedVolume.getUnmanagedExportMasks().isEmpty()) {      String reason="the backend volume has no unmanaged export masks " + processedUnManagedVolume.getLabel();      _logger.warn(reason);      continue;    }    _logger.info("ingesting VPLEX backend export mask(s) for unmanaged volume " + processedUnManagedVolume);    String createdObjectGuid=unManagedVolumeGUID.replace(VolumeIngestionUtil.UNMANAGEDVOLUME,VolumeIngestionUtil.VOLUME);    BlockObject processedBlockObject=backendRequestContext.getBlockObjectsToBeCreatedMap().get(createdObjectGuid);    if (processedBlockObject == null) {      String reason="The ingested block object is null. Skipping ingestion of export masks.";      throw IngestionException.exceptions.generalVolumeException(processedUnManagedVolume.getLabel(),reason);    }    if (backendRequestContext.isDistributed()) {      Volume backendVolume=((Volume)processedBlockObject);      virtualArray=_dbClient.queryObject(VirtualArray.class,backendVolume.getVirtualArray());      vPool=_dbClient.queryObject(VirtualPool.class,backendVolume.getVirtualPool());      if (virtualArray == null) {        throw IngestionException.exceptions.failedToIngestVplexBackend("Could not find virtual array for backend volume " + backendVolume.getLabel());      }      if (vPool == null) {        throw IngestionException.exceptions.failedToIngestVplexBackend("Could not find virtual pool for backend volume " + backendVolume.getLabel());      }    }    try {      int uemCount=0;      for (      String uri : processedUnManagedVolume.getUnmanagedExportMasks()) {        if (uemCount++ > 1) {          _logger.warn("more than one unmanaged export mask found on this backend volume");        }        UnManagedExportMask uem=_dbClient.queryObject(UnManagedExportMask.class,URI.create(uri));        _logger.info("preparing to ingest backend unmanaged export mask {}",uem.getMaskName());        URI storageSystemUri=processedUnManagedVolume.getStorageSystemUri();        StorageSystem associatedSystem=_dbClient.queryObject(StorageSystem.class,storageSystemUri);        List<URI> initUris=new ArrayList<URI>();        for (        String initUri : uem.getKnownInitiatorUris()) {          initUris.add(URI.create(initUri));        }        List<Initiator> initiators=_dbClient.queryObject(Initiator.class,initUris);        backendRequestContext.setDeviceInitiators(initiators);        ExportGroup exportGroup=this.findOrCreateExportGroup(backendRequestContext.getRootIngestionRequestContext(),associatedSystem,initiators,virtualArray.getId(),backendRequestContext.getBackendProject().getId(),backendRequestContext.getTenant().getId(),DEFAULT_BACKEND_NUMPATHS,uem);        if (null == exportGroup.getId()) {          backendRequestContext.setExportGroupCreated(true);          exportGroup.setId(URIUtil.createId(ExportGroup.class));        }        backendRequestContext.setExportGroup(exportGroup);        IngestExportStrategy ingestStrategy=ingestStrategyFactory.buildIngestExportStrategy(processedUnManagedVolume);        BlockObject blockObject=ingestStrategy.ingestExportMasks(processedUnManagedVolume,processedBlockObject,backendRequestContext);        if (null == blockObject) {          throw IngestionException.exceptions.generalVolumeException(processedUnManagedVolume.getLabel(),"check the logs for more details");        } else {          backendRequestContext.getObjectsIngestedByExportProcessing().add(blockObject);        }        backendRequestContext.getVplexBackendExportGroupMap().put(blockObject,exportGroup);      }    } catch (    Exception ex) {      _logger.error(ex.getLocalizedMessage());      throw ex;    }  }}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.boxPaint=SerialUtilities.readPaint(stream);  this.artifactPaint=SerialUtilities.readPaint(stream);}  }
class C{  public void reset(){  Cell[] as=cells;  Cell a;  base=identity;  if (as != null) {    for (int i=0; i < as.length; ++i) {      if ((a=as[i]) != null)       a.value=identity;    }  }}  }
class C{  public synchronized TaskStats markTaskStart(PerfTask task,int round){  TaskStats stats=new TaskStats(task,nextTaskRunNum(),round);  this.currentStats=stats;  points.add(stats);  return stats;}  }
class C{  @Override public void propertyChange(PropertyChangeEvent event){  fireChangeEvent();}  }
class C{  public Element store(Object o){  PositionableLabel p=(PositionableLabel)o;  if (!p.isActive()) {    return null;  }  Element element=new Element("positionablelabel");  storeCommonAttributes(p,element);  if (p.isText()) {    if (p.getUnRotatedText() != null) {      element.setAttribute("text",p.getUnRotatedText());    }    storeTextInfo(p,element);  }  if (p.isIcon() && p.getIcon() != null) {    element.setAttribute("icon","yes");    element.addContent(storeIcon("icon",(NamedIcon)p.getIcon()));  }  element.setAttribute("class","jmri.jmrit.display.configurexml.PositionableLabelXml");  return element;}  }
class C{  public WarningsGroup(ICalComponent component,List<ICalComponent> componentHierarchy,List<Warning> warning){  this(component,null,componentHierarchy,warning);}  }
class C{  public static BufferedImage createCompatibleImage(BufferedImage image){  return createCompatibleImage(image,image.getWidth(),image.getHeight());}  }
class C{  private double[] lsolve(double[][] A,double[] b){  int N=b.length;  for (int p=0; p < N; p++) {    int max=p;    for (int i=p + 1; i < N; i++) {      if (Math.abs(A[i][p]) > Math.abs(A[max][p])) {        max=i;      }    }    double[] temp=A[p];    A[p]=A[max];    A[max]=temp;    double t=b[p];    b[p]=b[max];    b[max]=t;    if (Math.abs(A[p][p]) <= Settings.EPS) {      throw new RuntimeException("Matrix is singular or nearly singular");    }    for (int i=p + 1; i < N; i++) {      double alpha=A[i][p] / A[p][p];      b[i]-=alpha * b[p];      for (int j=p; j < N; j++) {        A[i][j]-=alpha * A[p][j];      }    }  }  double[] x=new double[N];  for (int i=N - 1; i >= 0; i--) {    double sum=0.0;    for (int j=i + 1; j < N; j++) {      sum+=A[i][j] * x[j];    }    x[i]=(b[i] - sum) / A[i][i];  }  return x;}  }
class C{  public void flush() throws IOException {  pw.flush();}  }
class C{  private HttpResponse execute(Method method,String region,String bucketName,String objectName,Map<String,String> headerMap,Map<String,String> queryParamMap,String contentType,Object body,int length) throws InvalidBucketNameException, NoSuchAlgorithmException, InsufficientDataException, IOException, InvalidKeyException, NoResponseException, XmlPullParserException, ErrorResponseException, InternalException {  Request request=createRequest(method,bucketName,objectName,region,headerMap,queryParamMap,contentType,body,length);  if (this.accessKey != null && this.secretKey != null) {    request=Signer.signV4(request,region,accessKey,secretKey);  }  if (this.traceStream != null) {    this.traceStream.println("---------START-HTTP---------");    String encodedPath=request.httpUrl().encodedPath();    String encodedQuery=request.httpUrl().encodedQuery();    if (encodedQuery != null) {      encodedPath+="?" + encodedQuery;    }    this.traceStream.println(request.method() + " " + encodedPath+ " HTTP/1.1");    String headers=request.headers().toString().replaceAll("Signature=([0-9a-f]+)","Signature=*REDACTED*");    this.traceStream.println(headers);  }  Response response=this.httpClient.newCall(request).execute();  if (response == null) {    if (this.traceStream != null) {      this.traceStream.println("<NO RESPONSE>");      this.traceStream.println(END_HTTP);    }    throw new NoResponseException();  }  if (this.traceStream != null) {    this.traceStream.println(response.protocol().toString().toUpperCase() + " " + response.code());    this.traceStream.println(response.headers());  }  ResponseHeader header=new ResponseHeader();  HeaderParser.set(response.headers(),header);  if (response.isSuccessful()) {    if (this.traceStream != null) {      this.traceStream.println(END_HTTP);    }    return new HttpResponse(header,response);  }  ErrorResponse errorResponse=null;  if (!method.equals(Method.HEAD)) {    try {      String errorXml="";      Scanner scanner=new java.util.Scanner(response.body().charStream()).useDelimiter("\\A");      if (scanner.hasNext()) {        errorXml=scanner.next();      }      errorResponse=new ErrorResponse(new StringReader(errorXml));      if (this.traceStream != null) {        this.traceStream.println(errorXml);      }    }  finally {      response.body().close();    }  }  if (this.traceStream != null) {    this.traceStream.println(END_HTTP);  }  if (errorResponse == null) {    ErrorCode ec;switch (response.code()) {case 400:      ec=ErrorCode.INVALID_URI;    break;case 404:  if (objectName != null) {    ec=ErrorCode.NO_SUCH_KEY;  } else   if (bucketName != null) {    ec=ErrorCode.NO_SUCH_BUCKET;  } else {    ec=ErrorCode.RESOURCE_NOT_FOUND;  }break;case 501:case 405:ec=ErrorCode.METHOD_NOT_ALLOWED;break;case 409:if (bucketName != null) {ec=ErrorCode.NO_SUCH_BUCKET;} else {ec=ErrorCode.RESOURCE_CONFLICT;}break;case 403:ec=ErrorCode.ACCESS_DENIED;break;default :throw new InternalException("unhandled HTTP code " + response.code() + ".  Please report this issue at "+ "https://github.com/minio/minio-java/issues");}errorResponse=new ErrorResponse(ec,bucketName,objectName,request.httpUrl().encodedPath(),header.xamzRequestId(),header.xamzId2());}if (errorResponse.errorCode() == ErrorCode.NO_SUCH_BUCKET) {BucketRegionCache.INSTANCE.remove(bucketName);}throw new ErrorResponseException(errorResponse,response);}  }
class C{  public void writeBlockLight(ByteBuf output){  output.writeBytes(blockLight.getHandle());}  }
class C{  public MoveSourceEdit(int offset,int length,MoveTargetEdit target){  this(offset,length);  setTargetEdit(target);}  }
class C{  public long sessionId(){  return sessionId;}  }
class C{  public void java_lang_Runtime_execInternal(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getProcessObject());}  }
class C{  private void endHelpSection(RequestAndResponse requestAndResponse) throws IOException {  requestAndResponse.println("</div>");}  }
class C{  public GPUImageCrosshatchFilter(){  this(0.03f,0.003f);}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  if (rect == null) {    return null;  }  return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height(),false);}  }
class C{  public WbXmlElement addContent(WbXmlContent content){  this.contents.add(content);  return this;}  }
class C{  public TransferEntropyCalculatorGaussian() throws InstantiationException, IllegalAccessException, ClassNotFoundException {  super(COND_MI_CALCULATOR_GAUSSIAN);}  }
class C{  public void visitClassExpression(ClassExpression expression){  ClassNode type=expression.getType();  MethodVisitor mv=controller.getMethodVisitor();  if (BytecodeHelper.isClassLiteralPossible(type) || BytecodeHelper.isSameCompilationUnit(controller.getClassNode(),type)) {    if (controller.getClassNode().isInterface()) {      InterfaceHelperClassNode interfaceClassLoadingClass=controller.getInterfaceClassLoadingClass();      if (BytecodeHelper.isClassLiteralPossible(interfaceClassLoadingClass)) {        BytecodeHelper.visitClassLiteral(mv,interfaceClassLoadingClass);        controller.getOperandStack().push(ClassHelper.CLASS_Type);        return;      }    } else {      BytecodeHelper.visitClassLiteral(mv,type);      controller.getOperandStack().push(ClassHelper.CLASS_Type);      return;    }  }  String staticFieldName=getStaticFieldName(type);  referencedClasses.put(staticFieldName,type);  String internalClassName=controller.getInternalClassName();  if (controller.getClassNode().isInterface()) {    internalClassName=BytecodeHelper.getClassInternalName(controller.getInterfaceClassLoadingClass());    mv.visitFieldInsn(GETSTATIC,internalClassName,staticFieldName,"Ljava/lang/Class;");  } else {    mv.visitMethodInsn(INVOKESTATIC,internalClassName,"$get$" + staticFieldName,"()Ljava/lang/Class;",false);  }  controller.getOperandStack().push(ClassHelper.CLASS_Type);}  }
class C{  boolean reserveForBecomePrimary(){synchronized (BucketAdvisor.this) {    if (this.volunteeringThread != null) {      return false;    }    this.aggressive=true;    return true;  }}  }
class C{  public double nextDouble(){  int y;  int z;  if (mti >= N) {    int kk;    final int[] mt=this.mt;    final int[] mag01=this.mag01;    for (kk=0; kk < N - M; kk++) {      y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + M] ^ (y >>> 1) ^ mag01[y & 0x1];    }    for (; kk < N - 1; kk++) {      y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + (M - N)] ^ (y >>> 1) ^ mag01[y & 0x1];    }    y=(mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);    mt[N - 1]=mt[M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];    mti=0;  }  y=mt[mti++];  y^=y >>> 11;  y^=(y << 7) & TEMPERING_MASK_B;  y^=(y << 15) & TEMPERING_MASK_C;  y^=(y >>> 18);  if (mti >= N) {    int kk;    final int[] mt=this.mt;    final int[] mag01=this.mag01;    for (kk=0; kk < N - M; kk++) {      z=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + M] ^ (z >>> 1) ^ mag01[z & 0x1];    }    for (; kk < N - 1; kk++) {      z=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + (M - N)] ^ (z >>> 1) ^ mag01[z & 0x1];    }    z=(mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);    mt[N - 1]=mt[M - 1] ^ (z >>> 1) ^ mag01[z & 0x1];    mti=0;  }  z=mt[mti++];  z^=z >>> 11;  z^=(z << 7) & TEMPERING_MASK_B;  z^=(z << 15) & TEMPERING_MASK_C;  z^=(z >>> 18);  return ((((long)(y >>> 6)) << 27) + (z >>> 5)) / (double)(1L << 53);}  }
class C{  @Override void extras(){  addToFrame(null);}  }
class C{  private CCachedRowSet() throws SQLException {  super();  setSyncProvider("com.sun.rowset.providers.RIOptimisticProvider");}  }
class C{  public boolean readClass(DataInputStream d){  try {    magic=d.readInt() & 0xFFFFFFFFL;    if (magic != MAGIC) {      G.v().out.println("Wrong magic number in " + fn + ": "+ magic);      return false;    }    minor_version=d.readUnsignedShort();    major_version=d.readUnsignedShort();    constant_pool_count=d.readUnsignedShort();    if (!readConstantPool(d))     return false;    access_flags=d.readUnsignedShort();    this_class=d.readUnsignedShort();    super_class=d.readUnsignedShort();    interfaces_count=d.readUnsignedShort();    if (interfaces_count > 0) {      interfaces=new int[interfaces_count];      int j;      for (j=0; j < interfaces_count; j++)       interfaces[j]=d.readUnsignedShort();    }    Timers.v().fieldTimer.start();    fields_count=d.readUnsignedShort();    readFields(d);    Timers.v().fieldTimer.end();    Timers.v().methodTimer.start();    methods_count=d.readUnsignedShort();    readMethods(d);    Timers.v().methodTimer.end();    Timers.v().attributeTimer.start();    attributes_count=d.readUnsignedShort();    if (attributes_count > 0) {      attributes=new attribute_info[attributes_count];      readAttributes(d,attributes_count,attributes);    }    Timers.v().attributeTimer.end();  } catch (  IOException e) {    throw new RuntimeException("IOException with " + fn + ": "+ e.getMessage(),e);  }  return true;}  }
class C{  public boolean isWatched(){  return watched;}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    return null;  }}  }
class C{  public void toXml(final XmlSerializer s) throws IllegalArgumentException, IllegalStateException, IOException {  s.startTag("","profile");  s.attribute("","name",name);  for (  FeatureStyle fp : featureStyles.values()) {    if (fp != null) {      s.startTag("","feature");      s.attribute("","name",fp.getName());      s.attribute("","internal",Boolean.toString(fp.isInternal()));      boolean updateWidth=fp.updateWidth();      s.attribute("","updateWidth",Boolean.toString(updateWidth));      s.attribute("","widthFactor",Float.toString(fp.getWidthFactor()));      s.attribute("","editable",Boolean.toString(fp.isEditable()));      s.attribute("","color",Integer.toHexString(fp.getPaint().getColor()));      s.attribute("","style",fp.getPaint().getStyle().toString());      s.attribute("","cap",fp.getPaint().getStrokeCap().toString());      s.attribute("","join",fp.getPaint().getStrokeJoin().toString());      if (!updateWidth) {        s.attribute("","strokewidth",Float.toString(fp.getPaint().getStrokeWidth()));      }      Typeface tf=fp.getPaint().getTypeface();      if (tf != null) {        s.attribute("","typefacestyle",Integer.toString(tf.getStyle()));        s.attribute("","textsize",Float.toString(fp.getPaint().getTextSize()));      }      DashPath dp=fp.getDashPath();      if (dp != null) {        s.startTag("","dash");        s.attribute("","phase",Float.toString(dp.phase));        for (int i=0; i < dp.intervals.length; i++) {          s.startTag("","interval");          s.attribute("","length",Float.toString(dp.intervals[i]));          s.endTag("","interval");        }        s.endTag("","dash");      }      s.endTag("","feature");    } else {      Log.d("Style","null fp");    }  }  s.endTag("","profile");}  }
class C{  @Override public Joiner join(Class<? extends DataObject> clazz,String alias,URI... ids){  return new Joiner(getDbClient()).join(clazz,alias,ids);}  }
class C{  public boolean scheduleOnce(double time,final Steppable event){synchronized (lock) {    return _scheduleOnce(new Key(time,0),event);  }}  }
class C{  public boolean checkParity(){  int len=getNumDataElements();  int chksum=0x0000;  int loop;  for (loop=0; loop < len - 1; loop=loop + 2) {    chksum^=(getElement(loop) << 8);    chksum^=getElement(loop + 1);  }  return ((chksum & 0xFFFF) == ((getElement(len - 2) << 8) + getElement(len - 1)));}  }
class C{  @Deprecated public static int[] readInts(String filename){  return new In(filename).readAllInts();}  }
class C{  protected XBLOMDefinitionElement(){}  }
class C{  public static <K,V>ConstantMap<K,V> of(Order<? super K> keyOrder,Collection<? extends Entry<? extends K,? extends V>> entries){  SparseMap<K,V> sparse=new SparseMap<K,V>(keyOrder);  for (  Entry<? extends K,? extends V> e : entries)   sparse.put(e.getKey(),e.getValue());  return new ConstantMap<K,V>(sparse);}  }
class C{  public void applyProperties(Object o){  this.props.applyProperties(o);}  }
class C{  protected void drawBar(Canvas canvas,float left,float top,float right,float bottom){  canvas.drawRoundRect(new RectF((int)left,(int)top,(int)right,(int)bottom),style.cornerRadius,style.cornerRadius,style.barPaint);}  }
class C{  public String toOrder(CoordinateOrder order){  final StringBuffer buf=new StringBuffer();  if (globe != null) {    buf.append("<");    buf.append(globe);    buf.append("> ");  }  buf.append("Point(");  if (order == CoordinateOrder.LAT_LONG) {    buf.append(latitude);    buf.append(" ");    buf.append(longitude);  } else {    buf.append(longitude);    buf.append(" ");    buf.append(latitude);  }  buf.append(")");  return buf.toString();}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public double[] computeLocalActiveUsingPreviousObservations(double[][] destination) throws Exception {  return computeLocalActiveUsingPreviousObservations(destination,false);}  }
class C{  public boolean isEffectEdge(double bump){  return bump > lastBumpThreshold;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element docElem;  NodeList elementList;  doc=(Document)load("staffNS",false);  docElem=doc.getDocumentElement();  elementList=docElem.getElementsByTagNameNS("http://www.nomatch.com","address");  assertSize("matchSize",0,elementList);}  }
class C{  protected Statement parseStatement() throws SyntaxError, IOException {switch (token) {case SEMICOLON:    return new CompoundStatement(scan(),new Statement[0]);case LBRACE:  return parseBlockStatement();case IF:{  long p=scan();  expect(LPAREN);  Expression c=parseExpression();  expect(RPAREN);  Statement t=parseStatement();  if (token == ELSE) {    scan();    return new IfStatement(p,c,t,parseStatement());  } else {    return new IfStatement(p,c,t,null);  }}case ELSE:{env.error(scan(),"else.without.if");return parseStatement();}case FOR:{long p=scan();Statement init=null;Expression cond=null, inc=null;expect(LPAREN);if (token != SEMICOLON) {long p2=pos;int mod=parseModifiers(M_FINAL);Expression e=parseExpression();if (token == IDENT) {  init=parseDeclaration(p2,mod,e);} else {  if (mod != 0) {    expect(IDENT);  }  topLevelExpression(e);  while (token == COMMA) {    long p3=scan();    Expression e2=parseExpression();    topLevelExpression(e2);    e=new CommaExpression(p3,e,e2);  }  init=new ExpressionStatement(p2,e);}}expect(SEMICOLON);if (token != SEMICOLON) {cond=parseExpression();}expect(SEMICOLON);if (token != RPAREN) {inc=parseExpression();topLevelExpression(inc);while (token == COMMA) {  long p2=scan();  Expression e2=parseExpression();  topLevelExpression(e2);  inc=new CommaExpression(p2,inc,e2);}}expect(RPAREN);return new ForStatement(p,init,cond,inc,parseStatement());}case WHILE:{long p=scan();expect(LPAREN);Expression cond=parseExpression();expect(RPAREN);return new WhileStatement(p,cond,parseStatement());}case DO:{long p=scan();Statement body=parseStatement();expect(WHILE);expect(LPAREN);Expression cond=parseExpression();expect(RPAREN);expect(SEMICOLON);return new DoStatement(p,body,cond);}case BREAK:{long p=scan();Identifier label=null;if (token == IDENT) {label=scanner.idValue;scan();}expect(SEMICOLON);return new BreakStatement(p,label);}case CONTINUE:{long p=scan();Identifier label=null;if (token == IDENT) {label=scanner.idValue;scan();}expect(SEMICOLON);return new ContinueStatement(p,label);}case RETURN:{long p=scan();Expression e=null;if (token != SEMICOLON) {e=parseExpression();}expect(SEMICOLON);return new ReturnStatement(p,e);}case SWITCH:{long p=scan();int i=argIndex;expect(LPAREN);Expression e=parseExpression();expect(RPAREN);expect(LBRACE);while ((token != EOF) && (token != RBRACE)) {int j=argIndex;try {switch (token) {case CASE:addArgument(new CaseStatement(scan(),parseExpression()));expect(COLON);break;case DEFAULT:addArgument(new CaseStatement(scan(),null));expect(COLON);break;default :addArgument(parseStatement());break;}} catch (SyntaxError ee) {argIndex=j;if (!recoverStatement()) {throw ee;}}}expect(RBRACE);return new SwitchStatement(p,e,statArgs(i));}case CASE:{env.error(pos,"case.without.switch");while (token == CASE) {scan();parseExpression();expect(COLON);}return parseStatement();}case DEFAULT:{env.error(pos,"default.without.switch");scan();expect(COLON);return parseStatement();}case TRY:{long p=scan();Statement init=null;int i=argIndex;boolean catches=false;if (false && token == LPAREN) {expect(LPAREN);long p2=pos;int mod=parseModifiers(M_FINAL);Expression e=parseExpression();if (token == IDENT) {init=parseDeclaration(p2,mod,e);} else {if (mod != 0) {expect(IDENT);}init=new ExpressionStatement(p2,e);}expect(RPAREN);}Statement s=parseBlockStatement();if (init != null) {}while (token == CATCH) {long pp=pos;expect(CATCH);expect(LPAREN);int mod=parseModifiers(M_FINAL);Expression t=parseExpression();IdentifierToken id=scanner.getIdToken();expect(IDENT);id.modifiers=mod;expect(RPAREN);addArgument(new CatchStatement(pp,t,id,parseBlockStatement()));catches=true;}if (catches) s=new TryStatement(p,s,statArgs(i));if (token == FINALLY) {scan();return new FinallyStatement(p,s,parseBlockStatement());} else if (catches || init != null) {return s;} else {env.error(pos,"try.without.catch.finally");return new TryStatement(p,s,null);}}case CATCH:{env.error(pos,"catch.without.try");Statement s;do {scan();expect(LPAREN);parseModifiers(M_FINAL);parseExpression();expect(IDENT);expect(RPAREN);s=parseBlockStatement();} while (token == CATCH);if (token == FINALLY) {scan();s=parseBlockStatement();}return s;}case FINALLY:{env.error(pos,"finally.without.try");scan();return parseBlockStatement();}case THROW:{long p=scan();Expression e=parseExpression();expect(SEMICOLON);return new ThrowStatement(p,e);}case GOTO:{long p=scan();expect(IDENT);expect(SEMICOLON);env.error(p,"not.supported","goto");return new CompoundStatement(p,new Statement[0]);}case SYNCHRONIZED:{long p=scan();expect(LPAREN);Expression e=parseExpression();expect(RPAREN);return new SynchronizedStatement(p,e,parseBlockStatement());}case INTERFACE:case CLASS:return parseLocalClass(0);case CONST:case ABSTRACT:case FINAL:case STRICTFP:{long p=pos;int mod=parseModifiers(M_FINAL | M_ABSTRACT | M_STRICTFP);switch (token) {case INTERFACE:case CLASS:return parseLocalClass(mod);case BOOLEAN:case BYTE:case CHAR:case SHORT:case INT:case LONG:case FLOAT:case DOUBLE:case IDENT:{if ((mod & (M_ABSTRACT | M_STRICTFP)) != 0) {mod&=~(M_ABSTRACT | M_STRICTFP);expect(CLASS);}Expression e=parseExpression();if (token != IDENT) {expect(IDENT);}Statement s=parseDeclaration(p,mod,e);expect(SEMICOLON);return s;}default :env.error(pos,"type.expected");throw new SyntaxError();}}case VOID:case STATIC:case PUBLIC:case PRIVATE:case TRANSIENT:env.error(pos,"statement.expected");throw new SyntaxError();}long p=pos;Expression e=parseExpression();if (token == IDENT) {Statement s=parseDeclaration(p,0,e);expect(SEMICOLON);return s;}if (token == COLON) {scan();Statement s=parseStatement();s.setLabel(env,e);return s;}topLevelExpression(e);expect(SEMICOLON);return new ExpressionStatement(p,e);}  }
class C{  private void parseTagDependentBody(Node parent,String tag) throws JasperException {  Mark bodyStart=reader.mark();  Mark bodyEnd=reader.skipUntilETag(tag);  if (bodyEnd == null) {    err.jspError(start,"jsp.error.unterminated","&lt;" + tag);  }  new Node.TemplateText(reader.getText(bodyStart,bodyEnd),bodyStart,parent);}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!WebEnv.initWeb(config))   throw new ServletException("PaymentServlet.init");}  }
class C{  private SQLExecEnvironment(){  this.typeFactory=new JavaTypeFactoryImpl(RelDataTypeSystem.DEFAULT);}  }
class C{  public final void testNotNullWithContextParameter(){  assertNotNull(Validators.notNull(getContext()));}  }
class C{  public static XmlPullParserFactory newInstance() throws XmlPullParserException {  return newInstance(null,null);}  }
class C{  protected void writeIterator(Output out,Iterator<Object> it){  LinkedList<Object> list=new LinkedList<Object>();  while (it.hasNext()) {    list.addLast(it.next());  }  out.writeArray(list,this);}  }
class C{  public String toString(){  return getClass().getName() + "[source=" + source+ "]";}  }
class C{  private void portForwarding(){  adb("forward","tcp:" + PC_PORT,"tcp:" + APP_PORT);}  }
class C{  private void sendSimpleHttpResponse(HttpAsyncExchange httpExchange,int httpCode){  HttpResponse httpResponse=httpExchange.getResponse();  StatusLine statusLine=new BasicStatusLine(HttpVersion.HTTP_1_1,httpCode,EnglishReasonPhraseCatalog.INSTANCE.getReason(httpCode,Locale.ENGLISH));  httpResponse.setStatusLine(statusLine);  httpExchange.submitResponse();}  }
class C{  public void createBasicConfigSettings(){  config=ConfigUtils.createConfig();  config.controler().setFirstIteration(0);  config.controler().setLastIteration(200);  config.controler().setWriteEventsInterval(0);  config.controler().setWritePlansInterval(0);  config.counts().setWriteCountsInterval(0);  config.counts().setCountsScaleFactor(94.52);  config.qsim().setFlowCapFactor(0.011);  config.qsim().setStorageCapFactor(0.033);  config.qsim().setEndTime(36 * 3600);  config.qsim().setLinkDynamics(LinkDynamics.PassingQ.toString());  config.qsim().setMainModes(PatnaUtils.URBAN_MAIN_MODES);  config.qsim().setSnapshotStyle(SnapshotStyle.queue);  config.setParam("TimeAllocationMutator","mutationAffectsDuration","false");  config.setParam("TimeAllocationMutator","mutationRange","7200.0");  StrategySettings expChangeBeta=new StrategySettings();  expChangeBeta.setStrategyName("ChangeExpBeta");  expChangeBeta.setWeight(0.85);  StrategySettings reRoute=new StrategySettings();  reRoute.setStrategyName("ReRoute");  reRoute.setWeight(0.1);  StrategySettings timeAllocationMutator=new StrategySettings();  timeAllocationMutator.setStrategyName("TimeAllocationMutator");  timeAllocationMutator.setWeight(0.05);  config.strategy().addStrategySettings(expChangeBeta);  config.strategy().addStrategySettings(reRoute);  config.strategy().addStrategySettings(timeAllocationMutator);  config.strategy().setFractionOfIterationsToDisableInnovation(0.8);  config.plans().setRemovingUnneccessaryPlanAttributes(true);  config.vspExperimental().addParam("vspDefaultsCheckingLevel","abort");  config.vspExperimental().setWritingOutputEvents(true);  ActivityParams workAct=new ActivityParams("work");  workAct.setTypicalDuration(8 * 3600);  config.planCalcScore().addActivityParams(workAct);  ActivityParams homeAct=new ActivityParams("home");  homeAct.setTypicalDuration(12 * 3600);  config.planCalcScore().addActivityParams(homeAct);  config.planCalcScore().setMarginalUtlOfWaiting_utils_hr(0);  config.planCalcScore().setPerforming_utils_hr(6.0);  ModeParams car=new ModeParams("car");  car.setConstant(-3.30);  car.setMarginalUtilityOfTraveling(0.0);  config.planCalcScore().addModeParams(car);  ModeParams bike=new ModeParams("bike");  bike.setConstant(0.0);  bike.setMarginalUtilityOfTraveling(0.0);  config.planCalcScore().addModeParams(bike);  ModeParams motorbike=new ModeParams("motorbike");  motorbike.setConstant(-2.20);  motorbike.setMarginalUtilityOfTraveling(0.0);  config.planCalcScore().addModeParams(motorbike);  ModeParams pt=new ModeParams("pt");  pt.setConstant(-3.40);  pt.setMarginalUtilityOfTraveling(0.0);  config.planCalcScore().addModeParams(pt);  ModeParams walk=new ModeParams("walk");  walk.setConstant(0.0);  walk.setMarginalUtilityOfTraveling(0.0);  config.planCalcScore().addModeParams(walk);  config.plansCalcRoute().setNetworkModes(PatnaUtils.URBAN_MAIN_MODES);{    ModeRoutingParams mrp=new ModeRoutingParams("walk");    mrp.setTeleportedModeSpeed(4. / 3.6);    mrp.setBeelineDistanceFactor(1.1);    config.plansCalcRoute().addModeRoutingParams(mrp);  }{    ModeRoutingParams mrp=new ModeRoutingParams("pt");    mrp.setTeleportedModeSpeed(20. / 3.6);    mrp.setBeelineDistanceFactor(1.5);    config.plansCalcRoute().addModeRoutingParams(mrp);  }}  }
class C{  public void notifyHorizontalEdgeReached(int startX,int finalX,int overX){  mScrollerX.notifyEdgeReached(startX,finalX,overX);}  }
class C{  protected void print(int v) throws IOException {  print(String.valueOf(v));}  }
class C{  public boolean addValue(String value){  throw new UnsupportedOperationException("The addValue method is not intended for client use. " + "Subclasses should use the addValueForProcessing method instead. ");}  }
class C{  public void work(List<WorkItem> resources) throws CoreException {  if (resources == null || resources.isEmpty()) {    if (DEBUG) {      FindbugsPlugin.getDefault().logInfo("No resources to analyse for project " + project);    }    return;  }  if (DEBUG) {    System.out.println(resources);  }  st=new StopTimer();  st.newPoint("initPlugins");  FindbugsPlugin.applyCustomDetectors(false);  st.newPoint("clearMarkers");  clearMarkers(resources);  st.newPoint("configureOutputFiles");  final Project findBugsProject=new Project();  findBugsProject.setProjectName(javaProject.getElementName());  final Reporter bugReporter=new Reporter(javaProject,findBugsProject,monitor);  if (FindBugsConsole.getConsole() != null) {    bugReporter.setReportingStream(FindBugsConsole.getConsole().newOutputStream());  }  bugReporter.setPriorityThreshold(userPrefs.getUserDetectorThreshold());  FindBugs.setHome(FindbugsPlugin.getFindBugsEnginePluginLocation());  Map<IPath,IPath> outLocations=createOutputLocations();  collectClassFiles(resources,outLocations,findBugsProject);  configureSourceDirectories(findBugsProject,outLocations);  if (findBugsProject.getFileCount() == 0) {    if (DEBUG) {      FindbugsPlugin.getDefault().logInfo("No resources to analyse for project " + project);    }    return;  }  st.newPoint("createAuxClasspath");  String[] classPathEntries=createAuxClasspath();  for (  String entry : classPathEntries) {    findBugsProject.addAuxClasspathEntry(entry);  }  String cloudId=userPrefs.getCloudId();  if (cloudId != null) {    findBugsProject.setCloudId(cloudId);  }  st.newPoint("configureProps");  IPreferenceStore store=FindbugsPlugin.getPluginPreferences(project);  boolean cacheClassData=store.getBoolean(FindBugsConstants.KEY_CACHE_CLASS_DATA);  final FindBugs2 findBugs=new FindBugs2Eclipse(project,cacheClassData,bugReporter);  findBugs.setNoClassOk(true);  findBugs.setProject(findBugsProject);  findBugs.setBugReporter(bugReporter);  findBugs.setProgressCallback(bugReporter);  findBugs.setDetectorFactoryCollection(DetectorFactoryCollection.instance());  userPrefs.setIncludeFilterFiles(relativeToAbsolute(userPrefs.getIncludeFilterFiles()));  userPrefs.setExcludeFilterFiles(relativeToAbsolute(userPrefs.getExcludeFilterFiles()));  userPrefs.setExcludeBugsFiles(relativeToAbsolute(userPrefs.getExcludeBugsFiles()));  findBugs.setUserPreferences(userPrefs);  findBugs.setAnalysisFeatureSettings(userPrefs.getAnalysisFeatureSettings());  findBugs.setMergeSimilarWarnings(false);  if (cacheClassData) {    FindBugs2Eclipse.checkClassPathChanges(findBugs.getProject().getAuxClasspathEntryList(),project);  }  st.newPoint("runFindBugs");  if (DEBUG) {    FindbugsPlugin.log("Running findbugs");  }  runFindBugs(findBugs);  if (DEBUG) {    FindbugsPlugin.log("Done running findbugs");  }  boolean incremental=!(resources.get(0) instanceof IProject);  updateBugCollection(findBugsProject,bugReporter,incremental);  st.newPoint("done");  st=null;  monitor.done();}  }
class C{  public WireDatabaseConnection(IConnectionProperties connectionProperties) throws SQLException {  super(connectionProperties);}  }
class C{  public boolean accept(File dir,String name){  String ucName=name.toUpperCase(Locale.ROOT);  return (ucName.endsWith(JPG) || ucName.endsWith(JPEG) || ucName.endsWith(GIF)|| ucName.endsWith(PNG));}  }
class C{  private void finishedDispatching(boolean dispatched){  this.dispatched=dispatched;  if (notifier != null) {synchronized (notifier) {      notifier.notifyAll();    }  }  if (listener != null) {    listener.run();  }}  }
class C{  public TextField(String name,String value,Store store){  super(name,value,store == Store.YES ? TYPE_STORED : TYPE_NOT_STORED);}  }
class C{  public static Map<String,Object> findContentParents(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> results=FastMap.newInstance();  List<Object> parentList=FastList.newInstance();  results.put("parentList",parentList);  LocalDispatcher dispatcher=dctx.getDispatcher();  String contentId=(String)context.get("contentId");  String contentAssocTypeId=(String)context.get("contentAssocTypeId");  String direction=(String)context.get("direction");  if (UtilValidate.isEmpty(direction)) {    direction="To";  }  Map<String,Object> traversMap=FastMap.newInstance();  traversMap.put("contentId",contentId);  traversMap.put("direction",direction);  traversMap.put("contentAssocTypeId",contentAssocTypeId);  try {    Map<String,Object> thisResults=dispatcher.runSync("traverseContent",traversMap);    String errorMsg=ServiceUtil.getErrorMessage(thisResults);    if (UtilValidate.isNotEmpty(errorMsg)) {      Debug.logError("Problem in traverseContent. " + errorMsg,module);      return ServiceUtil.returnError(errorMsg);    }    Map<String,Object> nodeMap=UtilGenerics.checkMap(thisResults.get("nodeMap"));    walkParentTree(nodeMap,parentList);  } catch (  GenericServiceException e) {    return ServiceUtil.returnFailure(e.getMessage());  }  return results;}  }
class C{  Element readFile(URL url) throws org.jdom2.JDOMException, java.io.IOException {  XmlFile xf=new XmlFile(){  };  return xf.rootFromURL(url);}  }
class C{  private double kdKNNSearch(int left,int right,int axis,O query,KNNHeap knns,DoubleDBIDListIter iter,double maxdist){  if (right - left <= leafsize) {    for (iter.seek(left); iter.getOffset() < right; iter.advance()) {      double dist=norm.distance(query,relation.get(iter));      countObjectAccess();      countDistanceComputation();      if (dist <= maxdist) {        knns.insert(dist,iter);      }      maxdist=knns.getKNNDistance();    }    return maxdist;  }  final int middle=(left + right) >>> 1;  final double delta=iter.seek(middle).doubleValue() - query.doubleValue(axis);  assert (iter.doubleValue() == relation.get(iter).doubleValue(axis)) : "Tree inconsistent " + left + " < "+ middle+ " < "+ right+ ": "+ iter.doubleValue()+ " != "+ relation.get(iter).doubleValue(axis)+ " "+ relation.get(iter);  final boolean onleft=(delta >= 0);  final boolean onright=(delta <= 0);  final int next=(axis + 1) % dims;  if (onleft && onright) {    O split=relation.get(iter.seek(middle));    countObjectAccess();    double dist=norm.distance(query,split);    countDistanceComputation();    if (dist <= maxdist) {      assert (iter.getOffset() == middle);      knns.insert(dist,iter);      maxdist=knns.getKNNDistance();    }    if (left < middle) {      maxdist=kdKNNSearch(left,middle,next,query,knns,iter,maxdist);    }    if (middle + 1 < right) {      maxdist=kdKNNSearch(middle + 1,right,next,query,knns,iter,maxdist);    }  } else {    if (onleft) {      if (left < middle) {        maxdist=kdKNNSearch(left,middle,next,query,knns,iter,maxdist);      }      if (Math.abs(delta) <= maxdist) {        O split=relation.get(iter.seek(middle));        countObjectAccess();        double dist=norm.distance(query,split);        countDistanceComputation();        if (dist <= maxdist) {          assert (iter.getOffset() == middle);          knns.insert(dist,iter);          maxdist=knns.getKNNDistance();        }      }      if ((middle + 1 < right) && (Math.abs(delta) <= maxdist)) {        maxdist=kdKNNSearch(middle + 1,right,next,query,knns,iter,maxdist);      }    } else {      if (middle + 1 < right) {        maxdist=kdKNNSearch(middle + 1,right,next,query,knns,iter,maxdist);      }      if (Math.abs(delta) <= maxdist) {        O split=relation.get(iter.seek(middle));        countObjectAccess();        double dist=norm.distance(query,split);        countDistanceComputation();        if (dist <= maxdist) {          iter.seek(middle);          knns.insert(dist,iter);          maxdist=knns.getKNNDistance();        }      }      if ((left < middle) && (Math.abs(delta) <= maxdist)) {        maxdist=kdKNNSearch(left,middle,next,query,knns,iter,maxdist);      }    }  }  return maxdist;}  }
class C{  public String toString(){  String out=name;  if (id != null)   out+=" id=" + id;  if (on_click != null)   out+=" onClick=" + on_click;  return out + " " + children;}  }
class C{  public boolean userCanDeleteGroup(int connectedUserId,int GroupId,String entidad) throws Exception {  boolean can=false;  int mgrGroup=ISicresAdminDefsKeys.NULL_ID;  try {    mgrGroup=this.getGroupMgrId(GroupId,entidad);    can=hasUserGroupAuth(connectedUserId,USER_ACTION_ID_CREATE,mgrGroup,entidad);  } catch (  Exception e) {    _logger.error(e);    throw e;  }  return can;}  }
class C{  public String globalInfo(){  return "Performs repeated runs of the base evaluator. If the base evaluator is randomizable, " + "the run number is used as seed. The base evaluator gets initialized before each " + "run.";}  }
class C{  protected void updateValue(){  if (updatingDepth++ == 0) {    if (getFormatter() != null) {      try {        Object newValue=getFormatter().stringToValue(getText());        setValue(newValue);      } catch (      ParseException ex) {      }    }  }  updatingDepth--;}  }
class C{  public boolean isAppendTaskName(){  return appendTaskName;}  }
class C{  @Ignore @Test public void pomScopeDependency() throws Exception {  String[] search=new String[]{"<dependency>\\s*<groupId>org.apache.commons</groupId>\\s*<artifactId>commons-lang3</artifactId>\\s*<scope>compile</scope>","<dependency>\\s*<groupId>junit</groupId>\\s*<artifactId>junit</artifactId>\\s*<scope>test</scope>","<dependency>\\s*<groupId>commons-io</groupId>\\s*<artifactId>commons-io</artifactId>\\s*<scope>provided</scope>"};  for (int i=0; i < Main.allPoms.length; i++) {    if (Main.allPoms[i].contains("hello-world-lib/")) {      File f=new File(Main.allPoms[i]);      String str=FileUtils.readFileToString(f,"utf-8");      for (int k=0; k < search.length; k++) {        Pattern p=Pattern.compile(search[k]);        Matcher matcher=p.matcher(str);        Assert.assertTrue(search[k] + " not found in " + f.getAbsolutePath(),matcher.find());      }    }  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.354 -0500",hash_original_method="BD70D8F0870A48AB1ECFE4339B84BFEA",hash_generated_method="E1645C1CBF3CF8A2D112E678E849FCD6") public static boolean isWhitespace(char c){  return isWhitespace((int)c);}  }
class C{  public void method2(int c){}  }
class C{  public boolean isAtRest(){  return Math.abs(mCurrentState.velocity) <= mRestSpeedThreshold && getDisplacementDistanceForState(mCurrentState) <= mDisplacementFromRestThreshold;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] shapefiles;  int numFiles;  String outputFile;  String shortFileName;  int progress;  int i, n, FID;  int oneHundredthTotal;  int numRecs;  ShapeType shapeType;  ShapeType outputShapeType=ShapeType.POLYGON;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  outputFile=args[1];  if ((inputFilesString == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  shapefiles=inputFilesString.split(";");  numFiles=shapefiles.length;  if (numFiles < 2) {    showFeedback("At least two input vector files must be specified.");    return;  }  try {    ShapeFile output=null;    DBFWriter writer=null;    FID=0;    for (int k=0; k < numFiles; k++) {      ShapeFile input=new ShapeFile(shapefiles[k]);      shapeType=input.getShapeType();      numRecs=input.getNumberOfRecords();      shortFileName=input.getShortName();      if (shortFileName.length() > 25) {        String tempString=shortFileName.substring(0,24);        shortFileName=tempString;      }      if (k == 0) {        outputShapeType=shapeType;        output=new ShapeFile(outputFile,outputShapeType);        output.setProjectionStringFromOtherShapefile(new ShapeFile(shapefiles[0]));        DBFField fields[]=new DBFField[3];        fields[0]=new DBFField();        fields[0].setName("FID");        fields[0].setDataType(DBFField.DBFDataType.NUMERIC);        fields[0].setFieldLength(10);        fields[0].setDecimalCount(0);        fields[1]=new DBFField();        fields[1].setName("PARENTFILE");        fields[1].setDataType(DBFField.DBFDataType.STRING);        fields[1].setFieldLength(25);        fields[2]=new DBFField();        fields[2].setName("PFILE_ID");        fields[2].setDataType(DBFField.DBFDataType.NUMERIC);        fields[2].setFieldLength(10);        fields[2].setDecimalCount(0);        String DBFName=output.getDatabaseFile();        writer=new DBFWriter(new File(DBFName));        writer.setFields(fields);      }      if (shapeType != outputShapeType) {        showFeedback("This tool can only work when each input shapefile " + "is of the same type.");        return;      }      oneHundredthTotal=numRecs / 100;      progress=0;      n=0;      for (      ShapeFileRecord record : input.records) {        output.addRecord(record.getGeometry());        FID++;        Object[] rowData=new Object[3];        rowData[0]=new Double(FID);        rowData[1]=shortFileName;        rowData[2]=new Double(k + 1);        writer.addRecord(rowData);        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Saving output file",progress);        }      }    }    output.write();    writer.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public BasicConstraints(byte[] encoding) throws IOException {  super(encoding);  Object[] values=(Object[])ASN1.decode(encoding);  ca=(Boolean)values[0];  if (values[1] != null) {    pathLenConstraint=new BigInteger((byte[])values[1]).intValue();  }}  }
class C{  protected void extendExprGraph(LetExpression exprGraph,BlockContainer container,Set<OutputAnchor> outsideAnchors){  connection.ifPresent(null);}  }
class C{  public SymbolTableEntryInternal steFor_register(){  return getSymbolTableEntryInternal("register",true);}  }
class C{  private void fillTrackPoint(Cursor cursor,CachedTrackPointsIndexes indexes,Location location){  location.reset();  if (!cursor.isNull(indexes.longitudeIndex)) {    location.setLongitude(((double)cursor.getInt(indexes.longitudeIndex)) / 1E6);  }  if (!cursor.isNull(indexes.latitudeIndex)) {    location.setLatitude(((double)cursor.getInt(indexes.latitudeIndex)) / 1E6);  }  if (!cursor.isNull(indexes.timeIndex)) {    location.setTime(cursor.getLong(indexes.timeIndex));  }  if (!cursor.isNull(indexes.altitudeIndex)) {    location.setAltitude(cursor.getFloat(indexes.altitudeIndex));  }  if (!cursor.isNull(indexes.accuracyIndex)) {    location.setAccuracy(cursor.getFloat(indexes.accuracyIndex));  }  if (!cursor.isNull(indexes.speedIndex)) {    location.setSpeed(cursor.getFloat(indexes.speedIndex));  }  if (!cursor.isNull(indexes.bearingIndex)) {    location.setBearing(cursor.getFloat(indexes.bearingIndex));  }  if (location instanceof MyTracksLocation && !cursor.isNull(indexes.sensorIndex)) {    MyTracksLocation myTracksLocation=(MyTracksLocation)location;    try {      myTracksLocation.setSensorDataSet(SensorDataSet.parseFrom(cursor.getBlob(indexes.sensorIndex)));    } catch (    InvalidProtocolBufferException e) {      Log.w(TAG,"Failed to parse sensor data.",e);    }  }}  }
class C{  public void traverse(Node pos) throws org.xml.sax.SAXException {  this.m_contentHandler.startDocument();  Node top=pos;  while (null != pos) {    startNode(pos);    Node nextNode=pos.getFirstChild();    while (null == nextNode) {      endNode(pos);      if (top.equals(pos))       break;      nextNode=pos.getNextSibling();      if (null == nextNode) {        pos=pos.getParentNode();        if ((null == pos) || (top.equals(pos))) {          if (null != pos)           endNode(pos);          nextNode=null;          break;        }      }    }    pos=nextNode;  }  this.m_contentHandler.endDocument();}  }
class C{  public void addBitmap(int x1,int y1,int w,int h,byte[] bytes,LinkProperties properties) throws IOException {  LinkBitmap.write(x1,y1,w,h,bytes,properties,link.dos);}  }
class C{  private void expand(int i){  if (count + i <= buf.length) {    return;  }  byte[] newbuf=mPool.getBuf((count + i) * 2);  System.arraycopy(buf,0,newbuf,0,count);  mPool.returnBuf(buf);  buf=newbuf;}  }
class C{  public static int EDQUOT(){  return Errno.EDQUOT.intValue();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void createOrSelectMap(String mapName){  if (mapName == null)   return;  map.eraseMap();  MarkerType.reset();  map.addMap(mapName);  toolBar.addMap(mapName);  toolBar.selectMap(mapName);  PersistentMap pm=map.getMapStore().getMap(mapName);  System.out.println("map " + map.getMapStore().getSelectedMapName() + " has "+ pm.getRoutes().size()+ " routes.");  map.setOverlayVisible(false);  toolBar.mapSelected(pm);}  }
class C{  public String toString(){  String message=template;  for (int i=0; i < params.length; i++) {    String param="{" + i + "}";    int pos=message.indexOf(param);    if (pos > -1) {      message=message.substring(0,pos) + (params[i] != null ? params[i] : "(null)") + message.substring(pos + param.length());    }  }  for (  String extraParameter : extraParameters) {    message=message + "; " + extraParameter;  }  return message;}  }
class C{  @Override public DriverTask discoverStoragePools(StorageSystem storageSystem,List<StoragePool> storagePools){  _log.info("3PARDriver: discoverStoragePools information for storage system {}, nativeId {} - start",storageSystem.getIpAddress(),storageSystem.getNativeId());  DriverTask task=createDriverTask(HP3PARConstants.TASK_TYPE_DISCOVER_STORAGE_POOLS);  DeduplicationCapabilityDefinition dedupCapabilityDefinition=new DeduplicationCapabilityDefinition();  try {    HP3PARApi hp3parApi=hp3parUtil.getHP3PARDeviceFromNativeId(storageSystem.getNativeId(),this.driverRegistry);    CPGCommandResult cpgResult=hp3parApi.getAllCPGDetails();    for (    CPGMember currMember : cpgResult.getMembers()) {      StoragePool pool=new StoragePool();      pool.setPoolName(currMember.getName());      pool.setStorageSystemId(storageSystem.getNativeId());      Set<Protocols> supportedProtocols=new HashSet<>();      supportedProtocols.add(Protocols.iSCSI);      supportedProtocols.add(Protocols.FC);      pool.setProtocols(supportedProtocols);      pool.setTotalCapacity((currMember.getUsrUsage().getTotalMiB().longValue() + currMember.getSAUsage().getTotalMiB().longValue() + currMember.getSDUsage().getTotalMiB().longValue()) * HP3PARConstants.KILO_BYTE);      pool.setSubscribedCapacity((currMember.getUsrUsage().getUsedMiB().longValue() + currMember.getSAUsage().getUsedMiB().longValue() + currMember.getSDUsage().getUsedMiB().longValue()) * HP3PARConstants.KILO_BYTE);      pool.setFreeCapacity(pool.getTotalCapacity() - pool.getSubscribedCapacity());      pool.setOperationalStatus(currMember.getState() == 1 ? PoolOperationalStatus.READY : PoolOperationalStatus.NOTREADY);      Set<RaidLevels> supportedRaidLevels=new HashSet<>();switch (currMember.getSDGrowth().getLDLayout().getRAIDType()) {case 1:        supportedRaidLevels.add(RaidLevels.RAID0);      break;case 2:    supportedRaidLevels.add(RaidLevels.RAID1);  break;case 3:supportedRaidLevels.add(RaidLevels.RAID5);break;case 4:supportedRaidLevels.add(RaidLevels.RAID6);break;}pool.setSupportedRaidLevels(supportedRaidLevels);if (currMember.getSDGrowth().getLDLayout().getDiskPatterns() == null) {_log.warn("3PARDriver: Neglecting storage pool {} as there is no disk associated with it",currMember.getName());continue;}Set<SupportedDriveTypes> supportedDriveTypes=new HashSet<>();for (int j=0; j < currMember.getSDGrowth().getLDLayout().getDiskPatterns().size(); j++) {switch (currMember.getSDGrowth().getLDLayout().getDiskPatterns().get(j).getDiskType()) {case 1:supportedDriveTypes.add(SupportedDriveTypes.FC);break;case 2:supportedDriveTypes.add(SupportedDriveTypes.NL_SAS);break;case 3:supportedDriveTypes.add(SupportedDriveTypes.SSD);break;}}pool.setSupportedDriveTypes(supportedDriveTypes);pool.setMaximumThinVolumeSize(16 * HP3PARConstants.MEGA_BYTE);pool.setMinimumThinVolumeSize(256 * HP3PARConstants.KILO_BYTE);pool.setMaximumThickVolumeSize(16 * HP3PARConstants.MEGA_BYTE);pool.setMinimumThickVolumeSize(256 * HP3PARConstants.KILO_BYTE);pool.setSupportedResourceType(SupportedResourceType.THIN_AND_THICK);pool.setPoolServiceType(PoolServiceType.block);pool.setNativeId(currMember.getName());pool.setDeviceLabel(currMember.getName());pool.setDisplayName(currMember.getName());storageSystem.setAccessStatus(AccessStatus.READ_WRITE);List<CapabilityInstance> capabilities=new ArrayList<>();if (currMember.isDedupCapable()) {Boolean dedupEnabled=true;Map<String,List<String>> props=new HashMap<>();props.put(DeduplicationCapabilityDefinition.PROPERTY_NAME.ENABLED.name(),Arrays.asList(dedupEnabled.toString()));CapabilityInstance capabilityInstance=new CapabilityInstance(dedupCapabilityDefinition.getId(),dedupCapabilityDefinition.getId(),props);capabilities.add(capabilityInstance);}pool.setCapabilities(capabilities);_log.info("3PARDriver: added storage pool {}, native id {}",pool.getPoolName(),pool.getNativeId());storagePools.add(pool);}task.setStatus(DriverTask.TaskStatus.READY);_log.info("3PARDriver: discoverStoragePools information for storage system {}, nativeId {} - end",storageSystem.getIpAddress(),storageSystem.getNativeId());} catch (Exception e) {String msg=String.format("3PARDriver: Unable to discover the storage pool information for storage system %s native id %s; Error: %s.\n",storageSystem.getSystemName(),storageSystem.getNativeId(),e);_log.error(msg);_log.error(CompleteError.getStackTrace(e));task.setMessage(msg);task.setStatus(DriverTask.TaskStatus.FAILED);e.printStackTrace();}return task;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-01-27 09:54:40.219 -0500",hash_original_method="4B5AD0CA4BAB4787DEF9E50D606D6D18",hash_generated_method="B8BF78A2C42DF8A207F0CE28FF8926A5") public AtomicFile(File baseName){  mBaseName=baseName;  mBackupName=new File(baseName.getPath() + ".bak");}  }
class C{  public VisorQueryField(String schemaName,String typeName,String fieldName,String fieldTypeName){  this.schemaName=schemaName;  this.typeName=typeName;  this.fieldName=fieldName;  this.fieldTypeName=fieldTypeName;}  }
class C{  public String noSizeDeterminationTipText(){  return "If enabled, the size determination for train/test/clusterer is skipped.";}  }
class C{  void deselectItem(int index){  if (!isSelected(index)) {    return;  }  if (!multipleSelections) {    selected=new int[0];  } else {    int i=posInSel(index);    int newsel[]=new int[selected.length - 1];    System.arraycopy(selected,0,newsel,0,i);    System.arraycopy(selected,i + 1,newsel,i,selected.length - (i + 1));    selected=newsel;  }  currentIndex=index;  if (!isItemHidden(index)) {    repaint(index,index,PAINT_ITEMS);  }}  }
class C{  @Override public void updateBigDecimal(String columnLabel,BigDecimal x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateBigDecimal(" + quote(columnLabel) + ", "+ quoteBigDecimal(x)+ ");");    }    update(columnLabel,x == null ? (Value)ValueNull.INSTANCE : ValueDecimal.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public int xyToOffset(int x,int y){  int line=yToLine(y);  int start=getLineStartOffset(line);  return start + xToOffset(line,x);}  }
class C{  private void addSearchHistory(String c){  if (StringUtils.isBlank(c)) {    return;  }  for (int i=0; i < cbSearch.getItemCount(); i++) {    if (((String)cbSearch.getItemAt(i)).equals(c)) {      return;    }  }  cbSearch.insertItemAt(c,0);  if (cbSearch.getItemCount() > 25) {    for (int i=25; i < cbSearch.getItemCount(); )     cbSearch.removeItemAt(i);  }  tfSearchEditor.setText((String)cbSearch.getItemAt(0));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void acceptInvitation() throws RcsGenericException {  try {    mSharingInf.acceptInvitation();  } catch (  Exception e) {    throw new RcsGenericException(e);  }}  }
class C{  protected Image renderedImageToImage(RenderedImage ri){  int x=ri.getMinX();  int y=ri.getMinY();  SampleModel sm=ri.getSampleModel();  ColorModel cm=ri.getColorModel();  WritableRaster wr=Raster.createWritableRaster(sm,new Point(x,y));  ri.copyData(wr);  return new BufferedImage(cm,wr,cm.isAlphaPremultiplied(),null);}  }
class C{  protected boolean needToReverse(int x1,int y1,int x2,int y2){  boolean reverse=false;switch (getOrientation() & ~FOLLOW_POLY) {case FORWARD:    break;case BACKWARD:  reverse=true;break;case LEFT_TO_RIGHT:reverse=x1 > x2;break;case RIGHT_TO_LEFT:reverse=x1 < x2;break;case TOP_TO_BOTTOM:reverse=y1 > y2;break;case BOTTOM_TO_TOP:reverse=y1 < y2;break;case MOST_READABLE:reverse=x2 < x1 || y1 > y2;break;}return reverse;}  }
class C{  public static void check(IndexReader reader,BitSetProducer parentsFilter) throws IOException {  for (  LeafReaderContext context : reader.leaves()) {    if (context.reader().maxDoc() == 0) {      continue;    }    final BitSet parents=parentsFilter.getBitSet(context);    if (parents == null || parents.cardinality() == 0) {      throw new IllegalStateException("Every segment should have at least one parent, but " + context.reader() + " does not have any");    }    if (parents.get(context.reader().maxDoc() - 1) == false) {      throw new IllegalStateException("The last document of a segment must always be a parent, but " + context.reader() + " has a child as a last doc");    }    final Bits liveDocs=context.reader().getLiveDocs();    if (liveDocs != null) {      int prevParentDoc=-1;      DocIdSetIterator it=new BitSetIterator(parents,0L);      for (int parentDoc=it.nextDoc(); parentDoc != DocIdSetIterator.NO_MORE_DOCS; parentDoc=it.nextDoc()) {        final boolean parentIsLive=liveDocs.get(parentDoc);        for (int child=prevParentDoc + 1; child != parentDoc; child++) {          final boolean childIsLive=liveDocs.get(child);          if (parentIsLive != childIsLive) {            if (childIsLive) {              throw new IllegalStateException("Parent doc " + parentDoc + " of segment "+ context.reader()+ " is live but has a deleted child document "+ child);            } else {              throw new IllegalStateException("Parent doc " + parentDoc + " of segment "+ context.reader()+ " is deleted but has a live child document "+ child);            }          }        }        prevParentDoc=parentDoc;      }    }  }}  }
class C{  public void removeAttribute(String key){  checkClient();  client.removeAttribute(key);}  }
class C{  XPath createMatchPatternXPath(String str,ElemTemplateElement owningTemplate) throws javax.xml.transform.TransformerException {  ErrorListener handler=m_stylesheetProcessor.getErrorListener();  XPath xpath=new XPath(str,owningTemplate,this,XPath.MATCH,handler,m_funcTable);  xpath.callVisitors(xpath,new ExpressionVisitor(getStylesheetRoot()));  return xpath;}  }
class C{  @Override public int hashCode(){  int hash=5;  hash=89 * hash + (this.clientId != null ? this.clientId.hashCode() : 0);  return hash;}  }
class C{  public void putLong(String key,long value){  if (key != null && value > -1) {    mPreferences.edit().putLong(key,value).apply();  }}  }
class C{  public void close() throws NamingException {}  }
class C{  public boolean remove(K key,V value){  key=sanitizeKey(key);  List<V> values=map.get(key);  if (values == null) {    return false;  }  boolean success=values.remove(value);  if (values.isEmpty()) {    map.remove(key);  }  return success;}  }
class C{  public Pcd(IndependenceTest independenceTest){  if (independenceTest == null) {    throw new NullPointerException();  }  this.independenceTest=independenceTest;}  }
class C{  public TDoubleLongHashMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  private void rDeterminePartitioningCandidates(String var,ArrayList<StatementBlock> asb,List<PDataPartitionFormat> C) throws LanguageException {  for (  StatementBlock sb : asb)   for (  Statement s : sb._statements) {    if (s instanceof ForStatement) {      ForStatement fs=(ForStatement)s;      List<DataIdentifier> datsFromRead=rGetDataIdentifiers(fs.getIterablePredicate().getFromExpr());      List<DataIdentifier> datsToRead=rGetDataIdentifiers(fs.getIterablePredicate().getToExpr());      List<DataIdentifier> datsIncrementRead=rGetDataIdentifiers(fs.getIterablePredicate().getIncrementExpr());      rDeterminePartitioningCandidates(var,datsFromRead,C);      rDeterminePartitioningCandidates(var,datsToRead,C);      rDeterminePartitioningCandidates(var,datsIncrementRead,C);      rDeterminePartitioningCandidates(var,((ForStatement)s).getBody(),C);    } else     if (s instanceof WhileStatement) {      WhileStatement ws=(WhileStatement)s;      List<DataIdentifier> datsRead=rGetDataIdentifiers(ws.getConditionalPredicate().getPredicate());      rDeterminePartitioningCandidates(var,datsRead,C);      rDeterminePartitioningCandidates(var,((WhileStatement)s).getBody(),C);    } else     if (s instanceof IfStatement) {      IfStatement is=(IfStatement)s;      List<DataIdentifier> datsRead=rGetDataIdentifiers(is.getConditionalPredicate().getPredicate());      rDeterminePartitioningCandidates(var,datsRead,C);      rDeterminePartitioningCandidates(var,((IfStatement)s).getIfBody(),C);      rDeterminePartitioningCandidates(var,((IfStatement)s).getElseBody(),C);    } else     if (s instanceof FunctionStatement) {      rDeterminePartitioningCandidates(var,((FunctionStatement)s).getBody(),C);    } else {      List<DataIdentifier> datsRead=getDataIdentifiers(s,false);      rDeterminePartitioningCandidates(var,datsRead,C);    }  }}  }
class C{  public void addAllSurfaceObjects(List<SurfaceRenderable> c,Sector sector){  if (this.intersectingObjects == null)   this.intersectingObjects=new ArrayList<SurfaceRenderable>();  this.intersectingObjects.addAll(c);  this.objectSector=(this.objectSector != null) ? this.objectSector.union(sector) : sector;}  }
class C{  protected void firePropertyChange(PropertyChangeEvent event){  if (listenerList == null)   return;  PropertyChangeListener listener;  Iterator<PropertyChangeListener> it=listenerList.iterator();  while (it.hasNext()) {    listener=it.next();    listener.propertyChange(event);  }}  }
class C{  private void checkANTSensorsStatus(int viewID){  TextView sensorValueText=((TextView)EndToEndTestUtils.SOLO.getCurrentActivity().findViewById(viewID));  assertNotNull(sensorValueText);  String realValue=sensorValueText.getText().toString();  String noneValue=trackListActivity.getString(R.string.value_none);  assertNotSame(realValue,noneValue);}  }
class C{  private void validateNodesStatus(){  nodeCount=coordinator.getNodeCount();  if (aliveNodes.size() == nodeCount) {    markRecoveryCancelled();    log.warn("All nodes are alive, no need to do recovery");    throw new IllegalStateException("No need to do recovery");  } else   if (aliveNodes.size() < (nodeCount / 2 + 1)) {    markRecoveryCancelled();    log.warn("This procedure doesn't support majority nodes corrupted scenario");    throw new IllegalStateException("Majority nodes are corrupted");  }}  }
class C{  public static void addJavaDOptions(List<String> javaOpts,CommandLine line) throws Error {  java.util.Properties properties=line.getOptionProperties("D");  Set<String> propertyNames=new HashSet<>(Properties.getParameters());  for (  String propertyName : properties.stringPropertyNames()) {    if (!propertyNames.contains(propertyName)) {      LoggingUtils.getEvoLogger().error("* Unknown property: " + propertyName);      throw new Error("Unknown property: " + propertyName);    }    String propertyValue=properties.getProperty(propertyName);    javaOpts.add("-D" + propertyName + "="+ propertyValue);    System.setProperty(propertyName,propertyValue);    try {      Properties.getInstance().setValue(propertyName,propertyValue);    } catch (    Exception e) {      throw new Error("Invalid value for property " + propertyName + ": "+ propertyValue+ ". Exception "+ e.getMessage(),e);    }  }}  }
class C{  public SVGApplicationModel(){  gridConstrainer=new GridConstrainer(12,12);}  }
class C{  public void createScheduler(String schedulerName,String schedulerInstanceId,ThreadPool threadPool,JobStore jobStore,Map<String,SchedulerPlugin> schedulerPluginMap,String rmiRegistryHost,int rmiRegistryPort,long idleWaitTime,long dbFailureRetryInterval,boolean jmxExport,String jmxObjectName) throws SchedulerException {  createScheduler(schedulerName,schedulerInstanceId,threadPool,DEFAULT_THREAD_EXECUTOR,jobStore,schedulerPluginMap,rmiRegistryHost,rmiRegistryPort,idleWaitTime,dbFailureRetryInterval,jmxExport,jmxObjectName);}  }
class C{  public ExponentialExponentialModel(Parameter N0Parameter,Parameter growthRateParameter,Parameter ancestralGrowthRateParameter,Parameter transitionTimeParameter,Type units){  this(ExponentialExponentialModelParser.EXPONENTIAL_EXPONENTIAL_MODEL,N0Parameter,growthRateParameter,ancestralGrowthRateParameter,transitionTimeParameter,units);}  }
class C{  public byte[] toBytes() throws UnsupportedEncodingException {  StringBuilder result=new StringBuilder(256);  result.append(requestLine).append("\r\n");  for (int i=0; i < namesAndValues.size(); i+=2) {    result.append(namesAndValues.get(i)).append(": ").append(namesAndValues.get(i + 1)).append("\r\n");  }  result.append("\r\n");  return result.toString().getBytes("ISO-8859-1");}  }
class C{  @Override public <T>MappingIterator<T> readValues(JsonParser jp,TypeReference<?> valueTypeRef) throws IOException, JsonProcessingException {  return readValues(jp,_typeFactory.constructType(valueTypeRef));}  }
class C{  public DEREncodedKeyValue itemDEREncodedKeyValue(int i) throws XMLSecurityException {  Element e=XMLUtils.selectDs11Node(this.constructionElement.getFirstChild(),Constants._TAG_DERENCODEDKEYVALUE,i);  if (e != null) {    return new DEREncodedKeyValue(e,this.baseURI);  }  return null;}  }
class C{  public Bundler putByte(String key,byte value){  bundle.putByte(key,value);  return this;}  }
class C{  public Secret transform(SecretSeriesAndContent seriesAndContent){  checkNotNull(seriesAndContent);  SecretSeries series=seriesAndContent.series();  SecretContent content=seriesAndContent.content();  return new Secret(series.id(),series.name(),series.description(),null,content.hmac(),series.createdAt(),series.createdBy(),series.updatedAt(),series.updatedBy(),content.metadata(),series.type().orElse(null),series.generationOptions(),content.expiry());}  }
class C{  public EventBinder<E> withPriority(int priority){  this.priority=priority;  return this;}  }
class C{  @Bean @Order(100) public FilterRegistrationBean eTagFilter(){  final FilterRegistrationBean filterRegBean=new FilterRegistrationBean();  filterRegBean.setFilter(new ExcludePathAwareShallowETagFilter("/rest/v1/softwaremodules/{smId}/artifacts/{artId}/download","/{tenant}/controller/artifacts/**","/{targetid}/softwaremodules/{softwareModuleId}/artifacts/**"));  return filterRegBean;}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=zzLexicalState;    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 5:{        addNullToken();        return firstToken;      }case 20:    break;case 10:{    addToken(Token.LITERAL_CHAR);  }case 21:break;case 8:{addToken(Token.WHITESPACE);}case 22:break;case 12:{addToken(Token.LITERAL_NUMBER_FLOAT);}case 23:break;case 13:{addToken(Token.RESERVED_WORD);}case 24:break;case 9:{addToken(Token.SEPARATOR);}case 25:break;case 15:{yybegin(LONG_STRING_1);addToken(Token.LITERAL_CHAR);}case 26:break;case 2:{addToken(Token.IDENTIFIER);}case 27:break;case 14:{addToken(Token.FUNCTION);}case 28:break;case 1:{addToken(Token.ERROR_IDENTIFIER);}case 29:break;case 17:{addToken(Token.DATA_TYPE);}case 30:break;case 4:{addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 31:break;case 7:{addToken(Token.COMMENT_EOL);}case 32:break;case 11:{addToken(Token.ERROR_NUMBER_FORMAT);}case 33:break;case 3:{addToken(Token.LITERAL_NUMBER_DECIMAL_INT);}case 34:break;case 6:{addToken(Token.OPERATOR);}case 35:break;case 19:{yybegin(YYINITIAL);addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 36:break;case 16:{yybegin(LONG_STRING_2);addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}case 37:break;case 18:{yybegin(YYINITIAL);addToken(Token.LITERAL_CHAR);}case 38:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case YYINITIAL:{addNullToken();return firstToken;}case 266:break;case LONG_STRING_2:{if (firstToken == null) {addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);}return firstToken;}case 267:break;case LONG_STRING_1:{if (firstToken == null) {addToken(Token.LITERAL_CHAR);}return firstToken;}case 268:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public Task<FileSnapshotRestRep> deactivate(URI id){  return doDeactivateWithTask(id);}  }
class C{  public void addRoleOverride(String roleId,PermissionOverride override){  roleOverrides.put(roleId,override);}  }
class C{  private void receivedClientFinished(Finished message) throws HandshakeException {  message.verifyData(session.getMasterSecret(),true,handshakeHash);  sessionEstablished();  handshakeCompleted();}  }
class C{  public UIOptions(){  initComponents();  hideAllUnsedComponents();  String path=System.getProperty("user.home") + "/EsPReSSO";  String decoded_path=null;  try {    if (path != null) {      decoded_path=URLDecoder.decode(path,"UTF-8");      if (decoded_path != null) {        File file=new File(decoded_path);        if (!file.exists()) {          file.mkdir();        }        path=decoded_path + "/config.json";        file=new File(path);        if (!file.exists()) {          file.createNewFile();          configText1.setText(path);          saveConfig(path);        } else {          configText1.setText(path);          loadConfig(path);        }      }    }  } catch (  UnsupportedEncodingException ex) {    JOptionPane.showMessageDialog(this,ex.toString(),"ERROR 2",JOptionPane.ERROR_MESSAGE);  }catch (  IOException ex) {    JOptionPane.showMessageDialog(this,ex.toString(),"ERROR 2",JOptionPane.ERROR_MESSAGE);  }}  }
class C{  private void resetCatalog(boolean isSource,String newCatalog){  String name=getCatalogName(isSource,newCatalog);  ArrayList<String> databaseCatalogs=getCatalogNames(isSource);  if (isSource) {    m_sourceCatalog.removeAllItems();  } else {    m_targetCatalog.removeAllItems();  }  if (databaseCatalogs != null && databaseCatalogs.size() > 0) {    for (    String databaseCatalog : databaseCatalogs) {      if (isSource) {        m_sourceCatalog.addItem(databaseCatalog.toLowerCase());      } else {        m_targetCatalog.addItem(databaseCatalog.toLowerCase());      }    }  }  if (isSource) {    m_sourceCatalog.setSelectedItem(name);    m_sourceCatalogOld=name;  } else {    m_targetCatalog.setSelectedItem(name);    m_targetCatalogOld=name;  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void add(final String name,final int index,final int[] frameIndexes,final int[] frameDelays){  acquire(name).add(index,frameIndexes,frameDelays);}  }
class C{  private void internalOnControlAcquired(int streamType){  LogUtils.log(this,Log.VERBOSE,"Acquired control of stream %d",streamType);  mHandler.releaseControlDelayed();}  }
class C{  public void testIsReadOnly(){  try {    assertFalse(rsmd.isReadOnly(1));  } catch (  SQLException e1) {    fail("ResultSetMetaDataTest.isReadOnly" + e1.getMessage());    e1.printStackTrace();  }  try {    rsmd.isReadOnly(0);    fail("SQLException is not thrown");  } catch (  SQLException e) {  }}  }
class C{  public MapObject(Object id,Drawable drawable,Point position,Point pivotPoint,boolean isTouchable){  this(id,drawable,position.x,position.y,pivotPoint.x,pivotPoint.y,isTouchable,true);}  }
class C{  public void onCancelContractDetails(Contract contract){  if (m_client.isConnected()) {    if (m_contractRequests.contains(contract.getId())) synchronized (m_contractRequests) {      m_contractRequests.remove(contract.getId());    }  }}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public static String asString(Field field){  return new RecordWriter().append(field).toString();}  }
class C{  public static double uniform(){  return random.nextDouble();}  }
class C{  private String readQuotedId(boolean returnText) throws IOException, XmlPullParserException {  int quote=peekCharacter();  char[] delimiter;  if (quote == '"') {    delimiter=DOUBLE_QUOTE;  } else   if (quote == '\'') {    delimiter=SINGLE_QUOTE;  } else {    throw new XmlPullParserException("Expected a quoted string",this,null);  }  position++;  return readUntil(delimiter,returnText);}  }
class C{  private void initializeLiveAttributes(){  cx=createLiveAnimatedLength(null,SVG_CX_ATTRIBUTE,SVG_ELLIPSE_CX_DEFAULT_VALUE,SVGOMAnimatedLength.HORIZONTAL_LENGTH,false);  cy=createLiveAnimatedLength(null,SVG_CY_ATTRIBUTE,SVG_ELLIPSE_CY_DEFAULT_VALUE,SVGOMAnimatedLength.VERTICAL_LENGTH,false);  rx=createLiveAnimatedLength(null,SVG_RX_ATTRIBUTE,null,SVGOMAnimatedLength.HORIZONTAL_LENGTH,true);  ry=createLiveAnimatedLength(null,SVG_RY_ATTRIBUTE,null,SVGOMAnimatedLength.VERTICAL_LENGTH,true);}  }
class C{  public static boolean isVariable(String s){  for (int i=0; i < s.length(); i++) {    if (!Character.isUpperCase(s.charAt(i))) {      return false;    }  }  return true;}  }
class C{  public void modifyShare(String id,IsilonSMBShare s) throws IsilonException {  modify(_baseUrl.resolve(URI_SMB_SHARES),id,"share",s);}  }
class C{  public BufferedImage createShadow(final BufferedImage image){  if (hints.get(KEY_BLUR_QUALITY) == VALUE_BLUR_QUALITY_HIGH) {    BufferedImage subject=prepareImage(image);    BufferedImage shadow=new BufferedImage(subject.getWidth(),subject.getHeight(),BufferedImage.TYPE_INT_ARGB);    BufferedImage shadowMask=createShadowMask(subject);    getLinearBlurOp(size).filter(shadowMask,shadow);    return shadow;  }  return createShadowFast(image);}  }
class C{  synchronized void addExtendedStyle(Style attr){  insertAttributeSetAt(attr,getAttributes().length);}  }
class C{  void actionCommandImpl(Command cmd){  actionCommandImpl(cmd,new ActionEvent(cmd,ActionEvent.Type.Command));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public String sprintf(final Object x) throws IllegalArgumentException {  final Iterator<ConversionSpecification> e=vFmt.iterator();  ConversionSpecification cs;  char c;  final StringBuilder sb=new StringBuilder();  while (e.hasNext()) {    cs=e.next();    c=cs.getConversionCharacter();    if (c == '\0') {      sb.append(cs.getLiteral());    } else     if (c == '%') {      sb.append('%');    } else {      if (x instanceof Byte) {        sb.append(cs.internalsprintf(((Number)x).byteValue()));      } else       if (x instanceof Short) {        sb.append(cs.internalsprintf(((Number)x).shortValue()));      } else       if (x instanceof Integer) {        sb.append(cs.internalsprintf(((Number)x).intValue()));      } else       if (x instanceof Long) {        sb.append(cs.internalsprintf(((Number)x).longValue()));      } else       if (x instanceof Float) {        sb.append(cs.internalsprintf(((Number)x).floatValue()));      } else       if (x instanceof Double) {        sb.append(cs.internalsprintf(((Number)x).doubleValue()));      } else       if (x instanceof Character) {        sb.append(cs.internalsprintf(((Character)x).charValue()));      } else       if (x instanceof String) {        sb.append(cs.internalsprintf((String)x));      } else {        sb.append(cs.internalsprintf(x));      }    }  }  return sb.toString();}  }
class C{  private void checkLockExpressionInGuardedByAnnotation(AnnotationTree tree,AnnotationMirror guardedByAnnotation){  List<String> guardedByValue=AnnotationUtils.getElementValueArray(guardedByAnnotation,"value",String.class,true);  if (guardedByValue.isEmpty()) {    return;  }  TreePath path=getCurrentPath();  MethodTree enclMethod=TreeUtils.enclosingMethod(path);  FlowExpressionContext flowExprContext;  if (enclMethod != null) {    flowExprContext=FlowExpressionContext.buildContextForMethodDeclaration(enclMethod,path,checker.getContext());  } else {    ClassTree enclosingClass=TreeUtils.enclosingClass(path);    flowExprContext=FlowExpressionContext.buildContextForClassDeclaration(enclosingClass,checker.getContext());  }  if (flowExprContext == null) {    checker.report(Result.failure("lock.expression.possibly.not.final",guardedByValue),tree);    return;  }  TreePath pathForLocalVariableRetrieval=getPathForLocalVariableRetrieval(path);  if (pathForLocalVariableRetrieval == null) {    checker.report(Result.failure("lock.expression.possibly.not.final",guardedByValue),tree);    return;  }  for (  String lockExpression : guardedByValue) {    try {      parseExpressionString(lockExpression,flowExprContext,pathForLocalVariableRetrieval,null,tree,true);    } catch (    FlowExpressionParseException e) {      checker.report(e.getResult(),tree);    }  }}  }
class C{  void determineCurrentRegion(SchellingGeometry poly){  ArrayList<SchellingGeometry> checked=new ArrayList<SchellingGeometry>();  ArrayList<SchellingGeometry> toCheck=new ArrayList<SchellingGeometry>();  checked.add(poly);  toCheck.addAll(poly.neighbors);  while (toCheck.size() > 0) {    SchellingGeometry p=toCheck.remove(0);    if (p.geometry.contains(location.geometry)) {      region=p;      return;    } else {      checked.add(p);      for (      SchellingGeometry n : p.neighbors) {        if (!checked.contains(n) && !toCheck.contains(n)) {          toCheck.add(n);        }      }    }  }  System.out.println("ERROR: Person is not located within any polygon");}  }
class C{  public static boolean isEmpty(String str){  return isEmpty(str,false);}  }
class C{  public String outputDistributionTipText(){  return "Whether to add attributes with the distribution for all classes " + "(for numeric classes this will be identical to the attribute output " + "with 'outputClassification').";}  }
class C{  public Object removeFirst(){  Object first=header.next.element;  remove(header.next);  return first;}  }
class C{  public SnmpCachedData(long lastUpdated,TreeMap<SnmpOid,Object> indexMap){  this(lastUpdated,indexMap,true);}  }
class C{  public RuleOutput ground(Assignment grounding){  RuleOutput groundCase=new RuleOutput(type);  for (  Effect e : effects.keySet()) {    Effect groundedEffect=e.ground(grounding);    if (!groundedEffect.getSubEffects().isEmpty() || e.getSubEffects().isEmpty()) {      Parameter param=effects.get(e);      if (param instanceof ComplexParameter) {        param=((ComplexParameter)param).ground(grounding);      }      groundCase.addEffect(groundedEffect,param);    }  }  if (type == RuleType.PROB) {    groundCase.pruneEffects();    groundCase.addVoidEffect();  }  return groundCase;}  }
class C{  @RequestMapping(value="/{entity}/{cacheKey}/{event}",method={RequestMethod.PUT}) @ResponseBody public void wipeCache(@PathVariable String entity,@PathVariable String event,@PathVariable String cacheKey) throws IOException {  cacheService.notifyMetadataChange(entity,Broadcaster.Event.getEvent(event),cacheKey);}  }
class C{  public boolean isEmptyWriteSet(){  return writeSet.getEntryCount() == 0;}  }
class C{  private void readLockedThread(){  final long thisThreadId=Thread.currentThread().getId();  final Integer entry=threadLockMap.get(thisThreadId);  final Integer newVal=entry == null ? 1 : 1 + entry.intValue();  threadLockMap.put(thisThreadId,newVal);}  }
class C{  final public void print(double v){  try {    _out.print(v);  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  public PerThreadTagHandlerPool(){  super();  perThreadDataVector=new Vector<PerThreadData>();}  }
class C{  public boolean onScrollChanged(int scrollY){  boolean isPullingDownNow=scrollY < lastScrollY;  latestPullingDown.offer(isPullingDownNow);  if (latestPullingDown.size() > PULLING_DOWN_TIME_MAX) {    latestPullingDown.poll();  }  lastScrollY=scrollY;  return getPullingDownTime() >= PULLING_DOWN_TIME_THRESHOLD;}  }
class C{  public SerialVersionDefaultOperation(ICompilationUnit unit,ASTNode[] nodes){  super(unit,nodes);}  }
class C{  public synchronized void truncate(long offset){  terms.tailMap(offset,false).clear();}  }
class C{  public DataPoint(Vec numericalValues,double weight){  this(numericalValues,emptyInt,emptyData,weight);}  }
class C{  public String toFormattedString(){  return "3D memory copy setup:\n    " + createString("\n    ");}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public void testDefaultsDynamic() throws Exception {  Similarity sim=getSimilarity("text_sim3");  assertEquals(DefaultSimilarity.class,sim.getClass());}  }
class C{  public static boolean isDistinctRow(char[][] s){  for (int i=0; i < s.length; i++) {    int[] counts=new int[s.length];    for (int j=0; j < s[i].length; j++) {      counts[s[i][j] - 65]++;      if (counts[s[i][j] - 65] > 1)       return false;    }  }  return true;}  }
class C{  public void snap(int position,int strategy){  if (mIgnoreIfCompletelyVisible && isCompletelyVisible(position)) {    return;  }  if (mIgnoreIfVisible && isVisible(position)) {    return;  }  if (position < 0) {    scrollToPosition(0);    return;  }  int diffFirst=getFirstVisiblePosition() - position;  int diffLast=position - getLastVisiblePosition();  if (diffFirst > diffLast) {    head(position);  } else   if (diffFirst < diffLast) {    tail(position);  } else {switch (strategy) {case SNAPPING_STRATEGY_HEAD:      head(position);    break;case SNAPPING_STRATEGY_TAIL:  tail(position);break;case SNAPPING_STRATEGY_CENTER:center(position);break;case SNAPPING_STRATEGY_NONE:break;}}}  }
class C{  public boolean isColorExtracted(){  return isColorExtracted;}  }
class C{  public Map<String,Object> convertDataToObjects(Map<String,String> data){  Map<String,Object> results=new HashMap<>();  if (data != null) {    for (    String key : data.keySet()) {      results.put(key,data.get(key));    }  }  return results;}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value={"UC_USELESS_CONDITION","RpC_REPEATED_CONDITIONAL_TEST"},justification="isChanged value is dependent on which user button is activated") private void runCustomSwitchLists(boolean isChanged){  if (!Setup.isGenerateCsvSwitchListEnabled()) {    return;  }  log.debug("run custom switch lists");  TrainSwitchLists trainSwitchLists=new TrainSwitchLists();  TrainCsvSwitchLists trainCsvSwitchLists=new TrainCsvSwitchLists();  for (  JCheckBox checkbox : new ArrayList<JCheckBox>(locationCheckBoxes)) {    String locationName=checkbox.getName();    Location location=locationManager.getLocationByName(locationName);    if (location.isSwitchListEnabled() && (!isChanged || (isChanged && location.getStatus().equals(Location.MODIFIED)))) {      if (!switchListRealTimeCheckBox.isSelected()) {        trainSwitchLists.buildSwitchList(location);      }      File csvFile=trainCsvSwitchLists.buildSwitchList(location);      if (csvFile == null || !csvFile.exists()) {        log.error("CSV switch list file was not created for location {}",locationName);        return;      }      TrainCustomSwitchList.instance().addCVSFile(csvFile);    }  }  if (!TrainCustomSwitchList.instance().excelFileExists()) {    log.warn("Manifest creator file not found!, directory name: {}, file name: {}",TrainCustomSwitchList.instance().getDirectoryName(),TrainCustomSwitchList.instance().getFileName());    JOptionPane.showMessageDialog(this,MessageFormat.format(Bundle.getMessage("LoadDirectoryNameFileName"),new Object[]{TrainCustomSwitchList.instance().getDirectoryName(),TrainCustomSwitchList.instance().getFileName()}),Bundle.getMessage("ManifestCreatorNotFound"),JOptionPane.ERROR_MESSAGE);    return;  }  TrainCustomSwitchList.instance().process();  TrainManager.instance().setTrainsSwitchListStatus(Train.PRINTED);}  }
class C{  public static void registerEntity(String serviceName,EntityDefinition entityDef){  final String table=entityDef.getTable();  if (entityServiceMap.containsKey(serviceName)) {    final EntityDefinition existing=entityServiceMap.get(serviceName);    if (entityDef.getClass().equals(existing.getClass())) {      return;    }    throw new IllegalArgumentException("Service " + serviceName + " has already been registered by "+ existing.getClass().getName()+ ", so class "+ entityDef.getClass()+ " can NOT be registered");  }synchronized (EntityDefinitionManager.class) {    checkPrefix(entityDef);    entityServiceMap.put(serviceName,entityDef);    Map<Integer,EntityDefinition> entityHashMap=entityPrefixMap.get(table);    if (entityHashMap == null) {      entityHashMap=new ConcurrentHashMap<Integer,EntityDefinition>();      entityPrefixMap.put(table,entityHashMap);    }    entityHashMap.put(entityDef.getPrefix().hashCode(),entityDef);    final IndexDefinition[] indexes=entityDef.getIndexes();    if (indexes != null) {      for (      IndexDefinition index : indexes) {        Map<Integer,IndexDefinition> indexHashMap=indexPrefixMap.get(table);        if (indexHashMap == null) {          indexHashMap=new ConcurrentHashMap<Integer,IndexDefinition>();          indexPrefixMap.put(table,indexHashMap);        }        indexHashMap.put(index.getIndexPrefix().hashCode(),index);      }    }    classMap.put(entityDef.getEntityClass(),entityDef);  }  if (LOG.isDebugEnabled()) {    LOG.debug(entityDef.getEntityClass().getSimpleName() + " entity registered successfully, table name: " + entityDef.getTable()+ ", prefix: "+ entityDef.getPrefix()+ ", service: "+ serviceName+ ", CF: "+ entityDef.getColumnFamily());  } else {    LOG.info(String.format("Registered %s (%s)",entityDef.getEntityClass().getSimpleName(),serviceName));  }}  }
class C{  public void startShakeDetection(ShakeListener shakeListener){  startLibrarySensorDetection(new ShakeDetector(shakeListener),shakeListener);}  }
class C{  public void visitAttribute(Attribute attr){  if (cv != null) {    cv.visitAttribute(attr);  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:18.444 -0500",hash_original_method="AB3CC143C94AF212348DFB5018C60850",hash_generated_method="B2EF44B3A7B822E184164B205FA8E5FC") void drawDivider(Canvas canvas,Rect bounds,int childIndex){  final Drawable divider=mDivider;  divider.setBounds(bounds);  divider.draw(canvas);}  }
class C{  public Set<String> allowableTags(TextAnnotation ta,int tokenId){  String form=ta.getToken(tokenId);  Set<String> result=allowableTags(form);  if (result.size() > 0)   return result;  if (WordHelpers.isCapitalized(ta,tokenId)) {    HashMap<String,TreeMap<String,Integer>> t;    int headOfSentence=ta.getSentence(ta.getSentenceId(tokenId)).getStartSpan();    if (tokenId == headOfSentence)     t=firstCapitalized; else     t=notFirstCapitalized;    if (form.length() >= 6) {      String suffix=form.substring(form.length() - 4).toLowerCase();      if (t.containsKey(suffix))       result=t.get(suffix).keySet();    }    if (result.size() == 0 && form.length() >= 5) {      String suffix=form.substring(form.length() - 3).toLowerCase();      if (t.containsKey(suffix))       result=t.get(suffix).keySet();    }    if (result.size() == 0)     result.add("NNP");  } else   if (form.contains("-")) {    result.add("NN");    result.add("JJ");  } else {    if (form.length() >= 6) {      String suffix=form.substring(form.length() - 4).toLowerCase();      if (table.containsKey(suffix))       result=table.get(suffix).keySet();    }    if (result.size() == 0 && form.length() >= 5) {      String suffix=form.substring(form.length() - 3).toLowerCase();      if (table.containsKey(suffix))       result=table.get(suffix).keySet();    }    if (result.size() == 0)     result.add("NN");  }  return result;}  }
class C{  public boolean parseFlags(MoeOptions options){  CmdLineParser parser=new CmdLineParser(options);  try {    parser.parseArgument(preprocessedArgs);    if (options.shouldDisplayHelp()) {      parser.printUsage(System.err);    }    return true;  } catch (  CmdLineException e) {    logger.log(Level.SEVERE,e.getMessage());    parser.printUsage(System.err);    return false;  }}  }
class C{  public CropTransformation(int width,int height){  this(width,height,GravityHorizontal.CENTER,GravityVertical.CENTER);}  }
class C{  public boolean equals(Object p){  if (!(p instanceof URLPermission)) {    return false;  }  URLPermission that=(URLPermission)p;  if (!this.scheme.equals(that.scheme)) {    return false;  }  if (!this.getActions().equals(that.getActions())) {    return false;  }  if (!this.authority.equals(that.authority)) {    return false;  }  if (this.path != null) {    return this.path.equals(that.path);  } else {    return that.path == null;  }}  }
class C{  public boolean isOwned(){  Object oo=get_Value(COLUMNNAME_IsOwned);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected void export(){  int retVal;  File file;  AbstractFileSaver saver;  if (m_FileChooser == null)   m_FileChooser=GUIHelper.newConverterFileChooser();  retVal=m_FileChooser.showSaveDialog(this);  if (retVal != ConverterFileChooser.APPROVE_OPTION)   return;  file=m_FileChooser.getSelectedFile();  saver=m_FileChooser.getSaver();  try {    saver.setInstances(m_DataPanel.getInstances());    saver.writeBatch();  } catch (  Exception e) {    JOptionPane.showMessageDialog(this,"Failed to save dataset to '" + file + "':\n"+ Utils.throwableToString(e),"Error saving",JOptionPane.ERROR_MESSAGE);  }}  }
class C{  private InitializeDeploymentMigrationWorkflowService.State buildValidPatchState(TaskState.TaskStage patchStage,InitializeDeploymentMigrationWorkflowService.TaskState.SubStage patchSubStage){  InitializeDeploymentMigrationWorkflowService.State patchState=new InitializeDeploymentMigrationWorkflowService.State();  patchState.taskState=new InitializeDeploymentMigrationWorkflowService.TaskState();  patchState.taskState.stage=patchStage;  patchState.taskState.subStage=patchSubStage;  if (TaskState.TaskStage.STARTED == patchStage) {switch (patchSubStage) {case CONTINOUS_MIGRATE_DATA:case UPLOAD_VIBS:      patchState.sourceZookeeperQuorum="quorum";    break;case PAUSE_DESTINATION_SYSTEM:  patchState.sourceDeploymentId="deployment1";break;}}return patchState;}  }
class C{  public void displayNodeInfo(String nodeID){  if (!nodeID.equals(selNodeID)) {    int nAdd=Integer.parseInt(nodeID);    SerialNode s=null;    for (int k=0; k < numConfigNodes; k++) {      if (nAdd == configNodeAddresses[k]) {        s=configNodes[k];      }    }    if (s == null) {      log.error("Cannot find Node " + nodeID + " in list of configured Nodes.");      return;    }    selNodeID=nodeID;    selNode=s;    selNodeNum=nAdd;    numInputBits=InputBits.getNumInputBits();    numOutputBits=OutputBits.getNumOutputBits();    nodeInfoText.setText(" - " + numInputBits + " "+ rb.getString("InputBitsAnd")+ " "+ numOutputBits+ " "+ rb.getString("OutputBits"));  }  if (inputSelected) {    numBits=numInputBits;    assignmentPanel.setBorder(inputBorderTitled);  } else {    numBits=numOutputBits;    assignmentPanel.setBorder(outputBorderTitled);  }  ((AssignmentTableModel)assignmentListModel).fireTableDataChanged();}  }
class C{  public int size(){  return content.size();}  }
class C{  public void testConstrCharIntIntMathContext(){  char value[]={'-','1','2','3','8','0','.','4','7','3','8','E','-','4','2','3'};  int offset=3;  int len=12;  int precision=4;  RoundingMode rm=RoundingMode.CEILING;  MathContext mc=new MathContext(precision,rm);  BigDecimal result=new BigDecimal(value,offset,len,mc);  String res="3.805E-40";  int resScale=43;  assertEquals("incorrect value",res,result.toString());  assertEquals("incorrect scale",resScale,result.scale());  try {    new BigDecimal(new char[]{},0,0,MathContext.DECIMAL32);    fail("NumberFormatException has not been thrown");  } catch (  NumberFormatException e) {  }}  }
class C{  public static Notification error(String title,String message,boolean clear){  return show(title,message,MessageType.ERROR,clear ? 10000 : 0);}  }
class C{  public void deleteRootPathMap() throws WikiApiException {  File rootPathFile=new File(this.rootPathMapFilename + "_" + wiki.getLanguage()+ "_"+ wiki.getMetaData().getVersion());  rootPathFile.delete();}  }
class C{  public static void registerDefaultResolvers(){synchronized (resolverList) {    resolverList.add(new ResourceResolver(new ResolverFragment()));    resolverList.add(new ResourceResolver(new ResolverLocalFilesystem()));    resolverList.add(new ResourceResolver(new ResolverXPointer()));    resolverList.add(new ResourceResolver(new ResolverDirectHTTP()));  }}  }
class C{  private void injectDependencies(){  ((BaseActivity)getActivity()).inject(this);}  }
class C{  public void displayApng(String uri,ImageView imageView,ApngConfig config){  super.displayImage(uri,imageView,new ApngImageLoadingListener(context,Uri.parse(uri),getAutoPlayHandler(config,null)));}  }
class C{  public SQLTimeoutException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public void testFieldDoc() throws Exception {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(newStringField("value","foo",Field.Store.NO));  writer.addDocument(doc);  doc=new Document();  doc.add(newStringField("value","bar",Field.Store.NO));  writer.addDocument(doc);  IndexReader ir=writer.getReader();  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(SortField.FIELD_DOC);  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(2,td.totalHits);  assertEquals(0,td.scoreDocs[0].doc);  assertEquals(1,td.scoreDocs[1].doc);  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  public Relationship mostConsciousRelationship(Primitive type,float correctness){  return nextMostConsciousRelationship(this.network.createVertex(type),(Vertex)null,correctness,false);}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return true;}  }
class C{  @Override public boolean equals(Object o){  if (o == null) {    return false;  }  if (!(o instanceof ImmutablePair)) {    return false;  }  ImmutablePair<?,?> other=(ImmutablePair<?,?>)o;  return Objects.equals(first,other.first) && Objects.equals(second,other.second);}  }
class C{  public static String encode(String source){  StringBuffer dest=new StringBuffer();  int sourceLen=source.length();  for (int i=0; i < sourceLen; i++) {    int runLength=1;    final char currentChar=source.charAt(i);    while (i + 1 < sourceLen && currentChar == source.charAt(i + 1)) {      runLength++;      i++;    }    dest.append(runLength);    dest.append(currentChar);  }  return dest.toString();}  }
class C{  public Folder createFoldersRecursively() throws RepositoryException {  Entry entry=locateEntry();  if (entry == null) {    Folder folder=parent().createFoldersRecursively();    Folder child=folder.createFolder(getName());    return child;  } else {    if (entry instanceof Folder) {      return (Folder)entry;    } else {      throw new RepositoryException(toString() + " is not a folder.");    }  }}  }
class C{  public EditorWindow(JPanel editor,String title,String buttonName,boolean cancellable,Component centeringComp){  super(title,true,true,true,false);  if (editor == null) {    throw new NullPointerException("Editor must not be null.");  }  this.buttonName=buttonName;  doSetup(editor,cancellable);  this.centeringComp=centeringComp;  setClosable(false);}  }
class C{  public void initializeLogging(){  LogWrapper logWrapper=new LogWrapper();  Log.setLogNode(logWrapper);  Log.i(TAG,"Ready");}  }
class C{  public void jjtReplaceWith(Node newNode){  if (parent != null) {    parent.jjtReplaceChild(this,newNode);  }  for (  Node childNode : children) {    childNode.jjtSetParent(newNode);  }}  }
