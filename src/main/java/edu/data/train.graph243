class C{  public boolean equals2D(Coordinate other){  if (x != other.x) {    return false;  }  if (y != other.y) {    return false;  }  return true;}  }
class C{  protected void moveToFinalFile(Path tempOutFilePath,Path destination) throws IOException {  Path src=Path.getPathWithoutSchemeAndAuthority(tempOutFilePath);  Path dst=Path.getPathWithoutSchemeAndAuthority(destination);  boolean moveSuccessful=false;  if (!outputFS.exists(dst.getParent())) {    outputFS.mkdirs(dst.getParent());  }  if (outputFS.exists(dst)) {    outputFS.delete(dst,false);  }  moveSuccessful=outputFS.rename(src,dst);  if (moveSuccessful) {    LOG.debug("File {} moved successfully to destination folder.",dst);  } else {    throw new RuntimeException("Unable to move file from " + src + " to "+ dst);  }}  }
class C{  public JSONObject(){  this.map=new HashMap<String,Object>();}  }
class C{  public static InetAddress parseInetAddr(byte[] inetAddrBytes,int offset,int count){  InetAddress inetAddress=null;  StringBuilder sb=new StringBuilder();  for (int i=0; i < count; i++) {    sb.append(Integer.toString(inetAddrBytes[offset + i] & 0xff));    if (i != count - 1) {      sb.append('.');    }  }  try {    inetAddress=InetAddress.getByName(sb.toString());  } catch (  UnknownHostException e) {    e.printStackTrace();  }  return inetAddress;}  }
class C{  public String next(int n) throws JSONException {  if (n == 0) {    return "";  }  char[] chars=new char[n];  int pos=0;  while (pos < n) {    chars[pos]=this.next();    if (this.end()) {      throw this.syntaxError("Substring bounds error");    }    pos+=1;  }  return new String(chars);}  }
class C{  public BatchUpdateException(String reason,int[] updateCounts,Throwable cause){  super(reason,cause);  this.updateCounts=updateCounts;}  }
class C{  private void resetNotes2(){  if (errorInStatus2) {    if (editMode) {      statusText1.setText(editStatus2);    } else {      statusText2.setText(stdStatus2);    }    errorInStatus2=false;  }}  }
class C{  public ReorderingTypes backwardOrientation(SampledRule rule){  final int f1=rule.srcStartInclusive - 1, f2=rule.srcEndExclusive, e2=rule.tgtEndExclusive;  boolean connectedMonotone=isPhraseAligned(rule,e2,f2,RelativePos.SE);  boolean connectedSwap=isPhraseAligned(rule,e2,f1,RelativePos.SW);  if (connectedMonotone && !connectedSwap)   return ReorderingTypes.monotone;  if (!connectedMonotone && connectedSwap)   return ReorderingTypes.swap;  return ReorderingTypes.discont1;}  }
class C{  public ObjectFactory(){}  }
class C{  public static String encodeString(String s){  return new String(encode(s.getBytes()));}  }
class C{  public boolean startsWith(java.lang.CharSequence prefix){  return startsWith(prefix,0);}  }
class C{  public static void swapRow(Matrix A,int j,int k,int start,int to){  double t;  for (int i=start; i < to; i++) {    t=A.get(j,i);    A.set(j,i,A.get(k,i));    A.set(k,i,t);  }}  }
class C{  protected boolean[] canHandleMissing(AttrTypes attrTypes,int classType,boolean attributeMissing,boolean classMissing,int missingLevel){  if (missingLevel == 100) {    print("100% ");  }  print("missing");  if (attributeMissing) {    print(" attribute");    if (classMissing) {      print(" and");    }  }  if (classMissing) {    print(" class");  }  print(" values");  printAttributeSummary(attrTypes,classType);  print("...");  ArrayList<String> accepts=new ArrayList<String>();  accepts.add("missing");  accepts.add("value");  accepts.add("train");  int numTrain=getNumInstances(), numTest=getNumInstances(), numClasses=2;  int numAtts=1, attrIndex=0;  return runBasicTest(attrTypes,numAtts,attrIndex,classType,missingLevel,attributeMissing,classMissing,numTrain,numTest,numClasses,accepts);}  }
class C{  @CheckReturnValue public TheoryBuilder<A> assuming(Predicate<A> newAssumption){  return new TheoryBuilder<A>(this.state,this.ps,this.assumptions.and(newAssumption));}  }
class C{  public void wrEof(){  writeLine(new byte[]{0,0,0,END});}  }
class C{  public Object clone() throws CloneNotSupportedException {  Portfolio portfolio=(Portfolio)super.clone();  List<Tradestrategy> tradestrategies=new ArrayList<Tradestrategy>(0);  portfolio.setTradestrategies(tradestrategies);  return portfolio;}  }
class C{  public void insertElementAt(int value,int at){  if (null == m_map) {    m_map=new int[m_blocksize];    m_mapSize=m_blocksize;  } else   if ((m_firstFree + 1) >= m_mapSize) {    m_mapSize+=m_blocksize;    int newMap[]=new int[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  if (at <= (m_firstFree - 1)) {    System.arraycopy(m_map,at,m_map,at + 1,m_firstFree - at);  }  m_map[at]=value;  m_firstFree++;}  }
class C{  public User(){}  }
class C{  public static boolean isMT(Instances D){  int L=D.classIndex();  for (int j=0; j < L; j++) {    if (D.attribute(j).isNominal()) {      if (D.attribute(j).numValues() > 2) {        return true;      }    } else {      System.err.println("[Warning] Found a non-nominal class -- not sure how this happened?");    }  }  return false;}  }
class C{  protected boolean dumpActivity(FileDescriptor fd,PrintWriter pw,String name,String[] args,int opti,boolean dumpAll){  ArrayList<ActivityRecord> activities=new ArrayList<ActivityRecord>();  if ("all".equals(name)) {synchronized (this) {      for (      ActivityRecord r1 : (ArrayList<ActivityRecord>)mMainStack.mHistory) {        activities.add(r1);      }    }  } else   if ("top".equals(name)) {synchronized (this) {      final int N=mMainStack.mHistory.size();      if (N > 0) {        activities.add((ActivityRecord)mMainStack.mHistory.get(N - 1));      }    }  } else {    ItemMatcher matcher=new ItemMatcher();    matcher.build(name);synchronized (this) {      for (      ActivityRecord r1 : (ArrayList<ActivityRecord>)mMainStack.mHistory) {        if (matcher.match(r1,r1.intent.getComponent())) {          activities.add(r1);        }      }    }  }  if (activities.size() <= 0) {    return false;  }  String[] newArgs=new String[args.length - opti];  if (args.length > 2)   System.arraycopy(args,opti,newArgs,0,args.length - opti);  TaskRecord lastTask=null;  boolean needSep=false;  for (int i=activities.size() - 1; i >= 0; i--) {    ActivityRecord r=(ActivityRecord)activities.get(i);    if (needSep) {      pw.println();    }    needSep=true;synchronized (this) {      if (lastTask != r.task) {        lastTask=r.task;        pw.print("TASK ");        pw.print(lastTask.affinity);        pw.print(" id=");        pw.println(lastTask.taskId);        if (dumpAll) {          lastTask.dump(pw,"  ");        }      }    }    dumpActivity("  ",fd,pw,activities.get(i),newArgs,dumpAll);  }  return true;}  }
class C{  public void disconnectForcibly(long quiesceTimeout,long disconnectTimeout) throws MqttException {  clientState.quiesce(quiesceTimeout);  MqttToken token=new MqttToken(client.getClientId());  try {    internalSend(new MqttDisconnect(),token);    token.waitForCompletion(disconnectTimeout);  } catch (  Exception ex) {  } finally {    token.internalTok.markComplete(null,null);    shutdownConnection(token,null);  }}  }
class C{  static Bitmap createIcon(Context context,Bitmap touchIcon,Bitmap favicon,BookmarkIconType type){  final ActivityManager am=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  final int iconDimension=am.getLauncherLargeIconSize();  final int iconDensity=am.getLauncherLargeIconDensity();  return createIcon(context,touchIcon,favicon,type,iconDimension,iconDensity);}  }
class C{  public SamFilterParamsBuilder restriction(final String restriction){  if (restriction == null) {    mRestriction=null;  } else {    mRestriction=new SamRegionRestriction(restriction);  }  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:52.447 -0500",hash_original_method="09D4558045FC0782254B0D972DDA4620",hash_generated_method="E1EE394D1A61777FB4D9A7601F314391") public PropertyChangeSupport(Object sourceBean){  if (sourceBean == null) {    throw new NullPointerException();  }  this.sourceBean=sourceBean;}  }
class C{  public static boolean emptyBetweenFiles(ClassicGame game,int rank,int startFile,int endFile){  boolean result=true;  for (int i=startFile + 1; i < endFile; i++) {    result=game.getPiece(getSquare(rank,i)) == EMPTY;    if (!result) {      break;    }  }  return result;}  }
class C{  public void onNativeInitializationComplete(){  mInitializationComplete=true;  if (mOnStartPending) {    mOnStartPending=false;    startNowAndProcessPendingItems();  }  if (mOnResumePending) {    mOnResumePending=false;    onResume();  }  try {    LibraryLoader.get(LibraryProcessType.PROCESS_BROWSER).onNativeInitializationComplete(mContext.getApplicationContext());  } catch (  ProcessInitException e) {    Log.e(TAG,"Unable to load native library.",e);    mActivityDelegate.onStartupFailure();    return;  }}  }
class C{  protected static boolean checkPathExistence(final String path){  return checkPathExistence(path,false,false,null);}  }
class C{  public static int stringToVariableTest(String str){  if (str.equals(rbean.getString("SignalHeadStateRed"))) {    return Conditional.TYPE_SIGNAL_HEAD_RED;  } else   if (str.equals(rbean.getString("SignalHeadStateYellow"))) {    return Conditional.TYPE_SIGNAL_HEAD_YELLOW;  } else   if (str.equals(rbean.getString("SignalHeadStateGreen"))) {    return Conditional.TYPE_SIGNAL_HEAD_GREEN;  } else   if (str.equals(rbean.getString("SignalHeadStateDark"))) {    return Conditional.TYPE_SIGNAL_HEAD_DARK;  } else   if (str.equals(rbean.getString("SignalHeadStateFlashingRed"))) {    return Conditional.TYPE_SIGNAL_HEAD_FLASHRED;  } else   if (str.equals(rbean.getString("SignalHeadStateFlashingYellow"))) {    return Conditional.TYPE_SIGNAL_HEAD_FLASHYELLOW;  } else   if (str.equals(rbean.getString("SignalHeadStateFlashingGreen"))) {    return Conditional.TYPE_SIGNAL_HEAD_FLASHGREEN;  } else   if (str.equals(rbean.getString("SignalHeadStateLunar"))) {    return Conditional.TYPE_SIGNAL_HEAD_LUNAR;  } else   if (str.equals(rbean.getString("SignalHeadStateFlashingLunar"))) {    return Conditional.TYPE_SIGNAL_HEAD_FLASHLUNAR;  }  if (str.length() > 0) {    log.warn("Unexpected parameter to stringToVariableTest(" + str + ")");  }  return -1;}  }
class C{  private Object readResolve() throws ObjectStreamException {  try {    IgniteBiTuple<GridKernalContext,String> t=stash.get();    IgniteSemaphore sem=IgnitionEx.localIgnite().context().dataStructures().semaphore(t.get2(),0,false,false);    if (sem == null)     throw new IllegalStateException("Semaphore was not found on deserialization: " + t.get2());    return sem;  } catch (  IgniteCheckedException e) {    throw U.withCause(new InvalidObjectException(e.getMessage()),e);  } finally {    stash.remove();  }}  }
class C{  public Monitor(String name,String memberName,String clusterName){  super(ResourceType.MONITOR,name);  this.memberName=memberName;  this.clusterName=clusterName;}  }
class C{  public String toString(){  return this.op;}  }
class C{  @Override public synchronized void rollback() throws SQLException {  try {    debugCodeCall("rollback");    checkClosedForWrite();    try {      rollbackInternal();    }  finally {      afterWriting();    }  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void dragGestureRecognized(DragGestureEvent e){  if (log.isDebugEnabled()) {    log.debug("DragJLabel.dragGestureRecognized ");  }  if (okToDrag()) {    e.startDrag(DragSource.DefaultCopyDrop,this,this);  }}  }
class C{  protected void validateState(State current){  checkNotNull(current.taskInfo,"taskInfo cannot be null");  checkNotNull(current.taskInfo.stage,"stage cannot be null");  checkNotNull(current.image,"image not provided");  checkNotNull(current.sourceImageDataStore,"source datastore not provided");  checkNotNull(current.destinationDataStore,"destination datastore not provided");  checkState(current.documentExpirationTimeMicros > 0,"documentExpirationTimeMicros needs to be greater than 0");switch (current.taskInfo.stage) {case STARTED:    checkState(current.taskInfo.subStage != null,"subStage cannot be null");switch (current.taskInfo.subStage) {case RETRIEVE_HOST:    break;case COPY_IMAGE:  checkArgument(current.host != null,"host not found");break;default :checkState(false,"unsupported sub-state: " + current.taskInfo.subStage.toString());}break;case CREATED:case FAILED:case FINISHED:case CANCELLED:checkState(current.taskInfo.subStage == null,"Invalid stage update. subStage must be null");break;default :checkState(false,"cannot process patches in state: " + current.taskInfo.stage.toString());}}  }
class C{  private int resolveIntDescriptor(int getter,int setter){  return (getter >= setter ? getter : setter);}  }
class C{  public final LC minHeight(String height){  setHeight(LayoutUtil.derive(getHeight(),ConstraintParser.parseUnitValue(height,false),null,null));  return this;}  }
class C{  public IMethodBinding resolveBinding(){  return this.ast.getBindingResolver().resolveMember(this);}  }
class C{  public synchronized boolean isClosed(){  return journalWriter == null;}  }
class C{  public static int binaryToInt(final boolean[] src,final int srcPos,final int dstInit,final int dstPos,final int nBools){  if ((src.length == 0 && srcPos == 0) || 0 == nBools) {    return dstInit;  }  if (nBools - 1 + dstPos >= 32) {    throw new IllegalArgumentException("nBools-1+dstPos is greather or equal to than 32");  }  int out=dstInit;  int shift=0;  for (int i=0; i < nBools; i++) {    shift=i + dstPos;    final int bits=(src[i + srcPos] ? 1 : 0) << shift;    final int mask=0x1 << shift;    out=(out & ~mask) | bits;  }  return out;}  }
class C{  protected void validateCapabilityUniqueId(java.lang.String[] param){}  }
class C{  public void readInteger() throws IOException {  if (tag != ASN1Constants.TAG_INTEGER) {    throw expected("integer");  }  if (length < 1) {    throw new ASN1Exception("Wrong length for ASN.1 integer at [" + tagOffset + "]");  }  readContent();  if (length > 1) {    byte firstByte=buffer[offset - length];    byte secondByte=(byte)(buffer[offset - length + 1] & 0x80);    if (firstByte == 0 && secondByte == 0 || firstByte == (byte)0xFF && secondByte == (byte)0x80) {      throw new ASN1Exception("Wrong content for ASN.1 integer at [" + (offset - length) + "]. An integer MUST be encoded in minimum number of octets");    }  }}  }
class C{  static public PVector random2D(PVector target){  return random2D(target,null);}  }
class C{  private static String stripExtension(String filename){  return filename.replaceFirst("\\.[^.]+$","");}  }
class C{  public ComponentBuilder append(String text){  this.parts.addExtra(this.current);  this.current=new TextComponent(text);  return this;}  }
class C{  BigInteger add(long val){  if (val == 0)   return this;  if (signum == 0)   return valueOf(val);  if (Long.signum(val) == signum)   return new BigInteger(add(mag,Math.abs(val)),signum);  int cmp=compareMagnitude(val);  if (cmp == 0)   return ZERO;  int[] resultMag=(cmp > 0 ? subtract(mag,Math.abs(val)) : subtract(Math.abs(val),mag));  resultMag=trustedStripLeadingZeroInts(resultMag);  return new BigInteger(resultMag,cmp == signum ? 1 : -1);}  }
class C{  protected NumericalUnaryExpressionImpl(){  super();}  }
class C{  public CustomizedOsmNetworkReader(final Network network,final TransitSchedule schedule,final CoordinateTransformation transformation){  this(network,schedule,transformation,true);}  }
class C{  private static void updateAllAppWidgets(Context context,long trackId){  AppWidgetManager appWidgetManager=AppWidgetManager.getInstance(context);  int[] appWidgetIds=appWidgetManager.getAppWidgetIds(new ComponentName(context,TrackWidgetProvider.class));  for (  int appWidgetId : appWidgetIds) {    updateAppWidget(context,appWidgetManager,appWidgetId,trackId);  }}  }
class C{  public static <E>SynchronizedRichIterable<E> of(RichIterable<E> iterable){  return new SynchronizedRichIterable<>(iterable);}  }
class C{  public static void showNotification(Project project,MessageType type,String text){  StatusBar statusBar=WindowManager.getInstance().getStatusBar(project);  JBPopupFactory.getInstance().createHtmlTextBalloonBuilder(text,type,null).setFadeoutTime(7500).createBalloon().show(RelativePoint.getCenterOf(statusBar.getComponent()),Balloon.Position.atRight);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (LHS_1: ");  result.append(lhS_1);  result.append(')');  return result.toString();}  }
class C{  public Property year(){  return new Property(this,getChronology().year());}  }
class C{  void fullyUnlock(){  takeLock.unlock();  putLock.unlock();}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("EventDef event[");  buffer.append(event);  buffer.append("] actionType [");  buffer.append(actionType);  buffer.append("] macroId [");  buffer.append(macroId);  buffer.append("]");  return buffer.toString();}  }
class C{  public HilbertTransform(){  convertHalfBandToHilbert(Filters.HALF_BAND_FILTER_47T.getCoefficients());  mBufferSize=mHilbertFilter.length + 1;  mBuffer=new float[mBufferSize];  mCenterCoefficent=mHilbertFilter[mHilbertFilter.length / 2];  generateIndexMap(mHilbertFilter.length);}  }
class C{  protected void endUpdate(){  if (updateCounter.decrementAndGet() == 0) {    notifyModified();    source=null;  }}  }
class C{  private static IgfsEx start(String name,int endpointPort,IgfsMode dfltMode,@Nullable IgfsSecondaryFileSystem secondaryFs){  IgfsIpcEndpointConfiguration endpointCfg=new IgfsIpcEndpointConfiguration();  endpointCfg.setType(IgfsIpcEndpointType.TCP);  endpointCfg.setHost("127.0.0.1");  endpointCfg.setPort(endpointPort);  FileSystemConfiguration igfsCfg=new FileSystemConfiguration();  igfsCfg.setDataCacheName("dataCache");  igfsCfg.setMetaCacheName("metaCache");  igfsCfg.setName(name);  igfsCfg.setDefaultMode(dfltMode);  igfsCfg.setIpcEndpointConfiguration(endpointCfg);  igfsCfg.setSecondaryFileSystem(secondaryFs);  igfsCfg.setInitializeDefaultPathModes(true);  CacheConfiguration dataCacheCfg=defaultCacheConfiguration();  dataCacheCfg.setName("dataCache");  dataCacheCfg.setCacheMode(PARTITIONED);  dataCacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);  dataCacheCfg.setAffinityMapper(new IgfsGroupDataBlocksKeyMapper(2));  dataCacheCfg.setBackups(0);  dataCacheCfg.setAtomicityMode(TRANSACTIONAL);  dataCacheCfg.setOffHeapMaxMemory(0);  CacheConfiguration metaCacheCfg=defaultCacheConfiguration();  metaCacheCfg.setName("metaCache");  metaCacheCfg.setCacheMode(REPLICATED);  metaCacheCfg.setWriteSynchronizationMode(CacheWriteSynchronizationMode.FULL_SYNC);  metaCacheCfg.setAtomicityMode(TRANSACTIONAL);  IgniteConfiguration cfg=new IgniteConfiguration();  cfg.setGridName(name);  TcpDiscoverySpi discoSpi=new TcpDiscoverySpi();  discoSpi.setIpFinder(new TcpDiscoveryVmIpFinder(true));  cfg.setDiscoverySpi(discoSpi);  cfg.setCacheConfiguration(dataCacheCfg,metaCacheCfg);  cfg.setFileSystemConfiguration(igfsCfg);  cfg.setLocalHost("127.0.0.1");  cfg.setConnectorConfiguration(null);  return (IgfsEx)G.start(cfg).fileSystem(name);}  }
class C{  public static int frequencyToMIDINote(double aFrequency){  double r=1.05946309436;  double ref=523.251;  int supinf=0;  int i=0;  double hautnb=1;  double ref1=0;  double ref2=0;  double flag=0;  int nmidi=72;  while (aFrequency < ref) {    ref=Math.floor(1000 * ref / r) / 1000;    i=i + 1;    supinf=-1;    flag=1;    ref1=ref;  }  while (aFrequency > ref) {    ref=Math.floor(1000 * ref * r) / 1000;    i=i - 1;    supinf=1;    ref2=ref;  }  if (Math.abs(aFrequency - ref1) < Math.abs(aFrequency - ref2)) {    supinf=-1;    i=i + 1;  } else {    if (flag == 1)     supinf=-1;  }  if (ref1 == 0) {    ref1=Math.floor(1000 * ref / r) / 1000;    if (Math.abs(aFrequency - ref1) < Math.abs(aFrequency - ref2)) {      i=i + 1;      supinf=1;    }  }  i=Math.abs(i);  while (i-- != 0) {    if ((hautnb == 1 && supinf == -1) || (hautnb == 12 && supinf == 1)) {      if (supinf == 1)       hautnb=0;      if (supinf == -1)       hautnb=13;    }    hautnb=hautnb + supinf;    nmidi=nmidi + supinf;  }  return nmidi;}  }
class C{  public Element removeChildren(String name){  checkNotRemoved();  final List<Node> matched=new LinkedList<>();  final NodeList nodes=delegate.getChildNodes();  for (int i=0; i < nodes.getLength(); i++) {    if (name.equals(nodes.item(i).getNodeName())) {      matched.add(nodes.item(i));    }  }  for (  Node node : matched) {    asElement(node).remove();  }  return this;}  }
class C{  public static final List toIndicesSet(double x[],double t){  List<Integer> y_list=new ArrayList<Integer>();  for (int j=0; j < x.length; j++) {    if (x[j] > t) {      y_list.add(j);    }  }  return y_list;}  }
class C{  @Override protected void doBefore(){  filePrefs.add(new ApplicationPreference("filePref1"));  filePrefs.add(new ApplicationPreference("filePref2"));  persistedPrefs.add(new ApplicationPreference(PERSISTED_APP_PREF1));  persistedPrefs.add(new ApplicationPreference(PERSISTED_APP_PREF2));}  }
class C{  public DatagramPacket multicastReceive() throws IOException {  byte[] buf=new byte[1024];  DatagramPacket dp=new DatagramPacket(buf,buf.length);  multicastSocket.receive(dp);  return dp;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.TVARIABLE__AST_ELEMENT:    return astElement != null;case TypesPackage.TVARIABLE__ANNOTATIONS:  return annotations != null && !annotations.isEmpty();case TypesPackage.TVARIABLE__DECLARED_TYPE_ACCESS_MODIFIER:return declaredTypeAccessModifier != DECLARED_TYPE_ACCESS_MODIFIER_EDEFAULT;case TypesPackage.TVARIABLE__DECLARED_PROVIDED_BY_RUNTIME:return declaredProvidedByRuntime != DECLARED_PROVIDED_BY_RUNTIME_EDEFAULT;case TypesPackage.TVARIABLE__TYPE_REF:return typeRef != null;case TypesPackage.TVARIABLE__CONST:return const_ != CONST_EDEFAULT;case TypesPackage.TVARIABLE__EXTERNAL:return external != EXTERNAL_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  @RequestMapping(value="/test",method=RequestMethod.GET) public BasicCase list(@RequestParam("query") String query){  return null;}  }
class C{  public TreeMap(){}  }
class C{  @Override public void doubleClick(DoubleClickEvent event){  editGefaehrdung();}  }
class C{  public void testDoConfigureSetsDefaultDomainVersion() throws Exception {  configuration.doConfigure(container);  String config=configuration.getFileHandler().readTextFile(DOMAIN_HOME + "/config/config.xml","UTF-8");  XMLAssert.assertXpathExists("//weblogic:domain-version",config);  XMLAssert.assertXpathExists("//weblogic:configuration-version",config);  XMLAssert.assertXpathExists("//weblogic:server",config);  XMLAssert.assertXpathExists("//weblogic:server/weblogic:name",config);  XMLAssert.assertXpathExists("//weblogic:security-configuration",config);  XMLAssert.assertXpathExists("//weblogic:security-configuration/weblogic:credential-encrypted",config);  XMLAssert.assertXpathExists("//weblogic:embedded-ldap",config);  XMLAssert.assertXpathExists("//weblogic:embedded-ldap/weblogic:credential-encrypted",config);  XMLAssert.assertXpathExists("//weblogic:admin-server-name",config);}  }
class C{  public static Hours hoursBetween(ReadablePartial start,ReadablePartial end){  if (start instanceof LocalTime && end instanceof LocalTime) {    Chronology chrono=DateTimeUtils.getChronology(start.getChronology());    int hours=chrono.hours().getDifference(((LocalTime)end).getLocalMillis(),((LocalTime)start).getLocalMillis());    return Hours.hours(hours);  }  int amount=BaseSingleFieldPeriod.between(start,end,ZERO);  return Hours.hours(amount);}  }
class C{  public UTMRef(double easting,double northing,char latZone,int lngZone){  this.easting=easting;  this.northing=northing;  this.latZone=latZone;  this.lngZone=lngZone;}  }
class C{  public static void main(String[] argv){  runFilter(new StratifiedRemoveFolds(),argv);}  }
class C{  public final void write(BytesRef ref) throws IOException {  assert ref != null;  write(ref.bytes,ref.offset,ref.length);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  ZPseudoComp uiComp=getUIComp(stack);  if (uiComp != null) {    return new Integer(uiComp.getWidth());  }  return null;}  }
class C{  @After public void tearDown() throws Throwable {  if (this.vmState != null) {    try {      deleteDocument(this.host,this.vmState.documentSelfLink);    } catch (    Throwable deleteEx) {      host.log(Level.WARNING,"Exception deleting VM - %s",deleteEx.getMessage());    }  }  if (this.computeHost != null) {    try {      deleteDocument(this.host,this.computeHost.documentSelfLink);    } catch (    Throwable deleteEx) {      host.log(Level.WARNING,"Exception deleting VM - %s",deleteEx.getMessage());    }  }}  }
class C{  private void createEmptyInputHint(){  FormToolkit toolkit=managedForm.getToolkit();  emptyHintComposite=toolkit.createComposite(tabFolder,SWT.NONE);  emptyHintComposite.setLayout(new GridLayout(2,false));  Label infoLabel=toolkit.createLabel(emptyHintComposite,null);  infoLabel.setImage(Display.getDefault().getSystemImage(SWT.ICON_INFORMATION));  infoLabel.setLayoutData(new GridData(SWT.RIGHT,SWT.CENTER,true,false));  FormText formText=toolkit.createFormText(emptyHintComposite,false);  formText.setText("<form><p>Seems that there are no sensor assignments in this profile. Use <b>Add</b> action to start defining instrumentation points.</p></form>",true,false);  formText.setLayoutData(new GridData(SWT.LEFT,SWT.CENTER,true,false));  CTabItem tabItem=new CTabItem(tabFolder,SWT.NONE);  tabItem.setControl(emptyHintComposite);  tabItem.setText("Getting Started");  tabFolder.setSelection(0);}  }
class C{  protected String doIt() throws Exception {  MWFProcess process=new MWFProcess(getCtx(),p_AD_WF_Process_ID,get_TrxName());  log.info("doIt - " + process);  MUser user=MUser.get(getCtx(),getAD_User_ID());  if (p_IsAbort) {    String msg=user.getName() + ": Abort";    process.setTextMsg(msg);    process.setAD_User_ID(getAD_User_ID());    process.setWFState(StateEngine.STATE_Aborted);    return msg;  }  String msg=null;  if (p_AD_User_ID != 0 && process.getAD_User_ID() != p_AD_User_ID) {    MUser from=MUser.get(getCtx(),process.getAD_User_ID());    MUser to=MUser.get(getCtx(),p_AD_User_ID);    msg=user.getName() + ": " + from.getName()+ " -> "+ to.getName();    process.setTextMsg(msg);    process.setAD_User_ID(p_AD_User_ID);  }  if (p_AD_WF_Responsible_ID != 0 && process.getAD_WF_Responsible_ID() != p_AD_WF_Responsible_ID) {    MWFResponsible from=MWFResponsible.get(getCtx(),process.getAD_WF_Responsible_ID());    MWFResponsible to=MWFResponsible.get(getCtx(),p_AD_WF_Responsible_ID);    String msg1=user.getName() + ": " + from.getName()+ " -> "+ to.getName();    process.setTextMsg(msg1);    process.setAD_WF_Responsible_ID(p_AD_WF_Responsible_ID);    if (msg == null)     msg=msg1; else     msg+=" - " + msg1;  }  process.saveEx();  return "OK";}  }
class C{  public void relabelSample(final String originalName,final String newName){  final Integer index=getSampleIndex(originalName);  if (index != null) {    mSampleNames.set(index,newName);    mNameToColumn.remove(originalName);    mNameToColumn.put(newName,index);    for (int k=0; k < mSampleLines.size(); k++) {      final SampleField sample=mSampleLines.get(k);      if (sample.getId().equals(originalName)) {        mSampleLines.set(k,new SampleField(sample.toString().replaceFirst(originalName,newName)));        break;      }    }    for (    final PedigreeField pedigree : mPedigreeLines) {      pedigree.relabelSample(originalName,newName);    }  }}  }
class C{  public void removeShowListener(ActionListener l){  if (showListener == null) {    return;  }  showListener.removeListener(l);}  }
class C{  @Override public String isExportFormatSupported(String mimeType){  return Exportable.FORMAT_NOT_SUPPORTED;}  }
class C{  public void addOMGraphics(OMGraphicList list,DrawingAttributes drawingAttributes){}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  if (StringUtils.isBlank(nombre)) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(DescripcionConstants.DESCRIPCION_NOMBRE_DESCRIPTOR,request.getLocale())));  }  if (estado < 0) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(DescripcionConstants.DESCRIPCION_ESTADO_DESCRIPTOR,request.getLocale())));  }  if ((tipo == TipoDescriptor.ENTIDAD) && StringUtils.isBlank(idFichaDescr)) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(DescripcionConstants.DESCRIPCION_FICHAS_DESCR_DESCRIPTOR,request.getLocale())));  }  if (nivelAcceso < 0) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(DescripcionConstants.DESCRIPCION_NIVEL_ACCESO_DESCRIPTOR,request.getLocale())));  }  if ((nivelAcceso == NivelAcceso.RESTRINGIDO) && StringUtils.isBlank(idLCA)) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(DescripcionConstants.DESCRIPCION_LISTA_CONTROL_ACCESO_DESCRIPTOR,request.getLocale())));  }  return errors;}  }
class C{  public FileWriter(File file) throws IOException {  super(new FileOutputStream(file));}  }
class C{  public static void renderClip(final Area clip,final Rectangle dirtyRegion,final Shape defaultClip,final Graphics2D g2){  if (g2 != null) {    if (clip != null) {      g2.setClip(clip);      if (dirtyRegion != null) {        g2.clip(dirtyRegion);      }    } else {      g2.setClip(defaultClip);    }  }}  }
class C{  private IBattle selectBombardingBattle(final Unit u,final Territory uTerritory,final Collection<IBattle> battles){  final boolean bombardRestricted=isShoreBombardPerGroundUnitRestricted(getData());  if ((battles.size() == 1)) {    return battles.iterator().next();  }  final List<Territory> territories=new ArrayList<>();  final Map<Territory,IBattle> battleTerritories=new HashMap<>();  final Iterator<IBattle> battlesIter=battles.iterator();  while (battlesIter.hasNext()) {    final IBattle battle=battlesIter.next();    if (bombardRestricted) {      if (battle.getBombardingUnits().size() < battle.getAmphibiousLandAttackers().size()) {        territories.add(battle.getTerritory());      }    } else {      territories.add(battle.getTerritory());    }    battleTerritories.put(battle.getTerritory(),battle);  }  final ITripleAPlayer remotePlayer=getRemotePlayer();  Territory bombardingTerritory=null;  if (!territories.isEmpty()) {    bombardingTerritory=remotePlayer.selectBombardingTerritory(u,uTerritory,territories,true);  }  if (bombardingTerritory != null) {    return battleTerritories.get(bombardingTerritory);  }  return null;}  }
class C{  public static char[] encodeHex(byte[] data){  int l=data.length;  char[] out=new char[l << 1];  for (int i=0, j=0; i < l; i++) {    out[j++]=DIGITS[(0xF0 & data[i]) >>> 4];    out[j++]=DIGITS[0x0F & data[i]];  }  return out;}  }
class C{  protected void initBinder(HttpServletRequest request,ServletRequestDataBinder binder){  binder.registerCustomEditor(Integer.class,null,new CustomNumberEditor(Integer.class,null,true));  binder.registerCustomEditor(Long.class,null,new CustomNumberEditor(Long.class,null,true));  binder.registerCustomEditor(byte[].class,new ByteArrayMultipartFileEditor());  SimpleDateFormat dateFormat=new SimpleDateFormat(MessagesService.getInstance().getMessage("date.format"));  dateFormat.setLenient(false);  binder.registerCustomEditor(Date.class,null,new CustomDateEditor(dateFormat,true));}  }
class C{  public static ApplicationExceptionBean parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  ApplicationExceptionBean object=new ApplicationExceptionBean();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"applicationExceptionBean".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (ApplicationExceptionBean)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list4=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","causeStackTrace").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setCauseStackTrace(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","id").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","messageKey").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setMessageKey(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","messageParams").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list4.add(null);        reader.next();      } else {        list4.add(reader.getElementText());      }      boolean loopDone4=false;      while (!loopDone4) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement())         reader.next();        if (reader.isEndElement()) {          loopDone4=true;        } else {          if (new javax.xml.namespace.QName("http://oscm.org","messageParams").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list4.add(null);              reader.next();            } else {              list4.add(reader.getElementText());            }          } else {            loopDone4=true;          }        }      }      object.setMessageParams((java.lang.String[])list4.toArray(new java.lang.String[list4.size()]));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public boolean equals(java.lang.Object obj){  return false;}  }
class C{  public static void showConsole(SWTWorkbenchBot bot){  bot.menu("Window").menu("Show View").menu("Console");}  }
class C{  public void registerClientInterest(String regionName,Object keyOfInterest,ClientProxyMembershipID membershipID,int interestType,boolean isDurable,boolean sendUpdatesAsInvalidates,boolean manageEmptyRegions,int regionDataPolicy,boolean flushState) throws IOException, RegionDestroyedException {  CacheClientProxy proxy=getClientProxy(membershipID,true);  if (logger.isDebugEnabled()) {    logger.debug("CacheClientNotifier: Client {} registering interest in: {} -> {} (an instance of {})",proxy,regionName,keyOfInterest,keyOfInterest.getClass().getName());  }  if (proxy == null) {    throw new IOException(LocalizedStrings.CacheClientNotifier_CACHECLIENTPROXY_FOR_THIS_CLIENT_IS_NO_LONGER_ON_THE_SERVER_SO_REGISTERINTEREST_OPERATION_IS_UNSUCCESSFUL.toLocalizedString());  }  boolean done=false;  try {    proxy.registerClientInterest(regionName,keyOfInterest,interestType,isDurable,sendUpdatesAsInvalidates,flushState);    if (manageEmptyRegions) {      updateMapOfEmptyRegions(proxy.getRegionsWithEmptyDataPolicy(),regionName,regionDataPolicy);    }    done=true;  }  finally {    if (!done) {      proxy.unregisterClientInterest(regionName,keyOfInterest,interestType,false);    }  }}  }
class C{  public MultiPlayer(PlayerCallback playerCallback,int audioBufferCapacityMs,int decodeBufferCapacityMs){  super(playerCallback,audioBufferCapacityMs,decodeBufferCapacityMs);}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  MobileSessionCtx wsc=MobileSessionCtx.get(request);  WWindowStatus ws=WWindowStatus.get(request);  if (wsc == null || ws == null)   ;  String role=request.getParameter("AD_Role_ID");  int roleId;  try {    roleId=Integer.parseInt(role);  } catch (  Exception e) {    roleId=-1;  }  String client=request.getParameter("AD_Client_ID");  int clientId;  try {    clientId=Integer.parseInt(client);  } catch (  Exception e) {    clientId=-1;  }  Login login=new Login(wsc.ctx);  StringBuffer script=new StringBuffer("{");  boolean hasClients=false;  if (roleId >= 0) {    KeyNamePair[] clients=login.getClients(new KeyNamePair(roleId,role));    script.append("\"clients\":[");    for (int i=0; i < clients.length; i++) {      if (i > 0)       script.append(",");      KeyNamePair p=clients[i];      script.append("{\"text\":\"");      script.append(p.getName());      script.append("\",\"value\":\"");      script.append(p.getKey());      script.append("\"}");    }    script.append("]");    if (clientId < 0 && clients.length > 0) {      clientId=clients[0].getKey();    }  }  if (clientId >= 0) {    script.append(",\"orgs\":[");    KeyNamePair[] orgs=login.getOrgs(new KeyNamePair(clientId,client));    for (int i=0; i < orgs.length; i++) {      if (i > 0)       script.append(",");      KeyNamePair p=orgs[i];      script.append("{\"text\":\"");      script.append(p.getName());      script.append("\",\"value\":\"");      script.append(p.getKey());      script.append("\"}");    }    script.append("]");  }  script.append("}");  PrintWriter out=response.getWriter();  out.print(script);  out.flush();  if (out.checkError())   log.log(Level.SEVERE,"error writing");  out.close();}  }
class C{  public void clean_downloads(Context ctx){  if (get_download_id() == 0) {    return;  }  DownloadManager dm=(DownloadManager)ctx.getSystemService(Context.DOWNLOAD_SERVICE);  dm.remove(get_download_id());  set_download_id(0);  save();  Log.v(MainActivity.TAG,get_display_name() + "'s APK cleaned.");}  }
class C{  public RedirectException(String message,Throwable cause){  super(message,cause);}  }
class C{  public int compareTo(java.util.Date o){  if (o instanceof Timestamp) {    return compareTo((Timestamp)o);  } else {    Timestamp ts=new Timestamp(o.getTime());    return this.compareTo(ts);  }}  }
class C{  public NRShape makeShape(Date from,Date to){  UnitNRShape fromShape=tree.toUnitShape(from);  UnitNRShape toShape=tree.toUnitShape(to);  return tree.toRangeShape(fromShape,toShape);}  }
class C{  protected static void saveTextNodes(final SQLProvider provider,final List<INaviViewNode> nodes,final int firstNode,final List<Integer> textNodeIndices) throws SQLException {  Preconditions.checkNotNull(provider,"IE02527: provider argument can not be null");  Preconditions.checkNotNull(nodes,"IE02528: nodes argument can not be null");  Preconditions.checkNotNull(textNodeIndices,"IE02529: textNodeIndices argument can not be null");  if (!textNodeIndices.isEmpty()) {    final String query="INSERT INTO " + CTableNames.TEXT_NODES_TABLE + "(node_id, comment_id) VALUES (?, ?)";    final PreparedStatement preparedStatement=provider.getConnection().getConnection().prepareStatement(query);    final List<INaviTextNode> textNodesWithUnsavedComments=new ArrayList<INaviTextNode>();    try {      for (      final Integer index : textNodeIndices) {        final INaviTextNode node=(INaviTextNode)nodes.get(index);        final List<IComment> comment=node.getComments();        final Integer commentId=comment == null ? null : comment.size() == 0 ? null : Iterables.getLast(comment).getId();        if ((comment != null) && (comment.size() != 0) && (commentId == null)) {          textNodesWithUnsavedComments.add(node);        }        preparedStatement.setInt(1,firstNode + index);        if (commentId == null) {          preparedStatement.setNull(2,Types.INTEGER);        } else {          preparedStatement.setInt(2,commentId);        }        preparedStatement.addBatch();      }      preparedStatement.executeBatch();    }  finally {      preparedStatement.close();    }    for (    final INaviTextNode textNode : textNodesWithUnsavedComments) {      final ArrayList<IComment> textNodeComments=new ArrayList<IComment>();      for (      final IComment comment : textNode.getComments()) {        try {          final Integer commentId=provider.appendTextNodeComment(textNode,comment.getComment(),comment.getUser().getUserId());          final IComment newComment=new CComment(commentId,comment.getUser(),comment.getParent(),comment.getComment());          textNodeComments.add(newComment);        } catch (        final CouldntSaveDataException exception) {          CUtilityFunctions.logException(exception);        }      }      textNode.initializeComment(textNodeComments);    }  }}  }
class C{  public ASN1InputStream(InputStream input,int limit){  this(input,limit,false);}  }
class C{  public boolean hasConfidenceInterval(){  return getConfidenceInterval() != null;}  }
class C{  protected void init(MuxServer server,int channel) throws IOException {  this.server=server;  this.channel=channel;  this.os=null;}  }
class C{  public static PlaceholderFragment newInstance(int sectionNumber){  PlaceholderFragment fragment=new PlaceholderFragment();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  private void doRevert(){  tagListener.revertTags();  update();}  }
class C{  public void deleteBatchHostStorageDomains(String systemId,List<HostStorageDomain> hsdList,String model) throws Exception {  InputStream responseStream=null;  try {    List<HostStorageDomain> unDeletedHSDs=new ArrayList<>();    unDeletedHSDs.addAll(hsdList);    boolean operationSucceeds=false;    int retryCount=0;    StringBuilder errorDescriptionBuilder=new StringBuilder();    while (!operationSucceeds && retryCount < MAX_RETRIES) {      retryCount++;      String deleteHSDsQuery=constructDeleteHSDsQuery(systemId,unDeletedHSDs,model);      log.info("Batch Query to delete HSD's: {}",deleteHSDsQuery);      URI endpointURI=hdsApiClient.getBaseURI();      ClientResponse response=hdsApiClient.post(endpointURI,deleteHSDsQuery);      if (HttpStatus.SC_OK == response.getStatus()) {        responseStream=response.getEntityInputStream();        JavaResult javaResult=SmooksUtil.getParsedXMLJavaResult(responseStream,HDSConstants.SMOOKS_CONFIG_FILE);        try {          verifyErrorPayload(javaResult);          operationSucceeds=true;        } catch (        HDSException hdsException) {          Error error=javaResult.getBean(Error.class);          if (error != null && (error.getDescription().contains("2010") || error.getDescription().contains("5132") || error.getDescription().contains("7473"))) {            log.error("Error response recieved from HiCommandManger: {}",error.getDescription());            log.info("Exception from HICommand Manager recieved during delete operation, retrying operation {} time",retryCount);            errorDescriptionBuilder.append("error ").append(retryCount).append(" : ").append(error.getDescription()).append("-#####-");            Thread.sleep(60000);            unDeletedHSDs.clear();            unDeletedHSDs.addAll(hsdList.stream().filter(null).collect(Collectors.toList()));            if (unDeletedHSDs.isEmpty()) {              operationSucceeds=true;              log.info("Deleted {} LUN paths from system:{}",hsdList.size(),systemId);            } else {              continue;            }          } else {            throw HDSException.exceptions.invalidResponseFromHDS(String.format("Not able to delete HostStorageDomains due to invalid response %1$s from server",response.getStatus()));          }        }      } else {        throw HDSException.exceptions.invalidResponseFromHDS(String.format("Not able to delete HostStorageDomains due to invalid response %1$s from server",response.getStatus()));      }    }    if (!operationSucceeds) {      throw HDSException.exceptions.invalidResponseFromHDS(String.format("Not able to delete HostStorageDomains due to repeated errors from HiCommand server, errors description are as %s",errorDescriptionBuilder.toString()));    }  }  finally {    if (null != responseStream) {      try {        responseStream.close();      } catch (      IOException e) {        log.warn("IOException occurred while closing the response stream");      }    }  }  log.info("Batch Query to delete HSD's completed.");}  }
class C{  private AnalysisSmartCacheMatch checkMatchMany(Set<Axis> restrict,AnalysisSmartCacheRequest request,HashSet<String> sameFiltersCandidatesKeys){  ImmutableMap<String,AnalysisSmartCacheSignature> sameFiltersCandidates=cache.getAllPresent(sameFiltersCandidatesKeys);  for (  AnalysisSmartCacheSignature candidate : sameFiltersCandidates.values()) {    if (request.getMeasures().getKPIs().size() <= candidate.getMeasures().getKPIs().size()) {      AnalysisSmartCacheMatch match=checkMatchSingle(restrict,request,candidate);      if (match != null) {        Set<Measure> o1=new HashSet<>(request.getMeasures().getKPIs());        Set<Measure> o2=new HashSet<>(candidate.getMeasures().getKPIs());        if (o2.containsAll(o1)) {          if (!o2.equals(o1)) {            if (o2.removeAll(o1) && !o2.isEmpty()) {              match.addPostProcessing(new DataMatrixTransformHideColumns<Measure>(o2));            }          }          if (request.getAnalysis().hasOrderBy()) {            if (!request.getAnalysis().getOrders().equals(match.getAnalysis().getOrders())) {              match.addPostProcessing(new DataMatrixTransformOrderBy(request.getAnalysis().getOrders()));            }          }          if (request.getAnalysis().hasLimit()) {            long ending=request.getAnalysis().getLimit();            if (request.getAnalysis().hasOffset()) {              ending+=request.getAnalysis().getOffset();            }            if (ending < match.getSignature().getRowCount()) {              match.addPostProcessing(new DataMatrixTransformTruncate(request.getAnalysis().getLimit(),request.getAnalysis().getOffset()));            }          }          return match;        }      }    }  }  return null;}  }
class C{  private void subscribe(Throwable exception){  Connection c=Connections.getInstance(context).getConnection(clientHandle);  String action=context.getString(R.string.toast_sub_failed,(Object[])additionalArgs);  c.addAction(action);  Notify.toast(context,action,Toast.LENGTH_SHORT);}  }
class C{  private void logAchievementStats(){  int totalAchievements=0;  int categoriesInUse=0;  for (  String category : NORMAL_ACHIEVEMENTS) {    if (disabledCategorySet.contains(category))     continue;    ConfigurationSection categoryConfig=config.getConfigurationSection(category);    int keyCount=categoryConfig.getKeys(false).size();    if (keyCount > 0) {      categoriesInUse+=1;      totalAchievements+=keyCount;    }  }  for (  String category : MULTIPLE_ACHIEVEMENTS) {    if (disabledCategorySet.contains(category))     continue;    ConfigurationSection categoryConfig=config.getConfigurationSection(category);    Set<String> categorySections=categoryConfig.getKeys(false);    if (categorySections.isEmpty())     continue;    categoriesInUse+=1;    for (    String section : categorySections) {      ConfigurationSection subcategoryConfig=config.getConfigurationSection(category + '.' + section);      int achievementCount=subcategoryConfig.getKeys(false).size();      if (achievementCount > 0) {        totalAchievements+=achievementCount;      }    }  }  this.getLogger().info("Loaded " + totalAchievements + " achievements in "+ categoriesInUse+ " categories.");  if (!disabledCategorySet.isEmpty()) {    StringBuilder disabledCategories=new StringBuilder();    if (disabledCategorySet.size() == 1)     disabledCategories.append(disabledCategorySet.size() + " disabled category: "); else     disabledCategories.append(disabledCategorySet.size() + " disabled categories: ");    for (    String category : disabledCategorySet) {      disabledCategories.append(category + ", ");    }    disabledCategories.deleteCharAt(disabledCategories.length() - 1);    disabledCategories.deleteCharAt(disabledCategories.length() - 1);    this.getLogger().info(disabledCategories.toString());  }}  }
class C{  public void loadCatalogTrees(Element catalogTrees){  List<Element> catList=catalogTrees.getChildren("catalogTree");  if (log.isDebugEnabled()) {    log.debug("loadCatalogTrees: found " + catList.size() + " CatalogTree objects");  }  CatalogTreeManager mgr=InstanceManager.getDefault(jmri.CatalogTreeManager.class);  for (int i=0; i < catList.size(); i++) {    Element elem=catList.get(i);    Attribute attr=elem.getAttribute("systemName");    if (attr == null) {      log.warn("unexpected null systemName. elem= " + elem + ", attrs= "+ elem.getAttributes());      continue;    }    String sysName=attr.getValue();    String userName=null;    attr=elem.getAttribute("userName");    if (attr == null) {      log.warn("unexpected null userName. attrs= " + elem.getAttributes());      continue;    } else {      userName=attr.getValue();    }    DefaultTreeModel ct=(DefaultTreeModel)mgr.getBySystemName(sysName);    if (ct != null) {      continue;    }    ct=(DefaultTreeModel)mgr.newCatalogTree(sysName,userName);    if (log.isDebugEnabled()) {      log.debug("CatalogTree: sysName= " + sysName + ", userName= "+ userName);    }    CatalogTreeNode root=(CatalogTreeNode)ct.getRoot();    elem=elem.getChild("node");    loadNode(elem,root,ct);  }}  }
class C{  public void generate(RealisticBiomeBase biome,World world,Random rand,int chunkX,int chunkY,OpenSimplexNoise simplex,CellNoise cell,float strength,float river,boolean hasPlacedVillageBlocks){}  }
class C{  @Override public boolean isRunning(){  return !paused;}  }
class C{  void complete(){  if (syntheticParams != null) {    return;  }  boolean inInterface=translatedSym.owner.isInterface();  boolean thisReferenced=!getSymbolMap(CAPTURED_THIS).isEmpty();  translatedSym.flags_field=SYNTHETIC | LAMBDA_METHOD | owner.flags_field & STRICTFP | owner.owner.flags_field & STRICTFP | PRIVATE | (thisReferenced ? (inInterface ? DEFAULT : 0) : STATIC);  ListBuffer<JCVariableDecl> params=new ListBuffer<>();  ListBuffer<VarSymbol> parameterSymbols=new ListBuffer<>();  for (  Symbol thisSym : getSymbolMap(CAPTURED_VAR).values()) {    params.append(make.VarDef((VarSymbol)thisSym,null));    parameterSymbols.append((VarSymbol)thisSym);  }  for (  Symbol thisSym : getSymbolMap(PARAM).values()) {    params.append(make.VarDef((VarSymbol)thisSym,null));    parameterSymbols.append((VarSymbol)thisSym);  }  syntheticParams=params.toList();  translatedSym.params=parameterSymbols.toList();  translatedSym.name=isSerializable() ? serializedLambdaName() : lambdaName();  translatedSym.type=types.createMethodTypeWithParameters(generatedLambdaSig(),TreeInfo.types(syntheticParams));}  }
class C{  protected Cons<VBoxBody<?>> doCommit(){  Cons<VBoxBody<?>> newBodies=Cons.EMPTY;  for (  Map.Entry<VBox<?>,Object> entry : boxesWritten.entrySet()) {    VBox<Object> vbox=(VBox<Object>)entry.getKey();    Object newValue=entry.getValue();    VBoxBody<?> newBody=vbox.commit(this,(newValue == NULL_VALUE) ? null : newValue,number);    newBodies=newBodies.cons(newBody);  }  return newBodies;}  }
class C{  protected Object send() throws PropagationException {  try {    Participant part=getParticipant();    part.forget();  } catch (  Exception e) {  }  return getParticipant();}  }
class C{  private void ensureNotClosed() throws SQLException {  if (closed)   throw new SQLException("Result set is closed.");}  }
class C{  public void cancelRowUpdates() throws SQLException {  crsInternal.cancelRowUpdates();}  }
class C{  protected void parseDocument(int offset,int length) throws BadLocationException {  styledDocument.getText(0,styledDocument.getLength(),segment);  buffer=CharBuffer.wrap(segment.array).asReadOnlyBuffer();  if (!lexer.isInitialized()) {    lexer.initialize();    offset=0;    length=styledDocument.getLength();  } else {    int end=offset + length;    offset=calcBeginParse(offset);    length=calcEndParse(end) - offset;    SortedSet set=mlTextRunSet.subSet(Integer.valueOf(offset),Integer.valueOf(offset + length));    if (set != null) {      set.clear();    }  }  lexer.parse(buffer,offset,length);}  }
class C{  public StepExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public synchronized void deleteObservers(){  obs.removeAllElements();}  }
class C{  public static <T>LazySortedSetX<T> iterate(long limit,final T seed,final UnaryOperator<T> f){  return fromStreamS(ReactiveSeq.iterate(seed,f).limit(limit));}  }
class C{  public Boolean isBootRetryEnabled(){  return bootRetryEnabled;}  }
class C{  public long peek(){  return items[size - 1];}  }
class C{  public static String fmtNz(double v){  return v == Double.MAX_VALUE || v == 0 ? null : FMT2.format(v);}  }
class C{  public static CompositeRule ARITHMETIC(float k1,float k2,float k3,float k4){  return new CompositeRule(k1,k2,k3,k4);}  }
class C{  public ParseGeoPoint(){}  }
class C{  public TxRequest16(XBeeAddress16 remoteAddr16,int frameId,Option option,int[] payload){  this.remoteAddr16=remoteAddr16;  this.setFrameId(frameId);  this.setOption(option);  this.setPayload(payload);}  }
class C{  public ImportFailedException(final Exception exception){  super(exception);}  }
class C{  public Vector(int capacity,int capacityIncrement){  if (capacity < 0) {    throw new IllegalArgumentException();  }  elementData=newElementArray(capacity);  elementCount=0;  this.capacityIncrement=capacityIncrement;}  }
class C{  protected <T extends DataObject>void checkDuplicateLabel(Class<T> type,String value){  List<T> objectList=CustomQueryUtility.queryActiveResourcesByConstraint(_dbClient,type,PrefixConstraint.Factory.getFullMatchConstraint(type,DATAOBJECT_NAME_FIELD,value));  if (!objectList.isEmpty()) {    throw APIException.badRequests.duplicateLabel(value);  }}  }
class C{  protected void doReadAndUpload(int size){  try {synchronized (mSerialLock) {      if (mSerial.isOpened() && !isDestroying) {        log.debug("doREadAndUpload");        ArrayList<byte[]> bufferedMessages=medtronicReader.readFromReceiver(getApplicationContext(),size);        log.debug("Stream Received--> READED");        if (bufferedMessages != null && bufferedMessages.size() > 0) {          log.debug("Stream Received--> There are " + bufferedMessages.size() + " to process ");synchronized (buffMessagesLock) {            processBufferedMessages.bufferedMessages.addAll(bufferedMessages);          }          if (!isDestroying) {            log.debug("Stream Received--> order process bufferedMessages ");            mHandlerProcessRead.post(processBufferedMessages);          }        } else {          log.debug("NULL doReadAndUpload");        }      }    }  } catch (  Exception e) {    StringBuffer sb1=new StringBuffer("");    sb1.append("EXCEPTION!!!!!! " + e.getMessage() + " "+ e.getCause());    for (    StackTraceElement st : e.getStackTrace()) {      sb1.append(st.toString());    }    sendMessageToUI(sb1.toString(),false);  }}  }
class C{  protected boolean verifyFormat(){  boolean ok=true;  if (!format.isDefined("location")) {    System.err.println("Format template 'location' not found in " + formatName);    ok=false;  }  if (!format.isDefined("message")) {    System.err.println("Format template 'message' not found in " + formatName);    ok=false;  }  if (!format.isDefined("report")) {    System.err.println("Format template 'report' not found in " + formatName);    ok=false;  }  return ok;}  }
class C{  public void write(byte[] bytes,int off,int len) throws IOException {  assert bytes != null;  assert off >= 0 && off + len <= bytes.length;  assert len >= 0;  if (len > Short.MAX_VALUE) {    throw new IllegalArgumentException("len must be <= " + Short.MAX_VALUE + "; got "+ len);  }  out.writeShort((short)len);  out.writeBytes(bytes,off,len);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void fill(double[] array,double value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  private void resetTHL(TungstenProperties serviceProps,Map<String,String> progress){  String logDirName=serviceProps.getString("replicator.store.thl.log_dir");  File logDir=new File(logDirName);  if (!removeDirectory(logDir,progress)) {    logger.error(String.format("Could not remove the log directory %s",logDirName));  }}  }
class C{  private void populateSpreadsheetList(){  if (retrieveSpreadsheetList()) {    fillSpreadsheetListBox();  }}  }
class C{  public void write(OutputNode node,Object source) throws Exception {  Class type=source.getClass();  Schema schema=context.getSchema(type);  Caller caller=schema.getCaller();  try {    if (schema.isPrimitive()) {      primitive.write(node,source);    } else {      caller.persist(source);      write(node,source,schema);    }  }  finally {    caller.complete(source);  }}  }
class C{  public void addContact(final String address,final String nickname) throws ImException {  if (null == address) {    throw new NullPointerException();  }  if (mManager.getState() == ContactListManager.BLOCKED_LIST_LOADED) {    if (mManager.isBlocked(address)) {      throw new ImException(ImErrorInfo.CANT_ADD_BLOCKED_CONTACT,"Contact has been blocked");    }  }  Contact contact=getContact(address);  if (contact == null) {    contact=new Contact(new XmppAddress(address),nickname);  } else   if (nickname != null)   contact.setName(nickname);  try {    mManager.addContactToListAsync(contact,ContactList.this,true);  } catch (  ImException e) {    e.printStackTrace();  }}  }
class C{  protected void flagToRemoveFromMaintenanceQueue(NodePortTuple npt){  if (toRemoveFromMaintenanceQueue.contains(npt) == false) {    toRemoveFromMaintenanceQueue.add(npt);  }}  }
class C{  public void testGetF1(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF1();  assertEquals(expResult,result);}  }
class C{  private void dispatchMediaKeyEventForCalls(KeyEvent keyEvent,boolean needWakeLock){  Intent keyIntent=new Intent(Intent.ACTION_MEDIA_BUTTON,null);  keyIntent.putExtra(Intent.EXTRA_KEY_EVENT,keyEvent);  keyIntent.setPackage(mMediaReceiverForCalls.getPackageName());  if (needWakeLock) {    mMediaEventWakeLock.acquire();    keyIntent.putExtra(EXTRA_WAKELOCK_ACQUIRED,WAKELOCK_RELEASE_ON_FINISHED);  }  final long ident=Binder.clearCallingIdentity();  try {    mContext.sendOrderedBroadcastAsUser(keyIntent,UserHandle.ALL,null,mKeyEventDone,mAudioHandler,Activity.RESULT_OK,null,null);  }  finally {    Binder.restoreCallingIdentity(ident);  }}  }
class C{  public int elementsCount(){  return elements.size();}  }
class C{  public HttpServer(final int port){  this.mPort=port;}  }
class C{  public boolean inflictStatus(final Status status,final Entity attacker){  if (isImmune(status.getStatusType())) {    return false;  }  status.getStatusType().getStatusHandler().inflict(status,this,attacker);  return true;}  }
class C{  public JsonObject prepare(){  if (channel != null) {    slackMessage.addProperty("channel",channel);  }  if (username != null) {    slackMessage.addProperty("username",username);  }  if (icon != null) {    if (icon.contains("http")) {      slackMessage.addProperty("icon_url",icon);    } else {      slackMessage.addProperty("icon_emoji",icon);    }  }  slackMessage.addProperty("unfurl_media",unfurlMedia);  slackMessage.addProperty("unfurl_links",unfurlLinks);  if (text == null) {    throw new IllegalArgumentException("Missing Text field @ SlackMessage");  } else {    slackMessage.addProperty("text",text);  }  if (attach != null && attach.size() > 0) {    slackMessage.add("attachments",this.prepareAttach());  }  return slackMessage;}  }
class C{  public void validate(Class type) throws Exception {  Order order=scanner.getOrder();  validateUnions(type);  validateElements(type,order);  validateAttributes(type,order);  validateModel(type);  validateText(type);  validateTextList(type);}  }
class C{  public final Object elementAt(final int id){  if (id >= max_size) {    return null;  } else {    return items[id];  }}  }
class C{  public static ComponentUI createUI(JComponent h){  return new SeaGlassTableHeaderUI();}  }
class C{  public ModifyDefSpell(String name,Nature nature,int amount,int atk,int cooldown,int def,double lifesteal,int mana,int minimumlevel,int range,int rate,int regen,double modifier){  super(name,nature,amount,atk,cooldown,def,lifesteal,mana,minimumlevel,range,rate,regen,modifier);}  }
class C{  public List<Certificate> localCertificates(){  return localCertificates;}  }
class C{  protected Node newNode(){  return new SVGOMFlowRegionExcludeElement();}  }
class C{  public void clearUndo(){  ((ArffTableModel)getModel()).clearUndo();}  }
class C{  @Override public final N peek(){  int spin=0;  for (; ; ) {    final long readLock=seqLock.readLock();    final int stackTop=this.stackTop.get();    final N n=stack.get(stackTop - 1);    if (seqLock.readLockHeld(readLock)) {      if (stackTop > 0) {        return stack.get(stackTop - 1);      } else {        return null;      }    }    spin=Condition.progressiveYield(spin);  }}  }
class C{  public DrawerBuilder addStickyDrawerItems(@NonNull IDrawerItem... stickyDrawerItems){  if (this.mStickyDrawerItems == null) {    this.mStickyDrawerItems=new ArrayList<>();  }  Collections.addAll(this.mStickyDrawerItems,IdDistributor.checkIds(stickyDrawerItems));  return this;}  }
class C{  public AttrValueDTO createEntityAttributeValue(final AttrValueDTO attrValueDTO){  final Attribute atr=attributeService.findById(attrValueDTO.getAttributeDTO().getAttributeId());  final boolean multivalue=atr.isAllowduplicate();  final Category category=service.findById(((AttrValueCategoryDTO)attrValueDTO).getCategoryId());  if (!multivalue) {    for (    final AttrValueCategory avp : category.getAttributes()) {      if (avp.getAttribute().getCode().equals(atr.getCode())) {        attrValueDTO.setAttrvalueId(avp.getAttrvalueId());        return updateEntityAttributeValue(attrValueDTO);      }    }  }  AttrValueCategory valueEntityCategory=getPersistenceEntityFactory().getByIface(AttrValueCategory.class);  attrValueAssembler.assembleEntity(attrValueDTO,valueEntityCategory,getAdaptersRepository(),dtoFactory);  valueEntityCategory.setAttribute(atr);  valueEntityCategory.setCategory(category);  valueEntityCategory=attrValueEntityCategoryDao.create((AttrValueEntityCategory)valueEntityCategory);  attrValueDTO.setAttrvalueId(valueEntityCategory.getAttrvalueId());  return attrValueDTO;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  HighLowItemLabelGenerator clone=(HighLowItemLabelGenerator)super.clone();  if (this.dateFormatter != null) {    clone.dateFormatter=(DateFormat)this.dateFormatter.clone();  }  if (this.numberFormatter != null) {    clone.numberFormatter=(NumberFormat)this.numberFormatter.clone();  }  return clone;}  }
class C{  public float angleBetween(Vector3f otherVector){  float dotProduct=dot(otherVector);  float angle=FastMath.acos(dotProduct);  return angle;}  }
class C{  public boolean isFilterSpecified(){  return incFilterGroups != null || excFilterGroups != null;}  }
class C{  public String toString(StatAlertDefinition defn){  StringBuffer buf=new StringBuffer();  buf.append("For Member ID: ");  buf.append(this.memberId);  buf.append("\n");  buf.append("[ ");  for (int i=0; i < getValues().length; i++) {    buf.append(defn.getStatisticInfo()[i].toString() + "=" + getValues()[i]+ "\n");  }  buf.append("]");  return getTime().toString() + ":" + buf.toString();}  }
class C{  private void validateSizeInformation(Zip64Mode effectiveMode) throws ZipException {  if (entry.entry.getMethod() == STORED && raf == null) {    if (entry.entry.getSize() == ArchiveEntry.SIZE_UNKNOWN) {      throw new ZipException("uncompressed size is required for" + " STORED method when not writing to a" + " file");    }    if (entry.entry.getCrc() == -1) {      throw new ZipException("crc checksum is required for STORED" + " method when not writing to a file");    }    entry.entry.setCompressedSize(entry.entry.getSize());  }  if ((entry.entry.getSize() >= ZIP64_MAGIC || entry.entry.getCompressedSize() >= ZIP64_MAGIC) && effectiveMode == Zip64Mode.Never) {    throw new Zip64RequiredException(Zip64RequiredException.getEntryTooBigMessage(entry.entry));  }}  }
class C{  private boolean selectItemByName(CCombo combo,String name,String[] cString){  for (int i=0; i < cString.length; i++) {    String propName=cString[i];    if (name.equalsIgnoreCase(propName)) {      combo.select(i);      return true;    }  }  return false;}  }
class C{  private void fillDraw(Graphics g,int x,int y,int w,int h){  g.setColor(Color.LIGHT_GRAY);  g.fillRect(x,y,w,h);  g.setColor(Color.BLACK);  g.drawRect(x,y,w,h);}  }
class C{  public static void clearOldFiles(Path path,int expireTime){  File[] files=path.toAbsolutePath().toFile().listFiles();  if (files != null) {    int deleted=0;    int toDelete=0;    for (    File file : files) {      if (!file.getName().startsWith(GLOBAL_PREFIX)) {        continue;      }      long lastModified=file.lastModified();      long ago=(System.currentTimeMillis() - lastModified) / 1000;      if (ago > expireTime) {        toDelete++;        if (file.delete()) {          deleted++;        }      }    }    if (toDelete > 0) {      LOGGER.info("ImageCache: Deleted " + deleted + "/"+ toDelete+ " old files");    }  }}  }
class C{  private int supersRemoved(Symbol member,DeclaredType inType){  Element inElement=inType.asElement();  Symbol memberType=member.getEnclosingElement();  if (memberType.getQualifiedName().contentEquals("java.lang.Object"))   return 2; else   if (!memberType.equals(inElement))   return 1; else   return 0;}  }
class C{  private void displayThreadDumpInfo(Object nodeInfo){  ThreadDumpInfo ti=(ThreadDumpInfo)nodeInfo;  displayContent(ti.getOverview());}  }
class C{  public T caseColorLiteral(ColorLiteral object){  return null;}  }
class C{  public JRootKiosk(){  setUndecorated(true);  setResizable(false);  initComponents();}  }
class C{  protected void initIntensity(double intensity){}  }
class C{  public static <S extends HasMouseOutHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    MouseOutEvent event=new MouseOutEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  @Override public void write(int b) throws IOException {  String flush=null;  line.append(String.format("%02x ",(byte)b));  asciis[lineCount]=b >= 32 && b <= 126 ? (char)b : '.';  ++lineCount;  ++totalBytes;  if (lineCount == perLine) {    line.append(' ');    line.append(asciis);    line.append('\n');    flush=line.toString();    line=newLine();  } else {    if (perGroup > 0 && lineCount % perGroup == 0) {      line.append(' ');    }  }  if (flush != null) {    upstream.write(flush);  }}  }
class C{  public FloatBuffer put(float c){  floatArray.set(position++,c);  return this;}  }
class C{  public void annotation(int typeIndex,int numMemberValuePairs) throws IOException {  write16bit(typeIndex);  write16bit(numMemberValuePairs);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SRuntimePackage.REFERENCE_SLOT__REFERENCE:    setReference((ExecutionSlot)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public boolean isRevealed(Commitment commitment,byte[] message){  if (message.length + commitment.getSecret().length != byteLength) {    throw new DataLengthException("Message and witness secret lengths do not match.");  }  byte[] calcCommitment=calculateCommitment(commitment.getSecret(),message);  return Arrays.constantTimeAreEqual(commitment.getCommitment(),calcCommitment);}  }
class C{  public Object clone(){  CoordinateList clone=(CoordinateList)super.clone();  for (int i=0; i < this.size(); i++) {    clone.add(i,((Coordinate)this.get(i)).clone());  }  return clone;}  }
class C{  public static int countTokensCSV(String str,String delim){  if (str == null || str.isEmpty())   return 1;  int numTokens=0;  int from=0, to=0;  int len=str.length();  while (from < len) {    if (str.charAt(from) == CSV_QUOTE_CHAR && str.indexOf(CSV_QUOTE_CHAR,from + 1) > 0) {      to=str.indexOf(CSV_QUOTE_CHAR,from + 1);      while (to + 1 < len && str.charAt(to + 1) == CSV_QUOTE_CHAR)       to=str.indexOf(CSV_QUOTE_CHAR,to + 2);      to+=1;    } else     if (str.regionMatches(from,delim,0,delim.length())) {      to=from;    } else {      to=str.indexOf(delim,from + 1);    }    to=(to >= 0) ? to : len;    from=to + delim.length();    numTokens++;  }  if (from == len)   numTokens++;  return numTokens;}  }
class C{  public void init() throws ServletException {}  }
class C{  private static void checkField(final boolean condition,final String fieldName){  if (!condition) {    throw APIException.badRequests.requiredParameterMissingOrEmpty(fieldName);  }}  }
class C{  @Override public void reset(){  mapIndex=0;  finishedWithRegularMap=false;  if (bridgeTarget != null) {    bridgeParameterMappingRequired=true;    bridgeParameterIndex=bridgeParameterInitialIndex;    bridgeRegisterIndex=FIRST_VOLATILE_GPR;    bridgeRegisterLocation=framePtr.loadAddress();    bridgeRegisterLocation=bridgeRegisterLocation.minus(BYTES_IN_DOUBLE * (LAST_NONVOLATILE_FPR.value() - FIRST_VOLATILE_FPR.value() + 1) + BYTES_IN_ADDRESS * (LAST_NONVOLATILE_GPR.value() - FIRST_VOLATILE_GPR.value() + 1));    Address callersFP=Magic.getCallerFramePointer(framePtr);    bridgeSpilledParamLocation=callersFP.plus(STACKFRAME_HEADER_SIZE);  }}  }
class C{  public boolean put(long key,Object value){  int i=indexOfInsertion(key);  if (i < 0) {    i=-i - 1;    this.values[i]=value;    return false;  }  if (this.distinct > this.highWaterMark) {    int newCapacity=chooseGrowCapacity(this.distinct + 1,this.minLoadFactor,this.maxLoadFactor);    rehash(newCapacity);    return put(key,value);  }  this.table[i]=key;  this.values[i]=value;  if (this.state[i] == FREE)   this.freeEntries--;  this.state[i]=FULL;  this.distinct++;  if (this.freeEntries < 1) {    int newCapacity=chooseGrowCapacity(this.distinct + 1,this.minLoadFactor,this.maxLoadFactor);    rehash(newCapacity);  }  return true;}  }
class C{  public static double nextBurr1(double r,int nr,RandomEngine randomGenerator){  double y;  y=Math.exp(Math.log(randomGenerator.raw()) / r);switch (nr) {case 2:    return (-Math.log(1 / y - 1));case 7:  return (Math.log(2 * y / (2 - 2 * y)) / 2);case 8:return (Math.log(Math.tan(y * Math.PI / 2.0)));case 10:return (Math.sqrt(-Math.log(1 - y)));}return 0;}  }
class C{  @Override protected synchronized XAResource refreshXAConnection() throws ResourceException {  XAResource res=null;  if (this.conn != null) {    try {      this.conn.close();    } catch (    Exception err) {    }  }  try {    this.conn=this.factory.createXAConnection();    XASession session=this.conn.createXASession();    res=session.getXAResource();  } catch (  JMSException jms) {    throw new ResourceException("Error in getting XA resource",jms);  }  return res;}  }
class C{  public String sqlADAction_insertTranslation(String vendorName,String catalogName,String schemaName,String tableName,ArrayList<String> columnNames){  String idColumn=new StringBuffer(tableName).append("_ID").toString();  ArrayList<String> completeColumnNames=new ArrayList<String>();  completeColumnNames.add("AD_Language");  completeColumnNames.add("AD_Client_ID");  completeColumnNames.add("AD_Org_ID");  completeColumnNames.add("Created");  completeColumnNames.add("CreatedBy");  completeColumnNames.add("Updated");  completeColumnNames.add("UpdatedBy");  completeColumnNames.add("IsActive");  completeColumnNames.add("IsTranslated");  completeColumnNames.add(idColumn);  if (columnNames != null && columnNames.size() > 0) {    for (    String columnName : columnNames) {      completeColumnNames.add(columnName);    }  }  ArrayList<String> columnValues=new ArrayList<String>();  columnValues.add("t0.AD_Language");  columnValues.add("t.AD_Client_ID");  columnValues.add("t.AD_Org_ID");  columnValues.add(translateExpression("PostgreSQL",vendorName,"now()"));  columnValues.add("0");  columnValues.add(translateExpression("PostgreSQL",vendorName,"now()"));  columnValues.add("0");  columnValues.add("'Y'");  columnValues.add("'N'");  columnValues.add(new StringBuffer("t.").append(idColumn).toString());  if (columnNames != null && columnNames.size() > 0) {    for (    String columnName : columnNames) {      columnValues.add(new StringBuffer("t.").append(columnName).toString());    }  }  String targetTableName=new StringBuffer(tableName).append("_Trl").toString();  String sourceTableName=tableName;  ArrayList<String> joinTypes=new ArrayList<String>();  ArrayList<String> joinTables=new ArrayList<String>();  ArrayList<String> joinConditions=new ArrayList<String>();  joinTypes.add("INNER JOIN");  joinTables.add("AD_Language");  joinConditions.add("t0.IsSystemLanguage='Y'");  String subQuery=sql_select(vendorName,catalogName,schemaName,targetTableName,"r",new ArrayList<String>(Arrays.asList("1")),null,new ArrayList<String>(Arrays.asList(new StringBuffer("r.").append(idColumn).append(" = t.").append(idColumn).toString(),"r.AD_Language = t0.AD_Language")),null,false);  String whereClause=new StringBuffer("NOT EXISTS (").append(subQuery).append(")").toString();  return sql_insertFromTable(vendorName,catalogName,schemaName,targetTableName,completeColumnNames,columnValues,sourceTableName,joinTypes,joinTables,joinConditions,whereClause);}  }
class C{  protected FieldAccessorImpl(){  super();}  }
class C{  public static WebXml parseWebXmlFromFile(File theFile,EntityResolver theEntityResolver) throws IOException, JDOMException {  InputStream in=null;  try {    in=new FileInputStream(theFile);    return parseWebXml(in,theEntityResolver);  }  finally {    if (in != null) {      try {        in.close();      } catch (      IOException ioe) {      }    }  }}  }
class C{  public ActivityObject(){  super();}  }
class C{  public Push receive(final String status,final IMessageCallback callback){  if (this.receivedEnvelope != null) {    final String receivedStatus=this.receivedEnvelope.getResponseStatus();    if (receivedStatus != null && receivedStatus.equals(status)) {      callback.onMessage(this.receivedEnvelope);    }  }synchronized (recHooks) {    List<IMessageCallback> statusHooks=this.recHooks.get(status);    if (statusHooks == null) {      statusHooks=new ArrayList<>();      this.recHooks.put(status,statusHooks);    }    statusHooks.add(callback);  }  return this;}  }
class C{  public CDebugEventNotifier(final JFrame parent,final IDebugger debugger,final DebugTargetSettings debugTarget,final IViewContainer viewContainer){  m_parent=parent;  m_debugTarget=Preconditions.checkNotNull(debugTarget,"IE02292: debugTarget argument can not be null");  m_viewContainer=Preconditions.checkNotNull(viewContainer,"IE02293: viewContainer argument can not be null");  m_debugger=Preconditions.checkNotNull(debugger,"IE02294: debugger argument can not be null");}  }
class C{  public void addUnloadedClassCount(long unloadedClassCount){  this.totalUnloadedClassCount+=unloadedClassCount;}  }
class C{  public void resumeEncoding(){  this.suspendEncoding=false;}  }
class C{  @ReactMethod public void measureInWindow(int reactTag,Callback callback){  mUIImplementation.measureInWindow(reactTag,callback);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:54:53.787 -0400",hash_original_method="6DD92E82542F1890919DF52E279E0B68",hash_generated_method="28297192B7420F026BD550B67F1ED570") public DrmInfoEvent(int uniqueId,int type,String message){  super(uniqueId,type,message);}  }
class C{  private void addGwtSdkContainer(IProject project,GwtSdk newSdk) throws FileNotFoundException, CoreException, BackingStoreException {  IJavaProject javaProject=JavaCore.create(project);  GWTUpdateWebInfFolderCommand updateWebInfCommand=new GWTUpdateWebInfFolderCommand(javaProject,newSdk);  GwtSdk oldSdk=GwtSdk.findSdkFor(javaProject);  UpdateType updateType=UpdateType.NAMED_CONTAINER;  GWTUpdateProjectSdkCommand command=new GWTUpdateProjectSdkCommand(javaProject,oldSdk,newSdk,updateType,updateWebInfCommand);  command.execute();}  }
class C{  public int size(){  return coordinates.length;}  }
class C{  public static String decode(String string,Charset encoding){  checkNotNull(string);  checkNotNull(encoding);  try {    return URLDecoder.decode(string,encoding.name());  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException(e);  }}  }
class C{  protected void completeSnapshot(Snapshot snapshot){  Assert.notNull(snapshot,"snapshot");  snapshots.put(snapshot.index(),snapshot);  if (currentSnapshot == null || snapshot.index() > currentSnapshot.index()) {    currentSnapshot=snapshot;  }  if (!storage.retainStaleSnapshots()) {    Iterator<Map.Entry<Long,Snapshot>> iterator=snapshots.entrySet().iterator();    while (iterator.hasNext()) {      Snapshot oldSnapshot=iterator.next().getValue();      if (oldSnapshot.index() < currentSnapshot.index()) {        iterator.remove();        oldSnapshot.close();        oldSnapshot.delete();      }    }  }}  }
class C{  public Ellipsoid(String name,double equitorialRadius,double ecc,double eccsq,double polarRadius){  this.name=name;  this.radius=equitorialRadius;  this.ecc=ecc;  this.eccsq=eccsq;  this.polarRadius=polarRadius;}  }
class C{  @Override public boolean isReverse(){  return false;}  }
class C{  public void removeAttributes(){  attributes.clear();}  }
class C{  public static byte[] generateIv() throws GeneralSecurityException {  return randomBytes(IV_LENGTH_BYTES);}  }
class C{  public GraphicalView(Context context,AbstractChart chart){  super(context);  mContext=context;  mChart=chart;  mHandler=new Handler();  if (mChart instanceof XYChart) {    mRenderer=((XYChart)mChart).getRenderer();  } else {    mRenderer=((RoundChart)mChart).getRenderer();  }  if (mRenderer.isZoomButtonsVisible()) {    zoomInImage=AbFileUtil.getBitmapFromSrc("image/zoom_in.png");    zoomOutImage=AbFileUtil.getBitmapFromSrc("image/zoom_out.png");    fitZoomImage=AbFileUtil.getBitmapFromSrc("image/zoom-1.png");  }  if (mRenderer instanceof XYMultipleSeriesRenderer && ((XYMultipleSeriesRenderer)mRenderer).getMarginsColor() == XYMultipleSeriesRenderer.NO_COLOR) {    ((XYMultipleSeriesRenderer)mRenderer).setMarginsColor(mPaint.getColor());  }  if (mRenderer.isZoomEnabled() && mRenderer.isZoomButtonsVisible() || mRenderer.isExternalZoomEnabled()) {    mZoomIn=new Zoom(mChart,true,mRenderer.getZoomRate());    mZoomOut=new Zoom(mChart,false,mRenderer.getZoomRate());    mFitZoom=new FitZoom(mChart);  }  mTouchHandler=new TouchHandler(this,mChart);  if (mChart instanceof XYChart) {    XYMultipleSeriesRenderer mXYMultipleSeriesRenderer=((XYChart)mChart).getRenderer();    int explainTextSize1=mXYMultipleSeriesRenderer.getExplainTextSize1();    int explainTextSize2=mXYMultipleSeriesRenderer.getExplainTextSize2();    int scaleCircleRadius=mXYMultipleSeriesRenderer.getScaleCircleRadius();    int scaleRectWidth=mXYMultipleSeriesRenderer.getScaleRectWidth();    int scaleRectHeight=mXYMultipleSeriesRenderer.getScaleRectHeight();    mXYMultipleSeriesRenderer.setExplainTextSize1(AbViewUtil.scale(mContext,explainTextSize1));    mXYMultipleSeriesRenderer.setExplainTextSize2(AbViewUtil.scale(mContext,explainTextSize2));    mXYMultipleSeriesRenderer.setScaleCircleRadius(AbViewUtil.scale(mContext,scaleCircleRadius));    mXYMultipleSeriesRenderer.setScaleRectWidth(AbViewUtil.scale(mContext,scaleRectWidth));    mXYMultipleSeriesRenderer.setScaleRectHeight(AbViewUtil.scale(mContext,scaleRectHeight));    SimpleSeriesRenderer[] mSimpleSeriesRenderers=mRenderer.getSeriesRenderers();    if (mSimpleSeriesRenderers != null && mSimpleSeriesRenderers.length > 0) {      for (int i=0; i < mSimpleSeriesRenderers.length; i++) {        SimpleSeriesRenderer mSimpleSeriesRenderer=mSimpleSeriesRenderers[i];        int mChartValuesTextSize=(int)mSimpleSeriesRenderer.getChartValuesTextSize();        mSimpleSeriesRenderer.setChartValuesTextSize(AbViewUtil.scale(mContext,mChartValuesTextSize));      }    }  }  int chartTitleTextSize=(int)mRenderer.getChartTitleTextSize();  mRenderer.setChartTitleTextSize(AbViewUtil.scale(mContext,chartTitleTextSize));  int mLabelsTextSize=(int)mRenderer.getLabelsTextSize();  mRenderer.setLabelsTextSize(AbViewUtil.scale(mContext,mLabelsTextSize));  int mLegendTextSize=(int)mRenderer.getLegendTextSize();  mRenderer.setLegendTextSize(AbViewUtil.scale(mContext,mLegendTextSize));}  }
class C{  public boolean areEqual(Value a,Value b){  return a.compareTo(b,compareMode) == 0;}  }
class C{  private int computeHeight(){  FontMetrics fm=rootPane.getFontMetrics(getFont());  int fontHeight=fm.getHeight();  fontHeight+=7;  int iconHeight=0;  if (getWindowDecorationStyle() == JRootPane.FRAME) {    iconHeight=IMAGE_HEIGHT;  }  int finalHeight=Math.max(fontHeight,iconHeight);  return finalHeight + 2;}  }
class C{  public void incrementNodeCapacity(RMNode rmNode,Resource addedCapacity){  setNodeCapacity(rmNode,Resources.add(rmNode.getTotalCapability(),addedCapacity));}  }
class C{  public SectorGeometryList(){}  }
class C{  public void testFiniteStringsBasic(){  Automaton a=Operations.union(Automata.makeString("dog"),Automata.makeString("duck"));  a=MinimizationOperations.minimize(a,DEFAULT_MAX_DETERMINIZED_STATES);  FiniteStringsIterator iterator=new FiniteStringsIterator(a);  List<IntsRef> actual=getFiniteStrings(iterator);  assertFiniteStringsRecursive(a,actual);  assertEquals(2,actual.size());  IntsRefBuilder dog=new IntsRefBuilder();  Util.toIntsRef(new BytesRef("dog"),dog);  assertTrue(actual.contains(dog.get()));  IntsRefBuilder duck=new IntsRefBuilder();  Util.toIntsRef(new BytesRef("duck"),duck);  assertTrue(actual.contains(duck.get()));}  }
class C{  public final void testVerifyPublicKeyString() throws InvalidKeyException, CertificateException, NoSuchAlgorithmException, NoSuchProviderException, SignatureException {  Certificate c1=new MyCertificate("TEST_TYPE",testEncoding);  c1.verify(null,null);}  }
class C{  private int minimax(int ply,IComparator selector,IPlayer player,IPlayer opponent){  Iterator<IGameMove> it=player.validMoves(state).iterator();  if (ply == 0 || !it.hasNext()) {    return original.eval(state);  }  MinMaxNode minmax=null;  if (debug != null) {    minmax=new MinMaxNode(selector);    debug.visitNode(minmax);    debug.visitEdge(state.copy(),minmax);    debugHome.push(minmax);  }  int best=selector.initialValue();  while (it.hasNext()) {    IGameMove move=it.next();    if (move.execute(state)) {      state.incrementCounter();      int moveScore;      IGameState nextCopy=state.copy();      if (debug != null) {        nextCopy=state.copy();        debug.visitNode(nextCopy);        debug.visitEdge(debugHome.peek(),nextCopy);      }      moveScore=minimax(ply - 1,selector.opposite(),opponent,player);      if (debug != null && ply == 1) {        ScoreNode scoreNode=new ScoreNode(moveScore);        debug.visitNode(scoreNode);        debug.visitEdge(nextCopy,scoreNode);      }      if (selector.compare(best,moveScore) < 0) {        best=moveScore;      }    }    move.undo(state);  }  if (debug != null) {    MinMaxNode mmn=debugHome.pop();    mmn.value(best);  }  return best;}  }
class C{  public Object[] toArray(){  return Arrays.copyOf(elementData,size);}  }
class C{  public JFileDataStoreChooser(Shell parent,int style,final String extension){  this(parent,style,new String[]{extension});}  }
class C{  public OMGraphic createGraphic(int renderType,int lineType){  OMGraphic g=null;switch (renderType) {case (OMGraphic.RENDERTYPE_LATLON):    g=new LabeledOMSpline(new double[0],OMGraphic.RADIANS,lineType);  break;case (OMGraphic.RENDERTYPE_OFFSET):g=new LabeledOMSpline(90f,-180f,new int[0],OMSpline.COORDMODE_ORIGIN);break;default :g=new LabeledOMSpline(new int[0]);}((LabeledOMSpline)g).setDoShapes(true);return g;}  }
class C{  public boolean isFinal(int height,long blockTimeSeconds){  long time=getLockTime();  if (time < (time < LOCKTIME_THRESHOLD ? height : blockTimeSeconds))   return true;  if (!isTimeLocked())   return true;  return false;}  }
class C{  protected double norm(double x,int i){  if (Double.isNaN(m_Min[i]) || Utils.eq(m_Max[i],m_Min[i])) {    return 0;  } else {    return (x - m_Min[i]) / (m_Max[i] - m_Min[i]);  }}  }
class C{  public static double signedArea(CoordinateSequence ring){  int n=ring.size();  if (n < 3)   return 0.0;  Coordinate p0=new Coordinate();  Coordinate p1=new Coordinate();  Coordinate p2=new Coordinate();  ring.getCoordinate(0,p1);  ring.getCoordinate(1,p2);  double x0=p1.x;  p2.x-=x0;  double sum=0.0;  for (int i=1; i < n - 1; i++) {    p0.y=p1.y;    p1.x=p2.x;    p1.y=p2.y;    ring.getCoordinate(i + 1,p2);    p2.x-=x0;    sum+=p1.x * (p0.y - p2.y);  }  return sum / 2.0;}  }
class C{  static String toGMTFormat(String ms){  long sec=Long.parseLong(ms) / 1000;  char sign;  if (sec < 0) {    sign='-';    sec=-sec;  } else {    sign='+';  }  return String.format((Locale)null,"%c%02d:%02d",sign,sec / 3600,(sec % 3600) / 60);}  }
class C{  public static void determineFrameFormatIfNeeded(DataFrame dataFrame,FrameMetadata frameMetadata){  FrameFormat frameFormat=frameMetadata.getFrameFormat();  if (frameFormat != null) {    return;  }  StructType schema=dataFrame.schema();  boolean hasID=false;  try {    schema.fieldIndex(RDDConverterUtils.DF_ID_COLUMN);    hasID=true;  } catch (  IllegalArgumentException iae) {  }  FrameFormat ff=hasID ? FrameFormat.DF_WITH_INDEX : FrameFormat.DF;  frameMetadata.setFrameFormat(ff);}  }
class C{  public WebDAVContentStore(String root,Logger log,boolean offline,int timeout,Proxy proxy,String username,String password){  super(root,log,offline,timeout,proxy);  setUsername(username);  setPassword(password);  this.repository=new WebDAVRepository(timeout,username,password);}  }
class C{  public void init(StreamImpl source){  if (_source != null && _source != source) {    try {      close();    } catch (    IOException e) {    }  }  if (source == null) {    throw new IllegalArgumentException();  }  if (_tempWrite == null) {    _tempWrite=TempBuffers.allocate();    _writeBuffer=_tempWrite.buffer();  }  _source=source;  _position=0;  _writeLength=0;  _isFlushRequired=false;  _isFlushOnNewline=source.getFlushOnNewline();  _newline="\n";  _newlineBytes=LF_BYTES;}  }
class C{  @TruffleBoundary public static String createStackTrace(boolean printFrameSlots){  FrameInstance current=Truffle.getRuntime().getCurrentFrame();  if (current == null) {    return "no R stack trace available\n";  } else {    StringBuilder str=new StringBuilder();    Truffle.getRuntime().iterateFrames(null);    if (printFrameSlots) {      str.append("\n\nwith frame slot contents:\n");      Truffle.getRuntime().iterateFrames(null);    }    str.append("\n");    return str.toString();  }}  }
class C{  @DSSafe(DSCat.UTIL_FUNCTION) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:01.349 -0500",hash_original_method="7B47425A60B4C4C2B99A4113EA8A74F1",hash_generated_method="BD266226F3E2DF1012A52E6715BD5352") public static double convert(String coordinate){  if (coordinate == null) {    throw new NullPointerException("coordinate");  }  boolean negative=false;  if (coordinate.charAt(0) == '-') {    coordinate=coordinate.substring(1);    negative=true;  }  StringTokenizer st=new StringTokenizer(coordinate,":");  int tokens=st.countTokens();  if (tokens < 1) {    throw new IllegalArgumentException("coordinate=" + coordinate);  }  try {    String degrees=st.nextToken();    double val;    if (tokens == 1) {      val=Double.parseDouble(degrees);      return negative ? -val : val;    }    String minutes=st.nextToken();    int deg=Integer.parseInt(degrees);    double min;    double sec=0.0;    if (st.hasMoreTokens()) {      min=Integer.parseInt(minutes);      String seconds=st.nextToken();      sec=Double.parseDouble(seconds);    } else {      min=Double.parseDouble(minutes);    }    boolean isNegative180=negative && (deg == 180) && (min == 0)&& (sec == 0);    if ((deg < 0.0) || (deg > 179 && !isNegative180)) {      throw new IllegalArgumentException("coordinate=" + coordinate);    }    if (min < 0 || min > 59) {      throw new IllegalArgumentException("coordinate=" + coordinate);    }    if (sec < 0 || sec > 59) {      throw new IllegalArgumentException("coordinate=" + coordinate);    }    val=deg * 3600.0 + min * 60.0 + sec;    val/=3600.0;    return negative ? -val : val;  } catch (  NumberFormatException nfe) {    throw new IllegalArgumentException("coordinate=" + coordinate);  }}  }
class C{  public static int println(int priority,String tag,String msg){  return println(LOG_ID_MAIN,priority,tag,msg);}  }
class C{  protected Transferable createTransferable(JComponent comp){  exportComp=(JTextComponent)comp;  shouldRemove=true;  p0=exportComp.getSelectionStart();  p1=exportComp.getSelectionEnd();  return (p0 != p1) ? (new TextTransferable(exportComp,p0,p1)) : null;}  }
class C{  public PriorityQueue(Collection<? extends E> c){  if (c instanceof PriorityQueue) {    getFromPriorityQueue((PriorityQueue<? extends E>)c);  } else   if (c instanceof SortedSet) {    getFromSortedSet((SortedSet<? extends E>)c);  } else {    initSize(c);    addAll(c);  }}  }
class C{  public Observable<Record> publishObservable(Record record){  io.vertx.rx.java.ObservableFuture<Record> resultHandler=io.vertx.rx.java.RxHelper.observableFuture();  publish(record,resultHandler.toHandler());  return resultHandler;}  }
class C{  @Override public void layoutCompleted(LayoutCompleteEvent le){  LayoutEngine layoutEngine=m_layoutEngine;  ArrayList<Integer> nPosX=new ArrayList<Integer>(m_BayesNet.getNrOfNodes());  ArrayList<Integer> nPosY=new ArrayList<Integer>(m_BayesNet.getNrOfNodes());  for (int iNode=0; iNode < layoutEngine.getNodes().size(); iNode++) {    GraphNode gNode=layoutEngine.getNodes().get(iNode);    if (gNode.nodeType == GraphNode.NORMAL) {      nPosX.add(gNode.x);      nPosY.add(gNode.y);    }  }  m_BayesNet.layoutGraph(nPosX,nPosY);  m_jStatusBar.setText("Graph layed out");  a_undo.setEnabled(true);  a_redo.setEnabled(false);  setAppropriateSize();  m_GraphPanel.invalidate();  m_jScrollPane.revalidate();  m_GraphPanel.repaint();}  }
class C{  public void update(){  currentspeed=this.fromInterface.getTransmitSpeed(toInterface);  int othspeed=this.toInterface.getTransmitSpeed(fromInterface);  double now=core.SimClock.getTime();  if (othspeed < currentspeed) {    currentspeed=othspeed;  }  msgsent+=currentspeed * (now - this.lastUpdate);  this.lastUpdate=now;}  }
class C{  static public boolean isValid(String[] values){  try {    if (values[2].equalsIgnoreCase("currentdate")) {      return true;    } else     if (values[2].equalsIgnoreCase("adddays")) {      if (!StringUtils.isEmpty(values[3])) {        return true;      }    }    return false;  } catch (  Exception ex) {    return false;  }}  }
class C{  public static void main(String... args) throws Exception {  new WebSite().run();}  }
class C{  public static void serialize(Element element,Writer w){  Source source=new DOMSource(element);  serialize(source,w);}  }
class C{  public static double gammaRand(double a){  double e, x, u0, u1, u2, v, w, c, c1, c2, c3, c4, c5;  boolean done;  e=Math.exp(1.0);  if (a < 1.0) {    done=false;    c=(a + e) / e;    do {      u0=uniformRand();      u1=uniformRand();      v=c * u0;      if (v <= 1.0) {        x=Math.exp(Math.log(v) / a);        if (u1 <= Math.exp(-x)) {          done=true;        }      } else {        x=-Math.log((c - v) / a);        if ((x > 0.0) && (u1 < Math.exp((a - 1.0) * Math.log(x)))) {          done=true;        }      }    } while (!done);  } else   if (a == 1.0) {    x=-Math.log(uniformRand());  } else {    c1=a - 1.0;    c2=(a - 1.0 / (6.0 * a)) / c1;    c3=2.0 / c1;    c4=2.0 / (a - 1.0) + 2.0;    c5=1.0 / Math.sqrt(a);    do {      do {        u1=uniformRand();        u2=uniformRand();        if (a > 2.5) {          u1=u2 + c5 * (1.0 - 1.86 * u1);        }      } while ((u1 <= 0.0) || (u1 >= 1.0));      w=c2 * u2 / u1;    } while ((c3 * u1 + w + 1.0 / w) > c4 && (c3 * Math.log(u1) - Math.log(w) + w) > 1.0);    x=c1 * w;  }  return (x);}  }
class C{  @Override public int[] createPartition(double[] ratio,int size){  int[] part=super.createPartition(ratio,size);  for (int i=part.length - 1; i >= 1; i--) {    int swap=random.nextInt(i);    int dummy=part[i];    part[i]=part[swap];    part[swap]=dummy;  }  return part;}  }
class C{  public void clearMatchRects(){  setMatchRects(-1,new RectF[0],null);}  }
class C{  public void treeNodesRemoved(TreeModelEvent e){  fireVisibleDataPropertyChange();}  }
class C{  public Builder addLengthDelimited(final ByteString value){  if (result.lengthDelimited == null) {    result.lengthDelimited=new ArrayList<ByteString>();  }  result.lengthDelimited.add(value);  return this;}  }
class C{  public boolean[] toArray(){  int pos=0;  boolean[] array=new boolean[size];  if (currentBufferIndex == -1) {    return array;  }  for (int i=0; i < currentBufferIndex; i++) {    int len=buffers[i].length;    System.arraycopy(buffers[i],0,array,pos,len);    pos+=len;  }  System.arraycopy(buffers[currentBufferIndex],0,array,pos,offset);  return array;}  }
class C{  public void update(IStructuredSelection sel){  Object obj=sel.getFirstElement();  if (obj != null && obj instanceof AbstractUMLEntityEditPart) {    setEnabled(true);    target=(AbstractUMLEntityModel)((AbstractUMLEntityEditPart)obj).getModel();  } else   if (obj != null && obj instanceof OperationEditPart) {    setEnabled(true);    target=(AbstractUMLEntityModel)((OperationEditPart)obj).getParent().getModel();  } else   if (obj != null && obj instanceof AttributeEditPart) {    setEnabled(true);    target=(AbstractUMLEntityModel)((AttributeEditPart)obj).getParent().getModel();  } else {    setEnabled(false);    target=null;  }}  }
class C{  public void testRandomStrings() throws Exception {  checkRandomData(random(),sentence,10000 * RANDOM_MULTIPLIER);  checkRandomData(random(),sentenceAndWord,10000 * RANDOM_MULTIPLIER);}  }
class C{  static public String[][] matchAll(String what,String regexp){  Pattern p=matchPattern(regexp);  Matcher m=p.matcher(what);  ArrayList<String[]> results=new ArrayList<String[]>();  int count=m.groupCount() + 1;  while (m.find()) {    String[] groups=new String[count];    for (int i=0; i < count; i++) {      groups[i]=m.group(i);    }    results.add(groups);  }  if (results.isEmpty()) {    return null;  }  String[][] matches=new String[results.size()][count];  for (int i=0; i < matches.length; i++) {    matches[i]=(String[])results.get(i);  }  return matches;}  }
class C{  public static Map<String,String> importRemoteFrom(int vmid) throws IOException {  Perf perf=Perf.getPerf();  ByteBuffer bb;  try {    bb=perf.attach(vmid,"r");  } catch (  IllegalArgumentException iae) {    throw new IOException(iae.getMessage());  }  List<Counter> counters=new PerfInstrumentation(bb).getAllCounters();  Map<String,String> properties=new HashMap<>();  for (  Counter c : counters) {    String name=c.getName();    if (name.startsWith(REMOTE_CONNECTOR_COUNTER_PREFIX) && !name.equals(CONNECTOR_ADDRESS_COUNTER)) {      properties.put(name,c.getValue().toString());    }  }  return properties;}  }
class C{  @Override public boolean offer(Object o){  long x=MurmurHash.hash64(o);  return offerHashed(x);}  }
class C{  public void onComponentPopulated(FaceletContext ctx,UIComponent c,UIComponent parent){}  }
class C{  private PDFObject readHexString(int objNum,int objGen,PDFDecrypter decrypter) throws IOException {  int val;  StringBuffer sb=new StringBuffer();  while ((val=readHexPair()) >= 0) {    sb.append((char)val);  }  if (buf.get() != '>') {    throw new PDFParseException("Bad character in Hex String");  }  return new PDFObject(this,PDFObject.STRING,decrypter.decryptString(objNum,objGen,sb.toString()));}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  String inputHeader2=args[1];  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");    WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData1=inputFile1.getNoDataValue();    double noData2=inputFile2.getNoDataValue();    if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {      showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");      return;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData1);    outputFile.setPreferredPalette("black_white.pal");    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      data2=inputFile2.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        z2=data2[col];        if ((z1 != noData1) && (z2 != noData2)) {          if (z1 != 0) {            z1=1;          }          if (z2 != 0) {            z2=1;          }          outputFile.setValue(row,col,z1 * z2);        } else {          outputFile.setValue(row,col,noData1);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    inputFile2.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public AList(){  size=0;  items=(Item[])new Object[100];}  }
class C{  public void reset(){  int linksSize=(_links == null) ? XPathContext.RECURSIONLIMIT : _links.length;  int varArraySize=(_stackFrames == null) ? XPathContext.RECURSIONLIMIT * 2 : _stackFrames.length;  reset(linksSize,varArraySize);}  }
class C{  public RMIConnectorServer(JMXServiceURL url,Map<String,?> environment,RMIServerImpl rmiServerImpl,MBeanServer mbeanServer) throws IOException {  super(mbeanServer);  if (url == null)   throw new IllegalArgumentException("Null JMXServiceURL");  if (rmiServerImpl == null) {    final String prt=url.getProtocol();    if (prt == null || !(prt.equals("rmi") || prt.equals("iiop"))) {      final String msg="Invalid protocol type: " + prt;      throw new MalformedURLException(msg);    }    final String urlPath=url.getURLPath();    if (!urlPath.equals("") && !urlPath.equals("/") && !urlPath.startsWith("/jndi/")) {      final String msg="URL path must be empty or start with " + "/jndi/";      throw new MalformedURLException(msg);    }  }  if (environment == null)   this.attributes=Collections.emptyMap(); else {    EnvHelp.checkAttributes(environment);    this.attributes=Collections.unmodifiableMap(environment);  }  this.address=url;  this.rmiServerImpl=rmiServerImpl;}  }
class C{  protected void sparsify(){  final int N=vecs.size();  int accSize=accelCache == null ? 0 : accelCache.size() / N;  int svCount=0;  for (int i=0; i < N; i++)   if (alphas[i] != 0) {    ListUtils.swap(vecs,svCount,i);    if (accelCache != null)     for (int j=i * accSize; j < (i + 1) * accSize; j++)     ListUtils.swap(accelCache,svCount * accSize + j - i * accSize,j);    alphas[svCount++]=alphas[i];  }  vecs=new ArrayList<Vec>(vecs.subList(0,svCount));  alphas=Arrays.copyOfRange(alphas,0,svCount);}  }
class C{  public static void sortDesc(long[] a,int[] b,long[] tmpa,int[] tmpb){  hybridsortDesc(a,b,tmpa,tmpb,0,a.length - 1);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public static <T1,T2,T3,R>Function3<T1,T2,T3,R> memoizeTriFunction(Function3<T1,T2,T3,R> fn,Cacheable<R> cache){  val memoise2=memoizeFunction(null,cache);  return null;}  }
class C{  private static final void encodeQuotedPrintable(int b,ByteArrayOutputStream buffer){  buffer.write(ESCAPE_CHAR);  char hex1=Character.toUpperCase(Character.forDigit((b >> 4) & 0xF,16));  char hex2=Character.toUpperCase(Character.forDigit(b & 0xF,16));  buffer.write(hex1);  buffer.write(hex2);}  }
class C{  @Deprecated @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.SYSTEM_ADMIN}) public TaskResourceRep migrateVolume(MigrationParam migrateParam) throws InternalException {  String taskId=UUID.randomUUID().toString();  s_logger.info("Migrate volume {} from storage system {} to storage system {}",new Object[]{migrateParam.getVolume(),migrateParam.getSrcStorageSystem(),migrateParam.getTgtStorageSystem()});  Volume vplexVolume=verifyRequestedVolumeSupportsMigration(migrateParam.getVolume());  s_logger.debug("Verfified requested volume");  checkForPendingTasks(Arrays.asList(vplexVolume.getTenant().getURI()),Arrays.asList(vplexVolume));  Volume migrationSrc=getMigrationSource(vplexVolume,migrateParam.getSrcStorageSystem());  s_logger.debug("Migration source is {}",migrationSrc.getId());  Project migrationTgtProject=_permissionsHelper.getObjectById(migrationSrc.getProject().getURI(),Project.class);  s_logger.debug("Migration target project is {}",migrationTgtProject.getId());  VirtualArray migrationTargetVarray=_permissionsHelper.getObjectById(migrationSrc.getVirtualArray(),VirtualArray.class);  s_logger.debug("Migration target VirtualArray is {}",migrationTargetVarray.getId());  verifyTargetStorageSystemForMigration(migrateParam.getVolume(),vplexVolume.getStorageController(),migrateParam.getSrcStorageSystem(),migrateParam.getTgtStorageSystem());  s_logger.debug("Verified target storage system {}",migrateParam.getTgtStorageSystem());  VirtualPool migrationTgtCos=getVirtualPoolForMigrationTarget(migrateParam.getVirtualPool(),vplexVolume,migrationSrc);  s_logger.debug("Migration target VirtualPool is {}",migrationTgtCos.getId());  URI vplexSystemURI=vplexVolume.getStorageController();  Set<URI> requestedVPlexSystems=new HashSet<URI>();  requestedVPlexSystems.add(vplexSystemURI);  VPlexScheduler vplexScheduler=_vplexBlockServiceApi.getBlockScheduler();  VirtualPoolCapabilityValuesWrapper cosWrapper=new VirtualPoolCapabilityValuesWrapper();  cosWrapper.put(VirtualPoolCapabilityValuesWrapper.SIZE,migrationSrc.getCapacity());  cosWrapper.put(VirtualPoolCapabilityValuesWrapper.RESOURCE_COUNT,new Integer(1));  List<Recommendation> recommendations=vplexScheduler.scheduleStorage(migrationTargetVarray,requestedVPlexSystems,migrateParam.getTgtStorageSystem(),migrationTgtCos,false,null,null,cosWrapper,migrationTgtProject,VpoolUse.ROOT,new HashMap<VpoolUse,List<Recommendation>>());  if (recommendations.isEmpty()) {    throw APIException.badRequests.noStorageFoundForVolumeMigration(migrationTgtCos.getLabel(),migrationTargetVarray.getLabel(),vplexVolume.getId());  }  s_logger.debug("Got recommendation for migration target");  Recommendation recommendation=recommendations.get(0);  URI recommendedSystem=recommendation.getSourceStorageSystem();  URI recommendedPool=recommendation.getSourceStoragePool();  s_logger.debug("Recommendation storage system is {}",recommendedSystem);  s_logger.debug("Recommendation storage pool is {}",recommendedPool);  List<URI> migrationTgts=new ArrayList<URI>();  Map<URI,URI> poolTgtMap=new HashMap<URI,URI>();  Long size=_vplexBlockServiceApi.getVolumeCapacity(migrationSrc);  Volume migrationTgt=VPlexBlockServiceApiImpl.prepareVolumeForRequest(size,migrationTgtProject,migrationTargetVarray,migrationTgtCos,recommendedSystem,recommendedPool,migrationSrc.getLabel(),ResourceOperationTypeEnum.CREATE_BLOCK_VOLUME,taskId,_dbClient);  URI migrationTgtURI=migrationTgt.getId();  migrationTgts.add(migrationTgtURI);  poolTgtMap.put(recommendedPool,migrationTgtURI);  s_logger.debug("Prepared migration target volume {}",migrationTgtURI);  Map<URI,URI> migrationsMap=new HashMap<URI,URI>();  Migration migration=_vplexBlockServiceApi.prepareMigration(migrateParam.getVolume(),migrationSrc.getId(),migrationTgt.getId(),taskId);  migrationsMap.put(migrationTgtURI,migration.getId());  s_logger.debug("Prepared migration {}",migration.getId());  Operation op=_dbClient.createTaskOpStatus(Volume.class,vplexVolume.getId(),taskId,ResourceOperationTypeEnum.MIGRATE_BLOCK_VOLUME);  TaskResourceRep task=toTask(vplexVolume,taskId,op);  s_logger.debug("Created task for volume {}",migrateParam.getVolume());  try {    VPlexController controller=_vplexBlockServiceApi.getController();    String successMsg=String.format("Migration succeeded for volume %s",migrateParam.getVolume());    String failMsg=String.format("Migration failed for volume %s",migrateParam.getVolume());    controller.migrateVolumes(vplexSystemURI,migrateParam.getVolume(),migrationTgts,migrationsMap,poolTgtMap,(migrateParam.getVirtualPool() != null ? migrateParam.getVirtualPool() : null),null,successMsg,failMsg,null,taskId,null);    s_logger.debug("Got VPlex controller and created migration workflow");  } catch (  InternalException e) {    s_logger.error("Controller Error",e);    String errMsg=String.format("Controller Error: %s",e.getMessage());    task.setState(Operation.Status.error.name());    task.setMessage(errMsg);    Operation opStatus=new Operation(Operation.Status.error.name(),errMsg);    _dbClient.updateTaskOpStatus(Volume.class,task.getResource().getId(),taskId,opStatus);    migrationTgt.setInactive(true);    _dbClient.persistObject(migrationTgt);    migration.setInactive(true);    _dbClient.persistObject(migration);    throw e;  }  return task;}  }
class C{  @Override public String toString(){  if (!isExpandable) {    return entry1 + " - " + entry2;  }  return "n_" + entry1 + " - n_"+ entry2;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public int targetLength(){  return tgt.length;}  }
class C{  public void itemStateChanged(ItemEvent evt){  fireEditingStopped();}  }
class C{  private void renderAnimations(){  Keyframe kf0, kf1, kf2, kf3;  float midwayPoint=0.2f;  int duration=500;  kf0=Keyframe.ofFloat(0f,1);  kf1=Keyframe.ofFloat(midwayPoint,mTransitionMidRadiusMultiplier);  kf2=Keyframe.ofFloat(1f,mTransitionEndRadiusMultiplier);  PropertyValuesHolder radiusDisappear=PropertyValuesHolder.ofKeyframe("animationRadiusMultiplier",kf0,kf1,kf2);  kf0=Keyframe.ofFloat(0f,1f);  kf1=Keyframe.ofFloat(1f,0f);  PropertyValuesHolder fadeOut=PropertyValuesHolder.ofKeyframe("alpha",kf0,kf1);  mDisappearAnimator=ObjectAnimator.ofPropertyValuesHolder(this,radiusDisappear,fadeOut).setDuration(duration);  mDisappearAnimator.addUpdateListener(mInvalidateUpdateListener);  float delayMultiplier=0.25f;  float transitionDurationMultiplier=1f;  float totalDurationMultiplier=transitionDurationMultiplier + delayMultiplier;  int totalDuration=(int)(duration * totalDurationMultiplier);  float delayPoint=(delayMultiplier * duration) / totalDuration;  midwayPoint=1 - (midwayPoint * (1 - delayPoint));  kf0=Keyframe.ofFloat(0f,mTransitionEndRadiusMultiplier);  kf1=Keyframe.ofFloat(delayPoint,mTransitionEndRadiusMultiplier);  kf2=Keyframe.ofFloat(midwayPoint,mTransitionMidRadiusMultiplier);  kf3=Keyframe.ofFloat(1f,1);  PropertyValuesHolder radiusReappear=PropertyValuesHolder.ofKeyframe("animationRadiusMultiplier",kf0,kf1,kf2,kf3);  kf0=Keyframe.ofFloat(0f,0f);  kf1=Keyframe.ofFloat(delayPoint,0f);  kf2=Keyframe.ofFloat(1f,1f);  PropertyValuesHolder fadeIn=PropertyValuesHolder.ofKeyframe("alpha",kf0,kf1,kf2);  mReappearAnimator=ObjectAnimator.ofPropertyValuesHolder(this,radiusReappear,fadeIn).setDuration(totalDuration);  mReappearAnimator.addUpdateListener(mInvalidateUpdateListener);}  }
class C{  public static void spillRegisters(){}  }
class C{  public IndexRequest id(String id){  this.id=id;  return this;}  }
class C{  public void passScoreAfterParsing(Text url,Content content,Parse parse){  if (urlMetaTags == null || content == null || parse == null)   return;  for (  String metatag : urlMetaTags) {    String metaFromContent=content.getMetadata().get(metatag);    if (metaFromContent == null)     continue;    parse.getData().getParseMeta().set(metatag,metaFromContent);  }}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public OMWarpingImage(String imagePath,GeoCoordTransformation transform,WorldFile worldfile) throws MalformedURLException, InterruptedException {  setWarp(imagePath,transform,worldfile);}  }
class C{  public int length(){  return length;}  }
class C{  public final double ty(double y){  final double height=this.height;  if (y >= 0 && y < height)   return y;  y=y % height;  if (y < 0)   y=y + height;  return y;}  }
class C{  public static void listJson(){  Map<URI,String> virtualArrays=ResourceUtils.mapNames(getViprClient().varrays().list());  List<NetworkInfo> items=Lists.newArrayList();  for (  NetworkRestRep network : NetworkUtils.getNetworks()) {    NetworkInfo info=new NetworkInfo(network);    Set<String> varrayNames=getNames(virtualArrays,uris(network.getAssignedVirtualArrays()));    info.virtualArrayNames=StringUtils.join(varrayNames,",");    items.add(info);  }  renderJSON(DataTablesSupport.createJSON(items,params));}  }
class C{  private char[] convertToVararg(char[] typeName){  if (typeName == null)   return typeName;  final int len=typeName.length;  if (len < 2)   return typeName;  if (typeName[len - 1] != ']')   return typeName;  if (typeName[len - 2] != '[')   return typeName;  char[] vararg=new char[len + 1];  System.arraycopy(typeName,0,vararg,0,len - 2);  vararg[len - 2]='.';  vararg[len - 1]='.';  vararg[len]='.';  return vararg;}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getActionCommand().equals(FieldRecordInfo.CHANGE_LOG_COMMAND)) {    FieldRecordInfo.start(m_mField);    return;  }  if (!m_button.isEnabled())   return;  m_button.setEnabled(false);  Integer oldValue=(Integer)getValue();  int S_ResourceAssignment_ID=oldValue == null ? 0 : oldValue.intValue();  MResourceAssignment ma=new MResourceAssignment(Env.getCtx(),S_ResourceAssignment_ID,null);  if (S_ResourceAssignment_ID != 0) {    VAssignmentDialog vad=new VAssignmentDialog(Env.getFrame(this),ma,true,true);    ma=vad.getMResourceAssignment();  } else {    InfoSchedule is=new InfoSchedule(Env.getFrame(this),ma,true);    ma=is.getMResourceAssignment();  }  if (ma != null && ma.getS_ResourceAssignment_ID() != 0) {    setValue(new Integer(ma.getS_ResourceAssignment_ID()));    try {      fireVetoableChange(this.getName(),new Object(),getValue());    } catch (    PropertyVetoException pve) {      log.log(Level.SEVERE,"",pve);    }  }  m_button.setEnabled(true);  requestFocus();}  }
class C{  public static List combinations(Iterable collections){  List collectedCombos=new ArrayList();  for (  Object collection : collections) {    Iterable items=DefaultTypeTransformation.asCollection(collection);    if (collectedCombos.isEmpty()) {      for (      Object item : items) {        List l=new ArrayList();        l.add(item);        collectedCombos.add(l);      }    } else {      List savedCombos=new ArrayList(collectedCombos);      List newCombos=new ArrayList();      for (      Object value : items) {        for (        Object savedCombo : savedCombos) {          List oldList=new ArrayList((List)savedCombo);          oldList.add(value);          newCombos.add(oldList);        }      }      collectedCombos=newCombos;    }  }  return collectedCombos;}  }
class C{  @Override public void mousePress(int x,int y,int mouseButton,boolean cntlDown,boolean shiftDown){  mouseX=x;  mouseY=y;  this.mouseButton=mouseButton;  controller.mousePress(x,y,mouseButton);  Spatial spatial=controller.doPick(mouseX,mouseY,pickPosition,pickNormal,false);  if (spatial != null) {    if (mouseButton == 1) {      if ((tape == null) && (path == null)) {        if (grab(spatial,pickPosition)) {          lastPosition=new Vector3(movable.getTranslation());          ((Spatial)movable).getSceneHints().setAllPickingHints(false);          movable.setInMotion(true,pickPosition);          canvasPanel.getCanvas().setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));        }      }    }    lastSelection=SpatialUtil.getPickHost(spatial);  }}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  Icepick.restoreInstanceState(this,savedInstanceState);  this.requestWindowFeature(Window.FEATURE_NO_TITLE);  setContentView(R.layout.activity_layout);  ButterKnife.inject(this);  flipper=findById(this,R.id.container);  getLayoutInflater().inflate(R.layout.search_view,flipper);  getLayoutInflater().inflate(R.layout.history_view,flipper);  showView(selectedPosition);}  }
class C{  void error(String msg,String... more){  System.err.println("test: " + testOptions + " "+ testClassName);  System.err.println("error: " + msg);  for (  String s : more)   System.err.println(s);  errors++;  System.exit(1);}  }
class C{  public void release(){  dismiss();  mediaServiceClass=null;  notificationInfo.clean();}  }
class C{  public DERExternal(ASN1ObjectIdentifier directReference,ASN1Integer indirectReference,ASN1Primitive dataValueDescriptor,DERTaggedObject externalData){  this(directReference,indirectReference,dataValueDescriptor,externalData.getTagNo(),externalData.toASN1Primitive());}  }
class C{  public void write(OutStream out) throws IOException {  writeWithAlpha(out);}  }
class C{  public void addAttribute(String name,String value){}  }
class C{  private void sendInterestArea(){  log.info("R_InterestArea_ID=" + m_R_InterestArea_ID);  m_ia=MInterestArea.get(getCtx(),m_R_InterestArea_ID);  String unsubscribe=null;  if (m_ia.isSelfService()) {    unsubscribe="\n\n---------.----------.----------.----------.----------.----------\n" + Msg.getElement(getCtx(),"R_InterestArea_ID") + ": "+ m_ia.getName()+ "\n"+ Msg.getMsg(getCtx(),"UnsubscribeInfo")+ "\n";    MStore[] wstores=MStore.getOfClient(m_client);    int index=0;    for (int i=0; i < wstores.length; i++) {      if (wstores[i].isDefault()) {        index=i;        break;      }    }    if (wstores.length > 0)     unsubscribe+=wstores[index].getWebContext(true);  }  String sql="SELECT u.Name, u.EMail, u.AD_User_ID " + "FROM R_ContactInterest ci" + " INNER JOIN AD_User u ON (ci.AD_User_ID=u.AD_User_ID) "+ "WHERE ci.IsActive='Y' AND u.IsActive='Y'"+ " AND ci.OptOutDate IS NULL"+ " AND u.EMail IS NOT NULL"+ " AND ci.R_InterestArea_ID=?";  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(sql,get_TrxName());    pstmt.setInt(1,m_R_InterestArea_ID);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      Boolean ok=sendIndividualMail(rs.getString(1),rs.getInt(3),unsubscribe);      if (ok == null)       ; else       if (ok.booleanValue())       m_counter++; else       m_errors++;    }    rs.close();    pstmt.close();    pstmt=null;  } catch (  SQLException ex) {    log.log(Level.SEVERE,sql,ex);  }  try {    if (pstmt != null)     pstmt.close();  } catch (  SQLException ex1) {  }  pstmt=null;  m_ia=null;}  }
class C{  private EncodingUtils(){}  }
class C{  public synchronized int insert(String statementSql,Object... arguments){  if (isClosed()) {    return OBJECT_INVALID_ID;  }  if (!statementSql.toUpperCase().startsWith("INSERT")) {    return OBJECT_INVALID_ID;  }  if (update(statementSql,arguments) != -1) {    return getIdentity();  }  return OBJECT_INVALID_ID;}  }
class C{  public static int encodeLength(int len){  if (len <= 32) {    return 0;  }  int code=Integer.numberOfLeadingZeros(len);  int remaining=len << (code + 1);  code+=code;  if ((remaining & (1 << 31)) != 0) {    code--;  }  if ((remaining << 1) != 0) {    code--;  }  code=Math.min(31,52 - code);  return code;}  }
class C{  public boolean isRange(int start,int end,boolean value){  if (end < start) {    throw new IllegalArgumentException();  }  if (end == start) {    return true;  }  end--;  int firstInt=start >> 5;  int lastInt=end >> 5;  for (int i=firstInt; i <= lastInt; i++) {    int firstBit=i > firstInt ? 0 : start & 0x1F;    int lastBit=i < lastInt ? 31 : end & 0x1F;    int mask;    if (firstBit == 0 && lastBit == 31) {      mask=-1;    } else {      mask=0;      for (int j=firstBit; j <= lastBit; j++) {        mask|=1 << j;      }    }    if ((bits[i] & mask) != (value ? mask : 0)) {      return false;    }  }  return true;}  }
class C{  public static double betaRand(double a,double b){  double x, y;  x=gammaRand(a);  y=gammaRand(b);  return (x / (x + y));}  }
class C{  public boolean isUserPermanent(){  return preferences == null || !"true".equals(preferences.get("temporary"));}  }
class C{  public TerminalIterator(int[] words){  this.words=words;}  }
class C{  public SaveAsDialog2(final Shell parentShell){  super(parentShell);  setShellStyle(getShellStyle() | SWT.SHEET);}  }
class C{  public static void deleteValue(int hkey,String key,String value) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {  int rc=-1;  if (hkey == HKEY_LOCAL_MACHINE) {    rc=deleteValue(systemRoot,hkey,key,value);  } else   if (hkey == HKEY_CURRENT_USER) {    rc=deleteValue(userRoot,hkey,key,value);  }  if (rc != REG_SUCCESS) {    throw new IllegalArgumentException("rc=" + rc + "  key="+ key+ "  value="+ value);  }}  }
class C{  public static GdbPType parse(GdbOutput gdbOutput) throws GdbParseException {  String output=gdbOutput.getOutput();  Matcher matcher=GDB_ARGS.matcher(output);  if (matcher.find()) {    String type=matcher.group(1);    return new GdbPType(type);  }  throw new GdbParseException(GdbPrint.class,output);}  }
class C{  public static long[] andCMin(long[] v,long[] o){  final int min=Math.min(v.length,o.length);  long[] out=new long[min];  int i=0;  for (; i < min; i++) {    out[i]=v[i] & o[i];  }  return out;}  }
class C{  private void compactGroups(){  for (int i=0; i < groups.size(); i++) {    List<Segment> group=groups.get(i);    List<OffsetPredicate> groupPredicates=predicates.get(i);    Segment segment=compactGroup(group,groupPredicates);    mergeReleased(group,groupPredicates,segment);    deleteGroup(group);  }}  }
class C{  public X509CertImpl(InputStream in) throws CertificateException {  try {    this.certificate=(Certificate)Certificate.ASN1.decode(in);    this.tbsCert=certificate.getTbsCertificate();    this.extensions=tbsCert.getExtensions();  } catch (  IOException e) {    throw new CertificateException(e);  }}  }
class C{  private void extractParameters(ResultPoint[] bullsEyeCorners) throws NotFoundException {  if (!isValid(bullsEyeCorners[0]) || !isValid(bullsEyeCorners[1]) || !isValid(bullsEyeCorners[2])|| !isValid(bullsEyeCorners[3])) {    throw NotFoundException.getNotFoundInstance();  }  int length=2 * nbCenterLayers;  int[] sides={sampleLine(bullsEyeCorners[0],bullsEyeCorners[1],length),sampleLine(bullsEyeCorners[1],bullsEyeCorners[2],length),sampleLine(bullsEyeCorners[2],bullsEyeCorners[3],length),sampleLine(bullsEyeCorners[3],bullsEyeCorners[0],length)};  shift=getRotation(sides,length);  long parameterData=0;  for (int i=0; i < 4; i++) {    int side=sides[(shift + i) % 4];    if (compact) {      parameterData<<=7;      parameterData+=(side >> 1) & 0x7F;    } else {      parameterData<<=10;      parameterData+=((side >> 2) & (0x1f << 5)) + ((side >> 1) & 0x1F);    }  }  int correctedData=getCorrectedParameterData(parameterData,compact);  if (compact) {    nbLayers=(correctedData >> 6) + 1;    nbDataBlocks=(correctedData & 0x3F) + 1;  } else {    nbLayers=(correctedData >> 11) + 1;    nbDataBlocks=(correctedData & 0x7FF) + 1;  }}  }
class C{  public XMLDocument addToProlog(ConcreteElement element){  prolog.addElement(element);  return (this);}  }
class C{  public static String jreVersion(){  return javaRtVer;}  }
class C{  private static int blend_overlay(int a,int b){  int f=(b & ALPHA_MASK) >>> 24;  int ar=(a & RED_MASK) >> 16;  int ag=(a & GREEN_MASK) >> 8;  int ab=(a & BLUE_MASK);  int br=(b & RED_MASK) >> 16;  int bg=(b & GREEN_MASK) >> 8;  int bb=(b & BLUE_MASK);  int cr=(ar < 128) ? ((ar * br) >> 7) : (255 - (((255 - ar) * (255 - br)) >> 7));  int cg=(ag < 128) ? ((ag * bg) >> 7) : (255 - (((255 - ag) * (255 - bg)) >> 7));  int cb=(ab < 128) ? ((ab * bb) >> 7) : (255 - (((255 - ab) * (255 - bb)) >> 7));  return (low(((a & ALPHA_MASK) >>> 24) + f,0xff) << 24 | (peg(ar + (((cr - ar) * f) >> 8)) << 16) | (peg(ag + (((cg - ag) * f) >> 8)) << 8) | (peg(ab + (((cb - ab) * f) >> 8))));}  }
class C{  public String toString(){  return getCommandName();}  }
class C{  @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:40.864 -0500",hash_original_method="CC084819861CE9346C088F826DD71D3D",hash_generated_method="A734C5C6906F53FB9B0347E038F958BE") @Override public boolean isFocused(){  return this.isEnabled();}  }
class C{  public void cancelBySign(Object sign){synchronized (mUnFinishQueue) {    for (    Request<?> request : mUnFinishQueue)     request.cancelBySign(sign);  }}  }
class C{  private void loginWithGoogle(String token){  mFirebaseRef.authWithOAuthToken(Constants.GOOGLE_PROVIDER,token,new MyAuthResultHandler(Constants.GOOGLE_PROVIDER));}  }
class C{  void _m20(float m20){  this.m20=m20;}  }
class C{  public void saveInBackground(SaveCallback callback){  ParseTaskUtils.callbackOnMainThreadAsync(saveInBackground(),callback);}  }
class C{  public BinaryBitmap crop(int left,int top,int width,int height){  LuminanceSource newSource=binarizer.getLuminanceSource().crop(left,top,width,height);  return new BinaryBitmap(binarizer.createBinarizer(newSource));}  }
class C{  public boolean isUnion(){  return this.constructionElement.getAttributeNS(null,XPath2FilterContainer04._ATT_FILTER).equals(XPath2FilterContainer04._ATT_FILTER_VALUE_UNION);}  }
class C{  public CharMemberValue(char c,ConstPool cp){  super('C',cp);  setValue(c);}  }
class C{  private Set<URI> networksNotRedundant(Map<URI,Set<Initiator>> netToInitiatorsMap,Map<URI,Set<URI>> hostToNetworks){  hostToNetworks.clear();  Map<Initiator,URI> initiatorsToNetMap=new HashMap<Initiator,URI>();  for (  Map.Entry<URI,Set<Initiator>> entry : netToInitiatorsMap.entrySet()) {    for (    Initiator initiator : entry.getValue()) {      initiatorsToNetMap.put(initiator,entry.getKey());    }  }  Set<URI> nonredundantNets=new HashSet<URI>();  Map<URI,List<Initiator>> hostInitiatorsMap=makeHostInitiatorsMap(initiatorsToNetMap.keySet());  for (  Map.Entry<URI,List<Initiator>> entry : hostInitiatorsMap.entrySet()) {    hostToNetworks.put(entry.getKey(),new HashSet<URI>());    for (    Initiator initiator : entry.getValue()) {      URI initiatorNet=initiatorsToNetMap.get(initiator);      if (initiatorNet != null) {        hostToNetworks.get(entry.getKey()).add(initiatorNet);      }    }    _log.info(String.format("Host %s uses networks %s",entry.getKey(),hostToNetworks.get(entry.getKey())));  }  for (  Set<URI> networks : hostToNetworks.values()) {    if (networks.size() == 1) {      _log.info("Non redundant network: " + networks.toString());      nonredundantNets.addAll(networks);    }  }  return nonredundantNets;}  }
class C{  public static Integer createServerCache() throws Exception {  new EventIdOptimizationDUnitTest().createCache(new Properties());  AttributesFactory factory=new AttributesFactory();  factory.setScope(Scope.DISTRIBUTED_ACK);  factory.setMirrorType(MirrorType.KEYS_VALUES);  RegionAttributes attrs=factory.create();  cache.createRegion(REGION_NAME,attrs);  for (int i=0; i < eventIds.length; i++) {    cache.createRegion(REGION_NAME + i,attrs);  }  CacheServer server=cache.addCacheServer();  assertNotNull(server);  int port=AvailablePort.getRandomAvailablePort(AvailablePort.SOCKET);  server.setPort(port);  server.setNotifyBySubscription(true);  server.start();  return new Integer(server.getPort());}  }
class C{  public final void enableChildRoundedCorners(boolean enable){  mRoundedCornersEnabled=enable;}  }
class C{  public static boolean isAtLeast(int apiLevel){  return Build.VERSION.SDK_INT >= apiLevel;}  }
class C{  protected void ensureArguments(String operator,int expected,int arguments,TextStream stream){  if (arguments != expected) {    throw new SelfParseException("'" + operator + "' requires "+ expected+ " arguments not: "+ arguments,stream);  }}  }
class C{  public void find(Session s,ArrayList<IndexCondition> indexConditions){  prepare(s,indexConditions);  if (inColumn != null) {    return;  }  if (!alwaysFalse) {    if (intersects != null && index instanceof SpatialIndex) {      cursor=((SpatialIndex)index).findByGeometry(tableFilter,start,end,intersects);    } else {      cursor=index.find(tableFilter,start,end);    }  }}  }
class C{  public static <T1,T2,T3>PredicateBuilder1<T1> decons(final MTuple1<Predicate<? super T1>> when){  return new PredicateBuilder1<T1>(when);}  }
class C{  public static File[] findFiles(String fileName,String path){  return findFiles(fileName,path,false);}  }
class C{  public static String defaultXMLSpace(String data){  int nChars=data.length();  StringBuffer result=new StringBuffer(nChars);  boolean space=false;  for (int i=0; i < nChars; i++) {    char c=data.charAt(i);switch (c) {case 10:case 13:      space=false;    break;case ' ':case '\t':  if (!space) {    result.append(' ');    space=true;  }break;default :result.append(c);space=false;}}return result.toString().trim();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public String[] parseInstrumentation(String[] lines){  List<String> output=new ArrayList<String>();  boolean readMultiLine=false;  for (  String line : lines) {    if (line.startsWith("INSTRUMENTATION_RESULT: ")) {      CLog.e("Instrumentation Error:");      mInstrumentationError=true;    }    if (mInstrumentationError) {      CLog.e(line);      continue;    }    if (line.startsWith("INSTRUMENTATION_STATUS: gtest=")) {      output.add(line.replace("INSTRUMENTATION_STATUS: gtest=",""));      readMultiLine=true;      continue;    }    if (line.startsWith("INSTRUMENTATION_")) {      readMultiLine=false;      continue;    }    if (readMultiLine) {      output.add(line);    }  }  return output.toArray(new String[output.size()]);}  }
class C{  public Long deleteFileOrFolderSelf(String SID,Long fileExplorerItemId) throws AxisFault {  return this.geFileServiceProxy().deleteFileOrFolderSelf(SID,fileExplorerItemId);}  }
class C{  public SearchTimeline build(){  if (query == null) {    throw new IllegalStateException("query must not be null");  }  return new SearchTimeline(tweetUi,query,resultType,lang,maxItemsPerRequest,untilDate);}  }
class C{  public EventSpawnEntry(BLSpawnEntry parent,String eventName){  super(parent.getEntityType(),parent.getBaseWeight());  this.parent=parent;  this.eventName=eventName;}  }
class C{  protected void drawTitleText(DrawContext dc,Point drawPoint){  GL2 gl=dc.getGL().getGL2();  FrameAttributes attributes=this.getActiveAttributes();  String frameTitle=this.getFrameTitle();  if (frameTitle == null)   return;  TextRenderer textRenderer=OGLTextRenderer.getOrCreateTextRenderer(dc.getTextRendererCache(),attributes.getFont());  int titleAreaWidth=this.innerBounds.width - this.buttonSize - drawPoint.x- attributes.getIconSpace();  if (this.mustGenerateShortTitle(attributes.getFont(),titleAreaWidth)) {    this.generateShortTitle(dc,frameTitle,titleAreaWidth,"...");  }  if (this.shortTitle == null)   return;  try {    textRenderer.begin3DRendering();    OGLUtil.applyColor(gl,attributes.getTextColor(),1.0,false);    double vertAdjust=(this.titleBarHeight - Math.abs(this.shortTitleBounds.getY())) / 2;    textRenderer.draw(this.shortTitle,drawPoint.x,(int)(drawPoint.y + vertAdjust) + 1);  }  finally {    textRenderer.end3DRendering();  }}  }
class C{  public void service(Mail trigger) throws MessagingException {  trigger.setState(Mail.GHOST);  Collection<String> processed=new ArrayList<String>();  Iterator<String> list=repository.list();  while (list.hasNext()) {    String key=(String)list.next();    try {      Mail mail=repository.retrieve(key);      if (mail != null && mail.getRecipients() != null) {        log((new StringBuffer(160).append("Spooling mail ").append(mail.getName()).append(" from ").append(repositoryPath)).toString());        mail.setAttribute("FromRepository",Boolean.TRUE);        mail.setState(processor);        getMailetContext().sendMail(mail);        if (delete)         processed.add(key);        LifecycleUtil.dispose(mail);      }    } catch (    MessagingException e) {      log((new StringBuffer(160).append("Unable to re-spool mail ").append(key).append(" from ").append(repositoryPath)).toString(),e);    }  }  if (delete) {    for (    Object aProcessed : processed) {      repository.remove((String)aProcessed);    }  }}  }
class C{  public static void METHOD_BEGIN_PARAM(int value,int nr,int calleeLocalsIndex){  if (ignoreCallback)   return;  ignoreCallback=true;  vm.countCallback();  try {    for (    IVM listener : vm.listeners)     listener.METHOD_BEGIN_PARAM(nr,calleeLocalsIndex,value);  } catch (  Throwable t) {    handleException(t);  }  ignoreCallback=false;}  }
class C{  static private boolean isExternalFile(IPath path){  throw new UnsupportedOperationException();}  }
class C{  public InsertContact secondaryEmailType(int secondaryEmailType){  mIntent.putExtra(Insert.SECONDARY_EMAIL_TYPE,secondaryEmailType);  return this;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public PortugueseMinimalStemFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  @Override public synchronized int available() throws IOException {  ensureOpen();  return mData.length - mIndex;}  }
class C{  public final String toString(){  return name;}  }
class C{  public static void updateProductReview(ProductReview domainObjectToUpdate,POServiceReview po) throws ValidationException, ConcurrentModificationException {  String title=trim(po.getTitle());  String comment=trim(po.getComment());  int rating=po.getRating();  BLValidator.isName("title",title,true);  BLValidator.isComment("comment",comment,true);  BLValidator.isRating("rating",rating);  verifyVersionAndKey(domainObjectToUpdate,po);  updatePresentationObject(po,domainObjectToUpdate);  domainObjectToUpdate.setTitle(title);  domainObjectToUpdate.setComment(comment);  domainObjectToUpdate.setRating(rating);  domainObjectToUpdate.setModificationDate(po.getModificationDate());}  }
class C{  public void testSize() throws Exception {  IgfsPath dir1=path("/dir1");  IgfsPath subDir1=path("/dir1/subdir1");  IgfsPath dir2=path("/dir2");  IgfsPath fileDir1=path("/dir1/file");  IgfsPath fileSubdir1=path("/dir1/subdir1/file");  IgfsPath fileDir2=path("/dir2/file");  IgfsOutputStream os=igfs.create(fileDir1,false);  os.write(new byte[1000]);  os.close();  os=igfs.create(fileSubdir1,false);  os.write(new byte[2000]);  os.close();  os=igfs.create(fileDir2,false);  os.write(new byte[4000]);  os.close();  assert igfs.size(fileDir1) == 1000;  assert igfs.size(fileSubdir1) == 2000;  assert igfs.size(fileDir2) == 4000;  assert igfs.size(dir1) == 3000;  assert igfs.size(subDir1) == 2000;  assert igfs.size(dir2) == 4000;}  }
class C{  protected int compareDigits(String str1,int ndx1,String str2,int ndx2){  int bias=0;  while (true) {    char char1=charAt(str1,ndx1);    char char2=charAt(str2,ndx2);    boolean isDigitChar1=CharUtil.isDigit(char1);    boolean isDigitChar2=CharUtil.isDigit(char2);    if (!isDigitChar1 && !isDigitChar2) {      return bias;    }    if (!isDigitChar1) {      return -1;    }    if (!isDigitChar2) {      return 1;    }    if (char1 < char2) {      if (bias == 0) {        bias=-1;      }    } else     if (char1 > char2) {      if (bias == 0) {        bias=1;      }    } else     if (char1 == 0 && char2 == 0) {      return bias;    }    ndx1++;    ndx2++;  }}  }
class C{  private static boolean matchInf(CharSequence str,char firstchar,int start,int end){}  }
class C{  private void reloadQueue(){  String q=null;  int id=mCardId;  if (mPreferences.contains("cardid")) {    id=mPreferences.getInt("cardid",~mCardId);  }  if (id == mCardId) {    q=mPreferences.getString("queue","");  }  int qlen=q != null ? q.length() : 0;  if (qlen > 1) {    int plen=0;    int n=0;    int shift=0;    for (int i=0; i < qlen; i++) {      final char c=q.charAt(i);      if (c == ';') {        ensurePlayListCapacity(plen + 1);        mPlayList[plen]=n;        plen++;        n=0;        shift=0;      } else {        if (c >= '0' && c <= '9') {          n+=c - '0' << shift;        } else         if (c >= 'a' && c <= 'f') {          n+=10 + c - 'a' << shift;        } else {          plen=0;          break;        }        shift+=4;      }    }    mPlayListLen=plen;    final int pos=mPreferences.getInt("curpos",0);    if (pos < 0 || pos >= mPlayListLen) {      mPlayListLen=0;      return;    }    mPlayPos=pos;    updateCursor(mPlayList[mPlayPos]);    if (mCursor == null) {      SystemClock.sleep(3000);      updateCursor(mPlayList[mPlayPos]);    }synchronized (this) {      closeCursor();      mOpenFailedCounter=20;      openCurrentAndNext();    }    if (mPlayer == null || !mPlayer.isInitialized()) {      mPlayListLen=0;      return;    }    final long seekpos=mPreferences.getLong("seekpos",0);    seek(seekpos >= 0 && seekpos < duration() ? seekpos : 0);    if (D) {      LOG.info("restored queue, currently at position " + position() + "/"+ duration()+ " (requested "+ seekpos+ ")");    }    int repmode=mPreferences.getInt("repeatmode",REPEAT_NONE);    if (repmode != REPEAT_ALL && repmode != REPEAT_CURRENT) {      repmode=REPEAT_NONE;    }    mRepeatMode=repmode;    int shufmode=mPreferences.getInt("shufflemode",SHUFFLE_NONE);    if (shufmode != SHUFFLE_AUTO && shufmode != SHUFFLE_NORMAL) {      shufmode=SHUFFLE_NONE;    }    if (shufmode != SHUFFLE_NONE) {      q=mPreferences.getString("history","");      qlen=q != null ? q.length() : 0;      if (qlen > 1) {        n=0;        shift=0;        mHistory.clear();        for (int i=0; i < qlen; i++) {          final char c=q.charAt(i);          if (c == ';') {            if (n >= mPlayListLen) {              mHistory.clear();              break;            }            mHistory.add(n);            n=0;            shift=0;          } else {            if (c >= '0' && c <= '9') {              n+=c - '0' << shift;            } else             if (c >= 'a' && c <= 'f') {              n+=10 + c - 'a' << shift;            } else {              mHistory.clear();              break;            }            shift+=4;          }        }      }    }    if (shufmode == SHUFFLE_AUTO) {      if (!makeAutoShuffleList()) {        shufmode=SHUFFLE_NONE;      }    }    mShuffleMode=shufmode;  }}  }
class C{  protected void removeEntry(HashEntry<K,V> entry,int hashIndex,HashEntry<K,V> previous){  if (previous == null) {    data[hashIndex]=entry.next;  } else {    previous.next=entry.next;  }}  }
class C{  @Override public boolean isServiceRegistered(){  return ServerApiUtils.isImsConnected();}  }
class C{  public void print(float fnum){  print(String.valueOf(fnum));}  }
class C{  public static double sampleWeightedVariance(double sumOfWeights,double sumOfProducts,double sumOfSquaredProducts){  return (sumOfSquaredProducts - sumOfProducts * sumOfProducts / sumOfWeights) / (sumOfWeights - 1);}  }
class C{  public static int latestAccessCount(final String host,final long delta){  final Collection<Track> timeList=accessTrack(host);  if (timeList == null)   return 0;  final long time=System.currentTimeMillis() - delta;  int c=0;  for (  final Track l : timeList)   if (l != null && l.getTime() > time)   c++;  return c;}  }
class C{  public NotificationChain basicSetToEndpoint(Endpoint newToEndpoint,NotificationChain msgs){  Endpoint oldToEndpoint=toEndpoint;  toEndpoint=newToEndpoint;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,EipPackage.CHANNEL__TO_ENDPOINT,oldToEndpoint,newToEndpoint);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private boolean isFull(View view,int totalSpanCount){  return getSpanSize(view) == totalSpanCount;}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  private void initOrbAndRootContext(Hashtable<?,?> env) throws NamingException {  org.omg.CORBA.ORB inOrb=null;  String ncIor=null;  if (inOrb == null && env != null) {    inOrb=(org.omg.CORBA.ORB)env.get("java.naming.corba.orb");  }  if (inOrb == null)   inOrb=getDefaultOrb();  String provUrl=null;  if (env != null) {    provUrl=(String)env.get(javax.naming.Context.PROVIDER_URL);  }  if (provUrl != null && !isCorbaUrl(provUrl)) {    ncIor=getStringifiedIor(provUrl);    setOrbAndRootContext(inOrb,ncIor);  } else   if (provUrl != null) {    String insName=initUsingUrl(inOrb,provUrl,env);    if (insName.length() > 0) {      _name=CNNameParser.nameToCosName(parser.parse(insName));      try {        org.omg.CORBA.Object obj=_nc.resolve(_name);        _nc=NamingContextHelper.narrow(obj);        if (_nc == null) {          throw new ConfigurationException(insName + " does not name a NamingContext");        }      } catch (      org.omg.CORBA.BAD_PARAM e) {        throw new ConfigurationException(insName + " does not name a NamingContext");      }catch (      Exception e) {        throw ExceptionMapper.mapException(e,this,_name);      }    }  } else {    if (debug) {      System.err.println("Getting default ORB: " + inOrb + env);    }    setOrbAndRootContext(inOrb,(String)null);  }}  }
class C{  public double splitCritValue(Distribution train,Distribution test){  return 0;}  }
class C{  public FreeDiskSpace(){  this(new File(File.separator));}  }
class C{  public static InstructionGraph create(final ReilGraph graph){  Preconditions.checkNotNull(graph,"Error: graph argument can not be null");  final List<InstructionGraphNode> nodes=new ArrayList<InstructionGraphNode>();  final List<InstructionGraphEdge> edges=new ArrayList<InstructionGraphEdge>();  final HashMap<ReilBlock,InstructionGraphNode> firstNodeMapping=new HashMap<ReilBlock,InstructionGraphNode>();  final HashMap<ReilBlock,InstructionGraphNode> lastNodeMapping=new HashMap<ReilBlock,InstructionGraphNode>();  for (  final ReilBlock block : graph) {    InstructionGraphNode lastNode=null;    final ReilInstruction lastInstruction=Iterables.getLast(block.getInstructions());    for (    final ReilInstruction instruction : block) {      final InstructionGraphNode currentNode=new InstructionGraphNode(instruction);      nodes.add(currentNode);      if (instruction == lastInstruction) {        lastNodeMapping.put(block,currentNode);      }      if (!firstNodeMapping.containsKey(block)) {        firstNodeMapping.put(block,currentNode);      }      if (lastNode != null) {        final InstructionGraphEdge edge=new InstructionGraphEdge(lastNode,currentNode,EdgeType.JUMP_UNCONDITIONAL);        edges.add(edge);        InstructionGraphNode.link(lastNode,currentNode,edge);      }      lastNode=currentNode;    }  }  for (  final ReilBlock block : graph) {    for (    final ReilEdge edge : block.getOutgoingEdges()) {      final InstructionGraphEdge newEdge=new InstructionGraphEdge(lastNodeMapping.get(block),firstNodeMapping.get(edge.getTarget()),edge.getType());      edges.add(newEdge);      InstructionGraphNode.link(lastNodeMapping.get(block),firstNodeMapping.get(edge.getTarget()),newEdge);    }  }  return new InstructionGraph(nodes,edges);}  }
class C{  @Override public synchronized void clear(){  File[] files=mRootDirectory.listFiles();  if (files != null) {    for (    File file : files) {      file.delete();    }  }  mEntries.clear();  mTotalSize=0;  VolleyLog.d("Cache cleared.");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:28.465 -0500",hash_original_method="F02785EB89A3C576418753FA8D7724E3",hash_generated_method="D05FA6BA1BF2FAD8E887D4C5FE8C9DAF") public Canvas lockCanvas(Rect dirty) throws OutOfResourcesException, IllegalArgumentException {  return lockCanvasNative(dirty);}  }
class C{  public static void printUsage(String applicationName,Options options,OutputStream out){  PrintWriter writer=new PrintWriter(out);  HelpFormatter usageFormatter=new HelpFormatter();  usageFormatter.printUsage(writer,80,applicationName,options);  writer.flush();}  }
class C{  private static ThreadContext contextContaining(String key) throws IllegalArgumentException {  if (key == null)   throw new IllegalArgumentException("null key");  for (ThreadContext context=getContext(); context != null; context=context.previous) {    if (key.equals(context.key))     return context;  }  return null;}  }
class C{  public DirectoryResource(UserContext userContext,Directory<InternalType> directory,DirectoryObjectTranslator<InternalType,ExternalType> translator,DirectoryObjectResourceFactory<InternalType,ExternalType> resourceFactory){  this.userContext=userContext;  this.directory=directory;  this.translator=translator;  this.resourceFactory=resourceFactory;}  }
class C{  public void visitParameter(String name,int access){  if (mv != null) {    mv.visitParameter(name,access);  }}  }
class C{  private boolean reachablePathFindOrient(Graph graph,Node a,Node b,Node c,LinkedList<Node> reachable){  Set<Node> cParents=new HashSet<>(graph.getParents(c));  Set<Node> visited=new HashSet<>();  visited.add(b);  visited.add(c);  while (reachable.size() > 0) {    Node x=reachable.removeFirst();    visited.add(x);    List<Node> pathExtensions=graph.getNodesInTo(x,Endpoint.ARROW);    pathExtensions.removeAll(visited);    for (    Node l : pathExtensions) {      if (!graph.isAdjacentTo(l,c)) {        doDdpOrientation(graph,l,a,b,c);        return true;      } else       if (cParents.contains(l)) {        if (graph.getEndpoint(x,l) == Endpoint.ARROW) {          reachable.add(l);        }      }    }  }  return false;}  }
class C{  public void gcspyGatherData(int event,TreadmillDriver tmDriver){  this.allocNursery.gcspyGatherData(tmDriver);}  }
class C{  public LineBreakMeasurer(AttributedCharacterIterator text,FontRenderContext frc){  this(text,BreakIterator.getLineInstance(),frc);}  }
class C{  public Color(int colorInt){  this.red=android.graphics.Color.red(colorInt) / (float)0xFF;  this.green=android.graphics.Color.green(colorInt) / (float)0xFF;  this.blue=android.graphics.Color.blue(colorInt) / (float)0xFF;  this.alpha=android.graphics.Color.alpha(colorInt) / (float)0xFF;}  }
class C{  public void logp(Level level,String sourceClass,String sourceMethod,String msg,Object params[]){  if (!isLoggable(level)) {    return;  }  LogRecord lr=new LogRecord(level,msg);  lr.setSourceClassName(sourceClass);  lr.setSourceMethodName(sourceMethod);  lr.setParameters(params);  doLog(lr);}  }
class C{  public static boolean hasExitBlock(IContainer container){  if (container instanceof BlockNode) {    return ((BlockNode)container).getSuccessors().isEmpty();  } else   if (container instanceof IBlock) {    return true;  } else   if (container instanceof IRegion) {    List<IContainer> blocks=((IRegion)container).getSubBlocks();    return !blocks.isEmpty() && hasExitBlock(blocks.get(blocks.size() - 1));  } else {    throw new JadxRuntimeException(unknownContainerType(container));  }}  }
class C{  public TemporalOMScalingIcon(Object id,int renderType,boolean interpolate,int w,int h,int[] pix,float baseScale){  this(id,renderType,interpolate);  setColorModel(OMRasterObject.COLORMODEL_DIRECT);  setWidth(w);  setHeight(h);  setPixels(pix);  this.baseScale=baseScale;}  }
class C{  public static boolean inVietnameseDict(String word){  return hsVietnameseDict.contains(word);}  }
class C{  public static CommandResult execCommand(List<String> commands,boolean isRoot){  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,true);}  }
class C{  @Override public boolean removeAll(Collection<?> collection){  boolean result=false;  if (size() <= collection.size()) {    Iterator<?> it=iterator();    while (it.hasNext()) {      if (collection.contains(it.next())) {        it.remove();        result=true;      }    }  } else {    Iterator<?> it=collection.iterator();    while (it.hasNext()) {      result=remove(it.next()) || result;    }  }  return result;}  }
class C{  public void load(HttpEntity entity) throws Exception {  contentType=null;  Header type=entity.getContentType();  if (type != null) {    contentType=type.getValue();  }  contentEncoding=null;  Header encoding=entity.getContentEncoding();  if (encoding != null) {    contentEncoding=encoding.getValue();  }  Charset charset=ContentType.getOrDefault(entity).getCharset();  if (charset != null) {    contentCharset=charset.displayName();  }  contentData=EntityUtils.toByteArray(entity);}  }
class C{  public void endPrefixMapping(String prefix) throws org.xml.sax.SAXException {}  }
class C{  private EmrStep buildEmrStepFromAwsStepSummary(StepSummary stepSummary){  EmrStep emrStep=new EmrStep();  emrStep.setId(stepSummary.getId());  emrStep.setStepName(stepSummary.getName());  emrStep.setStatus(stepSummary.getStatus().getState());  return emrStep;}  }
class C{  public void testPublicIdSystemId(){  String expectedName="anEntity";  String expectedPublicID="-//dom4j//DTD sample";  String expectedSystemID="http://www.myorg.org/foo";  String expectedText="<!ENTITY anEntity " + "PUBLIC \"-//dom4j//DTD sample\" " + "\"http://www.myorg.org/foo\" >";  ExternalEntityDecl actual=new ExternalEntityDecl(expectedName,expectedPublicID,expectedSystemID);  assertEquals("name is correct",expectedName,actual.getName());  assertEquals("publicID is correct",expectedPublicID,actual.getPublicID());  assertEquals("systemID is correct",expectedSystemID,actual.getSystemID());  assertEquals("toString() is correct",expectedText,actual.toString());}  }
class C{  private final static byte[] positionToByteArray(Position pos){  BitVector bits=new BitVector();  bits.addBits(0,8);  for (int x=0; x < 8; x++) {    for (int y=0; y < 8; y++) {      int p=pos.getPiece(Position.getSquare(x,y));switch (p) {case Piece.EMPTY:        bits.addBits(0x00,1);      break;case Piece.WKING:    bits.addBits(0x20,6);  break;case Piece.WQUEEN:bits.addBits(0x22,6);break;case Piece.WROOK:bits.addBits(0x16,5);break;case Piece.WBISHOP:bits.addBits(0x14,5);break;case Piece.WKNIGHT:bits.addBits(0x12,5);break;case Piece.WPAWN:bits.addBits(0x06,3);break;case Piece.BKING:bits.addBits(0x21,6);break;case Piece.BQUEEN:bits.addBits(0x23,6);break;case Piece.BROOK:bits.addBits(0x17,5);break;case Piece.BBISHOP:bits.addBits(0x15,5);break;case Piece.BKNIGHT:bits.addBits(0x13,5);break;case Piece.BPAWN:bits.addBits(0x07,3);break;}}}TextIO.fixupEPSquare(pos);boolean ep=pos.getEpSquare() != -1;boolean cs=pos.getCastleMask() != 0;if (!ep && !cs) bits.addBit(false);int specialBits=(ep ? 3 : 0) + (cs ? 4 : 0);while (bits.padBits() != specialBits) bits.addBit(false);if (ep) bits.addBits(Position.getX(pos.getEpSquare()),3);if (cs) {bits.addBit(pos.h8Castle());bits.addBit(pos.a8Castle());bits.addBit(pos.h1Castle());bits.addBit(pos.a1Castle());}if ((bits.length & 7) != 0) throw new RuntimeException();int header=bits.length / 8;if (ep) header|=0x20;if (cs) header|=0x40;byte[] buf=bits.toByteArray();buf[0]=(byte)header;return buf;}  }
class C{  private void initializeLookupTable(double[][] splitPositions,NumberVector query,double p){  final int dimensions=splitPositions.length;  final int bordercount=splitPositions[0].length;  lookup=new double[dimensions][bordercount];  for (int d=0; d < dimensions; d++) {    final double val=query.doubleValue(d);    for (int i=0; i < bordercount; i++) {      lookup[d][i]=Math.pow(splitPositions[d][i] - val,p);    }  }}  }
class C{  public static void evaluateGateToxicity(Gate g){  if (g.get_variable_names().size() == 1) {    String var=g.get_variable_names().get(0);    if (g.get_toxtable().size() == 0) {      ArrayList<Double> toxicity=new ArrayList<Double>();      ArrayList<Double> input_rpu_rows=g.get_inrpus().get(var);      for (int i=0; i < input_rpu_rows.size(); ++i) {        toxicity.add(1.0);      }      g.set_toxicity(toxicity);    } else {      ArrayList<Double> toxicity=new ArrayList<Double>();      ArrayList<Double> input_rpu_rows=g.get_inrpus().get(var);      for (int i=0; i < input_rpu_rows.size(); ++i) {        double incoming_rpu=input_rpu_rows.get(i);        double tox_score=1.0;        if (incoming_rpu < g.get_toxtable().get(0).get_x()) {          tox_score=g.get_toxtable().get(0).get_y();        } else         if (incoming_rpu > g.get_toxtable().get(g.get_toxtable().size() - 1).get_x()) {          tox_score=g.get_toxtable().get(g.get_toxtable().size() - 1).get_y();        } else {          for (int t=0; t < g.get_toxtable().size(); ++t) {            if (incoming_rpu < g.get_toxtable().get(t).get_x()) {              double lower_rpu=Math.log10(g.get_toxtable().get(t - 1).get_x());              double upper_rpu=Math.log10(g.get_toxtable().get(t).get_x());              double lower_tox=g.get_toxtable().get(t - 1).get_y();              double upper_tox=g.get_toxtable().get(t).get_y();              double weight=(Math.log10(incoming_rpu) - lower_rpu) / (upper_rpu - lower_rpu);              double weighted_avg=(lower_tox * (1 - weight)) + (upper_tox * weight);              tox_score=weighted_avg;              break;            }          }        }        if (tox_score > 1.0)         tox_score=1.0;        if (tox_score < 0.01)         tox_score=0.01;        toxicity.add(tox_score);      }      g.set_toxicity(toxicity);    }  }}  }
class C{  public QueryStringDecoderUtil(URI uri){  this(uri,Charset.defaultCharset());}  }
class C{  private int read(byte[] output) throws Exception {  byte[] mBuffer=new byte[BUFFER_SIZE];  byte[] mIvBuffer=new byte[16];  int pos=0;  while (pos < BUFFER_SIZE) {    int size=mInput.read(mBuffer,pos,BUFFER_SIZE - pos);    if (size == -1) {      if (pos == 0)       return -1;      if (pos > 16)       break;      return -1;    }    pos+=size;  }  System.arraycopy(mBuffer,0,mIvBuffer,0,16);  IvParameterSpec ivParameter=new IvParameterSpec(mIvBuffer);  int decodeSize=pos - 16;  try {    mCipher.init(Cipher.DECRYPT_MODE,mKeySpec,ivParameter);    if (mCipher.doFinal(mBuffer,16,decodeSize,output,0) != decodeSize)     throw new IllegalStateException("Wrong block size");  } catch (  Exception ex) {    throw new Exception("Unexpected error while decrypting",ex);  }  return decodeSize;}  }
class C{  public static boolean isDefaultMethod(int flags){  return (flags & AccDefaultMethod) != 0;}  }
class C{  public void testChangeRequestAttribute(){  changeRequestAttribute=new ChangeRequestAttribute();  assertEquals("ChangeRequestAttribute did not construct an attribute with the " + "correct type.",changeRequestAttribute.getAttributeType(),Attribute.CHANGE_REQUEST);}  }
class C{  public static int gender(String gender){  if (gender.equals("M"))   return 1; else   return 3;}  }
class C{  void stop(){  if (eventTracker != null) {    eventTracker.stop();  }  if (customExceptionHandler != null) {    customExceptionHandler.stop();  }  if (logListener != null) {    logListener.stop();  }}  }
class C{  public static String toString(short value){  return Integer.toString(value);}  }
class C{  public static BigdataGraph open(final String file,final boolean create) throws Exception {  final BigdataSail sail=(BigdataSail)BigdataSailFactory.openSail(file,create);  sail.initialize();  return new BigdataGraphEmbedded(sail);}  }
class C{  @Override public void run(){  amIActive=true;  String featureFile=null;  ShapeFile featureShape;  String dataFile=null;  ShapeFile dataShape;  String outputFile=null;  ShapeFile output;  String instructions=null;  int progress;  int previousProgress=0;  int i, n;  int numRecsFeature;  int numRecsData;  boolean blnSelect=true;  double distThreshold=0;  ShapeType featureShapeType;  ShapeType outputShapeType=ShapeType.POLYGON;  GeometryFactory factory=new GeometryFactory();  com.vividsolutions.jts.geom.Geometry g1=null;  com.vividsolutions.jts.geom.Geometry g2=null;  com.vividsolutions.jts.geom.Geometry[] recJTSGeometries=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  outputFile=args[1];  for (i=0; i < args.length; i++) {    if (i == 0) {      if (args[i].toLowerCase().contains("isolate features from")) {        blnSelect=true;      } else       if (args[i].toLowerCase().contains("remove features from")) {        blnSelect=false;      }    } else     if (i == 1) {      featureFile=args[i];    } else     if (i == 2) {      if (args[i].toLowerCase().contains("does not intersect")) {        instructions="notIntersect";      } else       if (args[i].toLowerCase().contains("intersect")) {        instructions="intersect";      } else       if (args[i].toLowerCase().contains("are completely within")) {        instructions="within";      } else       if (args[i].toLowerCase().contains("contains")) {        instructions="contains";      } else       if (args[i].toLowerCase().contains("does not contain")) {        instructions="notContain";      } else       if (args[i].toLowerCase().contains("covers")) {        instructions="covers";      } else       if (args[i].toLowerCase().contains("are covered by")) {        instructions="coveredBy";      } else       if (args[i].toLowerCase().contains("crosses")) {        instructions="crosses";      } else       if (args[i].toLowerCase().contains("touches")) {        instructions="touches";      } else       if (args[i].toLowerCase().contains("does not touch")) {        instructions="notTouch";      } else       if (args[i].toLowerCase().contains("are within a distance of")) {        instructions="distance";      }    } else     if (i == 3) {      dataFile=args[i];    } else     if (i == 4) {      outputFile=args[i];    } else     if (i == 5) {      if (!args[i].equals("not specified")) {        distThreshold=Double.parseDouble(args[i]);      }    }  }  if ((featureFile == null) || (dataFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    featureShape=new ShapeFile(featureFile);    featureShapeType=featureShape.getShapeType();    numRecsFeature=featureShape.getNumberOfRecords();    dataShape=new ShapeFile(dataFile);    numRecsData=dataShape.getNumberOfRecords();    AttributeTable reader=featureShape.getAttributeTable();    int numFields=reader.getFieldCount();    DBFField fields[]=new DBFField[numFields];    for (int a=0; a < reader.getFieldCount(); a++) {      DBFField inputField=reader.getField(a);      fields[a]=inputField;    }    outputShapeType=featureShapeType;    output=new ShapeFile(outputFile,outputShapeType,fields);    output.setProjectionStringFromOtherShapefile(featureShape);    ArrayList<com.vividsolutions.jts.geom.Geometry> inputGeometryList=new ArrayList<>();    com.vividsolutions.jts.geom.Geometry outputGeometry=null;    updateProgress("Loop 1 of 2:",0);    n=0;    for (    ShapeFileRecord record : dataShape.records) {      if (record.getShapeType() != ShapeType.NULLSHAPE) {        recJTSGeometries=record.getGeometry().getJTSGeometries();        for (int a=0; a < recJTSGeometries.length; a++) {          if (recJTSGeometries[a].isValid()) {            inputGeometryList.add(recJTSGeometries[a]);          } else {            System.out.println(record.getRecordNumber() + " is invalid.");          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      n++;      progress=(int)(n * 100.0 / numRecsData);      if (progress != previousProgress) {        previousProgress=progress;        updateProgress("Loop 1 of 2:",progress);      }    }    g1=factory.buildGeometry(inputGeometryList);    inputGeometryList.clear();    previousProgress=0;    if (instructions.equals("intersect")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (g2.intersects(g1)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    } else     if (instructions.equals("notIntersect")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (!g2.intersects(g1)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    } else     if (instructions.equals("within")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (g2.within(g1)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    } else     if (instructions.equals("contains")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (g2.contains(g1)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    } else     if (instructions.equals("notContain")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (!g2.contains(g1)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    } else     if (instructions.equals("covers")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (g2.covers(g1)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    } else     if (instructions.equals("coveredBy")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (g2.coveredBy(g1)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    } else     if (instructions.equals("crosses")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (g2.crosses(g1)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    } else     if (instructions.equals("touches")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (g2.touches(g1)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    } else     if (instructions.equals("notTouch")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (!g2.touches(g1)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    } else     if (instructions.equals("distance")) {      updateProgress("Loop 2 of 2:",0);      n=0;      for (      ShapeFileRecord record : featureShape.records) {        Object[] rec=reader.nextRecord();        if (record.getShapeType() != ShapeType.NULLSHAPE) {          recJTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < recJTSGeometries.length; a++) {            if (recJTSGeometries[a].isValid()) {              inputGeometryList.add(recJTSGeometries[a]);            } else {              System.out.println(record.getRecordNumber() + " is invalid.");            }          }          g2=factory.buildGeometry(inputGeometryList);          inputGeometryList.clear();          if (g2.isWithinDistance(g1,distThreshold)) {            if (blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          } else {            if (!blnSelect) {              output.addRecord(record.getGeometry(),rec);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        progress=(int)(n * 100.0 / numRecsFeature);        if (progress != previousProgress) {          previousProgress=progress;          updateProgress("Loop 2 of 2:",progress);        }      }    }    output.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void addContigFields(SAMFileHeader header){  final SAMSequenceDictionary dic=header.getSequenceDictionary();  for (  final SAMSequenceRecord seq : dic.getSequences()) {    final String astag=(seq.getAttribute(SAMSequenceRecord.ASSEMBLY_TAG) == null) ? "" : (",as=" + seq.getAttribute(SAMSequenceRecord.ASSEMBLY_TAG));    final String md5tag=(seq.getAttribute(SAMSequenceRecord.MD5_TAG) == null) ? "" : (",md5=" + seq.getAttribute(SAMSequenceRecord.MD5_TAG));    final String speciestag=(seq.getAttribute(SAMSequenceRecord.SPECIES_TAG) == null) ? "" : (",species=\"" + seq.getAttribute(SAMSequenceRecord.SPECIES_TAG) + "\"");    addLine(META_STRING + "contig=<ID=\"" + seq.getSequenceName()+ "\",length="+ seq.getSequenceLength()+ astag+ md5tag+ speciestag+ ">");  }}  }
class C{  public int[][] crossTabulation(){  int[] estimatedValues=classify();  Node variable=testData.getVariable(targetVariable.getName());  int varIndex=testData.getVariables().indexOf(variable);  if (variable == null) {    return null;  }  int ncases=testData.getNumRows();  int nvalues=targetVariable.getNumCategories();  int[][] crosstabs=new int[nvalues][nvalues];  for (int i=0; i < nvalues; i++) {    for (int j=0; j < nvalues; j++) {      crosstabs[i][j]=0;    }  }  int numberCorrect=0;  int ntot=0;  for (int i=0; i < ncases; i++) {    int estimatedValue=estimatedValues[i];    int observedValue=testData.getInt(i,varIndex);    if (estimatedValue < 0) {      continue;    }    if (observedValue < 0) {      continue;    }    ntot++;    crosstabs[observedValue][estimatedValue]++;    if (observedValue == estimatedValue) {      numberCorrect++;    }  }  this.percentCorrect=100.0 * ((double)numberCorrect) / ((double)ncases);  this.totalUsableCases=ntot;  return crosstabs;}  }
class C{  public Board(int width,int height,IHex[] data){  this.width=width;  this.height=height;  this.data=new IHex[width * height];  for (int y=0; y < height; y++) {    for (int x=0; x < width; x++) {      this.data[(y * width) + x]=data[(y * width) + x];    }  }}  }
class C{  public boolean canBeShortAddress(int address){  return ((address >= 1) && (address <= 127));}  }
class C{  public void loop(double ellapsedMillis){  for (  SpringSystemListener listener : mListeners) {    listener.onBeforeIntegrate(this);  }  advance(ellapsedMillis);  if (mActiveSprings.isEmpty()) {    mIdle=true;  }  for (  SpringSystemListener listener : mListeners) {    listener.onAfterIntegrate(this);  }  if (mIdle) {    mSpringLooper.stop();  }}  }
class C{  private IllegalStateException error(String message){  return new IllegalStateException(_className + ": " + message);}  }
class C{  public static boolean createNewFolder(File targetFolder){  return delFileOrFolder(targetFolder) && createFolder(targetFolder);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected void writeIndents(int n) throws IOException {  for (int i=0; i < n; i++) {    writeIndent();  }}  }
class C{  public static KMeans explicitPoints(TetradMatrix centers){  KMeans algorithm=new KMeans();  algorithm.centers=centers;  return algorithm;}  }
class C{  int copyType(int srcIndex){  String name=srcPool.getUtf8Info(srcIndex);  String newName=Descriptor.rename(name,classnames);  return destPool.addUtf8Info(newName);}  }
class C{  private static void resetForNextRun(){  for (  Class<?> c : resetList) {    try {      Method m=c.getMethod(RESET_METHOD_NAME);      m.invoke(null);    } catch (    Exception e) {      System.err.println("Failed to reset class " + c.getName());      e.printStackTrace();      System.exit(-1);    }  }}  }
class C{  protected PropertyMethodDeclarationImpl(){  super();}  }
class C{  public void nuevoDetallePrevision(PrevisionVO prevision,DetallePrevisionVO detallePrevision) throws ActionNotAllowedException {  Locale locale=getServiceClient().getLocale();  PistaAuditoriaTransferencias pistaAuditoria=AuditoriaTransferencias.crearPistaAuditoria(ArchivoActions.TRANSFERENCIAS_MODULE_EDICION_PREVISION_TRANSFERENCIA,this);  pistaAuditoria.addDetalleBasico(locale,prevision,TransferenciasConstants.TRANSFERENCIAS_TIPO_EDICION_ADICION_LINEA_DETALLE);  checkPermission(TransferenciasSecurityManager.GESTION_PREVISION_EN_ORGANO_REMITENTE);  verificarPermisosGeneralesTransferencia(prevision);  PrevisionAuthorizationHelper authorizationHelper=getPrevisionAuthorizationHelper();  if (authorizationHelper.puedeSerEditada(prevision)) {    if (StringUtils.isEmpty(detallePrevision.getIdProcedimiento()) && StringUtils.isEmpty(detallePrevision.getIdSerieDestino()))     throw new ActionNotAllowedException(ArchivoErrorCodes.DETALLE_SIN_PROCEDIMIENTO_Y_SERIE); else {      Collection detallesPrevision=_detallePrevisionDBEntity.fetchRowsByCodigoPrevision(prevision.getId());      if (StringUtils.isNotBlank(detallePrevision.getIdProcedimiento())) {        for (Iterator i=detallesPrevision.iterator(); i.hasNext(); )         if (StringUtils.equals(detallePrevision.getIdProcedimiento(),((DetallePrevisionVO)i.next()).getIdProcedimiento()))         throw new PrevisionOperacionNoPermitidaException(ArchivoErrorCodes.EXISTE_LINEA_DETALLE_MISMO_PROCEDIMIENTO);      } else       for (Iterator i=detallesPrevision.iterator(); i.hasNext(); )       if (StringUtils.equals(detallePrevision.getIdSerieDestino(),((DetallePrevisionVO)i.next()).getIdSerieDestino()))       throw new PrevisionOperacionNoPermitidaException(ArchivoErrorCodes.EXISTE_LINEA_DETALLE_MISMA_SERIE);    }    try {      iniciarTransaccion();      ServiceRepository services=ServiceRepository.getInstance(getServiceSession());      GestionSeriesBI seriesBI=services.lookupGestionSeriesBI();      SerieVO serie=null;      InfoBProcedimiento infoProcedimiento=null;      String strProcedimiento=null;      if (!GenericValidator.isBlankOrNull(detallePrevision.getIdProcedimiento())) {        ServiceClient serviceClient=getServiceClient();        Properties params=null;        if ((serviceClient != null) && (StringUtils.isNotEmpty(serviceClient.getEntity()))) {          params=new Properties();          params.put(MultiEntityConstants.ENTITY_PARAM,serviceClient.getEntity());        }        GestorCatalogo catalogoProcedimientos=GestorCatalogoFactory.getConnector(params);        List iProcedimientos=catalogoProcedimientos.recuperarInfoBProcedimientos(new String[]{detallePrevision.getIdProcedimiento()});        IProcedimiento procedimiento=catalogoProcedimientos.recuperarProcedimiento(detallePrevision.getIdProcedimiento());        if (procedimiento != null) {          infoProcedimiento=(InfoBProcedimiento)iProcedimientos.get(0);          strProcedimiento=infoProcedimiento.getNombre();          serie=seriesBI.getSerieProcedimiento(infoProcedimiento.getId());          detallePrevision.setIdSerieDestino(serie.getIdelementocf());          detallePrevision.setCodSistProductor(infoProcedimiento.getCodSistProductor());          detallePrevision.setNombreSistProductor(infoProcedimiento.getNombreSistProductor());        }      } else {        serie=seriesBI.getSerie(detallePrevision.getIdSerieDestino());      }      _detallePrevisionDBEntity.insertRow(detallePrevision);      int nUnidadesInstalacion=prevision.getNumuinstalacion() + detallePrevision.getNumUInstalacion();      _previsionDbEntity.updateNUnidadesInstalacion(prevision.getId(),nUnidadesInstalacion);      _previsionDbEntity.updateEstadoAndFechaEstado(prevision.getId(),EstadoPrevision.ABIERTA.getIdentificador(),new Date());      pistaAuditoria.auditaPrevisionNuevoDetalle(locale,prevision,detallePrevision,serie,strProcedimiento,this);      commit();    } catch (    GestorCatalogoException gce) {      throw new UncheckedArchivoException(gce);    }catch (    NotAvailableException nae) {      throw new UncheckedArchivoException(nae);    }  } else   throw new PrevisionOperacionNoPermitidaException(authorizationHelper.getErrorCode());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @LogMessageDoc(level="ERROR",message="Tried to write to switch {switch} but got {error}",explanation="An I/O error occured while trying to write a " + "static flow to a switch",recommendation=LogMessageDoc.CHECK_SWITCH) private void writeOFMessagesToSwitch(DatapathId dpid,List<OFMessage> messages){  IOFSwitch ofswitch=switchService.getSwitch(dpid);  if (ofswitch != null) {    if (log.isDebugEnabled()) {      log.debug("Sending {} new entries to {}",messages.size(),dpid);    }    ofswitch.write(messages);    ofswitch.flush();  }}  }
class C{  @Override public boolean addressTryCompareAndSwap(ObjectReference objref,Address expected,Address newValue,Word offset,Word unused,int mode){  if (org.jikesrvm.VM.BuildForIA32) {    return Magic.attemptAddress(objref.toObject(),offset.toOffset(),expected,newValue);  } else {    Address oldValue;    do {      oldValue=Magic.prepareAddress(objref,offset.toOffset());      if (oldValue.NE(expected))       return false;    } while (!Magic.attemptAddress(objref,offset.toOffset(),oldValue,newValue));    return true;  }}  }
class C{  @Override public V put(K key,V value){  Object k=maskNull(key);  int h=hash(k);  Entry<K,V>[] tab=getTable();  int i=indexFor(h,tab.length);  for (Entry<K,V> e=tab[i]; e != null; e=e.next) {    if (h == e.hash && eq(k,e.get())) {      V oldValue=e.value;      if (value != oldValue)       e.value=value;      return oldValue;    }  }  modCount++;  Entry<K,V> e=tab[i];  tab[i]=new Entry<K,V>(k,value,queue,h,e);  if (++size >= threshold)   resize(tab.length * 2);  return null;}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof StochasticOscillatorDataset)) {    return false;  }  StochasticOscillatorDataset that=(StochasticOscillatorDataset)obj;  if (!this.xPosition.equals(that.xPosition)) {    return false;  }  return ObjectUtilities.equal(this.data,that.data);}  }
class C{  public boolean isFirstUpload(){  return mFirstUploadRepeat && mRepeatUpload;}  }
class C{  public TungstenProperties createSimpleRuntimeWithXacts(int nTrx) throws Exception {  PipelineConfigBuilder builder=new PipelineConfigBuilder();  builder.setProperty(ReplicatorConf.SERVICE_NAME,"test");  builder.setRole("master");  builder.addPipeline("master","master",null);  builder.addStage("master","dummy","dummy",null);  builder.addComponent("extractor","dummy",DummyExtractor.class);  builder.addProperty("extractor","dummy","nTrx",new Integer(nTrx).toString());  builder.addComponent("applier","dummy",DummyApplier.class);  return builder.getConfig();}  }
class C{  private static boolean containsConflictingInnerClass(String fqName,PsiClass aClass){  final String shortName=ClassUtil.extractClassName(fqName);  if (shortName.equals(aClass.getName()) && !fqName.equals(aClass.getQualifiedName())) {    return true;  }  final PsiClass[] classes=aClass.getInnerClasses();  for (  PsiClass innerClass : classes) {    if (containsConflictingInnerClass(fqName,innerClass)) {      return true;    }  }  return false;}  }
class C{  public RandomAccessData copy() throws IOException {  RandomAccessData copy=new RandomAccessData(size);  writeTo(copy.asOutputStream(),0,size);  return copy;}  }
class C{  static public int cancelOperation(int token){  int canceled=0;synchronized (sWorkQueue) {    Iterator<OperationInfo> it=sWorkQueue.iterator();    while (it.hasNext()) {      if (it.next().token == token) {        it.remove();        ++canceled;      }    }  }  if (AsyncQueryService.localLOGV) {    Log.d(TAG,"cancelOperation(" + token + ") -> "+ canceled);  }  return canceled;}  }
class C{  public void fireRule(Node node) throws Exception {  if (node != null) {    Rule rule=getMatchingRule(node);    if (rule != null) {      Action action=rule.getAction();      if (action != null) {        action.run(node);      }    }  }}  }
class C{  @Override public final boolean isCancelled(){  return s == cancelledSubscription();}  }
class C{  public boolean equalsIgnoreCase(String anotherString){  return (m_length == anotherString.length()) ? str().equalsIgnoreCase(anotherString) : false;}  }
class C{  public PowerHost(int id,RamProvisioner ramProvisioner,BwProvisioner bwProvisioner,long storage,List<? extends Pe> peList,VmScheduler vmScheduler,PowerModel powerModel){  super(id,ramProvisioner,bwProvisioner,storage,peList,vmScheduler);  setPowerModel(powerModel);}  }
class C{  public void sendLine(String line) throws IOException {  checkNotNull(line,"Line cannot be null");  if (finished)   throw new DccException(DccException.Reason.ChatNotConnected,user,"Chat has already finished");synchronized (bufferedWriter) {    log.info(OUTPUT_CHAT_MARKER,">>>" + line);    bufferedWriter.write(line + "\r\n");    bufferedWriter.flush();  }}  }
class C{  private void insertCBSChecks(IR ir,HashMap<BasicBlock,BasicBlock> origToDupMap,HashSet<BasicBlock> exceptionHandlerBlocks){  for (  Map.Entry<BasicBlock,BasicBlock> entry : origToDupMap.entrySet()) {    BasicBlock bb=entry.getKey();    BasicBlock dup=entry.getValue();    if (dup == null) {      if (DEBUG) {        VM.sysWrite("Debug: block " + bb + " was not duplicated\n");      }      continue;    }    if (getFirstInstWithYieldPoint(bb) != null || exceptionHandlerBlocks.contains(bb)) {      BasicBlock checkBB=null;      BasicBlock prev=bb.prevBasicBlockInCodeOrder();      if (VM.VerifyAssertions) {        VM._assert(prev != null);      }      checkBB=new BasicBlock(-1,null,ir.cfg);      ir.cfg.breakCodeOrder(prev,bb);      ir.cfg.linkInCodeOrder(prev,checkBB);      ir.cfg.linkInCodeOrder(checkBB,bb);      if (DEBUG) {        VM.sysWrite("Creating check " + checkBB + " to preceed "+ bb+ " \n");      }      for (Enumeration<BasicBlock> preds=bb.getIn(); preds.hasMoreElements(); ) {        BasicBlock pred=preds.nextElement();        pred.redirectOuts(bb,checkBB,ir);      }      createCheck(checkBB,bb,dup,false,ir);    }  }}  }
class C{  public int[] rowPrediction(int i){  String t=info.get("Threshold");  if (t != null) {    return ThresholdUtils.threshold(rowConfidence(i),t);  } else {    return A.toIntArray(rowConfidence(i));  }}  }
class C{  public IIRSinglePoleDCRemovalFilter(float alpha){  mAlpha=alpha;}  }
class C{  public final void yyreset(java.io.Reader reader){  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  private static float constrain(float amount,float low,float high){  return amount < low ? low : (amount > high ? high : amount);}  }
class C{  public void put(String key,File file) throws FileNotFoundException {  put(key,file,null);}  }
class C{  public void testDeletePathMissingPartially() throws Exception {  create(igfsSecondary,paths(DIR,SUBDIR,SUBSUBDIR),paths(FILE));  create(igfs,paths(DIR),null);  igfs.delete(SUBDIR,true);  checkExist(igfs,DIR);  checkNotExist(igfs,igfsSecondary,SUBDIR,SUBSUBDIR,FILE);}  }
class C{  public void execute(QueryExecution<?>... queryExecutions) throws SortJdbcException, SortQueryException {  EntityContextState ecs=entityContext.beginLoading();  try {    performExecute(queryExecutions);  } catch (  PreparingPersistStatementException x) {    throw new SortQueryException("Error preparing query statement",x);  } finally {    entityContext.endLoading(ecs);  }}  }
class C{  public synchronized boolean isLoggedIn(){  return mAuthenticationResult != null;}  }
class C{  public ConnectorConfiguration(){}  }
class C{  public RestoreRevisionDialog(PanboxClient client,ICSPAPIIntegration apiInt,String shareName){  initComponents();  this.client=client;  this.apiInt=apiInt;  this.shareName=shareName;}  }
class C{  public Annotation(ConstPool cp,CtClass clazz) throws NotFoundException {  this(cp.addUtf8Info(Descriptor.of(clazz.getName())),cp);  if (!clazz.isInterface())   throw new RuntimeException("Only interfaces are allowed for Annotation creation.");  CtMethod methods[]=clazz.getDeclaredMethods();  if (methods.length > 0) {    members=new LinkedHashMap();  }  for (int i=0; i < methods.length; i++) {    CtClass returnType=methods[i].getReturnType();    addMemberValue(methods[i].getName(),createMemberValue(cp,returnType));  }}  }
class C{  private void insertPasswordHistory(DbClient dbClient){  String[] localUsers={"root","sysmonitor","svcuser","proxyuser"};  for (  String user : localUsers) {    PasswordHistory passwordHistory=_passwordUtils.getPasswordHistory(user);    if (passwordHistory == null) {      passwordHistory=new PasswordHistory();      passwordHistory.setId(PasswordUtils.getLocalPasswordHistoryURI(user));      LongMap passwordHash=new LongMap();      String encpassword=null;      if (user.equals("proxyuser")) {        encpassword=_passwordUtils.getEncryptedString("ChangeMe");      } else {        encpassword=_passwordUtils.getUserPassword(user);      }      passwordHash.put(encpassword,0L);      passwordHistory.setUserPasswordHash(passwordHash);      dbClient.createObject(passwordHistory);    }  }}  }
class C{  private void resetNotes(){  if (errorInStatus1) {    if (editMode) {      statusText1.setText(editStatus1);    } else {      statusText1.setText(stdStatus1);    }    errorInStatus1=false;  }  resetNotes2();}  }
class C{  protected Node copyInto(Node n){  super.copyInto(n);  AbstractCharacterData cd=(AbstractCharacterData)n;  cd.nodeValue=nodeValue;  return n;}  }
class C{  public DefaultInfluencingNode(final GraphNode node){  this.node=node;}  }
class C{  public static void findMethodDeclarationsInType(TypeSymbol typeSymbol,Collection<String> methodNames,Set<String> ignoredTypeNames,List<MethodSymbol> result){  if (typeSymbol == null) {    return;  }  if (ignoredTypeNames.contains(typeSymbol.getQualifiedName())) {    return;  }  if (typeSymbol.getEnclosedElements() != null) {    for (    Element element : typeSymbol.getEnclosedElements()) {      if ((element instanceof MethodSymbol) && (methodNames.contains(element.getSimpleName().toString()))) {        result.add((MethodSymbol)element);      }    }  }  if (typeSymbol instanceof ClassSymbol && ((ClassSymbol)typeSymbol).getSuperclass() != null) {    findMethodDeclarationsInType(((ClassSymbol)typeSymbol).getSuperclass().tsym,methodNames,ignoredTypeNames,result);  }  if (result == null) {    if (typeSymbol instanceof ClassSymbol && ((ClassSymbol)typeSymbol).getInterfaces() != null) {      for (      Type t : ((ClassSymbol)typeSymbol).getInterfaces()) {        findMethodDeclarationsInType(t.tsym,methodNames,ignoredTypeNames,result);      }    }  }}  }
class C{  public StorageCenterAPIException(String message,int statusCode,Throwable e){  this(message,e);  this.statusCode=statusCode;}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  public boolean isInternetConnected(){  boolean isConnected;  ConnectivityManager cm=(ConnectivityManager)mContext.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo activeNetwork=cm.getActiveNetworkInfo();  isConnected=(activeNetwork != null) && (activeNetwork.isConnectedOrConnecting());  return isConnected;}  }
class C{  public Tuple2<Integer,Double> asTuple(){  return Tuple.tuple(v1,v2);}  }
class C{  public boolean invokeAutoPopup(@NotNull PsiElement position,char typeChar){  return false;}  }
class C{  public static long defaultCacheBytes(){  return Runtime.getRuntime().maxMemory() / 8;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.IS_SORTED___PRIORITY_1:    setPriority_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  private boolean internalOfferTask(AFrameTask task){synchronized (mFrameTaskQueue) {    return mFrameTaskQueue.offer(task);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static boolean isImplementedSystemMethod(SootMethod method){  return method.getTag(TagImplementedSystemMethods.SYSTEM_OVERRIDE_TAG) != null;}  }
class C{  public static String quote(String s){  StringBuilder buf=new StringBuilder();  for (int i=0; i < s.length(); i++) {    buf.append(quote(s.charAt(i)));  }  return buf.toString();}  }
class C{  public void testDynDoubleSort() throws Exception {  checkSortMissingDefault("dyn_doubledv","-1.3","4.2");}  }
class C{  public static boolean isDot(String string,int position){  boolean isWhitespace=false;  if (position < string.length() && position >= 0) {    isWhitespace=isDot(string.charAt(position));  }  return isWhitespace;}  }
class C{  public SparseGrid2DPortrayal3D(){  this(1.0);}  }
class C{  public void writeData(DataOutput dout) throws IOException {  dout.write(getMessage());}  }
class C{  private CacheClientProxy registerClient(Socket socket,ClientProxyMembershipID proxyId,CacheClientProxy proxy,boolean isPrimary,byte clientConflation,Version clientVersion,long acceptorId,boolean notifyBySubscription) throws IOException, CacheException {  CacheClientProxy l_proxy=proxy;  socket.setTcpNoDelay(true);  socket.setSendBufferSize(CacheClientNotifier.socketBufferSize);  socket.setReceiveBufferSize(CacheClientNotifier.socketBufferSize);  if (logger.isDebugEnabled()) {    logger.debug("CacheClientNotifier: Initialized server-to-client socket with send buffer size: {} bytes and receive buffer size: {} bytes",socket.getSendBufferSize(),socket.getReceiveBufferSize());  }  byte responseByte=Acceptor.SUCCESSFUL_SERVER_TO_CLIENT;  String unsuccessfulMsg=null;  boolean successful=true;  boolean clientIsDurable=proxyId.isDurable();  if (logger.isDebugEnabled()) {    if (clientIsDurable) {      logger.debug("CacheClientNotifier: Attempting to register durable client: {}",proxyId.getDurableId());    } else {      logger.debug("CacheClientNotifier: Attempting to register non-durable client");    }  }  byte epType=0x00;  int qSize=0;  if (clientIsDurable) {    if (l_proxy == null) {      if (isTimedOut(proxyId)) {        qSize=PoolImpl.PRIMARY_QUEUE_TIMED_OUT;      } else {        qSize=PoolImpl.PRIMARY_QUEUE_NOT_AVAILABLE;      }      if (logger.isDebugEnabled()) {        logger.debug("CacheClientNotifier: No proxy exists for durable client with id {}. It must be created.",proxyId.getDurableId());      }      l_proxy=new CacheClientProxy(this,socket,proxyId,isPrimary,clientConflation,clientVersion,acceptorId,notifyBySubscription);      successful=this.initializeProxy(l_proxy);    } else {      if (proxy.isPrimary()) {        epType=(byte)2;      } else {        epType=(byte)1;      }      qSize=proxy.getQueueSize();      if (l_proxy.isPaused()) {        if (CacheClientProxy.testHook != null) {          CacheClientProxy.testHook.doTestHook("CLIENT_PRE_RECONNECT");        }        if (l_proxy.lockDrain()) {          try {            if (logger.isDebugEnabled()) {              logger.debug("CacheClientNotifier: A proxy exists for durable client with id {}. This proxy will be reinitialized: {}",proxyId.getDurableId(),l_proxy);            }            this._statistics.incDurableReconnectionCount();            l_proxy.getProxyID().updateDurableTimeout(proxyId.getDurableTimeout());            l_proxy.reinitialize(socket,proxyId,this.getCache(),isPrimary,clientConflation,clientVersion);            l_proxy.setMarkerEnqueued(true);            if (CacheClientProxy.testHook != null) {              CacheClientProxy.testHook.doTestHook("CLIENT_RECONNECTED");            }          }  finally {            l_proxy.unlockDrain();          }        } else {          unsuccessfulMsg=LocalizedStrings.CacheClientNotifier_COULD_NOT_CONNECT_DUE_TO_CQ_BEING_DRAINED.toLocalizedString();          logger.warn(unsuccessfulMsg);          responseByte=HandShake.REPLY_REFUSED;          if (CacheClientProxy.testHook != null) {            CacheClientProxy.testHook.doTestHook("CLIENT_REJECTED_DUE_TO_CQ_BEING_DRAINED");          }        }      } else {        unsuccessfulMsg=LocalizedStrings.CacheClientNotifier_CACHECLIENTNOTIFIER_THE_REQUESTED_DURABLE_CLIENT_HAS_THE_SAME_IDENTIFIER__0__AS_AN_EXISTING_DURABLE_CLIENT__1__DUPLICATE_DURABLE_CLIENTS_ARE_NOT_ALLOWED.toLocalizedString(new Object[]{proxyId.getDurableId(),proxy});        logger.warn(unsuccessfulMsg);        responseByte=HandShake.REPLY_EXCEPTION_DUPLICATE_DURABLE_CLIENT;      }    }  } else {    CacheClientProxy staleClientProxy=this.getClientProxy(proxyId);    boolean toCreateNewProxy=true;    if (staleClientProxy != null) {      if (staleClientProxy.isConnected() && staleClientProxy.getSocket().isConnected()) {        successful=false;        toCreateNewProxy=false;      } else {        if (logger.isDebugEnabled()) {          logger.debug("CacheClientNotifier: A proxy exists for this non-durable client. It must be closed.");        }        if (staleClientProxy.startRemoval()) {          staleClientProxy.waitRemoval();        } else {          staleClientProxy.close(false,false);          removeClientProxy(staleClientProxy);        }      }    }    if (toCreateNewProxy) {      l_proxy=new CacheClientProxy(this,socket,proxyId,isPrimary,clientConflation,clientVersion,acceptorId,notifyBySubscription);      successful=this.initializeProxy(l_proxy);    }  }  if (!successful) {    l_proxy=null;    responseByte=HandShake.REPLY_REFUSED;    unsuccessfulMsg=LocalizedStrings.CacheClientNotifier_CACHECLIENTNOTIFIER_A_PREVIOUS_CONNECTION_ATTEMPT_FROM_THIS_CLIENT_IS_STILL_BEING_PROCESSED__0.toLocalizedString(new Object[]{proxyId});  }  try {    DataOutputStream dos=new DataOutputStream(new BufferedOutputStream(socket.getOutputStream()));    writeMessage(dos,responseByte,unsuccessfulMsg,clientVersion,epType,qSize);  } catch (  IOException ioe) {    if (l_proxy != null) {      boolean keepProxy=l_proxy.close(false,false);      if (!keepProxy) {        removeClientProxy(l_proxy);      }    }    throw ioe;  }  if (unsuccessfulMsg != null && logger.isDebugEnabled()) {    logger.debug(unsuccessfulMsg);  }  if (!clientIsDurable && l_proxy != null && responseByte == Acceptor.SUCCESSFUL_SERVER_TO_CLIENT) {    l_proxy.startOrResumeMessageDispatcher(false);  }  if (responseByte == Acceptor.SUCCESSFUL_SERVER_TO_CLIENT) {    if (logger.isDebugEnabled()) {      logger.debug("CacheClientNotifier: Successfully registered {}",l_proxy);    }  } else {    logger.warn(LocalizedMessage.create(LocalizedStrings.CacheClientNotifier_CACHECLIENTNOTIFIER_UNSUCCESSFULLY_REGISTERED_CLIENT_WITH_IDENTIFIER__0,proxyId));  }  return l_proxy;}  }
class C{  public void createUser(final String name,final String email,final String hashedPassword,final boolean admin){  final String validationErrors=validate(name,email,hashedPassword);  if (validationErrors != null) {    throw new IllegalStateException(validationErrors);  }  if (doesUserExist(name)) {    throw new IllegalStateException("That user name has already been taken");  }  final Connection con=Database.getConnection();  try {    final PreparedStatement ps=con.prepareStatement("insert into ta_users (username, password, email, joined, lastLogin, admin) values (?, ?, ?, ?, ?, ?)");    ps.setString(1,name);    ps.setString(2,hashedPassword);    ps.setString(3,email);    ps.setTimestamp(4,new Timestamp(System.currentTimeMillis()));    ps.setTimestamp(5,new java.sql.Timestamp(System.currentTimeMillis()));    ps.setInt(6,admin ? 1 : 0);    ps.execute();    ps.close();    con.commit();  } catch (  final SQLException sqle) {    if (sqle.getErrorCode() == 30000) {      s_logger.info("Tried to create duplicate user for name:" + name + " error:"+ sqle.getMessage());      throw new IllegalStateException("That user name is already taken");    }    s_logger.log(Level.SEVERE,"Error inserting name:" + name + " email: "+ email+ " pwd: "+ hashedPassword,sqle);    throw new IllegalStateException(sqle.getMessage());  } finally {    DbUtil.closeConnection(con);  }}  }
class C{  public EvaluationStatisticsTableModel(List<EvaluationStatistics> stats){  m_Statistics=stats;  m_Headers=EvaluationStatisticsUtils.headers(stats,true,false);}  }
class C{  @Override public boolean isClosed(){  return rows == null && source == null;}  }
class C{  public Cookie(final String domain,final String name,final String value,final String path,final int maxAge,final boolean secure){  this(domain,name,value,path,null,secure);  if (maxAge < -1) {    throw new IllegalArgumentException("Invalid max age:  " + Integer.toString(maxAge));  }  if (maxAge >= 0) {    setExpiryDate(new Date(System.currentTimeMillis() + maxAge * 1000L));  }}  }
class C{  public boolean contains(String id){  return messageCache.stream().filter(null).findFirst().isPresent();}  }
class C{  public Meteor(final Persistence persistence,final String serverUri){  this(persistence,serverUri,null);}  }
class C{  public void endElement(String ns,String localName,String name) throws org.xml.sax.SAXException {  m_elemStack.pop();  m_currentNode=m_elemStack.isEmpty() ? null : (Node)m_elemStack.peek();}  }
class C{  public NamedEntityTagger(String[] args){  try {    parseArguments(args);    if (indirectory == null) {      try (Scanner sc=new Scanner(System.in)){        StringBuilder sb=new StringBuilder();        while (sc.hasNextLine()) {          sb.append(sc.nextLine());          sb.append('\n');        }        String instring=sb.toString();        TextAnnotation ta=tab.createTextAnnotation(instring);        View view=nerAnnotator.getView(ta);        generateOutput(view,ta,"datafromStdIn");      } catch (      IllegalStateException ise) {      }    } else     if (indirectory.isDirectory()) {      if (outdirectory != null && outdirectory.isDirectory()) {        TextAnnotation ta=tab.createTextAnnotation("John Sampson served on Chevrons board of directorys for three years.");        nerAnnotator.getView(ta);        BlockingQueue<AnnotationJob> jobqueue=new LinkedBlockingQueue<>(max * 2);        TaggerThread[] tts=new TaggerThread[max];        for (int i=0; i < max; i++) {          tts[i]=new TaggerThread(jobqueue);          tts[i].start();        }        System.out.println("Begin processing " + indirectory);        File[] files=indirectory.listFiles();        long start=System.currentTimeMillis();        int count=0;        for (        File file : files) {          File outputfile=new File(outdirectory,file.getName());          jobqueue.put(this.getAnnotationJob(file.toString(),outputfile.toString()));          count++;        }        int gccount=0;        long heapsize=0;        Runtime rt=Runtime.getRuntime();        while (jobqueue.size() > 0) {          Thread.sleep(2000);          gccount++;          rt.gc();          heapsize+=(rt.totalMemory() - rt.freeMemory());        }        heapsize/=gccount;        for (int i=0; i < max; i++) {          tts[i].interrupt();        }        for (int i=0; i < max; i++) {          tts[i].join();        }        long totalread=0;        long totalcompute=0;        long totalwrite=0;        for (int i=0; i < max; i++) {          totalread+=(tts[i].readtime / tts[i].count);          totalcompute+=(tts[i].computetime / tts[i].count);          totalwrite+=(tts[i].writetime / tts[i].count);        }        totalread/=max;        totalcompute/=max;        totalwrite/=max;        System.out.println("Completed " + count + " files in "+ (System.currentTimeMillis() - start)+ " ticks, "+ heapsize+ " average heap size.");        System.out.println("Average time per document: read = " + totalread + ", compute = "+ totalcompute+ ", and write = "+ totalwrite);      } else {        File[] files=indirectory.listFiles();        for (        File file : files) {          String s=InFile.readFileText(file.toString());          TextAnnotation ta=tab.createTextAnnotation(s);          View view=nerAnnotator.getView(ta);          generateOutput(view,ta,file.getName());        }      }    } else {      String s=InFile.readFileText(indirectory.toString());      TextAnnotation ta=tab.createTextAnnotation(s);      View view=nerAnnotator.getView(ta);      generateOutput(view,ta,indirectory.getName());    }  } catch (  Throwable t) {    t.printStackTrace();  } finally {    System.exit(0);  }}  }
class C{  public long skip(long n) throws IOException {  if (n < 0L) {    throw new IllegalArgumentException("skip value is negative");  }synchronized (lock) {    ensureOpen();    long r=n;    while (r > 0) {      if (nextChar >= nChars)       fill();      if (nextChar >= nChars)       break;      if (skipLF) {        skipLF=false;        if (cb[nextChar] == '\n') {          nextChar++;        }      }      long d=nChars - nextChar;      if (r <= d) {        nextChar+=r;        r=0;        break;      } else {        r-=d;        nextChar=nChars;      }    }    return n - r;  }}  }
class C{  public boolean abort() throws LoginException {  if (debug) {    System.out.println("\t\t[SolarisLoginModule]: " + "aborted authentication attempt");  }  if (succeeded == false) {    return false;  } else   if (succeeded == true && commitSucceeded == false) {    succeeded=false;    ss=null;    userPrincipal=null;    UIDPrincipal=null;    GIDPrincipal=null;    supplementaryGroups=new LinkedList<SolarisNumericGroupPrincipal>();  } else {    logout();  }  return true;}  }
class C{  void print(int count){  System.out.print("buffer has ");  System.out.print(bufAvail);  System.out.println(" bytes available");  if (bufAvail < count) {    count=bufAvail;  }  for (int ptr=bufPtr; count > 0; count--) {    int val=(int)buf[ptr++] & 0xff;    System.out.print(" " + Integer.toHexString(val));  }  System.out.println();}  }
class C{  public SizedTextField(){  setPreferredSize(STANDARD_DIMENSION);  setMaximumSize(STANDARD_DIMENSION);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:04.340 -0500",hash_original_method="041DB4B792006075282F7DDDC9E8ADDE",hash_generated_method="A361DE1CBBE16296B41663D63D6C38BE") public int quantityForInt(int value){  return quantityForIntImpl(address,value);}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.openTickPaint,stream);  SerialUtilities.writePaint(this.closeTickPaint,stream);}  }
class C{  private static byte remoteByteMethod(){  return BYTE_VALUE;}  }
class C{  public boolean isExplicitPolicyRequired(){  return explicitPolicyRequired;}  }
class C{  private void createNonTerminalFields(Field f,PDAcroForm form){  if (!f.isTerminal) {    COSArray kids=new COSArray();    for (    Field f2 : allFieldMap.values()) {      if (f2.qualifiedName.indexOf(f.qualifiedName) == 0 && f2.qualifiedName.length() > f.qualifiedName.length() + 1 && !f2.qualifiedName.substring(f.qualifiedName.length() + 1).contains(".")) {        kids.add(f2.field.getCOSObject());        f2.field.getCOSObject().setItem(COSName.PARENT,f.field.getCOSObject());        createNonTerminalFields(f2,form);      }    }    f.field.getCOSObject().setItem(COSName.KIDS,kids);  }}  }
class C{  @Override public boolean hasCapability(Capability<?> capability,@Nullable EnumFacing facing){  return capability == getCapability();}  }
class C{  @SuppressWarnings("BusyWait") private void awaitDiscovery(long nodesCnt) throws InterruptedException {  for (  Ignite g : alive) {    ((TcpDiscoverySpi)g.configuration().getDiscoverySpi()).waitForClientMessagePrecessed();    while (g.cluster().nodes().size() != nodesCnt)     Thread.sleep(10);  }}  }
class C{  public MetricId resolve(final String part){  return new MetricId(extendKey(part),tags);}  }
class C{  public synchronized boolean hasDefaultColor(){  return hasDefaultColor;}  }
class C{  public DEnvironmentVariables(JDialog parent){  this(parent,res.getString("DEnvironmentVariables.Title"),ModalityType.DOCUMENT_MODAL);}  }
class C{  protected void adaptToReplace(){  if (fLength > 0 && fPosition.offset <= fOffset && fOffset + fLength <= fPosition.offset + fPosition.length) {    fPosition.length+=fReplaceLength - fLength;  } else {    if (fLength > 0)     adaptToRemove();    if (fReplaceLength > 0)     adaptToInsert();  }}  }
class C{  protected void uploadAndRegisterTestData(String s3KeyPrefix,List<ManifestFile> manifestFiles) throws Exception {  uploadAndRegisterTestData(s3KeyPrefix,manifestFiles,new ArrayList<String>());}  }
class C{  @Override public boolean hasNext(){  return (next != null);}  }
class C{  public static AnnotationMirror findEffectiveAnnotationInHierarchy(final QualifierHierarchy qualifierHierarchy,final AnnotatedTypeMirror toSearch,final AnnotationMirror top,final boolean canBeEmpty){  AnnotatedTypeMirror source=toSearch;  while (source.getAnnotationInHierarchy(top) == null) {switch (source.getKind()) {case TYPEVAR:      source=((AnnotatedTypeVariable)source).getUpperBound();    break;case WILDCARD:  source=((AnnotatedWildcardType)source).getExtendsBound();break;case INTERSECTION:final AnnotationMirror glb=glbOfBoundsInHierarchy((AnnotatedIntersectionType)source,top,qualifierHierarchy);if (glb == null) {ErrorReporter.errorAbort("AnnotatedIntersectionType has no annotation in hierarchy " + "on any of its supertypes!\n" + "intersectionType="+ source);}return glb;default :if (canBeEmpty) {return null;}ErrorReporter.errorAbort("Unexpected AnnotatedTypeMirror with no primary annotation!\n" + "toSearch=" + toSearch + "\n"+ "top="+ top+ "\n"+ "source="+ source);return null;}}return source.getAnnotationInHierarchy(top);}  }
class C{  public vec3 scaled(float s){  float x=this.m[0];  float y=this.m[1];  float z=this.m[2];  vec3 result=new vec3(x * s,y * s,z * s);  return result;}  }
class C{  public static long[] hashToLongs(char[] data,long seed){  if ((data == null) || (data.length == 0)) {    return null;  }  return hash(data,seed);}  }
class C{  private void defaultConfiguration(){  final URL cfgUrl=U.resolveIgniteUrl(DFLT_CONFIG_PATH);  if (cfgUrl == null) {    error("Failed to resolve default logging config file: " + DFLT_CONFIG_PATH);    return;  }  try (InputStream in=cfgUrl.openStream()){    LogManager.getLogManager().readConfiguration(in);  } catch (  IOException e) {    error("Failed to read logging configuration: " + cfgUrl,e);  }}  }
class C{  void jbInit() throws Exception {  setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);  mainPanel.setLayout(mainLayout);  bOK.setText("Exit");  bOK.addActionListener(this);  info.setBackground(AdempierePLAF.getFieldBackground_Inactive());  southPanel.setLayout(southLayout);  southLayout.setAlignment(FlowLayout.RIGHT);  infoPane.setPreferredSize(new Dimension(400,400));  getContentPane().add(mainPanel);  mainPanel.add(southPanel,BorderLayout.SOUTH);  southPanel.add(bOK,null);  mainPanel.add(infoPane,BorderLayout.CENTER);  infoPane.getViewport().add(info,null);}  }
class C{  private boolean lollipopAndAbove(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP;}  }
class C{  public ActionBarConfig build(){  return new ActionBarConfig(this);}  }
class C{  public static PatternEveryExpr every(PatternExpr inner){  return new PatternEveryExpr(inner);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private State applyPatch(State startState,State patchState){  if (patchState.taskState.stage != startState.taskState.stage) {    ServiceUtils.logInfo(this,"Moving to stage %s",patchState.taskState.stage);    startState.taskState=patchState.taskState;  }  return startState;}  }
class C{  public void stopProxy(){  proxy.stop();}  }
class C{  public void notifySentBytes(int sentBytesCount){  final String methodName="notifySentBytes";  if (sentBytesCount > 0) {    this.lastOutboundActivity=System.currentTimeMillis();  }  log.fine(CLASS_NAME,methodName,"643",new Object[]{new Integer(sentBytesCount)});}  }
class C{  @Override public void parseQuotientByteCode(Vertex state,DataInputStream dataStream,Network network) throws IOException {  float correctness=dataStream.readFloat();  long id=dataStream.readLong();  if (id == 0) {    return;  }  Object[] result=new Object[3];  result[0]=id;  parseArgumentByteCode(result,dataStream,null,network);  id=(Long)result[0];  Vertex element=(Vertex)result[2];  if (element == null) {    return;  }  Relationship relationship=state.addWeakRelationship(Primitive.QUOTIENT,element,correctness);  if (id == 0) {    return;  }  result[0]=id;  result[1]=null;  result[2]=null;  parseArgumentByteCode(result,dataStream,null,network);  id=(Long)result[0];  element=(Vertex)result[2];  if (element == null) {    return;  }  if (element.is(Primitive.PREVIOUS)) {    Vertex meta=network.createTemporyVertex();    relationship.setMeta(meta);    while (id > 0) {      result[0]=id;      result[1]=null;      result[2]=null;      parseArgumentByteCode(result,dataStream,null,network);      id=(Long)result[0];      element=(Vertex)result[2];      if (element != null) {        if (element.is(Primitive.NOT)) {          if (id == 0) {            return;          }          result[0]=id;          result[1]=null;          result[2]=null;          parseArgumentByteCode(result,dataStream,null,network);          id=(Long)result[0];          element=(Vertex)result[2];          if (element == null) {            continue;          }          meta.removeRelationship(Primitive.PREVIOUS,element);        } else {          meta.addRelationship(Primitive.PREVIOUS,element);        }      }    }  }}  }
class C{  public BehaviourAction(final Behaviour behaviour,String userAction,String npcAction){  super(behaviour,userAction,npcAction);}  }
class C{  public static <K>Map<K,Double> normalizeInvert(Map<K,Double> map){  Double maxValue=0.0;  for (  Double v : map.values()) {    if (v > maxValue)     maxValue=v;  }  for (  Map.Entry<K,Double> e : map.entrySet()) {    map.put(e.getKey(),1 - map.get(e.getKey()) / maxValue);  }  return map;}  }
class C{  private Automaton insertionsOf(String s){  List<Automaton> list=new ArrayList<>();  for (int i=0; i <= s.length(); i++) {    Automaton a=Automata.makeString(s.substring(0,i));    a=Operations.concatenate(a,Automata.makeAnyChar());    a=Operations.concatenate(a,Automata.makeString(s.substring(i)));    list.add(a);  }  Automaton a=Operations.union(list);  a=MinimizationOperations.minimize(a,DEFAULT_MAX_DETERMINIZED_STATES);  return a;}  }
class C{  public double classifyInstance(Instance instance) throws Exception {  double[] dist=distributionForInstance(instance);  if (dist == null) {    throw new Exception("Null distribution predicted");  }switch (instance.classAttribute().type()) {case Attribute.NOMINAL:    double max=0;  int maxIndex=0;for (int i=0; i < dist.length; i++) {  if (dist[i] > max) {    maxIndex=i;    max=dist[i];  }}if (max > 0) {return maxIndex;} else {}case Attribute.NUMERIC:return dist[0];default :return -1;}}  }
class C{  public void testMergeListenersWithNamespaces() throws Exception {  String file1="<web-app xmlns=\"http://java.sun.com/xml/ns/javaee\">\r\n" + "   <context-param>\r\n" + "       <param-name>file1-c1</param-name>\r\n"+ "       <param-value>file1-v1</param-value>\r\n"+ "   </context-param>\r\n"+ "\r\n"+ "\r\n"+ "    <listener>\r\n"+ "      <listener-class>file1-lc1</listener-class>\r\n"+ "    </listener>\r\n"+ "\r\n"+ "    <listener>\r\n"+ "      <listener-class>file1-lc2</listener-class>\r\n"+ "    </listener>\r\n"+ "\r\n"+ "\r\n"+ "    <servlet>\r\n"+ "       <servlet-name>file1-S1</servlet-name>\r\n"+ "       <servlet-class>file1-C2</servlet-class>\r\n"+ "       <load-on-startup>file1-los</load-on-startup>\r\n"+ "   </servlet>\r\n"+ "</web-app>\r\n";  String file2="<web-app xmlns=\"http://java.sun.com/xml/ns/javaee\">\r\n" + "   <context-param>\r\n" + "       <param-name>file2-c1</param-name>\r\n"+ "       <param-value>file2-v1</param-value>\r\n"+ "   </context-param>\r\n"+ "\r\n"+ "\r\n"+ "    <listener>\r\n"+ "      <listener-class>file2-lc1</listener-class>\r\n"+ "    </listener>\r\n"+ "\r\n"+ "    <listener>\r\n"+ "      <listener-class>file2-lc2</listener-class>\r\n"+ "    </listener>\r\n"+ "\r\n"+ "\r\n"+ "    <servlet>\r\n"+ "       <servlet-name>file2-S1</servlet-name>\r\n"+ "       <servlet-class>file2-C2</servlet-class>\r\n"+ "       <load-on-startup>file2-los</load-on-startup>\r\n"+ "   </servlet>\r\n"+ "</web-app>\r\n"+ "";  WebXml file1WebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(file1.getBytes("UTF-8")),null);  WebXml file2WebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(file2.getBytes("UTF-8")),null);  WebXmlMerger merger=new WebXmlMerger(file1WebXml);  merger.merge(file2WebXml);  List<Element> ejbRefs=file1WebXml.getElements("listener");  assertEquals(4,ejbRefs.size());  assertEquals(((Listener)ejbRefs.get(0)).getListenerClass(),"file1-lc1");  assertEquals(((Listener)ejbRefs.get(1)).getListenerClass(),"file1-lc2");  assertEquals(((Listener)ejbRefs.get(2)).getListenerClass(),"file2-lc1");  assertEquals(((Listener)ejbRefs.get(3)).getListenerClass(),"file2-lc2");}  }
class C{  private synchronized void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  init(getMask(actions));}  }
class C{  public ErrorConnectionClosedSynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  default String renderClasses(Generator gen,M model){  return gen.onEach(model.getClasses()).collect(joining(dnl()));}  }
class C{  static int addOrSubtract(int a,int b){  return a ^ b;}  }
class C{  public RegularExpressionLiteral createRegularExpressionLiteral(){  RegularExpressionLiteralImpl regularExpressionLiteral=new RegularExpressionLiteralImpl();  return regularExpressionLiteral;}  }
class C{  public DataSet simulateData(int sampleSize,boolean latentDataSaved){  return simulateDataHelper(sampleSize,RandomUtil.getInstance(),latentDataSaved);}  }
class C{  private void checkPausedOrCanceled(State state) throws StopRequest {  if (mService.getControl() == DownloaderService.CONTROL_PAUSED) {    int status=mService.getStatus();switch (status) {case DownloaderService.STATUS_PAUSED_BY_APP:      throw new StopRequest(mService.getStatus(),"download paused");  }}}  }
class C{  public RxMarkdown config(RxMDConfiguration rxMDConfiguration){  mRxMDConfiguration=rxMDConfiguration;  return this;}  }
class C{  public boolean attempt(Word old,Word value){  return false;}  }
class C{  public CGotoModule(final Window parent,final CDebugPerspectiveModel debugPerspectiveModel,final MemoryModule module){  super(String.format("Display module '%s'",module.getName()));  m_parent=parent;  m_debugPerspectiveModel=debugPerspectiveModel;  m_module=module;}  }
class C{  String descriptor(boolean includeThis){  StringBuilder result=new StringBuilder();  result.append("(");  if (includeThis) {    result.append(declaringType.name);  }  for (  TypeId t : parameters.types) {    result.append(t.name);  }  result.append(")");  result.append(returnType.name);  return result.toString();}  }
class C{  public boolean isZoomYEnabled(){  return mZoomYEnabled;}  }
class C{  private void pruneIfNeeded(int neededSpace){  if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes) {    return;  }  if (VolleyLog.DEBUG) {    VolleyLog.v("Pruning old cache entries.");  }  long before=mTotalSize;  int prunedFiles=0;  long startTime=SystemClock.elapsedRealtime();  Iterator<Map.Entry<String,CacheHeader>> iterator=mEntries.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<String,CacheHeader> entry=iterator.next();    CacheHeader e=entry.getValue();    boolean deleted=getFileForKey(e.key).delete();    if (deleted) {      mTotalSize-=e.size;    } else {      VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",e.key,getFilenameForKey(e.key));    }    iterator.remove();    prunedFiles++;    if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes * HYSTERESIS_FACTOR) {      break;    }  }  if (VolleyLog.DEBUG) {    VolleyLog.v("pruned %d files, %d bytes, %d ms",prunedFiles,(mTotalSize - before),SystemClock.elapsedRealtime() - startTime);  }}  }
class C{  public JTextPane(){  super();  EditorKit editorKit=createDefaultEditorKit();  String contentType=editorKit.getContentType();  if (contentType != null && getEditorKitClassNameForContentType(contentType) == defaultEditorKitMap.get(contentType)) {    setEditorKitForContentType(contentType,editorKit);  }  setEditorKit(editorKit);}  }
class C{  public static byte[] encodeInteger(final BigInteger bigInt){  if (bigInt == null) {    throw new NullPointerException("encodeInteger called with null parameter");  }  return encodeBase64(toIntegerBytes(bigInt),false);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:52.749 -0500",hash_original_method="259B1B44CE3EA0D75FAE3A3A31435A4B",hash_generated_method="C6C4C645FD0EAABF29F771E2F97C02E5") @DSVerified @DSSafe(DSCat.UTIL_FUNCTION) public Object decode(Object object) throws DecoderException {  try {    char[] charArray=object instanceof String ? ((String)object).toCharArray() : (char[])object;    return decodeHex(charArray);  } catch (  ClassCastException e) {    throw new DecoderException(e.getMessage());  }}  }
class C{  public synchronized void add(Iterable<SPINStatistics> values){  addSilently(values);  notifyListeners();}  }
class C{  public synchronized String[] childrenValues(){  if (m_Current.children == null) {    return null;  } else {    Vector<TreeNode> kids=m_Current.children;    String[] values=new String[kids.size()];    for (int i=0; i < kids.size(); i++) {      values[i]=kids.elementAt(i).value;    }    return values;  }}  }
class C{  public void testComputeZNaN(){  Geometry linearGeom=read("LINESTRING (0 0, 10 10 10)");  LengthIndexedLine indexedLine=new LengthIndexedLine(linearGeom);  double projIndex=indexedLine.project(new Coordinate(5,5));  Coordinate projPt=indexedLine.extractPoint(projIndex);  assertTrue(Double.isNaN(projPt.z));}  }
class C{  public Matrix4x3f rotateXYZ(float angleX,float angleY,float angleZ){  return rotateXYZ(angleX,angleY,angleZ,this);}  }
class C{  public String option2Name(){  return "";}  }
class C{  public Builder withCounters(Boolean withCounters){  this.withCounters=withCounters;  return this;}  }
class C{  public static final int floorDivide(int n,int d){  return ((n >= 0) ? (n / d) : (((n + 1) / d) - 1));}  }
class C{  public boolean empty(){  return entries.isEmpty();}  }
class C{  private boolean deleteInitiatorGroup(StorageSystem storage,CIMObjectPath igPath) throws Exception {  CIMArgument[] deleteIn=_helper.getDeleteInitiatorMaskingGroup(storage,igPath);  CIMArgument[] deleteOut=new CIMArgument[5];  SmisJob deleteIgJob=new SmisSynchSubTaskJob(null,storage.getId(),SmisConstants.DELETE_GROUP);  _helper.invokeMethodSynchronously(storage,_cimPath.getControllerConfigSvcPath(storage),SmisConstants.DELETE_GROUP,deleteIn,deleteOut,deleteIgJob);  return deleteIgJob.isSuccess();}  }
class C{  public static <K,V>Map<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3,K k4,V v4,K k5,V v5,K k6,V v6){  Map map=of();  map.put(k1,v1);  map.put(k2,v2);  map.put(k3,v3);  map.put(k4,v4);  map.put(k5,v5);  map.put(k6,v6);  return map;}  }
class C{  @Provides @Config("brdaBucket") public static String provideBrdaBucket(@Config("projectId") String projectId){  return projectId + "-icann-brda";}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  VariableStack vars=transformer.getXPathContext().getVarStack();  if (!vars.isLocalSet(m_index)) {    int sourceNode=transformer.getXPathContext().getCurrentNode();    XObject var=getValue(transformer,sourceNode);    transformer.getXPathContext().getVarStack().setLocalVariable(m_index,var);  }}  }
class C{  public void dispose(){  TextureState ts=(TextureState)getLocalRenderState(StateType.Texture);  if (ts == null)   return;  int maxUnit=ts.getMaxTextureIndexUsed();  for (int i=0; i < maxUnit; ++i) {    Texture texture=ts.getTexture(i);    if (texture != null) {      TextureKey tKey=texture.getTextureKey();      if (tKey != null) {        TextureManager.removeFromCache(tKey);      }      List<ByteBuffer> data=texture.getImage().getData();      data.clear();    }  }  TileMeshData tmd=(TileMeshData)getMeshData();  tmd.dispose();}  }
class C{  public static void createF2L(ActivityFacilities facilities,Network network,String path2File){  writeF2L(getF2L(facilities,network),path2File);}  }
class C{  private void resetNetworkVisited(){  for (  Node node : this.network.getNodes().values()) {    DijkstraNodeData data=getData(node);    data.resetVisited();  }}  }
class C{  @Override public String encode(){  return name.substring(0,1);}  }
class C{  public ArraySet(){  mHashes=SupportContainerInternals.EMPTY_INTS;  mArray=SupportContainerInternals.EMPTY_OBJECTS;  mSize=0;}  }
class C{  protected static TLCState STUTTERING_STATE(int number,String modelName){  TLCState state=new TLCState(number,modelName);  state.stuttering=true;  return state;}  }
class C{  public static <T>BigInteger sumOfBigInteger(Iterable<T> iterable,Function<? super T,BigInteger> function){  if (iterable instanceof List) {    return ListIterate.sumOfBigInteger((List<T>)iterable,function);  }  if (iterable != null) {    return IterableIterate.sumOfBigInteger(iterable,function);  }  throw new IllegalArgumentException("Cannot perform an sumOfBigDecimal on null");}  }
class C{  public LocalDate toLocalDate(){  return new LocalDate(getMillis(),getChronology());}  }
class C{  private static void print(Node node,PrintWriter out){  if (node == null) {    return;  }  boolean hasChildren=false;  int type=node.getNodeType();  NodeList children=null;switch (type) {case Node.DOCUMENT_NODE:    children=node.getChildNodes();  if (children != null) {    int numChildren=children.getLength();    for (int i=0; i < numChildren; i++) {      print(children.item(i),out);    }  }break;case Node.ELEMENT_NODE:out.print('<');out.print(node.getNodeName());if (node.hasAttributes()) {NamedNodeMap attrs=node.getAttributes();int len=(attrs != null) ? attrs.getLength() : 0;for (int a=0; a < len; a++) {Attr attr=(Attr)attrs.item(a);out.print(' ');out.print(attr.getNodeName());out.print("=\"");out.print(attr.getValue());out.print('\"');}}children=node.getChildNodes();if (children != null) {int numChildren=children.getLength();hasChildren=(numChildren > 0);if (hasChildren) {out.print('>');}for (int i=0; i < numChildren; i++) {print(children.item(i),out);}} else {hasChildren=false;}if (!hasChildren) {out.print("/>");}break;case Node.ENTITY_REFERENCE_NODE:out.print('&');out.print(node.getNodeName());out.print(';');break;case Node.CDATA_SECTION_NODE:out.print("<![CDATA[");out.print(node.getNodeValue());out.print("]]>");break;case Node.TEXT_NODE:out.print(node.getNodeValue());break;default :if (logger.isDebugEnabled()) {logger.debug("Unknown type: " + type);}}if (type == Node.ELEMENT_NODE && hasChildren) {out.print("</");out.print(node.getNodeName());out.print('>');hasChildren=false;}}  }
class C{  private void simpleAction(IMqttToken token,Bundle data){  if (token != null) {    Status status=(Status)data.getSerializable(MqttServiceConstants.CALLBACK_STATUS);    if (status == Status.OK) {      ((MqttTokenAndroid)token).notifyComplete();    } else {      Exception exceptionThrown=(Exception)data.getSerializable(MqttServiceConstants.CALLBACK_EXCEPTION);      ((MqttTokenAndroid)token).notifyFailure(exceptionThrown);    }  } else {    mqttService.traceError(MqttService.TAG,"simpleAction : token is null");  }}  }
class C{  private int parseCmd(String cmd){  if (cmd == null || cmd.length() < 3)   return ERROR;  int blank=cmd.indexOf(' ');  if (blank < 0)   blank=cmd.length();  if (blank < 3)   return ERROR;  String s=cmd.substring(0,blank);  if (cmd.length() > blank + 1)   arg=cmd.substring(blank + 1,cmd.length()); else   arg=null;  for (int i=0; i < cmds.length; i++) {    if (s.equalsIgnoreCase(cmds[i]))     return i + 1;  }  return ERROR;}  }
class C{  protected Object writeReplace() throws java.io.ObjectStreamException {  return new File(getPath());}  }
class C{  public DeviceAutomator pressBack(){  mDevice.pressBack();  return this;}  }
class C{  public void testNegPos(){  byte aBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  byte bBytes[]={0};  int aSign=-1;  int bSign=0;  byte rBytes[]={-1,1,2,3,3,-6,-15,-24,-40,-49,-58,-67,-6,-15,-23};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.or(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public final boolean contains(TBPar par){  for (int i=0; i < par.size(); i++) {    if (!this.member(par.exprAt(i))) {      return false;    }  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.185 -0400",hash_original_method="5FE14B98FF34A8EF07981FC396043203",hash_generated_method="E33990475C670CF09A261475F9E5CFB0") public static void write(File file,CharSequence data) throws IOException {  write(file,data,Charset.defaultCharset(),false);}  }
class C{  static synchronized void printlnWithTime(long millis,String s){  SimpleDateFormat dateFormat=new SimpleDateFormat("HH:mm:ss");  s=dateFormat.format(new java.util.Date()) + " " + formatTime(millis)+ " "+ s;  System.out.println(s);}  }
class C{  public void intersectWith(TypeSet s2){  if (isUniverse()) {    if (s2.isUniverse())     return;    EnumeratedTypeSet ets2=(EnumeratedTypeSet)s2;    fMembers=new LinkedHashSet<TType>();    fMembers.addAll(ets2.fMembers);  } else   retainAll(s2);}  }
class C{  public static InlineKeyboardMarkupBuilder builder(){  return new InlineKeyboardMarkupBuilder();}  }
class C{  public void updateLogos(Region region,EnvironmentType environment,List<BasicPaymentItem> basicPaymentItems,Size size){  Type listType=new TypeToken<Map<String,String>>(){  }.getType();  Map<String,String> logoMapping=preferences.getMapFromSharedPreferences(Constants.PREFERENCES_LOGO_MAP,context,listType,new HashMap<String,String>());  if (logoMapping == null) {    logoMapping=readInitialLogoMapping();  }  if (logoMapping != null && basicPaymentItems != null) {    for (    BasicPaymentItem product : basicPaymentItems) {      String url=logoMapping.get(product.getId());      if (url == null || !url.equals(product.getDisplayHints().getLogoUrl())) {        getImageFromUrl(region,environment,logoMapping,product,size);      }    }  }}  }
class C{  public URI(String scheme,String schemeSpecificPart,String fragment) throws URISyntaxException {  StringBuilder uri=new StringBuilder();  if (scheme != null) {    uri.append(scheme);    uri.append(':');  }  if (schemeSpecificPart != null) {    ALL_LEGAL_ENCODER.appendEncoded(uri,schemeSpecificPart);  }  if (fragment != null) {    uri.append('#');    ALL_LEGAL_ENCODER.appendEncoded(uri,fragment);  }  parseURI(uri.toString(),false);}  }
class C{  public Collection<QueryIndex> indexes(){  return tbl.indexes();}  }
class C{  static Handler remove(Handler h,Label start,Label end){  if (h == null) {    return null;  } else {    h.next=remove(h.next,start,end);  }  int hstart=h.start.position;  int hend=h.end.position;  int s=start.position;  int e=end == null ? Integer.MAX_VALUE : end.position;  if (s < hend && e > hstart) {    if (s <= hstart) {      if (e >= hend) {        h=h.next;      } else {        h.start=end;      }    } else     if (e >= hend) {      h.end=start;    } else {      Handler g=new Handler();      g.start=end;      g.end=h.end;      g.handler=h.handler;      g.desc=h.desc;      g.type=h.type;      g.next=h.next;      h.end=start;      h.next=g;    }  }  return h;}  }
class C{  public synchronized void reply(SerialReply r){  processForPollReq(r);}  }
class C{  public SecretKey generateSecretKey(KeyGenerator keyGen){  try {    this.keyGen=keyGen;    secretKey=this.keyGen.generateKey();  } catch (  Exception e) {    LOG.error("Error generating Secret Key",e);  }  return secretKey;}  }
class C{  public static <T>T build(Class<T> configClass,String configFile) throws BadConfigException {  ConfigBuilder<T> builder=new ConfigBuilder<>(configClass,configFile);  builder.parse();  builder.validate();  return builder.config;}  }
class C{  public static String translate(String message,Object[] args){  return getExceptionMessage(message,args);}  }
class C{  public void add(LeafAtom atom){  leafChildren.add(atom);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (operator: ");  result.append(operator);  result.append(')');  return result.toString();}  }
class C{  private static String normalize(String s) throws Exception {  boolean needDot=false;  int n=0;  for (  char c : s.toCharArray()) {    if (c == ' ')     n++; else     n=-10000;  }  if (n == 1)   return "SPACE"; else   if (n > 1)   return "" + n + "SPACE";  StringBuilder sb=new StringBuilder();  int dotpos=-1;  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);    if (Character.isLetter(c) || Character.isDigit(c) || c == '{' || c == '}') {      if (needDot) {        if (sb.length() <= MAXLEN)         dotpos=sb.length();        sb.append(".");      }      sb.append(c);      needDot=false;    } else {      needDot=true;    }  }  if (sb.length() == 0) {    if (s.contains("*") && s.contains("\n")) {      return "STARNN";    }    for (    char c : s.toCharArray()) {switch (c) {case '*':        return "STAR";case ',':      return "COMMA";case '.':    return "PERIOD";case '\n':  return "NEWLINE";case '(':return "LPARAM";case ')':return "RPARAM";case ':':return "COLON";case '\'':case '"':return "QUOTE";}}throw new Exception("Unnamed char: [" + s + "]");}if (needDot) sb.append('.');String res=sb.toString();if (res.length() > MAXLEN) {if (dotpos < 0) throw new Exception("No dot all over? " + s);return res.substring(0,dotpos);} else {return res;}}  }
class C{  public void testNoExtraSpeedsPresent(){  java.util.Enumeration<String> e=map.getSpeedIterator();  String name;  check:   while (e.hasMoreElements()) {    name=e.nextElement();    for (    String test : speeds) {      if (test.equals(name))       continue check;    }    Assert.fail("Speed name \"" + name + "\" not recognized");  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  void checkLabel(final Label label,final boolean checkVisited,final String msg){  if (label == null) {    throw new IllegalArgumentException("Invalid " + msg + " (must not be null)");  }  if (checkVisited && labels.get(label) == null) {    throw new IllegalArgumentException("Invalid " + msg + " (must be visited first)");  }}  }
class C{  public void writeParameter(String wrapperName,String id,int dimension,XMLWriter writer){  Parameter parameter=options.getParameter(id);  writer.writeOpenTag(wrapperName);  writeParameter(parameter,dimension,writer);  writer.writeCloseTag(wrapperName);}  }
class C{  private void loadContact(){  getSupportLoaderManager().restartLoader(0,null,this);}  }
class C{  public void clear(){  edit().clear().apply();}  }
class C{  protected Table __union(Table t,int offset){  offset+=bb_pos;  t.bb_pos=offset + bb.getInt(offset);  t.bb=bb;  return t;}  }
class C{  public void removeListener(final IDebuggerTemplateManagerListener listener){  listeners.removeListener(listener);}  }
class C{  public static String encodeBytes(byte[] source,int off,int len){  return encodeBytes(source,off,len,NO_OPTIONS);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public XmlBlob(ElementKey<?,? extends XmlBlob> key){  super(key);}  }
class C{  private double loglikelihoodAnomalous(DBIDs anomalousObjs){  int n=anomalousObjs.size();  return n * Math.log(1.0 / n);}  }
class C{  public ResumeThreadReply(final int packetId,final int errorCode,final long threadId){  super(packetId,errorCode);  this.threadId=threadId;}  }
class C{  public TeXParser(boolean isPartial,String parseString,ArrayOfAtoms aoa,boolean firstpass){  this(isPartial,parseString,(TeXFormula)aoa,firstpass);  arrayMode=true;}  }
class C{  @SuppressWarnings("unchecked") public <T>T newBean(Class<T> clazz){  return newBean(beanManager,clazz);}  }
class C{  public void testBlockCommentWithSemicolon() throws IOException {  final InputStream stream=this.getStream(R.raw.block_comment_with_semicolon);  List<String> commands=SqlParser.parse(stream);  assertEquals(1,commands.size());  assertEquals(sql1,commands.get(0));}  }
class C{  @Override public void visitTypeParameter(JCTypeParameter tree){  TypeVar a=(tree.type != null) ? (TypeVar)tree.type : new TypeVar(tree.name,env.info.scope.owner,syms.botType);  tree.type=a;  if (chk.checkUnique(tree.pos(),a.tsym,env.info.scope)) {    env.info.scope.enter(a.tsym);  }  result=a;}  }
class C{  public void initQuantum8x8(){  for (int i=0; i < NJPEG; i++) {    for (int j=0; j < NJPEG; j++) {      this.Quantum[i][j]=1 + ((1 + i + j) * QUALITY);    }  }}  }
class C{  public Bundle toBundle(){  return new Bundle(bundle);}  }
class C{  @Override @Deprecated public boolean awaitTermination(long l,TimeUnit timeUnit) throws InterruptedException {  throw new UnsupportedOperationException();}  }
class C{  public void allowDetachToRelease(boolean allowRelease){  m_allowRelease=allowRelease;}  }
class C{  public SmbFile(String context,String name,NtlmPasswordAuthentication auth,int shareAccess) throws MalformedURLException {  this(new URL(new URL(null,context,Handler.SMB_HANDLER),name,Handler.SMB_HANDLER),auth);  if ((shareAccess & ~(FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE)) != 0) {    throw new RuntimeException("Illegal shareAccess parameter");  }  this.shareAccess=shareAccess;}  }
class C{  public void run(){  ServerSocket theServer=server;  if (theServer == null)   return;  try {    while (true) {      Socket socket=theServer.accept();      socketPool.addSocket(socket);      runIncomingCommandHandler(socket);    }  } catch (  IOException e) {    if (thread != null || server != null) {      RemoteCommandPlugin.log("Error occurred while handling local command server.",e);    }  } finally {    try {      theServer.close();    } catch (    IOException e) {    }  }}  }
class C{  public static boolean isStatusServerError(int status){  return (status >= 500 && status < 600);}  }
class C{  public CassandraPaths(final String version){  root=Paths.get("apache-cassandra-" + version);}  }
class C{  private SubMap<K,V> newSubMap(K fromKey,boolean fromInclusive,K toKey,boolean toInclusive){  if (isDescending) {    K tk=fromKey;    fromKey=toKey;    toKey=tk;    boolean ti=fromInclusive;    fromInclusive=toInclusive;    toInclusive=ti;  }  if (lo != null) {    if (fromKey == null) {      fromKey=lo;      fromInclusive=loInclusive;    } else {      int c=m.compare(fromKey,lo);      if (c < 0 || (c == 0 && !loInclusive && fromInclusive))       throw new IllegalArgumentException("key out of range");    }  }  if (hi != null) {    if (toKey == null) {      toKey=hi;      toInclusive=hiInclusive;    } else {      int c=m.compare(toKey,hi);      if (c > 0 || (c == 0 && !hiInclusive && toInclusive))       throw new IllegalArgumentException("key out of range");    }  }  return new SubMap<K,V>(m,fromKey,fromInclusive,toKey,toInclusive,isDescending);}  }
class C{  public SignerInformationStore generateCounterSigners(SignerInformation signer,Provider sigProvider) throws NoSuchAlgorithmException, CMSException {  return this.generate(null,new CMSProcessableByteArray(signer.getSignature()),false,sigProvider).getSignerInfos();}  }
class C{  private static PublicKey generatePublicKey(String encodedPublicKey){  try {    byte[] decodedKey=Base64.decode(encodedPublicKey);    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }catch (  Base64DecoderException e) {    Log.e(TAG,"Could not decode from Base64.");    throw new IllegalArgumentException(e);  }catch (  InvalidKeySpecException e) {    Log.e(TAG,"Invalid key specification.");    throw new IllegalArgumentException(e);  }}  }
class C{  @AntDoc("A module to test") public void addConfiguredModule(Module module){  this.moduleSet.addConfiguredModule(module);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:44.515 -0500",hash_original_method="8D5680EC06296245D4F0DE9A90486B91",hash_generated_method="38682CD78A90AEDA2EE3A2281092DE61") public boolean isHidden(){  return true;}  }
class C{  private void updateView(){  if (rebuildItems()) {    calculateLayoutWidth(getWidth(),MeasureSpec.EXACTLY);    layout(getWidth(),getHeight());  }}  }
class C{  private synchronized static Datastore createDatastore(){  if (dataStore == null) {    Morphia m=new Morphia();    String mongoName=KrakenConfig.getProperty("kraken.mongodb.dbname");    dataStore=m.createDatastore(getMongo(mongoName),mongoName);    m.map(Customer.class);    m.map(Project.class);    m.map(Attribute.class);    m.map(Dimension.class);    m.map(Domain.class);    m.map(ProjectFacetJob.class);    m.map(Metric.class);    m.map(Client.class);    m.map(User.class);    m.map(UserGroup.class);    m.map(ProjectAnalysisJob.class);    m.map(AccessToken.class);    m.map(Relation.class);    m.map(Annotation.class);    m.map(ProjectUser.class);    m.map(State.class);    m.map(Shortcut.class);    try {      dataStore.ensureIndexes();    } catch (    Exception e) {      throw new RuntimeException(e.getMessage(),e);    }  }  return dataStore;}  }
class C{  public HeldLocksGrant(BigInteger grantId,long creationDateMs,long expirationDateMs,SortedLockCollection<LockDescriptor> lockMap,TimeDuration lockTimeout,@Nullable Long versionId){  this.grantId=Preconditions.checkNotNull(grantId);  this.creationDateMs=creationDateMs;  this.expirationDateMs=expirationDateMs;  this.lockMap=lockMap;  this.lockTimeout=SimpleTimeDuration.of(lockTimeout);  this.versionId=versionId;  Preconditions.checkArgument(!this.lockMap.isEmpty());}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.shape=SerialUtilities.readShape(stream);  this.fillPaint=SerialUtilities.readPaint(stream);  this.outlinePaint=SerialUtilities.readPaint(stream);  this.outlineStroke=SerialUtilities.readStroke(stream);  this.line=SerialUtilities.readShape(stream);  this.linePaint=SerialUtilities.readPaint(stream);  this.lineStroke=SerialUtilities.readStroke(stream);}  }
class C{  public ZipfDistr(double shape,int population){  if (shape <= 0.0) {    throw new IllegalArgumentException("Mean must be greated than 0.0 and population greater than 0");  }  numGen=new Random(System.currentTimeMillis());  this.shape=shape;  computeDen(shape,population);}  }
class C{  private List addNodeToList(int startIndexForNode,int endIndexForNode){  List localvmList=new ArrayList();  for (int i=startIndexForNode; i < endIndexForNode; i++) {    localvmList.add(vm[i]);  }  return localvmList;}  }
class C{  @Override public KeywordObject copy(){  return new KeywordObject(this);}  }
class C{  @Override public int size(){  return this._map.size();}  }
class C{  TokenInfo(String text,String rawText,String type,int start,int end,int position,boolean match){  this.text=text;  this.rawText=rawText;  this.type=type;  this.start=start;  this.end=end;  this.position=position;  this.match=match;}  }
class C{  public Vertex evaluateDIVIDE(Vertex expression,List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network,long startTime,long maxTime,int stack){  if (!checkArguments(expression,arguments,2,network)) {    return network.createVertex(Primitive.NULL);  }  Vertex left=evaluateExpression(arguments.get(0).getTarget(),variables,network,startTime,maxTime,stack);  Vertex right=evaluateExpression(arguments.get(1).getTarget(),variables,network,startTime,maxTime,stack);  if ((left.getData() instanceof Number) && (right.getData() instanceof Number)) {    return new org.botlibre.tool.Math().instance.divide(expression,left,right);  }  expression.getNetwork().getBot().log(this,"Invalid numbers for operation",Level.WARNING,expression,left,right);  return network.createVertex(Primitive.NULL);}  }
class C{  public void clear(){  log.debug("Clearing scheduling service");  timeHandleMap.clear();  nearestTime=null;}  }
class C{  protected void deleteDevice(Device device){  ArrayList<Entity> emptyToKeep=new ArrayList<Entity>();  for (  Entity entity : device.getEntities()) {    this.removeEntity(entity,device.getEntityClass(),device.getDeviceKey(),emptyToKeep);  }  if (!deviceMap.remove(device.getDeviceKey(),device)) {    if (logger.isDebugEnabled())     logger.debug("device map does not have this device -" + device.toString());  }}  }
class C{  static String formatThousandthsOfMinute(int thousandthsOfMinute){  int minutes=thousandthsOfMinute / 1000;  int thousandths=thousandthsOfMinute - minutes * 1000;  return minutes + "." + thousandths;}  }
class C{  public boolean hasAdditionalName(){  return super.hasElement(AdditionalName.KEY);}  }
class C{  public static boolean bernoulli(double p){  return uniform() < p;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:14.634 -0500",hash_original_method="73134044CD530D6AE99976E01BA5E625",hash_generated_method="73134044CD530D6AE99976E01BA5E625") float nextTab(float h){  if (mTabs != null) {    return mTabs.nextTab(h);  }  return TabStops.nextDefaultStop(h,TAB_INCREMENT);}  }
class C{  public static boolean isLocalAssetUri(@Nullable Uri uri){  final String scheme=getSchemeOrNull(uri);  return LOCAL_ASSET_SCHEME.equals(scheme);}  }
class C{  public DateTime withLaterOffsetAtOverlap(){  long newMillis=getZone().adjustOffset(getMillis(),true);  return withMillis(newMillis);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public Object nextValue() throws JSONException {  int c=nextCleanInternal();switch (c) {case -1:    throw syntaxError("End of input");case '{':  return readObject();case '[':return readArray();case '\'':case '"':return nextString((char)c);default :pos--;return readLiteral();}}  }
class C{  public static void createSnapshot(OutputStream os) throws IOException {  MethodGroup[] methods_=null;synchronized (globalLock) {    methods_=new MethodGroup[methodCount];    for (int i=0; i < methodCount; i++) {      methods_[i]=new MethodGroup(globalMethods[i]);    }    for (    ThreadProfiler ti : globalThreadInfos.values()) {      if (ti.thread.isAlive()) {        exitWholeStack(ti,methods_);      }    }    BufferedOutputStream bos=new BufferedOutputStream(os);    DataOutputStream dos=new DataOutputStream(bos);    serialize(dos,methods_);    dos.flush();  }}  }
class C{  public void stopTicker(){  tickerRunning=false;  setShiftText(0);  deregisterAnimatedInternal();}  }
class C{  public LoadDataAction(DataEditor editor){  super("Load Data...");  if (editor == null) {    throw new NullPointerException("Data Editor must not be null.");  }  this.dataEditor=editor;}  }
class C{  public static final void sort(int[] a,Object[] b,int begin,int end){  int length=end - begin;  if (length < SORT_THRESHOLD) {    insertionsort(a,b,begin,end - 1);    return;  }  int[] ks=new int[length];  Object[] vs=new Object[length];  for (int i=0, idx=begin; i < length; ++i, ++idx) {    ks[i]=a[idx];    vs[i]=b[idx];  }  mergesort(ks,a,vs,b,begin,end,-begin);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.BLOCK__STATEMENTS:    return getStatements();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void deleteAttributes(){  ListSelectorDialog dialog;  DataSortedTableModel model;  Object[] atts;  int[] indices;  int i;  JList list;  int result;  list=new JList(getAttributes());  dialog=new ListSelectorDialog(null,list);  result=dialog.showDialog();  if (result != ListSelectorDialog.APPROVE_OPTION) {    return;  }  atts=list.getSelectedValues();  if (ComponentHelper.showMessageBox(getParent(),"Confirm...","Do you really want to delete these " + atts.length + " attributes?",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE) != JOptionPane.YES_OPTION) {    return;  }  model=(DataSortedTableModel)m_TableData.getModel();  indices=new int[atts.length];  for (i=0; i < atts.length; i++) {    indices[i]=model.getAttributeColumn(atts[i].toString());  }  setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  model.deleteAttributes(indices);  setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));}  }
class C{  InitSecContextToken(Krb5Context context,Krb5AcceptCredential cred,InputStream is) throws IOException, GSSException, KrbException {  int tokenId=((is.read() << 8) | is.read());  if (tokenId != Krb5Token.AP_REQ_ID)   throw new GSSException(GSSException.DEFECTIVE_TOKEN,-1,"AP_REQ token id does not match!");  byte[] apReqBytes=new sun.security.util.DerValue(is).toByteArray();  InetAddress addr=null;  if (context.getChannelBinding() != null) {    addr=context.getChannelBinding().getInitiatorAddress();  }  apReq=new KrbApReq(apReqBytes,cred,addr);  EncryptionKey sessionKey=apReq.getCreds().getSessionKey();  EncryptionKey subKey=apReq.getSubKey();  if (subKey != null) {    context.setKey(Krb5Context.INITIATOR_SUBKEY,subKey);  } else {    context.setKey(Krb5Context.SESSION_KEY,sessionKey);  }  OverloadedChecksum gssChecksum=new OverloadedChecksum(context,apReq.getChecksum(),sessionKey,subKey);  gssChecksum.setContextFlags(context);  Credentials delegCred=gssChecksum.getDelegatedCreds();  if (delegCred != null) {    Krb5CredElement credElement=Krb5InitCredential.getInstance((Krb5NameElement)context.getSrcName(),delegCred);    context.setDelegCred(credElement);  }  Integer apReqSeqNumber=apReq.getSeqNumber();  int peerSeqNumber=(apReqSeqNumber != null ? apReqSeqNumber.intValue() : 0);  context.resetPeerSequenceNumber(peerSeqNumber);  if (!context.getMutualAuthState())   context.resetMySequenceNumber(peerSeqNumber);  context.setAuthTime(new KerberosTime(apReq.getCreds().getAuthTime()).toString());  context.setTktFlags(apReq.getCreds().getFlags());  AuthorizationData ad=apReq.getCreds().getAuthzData();  if (ad == null) {    context.setAuthzData(null);  } else {    AuthorizationDataEntry[] authzData=new AuthorizationDataEntry[ad.count()];    for (int i=0; i < ad.count(); i++) {      authzData[i]=new AuthorizationDataEntry(ad.item(i).adType,ad.item(i).adData);    }    context.setAuthzData(authzData);  }}  }
class C{  @Override public boolean input(Instance instance) throws Exception {  if (getInputFormat() == null)   throw new IllegalStateException("No input instance format defined");  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  if (isFirstBatchDone()) {    push(instance);    return true;  } else {    bufferInput(instance);    return false;  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void rotateImage(int degrees){  Matrix matrix=new Matrix();  matrix.postRotate(degrees);  mBitmap=Bitmap.createBitmap(mBitmap,0,0,mBitmap.getWidth(),mBitmap.getHeight(),matrix,true);  setImageBitmap(mBitmap);  mDegreesRotated+=degrees;  mDegreesRotated=mDegreesRotated % 360;}  }
class C{  public SerialNumber(DerInputStream in) throws IOException {  DerValue derVal=in.getDerValue();  construct(derVal);}  }
class C{  public void stopped(long startOfRestMs){  this.startOfRestMs=startOfRestMs;}  }
class C{  public PriorityQueue(){  this(DEFAULT_CAPACITY);}  }
class C{  public boolean fromZygote(){  return parent != null && parent.name.equals("zygote") && !name.equals("com.android.development");}  }
class C{  public int stem(char s[],int len){  len=removeCase(s,len);  len=removePossessives(s,len);  if (len > 0) {    len=normalize(s,len);  }  return len;}  }
class C{  private void log(int level,Object message){  String out;  if (showStackTrace() && (message instanceof Throwable || message instanceof Exception)) {    out=StringUtils.stackTrace((Throwable)message);  } else {    out=message.toString();  }  logSystem.logVelocityMessage(level,out);}  }
class C{  public boolean isPassword(String password){  if (TextUtils.isEmpty(password)) {    mPassword.error("Password cannot be null !");    return false;  }  String pattern="(?!^(\\d+|[a-zA-Z]+|[!%&@#$^_.]+)$)^[\\w!%&@#$^_.]{6,18}+$";  if (password.matches(pattern)) {    return true;  } else {    mPassword.error("Illegal Password Input !");    return false;  }}  }
class C{  public JBBPOut Short(final int value) throws IOException {  assertNotEnded();  if (this.processCommands) {    _writeShort(value);  }  return this;}  }
class C{  public long[] keys(){  long[] keys=new long[size()];  long[] k=_set;  byte[] states=_states;  for (int i=k.length, j=0; i-- > 0; ) {    if (states[i] == FULL) {      keys[j++]=k[i];    }  }  return keys;}  }
class C{  public ClusterGroupEmptyCheckedException(String msg,@Nullable Throwable cause){  super(msg,cause);}  }
class C{  public GroupDescription.Basic parse(String id) throws UnprocessableEntityException {  GroupDescription.Basic group=parseId(id);  if (group == null || !groupControlFactory.controlFor(group).isVisible()) {    throw new UnprocessableEntityException(String.format("Group Not Found: %s",id));  }  return group;}  }
class C{  private void handleStringOrClass(MethodOrMethodContext momc,AssignStmt assignStmt,PrimVAModel fieldPrimVAModel,Context context,boolean debug){  Set<? extends IAllocNode> rhsNodes;  if (assignStmt.getRightOp() instanceof Constant) {    Set<IAllocNode> nodes=new HashSet<IAllocNode>();    IAllocNode node=PTABridge.v().getAllocNode(assignStmt.getRightOp(),context);    nodes.add(node);    rhsNodes=nodes;  } else {    rhsNodes=PTABridge.v().getPTSet(assignStmt.getRightOp(),context);  }  if (fieldPrimVAModel instanceof ClassVAModel)   handleClassFieldValue((ClassVAModel)fieldPrimVAModel,rhsNodes); else   if (fieldPrimVAModel instanceof StringVAModel)   handleStringFieldValue((StringVAModel)fieldPrimVAModel,rhsNodes,debug);}  }
class C{  @Override public void process(DistributionMessage message){  try {    this.response=(AdminResponse)message;  }  finally {    super.process(message);  }}  }
class C{  protected void fireItemStateChanged(ItemEvent event){  Object[] listeners=listenerList.getListenerList();  ItemEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ItemListener.class) {      if (e == null) {        e=new ItemEvent(AbstractButton.this,ItemEvent.ITEM_STATE_CHANGED,AbstractButton.this,event.getStateChange());      }      ((ItemListener)listeners[i + 1]).itemStateChanged(e);    }  }  if (accessibleContext != null) {    if (event.getStateChange() == ItemEvent.SELECTED) {      accessibleContext.firePropertyChange(AccessibleContext.ACCESSIBLE_STATE_PROPERTY,null,AccessibleState.SELECTED);      accessibleContext.firePropertyChange(AccessibleContext.ACCESSIBLE_VALUE_PROPERTY,Integer.valueOf(0),Integer.valueOf(1));    } else {      accessibleContext.firePropertyChange(AccessibleContext.ACCESSIBLE_STATE_PROPERTY,AccessibleState.SELECTED,null);      accessibleContext.firePropertyChange(AccessibleContext.ACCESSIBLE_VALUE_PROPERTY,Integer.valueOf(1),Integer.valueOf(0));    }  }}  }
class C{  public IntTag(int value){  super(TagType.INT);  this.value=value;}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public synchronized String nextString(){  try {    return current=reader.readLine();  } catch (  NullPointerException e) {    System.err.println("NullPointerException: " + filename + ':'+ current);    throw e;  }catch (  IOException e) {    System.err.println("Exception: " + e);    return null;  }}  }
class C{  protected void Argument() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  appendOp(2,OpCodes.OP_ARGUMENT);  Expr();  m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);}  }
class C{  public void testGetPublicId() throws Throwable {  Document doc;  DocumentType docType;  String publicId;  doc=(Document)load("staffNS",builder);  docType=doc.getDoctype();  publicId=docType.getPublicId();  assertEquals("throw_Equals","STAFF",publicId);}  }
class C{  private int parseChar() throws IOException {  while (_chunkLength <= 0) {    if (_isLastChunk)     return -1;    int code=read();switch (code) {case 's':case 'x':      _isLastChunk=false;    _chunkLength=(read() << 8) + read();  break;case 'S':case 'X':_isLastChunk=true;_chunkLength=(read() << 8) + read();break;default :throw expect("string",code);}}_chunkLength--;return parseUTF8Char();}  }
class C{  public Relation createRestriction(Way fromWay,OsmElement viaElement,Way toWay,String restriction_type){  createCheckpoint(R.string.undo_action_create_relation);  Relation restriction=getDelegator().createAndInsertRelation(null);  SortedMap<String,String> tags=new TreeMap<String,String>();  tags.put("restriction",restriction_type == null ? "" : restriction_type);  tags.put("type","restriction");  getDelegator().setTags(restriction,tags);  RelationMember from=new RelationMember("from",fromWay);  getDelegator().addElementToRelation(from,restriction);  RelationMember via=new RelationMember("via",viaElement);  getDelegator().addElementToRelation(via,restriction);  RelationMember to=new RelationMember("to",toWay);  getDelegator().addElementToRelation(to,restriction);  return restriction;}  }
class C{  protected GetterDeclarationImpl(){  super();}  }
class C{  public void replaceLocalAddresses(List<String> addresses){  if (addresses == null) {    throw new IllegalArgumentException("list must not be null");  }  this.localAddresses.clear();  this.localAddresses.addAll(addresses);}  }
class C{  public String dontFilterAfterFirstBatchTipText(){  return "Whether to apply the filtering process to instances that " + "are input after the first (training) batch. The default " + "is false so instances in subsequent batches can potentially "+ "get 'consumed' by the filter.";}  }
class C{  public void remove(T object){  int pos;synchronized (mLock) {    pos=getPosition(object);    if (pos == -1)     return;    mObjects.remove(pos);  }  if (mNotifyOnChange)   notifyItemRemoved(pos);}  }
class C{  private static void putNoFlush(SystemPreferenceKey key,String value){  getPrefs().put(key.name(),value);}  }
class C{  public void decrementConsciousnessLevel(){  decrementConsciousnessLevel(1);}  }
class C{  public void completeSnapshot(){  this.lastSnapshot=false;  this.nextSnapshot=false;}  }
class C{  public <T>JsonStringMap<T> createMapDtoFromJson(InputStream json,Class<T> dtoInterface) throws IOException {  return createMapDtoFromJson(new InputStreamReader(json),dtoInterface);}  }
class C{  public void validate(){  validateStructure(m_root);  validateMetrics(m_root);  int freeCount=0;  int freeNode=m_freeList;  while (freeNode != NULL_NODE) {    assert (0 <= freeNode && freeNode < m_nodeCapacity);    freeNode=m_parent[freeNode];    ++freeCount;  }  assert (getHeight() == computeHeight());  assert (m_nodeCount + freeCount == m_nodeCapacity);}  }
class C{  public boolean isMidnightEndOfDay(){  return timeEndOfDay;}  }
class C{  public boolean isHidden() throws SmbException {  if (share == null) {    return false;  } else   if (getUncPath0().length() == 1) {    if (share.endsWith("$")) {      return true;    }    return false;  }  exists();  return (attributes & ATTR_HIDDEN) == ATTR_HIDDEN;}  }
class C{  public SecP256R1Point(ECCurve curve,ECFieldElement x,ECFieldElement y){  this(curve,x,y,false);}  }
class C{  public Map<String,String> fetchPropertyLabels(List<String> properties,Network network,Map<String,Vertex> processed){  log("Fetching properties",Level.FINE,properties);  Map<String,String> values=new HashMap<String,String>(properties.size());  if (properties.isEmpty()) {    return values;  }  int start=0;  int end=50;  while (start < properties.size()) {    List<String> page=properties.subList(start,Math.min(end,properties.size()));    StringWriter writer=new StringWriter();    boolean first=true;    for (    String property : page) {      if (this.excludedProperties.contains(property)) {        continue;      }      if (!first) {        writer.write("|");      } else {        first=false;      }      writer.write(property);    }    String ids=writer.toString();    start=end;    end=end + 50;    if (ids.isEmpty()) {      continue;    }    JSONObject json=null;    String query="https://www.wikidata.org/w/api.php?action=wbgetentities&languages=en&format=json&props=labels&ids=" + ids;    try {      json=(JSONObject)processQuery(query);    } catch (    IOException exception) {      log("https request failed",Level.WARNING,exception.toString());      return values;    }    Object entities=json.get("entities");    if (!(entities instanceof JSONObject)) {      return values;    }    json=(JSONObject)entities;    for (    String property : page) {      String mapping=this.propertiesMap.get(property);      if (mapping != null) {        values.put(property,mapping);      } else {        JSONObject data=json.getJSONObject(property);        if (data.isNullObject()) {          continue;        }        List<String> names=extractText(data.get("labels"));        if (names.size() > 0) {          values.put(property,names.get(0));        }      }    }  }  return values;}  }
class C{  public boolean checkModifiers(MouseEvent e){  return (e.getModifiers() & modifiers) != 0;}  }
class C{  public List<AdapterCommand> diff(@NonNull List<T> newList){  if (newList == null) {    throw new NullPointerException("newList == null");  }  int newSize=newList.size();  if (oldList == null) {    oldList=new ArrayList<>();    oldList.addAll(newList);    List<AdapterCommand> commands=new ArrayList<>(1);    if (newSize == 0 || !itemRangeInsertedOnFirstDiff) {      commands.add(new EntireDataSetChangedCommand());    } else {      commands.add(new ItemRangeInsertedCommand(0,newSize));    }    return commands;  }  if (newList.isEmpty()) {    if (oldList.isEmpty()) {      return Collections.emptyList();    }    List<AdapterCommand> commands=new ArrayList<>(1);    commands.add(new ItemRangeRemovedCommand(0,oldList.size()));    oldList.clear();    return commands;  }  List<AdapterCommand> commands=new ArrayList<>(newSize);  int M=oldList.size();  int N=newList.size();  int[][] opt=new int[M + 1][N + 1];  for (int i=M - 1; i >= 0; i--) {    for (int j=N - 1; j >= 0; j--) {      if (oldList.get(i).equals(newList.get(j))) {        opt[i][j]=opt[i + 1][j + 1] + 1;      } else {        opt[i][j]=Math.max(opt[i + 1][j],opt[i][j + 1]);      }    }  }  int insertRemoveOffset=0;  int i=0, j=0;  while (i < M && j < N) {    T oldItem=oldList.get(i);    T newItem=newList.get(j);    if (oldItem.equals(newItem)) {      if (detector != null && detector.hasChanged(oldItem,newItem)) {        commands.add(new ItemChangedCommand(j));      }      i++;      j++;    } else     if (opt[i + 1][j] >= opt[i][j + 1]) {      commands.add(new ItemRemovedCommand(i + insertRemoveOffset));      insertRemoveOffset--;      i++;    } else {      commands.add(new ItemInsertedCommand(j));      insertRemoveOffset++;      j++;    }  }  while (i < M || j < N) {    if (i == M) {      commands.add(new ItemInsertedCommand(j));      insertRemoveOffset++;      j++;    } else     if (j == N) {      commands.add(new ItemRemovedCommand(i + insertRemoveOffset));      insertRemoveOffset--;      i++;    }  }  oldList.clear();  oldList.addAll(newList);  return commands;}  }
class C{  public void directSave(){  super.directSave();}  }
class C{  @Override public void initialize(InputSplit inSplit,TaskAttemptContext attempt) throws IOException {  super.initialize(inSplit,attempt);  this.tableLayout=MRUtils.getTableLayout(attempt.getConfiguration(),TABLE_LAYOUT.OSP);  this.ryaContext=RyaTripleContext.getInstance(new AccumuloRdfConfiguration(attempt.getConfiguration()));}  }
class C{  public void finishActionMode(){  if (mActionMode != null) {    mActionMode.finish();  }}  }
class C{  @Override public void place(Node r){  m_groupNum=Node.getGCount(r,0);  m_groups=new Group[m_groupNum];  for (int noa=0; noa < m_groupNum; noa++) {    m_groups[noa]=new Group();    m_groups[noa].m_gap=3;    m_groups[noa].m_start=-1;  }  groupBuild(r);  m_levelNum=Node.getHeight(r,0);  m_yRatio=1 / (double)(m_levelNum + 1);  m_levels=new Level[m_levelNum];  for (int noa=0; noa < m_levelNum; noa++) {    m_levels[noa]=new Level();  }  r.setTop(m_yRatio);  yPlacer();  r.setCenter(0);  xPlacer(0);  untangle2();  scaleByMax();}  }
class C{  public static byte[] intToByteArray(final int value){  final byte[] output=new byte[4];  final DataBuffer buffer=new DataBuffer(output,0,4);  buffer.writeInt(value);  return output;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void testIsValid(){  SeeedStudioRfidProtocol instance=new SeeedStudioRfidProtocol();  assertEquals(true,instance.isValid(msgStandalone));  assertEquals(false,instance.isValid(msgBadChkSumStandalone));}  }
class C{  public void stopTiming(){  if (!this.running)   throw new RuntimeException("Timer is not running.");  this.timeElapsed+=System.currentTimeMillis() - this.startTime;  this.running=false;}  }
class C{  public void restart(){  mInit=false;  launchInspector(WXEnvironment.sRemoteDebugMode);  if (mWXBridge == null) {    mWXBridge=new WXBridge();  }}  }
class C{  public VFSFileHandler(FileSystemManager fsManager){  this.fileSystemManager=fsManager;}  }
class C{  private TimSort(Object[] a,Comparator c){  this.a=a;  this.c=c;  int len=a.length;  Object[] newArray=(Object[])new Object[len < 2 * INITIAL_TMP_STORAGE_LENGTH ? len >>> 1 : INITIAL_TMP_STORAGE_LENGTH];  tmp=newArray;  int stackLen=(len < 120 ? 4 : len < 1542 ? 9 : len < 119151 ? 18 : 39);  runBase=new int[stackLen];  runLen=new int[stackLen];}  }
class C{  public boolean isDomainZoomable(){  return this.domainZoomable;}  }
class C{  private void validate() throws URISyntaxException {  String s=getScheme();  if ((s != null) && (s.compareTo("file") == 0)) {    return;  }  if (getLocalVmId() == -1) {    throw new URISyntaxException(uri.toString(),"Local vmid required");  }}  }
class C{  public void alter(Instance instance,Transform matrix,AlphaTransform cxform){  alter(instance,matrix,cxform,-1);}  }
class C{  public void initialize(ShardRouting shard,String nodeId,long expectedSize){  ensureMutable();  assert shard.unassigned() : shard;  shard.initialize(nodeId,expectedSize);  node(nodeId).add(shard);  inactiveShardCount++;  if (shard.primary()) {    inactivePrimaryCount++;  }  assignedShardsAdd(shard);}  }
class C{  public void insertIndexInterval(int index,int length,boolean before){  int insMinIndex=(before) ? index : index + 1;  int insMaxIndex=(insMinIndex + length) - 1;  for (int i=maxIndex; i >= insMinIndex; i--) {    setState(i + length,value.get(i));  }  boolean setInsertedValues=((getSelectionMode() == SINGLE_SELECTION) ? false : value.get(index));  for (int i=insMinIndex; i <= insMaxIndex; i++) {    setState(i,setInsertedValues);  }  int leadIndex=this.leadIndex;  if (leadIndex > index || (before && leadIndex == index)) {    leadIndex=this.leadIndex + length;  }  int anchorIndex=this.anchorIndex;  if (anchorIndex > index || (before && anchorIndex == index)) {    anchorIndex=this.anchorIndex + length;  }  if (leadIndex != this.leadIndex || anchorIndex != this.anchorIndex) {    updateLeadAnchorIndices(anchorIndex,leadIndex);  }  fireValueChanged();}  }
class C{  int writeInt4(int n,int offset){  byte[] temp={(byte)((n >> 24) & 0xff),(byte)((n >> 16) & 0xff),(byte)((n >> 8) & 0xff),(byte)(n & 0xff)};  return writeBytes(temp,offset);}  }
class C{  @Override protected String translate(final String name){  return "data/sprites/gameboard/" + name + ".png";}  }
class C{  private static Pair<String,String> immediateROR(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String immediateNodeValue1,final String immediateNodeValue2){  final String shifterOperand=environment.getNextVariableString();  final String shifterCarryOut=environment.getNextVariableString();  final String tmpVar1=environment.getNextVariableString();  final String tmpVar2=environment.getNextVariableString();  final String tmpVar3=environment.getNextVariableString();  final String tmpVar4=environment.getNextVariableString();  long baseOffset=offset;  instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,immediateNodeValue1,wordSize,"-" + immediateNodeValue2,dWordSize,tmpVar1));  instructions.add(ReilHelpers.createBsh(baseOffset++,dWordSize,immediateNodeValue1,wordSize,String.valueOf((32 - Integer.decode(immediateNodeValue2))),qWordSize,tmpVar2));  instructions.add(ReilHelpers.createOr(baseOffset++,dWordSize,tmpVar1,qWordSize,tmpVar2,qWordSize,tmpVar3));  instructions.add(ReilHelpers.createAnd(baseOffset++,qWordSize,tmpVar3,dWordSize,bitMaskAllBitsSet,dWordSize,shifterOperand));  instructions.add(ReilHelpers.createBsh(baseOffset++,qWordSize,tmpVar3,dWordSize,minusThirtyOneSet,dWordSize,tmpVar4));  instructions.add(ReilHelpers.createAnd(baseOffset++,dWordSize,tmpVar4,dWordSize,oneSet,byteSize,shifterCarryOut));  return new Pair<String,String>(shifterOperand,shifterCarryOut);}  }
class C{  public void addColumn(String name,Class type){  addColumn(name,type,null);}  }
class C{  void add(SuperCardToast superCardToast){  mList.add(superCardToast);}  }
class C{  public void rollback(Savepoint s) throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  public void testOnUserAdded_showsSpinner(){  mController.init();  JsonUser user=new JsonUser("idA","nameA");  mFakeEventBus.post(new UserAddedEvent(user));  verify(mMockFragmentUi).showSpinner(false);}  }
class C{  public static SendablePhotoMessageBuilder builder(){  return new SendablePhotoMessageBuilder();}  }
class C{  private static RegexInfo fold(TranslatorUtils.IFold iFold,PublicRegexp[] subExpressions,RegexInfo zero){  if (subExpressions.length == 0) {    return zero;  } else   if (subExpressions.length == 1) {    return analyze(subExpressions[0]);  }  RegexInfo info=iFold.foldFunc(analyze(subExpressions[0]),analyze(subExpressions[1]));  for (int i=2; i < subExpressions.length; i++) {    info=iFold.foldFunc(info,analyze(subExpressions[i]));  }  return info;}  }
class C{  public ProfileVisit photoUrls(PhotoUrls photoUrls){  this.photoUrls=photoUrls;  return this;}  }
class C{  public GVTFont deriveFont(float size,AttributedCharacterIterator aci){  if (font != null)   return new AWTGVTFont(font,size);  return deriveFont(size,aci.getAttributes());}  }
class C{  public DoubleMatrix jblas_solve(double[][] B){  return org.jblas.Solve.solve(new DoubleMatrix(this.getArray()),new DoubleMatrix(B));}  }
class C{  private void aloadHelper(Instruction s,BasicBlock b){  TypeReference type=ALoad.getArray(s).getType();  if (type.isArrayType()) {    if (!type.getArrayElementType().isPrimitiveType()) {      type=TypeReference.JavaLangObjectArray;    }    registerUse(s,type);    if (uphi) {      registerDef(s,b,type);    }  }}  }
class C{  public int typicalIndsProduced(){  return (INDS_PRODUCED);}  }
class C{  public static List<Participation> filmography(String idPerson,String profile,String filter) throws NetworkException {  String params=ServiceSecurity.construireParams(false,AllocineService.CODE,idPerson,AllocineService.PROFILE,profile,AllocineService.FILTER,filter);  String sed=ServiceSecurity.getSED();  String sig=ServiceSecurity.getSIG(params,sed);  try {    AllocineResponse response=getService().filmography(idPerson,profile,filter,sed,sig);    return response.getPerson().getParticipation();  } catch (  Exception e) {    throw new NetworkException();  }}  }
class C{  public ValueGrid2DPortrayal3D(String valueName,Image image){  this(valueName,1.0f);  this.image=image;}  }
class C{  public boolean isPickListPrintDetails(){  Object oo=get_Value(COLUMNNAME_IsPickListPrintDetails);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public final int read() throws IOException {  if (_readLength <= _readOffset) {    if (!readBuffer()) {      return -1;    }  }  return _readBuffer[_readOffset++] & 0xff;}  }
class C{  public void testDoCheckWithDefaultDetectionResultAndDetectionResultOverridenByConstructor(){  LOGGER.debug("doCheckWithDefaultDetectionResultAndDetectionResultOverridenByConstructor");  elements.add(element);  expect(mockTextElementBuilder.buildTextFromElement(element)).andReturn(":!)_\"'('&");  mockTestSolutionHandler.addTestSolution(TestSolution.NEED_MORE_INFO);  expectLastCall().once();  mockProcessRemarkService.addSourceCodeRemarkOnElement(TestSolution.NEED_MORE_INFO,element,DETECTION_MSG);  expectLastCall().once();  TextOnlyContainsNonAlphanumericalCharactersChecker instance=new TextOnlyContainsNonAlphanumericalCharactersChecker(mockTextElementBuilder,TestSolution.NEED_MORE_INFO,DETECTION_MSG);  instance.setProcessRemarkService(mockProcessRemarkService);  replay(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler,mockProcessRemarkService);  instance.doCheck(mockSSPHandler,elements,mockTestSolutionHandler);  verify(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler,mockProcessRemarkService);}  }
class C{  @Override public void paintControl(final PaintEvent e){  final GC gc=e.gc;  final Rectangle r=getClientArea();  gc.setBackground(getParent().getBackground());  gc.fillRectangle(r);  final int height=parent.getSize().y;  final double y=(height - (double)image.getBounds().height) / 2;  gc.drawImage(image,0,(int)y);}  }
class C{  public EventListenerAggregate(Class<? extends EventListener> listenerClass){  if (listenerClass == null) {    throw new NullPointerException("listener class is null");  }  listenerList=(EventListener[])Array.newInstance(listenerClass,0);}  }
class C{  public ByteVector putByte(final int b){  int length=this.length;  if (length + 1 > data.length) {    enlarge(1);  }  data[length++]=(byte)b;  this.length=length;  return this;}  }
class C{  public Settings indexSettings(){  return indexSettings;}  }
class C{  public static boolean hasNoPrefix(final AnnotationMirror unitsAnnotation){  AnnotationValue annotationValue=getAnnotationMirrorPrefix(unitsAnnotation);  return hasNoPrefix(annotationValue);}  }
class C{  protected Object execute(Method mtd,IgniteCompute compute,Class<?> cls,GridifyRangeArgument arg,GridifyNodeFilter nodeFilter,int threshold,int splitSize,long timeout) throws IgniteCheckedException {  long now=U.currentTimeMillis();  long end=timeout == 0 ? Long.MAX_VALUE : timeout + now;  if (end < 0)   end=Long.MAX_VALUE;  Collection<?> res=null;  while (true) {    if (now > end)     throw new ComputeTaskTimeoutCheckedException("Timeout occurred while waiting for completion.");    GridifyRangeArgument taskArg=createGridifyArgument(arg,res);    if (taskArg == null)     return result(res); else     if (taskArg.getInputSize() != UNKNOWN_SIZE && taskArg.getInputSize() <= threshold) {      try {        mtd.setAccessible(true);        return mtd.invoke(arg.getTarget(),taskArg.getMethodParameters());      } catch (      IllegalAccessException|InvocationTargetException e) {        throw new IgniteCheckedException("Failed to execute method locally.",e);      }    } else {      res=compute.withTimeout(timeout == 0 ? 0L : (end - now)).execute(new GridifyDefaultRangeTask(cls,nodeFilter,threshold,splitSize,true),taskArg);    }    now=U.currentTimeMillis();  }}  }
class C{  public static DataBindingFactory.IImagePropertyApplier checkAndGetImageApplier(){  DataBindingFactory.IImagePropertyApplier applier=DataBindingFactory.getImagePropertyApplier();  if (applier == null) {    throw new NullPointerException("you must call " + "DataBindingFactory#setImagePropertyApplier first.");  }  return applier;}  }
class C{  public SVGPath relativeEllipticalArc(double[] rxy,double ar,double la,double sp,double[] xy){  append(PATH_ARC_RELATIVE,rxy[0],rxy[1],ar,la,sp,xy[0],xy[1]);  return this;}  }
class C{  static protected IBindingSet[] flatten(final Iterator<IBindingSet[]> itr){  try {    final List<IBindingSet> t=new LinkedList<IBindingSet>();    while (itr.hasNext()) {      final IBindingSet[] a=itr.next();      for (      IBindingSet b : a) {        t.add(b);      }    }    return t.toArray(new IBindingSet[t.size()]);  }  finally {    if (itr instanceof ICloseableIterator) {      ((ICloseableIterator<?>)itr).close();    }  }}  }
class C{  public StringBuffer(java.lang.String str){  internal=new StringBuilder(str);}  }
class C{  public boolean canPace(){  return false;}  }
class C{  @Override public CompilerPhase newExecution(IR ir){  return this;}  }
class C{  public static void parseChanges(Project project,VirtualFile vcsRoot,@Nullable GitRevisionNumber thisRevision,GitRevisionNumber parentRevision,String s,Collection<Change> changes,final Set<String> ignoreNames) throws VcsException {  StringScanner sc=new StringScanner(s);  parseChanges(project,vcsRoot,thisRevision,parentRevision,sc,changes,ignoreNames);  if (sc.hasMoreData()) {    throw new IllegalStateException("Unknown file status: " + sc.line());  }}  }
class C{  private void addHyperlinkToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so,true);}  }
class C{  public DocIdAndVersion lookup(BytesRef id,Bits liveDocs,LeafReaderContext context) throws IOException {  if (termsEnum.seekExact(id)) {    if (versions != null || hasPayloads == false) {      docsEnum=termsEnum.postings(docsEnum,0);      int docID=DocIdSetIterator.NO_MORE_DOCS;      for (int d=docsEnum.nextDoc(); d != DocIdSetIterator.NO_MORE_DOCS; d=docsEnum.nextDoc()) {        if (liveDocs != null && liveDocs.get(d) == false) {          continue;        }        docID=d;      }      if (docID != DocIdSetIterator.NO_MORE_DOCS) {        if (versions != null) {          return new DocIdAndVersion(docID,versions.get(docID),context);        } else {          return new DocIdAndVersion(docID,Versions.NOT_SET,context);        }      }    }    posEnum=termsEnum.postings(posEnum,PostingsEnum.PAYLOADS);    assert posEnum != null;    for (int d=posEnum.nextDoc(); d != DocIdSetIterator.NO_MORE_DOCS; d=posEnum.nextDoc()) {      if (liveDocs != null && liveDocs.get(d) == false) {        continue;      }      posEnum.nextPosition();      final BytesRef payload=posEnum.getPayload();      if (payload != null && payload.length == 8) {        return new DocIdAndVersion(d,Numbers.bytesToLong(payload),context);      }    }  }  return null;}  }
class C{  public void achievementCheck(CommandSender sender,String args[]){  StringBuilder achievementName=new StringBuilder();  for (int i=1; i < args.length - 1; i++) {    achievementName.append(args[i]);    if (i != args.length - 2)     achievementName.append(' ');  }  Player player=null;  for (  Player currentPlayer : Bukkit.getOnlinePlayers()) {    if (currentPlayer.getName().equalsIgnoreCase(args[args.length - 1])) {      player=currentPlayer;      break;    }  }  if (player == null) {    sender.sendMessage(plugin.getChatHeader() + plugin.getPluginLang().getString("player-offline","The player PLAYER is offline!").replace("PLAYER",args[args.length - 1]));    return;  }  if (plugin.getDb().hasPlayerAchievement(player,achievementName.toString()))   sender.sendMessage(plugin.getChatHeader() + plugin.getPluginLang().getString("check-achievement-true","PLAYER has received the achievement ACH!").replace("PLAYER",args[args.length - 1]).replace("ACH",achievementName)); else   sender.sendMessage(plugin.getChatHeader() + plugin.getPluginLang().getString("check-achievements-false","PLAYER has not received the achievement ACH!").replace("PLAYER",args[args.length - 1]).replace("ACH",achievementName));}  }
class C{  public void deleteItem(Collection<String> itemIds) throws XMPPException {  List<Item> items=new ArrayList<Item>(itemIds.size());  for (  String id : itemIds) {    items.add(new Item(id));  }  PubSub request=createPubsubPacket(Type.SET,new ItemsExtension(ItemsExtension.ItemsElementType.retract,getId(),items));  SyncPacketSend.getReply(con,request);}  }
class C{  public DefaultEnvironment(){  super("");}  }
class C{  public boolean isTransition(){  return transition;}  }
class C{  @Override public void info(String format,Object arg){  if (logger.isLoggable(Level.INFO)) {    FormattingTuple ft=MessageFormatter.format(format,arg);    log(SELF,Level.INFO,ft.getMessage(),ft.getThrowable());  }}  }
class C{  protected HttpCookie decodeCookie(String cookieString){  byte[] bytes=hexStringToByteArray(cookieString);  ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(bytes);  HttpCookie cookie=null;  try {    ObjectInputStream objectInputStream=new ObjectInputStream(byteArrayInputStream);    cookie=((SerializableHttpCookie)objectInputStream.readObject()).getCookie();  } catch (  IOException e) {    Log.d(LOG_TAG,"IOException in decodeCookie",e);  }catch (  ClassNotFoundException e) {    Log.d(LOG_TAG,"ClassNotFoundException in decodeCookie",e);  }  return cookie;}  }
class C{  public static List<org.oscm.vo.VOPricedRole> convertToApiVOPricedRole(List<org.oscm.internal.vo.VOPricedRole> oldVO){  if (oldVO == null) {    return null;  }  List<org.oscm.vo.VOPricedRole> newVO=new ArrayList<org.oscm.vo.VOPricedRole>();  for (  org.oscm.internal.vo.VOPricedRole tmp : oldVO) {    newVO.add(convertToApi(tmp));  }  return newVO;}  }
class C{  private TomcatSlf4jLogbackAppenderAccessor wrapAppender(Object appender){  try {    if (appender == null) {      throw new IllegalArgumentException("appender is null");    }    TomcatSlf4jLogbackAppenderAccessor appenderAccessor=new TomcatSlf4jLogbackAppenderAccessor();    appenderAccessor.setTarget(appender);    appenderAccessor.setLoggerAccessor(this);    appenderAccessor.setApplication(getApplication());    return appenderAccessor;  } catch (  IllegalArgumentException e) {    logger.error("Could not wrap appender: '{}'",appender,e);  }  return null;}  }
class C{  protected void sequence_EquationRef(ISerializationContext context,EquationRef semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,GamlPackage.Literals.EQUATION_REF__REF) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,GamlPackage.Literals.EQUATION_REF__REF));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getEquationRefAccess().getRefEquationDefinitionValid_IDParserRuleCall_1_0_1(),semanticObject.getRef());  feeder.finish();}  }
class C{  public void postOnWall(String userId,String message) throws IOException {  postOnWall(userId,message,null);}  }
class C{  static double decodeValueFloor(int x){  return x * DECODE;}  }
class C{  public String toXML(boolean header){  XmlTextBuilder bdr;  String tagName="Procedure_Document";  String tmp;  bdr=new XmlTextBuilder();  if (header)   bdr.setStandardHeader();  bdr.addOpeningTag(tagName);  bdr.addSimpleElement("ProcedureId",procedureId);  bdr.addSimpleElement("DocumentId",documentId);  bdr.addSimpleElement("Code",code);  if (mandatory)   tmp="1"; else   tmp="0";  bdr.addSimpleElement("Mandatory",tmp);  bdr.addClosingTag(tagName);  return bdr.getText();}  }
class C{  public PayloadItem(String itemId,E payloadExt){  super(itemId);  if (payloadExt == null)   throw new IllegalArgumentException("payload cannot be 'null'");  payload=payloadExt;}  }
class C{  public void alertEnding(AlertingState alertingState){  if (log.isDebugEnabled()) {    log.debug("Alert definition '{}' is ending.",alertingState.getAlertingDefinition().getName());  }  alertingState.getAlert().close(System.currentTimeMillis(),AlertClosingReason.ALERT_RESOLVED);  for (  IAlertAction alertAction : alertActions) {    alertAction.onEnding(alertingState);  }  alertingState.setAlert(null);}  }
class C{  public void checkDeliveryTime(Message message) throws JMSException {  long creation=message.getJMSTimestamp();  long min=System.currentTimeMillis() - (offline.max + online.min) * (BROKER_RESTART > 0 ? 4 : 1);  if (false && min > creation) {    SimpleDateFormat df=new SimpleDateFormat("HH:mm:ss.SSS");    exit("" + this + ".checkDeliveryTime failed. Message time: "+ df.format(new Date(creation))+ ", min: "+ df.format(new Date(min))+ "\r\n"+ message);  }}  }
class C{  protected void sequence_FunctionTypeExpressionOLD_TAnonymousFormalParameterList_TypeRefWithModifiers(ISerializationContext context,FunctionTypeExpression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void unsetCreateTime(){  issetBitfield=EncodingUtils.clearBit(issetBitfield,CREATETIME_ISSET_ID);}  }
class C{  @Override void encode(final byte[] in,int inPos,final int inAvail,final Context context){  if (context.eof) {    return;  }  if (inAvail < 0) {    context.eof=true;    if (0 == context.modulus && lineLength == 0) {      return;    }    final byte[] buffer=ensureBufferSize(encodeSize,context);    final int savedPos=context.pos;switch (context.modulus) {case 0:      break;case 1:    buffer[context.pos++]=encodeTable[(context.ibitWorkArea >> 2) & MASK_6BITS];  buffer[context.pos++]=encodeTable[(context.ibitWorkArea << 4) & MASK_6BITS];if (encodeTable == STANDARD_ENCODE_TABLE) {  buffer[context.pos++]=pad;  buffer[context.pos++]=pad;}break;case 2:buffer[context.pos++]=encodeTable[(context.ibitWorkArea >> 10) & MASK_6BITS];buffer[context.pos++]=encodeTable[(context.ibitWorkArea >> 4) & MASK_6BITS];buffer[context.pos++]=encodeTable[(context.ibitWorkArea << 2) & MASK_6BITS];if (encodeTable == STANDARD_ENCODE_TABLE) {buffer[context.pos++]=pad;}break;default :throw new IllegalStateException("Impossible modulus " + context.modulus);}context.currentLinePos+=context.pos - savedPos;if (lineLength > 0 && context.currentLinePos > 0) {System.arraycopy(lineSeparator,0,buffer,context.pos,lineSeparator.length);context.pos+=lineSeparator.length;}} else {for (int i=0; i < inAvail; i++) {final byte[] buffer=ensureBufferSize(encodeSize,context);context.modulus=(context.modulus + 1) % BYTES_PER_UNENCODED_BLOCK;int b=in[inPos++];if (b < 0) {b+=256;}context.ibitWorkArea=(context.ibitWorkArea << 8) + b;if (0 == context.modulus) {buffer[context.pos++]=encodeTable[(context.ibitWorkArea >> 18) & MASK_6BITS];buffer[context.pos++]=encodeTable[(context.ibitWorkArea >> 12) & MASK_6BITS];buffer[context.pos++]=encodeTable[(context.ibitWorkArea >> 6) & MASK_6BITS];buffer[context.pos++]=encodeTable[context.ibitWorkArea & MASK_6BITS];context.currentLinePos+=BYTES_PER_ENCODED_BLOCK;if (lineLength > 0 && lineLength <= context.currentLinePos) {System.arraycopy(lineSeparator,0,buffer,context.pos,lineSeparator.length);context.pos+=lineSeparator.length;context.currentLinePos=0;}}}}}  }
class C{  protected double eval(STATE state,PLAYER player){  if (game.isTerminal(state)) {    return game.getUtility(state,player);  } else {    maxDepthReached=true;    return (utilMin + utilMax) / 2;  }}  }
class C{  public boolean allowAutoMaticSignalMastGeneration(SignalMast destination){  if (!destList.containsKey(destination)) {    return false;  }  return destList.get(destination).allowAutoSignalMastGen();}  }
class C{  public static String formatVersionName(AppEntity entity){  return "(".concat(entity.getVersionName()).concat(")");}  }
class C{  public void removeComponent(Component cmp){  removeComponentImpl(cmp);}  }
class C{  public StepExample(StepObject sample){  oredCriteria=new ArrayList<Criteria>();  Criteria criteria=this.or();  if (sample.getAttachType() != null) {    criteria.andAttachTypeEqualTo(sample.getAttachType());  }  if (sample.getAttachId() != null) {    criteria.andAttachIdEqualTo(sample.getAttachId());  }  if (sample.getContent() != null) {    criteria.andContentEqualTo(sample.getContent());  }  if (sample.getDueDate() != null) {    criteria.andDueDateEqualTo(sample.getDueDate());  }  if (sample.getCreatedTime() != null) {    criteria.andCreatedTimeEqualTo(sample.getCreatedTime());  }  if (sample.getUpdatedTime() != null) {    criteria.andUpdatedTimeEqualTo(sample.getUpdatedTime());  }  if (sample.getCreatorId() != null) {    criteria.andCreatorIdEqualTo(sample.getCreatorId());  }  if (sample.getCreatorName() != null) {    criteria.andCreatorNameEqualTo(sample.getCreatorName());  }  if (sample.getAssigneeId() != null) {    criteria.andAssigneeIdEqualTo(sample.getAssigneeId());  }  if (sample.getStatus() != null) {    criteria.andStatusEqualTo(sample.getStatus());  }  if (sample.getStartTime() != null) {    criteria.andStartTimeEqualTo(sample.getStartTime());  }  if (sample.getCompletedTime() != null) {    criteria.andCompletedTimeEqualTo(sample.getCompletedTime());  }  if (sample.getCompleterId() != null) {    criteria.andCompleterIdEqualTo(sample.getCompleterId());  }  if (sample.getIdInProject() != null) {    criteria.andIdInProjectEqualTo(sample.getIdInProject());  }  if (sample.getProjectId() != null) {    criteria.andProjectIdEqualTo(sample.getProjectId());  }  if (sample.getCompanyId() != null) {    criteria.andCompanyIdEqualTo(sample.getCompanyId());  }  if (sample.getDeleted() != null) {    criteria.andDeletedEqualTo(sample.getDeleted());  }  if (sample.getCreatorAvatar() != null) {    criteria.andCreatorAvatarEqualTo(sample.getCreatorAvatar());  }}  }
class C{  private void removeLabel(int oldLabel){  labelToIndex.set(oldLabel,-1);}  }
class C{  public static void assertResultsAreValid(TypecheckResult testResult){  if (testResult.didTestFail()) {    Assert.fail(testResult.summarize());  }}  }
class C{  private PluginInitializer(){}  }
class C{  public int length(){  return this.myArrayList.size();}  }
class C{  public void add(int source,TMember member){  if (source == IMPLEMENTED && member.isStatic() && member.getContainingType() instanceof TInterface) {    nonImplemented.add(member);    return;  }  int row=member.getMemberType().getValue();  MemberList<TMember> list=memberMatrix[source][row];  if (list == null) {    list=new MemberList<>();    memberMatrix[source][row]=list;  }  list.add(member);}  }
class C{  public RTextScrollPane(RTextArea textArea,boolean lineNumbers){  this(textArea,lineNumbers,Color.GRAY);}  }
class C{  public void plotTrainingData() throws Exception {  m_boundaryPanel.initialize();  setUpBoundaryPanel();  computeBounds();  m_boundaryPanel.plotTrainingData();}  }
class C{  public void check(HttpResponse httpResponse,int expectedResponseCode){  int statusCode=httpResponse.getStatusLine().getStatusCode();  if (statusCode != expectedResponseCode) {    StringBuilder msg=new StringBuilder();    msg.append("HTTP request failed with: ");    msg.append(statusCode);    if (httpResponse.getEntity() != null) {      try {        msg.append(", ");        msg.append(EntityUtils.toString(httpResponse.getEntity()));      } catch (      IOException e) {      }    }    throw new RuntimeException(msg.toString());  }}  }
class C{  protected void writeClose(String qualifiedName) throws IOException {  if (!omitElementClose(qualifiedName)) {    super.writeClose(qualifiedName);  }}  }
class C{  public DotIndicator(final Context context,final AttributeSet attrs){  super(context,attrs);  init(attrs,0,0);}  }
class C{  public boolean node_elim_opt(){  return soot.PhaseOptions.getBoolean(options,"node-elim-opt");}  }
class C{  public final void normalize(){  float norm;  norm=(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);  if (norm > 0.0f) {    norm=1.0f / (float)Math.sqrt(norm);    this.x*=norm;    this.y*=norm;    this.z*=norm;    this.w*=norm;  } else {    this.x=(float)0.0;    this.y=(float)0.0;    this.z=(float)0.0;    this.w=(float)0.0;  }}  }
class C{  protected static void invert(Problem problem,Solution solution){  for (int j=0; j < problem.getNumberOfObjectives(); j++) {    double value=solution.getObjective(j);    if (value < 0.0) {      value=0.0;    } else     if (value > 1.0) {      value=1.0;    }    solution.setObjective(j,1.0 - value);  }}  }
class C{  public String toString(){  return "[" + getLocalName() + "~=\""+ getValue()+ "\"]";}  }
class C{  public final char yycharat(int pos){  return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);}  }
class C{  protected int lengthOfByteStream(AbstractMRMessage m){  int len=m.getNumDataElements();  int cr=4;  return len + cr;}  }
class C{  public void compileExpr(String src) throws CompileError {  ASTree e=parseExpr(src,stable);  compileExpr(e);}  }
class C{  @Override public void endProcessingRequest(MailboxSession session){  if (mailboxSessionMapperFactory instanceof RequestAware) {    ((RequestAware)mailboxSessionMapperFactory).endProcessingRequest(session);  }}  }
class C{  @Override public void inject(Object managedBean){}  }
class C{  public static void printFile(Path file){  try (BufferedReader reader=Files.newBufferedReader(file,Charset.defaultCharset())){    for (String line=reader.readLine(); line != null; line=reader.readLine()) {      System.out.println(line);    }  } catch (  Exception exception) {    exception.printStackTrace(System.err);  }}  }
class C{  public BitmapAjaxCallback targetWidth(int targetWidth){  this.targetWidth=targetWidth;  return this;}  }
class C{  public static Typeface captureIt2(Context context){  return FontSourceProcessor.process(R.raw.capture_it_2,context);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case ImPackage.STRING_LITERAL_FOR_STE__ENTRY:    setEntry((SymbolTableEntry)null);  return;case ImPackage.STRING_LITERAL_FOR_STE__USE_EXPORTED_NAME:setUseExportedName(USE_EXPORTED_NAME_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public VisualTree(VisualTable nodes,VisualTable edges,String nodeKey,String sourceKey,String targetKey){  super(nodes,edges,nodeKey,sourceKey,targetKey);}  }
class C{  public static int cs_leaf(int i,int j,int[] first,int first_offset,int[] maxfirst,int maxfirst_offset,int[] prevleaf,int prevleaf_offset,int[] ancestor,int ancestor_offset,int[] jleaf){  int q, s, sparent, jprev;  if (first == null || maxfirst == null || prevleaf == null || ancestor == null || jleaf == null)   return (-1);  jleaf[0]=0;  if (i <= j || first[first_offset + j] <= maxfirst[maxfirst_offset + i])   return (-1);  maxfirst[maxfirst_offset + i]=first[first_offset + j];  jprev=prevleaf[prevleaf_offset + i];  prevleaf[prevleaf_offset + i]=j;  jleaf[0]=(jprev == -1) ? 1 : 2;  if (jleaf[0] == 1)   return (i);  for (q=jprev; q != ancestor[ancestor_offset + q]; q=ancestor[ancestor_offset + q])   ;  for (s=jprev; s != q; s=sparent) {    sparent=ancestor[ancestor_offset + s];    ancestor[ancestor_offset + s]=q;  }  return (q);}  }
class C{  boolean testBit(int index){  if (index < 0 || index > mDegree) {    return false;  }  long test=mPol[index >>> 6] & mBitmask[index & 0x3f];  return test != 0x0L;}  }
class C{  public final boolean isNameAttributed(){  return noInferiors || noSelect || marked|| unmarked|| children|| noChildren|| (!MailboxType.OTHER.equals(type));}  }
class C{  private void register(Map<String,Class<? extends SaslClientFactory>> providerMap){  for (  Map.Entry<String,Class<? extends SaslClientFactory>> me : providerMap.entrySet()) {    put("SaslClientFactory." + me.getKey(),me.getValue().getName());  }}  }
class C{  public void validate(){}  }
class C{  public PaymentInformationException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public boolean isIncludeExternalDTDDeclarations(){  return includeExternalDTDDeclarations;}  }
class C{  void scheduleConsolidateStoreNow(){  this.storeConsolidateTask.reschedule(0,TimeUnit.MILLISECONDS);}  }
class C{  public void testConstrCharIntIntMathContextException1(){  char value[]={'-','1','2','3','8','0','.','4','7','3','8','E','-','4','2','3'};  int offset=3;  int len=120;  int precision=4;  RoundingMode rm=RoundingMode.CEILING;  MathContext mc=new MathContext(precision,rm);  try {    new BigDecimal(value,offset,len,mc);    fail("NumberFormatException has not been thrown");  } catch (  NumberFormatException e) {  }}  }
class C{  public void destroyGroup(String groupName) throws FabricCommunicationException {  errorSafeCallMethod(METHOD_GROUP_DESTROY,new Object[]{groupName});}  }
class C{  public static double[] nullToEmpty(final double[] array){  if (array == null || array.length == 0) {    return ArrayUtils.EMPTY_DOUBLE_ARRAY;  }  return array;}  }
class C{  public QueryBuilder filter(final Optional<Filter> filter){  checkNotNull(filter,"filter must not be null");  this.filter=pickOptional(this.filter,filter);  return this;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  protected int translateGet(int toFetch){  if (this.oldestAt == 0) {    return toFetch;  }  int newIndex=toFetch + this.oldestAt;  if (newIndex >= this.historyCount) {    newIndex-=this.historyCount;  }  return newIndex;}  }
class C{  protected NamedList<NamedList> handleAnalysisRequest(FieldAnalysisRequest request,IndexSchema schema){  NamedList<NamedList> analysisResults=new SimpleOrderedMap<>();  NamedList<NamedList> fieldTypeAnalysisResults=new SimpleOrderedMap<>();  if (request.getFieldTypes() != null) {    for (    String fieldTypeName : request.getFieldTypes()) {      FieldType fieldType=schema.getFieldTypes().get(fieldTypeName);      fieldTypeAnalysisResults.add(fieldTypeName,analyzeValues(request,fieldType,null));    }  }  NamedList<NamedList> fieldNameAnalysisResults=new SimpleOrderedMap<>();  if (request.getFieldNames() != null) {    for (    String fieldName : request.getFieldNames()) {      FieldType fieldType=schema.getFieldType(fieldName);      fieldNameAnalysisResults.add(fieldName,analyzeValues(request,fieldType,fieldName));    }  }  analysisResults.add("field_types",fieldTypeAnalysisResults);  analysisResults.add("field_names",fieldNameAnalysisResults);  return analysisResults;}  }
class C{  public int maxUploads(){  return maxUploads;}  }
class C{  public static void closeCache(){  Cache cacheClient=GemFireCacheImpl.getInstance();  if (cacheClient != null && !cacheClient.isClosed()) {    cacheClient.close();    cacheClient.getDistributedSystem().disconnect();  }}  }
class C{  public static ObjectDetailsRequest create(Object objName,int inspectionType){  ObjectDetailsRequest m=new ObjectDetailsRequest();  m.objName=objName;  m.inspectionType=inspectionType;  return m;}  }
class C{  public static String collapseCharacter(String str,char c){  StringBuilder sb=new StringBuilder();  char last=str.charAt(0);  for (int i=0; i < str.length(); i++) {    char current=str.charAt(i);    if (i == 0 || current != c || last != c) {      sb.append(current);      last=current;    }  }  return sb.toString();}  }
class C{  public void add(String suggesterName,String token,List<LookupResult> results){  Map<String,List<LookupResult>> suggesterRes=this.suggestionsMap.get(suggesterName);  if (suggesterRes == null) {    this.suggestionsMap.put(suggesterName,new HashMap<String,List<LookupResult>>());  }  List<LookupResult> res=this.suggestionsMap.get(suggesterName).get(token);  if (res == null) {    res=results;    this.suggestionsMap.get(suggesterName).put(token,res);  }}  }
class C{  @Nullable public static String fluidNameForContainer(FluidStack fluidStack){  final String name=fluidName(fluidStack);  if (name != null)   return name;  return invalidFluid();}  }
class C{  protected final double rand(double min,double max){  return rand() * (max - min) + min;}  }
class C{  public static int count(CharSequence self,CharSequence text){  int answer=0;  for (int idx=0; true; idx++) {    idx=self.toString().indexOf(text.toString(),idx);    if (idx < answer)     break;    ++answer;  }  return answer;}  }
class C{  public void list(){  System.out.println();  list(0);}  }
class C{  void checkForDeadlocks(){  long[] ids=threadBean.findDeadlockedThreads();  if (ids == null) {    return;  }  final StringWriter stringWriter=new StringWriter();  final PrintWriter print=new PrintWriter(stringWriter);  print.println("ThreadDeadlockDetector - deadlock found :");  final ThreadInfo[] infos=threadBean.getThreadInfo(ids,true,true);  final HashMap<Long,String> tableWaitingForLockMap=MVTable.WAITING_FOR_LOCK.getSnapshotOfAllThreads();  final HashMap<Long,ArrayList<String>> tableExclusiveLocksMap=MVTable.EXCLUSIVE_LOCKS.getSnapshotOfAllThreads();  final HashMap<Long,ArrayList<String>> tableSharedLocksMap=MVTable.SHARED_LOCKS.getSnapshotOfAllThreads();  for (  ThreadInfo ti : infos) {    printThreadInfo(print,ti);    printLockInfo(print,ti.getLockedSynchronizers(),tableWaitingForLockMap.get(ti.getThreadId()),tableExclusiveLocksMap.get(ti.getThreadId()),tableSharedLocksMap.get(ti.getThreadId()));  }  print.flush();  System.out.println(stringWriter.getBuffer());}  }
class C{  public JSONObject put(String key,Collection<Object> value) throws JSONException {  this.put(key,new JSONArray(value));  return this;}  }
class C{  public static double twoPow(final int power){  if (USE_TWO_POW_TAB) {    if (power >= MIN_DOUBLE_EXPONENT) {      if (power <= MAX_DOUBLE_EXPONENT) {        return MyTTwoPow.twoPowTab[power - MIN_DOUBLE_EXPONENT];      }      return Double.POSITIVE_INFINITY;    }    return 0.0;  }  return NumbersUtils.twoPow(power);}  }
class C{  void checkPolling(){  Engine.instance().setPolling(polling.isSelected());}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  final DialogOption showYesNoMessage(String message,IntSetting defValue,DialogOption defaultOption){  final String[] options={DialogOption.YES.getText(),DialogOption.NO.getText()};  DialogOption ret=DialogOption.parseInt(defValue.getValue());  if (ret == DialogOption.YES || ret == DialogOption.NO)   return ret;  int option;  try {    option=JOptionPane.showOptionDialog(getParentComponent(),alwaysUseThisAnswerLabel(message,defValue),I18n.tr("Message"),JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE,null,options,defaultOption.getText());  } catch (  ArrayIndexOutOfBoundsException aioobe) {    option=JOptionPane.NO_OPTION;  }catch (  InternalError ie) {    option=JOptionPane.NO_OPTION;  }  if (option == JOptionPane.YES_OPTION)   ret=DialogOption.YES; else   ret=DialogOption.NO;  if (defValue.getValue() == REMEMBER_ANSWER)   defValue.setValue(ret.toInt()); else   defValue.setValue(FORGET_ANSWER);  return ret;}  }
class C{  public void visitInnerClassType(String name){}  }
class C{  static public double bucketDurationSec(){  return Conversions.msToSec(BUCKET_DURATION_MS);}  }
class C{  public CylinderPortrayal3D(Color color,double scale){  this(appearanceForColor(color),true,false,scale);}  }
class C{  public Entry(EventListener listener,String namespaceURI,Object group,Entry next){  this.listener=listener;  this.namespaceURI=namespaceURI;  this.group=group;  this.next=next;}  }
class C{  public ExpressionType negate(){  if (isNegated()) {    return new ExpressionType(typeString.replace(SUFFIX_NEGATED,""));  } else {    return new ExpressionType(typeString + SUFFIX_NEGATED);  }}  }
class C{  public void invokeHookSpoutAck(Object messageId,long completeLatencyNs){  if (taskHooks.size() != 0) {    SpoutAckInfo ackInfo=new SpoutAckInfo(messageId,getThisTaskId(),completeLatencyNs / Constants.MILLISECONDS_TO_NANOSECONDS);    for (    ITaskHook taskHook : taskHooks) {      taskHook.spoutAck(ackInfo);    }  }}  }
class C{  private ColorPickerSwatch createColorSwatch(int color,int selectedColor){  ColorPickerSwatch view=new ColorPickerSwatch(getContext(),color,color == selectedColor,mOnColorSelectedListener);  TableRow.LayoutParams params=new TableRow.LayoutParams(mSwatchLength,mSwatchLength);  params.setMargins(mMarginSize,mMarginSize,mMarginSize,mMarginSize);  view.setLayoutParams(params);  return view;}  }
class C{  public ViaHeader createViaHeader(String host,int port,String transport,String branch) throws ParseException, InvalidArgumentException {  if (host == null || transport == null)   throw new NullPointerException("null arg");  Via via=new Via();  if (branch != null)   via.setBranch(branch);  if (host.indexOf(':') >= 0 && host.indexOf('[') < 0) {    if (stripAddressScopeZones) {      int zoneStart=host.indexOf('%');      if (zoneStart != -1)       host=host.substring(0,zoneStart);    }    host='[' + host + ']';  }  via.setHost(host);  via.setPort(port);  via.setTransport(transport);  return via;}  }
class C{  boolean eliminate(){  boolean change=false;  Instruction prev=first;  for (Instruction inst=first.next; inst != null; inst=inst.next) {    if (inst.pc != NOTREACHED) {      prev.next=inst;      prev=inst;      inst.pc=NOTREACHED;    } else {      change=true;    }  }  first.pc=NOTREACHED;  prev.next=null;  return change;}  }
class C{  public DiskBasedCache(File rootDirectory,int maxCacheSizeInBytes){  mRootDirectory=rootDirectory;  mMaxCacheSizeInBytes=maxCacheSizeInBytes;}  }
class C{  private static TopicPartition registerConsumerToSpecificPartition(KafkaConsumer<String,String> consumer,String topic,int partition){  TopicPartition topicPartition=new TopicPartition(topic,partition);  List<TopicPartition> partitions=Arrays.asList(topicPartition);  consumer.assign(partitions);  return topicPartition;}  }
class C{  @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case EipPackage.CHANNEL__TO_ENDPOINT:    if (toEndpoint != null)     msgs=((InternalEObject)toEndpoint).eInverseRemove(this,EipPackage.ENDPOINT__FROM_CHANNELS,Endpoint.class,msgs);  return basicSetToEndpoint((Endpoint)otherEnd,msgs);case EipPackage.CHANNEL__FROM_ENDPOINT:if (fromEndpoint != null) msgs=((InternalEObject)fromEndpoint).eInverseRemove(this,EipPackage.ENDPOINT__TO_CHANNELS,Endpoint.class,msgs);return basicSetFromEndpoint((Endpoint)otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  public static void println(int priority,String tag,String msg){  println(priority,tag,msg,null);}  }
class C{  public void displayState(int state){  updateSize();  if (getSignalHead() == null) {    if (log.isDebugEnabled()) {      log.debug("Display state " + state + ", disconnected");    }  } else {    if (log.isDebugEnabled()) {      log.debug("Display state " + state + " for "+ getNameString());    }    if (getSignalHead().getHeld()) {      if (isText()) {        super.setText(Bundle.getMessage("Held"));      }      if (isIcon()) {        super.setIcon(_iconMap.get(rbean.getString("SignalHeadStateHeld")));      }      return;    } else     if (getLitMode() && !getSignalHead().getLit()) {      if (isText()) {        super.setText(Bundle.getMessage("Dark"));      }      if (isIcon()) {        super.setIcon(_iconMap.get(rbean.getString("SignalHeadStateDark")));      }      return;    }  }  if (isText()) {    super.setText(getSignalHead().getAppearanceName(state));  }  if (isIcon()) {    NamedIcon icon=_iconMap.get(getSignalHead().getAppearanceName(state));    if (icon != null) {      super.setIcon(icon);    }  }  return;}  }
class C{  public int sumRegion(int row1,int col1,int row2,int col2){  return dp[row2 + 1][col2 + 1] - dp[row1][col2 + 1] - dp[row2 + 1][col1] + dp[row1][col1];}  }
class C{  public static double geometricMean(DoubleArrayList data){  return geometricMean(data.size(),sumOfLogarithms(data,0,data.size() - 1));}  }
class C{  public boolean onlyLettersOrDigits(final @NonNull CharSequence input,final int numCharsToCheck,final int start){  if (start < 0 || start > input.length()) {    return false;  }  for (int i=0; i < numCharsToCheck; i++) {    int positionToCheck=start + i;    if (positionToCheck >= input.length()) {      return false;    }    char charToCheck=input.charAt(positionToCheck);    if (!Character.isLetterOrDigit(charToCheck)) {      return false;    }  }  return true;}  }
class C{  @Override public boolean hasNext(){  for (int x=pos + 1; x < 1024; x++)   if (region.offset.getInt(x * 4) != 0)   return true;  return false;}  }
class C{  @Override public final ClassifierSplitModel selectModel(Instances train,Instances test){  return selectModel(train);}  }
class C{  public void generateCucumberITFiles(final File outputDirectory,final Collection<File> featureFiles) throws MojoExecutionException {  final Parser<Feature> parser=new Parser<Feature>(new AstBuilder());  Feature feature=null;  final TagFilter tagFilter=new TagFilter(overriddenParameters.getTags());  for (  final File file : featureFiles) {    try {      feature=parser.parse(new FileReader(file),new TokenMatcher());    } catch (    final FileNotFoundException e) {      System.out.println(String.format("WARNING: Failed to parse '%s'...IGNORING",file.getName()));    }    final Collection<Node> matchingScenariosAndExamples=tagFilter.matchingScenariosAndExamples(feature);    for (    final Node match : matchingScenariosAndExamples) {      outputFileName=classNamingScheme.generate(file.getName());      setFeatureFileLocation(file,match.getLocation());      writeFile(outputDirectory);    }  }}  }
class C{  public static void write(final GeomGridField gridField,int nodata,Writer outputStream) throws IOException {  outputStream.write("ncols         ");  outputStream.write(Integer.toString(gridField.getGridWidth()));  outputStream.write("\n");  outputStream.write("nrows         ");  outputStream.write(Integer.toString(gridField.getGridHeight()));  outputStream.write("\n");  outputStream.write("xllcorner     ");  outputStream.write(Double.toString(gridField.getMBR().getMinX()));  outputStream.write("\n");  outputStream.write("yllcorner     ");  outputStream.write(Double.toString(gridField.getMBR().getMinY()));  outputStream.write("\n");  outputStream.write("cellsize      ");  outputStream.write(Double.toString(gridField.getPixelWidth()));  outputStream.write("\n");  outputStream.write("NODATA_value  ");  outputStream.write(Integer.toString(nodata));  outputStream.write("\n");switch (gridField.getGridDataType()) {case INTEGER:    IntGrid2D intGrid=(IntGrid2D)gridField.getGrid();  for (int y=0; y < intGrid.getHeight(); y++) {    for (int x=0; x < intGrid.getWidth(); x++) {      outputStream.write(Integer.toString(intGrid.get(x,y)));      outputStream.write(" ");    }    outputStream.write("\n");  }break;case DOUBLE:DoubleGrid2D doubleGrid=(DoubleGrid2D)gridField.getGrid();for (int y=0; y < doubleGrid.getHeight(); y++) {for (int x=0; x < doubleGrid.getWidth(); x++) {outputStream.write(Double.toString(doubleGrid.get(x,y)));outputStream.write(" ");}outputStream.write("\n");}break;}}  }
class C{  public boolean hasOrgName(){  return super.hasElement(OrgName.KEY);}  }
class C{  public static <E>Set<E> constrainedSet(Set<E> set,Constraint<? super E> constraint){  return new ConstrainedSet<E>(set,constraint);}  }
class C{  public String toString(){  if (tag == ARRAY) {    StringBuilder sb=new StringBuilder(80);    sb.append(name).append("=[");    int len=Array.getLength(value);    for (int i=0; i < len; i++) {      if (i != 0)       sb.append(", ");      sb.append(Array.get(value,i));    }    return sb.append("]").toString();  } else {    return name + "=" + value;  }}  }
class C{  protected void prepare(){}  }
class C{  @Override public String addStepsForDeleteFileSystems(Workflow workflow,String waitFor,List<FileDescriptor> filesystems,String taskId) throws InternalException {  List<FileDescriptor> sourceDescriptors=FileDescriptor.filterByType(filesystems,FileDescriptor.Type.FILE_MIRROR_SOURCE);  if (sourceDescriptors.isEmpty()) {    return waitFor;  }  waitFor=deleteElementReplicaSteps(workflow,waitFor,sourceDescriptors);  return waitFor;}  }
class C{  byte[] wrap(Key key) throws IllegalBlockSizeException, InvalidKeyException {  byte[] result=null;  try {    byte[] encodedKey=key.getEncoded();    if ((encodedKey == null) || (encodedKey.length == 0)) {      throw new InvalidKeyException("Cannot get an encoding of " + "the key to be wrapped");    }    result=doFinal(encodedKey,0,encodedKey.length);  } catch (  BadPaddingException e) {  }  return result;}  }
class C{  public boolean knowsInstruction(BytecodeInstruction ins){  return cfg.knowsInstruction(ins);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("AD_PrintFormat_ID"))     m_AD_PrintFormat_ID=((BigDecimal)para[i].getParameter()); else     if (name.equals("AD_Table_ID"))     m_AD_Table_ID=((BigDecimal)para[i].getParameter()); else     log.log(Level.SEVERE,"prepare - Unknown Parameter=" + para[i].getParameterName());  }}  }
class C{  public void addBlockedOn(BlockedOn blockedOn){  getBlockedOns().add(blockedOn);}  }
class C{  protected void paintText(Graphics g,AbstractButton b,Rectangle textRect,String text){  paintText(g,(JComponent)b,textRect,text);}  }
class C{  private boolean enoughSpace(){  long free=0;  free=Path.freeSpace();  if (free < Configuration.MIN_AVAILABLE_SIZE) {    if (firstSpace) {      firstSpace=false;      if (Cfg.DEBUG) {        Check.log(TAG + " FATAL: not enough space. Free : " + free);      }    }    return false;  } else {    return true;  }}  }
class C{  public String wchan() throws IOException {  return read("wchan");}  }
class C{  public boolean isLastWindow(AccessibilityWindowInfo baseWindow,int windowType){  int index=getWindowIndex(baseWindow);  if (index == WRONG_INDEX) {    return true;  }  int count=mWindows.size();  for (int i=index + 1; i < count; i++) {    AccessibilityWindowInfo window=mWindows.get(i);    if (window != null && window.getType() == windowType) {      return false;    }  }  return true;}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("PartitionAttributesData [colocatedWith=").append(colocatedWith);  sb.append(", localMaxMemory=").append(localMaxMemory);  sb.append(", partitionListeners=").append(Arrays.toString(partitionListeners));  sb.append(", partitionResolver=").append(partitionResolver);  sb.append(", recoveryDelay=").append(recoveryDelay);  sb.append(", redundantCopies=").append(redundantCopies);  sb.append(", startupRecoveryDelay=").append(startupRecoveryDelay);  sb.append(", totalMaxMemory=").append(totalMaxMemory);  sb.append(", totalNumBuckets=").append(totalNumBuckets + "]");  return sb.toString();}  }
class C{  public boolean supportsSubqueriesInQuantifieds() throws SQLException {  return true;}  }
class C{  public HttpBusinessException(Throwable pCause,HttpStatus pHttpStatus){  super(pCause);  this.httpStatus=pHttpStatus;}  }
class C{  public void printBufferedObjects(){  Collections.sort(areaBuffer,new MapAreaComparator());  Comparator<MapEntity> comp=new MapEntityComparator();  if (wayBuffer.size() < 10000)   Collections.sort(wayBuffer,comp);  if (nodeBuffer.size() < 10000)   Collections.sort(nodeBuffer,comp);  for (  MapWay area : areaBuffer)   printWay(area,(DefaultEntityViewInfo)area.getViewInfo(),true);  for (  MapWay way : wayBuffer)   printWay(way,(DefaultEntityViewInfo)way.getViewInfo(),false);  for (  MapEntity node : nodeBuffer) {    MapNode n;    if (node instanceof MapWay) {      List<MapNode> wayNodes=getWayNodes((MapWay)node);      if (wayNodes.isEmpty())       wayNodes=((MapWay)node).getNodes();      n=wayNodes.get(0);    } else     n=(MapNode)node;    printNode(n,(DefaultEntityViewInfo)node.getViewInfo());  }  for (  Track track : trackBuffer)   printTrack(track);  Collections.sort(nameInfoBuffer);  int charSize=(int)(defaultFontSize * displayFactorSym);  for (int i=0; i < nameInfoBuffer.size(); ++i) {    NameInfo info=nameInfoBuffer.get(i);    for (int j=0; j < i; ++j) {      NameInfo info1=nameInfoBuffer.get(j);      int fac=(info.name.equals(info1.name)) ? 3 : 2;      if (Math.abs(info.y - info1.y) < charSize * fac) {        fac=(info.x < info1.x) ? info.name.length() : info1.name.length();        if (Math.abs(info.x - info1.x) < charSize * fac) {          nameInfoBuffer.remove(i);          --i;          j=i;        }      }    }  }  for (  NameInfo textInfo : nameInfoBuffer) {    imageBdr.setColor(textInfo.color);    imageBdr.drawString(textInfo.name,textInfo.x,textInfo.y);  }}  }
class C{  public String group(){  return group(0);}  }
class C{  private static boolean computeIsLafAqua(){  return UIManager.getLookAndFeel().getID().equals("Aqua");}  }
class C{  public AccountAttribute asAccountAttribute(Account account){  if (account == null) {    return null;  }  AccountAttribute who=new AccountAttribute();  who.name=account.getFullName();  who.email=account.getPreferredEmail();  who.username=account.getUserName();  return who;}  }
class C{  @Override public Object function(final Object[] arguments){  editor.onEditorReady();  return null;}  }
class C{  static public boolean importable(Identifier id,Environment env){  if (!id.isInner()) {    return env.classExists(id);  } else   if (!env.classExists(id.getTopName())) {    return false;  } else {    try {      ClassDeclaration decl=env.getClassDeclaration(id.getTopName());      ClassDefinition c=decl.getClassDefinitionNoCheck(env);      return c.innerClassExists(id.getFlatName().getTail());    } catch (    ClassNotFound ee) {      return false;    }  }}  }
class C{  @Override public AxisState draw(Graphics2D g2,double cursor,Rectangle2D plotArea,Rectangle2D dataArea,RectangleEdge edge,PlotRenderingInfo plotState){  AxisState axisState=new AxisState(cursor);  if (isAxisLineVisible()) {    drawAxisLine(g2,cursor,dataArea,edge);  }  if (isTickMarksVisible()) {    drawTickMarks(g2,axisState,dataArea,edge);  }  if (isTickLabelsVisible()) {    for (int band=0; band < this.labelInfo.length; band++) {      axisState=drawTickLabels(band,g2,axisState,dataArea,edge);    }  }  if (getAttributedLabel() != null) {    axisState=drawAttributedLabel(getAttributedLabel(),g2,plotArea,dataArea,edge,axisState);  } else {    axisState=drawLabel(getLabel(),g2,plotArea,dataArea,edge,axisState);  }  return axisState;}  }
class C{  private void handleDirection(V child,int scrollDirection){  if (!behaviorTranslationEnabled) {    return;  }  if (scrollDirection == ScrollDirection.SCROLL_DIRECTION_DOWN && hidden) {    hidden=false;    animateOffset(child,0,false,true);  } else   if (scrollDirection == ScrollDirection.SCROLL_DIRECTION_UP && !hidden) {    hidden=true;    animateOffset(child,child.getHeight(),false,true);  }}  }
class C{  public OptionCompleter(Collection<String> options){  this();  for (  String option : options) {    add(option);  }}  }
class C{  int parseTrBlockContent(int currentOffset,char openQuote,char closeQuote){  int blockStartOffset=currentOffset;  CharSequence buffer=getBuffer();  int bufferEnd=getBufferEnd();  boolean isEscaped=false;  boolean isQuoteDiffers=openQuote != closeQuote;  int quotesLevel=0;  while (currentOffset < bufferEnd) {    char currentChar=buffer.charAt(currentOffset);    if (!isEscaped && quotesLevel == 0 && currentChar == closeQuote) {      if (currentOffset > blockStartOffset) {        pushPreparsedToken(blockStartOffset,currentOffset,STRING_CONTENT);      }      break;    }    if (isQuoteDiffers && !isEscaped) {      if (currentChar == openQuote) {        quotesLevel++;      } else       if (currentChar == closeQuote) {        quotesLevel--;      }    }    isEscaped=(currentChar == '\\' && !isEscaped);    currentOffset++;  }  return currentOffset;}  }
class C{  public static ExtensionRegistry newInstance(){  return new ExtensionRegistry();}  }
class C{  public static void addProblemToCompilationResult(char[] fileNameArray,CompilationResult result,boolean isWarning,String message,int sourceStart,int sourceEnd){  try {    EcjReflectionCheck.addProblemToCompilationResult.invoke(null,fileNameArray,result,isWarning,message,sourceStart,sourceEnd);  } catch (  NoClassDefFoundError e) {  }catch (  IllegalAccessException e) {    throw Lombok.sneakyThrow(e);  }catch (  InvocationTargetException e) {    throw Lombok.sneakyThrow(e);  }catch (  NullPointerException e) {    if (!"false".equals(System.getProperty("lombok.debug.reflection","false"))) {      e.initCause(EcjReflectionCheck.problem);      throw e;    }  }}  }
class C{  public static Scenario loadScenario(final Config config){  return ScenarioLoaderImpl.loadScenario(config);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isAutoIncrement(int column) throws SQLException {  Field f=getField(column);  return f.isAutoIncrement();}  }
class C{  private boolean validate(){  boolean retVal=true;  return retVal;}  }
class C{  public KeyStoreState nextState(){  return next;}  }
class C{  public DepartmentObject(int id){  this.id=id;}  }
class C{  public static float dot(Vector2 a,Vector2 b){  return a.getX() * b.getX() + a.getY() * b.getY();}  }
class C{  private static void validate(int hours,int minutes,int seconds){  if (hours < -18 || hours > 18) {    throw new DateTimeException("Zone offset hours not in valid range: value " + hours + " is not in the range -18 to 18");  }  if (hours > 0) {    if (minutes < 0 || seconds < 0) {      throw new DateTimeException("Zone offset minutes and seconds must be positive because hours is positive");    }  } else   if (hours < 0) {    if (minutes > 0 || seconds > 0) {      throw new DateTimeException("Zone offset minutes and seconds must be negative because hours is negative");    }  } else   if ((minutes > 0 && seconds < 0) || (minutes < 0 && seconds > 0)) {    throw new DateTimeException("Zone offset minutes and seconds must have the same sign");  }  if (Math.abs(minutes) > 59) {    throw new DateTimeException("Zone offset minutes not in valid range: abs(value) " + Math.abs(minutes) + " is not in the range 0 to 59");  }  if (Math.abs(seconds) > 59) {    throw new DateTimeException("Zone offset seconds not in valid range: abs(value) " + Math.abs(seconds) + " is not in the range 0 to 59");  }  if (Math.abs(hours) == 18 && (Math.abs(minutes) > 0 || Math.abs(seconds) > 0)) {    throw new DateTimeException("Zone offset not in valid range: -18:00 to +18:00");  }}  }
class C{  public boolean accept(File dir,String name){  return extensions.contains(getExtension(name));}  }
class C{  public void chain(){  stopping=false;  currentState=0;  timer.start();  if (loggers != null) {    for (    Logger logger : loggers) {      logger.startLogging();    }  }  if (!stopping) {    if (dumpStateFile != null) {      double[] savedLnL=new double[1];      long loadedState=DebugUtils.readStateFromFile(new File(dumpStateFile),savedLnL);      mc.setCurrentLength(loadedState);      double lnL=mc.evaluate();      DebugUtils.writeStateToFile(new File("tmp.dump"),loadedState,lnL);      if (lnL != savedLnL[0]) {        throw new RuntimeException("Dumped lnL does not match loaded state: stored lnL: " + savedLnL[0] + ", recomputed lnL: "+ lnL+ " (difference "+ (savedLnL[0] - lnL)+ ")");      }    }    mc.addMarkovChainListener(chainListener);    for (    MarkovChainDelegate delegate : delegates) {      mc.addMarkovChainDelegate(delegate);    }    long chainLength=getChainLength();    final long coercionDelay=getCoercionDelay();    if (coercionDelay > 0) {      mc.runChain(coercionDelay,true);      chainLength-=coercionDelay;      for (int i=0; i < schedule.getOperatorCount(); i++) {        schedule.getOperator(i).reset();      }    }    if (TEST_CLONING) {      double lnL1=mc.getCurrentScore();      DebugUtils.writeStateToFile(new File("beast.state"),currentState,mc.getCurrentScore());      DebugUtils.readStateFromFile(new File("beast.state"),null);      double lnL2=mc.evaluate();      if (lnL1 != lnL2) {        throw new RuntimeException("Dumped lnL does not match loaded state: stored lnL: " + lnL1 + ", recomputed lnL: "+ lnL2+ " (difference "+ (lnL2 - lnL1)+ ")");      }    }    mc.runChain(chainLength,false);    mc.terminateChain();    mc.removeMarkovChainListener(chainListener);    for (    MarkovChainDelegate delegate : delegates) {      mc.removeMarkovChainDelegate(delegate);    }  }  timer.stop();}  }
class C{  public MirroredTypeException(TypeMirror type){  super("Attempt to access Class object for TypeMirror " + type.toString(),type);  this.type=type;}  }
class C{  public boolean isPseudoClass(int pc){  return ((_pc & pc) != 0);}  }
class C{  public ScaleIOVolume addVolume(String protectionDomainId,String storagePoolId,String volumeName,String volumeSize,boolean thinProvisioned) throws Exception {  ScaleIOCreateVolume volume=new ScaleIOCreateVolume();  Long sizeInKb=Long.parseLong(volumeSize) / 1024L;  volume.setVolumeSizeInKb(sizeInKb.toString());  volume.setStoragePoolId(storagePoolId);  volume.setName(volumeName);  volume.setProtectionDomainId(protectionDomainId);  if (thinProvisioned) {    volume.setVolumeType(ScaleIOConstants.THIN_PROVISIONED);  } else {    volume.setVolumeType(ScaleIOConstants.THICK_PROVISIONED);  }  ClientResponse response=post(URI.create(ScaleIOConstants.VOLUMES_URI),getJsonForEntity(volume));  ScaleIOVolume createdVol=getResponseObject(ScaleIOVolume.class,response);  return queryVolume(createdVol.getId());}  }
class C{  final boolean transferAfterCancelledWait(Node node){  if (compareAndSetWaitStatus(node,Node.CONDITION,0)) {    enq(node);    return true;  }  while (!isOnSyncQueue(node))   Thread.yield();  return false;}  }
class C{  public void retrieveAllEndpointsAndSet(Protocol protocol) throws QueryException {  int port=protocol.getPort();  if ("".equals(urlEndStr) && protocol.getHost().indexOf(".") > -1) {    urlEndStr=protocol.getHost().substring(protocol.getHost().indexOf("."));  }  List<String> endpoints=getCurrentEndpointIdentifiers(protocol);  if (!"".equals(urlEndStr)) {    setUrlParserFromEndpoints(endpoints,port);  }}  }
class C{  public final void freeBuffers(){  byte[] buf=mBuffer;  if (buf != null) {    mBuffer=null;    mContext.releaseReadIOBuffer(buf);  }}  }
class C{  public CholeskyDecomposition(DoubleMatrix2D A){  Property.DEFAULT.checkSquare(A);  n=A.rows();  L=A.like(n,n);  isSymmetricPositiveDefinite=(A.columns() == n);  DoubleMatrix1D[] Lrows=new DoubleMatrix1D[n];  for (int j=0; j < n; j++)   Lrows[j]=L.viewRow(j);  for (int j=0; j < n; j++) {    double d=0.0;    for (int k=0; k < j; k++) {      double s=Lrows[k].zDotProduct(Lrows[j],0,k);      s=(A.getQuick(j,k) - s) / L.getQuick(k,k);      Lrows[j].setQuick(k,s);      d=d + s * s;      isSymmetricPositiveDefinite=isSymmetricPositiveDefinite && (A.getQuick(k,j) == A.getQuick(j,k));    }    d=A.getQuick(j,j) - d;    isSymmetricPositiveDefinite=isSymmetricPositiveDefinite && (d > 0.0);    L.setQuick(j,j,Math.sqrt(Math.max(d,0.0)));    for (int k=j + 1; k < n; k++) {      L.setQuick(j,k,0.0);    }  }}  }
class C{  public static boolean isIdentifier(String string){  if (string == null || string.equals("")) {    return false;  }  return string.matches("[A-Za-z0-9_]*[A-Za-z]{1}[A-Za-z0-9_]*");}  }
class C{  public void remove(int priority){synchronized (lock) {    queue.remove(priority);    highestPriority=queue.isEmpty() ? Integer.MAX_VALUE : queue.peek();    lock.notifyAll();  }}  }
class C{  public NSArray(NSObject... a){  array=a;}  }
class C{  void stop(){  JavaCore.removeElementChangedListener(this);}  }
class C{  public void copy(RepositoryLocation source,Folder destination,String newName,ProgressListener listener) throws RepositoryException {  copy(source,destination,newName,false,listener);}  }
class C{  public void show(){  LayoutParams lp=(LayoutParams)mContentView.getLayoutParams();  lp.height=LayoutParams.WRAP_CONTENT;  mContentView.setLayoutParams(lp);}  }
class C{  protected String generateID(){  String result;  String[] authors;  String[] parts;  result=m_ID;  if (result.length() == 0) {    if (exists(Field.AUTHOR) && exists(Field.YEAR)) {      authors=getAuthors();      if (authors[0].indexOf(",") > -1) {        parts=authors[0].split(",");        result=parts[0];      } else {        parts=authors[0].split(" ");        if (parts.length == 1) {          result=parts[0];        } else {          result=parts[parts.length - 1];        }      }      result+=getValue(Field.YEAR);      result=result.replaceAll(" ","");    }  }  if (result.length() == 0) {    result=MISSING_ID;  }  return result;}  }
class C{  public boolean insertRandomCallOnObject(TestCase test,int position){  VariableReference var=selectVariableForCall(test,position);  boolean success=false;  if (var != null) {    logger.debug("Inserting call at position " + position + ", chosen var: "+ var.getName()+ ", distance: "+ var.getDistance()+ ", class: "+ var.getClassName());    success=insertRandomCallOnObjectAt(test,var,position);  }  if (!success) {    if (reflectionFactory == null) {      final Class<?> targetClass=Properties.getTargetClassAndDontInitialise();      reflectionFactory=new ReflectionFactory(targetClass);    }    if (TestCluster.getInstance().getNumTestCalls() > 0 || (reflectionFactory.hasPrivateFieldsOrMethods() && TimeController.getInstance().getPhasePercentage() >= Properties.REFLECTION_START_PERCENT)) {      logger.debug("Adding new call on UUT because var was null");      success=insertRandomCall(test,position);    }  }  return success;}  }
class C{  private void addPendingChange(final PendingChange newPendingChange,final boolean forRefill){  final PendingChange oldPendingChange=changes.add(newPendingChange,forRefill);  final PendingChangeCacheEvent event=new PendingChangeCacheEvent(this,oldPendingChange,newPendingChange);synchronized (operationDepthAndModificationLock) {    changesModifiedInOperation=true;  }  if (oldPendingChange == null) {    getListener().onPendingChangeAdded(event);  } else {    getListener().onPendingChangeModified(event);  }}  }
class C{  private void initialize(){  initializeUndoHistory();  fCurrent=new UndoableRichTextChange(this);  fPreviousDelete=new UndoableRichTextChange(this);  fTextBuffer=new StringBuffer();  fPreservedTextBuffer=new StringBuffer();  addListeners();}  }
class C{  public void resetCount(){  cntMap.clear();}  }
class C{  @Override protected MetaRuleset createMetaRuleset(Class type){  Util.notNull("type",type);  return new MetaRulesetImpl(this.tag,type);}  }
class C{  public static boolean hasSisterTagWithSameName(Tag tag){  Body body=(Body)tag.getParent();  List<Statement> stats=body.getStatements();  Iterator<Statement> it=stats.iterator();  Statement other;  String name=tag.getTagLibTag().getName();  while (it.hasNext()) {    other=it.next();    if (other != tag && other instanceof Tag && ((Tag)other).getTagLibTag().getName().equals(name))     return true;  }  return false;}  }
class C{  @Override public void endWindow(){  super.endWindow();  streamsCache.asMap().clear();  endOffsets.clear();  for (  BlockMetadata.FileBlockMetadata blockMetadata : blockMetadatas) {    try {      finalizeFile(Long.toString(blockMetadata.getBlockId()));    } catch (    IOException e) {      throw new RuntimeException(e);    }    blockMetadataOutput.emit(blockMetadata);  }  blockMetadatas.clear();}  }
class C{  public ClasspathResourceLoader(){  this(Thread.currentThread().getContextClassLoader());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public double noise(double x,double y,double z,double w,double frequency,double amplitude){  return this.noise(x,y,z,w,frequency,amplitude,false);}  }
class C{  public boolean isDottedUnderlineTriple(Node x,Node y,Node z){  return getGraph().isDottedUnderlineTriple(x,y,z);}  }
class C{  int test(JCCompilationUnit tree){  sourcefile=tree.sourcefile;  found=new HashSet<JCTree>();  scan(tree);  expect=new HashSet<JCTree>();  reflectiveScan(tree);  if (found.equals(expect)) {    return found.size();  }  error(sourcefile,"differences found");  if (found.size() != expect.size())   error("Size mismatch; found: " + found.size() + ", expected: "+ expect.size());  Set<JCTree> missing=new HashSet<JCTree>();  missing.addAll(expect);  missing.removeAll(found);  for (  JCTree t : missing)   error(sourcefile,t,"missing");  Set<JCTree> excess=new HashSet<JCTree>();  excess.addAll(found);  excess.removeAll(expect);  for (  JCTree t : excess)   error(sourcefile,t,"unexpected");  return 0;}  }
class C{  public JSONObject makeProfileMethodProps(final ProfileMethod profileMethod){  JSONObject props;  try {    props=new JSONObject();    props.put("Via",profileMethod.code);  } catch (  JSONException e) {    Logger.e(TAG,"Error building Mixpanel Props",e);    props=null;  }  return props;}  }
class C{  public static void updateParticipants(DLockService svc,TXLockId txLockId,Set updatedParticipants){  DLockGrantor grantor=null;  try {    grantor=DLockGrantor.waitForGrantor(svc);    if (grantor != null) {      try {        TXLockBatch txb=(TXLockBatch)grantor.getLockBatch(txLockId);        if (txb == null) {          return;        }        txb.setParticipants(updatedParticipants);        grantor.updateLockBatch(txLockId,txb);      } catch (      LockGrantorDestroyedException ignoreit) {      }    }  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();  }}  }
class C{  private void resetToStream(){  this.m_cdataStartCalled=false;  this.m_disableOutputEscapingStates.clear();  this.m_escaping=true;  this.m_expandDTDEntities=true;  this.m_inDoctype=false;  this.m_ispreserve=false;  this.m_isprevtext=false;  this.m_isUTF8=false;  this.m_lineSep=s_systemLineSep;  this.m_lineSepLen=s_systemLineSep.length;  this.m_lineSepUse=true;  this.m_preserves.clear();  this.m_shouldFlush=true;  this.m_spaceBeforeClose=false;  this.m_startNewLine=false;  this.m_writer_set_by_user=false;}  }
class C{  private static boolean isCde(){  return false;}  }
class C{  @Override protected void handleUnsuccessfulInteriorTessellation(DrawContext dc){  super.handleUnsuccessfulInteriorTessellation(dc);  this.boundaries.clear();  this.onShapeChanged();}  }
class C{  public static double powQuick(double value,double power){  if (USE_JDK_MATH) {    return STRICT_MATH ? StrictMath.pow(value,power) : Math.pow(value,power);  }  return FastMath.exp(power * FastMath.logQuick(value));}  }
class C{  Worker(Runnable firstTask){  this.firstTask=firstTask;  this.thread=getThreadFactory().newThread(this);}  }
class C{  public static HadoopDefaultJobInfo createJobInfo(Configuration cfg) throws IgniteCheckedException {  JobConf jobConf=new JobConf(cfg);  boolean hasCombiner=jobConf.get("mapred.combiner.class") != null || jobConf.get(MRJobConfig.COMBINE_CLASS_ATTR) != null;  int numReduces=jobConf.getNumReduceTasks();  jobConf.setBooleanIfUnset("mapred.mapper.new-api",jobConf.get(OLD_MAP_CLASS_ATTR) == null);  if (jobConf.getUseNewMapper()) {    String mode="new map API";    ensureNotSet(jobConf,"mapred.input.format.class",mode);    ensureNotSet(jobConf,OLD_MAP_CLASS_ATTR,mode);    if (numReduces != 0)     ensureNotSet(jobConf,"mapred.partitioner.class",mode); else     ensureNotSet(jobConf,"mapred.output.format.class",mode);  } else {    String mode="map compatibility";    ensureNotSet(jobConf,MRJobConfig.INPUT_FORMAT_CLASS_ATTR,mode);    ensureNotSet(jobConf,MRJobConfig.MAP_CLASS_ATTR,mode);    if (numReduces != 0)     ensureNotSet(jobConf,MRJobConfig.PARTITIONER_CLASS_ATTR,mode); else     ensureNotSet(jobConf,MRJobConfig.OUTPUT_FORMAT_CLASS_ATTR,mode);  }  if (numReduces != 0) {    jobConf.setBooleanIfUnset("mapred.reducer.new-api",jobConf.get(OLD_REDUCE_CLASS_ATTR) == null);    if (jobConf.getUseNewReducer()) {      String mode="new reduce API";      ensureNotSet(jobConf,"mapred.output.format.class",mode);      ensureNotSet(jobConf,OLD_REDUCE_CLASS_ATTR,mode);    } else {      String mode="reduce compatibility";      ensureNotSet(jobConf,MRJobConfig.OUTPUT_FORMAT_CLASS_ATTR,mode);      ensureNotSet(jobConf,MRJobConfig.REDUCE_CLASS_ATTR,mode);    }  }  Map<String,String> props=new HashMap<>();  for (  Map.Entry<String,String> entry : jobConf)   props.put(entry.getKey(),entry.getValue());  return new HadoopDefaultJobInfo(jobConf.getJobName(),jobConf.getUser(),hasCombiner,numReduces,props);}  }
class C{  public int index(){  return m_index;}  }
class C{  public double estimateY(double x){  return super.estimateY(xMatrix(new double[]{x},p));}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}") @CheckPermission(roles={Role.TENANT_APPROVER}) public ApprovalRestRep updateApproval(@PathParam("id") URI id,ApprovalUpdateParam param){  ApprovalRequest approval=getApprovalById(id,true);  StorageOSUser user=getUserFromContext();  verifyAuthorizedInTenantOrg(uri(approval.getTenant()),user);  Order order=orderManager.getOrderById(approval.getOrderId());  if (order.getSubmittedByUserId().equals(user.getUserName()) && param.getApprovalStatus().equals(ApprovalStatus.APPROVED.toString())) {    throw APIException.badRequests.updateApprovalBySameUser(user.getUserName());  }  validateParam(param,approval);  updateObject(approval,param);  approvalManager.updateApproval(approval,user);  if (approval.getOrderId() != null) {    if (order != null) {      orderManager.processOrder(order);    }  }  auditOpSuccess(OperationTypeEnum.UPDATE_APPROVAL,approval.auditParameters());  approval=approvalManager.getApprovalById(approval.getId());  return map(approval);}  }
class C{  @Override public String popupLoaderBackgroundColor(){  return "#212325";}  }
class C{  public VNXeCommandJob deleteFileSystem(String fsId,boolean forceSnapDeletion) throws VNXeException {  _logger.info("deleting file system: " + fsId);  DeleteStorageResourceRequest req=new DeleteStorageResourceRequest(_khClient);  return req.deleteFileSystemAsync(fsId,forceSnapDeletion);}  }
class C{  void addFillComponents(Container panel,int[] cols,int[] rows){  Dimension filler=new Dimension(10,10);  boolean filled_cell_11=false;  CellConstraints cc=new CellConstraints();  if (cols.length > 0 && rows.length > 0) {    if (cols[0] == 1 && rows[0] == 1) {      panel.add(Box.createRigidArea(filler),cc.xy(1,1));      filled_cell_11=true;    }  }  for (int index=0; index < cols.length; index++) {    if (cols[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(cols[index],1));  }  for (int index=0; index < rows.length; index++) {    if (rows[index] == 1 && filled_cell_11) {      continue;    }    panel.add(Box.createRigidArea(filler),cc.xy(1,rows[index]));  }}  }
class C{  @Override public MethodVisitor visitMethod(final int access,final String name,final String desc,final String signature,final String[] exceptions){  MethodVisitor mv=cv.visitMethod(access,name,desc,signature,exceptions);  if (mv != null) {    Set<Class<? extends Annotation>> annotations=findAnnotationsForMethod(className,name,desc);    if (annotations != null) {      if (VERBOSE)       System.out.println("Found method: " + name);      return new AddAnnotationMethodAdapter(mv,annotations);    }  }  return mv;}  }
class C{  public JSONObject putOpt(String key,Object value) throws JSONException {  if (key != null && value != null) {    this.put(key,value);  }  return this;}  }
class C{  public void exiting(String sourceClass,String sourceMethod){  logp(Level.FINER,sourceClass,sourceMethod,"RETURN");}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static StreamTimestamp of(Instant timestamp){  return of("",timestamp);}  }
class C{  private GeneralName createGeneralName(String t,String v) throws Exception {  GeneralNameInterface gn;  int p=oneOf(t,"EMAIL","URI","DNS","IP","OID");  if (p < 0) {    throw new Exception(rb.getString("Unrecognized.GeneralName.type.") + t);  }switch (p) {case 0:    gn=new RFC822Name(v);  break;case 1:gn=new URIName(v);break;case 2:gn=new DNSName(v);break;case 3:gn=new IPAddressName(v);break;default :gn=new OIDName(v);break;}return new GeneralName(gn);}  }
class C{  public void emit(int val){  numEntries+=1;  breaks();  emitUC(val >> 16);  emitUC(val & 0xFFFF);}  }
class C{  public void visitInsn(int opcode){  if (mv != null) {    mv.visitInsn(opcode);  }}  }
class C{  public OutputProperties(String method){  m_properties=new Properties(OutputPropertiesFactory.getDefaultMethodProperties(method));}  }
class C{  static public String printProp(MessageProp prop){  StringBuffer sb=new StringBuffer();  sb.append("MessagePop: ");  sb.append("QOP=" + prop.getQOP() + ", ");  sb.append(prop.getPrivacy() ? "privacy, " : "");  sb.append(prop.isDuplicateToken() ? "dup, " : "");  sb.append(prop.isGapToken() ? "gap, " : "");  sb.append(prop.isOldToken() ? "old, " : "");  sb.append(prop.isUnseqToken() ? "unseq, " : "");  if (prop.getMinorStatus() != 0) {    sb.append(prop.getMinorString() + "(" + prop.getMinorStatus()+ ")");  }  return sb.toString();}  }
class C{  public static byte[] doubleToBytes(double val){  return longToBytes(Double.doubleToRawLongBits(val));}  }
class C{  public void ruleR0(Graph graph){  graph.reorientAllWith(Endpoint.CIRCLE);  fciOrientbk(knowledge,graph,graph.getNodes());  List<Node> nodes=graph.getNodes();  for (  Node b : nodes) {    List<Node> adjacentNodes=graph.getAdjacentNodes(b);    if (adjacentNodes.size() < 2) {      continue;    }    ChoiceGenerator cg=new ChoiceGenerator(adjacentNodes.size(),2);    int[] combination;    while ((combination=cg.next()) != null) {      Node a=adjacentNodes.get(combination[0]);      Node c=adjacentNodes.get(combination[1]);      if (graph.isAdjacentTo(a,c)) {        continue;      }      if (graph.isDefCollider(a,b,c)) {        continue;      }      if (sepsets.isCollider(a,b,c)) {        if (!isArrowpointAllowed(a,b,graph)) {          continue;        }        if (!isArrowpointAllowed(c,b,graph)) {          continue;        }        graph.setEndpoint(a,b,Endpoint.ARROW);        graph.setEndpoint(c,b,Endpoint.ARROW);        if (verbose) {          logger.log("colliderOrientations",SearchLogUtils.colliderOrientedMsg(a,b,c));          System.out.println(SearchLogUtils.colliderOrientedMsg(a,b,c));          String location="R0";          printWrongColliderMessage(a,b,c,location,graph);        }        this.orientSimilarPairs(graph,knowledge,a,b,Endpoint.ARROW);        this.orientSimilarPairs(graph,knowledge,c,b,Endpoint.ARROW);      }    }  }}  }
class C{  private boolean deleteRecursive(File f,boolean deleteIfExists){  BasicFileAttributes attrs;  try {    attrs=Files.readAttributes(f.toPath(),BasicFileAttributes.class,LinkOption.NOFOLLOW_LINKS);  } catch (  IOException ignore) {    return deleteIfExists && !f.exists();  }  if (!attrs.isDirectory() || attrs.isSymbolicLink())   return f.delete() || (deleteIfExists && !f.exists());  File[] entries=f.listFiles();  if (entries != null) {    for (    File entry : entries) {      boolean res=deleteRecursive(entry,true);      if (!res)       return false;    }  }  return f.delete() || (deleteIfExists && !f.exists());}  }
class C{  @Override protected EClass eStaticClass(){  return StextPackage.Literals.STATE_ROOT;}  }
class C{  public IconicsDrawable sizeDp(int size){  return sizePx(Utils.convertDpToPx(mContext,size));}  }
class C{  public void removeListener(INotifyChangedListener notifyChangedListener){  changeNotifier.removeListener(notifyChangedListener);}  }
class C{  public void visitAttribute(Attribute attr){  if (mv != null) {    mv.visitAttribute(attr);  }}  }
class C{  public void characters(char ch[],int start,int length) throws SAXException {  flushStartDoc();  m_resultContentHandler.characters(ch,start,length);}  }
class C{  @RequestMapping(value="/SAML2/IDPSSO/{tenant:.*}",method=RequestMethod.GET) public ModelAndView sso(Locale locale,@PathVariable(value="tenant") String tenant,HttpServletRequest request,HttpServletResponse response) throws IOException {  logger.info("Welcome to IDP-initiated AuthnRequest handler! " + "The client locale is " + locale.toString() + ", tenant is "+ tenant);  ModelAndView retval=null;  String correlationId=UUID.randomUUID().toString();  DefaultIdmAccessorFactory factory=new DefaultIdmAccessorFactory(correlationId);  try {    SamlServiceFactory samlFactory=new DefaultSamlServiceFactory();    SamlService service=samlFactory.createSamlService(null,null,null,null,null);    IdmAccessor accessor=factory.getIdmAccessor();    accessor.setTenant(tenant);    String destination=accessor.getIdpSsoEndpoint();    String providerEntityID=request.getParameter(PROVIDER_ENTITY_ID);    if (providerEntityID == null) {      logger.debug("MISSING entity ID in IDPSSO request");      throw new Exception("Entity ID required");    }    String nameIDFormat=request.getParameter(NAME_ID_FORMAT);    String assertionIndex=request.getParameter(ASSERTION_CONSUMER_SERVICE_INDEX);    Integer index1=null;    if (assertionIndex != null) {      index1=Integer.parseInt(assertionIndex);    }    String attributeIndex=request.getParameter(ATTRIBUTE_CONSUMER_SERVICE_INDEX);    Integer index2=null;    if (attributeIndex != null) {      index2=Integer.parseInt(attributeIndex);    }    String forceAuthn=request.getParameter(FORCE_AUTHN);    Boolean b1=null;    if (forceAuthn != null) {      b1=Boolean.parseBoolean(forceAuthn);    }    String isPassive=request.getParameter(IS_PASSIVE);    Boolean b2=null;    if (isPassive != null) {      b2=Boolean.parseBoolean(isPassive);    }    AuthnRequest authnRequest=service.createSamlAuthnRequest(null,destination,providerEntityID,nameIDFormat,index1,index2,b1,b2);    logger.info("AuthnRequest formed {}",authnRequest);    String samlRequestParameter=service.encodeSAMLObject(authnRequest);    StringBuilder stringBuilder=new StringBuilder();    stringBuilder.append(authnRequest.getDestination());    stringBuilder.append("?");    stringBuilder.append(service.generateRedirectUrlQueryStringParameters(samlRequestParameter,null,request.getParameter(Shared.RELAY_STATE_PARAMETER),null,null));    String redirectUrl=stringBuilder.toString();    logger.info("Redirecting you to: {}",redirectUrl);    RedirectView redirect=new RedirectView(redirectUrl);    retval=new ModelAndView(redirect);  } catch (  Exception e) {    logger.error("Caught exception",e);    ValidationResult vr=new ValidationResult(HttpServletResponse.SC_BAD_REQUEST,"BadRequest",null);    String message=vr.getMessage(messageSource,locale);    response.sendError(vr.getResponseCode(),message);    logger.info("Responded with ERROR " + vr.getResponseCode() + ", message "+ message);    retval=null;  }  return retval;}  }
class C{  public static boolean isGroupSharingLoot(){  return groupLootmode != null && groupLootmode.equals("shared");}  }
class C{  private void init(){  try {    vnTextPro=new JVnTextPro();    if (option.doSenToken)     vnTextPro.initSenTokenization();    if (option.doSenSeg)     vnTextPro.initSenSegmenter(option.modelDir + File.separator + "jvnsensegmenter");    if (option.doWordSeg)     vnTextPro.initSegmenter(option.modelDir + File.separator + "jvnsegmenter");    if (option.doPosTagging)     vnTextPro.initPosTagger(option.modelDir + File.separator + "jvnpostag"+ File.separator+ "maxent");    pool=new Vector<Session>();    for (int i=0; i < maxNSession; ++i) {      Session w=new Session(vnTextPro);      w.start();      pool.add(w);    }  } catch (  Exception e) {    System.out.println("Error while initilizing service:" + e.getMessage());    e.printStackTrace();  }}  }
class C{  public boolean addAll(Collection<? extends E> c){  Object[] cs=(c.getClass() == CopyOnWriteArrayList.class) ? ((CopyOnWriteArrayList<?>)c).getArray() : c.toArray();  if (cs.length == 0)   return false;  final ReentrantLock lock=this.lock;  lock.lock();  try {    Object[] elements=getArray();    int len=elements.length;    if (len == 0 && cs.getClass() == Object[].class)     setArray(cs); else {      Object[] newElements=Arrays.copyOf(elements,len + cs.length);      System.arraycopy(cs,0,newElements,len,cs.length);      setArray(newElements);    }    return true;  }  finally {    lock.unlock();  }}  }
class C{  protected PackageMemberImpl(){  super();}  }
class C{  private ScriptableObject createContext(final ScriptableObject initialScope){  final Context context=getContext();  context.setOptimizationLevel(-1);  context.setErrorReporter(new ToolErrorReporter(false));  context.setLanguageVersion(Context.VERSION_1_8);  InputStream script=null;  final ScriptableObject scriptCommon=(ScriptableObject)context.initStandardObjects(initialScope);  try {    script=new AutoCloseInputStream(getClass().getResourceAsStream("commons.js"));    context.evaluateReader(scriptCommon,new InputStreamReader(script),"commons.js",1,null);  } catch (  final IOException e) {    throw new RuntimeException("Problem while evaluationg commons script.",e);  } finally {    IOUtils.closeQuietly(script);  }  return scriptCommon;}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,byte[] alphabet){  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=alphabet[(inBuff >>> 18)];  destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=alphabet[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public Object clone() throws CloneNotSupportedException {  AxesWalker clone=(AxesWalker)super.clone();  return clone;}  }
class C{  private static Boolean isZeroCross(byte[] buf,int len,int format,ByteOrder order){  if (format == AL.AL_FORMAT_MONO8) {    if (len < 3) {      return false;    } else {      return (((0xFF & buf[len - 3]) < 128) && ((0xFF & buf[len - 2]) < 128) && ((0xFF & buf[len - 1]) >= 128));    }  } else   if (format == AL.AL_FORMAT_MONO16) {    if (len < 6) {      return false;    }    short[] sbuf=new short[len / 2];    ByteBuffer bb=ByteBuffer.wrap(buf);    bb.order(order);    sbuf[0]=bb.getShort();    sbuf[1]=bb.getShort();    sbuf[2]=bb.getShort();    return ((sbuf[0] < 0) && (sbuf[1] < 0) && (sbuf[2] >= 0));  } else {    return false;  }}  }
class C{  public Note withUser(User user){  this.user=user;  return this;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HomeTitleDB\"";  db.execSQL(sql);}  }
class C{  private void interpretUndef(final ReilInstruction instruction){  registers.remove(instruction.getThirdOperand().getValue());}  }
class C{  private static boolean contains(String value,int start,int length,String criteria1,String criteria2,String criteria3,String criteria4,String criteria5){  return contains(value,start,length,new String[]{criteria1,criteria2,criteria3,criteria4,criteria5});}  }
class C{  public static String encode(final String value,final String encoding){  try {    return (value != null ? URLEncoder.encode(value,encoding) : value);  } catch (  UnsupportedEncodingException ignore) {    return value;  }}  }
class C{  public URI(String p_scheme,String p_userinfo,String p_host,int p_port,String p_path,String p_queryString,String p_fragment) throws MalformedURIException {  if (p_scheme == null || p_scheme.trim().length() == 0) {    throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_SCHEME_REQUIRED,null));  }  if (p_host == null) {    if (p_userinfo != null) {      throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_NO_USERINFO_IF_NO_HOST,null));    }    if (p_port != -1) {      throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_NO_PORT_IF_NO_HOST,null));    }  }  if (p_path != null) {    if (p_path.indexOf('?') != -1 && p_queryString != null) {      throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_NO_QUERY_STRING_IN_PATH,null));    }    if (p_path.indexOf('#') != -1 && p_fragment != null) {      throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_NO_FRAGMENT_STRING_IN_PATH,null));    }  }  setScheme(p_scheme);  setHost(p_host);  setPort(p_port);  setUserinfo(p_userinfo);  setPath(p_path);  setQueryString(p_queryString);  setFragment(p_fragment);}  }
class C{  private Handler<Void> installAfterHandler(final HttpServerRequest request,final Buffer buffer,final List<Listener> afterListener){  Handler<Void> afterHandler=null;  return afterHandler;}  }
class C{  public java.lang.String toString(){  return null;}  }
class C{  public About(java.awt.Component parent){  super((Frame)SwingUtilities.windowForComponent(parent),true);  initComponents();  Properties p=new Properties();  try {    p.load(getClass().getResourceAsStream("/version.properties"));  } catch (  IOException ex) {    ex.printStackTrace();  }  buildNumber.setText(p.getProperty("build","1"));  pack();  setLocationRelativeTo(parent);  setVisible(true);}  }
class C{  private void auditOp(OperationTypeEnum opType,boolean operationalStatus,String operationStage,Object... descparams){  URI tenantId;  URI username;  if (!BlockServiceUtils.hasValidUserInContext(_securityContext) && InterNodeHMACAuthFilter.isInternalRequest(_request)) {    tenantId=_permissionsHelper.getRootTenant().getId();    username=ResourceService.INTERNAL_DATASVC_USER;  } else {    StorageOSUser user=BlockServiceUtils.getUserFromContext(_securityContext);    tenantId=URI.create(user.getTenantId());    username=URI.create(user.getName());  }  _auditLogManager.recordAuditLog(tenantId,username,BlockService.EVENT_SERVICE_TYPE,opType,System.currentTimeMillis(),operationalStatus ? AuditLogManager.AUDITLOG_SUCCESS : AuditLogManager.AUDITLOG_FAILURE,operationStage,descparams);}  }
class C{  public void updateServerInfo(ServerInfo server){  putServerInList(server);  saveDomoticzServers(false);}  }
class C{  public String deleteTriggerProcesses() throws SaaSApplicationException {  if (triggerProcessList != null) {    List<Long> keys=new ArrayList<Long>();    for (    TriggerProcess triggerProcess : triggerProcessList) {      if (triggerProcess.isSelected()) {        keys.add(Long.valueOf(triggerProcess.getKey()));      }    }    try {      getTriggerService().deleteActions(keys);    } catch (    ObjectNotFoundException e) {      triggerProcessList=null;      throw new ConcurrentModificationException();    }    triggerProcessList=null;    if (keys.size() > 0) {      addMessage(null,FacesMessage.SEVERITY_INFO,TRIGGER_PROCESS_DELETED);    }  }  return OUTCOME_REFRESH;}  }
class C{  public static byte[] nullToEmpty(byte[] array){  if (array == null || array.length == 0) {    return EMPTY_BYTE_ARRAY;  }  return array;}  }
class C{  private void findSubqueries(Blackboard bb,SqlNode node,RelOptUtil.Logic logic,boolean registerOnlyScalarSubqueries){  final SqlKind kind=node.getKind();switch (kind) {case EXISTS:case SELECT:case MULTISET_QUERY_CONSTRUCTOR:case MULTISET_VALUE_CONSTRUCTOR:case ARRAY_QUERY_CONSTRUCTOR:case CURSOR:case SCALAR_QUERY:    if (!registerOnlyScalarSubqueries || (kind == SqlKind.SCALAR_QUERY)) {      bb.registerSubquery(node,RelOptUtil.Logic.TRUE_FALSE);    }  return;case IN:if (((SqlCall)node).getOperator() == SqlStdOperatorTable.NOT_IN) {  logic=logic.negate();}break;case NOT:logic=logic.negate();break;}if (node instanceof SqlCall) {if (kind == SqlKind.OR || kind == SqlKind.NOT) {bb.subqueryNeedsOuterJoin=true;}for (SqlNode operand : ((SqlCall)node).getOperandList()) {if (operand != null) {findSubqueries(bb,operand,logic,kind == SqlKind.IN || registerOnlyScalarSubqueries);}}} else if (node instanceof SqlNodeList) {for (SqlNode child : (SqlNodeList)node) {findSubqueries(bb,child,logic,kind == SqlKind.IN || registerOnlyScalarSubqueries);}}if (kind == SqlKind.IN) {if (logic == RelOptUtil.Logic.TRUE_FALSE_UNKNOWN && !validator.getValidatedNodeType(node).isNullable()) {logic=RelOptUtil.Logic.UNKNOWN_AS_FALSE;}if (logic == RelOptUtil.Logic.UNKNOWN_AS_FALSE && !bb.subqueryNeedsOuterJoin) {logic=RelOptUtil.Logic.TRUE;}bb.registerSubquery(node,logic);}}  }
class C{  public void print(float x){  out.print(x);  out.flush();}  }
class C{  public void deleteAssetScenarioLinks(String executionId){  boolean dummyAuthAdded=false;  SecurityContext ctx=SecurityContextHolder.getContext();  try {    if (ctx.getAuthentication() == null) {      ctx.setAuthentication(authentication);      dummyAuthAdded=true;    }    doDeleteAssetScenarioLinks(executionId);  }  finally {    if (dummyAuthAdded) {      ctx.setAuthentication(null);      dummyAuthAdded=false;    }  }}  }
class C{  @Override public WorkOrderEstimate calculateCumulativeDetailsForRE(final WorkOrderEstimate workOrderEstimate){  final List<WorkOrderActivity> woaList=workOrderEstimate.getWorkOrderActivities();  double lPrevCumlvQuant=0;  for (  final WorkOrderActivity detail : woaList) {    if (detail.getActivity().getParent() == null) {      lPrevCumlvQuant=measurementBookService.prevCumulativeQuantityIncludingCQ(detail.getId(),null,detail.getActivity().getId(),workOrderEstimate.getWorkOrder());      detail.setTotalEstQuantity(measurementBookService.totalEstimatedQuantityForPreviousREs(detail.getId(),workOrderEstimate.getEstimate().getId(),detail.getActivity().getId(),workOrderEstimate.getWorkOrder()));    } else {      WorkOrderActivity woa=null;      if (detail.getActivity().getParent().getRevisionType() != null && (detail.getActivity().getParent().getRevisionType().equals(RevisionType.NON_TENDERED_ITEM) || detail.getActivity().getParent().getRevisionType().equals(RevisionType.LUMP_SUM_ITEM)))       woa=(WorkOrderActivity)genericService.find("from WorkOrderActivity where activity.id=? and workOrderEstimate.estimate.id=?",detail.getActivity().getParent().getId(),detail.getActivity().getParent().getAbstractEstimate().getId()); else       woa=(WorkOrderActivity)genericService.find("from WorkOrderActivity where activity.id=? and workOrderEstimate.estimate.id=?",detail.getActivity().getParent().getId(),workOrderEstimate.getEstimate().getParent().getId());      detail.setParent(woa);      lPrevCumlvQuant=measurementBookService.prevCumulativeQuantityIncludingCQ(detail.getId(),null,detail.getActivity().getParent().getId(),workOrderEstimate.getWorkOrder().getParent());      detail.setTotalEstQuantity(measurementBookService.totalEstimatedQuantityForPreviousREs(detail.getId(),workOrderEstimate.getEstimate().getId(),detail.getActivity().getParent().getId(),workOrderEstimate.getWorkOrder().getParent()));    }    if (detail.getTotalEstQuantity() == 0 && detail.getParent() != null && detail.getParent().getActivity().getQuantity() != 0)     detail.setTotalEstQuantity(detail.getApprovedQuantity());    detail.setPrevCumlvQuantity(lPrevCumlvQuant);  }  return workOrderEstimate;}  }
class C{  public static double mad(final double[] data){  double mad=0;  if (data.length > 0) {    double median=median(data);    double[] deviationSum=new double[data.length];    for (int i=0; i < data.length; i++) {      deviationSum[i]=Math.abs(median - data[i]);    }    mad=median(deviationSum);  }  return mad;}  }
class C{  public static byte[] ipStrToBytes(String ip) throws IOException {  if (!InetAddress.isNumeric(ip)) {    throw new IOException("Not an IP address: " + ip);  }  return InetAddress.getByName(ip).getAddress();}  }
class C{  public boolean isWriteComplete(){  long seqClose=_sequenceClose.get();  long seqWrite=_sequenceWrite.get();  return seqClose > 0 && seqClose <= seqWrite;}  }
class C{  public String toString(){  String header;  header=PI + "\n\n";  if (getDocType() != null)   header+=getDocType() + "\n\n";  return toString(new StringBuffer(header),getDocument().getDocumentElement(),0).toString();}  }
class C{  public int either(){  return v;}  }
class C{  public void testObject(){  SpellCheckedMetadata meta1=new SpellCheckedMetadata();  SpellCheckedMetadata meta2=new SpellCheckedMetadata();  assertFalse(meta1.equals(null));  assertFalse(meta1.equals("String"));  assertTrue(meta1.equals(meta2));  meta1.add("name-one","value-1.1");  assertFalse(meta1.equals(meta2));  meta2.add("name-one","value-1.1");  assertTrue(meta1.equals(meta2));  meta1.add("name-one","value-1.2");  assertFalse(meta1.equals(meta2));  meta2.add("name-one","value-1.2");  assertTrue(meta1.equals(meta2));  meta1.add("name-two","value-2.1");  assertFalse(meta1.equals(meta2));  meta2.add("name-two","value-2.1");  assertTrue(meta1.equals(meta2));  meta1.add("name-two","value-2.2");  assertFalse(meta1.equals(meta2));  meta2.add("name-two","value-2.x");  assertFalse(meta1.equals(meta2));}  }
class C{  public UTMCoord(Angle latitude,Angle longitude,int zone,String hemisphere,double easting,double northing){  this(latitude,longitude,zone,hemisphere,easting,northing,Angle.fromDegreesLongitude(0.0));}  }
class C{  public <T extends Point2D>T inverse(double x,double y,T llp){  if (llp == null) {    llp=(T)new LatLonPoint.Double();  }  x-=wx;  y=hy - y;  double wc=asinh_of_tanCtrLat * scaled_radius;  llp.setLocation(Math.toDegrees(wrapLongitude(x / scaled_radius + centerX)),Math.toDegrees(normalizeLatitude(Math.atan(Math.sinh((y + wc) / scaled_radius)))));  return llp;}  }
class C{  private void testIsoYearJanuary1thMonday() throws Exception {  assertEquals(2006,getIsoYear(parse("2006-12-28")));  assertEquals(2006,getIsoYear(parse("2006-12-29")));  assertEquals(2006,getIsoYear(parse("2006-12-30")));  assertEquals(2006,getIsoYear(parse("2006-12-31")));  assertEquals(2007,getIsoYear(parse("2007-01-01")));  assertEquals(2007,getIsoYear(parse("2007-01-02")));  assertEquals(2007,getIsoYear(parse("2007-01-03")));}  }
class C{  private void startVoiceRecognitionActivity(){  Intent intent=new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);  intent.putExtra(RecognizerIntent.EXTRA_CALLING_PACKAGE,getClass().getPackage().getName());  intent.putExtra(RecognizerIntent.EXTRA_PROMPT,"Speech recognition demo");  intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL,RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);  intent.putExtra(RecognizerIntent.EXTRA_MAX_RESULTS,5);  if (!mSupportedLanguageView.getSelectedItem().toString().equals("Default")) {    intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE,mSupportedLanguageView.getSelectedItem().toString());  }  startActivityForResult(intent,VOICE_RECOGNITION_REQUEST_CODE);}  }
class C{  public synchronized void writeNextPart(String username,byte[] data) throws JPlagException {  TransferObject obj=userToUploadMap.get(username);  if (obj == null) {    throw new JPlagException("uploadException","No upload started " + "or upload timed out!","Restart the upload");  }  uploadTimeoutQueue.remove(obj);  if (!obj.writeNextPart(data)) {    obj.setTimeout(120);    uploadTimeoutQueue.add(obj);  } else {    userToUploadMap.remove(username);    JPlagCentral.addToReadyQueue(obj.getStruct());  }}  }
class C{  public Consumer(SystemConfiguration configuration){  this._configuration=configuration;  this._mapper=new ObjectMapper();  MAX_BUFFER_SIZE=Integer.parseInt(_configuration.getValue(Property.KAFKA_CONSUMER_MESSAGES_TO_BUFFER.getName(),Property.KAFKA_CONSUMER_MESSAGES_TO_BUFFER.getDefaultValue()));}  }
class C{  public static BigdataGraph connect(final String sparqlEndpointURL){  return new BigdataGraphClient(BigdataSailFactory.connect(sparqlEndpointURL));}  }
class C{  private BigDecimal calcAmount(BigDecimal tax,BigDecimal total,BigDecimal amt,int precision){  log.fine("Amt=" + amt + " - Total="+ total+ ", Tax="+ tax);  if (tax.signum() == 0 || total.signum() == 0 || amt.signum() == 0)   return Env.ZERO;  BigDecimal multiplier=tax.divide(total,10,BigDecimal.ROUND_HALF_UP);  BigDecimal retValue=multiplier.multiply(amt);  if (retValue.scale() > precision)   retValue=retValue.setScale(precision,BigDecimal.ROUND_HALF_UP);  log.fine(retValue + " (Mult=" + multiplier+ "(Prec="+ precision+ ")");  return retValue;}  }
class C{  public void add(Statistic statistic){  this.statistics.add(statistic);}  }
class C{  public void testCrazySpans() throws Exception {  Directory dir=newDirectory();  RandomIndexWriter iw=new RandomIndexWriter(random(),dir);  Document doc=new Document();  FieldType ft=new FieldType(TextField.TYPE_NOT_STORED);  doc.add(newField("foo","bar",ft));  iw.addDocument(doc);  IndexReader ir=iw.getReader();  iw.close();  IndexSearcher is=newSearcher(ir);  for (  Similarity sim : sims) {    is.setSimilarity(sim);    SpanTermQuery s1=new SpanTermQuery(new Term("foo","bar"));    SpanTermQuery s2=new SpanTermQuery(new Term("foo","baz"));    Query query=new SpanOrQuery(s1,s2);    TopDocs td=is.search(query,10);    assertEquals(1,td.totalHits);    float score=td.scoreDocs[0].score;    assertFalse("negative score for " + sim,score < 0.0f);    assertFalse("inf score for " + sim,Float.isInfinite(score));    assertFalse("nan score for " + sim,Float.isNaN(score));  }  ir.close();  dir.close();}  }
class C{  public SolrQuery addNumericRangeFacet(String field,Number start,Number end,Number gap){  add(FacetParams.FACET_RANGE,field);  add(String.format(Locale.ROOT,"f.%s.%s",field,FacetParams.FACET_RANGE_START),start.toString());  add(String.format(Locale.ROOT,"f.%s.%s",field,FacetParams.FACET_RANGE_END),end.toString());  add(String.format(Locale.ROOT,"f.%s.%s",field,FacetParams.FACET_RANGE_GAP),gap.toString());  this.set(FacetParams.FACET,true);  return this;}  }
class C{  public HttpConnection(HostConfiguration hostConfiguration){  this(hostConfiguration.getProxyHost(),hostConfiguration.getProxyPort(),hostConfiguration.getHost(),hostConfiguration.getPort(),hostConfiguration.getProtocol());  this.localAddress=hostConfiguration.getLocalAddress();}  }
class C{  @Override public void run(){  amIActive=true;  String redHeader, greenHeader, blueHeader, intensityHeader, saturationHeader, hueHeader;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  intensityHeader=args[0];  hueHeader=args[1];  saturationHeader=args[2];  redHeader=args[3];  greenHeader=args[4];  blueHeader=args[5];  if (redHeader.isEmpty() || greenHeader.isEmpty() || blueHeader == null || intensityHeader.isEmpty() || hueHeader.isEmpty() || saturationHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double redMin, greenMin, blueMin;    double r, g, b;    double i, s, h;    float progress;    WhiteboxRasterInfo intensity=new WhiteboxRasterInfo(intensityHeader);    int rows=intensity.getNumberRows();    int cols=intensity.getNumberColumns();    WhiteboxRasterInfo hue=new WhiteboxRasterInfo(hueHeader);    if (hue.getNumberRows() != rows || hue.getNumberColumns() != cols) {      showFeedback("All input images must have the same dimensions.");      return;    }    WhiteboxRasterInfo saturation=new WhiteboxRasterInfo(saturationHeader);    if (saturation.getNumberRows() != rows || saturation.getNumberColumns() != cols) {      showFeedback("All input images must have the same dimensions.");      return;    }    double iNoData=intensity.getNoDataValue();    double hNoData=hue.getNoDataValue();    double sNoData=saturation.getNoDataValue();    WhiteboxRaster red=new WhiteboxRaster(redHeader,"rw",intensityHeader,WhiteboxRaster.DataType.FLOAT,iNoData);    WhiteboxRaster green=new WhiteboxRaster(greenHeader,"rw",intensityHeader,WhiteboxRaster.DataType.FLOAT,iNoData);    WhiteboxRaster blue=new WhiteboxRaster(blueHeader,"rw",intensityHeader,WhiteboxRaster.DataType.FLOAT,iNoData);    double[] dataI, dataH, dataS;    for (row=0; row < rows; row++) {      dataI=intensity.getRowValues(row);      dataH=hue.getRowValues(row);      dataS=saturation.getRowValues(row);      for (col=0; col < cols; col++) {        i=dataI[col];        h=dataH[col];        s=dataS[col];        if ((i != iNoData) && (h != hNoData) && (s != sNoData)) {          if (h <= 1) {            r=i * (1 + 2 * s - 3 * s * h) / 3;            g=i * (1 - s + 3 * s * h) / 3;            b=i * (1 - s) / 3;          } else           if (h <= 2) {            r=i * (1 - s) / 3;            g=i * (1 + 2 * s - 3 * s * (h - 1)) / 3;            b=i * (1 - s + 3 * s * (h - 1)) / 3;          } else {            r=i * (1 - s + 3 * s * (h - 2)) / 3;            g=i * (1 - s) / 3;            b=i * (1 + 2 * s - 3 * s * (h - 2)) / 3;          }          red.setValue(row,col,r * 255);          green.setValue(row,col,g * 255);          blue.setValue(row,col,b * 255);        } else {          red.setValue(row,col,iNoData);          green.setValue(row,col,iNoData);          blue.setValue(row,col,iNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    intensity.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    intensity.addMetadataEntry("Created on " + new Date());    intensity.close();    hue.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    hue.addMetadataEntry("Created on " + new Date());    hue.close();    saturation.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    saturation.addMetadataEntry("Created on " + new Date());    saturation.close();    red.close();    green.close();    blue.close();    returnData(redHeader);    returnData(greenHeader);    returnData(blueHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void reallocateMigratingInContainerVms(){  for (  ContainerVm containerVm : getVmsMigratingIn()) {    if (!getVmList().contains(containerVm)) {      getVmList().add(containerVm);    }    if (!getContainerVmScheduler().getVmsMigratingIn().contains(containerVm.getUid())) {      getContainerVmScheduler().getVmsMigratingIn().add(containerVm.getUid());    }    getContainerVmRamProvisioner().allocateRamForContainerVm(containerVm,containerVm.getCurrentRequestedRam());    getContainerVmBwProvisioner().allocateBwForContainerVm(containerVm,containerVm.getCurrentRequestedBw());    getContainerVmScheduler().allocatePesForVm(containerVm,containerVm.getCurrentRequestedMips());    setStorage(getStorage() - containerVm.getSize());  }}  }
class C{  private void _writeBits(final JBBPBitNumber numberOfBits,final int value) throws IOException {  this.outStream.writeBits(value,numberOfBits);}  }
class C{  public void printElement(Vertex vertex,Writer writer,String indent,List<Vertex> equations,List<Vertex> variables,Set<Vertex> elements,Network network) throws IOException {  if (vertex == null) {    writer.write("#null");    return;  }  boolean printId=getPrintIds();  if (vertex.instanceOf(Primitive.STATE)) {    writer.write("State:");  } else   if (vertex.instanceOf(Primitive.VARIABLE)) {    writer.write(":");  } else   if (vertex.instanceOf(Primitive.FORMULA)) {    if (vertex.hasData()) {      writer.write(String.valueOf(vertex.getData()));    } else {      printFormula(vertex,writer,indent,equations,variables,elements,network);    }    return;  } else   if (vertex.instanceOf(Primitive.PATTERN)) {    writer.write(String.valueOf(vertex.getData()));    return;  } else   if (vertex.instanceOf(Primitive.EQUATION)) {    if (vertex.getName() == null) {      if (!elements.contains(vertex)) {        String newIndent=indent + "\t";        if (vertex.getData() instanceof BinaryData) {          Vertex detached=parseEquationByteCode(vertex,(BinaryData)vertex.getData(),network);          elements.add(detached);          vertex=detached;        }        printOperator(vertex,writer,newIndent,equations,variables,elements,network);        return;      } else {        vertex.setName("dangling");        elements.add(vertex);      }    }    writer.write("Function:");    if (!elements.contains(vertex)) {      equations.add(vertex);      elements.add(vertex);    }  } else   if (vertex.instanceOf(Primitive.PARAGRAPH)) {    writer.write("\"");    String text=vertex.printString();    if (text.indexOf('"') != -1) {      text=text.replace("\"","\"\"");    }    writer.write(text);    writer.write("\"");    return;  } else   if (vertex.hasData()) {    Object data=vertex.getData();    if (data instanceof Primitive) {      writer.write("#");      writer.write(((Primitive)vertex.getData()).getIdentity());    } else     if (data instanceof String) {      writer.write("\"");      String text=(String)vertex.getData();      if (text.indexOf('"') != -1) {        text=text.replace("\"","\"\"");      }      writer.write(text);      writer.write("\"");    } else     if (data instanceof Number) {      writer.write(vertex.getData().toString());    } else {      writer.write(vertex.getDataType());      writer.write("(\"");      writer.write(vertex.getDataValue());      writer.write("\")");    }    return;  } else {    writer.write("Vertex:");    printId=true;  }  if ((printId || (vertex.getName() == null)) && (vertex.getId() != null)) {    writer.write(vertex.getId().toString());  }  if (vertex.getName() != null) {    String name=Utils.compress(vertex.getName(),100);    if (!name.isEmpty()) {      if (printId) {        writer.write(":");      }      writer.write(name);    }  }}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=getRealCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * (mRadius + mExtraSpacing) + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public void testUpdateByteBuffer01() throws NoSuchAlgorithmException, NoSuchProviderException, IllegalArgumentException, IllegalStateException, InvalidAlgorithmParameterException, InvalidKeyException {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  Mac[] macs=createMacs();  assertNotNull("Mac objects were not created",macs);  byte[] bb={(byte)1,(byte)2,(byte)3,(byte)4,(byte)5};  SecretKeySpec sks=new SecretKeySpec(bb,"SHA1");  ByteBuffer byteNull=null;  ByteBuffer byteBuff=ByteBuffer.allocate(0);  byte[] bb1;  byte[] bb2;  for (int i=0; i < macs.length; i++) {    macs[i].init(sks);    bb1=macs[i].doFinal();    try {      macs[i].update(byteNull);      fail("IllegalArgumentException must be thrown because buffer is null");    } catch (    IllegalArgumentException e) {    }    macs[i].update(byteBuff);    bb2=macs[i].doFinal();    for (int t=0; t < bb1.length; t++) {      assertEquals("Incorrect doFinal result",bb1[t],bb2[t]);    }    macs[i].init(sks);    bb1=macs[i].doFinal();    macs[i].update(null,0,0);    bb2=macs[i].doFinal();    for (int t=0; t < bb1.length; t++) {      assertEquals("Incorrect doFinal result",bb1[t],bb2[t]);    }  }}  }
class C{  public FastSet(final Collection<? extends E> elements){  this(elements.size());  this.addAll(elements);}  }
class C{  public void testAcceptNonCatalogOps() throws Exception {  CatalogDataFilter tcf=new CatalogDataFilter();  tcf.setTungstenSchema("tungsten_foo");  filterHelper.setFilter(tcf);  verifyStmtAccept(filterHelper,0,null,"create table tungsten_bar.bar (id int primary key, data varchar(25))");  verifyStmtAccept(filterHelper,0,null,"create table tungsten_bar.trep_commit_seqno (id int primary key, data varchar(25))");  verifyStmtAccept(filterHelper,0,"my_default_schema","insert into heartbeat(val) values(1)");  verifyStmtAccept(filterHelper,0,null,"insert into bar(val) values(1)");  String names[]={"id"};  Long values[]={new Long(99)};  verifyRowInsertAccept(filterHelper,0,"tungsten_bar","trep_commit_seqno",names,values);  verifyRowInsertAccept(filterHelper,1,"tungsten_foo","non_catalog_table",names,values);  verifyRowInsertAccept(filterHelper,2,"foo","test2",names,values);  filterHelper.done();}  }
class C{  public static Artifact createArtifact(@NotNull String name) throws ArtifactNotFoundException {switch (name) {case CDECArtifact.NAME:    return INJECTOR.getInstance(CDECArtifact.class);case InstallManagerArtifact.NAME:  return INJECTOR.getInstance(InstallManagerArtifact.class);}throw ArtifactNotFoundException.from(name);}  }
class C{  boolean considerForRecompilation(HotMethodEvent hme,ControllerPlan plan){  RVMMethod method=hme.getMethod();  if (plan == null) {    if (ControllerMemory.shouldConsiderForInitialRecompilation(method)) {      return true;    } else {      transferSamplesToNewPlan(hme);      return false;    }  } else {    if (plan.getStatus() == ControllerPlan.OUTDATED || ControllerMemory.planWithStatus(method,ControllerPlan.IN_PROGRESS)) {      transferSamplesToNewPlan(hme);      return false;    }    return !ControllerMemory.planWithStatus(method,ControllerPlan.ABORTED_COMPILATION_ERROR);  }}  }
class C{  @Override public void mouseClicked(MouseEvent me){  GraphNode n;  Dimension d=m_gp.getPreferredSize();  x=y=nx=ny=0;  if (d.width < m_gp.getWidth()) {    nx=(int)((nx + m_gp.getWidth() / 2 - d.width / 2) / scale);  }  if (d.height < m_gp.getHeight()) {    ny=(int)((ny + m_gp.getHeight() / 2 - d.height / 2) / scale);  }  r=new Rectangle(0,0,(int)(paddedNodeWidth * scale),(int)(nodeHeight * scale));  x+=me.getX();  y+=me.getY();  int i;  for (i=0; i < m_nodes.size(); i++) {    n=m_nodes.get(i);    r.x=(int)((nx + n.x) * scale);    r.y=(int)((ny + n.y) * scale);    if (r.contains(x,y)) {      if (n.probs == null) {        return;      }      int noOfPrntsOutcomes=1;      if (n.prnts != null) {        for (        int prnt : n.prnts) {          GraphNode n2=m_nodes.get(prnt);          noOfPrntsOutcomes*=n2.outcomes.length;        }        if (noOfPrntsOutcomes > 511) {          System.err.println("Too many outcomes of parents (" + noOfPrntsOutcomes + ") can't display probabilities");          return;        }      }      GraphVisualizerTableModel tm=new GraphVisualizerTableModel(n.probs,n.outcomes);      JTable jTblProbs=new JTable(tm);      JScrollPane js=new JScrollPane(jTblProbs);      if (n.prnts != null) {        GridBagConstraints gbc=new GridBagConstraints();        JPanel jPlRowHeader=new JPanel(new GridBagLayout());        int[] idx=new int[n.prnts.length];        int[] lengths=new int[n.prnts.length];        gbc.anchor=GridBagConstraints.NORTHWEST;        gbc.fill=GridBagConstraints.HORIZONTAL;        gbc.insets=new Insets(0,1,0,0);        int addNum=0, temp=0;        boolean dark=false;        while (true) {          GraphNode n2;          gbc.gridwidth=1;          for (int k=0; k < n.prnts.length; k++) {            n2=m_nodes.get(n.prnts[k]);            JLabel lb=new JLabel(n2.outcomes[idx[k]]);            lb.setFont(new Font("Dialog",Font.PLAIN,12));            lb.setOpaque(true);            lb.setBorder(BorderFactory.createEmptyBorder(1,2,1,1));            lb.setHorizontalAlignment(JLabel.CENTER);            if (dark) {              lb.setBackground(lb.getBackground().darker());              lb.setForeground(Color.white);            } else {              lb.setForeground(Color.black);            }            temp=lb.getPreferredSize().width;            lb.setPreferredSize(new Dimension(temp,jTblProbs.getRowHeight()));            if (lengths[k] < temp) {              lengths[k]=temp;            }            temp=0;            if (k == n.prnts.length - 1) {              gbc.gridwidth=GridBagConstraints.REMAINDER;              dark=(dark == true) ? false : true;            }            jPlRowHeader.add(lb,gbc);            addNum++;          }          for (int k=n.prnts.length - 1; k >= 0; k--) {            n2=m_nodes.get(n.prnts[k]);            if (idx[k] == n2.outcomes.length - 1 && k != 0) {              idx[k]=0;              continue;            } else {              idx[k]++;              break;            }          }          n2=m_nodes.get(n.prnts[0]);          if (idx[0] == n2.outcomes.length) {            JLabel lb=(JLabel)jPlRowHeader.getComponent(addNum - 1);            jPlRowHeader.remove(addNum - 1);            lb.setPreferredSize(new Dimension(lb.getPreferredSize().width,jTblProbs.getRowHeight()));            gbc.gridwidth=GridBagConstraints.REMAINDER;            gbc.weighty=1;            jPlRowHeader.add(lb,gbc);            gbc.weighty=0;            break;          }        }        gbc.gridwidth=1;        JPanel jPlRowNames=new JPanel(new GridBagLayout());        for (int j=0; j < n.prnts.length; j++) {          JLabel lb2;          JLabel lb1=new JLabel(m_nodes.get(n.prnts[j]).lbl);          lb1.setBorder(BorderFactory.createEmptyBorder(1,2,1,1));          Dimension tempd=lb1.getPreferredSize();          if (tempd.width < lengths[j]) {            lb1.setPreferredSize(new Dimension(lengths[j],tempd.height));            lb1.setHorizontalAlignment(JLabel.CENTER);            lb1.setMinimumSize(new Dimension(lengths[j],tempd.height));          } else           if (tempd.width > lengths[j]) {            lb2=(JLabel)jPlRowHeader.getComponent(j);            lb2.setPreferredSize(new Dimension(tempd.width,lb2.getPreferredSize().height));          }          jPlRowNames.add(lb1,gbc);        }        js.setRowHeaderView(jPlRowHeader);        js.setCorner(JScrollPane.UPPER_LEFT_CORNER,jPlRowNames);      }      JDialog jd=new JDialog((Frame)GraphVisualizer.this.getTopLevelAncestor(),"Probability Distribution Table For " + n.lbl,ModalityType.DOCUMENT_MODAL);      jd.setSize(500,400);      jd.setLocation(GraphVisualizer.this.getLocation().x + GraphVisualizer.this.getWidth() / 2 - 250,GraphVisualizer.this.getLocation().y + GraphVisualizer.this.getHeight() / 2 - 200);      jd.getContentPane().setLayout(new BorderLayout());      jd.getContentPane().add(js,BorderLayout.CENTER);      jd.setVisible(true);      return;    }  }}  }
class C{  public MethodRefConstant addMethodRef(String className,String name,String type){  MethodRefConstant entry=getMethodRef(className,name,type);  if (entry != null)   return entry;  ClassConstant classEntry=addClass(className);  NameAndTypeConstant typeEntry=addNameAndType(name,type);  entry=new MethodRefConstant(this,_entries.size(),classEntry.getIndex(),typeEntry.getIndex());  addConstant(entry);  return entry;}  }
class C{  public void testUnpackMultipleTuples() throws InvalidAdviceException {  BaggageAPIForTest baggage=new BaggageAPIForTest();  baggage.put("bag1",new Object[][]{{"v1","v2"},{"v3","v4"},{"v5","v6"}});  EmitAPIForTest results=new EmitAPIForTest();  Advice advice=AdviceTestUtils.newAdvice().observe("a","b").unpack("bag1","c","d").emit("test1","a","b","c","d").build(baggage,results);  assertTrue("Expect nothing emitted yet",results.emitted.size() == 0);  advice.advise("vva","vvb");  results.expectTuple("vva","vvb","v1","v2");  results.expectTuple("vva","vvb","v3","v4");  results.expectTuple("vva","vvb","v5","v6");  results.check();  assertTrue("Expect 3 output tuple emitted",results.emitted.size() == 3);}  }
class C{  public GLUTessellatorSupport(){}  }
class C{  public void addMovie(Movie movie){synchronized (movies) {    if (movies.contains(movie)) {      return;    }    movies.add(movie);    movieIds.add(movie.getDbId());    MovieSetArtworkHelper.updateArtwork(this);    saveToDb();  }  List<Movie> movies=new ArrayList<>(1);  movies.add(movie);  if (MovieModuleManager.MOVIE_SETTINGS.isEnableMovieSetArtworkMovieFolder()) {    MovieSetArtworkHelper.writeImagesToMovieFolder(this,movies);  }  firePropertyChange("addedMovie",null,movie);  firePropertyChange("movies",null,movies);}  }
class C{  public void doGetEmbedHtml(HttpServletRequest request,HttpServletResponse response,String type,String location,String item) throws ServletException, IOException {  response.setStatus(HttpServletResponse.SC_OK);  response.setContentType("text/html");  PrintWriter writer=response.getWriter();  String path="/console/browse/media/" + type + "/"+ location+ "/"+ item;  writer.print("<OBJECT ID='MediaPlayer' WIDTH='320' HEIGHT='26'");  writer.println(" CLASSID='CLSID:22D6F312-B0F6-11D0-94AB-0080C74C7E95'");  writer.println(" STANDBY='Loading...' TYPE='application/x-oleobject'>");  writer.printf("  <PARAM NAME='FileName' VALUE='%s'>%n",path);  writer.printf("  <EMBED TYPE='application/x-mplayer2' SRC='%s' NAME='MediaPlayer' WIDTH='320' HEIGHT='26' autostart='1'></EMBED>%n",path);  writer.println("</OBJECT>");}  }
class C{  public PrintWriterImpl(Writer out){  super(out);}  }
class C{  public PDFFontDescriptor(PDFObject obj) throws IOException {  setAscent(obj.getDictRef("Ascent").getIntValue());  setCapHeight(obj.getDictRef("CapHeight").getIntValue());  setDescent(obj.getDictRef("Descent").getIntValue());  setFlags(obj.getDictRef("Flags").getIntValue());  setFontName(obj.getDictRef("FontName").getStringValue());  setItalicAngle(obj.getDictRef("ItalicAngle").getIntValue());  setStemV(obj.getDictRef("StemV").getIntValue());  PDFObject[] bboxdef=obj.getDictRef("FontBBox").getArray();  float[] bboxfdef=new float[4];  for (int i=0; i < 4; i++) {    bboxfdef[i]=bboxdef[i].getFloatValue();  }  setFontBBox(new RectF(bboxfdef[0],bboxfdef[1],bboxfdef[2] - bboxfdef[0],bboxfdef[3] - bboxfdef[1]));  if (obj.getDictionary().containsKey("AvgWidth")) {    setAvgWidth(obj.getDictRef("AvgWidth").getIntValue());  }  if (obj.getDictionary().containsKey("FontFile")) {    setFontFile(obj.getDictRef("FontFile"));  }  if (obj.getDictionary().containsKey("FontFile2")) {    setFontFile2(obj.getDictRef("FontFile2"));  }  if (obj.getDictionary().containsKey("FontFile3")) {    setFontFile3(obj.getDictRef("FontFile3"));  }  if (obj.getDictionary().containsKey("Leading")) {    setLeading(obj.getDictRef("Leading").getIntValue());  }  if (obj.getDictionary().containsKey("MaxWidth")) {    setMaxWidth(obj.getDictRef("MaxWidth").getIntValue());  }  if (obj.getDictionary().containsKey("MissingWidth")) {    setMissingWidth(obj.getDictRef("MissingWidth").getIntValue());  }  if (obj.getDictionary().containsKey("StemH")) {    setStemH(obj.getDictRef("StemH").getIntValue());  }  if (obj.getDictionary().containsKey("XHeight")) {    setXHeight(obj.getDictRef("XHeight").getIntValue());  }  if (obj.getDictionary().containsKey("CharSet")) {    setCharSet(obj.getDictRef("CharSet"));  }  if (obj.getDictionary().containsKey("FontFamily")) {    setFontFamily(obj.getDictRef("FontFamily").getStringValue());  }  if (obj.getDictionary().containsKey("FontWeight")) {    setFontWeight(obj.getDictRef("FontWeight").getIntValue());  }  if (obj.getDictionary().containsKey("FontStretch")) {    setFontStretch(obj.getDictRef("FontStretch").getStringValue());  }}  }
class C{  public static int digitLength(long l){  if (l >= 0)   return (l <= Integer.MAX_VALUE) ? digitLength((int)l) : (l >= 100000000000000L) ? (l >= 10000000000000000L) ? (l >= 1000000000000000000L) ? 19 : (l >= 100000000000000000L) ? 18 : 17 : (l >= 1000000000000000L) ? 16 : 15 : (l >= 100000000000L) ? (l >= 10000000000000L) ? 14 : (l >= 1000000000000L) ? 13 : 12 : (l >= 10000000000L) ? 11 : 10;  if (l == Long.MIN_VALUE)   return 19;  return digitLength(-l);}  }
class C{  public void close(){  getRoot().manager.close(this);}  }
class C{  public static void validateCompositeData(CompositeData cd){  if (cd == null) {    throw new NullPointerException("Null CompositeData");  }  if (!isTypeMatched(getBaseGcInfoCompositeType(),cd.getCompositeType())) {    throw new IllegalArgumentException("Unexpected composite type for GcInfo");  }}  }
class C{  public void testTooManyOpenFiles() throws IOException {  int n=60;  Path dir=wrap(createTempDir(),n);  List<Closeable> toClose=new ArrayList<>();  for (int i=0; i < n; i++) {    Path p=Files.createTempFile(dir,null,null);    toClose.add(Files.newOutputStream(p));  }  try {    Files.newOutputStream(Files.createTempFile(dir,null,null));    fail("didn't hit exception");  } catch (  IOException e) {    assertTrue(e.getMessage().contains("Too many open files"));  }  IOUtils.close(toClose);}  }
class C{  public ASTNode parseContents(final ASTNode chameleon){  final PsiElement parentElement=chameleon.getTreeParent().getPsi();  assert parentElement != null : "Bad chameleon: " + chameleon;  return doParseContents(chameleon,parentElement);}  }
class C{  public boolean isVariable(long arc){switch ((int)arc) {case 9:case 8:case 7:case 6:case 5:case 4:case 3:case 12:case 11:case 2:case 1:case 10:    return true;default :  break;}return false;}  }
class C{  public ViewListIcon(){  this.width=getOrigWidth();  this.height=getOrigHeight();}  }
class C{  private void validateBusinessObjectDataNotificationRegistrationKey(NotificationRegistrationKey notificationRegistrationKey) throws IllegalArgumentException {  Assert.notNull(notificationRegistrationKey,"A business object data notification registration key must be specified.");  notificationRegistrationKey.setNamespace(alternateKeyHelper.validateStringParameter("namespace",notificationRegistrationKey.getNamespace()));  notificationRegistrationKey.setNotificationName(alternateKeyHelper.validateStringParameter("notification name",notificationRegistrationKey.getNotificationName()));}  }
class C{  public HttpAuthenticationException(String message,Throwable cause){  super(message,cause);}  }
class C{  public VasaAssociationObject[] queryAssociatedPortsForProcessor(String[] processorId) throws InvalidArgument, InvalidSession, StorageFault, NotImplemented {  final String methodName="queryAssociatedPortsForProcessor(): ";  log.info(methodName + "Entry");  if (processorId != null) {    log.info(methodName + "input processor Ids[" + Arrays.asList(processorId)+ "]");  }  sslUtil.checkHttpRequest(true,true);  SOSManager sosManager=contextManager.getSOSManager();  VasaAssociationObject[] vasaAsssociationObjs=sosManager.queryAssociatedPortsForProcessor(processorId);  log.info(methodName + "Exit returning vasa association objects of size[" + vasaAsssociationObjs.length+ "]");  return vasaAsssociationObjs;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.440 -0500",hash_original_method="DE7BCEF3CEAF7F5E4F7BCE647A148129",hash_generated_method="E18E3422BCACD9B86FFFF540EC036F81") public SIPServerTransaction findMergedTransaction(SIPRequest sipRequest){  if (!sipRequest.getMethod().equals(Request.INVITE)) {    return null;  }  String mergeId=sipRequest.getMergeId();  SIPServerTransaction mergedTransaction=(SIPServerTransaction)this.mergeTable.get(mergeId);  if (mergeId == null) {    return null;  } else   if (mergedTransaction != null && !mergedTransaction.isMessagePartOfTransaction(sipRequest)) {    return mergedTransaction;  } else {    for (    Dialog dialog : this.dialogTable.values()) {      SIPDialog sipDialog=(SIPDialog)dialog;      if (sipDialog.getFirstTransaction() != null && sipDialog.getFirstTransaction() instanceof ServerTransaction) {        SIPServerTransaction serverTransaction=((SIPServerTransaction)sipDialog.getFirstTransaction());        SIPRequest transactionRequest=((SIPServerTransaction)sipDialog.getFirstTransaction()).getOriginalRequest();        if ((!serverTransaction.isMessagePartOfTransaction(sipRequest)) && sipRequest.getMergeId().equals(transactionRequest.getMergeId())) {          return (SIPServerTransaction)sipDialog.getFirstTransaction();        }      }    }    return null;  }}  }
class C{  protected void requestResult(RequestType type,String url,String result,int responseCode,String error,String encoding,String token){  int length=-1;  if (result != null) {    length=result.length();  }  String encodingText=encoding == null ? "" : ", " + encoding;  LOGGER.info("GOT (" + responseCode + ", "+ length+ encodingText+ "): "+ url+ " (using authorization)"+ (error != null ? " [" + error + "]" : ""));  if (type == RequestType.VERIFY_TOKEN) {    TokenInfo tokenInfo=parseVerifyToken(result);    resultListener.tokenVerified(token,tokenInfo);  } else   if (type == RequestType.CHANNEL_PUT) {    requestResult(type,url,result,responseCode,error,encoding);  } else   if (type == RequestType.COMMERCIAL) {    String stream=removeRequest(url);    String resultText="Commercial probably not running (unknown response: " + responseCode + ")";    RequestResult resultCode=RequestResult.UNKNOWN;    if (responseCode == 204) {      resultText="Running commercial..";      resultCode=RequestResult.RUNNING_COMMERCIAL;    } else     if (responseCode == 422) {      resultText="Commercial length not allowed or trying to run too early.";      resultCode=RequestResult.FAILED;    } else     if (responseCode == 401 || responseCode == 403) {      resultText="Can't run commercial: Access denied";      resultCode=RequestResult.ACCESS_DENIED;      accessDenied();    } else     if (responseCode == 404) {      resultText="Can't run commercial: Channel '" + stream + "' not found";      resultCode=RequestResult.INVALID_CHANNEL;    }    if (resultListener != null) {      resultListener.runCommercialResult(stream,resultText,resultCode);    }  } else   if (type == RequestType.FOLLOWED_STREAMS) {    streamInfoManager.requestResultFollows(result,responseCode);  } else   if (type == RequestType.SUBSCRIBERS) {    String stream=removeRequest(url);    subscriberManager.received(responseCode,stream,result);  } else   if (type == RequestType.FOLLOW) {    String target=removeRequest(url);    if (responseCode == 200) {      long followTime=followGetTime(result);      if (followTime != -1 && System.currentTimeMillis() - followTime > 5000) {        resultListener.followResult(String.format("Already following '%s' (since %s)",target,DateTime.ago(followTime,0,2,0,DateTime.Formatting.VERBOSE)));      } else {        resultListener.followResult("Now following '" + target + "'");      }    } else     if (responseCode == 404) {      resultListener.followResult("Couldn't follow '" + target + "' (channel not found)");    } else     if (responseCode == 401) {      resultListener.followResult("Couldn't follow '" + target + "' (access denied)");    } else {      resultListener.followResult("Couldn't follow '" + target + "' (unknown error)");    }  } else   if (type == RequestType.UNFOLLOW) {    String target=removeRequest(url);    if (responseCode == 204) {      resultListener.followResult("No longer following '" + target + "'");    } else     if (responseCode == 404) {      resultListener.followResult("Couldn't unfollow '" + target + "' (channel not found)");    } else     if (responseCode == 401) {      resultListener.followResult("Couldn't unfollow '" + target + "' (access denied)");    } else {      resultListener.followResult("Couldn't unfollow '" + target + "' (unknown error)");    }  }}  }
class C{  public int strDistance(char[] a,char[] b) throws SAXException {  if (a.length == b.length) {    int distance=0;    for (int i=0; i < a.length; i++) {      int tDist=Math.abs(Character.getNumericValue(a[i]) - Character.getNumericValue(b[i]));      distance+=tDist;    }    return distance;  } else {    throw new SAXException("Unable to compute SAX distance, string lengths are not equal");  }}  }
class C{  private void first(){  try (RandomAccessFile inout=new RandomAccessFile("AddressBook.dat","rw")){    if (inout.length() > 0) {      inout.seek(0);      read(inout);      System.out.println("Reading address #1");      count=1;    } else {      System.out.println("Address is empty!");    }  } catch (  IOException ex) {  }}  }
class C{  public void testResize() throws Throwable {  CopycatServer server=createServers(1).get(0);  CopycatServer joiner=createServer(nextMember(Member.Type.ACTIVE));  joiner.join(members.stream().map(null).collect(Collectors.toList())).thenRun(null);  await(10000);  server.leave().thenRun(null);  await(10000);  joiner.leave().thenRun(null);}  }
class C{  @Override public String encode(){  return "'" + prototype + "'";}  }
class C{  public ByteArrayBody(final byte[] data,final String filename){  this(data,"application/octet-stream",filename);}  }
class C{  public String toString(){  StringBuilder s=new StringBuilder();  for (  String key : this)   s.append(key + " ");  if (s.length() > 0)   s.deleteCharAt(s.length() - 1);  return s.toString();}  }
class C{  @Override public synchronized void clear(){  File[] files=mRootDirectory.listFiles();  if (files != null) {    for (    File file : files) {      file.delete();    }  }  mEntries.clear();  mTotalSize=0;  VolleyLog.d("Cache cleared.");}  }
class C{  public IntervalleObject include(Object value){  if (compareLowerBoundTo(value) > 0) {    return new IntervalleObject(value,upper_bound);  } else   if (compareUpperBoundTo(value) < 0) {    return new IntervalleObject(lower_bound,value);  } else {    return this;  }}  }
class C{  public static final Parameter base(){  return new Parameter(P_STEADYSTATE);}  }
class C{  public void scaler(final int[] pX,final int[] pY){  scaledX=new int[pX.length];  scaledY=new int[pY.length];  final double scale=(pixelSize / (unitsPerEm * 1000)) * 64;  for (int i=0; i < pX.length; i++) {    scaledX[i]=(int)((scale * pX[i]) + 0.5);    scaledY[i]=(int)((scale * pY[i]) + 0.5);  }  scaledX[pX.length - 2]=0;  scaledY[pY.length - 2]=0;  scaledX[pX.length - 1]=(int)((scale * leftSideBearing) + 0.5);  scaledY[pY.length - 1]=0;}  }
class C{  public void filterValues(Map<?,String> map){  for (  Map.Entry<?,String> entry : map.entrySet()) {    String value=entry.getValue();    if (value != null)     entry.setValue(filter(value));  }}  }
class C{  void loadComment(NamedBean t,List<Element> beanList,int i){  loadComment(t,beanList.get(i));}  }
class C{  @Override public void runPlugin(String pluginName,String[] args,boolean runOnDedicatedThread){  host.runPlugin(pluginName,args,runOnDedicatedThread);  if (automaticallyClose) {    this.dispose();  }}  }
class C{  public void testTake() throws InterruptedException {  LinkedBlockingDeque q=populatedDeque(SIZE);  for (int i=0; i < SIZE; ++i) {    assertEquals(i,q.take());  }}  }
class C{  private String buildRemoteLogArguments(String username,String host){  assert username != null;  assert host != null;  SB sb=new SB();  sb.a(" -J-D").a(IGNITE_SSH_HOST).a("=\"").a(host).a("\"").a(" -J-D").a(IGNITE_SSH_USER_NAME).a("=\"").a(username).a("\"");  return sb.toString();}  }
class C{  private HttpEntityEnclosingRequestBase addEntityToRequestBase(HttpEntityEnclosingRequestBase requestBase,HttpEntity entity){  if (entity != null) {    requestBase.setEntity(entity);  }  return requestBase;}  }
class C{  public static String stripBraces(String token){  return token.charAt(0) == '{' && token.charAt(token.length() - 1) == '}' ? token.substring(1,token.length() - 1) : token;}  }
class C{  protected void highlightLinesAfter(String content,int line) throws BadLocationException {  int offset=m_RootElement.getElement(line).getEndOffset();  int startDelimiter=-1;  int endDelimiter=-1;  if (getMultiLineComment()) {    startDelimiter=indexOf(content,getMultiLineCommentStart(),offset);    endDelimiter=indexOf(content,getMultiLineCommentEnd(),offset);  }  if (startDelimiter < 0) {    startDelimiter=content.length();  }  if (endDelimiter < 0) {    endDelimiter=content.length();  }  int delimiter=Math.min(startDelimiter,endDelimiter);  if (delimiter < offset) {    return;  }  int endLine=m_RootElement.getElementIndex(delimiter);  for (int i=line + 1; i < endLine; i++) {    Element branch=m_RootElement.getElement(i);    Element leaf=m_Self.getCharacterElement(branch.getStartOffset());    AttributeSet as=leaf.getAttributes();    if (as.isEqual(DEFAULT_COMMENT)) {      applyHighlighting(content,i);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:15.764 -0400",hash_original_method="A24C126CA58586506004D30D2299C1FC",hash_generated_method="D9917D4338E17AFB6F5BEBDDB87888D1") public boolean isPolicyMappingInhibited(){  return policyMappingInhibited;}  }
class C{  public boolean hasAlpha(){  return mHasAlpha && mConfig != Config.RGB_565;}  }
class C{  public static <T>Optional<T> of(T value){  return value == null ? (Optional<T>)EMPTY : new Optional<>(value);}  }
class C{  public RoleBuilder withPermissions(EnumSet<Permissions> permissions){  this.permissions=permissions;  return this;}  }
class C{  public void removeListener(final IView2DListener listener){  m_listeners.removeListener(listener);}  }
class C{  public void addStateHistoryEntry(double time,double allocatedMips,double requestedMips,boolean isInMigration){  VmStateHistoryEntry newState=new VmStateHistoryEntry(time,allocatedMips,requestedMips,isInMigration);  if (!getStateHistory().isEmpty()) {    VmStateHistoryEntry previousState=getStateHistory().get(getStateHistory().size() - 1);    if (previousState.getTime() == time) {      getStateHistory().set(getStateHistory().size() - 1,newState);      return;    }  }  getStateHistory().add(newState);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  DShowDVDPlayer.setDVDForceDeinterlace(DShowTVPlayer.getDeinterlaceCode(getString(stack)));  return null;}  }
class C{  protected String mapToJson(final Object obj) throws JsonProcessingException {  final ObjectMapper mapper=new ObjectMapper();  mapper.registerModule(new JodaModule());  return mapper.writeValueAsString(obj);}  }
class C{  public void test(){  Assert.assertEquals(expectedSubsts,execute());}  }
class C{  @Override protected void doAction(){  DCheckUpdate dCheckUpdate=new DCheckUpdate(frame);  dCheckUpdate.setLocationRelativeTo(frame);  dCheckUpdate.startCheck();  dCheckUpdate.setVisible(true);  Version latestVersion=dCheckUpdate.getLatestVersion();  if (latestVersion == null) {    return;  }  compareVersions(latestVersion,false);}  }
class C{  public TestCase(String name,Function<Collection<Integer>,C> supplier,C collection){  this.name=name;  this.supplier=supplier;  this.expected=Collections.unmodifiableList(Arrays.asList(collection.toArray(new Integer[0])));  this.collection=collection;}  }
class C{  private void error(AugmentedNode<ILineSegment> n){  System.out.println("Ill-formed node.");  System.out.println(n);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private int findDestColor(int color){  int sourceR=color >> 16 & 0xff;  int sourceG=color >> 8 & 0xff;  int sourceB=color & 0xff;  if (sourceR > 128 && sourceG > 128 && sourceB > 128) {    sourceR=Math.max(sourceR >> 1,0);    sourceG=Math.max(sourceG >> 1,0);    sourceB=Math.max(sourceB >> 1,0);  } else {    if (color == 0) {      return 0x222222;    }    sourceR=Math.min(sourceR << 1,0xff);    sourceG=Math.min(sourceG << 1,0xff);    sourceB=Math.min(sourceB << 1,0xff);  }  return ((sourceR << 16) & 0xff0000) | ((sourceG << 8) & 0xff00) | (sourceB & 0xff);}  }
class C{  public static CCSpriteFrame frame(CCTexture2D texture,CGRect rect,CGPoint offset){  return new CCSpriteFrame(texture,rect,offset);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public VisionWorldModelEvent(final VisionWorldModel source,final PixelMatrix oldPixelMatrix,final PixelMatrix pixelMatrix){  super(source);  if (oldPixelMatrix == null) {    throw new IllegalArgumentException("oldPixelMatrix must not be null");  }  if (pixelMatrix == null) {    throw new IllegalArgumentException("pixelMatrix must not be null");  }  this.oldPixelMatrix=oldPixelMatrix;  this.pixelMatrix=pixelMatrix;  this.oldSensorMatrix=null;  this.sensorMatrix=null;}  }
class C{  static public boolean gteq(double v1,double v2){  return (v1 - v2) > -VERY_SMALL_VALUE;}  }
class C{  void updateFreeAmountAndAdditionalPrice(List<SteppedPrice> list){  Collections.sort(list,new SteppedPriceComparator());  int size=list.size();  for (int i=1; i < size; i++) {    SteppedPrice prevStep=list.get(i - 1);    if (prevStep.getLimit() == null) {      list.get(i).setFreeEntityCount(0);      list.get(i).setAdditionalPrice(BigDecimal.ZERO.setScale(PriceConverter.NORMALIZED_PRICE_SCALING));    } else {      list.get(i).setFreeEntityCount(prevStep.getLimit().longValue());      list.get(i).setAdditionalPrice((BigDecimal.valueOf(prevStep.getLimit().longValue()).subtract(BigDecimal.valueOf(prevStep.getFreeEntityCount()))).multiply(prevStep.getPrice()).add(prevStep.getAdditionalPrice()).setScale(PriceConverter.NORMALIZED_PRICE_SCALING,RoundingMode.HALF_UP));    }  }  if (size > 0) {    list.get(0).setFreeEntityCount(0);    list.get(0).setAdditionalPrice(BigDecimal.ZERO.setScale(PriceConverter.NORMALIZED_PRICE_SCALING));    list.get(size - 1).setLimit(null);  }}  }
class C{  protected void runTests() throws Exception {  startToMain("LambdaBreakpointTestTarg");  for (  int line : LambdaBreakpointTestTarg.breakpointLines) {    System.out.println("Running to line: " + line);    BreakpointEvent be=resumeTo("LambdaBreakpointTestTarg",line);    int stoppedAt=be.location().lineNumber();    System.out.println("Stopped at line: " + stoppedAt);    if (stoppedAt != line) {      throw new Exception("Stopped on the wrong line: " + stoppedAt + " != "+ line);    }  }  listenUntilVMDisconnect();}  }
class C{  private static ResultPoint[] expandSquare(ResultPoint[] cornerPoints,float oldSide,float newSide){  float ratio=newSide / (2 * oldSide);  float dx=cornerPoints[0].getX() - cornerPoints[2].getX();  float dy=cornerPoints[0].getY() - cornerPoints[2].getY();  float centerx=(cornerPoints[0].getX() + cornerPoints[2].getX()) / 2.0f;  float centery=(cornerPoints[0].getY() + cornerPoints[2].getY()) / 2.0f;  ResultPoint result0=new ResultPoint(centerx + ratio * dx,centery + ratio * dy);  ResultPoint result2=new ResultPoint(centerx - ratio * dx,centery - ratio * dy);  dx=cornerPoints[1].getX() - cornerPoints[3].getX();  dy=cornerPoints[1].getY() - cornerPoints[3].getY();  centerx=(cornerPoints[1].getX() + cornerPoints[3].getX()) / 2.0f;  centery=(cornerPoints[1].getY() + cornerPoints[3].getY()) / 2.0f;  ResultPoint result1=new ResultPoint(centerx + ratio * dx,centery + ratio * dy);  ResultPoint result3=new ResultPoint(centerx - ratio * dx,centery - ratio * dy);  return new ResultPoint[]{result0,result1,result2,result3};}  }
class C{  @PrePersist public void initializeDates(){  if (forceCreateDate != null) {    this.created=forceCreateDate;  } else {    this.created=new Date();  }  this.modified=new Date();}  }
class C{  public void print(boolean bool){  print(String.valueOf(bool));}  }
class C{  @Override public String id(){  return id;}  }
class C{  protected void initGUI(){  JPanel panel;  super.initGUI();  setLayout(new BorderLayout(1,0));  m_LayoutButtons=new GridLayout(0,1,0,1);  m_PanelButtons=new JPanel(m_LayoutButtons);  panel=new JPanel(new BorderLayout());  panel.add(m_PanelButtons,BorderLayout.NORTH);  add(panel,BorderLayout.EAST);}  }
class C{  public static boolean isValidName(String name){  if (name == null) {    return false;  }  return name.length() > 3;}  }
class C{  public static <T>Task<T> fromValue(T value){  final Task<T> t=new Task<>();  t.internalComplete(value);  return t;}  }
class C{  public boolean isInDiskCacheSync(final Uri uri,final ImageRequest.CacheChoice cacheChoice){  ImageRequest imageRequest=ImageRequestBuilder.newBuilderWithSource(uri).setCacheChoice(cacheChoice).build();  return isInDiskCacheSync(imageRequest);}  }
class C{  public void onCreate(Class<PresenterType> opsType,RequiredViewOps view){  if (mStateMaintainer == null)   mStateMaintainer=new StateMaintainer(getActivity().getFragmentManager(),TAG + "_retainer");  try {    if (mStateMaintainer.firstTimeIn()) {      Log.d(TAG,"First time calling onCreate()");      initialize(opsType,view);    } else {      Log.d(TAG,"Second (or subsequent) time calling onCreate()");      reinitialize(opsType,view);    }  } catch (  java.lang.InstantiationException|IllegalAccessException e) {    Log.d(TAG,"onCreate() " + e);    throw new RuntimeException(e);  }}  }
class C{  public ClusterTopologyException(String msg,@Nullable Throwable cause){  super(msg,cause);}  }
class C{  public void testDirectDynamic() throws Exception {  assertEquals(SweetSpotSimilarity.class,getSimilarity("text_sim1").getClass());}  }
class C{  public static double AICC(double l,int k,int n){  if (k > n - 2)   throw new IllegalArgumentException("k must be smaller than n-1");  return l - k - (double)(k * (k + 1.0)) / (double)(n - k - 1.0);}  }
