class C{  static String packageNameOf(TypeElement type){  while (true) {    Element enclosing=type.getEnclosingElement();    if (enclosing instanceof PackageElement) {      return ((PackageElement)enclosing).getQualifiedName().toString();    }    type=(TypeElement)enclosing;  }}  }
class C{  public static void warn(String tag,String text){  if (BuildConfig.DEBUG) {    Log.w(tag,text);  }}  }
class C{  @Override protected GraphDocument generateAnalysisDocument(IProgressMonitor monitor) throws IOException {  GraphModel result=new GraphModel();  DependenciesListener builder=new FileSystemDependencyDispatcher(result.getBuilder());  monitor.worked(1);  monitor.setTaskName("Loading file tree...");  TreeLoader loader=new TreeLoader(builder,page.getTreePrefix());  loader.analyzeTree(page.getPathText());  monitor.worked(1);  return createGraphDocument(result,FileSystemActivator.PLUGIN_ID,Resources.PLUGIN_ID);}  }
class C{  public SendableLocationMessage build(){  return new SendableLocationMessage(latitude,longitude,replyTo,replyMarkup,disableNotification);}  }
class C{  public TelnetTerminalServer(int port,Charset charset) throws IOException {  this(ServerSocketFactory.getDefault(),port,charset);}  }
class C{  public Anonymous_linkingOp_3_ createAnonymous_linkingOp_3_(){  Anonymous_linkingOp_3_Impl anonymous_linkingOp_3_=new Anonymous_linkingOp_3_Impl();  return anonymous_linkingOp_3_;}  }
class C{  public OpenPkcs11Action(KseFrame kseFrame){  super(kseFrame);  putValue(ACCELERATOR_KEY,KeyStroke.getKeyStroke(res.getString("OpenPkcs11Action.accelerator").charAt(0),Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() + InputEvent.SHIFT_MASK));  putValue(LONG_DESCRIPTION,res.getString("OpenPkcs11Action.statusbar"));  putValue(NAME,res.getString("OpenPkcs11Action.text"));  putValue(SHORT_DESCRIPTION,res.getString("OpenPkcs11Action.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("OpenPkcs11Action.image")))));}  }
class C{  public void release(){  c.release();}  }
class C{  public static boolean isBluetoothOpen(){  Integer bluetoothStateCode=getBluetoothState();  if (bluetoothStateCode == null) {    return false;  }  return bluetoothStateCode == BluetoothAdapter.STATE_ON || bluetoothStateCode == BluetoothAdapter.STATE_TURNING_ON ? true : false;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  private void printStatistics(int inputNStopFacilities){  int nArtificialLinks=0;  for (  Link l : network.getLinks().values()) {    if (l.getAllowedModes().contains(PublicTransitMappingStrings.ARTIFICIAL_LINK_MODE)) {      nArtificialLinks++;    }  }  int withoutArtificialLinks=0;  int nRoutes=0;  for (  TransitLine transitLine : this.schedule.getTransitLines().values()) {    for (    TransitRoute transitRoute : transitLine.getRoutes().values()) {      nRoutes++;      boolean routeHasArtificialLink=false;      List<Id<Link>> linkIds=ScheduleTools.getTransitRouteLinkIds(transitRoute);      for (      Id<Link> linkId : linkIds) {        if (network.getLinks().get(linkId).getAllowedModes().contains(PublicTransitMappingStrings.ARTIFICIAL_LINK_MODE)) {          routeHasArtificialLink=true;        }      }      if (!routeHasArtificialLink) {        withoutArtificialLinks++;      }    }  }  StopFacilityHistogram histogram=new StopFacilityHistogram(schedule);  log.info("");  log.info("    Artificial Links:");  log.info("       created  " + nArtificialLinks);  log.info("    Stop Facilities:");  log.info("       total input   " + inputNStopFacilities);  log.info("       total output  " + schedule.getFacilities().size());  log.info("       diff.         " + (schedule.getFacilities().size() - inputNStopFacilities));  log.info("    Child Stop Facilities:");  log.info("       median nr created   " + String.format("%.0f",histogram.median()));  log.info("       average nr created  " + String.format("%.2f",histogram.average()));  log.info("       max nr created      " + String.format("%.0f",histogram.max()));  log.info("    Transit Routes:");  log.info("       total routes in schedule         " + nRoutes);  log.info("       routes without artificial links  " + withoutArtificialLinks);  log.info("");  log.info("    Run PlausibilityCheck for further analysis");  log.info("");  log.info("==================================================");}  }
class C{  public IntroduceParameterProcessor(@NotNull Project project,PsiMethod methodToReplaceIn,@NotNull PsiMethod methodToSearchFor,PsiExpression parameterInitializer,PsiExpression expressionToSearch,PsiLocalVariable localVariable,boolean removeLocalVariable,String parameterName,boolean replaceAllOccurrences,int replaceFieldsWithGetters,boolean declareFinal,boolean generateDelegate,PsiType forcedType,@NotNull TIntArrayList parametersToRemove){  super(project);  myMethodToReplaceIn=methodToReplaceIn;  myMethodToSearchFor=methodToSearchFor;  myParameterInitializer=parameterInitializer;  myExpressionToSearch=expressionToSearch;  myLocalVariable=localVariable;  myRemoveLocalVariable=removeLocalVariable;  myParameterName=parameterName;  myReplaceAllOccurrences=replaceAllOccurrences;  myReplaceFieldsWithGetters=replaceFieldsWithGetters;  myDeclareFinal=declareFinal;  myGenerateDelegate=generateDelegate;  myForcedType=forcedType;  myManager=PsiManager.getInstance(project);  myParametersToRemove=parametersToRemove;  myInitializerWrapper=expressionToSearch == null ? null : new JavaExpressionWrapper(expressionToSearch);}  }
class C{  public void write(int b) throws IOException {  byte[] buf=new byte[1];  buf[0]=(byte)(b & 0xff);  write(buf,0,1);}  }
class C{  private void addGeneratedCSSResource(FacesContext context,String resourceName,UIViewRoot view){  addGeneratedResource(context,resourceName,"javax.faces.resource.Stylesheet","butterfaces-dist-css",view);}  }
class C{  public void stopNotification(){  if (mStarted) {    mStarted=false;    mController.unregisterCallback(mCb);    try {      mNotificationManager.cancel(NOTIFICATION_ID);      mService.unregisterReceiver(this);    } catch (    IllegalArgumentException ex) {    }    mService.stopForeground(true);  }}  }
class C{  @Override protected void validate(){  failIf(this.value <= 0,"Unreasonable GCSpy port value");}  }
class C{  public static String describe(boolean inFull){  final StringBuffer sb=new StringBuffer();  describeModules_internal(sb,regModules.keySet(),inFull);  return sb.toString();}  }
class C{  protected void dispose(){}  }
class C{  public boolean editInlineMessageText(String inlineMessageId,String text,ParseMode parseMode,boolean disableWebPagePreview,InlineReplyMarkup inlineReplyMarkup){  if (inlineMessageId != null && text != null) {    JSONObject jsonResponse=this.editMessageText(null,null,inlineMessageId,text,parseMode,disableWebPagePreview,inlineReplyMarkup);    if (jsonResponse != null) {      if (jsonResponse.getBoolean("result"))       return true;    }  }  return false;}  }
class C{  private File writePrivateKeyFile(String url,File keyDirectory) throws GitException {  final File keyFile=new File(keyDirectory,"identity");  try (FileOutputStream fos=new FileOutputStream(keyFile)){    byte[] sshKey=sshKeyProvider.getPrivateKey(url);    fos.write(sshKey);  } catch (  IOException|ServerException exception) {    String errorMessage="Can't store ssh key. ".concat(exception.getMessage());    LOG.error(errorMessage,exception);    throw new GitException(errorMessage,ErrorCodes.UNABLE_GET_PRIVATE_SSH_KEY);  }  Set<PosixFilePermission> permissions=EnumSet.of(OWNER_READ,OWNER_WRITE);  try {    java.nio.file.Files.setPosixFilePermissions(keyFile.toPath(),permissions);  } catch (  IOException exception) {    throw new GitException(exception.getMessage(),exception);  }  return keyFile;}  }
class C{  private void snoopDHCPClientName(Ethernet eth,Device srcDevice){  if (!(eth.getPayload() instanceof IPv4))   return;  IPv4 ipv4=(IPv4)eth.getPayload();  if (!(ipv4.getPayload() instanceof UDP))   return;  UDP udp=(UDP)ipv4.getPayload();  if (!(udp.getPayload() instanceof DHCP))   return;  DHCP dhcp=(DHCP)udp.getPayload();  byte opcode=dhcp.getOpCode();  if (opcode == DHCP.OPCODE_REQUEST) {    DHCPOption dhcpOption=dhcp.getOption(DHCPOptionCode.OptionCode_Hostname);    if (dhcpOption != null) {      cntDhcpClientNameSnooped.increment();      srcDevice.dhcpClientName=new String(dhcpOption.getData());    }  }}  }
class C{  public FastAdapterDialog<Item> withOnTouchListener(FastAdapter.OnTouchListener<Item> onTouchListener){  this.mFastItemAdapter.withOnTouchListener(onTouchListener);  return this;}  }
class C{  public static void createProgram(){  sProgramHandle=Util.createProgram(VERTEX_SHADER_CODE,FRAGMENT_SHADER_CODE);  Log.d(TAG,"Created program " + sProgramHandle);  sPositionHandle=GLES20.glGetAttribLocation(sProgramHandle,"a_position");  Util.checkGlError("glGetAttribLocation");  sColorHandle=GLES20.glGetUniformLocation(sProgramHandle,"u_color");  Util.checkGlError("glGetUniformLocation");  sMVPMatrixHandle=GLES20.glGetUniformLocation(sProgramHandle,"u_mvpMatrix");  Util.checkGlError("glGetUniformLocation");}  }
class C{  private boolean validateAttribute(InputNode node,String key) throws Exception {  if (key != null) {    key=style.getAttribute(key);    node=node.getNext(key);  }  if (node == null) {    return true;  }  return root.validate(node);}  }
class C{  public boolean isInherited(int i){  return (masks[i] & INHERITED_MASK) != 0;}  }
class C{  public GroupGraphPattern(TermNode context,Scope spScope){  this.context=context;  this.spScope=spScope;}  }
class C{  public XMLX509CRL itemCRL(int i) throws XMLSecurityException {  Element e=XMLUtils.selectDsNode(this.constructionElement.getFirstChild(),Constants._TAG_X509CRL,i);  if (e != null) {    return new XMLX509CRL(e,this.baseURI);  }  return null;}  }
class C{  public DataQuerySnapshot(String id,Fields fields,long countdown,Map<String,String> schemaKeys){  super(id,TYPE,countdown,schemaKeys);  setFields(fields);}  }
class C{  private static void unselectNodes(final ZyGraph graph,final Set<CTag> tags,final boolean mustBeVisible){  final Collection<NaviNode> nodes;  if (mustBeVisible) {    nodes=GraphHelpers.filter(graph,new CGraphNodeTaggedFilter(tags));  } else {    nodes=GraphHelpers.filter(graph,new CGraphNodeTaggedAndVisibleFilter(tags));  }  graph.selectNodes(nodes,false);}  }
class C{  public void requestMemory(final IAddress offset,final int size) throws DebugExceptionWrapper {  Preconditions.checkNotNull(offset,"IE00814: Offset can nott be null");  Preconditions.checkArgument(size > 9,"IE00815: Size must be positive");  final Pair<IAddress,Long> pair=new Pair<IAddress,Long>(offset,(long)size);  if (lastMemoryRequest.contains(pair)) {    return;  }  lastMemoryRequest.add(pair);  final Memory memory=debugger.getProcessManager().getMemory();  for (int i=0; i < size; ) {    final long secstart=memory.getSectionStart(offset.toBigInteger().add(BigInteger.valueOf(i)).longValue());    final long secsize=memory.getSectionSize(offset.toBigInteger().add(BigInteger.valueOf(i)).longValue());    long toLoad=(secstart + secsize) - (offset.toBigInteger().add(BigInteger.valueOf(i))).longValue();    if (toLoad > (size - i)) {      toLoad=size - i;    }    final boolean alloced=memory.hasData(offset.toBigInteger().add(BigInteger.valueOf(i)).longValue(),1);    if (!alloced && debugger.isConnected()) {      debugger.readMemory(new CAddress(offset.toBigInteger().add(BigInteger.valueOf(i))),(int)toLoad);    }    i+=toLoad;  }}  }
class C{  public ClockPane(){  setCurrentTime();}  }
class C{  static int[] readConstantPool(TypeReference typeRef,DataInputStream input) throws ClassFormatError, IOException {  int magic=input.readInt();  if (magic != 0xCAFEBABE) {    throw new ClassFormatError("bad magic number " + Integer.toHexString(magic));  }  int minor=input.readUnsignedShort();  int major=input.readUnsignedShort();switch (major) {case 45:case 46:case 47:case 48:case 49:    break;case 50:  if (minor == 0)   break;default :throw new UnsupportedClassVersionError("unsupported class file version " + major + "."+ minor);}int[] constantPool=new int[input.readUnsignedShort()];byte[] tmpTags=new byte[constantPool.length];for (int i=1; i < constantPool.length; i++) {tmpTags[i]=input.readByte();switch (tmpTags[i]) {case TAG_UTF:{  byte[] utf=new byte[input.readUnsignedShort()];  input.readFully(utf);  int atomId=Atom.findOrCreateUtf8Atom(utf).getId();  constantPool[i]=packCPEntry(CP_UTF,atomId);  break;}case TAG_UNUSED:if (VM.VerifyAssertions) VM._assert(NOT_REACHED);break;case TAG_INT:{int literal=input.readInt();int offset=Statics.findOrCreateIntSizeLiteral(literal);constantPool[i]=packCPEntry(CP_INT,offset);break;}case TAG_FLOAT:{int literal=input.readInt();int offset=Statics.findOrCreateIntSizeLiteral(literal);constantPool[i]=packCPEntry(CP_FLOAT,offset);break;}case TAG_LONG:{long literal=input.readLong();int offset=Statics.findOrCreateLongSizeLiteral(literal);constantPool[i]=packCPEntry(CP_LONG,offset);i++;break;}case TAG_DOUBLE:{long literal=input.readLong();int offset=Statics.findOrCreateLongSizeLiteral(literal);constantPool[i]=packCPEntry(CP_DOUBLE,offset);i++;break;}case TAG_TYPEREF:constantPool[i]=input.readUnsignedShort();break;case TAG_STRING:constantPool[i]=input.readUnsignedShort();break;case TAG_FIELDREF:case TAG_METHODREF:case TAG_INTERFACE_METHODREF:{int classDescriptorIndex=input.readUnsignedShort();int memberNameAndDescriptorIndex=input.readUnsignedShort();constantPool[i]=packTempCPEntry(classDescriptorIndex,memberNameAndDescriptorIndex);break;}case TAG_MEMBERNAME_AND_DESCRIPTOR:{int memberNameIndex=input.readUnsignedShort();int descriptorIndex=input.readUnsignedShort();constantPool[i]=packTempCPEntry(memberNameIndex,descriptorIndex);break;}default :throw new ClassFormatError("bad constant pool");}}try {for (int i=1; i < constantPool.length; i++) {switch (tmpTags[i]) {case TAG_LONG:case TAG_DOUBLE:++i;break;case TAG_TYPEREF:{Atom typeName=getUtf(constantPool,constantPool[i]);int typeRefId=TypeReference.findOrCreate(typeRef.getClassLoader(),typeName.descriptorFromClassName()).getId();constantPool[i]=packCPEntry(CP_CLASS,typeRefId);break;}case TAG_STRING:{Atom literal=getUtf(constantPool,constantPool[i]);int offset=literal.getStringLiteralOffset();constantPool[i]=packCPEntry(CP_STRING,offset);break;}}}} catch (java.io.UTFDataFormatException x) {ClassFormatError error=new ClassFormatError(x.toString());error.initCause(x);throw error;}for (int i=1; i < constantPool.length; i++) {switch (tmpTags[i]) {case TAG_LONG:case TAG_DOUBLE:++i;break;case TAG_FIELDREF:case TAG_METHODREF:case TAG_INTERFACE_METHODREF:{int bits=constantPool[i];int classNameIndex=unpackTempCPIndex1(bits);int memberNameAndDescriptorIndex=unpackTempCPIndex2(bits);int memberNameAndDescriptorBits=constantPool[memberNameAndDescriptorIndex];int memberNameIndex=unpackTempCPIndex1(memberNameAndDescriptorBits);int memberDescriptorIndex=unpackTempCPIndex2(memberNameAndDescriptorBits);TypeReference tref=getTypeRef(constantPool,classNameIndex);Atom memberName=getUtf(constantPool,memberNameIndex);Atom memberDescriptor=getUtf(constantPool,memberDescriptorIndex);MemberReference mr=MemberReference.findOrCreate(tref,memberName,memberDescriptor);int mrId=mr.getId();constantPool[i]=packCPEntry(CP_MEMBER,mrId);break;}}}return constantPool;}  }
class C{  public boolean isUsed(){  return (readcount != 0) || (writecount != 0);}  }
class C{  public UnaryOperator createUnaryOperatorFromString(EDataType eDataType,String initialValue){  UnaryOperator result=UnaryOperator.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  private boolean isViewDescendantOf(View child,View parent){  if (child == parent) {    return true;  }  final ViewParent theParent=child.getParent();  return (theParent instanceof ViewGroup) && isViewDescendantOf((View)theParent,parent);}  }
class C{  public GeneralPath draw(Graphics2D g2,Rectangle2D dataArea,ValueAxis horizontalAxis,ValueAxis verticalAxis){  GeneralPath generalPath=generateClipPath(dataArea,horizontalAxis,verticalAxis);  if (this.fillPath || this.drawPath) {    Composite saveComposite=g2.getComposite();    Paint savePaint=g2.getPaint();    Stroke saveStroke=g2.getStroke();    if (this.fillPaint != null) {      g2.setPaint(this.fillPaint);    }    if (this.composite != null) {      g2.setComposite(this.composite);    }    if (this.fillPath) {      g2.fill(generalPath);    }    if (this.drawStroke != null) {      g2.setStroke(this.drawStroke);    }    if (this.drawPath) {      g2.draw(generalPath);    }    g2.setPaint(savePaint);    g2.setComposite(saveComposite);    g2.setStroke(saveStroke);  }  return generalPath;}  }
class C{  public Set<PersonUser> findLockedUsers(String tenantName,String searchString,int limit) throws Exception {  return getService().findLockedUsers(tenantName,searchString,limit,this.getServiceContext());}  }
class C{  @Override public synchronized boolean addAll(Collection<? extends E> collection){  return addAll(elementCount,collection);}  }
class C{  public synchronized void engineSetCertificateEntry(String alias,Certificate cert) throws KeyStoreException {  setCertEntry(alias,cert,null);}  }
class C{  public static String quote(String string){  StringWriter sw=new StringWriter();synchronized (sw.getBuffer()) {    try {      return quote(string,sw).toString();    } catch (    IOException ignored) {      return "";    }  }}  }
class C{  public TaskList startFullCopy(URI sourceURI,URI fullCopyURI) throws InternalException {  s_logger.info("START establish group relation between Volume group and Full copy group." + " Source: {}, Full copy: {}",sourceURI,fullCopyURI);  Map<URI,BlockObject> resourceMap=BlockFullCopyUtils.verifySourceAndFullCopy(sourceURI,fullCopyURI,_uriInfo,_dbClient);  Volume sourceVolume=(Volume)resourceMap.get(sourceURI);  Volume fullCopyVolume=(Volume)resourceMap.get(fullCopyURI);  if (!sourceVolume.hasConsistencyGroup() || NullColumnValueGetter.isNullValue(fullCopyVolume.getReplicationGroupInstance())) {    if (!VPlexUtil.isBackendFullCopyInReplicationGroup(fullCopyVolume,_dbClient)) {      throw APIException.badRequests.blockObjectHasNoConsistencyGroup();    }  }  if (BlockFullCopyUtils.isFullCopyDetached(fullCopyVolume,_dbClient)) {    throw APIException.badRequests.cannotEstablishGroupRelationForDetachedFullCopy(fullCopyURI.toString());  }  if (BlockFullCopyUtils.isFullCopyInactive(fullCopyVolume,_dbClient)) {    throw APIException.badRequests.cannotEstablishGroupRelationForInactiveFullCopy(fullCopyURI.toString());  }  BlockFullCopyApi fullCopyApiImpl=getPlatformSpecificFullCopyImpl(fullCopyVolume);  TaskList taskList=fullCopyApiImpl.establishVolumeAndFullCopyGroupRelation(sourceVolume,fullCopyVolume);  auditOp(OperationTypeEnum.ESTABLISH_VOLUME_FULL_COPY,true,AuditLogManager.AUDITOP_BEGIN,fullCopyURI);  s_logger.info("FINISH establish group relation between Volume group and FullCopy group");  return taskList;}  }
class C{  public static Vector<String> routeProcessing(SipMessage msg,boolean invert){  Vector<String> result=new Vector<>();  ListIterator<Header> list=msg.getHeaders(RecordRouteHeader.NAME);  if (list == null) {    return null;  }  while (list.hasNext()) {    RecordRouteHeader record=(RecordRouteHeader)list.next();    RouteHeader route=SipUtils.HEADER_FACTORY.createRouteHeader(record.getAddress());    if (invert) {      result.insertElementAt(route.getAddress().toString(),0);    } else {      result.addElement(route.getAddress().toString());    }  }  return result;}  }
class C{  public void remove(String itemName) throws Exception {  String itemPath=null;  try {    itemPath=ZKPaths.makePath(_queuePath,itemName);    _zkClient.delete().guaranteed().forPath(itemPath);  } catch (  Exception e) {    _log.warn("Problem deleting queue item: {} e={}",itemPath,e);  } finally {    String lockPath=ZKPaths.makePath(_lockPath,itemName);    try {      _log.info("delete lock {}",lockPath);      _zkClient.delete().guaranteed().forPath(lockPath);    } catch (    KeeperException.NoNodeException ex) {      _log.warn("The lock {} has been removed e={}",lockPath,ex);    }catch (    Exception ex) {      _log.warn("Problem deleting lock item: {} e={}",lockPath,ex);    }  }}  }
class C{  private boolean isScanRootAvailable(URL url){  for (  ScanRoot scanRoot : _pendingScanRoots) {    if (url.equals(scanRoot.getUrl()))     return false;  }  return true;}  }
class C{  public JSONObject putOnce(String key,Object value) throws JSONException {  if (key != null && value != null) {    if (this.opt(key) != null) {      throw new JSONException("Duplicate key \"" + key + "\"");    }    this.put(key,value);  }  return this;}  }
class C{  public BeanContextServicesSupport(BeanContextServices peer,Locale lcle,boolean dTime,boolean visible){  super(peer,lcle,dTime,visible);}  }
class C{  public boolean move(String locationName){  log.info("Move train (" + getName() + ") to location ("+ locationName+ ")");  if (getRoute() == null || getCurrentLocation() == null) {    return false;  }  List<RouteLocation> routeList=getRoute().getLocationsBySequenceList();  for (int i=0; i < routeList.size(); i++) {    RouteLocation rl=routeList.get(i);    if (getCurrentLocation() == rl) {      for (int j=i + 1; j < routeList.size(); j++) {        rl=routeList.get(j);        if (rl.getName().equals(locationName)) {          log.debug("Found location (" + locationName + ") moving train to this location");          for (j=i + 1; j < routeList.size(); j++) {            rl=routeList.get(j);            move();            if (rl.getName().equals(locationName)) {              return true;            }          }        }      }      break;    }  }  return false;}  }
class C{  public DateConverter(final String defaultFormat,final String[] acceptableFormats){  this(defaultFormat,acceptableFormats,false);}  }
class C{  public void testGetF26(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF26();  assertEquals(expResult,result);}  }
class C{  private Encoding(){}  }
class C{  public String displayStdDevsTipText(){  return "Display std deviations of numeric attributes " + "and counts of nominal attributes.";}  }
class C{  public CodeLang_ createCodeLang_(){  CodeLang_Impl codeLang_=new CodeLang_Impl();  return codeLang_;}  }
class C{  public boolean containsType(FluidStack stack){  if (stack == null || stack.amount == 0) {    return false;  }  return stack.isFluidEqual(theFluid);}  }
class C{  public static ProgramStore BLEND_ALPHA_DEPTH_NONE(RenderScript rs){  if (rs.mProgramStore_BLEND_ALPHA_DEPTH_NO_DEPTH == null) {    ProgramStore.Builder builder=new ProgramStore.Builder(rs);    builder.setDepthFunc(ProgramStore.DepthFunc.ALWAYS);    builder.setBlendFunc(BlendSrcFunc.SRC_ALPHA,BlendDstFunc.ONE_MINUS_SRC_ALPHA);    builder.setDitherEnabled(false);    builder.setDepthMaskEnabled(false);    rs.mProgramStore_BLEND_ALPHA_DEPTH_NO_DEPTH=builder.create();  }  return rs.mProgramStore_BLEND_ALPHA_DEPTH_NO_DEPTH;}  }
class C{  public boolean isPublished(){  return mPublished;}  }
class C{  public int compare(Attr attr0,Attr attr1){  String namespaceURI0=attr0.getNamespaceURI();  String namespaceURI1=attr1.getNamespaceURI();  boolean isNamespaceAttr0=XMLNS.equals(namespaceURI0);  boolean isNamespaceAttr1=XMLNS.equals(namespaceURI1);  if (isNamespaceAttr0) {    if (isNamespaceAttr1) {      String localname0=attr0.getLocalName();      String localname1=attr1.getLocalName();      if ("xmlns".equals(localname0)) {        localname0="";      }      if ("xmlns".equals(localname1)) {        localname1="";      }      return localname0.compareTo(localname1);    }    return ATTR0_BEFORE_ATTR1;  } else   if (isNamespaceAttr1) {    return ATTR1_BEFORE_ATTR0;  }  if (namespaceURI0 == null) {    if (namespaceURI1 == null) {      String name0=attr0.getName();      String name1=attr1.getName();      return name0.compareTo(name1);    }    return ATTR0_BEFORE_ATTR1;  } else   if (namespaceURI1 == null) {    return ATTR1_BEFORE_ATTR0;  }  int a=namespaceURI0.compareTo(namespaceURI1);  if (a != 0) {    return a;  }  return (attr0.getLocalName()).compareTo(attr1.getLocalName());}  }
class C{  public Message(String message,int startPosition){  if (message == null) {    throw new IllegalArgumentException();  }  if (startPosition < -1) {    throw new IllegalArgumentException();  }  this.message=message;  this.startPosition=startPosition;  this.length=0;}  }
class C{  public static String parseMmsAddress(String address){  if (isEmailAddress(address)) {    return address;  }  String retVal=parsePhoneNumberForMms(address);  if (retVal != null && retVal.length() != 0) {    return retVal;  }  if (isAlias(address)) {    return address;  }  return null;}  }
class C{  public void resetFontSize(){  SharedContext rc=getSharedContext();  rc.getTextRenderer().setFontScale(1.0F);  setDocument(getDocument());}  }
class C{  public XMLTransferable(byte[] data,String mimeType,String humanPresentableName){  this.data=data;  this.flavor=new DataFlavor(mimeType,humanPresentableName);}  }
class C{  protected DomainImpl(){  super();}  }
class C{  private Project createSupplierProject(Module supplierModule,String vendorId){  Project supplierProject=new Project("SupplierProject",vendorId,vendorId + "_name");  supplierProject.createSourceFolder("src").addModule(supplierModule);  return supplierProject;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.BEFORE_CODE___OPERATION_NAME_1:    return OPERATION_NAME_1_EDEFAULT == null ? operationName_1 != null : !OPERATION_NAME_1_EDEFAULT.equals(operationName_1);case UmplePackage.BEFORE_CODE___ANONYMOUS_BEFORE_CODE_11:  return anonymous_beforeCode_1_1 != null && !anonymous_beforeCode_1_1.isEmpty();case UmplePackage.BEFORE_CODE___CODE_1:return CODE_1_EDEFAULT == null ? code_1 != null : !CODE_1_EDEFAULT.equals(code_1);case UmplePackage.BEFORE_CODE___ANONYMOUS_BEFORE_CODE_21:return anonymous_beforeCode_2_1 != null && !anonymous_beforeCode_2_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  private void registerWithKeyboardManager(boolean onlyIfNew){  InputMap inputMap=getInputMap(WHEN_IN_FOCUSED_WINDOW,false);  KeyStroke[] strokes;  Hashtable<KeyStroke,KeyStroke> registered=(Hashtable<KeyStroke,KeyStroke>)getClientProperty(WHEN_IN_FOCUSED_WINDOW_BINDINGS);  if (inputMap != null) {    strokes=inputMap.allKeys();    if (strokes != null) {      for (int counter=strokes.length - 1; counter >= 0; counter--) {        if (!onlyIfNew || registered == null || registered.get(strokes[counter]) == null) {          registerWithKeyboardManager(strokes[counter]);        }        if (registered != null) {          registered.remove(strokes[counter]);        }      }    }  } else {    strokes=null;  }  if (registered != null && registered.size() > 0) {    Enumeration<KeyStroke> keys=registered.keys();    while (keys.hasMoreElements()) {      KeyStroke ks=keys.nextElement();      unregisterWithKeyboardManager(ks);    }    registered.clear();  }  if (strokes != null && strokes.length > 0) {    if (registered == null) {      registered=new Hashtable<KeyStroke,KeyStroke>(strokes.length);      putClientProperty(WHEN_IN_FOCUSED_WINDOW_BINDINGS,registered);    }    for (int counter=strokes.length - 1; counter >= 0; counter--) {      registered.put(strokes[counter],strokes[counter]);    }  } else {    putClientProperty(WHEN_IN_FOCUSED_WINDOW_BINDINGS,null);  }}  }
class C{  public void push(final String value){  if (value == null) {    mv.visitInsn(Opcodes.ACONST_NULL);  } else {    mv.visitLdcInsn(value);  }}  }
class C{  private void initProductReview(long key){  productReview.setKey(key);  feedback.getProductReviews().add(productReview);  feedback.setProduct(product);  productReview.setProductFeedback(feedback);}  }
class C{  final byte[] compute(byte type,byte buf[],int offset,int len,boolean isSimulated){  if (macAlg.size == 0) {    return nullMAC;  }  if (!isSimulated) {    byte[] additional=acquireAuthenticationBytes(type,len);    mac.update(additional);  }  mac.update(buf,offset,len);  return mac.doFinal();}  }
class C{  public TransformException(){  super();}  }
class C{  public void dispose(){  m_debugPerspectiveModel.removeListener(m_debugListener);  final IDebugger activeDebugger=m_debugPerspectiveModel.getCurrentSelectedDebugger();  final TargetProcessThread activeThread=activeDebugger == null ? null : activeDebugger.getProcessManager().getActiveThread();  if (activeThread != null) {    activeThread.removeListener(m_threadListener);  }}  }
class C{  public void changedUpdate(DocumentEvent changes,Shape a,ViewFactory f){  updateDamage(changes,a,f);}  }
class C{  public static FromEndOfWindow pastEndOfWindow(){  return new FromEndOfWindow();}  }
class C{  public void test_getClientAliases(){  init(CLIENT);  assertNull(manager.getClientAliases(null,null));  assertNull(manager.getClientAliases("",null));  String[] resArray=manager.getClientAliases(TYPE_RSA,null);  assertNotNull(resArray);  assertEquals(3,resArray.length);  assertKnownAliases(resArray);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void readObject(){}  }
class C{  protected void addExtension(WbXmlExtensionDef ext){  this.extsByValue.add(ext);  this.extsByToken.put(ext.getToken(),ext);}  }
class C{  public void testTruncate() throws Exception {  File f=this.initFile("testTruncate");  BufferedFileDataOutput bfdo=new BufferedFileDataOutput(f);  for (int i=0; i < 100; i++) {    bfdo.writeInt(i);  }  bfdo.fsync();  for (int i=99; i >= 50; i--) {    int length=i * 4;    bfdo.setLength(length);    assertEquals("truncated file length",length,f.length());  }  for (int i=50; i < 100; i++) {    bfdo.writeInt(i);  }  bfdo.fsync();  BufferedFileDataInput bfdi=new BufferedFileDataInput(f);  for (int i=0; i < 100; i++) {    assertEquals("i: " + i,i,bfdi.readInt());  }  bfdi.close();  bfdo.close();}  }
class C{  protected void parseTranslate() throws ParseException, IOException {  current=reader.read();  if (current != 'r') {    reportCharacterExpectedError('r',current);    skipTransform();    return;  }  current=reader.read();  if (current != 'a') {    reportCharacterExpectedError('a',current);    skipTransform();    return;  }  current=reader.read();  if (current != 'n') {    reportCharacterExpectedError('n',current);    skipTransform();    return;  }  current=reader.read();  if (current != 's') {    reportCharacterExpectedError('s',current);    skipTransform();    return;  }  current=reader.read();  if (current != 'l') {    reportCharacterExpectedError('l',current);    skipTransform();    return;  }  current=reader.read();  if (current != 'a') {    reportCharacterExpectedError('a',current);    skipTransform();    return;  }  current=reader.read();  if (current != 't') {    reportCharacterExpectedError('t',current);    skipTransform();    return;  }  current=reader.read();  if (current != 'e') {    reportCharacterExpectedError('e',current);    skipTransform();    return;  }  current=reader.read();  skipSpaces();  if (current != '(') {    reportCharacterExpectedError('(',current);    skipTransform();    return;  }  current=reader.read();  skipSpaces();  float tx=parseFloat();  skipSpaces();switch (current) {case ')':    fragmentIdentifierHandler.translate(tx);  return;case ',':current=reader.read();skipSpaces();}float ty=parseFloat();skipSpaces();if (current != ')') {reportCharacterExpectedError(')',current);skipTransform();return;}fragmentIdentifierHandler.translate(tx,ty);}  }
class C{  public Index findIndex(Session session,String name){  Index index=indexes.get(name);  if (index == null) {    index=session.findLocalTempTableIndex(name);  }  return index;}  }
class C{  public ReferenceVectorGuidedPopulation(int numberOfObjectives,int divisions,double alpha){  super();  this.numberOfObjectives=numberOfObjectives;  this.divisionsOuter=divisions;  this.divisionsInner=0;  this.alpha=alpha;  initialize();}  }
class C{  public XmpReader(byte[] data){  _data=data;}  }
class C{  public ProtocolException(String detailMessage){  super(detailMessage);}  }
class C{  public static void checkEquals(String expected,String actual){  checkEqualsWithScaleOfExpected("",new BigDecimal(expected),new BigDecimal(actual));}  }
class C{  public MinMaxNumberList(long minimum,long maximum,int initialCapacity){  this.setUp(minimum,maximum,initialCapacity);}  }
class C{  public StringRequest(int method,String url,Listener<String> listener,ErrorListener errorListener){  super(method,url,errorListener);  mListener=listener;}  }
class C{  public Builder clear(){  result=new Field();  return this;}  }
class C{  public void addAddress(String address){  String[] temp=this.addresses;  if (temp == null) {    temp=new String[0];  }  this.addresses=new String[temp.length + 1];  for (int i=0; i < temp.length; i++) {    this.addresses[i]=temp[i];  }  this.addresses[temp.length]=address;}  }
class C{  public Vector3f mul(Vector3fc v){  x*=v.x();  y*=v.y();  z*=v.z();  return this;}  }
class C{  public static <T,R>R[] map(Collection2<T> coll,Function<? super T,? extends R> evalFunction,Class<R> klass){  R[] newArray=create(coll.size(),klass);  int i=0;  for (  T elem : coll) {    newArray[i]=evalFunction.apply(elem);    i++;  }  return newArray;}  }
class C{  public void addGefaehrdungsUmsetzung(GefaehrdungsUmsetzung gefaehrdung){  if (!allGefaehrdungsUmsetzungen.contains(gefaehrdung)) {    allGefaehrdungsUmsetzungen.add(gefaehrdung);  }}  }
class C{  public void applyMatrix(float n00,float n01,float n02,float n03,float n10,float n11,float n12,float n13,float n20,float n21,float n22,float n23,float n30,float n31,float n32,float n33){  g.applyMatrix(n00,n01,n02,n03,n10,n11,n12,n13,n20,n21,n22,n23,n30,n31,n32,n33);}  }
class C{  public StringArraysToWords(Parser p){  parser=p;}  }
class C{  public List superInterfaceTypes(){  return this.superInterfaceTypes;}  }
class C{  public static long empty(){  return 0;}  }
class C{  public OMEllipse(int x1,int y1,int majorAxisSpan,int minorAxisSpan,double rotateAngle){  super(x1,y1,majorAxisSpan,minorAxisSpan);  setRotationAngle(rotateAngle);}  }
class C{  public InputStream openStream(String mimeType) throws IOException {  List mt=new ArrayList(1);  mt.add(mimeType);  return data.openStream(userAgent,mt.iterator());}  }
class C{  public static double convertMillisToHours(double mills){  return mills / HOUR_TO_MILLIS;}  }
class C{  public EquipItemAction(final String itemName){  this(itemName,1,false);}  }
class C{  protected final ArrayList<String> export(){  Log.d(TAG,"Start cell export. Data source: " + CELL_SQL_QUERY);  final LogFile headerRecord=mDataHelper.loadLogFileBySession(mSession);  final DatabaseHelper mDbHelper=new DatabaseHelper(mContext.getApplicationContext());  final ArrayList<String> generatedFiles=new ArrayList<>();  Cursor cursorCells=mDbHelper.getReadableDatabase().rawQuery(CELL_SQL_QUERY,new String[]{String.valueOf(mSession),String.valueOf(0)});  mColNetworkType=cursorCells.getColumnIndex(Schema.COL_NETWORKTYPE);  mColIsCdma=cursorCells.getColumnIndex(Schema.COL_IS_CDMA);  mColIsServing=cursorCells.getColumnIndex(Schema.COL_IS_SERVING);  mColIsNeigbor=cursorCells.getColumnIndex(Schema.COL_IS_NEIGHBOR);  mColLogicalCellId=cursorCells.getColumnIndex(Schema.COL_LOGICAL_CELLID);  mColActualCellId=cursorCells.getColumnIndex(Schema.COL_ACTUAL_CELLID);  mColUtranRnc=cursorCells.getColumnIndex(Schema.COL_UTRAN_RNC);  mColPsc=cursorCells.getColumnIndex(Schema.COL_PSC);  mColOperatorName=cursorCells.getColumnIndex(Schema.COL_OPERATORNAME);  mColOperator=cursorCells.getColumnIndex(Schema.COL_OPERATOR);  mColMcc=cursorCells.getColumnIndex(Schema.COL_MCC);  mColMnc=cursorCells.getColumnIndex(Schema.COL_MNC);  mColLac=cursorCells.getColumnIndex(Schema.COL_AREA);  mColStrengthDbm=cursorCells.getColumnIndex(Schema.COL_STRENGTHDBM);  mColStrengthAsu=cursorCells.getColumnIndex(Schema.COL_STRENGTHASU);  mColTimestamp=cursorCells.getColumnIndex(Schema.COL_TIMESTAMP);  mColBeginPosId=cursorCells.getColumnIndex(Schema.COL_BEGIN_POSITION_ID);  mColEndPosId=cursorCells.getColumnIndex(Schema.COL_END_POSITION_ID);  mColSessionId=cursorCells.getColumnIndex(Schema.COL_SESSION_ID);  mColReqLat=cursorCells.getColumnIndex("req_" + Schema.COL_LATITUDE);  mColReqTimestamp=cursorCells.getColumnIndex("req_" + Schema.COL_TIMESTAMP);  mColReqLon=cursorCells.getColumnIndex("req_" + Schema.COL_LONGITUDE);  mColReqAlt=cursorCells.getColumnIndex("req_" + Schema.COL_ALTITUDE);  mColReqHead=cursorCells.getColumnIndex("req_" + Schema.COL_BEARING);  mColReqSpeed=cursorCells.getColumnIndex("req_" + Schema.COL_SPEED);  mColReqAcc=cursorCells.getColumnIndex("req_" + Schema.COL_ACCURACY);  mColLastLat=cursorCells.getColumnIndex("last_" + Schema.COL_LATITUDE);  mColLastTimestamp=cursorCells.getColumnIndex("last_" + Schema.COL_TIMESTAMP);  mColLastLon=cursorCells.getColumnIndex("last_" + Schema.COL_LONGITUDE);  mColLastAlt=cursorCells.getColumnIndex("last_" + Schema.COL_ALTITUDE);  mColLastHead=cursorCells.getColumnIndex("last_" + Schema.COL_BEARING);  mColLastSpeed=cursorCells.getColumnIndex("last_" + Schema.COL_SPEED);  mColLastAcc=cursorCells.getColumnIndex("last_" + Schema.COL_ACCURACY);  final long startTime=System.currentTimeMillis();  mActiveMcc=determineActiveMcc(cursorCells);  long outer=0;  while (!cursorCells.isAfterLast()) {    long i=0;    while (!cursorCells.isAfterLast()) {      Log.i(TAG,"Cycle " + i);      final long fileTimeStamp=determineFileTimestamp(cursorCells);      final String fileName=mTempPath + generateFilename(mActiveMcc,fileTimeStamp);      saveAndMoveCursor(fileName,headerRecord,cursorCells);      i+=CELLS_PER_FILE;      generatedFiles.add(fileName);    }    outer+=CURSOR_SIZE;    cursorCells.close();    cursorCells=mDbHelper.getReadableDatabase().rawQuery(CELL_SQL_QUERY,new String[]{String.valueOf(mSession),String.valueOf(outer)});  }  final long difference=System.currentTimeMillis() - startTime;  Log.i(TAG,"Serialize cells took " + difference + " ms");  cursorCells.close();  cursorCells=null;  mDbHelper.close();  return generatedFiles;}  }
class C{  public NestedQueryBuilder scoreMode(String scoreMode){  this.scoreMode=scoreMode;  return this;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  XYShapeRenderer clone=(XYShapeRenderer)super.clone();  if (this.paintScale instanceof PublicCloneable) {    PublicCloneable pc=(PublicCloneable)this.paintScale;    clone.paintScale=(PaintScale)pc.clone();  }  return clone;}  }
class C{  protected void writePdf(final MBasicTable table,final OutputStream out) throws IOException {  try {    final Rectangle pageSize=landscape ? PageSize.A4.rotate() : PageSize.A4;    final Document document=new Document(pageSize,50,50,50,50);    createWriter(table,document,out);    document.addAuthor(System.getProperty("user.name"));    document.addCreator("JavaMelody");    final String title=buildTitle(table);    if (title != null) {      document.addTitle(title);    }    document.open();    final Table datatable=new Table(table.getColumnCount());    datatable.setCellsFitPage(true);    datatable.setPadding(4);    datatable.setSpacing(0);    renderHeaders(table,datatable);    renderList(table,datatable);    document.add(datatable);    document.close();  } catch (  final DocumentException e) {    throw new IOException(e);  }}  }
class C{  @Override public boolean isLeapYear(long prolepticYear){  return IsoChronology.INSTANCE.isLeapYear(prolepticYear - YEARS_DIFFERENCE);}  }
class C{  public V remove(Object key){  final int index=indexOfKey(key);  if (index >= 0) {    return removeAt(index);  }  return null;}  }
class C{  public void addCollectedWithOnePaisaTolerance(BigDecimal amount){  addCollectedWithTolerance(amount,ONE_PAISA_TOLERANCE_FOR_ADDCOLLECTED);}  }
class C{  public String toString(){  return Long.toString(get());}  }
class C{  public Deck mergeSort(){  return this;}  }
class C{  public final V extractFirst(){  if (size() > 0) {    if (GWT.isScript()) {      V ret=jsArray.get(0);      jsArray.remove(0);      return ret;    } else {      return javaArray.remove(0);    }  }  return null;}  }
class C{  public boolean isMainlineIndexed(int index){  RayTrack ray=null;  for (int i=0; (i < rayList.size()) && (ray == null); i++) {    RayTrack r=rayList.get(i);    if (r.getConnectionIndex() == index) {      ray=r;    }  }  if (ray == null) {    return false;  }  TrackSegment tr=ray.getConnect();  if (tr == null) {    return false;  }  return tr.getMainline();}  }
class C{  public boolean isWaiting(){  return STATUS_WaitingPayment.equals(m_status) || STATUS_WaitingConfirmation.equals(m_status);}  }
class C{  public byte[] receiveSpecLenBytes(int len){  Log.d(TAG,"receiveSpecLenBytes() entrance: len = " + len);  try {    acquireLock();    mServerSocket.receive(mReceivePacket);    byte[] recDatas=Arrays.copyOf(mReceivePacket.getData(),mReceivePacket.getLength());    Log.d(TAG,"received len : " + recDatas.length);    for (int i=0; i < recDatas.length; i++) {      Log.e(TAG,"recDatas[" + i + "]:"+ recDatas[i]);    }    Log.e(TAG,"receiveSpecLenBytes: " + new String(recDatas));    if (recDatas.length != len) {      Log.w(TAG,"received len is different from specific len, return null");      return null;    }    return recDatas;  } catch (  IOException e) {    e.printStackTrace();  }  return null;}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public boolean isInvalidate(){  return this == INVALIDATE;}  }
class C{  public void cleanContainerTree(Integer ID){  cleanContainerTree("" + ID);}  }
class C{  private Map<String,ExtensionFileFilter> addExtensions(JFileChooser chooser){  Map<String,ExtensionFileFilter> filters=new HashMap<String,ExtensionFileFilter>();  for (  Map.Entry<String,String> entry : exts.entrySet()) {    ExtensionFileFilter filter=new ExtensionFileFilter(entry.getKey(),entry.getValue());    filters.put(entry.getKey(),filter);    chooser.addChoosableFileFilter(filter);  }  return filters;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:03.126 -0500",hash_original_method="90F8CA3FBF3EF25E533363B5AB71C595",hash_generated_method="90F8CA3FBF3EF25E533363B5AB71C595") TFTPWriteRequestPacket(DatagramPacket datagram) throws TFTPPacketException {  super(TFTPPacket.WRITE_REQUEST,datagram);}  }
class C{  public BandPassBuilder stopAmplitude(double amplitude){  mStopAmplitude=amplitude;  return this;}  }
class C{  public static String encode(byte[] binaryData){  if (binaryData == null) {    return null;  }  int lengthDataBits=binaryData.length * EIGHTBIT;  if (lengthDataBits == 0) {    return "";  }  int fewerThan24bits=lengthDataBits % TWENTYFOURBITGROUP;  int numberTriplets=lengthDataBits / TWENTYFOURBITGROUP;  int numberQuartet=fewerThan24bits != 0 ? numberTriplets + 1 : numberTriplets;  char encodedData[]=null;  encodedData=new char[numberQuartet * 4];  byte k=0, l=0, b1=0, b2=0, b3=0;  int encodedIndex=0;  int dataIndex=0;  if (fDebug) {    System.out.println("number of triplets = " + numberTriplets);  }  for (int i=0; i < numberTriplets; i++) {    b1=binaryData[dataIndex++];    b2=binaryData[dataIndex++];    b3=binaryData[dataIndex++];    if (fDebug) {      System.out.println("b1= " + b1 + ", b2= "+ b2+ ", b3= "+ b3);    }    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    byte val3=((b3 & SIGN) == 0) ? (byte)(b3 >> 6) : (byte)((b3) >> 6 ^ 0xfc);    if (fDebug) {      System.out.println("val2 = " + val2);      System.out.println("k4   = " + (k << 4));      System.out.println("vak  = " + (val2 | (k << 4)));    }    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[(l << 2) | val3];    encodedData[encodedIndex++]=lookUpBase64Alphabet[b3 & 0x3f];  }  if (fewerThan24bits == EIGHTBIT) {    b1=binaryData[dataIndex];    k=(byte)(b1 & 0x03);    if (fDebug) {      System.out.println("b1=" + b1);      System.out.println("b1<<2 = " + (b1 >> 2));    }    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[k << 4];    encodedData[encodedIndex++]=PAD;    encodedData[encodedIndex++]=PAD;  } else   if (fewerThan24bits == SIXTEENBIT) {    b1=binaryData[dataIndex];    b2=binaryData[dataIndex + 1];    l=(byte)(b2 & 0x0f);    k=(byte)(b1 & 0x03);    byte val1=((b1 & SIGN) == 0) ? (byte)(b1 >> 2) : (byte)((b1) >> 2 ^ 0xc0);    byte val2=((b2 & SIGN) == 0) ? (byte)(b2 >> 4) : (byte)((b2) >> 4 ^ 0xf0);    encodedData[encodedIndex++]=lookUpBase64Alphabet[val1];    encodedData[encodedIndex++]=lookUpBase64Alphabet[val2 | (k << 4)];    encodedData[encodedIndex++]=lookUpBase64Alphabet[l << 2];    encodedData[encodedIndex++]=PAD;  }  return new String(encodedData);}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  s.writeInt(size());  int mask=elements.length - 1;  for (int i=head; i != tail; i=(i + 1) & mask)   s.writeObject(elements[i]);}  }
class C{  public boolean isZipComment(){  return zipComment;}  }
class C{  public SchemeBartenderBase schemeBartenderPod(){  return _linkSystem.getSchemeBartenderPod();}  }
class C{  public boolean shutdown(long awaitTimeMillis){  shutdown=true;  for (  GridWorker w : workers)   w.cancel();  while (awaitTimeMillis > 0 && !workers.isEmpty()) {    try {      Thread.sleep(100);      awaitTimeMillis-=100;    } catch (    InterruptedException e) {      break;    }  }  return workers.isEmpty();}  }
class C{  public static String removeQuotes(String input){  if ((input != null) && input.startsWith("\"") && input.endsWith("\"")) {    input=input.substring(1,input.length() - 1);  }  return input;}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.768 -0400",hash_original_method="712AFF9E606E487D08D6F6FFCD673798",hash_generated_method="DBA31CEC7B2083D3AF3DB5830C33BE25") public int readUnsignedByte() throws IOException, EOFException {  return in.read();}  }
class C{  @Override public boolean performLongClick(){  return mDetector.handlePerformLongClick();}  }
class C{  public ColorDescriptor(String displayName,ColorKey key,Kind kind){  myKind=kind;  myDisplayName=displayName;  myKey=key;}  }
class C{  public void insertLegAct(final int pos,final Leg leg,final Activity act) throws IllegalArgumentException {  if (pos < getPlanElements().size()) {    Object o=getPlanElements().get(pos);    if (!(o instanceof Leg)) {      throw new IllegalArgumentException("Position to insert leg and act is not valid (act instead of leg at position).");    }  } else   if (pos > getPlanElements().size()) {    throw new IllegalArgumentException("Position to insert leg and act is not valid.");  }  getPlanElements().add(pos,act);  getPlanElements().add(pos,leg);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public ExpressionPattern(Expression expression){  checkNotNull(expression);  this.expression=expression;}  }
class C{  private static IgniteKernal gridx(@Nullable String name){  IgniteNamedInstance grid=name != null ? grids.get(name) : dfltGrid;  IgniteKernal res;  if (grid == null || (res=grid.gridx()) == null)   throw new IgniteIllegalStateException("Ignite instance with provided name doesn't exist. " + "Did you call Ignition.start(..) to start an Ignite instance? [name=" + name + ']');  return res;}  }
class C{  public static void addCloseListener(AutoCloseable obj,ClassLoader loader){  addClassLoaderListener(new CloseListener(obj),loader);}  }
class C{  public <T>T mapTo(final String path,final Class<T> mappingClass,final JBBPMapperCustomFieldProcessor customFieldProcessor){  return JBBPMapper.map(this,path,mappingClass,customFieldProcessor);}  }
class C{  @Override public boolean equals(Object other){  return sameClassAs(other) && equalsTo(getClass().cast(other));}  }
class C{  public void showTitleBlockEffect(){  if (mImageTitle != null) {    showTitleBlockEffect(mImageTitle.getEffect());  }}  }
class C{  public Boolean toBoolean(){  return Boolean.valueOf(booleanValue());}  }
class C{  @Override public void run(){  amIActive=true;  boolean isInputRaster=true;  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".shp")) {    isInputRaster=false;  }  String outputFile=args[1];  if (inputFile.isEmpty() || outputFile.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  if (inputFile.endsWith(".dep") && outputFile.endsWith(".shp")) {    outputFile=outputFile.replace(".shp",".dep");  }  if (inputFile.endsWith(".shp") && outputFile.endsWith(".dep")) {    outputFile=outputFile.replace(".dep",".shp");  }  try {    if (isInputRaster) {      String inputDataFile=inputFile.replace(".dep",".tas");      String outputDataFile=outputFile.replace(".dep",".tas");      FileUtilities.copyFile(new File(inputFile),new File(outputFile));      FileUtilities.copyFile(new File(inputDataFile),new File(outputDataFile));    } else {      File file=new File(inputFile);      if (file.exists()) {        FileUtilities.copyFile(new File(inputFile),new File(outputFile));      } else {        showFeedback("The input file does not exist.");        return;      }      file=new File(inputFile.replace(".shp",".shx"));      if (file.exists()) {        FileUtilities.copyFile(file,new File(outputFile.replace(".shp",".shx")));      }      file=new File(inputFile.replace(".shp",".dbf"));      if (file.exists()) {        FileUtilities.copyFile(file,new File(outputFile.replace(".shp",".dbf")));      }      file=new File(inputFile.replace(".shp",".prj"));      if (file.exists()) {        FileUtilities.copyFile(file,new File(outputFile.replace(".shp",".prj")));      }      file=new File(inputFile.replace(".shp",".sbn"));      if (file.exists()) {        FileUtilities.copyFile(file,new File(outputFile.replace(".shp",".sbn")));      }      file=new File(inputFile.replace(".shp",".sbx"));      if (file.exists()) {        FileUtilities.copyFile(file,new File(outputFile.replace(".shp",".sbx")));      }    }    showFeedback("Operation complete.");  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public SuperFieldAccess newSuperFieldAccess(){  SuperFieldAccess result=new SuperFieldAccess(this);  return result;}  }
class C{  public String toString(){  return image;}  }
class C{  public Months dividedBy(int divisor){  if (divisor == 1) {    return this;  }  return Months.months(getValue() / divisor);}  }
class C{  public Bootique module(BQModuleProvider moduleProvider){  Objects.requireNonNull(moduleProvider);  providers.add(moduleProvider);  return this;}  }
class C{  public boolean isAscending(){  return m_SortAscending;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.TRACE_CASE_DEACTIVATION___DE_ACTIVATE_FOR_1:    return ((InternalEList<?>)getDeActivateFor_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public boolean isPermitted(String serviceName,String methodName){  lock.readLock().lock();  try {    checkInitialized();    Set<String> methods=serviceMethods.get(serviceName);    return methods != null && methods.contains(methodName);  }  finally {    lock.readLock().unlock();  }}  }
class C{  @java.lang.SuppressWarnings("all") @javax.annotation.Generated("lombok") public GetterSetterJavadoc4 fieldName(final int fieldName){  this.fieldName=fieldName;  return this;}  }
class C{  public IGTScanner decorateScanner(IGTScanner scanner,boolean filterToggledOn,boolean aggrToggledOn,long deadline) throws IOException {  IGTScanner result=scanner;  if (!filterToggledOn) {    int scanned=lookAndForget(result);    return new EmptyGTScanner(scanned);  } else {    if (this.hasFilterPushDown()) {      result=new GTFilterScanner(result,this);    }    if (!aggrToggledOn) {      long scanned=result.getScannedRowCount();      lookAndForget(result);      return new EmptyGTScanner(scanned);    }    if (!this.isAllowStorageAggregation()) {      logger.info("pre aggregation is not beneficial, skip it");    } else     if (this.hasAggregation()) {      logger.info("pre aggregating results before returning");      this.doingStorageAggregation=true;      result=new GTAggregateScanner(result,this,deadline);    } else {      logger.info("has no aggregation, skip it");    }    return result;  }}  }
class C{  public static <Item extends Comparable>Queue<Item> quickSort(Queue<Item> items){  return items;}  }
class C{  public void handleDOMAttrModifiedEvent(MutationEvent evt){}  }
class C{  public void focusGained(FocusEvent e){  AWTEventMonitor.componentWithFocus_private=(Component)e.getSource();  if (AWTEventMonitor.focusListener_private != null) {    AWTEventMonitor.focusListener_private.focusGained(e);  }}  }
class C{  @Override public void clear(){  if (_size > 0) {    final K[] keys=_keys;    final V[] values=_values;    final int length=values.length;    for (int i=length - 1; i >= 0; i--) {      keys[i]=null;      values[i]=null;    }    _size=0;  }  _nullValue=null;}  }
class C{  protected void sequence_TStructMemberList_ThisTypeRefStructural(ISerializationContext context,ThisTypeRefStructural semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public void randomize(){  for (  List<Neuron> layer : layers) {    if (layers.indexOf(layer) > 0) {      randomize(layer);    }  }}  }
class C{  public void addTimeoutListener(ActionListener listener){  commTimer.addActionListener(listener);}  }
class C{  public boolean isSharedMapSupported(){  return readBoolean(RcsSettingsData.CAPABILITY_SHARED_MAP);}  }
class C{  public PLCommandRunnable(PLIView view,PLITokenInfo tokenInfo){  super();  mView=view;  mTokenInfo=tokenInfo;}  }
class C{  public static void main(String[] args){  runEvaluator(new CorrelationAttributeEval(),args);}  }
class C{  public Vertex top(Vertex source){  return top(source.getNetwork());}  }
class C{  @Deprecated public void clearDiscCache(){  clearDiskCache();}  }
class C{  public void addColumn(ColumnInfo info){  WListItemRenderer renderer=(WListItemRenderer)getItemRenderer();  renderer.addColumn(info);  getModel().addColumn();  return;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return MetaImage.getMetaImage(getFile(stack));}  }
class C{  private void init(){  setFocusable(false);  setOpaque(false);  if (getToolTipText() == null)   setToolTipText(getText());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void importMailsFromJames23(String james23MailRepositoryPath) throws MessagingException, MailRepositoryStoreException, UsersRepositoryException, MailboxException, DomainListException {  Flags flags=new Flags();  boolean isRecent=false;  Iterator<String> james23userRepositoryIterator=james23UsersRepository.list();  while (james23userRepositoryIterator.hasNext()) {    String userName23=james23userRepositoryIterator.next();    MailRepository mailRepository=mailRepositoryStore.select(james23MailRepositoryPath + "/" + userName23);    Iterator<String> mailRepositoryIterator=mailRepository.list();    String userName30=convert23UserTo30(userName23);    MailboxSession mailboxSession=mailboxManager.createSystemSession(userName30,log);    MailboxPath mailboxPath=MailboxPath.inbox(mailboxSession);    mailboxManager.startProcessingRequest(mailboxSession);    try {      mailboxManager.createMailbox(mailboxPath,mailboxSession);    } catch (    MailboxExistsException e) {    }    mailboxManager.endProcessingRequest(mailboxSession);    MessageManager messageManager=mailboxManager.getMailbox(mailboxPath,mailboxSession);    while (mailRepositoryIterator.hasNext()) {      Mail mail=mailRepository.retrieve(mailRepositoryIterator.next());      mailboxManager.startProcessingRequest(mailboxSession);      messageManager.appendMessage(new MimeMessageInputStream(mail.getMessage()),new Date(),mailboxSession,isRecent,flags);      mailboxManager.endProcessingRequest(mailboxSession);    }  }}  }
class C{  public static final void writeByteArrayXml(byte[] val,String name,XmlSerializer out) throws XmlPullParserException, IOException {  if (val == null) {    out.startTag(null,"null");    out.endTag(null,"null");    return;  }  out.startTag(null,"byte-array");  if (name != null) {    out.attribute(null,"name",name);  }  final int N=val.length;  out.attribute(null,"num",Integer.toString(N));  StringBuilder sb=new StringBuilder(val.length * 2);  for (int i=0; i < N; i++) {    int b=val[i];    int h=b >> 4;    sb.append(h >= 10 ? ('a' + h - 10) : ('0' + h));    h=b & 0xff;    sb.append(h >= 10 ? ('a' + h - 10) : ('0' + h));  }  out.text(sb.toString());  out.endTag(null,"byte-array");}  }
class C{  private E peekExpired(){  E first=q.peek();  return (first == null || first.getDelay(NANOSECONDS) > 0) ? null : first;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public Instance placeMovieClip(Symbol symbol,Transform matrix2,AlphaTransform cxform,String name,Actions[] clipActions){  Transform matrix=matrix2;  int depth=timeline.getAvailableDepth();  Instance inst=new Instance(symbol,depth);  timeline.setAvailableDepth(depth + 1);  if (matrix == null) {    matrix=new Transform();  }  Placement placement=new Placement(inst,matrix,cxform,name,-1,-1,frameNumber,false,false,clipActions);  placements.add(placement);  return inst;}  }
class C{  public boolean hasDetails(String sku){  return mSkuMap.containsKey(sku);}  }
class C{  private FirebaseChannel(){  try {    if (null == firebaseConfigStream) {      firebaseConfigStream=new FileInputStream(FIREBASE_SNIPPET_PATH);    }    String firebaseSnippet=CharStreams.toString(new InputStreamReader(firebaseConfigStream,StandardCharsets.UTF_8));    firebaseDbUrl=parseFirebaseUrl(firebaseSnippet);    credential=GoogleCredential.getApplicationDefault().createScoped(FIREBASE_SCOPES);    httpTransport=UrlFetchTransport.getDefaultInstance();  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public static boolean isInputDataValid(CharSequence firstName,CharSequence lastInitial){  return !TextUtils.isEmpty(firstName) && !TextUtils.isEmpty(lastInitial);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"STR");  translateAll(environment,instruction,"STR",instructions);}  }
class C{  public void test_binarySearchLjava_util_ListLjava_lang_Object(){  final int llSize=ll.size();  try {    Collections.binarySearch(null,new Object());    fail("Expected NullPointerException for null list parameter");  } catch (  NullPointerException e) {  }  for (int counter=0; counter < llSize; counter++) {    assertTrue("Returned incorrect binary search item position",ll.get(Collections.binarySearch(ll,ll.get(counter))) == ll.get(counter));  }}  }
class C{  private Graphics debugGraphics(){  DebugGraphics debugGraphics;  DebugGraphicsInfo info=info();  JFrame debugFrame;  if (info.debugFrame == null) {    info.debugFrame=new JFrame();    info.debugFrame.setSize(500,500);  }  debugFrame=info.debugFrame;  debugFrame.show();  debugGraphics=new DebugGraphics(debugFrame.getGraphics());  debugGraphics.setFont(getFont());  debugGraphics.setColor(getColor());  debugGraphics.translate(xOffset,yOffset);  debugGraphics.setClip(getClipBounds());  if (debugFlash()) {    debugGraphics.setDebugOptions(FLASH_OPTION);  }  return debugGraphics;}  }
class C{  public void postprocessing_http_unique(final Segment segment,final SolrDocument doc,final SolrInputDocument sid,final DigestURL url){  if (!this.contains(CollectionSchema.http_unique_b))   return;  if (!url.isHTTPS() && !url.isHTTP())   return;  try {    DigestURL u=new DigestURL((url.isHTTP() ? "https://" : "http://") + url.urlstub(true,true));    SolrDocument d=segment.fulltext().getDefaultConnector().getDocumentById(ASCII.String(u.hash()),CollectionSchema.http_unique_b.getSolrFieldName());    set_unique_flag(CollectionSchema.http_unique_b,doc,sid,d);  } catch (  final IOException e) {    ConcurrentLog.warn("CollectionConfiguration","Failed to postProcess http_unique_b field" + e.getMessage() != null ? " : " + e.getMessage() : ".");  }}  }
class C{  public int compareTo(cp_info constant_pool[],cp_info cp,cp_info cp_constant_pool[]){  double d;  if (tag != cp.tag)   return tag - cp.tag;  CONSTANT_Double_info cu=(CONSTANT_Double_info)cp;  d=convert() - cu.convert();  return ((d > 0.0) ? 1 : ((d < 0.0) ? -1 : 0));}  }
class C{  private void computeTaintInfoForMethodLocals(MethodOrMethodContext methodContext,Map<String,Set<CallLocationModel>> methodMap){  for (  Local local : methodContext.method().getActiveBody().getLocals()) {    String name=local.getName();    if (!name.equals("this") && !name.startsWith("$") && !name.startsWith("_$")&& !name.matches("l\\d+")) {      String origName=name.replaceFirst("#\\d+$","");      Set<CallLocationModel> vals=getTaints(methodContext,local);      if (!vals.isEmpty()) {        Set<CallLocationModel> infoVals=methodMap.get(origName);        if (infoVals == null) {          infoVals=new TreeSet<CallLocationModel>();          methodMap.put(origName,infoVals);        }        infoVals.addAll(vals);      }    }  }}  }
class C{  public static void generateEncryptedSubmission(File instanceXml,File submissionXml,EncryptedFormInformation formInfo) throws IOException, EncryptionException {  if (!submissionXml.exists() || !submissionXml.isFile()) {    throw new IOException("No submission.xml found");  }  List<File> mediaFiles=encryptSubmissionFiles(instanceXml,submissionXml,formInfo);  writeSubmissionManifest(formInfo,submissionXml,mediaFiles);}  }
class C{  protected void putOption(final Class optionClass,final String[] names){  Check.isTrue(names.length > 0,"names.length > 0");  _optionsToCanonicalNames.put(optionClass,names[0]);  for (int i=0; i < names.length; i++) {    _aliasesToOptions.put(names[i],optionClass);  }}  }
class C{  public final void testToString(){  LDAPCertStoreParameters cp1=new LDAPCertStoreParameters("myhost",1101);  assertNotNull(cp1.toString());}  }
class C{  public int compareTo(Object o){  LineSegment other=(LineSegment)o;  int comp0=p0.compareTo(other.p0);  if (comp0 != 0)   return comp0;  return p1.compareTo(other.p1);}  }
class C{  @Override public void closeOutbound(){  if (logger != null) {    logger.println("closeOutbound() " + isOutboundDone);  }  if (isOutboundDone) {    return;  }  isOutboundDone=true;  if (handshake_started) {    alertProtocol.alert(AlertProtocol.WARNING,AlertProtocol.CLOSE_NOTIFY);    close_notify_was_sent=true;  } else {    shutdown();  }  engine_was_closed=true;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (importedElementAsText: ");  result.append(importedElementAsText);  result.append(", alias: ");  result.append(alias);  result.append(')');  return result.toString();}  }
class C{  public UserNameIdentityToken clone(){  UserNameIdentityToken result=new UserNameIdentityToken();  result.PolicyId=PolicyId;  result.UserName=UserName;  result.Password=Password;  result.EncryptionAlgorithm=EncryptionAlgorithm;  return result;}  }
class C{  public static boolean isEqual(ColorSpace a,ColorSpace b){  if ((a instanceof ICC_ColorSpace) && (b instanceof ICC_ColorSpace)) {    ICC_ColorSpace aicc=(ICC_ColorSpace)a;    ICC_ColorSpace bicc=(ICC_ColorSpace)b;    ICC_Profile ap=aicc.getProfile();    ICC_Profile bp=bicc.getProfile();    return ap.equals(bp);  } else {    return a.equals(b);  }}  }
class C{  public ListenableFuture<Result> send(Message message){  return send(message,null);}  }
class C{  public static JavacTool create(){  return new JavacTool();}  }
class C{  private static void doThreadDump(final HttpServletRequest req,final HttpServletResponse resp) throws IOException {  resp.setStatus(HTTP_OK);  resp.addHeader("Cache-Control","no-cache");  resp.setContentType(MIME_TEXT_PLAIN);  final PrintWriter w=resp.getWriter();  try {    BigdataStatics.threadDump(w);    w.flush();  } catch (  Throwable t) {    launderThrowable(t,resp,"");  } finally {    w.close();  }}  }
class C{  @Override public void execute(StepInstance stepInstance,String temporaryFileDirectory){  final String blastMatchesFilePath=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,blastMatchesFileName);  Set<RawProtein<PIRSFHmmer2RawMatch>> rawMatches;  try {    rawMatches=PirsfMatchTempParser.parse(blastMatchesFilePath);  } catch (  IOException e) {    throw new IllegalStateException("IOException thrown when parsing blast matches file " + blastMatchesFilePath);  }  Set<Long> proteinIds=new HashSet<Long>();  Iterator<RawProtein<PIRSFHmmer2RawMatch>> i=rawMatches.iterator();  RawProtein<PIRSFHmmer2RawMatch> rawProtein=null;  Long proteinId;  while (i.hasNext()) {    rawProtein=i.next();    proteinId=Long.parseLong(rawProtein.getProteinIdentifier());    proteinIds.add(proteinId);  }  String fastaFilePathName=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,fastaFilePathTemplate);  List<Protein> proteins=proteinDAO.getProteinsByIds(proteinIds);  try {    fastaFileWriter.writeFastaFile(proteins,fastaFilePathName);  } catch (  IOException e) {    throw new IllegalStateException("IOException thrown when attempting to write a fasta file to " + fastaFilePathName,e);  }catch (  FastaFileWriter.FastaFileWritingException e) {    throw new IllegalStateException("FastaFileWriter.FastaFileWritingException thrown when attempting to write a fasta file to " + fastaFilePathName,e);  }}  }
class C{  public IndexOutOfBoundsException(java.lang.String s){}  }
class C{  private void verifyVplexConsistencyGroupMigration() throws Exception {  log.info("Verifying VPlex BlockConsistencyGroup and associated volume migration.");  BlockConsistencyGroup vplexCg=_dbClient.queryObject(BlockConsistencyGroup.class,vplexConsistencyGroupURI);  Iterator<Volume> vplexVolumeItr=_dbClient.queryIterativeObjects(Volume.class,vplexVolumeURIs);  verifyConsistencyGroupMigration(vplexCg,Types.VPLEX.name());  while (vplexVolumeItr.hasNext()) {    Volume vplexVolume=vplexVolumeItr.next();    String cgName=vplexCg.getLabel();    String clusterName=getVPlexClusterFromVolume(vplexVolume);    String storageSystem=vplexVolume.getStorageController().toString();    String clusterCgName=BlockConsistencyGroupUtils.buildClusterCgName(clusterName,cgName);    Assert.assertNotNull("The VPlex BlockConsistencyGroup.vplexStorageSystemToCg field should be populated.",vplexCg.getSystemConsistencyGroups());    Assert.assertTrue("The VPlex BlockConsistencyGroup.vplexStorageSystemToCg should contain a key for storage system " + storageSystem,vplexCg.getSystemConsistencyGroups().containsKey(storageSystem));    Assert.assertTrue("The VPlex BlockConsistencyGroup.vplexStorageSystemToCg field should contain a mapping for " + storageSystem + "->"+ clusterCgName,vplexCg.getSystemConsistencyGroups().get(storageSystem).contains(clusterCgName));  }  List<BlockObject> blockObjects=new ArrayList<BlockObject>();  while (vplexVolumeItr.hasNext()) {    blockObjects.add(vplexVolumeItr.next());  }  verifyBlockObjects(blockObjects);}  }
class C{  public MarkupBuilder(PrintWriter pw){  this(new IndentPrinter(pw));}  }
class C{  public static int minPathSum(int[][] grid){  if (grid == null || grid.length == 0)   return 0;  int m=grid.length;  int n=grid[0].length;  int[] rowSum=new int[n];  rowSum[0]=grid[0][0];  for (int col=1; col < n; col++)   rowSum[col]=rowSum[col - 1] + grid[0][col];  for (int row=1; row < m; row++) {    rowSum[0]+=grid[row][0];    for (int col=1; col < n; col++) {      rowSum[col]=Math.min(rowSum[col - 1],rowSum[col]) + grid[row][col];    }  }  return rowSum[n - 1];}  }
class C{  public static SnmpEngineId createEngineId(InetAddress addr,int port,int iana){  if (addr == null)   throw new IllegalArgumentException("InetAddress is null.");  byte[] address=addr.getAddress();  byte[] engineid=new byte[9 + address.length];  engineid[0]=(byte)((iana & 0xFF000000) >> 24);  engineid[0]|=0x80;  engineid[1]=(byte)((iana & 0x00FF0000) >> 16);  engineid[2]=(byte)((iana & 0x0000FF00) >> 8);  engineid[3]=(byte)(iana & 0x000000FF);  engineid[4]=0x05;  if (address.length == 4)   engineid[4]=0x01;  if (address.length == 16)   engineid[4]=0x02;  for (int i=0; i < address.length; i++) {    engineid[i + 5]=address[i];  }  engineid[5 + address.length]=(byte)((port & 0xFF000000) >> 24);  engineid[6 + address.length]=(byte)((port & 0x00FF0000) >> 16);  engineid[7 + address.length]=(byte)((port & 0x0000FF00) >> 8);  engineid[8 + address.length]=(byte)(port & 0x000000FF);  return new SnmpEngineId(engineid);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getEntryOrExitAction_();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:26.318 -0500",hash_original_method="20E22D7D195E3391E43BD9FB13A423DE",hash_generated_method="8C3B3B505356E2C21BC55C3D8E1AC0C3") public Canvas beginRecording(int width,int height){  addTaint(width + height);  mRecordingCanvas=new RecordingCanvas(this,getTaintInt());  return mRecordingCanvas;}  }
class C{  public void resetTimestamp(){  ts=System.currentTimeMillis();}  }
class C{  public final void combine(final AABB aabb1,final AABB aab){  lowerBound.x=aabb1.lowerBound.x < aab.lowerBound.x ? aabb1.lowerBound.x : aab.lowerBound.x;  lowerBound.y=aabb1.lowerBound.y < aab.lowerBound.y ? aabb1.lowerBound.y : aab.lowerBound.y;  upperBound.x=aabb1.upperBound.x > aab.upperBound.x ? aabb1.upperBound.x : aab.upperBound.x;  upperBound.y=aabb1.upperBound.y > aab.upperBound.y ? aabb1.upperBound.y : aab.upperBound.y;}  }
class C{  public static void sort(PosAndCol a[]){  int N=a.length;  for (int k=N / 2; k > 0; k--) {    downHeap(a,k,N);  }  do {    PosAndCol T=a[0];    a[0]=a[N - 1];    a[N - 1]=T;    N=N - 1;    downHeap(a,1,N);  } while (N > 1);}  }
class C{  private void invalidate(){  valid=false;}  }
class C{  public PlainGrayBorder(){  super(new Insets(IS,IS,IS,IS),__Icon9Factory__.getInstance().getBorderIcon_plainGray());}  }
class C{  private void unregisterMBeans(){  List<ObjectName> unregistered=new ArrayList<ObjectName>();  for (  ObjectName name : mbeans) {    try {      mbeanserver.unregisterMBean(name);      unregistered.add(name);    } catch (    JMException e) {    }  }  mbeans.removeAll(unregistered);}  }
class C{  private void updateSelectionHandles(final NetworkSelectionEvent event){  Set<PNode> selection=event.getSelection();  Set<PNode> oldSelection=event.getOldSelection();  Set<PNode> difference=new HashSet<PNode>(oldSelection);  difference.removeAll(selection);  for (  PNode node : difference) {    SelectionHandle.removeSelectionHandleFrom(node);  }  for (  PNode node : selection) {    if (node instanceof ScreenElement) {      ScreenElement screenElement=(ScreenElement)node;      if (screenElement.showSelectionHandle()) {        SelectionHandle.addSelectionHandleTo(node);      }    }  }}  }
class C{  public void removeAllZeros(){  Iterator<Map.Entry<K,AtomicLong>> entryIterator=map.entrySet().iterator();  while (entryIterator.hasNext()) {    Map.Entry<K,AtomicLong> entry=entryIterator.next();    AtomicLong atomic=entry.getValue();    if (atomic != null && atomic.get() == 0L) {      entryIterator.remove();    }  }}  }
class C{  public TXCommitMessage afterCompletion(int status,int txId){  return TXSynchronizationOp.execute(pool,status,txId,TXSynchronizationOp.CompletionType.AFTER_COMPLETION);}  }
class C{  protected boolean doNotReadFromOutputRepo(){  return true;}  }
class C{  public synchronized Operation poll(){  while (!this.queues.isEmpty()) {    Entry<String,Queue<Operation>> nextActive=this.queues.higherEntry(this.activeKey);    if (nextActive == null) {      nextActive=this.queues.firstEntry();    }    this.activeKey=nextActive.getKey();    Operation op=nextActive.getValue().poll();    if (nextActive.getValue().isEmpty()) {      this.queues.remove(nextActive.getKey());    }    if (op != null) {      return op;    }  }  return null;}  }
class C{  public static ResultSet selectMaxId(Connection conn) throws SQLException {  return conn.createStatement().executeQuery("SELECT MAX(ID) FROM TEST");}  }
class C{  private void saveEmoticonsToFile(String json){synchronized (cache) {    cache.save(json);  }}  }
class C{  public AudioEntry(){  super();  getCategories().remove(DocumentListEntry.CATEGORY);  getCategories().add(CATEGORY);}  }
class C{  public WalletAppKit connectToLocalHost(){  try {    final InetAddress localHost=InetAddress.getLocalHost();    return setPeerNodes(new PeerAddress(localHost,params.getPort()));  } catch (  UnknownHostException e) {    throw new RuntimeException(e);  }}  }
class C{  public static void initCause(Throwable throwable,Throwable cause){  if (INIT_CAUSE_METHOD != null) {    try {      INIT_CAUSE_METHOD.invoke(throwable,new Object[]{cause});    } catch (    Exception e) {    }  }}  }
class C{  public AppsForYourDomainQuery(URL feedUrl){  super(feedUrl);}  }
class C{  BBSet(GenerationContext gc,BytecodeStream bcodes,Operand[] localState){  this.gc=gc;  this.bcodes=bcodes;  parseExceptionTables();  entry=_createBBLE(0,null,null,false);  entry.setStackKnown();  entry.copyIntoLocalState(localState);}  }
class C{  @Override public void output(Vertex output){}  }
class C{  private void emitCode(){  LinkedList<Instantiation> worklist=new LinkedList<Instantiation>();  worklist.add(new Instantiation(null,mainSubroutine));  InsnList newInstructions=new InsnList();  List<TryCatchBlockNode> newTryCatchBlocks=new ArrayList<TryCatchBlockNode>();  List<LocalVariableNode> newLocalVariables=new ArrayList<LocalVariableNode>();  while (!worklist.isEmpty()) {    Instantiation inst=worklist.removeFirst();    emitSubroutine(inst,worklist,newInstructions,newTryCatchBlocks,newLocalVariables);  }  instructions=newInstructions;  tryCatchBlocks=newTryCatchBlocks;  localVariables=newLocalVariables;}  }
class C{  public static void main(String[] args) throws Exception {  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    System.out.println();    System.out.println(">>> Ignite set example started.");    String setName=UUID.randomUUID().toString();    set=initializeSet(ignite,setName);    writeToSet(ignite);    clearAndRemoveSet();  }   System.out.println("Ignite set example finished.");}  }
class C{  public void paste(){  if (editable) {    Clipboard clipboard=getToolkit().getSystemClipboard();    try {      String selection=((String)clipboard.getContents(this).getTransferData(DataFlavor.stringFlavor)).replace("\r",Tools.getLineSeparator());      int repeatCount=inputHandler.getRepeatCount();      StringBuffer buf=new StringBuffer();      for (int i=0; i < repeatCount; i++) {        buf.append(selection);      }      selection=buf.toString();      setSelectedText(selection);    } catch (    Exception e) {      getToolkit().beep();    }  }}  }
class C{  private static Image loadImage(){  System.out.println("Select the map");  final String mapName=new FileOpen("Select The Map",s_mapFolderLocation,".gif",".png").getPathString();  if (mapName != null) {    final Image img=Toolkit.getDefaultToolkit().createImage(mapName);    final MediaTracker tracker=new MediaTracker(new Panel());    tracker.addImage(img,1);    try {      tracker.waitForAll();      return img;    } catch (    final InterruptedException e) {      ClientLogger.logQuietly("interrupted while loading images",e);      return loadImage();    }  } else {    return null;  }}  }
class C{  public GlobMatcher(final String globPattern){  this.globPattern=globPattern;  regex=createRegex(globPattern);  pattern=Pattern.compile(regex,Pattern.CASE_INSENSITIVE);}  }
class C{  private void processFileAction() throws IOException {switch (fileAction.toLowerCase()) {case "delete":    fs.delete(file,true);  break;case "move":Path targetFileMovePath=new Path(targetFolder,file.getName());fs.rename(file,targetFileMovePath);break;case "archive":try (FSDataOutputStream archivedStream=fs.create(new Path(targetFolder,file.getName() + ".zip"));ZipOutputStream zipArchivedStream=new ZipOutputStream(archivedStream);FSDataInputStream fdDataInputStream=fs.open(file)){zipArchivedStream.putNextEntry(new ZipEntry(file.getName()));int length;byte[] buffer=new byte[1024];while ((length=fdDataInputStream.read(buffer)) > 0) {zipArchivedStream.write(buffer,0,length);}zipArchivedStream.closeEntry();} fs.delete(file,true);break;default :break;}}  }
class C{  public ServiceDiscoverer(CuratorFramework client,String root,int blacklistExpirationMin){  blacklist=CacheBuilder.newBuilder().concurrencyLevel(4).weakKeys().expireAfterWrite(blacklistExpirationMin,TimeUnit.MINUTES).build();  try {    Stat exists=client.checkExists().forPath(root);    if (exists == null) {      client.create().creatingParentsIfNeeded().forPath(root);    }  } catch (  Exception e) {    LOG.error("Unable to create path: " + e.getMessage(),e);  }  JsonInstanceSerializer<ModelEndpoint> serializer=new JsonInstanceSerializer<>(ModelEndpoint.class);  serviceDiscovery=ServiceDiscoveryBuilder.builder(ModelEndpoint.class).client(client).basePath(root).serializer(serializer).build();  cache=new TreeCache(client,root);  cache.getListenable().addListener(null);  updateState();}  }
class C{  @DeleteMapping(value="/{name}") public ResponseEntity<Response> remove(@PathVariable("name") @NotNull String... names){  return null;}  }
class C{  public static long adjustMetaAfterKeypress(long state){  if ((state & META_CAP_PRESSED) != 0) {    state=(state & ~META_SHIFT_MASK) | META_SHIFT_ON | META_CAP_USED;  } else   if ((state & META_CAP_RELEASED) != 0) {    state&=~META_SHIFT_MASK;  }  if ((state & META_ALT_PRESSED) != 0) {    state=(state & ~META_ALT_MASK) | META_ALT_ON | META_ALT_USED;  } else   if ((state & META_ALT_RELEASED) != 0) {    state&=~META_ALT_MASK;  }  if ((state & META_SYM_PRESSED) != 0) {    state=(state & ~META_SYM_MASK) | META_SYM_ON | META_SYM_USED;  } else   if ((state & META_SYM_RELEASED) != 0) {    state&=~META_SYM_MASK;  }  return state;}  }
class C{  private static OFActionOutput decode_output(String actionToDecode,OFVersion version,Logger log){  Matcher n=Pattern.compile("((all)|(controller)|(local)|(ingress-port)|(normal)|(flood))").matcher(actionToDecode);  OFActionOutput.Builder ab=OFFactories.getFactory(version).actions().buildOutput();  OFPort port=OFPort.ANY;  if (n.matches()) {    if (n.group(1) != null && n.group(1).equals("all"))     port=OFPort.ALL; else     if (n.group(1) != null && n.group(1).equals("controller"))     port=OFPort.CONTROLLER; else     if (n.group(1) != null && n.group(1).equals("local"))     port=OFPort.LOCAL; else     if (n.group(1) != null && n.group(1).equals("ingress-port"))     port=OFPort.IN_PORT; else     if (n.group(1) != null && n.group(1).equals("normal"))     port=OFPort.NORMAL; else     if (n.group(1) != null && n.group(1).equals("flood"))     port=OFPort.FLOOD;    ab.setPort(port);    ab.setMaxLen(Integer.MAX_VALUE);    log.debug("action {}",ab.build());    return ab.build();  } else {    try {      port=OFPort.of(Integer.parseInt(actionToDecode));      ab.setPort(port);      ab.setMaxLen(Integer.MAX_VALUE);      return ab.build();    } catch (    NumberFormatException e) {      log.error("Could not parse Integer port: '{}'",actionToDecode);      return null;    }  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:03.302 -0500",hash_original_method="6D396DEEC3DAD541F2D5DA5D46CC7D37",hash_generated_method="BAC3168B96C6B3F6C160B05C3BDC4478") private final void moveRowGapTo(int where){  if (where == mRowGapStart) {    return;  } else   if (where > mRowGapStart) {    int moving=where + mRowGapLength - (mRowGapStart + mRowGapLength);    final int columns=mColumns;    final int[] valuegap=mValueGap;    final int[] values=mValues;    final int gapend=mRowGapStart + mRowGapLength;    for (int i=gapend; i < gapend + moving; i++) {      int destrow=i - gapend + mRowGapStart;      for (int j=0; j < columns; j++) {        int val=values[i * columns + j];        if (i >= valuegap[j]) {          val+=valuegap[j + columns];        }        if (destrow >= valuegap[j]) {          val-=valuegap[j + columns];        }        values[destrow * columns + j]=val;      }    }  } else {    int moving=mRowGapStart - where;    final int columns=mColumns;    final int[] valuegap=mValueGap;    final int[] values=mValues;    final int gapend=mRowGapStart + mRowGapLength;    for (int i=where + moving - 1; i >= where; i--) {      int destrow=i - where + gapend - moving;      for (int j=0; j < columns; j++) {        int val=values[i * columns + j];        if (i >= valuegap[j]) {          val+=valuegap[j + columns];        }        if (destrow >= valuegap[j]) {          val-=valuegap[j + columns];        }        values[destrow * columns + j]=val;      }    }  }  mRowGapStart=where;}  }
class C{  public StringIdItem intern(String string){  return intern(new StringIdItem(new CstString(string)));}  }
class C{  public void guardarDocumentoExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  try {    DocumentoVitalForm frm=(DocumentoVitalForm)form;    ActionErrors errors=validateCrearDocumentoVital(request,frm);    if (errors.isEmpty()) {      FormDocumentoVitalVO documento=new FormDocumentoVitalVO();      frm.populate(documento);      InfoBDocumentoVitalExtVO docVital=getGestionDocumentosVitalesBI(request).insertDocumentoVitalValidado(documento);      getInvocationStack(request).goToReturnPoint(request);      setReturnActionFordward(request,redirectForwardMethod(request,"/gestionDocumentosVitales","method","verDocVital&id=" + docVital.getId()));    } else {      ErrorsTag.saveErrors(request,errors);      goLastClientExecuteLogic(mapping,form,request,response);    }  } catch (  DocumentoVitalException e) {    guardarError(request,e);    goLastClientExecuteLogic(mapping,form,request,response);  }catch (  Exception e) {    logger.error("Error al guardar el documento",e);    obtenerErrores(request,true).add(ActionErrors.GLOBAL_ERROR,new ActionError(Constants.ERROR_ALMACENAR_DOCUMENTO));    goLastClientExecuteLogic(mapping,form,request,response);  }}  }
class C{  public DamagingArea(final int width,final int height,final int interval,final int damage,final double probability){  super(width,height,interval);  this.damage=damage;  this.probability=probability;  rand=new Random();  setResistance(50);}  }
class C{  private void createNewWorkbook(){  this.workbook=new HSSFWorkbook();  RGBColor color=new RGBColor((byte)255,(byte)255,(byte)255);  this.defaultCellStyle=getStyle(color);}  }
class C{  public static void main(String args[]){  int j;  MersenneTwister r;  r=new MersenneTwister(new int[]{0x123,0x234,0x345,0x456});  System.out.println("Output of MersenneTwister with new (2002/1/26) seeding mechanism");  for (j=0; j < 1000; j++) {    long l=(long)r.nextInt();    if (l < 0)     l+=4294967296L;    String s=String.valueOf(l);    while (s.length() < 10)     s=" " + s;    System.out.print(s + " ");    if (j % 5 == 4)     System.out.println();  }  final long SEED=4357;  int xx;  long ms;  System.out.println("\nTime to test grabbing 100000000 ints");  r=new MersenneTwister(SEED);  ms=System.currentTimeMillis();  xx=0;  for (j=0; j < 100000000; j++)   xx+=r.nextInt();  System.out.println("Mersenne Twister: " + (System.currentTimeMillis() - ms) + "          Ignore this: "+ xx);  System.out.println("To compare this with java.util.Random, run this same test on MersenneTwisterFast.");  System.out.println("The comparison with Random is removed from MersenneTwister because it is a proper");  System.out.println("subclass of Random and this unfairly makes some of Random's methods un-inlinable,");  System.out.println("so it would make Random look worse than it is.");  System.out.println("\nGrab the first 1000 booleans");  r=new MersenneTwister(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextBoolean() + " ");    if (j % 8 == 7)     System.out.println();  }  if (!(j % 8 == 7))   System.out.println();  System.out.println("\nGrab 1000 booleans of increasing probability using nextBoolean(double)");  r=new MersenneTwister(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextBoolean((double)(j / 999.0)) + " ");    if (j % 8 == 7)     System.out.println();  }  if (!(j % 8 == 7))   System.out.println();  System.out.println("\nGrab 1000 booleans of increasing probability using nextBoolean(float)");  r=new MersenneTwister(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextBoolean((float)(j / 999.0f)) + " ");    if (j % 8 == 7)     System.out.println();  }  if (!(j % 8 == 7))   System.out.println();  byte[] bytes=new byte[1000];  System.out.println("\nGrab the first 1000 bytes using nextBytes");  r=new MersenneTwister(SEED);  r.nextBytes(bytes);  for (j=0; j < 1000; j++) {    System.out.print(bytes[j] + " ");    if (j % 16 == 15)     System.out.println();  }  if (!(j % 16 == 15))   System.out.println();  byte b;  System.out.println("\nGrab the first 1000 bytes -- must be same as nextBytes");  r=new MersenneTwister(SEED);  for (j=0; j < 1000; j++) {    System.out.print((b=r.nextByte()) + " ");    if (b != bytes[j])     System.out.print("BAD ");    if (j % 16 == 15)     System.out.println();  }  if (!(j % 16 == 15))   System.out.println();  System.out.println("\nGrab the first 1000 shorts");  r=new MersenneTwister(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextShort() + " ");    if (j % 8 == 7)     System.out.println();  }  if (!(j % 8 == 7))   System.out.println();  System.out.println("\nGrab the first 1000 ints");  r=new MersenneTwister(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextInt() + " ");    if (j % 4 == 3)     System.out.println();  }  if (!(j % 4 == 3))   System.out.println();  System.out.println("\nGrab the first 1000 ints of different sizes");  r=new MersenneTwister(SEED);  int max=1;  for (j=0; j < 1000; j++) {    System.out.print(r.nextInt(max) + " ");    max*=2;    if (max <= 0)     max=1;    if (j % 4 == 3)     System.out.println();  }  if (!(j % 4 == 3))   System.out.println();  System.out.println("\nGrab the first 1000 longs");  r=new MersenneTwister(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextLong() + " ");    if (j % 3 == 2)     System.out.println();  }  if (!(j % 3 == 2))   System.out.println();  System.out.println("\nGrab the first 1000 longs of different sizes");  r=new MersenneTwister(SEED);  long max2=1;  for (j=0; j < 1000; j++) {    System.out.print(r.nextLong(max2) + " ");    max2*=2;    if (max2 <= 0)     max2=1;    if (j % 4 == 3)     System.out.println();  }  if (!(j % 4 == 3))   System.out.println();  System.out.println("\nGrab the first 1000 floats");  r=new MersenneTwister(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextFloat() + " ");    if (j % 4 == 3)     System.out.println();  }  if (!(j % 4 == 3))   System.out.println();  System.out.println("\nGrab the first 1000 doubles");  r=new MersenneTwister(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextDouble() + " ");    if (j % 3 == 2)     System.out.println();  }  if (!(j % 3 == 2))   System.out.println();  System.out.println("\nGrab the first 1000 gaussian doubles");  r=new MersenneTwister(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextGaussian() + " ");    if (j % 3 == 2)     System.out.println();  }  if (!(j % 3 == 2))   System.out.println();}  }
class C{  public static Method findMethod(Method[] methods,Method testMethod){  for (  Method method : methods) {    if (isMatch(method,testMethod))     return method;  }  return null;}  }
class C{  public boolean hasPurchase(String sku){  return mPurchaseMap.containsKey(sku);}  }
class C{  public boolean forEachValue(TFloatProcedure procedure){  byte[] states=_states;  float[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(values[i])) {      return false;    }  }  return true;}  }
class C{  public void autoFill(RowCursor cursor){  for (  Column col : columns()) {    col.autoFill(cursor.buffer(),0);  }}  }
class C{  public boolean isFailureReportRequested(){  return mFailureReportOption;}  }
class C{  private void createQuadProgram() throws IOException {  int program=glCreateProgram();  int vshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/quad.vs",GL_VERTEX_SHADER,"330");  int fshader=DemoUtils.createShader("org/lwjgl/demo/opengl/raytracing/quad.fs",GL_FRAGMENT_SHADER,"330");  glAttachShader(program,vshader);  glAttachShader(program,fshader);  glBindAttribLocation(program,0,"vertex");  glBindFragDataLocation(program,0,"color");  glLinkProgram(program);  int linked=glGetProgrami(program,GL_LINK_STATUS);  String programLog=glGetProgramInfoLog(program);  if (programLog.trim().length() > 0) {    System.err.println(programLog);  }  if (linked == 0) {    throw new AssertionError("Could not link program");  }  this.quadProgram=program;}  }
class C{  private RE unionREs(Set<RE> coll) throws InterruptedException {  if (coll.isEmpty()) {    return RE.empty;  }  RE acc=RE.empty;  for (  RE re : coll) {    acc=acc.union(re);  }  return acc;}  }
class C{  private static void GetCharArrayRegion(JNIEnvironment env,int arrayJREF,int startIndex,int length,Address bufAddress){  if (traceJNI)   VM.sysWrite("JNI called: GetCharArrayRegion  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    char[] sourceArray=(char[])env.getJNIRef(arrayJREF);    if ((startIndex < 0) || (startIndex + length > sourceArray.length)) {      env.recordException(new ArrayIndexOutOfBoundsException());      return;    }    Memory.memcopy(bufAddress,Magic.objectAsAddress(sourceArray).plus(startIndex << LOG_BYTES_IN_CHAR),length << LOG_BYTES_IN_CHAR);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  public th removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public int editOperationsSecond(){  return editSecond;}  }
class C{  private static FrameBlock convertToTransformMetaDataFrame(int rows,String[] colnames,List<Integer> rcIDs,List<Integer> binIDs,HashMap<String,String> meta,HashMap<String,String> mvmeta) throws IOException {  ValueType[] schema=UtilFunctions.nCopies(colnames.length,ValueType.STRING);  FrameBlock ret=new FrameBlock(schema,colnames);  ret.ensureAllocatedColumns(rows);  for (  Integer colID : rcIDs) {    String name=colnames[colID - 1];    String map=meta.get(name);    if (map == null)     throw new IOException("Recode map for column '" + name + "' (id="+ colID+ ") not existing.");    InputStream is=new ByteArrayInputStream(map.getBytes("UTF-8"));    BufferedReader br=new BufferedReader(new InputStreamReader(is));    Pair<String,String> pair=new Pair<String,String>();    String line;    int rpos=0;    while ((line=br.readLine()) != null) {      DecoderRecode.parseRecodeMapEntry(line,pair);      String tmp=pair.getKey() + Lop.DATATYPE_PREFIX + pair.getValue();      ret.set(rpos++,colID - 1,tmp);    }    ret.getColumnMetadata(colID - 1).setNumDistinct((long)rpos);  }  for (  Integer colID : binIDs) {    String name=colnames[colID - 1];    String map=meta.get(name);    if (map == null)     throw new IOException("Binning map for column '" + name + "' (id="+ colID+ ") not existing.");    String[] fields=map.split(TfUtils.TXMTD_SEP);    double min=UtilFunctions.parseToDouble(fields[1]);    double binwidth=UtilFunctions.parseToDouble(fields[3]);    int nbins=UtilFunctions.parseToInt(fields[4]);    for (int i=0; i < nbins; i++) {      String lbound=String.valueOf(min + i * binwidth);      String ubound=String.valueOf(min + (i + 1) * binwidth);      ret.set(i,colID - 1,lbound + Lop.DATATYPE_PREFIX + ubound);    }    ret.getColumnMetadata(colID - 1).setNumDistinct((long)nbins);  }  for (  Entry<String,String> e : mvmeta.entrySet()) {    int colID=ArrayUtils.indexOf(colnames,e.getKey()) + 1;    String mvVal=e.getValue().split(TfUtils.TXMTD_SEP)[1];    ret.getColumnMetadata(colID - 1).setMvValue(mvVal);  }  return ret;}  }
class C{  public final int compare(byte[] bytes1,byte[] bytes2){  return (bytes1[0] | 0x20) - (bytes2[0] | 0x20);}  }
class C{  public List<VirtualPoolChangeRep> listVirtualPoolChangeCandidates(URI id,BulkIdParam input){  VirtualPoolChangeList response=client.post(VirtualPoolChangeList.class,input,getIdUrl() + "/vpool-change/vpool",id);  return defaultList(response.getVirtualPools());}  }
class C{  public static long dayBefore(final long time){  return timeFrom(time,1,CalendarUnit.DAY,Occurrence.BEFORE);}  }
class C{  public boolean isLast(){  return isLast;}  }
class C{  public String toString(String pattern){  if (pattern == null) {    return toString();  }  return DateTimeFormat.forPattern(pattern).print(this);}  }
class C{  private void addParameter(SQLiteDatabase db,String key,String value){  ContentValues values=new ContentValues();  values.put(RcsSettingsData.KEY_KEY,key);  values.put(RcsSettingsData.KEY_VALUE,value);  db.insertOrThrow(TABLE,null,values);}  }
class C{  public boolean containsValue(Object value){  if (value == null) {    for (Entry e=header.after; e != header; e=e.after)     if (e.value == null)     return true;  } else {    for (Entry e=header.after; e != header; e=e.after)     if (value.equals(e.value))     return true;  }  return false;}  }
class C{  public boolean isCustomFontEnabled(){  return null == customFontEnabled ? _customFontEnabled : customFontEnabled.get();}  }
class C{  private static Parameter mergeParameters(Parameter p1,Parameter p2,char operator){  if (p1 instanceof FixedParameter && p2 instanceof FixedParameter) {    double v1=((FixedParameter)p1).getValue();    double v2=((FixedParameter)p2).getValue();switch (operator) {case '+':      return new FixedParameter(v1 + v2);case '*':    return new FixedParameter(v1 * v2);case '-':  return new FixedParameter(v1 - v2);default :throw new RuntimeException(operator + " is unsupported");}}MathExpression exp1=p1.getExpression();MathExpression exp2=p2.getExpression();return new ComplexParameter(exp1.combine(operator,exp2));}  }
class C{  private void assertReadVarintFailure(InvalidProtocolBufferException expected,byte[] data) throws Exception {  CodedInputStream input=CodedInputStream.newInstance(data);  try {    input.readRawVarint32();    fail("Should have thrown an exception.");  } catch (  InvalidProtocolBufferException e) {    assertEquals(expected.getMessage(),e.getMessage());  }  input=CodedInputStream.newInstance(data);  try {    input.readRawVarint64();    fail("Should have thrown an exception.");  } catch (  InvalidProtocolBufferException e) {    assertEquals(expected.getMessage(),e.getMessage());  }  input=CodedInputStream.newInstance(data);  try {    input.readRawVarint64SlowPath();    fail("Should have thrown an exception.");  } catch (  InvalidProtocolBufferException e) {    assertEquals(expected.getMessage(),e.getMessage());  }  try {    CodedInputStream.readRawVarint32(new ByteArrayInputStream(data));    fail("Should have thrown an exception.");  } catch (  InvalidProtocolBufferException e) {    assertEquals(expected.getMessage(),e.getMessage());  }}  }
class C{  public int createAndLinkVertex(double lat,double lon){  int stopVertex=vertexStore.addVertex(lat,lon);  int streetVertex=getOrCreateVertexNear(lat,lon,StreetMode.WALK);  if (streetVertex == -1) {    return -1;  }  Edge e=edgeStore.addStreetPair(stopVertex,streetVertex,1,-1);  e.allowAllModes();  e.setFlag(EdgeStore.EdgeFlag.LINK);  e.advance();  e.allowAllModes();  e.setFlag(EdgeStore.EdgeFlag.LINK);  return stopVertex;}  }
class C{  public static void main(String[] args){  TestMemberInheritence tester=new TestMemberInheritence();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  public long optLong(int index,long defaultValue){  try {    return getLong(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public LineStroker(LineStroker output,int lineWidth,int capStyle,int joinStyle,int miterLimit,PMatrix2D transform){  setOutput(output);  setParameters(lineWidth,capStyle,joinStyle,miterLimit,transform);}  }
class C{  public static AsymmetricKeyParameter createKey(PrivateKeyInfo keyInfo) throws IOException {  AlgorithmIdentifier algId=keyInfo.getPrivateKeyAlgorithm();  if (algId.getAlgorithm().equals(PKCSObjectIdentifiers.rsaEncryption)) {    RSAPrivateKey keyStructure=RSAPrivateKey.getInstance(keyInfo.parsePrivateKey());    return new RSAPrivateCrtKeyParameters(keyStructure.getModulus(),keyStructure.getPublicExponent(),keyStructure.getPrivateExponent(),keyStructure.getPrime1(),keyStructure.getPrime2(),keyStructure.getExponent1(),keyStructure.getExponent2(),keyStructure.getCoefficient());  } else   if (algId.getAlgorithm().equals(PKCSObjectIdentifiers.dhKeyAgreement)) {    DHParameter params=DHParameter.getInstance(algId.getParameters());    ASN1Integer derX=(ASN1Integer)keyInfo.parsePrivateKey();    BigInteger lVal=params.getL();    int l=lVal == null ? 0 : lVal.intValue();    DHParameters dhParams=new DHParameters(params.getP(),params.getG(),null,l);    return new DHPrivateKeyParameters(derX.getValue(),dhParams);  } else   if (algId.getAlgorithm().equals(X9ObjectIdentifiers.id_dsa)) {    ASN1Integer derX=(ASN1Integer)keyInfo.parsePrivateKey();    ASN1Encodable de=algId.getParameters();    DSAParameters parameters=null;    if (de != null) {      DSAParameter params=DSAParameter.getInstance(de.toASN1Primitive());      parameters=new DSAParameters(params.getP(),params.getQ(),params.getG());    }    return new DSAPrivateKeyParameters(derX.getValue(),parameters);  } else   if (algId.getAlgorithm().equals(X9ObjectIdentifiers.id_ecPublicKey)) {    X962Parameters params=new X962Parameters((ASN1Primitive)algId.getParameters());    X9ECParameters x9;    if (params.isNamedCurve()) {      ASN1ObjectIdentifier oid=ASN1ObjectIdentifier.getInstance(params.getParameters());      x9=X962NamedCurves.getByOID(oid);      if (x9 == null) {        x9=SECNamedCurves.getByOID(oid);        if (x9 == null) {          x9=NISTNamedCurves.getByOID(oid);        }      }    } else {      x9=X9ECParameters.getInstance(params.getParameters());    }    ECPrivateKey ec=ECPrivateKey.getInstance(keyInfo.parsePrivateKey());    BigInteger d=ec.getKey();    ECDomainParameters dParams=new ECDomainParameters(x9.getCurve(),x9.getG(),x9.getN(),x9.getH(),x9.getSeed());    return new ECPrivateKeyParameters(d,dParams);  } else {    throw new RuntimeException("algorithm identifier in key not recognised");  }}  }
class C{  public double calculateLogLikelihood(){  int paramStatus=(int)bitVector.getParameterValue(paramIndex);  if (paramStatus == PRESENT) {    distribution=prior;  } else   if (paramStatus == ABSENT) {    distribution=pseudoPrior;  }  double logL=super.calculateLogLikelihood();  return logL;}  }
class C{  public T caseEnumSource(EnumSource object){  return null;}  }
class C{  public void testFetchingIncompleteLocationTree_retainsSyncFailedDialog(){  mController.init();  mController.attachFragmentUi(mMockFragmentUi);  LocationTree locationTree=FakeAppLocationTreeFactory.emptyTree();  mFakeEventBus.post(new AppLocationTreeFetchedEvent(locationTree));  verify(mMockUi,times(0)).showSyncFailedDialog(false);}  }
class C{  void firePropertyChange(PropertyChangeEvent evt){  if (evt == null) {    log.warn("EVT is NULL!!");  }  for (  PropertyChangeListener l : listenerList.getListeners(PropertyChangeListener.class)) {    l.propertyChange(evt);  }}  }
class C{  public static String prepareInsertTemplateWithColumn(String tableName,String[] columnNames){  return prepareInsertTemplateWithColumn("INSERT",tableName,columnNames);}  }
class C{  private void writeInstruction() throws IOException {  pos=c.localPosition();  newPos=map[pos];  byte[] newCode=snippets.remove(new Integer(pos));  if (newCode != null) {    traceln();    traceFixedWidthInt(pos,4);    trace(" ... -- Inserting new code");    c.writeBytes(newCode);  }  int opcode=c.readU1();  if (Inject.verbose) {    traceln();    traceFixedWidthInt(pos,4);    traceFixedWidthInt(newPos,4);    trace(" ");  }  if (opcode == opc_wide) {    int wopcode=c.readU1();    int lvIndex=c.readU2();    if (Inject.verbose) {      trace(opcNames[wopcode] + "_w ");    }    c.writeU1(opcode);    c.writeU1(wopcode);    c.writeU2(lvIndex);switch (wopcode) {case opc_aload:case opc_astore:case opc_fload:case opc_fstore:case opc_iload:case opc_istore:case opc_lload:case opc_lstore:case opc_dload:case opc_dstore:case opc_ret:      trace(lvIndex);    break;case opc_iinc:  int constVal=c.readS2();c.writeU2(constVal);if (Inject.verbose) {trace(lvIndex + " " + constVal);}break;default :throw new Error("Invalid wide opcode: " + wopcode);}} else {if (Inject.verbose) {trace(opcNames[opcode]);}switch (opcode) {case opc_tableswitch:{int header=(pos + 1 + 3) & (~3);int newHeader=(newPos + 1 + 3) & (~3);c.skip(header - (pos + 1));Span defaultSkip=new Span(c.readU4());int low=c.readU4();int high=c.readU4();c.writeU1(opcode);for (int i=newPos + 1; i < newHeader; ++i) {c.writeU1(0);}c.writeU4(defaultSkip.newDelta);c.writeU4(low);c.writeU4(high);if (Inject.verbose) {trace(" " + low + " to "+ high);trace(": default= [was] " + defaultSkip.target);trace(" [now] " + defaultSkip.newTarget);}for (int i=low; i <= high; ++i) {Span jump=new Span(c.readU4());c.writeU4(jump.newDelta);if (Inject.verbose) {traceln("");trace('\t');traceFixedWidthInt(i,5);trace(": " + jump.newTarget);}}break;}case opc_lookupswitch:{int header=(pos + 1 + 3) & (~3);int newHeader=(newPos + 1 + 3) & (~3);c.skip(header - (pos + 1));Span defaultSkip=new Span(c.readU4());int npairs=c.readU4();if (Inject.verbose) {trace(" npairs: " + npairs);trace(": default= [was] " + defaultSkip.target);trace(" [now] " + defaultSkip.newTarget);}c.writeU1(opcode);for (int i=newPos + 1; i < newHeader; ++i) {c.writeU1(0);}c.writeU4(defaultSkip.newDelta);c.writeU4(npairs);for (int i=0; i < npairs; ++i) {int match=c.readU4();Span jump=new Span(c.readU4());c.writeU4(match);c.writeU4(jump.newDelta);if (Inject.verbose) {traceln("");trace('\t');traceFixedWidthInt(match,5);trace(": " + jump.newTarget);}}break;}case opc_jsr:case opc_goto:case opc_ifeq:case opc_ifge:case opc_ifgt:case opc_ifle:case opc_iflt:case opc_ifne:case opc_if_icmpeq:case opc_if_icmpne:case opc_if_icmpge:case opc_if_icmpgt:case opc_if_icmple:case opc_if_icmplt:case opc_if_acmpeq:case opc_if_acmpne:case opc_ifnull:case opc_ifnonnull:{int widened=widening[pos];Span jump=new Span(c.readS2());int newOpcode=opcode;if (widened == 0) {c.writeU1(opcode);c.writeU2(jump.newDelta);} else if (widened == 2) {switch (opcode) {case opc_jsr:newOpcode=opc_jsr_w;break;case opc_goto:newOpcode=opc_jsr_w;break;default :throw new Error("unexpected opcode: " + opcode);}c.writeU1(newOpcode);c.writeU4(jump.newDelta);} else if (widened == 5) {switch (opcode) {case opc_ifeq:newOpcode=opc_ifne;break;case opc_ifge:newOpcode=opc_iflt;break;case opc_ifgt:newOpcode=opc_ifle;break;case opc_ifle:newOpcode=opc_ifgt;break;case opc_iflt:newOpcode=opc_ifge;break;case opc_ifne:newOpcode=opc_ifeq;break;case opc_if_icmpeq:newOpcode=opc_if_icmpne;break;case opc_if_icmpne:newOpcode=opc_if_icmpeq;break;case opc_if_icmpge:newOpcode=opc_if_icmplt;break;case opc_if_icmpgt:newOpcode=opc_if_icmple;break;case opc_if_icmple:newOpcode=opc_if_icmpgt;break;case opc_if_icmplt:newOpcode=opc_if_icmpge;break;case opc_if_acmpeq:newOpcode=opc_if_acmpne;break;case opc_if_acmpne:newOpcode=opc_if_acmpeq;break;case opc_ifnull:newOpcode=opc_ifnonnull;break;case opc_ifnonnull:newOpcode=opc_ifnull;break;default :throw new Error("unexpected opcode: " + opcode);}c.writeU1(newOpcode);c.writeU2(3 + 5);c.writeU1(opc_goto_w);c.writeU4(jump.newDelta);} else {throw new Error("unexpected widening");}if (Inject.verbose) {trace(" [was] " + jump.target + " ==> "+ opcNames[newOpcode]+ " [now] "+ jump.newTarget);}break;}case opc_jsr_w:case opc_goto_w:{Span jump=new Span(c.readU4());c.writeU1(opcode);c.writeU4(jump.newDelta);if (Inject.verbose) {trace(" [was] " + jump.target + " [now] "+ jump.newTarget);}break;}default :{int instrLen=opcLengths[opcode];c.writeU1(opcode);c.copy(instrLen - 1);}}}}  }
class C{  public static boolean isXML11Content(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_CONTENT) != 0) || (0x10000 <= c && c <= 0x10FFFF);}  }
class C{  public void catchException(final Label start,final Label end,final Type exception){  if (exception == null) {    mv.visitTryCatchBlock(start,end,mark(),null);  } else {    mv.visitTryCatchBlock(start,end,mark(),exception.getInternalName());  }}  }
class C{  public void traverseFragment(Node pos) throws org.xml.sax.SAXException {  Node top=pos;  while (null != pos) {    startNode(pos);    Node nextNode=pos.getFirstChild();    while (null == nextNode) {      endNode(pos);      if (top.equals(pos))       break;      nextNode=pos.getNextSibling();      if (null == nextNode) {        pos=pos.getParentNode();        if ((null == pos) || (top.equals(pos))) {          if (null != pos)           endNode(pos);          nextNode=null;          break;        }      }    }    pos=nextNode;  }}  }
class C{  public static void boldText(TextView textView){  highlightText(textView,R.string.wire__typeface__bold);}  }
class C{  public JOptionPane(Object message,int messageType,int optionType,Icon icon,Object[] options){  this(message,messageType,optionType,icon,options,null);}  }
class C{  public static Geometry geomFromText(String text,int srid) throws SQLException {  WKTReader wktReader=new WKTReader();  try {    Geometry geom=wktReader.read(text);    geom.setSRID(srid);    return geom;  } catch (  ParseException ex) {    throw new SQLException(ex);  }}  }
class C{  public String prettyPrint(){  String s="Nodes: " + nodes.keySet() + "\n";  s+="Edges: \n";  for (  BNode node : nodes.values()) {    s+="\t" + node.getInputNodeIds() + "-->"+ node.getId();  }  return s;}  }
class C{  public void writeText(char text) throws IOException {  closeStartIfNecessary();  if (dontEscape) {    writer.write(text);  } else {    charHolder[0]=text;    Util.writeText(writer,buffer,charHolder);  }}  }
class C{  public void iterate(CountDownLatch latch){synchronized (updaterLock) {    updater.runOnce(latch);  }  updateStopped();}  }
class C{  public static boolean isTFConfigured(@NotNull final Project project){  final String tfLocation=TfTool.getLocation();  if (StringUtils.isEmpty(tfLocation)) {    Messages.showWarningDialog(project,TfPluginBundle.message(TfPluginBundle.KEY_TFVC_NOT_CONFIGURED),TfPluginBundle.message(TfPluginBundle.KEY_TFVC));    return false;  }  return true;}  }
class C{  public void warn(SourceLocator srcLctr,String msg) throws TransformerException {  warn(srcLctr,null,null,msg,null);}  }
class C{  public int outerClassIndex(int nth){  return ByteArray.readU16bit(get(),nth * 8 + 4);}  }
class C{  public T caseBooleanPropertyAttribute(BooleanPropertyAttribute object){  return null;}  }
class C{  public String serializeToString(GradleDistribution distribution){  Preconditions.checkNotNull(distribution);  try {    Field localInstallationDirField=GradleDistribution.class.getDeclaredField("localInstallationDir");    localInstallationDirField.setAccessible(true);    File localInstallationDir=(File)localInstallationDirField.get(distribution);    if (localInstallationDir != null) {      return String.format("GRADLE_DISTRIBUTION(LOCAL_INSTALLATION(%s))",localInstallationDir.getAbsolutePath());    }    Field remoteDistributionUriField=GradleDistribution.class.getDeclaredField("remoteDistributionUri");    remoteDistributionUriField.setAccessible(true);    URI remoteDistributionUri=(URI)remoteDistributionUriField.get(distribution);    if (remoteDistributionUri != null) {      return String.format("GRADLE_DISTRIBUTION(REMOTE_DISTRIBUTION(%s))",remoteDistributionUri.toString());    }    Field versionField=GradleDistribution.class.getDeclaredField("version");    versionField.setAccessible(true);    String version=(String)versionField.get(distribution);    if (version != null) {      return String.format("GRADLE_DISTRIBUTION(VERSION(%s))",version);    }    return String.valueOf("GRADLE_DISTRIBUTION(WRAPPER)");  } catch (  Exception e) {    String message=String.format("Cannot serialize Gradle distribution '%s.'",distribution);    throw new RuntimeException(message,e);  }}  }
class C{  public boolean isUpperTriangular(){  for (int i=0; i < rows; i++)   for (int j=0; j < i && j < columns; j++) {    if (get(i,j) != 0.0f)     return false;  }  return true;}  }
class C{  public void stop(){  active=false;}  }
class C{  private void validateBusinessObjectDefinitionCreateRequest(BusinessObjectDefinitionCreateRequest request){  request.setNamespace(alternateKeyHelper.validateStringParameter("namespace",request.getNamespace()));  request.setBusinessObjectDefinitionName(alternateKeyHelper.validateStringParameter("business object definition name",request.getBusinessObjectDefinitionName()));  request.setDataProviderName(alternateKeyHelper.validateStringParameter("data provider name",request.getDataProviderName()));  if (request.getDisplayName() != null) {    request.setDisplayName(request.getDisplayName().trim());  }  attributeHelper.validateAttributes(request.getAttributes());}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSSink({DSSinkKind.CONTACT_INFORMATION}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:20.818 -0500",hash_original_method="BBA59EE5F024CF032CB3FE359D476C6C",hash_generated_method="8DB54C506971CC8EA63AB5837929A57E") Connection dial(String dialString,int clirMode,UUSInfo uusInfo) throws CallStateException {  clearDisconnected();  if (!canDial()) {    throw new CallStateException("cannot dial in current state");  }  if (foregroundCall.getState() == GsmCall.State.ACTIVE) {    switchWaitingOrHoldingAndActive();    fakeHoldForegroundBeforeDial();  }  if (foregroundCall.getState() != GsmCall.State.IDLE) {    throw new CallStateException("cannot dial in current state");  }  pendingMO=new GsmConnection(phone.getContext(),dialString,this,foregroundCall);  hangupPendingMO=false;  if (pendingMO.address == null || pendingMO.address.length() == 0 || pendingMO.address.indexOf(PhoneNumberUtils.WILD) >= 0) {    pendingMO.cause=Connection.DisconnectCause.INVALID_NUMBER;    pollCallsWhenSafe();  } else {    setMute(false);    cm.dial(pendingMO.address,clirMode,uusInfo,obtainCompleteMessage());  }  updatePhoneState();  phone.notifyPreciseCallStateChanged();  return pendingMO;}  }
class C{  public TFloatIntHashMapDecorator(TFloatIntHashMap map){  super();  this._map=map;}  }
class C{  public CViewMenu(final CGraphWindow parent,final CGraphPanel graphPanel,final ZyGraph graph,final IViewContainer container,final CActionSave actionSave){  super("View");  setMnemonic("HK_MENU_VIEW".charAt(0));  add(actionSave);  add(CActionProxy.proxy(new CActionSaveAs(parent,graph,container)));  addSeparator();  add(CActionProxy.proxy(new CActionClone(parent,graph.getRawView(),container)));  addSeparator();  add(CActionProxy.proxy(new CActionChangeViewDescription(parent,graph.getRawView())));  addSeparator();  add(CActionProxy.proxy(new CActionGraphPrint(parent,graph)));  final JMenu exportMenu=new JMenu("Export");  exportMenu.add(CActionProxy.proxy(new CActionGraphExportPNG(parent,graph)));  exportMenu.add(CActionProxy.proxy(new CActionGraphExportSVG(parent,graph)));  add(exportMenu);  addSeparator();  add(CActionProxy.proxy(new CActionClose(graphPanel)));}  }
class C{  public void addTracepoint(Tracepoint t){  tracepoints.put(t.getName(),t);}  }
class C{  public final boolean isLoaded(){  return (nis != null && nis.sourceFile().exists() && parseStamp > nis.sourceFile().lastModified());}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.EVENT_DEFINITION___AFTER_EVERY_EVENT_1:    getAfterEveryEvent_1().clear();  return;case UmplePackage.EVENT_DEFINITION___AFTER_EVENT_1:getAfterEvent_1().clear();return;case UmplePackage.EVENT_DEFINITION___EVENT_1:setEvent_1(EVENT_1_EDEFAULT);return;case UmplePackage.EVENT_DEFINITION___ANONYMOUS_EVENT_DEFINITION_11:getAnonymous_eventDefinition_1_1().clear();return;}super.eUnset(featureID);}  }
class C{  public static void assertTextNotEmpty(String text){  assertTextNotEmpty(text,"");}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  protected void addContentTypePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_GeneratorEntry_contentType_feature"),getString("_UI_PropertyDescriptor_description","_UI_GeneratorEntry_contentType_feature","_UI_GeneratorEntry_type"),SGenPackage.Literals.GENERATOR_ENTRY__CONTENT_TYPE,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  private void disconnect(Throwable exception){  Connection c=Connections.getInstance(context).getConnection(clientHandle);  c.changeConnectionStatus(Connection.ConnectionStatus.DISCONNECTED);  c.addAction("Disconnect Failed - an error occured");}  }
class C{  protected void nodeConnected(short nodeId,Channel channel){  logger.debug("[{}->{}] Connection established",syncManager.getLocalNodeId(),nodeId);synchronized (connections) {    NodeConnection c=connections.get(nodeId);    if (c == null) {      connections.put(nodeId,c=new NodeConnection());    }    c.nodeChannel=channel;    c.state=NodeConnectionState.CONNECTED;  }}  }
class C{  public void run(String[] args) throws Throwable {  int n=args.length - 1;  if (n >= 0) {    String[] args2=new String[n];    for (int i=0; i < n; ++i)     args2[i]=args[i + 1];    run(args[0],args2);  }}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_player);  ButterKnife.bind(this);  init();}  }
class C{  public S2CellId parent(int level){  long newLsb=lowestOnBitForLevel(level);  return new S2CellId((id & -newLsb) | newLsb);}  }
class C{  public void registerForUpdates(){  SigninManager manager=SigninManager.get(getContext());  manager.addSignInAllowedObserver(this);  ProfileDownloader.addObserver(this);  FirstRunSignInProcessor.updateSigninManagerFirstRunCheckDone(getContext());}  }
class C{  public ColumnVector addElementWise(final ColumnVector vector){  return this.transform(null);}  }
class C{  public static String[] split(String line,String delim){  List list=new ArrayList();  StringTokenizer t=new StringTokenizer(line,delim);  while (t.hasMoreTokens()) {    list.add(t.nextToken());  }  return (String[])list.toArray(new String[list.size()]);}  }
class C{  public TestSubscriber(Subscriber<? super Payload> actual,Long initialRequest){  this.actual=actual;  this.initialRequest=initialRequest;  this.values=new ArrayList<>();  this.errors=new ArrayList<Throwable>();  this.done=new CountDownLatch(1);  this.maxAwait=5000;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.452 -0500",hash_original_method="8109166214A5696534573E329912E2B5",hash_generated_method="60D93C61249991A57EB5E60C813D3525") public void mapTransaction(SIPServerTransaction transaction){  if (transaction.isMapped)   return;  addTransactionHash(transaction);  transaction.isMapped=true;}  }
class C{  public void pushStack(int method){  stack[stackPointer]=method;  stackPointer++;}  }
class C{  private static String urlEncode(final String text) throws UnsupportedEncodingException {  return URLEncoder.encode(text,"UTF-8");}  }
class C{  boolean test(T tuple){  if (paused)   return false;  boolean b=predicate.test(tuple);  paused=pauseOnPredicate.test(tuple);  return b;}  }
class C{  public void runTest(){  VelocityContext context=new VelocityContext();  try {    StringWriter writer=new StringWriter();    Velocity.evaluate(context,writer,"vm_chain1",template1);    String out=writer.toString();    if (!result1.equals(out)) {      fail("output incorrect.");    }  } catch (  Exception e) {    fail(e.getMessage());  }}  }
class C{  public void addEntry(CatchEntry entry){  entries.addElement(entry);}  }
class C{  public void videoInformation(NativeAppDriver driver,String videoName,String videoLength){  driver.verifyElementPresentById(videoName);  driver.verifyElementPresentById(videoLength);}  }
class C{  public DataStatisticsOperator(OperatorDescription description){  super(description);  getTransformer().addPassThroughRule(exampleSetInput,exampleSetOutput);  getTransformer().addRule(new GenerateNewMDRule(statisticsOutput,DataStatistics.class));}  }
class C{  BookPage(Printable painter,PageFormat format){  if (painter == null || format == null) {    throw new NullPointerException();  }  mFormat=format;  mPainter=painter;}  }
class C{  public void addPoint(Location location){  dBtrackingPoints.open();  dBtrackingPoints.addLocation(location);  dBtrackingPoints.close();  updateDisSpeed(location);  updateMaxSpeed(location);  startLocation=location;}  }
class C{  public boolean wipe(){  if (!clear()) {    return false;  }  try {    return mContext.getContentResolver().delete(mTrayUri.getInternal(),null,null) > 0;  } catch (  Throwable e) {    e.printStackTrace();    return false;  }}  }
class C{  public void unlockOrder(Order order){  LOG.debug("Unlocking order " + order.getId());  doUnlockOrder(order);}  }
class C{  static void writeShort(final byte[] b,final int index,final int s){  b[index]=(byte)(s >>> 8);  b[index + 1]=(byte)s;}  }
class C{  @Override protected void installDefaults(){  JTextComponent editor=getComponent();  PaletteLookAndFeel plaf=PaletteLookAndFeel.getInstance();  String prefix=getPropertyPrefix();  Font f=editor.getFont();  if ((f == null) || (f instanceof UIResource)) {    editor.setFont(plaf.getFont(prefix + ".font"));  }  Color bg=editor.getBackground();  if ((bg == null) || (bg instanceof UIResource)) {    editor.setBackground(plaf.getColor(prefix + ".background"));  }  Color fg=editor.getForeground();  if ((fg == null) || (fg instanceof UIResource)) {    editor.setForeground(plaf.getColor(prefix + ".foreground"));  }  Color color=editor.getCaretColor();  if ((color == null) || (color instanceof UIResource)) {    editor.setCaretColor(plaf.getColor(prefix + ".caretForeground"));  }  Color s=editor.getSelectionColor();  if ((s == null) || (s instanceof UIResource)) {    editor.setSelectionColor(plaf.getColor(prefix + ".selectionBackground"));  }  Color sfg=editor.getSelectedTextColor();  if ((sfg == null) || (sfg instanceof UIResource)) {    editor.setSelectedTextColor(plaf.getColor(prefix + ".selectionForeground"));  }  Color dfg=editor.getDisabledTextColor();  if ((dfg == null) || (dfg instanceof UIResource)) {    editor.setDisabledTextColor(plaf.getColor(prefix + ".inactiveForeground"));  }  Border b=editor.getBorder();  if ((b == null) || (b instanceof UIResource)) {    editor.setBorder(plaf.getBorder(prefix + ".border"));  }  Insets margin=editor.getMargin();  if (margin == null || margin instanceof UIResource) {    editor.setMargin(plaf.getInsets(prefix + ".margin"));  }  errorIndicatorForeground=plaf.getColor(prefix + ".errorIndicatorForeground");  editor.setOpaque(plaf.getBoolean(prefix + ".opaque"));}  }
class C{  public void bindNull(int index){}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:43.391 -0500",hash_original_method="5C668F99FD089E189A03C18C500CC1BE",hash_generated_method="7A5B6ECB950F08DE7D9790B7A3DE1542") private void mark(){  theLastColumn=theCurrentColumn;  theLastLine=theCurrentLine;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public byte[] encode(){  char type=getAttributeType();  byte binValue[]=new byte[HEADER_LENGTH + 8];  binValue[0]=(byte)(type >> 8);  binValue[1]=(byte)(type & 0x00FF);  binValue[2]=(byte)(8 >> 8);  binValue[3]=(byte)(8 & 0x00FF);  System.arraycopy(reservationToken,0,binValue,4,8);  return binValue;}  }
class C{  public static void pipeInputToOutputStream(InputStream in,OutputStream out,boolean closeOutput,boolean ignoreErrors) throws IOException {  OutputStream bufferedOut=out;  InputStream bufferedIn=in;  if (in != null && out != null) {    try {      if (!bufferedOut.getClass().equals(BufferedOutputStream.class)) {        bufferedOut=new BufferedOutputStream(bufferedOut,DEFAULT_BUFFER_SIZE);      }      if (!bufferedIn.getClass().equals(BufferedInputStream.class)) {        bufferedIn=new BufferedInputStream(bufferedIn,DEFAULT_BUFFER_SIZE);      }      int iTmp;      while ((iTmp=bufferedIn.read()) != -1) {        bufferedOut.write((byte)iTmp);      }      bufferedOut.flush();      out.flush();    } catch (    IOException e) {      if (!ignoreErrors && !(e instanceof java.net.SocketException)) {        logger.error(e.getMessage());        throw e;      } else {        logger.debug(e.getMessage());      }    } finally {      bufferedIn.close();      if (closeOutput) {        bufferedOut.close();      }    }  }}  }
class C{  public int fieldId(int order){  return order < ids.length ? ids[order] : 0;}  }
class C{  public void initializeImages(){  if (frames == null) {    frames=new ArrayList<AnimFrame>();  }  if (imageNames.length > 0) {    for (int i=0; i < imageNames.length; i++) {      this.addFrame(OdorWorldResourceManager.getImage(imageNames[i]),frameDuration);    }  }}  }
class C{  protected BoundingRectangle readUnspecifiedBoundingRectangle(ByteBuffer buffer){  BoundingRectangle rect=new BoundingRectangle();  rect.coords=this.readBoundingRectangleCoordinates(buffer);  return rect;}  }
class C{  private double[] projectDense(NumberVector in,double[] ret){  final int k=this.k;  final double dim=MathUtil.min(buf.length,in.getDimensionality());  for (int i=0; i < dim; i++) {    final boolean[] row=mat[i];    double vali=in.doubleValue(i);    for (int o=0; o < k; o++) {      if (row[o]) {        ret[o]+=vali;      } else {        ret[o]-=vali;      }    }  }  return ret;}  }
class C{  public void substring() throws IOException {  writeCode(STRING_EXTRACT);}  }
class C{  public void testNearestCommonAncestor(){  Element div=TestUtil.createDiv(1);  mBody.appendChild(div);  Element div2=TestUtil.createDiv(2);  div.appendChild(div2);  Element currDiv=TestUtil.createDiv(3);  div2.appendChild(currDiv);  Element finalDiv1=currDiv;  currDiv=TestUtil.createDiv(4);  div2.appendChild(currDiv);  currDiv.appendChild(TestUtil.createDiv(5));  assertEquals(div2,DomUtil.getNearestCommonAncestor(finalDiv1,currDiv.getChild(0)));  NodeList nodeList=DomUtil.querySelectorAll(mRoot,"[id=\"3\"],[id=\"5\"]");  assertEquals(div2,DomUtil.getNearestCommonAncestor(TestUtil.nodeListToList(nodeList)));}  }
class C{  public ClientResponse unsetTenantNamespace(URI tenantId){  String unsetNamespacePath=String.format(INTERNAL_TENANT_UNSET_NAMESPACE,tenantId.toString());  WebResource rRoot=createRequest(unsetNamespacePath);  ClientResponse resp=null;  try {    resp=addSignature(rRoot).delete(ClientResponse.class);  } catch (  UniformInterfaceException e) {    _log.warn("could not detach namespace from tenant {}. Err:{}",tenantId,e);  }  return resp;}  }
class C{  public TimeTree addSegmentForPoint(int startTimeSec,int endTimeSec,int prevApId,double dist){  if (getMaxTimeSecs() == startTimeSec) {    extendTimeTree(endTimeSec,dist,true);    return this;  } else {    return addTimeTree(createTimeTreeForGpsPoint(startTimeSec,endTimeSec,prevApId,dist));  }}  }
class C{  public static void addTransmutation(Block input,ItemStack output,float xp){  TransmutatorRecipes.instance().transmute(input,output,xp);}  }
class C{  private Proj createProjection(Properties requestProperties,GetMapRequestParameters parameters) throws WMSException {  Properties projProps=new Properties();  projProps.put(ProjectionFactory.CENTER,new LatLonPoint.Double(0f,0f));  projProps.setProperty(ProjectionFactory.WIDTH,Integer.toString(parameters.width));  projProps.setProperty(ProjectionFactory.HEIGHT,Integer.toString(parameters.height));  GeoProj projection=parameters.crs.createProjection(projProps);  parameters.crs.prepareProjection(projection);  projection.setScale(projection.getMinScale());  LatLonPoint llp1=parameters.bboxLatLonLowerLeft;  LatLonPoint llp2=parameters.bboxLatLonUpperRight;  Debug.message("wms","bbox toLatLon: 1: " + llp1 + ", 2: "+ llp2+ ", center: "+ parameters.bboxLatLonCenter);  projection.setCenter(parameters.bboxLatLonCenter);  int intnewwidth=parameters.width;  int intnewheight=parameters.height;  float newscale=projection.getScale(llp1,llp2,new Point(0,0),new Point(intnewwidth,intnewheight));  projection.setScale(newscale);  Point2D xyp1=projection.forward(llp1);  Point2D xyp2=projection.forward(llp2);  int w=(int)(xyp2.getX() - xyp1.getX());  int h=(int)(xyp1.getY() - xyp2.getY());  if (Math.abs(w - parameters.width) > 2 || Math.abs(h - parameters.height) > 2) {    Debug.message("wms","use aspect ratio fix");    projection.setWidth(w);    projection.setHeight(h);    projection.setCenter(parameters.bboxLatLonCenter);    float underlyingScale=projection.getScale(llp1,llp2,new Point(0,0),new Point(w,h));    projection.setScale(underlyingScale);    AspectRatioProjection p=new AspectRatioProjection(projection,parameters.width,parameters.height);    projection=p;  }  return projection;}  }
class C{  private void collapseParentReferences(){  int segmentCount=segments.length;  String[] stack=new String[segmentCount];  int stackPointer=0;  for (  String segment : segments) {    if (segment.equals("..")) {      if (stackPointer == 0) {        if (!isAbsolute())         stack[stackPointer++]=segment;      } else {        if ("..".equals(stack[stackPointer - 1]))         stack[stackPointer++]=".."; else         stackPointer--;      }    } else     if (!segment.equals(".") || segmentCount == 1)     stack[stackPointer++]=segment;  }  if (stackPointer == segmentCount)   return;  String[] newSegments=new String[stackPointer];  System.arraycopy(stack,0,newSegments,0,stackPointer);  this.segments=newSegments;}  }
class C{  public static String makeLink(FileDescriptor fd,boolean newWindow,boolean attachment){  StringBuilder sb=new StringBuilder();  sb.append("<a href=\"");  sb.append(makeUrl(fd,attachment));  sb.append("\"");  if (newWindow)   sb.append(" target=\"_blank\"");  sb.append(">");  sb.append(fd.getName());  sb.append("</a>");  return sb.toString();}  }
class C{  public static void v(String tag,String msg){  if (sLevel > LEVEL_VERBOSE) {    return;  }  Log.v(tag,msg);}  }
class C{  public boolean hasAlpha(){  return hasAlphaChannel() || paletteA != null || transPixel != null;}  }
class C{  public void addData(Statistic data){  dataList.add(data);}  }
class C{  public PhraseConditionBuilder slop(Integer slop){  this.slop=slop;  return this;}  }
class C{  public static AccessibilityNodeInfo obtain(View source){  AccessibilityNodeInfo info=AccessibilityNodeInfo.obtain();  info.setSource(source);  return info;}  }
class C{  public void rollbackBlockStates(){  for (  BlockState state : blockStateBackupMap.values()) {    state.update(true);  }  blockStateBackupMap.clear();}  }
class C{  public static BufferedImage createCompatibleImage(BufferedImage image,int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height,image.getTransparency());}  }
class C{  private List<IScanIssue> testRwservletLFI(IBurpExtenderCallbacks callbacks,IHttpRequestResponse baseRequestResponse,IScannerInsertionPoint insertionPoint,URL url,PrintWriter stderr){  List<IScanIssue> issues=new ArrayList<>();  String protocol=url.getProtocol();  Boolean isSSL=(protocol.equals("https"));  IExtensionHelpers helpers=callbacks.getHelpers();  IRequestInfo reqInfo=helpers.analyzeRequest(baseRequestResponse);  for (  String LOCAL_FILE : LFI_FILES) {    String RWSERVLET_ATTEMPT=String.format(BASE_REQUEST,LOCAL_FILE);    try {      URL urlToTest=new URL(protocol,url.getHost(),url.getPort(),RWSERVLET_ATTEMPT);      byte[] oastest=helpers.buildHttpRequest(urlToTest);      byte[] responseBytes=callbacks.makeHttpRequest(url.getHost(),url.getPort(),isSSL,oastest);      IResponseInfo statusInfo=helpers.analyzeResponse(responseBytes);      if (statusInfo.getStatusCode() == 200) {        if (HTTPMatcher.isWinINI(responseBytes,helpers) || HTTPMatcher.isEtcPasswdFile(responseBytes,helpers)) {          issues.add(new CustomScanIssue(baseRequestResponse.getHttpService(),reqInfo.getUrl(),new CustomHttpRequestResponse(oastest,responseBytes,baseRequestResponse.getHttpService()),TITLE_LOCAL_FILE_DISCLOSURE,DESCRIPTION_LOCAL_FILE_DISCLOSURE,REMEDY,Risk.High,Confidence.Certain));        }        if ((RWSERVLET_ATTEMPT.contains("gopher"))) {          List<int[]> matchesSSHFound=getMatches(responseBytes,"SSH".getBytes(),helpers);          List<int[]> matchesServiceNotFound=getMatches(responseBytes,"A timeout occurred in accessing the URL gopher".getBytes(),helpers);          if ((matchesSSHFound.size() > 0) || (matchesServiceNotFound.size() > 0)) {            issues.add(new CustomScanIssue(baseRequestResponse.getHttpService(),reqInfo.getUrl(),new CustomHttpRequestResponse(oastest,responseBytes,baseRequestResponse.getHttpService()),TITLE_SSRF,DESCRIPTION_SSRF,REMEDY,Risk.High,Confidence.Certain));          }        }      }    } catch (    MalformedURLException ex) {      stderr.println("Malformed URL Exception " + ex);    }  }  return issues;}  }
class C{  public static Distribution guessLambda(DataSet d){  return new LogUniform(1e-7,1e-2);}  }
class C{  @Override public int executeUpdate(String sql) throws SQLException {  try {    debugCodeCall("executeUpdate",sql);    return executeUpdateInternal(sql);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static String escapeCharacter(String uri,char c,String to){  StringBuilder sb=new StringBuilder();  int size=uri.length();  int at=uri.indexOf(':');  int lastAt=0;  if (at > -1) {    for (int i=0; i <= at; i++)     sb.append(uri.charAt(i));    lastAt=++at;  }  while ((at=uri.indexOf(c,at)) > -1) {    for (int i=lastAt; i < at; i++)     sb.append(uri.charAt(i));    sb.append(to);    lastAt=++at;  }  if (lastAt < size) {    for (int i=lastAt; i < size; i++)     sb.append(uri.charAt(i));  }  return sb.toString();}  }
class C{  public void onChatMessageSent(){  if (ENABLED) {    trackOpt("Message Sent On Chat Screen",null);  }}  }
class C{  public int size(){  return i + 1;}  }
class C{  public void dragEnter(DragSourceDragEvent dsde){}  }
class C{  public static void add(int[] n1,int[] n2,int[] sum){  int b=n1.length - 1;  int carry=0;  while (b >= 0) {    int s=n1[b] + n2[b] + carry;    sum[b + 1]=s % 10;    if (s > 9) {      carry=1;    } else {      carry=0;    }    b--;  }  sum[0]=carry;}  }
class C{  public Result run(Runner runner){  Result result=new Result();  RunListener listener=result.createListener();  notifier.addFirstListener(listener);  try {    notifier.fireTestRunStarted(runner.getDescription());    runner.run(notifier);    notifier.fireTestRunFinished(result);  }  finally {    removeListener(listener);  }  return result;}  }
class C{  public static Map<String,Object> scaleImageInAllSize(Map<String,? extends Object> context,String filenameToUse,String viewType,String viewNumber) throws IllegalArgumentException, ImagingOpException, IOException, JDOMException {  Locale locale=(Locale)context.get("locale");  int index;  Map<String,Map<String,String>> imgPropertyMap=FastMap.newInstance();  BufferedImage bufImg, bufNewImg;  double imgHeight, imgWidth;  Map<String,String> imgUrlMap=FastMap.newInstance();  Map<String,Object> resultXMLMap=FastMap.newInstance();  Map<String,Object> resultBufImgMap=FastMap.newInstance();  Map<String,Object> resultScaleImgMap=FastMap.newInstance();  Map<String,Object> result=FastMap.newInstance();  String imgPropertyFullPath=System.getProperty("ofbiz.home") + "/applications/product/config/ImageProperties.xml";  resultXMLMap.putAll(ImageTransform.getXMLValue(imgPropertyFullPath,locale));  if (resultXMLMap.containsKey("responseMessage") && resultXMLMap.get("responseMessage").equals("success")) {    imgPropertyMap.putAll(UtilGenerics.<Map<String,Map<String,String>>>cast(resultXMLMap.get("xml")));  } else {    String errMsg=UtilProperties.getMessage(resource,"ScaleImage.unable_to_parse",locale) + " : ImageProperties.xml";    Debug.logError(errMsg,module);    result.put("errorMessage",errMsg);    return result;  }  index=filenameToUse.lastIndexOf(".");  String imgExtension=filenameToUse.substring(index + 1);  Map<String,Object> imageContext=FastMap.newInstance();  imageContext.putAll(context);  imageContext.put("tenantId",((Delegator)context.get("delegator")).getDelegatorTenantId());  String imageServerPath=FlexibleStringExpander.expandString(EntityUtilProperties.getPropertyValue("catalog","image.server.path",(Delegator)context.get("delegator")),imageContext);  String imageUrlPrefix=FlexibleStringExpander.expandString(EntityUtilProperties.getPropertyValue("catalog","image.url.prefix",(Delegator)context.get("delegator")),imageContext);  imageServerPath=imageServerPath.endsWith("/") ? imageServerPath.substring(0,imageServerPath.length() - 1) : imageServerPath;  imageUrlPrefix=imageUrlPrefix.endsWith("/") ? imageUrlPrefix.substring(0,imageUrlPrefix.length() - 1) : imageUrlPrefix;  FlexibleStringExpander filenameExpander;  String fileLocation=null;  String type=null;  String id=null;  if (viewType.toLowerCase().contains("main")) {    String filenameFormat=EntityUtilProperties.getPropertyValue("catalog","image.filename.format",(Delegator)context.get("delegator"));    filenameExpander=FlexibleStringExpander.getInstance(filenameFormat);    id=(String)context.get("productId");    fileLocation=filenameExpander.expandString(UtilMisc.toMap("location","products","id",id,"type","original"));  } else   if (viewType.toLowerCase().contains("additional") && viewNumber != null && !viewNumber.equals("0")) {    String filenameFormat=EntityUtilProperties.getPropertyValue("catalog","image.filename.additionalviewsize.format",(Delegator)context.get("delegator"));    filenameExpander=FlexibleStringExpander.getInstance(filenameFormat);    id=(String)context.get("productId");    if (filenameFormat.endsWith("${id}")) {      id=id + "_View_" + viewNumber;    } else {      viewType="additional" + viewNumber;    }    fileLocation=filenameExpander.expandString(UtilMisc.toMap("location","products","id",id,"viewtype",viewType,"sizetype","original"));  } else {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ProductImageViewType",UtilMisc.toMap("viewType",type),locale));  }  if (fileLocation.lastIndexOf("/") != -1) {    fileLocation.substring(0,fileLocation.lastIndexOf("/") + 1);  }  resultBufImgMap.putAll(ImageTransform.getBufferedImage(imageServerPath + "/" + fileLocation+ "."+ imgExtension,locale));  if (resultBufImgMap.containsKey("responseMessage") && resultBufImgMap.get("responseMessage").equals("success")) {    bufImg=(BufferedImage)resultBufImgMap.get("bufferedImage");    imgHeight=bufImg.getHeight();    imgWidth=bufImg.getWidth();    if (imgHeight == 0.0 || imgWidth == 0.0) {      String errMsg=UtilProperties.getMessage(resource,"ScaleImage.one_current_image_dimension_is_null",locale) + " : imgHeight = " + imgHeight+ " ; imgWidth = "+ imgWidth;      Debug.logError(errMsg,module);      result.put("errorMessage",errMsg);      return result;    }    for (    Map.Entry<String,Map<String,String>> entry : imgPropertyMap.entrySet()) {      String sizeType=entry.getKey();      resultScaleImgMap.putAll(ImageTransform.scaleImage(bufImg,imgHeight,imgWidth,imgPropertyMap,sizeType,locale));      if (resultScaleImgMap.containsKey("responseMessage") && resultScaleImgMap.get("responseMessage").equals("success")) {        bufNewImg=(BufferedImage)resultScaleImgMap.get("bufferedImage");        String newFileLocation=null;        filenameToUse=sizeType + filenameToUse.substring(filenameToUse.lastIndexOf("."));        if (viewType.toLowerCase().contains("main")) {          newFileLocation=filenameExpander.expandString(UtilMisc.toMap("location","products","id",id,"type",sizeType));        } else         if (viewType.toLowerCase().contains("additional")) {          newFileLocation=filenameExpander.expandString(UtilMisc.toMap("location","products","id",id,"viewtype",viewType,"sizetype",sizeType));        }        String newFilePathPrefix="";        if (newFileLocation.lastIndexOf("/") != -1) {          newFilePathPrefix=newFileLocation.substring(0,newFileLocation.lastIndexOf("/") + 1);        }        String targetDirectory=imageServerPath + "/" + newFilePathPrefix;        try {          File targetDir=new File(targetDirectory);          if (!targetDir.exists()) {            boolean created=targetDir.mkdirs();            if (!created) {              String errMsg=UtilProperties.getMessage(resource,"ScaleImage.unable_to_create_target_directory",locale) + " - " + targetDirectory;              Debug.logFatal(errMsg,module);              return ServiceUtil.returnError(errMsg);            }          } else           if (newFileLocation.endsWith("/" + id)) {            try {              File[] files=targetDir.listFiles();              for (              File file : files) {                if (file.isFile() && file.getName().startsWith(id)) {                  file.delete();                }              }            } catch (            SecurityException e) {              Debug.logError(e,module);            }          }        } catch (        NullPointerException e) {          Debug.logError(e,module);        }        try {          ImageIO.write(bufNewImg,imgExtension,new File(imageServerPath + "/" + newFileLocation+ "."+ imgExtension));        } catch (        IllegalArgumentException e) {          String errMsg=UtilProperties.getMessage(resource,"ScaleImage.one_parameter_is_null",locale) + e.toString();          Debug.logError(errMsg,module);          result.put("errorMessage",errMsg);          return result;        }catch (        IOException e) {          String errMsg=UtilProperties.getMessage(resource,"ScaleImage.error_occurs_during_writing",locale) + e.toString();          Debug.logError(errMsg,module);          result.put("errorMessage",errMsg);          return result;        }        if (sizeTypeList.contains(sizeType)) {          String imageUrl=imageUrlPrefix + "/" + newFileLocation+ "."+ imgExtension;          imgUrlMap.put(sizeType,imageUrl);        }      }    }    result.put("responseMessage","success");    result.put("imageUrlMap",imgUrlMap);    result.put("original",resultBufImgMap);    return result;  } else {    String errMsg=UtilProperties.getMessage(resource,"ScaleImage.unable_to_scale_original_image",locale) + " : " + filenameToUse;    Debug.logError(errMsg,module);    result.put("errorMessage",errMsg);    return ServiceUtil.returnError(errMsg);  }}  }
class C{  public static boolean isRecursivelyVisible(java.awt.Component component){  if (component.getParent() instanceof JTabbedPane) {    JTabbedPane jTabbedPane=(JTabbedPane)component.getParent();    boolean tabVisible=false;    for (    java.awt.Component childComponent : jTabbedPane.getComponents()) {      if (childComponent == component) {        tabVisible=true;        break;      }    }    return tabVisible && isRecursivelyVisible(component.getParent());  }  if (component.getParent() instanceof CollapsiblePanel) {    return isRecursivelyVisible(component.getParent());  }  return component.isVisible() && (component.getParent() == null || isRecursivelyVisible(component.getParent()));}  }
class C{  public void next(){  m_progressPanel.next();}  }
class C{  public void testGetFilterNamesForClassWithSingleFilter() throws Exception {  String xml=WEBAPP_TEST_HEADER + "  <filter>" + "    <filter-name>f1</filter-name>"+ "    <filter-class>f1class</filter-class>"+ "  </filter>"+ "</web-app>";  this.builder.build(new ByteArrayInputStream(xml.getBytes("UTF-8")));  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  List<String> filterNames=WebXmlUtils.getFilterNamesForClass(webXml,"f1class");  assertEquals(1,filterNames.size());  assertEquals("f1",filterNames.get(0));}  }
class C{  private Set<String> calculateInputClasses(JobDefinition job){  Set<String> dep=new LinkedHashSet<String>();  ProjectGraph graph=scheduler.getProjectData().getProjectGraph();  for (  String input : graph.getCUTsDirectlyUsedAsInput(job.cut,true)) {    if (graph.isInterface(input)) {      continue;    }    dep.add(input);  }  return dep;}  }
class C{  public void resetCertificateSource(){  certificatesSource=null;}  }
class C{  public void initDumpDisplay(String content){  dumpStore=new DumpStore();  topNodes=new Vector();  if (!runningAsJConsolePlugin && !runningAsVisualVMPlugin) {    getMainMenu().getLongMenuItem().setEnabled(true);    getMainMenu().getSaveSessionMenuItem().setEnabled(true);    getMainMenu().getExpandButton().setEnabled(true);    getMainMenu().getCollapseButton().setEnabled(true);    getMainMenu().getFindLRThreadsToolBarButton().setEnabled(true);    getMainMenu().getCloseAllMenuItem().setEnabled(true);    getMainMenu().getExpandAllMenuItem().setEnabled(true);    getMainMenu().getCollapseAllMenuItem().setEnabled(true);  }  if (!runningAsJConsolePlugin || (dumpFile != null)) {    if (dumpFile != null) {      addDumpFile();    } else     if (content != null) {      addDumpStream(new ByteArrayInputStream(content.getBytes()),"Clipboard at " + new Date(System.currentTimeMillis()),false);      addToLogfile(content);    }  }  if (runningAsJConsolePlugin || runningAsVisualVMPlugin || isFileOpen()) {    if (topSplitPane.getDividerLocation() <= 0) {      topSplitPane.setDividerLocation(200);    }    remove(0);    revalidate();    htmlPane.setText("");    splitPane.setBottomComponent(htmlView);    add(splitPane,BorderLayout.CENTER);    if (PrefManager.get().getDividerPos() > 0) {      splitPane.setDividerLocation(PrefManager.get().getDividerPos());    } else {      splitPane.setDividerLocation(100);    }    revalidate();  }}  }
class C{  public static void startDreamByUserRequest(Context context){  startDream(context,false);}  }
class C{  private String extractProjectNameFromUri(@NotNull String uri){  int indexFinishProjectName=uri.lastIndexOf(".");  int indexStartProjectName=uri.lastIndexOf("/") != -1 ? uri.lastIndexOf("/") + 1 : (uri.lastIndexOf(":") + 1);  if (indexStartProjectName != 0 && indexStartProjectName < indexFinishProjectName) {    return uri.substring(indexStartProjectName,indexFinishProjectName);  }  if (indexStartProjectName != 0) {    return uri.substring(indexStartProjectName);  }  return "";}  }
class C{  public DimensionsEvent(GPOMutable keys,GPOMutable aggregates,int bucketID,int schemaID,int dimensionDescriptorID,int aggregatorIndex){  this.eventKey=new EventKey(bucketID,schemaID,dimensionDescriptorID,aggregatorIndex,keys);  setAggregates(aggregates);}  }
class C{  @Override protected void handleSuccess(final BreakpointHitReply reply){  final ProcessManager processManager=getDebugger().getProcessManager();  RelocatedAddress eventAddress=null;  final RegisterValues registerValues=reply.getRegisterValues();  final long tid=reply.getThreadId();  for (  final ThreadRegisters threadRegisters : registerValues) {    if (tid == threadRegisters.getTid()) {      for (      final RegisterValue registerValue : threadRegisters) {        if (registerValue.isPc()) {          eventAddress=new RelocatedAddress(new CAddress(registerValue.getValue()));        }      }    }  }  if (eventAddress != null) {    updateHitBreakpoints(DebuggerHelpers.getBreakpointAddress(getDebugger(),eventAddress));  } else {    throw new IllegalStateException("IE00173: register reply did not include program counter");  }  try {    final TargetProcessThread thread=processManager.getThread(reply.getThreadId());    for (    final ThreadRegisters threadRegisters : registerValues) {      if (tid == threadRegisters.getTid()) {        thread.setRegisterValues(threadRegisters.getRegisters());        break;      }    }    processManager.setActiveThread(thread);    thread.setCurrentAddress(eventAddress);  } catch (  final MaybeNullException exception) {    NaviLogger.info("Error: there is no thread with the specified thread id %d Exception: %s",reply.getThreadId(),exception);  }}  }
class C{  @Override protected void onNfcStateDisabled(){  toast(getString(R.string.nfcAvailableDisabled));}  }
class C{  public int numParameters(){  return 3;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.TRY_STATEMENT__BLOCK:    setBlock((Block)null);  return;case N4JSPackage.TRY_STATEMENT__CATCH:setCatch((CatchBlock)null);return;case N4JSPackage.TRY_STATEMENT__FINALLY:setFinally((FinallyBlock)null);return;}super.eUnset(featureID);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.PARAMETERIZED_TYPE__PARAMETER:    getParameter().clear();  getParameter().addAll((Collection<? extends TypeParameter>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static Object eval(Reader reader) throws ScriptException {  requireLoad();  checkSupported();  return engine.eval(reader);}  }
class C{  public boolean initialize(TileSource source){  this.source=source;  LayerInfo baseLayerInfo=null;  String[][] sourceLayerInfo=source.getLayerInfo();  LayerInfo[] knownLayers=new LayerInfo[sourceLayerInfo.length];  for (int i=0; i < knownLayers.length; ++i) {    knownLayers[i]=new LayerInfo(sourceLayerInfo[i][0],sourceLayerInfo[i][1],-1);    if (knownLayers[i].type == LayerType.field)     knownLayers[i].colorMapName=FieldLayer.defaultColorMapName;  }  for (int i=0; i < knownLayers.length; ++i)   if (knownLayers[i].type == LayerType.elevation) {    baseLayerInfo=knownLayers[i];    break;  }  if (baseLayerInfo == null) {    Console.getInstance().println("Elevation layer not found.");    return (false);  }  Properties properties=source.getProperties("elevation");  if (properties == null) {    Console.getInstance().println("Elevation layer properties not found.");    return (false);  }  baseLayerInfo.minimum=StringUtil.getDoubleValue(properties,"MinimumValue",false,0,true);  baseLayerInfo.maximum=StringUtil.getDoubleValue(properties,"MaximumValue",false,0,true);  if (availableLayers == null) {    availableLayers=new Vector<LayerInfo>();    for (int i=0; i < knownLayers.length; ++i) {      if (knownLayers[i] != baseLayerInfo)       availableLayers.add(knownLayers[i]);    }    LayerInfo lInfo=new LayerInfo("Slope Map","derivative",DerivativeLayer.defaultColorMapName,0,90,false);    availableLayers.add(lInfo);    lInfo=new LayerInfo("Aspect Map","derivative",DerivativeLayer.defaultColorMapName,0,90,false);    availableLayers.add(lInfo);    lInfo=new LayerInfo("Elevation Map","derivative",DerivativeLayer.defaultColorMapName,baseLayerInfo.minimum,baseLayerInfo.maximum,false);    availableLayers.add(lInfo);  } else {    for (int i=availableLayers.size() - 1; i >= 0; --i) {      LayerInfo li=availableLayers.get(i);      if ((li.type == LayerType.grayimage) || (li.type == LayerType.colorimage) || (li.type == LayerType.field)) {        boolean foundLayer=false;        for (int j=0; j < knownLayers.length; ++j) {          if ((li.type == knownLayers[j].type) && (li.name.equals(knownLayers[j].name))) {            foundLayer=true;            break;          }        }        if (!foundLayer)         availableLayers.remove(i);      }    }    for (int i=0; i < knownLayers.length; ++i) {      if (knownLayers[i] == baseLayerInfo)       continue;      boolean foundLayer=false;      for (int j=0; j < availableLayers.size(); ++j) {        LayerInfo li=availableLayers.get(j);        if ((li.type == knownLayers[i].type) && (li.name.equals(knownLayers[i].name))) {          foundLayer=true;          break;        }      }      if (visibleLayers != null) {        for (int j=0; j < visibleLayers.size(); ++j) {          LayerInfo li=visibleLayers.get(j);          if ((li.type == knownLayers[i].type) && (li.name.equals(knownLayers[i].name))) {            foundLayer=true;            break;          }        }      }      if (!foundLayer)       availableLayers.add(knownLayers[i]);    }  }  Collections.sort(availableLayers);  if (visibleLayers == null) {    visibleLayers=new Vector<LayerInfo>(NUM_LAYERS);    visibleLayers.setSize(NUM_LAYERS);    for (int i=0; i < availableLayers.size(); ++i) {      if ((availableLayers.get(i).type == LayerType.colorimage) || (availableLayers.get(i).type == LayerType.grayimage)) {        LayerInfo li=availableLayers.get(i);        visibleLayers.set(0,li);        availableLayers.remove(i);        li.layerNumber=0;        li.autoblend=false;        break;      }    }    noLayersSelected=true;    for (int i=0; i < visibleLayers.size(); ++i) {      if (visibleLayers.get(i) == null)       visibleLayers.set(i,new LayerInfo("None","none",i)); else       noLayersSelected=false;    }    if (noLayersSelected)     shadingFromSurface=true;  } else {    for (int i=0; i < visibleLayers.size(); ++i) {      LayerInfo li=visibleLayers.get(i);      if ((li.type == LayerType.grayimage) || (li.type == LayerType.colorimage) || (li.type == LayerType.field)) {        boolean foundLayer=false;        for (int j=0; j < knownLayers.length; ++j)         if ((li.type == knownLayers[j].type) && (li.name.equals(knownLayers[j].name))) {          foundLayer=true;          break;        }        if (!foundLayer)         visibleLayers.set(i,new LayerInfo("None","none",i));      }    }  }  if (layers == null) {    layers=new Layer[NUM_LAYERS];  }  if (!createBaseLayer(baseLayerInfo)) {    return (false);  }  createLayers();  return (true);}  }
class C{  public boolean contains(S2Cap other){  if (isFull() || other.isEmpty()) {    return true;  }  return angle().radians() >= axis.angle(other.axis) + other.angle().radians();}  }
class C{  public static double cdf(double val,double k,double lambda,double theta){  if (val > theta) {    return 1.0 - Math.exp(-Math.pow((val - theta) / lambda,k));  } else {    return 0.0;  }}  }
class C{  public ProductsRecyclerAdapter(Context context,CategoryRecyclerInterface categoryRecyclerInterface){  this.context=context;  this.categoryRecyclerInterface=categoryRecyclerInterface;  defineImagesQuality(false);}  }
class C{  public static Date parseDate(String dateValue,Collection dateFormats,Date startDate) throws DateParseException {  if (dateValue == null) {    throw new IllegalArgumentException("dateValue is null");  }  if (dateFormats == null) {    dateFormats=DEFAULT_PATTERNS;  }  if (startDate == null) {    startDate=DEFAULT_TWO_DIGIT_YEAR_START;  }  if (dateValue.length() > 1 && dateValue.startsWith("'") && dateValue.endsWith("'")) {    dateValue=dateValue.substring(1,dateValue.length() - 1);  }  SimpleDateFormat dateParser=null;  Iterator formatIter=dateFormats.iterator();  while (formatIter.hasNext()) {    String format=(String)formatIter.next();    if (dateParser == null) {      dateParser=new SimpleDateFormat(format,Locale.US);      dateParser.setTimeZone(TimeZone.getTimeZone("GMT"));      dateParser.set2DigitYearStart(startDate);    } else {      dateParser.applyPattern(format);    }    try {      return dateParser.parse(dateValue);    } catch (    ParseException pe) {    }  }  throw new DateParseException("Unable to parse the date " + dateValue);}  }
class C{  void synchronize(){  SolrZkClient zkClient=core.getCoreDescriptor().getCoreContainer().getZkController().getZkClient();  try {    zkClient.setData(this.getZnodePath(),this.getState().getBytes(),true);    this.setState(CdcrParams.ProcessState.get(zkClient.getData(this.getZnodePath(),watcher,null,true)));  } catch (  KeeperException|InterruptedException e) {    log.warn("Failed synchronising new state",e);  }}  }
class C{  public void loadAll(Boolean verbose) throws ClassNotFoundException {  Set<String> names=getUnits().keySet();  for (  String s : names) {    if (verbose) {      Logger.getLogger(IsolatedClassLoader.class.getName()).log(Level.INFO,"Loading, " + s);    }    Class c=this.findClass(s);    classes.put(s,c);  }}  }
class C{  private void updateQDisplay(){  boolean reports=reportField.isSelected();  log.config("Reports=" + reports);  processLabel.setVisible(reports);  processField.setVisible(reports);  bPartnerLabel.setVisible(!reports);  bPartnerField.setVisible(!reports);}  }
class C{  protected void initialize(){  m_Filename="";  m_Title="";  m_CurrentCol=-1;  m_LastSearch="";  m_LastReplace="";  m_ShowAttributeIndex=true;  m_Changed=false;  m_ChangeListeners=new HashSet<ChangeListener>();}  }
class C{  public Class<?> compile(String className,String code){  try {    JavaFileObject sourceFile=new StringJavaFileObject(className,code);    compileClass(sourceFile);    return classLoader.loadClass(className);  } catch (  ClassNotFoundException e) {    throw new AssertionError("Failed to load newly compiled class:\n" + e.toString());  }catch (  IOException e) {    throw new AssertionError("Failed to write file:\n" + e.toString());  }}  }
class C{  public void togglePickedObjectHighlights(){  String message="";  for (  Object pickedObject : pickedObjects) {    if (pickedObject instanceof Highlightable) {      Highlightable highlightable=(Highlightable)pickedObject;      highlightable.setHighlighted(!highlightable.isHighlighted());      if (highlightable.isHighlighted()) {        if (!message.isEmpty()) {          message+=", ";        }        message+=((Renderable)highlightable).getDisplayName();      }    }  }  if (!message.isEmpty()) {    Toast.makeText(getApplicationContext(),message,Toast.LENGTH_SHORT).show();  }  this.getWorldWindow().requestRedraw();}  }
class C{  public void register(Route route){  Integer oldSize=Integer.valueOf(_routeHashTable.size());  _routeHashTable.put(route.getId(),route);  int id=Integer.parseInt(route.getId());  if (id > _id) {    _id=id;  }  setDirtyAndFirePropertyChange(LISTLENGTH_CHANGED_PROPERTY,oldSize,Integer.valueOf(_routeHashTable.size()));}  }
class C{  public void op(UserHostmask user){  if (user == null)   throw new IllegalArgumentException("Can't set op on null user");  setMode("+o " + user.getNick());}  }
class C{  protected void loadBuffer(){  int resIdx=minuteSpacing / 5 - 1;  if (resIdx < 0)   resIdx=0; else   if (resIdx > 2)   resIdx=2;  String fileName=path + etopoFileNames[resIdx];  try {    BufferedInputStream bis=new BufferedInputStream(ClassLoader.getSystemResourceAsStream(fileName));    bufferWidth=etopoWidths[resIdx];    bufferHeight=etopoHeights[resIdx];    int spacer=1;switch (minuteSpacing) {case (2):      spacer=1 + this.spacer;    break;case (5):  spacer=0 + this.spacer;break;default :spacer=1 + this.spacer;}int numberOfWords=(bufferWidth + spacer) * bufferHeight;dataBuffer=new short[numberOfWords];iv_buffer=new byte[2 * numberOfWords];iv_bytesinbuffer=bis.read(iv_buffer,0,2 * numberOfWords);iv_curptr=0;for (int i=0; i < bufferWidth * bufferHeight; i++) dataBuffer[i]=readShort();bis.close();bufferWidth+=spacer;} catch (FileNotFoundException e) {Debug.error("ETOPOLayer loadBuffer(): file " + fileName + " not found");}catch (IOException e) {Debug.error("ETOPOLayer loadBuffer(): File IO Error!\n" + e.toString());}}  }
class C{  public static <T>ContainsAllPredicate<T> containsAll(Property<? extends Collection<T>> collectionProperty,Iterable<T> values){  NullArgumentException.validateNotNull("Values",values);  return new ContainsAllPredicate<>(property(collectionProperty),values);}  }
class C{  public void morph(Component source,Component destination,int duration,Runnable onCompletion){  morph(source,destination,duration,false,onCompletion);}  }
class C{  public void printLayout(String path,int indent,StringBuilder string) throws KeeperException, InterruptedException {  byte[] data=getData(path,null,null,true);  List<String> children=getChildren(path,null,true);  StringBuilder dent=new StringBuilder();  for (int i=0; i < indent; i++) {    dent.append(" ");  }  string.append(dent + path + " ("+ children.size()+ ")"+ NEWL);  if (data != null) {    String dataString=new String(data,StandardCharsets.UTF_8);    if ((!path.endsWith(".txt") && !path.endsWith(".xml")) || path.endsWith(ZkStateReader.CLUSTER_STATE)) {      if (path.endsWith(".xml")) {        dataString=prettyPrint(dataString);      }      string.append(dent + "DATA:\n" + dent+ "    "+ dataString.replaceAll("\n","\n" + dent + "    ")+ NEWL);    } else {      string.append(dent + "DATA: ...supressed..." + NEWL);    }  }  for (  String child : children) {    if (!child.equals("quota")) {      try {        printLayout(path + (path.equals("/") ? "" : "/") + child,indent + 1,string);      } catch (      NoNodeException e) {      }    }  }}  }
class C{  @BeforeClass public static void beforeClass() throws IOException, InterruptedException {  HELPER.start();}  }
class C{  public Bundler putDouble(String key,double value){  bundle.putDouble(key,value);  return this;}  }
class C{  public TypeScriptCodeScanner(IColorManager manager,IPreferenceStore store){  super(manager,store);  initialize();}  }
class C{  public void installUI(JComponent c){  super.installUI(c);  c.setOpaque(false);}  }
class C{  public void end(){  String tag=(String)m_tagStack.remove(m_tagStack.size() - 1);  spacing();  m_out.print('<');  m_out.print('/');  m_out.print(tag);  m_out.print('>');  println();}  }
class C{  public GutterIconInfo addOffsetTrackingIcon(int offs,Icon icon) throws BadLocationException {  return iconArea.addOffsetTrackingIcon(offs,icon);}  }
class C{  private static Server unmarshallServer(Map<String,?> serverData) throws FabricCommunicationException {  ServerMode mode;  ServerRole role;  String host;  int port;  try {    if (Integer.class.equals(serverData.get(FIELD_MODE).getClass())) {      mode=ServerMode.getFromConstant((Integer)serverData.get(FIELD_MODE));      role=ServerRole.getFromConstant((Integer)serverData.get(FIELD_STATUS));      host=(String)serverData.get(FIELD_HOST);      port=(Integer)serverData.get(FIELD_PORT);    } else {      mode=ServerMode.valueOf((String)serverData.get(FIELD_MODE));      role=ServerRole.valueOf((String)serverData.get(FIELD_STATUS));      String hostnameAndPort[]=((String)serverData.get(FIELD_ADDRESS)).split(":");      host=hostnameAndPort[0];      port=Integer.valueOf(hostnameAndPort[1]);    }    Server s=new Server((String)serverData.get(FIELD_GROUP_ID),(String)serverData.get(FIELD_SERVER_UUID),host,port,mode,role,(Double)serverData.get(FIELD_WEIGHT));    return s;  } catch (  Exception ex) {    throw new FabricCommunicationException("Unable to parse server definition",ex);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String s2=getString(stack);  String s1=getString(stack);  return (s1 == null || s2 == null) ? Boolean.FALSE : Boolean.valueOf(s1.startsWith(s2));}  }
class C{  public final TLCState randomState(StateVec states) throws EvalException {  int len=states.size();  if (len > 0) {    int index=(int)Math.floor(this.rng.nextDouble() * len);    return states.elementAt(index);  }  return null;}  }
class C{  void applyExpensiveOutlineWithBlur(Bitmap srcDst,Canvas srcDstCanvas,int color,int outlineColor){  applyExpensiveOutlineWithBlur(srcDst,srcDstCanvas,color,outlineColor,true);}  }
class C{  Item newNameTypeItem(final String name,final String desc){  key2.set(NAME_TYPE,name,desc,null);  Item result=get(key2);  if (result == null) {    put122(NAME_TYPE,newUTF8(name),newUTF8(desc));    result=new Item(index++,key2);    put(result);  }  return result;}  }
class C{  private void updateBorder(){  m_tableBorder.setTitle(getBorderText());  updateUI();}  }
class C{  public NumberEditor(JSpinner spinner){  this(spinner,getDefaultPattern(spinner.getLocale()));}  }
class C{  @Override public void handleRequest(SolrQueryRequest req,SolrQueryResponse rsp){  SolrRequestHandler handler=_handler;  if (handler == null) {    handler=getWrappedHandler();  }  handler.handleRequest(req,rsp);}  }
class C{  void free(PageStreamTrunk t){  pageCount-=t.free(0);}  }
class C{  public boolean isSelected(){  return selected;}  }
class C{  @RequestMapping(value="/account",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<String> saveAccount(@RequestBody UserDTO userDTO){  Optional<User> existingUser=userRepository.findOneByEmail(userDTO.getEmail());  if (existingUser.isPresent() && (!existingUser.get().getLogin().equalsIgnoreCase(userDTO.getLogin()))) {    return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("user-management","emailexists","Email already in use")).body(null);  }  return userRepository.findOneByLogin(SecurityUtils.getCurrentUser().getUsername()).map(null).orElseGet(null);}  }
class C{  public boolean isControl(){  return (flags & CONTROL) != 0;}  }
class C{  @POST @Produces(MediaType.APPLICATION_JSON) @Consumes(MediaType.APPLICATION_JSON) @Description("Creates a user.") public PrincipalUserDto createPrincipalUser(@Context HttpServletRequest req,final PrincipalUserDto userDto){  PrincipalUser remoteUser=validateAndGetOwner(req,null);  validateResourceAuthorization(req,remoteUser,remoteUser);  if (userDto == null) {    throw new WebApplicationException("Cannot create a null user.",Status.BAD_REQUEST);  }  PrincipalUser user=new PrincipalUser(remoteUser,userDto.getUserName(),userDto.getEmail());  copyProperties(user,userDto);  user=_uService.updateUser(user);  return PrincipalUserDto.transformToDto(user);}  }
class C{  public GF2Matrix(int numColumns,int[][] matrix){  if (matrix[0].length != (numColumns + 31) >> 5) {    throw new ArithmeticException("Int array does not match given number of columns.");  }  this.numColumns=numColumns;  numRows=matrix.length;  length=matrix[0].length;  int rest=numColumns & 0x1f;  int bitMask;  if (rest == 0) {    bitMask=0xffffffff;  } else {    bitMask=(1 << rest) - 1;  }  for (int i=0; i < numRows; i++) {    matrix[i][length - 1]&=bitMask;  }  this.matrix=matrix;}  }
class C{  public StringIndexOutOfBoundsException(int sourceLength,int offset,int count){  super("length=" + sourceLength + "; regionStart="+ offset+ "; regionLength="+ count);}  }
class C{  MixedContent asMixedContent(){  MixedContent mixedContent=new MixedContent();  if (count != 0) {    TemplateElement first=buffer[0];    mixedContent.setChildren(this);    mixedContent.setLocation(first.getTemplate(),first,getLast());  }  return mixedContent;}  }
class C{  public AbstractTransition(State<S,E> source,State<S,E> target,Collection<Action<S,E>> actions,E event,TransitionKind kind,Guard<S,E> guard,Trigger<S,E> trigger,SecurityRule securityRule){  Assert.notNull(kind,"Transition type must be set");  this.source=source;  this.target=target;  this.actions=actions;  this.kind=kind;  this.guard=guard;  this.trigger=trigger;  this.securityRule=securityRule;}  }
class C{  public Path createClasspath(){  if (this.classpath == null) {    this.classpath=new Path(getProject());  }  return this.classpath.createPath();}  }
class C{  public void writeHeader() throws IOException {  FLVHeader flvHeader=new FLVHeader();  flvHeader.setFlagAudio(true);  flvHeader.setFlagVideo(true);  ByteBuffer header=ByteBuffer.allocate(HEADER_LENGTH + 4);  flvHeader.write(header);  file.setLength(HEADER_LENGTH + 4);  if (header.hasArray()) {    log.debug("Header bytebuffer has a backing array");    file.write(header.array());  } else {    log.debug("Header bytebuffer does not have a backing array");    byte[] tmp=new byte[HEADER_LENGTH + 4];    header.get(tmp);    file.write(tmp);  }  bytesWritten=file.length();  header.clear();}  }
class C{  private static Coordinate[] orientCorner(Coordinate p0,Coordinate p1,Coordinate p2){  Coordinate[] orient;  if (CGAlgorithms.CLOCKWISE == CGAlgorithms.orientationIndex(p0,p1,p2)) {    orient=new Coordinate[]{p1,p2};  } else {    orient=new Coordinate[]{p2,p1};  }  return orient;}  }
class C{  private void splitOn(String... columnNames){  List<Column> columns=sortedOriginal.columns(columnNames);  int byteSize=getByteSize(columns);  byte[] currentKey=null;  String currentStringKey=null;  TemporaryView view;  Selection selection=new BitmapBackedSelection();  for (int row=0; row < sortedOriginal.rowCount(); row++) {    ByteBuffer byteBuffer=ByteBuffer.allocate(byteSize);    String newStringKey="";    for (int col=0; col < columnNames.length; col++) {      if (col > 0) {        newStringKey=newStringKey + SPLIT_STRING;      }      Column c=sortedOriginal.column(columnNames[col]);      String groupKey=sortedOriginal.get(sortedOriginal.columnIndex(c),row);      newStringKey=newStringKey + groupKey;      byteBuffer.put(c.asBytes(row));    }    byte[] newKey=byteBuffer.array();    if (row == 0) {      currentKey=newKey;      currentStringKey=newStringKey;    }    if (!Arrays.equals(newKey,currentKey)) {      currentKey=newKey;      view=new TemporaryView(sortedOriginal,selection);      view.setName(currentStringKey);      currentStringKey=newStringKey;      addViewToSubTables(view);      selection=new BitmapBackedSelection();      selection.add(row);    } else {      selection.add(row);    }  }  if (!selection.isEmpty()) {    view=new TemporaryView(sortedOriginal,selection);    view.setName(currentStringKey);    addViewToSubTables(view);  }}  }
class C{  public boolean match(WildcardType node,Object other){  if (!(other instanceof WildcardType)) {    return false;  }  WildcardType o=(WildcardType)other;  return node.isUpperBound() == o.isUpperBound() && safeSubtreeMatch(node.getBound(),o.getBound());}  }
class C{  private void assertEquals(byte[] expected,int len,byte[] actual){  assertEquals(len,actual.length);  for (int i=0; i < len; ++i) {    assertEquals(expected[i],actual[i]);  }}  }
class C{  public boolean isAllowedToSendMessage() throws RcsPersistentStorageException, RcsGenericException {  try {    return mGroupChatInf.isAllowedToSendMessage();  } catch (  Exception e) {    RcsPersistentStorageException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public void mousePressed(MouseEvent e){  if (SwingUtilities.isRightMouseButton(e) || (!getSupportsAbsolutePositioning() && SwingUtilities.isMiddleMouseButton(e)))   return;  if (!scrollbar.isEnabled())   return;  currentMouseX=e.getX();  currentMouseY=e.getY();  isMouseButtonDown=false;  if (getThumbBounds().contains(currentMouseX,currentMouseY)) {    isMouseButtonDown=true;    scrollbar.repaint();  }}  }
class C{  public synchronized boolean hostEquals(final HttpConnection connection){  if (connection == null) {    throw new IllegalArgumentException("Connection may not be null");  }  if (host != null) {    if (!host.getHostName().equalsIgnoreCase(connection.getHost())) {      return false;    }    if (host.getPort() != connection.getPort()) {      return false;    }    if (!host.getProtocol().equals(connection.getProtocol())) {      return false;    }    if (localAddress != null) {      if (!localAddress.equals(connection.getLocalAddress())) {        return false;      }    } else {      if (connection.getLocalAddress() != null) {        return false;      }    }    return true;  } else {    return false;  }}  }
class C{  public void writeDateTime(long date) throws IOException {  this.writeULong((date >> 32) & 0xffffffff);  this.writeULong(date & 0xffffffff);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:11.775 -0500",hash_original_method="E48A8DF27205DB3C2384C43BB1BC845B",hash_generated_method="430AC3B395AFA9CCD14DE04745571D20") public RejectedExecutionException(String message,Throwable cause){  super(message,cause);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.BLOCK__STATEMENTS:    return statements != null && !statements.isEmpty();}return super.eIsSet(featureID);}  }
class C{  private IndexMetaData updateIndexSettings(IndexMetaData indexMetaData,Settings changeSettings,String[] ignoreSettings){  if (changeSettings.names().isEmpty() && ignoreSettings.length == 0) {    return indexMetaData;  }  Settings normalizedChangeSettings=Settings.settingsBuilder().put(changeSettings).normalizePrefix(IndexMetaData.INDEX_SETTING_PREFIX).build();  IndexMetaData.Builder builder=IndexMetaData.builder(indexMetaData);  Map<String,String> settingsMap=newHashMap(indexMetaData.getSettings().getAsMap());  List<String> simpleMatchPatterns=new ArrayList<>();  for (  String ignoredSetting : ignoreSettings) {    if (!Regex.isSimpleMatchPattern(ignoredSetting)) {      if (UNREMOVABLE_SETTINGS.contains(ignoredSetting)) {        throw new SnapshotRestoreException(snapshotId,"cannot remove setting [" + ignoredSetting + "] on restore");      } else {        settingsMap.remove(ignoredSetting);      }    } else {      simpleMatchPatterns.add(ignoredSetting);    }  }  if (!simpleMatchPatterns.isEmpty()) {    String[] removePatterns=simpleMatchPatterns.toArray(new String[simpleMatchPatterns.size()]);    Iterator<Map.Entry<String,String>> iterator=settingsMap.entrySet().iterator();    while (iterator.hasNext()) {      Map.Entry<String,String> entry=iterator.next();      if (UNREMOVABLE_SETTINGS.contains(entry.getKey()) == false) {        if (Regex.simpleMatch(removePatterns,entry.getKey())) {          iterator.remove();        }      }    }  }  for (  Map.Entry<String,String> entry : normalizedChangeSettings.getAsMap().entrySet()) {    if (UNMODIFIABLE_SETTINGS.contains(entry.getKey())) {      throw new SnapshotRestoreException(snapshotId,"cannot modify setting [" + entry.getKey() + "] on restore");    } else {      settingsMap.put(entry.getKey(),entry.getValue());    }  }  return builder.settings(Settings.builder().put(settingsMap)).build();}  }
class C{  public void sync(){  try {    barrier.await();  } catch (  InterruptedException|BrokenBarrierException e) {    LogHelper.fatal(e.getLocalizedMessage());  }}  }
class C{  public void migrateTo(DTMManager manager){  super.migrateTo(manager);  int numDTMs=m_dtmIdent.size();  int dtmId=m_mgrDefault.getFirstFreeDTMID();  int nodeIndex=0;  for (int i=0; i < numDTMs; i++) {    m_dtmIdent.setElementAt(dtmId << DTMManager.IDENT_DTM_NODE_BITS,i);    m_mgrDefault.addDTM(this,dtmId,nodeIndex);    dtmId++;    nodeIndex+=(1 << DTMManager.IDENT_DTM_NODE_BITS);  }}  }
class C{  public NoSoapToServerProxy(){  requestFileName="no-soap.query";  requestContentType="multipart/mixed; charset=UTF-8; " + "boundary=jetty771207119h3h10dty";  url="http://127.0.0.1:" + PortNumbers.PROXY_PORT;}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getActionCommand().equals(FieldRecordInfo.CHANGE_LOG_COMMAND)) {    FieldRecordInfo.start(m_GridField);    return;  }  if (!m_button.isEnabled())   return;  m_button.setEnabled(false);  Integer oldValue=0;  try {    oldValue=(Integer)getValue();  } catch (  ClassCastException cce) {  }  int oldValueInt=oldValue == null ? 0 : oldValue.intValue();  int M_AttributeSetInstance_ID=oldValueInt;  int M_Product_ID=0;  int M_ProductBOM_ID=0;  if (m_GridTab != null) {    M_Product_ID=Env.getContextAsInt(Env.getCtx(),m_WindowNo,m_GridTab.getTabNo(),"M_Product_ID");    M_ProductBOM_ID=Env.getContextAsInt(Env.getCtx(),m_WindowNo,m_GridTab.getTabNo(),"M_ProductBOM_ID");  } else {    M_Product_ID=Env.getContextAsInt(Env.getCtx(),m_WindowNo,"M_Product_ID");    M_ProductBOM_ID=Env.getContextAsInt(Env.getCtx(),m_WindowNo,"M_ProductBOM_ID");  }  int M_Locator_ID=-1;  log.config("M_Product_ID=" + M_Product_ID + "/"+ M_ProductBOM_ID+ ",M_AttributeSetInstance_ID="+ M_AttributeSetInstance_ID+ ", AD_Column_ID="+ m_AD_Column_ID);  boolean productWindow=m_AD_Column_ID == 8418;  boolean exclude=false;  if (M_Product_ID != 0) {    MProduct product=MProduct.get(Env.getCtx(),M_Product_ID);    int M_AttributeSet_ID=product.getM_AttributeSet_ID();    if (M_AttributeSet_ID != 0) {      MAttributeSet mas=MAttributeSet.get(Env.getCtx(),M_AttributeSet_ID);      exclude=mas.excludeEntry(m_AD_Column_ID,Env.isSOTrx(Env.getCtx(),m_WindowNo));    }  }  boolean changed=false;  if (M_ProductBOM_ID != 0)   M_Product_ID=M_ProductBOM_ID;  if (m_searchOnly) {    Container me=((Container)this).getParent();    while (me != null) {      if (me instanceof InfoProduct)       break;      me=me.getParent();    }    InfoPAttribute ia=new InfoPAttribute((CDialog)me);    m_pAttributeWhere=ia.getWhereClause();    String oldText=m_text.getText();    m_text.setText(ia.getDisplay());    m_text.setToolTipText(m_text.getText());    ActionEvent ae=new ActionEvent(m_text,1001,"updated");    ((InfoProduct)me).actionPerformed(ae);  } else   if (!productWindow && (M_Product_ID == 0 || exclude)) {    changed=true;    m_text.setText(null);    M_AttributeSetInstance_ID=0;  } else {    VPAttributeDialog vad=new VPAttributeDialog(Env.getFrame(this),M_AttributeSetInstance_ID,M_Product_ID,m_C_BPartner_ID,productWindow,m_AD_Column_ID,m_WindowNo,isReadWrite());    if (vad.isChanged()) {      m_text.setText(vad.getM_AttributeSetInstanceName());      m_text.setToolTipText(vad.getM_AttributeSetInstanceName());      M_AttributeSetInstance_ID=vad.getM_AttributeSetInstance_ID();      if (!productWindow && vad.getM_Locator_ID() > 0) {        M_Locator_ID=vad.getM_Locator_ID();      }      changed=true;    }  }  if (changed) {    log.finest("Changed M_AttributeSetInstance_ID=" + M_AttributeSetInstance_ID);    m_value=new Object();    if (M_AttributeSetInstance_ID == 0)     setValue(null); else     setValue(new Integer(M_AttributeSetInstance_ID));    if (m_GridTab != null && M_Locator_ID > 0) {      log.finest("Change M_Locator_ID=" + M_Locator_ID);      m_GridTab.setValue("M_Locator_ID",M_Locator_ID);    }    try {      String columnName="M_AttributeSetInstance_ID";      if (m_GridField != null) {        columnName=m_GridField.getColumnName();      }      fireVetoableChange(columnName,new Object(),getValue());    } catch (    PropertyVetoException pve) {      log.log(Level.SEVERE,"",pve);    }    if (M_AttributeSetInstance_ID == oldValueInt && m_GridTab != null && m_GridField != null) {      m_GridTab.processFieldChange(m_GridField);    }  }  m_button.setEnabled(true);  requestFocus();}  }
class C{  public final void add(GMatrix m1){  int i, j;  if (nRow != m1.nRow) {    throw new MatrixSizeException();  }  if (nCol != m1.nCol) {    throw new MatrixSizeException();  }  for (i=0; i < nRow; i++) {    for (j=0; j < nCol; j++) {      values[i][j]=values[i][j] + m1.values[i][j];    }  }}  }
class C{  @Override public JapaneseDate dateYearDay(int prolepticYear,int dayOfYear){  return new JapaneseDate(LocalDate.ofYearDay(prolepticYear,dayOfYear));}  }
class C{  private static void installSecurityMgr(){  try {    System.setSecurityManager(new RMISecurityManager());  } catch (  Exception e) {  }}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  if (!success || newRecord)   return success;  return true;}  }
class C{  public static <T>T assertAndCast(Class<? extends T> clazz,Object o){  assertNotNull(clazz);  assertNotNull(o);  assertTrue(clazz.isInstance(o));  return clazz.cast(o);}  }
class C{  private void noSuccessor(){  if (compute == FRAMES) {    Label l=new Label();    l.frame=new Frame();    l.frame.owner=l;    l.resolve(this,code.length,code.data);    previousBlock.successor=l;    previousBlock=l;  } else {    currentBlock.outputStackMax=maxStackSize;  }  currentBlock=null;}  }
class C{  protected void addToBottomBox(Component comp){  bottomBox.add(Box.createHorizontalStrut(bottomStrutWidth),bottomBoxIndex);  ++bottomBoxIndex;  bottomBox.add(comp,bottomBoxIndex);  ++bottomBoxIndex;}  }
class C{  public Object execute(BenchServer.Task task) throws Exception {  return task.execute();}  }
class C{  public static Point polarToPoint(double angle,double fx,double fy){  double si=sin(angle);  double co=cos(angle);  return new Point((int)(fx * co + 0.5),(int)(fy * si + 0.5));}  }
class C{  private static boolean qualifiedNewCalledInConstructors(final PsiClass aClass){  PsiMethod[] constructors=aClass.getConstructors();  if (constructors.length == 0)   return false;  for (  PsiMethod constructor : constructors) {    PsiCodeBlock body=constructor.getBody();    if (body == null)     return false;    PsiStatement[] statements=body.getStatements();    if (statements.length == 0)     return false;    PsiStatement firstStatement=statements[0];    if (!(firstStatement instanceof PsiExpressionStatement))     return false;    PsiExpression expression=((PsiExpressionStatement)firstStatement).getExpression();    if (!RefactoringChangeUtil.isSuperOrThisMethodCall(expression))     return false;    PsiMethodCallExpression methodCallExpression=(PsiMethodCallExpression)expression;    if (PsiKeyword.THIS.equals(methodCallExpression.getMethodExpression().getReferenceName()))     continue;    PsiReferenceExpression referenceExpression=methodCallExpression.getMethodExpression();    PsiExpression qualifierExpression=PsiUtil.skipParenthesizedExprDown(referenceExpression.getQualifierExpression());    if (qualifierExpression == null)     return false;  }  return true;}  }
class C{  public static void main(String[] args){  runCLIApplication(VisualizeGeodesicDistances.class,args);}  }
class C{  public ConditionVars checkCondition(Environment env,Context ctx,Vset vset,Hashtable exp){  ConditionVars cvars=new ConditionVars();  checkCondition(env,ctx,vset,exp,cvars);  return cvars;}  }
class C{  public void swap(final Type prev,final Type type){  if (type.getSize() == 1) {    if (prev.getSize() == 1) {      swap();    } else {      dupX2();      pop();    }  } else {    if (prev.getSize() == 1) {      dup2X1();      pop2();    } else {      dup2X2();      pop2();    }  }}  }
class C{  public static <E extends Comparable<E>>int partition(InplaceList<E> array,int left,int right){  final int mid=left + ((right - left) / 2);  E pivot=array.get(mid);  E current=array.get(0);  while (left <= right) {    while (array.get(current,left).compareTo(pivot) < 0) {      left++;    }    while (array.get(current,right).compareTo(pivot) > 0) {      right--;    }    if (left <= right) {      array.swap(left,right);      left++;      right--;    }  }  return left;}  }
class C{  public static void pack(int[] n,String s){  for (int i=0; i < n.length; i++) {    n[i]=0;  }  int idx=n.length - 1;  for (int i=s.length() - 1; i >= 0; i--) {    n[idx--]=s.charAt(i) - '0';  }}  }
class C{  public boolean isSelected(){  Object oo=get_Value(COLUMNNAME_IsSelected);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static String join(Collection collection,String delim){  return join(collection,delim,false);}  }
class C{  public void childrenAdded(BeanContextMembershipEvent bcme){  findAndInit(bcme.iterator());}  }
class C{  public SecP384R1Point(ECCurve curve,ECFieldElement x,ECFieldElement y){  this(curve,x,y,false);}  }
class C{  public MatteBorder(Insets borderInsets,Icon tileIcon){  super(borderInsets);  this.tileIcon=tileIcon;}  }
class C{  static Map<String,String> parse(String[] args) throws ParseException {  CommandLine cmd=new BasicParser().parse(options,args);  String hardPort=cmd.getOptionValue(HARDWARE_PORT_OPTION);  String appPort=cmd.getOptionValue(APPLICATION_PORT_OPTION);  String workerThreadsString=cmd.getOptionValue(WORKER_THREADS_OPTION);  String dataFolder=cmd.getOptionValue(DATA_FOLDER_OPTION);  String serverConfigPath=cmd.getOptionValue(SERVER_CONFIG_PATH_OPTION);  Map<String,String> properties=new HashMap<>();  if (hardPort != null) {    ParseUtil.parseInt(hardPort);    properties.put("hardware.default.port",hardPort);  }  if (appPort != null) {    ParseUtil.parseInt(appPort);    properties.put("app.ssl.port",appPort);  }  if (workerThreadsString != null) {    ParseUtil.parseInt(workerThreadsString);    properties.put("server.worker.threads",workerThreadsString);  }  if (dataFolder != null) {    properties.put("data.folder",dataFolder);  }  if (serverConfigPath != null) {    properties.put(ServerProperties.SERVER_PROPERTIES_FILENAME,serverConfigPath);  }  return properties;}  }
class C{  public void testComputeLocationWhenJBossSpringPackaging() throws Exception {  Deployable deployableElement=new Deployable();  deployableElement.setGroupId("projectGroupId");  deployableElement.setArtifactId("projectArtifactId");  deployableElement.setType("spring");  this.mockLog.expects(never()).method("warn");  String location=deployableElement.computeLocation(createDefaultProject("jboss-spring",null));  assertTrue(location,location.endsWith("projectFinalName.spring"));}  }
class C{  public static Date string2Date_yyyy_MM_dd_HH_mm_ss(String strDate){  if (TextUtils.isEmpty(strDate)) {    return null;  }  SimpleDateFormat sdf=getSimpleDateFormat("yyyy-MM-dd HH:mm:ss");  try {    return sdf.parse(strDate);  } catch (  ParseException e) {    e.printStackTrace();  }  return null;}  }
class C{  public static org.smpte_ra.schemas.st2067_2_2013.CompositionPlaylistType constructCompositionPlaylistType_2013(){  org.smpte_ra.schemas.st2067_2_2013.CompositionPlaylistType cplType_2013=new org.smpte_ra.schemas.st2067_2_2013.CompositionPlaylistType();  IMFDocumentsObjectFieldsFactory.constructObjectFields(cplType_2013);  return cplType_2013;}  }
class C{  private static String byteArrayToHexString(byte[] bytes){  StringBuilder sb=new StringBuilder(bytes.length * 2);  for (  byte element : bytes) {    int v=element & 0xff;    if (v < 16) {      sb.append('0');    }    sb.append(Integer.toHexString(v));  }  return sb.toString();}  }
class C{  public long currentStartMarker(){  return delimiter[currSegment];}  }
class C{  public Bundler putCharSequence(String key,CharSequence value){  bundle.putCharSequence(key,value);  return this;}  }
class C{  @Bean(name={"listenerContainerFactory"}) public RabbitListenerContainerFactory<SimpleMessageListenerContainer> listenerContainerFactory(final ErrorHandler errorHandler){  return new ConfigurableRabbitListenerContainerFactory(amqpProperties,rabbitConnectionFactory,errorHandler);}  }
class C{  public static void printHeader(Calendar calendar){  String[] months=getMonths();  int length=29 / 2 - (months[calendar.get(Calendar.MONTH)].length() / 2 + 3);  System.out.println();  for (int i=0; i < length; i++)   System.out.print(" ");  System.out.println(months[calendar.get(Calendar.MONTH)] + ", " + calendar.get(Calendar.YEAR));  System.out.println("-----------------------------");  System.out.println(" Sun Mon Tue Wed Thu Fri Sat");}  }
class C{  public void acceptInvitation() throws RcsGenericException {  try {    mSharingInf.acceptInvitation();  } catch (  Exception e) {    throw new RcsGenericException(e);  }}  }
class C{  public URIMetadataNode pullOneFilteredFromRWI(final boolean skipDoubleDom){  int p=-1;  URIMetadataNode page;  mainloop:   while ((page=pullOneRWI(skipDoubleDom)) != null) {    if (!this.query.urlMask_isCatchall && !page.matches(this.query.urlMaskPattern)) {      if (log.isFine())       log.fine("dropped RWI: no match with urlMask");      if (page.word().local())       this.local_rwi_available.decrementAndGet(); else       this.remote_rwi_available.decrementAndGet();      continue;    }    if (page.url() == null) {      if (log.isFine())       log.fine("dropped RWI: url == null");      if (page.word().local())       this.local_rwi_available.decrementAndGet(); else       this.remote_rwi_available.decrementAndGet();      continue;    }    ContentDomain contentDomain=page.getContentDomain();    if (this.query.contentdom.getCode() > 0 && ((this.query.contentdom == Classification.ContentDomain.IMAGE && contentDomain != Classification.ContentDomain.IMAGE) || (this.query.contentdom == Classification.ContentDomain.AUDIO && contentDomain != Classification.ContentDomain.AUDIO) || (this.query.contentdom == Classification.ContentDomain.VIDEO && contentDomain != Classification.ContentDomain.VIDEO)|| (this.query.contentdom == Classification.ContentDomain.APP && contentDomain != Classification.ContentDomain.APP)) && this.query.urlMask_isCatchall) {      if (log.isFine())       log.fine("dropped RWI: wrong contentdom = " + this.query.contentdom + ", domain = "+ contentDomain);      if (page.word().local())       this.local_rwi_available.decrementAndGet(); else       this.remote_rwi_available.decrementAndGet();      continue;    }    String ext=MultiProtocolURL.getFileExtension(page.url().getFileName());    if (this.query.contentdom == ContentDomain.TEXT && Classification.isImageExtension(ext) && this.excludeintext_image) {      if (log.isFine())       log.fine("dropped RWI: file name domain does not match");      continue;    }    if (this.query.modifier.filetype != null && !this.query.modifier.filetype.equals(ext)) {      if (log.isFine())       log.fine("dropped RWI: file type constraint = " + this.query.modifier.filetype);      if (page.word().local())       this.local_rwi_available.decrementAndGet(); else       this.remote_rwi_available.decrementAndGet();      continue;    }    if (this.query.modifier.language != null && !this.query.modifier.language.equals(page.language())) {      if (log.isFine())       log.fine("dropped RWI: language constraint = " + this.query.modifier.language);      if (page.word().local())       this.local_rwi_available.decrementAndGet(); else       this.remote_rwi_available.decrementAndGet();      continue;    }    if (this.query.modifier.author != null && !page.dc_creator().toLowerCase().contains(this.query.modifier.author.toLowerCase())) {      if (log.isFine())       log.fine("dropped RWI: author  constraint = " + this.query.modifier.author);      if (page.word().local())       this.local_rwi_available.decrementAndGet(); else       this.remote_rwi_available.decrementAndGet();      continue;    }    if (this.query.modifier.collection != null) {      Collection<Object> docCols=page.getFieldValues(CollectionSchema.collection_sxt.getSolrFieldName());      if (docCols == null) {        if (page.word().local())         this.local_rwi_available.decrementAndGet(); else         this.remote_rwi_available.decrementAndGet();        continue;      } else       if (!docCols.contains(this.query.modifier.collection)) {        if (page.word().local())         this.local_rwi_available.decrementAndGet(); else         this.remote_rwi_available.decrementAndGet();        continue;      }    }    if (Switchboard.urlBlacklist.isListed(BlacklistType.SEARCH,page.url())) {      if (log.isFine())       log.fine("dropped RWI: url is blacklisted in url blacklist");      if (page.word().local())       this.local_rwi_available.decrementAndGet(); else       this.remote_rwi_available.decrementAndGet();      continue;    }    if (Switchboard.getSwitchboard().getConfigBool("contentcontrol.enabled",false)) {      FilterEngine f=ContentControlFilterUpdateThread.getNetworkFilter();      if (f != null && !f.isListed(page.url(),null)) {        if (log.isFine())         log.fine("dropped RWI: url is blacklisted in contentcontrol");        if (page.word().local())         this.local_rwi_available.decrementAndGet(); else         this.remote_rwi_available.decrementAndGet();        continue;      }    }    final String pageurl=page.url().toNormalform(true);    final String pageauthor=page.dc_creator();    final String pagetitle=page.dc_title().toLowerCase();    if (this.query.getQueryGoal().getExcludeSize() != 0 && ((QueryParams.anymatch(pagetitle,this.query.getQueryGoal().getExcludeWords())) || (QueryParams.anymatch(pageurl.toLowerCase(),this.query.getQueryGoal().getExcludeWords())) || (QueryParams.anymatch(pageauthor.toLowerCase(),this.query.getQueryGoal().getExcludeWords())))) {      if (log.isFine())       log.fine("dropped RWI: no match with query goal exclusion");      if (page.word().local())       this.local_rwi_available.decrementAndGet(); else       this.remote_rwi_available.decrementAndGet();      continue;    }    if ((this.query.constraint != null) && (this.query.constraint.get(Tokenizer.flag_cat_indexof)) && (!(pagetitle.startsWith("index of")))) {      final Iterator<byte[]> wi=this.query.getQueryGoal().getIncludeHashes().iterator();      if (this.query.getSegment().termIndex() != null) {        while (wi.hasNext()) {          this.query.getSegment().termIndex().removeDelayed(wi.next(),page.hash());        }      }      if (log.isFine())       log.fine("dropped RWI: url does not match index-of constraint");      if (page.word().local())       this.local_rwi_available.decrementAndGet(); else       this.remote_rwi_available.decrementAndGet();      continue;    }    if ((this.query.constraint != null) && (this.query.constraint.get(Tokenizer.flag_cat_haslocation)) && (page.lat() == 0.0 || page.lon() == 0.0)) {      if (log.isFine())       log.fine("dropped RWI: location constraint");      if (page.word().local())       this.local_rwi_available.decrementAndGet(); else       this.remote_rwi_available.decrementAndGet();      continue;    }    double lat, lon;    if (this.query.radius > 0.0d && this.query.lat != 0.0d && this.query.lon != 0.0d && (lat=page.lat()) != 0.0d && (lon=page.lon()) != 0.0d) {      double latDelta=this.query.lat - lat;      double lonDelta=this.query.lon - lon;      double distance=Math.sqrt(latDelta * latDelta + lonDelta * lonDelta);      if (distance > this.query.radius) {        if (log.isFine())         log.fine("dropped RWI: radius constraint");        if (page.word().local())         this.local_rwi_available.decrementAndGet(); else         this.remote_rwi_available.decrementAndGet();        continue;      }    }    if (this.query.metatags != null && !this.query.metatags.isEmpty()) {      tagloop:       for (      Tagging.Metatag tag : this.query.metatags) {        SolrDocument sdoc=page;        if (sdoc != null) {          Collection<Object> tagvalues=sdoc.getFieldValues(CollectionSchema.VOCABULARY_PREFIX + tag.getVocabularyName() + CollectionSchema.VOCABULARY_TERMS_SUFFIX);          if (tagvalues != null && tagvalues.contains(tag.getObject())) {            continue tagloop;          }        }        if (log.isFine())         log.fine("dropped RWI: url not tagged with vocabulary " + tag.getVocabularyName());        if (page.word().local())         this.local_rwi_available.decrementAndGet(); else         this.remote_rwi_available.decrementAndGet();        continue mainloop;      }    }    if (this.namespaceNavigator != null) {      String pagepath=page.url().getPath();      if ((p=pagepath.indexOf(':')) >= 0) {        pagepath=pagepath.substring(0,p);        p=pagepath.lastIndexOf('/');        if (p >= 0) {          pagepath=pagepath.substring(p + 1);          this.namespaceNavigator.inc(pagepath);        }      }    }    return page;  }  return null;}  }
class C{  @Override public boolean isStealthActive(){  return (isStealthy || isMimetic || hasCamoSystem);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:05:57.212 -0400",hash_original_method="AB39B7AC7379086239E9836E0CD70917",hash_generated_method="D5BEEA9A703F3AEB9ED8954FA7A03574") public void activateGLEnvironment(){  GLEnvironment glEnv=mContext.getGLEnvironment();  if (glEnv != null) {    mContext.getGLEnvironment().activate();  } else {    throw new NullPointerException("No GLEnvironment in place to activate!");  }}  }
class C{  protected int index(int row,int column){  return _rowOffset(_rowRank(row)) + _columnOffset(_columnRank(column));}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();}  }
class C{  public String parse(boolean nameRequired) throws QueryException {  boolean hasUnique=false;  boolean hasScalarRequired=false;  boolean hasLax=false;  try {    if (source == null)     makeException(QueryMessage.EX_INVALID_INDEX_SPEC);    DocumentLoader loader=new DocumentLoader(source);    JsonObject jObj=(JsonObject)loader.parse();    close(false);    ArrayList<IndexColumn> columnList=new ArrayList<IndexColumn>();    for (    Entry<String,JsonValue> entry : jObj.entrySet()) {      String entryKey=entry.getKey();      JsonValue entryVal=entry.getValue();      JsonValue.ValueType vtype=entryVal.getValueType();      if (entryKey.equalsIgnoreCase("name")) {        if (vtype != JsonValue.ValueType.STRING)         makeException(QueryMessage.EX_INDEX_PROP_WRONG_TYPE,"index name","STRING",vtype.toString());        idxName=((JsonString)entryVal).getString();      } else       if (entryKey.equalsIgnoreCase("unique")) {        if (vtype == JsonValue.ValueType.TRUE)         is_unique=true; else         if (vtype == JsonValue.ValueType.FALSE)         is_unique=false; else         makeException(QueryMessage.EX_INDEX_PROP_WRONG_TYPE,"unique","BOOLEAN",vtype.toString());        hasUnique=true;      } else       if (entryKey.equalsIgnoreCase("scalarRequired")) {        if (vtype == JsonValue.ValueType.TRUE)         is_scalarRequired=true; else         if (vtype == JsonValue.ValueType.FALSE)         is_scalarRequired=false; else         makeException(QueryMessage.EX_INDEX_PROP_WRONG_TYPE,"scalarRequired","BOOLEAN",vtype.toString());        if (is_scalarRequired && is_lax)         makeException(QueryMessage.EX_SCALAR_AND_LAX);        hasScalarRequired=true;      } else       if (entryKey.equalsIgnoreCase("lax")) {        if (vtype == JsonValue.ValueType.TRUE)         is_lax=true; else         if (vtype == JsonValue.ValueType.FALSE)         is_lax=false; else         makeException(QueryMessage.EX_INDEX_PROP_WRONG_TYPE,"lax","BOOLEAN",vtype.toString());        if (is_scalarRequired && is_lax)         makeException(QueryMessage.EX_SCALAR_AND_LAX);        hasLax=true;      } else       if (entryKey.equalsIgnoreCase("language")) {        if (vtype != JsonValue.ValueType.STRING)         makeException(QueryMessage.EX_INDEX_PROP_WRONG_TYPE,"language","STRING",vtype.toString());        language=((JsonString)entryVal).getString();      } else       if (entryKey.equalsIgnoreCase("fields")) {        if (vtype != JsonValue.ValueType.ARRAY)         makeException(QueryMessage.EX_INDEX_PROP_WRONG_TYPE,"fields","ARRAY",vtype.toString());        JsonArray jArr=(JsonArray)entryVal;        Iterator<JsonValue> iter=jArr.iterator();        if (!iter.hasNext())         makeException(QueryMessage.EX_FIELDS_CANNOT_BE_EMPTY);        while (iter.hasNext()) {          JsonValue arrElem=iter.next();          if (arrElem.getValueType() != JsonValue.ValueType.OBJECT)           makeException(QueryMessage.EX_INDEX_PROP_WRONG_TYPE,"field","OBJECT",arrElem.getValueType().toString());          JsonObject obj=(JsonObject)arrElem;          IndexColumn idx=new IndexColumn();          String path=null;          String dtype=null;          String order=null;          int maxLength=0;          boolean lengthSpecified=false;          for (          Entry<String,JsonValue> fieldEntry : obj.entrySet()) {            String fkey=fieldEntry.getKey();            JsonValue fval=fieldEntry.getValue();            JsonValue.ValueType ftype=fval.getValueType();            if (fkey.equalsIgnoreCase("path")) {              if (ftype != JsonValue.ValueType.STRING)               makeException(QueryMessage.EX_INDEX_PROP_WRONG_TYPE,"fields.path","STRING",ftype.toString());              path=((JsonString)fval).getString();            } else             if (fkey.equalsIgnoreCase("datatype")) {              if (ftype != JsonValue.ValueType.STRING)               makeException(QueryMessage.EX_INDEX_PROP_WRONG_TYPE,"fields.datatype","STRING",ftype.toString());              dtype=((JsonString)fval).getString();            } else             if (fkey.equalsIgnoreCase("maxLength")) {              lengthSpecified=true;              if (ftype != JsonValue.ValueType.NUMBER)               makeException(QueryMessage.EX_INDEX_PROP_WRONG_TYPE,"fields.maxLength","NUMBER",ftype.toString());              JsonNumber ival=(JsonNumber)fval;              if (!ival.isIntegral())               makeException(QueryMessage.EX_INDEX_PROP_WRONG_TYPE,"fields.maxLength","integer","decimal");              maxLength=ival.intValue();            } else             if (fkey.equalsIgnoreCase("order")) {              if (ftype == JsonValue.ValueType.STRING) {                order=((JsonString)fval).getString();                if (!order.equalsIgnoreCase("asc") && !(order.equalsIgnoreCase("desc")) && !order.equals("1")&& !(order.equals("-1")))                 makeException(QueryMessage.EX_WRONG_ORDER,order);              } else               if (ftype == JsonValue.ValueType.NUMBER) {                order=((JsonNumber)fval).toString();                if (!order.equals("-1") && !(order.equals("1")))                 makeException(QueryMessage.EX_WRONG_ORDER,order);              } else               makeException(QueryMessage.EX_INDEX_PROP_WRONG_TYPE,"fields.order","STRING",ftype.toString());            }          }          if (path == null)           makeException(QueryMessage.EX_INDEX_PROP_MISSING,"fields.path");          PathParser pp=new PathParser(path);          String[] parr=pp.splitAndSQLEscape();          if (parr == null)           makeException(QueryMessage.EX_INDEX_ILLEGAL_PATH,path);          idx.setPath(parr);          if (dtype != null) {            int sqlType=idx.setSqlType(dtype);            if (sqlType == IndexColumn.SQLTYPE_NONE) {              makeException(QueryMessage.EX_INVALID_INDEX_DTYPE,dtype);            } else             if (sqlType != IndexColumn.SQLTYPE_CHAR && lengthSpecified)             makeException(QueryMessage.EX_LENGTH_NOT_ALLOWED,path);          }          if (maxLength > 0) {            idx.setMaxLength(maxLength);          } else           if (maxLength < 0) {            makeException(QueryMessage.EX_INVALID_INDEX_DLEN,Integer.toString(maxLength));          }          idx.setOrder(order);          columnList.add(idx);          idx=null;        }      }    }    int sz=columnList.size();    if (sz > 0) {      if (language != null) {        makeException(QueryMessage.EX_LANGUAGE_NOT_EXPECTED);      }      columns=new IndexColumn[sz];      columns=columnList.toArray(columns);    } else     if (sz == 0) {      if (hasUnique)       makeException(QueryMessage.EX_FIELDS_EXPECTED,"unique"); else       if (hasScalarRequired)       makeException(QueryMessage.EX_FIELDS_EXPECTED,"scalarRequired"); else       if (hasLax)       makeException(QueryMessage.EX_FIELDS_EXPECTED,"lax");    }  } catch (  IllegalArgumentException e) {    throw new QueryException(QueryMessage.EX_INVALID_INDEX_SPEC.get(),e);  }catch (  JsonParsingException e) {    throw new QueryException(QueryMessage.EX_INVALID_INDEX_SPEC.get(),e);  }catch (  JsonException e) {    throw new QueryException(QueryMessage.EX_INVALID_INDEX_SPEC.get(),e);  } finally {    close(true);  }  if ((nameRequired) && (idxName == null))   makeException(QueryMessage.EX_INDEX_PROP_MISSING,"name");  is_parsed=true;  return (idxName);}  }
class C{  String save(String path) throws FileNotFoundException, IOException {  if (mFilename != null) {    return mFilename;  }  mBitmapFileName=path + "/" + "Overlay"+ getId()+ ".png";  if (!(new File(mBitmapFileName).exists())) {    final FileOutputStream out=new FileOutputStream(mBitmapFileName);    mBitmap.compress(CompressFormat.PNG,100,out);    out.flush();    out.close();  }  mOFWidth=mBitmap.getWidth();  mOFHeight=mBitmap.getHeight();  mFilename=path + "/" + "Overlay"+ getId()+ ".rgb";  MediaArtistNativeHelper nativeHelper=(super.getMediaItem()).getNativeContext();  final Pair<Integer,Integer> maxResolution;  final Pair<Integer,Integer>[] resolutions;  resolutions=MediaProperties.getSupportedResolutions(nativeHelper.nativeHelperGetAspectRatio());  maxResolution=resolutions[resolutions.length - 1];  generateOverlayWithRenderingMode(super.getMediaItem(),this,maxResolution.second,maxResolution.first);  return mFilename;}  }
class C{  public JsonArray(){  elements=new ArrayList<JsonElement>();}  }
class C{  public Heap(){}  }
class C{  public UserEntry retrieveUser(String username) throws AppsForYourDomainException, ServiceException, IOException {  LOGGER.log(Level.INFO,"Retrieving user '" + username + "'.");  URL retrieveUrl=new URL(domainUrlBase + "user/" + SERVICE_VERSION+ "/"+ username);  return userService.getEntry(retrieveUrl,UserEntry.class);}  }
class C{  @Override public void stopSelfForPlugin(){  if (mPluginHostService != null) {    mPluginHostService.stopSelf();  }}  }
class C{  public void updateChildren(EventBean[] newData,EventBean[] oldData){  int size=children.length;  if (size == 0) {    return;  }  if (size == 1) {    children[0].update(newData,oldData);  } else {    for (    View child : children) {      child.update(newData,oldData);    }  }}  }
class C{  public boolean isFirstRow(){  if (m_totalRows == 0)   return true;  return m_currentRow == 0;}  }
class C{  public TraversalTest(String name){  super(name);}  }
class C{  public static Operation createPatchOperation(StatelessService service,ResourceState state,String existingStateLink){  URI existingStateURI=UriUtils.buildUri(service.getHost(),existingStateLink);  return Operation.createPatch(existingStateURI).setBody(state).setReferer(service.getUri());}  }
class C{  private void chopOffPrecision(int precision,boolean isFloat){  double value=realVar.getConcreteValue();  BigDecimal bd=new BigDecimal(value).setScale(precision,RoundingMode.HALF_EVEN);  double newValue=bd.doubleValue();  if (newValue == value) {    return;  }  realVar.setConcreteValue(newValue);  log.debug("Trying to chop precision " + precision + ": "+ value+ " -> "+ newValue);  double dist=DistanceEstimator.getDistance(cnstr);  if (!distWrsn(dist)) {    checkpointVar(dist);    return;  } else {    restoreVar();    return;  }}  }
class C{  public boolean subsystemContainsMember(ClientId member){  if (getObjectType() == XroadObjectType.SUBSYSTEM && member.getObjectType() == XroadObjectType.MEMBER) {    return getXRoadInstance().equals(member.getXRoadInstance()) && getMemberClass().equals(member.getMemberClass()) && getMemberCode().equals(member.getMemberCode());  }  return false;}  }
class C{  public SpanQuery sor(SpanQuery s,SpanQuery m,SpanQuery e){  return spanOrQuery(s,m,e);}  }
class C{  default String renderCode(Generator gen,M model){  return block(model.getCode().stream().collect(joining(nl())));}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.BREAK_STATEMENT__LABEL:    setLabel((LabelledStatement)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  @Override public void writeToLog(String message){  if (GUI2_DEBUG) {    System.out.println(message);  }}  }
class C{  public void addMoveScript(String pathname){  _moveScripts.add(pathname);  setDirtyAndFirePropertyChange("addMoveScript",pathname,null);}  }
class C{  public static void clearAssociatedVolumesReplicaFlags(IngestionRequestContext requestContext,Volume volume,Set<DataObject> updatedObjects,DbClient dbClient){  List<Volume> associatedVolumes=new ArrayList<Volume>();  if (volume.getAssociatedVolumes() != null) {    for (    String volumeId : volume.getAssociatedVolumes()) {      BlockObject bo=requestContext.findDataObjectByType(Volume.class,URI.create(volumeId),true);      if (null != bo && bo instanceof Volume) {        associatedVolumes.add((Volume)bo);      }    }    _logger.info("Clearing internal volume flag of replicas of associatedVolumes {} of RP volume {}",Joiner.on(",").join(associatedVolumes),volume.getLabel());    clearPersistedReplicaFlags(requestContext,associatedVolumes,updatedObjects,dbClient);  }}  }
class C{  private void enableMyLocation(){  if (ContextCompat.checkSelfPermission(this,Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {    PermissionUtils.requestPermission(this,LOCATION_PERMISSION_REQUEST_CODE,Manifest.permission.ACCESS_FINE_LOCATION,true);  } else   if (mMap != null) {    mMap.setMyLocationEnabled(true);  }}  }
class C{  public ActionErrors comprobarExistenciaEtiquetaXml(HttpServletRequest request,ActionErrors errors,String etiquetaXml,String id,String label,int tabla){  GestionDescripcionBI descripcionService=getGestionDescripcionBI(request);  CampoDatoVO campoDatoVO=descripcionService.getCampoDatoByEtiqueta(etiquetaXml);  if (campoDatoVO != null) {    if ((ArchivoTables.ADCAMPODATO_TABLE == tabla && !campoDatoVO.getId().equals(id)) || (ArchivoTables.ADCAMPODATO_TABLE != tabla)) {      errors.add(Constants.EXISTE_ELEMENTO_DUPLICADO,new ActionError(Constants.EXISTE_ELEMENTO_DUPLICADO,Messages.getString(label,request.getLocale()),Messages.getString(Constants.LABEL_CAMPO_DATO,request.getLocale()),Messages.getString(Constants.ETIQUETA_ETIQUETAXML,request.getLocale()),etiquetaXml));    }  }  CampoTablaVO campoTablaVO=descripcionService.getCampoTablaByEtiqueta(etiquetaXml);  if (campoTablaVO != null) {    if ((ArchivoTables.ADCAMPOTBL_TABLE == tabla && !campoTablaVO.getId().equals(id)) || (ArchivoTables.ADCAMPOTBL_TABLE != tabla)) {      errors.add(Constants.EXISTE_ELEMENTO_DUPLICADO,new ActionError(Constants.EXISTE_ELEMENTO_DUPLICADO,Messages.getString(label,request.getLocale()),Messages.getString(Constants.LABEL_CAMPO_TABLA,request.getLocale()),Messages.getString(Constants.ETIQUETA_ETIQUETAXML,request.getLocale()),etiquetaXml));    }  }  campoTablaVO=descripcionService.getCampoTablaByEtiquetaFila(etiquetaXml);  if (campoTablaVO != null) {    if ((ArchivoTables.ADCAMPOTBL_TABLE == tabla && !campoTablaVO.getId().equals(id)) || (ArchivoTables.ADCAMPOTBL_TABLE != tabla)) {      errors.add(Constants.EXISTE_ELEMENTO_DUPLICADO,new ActionError(Constants.EXISTE_ELEMENTO_DUPLICADO,Messages.getString(label,request.getLocale()),Messages.getString(Constants.LABEL_CAMPO_TABLA,request.getLocale()),Messages.getString(Constants.ETIQUETA_ETIQUETAXMLFILA,request.getLocale()),etiquetaXml));    }  }  return errors;}  }
class C{  public static mat4 createLookAt(vec3 eyePoint,vec3 target,vec3 worldUp){  mat4 result=new mat4();  result.lookAt(eyePoint,target,worldUp);  return result;}  }
class C{  private void parseBlocklist(final FileInputStream file){  try {    final XmlPullParserFactory factory=XmlPullParserFactory.newInstance();    factory.setNamespaceAware(true);    final XmlPullParser xpp=factory.newPullParser();    if (file != null) {      xpp.setInput(new InputStreamReader(file));      int eventType=xpp.getEventType();      String currentTag=null;      Location loc=null;      long radius=DEFAULT_RADIUS;      while (eventType != XmlPullParser.END_DOCUMENT) {        if (eventType == XmlPullParser.START_TAG) {          currentTag=xpp.getName();          if (currentTag.equals(LOCATION_TAG)) {            loc=new Location("DUMMY");          }        } else         if (eventType == XmlPullParser.TEXT) {          if (LATITUDE_TAG.equals(currentTag)) {            try {              loc.setLatitude(Double.valueOf(xpp.getText()));            } catch (            final NumberFormatException e) {              Log.e(TAG,"Error getting latitude");              loc=null;            }          }          if (LONGITUDE_TAG.equals(currentTag)) {            try {              loc.setLongitude(Double.valueOf(xpp.getText()));            } catch (            final NumberFormatException e) {              Log.e(TAG,"Error getting longitude");              loc=null;            }          }          if (RADIUS_TAG.equals(currentTag)) {            try {              radius=Long.valueOf(xpp.getText());            } catch (            final NumberFormatException e) {              Log.e(TAG,"Error getting longitude");              radius=DEFAULT_RADIUS;            }          }        } else         if (eventType == XmlPullParser.END_TAG) {          if (LOCATION_TAG.equals(xpp.getName())) {            if (GeometryUtils.isValidLocation(loc,false)) {              mBlockList.add(new ForbiddenArea(loc,radius));            } else {              Log.e(TAG,"Invalid location");            }          }        }        eventType=xpp.next();      }    }  } catch (  final IOException e) {    Log.e(TAG,"I/O exception reading blacklist");  }catch (  final XmlPullParserException e) {    Log.e(TAG,"Error parsing blacklist");  }  Log.i(TAG,"Loaded " + mBlockList.size() + " location blacklist entries");}  }
class C{  public Listener(String listenerId,String monitoredUrl,String listener,HttpHook hook){  this.listenerId=listenerId;  this.monitoredUrl=monitoredUrl;  this.listener=listener;  this.setHook(hook);}  }
class C{  private void populateVolumeRecommendations(VirtualPoolCapabilityValuesWrapper capabilities,VirtualPool sourceVolumeVPool,Volume sourceVolume,String taskId,TaskList taskList,Integer volumeCount,int volumeCounter,String volumeLabel,List<Volume> preparedVolumes,List<Recommendation> volumeRecommendations){  List<Recommendation> currentRecommendation=new ArrayList<Recommendation>();  VirtualPool mirrorVPool=sourceVolumeVPool;  if (!isNullOrEmpty(sourceVolumeVPool.getMirrorVirtualPool())) {    URI mirrorPoolUri=URI.create(sourceVolumeVPool.getMirrorVirtualPool());    if (!URIUtil.isNull(mirrorPoolUri)) {      mirrorVPool=_dbClient.queryObject(VirtualPool.class,mirrorPoolUri);    }  }  for (int i=0; i < capabilities.getResourceCount(); i++) {    VolumeRecommendation volumeRecommendation=new VolumeRecommendation(VolumeRecommendation.VolumeType.BLOCK_VOLUME,sourceVolume.getCapacity(),sourceVolumeVPool,sourceVolume.getVirtualArray());    volumeRecommendation.setId(sourceVolume.getId());    volumeRecommendation.addStoragePool(sourceVolume.getPool());    currentRecommendation.add(volumeRecommendation);  }  VirtualArray vArray=_dbClient.queryObject(VirtualArray.class,sourceVolume.getVirtualArray());  _scheduler.getRecommendationsForMirrors(vArray,mirrorVPool,capabilities,currentRecommendation);  _scheduler.prepareRecommendedVolumes(null,taskId,taskList,null,null,sourceVolumeVPool,volumeCount,currentRecommendation,null,volumeCounter,volumeLabel,preparedVolumes,capabilities,false);  volumeRecommendations.addAll(currentRecommendation);}  }
class C{  public void testBulkRegister2(){  Phaser phaser=new Phaser();  assertEquals(0,phaser.bulkRegister(0));  assertState(phaser,0,0,0);  assertEquals(0,phaser.bulkRegister(20));  assertState(phaser,0,20,20);}  }
class C{  final public boolean endsWithIgnoreCase(final String suffix){  final int l=suffix.length();  int length=length();  if (l > length)   return false;  int i=l;  final char[] a=array;  char c, d;  while (i-- != 0) {    c=Character.toLowerCase(Character.toUpperCase(suffix.charAt(i)));    d=Character.toLowerCase(Character.toUpperCase(a[--length]));    if (c != d)     return false;  }  return true;}  }
class C{  public ResolvableMethod returning(ResolvableType resolvableType){  this.returnType=resolvableType;  return this;}  }
class C{  public LinearL1SCD(int epochs,double lambda,Loss loss){  this(epochs,lambda,loss,true);}  }
class C{  public TDoubleFloatIterator(TDoubleFloatHashMap map){  super(map);  _map=map;}  }
class C{  public void addAttributeFor(final Class<?> definedIn,final String fieldName){  fieldToUseAsAttribute.add(reflectionProvider.getField(definedIn,fieldName));}  }
class C{  void start() throws JMSException {  if (ActiveMQRAManagedConnection.trace) {    ActiveMQRALogger.LOGGER.trace("start()");  }  if (connection != null) {    connection.start();  }}  }
class C{  private static TypeReference meetPhiType(Instruction s,Map<Instruction,PhiTypeInformation> phiTypes){  TypeReference result=null;  for (int i=0; i < Phi.getNumberOfValues(s); i++) {    Operand val=Phi.getValue(s,i);    if (val instanceof UnreachableOperand)     continue;    TypeReference t=val.getType();    if (t == null) {      phiTypes.put(s,PhiTypeInformation.FOUND_NULL_TYPE);    } else     if (result == null) {      result=t;    } else {      TypeReference meet=ClassLoaderProxy.findCommonSuperclass(result,t);      if (meet == null) {        if ((result.isIntLikeType() && (t.isReferenceType() || t.isWordLikeType())) || ((result.isReferenceType() || result.isWordLikeType()) && t.isIntLikeType())) {          meet=TypeReference.Int;        } else         if (result.isReferenceType() && t.isWordLikeType()) {          meet=t;        } else         if (result.isWordLikeType() && t.isReferenceType()) {          meet=result;        }      }      if (VM.VerifyAssertions && meet == null) {        String msg=result + " and " + t+ " meet to null";        VM._assert(VM.NOT_REACHED,msg);      }      result=meet;    }  }  return result;}  }
class C{  public StripedLockConcurrentHashMap(@NotNull Map<? extends K,? extends V> t){  this(Math.max((int)(t.size() / DEFAULT_LOAD_FACTOR) + 1,11));  putAll(t);}  }
class C{  private PricedProductRole copy(PriceModel pm,PricedParameter pp,PricedOption po){  PricedProductRole copy=new PricedProductRole();  copy.setPricePerUser(getPricePerUser());  copy.setRoleDefinition(getRoleDefinition());  copy.setPriceModel(pm);  copy.setPricedParameter(pp);  copy.setPricedOption(po);  return copy;}  }
class C{  public Switch(Context context,AttributeSet attrs){  this(context,attrs,R.attr.switchStyle);}  }
class C{  @Override public void onSearchHint(SearchCustomActionBar searchview,CharSequence constraint){}  }
class C{  private static void writeEnumByte(BinaryRawWriter w,Enum e){  w.writeByte(e == null ? 0 : (byte)e.ordinal());}  }
class C{  static Object[] toArray(Iterable<?> iterable){  return castOrCopyToCollection(iterable).toArray();}  }
class C{  public void testEquals(){  int effectiveKeyBits=10;  byte[] iv=new byte[]{1,2,3,4,5,6,7,8};  RC2ParameterSpec ps1=new RC2ParameterSpec(effectiveKeyBits,iv);  RC2ParameterSpec ps2=new RC2ParameterSpec(effectiveKeyBits,iv);  RC2ParameterSpec ps3=new RC2ParameterSpec(10,new byte[]{1,2,3,4,5,6,7,8,9});  assertTrue("The equivalence relation should be reflexive.",ps1.equals(ps1));  assertTrue("Objects built on the same parameters should be equal.",ps1.equals(ps2));  assertTrue("The equivalence relation should be symmetric.",ps2.equals(ps1));  assertTrue("Objects built on the equal parameters should be equal.",ps2.equals(ps3));  assertTrue("The equivalence relation should be transitive.",ps1.equals(ps3));  assertFalse("Should return not be equal to null object.",ps1.equals(null));  ps2=new RC2ParameterSpec(11,iv);  assertFalse("Objects should not be equal.",ps1.equals(ps2));  ps2=new RC2ParameterSpec(11,new byte[]{9,8,7,6,5,4,3,2,1});  assertFalse("Objects should not be equal.",ps1.equals(ps2));}  }
class C{  private void calculateColor(int coord){  coord=coord - mBarPointerHaloRadius;  if (coord > (mBarLength / 2) && (coord < mBarLength)) {    mColor=Color.HSVToColor(new float[]{mHSVColor[0],1f,1 - (mPosToSVFactor * (coord - (mBarLength / 2)))});  } else   if (coord > 0 && coord < mBarLength) {    mColor=Color.HSVToColor(new float[]{mHSVColor[0],(mPosToSVFactor * coord),1f});  } else   if (coord == (mBarLength / 2)) {    mColor=Color.HSVToColor(new float[]{mHSVColor[0],1f,1f});  } else   if (coord <= 0) {    mColor=Color.WHITE;  } else   if (coord >= mBarLength) {    mColor=Color.BLACK;  }}  }
class C{  public void removeAndroidEventListener(AndroidEventListener listener){synchronized (androidEventListeners) {    androidEventListeners.removeValue(listener,true);  }}  }
class C{  public URIReferenceException(Throwable cause){  super(cause == null ? null : cause.toString());  this.cause=cause;}  }
class C{  public void initializeContacts(EvolutionState state){  if (iAmServer) {    fireUpServer(state,base);    state.output.message("Server Launched.");  } else {    state.output.message("I'm just a client.");  }  long l=0;  try {    state.output.message("Connecting to Server " + serverAddress + ", port "+ serverPort);    while (true) {      try {        serverSocket=new Socket(serverAddress,serverPort);        break;      } catch (      IOException e) {        l++;        try {          Thread.sleep(5000);        } catch (        InterruptedException f) {          state.output.message("" + f);        }        state.output.message("Retrying");      }    }    state.output.message("Connected to Server after " + (l * SLEEP_TIME) + " ms");    fromServer=new DataInputStream(serverSocket.getInputStream());    toServer=new DataOutputStream(serverSocket.getOutputStream());    toServer.writeUTF(ownId);    toServer.flush();    mailbox=new IslandExchangeMailbox(state,clientPort,fromServer.readInt(),fromServer.readInt(),ownId,chatty,compressedCommunication);    mailboxThread=new Thread(mailbox);    mailboxThread.start();    state.output.message("IslandExchangeMailbox created.");    try {      toServer.writeUTF(LocalHost.getLocalHost().getHostAddress());      toServer.flush();      state.output.message("My address is: " + LocalHost.getLocalHost().getHostAddress());    } catch (    UnknownHostException e) {      state.output.fatal("Could not get the address of the local computer.");    }    toServer.writeInt(mailbox.getPort());    toServer.flush();    synchronous=(fromServer.readInt() == 1);    if (synchronous) {      state.output.message("The communication will be synchronous.");    } else {      state.output.message("The communication will be asynchronous.");    }    modulo=fromServer.readInt();    offset=fromServer.readInt();    size=fromServer.readInt();    number_of_destination_islands=fromServer.readInt();    outSockets=new Socket[number_of_destination_islands];    outWriters=new DataOutputStream[number_of_destination_islands];    running=new boolean[number_of_destination_islands];    outgoingIds=new String[number_of_destination_islands];    for (int y=0; y < number_of_destination_islands; y++) {      String address=fromServer.readUTF().trim();      int port=fromServer.readInt();      try {        try {          state.output.message("Trying to connect to " + address + " : "+ port);          outSockets[y]=new Socket(address,port);        } catch (        UnknownHostException e) {          state.output.warning("Unknown host exception while the client was opening a socket to " + address + " : "+ port);          running[y]=false;          continue;        }        if (compressedCommunication) {          OutputStream compressedo=Output.makeCompressingOutputStream(outSockets[y].getOutputStream());          InputStream compressedi=Output.makeCompressingInputStream(outSockets[y].getInputStream());          if (compressedi == null || compressedo == null)           state.output.fatal("You do not appear to have JZLib installed on your system, and so may must have compression turned off for IslandExchange.  " + "To get JZLib, download from the ECJ website or from http://www.jcraft.com/jzlib/");          outWriters[y]=new DataOutputStream(compressedo);          outgoingIds[y]=new DataInputStream(compressedi).readUTF().trim();        } else {          outWriters[y]=new DataOutputStream(outSockets[y].getOutputStream());          outgoingIds[y]=new DataInputStream(outSockets[y].getInputStream()).readUTF().trim();        }        outWriters[y].writeUTF(ownId);        outWriters[y].flush();        running[y]=true;      } catch (      IOException e) {        state.output.warning("IO exception while the client was opening sockets to other islands' mailboxes :" + e);        running[y]=false;      }    }    toServer.writeUTF(OKAY);    toServer.flush();    fromServer.readUTF();  } catch (  IOException e) {    state.output.fatal("Error communicating to the server.");  }  try {    serverSocket.setSoTimeout(FOUND_TIMEOUT);  } catch (  SocketException e) {    state.output.fatal("Could not set the connection to the server to non-blocking.");  }}  }
class C{  public double cdf(double x){  if (x <= min)   return 0.0;  if (x >= max)   return 1.0;  return (x - min) / (max - min);}  }
class C{  public void testAddMissingJmsResourcesNoJmsResources() throws Exception {  Resource mailSession=new Resource("jdbc/mailSession",ConfigurationEntryType.MAIL_SESSION);  configuration.addResource(mailSession);  WebLogicResourceRules.addMissingJmsResources(configuration);  List<Resource> resources=configuration.getResources();  assertEquals(1,resources.size());  assertEquals(mailSession,resources.get(0));}  }
class C{  public MutablePeriod(long startInstant,long endInstant,PeriodType type){  super(startInstant,endInstant,type,null);}  }
class C{  public CreateNetworkParams withNetwork(@NotNull NewNetwork newNetwork){  requireNonNull(newNetwork);  this.network=newNetwork;  return this;}  }
class C{  public static String createEtcdQuorumString(List<String> etcdIps){  StringBuilder sb=new StringBuilder();  for (int i=0; i < etcdIps.size(); i++) {    sb.append(etcdIps.get(i) + ":" + ClusterManagerConstants.Swarm.ETCD_PORT);    if (i != etcdIps.size() - 1) {      sb.append(",");    }  }  return sb.toString();}  }
class C{  public static String join(Object[] list,String delim){  return join(list,delim,false);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  double n;  double sum;  double centreVal;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  int k=0;  int kMinusOne=0;  int p=0;  double aLargeValue=Float.MAX_VALUE;  double currentNearestVal;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      k=Integer.parseInt(args[i]);    } else     if (i == 6) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if (k < 3 || k > filterSizeX * filterSizeY) {    showFeedback("The k-value of the k-nearest mean filter is set inappropriately.");  }  kMinusOne--;  double[] nearestVals=new double[k];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    double[][] absDiffVals=new double[2][numPixelsInFilter];    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        centreVal=inputFile.getValue(row,col);        if (centreVal != noData) {          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData && filterShape[a] == 1) {              absDiffVals[0][a]=(z - centreVal) * (z - centreVal);              absDiffVals[1][a]=z;            } else {              absDiffVals[0][a]=noData;            }          }          n=0;          sum=0;          for (int m=0; m < k; m++) {            p=-1;            currentNearestVal=aLargeValue;            for (a=0; a < numPixelsInFilter; a++) {              if (absDiffVals[0][a] != noData && absDiffVals[0][a] < currentNearestVal) {                p=a;                currentNearestVal=absDiffVals[0][a];              }            }            if (p >= 0) {              n++;              sum+=absDiffVals[1][p];              absDiffVals[0][p]=noData;            }          }          if (n == k) {            outputFile.setValue(row,col,sum / n);          } else {            outputFile.setValue(row,col,centreVal);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.348 -0500",hash_original_method="3BA03116BEA38D71B8C38B4BA62E5B71",hash_generated_method="5F3061FD2E1DF2232BFC4EDD62C08709") public PPreferredIdentityHeader createPPreferredIdentityHeader(Address address){  if (address == null)   throw new NullPointerException("null address!");  PPreferredIdentity preferredIdentity=new PPreferredIdentity();  preferredIdentity.setAddress(address);  return preferredIdentity;}  }
class C{  public static List<File> sortInBatch(File file,Comparator<String> cmp) throws IOException {  return sortInBatch(file,cmp,DEFAULTMAXTEMPFILES);}  }
class C{  public void write(long fileOffset,byte[] buffer,int offset,int length) throws IOException {  log.info("random-write(0x" + Long.toHexString(fileOffset) + ","+ length+ ")");  _file.write(fileOffset,buffer,offset,length);}  }
class C{  public boolean isRooted(){  int kSystemRootStateUnknow=-1;  int kSystemRootStateDisable=0;  int kSystemRootStateEnable=1;  int systemRootState=kSystemRootStateUnknow;  if (systemRootState == kSystemRootStateEnable) {    return true;  } else   if (systemRootState == kSystemRootStateDisable) {    return false;  }  File f=null;  final String kSuSearchPaths[]={"/system/bin/","/system/xbin/","/system/sbin/","/sbin/","/vendor/bin/"};  try {    for (int i=0; i < kSuSearchPaths.length; i++) {      f=new File(kSuSearchPaths[i] + "su");      if (f != null && f.exists()) {        systemRootState=kSystemRootStateEnable;        return true;      }    }  } catch (  Exception e) {    return false;  }  systemRootState=kSystemRootStateDisable;  return false;}  }
class C{  public terminal_set check_first_set() throws internal_error {  int part;  symbol sym;  for (part=0; part < rhs_length(); part++) {    if (!rhs(part).is_action()) {      sym=((symbol_part)rhs(part)).the_symbol();      if (sym.is_non_term()) {        _first_set.add(((non_terminal)sym).first_set());        if (!((non_terminal)sym).nullable())         break;      } else {        _first_set.add((terminal)sym);        break;      }    }  }  return first_set();}  }
class C{  public void accept(final MethodVisitor mv,boolean visible){  Label[] start=new Label[this.start.size()];  Label[] end=new Label[this.end.size()];  int[] index=new int[this.index.size()];  for (int i=0; i < start.length; ++i) {    start[i]=this.start.get(i).getLabel();    end[i]=this.end.get(i).getLabel();    index[i]=this.index.get(i);  }  accept(mv.visitLocalVariableAnnotation(typeRef,typePath,start,end,index,desc,true));}  }
class C{  public CCTextureAtlas(CCTexture2D tex,int n){  capacity_=n;  texture_=tex;  totalQuads_=0;  withColorArray_=false;  ByteBuffer tbb=ByteBuffer.allocateDirect(ccQuad2.size * capacity_ * 4);  tbb.order(ByteOrder.nativeOrder());  textureCoordinates=tbb.asFloatBuffer();  ByteBuffer vbb=ByteBuffer.allocateDirect(ccQuad3.size * capacity_ * 4);  vbb.order(ByteOrder.nativeOrder());  vertexCoordinates=vbb.asFloatBuffer();  ByteBuffer isb=ByteBuffer.allocateDirect(6 * capacity_ * 2);  isb.order(ByteOrder.nativeOrder());  indices=isb.asShortBuffer();  initIndices();}  }
class C{  public void incrementActivation(double ceiling,double incrementAmount){  activation+=incrementAmount;  if (activation > ceiling) {    activation=ceiling;  }}  }
class C{  @Override public boolean onInterceptTouchEvent(MotionEvent ev){  View sidebarScrollView=findViewById(R.id.sidebar_scroll);  View commentOverflow=findViewById(R.id.commentOverflow);  int yOffset=sidebarScrollView.getScrollY();  for (  View view : scrollableViews) {    Rect rect=new Rect();    view.getHitRect(rect);    if (rect.contains((int)ev.getX(),(int)ev.getY() - commentOverflow.getTop() + yOffset)) {      return false;    }  }  try {    return super.onInterceptTouchEvent(ev);  } catch (  Exception e) {    return false;  }}  }
class C{  public void println(){  _append("\n");}  }
class C{  public boolean isLeaf(){  return m_isLeaf;}  }
class C{  public void editar(Local local){  try {    String sql="UPDATE tb_local SET nome=?, descricao=?, fk_setor=? WHERE id_local=? ";    stm=conector.prepareStatement(sql);    stm.setString(1,local.getNome());    stm.setString(2,local.getDescricao());    stm.setInt(3,local.getSetor().getId());    stm.setInt(4,local.getId());    stm.executeUpdate();    stm.close();  } catch (  SQLException ex) {    Mensagem.erro("Erro ao atualizar local na base de dados! \n" + ex);  }}  }
class C{  public TradeCenterMarketSlot(final String name){  super(name,name);}  }
class C{  private void heapifyDown(double cur,Object val){  final int stop=size >>> 1;  int twopos=0;  while (twopos < stop) {    int bestchild=(twopos << 1) + 1;    double best=twoheap[bestchild];    final int right=bestchild + 1;    if (right < size && best > twoheap[right]) {      bestchild=right;      best=twoheap[right];    }    if (cur <= best) {      break;    }    twoheap[twopos]=best;    twovals[twopos]=twovals[bestchild];    twopos=bestchild;  }  twoheap[twopos]=cur;  twovals[twopos]=val;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:00.428 -0500",hash_original_method="4F217738DCB333D737660126178B49E9",hash_generated_method="81679702FD98099E265AE77287253940") public final int bytesConsumed(){  return bytesConsumed;}  }
class C{  @SuppressWarnings("unchecked") public static <T>T asType(Object obj,Class<T> type){  if (String.class == type) {    return (T)InvokerHelper.toString(obj);  }  try {    return (T)DefaultTypeTransformation.castToType(obj,type);  } catch (  GroovyCastException e) {    MetaClass mc=InvokerHelper.getMetaClass(obj);    if (mc instanceof ExpandoMetaClass) {      ExpandoMetaClass emc=(ExpandoMetaClass)mc;      Object mixedIn=emc.castToMixedType(obj,type);      if (mixedIn != null)       return (T)mixedIn;    }    if (type.isInterface()) {      try {        List<Class> interfaces=new ArrayList<Class>();        interfaces.add(type);        return (T)ProxyGenerator.INSTANCE.instantiateDelegate(interfaces,obj);      } catch (      GroovyRuntimeException cause) {      }    }    throw e;  }}  }
class C{  private void end(byte[] signature){  len=pos;  int dLen=len - 4;  buf[0]=signature[0];  buf[1]=signature[1];  buf[2]=(byte)((dLen >>> 8) & 0xFF);  buf[3]=(byte)(dLen & 0xFF);}  }
class C{  public void error(Throwable t,String s,Object... params){  if (isEnabled(TraceSystem.ERROR)) {    s=MessageFormat.format(s,params);    traceWriter.write(TraceSystem.ERROR,s,t);  }}  }
class C{  public static void toggleRestrictSearchToVisibleNodes(final ZyGraph graph){  Preconditions.checkNotNull(graph,"IE01759: Graph argument can not be null");  graph.getSettings().getSearchSettings().setSearchVisibleNodesOnly(!graph.getSettings().getSearchSettings().getSearchVisibleNodesOnly());}  }
class C{  public static String padLeft(String str,int totalChars){  if (str == null)   str="null";  StringBuffer sb=new StringBuffer();  for (int i=0; i < totalChars - str.length(); i++) {    sb.append(" ");  }  sb.append(str);  return sb.toString();}  }
class C{  public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {  return left.lessThanOrEqual(right) ? XBoolean.S_TRUE : XBoolean.S_FALSE;}  }
class C{  public static void writeBytesToFile(File file,byte[] bytes) throws IOException {  FileOutputStream fileOS=new FileOutputStream(file);  StreamUtil.writeBytesToStream(bytes,fileOS);}  }
class C{  static DLockQueryReplyMessage query(final InternalDistributedMember grantor,final String serviceName,final Object objectName,final boolean lockBatch,final DM dm){  DLockQueryProcessor processor=new DLockQueryProcessor(dm,grantor,serviceName);  DLockQueryMessage msg=new DLockQueryMessage();  msg.processorId=processor.getProcessorId();  msg.serviceName=serviceName;  msg.objectName=objectName;  msg.lockBatch=lockBatch;  msg.setRecipient(grantor);  if (grantor.equals(dm.getId())) {    msg.setSender(grantor);    msg.processLocally(dm);  } else {    dm.putOutgoing(msg);  }  try {    processor.waitForRepliesUninterruptibly();  } catch (  ReplyException e) {    e.handleAsUnexpected();  }  if (processor.reply == null) {    return null;  } else {    return processor.reply;  }}  }
class C{  private static String[] toStringArray(Object[] params){  List<String> result=new ArrayList<String>();  if (params != null) {    for (    Object p : params) {      String entry=(p == null) ? null : String.valueOf(p);      if (p instanceof Enum<?>) {        entry=ENUM_PREFIX + p.getClass().getSimpleName() + "."+ p;      }      result.add(entry);    }  }  return result.toArray(new String[result.size()]);}  }
class C{  protected void mergeCache(List<OBJECT> objects){synchronized (this) {    if (this.objectList != null) {      objects=new ArrayList<>(objects);      for (int i=0; i < objects.size(); i++) {        OBJECT newObject=objects.get(i);        String newObjectName=getObjectName(newObject);        for (int k=0; k < objectList.size(); k++) {          OBJECT oldObject=objectList.get(k);          String oldObjectName=getObjectName(oldObject);          if (newObjectName.equals(oldObjectName)) {            objects.set(i,oldObject);            break;          }        }      }    }  }  setCache(objects);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.028 -0400",hash_original_method="7182DDAFB743FF4AA8D7A019E67A4496",hash_generated_method="B2643D56CC4E628723FA32C9E36D4D42") public String toString(String enc) throws UnsupportedEncodingException {  return new String(toByteArray(),enc);}  }
class C{  public String encodeBody(){  return encodeProduct();}  }
class C{  @Override void acquireReadLock(){  this.lock.lock();}  }
class C{  public void store(long value,Offset offset){}  }
class C{  public AnnotationDefaultAttribute(ConstPool cp){  this(cp,new byte[]{0,0});}  }
class C{  @Override public LoopedAmbientSoundSource create(final ConfigurableFactoryContext ctx){  LoopedAmbientSoundSource source;  source=new LoopedAmbientSoundSource(getSound(ctx),getRadius(ctx),getVolume(ctx));  return source;}  }
class C{  private static byte[] exposeByteArrayInputStreamBytes(ByteArrayInputStream bais){  byte[] buffer;synchronized (bais) {    byte[] buf;    int pos;    try {      buf=(byte[])BAIS_BUF.get(bais);      pos=BAIS_POS.getInt(bais);    } catch (    IllegalAccessException iae) {      throw new AssertionError(iae);    }    int available=bais.available();    if (pos == 0 && buf.length == available) {      buffer=buf;    } else {      buffer=new byte[available];      System.arraycopy(buf,pos,buffer,0,available);    }    bais.skip(available);  }  return buffer;}  }
class C{  public void testDFBlockSizeMultiple() throws Exception {  Document doc=newDocument();  for (int i=0; i < Lucene50PostingsFormat.BLOCK_SIZE * 16; i++) {    for (    IndexableField f : doc.getFields()) {      ((Field)f).setStringValue(f.name() + " " + f.name()+ "_2");    }    iw.addDocument(doc);  }}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  protected Tasks<T> postTasksURI(Object request,URI uri){  TaskList tasks=client.postURI(TaskList.class,request,uri);  return new Tasks<T>(client,tasks.getTaskList(),resourceClass);}  }
class C{  private synchronized void writeObject(ObjectOutputStream stream) throws IOException {  stream.writeObject(this.id);  stream.writeObject(this.lhs);  stream.writeObject(this.rhs);  this.serializeReduceAction(stream);  stream.writeObject(this.lastTerminal);  stream.writeObject(this.rhsSizeWithoutEpsilon);  stream.writeObject(this.hashCode);}  }
class C{  private Dop findExpandedOpcodeForInsn(DalvInsn insn){  Dop result=findOpcodeForInsn(insn.getLowRegVersion(),insn.getOpcode());  if (result == null) {    throw new DexException("No expanded opcode for " + insn);  }  return result;}  }
class C{  public boolean shouldOverrideChildPasteOperation(EObject parentElement,EObject childEObject){  return (childEObject.eClass().getEPackage() == NotationPackage.eINSTANCE);}  }
class C{  boolean usedInContractSeq(int c){  return contractFlags.get(c) == 1;}  }
class C{  public T caseAnonymous_entryOrExitAction_1_(Anonymous_entryOrExitAction_1_ object){  return null;}  }
class C{  public static void checkClassSignature(final String signature){  int pos=0;  if (getChar(signature,0) == '<') {    pos=checkFormalTypeParameters(signature,pos);  }  pos=checkClassTypeSignature(signature,pos);  while (getChar(signature,pos) == 'L') {    pos=checkClassTypeSignature(signature,pos);  }  if (pos != signature.length()) {    throw new IllegalArgumentException(signature + ": error at index " + pos);  }}  }
class C{  final public SyntaxTreeNode OperatorOrFunctionDefinition() throws ParseException {  SyntaxTreeNode tn;  SyntaxTreeNode zn=null;  bpa("Definition");  int kind=0;  String n;  Token t;  expecting="LOCAL, Identifier or Operator Symbol";switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case LOCAL:    t=jj_consume_token(LOCAL);  zn=new SyntaxTreeNode(mn,t);break;default :jj_la1[19]=jj_gen;;}t=jj_consume_token(DEFBREAK);expecting="LOCAL, Identifier or Operator Symbol";if (jj_2_8(2147483647)) {tn=Identifier();addHeir(tn);kind=N_FunctionDefinition;expecting="[";t=jj_consume_token(LSB);addHeir(new SyntaxTreeNode(mn,t));expecting="Identifier";tn=QuantBound();addHeir(tn);expecting="COMMA or ]";label_8: while (true) {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case COMMA:;break;default :jj_la1[20]=jj_gen;break label_8;}t=jj_consume_token(COMMA);addHeir(new SyntaxTreeNode(mn,t));expecting="Identifier";tn=QuantBound();addHeir(tn);}t=jj_consume_token(RSB);expecting="==";addHeir(new SyntaxTreeNode(mn,t));t=jj_consume_token(DEF);belchDEF();addHeir(new SyntaxTreeNode(mn,t));expecting="Expression";tn=Expression();addHeir(tn);} else if (jj_2_9(2147483647)) {tn=PostfixLHS();addHeir(tn);expecting="==";t=jj_consume_token(DEF);belchDEF();kind=N_OperatorDefinition;addHeir(new SyntaxTreeNode(mn,t));expecting="Expression";tn=Expression();addHeir(tn);} else if (jj_2_10(2147483647)) {tn=InfixLHS();addHeir(tn);expecting="==";t=jj_consume_token(DEF);belchDEF();kind=N_OperatorDefinition;addHeir(new SyntaxTreeNode(mn,t));expecting="Expression";tn=Expression();addHeir(tn);} else if (jj_2_11(2147483647)) {tn=IdentLHS();addHeir(tn);expecting="==";t=jj_consume_token(DEF);belchDEF();addHeir(new SyntaxTreeNode(mn,t));expecting="Expression or Instance";if (jj_2_7(1)) {tn=Expression();kind=N_OperatorDefinition;} else {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case INSTANCE:tn=Instantiation();kind=N_ModuleDefinition;break;default :jj_la1[21]=jj_gen;jj_consume_token(-1);throw new ParseException();}}addHeir(tn);} else {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case op_76:case op_26:case op_29:case op_58:case CASESEP:case op_61:case op_112:case op_113:case op_114:case op_115:case op_116:tn=PrefixLHS();addHeir(tn);expecting="==";t=jj_consume_token(DEF);belchDEF();kind=N_OperatorDefinition;addHeir(new SyntaxTreeNode(mn,t));expecting="Expression";tn=Expression();addHeir(tn);break;default :jj_la1[22]=jj_gen;jj_consume_token(-1);throw new ParseException();}}SyntaxTreeNode sn[]=getLastHeirs();epa();{if (true) return new SyntaxTreeNode(mn,kind,zn,sn);}throw new Error("Missing return statement in function");}  }
class C{  public RandomAccessData(byte[] initialBuffer){  checkNotNull(initialBuffer);  this.buffer=initialBuffer;  this.size=initialBuffer.length;}  }
class C{  static boolean isInvalidJavaWhiteSpace(int c){  int[] exceptions={0x00A0,0x2007,0x202F,0xFEFF};  boolean retValue=false;  for (int x=0; x < exceptions.length; x++) {    if (c == exceptions[x]) {      retValue=true;      break;    }  }  return retValue;}  }
class C{  public void handleDecode(Result result,Bitmap barcode){  inactivityTimer.onActivity();  playBeepSoundAndVibrate();  String resultString=result.getText();  if (resultString.equals("")) {    Toast.makeText(CaptureActivity.this,"Scan failed!",Toast.LENGTH_SHORT).show();  }  setResult(RESULT_OK,new Intent().putExtra(RESULT_QRCODE_STRING,resultString));  finish();}  }
class C{  public boolean containsSync(CacheKey key){  return mStagingArea.containsKey(key) || mFileCache.hasKeySync(key);}  }
class C{  @Deprecated static public final CbusEventTablePane instance(){  return self;}  }
class C{  public String nextTo(String delimiters) throws JSONException {  char c;  StringBuilder sb=new StringBuilder();  for (; ; ) {    c=this.next();    if (delimiters.indexOf(c) >= 0 || c == 0 || c == '\n' || c == '\r') {      if (c != 0) {        this.back();      }      return sb.toString().trim();    }    sb.append(c);  }}  }
class C{  public PathTool(SVGPathFigure pathPrototype,SVGBezierFigure bezierPrototype,@Nullable Map<AttributeKey,Object> attributes){  super(bezierPrototype,attributes);  this.pathPrototype=pathPrototype;}  }
class C{  protected AbstractLayoutCache.NodeDimensions createNodeDimensions(){  return new NodeDimensionsHandler();}  }
class C{  protected boolean hasDividerBeforeChildAt(int childIndex){  if (childIndex == 0) {    return (mShowDividers & SHOW_DIVIDER_BEGINNING) != 0;  } else   if (childIndex == getChildCount()) {    return (mShowDividers & SHOW_DIVIDER_END) != 0;  } else   if ((mShowDividers & SHOW_DIVIDER_MIDDLE) != 0) {    boolean hasVisibleViewBefore=false;    for (int i=childIndex - 1; i >= 0; i--) {      if (getChildAt(i).getVisibility() != GONE) {        hasVisibleViewBefore=true;        break;      }    }    return hasVisibleViewBefore;  }  return false;}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  @Deprecated @Override public void putAll(Map<? extends TypeToken<? extends B>,? extends B> map){  throw new UnsupportedOperationException();}  }
class C{  @Override public void ortho(float left,float right,float bottom,float top){  ortho(left,right,bottom,top,0,eyeDist * 10);}  }
class C{  public synchronized void waitForSubmittedTasks() throws InterruptedException {  while (currentTaskCount.get() > 0) {    waitForSingleTask();  }}  }
class C{  private static float GetStaticFloatField(JNIEnvironment env,int classJREF,int fieldID){  if (traceJNI)   VM.sysWrite("JNI called: GetStaticFloatField  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    RVMField field=MemberReference.getFieldRef(fieldID).resolve();    return field.getFloatValueUnchecked(null);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public void deregisterPush(){  impl.deregisterPush();}  }
class C{  public boolean isSmeDeliveryAndManualAckRequested(){  return isSmeDeliveryAndManualAckRequested(registeredDelivery);}  }
class C{  public void loadPackage(){  if (isLoaded)   return;  isLoaded=true;  URL url=getClass().getResource(packageFilename);  if (url == null) {    throw new RuntimeException("Missing serialized package: " + packageFilename);  }  URI uri=URI.createURI(url.toString());  Resource resource=new EcoreResourceFactoryImpl().createResource(uri);  try {    resource.load(null);  } catch (  IOException exception) {    throw new WrappedException(exception);  }  initializeFromLoadedEPackage(this,(EPackage)resource.getContents().get(0));  createResource(eNS_URI);}  }
class C{  @RequestMapping(value=BUSINESS_OBJECT_DATA_STATUS_URI_PREFIX + "/namespaces/{namespace}" + "/businessObjectDefinitionNames/{businessObjectDefinitionName}/businessObjectFormatUsages/{businessObjectFormatUsage}"+ "/businessObjectFormatFileTypes/{businessObjectFormatFileType}/businessObjectFormatVersions/{businessObjectFormatVersion}"+ "/partitionValues/{partitionValue}/subPartition1Values/{subPartition1Value}/subPartition2Values/{subPartition2Value}"+ "/businessObjectDataVersions/{businessObjectDataVersion}",method=RequestMethod.PUT) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DATA_STATUS_PUT) public BusinessObjectDataStatusUpdateResponse updateBusinessObjectDataStatus(@PathVariable("namespace") String namespace,@PathVariable("businessObjectDefinitionName") String businessObjectDefinitionName,@PathVariable("businessObjectFormatUsage") String businessObjectFormatUsage,@PathVariable("businessObjectFormatFileType") String businessObjectFormatFileType,@PathVariable("businessObjectFormatVersion") Integer businessObjectFormatVersion,@PathVariable("partitionValue") String partitionValue,@PathVariable("subPartition1Value") String subPartition1Value,@PathVariable("subPartition2Value") String subPartition2Value,@PathVariable("businessObjectDataVersion") Integer businessObjectDataVersion,@RequestBody BusinessObjectDataStatusUpdateRequest request){  BusinessObjectDataStatusUpdateResponse businessObjectDataStatusUpdateResponse=businessObjectDataStatusService.updateBusinessObjectDataStatus(new BusinessObjectDataKey(namespace,businessObjectDefinitionName,businessObjectFormatUsage,businessObjectFormatFileType,businessObjectFormatVersion,partitionValue,Arrays.asList(subPartition1Value,subPartition2Value),businessObjectDataVersion),request);  notificationEventService.processBusinessObjectDataNotificationEventAsync(NotificationEventTypeEntity.EventTypesBdata.BUS_OBJCT_DATA_STTS_CHG,businessObjectDataStatusUpdateResponse.getBusinessObjectDataKey(),businessObjectDataStatusUpdateResponse.getStatus(),businessObjectDataStatusUpdateResponse.getPreviousStatus());  return businessObjectDataStatusUpdateResponse;}  }
class C{  public Version(ICalVersion version){  this((version == null) ? null : version.getVersion());}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static PublicKey generatePublicKey(String encodedPublicKey){  try {    byte[] decodedKey=Base64.decode(encodedPublicKey);    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }catch (  InvalidKeySpecException e) {    Log.e(TAG,"Invalid key specification.");    throw new IllegalArgumentException(e);  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");    throw new IllegalArgumentException(e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:58.511 -0500",hash_original_method="4EBC089EFA4A412FF008399341976E93",hash_generated_method="9DB37741C3C76B607492F3B78C073BA3") public void addChargingCollectionFunctionAddress(String ccfAddress) throws ParseException {  if (ccfAddress == null)   throw new NullPointerException("JAIN-SIP Exception, " + "P-Charging-Function-Addresses, setChargingCollectionFunctionAddress(), the ccfAddress parameter is null.");  this.parameters.set(ParameterNamesIms.CCF,ccfAddress);}  }
class C{  protected OMGeometry createMGRSRectangle(MGRSPoint mgrsBasePoint,double voffset,double hoffset,double interval,Ellipsoid ellipsoid){  double[] llpoints=new double[10];  double easting=mgrsBasePoint.easting + hoffset;  double northing=mgrsBasePoint.northing + voffset;  int zone_number=mgrsBasePoint.zone_number;  char zone_letter=mgrsBasePoint.zone_letter;  LatLonPoint llp1=new LatLonPoint.Double();  llp1=MGRSPoint.MGRStoLL(ellipsoid,northing,easting,zone_number,zone_letter,llp1);  llpoints[0]=llp1.getY();  llpoints[1]=llp1.getX();  llpoints[8]=llp1.getY();  llpoints[9]=llp1.getX();  MGRSPoint.MGRStoLL(ellipsoid,northing,easting + interval,zone_number,zone_letter,llp1);  llpoints[2]=llp1.getY();  llpoints[3]=llp1.getX();  MGRSPoint.MGRStoLL(ellipsoid,northing + interval,easting + interval,zone_number,zone_letter,llp1);  llpoints[4]=llp1.getY();  llpoints[5]=llp1.getX();  MGRSPoint.MGRStoLL(ellipsoid,northing + interval,easting,zone_number,zone_letter,llp1);  llpoints[6]=llp1.getY();  llpoints[7]=llp1.getX();  MGRSPoint mgrs=new MGRSPoint(northing,easting,zone_number,zone_letter);  mgrs.resolve(mgrsBasePoint.getAccuracy());  String mgrsString=mgrs.getMGRS();  if (Debug.debugging("utmgriddetail"))   Debug.output(" - assigning " + mgrsString + " to poly with "+ mgrs.getAccuracy());  PolygonGeometry poly=new PolygonGeometry.LL(llpoints,OMGraphic.DECIMAL_DEGREES,(interval <= 1000 ? OMGraphic.LINETYPE_STRAIGHT : OMGraphic.LINETYPE_GREATCIRCLE));  poly.putAttribute(OMGraphic.APP_OBJECT,mgrsString);  return poly;}  }
class C{  public boolean isWatched(Wallet wallet){  try {    Script script=getScriptPubKey();    return wallet.isWatchedScript(script);  } catch (  ScriptException e) {    log.debug("Could not parse tx output script: {}",e.toString());    return false;  }}  }
class C{  private boolean advancePosition(){  if (returnEmptyTokens && !emptyReturned && (delimsChangedPosition == position || (position == -1 && strLength == delimsChangedPosition))) {    if (strLength == delimsChangedPosition) {      emptyReturned=true;      return true;    } else {      char c=text.charAt(position);      if (c <= maxDelimChar && (nontokenDelims != null && nontokenDelims.indexOf(c) != -1) || (tokenDelims != null && tokenDelims.indexOf(c) != -1)) {        emptyReturned=true;        return true;      }    }  }  while (position != -1) {    char c=text.charAt(position);    if (returnEmptyTokens && !emptyReturned && position > delimsChangedPosition) {      char c1=text.charAt(position - 1);      if (c <= maxDelimChar && c1 <= maxDelimChar && ((nontokenDelims != null && nontokenDelims.indexOf(c) != -1) || (tokenDelims != null && tokenDelims.indexOf(c) != -1)) && ((nontokenDelims != null && nontokenDelims.indexOf(c1) != -1) || (tokenDelims != null && tokenDelims.indexOf(c1) != -1))) {        emptyReturned=true;        return true;      }    }    int nextDelimiter=(position < strLength - 1 ? indexOfNextDelimiter(position + 1) : -1);    if (c > maxDelimChar || ((nontokenDelims == null || nontokenDelims.indexOf(c) == -1) && (tokenDelims == null || tokenDelims.indexOf(c) == -1))) {      position=nextDelimiter;      emptyReturned=false;      return true;    } else     if (tokenDelims != null && tokenDelims.indexOf(c) != -1) {      emptyReturned=false;      position=(position < strLength - 1 ? position + 1 : -1);      return true;    } else {      emptyReturned=false;      position=(position < strLength - 1 ? position + 1 : -1);      return false;    }  }  if (returnEmptyTokens && !emptyReturned && strLength > 0) {    char c=text.charAt(strLength - 1);    if (c <= maxDelimChar && (nontokenDelims != null && nontokenDelims.indexOf(c) != -1) || (tokenDelims != null && tokenDelims.indexOf(c) != -1)) {      emptyReturned=true;      return true;    }  }  return false;}  }
class C{  private Set<SingleModelObserver> createObserverCollection(Collection<T> models){  Set<SingleModelObserver> set=new HashSet<>();  for (  T model : models) {    if (model != null) {      set.add(new SingleModelObserver(model));    }  }  return set;}  }
class C{  public CFilterByNodesAction(final JTextField filterField){  super("Filter by node count");  m_filterField=filterField;}  }
class C{  public String applyMask(String mask,String value){  return (String)getMaskOrGetCursorIndex(mask,value,0,true);}  }
class C{  public int valueAt(int index){  return mValues[index];}  }
class C{  @Override public Long deserializeKey(ITuple tuple){  final byte[] key=tuple.getKeyBuffer().array();  final long id=KeyBuilder.decodeLong(key,0);  return id;}  }
class C{  private static int spinsFor(Node pred,boolean haveData){  if (MP && pred != null) {    if (pred.isData != haveData)     return FRONT_SPINS + CHAINED_SPINS;    if (pred.isMatched())     return FRONT_SPINS;    if (pred.waiter == null)     return CHAINED_SPINS;  }  return 0;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:50.453 -0500",hash_original_method="209578548F46DD00349D7E4CCC9857FB",hash_generated_method="891970310FD08D7AE18CC86CEEA187C7") private static void generateSnapshotHeader(String processName,PackageInfo packageInfo,PrintStream out){  out.println("Version: 3");  out.println("Process: " + processName);  if (packageInfo != null) {    out.println("Package: " + packageInfo.packageName);    out.println("Package-Version: " + packageInfo.versionCode);  }  out.println("Build: " + Build.FINGERPRINT);  out.println();}  }
class C{  @Override public void chartChanged(ChartChangeEvent event){  this.flag=true;}  }
class C{  public Statement on(Object column){  statement.append(" ON ").append(column);  return this;}  }
class C{  private void generateSiteId(){  try {    EnsurePath siteZkPath=new EnsurePath(ZkPath.SITES.toString());    siteZkPath.ensure(curator().getZookeeperClient());    Stat stat=curator().checkExists().forPath(ZkPath.SITES.toString());    long ctime=stat.getCtime();    int len=_connectString.length();    int ipHashHigh=_connectString.substring(0,len / 2).hashCode();    int ipHashLow=_connectString.substring(len / 2).hashCode();    long ipHash=(((long)ipHashHigh) << 32) | (((long)ipHashLow) & 0x00000000FFFFFFFFL);    siteId=createTimeUUID(ctime,ipHash);    _logger.info("Site UUID is {}",siteId);    if (!FileUtils.exists(siteIdFile)) {      String lockFile=FileUtils.generateTmpFileName(SITEID_LOCKFILE);      if (!FileUtils.exists(lockFile)) {        FileUtils.writePlainFile(lockFile,"".getBytes());      }      Path path=Paths.get(lockFile);      FileChannel fileChannel=FileChannel.open(path,StandardOpenOption.WRITE);      try (FileLock lock=fileChannel.lock()){        FileUtils.writePlainFile(siteIdFile,siteId.getBytes());        _logger.info("Write site id {} to file",siteId);      }     }  } catch (  Exception ex) {    _logger.error("Cannot generate site uuid",ex);    throw CoordinatorException.fatals.failedToBuildZKConnector(ex);  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public static Object toUUId(Object o) throws PageException {  String str=toString(o);  if (!Decision.isUUId(str))   throw new ExpressionException("can't cast [" + str + "] to uuid value");  return str;}  }
class C{  @Override public Stream<T> stream(TimeSeriesConverter<T> converter,SolrClient connection,SolrQuery query){  LOGGER.debug("Streaming data from solr using converter {}, Solr Client {}, and Solr Query {}",converter,connection,query);  SolrStreamingService<T> solrStreamingService=new SolrStreamingService<>(converter,query,connection,nrOfDocumentPerBatch);  return StreamSupport.stream(Spliterators.spliteratorUnknownSize(solrStreamingService,Spliterator.SIZED),false).filter(null).collect(groupingBy(null)).values().stream().map(null);}  }
class C{  static void applyScenario(final Network network){  existsInNetwork(network);  removeLinks(network);}  }
class C{  public Geo(GeoUri uri){  this.uri=uri;}  }
class C{  public PostingsHighlighter(int maxLength){  if (maxLength < 0 || maxLength == Integer.MAX_VALUE) {    throw new IllegalArgumentException("maxLength must be < Integer.MAX_VALUE");  }  this.maxLength=maxLength;}  }
class C{  public final int size(){  if (written < 0) {    written=Integer.MAX_VALUE;  }  return written;}  }
class C{  public void doMirror(boolean x,boolean y,boolean z){  for (  TexturedPolygon face : faces) {    PositionTextureVertex[] verts=face.vertexPositions;    for (int j=0; j < verts.length; j++) {      verts[j].vector3D.xCoord*=(x ? -1 : 1);      verts[j].vector3D.yCoord*=(y ? -1 : 1);      verts[j].vector3D.zCoord*=(z ? -1 : 1);    }    if (x ^ y ^ z)     face.flipFace();  }}  }
class C{  public Object next(){  if (atStart) {    atStart=false;    if (isAtomic(parent))     index++;    return parent;  }  if (subcollectionIterator != null) {    if (subcollectionIterator.hasNext()) {      return subcollectionIterator.next();    } else {      subcollectionIterator=null;    }  }  if (index >= max) {    throw new NoSuchElementException();  }  Geometry obj=parent.getGeometryN(index++);  if (obj instanceof GeometryCollection) {    subcollectionIterator=new GeometryCollectionIterator((GeometryCollection)obj);    return subcollectionIterator.next();  }  return obj;}  }
class C{  public static FileStore open(DataHandler handler,String name,String mode){  return open(handler,name,mode,null,null,0);}  }
class C{  public void onFileDeleted(Path file){}  }
class C{  protected void onDateUnselected(CalendarDay date){  dispatchOnDateSelected(date,false);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:24:54.446 -0400",hash_original_method="F49684A75109FDCC32824B1251106CA5",hash_generated_method="B334C1BCE41B7EA41FEBDF2AFAE499EF") public static boolean startFilteringMulticastV4Packets(){  double taintDouble=0;  return ((taintDouble) == 1);}  }
class C{  public Analysis(ProcessingEnvironment env,T transfer){  this(env);  this.transferFunction=transfer;}  }
class C{  public int[] recurse(Orange orange,int[] message,int level) throws RemoteException {  String threadName=Thread.currentThread().getName();  logger.log(Level.FINEST,threadName + ": " + toString()+ ".recurse(message["+ message.length+ "], "+ level+ "): BEGIN");  int[] response=orange.recurse(this,message,level - 1);  logger.log(Level.FINEST,threadName + ": " + toString()+ ".recurse(message["+ message.length+ "], "+ level+ "): END");  return response;}  }
class C{  public void disableWhenHorizontalMove(boolean disable){  mDisableWhenHorizontalMove=disable;}  }
class C{  public void run(final Network network,double thresholdLength){  run(network,thresholdLength,thresholdExceeded.BOTH);  run(network,thresholdLength,thresholdExceeded.EITHER);}  }
class C{  private boolean parseOpenBracket(){  int startIndex=index;  index++;  Text node=appendText("[");  addBracket(Bracket.link(node,startIndex,lastBracket,lastDelimiter));  return true;}  }
class C{  @Override public void clearUndo(){  m_UndoList=new Vector<File>();}  }
class C{  public final void mulTransposeBoth(GMatrix m1,GMatrix m2){  int i, j, k;  if (m1.nRow != m2.nCol || nRow != m1.nCol || nCol != m2.nRow) {    throw new MatrixSizeException();  }  if (m1 == this || m2 == this) {    double[][] tmp=new double[nRow][nCol];    for (i=0; i < nRow; i++) {      for (j=0; j < nCol; j++) {        tmp[i][j]=0.0;        for (k=0; k < m1.nRow; k++) {          tmp[i][j]+=m1.values[k][i] * m2.values[j][k];        }      }    }    values=tmp;  } else {    for (i=0; i < nRow; i++) {      for (j=0; j < nCol; j++) {        values[i][j]=0.0;        for (k=0; k < m1.nRow; k++) {          values[i][j]+=m1.values[k][i] * m2.values[j][k];        }      }    }  }}  }
class C{  public void SetElementText(String xPathExpression,String value){  Element node;  try {    node=SetElementText(xPathExpression,0);    node.setText(value);  } catch (  Exception ex) {    LOG.error("Error in handler: " + ex.getMessage(),ex);  }}  }
class C{  public WebSocketFrame(InputStream input) throws IOException {  byte firstByte=(byte)input.read();  setFinAndOpCode(firstByte);  if (this.opcode == 2) {    byte maskLengthByte=(byte)input.read();    boolean masked=((maskLengthByte & 0x80) != 0);    int payloadLength=(byte)(0x7F & maskLengthByte);    int byteCount=0;    if (payloadLength == 0X7F) {      byteCount=8;    } else     if (payloadLength == 0X7E) {      byteCount=2;    }    if (byteCount > 0) {      payloadLength=0;    }    while (--byteCount >= 0) {      maskLengthByte=(byte)input.read();      payloadLength|=(maskLengthByte & 0xFF) << (8 * byteCount);    }    byte maskingKey[]=null;    if (masked) {      maskingKey=new byte[4];      input.read(maskingKey,0,4);    }    this.payload=new byte[payloadLength];    int offsetIndex=0;    int tempLength=payloadLength;    int bytesRead=0;    while (offsetIndex != payloadLength) {      bytesRead=input.read(this.payload,offsetIndex,tempLength);      offsetIndex+=bytesRead;      tempLength-=bytesRead;    }    if (masked) {      for (int i=0; i < this.payload.length; i++) {        this.payload[i]^=maskingKey[i % 4];      }    }    return;  } else   if (this.opcode == 8) {    closeFlag=true;  } else {    throw new IOException("Invalid Frame: Opcode: " + this.opcode);  }}  }
class C{  @SuppressWarnings("unchecked") public boolean exists(S targetChild){  if (equals(targetChild)) {    return true;  }  for (  S child : children) {    if (child.exists(targetChild)) {      return true;    }  }  return false;}  }
class C{  public ExecutionState createExecutionState(){  ExecutionStateImpl executionState=new ExecutionStateImpl();  return executionState;}  }
class C{  protected void sendMomentaryFunctionGroup4(){  DCCppMessage msg=DCCppMessage.makeFunctionGroup4SetMomMsg(this.getDccAddress(),f13Momentary,f14Momentary,f15Momentary,f16Momentary,f17Momentary,f18Momentary,f19Momentary,f20Momentary);  queueMessage(msg,THROTTLEIDLE);}  }
class C{  @SuppressWarnings("unchecked") protected static int doGet() throws ReplicatorException, InterruptedException {  List<ReplDBMSHeader> headers=admin.get(datasource);  if (headers == null) {    printlnerr("Position headers have not been retrieved");    return 6;  } else {    JSONArray jsonArray=new JSONArray();    for (    ReplDBMSHeader header : headers) {      JSONObject jsonHeader=new JSONObject();      jsonHeader.put("applied_latency",header.getAppliedLatency());      jsonHeader.put("epoch_number",header.getEpochNumber());      jsonHeader.put("eventid",header.getEventId());      jsonHeader.put("extract_timestamp",toString(header.getExtractedTstamp()));      jsonHeader.put("fragno",header.getFragno());      jsonHeader.put("last_frag",header.getLastFrag());      jsonHeader.put("seqno",header.getSeqno());      jsonHeader.put("shard_id",header.getShardId());      jsonHeader.put("source_id",header.getSourceId());      jsonHeader.put("task_id",header.getTaskId());      jsonHeader.put("update_timestamp",toString(header.getUpdateTstamp()));      jsonArray.add(jsonHeader);    }    String json=jsonArray.toJSONString();    logger.info("Service \"" + service + "\" datasource \""+ datasource+ "\" position retrieved:");    logger.info(json);    DsctlCtrl.println(json);    return 0;  }}  }
class C{  @Override public long transferFrom(ReadableByteChannel src,long position,long count) throws IOException {  throw new NonWritableChannelException();}  }
class C{  private void replaceWithSystemProps(Properties properties){  properties.putAll(sysProperty.getProperties());}  }
class C{  protected int countMatchesInString(final String stringToSearch,final String stringToCount){  assert (stringToSearch != null);  assert (stringToCount != null);  int length=stringToSearch.length();  int count=0;  for (int i=0; i < length; i++) {    if (stringToSearch.substring(i).startsWith(stringToCount)) {      count++;    }  }  return count;}  }
class C{  public CSVParser(char separator,char quotechar,char escape,boolean strictQuotes){  this(separator,quotechar,escape,strictQuotes,DEFAULT_IGNORE_LEADING_WHITESPACE);}  }
class C{  @Override public boolean canInsertItem(int aIndex,ItemStack aStack,int aSide){  return canAccessData() && (mRunningThroughTick || !mInputDisabled) && getCoverBehaviorAtSide((byte)aSide).letsItemsIn((byte)aSide,getCoverIDAtSide((byte)aSide),getCoverDataAtSide((byte)aSide),aIndex,this)&& mMetaTileEntity.canInsertItem(aIndex,aStack,aSide);}  }
class C{  public double measureNumLeaves(){  return m_TreeConstructor.getNumLeaves();}  }
class C{  public ModbusSerialTransaction(){}  }
class C{  public ObjectInputStream deserialize(String className,ObjectName loaderName,byte[] data,ClassLoader loader) throws InstanceNotFoundException, OperationsException, ReflectionException {  if (data == null) {    throw new RuntimeOperationsException(new IllegalArgumentException(),"Null data passed in parameter");  }  if (data.length == 0) {    throw new RuntimeOperationsException(new IllegalArgumentException(),"Empty data passed in parameter");  }  if (className == null) {    throw new RuntimeOperationsException(new IllegalArgumentException(),"Null className passed in parameter");  }  ReflectUtil.checkPackageAccess(className);  Class<?> theClass;  if (loaderName == null) {    theClass=findClass(className,loader);  } else {    try {      ClassLoader instance=null;      instance=getClassLoader(loaderName);      if (instance == null)       throw new ClassNotFoundException(className);      theClass=Class.forName(className,false,instance);    } catch (    ClassNotFoundException e) {      throw new ReflectionException(e,"The MBean class could not be loaded by the " + loaderName.toString() + " class loader");    }  }  ByteArrayInputStream bIn;  ObjectInputStream objIn;  bIn=new ByteArrayInputStream(data);  try {    objIn=new ObjectInputStreamWithLoader(bIn,theClass.getClassLoader());  } catch (  IOException e) {    throw new OperationsException("An IOException occurred trying to de-serialize the data");  }  return objIn;}  }
class C{  public static String flatten(String json){  return new JsonFlattener(json).flatten();}  }
class C{  public final void actionInsert() throws BasicException {  saveData();  if (canInsertData()) {    m_iState=ST_INSERT;    m_editorrecord.writeValueInsert();    m_Dirty.setDirty(false);    fireStateUpdate();  }}  }
class C{  public final String toString(){  StringBuffer buf=new StringBuffer();  this.toString(buf,this.getVisited());  return buf.toString();}  }
class C{  public static List<Long> tickList(GeoTimeSerie gts){  List<Long> ticks=new ArrayList<Long>(gts.values);  ticks.addAll(Arrays.asList(ArrayUtils.toObject(Arrays.copyOf(gts.ticks,gts.values))));  return ticks;}  }
class C{  public Mounted(Entity entity,EquipmentType type){  this.entity=entity;  this.type=type;  typeName=type.getInternalName();  if (type instanceof AmmoType) {    shotsLeft=((AmmoType)type).getShots();  }  if ((type instanceof MiscType) && type.hasFlag(MiscType.F_MINE)) {    mineType=MINE_CONVENTIONAL;    shotsLeft=1;  }  if ((type instanceof MiscType) && type.hasFlag(MiscType.F_VEHICLE_MINE_DISPENSER)) {    mineType=MINE_CONVENTIONAL;    shotsLeft=2;  }  if ((type instanceof MiscType) && type.hasFlag(MiscType.F_SENSOR_DISPENSER)) {    setShotsLeft(30);  }  if ((type instanceof MiscType) && ((((MiscType)type).isShield() || type.hasFlag(MiscType.F_MODULAR_ARMOR)))) {    MiscType shield=(MiscType)type;    baseDamageAbsorptionRate=shield.baseDamageAbsorptionRate;    baseDamageCapacity=shield.baseDamageCapacity;    damageTaken=shield.damageTaken;  }  if ((type instanceof MiscType) && type.hasFlag(MiscType.F_MINESWEEPER)) {    armorValue=30;  }  quirks.initialize();}  }
class C{  public boolean isFullScreen(){  return getBooleanProperty(PROPERTY_FULL_SCREEN);}  }
class C{  public final void transform(Vec4D vec,Vec4D vecOut){  float x, y, z;  x=m00 * vec.x + m01 * vec.y + m02 * vec.z + m03 * vec.w;  y=m10 * vec.x + m11 * vec.y + m12 * vec.z + m13 * vec.w;  z=m20 * vec.x + m21 * vec.y + m22 * vec.z + m23 * vec.w;  vecOut.w=m30 * vec.x + m31 * vec.y + m32 * vec.z + m33 * vec.w;  vecOut.x=x;  vecOut.y=y;  vecOut.z=z;}  }
class C{  public void zoneNameVsan(String zoneName,Integer vsanId,boolean no) throws NetworkDeviceControllerException {  if (!inConfigMode) {    throw NetworkDeviceControllerException.exceptions.mdsDeviceNotInConfigMode();  }  if (lastPrompt != SSHPrompt.MDS_CONFIG) {    throw NetworkDeviceControllerException.exceptions.mdsUnexpectedLastPrompt(lastPrompt.toString(),SSHPrompt.MDS_CONFIG.toString());  }  String noString=no ? MDSDialogProperties.getString("MDSDialog.zoneNameVsan.no.cmd") : "";  SSHPrompt[] prompts={SSHPrompt.MDS_CONFIG_ZONE,SSHPrompt.MDS_CONFIG};  SSHPrompt[] noPrompts={SSHPrompt.MDS_CONFIG};  StringBuilder buf=new StringBuilder();  boolean retryNeeded=true;  for (int retryCount=0; retryCount < sessionLockRetryMax && retryNeeded; retryCount++) {    String payload=MessageFormat.format(MDSDialogProperties.getString("MDSDialog.zoneNameVsan.cmd"),zoneName,vsanId.toString(),noString);    lastPrompt=sendWaitFor(payload,defaultTimeout,(no ? noPrompts : prompts),buf);    String[] lines=getLines(buf);    retryNeeded=checkForEnhancedZoneSession(lines,retryCount);  }  if ((no == false) && (lastPrompt != SSHPrompt.MDS_CONFIG_ZONE)) {    throw NetworkDeviceControllerException.exceptions.mdsUnexpectedLastPrompt(lastPrompt.toString(),SSHPrompt.MDS_CONFIG_ZONE.toString());  }}  }
class C{  public void dup2X1(){  mv.visitInsn(Opcodes.DUP2_X1);}  }
class C{  public ContourPlot(){  this(null,null,null,null);}  }
class C{  private String validateSuperDevModeLinkerExists(IJavaProject javaProject,ILaunchConfiguration configuration){  try {    List<String> modules=GWTLaunchConfigurationWorkingCopy.getEntryPointModules(configuration);    if (modules == null || modules.isEmpty()) {      return ERROR_NO_LINKER;    }    List<String> errors=new ArrayList<String>();    for (    String module : modules) {      IModule imodule=ModuleUtils.findModule(javaProject,module,false);      if (imodule != null) {        String error=validateModule(imodule,javaProject,configuration);        if (error != null) {          errors.add(error);        }      }    }    if (errors.size() > 0) {      return StringUtilities.join(errors,", ");    }  } catch (  CoreException e) {    return ERROR_NO_LINKER;  }  return null;}  }
class C{  private void initializePopulation2D(int populationSize){  population=new ArrayList<Individual>(populationSize);  population.add(new Individual(new double[]{0.0,1.0}));  population.add(new Individual(new double[]{1.0,0.0}));  for (int i=1; i < populationSize - 1; i++) {    double a=i / (double)(populationSize - 1);    population.add(new Individual(new double[]{a,1 - a}));  }}  }
class C{  public ModifierValue use(final ModifierValue value,final double modValue){  return this.action.use(value,modValue);}  }
class C{  public VcfReader(BufferedReader in) throws IOException {  mIn=new BrLineReader(in);  try {    mHeader=parseHeader(mIn);  } catch (  IOException|RuntimeException e) {    mIn.close();    throw e;  }  mNumSamples=mHeader.getNumberOfSamples();  setNext();}  }
class C{  public void notifyWorldAboutChanges(){  if (zone != null) {    zone.modify(this);  }}  }
class C{  public String consumeTo(String seq){  int offset=queue.indexOf(seq,pos);  if (offset != -1) {    String consumed=queue.substring(pos,offset);    pos+=consumed.length();    return consumed;  } else {    return remainder();  }}  }
class C{  public static int compareField(JsonObject jsonObj1,JsonObject jsonObj2,String field){  if (SIGNATURE_FIELDS.contains(field)) {    String val1=getSignatureFieldValueAsString(jsonObj1,field);    String val2=getSignatureFieldValueAsString(jsonObj2,field);    if (val1 != null && val2 != null)     return val1.compareTo(val2);    return 0;  }  JsonElement val1=jsonObj1.get(field);  JsonElement val2=jsonObj2.get(field);  if (val1 != null && val2 != null) {    if (val1.isJsonPrimitive() && val2.isJsonPrimitive()) {      JsonPrimitive primVal1=(JsonPrimitive)val1;      JsonPrimitive primVal2=(JsonPrimitive)val2;      if (primVal1.isNumber() && primVal2.isNumber()) {        int int1=primVal1.getAsInt();        int int2=primVal2.getAsInt();        return int2 - int1;      }    }    String str1=val1.getAsString();    String str2=val2.getAsString();    return str1.compareTo(str2);  }  return 0;}  }
class C{  public DistributedQueue<Integer> createStatisticDistQueue(final int serial,final int threadsNumber){  try {    CoordinatorClientImpl client=null;    client=(CoordinatorClientImpl)connectClient();    ItemStatisticConsumer consumer=new ItemStatisticConsumer();    consumer.setSerial(serial);    IntegerSerializer serializer=new IntegerSerializer();    DistributedQueue<Integer> queue=client.getQueue(QUEUE_NAME_4,consumer,serializer,threadsNumber);    statisticDistQueueList.add(queue);    return queue;  } catch (  Exception e) {    _logger.error("Failed to create statistic distribution queue.",e);    return null;  }}  }
class C{  public void testGetF8(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF8();  assertEquals(expResult,result);}  }
class C{  public static void main(String[] argv){  runClassifier(new LogitBoost(),argv);}  }
class C{  public void addMember(User user){  members.put(user.getId(),user);}  }
class C{  private List parseElements(Class type,String value){  value=value.trim();  if (value.startsWith("{") && value.endsWith("}")) {    value=value.substring(1,value.length() - 1);  }  try {    StreamTokenizer st=new StreamTokenizer(new StringReader(value));    st.whitespaceChars(delimiter,delimiter);    st.ordinaryChars('0','9');    st.wordChars('0','9');    for (int i=0; i < allowedChars.length; i++) {      st.ordinaryChars(allowedChars[i],allowedChars[i]);      st.wordChars(allowedChars[i],allowedChars[i]);    }    List list=null;    while (true) {      int ttype=st.nextToken();      if ((ttype == StreamTokenizer.TT_WORD) || (ttype > 0)) {        if (st.sval != null) {          if (list == null) {            list=new ArrayList();          }          list.add(st.sval);        }      } else       if (ttype == StreamTokenizer.TT_EOF) {        break;      } else {        throw new ConversionException("Encountered token of type " + ttype + " parsing elements to '"+ toString(type)+ ".");      }    }    if (list == null) {      list=Collections.EMPTY_LIST;    }    return (list);  } catch (  IOException e) {    throw new ConversionException("Error converting from String to '" + toString(type) + "': "+ e.getMessage(),e);  }}  }
class C{  private Item newString(final String value){  key2.set(STR,value,null,null);  Item result=get(key2);  if (result == null) {    pool.put12(STR,newUTF8(value));    result=new Item(index++,key2);    put(result);  }  return result;}  }
class C{  public BeanPropertyWriter unwrappingWriter(){  return new UnwrappingBeanPropertyWriter(this);}  }
class C{  private void connectSocket(int connectTimeout,int readTimeout,int writeTimeout,ConnectionSpecSelector connectionSpecSelector) throws IOException {  rawSocket.setSoTimeout(readTimeout);  try {    Platform.get().connectSocket(rawSocket,route.socketAddress(),connectTimeout);  } catch (  ConnectException e) {    throw new ConnectException("Failed to connect to " + route.socketAddress());  }  source=Okio.buffer(Okio.source(rawSocket));  sink=Okio.buffer(Okio.sink(rawSocket));  if (route.address().sslSocketFactory() != null) {    connectTls(readTimeout,writeTimeout,connectionSpecSelector);  } else {    protocol=Protocol.HTTP_1_1;    socket=rawSocket;  }  if (protocol == Protocol.SPDY_3 || protocol == Protocol.HTTP_2) {    socket.setSoTimeout(0);    FramedConnection framedConnection=new FramedConnection.Builder(true).socket(socket,route.address().url().host(),source,sink).protocol(protocol).build();    framedConnection.sendConnectionPreface();    this.framedConnection=framedConnection;  }}  }
class C{  @Interruptible private LinearSpaceDriver newLinearSpaceDriver(String name,CopySpace space,boolean mainSpace){  return new LinearSpaceDriver(GCspy.server,name,space,Options.gcspyTileSize.getValue(),mainSpace);}  }
class C{  public boolean isLookAtLineVisible(){  return (lookAtLine.getSceneHints().getCullHint() != CullHint.Always);}  }
class C{  @Override public long toMillisecond(long timelineValue){  Segment result=new Segment(this.startTime + timelineValue + (timelineValue / this.segmentsIncludedSize) * this.segmentsExcludedSize);  long lastIndex=this.startTime;  while (lastIndex <= result.segmentStart) {    long exceptionSegmentCount;    while ((exceptionSegmentCount=getExceptionSegmentCount(lastIndex,(result.millisecond / this.segmentSize) * this.segmentSize - 1)) > 0) {      lastIndex=result.segmentStart;      for (int i=0; i < exceptionSegmentCount; i++) {        do {          result.inc();        } while (result.inExcludeSegments());      }    }    lastIndex=result.segmentStart;    while (result.inExceptionSegments() || result.inExcludeSegments()) {      result.inc();      lastIndex+=this.segmentSize;    }    lastIndex++;  }  return getTimeFromLong(result.millisecond);}  }
class C{  public static void i(String tag,String s){  if (LDJSLOG.INFO >= LOGLEVEL)   Log.i(tag,s);}  }
class C{  public void addToken(Segment segment,int start,int end,int tokenType,int startOffset){switch (tokenType) {case Token.IDENTIFIER:    int value=wordsToHighlight.get(segment,start,end);  if (value != -1)   tokenType=value;break;}super.addToken(segment,start,end,tokenType,startOffset);}  }
class C{  private static String canonizeTypeString(String str){  String canon=str.trim();  canon=canon.replaceAll("\\s+"," ");  canon=canon.replaceAll("\\[\\s+","[");  canon=canon.replaceAll("\\s+\\]","]");  canon=canon.replaceAll("<\\s+","<");  canon=canon.replaceAll("\\s+>",">");  canon=canon.replaceAll("[^\\<]*\\.(?=\\w)","");  return canon;}  }
class C{  public ReadGraph find(Object map) throws Exception {  ReadGraph read=fetch(map);  if (read != null) {    return read;  }  return create(map);}  }
class C{  protected MapLoader(){  chooser=new JFileChooser();  for (int i=0; i < chooser.getComponentCount(); i++) {    Component component=chooser.getComponent(i);    if (component instanceof JComponent) {      ((JComponent)component).setBackground(GuiBase.getBackgroundColor());    }  }  FileNameExtensionFilter filter=new FileNameExtensionFilter("Map (*.svg)","svg");  chooser.setFileFilter(filter);  GuiBase.initMessageBox();}  }
class C{  public Class<?>[] parameterArray(){  return ptypes.clone();}  }
class C{  CacheAndRegionListenerImpl(AdminDistributedSystemJmxImpl adminDSResource){  this.adminDS=adminDSResource;}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  private void snapshot(final IndexShard indexShard,final SnapshotId snapshotId,final IndexShardSnapshotStatus snapshotStatus){  IndexShardRepository indexShardRepository=snapshotsService.getRepositoriesService().indexShardRepository(snapshotId.getRepository());  ShardId shardId=indexShard.shardId();  if (!indexShard.routingEntry().primary()) {    throw new IndexShardSnapshotFailedException(shardId,"snapshot should be performed only on primary");  }  if (indexShard.routingEntry().relocating()) {    throw new IndexShardSnapshotFailedException(shardId,"cannot snapshot while relocating");  }  if (indexShard.state() == IndexShardState.CREATED || indexShard.state() == IndexShardState.RECOVERING) {    throw new IndexShardSnapshotFailedException(shardId,"shard didn't fully recover yet");  }  try {    SnapshotIndexCommit snapshotIndexCommit=indexShard.snapshotIndex(true);    try {      indexShardRepository.snapshot(snapshotId,shardId,snapshotIndexCommit,snapshotStatus);      if (logger.isDebugEnabled()) {        StringBuilder sb=new StringBuilder();        sb.append("snapshot (").append(snapshotId.getSnapshot()).append(") completed to ").append(indexShardRepository).append(", took [").append(TimeValue.timeValueMillis(snapshotStatus.time())).append("]\n");        sb.append("    index    : version [").append(snapshotStatus.indexVersion()).append("], number_of_files [").append(snapshotStatus.numberOfFiles()).append("] with total_size [").append(new ByteSizeValue(snapshotStatus.totalSize())).append("]\n");        logger.debug(sb.toString());      }    }  finally {      snapshotIndexCommit.close();    }  } catch (  SnapshotFailedEngineException e) {    throw e;  }catch (  IndexShardSnapshotFailedException e) {    throw e;  }catch (  Throwable e) {    throw new IndexShardSnapshotFailedException(shardId,"Failed to snapshot",e);  }}  }
class C{  public MySQLAuthenticationProviderModule(MySQLEnvironment environment) throws GuacamoleException {  myBatisProperties.setProperty("mybatis.environment.id","guacamole");  myBatisProperties.setProperty("JDBC.host",environment.getMySQLHostname());  myBatisProperties.setProperty("JDBC.port",String.valueOf(environment.getMySQLPort()));  myBatisProperties.setProperty("JDBC.schema",environment.getMySQLDatabase());  myBatisProperties.setProperty("JDBC.username",environment.getMySQLUsername());  myBatisProperties.setProperty("JDBC.password",environment.getMySQLPassword());  myBatisProperties.setProperty("JDBC.autoCommit","false");  myBatisProperties.setProperty("mybatis.pooled.pingEnabled","true");  myBatisProperties.setProperty("mybatis.pooled.pingQuery","SELECT 1");  driverProperties.setProperty("characterEncoding","UTF-8");  driverProperties.setProperty("allowMultiQueries","true");}  }
class C{  protected void restoreState(){  likelihoodKnown=storedLikelihoodKnown;  logLikelihood=storedLogLikelihood;}  }
class C{  public Loader(){}  }
class C{  public boolean hasPort(){  return port >= 0;}  }
class C{  public List<DiffRow> generateDiffRows(List<String> original,List<String> revised){  return generateDiffRows(original,revised,DiffUtils.diff(original,revised,equalizer));}  }
class C{  public WildFlyRuntimeConfigurationCapability(){  this.propertySupportMap.remove(JBossPropertySet.JBOSS_MANAGEMENT_NATIVE_PORT);  this.propertySupportMap.put(JBossPropertySet.JBOSS_MANAGEMENT_HTTP_PORT,Boolean.TRUE);}  }
class C{  protected ReturnStatementImpl(){  super();}  }
class C{  private static Protocol lazyRegisterProtocol(final String id) throws IllegalStateException {  if ("http".equals(id)) {    final Protocol http=new Protocol("http",DefaultProtocolSocketFactory.getSocketFactory(),80);    Protocol.registerProtocol("http",http);    return http;  }  if ("https".equals(id)) {    final Protocol https=new Protocol("https",SSLProtocolSocketFactory.getSocketFactory(),443);    Protocol.registerProtocol("https",https);    return https;  }  throw new IllegalStateException("unsupported protocol: '" + id + "'");}  }
class C{  private int tryUpdate(){  if (!transactional) {    session.commit(true);  }  Database db=session.getDatabase();  Table table=getSchema().findTableOrView(session,tableName);  if (table == null) {    if (ifTableExists) {      return 0;    }    throw DbException.get(ErrorCode.TABLE_OR_VIEW_NOT_FOUND_1,tableName);  }  if (getSchema().findConstraint(session,constraintName) != null) {    if (ifNotExists) {      return 0;    }    throw DbException.get(ErrorCode.CONSTRAINT_ALREADY_EXISTS_1,constraintName);  }  session.getUser().checkRight(table,Right.ALL);  db.lockMeta(session);  table.lock(session,true,true);  Constraint constraint;switch (type) {case CommandInterface.ALTER_TABLE_ADD_CONSTRAINT_PRIMARY_KEY:{      IndexColumn.mapColumns(indexColumns,table);      index=table.findPrimaryKey();      ArrayList<Constraint> constraints=table.getConstraints();      for (int i=0; constraints != null && i < constraints.size(); i++) {        Constraint c=constraints.get(i);        if (Constraint.PRIMARY_KEY.equals(c.getConstraintType())) {          throw DbException.get(ErrorCode.SECOND_PRIMARY_KEY);        }      }      if (index != null) {        IndexColumn[] pkCols=index.getIndexColumns();        if (pkCols.length != indexColumns.length) {          throw DbException.get(ErrorCode.SECOND_PRIMARY_KEY);        }        for (int i=0; i < pkCols.length; i++) {          if (pkCols[i].column != indexColumns[i].column) {            throw DbException.get(ErrorCode.SECOND_PRIMARY_KEY);          }        }      }      if (index == null) {        IndexType indexType=IndexType.createPrimaryKey(table.isPersistIndexes(),primaryKeyHash);        String indexName=table.getSchema().getUniqueIndexName(session,table,Constants.PREFIX_PRIMARY_KEY);        int id=getObjectId();        try {          index=table.addIndex(session,indexName,id,indexColumns,indexType,true,null);        }  finally {          getSchema().freeUniqueName(indexName);        }      }      index.getIndexType().setBelongsToConstraint(true);      int constraintId=getObjectId();      String name=generateConstraintName(table);      ConstraintUnique pk=new ConstraintUnique(getSchema(),constraintId,name,table,true);      pk.setColumns(indexColumns);      pk.setIndex(index,true);      constraint=pk;      break;    }case CommandInterface.ALTER_TABLE_ADD_CONSTRAINT_UNIQUE:{    IndexColumn.mapColumns(indexColumns,table);    boolean isOwner=false;    if (index != null && canUseUniqueIndex(index,table,indexColumns)) {      isOwner=true;      index.getIndexType().setBelongsToConstraint(true);    } else {      index=getUniqueIndex(table,indexColumns);      if (index == null) {        index=createIndex(table,indexColumns,true);        isOwner=true;      }    }    int id=getObjectId();    String name=generateConstraintName(table);    ConstraintUnique unique=new ConstraintUnique(getSchema(),id,name,table,false);    unique.setColumns(indexColumns);    unique.setIndex(index,isOwner);    constraint=unique;    break;  }case CommandInterface.ALTER_TABLE_ADD_CONSTRAINT_CHECK:{  int id=getObjectId();  String name=generateConstraintName(table);  ConstraintCheck check=new ConstraintCheck(getSchema(),id,name,table);  TableFilter filter=new TableFilter(session,table,null,false,null,0);  checkExpression.mapColumns(filter,0);  checkExpression=checkExpression.optimize(session);  check.setExpression(checkExpression);  check.setTableFilter(filter);  constraint=check;  if (checkExisting) {    check.checkExistingData(session);  }  break;}case CommandInterface.ALTER_TABLE_ADD_CONSTRAINT_REFERENTIAL:{Table refTable=refSchema.getTableOrView(session,refTableName);session.getUser().checkRight(refTable,Right.ALL);if (!refTable.canReference()) {  throw DbException.getUnsupportedException("Reference " + refTable.getSQL());}boolean isOwner=false;IndexColumn.mapColumns(indexColumns,table);if (index != null && canUseIndex(index,table,indexColumns,false)) {  isOwner=true;  index.getIndexType().setBelongsToConstraint(true);} else {  index=getIndex(table,indexColumns,true);  if (index == null) {    index=createIndex(table,indexColumns,false);    isOwner=true;  }}if (refIndexColumns == null) {  Index refIdx=refTable.getPrimaryKey();  refIndexColumns=refIdx.getIndexColumns();} else {  IndexColumn.mapColumns(refIndexColumns,refTable);}if (refIndexColumns.length != indexColumns.length) {  throw DbException.get(ErrorCode.COLUMN_COUNT_DOES_NOT_MATCH);}boolean isRefOwner=false;if (refIndex != null && refIndex.getTable() == refTable && canUseIndex(refIndex,refTable,refIndexColumns,false)) {  isRefOwner=true;  refIndex.getIndexType().setBelongsToConstraint(true);} else {  refIndex=null;}if (refIndex == null) {  refIndex=getIndex(refTable,refIndexColumns,false);  if (refIndex == null) {    refIndex=createIndex(refTable,refIndexColumns,true);    isRefOwner=true;  }}int id=getObjectId();String name=generateConstraintName(table);ConstraintReferential ref=new ConstraintReferential(getSchema(),id,name,table);ref.setColumns(indexColumns);ref.setIndex(index,isOwner);ref.setRefTable(refTable);ref.setRefColumns(refIndexColumns);ref.setRefIndex(refIndex,isRefOwner);if (checkExisting) {  ref.checkExistingData(session);}constraint=ref;refTable.addConstraint(constraint);ref.setDeleteAction(deleteAction);ref.setUpdateAction(updateAction);break;}default :throw DbException.throwInternalError("type=" + type);}constraint.setComment(comment);if (table.isTemporary() && !table.isGlobalTemporary()) {session.addLocalTempTableConstraint(constraint);} else {db.addSchemaObject(session,constraint);}table.addConstraint(constraint);return 0;}  }
class C{  public ModelMBeanNotificationInfo(String[] notifTypes,String name,String description,Descriptor descriptor){  super(notifTypes,name,description);  if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {    MODELMBEAN_LOGGER.logp(Level.FINER,ModelMBeanNotificationInfo.class.getName(),"ModelMBeanNotificationInfo","Entry");  }  notificationDescriptor=validDescriptor(descriptor);}  }
class C{  private void onEmailFlew(){  String email=getString(R.string.support_email);  String text=((TextView)findViewById(R.id.email_msg_box)).getText().toString();  String subject=((TextView)findViewById(R.id.email_subject_box)).getText().toString();  Intent intent=getIntentForEmail(email,subject,text);  if (getCallingActivity() == null) {    startActivity(intent);  } else {    setResult(RESULT_OK,intent);  }  finish();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode19.class,args);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.TRACE_CONDITION___LHS_1:    setLHS_1(LHS_1_EDEFAULT);  return;case UmplePackage.TRACE_CONDITION___CONDITION_RHS_1:getConditionRHS_1().clear();return;}super.eUnset(featureID);}  }
class C{  private void suspectSessions(long exclude,long timestamp){  for (  ServerSessionContext session : executor.context().sessions().sessions.values()) {    if (session.id() != exclude && timestamp - session.timeout() > session.getTimestamp()) {      session.suspect();    }  }}  }
class C{  public void addReceivingAddress(WalletAddressBookData receivingAddress,boolean checkAlreadyPresent){  if (receivingAddress == null || receivingAddress.getAddress() == null) {    return;  }  boolean justUpdateLabel=false;  if (checkAlreadyPresent) {    for (    WalletAddressBookData addressBookData : receivingAddresses) {      if (addressBookData.getAddress().equals(receivingAddress.getAddress())) {        addressBookData.setLabel(receivingAddress.getLabel());        justUpdateLabel=true;        break;      }    }  }  boolean addressMatchesKey=false;  if (wallet != null) {    for (    ECKey key : wallet.getKeys()) {      if (receivingAddress.getAddress().equals(key.toAddress(MultiBit.getBitcoinController().getModel().getNetworkParameters()).toString())) {        addressMatchesKey=true;        break;      }    }  }  if (!justUpdateLabel && (wallet == null || addressMatchesKey)) {    receivingAddresses.add(receivingAddress);  }}  }
class C{  private boolean acceptSequence(char... sequence){  for (int i=0; i < sequence.length; i++) {    if (data[index + i] != sequence[i])     return false;  }  return true;}  }
class C{  @Override public ServiceRefAmp session(String name){  String address="session:///" + name + "/";  return sessionImpl(address);}  }
class C{  private PlatformCacheExtension extension(int id){  if (exts != null && id < exts.length) {    PlatformCacheExtension ext=exts[id];    if (ext != null)     return ext;  }  throw new IgniteException("Platform cache extension is not registered [id=" + id + ']');}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  SeriesInfo si=getSeriesInfo(stack);  return si == null ? "" : si.getFinaleDate();}  }
class C{  private void buildLDAPConfigurations(OMElement embeddedLDAP) throws EmbeddingLDAPException {  Map<String,String> propertyMap=getChildPropertyElements(embeddedLDAP);  ldapConfiguration=new LDAPConfiguration();  buildConnectionPassword(propertyMap);  String booleanString;  if ((booleanString=propertyMap.get("accessControlEnabled")) != null) {    ldapConfiguration.setAccessControlOn(Boolean.parseBoolean(booleanString));  }  if ((booleanString=propertyMap.get("allowAnonymousAccess")) != null) {    ldapConfiguration.setAllowAnonymousAccess(Boolean.parseBoolean(booleanString));  }  if ((booleanString=propertyMap.get("changedLogEnabled")) != null) {    ldapConfiguration.setChangeLogEnabled(Boolean.parseBoolean(booleanString));  }  if ((booleanString=propertyMap.get("denormalizeOpAttrsEnabled")) != null) {    ldapConfiguration.setDeNormalizedAttributesEnabled(Boolean.parseBoolean(booleanString));  }  String enableInfo=propertyMap.get("enable");  if (("true").equals(enableInfo)) {    ldapConfiguration.setEnable(true);  } else {    ldapConfiguration.setEnable(false);  }  ldapConfiguration.setInstanceId(propertyMap.get("instanceId"));  ldapConfiguration.setLdapPort(Integer.parseInt(propertyMap.get("port")));  ldapConfiguration.setWorkingDirectory(propertyMap.get("workingDirectory"));  ldapConfiguration.setAdminEntryObjectClass(propertyMap.get("AdminEntryObjectClass"));  ldapConfiguration.setMaxPDUSize(getIntegerValue(propertyMap.get("maxPDUSize")));  ldapConfiguration.setSaslHostName(propertyMap.get("saslHostName"));  ldapConfiguration.setSaslPrincipalName(propertyMap.get("saslPrincipalName"));}  }
class C{  @Override public void add(Object object){  if (object == null)   return;  if (object instanceof String) {    String string=(String)object;    if (string.length() > Properties.MAX_STRING)     return;    if (string.length() > 65535)     return;    stringPool.add(string);  } else   if (object instanceof Type) {    while (((Type)object).getSort() == Type.ARRAY) {      object=((Type)object).getElementType();    }    typePool.add((Type)object);  } else   if (object instanceof Integer) {    if (Properties.RESTRICT_POOL) {      int val=(Integer)object;      if (Math.abs(val) < Properties.MAX_INT) {        intPool.add((Integer)object);      }    } else {      intPool.add((Integer)object);    }  } else   if (object instanceof Long) {    if (Properties.RESTRICT_POOL) {      long val=(Long)object;      if (Math.abs(val) < Properties.MAX_INT) {        longPool.add((Long)object);      }    } else {      longPool.add((Long)object);    }  } else   if (object instanceof Float) {    if (Properties.RESTRICT_POOL) {      float val=(Float)object;      if (Math.abs(val) < Properties.MAX_INT) {        floatPool.add((Float)object);      }    } else {      floatPool.add((Float)object);    }  } else   if (object instanceof Double) {    if (Properties.RESTRICT_POOL) {      double val=(Double)object;      if (Math.abs(val) < Properties.MAX_INT) {        doublePool.add((Double)object);      }    } else {      doublePool.add((Double)object);    }  } else {    LoggingUtils.getEvoLogger().info("Constant of unknown type: " + object.getClass());  }}  }
class C{  public void testDeployBundle(){  this.fileHandler.createFile("ram:///test.jar");  Bundle bundle=(Bundle)factory.createDeployable("jonas5x","ram:///test.jar",DeployableType.BUNDLE);  deployer.deploy(bundle);  assertTrue(fileHandler.exists(deployer.getDeployableDir(bundle) + "/test.jar"));}  }
class C{  public static @Unretained Object deserializeOffHeapBlob(StoredObject blob) throws IOException, ClassNotFoundException {  Object result;  final long start=startDeserialization();  PdxInputStream is=new PdxInputStream(blob);  result=DataSerializer.readObject(is);  endDeserialization(start,blob.getDataSize());  return result;}  }
class C{  private void startBackgroundTimer(){  if (mBackgroundTimer != null) {    mBackgroundTimer.cancel();  }  mBackgroundTimer=new Timer();  mBackgroundTimer.schedule(new UpdateBackgroundTask(),BACKGROUND_UPDATE_DELAY);}  }
class C{  private void onWifiP2pPeersChanged(Context context,Intent intent){  log.info("WifiDirectSpeaker called onWifiP2pPeersChanged");  Log.d("peerDebug","WifiDirectSpeaker called onWifiP2pPeersChanged");  Parcelable temp=intent.getParcelableExtra(WifiP2pManager.EXTRA_P2P_DEVICE_LIST);  WifiP2pDeviceList peerDevices=(WifiP2pDeviceList)temp;  for (  WifiP2pDevice device : peerDevices.getDeviceList()) {    if (device.deviceName != null && device.deviceName.startsWith(MurmurService.RSVP_PREFIX)) {      String bluetoothAddress=device.deviceName.replace(MurmurService.RSVP_PREFIX,"");      log.info("Found Murmur peer " + device.deviceName + " with address "+ bluetoothAddress);      Log.d("peerDebug","Found Murmur peer " + device.deviceName + " with address "+ bluetoothAddress);      if (BluetoothSpeaker.looksLikeBluetoothAddress(bluetoothAddress) && !BluetoothSpeaker.isReservedMACAddress(bluetoothAddress)) {        BluetoothDevice bluetoothDevice=mBluetoothSpeaker.getDevice(bluetoothAddress);        if (bluetoothDevice != null) {          Peer peer=getCanonicalPeerByDevice(bluetoothDevice);          log.debug("Adding peer " + peer);          Log.d("peerDebug","Adding peer " + peer);          mPeerManager.addPeer(peer);        } else {          log.error("Address " + bluetoothAddress + " got a null bluetooth device, not adding as peer.");          Log.d("peerDebug","Address " + bluetoothAddress + " got a null bluetooth device, not adding as peer.");        }      } else {        log.warn("Address from peer doesn't look like BT address or is reserved: " + bluetoothAddress);        Log.d("peerDebug","Address from peer doesn't look like BT address or is reserved: " + bluetoothAddress);      }    } else {      if (device != null) {        log.info("Found device? " + device);        Log.d("peerDebug","Found device? " + device);      } else {        log.info("Got null device");        Log.d("peerDebug","Got null device");      }    }  }  log.info("P2P peers changed " + peerDevices.getDeviceList().size());  Log.d("peerDebug","P2P peers changed " + peerDevices.getDeviceList().size());  ExchangeHistoryTracker.getInstance().cleanHistory(mPeerManager.getPeers());}  }
class C{  public static void main(String[] args) throws Exception {  String command="start";  if (args != null && args.length > 0) {    command=args[0];  }  final FluxInitializer fluxInitializer=new FluxInitializer();switch (command) {case "start":    fluxInitializer.start();  break;case "migrate":if (args.length < 2) {  throw new RuntimeException("<migrate> must be followed with db name");}if (!(args[1].equals("flux") || args[1].equals("flux_redriver"))) {throw new RuntimeException("<migrate> works only for 'flux' or 'flux_redriver'");}fluxInitializer.migrate(args[1]);break;}}  }
class C{  public Vertex evaluateDO(Vertex expression,List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network,long startTime,long maxTime,int stack){  List<Relationship> doEquations=expression.orderedRelationships(Primitive.DO);  Vertex result=network.createVertex(Primitive.NULL);  if (doEquations == null) {    return result;  }  Vertex returnPrimitive=network.createVertex(Primitive.RETURN);  for (  Relationship doEquation : doEquations) {    result=evaluateExpression(doEquation.getTarget(),variables,network,startTime,maxTime,stack);    if (variables.containsKey(returnPrimitive)) {      variables.remove(returnPrimitive);      return result;    } else     if (result.is(Primitive.BREAK)) {      return result;    }  }  return result;}  }
class C{  public final IntGrid2D multiply(int byThisMuch){  if (byThisMuch == 1.0)   return this;  int[] fieldx=null;  final int width=this.width;  final int height=this.height;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      assert sim.util.LocationLog.it(this,new Int2D(x,y));      fieldx[y]*=byThisMuch;    }  }  return this;}  }
class C{  private static final String toXml(float[] color,String name){  StringBuilder sb=new StringBuilder();  sb.append("<").append(name).append(" r=\"").append(color[0]).append("\" g=\"").append(color[1]).append("\" b=\"").append(color[2]).append("\" />");  return sb.toString();}  }
class C{  private void generateSettersAndGetters(){  for (int i=0; i < 2; i++) {    Class inputClass=inputFieldObjects[i].inputClass;    try {      inputFieldObjects[i].keyGet=PojoUtils.createGetter(inputClass,keyFieldExpressions.get(i),Object.class);      if (timeFields != null && timeFields.size() == 2) {        Class timeField=ClassUtils.primitiveToWrapper(inputClass.getDeclaredField(timeFields.get(i)).getType());        inputFieldObjects[i].timeFieldGet=PojoUtils.createGetter(inputClass,timeFields.get(i),timeField);      }      for (int j=0; j < includeFields[i].length; j++) {        Class inputField=ClassUtils.primitiveToWrapper(inputClass.getDeclaredField(includeFields[i][j]).getType());        Class outputField=ClassUtils.primitiveToWrapper(outputClass.getDeclaredField(includeFields[i][j]).getType());        if (inputField != outputField) {          continue;        }        inputFieldObjects[i].fieldMap.put(PojoUtils.createGetter(inputClass,includeFields[i][j],inputField),PojoUtils.createSetter(outputClass,includeFields[i][j],outputField));      }    } catch (    NoSuchFieldException e) {      throw new RuntimeException(e);    }  }}  }
class C{  @Override protected RdKNNEntry createNewDirectoryEntry(RdKNNNode node){  return new RdKNNDirectoryEntry(node.getPageID(),node.computeMBR(),node.kNNDistance());}  }
class C{  @Override public PreparedStatement prepareStatement(String sql,String[] columnNames) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("prepareStatement(" + quote(sql) + ", "+ quoteArray(columnNames)+ ");");    }    return prepareStatement(sql);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  private static JFreeChart createChart(){  XYSeries series1=new XYSeries("Series 1");  series1.add(1.0,1.0);  series1.add(2.0,2.0);  series1.add(3.0,3.0);  IntervalXYDataset dataset=new XYBarDataset(new XYSeriesCollection(series1),1.0);  return ChartFactory.createXYBarChart("XY Bar Chart","Domain",false,"Range",dataset);}  }
class C{  public void refresh(String key){  DataProvider provider=getProvider(key);  if (provider == null) {    throw new IllegalArgumentException();  }  provider.refresh();}  }
class C{  public CleanCartCommandImpl(final ShoppingCartCommandRegistry registry){  super(registry);}  }
class C{  public CircleDrawer scaleRegistration(float regX,float regY){  setScaleRegistration(regX,regY);  return this;}  }
class C{  private void addTracksWithPause(){  EndToEndTestUtils.deleteAllTracks();  EndToEndTestUtils.createTrackWithPause(3);  instrumentation.waitForIdleSync();  EndToEndTestUtils.SOLO.goBack();  instrumentation.waitForIdleSync();  EndToEndTestUtils.createTrackWithPause(0);  instrumentation.waitForIdleSync();  EndToEndTestUtils.SOLO.goBack();  instrumentation.waitForIdleSync();  assertEquals(2,EndToEndTestUtils.SOLO.getCurrentViews(ListView.class).get(0).getCount());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static boolean disableVirusChecker(Directory in){  Directory dir=FilterDirectory.unwrap(in);  if (dir instanceof FSDirectory) {    FileSystem fs=((FSDirectory)dir).getDirectory().getFileSystem();    while (fs instanceof FilterFileSystem) {      FilterFileSystem ffs=(FilterFileSystem)fs;      if (ffs.getParent() instanceof VirusCheckingFS) {        VirusCheckingFS vfs=(VirusCheckingFS)ffs.getParent();        boolean isEnabled=vfs.isEnabled();        vfs.disable();        return isEnabled;      }      fs=ffs.getDelegate();    }  }  return false;}  }
class C{  private void markSubroutineWalk(final BitSet sub,final int index,final BitSet anyvisited){  if (LOGGING) {    log("markSubroutineWalk: sub=" + sub + " index="+ index);  }  markSubroutineWalkDFS(sub,index,anyvisited);  boolean loop=true;  while (loop) {    loop=false;    for (Iterator<TryCatchBlockNode> it=tryCatchBlocks.iterator(); it.hasNext(); ) {      TryCatchBlockNode trycatch=it.next();      if (LOGGING) {        log("Scanning try/catch " + trycatch);      }      int handlerindex=instructions.indexOf(trycatch.handler);      if (sub.get(handlerindex)) {        continue;      }      int startindex=instructions.indexOf(trycatch.start);      int endindex=instructions.indexOf(trycatch.end);      int nextbit=sub.nextSetBit(startindex);      if (nextbit != -1 && nextbit < endindex) {        if (LOGGING) {          log("Adding exception handler: " + startindex + '-'+ endindex+ " due to "+ nextbit+ " handler "+ handlerindex);        }        markSubroutineWalkDFS(sub,handlerindex,anyvisited);        loop=true;      }    }  }}  }
class C{  @SuppressWarnings("unused") public static byte[] select_font_hri(byte n){  byte[] result=new byte[3];  result[0]=GS;  result[1]=102;  result[2]=n;  return result;}  }
class C{  public void clear(){  fullyLock();  try {    for (Node<E> p, h=head; (p=h.next) != null; h=p) {      h.next=h;      p.item=null;    }    head=last;    if (count.getAndSet(0) == capacity)     notFull.signal();  }  finally {    fullyUnlock();  }}  }
class C{  public void tableChanged(WTableModelEvent event){  if ((event.getType() == WTableModelEvent.CONTENTS_CHANGED) && (event.getColumn() == WTableModelEvent.ALL_COLUMNS) && (event.getFirstRow() == WTableModelEvent.ALL_ROWS)) {    this.repaint();  } else   if ((event.getType() == WTableModelEvent.CONTENTS_CHANGED) && event.getFirstRow() != WTableModelEvent.ALL_ROWS && !m_readWriteColumn.isEmpty()) {    ListModelTable model=this.getModel();    if (event.getLastRow() > event.getFirstRow()) {      int[] indices=this.getSelectedIndices();      model.updateComponent(event.getFirstRow(),event.getLastRow());      if (indices != null && indices.length > 0) {        this.setSelectedIndices(indices);      }    } else {      boolean selected=false;      ListItem listItem=this.getItemAtIndex(event.getFirstRow());      if (listItem != null && listItem.isSelected()) {        selected=true;      }      model.updateComponent(event.getFirstRow());      listItem=this.getItemAtIndex(event.getFirstRow());      if (listItem != null && !listItem.isSelected() && selected) {        listItem.setSelected(true);      }    }  }  return;}  }
class C{  public void clearCaches(){  clearMemoryCaches();  clearDiskCaches();}  }
class C{  @Override protected void initListeners(){}  }
class C{  public RealMixerSource(TargetDataLine targetDataLine,AudioFormat format,ISampleAdapter sampleAdapter){  mTargetDataLine=targetDataLine;  mAudioFormat=format;  mSampleAdapter=sampleAdapter;}  }
class C{  @Override protected boolean isVisibleGhost(){  return User.isAdmin();}  }
class C{  public void rawLineNow(String line,boolean resetDelay){  checkNotNull(line,"Line cannot be null");  checkArgument(bot.isConnected(),"Not connected to server");  writeLock.lock();  try {    log.info(OUTPUT_MARKER,line);    Utils.sendRawLineToServer(bot,line);    lastSentLine=System.nanoTime();    if (resetDelay)     writeNowCondition.signalAll();  } catch (  IOException e) {    throw new RuntimeException("IO exception when sending line to server, is the network still up? " + exceptionDebug(),e);  }catch (  Exception e) {    throw new RuntimeException("Could not send line to server. " + exceptionDebug(),e);  } finally {    writeLock.unlock();  }}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }  m_AD_Tree_ID=getRecord_ID();}  }
class C{  public UDAnimator start(){  final ObjectAnimator animator=getAnimator();  setupListeners(animator);  AnimatorUtil.start(animator);  if (mTarget != null) {    mTarget.startAnimation();  }  return this;}  }
class C{  public static void installBorder(JComponent c,String defaultBorderName){  Border b=c.getBorder();  if (b == null || b instanceof UIResource) {    c.setBorder(getInstance().getBorder(defaultBorderName));  }}  }
class C{  public T checked(boolean checked){  if (view instanceof CompoundButton) {    CompoundButton cb=(CompoundButton)view;    cb.setChecked(checked);  }  return self();}  }
class C{  public String toString(){  return " at " + this.index + " [character "+ this.character+ " line "+ this.line+ "]";}  }
class C{  public void processUserApps(List<LauncherActivityInfoCompat> apps){  initVars();  HashSet<String> packageSet=new HashSet<>();  final boolean userAppsExisted=getUserApps(packageSet);  boolean newPackageAdded=false;  for (  LauncherActivityInfoCompat info : apps) {    String packageName=info.getComponentName().getPackageName();    if (!packageSet.contains(packageName)) {      packageSet.add(packageName);      newPackageAdded=true;      markForAddition(info,info.getFirstInstallTime());    }  }  if (newPackageAdded) {    mPrefs.edit().putStringSet(mPackageSetKey,packageSet).apply();    finalizeAdditions(userAppsExisted);  }}  }
class C{  public void toggle(){  if (mAnimatorSet != null) {    mAnimatorSet.cancel();  }  mAnimatorSet=new AnimatorSet();  final Animator pausePlayAnim=mPlayPauseDrawable.getPausePlayAnimator();  mAnimatorSet.setInterpolator(new DecelerateInterpolator());  mAnimatorSet.setDuration(PLAY_PAUSE_ANIMATION_DURATION);  mAnimatorSet.playTogether(pausePlayAnim);  mAnimatorSet.start();}  }
class C{  @Override public ServerHandshakeBuilder onWebsocketHandshakeReceivedAsServer(WebSocket conn,Draft draft,ClientHandshake request) throws InvalidDataException {  return new HandshakeImpl1Server();}  }
class C{  @Deprecated public ContentItem parentid(String parentId){  this.parentId=parentId;  return this;}  }
class C{  @Override public boolean filter(long tweet){  long tweetTime=originalTimeStampFromTweetId(tweet);  return tweetTime < after || tweetTime > before;}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiDesktopPaneUI();  return MultiLookAndFeel.createUIs(mui,((MultiDesktopPaneUI)mui).uis,a);}  }
class C{  public static String extract(String s){  String result;  result=s;  result=result.replaceAll("\\$Revision:","");  result=result.replaceAll("\\$","");  result=result.replaceAll(" ","");  return result;}  }
class C{  public AppliToolsWebDriverIntegration appliTools(){  return applitoolsIntegration;}  }
class C{  public Builder titleLocKey(String value){  titleLocKey=value;  return this;}  }
class C{  private HandshakeStatus doTasks(){  Runnable runnable;  while ((runnable=sslEngine.getDelegatedTask()) != null) {    runnable.run();  }  return sslEngine.getHandshakeStatus();}  }
class C{  public boolean visit(NumberLiteral node){  return true;}  }
class C{  @Override protected void restoreState(){  logSCCSLikelihood=storedLogSCCSLikelihood;  logSCCSPrior=storedLogSCCSPrior;  betaChanged=storedBetaChanged;  precisionChanged=storedPrecisionChanged;}  }
class C{  protected boolean beforeSave(boolean newRecord){  String dp=getDatePattern();  if (is_ValueChanged("DatePattern") && dp != null && dp.length() > 0) {    if (dp.indexOf("MM") == -1) {      log.saveError("Error",Msg.parseTranslation(getCtx(),"@Error@ @DatePattern@ - No Month (MM)"));      return false;    }    if (dp.indexOf("dd") == -1) {      log.saveError("Error",Msg.parseTranslation(getCtx(),"@Error@ @DatePattern@ - No Day (dd)"));      return false;    }    if (dp.indexOf("yy") == -1) {      log.saveError("Error",Msg.parseTranslation(getCtx(),"@Error@ @DatePattern@ - No Year (yy)"));      return false;    }    m_dateFormat=(SimpleDateFormat)DateFormat.getDateInstance(DateFormat.SHORT,getLocale());    try {      m_dateFormat.applyPattern(dp);    } catch (    Exception e) {      log.saveError("Error",Msg.parseTranslation(getCtx(),"@Error@ @DatePattern@ - " + e.getMessage()));      m_dateFormat=null;      return false;    }  }  if (newRecord)   setAD_Language_ID();  return true;}  }
class C{  public static boolean copyCertificate(Principal subject,KeyStore dst,KeyStore src) throws Exception {  for (  String alias : Collections.list(src.aliases())) {    if (!src.isCertificateEntry(alias)) {      continue;    }    X509Certificate cert=(X509Certificate)src.getCertificate(alias);    if (!cert.getSubjectDN().equals(subject)) {      continue;    }    dst.setCertificateEntry(alias,cert);    return true;  }  return false;}  }
class C{  public static <U,S extends UpdatableSummary<U>>UpdatableSketch<U,S> heapifyUpdatableSketch(final Memory mem){  return new UpdatableSketch<U,S>(mem);}  }
class C{  public static NumericJavaFXBidirectionaBinder<Double> bind(DoubleProperty property){  requireNonNull(property,"property");  return new DoubleJavaFXBidirectionalBinder(property);}  }
class C{  public CreateContainerParams withContainerConfig(@NotNull ContainerConfig containerConfig){  requireNonNull(containerConfig);  this.containerConfig=containerConfig;  return this;}  }
class C{  private List<VPlexInitiatorInfo> buildInitiatorInfoList(List<VPlexInitiatorInfo> alreadyFoundinitiatorInfoList,List<PortInfo> initiatorPortInfo,VPlexClusterInfo clusterInfo){  List<VPlexInitiatorInfo> initiatorInfoList=new ArrayList<VPlexInitiatorInfo>();  Map<String,VPlexInitiatorInfo> initiatorInfoMap=new HashMap<String,VPlexInitiatorInfo>();  for (  VPlexInitiatorInfo initiatorInfo : alreadyFoundinitiatorInfoList) {    initiatorInfoMap.put(initiatorInfo.getPortWwn(),initiatorInfo);  }  for (  PortInfo initiatorInfo : initiatorPortInfo) {    if (initiatorInfoMap.get(initiatorInfo.getPortWWN()) != null) {      initiatorInfoList.add(initiatorInfoMap.get(initiatorInfo.getPortWWN()));    } else {      s_logger.info("Creating VPlexInitiatorInfo for the initiator :" + initiatorInfo.getPortWWN());      VPlexInitiatorInfo info=new VPlexInitiatorInfo();      info.setRegistrationName(VPlexApiConstants.REGISTERED_INITIATOR_PREFIX + VPlexApiConstants.WWN_PREFIX + initiatorInfo.getPortWWN().toLowerCase());      info.setName(VPlexApiConstants.UNREGISTERED_INITIATOR_PREFIX + VPlexApiConstants.WWN_PREFIX + initiatorInfo.getPortWWN().toLowerCase());      info.setPortWwn(VPlexApiConstants.WWN_PREFIX + initiatorInfo.getPortWWN().toLowerCase());      info.setNodeWwn(VPlexApiConstants.WWN_PREFIX + initiatorInfo.getNodeWWN().toLowerCase());      if (initiatorInfo.getType() != null && !initiatorInfo.getType().isEmpty()) {        info.setInitiatorType(Initiator_Type.valueOfType(initiatorInfo.getType()));      }      info.setPath(clusterInfo.getPath() + VPlexApiConstants.URI_INITIATORS + info.getName());      initiatorInfoList.add(info);    }  }  return initiatorInfoList;}  }
class C{  public CompositeCounter copyFrom(MonitoredCounter templateCounter){  return build(templateCounter.getName(),templateCounter.getDescription(),templateCounter.getUnit());}  }
class C{  public static void logTimeOnPage(String url,long duration){  EventLog.writeEvent(BROWSER_TIMEONPAGE,url + "|" + duration);}  }
class C{  public Object postMessage(String id,Object data){  for (  CordovaPlugin plugin : this.pluginMap.values()) {    if (plugin != null) {      Object obj=plugin.onMessage(id,data);      if (obj != null) {        return obj;      }    }  }  return ctx.onMessage(id,data);}  }
class C{  public static boolean isStaticConstantInitializerType(ClassNode cn){  return cn == int_TYPE || cn == float_TYPE || cn == long_TYPE || cn == double_TYPE || cn == STRING_TYPE || cn == byte_TYPE || cn == char_TYPE || cn == short_TYPE;}  }
class C{  @Override public void onBindViewHolder(VH holder,int position){  mItemManger.updateConvertView(holder,position);}  }
class C{  protected void scanClass(final Class<?> scanClass,final FastSet<Field> fields,final boolean skipFactory) throws NoSuchMethodException, NoSuchFieldException {  CacheData cacheData=_classCacheData.get(scanClass);  if (cacheData == null) {    cacheData=new CacheData();    _classCacheData.put(scanClass,cacheData);  }  final XmlType xmlType=scanClass.getAnnotation(XmlType.class);  final String namespace=scanForNamespace(scanClass,xmlType);  if (_cacheMode == CacheMode.READER) {    if (!skipFactory && !"##default".equals(namespace) && !_namespaceObjectFactoryCache.containsKey(namespace)) {      final TextBuilder objectFactoryBuilder=new TextBuilder(scanClass.getPackage().getName());      objectFactoryBuilder.append(".ObjectFactory");      try {        final Class<?> objectFactoryClass=Class.forName(objectFactoryBuilder.toString());        final Object objectFactory=objectFactoryClass.newInstance();        scanObjectFactory(objectFactory,false);        _namespaceObjectFactoryCache.put(namespace,objectFactory);      } catch (      final Exception e) {        LogContext.warning(String.format("Failed to Locate Object Factory for Namespace = %s",namespace));      }    }  } else {    String localName=xmlType.name();    if ((localName == null || localName.length() == 0) && scanClass.isAnnotationPresent(XmlRootElement.class)) {      final XmlRootElement xmlRootElement=scanClass.getAnnotation(XmlRootElement.class);      localName=xmlRootElement.name();    }    _classElementNameCache.put(scanClass,localName);  }  final FastMap<CharArray,Method> cachedAttributeMethods=cacheData._attributeMethodsCache;  final FastSet<Method> cachedAttributeSet=cacheData._attributeMethodsSet;  final FastSet<CharArray> requiredFieldsSet=FastSet.<CharArray>newSet(Order.LEXICAL).linked();  for (  final Field field : fields) {    final XmlAccessType xmlAccessType=getXmlAccessType(scanClass);    if (isElementSkippableBasedOnFieldAnnotations(field,xmlAccessType))     continue;    CharArray xmlName;    final XmlElements xmlElements=field.getAnnotation(XmlElements.class);    final XmlAttribute xmlAttribute=field.getAnnotation(XmlAttribute.class);    final Method method;    if (xmlAttribute != null) {      xmlName=getXmlAttributeName(field);      if (xmlAttribute.required()) {        requiredFieldsSet.add(xmlName);      }      final Class<?> fieldClass=field.getType();      method=getMethodByXmlName(xmlName,scanClass,fieldClass);      _methodAttributeNameCache.put(method,xmlName);      if (_cacheMode == CacheMode.READER) {        cachedAttributeMethods.put(xmlName,method);      } else {        cachedAttributeSet.add(method);      }      cacheData._elementMethodCache.put(xmlName,method);    } else     if (field.isAnnotationPresent(XmlValue.class)) {      final Class<?> fieldClass=field.getType();      method=getMethodByXmlName(_VALUE,scanClass,fieldClass);      cacheData._xmlValueMethod=method;      continue;    } else     if (xmlElements == null) {      xmlName=getXmlElementName(field);      cacheData._elementFieldCache.put(xmlName,field);      final String elementName=xmlName.toString();      final Class<?> fieldClass=field.getType();      method=getMethodByXmlName(xmlName,scanClass,fieldClass);      _methodElementNameCache.put(method,elementName);      cacheData._elementMethodCache.put(xmlName,method);    } else {      xmlName=getXmlElementNameWithMappedElements(scanClass,xmlElements,cacheData._mappedElementsCache,cacheData._elementFieldCache,cacheData._elementMethodCache,field);      cacheData._elementFieldCache.put(xmlName,field);      method=cacheData._elementMethodCache.get(xmlName);    }    final XmlJavaTypeAdapter xmlJavaTypeAdapter=field.getAnnotation(XmlJavaTypeAdapter.class);    if (xmlJavaTypeAdapter != null) {      _xmlJavaTypeAdapterCache.put(method,xmlJavaTypeAdapter.value());    }    final XmlSchemaType xmlSchemaType=field.getAnnotation(XmlSchemaType.class);    if (xmlSchemaType != null) {      final XmlSchemaTypeEnum xmlSchemaTypeEnum=XmlSchemaTypeEnum.fromString(xmlSchemaType.name());      if (xmlSchemaTypeEnum != null) {        _xmlSchemaTypeCache.put(method,xmlSchemaTypeEnum);      }    }    if (xmlAttribute != null) {      continue;    }    cacheData._propOrderMethodCache.put(new CharArray(field.getName()),method);    final Class<?> type=field.getType();    final Class<?> typeClass;    if (type.isAssignableFrom(List.class)) {      typeClass=getGenericType(field);    } else {      typeClass=type;    }    _elementClassCache.put(xmlName,typeClass);    final XmlElement xmlElement=field.getAnnotation(XmlElement.class);    if (xmlElement != null && xmlElement.required()) {      requiredFieldsSet.add(xmlName);    }  }  _requiredCache.put(scanClass,requiredFieldsSet);  final XmlSeeAlso xmlSeeAlso=scanClass.getAnnotation(XmlSeeAlso.class);  if (xmlSeeAlso != null) {    final Class<?>[] seeAlso=xmlSeeAlso.value();    _xmlSeeAlsoCache.add(scanClass);    for (    final Class<?> seeAlsoClass : seeAlso) {      if (!_registeredClassesCache.contains(seeAlsoClass)) {        registerContextClasses(seeAlsoClass);      }    }  }  if (scanClass.isEnum()) {    Enum<?>[] enumConstants=(Enum<?>[])scanClass.getEnumConstants();    for (int i=0; i < enumConstants.length; i++) {      final String enumFieldName=enumConstants[i].name();      final Field enumField=scanClass.getField(enumFieldName);      final XmlEnumValue xmlEnumValue=enumField.getAnnotation(XmlEnumValue.class);      if (xmlEnumValue == null) {        cacheData._enumValueCache.put(getXmlElementName(enumFieldName),enumConstants[i]);      } else {        cacheData._enumValueCache.put(getXmlElementName(xmlEnumValue.value()),enumConstants[i]);      }    }  }}  }
class C{  public EnumeratorItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public void resetCancelOpen(){  isCancelOpen=false;}  }
class C{  public Seconds toStandardSeconds(){  return Seconds.seconds(FieldUtils.safeMultiply(getValue(),DateTimeConstants.SECONDS_PER_WEEK));}  }
class C{  private float currentZoomValue(){  return mCameraSettings.getCurrentZoomRatio();}  }
class C{  public void removeListener(final SelectionListener listener1){  if (this.listener == listener1)   this.listener=null;}  }
class C{  public void process(Trace trace,Node node,Direction direction,Map<String,?> headers,Object[] values){  if (log.isLoggable(Level.FINEST)) {    log.finest("ProcessManager/Processor: process trace=" + trace + " node="+ node+ " direction="+ direction+ " headers="+ headers+ " values="+ values);    if (values != null) {      for (int i=0; i < values.length; i++) {        log.finest("        [value " + i + "] = "+ values[i]);      }    }  }  if (processor.getNodeType() == node.getType() && processor.getDirection() == direction) {    if (uriFilter != null && !uriFilter.test(node.getUri())) {      return;    }    if (processor.getOperation() != null && !processor.getOperation().trim().isEmpty() && !processor.getOperation().equals(node.getOperation())) {      return;    }    Set<Property> faults=node.getProperties(Constants.PROP_FAULT);    if (faultFilter == null && !faults.isEmpty()) {      return;    }    if (faultFilter != null && faults.stream().filter(null).count() == 0) {      return;    }    if (issues != null) {      node.getIssues().addAll(issues);    }    if (predicateHandler != null) {      try {        if (!predicateHandler.test(trace,node,direction,headers,values)) {          if (log.isLoggable(Level.FINEST)) {            log.finest("ProcessManager/Processor: process - predicate returned false");          }          return;        }      } catch (      Throwable t) {        ProcessorIssue pi=new ProcessorIssue();        pi.setProcessor(processor.getDescription());        pi.setSeverity(Severity.Error);        pi.setDescription(t.getMessage());        node.getIssues().add(pi);        return;      }    }    for (int i=0; i < actions.size(); i++) {      actions.get(i).process(trace,node,direction,headers,values);    }  }}  }
class C{  Item(final int index,final Item i){  this.index=index;  type=i.type;  intVal=i.intVal;  longVal=i.longVal;  strVal1=i.strVal1;  strVal2=i.strVal2;  strVal3=i.strVal3;  hashCode=i.hashCode;}  }
class C{  private void init(){  JFreeChart chart=createChart();  chart.setBackgroundPaint(Color.WHITE);  chart.setBorderVisible(true);  chart.setBorderPaint(Color.LIGHT_GRAY);  chart.setAntiAlias(true);  BufferedImage bi=chart.createBufferedImage(200,120,BufferedImage.TRANSLUCENT,null);  try {    byte[] bytes=EncoderUtil.encode(bi,ImageFormat.PNG,true);    AImage image=new AImage("",bytes);    Image myImage=new Image();    myImage.setContent(image);    appendChild(myImage);  } catch (  Exception e) {  }  invalidate();}  }
class C{  public Pac(PacMan pacman,int tag){  super(pacman);  this.tag=tag;  discretization=PAC_DISCRETIZATION;  stopper=pacman.schedule.scheduleRepeating(this,0,1);}  }
class C{  public SoraniNormalizationFilterFactory(Map<String,String> args){  super(args);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public void refresh(){  if (textArea != null)   textArea.setCaretPosition(0);}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  public static String readFully(Reader reader) throws IOException {  try {    StringWriter writer=new StringWriter();    char[] buffer=new char[1024];    int count;    while ((count=reader.read(buffer)) != -1) {      writer.write(buffer,0,count);    }    return writer.toString();  }  finally {    reader.close();  }}  }
class C{  public CertificateIssuerName(DerInputStream in) throws IOException {  dnName=new X500Name(in);}  }
class C{  public boolean isSetVersion(){  return this.version != null;}  }
class C{  public static void updateLastUseTime(EntityPlayer player,ItemStack itemStack,EnumHand hand){  final ILastUseTime lastUseTime=getLastUseTime(itemStack);  if (lastUseTime == null)   return;  final World world=player.getEntityWorld();  lastUseTime.set(world.getTotalWorldTime());  if (!world.isRemote) {    sendToPlayer(lastUseTime,(EntityPlayerMP)player,hand);  }}  }
class C{  public MicroBurlapInput(){}  }
class C{  public void addDescription(String description){  String desc=getDescription();  if (desc == null)   setDescription(description); else   setDescription(desc + " | " + description);}  }
class C{  public static String stringFor(int n){switch (n) {case CU_AD_FORMAT_UNSIGNED_INT8:    return "CU_AD_FORMAT_UNSIGNED_INT8";case CU_AD_FORMAT_UNSIGNED_INT16:  return "CU_AD_FORMAT_UNSIGNED_INT16";case CU_AD_FORMAT_UNSIGNED_INT32:return "CU_AD_FORMAT_UNSIGNED_INT32";case CU_AD_FORMAT_SIGNED_INT8:return "CU_AD_FORMAT_SIGNED_INT8";case CU_AD_FORMAT_SIGNED_INT16:return "CU_AD_FORMAT_SIGNED_INT16";case CU_AD_FORMAT_SIGNED_INT32:return "CU_AD_FORMAT_SIGNED_INT32";case CU_AD_FORMAT_HALF:return "CU_AD_FORMAT_HALF";case CU_AD_FORMAT_FLOAT:return "CU_AD_FORMAT_FLOAT";}return "INVALID CUarray_format: " + n;}  }
class C{  private void initCachingHttpHeadersFilter(ServletContext servletContext,EnumSet<DispatcherType> disps){  log.debug("Registering Caching HTTP Headers Filter");  FilterRegistration.Dynamic cachingHttpHeadersFilter=servletContext.addFilter("cachingHttpHeadersFilter",new CachingHttpHeadersFilter());  cachingHttpHeadersFilter.addMappingForUrlPatterns(disps,true,"/assets/*");  cachingHttpHeadersFilter.addMappingForUrlPatterns(disps,true,"/scripts/*");  cachingHttpHeadersFilter.setAsyncSupported(true);}  }
class C{  @HLEFunction(nid=0xBD11B7C2,version=150,checkInsideInterrupt=true) public int __sceSasGetGrain(int sasCore){  checkSasHandleGood(sasCore);  return grainSamples;}  }
class C{  public static void trimIndentation(String[] lines,IJavaProject project){  trimIndentation(lines,CodeFormatterUtil.getTabWidth(project),CodeFormatterUtil.getIndentWidth(project),true);}  }
class C{  public LineStart createLineStart(){  LineStartImpl lineStart=new LineStartImpl();  return lineStart;}  }
class C{  public AppInviteDialog(final Fragment fragment){  super(fragment,DEFAULT_REQUEST_CODE);}  }
class C{  public AndroidHandler(){  setFormatter(THE_FORMATTER);}  }
class C{  public CSTNode remove(int index){  if (index < 1) {    throw new GroovyBugError("attempt to remove() root node of Reduction");  }  return (CSTNode)elements.remove(index);}  }
class C{  public static void multiplyMM(float[] output,int outputOffset,float[] lhs,int lhsOffset,float[] rhs,int rhsOffset){  output[outputOffset + 0]=lhs[lhsOffset + 0] * rhs[rhsOffset + 0] + lhs[lhsOffset + 4] * rhs[rhsOffset + 1] + lhs[lhsOffset + 8] * rhs[rhsOffset + 2] + lhs[lhsOffset + 12] * rhs[rhsOffset + 3];  output[outputOffset + 1]=lhs[lhsOffset + 1] * rhs[rhsOffset + 0] + lhs[lhsOffset + 5] * rhs[rhsOffset + 1] + lhs[lhsOffset + 9] * rhs[rhsOffset + 2] + lhs[lhsOffset + 13] * rhs[rhsOffset + 3];  output[outputOffset + 2]=lhs[lhsOffset + 2] * rhs[rhsOffset + 0] + lhs[lhsOffset + 6] * rhs[rhsOffset + 1] + lhs[lhsOffset + 10] * rhs[rhsOffset + 2] + lhs[lhsOffset + 14] * rhs[rhsOffset + 3];  output[outputOffset + 3]=lhs[lhsOffset + 3] * rhs[rhsOffset + 0] + lhs[lhsOffset + 7] * rhs[rhsOffset + 1] + lhs[lhsOffset + 11] * rhs[rhsOffset + 2] + lhs[lhsOffset + 15] * rhs[rhsOffset + 3];  output[outputOffset + 4]=lhs[lhsOffset + 0] * rhs[rhsOffset + 4] + lhs[lhsOffset + 4] * rhs[rhsOffset + 5] + lhs[lhsOffset + 8] * rhs[rhsOffset + 6] + lhs[lhsOffset + 12] * rhs[rhsOffset + 7];  output[outputOffset + 5]=lhs[lhsOffset + 1] * rhs[rhsOffset + 4] + lhs[lhsOffset + 5] * rhs[rhsOffset + 5] + lhs[lhsOffset + 9] * rhs[rhsOffset + 6] + lhs[lhsOffset + 13] * rhs[rhsOffset + 7];  output[outputOffset + 6]=lhs[lhsOffset + 2] * rhs[rhsOffset + 4] + lhs[lhsOffset + 6] * rhs[rhsOffset + 5] + lhs[lhsOffset + 10] * rhs[rhsOffset + 6] + lhs[lhsOffset + 14] * rhs[rhsOffset + 7];  output[outputOffset + 7]=lhs[lhsOffset + 3] * rhs[rhsOffset + 4] + lhs[lhsOffset + 7] * rhs[rhsOffset + 5] + lhs[lhsOffset + 11] * rhs[rhsOffset + 6] + lhs[lhsOffset + 15] * rhs[rhsOffset + 7];  output[outputOffset + 8]=lhs[lhsOffset + 0] * rhs[rhsOffset + 8] + lhs[lhsOffset + 4] * rhs[rhsOffset + 9] + lhs[lhsOffset + 8] * rhs[rhsOffset + 10] + lhs[lhsOffset + 12] * rhs[rhsOffset + 11];  output[outputOffset + 9]=lhs[lhsOffset + 1] * rhs[rhsOffset + 8] + lhs[lhsOffset + 5] * rhs[rhsOffset + 9] + lhs[lhsOffset + 9] * rhs[rhsOffset + 10] + lhs[lhsOffset + 13] * rhs[rhsOffset + 11];  output[outputOffset + 10]=lhs[lhsOffset + 2] * rhs[rhsOffset + 8] + lhs[lhsOffset + 6] * rhs[rhsOffset + 9] + lhs[lhsOffset + 10] * rhs[rhsOffset + 10] + lhs[lhsOffset + 14] * rhs[rhsOffset + 11];  output[outputOffset + 11]=lhs[lhsOffset + 3] * rhs[rhsOffset + 8] + lhs[lhsOffset + 7] * rhs[rhsOffset + 9] + lhs[lhsOffset + 11] * rhs[rhsOffset + 10] + lhs[lhsOffset + 15] * rhs[rhsOffset + 11];  output[outputOffset + 12]=lhs[lhsOffset + 0] * rhs[rhsOffset + 12] + lhs[lhsOffset + 4] * rhs[rhsOffset + 13] + lhs[lhsOffset + 8] * rhs[rhsOffset + 14] + lhs[lhsOffset + 12] * rhs[rhsOffset + 15];  output[outputOffset + 13]=lhs[lhsOffset + 1] * rhs[rhsOffset + 12] + lhs[lhsOffset + 5] * rhs[rhsOffset + 13] + lhs[lhsOffset + 9] * rhs[rhsOffset + 14] + lhs[lhsOffset + 13] * rhs[rhsOffset + 15];  output[outputOffset + 14]=lhs[lhsOffset + 2] * rhs[rhsOffset + 12] + lhs[lhsOffset + 6] * rhs[rhsOffset + 13] + lhs[lhsOffset + 10] * rhs[rhsOffset + 14] + lhs[lhsOffset + 14] * rhs[rhsOffset + 15];  output[outputOffset + 15]=lhs[lhsOffset + 3] * rhs[rhsOffset + 12] + lhs[lhsOffset + 7] * rhs[rhsOffset + 13] + lhs[lhsOffset + 11] * rhs[rhsOffset + 14] + lhs[lhsOffset + 15] * rhs[rhsOffset + 15];}  }
class C{  public void addParameterList(NameValuePair param){  if (localParameterList == null) {    localParameterList=new NameValuePair[]{};  }  localParameterListTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localParameterList);  list.add(param);  this.localParameterList=(NameValuePair[])list.toArray(new NameValuePair[list.size()]);}  }
class C{  public static String escape(String s){  if (s == null)   return null;  StringBuffer sb=new StringBuffer();  escape(s,sb);  return sb.toString();}  }
class C{  public static boolean testAabSphere(Vector3d min,Vector3d max,Vector3d center,double radiusSquared){  return testAabSphere(min.x,min.y,min.z,max.x,max.y,max.z,center.x,center.y,center.z,radiusSquared);}  }
class C{  public Quaternionf rotateY(float angle){  return rotateY(angle,this);}  }
class C{  public static void triangulate(DTSweepContext tcx){  tcx.createAdvancingFront();  sweep(tcx);  if (tcx.getTriangulationMode() == TriangulationMode.POLYGON) {    finalizationPolygon(tcx);  } else {    finalizationConvexHull(tcx);  }  tcx.done();}  }
class C{  @Override public void flush() throws IOException {synchronized (mux) {    checkClosed(null,0);    sendBufferIfNotEmpty();    flushRemainder();    awaitAcks();    if (igfsCtx.configuration().isUpdateFileLengthOnFlush() && space > 0) {      try {        IgfsEntryInfo fileInfo0=igfsCtx.meta().reserveSpace(fileInfo.id(),space,streamRange);        if (fileInfo0 == null)         throw new IOException("File was concurrently deleted: " + path); else         fileInfo=fileInfo0;        streamRange=initialStreamRange(fileInfo);        space=0;      } catch (      IgniteCheckedException e) {        throw new IOException("Failed to update file length data [path=" + path + ", space="+ space+ ']',e);      }    }  }}  }
class C{  @Override public boolean hasDurableHandlerStore(){  return true;}  }
class C{  public void config(String config){  if (mEngine == Engine.MATHJAX) {    this.mConfig=config;  }}  }
class C{  private void dynInit(){  ArrayList<KeyNamePair> clients=getClientList();  for (  KeyNamePair client : clients)   cbClient.addItem(client);  ArrayList<ValueNamePair> languages=getLanguageList();  for (  ValueNamePair language : languages)   cbLanguage.addItem(language);  ArrayList<ValueNamePair> tables=getTableList();  for (  ValueNamePair table : tables)   cbTable.addItem(table);  setStatusBar(statusBar);}  }
class C{  public void flush(){  assertIsOpen();  segments.currentSegment().flush();}  }
class C{  public double distance(Instance first,Instance second,double cutOffValue){  return distance(first,second,cutOffValue,null);}  }
class C{  public int countLinesInFile(String filename) throws IOException {  InputStream is=new BufferedInputStream(new FileInputStream(filename));  try {    byte[] c=new byte[1024];    int count=0;    int readChars=0;    while ((readChars=is.read(c)) != -1) {      for (int i=0; i < readChars; ++i) {        if (c[i] == '\n') {          ++count;        }      }    }    return count;  }  finally {    is.close();  }}  }
class C{  public Host createHost(String name,File appBase){  return new Host(invoke(embeddedCreateHost,name,appBase.getAbsolutePath()));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodelistindexequalzero.class,args);}  }
class C{  private void mouse_clicked(MouseEvent e,boolean rightClick){  Point point=e.getPoint();  log.info("Right=" + rightClick + " - "+ point.toString());  if (rightClick) {    m_ddQ=m_viewPanel.getDrillDown(point);    m_daQ=m_viewPanel.getDrillAcross(point);    m_ddM=null;    m_daM=null;    if (m_ddQ == null && m_daQ == null)     return;    JPopupMenu pop=new JPopupMenu();    Icon wi=Env.getImageIcon("mWindow.gif");    if (m_ddQ != null) {      m_ddM=new CMenuItem(m_ddQ.getDisplayName(Env.getCtx()),wi);      m_ddM.setToolTipText(m_ddQ.toString());      m_ddM.addActionListener(this);      pop.add(m_ddM);    }    if (m_daQ != null) {      m_daM=new CMenuItem(m_daQ.getDisplayName(Env.getCtx()),wi);      m_daM.setToolTipText(m_daQ.toString());      m_daM.addActionListener(this);      pop.add(m_daM);    }    Point pp=e.getPoint();    pop.show((Component)e.getSource(),pp.x,pp.y);    return;  }  setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  if (m_drillDown) {    MQuery query=m_viewPanel.getDrillDown(point);    if (query != null) {      log.info("Drill Down: " + query.getWhereClause(true));      executeDrill(query);    }  } else   if (comboDrill.getSelectedItem() != null && comboDrill.getSelectedIndex() > 0) {    MQuery query=m_viewPanel.getDrillAcross(point);    if (query != null) {      NamePair pp=(NamePair)comboDrill.getSelectedItem();      query.setTableName(pp.getID());      log.info("Drill Accross: " + query.getWhereClause(true));      executeDrill(query);    }  }  cmd_drill();}  }
class C{  final Executor executor(){  return executor;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @ConstructorProperties({"lineWidth","endCap","lineJoin","miterLimit","dashArray","dashPhase"}) public BasicStroke(float width,int cap,int join,float miterlimit,float dash[],float dash_phase){  if (width < 0.0f) {    throw new IllegalArgumentException("negative width");  }  if (cap != CAP_BUTT && cap != CAP_ROUND && cap != CAP_SQUARE) {    throw new IllegalArgumentException("illegal end cap value");  }  if (join == JOIN_MITER) {    if (miterlimit < 1.0f) {      throw new IllegalArgumentException("miter limit < 1");    }  } else   if (join != JOIN_ROUND && join != JOIN_BEVEL) {    throw new IllegalArgumentException("illegal line join value");  }  if (dash != null) {    if (dash_phase < 0.0f) {      throw new IllegalArgumentException("negative dash phase");    }    boolean allzero=true;    for (int i=0; i < dash.length; i++) {      float d=dash[i];      if (d > 0.0) {        allzero=false;      } else       if (d < 0.0) {        throw new IllegalArgumentException("negative dash length");      }    }    if (allzero) {      throw new IllegalArgumentException("dash lengths all zero");    }  }  this.width=width;  this.cap=cap;  this.join=join;  this.miterlimit=miterlimit;  if (dash != null) {    this.dash=(float[])dash.clone();  }  this.dash_phase=dash_phase;}  }
class C{  public final Vec3D limit(float lim){  if (magSquared() > lim * lim) {    return normalize().scaleSelf(lim);  }  return this;}  }
class C{  @Override public int addAttribute(Attribute a){  if (a == null) {    throw new IllegalArgumentException("Attribute must not be null");  } else {    int index=-1;    Attribute original=a;    a=(Attribute)a.clone();    if (unusedColumnList.size() > 0) {synchronized (unusedColumnList) {        if (unusedColumnList.size() > 0) {          index=unusedColumnList.remove(0);          attributes.set(index,a);        } else {          index=attributes.size();          attributes.add(a);        }      }    } else {      index=attributes.size();      attributes.add(a);    }    a.setTableIndex(index);    original.setTableIndex(index);    return index;  }}  }
class C{  public void initialize(Object[] xData,Object[] yData,Object[] zData){  this.xValues=new Double[xData.length];  this.yValues=new Double[yData.length];  this.zValues=new Double[zData.length];  Vector tmpVector=new Vector();  double x=1.123452e31;  for (int k=0; k < this.xValues.length; k++) {    if (xData[k] != null) {      Number xNumber;      if (xData[k] instanceof Number) {        xNumber=(Number)xData[k];      } else       if (xData[k] instanceof Date) {        this.dateAxis[0]=true;        Date xDate=(Date)xData[k];        xNumber=new Long(xDate.getTime());      } else {        xNumber=new Integer(0);      }      this.xValues[k]=new Double(xNumber.doubleValue());      if (x != this.xValues[k].doubleValue()) {        tmpVector.add(new Integer(k));        x=this.xValues[k].doubleValue();      }    }  }  Object[] inttmp=tmpVector.toArray();  this.xIndex=new int[inttmp.length];  for (int i=0; i < inttmp.length; i++) {    this.xIndex[i]=((Integer)inttmp[i]).intValue();  }  for (int k=0; k < this.yValues.length; k++) {    this.yValues[k]=(Double)yData[k];    if (zData[k] != null) {      this.zValues[k]=(Double)zData[k];    }  }}  }
class C{  @Override public boolean input(Instance instance){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  if (isFirstBatchDone()) {    push(instance);    return true;  } else {    bufferInput(instance);    return false;  }}  }
class C{  public SpelExpressionGuard(Expression expression){  Assert.notNull(expression,"Expression cannot be null");  this.expression=expression;  this.methods=new StateContextExpressionMethods(new StandardEvaluationContext());}  }
class C{  static void compileArrayStoreBarrierFloat(Assembler asm,BaselineCompilerImpl compiler){  arrayStoreBarrierHelper(asm,compiler,Entrypoints.floatArrayWriteBarrierMethod);}  }
class C{  public CallLocationModel(SourceLocationTag srcLoc,Edge callEdge){  this(srcLoc.getClz(),srcLoc.getLine(),callEdge);}  }
class C{  @Override public void close(){}  }
class C{  private void reloadButtons(){  final Context context=getContext();  final PackageManager pm=context.getPackageManager();  final ActivityManager am=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  final List<ActivityManager.RecentTaskInfo> recentTasks=am.getRecentTasks(MAX_RECENT_TASKS,ActivityManager.RECENT_IGNORE_UNAVAILABLE);  ActivityInfo homeInfo=new Intent(Intent.ACTION_MAIN).addCategory(Intent.CATEGORY_HOME).resolveActivityInfo(pm,0);  IconUtilities iconUtilities=new IconUtilities(getContext());  int index=0;  int numTasks=recentTasks.size();  for (int i=0; i < numTasks && (index < NUM_BUTTONS); ++i) {    final ActivityManager.RecentTaskInfo info=recentTasks.get(i);    if (DBG_FORCE_EMPTY_LIST && (i == 0))     continue;    Intent intent=new Intent(info.baseIntent);    if (info.origActivity != null) {      intent.setComponent(info.origActivity);    }    if (homeInfo != null) {      if (homeInfo.packageName.equals(intent.getComponent().getPackageName()) && homeInfo.name.equals(intent.getComponent().getClassName())) {        continue;      }    }    intent.setFlags((intent.getFlags() & ~Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED) | Intent.FLAG_ACTIVITY_NEW_TASK);    final ResolveInfo resolveInfo=pm.resolveActivity(intent,0);    if (resolveInfo != null) {      final ActivityInfo activityInfo=resolveInfo.activityInfo;      final String title=activityInfo.loadLabel(pm).toString();      Drawable icon=activityInfo.loadIcon(pm);      if (title != null && title.length() > 0 && icon != null) {        final TextView tv=mIcons[index];        tv.setText(title);        icon=iconUtilities.createIconDrawable(icon);        tv.setCompoundDrawables(null,icon,null,null);        RecentTag tag=new RecentTag();        tag.info=info;        tag.intent=intent;        tv.setTag(tag);        tv.setVisibility(View.VISIBLE);        tv.setPressed(false);        tv.clearFocus();        ++index;      }    }  }  mNoAppsText.setVisibility((index == 0) ? View.VISIBLE : View.GONE);  for (; index < NUM_BUTTONS; ++index) {    mIcons[index].setVisibility(View.GONE);  }}  }
class C{  @Override public Object clone(){  TrieNode result;  Enumeration<Character> keys;  Character key;  TrieNode child;  result=new TrieNode(getChar());  keys=m_Children.keys();  while (keys.hasMoreElements()) {    key=keys.nextElement();    child=(TrieNode)m_Children.get(key).clone();    result.add(child);    result.m_Children.put(key,child);  }  return result;}  }
class C{  public final void shutdown(){  isRunning=false;  try {    selector.close();    ssc.close();    LOG.debug("Server shutdown successfully!");  } catch (  final IOException e) {    throw new RuntimeException("Exception shutting down the server",e);  }}  }
class C{  protected void postorder(TreeNode<E> root){  if (root == null)   return;  postorder(root.left);  postorder(root.right);  System.out.print(root.element + " ");}  }
class C{  public boolean isSetKey(){  return this.key != null;}  }
class C{  @Interruptible public static void addWeakReference(WeakReference<?> obj,Object referent){  ReferenceProcessor.addWeakCandidate(obj,ObjectReference.fromObject(referent));}  }
class C{  protected int determineIndex(String s,int numAttributes) throws Exception {  int result;  if (s.equals("first")) {    result=0;  } else   if (s.equals("last")) {    result=numAttributes - 1;  } else {    result=Integer.parseInt(s) - 1;  }  if ((result < 0) || (result > numAttributes - 1)) {    throw new IllegalArgumentException("'" + s + "' is not a valid index for the range '1-"+ numAttributes+ "'!");  }  return result;}  }
class C{  public static Map<String,Object> compareDocuments(DispatchContext dctx,Map<String,? extends Object> context){  XMultiComponentFactory xmulticomponentfactory=null;  String stringUrl="file:///" + context.get("filenameFrom");  String stringOriginalFile="file:///" + context.get("filenameOriginal");  String stringOutFile="file:///" + context.get("filenameOut");  String oooHost=(String)context.get("oooHost");  String oooPort=(String)context.get("oooPort");  try {    xmulticomponentfactory=OpenOfficeWorker.getRemoteServer(oooHost,oooPort);  } catch (  IOException e) {    Debug.logError(e,"Error in OpenOffice operation: ",module);    return ServiceUtil.returnError(e.toString());  }catch (  Exception e) {    Debug.logError(e,"Error in OpenOffice operation: ",module);    return ServiceUtil.returnError(e.toString());  }  try {    XPropertySet xpropertysetMultiComponentFactory=(XPropertySet)UnoRuntime.queryInterface(XPropertySet.class,xmulticomponentfactory);    Object objectDefaultContext=xpropertysetMultiComponentFactory.getPropertyValue("DefaultContext");    XComponentContext xcomponentcontext=(XComponentContext)UnoRuntime.queryInterface(XComponentContext.class,objectDefaultContext);    Object desktopObj=xmulticomponentfactory.createInstanceWithContext("com.sun.star.frame.Desktop",xcomponentcontext);    XDesktop desktop=(XDesktop)UnoRuntime.queryInterface(XDesktop.class,desktopObj);    XComponentLoader xcomponentloader=(XComponentLoader)UnoRuntime.queryInterface(XComponentLoader.class,desktopObj);    PropertyValue propertyvalue[]=new PropertyValue[1];    propertyvalue[0]=new PropertyValue();    propertyvalue[0].Name="Hidden";    propertyvalue[0].Value=Boolean.valueOf(true);    Object objectDocumentToStore=xcomponentloader.loadComponentFromURL(stringUrl,"_blank",0,propertyvalue);    XStorable xstorable=(XStorable)UnoRuntime.queryInterface(XStorable.class,objectDocumentToStore);    propertyvalue=new PropertyValue[1];    propertyvalue[0]=new PropertyValue();    propertyvalue[0].Name="URL";    propertyvalue[0].Value=stringOriginalFile;    XFrame frame=desktop.getCurrentFrame();    Object dispatchHelperObj=xmulticomponentfactory.createInstanceWithContext("com.sun.star.frame.DispatchHelper",xcomponentcontext);    XDispatchHelper dispatchHelper=(XDispatchHelper)UnoRuntime.queryInterface(XDispatchHelper.class,dispatchHelperObj);    XDispatchProvider dispatchProvider=(XDispatchProvider)UnoRuntime.queryInterface(XDispatchProvider.class,frame);    dispatchHelper.executeDispatch(dispatchProvider,".uno:CompareDocuments","",0,propertyvalue);    propertyvalue=new PropertyValue[1];    propertyvalue[0]=new PropertyValue();    propertyvalue[0].Name="Overwrite";    propertyvalue[0].Value=Boolean.valueOf(true);    Debug.logInfo("stringOutFile: " + stringOutFile,module);    xstorable.storeToURL(stringOutFile,propertyvalue);    XComponent xcomponent=(XComponent)UnoRuntime.queryInterface(XComponent.class,xstorable);    xcomponent.dispose();    Map results=ServiceUtil.returnSuccess();    return results;  } catch (  Exception e) {    Debug.logError(e,"Error in OpenOffice operation: ",module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentConvertingDocumentError",UtilMisc.toMap("errorString",e.toString()),locale));  }}  }
class C{  public OMRaster(int x1,int y1,ImageIcon ii){  this(x1,y1,ii.getImage());}  }
class C{  public void store(Element root){  store(root,Xml.MODELS,Xml.MODEL,Xml.ENGINE_MODELS);}  }
class C{  @Override public String toString(){  if (bits != null && bits.length > 0) {    char[] digits=new char[bits.length * wordlen];    for (int i=0; i < bits.length * wordlen; i++) {      digits[i]=isMember(i) ? '1' : '0';    }    return new String(digits);  } else {    return "[]";  }}  }
class C{  public void onReceivedSslError(WebView view,SslErrorHandler handler,SslError error){  handler.cancel();}  }
class C{  public void cleanupTestImages(){  try {    File stressImagesDirectory=new File(String.format("%s/%s",Environment.getExternalStorageDirectory(),CAMERA_STRESS_IMAGES_DIRECTORY));    File[] stressImages=stressImagesDirectory.listFiles();    for (    File f : stressImages) {      f.delete();    }  } catch (  SecurityException e) {    Log.e(TAG,"Security manager access violation: " + e.toString());  }}  }
class C{  protected void register(ParserInterface parserInterface){  if (parserInterface == null)   grammarInterface=new ParserInterface(); else   grammarInterface=parserInterface;}  }
class C{  public void printStackTrace(PrintStream stream){  super.printStackTrace(stream);  if (this.encapsulatedException != null) {    stream.println("*** Nested Exception:");    this.encapsulatedException.printStackTrace(stream);  }}  }
class C{  public static IModelMetaData readDefaultNull(SQL table) throws AdeException {  final String sql=String.format("select MODEL_INTERNAL_ID from %s where IS_DEFAULT=1 and ANALYSIS_GROUP is null",table);  final List<Integer> ids=SpecialSqlQueries.executeIntListQuery(sql);  if (ids.size() != 1) {    if (ids.isEmpty()) {      return null;    }    if (ids.size() > 1) {      throw new AdeInternalException("multiple trained models for ANALYSIS_GROUP=null");    }  }  return readMetaData(table,ids.get(0));}  }
class C{  @Inline public static void clearBlockMeta(Address block){  getMetaAddress(block).plus(FL_META_OFFSET).store(Word.zero());}  }
class C{  public StringIndexOutOfBoundsException(int index){  super("" + index);}  }
class C{  public void waitForFormName(final String name){  TestUtils.waitForFormName(name);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected EncodingUtilities(){}  }
class C{  public HttpPut(String path,ParameterMap params,String contentType,byte[] data){  super(path,params);  this.httpMethod=HttpMethod.PUT;  this.contentType=contentType;  this.content=data;}  }
class C{  public boolean isAllowedEnCashment(){  Object oo=get_Value(COLUMNNAME_IsAllowedEnCashment);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void clearKeyboardFocus(final Actor actor){  if (actor != null) {    clearKeyboardFocus(actor.getStage());  }}  }
class C{  public void endVisit(Initializer node){}  }
class C{  @Inline(value=Inline.When.ArgumentsAreConstant,arguments={1,3,4}) public static void arraycopy(char[] src,int srcIdx,char[] dst,int dstIdx,int len){  if (srcIdx >= 0 && dstIdx >= 0 && len >= 0 && (srcIdx + len) >= 0 && (srcIdx + len) <= src.length && (dstIdx + len) >= 0 && (dstIdx + len) <= dst.length) {    if ((src != dst || srcIdx >= (dstIdx + BYTES_IN_ADDRESS / BYTES_IN_CHAR)) && CHAR_BULK_COPY_SUPPORTED) {      if (NEEDS_CHAR_ASTORE_BARRIER || NEEDS_CHAR_ALOAD_BARRIER) {        Offset srcOffset=Offset.fromIntZeroExtend(srcIdx << LOG_BYTES_IN_CHAR);        Offset dstOffset=Offset.fromIntZeroExtend(dstIdx << LOG_BYTES_IN_CHAR);        Barriers.charBulkCopy(src,srcOffset,dst,dstOffset,len << LOG_BYTES_IN_CHAR);      } else {        Memory.arraycopy16Bit(src,srcIdx,dst,dstIdx,len);      }    } else {      arraycopyPiecemeal(src,srcIdx,dst,dstIdx,len);    }  } else {    failWithIndexOutOfBoundsException();  }}  }
class C{  @Override public void translateCore(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  final IOperandTreeNode registerOperand1=instruction.getOperands().get(0).getRootNode().getChildren().get(0);  final IOperandTreeNode registerOperand2=instruction.getOperands().get(1).getRootNode().getChildren().get(0);  final IOperandTreeNode shifter=instruction.getOperands().get(2).getRootNode();  final String targetRegister=(registerOperand1.getValue());  final String sourceRegister=(registerOperand2.getValue());  final OperandSize bt=OperandSize.BYTE;  final OperandSize dw=OperandSize.DWORD;  long baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);  final String tmpVar1=environment.getNextVariableString();  final String tmpVar2=environment.getNextVariableString();  final Pair<String,String> shifterPair=AddressingModeOneGenerator.generate(baseOffset,environment,instruction,instructions,shifter);  baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);  final String shifterOperand=shifterPair.first();  instructions.add(ReilHelpers.createSub(baseOffset++,dw,String.valueOf(0L),dw,shifterOperand,dw,tmpVar1));  instructions.add(ReilHelpers.createSub(baseOffset++,dw,tmpVar1,dw,String.valueOf(1L),dw,tmpVar2));  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,sourceRegister,dw,tmpVar2,dw,targetRegister));  if (instruction.getMnemonic().endsWith("S") && (instruction.getMnemonic().length() != 5)) {    final String tmpVar3=environment.getNextVariableString();    final String shifterCarryOut=shifterPair.second();    instructions.add(ReilHelpers.createBsh(baseOffset++,dw,targetRegister,dw,String.valueOf(-31L),bt,tmpVar3));    instructions.add(ReilHelpers.createAnd(baseOffset++,bt,tmpVar3,bt,String.valueOf(1L),bt,"N"));    instructions.add(ReilHelpers.createBisz(baseOffset++,dw,targetRegister,bt,"Z"));    instructions.add(ReilHelpers.createStr(baseOffset++,bt,shifterCarryOut,bt,"C"));  }}  }
class C{  public boolean isSetNewstruct(){  return this.newstruct != null;}  }
class C{  public AccountHeaderBuilder withSelectionFirstLineShown(boolean selectionFirstLineShown){  this.mSelectionFirstLineShown=selectionFirstLineShown;  return this;}  }
class C{  public Move(int from,int to,int promoteTo){  this.from=from;  this.to=to;  this.promoteTo=promoteTo;  this.score=0;}  }
class C{  public JSONWriter endObject() throws JSONException {  return this.end('k','}');}  }
class C{  public static double[] computeExtremeValues(BufferWrapper buffer){  if (buffer == null) {    String message=Logging.getMessage("nullValue.BufferIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  return computeExtremeValues(buffer,Double.NaN);}  }
class C{  private void notifyListeners(Relation element,String property,Boolean value){  for (  ModificationListener<Relation,Boolean> listener : listeners) {    listener.modify(element,property,value);  }}  }
class C{  @Override protected void doPost(final HttpServletRequest req,final HttpServletResponse resp) throws IOException {  final boolean cancelQuery=req.getParameter(CANCEL_QUERY) != null;  if (cancelQuery) {    doCancelQuery(req,resp,getIndexManager(),getBigdataRDFContext());  }  doGet(req,resp);  return;}  }
class C{  public void putLong(String key,long value){  preferences.edit().putLong(key,value).apply();}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (type: ");  result.append(type);  result.append(", value: ");  result.append(value);  result.append(')');  return result.toString();}  }
class C{  public byte[][] generateKeys(final int nkeys){  if (nkeys < 0)   throw new IllegalArgumentException();  if (nkeys > maxKeys)   throw new IllegalArgumentException();  final Set<byte[]> set=new TreeSet<byte[]>(BytesUtil.UnsignedByteArrayComparator.INSTANCE);  final byte[][] keys=new byte[maxKeys][];  int n=0;  while (n < maxKeys) {    final byte[] key=new byte[r.nextInt(maxKeyLength) + 1];    r.nextBytes(key);    if (set.add(key)) {      keys[n++]=key;    }  }  Arrays.sort(keys,BytesUtil.UnsignedByteArrayComparator.INSTANCE);  for (int i=nkeys; i < maxKeys; i++) {    keys[i]=null;  }  return keys;}  }
class C{  public static void superposeInPlace(Vector toBeAdded,Vector toBeAltered,FlagConfig flagConfig,BLAS blas,double weight) throws IncompatibleVectorsException {  if (!toBeAdded.getVectorType().equals(toBeAltered.getVectorType()))   throw new IncompatibleVectorsException();switch (toBeAdded.getVectorType()) {case REAL:    blas.saxpy(flagConfig.dimension(),(float)weight,((RealVector)toBeAdded).getCoordinates(),1,((RealVector)toBeAltered).getCoordinates(),1);  break;case COMPLEX:blas.saxpy(flagConfig.dimension() * 2,(float)weight,((ComplexVector)toBeAdded).getCoordinates(),1,((ComplexVector)toBeAltered).getCoordinates(),1);break;case BINARY:((BinaryVector)toBeAdded).tallyVotes();toBeAltered.superpose(toBeAdded,weight,null);break;default :break;}}  }
class C{  public static PKCS12ParseInfo parsePKCS12Certificate(ContentResolver contentResolver,Uri uri,String password) throws KeyStoreException, NoSuchAlgorithmException, IOException, CertificateException, UnrecoverableKeyException {  InputStream inputStream=contentResolver.openInputStream(uri);  KeyStore keystore=KeyStore.getInstance("PKCS12");  keystore.load(inputStream,password.toCharArray());  Enumeration<String> aliases=keystore.aliases();  for (  String alias : Collections.list(aliases)) {    PrivateKey privateKey=(PrivateKey)keystore.getKey(alias,"".toCharArray());    if (privateKey == null) {      continue;    }    X509Certificate clientCertificate=(X509Certificate)keystore.getCertificate(alias);    if (clientCertificate == null) {      continue;    }    Log.d(TAG,"parsePKCS12Certificate: " + alias + " is selected");    return new PKCS12ParseInfo(alias,clientCertificate,privateKey);  }  return null;}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  private void initializeThemePreference(){  Preference themePreference=findPreference(getString(R.string.theme_preference_key));  themePreference.setOnPreferenceChangeListener(createThemeChangeListener());}  }
class C{  void ortbnd(double[] alf,double[] eta,double[] oldeta,double[] bet,int step,double rnm){  int i;  if (step < 1)   return;  if (0 != rnm) {    if (step > 1) {      oldeta[0]=(bet[1] * eta[1] + (alf[0] - alf[step]) * eta[0] - bet[step] * oldeta[0]) / rnm + eps1;    }    for (i=1; i <= step - 2; i++)     oldeta[i]=(bet[i + 1] * eta[i + 1] + (alf[i] - alf[step]) * eta[i] + bet[i] * eta[i - 1] - bet[step] * oldeta[i]) / rnm + eps1;  }  oldeta[step - 1]=eps1;  svd_dswap(step,oldeta,1,eta,1);  eta[step]=eps1;  return;}  }
class C{  public RefEll(double maj,double min){  this.maj=maj;  this.min=min;  this.ecc=((maj * maj) - (min * min)) / (maj * maj);}  }
class C{  public static void main(String arg[]){  final int l=Integer.parseInt(arg[0]);  final int n=Integer.parseInt(arg[1]);  LongArrayBitVector bv=LongArrayBitVector.ofLength(l);  final ProgressLogger pl=new ProgressLogger();  long t=0;  long h[]=new long[3];  for (int k=4; k-- != 0; ) {    pl.start("Timing MurmurHash...");    for (int i=n; i-- != 0; )     t+=murmur(bv,0);    if (t == 0)     System.err.println(t);    pl.done(n);    pl.start("Timing MurmurHash3...");    for (int i=n; i-- != 0; ) {      murmur3(bv,0,h);      t+=h[0];    }    if (t == 0)     System.err.println(t);    pl.done(n);    pl.start("Timing Jenkins's hash...");    for (int i=n; i-- != 0; ) {      jenkins(bv,0,h);      t+=h[0];    }    if (t == 0)     System.err.println(t);    pl.done(n);    pl.start("Timing SpookyHash4...");    for (int i=n; i-- != 0; ) {      spooky4(bv,0,h);      t+=h[0];    }    if (t == 0)     System.err.println(t);    pl.done(n);    pl.start("Timing SpookyHash12...");    for (int i=n; i-- != 0; ) {      spooky12(bv,0,h);      t+=h[0];    }    if (t == 0)     System.err.println(t);    pl.done(n);    final long[] preprocessMurmur=preprocessMurmur(bv,0);    pl.start("Timing preprocessed MurmurHash...");    for (int i=n; i-- != 0; )     t+=murmur(bv,l - 1,preprocessMurmur);    if (t == 0)     System.err.println(t);    pl.done(n);    final long[][] preprocessMurmur3=preprocessMurmur3(bv,0);    long[] hh1=preprocessMurmur3[0];    long[] hh2=preprocessMurmur3[1];    long[] cc1=preprocessMurmur3[2];    long[] cc2=preprocessMurmur3[3];    pl.start("Timing preprocessed MurmurHash3...");    for (int i=n / l; i-- != 0; )     for (int j=l; j-- != 0; )     t+=murmur3(bv,j,hh1,hh2,cc1,cc2);    if (t == 0)     System.err.println(t);    pl.done(n);    long[][] preprocessJenkins=preprocessJenkins(bv,0);    long[] aa=preprocessJenkins[0];    long[] bb=preprocessJenkins[1];    long[] cc=preprocessJenkins[2];    pl.start("Timing preprocessed Jenkins's hash...");    for (int i=n / l; i-- != 0; )     for (int j=l; j-- != 0; )     t+=jenkins(bv,j,aa,bb,cc);    if (t == 0)     System.err.println(t);    pl.done(n);    long[] preprocessSpooky4=preprocessSpooky4(bv,0);    pl.start("Timing preprocessed SpookyHash...");    for (int i=n / l; i-- != 0; )     for (int j=l; j-- != 0; )     t+=spooky4(bv,j,0,preprocessSpooky4);    if (t == 0)     System.err.println(t);    pl.done(n);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public ServletBinding(HttpServletRequest request,HttpServletResponse response,ServletContext context){  super.setVariable("request",request);  super.setVariable("response",response);  super.setVariable("context",context);  super.setVariable("application",context);  super.setVariable("session",request.getSession(false));  Map params=collectParams(request);  super.setVariable("params",params);  Map<String,String> headers=new LinkedHashMap<String,String>();  for (Enumeration names=request.getHeaderNames(); names.hasMoreElements(); ) {    String headerName=(String)names.nextElement();    String headerValue=request.getHeader(headerName);    headers.put(headerName,headerValue);  }  super.setVariable("headers",headers);}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public void removeListener(final IMemoryViewerSynchronizerListener listener){  m_listeners.removeListener(listener);}  }
class C{  public void queryResult(OutputStream os,HeadersAmp headers,String address,long qId,Object value) throws IOException {  init(os);  OutH3 out=_out;  if (out == null) {    return;  }  if (log.isLoggable(_level)) {    log.log(_level,"hamp-query-result-w " + value + " (in "+ this+ ")"+ "\n  {id:"+ qId+ " to:"+ address+ ", "+ headers+ ","+ os+ "}");  }  try {    out.writeLong(MessageTypeHamp.QUERY_RESULT.ordinal());    writeHeaders(out,headers);    writeToAddress(out,address);    out.writeLong(qId);    out.writeObject(value);  } catch (  Throwable e) {    log.log(Level.WARNING,e.toString(),e);    throw e;  }}  }
class C{  protected void markModelMatrixDirty(){  mIsModelMatrixDirty=true;}  }
class C{  public boolean intersects(double x,double y,double w,double h){  if (npoints <= 0 || !bounds.intersects(x,y,w,h)) {    return false;  }  updateComputingPath();  return closedPath.intersects(x,y,w,h);}  }
class C{  @Deprecated public static void assertNotEquals(String itemName,double notExpected,double actual,double delta){  try {    if (Double.isInfinite(notExpected) && notExpected == actual || Math.abs(notExpected - actual) <= delta) {      Assert.fail(itemName + " should not be equal:<" + notExpected+ '>');    }  } catch (  AssertionError e) {    Verify.throwMangledException(e);  }}  }
class C{  public boolean contains(final int x){  return x >= left && x <= right;}  }
class C{  public Clustering<?> run(final Database database,final Relation<DiscreteUncertainObject> relation){  if (relation.size() <= 0) {    return new Clustering<>("Uk-Means Clustering","ukmeans-clustering");  }  DBIDs sampleids=DBIDUtil.randomSample(relation.getDBIDs(),k,rnd);  List<double[]> means=new ArrayList<>(k);  for (DBIDIter iter=sampleids.iter(); iter.valid(); iter.advance()) {    means.add(ArrayLikeUtil.toPrimitiveDoubleArray(relation.get(iter).getCenterOfMass()));  }  List<ModifiableDBIDs> clusters=new ArrayList<>();  for (int i=0; i < k; i++) {    clusters.add(DBIDUtil.newHashSet((int)(relation.size() * 2. / k)));  }  WritableIntegerDataStore assignment=DataStoreUtil.makeIntegerStorage(relation.getDBIDs(),DataStoreFactory.HINT_TEMP | DataStoreFactory.HINT_HOT,-1);  double[] varsum=new double[k];  IndefiniteProgress prog=LOG.isVerbose() ? new IndefiniteProgress("UK-Means iteration",LOG) : null;  DoubleStatistic varstat=LOG.isStatistics() ? new DoubleStatistic(this.getClass().getName() + ".variance-sum") : null;  int iteration=0;  for (; maxiter <= 0 || iteration < maxiter; iteration++) {    LOG.incrementProcessed(prog);    boolean changed=assignToNearestCluster(relation,means,clusters,assignment,varsum);    logVarstat(varstat,varsum);    if (!changed) {      break;    }    means=means(clusters,means,relation);  }  LOG.setCompleted(prog);  if (LOG.isStatistics()) {    LOG.statistics(new LongStatistic(KEY + ".iterations",iteration));  }  Clustering<KMeansModel> result=new Clustering<>("Uk-Means Clustering","ukmeans-clustering");  for (int i=0; i < clusters.size(); i++) {    DBIDs ids=clusters.get(i);    if (ids.size() == 0) {      continue;    }    KMeansModel model=new KMeansModel(means.get(i),varsum[i]);    result.addToplevelCluster(new Cluster<>(ids,model));  }  return result;}  }
class C{  public Matrix3 transposeMatrix(Matrix3 matrix){  if (matrix == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Matrix3","transposeMatrix","missingMatrix"));  }  this.m[0]=matrix.m[0];  this.m[1]=matrix.m[3];  this.m[2]=matrix.m[6];  this.m[3]=matrix.m[1];  this.m[4]=matrix.m[4];  this.m[5]=matrix.m[7];  this.m[6]=matrix.m[2];  this.m[7]=matrix.m[5];  this.m[8]=matrix.m[8];  return this;}  }
class C{  public void writeEnumNoTag(final int value) throws IOException {  writeInt32NoTag(value);}  }
class C{  private void addTrustedCertChainsIfAbsent(ILdapMessage certChainsOld,List<ArrayList<String>> certChainsNew) throws CertificateEncodingException, NoSuchAlgorithmException {  if (certChainsOld != null) {    ILdapEntry[] entries=certChainsOld.getEntries();    if (entries != null && entries.length > 0) {      int certsIndex=getCurrMaxIndex(TRUSTED_CERT_CHAIN_OBJECT_CLASS,CONTAINER_TRUSTED_CERTIFICATE_CHAINS) + 1;      String dn=String.format("CN=%s,CN=%s,CN=Tenants,CN=IdentityManager,CN=Services,%s",CONTAINER_TRUSTED_CERTIFICATE_CHAINS,tenantName,this.rootDn);      Map<String,LdapMod[]> ldapObjects=new HashMap<>();      for (      ILdapEntry lduCert : entries) {        ArrayList<String> certFingerprints=new ArrayList<>();        certFingerprints.addAll(CertificatesUtil.getCertFingerPrints(lduCert));        if (!containsCertChain(certChainsNew,certFingerprints)) {          List<LdapMod> objAttributes=createAtts(lduCert);          String cn=getTrustedCertChainCn(certsIndex);          LdapValue[] values={new LdapValue(cn)};          LdapMod mod=new LdapMod(LdapModOperation.ADD,"cn",values);          objAttributes.add(mod);          String objNewDn="CN=" + cn + ","+ dn;          ldapObjects.put(objNewDn,objAttributes.toArray(new LdapMod[]{}));          certsIndex++;        }      }      if (ldapObjects != null && ldapObjects.size() > 0) {        addObjects(ldapObjects);      }    }  }}  }
class C{  public static org.oscm.vo.VOGatheredEvent convertToApi(org.oscm.internal.vo.VOGatheredEvent oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOGatheredEvent newVO=new org.oscm.vo.VOGatheredEvent();  newVO.setOccurrenceTime(oldVO.getOccurrenceTime());  newVO.setActor(oldVO.getActor());  newVO.setEventId(oldVO.getEventId());  newVO.setMultiplier(oldVO.getMultiplier());  newVO.setUniqueId(oldVO.getUniqueId());  return newVO;}  }
class C{  public void render(Graphics2D g,double scale){  this.render(g,scale,this.color);}  }
class C{  public boolean isOverloadEnabled(){  return _isOverloadEnabled;}  }
class C{  public Response serve(String uri,String method,Properties header,Properties parms,Properties files){  System.out.println(method + " '" + uri+ "' ");  Enumeration e=header.propertyNames();  while (e.hasMoreElements()) {    String value=(String)e.nextElement();    System.out.println("  HDR: '" + value + "' = '"+ header.getProperty(value)+ "'");  }  e=parms.propertyNames();  while (e.hasMoreElements()) {    String value=(String)e.nextElement();    System.out.println("  PRM: '" + value + "' = '"+ parms.getProperty(value)+ "'");  }  e=files.propertyNames();  while (e.hasMoreElements()) {    String value=(String)e.nextElement();    System.out.println("  UPLOADED: '" + value + "' = '"+ files.getProperty(value)+ "'");  }  String itemId=uri.replaceFirst("/","");  itemId=URLDecoder.decode(itemId);  String newUri=null;  if (ContentTree.hasNode(itemId)) {    ContentNode node=ContentTree.getNode(itemId);    if (node.isItem()) {      newUri=node.getFullPath();    }  }  if (newUri != null)   uri=newUri;  return serveFile(uri,header,myRootDir,false);}  }
class C{  public void load(Document document,String pathToElement) throws XMLException {  Element elem=(Element)DocUtil.evalXPathAsNode(document,pathToElement);  if (elem != null) {    BeanConverter converter=new BeanConverter(this,document);    converter.setValues(elem);  }}  }
class C{  public final boolean hasMessages(int what){  return mExec.hasMessages(what);}  }
class C{  public static Set<HGHandle> writeTransferedGraph(final Json atom,final HyperGraph graph) throws ClassNotFoundException {  return writeTransferedGraph(atom,graph,null);}  }
class C{  public boolean isRepeat(){  return this.repeatProperty.getValue();}  }
class C{  public static int remainder(int dividend,int divisor){  return (int)(toLong(dividend) % toLong(divisor));}  }
class C{  public NvpBuilder remove(final String name){  npv.remove(name);  return this;}  }
class C{  public MethodDescriptor(Method method){  this(method,null);}  }
class C{  public double[] computeLocalJointEntropyOfPreviousObservations() throws Exception {  return computeLocalJointEntropyUsingPreviousObservations(observations,true);}  }
class C{  static Path createDirectoryWithLongPath(Path dir) throws IOException {  StringBuilder sb=new StringBuilder();  for (int i=0; i < 240; i++) {    sb.append('A');  }  String name=sb.toString();  do {    dir=dir.resolve(name).resolve(".");    Files.createDirectory(dir);  } while (dir.toString().length() < 2048);  return dir;}  }
class C{  public static void fill(byte[] array,int start,int end,byte value){  Arrays.checkStartAndEnd(array.length,start,end);  for (int i=start; i < end; i++) {    array[i]=value;  }}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public int size(){  return size;}  }
class C{  public void initialize(Language language,String treeTaggerHome,Boolean annotateTokens,Boolean annotateSentences,Boolean annotatePartOfSpeech,Boolean improveGermanSentences,String cnTokPath){  this.setHome(treeTaggerHome);  TreeTaggerContext ttContext=new TreeTaggerContext(language,annotateTokens,annotateSentences,annotatePartOfSpeech,improveGermanSentences,cnTokPath);  this.initialize(ttContext);}  }
class C{  @Override public void endWindow(){  if (numList.size() == 0)   return;  double[] values=new double[numList.size()];  for (int i=0; i < numList.size(); i++) {    values[i]=numList.get(i).doubleValue();  }  try {    connectable.getRengine().assign("numList",values);  } catch (  REngineException e) {    log.error("Exception: ",e);    DTThrowable.rethrow(e);  }  double rMin=0;  try {    rMin=connectable.getRengine().parseAndEval("min(numList)").asDouble();    connectable.getRengine().parseAndEval("rm(list = setdiff(ls(), lsf.str()))");  } catch (  Exception e) {    log.error("Exception: ",e);    DTThrowable.rethrow(e);  }  log.debug(String.format("Min is : " + rMin));  min.emit(rMin);  numList.clear();}  }
class C{  protected void moveRandomly(OMPoint point,double factor,Projection proj){  double hor=Math.random() - .5;  double vert=Math.random() - .5;  Point2D mapPoint=proj.forward(point.getLat(),point.getLon());  mapPoint.setLocation(mapPoint.getX() + (hor * factor),mapPoint.getY() + (vert * factor));  Point2D llp=proj.inverse(mapPoint);  point.setLat(llp.getY());  point.setLon(llp.getX());}  }
class C{  private static WindowsPath resolveAllLinks(WindowsPath path) throws IOException {  assert path.isAbsolute();  WindowsFileSystem fs=path.getFileSystem();  int linkCount=0;  int elem=0;  while (elem < path.getNameCount()) {    WindowsPath current=path.getRoot().resolve(path.subpath(0,elem + 1));    WindowsFileAttributes attrs=null;    try {      attrs=WindowsFileAttributes.get(current,false);    } catch (    WindowsException x) {      x.rethrowAsIOException(current);    }    if (attrs.isSymbolicLink()) {      linkCount++;      if (linkCount > 32)       throw new IOException("Too many links");      WindowsPath target=WindowsPath.createFromNormalizedPath(fs,readLink(current));      WindowsPath remainder=null;      int count=path.getNameCount();      if ((elem + 1) < count) {        remainder=path.subpath(elem + 1,count);      }      path=current.getParent().resolve(target);      try {        String full=GetFullPathName(path.toString());        if (!full.equals(path.toString())) {          path=WindowsPath.createFromNormalizedPath(fs,full);        }      } catch (      WindowsException x) {        x.rethrowAsIOException(path);      }      if (remainder != null) {        path=path.resolve(remainder);      }      elem=0;    } else {      elem++;    }  }  return path;}  }
class C{  private static float centerFromEnd(int[] stateCount,int end){  return (float)(end - stateCount[2]) - stateCount[1] / 2.0f;}  }
class C{  @Override public MetaData readMetaDataAsComment() throws NoPersistedMetaDataException {  try {    String query=String.format("SELECT comment FROM system.schema_columnfamilies WHERE keyspace_name='%s' AND columnfamily_name='%s'",this.elasticAdminKeyspaceName,ELASTIC_ADMIN_METADATA_TABLE);    UntypedResultSet result=QueryProcessor.executeInternal(query);    if (result.isEmpty())     throw new NoPersistedMetaDataException("Failed to read comment from " + elasticAdminKeyspaceName + "+"+ ELASTIC_ADMIN_METADATA_TABLE);    String metadataString=result.one().getString(0);    logger.debug("Recover metadata from {}.{} = {}",elasticAdminKeyspaceName,ELASTIC_ADMIN_METADATA_TABLE,metadataString);    return parseMetaDataString(metadataString);  } catch (  RequestValidationException|RequestExecutionException e) {    throw new NoPersistedMetaDataException("Failed to read comment from " + elasticAdminKeyspaceName + "+"+ ELASTIC_ADMIN_METADATA_TABLE,e);  }}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case DomPackage.FULL_MEMBER_REFERENCE___MEMBER_NAME_SET:    return memberNameSet();case DomPackage.FULL_MEMBER_REFERENCE___TO_STRING:  return toString();}return super.eInvoke(operationID,arguments);}  }
class C{  @Override public double nextRandom(){  double val=random.nextDouble();  if (val < .5) {    return Math.log(2 * val) / rate + location;  } else {    return -Math.log(2. - 2. * val) / rate + location;  }}  }
class C{  public Token checkIsRedeemable(final String tokenNumber,final String service){  final Token token=findByTokenNumberandService(tokenNumber,service);  if (token == null)   throw new ApplicationRuntimeException("Token " + tokenNumber + " for service "+ service+ " does not exist!");  return checkIsRedeemable(token);}  }
class C{  public WarningPropertySet<T> removeProperty(T prop){  map.remove(prop);  return this;}  }
class C{  public static Properties loadMetaConfiguration(){  Properties meta=new Properties();  File metaFile=new File(".meta");  if (metaFile.exists() && metaFile.isFile() && metaFile.canRead()) {    FileInputStream fis=null;    try {      fis=new FileInputStream(metaFile);      meta.load(fis);    } catch (    Exception e) {      e.printStackTrace();    } finally {      closeQuietly(fis);    }  }  return meta;}  }
class C{  public CompiledST defineTemplate(String name,String argsS,String template){  if (name.charAt(0) != '/')   name="/" + name;  String[] args=argsS.split(",");  List<FormalArgument> a=new ArrayList<FormalArgument>();  for (  String arg : args) {    a.add(new FormalArgument(arg));  }  return defineTemplate(name,new CommonToken(GroupParser.ID,name),a,template,null);}  }
class C{  public Document readDocument(Reader reader) throws XMLStreamException {  return readDocument(reader,null);}  }
class C{  public static Matrix random(int m,int n){  Matrix a=new Matrix(m,n);  for (int i=0; i < m; i++)   for (int j=0; j < n; j++)   a.values[i][j]=Math.random();  return a;}  }
class C{  public void back(){  if (position > 0)   position--;}  }
class C{  public void addToBulk(String sql,String index) throws SQLException {  String sqlNorm=sql.trim().toLowerCase();  if (sqlNorm.startsWith("select"))   throw new SQLException("It is not possible to add a SELECT statement to a bulk");  this.bulkList.add(sql);}  }
class C{  @ObjectiveCName("findAllLinksWithPeer:") public Command<List<MessageSearchEntity>> findAllLinks(Peer peer){  return null;}  }
class C{  private LocalDate moveDateToFirstOccurrenceOfWeekday(FixedWeekdayRelativeToFixed f,LocalDate day){  final DayOfWeek weekday=xmlUtil.getWeekday(f.getWeekday());  return day.with(f.getWhen() == When.AFTER ? next(weekday) : previous(weekday));}  }
class C{  public Grammar(String grammarText,ANTLRToolListener listener) throws org.antlr.runtime.RecognitionException {  this(GRAMMAR_FROM_STRING_NAME,grammarText,listener);}  }
class C{  public T caseBitwiseOrExpression(BitwiseOrExpression object){  return null;}  }
class C{  public static ChartDays newInstance(){  final ChartDays returnInstance=new ChartDays();  returnInstance.setDefaultCode();  return returnInstance;}  }
class C{  public static boolean isStringLiteral(Literal l){  IRI datatype=l.getDatatype();  return Literals.isLanguageLiteral(l) || datatype.equals(XMLSchema.STRING);}  }
class C{  @Override public String resourceText(){  String substitutedBase=baseResource.resourceText();  for (  Tuple2<String,String> variableSubstitution : variableSubstitutions) {    String variableName=variableSubstitution._1();    String replacementValue=variableSubstitution._2();    substitutedBase=substitutedBase.replaceAll("\\$\\{" + variableName + "\\}",replacementValue);  }  return substitutedBase;}  }
class C{  private CloudMonitoringAuthSample(){}  }
class C{  public String numFoldsTipText(){  return "The number of folds to use when cross-validating to find the " + "best number of clusters (default = 10)";}  }
class C{  private void cannotLoadImage(){  CharSequence text=getString(R.string.cannot_load_image);  Toast toast=Toast.makeText(this,text,Toast.LENGTH_SHORT);  toast.show();}  }
class C{  public void blockRequestOnBuckets(Range<Integer> splitRange){  lockManager.blockRequestOnBuckets(splitRange);}  }
class C{  public ToStringBuilder append(final String fieldName,final int value){  style.append(buffer,fieldName,value);  return this;}  }
class C{  public Set<Integer> primaryPartitions(UUID nodeId){  Set<Integer> set=primary.get(nodeId);  return set == null ? Collections.<Integer>emptySet() : set;}  }
class C{  @Nullable public PsiClass findClass(String fqn,GdslMembersHolderConsumer consumer){  final JavaPsiFacade facade=JavaPsiFacade.getInstance(consumer.getProject());  return facade.findClass(fqn,GlobalSearchScope.allScope(consumer.getProject()));}  }
class C{  public Shape modelToView(int pos,Shape a,Position.Bias b) throws BadLocationException {  Element map=getElement();  RSyntaxDocument doc=(RSyntaxDocument)getDocument();  int lineIndex=map.getElementIndex(pos);  Rectangle lineArea=lineToRect(a,lineIndex);  tabBase=lineArea.x;  Token tokenList=doc.getTokenListForLine(lineIndex);  lineArea=tokenList.listOffsetToView((RSyntaxTextArea)getContainer(),this,pos,tabBase,lineArea);  return lineArea;}  }
class C{  public boolean isRunning(){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT && valueAnimator.isPaused()) {    return false;  }  return valueAnimator.isRunning();}  }
class C{  public void addMgmtData(String mgmtdata){  this.add(new MgmtData(this.doc,mgmtdata));}  }
class C{  public void test_parseLjava_io_File() throws IOException {  File f=Support_Resources.resourceToTempFile("/simple.xml");  try {    Document d=db.parse(f);    assertNotNull(d);    assertEquals(2,d.getChildNodes().getLength());    assertEquals("#comment",d.getChildNodes().item(0).getNodeName());    assertEquals("breakfast_menu",d.getChildNodes().item(1).getNodeName());  } catch (  IOException ioe) {    fail("Unexpected IOException " + ioe.toString());  }catch (  SAXException sax) {    fail("Unexpected SAXException " + sax.toString());  }  try {    db.parse((File)null);    fail("Expected IllegalArgumentException was not thrown");  } catch (  IllegalArgumentException iae) {  }catch (  IOException ioe) {    fail("Unexpected IOException " + ioe.toString());  }catch (  SAXException sax) {    fail("Unexpected SAXException " + sax.toString());  }  try {    db.parse(new File("_"));    fail("Expected IOException was not thrown");  } catch (  IOException ioe) {  }catch (  SAXException sax) {    fail("Unexpected SAXException " + sax.toString());  }  f=Support_Resources.resourceToTempFile("/wrong.xml");  try {    db.parse(f);    fail("Expected SAXException was not thrown");  } catch (  IOException ioe) {    fail("Unexpected IOException " + ioe.toString());  }catch (  SAXException sax) {  }}  }
class C{  public boolean isFullscreen(){  return mFullscreen;}  }
class C{  public JMenuItem createLafMenuItem(JMenu menu,String label,String mnemonic,String accessibleDescription,String laf){  JMenuItem mi=(JRadioButtonMenuItem)menu.add(new JRadioButtonMenuItem(getString(label)));  lafMenuGroup.add(mi);  mi.setMnemonic(getMnemonic(mnemonic));  mi.getAccessibleContext().setAccessibleDescription(getString(accessibleDescription));  return mi;}  }
class C{  public void show(int x,int y){  hide();  updateActions();  lockLayer=new MenuLockLayer(this);  popupMenu=new PopupMenu(actions,actionManager,place,presentationFactory,lockLayer,this,keyBindingAgent,"contextMenu");  lockLayer.add(popupMenu);  popupMenu.getElement().getStyle().setTop(y,com.google.gwt.dom.client.Style.Unit.PX);  popupMenu.getElement().getStyle().setLeft(x,com.google.gwt.dom.client.Style.Unit.PX);}  }
class C{  public static String convertBytesToHex(byte[] value,int len){  char[] buff=new char[len + len];  char[] hex=HEX;  for (int i=0; i < len; i++) {    int c=value[i] & 0xff;    buff[i + i]=hex[c >> 4];    buff[i + i + 1]=hex[c & 0xf];  }  return new String(buff);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public DBPNNTest(String name){  super(name);}  }
class C{  @Override public boolean sameAs(CacheServer other){  ClientSubscriptionConfig cscThis=this.getClientSubscriptionConfig();  ClientSubscriptionConfig cscOther=other.getClientSubscriptionConfig();  boolean result=isCacheServerPortEquals(other) && this.getSocketBufferSize() == other.getSocketBufferSize() && this.getMaximumTimeBetweenPings() == other.getMaximumTimeBetweenPings() && this.getNotifyBySubscription() == other.getNotifyBySubscription() && this.getMaxConnections() == other.getMaxConnections() && this.getMaxThreads() == other.getMaxThreads() && this.getMaximumMessageCount() == other.getMaximumMessageCount() && this.getMessageTimeToLive() == other.getMessageTimeToLive() && this.getTcpNoDelay() == other.getTcpNoDelay() && cscThis.getCapacity() == cscOther.getCapacity() && cscThis.getEvictionPolicy().equals(cscOther.getEvictionPolicy());  String diskStoreName=cscThis.getDiskStoreName();  if (diskStoreName != null) {    result=result && diskStoreName.equals(cscOther.getDiskStoreName());  } else {    result=result && cscThis.getOverflowDirectory().equals(cscOther.getOverflowDirectory());  }  return result;}  }
class C{  public void runTest() throws Throwable {  String localName="nomatch";  String namespaceURI="http://www.usa.com";  Document doc;  NodeList elementList;  Element testNode;  boolean state;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("address");  testNode=(Element)elementList.item(0);  state=testNode.hasAttributeNS(namespaceURI,localName);  assertFalse("throw_False",state);}  }
class C{  public static MavenArtifact parseMavenArtifact(String line){  if (line != null) {    final String[] segments=removeLoggerPrefix(line).split(":");    if (segments.length >= 5) {      final String groupId=segments[0];      final String artifactId=segments[1];      final String type=segments[2];      final String classifier;      final String version;      final String scope;      if (segments.length == 5) {        version=segments[3];        classifier=null;        scope=segments[4];      } else {        version=segments[4];        classifier=segments[3];        scope=segments[5];      }      return new MavenArtifact(groupId,artifactId,type,classifier,version,scope);    }  }  return null;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void parseNumbers(){  for (int i='0'; i <= '9'; i++) {    tokenTypes[i]|=TOKEN_DIGIT;  }  tokenTypes['.']|=TOKEN_DIGIT;  tokenTypes['-']|=TOKEN_DIGIT;}  }
class C{  public void verify() throws VerificationException {  final Transaction fromTx=getOutpoint().fromTx;  long spendingIndex=getOutpoint().getIndex();  checkNotNull(fromTx,"Not connected");  final TransactionOutput output=fromTx.getOutput((int)spendingIndex);  verify(output);}  }
class C{  private static void validate(VOTriggerDefinition vo) throws ValidationException {  BLValidator.isDescription(FIELD_NAME_TARGET,vo.getTarget(),true);  BLValidator.isNotNull(FIELD_NAME_TYPE,vo.getType());  BLValidator.isNotNull(FIELD_NAME_TARGET_TYPE,vo.getTargetType());  BLValidator.isNotNull(FIELD_NAME_NAME,vo.getName());  if (vo.isSuspendProcess() && !vo.getType().isSuspendProcess()) {    ValidationException vf=new ValidationException(ReasonEnum.TRIGGER_TYPE_SUPPORTS_NO_PROCESS_SUSPENDING,FIELD_NAME_TYPE,new Object[]{vo.getType().name()});    logger.logWarn(Log4jLogger.SYSTEM_LOG,vf,LogMessageIdentifier.ERROR_TRIGGER_TYPE_NOT_SUPPORTED_PROCESS_SUSPENDING,vo.getType().name());    throw vf;  }}  }
class C{  protected ReplacedElement replaceImage(UserAgentCallback uac,LayoutContext context,Element elem,int cssWidth,int cssHeight){  ReplacedElement re=null;  String imageSrc=context.getNamespaceHandler().getImageSourceURI(elem);  if (imageSrc == null || imageSrc.length() == 0) {    XRLog.layout(Level.WARNING,"No source provided for img element.");    re=newIrreplaceableImageElement(cssWidth,cssHeight);  } else   if (ImageUtil.isEmbeddedBase64Image(imageSrc)) {    BufferedImage image=ImageUtil.loadEmbeddedBase64Image(imageSrc);    if (image != null) {      re=new ImageReplacedElement(image,cssWidth,cssHeight);    }  } else {    String ruri=uac.resolveURI(imageSrc);    re=lookupImageReplacedElement(elem,ruri,cssWidth,cssHeight);    if (re == null) {      XRLog.load(Level.FINE,"Swing: Image " + ruri + " requested at "+ " to "+ cssWidth+ ", "+ cssHeight);      ImageResource imageResource=imageResourceLoader.get(ruri,cssWidth,cssHeight);      if (imageResource.isLoaded()) {        re=new ImageReplacedElement(((AWTFSImage)imageResource.getImage()).getImage(),cssWidth,cssHeight);      } else {        re=new DeferredImageReplacedElement(imageResource,repaintListener,cssWidth,cssHeight);      }      storeImageReplacedElement(elem,re,ruri,cssWidth,cssHeight);    }  }  return re;}  }
class C{  public void cancelSim(){  this.isCancelled=true;}  }
class C{  public void onNetConnected(NetUtils.NetType type){}  }
class C{  public NotificationChain basicSetExpression(Expression newExpression,NotificationChain msgs){  Expression oldExpression=expression;  expression=newExpression;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.SWITCH_STATEMENT__EXPRESSION,oldExpression,newExpression);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public void testPingPong1xMtu(){  PseudoTcpTestPingPong test=new PseudoTcpTestPingPong();  test.setLocalMtu(1500);  test.setRemoteMtu(1500);  test.doTestPingPong(100,100);}  }
class C{  @Nullable public SMTestProxy popSuite(final String suiteName) throws EmptyStackException {  if (myStack.isEmpty()) {    if (SMTestRunnerConnectionUtil.isInDebugMode()) {      LOG.error("Pop error: Tests/suites stack is empty. Test runner tried to close test suite " + "which has been already closed or wasn't started at all. Unexpected suite name [" + suiteName + "]");    }    return null;  }  final SMTestProxy topSuite=myStack.peek();  if (!suiteName.equals(topSuite.getName())) {    if (SMTestRunnerConnectionUtil.isInDebugMode()) {      LOG.error("Pop error: Unexpected closing suite. Expected [" + suiteName + "] but ["+ topSuite.getName()+ "] was found. Rest of stack: "+ getSuitePathPresentation());    } else {      SMTestProxy expectedProxy=null;      for (      SMTestProxy candidateProxy : myStack) {        if (suiteName.equals(candidateProxy.getName())) {          expectedProxy=candidateProxy;          break;        }      }      if (expectedProxy != null) {        SMTestProxy proxy=topSuite;        while (proxy != expectedProxy) {          proxy=myStack.pop();        }        return expectedProxy;      } else {        return null;      }    }    return null;  } else {    myStack.pop();  }  return topSuite;}  }
class C{  public static boolean continueCondition(final long thetaLong,final long hash){  return (((hash - 1L) | (thetaLong - hash - 1L)) < 0L);}  }
class C{  @Override public boolean containsKey(K key){  return cache.containsKey(key) ? !isExpired(key) : false;}  }
class C{  public SnmpUnsignedInt(long v) throws IllegalArgumentException {  super(v);}  }
class C{  public static <S extends HasKeyDownHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    KeyDownEvent event=new KeyDownEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    if (zzMarkedPosL > zzStartRead) {switch (zzBufferL[zzMarkedPosL - 1]) {case '\n':case '\u000B':case '\u000C':case '\u0085':case '\u2028':case '\u2029':        zzAtBOL=true;      break;case '\r':    if (zzMarkedPosL < zzEndReadL)     zzAtBOL=zzBufferL[zzMarkedPosL] != '\n'; else     if (zzAtEOF)     zzAtBOL=false; else {      boolean eof=zzRefill();      zzMarkedPosL=zzMarkedPos;      zzEndReadL=zzEndRead;      zzBufferL=zzBuffer;      if (eof)       zzAtBOL=false; else       zzAtBOL=zzBufferL[zzMarkedPosL] != '\n';    }  break;default :zzAtBOL=false;}}zzAction=-1;zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;if (zzAtBOL) zzState=ZZ_LEXSTATE[zzLexicalState + 1]; else zzState=ZZ_LEXSTATE[zzLexicalState];zzForAction: {while (true) {if (zzCurrentPosL < zzEndReadL) zzInput=zzBufferL[zzCurrentPosL++]; else if (zzAtEOF) {zzInput=YYEOF;break zzForAction;} else {zzCurrentPos=zzCurrentPosL;zzMarkedPos=zzMarkedPosL;boolean eof=zzRefill();zzCurrentPosL=zzCurrentPos;zzMarkedPosL=zzMarkedPos;zzBufferL=zzBuffer;zzEndReadL=zzEndRead;if (eof) {  zzInput=YYEOF;  break zzForAction;} else {  zzInput=zzBufferL[zzCurrentPosL++];}}int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];if (zzNext == -1) break zzForAction;zzState=zzNext;int zzAttributes=zzAttrL[zzState];if ((zzAttributes & 1) == 1) {zzAction=zzState;zzMarkedPosL=zzCurrentPosL;if ((zzAttributes & 8) == 8) break zzForAction;}}}zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 13:{yybegin(YYINITIAL);addToken(start,zzStartRead - 1,Token.LITERAL_CHAR);return firstToken;}case 21:break;case 2:{addNullToken();return firstToken;}case 22:break;case 18:{yybegin(YYINITIAL);addToken(start,zzStartRead + 1,Token.COMMENT_MULTILINE);}case 23:break;case 17:{start=zzMarkedPos - 2;yybegin(MLC);}case 24:break;case 3:{addToken(Token.WHITESPACE);}case 25:break;case 8:{start=zzMarkedPos - 1;yybegin(CHAR);}case 26:break;case 5:{addToken(Token.RESERVED_WORD);}case 27:break;case 6:{addToken(Token.SEPARATOR);}case 28:break;case 16:{addToken(Token.VARIABLE);}case 29:break;case 14:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.LITERAL_CHAR);}case 30:break;case 1:{addToken(Token.IDENTIFIER);}case 31:break;case 20:{addToken(Token.FUNCTION);}case 32:break;case 19:{addToken(Token.DATA_TYPE);}case 33:break;case 11:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 34:break;case 9:{start=zzStartRead;if (yylength() > 1) {addToken(zzStartRead,zzMarkedPos - 2,Token.WHITESPACE);zzStartRead=zzMarkedPos - 1;}if (start == s.offset) {addToken(zzStartRead,zzEndRead,Token.COMMENT_EOL);addNullToken();return firstToken;} else {addToken(zzStartRead,zzStartRead,Token.OPERATOR);}}case 35:break;case 7:{start=zzMarkedPos - 1;yybegin(STRING);}case 36:break;case 4:{addToken(Token.OPERATOR);}case 37:break;case 12:{yybegin(YYINITIAL);addToken(start,zzStartRead,Token.LITERAL_STRING_DOUBLE_QUOTE);}case 38:break;case 10:{}case 39:break;case 15:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 40:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;switch (zzLexicalState) {case STRING:{addToken(start,zzStartRead - 1,Token.LITERAL_STRING_DOUBLE_QUOTE);return firstToken;}case 640:break;case YYINITIAL:{addNullToken();return firstToken;}case 641:break;case MLC:{addToken(start,zzStartRead - 1,Token.COMMENT_MULTILINE);return firstToken;}case 642:break;case CHAR:{addToken(start,zzStartRead - 1,Token.LITERAL_CHAR);return firstToken;}case 643:break;default :return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public void installBorder(JRootPane root){  int style=root.getWindowDecorationStyle();  if (style == JRootPane.NONE) {    LookAndFeel.uninstallBorder(root);  } else {    root.setBorder(new SeaGlassBorder(this,new Insets(0,1,1,1)));  }}  }
class C{  @Override public boolean startSensorialRotation(){  if (!mIsValidForSensorialRotation) {    if (this.activateGyroscope()) {      mHasFirstGyroscopePitch=false;      mGyroscopeLastTime=0;      mGyroscopeRotationX=mGyroscopeRotationY=0.0f;      mSensorialRotationType=PLSensorialRotationType.PLSensorialRotationTypeGyroscope;      mIsValidForSensorialRotation=true;    } else {      PLLog.debug("PLView::startSensorialRotation","Gyroscope sensor is not available on device!");      if (mSensorManager != null && mSensorManager.getSensorList(Sensor.TYPE_ACCELEROMETER).size() > 0 && mSensorManager.getSensorList(Sensor.TYPE_MAGNETIC_FIELD).size() > 0) {        mSensorialRotationThresholdTimestamp=0;        mSensorialRotationThresholdFlag=false;        mSensorialRotationAccelerometerData=new float[3];        mSensorialRotationRotationMatrix=new float[16];        mSensorialRotationOrientationData=new float[3];        mHasFirstAccelerometerPitch=mHasFirstMagneticHeading=false;        mFirstAccelerometerPitch=mLastAccelerometerPitch=mAccelerometerPitch=0.0f;        mFirstMagneticHeading=mLastMagneticHeading=mMagneticHeading=0.0f;        mSensorialRotationType=PLSensorialRotationType.PLSensorialRotationTypeAccelerometerAndMagnetometer;        mIsValidForSensorialRotation=true;        this.activateMagnetometer();      } else       PLLog.debug("PLView::startSensorialRotation","Accelerometer or/and magnetometer sensor/s is/are not available on device!");    }    return mIsValidForSensorialRotation;  }  return false;}  }
class C{  @Deprecated public void logrb(Level level,String sourceClass,String sourceMethod,String bundleName,String msg,Throwable thrown){  if (!isLoggable(level)) {    return;  }  LogRecord lr=new LogRecord(level,msg);  lr.setSourceClassName(sourceClass);  lr.setSourceMethodName(sourceMethod);  lr.setThrown(thrown);  doLog(lr,bundleName);}  }
class C{  public static List<AbstractInsnNode> searchForOpcodes(InsnList insnList,int... opcodes){  Validate.notNull(insnList);  Validate.notNull(opcodes);  Validate.isTrue(opcodes.length > 0);  List<AbstractInsnNode> ret=new LinkedList<>();  Set<Integer> opcodeSet=new HashSet<>();  Arrays.stream(opcodes).forEach(null);  Iterator<AbstractInsnNode> it=insnList.iterator();  while (it.hasNext()) {    AbstractInsnNode insnNode=it.next();    if (opcodeSet.contains(insnNode.getOpcode())) {      ret.add(insnNode);    }  }  return ret;}  }
class C{  protected void start(S state){  ServiceUtils.logInfo(this,"Starting task service for workflow %s",state.documentSelfLink);  try {    TaskServiceUtils.start(this,ServiceDocumentUtils.getTaskServiceState(state),null);  } catch (  Throwable t) {    fail(state,t);  }}  }
class C{  @Override protected byte[] decrypt(byte type,byte[] fragment,int offset,int len){  byte[] data=decCipher.update(fragment,offset,len);  byte[] content;  if (block_size != 0) {    int padding_length=data[data.length - 1] & 0xFF;    for (int i=0; i < padding_length; i++) {      if ((data[data.length - 2 - i] & 0xFF) != padding_length) {        throw new AlertException(AlertProtocol.DECRYPTION_FAILED,new SSLProtocolException("Received message has bad padding"));      }    }    content=new byte[data.length - hash_size - padding_length- 1];  } else {    content=new byte[data.length - hash_size];  }  byte[] mac_value;  mac_material_part[0]=type;  mac_material_part[1]=(byte)((0x00FF00 & content.length) >> 8);  mac_material_part[2]=(byte)(0x0000FF & content.length);  messageDigest.update(mac_read_secret);  messageDigest.update(pad_1);  messageDigest.update(read_seq_num);  messageDigest.update(mac_material_part);  messageDigest.update(data,0,content.length);  mac_value=messageDigest.digest();  messageDigest.update(mac_read_secret);  messageDigest.update(pad_2);  messageDigest.update(mac_value);  mac_value=messageDigest.digest();  if (logger != null) {    logger.println("Decrypted:");    logger.print(data);    logger.println("Expected mac value:");    logger.print(mac_value);  }  for (int i=0; i < hash_size; i++) {    if (mac_value[i] != data[i + content.length]) {      throw new AlertException(AlertProtocol.BAD_RECORD_MAC,new SSLProtocolException("Bad record MAC"));    }  }  System.arraycopy(data,0,content,0,content.length);  incSequenceNumber(read_seq_num);  return content;}  }
class C{  public static String loadConfigurationContents(File file) throws IOException {  String result=null;  if (file.exists()) {    result=IOUtil.readString(file);  }  return result;}  }
class C{  public XmlEntity(Reader reader) throws IOException, XmlPullParserException {  this();  this.parseXml(reader);}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  ignoreTooFar=false;  ignoreRoomCheck=false;}  }
class C{  public final void yyreset(java.io.Reader reader){  zzReader=reader;  zzAtBOL=true;  zzAtEOF=false;  zzEOFDone=false;  zzEndRead=zzStartRead=0;  zzCurrentPos=zzMarkedPos=0;  zzFinalHighSurrogate=0;  yyline=yychar=yycolumn=0;  zzLexicalState=YYINITIAL;  if (zzBuffer.length > ZZ_BUFFERSIZE)   zzBuffer=new char[ZZ_BUFFERSIZE];}  }
class C{  private void handleRuntimeException(Exception ex){  handleGenericException(ex);}  }
class C{  public void suspendEncoding() throws java.io.IOException {  flushBase64();  this.suspendEncoding=true;}  }
class C{  public void uploadFile(Path fileToUpload,String destinationFileName,boolean overwrite) throws IOException {  Preconditions.checkNotNull(fileToUpload);  Preconditions.checkArgument(Files.exists(fileToUpload));  Preconditions.checkArgument(!Strings.isNullOrEmpty(destinationFileName));  sauceRest.uploadFile(fileToUpload.toFile(),destinationFileName,overwrite);}  }
class C{  public static PropertyInfo[] extractBeanPropertiesInfo(Type type){  Class<?> rawType=getRawType(type);  List<PropertyInfo> result=new ArrayList<PropertyInfo>();  List<Method> getterMethods=getGetterMethods(rawType);  List<Method> setterMethods=getSetterMethods(rawType);  try {    for (    Method setterMethod : setterMethods) {      String setterProperty=getPropertyForGetterOrSetterMethod(setterMethod);      for (      Method getterMethod : getterMethods) {        String getterProperty=getPropertyForGetterOrSetterMethod(getterMethod);        if (getterProperty.equals(setterProperty)) {          Type returnType=getterMethod.getGenericReturnType();          Type propertyType=getPropertyType(returnType,type,rawType);          result.add(new PropertyInfo(setterProperty,propertyType,getterMethod,setterMethod));          break;        }      }    }  } catch (  Exception e) {    throw new RuntimeException("Unable to determine properties for bean: " + rawType.getCanonicalName(),e);  }  return result.toArray(new PropertyInfo[result.size()]);}  }
class C{  public void insertBitmap(final BufferedImage bitmap,final int x,final int y,final int transRGB){  final int heightSrc=bitmap.getHeight();  final int widthSrc=bitmap.getWidth();  final int heightTgt=this.height;  final int widthTgt=this.width;  int rgb;  for (int i=0; i < heightSrc; i++) {    for (int j=0; j < widthSrc; j++) {      if (j + x >= 0 && i + y >= 0 && i + y < heightTgt && j + x < widthTgt) {        rgb=bitmap.getRGB(j,i);        if (rgb != transRGB) {          this.image.setRGB(j + x,i + y,rgb);        }      }    }  }}  }
class C{  public void sortInstances(int columnIndex){  if ((columnIndex > 0) && (columnIndex < getColumnCount())) {    addUndoPoint();    m_Data.sort(columnIndex - 1);    notifyListener(new TableModelEvent(this));  }}  }
class C{  public boolean containsValue(int val){  byte[] states=_states;  int[] vals=_values;  for (int i=vals.length; i-- > 0; ) {    if (states[i] == FULL && val == vals[i]) {      return true;    }  }  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:34.456 -0500",hash_original_method="22D6B687019E482F52E54287A969D6A5",hash_generated_method="C32D6CB831C1F0D7542068CB05AFBD33") public boolean match(Object other){  if (other == null)   return true;  if (!(other instanceof Address))   return false; else {    AddressImpl that=(AddressImpl)other;    if (that.getMatcher() != null)     return that.getMatcher().match(this.encode()); else     if (that.displayName != null && this.displayName == null)     return false; else     if (that.displayName == null)     return address.match(that.address); else     return displayName.equalsIgnoreCase(that.displayName) && address.match(that.address);  }}  }
class C{  public void cancel(String name){  services.cancel(name);}  }
class C{  public long length(byte[] key) throws IOException {  assert (this.index != null) : "index == null; closeDate=" + this.closeDate + ", now="+ new Date();  if (this.index == null) {    log.severe("this.index == null in length(); closeDate=" + this.closeDate + ", now="+ new Date()+ this.heapFile == null ? "" : (" file = " + this.heapFile.toString()));    return 0;  }  key=normalizeKey(key);synchronized (this.index) {    final long pos=this.index.get(key);    if (pos < 0)     return -1;    this.file.seek(pos);    return this.file.readInt() - this.keylength;  }}  }
class C{  @Override public String toString(){  return this.getClass().getName();}  }
class C{  public static GT_Tool_Item constructEmptyElectricToolItem(String aUnlocalized,String aEnglish,int aMaxDamage,int aChargedGTID){  try {    return (GT_Tool_Item)Class.forName("gregtechmod.api.items.GT_EmptyToolIC_Item").getConstructors()[0].newInstance(aUnlocalized,aEnglish,aMaxDamage,aChargedGTID);  } catch (  Throwable e) {  }  return new gregtech.api.items.GT_Tool_Item(aUnlocalized,aEnglish,"Doesn't work as intended, this is a Bug",aMaxDamage,0,false);}  }
class C{  @After public void tearDown(){  webClient.closeAllWindows();}  }
class C{  private static String diff(FormatTask task,Formatter formatter,File file) throws IOException {  String raw=new String(Files.readAllBytes(file.toPath()),formatter.encoding);  String rawUnix=LineEnding.toUnix(raw);  String formattedUnix;  if (task.paddedCell) {    formattedUnix=PaddedCell.check(formatter,file,rawUnix).canonical();  } else {    formattedUnix=formatter.applySteps(rawUnix,file);  }  if (rawUnix.equals(formattedUnix)) {    String formatted=formatter.applyLineEndings(formattedUnix,file);    return diffWhitespaceLineEndings(raw,formatted,false,true);  } else {    return diffWhitespaceLineEndings(rawUnix,formattedUnix,true,false);  }}  }
class C{  public void debugWriteFile(){  debugWriteFile(".");}  }
class C{  public final static long murmurHash3(long x){  x^=x >>> 33;  x*=0xff51afd7ed558ccdL;  x^=x >>> 33;  x*=0xc4ceb9fe1a85ec53L;  x^=x >>> 33;  return x;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public boolean equals(Object o){  if (this == o)   return true;  if (o == null || getClass() != o.getClass())   return false;  Insets insets=(Insets)o;  if (bottom != insets.bottom)   return false;  if (left != insets.left)   return false;  if (right != insets.right)   return false;  if (top != insets.top)   return false;  return true;}  }
class C{  public List<StoragePort> selectStoragePorts(DbClient dbClient,Map<StoragePort,Long> sportMap,NetworkLite net,URI varrayURI,Integer numPorts,Set<StoragePort> previouslyAllocatedPorts,boolean allowFewerPorts) throws PlacementException {  if (numPorts == null || numPorts <= 0) {    numPorts=2;  }  boolean checkConnectivity=false;  VirtualArray varray=dbClient.queryObject(VirtualArray.class,varrayURI);  if (varray != null && NetworkScheduler.isZoningRequired(dbClient,varray) && !net.getTransportType().equals(StorageProtocol.Transport.IP.name())) {    checkConnectivity=true;  }  StoragePortsAllocator allocator=new StoragePortsAllocator();  PortAllocationContext ctx=null;  for (  StoragePort sp : sportMap.keySet()) {    StorageHADomain haDomain=null;    if (sp.getStorageHADomain() != null) {      haDomain=dbClient.queryObject(StorageHADomain.class,sp.getStorageHADomain());    }    StorageSystem storageSystem=dbClient.queryObject(StorageSystem.class,sp.getStorageDevice());    String switchName=getSwitchName(sp,dbClient);    if (ctx == null) {      ctx=new PortAllocationContext(net,storageSystem.getNativeGuid(),context);    }    Long usage=sportMap.get(sp);    ctx.addPort(sp,haDomain,StorageSystem.Type.valueOf(storageSystem.getSystemType()),switchName,usage);  }  List<StoragePort> portUris=allocator.allocatePortsForNetwork(numPorts,ctx,checkConnectivity,previouslyAllocatedPorts,allowFewerPorts);  context=ctx;  return portUris;}  }
class C{  public void onContentViewChanged(NotificationView view,View contentView,int layoutId){  if (DBG)   Log.v(TAG,"onContentViewChanged");  ChildViewManager mgr=view.getChildViewManager();  if (layoutId == R.layout.notification_simple || layoutId == R.layout.notification_large_icon || layoutId == R.layout.notification_full) {    view.setNotificationTransitionEnabled(false);    mgr.setView(ICON,contentView.findViewById(R.id.switcher_icon));    mgr.setView(TITLE,contentView.findViewById(R.id.switcher_title));    mgr.setView(TEXT,contentView.findViewById(R.id.switcher_text));    mgr.setView(WHEN,contentView.findViewById(R.id.switcher_when));  } else   if (layoutId == R.layout.notification_simple_2) {    view.setNotificationTransitionEnabled(true);    mgr.setView(ICON,contentView.findViewById(R.id.icon));    mgr.setView(TITLE,contentView.findViewById(R.id.title));    mgr.setView(TEXT,contentView.findViewById(R.id.text));    mgr.setView(WHEN,contentView.findViewById(R.id.when));  }}  }
class C{  private static void assertChangeEvents(Collection<PortChangeEvent> earlyEvents,Collection<PortChangeEvent> lateEvents,Collection<PortChangeEvent> anytimeEvents,Collection<PortChangeEvent> actualEvents){  String inputDesc=String.format("earlyEvents=%s, lateEvents=%s, " + "anytimeEvents=%s, actualEvents=%s",earlyEvents.toString(),lateEvents.toString(),anytimeEvents.toString(),actualEvents.toString());  Collection<PortChangeEvent> early=new ArrayList<PortChangeEvent>(earlyEvents);  Collection<PortChangeEvent> late=new ArrayList<PortChangeEvent>(lateEvents);  Collection<PortChangeEvent> any=new ArrayList<PortChangeEvent>(anytimeEvents);  for (  PortChangeEvent ev : early) {    assertFalse("Test setup error. Early and late overlap",late.contains(ev));    assertFalse("Test setup error. Early and anytime overlap",any.contains(ev));  }  for (  PortChangeEvent ev : late) {    assertFalse("Test setup error. Late and early overlap",early.contains(ev));    assertFalse("Test setup error. Late and any overlap",any.contains(ev));  }  for (  PortChangeEvent ev : any) {    assertFalse("Test setup error. Anytime and early overlap",early.contains(ev));    assertFalse("Test setup error. Anytime and late overlap",late.contains(ev));  }  for (  PortChangeEvent a : actualEvents) {    if (early.remove(a)) {      continue;    }    if (any.remove(a)) {      continue;    }    if (late.remove(a)) {      if (!early.isEmpty()) {        fail(a + " is in late list, but haven't seen all required " + "early events. "+ inputDesc);      } else {        continue;      }    }    fail(a + " was not expected. " + inputDesc);  }  if (!early.isEmpty())   fail("Elements left in early: " + early + ". "+ inputDesc);  if (!late.isEmpty())   fail("Elements left in late: " + late + ". "+ inputDesc);  if (!any.isEmpty())   fail("Elements left in any: " + any + ". "+ inputDesc);}  }
class C{  public SPARQLRepository(String queryEndpointUrl,String updateEndpointUrl){  if (queryEndpointUrl == null || updateEndpointUrl == null) {    throw new IllegalArgumentException("endpoint URL may not be null.");  }  this.queryEndpointUrl=queryEndpointUrl;  this.updateEndpointUrl=updateEndpointUrl;}  }
class C{  public boolean isRefreshing(){  return STATUS.isRefreshing(mStatus);}  }
class C{  public static void deleteCertRequest(String certRequestId) throws Exception {  LOG.trace("Deleting cert request '{}'",certRequestId);  execute(new DeleteCertRequest(certRequestId));}  }
class C{  public static String readDefinitionsFile(String file) throws IOException {  BufferedReader br=new BufferedReader(new FileReader(file));  try {    StringBuilder builder=new StringBuilder();    String line=null;    String newLine=System.getProperty("line.separator");    while ((line=br.readLine()) != null) {      builder.append(line);      builder.append(newLine);    }    return builder.toString();  }  finally {    try {      if (br != null)       br.close();    } catch (    IOException ex) {      logger.warn("Unable to close file " + file + ": "+ ex.toString());    }  }}  }
class C{  public CompressionCacheListenerDUnitTest(){  super();}  }
class C{  public PrincipalEntry(String principalClass,String principalName){  if (principalClass == null || principalName == null)   throw new NullPointerException(ResourcesMgr.getString("null.principalClass.or.principalName"));  this.principalClass=principalClass;  this.principalName=principalName;}  }
class C{  @Override public boolean isFactoryForType(Object object){  if (object == modelPackage) {    return true;  }  if (object instanceof EObject) {    return ((EObject)object).eClass().getEPackage() == modelPackage;  }  return false;}  }
class C{  private void addIfConcrete(Type type){  if (!type.isVoid() && !type.isGeneric() && !(type.isParameterized() && ((ParameterizedType)type).hasWildcard())) {    if (!predicate.isVisible(type.getRuntimeClass())) {      return;    }    if (type.isPrimitive()) {      type=((PrimitiveType)type).toBoxedPrimitive();    }    if (Log.isLoggingOn()) {      Log.logLine("Adding " + type + " as candidate parameter type");    }    inputTypes.add(type);  }}  }
class C{  public boolean within(Geometry g){  return baseGeom.within(g);}  }
class C{  public static float checkArgumentFinite(final float value,final String valueName){  if (Float.isNaN(value)) {    throw new IllegalArgumentException(valueName + " must not be NaN");  } else   if (Float.isInfinite(value)) {    throw new IllegalArgumentException(valueName + " must not be infinite");  }  return value;}  }
class C{  @Override public void removeVetoableChangeListener(String name,VetoableChangeListener vcl){  m_bcSupport.removeVetoableChangeListener(name,vcl);}  }
class C{  private static ClientProtocol createProtocol(String addr,Configuration conf) throws IOException {  return new HadoopClientProtocol(conf,client(addr));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:13.386 -0500",hash_original_method="1E3E40D5CDC8E036C03E11512D357967",hash_generated_method="62E3811DA36AD04887EE581C18525045") public DERUTCTime(String time){  this.time=time;  try {    this.getDate();  } catch (  ParseException e) {    throw new IllegalArgumentException("invalid date string: " + e.getMessage());  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:20.878 -0500",hash_original_method="C51ADCEBFAB6A11E8C0AA42A3197A4ED",hash_generated_method="E2D123D1E548598D71D6411AA5C174CA") @Override public Node insertChildAt(Node toInsert,int index){  if (toInsert instanceof Element && getDocumentElement() != null) {    throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,"Only one root element allowed");  }  if (toInsert instanceof DocumentType && getDoctype() != null) {    throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,"Only one DOCTYPE element allowed");  }  return super.insertChildAt(toInsert,index);}  }
class C{  public URI findType(Class<?> role){  return typeMapper.findType(role);}  }
class C{  private void write(String fileName,String content){  Path path=Paths.get(this.path,"exported");  Path file=path.resolve(fileName);  try {    Files.createDirectories(path);    try (BufferedWriter writer=Files.newBufferedWriter(file,CHARSET)){      writer.write(content);    }   } catch (  IOException ex) {    LOGGER.warning("Error writing status: " + ex);  }}  }
class C{  @Override public boolean supportsSavepoints(){  debugCodeCall("supportsSavepoints");  return true;}  }
class C{  public long count(String indexName){  return count(QueryBuilders.constantScoreQuery(QueryBuilders.matchAllQuery()),indexName);}  }
class C{  public RedundentExprEliminator(){  m_isSameContext=true;  m_absPaths=new Vector();  m_paths=null;}  }
class C{  private static String subStringFrom(String[] components,int from){  StringBuilder sb=new StringBuilder();  for (int i=from; i < components.length; i++) {    if (sb.length() != 0)     sb.append('.');    sb.append(components[i]);  }  return sb.toString();}  }
class C{  @SmallTest public void testManagerServiceIsAvailable(){  ICMAudioService service=CMAudioManager.getService();  assertNotNull(service);}  }
class C{  public void testMultiStart() throws Exception {  try {    for (int i=0; i < GRID_CNT; i++)     startGrid(i);    stopGrid(0);  }  finally {    stopAllGrids();  }}  }
class C{  protected void notifyError(int errorId,String tag,String attribute,String value,String description){  if (parserCallback != null) {    boolean cont=parserCallback.parsingError(errorId,tag,attribute,value,description);    if (!cont) {      throw new IllegalArgumentException(description);    }  }}  }
class C{  public final void yyreset(java.io.Reader reader){  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  public void refresh(){  if (arrayAdapter != null) {    arrayAdapter.clear();    arrayAdapter.addAll(Connections.getInstance(getActivity()).getConnection(clientHandle).history());    arrayAdapter.notifyDataSetChanged();  }}  }
class C{  @SuppressWarnings("unchecked") public final <C extends Component>C remove(Class<C> componentType){  if (!has(componentType)) {    throw new ComponentException("Attempt to remove component that does not exist: %s",componentType);  }  C component=(C)super.remove(componentType);  component.setProvider(null);  events.publish(new ComponentRemoved(component));  return component;}  }
class C{  private void doScrollX(int delta){  if (delta != 0) {    if (mSmoothScrollingEnabled) {      smoothScrollBy(delta,0);    } else {      scrollBy(delta,0);    }  }}  }
class C{  static boolean isWindows(){  if (!checkedWindows) {    OSInfo.OSType osType=AccessController.doPrivileged(OSInfo.getOSTypeAction());    if (osType == OSInfo.OSType.WINDOWS) {      isWindows=true;      String systemFonts=AccessController.doPrivileged(new GetPropertyAction("swing.useSystemFontSettings"));      useSystemFonts=(systemFonts != null && (Boolean.valueOf(systemFonts).booleanValue()));    }    checkedWindows=true;  }  return isWindows;}  }
class C{  private void addTable(DatasetGenerator datasetGenerator,Locker locker){  panel=new AllStatsTableSingle(datasetGenerator,locker);  mainPanel().add(BorderLayout.CENTER,panel);}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == Reaction.class) {switch (baseFeatureID) {case SGraphPackage.REACTION__TRIGGER:      return SGraphPackage.TRANSITION__TRIGGER;case SGraphPackage.REACTION__EFFECT:    return SGraphPackage.TRANSITION__EFFECT;case SGraphPackage.REACTION__PROPERTIES:  return SGraphPackage.TRANSITION__PROPERTIES;default :return -1;}}if (baseClass == DocumentedElement.class) {switch (baseFeatureID) {case BasePackage.DOCUMENTED_ELEMENT__DOCUMENTATION:return SGraphPackage.TRANSITION__DOCUMENTATION;default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public List<StoragePool> removePoolsRequiringHaIfNotEnabled(List<StoragePool> candidatePools,VirtualPool vpool,String personality){  List<StoragePool> storagePools=candidatePools;  List<StoragePool> invalidPools=new ArrayList<StoragePool>();  if (candidatePools != null) {    for (    StoragePool currentPool : candidatePools) {      StorageSystem storageSystem=dbClient.queryObject(StorageSystem.class,currentPool.getStorageDevice());      if (systemsRequiringVplex.contains(storageSystem.getSystemType())) {        if (!VirtualPool.vPoolSpecifiesHighAvailability(vpool)) {          invalidPools.add(currentPool);        }      }    }    storagePools.removeAll(invalidPools);    if (storagePools.isEmpty()) {      throw APIException.badRequests.storagePoolsRequireVplexForProtection(personality,vpool.getLabel());    }  }  return storagePools;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private PaletteHelper(){}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double z, z2;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  double hasLowerNeighbour=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    output.setPreferredPalette("qual.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          hasLowerNeighbour=1;          for (i=0; i < 8; i++) {            z2=DEM.getValue(row + dY[i],col + dX[i]);            if (z2 < z && z2 != noData) {              hasLowerNeighbour=noData;            }          }          output.setValue(row,col,hasLowerNeighbour);        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override synchronized boolean isComparableTypeValid(ObjectName object,String attribute,Comparable<?> value){  if (value instanceof String) {    return true;  }  return false;}  }
class C{  public static boolean gr(double a,double b){  return (a - b > SMALL);}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  processRequest(request,response);}  }
class C{  public static boolean isObjectAvailableNow(final boolean enabled,final Date availableFrom,final Date availableTo,final Date now){  if (!enabled) {    return false;  }  if (availableFrom != null && now.before(availableFrom)) {    return false;  }  if (availableTo != null && now.after(availableTo)) {    return false;  }  return true;}  }
class C{  public void assertArrayEqual(Object[] expected,Object[] actual,String errorMessage){  TestUtils.assertArrayEqual(expected,actual,errorMessage);}  }
class C{  public final void clear(){  if (current_item > 0) {    for (int i=0; i < current_item; i++) {      items[i]=null;    }  } else {    for (int i=0; i < max_size; i++) {      items[i]=null;    }  }  current_item=0;}  }
class C{  public void configure(String mimeType,int channelCount,int sampleRate,int pcmEncoding){  configure(mimeType,channelCount,sampleRate,pcmEncoding,0);}  }
class C{  public FXGException(String message,Object... arguments){  super(message);  this.arguments=arguments;  message=null;  lineNumber=-1;  columnNumber=-1;}  }
class C{  public static Vec4 intersect(Plane pa,Plane pb,Plane pc){  if (pa == null || pb == null || pc == null) {    String message=Logging.getMessage("nullValue.PlaneIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Vec4 na=pa.getNormal();  Vec4 nb=pb.getNormal();  Vec4 nc=pc.getNormal();  Matrix m=new Matrix(na.x,na.y,na.z,0,nb.x,nb.y,nb.z,0,nc.x,nc.y,nc.z,0,0,0,0,1,true);  Matrix mInverse=m.getInverse();  Vec4 D=new Vec4(-pa.getDistance(),-pb.getDistance(),-pc.getDistance());  return D.transformBy3(mInverse);}  }
class C{  private void checkSize(final int i){  if (i >= max_size) {    final int old_size=max_size;    max_size+=increment_size;    if (max_size <= i) {      max_size=i + increment_size + 2;    }    final boolean[] temp=items;    items=new boolean[max_size];    System.arraycopy(temp,0,items,0,old_size);    increment_size=incrementSize(increment_size);  }}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public static Streamable<Long> fromLongStream(final LongStream stream){  Objects.requireNonNull(stream);  return fromStream(ReactiveSeq.fromLongStream(stream));}  }
class C{  public boolean isImageDefined(Organization organization){  boolean flag=imgSrv.read(organization.getKey(),ImageType.ORGANIZATION_IMAGE) != null;  return flag;}  }
class C{  public DOMRetrievalMethod(Element rmElem,XMLCryptoContext context,Provider provider) throws MarshalException {  uri=DOMUtils.getAttributeValue(rmElem,"URI");  type=DOMUtils.getAttributeValue(rmElem,"Type");  here=rmElem.getAttributeNodeNS(null,"URI");  boolean secVal=Utils.secureValidation(context);  List<Transform> transforms=new ArrayList<Transform>();  Element transformsElem=DOMUtils.getFirstChildElement(rmElem);  if (transformsElem != null) {    String localName=transformsElem.getLocalName();    if (!localName.equals("Transforms")) {      throw new MarshalException("Invalid element name: " + localName + ", expected Transforms");    }    Element transformElem=DOMUtils.getFirstChildElement(transformsElem,"Transform");    transforms.add(new DOMTransform(transformElem,context,provider));    transformElem=DOMUtils.getNextSiblingElement(transformElem);    while (transformElem != null) {      String name=transformElem.getLocalName();      if (!name.equals("Transform")) {        throw new MarshalException("Invalid element name: " + name + ", expected Transform");      }      transforms.add(new DOMTransform(transformElem,context,provider));      if (secVal && (transforms.size() > DOMReference.MAXIMUM_TRANSFORM_COUNT)) {        String error="A maxiumum of " + DOMReference.MAXIMUM_TRANSFORM_COUNT + " "+ "transforms per Reference are allowed with secure validation";        throw new MarshalException(error);      }      transformElem=DOMUtils.getNextSiblingElement(transformElem);    }  }  if (transforms.isEmpty()) {    this.transforms=Collections.emptyList();  } else {    this.transforms=Collections.unmodifiableList(transforms);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public kbd removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  @Override public boolean supportsCustomEditor(){  return true;}  }
class C{  public void increment(){  add(1);}  }
class C{  public void assertReflectionRepeatedSettersRejectNull(Message.Builder builder) throws Exception {  builder.addRepeatedField(f("repeated_string"),"one");  try {    builder.setRepeatedField(f("repeated_string"),0,null);    Assert.fail("Exception was not thrown");  } catch (  NullPointerException e) {  }  builder.addRepeatedField(f("repeated_bytes"),toBytes("one"));  try {    builder.setRepeatedField(f("repeated_bytes"),0,null);    Assert.fail("Exception was not thrown");  } catch (  NullPointerException e) {  }  builder.addRepeatedField(f("repeated_nested_enum"),nestedBaz);  try {    builder.setRepeatedField(f("repeated_nested_enum"),0,null);    Assert.fail("Exception was not thrown");  } catch (  NullPointerException e) {  }  builder.addRepeatedField(f("repeated_nested_message"),TestAllTypes.NestedMessage.newBuilder().setBb(218).build());  try {    builder.setRepeatedField(f("repeated_nested_message"),0,null);    Assert.fail("Exception was not thrown");  } catch (  NullPointerException e) {  }}  }
class C{  public RawPreview rawSourcePreview(String pipelineName,String rev) throws ApiException {  Object postBody=null;  byte[] postBinaryBody=null;  if (pipelineName == null) {    throw new ApiException(400,"Missing the required parameter 'pipelineName' when calling rawSourcePreview");  }  String path="/v1/pipeline/{pipelineName}/rawSourcePreview".replaceAll("\\{format\\}","json").replaceAll("\\{" + "pipelineName" + "\\}",apiClient.escapeString(pipelineName.toString()));  List<Pair> queryParams=new ArrayList<Pair>();  Map<String,String> headerParams=new HashMap<String,String>();  Map<String,Object> formParams=new HashMap<String,Object>();  queryParams.addAll(apiClient.parameterToPairs("","rev",rev));  final String[] accepts={"application/json"};  final String accept=apiClient.selectHeaderAccept(accepts);  final String[] contentTypes={};  final String contentType=apiClient.selectHeaderContentType(contentTypes);  String[] authNames=new String[]{"basic"};  TypeRef returnType=new TypeRef<RawPreview>(){  };  return apiClient.invokeAPI(path,"GET",queryParams,postBody,postBinaryBody,headerParams,formParams,accept,contentType,authNames,returnType);}  }
class C{  public void addPOJO(Object value){  if (value == null) {    addNull();  } else {    _add(POJONode(value));  }}  }
class C{  @Override protected List refreshTicksHorizontal(Graphics2D g2,Rectangle2D dataArea,RectangleEdge edge){  List ticks=new java.util.ArrayList();  Range range=getRange();  double lowerBoundVal=range.getLowerBound();  if (this.smallLogFlag && lowerBoundVal < SMALL_LOG_VALUE) {    lowerBoundVal=SMALL_LOG_VALUE;  }  double upperBoundVal=range.getUpperBound();  int iBegCount=(int)Math.rint(switchedLog10(lowerBoundVal));  int iEndCount=(int)Math.rint(switchedLog10(upperBoundVal));  if (iBegCount == iEndCount && iBegCount > 0 && Math.pow(10,iBegCount) > lowerBoundVal) {    --iBegCount;  }  double currentTickValue;  String tickLabel;  boolean zeroTickFlag=false;  for (int i=iBegCount; i <= iEndCount; i++) {    for (int j=0; j < 10; ++j) {      if (this.smallLogFlag) {        currentTickValue=Math.pow(10,i) + (Math.pow(10,i) * j);        if (this.expTickLabelsFlag || (i < 0 && currentTickValue > 0.0 && currentTickValue < 1.0)) {          if (j == 0 || (i > -4 && j < 2) || currentTickValue >= upperBoundVal) {            this.numberFormatterObj.setMaximumFractionDigits(-i);            tickLabel=makeTickLabel(currentTickValue,true);          } else {            tickLabel="";          }        } else {          tickLabel=(j < 1 || (i < 1 && j < 5) || (j < 4 - i) || currentTickValue >= upperBoundVal) ? makeTickLabel(currentTickValue) : "";        }      } else {        if (zeroTickFlag) {          --j;        }        currentTickValue=(i >= 0) ? Math.pow(10,i) + (Math.pow(10,i) * j) : -(Math.pow(10,-i) - (Math.pow(10,-i - 1) * j));        if (!zeroTickFlag) {          if (Math.abs(currentTickValue - 1.0) < 0.0001 && lowerBoundVal <= 0.0 && upperBoundVal >= 0.0) {            currentTickValue=0.0;            zeroTickFlag=true;          }        } else {          zeroTickFlag=false;        }        tickLabel=((this.expTickLabelsFlag && j < 2) || j < 1 || (i < 1 && j < 5) || (j < 4 - i) || currentTickValue >= upperBoundVal) ? makeTickLabel(currentTickValue) : "";      }      if (currentTickValue > upperBoundVal) {        return ticks;      }      if (currentTickValue >= lowerBoundVal - SMALL_LOG_VALUE) {        TextAnchor anchor;        TextAnchor rotationAnchor;        double angle=0.0;        if (isVerticalTickLabels()) {          anchor=TextAnchor.CENTER_RIGHT;          rotationAnchor=TextAnchor.CENTER_RIGHT;          if (edge == RectangleEdge.TOP) {            angle=Math.PI / 2.0;          } else {            angle=-Math.PI / 2.0;          }        } else {          if (edge == RectangleEdge.TOP) {            anchor=TextAnchor.BOTTOM_CENTER;            rotationAnchor=TextAnchor.BOTTOM_CENTER;          } else {            anchor=TextAnchor.TOP_CENTER;            rotationAnchor=TextAnchor.TOP_CENTER;          }        }        Tick tick=new NumberTick(new Double(currentTickValue),tickLabel,anchor,rotationAnchor,angle);        ticks.add(tick);      }    }  }  return ticks;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:57.506 -0400",hash_original_method="24F28C58F333FD0DCB61CF11D4AE344F",hash_generated_method="A59C0843EF9A250368BB5C040FD4AFDA") @Override public void mark(int limit){}  }
class C{  public void testUseLocalSessionState() throws Exception {  Properties props=new Properties();  props.setProperty("useLocalSessionState","true");  props.setProperty("profileSQL","true");  props.setProperty("logFactory","com.mysql.jdbc.log.StandardLogger");  Connection conn1=getConnectionWithProps(props);  conn1.setAutoCommit(true);  conn1.setTransactionIsolation(Connection.TRANSACTION_REPEATABLE_READ);  StandardLogger.startLoggingToBuffer();  conn1.setAutoCommit(true);  conn1.setTransactionIsolation(Connection.TRANSACTION_REPEATABLE_READ);  conn1.getTransactionIsolation();  String logAsString=StandardLogger.getBuffer().toString();  assertTrue(logAsString.indexOf("SET SESSION") == -1 && logAsString.indexOf("SHOW VARIABLES LIKE 'tx_isolation'") == -1 && logAsString.indexOf("SET autocommit=") == -1);}  }
class C{  public static NumericEntityEscaper below(final int codepoint){  return outsideOf(codepoint,Integer.MAX_VALUE);}  }
