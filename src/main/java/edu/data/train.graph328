class C{  public static String replaceEscapedRightAngle(String s){  StringBuilder buf=new StringBuilder();  int i=0;  while (i < s.length()) {    char c=s.charAt(i);    if (c == '<' && s.substring(i).startsWith("<\\\\>")) {      buf.append("<\\\\>");      i+="<\\\\>".length();      continue;    }    if (c == '>' && s.substring(i).startsWith(">\\>")) {      buf.append(">>");      i+=">\\>".length();      continue;    }    if (c == '\\' && s.substring(i).startsWith("\\>>") && !s.substring(i).startsWith("\\>>>")) {      buf.append(">>");      i+="\\>>".length();      continue;    }    buf.append(c);    i++;  }  return buf.toString();}  }
class C{  public static Date daysAfterWithoutTimeZone(Date dateInst,int numDays){  if ((numDays <= 0) || (dateInst == null)) {    throw new IllegalArgumentException();  }  final long daysInMillis=numDays * MILLIS_IN_DAY;  return new Date(dateInst.getTime() + daysInMillis);}  }
class C{  void error(String msg){  System.err.println(msg);  errors++;}  }
class C{  public CodeAttribute(ConstPool cp,int stack,int locals,byte[] code,ExceptionTable etable){  super(cp,tag);  maxStack=stack;  maxLocals=locals;  info=code;  exceptions=etable;  attributes=new ArrayList();}  }
class C{  public String encodeBody(){  if (callId == null)   return null; else {    String retVal=callId;    if (!parameters.isEmpty()) {      retVal+=SEMICOLON + parameters.encode();    }    return retVal;  }}  }
class C{  public ServiceStateException(){}  }
class C{  public short shortValue(){  return value;}  }
class C{  public static void sleep(long msec){  try {    Thread.sleep(msec);  } catch (  InterruptedException ex) {    com.openhtmltopdf.util.Uu.p(stack_to_string(ex));  }}  }
class C{  @Override public synchronized void processResponse(StunResponseEvent evt){synchronized (sendLock) {    this.responseEvent=evt;    ended=true;    notifyAll();  }}  }
class C{  private Set<VertexJoinSet> calcDirectJoinSets(){  final Set<VertexJoinSet> joinSets=new LinkedHashSet<VertexJoinSet>();  final Set<Integer> used=new LinkedHashSet<Integer>();  for (int i=0; i < requiredJoinCount; i++) {    if (used.contains(i))     continue;    final VertexJoinSet joinSet=new VertexJoinSet();    joinSet.vertices.add(i);    used.add(i);    joinSet.joinvars.addAll(vars[i]);    expandJoinSet(i,joinSet.vertices,used,joinSet.joinvars);    joinSets.add(joinSet);    if (log.isInfoEnabled())     log.info("joinSet: " + joinSet.vertices + " on "+ joinSet.joinvars);  }  assert used.size() == requiredJoinCount : "used=" + used + ", but requiredJoinCount="+ requiredJoinCount;  return joinSets;}  }
class C{  public String pushContentsToQueue(BlockingQueue<DBMSEvent> queue,long minSCN,int transactionFragSize,long lastObsoletePlogSeq) throws UnsupportedEncodingException, ReplicatorException, SerialException, InterruptedException, SQLException {  if (logger.isDebugEnabled()) {    logger.debug("pushContentsToQueue: " + this.XID + " (DML:"+ this.transactionIsDML+ ")");  }  if (transactionIsDML) {    int count=0;    PlogLCR lastLCR=null;    String lastProcessedEventId=null;    ArrayList<DBMSData> data=new ArrayList<DBMSData>();    int fragSize=0;    LargeObjectScanner<PlogLCR> scanner=null;    try {      scanner=LCRList.scanner();      while (scanner.hasNext()) {        PlogLCR LCR=scanner.next();        if (LCR.type == PlogLCR.ETYPE_LCR_DATA) {          if (LCR.subtype == PlogLCR.ESTYPE_LCR_DDL)           throw new ReplicatorException("Internal corruption: DDL statement in a DML transaction.");          if (transactionFragSize > 0 && fragSize >= transactionFragSize) {            logger.debug("Fragmenting");            DBMSEvent event=new DBMSEvent(lastLCR.eventId,data,false,commitTime);            event.setMetaDataOption(ReplOptionParams.DBMS_TYPE,Database.ORACLE);            event.setMetaDataOption(ReplOptionParams.TIME_ZONE_AWARE,"true");            event.setMetaDataOption(ReplOptionParams.STRINGS,"utf8");            queue.put(event);            data=new ArrayList<DBMSData>();            fragSize=0;          }          count++;          fragSize++;          if (count > skipSeq) {            LCR.eventId="" + commitSCN + "#"+ XID+ "#"+ count+ "#"+ minSCN+ "#"+ lastObsoletePlogSeq;            lastLCR=LCR;            data.add(convertLCRtoDBMSDataDML(LCR));            lastProcessedEventId=LCR.eventId;{              PlogLCR r2=LCR;              if (logger.isDebugEnabled()) {                logger.debug("LCR: " + r2.type + "."+ r2.subtype+ ":"+ r2.typeAsString()+ ", XID="+ r2.XID+ ", LCRid="+ r2.LCRid+ " eventId="+ r2.eventId);                logger.debug("EventId#1 set to " + r2.eventId);              }            }          }        } else {          throw new RuntimeException("Type " + LCR.type + " in queue, should be only data");        }      }    } catch (    IOException e) {      logger.error("Transaction scanner error occured: XID=" + this.XID + " key="+ LCRList.getKey()+ " cache="+ LCRList.getByteCache().toString());      throw new RuntimeException("Unable to read transaction from cache: " + this.XID);    } finally {      if (scanner != null)       scanner.close();    }    if (lastLCR != null) {      lastLCR.eventId="" + commitSCN + "#"+ XID+ "#"+ "LAST"+ "#"+ minSCN+ "#"+ lastObsoletePlogSeq;      if (logger.isDebugEnabled()) {        logger.debug("EventId#2 set to " + lastLCR.eventId);      }      DBMSEvent event=new DBMSEvent(lastLCR.eventId,data,true,commitTime);      event.setMetaDataOption(ReplOptionParams.DBMS_TYPE,Database.ORACLE);      event.setMetaDataOption(ReplOptionParams.TIME_ZONE_AWARE,"true");      event.setMetaDataOption(ReplOptionParams.STRINGS,"utf8");      queue.put(event);    }    return lastProcessedEventId;  } else {    ArrayList<DBMSData> data=new ArrayList<DBMSData>();    PlogLCR lastLCR=null;    String lastProcessedEventId=null;    LargeObjectScanner<PlogLCR> scanner=null;    try {      scanner=LCRList.scanner();      while (scanner.hasNext()) {        PlogLCR LCR=scanner.next();        if (LCR.type == PlogLCR.ETYPE_LCR_DATA) {          if (LCR.subtype != PlogLCR.ESTYPE_LCR_DDL) {            throw new ReplicatorException("Internal corruption: DML statement in a DDL transaction.");          }          LCR.eventId="" + commitSCN + "#"+ XID+ "#"+ "LAST"+ "#"+ minSCN+ "#"+ lastObsoletePlogSeq;          data.add(convertLCRtoDBMSDataDDL(LCR));          lastLCR=LCR;          lastProcessedEventId=LCR.eventId;          if (logger.isDebugEnabled()) {            logger.info("DDL: [" + LCR.currentSchema + "]["+ LCR.eventId+ "]: "+ LCR.SQLText);          }        } else {          throw new RuntimeException("Type " + LCR.type + " in queue, should be only data");        }      }    } catch (    IOException e) {      logger.error("Transaction scanner error occured: XID=" + this.XID + " key="+ LCRList.getKey()+ " cache="+ LCRList.getByteCache().toString());      throw new RuntimeException("Unable to read transaction from cache: " + this.XID);    } finally {      if (scanner != null)       scanner.close();    }    if (!data.isEmpty()) {      DBMSEvent event=new DBMSEvent(lastLCR.eventId,data,true,commitTime);      event.setMetaDataOption(ReplOptionParams.DBMS_TYPE,Database.ORACLE);      event.setMetaDataOption(ReplOptionParams.TIME_ZONE_AWARE,"true");      event.setMetaDataOption(ReplOptionParams.STRINGS,"utf8");      queue.put(event);    }    return lastProcessedEventId;  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.TEXPORTABLE_ELEMENT__EXPORTED_NAME:    return EXPORTED_NAME_EDEFAULT == null ? exportedName != null : !EXPORTED_NAME_EDEFAULT.equals(exportedName);}return super.eIsSet(featureID);}  }
class C{  public static void initDefaultFilters(){  initFilters(true,ConverterUtils.getFileLoaders());  initFilters(false,ConverterUtils.getFileSavers());}  }
class C{  private byte skipTagBackward(){  int initialCharIndex=charIndex;  while (charIndex > 0) {    lastChar=text.charAt(--charIndex);    if (lastChar == '<') {      return Character.DIRECTIONALITY_WHITESPACE;    }    if (lastChar == '>') {      break;    }    if (lastChar == '"' || lastChar == '\'') {      char quote=lastChar;      while (charIndex > 0 && (lastChar=text.charAt(--charIndex)) != quote) {      }    }  }  charIndex=initialCharIndex;  lastChar='>';  return Character.DIRECTIONALITY_OTHER_NEUTRALS;}  }
class C{  public boolean hasName(){  return getName() != null;}  }
class C{  public void close(){  if (database != null) {    this.database.close();  }}  }
class C{  final String showInputMessage(String message,String initialValue){  if (initialValue == null)   return JOptionPane.showInputDialog(getParentComponent(),message); else   return JOptionPane.showInputDialog(getParentComponent(),message,initialValue);}  }
class C{  @Override public boolean isReadOnly(){  return true;}  }
class C{  public void treeCollapsed(TreeExpansionEvent e){  fireVisibleDataPropertyChange();  TreePath path=e.getPath();  if (path != null) {    AccessibleJTreeNode node=new AccessibleJTreeNode(JTree.this,path,null);    PropertyChangeEvent pce=new PropertyChangeEvent(node,AccessibleContext.ACCESSIBLE_STATE_PROPERTY,AccessibleState.EXPANDED,AccessibleState.COLLAPSED);    firePropertyChange(AccessibleContext.ACCESSIBLE_STATE_PROPERTY,null,pce);  }}  }
class C{  public void deleteMonitor(String sourceUser,String destUser) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  delete(new URL(BASE_URL + "mail/monitor/" + domain+ "/"+ sourceUser+ "/"+ destUser));}  }
class C{  public int available() throws IOException {  ensureOpen();  if (reachEOF) {    return 0;  }  return 1;}  }
class C{  public ToStringBuilder append(int[] array){  style.append(buffer,null,array,null);  return this;}  }
class C{  public static GraphWrapper serializableInstance(){  return new GraphWrapper(Dag.serializableInstance());}  }
class C{  private String toHex(String header,long offsetBytes,int lengthBytes){  assertBounds(offsetBytes,lengthBytes,capacityBytes_);  long unsafeRawAddress=getAddress(offsetBytes);  StringBuilder sb=new StringBuilder();  sb.append(header).append(LS);  sb.append("Raw Address         : ").append(nativeRawStartAddress_).append(LS);  sb.append("Object Offset       : ").append(objectBaseOffset_).append(": ");  sb.append((memArray_ == null) ? "null" : memArray_.getClass().getSimpleName()).append(LS);  sb.append("Relative Offset     : ").append(offsetBytes).append(LS);  sb.append("Total Offset        : ").append(unsafeRawAddress).append(LS);  sb.append("Native Region       :  0  1  2  3  4  5  6  7");  long j=offsetBytes;  StringBuilder sb2=new StringBuilder();  for (long i=0; i < lengthBytes; i++) {    int b=unsafe.getByte(memArray_,unsafeRawAddress + i) & 0XFF;    if ((i != 0) && ((i % 8) == 0)) {      sb.append(String.format("%n%20s: ",j)).append(sb2);      j+=8;      sb2.setLength(0);    }    sb2.append(String.format("%02x ",b));  }  sb.append(String.format("%n%20s: ",j)).append(sb2).append(LS);  return sb.toString();}  }
class C{  public synchronized void flush(){  sampleHolder=new SampleHolder(SampleHolder.BUFFER_REPLACEMENT_MODE_NORMAL);  parsing=false;  result=null;  error=null;}  }
class C{  public void configure(){  XNetTrafficController packets=new XnTcpXNetPacketizer(new LenzCommandStation());  packets.connectPort(this);  this.getSystemConnectionMemo().setXNetTrafficController(packets);  new XNetInitializationManager(this.getSystemConnectionMemo());}  }
class C{  public static char[] grow(final char[] array,final int length){  if (length > array.length) {    final int newLength=(int)Math.max(Math.min(2L * array.length,MAX_ARRAY_SIZE),length);    final char t[]=new char[newLength];    System.arraycopy(array,0,t,0,array.length);    return t;  }  return array;}  }
class C{  public Rational divide(Rational secondRational){  long n=r[0] * secondRational.getDenominator();  long d=r[1] * secondRational.getNumerator();  return new Rational(n,d);}  }
class C{  public void testOptimistic() throws Exception {  testTransaction(cache,OPTIMISTIC,KEY_1,wrap(1));}  }
class C{  private ICompletionProposal exactlyMatchingProposal(RegionWithCursor offset,N4ContentAssistProcessorTestBuilder fixture,String selected){  ICompletionProposal[] computeCompletionProposals=allProposalsAt(offset,fixture);  List<ICompletionProposal> candidates=Arrays.stream(computeCompletionProposals).filter(null).collect(Collectors.toList());  if (candidates.size() > 1) {    throw new AssertionFailedError("The selection of contentassist is not precise enough more then one assist matched the selection '" + selected + "': "+ asString2(candidates)+ " Please be more precise.");  } else   if (candidates.size() < 1) {    throw new AssertionFailedError("No content assist matching the selection '" + selected + "' found. Available are "+ asString2(Arrays.asList(computeCompletionProposals)));  }  ICompletionProposal proposal=candidates.get(0);  return proposal;}  }
class C{  public void unlockUI(ProcessInfo pi){  m_isLocked=false;}  }
class C{  private static void cloneWorkEffortCostCalcs(DispatchContext dctx,GenericValue userLogin,String routingTaskId,String productionRunTaskId){  List<GenericValue> workEffortCostCalcs=null;  try {    workEffortCostCalcs=EntityUtil.filterByDate(dctx.getDelegator().findByAnd("WorkEffortCostCalc",UtilMisc.toMap("workEffortId",routingTaskId),null,false));  } catch (  GenericEntityException e) {    Debug.logError(e.getMessage(),module);  }  if (workEffortCostCalcs != null) {    for (    GenericValue costCalc : workEffortCostCalcs) {      Map<String,Object> createCostCalc=UtilMisc.toMap("workEffortId",productionRunTaskId,"costComponentTypeId",costCalc.getString("costComponentTypeId"),"costComponentCalcId",costCalc.getString("costComponentCalcId"),"fromDate",costCalc.get("fromDate"),"thruDate",costCalc.get("thruDate"),"userLogin",userLogin);      try {        dctx.getDispatcher().runSync("createWorkEffortCostCalc",createCostCalc);      } catch (      GenericServiceException gse) {        Debug.logError(gse,"Problem calling the createWorkEffortCostCalc service",module);      }      if (Debug.infoOn())       Debug.logInfo("ProductionRun CostCalc for cost calc: " + costCalc.getString("costComponentCalcId") + " created",module);    }  }}  }
class C{  @Override public void decrypt(int[] inbuffer,int[] outbuffer){  int nLen=inbuffer.length;  long lTemp;  for (int nI=0; nI < nLen; nI+=2) {    lTemp=BinConverter.intArrayToLong(inbuffer,nI);    lTemp=decryptBlock(lTemp);    BinConverter.longToIntArray(lTemp,outbuffer,nI);  }  ;}  }
class C{  public OutputManager(PrettyPrinter pp,Writer w){  prettyPrinter=pp;  writer=w;}  }
class C{  public Token(int kind,String image){  this.kind=kind;  this.image=image;}  }
class C{  public OutlierResult run(Relation<O> relation){  final DistanceQuery<O> distanceQuery=relation.getDistanceQuery(getDistanceFunction());  final KNNQuery<O> knnQuery=relation.getKNNQuery(distanceQuery,k);  FiniteProgress prog=LOG.isVerbose() ? new FiniteProgress("kNN distance for objects",relation.size(),LOG) : null;  DoubleMinMax minmax=new DoubleMinMax();  WritableDoubleDataStore knno_score=DataStoreUtil.makeDoubleStorage(relation.getDBIDs(),DataStoreFactory.HINT_STATIC);  for (DBIDIter it=relation.iterDBIDs(); it.valid(); it.advance()) {    final double dkn=knnQuery.getKNNForDBID(it,k).getKNNDistance();    knno_score.putDouble(it,dkn);    minmax.put(dkn);    LOG.incrementProcessed(prog);  }  LOG.ensureCompleted(prog);  DoubleRelation scoreres=new MaterializedDoubleRelation("kNN Outlier Score","knn-outlier",knno_score,relation.getDBIDs());  OutlierScoreMeta meta=new BasicOutlierScoreMeta(minmax.getMin(),minmax.getMax(),0.,Double.POSITIVE_INFINITY,0.);  return new OutlierResult(meta,scoreres);}  }
class C{  public boolean isAllowedToInitiateGroupChat(ContactId contact) throws RcsPersistentStorageException, RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    return mApi.isAllowedToInitiateGroupChat2(contact);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    RcsPersistentStorageException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public Boolean isInstallBootRequired(){  return installBootRequired;}  }
class C{  public void testUpdate() throws Throwable {  Collection<Address> servers=Arrays.asList(new Address("localhost",5000),new Address("localhost",5001),new Address("localhost",5002));  AddressSelector selector=new AddressSelector(ServerSelectionStrategies.ANY);  selector.reset(null,servers);  assertNull(selector.leader());  assertEquals(selector.servers(),servers);  selector.next();  assertEquals(selector.state(),AddressSelector.State.ITERATE);  selector.reset(new Address("localhost",5000),servers);  assertEquals(selector.leader(),new Address("localhost",5000));  assertEquals(selector.servers(),servers);  assertEquals(selector.state(),AddressSelector.State.RESET);}  }
class C{  public void updateSizes(int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  public boolean isSameType(@NotNull RadComponent other){  return other.getClass() == this.getClass();}  }
class C{  public static JSONObject toJSONObject(String string) throws JSONException {  JSONObject jo=new JSONObject();  JSONTokener x=new JSONTokener(string);  while (x.more()) {    String name=Cookie.unescape(x.nextTo('='));    x.next('=');    jo.put(name,Cookie.unescape(x.nextTo(';')));    x.next();  }  return jo;}  }
class C{  String describeChildren(){  List<FrameworkMethod> children=getChildren();  if (children == null) {    return "null";  }  List<String> descriptions=new ArrayList<>(children.size());  for (  FrameworkMethod method : children) {    descriptions.add(method.getName());  }  return descriptions.toString();}  }
class C{  public CFunctionCommentsPanel(final INaviFunction function,final INaviFunctionNode functionNode){  super(new GridLayout(1,2,5,5));  globalCommentsTable=new GenericCommentsTable(new CGlobalFunctionCommentAccessor(function),"Global function comment");  add(globalCommentsTable);  if (functionNode != null) {    localCommentsTable=new GenericCommentsTable(new CLocalFunctionNodeCommentAccessor(functionNode),"Local function comment");    add(localCommentsTable);  } else {    localCommentsTable=null;  }}  }
class C{  private AdminDistributedSystem createDistributedSystem(AgentConfigImpl config) throws org.apache.geode.admin.AdminException {  return new AdminDistributedSystemJmxImpl(config);}  }
class C{  public void onDrawerClosed(View view){  super.onDrawerClosed(view);}  }
class C{  public boolean isFLAG_OPERATION_FROM_RSUB(){switch (value) {case BORROW_FROM_RSUB:case NO_BORROW_FROM_RSUB:case OVERFLOW_FROM_RSUB:case NO_OVERFLOW_FROM_RSUB:    return true;default :  return false;}}  }
class C{  public final void warn(final String message,final Throwable throwable){  if (isWarnEnabled()) {    output(Priority.WARN,message,throwable);  }}  }
class C{  public void add(Method method){  String methodName=method.getName();  List l=get(methodName);  if (l == null) {    l=new ArrayList();    methodByNameMap.put(methodName,l);  }  l.add(method);  return;}  }
class C{  @Inline public ObjectReference traceForwardObject(TraceLocal trace,ObjectReference object){  if (testAndClearMark(object)) {    trace.processNode(object);  }  ObjectReference newObject=getForwardingPointer(object);  if (MarkCompactCollector.VERY_VERBOSE) {    Log.write("forwarding ");    Log.write(object);    Log.write(" -> ");    Log.writeln(newObject);  }  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(!newObject.isNull());  return getForwardingPointer(object);}  }
class C{  public static ConditionOperand HIGHER(){  return new ConditionOperand(HIGHER);}  }
class C{  public static File toFile(File dstPath,String fullClassName){  String packageName=getPackageName(fullClassName);  String packagePath=packageName.replaceAll("\\.","/");  File path=new File(dstPath,packagePath);  path.mkdirs();  if (!path.exists())   throw new RuntimeException("Could not create " + path);  String fileName=fullClassName.replaceAll("\\.","/");  File file=new File(dstPath,fileName + ".java");  return file;}  }
class C{  public LogoutPanel(final String id){  super(id);}  }
class C{  public boolean equals(Object o){  if (!(o instanceof LinkNode)) {    return false;  }  LinkNode other=(LinkNode)o;  if (this.value != other.value) {    return false;  } else   if (this.next == null) {    return other.next == null;  } else   if (other.next == null) {    return this.next == null;  } else   if (other.next.value != this.next.value) {    return false;  } else   if (this.object != null) {    return this.object.equals(other.object);  } else {    return other.object == null;  }}  }
class C{  public XMethod toXMethod(){  return XFactory.createXMethod(className,methodName,methodSig,isStatic);}  }
class C{  public void addToMatchingCqMap(CqQueryImpl cq){synchronized (this.matchingCqMap) {    String cqQuery=cq.getQueryString();    Set<String> matchingCQs=null;    if (!matchingCqMap.containsKey(cqQuery)) {      matchingCQs=Collections.newSetFromMap(new ConcurrentHashMap());      matchingCqMap.put(cqQuery,matchingCQs);      this.stats.incUniqueCqQuery();    } else {      matchingCQs=(Set)matchingCqMap.get(cqQuery);    }    matchingCQs.add(cq.getServerCqName());    if (logger.isDebugEnabled()) {      logger.debug("Adding CQ into MatchingCQ map, CQName: {} Number of matched querys are: {}",cq.getServerCqName(),matchingCQs.size());    }  }}  }
class C{  public static String substituteSandbox(String heronSandboxHome,String pathString){  Config config=Config.newBuilder().put(Keys.heronSandboxHome(),heronSandboxHome).build();  return substitute(config,pathString);}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output,String encoding) throws IOException {  writeLines(lines,lineEnding,output,Charsets.toCharset(encoding));}  }
class C{  @Override public void launch(){  if (canLaunch()) {    setEnergy(getEnergy() - getLaunchCost());    launcherBase.launchMissile(targetPos.clone(),launchHeight);  }}  }
class C{  @SuppressWarnings("unchecked") public GroovyObject instantiateDelegateWithBaseClass(Map closureMap,List<Class> interfaces,Object delegate,Class baseClass,String name){  Map<Object,Object> map=closureMap != null ? closureMap : EMPTY_CLOSURE_MAP;  Class[] intfs=interfaces != null ? interfaces.toArray(new Class[interfaces.size()]) : EMPTY_INTERFACE_ARRAY;  Class base=baseClass;  if (base == null) {    if (intfs.length > 0) {      base=intfs[0];    } else {      base=Object.class;    }  }  Set<String> keys=map == EMPTY_CLOSURE_MAP ? EMPTY_KEYSET : new HashSet<String>();  for (  Object o : map.keySet()) {    keys.add(o.toString());  }  CacheKey key=new CacheKey(base,delegate.getClass(),keys,intfs,emptyMethods,true);  ProxyGeneratorAdapter adapter=(ProxyGeneratorAdapter)adapterCache.get(key);  if (adapter == null) {    adapter=new ProxyGeneratorAdapter(map,base,intfs,delegate.getClass().getClassLoader(),emptyMethods,delegate.getClass());    adapterCache.put(key,adapter);  }  return adapter.delegatingProxy(delegate,map,(Object[])null);}  }
class C{  private boolean isOneOf(final char ch,final char[] charray){  boolean result=false;  for (int i=0; i < charray.length; i++) {    if (ch == charray[i]) {      result=true;      break;    }  }  return result;}  }
class C{  public static boolean isDark(Color color){  float r=color.getRed() / 255.0f;  float g=color.getGreen() / 255.0f;  float b=color.getBlue() / 255.0f;  double whiteDistance=colorDistance(r,g,b,1.0,1.0,1.0);  double blackDistance=colorDistance(r,g,b,0.0,0.0,0.0);  boolean dark=blackDistance < whiteDistance;  if (r + g + b == 1.0)   dark=false;  return dark;}  }
class C{  @Override public IndicesShardStoresRequest indices(String... indices){  this.indices=indices;  return this;}  }
class C{  static ArrayList<String> loadImagePad(File file,char padChar) throws FileNotFoundException, RuntimeException {  if (file == null)   return null;  Scanner sc;  sc=new Scanner(file);  ArrayList<String> rows=new ArrayList<String>();  String s=sc.nextLine();  int len=s.length();  rows.add(s);  while (sc.hasNext()) {    s=sc.nextLine();    if (s.length() != len) {      StringBuilder sb=new StringBuilder(s);      for (int i=0; i < len - s.length(); i++) {        sb.append(padChar);      }      s=sb.toString();    }    rows.add(s);  }  sc.close();  return rows;}  }
class C{  public static int hash(double item){  long l=Double.doubleToLongBits(item);  return (int)(l ^ (l >>> 32));}  }
class C{  @Override public void sendResponseToRP(String spEntId,Document token) throws IOException {  Response samlResponse=generateResponse(spEntId,token);  if (samlResponse == null) {    Validate.notNull(validationResult,"Null validation result.");    if (validationResult.isRedirect()) {      response.sendRedirect(this.validationResult.getStatus());      log.info("Responded with REDIRECT {} target {}",validationResult.getResponseCode(),validationResult.getStatus());    } else     if (this.kerbAuthnType == KerbAuthnType.IWA) {      response.sendError(this.validationResult.getResponseCode(),this.validationResult.getStatus());      log.info("Requested kerb negotiation with browser. Response code: {}, Status: {}",validationResult.getResponseCode(),validationResult.getStatus());    } else {      String message=this.validationResult.getMessage(messageSource,locale);      response.addHeader(Shared.RESPONSE_ERROR_HEADER,Shared.encodeString(message));      response.sendError(this.validationResult.getResponseCode(),message);      log.info("Responded with ERROR {} message {}",this.validationResult.getResponseCode(),message);    }  } else {    String samlResponseForm=generateResponseForm(samlResponse,spEntId);    log.trace("SAML Response Form is {}",samlResponseForm);    Shared.sendResponse(response,Shared.HTML_CONTENT_TYPE,samlResponseForm);    log.info("Posting successful authentication response to: " + spEntId);  }}  }
class C{  public Interpreter interpreter(){  return interpreter;}  }
class C{  public UnweightedGraph(){}  }
class C{  public static void expandEnvelopeFixed(Envelope envelope,double radiusMeters){  double floatingLat0=fixedDegreesToFloating(Math.min(Math.abs(envelope.getMaxY()),Math.abs(envelope.getMinY())));  double yExpansion=VertexStore.floatingDegreesToFixed(SphericalDistanceLibrary.metersToDegreesLatitude(radiusMeters));  double xExpansion=VertexStore.floatingDegreesToFixed(SphericalDistanceLibrary.metersToDegreesLongitude(radiusMeters,floatingLat0));  if (xExpansion < 0 || yExpansion < 0)   throw new AssertionError("Buffer distance in geographic units is negative!");  envelope.expandBy(xExpansion,yExpansion);}  }
class C{  public JsonElement controlRequest(JsonObject request) throws Exception {  if (request.has(OP_KEY))   return controlOperation(request);  return JsonNull.INSTANCE;}  }
class C{  public static double[] divide(double[] v1,double v){  double[] array=new double[v1.length];  for (int i=0; i < v1.length; i++)   array[i]=v1[i] / v;  return array;}  }
class C{  public String outputFileTipText(){  return "Set the destination for saving raw output. If the rawOutput " + "option is selected, then output from the splitEvaluator for " + "individual train-test splits is saved. If the destination is a "+ "directory, "+ "then each output is saved to an individual gzip file; if the "+ "destination is a file, then each output is saved as an entry "+ "in a zip file.";}  }
class C{  public static KeyStore createKeyStore(){  try {    KeyStore keyStore=KeyStore.getInstance(StandardNames.KEY_STORE_ALGORITHM);    keyStore.load(null,null);    return keyStore;  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  private void removeVolumesFromApplication(List<Volume> removeVolumes,VolumeGroup application,String taskId){  Map<URI,List<URI>> cgVolsMap=new HashMap<URI,List<URI>>();  for (  Volume volume : removeVolumes) {    URI cgUri=volume.getConsistencyGroup();    if (!NullColumnValueGetter.isNullURI(cgUri)) {      List<URI> vols=cgVolsMap.get(cgUri);      if (vols == null) {        vols=new ArrayList<URI>();      }      vols.add(volume.getId());      cgVolsMap.put(cgUri,vols);    } else {      throw APIException.badRequests.volumeGroupCantBeUpdated(application.getLabel(),String.format("The volume %s is not in a consistency group",volume.getLabel()));    }  }  for (  Map.Entry<URI,List<URI>> entry : cgVolsMap.entrySet()) {    URI cgUri=entry.getKey();    List<URI> cgVolsToRemove=entry.getValue();    BlockConsistencyGroup cg=_dbClient.queryObject(BlockConsistencyGroup.class,cgUri);    List<Volume> cgVolumes=getActiveCGVolumes(cg);    Set<URI> cgVolumeURIs=new HashSet<URI>();    for (    Volume cgVol : cgVolumes) {      cgVolumeURIs.add(cgVol.getId());    }    Volume firstVolume=_dbClient.queryObject(Volume.class,cgVolsToRemove.get(0));    if (!cgVolumeURIs.containsAll(cgVolsToRemove) || cgVolsToRemove.size() != cgVolumeURIs.size()) {      throw APIException.badRequests.volumeCantBeRemovedFromVolumeGroup(firstVolume.getLabel(),"not all volumes in consistency group are in the remove volume list");    }    for (    Volume cgVol : cgVolumes) {      StringSet applications=cgVol.getVolumeGroupIds();      if (applications != null && !applications.isEmpty()) {        applications.remove(application.getId().toString());        cgVol.setVolumeGroupIds(applications);      }      StringSet fullCopies=cgVol.getFullCopies();      List<Volume> fullCopiesToUpdate=new ArrayList<Volume>();      if (fullCopies != null && !fullCopies.isEmpty()) {        for (        String fullCopyId : fullCopies) {          Volume fullCopy=_dbClient.queryObject(Volume.class,URI.create(fullCopyId));          if (fullCopy != null && !fullCopy.getInactive()) {            fullCopy.setFullCopySetName(NullColumnValueGetter.getNullStr());            fullCopiesToUpdate.add(fullCopy);          }        }      }      if (!fullCopiesToUpdate.isEmpty()) {        _dbClient.updateObject(fullCopiesToUpdate);      }      Operation op=cgVol.getOpStatus().get(taskId);      op.ready();      cgVol.getOpStatus().updateTaskStatus(taskId,op);    }    _dbClient.updateObject(cgVolumes);    Operation op=cg.getOpStatus().get(taskId);    op.ready();    cg.getOpStatus().updateTaskStatus(taskId,op);    _dbClient.updateObject(cg);  }  _log.info("Removed volumes in CG from the application");}  }
class C{  public static float length(float x,float y,float z){  return (float)Math.sqrt(x * x + y * y + z * z);}  }
class C{  public TechnicalServiceActiveException(){}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public void addPickupRS(){  int old=_pickupRS;  _pickupRS++;  setDirtyAndFirePropertyChange("locationAddPickupRS",Integer.toString(old),Integer.toString(_pickupRS));}  }
class C{  private static void parseArguments(String[] args){  for (int i=0; i < args.length; i++) {    String arg=args[i];switch (arg) {case "-d":      i++;    if (args.length <= i) {      throw new IllegalArgumentException("The \"-d\" command line argument must be followed by a directory name " + "containing the benchmark configuration and data.");    }  directory=args[i];break;case "-verbose":verbose=true;break;case "-training":skiptraining=false;break;case "-report":reportLabels=true;break;case "-features":reportFeatures=true;if (args.length <= i + 1) {output="features.out";} else {i++;output=args[i];}break;}}}  }
class C{  public void requestEmail(TwitterSession session,Callback<String> callback){  if (session == null) {    throw new IllegalArgumentException("Session must not be null.");  }  if (callback == null) {    throw new IllegalArgumentException("Callback must not be null.");  }  scribeRequestEmail();  context.startActivity(newShareEmailIntent(session,callback));}  }
class C{  public static ProjectTypePredicate not(ProjectTypePredicate predicate){  return new ProjectTypePredicate(Predicates.not(predicate));}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  public em addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public static <NodeType extends IGraphNode<NodeType>>Collection<NodeType> collectChildren(final NodeType node,final INodeFilter<NodeType> filter){  Preconditions.checkNotNull(node,"Error: Node argument can't be null");  return collectNodes(node.getChildren(),filter);}  }
class C{  private boolean highlightAsAttribute(@NotNull PyQualifiedExpression node,@NotNull String name){  final LanguageLevel languageLevel=LanguageLevel.forElement(node);  if (PyNames.UnderscoredAttributes.contains(name) || PyNames.getBuiltinMethods(languageLevel).containsKey(name)) {    if (node.isQualified() || ScopeUtil.getScopeOwner(node) instanceof PyClass) {      final ASTNode astNode=node.getNode();      if (astNode != null) {        final ASTNode tgt=astNode.findChildByType(PyTokenTypes.IDENTIFIER);        if (tgt != null) {          final Annotation ann=getHolder().createInfoAnnotation(tgt,null);          ann.setTextAttributes(PyHighlighter.PY_PREDEFINED_USAGE);          return true;        }      }    }  }  return false;}  }
class C{  @VisibleForTesting void realloc(int newLength){  ensureValid();  if (newLength <= mBufRef.get().getSize()) {    return;  }  NativeMemoryChunk newbuf=mPool.get(newLength);  mBufRef.get().copy(0,newbuf,0,mCount);  mBufRef.close();  mBufRef=CloseableReference.of(newbuf,mPool);}  }
class C{  public static char[] insert(char[] dest,char[] src,int offset){  char[] temp=new char[dest.length + src.length];  System.arraycopy(dest,0,temp,0,offset);  System.arraycopy(src,0,temp,offset,src.length);  System.arraycopy(dest,offset,temp,src.length + offset,dest.length - offset);  return temp;}  }
class C{  public LockState<T> lockOnObjects(Iterable<T> lockObjects){  ImmutableSet<T> hashSet=validateLockInput(lockObjects);  final SortedMap<T,ReentrantLock> sortedLocks=getSortedLocks(hashSet);  for (  ReentrantLock lock : sortedLocks.values()) {    lock.lock();  }  threadSet.add(Thread.currentThread());  return new LockState<T>(sortedLocks.values(),this);}  }
class C{  public static int[] remove(int[] buffer,int offset,int length){  int len2=buffer.length - length;  int temp[]=new int[len2];  System.arraycopy(buffer,0,temp,0,offset);  System.arraycopy(buffer,offset + length,temp,offset,len2 - offset);  return temp;}  }
class C{  static NamedList<Integer> finalize(NamedList<Integer> res,SolrIndexSearcher searcher,SchemaField schemaField,DocSet docs,int missingCount,boolean missing) throws IOException {  if (missing) {    if (missingCount < 0) {      missingCount=SimpleFacets.getFieldMissingCount(searcher,docs,schemaField.getName());    }    res.add(null,missingCount);  }  return res;}  }
class C{  private static void testJcmdUsage(String... jcmdArgs) throws Exception {  OutputAnalyzer output=JcmdBase.jcmdNoPid(VM_ARGS,jcmdArgs);  assertNotEquals(output.getExitValue(),0);  verifyOutputAgainstFile(output);}  }
class C{  private static void notifyPlayer(final String target,final String message){  final Player player=SingletonRepository.getRuleProcessor().getPlayer(target);  new GuaranteedDelayedPlayerTextSender("Dagobert",player,message,2);}  }
class C{  public long count(){  return count;}  }
class C{  public boolean supportsConversion(Class<?> targetType,Object valueToConvert){  boolean rVal=false;  if (Percent.class.equals(targetType)) {    rVal=true;  }  return (rVal);}  }
class C{  public VariableDeclaration createVariableDeclaration(){  VariableDeclarationImpl variableDeclaration=new VariableDeclarationImpl();  return variableDeclaration;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected void reset(){  this.matrix=null;}  }
class C{  public static void f(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_FATAL) {    return;  }  Log.wtf(tag,msg,throwable);}  }
class C{  private void startCameraPreview(){  if (mCamera == null) {    return;  }  Camera.Parameters p=mCamera.getParameters();  p.setPreviewFormat(PixelFormat.YCbCr_420_SP);  Display display=((WindowManager)getSystemService(WINDOW_SERVICE)).getDefaultDisplay();switch (display.getRotation()) {case Surface.ROTATION_0:    if (LogUtils.isActive) {      Log.d(LOGTAG,"ROTATION_0");    }  if (mOpenedCameraId == CameraOptions.FRONT) {    mVideoPlayer.setOrientation(Orientation.ROTATE_90_CCW);  } else {    mVideoPlayer.setOrientation(Orientation.ROTATE_90_CW);  }mCamera.setDisplayOrientation(90);break;case Surface.ROTATION_90:if (LogUtils.isActive) {Log.d(LOGTAG,"ROTATION_90");}mVideoPlayer.setOrientation(Orientation.NONE);break;case Surface.ROTATION_180:if (LogUtils.isActive) {Log.d(LOGTAG,"ROTATION_180");}if (mOpenedCameraId == CameraOptions.FRONT) {mVideoPlayer.setOrientation(Orientation.ROTATE_90_CW);} else {mVideoPlayer.setOrientation(Orientation.ROTATE_90_CCW);}mCamera.setDisplayOrientation(270);break;case Surface.ROTATION_270:if (LogUtils.isActive) {Log.d(LOGTAG,"ROTATION_270");}if (mOpenedCameraId == CameraOptions.FRONT) {mVideoPlayer.setOrientation(Orientation.ROTATE_180);} else {mVideoPlayer.setOrientation(Orientation.ROTATE_180);}mCamera.setDisplayOrientation(180);break;}if (isPreviewSizeSupported(p,mVideoWidth,mVideoHeight)) {p.setPreviewSize(mVideoWidth,mVideoHeight);if (LogUtils.isActive) {Log.d(LOGTAG,"Camera preview initialized with size " + mVideoWidth + "x"+ mVideoHeight);}} else {int w=0;int h=0;for (Camera.Size size : p.getSupportedPreviewSizes()) {w=size.width;h=size.height;if ((w == H264Config.QVGA_WIDTH && h == H264Config.QVGA_HEIGHT) || (w == H264Config.CIF_WIDTH && h == H264Config.CIF_HEIGHT) || (w == H264Config.VGA_WIDTH && h == H264Config.VGA_HEIGHT)) {break;}}if (w != 0) {p.setPreviewSize(w,h);if (LogUtils.isActive) {Log.d(LOGTAG,"Camera preview initialized with size " + w + "x"+ h+ " with a resizing to "+ mVideoWidth+ "x"+ mVideoHeight);}} else {if (LogUtils.isActive) {Log.d(LOGTAG,"Camera preview can't be initialized with size " + mVideoWidth + "x"+ mVideoHeight);}Toast.makeText(this,getString(R.string.label_session_failed,"Camera is not compatible"),Toast.LENGTH_SHORT).show();quitSession();return;}}mCamera.setParameters(p);try {mCamera.setPreviewDisplay(mVideoView.getHolder());mCamera.startPreview();mCameraPreviewRunning=true;} catch (Exception e) {mCamera=null;}}  }
class C{  public JpegSegmentData(){  _segmentDataMap=new HashMap(10);  _segmentOffsetDataMap=new HashMap(10);}  }
class C{  public SendableVoiceMessage.SendableVoiceMessageBuilder replyTo(long replyTo){  this.replyTo=replyTo;  return this;}  }
class C{  public static long fillRightOccluded(long g,long p){  p&=0xfefefefefefefefeL;  g|=p & g << 1;  p&=p << 1;  g|=p & g << 2;  p&=p << 2;  return g|=p & g << 4;}  }
class C{  public CHM(int initialCapacity){  this(initialCapacity,DFLT_LOAD_FACTOR,DFLT_CONC_LVL);}  }
class C{  protected void possiblyFixCursor(boolean ltr){  int cursor=Cursor.NE_RESIZE_CURSOR;  if (ltr) {    cursor=Cursor.NW_RESIZE_CURSOR;  }  if (cursor != getCursor().getType()) {    setCursor(Cursor.getPredefinedCursor(cursor));  }}  }
class C{  public Object deserialize(String json,String containerType,Class cls) throws ApiException {  if (null != containerType) {    containerType=containerType.toLowerCase();  }  try {    if ("list".equals(containerType) || "array".equals(containerType)) {      JavaType typeInfo=JsonUtil.getJsonMapper().getTypeFactory().constructCollectionType(List.class,cls);      List response=(List<?>)JsonUtil.getJsonMapper().readValue(json,typeInfo);      return response;    } else     if (String.class.equals(cls)) {      if (json != null && json.startsWith("\"") && json.endsWith("\"") && json.length() > 1)       return json.substring(1,json.length() - 2); else       return json;    } else {      return JsonUtil.getJsonMapper().readValue(json,cls);    }  } catch (  IOException e) {    throw new ApiException(500,e.getMessage(),null,json);  }}  }
class C{  @Override public UserCompanyObject copy(){  return new UserCompanyObject(this);}  }
class C{  private static boolean findDSTTransition(TimeZone tz,long now){  GregorianCalendar cal=new GregorianCalendar(tz,Locale.US);  cal.setTimeInMillis(now);  cal.add(YEAR,50);  long end=cal.getTimeInMillis();  for (long t=now; t < end; t+=INTERVAL) {    cal.setTimeInMillis(t);    if (cal.get(DST_OFFSET) > 0) {      return true;    }  }  return false;}  }
class C{  @Override public void onMouseUp(MouseUpEvent event){  if (!enabled) {    return;  }  if (selected) {    panel.setStyleName(toolbarResources.toolbar().iconButtonPanelSelectedOver());  } else {    panel.setStyleName(toolbarResources.toolbar().iconButtonPanelOver());  }}  }
class C{  private void calculateOutputs(){  for (int noc=0; noc < m_numClasses; noc++) {    m_outputs[noc].outputValue(true);  }}  }
class C{  public void shutdown(){  if (imageDownloadExecutor != null) {    imageDownloadExecutor.shutdown();  }  if (unnamedTaskExecutor != null) {    unnamedTaskExecutor.shutdown();  }  if (downloadExecutor != null) {    downloadExecutor.shutdown();  }  if (mainTaskExecutor != null) {    mainTaskExecutor.shutdown();  }  if (scheduler != null) {    scheduler.shutdown();  }  for (  TmmTaskHandle task : runningTasks) {    task.cancel();  }}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildJailKeeper(zone);  disabledMagicScrolls(zone);}  }
class C{  public void launchUrl(Activity context,Uri url){  intent.setData(url);  ActivityCompat.startActivity(context,intent,startAnimationBundle);}  }
class C{  public void focusGained(FocusEvent e){}  }
class C{  public ByteVector putUTF8(final String s){  int charLength=s.length();  if (charLength > 65535) {    throw new IllegalArgumentException();  }  int len=length;  if (len + 2 + charLength > data.length) {    enlarge(2 + charLength);  }  byte[] data=this.data;  data[len++]=(byte)(charLength >>> 8);  data[len++]=(byte)charLength;  for (int i=0; i < charLength; ++i) {    char c=s.charAt(i);    if (c >= '\001' && c <= '\177') {      data[len++]=(byte)c;    } else {      length=len;      return encodeUTF8(s,i,65535);    }  }  length=len;  return this;}  }
class C{  private BitmapUtils(){}  }
class C{  public VariableReference addField(TestCase test,GenericField field,int position,int recursionDepth) throws ConstructionFailedException {  logger.debug("Adding field {}",field);  if (recursionDepth > Properties.MAX_RECURSION) {    logger.debug("Max recursion depth reached");    throw new ConstructionFailedException("Max recursion depth reached");  }  VariableReference callee=null;  int length=test.size();  if (!field.isStatic()) {    callee=createOrReuseVariable(test,field.getOwnerType(),position,recursionDepth,null,false,false,false);    position+=test.size() - length;    if (!TestUsageChecker.canUse(field.getField(),callee.getVariableClass())) {      logger.debug("Cannot call field {} with callee of type {}",field,callee.getClassName());      throw new ConstructionFailedException("Cannot apply field to this callee");    }    if (!field.getOwnerClass().equals(callee.getGenericClass())) {      try {        if (!TestUsageChecker.canUse(callee.getVariableClass().getField(field.getName()))) {          throw new ConstructionFailedException("Cannot access field in subclass");        }      } catch (      NoSuchFieldException fe) {        throw new ConstructionFailedException("Cannot access field in subclass");      }    }  }  Statement st=new FieldStatement(test,field,callee);  return test.addStatement(st,position);}  }
class C{  public DateValueImpl(int year,int month,int day){  this.year=year;  this.month=month;  this.day=day;}  }
class C{  public static long createUniqueId(Context ctx,Uri providerUri){  AtomicLong nextId=sNextIds.get(providerUri);  if (nextId != null) {    return nextId.incrementAndGet();  }synchronized (sNextIds) {    nextId=sNextIds.get(providerUri);    if (nextId != null) {      return nextId.incrementAndGet();    }    nextId=new AtomicLong();    Cursor cursor=null;    try {      cursor=ctx.getContentResolver().query(providerUri,new String[]{MAX_PROJECTION},null,null,null);      CursorUtil.assertCursorIsNotNull(cursor,providerUri);      if (cursor.moveToNext()) {        nextId.set(cursor.getLong(0));      }    }  finally {      if (cursor != null) {        cursor.close();      }    }    sNextIds.put(providerUri,nextId);    return nextId.incrementAndGet();  }}  }
class C{  public void test_webapp_structure_counters() throws Exception {  doGET(m_serviceURL + "/counters");}  }
class C{  public static void computeGoals(){  categorizeFieldMethodCalls();  long start=System.currentTimeMillis();  LoggingUtils.getEvoLogger().info("starting DefUse-Coverage goal generation");  duGoals=new ArrayList<DefUseCoverageTestFitness>();  if (!GraphPool.getInstance(TestGenerationContext.getInstance().getClassLoaderForSUT()).canMakeCCFGForClass(Properties.TARGET_CLASS)) {    goals=new ArrayList<DefUseCoverageTestFitness>();    logger.info("Have no CFGs, is this an interface?");    return;  }  LoggingUtils.getEvoLogger().info("* Creating DefUse-Pairs from CCFG...");  duGoals.addAll(getCCFGPairs());  LoggingUtils.getEvoLogger().info("  ..created " + getIntraMethodGoalsCount() + " intra-method-, "+ getInterMethodGoalsCount()+ " inter-method- and "+ getIntraClassGoalsCount()+ " intra-class-pairs");  LoggingUtils.getEvoLogger().info("  " + duGoals.toString());  LoggingUtils.getEvoLogger().info("* Creating parameter goals...");  duGoals.addAll(getParameterGoals());  LoggingUtils.getEvoLogger().info("  created " + getParamGoalsCount() + " parameter goals");  called=true;  goals=new ArrayList<DefUseCoverageTestFitness>();  goals.addAll(duGoals);  long end=System.currentTimeMillis();  goalComputationTime=end - start;  LoggingUtils.getEvoLogger().info("* Goal computation took: " + goalComputationTime + "ms");  ClientServices.getInstance().getClientNode().trackOutputVariable(RuntimeVariable.IntraMethodPairs,getIntraMethodGoalsCount());  ClientServices.getInstance().getClientNode().trackOutputVariable(RuntimeVariable.InterMethodPairs,getInterMethodGoalsCount());  ClientServices.getInstance().getClientNode().trackOutputVariable(RuntimeVariable.ParameterPairs,getParamGoalsCount());  ClientServices.getInstance().getClientNode().trackOutputVariable(RuntimeVariable.IntraClassPairs,getIntraClassGoalsCount());  ClientServices.getInstance().getClientNode().trackOutputVariable(RuntimeVariable.DefUsePairs,goals.size());}  }
class C{  BitMatrix buildFunctionPattern(){  int dimension=getDimensionForVersion();  BitMatrix bitMatrix=new BitMatrix(dimension);  bitMatrix.setRegion(0,0,9,9);  bitMatrix.setRegion(dimension - 8,0,8,9);  bitMatrix.setRegion(0,dimension - 8,9,8);  int max=alignmentPatternCenters.length;  for (int x=0; x < max; x++) {    int i=alignmentPatternCenters[x] - 2;    for (int y=0; y < max; y++) {      if ((x == 0 && (y == 0 || y == max - 1)) || (x == max - 1 && y == 0)) {        continue;      }      bitMatrix.setRegion(alignmentPatternCenters[y] - 2,i,5,5);    }  }  bitMatrix.setRegion(6,9,1,dimension - 17);  bitMatrix.setRegion(9,6,dimension - 17,1);  if (versionNumber > 6) {    bitMatrix.setRegion(dimension - 11,0,3,6);    bitMatrix.setRegion(0,dimension - 11,6,3);  }  return bitMatrix;}  }
class C{  public void refresh(){  if (frame != null && frame.isVisible()) {    menu.update();    String title="OpenDial toolkit";    if (!system.getDomain().isEmpty()) {      title+=" - domain: " + system.getDomain().getSourceFile().getName();      editorTab.refresh();    } else {      title+=" (no domain)";    }    if (!frame.getTitle().equals(title)) {      frame.setTitle(title);    }    chatTab.refresh();  }}  }
class C{  public static void choosePhoto(Activity activity,int requestCode){  Intent intent=new Intent(Intent.ACTION_GET_CONTENT);  intent.setType("image/*");  activity.startActivityForResult(intent,requestCode);}  }
class C{  public TranslateBrowsePathsToNodeIdsRequest clone(){  TranslateBrowsePathsToNodeIdsRequest result=new TranslateBrowsePathsToNodeIdsRequest();  result.RequestHeader=RequestHeader == null ? null : RequestHeader.clone();  if (BrowsePaths != null) {    result.BrowsePaths=new BrowsePath[BrowsePaths.length];    for (int i=0; i < BrowsePaths.length; i++)     result.BrowsePaths[i]=BrowsePaths[i].clone();  }  return result;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'MESSAGE' ("+ "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ,"+ "'CONTENT' TEXT,"+ "'CLIENT_ID' INTEGER NOT NULL ,"+ "'CREATED_AT' INTEGER NOT NULL ,"+ "'SORTED_BY' REAL NOT NULL ,"+ "'COMMAND_ID' INTEGER NOT NULL ,"+ "'SENDER_ID' INTEGER NOT NULL ,"+ "'CHANNEL_ID' INTEGER NOT NULL );");  db.execSQL("CREATE INDEX " + constraint + "IDX_MESSAGE_COMMAND_ID ON MESSAGE"+ " (COMMAND_ID);");}  }
class C{  public Expression order(){  if (precedence() > right.precedence()) {    UnaryExpression e=(UnaryExpression)right;    right=e.right;    e.right=order();    return e;  }  return this;}  }
class C{  public int addLinePlot(String name,Color color,double[][] XY){  return ((Plot3DCanvas)plotCanvas).addLinePlot(name,color,XY);}  }
class C{  public void put(String key,InputStream stream,String name,String contentType,boolean autoClose){  if (key != null && stream != null) {    streamParams.put(key,StreamWrapper.newInstance(stream,name,contentType,autoClose));  }}  }
class C{  private boolean canContain(ElementContainmentInfo child,ElementContainmentInfo top,int topIndex){  int childTypes=child.types;  int contents=top.contents;  int transparencyAllowed=childTypes & (top.transparentToContents & ~contents);  for (int containerIndex=topIndex - 1; transparencyAllowed != 0; --containerIndex) {    if (containerIndex < 0) {      contents|=transparencyAllowed;      break;    }    ElementContainmentInfo container=openElements.get(containerIndex);    contents|=transparencyAllowed & container.contents;    transparencyAllowed=transparencyAllowed & container.transparentToContents & ~contents;  }  return (contents & childTypes) != 0;}  }
class C{  private static boolean writeUnmarshalArgument(IndentingWriter p,String streamName,Type type,String name) throws IOException {  boolean readObject=false;  if (name != null) {    p.p(name + " = ");  }  if (type.dimension().length() > 0 || type.asClassDoc() != null) {    p.p("(" + type.toString() + ") "+ streamName+ ".readObject()");    readObject=true;  } else   if (type.typeName().equals("boolean")) {    p.p(streamName + ".readBoolean()");  } else   if (type.typeName().equals("byte")) {    p.p(streamName + ".readByte()");  } else   if (type.typeName().equals("char")) {    p.p(streamName + ".readChar()");  } else   if (type.typeName().equals("short")) {    p.p(streamName + ".readShort()");  } else   if (type.typeName().equals("int")) {    p.p(streamName + ".readInt()");  } else   if (type.typeName().equals("long")) {    p.p(streamName + ".readLong()");  } else   if (type.typeName().equals("float")) {    p.p(streamName + ".readFloat()");  } else   if (type.typeName().equals("double")) {    p.p(streamName + ".readDouble()");  } else {    throw new AssertionError(type);  }  return readObject;}  }
class C{  public static void shouldNeverReachHere(String message){  throw new AssertionFailedException("Should never reach here" + (message != null ? ": " + message : ""));}  }
class C{  public ObjectFactory(){}  }
class C{  public GitHubPullRequestHead createPullRequestHead(GHCommitPointer ghPullRequestHead){  GitHubPullRequestHead dtoPullRequestHead=DtoFactory.getInstance().createDto(GitHubPullRequestHead.class);  dtoPullRequestHead.setLabel(ghPullRequestHead.getLabel());  dtoPullRequestHead.setRef(ghPullRequestHead.getRef());  dtoPullRequestHead.setSha(ghPullRequestHead.getSha());  return dtoPullRequestHead;}  }
class C{  public void statisticsStart(){  statistics=New.hashMap();}  }
class C{  public static SavedSearch createSavedSearch(final String rawJSON) throws TwitterException {  try {    final JSONObject json=new JSONObject(rawJSON);    return savedSearchConstructor.newInstance(json);  } catch (  final InstantiationException e) {    throw new TwitterException(e);  }catch (  final IllegalAccessException e) {    throw new AssertionError(e);  }catch (  final InvocationTargetException e) {    throw new TwitterException(e);  }catch (  final JSONException e) {    throw new TwitterException(e);  }}  }
class C{  public String decryptPin(String pin){  Cipher mwkCipher=this.getCipher(this.getMwkKey(),Cipher.DECRYPT_MODE);  String decryptedPinString=null;  try {    byte[] decryptedEan=mwkCipher.doFinal(StringUtil.fromHexString(pin));    byte[] decryptedPin=getByteRange(decryptedEan,8,8);    decryptedPinString=new String(decryptedPin);  } catch (  IllegalStateException e) {    Debug.logError(e,module);  }catch (  IllegalBlockSizeException e) {    Debug.logError(e,module);  }catch (  BadPaddingException e) {    Debug.logError(e,module);  }  if (debug) {    Debug.logInfo("decryptPin : " + pin + " / "+ decryptedPinString,module);  }  return decryptedPinString;}  }
class C{  public boolean readFromFile(String filename){  try {    lock();    StorageDelegator newDelegator=savingHelper.load(Application.getCurrentApplication(),filename,true);    if (newDelegator != null) {      Log.d("StorageDelegator","read saved state");      currentStorage=newDelegator.currentStorage;      if (currentStorage.getBoundingBoxes() == null) {        try {          currentStorage.setBoundingBox(currentStorage.calcBoundingBoxFromData());        } catch (        OsmException e) {          e.printStackTrace();        }      }      apiStorage=newDelegator.apiStorage;      undo=newDelegator.undo;      clipboard=newDelegator.clipboard;      factory=newDelegator.factory;      dirty=false;      return true;    } else {      Log.d("StorageDelegator","saved state null");      return false;    }  }  finally {    unlock();  }}  }
class C{  public FileSet createSignaturesFileSet(){  return addSignaturesResource(new FileSet());}  }
class C{  private void checkSize(final int i){  if (i >= max_size) {    final int old_size=max_size;    max_size+=increment_size;    if (max_size <= i) {      max_size=i + increment_size + 2;    }    final Object[] temp=items;    items=new Object[max_size];    System.arraycopy(temp,0,items,0,old_size);    increment_size=incrementSize(increment_size);  }}  }
class C{  private void loadTweets(String path) throws FileNotFoundException, UnsupportedEncodingException {  File file=new File("resources/tweets/" + path + ".txt");  Scanner scanner=new Scanner(file);  int multiple=0;  while (scanner.hasNextLine()) {    String[] line=scanner.nextLine().split("\t");    if (line.length == 4) {      if (line[0].equals("NA")) {        if (!storeTweetUni(line[3],line[2],line[1])) {          System.out.println("Tweet already in list: " + line[1]);          multiple++;        }      } else {        if (!storeTweetUni(line[3],line[2],line[0])) {          System.out.println("Tweet already in list: " + line[0]);          multiple++;        }      }    } else {      System.out.println("Wrong format: " + line[0]);    }  }  System.out.println("multiple Tweets: " + multiple);  scanner.close();}  }
class C{  private static int gcd(int a,int b){  while (b != 0) {    int tmp=a % b;    a=b;    b=tmp;  }  return a;}  }
class C{  public HashTable(){  table=new Entry[INITIAL_CAPACITY];}  }
class C{  private void readObject(){}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Widget cw=getWidget(stack);  Widget pw=getWidget(stack);  if (cw != null && pw != null)   return pw.contains(cw) ? Boolean.TRUE : Boolean.FALSE;  return Boolean.FALSE;}  }
class C{  protected Object convertToType(Class type,Object value) throws Throwable {  if (!type.isArray()) {    throw new ConversionException(toString(getClass()) + " cannot handle conversion to '" + toString(type)+ "' (not an array).");  }  int size=0;  Iterator iterator=null;  if (value.getClass().isArray()) {    size=Array.getLength(value);  } else {    Collection collection=convertToCollection(type,value);    size=collection.size();    iterator=collection.iterator();  }  Class componentType=type.getComponentType();  Object newArray=Array.newInstance(componentType,size);  for (int i=0; i < size; i++) {    Object element=iterator == null ? Array.get(value,i) : iterator.next();    element=elementConverter.convert(componentType,element);    Array.set(newArray,i,element);  }  return newArray;}  }
class C{  protected boolean matchesTemplate(Instance first){  for (  int m_DatasetKeyColumn : m_DatasetKeyColumns) {    if (first.value(m_DatasetKeyColumn) != m_Template.value(m_DatasetKeyColumn)) {      return false;    }  }  return true;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return STORE_NAME;case 3:return KEY;case 4:return VERSION;default :return null;}}  }
class C{  public void closeCursor(Cursor cursor){  cursor.close();  cursorMap.remove(Integer.valueOf(cursor.getCursorId()));}  }
class C{  protected void validateClassifierName() throws ValidationException {  if (getModel().getName().trim().length() < 1) {    throw new ValidationException(String.format(ErrorMessages.CLASSIFIER_NAME_MUST_NOT_BE_EMPTY,getClassifierName()));  }  String className=getModel().getName();  if (!N4JSLanguageUtils.isValidIdentifier(className)) {    throw new ValidationException(format(ErrorMessages.INVALID_CLASSIFIER_NAME,getClassifierName()));  }  if (languageHelper.isReservedIdentifier(className)) {    throw new ValidationException(format(ErrorMessages.RESERVED_CLASSIFIER_NAME,getClassifierName(),className));  }}  }
class C{  @Override public boolean isTimeIncluded(long timeStamp){  if (excludeAll == true) {    return false;  }  if (super.isTimeIncluded(timeStamp) == false) {    return false;  }  java.util.Calendar cl=createJavaCalendar(timeStamp);  int wday=cl.get(java.util.Calendar.DAY_OF_WEEK);  return !(isDayExcluded(wday));}  }
class C{  public boolean backtrack(char[][] board,int i,int j,String word,int start){  if (word.length() == start) {    return true;  }  if (i < 0 || i >= board.length || j < 0 || j >= board[0].length || board[i][j] != word.charAt(start)) {    return false;  }  board[i][j]='#';  boolean res=backtrack(board,i - 1,j,word,start + 1) || backtrack(board,i + 1,j,word,start + 1) || backtrack(board,i,j - 1,word,start + 1)|| backtrack(board,i,j + 1,word,start + 1);  board[i][j]=word.charAt(start);  return res;}  }
class C{  public static boolean isArrowpointAllowed(Object from,Object to,IKnowledge knowledge){  if (knowledge == null) {    return true;  }  return !knowledge.isRequired(to.toString(),from.toString()) && !knowledge.isForbidden(from.toString(),to.toString());}  }
class C{  public void printLayoutToStdOut() throws KeeperException, InterruptedException {  StringBuilder sb=new StringBuilder();  printLayout("/",0,sb);  System.out.println(sb.toString());}  }
class C{  private static void echo(String message){  System.out.println(message);}  }
class C{  private void updateBusinessObjectDefinitionEntity(BusinessObjectDefinitionEntity businessObjectDefinitionEntity,BusinessObjectDefinitionUpdateRequest request){  businessObjectDefinitionEntity.setDescription(request.getDescription());  businessObjectDefinitionEntity.setDisplayName(request.getDisplayName());  Map<String,BusinessObjectDefinitionAttributeEntity> existingAttributeEntities=new HashMap<>();  for (  BusinessObjectDefinitionAttributeEntity attributeEntity : businessObjectDefinitionEntity.getAttributes()) {    String mapKey=attributeEntity.getName().toLowerCase();    if (existingAttributeEntities.containsKey(mapKey)) {      throw new IllegalStateException(String.format("Found duplicate attribute with name \"%s\" for business object definition {namespace: \"%s\", businessObjectDefinitionName: \"%s\"}.",mapKey,businessObjectDefinitionEntity.getNamespace().getCode(),businessObjectDefinitionEntity.getName()));    }    existingAttributeEntities.put(mapKey,attributeEntity);  }  List<BusinessObjectDefinitionAttributeEntity> createdAttributeEntities=new ArrayList<>();  List<BusinessObjectDefinitionAttributeEntity> retainedAttributeEntities=new ArrayList<>();  if (!CollectionUtils.isEmpty(request.getAttributes())) {    for (    Attribute attribute : request.getAttributes()) {      String lowercaseAttributeName=attribute.getName().toLowerCase();      if (existingAttributeEntities.containsKey(lowercaseAttributeName)) {        BusinessObjectDefinitionAttributeEntity attributeEntity=existingAttributeEntities.get(lowercaseAttributeName);        if (!StringUtils.equals(attribute.getValue(),attributeEntity.getValue())) {          attributeEntity.setValue(attribute.getValue());        }        retainedAttributeEntities.add(attributeEntity);      } else {        BusinessObjectDefinitionAttributeEntity attributeEntity=new BusinessObjectDefinitionAttributeEntity();        businessObjectDefinitionEntity.getAttributes().add(attributeEntity);        attributeEntity.setBusinessObjectDefinition(businessObjectDefinitionEntity);        attributeEntity.setName(attribute.getName());        attributeEntity.setValue(attribute.getValue());        retainedAttributeEntities.add(attributeEntity);      }    }  }  businessObjectDefinitionEntity.getAttributes().retainAll(retainedAttributeEntities);  businessObjectDefinitionEntity.getAttributes().addAll(createdAttributeEntities);  businessObjectDefinitionDao.saveAndRefresh(businessObjectDefinitionEntity);}  }
class C{  public String toString(){  return "DMSLatLonPoint[lat_isnegative = " + lat_isnegative + ", lat_degrees = "+ lat_degrees+ ", lat_minutes = "+ lat_minutes+ ", lat_seconds = "+ lat_seconds+ ", lon_isnegative = "+ lon_isnegative+ ", lon_degrees = "+ lon_degrees+ ", lon_minutes = "+ lon_minutes+ ", lon_seconds = "+ lon_seconds+ "]";}  }
class C{  public SIPClientTransaction createClientTransaction(SIPRequest sipRequest,MessageChannel encapsulatedMessageChannel){  SIPClientTransaction ct=new SIPClientTransaction(this,encapsulatedMessageChannel);  ct.setOriginalRequest(sipRequest);  return ct;}  }
class C{  public static void main(String[] args){  java.util.Date date=new java.util.Date();  System.out.println("\nThe dates and times for elapsedtimes 10000, " + "100000, 1000000, 10000000,\n100000000, 1000000000, 10000000000," + " and 100000000000, respectively");  for (long i=10000; i <= 1e11; i*=10) {    date.setTime(i);    System.out.println(date.toString());  }}  }
class C{  public static void hsl2rgb(float[] hsl,int[] rgb){  int r, g, b;  float h=hsl[0];  float s=hsl[1];  float l=hsl[2];  if (s < Algebra.EPSILON) {    r=g=b=(int)(255 * l);  } else {    float tmp1, tmp2;    if (l < 0.5f) {      tmp1=l * (1f + s);    } else {      tmp1=l + s - l * s;    }    tmp2=2f * l - tmp1;    float rf=hue2rgb(limitHue(h + 1f / 3f),tmp2,tmp1);    float gf=hue2rgb(limitHue(h),tmp2,tmp1);    float bf=hue2rgb(limitHue(h - 1f / 3f),tmp2,tmp1);    r=((int)(255 * rf)) & 0xff;    g=((int)(255 * gf)) & 0xff;    b=((int)(255 * bf)) & 0xff;  }  rgb[RED]=r;  rgb[GREEN]=g;  rgb[BLUE]=b;}  }
class C{  public RequestHandle patch(Context context,String url,RequestParams params,ResponseHandlerInterface responseHandler){  return patch(context,url,paramsToEntity(params,responseHandler),null,responseHandler);}  }
class C{  public void addConstraint(int lowerID,int higherID){  Set<Integer> as=smaller.get(lowerID);  Set<Integer> bs=smaller.get(higherID);  Set<Integer> al=larger.get(lowerID);  Set<Integer> bl=larger.get(higherID);  if (as == null) {    as=new HashSet<Integer>();    smaller.put(lowerID,as);  }  if (bs == null) {    bs=new HashSet<Integer>();    smaller.put(higherID,bs);  }  if (al == null) {    al=new HashSet<Integer>();    larger.put(lowerID,al);  }  if (bl == null) {    bl=new HashSet<Integer>();    larger.put(higherID,bl);  }  as.add(higherID);  bl.add(lowerID);  as.addAll(bs);  bl.addAll(al);  for (  Integer i : bs) {    larger.get(i).add(lowerID);  }  for (  Integer i : al) {    smaller.get(i).add(higherID);  }}  }
class C{  private void writeInitialProperites(){  addProperty("rvm version",Configuration.RVM_VERSION_STRING);  addProperty("rvm config",Configuration.RVM_CONFIGURATION);  addProperty("Tick Frequency","1000000000");}  }
class C{  private static List copyValues(FDStackFrameImpl frame,List to,Struct from){  Iterator it=from.entrySet().iterator();  Entry entry;  while (it.hasNext()) {    entry=(Entry)it.next();    to.add(new FDVariable(frame,(String)entry.getKey(),FDCaster.toFDValue(frame,entry.getValue())));  }  return to;}  }
class C{  public BruteForceThread(double[][] points,double[] target,int offset,int len){  this.points=points;  this.target=target;  this.offset=offset;  this.len=len;}  }
class C{  private void verifySptAssignmentChanges(ComputeVirtualPool cvp,ServiceProfileTemplateAssignmentChanges sptAssignmentChanges){  ServiceProfileTemplateAssignments addAssignments=sptAssignmentChanges.getAdd();  ServiceProfileTemplateAssignments removeAssignments=sptAssignmentChanges.getRemove();  if ((addAssignments != null) && (removeAssignments != null)) {    Set<String> addSpts=addAssignments.getServiceProfileTemplates();    Set<String> removeSpts=removeAssignments.getServiceProfileTemplates();    if ((addSpts != null) && (removeSpts != null)) {      Set<String> addSet=new HashSet<String>(addSpts);      Set<String> removeSet=new HashSet<String>(removeSpts);      addSet.retainAll(removeSet);      if (!addSet.isEmpty()) {        _log.error("Request specifies the same service profile templates (s) in both the add and remove lists {}",addSet);        throw APIException.badRequests.sameVirtualArrayInAddRemoveList();      }    }  }}  }
class C{  public static void appendHKeySegments(Tuple2 t,Key key,Group group){  Table table=null;  int nextOrdinalIndex=0;  for (int i=0; i < t.size(); i++) {    Object seg=t.get(i);    if ((i == nextOrdinalIndex) && (seg instanceof Long)) {      int ordinal=((Long)seg).intValue();      boolean found=false;      if (i == 0) {        table=group.getRoot();        found=(table.getOrdinal() == ordinal);      } else {        for (        Join join : table.getChildJoins()) {          table=join.getChild();          if (table.getOrdinal() == ordinal) {            found=true;            break;          }        }      }      if (found) {        int[] keyDepth=table.hKey().keyDepth();        nextOrdinalIndex=keyDepth[keyDepth.length - 1];        seg=ordinal;      }    }    key.append(seg);  }}  }
class C{  public ObjectParameter(OptionID optionID,Class<?> restrictionClass){  super(optionID,restrictionClass);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public final static int parseInt(char[] digitChars,int offset,int len){  int num=digitChars[offset] - '0';  len+=offset;  if (++offset < len) {    num=(num * 10) + (digitChars[offset] - '0');    if (++offset < len) {      num=(num * 10) + (digitChars[offset] - '0');      if (++offset < len) {        num=(num * 10) + (digitChars[offset] - '0');        if (++offset < len) {          num=(num * 10) + (digitChars[offset] - '0');          if (++offset < len) {            num=(num * 10) + (digitChars[offset] - '0');            if (++offset < len) {              num=(num * 10) + (digitChars[offset] - '0');              if (++offset < len) {                num=(num * 10) + (digitChars[offset] - '0');                if (++offset < len) {                  num=(num * 10) + (digitChars[offset] - '0');                }              }            }          }        }      }    }  }  return num;}  }
class C{  public void startDetailActivity(int position){  View view=seriesRecyclerView.findViewHolderForAdapterPosition(position).itemView;  Serie serie=(Serie)view.getTag();  ImageView image=(ImageView)view.findViewById(R.id.serie_image);  DetailActivity.launch(this,image,serie);}  }
class C{  public DefaultServiceRequestContext(ServiceConfig cfg,Channel ch,SessionProtocol sessionProtocol,String method,String path,String mappedPath,Object request,@Nullable SSLSession sslSession){  super(sessionProtocol,method,path,request);  this.ch=ch;  this.cfg=cfg;  this.mappedPath=mappedPath;  this.sslSession=sslSession;  requestLog=new DefaultRequestLog();  requestLog.start(ch,sessionProtocol,cfg.virtualHost().defaultHostname(),method,path);  responseLog=new DefaultResponseLog(requestLog,requestLog);  logger=newLogger(cfg);  final ServerConfig serverCfg=cfg.server().config();  requestTimeoutMillis=serverCfg.defaultRequestTimeoutMillis();  maxRequestLength=serverCfg.defaultMaxRequestLength();}  }
class C{  public TextUI(){  ClientSingletonRepository.setUserInterface(this);  soundSystemFacade=new NoSoundFacade();}  }
class C{  public ParallelTaskBuilder prepareHttpOptions(String url){  reinitIfClosed();  ParallelTaskBuilder cb=new ParallelTaskBuilder();  cb.getHttpMeta().setHttpMethod(HttpMethod.OPTIONS);  cb.getHttpMeta().setRequestUrlPostfix(url);  return cb;}  }
class C{  public char[] expandCurrentSegment(){  char[] curr=_currentSegment;  int len=curr.length;  int newLen=(len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN + 1) : Math.min(MAX_SEGMENT_LEN,len + (len >> 1));  _currentSegment=_charArray(newLen);  System.arraycopy(curr,0,_currentSegment,0,len);  return _currentSegment;}  }
class C{  public HighlightBuilder encoder(String encoder){  this.encoder=encoder;  return this;}  }
class C{  public BlockBossLogic(String name){  super(name + rb.getString("_BlockBossLogic"));  this.name=name;  if (log.isTraceEnabled()) {    log.trace("Create BBL " + name);  }  jmri.InstanceManager.getDefault(jmri.SignalHeadManager.class).addVetoableChangeListener(this);  jmri.InstanceManager.turnoutManagerInstance().addVetoableChangeListener(this);  jmri.InstanceManager.sensorManagerInstance().addVetoableChangeListener(this);  driveSignal=nbhm.getNamedBeanHandle(name,InstanceManager.getDefault(jmri.SignalHeadManager.class).getSignalHead(name));  if (driveSignal.getBean() == null) {    log.warn(rb.getString("Signal_") + name + rb.getString("_was_not_found!"));  }}  }
class C{  public void parse(String systemId) throws IOException, SAXException {  parse(new InputSource(systemId));}  }
class C{  public void delete(String name) throws IOException {  if (name.equalsIgnoreCase(VERSION)) {    version=V1;  } else {    throw new IOException("Attribute name not recognized by " + "CertAttrSet: CertificateVersion.");  }}  }
class C{  private void createLayout(){  this.pnlPanel.removeAll();  GroupLayout layout=new GroupLayout(this.pnlPanel);  this.pnlPanel.setLayout(layout);  layout.setAutoCreateContainerGaps(true);  layout.setAutoCreateGaps(false);  int size=this.pointPanels.size();  ParallelGroup hGroup=layout.createParallelGroup();  for (int i=0; i < size; i++) {    PointPanel panel=this.pointPanels.get(i);    hGroup.addComponent(panel);    if (i < 3) {      panel.btnRemove.setEnabled(false);    } else {      panel.btnRemove.setEnabled(true);    }  }  SequentialGroup vGroup=layout.createSequentialGroup();  for (int i=0; i < size; i++) {    PointPanel panel=this.pointPanels.get(i);    vGroup.addComponent(panel);  }  layout.setHorizontalGroup(hGroup);  layout.setVerticalGroup(vGroup);}  }
class C{  public static String formatCoordinate(double coordinate){  return Location.convert(coordinate,Location.FORMAT_DEGREES) + COORDINATE_DEGREE;}  }
class C{  @SuppressWarnings("ForLoopReplaceableByForEach") private MiniFuture miniFuture(IgniteUuid miniId){synchronized (sync) {    for (int i=0; i < futuresCount(); i++) {      IgniteInternalFuture<Boolean> fut=future(i);      if (!isMini(fut))       continue;      MiniFuture mini=(MiniFuture)fut;      if (mini.futureId().equals(miniId)) {        if (!mini.isDone())         return mini; else         return null;      }    }  }  return null;}  }
class C{  public GeneralizedSemPmWrapper(TimeLagGraphWrapper wrapper){  this(wrapper.getGraph());}  }
class C{  public int nextDimension(DimensionalNode node){  return nextDimension(node.dimension);}  }
class C{  @Category(FlakyTest.class) @Test public void testPRWithRegionCloseInOneDatastoreWithoutDelay() throws Exception {  LogWriterUtils.getLogWriter().info("PRQueryRegionCloseDUnitTest#testPRWithRegionCloseInOneDatastoreWithoutDelay: Querying PR Test with region Close PR operation*****");  Host host=Host.getHost(0);  VM vm0=host.getVM(0);  VM vm1=host.getVM(1);  VM vm2=host.getVM(2);  setCacheInVMs(vm0,vm1,vm2);  List vmList=new LinkedList();  vmList.add(vm1);  vmList.add(vm2);  LogWriterUtils.getLogWriter().info("PRQueryRegionCloseDUnitTest#testPRWithRegionCloseInOneDatastoreWithoutDelay: Creating Accessor node on VM0");  vm0.invoke(PRQHelp.getCacheSerializableRunnableForPRAccessorCreate(name,redundancy,PortfolioData.class));  LogWriterUtils.getLogWriter().info("PRQueryRegionCloseDUnitTest#testPRWithRegionCloseInOneDatastoreWithoutDelay: Successfully Created Accessor node on VM0");  LogWriterUtils.getLogWriter().info("PRQueryRegionCloseDUnitTest#testPRWithRegionCloseInOneDatastoreWithoutDelay: Creating PR's across all VM1 , VM2");  vm1.invoke(PRQHelp.getCacheSerializableRunnableForPRCreate(name,redundancy,PortfolioData.class));  vm2.invoke(PRQHelp.getCacheSerializableRunnableForPRCreate(name,redundancy,PortfolioData.class));  LogWriterUtils.getLogWriter().info("PRQueryRegionCloseDUnitTest#testPRWithRegionCloseInOneDatastoreWithoutDelay: Successfully Created PR on VM1 , VM2");  LogWriterUtils.getLogWriter().info("PRQueryRegionCloseDUnitTest#testPRWithRegionCloseInOneDatastoreWithoutDelay: Creating Local Region on VM0");  vm0.invoke(PRQHelp.getCacheSerializableRunnableForLocalRegionCreation(localName,PortfolioData.class));  LogWriterUtils.getLogWriter().info("PRQueryRegionCloseDUnitTest#testPRWithRegionCloseInOneDatastoreWithoutDelay: Successfully Created Local Region on VM0");  final PortfolioData[] portfolio=createPortfolioData(cnt,cntDest);  LogWriterUtils.getLogWriter().info("PRQueryRegionCloseDUnitTest#testPRWithRegionCloseInOneDatastoreWithoutDelay: Inserting Portfolio data through the accessor node");  vm0.invoke(PRQHelp.getCacheSerializableRunnableForPRPuts(name,portfolio,cnt,cntDest));  LogWriterUtils.getLogWriter().info("PRQueryRegionCloseDUnitTest#testPRWithRegionCloseInOneDatastoreWithoutDelay: Successfully Inserted Portfolio data through the accessor node");  LogWriterUtils.getLogWriter().info("PRQueryRegionCloseDUnitTest#testPRWithRegionCloseInOneDatastoreWithoutDelay: Inserting Portfolio data on local node  VM0 for result Set Comparison");  vm0.invoke(PRQHelp.getCacheSerializableRunnableForPRPuts(localName,portfolio,cnt,cntDest));  LogWriterUtils.getLogWriter().info("PRQueryRegionCloseDUnitTest#testPRWithRegionCloseInOneDatastoreWithoutDelay: Successfully Inserted Portfolio data on local node  VM0 for result Set Comparison");  Random random=new Random();  AsyncInvocation async0;  LogWriterUtils.getLogWriter().info("PRQueryRegionCloseDUnitTest#testPRWithRegionCloseInOneDatastoreWithoutDelay: Querying on VM0 both on PR Region & local ,also  Comparing the Results sets from both");  async0=vm0.invokeAsync(PRQHelp.getCacheSerializableRunnableForPRQueryAndCompareResults(name,localName));  LogWriterUtils.getLogWriter().info("PRQueryRegionCloseDUnitTest#testPRWithRegionCloseInOneDatastoreWithoutDelay: Calling for Region.close() on either of the Datastores VM1 , VM2 at random and then recreating the cache, with a predefined Delay ");  for (int j=0; j < queryTestCycle; j++) {    int k=(random.nextInt(vmList.size()));    if (0 != k) {      ((VM)(vmList.get(k))).invoke(PRQHelp.getCacheSerializableRunnableForRegionClose(name,redundancy,PortfolioData.class));      Wait.pause(threadSleepTime);    }  }  ThreadUtils.join(async0,30 * 1000);  if (async0.exceptionOccurred()) {    boolean isForceReattempt=false;    Throwable t=async0.getException();    do {      if (t instanceof ForceReattemptException) {        isForceReattempt=true;        break;      }      t=t.getCause();    } while (t != null);    if (!isForceReattempt) {      Assert.fail("Unexpected exception during query",async0.getException());    }  }  LogWriterUtils.getLogWriter().info("PRQueryRegionCloseDUnitTest#testPRWithRegionCloseInOneDatastoreWithoutDelay: Querying with PR Operations ENDED*****");}  }
class C{  private boolean initServerConnection(){  if (!mConnected) {    mInterceptor=new AuthHeaderClientInterceptor(getUserIdToken());    try {      mChannelImpl=OkHttpChannelBuilder.forAddress(AndroidConstants.HOST,AndroidConstants.PORT).build();      Channel mOriginChannel=ClientInterceptors.intercept(mChannelImpl,mInterceptor);      mBlockingStub=AbelanaGrpc.newBlockingStub(mOriginChannel);      mConnected=true;    } catch (    RuntimeException e) {      mConnected=false;    }  }  return mConnected;}  }
class C{  private static ASN1Primitive convertValueToObject(Extension ext) throws IllegalArgumentException {  try {    return ASN1Primitive.fromByteArray(ext.getExtnValue().getOctets());  } catch (  IOException e) {    throw new IllegalArgumentException("can't convert extension: " + e);  }}  }
class C{  public CDCIPictureEssenceDescriptorBO(KLVPacket.Header header,ByteProvider byteProvider,Map<Integer,MXFUID> localTagToUIDMap,IMFErrorLogger imfErrorLogger) throws IOException {  super(header);  long numBytesToRead=this.header.getVSize();  StructuralMetadata.populate(this,byteProvider,numBytesToRead,localTagToUIDMap);  if (this.instance_uid == null) {    imfErrorLogger.addError(IMFErrorLogger.IMFErrors.ErrorCodes.IMF_ESSENCE_METADATA_ERROR,IMFErrorLogger.IMFErrors.ErrorLevels.NON_FATAL,CDCIPictureEssenceDescriptor.ERROR_DESCRIPTION_PREFIX + "instance_uid is null");  }}  }
class C{  public GPUImageRGBDilationFilter(int radius){  this(getVertexShader(radius),getFragmentShader(radius));}  }
class C{  public UnionViewFactory(){}  }
class C{  public void merge(Region r){  if (this.start == r.end + 1) {    this.start=r.start;  } else   if (this.end == r.start - 1) {    this.end=r.end;  } else {    throw new AssertionError("Ranges : Merge called on non contiguous values : [this]:" + this + " and "+ r);  }  updateAvailable();}  }
class C{  public PdfDecoderFX(final boolean newRender){  pages=new SingleDisplayFX(this,options);  options.setRenderPage(newRender);  if (!FontMappings.fontsInitialised) {    FontMappings.initFonts();    FontMappings.fontsInitialised=true;  }  if (newRender) {  }  setId("PdfDecoderFX");  this.setCacheHint(CacheHint.QUALITY);}  }
class C{  public static Paint newCornerPaint(Context context){  final float lineThicknessPx=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,DEFAULT_CORNER_THICKNESS_DP,context.getResources().getDisplayMetrics());  final Paint cornerPaint=new Paint();  cornerPaint.setColor(DEFAULT_CORNER_COLOR);  cornerPaint.setStrokeWidth(lineThicknessPx);  cornerPaint.setStyle(Paint.Style.STROKE);  return cornerPaint;}  }
class C{  public void onStartDrag(int fromIndex,int fromParentIndex,int offsetOfParent){}  }
class C{  public RopMethod(BasicBlockList blocks,int firstLabel){  if (blocks == null) {    throw new NullPointerException("blocks == null");  }  if (firstLabel < 0) {    throw new IllegalArgumentException("firstLabel < 0");  }  this.blocks=blocks;  this.firstLabel=firstLabel;  this.predecessors=null;  this.exitPredecessors=null;}  }
class C{  public Acos(){  super("acos",1);}  }
class C{  private void doRemoveMapping(String user,String domain,String mapping) throws RecipientRewriteTableException {  HTableInterface table=null;  try {    table=TablePool.getInstance().getRecipientRewriteTable();    Delete delete=new Delete(Bytes.toBytes(getRowKey(user,domain)));    table.delete(delete);    table.flushCommits();  } catch (  IOException e) {    log.error("Error while removing mapping from HBase",e);    throw new RecipientRewriteTableException("Error while removing mapping from HBase",e);  } finally {    if (table != null) {      try {        table.close();      } catch (      IOException e) {      }    }  }}  }
class C{  public Object invoke(Remote obj,Method method,Object[] params,long opnum) throws Exception {  if (clientRefLog.isLoggable(Log.VERBOSE)) {    clientRefLog.log(Log.VERBOSE,"method: " + method);  }  if (clientCallLog.isLoggable(Log.VERBOSE)) {    logClientCall(obj,method);  }  Connection conn=ref.getChannel().newConnection();  RemoteCall call=null;  boolean reuse=true;  boolean alreadyFreed=false;  try {    if (clientRefLog.isLoggable(Log.VERBOSE)) {      clientRefLog.log(Log.VERBOSE,"opnum = " + opnum);    }    call=new StreamRemoteCall(conn,ref.getObjID(),-1,opnum);    try {      ObjectOutput out=call.getOutputStream();      marshalCustomCallData(out);      Class<?>[] types=method.getParameterTypes();      for (int i=0; i < types.length; i++) {        marshalValue(types[i],params[i],out);      }    } catch (    IOException e) {      clientRefLog.log(Log.BRIEF,"IOException marshalling arguments: ",e);      throw new MarshalException("error marshalling arguments",e);    }    call.executeCall();    try {      Class<?> rtype=method.getReturnType();      if (rtype == void.class)       return null;      ObjectInput in=call.getInputStream();      Object returnValue=unmarshalValue(rtype,in);      alreadyFreed=true;      clientRefLog.log(Log.BRIEF,"free connection (reuse = true)");      ref.getChannel().free(conn,true);      return returnValue;    } catch (    IOException e) {      clientRefLog.log(Log.BRIEF,"IOException unmarshalling return: ",e);      throw new UnmarshalException("error unmarshalling return",e);    }catch (    ClassNotFoundException e) {      clientRefLog.log(Log.BRIEF,"ClassNotFoundException unmarshalling return: ",e);      throw new UnmarshalException("error unmarshalling return",e);    } finally {      try {        call.done();      } catch (      IOException e) {        reuse=false;      }    }  } catch (  RuntimeException e) {    if ((call == null) || (((StreamRemoteCall)call).getServerException() != e)) {      reuse=false;    }    throw e;  }catch (  RemoteException e) {    reuse=false;    throw e;  }catch (  Error e) {    reuse=false;    throw e;  } finally {    if (!alreadyFreed) {      if (clientRefLog.isLoggable(Log.BRIEF)) {        clientRefLog.log(Log.BRIEF,"free connection (reuse = " + reuse + ")");      }      ref.getChannel().free(conn,reuse);    }  }}  }
class C{  public ReaderModeActivityDelegate(ChromeActivity activity){  mActivity=activity;}  }
class C{  public static String isare(final int quantity){  if (quantity == 1) {    return "is";  } else {    return "are";  }}  }
class C{  public static boolean check(LocPathIterator path){  HasPositionalPredChecker hppc=new HasPositionalPredChecker();  path.callVisitors(null,hppc);  return hppc.m_hasPositionalPred;}  }
class C{  protected boolean isJar(URL url){  return isJar(url,new byte[JAR_MAGIC.length]);}  }
class C{  private String parameters(){  StringBuilder buf=new StringBuilder("[keyStoreType=").append(keyStoreType);  buf.append(", proto=").append(proto).append(", keyStoreFile=").append(keyStoreFilePath);  if (trustMgrs != null)   buf.append(", trustMgrs=").append(Arrays.toString(trustMgrs)); else   buf.append(", trustStoreFile=").append(trustStoreFilePath);  buf.append(']');  return buf.toString();}  }
class C{  public boolean isInitialized(){  return this.isInitialized;}  }
class C{  @Override protected EClass eStaticClass(){  return RegularExpressionPackage.Literals.BACKSPACE;}  }
class C{  public void testAccumulateAndGetMT(){  final int incs=1000000;  final int nthreads=4;  final ExecutorService pool=Executors.newCachedThreadPool();  LongAccumulator a=new LongAccumulator(null,0L);  Phaser phaser=new Phaser(nthreads + 1);  for (int i=0; i < nthreads; ++i)   pool.execute(new AccTask(a,phaser,incs));  phaser.arriveAndAwaitAdvance();  phaser.arriveAndAwaitAdvance();  long expected=incs - 1;  long result=a.get();  assertEquals(expected,result);  pool.shutdown();}  }
class C{  protected DBServerVisibleSecret createSecret(DBGroup group,String clientVisibleEncrypted,String criticalDataEncrypted,DBGroup org) throws SQLException {  DBServerVisibleSecret secret=new DBServerVisibleSecret();  manager.svsDao.create(secret);  addSecretToGroup(secret,group,clientVisibleEncrypted,criticalDataEncrypted);  if (org != null) {    assert (org.isTopLevelOrganization());    addSecretToGroup(secret,org,clientVisibleEncrypted,criticalDataEncrypted);  }  return secret;}  }
class C{  public Matrix4d m32(double m32){  this.m32=m32;  properties&=~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE);  return this;}  }
class C{  public void detach(){}  }
class C{  private void drag(VelocityTracker vt,int startX,int endX,int startY,int endY,int steps,long startime,int duration){  drag(vt,startX,endX,startY,endY,steps,startime,duration,new LinearInterpolator());}  }
class C{  public static double v3Length(double[] a){  return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);}  }
class C{  public OrderByClause add(String property,boolean isDescending){  orderByExpressions.add(new OrderByElement(Expressions.getPropExpr(property),isDescending));  return this;}  }
class C{  MutableLeafData(final MutableKeyBuffer keys,final MutableValueBuffer values,final long[] versionTimestamps,final boolean[] deleteMarkers,final boolean[] rawRecords){  assert keys != null;  assert values != null;  assert keys.capacity() == values.capacity();  if (versionTimestamps != null) {    assert versionTimestamps.length == keys.capacity();  }  if (deleteMarkers != null) {    assert deleteMarkers.length == keys.capacity();  }  if (rawRecords != null) {    assert rawRecords.length == keys.capacity();  }  this.keys=keys;  this.vals=values;  this.versionTimestamps=versionTimestamps;  this.deleteMarkers=deleteMarkers;  this.rawRecords=rawRecords;  if (versionTimestamps != null)   recalcMinMaxVersionTimestamp();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case SexecPackage.TRACE_STATE_ENTERED__STATE:    if (resolve)     return getState();  return basicGetState();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void saveAsset() throws IOException {  file.saveAsset();}  }
class C{  protected SimpleDatabase(KeePassFile keePassFile){  this.keePassFile=keePassFile;  this.keePassFile.root.group.database=this;  fixUp(this.keePassFile.root.group);}  }
class C{  public void paintScrollBarTrackBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public static SubselectEvalStrategy createStrategy(ExprSubselectNode subselectExpression,boolean isNot,boolean isAll,boolean isAny,RelationalOpEnum relationalOp) throws ExprValidationException {  if (subselectExpression.getChildNodes().length != 1) {    throw new ExprValidationException("The Subselect-IN requires 1 child expression");  }  ExprNode valueExpr=subselectExpression.getChildNodes()[0];  Class typeOne=JavaClassHelper.getBoxedType(subselectExpression.getChildNodes()[0].getExprEvaluator().getType());  if ((typeOne.isArray()) || (JavaClassHelper.isImplementsInterface(typeOne,Collection.class)) || (JavaClassHelper.isImplementsInterface(typeOne,Map.class))) {    throw new ExprValidationException("Collection or array comparison is not allowed for the IN, ANY, SOME or ALL keywords");  }  Class typeTwo;  if (subselectExpression.getSelectClause() != null) {    typeTwo=subselectExpression.getSelectClause()[0].getExprEvaluator().getType();  } else {    typeTwo=subselectExpression.getRawEventType().getUnderlyingType();  }  if (relationalOp != null) {    if ((typeOne != String.class) || (typeTwo != String.class)) {      if (!JavaClassHelper.isNumeric(typeOne)) {        throw new ExprValidationException("Implicit conversion from datatype '" + typeOne.getSimpleName() + "' to numeric is not allowed");      }      if (!JavaClassHelper.isNumeric(typeTwo)) {        throw new ExprValidationException("Implicit conversion from datatype '" + typeTwo.getSimpleName() + "' to numeric is not allowed");      }    }    Class compareType=JavaClassHelper.getCompareToCoercionType(typeOne,typeTwo);    RelationalOpEnum.Computer computer=relationalOp.getComputer(compareType,typeOne,typeTwo);    ExprEvaluator selectClause=subselectExpression.getSelectClause() == null ? null : subselectExpression.getSelectClause()[0].getExprEvaluator();    ExprEvaluator filterExpr=subselectExpression.getFilterExpr();    if (isAny) {      return new SubselectEvalStrategyRelOpAny(computer,valueExpr.getExprEvaluator(),selectClause,filterExpr);    }    return new SubselectEvalStrategyRelOpAll(computer,valueExpr.getExprEvaluator(),selectClause,filterExpr);  }  Class coercionType;  boolean mustCoerce;  try {    coercionType=JavaClassHelper.getCompareToCoercionType(typeOne,typeTwo);  } catch (  CoercionException ex) {    throw new ExprValidationException("Implicit conversion from datatype '" + typeTwo.getSimpleName() + "' to '"+ typeOne.getSimpleName()+ "' is not allowed");  }  mustCoerce=false;  if ((coercionType != JavaClassHelper.getBoxedType(typeOne)) || (coercionType != JavaClassHelper.getBoxedType(typeTwo))) {    if (JavaClassHelper.isNumeric(coercionType)) {      mustCoerce=true;    }  }  ExprEvaluator value=valueExpr.getExprEvaluator();  ExprEvaluator select=subselectExpression.getSelectClause() == null ? null : subselectExpression.getSelectClause()[0].getExprEvaluator();  ExprEvaluator filter=subselectExpression.getFilterExpr() == null ? null : subselectExpression.getFilterExpr();  if (isAll) {    return new SubselectEvalStrategyEqualsAll(isNot,mustCoerce,coercionType,value,select,filter);  } else   if (isAny) {    return new SubselectEvalStrategyEqualsAny(isNot,mustCoerce,coercionType,value,select,filter);  } else {    return new SubselectEvalStrategyEqualsIn(isNot,mustCoerce,coercionType,value,select,filter);  }}  }
class C{  @Override public final boolean put(final Row.Entry entry) throws SpaceExceededException {  assert (entry != null);  final byte[] key=entry.getPrimaryKeyBytes();  assert (key != null);  final byte[] entrybytes=entry.bytes();  assert entrybytes.length >= this.rowdef.primaryKeyLength;synchronized (this) {    final int index=find(key,0);    if (index < 0) {      super.addUnique(entry);      return true;    }    final int sb=this.sortBound;    set(index,entry);    this.sortBound=sb;    return false;  }}  }
class C{  public ItemsSketch(final int maxMapSize){  this(toLog2(maxMapSize,"maxMapSize"),LG_MIN_MAP_SIZE);}  }
class C{  protected GlyfTable(TrueTypeFont ttf){  super(TrueTypeTable.GLYF_TABLE);  loca=(LocaTable)ttf.getTable("loca");  MaxpTable maxp=(MaxpTable)ttf.getTable("maxp");  int numGlyphs=maxp.getNumGlyphs();  glyphs=new Object[numGlyphs];}  }
class C{  public boolean usingMipmaps(){  return usingMipmaps;}  }
class C{  private static void printErrMsg(int err,String uname){switch (err) {case ServerErr.SUCCESS:    break;case ConsistencyErr.CHECK_PASSED:  break;case ClientUtils.INTERNAL_CLIENT_ERR:printErr("Some internal client error occurred while processing user " + uname + ". Check the logs for details.");break;case ServerErr.INTERNAL_SERVER_ERR:printErr("The server experienced some internal error. Current user: " + uname);break;case ServerErr.NAME_EXISTS_ERR:printErr("Couldn't register the name " + uname + " because it already exists.");break;case ServerErr.NAME_NOT_FOUND_ERR:printErr("Couldn't find the name " + uname + ".");break;case ServerErr.MALFORMED_CLIENT_MSG_ERR:printErr("The server received a malformed message for user " + uname);break;case ServerErr.MALFORMED_SERVER_MSG_ERR:printErr("Received a malformed server message. Current user: " + uname);break;case ServerErr.SIGNED_CHANGE_VERIF_ERR:printErr("The server could not verify the signed data change for user " + uname + ".");break;case ServerErr.SERVER_ERR:printErr("Some other server error occurred. Current user: " + uname);break;case ConsistencyErr.BAD_MAPPING_ERR:printErr("Mapping inconsistent with tree root for user " + uname + ".");break;case ConsistencyErr.UNEXPECTED_KEY_ERR:printErr("Unexpected key for user " + uname + ".");break;case ConsistencyErr.BAD_STR_ERR:printErr("Inconsistent signed tree roots. Current user: " + uname);break;case ConsistencyErr.BAD_SERVER_SIG_ERR:printErr("Could not verify the server's identity. Current user: " + uname);break;case ConsistencyErr.KEYSTORE_ERR:printErr("Could not find the private or public key. Current user: " + uname);break;case ConsistencyErr.DISALLOWED_OP_ERR:printErr("Client " + uname + " tried to perform a forbidden operation");break;default :printErr("Some unknown server error occurred: " + err);break;}}  }
class C{  public final Cursor increment(){  return increment(1);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:01.623 -0500",hash_original_method="7C5933C28B73D77B67311599A1BD6348",hash_generated_method="CDB735DF58562B10FB6D23459A5ACA7C") public RAck(){  super(NAME);}  }
class C{  public void parse(final SetCookie cookie,final String value) throws MalformedCookieException {  if (cookie == null) {    throw new IllegalArgumentException("Cookie may not be null");  }  if (value == null) {    throw new MalformedCookieException("Missing value for version attribute");  }  int version=-1;  try {    version=Integer.parseInt(value);  } catch (  NumberFormatException e) {    version=-1;  }  if (version < 0) {    throw new MalformedCookieException("Invalid cookie version.");  }  cookie.setVersion(version);}  }
class C{  public boolean isEmpty(){  return currentBatch.isEmpty();}  }
class C{  public static void finishStartingService(Service service){  if (BuildConfig.DEBUG)   Log.v("SmsMonitorService: finishStartingService()");  service.stopSelf();}  }
class C{  public void install(StatusListener listener){  initProject();  logger.info("Installing the Data Hub into MarkLogic");  AppConfig config=getAppConfig();  HubAppDeployer deployer=new HubAppDeployer(client,adminManager,listener);  deployer.setCommands(getCommands(config));  deployer.deploy(config);}  }
class C{  public double eval(double params[]){  return (Math.cbrt(params[0]));}  }
class C{  public static boolean isDefaultCreateJournalDir(){  return DEFAULT_CREATE_JOURNAL_DIR;}  }
class C{  private String deleteElementReplicaSteps(final Workflow workflow,String waitFor,final List<FileDescriptor> fileDescriptors){  log.info("START create element replica steps");  StorageSystem system=null;  Map<URI,FileShare> uriFileShareMap=queryFileShares(fileDescriptors);  for (  FileShare source : uriFileShareMap.values()) {    StringSet mirrorTargets=source.getMirrorfsTargets();    system=dbClient.queryObject(StorageSystem.class,source.getStorageDevice());    if (mirrorTargets != null && !mirrorTargets.isEmpty()) {      for (      String mirrorTarget : mirrorTargets) {        URI targetURI=URI.create(mirrorTarget);        FileShare target=dbClient.queryObject(FileShare.class,targetURI);        if (null == target) {          log.warn("Target FileShare {} not available for Mirror source FileShare {}",source.getId(),targetURI);          return waitFor;        } else {          log.info("deleteElementReplicaSteps- detaching replication session for target file system {}",target.getId());          Workflow.Method detachMethod=detachMirrorPairMethod(system.getId(),source.getId(),targetURI);          String detachStep=workflow.createStep(DELETE_FILE_MIRRORS_STEP,DETACH_FILE_MIRRORS_STEP_DESC,waitFor,system.getId(),system.getSystemType(),getClass(),detachMethod,null,null);          waitFor=detachStep;        }      }    }  }  return waitFor;}  }
class C{  public boolean isIsHeadExtent(){  return isHeadExtent;}  }
class C{  public static byte[] createByteArray(int size,String data){  byte[] byteArray=new byte[size];  for (int i=0; i < size; i++) {    byteArray[i]=Byte.parseByte(data,2);  }  return byteArray;}  }
class C{  public static double convertLatOrLongToDouble(Rational[] coordinate,String reference){  try {    double degrees=coordinate[0].toDouble();    double minutes=coordinate[1].toDouble();    double seconds=coordinate[2].toDouble();    double result=degrees + minutes / 60.0 + seconds / 3600.0;    if ((reference.equals("S") || reference.equals("W"))) {      return -result;    }    return result;  } catch (  ArrayIndexOutOfBoundsException e) {    throw new IllegalArgumentException();  }}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public boolean evaluate(long fileSize,int nTuples,T tuple){  return (this.fileSize > 0 && fileSize > this.fileSize) || (cntTuples > 0 && nTuples > 0 && nTuples % cntTuples == 0) || (tuplePredicate != null && tuplePredicate.test(tuple));}  }
class C{  private static Text newComposite(Text head,Text tail){  Text text=new Text(false);  text._count=head._count + tail._count;  text._head=head;  text._tail=tail;  return text;}  }
class C{  protected static IJavaElement handleToElement(final WorkingCopyOwner owner,final String project,final String handle,final boolean check){  return JavaRefactoringDescriptorUtil.handleToElement(owner,project,handle,check);}  }
class C{  public boolean ignoreRE(String jsaRE){  if ("<any string>".equals(jsaRE) || "<empty>".equals(jsaRE))   return true;  if (jsaRE.length() > 1000)   return true;  return false;}  }
class C{  public boolean isMultiplexed(){  return framedConnection != null;}  }
class C{  @Override public ExampleSet apply(ExampleSet eSet) throws OperatorException {  double d=this.getParameterAsDouble(PARAMETER_DISTANCE);  double p=this.getParameterAsDouble(PARAMETER_PROPORTION);  int kindOfDistance=this.getParameterAsInt(PARAMETER_DISTANCE_FUNCTION);  Iterator<Example> reader=eSet.iterator();  int searchSpaceDimension=eSet.getAttributes().size();  SearchSpace sr=new SearchSpace(searchSpaceDimension);  int counter=0;  while (reader.hasNext()) {    Example example=reader.next();    SearchObject so=new SearchObject(searchSpaceDimension,"object" + counter);    counter++;    int i=0;    for (    Attribute attribute : eSet.getAttributes()) {      so.setVektor(i++,example.getValue(attribute));    }    sr.addObject(so);  }  log("Searching d=" + sr.getDimensions() + " dimensions with D="+ d+ " distance and p="+ p+ " .");  sr.resetOutlierStatus();  sr.allRadiusSearch(d,p,kindOfDistance);  Attribute outlierAttribute=AttributeFactory.createAttribute(Attributes.OUTLIER_NAME,Ontology.BINOMINAL);  outlierAttribute.getMapping().mapString("false");  outlierAttribute.getMapping().mapString("true");  eSet.getExampleTable().addAttribute(outlierAttribute);  eSet.getAttributes().setOutlier(outlierAttribute);  counter=0;  Iterator<Example> reader2=eSet.iterator();  while (reader2.hasNext()) {    Example example=reader2.next();    if (sr.getSearchObjectOutlierStatus(counter) == true) {      example.setValue(outlierAttribute,outlierAttribute.getMapping().mapString("true"));    } else {      example.setValue(outlierAttribute,outlierAttribute.getMapping().mapString("false"));    }    counter++;  }  return eSet;}  }
class C{  public ResultEntry(NondominatedPopulation population){  this(population,new Properties());}  }
class C{  public static void test(String testDatapath,boolean verbose,Vector<String> labelsToIgnoreInEvaluation,Vector<String> labelsToAnonymizeInEvaluation) throws Exception {  Data testData=new Data(testDatapath,testDatapath,"-c",new String[]{},new String[]{});  ExpressiveFeaturesAnnotator.annotate(testData);  Vector<Data> data=new Vector<>();  data.addElement(testData);  if (labelsToIgnoreInEvaluation != null)   data.elementAt(0).setLabelsToIgnore(labelsToIgnoreInEvaluation);  if (labelsToAnonymizeInEvaluation != null)   data.elementAt(0).setLabelsToAnonymize(labelsToAnonymizeInEvaluation);  NETaggerLevel1 taggerLevel1=new NETaggerLevel1(ParametersForLbjCode.currentParameters.pathToModelFile + ".level1",ParametersForLbjCode.currentParameters.pathToModelFile + ".level1.lex");  NETaggerLevel2 taggerLevel2=null;  if (ParametersForLbjCode.currentParameters.featuresToUse.containsKey("PredictionsLevel1")) {    taggerLevel2=new NETaggerLevel2(ParametersForLbjCode.currentParameters.pathToModelFile + ".level2",ParametersForLbjCode.currentParameters.pathToModelFile + ".level2.lex");  }  printTestResultsByDataset(data,taggerLevel1,taggerLevel2,verbose);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(createAttributeNS05.class,args);}  }
class C{  public Switch(Context context,AttributeSet attrs){  this(context,attrs,R.attr.switchStyle);}  }
class C{  public static String format(final Calendar calendar,final String pattern){  return format(calendar,pattern,null,null);}  }
class C{  public static String extractFolderToTemp(String srcDir,String destName) throws IOException {  File dest=File.createTempFile(destName,"");  dest.deleteOnExit();  dest.delete();  dest.mkdirs();  URL dirURL=TempFileExtractor.class.getClassLoader().getResource(srcDir);  String jarPath=dirURL.getPath().substring(5,dirURL.getPath().indexOf("!"));  JarFile jar=new JarFile(URLDecoder.decode(jarPath,"UTF-8"));  try {    Enumeration<JarEntry> entries=jar.entries();    while (entries.hasMoreElements()) {      JarEntry entry=entries.nextElement();      String name=entry.getName();      if (name.startsWith(srcDir)) {        File copied=new File(dest + File.separator + name);        if (entry.isDirectory()) {          copied.mkdir();        } else {          InputStream is=jar.getInputStream(entry);          OutputStream os=new FileOutputStream(copied);          try {            copy(is,os);          }  finally {            is.close();            os.close();          }        }        copied.deleteOnExit();      }    }  }  finally {    jar.close();  }  return dest + File.separator + destName;}  }
class C{  public boolean isAcceptAMEX(){  Object oo=get_Value(COLUMNNAME_AcceptAMEX);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isReflectedEdge(StmtEdge<SootMethod> e){  return reflectedEdges.contains(e);}  }
class C{  public static void w(String tag,String msg){  if (sLevel > LEVEL_WARNING) {    return;  }  Log.w(tag,msg);}  }
class C{  public Task<BlockSnapshotRestRep> start(URI id){  return postTask(getIdUrl() + "/start",id);}  }
class C{  public ValidateQueryRequest types(String... types){  this.types=types;  return this;}  }
class C{  public static void assertMatches(BufferedImage img,float[] pattern){  if (pattern.length != 9) {    throw new IllegalArgumentException("Pattern must be of length 9.");  }  int width=img.getWidth();  int height=img.getHeight();  List<Point> points=Arrays.asList(new Point(0,0),new Point(width / 2 - 1,0),new Point(width - 1,0),new Point(0,height / 2 - 1),new Point(width / 2 - 1,height / 2 - 1),new Point(width - 1,height / 2 - 1),new Point(0,height - 1),new Point(width / 2 - 1,height - 1),new Point(width - 1,height - 1));  for (int i=0; i < 9; i++) {    Point p=points.get(i);    Color c=pattern[i] == 0 ? Color.white : Color.black;    assertEquals(c.getRGB(),img.getRGB(p.x,p.y));  }}  }
class C{  private Context(int bufferLength){  decoder=charset.newDecoder();  buf=IoBuffer.allocate(bufferLength).setAutoExpand(true);}  }
class C{  public void close() throws SQLException {  crsInternal.close();}  }
class C{  public void testAtLeastOnePatientDisplayed(){  click(dataThat(is(Patient.class)).inAdapterView(withId(R.id.fragment_patient_list)).atPosition(0));}  }
class C{  private void registerPingReceiver(){  IntentFilter intentFilter=new IntentFilter(PingReceiver.ACTION_VIEW_PING);  registerReceiver(mPingReceiver,intentFilter);}  }
class C{  public Enumeration<? extends Principal> members(){  return groupMembers.elements();}  }
class C{  public static URL toUrl(String url){  URL u=null;  if (url == null || url.isEmpty())   url="";  try {    u=new URL(url);  } catch (  MalformedURLException e) {    e.printStackTrace();  }  return u;}  }
class C{  private void validate() throws MojoFailureException {  if (port <= 0) {    throw new MojoFailureException("'port' configuration must be set.");  }  if (scriptFile.exists() == false) {    throw new MojoFailureException("'scriptFile' not exists");  }  for (  AddUser addUser : addUsers) {    if (addUser.getScriptText() == null && addUser.getScriptFile() == null) {      throw new MojoFailureException("AddUser must contain the text of the script or a scriptFile");    }    if (addUser.getPort() <= 0) {      throw new MojoFailureException("'port' attribute must be set on AddUser to the port against which the script should run.");    }    if (addUser.getHost() == null) {      throw new MojoFailureException("'host' attribute must be set on AddUser to the host against which the script should run.");    }  }}  }
class C{  public void disable(RichFormatterFeature feature){  features.remove(feature);}  }
class C{  public boolean canRead(){  return _source.canRead();}  }
class C{  public boolean isIsDefault(){  if (isDefault == null) {    return false;  } else {    return isDefault;  }}  }
class C{  public static IStatus validateTypeVariableName(String name){  return validateIdentifier(name,CompilerOptions.VERSION_1_3,CompilerOptions.VERSION_1_3);}  }
class C{  public void destroy(){  agent.adviceManager.remove(adviceLookupId);  if (agent.dynamic != null) {    agent.dynamic.removeAll(modifications);  }  for (  HardcodedTracepoint t : hardcoded.keySet()) {    for (    Integer wovenAdviceId : hardcoded.get(t)) {      try {        t.unweave(wovenAdviceId);      } catch (      PTAgentException e) {        log.warn("Unable to unweave advice",e);      }    }  }  advice.destroy();  log.info("Weave removed Q {}, A {}",PivotTracingUtils.queryId(spec.getId()),PivotTracingUtils.adviceId(spec.getId()));}  }
class C{  public Set entrySet(){  if (entrySet == null) {    entrySet=new ReferenceEntrySet(this);  }  return entrySet;}  }
class C{  @Dev public SetQuestAction(final String questname,final int index,final String state){  this.questname=checkNotNull(questname);  this.index=index;  this.state=state;}  }
class C{  public void flush() throws java.io.IOException {  if (m_writer != null)   m_writer.flush();  flushBuffer();}  }
class C{  public void appendBytes(byte[] b,int off,int len){  if (pos + len + 3 > buf.length) {    System.err.println("ajpmessage.overflow " + len + " "+ pos);    return;  }  appendInt(len);  System.arraycopy(b,off,buf,pos,len);  pos+=len;  appendByte(0);}  }
class C{  public int compareTo(Object o){  DD other=(DD)o;  if (hi < other.hi)   return -1;  if (hi > other.hi)   return 1;  if (lo < other.lo)   return -1;  if (lo > other.lo)   return 1;  return 0;}  }
class C{  private void readTableIndex(TableEntry10 table) throws IOException {  for (  Segment10 segment : tableSegments(table)) {    try (ReadStream is=openRead(segment.address(),segment.length())){      readSegmentIndex(is,segment);    }   }}  }
class C{  private int drain(byte[] b,int off,int len){  int remaining=Math.min(len,byteBuffer.remaining());  byteBuffer.get(b,off,remaining);  return remaining;}  }
class C{  public void fling(int startX,int startY,int velocityX,int velocityY,int minX,int maxX,int minY,int maxY){  if (mFlywheel && !mFinished) {    float oldVel=getCurrVelocity();    float dx=(float)(mFinalX - mStartX);    float dy=(float)(mFinalY - mStartY);    float hyp=FloatMath.sqrt(dx * dx + dy * dy);    float ndx=dx / hyp;    float ndy=dy / hyp;    float oldVelocityX=ndx * oldVel;    float oldVelocityY=ndy * oldVel;    if (Math.signum(velocityX) == Math.signum(oldVelocityX) && Math.signum(velocityY) == Math.signum(oldVelocityY)) {      velocityX+=oldVelocityX;      velocityY+=oldVelocityY;    }  }  mMode=FLING_MODE;  mFinished=false;  float velocity=FloatMath.sqrt(velocityX * velocityX + velocityY * velocityY);  mVelocity=velocity;  final double l=Math.log(START_TENSION * velocity / ALPHA);  mDuration=(int)(1000.0 * Math.exp(l / (DECELERATION_RATE - 1.0)));  mStartTime=AnimationUtils.currentAnimationTimeMillis();  mStartX=startX;  mStartY=startY;  float coeffX=velocity == 0 ? 1.0f : velocityX / velocity;  float coeffY=velocity == 0 ? 1.0f : velocityY / velocity;  int totalDistance=(int)(ALPHA * Math.exp(DECELERATION_RATE / (DECELERATION_RATE - 1.0) * l));  mMinX=minX;  mMaxX=maxX;  mMinY=minY;  mMaxY=maxY;  mFinalX=startX + Math.round(totalDistance * coeffX);  mFinalX=Math.min(mFinalX,mMaxX);  mFinalX=Math.max(mFinalX,mMinX);  mFinalY=startY + Math.round(totalDistance * coeffY);  mFinalY=Math.min(mFinalY,mMaxY);  mFinalY=Math.max(mFinalY,mMinY);}  }
class C{  public void printTo(Appendable appendable,long instant) throws IOException {  appendable.append(print(instant));}  }
class C{  public MagnifyShapeTransformer(Component component,MutableTransformer delegate){  super(component,delegate);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void initSettings(){  Settings s=new Settings(OPTIMIZATION_SETTINGS_NS);  boolean randomizeUpdates=DEF_RANDOMIZE_UPDATES;  if (s.contains(RANDOMIZE_UPDATES_S)) {    randomizeUpdates=s.getBoolean(RANDOMIZE_UPDATES_S);  }  simulateConOnce=s.getBoolean(SIMULATE_CON_ONCE_S,false);  if (randomizeUpdates) {    this.updateOrder=new ArrayList<DTNHost>(this.hosts);  } else {    this.updateOrder=null;  }}  }
class C{  public static String toString(Object object,ToStringStyle style){  return toString(object,style,false,false,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:47.743 -0500",hash_original_method="FA5FE1EBC875FBC58DA87E4CCEA9F5F1",hash_generated_method="2D9AE5E85CA49B771D90002278AACFC7") public final static String formatNameValuePair(final NameValuePair nvp,final boolean quote,HeaderValueFormatter formatter){  if (formatter == null)   formatter=BasicHeaderValueFormatter.DEFAULT;  return formatter.formatNameValuePair(null,nvp,quote).toString();}  }
class C{  protected Position computeSymbolPosition(){  Iterable<? extends Position> positions=this.getPositions();  if (positions == null)   return null;  Iterator<? extends Position> iterator=positions.iterator();  Position pos1=iterator.next();  Position pos2=iterator.next();  return new Position(LatLon.interpolateGreatCircle(0.1,pos2,pos1),0);}  }
class C{  public boolean removeSubject(String language){  language=determineLanguage(language);  for (  Subject subject : subjects) {    if (language.equals(subject.language)) {      return subjects.remove(subject);    }  }  return false;}  }
class C{  protected void clearPlotColumns(){  for (int i=0; i < columns.length; i++) {    columns[i]=false;  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:03.505 -0500",hash_original_method="FECD0925F77067421139B3F6378E5A1A",hash_generated_method="D91D0794826C7B69CEA64EF6210C0BA0") public static synchronized CookieSyncManager createInstance(Context context){  if (context == null) {    throw new IllegalArgumentException("Invalid context argument");  }  JniUtil.setContext(context);  Context appContext=context.getApplicationContext();  if (sRef == null) {    sRef=new CookieSyncManager(appContext);  }  return sRef;}  }
class C{  public static List<Challenge> parseChallenges(Headers responseHeaders,String challengeHeader){  List<Challenge> result=new ArrayList<>();  for (int i=0, size=responseHeaders.size(); i < size; i++) {    if (!challengeHeader.equalsIgnoreCase(responseHeaders.name(i))) {      continue;    }    String value=responseHeaders.value(i);    int pos=0;    while (pos < value.length()) {      int tokenStart=pos;      pos=HeaderParser.skipUntil(value,pos," ");      String scheme=value.substring(tokenStart,pos).trim();      pos=HeaderParser.skipWhitespace(value,pos);      if (!value.regionMatches(true,pos,"realm=\"",0,"realm=\"".length())) {        break;      }      pos+="realm=\"".length();      int realmStart=pos;      pos=HeaderParser.skipUntil(value,pos,"\"");      String realm=value.substring(realmStart,pos);      pos++;      pos=HeaderParser.skipUntil(value,pos,",");      pos++;      pos=HeaderParser.skipWhitespace(value,pos);      result.add(new Challenge(scheme,realm));    }  }  return result;}  }
class C{  @Override public void onClick(View v){  if (mItemClickListener != null) {    mItemClickListener.onMenuItemClick(v,mWrapperButtons.indexOfChild(v));  }  close();}  }
class C{  public VLADBuilder(IndexReader reader,int numDocsForVocabulary){  this.reader=reader;  this.numDocsForVocabulary=numDocsForVocabulary;}  }
class C{  public CreateSnapshotRequest source(byte[] source,int offset,int length){  if (length > 0) {    try (XContentParser parser=XContentFactory.xContent(source,offset,length).createParser(source,offset,length)){      return source(parser.mapOrdered());    } catch (    IOException e) {      throw new IllegalArgumentException("failed to parse repository source",e);    }  }  return this;}  }
class C{  @Override public boolean isResetted(){  return (!atvMin && !atvMax && !athMin&& !athMax&& !reverseRotation&& !rotationSensitivity&& !vLookAt&& !hLookAt&& !zoomLevels&& !fovMin&& !fovMax&& !fovSensitivity&& !fov);}  }
class C{  public final String[] keys(){  String[] keysArr=new String[m_firstFree];  for (int i=0; i < m_firstFree; i++) {    keysArr[i]=m_map[i];  }  return keysArr;}  }
class C{  public void writeFile(PathImpl path) throws IOException {  StreamImpl is=path.openReadImpl();  try {    if (is != null) {      writeStream(is);    }  }  finally {    if (is != null)     is.close();  }}  }
class C{  VehiclesFactoryImpl(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:12.684 -0500",hash_original_method="1757F8CB7D197100A6D4F4829ACDA873",hash_generated_method="1C44EC8B18898D825646F1BBF512C4AC") public POP3MessageInfo(int num,int octets){  number=num;  size=octets;  identifier=null;}  }
class C{  public SimpleLog(String name){  logName=name;  setLevel(SimpleLog.LOG_LEVEL_INFO);  String lvl=getStringProperty(systemPrefix + "log." + logName);  int i=String.valueOf(name).lastIndexOf(".");  while (null == lvl && i > -1) {    name=name.substring(0,i);    lvl=getStringProperty(systemPrefix + "log." + name);    i=String.valueOf(name).lastIndexOf(".");  }  if (null == lvl) {    lvl=getStringProperty(systemPrefix + "defaultlog");  }  if ("all".equalsIgnoreCase(lvl)) {    setLevel(SimpleLog.LOG_LEVEL_ALL);  } else   if ("trace".equalsIgnoreCase(lvl)) {    setLevel(SimpleLog.LOG_LEVEL_TRACE);  } else   if ("debug".equalsIgnoreCase(lvl)) {    setLevel(SimpleLog.LOG_LEVEL_DEBUG);  } else   if ("info".equalsIgnoreCase(lvl)) {    setLevel(SimpleLog.LOG_LEVEL_INFO);  } else   if ("warn".equalsIgnoreCase(lvl)) {    setLevel(SimpleLog.LOG_LEVEL_WARN);  } else   if ("error".equalsIgnoreCase(lvl)) {    setLevel(SimpleLog.LOG_LEVEL_ERROR);  } else   if ("fatal".equalsIgnoreCase(lvl)) {    setLevel(SimpleLog.LOG_LEVEL_FATAL);  } else   if ("off".equalsIgnoreCase(lvl)) {    setLevel(SimpleLog.LOG_LEVEL_OFF);  }}  }
class C{  public void enumConstValue(String typeName,String constName) throws IOException {  enumConstValue(pool.addUtf8Info(typeName),pool.addUtf8Info(constName));}  }
class C{  public void prepare(boolean readOnly) throws ReplicatorException, InterruptedException {  diskLog=new DiskLog();  diskLog.setLogDir(logDir);  diskLog.setReadOnly(readOnly);  diskLog.setDoChecksum(doChecksum);  diskLog.prepare();}  }
class C{  public static String commafy(final Iterable<? extends Object> elements){  return new Commafier(elements).toString();}  }
class C{  private static JFreeChart createChart(PieDataset dataset){  JFreeChart chart=ChartFactory.createPieChart("Smart Phones Manufactured / Q3 2011",dataset,false,true,false);  chart.setBackgroundPaint(new GradientPaint(new Point(0,0),new Color(20,20,20),new Point(400,200),Color.DARK_GRAY));  TextTitle t=chart.getTitle();  t.setHorizontalAlignment(HorizontalAlignment.LEFT);  t.setPaint(new Color(240,240,240));  t.setFont(new Font("Arial",Font.BOLD,26));  PiePlot plot=(PiePlot)chart.getPlot();  plot.setBackgroundPaint(null);  plot.setInteriorGap(0.04);  plot.setOutlineVisible(false);  plot.setSectionPaint("Others",createGradientPaint(new Color(200,200,255),Color.BLUE));  plot.setSectionPaint("Samsung",createGradientPaint(new Color(255,200,200),Color.RED));  plot.setSectionPaint("Apple",createGradientPaint(new Color(200,255,200),Color.GREEN));  plot.setSectionPaint("Nokia",createGradientPaint(new Color(200,255,200),Color.YELLOW));  plot.setBaseSectionOutlinePaint(Color.WHITE);  plot.setSectionOutlinesVisible(true);  plot.setBaseSectionOutlineStroke(new BasicStroke(2.0f));  plot.setLabelFont(new Font("Courier New",Font.BOLD,20));  plot.setLabelLinkPaint(Color.WHITE);  plot.setLabelLinkStroke(new BasicStroke(2.0f));  plot.setLabelOutlineStroke(null);  plot.setLabelPaint(Color.WHITE);  plot.setLabelBackgroundPaint(null);  TextTitle source=new TextTitle("Source: http://www.bbc.co.uk/news/business-15489523",new Font("Courier New",Font.PLAIN,12));  source.setPaint(Color.WHITE);  source.setPosition(RectangleEdge.BOTTOM);  source.setHorizontalAlignment(HorizontalAlignment.RIGHT);  chart.addSubtitle(source);  return chart;}  }
class C{  private void zoom(Point2D point,int times){  if (!isZoomable()) {    return;  }  Navigable navigable=InteractivePanel.getNavigableAt(getDrawable(),point);  if (navigable == null) {    return;  }  Navigator navigator=navigable.getNavigator();  if (times >= 0) {    for (int i=0; i < times; i++) {      navigator.zoomIn();    }  } else {    for (int i=0; i < -times; i++) {      navigator.zoomOut();    }  }  repaint();}  }
class C{  @org.junit.Test public void testFreebase(){  Bot bot=Bot.createInstance();  try {    Language language=bot.mind().getThought(Language.class);    language.setLearningMode(LearningMode.Disabled);    TextEntry text=bot.awareness().getSense(TextEntry.class);    List<String> output=registerForOutput(text);    text.input("Who is Barack Obama?");    String response=waitForOutput(output);    if (response.indexOf("Barack Hussein Obama") == -1) {      fail("Incorrect response: " + response);    }    Utils.sleep(5000);    text.input("Who are his children?");    response=waitForOutput(output);    if (response.indexOf("Natasha Obama, and Malia Ann Obama") == -1) {      fail("Incorrect response: " + response);    }    text.input("Who are Barack Obama's children?");    response=waitForOutput(output);    if (response.indexOf("Natasha Obama, and Malia Ann Obama") == -1) {      fail("Incorrect response: " + response);    }    text.input("Who are his parents?");    response=waitForOutput(output);    if (response.indexOf("Barack Obama, Sr., and Ann Dunham") == -1) {      fail("Incorrect response: " + response);    }    text.input("is he a politician");    response=waitForOutput(output);    assertTrue(response);    text.input("tell me who is Barack Obama?");    response=waitForOutput(output);    if (response.indexOf("Barack Hussein Obama") == -1) {      fail("Incorrect response: " + response);    }    text.input("do you know who Barack Obama is");    response=waitForOutput(output);    if (response.indexOf("Barack Hussein Obama") == -1) {      fail("Incorrect response: " + response);    }  }  finally {    bot.shutdown();  }}  }
class C{  public boolean isEmpty(){  return size() == 0;}  }
class C{  private static boolean isAppropriateDevice(MidiDevice device,Class deviceClass,boolean allowSynthesizer,boolean allowSequencer){  if (deviceClass.isInstance(device)) {    return true;  } else {    if ((!(device instanceof Sequencer) && !(device instanceof Synthesizer)) || ((device instanceof Sequencer) && allowSequencer) || ((device instanceof Synthesizer) && allowSynthesizer)) {      if ((deviceClass == Receiver.class && device.getMaxReceivers() != 0) || (deviceClass == Transmitter.class && device.getMaxTransmitters() != 0)) {        return true;      }    }  }  return false;}  }
class C{  @Override public List<StoragePool> matchStoragePoolsWithAttributeOn(List<StoragePool> pools,Map<String,Object> attributeMap,StringBuffer errorMessage){  final List<StoragePool> matchedPools=new ArrayList<StoragePool>();  final Iterator<StoragePool> poolIterator=pools.iterator();  Map<URI,StorageSystem> storageSystems=getStorageSystems(pools);  _logger.info("Pools Matching MultiVolumeConsisistency attribute Started:{}",Joiner.on("\t").join(getNativeGuidFromPools(pools)));  while (poolIterator.hasNext()) {    final StoragePool pool=poolIterator.next();    final StorageSystem system=storageSystems.get(pool.getStorageDevice());    if (checkAsynchronousActions(system) || checkStorageSystemType(system)) {      matchedPools.add(pool);    } else {      _logger.info("Ignoring pool {} as it does not support Consistency Groups",pool.getNativeGuid());      continue;    }  }  _logger.info("Pool Matching MultiVolumeConsistency Matcher Ended:{}",Joiner.on("\t").join(getNativeGuidFromPools(matchedPools)));  if (CollectionUtils.isEmpty(matchedPools)) {    errorMessage.append("No matching stoarge pool found with consistency group support. ");    _logger.error(errorMessage.toString());  }  return matchedPools;}  }
class C{  public void cleanupWifi(){  setWifiEnabled(true);  Espresso.registerIdlingResources(new WifiStateIdlingResource());}  }
class C{  @Override public void fill(GL2 gl){  gl.glPushMatrix();  float[] translate=GLScene.P(translateX,translateY);  gl.glTranslatef(translate[0],translate[1],translate[2]);  gl.glScalef(scaleX,scaleY,scaleZ);  gl.glRotated(rotation * 180 / Math.PI,0,0,1);  gl.glBegin(GL2.GL_TRIANGLE_FAN);  GLPanel.V(gl,controlPoints[2].x,controlPoints[2].y);  if (controlPoints.length == 4) {    GLPanel.V(gl,controlPoints[3].x,controlPoints[3].y);  }  GLPanel.V(gl,controlPoints[0].x,controlPoints[0].y);  GLPanel.V(gl,controlPoints[1].x,controlPoints[1].y);  gl.glEnd();  gl.glPopMatrix();}  }
class C{  public boolean deleteValue(Connection connection,Object keys[]){  return runDelete(connection,deleteSQL,keys);}  }
class C{  public DateTimeZoneBuilder addRecurringSavings(String nameKey,int saveMillis,int fromYear,int toYear,char mode,int monthOfYear,int dayOfMonth,int dayOfWeek,boolean advanceDayOfWeek,int millisOfDay){  if (fromYear <= toYear) {    OfYear ofYear=new OfYear(mode,monthOfYear,dayOfMonth,dayOfWeek,advanceDayOfWeek,millisOfDay);    Recurrence recurrence=new Recurrence(ofYear,nameKey,saveMillis);    Rule rule=new Rule(recurrence,fromYear,toYear);    getLastRuleSet().addRule(rule);  }  return this;}  }
class C{  public void testRuntimeConfigurationServerName(){  RuntimeConfiguration runtimeConfiguration=new Jonas4xRuntimeConfiguration();  runtimeConfiguration.setProperty(JonasPropertySet.JONAS_SERVER_NAME,"foo");  AbstractRemoteContainer remoteContainer=new Jonas4xRemoteContainer(runtimeConfiguration);  AbstractJonasRemoteDeployer remoteDeployer=new TestDeployer(remoteContainer);  RemoteDeployerConfig deployerConfig=remoteDeployer.getConfig();  assertEquals("foo",deployerConfig.getServerName());  assertEquals("jonas",deployerConfig.getDomainName());  assertNull(deployerConfig.getClusterName());}  }
class C{  public String toString(){  final StringBuffer s=new StringBuffer();  final int size=size();  for (int i=0; i < size; i++)   s.append(getInt(i));  return s.toString();}  }
class C{  @Override public SocketBar socket(){  return _socket;}  }
class C{  private void prepareFold(Orientation orientation,float anchorFactor,int numberOfFolds){  mSrc=new float[NUM_OF_POLY_POINTS];  mDst=new float[NUM_OF_POLY_POINTS];  mDstRect=new Rect();  mFoldFactor=0;  mPreviousFoldFactor=0;  mIsFoldPrepared=false;  mSolidShadow=new Paint();  mGradientShadow=new Paint();  mOrientation=orientation;  mIsHorizontal=(orientation == Orientation.HORIZONTAL);  if (mIsHorizontal) {    mShadowLinearGradient=new LinearGradient(0,0,SHADING_FACTOR,0,Color.BLACK,Color.TRANSPARENT,TileMode.CLAMP);  } else {    mShadowLinearGradient=new LinearGradient(0,0,0,SHADING_FACTOR,Color.BLACK,Color.TRANSPARENT,TileMode.CLAMP);  }  mGradientShadow.setStyle(Style.FILL);  mGradientShadow.setShader(mShadowLinearGradient);  mShadowGradientMatrix=new Matrix();  mAnchorFactor=anchorFactor;  mNumberOfFolds=numberOfFolds;  mOriginalWidth=getMeasuredWidth();  mOriginalHeight=getMeasuredHeight();  mFoldRectArray=new Rect[mNumberOfFolds];  mMatrix=new Matrix[mNumberOfFolds];  for (int x=0; x < mNumberOfFolds; x++) {    mMatrix[x]=new Matrix();  }  int h=mOriginalHeight;  int w=mOriginalWidth;  if (Util.IS_JBMR2 && h != 0 && w != 0) {    mFullBitmap=Bitmap.createBitmap(w,h,Bitmap.Config.ARGB_8888);    Canvas canvas=new Canvas(mFullBitmap);    getChildAt(0).draw(canvas);  }  int delta=Math.round(mIsHorizontal ? ((float)w) / ((float)mNumberOfFolds) : ((float)h) / ((float)mNumberOfFolds));  for (int x=0; x < mNumberOfFolds; x++) {    if (mIsHorizontal) {      int deltap=(x + 1) * delta > w ? w - x * delta : delta;      mFoldRectArray[x]=new Rect(x * delta,0,x * delta + deltap,h);    } else {      int deltap=(x + 1) * delta > h ? h - x * delta : delta;      mFoldRectArray[x]=new Rect(0,x * delta,w,x * delta + deltap);    }  }  if (mIsHorizontal) {    mFoldMaxHeight=h;    mFoldMaxWidth=delta;  } else {    mFoldMaxHeight=delta;    mFoldMaxWidth=w;  }  mIsFoldPrepared=true;}  }
class C{  public void newSetup(Class cls){  try {    Experiment exp=(Experiment)cls.newInstance();    notifyTabsExperimentChanged(null,exp);  } catch (  Exception e) {    handleException(null,"Failed to instantiate experiment class: " + cls.getName(),e);  }}  }
class C{  public int postFiles(File[] files,int startIndexInArgs,OutputStream out,String type){  reset();  int filesPosted=0;  for (  File srcFile : files) {    if (srcFile.isDirectory() && srcFile.canRead()) {      filesPosted+=postDirectory(srcFile,out,type);    } else     if (srcFile.isFile() && srcFile.canRead()) {      filesPosted+=postFiles(new File[]{srcFile},out,type);    } else {      File parent=srcFile.getParentFile();      if (parent == null)       parent=new File(".");      String fileGlob=srcFile.getName();      GlobFileFilter ff=new GlobFileFilter(fileGlob,false);      File[] fileList=parent.listFiles(ff);      if (fileList == null || fileList.length == 0) {        warn("No files or directories matching " + srcFile);        continue;      }      filesPosted+=postFiles(fileList,out,type);    }  }  return filesPosted;}  }
class C{  public static void fitViewToBounds(Display display,Rectangle2D bounds,Point2D center,long duration){  double w=display.getWidth(), h=display.getHeight();  double cx=(center == null ? bounds.getCenterX() : center.getX());  double cy=(center == null ? bounds.getCenterY() : center.getY());  double wb=Math.max(cx - bounds.getMinX(),bounds.getMaxX() - cx);  double hb=Math.max(cy - bounds.getMinY(),bounds.getMaxY() - cy);  double scale=Math.min(w / (2 * wb),h / (2 * hb)) / display.getScale();  if (center == null)   center=new Point2D.Double(cx,cy);  if (duration > 0) {    display.animatePanAndZoomToAbs(center,scale,duration);  } else {    display.panToAbs(center);    display.zoomAbs(center,scale);  }}  }
class C{  protected String describeOperation(MBeanOperationInfo operation){  StringBuilder buf=new StringBuilder();  buf.append(operation.getReturnType()).append(" ").append(operation.getName()).append("(");  MBeanParameterInfo[] params=operation.getSignature();  for (int j=0; j < params.length; j++) {    MBeanParameterInfo param=params[j];    if (j != 0) {      buf.append(", ");    }    buf.append(param.getType()).append(" ").append(param.getName());  }  buf.append(")");  return buf.toString();}  }
class C{  public static ListViewLicenseFragment newInstance(ArrayList<Integer> licenseIDs){  return (ListViewLicenseFragment)onNewInstance(new ListViewLicenseFragment(),licenseIDs);}  }
class C{  private Ed25519GroupElement cmov(final Ed25519GroupElement u,final int b){  Ed25519GroupElement ret=null;  for (int i=0; i < b; i++) {    ret=u;  }  for (int i=0; i < 1 - b; i++) {    ret=this;  }  return ret;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrcreatetextnode2.class,args);}  }
class C{  private static void printElement(Element element){  printDocument(new Document(element));}  }
class C{  public TexturedQuad(TextureReference tex,float px,float py,float pz,float ux,float uy,float uz,float vx,float vy,float vz){  mPosition=new VertexBuffer(12);  mTexCoords=new TexCoordBuffer(12);  VertexBuffer vertexBuffer=mPosition;  TexCoordBuffer texCoordBuffer=mTexCoords;  vertexBuffer.addPoint(px - ux - vx,py - uy - vy,pz - uz - vz);  texCoordBuffer.addTexCoords(0,1);  vertexBuffer.addPoint(px - ux + vx,py - uy + vy,pz - uz + vz);  texCoordBuffer.addTexCoords(0,0);  vertexBuffer.addPoint(px + ux - vx,py + uy - vy,pz + uz - vz);  texCoordBuffer.addTexCoords(1,1);  vertexBuffer.addPoint(px + ux + vx,py + uy + vy,pz + uz + vz);  texCoordBuffer.addTexCoords(1,0);  mTexture=tex;}  }
class C{  public Location(int line,int column){  this.line=line;  this.column=column;}  }
class C{  protected boolean equals(TreeNode<E> root1,TreeNode<E> root2){  if (root1 == root2)   return true;  if (root1 == null || root2 == null)   return false;  return root1.element.equals(root2.element) && equals(root1.left,root2.left) && equals(root1.right,root2.right);}  }
class C{  public Builder zookeeperConnect(String zookeeperConnect){  this.zkConnect=zookeeperConnect;  return this;}  }
class C{  private void handleHtmlShowNotebook(RequestAndResponse requestAndResponse) throws IOException, ServletException {  String paneId="notebook";  final String defaultTitle=servletText.pageTitleNotebook();  final String notFoundMessage=servletText.errorNotebookCouldNotBeFound();  final String mayNotSeeMessage=servletText.errorMayNotSeeNotebook();  final String introMessage=servletText.introTextShowNotebook(false);  final String touchIntroMessage=servletText.introTextShowNotebook(true);  final String tooltipNewChild=servletText.tooltipNewNote();  final String buttonNewChild=servletText.buttonNewNote();  String titleIfCanSee=defaultTitle;  final String id=requestAndResponse.getURIParameter();  Entry entry=dbLogic.getEntryById(id);  if (entry != null && !entry.getType("").equals(DbLogic.Constants.notebook)) {    entry=null;  }  final User user=dbLogic.getUserById(getEffectiveUserId(requestAndResponse));  boolean userCanSee=false;  Entry root=null;  if (entry != null) {    titleIfCanSee=entry.getNoteOrTitle("");    paneId=entry.getId();    root=dbLogic.getEntryById(entry.getRootId());    userCanSee=dbLogic.canUserSeeEntry(user,entry,isUserAnAdmin(requestAndResponse));  }  handleHtmlShowEntryTree(requestAndResponse,paneId,defaultTitle,notFoundMessage,mayNotSeeMessage,introMessage,touchIntroMessage,tooltipNewChild,buttonNewChild,titleIfCanSee,root,userCanSee,user,true,"newSubNote","notebook",false);}  }
class C{  public final boolean isRightClick(){  return getButton() == Event.BUTTON_RIGHT || (UserAgent.isMac() && getCtrlKey());}  }
class C{  public static String unwrap(final String input){  final String[] lines=splitLines(input);  final StringBuilder sb=new StringBuilder();  for (int i=0; i < lines.length; i++) {    if (i > 0) {      sb.append(" ");    }    sb.append(lines[i].trim());  }  return sb.toString();}  }
class C{  private void expire(){  if (m_expire != 0 && m_timeExp < System.currentTimeMillis()) {    reset();  }}  }
class C{  public static IMarker createMarker(String markerID,IGdtProblemType problemType,IResource resource,String... messageArgs) throws CoreException {  GdtProblemSeverity severity=GdtProblemSeverities.getInstance().getSeverity(problemType);  if (severity != GdtProblemSeverity.IGNORE) {    String message=MessageFormat.format(problemType.getMessage(),(Object[])messageArgs);    return createMarker(markerID,resource,message,severity.getMarkerSeverity());  }  return null;}  }
class C{  public static long hash64(final String text,int from,int length){  return hash64(text.substring(from,from + length));}  }
class C{  private void validateMaskAndPlaceVolumes(StorageSystem array,URI varrayURI,Map<URI,ExportMask> maskSet,Set<URI> invalidMasks,ExportMask mask,ExportMaskPlacementDescriptor placementDescriptor,Map<URI,Volume> volumeMap,String logMsg){  if (!isOpenStack(array)) {    _log.info(logMsg);    if (VPlexBackEndOrchestratorUtil.validateExportMask(varrayURI,_initiatorPortMap,mask,invalidMasks,_directorToInitiatorIds,_idToInitiatorMap,_dbClient,_coordinator,_portWwnToClusterMap)) {      maskSet.put(mask.getId(),mask);      placementDescriptor.placeVolumes(mask.getId(),volumeMap);    }    for (    URI invalidMask : invalidMasks) {      placementDescriptor.invalidateExportMask(invalidMask);    }  } else {    maskSet.put(mask.getId(),mask);    placementDescriptor.placeVolumes(mask.getId(),volumeMap);  }}  }
class C{  public void deleteFileSetInfo(String fileSet) throws Exception {  zkClient.get().delete(getFileSetPath(fileSet),-1);}  }
class C{  @Dev public SayTimeRemainingAction(final String questname,@Dev(defaultValue="1") final int index,final int delay,final String message){  this.questname=checkNotNull(questname);  this.message=checkNotNull(message);  this.delay=delay;  this.index=index;}  }
class C{  public void visitSource(String source,String debug){  if (cv != null) {    cv.visitSource(source,debug);  }}  }
class C{  public boolean evaluateMandatoryFilter(){  Object value_from=null;  boolean onRange=false;  boolean result=true;  for (  Entry<Object,Object> entry : searchGrid.getParameters().entrySet()) {    WEditor editor=(WEditor)entry.getValue();    GridFieldVO field=editor.getGridField().getVO();    if (!onRange) {      if ((editor.getValue() == null || (editor.getValue() != null && editor.getValue().toString().isEmpty())) && !field.isRange && editor.isMandatory()) {        FDialog.error(getWindowNo(),getForm(),"FillMandatory",Msg.translate(Env.getCtx(),field.ColumnName));        return false;      } else       if (editor.getValue() != null && !editor.getValue().toString().isEmpty() && field.isRange && editor.isMandatory()) {        onRange=true;        value_from=editor.getValue();      } else       if (editor.getValue() == null && field.isRange && editor.isMandatory()) {        onRange=true;        value_from=null;      } else       continue;    } else     if ((editor.getValue() == null || (editor.getValue() != null && editor.getValue().toString().isEmpty())) && editor.isMandatory()) {      if (value_from != null) {        value_from=null;        onRange=false;      } else {        FDialog.error(getWindowNo(),getForm(),"FillMandatory",Msg.translate(Env.getCtx(),field.ColumnName));        return false;      }    } else {      onRange=false;      value_from=null;    }  }  return result;}  }
class C{  public static final void writeValueXml(Object v,String name,XmlSerializer out) throws XmlPullParserException, java.io.IOException {  String typeStr;  if (v == null) {    out.startTag(null,"null");    if (name != null) {      out.attribute(null,"name",name);    }    out.endTag(null,"null");    return;  } else   if (v instanceof String) {    out.startTag(null,"string");    if (name != null) {      out.attribute(null,"name",name);    }    out.text(v.toString());    out.endTag(null,"string");    return;  } else   if (v instanceof Integer) {    typeStr="int";  } else   if (v instanceof Long) {    typeStr="long";  } else   if (v instanceof Float) {    typeStr="float";  } else   if (v instanceof Double) {    typeStr="double";  } else   if (v instanceof Boolean) {    typeStr="boolean";  } else   if (v instanceof byte[]) {    writeByteArrayXml((byte[])v,name,out);    return;  } else   if (v instanceof int[]) {    writeIntArrayXml((int[])v,name,out);    return;  } else   if (v instanceof Map) {    writeMapXml((Map)v,name,out);    return;  } else   if (v instanceof List) {    writeListXml((List)v,name,out);    return;  } else   if (v instanceof Set) {    writeSetXml((Set)v,name,out);    return;  } else   if (v instanceof CharSequence) {    out.startTag(null,"string");    if (name != null) {      out.attribute(null,"name",name);    }    out.text(v.toString());    out.endTag(null,"string");    return;  } else {    throw new RuntimeException("writeValueXml: unable to write value " + v);  }  out.startTag(null,typeStr);  if (name != null) {    out.attribute(null,"name",name);  }  out.attribute(null,"value",v.toString());  out.endTag(null,typeStr);}  }
class C{  public VcpcAlt(IndependenceTest independenceTest){  if (independenceTest == null) {    throw new NullPointerException();  }  this.independenceTest=independenceTest;}  }
class C{  public void testUberwar() throws Exception {  File target=new File(System.getProperty("target"));  String projectVersion=System.getProperty("project.version");  assertNotNull("System property project.version not set",projectVersion);  File uberwarExpandedDirectory=new File(target,"classes/target/cargo-sample-maven2-uberwar-test-artifact-" + projectVersion);  assertNotNull("Not a directory: " + uberwarExpandedDirectory,uberwarExpandedDirectory.isDirectory());  File webXmlFile=new File(uberwarExpandedDirectory,"WEB-INF/web.xml");  assertNotNull("Not a file: " + webXmlFile,webXmlFile.isFile());  FileInputStream webXmlStream=new FileInputStream(webXmlFile);  try {    WebXml webXml=WebXmlIo.parseWebXml(webXmlStream,getEntityResolver());    List<Element> securityConstraints=webXml.getTags(WebXmlType.SECURITY_CONSTRAINT);    assertEquals(1,securityConstraints.size());    List<Element> authConstraints=securityConstraints.get(0).getChildren(WebXmlType.AUTH_CONSTRAINT);    assertEquals(1,authConstraints.size());    List<Element> roleNames=authConstraints.get(0).getChildren(WebXmlType.ROLE_NAME);    assertEquals(1,roleNames.size());    assertEquals("cargo",roleNames.get(0).getText());    List<Element> resourceRefs=webXml.getTags(WebXmlType.RESOURCE_REF);    assertEquals(1,resourceRefs.size());    List<Element> resRefNames=resourceRefs.get(0).getChildren("res-ref-name");    assertEquals(1,resRefNames.size());    assertEquals("jdbc/CargoDS",resRefNames.get(0).getText());  }  finally {    webXmlStream.close();  }}  }
class C{  public SubsetSelectedVariablesAction(DataEditor editor){  super("Copy Selected Columns");  if (editor == null) {    throw new NullPointerException();  }  this.dataEditor=editor;}  }
class C{  public KeyTable(int doc,PrefixResolver nscontext,QName name,Vector keyDeclarations,XPathContext xctxt) throws javax.xml.transform.TransformerException {  m_docKey=doc;  m_keyDeclarations=keyDeclarations;  KeyIterator ki=new KeyIterator(name,keyDeclarations);  m_keyNodes=new XNodeSet(ki);  m_keyNodes.allowDetachToRelease(false);  m_keyNodes.setRoot(doc,xctxt);}  }
class C{  private void importLDAPConfigLdifs() throws FileOperationFailedException, IOException, LDIFException, LDAPException, DirectoryOrFileNotFoundException {  createLDAPConfigFiles();  File configFileDirectory=new File(getConfigFilesDirectory());  if (!configFileDirectory.exists() || CollectionUtils.isEmpty(Arrays.asList(configFileDirectory.listFiles()))) {    throw new DirectoryOrFileNotFoundException("Directory",getConfigFilesDirectory());  }  for (  File configFile : configFileDirectory.listFiles()) {    _inMemoryDS.importFromLDIF(true,configFile.getPath());  }}  }
class C{  private static Set<String> rewriteFile(String file,String pattern) throws Exception {  System.err.println("Working on " + file);  Set<String> names=new HashSet<String>();  int plen=pattern.length();  int match=0;  int pmatch=0;  int pheadlen=plen - 2;  String phead=pattern.substring(0,plen - 2);  StringBuilder history=new StringBuilder();  int hlen=0;  File origFile=new File(file);  File tmpFile=new File(file + ".tmp");  origFile.renameTo(tmpFile);  tmpFile.deleteOnExit();  FileInputStream fis=new FileInputStream(tmpFile);  FileOutputStream fos=new FileOutputStream(origFile);  while (true) {    int ch=fis.read();    if (ch < 0)     break;    if (!Character.isWhitespace(ch)) {      history.append((char)ch);      hlen++;      if (pheadlen > 0 && hlen >= pheadlen && history.substring(hlen - pheadlen,hlen).equals(phead)) {        pmatch++;      }    }    if (hlen >= plen && history.substring(hlen - plen,hlen).equals(pattern)) {      match++;      history=new StringBuilder();      hlen=0;      fos.write(ch);      StringBuilder sb=new StringBuilder();      StringBuilder tail=new StringBuilder();      boolean in=true;      while (true) {        int n=fis.read();        if (in) {          if (n == '\\') {            int second=fis.read();switch (second) {case 'n':              sb.append('\n');            break;case 'r':          sb.append('\r');        break;case 't':      sb.append('\t');    break;case '"':  sb.append('"');break;default :throw new Exception(String.format("I don't know this escape: %s%c",sb.toString(),second));}} else if (n == '"') {in=false;tail=new StringBuilder();tail.append('"');} else {sb.append((char)n);}} else {tail.append((char)n);if (n == '"') {in=true;} else if (n == ',' || n == ')') {break;} else if (Character.isWhitespace(n) || n == '+') {} else {throw new Exception("Not a correct concat");}}}String s=sb.toString();names.add(s);fos.write(normalize(s).getBytes());fos.write(tail.toString().getBytes());} else {fos.write(ch);}}if (pheadlen > 0 && pmatch != match) {err("    BAD!! pmatch != match: " + pmatch + " != "+ match);} else {System.err.println("    GOOD  match is " + match);}fis.close();fos.close();return names;}  }
class C{  public static boolean writeFile(String filePath,String content,boolean append){  FileWriter fileWriter=null;  try {    fileWriter=new FileWriter(filePath,append);    fileWriter.write(content);    fileWriter.close();    return true;  } catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    if (fileWriter != null) {      try {        fileWriter.close();      } catch (      IOException e) {        throw new RuntimeException("IOException occurred. ",e);      }    }  }}  }
class C{  boolean isTailRecursion(Instruction call,IR ir){  if (!Call.hasMethod(call))   return false;  MethodOperand methOp=Call.getMethod(call);  if (!methOp.hasPreciseTarget())   return false;  if (methOp.getTarget() != ir.method)   return false;  RegisterOperand result=Call.getResult(call);  Instruction s=call.nextInstructionInCodeOrder();  while (true) {    if (s.isMove()) {      if (Move.getVal(s).similar(result)) {        result=Move.getResult(s);        if (DEBUG)         VM.sysWrite("Updating result to " + result + "\n");      } else {        return false;      }    } else     if (s.operator() == LABEL || s.operator() == BBEND || s.operator() == UNINT_BEGIN || s.operator() == UNINT_END) {      if (DEBUG)       VM.sysWrite("Falling through " + s + "\n");    } else     if (s.operator() == GOTO) {      s=s.getBranchTarget().firstInstruction();      if (DEBUG)       VM.sysWrite("Following goto to " + s + "\n");    } else     if (s.isReturn()) {      Operand methodResult=Return.getVal(s);      if (DEBUG)       VM.sysWrite("Found return " + s + "\n");      return methodResult == null || methodResult.similar(result);    } else {      return false;    }    s=s.nextInstructionInCodeOrder();  }}  }
class C{  @Override @SuppressWarnings("unchecked") public void doFilterInternal(HttpServletRequest request,HttpServletResponse response,FilterChain chain) throws IOException, ServletException {  String locale=request.getParameter("locale");  Locale preferredLocale=null;  if (locale != null) {    int indexOfUnderscore=locale.indexOf('-');    if (indexOfUnderscore != -1) {      String language=locale.substring(0,indexOfUnderscore);      String country=locale.substring(indexOfUnderscore + 1);      preferredLocale=new Locale(language,country);    } else {      preferredLocale=new Locale(locale);    }  }  HttpSession session=request.getSession(false);  if (session != null) {    if (preferredLocale == null) {      preferredLocale=(Locale)session.getAttribute(Constants.PREFERRED_LOCALE_KEY);    } else {      session.setAttribute(Constants.PREFERRED_LOCALE_KEY,preferredLocale);      Config.set(session,Config.FMT_LOCALE,preferredLocale);    }    if (preferredLocale != null && !(request instanceof LocaleRequestWrapper)) {      request=new LocaleRequestWrapper(request,preferredLocale);      LocaleContextHolder.setLocale(preferredLocale);    }  }  String theme=request.getParameter("theme");  if (theme != null && request.isUserInRole(Constants.ADMIN_ROLE)) {    Map<String,Object> config=(Map)getServletContext().getAttribute(Constants.CONFIG);    config.put(Constants.CSS_THEME,theme);  }  chain.doFilter(request,response);  LocaleContextHolder.setLocaleContext(null);}  }
class C{  public void reset(){  startTime_ns=System.nanoTime();  totalPktCnt=0;  totalProcTimeNs=0;  avgTotalProcTimeNs=0;  sumSquaredProcTimeNs2=0;  maxTotalProcTimeNs=Long.MIN_VALUE;  minTotalProcTimeNs=Long.MAX_VALUE;  sigmaTotalProcTimeNs=0;  for (  OneComponentTime oct : compStats.values()) {    oct.resetAllCounters();  }}  }
class C{  public NonLeafProofNode(TreeNode stn,LevelNode[] stps,InstanceNode[] inst,Context ctxt){  super(NonLeafProofKind,stn);  this.steps=stps;  this.insts=inst;  this.context=ctxt;}  }
class C{  private void validateState(State current){  ValidationUtils.validateState(current);}  }
class C{  public void testDateMissingFunction() throws Exception {  checkSortMissingFunction("datedv","1900-12-31T23:59:59.999Z","2005-12-31T23:59:59.999Z");}  }
class C{  public static GeneralPath deserializePath(final ObjectInput os) throws ClassNotFoundException, IOException {  final Integer windingRule=(Integer)os.readObject();  if (windingRule == null) {    return null;  }  final List list=(List)os.readObject();  final GeneralPath path=new GeneralPath();  path.setWindingRule(windingRule);  for (final Iterator iter=list.iterator(); iter.hasNext(); ) {    final int pathType=(Integer)iter.next();    final float[] array=(float[])iter.next();switch (pathType) {case PathIterator.SEG_LINETO:      path.lineTo(array[0],array[1]);    break;case PathIterator.SEG_MOVETO:  path.moveTo(array[0],array[1]);break;case PathIterator.SEG_QUADTO:path.quadTo(array[0],array[1],array[2],array[3]);break;case PathIterator.SEG_CUBICTO:path.curveTo(array[0],array[1],array[2],array[3],array[4],array[5]);break;case PathIterator.SEG_CLOSE:path.closePath();break;default :System.out.println("unrecognized general path type");break;}}return path;}  }
class C{  @Override public String toString(){  String s="[";  for (  Double d : getVector()) {    s+=StringUtils.getShortForm(d) + ",";  }  return s.substring(0,s.length() - 1) + "]";}  }
class C{  @Override public Iterator<Statement> iterator(){  return iterator(null,null,null);}  }
class C{  public boolean isTerminated(){  return isTerminated(getState());}  }
class C{  public ReferenceMap(int keyType,int valueType){  super(keyType,valueType,DEFAULT_CAPACITY,DEFAULT_LOAD_FACTOR,false);}  }
class C{  private static int computeDimension(ResultPoint topLeft,ResultPoint topRight,ResultPoint bottomLeft,ResultPoint bottomRight,float moduleWidth){  int topRowDimension=MathUtils.round(ResultPoint.distance(topLeft,topRight) / moduleWidth);  int bottomRowDimension=MathUtils.round(ResultPoint.distance(bottomLeft,bottomRight) / moduleWidth);  return ((((topRowDimension + bottomRowDimension) >> 1) + 8) / 17) * 17;}  }
class C{  @Transactional public void updateCashDeposit(final Long payInId,final String toBankaccountGlcode,final InstrumentHeader instrumentHeader,final Map valuesMap){  if (LOGGER.isDebugEnabled())   LOGGER.debug("Contra Service | updateCashDeposit | Start");  final List<AppConfigValues> appConfigList=appConfigValuesService.getConfigValuesByModuleAndKey(FinancialConstants.MODULE_NAME_APPCONFIG,"PREAPPROVEDVOUCHERSTATUS");  if (null != appConfigList && !appConfigList.isEmpty())   for (  final AppConfigValues appConfigVal : appConfigList)   preapprovalStatus=Integer.valueOf(appConfigVal.getValue()); else   throw new ApplicationRuntimeException("Appconfig value for PREAPPROVEDVOUCHERSTATUS is not defined in the system");  final CVoucherHeader payIn=(CVoucherHeader)persistenceService.find("from CVoucherHeader where id=?",payInId);  updateInstrumentAndPayin(payIn,(Bankaccount)valuesMap.get("depositedBankAccount"),instrumentHeader,(EgwStatus)persistenceService.find("from EgwStatus where id = ?",Integer.valueOf(valuesMap.get("instrumentReconciledStatus").toString())));  final ContraJournalVoucher cjv=addToContra(payIn,(Bankaccount)valuesMap.get("depositedBankAccount"),instrumentHeader);  addToBankRecon(payIn,instrumentHeader,(EgwStatus)persistenceService.find("from EgwStatus where id = ?",Integer.valueOf(valuesMap.get("instrumentReconciledStatus").toString())));  if (LOGGER.isDebugEnabled())   LOGGER.debug("Contra Service | updateCashDeposit | End");}  }
class C{  public static int binarySearchFromTo(Object[] list,Object key,int from,int to,java.util.Comparator comparator){  Object midVal;  while (from <= to) {    int mid=(from + to) / 2;    midVal=list[mid];    int cmp=comparator.compare(midVal,key);    if (cmp < 0)     from=mid + 1; else     if (cmp > 0)     to=mid - 1; else     return mid;  }  return -(from + 1);}  }
class C{  private void addDockingCell(int[] dockInsets,int side,CompWrap cw){  int r, c, spanx=1, spany=1;switch (side) {case 0:case 2:    r=side == 0 ? dockInsets[0]++ : dockInsets[2]--;  c=dockInsets[1];spanx=dockInsets[3] - dockInsets[1] + 1;colIndexes.add(dockInsets[3]);break;case 1:case 3:c=side == 1 ? dockInsets[1]++ : dockInsets[3]--;r=dockInsets[0];spany=dockInsets[2] - dockInsets[0] + 1;rowIndexes.add(dockInsets[2]);break;default :throw new IllegalArgumentException("Internal error 123.");}rowIndexes.add(r);colIndexes.add(c);grid.put((r << 16) + c,new Cell(cw,spanx,spany,spanx > 1));}  }
class C{  @Override public String toString(){  String result=toString;  if (result == null) {    result=computeToString();    toString=result;  }  return result;}  }
class C{  public SmallCraftBay(double space,int doors,int bayNumber){  totalSpace=space;  currentSpace=space;  this.doors=doors;  doorsNext=doors;  recoverySlots=initializeRecoverySlots();  this.bayNumber=bayNumber;}  }
class C{  @RequestMapping(value="/api/greetings/{id}",method=RequestMethod.DELETE) public ResponseEntity<Greeting> deleteGreeting(@PathVariable("id") final Long id){  logger.info("> deleteGreeting");  greetingService.delete(id);  logger.info("< deleteGreeting");  return new ResponseEntity<Greeting>(HttpStatus.NO_CONTENT);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:45.473 -0500",hash_original_method="ABB64391FEF3212581FCE62A24663F37",hash_generated_method="5D650CF88D5D3982DDC619DAC8596630") public int connectSync(Context srcContext,Handler srcHandler,Messenger dstMessenger){  if (DBG)   log("halfConnectSync srcHandler to the dstMessenger  E");  connected(srcContext,srcHandler,dstMessenger);  if (DBG)   log("halfConnectSync srcHandler to the dstMessenger X");  return STATUS_SUCCESSFUL;}  }
class C{  private Product createProduct(Organization organization,TechnicalProduct technicalProduct) throws Exception {  PriceModel priceModel=new PriceModel();  priceModel.setType(PriceModelType.FREE_OF_CHARGE);  Product product=new Product();  product.setVendor(organization);  product.setProductId("productID");  product.setTechnicalProduct(technicalProduct);  product.setProvisioningDate(TIMESTAMP);  product.setStatus(ServiceStatus.ACTIVE);  product.setType(ServiceType.TEMPLATE);  product.setPriceModel(priceModel);  ParameterSet paramSet=new ParameterSet();  product.setParameterSet(paramSet);  mgr.persist(product);  mgr.flush();  return product;}  }
class C{  private static double rand(double min,double max){  return rand() * (max - min) + min;}  }
class C{  public boolean isAddRequiredProjects(){  return fAddRequiredProjects;}  }
class C{  public static <K extends Comparable<? super K>,V>ImmutableSortedMap<K,V> of(K k1,V v1){  Entry<?,?>[] entries={entryOf(k1,v1)};  return new ImmutableSortedMap<K,V>(entries,Ordering.natural());}  }
class C{  public static int[][] generatePartition(int indices[],int num,Random r,boolean balanced){  if (!balanced)   return generatePartition(indices,num,r);  int L=indices.length;  if (r != null)   A.shuffle(indices,r);  int partition[][]=new int[num][];  int k=L / num;  int e=L % num;  int m=0;  for (int c=0; c < num; c++) {    if (c < e) {      partition[c]=Arrays.copyOfRange(indices,m,m + k + 1);      m=m + k + 1;    } else {      partition[c]=Arrays.copyOfRange(indices,m,Math.min(L,m + k));      m=m + k;    }    Arrays.sort(partition[c]);  }  return partition;}  }
class C{  public PacketOutputStream writeDateLength(final Calendar calendar){  assureBufferCapacity(8);  buffer.put((byte)7);  buffer.putShort((short)calendar.get(Calendar.YEAR));  buffer.put((byte)((calendar.get(Calendar.MONTH) + 1) & 0xff));  buffer.put((byte)(calendar.get(Calendar.DAY_OF_MONTH) & 0xff));  buffer.put((byte)0);  buffer.put((byte)0);  buffer.put((byte)0);  return this;}  }
class C{  private void addDates(Document doc) throws DocumentException {  Paragraph p=new Paragraph();  Phrase phrase=new Phrase("{" + getText("rtf.date") + "}",fontToComplete);  p.setFont(font);  p.add(getText("rtf.received") + " ");  p.add(phrase);  p.add("; " + getText("rtf.revised") + " ");  p.add(phrase);  p.add("; " + getText("rtf.accepted") + " ");  p.add(phrase);  p.add("; " + getText("rtf.published") + " ");  p.add(phrase);  p.add(Chunk.NEWLINE);  doc.add(p);  p.clear();}  }
class C{  public String charset(){  return reader.getEncoding();}  }
class C{  public TAnnotationTypeRefArgument createTAnnotationTypeRefArgument(){  TAnnotationTypeRefArgumentImpl tAnnotationTypeRefArgument=new TAnnotationTypeRefArgumentImpl();  return tAnnotationTypeRefArgument;}  }
class C{  public vec3 negate(){  this.m[0]=-this.m[0];  this.m[1]=-this.m[1];  this.m[2]=-this.m[2];  return this;}  }
class C{  public static void main(String args[]){  if (args.length != 1) {    throw new RuntimeException("Must provide path where there `Vehicles' folder can be found.");  }  String root=args[0];  String sourceFolder=root + "Vehicles/";  String destFolder=root + "SortedVehicles/";  log.info("=============================================================");  log.info("  Sorting DigiCore vehicle files after they've been split.");  log.info("-------------------------------------------------------------");  File outFolder=new File(destFolder);  boolean checkDirectory=outFolder.mkdir();  if (!checkDirectory) {    throw new RuntimeException("Could nor create " + outFolder.toString() + ", or it already exists. Delete and then rerun.");  }  File files=new File(sourceFolder);  File vehicleFiles[]=files.listFiles();  int numFiles=vehicleFiles.length;  ProgressBar pb=new ProgressBar('*',numFiles);  pb.printProgressBar();  if (vehicleFiles.length > 0) {    int filesSorted=0;    long maxLines=0;    File maxFile=null;    for (    File theFile : vehicleFiles) {      if (theFile.isFile() && !(theFile.getName().startsWith("."))) {        ArrayList<GPSRecord> log=readFileToArray(theFile);        ArrayList<GPSRecord> sortedArray=sortTimeMerge(log);        if (sortedArray.size() > maxLines) {          maxLines=sortedArray.size();          maxFile=theFile;        }        try {          writeSortedArray(destFolder,theFile,sortedArray,true);        } catch (        IOException e) {          e.printStackTrace();        }      }      if (filesSorted % 100 == 0) {        pb.updateProgress(filesSorted);      }      filesSorted++;    }    log.info("Done. Largest file is " + maxFile.getName() + " and has "+ maxLines+ " gps records.");    log.info("-------------------------------------------------------------");    log.info("                     PROCESS COMPLETE ");    log.info("=============================================================");  }}  }
class C{  public int selectedNodesCount(){  return selectedNodes == null ? 0 : selectedNodes.size();}  }
class C{  @Override public void onPurchaseResponse(final PurchaseResponse purchaseResponse){  Log.v(TAG,"onPurchaseResponse recieved");  Log.v(TAG,"PurchaseRequestStatus:" + purchaseResponse.getPurchaseRequestStatus());  new PurchaseAsyncTask().execute(purchaseResponse);}  }
class C{  public ServiceCall<Void> deleteModel(String modelId){  if ((modelId == null) || modelId.isEmpty()) {    throw new IllegalArgumentException("modelId cannot be null or empty");  }  Request request=RequestBuilder.delete(String.format(PATH_MODEL,modelId)).build();  return createServiceCall(request,ResponseConverterUtils.getVoid());}  }
class C{  private void saveExtraFiles(List<String> extraFiles,String handleId,StartRequest request){  int i=0;  if (extraFiles == null || extraFiles.size() == 0) {    return;  }  for (  String filename : extraFiles) {    InputStream inputStream=request.getFile("extraFileData_" + i,true);    fileManager.saveFile(handleId,filename,inputStream);    i++;  }}  }
class C{  @Override public boolean shouldOverrideUrlLoading(WebView view,String urlNewString){  try {    view.getContext().startActivity(new Intent(Intent.ACTION_VIEW,Uri.parse(urlNewString)));  } catch (  ActivityNotFoundException e) {    openDialog(android.R.drawable.ic_dialog_alert,R.string.donations__alert_dialog_title,getString(R.string.donations__alert_dialog_no_browser));  }  return false;}  }
class C{  public void testEquals(){  ConfigurationType type=ConfigurationType.EXISTING;  assertEquals(ConfigurationType.EXISTING,type);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdataindexsizeerrsubstringoffsetgreater.class,args);}  }
class C{  public Builder hasSensitiveData(boolean bool){  mSensitiveData=bool;  return this;}  }
class C{  public boolean belongs(@Nullable Object key,int cnt,@Nullable Collection<N> nodes){  if (F.isEmpty(nodes))   return false;  assert nodes != null;  return nodes.containsAll(nodes(key,cnt));}  }
class C{  public static int hash(Object object){  return object == null ? 0 : object.hashCode();}  }
class C{  public EntityLoadInfo create(Entity entity,@Nullable String viewName){  Objects.requireNonNull(entity,"entity is null");  MetaClass metaClass=metadata.getSession().getClassNN(entity.getClass());  MetaProperty primaryKeyProperty=metadata.getTools().getPrimaryKeyProperty(metaClass);  boolean stringKey=primaryKeyProperty != null && primaryKeyProperty.getJavaType().equals(String.class);  return new EntityLoadInfo(entity.getId(),metaClass,viewName,stringKey);}  }
class C{  public IndependenceTest indTestSubset(List<Node> vars){  if (vars.isEmpty()) {    throw new IllegalArgumentException("Subset may not be empty.");  }  List<Node> _vars=new ArrayList<>();  for (  Node var : vars) {    Node _var=getVariable(var.getName());    if (_var == null) {      throw new IllegalArgumentException("All vars must be original vars");    }    _vars.add(_var);  }  this._observedVars=_vars;  this.observedVars=new HashSet<>(_observedVars);  facts=new HashSet<>();  return this;}  }
class C{  public static RamlParamType mapSimpleType(Class<?> clazz){  Class<?> targetClazz=clazz;  if (targetClazz.isArray() && clazz.getComponentType() != null) {    targetClazz=clazz.getComponentType();  }  if (targetClazz.equals(Long.TYPE) || targetClazz.equals(Long.class) || targetClazz.equals(Integer.TYPE)|| targetClazz.equals(Integer.class)|| targetClazz.equals(Short.TYPE)|| targetClazz.equals(Short.class)|| targetClazz.equals(Byte.TYPE)|| targetClazz.equals(Byte.class)) {    return RamlParamType.INTEGER;  } else   if (targetClazz.equals(Float.TYPE) || targetClazz.equals(Float.class) || targetClazz.equals(Double.TYPE)|| targetClazz.equals(Double.class)|| targetClazz.equals(BigDecimal.class)) {    return RamlParamType.NUMBER;  } else   if (targetClazz.equals(Boolean.class) || targetClazz.equals(Boolean.TYPE)) {    return RamlParamType.BOOLEAN;  } else   if (targetClazz.equals(String.class)) {    return RamlParamType.STRING;  }  return null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public boolean isTTFNativeFont(){  return ttf;}  }
class C{  public synchronized void updateNCharacterStream(int columnIndex,java.io.Reader x,int length) throws SQLException {  String fieldEncoding=this.fields[columnIndex - 1].getEncoding();  if (fieldEncoding == null || !fieldEncoding.equals("UTF-8")) {    throw new SQLException("Can not call updateNCharacterStream() when field's character set isn't UTF-8");  }  if (!this.onInsertRow) {    if (!this.doingUpdates) {      this.doingUpdates=true;      syncUpdate();    }    ((com.mysql.jdbc.JDBC4PreparedStatement)this.updater).setNCharacterStream(columnIndex,x,length);  } else {    ((com.mysql.jdbc.JDBC4PreparedStatement)this.inserter).setNCharacterStream(columnIndex,x,length);    if (x == null) {      this.thisRow.setColumnValue(columnIndex - 1,null);    } else {      this.thisRow.setColumnValue(columnIndex - 1,STREAM_DATA_MARKER);    }  }}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public static float intersectRayLineSegment(Vector2fc origin,Vector2fc dir,Vector2fc a,Vector2fc b){  return intersectRayLineSegment(origin.x(),origin.y(),dir.x(),dir.y(),a.x(),a.y(),b.x(),b.y());}  }
class C{  public void registerSnackbarContainer(Pane snackbarContainer){  if (snackbarContainer != null) {    if (this.snackbarContainer != null) {      throw new IllegalArgumentException("Snackbar Container already set");    }    this.snackbarContainer=snackbarContainer;    this.snackbarContainer.getChildren().add(popup);    this.snackbarContainer.heightProperty().addListener(sizeListener);    this.snackbarContainer.widthProperty().addListener(sizeListener);  }}  }
class C{  public MyHashSet(int initialCapacity){  this(initialCapacity,DEFAULT_MAX_LOAD_FACTOR);}  }
class C{  public void fillRow(final int row,final Array array){  QL.require(cols() == array.size(),ARRAY_IS_INCOMPATIBLE);  if (this.addr.isContiguous() && array.addr.isContiguous()) {    System.arraycopy(array.$,0,$,addr.op(row,0),cols());  } else {    final Address.ArrayAddress.ArrayOffset src=array.addr.offset();    final Address.MatrixAddress.MatrixOffset dst=this.addr.offset(row,0);    for (int col=0; col < cols(); col++) {      $[dst.op()]=array.$[src.op()];      src.nextIndex();      dst.nextCol();    }  }}  }
class C{  public static Object serializeClone(final Object obj) throws IOException, ClassNotFoundException {  ByteArrayOutputStream memOut=new ByteArrayOutputStream();  ObjectOutputStream objOut=new ObjectOutputStream(memOut);  objOut.writeObject(obj);  objOut.close();  ByteArrayInputStream src=new ByteArrayInputStream(memOut.toByteArray());  ObjectInputStream objIs=new ObjectInputStream(src);  return objIs.readObject();}  }
class C{  public static boolean isConstant(JCExpression expr){  boolean constant=false;  if (expr instanceof JCLiteral) {    constant=true;  } else   if (expr instanceof JCFieldAccess) {    if (((JCFieldAccess)expr).sym.isStatic() && ((JCFieldAccess)expr).sym.getModifiers().contains(Modifier.FINAL)) {      constant=true;    }  } else   if (expr instanceof JCIdent) {    if (((JCIdent)expr).sym.isStatic() && ((JCIdent)expr).sym.getModifiers().contains(Modifier.FINAL)) {      constant=true;    }  }  return constant;}  }
class C{  public void testPutLenBytes(){  byte[] expectedResult={4,0,0,1,3,1,2,3};  byte[] bytes={1,2,3};  MySQLPacket array=new MySQLPacket(16,(byte)1);  ByteArrayOutputStream output=new ByteArrayOutputStream();  try {    array.putLenBytes(bytes);    array.write(output);    compareBytes(expectedResult,output.toByteArray());  } catch (  IOException e) {    fail("This should not happen!");  }}  }
class C{  public static int[] toIntArray(double[] doubles){  int[] res=new int[doubles.length];  for (int i=0; i < doubles.length; i++) {    res[i]=(int)doubles[i];  }  return res;}  }
class C{  public void back() throws JSONException {  if (this.usePrevious || this.index <= 0) {    throw new JSONException("Stepping back two steps is not supported");  }  this.index-=1;  this.character-=1;  this.usePrevious=true;  this.eof=false;}  }
class C{  private NonSerializables(){}  }
class C{  public synchronized void touch(final Object key,final Object value){  remove(key);  put(key,value);}  }
class C{  public MatchQueryExp(AttributeValueExp a,StringValueExp s){  exp=a;  pattern=s.getValue();}  }
class C{  @LargeTest public void testMediaVideoItemAudioFeatures() throws Exception {  final String videoItemFileName=INPUT_FILE_PATH + "H263_profile0_176x144_15fps_256kbps_AACLC_32kHz_128kbps_s_0_26.3gp";  final int videoItemRenderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  boolean flagForException=false;  final MediaVideoItem mediaVideoItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"mediaVideoItem1",videoItemFileName,videoItemRenderingMode);  mVideoEditor.addMediaItem(mediaVideoItem1);  mediaVideoItem1.setVolume(77);  assertEquals("Updated Volume is 77",77,mediaVideoItem1.getVolume());  mediaVideoItem1.setMute(true);  assertTrue("Audio must be Muted",mediaVideoItem1.isMuted());  mediaVideoItem1.setVolume(78);  assertEquals("Updated Volume is 78",78,mediaVideoItem1.getVolume());  assertTrue("Audio must be Muted",mediaVideoItem1.isMuted());  try {    mediaVideoItem1.setVolume(1000);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Invalid Set Volume",flagForException);  mediaVideoItem1.setMute(false);  assertFalse("Audio must be Un-Muted",mediaVideoItem1.isMuted());  mediaVideoItem1.setVolume(0);  assertFalse("Audio must be Un-Muted",mediaVideoItem1.isMuted());  flagForException=false;  try {    mediaVideoItem1.setVolume(-1);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Invalid Set Volume",flagForException);  mediaVideoItem1.setVolume(100);  assertEquals("MediaItem Volume",100,mediaVideoItem1.getVolume());  try {    mediaVideoItem1.setVolume(101);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Invalid Set Volume",flagForException);  assertEquals("MediaItem Volume",100,mediaVideoItem1.getVolume());}  }
class C{  private Response requestHttpGetFromRegistry(String url) throws RegistryException {  try {    Response resp=http.get(url);    if (resp != null && resp.content != null) {      return resp;    } else {      throw new RegistryException(TYPE.BAD_RESPONSE,"Response content is null");    }  } catch (  ClassCastException e) {    throw new RegistryException(TYPE.BAD_RESPONSE,e);  }catch (  ConnectException e) {    throw new RegistryException(TYPE.PROXY,e);  }catch (  UnknownHostException e) {    try {      http.get("http://www.google.com");    } catch (    Exception e1) {      throw new RegistryException(TYPE.NO_INTERNET,e1);    }    throw new RegistryException(TYPE.SITE_DOWN,e);  }catch (  IOException e) {    throw new RegistryException(TYPE.IO_ERROR,e);  }catch (  URISyntaxException e) {    throw new RegistryException(TYPE.BAD_REQUEST,"Please check the request URL: " + ((url != null) ? url : "empty URL used!"));  }}  }
class C{  public void send(MqttWireMessage message,MqttToken token) throws MqttException {  final String methodName="send";  if (message.isMessageIdRequired() && (message.getMessageId() == 0)) {    message.setMessageId(getNextMessageId());  }  if (token != null) {    try {      token.internalTok.setMessageID(message.getMessageId());    } catch (    Exception e) {    }  }  if (message instanceof MqttPublish) {synchronized (queueLock) {      if (actualInFlight >= this.maxInflight) {        log.fine(CLASS_NAME,methodName,"613",new Object[]{new Integer(actualInFlight)});        throw new MqttException(MqttException.REASON_CODE_MAX_INFLIGHT);      }      MqttMessage innerMessage=((MqttPublish)message).getMessage();      log.fine(CLASS_NAME,methodName,"628",new Object[]{new Integer(message.getMessageId()),new Integer(innerMessage.getQos()),message});switch (innerMessage.getQos()) {case 2:        outboundQoS2.put(new Integer(message.getMessageId()),message);      persistence.put(getSendPersistenceKey(message),(MqttPublish)message);    break;case 1:  outboundQoS1.put(new Integer(message.getMessageId()),message);persistence.put(getSendPersistenceKey(message),(MqttPublish)message);break;}tokenStore.saveToken(token,message);pendingMessages.addElement(message);queueLock.notifyAll();}} else {log.fine(CLASS_NAME,methodName,"615",new Object[]{new Integer(message.getMessageId()),message});if (message instanceof MqttConnect) {synchronized (queueLock) {tokenStore.saveToken(token,message);pendingFlows.insertElementAt(message,0);queueLock.notifyAll();}} else {if (message instanceof MqttPingReq) {this.pingCommand=message;} else if (message instanceof MqttPubRel) {outboundQoS2.put(new Integer(message.getMessageId()),message);persistence.put(getSendConfirmPersistenceKey(message),(MqttPubRel)message);} else if (message instanceof MqttPubComp) {persistence.remove(getReceivedPersistenceKey(message));}synchronized (queueLock) {if (!(message instanceof MqttAck)) {tokenStore.saveToken(token,message);}pendingFlows.addElement(message);queueLock.notifyAll();}}}}  }
class C{  private static byte[] addDesParity(byte[] input,int offset,int len){  if (len != 7)   throw new IllegalArgumentException("Invalid length of DES Key Value:" + len);  byte[] raw=new byte[7];  System.arraycopy(input,offset,raw,0,len);  byte[] result=new byte[8];  BigInteger in=new BigInteger(raw);  for (int i=result.length - 1; i >= 0; i--) {    result[i]=in.and(MASK).toByteArray()[0];    result[i]<<=1;    in=in.shiftRight(7);  }  setParityBit(result);  return result;}  }
class C{  public PubsubFuture<List<ReceivedMessage>> pull(final String project,final String subscription,final boolean returnImmediately){  return pull(project,subscription,returnImmediately,DEFAULT_PULL_MAX_MESSAGES);}  }
class C{  @Override public void release(){  mGraphicOverlay.clear();}  }
class C{  private void checkHostname(HttpUriRequest request,String hostnameToThrowException) throws IOException {  String hostname=request.getURI().getHost();  if (hostname != null) {    if (hostname.contains(hostnameToThrowException)) {      throw new IOException(hostnameToThrowException);    }  }}  }
class C{  @PUT @Path("/{clientId}") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @RequiresRole(role=Role.ADMINISTRATOR) public OIDCClientDTO update(@PathParam("clientId") String clientId,OIDCClientMetadataDTO oidcClientMetadataDTO){  try {    OIDCClientDTO oidcClientDTO=new OIDCClientDTO.Builder().withClientId(clientId).withOIDCClientMetadataDTO(oidcClientMetadataDTO).build();    OIDCClient oidcClient=OIDCClientMapper.getOIDCClient(oidcClientDTO);    getIDMClient().setOIDCClient(this.tenant,oidcClient);    return OIDCClientMapper.getOIDCClientDTO(getIDMClient().getOIDCClient(this.tenant,oidcClient.getClientId()));  } catch (  NoSuchTenantException|NoSuchOIDCClientException e) {    log.debug("Failed to update an OIDC client '{}' on tenant '{}' due to missing tenant or an OIDC client",clientId,this.tenant,e);    throw new NotFoundException(this.sm.getString("ec.404"),e);  }catch (  DTOMapperException|InvalidArgumentException|DuplicatedOIDCRedirectURLException e) {    log.debug("Failed to update an OIDC client '{}' on tenant '{}' due to a client side error",clientId,this.tenant,e);    throw new BadRequestException(this.sm.getString("res.oidcclient.update.failed",clientId,this.tenant),e);  }catch (  Exception e) {    log.error("Failed to update an OIDC client '{}' on tenant '{}' due to a server side error",clientId,this.tenant,e);    throw new InternalServerErrorException(this.sm.getString("ec.500"),e);  }}  }
class C{  public final void finishActivity(){  finish();}  }
class C{  private void createWorksheet(String title,int rowCount,int colCount) throws IOException, ServiceException {  WorksheetEntry worksheet=new WorksheetEntry();  worksheet.setTitle(new PlainTextConstruct(title));  worksheet.setRowCount(rowCount);  worksheet.setColCount(colCount);  service.insert(worksheetFeedUrl,worksheet);}  }
class C{  public OrganizationAlreadyBannedException(final String message){  super(message);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:58.347 -0500",hash_original_method="1F47EE467986BB0FFF0B9D8C3E5BF63C",hash_generated_method="7832ED6601F42177E105964EB06301A4") public static boolean isVertical(int gravity){  return ((gravity) == 1);}  }
class C{  @Override public void E(final Object e,final FormObject formObj){  if (showMethods) {    System.out.println("DefaultActionHandler.E()");  }  javascript.execute(formObj,PdfDictionary.E,ActionHandler.FOCUS_EVENT,' ');}  }
class C{  @Override public IBlockState onBlockPlaced(World worldIn,BlockPos pos,EnumFacing facing,float hitX,float hitY,float hitZ,int meta,EntityLivingBase placer){  return this.getStateFromMeta(meta).withProperty(LOG_AXIS,BlockSpectreLog.EnumAxis.fromFacingAxis(facing.getAxis()));}  }
class C{  protected void sendError(HttpServletResponse response,String message) throws IOException {  PrintWriter writer=response.getWriter();  writer.println("Error - " + message);}  }
class C{  public boolean ping(HostAddress address,int timeout) throws HostException {  if (exception) {    notes="exception";    throw new HostException("exception");  } else {    notes="ok";    return true;  }}  }
class C{  public static byte[] flipAllBitsInPlace(byte[] bytes,int index){  return flipAllBitsInPlace(bytes,index,bytes.length - index);}  }
class C{  JPanel createSourceCodePanel(){  Font sourceFont=new Font("Monospaced",Font.PLAIN,(int)Driver.getFontSize());  mainFrame.getSourceCodeTextPane().setFont(sourceFont);  mainFrame.getSourceCodeTextPane().setEditable(false);  mainFrame.getSourceCodeTextPane().getCaret().setSelectionVisible(true);  mainFrame.getSourceCodeTextPane().setDocument(SourceCodeDisplay.SOURCE_NOT_RELEVANT);  JScrollPane sourceCodeScrollPane=new JScrollPane(mainFrame.getSourceCodeTextPane());  sourceCodeScrollPane.getVerticalScrollBar().setUnitIncrement(20);  JPanel panel=new JPanel();  panel.setLayout(new BorderLayout());  panel.add(sourceCodeScrollPane,BorderLayout.CENTER);  panel.revalidate();  if (MainFrame.GUI2_DEBUG) {    System.out.println("Created source code panel");  }  return panel;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:03.511 -0500",hash_original_method="8FADF93798BEC10B7C24976655D3DFB0",hash_generated_method="4501EF37F3AFF95A4F9D02168B7BE25C") boolean hasCookies(){  if (mDataBase == null) {    return false;  }  return mDataBase.hasCookies();}  }
class C{  private boolean hasInterchangeObject(Class clazz){  String simpleName=clazz.getSimpleName();  return (this.interchangeObjectsMap.containsKey(simpleName) && (this.interchangeObjectsMap.get(simpleName) != null && this.interchangeObjectsMap.get(simpleName).size() > 0));}  }
class C{  public Node removeFirst(){  Node node=header.getNextNode();  firstByte+=node.ba.last();  return removeNode(node);}  }
class C{  protected void addSubComponents(){  add(iconButton);  add(maxButton);  add(closeButton);}  }
class C{  public void stop(){  Iterator<MessageConsumerSession> it=sessions.iterator();  while (it.hasNext()) {    MessageConsumerSession s=(MessageConsumerSession)it.next();    s.stopListening();  }}  }
class C{  public void addSelectionListener(final SelectionListener listener){  checkWidget();  if (listener == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  if (selectionListeners == null) {    selectionListeners=new ArrayList<SelectionListener>();  }  selectionListeners.add(listener);}  }
class C{  public static double meanSquaredError(double[] x,double trueValue){  if (x == null || x.length == 0) {    throw new IllegalArgumentException();  }  double total=0;  for (  double sample : x) {    total+=(sample - trueValue) * (sample - trueValue);  }  total/=x.length;  return total;}  }
class C{  public static void serializeGroupDescReply(List<OFGroupDescStatsReply> groupDescReplies,JsonGenerator jGen) throws IOException, JsonProcessingException {  OFGroupDescStatsReply groupDescReply=groupDescReplies.get(0);  jGen.writeStringField("version",groupDescReply.getVersion().toString());  jGen.writeFieldName("groupDesc");  jGen.writeStartArray();  for (  OFGroupDescStatsEntry entry : groupDescReply.getEntries()) {    jGen.writeStartObject();    jGen.writeStringField("groupType",entry.getGroupType().toString());    jGen.writeStringField("groupNumber",entry.getGroup().toString());    jGen.writeFieldName("buckets");    jGen.writeStartArray();    for (    OFBucket buckets : entry.getBuckets()) {      jGen.writeStartObject();      jGen.writeNumberField("weight",buckets.getWeight());      jGen.writeNumberField("watchPortNumber",buckets.getWatchPort().getPortNumber());      jGen.writeStringField("watchGroup",buckets.getWatchGroup().toString());      OFActionListSerializer.serializeActions(jGen,buckets.getActions());      jGen.writeEndObject();    }    jGen.writeEndArray();    jGen.writeEndObject();  }  jGen.writeEndArray();}  }
class C{  public void moveToCurrentRow() throws SQLException {  checkUpdatable();  rowUpdater.moveToCurrentRow();}  }
class C{  private void pokeInt(GPR reg,int idx){  int offset=BYTES_IN_STACKSLOT - BYTES_IN_INT + (idx << LOG_BYTES_IN_STACKSLOT);  if (VM.VerifyAssertions)   validateStackPush(-offset);  asm.emitSTW(reg,spTopOffset + offset,FP);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:39.100 -0500",hash_original_method="1BC492CFAAC06440005836321EF40EC6",hash_generated_method="E8E53714CB7D45FC31B5E152CC74A9F2") private void nativeSetTargetHeapUtilization(float newTarget){  addTaint(newTarget);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected void recycleDismissedViewsItems(List<PendingDismissData> pendingDismisses){  ViewGroup.LayoutParams lp;  for (  PendingDismissData pendingDismiss : pendingDismisses) {    ViewHelper.setAlpha(pendingDismiss.view,1f);    ViewHelper.setTranslationX(pendingDismiss.view,0);    lp=pendingDismiss.view.getLayoutParams();    lp.height=0;    pendingDismiss.view.setLayoutParams(lp);  }}  }
class C{  public boolean isDayExcluded(int wday){  return excludeDays[wday];}  }
class C{  public void lockOrientation(){  if (mOrientationLocked) {    return;  }  mOrientationLocked=true;  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {    setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LOCKED);  } else {    setRequestedOrientation(calculateCurrentScreenOrientation());  }}  }
class C{  public RegexPartitionStateRepo copyForIterate(boolean forOutOfOrderReprocessing){  RegexPartitionStateImpl state=new RegexPartitionStateImpl(singletonState.getRandomAccess(),null);  return new RegexPartitionStateRepoNoGroup(state);}  }
class C{  public NumericRange(int[]... indexes){  init(indexes);}  }
class C{  private static void clearRoutes(final Population population){  for (  Person person : population.getPersons().values()) {    for (    Plan plan : person.getPlans()) {      for (      PlanElement pe : plan.getPlanElements()) {        if (pe instanceof Leg) {          ((Leg)pe).setRoute(null);        }      }    }  }}  }
class C{  public void removeCountryListener(CountryListener listener){synchronized (mListeners) {    ListenerTransport transport=mListeners.get(listener);    if (transport != null) {      try {        mListeners.remove(listener);        mService.removeCountryListener(transport);      } catch (      RemoteException e) {        Log.e(TAG,"removeCountryListener: RemoteException",e);      }    }  }}  }
class C{  private void closeDeadProxies(List deadProxies,boolean stoppedNormally){  final boolean isDebugEnabled=logger.isDebugEnabled();  for (Iterator i=deadProxies.iterator(); i.hasNext(); ) {    CacheClientProxy proxy=(CacheClientProxy)i.next();    if (isDebugEnabled)     logger.debug("CacheClientNotifier: Closing dead client: {}",proxy);    boolean keepProxy=false;    try {      keepProxy=proxy.close(false,stoppedNormally);    } catch (    CancelException e) {      throw e;    }catch (    Exception e) {    }    if (keepProxy) {      logger.info(LocalizedMessage.create(LocalizedStrings.CacheClientNotifier_CACHECLIENTNOTIFIER_KEEPING_PROXY_FOR_DURABLE_CLIENT_NAMED_0_FOR_1_SECONDS_2,new Object[]{proxy.getDurableId(),Integer.valueOf(proxy.getDurableTimeout()),proxy}));    } else {      closeAllClientCqs(proxy);      if (isDebugEnabled) {        logger.debug("CacheClientNotifier: Not keeping proxy for non-durable client: {}",proxy);      }      removeClientProxy(proxy);    }    proxy.notifyRemoval();  }}  }
class C{  public void connectionClosed(ConnectionEvent event){  if (isActive) {    try {      PooledConnection conn=(PooledConnection)event.getSource();      provider.returnConnection(conn);    } catch (    Exception ex) {      String exception="GemFireConnPooledDataSource::connectionclosed:Exception =" + ex;      if (logger.isDebugEnabled()) {        logger.debug(exception,ex);      }    }  }}  }
class C{  public AutoDeskewTransform(DataSet dataSet,final List<Double> lambdas){  this(dataSet,true,lambdas);}  }
class C{  public static void playAudio(final Activity activity,Uri uri){  Intent intent=new Intent();  intent.setAction(android.content.Intent.ACTION_VIEW);  intent.setDataAndType(uri,"audio/");  activity.startActivity(intent);}  }
class C{  private MailContent tag(String tag,String atributs){  ends.push("</" + tag + ">");  html.a('<').a(tag).sp().a(atributs).a('>');  return this;}  }
class C{  static <T>List<Id<T>> parseIds(String idString,Class<T> type){  log.info("Query got Id String: " + idString);  List<Id<T>> ids=new ArrayList<>();  if (idString.contains(",")) {    for (    String i : idString.split(",")) {      ids.add(Id.create(i.trim(),type));    }  } else {    ids.add(Id.create(idString.trim(),type));  }  return ids;}  }
class C{  private boolean skipScope(int openToken,int closeToken){  int depth=1;  while (true) {    nextToken();    if (fToken == closeToken) {      depth++;    } else     if (fToken == openToken) {      depth--;      if (depth == 0)       return true;    } else     if (fToken == Symbols.TokenEOF) {      return false;    }  }}  }
class C{  private void doShardTestTopStats() throws Exception {  SolrParams params=params("facet","true","q","*:*","facet.pivot","{!stats=s1}place_t,company_t","start","0","rows","0","fsv","true","fl","id,score","stats","true","stats.field","{!key=avg_price tag=s1}price_ti","f.place_t.facet.limit","160","f.place_t.facet.pivot.mincount","0","f.company_t.facet.limit","160","f.company_t.facet.pivot.mincount","0","isShard","true","distrib","false");  QueryResponse rsp=queryServer(new ModifiableSolrParams(params));  assertNotNull("initial shard request should include non-null top level stats",rsp.getFieldStatsInfo());  assertFalse("initial shard request should include top level stats",rsp.getFieldStatsInfo().isEmpty());  List<PivotField> placePivots=rsp.getFacetPivot().get("place_t,company_t");  for (  PivotField pivotField : placePivots) {    assertFalse("pivot stats should not be empty in initial request",pivotField.getFieldStatsInfo().isEmpty());  }}  }
class C{  public static double clampAngle180(double degrees){  return degrees > 180 ? 180 : (degrees < -180 ? -180 : degrees);}  }
class C{  private PrintElement layoutPInstanceLogs(){  if (m_query == null || !m_query.isActive() || m_query.getAD_PInstance_ID() <= 0)   return null;  PInstanceLogElement e=new PInstanceLogElement(m_printCtx,m_query,m_format.getTableFormat());  if (e.getEffectiveRowCount() <= 0) {    return null;  }  e.layout(0,0,false,null);  return e;}  }
class C{  public static BufferedImage toCompatibleImage(BufferedImage image){  if (image.getColorModel().equals(getGraphicsConfiguration().getColorModel())) {    return image;  }  BufferedImage compatibleImage=getGraphicsConfiguration().createCompatibleImage(image.getWidth(),image.getHeight(),image.getTransparency());  Graphics g=compatibleImage.getGraphics();  g.drawImage(image,0,0,null);  g.dispose();  return compatibleImage;}  }
class C{  private static String decodePayload(String idToken){  Preconditions.checkNotNull(idToken);  String[] jwtParts=idToken.split("\\.");  Preconditions.checkState(jwtParts.length == 3);  String payloadStr=jwtParts[1];  Preconditions.checkNotNull(payloadStr);  return new String(Base64.decodeBase64(payloadStr));}  }
class C{  @Override protected void renderElements(GL10 gl,PLIRenderer renderer){  super.renderElements(gl,renderer);  this.renderRenderableElements(gl,renderer,mHotspots);}  }
class C{  public NodeMetadataLeftIndexedPowerLawMultiSegmentBipartiteGraph(int maxNumSegments,int maxNumEdgesPerSegment,int expectedNumLeftNodes,int expectedMaxLeftDegree,double leftPowerLawExponent,int expectedNumRightNodes,int numRightNodeMetadataTypes,EdgeTypeMask edgeTypeMask,StatsReceiver statsReceiver){  super(maxNumSegments,maxNumEdgesPerSegment,new NodeMetadataLeftIndexedPowerLawSegmentProvider(expectedNumLeftNodes,expectedMaxLeftDegree,leftPowerLawExponent,expectedNumRightNodes,numRightNodeMetadataTypes,edgeTypeMask,statsReceiver),new MultiSegmentReaderAccessibleInfoProvider<NodeMetadataLeftIndexedBipartiteGraphSegment>(maxNumSegments,maxNumEdgesPerSegment),statsReceiver);}  }
class C{  private static CellProcessor addOptional(CellProcessor cellProcessor){  if (cellProcessor == null) {    return new Optional();  }  return new Optional(cellProcessor);}  }
class C{  public synchronized void normalizeBSC(){  if (!isSparse)   this.bitSet=concludeVote();  votingRecord=new ArrayList<FixedBitSet>();  votingRecord.add((FixedBitSet)bitSet.clone());  totalNumberOfVotes.set(1);  tempSet=new FixedBitSet(dimension);  minimum=0;}  }
class C{  @Override public void onMouseOver(MouseOverEvent event){  tooltip.getStyle().setTop(0,Style.Unit.PX);  tooltip.getStyle().setLeft((image.getOffsetWidth() + 2) / 2 - tooltipArrow.getOffsetWidth() / 2,Style.Unit.PX);  int screenSize=Document.get().getClientWidth();  if (image.getAbsoluteLeft() + tooltip.getOffsetWidth() > screenSize) {    tooltipBody.getStyle().setRight(image.getAbsoluteLeft() + tooltip.getOffsetWidth() - screenSize,Style.Unit.PX);  }  if (!enabled) {    return;  }  if (selected) {    panel.setStyleName(toolbarResources.toolbar().iconButtonPanelSelectedOver());  } else {    panel.setStyleName(toolbarResources.toolbar().iconButtonPanelOver());  }}  }
class C{  public double downsideDeviation(){  return Math.sqrt(downsideVariance());}  }
class C{  public DataSourceInfoGroup(){  this.setJdbcUrl(null);  this.setBusyConnections(0);  this.setEstablishedConnections(0);  this.setMaxConnections(0);}  }
class C{  @Override public Enumeration<String> enumerateRequests(){  Vector<String> newVector=new Vector<String>();  if (m_subFlowPreview != null) {    String text="Show preview";    if (m_previewWindow != null) {      text="$" + text;    }    newVector.addElement(text);  }  for (int i=0; i < m_subFlow.size(); i++) {    BeanInstance temp=(BeanInstance)m_subFlow.elementAt(i);    if (temp.getBean() instanceof UserRequestAcceptor) {      String prefix="";      if ((temp.getBean() instanceof BeanCommon)) {        prefix=((BeanCommon)temp.getBean()).getCustomName();      } else {        prefix=temp.getBean().getClass().getName();        prefix=prefix.substring(prefix.lastIndexOf('.') + 1,prefix.length());      }      prefix="" + (i + 1) + ": ("+ prefix+ ")";      Enumeration<String> en=((UserRequestAcceptor)temp.getBean()).enumerateRequests();      while (en.hasMoreElements()) {        String req=en.nextElement();        if (req.charAt(0) == '$') {          prefix='$' + prefix;          req=req.substring(1,req.length());        }        if (req.charAt(0) == '?') {          prefix='?' + prefix;          req=req.substring(1,req.length());        }        newVector.add(prefix + " " + req);      }    } else     if (temp.getBean() instanceof Startable) {      String prefix="";      if ((temp.getBean() instanceof BeanCommon)) {        prefix=((BeanCommon)temp.getBean()).getCustomName();      } else {        prefix=temp.getBean().getClass().getName();        prefix=prefix.substring(prefix.lastIndexOf('.') + 1,prefix.length());      }      prefix="" + (i + 1) + ": ("+ prefix+ ")";      String startMessage=((Startable)temp.getBean()).getStartMessage();      if (startMessage.charAt(0) == '$') {        prefix='$' + prefix;        startMessage=startMessage.substring(1,startMessage.length());      }      newVector.add(prefix + " " + startMessage);    }  }  return newVector.elements();}  }
class C{  private static boolean validateCGProjectDetails(BlockConsistencyGroup cg,StorageSystem storageSystem,URI projectUri,URI tenantUri,URI varrayUri,String umvLabel,String cgName,DbClient dbClient){  if (null != cg.getProject() && !NullColumnValueGetter.isNullURI(cg.getProject().getURI()) && null != cg.getTenant() && !NullColumnValueGetter.isNullURI(cg.getTenant().getURI())) {    if (cg.getProject().getURI().equals(projectUri) && cg.getTenant().getURI().equals(tenantUri)) {      URI storageControllerUri=cg.getStorageController();      URI virtualArrayUri=cg.getVirtualArray();      if (!NullColumnValueGetter.isNullURI(storageControllerUri) && !NullColumnValueGetter.isNullURI(virtualArrayUri)) {        if (storageControllerUri.equals(storageSystem.getId()) && virtualArrayUri.equals(varrayUri)) {          _logger.info("Found a matching BlockConsistencyGroup {} " + "for volume {}.",cgName,umvLabel);          cg.addConsistencyGroupTypes(Types.LOCAL.name());          dbClient.updateObject(cg);          return true;        }      }    }  }  return false;}  }
class C{  public static double P_Harmonic(int Y[][],int Ypred[][],int j){  int y_j[]=MatrixUtils.getCol(Y,j);  int ypred_j[]=MatrixUtils.getCol(Ypred,j);  return P_Harmonic(y_j,ypred_j);}  }
class C{  public void write(char buf[]){  write(buf,0,buf.length);}  }
class C{  private static ThreadGroup createThreadGroup(){  try {    sun.misc.Unsafe u=sun.misc.Unsafe.getUnsafe();    Class<?> tk=Thread.class;    Class<?> gk=ThreadGroup.class;    long tg=u.objectFieldOffset(tk.getDeclaredField("group"));    long gp=u.objectFieldOffset(gk.getDeclaredField("parent"));    ThreadGroup group=(ThreadGroup)u.getObject(Thread.currentThread(),tg);    while (group != null) {      ThreadGroup parent=(ThreadGroup)u.getObject(group,gp);      if (parent == null)       return new ThreadGroup(group,"InnocuousForkJoinWorkerThreadGroup");      group=parent;    }  } catch (  Exception e) {    throw new Error(e);  }  throw new Error("Cannot create ThreadGroup");}  }
class C{  private <T>T[] copyElements(T[] a){  if (head < tail) {    System.arraycopy(elements,head,a,0,size());  } else   if (head > tail) {    int headPortionLen=elements.length - head;    System.arraycopy(elements,head,a,0,headPortionLen);    System.arraycopy(elements,0,a,headPortionLen,tail);  }  return a;}  }
class C{  public CustomerOrderPanel(final String id,final IModel<Customer> customerModel){  super(id,customerModel);}  }
class C{  private void addAllTokens(){  tokens=new LinkedList<Token>();  for (int i=0; i < 5; i++) {    addTokenToWorld(OFFSET_X + i,OFFSET_Y);  }  for (int i=1; i < 4; i++) {    addTokenToWorld(OFFSET_X + i,OFFSET_Y + 1);  }  addTokenToWorld(OFFSET_X + 2,OFFSET_Y + 2);}  }
class C{  public static ClientPrepareResult createRewritableParts(String queryString,boolean noBackslashEscapes){  try {    boolean reWritablePrepare=true;    boolean multipleQueriesPrepare=true;    List<byte[]> partList=new ArrayList<>();    LexState state=LexState.Normal;    char lastChar='\0';    StringBuilder sb=new StringBuilder();    String preValuePart1=null;    String preValuePart2=null;    String postValuePart=null;    boolean singleQuotes=false;    int isInParenthesis=0;    boolean skipChar=false;    boolean isFirstChar=true;    boolean isInsert=false;    boolean semicolon=false;    boolean hasParam=false;    char[] query=queryString.toCharArray();    int queryLength=query.length;    for (int i=0; i < queryLength; i++) {      if (state == LexState.Escape) {        sb.append(query[i]);        state=LexState.String;        continue;      }      char car=query[i];switch (car) {case '*':        if (state == LexState.Normal && lastChar == '/')         state=LexState.SlashStarComment;      break;case '/':    if (state == LexState.SlashStarComment && lastChar == '*') {      state=LexState.Normal;    } else     if (state == LexState.Normal && lastChar == '/') {      state=LexState.EOLComment;    }  break;case '#':if (state == LexState.Normal) state=LexState.EOLComment;break;case '-':if (state == LexState.Normal && lastChar == '-') {state=LexState.EOLComment;multipleQueriesPrepare=false;}break;case '\n':if (state == LexState.EOLComment) state=LexState.Normal;break;case '"':if (state == LexState.Normal) {state=LexState.String;singleQuotes=false;} else if (state == LexState.String && !singleQuotes) {state=LexState.Normal;}break;case ';':if (state == LexState.Normal) {semicolon=true;multipleQueriesPrepare=false;}break;case '\'':if (state == LexState.Normal) {state=LexState.String;singleQuotes=true;} else if (state == LexState.String && singleQuotes) {state=LexState.Normal;}break;case '\\':if (noBackslashEscapes) {break;}if (state == LexState.String) state=LexState.Escape;break;case '?':if (state == LexState.Normal) {hasParam=true;if (preValuePart1 == null) {preValuePart1=sb.toString();sb.setLength(0);}if (preValuePart2 == null) {preValuePart2=sb.toString();sb.setLength(0);} else {if (postValuePart != null) {reWritablePrepare=false;sb.insert(0,postValuePart);postValuePart=null;}partList.add(sb.toString().getBytes("UTF-8"));sb.setLength(0);}skipChar=true;}break;case '`':if (state == LexState.Backtick) {state=LexState.Normal;} else if (state == LexState.Normal) {state=LexState.Backtick;}break;case 's':case 'S':if (state == LexState.Normal) {if (postValuePart == null && queryLength > i + 6 && (query[i + 1] == 'e' || query[i + 1] == 'E') && (query[i + 2] == 'l' || query[i + 2] == 'L') && (query[i + 3] == 'e' || query[i + 3] == 'E') && (query[i + 4] == 'c' || query[i + 4] == 'C') && (query[i + 5] == 't' || query[i + 5] == 'T')) {reWritablePrepare=false;}}break;case 'v':case 'V':if (state == LexState.Normal) {if (preValuePart1 == null && (lastChar == ')' || ((byte)lastChar <= 40)) && queryLength > i + 7 && (query[i + 1] == 'a' || query[i + 1] == 'A') && (query[i + 2] == 'l' || query[i + 2] == 'L') && (query[i + 3] == 'u' || query[i + 3] == 'U') && (query[i + 4] == 'e' || query[i + 4] == 'E') && (query[i + 5] == 's' || query[i + 5] == 'S') && (query[i + 6] == '(' || ((byte)query[i + 6] <= 40))) {sb.append(car);sb.append(query[i + 1]);sb.append(query[i + 2]);sb.append(query[i + 3]);sb.append(query[i + 4]);sb.append(query[i + 5]);i=i + 5;preValuePart1=sb.toString();sb.setLength(0);skipChar=true;}}break;case '(':if (state == LexState.Normal) isInParenthesis++;break;case ')':if (state == LexState.Normal) {isInParenthesis--;if (isInParenthesis == 0 && preValuePart2 != null && postValuePart == null) {sb.append(car);postValuePart=sb.toString();sb.setLength(0);skipChar=true;}}break;default :if (state == LexState.Normal && isFirstChar && ((byte)car >= 40)) {if (car == 'I' || car == 'i') isInsert=true;isFirstChar=false;}if (state == LexState.Normal && semicolon && ((byte)car >= 40)) {reWritablePrepare=false;multipleQueriesPrepare=true;}break;}lastChar=car;if (skipChar) {skipChar=false;} else {sb.append(car);}}if (!hasParam) {if (preValuePart1 == null) {partList.add(0,sb.toString().getBytes("UTF-8"));partList.add(1,new byte[0]);} else {partList.add(0,preValuePart1.getBytes("UTF-8"));partList.add(1,sb.toString().getBytes("UTF-8"));}sb.setLength(0);} else {partList.add(0,(preValuePart1 == null) ? new byte[0] : preValuePart1.getBytes("UTF-8"));partList.add(1,(preValuePart2 == null) ? new byte[0] : preValuePart2.getBytes("UTF-8"));}if (!isInsert) reWritablePrepare=false;if (hasParam) partList.add((postValuePart == null) ? new byte[0] : postValuePart.getBytes("UTF-8"));partList.add(sb.toString().getBytes("UTF-8"));return new ClientPrepareResult(queryString,partList,reWritablePrepare,multipleQueriesPrepare,true);} catch (UnsupportedEncodingException u) {return null;}}  }
class C{  public static void unpackKey(HasStorage hasStorage,byte[] rawKey,Key key){  unpackKey(hasStorage.getStorageDescription(),rawKey,key);}  }
class C{  public void release(RegisterOperand r){  Register reg=r.getRegister();  if (reg.number == currentNum - 1) {    currentNum--;    registerListremove(end);  }}  }
class C{  @Override protected void initializeImageRegistry(ImageRegistry reg){  imageRegistryCreated=true;}  }
class C{  public static <L extends Lock>void lockAll(L... locks){  Deque<L> stack=new LinkedList<>();  try {    for (    L lock : locks) {      lock.lock();      stack.push(lock);    }  } catch (  RuntimeException rex) {    unlockAll(stack);    throw rex;  }}  }
class C{  public void processRequest(StunMessageEvent evt){  if (messageSequence.isEmpty())   return;  Object obj=messageSequence.remove(0);  if (!(obj instanceof Response))   return;  Response res=(Response)obj;  try {    stunStack.sendResponse(evt.getMessage().getTransactionID(),res,serverAddress,evt.getRemoteAddress());  } catch (  Exception ex) {    logger.log(Level.WARNING,"failed to send a response",ex);  }}  }
class C{  private Preconditions(){}  }
class C{  public ObjectifyFactory factory(){  return ofy().factory();}  }
class C{  @Override public Instances defineDataFormat() throws Exception {  setOptions(getOptions());  checkCoverage();  Random random=new Random(getSeed());  setRandom(random);  Instances dataset;  ArrayList<Attribute> attributes=new ArrayList<Attribute>(3);  Attribute attribute;  boolean classFlag=getClassFlag();  ArrayList<String> classValues=null;  if (classFlag) {    classValues=new ArrayList<String>(getClusters().length);  }  ArrayList<String> boolValues=new ArrayList<String>(2);  boolValues.add("false");  boolValues.add("true");  ArrayList<String> nomValues=null;  for (int i=0; i < getNumAttributes(); i++) {    if (m_booleanCols.isInRange(i)) {      attribute=new Attribute("B" + i,boolValues);    } else     if (m_nominalCols.isInRange(i)) {      nomValues=new ArrayList<String>(m_numValues[i]);      for (int j=0; j < m_numValues[i]; j++) {        nomValues.add("value-" + j);      }      attribute=new Attribute("N" + i,nomValues);    } else {      attribute=new Attribute("X" + i);    }    attributes.add(attribute);  }  if (classFlag) {    for (int i=0; i < getClusters().length; i++) {      classValues.add("c" + i);    }    attribute=new Attribute("class",classValues);    attributes.add(attribute);  }  dataset=new Instances(getRelationNameToUse(),attributes,0);  if (classFlag) {    dataset.setClassIndex(m_NumAttributes);  }  Instances format=new Instances(dataset,0);  setDatasetFormat(format);  for (int i=0; i < getClusters().length; i++) {    SubspaceClusterDefinition cl=(SubspaceClusterDefinition)getClusters()[i];    cl.setNumInstances(random);    cl.setParent(this);  }  return dataset;}  }
class C{  public void clear(int code){  MouseButton mb=this.buttons.get(code);  if (mb == null) {    return;  }  mb.clear();}  }
class C{  @DSComment("No op default handler") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:49.142 -0500",hash_original_method="FAA725B72A2ADC391C781CAB49B849AD",hash_generated_method="3955D568D23D91849FC2AFF57016EC23") @DSVerified public void startDocument() throws SAXException {}  }
class C{  private void validatePatchState(State startState,State patchState){  ValidationUtils.validatePatch(startState,patchState);  ValidationUtils.validateTaskStage(patchState.taskState);  ValidationUtils.validateTaskStageProgression(startState.taskState,patchState.taskState);}  }
class C{  public void pause(){  if (stopTimestampUs != -1) {    return;  }  log.i("calling pause");  audioTrack.pause();}  }
class C{  public QueryStringDecoder(String uri,Charset charset,boolean hasPath,int maxParams){  if (uri == null) {    throw new NullPointerException("getUri");  }  if (charset == null) {    throw new NullPointerException("charset");  }  if (maxParams <= 0) {    throw new IllegalArgumentException("maxParams: " + maxParams + " (expected: a positive integer)");  }  this.uri=uri;  this.charset=charset;  this.maxParams=maxParams;  this.hasPath=hasPath;}  }
class C{  public void send(final OscPacket thePacket,final TcpClient theClient){  theClient.send(thePacket.getBytes());}  }
class C{  public final E lastElement(){  return get(size() - 1);}  }
class C{  private void writeTransitSchedule(TransitSchedule newTransitSchedule,String newTransitScheduleOutFilename,String vehiclesOutFilename){  new TransitScheduleWriterV1(newTransitSchedule).write(newTransitScheduleOutFilename);  log.info("Transit schedule written to " + newTransitScheduleOutFilename);  Set<Id<Vehicle>> vehIds=new TreeSet<>();  for (  TransitLine line : newTransitSchedule.getTransitLines().values()) {    for (    TransitRoute route : line.getRoutes().values()) {      for (      Departure departure : route.getDepartures().values()) {        vehIds.add(departure.getVehicleId());      }    }  }  Vehicles vehicles=VehicleUtils.createVehiclesContainer();  Id<VehicleType> vehTypeId=Id.create("rbl",VehicleType.class);  VehicleType vehType=vehicles.getFactory().createVehicleType(vehTypeId);  VehicleCapacity vehCap=vehicles.getFactory().createVehicleCapacity();  vehCap.setSeats(1);  vehCap.setStandingRoom(1);  vehType.setCapacity(vehCap);  vehicles.addVehicleType(vehType);  Map<Id<Vehicle>,Vehicle> vehMap=vehicles.getVehicles();  for (  Id<Vehicle> vehId : vehIds) {    Vehicle veh=vehicles.getFactory().createVehicle(vehId,vehType);    vehMap.put(vehId,veh);  }  VehicleWriterV1 writer=new VehicleWriterV1(vehicles);  writer.writeFile(vehiclesOutFilename);  log.info("Vehicles written to " + vehiclesOutFilename);}  }
class C{  Item newLong(final long value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(LONG).putLong(value);    result=new Item(index,key);    index+=2;    put(result);  }  return result;}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  static public void assertEquals(String message,int expected,int actual){  assertEquals(message,new Integer(expected),new Integer(actual));}  }
class C{  @Override protected void finalizeOutput(final int[] sourceImagePixels,final int imageWidth,final int imageHeight){  this.output.setRGB(0,0,imageWidth,imageHeight,sourceImagePixels,0,imageWidth);}  }
class C{  protected void disposeOldTextures(DrawContext dc){  Object key;  while ((key=this.disposedTextureKeys.poll()) != null) {    if (dc.getTextureCache().contains(key))     dc.getTextureCache().remove(key);  }}  }
class C{  public static void updateNonPositionFields(Game game,Style12Message message){switch (message.relation) {case Style12Message.EXAMINING_GAME_RELATION:    game.addState(Game.EXAMINING_STATE);  break;case Style12Message.ISOLATED_POSITION_RELATION:break;case Style12Message.OBSERVING_EXAMINED_GAME_RELATION:game.addState(Game.OBSERVING_EXAMINED_STATE);break;case Style12Message.OBSERVING_GAME_RELATION:game.addState(Game.OBSERVING_STATE);break;case Style12Message.PLAYING_MY_MOVE_RELATION:case Style12Message.PLAYING_OPPONENTS_MOVE_RELATION:game.addState(Game.PLAYING_STATE);break;}if (message.isClockTicking) {game.addState(Game.IS_CLOCK_TICKING_STATE);} else {game.clearState(Game.IS_CLOCK_TICKING_STATE);}game.addState(Game.ACTIVE_STATE);game.setHeader(PgnHeader.Black,IcsUtils.stripTitles(message.blackName));game.setHeader(PgnHeader.White,IcsUtils.stripTitles(message.whiteName));game.setHeader(PgnHeader.WhiteRemainingMillis,String.valueOf(message.whiteRemainingTimeMillis));game.setHeader(PgnHeader.BlackRemainingMillis,String.valueOf(message.blackRemainingTimeMillis));game.setColorToMove(message.isWhitesMoveAfterMoveIsMade ? WHITE : BLACK);game.setCastling(WHITE,message.canWhiteCastleKSide && message.canWhiteCastleQSide ? CASTLE_BOTH : message.canWhiteCastleKSide ? CASTLE_SHORT : message.canWhiteCastleQSide ? CASTLE_LONG : CASTLE_NONE);game.setCastling(BLACK,message.canBlackCastleKSide && message.canBlackCastleQSide ? CASTLE_BOTH : message.canBlackCastleKSide ? CASTLE_SHORT : message.canBlackCastleQSide ? CASTLE_LONG : CASTLE_NONE);if (message.doublePawnPushFile == -1) {game.setEpSquare(EMPTY_SQUARE);game.setInitialEpSquare(EMPTY_SQUARE);} else {int doublePawnPushSquare=GameUtils.getSquare(message.isWhitesMoveAfterMoveIsMade ? 5 : 2,message.doublePawnPushFile);game.setEpSquare(doublePawnPushSquare);game.setInitialEpSquare(doublePawnPushSquare);}game.setFiftyMoveCount(message.numberOfMovesSinceLastIrreversible);int fullMoveCount=message.fullMoveNumber;game.setHalfMoveCount(game.getColorToMove() == BLACK ? fullMoveCount * 2 - 1 : fullMoveCount * 2 - 2);game.incrementRepCount();}  }
class C{  @Override public boolean connectionAllowed(EventSetDescriptor esd){  return connectionAllowed(esd.getName());}  }
class C{  public static void printTable(final String tableName,final AccumuloRdfConfiguration config,final boolean shouldAddCommonIterators,final IteratorSetting... settings) throws IOException {  final Scanner scanner=AccumuloRyaUtils.getScanner(tableName,config,shouldAddCommonIterators);  for (  final IteratorSetting setting : settings) {    scanner.addScanIterator(setting);  }  final Iterator<Entry<Key,Value>> iterator=scanner.iterator();  final String instance=config.get(MRUtils.AC_INSTANCE_PROP);  log.info("==================");  log.info("TABLE: " + tableName + " INSTANCE: "+ instance);  log.info("------------------");  while (iterator.hasNext()) {    final Entry<Key,Value> entry=iterator.next();    final Key key=entry.getKey();    final Value value=entry.getValue();    final String keyString=getFormattedKeyString(key);    log.info(keyString + " - " + value);  }  log.info("==================");}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void deleteConfigDir(String configName) throws IOException {  try {    zkClient.clean(ZkConfigManager.CONFIGS_ZKNODE + "/" + configName);  } catch (  KeeperException|InterruptedException e) {    throw new IOException("Error checking whether config exists",SolrZkClient.checkInterrupted(e));  }}  }
class C{  @SuppressWarnings("fallthrough") @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="SF_SWITCH_FALLTHROUGH") boolean doNextStep(AbstractMRReply msg,DataInputStream istream) throws java.io.IOException {switch (state) {case 0:    buffer[0]=readByteProtected(istream);  if (logDebug) {    log.debug("state 0, rcv " + (buffer[0] & 0xFF));  }if ((buffer[0] & 0x80) == 0) {  log.warn("1st byte not address: " + (buffer[0] & 0xFF));  return true;}state=1;case 1:buffer[1]=readByteProtected(istream);if (logDebug) {log.debug("state 1, rcv " + (buffer[1] & 0xFF));}if ((buffer[1] & 0x80) != 0) {buffer[0]=buffer[1];state=1;log.warn("2nd byte HOB set: " + (buffer[1] & 0xFF) + ", going to state 1");return true;}state=2;case 2:if (nextReplyLen == 2) {buffer[2]=0;buffer[3]=0;loadBuffer(msg);((SerialReply)msg).setNumDataElements(2);nextReplyLen=4;state=0;if (logDebug) {log.debug("Short message complete: " + msg.toString());}return false;}buffer[2]=readByteProtected(istream);if (logDebug) {log.debug("state 2, rcv " + (buffer[2] & 0xFF));}if (buffer[0] != buffer[2]) {log.warn("addresses don't match: " + (buffer[0] & 0xFF) + ", "+ (buffer[2] & 0xFF)+ ", going to state 1");buffer[0]=buffer[2];state=1;return true;}state=3;case 3:buffer[3]=readByteProtected(istream);if (logDebug) {log.debug("state 3, rcv " + (buffer[3] & 0xFF));}if ((buffer[3] & 0x80) != 0) {buffer[0]=buffer[3];state=1;log.warn("3rd byte HOB set: " + (buffer[3] & 0xFF) + ", going to state 1");return true;}boolean pollMsg=((buffer[1] == buffer[3]) && (buffer[1] == 119));boolean errMsg=((buffer[0] & 0xFF) == 0x80);int parity=(buffer[0] & 0xF) + ((buffer[0] & 0x70) >> 4) + ((buffer[1] * 2) & 0xF)+ (((buffer[1] * 2) & 0xF0) >> 4)+ (buffer[3] & 0xF)+ ((buffer[3] & 0x70) >> 4);if (((parity & 0xF) != 0) && !pollMsg && !errMsg) {log.warn("parity mismatch: " + parity + ", going to state 2 with content "+ (buffer[2] & 0xFF)+ ","+ (buffer[3] & 0xFF));buffer[0]=buffer[2];buffer[1]=buffer[3];state=2;return true;}loadBuffer(msg);if (logDebug) {log.debug("Message complete: " + msg.toString());}state=0;return false;default :log.error("unexpected loadChars state: " + state + ", go direct to state 0");state=0;return true;}}  }
class C{  public synchronized final Map<K,V> snapshot(){  return new LinkedHashMap<K,V>(map);}  }
class C{  private UnconditionalValueDerefSet propagateDerefSetsToMergeInputValues(UnconditionalValueDerefSet fact,Edge edge){  ValueNumberFrame blockValueNumberFrame=vnaDataflow.getResultFact(edge.getSource());  ValueNumberFrame targetValueNumberFrame=vnaDataflow.getStartFact(edge.getTarget());  UnconditionalValueDerefSet originalFact=fact;  fact=duplicateFact(fact);  if (blockValueNumberFrame.isValid() && targetValueNumberFrame.isValid()) {    int slots=0;    if (targetValueNumberFrame.getNumSlots() == blockValueNumberFrame.getNumSlots()) {      slots=targetValueNumberFrame.getNumSlots();    } else     if (targetValueNumberFrame.getNumLocals() == blockValueNumberFrame.getNumLocals()) {      slots=targetValueNumberFrame.getNumLocals();    }    if (slots > 0) {      if (DEBUG) {        System.out.println("** Valid VNA frames for " + edge);        System.out.println("** Block : " + blockValueNumberFrame);        System.out.println("** Target: " + targetValueNumberFrame);      }      for (int i=0; i < slots; i++) {        ValueNumber blockVN=blockValueNumberFrame.getValue(i);        ValueNumber targetVN=targetValueNumberFrame.getValue(i);        if (blockVN.equals(targetVN)) {          continue;        }        fact.clearDerefSet(blockVN);        if (originalFact.isUnconditionallyDereferenced(targetVN)) {          fact.setDerefSet(blockVN,originalFact.getUnconditionalDerefLocationSet(targetVN));        }      }      for (      ValueNumber blockVN : blockValueNumberFrame.valueNumbersForLoads()) {        AvailableLoad load=blockValueNumberFrame.getLoad(blockVN);        if (load == null) {          continue;        }        ValueNumber[] targetVNs=targetValueNumberFrame.getAvailableLoad(load);        if (targetVNs != null) {          for (          ValueNumber targetVN : targetVNs) {            if (targetVN.hasFlag(ValueNumber.PHI_NODE) && fact.isUnconditionallyDereferenced(targetVN) && !fact.isUnconditionallyDereferenced(blockVN)) {              AvailableLoad targetLoad=targetValueNumberFrame.getLoad(targetVN);              if (!load.equals(targetLoad)) {                continue;              }              if (DEBUG) {                System.out.println("** Copy vn derefs for " + load + " from "+ targetVN+ " --> "+ blockVN);                System.out.println("** block phi for " + System.identityHashCode(blockValueNumberFrame) + " is "+ blockValueNumberFrame.phiNodeForLoads);                System.out.println("** target phi for " + System.identityHashCode(targetValueNumberFrame) + " is "+ targetValueNumberFrame.phiNodeForLoads);              }              fact.setDerefSet(blockVN,fact.getUnconditionalDerefLocationSet(targetVN));            }          }        }      }    }  }  if (DEBUG) {    System.out.println("Target VNF: " + targetValueNumberFrame);    System.out.println("Block VNF: " + blockValueNumberFrame);    System.out.println("fact: " + fact);  }  fact.cleanDerefSet(null,blockValueNumberFrame);  return fact;}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public T caseAnonymous_parameterList_1_(Anonymous_parameterList_1_ object){  return null;}  }
class C{  void add(int p1,int p2){  int i=ncon;  if (p1 >= nvert || p2 >= nvert) {    return;  }  if (i >= maxcon) {    if (con == null) {      maxcon=100;      con=new int[maxcon];    } else {      maxcon*=2;      int nv[]=new int[maxcon];      System.arraycopy(con,0,nv,0,con.length);      con=nv;    }  }  if (p1 > p2) {    int t=p1;    p1=p2;    p2=t;  }  con[i]=(p1 << 16) | p2;  ncon=i + 1;}  }
class C{  public void putResource(final Resource resource,final int quantity){  if (quantity < 0) {    throw new IllegalArgumentException("quantity must be positive");  }  m_resources.put(resource,quantity);}  }
class C{  public void dispose(){  clearStickyHeader();  adapter.unregisterAdapterDataObserver(dataObserver);  parent.removeOnScrollListener(scrollListener);  adapter=null;  dataObserver=null;  parent=null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:13.389 -0500",hash_original_method="889E462D85EE47A04EE3B8EBB5F8A587",hash_generated_method="AC1FAE4F660A1CD3FB5D92FDA26305C8") public DERUTCTime(Date time){  SimpleDateFormat dateF=new SimpleDateFormat("yyMMddHHmmss'Z'");  dateF.setTimeZone(new SimpleTimeZone(0,"Z"));  this.time=dateF.format(time);}  }
class C{  public static <T>LazyListX<T> fromIterable(Iterable<T> it){  return fromIterable(ListX.<T>defaultCollector(),it);}  }
class C{  public void decrementInUseCount(){  Preconditions.checkState(mInUseLength > 0);  mInUseLength--;}  }
class C{  public void add(final K o){  Integer in=counter.get(o);  if (in == null) {    in=Integer.valueOf(1);  } else {    in+=Integer.valueOf(1);  }  counter.put(o,in);}  }
class C{  public void appendInstructions(CodeArray instructionSegment){  for (int i=0; i < instructionSegment.length(); i++) {    appendInstruction(instructionSegment.get(i));  }}  }
class C{  public PasswordManager(AuthenticationInfo authenticationInfo,ClientApplicationType clientApplicationType){  this.authenticationInfo=authenticationInfo;  this.setClientApplicationType(clientApplicationType);}  }
class C{  public static ValueExpression createValueExpression(String expression){  return createValueExpression(expression,Object.class);}  }
class C{  public static String joinPath(final String left,final String right){  String leftHand=left;  if (!left.endsWith(SEPARATOR_UNIX)) {    leftHand+=SEPARATOR_UNIX;  }  return leftHand + right.replaceFirst("^/(.*)","$1");}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:27.171 -0500",hash_original_method="D16C073A10FD3671AE05EBC49E38DA17",hash_generated_method="80887C79768229A316C39532A8C6419F") public void delete(int key){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    if (mValues[i] != DELETED) {      mValues[i]=DELETED;      mGarbage=true;    }  }}  }
class C{  private void removeBreakpoints(final Set<BreakpointAddress> breakpointAddressSet,final BreakpointStorage storage){  if (breakpointAddressSet.size() != 0) {    final Set<Breakpoint> breakpoints=storage.getBreakPointsByAddress(breakpointAddressSet);    storage.removeBreakpoints(breakpointAddressSet);    for (    final BreakpointManagerListener listener : listeners) {      try {        listener.breakpointsRemoved(breakpoints);      } catch (      final Exception e) {        CUtilityFunctions.logException(e);      }    }  }}  }
class C{  void transfer(ParameterizedHashMap.Entry[] newTable){  int newCapacity=newTable.length;  for (Entry<K,V> e=header.after; e != header; e=e.after) {    int index=indexFor(e.hash,newCapacity);    e.next=newTable[index];    newTable[index]=e;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:24.399 -0500",hash_original_method="66E1568E09B68AEC1E9A7CA6629E1BE4",hash_generated_method="8742976A845D6D3D7CC261BE9E725202") protected void cleanUpAllConnections(boolean tearDown,String reason){  if (DBG)   log("cleanUpAllConnections: tearDown=" + tearDown + " reason="+ reason);  for (  ApnContext apnContext : mApnContexts.values()) {    apnContext.setReason(reason);    cleanUpConnection(tearDown,apnContext);  }  stopNetStatPoll();  stopDataStallAlarm();  mRequestedApnType=Phone.APN_TYPE_DEFAULT;}  }
class C{  private void createCompressedRegionOnVm(final VM vm,final String name,final Compressor compressor){  createCompressedRegionOnVm(vm,name,compressor,false);}  }
class C{  protected Point isAreaClearR(int xPoint,int yPoint,Point point){  Debug.message("declutterdetail","Decluttering: Checking to the right...");  if (!indexes.setFromPixels(xPoint,yPoint)) {    return null;  }  if (isClear(indexes,true)) {    point.x=xPoint;    point.y=yPoint;    Debug.message("declutterdetail","*******Decluttering: found a spot");    return point;  }  return null;}  }
class C{  public final void permute(int[] array){  int l=array.length;  for (int i=0; i < l; i++) {    int index=nextInt(l - i) + i;    int temp=array[index];    array[index]=array[i];    array[i]=temp;  }}  }
class C{  public final void connect() throws RcsPermissionDeniedException {  if (!sApiCompatible) {    try {      sApiCompatible=mRcsServiceControl.isCompatible(this);      if (!sApiCompatible) {        throw new RcsPermissionDeniedException("The TAPI client version of the file upload service is not compatible with the TAPI service implementation version on this device!");      }    } catch (    RcsServiceException e) {      throw new RcsPermissionDeniedException("The compatibility of TAPI client version with the TAPI service implementation version of this device cannot be checked for the file upload service!",e);    }  }  Intent serviceIntent=new Intent(IFileUploadService.class.getName());  serviceIntent.setPackage(RcsServiceControl.RCS_STACK_PACKAGENAME);  mCtx.bindService(serviceIntent,apiConnection,0);}  }
class C{  public AccelerometerCompassProvider(SensorManager sensorManager){  super(sensorManager);  sensorList.add(sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER));  sensorList.add(sensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD));}  }
class C{  private void reflectionAppend(final Object lhs,final Object rhs,final Class<?> clazz){  final Field[] fields=clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,true);  for (int i=0; i < fields.length; i++) {    final Field f=fields[i];    if (x.String(f.getName()).in(fieldList)) {      try {        append(f.get(lhs),f.get(rhs),f.getName());      } catch (      final IllegalAccessException e) {        throw new InternalError("Unexpected IllegalAccessException");      }    }  }}  }
class C{  BuildBB(NormalMethod method){  ExceptionHandlerMap exceptions;  int[] retList;  BytecodeStream bcodes;  BasicBlock currentBB;  InstructionType lastInstrType;  int lastInstrStart;  boolean hasMagic=false;  int nextRetList=0;  numJsrs=0;  gcPointCount=1;  bcodes=method.getBytecodes();  bytelength=bcodes.length();  byteToBlockMap=new short[bytelength];  basicBlocks=new BasicBlock[2];  bbf=new BasicBlockFactory();  exceptions=method.getExceptionHandlerMap();  retList=null;  basicBlocks[BasicBlock.EXITBLOCK]=new BasicBlock(bytelength,bytelength,BasicBlock.EXITBLOCK);  currentBB=bbf.newBlock(0);  addBasicBlock(currentBB);  currentBB.setState(BasicBlock.METHODENTRY);  lastInstrType=InstructionType.NONBRANCH;  lastInstrStart=0;  if (exceptions != null) {    setupHandlerBBs(exceptions);    setupTryStartBBs(exceptions);  }  while (bcodes.hasMoreBytecodes()) {    if (lastInstrType == InstructionType.NONBRANCH) {      if (byteToBlockMap[bcodes.index()] == BasicBlock.NOTBLOCK) {        byteToBlockMap[bcodes.index()]=(short)currentBB.getBlockNumber();      } else {        currentBB.setEnd(lastInstrStart);        basicBlocks[byteToBlockMap[bcodes.index()]].addPredecessor(currentBB);        currentBB=basicBlocks[byteToBlockMap[bcodes.index()]];      }    } else {      if (lastInstrType == InstructionType.CONDITIONAL_BRANCH) {        currentBB.setEnd(lastInstrStart);        if (byteToBlockMap[bcodes.index()] == BasicBlock.NOTBLOCK) {          BasicBlock newBB=bbf.newBlock(bcodes.index());          addBasicBlock(newBB);          newBB.addPredecessor(currentBB);          currentBB=newBB;          byteToBlockMap[bcodes.index()]=(short)currentBB.getBlockNumber();        } else {          basicBlocks[byteToBlockMap[bcodes.index()]].addPredecessor(currentBB);          currentBB=basicBlocks[byteToBlockMap[bcodes.index()]];        }      } else {        if (lastInstrType == InstructionType.BRANCH) {          currentBB.setEnd(lastInstrStart);          if (byteToBlockMap[bcodes.index()] == BasicBlock.NOTBLOCK) {            BasicBlock newBB=bbf.newBlock(bcodes.index());            addBasicBlock(newBB);            currentBB=newBB;            byteToBlockMap[bcodes.index()]=(short)currentBB.getBlockNumber();          } else {            currentBB=basicBlocks[byteToBlockMap[bcodes.index()]];          }        }      }    }    lastInstrStart=bcodes.index();    lastInstrType=InstructionType.NONBRANCH;switch (bcodes.nextInstruction()) {case JBC_ifeq:case JBC_ifne:case JBC_iflt:case JBC_ifge:case JBC_ifgt:case JBC_ifle:case JBC_if_icmpeq:case JBC_if_icmpne:case JBC_if_icmplt:case JBC_if_icmpge:case JBC_if_icmpgt:case JBC_if_icmple:case JBC_if_acmpeq:case JBC_if_acmpne:case JBC_ifnull:case JBC_ifnonnull:{        lastInstrType=InstructionType.CONDITIONAL_BRANCH;        int offset=bcodes.getBranchOffset();        if (offset <= 0)         gcPointCount++;        int branchtarget=lastInstrStart + offset;        processBranchTarget(lastInstrStart,branchtarget);        break;      }case JBC_jsr:{      lastInstrType=InstructionType.BRANCH;      int offset=bcodes.getBranchOffset();      int branchtarget=lastInstrStart + offset;      processBranchTarget(lastInstrStart,branchtarget);      int jsrentryBBNum=byteToBlockMap[branchtarget];      BasicBlock bb=basicBlocks[jsrentryBBNum];      if ((bb.getState() & BasicBlock.JSRENTRY) == 0)       numJsrs++;      bb.setState(BasicBlock.JSRENTRY);      gcPointCount=gcPointCount + 1;      break;    }case JBC_jsr_w:{    lastInstrType=InstructionType.BRANCH;    int offset=bcodes.getWideBranchOffset();    int branchtarget=lastInstrStart + offset;    processBranchTarget(lastInstrStart,branchtarget);    int jsrentryBBNum=byteToBlockMap[branchtarget];    BasicBlock bb=basicBlocks[jsrentryBBNum];    if ((bb.getState() & BasicBlock.JSRENTRY) == 0)     numJsrs++;    bb.setState(BasicBlock.JSRENTRY);    gcPointCount=gcPointCount + 1;    break;  }case JBC_goto:{  lastInstrType=InstructionType.BRANCH;  int offset=bcodes.getBranchOffset();  if (offset <= 0)   gcPointCount++;  int branchtarget=lastInstrStart + offset;  processBranchTarget(lastInstrStart,branchtarget);  break;}case JBC_goto_w:{lastInstrType=InstructionType.BRANCH;int offset=bcodes.getWideBranchOffset();if (offset <= 0) gcPointCount++;int branchtarget=lastInstrStart + offset;processBranchTarget(lastInstrStart,branchtarget);break;}case JBC_tableswitch:{lastInstrType=InstructionType.BRANCH;bcodes.alignSwitch();int def=bcodes.getDefaultSwitchOffset();processBranchTarget(lastInstrStart,lastInstrStart + def);int low=bcodes.getLowSwitchValue();int high=bcodes.getHighSwitchValue();int n=high - low + 1;for (int i=0; i < n; i++) {int offset=bcodes.getTableSwitchOffset(i);processBranchTarget(lastInstrStart,lastInstrStart + offset);}bcodes.skipTableSwitchOffsets(n);break;}case JBC_lookupswitch:{lastInstrType=InstructionType.BRANCH;bcodes.alignSwitch();int def=bcodes.getDefaultSwitchOffset();int npairs=bcodes.getSwitchLength();processBranchTarget(lastInstrStart,lastInstrStart + def);for (int i=0; i < npairs; i++) {int offset=bcodes.getLookupSwitchOffset(i);processBranchTarget(lastInstrStart,lastInstrStart + offset);}bcodes.skipLookupSwitchPairs(npairs);break;}case JBC_ireturn:case JBC_lreturn:case JBC_freturn:case JBC_dreturn:case JBC_areturn:case JBC_return:{lastInstrType=InstructionType.BRANCH;basicBlocks[BasicBlock.EXITBLOCK].addPredecessor(currentBB);if (method.isSynchronized() || VM.UseEpilogueYieldPoints) {gcPointCount++;}break;}case JBC_ret:{lastInstrType=InstructionType.BRANCH;bcodes.getLocalNumber();int blocknum=currentBB.getBlockNumber();basicBlocks[blocknum].setState(BasicBlock.JSREXIT);if (retList == null) retList=new int[10];if (nextRetList >= retList.length) {int[] biggerRetList=new int[nextRetList + 10];for (int i=0; i < nextRetList; i++) {biggerRetList[i]=retList[i];}retList=biggerRetList;biggerRetList=null;}retList[nextRetList++]=blocknum;break;}case JBC_wide:{int widecode=bcodes.getWideOpcode();bcodes.getWideLocalNumber();if (widecode == JBC_ret) {lastInstrType=InstructionType.BRANCH;int blocknum=currentBB.getBlockNumber();basicBlocks[blocknum].setState(BasicBlock.JSREXIT);if (retList == null) retList=new int[10];if (nextRetList >= retList.length) {int[] biggerRetList=new int[nextRetList + 10];for (int i=0; i < nextRetList; i++) {biggerRetList[i]=retList[i];}retList=biggerRetList;biggerRetList=null;}retList[nextRetList++]=blocknum;} else if (widecode == JBC_iinc) {bcodes.getWideIncrement();} else {}break;}case JBC_athrow:{lastInstrType=InstructionType.BRANCH;processAthrow(exceptions,lastInstrStart);gcPointCount++;break;}case JBC_invokestatic:case JBC_invokevirtual:{if (VM.VerifyAssertions && !hasMagic) {MethodReference methodRef=bcodes.getMethodReference();hasMagic=methodRef.getType().isMagicType();byteToBlockMap[lastInstrStart]=(short)currentBB.getBlockNumber();gcPointCount=gcPointCount + 1;break;}}case JBC_aaload:case JBC_iaload:case JBC_faload:case JBC_baload:case JBC_caload:case JBC_saload:case JBC_laload:case JBC_daload:case JBC_lastore:case JBC_dastore:case JBC_iastore:case JBC_fastore:case JBC_aastore:case JBC_bastore:case JBC_castore:case JBC_sastore:case JBC_putfield:case JBC_getfield:case JBC_getstatic:case JBC_putstatic:case JBC_irem:case JBC_idiv:case JBC_lrem:case JBC_ldiv:case JBC_invokespecial:case JBC_invokeinterface:case JBC_instanceof:case JBC_checkcast:case JBC_monitorenter:case JBC_monitorexit:case JBC_new:case JBC_newarray:case JBC_anewarray:case JBC_multianewarray:{bcodes.skipInstruction();byteToBlockMap[lastInstrStart]=(short)currentBB.getBlockNumber();gcPointCount=gcPointCount + 1;break;}default :{bcodes.skipInstruction();byteToBlockMap[lastInstrStart]=(short)currentBB.getBlockNumber();break;}}}currentBB.setEnd(lastInstrStart);if (exceptions != null) {processExceptionHandlers(exceptions);markTryBlocks(exceptions);}if (retList != null) {processRetList(retList,nextRetList);}if (VM.VerifyAssertions && !VM.BuildForHarmony) VM._assert(VM.runningVM || numJsrs == 0 || !hasMagic);}  }
class C{  public HugLife(int N){  g=new Grid(N);}  }
class C{  public static boolean isVectorBasedDataFrame(MatrixMetadata matrixMetadata){  return (matrixMetadata != null && matrixMetadata.getMatrixFormat() != null && matrixMetadata.getMatrixFormat().isVectorBased());}  }
class C{  private void parsingError(String message){  System.err.println(message);  String o="Command Line Options:\n" + "  -i <file or directory name> : the name of a directory or file containing the input.\n" + "  -o <file or directory name>: the output directory or file where the output will be stored. For \n"+ "     directories files will share the same name as the input file, so this directory must be different"+ "     from the input directory.\n"+ "  -c <file name> : the name of the configuration file.\n"+ "  -t <number of threads> : Allows users to specify the number of threads to use, by default there will be one"+ "     thread for every core on the machine.\n";  System.err.println(o);  System.exit(-1);}  }
class C{  public boolean isDefaultRouteSet(){  return mDefaultRouteSet.get();}  }
class C{  public void flushing(int tenant){  starting(Operation.FLUSH,tenant);}  }
class C{  public static void UF8(double[] x,double[] f,int nx){  int count1=0;  int count2=0;  int count3=0;  double sum1=0.0;  double sum2=0.0;  double sum3=0.0;  double yj;  for (int j=3; j <= nx; j++) {    yj=x[j - 1] - 2.0 * x[1] * Math.sin(2.0 * PI * x[0] + j * PI / nx);    if (j % 3 == 1) {      sum1+=yj * yj;      count1++;    } else     if (j % 3 == 2) {      sum2+=yj * yj;      count2++;    } else {      sum3+=yj * yj;      count3++;    }  }  f[0]=Math.cos(0.5 * PI * x[0]) * Math.cos(0.5 * PI * x[1]) + 2.0 * sum1 / (double)count1;  f[1]=Math.cos(0.5 * PI * x[0]) * Math.sin(0.5 * PI * x[1]) + 2.0 * sum2 / (double)count2;  f[2]=Math.sin(0.5 * PI * x[0]) + 2.0 * sum3 / (double)count3;}  }
class C{  @Action(value="/domain/commonTradeLicenseAjax-populateDivisions") public String populateDivisions(){  try {    final Boundary boundary=boundaryService.getBoundaryById(Long.valueOf(zoneId));    final String cityName=licenseUtils.getAllCity().get(0).getName();    if (!boundary.getName().equals(cityName))     divisionList=boundaryService.getChildBoundariesByBoundaryId(Long.valueOf(zoneId));  } catch (  final Exception e) {    LOGGER.error("populateDivisions() - Error while loading divisions ." + e.getMessage());    addFieldError("divisions","Unable to load division information");    throw new ApplicationRuntimeException("Unable to load division information",e);  }  return "ward";}  }
class C{  public static void limpar(TextField... no){  for (  TextField campo : no) {    campo.setText("");  }}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  void addBridge(DiagnosticPosition pos,MethodSymbol meth,MethodSymbol impl,ClassSymbol origin,boolean hypothetical,ListBuffer<JCTree> bridges){  make.at(pos);  Type origType=types.memberType(origin.type,meth);  Type origErasure=erasure(origType);  Type bridgeType=meth.erasure(types);  long flags=impl.flags() & AccessFlags | SYNTHETIC | BRIDGE | (origin.isInterface() ? DEFAULT : 0);  if (hypothetical)   flags|=HYPOTHETICAL;  MethodSymbol bridge=new MethodSymbol(flags,meth.name,bridgeType,origin);  bridge.params=createBridgeParams(impl,bridge,bridgeType);  bridge.setAttributes(impl);  if (!hypothetical) {    JCMethodDecl md=make.MethodDef(bridge,null);    JCExpression receiver=(impl.owner == origin) ? make.This(origin.erasure(types)) : make.Super(types.supertype(origin.type).tsym.erasure(types),origin);    Type calltype=erasure(impl.type.getReturnType());    JCExpression call=make.Apply(null,make.Select(receiver,impl).setType(calltype),translateArgs(make.Idents(md.params),origErasure.getParameterTypes(),null)).setType(calltype);    JCStatement stat=(origErasure.getReturnType().hasTag(VOID)) ? make.Exec(call) : make.Return(coerce(call,bridgeType.getReturnType()));    md.body=make.Block(0,List.of(stat));    bridges.append(md);  }  origin.members().enter(bridge);  overridden.put(bridge,meth);}  }
class C{  @Override public boolean ready() throws IOException {  return this.reader.ready();}  }
class C{  @Override public void build() throws ProcessorError, IOException {  end();  TypeSpec cls=mBuilder.build();  JavaFile javaFile=JavaFile.builder(getClassName().packageName(),cls).build();  javaFile.writeTo(ProcessorUtils.getFiler());  if (LOG_SUCCESS) {    System.out.println(String.format("Class <%s> successfully generated.",getFullName()));  }}  }
class C{  public static com.linkedin.camus.example.records.DummyLog.Builder newBuilder(com.linkedin.camus.example.records.DummyLog other){  return new com.linkedin.camus.example.records.DummyLog.Builder(other);}  }
class C{  public hr addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public static String replaceIgnoreCase(String s,String[] sub,String[] with){  if ((sub.length != with.length) || (sub.length == 0)) {    return s;  }  int start=0;  StringBuilder buf=new StringBuilder(s.length());  while (true) {    int[] res=indexOfIgnoreCase(s,sub,start);    if (res == null) {      break;    }    int end=res[1];    buf.append(s.substring(start,end));    buf.append(with[res[0]]);    start=end + sub[0].length();  }  buf.append(s.substring(start));  return buf.toString();}  }
class C{  public void cancelChronometer(){  chronometer.stop();  chronometer.setText(Html.fromHtml("0<small>.00</small>"));  isRunning=false;  isCanceled=true;  isReady=false;  inspectionText.setVisibility(View.GONE);  countdown.cancel();  plusTwoCountdown.cancel();  countingDown=false;  showToolbar();}  }
class C{  public void testPercentage(){  performTest(0.5,4);}  }
class C{  @Override public void addStatementEventListener(StatementEventListener listener){  throw new UnsupportedOperationException();}  }
class C{  public void testReadXmlLangNewStyle() throws Exception {  Properties result=xmlToProperties("-");  assertNotNull(result);  assertTrue(!result.isEmpty());  assertEquals(1,result.size());  assertEquals("Key Value",result.getProperty("PropertyKey"));}  }
class C{  public NullnessAssumptionAnalysis(UnitGraph graph){  super(graph);  doAnalysis();}  }
class C{  public Surface transform(float m00,float m01,float m10,float m11,float tx,float ty){  AffineTransform top=tx();  Transforms.multiply(top,m00,m01,m10,m11,tx,ty,top);  return this;}  }
class C{  public HttpServletRequest preExecute(HttpServletRequest request){  if (logger.isDebugLoggingEnabled()) {    logger.logDebug("preExecute " + this + " URI: "+ request.getRequestURI());  }  return request;}  }
class C{  public static boolean isInt(ClassNode type){  return int_TYPE == type;}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.ARGUMENT_PAIR;}  }
class C{  protected SelectedDenseObjectMatrix1D(Object[] elements,int[] offsets){  this(offsets.length,elements,0,1,offsets,0);}  }
class C{  public void hide(){  if (this.parent.isDisposed()) {    SWT.error(SWT.ERROR_WIDGET_DISPOSED);  }  if (this.panel == null || this.panel.isDisposed()) {    return;  }  this.panel.dispose();}  }
class C{  public void addURL(URL url){  super.addURL(url);}  }
class C{  @SuppressWarnings("deprecation") public static LocalDate fromDateFields(Date date){  if (date == null) {    throw new IllegalArgumentException("The date must not be null");  }  return new LocalDate(date.getYear() + 1900,date.getMonth() + 1,date.getDate());}  }
class C{  public Diagnostic withRandomData(){  this.setText(SampleDataService.getRandomComment());  this.setDate(SampleDataService.getRandomDate());  return this;}  }
class C{  public static void append(CharSequence from,File to,Charset charset) throws IOException {  write(from,to,charset,true);}  }
class C{  public void formInitialDelaunay(){  computeBoundingBox();  subdiv=new QuadEdgeSubdivision(computeAreaEnv,tolerance);  subdiv.setLocator(new LastFoundQuadEdgeLocator(subdiv));  incDel=new IncrementalDelaunayTriangulator(subdiv);  insertSites(initialVertices);}  }
class C{  public void testSequenceEventAbsentCommand() throws Throwable {  ClientSequencer sequencer=new ClientSequencer(new ClientSessionState(UUID.randomUUID()));  PublishRequest request1=PublishRequest.builder().withSession(1).withEventIndex(2).withPreviousIndex(0).build();  PublishRequest request2=PublishRequest.builder().withSession(1).withEventIndex(3).withPreviousIndex(2).build();  AtomicInteger run=new AtomicInteger();  sequencer.sequenceEvent(request1,null);  sequencer.sequenceEvent(request2,null);  assertEquals(run.get(),2);}  }
class C{  public static String generateNativeGuid(DbClient dbClient,Snapshot snapshot) throws IOException {  FileShare fs=dbClient.queryObject(FileShare.class,snapshot.getParent());  StorageSystem device=dbClient.queryObject(StorageSystem.class,fs.getStorageDevice());  return String.format("%s+%s+" + SNAPSHOT + "+%s",_deviceTypeMap.get(device.getSystemType()),device.getSerialNumber(),snapshot.getNativeId());}  }
class C{  @Inline private void copyByLocation(byte srcType,short src,byte destType,short dest){  if (src == dest && srcType == destType) {    return;  }  final boolean srcIsRegister=isRegister(src);  final boolean destIsRegister=isRegister(dest);  if (srcType == destType) {    if (srcIsRegister) {      if (destIsRegister) {        copyRegToReg(srcType,asRegister(srcType,src),asRegister(destType,dest));      } else {        copyRegToMem(srcType,asRegister(srcType,src),locationToOffset(dest));      }    } else {      if (destIsRegister) {        copyMemToReg(srcType,locationToOffset(src),asRegister(destType,dest));      } else {        copyMemToMem(srcType,locationToOffset(src),locationToOffset(dest));      }    }  } else {    if ((srcType == DOUBLE_TYPE) && (destType == LONG_TYPE) && srcIsRegister&& !destIsRegister) {      asm.emitSTFD(FPR.lookup(src),locationToOffset(dest) - BYTES_IN_DOUBLE,FP);    } else     if ((srcType == LONG_TYPE) && (destType == DOUBLE_TYPE) && destIsRegister&& !srcIsRegister) {      asm.emitLFD(FPR.lookup(dest),locationToOffset(src) - BYTES_IN_LONG,FP);    } else     if ((srcType == INT_TYPE) && (destType == LONGHALF_TYPE) && srcIsRegister&& VM.BuildFor32Addr) {      if (destIsRegister) {        asm.emitMR(GPR.lookup(dest),GPR.lookup(src));      } else {        asm.emitSTW(GPR.lookup(src),locationToOffset(dest) - BYTES_IN_LONG,FP);      }    } else     if ((srcType == LONGHALF_TYPE) && (destType == INT_TYPE) && !srcIsRegister&& VM.BuildFor32Addr) {      if (destIsRegister) {        asm.emitLWZ(GPR.lookup(dest).nextGPR(),locationToOffset(src) - BYTES_IN_INT,FP);      } else {        asm.emitLWZ(GPR.R0,locationToOffset(src) - BYTES_IN_INT,FP);        asm.emitSTW(GPR.R0,locationToOffset(dest) - BYTES_IN_INT,FP);      }    } else     if (VM.VerifyAssertions) {      VM.sysWrite("copyByLocation error. src=");      VM.sysWrite(src);      VM.sysWrite(", srcType=");      VM.sysWrite(srcType);      VM.sysWrite(", dest=");      VM.sysWrite(dest);      VM.sysWrite(", destType=");      VM.sysWrite(destType);      VM.sysWriteln();      VM._assert(NOT_REACHED);    }  }}  }
class C{  public void clearSections(){  sections.clear();  fireUpdateEvent(SECTION_EVENT);}  }
class C{  public boolean remove(final URI uri){  return this.uris.remove(uri);}  }
class C{  public AttributeTable add(ASN1ObjectIdentifier attrType,ASN1Encodable attrValue){  AttributeTable newTable=new AttributeTable(attributes);  newTable.addAttribute(attrType,new Attribute(attrType,new DERSet(attrValue)));  return newTable;}  }
class C{  @Override public void purchaseProduct(CommonProductDetails product,RequestPurchaseProductsHandler handler){  if (iapHelper != null) {    iapHelper.purchaseProduct(product,handler);  }}  }
class C{  public void testUnsizedDoublesCount(){  LongAdder counter=new LongAdder();  ThreadLocalRandom r=ThreadLocalRandom.current();  long size=100;  r.doubles().limit(size).parallel().forEach(null);  assertEquals(size,counter.sum());}  }
class C{  public boolean isDependentOnCurrentScope(ExecutionContext context){  return context.isDependentOnCurrentScope(this);}  }
class C{  public DataServer(Map<String,String> dsProperties){  set(dsProperties);}  }
class C{  public static void importInstructions(final SQLProvider provider,final int rawModuleId,final int moduleId) throws SQLException, CouldntLoadDataException {  final String architecture=getArchitecture(provider.getConnection(),rawModuleId);  final int userId=CUserManager.get(provider).getCurrentActiveUser().getUserId();  final String query="WITH comments_to_id(id, address, comment) AS " + " ( " + "   SELECT nextval('bn_comments_id_seq'::regclass), address, comment "+ "   FROM ex_" + rawModuleId + "_address_comments "+ " ), comments_table AS ( "+ "   INSERT INTO "+ CTableNames.COMMENTS_TABLE+ " (id, parent_id, user_id, comment_text) "+ "   SELECT id, null, "+ userId+ ", comment "+ "   FROM comments_to_id "+ " ) "+ "   INSERT INTO "+ CTableNames.INSTRUCTIONS_TABLE+ " (module_id, address, mnemonic, data, native, architecture, comment_id) "+ "   SELECT "+ moduleId+ ", isn.address, mnemonic, data, true, '"+ architecture+ "', com.id "+ "   FROM ex_"+ rawModuleId+ "_instructions AS isn "+ "   LEFT JOIN comments_to_id AS com ON com.address = isn.address; ";  provider.getConnection().executeUpdate(query,true);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.TRACE_ITEM___TRACE_ENTITY_1:    return ((InternalEList<?>)getTraceEntity_1()).basicRemove(otherEnd,msgs);case UmplePackage.TRACE_ITEM___PRE_OR_POST_CONDITION_1:  return ((InternalEList<?>)getPreOrPostCondition_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static void downto(double self,Number to,@ClosureParams(FirstParam.class) Closure closure){  double to1=to.doubleValue();  if (self >= to1) {    for (double i=self; i >= to1; i--) {      closure.call(i);    }  } else   throw new GroovyRuntimeException("The argument (" + to + ") to downto() cannot be greater than the value ("+ self+ ") it's called on.");}  }
class C{  public static String printStackTrace(Throwable t){  return t == null ? PcConstants.NA : ExceptionUtils.getStackTrace(t);}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (mv != null) {    return mv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  public static List<Triple> orientCollidersUsingSepsets(SepsetMap set,IKnowledge knowledge,Graph graph,boolean verbose){  TetradLogger.getInstance().log("details","Starting Collider Orientation:");  List<Triple> colliders=new ArrayList<>();  List<Node> nodes=graph.getNodes();  for (  Node b : nodes) {    List<Node> adjacentNodes=graph.getAdjacentNodes(b);    if (adjacentNodes.size() < 2) {      continue;    }    ChoiceGenerator cg=new ChoiceGenerator(adjacentNodes.size(),2);    int[] combination;    while ((combination=cg.next()) != null) {      Node a=adjacentNodes.get(combination[0]);      Node c=adjacentNodes.get(combination[1]);      if (graph.isAdjacentTo(a,c)) {        continue;      }      List<Node> sepset=set.get(a,c);      if (sepset != null && !sepset.contains(b) && isArrowpointAllowed(a,b,knowledge) && isArrowpointAllowed(c,b,knowledge)) {        if (verbose) {          System.out.println("Collider orientation <" + a + ", "+ b+ ", "+ c+ "> sepset = "+ sepset);        }        graph.setEndpoint(a,b,Endpoint.ARROW);        graph.setEndpoint(c,b,Endpoint.ARROW);        colliders.add(new Triple(a,b,c));        TetradLogger.getInstance().log("colliderOrientations",SearchLogUtils.colliderOrientedMsg(a,b,c,sepset));      }    }  }  TetradLogger.getInstance().log("details","Finishing Collider Orientation.");  return colliders;}  }
class C{  public DoubleMatrix1D sample(int size,double value,double nonZeroFraction){  double epsilon=1e-09;  if (nonZeroFraction < 0 - epsilon || nonZeroFraction > 1 + epsilon)   throw new IllegalArgumentException();  if (nonZeroFraction < 0)   nonZeroFraction=0;  if (nonZeroFraction > 1)   nonZeroFraction=1;  DoubleMatrix1D matrix=make(size);  int n=(int)Math.round(size * nonZeroFraction);  if (n == 0)   return matrix;  cern.jet.random.sampling.RandomSamplingAssistant sampler=new cern.jet.random.sampling.RandomSamplingAssistant(n,size,new cern.jet.random.engine.MersenneTwister());  for (int i=size; --i >= 0; ) {    if (sampler.sampleNextElement()) {      matrix.set(i,value);    }  }  return matrix;}  }
class C{  protected void bind(int pos){  this.position=pos;  assert isBound();}  }
class C{  public static Fragment findFragmentByPosition(FragmentPagerAdapter fragmentPagerAdapter,FragmentManager fragmentManager,int viewPagerId,int position){  return fragmentManager.findFragmentByTag(makeFragmentName(viewPagerId,fragmentPagerAdapter.getItemId(position)));}  }
class C{  public boolean onOverrideUrlLoading(String url){  return false;}  }
class C{  public void flushBits() throws IOException {  if (bitPos == 0) {    return;  }  out.write(bitBuf);  bitBuf=0;  bitPos=0;  bytesWritten++;}  }
class C{  public DatabaseConnectionDialog(Frame parentFrame,String url,String uname){  this(parentFrame,url,uname,true);}  }
class C{  public UrlValidator(){  this(null);}  }
class C{  public final boolean isDestroyed(){  return _lifecycle.isDestroyed();}  }
class C{  @Override protected boolean hasFab(){  return false;}  }
class C{  private void updateColorValues(){  DimensionConfigData dimensionConfigData=engine.getPlotInstance().getPlotData().getDimensionConfigData(engine.getPlotInstance().getMasterPlotConfiguration().getDefaultDimensionConfigs().get(PlotDimension.COLOR));  if (dimensionConfigData != null && dimensionConfigData.getColorProvider() instanceof ContinuousColorProvider) {    ContinuousColorProvider colProv=(ContinuousColorProvider)dimensionConfigData.getColorProvider();    colorMinValueField.setText(String.valueOf(colProv.getMinValue()));    colorMaxValueField.setText(String.valueOf(colProv.getMaxValue()));    colorMinValueField.setEnabled(true);    colorMaxValueField.setEnabled(true);    restoreColorButton.setEnabled(true);  } else {    colorMinValueField.setText("0");    colorMaxValueField.setText("0");    colorMinValueField.setEnabled(false);    colorMaxValueField.setEnabled(false);    restoreColorButton.setEnabled(false);  }}  }
class C{  private void buildGui(){  cp.addCenter(ccp);  buildMenuBar();  buildToolBar();  buildMultiPage();  buildStatusBar();}  }
class C{  @Override protected void drawGuiContainerBackgroundLayer(float partialTicks,int mouseX,int mouseY){  GlStateManager.color(1.0f,1.0f,1.0f,1.0f);  this.mc.getTextureManager().bindTexture(CHEST_GUI_TEXTURE);  final int x=(this.width - this.xSize) / 2;  final int y=(this.height - this.ySize) / 2;  this.drawTexturedModalRect(x,y,0,0,this.xSize,this.numRows * 18 + 17);  this.drawTexturedModalRect(x,y + this.numRows * 18 + 17,0,126,this.xSize,96);}  }
class C{  private Logic makeCopulaVerb(final List<ResolvedDependency> deps,final List<Variable> vars,final Variable head,final CCGandSRLparse parse){  Logic statement;  if (deps.get(1) != null && deps.get(1).getPreposition() != Preposition.NONE) {    statement=new AtomicSentence(getPrepositionPredicate(deps,1,parse),vars.get(1),vars.get(0),head);  } else {    if (deps.get(0) != null && deps.get(0).getPreposition() != Preposition.NONE) {      statement=new AtomicSentence(getPrepositionPredicate(deps,0,parse),vars.get(0),vars.get(1),head);    } else {      SemanticType type=SemanticType.T;      type=SemanticType.make(head.getType(),type);      type=SemanticType.make(vars.get(1).getType(),type);      type=SemanticType.make(vars.get(0).getType(),type);      Constant pred=new Constant("eq",type);      statement=new AtomicSentence(pred,vars.get(0),vars.get(1),head);    }  }  return LambdaExpression.make(statement,vars);}  }
class C{  public InstanceComparator(){  this(true);}  }
class C{  public Categories(String href){  this.href=href;}  }
class C{  public RolloutRendererData(final String name,final String status){  this.name=name;  this.status=status;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ANONYMOUS_ACTION_2__MORE_CODE_1:    return ((InternalEList<?>)getMoreCode_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public static boolean isValidIANAEncoding(String ianaEncoding){  if (ianaEncoding != null) {    int length=ianaEncoding.length();    if (length > 0) {      char c=ianaEncoding.charAt(0);      if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) {        for (int i=1; i < length; i++) {          c=ianaEncoding.charAt(i);          if ((c < 'A' || c > 'Z') && (c < 'a' || c > 'z') && (c < '0' || c > '9')&& c != '.' && c != '_' && c != '-') {            return false;          }        }        return true;      }    }  }  return false;}  }
class C{  public void testFilterContinuousMode() throws Exception {  processFilterTest(DeploymentMode.CONTINUOUS);}  }
class C{  public static void overrideViewAttribs(final View v){  if (v == null)   return;  final int bg=ColorTheme.instance().getColor(ColorTheme.GENERAL_BACKGROUND);  Object tag=v.getTag();  final boolean excludedItems=v instanceof Button || ((v instanceof EditText) && !(v instanceof MoveListView)) || v instanceof ImageButton|| "title".equals(tag);  if (!excludedItems) {    int c=bg;    if ("thinking".equals(tag)) {      float[] hsv=new float[3];      Color.colorToHSV(c,hsv);      hsv[2]+=hsv[2] > 0.5f ? -0.1f : 0.1f;      c=Color.HSVToColor(Color.alpha(c),hsv);    }    v.setBackgroundColor(c);  }  if (v instanceof ListView)   ((ListView)v).setCacheColorHint(bg);  if (v instanceof ViewGroup) {    ViewGroup vg=(ViewGroup)v;    for (int i=0; i < vg.getChildCount(); i++) {      View child=vg.getChildAt(i);      overrideViewAttribs(child);    }  } else   if (!excludedItems && (v instanceof TextView)) {    int fg=ColorTheme.instance().getColor(ColorTheme.FONT_FOREGROUND);    ((TextView)v).setTextColor(fg);  } else   if (!excludedItems && (v instanceof MoveListView)) {    int fg=ColorTheme.instance().getColor(ColorTheme.FONT_FOREGROUND);    ((MoveListView)v).setTextColor(fg);  }}  }
class C{  protected boolean addMainQuery(BooleanQuery query,SolrParams solrParams) throws SyntaxError {  Map<String,Float> phraseFields=SolrPluginUtils.parseFieldBoosts(solrParams.getParams(DisMaxParams.PF));  float tiebreaker=solrParams.getFloat(DisMaxParams.TIE,0.0f);  SolrPluginUtils.DisjunctionMaxQueryParser up=getParser(queryFields,DisMaxParams.QS,solrParams,tiebreaker);  SolrPluginUtils.DisjunctionMaxQueryParser pp=getParser(phraseFields,DisMaxParams.PS,solrParams,tiebreaker);  parsedUserQuery=null;  String userQuery=getString();  altUserQuery=null;  if (userQuery == null || userQuery.trim().length() < 1) {    altUserQuery=getAlternateUserQuery(solrParams);    if (altUserQuery == null)     return false;    query.add(altUserQuery,BooleanClause.Occur.MUST);  } else {    userQuery=SolrPluginUtils.partialEscape(SolrPluginUtils.stripUnbalancedQuotes(userQuery)).toString();    userQuery=SolrPluginUtils.stripIllegalOperators(userQuery).toString();    parsedUserQuery=getUserQuery(userQuery,up,solrParams);    query.add(parsedUserQuery,BooleanClause.Occur.MUST);    Query phrase=getPhraseQuery(userQuery,pp);    if (null != phrase) {      query.add(phrase,BooleanClause.Occur.SHOULD);    }  }  return true;}  }
class C{  public GridTab(GridTabVO vo,GridWindow w){  this(vo,w,false);}  }
class C{  public static ContainerDatacenter createDatacenter(String name,Class<? extends ContainerDatacenter> datacenterClass,List<ContainerHost> hostList,ContainerVmAllocationPolicy vmAllocationPolicy,ContainerAllocationPolicy containerAllocationPolicy,String experimentName,double schedulingInterval,String logAddress,double VMStartupDelay,double ContainerStartupDelay) throws Exception {  String arch="x86";  String os="Linux";  String vmm="Xen";  double time_zone=10.0D;  double cost=3.0D;  double costPerMem=0.05D;  double costPerStorage=0.001D;  double costPerBw=0.0D;  ContainerDatacenterCharacteristics characteristics=new ContainerDatacenterCharacteristics(arch,os,vmm,hostList,time_zone,cost,costPerMem,costPerStorage,costPerBw);  ContainerDatacenter datacenter=new PowerContainerDatacenterCM(name,characteristics,vmAllocationPolicy,containerAllocationPolicy,new LinkedList<Storage>(),schedulingInterval,experimentName,logAddress,VMStartupDelay,ContainerStartupDelay);  return datacenter;}  }
class C{  public Log truncate(long index){  assertIsOpen();  if (index > 0)   assertValidIndex(index);  Assert.index(index >= segments.commitIndex(),"cannot truncate committed entries");  if (lastIndex() == index)   return this;  for (  Segment segment : segments.reverseSegments()) {    if (segment.validIndex(index)) {      segment.truncate(index);      break;    } else     if (segment.index() > index) {      segments.removeSegment(segment);    }  }  entryBuffer.clear();  return this;}  }
class C{  public void addOcspResponses(List<OCSPResp> extraOcspResponses){  this.ocspResponses.addAll(extraOcspResponses);}  }
class C{  protected void onPrepareRequest(HttpUriRequest request) throws IOException {}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    target.cut();  }}  }
class C{  protected void addEntity(EntityCollection entities,Shape area,XYDataset dataset,int series,int item,double entityX,double entityY){  if (!getItemCreateEntity(series,item)) {    return;  }  Shape hotspot=area;  if (hotspot == null) {    double r=getDefaultEntityRadius();    double w=r * 2;    if (getPlot().getOrientation() == PlotOrientation.VERTICAL) {      hotspot=new Ellipse2D.Double(entityX - r,entityY - r,w,w);    } else {      hotspot=new Ellipse2D.Double(entityY - r,entityX - r,w,w);    }  }  String tip=null;  XYToolTipGenerator generator=getToolTipGenerator(series,item);  if (generator != null) {    tip=generator.generateToolTip(dataset,series,item);  }  String url=null;  if (getURLGenerator() != null) {    url=getURLGenerator().generateURL(dataset,series,item);  }  XYItemEntity entity=new XYItemEntity(hotspot,dataset,series,item,tip,url);  entities.add(entity);}  }
class C{  public void closeImmediately(){  try {    closeStore(false);  } catch (  Exception e) {    if (backgroundExceptionHandler != null) {      backgroundExceptionHandler.uncaughtException(null,e);    }  }}  }
class C{  public void deleteRow(int selectedRow){  String name=(String)this.getValueAt(selectedRow,0);  for (  final CodeAttribute element : getData().getCodeAttribute()) {    if (CoreUtils.nullSafeComparator(element.getName(),name) == 0) {      getData().getCodeAttribute().remove(element);      getData().setDirty(true);      final Vector<Object> currRow=rows.get(selectedRow);      rows.remove(currRow);      this.fireTableRowsDeleted(selectedRow,selectedRow);      break;    }  }}  }
class C{  public boolean hasCrawlType(){  return getCrawlType() != null;}  }
class C{  private Segment valueSegment(Attribute attribute,String oldValue){  final Element owner=attribute.getElement();  final byte[] name=attribute.getName().getBytes();  final byte[] value=oldValue.getBytes();  final int attrLeft=indexOfAttributeName(xml,name,owner.start.left + owner.getName().length());  final int valueLeft=indexOf(xml,value,attrLeft + name.length);  return new Segment(valueLeft,valueLeft + value.length - 1);}  }
class C{  public void decompress(byte[] dest,byte[] src,int destoffs,int srcoffs,int len){  for (int i=0; i < len; i++) {    if (srcoffs >= src.length)     return;    int d=src[srcoffs++];    d&=0xFF;    for (int j=0; j < 8; j++) {      boolean curbit=((d & 1) != 0);      boolean lastbit=this.lastbit;      ctx_update(curbit);      d>>=1;      int blevel=(curbit == lastbit ? level : ((flastlevel + level) >> 1));      flastlevel=level;      lpflevel+=((LPF_STRENGTH * (blevel - lpflevel) + 0x80) >> 8);      dest[destoffs++]=(byte)(lpflevel);    }  }}  }
class C{  public static void warn(Object message){  RuntimeSingleton.warn(message);}  }
class C{  public static DeltaCounter newDeltaCounter(DeltaCount count){  if (count == null)   return new StateBasedPNDeltaCounter();  return new StateBasedPNDeltaCounter(count.getIncrement(),count.getDecrement(),count.getChanges().getIncrement(),count.getChanges().getDecrement());}  }
class C{  public static DialogOption showYesNoOtherMessage(final String message,final IntSetting defaultValue,String otherOptions){  return MessageService.instance().showYesNoOtherMessage(message,defaultValue,otherOptions);}  }
class C{  public void testSetObject_int_Object_int_int() throws SQLException {  PreparedStatement ps=null;  try {    String query="insert into type (IntVal) values (?);";    ps=conn.prepareStatement(query);    Statement st=null;    try {      ps.setObject(1,Integer.MAX_VALUE,Types.INTEGER,Integer.MAX_VALUE);      ps.execute();      st=conn.createStatement();      st.execute("select * from type where IntVal=" + Integer.MAX_VALUE);      ResultSet rs=st.getResultSet();      assertEquals(1,getCount(rs));    }  finally {      try {        st.close();      } catch (      Exception ee) {      }    }    query="insert into type (LongVal) values (?);";    ps=conn.prepareStatement(query);    try {      ps.setObject(1,"test text",Types.CHAR,Integer.MIN_VALUE);      ps.execute();      st=conn.createStatement();      st.execute("select * from type where LongVal='test text';");      ResultSet rs=st.getResultSet();      assertEquals(1,getCount(rs));    }  finally {      try {        st.close();      } catch (      Exception ee) {      }    }    query="insert into type (DecVal) values (?);";    ps=conn.prepareStatement(query);    BigDecimal bd2=new BigDecimal("12.21");    ps.setObject(1,bd2,Types.DECIMAL,2);    ps.execute();    query="insert into type (dateVal) values (?);";    ps=conn.prepareStatement(query);    Date d=new Date(123456789);    try {      ps.setObject(1,d,Types.DATE,-1);      ps.execute();      st=conn.createStatement();      st.execute("select * from type where dateVal='" + d.getTime() + "';");      ResultSet rs=st.getResultSet();      assertEquals(1,getCount(rs));    }  finally {      try {        st.close();      } catch (      Exception ee) {      }    }    query="insert into type(BlobVal) values (?);";    ps=conn.prepareStatement(query);    try {      ps.setObject(1,"",Types.BLOB,0);      ps.execute();    }  finally {      try {        st.close();      } catch (      Exception ee) {      }    }  }  finally {    try {      ps.close();    } catch (    Exception ee) {    }  }  try {    ps.setObject(1,"test text",Types.CHAR,Integer.MIN_VALUE);    fail("Exception not thrown");  } catch (  SQLException e) {  }}  }
class C{  public APIRequest(HttpServletRequest request,MultivaluedMap<String,String> parameters){  super(request);  this.parameters=new HashMap<String,String[]>(parameters.size());  for (  Map.Entry<String,List<String>> entry : parameters.entrySet()) {    String name=entry.getKey();    List<String> values=entry.getValue();    this.parameters.put(name,values.toArray(new String[values.size()]));  }}  }
class C{  public Element store(){  Element e=new Element(Xml.TRACK);  e.setAttribute(Xml.ID,getId());  e.setAttribute(Xml.NAME,getName());  e.setAttribute(Xml.LOC_TYPE,getTrackType());  e.setAttribute(Xml.DIR,Integer.toString(getTrainDirections()));  e.setAttribute(Xml.LENGTH,Integer.toString(getLength()));  e.setAttribute(Xml.MOVES,Integer.toString(getMoves() - getDropRS()));  e.setAttribute(Xml.BLOCKING_ORDER,Integer.toString(getBlockingOrder()));  String[] types=getTypeNames();  if (Control.backwardCompatible) {    StringBuffer buf=new StringBuffer();    for (    String type : types) {      if (CarTypes.instance().containsName(type) || EngineTypes.instance().containsName(type)) {        buf.append(type + "%%");      }    }    e.setAttribute(Xml.CAR_TYPES,buf.toString());  }  Element eTypes=new Element(Xml.TYPES);  for (  String type : types) {    if (EngineTypes.instance().containsName(type)) {      Element eType=new Element(Xml.LOCO_TYPE);      eType.setAttribute(Xml.NAME,type);      eTypes.addContent(eType);    } else     if (CarTypes.instance().containsName(type)) {      Element eType=new Element(Xml.CAR_TYPE);      eType.setAttribute(Xml.NAME,type);      eTypes.addContent(eType);    }  }  e.addContent(eTypes);  if (Control.backwardCompatible) {    e.setAttribute(Xml.CAR_ROAD_OPERATION,getRoadOption());  }  if (!getRoadOption().equals(ALL_ROADS)) {    e.setAttribute(Xml.CAR_ROAD_OPTION,getRoadOption());    String[] roads=getRoadNames();    if (Control.backwardCompatible) {      StringBuffer buf=new StringBuffer();      for (      String road : roads) {        buf.append(road + "%%");      }      e.setAttribute(Xml.CAR_ROADS,buf.toString());    }    Element eRoads=new Element(Xml.CAR_ROADS);    for (    String road : roads) {      Element eRoad=new Element(Xml.CAR_ROAD);      eRoad.setAttribute(Xml.NAME,road);      eRoads.addContent(eRoad);    }    e.addContent(eRoads);  }  if (!getLoadOption().equals(ALL_LOADS)) {    e.setAttribute(Xml.CAR_LOAD_OPTION,getLoadOption());    String[] loads=getLoadNames();    if (Control.backwardCompatible) {      StringBuffer buf=new StringBuffer();      for (      String load : loads) {        buf.append(load + "%%");      }      e.setAttribute(Xml.CAR_LOADS,buf.toString());    }    Element eLoads=new Element(Xml.CAR_LOADS);    for (    String load : loads) {      Element eLoad=new Element(Xml.CAR_LOAD);      eLoad.setAttribute(Xml.NAME,load);      eLoads.addContent(eLoad);    }    e.addContent(eLoads);  }  if (!getShipLoadOption().equals(ALL_LOADS)) {    e.setAttribute(Xml.CAR_SHIP_LOAD_OPTION,getShipLoadOption());    String[] loads=getShipLoadNames();    Element eLoads=new Element(Xml.CAR_SHIP_LOADS);    for (    String load : loads) {      Element eLoad=new Element(Xml.CAR_LOAD);      eLoad.setAttribute(Xml.NAME,load);      eLoads.addContent(eLoad);    }    e.addContent(eLoads);  }  if (!getDropOption().equals(ANY)) {    e.setAttribute(Xml.DROP_OPTION,getDropOption());    String[] dropIds=getDropIds();    if (Control.backwardCompatible) {      StringBuffer buf=new StringBuffer();      for (      String id : dropIds) {        buf.append(id + "%%");      }      e.setAttribute(Xml.DROP_IDS,buf.toString());    }    Element eDropIds=new Element(Xml.DROP_IDS);    for (    String id : dropIds) {      Element eDropId=new Element(Xml.DROP_ID);      eDropId.setAttribute(Xml.ID,id);      eDropIds.addContent(eDropId);    }    e.addContent(eDropIds);  }  if (!getPickupOption().equals(ANY)) {    e.setAttribute(Xml.PICKUP_OPTION,getPickupOption());    String[] pickupIds=getPickupIds();    if (Control.backwardCompatible) {      StringBuffer buf=new StringBuffer();      for (      String id : pickupIds) {        buf.append(id + "%%");      }      e.setAttribute(Xml.PICKUP_IDS,buf.toString());    }    Element ePickupIds=new Element(Xml.PICKUP_IDS);    for (    String id : pickupIds) {      Element ePickupId=new Element(Xml.PICKUP_ID);      ePickupId.setAttribute(Xml.ID,id);      ePickupIds.addContent(ePickupId);    }    e.addContent(ePickupIds);  }  if (getSchedule() != null) {    e.setAttribute(Xml.SCHEDULE,getScheduleName());    e.setAttribute(Xml.SCHEDULE_ID,getScheduleId());    e.setAttribute(Xml.ITEM_ID,getScheduleItemId());    e.setAttribute(Xml.ITEM_COUNT,Integer.toString(getScheduleCount()));    e.setAttribute(Xml.FACTOR,Integer.toString(getReservationFactor()));    e.setAttribute(Xml.SCHEDULE_MODE,Integer.toString(getScheduleMode()));    e.setAttribute(Xml.HOLD_CARS_CUSTOM,isHoldCarsWithCustomLoadsEnabled() ? Xml.TRUE : Xml.FALSE);  }  if (getTrackType().equals(INTERCHANGE)) {    e.setAttribute(Xml.ONLY_CARS_WITH_FD,isOnlyCarsWithFinalDestinationEnabled() ? Xml.TRUE : Xml.FALSE);  }  if (getAlternateTrack() != null) {    e.setAttribute(Xml.ALTERNATIVE,getAlternateTrack().getId());  }  if (_loadOptions != 0) {    e.setAttribute(Xml.LOAD_OPTIONS,Integer.toString(_loadOptions));  }  if (_blockOptions != 0) {    e.setAttribute(Xml.BLOCK_OPTIONS,Integer.toString(_blockOptions));  }  if (!getServiceOrder().equals(NORMAL)) {    e.setAttribute(Xml.ORDER,getServiceOrder());  }  if (getPool() != null) {    e.setAttribute(Xml.POOL,getPool().getName());    e.setAttribute(Xml.MIN_LENGTH,Integer.toString(getMinimumLength()));  }  if (getIgnoreUsedLengthPercentage() > 0) {    e.setAttribute(Xml.IGNORE_USED_PERCENTAGE,Integer.toString(getIgnoreUsedLengthPercentage()));  }  if (!getDestinationOption().equals(ALL_DESTINATIONS)) {    e.setAttribute(Xml.TRACK_DESTINATION_OPTION,getDestinationOption());    String[] destIds=getDestinationIds();    if (destIds.length > 0) {      Element destinations=new Element(Xml.DESTINATIONS);      for (      String id : destIds) {        Location loc=LocationManager.instance().getLocationById(id);        if (loc != null) {          Element destination=new Element(Xml.DESTINATION);          destination.setAttribute(Xml.ID,id);          destination.setAttribute(Xml.NAME,loc.getName());          destinations.addContent(destination);        }      }      e.addContent(destinations);    }  }  if (Control.backwardCompatible) {    e.setAttribute(Xml.COMMENT,getComment());  }  if (!getComment().equals(NONE) || !getCommentBoth().equals(NONE) || !getCommentPickup().equals(NONE)|| !getCommentSetout().equals(NONE)) {    Element comments=new Element(Xml.COMMENTS);    Element track=new Element(Xml.TRACK);    Element both=new Element(Xml.BOTH);    Element pickup=new Element(Xml.PICKUP);    Element setout=new Element(Xml.SETOUT);    comments.addContent(track);    comments.addContent(both);    comments.addContent(pickup);    comments.addContent(setout);    track.setAttribute(Xml.COMMENT,getComment());    both.setAttribute(Xml.COMMENT,getCommentBoth());    pickup.setAttribute(Xml.COMMENT,getCommentPickup());    setout.setAttribute(Xml.COMMENT,getCommentSetout());    e.addContent(comments);  }  if (_reader != null) {    e.setAttribute(Xml.READER,_reader.getDisplayName());  }  return e;}  }
class C{  public synchronized final Map<K,V> snapshot(){  return new LinkedHashMap<K,V>(map);}  }
class C{  public Vector4d zero(){  x=0.0;  y=0.0;  z=0.0;  w=0.0;  return this;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SexecPackage.SEQUENCE__STEPS:    getSteps().clear();  return;}super.eUnset(featureID);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean destroyActionModeIfCan(){  if (mActionMode != null) {    mActionMode.finish();    return true;  }  return false;}  }
class C{  public Counts(float floorProbability){  this.floorProbability=floorProbability;  this.counts=new HashMap<>();  this.bTotals=new HashMap<>();  this.probabilities=new HashMap<>();  this.reverseProbabilities=new HashMap<>();}  }
class C{  protected void deleteProject(String projectId) throws IOException {  File wsp=new File(TARGET,WSP);  File project=new File(wsp,projectId);  FileDeleter.delete(project.toPath());}  }
class C{  void standardizeSentenceType(){  Expression prevVerb=null;  for (  final Expression w : expressions) {    if (w.getBreakFlag()) {      break;    }    if (w.getType() != null) {      if (w.getType().isVerb()) {        if (prevVerb == null) {          prevVerb=w;        } else {          break;        }      } else       if (w.getType().isSubject()) {        if (w.getOriginal().equalsIgnoreCase("me")) {          if (prevVerb != null) {            final Expression you=new Expression("you",ExpressionType.SUBJECT);            expressions.add(0,you);            sentenceType=SentenceType.IMPERATIVE;          }        }        break;      }    }  }}  }
class C{  public String escaped(){  return escaped(null);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"UHADD16");  translateAll(environment,instruction,"UHADD16",instructions);}  }
class C{  public int readInt() throws IOException {  if (_readOffset + 4 < _readLength) {    return (((_readBuffer[_readOffset++] & 0xff) << 24) + ((_readBuffer[_readOffset++] & 0xff) << 16) + ((_readBuffer[_readOffset++] & 0xff) << 8)+ ((_readBuffer[_readOffset++] & 0xff)));  } else {    return ((read() << 24) + (read() << 16) + (read() << 8)+ (read()));  }}  }
class C{  public static void update(Resource resource,Set<User> mentionedUsers){  for (  Mention mention : find.where().eq("resourceType",resource.getType()).eq("resourceId",resource.getId()).findList()) {    if (mentionedUsers.contains(mention.user)) {      mentionedUsers.remove(mention.user);    } else {      mention.delete();    }  }  for (  User user : mentionedUsers) {    Mention mention=new Mention();    mention.resourceId=resource.getId();    mention.resourceType=resource.getType();    mention.user=user;    mention.save();  }}  }
class C{  public GridKernalContext kernalContext(){  return ctx;}  }
class C{  public void syncAllAsynchronously(){  if (!isSyncing.compareAndSet(false,true)) {    throw new SyncException("Couldn't start synchronization as it is executing right now");  }  scheduler.execute(null);}  }
class C{  public void newCharacter(EditorState editorState,char ch){  MetaCharacter meta=metaModel.getCharacter("" + ch);  newCharacter(editorState,meta);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public boolean attempt(Address old,Address value,Offset offset){  return false;}  }
class C{  public static ParameterList createFromQueryString(String queryString) throws MessageException {  if (DEBUG)   _log.debug("Creating parameter list from query string: " + queryString);  ParameterList parameterList=new ParameterList();  StringTokenizer tokenizer=new StringTokenizer(queryString,"&");  while (tokenizer.hasMoreTokens()) {    String keyValue=tokenizer.nextToken();    int posEqual=keyValue.indexOf('=');    if (posEqual == -1)     throw new MessageException("Invalid query parameter, = missing: " + keyValue);    try {      String key=URLDecoder.decode(keyValue.substring(0,posEqual),"UTF-8");      String value=URLDecoder.decode(keyValue.substring(posEqual + 1),"UTF-8");      parameterList.set(new Parameter(key,value));    } catch (    UnsupportedEncodingException e) {      throw new MessageException("Cannot URL decode query parameter: " + keyValue,e);    }  }  return parameterList;}  }
class C{  public boolean isStdUserWorkflow(){  Object oo=get_Value(COLUMNNAME_IsStdUserWorkflow);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void append(final StringBuffer buffer,final String fieldName,final char value){  appendFieldStart(buffer,fieldName);  appendDetail(buffer,fieldName,value);  appendFieldEnd(buffer,fieldName);}  }
class C{  public AbortPolicy(){}  }
class C{  public JSONObject put(String key,Collection<?> value) throws JSONException {  this.put(key,new JSONArray(value));  return this;}  }
class C{  public void testParameters() throws Exception {  checkParameters(null,null,-1);  checkParameters(null,null,100);  checkParameters(null,"b",-1);  checkParameters("a",null,-1);  checkParameters(null,"b",100);  checkParameters("a",null,100);  checkParameters("a","b",-1);}  }
class C{  public boolean isExcludeLot(int AD_Column_ID,boolean isSOTrx){  getMAttributeSet();  if (m_mas != null)   return m_mas.isExcludeLot(AD_Column_ID,isSOTrx);  return false;}  }
class C{  private boolean validateAdmin(){  UserService userService=getUserService();  return requireAdmin ? (userService.isUserLoggedIn() && userService.isUserAdmin()) : true;}  }
class C{  public boolean isFixed(){  return m_isFixed;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return (true);  }  if (!(obj instanceof PackagePermission)) {    return (false);  }  PackagePermission p=(PackagePermission)obj;  return ((action_mask == p.action_mask) && getName().equals(p.getName()));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:59.825 -0500",hash_original_method="EFC2A850FD89486062001F23F510B160",hash_generated_method="C71D866ED8D898D3F57E239DC4AECBCD") public static Animation makeOutAnimation(Context c,boolean toRight){  Animation a;  if (toRight) {    a=AnimationUtils.loadAnimation(c,com.android.internal.R.anim.slide_out_right);  } else {    a=AnimationUtils.loadAnimation(c,com.android.internal.R.anim.slide_out_left);  }  a.setInterpolator(new AccelerateInterpolator());  a.setStartTime(currentAnimationTimeMillis());  return a;}  }
class C{  private Key backupKeyToKey(String backupKey) throws InvalidBackupException {  try {    Key key=Key.parseFrom(Base64.decode(backupKey,Base64.DEFAULT));    if (key.checksum != checkKey(key)) {      throw new InvalidBackupException("invalid key read from stream" + backupKey);    }    return key;  } catch (  InvalidProtocolBufferNanoException|IllegalArgumentException e) {    throw new InvalidBackupException(e);  }}  }
class C{  public final void add(Matrix3d m1,Matrix3d m2){  this.m00=m1.m00 + m2.m00;  this.m01=m1.m01 + m2.m01;  this.m02=m1.m02 + m2.m02;  this.m10=m1.m10 + m2.m10;  this.m11=m1.m11 + m2.m11;  this.m12=m1.m12 + m2.m12;  this.m20=m1.m20 + m2.m20;  this.m21=m1.m21 + m2.m21;  this.m22=m1.m22 + m2.m22;}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.068 -0500",hash_original_method="57E1F1C357DC29B7A94C226F5C3B5C9B",hash_generated_method="9BFED6DEC7FF5091C599E38FA68AFF9D") public Canvas(Bitmap bitmap){  if (!bitmap.isMutable()) {    throw new IllegalStateException("Immutable bitmap passed to Canvas constructor");  }  throwIfRecycled(bitmap);  mNativeCanvas=initRaster(bitmap.ni());  mFinalizer=new CanvasFinalizer(mNativeCanvas);  mBitmap=bitmap;  mDensity=bitmap.mDensity;}  }
class C{  public BreadcrumbItem(BreadcrumbViewer viewer,Composite parent){  super(parent,SWT.NONE);  fParent=viewer;  fContainer=new Composite(parent,SWT.NONE);  fContainer.setLayoutData(new GridData(SWT.FILL,SWT.CENTER,false,false));  GridLayout layout=new GridLayout(2,false);  layout.marginBottom=1;  layout.marginHeight=0;  layout.marginWidth=0;  layout.horizontalSpacing=0;  fContainer.setLayout(layout);  fDetailsBlock=new BreadcrumbItemDetails(this,fContainer);  fExpandBlock=new BreadcrumbItemDropDown(this,fContainer);}  }
class C{  public static int[] ArrayQuicksort(int array[]){  int i;  System.out.println("Values Before the sort:\n");  for (i=0; i < array.length; i++)   System.out.print(array[i] + "  ");  System.out.println();  quick_srt(array,0,array.length - 1);  System.out.print("Values after the sort:\n");  for (i=0; i < array.length; i++)   System.out.print(array[i] + "  ");  return array;}  }
class C{  private void addRegisterNodes(IR ir){  for (Register reg=ir.regpool.getFirstSymbolicRegister(); reg != null; reg=reg.getNext()) {    findOrCreateVertex(reg);  }}  }
class C{  private ConcreteComponentTransferFunction(){}  }
class C{  public void commitSample(long sampleTimeUs,int flags,long position,int size,byte[] encryptionKey){  infoQueue.commitSample(sampleTimeUs,flags,position,size,encryptionKey);}  }
class C{  public DataReportSeries(final String name,final List<DataReportSeriesItem<T>> values){  this(name);  setData(values);}  }
class C{  public boolean hasContent(){  return getSize() > 0;}  }
class C{  public Class<?>[] scanForClasses(ScriptsLocation location,Class<?> implementedInterface) throws Exception {  return new ClassPathScanner(classLoader).scanForClasses(location.getPath(),implementedInterface);}  }
class C{  public synchronized byte[] toByteArray(){  byte[] newArray=new byte[count];  System.arraycopy(buf,0,newArray,0,count);  return newArray;}  }
class C{  public boolean jdbcCompliant(){  return false;}  }
class C{  @Override protected String extractKey(final String name){  final String key=unescape(name.substring(0,name.length() - 4));  return key.equals("\0") ? null : key;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Boolean isEnterFullScreenOnPowerOn(){  return enterFullScreenOnPowerOn;}  }
class C{  public FilteredNavigationRecordRequestImpl(final String facetName,final String field,final boolean multiValue){  this(facetName,field,multiValue,null);}  }
class C{  public boolean acceptsRedstone(){  return false;}  }
class C{  @Override public void IF_ICMPLT(String className,String methName,int branchIndex,int left,int right){  IntegerValue rightBv=env.topFrame().operandStack.popBv32();  IntegerValue leftBv=env.topFrame().operandStack.popBv32();  IntegerConstraint cnstr;  if (left < right)   cnstr=ConstraintFactory.lt(leftBv,rightBv); else   cnstr=ConstraintFactory.gte(leftBv,rightBv);  if (cnstr.getLeftOperand().containsSymbolicVariable() || cnstr.getRightOperand().containsSymbolicVariable())   pc.addBranchCondition(className,methName,branchIndex,cnstr);}  }
class C{  public static boolean approxEquals(S2Point a,S2Point b,double maxError){  return a.angle(b) <= maxError;}  }
class C{  protected Key engineTranslateKey(Key key) throws InvalidKeyException {  if (key != null) {    if (key instanceof DSAPrivateKey) {      DSAPrivateKey privateKey=(DSAPrivateKey)key;      DSAParams params=privateKey.getParams();      try {        return engineGeneratePrivate(new DSAPrivateKeySpec(privateKey.getX(),params.getP(),params.getQ(),params.getG()));      } catch (      InvalidKeySpecException e) {        throw new InvalidKeyException("ATTENTION: InvalidKeySpecException: " + e);      }    }    if (key instanceof DSAPublicKey) {      DSAPublicKey publicKey=(DSAPublicKey)key;      DSAParams params=publicKey.getParams();      try {        return engineGeneratePublic(new DSAPublicKeySpec(publicKey.getY(),params.getP(),params.getQ(),params.getG()));      } catch (      InvalidKeySpecException e) {        throw new InvalidKeyException("ATTENTION: InvalidKeySpecException: " + e);      }    }  }  throw new InvalidKeyException("'key' is neither DSAPublicKey nor DSAPrivateKey");}  }
class C{  private static void expandFieldArray(Object instance,String fieldName,Object[] extraElements) throws NoSuchFieldException, IllegalArgumentException, IllegalAccessException {  Field jlrField=findField(instance,fieldName);  Object[] original=(Object[])jlrField.get(instance);  Object[] combined=(Object[])Array.newInstance(original.getClass().getComponentType(),original.length + extraElements.length);  System.arraycopy(original,0,combined,0,original.length);  System.arraycopy(extraElements,0,combined,original.length,extraElements.length);  jlrField.set(instance,combined);}  }
class C{  public PublisherMerge<T> mergeAdditionalSource(Publisher<? extends T> source,IntFunction<Supplier<? extends Queue<T>>> newQueueSupplier){  int n=sources.length;  @SuppressWarnings("unchecked") Publisher<? extends T>[] newArray=new Publisher[n + 1];  System.arraycopy(sources,0,newArray,0,n);  newArray[n]=source;  Supplier<? extends Queue<T>> newMainQueue;  int mc=maxConcurrency;  if (mc != Integer.MAX_VALUE) {    mc++;    newMainQueue=newQueueSupplier.apply(mc);  } else {    newMainQueue=mainQueueSupplier;  }  return new PublisherMerge<>(newArray,delayError,mc,newMainQueue,prefetch,innerQueueSupplier);}  }
class C{  int compareOffsets(TokenLL tokenB){  int cmp=Integer.compare(this.startOffset,tokenB.startOffset);  if (cmp == 0) {    cmp=Short.compare(this.endOffsetInc,tokenB.endOffsetInc);  }  return cmp;}  }
class C{  protected final void tellLocalBridgeServers(boolean removeProfile,boolean exchangeProfiles,final List<Profile> replyProfiles){  final GemFireCacheImpl cache=GemFireCacheImpl.getInstance();  if (cache != null && !cache.isClosed()) {    List<?> bridgeServers=cache.getCacheServersAndGatewayReceiver();    for (int i=0; i < bridgeServers.size(); i++) {      CacheServerImpl bsi=(CacheServerImpl)bridgeServers.get(i);      if (bsi.isRunning()) {        if (bsi.getProfile().equals(this)) {          continue;        }        if (this.port > 0) {          handleDistributionAdvisee(bsi,removeProfile,exchangeProfiles,replyProfiles);        } else         if (exchangeProfiles) {          replyProfiles.add(bsi.getProfile());        }      }    }  }}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException {  setHints(null);  return decodeInternal(image);}  }
class C{  protected void createLinePositions(List<Position> leftPositions,List<Position> rightPositions,double halfWidth,Globe globe){  Iterator<? extends Position> iterator=positions.iterator();  Position posB=iterator.next();  Position posA=iterator.next();  Vec4 pA=globe.computePointFromLocation(posA);  Vec4 pB=globe.computePointFromLocation(posB);  Vec4 pC;  while (iterator.hasNext()) {    posA=iterator.next();    pC=pB;    pB=pA;    pA=globe.computePointFromLocation(posA);    Vec4 offset;    Vec4 normal=globe.computeSurfaceNormalAtPoint(pB);    Vec4 vBC=pC.subtract3(pB);    Vec4 perpendicular=vBC.cross3(normal);    if (iterator.hasNext() && !Vec4.areColinear(pA,pB,pC)) {      Vec4 vBA=pA.subtract3(pB);      offset=vBA.normalize3().add3(vBC.normalize3());      offset=offset.normalize3();      double tripleProduct=perpendicular.dot3(offset);      if (tripleProduct < 0) {        offset=offset.multiply3(-1);      }    } else {      offset=perpendicular.normalize3();    }    Angle theta=vBC.angleBetween3(offset);    double length=halfWidth / theta.sin();    offset=offset.multiply3(length);    Vec4 pRight=pB.add3(offset);    Vec4 pLeft=pB.subtract3(offset);    Position posLeft=globe.computePositionFromPoint(pLeft);    Position posRight=globe.computePositionFromPoint(pRight);    leftPositions.add(posLeft);    rightPositions.add(posRight);  }}  }
class C{  public PreparedStatement prepareStatement(String sql) throws SQLException {  return prepareStatement(sql,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);}  }
class C{  public PoolParams(int maxSizeSoftCap,int maxSizeHardCap,@Nullable SparseIntArray bucketSizes,int minBucketSize,int maxBucketSize,int maxNumThreads){  Preconditions.checkState(maxSizeSoftCap >= 0 && maxSizeHardCap >= maxSizeSoftCap);  this.maxSizeSoftCap=maxSizeSoftCap;  this.maxSizeHardCap=maxSizeHardCap;  this.bucketSizes=bucketSizes;  this.minBucketSize=minBucketSize;  this.maxBucketSize=maxBucketSize;  this.maxNumThreads=maxNumThreads;}  }
class C{  public ORDER_BY ORDER_BY(String orderBy){  return new ORDER_BY(this,orderBy);}  }
class C{  private static void checkArguments(final AbstractSQLProvider provider,final INaviProject project){  Preconditions.checkNotNull(provider,"IE00516: Provider argument can not be null");  Preconditions.checkNotNull(project,"IE00517: Project argument can not be null");  Preconditions.checkArgument(project.inSameDatabase(provider),"IE00518: Project is not part of this database");}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>();  newVector.add(new Option("\tSet the loss function to minimize. 0 = " + "hinge loss (SVM), 1 = log loss (logistic regression)\n\t" + "(default = 0)","F",1,"-F"));  newVector.add(new Option("\tOutput probabilities for SVMs (fits a logsitic\n\t" + "model to the output of the SVM)","output-probs",0,"-outputProbs"));  newVector.add(new Option("\tThe learning rate (default = 0.01).","L",1,"-L"));  newVector.add(new Option("\tThe lambda regularization constant " + "(default = 0.0001)","R",1,"-R <double>"));  newVector.add(new Option("\tThe number of epochs to perform (" + "batch learning only, default = 500)","E",1,"-E <integer>"));  newVector.add(new Option("\tUse word frequencies instead of " + "binary bag of words.","W",0,"-W"));  newVector.add(new Option("\tHow often to prune the dictionary " + "of low frequency words (default = 0, i.e. don't prune)","P",1,"-P <# instances>"));  newVector.add(new Option("\tMinimum word frequency. Words with less " + "than this frequence are ignored.\n\tIf periodic pruning " + "is turned on then this is also used to determine which\n\t"+ "words to remove from the dictionary (default = 3).","M",1,"-M <double>"));  newVector.add(new Option("\tMinimum absolute value of coefficients " + "in the model.\n\tIf periodic pruning is turned on then this\n\t" + "is also used to prune words from the dictionary\n\t"+ "(default = 0.001","min-coeff",1,"-min-coeff <double>"));  newVector.addElement(new Option("\tNormalize document length (use in conjunction with -norm and " + "-lnorm)","normalize",0,"-normalize"));  newVector.addElement(new Option("\tSpecify the norm that each instance must have (default 1.0)","norm",1,"-norm <num>"));  newVector.addElement(new Option("\tSpecify L-norm to use (default 2.0)","lnorm",1,"-lnorm <num>"));  newVector.addElement(new Option("\tConvert all tokens to lowercase " + "before adding to the dictionary.","lowercase",0,"-lowercase"));  newVector.addElement(new Option("\tThe stopwords handler to use (default Null).","-stopwords-handler",1,"-stopwords-handler"));  newVector.addElement(new Option("\tThe tokenizing algorihtm (classname plus parameters) to use.\n" + "\t(default: " + WordTokenizer.class.getName() + ")","tokenizer",1,"-tokenizer <spec>"));  newVector.addElement(new Option("\tThe stemmering algorihtm (classname plus parameters) to use.","stemmer",1,"-stemmer <spec>"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  public final void removeLeg(final int index){  if ((index % 2 == 0) || (index < 1) || (index >= getPlanElements().size() - 1)) {    log.warn(this + "[index=" + index+ " is wrong. nothing removed]");  } else {    if (index != getPlanElements().size() - 2) {      Leg next_leg=(Leg)getPlanElements().get(index + 2);      next_leg.setDepartureTime(Time.UNDEFINED_TIME);      next_leg.setTravelTime(Time.UNDEFINED_TIME);      next_leg.setTravelTime(Time.UNDEFINED_TIME - next_leg.getDepartureTime());      next_leg.setRoute(null);    }    getPlanElements().remove(index + 1);    getPlanElements().remove(index);  }}  }
class C{  private void handleEndOfStream(State state) throws StopRequestException {  if (state.shouldPause) {    updateStatusAndPause(state);    return;  }  downloadsRepository.updateDownloadEndOfStream(originalDownloadInfo,state.currentBytes,state.contentLength);  final boolean lengthMismatched=(state.contentLength != UNKNOWN_BYTE_SIZE) && (state.currentBytes != state.contentLength);  if (lengthMismatched) {    if (cannotResume(state)) {      throw new StopRequestException(DownloadStatus.CANNOT_RESUME,"mismatched content length; unable to resume");    } else {      throw new StopRequestException(HTTP_DATA_ERROR,"closed socket before end of file");    }  }}  }
class C{  @NotNull @ObjectiveCName("requestStartAuthCommandWithUserName:") public Command<AuthState> requestStartUserNameAuth(String userName){  return modules.getAuthModule().requestStartUserNameAuth(userName);}  }
class C{  public List<MockResponse> enqueue(String... paths){  if (paths == null) {    return null;  }  List<MockResponse> mockResponseList=new ArrayList<>();  for (  String path : paths) {    Fixture fixture=Fixture.parseFrom(path,parser);    MockResponse mockResponse=new MockResponse();    if (fixture.statusCode != 0) {      mockResponse.setResponseCode(fixture.statusCode);    }    if (fixture.body != null) {      mockResponse.setBody(fixture.body);    }    if (fixture.delay != 0) {      mockWebServer.setDispatcher(new DelayedDispatcher(fixture.delay,TimeUnit.MILLISECONDS));    }    if (fixture.headers != null) {      for (      String header : fixture.headers) {        mockResponse.addHeader(header);      }    }    mockWebServer.enqueue(mockResponse);    mockResponseList.add(mockResponse);  }  return mockResponseList;}  }
class C{  public ParameterBlock add(float f){  return add(new Float(f));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildYeti(zone);}  }
class C{  public HashCodeBuilder append(final char value){  iTotal=iTotal * iConstant + value;  return this;}  }
class C{  public void removeMigratingInContainer(Container container){  containerDeallocate(container);  getContainersMigratingIn().remove(container);  getContainerList().remove(container);  Log.printLine("ContainerVm# " + getId() + "removeMigratingInContainer:......"+ container.getId()+ "   Is deleted from the list");  getContainerScheduler().getContainersMigratingIn().remove(container.getUid());  container.setInMigration(false);}  }
class C{  public boolean receivedOutOfContextPropose(int cid){  outOfContextLock.lock();  boolean result=outOfContextProposes.get(cid) != null;  outOfContextLock.unlock();  return result;}  }
class C{  public void showException(String message,Exception e){  Alert alert=new Alert(Alert.AlertType.ERROR);  alert.setTitle("Error");  alert.setHeaderText("Error taking action");  alert.setContentText(message);  StringWriter sw=new StringWriter();  PrintWriter pw=new PrintWriter(sw);  e.printStackTrace(pw);  String exceptionText=sw.toString();  Label label=new Label("Exception: ");  TextArea textArea=new TextArea(exceptionText);  textArea.setEditable(false);  textArea.setWrapText(true);  textArea.setMaxWidth(Double.MAX_VALUE);  textArea.setMaxHeight(Double.MAX_VALUE);  GridPane.setVgrow(textArea,Priority.ALWAYS);  GridPane.setHgrow(textArea,Priority.ALWAYS);  GridPane expContent=new GridPane();  expContent.setMaxWidth(Double.MAX_VALUE);  expContent.add(label,0,0);  expContent.add(textArea,0,1);  alert.getDialogPane().setExpandableContent(expContent);  alert.showAndWait();}  }
class C{  private void createSentences(String... lines){  this.jCas.setDocumentText(Joiner.on("\n").join(lines));  int offset=0;  for (  String line : lines) {    int length=line.length();    int start=0;    while (start < length && Character.isWhitespace(line.charAt(start))) {      ++start;    }    int end=length;    while (end > 0 && Character.isWhitespace(line.charAt(end - 1))) {      --end;    }    if (start != length && end != 0) {      Sentence sentence=new Sentence(this.jCas,offset + start,offset + end);      sentence.addToIndexes();    }    offset+=length + 1;  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static List<JCAnnotation> findAnnotations(JavacNode fieldNode,Pattern namePattern){  ListBuffer<JCAnnotation> result=new ListBuffer<JCAnnotation>();  for (  JavacNode child : fieldNode.down()) {    if (child.getKind() == Kind.ANNOTATION) {      JCAnnotation annotation=(JCAnnotation)child.get();      String name=annotation.annotationType.toString();      int idx=name.lastIndexOf(".");      String suspect=idx == -1 ? name : name.substring(idx + 1);      if (namePattern.matcher(suspect).matches()) {        result.append(annotation);      }    }  }  return result.toList();}  }
class C{  @Override public String toString(){  return "cudaPointerAttributes[" + "memoryType=" + cudaMemoryType.stringFor(memoryType) + ","+ "device="+ device+ ","+ "devicePointer="+ devicePointer+ ","+ "hostPointer="+ hostPointer+ "]";}  }
class C{  public MetricSpacesImageSearcher(int maximumHits,File referencePointFile,int numHashedResults) throws IllegalAccessException, InstantiationException, ClassNotFoundException {  this.maximumHits=maximumHits;  this.maxResultsHashBased=numHashedResults;  try {    p=MetricSpaces.loadReferencePoints(referencePointFile);    this.feature=(GlobalFeature)p.featureClass.newInstance();    this.featureFieldName=feature.getFieldName();    this.hashesFieldName=featureFieldName + DocumentBuilder.HASH_FIELD_SUFFIX;  } catch (  IOException e) {    System.err.println("Error reading hash functions from default location.");    e.printStackTrace();  }}  }
class C{  public SparseDoubleArray(int initialCapacity){  initialCapacity=ArrayUtils.idealIntArraySize(initialCapacity);  mKeys=new int[initialCapacity];  mValues=new double[initialCapacity];  mSize=0;}  }
class C{  public int hashCode(){  return this.getName().hashCode();}  }
class C{  private synchronized void expandFor(int idx){  if (idx < size)   return;  assert extendable == true;  int capacity=u.length, oldSize=size;  size=idx + 1;  if (capacity >= size)   return;  while (capacity < size)   capacity*=2;  float[] newU=new float[capacity];  try {    System.arraycopy(u,0,newU,0,oldSize);  } catch (  Exception e) {    System.err.println("Warning: Array Index out of bound (Ignore this warning in the early stage of DEMIDCD");    e.printStackTrace();  }  u=newU;}  }
class C{  @Override public void pause(Task task) throws TException {  try {    pause(new TaskPojo(task));  } catch (  ServiceException e) {    throw new TException(e);  }}  }
class C{  public final boolean uploadPhoto(final String description,final Bitmap image) throws AbelanaClientException, AbelanaClientException {  if (isConnectedToServerOrTryToConnect()) {    NewPhotoRequest newPhotoRequest=new NewPhotoRequest();    newPhotoRequest.description=description;    try {      UploadPhotoResponse uploadPhotoResponse=mBlockingStub.uploadPhoto(newPhotoRequest);      if (uploadPhotoResponse.error == null) {        CloudStorage.uploadImage(uploadPhotoResponse.uploadUrl,image);        return true;      } else {        Log.e("AbelanaClient",uploadPhotoResponse.error.details);        if (uploadPhotoResponse.error.code.equals("403")) {          throw new AbelanaClientException(mContext.getString(R.string.abelana_auth_error_message));        }        return false;      }    } catch (    IOException e) {      Log.e("AbelanaClient",e.getMessage());      throw new AbelanaClientException(mContext.getString(R.string.upload_photo_failed));    }  } else {    throw new AbelanaClientException(mContext.getString(R.string.server_connection_error));  }}  }
class C{  public ParsableBitArray(byte[] data,int limit){  this.data=data;  byteLimit=limit;}  }
class C{  private void clampBorderAndShadowWidths(float borderWidthInDips,float shadowWidthInDips){  if (borderWidthInDips > 5f) {    borderWidthInDips=5f;  } else   if (borderWidthInDips < 0f) {    borderWidthInDips=0f;  }  if (shadowWidthInDips > 3f) {    shadowWidthInDips=3f;  } else   if (shadowWidthInDips < 0f) {    shadowWidthInDips=0f;  }}  }
class C{  static int readUnsignedShort(final byte[] b,final int index){  return ((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF);}  }
class C{  public void close(){synchronized (this) {    if (channel != null) {      try {        channel.close();      } catch (      Exception ex) {      }      channel=null;    }    if (m_out != null) {      m_out.shutdown();      m_out=null;    }    if (m_in != null) {      m_in.shutdown();      m_in=null;    }  }  List<TcpRequest> ls=new ArrayList<>(requestMap.values());  for (  TcpRequest tr : ls) {    tr.weekup();  }}  }
class C{  public void ignoreSystemFiles(final boolean ignoreSystemFiles){  this.ignoreSystemFiles=ignoreSystemFiles;}  }
class C{  @Override public void validate(){  validateDebugSettings();}  }
class C{  private static Rsrc findFreshCachedRsrc(ServiceContext context,long currentTime){  CacheStructure cache=context.cache;  char variant=context.variant;  String url=context.url;  HttpServletRequest request=context.request;  ConfigData configData=context.configData;  Rsrc rsrc=null;  context.maxFreshTime=0;  context.maxAge=0;  LoadLock waiter=null;synchronized (cache.globalLock) {    RsrcIfc r=getFromCache(variant,url,configData);    if (r instanceof TempRsrc) {      TempRsrc tmpRsrc=(TempRsrc)r;      if (tmpRsrc.isBeingRefreshed && tmpRsrc.loader != null) {        if (tmpRsrc.replacer.maxFreshTime > currentTime) {          rsrc=tmpRsrc.replacer;          context.maxFreshTime=rsrc.maxFreshTime;          context.maxAge=rsrc.maxAge;        } else {          waiter=new LoadLock();          waiter.setCount(1);          if (tmpRsrc.waiters == null)           tmpRsrc.waiters=new ArrayList<LoadLock>();          tmpRsrc.waiters.add(waiter);        }      }    } else     if (r instanceof Rsrc) {      rsrc=(Rsrc)r;      rsrc.lastUsageTime=currentTime;      context.maxFreshTime=rsrc.maxFreshTime;      context.maxAge=rsrc.maxAge;      if (r instanceof PageRsrc && ConfigUtils.isAutoRefreshedPage(((PageRsrc)r).url)) {        return rsrc;      }      long maxServerSideFreshTime=rsrc.maxFreshTime;      final long maxServerSideMaxAge=configData.maxServerSideMaxAge;      if (maxServerSideMaxAge > 0 && (rsrc.maxFreshTime - rsrc.lastRefreshTime) > maxServerSideMaxAge * 1000) {        maxServerSideFreshTime=rsrc.lastRefreshTime + maxServerSideMaxAge * 1000;      }      if (maxServerSideFreshTime - currentTime < REFRESH_GAP_IN_MILLIS) {        rsrc.isBeingLoaded=true;        TempRsrc tmpRsrc=new TempRsrc();        tmpRsrc.replacer=rsrc;        tmpRsrc.isBeingRefreshed=true;        tmpRsrc.loader=new LoadLock();        tmpRsrc.host=rsrc.host;        tmpRsrc.url=rsrc.url;        tmpRsrc.isVersioned=rsrc.versionUrl != null;        context.refreshRsrc=tmpRsrc;        putInCache(variant,url,tmpRsrc,configData);        context.maxFreshTime=0;        context.maxAge=0;        return null;      }    }  }  if (waiter != null) {    try {      waiter.waitUntilCountIs0();    } catch (    InterruptedException e) {    }synchronized (cache.globalLock) {      RsrcIfc r=getFromCache(variant,url,configData);      if (r instanceof Rsrc) {        rsrc=(Rsrc)r;        context.maxFreshTime=rsrc.maxFreshTime;        context.maxAge=rsrc.maxAge;      } else {        rsrc=null;      }    }  }  return rsrc;}  }
class C{  public void show(){  LayoutParams lp=(LayoutParams)mContentView.getLayoutParams();  lp.height=android.view.ViewGroup.LayoutParams.WRAP_CONTENT;  mContentView.setLayoutParams(lp);}  }
class C{  public double dot(Vector3D v){  return x * v.x + y * v.y + z * v.z;}  }
class C{  @Override public ConditionalTable copy(){  ConditionalTable newTable=new ConditionalTable(headVar);  for (  Assignment condition : table.keySet()) {    try {      newTable.addDistrib(condition,table.get(condition).copy());    } catch (    RuntimeException e) {      log.warning("Copy error: " + e);    }  }  return newTable;}  }
class C{  private void onTrigger6(){  mLayout.setAccessibilityDelegate(mIgnoreTextChangesDelegate);  final String editableText=getContext().getString(R.string.accessibility_tutorial_lesson_5_editable_text);  mEditText.setText(editableText);  mEditText.selectAll();  mLayout.setAccessibilityDelegate(null);  addInstruction(R.string.accessibility_tutorial_lesson_5_text_7,true);  mEditText.addTextChangedListener(mCustomTextTypedWatcher);}  }
class C{  public ClassNode(Class c){  this(c.getName(),c.getModifiers(),null,null,MixinNode.EMPTY_ARRAY);  clazz=c;  lazyInitDone=false;  CompileUnit cu=getCompileUnit();  if (cu != null)   cu.addClass(this);  isPrimaryNode=false;}  }
class C{  private void fixShellSize(){  int yDelta=getShell().getSize().y - getContents().getSize().y;  ((Composite)getContents()).layout(true,true);  Point size=getShell().getSize();  getShell().setSize(size.x,getContents().computeSize(size.x,SWT.DEFAULT).y + yDelta);}  }
class C{  public static String clipString(JComponent c,FontMetrics fm,String string,int availTextWidth){  string=(String)invokeSwingUtilities2StaticMethod("clipString",new Class[]{JComponent.class,FontMetrics.class,String.class,int.class},new Object[]{c,fm,string,availTextWidth});  return string;}  }
class C{  public static boolean isAncestor(Node root,Node artifact){  Node current=artifact;  while (current != null) {    if (root == current)     return true;    current=firstParent(current);  }  return false;}  }
class C{  @Override protected final long used(){  return Memory.used();}  }
class C{  public static int findWordEnd(String line,int pos,String noWordSep){  char ch=line.charAt(pos);  if (noWordSep == null)   noWordSep="";  boolean selectNoLetter=(!Character.isLetterOrDigit(ch) && noWordSep.indexOf(ch) == -1);  int wordEnd=line.length();  for (int i=pos; i < line.length(); i++) {    ch=line.charAt(i);    if (selectNoLetter ^ (!Character.isLetterOrDigit(ch) && noWordSep.indexOf(ch) == -1)) {      wordEnd=i;      break;    }  }  return wordEnd;}  }
class C{  static XPath rewriteChildToExpression(ElemTemplateElement varElem) throws TransformerException {  ElemTemplateElement t=varElem.getFirstChildElem();  if (null != t && null == t.getNextSiblingElem()) {    int etype=t.getXSLToken();    if (Constants.ELEMNAME_VALUEOF == etype) {      ElemValueOf valueof=(ElemValueOf)t;      if (valueof.getDisableOutputEscaping() == false && valueof.getDOMBackPointer() == null) {        varElem.m_firstChild=null;        return new XPath(new XRTreeFragSelectWrapper(valueof.getSelect().getExpression()));      }    } else     if (Constants.ELEMNAME_TEXTLITERALRESULT == etype) {      ElemTextLiteral lit=(ElemTextLiteral)t;      if (lit.getDisableOutputEscaping() == false && lit.getDOMBackPointer() == null) {        String str=lit.getNodeValue();        XString xstr=new XString(str);        varElem.m_firstChild=null;        return new XPath(new XRTreeFragSelectWrapper(xstr));      }    }  }  return null;}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x3F0CF289,version=271) public int sceUsbCamSetupStill(pspUsbCamSetupStillParam usbCamSetupStillParam){  return 0;}  }
class C{  public void init(IWorkbenchWindow window){  this.window=window;}  }
class C{  public boolean isAvailable(){  return available;}  }
class C{  public boolean isDeclaredFunction(String name){  return isDefinedAs(name,LocalType.DECLARED_FUNCTION);}  }
class C{  @Override public void start(AbstractCloudComputer c){  c.connect(false);}  }
class C{  public SabresQuery<T> include(String key){  SabresDescriptor descriptor=Schema.getDescriptor(name,key);  if (descriptor == null) {    throw new IllegalArgumentException(String.format("Unrecognized key %s in Object %s",key,name));  }  if (descriptor.getType().equals(SabresDescriptor.Type.Pointer)) {    includes.add(key);  } else {    Log.w(TAG,String.format("keys of type %s are always included in query results",descriptor.getType().toString()));  }  return this;}  }
class C{  public static final String trl(String text,Locale locale){  org.xnap.commons.i18n.I18n i18n=I18nFactory.getI18n(I18n.class,BASENAME,locale,I18nFactory.NO_CACHE);  return i18n.tr(text);}  }
class C{  @Override public short[][] reduce_table(){  return _reduce_table;}  }
class C{  public boolean useBadgeIcon(){  return (0 != (mSearchMode & SEARCH_MODE_BADGE_ICON)) && (mIconId != 0);}  }
class C{  private JSlider createVolumeSlider(String channel){  JSlider slider=new JSlider(0,100);  SoundGroup group=ClientSingletonRepository.getSound().getGroup(channel);  slider.setValue(Numeric.floatToInt(group.getVolume(),100f));  slider.addChangeListener(new ChannelChangeListener(channel,group));  return slider;}  }
class C{  public HttpException(final String message){  super(message);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void unregisterMediaButtonEventReceiverForCalls(){  if (mContext.checkCallingPermission("android.permission.MODIFY_PHONE_STATE") != PackageManager.PERMISSION_GRANTED) {    Log.e(TAG,"Invalid permissions to unregister media button receiver for calls");    return;  }synchronized (mRCStack) {    mMediaReceiverForCalls=null;  }}  }
class C{  @Procedure @PerformsWrites @Description("apoc.refactor.cloneNodes([node1,node2,...]) clone nodes with their labels and properties") public Stream<NodeRefactorResult> cloneNodes(@Name("nodes") List<Node> nodes){  return doCloneNodes(nodes,false);}  }
class C{  public void addMacro(String name,String value) throws LexerException {  try {    Macro m=new Macro(name);    StringLexerSource s=new StringLexerSource(value);    for (; ; ) {      Token tok=s.token();      if (tok.getType() == EOF)       break;      m.addToken(tok);    }    addMacro(m);  } catch (  IOException e) {    throw new LexerException(e);  }}  }
class C{  @Override public ClientConsumer createConsumer(final SimpleString queueName,final SimpleString filterString,final int windowSize,final int maxRate,final boolean browseOnly) throws ActiveMQException {  return internalCreateConsumer(queueName,filterString,windowSize,maxRate,browseOnly);}  }
class C{  protected float[] calcRowBC(final int lindex,final int levels[][]){  float rowBC[]=new float[levels[lindex].length];  GraphNode n;  for (int i=0; i < levels[lindex].length; i++) {    int sum=0;    n=m_nodes.get(levels[lindex][i]);    for (    int[] edge : n.edges) {      if (edge[1] > 0) {        sum++;        try {          rowBC[i]=rowBC[i] + indexOfElementInLevel(edge[0],levels[lindex + 1]) + 1;        } catch (        Exception ex) {          return null;        }      }    }    if (rowBC[i] != 0) {      rowBC[i]=rowBC[i] / sum;    }  }  return rowBC;}  }
class C{  private Consumer wrapVoidMethod(Method method){  return null;}  }
class C{  private void validateLocalUserExpiration(UsernamePasswordCredentials credentials){  if (!_passwordUtils.isLocalUser(credentials.getUserName())) {    return;  }  PasswordValidator validator=ValidatorFactory.buildExpireValidator(_passwordUtils.getConfigProperties());  Password password=new Password(credentials.getUserName(),credentials.getPassword(),null);  password.setPasswordHistory(_passwordUtils.getPasswordHistory(credentials.getUserName()));  validator.validate(password);}  }
class C{  private static int mod(int x,int y){  int res=x % y;  return res < 0 ? res + y : res;}  }
class C{  @LogMessageDoc(level="ERROR",message="Tried to write to switch {switch} but got {error}",explanation="An I/O error occured while trying to write a " + "static flow to a switch",recommendation=LogMessageDoc.CHECK_SWITCH) private void writeOFMessagesToSwitch(DatapathId dpid,List<OFMessage> messages){  IOFSwitch ofswitch=switchService.getSwitch(dpid);  if (ofswitch != null) {    if (log.isDebugEnabled()) {      log.debug("Sending {} new entries to {}",messages.size(),dpid);    }    ofswitch.write(messages);    ofswitch.flush();  }}  }
class C{  @Override public String toString(){  return this.name;}  }
class C{  public void removeElemento(Elemento elemento){  elementos.remove(elemento);}  }
class C{  synchronized void transactionSuspended() throws InvalidSessionHandleStateException {  TransactionContextStateHandler nextState=state.transactionSuspended();  setState(nextState);}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public void testDoubleValueNegative2(){  String a="-2746723894572364578265426346273456972";  double result=-2.7467238945723645E36;  double aNumber=new BigInteger(a).doubleValue();  assertTrue(aNumber == result);}  }
class C{  public boolean isDepreciated(){  Object oo=get_Value(COLUMNNAME_IsDepreciated);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void collectCompatibleExceptions(ClassDeclaration[] from,ClassDeclaration[] with,Vector<ClassDeclaration> list) throws ClassNotFound {  for (int i=0; i < from.length; i++) {    ClassDefinition exceptionDef=from[i].getClassDefinition(env);    if (!list.contains(from[i])) {      for (int j=0; j < with.length; j++) {        if (exceptionDef.subClassOf(env,with[j])) {          list.addElement(from[i]);          break;        }      }    }  }}  }
class C{  public static IRuntimeClasspathEntry[] computeMavenContainerEntries(IRuntimeClasspathEntry entry,ILaunchConfiguration config) throws CoreException {  IJavaProject project=entry.getJavaProject();  if (project == null) {    project=JavaRuntime.getJavaProject(config);  }  if (project == null || entry == null) {    return new IRuntimeClasspathEntry[0];  }  IClasspathContainer container=JavaCore.getClasspathContainer(entry.getPath(),project);  if (container == null) {    return null;  }  IClasspathEntry[] cpes=container.getClasspathEntries();  int property=-1;switch (container.getKind()) {case IClasspathContainer.K_APPLICATION:    property=IRuntimeClasspathEntry.USER_CLASSES;  break;case IClasspathContainer.K_DEFAULT_SYSTEM:property=IRuntimeClasspathEntry.STANDARD_CLASSES;break;case IClasspathContainer.K_SYSTEM:property=IRuntimeClasspathEntry.BOOTSTRAP_CLASSES;break;}List<IRuntimeClasspathEntry> resolved=new ArrayList<IRuntimeClasspathEntry>(cpes.length);for (int i=0; i < cpes.length; i++) {IClasspathEntry cpe=cpes[i];if (cpe.getEntryKind() == IClasspathEntry.CPE_PROJECT) {IProject p=ResourcesPlugin.getWorkspace().getRoot().getProject(cpe.getPath().segment(0));IJavaProject jp=JavaCore.create(p);IRuntimeClasspathEntry[] entries=JavaRuntime.resolveRuntimeClasspathEntry(new RuntimeClasspathEntry(cpe),jp);for (int j=0; j < entries.length; j++) {IRuntimeClasspathEntry e=entries[j];if (!(resolved.contains(e))) resolved.add(e);}} else {IRuntimeClasspathEntry e=new RuntimeClasspathEntry(cpe);if (!resolved.contains(e)) {resolved.add(e);}}}IRuntimeClasspathEntry[] result=new IRuntimeClasspathEntry[resolved.size()];for (int i=0; i < result.length; i++) {result[i]=(IRuntimeClasspathEntry)resolved.get(i);result[i].setClasspathProperty(property);}return result;}  }
class C{  static public String binary2ascii(byte[] data){  return binary2ascii(data,data.length);}  }
class C{  public boolean hleKernelUnRegisterCallback(int callbackType,int cbid){  boolean found=false;  for (  SceKernelThreadInfo thread : threadMap.values()) {    RegisteredCallbacks registeredCallbacks=thread.getRegisteredCallbacks(callbackType);    pspBaseCallback callback=registeredCallbacks.getCallbackInfoByUid(cbid);    if (callback != null) {      found=true;      if (registeredCallbacks.isCallbackReady(callback)) {        log.warn("hleKernelUnRegisterCallback(type=" + callbackType + ") removing pending callback");      }      registeredCallbacks.removeCallback(callback);      break;    }  }  if (!found) {    log.warn("hleKernelUnRegisterCallback(type=" + callbackType + ") cbid="+ Integer.toHexString(cbid)+ " no matching callbacks found");  }  return found;}  }
class C{  public boolean isLeaf(){  return true;}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);  builder.addAttribute(LABEL);  builder.addAttribute(PRIMARY);  builder.addAttribute(REL);}  }
class C{  public FastBuffer<E> append(E element){  if ((currentBuffer == null) || (offset == currentBuffer.length)) {    needNewBuffer(size + 1);  }  currentBuffer[offset]=element;  offset++;  size++;  return this;}  }
class C{  private final int tradeBonus(Position pos){  final int wM=pos.wMtrl;  final int bM=pos.bMtrl;  final int wPawn=pos.wMtrlPawns;  final int bPawn=pos.bMtrlPawns;  final int deltaScore=wM - bM;  int pBonus=0;  pBonus+=interpolate((deltaScore > 0) ? wPawn : bPawn,0,-30 * deltaScore / 100,6 * pV,0);  pBonus+=interpolate((deltaScore > 0) ? bM : wM,0,30 * deltaScore / 100,qV + 2 * rV + 2 * bV + 2 * nV,0);  return pBonus;}  }
class C{  public static MultiMap<Integer,Long> loadTaxonomyIdMapping(SequencesReader reader) throws IOException {  final AbstractSdfWriter.SequenceNameHandler handler=new AbstractSdfWriter.SequenceNameHandler();  final Map<String,Long> names=ReaderUtils.getSequenceNameMap(reader);  final Map<String,Integer> sequenceLookupMap=loadTaxonomyMapping(reader);  final MultiMap<Integer,Long> result=new MultiMap<>();  for (  Map.Entry<String,Integer> entry : sequenceLookupMap.entrySet()) {    final Long id=names.get(handler.handleSequenceName(entry.getKey()).label());    if (id != null) {      result.put(entry.getValue(),id);    }  }  return result;}  }
class C{  public static <T>T property(Object obj,String propName){  assert obj != null;  assert propName != null;  try {    Method m;    try {      m=obj.getClass().getMethod("get" + capitalFirst(propName));    } catch (    NoSuchMethodException ignored) {      m=obj.getClass().getMethod("is" + capitalFirst(propName));    }    assert F.isEmpty(m.getParameterTypes());    boolean accessible=m.isAccessible();    try {      m.setAccessible(true);      return (T)m.invoke(obj);    }  finally {      m.setAccessible(accessible);    }  } catch (  Exception e) {    throw new IgniteException("Failed to get property value [property=" + propName + ", obj="+ obj+ ']',e);  }}  }
class C{  private void addCdataSectionElement(String URI_and_localName,Vector v){  StringTokenizer tokenizer=new StringTokenizer(URI_and_localName,"{}",false);  String s1=tokenizer.nextToken();  String s2=tokenizer.hasMoreTokens() ? tokenizer.nextToken() : null;  if (null == s2) {    v.addElement(null);    v.addElement(s1);  } else {    v.addElement(s1);    v.addElement(s2);  }}  }
class C{  public Configuration createConfiguration(ConfigurationType type){  return createConfiguration(type,getTestData().targetDir);}  }
class C{  public void createSeries(CandleDataset source,int seriesIndex){  if (source.getSeries(seriesIndex) == null) {    throw new IllegalArgumentException("Null source (CandleDataset).");  }  for (int i=0; i < source.getSeries(seriesIndex).getItemCount(); i++) {    this.updateSeries(source.getSeries(seriesIndex),i,true);  }}  }
class C{  @Override public boolean isValidateRoot(){  return true;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:21.149 -0500",hash_original_method="C551D5FD0C0A2C72DAD755E48C68905F",hash_generated_method="413A64F040422761DF3E0A13371BE941") private final boolean parkAndCheckInterrupt(){  LockSupport.park(this);  return Thread.interrupted();}  }
class C{  public void runUpdateMethodsActions(String expectedFile,String... filesToLoad){  configureSourceFiles(filesToLoad);  runIntention(new UpdateGeneratedMethodsIntention(),expectedFile);  runAction(new UpdateGeneratedMethodsAction(),expectedFile);}  }
class C{  public boolean contains(GraphChange gc){  if (!removes.containsAll(gc.removes))   return false;  if (!colliders.containsAll(gc.colliders))   return false;  if (!nonColliders.containsAll(gc.nonColliders))   return false;  if (!orients.containsAll(gc.orients))   return false;  return true;}  }
class C{  public boolean validate(String address,String amount){  clearValidationState();  boolean validAddress=validateAddress(address);  boolean validAmount=validateAmount(amount);  return validAddress && validAmount;}  }
class C{  protected void onPosition(final double x,final double y){  fireChange(PROP_POSITION);}  }
class C{  @SuppressWarnings("unchecked") @Override public Character whetherBillExistsForProperty(final Property property,final String billnum,final Module module){  Character status=null;  Query qry=null;  List<EgBill> list;  if (property != null && billnum != null) {    final List<EgBill> egBillList=demandGenericDAO.getBillsByBillNumber(billnum,module);    if (egBillList == null || egBillList.isEmpty())     status='N'; else {      final EgBill egBill=egBillList.get(0);      if (egBill == null)       status='N'; else {        qry=getCurrentSession().createQuery("select egBill from  EgptPtdemand egptDem , EgBill egBill  where egptDem.egptProperty =:property and :egBill in elements(egptDem.egBills)   ");        qry.setEntity(PROPERTY,property);        qry.setEntity("egBill",egBill);        list=qry.list();        if (list.isEmpty())         status='N'; else         status='Y';      }    }  }  return status;}  }
class C{  private int updateSelectedKeys(){  int entries=pollWrapper.updated;  int numKeysUpdated=0;  for (int i=0; i < entries; i++) {    int nextFD=pollWrapper.getDescriptor(i);    SelectionKeyImpl ski=fdToKey.get(Integer.valueOf(nextFD));    if (ski != null) {      int rOps=pollWrapper.getEventOps(i);      if (selectedKeys.contains(ski)) {        if (ski.channel.translateAndSetReadyOps(rOps,ski)) {          numKeysUpdated++;        }      } else {        ski.channel.translateAndSetReadyOps(rOps,ski);        if ((ski.nioReadyOps() & ski.nioInterestOps()) != 0) {          selectedKeys.add(ski);          numKeysUpdated++;        }      }    }  }  return numKeysUpdated;}  }
class C{  public TurbolinksSession activity(Activity activity){  this.activity=activity;  Context webViewContext=webView.getContext();  if (webViewContext instanceof MutableContextWrapper) {    ((MutableContextWrapper)webViewContext).setBaseContext(this.activity);  }  return this;}  }
class C{  public void addRowSet(RowSet[] rowset,int[] columnIdx) throws SQLException {  if (rowset.length != columnIdx.length) {    throw new SQLException(resBundle.handleGetObject("joinrowsetimpl.numnotequal").toString());  } else {    for (int i=0; i < rowset.length; i++) {      ((CachedRowSetImpl)rowset[i]).setMatchColumn(columnIdx[i]);      addRowSet((Joinable)rowset[i]);    }  }}  }
class C{  public CategoryPointerAnnotation(String label,Comparable key,double value,double angle){  super(label,key,value);  this.angle=angle;  this.tipRadius=DEFAULT_TIP_RADIUS;  this.baseRadius=DEFAULT_BASE_RADIUS;  this.arrowLength=DEFAULT_ARROW_LENGTH;  this.arrowWidth=DEFAULT_ARROW_WIDTH;  this.labelOffset=DEFAULT_LABEL_OFFSET;  this.arrowStroke=new BasicStroke(1.0f);  this.arrowPaint=Color.black;}  }
class C{  public DESedeCipher(){  core=new CipherCore(new DESedeCrypt(),DESConstants.DES_BLOCK_SIZE);}  }
class C{  public void deleteMax(){  if (isEmpty())   throw new NoSuchElementException("Symbol table underflow");  root=deleteMax(root);  assert check();}  }
class C{  public void flush(){synchronized (this) {    try {      ensureOpen();      out.flush();    } catch (    IOException x) {      trouble=true;    }  }}  }
class C{  public RefUpdate.Result modifyFile(ChangeEdit edit,String file,RawInput content) throws AuthException, InvalidChangeOperationException, IOException {  return modify(TreeOperation.CHANGE_ENTRY,edit,file,null,content);}  }
class C{  public CInsertNotOperatorAction(final CCriteriumTree tree,final CCriteriumTreeNode parent){  super("Insert NOT");  m_tree=tree;  m_parent=parent;}  }
class C{  public String convertTimeUnitToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  @Override protected void removeAt(int index){  _values[index]=(V)TObjectHash.REMOVED;  super.removeAt(index);}  }
class C{  private void push(final int type){  if (outputStack == null) {    outputStack=new int[10];  }  int n=outputStack.length;  if (outputStackTop >= n) {    int[] t=new int[Math.max(outputStackTop + 1,2 * n)];    System.arraycopy(outputStack,0,t,0,n);    outputStack=t;  }  outputStack[outputStackTop++]=type;  int top=owner.inputStackTop + outputStackTop;  if (top > owner.outputStackMax) {    owner.outputStackMax=top;  }}  }
class C{  public void terminate() throws DebugException {  try {    m_debugger.terminate();  } catch (  final DebugExceptionWrapper e) {    throw new DebugException(e);  }}  }
class C{  @After public void cleanUp(){  String folder=utils.getClassInputDirectory();  File inputFolder=new File(folder + "raw/");  File processedFolder=new File(folder + "processed/");  File logFolder=new File(folder + "logs/");  File monthlyFolder=new File(folder + "monthly/");  FileUtils.delete(inputFolder);  FileUtils.delete(processedFolder);  FileUtils.delete(logFolder);  FileUtils.delete(monthlyFolder);}  }
class C{  @ConstructorProperties({"bevelType","highlightOuterColor","highlightInnerColor","shadowOuterColor","shadowInnerColor"}) public BevelBorder(int bevelType,Color highlightOuterColor,Color highlightInnerColor,Color shadowOuterColor,Color shadowInnerColor){  this(bevelType);  this.highlightOuter=highlightOuterColor;  this.highlightInner=highlightInnerColor;  this.shadowOuter=shadowOuterColor;  this.shadowInner=shadowInnerColor;}  }
class C{  public HessianRuntimeException(String message,Throwable rootCause){  super(message);  this.rootCause=rootCause;}  }
class C{  private boolean changeParameters(TestChromosome test,int statement){  logger.debug("Changing parameters");  Statement stmt=test.getTestCase().getStatement(statement);  if (stmt instanceof MethodStatement) {    return replaceMethodParameter(test,(MethodStatement)stmt);  } else   if (stmt instanceof ConstructorStatement) {    return replaceConstructorParameter(test,(ConstructorStatement)stmt);  } else   if (stmt instanceof FieldStatement) {    return replaceFieldSource(test,(FieldStatement)stmt);  } else {    return false;  }}  }
class C{  private void killConsist(){  if (validLocoAdr(locoTextField1.getText()) < 0) {    return;  }  int locoAddr=getLocoAddr(locoTextField1,adrButton1);  sendNceBinaryCommand(locoAddr,NceBinaryCommand.LOCO_CMD_KILL_CONSIST,(byte)0);}  }
class C{  public void methodEntered(MethodEntryEvent event){  if (testFailed) {    return;  }  ObjectReference theThis;  try {    theThis=event.thread().frame(0).thisObject();  } catch (  IncompatibleThreadStateException ee) {    failure("FAILED: Exception occured in methodEntered: " + ee);    return;  }  if (theThis == null) {    methodEntryRequest.disable();    return;  }  if (!theThis.equals(theInstance)) {    failure("FAILED: Got a hit on a non-selected instance");  }{    String methodStr=event.location().method().name();    if (methodCount >= expectedMethods.length) {      failure("FAILED: Got too many methodEntryEvents");    } else     if (methodStr.indexOf(expectedMethods[methodCount]) == -1) {      failure("FAILED: Expected method: " + expectedMethods[methodCount]);    }    methodCount++;    println("Method: " + methodStr);  }}  }
class C{  public void allowMultiple(){  this.allowMultiple=true;}  }
class C{  public void encode(RenderedImage im) throws IOException {  compression=tparam.getCompression();  isTiled=((TIFFEncodeParam)param).getWriteTiled();  getImageFields(im);  if (compression == XTIFF.COMPRESSION_NONE) {    computeIFDOffset();    writeFileHeader(firstIFDOffset);    currentOffset=8;    writeImageData(im,output);    writeDirectory(directory.getFields(),0);  } else {    currentOffset=8;    File tmp=null;    try {      tmp=createTemp();      OutputStream tmpOut=new FileOutputStream(tmp);      int total=writeImageData(im,tmpOut);      tmpOut.close();      writeFileHeader(currentOffset + currentOffset % 2);      copyImageData(tmp,output,total);      writeDirectory(directory.getFields(),0);    }  finally {      if (tmp != null)       tmp.delete();    }  }}  }
class C{  private void initBounds(){  fBounds.clear();  fBounds.add(OBJECT_SIGNATURE);}  }
class C{  public boolean hasTDBTClassDefinition(){  return tdbtCD != null;}  }
class C{  public final int _exptype(int identity){  return m_exptype.elementAt(identity);}  }
class C{  protected void addName(){  if (Strings.isNotEmpty(builder)) {    int endOffset=0;    if (Strings.endsWith(builder,tagSeparator)) {      endOffset=1;    }    if (Strings.startsWith(builder,inheritanceMarker)) {      inherits.add(builder.substring(1,builder.length() - endOffset));    } else {      tags.add(builder.substring(0,builder.length() - endOffset));    }    Strings.clearBuilder(builder);  }}  }
class C{  protected void analyzePixels(){  int len=pixels.length;  int nPix=len / 3;  indexedPixels=new byte[nPix];  NeuQuant nq=new NeuQuant(pixels,len,sample);  colorTab=nq.process();  for (int i=0; i < colorTab.length; i+=3) {    byte temp=colorTab[i];    colorTab[i]=colorTab[i + 2];    colorTab[i + 2]=temp;    usedEntry[i / 3]=false;  }  int k=0;  for (int i=0; i < nPix; i++) {    int index=nq.map(pixels[k++] & 0xff,pixels[k++] & 0xff,pixels[k++] & 0xff);    usedEntry[index]=true;    indexedPixels[i]=(byte)index;  }  pixels=null;  colorDepth=8;  palSize=7;  if (transparent != null) {    transIndex=findClosest(transparent);  }}  }
class C{  public void error(Object message){}  }
class C{  private boolean checkRequirements(String setting,String channel){  boolean channelActive=channels.getLastActiveChannel().getName().equals(channel);  boolean appActive=isAppActive();  if (setting.equals("off")) {    return false;  }  if (setting.equals("both") && (channelActive || appActive)) {    return false;  }  if (setting.equals("channel") && channelActive) {    return false;  }  if (setting.equals("app") && appActive) {    return false;  }  if (setting.equals("either") && (channelActive && appActive)) {    return false;  }  if (setting.equals("channelActive") && !channelActive) {    return false;  }  return true;}  }
class C{  protected final void clearPositionCache(){  if (fCachedPositions != null) {    fCachedPositions=null;  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (stack.getUIMgr() != null && stack.getUIMgr().getUIClientType() == UIClient.REMOTE_UI && stack.getUIMgr().getRootPanel().getRenderEngine() instanceof MiniClientSageRenderer) {    MiniClientSageRenderer mcsr=(MiniClientSageRenderer)stack.getUIMgr().getRootPanel().getRenderEngine();    if (mcsr.supportsAdvancedAspectRatios()) {      return mcsr.getAdvancedAspectRatioOptions();    } else     if (mcsr.isMediaExtender())     return Pooler.EMPTY_STRING_ARRAY;  }  return BasicVideoFrame.getAspectRatioModes();}  }
class C{  public static <L,R>Pair<L,R> of(L left,R right){  Pair<L,R> pair=new Pair<L,R>();  pair.left=left;  pair.right=right;  return pair;}  }
class C{  public void importChildFilesToTempParentTable(final String childTableName) throws Exception {  final String tempChildTable=childTableName + TEMP_SUFFIX;  createTempTableIfNeeded(tempChildTable);  final AccumuloRdfConfiguration parentAccumuloRdfConfiguration=new AccumuloRdfConfiguration(conf);  parentAccumuloRdfConfiguration.setTablePrefix(childTablePrefix);  final Connector parentConnector=AccumuloRyaUtils.setupConnector(parentAccumuloRdfConfiguration);  final TableOperations parentTableOperations=parentConnector.tableOperations();  final Path localWorkDir=CopyTool.getPath(localMergeFileImportDir,childTableName);  final Path hdfsBaseWorkDir=CopyTool.getPath(baseImportDir,childTableName);  CopyTool.copyLocalToHdfs(localWorkDir,hdfsBaseWorkDir,conf);  final Path files=CopyTool.getPath(hdfsBaseWorkDir.toString(),"files");  final Path failures=CopyTool.getPath(hdfsBaseWorkDir.toString(),"failures");  final FileSystem fs=FileSystem.get(conf);  fs.setPermission(hdfsBaseWorkDir,new FsPermission(FsAction.ALL,FsAction.ALL,FsAction.ALL));  if (fs.exists(failures)) {    fs.delete(failures,true);  }  fs.mkdirs(failures);  parentTableOperations.importDirectory(tempChildTable,files.toString(),failures.toString(),false);  AccumuloRyaUtils.printTablePretty(tempChildTable,conf);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (hasBracesAroundBody: ");  result.append(hasBracesAroundBody);  result.append(')');  return result.toString();}  }
class C{  private void fillBuf() throws IOException {  int result=in.read(buf,0,buf.length);  if (result == -1) {    throw new EOFException();  }  pos=0;  end=result;}  }
class C{  public static char[] toChars(int codePoint){  if (!isValidCodePoint(codePoint)) {    throw new IllegalArgumentException();  }  if (isSupplementaryCodePoint(codePoint)) {    int cpPrime=codePoint - 0x10000;    int high=0xD800 | ((cpPrime >> 10) & 0x3FF);    int low=0xDC00 | (cpPrime & 0x3FF);    return new char[]{(char)high,(char)low};  }  return new char[]{(char)codePoint};}  }
class C{  protected ShapePainter createShapePainter(BridgeContext ctx,Element e,ShapeNode shapeNode){  ShapePainter fillAndStroke;  fillAndStroke=createFillStrokePainter(ctx,e,shapeNode);  ShapePainter markerPainter=createMarkerPainter(ctx,e,shapeNode);  Shape shape=shapeNode.getShape();  ShapePainter painter;  if (markerPainter != null) {    if (fillAndStroke != null) {      CompositeShapePainter cp=new CompositeShapePainter(shape);      cp.addShapePainter(fillAndStroke);      cp.addShapePainter(markerPainter);      painter=cp;    } else {      painter=markerPainter;    }  } else {    painter=fillAndStroke;  }  return painter;}  }
class C{  public void removeAllZeros(){  Iterator<Map.Entry<K,AtomicLong>> entryIterator=map.entrySet().iterator();  while (entryIterator.hasNext()) {    Map.Entry<K,AtomicLong> entry=entryIterator.next();    AtomicLong atomic=entry.getValue();    if (atomic != null && atomic.get() == 0L) {      entryIterator.remove();    }  }}  }
class C{  private int pop(){  if (outputStackTop > 0) {    return outputStack[--outputStackTop];  } else {    return STACK | -(--owner.inputStackTop);  }}  }
class C{  @RequestMapping(value="",method={RequestMethod.GET}) @ResponseBody public List<JobInstance> list(JobListRequest jobRequest){  List<JobInstance> jobInstanceList=Collections.emptyList();  List<JobStatusEnum> statusList=new ArrayList<JobStatusEnum>();  if (null != jobRequest.getStatus()) {    for (    int status : jobRequest.getStatus()) {      statusList.add(JobStatusEnum.getByCode(status));    }  }  JobTimeFilterEnum timeFilter=JobTimeFilterEnum.getByCode(jobRequest.getTimeFilter());  try {    jobInstanceList=jobService.listAllJobs(jobRequest.getCubeName(),jobRequest.getProjectName(),statusList,jobRequest.getLimit(),jobRequest.getOffset(),timeFilter);  } catch (  Exception e) {    logger.error(e.getLocalizedMessage(),e);    throw new InternalErrorException(e);  }  return jobInstanceList;}  }
class C{  private void addImageSharingInvitationNotification(Intent invitation,ImageSharingDAO ishDao){  ContactId contact=ishDao.getContact();  if (contact == null) {    if (LogUtils.isActive) {      Log.e(LOGTAG,"addImageSharingInvitationNotification failed: cannot parse contact");    }    return;  }  Intent intent=new Intent(invitation);  intent.setClass(this,ReceiveImageSharing.class);  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  int uniqueId=Utils.getUniqueIdForPendingIntent();  PendingIntent contentIntent=PendingIntent.getActivity(this,uniqueId,intent,PendingIntent.FLAG_ONE_SHOT);  String displayName=RcsContactUtil.getInstance(this).getDisplayName(contact);  String title=getString(R.string.title_recv_image_sharing);  NotificationCompat.Builder notif=new NotificationCompat.Builder(this);  notif.setContentIntent(contentIntent);  notif.setSmallIcon(R.drawable.ri_notif_csh_icon);  notif.setWhen(System.currentTimeMillis());  notif.setAutoCancel(true);  notif.setOnlyAlertOnce(true);  notif.setSound(RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION));  notif.setDefaults(Notification.DEFAULT_VIBRATE);  notif.setContentTitle(title);  notif.setContentText(getString(R.string.label_from_args,displayName));  NotificationManager notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);  notificationManager.notify(uniqueId,notif.build());}  }
class C{  public EdgeEffect(Context context){  mPaint.setAntiAlias(true);  final int themeColor=Color.RED;  mPaint.setColor((themeColor & 0xffffff) | 0x33000000);  mPaint.setStyle(Paint.Style.FILL);  mPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_ATOP));  mInterpolator=new DecelerateInterpolator();}  }
class C{  public static void checkConnectionStateParameters(HttpsURLConnection clientConnection,SSLSocket serverPeer) throws Exception {  SSLSession session=serverPeer.getSession();  assertEquals(session.getCipherSuite(),clientConnection.getCipherSuite());  assertEquals(session.getLocalPrincipal(),clientConnection.getPeerPrincipal());  assertEquals(session.getPeerPrincipal(),clientConnection.getLocalPrincipal());  Certificate[] serverCertificates=clientConnection.getServerCertificates();  Certificate[] localCertificates=session.getLocalCertificates();  assertTrue("Server certificates differ from expected",Arrays.equals(serverCertificates,localCertificates));  localCertificates=clientConnection.getLocalCertificates();  serverCertificates=session.getPeerCertificates();  assertTrue("Local certificates differ from expected",Arrays.equals(serverCertificates,localCertificates));}  }
class C{  public NodeVector(int blocksize){  m_blocksize=blocksize;  m_mapSize=0;}  }
class C{  public static boolean isM2EMavenContainer(IRuntimeClasspathEntry entryCur){  return entryCur.getType() == IRuntimeClasspathEntry.CONTAINER && ((MAVEN_CONTAINER_ID.equals(entryCur.getVariableName()) || NEW_MAVEN_CONTAINER_ID.equals(entryCur.getVariableName())));}  }
class C{  public BigInteger optBigInteger(String key,BigInteger defaultValue){  try {    return this.getBigInteger(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void triggerJob(JobKey jobKey,JobDataMap data) throws SchedulerException {  try {    getRemoteScheduler().triggerJob(jobKey,data);  } catch (  RemoteException re) {    throw invalidateHandleCreateException("Error communicating with remote scheduler.",re);  }}  }
class C{  @Override protected void commit(char[] text,int off,int len){  builder.append(text,off,len);  if (off + len < count) {    builder.append('-');  }}  }
class C{  protected void sequence_AnnotatedExportableElement_ExportedVariableStatement(ISerializationContext context,ExportedVariableStatement semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public LocalDateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour,int secondOfMinute,int millisOfSecond){  this(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,secondOfMinute,millisOfSecond,ISOChronology.getInstanceUTC());}  }
class C{  public String substring(int start){  return substring(start,text.length - start);}  }
class C{  @Override public Token nextToken(){  Token t=super.nextToken();  while (t.getType() == STLexer.NEWLINE || t.getType() == STLexer.INDENT) {    t=super.nextToken();  }  return t;}  }
class C{  public boolean isMinValueSet(){  return mMinValue != MathHelper.NULL_VALUE;}  }
class C{  public double resolveValue(HasAggregations root){  HasAggregations parent=root;  double value=Double.NaN;  for (int i=0; i < pathElements.size(); i++) {    AggregationPath.PathElement token=pathElements.get(i);    Aggregation agg=parent.getAggregations().get(token.name);    if (agg == null) {      throw new IllegalArgumentException("Invalid order path [" + this + "]. Cannot find aggregation named ["+ token.name+ "]");    }    if (agg instanceof SingleBucketAggregation) {      if (token.key != null && !token.key.equals("doc_count")) {        throw new IllegalArgumentException("Invalid order path [" + this + "]. Unknown value key ["+ token.key+ "] for single-bucket aggregation ["+ token.name+ "]. Either use [doc_count] as key or drop the key all together");      }      parent=(SingleBucketAggregation)agg;      value=((SingleBucketAggregation)agg).getDocCount();      continue;    }    if (i != pathElements.size() - 1) {      throw new IllegalArgumentException("Invalid order path [" + this + "]. Metrics aggregations cannot have sub-aggregations (at ["+ token+ ">"+ pathElements.get(i + 1)+ "]");    }    if (agg instanceof InternalNumericMetricsAggregation.SingleValue) {      if (token.key != null && !token.key.equals("value")) {        throw new IllegalArgumentException("Invalid order path [" + this + "]. Unknown value key ["+ token.key+ "] for single-value metric aggregation ["+ token.name+ "]. Either use [value] as key or drop the key all together");      }      parent=null;      value=((InternalNumericMetricsAggregation.SingleValue)agg).value();      continue;    }    if (token.key == null) {      throw new IllegalArgumentException("Invalid order path [" + this + "]. Missing value key in ["+ token+ "] which refers to a multi-value metric aggregation");    }    parent=null;    value=((InternalNumericMetricsAggregation.MultiValue)agg).value(token.key);  }  return value;}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/discover") @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public TaskResourceRep discoverComputeSystem(@PathParam("id") URI id){  ArgValidator.checkFieldUriType(id,ComputeSystem.class,"id");  ComputeSystem cs=queryObject(ComputeSystem.class,id,true);  return doDiscoverComputeSystem(cs);}  }
class C{  private int currentDepth(){  try {    Integer oneBased=((Integer)DEPTH_FIELD.get(this));    return oneBased - 1;  } catch (  IllegalAccessException e) {    throw new AssertionError(e);  }}  }
class C{  @Override public E remove(int index){  Object[] a=array;  int s=size;  if (index >= s) {    throwIndexOutOfBoundsException(index,s);  }  @SuppressWarnings("unchecked") E result=(E)a[index];  System.arraycopy(a,index + 1,a,index,--s - index);  a[s]=null;  size=s;  modCount++;  return result;}  }
class C{  public static Map<String,String> parseResponse(String response){  Map<String,String> keyValueMap=new HashMap<String,String>();  StringTokenizer st=new StringTokenizer(response,"\n\r");  while (st.hasMoreTokens()) {    String[] keyValue=st.nextToken().split("=");    keyValueMap.put(keyValue[0],keyValue[1]);  }  return keyValueMap;}  }
class C{  public String join(String separator) throws JSONException {  int len=this.length();  StringBuilder sb=new StringBuilder();  for (int i=0; i < len; i+=1) {    if (i > 0) {      sb.append(separator);    }    sb.append(JSONObject.valueToString(this.myArrayList.get(i)));  }  return sb.toString();}  }
class C{  private int consistencyCheck(Table table,long row,long range) throws Exception {  int id=-1;  if (checkDirect) {    id=TungstenPlugin.findNextConsistencyId(masterDbUser,consistencyTable);    ConsistencyCheck cc=ConsistencyCheckFactory.createConsistencyCheck(id,table,(int)row,(int)range,getMethod(),false,false);    masterDbUser.consistencyCheck(consistencyTable,cc);    copyMasterCCToSlave(cc,table.getSchema(),table.getName(),slaveDbTungsten[0]);  } else {    id=master.consistencyCheck(getMethod(),schema,table.getName(),(int)row,(int)range);  }  return id;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.179 -0400",hash_original_method="F780A988130671754B895961F74E12C5",hash_generated_method="60D7F2976CB5710298C5563E9CC25D12") public CancelException(String message,File file,int depth){  super(message);  this.file=file;  this.depth=depth;}  }
class C{  public boolean contains(BoundEntity ent){  SearchEntry compare=new SearchEntry(ent.getRef(),ent.getProvider());  if (ent instanceof Song) {    return mAllSongs.contains(compare);  } else   if (ent instanceof Artist) {    return mAllArtists.contains(compare);  } else   if (ent instanceof Album) {    return mAllAlbums.contains(compare);  } else   if (ent instanceof Playlist) {    return mAllPlaylists.contains(compare);  }  return false;}  }
class C{  private Rectangle2D createShadow(RectangularShape bar,double xOffset,double yOffset,RectangleEdge base,boolean pegShadow){  double x0=bar.getMinX();  double x1=bar.getMaxX();  double y0=bar.getMinY();  double y1=bar.getMaxY();  if (base == RectangleEdge.TOP) {    x0+=xOffset;    x1+=xOffset;    if (!pegShadow) {      y0+=yOffset;    }    y1+=yOffset;  } else   if (base == RectangleEdge.BOTTOM) {    x0+=xOffset;    x1+=xOffset;    y0+=yOffset;    if (!pegShadow) {      y1+=yOffset;    }  } else   if (base == RectangleEdge.LEFT) {    if (!pegShadow) {      x0+=xOffset;    }    x1+=xOffset;    y0+=yOffset;    y1+=yOffset;  } else   if (base == RectangleEdge.RIGHT) {    x0+=xOffset;    if (!pegShadow) {      x1+=xOffset;    }    y0+=yOffset;    y1+=yOffset;  }  return new Rectangle2D.Double(x0,y0,(x1 - x0),(y1 - y0));}  }
class C{  public ImageResource copy(long objectKey){  ImageResource newImageResource=new ImageResource();  newImageResource.setObjectKey(objectKey);  newImageResource.setBuffer(this.getBuffer());  newImageResource.setImageType(this.getImageType());  newImageResource.setContentType(this.getContentType());  return newImageResource;}  }
class C{  public static int composeSegment(@IntRange(from=MIN_SEGMENT,to=MAX_SEGMENT) int segment,int wrappedViewType){  if (segment < MIN_SEGMENT || segment > MAX_SEGMENT) {    throw new IllegalArgumentException("Segment value is out of range. (segment = " + segment + ")");  }  return (segment << BIT_OFFSET_SEGMENT) | (wrappedViewType & (BIT_MASK_EXPANDABLE_FLAG | BIT_MASK_WRAPPED_VIEW_TYPE));}  }
class C{  void sccp(Method m){  addTraceAttr("Method",m);  Deque<Block> code=dfs(m.entry.to);  EdgeMap<Expr> uses=findUses(code);  Map<Expr,Object> values=new TreeMap<Expr,Object>();  Map<Expr,Typeref> types=new TreeMap<Expr,Typeref>();  Set<Edge> reached=new TreeSet<Edge>();  sccp_analyze(m,uses,values,types,reached);  verboseStatus("REACHED " + reached);  verboseStatus("TYPES " + types);  sccp_cfgopt(values,types,reached);  dce(m);  code=dfs(m.entry.to);  uses=findUses(code);  TreeSet<Expr> work=new TreeSet<Expr>();  for (  Block b : code)   for (  Expr e : b)   work.add(e);  while (!work.isEmpty()) {    Expr e=getExpr(work);    sccp_modify(m,uses,values,types,e,work);  }  dce(m);}  }
class C{  public void onReduceCleanup() throws IOException, InterruptedException {}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement newChild){  int type=((ElemTemplateElement)newChild).getXSLToken();switch (type) {case Constants.ELEMNAME_TEXTLITERALRESULT:case Constants.ELEMNAME_APPLY_TEMPLATES:case Constants.ELEMNAME_APPLY_IMPORTS:case Constants.ELEMNAME_CALLTEMPLATE:case Constants.ELEMNAME_FOREACH:case Constants.ELEMNAME_VALUEOF:case Constants.ELEMNAME_COPY_OF:case Constants.ELEMNAME_NUMBER:case Constants.ELEMNAME_CHOOSE:case Constants.ELEMNAME_IF:case Constants.ELEMNAME_TEXT:case Constants.ELEMNAME_COPY:case Constants.ELEMNAME_VARIABLE:case Constants.ELEMNAME_MESSAGE:    break;default :  error(XSLTErrorResources.ER_CANNOT_ADD,new Object[]{newChild.getNodeName(),this.getNodeName()});}return super.appendChild(newChild);}  }
class C{  public boolean addURL(Path path,boolean isScanned){  URL url=pathToURL(path);  if (url == null)   return false; else   if (containsURL(url))   return false; else {    addURL(url,isScanned);    return true;  }}  }
class C{  public static int binarySearch(float[] a,float key){  return binarySearch(a,key,0,a.length - 1);}  }
class C{  public static void unconfigureJCheckBoxMenuItem(JCheckBoxMenuItem mi,Action a){  mi.setAction(null);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:40.043 -0500",hash_original_method="C508883C202336989018472FC420E1EA",hash_generated_method="5646E4AECD89E9D0C3A80970E4BB3B1E") synchronized void release(SQLiteDatabase db){  if (Log.isLoggable(TAG,Log.DEBUG)) {    assert db.mConnectionNum > 0;    doAsserts();    assert mPool.get(db.mConnectionNum - 1).mDb == db;  }  PoolObj poolObj=mPool.get(db.mConnectionNum - 1);  if (Log.isLoggable(TAG,Log.DEBUG)) {    Log.d(TAG,"BEGIN release-conn: " + toString() + poolObj.toString());  }  if (poolObj.isFree()) {    throw new IllegalStateException("Releasing object already freed: " + db.mConnectionNum);  }  poolObj.release();  if (Log.isLoggable(TAG,Log.DEBUG)) {    Log.d(TAG,"END release-conn: " + toString() + poolObj.toString());  }}  }
class C{  public X509Name(boolean reverse,String dirName,X509NameEntryConverter converter){  this(reverse,DefaultLookUp,dirName,converter);}  }
class C{  private String buildVALUESClause(List<BindingSet> bindings,List<String> relevantBindingNames) throws QueryEvaluationException {  StringBuilder sb=new StringBuilder();  sb.append(" VALUES (?__rowIdx");  for (  String bName : relevantBindingNames) {    sb.append(" ?").append(bName);  }  sb.append(") { ");  int rowIdx=0;  for (  BindingSet b : bindings) {    sb.append(" (");    sb.append("\"").append(rowIdx++).append("\" ");    for (    String bName : relevantBindingNames) {      appendValueAsString(sb,b.getValue(bName)).append(" ");    }    sb.append(")");  }  sb.append(" }");  return sb.toString();}  }
class C{  public void testLabels(){  performTest(getFilter(false,"__blah,__blubber"));}  }
class C{  private TinyPlanetImage createFinalTinyPlanet(){  mResultLock.lock();  try {    mResultBitmap.recycle();    mResultBitmap=null;    mSourceBitmap.recycle();    mSourceBitmap=null;  }  finally {    mResultLock.unlock();  }  Bitmap sourceBitmap=createPaddedSourceImage(mSourceImageUri,false);  int width=sourceBitmap.getWidth();  int height=sourceBitmap.getHeight();  int outputSize=width / 2;  Bitmap resultBitmap=Bitmap.createBitmap(outputSize,outputSize,Bitmap.Config.ARGB_8888);  TinyPlanetNative.process(sourceBitmap,width,height,resultBitmap,outputSize,mCurrentZoom,mCurrentAngle);  sourceBitmap.recycle();  sourceBitmap=null;  ByteArrayOutputStream jpeg=new ByteArrayOutputStream();  resultBitmap.compress(CompressFormat.JPEG,100,jpeg);  return new TinyPlanetImage(addExif(jpeg.toByteArray()),outputSize);}  }
class C{  public static boolean isClassFile(IResource resource){  if (resource == null || (resource.getType() != IResource.FILE)) {    return false;  }  String ex=resource.getFileExtension();  return "class".equalsIgnoreCase(ex);}  }
class C{  public boolean containsAll(Collection<?> collection){synchronized (children) {    return children.keySet().containsAll(collection);  }}  }
class C{  public static ConfigServerImpl newInstance(CFMLEngineImpl engine,Map<String,CFMLFactory> initContextes,Map<String,CFMLFactory> contextes,Resource configDir) throws SAXException, ClassException, PageException, IOException, TagLibException, FunctionLibException, BundleException {  boolean isCLI=SystemUtil.isCLICall();  if (isCLI) {    Resource logs=configDir.getRealResource("logs");    logs.mkdirs();    Resource out=logs.getRealResource("out");    Resource err=logs.getRealResource("err");    ResourceUtil.touch(out);    ResourceUtil.touch(err);    if (logs instanceof FileResource) {      SystemUtil.setPrintWriter(SystemUtil.OUT,new PrintWriter((FileResource)out));      SystemUtil.setPrintWriter(SystemUtil.ERR,new PrintWriter((FileResource)err));    } else {      SystemUtil.setPrintWriter(SystemUtil.OUT,new PrintWriter(IOUtil.getWriter(out,"UTF-8")));      SystemUtil.setPrintWriter(SystemUtil.ERR,new PrintWriter(IOUtil.getWriter(err,"UTF-8")));    }  }  SystemOut.print(SystemUtil.getPrintWriter(SystemUtil.OUT),"===================================================================\n" + "SERVER CONTEXT\n" + "-------------------------------------------------------------------\n"+ "- config:" + configDir + "\n"+ "- loader-version:"+ SystemUtil.getLoaderVersion()+ "\n"+ "- core-version:"+ engine.getInfo().getVersion()+ "\n"+ "===================================================================\n");  int iDoNew=doNew(engine,configDir,false);  boolean doNew=iDoNew != NEW_NONE;  Resource configFile=configDir.getRealResource("lucee-server.xml");  if (!configFile.exists()) {    configFile.createFile(true);    createFileFromResource("/resource/config/server.xml",configFile.getAbsoluteResource(),"tpiasfap");  }  Document doc=loadDocumentCreateIfFails(configFile,"server");  Element luceeConfiguration=doc.getDocumentElement();  String strVersion=luceeConfiguration.getAttribute("version");  double version=Caster.toDoubleValue(strVersion,1.0d);  boolean cleanupDatasources=version < 5.0D;  ConfigServerImpl config=new ConfigServerImpl(engine,initContextes,contextes,configDir,configFile);  load(config,doc,false,doNew);  createContextFiles(configDir,config,doNew,cleanupDatasources);  ((CFMLEngineImpl)ConfigWebUtil.getEngine(config)).onStart(config,false);  return config;}  }
class C{  public static final void convertColor(Color color,float[] destination){  color.getRGBComponents(destination);}  }
class C{  public Version version(){  return VersionUtil.versionFor(getClass());}  }
class C{  public static void validateNoDuplicates(final SequencesReader reader,boolean noMax){  if (!reader.hasNames()) {    throw new NoTalkbackSlimException(ErrorType.INFO_ERROR,"SDF: " + reader.path() + " has no name data");  }  if (!noMax && reader.numberSequences() > MAX_NO_DUP_SEQUENCE_COUNT) {    Diagnostic.warning("Too many sequences to check for duplicate sequence names.");    return;  }  try {    if (NameDuplicateDetector.checkSequence(reader,null)) {      throw new NoTalkbackSlimException(ErrorType.INFO_ERROR,"Duplicate sequence names detected in SDF: " + reader.path());    }  } catch (  final IOException e) {    throw new NoTalkbackSlimException(ErrorType.INFO_ERROR,"Unable to read SDF: " + reader.path() + " ("+ e.getMessage()+ ")");  }}  }
class C{  public void finishLoadingDetail(@NotNull Resource resource,@NotNull Eml eml,@NotNull BigDecimal version){  String name=resource.getShortname();  File dwcaFile=dataDir.resourceDwcaFile(name,version);  if (dwcaFile.exists()) {    dwcaSizeForVersion=FileUtils.formatSize(dwcaFile.length(),0);  } else {    metadataOnly=true;  }  File emlFile=dataDir.resourceEmlFile(name,version);  emlSizeForVersion=FileUtils.formatSize(emlFile.length(),0);  File rtfFile=dataDir.resourceRtfFile(name,version);  rtfSizeForVersion=FileUtils.formatSize(rtfFile.length(),0);  for (  VersionHistory history : resource.getVersionHistory()) {    if (version.compareTo(new BigDecimal(history.getVersion())) == 0) {      recordsPublishedForVersion=history.getRecordsPublished();    }  }  if (metadataOnly && recordsPublishedForVersion > 0) {    addActionWarning(getText("portal.resource.version.notArchived.count",new String[]{String.valueOf(recordsPublishedForVersion)}));  }  if (eml.getTaxonomicCoverages() != null) {    organizedCoverages=constructOrganizedTaxonomicCoverages(eml.getTaxonomicCoverages());  }  roles=new LinkedHashMap<String,String>();  roles.putAll(vocabManager.getI18nVocab(Constants.VOCAB_URI_ROLES,getLocaleLanguage(),false));  preservationMethods=new LinkedHashMap<String,String>();  preservationMethods.putAll(vocabManager.getI18nVocab(Constants.VOCAB_URI_PRESERVATION_METHOD,getLocaleLanguage(),false));  languages=vocabManager.getI18nVocab(Constants.VOCAB_URI_LANGUAGE,getLocaleLanguage(),true);  countries=new LinkedHashMap<String,String>();  countries.putAll(vocabManager.getI18nVocab(Constants.VOCAB_URI_COUNTRY,getLocaleLanguage(),true));  ranks=new LinkedHashMap<String,String>();  ranks.putAll(vocabManager.getI18nVocab(Constants.VOCAB_URI_RANKS,getLocaleLanguage(),false));  frequencies=new LinkedHashMap<String,String>();  frequencies.putAll(vocabManager.getI18nVocab(Constants.VOCAB_URI_UPDATE_FREQUENCIES,getLocaleLanguage(),false));}  }
class C{  public static void writeStringList(IonWriter writer,String[] values) throws IOException {  if (writer instanceof PrivateListWriter) {    ((PrivateListWriter)writer).writeStringList(values);    return;  }  writer.stepIn(IonType.LIST);  for (int ii=0; ii < values.length; ii++) {    writer.writeString(values[ii]);  }  writer.stepOut();}  }
class C{  @Override public void onPaymentProductCallComplete(PaymentProduct paymentProduct){  paymentRequest.setPaymentProduct(paymentProduct);  inputDataPersister.setPaymentItem(paymentProduct);  showDrawableInEditText(paymentProduct.getId());  renderInputFieldsLayout.removeAllViews();  renderInputFields(true);}  }
class C{  private JCExpression bridgeExpressionNew(){  if (tree.kind == ReferenceKind.ARRAY_CTOR) {    JCNewArray newArr=make.NewArray(make.Type(types.elemtype(tree.getQualifierExpression().type)),List.of(make.Ident(params.first())),null);    newArr.type=tree.getQualifierExpression().type;    return newArr;  } else {    JCExpression encl=null;switch (tree.kind) {case UNBOUND:case IMPLICIT_INNER:      encl=make.Ident(params.first());  }  JCNewClass newClass=make.NewClass(encl,List.<JCExpression>nil(),make.Type(tree.getQualifierExpression().type),convertArgs(tree.sym,args.toList(),tree.varargsElement),null);  newClass.constructor=tree.sym;  newClass.constructorType=tree.sym.erasure(types);  newClass.type=tree.getQualifierExpression().type;  setVarargsIfNeeded(newClass,tree.varargsElement);  return newClass;}}  }
class C{  @Bean public DataSource dataSource(){  EmbeddedDatabaseBuilder builder=new EmbeddedDatabaseBuilder();  return builder.setType(EmbeddedDatabaseType.HSQL).build();}  }
class C{  public void store(double value){}  }
class C{  public LUDecomposition(double[][] LU){  this(LU,LU.length,LU[0].length);}  }
class C{  public static void improperUseOfTheParameter(String conversionName,String xmlPath,String className){  throw new XmlConversionParameterException(MSG.INSTANCE.message(xmlConversionParameterException,conversionName,xmlPath,className));}  }
class C{  public AccountHeaderBuilder withCompactStyle(boolean compactStyle){  this.mCompactStyle=compactStyle;  return this;}  }
class C{  @Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){}  }
class C{  public Key select(int k){  if (k < 0 || k >= size())   throw new IllegalArgumentException("k is not in range 0-" + (size() - 1));  Node x=select(root,k);  return x.key;}  }
class C{  public static long factorial(long x){  if (x < 0) {    return 0;  }  long factorial=1;  while (x > 1) {    factorial*=x;    x--;  }  return factorial;}  }
class C{  @Override public void layersChanged(){}  }
class C{  @Override public void draw(Shape s){  Stroke stroke=getStroke();  if (stroke instanceof BasicStroke) {    BasicStroke lineStroke;    BasicStroke minLineStroke=null;    float deviceLineWidth;    float lineWidth;    AffineTransform deviceTransform;    Point2D.Float penSize;    lineStroke=(BasicStroke)stroke;    lineWidth=lineStroke.getLineWidth();    penSize=new Point2D.Float(lineWidth,lineWidth);    deviceTransform=getTransform();    deviceTransform.deltaTransform(penSize,penSize);    deviceLineWidth=Math.min(Math.abs(penSize.x),Math.abs(penSize.y));    if (deviceLineWidth < MIN_DEVICE_LINEWIDTH) {      Point2D.Float minPenSize=new Point2D.Float(MIN_DEVICE_LINEWIDTH,MIN_DEVICE_LINEWIDTH);      try {        AffineTransform inverse;        float minLineWidth;        inverse=deviceTransform.createInverse();        inverse.deltaTransform(minPenSize,minPenSize);        minLineWidth=Math.max(Math.abs(minPenSize.x),Math.abs(minPenSize.y));        minLineStroke=new BasicStroke(minLineWidth,lineStroke.getEndCap(),lineStroke.getLineJoin(),lineStroke.getMiterLimit(),lineStroke.getDashArray(),lineStroke.getDashPhase());        setStroke(minLineStroke);      } catch (      NoninvertibleTransformException e) {      }    }    super.draw(s);    if (minLineStroke != null) {      setStroke(lineStroke);    }  } else {    super.draw(s);  }}  }
class C{  private double[] calculateB(){  int length=mExtremalIndices.size();  double[] b=new double[length];  for (int k=0; k < length; k++) {    b[k]=1.0;    double xk=mGrid.getCosineFrequencyGrid()[mExtremalIndices.get(k)];    for (int i=0; i < length; i++) {      if (i != k) {        double xi=mGrid.getCosineFrequencyGrid()[mExtremalIndices.get(i)];        double denominator=xk - xi;        if (Math.abs(denominator) < 0.00001) {          denominator=0.00001;        }        b[k]*=1.0 / denominator;      }    }  }  return b;}  }
class C{  @Override protected void deleteFamilySet(){  ItemPalette.removeLevel4IconMap(_itemType,_family,null);  _family=null;  _currentIconMap=null;  updateFamiliesPanel();}  }
class C{  public boolean hasFastMode(){  return fastMode;}  }
class C{  private boolean copyMasterCCToSlave(ConsistencyCheck cc,String schema,String table,Database slaveDb) throws SQLException, ConsistencyException {  Table tableSlave=slaveDb.findTable(schema,table,true);  ConsistencyCheck ccSlave=ConsistencyCheckFactory.createConsistencyCheck(cc.getCheckId(),tableSlave,cc.getRowOffset(),cc.getRowLimit(),getMethod(),false,false);  String query=String.format("SELECT %s,%s FROM %s.%s WHERE %s = %d",ConsistencyTable.masterCrcColumnName,ConsistencyTable.masterCntColumnName,serviceSchema,ConsistencyTable.TABLE_NAME,ConsistencyTable.idColumnName,cc.getCheckId());  Statement st=null;  ResultSet rs=null;  try {    st=masterDbUser.createStatement();    rs=st.executeQuery(query);    if (rs.next()) {      String masterCrc=rs.getString(ConsistencyTable.masterCrcColumnName);      int masterCnt=rs.getInt(ConsistencyTable.masterCntColumnName);      slaveDb.consistencyCheck(consistencyTable,ccSlave,masterCrc,masterCnt);      return true;    } else {      return false;    }  }  finally {    if (rs != null) {      try {        rs.close();      } catch (      SQLException e) {      }    }    if (st != null) {      try {        st.close();      } catch (      SQLException e) {      }    }  }}  }
class C{  public void accept(final MethodVisitor mv){  mv.visitLocalVariable(name,desc,signature,start.getLabel(),end.getLabel(),index);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private boolean addIfAbsent(E e,Object[] snapshot){  final ReentrantLock lock=this.lock;  lock.lock();  try {    Object[] current=getArray();    int len=current.length;    if (snapshot != current) {      int common=Math.min(snapshot.length,len);      for (int i=0; i < common; i++)       if (current[i] != snapshot[i] && eq(e,current[i]))       return false;      if (indexOf(e,current,common,len) >= 0)       return false;    }    Object[] newElements=Arrays.copyOf(current,len + 1);    newElements[len]=e;    setArray(newElements);    return true;  }  finally {    lock.unlock();  }}  }
class C{  public final double splitCritValue(Distribution train,Distribution test){  double result=0;  int numClasses=0;  int i, j;  for (j=0; j < test.numClasses(); j++)   if (Utils.gr(train.perClass(j),0) || Utils.gr(test.perClass(j),0))   numClasses++;  for (i=0; i < test.numBags(); i++)   if (Utils.gr(test.perBag(i),0)) {    for (j=0; j < test.numClasses(); j++)     if (Utils.gr(test.perClassPerBag(i,j),0))     result-=test.perClassPerBag(i,j) * Math.log(train.perClassPerBag(i,j) + 1);    result+=test.perBag(i) * Math.log(train.perBag(i) + numClasses);  }  return result / ContingencyTables.log2;}  }
class C{  public void close(){  atomicRef.close();}  }
class C{  private Route nextPostponed(){  return postponedRoutes.remove(0);}  }
class C{  public String toString(String sep){  if (isEmpty()) {    return "";  } else {    StringBuilder buf=new StringBuilder();    buf.append(head);    for (List<A> l=tail; l.nonEmpty(); l=l.tail) {      buf.append(sep);      buf.append(l.head);    }    return buf.toString();  }}  }
class C{  public boolean isShiftJIS(){  return isShiftJIS;}  }
class C{  public synchronized boolean engineIsCertificateEntry(String alias){  token.ensureValid();  AliasInfo aliasInfo=aliasMap.get(alias);  if (aliasInfo == null || aliasInfo.type != ATTR_CLASS_CERT) {    return false;  }  return true;}  }
class C{  @Override public Instance mergeInstance(Instance inst){  double[] values=new double[numValues() + inst.numValues()];  int[] indices=new int[numValues() + inst.numValues()];  int m=0;  for (int j=0; j < numValues(); j++, m++) {    values[m]=valueSparse(j);    indices[m]=index(j);  }  for (int j=0; j < inst.numValues(); j++, m++) {    values[m]=inst.valueSparse(j);    indices[m]=numAttributes() + inst.index(j);  }  return new SparseInstance(1.0,values,indices,numAttributes() + inst.numAttributes());}  }
class C{  @Override public void registerExtenderCallbacks(IBurpExtenderCallbacks callbacks){  callbacks.setExtensionName(EXTENSION_NAME);  stdout=new PrintWriter(callbacks.getStdout(),true);  stderr=new PrintWriter(callbacks.getStderr(),true);  LocalTime t=LocalTime.now();  String time=t.toString().substring(0,t.toString().length() - 4);  stdout.println("+-----------------------------------------------------------------------+");  stdout.println("| EsPReSSO - Extension for Processing and Recognition of Single Sign-on |");  stdout.println("|                      Started @ " + time + "                               |");  stdout.println("+-----------------------------------------------------------------------+");  tab=new UITab(callbacks);  Logging.getInstance().log(getClass(),"Tab registered.",Logging.INFO);  final ScanAndMarkSSO scanAndMark=new ScanAndMarkSSO(callbacks);  callbacks.registerHttpListener(scanAndMark);  Logging.getInstance().log(getClass(),"Scanner registered.",Logging.INFO);  callbacks.registerMessageEditorTabFactory(new SAMLEditor(callbacks));  Logging.getInstance().log(getClass(),"SAML editor registered.",Logging.INFO);  callbacks.registerMessageEditorTabFactory(new JSONEditor(callbacks));  Logging.getInstance().log(getClass(),"JSON editor registered.",Logging.INFO);  callbacks.registerMessageEditorTabFactory(new JWTEditor(callbacks));  Logging.getInstance().log(getClass(),"JWT editor registered.",Logging.INFO);  callbacks.registerExtensionStateListener(this);  Logging.getInstance().log(getClass(),"ExtensionStateListener registered",Logging.INFO);  Logging.getInstance().log(getClass(),"Init. complete.",Logging.INFO);}  }
class C{  @Override public void shrinkToMaxSize(final int maxsize){  if (this.map.size() <= maxsize)   return;  int minScore=getMinScore();  while (this.map.size() > maxsize) {    minScore++;    shrinkToMinScore(minScore);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Attr newAttr;  Element elementNode;  doc=(Document)load("staff",false);  newAttr=doc.createAttribute("newAttribute");  elementNode=newAttr.getOwnerElement();  assertNull("throw_Null",elementNode);}  }
class C{  public static void main(String[] args) throws Exception {  Class<?> clazz=Class.forName("InlineAllocation");  Method trivialJ=clazz.getDeclaredMethod("trivial",new Class[]{clazz});  Method alloc1J=clazz.getDeclaredMethod("alloc1",(Class[])null);  Method alloc2J=clazz.getDeclaredMethod("alloc2",(Class[])null);  Method alloc3J=clazz.getDeclaredMethod("alloc3",(Class[])null);  Method alloc4J=clazz.getDeclaredMethod("alloc4",new Class[]{Integer.TYPE});  RVMMethod trivial=java.lang.reflect.JikesRVMSupport.getMethodOf(trivialJ);  RVMMethod alloc1=java.lang.reflect.JikesRVMSupport.getMethodOf(alloc1J);  RVMMethod alloc2=java.lang.reflect.JikesRVMSupport.getMethodOf(alloc2J);  RVMMethod alloc3=java.lang.reflect.JikesRVMSupport.getMethodOf(alloc3J);  RVMMethod alloc4=java.lang.reflect.JikesRVMSupport.getMethodOf(alloc4J);  trivial.compile();  int trivialSize=trivial.getCurrentCompiledMethod().numberOfInstructions();  alloc1.compile();  int alloc1Size=alloc1.getCurrentCompiledMethod().numberOfInstructions();  alloc2.compile();  int alloc2Size=alloc2.getCurrentCompiledMethod().numberOfInstructions();  alloc3.compile();  int alloc3Size=alloc3.getCurrentCompiledMethod().numberOfInstructions();  alloc4.compile();  int alloc4Size=alloc4.getCurrentCompiledMethod().numberOfInstructions();  alloc1Size-=trivialSize;  alloc2Size-=trivialSize;  alloc3Size-=trivialSize;  alloc4Size-=trivialSize;  System.out.println("Approximate scalar allocation size is " + alloc1Size);  System.out.println("Approximate small array allocation is " + alloc2Size);  System.out.println("Approximate large array allocation is " + alloc3Size);  System.out.println("Approximate unknown size array allocation is " + alloc4Size);  boolean fail=false;  if (alloc1Size > alloc1Limit) {    System.out.println("FAIL: scalar allocation is too porky");    fail=true;  }  if (alloc2Size > alloc2Limit) {    System.out.println("FAIL: small array allocation is too porky");    fail=true;  }  if (alloc3Size > alloc3Limit) {    System.out.println("FAIL: large array allocation is too porky");    fail=true;  }  if (alloc4Size > alloc4Limit) {    System.out.println("FAIL: unknown size array allocation is too porky");    fail=true;  }  if (!fail) {    System.out.println("ALL TESTS PASSED");  }}  }
class C{  public FirewallRule(){  this.dpid=DatapathId.NONE;  this.in_port=OFPort.ANY;  this.dl_src=MacAddress.NONE;  this.dl_dst=MacAddress.NONE;  this.dl_type=EthType.NONE;  this.nw_src_prefix_and_mask=IPv4AddressWithMask.NONE;  this.nw_dst_prefix_and_mask=IPv4AddressWithMask.NONE;  this.nw_proto=IpProtocol.NONE;  this.tp_src=TransportPort.NONE;  this.tp_dst=TransportPort.NONE;  this.any_dpid=true;  this.any_in_port=true;  this.any_dl_src=true;  this.any_dl_dst=true;  this.any_dl_type=true;  this.any_nw_src=true;  this.any_nw_dst=true;  this.any_nw_proto=true;  this.any_tp_src=true;  this.any_tp_dst=true;  this.priority=0;  this.action=FirewallAction.ALLOW;  this.ruleid=0;}  }
class C{  protected void calculateProfiles(){  if (mProfiles == null) {    mProfiles=new ArrayList<>();  }  if (mCurrentProfile == null) {    int setCount=0;    for (int i=0; i < mProfiles.size(); i++) {      if (mProfiles.size() > i && mProfiles.get(i).isSelectable()) {        if (setCount == 0 && (mCurrentProfile == null)) {          mCurrentProfile=mProfiles.get(i);        } else         if (setCount == 1 && (mProfileFirst == null)) {          mProfileFirst=mProfiles.get(i);        } else         if (setCount == 2 && (mProfileSecond == null)) {          mProfileSecond=mProfiles.get(i);        } else         if (setCount == 3 && (mProfileThird == null)) {          mProfileThird=mProfiles.get(i);        }        setCount++;      }    }    return;  }  IProfile[] previousActiveProfiles=new IProfile[]{mCurrentProfile,mProfileFirst,mProfileSecond,mProfileThird};  IProfile[] newActiveProfiles=new IProfile[4];  Stack<IProfile> unusedProfiles=new Stack<>();  for (int i=0; i < mProfiles.size(); i++) {    IProfile p=mProfiles.get(i);    if (p.isSelectable()) {      boolean used=false;      for (int j=0; j < 4; j++) {        if (previousActiveProfiles[j] == p) {          newActiveProfiles[j]=p;          used=true;          break;        }      }      if (!used) {        unusedProfiles.push(p);      }    }  }  Stack<IProfile> activeProfiles=new Stack<>();  for (int i=0; i < 4; i++) {    if (newActiveProfiles[i] != null) {      activeProfiles.push(newActiveProfiles[i]);    } else     if (!unusedProfiles.isEmpty()) {      activeProfiles.push(unusedProfiles.pop());    }  }  Stack<IProfile> reversedActiveProfiles=new Stack<>();  while (!activeProfiles.empty()) {    reversedActiveProfiles.push(activeProfiles.pop());  }  if (reversedActiveProfiles.isEmpty()) {    mCurrentProfile=null;  } else {    mCurrentProfile=reversedActiveProfiles.pop();  }  if (reversedActiveProfiles.isEmpty()) {    mProfileFirst=null;  } else {    mProfileFirst=reversedActiveProfiles.pop();  }  if (reversedActiveProfiles.isEmpty()) {    mProfileSecond=null;  } else {    mProfileSecond=reversedActiveProfiles.pop();  }  if (reversedActiveProfiles.isEmpty()) {    mProfileThird=null;  } else {    mProfileThird=reversedActiveProfiles.pop();  }}  }
class C{  public OrderEventImpl(final OrderEvent parent,final String eventId,final CustomerOrder customerOrder){  this(parent,eventId,customerOrder,null,null);}  }
class C{  public Lease(String partitionId){  this.partitionId=partitionId;  this.epoch=0;  this.owner="";  this.token="";}  }
class C{  public void addFrequentSet(FrequentItemSet itemSet){  frequentSets.add(itemSet);  maximumSetSize=Math.max(itemSet.getNumberOfItems(),maximumSetSize);}  }
class C{  public boolean displayFalseWarnings(){  return displayFalseWarnings;}  }
class C{  public GaussianBlurFilter(){  this(3);}  }
class C{  public List<IMessage> deleteFromRange(int startIndex,int endIndex) throws RateLimitException, DiscordException, MissingPermissionsException {  List<IMessage> messages=subList(startIndex,endIndex);  bulkDelete(messages);  return messages;}  }
class C{  public Object eval(CallStack callstack,Interpreter interpreter) throws EvalError {  NameSpace namespace=callstack.top();  BSHAmbiguousName nameNode=getNameNode();  if (namespace.getParent() != null && namespace.getParent().isClass && (nameNode.text.equals("super") || nameNode.text.equals("this")))   return Primitive.VOID;  Name name=nameNode.getName(namespace);  Object[] args=getArgsNode().getArguments(callstack,interpreter);  try {    return name.invokeMethod(interpreter,args,callstack,this);  } catch (  ReflectError e) {    throw new EvalError("Error in method invocation: " + e.getMessage(),this,callstack);  }catch (  InvocationTargetException e) {    String msg="Method Invocation " + name;    Throwable te=e.getTargetException();    boolean isNative=true;    if (te instanceof EvalError)     if (te instanceof TargetError)     isNative=((TargetError)te).inNativeCode(); else     isNative=false;    throw new TargetError(msg,te,this,callstack,isNative);  }catch (  UtilEvalError e) {    throw e.toEvalError(this,callstack);  }}  }
class C{  public String product(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  Integer M_Product_ID=(Integer)value;  Integer M_AttributeSetInstance_ID=0;  if (M_Product_ID == null || M_Product_ID.intValue() == 0) {    mTab.setValue("M_AttributeSetInstance_ID",null);    mTab.setValue("PriceList",new BigDecimal(0));    mTab.setValue("PriceLimit",new BigDecimal(0));    mTab.setValue("PriceActual",new BigDecimal(0));    mTab.setValue("PriceEntered",new BigDecimal(0));    mTab.setValue("C_Currency_ID",null);    mTab.setValue("Discount",new BigDecimal(0));    mTab.setValue("C_UOM_ID",null);    return "";  }  if (steps)   log.warning("init");  MProduct product=MProduct.get(ctx,M_Product_ID.intValue());  I_M_AttributeSetInstance asi=product.getM_AttributeSetInstance();  mTab.setValue("C_Charge_ID",null);  MProduct m_product=MProduct.get(Env.getCtx(),M_Product_ID);  mTab.setValue("M_AttributeSetInstance_ID",m_product.getEnvAttributeSetInstance(ctx,WindowNo));  if (Env.getContextAsInt(ctx,WindowNo,Env.TAB_INFO,"M_Product_ID") == M_Product_ID.intValue() && Env.getContextAsInt(ctx,WindowNo,Env.TAB_INFO,"M_AttributeSetInstance_ID") != 0)   mTab.setValue("M_AttributeSetInstance_ID",Env.getContextAsInt(ctx,WindowNo,Env.TAB_INFO,"M_AttributeSetInstance_ID")); else {    mTab.setValue("M_AttributeSetInstance_ID",asi.getM_AttributeSetInstance_ID());  }  int C_BPartner_ID=Env.getContextAsInt(ctx,WindowNo,"C_BPartner_ID");  BigDecimal Qty=(BigDecimal)mTab.getValue("QtyOrdered");  boolean IsSOTrx=Env.getContext(ctx,WindowNo,"IsSOTrx").equals("Y");  MProductPricing pp=new MProductPricing(M_Product_ID.intValue(),C_BPartner_ID,Qty,IsSOTrx);  int M_PriceList_ID=Env.getContextAsInt(ctx,WindowNo,"M_PriceList_ID");  pp.setM_PriceList_ID(M_PriceList_ID);  Timestamp orderDate=(Timestamp)mTab.getValue("DateOrdered");  int M_PriceList_Version_ID=Env.getContextAsInt(ctx,WindowNo,"M_PriceList_Version_ID");  if (M_PriceList_Version_ID == 0 && M_PriceList_ID > 0) {    String sql="SELECT plv.M_PriceList_Version_ID " + "FROM M_PriceList_Version plv " + "WHERE plv.M_PriceList_ID=? "+ " AND plv.ValidFrom <= ? "+ "ORDER BY plv.ValidFrom DESC";    M_PriceList_Version_ID=DB.getSQLValueEx(null,sql,M_PriceList_ID,orderDate);    if (M_PriceList_Version_ID > 0)     Env.setContext(ctx,WindowNo,"M_PriceList_Version_ID",M_PriceList_Version_ID);  }  pp.setM_PriceList_Version_ID(M_PriceList_Version_ID);  pp.setPriceDate(orderDate);  mTab.setValue("PriceList",pp.getPriceList());  mTab.setValue("PriceLimit",pp.getPriceLimit());  mTab.setValue("PriceActual",pp.getPriceStd());  mTab.setValue("PriceEntered",pp.getPriceStd());  mTab.setValue("C_Currency_ID",new Integer(pp.getC_Currency_ID()));  mTab.setValue("Discount",pp.getDiscount());  mTab.setValue("C_UOM_ID",new Integer(pp.getC_UOM_ID()));  mTab.setValue("QtyOrdered",mTab.getValue("QtyEntered"));  Env.setContext(ctx,WindowNo,"EnforcePriceLimit",pp.isEnforcePriceLimit() ? "Y" : "N");  Env.setContext(ctx,WindowNo,"DiscountSchema",pp.isDiscountSchema() ? "Y" : "N");  if (Env.isSOTrx(ctx,WindowNo)) {    if (product.isStocked()) {      BigDecimal QtyOrdered=(BigDecimal)mTab.getValue("QtyOrdered");      int M_Warehouse_ID=Env.getContextAsInt(ctx,WindowNo,"M_Warehouse_ID");      M_AttributeSetInstance_ID=Env.getContextAsInt(ctx,WindowNo,"M_AttributeSetInstance_ID");      BigDecimal available=MStorage.getQtyAvailable(M_Warehouse_ID,M_Product_ID.intValue(),M_AttributeSetInstance_ID,null);      if (available == null)       available=Env.ZERO;      if (available.signum() == 0)       mTab.fireDataStatusEEvent("NoQtyAvailable","0",false); else       if (available.compareTo(QtyOrdered) < 0)       mTab.fireDataStatusEEvent("InsufficientQtyAvailable",available.toString(),false); else {        Integer C_OrderLine_ID=(Integer)mTab.getValue("C_OrderLine_ID");        if (C_OrderLine_ID == null)         C_OrderLine_ID=new Integer(0);        BigDecimal notReserved=MOrderLine.getNotReserved(ctx,M_Warehouse_ID,M_Product_ID,M_AttributeSetInstance_ID,C_OrderLine_ID.intValue());        if (notReserved == null)         notReserved=Env.ZERO;        BigDecimal total=available.subtract(notReserved);        if (total.compareTo(QtyOrdered) < 0) {          String info=Msg.parseTranslation(ctx,"@QtyAvailable@=" + available + " - @QtyNotReserved@="+ notReserved+ " = "+ total);          mTab.fireDataStatusEEvent("InsufficientQtyAvailable",info,false);        }      }    }  }  if (steps)   log.warning("fini");  return tax(ctx,WindowNo,mTab,mField,value);}  }
class C{  LongSetting(Properties defaultProps,Properties props,String key,long defaultLong){  super(defaultProps,props,key,String.valueOf(defaultLong),false,null,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:35.891 -0500",hash_original_method="4ACC3B62E54BFBE055D3653A9CF49AD3",hash_generated_method="63E7295D71AB9F4404861D24D95AEA79") public final int match(ContentResolver resolver,Intent intent,boolean resolve,String logTag){  String type=resolve ? intent.resolveType(resolver) : intent.getType();  return match(intent.getAction(),type,intent.getScheme(),intent.getData(),intent.getCategories(),logTag);}  }
class C{  void close(){  if (VDBG)   log("close()");  IBluetoothManager mgr=mAdapter.getBluetoothManager();  if (mgr != null) {    try {      mgr.unregisterStateChangeCallback(mBluetoothStateChangeCallback);    } catch (    Exception e) {      Log.e(TAG,"",e);    }  }synchronized (mConnection) {    if (mService != null) {      try {        mService=null;        mContext.unbindService(mConnection);      } catch (      Exception re) {        Log.e(TAG,"",re);      }    }  }  mServiceListener=null;}  }
class C{  public final String join(@Nullable Object first,@Nullable Object second,Object... rest){  return join(iterable(first,second,rest));}  }
class C{  public InnerClassesAttribute(ConstPool cp){  super(cp,tag,new byte[2]);  ByteArray.write16bit(0,get(),0);}  }
class C{  @Override public Iterator iterator(){  return new StructIterator(fieldValuesIterator());}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  @Override public int hashCode(){  return 0;}  }
class C{  public void dragExit(DropTargetEvent dte){  Debug.message("dndlistener","dragExit (target)");}  }
class C{  public int[] validBaudValues(){  return new int[]{57600,115200,230400,250000,333333,460800,500000};}  }
class C{  protected Command processPacketIn(IOFSwitch sw,OFPacketIn msg,FloodlightContext cntx){  Ethernet eth=IFloodlightProviderService.bcStore.get(cntx,IFloodlightProviderService.CONTEXT_PI_PAYLOAD);  Command ret=Command.STOP;  String srcNetwork=macToGuid.get(eth.getSourceMACAddress());  if (eth.isBroadcast() || eth.isMulticast() || isDefaultGateway(eth)|| isDhcpPacket(eth)) {    ret=Command.CONTINUE;  } else   if (srcNetwork == null) {    log.trace("Blocking traffic from host {} because it is not attached to any network.",eth.getSourceMACAddress().toString());    ret=Command.STOP;  } else   if (oneSameNetwork(eth.getSourceMACAddress(),eth.getDestinationMACAddress())) {    ret=Command.CONTINUE;  }  if (log.isTraceEnabled())   log.trace("Results for flow between {} and {} is {}",new Object[]{eth.getSourceMACAddress(),eth.getDestinationMACAddress(),ret});  return ret;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MAccount=[");  sb.append(getC_ValidCombination_ID());  if (getCombination() != null)   sb.append(",").append(getCombination()); else {    sb.append(",Schema=").append(getC_AcctSchema_ID()).append(",Org=").append(getAD_Org_ID()).append(",Acct=").append(getAccount_ID()).append(" ");    if (getC_SubAcct_ID() != 0)     sb.append(",C_SubAcct_ID=").append(getC_SubAcct_ID());    if (getM_Product_ID() != 0)     sb.append(",M_Product_ID=").append(getM_Product_ID());    if (getC_BPartner_ID() != 0)     sb.append(",C_BPartner_ID=").append(getC_BPartner_ID());    if (getAD_OrgTrx_ID() != 0)     sb.append(",AD_OrgTrx_ID=").append(getAD_OrgTrx_ID());    if (getC_LocFrom_ID() != 0)     sb.append(",C_LocFrom_ID=").append(getC_LocFrom_ID());    if (getC_LocTo_ID() != 0)     sb.append(",C_LocTo_ID=").append(getC_LocTo_ID());    if (getC_SalesRegion_ID() != 0)     sb.append(",C_SalesRegion_ID=").append(getC_SalesRegion_ID());    if (getC_Project_ID() != 0)     sb.append(",C_Project_ID=").append(getC_Project_ID());    if (getC_Campaign_ID() != 0)     sb.append(",C_Campaign_ID=").append(getC_Campaign_ID());    if (getC_Activity_ID() != 0)     sb.append(",C_Activity_ID=").append(getC_Activity_ID());    if (getUser1_ID() != 0)     sb.append(",User1_ID=").append(getUser1_ID());    if (getUser2_ID() != 0)     sb.append(",User2_ID=").append(getUser2_ID());    if (getUserElement1_ID() != 0)     sb.append(",UserElement1_ID=").append(getUserElement1_ID());    if (getUserElement2_ID() != 0)     sb.append(",UserElement2_ID=").append(getUserElement2_ID());  }  sb.append("]");  return sb.toString();}  }
class C{  @Override public boolean finish(){  finishVal=validateValues();  Activator.setDeploymentAssemblyState(depCheck.getSelection());  if (finishVal) {    entry=entry.append(getSelVersion());    configureDeployment();  }  return finishVal;}  }
class C{  public static void loadScenario(final Scenario scenario){  ScenarioLoaderImpl.loadScenario(scenario);}  }
class C{  public TableResult(){  clear();}  }
class C{  public void buildClassifier(Instances data) throws Exception {  if (m_Classifier == null) {    throw new Exception("No base classifier has been set!");  }  if (m_Evaluator == null) {    throw new Exception("No attribute evaluator has been set!");  }  if (m_Search == null) {    throw new Exception("No search method has been set!");  }  getCapabilities().testWithFail(data);  Instances newData=new Instances(data);  newData.deleteWithMissingClass();  if (newData.numInstances() == 0) {    m_Classifier.buildClassifier(newData);    return;  }  if (newData.classAttribute().isNominal()) {    m_numClasses=newData.classAttribute().numValues();  } else {    m_numClasses=1;  }  Instances resampledData=null;  double weight=newData.instance(0).weight();  boolean ok=false;  for (int i=1; i < newData.numInstances(); i++) {    if (newData.instance(i).weight() != weight) {      ok=true;      break;    }  }  if (ok) {    if (!(m_Evaluator instanceof WeightedInstancesHandler) || !(m_Classifier instanceof WeightedInstancesHandler)) {      Random r=new Random(1);      for (int i=0; i < 10; i++) {        r.nextDouble();      }      resampledData=newData.resampleWithWeights(r);    }  } else {    resampledData=newData;  }  m_AttributeSelection=new AttributeSelection();  m_AttributeSelection.setEvaluator(m_Evaluator);  m_AttributeSelection.setSearch(m_Search);  long start=System.currentTimeMillis();  m_AttributeSelection.SelectAttributes((m_Evaluator instanceof WeightedInstancesHandler) ? newData : resampledData);  long end=System.currentTimeMillis();  if (m_Classifier instanceof WeightedInstancesHandler) {    newData=m_AttributeSelection.reduceDimensionality(newData);    m_Classifier.buildClassifier(newData);  } else {    resampledData=m_AttributeSelection.reduceDimensionality(resampledData);    m_Classifier.buildClassifier(resampledData);  }  long end2=System.currentTimeMillis();  m_numAttributesSelected=m_AttributeSelection.numberAttributesSelected();  m_ReducedHeader=new Instances((m_Classifier instanceof WeightedInstancesHandler) ? newData : resampledData,0);  m_selectionTime=(double)(end - start);  m_totalTime=(double)(end2 - start);}  }
class C{  private void drawFrequencyLabel(Graphics2D graphics,double xaxis,long frequency){  String label=mLabelSizeMonitor.format(frequency);  FontMetrics fontMetrics=graphics.getFontMetrics(this.getFont());  Rectangle2D rect=fontMetrics.getStringBounds(label,graphics);  float xOffset=(float)rect.getWidth() / 2;  graphics.drawString(label,(float)(xaxis - xOffset),(float)(getSize().getHeight() - 2.0f));}  }
class C{  static int indexFor(int h,int length){  return h & (length - 1);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testNode;  boolean state;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  testNode=(Element)elementList.item(0);  state=testNode.hasAttribute("street");  assertTrue("throw_True",state);}  }
class C{  public short[][] action_table(){  return _action_table;}  }
class C{  public boolean removeIdentity(DiscoverInfo.Identity identity){  if (identity.equals(this.identity))   return false;  identities.remove(identity);  renewEntityCapsVersion();  return true;}  }
class C{  @LogMessageDoc(level="ERROR",message="Failed to queue hint for store {storeName}",explanation="There was an error synchronizing data to " + "remote nodes",recommendation=LogMessageDoc.REPORT_CONTROLLER_BUG) public void queueHint(String storeName,ByteArray key,Versioned<byte[]> value){  try {    HintKey hk=new HintKey(storeName,key);    hintLock.lock();    try {      boolean needed=!hints.containsKey(hk);      needed&=hints.doput(hk,value);      if (needed) {        hintQueue.add(hk);        hintsAvailable.signal();      }    }  finally {      hintLock.unlock();    }  } catch (  SyncException e) {    logger.error("Failed to queue hint for store " + storeName,e);  }}  }
class C{  private static Map<String,String> convertHeaders(Header[] headers){  Map<String,String> result=new HashMap<String,String>();  for (int i=0; i < headers.length; i++) {    result.put(headers[i].getName(),headers[i].getValue());  }  return result;}  }
class C{  private void postWrite(BinaryWriterExImpl writer,Object obj){  if (obj instanceof CacheObjectImpl)   writer.postWrite(userType,registered,0,false); else   if (obj instanceof BinaryObjectEx) {    boolean flagSet=((BinaryObjectEx)obj).isFlagSet(BinaryUtils.FLAG_EMPTY_HASH_CODE);    writer.postWrite(userType,registered,obj.hashCode(),!flagSet);  } else   writer.postWrite(userType,registered,obj.hashCode(),overridesHashCode);}  }
class C{  public void showCommandLine(final String cmdLine){  SimpleDateFormat f=new SimpleDateFormat("HH:mm:ss.SSS");  showMessage(f.format(new Date()) + ": " + cmdLine,ConsoleViewContentType.SYSTEM_OUTPUT.getAttributes());}  }
class C{  private void sendEventBindingResponse(boolean result){  if (mEditorConnection == null || !mEditorConnection.isValid()) {    return;  }  final ByteArrayOutputStream out=new ByteArrayOutputStream();  final JsonWriter j=new JsonWriter(new OutputStreamWriter(out));  try {    j.beginObject();    j.name("type").value("event_binding_response");    j.name("payload").beginObject();    j.name("status").value("OK");    j.endObject();    j.endObject();  } catch (  final IOException e) {    Log.e(LOGTAG,"Can't write event_binding_response to server",e);  } finally {    try {      j.close();    } catch (    final IOException e) {      Log.e(LOGTAG,"Can't close websocket writer",e);    }  }  if (mEditorConnection != null && mEditorConnection.isValid()) {    mEditorConnection.sendMessage(out.toString());  }}  }
class C{  private void updateFields(){  m_setting=true;  for (int i=0; i < CompiereColor.TYPES.length; i++) {    if (m_cc.getType().equals(CompiereColor.TYPE_VALUES[i])) {      typeField.setSelectedItem(CompiereColor.TYPES[i]);      break;    }  }  if (m_cc.isFlat()) {    flatField.setVisible(true);    gradientUpper.setVisible(false);    gradientLower.setVisible(false);    gradientStartLabel.setVisible(false);    gradientDistanceLabel.setVisible(false);    gradientStartField.setVisible(false);    gradientDistanceField.setVisible(false);    urlLabel.setVisible(false);    urlField.setVisible(false);    alphaLabel.setVisible(false);    alphaField.setVisible(false);    taintColor.setVisible(false);    lineColor.setVisible(false);    backColor.setVisible(false);    widthLabel.setVisible(false);    widthField.setVisible(false);    distanceLabel.setVisible(false);    distanceField.setVisible(false);    flatField.setBackground(m_cc.getFlatColor());  } else   if (m_cc.isGradient()) {    flatField.setVisible(false);    gradientUpper.setVisible(true);    gradientLower.setVisible(true);    gradientStartLabel.setVisible(true);    gradientDistanceLabel.setVisible(true);    gradientStartField.setVisible(true);    gradientDistanceField.setVisible(true);    urlLabel.setVisible(false);    urlField.setVisible(false);    alphaLabel.setVisible(false);    alphaField.setVisible(false);    taintColor.setVisible(false);    lineColor.setVisible(false);    backColor.setVisible(false);    widthLabel.setVisible(false);    widthField.setVisible(false);    distanceLabel.setVisible(false);    distanceField.setVisible(false);    gradientUpper.setBackground(m_cc.getGradientUpperColor());    gradientLower.setBackground(m_cc.getGradientLowerColor());    gradientDistanceField.setText(String.valueOf(m_cc.getGradientRepeatDistance()));    for (int i=0; i < CompiereColor.GRADIENT_SP.length; i++) {      if (m_cc.getGradientStartPoint() == CompiereColor.GRADIENT_SP_VALUES[i]) {        gradientStartField.setSelectedItem(CompiereColor.GRADIENT_SP[i]);        break;      }    }  } else   if (m_cc.isTexture()) {    flatField.setVisible(false);    gradientUpper.setVisible(false);    gradientLower.setVisible(false);    gradientStartLabel.setVisible(false);    gradientDistanceLabel.setVisible(false);    gradientStartField.setVisible(false);    gradientDistanceField.setVisible(false);    urlLabel.setVisible(true);    urlField.setVisible(true);    alphaLabel.setVisible(true);    alphaField.setVisible(true);    taintColor.setVisible(true);    lineColor.setVisible(false);    backColor.setVisible(false);    widthLabel.setVisible(false);    widthField.setVisible(false);    distanceLabel.setVisible(false);    distanceField.setVisible(false);    urlField.setText(m_cc.getTextureURL().toString());    alphaField.setText(String.valueOf(m_cc.getTextureCompositeAlpha()));    taintColor.setBackground(m_cc.getTextureTaintColor());  } else   if (m_cc.isLine()) {    flatField.setVisible(false);    gradientUpper.setVisible(false);    gradientLower.setVisible(false);    gradientStartLabel.setVisible(false);    gradientDistanceLabel.setVisible(false);    gradientStartField.setVisible(false);    gradientDistanceField.setVisible(false);    urlLabel.setVisible(false);    urlField.setVisible(false);    alphaLabel.setVisible(false);    alphaField.setVisible(false);    taintColor.setVisible(false);    lineColor.setVisible(true);    backColor.setVisible(true);    widthLabel.setVisible(true);    widthField.setVisible(true);    distanceLabel.setVisible(true);    distanceField.setVisible(true);    lineColor.setBackground(m_cc.getLineColor());    backColor.setBackground(m_cc.getLineBackColor());    widthField.setText(String.valueOf(m_cc.getLineWidth()));    distanceField.setText(String.valueOf(m_cc.getLineDistance()));  }  m_setting=false;}  }
class C{  public Hessian2Input(InputStream is){  this();  init(is);}  }
class C{  public ReferenceMap(int keyType,int valueType,int capacity,float loadFactor){  super(keyType,valueType,capacity,loadFactor,false);}  }
class C{  public int update(TestTable2 m){  return UPDATE(m).updateByExample(this.example);}  }
class C{  public int indexOf(K object){  Integer index=mMembersMap.get(object);  return (index == null) ? -1 : index;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 10:08:23.596 -0400",hash_original_method="119D5908F9AFB28EF70EEC655725E14A",hash_generated_method="90FC14C3CF6E4C64E9D1E4746566671A") public boolean isEmpty(){  return mSize <= 0;}  }
class C{  private static ArrayList<Integer> loadIntegerArray(Resources r,int resNum){  int[] vals=r.getIntArray(resNum);  int size=vals.length;  ArrayList<Integer> list=new ArrayList<Integer>(size);  for (int i=0; i < size; i++) {    list.add(vals[i]);  }  return list;}  }
class C{  protected AssociationEnd_Impl(){  super();}  }
class C{  public MyFileFilter(String extension){  super();  this.extension=extension;}  }
class C{  public static String supportsExtension(final MultiProtocolURL url){  return supportsExtension(MultiProtocolURL.getFileExtension(url.getFileName()));}  }
class C{  public static IStatus validateClassFileName(String name,String sourceLevel,String complianceLevel){  if (name == null) {    return new Status(IStatus.ERROR,org.eclipse.jdt.core.JavaCore.PLUGIN_ID,-1,Messages.convention_classFile_nullName,null);  }  if (!org.eclipse.jdt.internal.compiler.util.Util.isClassFileName(name)) {    return new Status(IStatus.ERROR,org.eclipse.jdt.core.JavaCore.PLUGIN_ID,-1,Messages.convention_classFile_notClassFileName,null);  }  String identifier;  int index;  index=name.lastIndexOf('.');  if (index == -1) {    return new Status(IStatus.ERROR,org.eclipse.jdt.core.JavaCore.PLUGIN_ID,-1,Messages.convention_classFile_notClassFileName,null);  }  identifier=name.substring(0,index);  if (!identifier.equals(PACKAGE_INFO)) {    IStatus status=validateIdentifier(identifier,sourceLevel,complianceLevel);    if (!status.isOK()) {      return status;    }  }  return JavaModelStatus.VERIFIED_OK;}  }
class C{  public void checkResolved(final PdfObject pdfObject){  if (pdfObject != null && pdfObject.getStatus() != PdfObject.DECODED) {    byte[] raw=pdfObject.getUnresolvedData();    pdfObject.setStatus(PdfObject.DECODED);    if (raw[0] == 'e' && raw[1] == 'n' && raw[2] == 'd' && raw[3] == 'o' && raw[4] == 'b') {    } else     if (StreamReaderUtils.isNull(raw,0)) {    } else {      String objectRef=pdfObject.getObjectRefAsString();      if (raw[0] == '[') {        int ptr=0;        final int len=raw.length;        for (int jj=0; jj < len; jj++) {          if (raw[jj] >= '0' && raw[jj] <= '9') {            ptr=jj;            jj=len;          }        }        int end=ptr;        while ((raw[end] >= '0' && raw[end] <= '9') || raw[end] == ' ' || raw[end] == 10 || raw[end] == 13 || raw[end] == 9) {          end++;        }        if (raw[end] == 'R') {          pdfObject.setRef(new String(raw,ptr,len - ptr));        }      } else       if (raw[raw.length - 1] == 'R') {        objectRef=new String(raw);        pdfObject.setRef(objectRef);      } else       if (raw[0] != '<' && raw[raw.length - 1] == '>') {        extractRefFromEnd(raw,pdfObject,objectReader);        return;      }      Dictionary.readDictionaryFromRefOrDirect(pdfObject,objectRef,0,raw,-1,objectReader);    }  }}  }
class C{  public static boolean isAccessAllowed(ServiceClient serviceClient,int accessType,int accessLevel){  if (serviceClient.hasPermission(AppPermissions.ADMINISTRACION_TOTAL_SISTEMA))   return true;  if ((accessType == TipoAcceso.CONSULTA) && serviceClient.hasPermission(AppPermissions.CONSULTA_TOTAL_SISTEMA))   return true;  if (accessLevel == NivelAcceso.PUBLICO)   return true;  if (accessLevel == NivelAcceso.ARCHIVO && serviceClient.isPersonalArchivo())   return true;  return false;}  }
class C{  MutableBigInteger mutableModInverse(MutableBigInteger p){  if (p.isOdd())   return modInverse(p);  if (isEven())   throw new ArithmeticException("BigInteger not invertible.");  int powersOf2=p.getLowestSetBit();  MutableBigInteger oddMod=new MutableBigInteger(p);  oddMod.rightShift(powersOf2);  if (oddMod.isOne())   return modInverseMP2(powersOf2);  MutableBigInteger oddPart=modInverse(oddMod);  MutableBigInteger evenPart=modInverseMP2(powersOf2);  MutableBigInteger y1=modInverseBP2(oddMod,powersOf2);  MutableBigInteger y2=oddMod.modInverseMP2(powersOf2);  MutableBigInteger temp1=new MutableBigInteger();  MutableBigInteger temp2=new MutableBigInteger();  MutableBigInteger result=new MutableBigInteger();  oddPart.leftShift(powersOf2);  oddPart.multiply(y1,result);  evenPart.multiply(oddMod,temp1);  temp1.multiply(y2,temp2);  result.add(temp2);  return result.divide(p,temp1);}  }
class C{  public org.json.JSONArray toJSONArray(org.json.JSONArray names) throws JSONException {  if (names == null || names.length() == 0) {    return null;  }  org.json.JSONArray ja=new org.json.JSONArray();  for (int i=0; i < names.length(); i+=1) {    ja.put(this.opt(names.getString(i)));  }  return ja;}  }
class C{  public static String[] parseString(String[] values){  String[] result=new String[values.length];  for (int i=0; i < result.length; i++) {    result[i]=parseString(values[i]);  }  return result;}  }
class C{  public CustomViewBehind(Context context,AttributeSet attrs){  super(context,attrs);  mMarginThreshold=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,MARGIN_THRESHOLD,getResources().getDisplayMetrics());}  }
class C{  public CoapResponse post(byte[] payload,int format,int accept){  return synchronous(accept(format(newPost().setURI(uri).setPayload(payload),format),accept));}  }
class C{  private Object handleFailOver(QueryException qe,Method method,Object[] args,Protocol protocol) throws Throwable {  HostAddress failHostAddress=null;  boolean failIsMaster=true;  if (protocol != null) {    failHostAddress=protocol.getHostAddress();    failIsMaster=protocol.isMasterConnection();  }  HandleErrorResult handleErrorResult=listener.handleFailover(qe,method,args,protocol);  if (handleErrorResult.mustThrowError) {    listener.throwFailoverMessage(failHostAddress,failIsMaster,qe,handleErrorResult.isReconnected);  }  return handleErrorResult.resultObject;}  }
class C{  private void addInner(final ITextureRegion pTextureRegion,final float pX1,final float pY1,final float pX2,final float pY2,final float pX3,final float pY3,final float pX4,final float pY4,final float pRed,final float pGreen,final float pBlue,final float pAlpha){  this.mSpriteBatchVertexBufferObject.addWithPackedColor(pTextureRegion,pX1,pY1,pX2,pY2,pX3,pY3,pX4,pY4,ColorUtils.convertRGBAToABGRPackedFloat(pRed,pGreen,pBlue,pAlpha));}  }
class C{  @Override @Inline protected boolean isCellLive(ObjectReference object){  if (!HEADER_MARK_BITS) {    return super.isCellLive(object);  }  return testMarkState(object);}  }
class C{  public static double[] toPrimitive(Double a[]){  double b[]=new double[a.length];  for (int i=0; i < a.length; i++) {    b[i]=a[i];  }  return b;}  }
class C{  private void close(){  try {    if (writer != null) {      writer.close();    }  } catch (  IOException ioe) {    logger.error("Problem closing resources.",ioe);    System.exit(1);  }}  }
class C{  public boolean isSetMessageType(){  return this.messageType != null;}  }
class C{  public Object opt(String key){  return key == null ? null : this.map.get(key);}  }
class C{  public Boolean isActive(){  return active;}  }
class C{  @Override protected void beforeOffer(final T ref){  if (tryLockSize != 0 && size == tryLockSize) {    if (lock.tryLock()) {      try {        evictAll(true);        if (batchedUpdatedListener != null) {          batchedUpdatedListener.didBatchUpdates();        }      }  finally {        lock.unlock();      }    }    return;  }  if (size + 1 == capacity) {    lock.lock();    try {      evictAll(true);      if (batchedUpdatedListener != null) {        batchedUpdatedListener.didBatchUpdates();      }    }  finally {      lock.unlock();    }  }}  }
class C{  public String checkKeyAndGetDatabaseName(String db){  if (key == null) {    return db;  }  if (key.equals(db)) {    return keyDatabase;  }  throw DbException.get(ErrorCode.WRONG_USER_OR_PASSWORD);}  }
class C{  private void disposeOldImages(){  if (imageManager != null) {    imageManager.dispose();    imageManager=null;  }}  }
class C{  private Calendar parse(Class sourceType,Class targetType,String value) throws Exception {  Exception firstEx=null;  for (int i=0; i < patterns.length; i++) {    try {      DateFormat format=getFormat(patterns[i]);      Calendar calendar=parse(sourceType,targetType,value,format);      return calendar;    } catch (    Exception ex) {      if (firstEx == null) {        firstEx=ex;      }    }  }  if (patterns.length > 1) {    throw new ConversionException("Error converting '" + toString(sourceType) + "' to '"+ toString(targetType)+ "' using  patterns '"+ displayPatterns+ "'");  } else {    throw firstEx;  }}  }
class C{  static public List<Sequence<IString>> tokenizeFile(String filename,boolean doNIST){  List<Sequence<IString>> sequences=new ArrayList<>();  LineNumberReader reader=IOTools.getReaderFromFile(filename);  try {    for (String line; (line=reader.readLine()) != null; ) {      if (doNIST)       line=NISTTokenizer.tokenize(line);      sequences.add(IStrings.tokenize(line));    }    reader.close();  } catch (  IOException e) {    e.printStackTrace();  }  return sequences;}  }
class C{  static void addZipkinBinaryAnnotations(Builder zipkinSpan,Span span,Endpoint endpoint){  for (  Map.Entry<String,String> e : span.tags().entrySet()) {    BinaryAnnotation.Builder binaryAnn=BinaryAnnotation.builder();    binaryAnn.type(Type.STRING);    binaryAnn.key(e.getKey());    try {      binaryAnn.value(e.getValue().getBytes("UTF-8"));    } catch (    UnsupportedEncodingException ex) {      log.error("Error encoding string as UTF-8",ex);    }    binaryAnn.endpoint(endpoint);    zipkinSpan.addBinaryAnnotation(binaryAnn.build());  }}  }
class C{  public int next() throws ParseException {  blankCharacters=0;  start=position - 1;  nextToken();  end=position - endGap();  return type;}  }
class C{  public GasStack(int id,int quantity){  type=GasRegistry.getGas(id);  amount=quantity;}  }
class C{  private VisorNodeSuppressedErrorsJob(Map<UUID,Long> arg,boolean debug){  super(arg,debug);}  }
class C{  public void testGetCheckSum(){  ParallaxRfidProtocol instance=new ParallaxRfidProtocol();  assertEquals("",instance.getCheckSum(msgStandalone));}  }
class C{  public static StyledParagraph deleteChar(AttributedCharacterIterator aci,char[] chars,int deletePos,StyledParagraph oldParagraph){  deletePos-=aci.getBeginIndex();  if (oldParagraph.decorations == null && oldParagraph.fonts == null) {    oldParagraph.length-=1;    return oldParagraph;  }  if (oldParagraph.getRunLimit(deletePos) == deletePos + 1) {    if (deletePos == 0 || oldParagraph.getRunLimit(deletePos - 1) == deletePos) {      return new StyledParagraph(aci,chars);    }  }  oldParagraph.length-=1;  if (oldParagraph.decorations != null) {    deleteFrom(deletePos,oldParagraph.decorationStarts,oldParagraph.decorations.size());  }  if (oldParagraph.fonts != null) {    deleteFrom(deletePos,oldParagraph.fontStarts,oldParagraph.fonts.size());  }  return oldParagraph;}  }
class C{  public StartModuleAction(final ConfAction params){  super(params);}  }
class C{  public FloatColumn(){  this(0,10,0f);}  }
class C{  public MediaType withoutParameters(){  return parameters.isEmpty() ? this : create(type,subtype);}  }
class C{  public static long millisecondsToRun(Runnable runnable){  return TimeKeeper.nanosecondsToRun(runnable) / (long)MILLIS_TO_NANOS;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 10:08:19.816 -0400",hash_original_method="84A0E8AB3674727DEC6722E50692F22C",hash_generated_method="EFF2B3198CFE3536C07C2D7B7E8EDFD5") private static boolean isRtlLocale(Locale locale){  return (TextUtilsCompat.getLayoutDirectionFromLocale(locale) == ViewCompat.LAYOUT_DIRECTION_RTL);}  }
class C{  public void write(byte b[]) throws IOException {  write(b,0,b.length);}  }
class C{  private void measureItem(View child){  ViewGroup.LayoutParams p=child.getLayoutParams();  if (p == null) {    p=new ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT);  }  int childWidthSpec=ViewGroup.getChildMeasureSpec(mWidthMeasureSpec,mListPadding.left + mListPadding.right,p.width);  int lpHeight=p.height;  int childHeightSpec;  if (lpHeight > 0) {    childHeightSpec=MeasureSpec.makeMeasureSpec(lpHeight,MeasureSpec.EXACTLY);  } else {    childHeightSpec=MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED);  }  child.measure(childWidthSpec,childHeightSpec);}  }
class C{  @Override protected void onKeyguardShowing(boolean screenOn){}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case MappingPackage.ENUM_PROPERTY_SOURCE__PROPERTY:    setProperty((EnumLiteral)null);  return;}super.eUnset(featureID);}  }
class C{  protected int x(double xW){  return (int)Math.round(scale * (xW + offsetX) + borderLeft);}  }
class C{  @NotNull @Transient public SyncResult checkSyncStashState(){  if (processState.getProject() == null) {    return new SyncResult(true,false,false,null,null,false,null);  }  GitRepositoryManager manager=GitUtil.getRepositoryManager(processState.getProject());  List<GitRepository> repositories=manager.getRepositories();  CloudRepoSourceContext cloudRepo=null;  GerritSourceContext gerritRepo=null;  GitSourceContext otherGitRepo=null;  String repoType=null;  boolean foundDebuggee=false;  if (getCloudDebuggerClient() != null && !com.google.common.base.Strings.isNullOrEmpty(processState.getProjectNumber())) {    ListDebuggeesResponse debuggees;    try {      debuggees=getCloudDebuggerClient().debuggees().list().setProject(processState.getProjectNumber()).setClientVersion(ServiceManager.getService(CloudToolsPluginInfoService.class).getClientVersionForCloudDebugger()).execute();      for (      Debuggee debuggee : debuggees.getDebuggees()) {        if (processState.getDebuggeeId() != null && processState.getDebuggeeId().equals(debuggee.getId())) {          foundDebuggee=true;          List<SourceContext> contexts=debuggee.getSourceContexts();          if (contexts != null) {            for (            SourceContext sourceContext : contexts) {              cloudRepo=sourceContext.getCloudRepo();              gerritRepo=sourceContext.getGerrit();              otherGitRepo=sourceContext.getGit();              if (cloudRepo != null) {                break;              } else               if (sourceContext.getCloudWorkspace() != null) {                repoType=GctBundle.getString("clouddebug.workspace");              }            }          }        }      }    } catch (    IOException ex) {      LOG.warn("Error detecting server side source context",ex);    }  }  if (!foundDebuggee) {    return new SyncResult(true,false,false,null,null,false,GctBundle.getString("clouddebug.unknown.repository.type"));  }  GitRepository targetLocalRepo=null;  String revisionId=null;  if (cloudRepo != null) {    revisionId=cloudRepo.getRevisionId();    repoType=GctBundle.getString("clouddebug.cloud.repository");  } else   if (gerritRepo != null) {    revisionId=gerritRepo.getRevisionId();    repoType=GctBundle.getString("clouddebug.gerrit");  } else   if (otherGitRepo != null) {    revisionId=otherGitRepo.getRevisionId();    repoType=GctBundle.getString("clouddebug.nongoogle.git");  }  if (revisionId != null) {    for (    GitRepository repository : repositories) {      try {        GitChangeUtils.resolveReference(processState.getProject(),repository.getRoot(),revisionId);        targetLocalRepo=repository;        break;      } catch (      VcsException ex) {        LOG.warn("cloud revision not found in local repo.  continuing search...");      }    }  }  boolean needsStash=false;  boolean needsSync=false;  String syncSha=null;  if (targetLocalRepo != null) {    try {      if (GitUtil.hasLocalChanges(true,processState.getProject(),targetLocalRepo.getRoot()) || GitUtil.hasLocalChanges(false,processState.getProject(),targetLocalRepo.getRoot())) {        needsStash=true;      }      if (!Strings.isNullOrEmpty(targetLocalRepo.getCurrentRevision()) && !Strings.isNullOrEmpty(revisionId) && targetLocalRepo.getCurrentRevision() != null && !targetLocalRepo.getCurrentRevision().equals(revisionId)) {        syncSha=revisionId;        needsSync=true;      }    } catch (    VcsException vcsException) {      LOG.error("Error detecting local changes during attach",vcsException);    }  }  boolean hasRemoteRepository=cloudRepo != null || gerritRepo != null || otherGitRepo != null;  return new SyncResult(false,needsStash,needsSync,syncSha,targetLocalRepo,hasRemoteRepository,repoType);}  }
class C{  public int graphType(){  if (m_Classifier instanceof Drawable)   return ((Drawable)m_Classifier).graphType(); else   return Drawable.NOT_DRAWABLE;}  }
class C{  private void checkSize(final int i){  if (i >= max_size) {    final int old_size=max_size;    max_size+=increment_size;    if (max_size <= i) {      max_size=i + increment_size + 2;    }    final byte[] temp=items;    items=new byte[max_size];    System.arraycopy(temp,0,items,0,old_size);    increment_size=incrementSize(increment_size);  }}  }
class C{  public Evidence(){  super();  setEntity(new Entity(TYPE_ID));  getEntity().initDefaultValues(getTypeFactory());}  }
class C{  @Override public boolean execute(String action,JSONArray args,CallbackContext callbackContext){  this.callbackContext=callbackContext;  if (action.equals(ENCODE)) {    JSONObject obj=args.optJSONObject(0);    if (obj != null) {      String type=obj.optString(TYPE);      String data=obj.optString(DATA);      if (type == null) {        type=TEXT_TYPE;      }      if (data == null) {        callbackContext.error("User did not specify data to encode");        return true;      }      encode(type,data);    } else {      callbackContext.error("User did not specify data to encode");      return true;    }  } else   if (action.equals(SCAN)) {    scan(args);  } else {    return false;  }  return true;}  }
class C{  @Before public void before(){  DurianPlugins.resetForTesting();  for (  Class<?> plugin : pluginsToStore) {    String key=DurianPlugins.PROPERTY_PREFIX + plugin.getCanonicalName();    Optional<String> value=Optional.ofNullable(System.getProperty(key));    state.put(plugin,value);    System.clearProperty(key);  }}  }
class C{  @SuppressWarnings("deprecation") public void test_setParameterLjava_lang_StringLjava_lang_Object() throws Exception {  Signature sig=Signature.getInstance("DSA");  try {    sig.setParameter("r",BigInteger.ONE);    sig.setParameter("s",BigInteger.ONE);  } catch (  InvalidParameterException e) {  }catch (  UnsupportedOperationException e) {  }}  }
class C{  public void testSendResponse() throws Exception {  SimpleRequestCollector requestCollector=new SimpleRequestCollector();  stunStack.addRequestListener(requestCollector);  dummyServerSocket.send(new DatagramPacket(msgFixture.bindingRequest,msgFixture.bindingRequest.length,localAddress));  requestCollector.waitForRequest();  Request collectedRequest=requestCollector.collectedRequest;  byte expectedReturn[]=msgFixture.bindingRequest;  byte actualReturn[]=collectedRequest.encode(stunStack);  assertTrue("Received request was not the same as the one that was sent",Arrays.equals(expectedReturn,actualReturn));  Response bindingResponse=MessageFactory.create3489BindingResponse(new TransportAddress(MsgFixture.ADDRESS_ATTRIBUTE_ADDRESS,MsgFixture.ADDRESS_ATTRIBUTE_PORT,Transport.UDP),new TransportAddress(MsgFixture.ADDRESS_ATTRIBUTE_ADDRESS_2,MsgFixture.ADDRESS_ATTRIBUTE_PORT_2,Transport.UDP),new TransportAddress(MsgFixture.ADDRESS_ATTRIBUTE_ADDRESS_3,MsgFixture.ADDRESS_ATTRIBUTE_PORT_3,Transport.UDP));  dgramCollector.startListening(dummyServerSocket);  stunStack.sendResponse(collectedRequest.getTransactionID(),bindingResponse,localAddress,dummyServerAddress);  dgramCollector.waitForPacket();  DatagramPacket receivedPacket=dgramCollector.collectPacket();  assertTrue("The stack did not properly send a Binding Request",(receivedPacket.getLength() > 0));  Response receivedResponse=(Response)Response.decode(receivedPacket.getData(),(char)0,(char)receivedPacket.getLength());  assertEquals("The received request did not match the one that was sent.",bindingResponse,receivedResponse);}  }
class C{  protected final void reviveNotification(final String key) throws RemoteException {  mController.reviveNotification(mWrapper,key);}  }
class C{  public boolean isSupportsNicTeaming(){  return supportsNicTeaming;}  }
class C{  static String packageNameOf(TypeElement type){  while (true) {    Element enclosing=type.getEnclosingElement();    if (enclosing instanceof PackageElement) {      return ((PackageElement)enclosing).getQualifiedName().toString();    }    type=(TypeElement)enclosing;  }}  }
class C{  public static void purgeSharedScheduler(){  _sharedScheduler=null;}  }
class C{  public IntegerAnswerFormat(int minValue,int maxValue){  this.minValue=minValue;  this.maxValue=maxValue;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:09.391 -0400",hash_original_method="C55D1A26828240BF33343375034201CC",hash_generated_method="C35FC72204F663AD1A6CFC4B6DAEA1B9") public LoginException(String message){  super(message);}  }
class C{  static <T extends Comparable>GeneralRange<T> from(Range<T> range){  @Nullable T lowerEndpoint=range.hasLowerBound() ? range.lowerEndpoint() : null;  BoundType lowerBoundType=range.hasLowerBound() ? range.lowerBoundType() : OPEN;  @Nullable T upperEndpoint=range.hasUpperBound() ? range.upperEndpoint() : null;  BoundType upperBoundType=range.hasUpperBound() ? range.upperBoundType() : OPEN;  return new GeneralRange<T>(Ordering.natural(),range.hasLowerBound(),lowerEndpoint,lowerBoundType,range.hasUpperBound(),upperEndpoint,upperBoundType);}  }
class C{  public IcsProgressBar(Context context){  this(context,null);}  }
class C{  @Override protected void onFinishInflate(){  super.onFinishInflate();  if (!isInEditMode()) {  }}  }
class C{  public void error(String msg,Object[] args){  System.out.println("DOM ERROR! class: " + this.getClass().getName());  throw new RuntimeException(XMLMessages.createXMLMessage(msg,args));}  }
class C{  public void connect(Context srcContext,Handler srcHandler,Messenger dstMessenger){  if (DBG)   log("connect srcHandler to the dstMessenger  E");  connected(srcContext,srcHandler,dstMessenger);  replyHalfConnected(STATUS_SUCCESSFUL);  if (DBG)   log("connect srcHandler to the dstMessenger X");}  }
class C{  @Override public int hashCode(){  if (hasBeginning == null)   if (hasEnd == null)   return 0; else   return hasEnd.hashCode(); else   return hashboth(this.hasBeginning.hashCode(),this.hasEnd.hashCode());}  }
class C{  public static org.smpte_ra.schemas.st2067_2_2013.UserTextType buildCPLUserTextType_2013(String value,String language){  org.smpte_ra.schemas.st2067_2_2013.UserTextType userTextType=new org.smpte_ra.schemas.st2067_2_2013.UserTextType();  userTextType.setValue(value);  userTextType.setLanguage(language);  return userTextType;}  }
class C{  boolean isWhiteSpace(char c){  if (('\t' == c) || ('\n' == c) || ('\r' == c)|| ('\u0020' == c))   return true;  return false;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'NOTE'";  db.execSQL(sql);}  }
class C{  public int numMoves(){  return moves.size();}  }
class C{  public static void drawShadow(final Rectangle2D rect,final Graphics2D g2){  Graphics2D g2S=(Graphics2D)g2.create();  Rectangle2D shadow=new Rectangle2D.Double(rect.getX() + 5,rect.getY() + ProcessDrawer.HEADER_HEIGHT + 5,rect.getWidth(),rect.getHeight() - ProcessDrawer.HEADER_HEIGHT);  GeneralPath bottom=new GeneralPath();  bottom.moveTo(shadow.getX(),rect.getMaxY());  bottom.lineTo(rect.getMaxX(),rect.getMaxY());  bottom.lineTo(shadow.getMaxX(),shadow.getMaxY());  bottom.lineTo(shadow.getMinX(),shadow.getMaxY());  bottom.closePath();  g2S.setPaint(new GradientPaint((float)rect.getX(),(float)rect.getMaxY(),Color.gray,(float)rect.getX(),(float)shadow.getMaxY(),TRANSPARENT_GRAY));  g2S.fill(bottom);  GeneralPath right=new GeneralPath();  right.moveTo(rect.getMaxX(),shadow.getMinY());  right.lineTo(shadow.getMaxX(),shadow.getMinY());  right.lineTo(shadow.getMaxX(),shadow.getMaxY());  right.lineTo(rect.getMaxX(),rect.getMaxY());  right.closePath();  g2S.setPaint(new GradientPaint((float)rect.getMaxX(),(float)shadow.getY(),Color.gray,(float)shadow.getMaxX(),(float)shadow.getY(),TRANSPARENT_GRAY));  g2S.fill(right);  g2S.dispose();}  }
class C{  public Where<T,ID> reset(){  for (int i=0; i < clauseStackLevel; i++) {    clauseStack[i]=null;  }  clauseStackLevel=0;  return this;}  }
class C{  public static double logStandardNormalPdf(double x){  return Math.log(standardNormalPdf(x));}  }
class C{  protected void recordLocalNSDecl(Node node){  NamedNodeMap atts=((Element)node).getAttributes();  int length=atts.getLength();  for (int i=0; i < length; i++) {    Node attr=atts.item(i);    String localName=attr.getLocalName();    String attrPrefix=attr.getPrefix();    String attrValue=attr.getNodeValue();    String attrNS=attr.getNamespaceURI();    localName=localName == null || XMLNS_PREFIX.equals(localName) ? "" : localName;    attrPrefix=attrPrefix == null ? "" : attrPrefix;    attrValue=attrValue == null ? "" : attrValue;    attrNS=attrNS == null ? "" : attrNS;    if (XMLNS_URI.equals(attrNS)) {      if (XMLNS_URI.equals(attrValue)) {        String msg=Utils.messages.createMessage(MsgKey.ER_NS_PREFIX_CANNOT_BE_BOUND,new Object[]{attrPrefix,XMLNS_URI});        if (fErrorHandler != null) {          fErrorHandler.handleError(new DOMErrorImpl(DOMError.SEVERITY_ERROR,msg,MsgKey.ER_NS_PREFIX_CANNOT_BE_BOUND,null,null,null));        }      } else {        if (XMLNS_PREFIX.equals(attrPrefix)) {          if (attrValue.length() != 0) {            fNSBinder.declarePrefix(localName,attrValue);          } else {          }        } else {          fNSBinder.declarePrefix("",attrValue);        }      }    }  }}  }
class C{  public void endStopCQSend(long startTime,boolean failed){  long duration=getStatTime() - startTime;  endClientOpSend(duration,failed);  this.sendStats.incInt(stopCQSendInProgressId,-1);  int endStopCQSendId;  if (failed) {    endStopCQSendId=stopCQSendFailedId;  } else {    endStopCQSendId=stopCQSendId;  }  this.sendStats.incInt(endStopCQSendId,1);  this.stats.incLong(stopCQSendDurationId,duration);}  }
class C{  public static ValueDate fromDateValue(long dateValue){  return (ValueDate)cache(new ValueDate(dateValue));}  }
class C{  public static SearchResultGroup[] excludeCompilationUnits(SearchResultGroup[] grouped,RefactoringStatus status) throws JavaModelException {  List<SearchResultGroup> result=new ArrayList<SearchResultGroup>();  boolean wasEmpty=grouped.length == 0;  for (int i=0; i < grouped.length; i++) {    IResource resource=grouped[i].getResource();    IJavaElement element=JavaCore.create(resource);    if (!(element instanceof ICompilationUnit))     continue;    ICompilationUnit cu=(ICompilationUnit)JavaCore.create(resource);    if (!cu.isStructureKnown()) {      status.addError(Messages.format(RefactoringCoreMessages.Checks_cannot_be_parsed,BasicElementLabels.getPathLabel(cu.getPath(),false)));      continue;    }    result.add(grouped[i]);  }  if ((!wasEmpty) && result.isEmpty())   status.addFatalError(RefactoringCoreMessages.Checks_all_excluded);  return result.toArray(new SearchResultGroup[result.size()]);}  }
class C{  public void saveLockPattern(List<LockPatternView.Cell> pattern,boolean isFallback){  final byte[] hash=patternToHash(pattern);  try {    getLockSettings().setLockPattern(hash,getCurrentOrCallingUserId());    DevicePolicyManager dpm=getDevicePolicyManager();    KeyStore keyStore=KeyStore.getInstance();    if (pattern != null) {      keyStore.password(patternToString(pattern));      setBoolean(PATTERN_EVER_CHOSEN_KEY,true);      if (!isFallback) {        deleteGallery();        setLong(PASSWORD_TYPE_KEY,DevicePolicyManager.PASSWORD_QUALITY_SOMETHING);        dpm.setActivePasswordState(DevicePolicyManager.PASSWORD_QUALITY_SOMETHING,pattern.size(),0,0,0,0,0,0,getCurrentOrCallingUserId());      } else {        setLong(PASSWORD_TYPE_KEY,DevicePolicyManager.PASSWORD_QUALITY_BIOMETRIC_WEAK);        setLong(PASSWORD_TYPE_ALTERNATE_KEY,DevicePolicyManager.PASSWORD_QUALITY_SOMETHING);        finishBiometricWeak();        dpm.setActivePasswordState(DevicePolicyManager.PASSWORD_QUALITY_BIOMETRIC_WEAK,0,0,0,0,0,0,0,getCurrentOrCallingUserId());      }    } else {      if (keyStore.isEmpty()) {        keyStore.reset();      }      dpm.setActivePasswordState(DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED,0,0,0,0,0,0,0,getCurrentOrCallingUserId());    }  } catch (  RemoteException re) {    Log.e(TAG,"Couldn't save lock pattern " + re);  }}  }
class C{  private static void test(){}  }
class C{  private void addRequirementsToIntent(Intent intent){  intent.putExtra(INTENT_REQUIREMENTS_BITMAP,neededRequirements);}  }
class C{  private static void readIntegerBased(int xSize,int ySize,Band band,IntGrid2D grid) throws RuntimeException {  int result=0;  int[] line=new int[xSize];  for (int currRow=0; currRow < ySize; currRow++) {    if (result != gdalconstConstants.CE_None) {      throw new RuntimeException("Problem reading raster");    }    for (int currCol=0; currCol < xSize; currCol++) {      int i=line[currCol];      grid.set(currCol,currRow,i);    }  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.FOR_STATEMENT__STATEMENT:    setStatement((Statement)null);  return;case N4JSPackage.FOR_STATEMENT__EXPRESSION:setExpression((Expression)null);return;case N4JSPackage.FOR_STATEMENT__INIT_EXPR:setInitExpr((Expression)null);return;case N4JSPackage.FOR_STATEMENT__UPDATE_EXPR:setUpdateExpr((Expression)null);return;case N4JSPackage.FOR_STATEMENT__FOR_IN:setForIn(FOR_IN_EDEFAULT);return;case N4JSPackage.FOR_STATEMENT__FOR_OF:setForOf(FOR_OF_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public boolean boundCheck(TypeBinding argumentType){switch (this.boundKind) {case Wildcard.UNBOUND:    return true;case Wildcard.EXTENDS:  if (!argumentType.isCompatibleWith(this.bound))   return false;for (int i=0, length=this.otherBounds == null ? 0 : this.otherBounds.length; i < length; i++) {  if (!argumentType.isCompatibleWith(this.otherBounds[i]))   return false;}return true;default :return argumentType.isCompatibleWith(this.bound);}}  }
class C{  public void init(boolean forEncryption,CipherParameters privParam,CipherParameters pubParam,CipherParameters params){  this.forEncryption=forEncryption;  this.privParam=privParam;  this.pubParam=pubParam;  this.V=new byte[0];  extractParams(params);}  }
class C{  public MPPOrderNodeProduct(MPPWFNodeProduct np,MPPOrderNode PP_Order_Node){  this(PP_Order_Node.getCtx(),0,PP_Order_Node.get_TrxName());  setClientOrg(PP_Order_Node);  setSeqNo(np.getSeqNo());  setIsActive(np.isActive());  setM_Product_ID(np.getM_Product_ID());  setQty(np.getQty());  setIsSubcontracting(np.isSubcontracting());  setPP_Order_ID(PP_Order_Node.getPP_Order_ID());  setPP_Order_Workflow_ID(PP_Order_Node.getPP_Order_Workflow_ID());  setPP_Order_Node_ID(PP_Order_Node.get_ID());}  }
class C{  private void classFilePrologue(){  final int NOT_ACC_PUBLIC=0;  cw=new ClassWriter(ClassWriter.COMPUTE_MAXS + ClassWriter.COMPUTE_FRAMES);  cw.visit(Opcodes.V1_8,NOT_ACC_PUBLIC + Opcodes.ACC_FINAL + Opcodes.ACC_SUPER,className,null,superName,null);  cw.visitSource(sourceFile,null);  String invokerDesc=invokerType.toMethodDescriptorString();  mv=cw.visitMethod(Opcodes.ACC_STATIC,invokerName,invokerDesc,null,null);}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  protected Exception(@Nullable String message,@Nullable Throwable cause,boolean enableSuppression,boolean writableStackTrace){  super(message,cause,enableSuppression,writableStackTrace);}  }
class C{  public void testCloning() throws CloneNotSupportedException {  DefaultCategoryDataset d1=new DefaultCategoryDataset();  DefaultCategoryDataset d2=(DefaultCategoryDataset)d1.clone();  assertTrue(d1 != d2);  assertTrue(d1.getClass() == d2.getClass());  assertTrue(d1.equals(d2));  d1.addValue(1.0,"R1","C1");  d1.addValue(2.0,"R1","C2");  d2=(DefaultCategoryDataset)d1.clone();  assertTrue(d1 != d2);  assertTrue(d1.getClass() == d2.getClass());  assertTrue(d1.equals(d2));  d1.addValue(3.0,"R1","C1");  assertFalse(d1.equals(d2));  d2.addValue(3.0,"R1","C1");  assertTrue(d1.equals(d2));}  }
class C{  private void connect() throws DebuggerException {  final String connectorName="com.sun.jdi.SocketAttach";  AttachingConnector connector=connector(connectorName);  if (connector == null) {    throw new DebuggerException(String.format("Unable connect to target Java VM. Requested connector '%s' not found. ",connectorName));  }  Map<String,Connector.Argument> arguments=connector.defaultArguments();  arguments.get("hostname").setValue(host);  ((Connector.IntegerArgument)arguments.get("port")).setValue(port);  int attempt=0;  for (; ; ) {    try {      Thread.sleep(2000);      vm=connector.attach(arguments);      vm.suspend();      break;    } catch (    UnknownHostException|IllegalConnectorArgumentsException e) {      throw new DebuggerException(e.getMessage(),e);    }catch (    IOException e) {      LOG.error(e.getMessage(),e);      if (++attempt > 10) {        throw new DebuggerException(e.getMessage(),e);      }      try {        Thread.sleep(2000);      } catch (      InterruptedException ignored) {      }    }catch (    InterruptedException ignored) {    }  }  eventsCollector=new EventsCollector(vm.eventQueue(),this);  LOG.debug("Connect {}:{}",host,port);}  }
class C{  public void updateArtifactConfig(Artifact artifact,Map<String,String> properties) throws IOException {  doUpdateArtifactConfig(artifact,properties);}  }
class C{  public char first(){  return reorderedACI.first();}  }
class C{  protected NoneVal(){}  }
class C{  private static int[] intArray(double a,double b,double c){  return new int[]{(int)a,(int)b,(int)c};}  }
class C{  public static double[] multiply(double[] d,double m){  double[] out=new double[d.length];  for (int i=0; i < d.length; i++) {    out[i]=d[i] * m;  }  return out;}  }
class C{  public static String createQueryString(String name,boolean allowNumbers){  if (name == null)   throw new NullPointerException("null name");  String retString=null;  name=I18NConvert.instance().getNorm(name);  int maxLen=SearchSettings.MAX_QUERY_LENGTH.getValue();  Set<String> keywords=keywords(name,allowNumbers);  if (keywords.isEmpty()) {    retString=removeIllegalChars(name);    retString=StringUtils.truncate(retString,maxLen);  } else {    StringBuilder sb=new StringBuilder();    int numWritten=0;    for (    String currKey : keywords) {      if (numWritten >= maxLen)       break;      if ((numWritten + currKey.length()) < maxLen) {        if (numWritten > 0) {          sb.append(" ");          numWritten++;        }        sb.append(currKey);        numWritten+=currKey.length();      }    }    retString=sb.toString();    if (retString.equals("")) {      retString=StringUtils.truncate(keywords.iterator().next(),maxLen);    }  }  assert retString.length() <= maxLen : "Original filename: " + name + ", converted: "+ retString;  if (!keywords.isEmpty())   assert !retString.equals("") : "Original filename: " + name;  return retString;}  }
class C{  public static Matrix constructWithCopy(double[][] A){  int m=A.length;  int n=A[0].length;  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    if (A[i].length != n) {      throw new IllegalArgumentException("All rows must have the same length.");    }    for (int j=0; j < n; j++) {      C[i][j]=A[i][j];    }  }  return X;}  }
class C{  private void applyKitKatTranslucency(){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {    setTranslucentStatus(true);    SystemBarTintManager mTintManager=new SystemBarTintManager(this);    mTintManager.setStatusBarTintEnabled(true);    mTintManager.setNavigationBarTintEnabled(true);    mTintManager.setTintDrawable(UIElementsHelper.getGeneralActionBarBackground(this));    getActionBar().setBackgroundDrawable(UIElementsHelper.getGeneralActionBarBackground(this));  }}  }
