class C{  public double eatNumericConstant(){  if (!matchNumericConstant())   throw new BadSyntaxException();  double d=tok.nval;  nextToken();  return d;}  }
class C{  public static <T>Type<T> valueOf(final TypeVariable<?> var){  if (var.getBounds().length > 0) {    Set<Type<?>> bounds=new HashSet<Type<?>>(var.getBounds().length);    for (int i=0, len=var.getBounds().length; i < len; ++i) {      bounds.add(valueOf(var.getBounds()[i]));    }    return (Type<T>)refineBounds(bounds);  } else {    return (Type<T>)TYPE_OF_OBJECT;  }}  }
class C{  public void assertTextPresent(String expected,String actual){  if ((actual == null) || (!actual.contains(expected))) {    throw new AssertionFailedError("expected presence of [" + expected + "], but was ["+ actual+ "]");  }}  }
class C{  public void add(String key,String value){  if (key != null && value != null) {    Object params=urlParamsWithObjects.get(key);    if (params == null) {      params=new HashSet<String>();      this.put(key,params);    }    if (params instanceof List) {      ((List<Object>)params).add(value);    } else     if (params instanceof Set) {      ((Set<Object>)params).add(value);    }  }}  }
class C{  @DELETE @Path("{table}/{key}") @RequiresPermissions("sor|update|{table}") @Timed(name="bv.emodb.sor.DataStoreResource1.delete",absolute=true) @ApiOperation(value="Deletes a piece of content from the data store.",notes="Deletes a piece of content from the data store.",response=SuccessResponse.class) public SuccessResponse delete(@PathParam("table") String table,@PathParam("key") String key,@QueryParam("changeId") TimeUUIDParam changeIdParam,@QueryParam("audit") AuditParam auditParam,@QueryParam("consistency") @DefaultValue("STRONG") WriteConsistencyParam consistency,@QueryParam("tag") List<String> tags,@QueryParam("debug") BooleanParam debug,@Authenticated Subject subject){  Set<String> tagsSet=(tags == null) ? ImmutableSet.<String>of() : Sets.newHashSet(tags);  return doUpdate(table,key,changeIdParam,Deltas.delete(),auditParam,consistency,debug,false,subject,tagsSet);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OneTimeBoostSkillCritical_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200845,skillcaster,skillname);}  }
class C{  void initInputFrame(final ClassWriter cw,final int access,final Type[] args,final int maxLocals){  inputLocals=new int[maxLocals];  inputStack=new int[0];  int i=0;  if ((access & Opcodes.ACC_STATIC) == 0) {    if ((access & MethodWriter.ACC_CONSTRUCTOR) == 0) {      inputLocals[i++]=OBJECT | cw.addType(cw.thisName);    } else {      inputLocals[i++]=UNINITIALIZED_THIS;    }  }  for (int j=0; j < args.length; ++j) {    int t=type(cw,args[j].getDescriptor());    inputLocals[i++]=t;    if (t == LONG || t == DOUBLE) {      inputLocals[i++]=TOP;    }  }  while (i < maxLocals) {    inputLocals[i++]=TOP;  }}  }
class C{  @Override public void afterInjection(Object injectee){  setFramePath(injectee);  initFindByFields(injectee);  initPageObjectFields(injectee);  invokePostConstruct(injectee);}  }
class C{  @Override public void reconcile(final SchedulerDriver driver){  if (isImplicitReconciliationTriggered.get()) {    return;  }synchronized (unreconciled) {    if (!unreconciled.isEmpty()) {      final long nowMs=getCurrentTimeMillis();      if (nowMs >= lastRequestTimeMs + backOffMs) {        lastRequestTimeMs=nowMs;        long newBackoff=backOffMs * MULTIPLIER;        backOffMs=Math.min(newBackoff > 0 ? newBackoff : 0,MAX_BACKOFF_MS);        LOGGER.info("Triggering explicit reconciliation of {} remaining tasks, next " + "explicit reconciliation in {}ms or later",unreconciled.size(),backOffMs);        driver.reconcileTasks(ImmutableList.copyOf(unreconciled.values()));      } else {        LOGGER.info("Too soon since last explicit reconciliation trigger. Waiting at " + "least {}ms before next explicit reconciliation ({} remaining tasks)",lastRequestTimeMs + backOffMs - nowMs,unreconciled.size());      }    } else {      LOGGER.info("Triggering implicit final reconciliation of all tasks");      driver.reconcileTasks(Collections.<TaskStatus>emptyList());      resetTimerValues();      isImplicitReconciliationTriggered.set(true);    }  }}  }
class C{  @Override public boolean isMatchByID(){  return getUidToOperateBy() != null && NotifyModifiers.isMatchByID(getNotifyInfo().getNotifyType());}  }
class C{  private AuthenticationPermission(Data data,String actions){  super(data.name);  this.me=data.me;  this.peer=data.peer;  this.actions=actions;  parseActions();}  }
class C{  public boolean contains(S2Point p){  return contains(S2CellId.fromPoint(p));}  }
class C{  public DefaultHibernateSpaceDataSourceConfigurer sessionFactory(SessionFactory sessionFactory){  this.sessionFactory=sessionFactory;  return this;}  }
class C{  public SnackTextfileDoubleDataSource(File file) throws FileNotFoundException {  this(new FileReader(file));}  }
class C{  @Nullable public static String mergeXml(@NotNull RenderingContext context,String sourceXml,String targetXml,File targetFile){  boolean ok;  String fileName=targetFile.getName();  String contents;  if (fileName.equals(SdkConstants.FN_ANDROID_MANIFEST_XML)) {    Document currentDocument=XmlUtils.parseDocumentSilently(targetXml,true);    assert currentDocument != null : targetXml + " failed to parse";    Document fragment=XmlUtils.parseDocumentSilently(sourceXml,true);    assert fragment != null : sourceXml + " failed to parse";    contents=mergeManifest(targetFile,targetXml,sourceXml);    ok=contents != null;  } else {    String parentFolderName=targetFile.getParentFile().getName();    ResourceFolderType folderType=ResourceFolderType.getFolderType(parentFolderName);    contents=mergeResourceFile(context,targetXml,sourceXml,fileName,folderType);    ok=contents != null;  }  if (!ok) {    contents=wrapWithMergeConflict(targetXml,sourceXml);    context.getWarnings().add(String.format("Merge conflict for: %1$s this file must be fixed by hand",targetFile.getName()));  }  return contents;}  }
class C{  private boolean isPopulating(){  return this.populatingFlag;}  }
class C{  public FactoryConfigurationError(String msg){  super(msg);  this.exception=null;}  }
class C{  @Override public double cost(Target t1,Unit uleft,Target t2,Unit uright){  Integer leftIndex=new Integer(uleft.index);  Map rightUnitsMap=(Map)left.get(leftIndex);  if (rightUnitsMap == null)   return Double.POSITIVE_INFINITY;  Integer rightIndex=new Integer(uright.index);  Float cost=(Float)rightUnitsMap.get(rightIndex);  if (cost == null)   return Double.POSITIVE_INFINITY;  return cost.doubleValue();}  }
class C{  @NotNull private List<Pair<StyleResourceValue,Module>> resolveLocallyDefinedModuleThemes(){  final Module module=myConfiguration.getModule();  final List<Pair<StyleResourceValue,Module>> result=Lists.newArrayList();  fillModuleResources(module,ModuleResourceRepository.getModuleResources(module,true),result);  final List<AndroidFacet> allAndroidDependencies=AndroidUtils.getAllAndroidDependencies(module,false);  for (  AndroidFacet facet : allAndroidDependencies) {    fillModuleResources(facet.getModule(),facet.getModuleResources(true),result);  }  return result;}  }
class C{  public int size(){  if (mListeners != null) {    return mListeners.size();  } else {    return 0;  }}  }
class C{  public PhotosReportCommentQuery reason(ReportReason value){  return unsafeParam("reason",value);}  }
class C{  public static boolean isNetworkTypeCellular(String networkType){  return networkType.equals("MOBILE");}  }
class C{  public void addGeneratedResourceFolder(@NotNull String path){  File directory=myFileStructure.createProjectDir(path);  myGeneratedResourceFolders.add(directory);}  }
class C{  protected void performDefaults(){  super.performDefaults();  initializeValues();}  }
class C{  public synchronized void addFrameSavedListener(FrameSavedListener listener){  if (listenerList == null) {    listenerList=new javax.swing.event.EventListenerList();  }  listenerList.add(FrameSavedListener.class,listener);}  }
class C{  public GermanLexicon(URL compiledURL,URL addendaURL,URL letterToSoundURL,boolean binary){  setLexiconParameters(compiledURL,addendaURL,letterToSoundURL,binary);}  }
class C{  public static FilteredDataTagValue fromXML(final Element domElement){  Long id=null;  String name;  FilteredDataTagValue result=null;  try {    id=Long.valueOf(domElement.getAttribute(XML_ATTRIBUTE_ID));  } catch (  NumberFormatException nfe) {    LOGGER.error("Cannot extract valid id attribute from <DataTag> element.");    id=null;  }  if (id != null) {    name=domElement.getAttribute(XML_ATTRIBUTE_NAME);    result=new FilteredDataTagValue(id,name);    NodeList fields=domElement.getChildNodes();    String fieldName;    String fieldValueString;    Node fieldNode;    int fieldsCount=fields.getLength();    for (int i=0; i != fieldsCount; i++) {      fieldNode=fields.item(i);      if (fieldNode.getNodeType() == Node.ELEMENT_NODE && fieldNode.getFirstChild() != null) {        fieldName=fieldNode.getNodeName();        fieldValueString=fieldNode.getFirstChild().getNodeValue();        if (fieldName.equals("value")) {          String dataType=fieldNode.getAttributes().item(0).getNodeValue();          result.value=fieldValueString;          result.dataType=dataType;        } else         if (fieldName.equals("value-description")) {          result.valueDescription=fieldValueString;        } else         if (fieldName.equals("quality-code")) {          result.qualityCode=Integer.valueOf(fieldValueString);        } else         if (fieldName.equals("quality-description")) {          result.qualityDescription=fieldValueString;        } else         if (fieldName.equals("timestamp")) {          try {            result.timestamp=new Timestamp(Long.parseLong(fieldValueString));          } catch (          NumberFormatException nfe) {            LOGGER.error("Error during timestamp extraction. Taking current time as timestamp.");            result.timestamp=new Timestamp(System.currentTimeMillis());          }        } else         if (fieldName.equals("dynamic-filtered")) {          result.dynamicFiltered=Boolean.valueOf(fieldValueString).booleanValue();        } else         if (fieldName.equals("filter-applied")) {          result.filterApplied=Short.valueOf(fieldValueString).shortValue();        }      }    }  }  return result;}  }
class C{  public boolean isModified(){  return _modified;}  }
class C{  public JsonArray add(float value){  values.add(Json.value(value));  return this;}  }
class C{  protected void populateAddressFromCache(HttpRequest httpRequest){  String serverHost=getHost(httpRequest);  if (serverHost != null && !serverHost.isEmpty()) {    String resolvedAddress=ResolvedHostnameCacheFilter.getPreviouslyResolvedAddressForHost(serverHost);    if (resolvedAddress != null) {      harEntry.setServerIPAddress(resolvedAddress);    } else {      log.trace("Unable to find cached IP address for host: {}. IP address in HAR entry will be blank.",serverHost);    }  } else {    log.warn("Unable to identify host from request uri: {}",httpRequest.getUri());  }}  }
class C{  @NotNull public DeletePersonGroupAction deleteGroup(@NotNull String personGroupId){  Validation.validate(personGroupId,"^[a-z0-9_-]{1,64}$",new ParameterValidationException("personGroupId","Person group ID is invalid. Valid format should be a string composed by numbers, english letters in lower case, '-', '_', and no longer than 64 characters."));  return new DeletePersonGroupAction(cognitiveContext,personGroupId);}  }
class C{  public synchronized boolean isClosed(){  return journalWriter == null;}  }
class C{  public void removeEntityClass(Class<?> entityClass){  checkNotInitialized();  entityClasses.remove(entityClass);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Poison_END_A_TO_SELF(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200781,skilltarget);}  }
class C{  final boolean indexesDeletedNode(){  return node.value == null;}  }
class C{  public ContentletQuery addHost(Host host){  return addHost(host.getIdentifier());}  }
class C{  public void clear(){  mRoot=null;  if (mSelection != null) {    mSelection.clear();  }  mWidgets.clear();}  }
class C{  public Bundler putBooleanArray(String key,boolean[] value){  bundle.putBooleanArray(key,value);  return this;}  }
class C{  public FastCosineTransformer(final DctNormalization normalization){  this.normalization=normalization;}  }
class C{  @Override public void endContentModel(Augmentations augs) throws XNIException {  if (fDTDGrammar != null)   fDTDGrammar.endContentModel(augs);  if (fDTDContentModelHandler != null) {    fDTDContentModelHandler.endContentModel(augs);  }}  }
class C{  public FieldVector3D<T> subtract(final double factor,final FieldVector3D<T> v){  return new FieldVector3D<T>(1.0,this,-factor,v);}  }
class C{  public void createGraphs(){  String sUsableString=new StringBuilder().append(DataString).toString();  if (TextPreprocessor != null)   sUsableString=TextPreprocessor.preprocess(sUsableString);  int iLen=DataString.length();  HashMap hTokenAppearence=new HashMap();  for (int iNGramSize=MinSize; iNGramSize <= MaxSize; iNGramSize++) {    if (iLen < iNGramSize)     continue;    String sCurNGram=null;    for (int iCurStart=0; iCurStart < iLen; iCurStart++) {      if (iLen < iCurStart + iNGramSize)       break;      sCurNGram=sUsableString.substring(iCurStart,iCurStart + iNGramSize);      if (WordEvaluator != null)       if (!WordEvaluator.evaluateWord(sCurNGram))       continue;      if (hTokenAppearence.containsKey(sCurNGram))       hTokenAppearence.put(sCurNGram,((Double)hTokenAppearence.get(sCurNGram)).doubleValue() + 1.0); else       hTokenAppearence.put(sCurNGram,1.0);    }  }  for (int iNGramSize=MinSize; iNGramSize <= MaxSize; iNGramSize++) {    if (iLen < iNGramSize)     continue;    Vector PrecedingNeighbours=new Vector();    UniqueVertexGraph gGraph=getGraphLevelByNGramSize(iNGramSize);    String sCurNGram="";    for (int iCurStart=0; iCurStart < iLen; iCurStart++) {      if (iLen < iCurStart + iNGramSize)       break;      sCurNGram=sUsableString.substring(iCurStart,iCurStart + iNGramSize);      if (WordEvaluator != null)       if (!WordEvaluator.evaluateWord(sCurNGram))       continue;      String[] aFinalNeighbours;      if (Normalizer != null)       aFinalNeighbours=(String[])Normalizer.normalize(null,PrecedingNeighbours.toArray()); else {        aFinalNeighbours=new String[PrecedingNeighbours.size()];        PrecedingNeighbours.toArray(aFinalNeighbours);      }      createEdgesConnecting(gGraph,sCurNGram,java.util.Arrays.asList(aFinalNeighbours),hTokenAppearence);      PrecedingNeighbours.add(sCurNGram);      if (PrecedingNeighbours.size() > CorrelationWindow * 3)       PrecedingNeighbours.removeElementAt(0);    }    int iNeighboursLen=PrecedingNeighbours.size();    if (iNeighboursLen > 0) {      createEdgesConnecting(gGraph,sCurNGram,(List)PrecedingNeighbours,hTokenAppearence);    }  }}  }
class C{  public synchronized void addURLs(List<URL> urls){  for (  URL url : urls)   super.addURL(url);  ArrayList searchList=new ArrayList();  searchList.addAll(searchPath);  searchList.addAll(urls);  searchPath=Collections.unmodifiableList(searchPath);}  }
class C{  public static void closePrivateStore(Player activePlayer){  activePlayer.setStore(null);  activePlayer.unsetState(CreatureState.PRIVATE_SHOP);  PacketSendUtility.broadcastPacket(activePlayer,new SM_EMOTION(activePlayer,EmotionType.CLOSE_PRIVATESHOP,0,0),true);}  }
class C{  @Override public ArrayList<Point> internalTrim(ArrayList<Point> input){  if (input.size() <= DataNormalizer.POINT_COUNT) {    return input;  }  ArrayList<Point> output=new ArrayList<>(DataNormalizer.POINT_COUNT);  ListIterator<Point> it=input.listIterator(input.size() - DataNormalizer.POINT_COUNT);  while (it.hasNext()) {    output.add(it.next());  }  return output;}  }
class C{  @Override public ASModel parseASURI(String uri) throws Exception {  XMLInputSource source=new XMLInputSource(null,uri,null);  return parseASInputSource(source);}  }
class C{  public static String execute(String command,File cwd){  try {    StringBuffer output=new StringBuffer();    Process process=Runtime.getRuntime().exec(command,null,cwd);    BufferedReader input=new BufferedReader(new InputStreamReader(process.getInputStream()));    String line;    while ((line=input.readLine()) != null) {      String trimmed=line.trim();      if (trimmed.length() == 0) {        continue;      }      output.append(trimmed);      output.append("\n");    }    process.waitFor();    return output.toString();  } catch (  Exception e) {    LOGGER.log(Level.WARNING,"Exception encountered while running command " + command,e);    return "";  }}  }
class C{  @Override public double[] makeDensityTestValues(){  return new double[]{0,0,0,0,0.0594218160072,0.0436977691036,0.0508364857798,0.054873528325,0.0587182664085,0.0636229042785};}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public static String computeSimpsonReciprocal(ViewerBase viewer,ProgressListener progressListener) throws IOException, CanceledException {  if (viewer instanceof MainViewer)   return toString(computeSimpsonReciprocal((MainViewer)viewer,progressListener)); else   if (viewer instanceof ClassificationViewer)   return toString(computeSimpsonReciprocal((ClassificationViewer)viewer,progressListener)); else   return null;}  }
class C{  public boolean isCritical(){  return false;}  }
class C{  @RequestMapping(value="/rest/activiti/jobs",method=RequestMethod.GET,produces="application/json") public JsonNode listJobs(HttpServletRequest request){  log.debug("REST request to get a list of jobs");  ServerConfig serverConfig=retrieveServerConfig();  Map<String,String[]> parameterMap=getRequestParametersWithoutServerId(request);  try {    return jobService.listJobs(serverConfig,parameterMap);  } catch (  ActivitiServiceException e) {    throw new BadRequestException(e.getMessage());  }}  }
class C{  public Gaussian(double mean,double sigma) throws MathIllegalArgumentException {  this(1 / (sigma * FastMath.sqrt(2 * Math.PI)),mean,sigma);}  }
class C{  public static void requireAnyAttribute(SimpleMethod method,Element element,String... attributeNames) throws ValidationException {  StringBuilder sb=new StringBuilder();  for (  String name : attributeNames) {    String attributeValue=element.getAttribute(name);    if (attributeValue.length() > 0) {      return;    }    if (sb.length() > 0) {      sb.append(" ");    }    sb.append("\"").append(name).append("\"");  }  handleError("Element must include one of " + sb + " attributes.",method,element);}  }
class C{  protected void validateMetrics(Set<LogicalMetric> logicalMetrics,LogicalTable table) throws BadApiRequestException {  Set<String> validMetricNames=table.getLogicalMetrics().stream().map(null).collect(Collectors.toSet());  Set<String> invalidMetricNames=logicalMetrics.stream().map(null).filter(null).collect(Collectors.toSet());  if (!invalidMetricNames.isEmpty()) {    LOG.debug(METRICS_NOT_IN_TABLE.logFormat(invalidMetricNames,table.getName()));    throw new BadApiRequestException(METRICS_NOT_IN_TABLE.format(invalidMetricNames,table.getName()));  }}  }
class C{  public void addSuppressionDirective(Element elem,String directive,List<ConfigAspect> configAspects){  Matcher matcher=SUPPRESSION_DIRECTIVE_PATTERN.matcher(directive);  if (!matcher.matches()) {    diagCollector.addDiag(Diag.error(elem.getLocation(),"The warning_suppression '%s' does not match the expected pattern " + "'<aspect>-<rule>' or '<aspect>-*'.",directive));    return;  }  String aspectName=matcher.group("aspect");  String ruleName=matcher.group("rule");  ConfigAspect matching=null;  for (  ConfigAspect aspect : configAspects) {    if (aspect.getAspectName().equals(aspectName)) {      matching=aspect;      break;    }  }  if (matching == null) {    diagCollector.addDiag(Diag.error(elem.getLocation(),"The config aspect '%s' used in warning suppression '%s' is unknown.",aspectName,directive));    return;  }  if (!"*".equals(ruleName) && !matching.getLintRuleNames().contains(ruleName)) {    diagCollector.addDiag(Diag.warning(elem.getLocation(),"The rule '%s' in aspect '%s' used in warning suppression '%s' is unknown.",ruleName,aspectName,directive));    return;  }  addPattern(elem,suppressionPattern(aspectName,ruleName));}  }
class C{  public static int min(int a,int b,int c){  int mi;  mi=a;  if (b < mi) {    mi=b;  }  if (c < mi) {    mi=c;  }  return mi;}  }
class C{  public String toString(){  return getClass().getName() + "[registrar=" + registrarID+ " "+ server+ "]";}  }
class C{  public boolean equals(Object obj){  return (obj instanceof ServerMinPrincipal && Constraint.equal(principals,((ServerMinPrincipal)obj).principals));}  }
class C{  public void updateClassifications(String[] cNames,Map<Integer,ListOfLongs>[] fName2ClassId2Location,Map<Integer,Integer>[] fName2ClassId2Weight) throws IOException {  io=new InputOutputReaderWriter(new File(fileName),READ_WRITE);  io.seek(footerSectionRMA6.getStartClassificationsSection());  io.setLength(io.getPosition());  footerSectionRMA6.getAvailableClassification2Position().clear();  for (int i=0; i < cNames.length; i++) {    final String cName=cNames[i];    final ClassificationBlockRMA6 classification=new ClassificationBlockRMA6(cName);    final Map<Integer,ListOfLongs> id2locations=fName2ClassId2Location[i];    for (    int id : id2locations.keySet()) {      final Integer weight=fName2ClassId2Weight[i].get(id);      classification.setSum(id,weight != null ? weight : 0);    }    footerSectionRMA6.getAvailableClassification2Position().put(cName,io.getPosition());    classification.write(io,id2locations);    System.err.println(String.format("Numb. %4s classes: %,10d",Basic.abbreviate(cName,4),id2locations.size()));  }  footerSectionRMA6.setEndClassificationsSection(io.getPosition());  footerSectionRMA6.setStartAuxDataSection(io.getPosition());  io.writeInt(0);  footerSectionRMA6.setEndAuxDataSection(io.getPosition());  footerSectionRMA6.setStartFooterSection(io.getPosition());  footerSectionRMA6.write(io);  close();}  }
class C{  @Override public void startCDATA(Augmentations augs) throws XNIException {}  }
class C{  public static Date stringToDate(String formattedDate){  return stringToDate(formattedDate,SIMPLE_DATE_FORMAT);}  }
class C{  public static String guessExtensionFromMimeType(String mimeType){  if (mimeType == null || mimeType.isEmpty()) {    return null;  }  return mimeTypeToExtensionMap.get(mimeType);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("show findToolbar=");  boolean show=np.getBoolean();  np.matchIgnoreCase(";");  if (getViewer() instanceof IViewerWithFindToolBar) {    IViewerWithFindToolBar viewer=(IViewerWithFindToolBar)getViewer();    if (show) {      if (!viewer.getSearchManager().getFindDialogAsToolBar().isEnabled())       viewer.setShowFindToolBar(true); else       viewer.getSearchManager().getFindDialogAsToolBar().setEnabled(true);    } else     viewer.setShowFindToolBar(false);  } else {    NotificationsInSwing.showWarning(getViewer().getFrame(),"Find not implemented for this type of window");  }}  }
class C{  public CMUTimeLexicon(){  super("cmutimelex");}  }
class C{  public RhistMain(String[] args){  final CmdLineParser parser=new CmdLineParser(this,ParserProperties.defaults().withUsageWidth(80));  try {    parser.parseArgument(args);  } catch (  CmdLineException e) {    System.err.println(e.getMessage());    print_usage_and_exit_(parser);  }  if (help) {    print_usage_and_exit_(parser);  }  if (dir == null)   System.exit(EX_USAGE);  path_=FileSystems.getDefault().getPath(dir);}  }
class C{  public void sendNoMsgToTargetWithToken(Object token,Object target){  sendToTargetOrType(target.getClass(),token);}  }
class C{  @Nullable public FunctionStatement findFunctionInScope(String name){  FunctionStatement localFn=findDeclaredFunction(name);  if (localFn != null) {    return localFn;  }  return findLoadedFunction(name);}  }
class C{  public void startPreview(){  if (camera != null && !previewing) {    camera.startPreview();    previewing=true;  }}  }
class C{  @Override public boolean storeSkills(Player player){  List<PlayerSkillEntry> skillsActive=Lists.newArrayList(player.getSkillList().getAllSkills());  List<PlayerSkillEntry> skillsDeleted=Lists.newArrayList(player.getSkillList().getDeletedSkills());  store(player,skillsActive);  store(player,skillsDeleted);  return true;}  }
class C{  public boolean isInExpirationManager(){  return _inExpirationManager;}  }
class C{  public static void checkout(final ISVNRemoteFolder[] resources,final IProject[] projects,final IProgressMonitor monitor) throws SVNException {  CheckoutCommand command=new CheckoutCommand(resources,projects);  command.run(monitor);}  }
class C{  public SM_SKILL_ACTIVATION(int skillId){  this.skillId=skillId;  this.isActive=true;  this.unk=1;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public boolean isMaterializedView(){  return SqlViewType.MATERIALIZED_VIEW.equals(type);}  }
class C{  public static ArrayList<SelectableColor> convertResourceArraysToColorsArrayList(Context context,boolean sortByName,@ArrayRes int idsArray,@ArrayRes int namesArray,@ArrayRes int colorsArray){  String[] ids=context.getResources().getStringArray(idsArray);  int[] colors=context.getResources().getIntArray(colorsArray);  String[] names=context.getResources().getStringArray(namesArray);  if (ids.length != colors.length && ids.length != names.length) {    Log.e(LOG_TAG,"convertResourceArraysToColorsArrayList(): Arrays must have equals lengths!");    return null;  }  ArrayList<SelectableColor> result=new ArrayList<>();  for (int i=0; i < ids.length; i++) {    result.add(new SelectableColor(ids[i],names[i],colors[i]));  }  if (sortByName) {    Collections.sort(result,new SelectableItemNameComparator<SelectableColor>());  }  return result;}  }
class C{  @Override public Throwable fillInStackTrace(){  return null;}  }
class C{  public boolean isReadOnly(){  return readOnly;}  }
class C{  @Override public void onPrepareNextItemShowInScreen(View next){  View descriptionLayout=next.findViewById(R.id.description_layout);  if (descriptionLayout != null) {    next.findViewById(R.id.description_layout).setVisibility(View.INVISIBLE);  }}  }
class C{  public LocalHostDescriptor(){  super(Host.LOCALHOST,NbBundle.getMessage(LocalHostDescriptor.class,"LBL_Local"),NbBundle.getMessage(LocalHostDescriptor.class,"DESCR_Local"),NODE_ICON,0,EXPAND_ON_FIRST_CHILD);}  }
class C{  private void createUI(){  setLayout(new BorderLayout());  add(createApplyRevertPanel(),BorderLayout.CENTER);}  }
class C{  public static Map<String,Map<RType,Set<com.tencent.tinker.build.aapt.RDotTxtEntry>>> mergePackageRTypeResourceMap(List<PackageRTypeResourceMap> packageRTypeResourceMapList){  Map<String,Map<RType,Set<com.tencent.tinker.build.aapt.RDotTxtEntry>>> packageRTypeResourceMergeMap=new HashMap<String,Map<RType,Set<com.tencent.tinker.build.aapt.RDotTxtEntry>>>();  Map<String,AaptResourceCollector> aaptResourceCollectorMap=new HashMap<String,AaptResourceCollector>();  for (  PackageRTypeResourceMap packageRTypeResourceMap : packageRTypeResourceMapList) {    String packageName=packageRTypeResourceMap.packageName;    Map<RType,Set<com.tencent.tinker.build.aapt.RDotTxtEntry>> rTypeResourceMap=packageRTypeResourceMap.rTypeResourceMap;    AaptResourceCollector aaptResourceCollector=null;    if (aaptResourceCollectorMap.containsKey(packageName)) {      aaptResourceCollector=aaptResourceCollectorMap.get(packageName);    } else {      aaptResourceCollector=new AaptResourceCollector();      aaptResourceCollectorMap.put(packageName,aaptResourceCollector);    }    Iterator<Entry<RType,Set<com.tencent.tinker.build.aapt.RDotTxtEntry>>> iterator=rTypeResourceMap.entrySet().iterator();    while (iterator.hasNext()) {      Entry<RType,Set<com.tencent.tinker.build.aapt.RDotTxtEntry>> entry=iterator.next();      RType rType=entry.getKey();      Set<com.tencent.tinker.build.aapt.RDotTxtEntry> rDotTxtEntrySet=entry.getValue();      for (      com.tencent.tinker.build.aapt.RDotTxtEntry rDotTxtEntry : rDotTxtEntrySet) {        if (rDotTxtEntry.idType.equals(IdType.INT)) {          aaptResourceCollector.addIntResourceIfNotPresent(rType,rDotTxtEntry.name);        } else         if (rDotTxtEntry.idType.equals(IdType.INT_ARRAY)) {          aaptResourceCollector.addResource(rType,rDotTxtEntry.idType,rDotTxtEntry.name,rDotTxtEntry.idValue);        }      }    }  }  Iterator<Entry<String,AaptResourceCollector>> iterator=aaptResourceCollectorMap.entrySet().iterator();  while (iterator.hasNext()) {    Entry<String,AaptResourceCollector> entry=iterator.next();    packageRTypeResourceMergeMap.put(entry.getKey(),entry.getValue().getRTypeResourceMap());  }  return packageRTypeResourceMergeMap;}  }
class C{  public long fileSize(){  try {    if (!isTempTable())     tx.concurrencyMgr().readFile(fileName);  } catch (  LockAbortException e) {    tx.rollback();    throw e;  }  return VanillaDb.fileMgr().size(fileName);}  }
class C{  public static Charset toCharset(Charset charset){  return charset == null ? Charset.defaultCharset() : charset;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public boolean isCritical(){  return false;}  }
class C{  public boolean uninstall(){  if (status != Status.INSTALLED) {    throw new IllegalStateException("Can only uninstall installed components, but status is " + status.toString());  }  assert installedFilesNames != null;  try {    String maryBase=System.getProperty("mary.base");    System.out.println("Removing " + name + "-"+ version+ " from "+ maryBase+ "...");    LinkedList<String> files=getInstalledFileNames();    for (    String file : files) {      if (file.trim().equals(""))       continue;      if (sharedFileNames != null && sharedFileNames.contains(file)) {        System.out.println("Keeping shared file: " + file);        continue;      }      File f=new File(maryBase + "/" + file);      if (f.isDirectory()) {        String[] kids=f.list();        if (kids.length == 0) {          System.err.println("Removing empty directory: " + file);          f.delete();        } else {          System.err.println("Cannot delete non-empty directory: " + file);        }      } else       if (f.exists()) {        System.err.println("Removing file: " + file);        f.delete();      } else {        System.err.println("File doesn't exist -- cannot delete: " + file);      }    }    infoFile.delete();  } catch (  Exception e) {    System.err.println("Cannot uninstall:");    e.printStackTrace();    return false;  }  determineStatus();  return true;}  }
class C{  public ConfigurationException(int errCode,String message){  this(errCode,message,null);}  }
class C{  private StackTraceHelper(){}  }
class C{  @Override public SAXParser newSAXParser() throws ParserConfigurationException {  SAXParser saxParserImpl;  try {    saxParserImpl=new SAXParserImpl(this,features,fSecureProcess);  } catch (  SAXException se) {    throw new ParserConfigurationException(se.getMessage());  }  return saxParserImpl;}  }
class C{  public java.util.Calendar toJdkCalendar(){  return toJodaDateTime().toGregorianCalendar();}  }
class C{  public static <T extends Serializable>Task<T> task(Runnable runnable){  return new RunnableTaskAdapter<T>(runnable);}  }
class C{  static void turnAI(){  boolean withoutAI=true;  for (int y=0; y < field_size; y++) {    for (int x=0; x < field_size; x++) {      if (isCellBusy(x,y,dotHuman) && withoutAI) {        for (int y1=y - 1; y1 < y + field_size; y1++) {          for (int x1=x - 1; x1 < x + field_size; x1++) {            if (!((y == y1) && (x == x1))) {              if (isCellBusy(x1,y1,dotHuman)) {                if (isCellBusy(x * 2 - x1,y * 2 - y1,dotEmpty)) {                  field[x * 2 - x1][y * 2 - y1]=dotAI;                  withoutAI=false;                }                if (isCellBusy(x1 * 2 - x,y1 * 2 - y,dotEmpty)) {                  field[x1 * 2 - x][y1 * 2 - y]=dotAI;                  withoutAI=false;                }              }            }          }        }      }    }  }  int x, y;  if (withoutAI) {    do {      x=rand.nextInt(field_size);      y=rand.nextInt(field_size);    } while (!isCellBusy(x,y,dotEmpty));    field[x][y]=dotAI;  }}  }
class C{  public Object clone(){  return this.copy();}  }
class C{  public List<DependencyGraph> dependencyTreebankDevelopment(){switch (language) {case ENGLISH:    return DependencyGraphReader.read("/export/dat/udt/en/en-ud-dev.conllu",'u');case VIETNAMESE:  return DependencyGraphReader.read("/export/dat/udt/vi/01-test.conll",'x');}return null;}  }
class C{  private static Reader makeReader(String templateLocation) throws IOException {  if (UtilValidate.isEmpty(templateLocation)) {    throw new IllegalArgumentException("FreeMarker template location null or empty");  }  URL locationUrl=null;  try {    locationUrl=FlexibleLocation.resolveLocation(templateLocation);  } catch (  MalformedURLException e) {    throw new IllegalArgumentException(e.getMessage());  }  if (locationUrl == null) {    throw new IllegalArgumentException("FreeMarker file not found at location: " + templateLocation);  }  InputStream locationIs=locationUrl.openStream();  Reader templateReader=new InputStreamReader(locationIs);  String locationProtocol=locationUrl.getProtocol();  if ("file".equals(locationProtocol) && Debug.verboseOn()) {    String locationFile=locationUrl.getFile();    int lastSlash=locationFile.lastIndexOf("/");    String locationDir=locationFile.substring(0,lastSlash);    String filename=locationFile.substring(lastSlash + 1);    Debug.logVerbose("FreeMarker render: filename=" + filename + ", locationDir="+ locationDir,module);  }  return templateReader;}  }
class C{  public boolean removeByObject(T obj){  return removeByObject_impl(obj);}  }
class C{  @Nullable public Bitmap generateIconForUrl(String url){  return generateIconForUrl(url,false);}  }
class C{  @Override public void mouseClicked(MouseEvent e){}  }
class C{  protected BoardEditCommentQuery topicId(int value){  return unsafeParam("topic_id",value);}  }
class C{  public void insertComponent(String title){  WebElement component=getComponent(title);  conditions.elementReady(component).click();  conditions.verify(not(visibilityOf(window)));}  }
class C{  @Override protected void checkDuplicateValues(){  if (contains()) {    String code="DuplicateUnique";    String value=toString(fLocalValues);    String eName=fIdentityConstraint.getElementName();    String cName=fIdentityConstraint.getIdentityConstraintName();    reportSchemaError(code,new Object[]{value,eName,cName});  }}  }
class C{  public VOGeoServerContrastEnhancementNormalizeRed(Class<?> panelId,RasterSymbolizerDetails parentPanel){  super(panelId,"geoserver/GeoServerContrastEnhancementNormalizeRed.xml",parentPanel,FieldIdEnum.VO_RASTER_NORMALIZE_ALGORITHM_RED,FieldIdEnum.VO_RASTER_NORMALIZE_MIN_VALUE_RED,FieldIdEnum.VO_RASTER_NORMALIZE_MAX_VALUE_RED);}  }
class C{  public void rollback(){  for (  TransactionLifecycleListener l : lifecycleListeners) {    l.onTxRollback(this);  }  if (logger.isLoggable(Level.FINE))   logger.fine("transaction " + txNum + " rolled back");}  }
class C{  public static double[] lpc2lprefc(double[] oneMinusA){  int p=oneMinusA.length - 1;  double[][] A=new double[p][];  A[p - 1]=new double[p];  int i, j;  for (i=0; i < p; i++)   A[p - 1][i]=oneMinusA[i + 1];  double[] k=new double[p];  for (i=p; i >= 1; i--) {    k[i - 1]=A[i - 1][i - 1];    if (i >= 2) {      A[i - 2]=new double[i];      for (j=1; j < i; j++)       A[i - 2][j - 1]=(A[i - 1][j - 1] + A[i - 1][i - 1] * A[i - 1][i - j - 1]) / (1.0 - k[i - 1] * k[i - 1]);    }  }  double[] oneMinusAHat=lprefc2lpc(k);  return k;}  }
class C{  public static String cleanUpPathPrefix(String prefix){  if (UtilValidate.isEmpty(prefix))   return "";  StringBuilder cppBuff=new StringBuilder(prefix.replace('\\','/'));  if (cppBuff.charAt(0) != '/') {    cppBuff.insert(0,'/');  }  if (cppBuff.charAt(cppBuff.length() - 1) == '/') {    cppBuff.deleteCharAt(cppBuff.length() - 1);  }  return cppBuff.toString();}  }
class C{  @RequiresPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) public static boolean rename(String oldPath,String newPath){  return rename(new File(oldPath),new File(newPath));}  }
class C{  public static StateModelDefinition build(){  StateModelDefinition.Builder builder=new StateModelDefinition.Builder(name);  builder.initialState(States.OFFLINE.name());  builder.addState(States.ONLINE.name(),20);  builder.addState(States.OFFLINE.name(),-1);  for (  HelixDefinedState state : HelixDefinedState.values()) {    builder.addState(state.name(),-1);  }  builder.addTransition(States.ONLINE.name(),States.OFFLINE.name(),25);  builder.addTransition(States.OFFLINE.name(),States.ONLINE.name(),5);  builder.addTransition(States.OFFLINE.name(),HelixDefinedState.DROPPED.name(),0);  builder.dynamicUpperBound(States.ONLINE.name(),"R");  return builder.build();}  }
class C{  public VideoGetCommentsQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  private void tryStartingKbMode(int keyCode){  if (keyCode == -1 || addKeyIfLegal(keyCode)) {    mInKbMode=true;    onValidationChanged(false);    updateDisplay(false);    mRadialTimePickerView.setInputEnabled(false);  }}  }
class C{  public boolean read(Class<?> panelId,String resourceString){  groupList=new ArrayList<GroupConfigInterface>();  PanelConfig panelConfig=(PanelConfig)ParseXML.parseUIFile(resourceString,SCHEMA_RESOURCE,PanelConfig.class);  if (panelConfig == null) {    return false;  }  Class<?> localisationClass=ReadPanelConfig.class;  if (panelConfig.getLocalisation() != null) {    try {      localisationClass=Class.forName(panelConfig.getLocalisation());    } catch (    ClassNotFoundException e) {      ConsoleManager.getInstance().exception(ReadPanelConfig.class,e);    }  }  panelTitle=getLocalisedText(localisationClass,panelConfig.getPanelTitle());  vendorOptionVersion=getVendorOptionVersion(panelConfig);  for (  Object groupObj : panelConfig.getGroupOrMultiOptionGroup()) {    if (groupObj instanceof XMLGroupConfig) {      GroupConfig groupConfig=parseGroup(localisationClass,panelId,(XMLGroupConfig)groupObj);      groupList.add(groupConfig);    } else     if (groupObj instanceof XMLMultiOptionGroup) {      MultiOptionGroup groupConfig=parseMultiOptionGroup(localisationClass,panelId,(XMLMultiOptionGroup)groupObj);      groupList.add(groupConfig);    }  }  return true;}  }
class C{  void union(PurityGraph arg){  nodes.addAll(arg.nodes);  paramNodes.addAll(arg.paramNodes);  edges.putAll(arg.edges);  locals.putAll(arg.locals);  ret.addAll(arg.ret);  globEscape.addAll(arg.globEscape);  backEdges.putAll(arg.backEdges);  backLocals.putAll(arg.backLocals);  mutated.putAll(arg.mutated);  if (doCheck)   sanityCheck();}  }
class C{  public static Map<String,Object> runSolrQuery(DispatchContext dctx,Map<String,Object> context){  HttpSolrClient client=null;  Map<String,Object> result;  try {    if (UtilValidate.isNotEmpty(context.get("core")))     client=new HttpSolrClient(SolrUtil.solrUrl + "/" + context.get("core")); else     client=new HttpSolrClient(SolrUtil.solrFullUrl);    SolrQuery solrQuery=new SolrQuery();    solrQuery.setQuery((String)context.get("query"));    boolean faceted=(Boolean)context.get("facet");    if (faceted) {      solrQuery.setFacet(faceted);      solrQuery.addFacetField("manu");      solrQuery.addFacetField("cat");      solrQuery.setFacetMinCount(1);      solrQuery.setFacetLimit(8);      solrQuery.addFacetQuery("listPrice:[0 TO 50]");      solrQuery.addFacetQuery("listPrice:[50 TO 100]");      solrQuery.addFacetQuery("listPrice:[100 TO 250]");      solrQuery.addFacetQuery("listPrice:[250 TO 500]");      solrQuery.addFacetQuery("listPrice:[500 TO 1000]");      solrQuery.addFacetQuery("listPrice:[1000 TO 2500]");      solrQuery.addFacetQuery("listPrice:[2500 TO 5000]");      solrQuery.addFacetQuery("listPrice:[5000 TO 10000]");      solrQuery.addFacetQuery("listPrice:[10000 TO 50000]");      solrQuery.addFacetQuery("listPrice:[50000 TO *]");    }    boolean spellCheck=(Boolean)context.get("spellcheck");    if (spellCheck) {      solrQuery.setParam("spellcheck",spellCheck);    }    boolean highLight=(Boolean)context.get("highlight");    if (highLight) {      solrQuery.setHighlight(highLight);      solrQuery.setHighlightSimplePre("<span class=\"highlight\">");      solrQuery.addHighlightField("description");      solrQuery.setHighlightSimplePost("</span>");      solrQuery.setHighlightSnippets(2);    }    Integer start=(Integer)context.get("start");    Integer viewIndex=(Integer)context.get("viewIndex");    Integer viewSize=(Integer)context.get("viewSize");    if (viewSize != null && viewSize > 0) {      solrQuery.setRows(viewSize);    }    if (start != null) {      if (start > 0) {        solrQuery.setStart(start);      }    } else     if (viewIndex != null) {      if (viewIndex > 0 && viewSize != null && viewSize > 0) {        solrQuery.setStart(viewIndex * viewSize);      }    }    String queryFilter=(String)context.get("queryFilter");    if (UtilValidate.isNotEmpty(queryFilter))     solrQuery.setFilterQueries(queryFilter.split(" "));    if ((String)context.get("returnFields") != null) {      solrQuery.setFields((String)context.get("returnFields"));    }    if ((String)context.get("sortBy") != null && ((String)context.get("sortBy")).length() > 0) {      SolrQuery.ORDER order;      if (!((Boolean)context.get("sortByReverse")))       order=SolrQuery.ORDER.asc; else       order=SolrQuery.ORDER.desc;      solrQuery.setSort(((String)context.get("sortBy")).replaceFirst("-",""),order);    }    if ((String)context.get("facetQuery") != null) {      solrQuery.addFacetQuery((String)context.get("facetQuery"));    }    QueryResponse rsp=client.query(solrQuery,METHOD.POST);    result=ServiceUtil.returnSuccess();    result.put("queryResult",rsp);  } catch (  Exception e) {    Debug.logError(e,e.getMessage(),module);    result=ServiceUtil.returnError(e.toString());  }  return result;}  }
class C{  public float loadDurationsForAlignment(String fileName,Vector<PhonemeDuration> alignDur){  Scanner s=null;  String line;  float totalDuration=0;  float previous=0;  float current=0;  try {    s=new Scanner(new File(fileName));    int i=0;    while (s.hasNext()) {      line=s.nextLine();      if (!line.startsWith("#") && !line.startsWith("format")) {        String val[]=line.split(" ");        current=Float.parseFloat(val[0]);        PhonemeDuration var;        if (previous == 0)         alignDur.add(new PhonemeDuration(val[2],current)); else         alignDur.add(new PhonemeDuration(val[2],(current - previous)));        totalDuration+=alignDur.get(i).getDuration();        System.out.println("phone = " + alignDur.get(i).getPhoneme() + " dur("+ i+ ")="+ alignDur.get(i).getDuration()+ " totalDuration="+ totalDuration);        i++;        previous=current;      }    }    System.out.println();    s.close();  } catch (  IOException e) {    e.printStackTrace();  }  return totalDuration;}  }
class C{  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH) @Override public void onBaseContextAttached(Context base){  super.onBaseContextAttached(base);  MultiDex.install(base);  SampleApplicationContext.application=getApplication();  SampleApplicationContext.context=getApplication();  TinkerManager.setTinkerApplicationLike(this);  TinkerManager.initFastCrashProtect();  TinkerManager.setUpgradeRetryEnable(true);  TinkerInstaller.setLogIml(new MyLogImp());  TinkerManager.installTinker(this);}  }
class C{  @Override public void processUrlViewIntent(String url,String referer,String headers,TabOpenType tabOpenType,String externalAppId,int tabIdToBringToFront,boolean hasUserGesture,Intent intent){  TabModel tabModel=getCurrentTabModel();switch (tabOpenType) {case REUSE_URL_MATCHING_TAB_ELSE_NEW_TAB:    if (tabModel.getCount() > 0 && mUIInitialized && mLayoutManager.overviewVisible()) {      mLayoutManager.hideOverview(true);    }  mTabModelSelectorImpl.tryToRestoreTabStateForUrl(url);int tabToBeClobberedIndex=TabModelUtils.getTabIndexByUrl(tabModel,url);Tab tabToBeClobbered=tabModel.getTabAt(tabToBeClobberedIndex);if (tabToBeClobbered != null) {TabModelUtils.setIndex(tabModel,tabToBeClobberedIndex);tabToBeClobbered.reload();RecordUserAction.record("MobileTabClobbered");} else {launchIntent(url,referer,headers,externalAppId,true,intent);}RecordUserAction.record("MobileReceivedExternalIntent");int shortcutSource=intent.getIntExtra(ShortcutHelper.EXTRA_SOURCE,ShortcutSource.UNKNOWN);LaunchMetrics.recordHomeScreenLaunchIntoTab(url,shortcutSource);break;case REUSE_APP_ID_MATCHING_TAB_ELSE_NEW_TAB:launchIntent(url,referer,headers,externalAppId,false,intent);RecordUserAction.record("MobileReceivedExternalIntent");break;case BRING_TAB_TO_FRONT:mTabModelSelectorImpl.tryToRestoreTabStateForId(tabIdToBringToFront);int tabIndex=TabModelUtils.getTabIndexById(tabModel,tabIdToBringToFront);if (tabIndex == TabModel.INVALID_TAB_INDEX) {TabModel otherModel=getTabModelSelector().getModel(!tabModel.isIncognito());tabIndex=TabModelUtils.getTabIndexById(otherModel,tabIdToBringToFront);if (tabIndex != TabModel.INVALID_TAB_INDEX) {getTabModelSelector().selectModel(otherModel.isIncognito());TabModelUtils.setIndex(otherModel,tabIndex);}} else {TabModelUtils.setIndex(tabModel,tabIndex);}RecordUserAction.record("MobileReceivedExternalIntent");break;case CLOBBER_CURRENT_TAB:Tab currentTab=getActivityTab();if (currentTab != null) {currentTab.getTabRedirectHandler().updateIntent(intent);int transitionType=PageTransition.LINK | PageTransition.FROM_API;LoadUrlParams loadUrlParams=new LoadUrlParams(url,transitionType);loadUrlParams.setIntentReceivedTimestamp(mIntentHandlingTimeMs);loadUrlParams.setHasUserGesture(hasUserGesture);currentTab.loadUrl(loadUrlParams);RecordUserAction.record("MobileTabClobbered");} else {launchIntent(url,referer,headers,externalAppId,true,intent);}break;case OPEN_NEW_TAB:launchIntent(url,referer,headers,externalAppId,true,intent);RecordUserAction.record("MobileReceivedExternalIntent");break;case OPEN_NEW_INCOGNITO_TAB:if (url == null || url.equals(UrlConstants.NTP_URL)) {if (TextUtils.equals(externalAppId,getPackageName())) {getTabCreator(true).launchUrl(UrlConstants.NTP_URL,TabLaunchType.FROM_MENU_OR_OVERVIEW);} else {getTabCreator(true).launchUrl(UrlConstants.NTP_URL,TabLaunchType.FROM_EXTERNAL_APP);RecordUserAction.record("MobileReceivedExternalIntent");}} else {if (TextUtils.equals(externalAppId,getPackageName())) {getTabCreator(true).launchUrl(url,TabLaunchType.FROM_LINK,intent,mIntentHandlingTimeMs);} else {getTabCreator(true).launchUrlFromExternalApp(url,referer,headers,externalAppId,true,intent,mIntentHandlingTimeMs);RecordUserAction.record("MobileReceivedExternalIntent");}}break;default :assert false : "Unknown TabOpenType: " + tabOpenType;break;}getToolbarManager().setUrlBarFocus(false);}  }
class C{  public EqualizeHistTransform(){  this(new Random(1234),CV_BGR2GRAY);}  }
class C{  public Vector2 right(){  double temp=this.x;  this.x=-this.y;  this.y=temp;  return this;}  }
class C{  public boolean hasUpdateListeners(){  boolean isEmpty=!listeners.isEmpty();  return isEmpty;}  }
class C{  public AdsGetSuggestionsQuery lang(AdsGetSuggestionsLang value){  return unsafeParam("lang",value);}  }
class C{  protected void importTypes(Types types){  SchemaCompiler compiler=XJC.createSchemaCompiler();  ErrorListener elForRun=new ConsoleErrorReporter();  compiler.setErrorListener(elForRun);  Element rootTypes=this.getRootTypes();  this.createDefaultStructures(rootTypes);  S2JJAXBModel intermediateModel=this.compileModel(types,compiler,rootTypes);  Collection<? extends Mapping> mappings=intermediateModel.getMappings();  for (  Mapping mapping : mappings) {    this.importStructure(mapping);  }}  }
class C{  public static void writeStringToFile(File file,String data,Charset encoding) throws IOException {  writeStringToFile(file,data,encoding,false);}  }
class C{  public IgDiskCache(File directory,long maxSizeInBytes,int maxCount){  this(directory,maxSizeInBytes,maxCount,AsyncTask.SERIAL_EXECUTOR);}  }
class C{  public String toString(){  return image;}  }
class C{  public void cleanStop(){  keepAlive=false;  interrupt();}  }
class C{  public static <K,V>boolean putMapNotNullKeyAndValue(Map<K,V> map,K key,V value){  if (map == null || key == null || value == null) {    return false;  }  map.put(key,value);  return true;}  }
class C{  public void addPoint(WKTPoint pointToAdd){  if (wktPointList == null) {    wktPointList=new ArrayList<WKTPoint>();  }  if (!wktPointList.isEmpty()) {    WKTPoint previousPoint=wktPointList.get(wktPointList.size() - 1);    if (!pointToAdd.equals(previousPoint)) {      wktPointList.add(pointToAdd);    }  } else {    wktPointList.add(pointToAdd);  }}  }
class C{  public boolean hasSuperClassAccess(){  return getSuperClassAccessOpt().getNumChild() != 0;}  }
class C{  public EnumActionResult onItemUse(ItemStack stack,EntityPlayer playerIn,World worldIn,BlockPos pos,EnumHand hand,EnumFacing facing,float hitX,float hitY,float hitZ){  if (facing != EnumFacing.UP) {    return EnumActionResult.FAIL;  } else {    IBlockState iblockstate=worldIn.getBlockState(pos);    Block block=iblockstate.getBlock();    if (!block.isReplaceable(worldIn,pos)) {      pos=pos.offset(facing);    }    if (playerIn.canPlayerEdit(pos,facing,stack) && this.block.canPlaceBlockAt(worldIn,pos)) {      EnumFacing enumfacing=EnumFacing.fromAngle((double)playerIn.rotationYaw);      int i=enumfacing.getFrontOffsetX();      int j=enumfacing.getFrontOffsetZ();      placeDoor(worldIn,pos,enumfacing,this.block);      SoundType soundtype=this.block.getSoundType();      worldIn.playSound(playerIn,pos,soundtype.getPlaceSound(),SoundCategory.BLOCKS,(soundtype.getVolume() + 1.0F) / 2.0F,soundtype.getPitch() * 0.8F);      --stack.stackSize;      return EnumActionResult.SUCCESS;    } else {      return EnumActionResult.FAIL;    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ConvertHeal_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200802,skillcaster,skillname);}  }
class C{  public boolean removeFooterView(View v){  if (mFooterViewInfos.size() > 0) {    boolean result=false;    if (((PLA_HeaderViewListAdapter)mAdapter).removeFooter(v)) {      mDataSetObserver.onChanged();      result=true;    }    removeFixedViewInfo(v,mFooterViewInfos);    return result;  }  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CANNOT_QUIT_DURING_BATTLE(String value0){  return new SM_SYSTEM_MESSAGE(1310013,value0);}  }
class C{  public final static byte[] encodeToByte(byte[] sArr,boolean lineSep){  int sLen=sArr != null ? sArr.length : 0;  if (sLen == 0)   return new byte[0];  int eLen=(sLen / 3) * 3;  int cCnt=((sLen - 1) / 3 + 1) << 2;  int dLen=cCnt + (lineSep ? (cCnt - 1) / 76 << 1 : 0);  byte[] dArr=new byte[dLen];  for (int s=0, d=0, cc=0; s < eLen; ) {    int i=(sArr[s++] & 0xff) << 16 | (sArr[s++] & 0xff) << 8 | (sArr[s++] & 0xff);    dArr[d++]=(byte)CA[(i >>> 18) & 0x3f];    dArr[d++]=(byte)CA[(i >>> 12) & 0x3f];    dArr[d++]=(byte)CA[(i >>> 6) & 0x3f];    dArr[d++]=(byte)CA[i & 0x3f];    if (lineSep && ++cc == 19 && d < dLen - 2) {      dArr[d++]='\r';      dArr[d++]='\n';      cc=0;    }  }  int left=sLen - eLen;  if (left > 0) {    int i=((sArr[eLen] & 0xff) << 10) | (left == 2 ? ((sArr[sLen - 1] & 0xff) << 2) : 0);    dArr[dLen - 4]=(byte)CA[i >> 12];    dArr[dLen - 3]=(byte)CA[(i >>> 6) & 0x3f];    dArr[dLen - 2]=left == 2 ? (byte)CA[i & 0x3f] : (byte)'=';    dArr[dLen - 1]='=';  }  return dArr;}  }
class C{  @Override public void close() throws IOException {}  }
class C{  public static GlobalPreferences sharedInstance(){  return INSTANCE;}  }
class C{  public void sendStatus(ServiceStatus serverStatus,String status){  NotificationMessage<StatusReport> message=new NotificationMessage<>();  message.setMethod(LSPMethods.LANGUAGE_STATUS.getMethod());  message.setParams(new StatusReport().withMessage(status).withType(serverStatus.name()));  send(message);}  }
class C{  public static File createParentDirIfNotExists(String filePath){  File file=new File(filePath);  file.getParentFile().mkdirs();  return file;}  }
class C{  void startManager(Configuration config,Object service,ServiceID serviceID,Entry[] baseAttributes) throws IOException, ConfigurationException {  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.entering(JoinStateManager.class.getName(),"startManager",new Object[]{config,service,serviceID,Arrays.asList(baseAttributes)});  }  if (serviceID == null || serviceUuid == null)   throw new AssertionError("serviceID and serviceUuid must be set");  final ProxyPreparer defaultPreparer=new net.jini.security.BasicProxyPreparer();  lookupLocatorPreparer=(ProxyPreparer)Config.getNonNullEntry(config,TxnManager.MAHALO,"lookupLocatorPreparer",ProxyPreparer.class,defaultPreparer);  if (initlogger.isLoggable(Level.CONFIG)) {    initlogger.log(Level.CONFIG,"lookupLocatorPreparer: {0}",lookupLocatorPreparer);  }  dm=(DiscoveryManagement)Config.getNonNullEntry(config,TxnManager.MAHALO,"discoveryManager",DiscoveryManagement.class,new LookupDiscoveryManager(DiscoveryGroupManagement.NO_GROUPS,null,null,config));  if (initlogger.isLoggable(Level.CONFIG)) {    initlogger.log(Level.CONFIG,"discoveryManager: {0}",dm);  }  if (dm instanceof DiscoveryGroupManagement) {    String[] groups=((DiscoveryGroupManagement)dm).getGroups();    if ((groups == DiscoveryGroupManagement.ALL_GROUPS) || (groups.length != 0)) {      throw new ConfigurationException("discoveryManager entry must be configured " + "to initially discover/join NO_GROUPS");    }  } else {    throw new ConfigurationException("Entry for component " + TxnManager.MAHALO + ", name "+ "discoveryManager must implement "+ "net.jini.discovery.DiscoveryGroupManagement");  }  if (dm instanceof DiscoveryLocatorManagement) {    LookupLocator[] locs=((DiscoveryLocatorManagement)dm).getLocators();    if ((locs != null) && (locs.length != 0)) {      throw new ConfigurationException("discoveryManager entry must be initially" + "configured with no locators");    }  } else {    throw new ConfigurationException("Entry for component " + TxnManager.MAHALO + ", name "+ "discoveryManager must implement "+ "net.jini.discovery.DiscoveryLocatorManagement");  }  if (initial) {    if (initlogger.isLoggable(Level.FINEST)) {      initlogger.log(Level.FINEST,"Obtaining initial values");    }    groups=(String[])config.getEntry(TxnManager.MAHALO,"initialLookupGroups",String[].class,BootUtil.toArray(SystemInfo.singleton().lookup().groups()));    if (initlogger.isLoggable(Level.CONFIG)) {      initlogger.log(Level.CONFIG,"Obtaining initial groups: {0}",(groups == null ? Arrays.asList(new String[]{"<ALL_GROUPS>"}) : Arrays.asList(groups)));    }    locators=(LookupLocator[])Config.getNonNullEntry(config,TxnManager.MAHALO,"initialLookupLocators",LookupLocator[].class,toLookupLocators(System.getProperty(SystemProperties.JINI_LUS_LOCATORS,"")));    if (initlogger.isLoggable(Level.CONFIG)) {      initlogger.log(Level.CONFIG,"Obtaining initial locators: {0}",Arrays.asList(locators));    }    final Entry[] cAttrs=(Entry[])Config.getNonNullEntry(config,TxnManager.MAHALO,"initialLookupAttributes",Entry[].class,new Entry[0]);    if (initlogger.isLoggable(Level.CONFIG)) {      initlogger.log(Level.CONFIG,"Obtaining initial attributes: {0}",Arrays.asList(cAttrs));    }    if (cAttrs.length == 0) {      attributes=baseAttributes;    } else {      attributes=new Entry[cAttrs.length + baseAttributes.length];      System.arraycopy(baseAttributes,0,attributes,0,baseAttributes.length);      System.arraycopy(cAttrs,0,attributes,baseAttributes.length,cAttrs.length);    }    if (initlogger.isLoggable(Level.FINEST)) {      initlogger.log(Level.FINEST,"Combined attributes: {0}",Arrays.asList(attributes));    }  } else {    if (initlogger.isLoggable(Level.FINEST)) {      initlogger.log(Level.FINEST,"Recovered locators: {0}",Arrays.asList(locators));    }    if (locators.length > 0) {      final ProxyPreparer recoveredLookupLocatorPreparer=(ProxyPreparer)Config.getNonNullEntry(config,TxnManager.MAHALO,"recoveredLookupLocatorPreparer",ProxyPreparer.class,defaultPreparer);      if (initlogger.isLoggable(Level.CONFIG)) {        initlogger.log(Level.CONFIG,"recoveredLookupLocatorPreparer: {0}",recoveredLookupLocatorPreparer);      }      final List prepared=new java.util.LinkedList();      for (int i=0; i < locators.length; i++) {        try {          prepared.add(recoveredLookupLocatorPreparer.prepareProxy(locators[i]));        } catch (        Throwable t) {          if (initlogger.isLoggable(Levels.HANDLED)) {            initlogger.log(Levels.HANDLED,"Exception re-preparing LookupLocator: {0}. " + "Dropping locator.",locators[i]);          }          if (initlogger.isLoggable(Levels.HANDLED)) {            initlogger.log(Levels.HANDLED,"Preparer exception: ",t);          }        }      }      locators=(LookupLocator[])prepared.toArray(new LookupLocator[0]);    }  }  if (initlogger.isLoggable(Level.FINEST)) {    initlogger.log(Level.FINEST,"Setting groups and locators");  }  ((DiscoveryGroupManagement)dm).setGroups(groups);  ((DiscoveryLocatorManagement)dm).setLocators(locators);  if (initlogger.isLoggable(Level.FINEST)) {    initlogger.log(Level.FINEST,"Creating JoinManager");  }  mgr=new JoinManager(service,attributes,serviceID,dm,null,config);  attributes=null;  groups=null;  locators=null;  if (initlogger.isLoggable(Level.FINEST)) {    initlogger.log(Level.FINEST,"Taking snapshot");  }  update();  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.exiting(JoinStateManager.class.getName(),"startManager");  }}  }
class C{  public PhotosGetCommentsQueryWithExtended fields(List<EnumParam> value){  return unsafeParam("fields",value);}  }
class C{  public static char[] toCharArray(InputStream is) throws IOException {  return toCharArray(is,Charset.defaultCharset());}  }
class C{  public double totalMovement(double seconds){  long now=Minecraft.getSystemTime();  ListIterator<entry> it=_data.listIterator(_data.size());  entry last=null;  double sum=0;  int count=0;  while (it.hasPrevious()) {    entry i=it.previous();    count++;    if (now - i.ts > seconds * 1000)     break;    if (last == null) {      last=i;      continue;    }    sum+=(last.data.distanceTo(i.data));  }  return sum;}  }
class C{  public static void convertActivityToTranslucentBeforeL(Activity activity){  try {    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method method=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz);    method.setAccessible(true);    method.invoke(activity,new Object[]{null});  } catch (  Throwable t) {  }}  }
class C{  protected AdsCheckLinkQuery accountId(int value){  return unsafeParam("account_id",value);}  }
class C{  protected boolean init(ILineDataSet set){  int size=set.getCircleColorCount();  boolean changeRequired=false;  if (circleBitmaps == null) {    circleBitmaps=new Bitmap[size];    changeRequired=true;  } else   if (circleBitmaps.length != size) {    circleBitmaps=new Bitmap[size];    changeRequired=true;  }  return changeRequired;}  }
class C{  public AggregateDragControl(){}  }
class C{  public int code(){  return code;}  }
class C{  public DocumentTabModelImpl(ActivityDelegate activityDelegate,StorageDelegate storageDelegate,TabCreatorManager tabCreatorManager,boolean isIncognito,int prioritizedTabId,Context context){  super(isIncognito);  mActivityDelegate=activityDelegate;  mStorageDelegate=storageDelegate;  mTabCreatorManager=tabCreatorManager;  mPrioritizedTabId=prioritizedTabId;  mContext=context;  mCurrentState=STATE_UNINITIALIZED;  mTabIdList=new ArrayList<Integer>();  mEntryMap=new SparseArray<Entry>();  mHistoricalTabs=new ArrayList<Integer>();  mInitializationObservers=new ObserverList<InitializationObserver>();  mObservers=new ObserverList<TabModelObserver>();  SharedPreferences prefs=mContext.getSharedPreferences(PREF_PACKAGE,Context.MODE_PRIVATE);  mLastShownTabId=prefs.getInt(isIncognito() ? PREF_LAST_SHOWN_TAB_ID_INCOGNITO : PREF_LAST_SHOWN_TAB_ID_REGULAR,Tab.INVALID_TAB_ID);  setCurrentState(STATE_READ_RECENT_TASKS_START);  mStorageDelegate.restoreTabEntries(isIncognito,activityDelegate,mEntryMap,mTabIdList,mHistoricalTabs);  setCurrentState(STATE_READ_RECENT_TASKS_END);}  }
class C{  protected void computeCoefficients(){  final int n=degree() + 1;  coefficients=new double[n];  for (int i=0; i < n; i++) {    coefficients[i]=0.0;  }  final double[] c=new double[n + 1];  c[0]=1.0;  for (int i=0; i < n; i++) {    for (int j=i; j > 0; j--) {      c[j]=c[j - 1] - c[j] * x[i];    }    c[0]*=-x[i];    c[i + 1]=1;  }  final double[] tc=new double[n];  for (int i=0; i < n; i++) {    double d=1;    for (int j=0; j < n; j++) {      if (i != j) {        d*=x[i] - x[j];      }    }    final double t=y[i] / d;    tc[n - 1]=c[n];    coefficients[n - 1]+=t * tc[n - 1];    for (int j=n - 2; j >= 0; j--) {      tc[j]=c[j + 1] + tc[j + 1] * x[i];      coefficients[j]+=t * tc[j];    }  }  coefficientsComputed=true;}  }
class C{  @Override public String toString(){  final StringBuilder outBuffer=new StringBuilder();  final String endl="\n";  outBuffer.append("DescriptiveStatistics:").append(endl);  outBuffer.append("n: ").append(getN()).append(endl);  outBuffer.append("min: ").append(getMin()).append(endl);  outBuffer.append("max: ").append(getMax()).append(endl);  outBuffer.append("mean: ").append(getMean()).append(endl);  outBuffer.append("std dev: ").append(getStandardDeviation()).append(endl);  try {    outBuffer.append("median: ").append(getPercentile(50)).append(endl);  } catch (  MathIllegalStateException ex) {    outBuffer.append("median: unavailable").append(endl);  }  outBuffer.append("skewness: ").append(getSkewness()).append(endl);  outBuffer.append("kurtosis: ").append(getKurtosis()).append(endl);  return outBuffer.toString();}  }
class C{  public boolean isOrientationSpecificLayout(){  return myEditedConfig.getScreenOrientationQualifier() != null;}  }
class C{  public CM_CHAT_MESSAGE_WHISPER(int opcode,State state,State... restStates){  super(opcode,state,restStates);}  }
class C{  @Override public boolean contains(S2Cell cell){  throw new UnsupportedOperationException("'containment' is not numerically well-defined " + "except at the polyline vertices");}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public boolean isLastExpanded(){  return lastExpanded;}  }
class C{  private List<String> generateTestTasks() throws Exception {  List<String> ids=new ArrayList<String>();  SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy hh:mm:ss.SSS");  processEngineConfiguration.getClock().setCurrentTime(sdf.parse("01/01/2001 01:01:01.000"));  for (int i=0; i < 2; i++) {    Task task=taskService.newTask();    task.setName("testTask");    task.setDescription("testTask description");    task.setPriority(3);    taskService.saveTask(task);    ids.add(task.getId());    taskService.setVariableLocal(task.getId(),"test","test");    taskService.addCandidateUser(task.getId(),"kermit");  }  processEngineConfiguration.getClock().setCurrentTime(sdf.parse("02/02/2002 02:02:02.000"));  Task task=taskService.newTask();  task.setName("gonzoTask");  task.setDescription("gonzo description");  task.setPriority(4);  task.setCategory("testCategory");  taskService.saveTask(task);  taskService.setAssignee(task.getId(),"gonzo");  taskService.setVariableLocal(task.getId(),"testVar","someVariable");  taskService.setVariableLocal(task.getId(),"testVar2",123);  ids.add(task.getId());  return ids;}  }
class C{  @Override public boolean addAll(@NonNull Collection<? extends MODEL> collection){  return addAll(getItemCount(),collection);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_DISCARD_ITEM(String value0){  return new SM_SYSTEM_MESSAGE(1300792,value0);}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public boolean equals(Object object){  if (this == object) {    return true;  } else   if (object == null || object.getClass() != getClass()) {    return false;  }  BasicProxyPreparer other=(BasicProxyPreparer)object;  if (verify != other.verify) {    return false;  }  if (methodConstraintsSpecified != other.methodConstraintsSpecified) {    return false;  } else   if (methodConstraintsSpecified && (methodConstraints == null ? other.methodConstraints != null : !methodConstraints.equals(other.methodConstraints))) {    return false;  }  if (permissions.length != other.permissions.length) {    return false;  }  Permission[] otherPermissions=other.permissions.clone();  top:   for (int i=permissions.length; --i >= 0; ) {    Permission p=permissions[i];    for (int j=i; j >= 0; j--) {      if (p.equals(otherPermissions[j])) {        otherPermissions[j]=otherPermissions[i];        continue top;      }    }    return false;  }  return true;}  }
class C{  @Override public String toString(){  return name;}  }
class C{  public AdsDeleteAdsQuery(VkApiClient client,UserActor actor,int accountId,String ids){  super(client,"ads.deleteAds",Utils.buildParametrizedType(List.class,Integer.class));  accessToken(actor.getAccessToken());  accountId(accountId);  ids(ids);}  }
class C{  final boolean link(Index<K,V> succ,Index<K,V> newSucc){  Node<K,V> n=node;  newSucc.right=succ;  return n.value != null && casRight(succ,newSucc);}  }
class C{  public static List<String> transformToDBStyle(CriteriaMap<?> criteriaMap,List<String> chartFields){  if (chartFields == null)   return new ArrayList<>();  return chartFields.stream().map(null).collect(toList());}  }
class C{  public MapperKey(Type<?> aType,Type<?> bType){  this.aType=(Type<Object>)aType;  this.bType=(Type<Object>)bType;}  }
class C{  @Override public void run(){  if (!running.compareAndSet(false,true)) {    throw new IllegalStateException("Thread is already running");  }  sequenceBarrier.clearAlert();  notifyStart();  T event=null;  long nextSequence=sequence.get() + 1L;  try {    while (true) {      try {        final long availableSequence=sequenceBarrier.waitFor(nextSequence);        while (nextSequence <= availableSequence) {          event=dataProvider.get(nextSequence);          eventHandler.onEvent(event,nextSequence,nextSequence == availableSequence);          nextSequence++;        }        sequence.set(availableSequence);      } catch (      final TimeoutException e) {        notifyTimeout(sequence.get());      }catch (      final AlertException ex) {        if (!running.get()) {          break;        }      }catch (      final Throwable ex) {        exceptionHandler.handleEventException(ex,nextSequence,event);        sequence.set(nextSequence);        nextSequence++;      }    }  }  finally {    notifyShutdown();    running.set(false);  }}  }
class C{  public void acosh(final double[] operand,final int operandOffset,final double[] result,final int resultOffset){  double[] function=new double[1 + order];  final double x=operand[operandOffset];  function[0]=FastMath.acosh(x);  if (order > 0) {    final double[] p=new double[order];    p[0]=1;    final double x2=x * x;    final double f=1.0 / (x2 - 1);    double coeff=FastMath.sqrt(f);    function[1]=coeff * p[0];    for (int n=2; n <= order; ++n) {      double v=0;      p[n - 1]=(1 - n) * p[n - 2];      for (int k=n - 1; k >= 0; k-=2) {        v=v * x2 + p[k];        if (k > 2) {          p[k - 2]=(1 - k) * p[k - 1] + (k - 2 * n) * p[k - 3];        } else         if (k == 2) {          p[0]=-p[1];        }      }      if ((n & 0x1) == 0) {        v*=x;      }      coeff*=f;      function[n]=coeff * v;    }  }  compose(operand,operandOffset,function,result,resultOffset);}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  public EqIOException(final int code,final String descr){  super(code,descr);}  }
class C{  public MarketGetCommentsQuery fields(List<EnumParam> value){  return unsafeParam("fields",value);}  }
class C{  public void writeLine(String str) throws IOException {  StringBuffer buffer=new StringBuffer();  boolean atLeastOne=false;  StringTokenizer st=new StringTokenizer(str,LINE_SEPARATOR);  int count=st.countTokens();  for (int i=0; i < count; i++) {    String line=st.nextToken();    if (line.length() > 0) {      if (atLeastOne) {        buffer.append('\r');        buffer.append((char)0);      }      buffer.append(line);      atLeastOne=true;    }  }  if (buffer.length() > 0) {    String statement=buffer.toString();    writer.write(statement);    writer.write(LINE_SEPARATOR);    writer.flush();  }}  }
class C{  public TimeSeriesMetricDeltaSet(MetricValue td){  values_=Any2.left(td);}  }
class C{  public SM_QUEST_ACTION(int questId,int timer){  this.action=4;  this.questId=questId;  this.timer=timer;  this.step=0;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Spin_END_A(String value0){  return new SM_SYSTEM_MESSAGE(1201134,value0);}  }
class C{  public V put(K key,V value){  if (value == null)   throw new NullPointerException();  int hash=hash(key.hashCode());  return segmentFor(hash).put(key,hash,value,false,false);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MACRO_MSG_PROCESS(String value0,String value1,String value2){  return new SM_SYSTEM_MESSAGE(1300921,value0,value1,value2);}  }
class C{  public Node(String permission,boolean value,boolean override,long expireAt,String server,String world,ContextSet contexts){  if (permission == null || permission.equals("")) {    throw new IllegalArgumentException("Empty permission");  }  if (server != null && (server.equalsIgnoreCase("global") || server.equals(""))) {    server=null;  }  if (world != null && world.equals("")) {    world=null;  }  if (world != null && server == null) {    server="global";  }  this.permission=permission;  this.value=value;  this.override=override;  this.expireAt=expireAt;  this.server=server;  this.world=world;  this.contexts=contexts == null ? ContextSet.empty() : contexts.makeImmutable();}  }
class C{  public WallGetCommentsQuery extended(Boolean value){  return unsafeParam("extended",value);}  }
class C{  public void actionPerformed(ActionEvent ev){  execute("set index=" + CalculateEcologicalIndices.HELLINGER + ";");}  }
class C{  private void addShadowView(){  if (mShadowView == null) {    mShadowView=new ShadowView(getContext());    mShadowView.setX(-SHADOW_WIDTH);  }  final FrameLayout.LayoutParams layoutParams=new FrameLayout.LayoutParams(SHADOW_WIDTH,FrameLayout.LayoutParams.MATCH_PARENT);  final FrameLayout contentView=mCurrentContentView;  contentView.addView(mShadowView,1,layoutParams);}  }
class C{  public static String slurpURL(String path) throws Exception {  return slurpURL(new URL(path));}  }
class C{  public SootMethod(String name,List<Type> parameterTypes,Type returnType,int modifiers,List<SootClass> thrownExceptions){  this.name=name;  this.parameterTypes=new ArrayList<Type>();  this.parameterTypes.addAll(parameterTypes);  this.parameterTypes=Collections.unmodifiableList(this.parameterTypes);  this.returnType=returnType;  this.modifiers=modifiers;  if (exceptions == null && !thrownExceptions.isEmpty()) {    exceptions=new ArrayList<SootClass>();    this.exceptions.addAll(thrownExceptions);  }  Scene.v().getMethodNumberer().add(this);  subsignature=Scene.v().getSubSigNumberer().findOrAdd(getSubSignature());}  }
class C{  private double calculateNumericalVariance(){  final double denominatorDF=getDenominatorDegreesOfFreedom();  if (denominatorDF > 4) {    final double numeratorDF=getNumeratorDegreesOfFreedom();    final double denomDFMinusTwo=denominatorDF - 2;    return (2 * (denominatorDF * denominatorDF) * (numeratorDF + denominatorDF - 2)) / ((numeratorDF * (denomDFMinusTwo * denomDFMinusTwo) * (denominatorDF - 4)));  }  return Double.NaN;}  }
class C{  public static final void shuffleList(List l){  Random d=new Random();  for (int iCnt=0; iCnt < l.size() - 1; iCnt++) {    for (int iSwapPos=iCnt + 1; iSwapPos < l.size(); iSwapPos++) {      if (d.nextBoolean()) {        Object oTemp=l.get(iSwapPos);        l.set(iSwapPos,l.get(iCnt));        l.set(iCnt,oTemp);        continue;      }    }  }  for (int iCnt=l.size() - 1; iCnt > 0; iCnt--) {    for (int iSwapPos=iCnt - 1; iSwapPos > 0; iSwapPos--) {      if (d.nextBoolean()) {        Object oTemp=l.get(iSwapPos);        l.set(iSwapPos,l.get(iCnt));        l.set(iCnt,oTemp);      }    }  }}  }
class C{  boolean casNext(Node<K,V> cmp,Node<K,V> val){  return UNSAFE.compareAndSwapObject(this,nextOffset,cmp,val);}  }
class C{  public Map.Entry<K,V> pollLastEntry(){  return doRemoveLastEntry();}  }
class C{  protected AdsGetDemographicsQuery dateTo(String value){  return unsafeParam("date_to",value);}  }
class C{  private void createTryCatchFinally(polyglot.ast.Try tryStmt){  HashMap<Stmt,Stmt> gotoMap=new HashMap<Stmt,Stmt>();  polyglot.ast.Block tryBlock=tryStmt.tryBlock();  soot.jimple.Stmt noop1=soot.jimple.Jimple.v().newNopStmt();  body.getUnits().add(noop1);  if (tryStack == null) {    tryStack=new Stack<Try>();  }  tryStack.push(tryStmt);  createBlock(tryBlock);  tryStack.pop();  soot.jimple.Stmt noop2=soot.jimple.Jimple.v().newNopStmt();  body.getUnits().add(noop2);  soot.jimple.Stmt endNoop=soot.jimple.Jimple.v().newNopStmt();  soot.jimple.Stmt tryGotoFinallyNoop=soot.jimple.Jimple.v().newNopStmt();  body.getUnits().add(tryGotoFinallyNoop);  soot.jimple.Stmt tryFinallyNoop=soot.jimple.Jimple.v().newNopStmt();  soot.jimple.Stmt tryGotoFinally=soot.jimple.Jimple.v().newGotoStmt(tryFinallyNoop);  body.getUnits().add(tryGotoFinally);  soot.jimple.Stmt beforeEndGotoNoop=soot.jimple.Jimple.v().newNopStmt();  body.getUnits().add(beforeEndGotoNoop);  soot.jimple.Stmt tryEndGoto=soot.jimple.Jimple.v().newGotoStmt(endNoop);  body.getUnits().add(tryEndGoto);  gotoMap.put(tryFinallyNoop,beforeEndGotoNoop);  soot.jimple.Stmt catchAllBeforeNoop=soot.jimple.Jimple.v().newNopStmt();  Iterator it=tryStmt.catchBlocks().iterator();  while (it.hasNext()) {    soot.jimple.Stmt noop3=soot.jimple.Jimple.v().newNopStmt();    body.getUnits().add(noop3);    polyglot.ast.Catch catchBlock=(polyglot.ast.Catch)it.next();    soot.jimple.Stmt catchRefNoop=soot.jimple.Jimple.v().newNopStmt();    body.getUnits().add(catchRefNoop);    createCatchFormal(catchBlock.formal());    soot.jimple.Stmt catchStmtsNoop=soot.jimple.Jimple.v().newNopStmt();    body.getUnits().add(catchStmtsNoop);    if (catchStack == null) {      catchStack=new Stack<Try>();    }    catchStack.push(tryStmt);    createBlock(catchBlock.body());    catchStack.pop();    soot.jimple.Stmt catchGotoFinallyNoop=soot.jimple.Jimple.v().newNopStmt();    body.getUnits().add(catchGotoFinallyNoop);    soot.jimple.Stmt catchFinallyNoop=soot.jimple.Jimple.v().newNopStmt();    soot.jimple.Stmt catchGotoFinally=soot.jimple.Jimple.v().newGotoStmt(catchFinallyNoop);    body.getUnits().add(catchGotoFinally);    soot.jimple.Stmt beforeCatchEndGotoNoop=soot.jimple.Jimple.v().newNopStmt();    body.getUnits().add(beforeCatchEndGotoNoop);    soot.jimple.Stmt catchEndGoto=soot.jimple.Jimple.v().newGotoStmt(endNoop);    body.getUnits().add(catchEndGoto);    gotoMap.put(catchFinallyNoop,beforeCatchEndGotoNoop);    soot.Type sootType=Util.getSootType(catchBlock.catchType());    addToExceptionList(noop1,noop2,noop3,soot.Scene.v().getSootClass(sootType.toString()));    addToExceptionList(catchStmtsNoop,beforeCatchEndGotoNoop,catchAllBeforeNoop,soot.Scene.v().getSootClass("java.lang.Throwable"));  }  soot.Local formalLocal=lg.generateLocal(soot.RefType.v("java.lang.Throwable"));  body.getUnits().add(catchAllBeforeNoop);  soot.jimple.CaughtExceptionRef exceptRef=soot.jimple.Jimple.v().newCaughtExceptionRef();  soot.jimple.Stmt stmt=soot.jimple.Jimple.v().newIdentityStmt(formalLocal,exceptRef);  body.getUnits().add(stmt);  soot.jimple.Stmt beforeCatchAllAssignNoop=soot.jimple.Jimple.v().newNopStmt();  body.getUnits().add(beforeCatchAllAssignNoop);  soot.Local catchAllAssignLocal=lg.generateLocal(soot.RefType.v("java.lang.Throwable"));  soot.jimple.Stmt catchAllAssign=soot.jimple.Jimple.v().newAssignStmt(catchAllAssignLocal,formalLocal);  body.getUnits().add(catchAllAssign);  soot.jimple.Stmt catchAllFinallyNoop=soot.jimple.Jimple.v().newNopStmt();  soot.jimple.Stmt catchAllGotoFinally=soot.jimple.Jimple.v().newGotoStmt(catchAllFinallyNoop);  body.getUnits().add(catchAllGotoFinally);  soot.jimple.Stmt catchAllBeforeThrowNoop=soot.jimple.Jimple.v().newNopStmt();  body.getUnits().add(catchAllBeforeThrowNoop);  soot.jimple.Stmt throwStmt=soot.jimple.Jimple.v().newThrowStmt(catchAllAssignLocal);  throwStmt.addTag(new soot.tagkit.ThrowCreatedByCompilerTag());  body.getUnits().add(throwStmt);  gotoMap.put(catchAllFinallyNoop,catchAllBeforeThrowNoop);  soot.jimple.Stmt catchAllGotoEnd=soot.jimple.Jimple.v().newGotoStmt(endNoop);  body.getUnits().add(catchAllGotoEnd);  addToExceptionList(beforeCatchAllAssignNoop,catchAllBeforeThrowNoop,catchAllBeforeNoop,soot.Scene.v().getSootClass("java.lang.Throwable"));  Iterator<Stmt> finallyIt=gotoMap.keySet().iterator();  while (finallyIt.hasNext()) {    soot.jimple.Stmt noopStmt=finallyIt.next();    body.getUnits().add(noopStmt);    createBlock(tryStmt.finallyBlock());    soot.jimple.Stmt backToStmt=gotoMap.get(noopStmt);    soot.jimple.Stmt backToGoto=soot.jimple.Jimple.v().newGotoStmt(backToStmt);    body.getUnits().add(backToGoto);  }  body.getUnits().add(endNoop);  addToExceptionList(noop1,beforeEndGotoNoop,catchAllBeforeNoop,soot.Scene.v().getSootClass("java.lang.Throwable"));}  }
class C{  public double computeMaxClassValueUsingPercentFactorPerSeries(DefaultChartData chartData,String[] series,double[] percentFactorPerSeries){  double maxValue=0;  for (  String className : chartData.getClassNamesIncludingDisabled()) {    double total=0;    for (int i=0; i < series.length; i++) {      String seriesName=series[i];      if (transposedHeightsAdditive)       total+=percentFactorPerSeries[i] * chartData.getValueAsDouble(seriesName,className); else       total=Math.max(total,percentFactorPerSeries[i] * chartData.getValueAsDouble(seriesName,className));    }    if (total > maxValue) {      maxValue=total;    }  }  return 1.1 * maxValue;}  }
class C{  @Override public void sendDAQResponse(final DAQResponse response,final Destination destination,final Session session) throws JMSException {  sendTextMessage(MessageConverter.responseToJson(response),destination,session);}  }
class C{  public <T>T inject(Class<T> clazz,WebElement scope,String framePath){  return inject(clazz,scope,FramePath.parsePath(framePath));}  }
class C{  protected boolean hasAttemptRemaining(){  return mCurrentRetryCount <= mMaxNumRetries;}  }
class C{  public EntityQuery where(EntityCondition... entityCondition){  this.whereEntityCondition=EntityCondition.makeCondition(Arrays.asList(entityCondition));  return this;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_FATIGUE_STATE_RECOVERED(String value0){  return new SM_SYSTEM_MESSAGE(1400966,value0);}  }
class C{  public void testValueResource9() throws Throwable {  myFixture.copyFileToProject(BASE_PATH + "Class.java","src/p1/p2/Class.java");  myFixture.copyFileToProject(BASE_PATH + "layout.xml","res/layout/layout.xml");  Collection<UsageInfo> references=findCodeUsages("fu13_values.xml","res/values/f13_values.xml");  assertEquals(3,references.size());  assertEquals("Class.java:6:\n" + "  int id2 = R.string.hello;\n" + "                     |~~~~~\n"+ "values/f13_values.xml:9:\n"+ "  <item>@string/hello</item>\n"+ "        |~~~~~~~~~~~~~      \n"+ "layout/layout.xml:5:\n"+ "  <TextView android:text=\"@string/hello\"/>\n"+ "                          |~~~~~~~~~~~~~  \n",describeUsages(references));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Resurrect_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201015,skilltarget,skillcaster,skillname);}  }
class C{  public void onCordovaInit(PluginManager pluginManager){  this.pluginManager=pluginManager;  if (savedResult != null) {    onActivityResult(savedResult.requestCode,savedResult.resultCode,savedResult.intent);  } else   if (activityWasDestroyed) {    activityWasDestroyed=false;    if (pluginManager != null) {      CoreAndroid appPlugin=(CoreAndroid)pluginManager.getPlugin(CoreAndroid.PLUGIN_NAME);      if (appPlugin != null) {        JSONObject obj=new JSONObject();        try {          obj.put("action","resume");        } catch (        JSONException e) {          LOG.e(TAG,"Failed to create event message",e);        }        appPlugin.sendResumeEvent(new PluginResult(PluginResult.Status.OK,obj));      }    }  }}  }
class C{  public static String sha3(String hexInput){  byte[] bytes=Numeric.hexStringToByteArray(hexInput);  byte[] result=sha3(bytes);  return Numeric.toHexString(result);}  }
class C{  @Nullable public static RuleName createIfValid(String ruleName){  if (validate(ruleName,null)) {    return new RuleName(ruleName);  }  return null;}  }
class C{  public HumanTime m(){  return m(1);}  }
class C{  private DataSourceAttributePanel createDataSourceAttributePanel(Class<?> expectedDataType){  DataSourceAttributePanel panel=new DataSourceAttributePanel(this);  panel.setDataType(expectedDataType);  outerPanel.add(panel,DataSourceAttributePanel.getPanelName());  return panel;}  }
class C{  private void doNormalizedStep(final boolean isLast){  if (!bounds.firstIncluded() && first.getTime().getReal() == last.getTime().getReal()) {    return;  }  handler.handleStep(last,isLast);}  }
class C{  public void showError(Drawable errorImageDrawable,String errorTextTitle,String errorTextContent,String errorButtonText,OnClickListener onClickListener,List<Integer> skipIds){  switchState(ERROR,errorImageDrawable,errorTextTitle,errorTextContent,errorButtonText,onClickListener,skipIds);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public static Map<String,Object> createNote(DispatchContext ctx,Map<String,?> context){  Delegator delegator=ctx.getDelegator();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Timestamp noteDate=(Timestamp)context.get("noteDate");  String partyId=(String)context.get("partyId");  String noteName=(String)context.get("noteName");  String note=(String)context.get("note");  String noteId=delegator.getNextSeqId("NoteData");  Locale locale=(Locale)context.get("locale");  if (noteDate == null) {    noteDate=UtilDateTime.nowTimestamp();  }  if (partyId == null) {    if (userLogin != null && userLogin.get("partyId") != null)     partyId=userLogin.getString("partyId");  }  Map<String,Object> fields=UtilMisc.toMap("noteId",noteId,"noteName",noteName,"noteInfo",note,"noteParty",partyId,"noteDateTime",noteDate);  try {    GenericValue newValue=delegator.makeValue("NoteData",fields);    delegator.create(newValue);  } catch (  GenericEntityException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonNoteCannotBeUpdated",UtilMisc.toMap("errorString",e.getMessage()),locale));  }  Map<String,Object> result=ServiceUtil.returnSuccess();  result.put("noteId",noteId);  result.put("partyId",partyId);  return result;}  }
class C{  public static Map ordinalMap(TupleSet tuples,String field){  return ordinalMap(tuples,field,DefaultLiteralComparator.getInstance());}  }
class C{  public ArrayFieldVector(Field<T> field,T[] v1,T[] v2) throws MathIllegalArgumentException, NullArgumentException {  MathUtils.checkNotNull(v1);  MathUtils.checkNotNull(v2);  if (v1.length + v2.length == 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.VECTOR_MUST_HAVE_AT_LEAST_ONE_ELEMENT);  }  data=MathArrays.buildArray(field,v1.length + v2.length);  System.arraycopy(v1,0,data,0,v1.length);  System.arraycopy(v2,0,data,v1.length,v2.length);  this.field=field;}  }
class C{  public static LSException createLSException(short code,Throwable cause){  LSException lse=new LSException(code,cause != null ? cause.getMessage() : null);  if (cause != null && ThrowableMethods.fgThrowableMethodsAvailable) {    try {      ThrowableMethods.fgThrowableInitCauseMethod.invoke(lse,cause);    } catch (    Exception e) {    }  }  return lse;}  }
class C{  protected final void clearAuthenticationAttributes(HttpServletRequest request){  HttpSession session=request.getSession(false);  if (session == null) {    return;  }  session.removeAttribute(WebAttributes.AUTHENTICATION_EXCEPTION);}  }
class C{  public static Module load(int id){  return modules.get(id);}  }
class C{  public static void displayClassLoaderTree(ClassLoader classloader){  ArrayList loaderList=getClassLoaderTree(classloader);  System.out.println("");  System.out.println("ClassLoader Tree has " + loaderList.size() + " levels");  System.out.println("  cl0 -- Boot ClassLoader ");  ClassLoader curClassLoader=null;  for (int i=1; i < loaderList.size(); i++) {    System.out.println("   |");    curClassLoader=(ClassLoader)loaderList.get(i);    System.out.print("  cl" + i + " -- ClassLoader "+ curClassLoader+ ": ");    if (curClassLoader instanceof URLClassLoader) {      URL[] urls=((URLClassLoader)(curClassLoader)).getURLs();      if (urls != null) {        System.out.print(urls[0]);        for (int j=1; j < urls.length; j++) {          System.out.print(", " + urls[j]);        }      } else {        System.out.print("null search path");      }    } else {      if (curClassLoader instanceof SecureClassLoader) {        System.out.print("is instance of SecureClassLoader");      } else {        System.out.print("is unknown ClassLoader type");      }    }    System.out.println("");  }  System.out.println("");}  }
class C{  public MessageManageImplementor(MessageManageView view){  this.view=view;}  }
class C{  public void append(File file) throws IllegalStateException, FileNotFoundException, IOException, FTPIllegalReplyException, FTPException, FTPDataTransferException, FTPAbortedException {  append(file,null);}  }
class C{  public void importXLIFF(Repository repository,String xliffContent,boolean updateTM){  ImportExportedXliffStep importExportedXliffStep=new ImportExportedXliffStep(repository,xliffContent,updateTM);  importXLIFF(importExportedXliffStep,xliffContent);}  }
class C{  @Deployment public void testJobEntityEventsException() throws Exception {  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("testJobEvents");  Job theJob=managementService.createTimerJobQuery().processInstanceId(processInstance.getId()).singleResult();  assertNotNull(theJob);  managementService.setTimerJobRetries(theJob.getId(),1);  Calendar tomorrow=Calendar.getInstance();  tomorrow.add(Calendar.DAY_OF_YEAR,1);  processEngineConfiguration.getClock().setCurrentTime(tomorrow.getTime());  Job executableJob=managementService.moveTimerToExecutableJob(theJob.getId());  listener.clearEventsReceived();  try {    managementService.executeJob(executableJob.getId());    fail("Expected exception");  } catch (  Exception e) {  }  theJob=managementService.createDeadLetterJobQuery().processInstanceId(processInstance.getId()).singleResult();  assertNotNull(theJob);  assertEquals(8,listener.getEventsReceived().size());  ActivitiEvent event=listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.TIMER_FIRED,event.getType());  checkEventContext(event,theJob);  event=listener.getEventsReceived().get(1);  assertEquals(ActivitiEventType.ENTITY_DELETED,event.getType());  checkEventContext(event,theJob);  event=listener.getEventsReceived().get(2);  assertEquals(ActivitiEventType.JOB_EXECUTION_FAILURE,event.getType());  checkEventContext(event,theJob);  event=listener.getEventsReceived().get(3);  assertEquals(ActivitiEventType.ENTITY_CREATED,event.getType());  checkEventContext(event,theJob);  event=listener.getEventsReceived().get(4);  assertEquals(ActivitiEventType.ENTITY_INITIALIZED,event.getType());  checkEventContext(event,theJob);  event=listener.getEventsReceived().get(5);  assertEquals(ActivitiEventType.ENTITY_DELETED,event.getType());  checkEventContext(event,theJob);  event=listener.getEventsReceived().get(6);  assertEquals(ActivitiEventType.ENTITY_UPDATED,event.getType());  checkEventContext(event,theJob);  event=listener.getEventsReceived().get(7);  assertEquals(ActivitiEventType.JOB_RETRIES_DECREMENTED,event.getType());  assertEquals(0,((Job)((ActivitiEntityEvent)event).getEntity()).getRetries());  checkEventContext(event,theJob);}  }
class C{  protected void removeAllAfterModel(EpoxyModel<?> model){  List<EpoxyModel<?>> modelsToRemove=getAllModelsAfter(model);  int numModelsRemoved=modelsToRemove.size();  int initialModelCount=models.size();  pauseModelListNotifications();  modelsToRemove.clear();  resumeModelListNotifications();  notifyItemRangeRemoved(initialModelCount - numModelsRemoved,numModelsRemoved);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ProcDPHeal_Instant_HEAL_A_TO_ME(int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201236,num0,skillcaster,skillname);}  }
class C{  public void leftTrim(int numberOfSample){  trim(numberOfSample,0);}  }
class C{  private LocatorReg findReg(LookupLocator lct){  Iterator iter=undiscoveredLocators.iterator();  while (iter.hasNext()) {    LocatorReg reg=(LocatorReg)iter.next();    if (reg.l.equals(lct))     return reg;  }  return null;}  }
class C{  public Type merge(Type other,Scene cm){  if (other instanceof RefType)   return other;  throw new RuntimeException("illegal type merge: " + this + " and "+ other);}  }
class C{  public Verify(String[] args){  final CmdLineParser parser=new CmdLineParser(this,ParserProperties.defaults().withUsageWidth(80));  try {    parser.parseArgument(args);  } catch (  CmdLineException e) {    System.err.println(e.getMessage());    print_usage_and_exit_(parser);  }  if (help) {    print_usage_and_exit_(parser);  }  if (files.isEmpty())   System.exit(EX_USAGE);}  }
class C{  private void GetDir(int col){  dir=sPath.get_Directions()[col];  len=sPath.get_Lens()[col];  sx=this.map_controler.get_Direc_Dis_X(dir);  sy=this.map_controler.get_Direc_Dis_Y(dir);}  }
class C{  public void java_lang_Class_getName(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getStringObject());}  }
class C{  @Deployment public void testExclusiveJobs(){  if (processEngineConfiguration.getHistoryLevel().isAtLeast(HistoryLevel.AUDIT)) {    runtimeService.startProcessInstanceByKey("testExclusiveJobs");    waitForJobExecutorToProcessAllJobs(20000L,500L);    HistoricActivityInstance scriptTaskAInstance=historyService.createHistoricActivityInstanceQuery().activityId("scriptTaskA").singleResult();    HistoricActivityInstance scriptTaskBInstance=historyService.createHistoricActivityInstanceQuery().activityId("scriptTaskB").singleResult();    long endTimeA=scriptTaskAInstance.getEndTime().getTime();    long endTimeB=scriptTaskBInstance.getEndTime().getTime();    long endTimeDifference=0;    if (endTimeB > endTimeA) {      endTimeDifference=endTimeB - endTimeA;    } else {      endTimeDifference=endTimeA - endTimeB;    }    assertTrue(endTimeDifference > 6000);  }}  }
class C{  public MessagesMarkAsImportantQuery messageIds(List<Integer> value){  return unsafeParam("message_ids",value);}  }
class C{  protected boolean isValidUser(String user){  return USER_PATTERN.matcher(user).matches();}  }
class C{  public double intercept(){  return alpha;}  }
class C{  private void initSkinLoader(){  setUpSkinFile();  SkinManager.getInstance().init(this);  SkinManager.getInstance().loadSkin();}  }
class C{  public void populateComboBoxField(FieldIdEnum fieldId,String value){  if (fieldConfigManager == null) {    return;  }  FieldConfigBase fieldConfig=fieldConfigManager.get(fieldId);  if (fieldConfig != null) {    if (value != null) {      ((FieldConfigValuePopulateInterface)fieldConfig).populateField(value);    } else {      fieldConfig.revertToDefaultValue();    }  }}  }
class C{  public CannotCommitException(String desc){  super(desc);}  }
class C{  protected void mightClearFKValue(DataSupport baseObj,AssociationsInfo associationInfo){  baseObj.addFKNameToClearSelf(getForeignKeyName(associationInfo));}  }
class C{  public boolean hasNextOperation(){  return nextOperation != null;}  }
class C{  public void scan(Reader r0,ScanHandler h) throws IOException, SAXException {  theState=S_PCDATA;  PushbackReader r;  if (r0 instanceof PushbackReader) {    r=(PushbackReader)r0;  } else   if (r0 instanceof BufferedReader) {    r=new PushbackReader(r0);  } else {    r=new PushbackReader(new BufferedReader(r0,200));  }  int firstChar=r.read();  if (firstChar != '\uFEFF')   unread(r,firstChar);  while (theState != S_DONE) {    int c1=r.read();    char c=(char)c1;    boolean is32BitChar=Character.isHighSurrogate(c);    int c2=is32BitChar ? r.read() : -1;    String s=is32BitChar ? new StringBuffer().append(c).append((char)c2).toString() : null;    if (!is32BitChar && c1 >= 0x80 && c1 <= 0x9F)     c1=theWinMap[c1 - 0x80];    if (!is32BitChar && c1 == '\r') {      c1=r.read();      if (c1 != '\n') {        unread(r,c1);        c1='\n';      }    }    if (!is32BitChar && c1 == '\n') {      theCurrentLine++;      theCurrentColumn=0;    } else {      theCurrentColumn++;    }    if (!!is32BitChar && !(c1 >= 0x20 || c1 == '\n' || c1 == '\t' || c1 == -1))     continue;    int action=0;    for (int i=0; i < statetable.length; i+=4) {      if (theState != statetable[i]) {        if (action != 0)         break;        continue;      }      if (statetable[i + 1] == 0) {        action=statetable[i + 2];        theNextState=statetable[i + 3];      } else       if (!is32BitChar && statetable[i + 1] == c1) {        action=statetable[i + 2];        theNextState=statetable[i + 3];        break;      }    }switch (action) {case 0:      throw new Error("HTMLScanner can't cope with " + Integer.toString(c1) + " in state "+ Integer.toString(theState));case A_ADUP:    h.adup(theOutputBuffer,0,theSize);  theSize=0;break;case A_ADUP_SAVE:h.adup(theOutputBuffer,0,theSize);theSize=0;if (s != null) save(s,c1,h);break;case A_ADUP_STAGC:h.adup(theOutputBuffer,0,theSize);theSize=0;h.stagc(theOutputBuffer,0,theSize);break;case A_ANAME:h.aname(theOutputBuffer,0,theSize);theSize=0;break;case A_ANAME_ADUP:h.aname(theOutputBuffer,0,theSize);theSize=0;h.adup(theOutputBuffer,0,theSize);break;case A_ANAME_ADUP_STAGC:h.aname(theOutputBuffer,0,theSize);theSize=0;h.adup(theOutputBuffer,0,theSize);h.stagc(theOutputBuffer,0,theSize);break;case A_AVAL:h.aval(theOutputBuffer,0,theSize);theSize=0;break;case A_AVAL_STAGC:h.aval(theOutputBuffer,0,theSize);theSize=0;h.stagc(theOutputBuffer,0,theSize);break;case A_CDATA:mark();if (theSize > 1) theSize-=2;h.pcdata(theOutputBuffer,0,theSize);theSize=0;break;case A_ENTITY_START:h.pcdata(theOutputBuffer,0,theSize);theSize=0;save(s,c1,h);break;case A_ENTITY:mark();if (theState == S_ENT && c == '#') {theNextState=S_NCR;save(s,c1,h);break;} else if (theState == S_NCR && (c == 'x' || c == 'X')) {theNextState=S_XNCR;save(s,c1,h);break;} else if (theState == S_ENT && Character.isLetterOrDigit(c)) {save(s,c1,h);break;} else if (theState == S_NCR && Character.isDigit(c)) {save(s,c1,h);break;} else if (theState == S_XNCR && (Character.isDigit(c) || "abcdefABCDEF".indexOf(c) != -1)) {save(s,c1,h);break;}h.entity(theOutputBuffer,1,theSize - 1);int ent=h.getEntity();if (ent != 0) {theSize=0;if (ent >= 0x80 && ent <= 0x9F) {ent=theWinMap[ent - 0x80];}if (ent < 0x20) {ent=0x20;} else if (ent >= 0xD800 && ent <= 0xDFFF) {ent=0;} else if (ent <= 0xFFFF) {save(ent,h);} else {ent-=0x10000;save((ent >> 10) + 0xD800,h);save((ent & 0x3FF) + 0xDC00,h);}if (is32BitChar || c1 != ';') {if (is32BitChar) {unread(r,c2);theCurrentColumn--;}unread(r,c1);theCurrentColumn--;}} else {if (is32BitChar) {unread(r,c2);theCurrentColumn--;}unread(r,c1);theCurrentColumn--;}theNextState=S_PCDATA;break;case A_ETAG:h.etag(theOutputBuffer,0,theSize);theSize=0;break;case A_DECL:h.decl(theOutputBuffer,0,theSize);theSize=0;break;case A_GI:h.gi(theOutputBuffer,0,theSize);theSize=0;break;case A_GI_STAGC:h.gi(theOutputBuffer,0,theSize);theSize=0;h.stagc(theOutputBuffer,0,theSize);break;case A_LT:mark();save('<',h);save(s,c1,h);break;case A_LT_PCDATA:mark();save('<',h);h.pcdata(theOutputBuffer,0,theSize);theSize=0;break;case A_PCDATA:mark();h.pcdata(theOutputBuffer,0,theSize);theSize=0;break;case A_CMNT:mark();h.cmnt(theOutputBuffer,0,theSize);theSize=0;break;case A_MINUS3:save('-',h);save(' ',h);break;case A_MINUS2:save('-',h);save(' ',h);case A_MINUS:save('-',h);save(s,c1,h);break;case A_PI:mark();h.pi(theOutputBuffer,0,theSize);theSize=0;break;case A_PITARGET:h.pitarget(theOutputBuffer,0,theSize);theSize=0;break;case A_PITARGET_PI:h.pitarget(theOutputBuffer,0,theSize);theSize=0;h.pi(theOutputBuffer,0,theSize);break;case A_SAVE:save(s,c1,h);break;case A_SKIP:break;case A_SP:save(' ',h);break;case A_STAGC:h.stagc(theOutputBuffer,0,theSize);theSize=0;break;case A_EMPTYTAG:mark();if (theSize > 0) h.gi(theOutputBuffer,0,theSize);theSize=0;h.stage(theOutputBuffer,0,theSize);break;case A_UNGET:unread(r,c1);theCurrentColumn--;break;case A_UNSAVE_PCDATA:if (theSize > 0) theSize--;h.pcdata(theOutputBuffer,0,theSize);theSize=0;break;default :throw new Error("Can't process state " + action);}theState=theNextState;}h.eof(theOutputBuffer,0,0);}  }
class C{  public String loadFullDocumentTextToString(String sDocID){  Node nDoc=XMLDoc.getElementById(sDocID);  if (nDoc == null)   return null;  Element eDoc=(Element)nDoc;  String sRes=eDoc.getTextContent();  return sRes;}  }
class C{  public static String checkProtectedView(HttpServletRequest request,HttpServletResponse response){  HttpSession session=request.getSession();  String viewNameId=RequestHandler.getRequestUri(request.getPathInfo());  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");  Delegator delegator=(Delegator)request.getAttribute("delegator");  String returnValue="success";  if (userLogin != null) {    String userLoginId=userLogin.getString("userLoginId");    try {      List<GenericValue> protectedViews=EntityQuery.use(delegator).from("UserLoginAndProtectedView").where("userLoginId",userLoginId,"viewNameId",viewNameId).cache(true).queryList();      if (UtilValidate.isNotEmpty(protectedViews)) {        Long now=System.currentTimeMillis();        List<GenericValue> tarpittedLoginViews=EntityQuery.use(delegator).from("TarpittedLoginView").where("userLoginId",userLoginId,"viewNameId",viewNameId).cache(true).queryList();        String viewNameUserLoginId=viewNameId + userLoginId;        if (UtilValidate.isNotEmpty(tarpittedLoginViews)) {          GenericValue tarpittedLoginView=tarpittedLoginViews.get(0);          Long tarpitReleaseDateTime=(Long)tarpittedLoginView.get("tarpitReleaseDateTime");          if (now < tarpitReleaseDateTime) {            String tarpittedMessage=UtilProperties.getMessage(resourceWebapp,"protectedviewevents.tarpitted_message",UtilHttp.getLocale(request));            hitsByViewAccessed.put(viewNameUserLoginId,new Long(0));            return ":_protect_:" + tarpittedMessage;          }        }        GenericValue protectedView=protectedViews.get(0);        Long curMaxHits=hitsByViewAccessed.get(viewNameUserLoginId);        if (UtilValidate.isEmpty(curMaxHits)) {          hitsByViewAccessed.put(viewNameUserLoginId,one);          Long maxHitsDuration=(Long)protectedView.get("maxHitsDuration") * 1000;          durationByViewAccessed.put(viewNameUserLoginId,now + maxHitsDuration);        } else {          Long maxDuration=durationByViewAccessed.get(viewNameUserLoginId);          Long newMaxHits=curMaxHits + one;          hitsByViewAccessed.put(viewNameUserLoginId,newMaxHits);          if (now < maxDuration) {            if (newMaxHits > protectedView.getLong("maxHits")) {              String blockedMessage=UtilProperties.getMessage(resourceWebapp,"protectedviewevents.blocked_message",UtilHttp.getLocale(request));              returnValue=":_protect_:" + blockedMessage;              Long tarpitDuration=(Long)protectedView.get("tarpitDuration") * 1000;              GenericValue tarpittedLoginView=delegator.makeValue("TarpittedLoginView");              tarpittedLoginView.set("userLoginId",userLoginId);              tarpittedLoginView.set("viewNameId",viewNameId);              tarpittedLoginView.set("tarpitReleaseDateTime",now + tarpitDuration);              try {                delegator.createOrStore(tarpittedLoginView);              } catch (              GenericEntityException e) {                Debug.logError(e,"Could not save TarpittedLoginView:",module);              }            }          } else {            hitsByViewAccessed.put(viewNameUserLoginId,one);            Long maxHitsDuration=(Long)protectedView.get("maxHitsDuration") * 1000;            durationByViewAccessed.put(viewNameUserLoginId,now + maxHitsDuration);          }        }      }    } catch (    GenericEntityException e) {      Map<String,String> messageMap=UtilMisc.toMap("errMessage",e.getMessage());      String errMsg=UtilProperties.getMessage("CommonUiLabels","CommonDatabaseProblem",messageMap,UtilHttp.getLocale(request));      Debug.logError(e,errMsg,module);    }  }  return returnValue;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostDropRate_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200454,skilltarget,skillname);}  }
class C{  public static final void drawJoint(GL2 gl,Joint joint,double invdt){  if (joint instanceof AngleJoint) {  } else   if (joint instanceof DistanceJoint) {    RenderUtilities.drawDistanceJoint(gl,(DistanceJoint)joint);  } else   if (joint instanceof FrictionJoint) {  } else   if (joint instanceof MotorJoint) {    RenderUtilities.drawMotorJoint(gl,(MotorJoint)joint);  } else   if (joint instanceof PinJoint) {    RenderUtilities.drawMouseJoint(gl,(PinJoint)joint,invdt);  } else   if (joint instanceof PrismaticJoint) {    RenderUtilities.drawPrismaticJoint(gl,(PrismaticJoint)joint);  } else   if (joint instanceof PulleyJoint) {    RenderUtilities.drawPulleyJoint(gl,(PulleyJoint)joint);  } else   if (joint instanceof RevoluteJoint) {    RenderUtilities.drawRevoluteJoint(gl,(RevoluteJoint)joint);  } else   if (joint instanceof RopeJoint) {    RenderUtilities.drawRopeJoint(gl,(RopeJoint)joint);  } else   if (joint instanceof WeldJoint) {    RenderUtilities.drawWeldJoint(gl,(WeldJoint)joint);  } else   if (joint instanceof WheelJoint) {    RenderUtilities.drawWheelJoint(gl,(WheelJoint)joint);  } else {  }}  }
class C{  public static void println(int priority,String tag,String msg,Throwable tr){  if (mLogNode != null) {    mLogNode.println(priority,tag,msg,tr);  }}  }
class C{  @Override public AudioInputStream synthesiseOneSection(String mbrolaData,Voice voice) throws IOException {  assert getState() == MODULE_RUNNING;  if (mbrolaData == null || voice == null) {    throw new IllegalArgumentException("Received null argument.");  }  assert voice instanceof MbrolaVoice : "Not an MBROLA voice: " + voice.getName();  String[] cmd=new String[]{baseCmd,"-e",((MbrolaVoice)voice).path(),"-","-.raw"};  int MAX_NR_ATTEMPTS=2;  int nrAttempts=0;  do {    nrAttempts++;    AudioDestination audioDestination=MaryRuntimeUtils.createAudioDestination();    Log.d(Mary.LOG,"Keeping audio data in " + (audioDestination.isInRam() ? "RAM" : " a temp file"));    StringBuilder cmdString=new StringBuilder();    for (int i=0; i < cmd.length; i++) {      cmdString.append(cmd[i]);      cmdString.append(" ");    }    Log.i(Mary.LOG,"Starting Synthesis with command: " + cmdString.toString().trim());    Process process=Runtime.getRuntime().exec(cmd);    if (System.getProperty("java.vendor").startsWith("Sun") && System.getProperty("java.version").startsWith("1.4.1")) {      try {        Thread.sleep(1);      } catch (      InterruptedException e) {      }    }    PrintWriter toWriter=new PrintWriter(new OutputStreamWriter(process.getOutputStream()),true);    final InputStream from=new BufferedInputStream(process.getInputStream());    StreamLogger errorLogger=new StreamLogger(process.getErrorStream(),name() + " err",null);    errorLogger.start();    AudioReader readingThread=new AudioReader(from,audioDestination);    readingThread.start();    Log.i(Mary.LOG,"Writing to module.");    Log.d(Mary.LOG,"Writing MBROLA input:\n" + mbrolaData + "\n");    toWriter.print(mbrolaData);    toWriter.flush();    toWriter.close();    boolean timeoutOccurred=false;    do {      try {        readingThread.join(timeout);      } catch (      InterruptedException e) {        Log.w(Mary.LOG,"Unexpected interruption while waiting for reader thread.");      }      timeoutOccurred=System.currentTimeMillis() - readingThread.latestSeenTime() >= timeout;    } while (readingThread.isAlive() && !timeoutOccurred);    if (process != null)     process.destroy();    if (!timeoutOccurred) {      return audioDestination.convertToAudioInputStream(voice.dbAudioFormat());    }    Log.w(Mary.LOG,"Timeout occurred in attempt " + nrAttempts + " out of "+ MAX_NR_ATTEMPTS);  } while (nrAttempts < MAX_NR_ATTEMPTS);  throw new IOException("Repeated timeouts -- cannot synthesise.");}  }
class C{  public SpaceTypeDescriptorBuilder routingProperty(String routingPropertyName,SpaceIndexType indexType){  if (routingPropertyName == null)   throw new IllegalArgumentException("Argument cannot be null - 'routingPropertyName'.");  if (indexType == null)   throw new IllegalArgumentException("Argument cannot be null - 'indexType'.");  if (_routingPropertyName != null)   throw new IllegalStateException("Cannot set routing property to '" + routingPropertyName + "' - it was already set to '"+ _routingPropertyName+ "'.");  this._routingPropertyName=routingPropertyName;  addIndexIfNotExists(routingPropertyName,indexType);  return this;}  }
class C{  @Override public boolean markSupported(){  return in.markSupported();}  }
class C{  public GiftsGetQuery userId(Integer value){  return unsafeParam("user_id",value);}  }
class C{  @NonNull public static StorableFence and(@NonNull StorableFence... fences){  return StorableFence.and(Arrays.asList(fences));}  }
class C{  public CircleImageView(Context context){  super(context);  init();}  }
class C{  public void flush(){  getDiskCache().flush();}  }
class C{  public Hierarchy(){  this.sc=Scene.v();  state=sc.getState();{    Chain<SootClass> allClasses=sc.getClasses();    classToSubclasses=new HashMap<SootClass,List<SootClass>>(allClasses.size() * 2 + 1,0.7f);    interfaceToSubinterfaces=new HashMap<SootClass,List<SootClass>>(allClasses.size() * 2 + 1,0.7f);    interfaceToSuperinterfaces=new HashMap<SootClass,List<SootClass>>(allClasses.size() * 2 + 1,0.7f);    classToDirSubclasses=new HashMap<SootClass,List<SootClass>>(allClasses.size() * 2 + 1,0.7f);    interfaceToDirSubinterfaces=new HashMap<SootClass,List<SootClass>>(allClasses.size() * 2 + 1,0.7f);    interfaceToDirSuperinterfaces=new HashMap<SootClass,List<SootClass>>(allClasses.size() * 2 + 1,0.7f);    interfaceToDirImplementers=new HashMap<SootClass,List<SootClass>>(allClasses.size() * 2 + 1,0.7f);    Iterator<SootClass> classesIt=allClasses.iterator();    while (classesIt.hasNext()) {      SootClass c=classesIt.next();      if (c.resolvingLevel() < SootClass.HIERARCHY)       continue;      if (c.isInterface()) {        interfaceToDirSubinterfaces.put(c,new ArrayList<SootClass>());        interfaceToDirSuperinterfaces.put(c,new ArrayList<SootClass>());        interfaceToDirImplementers.put(c,new ArrayList<SootClass>());      } else       classToDirSubclasses.put(c,new ArrayList<SootClass>());    }    classesIt=allClasses.iterator();    while (classesIt.hasNext()) {      SootClass c=classesIt.next();      if (c.resolvingLevel() < SootClass.HIERARCHY)       continue;      List<SootClass> l2=interfaceToDirSuperinterfaces.get(c);      if (c.hasSuperclass()) {        if (c.isInterface()) {          for (          SootClass i : c.getInterfaces()) {            if (c.resolvingLevel() < SootClass.HIERARCHY)             continue;            List<SootClass> l=interfaceToDirSubinterfaces.get(i);            if (l != null)             l.add(c);            if (l2 != null)             l2.add(i);          }        } else {          List<SootClass> l=classToDirSubclasses.get(c.getSuperclass());          l.add(c);          Iterator<SootClass> subIt=c.getInterfaces().iterator();          while (subIt.hasNext()) {            SootClass i=subIt.next();            if (c.resolvingLevel() < SootClass.HIERARCHY)             continue;            l=interfaceToDirImplementers.get(i);            if (l != null)             l.add(c);          }        }      }    }{      classesIt=allClasses.iterator();      while (classesIt.hasNext()) {        SootClass c=classesIt.next();        if (c.resolvingLevel() < SootClass.HIERARCHY)         continue;        if (c.isInterface()) {          List<SootClass> imp=interfaceToDirImplementers.get(c);          Set<SootClass> s=new ArraySet<SootClass>();          Iterator<SootClass> impIt=imp.iterator();          while (impIt.hasNext()) {            SootClass c0=impIt.next();            if (c.resolvingLevel() < SootClass.HIERARCHY)             continue;            s.addAll(getSubclassesOfIncluding(c0));          }          imp.clear();          imp.addAll(s);        }      }    }    classesIt=allClasses.iterator();    while (classesIt.hasNext()) {      SootClass c=classesIt.next();      if (c.resolvingLevel() < SootClass.HIERARCHY)       continue;      if (c.isInterface()) {        interfaceToDirSubinterfaces.put(c,Collections.unmodifiableList(interfaceToDirSubinterfaces.get(c)));        interfaceToDirSuperinterfaces.put(c,Collections.unmodifiableList(interfaceToDirSuperinterfaces.get(c)));        interfaceToDirImplementers.put(c,Collections.unmodifiableList(interfaceToDirImplementers.get(c)));      } else       classToDirSubclasses.put(c,Collections.unmodifiableList(classToDirSubclasses.get(c)));    }  }}  }
class C{  public void loadConf(DistributedLogConfiguration baseConf){  addConfiguration(baseConf);}  }
class C{  protected void af(String msg,boolean b){  Assert.assertFalse(msg,b);}  }
class C{  public static String separatorsToWindows(String path){  if (path == null || path.indexOf(UNIX_SEPARATOR) == -1) {    return path;  }  return path.replace(UNIX_SEPARATOR,WINDOWS_SEPARATOR);}  }
class C{  public Arguments newArgumentList(Value... values){  throw new RuntimeException("Unsupported operation.");}  }
class C{  @NotNull private EditSourceDialog showEditDialog(@Nullable RepositorySource source){  RepositorySourceProvider userSourceProvider=getUserSourceProvider();  assert userSourceProvider != null;  EditSourceDialog input=new EditSourceDialog(userSourceProvider,source);  input.show();  return input;}  }
class C{  public static Future<LogRecordWithDLSN> asyncReadLastRecord(final String streamName,final LogSegmentMetadata l,final boolean fence,final boolean includeControl,final boolean includeEndOfStream,final int scanStartBatchSize,final int scanMaxBatchSize,final AtomicInteger numRecordsScanned,final ExecutorService executorService,final LedgerHandleCache handleCache){  final LogRecordSelector selector=new LastRecordSelector();  return asyncReadRecord(streamName,l,fence,includeControl,includeEndOfStream,scanStartBatchSize,scanMaxBatchSize,numRecordsScanned,executorService,handleCache,selector,true,0L);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MagicCounterATK_INTERVAL_TO_B(String skilltarget,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201064,skilltarget,num0,skillname);}  }
class C{  private static void daxpbypz(final double a,final RealVector x,final double b,final RealVector y,final RealVector z){  final int n=z.getDimension();  for (int i=0; i < n; i++) {    final double zi;    zi=a * x.getEntry(i) + b * y.getEntry(i) + z.getEntry(i);    z.setEntry(i,zi);  }}  }
class C{  private void readCentralDir() throws IOException {  long scanOffset=raf.length() - ENDHDR;  if (scanOffset < 0) {    throw new ZipException("File too short to be a zip file: " + raf.length());  }  raf.seek(0);  final int headerMagic=Integer.reverseBytes(raf.readInt());  if (headerMagic != LOCSIG) {    throw new ZipException("Not a zip archive");  }  long stopOffset=scanOffset - 65536;  if (stopOffset < 0) {    stopOffset=0;  }  while (true) {    raf.seek(scanOffset);    if (Integer.reverseBytes(raf.readInt()) == ENDSIG) {      break;    }    scanOffset--;    if (scanOffset < stopOffset) {      throw new ZipException("End Of Central Directory signature not found");    }  }  byte[] eocd=new byte[ENDHDR - 4];  raf.readFully(eocd);  BufferIterator it=HeapBufferIterator.iterator(eocd,0,eocd.length,ByteOrder.LITTLE_ENDIAN);  int diskNumber=it.readShort() & 0xffff;  int diskWithCentralDir=it.readShort() & 0xffff;  int numEntries=it.readShort() & 0xffff;  int totalNumEntries=it.readShort() & 0xffff;  it.skip(4);  long centralDirOffset=((long)it.readInt()) & 0xffffffffL;  int commentLength=it.readShort() & 0xffff;  if (numEntries != totalNumEntries || diskNumber != 0 || diskWithCentralDir != 0) {    throw new ZipException("Spanned archives not supported");  }  if (commentLength > 0) {    byte[] commentBytes=new byte[commentLength];    raf.readFully(commentBytes);    comment=new String(commentBytes,0,commentBytes.length,StandardCharsets.UTF_8);  }  RAFStream rafStream=new RAFStream(raf,centralDirOffset);  BufferedInputStream bufferedStream=new BufferedInputStream(rafStream,4096);  byte[] hdrBuf=new byte[CENHDR];  for (int i=0; i < numEntries; ++i) {    TinkerZipEntry newEntry=new TinkerZipEntry(hdrBuf,bufferedStream,StandardCharsets.UTF_8,(false));    if (newEntry.localHeaderRelOffset >= centralDirOffset) {      throw new ZipException("Local file header offset is after central directory");    }    String entryName=newEntry.getName();    if (entries.put(entryName,newEntry) != null) {      throw new ZipException("Duplicate entry name: " + entryName);    }  }}  }
class C{  private CountingThreadPoolExecutor createExecutor(int numThreads){  return new CountingThreadPoolExecutor(numThreads,Integer.MAX_VALUE,30,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>());}  }
class C{  @Deprecated public static String toString(byte[] input) throws IOException {  return new String(input);}  }
class C{  public ConnectionPool(ProtocolAdapter protocolAdapter,ITransportConfig config,String connectionURL,PlatformLogicalVersion serviceVersion){  int maxConns=config.getConnectionPoolSize();  if (maxConns <= 0)   throw new IllegalArgumentException("Max connection pool can't be less or equals zero.");  this._connectionURL=connectionURL;  this._serviceVersion=serviceVersion;  this._peersPool=new BlockingResourcePool<ConnectionResource>(new ConnectionFactory(protocolAdapter,config,serviceVersion),0,maxConns);  this._serviceDetails=extractServiceDetailsFromConnectionUrl(_connectionURL);}  }
class C{  public void success(byte[] message){  sendPluginResult(new PluginResult(PluginResult.Status.OK,message));}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  String choice=ProgramProperties.get("NucleotideColorScheme",ColorSchemeNucleotides.NAMES.Default.toString());  String result=(String)JOptionPane.showInputDialog(getViewer().getFrame(),"Choose nucleotide color scheme","Choose colors",JOptionPane.QUESTION_MESSAGE,ProgramProperties.getProgramIcon(),ColorSchemeNucleotides.getNames(),choice);  if (result != null) {    result=result.trim();    if (result.length() > 0) {      ProgramProperties.put("NucleotideColorScheme",result);      execute("set nucleotideColors='" + result + "';");    }  }}  }
class C{  public synchronized void resetTime(){}  }
class C{  public void putGrammar(SchemaGrammar grammar){  if (grammar.getTargetNamespace() == null)   fNoNSGrammar=grammar; else   fGrammarRegistry.put(grammar.getTargetNamespace(),grammar);}  }
class C{  void replacedText(CharacterDataImpl node){}  }
class C{  private boolean canBatch(Entry e){  Iterator<Entry> iter=leases.tailMap(e).values().iterator();  iter.next();  while (iter.hasNext()) {    Entry be=iter.next();    if (e.renew - be.renew > renewBatchTimeWindow)     break;    if (e.canBatch(be))     return true;  }  return false;}  }
class C{  public static Map<String,Object> returnMessage(String code,String message){  Map<String,Object> result=new HashMap<String,Object>();  if (code != null)   result.put(ModelService.RESPONSE_MESSAGE,code);  if (message != null)   result.put(ModelService.SUCCESS_MESSAGE,message);  return result;}  }
class C{  public void begin(String header,int bias){  begin();  m_out.print(header);  m_bias=bias;}  }
class C{  protected MessagesRestoreQuery messageId(int value){  return unsafeParam("message_id",value);}  }
class C{  protected List<String> extractCandidates(String str){  return Arrays.asList(str.split("[\\s]*,[\\s]*"));}  }
class C{  public List<ProcessFunctionParameterValue> extractParameters(){  if (builtInSelected) {    return builtIn.extractParameters(builtInProcessFunction,selectedProcessFunctionData);  } else {    return custom.extractParameters(selectedCustomFunction);  }}  }
class C{  public PhotosGetQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  @NonNull @Override protected ViewHolder createViewHolder(@LayoutRes int layout,@NonNull ViewGroup parent){  return new ViewHolder(layout,parent);}  }
class C{  private void adjustViewsUpOrDown(){  final int childCount=getChildCount();  int delta;  if (childCount > 0) {    if (!mStackFromBottom) {      final int firstTop=getScrollChildTop();      delta=firstTop - mListPadding.top;      if (mFirstPosition != 0) {        delta-=mDividerHeight;      }      if (delta < 0) {        delta=0;      }    } else {      final int lastBottom=getScrollChildBottom();      delta=lastBottom - (getHeight() - mListPadding.bottom);      if (mFirstPosition + childCount < mItemCount) {        delta+=mDividerHeight;      }      if (delta > 0) {        delta=0;      }    }    if (delta != 0) {      tryOffsetChildrenTopAndBottom(-delta);    }  }}  }
class C{  private void showNotification(int id,NotificationCompat.Builder builder){  ((NotificationManager)getContext().getSystemService(Context.NOTIFICATION_SERVICE)).notify(id,builder.build());}  }
class C{  public void ready(){switch (state) {case INITIALIZE:    state=READY;synchronized (this) {    notifyAll();  }break;default :throw new AssertionError("ready is only called when the" + " service is in the INITIALIZE" + " state");}}  }
class C{  public static int calcTextWidth(Paint paint,String demoText){  return (int)paint.measureText(demoText);}  }
class C{  public static String toHexString(int num){  String hexString=Integer.toHexString(num);  LogUtils.debug(String.format("%d to hex string is %s",num,hexString));  return hexString;}  }
class C{  public void notifyHorizontalEdgeReached(int startX,int finalX,int overX){  mScrollerX.notifyEdgeReached(startX,finalX,overX);}  }
class C{  public static Map<String,Object> capturePaymentsByInvoice(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  GenericValue userLogin=(GenericValue)context.get("userLogin");  String invoiceId=(String)context.get("invoiceId");  Locale locale=(Locale)context.get("locale");  GenericValue invoice=null;  try {    invoice=EntityQuery.use(delegator).from("Invoice").where("invoiceId",invoiceId).queryOne();  } catch (  GenericEntityException e) {    Debug.logError(e,"Trouble looking up Invoice #" + invoiceId,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingInvoiceNotFound",UtilMisc.toMap("invoiceId",invoiceId),locale));  }  if (invoice == null) {    Debug.logError("Could not locate invoice #" + invoiceId,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingInvoiceNotFound",UtilMisc.toMap("invoiceId",invoiceId),locale));  }  List<GenericValue> orderItemBillings=null;  try {    orderItemBillings=invoice.getRelated("OrderItemBilling",null,null,false);  } catch (  GenericEntityException e) {    Debug.logError("Trouble getting OrderItemBilling(s) from Invoice #" + invoiceId,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingProblemLookingUpOrderItemBilling",UtilMisc.toMap("billFields",invoiceId),locale));  }  String billingAccountId=invoice.getString("billingAccountId");  String testOrderId=null;  boolean allSameOrder=true;  if (orderItemBillings != null) {    Iterator<GenericValue> oii=orderItemBillings.iterator();    while (oii.hasNext()) {      GenericValue oib=oii.next();      String orderId=oib.getString("orderId");      if (testOrderId == null) {        testOrderId=orderId;      } else {        if (!orderId.equals(testOrderId)) {          allSameOrder=false;          break;        }      }    }  }  if (testOrderId == null || !allSameOrder) {    Debug.logWarning("Attempt to settle Invoice #" + invoiceId + " which contained none/multiple orders",module);    return ServiceUtil.returnFailure(UtilProperties.getMessage(resource,"AccountingInvoiceCannotBeSettle",UtilMisc.toMap("invoiceId",invoiceId),locale));  }  BigDecimal invoiceTotal=InvoiceWorker.getInvoiceNotApplied(invoice);  if (Debug.infoOn())   Debug.logInfo("(Capture) Invoice [#" + invoiceId + "] total: "+ invoiceTotal,module);  Map<String,Object> serviceContext=UtilMisc.toMap("userLogin",userLogin,"orderId",testOrderId,"invoiceId",invoiceId,"captureAmount",invoiceTotal);  if (UtilValidate.isNotEmpty(billingAccountId)) {    serviceContext.put("billingAccountId",billingAccountId);  }  try {    return dispatcher.runSync("captureOrderPayments",serviceContext);  } catch (  GenericServiceException e) {    Debug.logError(e,"Trouble running captureOrderPayments service",module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingPaymentCannotBeCaptured",locale));  }}  }
class C{  public PhotosEditQuery latitude(Float value){  return unsafeParam("latitude",value);}  }
class C{  @Override public void onSuccess(AirMapFlight response){  if (response != null) {    flightId=response.getFlightId();    options.setUserName(flightId);    AirMapLog.v("TrafficService",options.toString());    AirMapLog.i("TrafficService","Got flight with id: " + flightId);    AirMapLog.i("TrafficService","Connecting to MQTT server");    try {      client.connect(options,ConnectionState.Connecting,actionListener);    } catch (    MqttException e) {      onDisconnect(false);    }  }}  }
class C{  private static boolean isInVerticalTargetZone(float x,float y,float handleX,float handleYStart,float handleYEnd,float targetRadius){  if (Math.abs(x - handleX) <= targetRadius && y > handleYStart && y < handleYEnd) {    return true;  }  return false;}  }
class C{  private int measureWidth(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=getPaddingLeft() + getPaddingRight() + (count * mLineWidth)+ ((count - 1) * mGapWidth);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)FloatMath.ceil(result);}  }
class C{  @Override public boolean isNullMeasureValue(int ordinal){  return isNullMeasureValue(ordinal,currentRow);}  }
class C{  public static final int binarySearch(Object[] a,Object key){  int x1=0;  int x2=a.length;  int i=x2 / 2, c;  while (x1 < x2) {    c=((Comparable)a[i]).compareTo(key);    if (c == 0) {      return i;    } else     if (c < 0) {      x1=i + 1;    } else {      x2=i;    }    i=x1 + (x2 - x1) / 2;  }  return -1 * (i + 1);}  }
class C{  private byte[] entityToBytes(HttpEntity entity) throws IOException, ServerError {  PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength());  byte[] buffer=null;  try {    InputStream in=entity.getContent();    if (in == null) {      throw new ServerError();    }    buffer=mPool.getBuf(1024);    int count;    while ((count=in.read(buffer)) != -1) {      bytes.write(buffer,0,count);    }    return bytes.toByteArray();  }  finally {    try {      entity.consumeContent();    } catch (    IOException e) {      VolleyLog.v("Error occured when calling consumingContent");    }    mPool.returnBuf(buffer);    bytes.close();  }}  }
class C{  @Override protected void writeClassDescriptor(ObjectStreamClass desc) throws IOException {  int i=_context.getObjectStreamClassKey(desc);  boolean newClass=false;  if (i == 0 || !_optimize) {    newClass=true;    if (_optimize) {      i=_nextClassId++;      _context.putObjectStreamClassKey(desc,i);    } else {      i=-1;    }  }  writeInt(i);  if (newClass) {    super.writeClassDescriptor(desc);  }}  }
class C{  public PagesSaveQuery(VkApiClient client,UserActor actor){  super(client,"pages.save",Integer.class);  accessToken(actor.getAccessToken());}  }
class C{  private static String wavefrontLine(DateTime ts,SimpleGroupPath group,MetricName metric,String value,String source,Map<String,String> tag_map){  return new StringBuilder().append(name(group,metric)).append(' ').append(value).append(' ').append(timestamp(ts)).append(' ').append("source=").append(source).append(' ').append(tag_map.entrySet().stream().map(null).collect(Collectors.joining(" "))).toString();}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.camera);  CameraManager.init(getApplication());  viewfinderView=(ViewfinderView)findViewById(R.id.viewfinder_view);  cancelScanButton=(Button)this.findViewById(R.id.btn_cancel_scan);  hasSurface=false;  inactivityTimer=new InactivityTimer(this);}  }
class C{  public void populateAll() throws GeneralException {  if (this.requestInfoMap.event != null && this.requestInfoMap.event.type != null && (this.requestInfoMap.event.type.indexOf("service") >= 0)) {    String serviceName=this.requestInfoMap.event.invoke;    this.serviceCalledByRequestEvent=this.aif.getServiceArtifactInfo(serviceName);    if (this.serviceCalledByRequestEvent != null) {      UtilMisc.addToSortedSetInMap(this,aif.allRequestInfosReferringToServiceName,this.serviceCalledByRequestEvent.getUniqueId());    }  }  Map<String,ConfigXMLReader.RequestResponse> requestResponseMap=UtilGenerics.checkMap(this.requestInfoMap.requestResponseMap);  for (  ConfigXMLReader.RequestResponse response : requestResponseMap.values()) {    if ("view".equals(response.type)) {      String viewUri=response.value;      if (viewUri.startsWith("/")) {        viewUri=viewUri.substring(1);      }      try {        ControllerViewArtifactInfo artInfo=this.aif.getControllerViewArtifactInfo(controllerXmlUrl,viewUri);        this.viewsThatAreResponsesToThisRequest.add(artInfo);        UtilMisc.addToSortedSetInMap(this,this.aif.allRequestInfosReferringToView,artInfo.getUniqueId());      } catch (      GeneralException e) {        Debug.logWarning(e.toString(),module);      }    } else     if (response.type.equals("request")) {      String otherRequestUri=response.value;      if (otherRequestUri.startsWith("/")) {        otherRequestUri=otherRequestUri.substring(1);      }      try {        ControllerRequestArtifactInfo artInfo=this.aif.getControllerRequestArtifactInfo(controllerXmlUrl,otherRequestUri);        this.requestsThatAreResponsesToThisRequest.add(artInfo);        UtilMisc.addToSortedSetInMap(this,this.aif.allRequestInfosReferringToRequest,artInfo.getUniqueId());      } catch (      GeneralException e) {        Debug.logWarning(e.toString(),module);      }    } else     if (response.type.equals("request-redirect")) {      String otherRequestUri=response.value;      ControllerRequestArtifactInfo artInfo=this.aif.getControllerRequestArtifactInfo(controllerXmlUrl,otherRequestUri);      this.requestsThatAreResponsesToThisRequest.add(artInfo);      UtilMisc.addToSortedSetInMap(this,this.aif.allRequestInfosReferringToRequest,artInfo.getUniqueId());    } else     if (response.type.equals("request-redirect-noparam")) {      String otherRequestUri=response.value;      ControllerRequestArtifactInfo artInfo=this.aif.getControllerRequestArtifactInfo(controllerXmlUrl,otherRequestUri);      this.requestsThatAreResponsesToThisRequest.add(artInfo);      UtilMisc.addToSortedSetInMap(this,this.aif.allRequestInfosReferringToRequest,artInfo.getUniqueId());    }  }}  }
class C{  public static double[][] computeCovariance(final double[][] x,final double[][] y,final boolean biasCorrected){  final int rowsX=x.length;  final int colsX=x[0].length;  final int rowsY=y.length;  final int colsY=y[0].length;  final double[][] cov=new double[colsX][colsY];  System.err.println("rowsCov: " + colsX + " colsCov: "+ colsY);  final double[] meanColX=new double[colsX];  for (int colX=0; colX < colsX; colX++) {    double mean=0;    for (    double[] row : x) {      mean+=row[colX];    }    meanColX[colX]=mean / rowsX;  }  final double[] meanColY=new double[colsY];  for (int colY=0; colY < colsY; colY++) {    double mean=0;    for (    double[] row : y) {      mean+=row[colY];    }    meanColY[colY]=mean / rowsY;  }  for (int colX=0; colX < colsX; colX++) {    for (int colY=0; colY < colsY; colY++) {      double result=0;      for (int row=0; row < rowsX; row++) {        final double xDev=x[row][colX] - meanColX[colX];        final double yDev=y[row][colY] - meanColY[colY];        result+=(xDev * yDev - result) / (row + 1);      }      cov[colX][colY]=biasCorrected ? result * ((double)rowsX / (double)(rowsX - 1)) : result;    }  }  return cov;}  }
class C{  public static void recordOmniboxNavigation(String destinationUrl,int transitionType){  if ((transitionType & PageTransition.CORE_MASK) == PageTransition.GENERATED) {    recordAction(ACTION_SEARCHED_USING_OMNIBOX);  } else {    if (UrlUtilities.nativeIsGoogleHomePageUrl(destinationUrl)) {      recordAction(ACTION_NAVIGATED_TO_GOOGLE_HOMEPAGE);    } else {      recordAction(ACTION_NAVIGATED_USING_OMNIBOX);    }    recordExplicitUserNavigation(destinationUrl,RAPPOR_ACTION_NAVIGATED_USING_OMNIBOX);  }}  }
class C{  public boolean hasNestedSubReport(){  return nestedSubReport != null;}  }
class C{  public static IOFileFilter magicNumberFileFilter(String magicNumber,long offset){  return new MagicNumberFileFilter(magicNumber,offset);}  }
class C{  protected void showModels(Iterable<EpoxyModel<?>> models){  showModels(models,true);}  }
class C{  private static void paintShadow(Graphics2D g,ColorSet colorSet,ConnectionDrawing drawing){  Color pre=g.getColor();  Stroke s=g.getStroke();  if (colorSet.getStyle() == WidgetDecorator.BLUEPRINT_STYLE) {    g.setPaint(colorSet.getBackgroundPaint());    g.setStroke(sLineShadowStroke);  } else {    g.setColor(colorSet.getShadow());    g.setStroke(colorSet.getShadowStroke());  }  drawing.draw(g);  g.setColor(pre);  g.setStroke(s);}  }
class C{  public static void write(CharSequence data,Writer output) throws IOException {  if (data != null) {    write(data.toString(),output);  }}  }
class C{  public static QrCodeResult fromJson(String json) throws JsonParseException, JsonMappingException, IOException {  ObjectMapper mapper=new ObjectMapper();  return mapper.readValue(json,QrCodeResult.class);}  }
class C{  static <T>AnyVal<T> lit(T matchValue){  return new AnyVal<T>(matchValue,false,false){  };}  }
class C{  public Builder displayBottomNavigation(boolean displayBottomNavigationBar){  this.displayBottomNavigation=displayBottomNavigationBar;  return this;}  }
class C{  public void close(){  currentPage.close();}  }
class C{  private LRMIMethod(IMethod realMethod,boolean isOneWay,boolean isCallBack,boolean isAsync,boolean useStubCache,boolean livenessPriority,boolean monitoringPriority,boolean isCustomTracking,int orderId,boolean supported){  this.realMethod=realMethod;  this.isOneWay=isOneWay;  this.isCallBack=isCallBack;  this.useStubCache=useStubCache;  this.isCustomTracking=isCustomTracking;  this.orderId=orderId;  this.isAsync=isAsync;  this.supported=supported;  this.isLivenessPriority=livenessPriority;  this.isMonitoringPriority=monitoringPriority;  this.methodTypes=this.realMethod == null ? null : this.realMethod.getParameterTypes();  this.realMethodString=LRMIUtilities.getMethodDisplayString(this.realMethod);}  }
class C{  public static void forkResourceFile(@NotNull final XmlFile xmlFile,@Nullable String myNewFolder,boolean open){  VirtualFile file=xmlFile.getVirtualFile();  if (file == null) {    return;  }  Module module=AndroidPsiUtils.getModuleSafely(xmlFile);  if (module == null) {    return;  }  ResourceFolderType folderType=ResourceHelper.getFolderType(xmlFile);  if (folderType == null || folderType == ResourceFolderType.VALUES) {    return;  }  Configuration configuration=null;  AndroidFacet facet=AndroidFacet.getInstance(module);  if (facet != null) {    configuration=facet.getConfigurationManager().getConfiguration(file);  }  forkResourceFile(module.getProject(),folderType,file,xmlFile,myNewFolder,configuration,open);}  }
class C{  public static RbacAuthorizationDetails parseRbacDetails(final String encodedDetails) throws IOException {  if (encodedDetails == null) {    logger.error(new Error("parseRbacDetails(): RbacAuthorizationDetails == null!").toString());    throw new IOException("Not able to fetch RbacAuthorizationDetails.");  }  String[] splitedDetails=encodedDetails.replace(" ","").split(",\\s*");  RbacAuthorizationDetails authDetails=null;  if (splitedDetails.length != 3) {    logger.error(new Error("parseRbacDetails(): error splitting details!:" + encodedDetails).toString());    throw new IOException("Not able to fetch RbacAuthorizationDetails.");  } else {    authDetails=new RbacAuthorizationDetails();    authDetails.setRbacClass(splitedDetails[0]);    authDetails.setRbacDevice(splitedDetails[1]);    authDetails.setRbacProperty(splitedDetails[2]);  }  return authDetails;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_DICE_RESULT_EX_OTHER(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1390194,value0,value1);}  }
class C{  public CriteriaHibernateSpaceDataSourceConfigurer performOrderById(boolean performOrderById){  this.performOrderById=performOrderById;  return this;}  }
class C{  public void startHarness() throws InterruptedException {  this.start();  this.join(startTimeout);  if (isAlive()) {    StringBuilder sb=new StringBuilder("Timeout starting Jersey\n");    for (    StackTraceElement ste : this.getStackTrace()) {      sb.append("\tat ").append(ste).append('\n');    }    this.interrupt();    this.join(10000);    if (!isAlive()) {      try {        harness.tearDown();      } catch (      Exception e) {        throw new IllegalStateException(sb.toString(),e);      }    }    throw new IllegalStateException(sb.toString(),cause);  }  if (cause != null) {    throw new IllegalStateException(cause);  }}  }
class C{  public void clearIndicators(){  mWidgetMotion.getSnapCandidates().clear();  mWidgetMotion.getSimilarMargins().clear();}  }
class C{  public void showButtons(){  mAlert.showButtons();}  }
class C{  public String tableName(){  return tblName;}  }
class C{  public static StringBuffer readContent(File file,Map<String[],String> replaceMap) throws IOException {  StringBuffer content=new StringBuffer();  BufferedReader reader=new BufferedReader(new InputStreamReader(new FileInputStream(file),ENCODING_UTF8));  String line=null;  String currentEndString=null;  try {    while ((line=reader.readLine()) != null) {      if (currentEndString != null) {        if (line.contains(currentEndString)) {          currentEndString=null;        }        continue;      }      if (replaceMap != null) {        for (        Entry<String[],String> entry : replaceMap.entrySet()) {          if (line.contains(entry.getKey()[0])) {            currentEndString=(entry.getKey()[1] != null && !line.contains(entry.getKey()[1])) ? entry.getKey()[1] : null;            line=entry.getValue();            break;          }        }      }      content.append(line + LINE_BREAK);    }  }  finally {    try {      reader.close();    } catch (    Exception ex) {    }  }  return content;}  }
class C{  public StorageGetQuery(VkApiClient client,UserActor actor){  super(client,"storage.get",String.class);  accessToken(actor.getAccessToken());}  }
class C{  private FieldRotation<T> composeInternal(final Rotation r){  return new FieldRotation<T>(q0.multiply(r.getQ0()).subtract(q1.multiply(r.getQ1()).add(q2.multiply(r.getQ2())).add(q3.multiply(r.getQ3()))),q0.multiply(r.getQ1()).add(q1.multiply(r.getQ0())).add(q3.multiply(r.getQ2()).subtract(q2.multiply(r.getQ3()))),q0.multiply(r.getQ2()).add(q2.multiply(r.getQ0())).add(q1.multiply(r.getQ3()).subtract(q3.multiply(r.getQ1()))),q0.multiply(r.getQ3()).add(q3.multiply(r.getQ0())).add(q2.multiply(r.getQ1()).subtract(q1.multiply(r.getQ2()))),false);}  }
class C{  public static void storePlayer(Player player){  DAOManager.getDAO(PlayerDAO.class).storePlayer(player);  DAOManager.getDAO(PlayerSkillListDAO.class).storeSkills(player);  DAOManager.getDAO(PlayerSettingsDAO.class).saveSettings(player);  DAOManager.getDAO(PlayerQuestListDAO.class).store(player);  DAOManager.getDAO(AbyssRankDAO.class).storeAbyssRank(player);  DAOManager.getDAO(PlayerPunishmentsDAO.class).storePlayerPunishments(player,PunishmentType.PRISON);  DAOManager.getDAO(PlayerPunishmentsDAO.class).storePlayerPunishments(player,PunishmentType.GATHER);  DAOManager.getDAO(InventoryDAO.class).store(player);  for (  House house : player.getHouses()) {    DAOManager.getDAO(HousesDAO.class).storeHouse(house);    if (house.getRegistry() != null && house.getRegistry().getPersistentState() == PersistentState.UPDATE_REQUIRED) {      DAOManager.getDAO(PlayerRegisteredItemsDAO.class).store(house.getRegistry(),player.getCommonData().getPlayerObjId());    }  }  DAOManager.getDAO(ItemStoneListDAO.class).save(player);  DAOManager.getDAO(MailDAO.class).storeMailbox(player);  DAOManager.getDAO(PortalCooldownsDAO.class).storePortalCooldowns(player);  DAOManager.getDAO(CraftCooldownsDAO.class).storeCraftCooldowns(player);  DAOManager.getDAO(PlayerNpcFactionsDAO.class).storeNpcFactions(player);}  }
class C{  public void toggle(boolean animate){  toggle(animate,fadeIn,fadeOut);}  }
class C{  @JsonIgnore public boolean isTimeDeadbandEnabled(){  return this.timeDeadband > 0;}  }
class C{  public WriteModifiers(WriteModifiers modifiers1,WriteModifiers modifiers2){  super(modifiers1,modifiers2);}  }
class C{  public boolean filterOut(final SAMRecord record){  if (include) {    if (record.getSupplementaryAlignmentFlag()) {      return false;    }  } else {    if (!record.getSupplementaryAlignmentFlag()) {      return false;    }  }  return true;}  }
class C{  private void convertAndFillByteBufferListToByteArrayList(List<byte[]> dictionaryValues,List<ByteBuffer> dictionaryValueBufferList){  for (  ByteBuffer buffer : dictionaryValueBufferList) {    int length=buffer.limit();    byte[] value=new byte[length];    buffer.get(value,0,value.length);    dictionaryValues.add(value);  }}  }
class C{  @Override public boolean onScale(ScaleGestureDetector detector){  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FIELDABYSS_DARKBOSS_KILLED(String value1,String value0){  return new SM_SYSTEM_MESSAGE(1400323,value1,value0);}  }
class C{  public Polygon2D(){  xpoints=new float[4];  ypoints=new float[4];}  }
class C{  @Override public boolean isDeprecated(){  return proto.getOptions().getDeprecated();}  }
class C{  private synchronized final void fallAsleep() throws InterruptedException {  wait(_period);}  }
class C{  protected void prepareAndPopulateTableView(){  prepareTableView();  Attribute attr;  int bucket;  for (int i=0; i < fLength; ++i) {    attr=fAttributes[i];    bucket=getTableViewBucket(attr.name.rawname);    if (fAttributeTableViewChainState[bucket] != fLargeCount) {      fAttributeTableViewChainState[bucket]=fLargeCount;      attr.next=null;      fAttributeTableView[bucket]=attr;    } else {      attr.next=fAttributeTableView[bucket];      fAttributeTableView[bucket]=attr;    }  }}  }
class C{  private void readObjectNoData() throws InvalidObjectException {  throw new InvalidObjectException("no data");}  }
class C{  public String provideQualifier(){  return "unknown";}  }
class C{  public void addAdditionalPartyRole(String partyId,String roleTypeId){  List<String> parties=additionalPartyRole.get(roleTypeId);  if (parties != null) {    for (    String pi : parties) {      if (pi.equals(partyId)) {        return;      }    }  } else {    parties=new LinkedList<String>();    additionalPartyRole.put(roleTypeId,parties);  }  parties.add(0,partyId);}  }
class C{  public void start(){  getTimer(SELF).start();}  }
class C{  @VisibleForTesting BigInteger initialToken(int size,int position,int offset){  Preconditions.checkArgument(size > 0,"size must be > 0");  Preconditions.checkArgument(offset >= 0,"offset must be >= 0");  Preconditions.checkArgument(position >= 0,"position must be >= 0");  return MAXIMUM_TOKEN.divide(BigInteger.valueOf(size)).multiply(BigInteger.valueOf(position)).add(BigInteger.valueOf(offset)).mod(MAXIMUM_TOKEN);}  }
class C{  public JsonObjectRequest(int method,String url,JSONObject jsonRequest,Listener<JSONObject> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ArrayTypeAccess fullCopy(){  ArrayTypeAccess tree=(ArrayTypeAccess)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public CustomSwitchPreference(Context context,AttributeSet attrs){  super(context,attrs);}  }
class C{  public void onFileChange(final File file){}  }
class C{  public static TagConfig fromJson(final String json){  return GsonFactory.createGson().fromJson(json,TagConfig.class);}  }
class C{  public boolean constFolding(){  return constFolding;}  }
class C{  private void attachReaderToCatalog(Catalog catalog){  SAXParserFactory spf=new SAXParserFactoryImpl();  spf.setNamespaceAware(true);  spf.setValidating(false);  SAXCatalogReader saxReader=new SAXCatalogReader(spf);  saxReader.setCatalogParser(OASISXMLCatalogReader.namespaceName,"catalog","org.apache.xml.resolver.readers.OASISXMLCatalogReader");  catalog.addReader("application/xml",saxReader);}  }
class C{  protected boolean removeCascadedRow(int row){  boolean rv=super.removeRow(row);  if (rv)   ((CascadedRowManager)m_rows).remove(row);  return rv;}  }
class C{  public static float calculateTop(float left,float right,float bottom,float targetAspectRatio){  final float width=right - left;  final float top=bottom - (width / targetAspectRatio);  return top;}  }
class C{  public void unFlushNew(){  newSet.addAll(oldSet,null);  oldSet=G.v().oldSetFactory.newSet(type,pag);}  }
class C{  void ensureOpen() throws IllegalStateException {  if (m_closed) {    throw new IllegalStateException("Forbidden call on a closed session.");  }}  }
class C{  public DiffMovingAverage(final int windowSize){  diffs=new long[windowSize];}  }
class C{  @JsOverlay public static <O>O $(O jsPlainObj,Object... fieldValues){  String fieldName=null;  for (  Object f : fieldValues) {    if (fieldName == null)     fieldName=(String)f; else {      if (f instanceof Integer)       JsHelper.setObjectProperty(jsPlainObj,fieldName,((Integer)f).intValue()); else       JsHelper.setObjectProperty(jsPlainObj,fieldName,f);      fieldName=null;    }  }  return jsPlainObj;}  }
class C{  public void init$Children(){}  }
class C{  @Override public void seekTo(int msec) throws IllegalStateException {  Log.d(SBMP_TAG,"seekTo(" + msec + ")");  if (pmInterface == null) {    if (!ConnectPlayMediaService()) {      ServiceBackedMediaPlayer.this.error(MediaPlayer.MEDIA_ERROR_UNKNOWN,0);    }  }  try {    pmInterface.seekTo(ServiceBackedMediaPlayer.this.sessionId,msec);  } catch (  RemoteException e) {    e.printStackTrace();    ServiceBackedMediaPlayer.this.error(MediaPlayer.MEDIA_ERROR_UNKNOWN,0);  }}  }
class C{  private void checkInit(){  if (!mInitialized)   throw new IllegalStateException("Scoop needs to be initialized first!");}  }
class C{  protected void parseURL(URL url,String spec,int start,int limit){  if (start < limit && spec.charAt(start) == ',') {    String query=url.getQuery();    int queryStart=spec.indexOf('?',start);    if (queryStart != -1) {      query=spec.substring(queryStart + 1,limit);      limit=queryStart;    }    String path=url.getPath() == null ? "" : url.getPath();    int param=path.lastIndexOf(';');    if (param != -1) {      int comment=path.indexOf(',',param);      if (comment != -1) {        path=path.substring(0,comment);      }    }    path+=spec.substring(start,limit);    setURL(url,url.getProtocol(),url.getHost(),url.getPort(),url.getAuthority(),url.getUserInfo(),path,query,url.getRef());  } else {    super.parseURL(url,spec,start,limit);  }  String path=url.getPath() == null ? "" : url.getPath();  int semiIndex=path.lastIndexOf(';');  if (semiIndex < 0) {    throw new IllegalArgumentException("Message digest parameter is missing");  }  int equalsIndex=path.indexOf('=',semiIndex);  if (equalsIndex < 0) {    throw new IllegalArgumentException("Message digest parameter is missing a '='");  }  String algorithm=path.substring(semiIndex + 1,equalsIndex);  try {    MessageDigest.getInstance(algorithm);  } catch (  NoSuchAlgorithmException e) {    throw new IllegalArgumentException("Message digest parameter algorithm is not found: " + algorithm);  }  String digest=path.substring(equalsIndex + 1);  int comment=digest.indexOf(',');  if (comment != -1) {    for (int i=digest.length(); --i > comment; ) {      char c=digest.charAt(i);      if (!HttpmdUtil.commentChar(c)) {        throw new IllegalArgumentException("Comment contains illegal character: '" + c + "'");      }    }    digest=digest.substring(0,comment);  }  int length=digest.length();  if (length == 0) {    throw new IllegalArgumentException("Message digest parameter digest is empty");  }  for (int i=length; --i >= 0; ) {    char c=digest.charAt(i);    if (Character.digit(c,16) < 0) {      throw new IllegalArgumentException("Message digest parameter has invalid hex character: " + c);    }  }}  }
class C{  public void add(Long o){}  }
class C{  private static URL[] pathToURLs(String path) throws MalformedURLException {synchronized (pathToURLsCache) {    Object[] v=(Object[])pathToURLsCache.get(path);    if (v != null) {      return (URL[])v[0];    }  }  StringTokenizer st=new StringTokenizer(path);  URL[] urls=new URL[st.countTokens()];  for (int i=0; st.hasMoreTokens(); i++) {    urls[i]=new URL(st.nextToken());  }synchronized (pathToURLsCache) {    pathToURLsCache.put(path,new Object[]{urls,new SoftReference(path)});  }  return urls;}  }
class C{  public static boolean is2G(Context context){  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo activeNetInfo=connectivityManager.getActiveNetworkInfo();  if (activeNetInfo != null && (activeNetInfo.getSubtype() == TelephonyManager.NETWORK_TYPE_EDGE || activeNetInfo.getSubtype() == TelephonyManager.NETWORK_TYPE_GPRS || activeNetInfo.getSubtype() == TelephonyManager.NETWORK_TYPE_CDMA)) {    return true;  }  return false;}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public static StorableTimeFence inThursdayInterval(TimeZone timeZone,long startTimeOfDayMillis,long stopTimeOfDayMillis){  return new StorableTimeFence(THURSDAY,timeZone,startTimeOfDayMillis,stopTimeOfDayMillis);}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public EconomyConcurrentHashMap(IHashEntryHandler<K,V> handler){  this(DEFAULT_INITIAL_CAPACITY,DEFAULT_LOAD_FACTOR,DEFAULT_CONCURRENCY_LEVEL,handler);}  }
class C{  @TargetApi(11) public void moveViewToAnimated(float xIndex,float yValue,AxisDependency axis,long duration){  if (android.os.Build.VERSION.SDK_INT >= 11) {    PointD bounds=getValuesByTouchPoint(mViewPortHandler.contentLeft(),mViewPortHandler.contentTop(),axis);    float valsInView=getDeltaY(axis) / mViewPortHandler.getScaleY();    Runnable job=new AnimatedMoveViewJob(mViewPortHandler,xIndex,yValue + valsInView / 2f,getTransformer(axis),this,(float)bounds.x,(float)bounds.y,duration);    addViewportJob(job);  } else {    Log.e(LOG_TAG,"Unable to execute moveViewToAnimated(...) on API level < 11");  }}  }
class C{  private Integer findBasicRow(final int col){  Integer row=null;  for (int i=0; i < getHeight(); i++) {    final double entry=getEntry(i,col);    if (Precision.equals(entry,1d,maxUlps) && (row == null)) {      row=i;    } else     if (!Precision.equals(entry,0d,maxUlps)) {      return null;    }  }  return row;}  }
class C{  private void validateMemberName(String memberName) throws ClusterConfigurationException {  if (memberName.indexOf(":") == -1) {    String commandLine="\"-Xbootclasspath/p:%XML_JARS%\"";    if (!System.getProperty("file.separator").equals("\\"))     commandLine="\"-Xbootclasspath/p:${XML_JARS}\"";    throw new ClusterConfigurationException("The used JDK 1.4.x default Xalan implementation, does not support proper xsl transformations.\n" + " Please use the Xalan package located under <GigaSpaces Root Directory>/lib/xml" + "\n and add the following to the Java command line: "+ commandLine);  }}  }
class C{  @Override public void endDocument(Augmentations augs) throws XNIException {}  }
class C{  private int[] blackWhiteRange(int fixedDimension,int maxWhiteRun,int minDim,int maxDim,boolean horizontal){  int center=(minDim + maxDim) / 2;  int start=center;  while (start >= minDim) {    if (horizontal ? image.get(start,fixedDimension) : image.get(fixedDimension,start)) {      start--;    } else {      int whiteRunStart=start;      do {        start--;      } while (start >= minDim && !(horizontal ? image.get(start,fixedDimension) : image.get(fixedDimension,start)));      int whiteRunSize=whiteRunStart - start;      if (start < minDim || whiteRunSize > maxWhiteRun) {        start=whiteRunStart;        break;      }    }  }  start++;  int end=center;  while (end < maxDim) {    if (horizontal ? image.get(end,fixedDimension) : image.get(fixedDimension,end)) {      end++;    } else {      int whiteRunStart=end;      do {        end++;      } while (end < maxDim && !(horizontal ? image.get(end,fixedDimension) : image.get(fixedDimension,end)));      int whiteRunSize=end - whiteRunStart;      if (end >= maxDim || whiteRunSize > maxWhiteRun) {        end=whiteRunStart;        break;      }    }  }  end--;  return end > start ? new int[]{start,end} : null;}  }
class C{  public static <T>IStoredList<T> createConcurrentList(int numOfSegments){  return new ConcurrentSegmentedStoredList<T>(numOfSegments);}  }
class C{  public static Jump handle(EntityLivingBase entity,float motion){  Jump event=new Jump(entity,motion);  OpenModLoader.getEventBus().post(event);  return event;}  }
class C{  public Builder flushIntervalMs(int flushIntervalMs){  this._flushIntervalMicros=TimeUnit.MILLISECONDS.toMicros(flushIntervalMs);  return this;}  }
class C{  DataSink createDataSink(Processor p,MediaLocator outML) throws NotRealizedError, NoDataSinkException, IOException {  DataSource ds;  if ((ds=p.getDataOutput()) == null) {    throw new RuntimeException("Processor does not have an output DataSource");  }  DataSink dsink;  dsink=Manager.createDataSink(ds,outML);  dsink.open();  return dsink;}  }
class C{  public Builder diskCacheExtraOptions(int maxImageWidthForDiskCache,int maxImageHeightForDiskCache,BitmapProcessor processorForDiskCache){  this.maxImageWidthForDiskCache=maxImageWidthForDiskCache;  this.maxImageHeightForDiskCache=maxImageHeightForDiskCache;  this.processorForDiskCache=processorForDiskCache;  return this;}  }
class C{  public static Boolean booleanValueIndicator(Object value){  if (value == null || value instanceof Boolean) {    return (Boolean)value;  } else   if ("Y".equals(value)) {    return Boolean.TRUE;  } else   if ("N".equals(value)) {    return Boolean.FALSE;  } else {    return null;  }}  }
class C{  @Override @Transactional TMTextUnitVariant importTextUnit(Long tmTextUnitId,TextContainer target){  TMTextUnitVariant importTextUnit=super.importTextUnit(tmTextUnitId,target);  translationKitService.markTranslationKitTextUnitAsImported(translationKit,importTextUnit);  return importTextUnit;}  }
class C{  private void doPostConfigurationOfEquipmentControlTags(){  for (  Long key : getKeys()) {    doPostDbLoading(get(key));  }}  }
class C{  public int compareTo(cp_info constant_pool[],cp_info cp,cp_info cp_constant_pool[]){  int i;  if (tag != cp.tag)   return tag - cp.tag;  CONSTANT_Fieldref_info cu=(CONSTANT_Fieldref_info)cp;  i=constant_pool[class_index].compareTo(constant_pool,cp_constant_pool[cu.class_index],cp_constant_pool);  if (i != 0)   return i;  return constant_pool[name_and_type_index].compareTo(constant_pool,cp_constant_pool[cu.name_and_type_index],cp_constant_pool);}  }
class C{  TransientRegistrarImpl(String[] configArgs,LifeCycle lifeCycle) throws Exception {  super(configArgs,null,false,lifeCycle);}  }
class C{  public Paillier(BigInteger p,BigInteger q,int bitLength){  this.bitLength=bitLength;  int primeCertainty=SystemConfiguration.getIntProperty("pir.primeCertainty",128);  BigInteger three=BigInteger.valueOf(3);  if ((p.compareTo(three) < 0) || (q.compareTo(three) < 0) || p.equals(q)|| !p.isProbablePrime(primeCertainty)|| !q.isProbablePrime(primeCertainty)) {    throw new IllegalArgumentException("p = " + p + " q = "+ q+ " do not satisfy primality constraints");  }  this.p=p;  this.q=q;  this.N=p.multiply(q);  setDerivativeElements();  logger.info("Parameters = " + parametersToString());}  }
class C{  private static boolean isAssignableFrom(Class c1,Class c2){  if (c1.isAssignableFrom(c2))   return true;  String n1=c1.getName();  for (Class sup=c2; sup != null; sup=sup.getSuperclass()) {    if (n1.equals(sup.getName()))     return true;  }  return false;}  }
class C{  public ServerKey(final InputStream certificateStream) throws InvalidKeystoreException {  try {    this.trustStore=keystoreOf(certificateStream);    certificateStream.close();  } catch (  final CertificateException e) {    throw new InvalidKeystoreException(e);  }catch (  final NoSuchAlgorithmException e) {    throw new InvalidKeystoreException(e);  }catch (  final KeyStoreException e) {    throw new InvalidKeystoreException(e);  }catch (  final IOException e) {    throw new InvalidKeystoreException(e);  } finally {    IOUtils.closeQuietly(certificateStream);  }}  }
class C{  public FractionFormat(final NumberFormat numeratorFormat,final NumberFormat denominatorFormat){  super(numeratorFormat,denominatorFormat);}  }
class C{  public static final int find(int[] a,int key,int length){  for (int i=0; i < length; i++) {    if (a[i] == key) {      return i;    }  }  return -1;}  }
class C{  public static long toNewEditRate(BigInteger eu,BigFraction oldUnitsInSec,BigFraction newUnitsInSec){  BigFraction editUnits=new BigFraction(eu);  return editUnits.divide(oldUnitsInSec).multiply(newUnitsInSec).longValue();}  }
class C{  public boolean canSaveViewsFor(DataSource dataSource,Class<? extends Snapshot> snapshotClass){  Set<DataSourceViewProvider> compatibleProviders=getCompatibleProviders(dataSource);  if (compatibleProviders.isEmpty())   return false;  for (  DataSourceViewProvider compatibleProvider : compatibleProviders)   if (APP_OVERVIEW_CLASS_workaround.equals(compatibleProvider.getClass().getName()))   return true;  for (  DataSourceViewProvider compatibleProvider : compatibleProviders)   if (compatibleProvider.supportsViewFor(dataSource) && compatibleProvider.supportsSaveViewFor(dataSource,snapshotClass))   return true;  return false;}  }
class C{  @SuppressWarnings("unchecked") public final boolean hasNext(){  if (q[index] == null)   return false;  if (index == q.length - 1) {    q=(E[])q[index];    index=0;    if (q[index] == null)     return false;  }  return true;}  }
class C{  public void clearDiskCache(){  checkConfiguration();  configuration.diskCache.clear();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_QUEST_ACQUIRE_ERROR_NATION_PT(int num0){  return new SM_SYSTEM_MESSAGE(1300587,num0);}  }
class C{  public boolean isEmpty(){  return map.isEmpty();}  }
class C{  public static final Scheduler sharedInstance(){  return INSTANCE;}  }
class C{  public static short readShort(){  return scanner.nextShort();}  }
class C{  public static int parseInt(byte[] bytes,int start,int length){  int end=start + length;  int negMul=-1;  int i=start;  if (length > 0) {    char c=(char)bytes[i];    if (c == '-') {      negMul=1;      i++;    } else     if (c == '+') {      i++;    }  } else {    throw new NumberFormatException("cannot convert empty string to int");  }  int result=0;  for (; i < end; i++) {    char c=(char)bytes[i];    int digit=c - '0';    if (digit >= 10 || digit < 0) {      throw newNumberFormatException("invalid integer representation",bytes,start,length);    }    int newResult=result * 10 - digit;    if (newResult > result) {      throw newNumberFormatException("overflow",bytes,start,length);    }    result=newResult;  }  if ((result == 0) && ((char)bytes[i - 1] != '0')) {    throw newNumberFormatException("invalid integer representation",bytes,start,length);  }  if ((result == Integer.MIN_VALUE) && negMul == 1) {    throw newNumberFormatException("overflow",bytes,start,length);  }  return negMul * result;}  }
class C{  public int diff_levenshtein(List<Diff> diffs){  int levenshtein=0;  int insertions=0;  int deletions=0;  for (  Diff aDiff : diffs) {switch (aDiff.operation) {case INSERT:      insertions+=aDiff.text.length();    break;case DELETE:  deletions+=aDiff.text.length();break;case EQUAL:levenshtein+=Math.max(insertions,deletions);insertions=0;deletions=0;break;}}levenshtein+=Math.max(insertions,deletions);return levenshtein;}  }
class C{  public void putSampleLabel(String sampleName,String label){  put(sampleName,SampleAttributeTable.HiddenAttribute.Label,label);}  }
class C{  public static <T extends RealFieldElement<T>>FieldVector3D<T> crossProduct(final Vector3D v1,final FieldVector3D<T> v2){  return new FieldVector3D<T>(v2.x.linearCombination(v1.getY(),v2.z,-v1.getZ(),v2.y),v2.y.linearCombination(v1.getZ(),v2.x,-v1.getX(),v2.z),v2.z.linearCombination(v1.getX(),v2.y,-v1.getY(),v2.x));}  }
class C{  public DynamicTemplateParameterContext appendParameter(String paramName,String paramValue,boolean deleteOnExit,boolean useWhitespace,ContextInfo contextInfo){  paramName=parameterResolver.resolveTemplateParameter(paramName,contextInfo);  paramValue=parameterResolver.resolveTemplateParameter(paramValue,contextInfo);  if (!params.containsKey(paramName)) {    params.put(paramName,new CustomParameterValue(paramValue,deleteOnExit));  } else {    String separator=useWhitespace ? " " : "";    paramValue=params.get(paramName).getValue() + separator + paramValue;    params.put(paramName,new CustomParameterValue(paramValue,deleteOnExit));  }  return this;}  }
class C{  public void addEmojiconGroup(EaseEmojiconGroupEntity groupEntity){  emojiconGroupList.add(groupEntity);  pagerView.addEmojiconGroup(groupEntity,true);  tabBar.addTab(groupEntity.getIcon());}  }
class C{  protected void configurePipeline(){  if (fDTDValidator != null) {    fScanner.setDocumentHandler(fDTDValidator);    if (fFeatures.get(NAMESPACES) == Boolean.TRUE) {      fDTDValidator.setDocumentHandler(fNamespaceBinder);      fDTDValidator.setDocumentSource(fScanner);      fNamespaceBinder.setDocumentHandler(fDocumentHandler);      fNamespaceBinder.setDocumentSource(fDTDValidator);      fLastComponent=fNamespaceBinder;    } else {      fDTDValidator.setDocumentHandler(fDocumentHandler);      fDTDValidator.setDocumentSource(fScanner);      fLastComponent=fDTDValidator;    }  } else {    if (fFeatures.get(NAMESPACES) == Boolean.TRUE) {      fScanner.setDocumentHandler(fNamespaceBinder);      fNamespaceBinder.setDocumentHandler(fDocumentHandler);      fNamespaceBinder.setDocumentSource(fScanner);      fLastComponent=fNamespaceBinder;    } else {      fScanner.setDocumentHandler(fDocumentHandler);      fLastComponent=fScanner;    }  }  configureDTDPipeline();}  }
class C{  public LeadsStartQuery(VkApiClient client,int leadId,String secret){  super(client,"leads.start",Start.class);  leadId(leadId);  secret(secret);}  }
class C{  @Override public void printStackTrace(java.io.PrintStream s){  if (getCause() != null) {    getCause().printStackTrace(s);    s.println("--------------- linked to ------------------");  }  super.printStackTrace(s);}  }
class C{  private void hackSegmentDurations(List<Element> elements){  assert elements != null;  float cumulEndInSeconds=0;  for (  Element segment : elements) {    float durationInSeconds=Float.parseFloat(segment.getAttribute("d"));    cumulEndInSeconds+=durationInSeconds;    String endStr=Float.toString(cumulEndInSeconds);    segment.setAttribute("end",endStr);    String durationInMilliseconds=String.format("%.0f",(durationInSeconds * 1000));    segment.setAttribute("d",durationInMilliseconds);  }}  }
class C{  private void unwatchScreen(){  windowManager.removeView(touchView);  touchViewParams=null;  touchView=null;  screenScanHandler.removeCallbacks(screenScanRunnable);  screenScanRunnable=null;  screenScanHandler=null;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ABYSS_REPAIR_BROKEN(String value1,String value0){  return new SM_SYSTEM_MESSAGE(1301054,value1,value0);}  }
class C{  public SaveHttpResponse(final SaveProtocolVersion ver,final int code,final String reason){  this(new SaveStatusLine(ver,code,reason),null,null);}  }
class C{  protected static final String addEscapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  public GSTopicSessionImpl(GSConnectionImpl connection,boolean transacted,int acknowledgeMode) throws JMSException {  super(connection,transacted,acknowledgeMode);}  }
class C{  public long backgroundColor(){  return mBackgroundColor;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelBuffCounterATK_A_TO_SELF(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200814,skillcaster,num0,skillname);}  }
class C{  void findAndSetCompatibleConfig(boolean favorCurrentConfig){  List<Locale> localeList=getPrioritizedLocales();  List<Device> deviceList=myManager.getDevices();  FolderConfiguration editedConfig=myConfiguration.getEditedConfig();  FolderConfiguration currentConfig=myConfiguration.getFullConfig();  List<ConfigMatch> anyMatches=new ArrayList<ConfigMatch>();  List<ConfigMatch> bestMatches=new ArrayList<ConfigMatch>();  int localeHostMatch=getLocaleMatch();  List<ConfigBundle> configBundles=new ArrayList<ConfigBundle>(200);  int start, max;  if (editedConfig.getLocaleQualifier() != null || localeHostMatch == -1) {    start=0;    max=localeList.size();  } else {    start=localeHostMatch;    max=localeHostMatch + 1;  }  for (int i=start; i < max; i++) {    Locale l=localeList.get(i);    ConfigBundle bundle=new ConfigBundle();    bundle.config.setLocaleQualifier(l.qualifier);    bundle.localeIndex=i;    configBundles.add(bundle);  }  addDockModeToBundles(configBundles);  addNightModeToBundles(configBundles);  addRenderTargetToBundles(configBundles);  Locale currentLocale=myConfiguration.getLocale();  IAndroidTarget currentTarget=myConfiguration.getTarget();  Module module=myConfiguration.getModule();  for (  Device device : deviceList) {    for (    State state : device.getAllStates()) {      FolderConfiguration stateConfig=Configuration.getFolderConfig(module,state,currentLocale,currentTarget);      for (      ConfigBundle bundle : configBundles) {        FolderConfiguration testConfig=new FolderConfiguration();        testConfig.set(stateConfig);        testConfig.add(bundle.config);        if (editedConfig.isMatchFor(testConfig)) {          anyMatches.add(new ConfigMatch(testConfig,device,state,bundle));          if (isCurrentFileBestMatchFor(testConfig)) {            bestMatches.add(new ConfigMatch(testConfig,device,state,bundle));          }        }      }    }  }  if (bestMatches.size() == 0) {    if (favorCurrentConfig) {      if (!editedConfig.isMatchFor(currentConfig)) {        LOG.warn("favorCurrentConfig can only be true if the current config is compatible");      }      LOG.warn(String.format("'%1$s' is not a best match for any device/locale combination for %2$s.\n" + "Displaying it with '%3$s'.",editedConfig.toDisplayString(),myConfiguration.getFile(),currentConfig.toDisplayString()));    } else     if (anyMatches.size() > 0) {      ConfigMatch match=selectConfigMatch(anyMatches);      myConfiguration.startBulkEditing();      myConfiguration.setEffectiveDevice(match.device,match.state);      myConfiguration.setUiMode(UiMode.getByIndex(match.bundle.dockModeIndex));      myConfiguration.setNightMode(NightMode.getByIndex(match.bundle.nightModeIndex));      myConfiguration.finishBulkEditing();      LOG.warn(String.format("'%1$s' is not a best match for any device/locale combination for %2$s.\n" + "Displaying it with\n" + "  %3$s\n"+ "which is compatible, but will actually be displayed with "+ "another more specific version of the layout.",editedConfig.toDisplayString(),myConfiguration.getFile(),currentConfig.toDisplayString()));    } else {    }  } else {    ConfigMatch match=selectConfigMatch(bestMatches);    myConfiguration.startBulkEditing();    myConfiguration.setEffectiveDevice(match.device,match.state);    myConfiguration.setUiMode(UiMode.getByIndex(match.bundle.dockModeIndex));    myConfiguration.setNightMode(NightMode.getByIndex(match.bundle.nightModeIndex));    myConfiguration.finishBulkEditing();  }}  }
class C{  protected boolean isLastStep(){  return isLastStep;}  }
class C{  public boolean cs_demand(){  return soot.PhaseOptions.getBoolean(options,"cs-demand");}  }
class C{  public boolean isProcessed(){  return processed;}  }
class C{  public ValidFilterVisitor(FilterFactory2 factory){  super(factory);}  }
class C{  public ByteColumn(){  this(0,10,(byte)0);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostSkillCost_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200639,skillcaster,skillname);}  }
class C{  private void validateClaimedTaskHasStarted(ClaimedTask claimedTask){  if (claimedTask.unclaimIfNotStarted()) {    _log.warn("Claimed task has not started since it was scheduled at {}; unclaiming task: {}",claimedTask.getClaimTime(),claimedTask.getTask());    unclaimTask(claimedTask,false);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DPTransfer_A_TO_SELF(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200818,skillcaster,num0,skillname);}  }
class C{  public static void dismissIncognitoNotification(){  Context context=ApplicationStatus.getApplicationContext();  NotificationManager nm=(NotificationManager)context.getSystemService(Context.NOTIFICATION_SERVICE);  nm.cancel(INCOGNITO_TABS_OPEN_TAG,INCOGNITO_TABS_OPEN_ID);}  }
class C{  protected VideoRemoveFromAlbumQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  @Override public String toString(){  final String separator=", ";  final String suffix=System.getProperty("line.separator");  StringBuilder outBuffer=new StringBuilder();  outBuffer.append("MultivariateSummaryStatistics:" + suffix);  outBuffer.append("n: " + getN() + suffix);  append(outBuffer,getMin(),"min: ",separator,suffix);  append(outBuffer,getMax(),"max: ",separator,suffix);  append(outBuffer,getMean(),"mean: ",separator,suffix);  append(outBuffer,getGeometricMean(),"geometric mean: ",separator,suffix);  append(outBuffer,getSumSq(),"sum of squares: ",separator,suffix);  append(outBuffer,getSumLog(),"sum of logarithms: ",separator,suffix);  append(outBuffer,getStandardDeviation(),"standard deviation: ",separator,suffix);  outBuffer.append("covariance: " + getCovariance().toString() + suffix);  return outBuffer.toString();}  }
class C{  public DirectedGraph(){}  }
class C{  public static int readVInt(byte[] bytes,int start) throws IOException {  return WritableComparator.readVInt(bytes,start);}  }
class C{  protected boolean updateSelection(IStructuredSelection selection){  this.selection=selection;  ISVNRepositoryLocation[] roots=getSelectedRemoteRoots();  return roots.length > 0;}  }
class C{  public void validate(List<ValidationException> exceptionList){  final boolean runAllValidators=Options.v().debug() || Options.v().validate();  for (  ClassValidator validator : getValidators()) {    if (!validator.isBasicValidator() && !runAllValidators)     continue;    validator.validate(this,exceptionList);  }}  }
class C{  public static <T>void unpublishService(ProviderConfig<T> providerConfig) throws RpcException {  try {    ServicePublisher.unpublishService(providerConfig);  } catch (  RegistryException e) {    throw new RpcException("error while unpublishing service:" + providerConfig,e);  }}  }
class C{  private void writeDomainAssignment(Document document,Element rootElement){  Element domainAssignment=document.createElement("domainassignment");  rootElement.appendChild(domainAssignment);  for (  SourceSinkDomPair spec : this.document.getDomainAssignment())   writeSourceSinkDomPair(spec,document,domainAssignment);}  }
class C{  static private void calculateAtx(int n,double[] d,double[] p){  int index=0;  for (int i=0; i < n - 1; i++) {    p[index]=rowsum(n,d,i + 1);    index+=(n - i - 1);  }  index=1;  for (int i=0; i < n - 2; i++) {    p[index]=p[index - 1] + p[index + (n - i - 2)] - 2 * d[index + (n - i - 2)];    index+=(n - i - 2) + 1;  }  for (int k=3; k <= n - 1; k++) {    index=k - 1;    for (int i=0; i <= n - k - 1; i++) {      p[index]=p[index - 1] + p[index + n - i - 2] - p[index + n - i - 3] - 2.0 * d[index + n - i - 2];      index+=(n - i - 2) + 1;    }  }}  }
class C{  private void singcheck(){  int pos;  for (int i=0; i < nvars; i++) {    work_sing[i]=FastMath.sqrt(d[i]);  }  for (int col=0; col < nvars; col++) {    final double temp=tol[col];    pos=col - 1;    for (int row=0; row < col - 1; row++) {      if (FastMath.abs(r[pos]) * work_sing[row] < temp) {        r[pos]=0.0;      }      pos+=nvars - row - 2;    }    lindep[col]=false;    if (work_sing[col] < temp) {      lindep[col]=true;      if (col < nvars - 1) {        Arrays.fill(x_sing,0.0);        int _pi=col * (nvars + nvars - col - 1) / 2;        for (int _xi=col + 1; _xi < nvars; _xi++, _pi++) {          x_sing[_xi]=r[_pi];          r[_pi]=0.0;        }        final double y=rhs[col];        final double weight=d[col];        d[col]=0.0;        rhs[col]=0.0;        this.include(x_sing,weight,y);      } else {        sserr+=d[col] * rhs[col] * rhs[col];      }    }  }}  }
class C{  private boolean hasSupportLibraryInClasspath(){  try {    Class.forName("com.android.support:appcompat-v7");    return true;  } catch (  ClassNotFoundException ex) {    ex.printStackTrace();  }  return false;}  }
class C{  public int countFilteredLines(List<String> codeLines){  return codeLines.stream().map(null).filter(null).toArray().length;}  }
class C{  static public void closeAllDatabase(){  Log.i(tag,"closeAllDatabase");  if (mInstance != null) {    for (int i=0; i < mInstance.databases.size(); ++i) {      if (mInstance.databases.get(i) != null) {        mInstance.databases.get(i).close();      }    }    mInstance.databases.clear();  }}  }
class C{  public void onContextChanged(Context context){  mNormalHelper.onContextChanged(context);  mIncognitoHelper.onContextChanged(context);}  }
class C{  public RequestHandle put(Context context,String url,HttpEntity entity,String contentType,ResponseHandlerInterface responseHandler){  return sendRequest(httpClient,httpContext,addEntityToRequestBase(new HttpPut(url),entity),contentType,responseHandler,context);}  }
class C{  public void removeCertChainListener(CertChainListener listener){  certChainListeners.remove(listener);}  }
class C{  public static String formatPrice(BigDecimal price){  if (price == null)   return "";  return priceDecimalFormat.format(price);}  }
class C{  public int toIntBits(){  int color=((int)(255 * a) << 24) | ((int)(255 * b) << 16) | ((int)(255 * g) << 8)| ((int)(255 * r));  return color;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FACTION_FREINDSHIP(String value0){  return new SM_SYSTEM_MESSAGE(1300522,value0);}  }
class C{  protected void initFailed(Throwable e) throws Exception {  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.entering(TxnManagerImpl.class.getName(),"initFailed");  }  if (initLogger.isLoggable(Level.SEVERE)) {    initLogger.log(Level.SEVERE,"Mahalo failed to initialize",e);  }  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.exiting(TxnManagerImpl.class.getName(),"initFailed");  }  if (e instanceof Exception) {    throw (Exception)e;  } else   if (e instanceof Error) {    throw (Error)e;  } else {    IllegalStateException ise=new IllegalStateException(e.getMessage());    ise.initCause(e);    throw ise;  }}  }
class C{  public LocalVarTableAttr(){  vars=new Vector();}  }
class C{  public Builder addColumnInteger(String name){  return addColumn(new IntegerMetaData(name));}  }
class C{  public Builder subdomains(String[] subdomains){  this.subdomains=subdomains;  return this;}  }
class C{  HttpmdURLConnection(URL url) throws IOException, MalformedURLException {  super(url);  String path=url.getPath() == null ? "" : url.getPath();  int semiIndex=path.lastIndexOf(';');  if (semiIndex < 0) {    throw new MalformedURLException("Message digest parameter is missing");  }  int equalsIndex=path.indexOf('=',semiIndex);  if (equalsIndex < 0) {    throw new MalformedURLException("Message digest parameter is missing a '='");  }  algorithm=path.substring(semiIndex + 1,equalsIndex);  try {    MessageDigest.getInstance(algorithm);  } catch (  NoSuchAlgorithmException e) {    MalformedURLException t=new MalformedURLException("Message digest parameter algorithm is not found: " + algorithm);    t.initCause(e);    throw t;  }  String digest=path.substring(equalsIndex + 1);  int comment=digest.indexOf(',');  if (comment >= 0) {    for (int i=digest.length(); --i > comment; ) {      char c=digest.charAt(i);      if (!HttpmdUtil.commentChar(c)) {        throw new MalformedURLException("Comment contains illegal character: '" + c + "'");      }    }    digest=digest.substring(0,comment);  }  int length=digest.length();  if (length == 0) {    throw new MalformedURLException("Message digest parameter digest is empty");  }  try {    expectedDigest=HttpmdUtil.stringDigest(digest);  } catch (  NumberFormatException e) {    MalformedURLException t=new MalformedURLException("Message digest parameter has invalid format for digest: " + digest);    t.initCause(e);    throw t;  }  try {    content=new URL("http",url.getHost(),url.getPort(),path.substring(0,semiIndex) + (url.getQuery() == null ? "" : url.getQuery()) + (url.getRef() == null ? "" : url.getRef()));  } catch (  MalformedURLException e) {    MalformedURLException t=new MalformedURLException("Problem with content location");    t.initCause(e);    throw t;  }  delegateConnection=(HttpURLConnection)content.openConnection();}  }
class C{  public static void e(String tag,String s,Throwable e){  if (LOG.ERROR >= LOGLEVEL)   Log.e(tag,s,e);}  }
class C{  public static org.apache.carbondata.format.DataType fromWrapperToExternalDataType(DataType dataType){  if (null == dataType) {    return null;  }switch (dataType) {case STRING:    return org.apache.carbondata.format.DataType.STRING;case INT:  return org.apache.carbondata.format.DataType.INT;case LONG:return org.apache.carbondata.format.DataType.LONG;case DOUBLE:return org.apache.carbondata.format.DataType.DOUBLE;case DECIMAL:return org.apache.carbondata.format.DataType.DECIMAL;case TIMESTAMP:return org.apache.carbondata.format.DataType.TIMESTAMP;case ARRAY:return org.apache.carbondata.format.DataType.ARRAY;case STRUCT:return org.apache.carbondata.format.DataType.STRUCT;default :return org.apache.carbondata.format.DataType.STRING;}}  }
class C{  public static Object bytesToObject(byte[] bytes) throws IOException, ClassNotFoundException {  ByteArrayInputStream inStream=new ByteArrayInputStream(bytes);  ObjectInputStream in=new ContextClassLoaderObjectInputStream(inStream);  Object data=in.readObject();  in.close();  return data;}  }
class C{  protected void notifyDataInvalidatedEvent(){  if (datasetObservers != null) {    for (    DataSetObserver observer : datasetObservers) {      observer.onInvalidated();    }  }}  }
class C{  boolean isAncestor(String class1,String class2){  if (class1.equals(this.classesRootName) || class1.equals(class2)) {    return true;  }  List<String> ancestors=this.getAncestorsMap().get(class2);  if (null == ancestors) {    return class1.equals(this.classesRootName);  }  return ancestors.contains(class1);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ABYSS_CHANGE_RANK_THIS_WEEK(String value0){  return new SM_SYSTEM_MESSAGE(1390235,value0);}  }
class C{  @Override public byte[] asBytes(int rowNumber){  return ByteBuffer.allocate(8).putLong(get(rowNumber)).array();}  }
class C{  public static List<String> readFileToList(String filePath,String charsetName){  File file=new File(filePath);  List<String> fileContent=new ArrayList<String>();  if (file == null || !file.isFile()) {    return null;  }  BufferedReader reader=null;  try {    InputStreamReader is=new InputStreamReader(new FileInputStream(file),charsetName);    reader=new BufferedReader(is);    String line=null;    while ((line=reader.readLine()) != null) {      fileContent.add(line);    }    return fileContent;  } catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    IOUtil.close(reader);  }}  }
class C{  public void changeFragmentShader(String fragmentShader){  if (fragmentShader == null) {    fragmentShader=FRAGMENT_SHADER;  }  GLES20.glDeleteProgram(mProgram);  mProgram=createProgram(VERTEX_SHADER,fragmentShader);  if (mProgram == 0) {    throw new RuntimeException("failed creating program");  }}  }
class C{  @Override public boolean isId(){  return isIdAttribute();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_TOYPET_CANT_RETURN_ITEM_MULTI(int num1,String value0s){  return new SM_SYSTEM_MESSAGE(1400715,num1,value0s);}  }
class C{  public Socket connect() throws IOException {  Socket sock=new Socket();  sock.setReuseAddress(true);  sock.setSoTimeout(ClientGlobal.g_network_timeout);  sock.connect(new InetSocketAddress(this.ip_addr,this.port),ClientGlobal.g_connect_timeout);  return sock;}  }
class C{  private void handleSelection(String selection,SelectionType type){  mShouldHandleSelectionModification=true;  mHandler.handleSelection(selection,isValidSelection(selection),type,mX,mY);}  }
class C{  private void removeTouch(MotionEvent event){  final int action=event.getAction();  final int pointerIndex=getPointerIndex(action);  final int pointerId=event.getPointerId(pointerIndex);  Point oldPoint=mTouches.get(pointerId);  if (oldPoint != null) {    mTouches.remove(pointerId);    invalidateFromTouch(oldPoint.y,oldPoint.y);  }  if (action == MotionEvent.ACTION_UP) {    mActivePointerId=INVALID_POINTER_ID;  } else {    if (pointerId == mActivePointerId) {      final int newPointerIndex=(pointerIndex == 0) ? 1 : 0;      mActivePointerId=event.getPointerId(newPointerIndex);    }  }}  }
class C{  public static String encodeBytes(byte[] source){  String encoded=null;  try {    encoded=encodeBytes(source,0,source.length,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  private void cleanup(){  Iterator<Entry<Byte,Nonce>> iter=table.entrySet().iterator();  while (iter.hasNext()) {    Nonce nonce=iter.next().getValue();    if (nonce.getTimer() != null && nonce.getTimer().isExpired()) {      logger.warn("NODE {}: Expiring nonce with id={}",node.getNodeId(),nonce.getNonceId());      iter.remove();      byte nonceId=nonce.getNonceId();      Iterator<Map.Entry<Long,Nonce>> iter2=timeToNonceMap.entrySet().iterator();      while (iter2.hasNext()) {        Map.Entry<Long,Nonce> entry=iter2.next();        if (nonceId == entry.getValue().getNonceId()) {          iter2.remove();        }      }    }  }}  }
class C{  public MarketAddQuery photoIds(Integer... value){  return unsafeParam("photo_ids",value);}  }
class C{  public static void removeAllTrafficListeners(){  getAirMapTrafficService().removeAllListeners();}  }
class C{  public boolean isValueOnly(){  return valueOnly;}  }
class C{  GSMessageImpl duplicate() throws JMSException {  GSObjectMessageImpl dup=new GSObjectMessageImpl();  copyTo(dup);  return dup;}  }
class C{  public boolean isDeletedByOwnTxn(){  return e.isDeletedByOwnTxn();}  }
class C{  public void addComment(String comment){  int index=getCommentIndex(comment);  if (index != -1) {    makeFirstElement(index);    return;  }  if (containsCommentTemplate(comment))   return;  String[] newComments=new String[Math.min(previousComments.length + 1,maxComments)];  newComments[0]=comment;  for (int i=1; i < newComments.length; i++) {    newComments[i]=previousComments[i - 1];  }  previousComments=newComments;}  }
class C{  private void definePackage(String sClassName,JarEntryInfo inf) throws IllegalArgumentException {  int pos=sClassName.lastIndexOf('.');  String sPackageName=pos > 0 ? sClassName.substring(0,pos) : "";  if (getPackage(sPackageName) == null) {    JarFileInfo jfi=inf.jarFileInfo;    definePackage(sPackageName,jfi.getSpecificationTitle(),jfi.getSpecificationVersion(),jfi.getSpecificationVendor(),jfi.getImplementationTitle(),jfi.getImplementationVersion(),jfi.getImplementationVendor(),jfi.getSealURL());  }}  }
class C{  private void updateSymbol(){  if (!Controller.getInstance().isPopulating()) {    if (parentObj != null) {      parentObj.externalGraphicValueUpdated();    }  }}  }
class C{  public Param(String name,String desc,Type type){  this(name,desc,type,null);}  }
class C{  public static ShoppingCartItem makePurchaseOrderItem(Integer cartLocation,String productId,BigDecimal selectedAmount,BigDecimal quantity,Map<String,GenericValue> additionalProductFeatureAndAppls,Map<String,Object> attributes,String prodCatalogId,ProductConfigWrapper configWrapper,String itemType,ShoppingCart.ShoppingCartItemGroup itemGroup,LocalDispatcher dispatcher,ShoppingCart cart,GenericValue supplierProduct,Timestamp shipBeforeDate,Timestamp shipAfterDate,Timestamp cancelBackOrderDate) throws CartItemModifyException, ItemNotFoundException {  Delegator delegator=cart.getDelegator();  GenericValue product=null;  try {    product=EntityQuery.use(delegator).from("Product").where("productId",productId).cache().queryOne();  } catch (  GenericEntityException e) {    Debug.logWarning(e.toString(),module);  }  if (product == null) {    Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("productId",productId);    String excMsg=UtilProperties.getMessage(resource_error,"item.product_not_found",messageMap,cart.getLocale());    Debug.logWarning(excMsg,module);    throw new ItemNotFoundException(excMsg);  }  ShoppingCartItem newItem=new ShoppingCartItem(product,additionalProductFeatureAndAppls,attributes,prodCatalogId,configWrapper,cart.getLocale(),itemType,itemGroup,null);  if ("Y".equals(product.getString("isVirtual"))) {    Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("productName",product.getString("productName"),"productId",product.getString("productId"));    String excMsg=UtilProperties.getMessage(resource_error,"item.cannot_add_product_virtual",messageMap,cart.getLocale());    Debug.logWarning(excMsg,module);    throw new CartItemModifyException(excMsg);  }  if ("AGGREGATED".equals(product.getString("productTypeId")) || "AGGREGATED_SERVICE".equals(product.getString("productTypeId"))) {    if (configWrapper == null || !configWrapper.isCompleted()) {      Map<String,Object> messageMap=UtilMisc.<String,Object>toMap("productName",product.getString("productName"),"productId",product.getString("productId"));      String excMsg=UtilProperties.getMessage(resource_error,"item.cannot_add_product_not_configured_correctly",messageMap,cart.getLocale());      Debug.logWarning(excMsg,module);      throw new CartItemModifyException(excMsg);    }  }  if (cartLocation == null) {    cart.addItemToEnd(newItem);  } else {    cart.addItem(cartLocation.intValue(),newItem);  }  if (selectedAmount != null) {    newItem.setSelectedAmount(selectedAmount);  }  newItem.setShipBeforeDate(shipBeforeDate != null ? shipBeforeDate : cart.getDefaultShipBeforeDate());  newItem.setShipAfterDate(shipAfterDate != null ? shipAfterDate : cart.getDefaultShipAfterDate());  newItem.setCancelBackOrderDate(cancelBackOrderDate != null ? cancelBackOrderDate : cart.getCancelBackOrderDate());  try {    newItem.setQuantity(quantity,dispatcher,cart,true,false);    cart.setItemShipGroupQty(newItem,quantity,0);  } catch (  CartItemModifyException e) {    cart.removeCartItem(cart.getItemIndex(newItem),dispatcher);    cart.clearItemShipInfo(newItem);    cart.removeEmptyCartItems();    throw e;  }  if (supplierProduct != null) {    newItem.setSupplierProductId(supplierProduct.getString("supplierProductId"));    newItem.setName(getPurchaseOrderItemDescription(product,supplierProduct,cart.getLocale()));    newItem.setBasePrice(supplierProduct.getBigDecimal("lastPrice"));  } else {    newItem.setName(product.getString("internalName"));  }  return newItem;}  }
class C{  private void fillBuf() throws IOException {  int result=in.read(buf,0,buf.length);  if (result == -1) {    throw new EOFException();  }  pos=0;  end=result;}  }
class C{  public int modify_file(String group_name,String appender_filename,long file_offset,long modify_size,UploadCallback callback) throws IOException, MyException {  return this.do_modify_file(group_name,appender_filename,file_offset,modify_size,callback);}  }
class C{  public static boolean calculateFallDamage(Player player,float distance,boolean stoped){  if (player.isInvul()) {    return false;  }  if (distance >= FallDamageConfig.MAXIMUM_DISTANCE_DAMAGE || !stoped) {    player.getController().onStopMove();    player.getFlyController().onStopGliding(false);    player.getLifeStats().reduceHp(player.getLifeStats().getMaxHp() + 1,player);    return true;  } else   if (distance >= FallDamageConfig.MINIMUM_DISTANCE_DAMAGE) {    float dmgPerMeter=player.getLifeStats().getMaxHp() * FallDamageConfig.FALL_DAMAGE_PERCENTAGE / 100f;    int damage=(int)(distance * dmgPerMeter);    player.getLifeStats().reduceHp(damage,player);    PacketSendUtility.sendPacket(player,new SM_ATTACK_STATUS(player,SM_ATTACK_STATUS.TYPE.FALL_DAMAGE,0,-damage));  }  return false;}  }
class C{  public BlockId block(){  internalLock.readLock().lock();  try {    return blk;  }  finally {    internalLock.readLock().unlock();  }}  }
class C{  private void initView(View v){  StatusBarView statusBar=(StatusBarView)v.findViewById(R.id.fragment_category_statusBar);  if (DisplayUtils.isNeedSetStatusBarMask()) {    statusBar.setBackgroundResource(R.color.colorPrimary_light);    statusBar.setMask(true);  }  this.container=(CoordinatorLayout)v.findViewById(R.id.fragment_category_container);  this.appBar=(AppBarLayout)v.findViewById(R.id.fragment_category_appBar);  this.toolbar=(Toolbar)v.findViewById(R.id.fragment_category_toolbar);  toolbar.setTitle(ValueUtils.getToolbarTitleByCategory(getActivity(),categoryManagePresenter.getCategoryId()));  if (Mysplash.getInstance().isLightTheme()) {    toolbar.inflateMenu(R.menu.fragment_category_toolbar_light);    toolbar.setNavigationIcon(R.drawable.ic_toolbar_menu_light);  } else {    toolbar.inflateMenu(R.menu.fragment_category_toolbar_dark);    toolbar.setNavigationIcon(R.drawable.ic_toolbar_menu_dark);  }  toolbar.setOnMenuItemClickListener(this);  toolbar.setNavigationOnClickListener(this);  toolbar.setOnClickListener(this);  this.photosView=(CategoryPhotosView)v.findViewById(R.id.fragment_category_categoryPhotosView);  photosView.setActivity(getActivity());  photosView.setCategory(categoryManagePresenter.getCategoryId());  photosView.initRefresh();}  }
class C{  public LogNormalDistribution(double scale,double shape,double inverseCumAccuracy) throws MathIllegalArgumentException {  super(inverseCumAccuracy);  if (shape <= 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.SHAPE,shape);  }  this.scale=scale;  this.shape=shape;  this.logShapePlusHalfLog2Pi=FastMath.log(shape) + 0.5 * FastMath.log(2 * FastMath.PI);}  }
class C{  public Object clone(){  return this.copy();}  }
class C{  public boolean needParticipantsJoin(){  return true;}  }
class C{  public static final void toString(StringBuffer output,boolean[] tab){  if (tab == null) {    output.append("null");    return;  }  output.append("(");  int size=tab.length;  output.append(size);  if (listMax == -1 || size <= listMax) {    for (int i=0; i < size; i++) {      output.append(",");      output.append(tab[i]);    }  } else {    int border=size / 2;    if (listBorder < border)     border=listBorder;    for (int i=0; i < border; i++) {      output.append(",");      output.append(tab[i]);    }    output.append(",...");    for (int i=border; i > 0; i--) {      output.append(",");      output.append(tab[size - i]);    }  }  output.append(")");}  }
class C{  private AudioInputStream synthesizeVariant(AudioFileFormat aft,Element domElement) throws SynthesisException {  int numberOfBackChannels=unitFileReader.getNumberOfUnits();  int backchannelNumber=0;  if (domElement.hasAttribute("variant")) {    backchannelNumber=Integer.parseInt(domElement.getAttribute("variant"));  }  if (backchannelNumber >= numberOfBackChannels) {    throw new IllegalArgumentException("This voice has " + numberOfBackChannels + " backchannels only. so it doesn't support unit number "+ backchannelNumber);  }  return synthesizeSelectedVocalization(backchannelNumber,aft,domElement);}  }
class C{  protected MessagesGetChatQueryWithChatIdsFields fields(List<UserField> value){  return unsafeParam("fields",value);}  }
class C{  public void run(){  SimilarityArray sa;switch (WeightingMethod) {case summaryGaussNormEvaluator.USE_DISTRO_AVERAGE_AS_WEIGHT:    sa=Caller.calcDistroSimilarityMeasures(CurEntry,CompareAgainst,true,OutStream,Sem,WordNGramSize_Min,WordNGramSize_Max,Word_Dmax,CharacterNGramSize_Min,CharacterNGramSize_Max,Character_Dmax,DoCharNGrams,DoWordNGrams,Silent);  break;case summaryGaussNormEvaluator.USE_OCCURENCES_AS_WEIGHT:sa=Caller.calcSimilarityMeasures(CurEntry,CompareAgainst,true,OutStream,Sem,WordNGramSize_Min,WordNGramSize_Max,Word_Dmax,CharacterNGramSize_Min,CharacterNGramSize_Max,Character_Dmax,DoCharNGrams,DoWordNGrams,Silent);break;default :sa=new SimilarityArray();}}  }
class C{  public VideoSaveQuery privacyComment(List<String> value){  return unsafeParam("privacy_comment",value);}  }
class C{  private static String bytesToHex(byte[] bytes){  final char[] HEX_ARRAY="0123456789ABCDEF".toCharArray();  char[] hex=new char[bytes.length * 2];  for (int index=0; index < bytes.length; index++) {    int value=bytes[index] & 0xFF;    hex[index * 2]=HEX_ARRAY[value >>> 4];    hex[index * 2 + 1]=HEX_ARRAY[value & 0x0F];  }  String result=new String(hex);  return result.replaceAll("(\\w{8})(\\w{4})(\\w{4})(\\w{4})(\\w{12})","$1-$2-$3-$4-$5");}  }
class C{  private static Iterator parse(Class service,URL u,Set returned) throws ServiceConfigurationError {  InputStream in=null;  BufferedReader r=null;  ArrayList names=new ArrayList();  try {    in=u.openStream();    r=new BufferedReader(new InputStreamReader(in,"utf-8"));    int lc=1;    while ((lc=parseLine(service,u,r,lc,names,returned)) >= 0)     ;  } catch (  IOException x) {    fail(service,": " + x);  } finally {    try {      if (r != null)       r.close();      if (in != null)       in.close();    } catch (    IOException y) {      fail(service,": " + y);    }  }  return names.iterator();}  }
class C{  protected int index(T obj){  final TObjectHashingStrategy<T> hashing_strategy=_hashingStrategy;  final Object[] set=_set;  final int length=set.length;  final int hash=hashing_strategy.computeHashCode(obj) & 0x7fffffff;  int index=hash % length;  Object cur=set[index];  if (cur == FREE)   return -1;  if (cur == REMOVED || !hashing_strategy.equals((T)cur,obj)) {    final int probe=1 + (hash % (length - 2));    do {      index-=probe;      if (index < 0) {        index+=length;      }      cur=set[index];    } while (cur != FREE && (cur == REMOVED || !_hashingStrategy.equals((T)cur,obj)));  }  return cur == FREE ? -1 : index;}  }
class C{  public In(URL url){  if (url == null)   throw new NullPointerException("argument is null");  try {    URLConnection site=url.openConnection();    InputStream is=site.getInputStream();    scanner=new Scanner(new BufferedInputStream(is),CHARSET_NAME);    scanner.useLocale(LOCALE);  } catch (  IOException ioe) {    throw new IllegalArgumentException("Could not open " + url);  }}  }
class C{  public synchronized void close(){  for (  Table t : this.tableLookup.values()) {    t.close();  }  this.tableLookup.clear();}  }
class C{  void assignThisToLocal(Local left){  PurityNode node=PurityThisNode.node;  localsRemove(left);  localsPut(left,node);  nodes.add(node);  paramNodes.add(node);  if (doCheck)   sanityCheck();}  }
class C{  public boolean viable(){  return (mWidgetArea + mGapArea) / (float)mGroupArea > .40f;}  }
class C{  @Override public double[] makeLogDensityTestValues(){  return new double[]{Double.NEGATIVE_INFINITY,-4.000000000000d,-2.613705638880d,-1.920558458320d,-1.632876385868d,-1.632876385868d,-1.856019937183d,-5.241468961877d,-18.609729238356d};}  }
class C{  public boolean canSetDouble(){  return canSet(double.class);}  }
class C{  public Grass(Biome biome,int original){  super(biome,original);}  }
class C{  private PathDataEvaluator(){}  }
class C{  @CheckReturnValue public AddCmd add(){  return new AddCmd(false,false,ImmutableSet.of());}  }
class C{  Node(Node<K,V> parent,K key,int hash,Node<K,V> next,Node<K,V> prev){  this.parent=parent;  this.key=key;  this.hash=hash;  this.height=1;  this.next=next;  this.prev=prev;  prev.next=this;  next.prev=this;}  }
class C{  @Override public Tab createNewTab(LoadUrlParams loadUrlParams,TabModel.TabLaunchType type,Tab parent){  return createNewTab(loadUrlParams,type,parent,null);}  }
class C{  public static synchronized boolean isBodyLabeled(){  return bodyLabeled;}  }
class C{  public void increaseValue(TKeyType oXValue,double dYValue){  hDistro.put(oXValue,getValue(oXValue) + dYValue);}  }
class C{  private static void checkMissing(XmlTag tag,Set<XmlTag> remaining,List<XmlTag> missing){  boolean found=remaining.remove(tag);  if (!found) {    missing.add(tag);  }  for (  XmlTag child : tag.getSubTags()) {    checkMissing(child,remaining,missing);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_QUEST_ACQUIRE_ERROR_EQUIP_ITEM(DescriptionId descriptionId){  return new SM_SYSTEM_MESSAGE(1300593,descriptionId);}  }
class C{  public ImageRecordReader(int height,int width,int channels,PathLabelGenerator labelGenerator){  super(height,width,channels,labelGenerator);}  }
class C{  protected AdsGetStatisticsQuery dateTo(String value){  return unsafeParam("date_to",value);}  }
class C{  public static boolean test(String s,Map<String,Object> m) throws Exception {  log.debug("vengine.test ...");  if (X.isEmpty(s)) {    return true;  }  s=M.replaceAll("sss",s).replaceAll("\\{","\\$\\{");  Map<String,Object> b=new HashMap<String,Object>();  m.put("result",b);  try {    execute(s,m);  } catch (  Exception e) {    throw new Exception("expression error, e.g {age}>10",e);  }  m.remove("result");  if (b.containsKey("bool")) {    Object o=b.get("bool");    if (o instanceof Boolean) {      return (Boolean)o;    }    return !X.isEmpty(o);  }  return false;}  }
class C{  protected void at(){  at(true);}  }
class C{  protected void findVisibleObjects(){  if (owner == null || !owner.isSpawned()) {    return;  }  MapRegion[] regions=owner.getActiveRegion().getNeighbours();  for (int i=0; i < regions.length; i++) {    MapRegion r=regions[i];    FastMap<Integer,VisibleObject> objects=r.getObjects();    for (FastMap.Entry<Integer,VisibleObject> e=objects.head(), mapEnd=objects.tail(); (e=e.getNext()) != mapEnd; ) {      VisibleObject newObject=e.getValue();      if (newObject == owner || newObject == null) {        continue;      }      if (!isAwareOf(newObject)) {        continue;      }      if (knownObjects.containsKey(newObject.getObjectId())) {        continue;      }      if (!checkObjectInRange(newObject) && !newObject.getKnownList().checkReversedObjectInRange(owner)) {        continue;      }      if (add(newObject)) {        newObject.getKnownList().add(owner);      }    }  }}  }
class C{  public static Future<LogRecordWithDLSN> asyncReadFirstUserRecord(final String streamName,final LogSegmentMetadata l,final int scanStartBatchSize,final int scanMaxBatchSize,final AtomicInteger numRecordsScanned,final ExecutorService executorService,final LedgerHandleCache handleCache,final DLSN dlsn){  long startEntryId=0L;  if (l.getLogSegmentSequenceNumber() == dlsn.getLogSegmentSequenceNo()) {    startEntryId=dlsn.getEntryId();  }  final LogRecordSelector selector=new FirstDLSNNotLessThanSelector(dlsn);  return asyncReadRecord(streamName,l,false,false,false,scanStartBatchSize,scanMaxBatchSize,numRecordsScanned,executorService,handleCache,selector,false,startEntryId);}  }
class C{  public void onPause(boolean multitasking){}  }
class C{  @Override public void onMessage(AWSIotMessage message){}  }
class C{  public static SM_SYSTEM_MESSAGE STR_EXTEND_INVENTORY_SIZE_EXTENDED(String value0){  return new SM_SYSTEM_MESSAGE(1300431,value0);}  }
class C{  private String buildFunctionCallCode(String functionName,int args){  StringBuilder functionCall=new StringBuilder();  functionCall.append(SCRIPT_METHODS_OBJECT).append(".").append(functionName).append("(");  for (int i=0; i < args; i++) {    if (i > 0) {      functionCall.append(",");    }    functionCall.append("arg").append(i);  }  functionCall.append(")");  return functionCall.toString();}  }
class C{  public static boolean isFloat(String s){  if (isEmpty(s))   return defaultEmptyOK;  boolean seenDecimalPoint=false;  if (s.startsWith(decimalPointDelimiter))   return false;  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);    if (c == decimalPointDelimiter.charAt(0)) {      if (!seenDecimalPoint) {        seenDecimalPoint=true;      } else {        return false;      }    } else {      if (!isDigit(c))       return false;    }  }  return true;}  }
class C{  public XLIFFWriter(){  xliffCont=new XLIFFContent();  params.setIncludeIts(false);}  }
class C{  public KeyAlreadySetException(String message,Throwable cause){  super(message,cause);}  }
class C{  public Vector2f divide(float scalar){  return new Vector2f(x / scalar,y / scalar);}  }
class C{  public static void w(String tag,String msg,Exception e){  if (LOG_ENABLE) {    Log.w(tag,buildMsg(msg),e);  }}  }
class C{  public T walkInDefaultOrder(final FieldVectorChangingVisitor<T> visitor){  final int dim=getDimension();  visitor.start(dim,0,dim - 1);  for (int i=0; i < dim; i++) {    setEntry(i,visitor.visit(i,getEntry(i)));  }  return visitor.end();}  }
class C{  void sendMessages(int num,String topic,Generator message,int throttle){  try (Producer<Object,Object> producer=getAvroProducer(brokers,schemaregistry)){    log.info("Sending " + num / 1000 + "K messages to topic [" + topic + "]");    long startTime=System.nanoTime();    for (int i=0; i < num; i++) {      GenericRecord avroRecord=new GenericData.Record(message.getSchema());      if (message == Generator.TEXT50) {        avroRecord.put("text",randomString(50));      } else       if (message == Generator.TEXT100) {        avroRecord.put("text",randomString(100));      } else       if (message == Generator.AVRO_TYPES) {        avroRecord.put("text",randomString(50));        avroRecord.put("flag",false);        avroRecord.put("integer8",8);        avroRecord.put("integer16",16);        avroRecord.put("integer32",32L);        avroRecord.put("integer64",64L);        avroRecord.put("float32",(float)21.32);        avroRecord.put("float64",21122.321221212121);      } else       if (message == Generator.AVRO_TYPES_UPSERT) {        int ranNumber=random.nextInt(100);        if (ranNumber == 50) {          avroRecord.put("text","PRIMARY-KEY-" + random.nextInt(10));        } else {          avroRecord.put("text",randomString(50));        }        avroRecord.put("flag",true);        avroRecord.put("integer8",8);        avroRecord.put("integer16",16);        avroRecord.put("integer32",32L);        avroRecord.put("integer64",64L);        avroRecord.put("float32",(float)10.01);        avroRecord.put("float64",10000.001);      } else       if (message == Generator.SQL_RESERVED_WORDS) {        String[] reservedList={"SELECT * FROM TABLE1","CREATE AS SELECT FROM","DROP TABLE TABLE1"};        avroRecord.put("as",reservedList[random.nextInt(reservedList.length)]);        avroRecord.put("from",10);      } else       if (message == Generator.EVOLUTION_WIDEN_INITIAL) {        avroRecord.put("text",randomString(50));        avroRecord.put("number1",1000L);        avroRecord.put("number2",(float)1000.0);      } else       if (message == Generator.EVOLUTION_WIDEN_TOLONG) {        avroRecord.put("text",randomString(50));        avroRecord.put("number1",1000L);        avroRecord.put("number2",100000000000.000000000001D);      } else       if (message == Generator.EVOLUTION_INITIAL) {        avroRecord.put("text",randomString(50));      } else       if (message == Generator.EVOLUTION_ADD1) {        avroRecord.put("text",randomString(50));        avroRecord.put("flag",true);      } else       if (message == Generator.EVOLUTION_ADD2) {        avroRecord.put("text",randomString(50));        avroRecord.put("flag",true);        avroRecord.put("number1",100);      } else       if (message == Generator.EVOLUTION_ADD3) {        avroRecord.put("text",randomString(50));        avroRecord.put("flag",true);        avroRecord.put("number1",100);        avroRecord.put("number2",(float)100.001);      }      if (i % 10000 == 0)       System.out.print(" . " + (i / 1000) + "K");      if (throttle > 0 && i % throttle == 0) {        long durationMsec=1000 - (System.nanoTime() - startTime) / 1000000;        log.debug("Sleeping " + durationMsec + " msec due to <throttle> "+ throttle);        Thread.sleep(durationMsec);      }      producer.send(new ProducerRecord<Object,Object>(topic,0,avroRecord));    }    System.out.println();    long endTime=System.nanoTime();    long durationMsec=(endTime - startTime) / 1000000;    log.info("Total time " + (durationMsec / 1000.0) + " sec ");    log.info("Message rate : " + (int)(num / (durationMsec / 1000.0)) + " msg / sec");  } catch (  Throwable throwable) {    throwable.printStackTrace();  }}  }
class C{  public boolean equals(Object obj){  if (obj instanceof EntryRep) {    EntryRep entry=(EntryRep)obj;    if (!eclass.equals(entry.eclass) || fields.length != entry.fields.length)     return false;    for (int i=fields.length; --i >= 0; ) {      if ((fields[i] == null && entry.fields[i] != null) || (fields[i] != null && !fields[i].equals(entry.fields[i])))       return false;    }    return true;  }  return false;}  }
class C{  private static byte[] encode3to4(byte[] b4,byte[] threeBytes,int numSigBytes,int options){  encode3to4(threeBytes,0,numSigBytes,b4,0,options);  return b4;}  }
class C{  private Tuple2<double[],String> probability(LabeledContext context){  String[] fs=context.getFeatureStrings().toLowerCase().split("\\s+");  Set<String> fsset=new HashSet<String>();  for (  String f : fs) {    fsset.add(f);  }  List<Tuple2<Integer,Double>> x=new LinkedList<Tuple2<Integer,Double>>();  for (  String f : fsset) {    Integer i=featureMap.get(f);    if (i != null) {      x.add(new Tuple2<Integer,Double>(i,1.0));    }  }  Vector features=MLUtils.appendBias(Vectors.sparse(featureMap.size(),x));  int numLabels=tags.length;  double[] score=new double[numLabels];  Arrays.fill(score,0d);  int maxLabel=0;  double maxScore=0d;  String word=context.getWord();  Set<Integer> labels=tagDictionary.get(word);  if (labels == null) {    labels=new HashSet<Integer>();    for (int k=1; k < numLabels; k++)     labels.add(k);  }  int d=features.size();  for (  int k : labels) {    if (k > 0) {      for (      int j : features.toSparse().indices())       score[k]+=weights.apply((k - 1) * d + j);      if (score[k] > maxScore) {        maxScore=score[k];        maxLabel=k;      }    }  }  if (maxScore > 0) {    for (int k=0; k < numLabels; k++)     score[k]-=maxScore;  }  double z=0d;  for (int k=0; k < numLabels; k++) {    score[k]=Math.exp(score[k]);    z+=score[k];  }  for (int k=0; k < numLabels; k++) {    score[k]/=z;  }  return new Tuple2<double[],String>(score,tags[maxLabel]);}  }
class C{  @Override public Settings init(String tag){  if (tag == null) {    throw new NullPointerException("tag may not be null");  }  if (tag.trim().length() == 0) {    throw new IllegalStateException("tag may not be empty");  }  this.tag=tag;  this.settings=new Settings();  return settings;}  }
class C{  public boolean hasSuperClassAccess(){  return getSuperClassAccessOpt().getNumChild() != 0;}  }
class C{  public GroupsGetQueryWithExtended userId(Integer value){  return unsafeParam("user_id",value);}  }
class C{  public void write(PacketBuffer buf,T value){  writer.accept(buf,value);}  }
class C{  public String upload_file1(String master_file_id,String prefix_name,byte[] file_buff,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {  String[] parts=new String[2];  this.errno=this.split_file_id(master_file_id,parts);  if (this.errno != 0) {    return null;  }  parts=this.upload_file(parts[0],parts[1],prefix_name,file_buff,file_ext_name,meta_list);  if (parts != null) {    return parts[0] + SPLIT_GROUP_NAME_AND_FILENAME_SEPERATOR + parts[1];  } else {    return null;  }}  }
class C{  public static void updateNodes(PathDataNode[] target,PathDataNode[] source){  for (int i=0; i < source.length; i++) {    target[i].mType=source[i].mType;    for (int j=0; j < source[i].mParams.length; j++) {      target[i].mParams[j]=source[i].mParams[j];    }  }}  }
class C{  public static String join(CharSequence separator,Iterable<String> strings){  StringBuilder sb=new StringBuilder();  boolean first=true;  for (  String s : strings) {    if (first) {      first=false;    } else {      sb.append(separator);    }    sb.append(s);  }  return sb.toString();}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  protected NewsfeedUnignoreItemQuery type(NewsfeedItemType value){  return unsafeParam("type",value);}  }
class C{  public double length(){  return Math.sqrt(NumberConversions.square(x) + NumberConversions.square(y) + NumberConversions.square(z));}  }
class C{  public CheckpointRecord(List<Long> txNums){  this.txNums=txNums;}  }
class C{  private void flushLiteral(List<Elem> elems,StringBuilder sb){  if (sb.length() > 0) {    elems.add(Lit.create(input.location(),Doc.text(sb.toString())));    sb.delete(0,sb.length());  }}  }
class C{  public GroupsGetInvitedUsersQuery(VkApiClient client,UserActor actor,int groupId){  super(client,"groups.getInvitedUsers",GetInvitedUsersResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);}  }
class C{  private EncodedValue buildEncodedValueForAnnotation(AnnotationElem elem){switch (elem.getKind()) {case 'Z':{      if (elem instanceof AnnotationIntElem) {        AnnotationIntElem e=(AnnotationIntElem)elem;        if (e.getValue() == 0) {          return ImmutableBooleanEncodedValue.FALSE_VALUE;        } else         if (e.getValue() == 1) {          return ImmutableBooleanEncodedValue.TRUE_VALUE;        } else {          throw new RuntimeException("error: boolean value from int with value != 0 or 1.");        }      } else       if (elem instanceof AnnotationBooleanElem) {        AnnotationBooleanElem e=(AnnotationBooleanElem)elem;        if (e.getValue())         return ImmutableBooleanEncodedValue.TRUE_VALUE; else         return ImmutableBooleanEncodedValue.FALSE_VALUE;      } else       throw new RuntimeException("Annotation type incompatible with target type boolean");    }case 'S':{    AnnotationIntElem e=(AnnotationIntElem)elem;    return new ImmutableShortEncodedValue((short)e.getValue());  }case 'B':{  AnnotationIntElem e=(AnnotationIntElem)elem;  return new ImmutableByteEncodedValue((byte)e.getValue());}case 'C':{AnnotationIntElem e=(AnnotationIntElem)elem;return new ImmutableCharEncodedValue((char)e.getValue());}case 'I':{AnnotationIntElem e=(AnnotationIntElem)elem;return new ImmutableIntEncodedValue(e.getValue());}case 'J':{AnnotationLongElem e=(AnnotationLongElem)elem;return new ImmutableLongEncodedValue(e.getValue());}case 'F':{AnnotationFloatElem e=(AnnotationFloatElem)elem;return new ImmutableFloatEncodedValue(e.getValue());}case 'D':{AnnotationDoubleElem e=(AnnotationDoubleElem)elem;return new ImmutableDoubleEncodedValue(e.getValue());}case 's':{AnnotationStringElem e=(AnnotationStringElem)elem;return new ImmutableStringEncodedValue(e.getValue());}case 'e':{AnnotationEnumElem e=(AnnotationEnumElem)elem;String classT=SootToDexUtils.getDexClassName(e.getTypeName());String fieldT=classT;FieldReference fref=dexFile.internFieldReference(new ImmutableFieldReference(classT,e.getConstantName(),fieldT));return new ImmutableEnumEncodedValue(fref);}case 'c':{AnnotationClassElem e=(AnnotationClassElem)elem;return new ImmutableTypeEncodedValue(SootToDexUtils.getDexClassName(e.getDesc()));}case '[':{AnnotationArrayElem e=(AnnotationArrayElem)elem;Set<EncodedValue> values=new HashSet<EncodedValue>();for (int i=0; i < e.getNumValues(); i++) {EncodedValue val=buildEncodedValueForAnnotation(e.getValueAt(i));values.add(val);}return new ImmutableArrayEncodedValue(values);}case '@':{AnnotationAnnotationElem e=(AnnotationAnnotationElem)elem;Set<String> alreadyWritten=new HashSet<String>();List<AnnotationElement> elements=null;if (!e.getValue().getElems().isEmpty()) {elements=new ArrayList<AnnotationElement>();for (AnnotationElem ae : e.getValue().getElems()) {if (!alreadyWritten.add(ae.getName())) throw new RuntimeException("Duplicate annotation attribute: " + ae.getName());AnnotationElement element=new ImmutableAnnotationElement(ae.getName(),buildEncodedValueForAnnotation(ae));elements.add(element);}}return new ImmutableAnnotationEncodedValue(SootToDexUtils.getDexClassName(e.getValue().getType()),elements);}case 'f':{AnnotationStringElem e=(AnnotationStringElem)elem;String fSig=e.getValue();String[] sp=fSig.split(" ");String classString=SootToDexUtils.getDexClassName(sp[0].split(":")[0]);if (classString.isEmpty()) throw new RuntimeException("Empty class name in annotation");String typeString=sp[1];if (typeString.isEmpty()) throw new RuntimeException("Empty type string in annotation");String fieldName=sp[2];FieldReference fref=dexFile.internFieldReference(new ImmutableFieldReference(classString,fieldName,typeString));return new ImmutableFieldEncodedValue(fref);}case 'M':{AnnotationStringElem e=(AnnotationStringElem)elem;String[] sp=e.getValue().split(" ");String classString=SootToDexUtils.getDexClassName(sp[0].split(":")[0]);if (classString.isEmpty()) throw new RuntimeException("Empty class name in annotation");String returnType=sp[1];String[] sp2=sp[2].split("\\(");String methodNameString=sp2[0];String parameters=sp2[1].replaceAll("\\)","");List<String> paramTypeList=null;if (!parameters.isEmpty()) {paramTypeList=new ArrayList<String>();if (parameters.length() > 0) for (String p : parameters.split(",")) {paramTypeList.add(p);}}MethodReference mref=dexFile.internMethodReference(new ImmutableMethodReference(classString,methodNameString,paramTypeList,returnType));return new ImmutableMethodEncodedValue(mref);}case 'N':{return ImmutableNullEncodedValue.INSTANCE;}default :throw new RuntimeException("Unknown Elem Attr Kind: " + elem.getKind());}}  }
class C{  public Bundler putBoolean(String key,boolean value){  bundle.putBoolean(key,value);  return this;}  }
class C{  public boolean isCyclic(){  return isCyclic;}  }
class C{  @Override public long skip(long n) throws IOException {  return fInputStream.skip(n);}  }
class C{  public static TileGeomResult createTileGeom(Geometry g,Envelope tileEnvelope,GeometryFactory geomFactory,MvtLayerParams mvtLayerParams,IGeometryFilter filter){  return createTileGeom(flatFeatureList(g),tileEnvelope,geomFactory,mvtLayerParams,filter);}  }
class C{  public void removeColumnListener(ColumnListener listener){  m_listeners.remove(listener);}  }
class C{  public MonsterDamageCursor queryMonsterDamage(long id){  QueryHelper qh=new QueryHelper();  qh.Distinct=false;  qh.Table=S.TABLE_MONSTER_DAMAGE;  qh.Columns=null;  qh.Selection=S.COLUMN_MONSTER_DAMAGE_MONSTER_ID + " = ?";  qh.SelectionArgs=new String[]{String.valueOf(id)};  qh.GroupBy=null;  qh.Having=null;  qh.OrderBy=null;  qh.Limit=null;  return new MonsterDamageCursor(wrapHelper(qh));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_QUEST_ACQUIRE_ERROR_MIN_LEVEL(String value0){  return new SM_SYSTEM_MESSAGE(1300571,value0);}  }
class C{  public VideoSearchQuery longer(Integer value){  return unsafeParam("longer",value);}  }
class C{  public static void remove(long id){  Helper.delete(W.create(X.ID,id),Menu.class);  Beans<Menu> bs=submenu(id);  List<Menu> list=bs.getList();  if (list != null) {    for (    Menu m : list) {      remove(m.getId());    }  }}  }
class C{  public static double distance1(double[] p1,double[] p2){  double sum=0;  for (int i=0; i < p1.length; i++) {    sum+=Math.abs(p1[i] - p2[i]);  }  return sum;}  }
class C{  public PronounceableFSM(int vocabularySize,int[] transitions,boolean scanFromFront){  this.vocabularySize=vocabularySize;  this.transitions=transitions;  this.scanFromFront=scanFromFront;}  }
class C{  public boolean isFinished(){  return mFinished;}  }
class C{  public void tabLoadFinished(int id){  StripLayoutTab tab=findTabById(id);  if (tab != null)   tab.loadingFinished();}  }
class C{  public boolean isDoubleTapToZoomEnabled(){  return mDoubleTapToZoomEnabled;}  }
class C{  public static void main(String[] args){  ensureSecurityManager();  try {    logger.entering(ServiceStarter.class.getName(),"main",(Object[])args);    Configuration config=ConfigurationProvider.getInstance(args);    ServiceDescriptor[] descs=(ServiceDescriptor[])config.getEntry(START_PACKAGE,"serviceDescriptors",ServiceDescriptor[].class,null);    if (descs == null || descs.length == 0) {      logger.warning("service.config.empty");      return;    }    LoginContext loginContext=(LoginContext)config.getEntry(START_PACKAGE,"loginContext",LoginContext.class,null);    Result[] results=null;    if (loginContext != null)     results=createWithLogin(descs,config,loginContext); else     results=create(descs,config);    checkResultFailures(results);    maintainNonActivatableReferences(results);  } catch (  ConfigurationException cex) {    logger.log(Level.SEVERE,"service.config.exception",cex);  }catch (  Exception e) {    logger.log(Level.SEVERE,"service.creation.exception",e);  }  logger.exiting(ServiceStarter.class.getName(),"main");}  }
class C{  public Matrix times(double s){  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=s * A[i][j];    }  }  return X;}  }
class C{  private void displayFilter(FilterNode node){  if (node == null) {    return;  }  Filter filter=node.getFilter();  filterPanel.setFilter(filter,node.getFilterConfig());  Dimension boxSize=box.getPreferredSize();  setPreferredSize(boxSize);  boolean addFilterButtonFlag=filter instanceof LogicFilterImpl;  btnAddFilter.setVisible(addFilterButtonFlag);  boolean removeFilterButtonFlag=false;  FilterNode parentNode=(FilterNode)node.getParent();  if (parentNode != null) {    removeFilterButtonFlag=(parentNode.getFilter() instanceof LogicFilterImpl) && (parentNode.getChildCount() > 2);  }  btnRemoveFilter.setVisible(removeFilterButtonFlag);  revalidate();}  }
class C{  @Override public Object fromPartitions(List<BigInteger> parts,int partsIndex,String type) throws PIRException {  Object element;switch (type) {case BYTE:    element=parts.get(partsIndex).byteValueExact();  break;case SHORT:{  byte[] bytes=partsToBytes(parts,partsIndex,type);  element=bytesToShort(bytes);  break;}case INT:{byte[] bytes=partsToBytes(parts,partsIndex,type);element=bytesToInt(bytes);break;}case LONG:{byte[] bytes=partsToBytes(parts,partsIndex,type);element=bytesToLong(bytes);break;}case FLOAT:{byte[] bytes=partsToBytes(parts,partsIndex,type);element=Float.intBitsToFloat(bytesToInt(bytes));break;}case DOUBLE:{byte[] bytes=partsToBytes(parts,partsIndex,type);element=Double.longBitsToDouble(bytesToLong(bytes));break;}case CHAR:{byte[] bytes=partsToBytes(parts,partsIndex,type);element=(char)bytesToShort(bytes);break;}case STRING:{byte[] bytes=partsToBytes(parts,partsIndex,type);try {element=new String(bytes,"UTF-8").trim();} catch (UnsupportedEncodingException e) {throw new RuntimeException(e);}break;}default :throw new PIRException("type = " + type + " not recognized!");}return element;}  }
class C{  public void copyTo(@Nonnull final UserAgent.Builder builder){  final OperatingSystemFamily f=OperatingSystemFamily.evaluate(family);  final VersionNumber version=VersionNumber.parseOperatingSystemVersion(f,builder.getUserAgentString());  builder.setOperatingSystem(new net.sf.uadetector.OperatingSystem(f,family,icon,name,producer,producerUrl,url,version));}  }
class C{  public static boolean locationFileExists(){  return LOCATION_FILE.exists();}  }
class C{  public String next(){  return nextLine();}  }
class C{  public void runJob(Job job) throws JobManagerException {  assertIsRunning();  if (job.isValid()) {    JobPoller.getInstance().queueNow(job);  }}  }
class C{  public void loadConf(Configuration otherConf){  addConfiguration(otherConf);}  }
class C{  public static EntityCondition createSingleCondition(ModelField modelField,String operation,Object fieldValue,boolean ignoreCase,Delegator delegator,Map<String,?> context){  EntityCondition cond=null;  String fieldName=modelField.getName();  Locale locale=(Locale)context.get("locale");  TimeZone timeZone=(TimeZone)context.get("timeZone");  EntityComparisonOperator<?,?> fieldOp=null;  if (operation != null) {    if (operation.equals("contains")) {      fieldOp=EntityOperator.LIKE;      fieldValue="%" + fieldValue + "%";    } else     if ("not-contains".equals(operation) || "notContains".equals(operation)) {      fieldOp=EntityOperator.NOT_LIKE;      fieldValue="%" + fieldValue + "%";    } else     if (operation.equals("empty")) {      return EntityCondition.makeCondition(fieldName,EntityOperator.EQUALS,null);    } else     if (operation.equals("like")) {      fieldOp=EntityOperator.LIKE;      fieldValue=fieldValue + "%";    } else     if ("not-like".equals(operation) || "notLike".equals(operation)) {      fieldOp=EntityOperator.NOT_LIKE;      fieldValue=fieldValue + "%";    } else     if ("opLessThan".equals(operation)) {      fieldOp=EntityOperator.LESS_THAN;    } else     if ("upToDay".equals(operation)) {      fieldOp=EntityOperator.LESS_THAN;    } else     if ("upThruDay".equals(operation)) {      fieldOp=EntityOperator.LESS_THAN_EQUAL_TO;    } else     if (operation.equals("greaterThanFromDayStart")) {      String timeStampString=(String)fieldValue;      Object startValue=modelField.getModelEntity().convertFieldValue(modelField,dayStart(timeStampString,0,timeZone,locale),delegator,context);      return EntityCondition.makeCondition(fieldName,EntityOperator.GREATER_THAN_EQUAL_TO,startValue);    } else     if (operation.equals("sameDay")) {      String timeStampString=(String)fieldValue;      Object startValue=modelField.getModelEntity().convertFieldValue(modelField,dayStart(timeStampString,0,timeZone,locale),delegator,context);      EntityCondition startCond=EntityCondition.makeCondition(fieldName,EntityOperator.GREATER_THAN_EQUAL_TO,startValue);      Object endValue=modelField.getModelEntity().convertFieldValue(modelField,dayStart(timeStampString,1,timeZone,locale),delegator,context);      EntityCondition endCond=EntityCondition.makeCondition(fieldName,EntityOperator.LESS_THAN,endValue);      return EntityCondition.makeCondition(startCond,endCond);    } else {      fieldOp=entityOperators.get(operation);    }  } else {    if (UtilValidate.isNotEmpty(UtilGenerics.toList(fieldValue))) {      fieldOp=EntityOperator.IN;    } else {      fieldOp=EntityOperator.EQUALS;    }  }  Object fieldObject=fieldValue;  if ((fieldOp != EntityOperator.IN && fieldOp != EntityOperator.NOT_IN) || !(fieldValue instanceof Collection<?>)) {    fieldObject=modelField.getModelEntity().convertFieldValue(modelField,fieldValue,delegator,context);  }  if (ignoreCase && fieldObject instanceof String) {    cond=EntityCondition.makeCondition(EntityFunction.UPPER_FIELD(fieldName),fieldOp,EntityFunction.UPPER(((String)fieldValue).toUpperCase()));  } else {    if (fieldObject.equals(GenericEntity.NULL_FIELD.toString())) {      fieldObject=null;    }    cond=EntityCondition.makeCondition(fieldName,fieldOp,fieldObject);  }  if (EntityOperator.NOT_EQUAL.equals(fieldOp) && fieldObject != null) {    cond=EntityCondition.makeCondition(UtilMisc.toList(cond,EntityCondition.makeCondition(fieldName,null)),EntityOperator.OR);  }  return cond;}  }
class C{  public void createWeightedEdgesConnecting(UniqueVertexGraph gGraph,String sStartNode,List lOtherNodes,double dStartWeight,double dNewWeight,double dDataImportance){  if (lOtherNodes != null)   if (lOtherNodes.size() == 0) {    VertexImpl v=new VertexImpl();    v.setLabel(sStartNode);    try {      gGraph.add(v);    } catch (    Exception e) {      e.printStackTrace();    }  }  Vertex vA=gGraph.locateVertex(sStartNode);  if (vA == null) {    vA=new VertexImpl();    vA.setLabel(sStartNode);    try {      gGraph.add(vA);    } catch (    Exception e) {    }  }  EdgeCachedLocator ecl;  if (eclLocator == null)   ecl=new EdgeCachedLocator(100); else   ecl=eclLocator;  java.util.Iterator iIter=lOtherNodes.iterator();  while (iIter.hasNext()) {    VertexImpl vB=new VertexImpl();    vB.setLabel(new String((String)iIter.next()));    double dOldWeight=0;    double dFinalWeight=0;    WeightedEdge weCorrectEdge=null;    WeightedEdge weEdge=null;    boolean bFound=(weEdge=(WeightedEdge)ecl.locateDirectedEdgeInGraph(gGraph,vA,vB)) != null;    if (bFound) {      dOldWeight=weEdge.getWeight();      weCorrectEdge=weEdge;      dFinalWeight=dOldWeight + (dNewWeight - dOldWeight) * dDataImportance;      weCorrectEdge.setWeight(dFinalWeight);    } else {      dFinalWeight=dStartWeight;      try {        gGraph.addEdge(vA,vB,dFinalWeight);        ecl.resetCache();      } catch (      Exception e) {        e.printStackTrace();      }    }  }}  }
class C{  public ZWaveThermostatFanStateCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  public static ValueGetterSpacePredicate<ServerEntry> pathXor(String path,ISpacePredicate leftPredicate,ISpacePredicate rightPredicate){  return path(path,xor(leftPredicate,rightPredicate));}  }
class C{  public static void main(final String[] args) throws InterruptedException {  final CountDownLatch latch=new CountDownLatch(2);  final ExecutorService es=Executors.newFixedThreadPool(2);  es.submit(null);  es.submit(null);  latch.await();  es.shutdown();}  }
class C{  public static void error(@Nullable Class<?> caller,String message,Object... args){  android.util.Log.e(tag(caller),String.format(Locale.ENGLISH,message,args));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelBuff_A_TO_B(String skillcaster,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200966,skillcaster,skilltarget,skillname);}  }
class C{  private static void attemptRetryOnException(String logPrefix,Request<?> request,VolleyError exception) throws VolleyError {  RetryPolicy retryPolicy=request.getRetryPolicy();  int oldTimeout=request.getTimeoutMs();  try {    retryPolicy.retry(exception);  } catch (  VolleyError e) {    request.addMarker(String.format("%s-timeout-giveup [timeout=%s]",logPrefix,oldTimeout));    throw e;  }  request.addMarker(String.format("%s-retry [timeout=%s]",logPrefix,oldTimeout));}  }
class C{  public void resume(){}  }
class C{  public ConversationFactory withEscapeSequence(String escapeSequence){  return withConversationCanceller(new ExactMatchConversationCanceller(escapeSequence));}  }
class C{  public static ValueGetterSpacePredicate<ServerEntry> pathLessEqual(String path,Comparable<?> value){  return path(path,lessEqual(value));}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  private void doDownload(int type){  Activity a=Mysplash.getInstance().getTopActivity();  DownloadHelper.getInstance(a).addMission(a,(Photo)model.getDownloadKey(),type);}  }
class C{  protected boolean isStopped(){  return stopped;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_AlwaysParry_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200635,skillcaster,skillname);}  }
class C{  public static void mainQuickTest2(String[] args) throws UnsupportedAudioFileException, IOException {  String wavBaseFolder="/project/mary/marcela/VoiceConversion/Neutral-Spike-Conversion/";  String sourceTag="source";  String targetTag="target";  String method="F";  BaselinePreprocessor pp=new BaselinePreprocessor();  BaselineFeatureExtractor fe=new BaselineFeatureExtractor();  BaselinePostprocessor po=new BaselinePostprocessor();  JointGMMTransformerParams pa=new JointGMMTransformerParams();  int numTrainingFiles=99;  int i;  boolean isContextualGMMs=false;  int contextClassificationType=ContextualGMMParams.NO_PHONEME_CLASS;  int[] numComponents={10};  String inputFolder=wavBaseFolder + "/" + sourceTag+ "/wav/";  String outputBaseFolder;  if (!isContextualGMMs) {    outputBaseFolder=wavBaseFolder + "output/" + sourceTag+ "2"+ targetTag+ "/gmm"+ method+ "_"+ String.valueOf(numTrainingFiles);  } else {    outputBaseFolder=wavBaseFolder + "output/" + sourceTag+ "2"+ targetTag+ "/gmm"+ method+ "_"+ String.valueOf(numTrainingFiles)+ "_"+ "context"+ String.valueOf(contextClassificationType);    for (i=0; i < numComponents.length; i++)     outputBaseFolder+="_" + String.valueOf(numComponents[i]);  }  String baseFile=wavBaseFolder + "output/" + sourceTag+ "2"+ targetTag+ "/"+ sourceTag+ method+ "_X_"+ targetTag+ method+ "_"+ String.valueOf(numTrainingFiles);  pa.isForcedAnalysis=false;  pa.isSourceVocalTractSpectrumFromModel=false;  pa.isVocalTractTransformation=true;  pa.isResynthesizeVocalTractFromSourceModel=false;  pa.isVocalTractMatchUsingTargetModel=false;  pa.isTemporalSmoothing=true;  pa.smoothingNumNeighbours=10;  if (!pa.isTemporalSmoothing)   pa.smoothingNumNeighbours=0;  pa.smoothingMethod=SmoothingDefinitions.TRANSFORMATION_FILTER_SMOOTHING;  pa.isDisplayProcessingFrameCount=true;  pa.inputFolder=inputFolder;  pa.outputBaseFolder=outputBaseFolder;  if (!isContextualGMMs)   pa.jointGmmFile=baseFile + "_" + String.valueOf(numComponents[0])+ JointGMMSet.DEFAULT_EXTENSION; else {    pa.jointGmmFile=baseFile + "_context" + String.valueOf(contextClassificationType);    for (i=0; i < numComponents.length; i++)     pa.jointGmmFile+="_" + String.valueOf(numComponents[i]);    pa.jointGmmFile+=JointGMMSet.DEFAULT_EXTENSION;  }  pa.pitchMappingFile=baseFile + PitchMappingFile.DEFAULT_EXTENSION;  pa.outputFolderInfoString="isSrc" + String.valueOf(pa.isSourceVocalTractSpectrumFromModel ? 1 : 0) + "_smooth"+ String.valueOf(pa.isTemporalSmoothing ? 1 : 0)+ "_"+ String.valueOf(pa.smoothingNumNeighbours);  pa.isSeparateProsody=false;  pa.isSaveVocalTractOnlyVersion=false;  pa.isFixedRateVocalTractConversion=true;  pa.prosodyParams.pitchStatisticsType=PitchStatistics.STATISTICS_IN_HERTZ;  pa.prosodyParams.durationTransformationMethod=ProsodyTransformerParams.NO_TRANSFORMATION;  pa.prosodyParams.isUseInputMeanPitch=false;  pa.prosodyParams.isUseInputStdDevPitch=false;  pa.prosodyParams.isUseInputRangePitch=false;  pa.prosodyParams.isUseInputInterceptPitch=false;  pa.prosodyParams.isUseInputSlopePitch=false;  pa.isPitchFromTargetFile=false;  pa.isDurationFromTargetFile=false;  pa.isEnergyFromTargetFile=false;  pa.targetAlignmentFileType=BaselineTransformerParams.LABELS;  JointGMMTransformer t=new JointGMMTransformer(pp,fe,po,pa);  t.run();}  }
class C{  public ArrayDataType(Class<T[]> clazz,DataType<T> baseType){  super(clazz,null,null);}  }
class C{  @NonNull Animator slideAnimator(final float toX,final float toY,final long animationDuration){  final float fromX=getTranslationX();  final float fromY=getTranslationY();  final Animator animator;  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {    final PropertyValuesHolder translationX=PropertyValuesHolder.ofFloat(View.TRANSLATION_X,fromX,toX);    final PropertyValuesHolder translationY=PropertyValuesHolder.ofFloat(View.TRANSLATION_Y,fromY,toY);    animator=ObjectAnimator.ofPropertyValuesHolder(this,translationX,translationY);  } else {    final Animator translationXAnimator=ObjectAnimator.ofFloat(this,"translationX",fromX,toX);    final Animator translationYAnimator=ObjectAnimator.ofFloat(this,"translationY",fromY,toY);    final AnimatorSet animatorSet=new AnimatorSet();    animatorSet.playTogether(translationXAnimator,translationYAnimator);    animator=animatorSet;  }  animator.setDuration(animationDuration);  return animator;}  }
class C{  public void addListener(LegendOptionDataUpdateInterface listener){  if (listener != null) {    listenerList.add(listener);  }}  }
class C{  public Bundler putParcelable(String key,Parcelable value){  bundle.putParcelable(key,value);  return this;}  }
class C{  public static void saveClassifications(DAAHeader header,String[] cNames,Map<Integer,ListOfLongs>[] fName2ClassId2Location,Map<Integer,Integer>[] fName2ClassId2Weight) throws IOException {  DAAModifier.removeMEGANClassificationData(header);  for (int f=0; f < cNames.length; f++) {    final String cName=cNames[f];    final ByteOutputStream outKey=new ByteOutputStream(1000000);    final OutputWriterLittleEndian wKey=new OutputWriterLittleEndian(outKey);    final ByteOutputStream outDump=new ByteOutputStream(1000000);    final OutputWriterLittleEndian wDump=new OutputWriterLittleEndian(outDump);    final Map<Integer,ListOfLongs> id2locations=fName2ClassId2Location[f];    wKey.writeNullTerminatedString(cName.getBytes());    wKey.writeInt(id2locations.size());    wDump.writeNullTerminatedString(cName.getBytes());    for (    int classId : id2locations.keySet()) {      wKey.writeInt(classId);      wKey.writeInt(fName2ClassId2Weight[f].get(classId));      final ListOfLongs list=id2locations.get(classId);      wKey.writeInt(list.size());      wKey.writeLong(wDump.getPosition());      for (int i=0; i < list.size(); i++) {        wDump.writeLong(list.get(i));      }    }    DAAModifier.appendBlocks(header,new BlockType[]{BlockType.megan_classification_key_block,BlockType.megan_classification_dump_block},new byte[][]{outKey.getBytes(),outDump.getBytes()},new int[]{outKey.size(),outDump.size()});  }}  }
class C{  protected static void loadSharedVars(Properties props,Configuration config){  for (Iterator<Object> i=props.keySet().iterator(); i.hasNext(); ) {    String key=(String)i.next();    String value=props.getProperty(key);    if (Debug.verboseOn()) {      Debug.logVerbose("Adding FTL shared var " + key + " with value "+ value,module);    }    try {      config.setSharedVariable(key,value);    } catch (    Exception e) {      Debug.logError(e,"Could not pre-initialize dynamically loaded shared var: " + key + ": "+ e,module);    }  }}  }
class C{  public void updateMove(@NotNull NlComponent primary,@AndroidCoordinate int offsetX,@AndroidCoordinate int offsetY,int modifierMask){  clearSuggestions();  mySnap=(modifierMask & InputEvent.SHIFT_MASK) == 0;  myBounds=new Rectangle(primary.x + offsetX,primary.y + offsetY,primary.w,primary.h);  Rectangle b=myBounds;  Segment edge=new Segment(b.y,b.x,x2(b),null,null,SegmentType.TOP,NO_MARGIN);  List<Match> horizontalMatches=findClosest(edge,myHorizontalEdges);  edge=new Segment(y2(b),b.x,x2(b),null,null,SegmentType.BOTTOM,NO_MARGIN);  addClosest(edge,myHorizontalEdges,horizontalMatches);  edge=new Segment(b.x,b.y,y2(b),null,null,SegmentType.LEFT,NO_MARGIN);  List<Match> verticalMatches=findClosest(edge,myVerticalEdges);  edge=new Segment(b.x,b.y,y2(b),null,null,myTextDirection.getLeftSegment(),NO_MARGIN);  addClosest(edge,myVerticalEdges,verticalMatches);  edge=new Segment(x2(b),b.y,y2(b),null,null,SegmentType.RIGHT,NO_MARGIN);  addClosest(edge,myVerticalEdges,verticalMatches);  edge=new Segment(x2(b),b.y,y2(b),null,null,myTextDirection.getRightSegment(),NO_MARGIN);  addClosest(edge,myVerticalEdges,verticalMatches);  edge=new Segment(centerX(b),b.y,y2(b),null,null,SegmentType.CENTER_VERTICAL,NO_MARGIN);  addClosest(edge,myCenterVertEdges,verticalMatches);  edge=new Segment(centerY(b),b.x,x2(b),null,null,SegmentType.CENTER_HORIZONTAL,NO_MARGIN);  addClosest(edge,myCenterHorizEdges,horizontalMatches);  int baseline=primary.getBaseline();  if (baseline != -1) {    myDraggedBaseline=baseline;    edge=new Segment(b.y + baseline,b.x,x2(b),primary,null,SegmentType.BASELINE,NO_MARGIN);    addClosest(edge,myHorizontalEdges,horizontalMatches);  }  myHorizontalSuggestions=horizontalMatches;  myVerticalSuggestions=verticalMatches;  myTopMargin=myBottomMargin=myLeftMargin=myRightMargin=0;  Match match=pickBestMatch(myHorizontalSuggestions);  if (match != null) {    if (myHorizontalDeps.contains(match.edge.component)) {      match.cycle=true;    }    myMoveTop=true;    myMoveBottom=true;    snapHorizontal(match.with,match.edge.at,myBounds);    if (match.with.edgeType == SegmentType.TOP) {      myCurrentTopMatch=match;    } else     if (match.with.edgeType == SegmentType.BOTTOM) {      myCurrentBottomMatch=match;    } else {      assert match.with.edgeType == SegmentType.CENTER_HORIZONTAL || match.with.edgeType == SegmentType.BASELINE : match.with.edgeType;      myCurrentTopMatch=match;    }  }  match=pickBestMatch(myVerticalSuggestions);  if (match != null) {    if (myVerticalDeps.contains(match.edge.component)) {      match.cycle=true;    }    myMoveLeft=true;    myMoveRight=true;    snapVertical(match.with,match.edge.at,myBounds);    if (myTextDirection.isLeftSegment(match.with.edgeType)) {      myCurrentLeftMatch=match;    } else     if (myTextDirection.isRightSegment(match.with.edgeType)) {      myCurrentRightMatch=match;    } else {      assert match.with.edgeType == SegmentType.CENTER_VERTICAL;      myCurrentLeftMatch=match;    }  }  checkCycles();}  }
class C{  private synchronized Vector resolveAllSubordinateCatalogs(int entityType,String entityName,String publicId,String systemId) throws IOException {  Vector resolutions=new Vector();  for (int catPos=0; catPos < catalogs.size(); catPos++) {    Resolver c=null;    try {      c=(Resolver)catalogs.elementAt(catPos);    } catch (    ClassCastException e) {      String catfile=(String)catalogs.elementAt(catPos);      c=(Resolver)newCatalog();      try {        c.parseCatalog(catfile);      } catch (      MalformedURLException mue) {        catalogManager.debug.message(1,"Malformed Catalog URL",catfile);      }catch (      FileNotFoundException fnfe) {        catalogManager.debug.message(1,"Failed to load catalog, file not found",catfile);      }catch (      IOException ioe) {        catalogManager.debug.message(1,"Failed to load catalog, I/O error",catfile);      }      catalogs.setElementAt(c,catPos);    }    String resolved=null;    if (entityType == DOCTYPE) {      resolved=c.resolveDoctype(entityName,publicId,systemId);      if (resolved != null) {        resolutions.addElement(resolved);        return resolutions;      }    } else     if (entityType == DOCUMENT) {      resolved=c.resolveDocument();      if (resolved != null) {        resolutions.addElement(resolved);        return resolutions;      }    } else     if (entityType == ENTITY) {      resolved=c.resolveEntity(entityName,publicId,systemId);      if (resolved != null) {        resolutions.addElement(resolved);        return resolutions;      }    } else     if (entityType == NOTATION) {      resolved=c.resolveNotation(entityName,publicId,systemId);      if (resolved != null) {        resolutions.addElement(resolved);        return resolutions;      }    } else     if (entityType == PUBLIC) {      resolved=c.resolvePublic(publicId,systemId);      if (resolved != null) {        resolutions.addElement(resolved);        return resolutions;      }    } else     if (entityType == SYSTEM) {      Vector localResolutions=c.resolveAllSystem(systemId);      resolutions=appendVector(resolutions,localResolutions);      break;    } else     if (entityType == SYSTEMREVERSE) {      Vector localResolutions=c.resolveAllSystemReverse(systemId);      resolutions=appendVector(resolutions,localResolutions);    }  }  if (resolutions != null) {    return resolutions;  } else {    return null;  }}  }
class C{  @Override public synchronized void remove(String key){  boolean deleted=getFileForKey(key).delete();  removeEntry(key);  if (!deleted) {    VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",key,getFilenameForKey(key));  }}  }
class C{  public static boolean hasProperty(String propertyName){  return props.containsKey(propertyName);}  }
class C{  public NotPositiveException(Number value){  super(value,INTEGER_ZERO,true);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public LongLiteral fullCopy(){  LongLiteral tree=(LongLiteral)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  @Override public final void skip(final int num){  seek(getPosition() + num);}  }
class C{  private void writeDomainPair(DomPair pair,Document document,Element parentElement){  Element domPair=document.createElement("dompair");  parentElement.appendChild(domPair);  writeDomainSpec(pair.getFirstDomain(),document,domPair);  writeDomainSpec(pair.getSecondDomain(),document,domPair);}  }
class C{  public boolean isZoomingEnabled(){  return zoomingEnabled;}  }
class C{  public CatchOptions useBestBall(boolean useBestPokeball){  this.useBestPokeball=useBestPokeball;  return this;}  }
class C{  public void prepareMatrixOffset(boolean inverted){  mMatrixOffset.reset();  if (!inverted)   mMatrixOffset.postTranslate(mViewPortHandler.offsetLeft(),mViewPortHandler.getChartHeight() - mViewPortHandler.offsetBottom()); else {    mMatrixOffset.setTranslate(-(mViewPortHandler.getChartWidth() - mViewPortHandler.offsetRight()),mViewPortHandler.getChartHeight() - mViewPortHandler.offsetBottom());    mMatrixOffset.postScale(-1.0f,1.0f);  }}  }
class C{  @Override public boolean checkUniqueParticleAttribution(SubstitutionGroupHandler subGroupHandler) throws XMLSchemaException {  for (int i=0; i < fNumElements; i++) {    for (int j=i + 1; j < fNumElements; j++) {      if (XSConstraints.overlapUPA(fAllElements[i],fAllElements[j],subGroupHandler)) {        throw new XMLSchemaException("cos-nonambig",new Object[]{fAllElements[i].toString(),fAllElements[j].toString()});      }    }  }  return false;}  }
class C{  public void zoomToSelection(){  graphView.zoomToSelection();}  }
class C{  @Override public void flush(){}  }
class C{  protected void removeTrackedServices(){  for (  ServiceTracker<ExtHttpService,ExtHttpService> tracker : trackers) {    tracker.close();  }}  }
class C{  public static String stripFileProtocol(String uriString){  if (uriString.startsWith("file://")) {    return Uri.parse(uriString).getPath();  }  return uriString;}  }
class C{  private synchronized void eval() throws MetadataEvaluationException {  if (cacheStrategy == CacheStrategy.NEVER_CACHE || internalValue.get() == null) {    try {      Object value=lazyValue.call();      if (value == null) {        value=ACTUALLY_NULL;      }      internalValue=new SoftReference<Object>(value);    } catch (    Exception e) {      throw new MetadataEvaluationException(e);    }  }}  }
class C{  private ReferencedEnvelope convertToWGS84(ReferencedEnvelope bounds){  if (bounds == null) {    return null;  }  CoordinateReferenceSystem wgs84=CoordManager.getInstance().getWGS84();  if (wgs84.equals(bounds.getCoordinateReferenceSystem())) {    return bounds;  }  if (bounds.getCoordinateReferenceSystem() == null) {    return bounds;  }  MathTransform transform=null;  try {    transform=CRS.findMathTransform(bounds.getCoordinateReferenceSystem(),wgs84);  } catch (  FactoryException e) {    ConsoleManager.getInstance().exception(this,e);  }  Envelope targetGeometry=null;  try {    targetGeometry=JTS.transform(bounds,transform);  } catch (  TransformException e) {    ConsoleManager.getInstance().exception(this,e);  }  if (targetGeometry != null) {    ReferencedEnvelope refEnv=new ReferencedEnvelope(targetGeometry.getMinY(),targetGeometry.getMaxY(),targetGeometry.getMinX(),targetGeometry.getMaxX(),wgs84);    return refEnv;  }  return null;}  }
class C{  public static byte[] readFileToByteArray(File file) throws IOException {  InputStream in=null;  try {    in=openInputStream(file);    return IOUtils.toByteArray(in,file.length());  }  finally {    IOUtils.closeQuietly(in);  }}  }
class C{  public void emit(View emiter,int particlesPerSecond,int emitingTime){  emitWithGravity(emiter,Gravity.CENTER,particlesPerSecond,emitingTime);}  }
class C{  boolean updateSelectedVariant(@NotNull Project project,@NotNull String moduleName,@NotNull String buildVariantName){  List<AndroidFacet> affectedAndroidFacets=Lists.newArrayList();  List<NativeAndroidGradleFacet> affectedNativeAndroidFacets=Lists.newArrayList();  executeProjectChanges(project,null);  return !affectedAndroidFacets.isEmpty() || !affectedNativeAndroidFacets.isEmpty();}  }
class C{  public static boolean isCompatibleWithThrowsClause(Throwable ex,Class<?>[] declaredExceptions){  if (!isCheckedException(ex))   return true;  if (declaredExceptions != null)   for (  Class<?> declaredException : declaredExceptions)   if (declaredException.isAssignableFrom(ex.getClass()))   return true;  return false;}  }
class C{  public Whitelist(){  this.patterns=Collections.emptyList();  this.statusCode=-1;  this.enabled=false;}  }
class C{  boolean aboutEquals(float moduleSize,float i,float j){  if (Math.abs(i - getY()) <= moduleSize && Math.abs(j - getX()) <= moduleSize) {    float moduleSizeDiff=Math.abs(moduleSize - estimatedModuleSize);    return moduleSizeDiff <= 1.0f || moduleSizeDiff <= estimatedModuleSize;  }  return false;}  }
class C{  private void createRGBFormat(){  videoFormat=new RGBFormat(new Dimension(mip.getMWidth(),mip.getMHeight()),width * height,int[].class,mip.getFPS(),32,0x00ff0000,0x0000ff00,0x000000ff,1,width,Format.FALSE,RGBFormat.BIG_ENDIAN);}  }
class C{  public RecordID next(){  return null;}  }
class C{  public MithraTransaction startOrContinueTransaction(TransactionStyle style) throws MithraTransactionException {  MithraTransaction result;  MithraTransaction parent=this.getCurrentTransaction();  if (parent != null) {    result=new MithraNestedTransaction(parent);  } else {    Transaction jtaTx;    try {      if (this.getJtaTransactionManager().getStatus() != Status.STATUS_ACTIVE) {        this.getJtaTransactionManager().setTransactionTimeout(style.getTimeout());        this.getJtaTransactionManager().begin();      }      jtaTx=this.getJtaTransactionManager().getTransaction();      result=this.createMithraRootTransaction(jtaTx,style.getTimeout() * 1000);    } catch (    NotSupportedException e) {      throw new MithraTransactionException("JTA exception",e);    }catch (    SystemException e) {      throw new MithraTransactionException("JTA exception",e);    }catch (    RollbackException e) {      throw new MithraTransactionException("JTA exception",e);    }  }  this.setThreadTransaction(result);  return result;}  }
class C{  private RealMatrix rankTransform(final RealMatrix matrix){  RealMatrix transformed=matrix.copy();  for (int i=0; i < transformed.getColumnDimension(); i++) {    transformed.setColumn(i,rankingAlgorithm.rank(transformed.getColumn(i)));  }  return transformed;}  }
class C{  public MFCC(float sampleRate,int windowSize,int numberCoefficients,boolean useFirstCoefficient) throws IllegalArgumentException {  this(sampleRate,windowSize,numberCoefficients,useFirstCoefficient,20.0,16000.0,40);}  }
class C{  @SuppressLint("NewApi") public static void tryAccessibilityAnnounce(View view,CharSequence text){  if (isJellybeanOrLater() && view != null && text != null) {    view.announceForAccessibility(text);  }}  }
class C{  @Override public Object invoke(MethodInvocation methodInvocation) throws Throwable {  return isObjectMethodCall(methodInvocation) ? methodInvocation.proceed() : switchFrameAndProceed(methodInvocation);}  }
class C{  public void stopDragDropInteraction(){  for (  Layer layer : myLayers) {    if (layer instanceof ConstraintsLayer) {      ConstraintsLayer constraintsLayer=(ConstraintsLayer)layer;      if (constraintsLayer.isShowOnHover()) {        constraintsLayer.setShowOnHover(false);        repaint();      }    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_REMOVE_ITEM_OPTION_IT_CAN_NOT_BE_GIVEN_OPTION(String value0){  return new SM_SYSTEM_MESSAGE(1300469,value0);}  }
class C{  public static <T,K,U>Collector<SimpleEntry<K,U>,?,LinkedHashMap<K,U>> entryToLinkedMap(){  return Collectors.toMap(null,null,null,null);}  }
class C{  public void addParameterJacobianProvider(final NamedParameterJacobianProvider provider){  jacobianProviders.add(provider);}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public SecureCheckTokenQuery ip(String value){  return unsafeParam("ip",value);}  }
class C{  public boolean equals(Split split){  return (A.equals(split.A) && B.equals(split.B)) || (A.equals(split.B) && B.equals(split.A));}  }
class C{  @Override public void populateField(String value){  if (ttfPanel != null) {    ttfPanel.populateExpression(value);  }}  }
class C{  private static File createReserveDiskCacheDir(Context context){  File cacheDir=StorageUtils.getCacheDirectory(context,false);  File individualDir=new File(cacheDir,"uil-images");  if (individualDir.exists() || individualDir.mkdir()) {    cacheDir=individualDir;  }  return cacheDir;}  }
class C{  public static void main(String[] args){  System.out.println((new MbrolaVoiceDirectory()).toString());}  }
class C{  private FSDataInputStream updateCache(String filePath){  FSDataInputStream fileChannel=fileNameAndStreamCache.get(filePath);  try {    if (null == fileChannel) {      Path pt=new Path(filePath);      FileSystem fs=FileSystem.get(FileFactory.getConfiguration());      fileChannel=fs.open(pt);      fileNameAndStreamCache.put(filePath,fileChannel);    }  } catch (  IOException e) {    LOGGER.error(e,e.getMessage());  }  return fileChannel;}  }
class C{  public ResourceApplicationContext(Resource[] resources,ApplicationContext parent){  super(parent);  this.resources=resources;}  }
class C{  public void shareWeiXin(String webUrl,String msgTitle,String msgText){  shareToWeiXin(webUrl,msgTitle,msgText);}  }
class C{  public grammaticalityEstimator(Set FileNames,int iMinChar,int iMaxChar,int iMinWord,int iMaxWord,int iNeighbourhoodWindow){  iMinCharNGram=iMinChar;  iMaxCharNGram=iMaxChar;  iMinWordNGram=iMinWord;  iMaxWordNGram=iMaxWord;  DistroDocs=new TreeMap<Integer,DistributionDocument>();  DistroWordDocs=new TreeMap<Integer,DistributionWordDocument>();  StringBuffer sb=new StringBuffer();  Iterator iTexts=FileNames.iterator();  while (iTexts.hasNext()) {    String sFile=(String)iTexts.next();    try {      BufferedReader bf=new BufferedReader(new FileReader(sFile));      String sTmp;      while ((sTmp=bf.readLine()) != null)       sb.append(sTmp);      bf.close();    } catch (    FileNotFoundException ex) {      ex.printStackTrace(System.err);    }catch (    IOException ex) {      ex.printStackTrace(System.err);    }    sb.append((char)0);  }  FullTextDataString=sb.toString();  for (int iCnt=iMinCharNGram; iCnt <= iMaxCharNGram; iCnt++) {    DistroDocs.put(iCnt,new DistributionDocument(iNeighbourhoodWindow,iCnt));  }  for (int iCnt=iMinWordNGram; iCnt <= iMaxWordNGram; iCnt++) {    DistroWordDocs.put(iCnt,new DistributionWordDocument(iNeighbourhoodWindow,iCnt));  }}  }
class C{  public byte[] crypt(byte[] data){  int remaining=data.length;  int llength=0x5B0;  int start=0;  try {    while (remaining > 0) {      byte[] myIv=BitTools.multiplyBytes(this.iv,4,4);      if (remaining < llength) {        llength=remaining;      }      for (int x=start; x < (start + llength); x++) {        if ((x - start) % myIv.length == 0) {          byte[] newIv=cipher.doFinal(myIv);          System.arraycopy(newIv,0,myIv,0,myIv.length);        }        data[x]^=myIv[(x - start) % myIv.length];      }      start+=llength;      remaining-=llength;      llength=0x5B4;    }    updateIv();  } catch (  IllegalBlockSizeException|BadPaddingException e) {  }  return data;}  }
class C{  public static void validateValue(byte[] value) throws StateStoreException {  if (value == null) {    throw new StateStoreException("Property value must not be null.");  }  if (value.length > MAX_VALUE_LENGTH_BYTES) {    throw new StateStoreException(String.format("Property value length %d exceeds limit of %d bytes.",value.length,MAX_VALUE_LENGTH_BYTES));  }}  }
class C{  private Object invokeRemoteMethod(Object proxy,Method method,Object[] args) throws Throwable {  MethodConstraints convertedConstraints=null;  if (clientConstraints != null) {    InvocationConstraints relativeConstraints=clientConstraints.getConstraints(method);    InvocationConstraints absoluteConstraints=relativeConstraints.makeAbsolute();    if (relativeConstraints != absoluteConstraints) {      convertedConstraints=new BasicMethodConstraints(absoluteConstraints);    }  }  boolean force=false;  Remote currProxy;  Failure failure=null;synchronized (this) {    if (uproxy == null) {      activate(force,proxy,method);      force=true;    }    currProxy=uproxy;  }  for (int retries=MAX_RETRIES; --retries >= 0; ) {    if (logger.isLoggable(Levels.HANDLED)) {      if (failure != null) {        logThrow(Levels.HANDLED,"outbound call","invokeRemoteMethod",method,failure.exception);      }    }    if ((clientConstraints != null) && !(currProxy instanceof RemoteMethodControl)) {      throw new UnsupportedConstraintException("underlying proxy does not implement RemoteMethodControl");    }    Remote targetProxy=(convertedConstraints == null ? currProxy : (Remote)((RemoteMethodControl)currProxy).setConstraints(convertedConstraints));    Object result=invokeMethod(targetProxy,method,args);    if (result instanceof Failure) {      failure=(Failure)result;      if (!failure.retry || retries <= 0) {        break;      }    } else {      return result;    }synchronized (this) {      if (uproxy == null || currProxy.equals(uproxy)) {        activate(force,proxy,method);        if (currProxy.equals(uproxy) && (failure.exception instanceof NoSuchObjectException) && !force) {          activate(true,proxy,method);        }        force=true;      } else {        force=false;      }      currProxy=uproxy;    }  }  if (logger.isLoggable(Levels.FAILED)) {    logThrow(Levels.FAILED,"outbound call","invokeRemoteMethod",method,failure.exception);  }  throw failure.exception;}  }
class C{  public void dispose(){  getNodeTable().removeTableListener(m_listener);  getEdgeTable().removeTableListener(m_listener);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPATK_INTERVAL_TO_B(String skilltarget,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201054,skilltarget,num0,skillname);}  }
class C{  @Deprecated @Override public final String readLine() throws IOException {  return dis.readLine();}  }
class C{  public static long readSignedLong(ByteInput in,int zwidth){  long result=0;  for (int i=zwidth; i >= 0; i--) {    result=(result >>> 8) | ((in.readByte() & 0xffL) << 56);  }  result>>=(7 - zwidth) * 8;  return result;}  }
class C{  @Override public void comment(XMLString text,Augmentations augs) throws XNIException {  if (fDTDGrammar != null)   fDTDGrammar.comment(text,augs);  if (fDTDHandler != null) {    fDTDHandler.comment(text,augs);  }}  }
class C{  boolean isUpperBiDiagonal(){  return householderVectors.length >= householderVectors[0].length;}  }
class C{  public boolean isSideHandle(){switch (mType) {case LEFT_SIDE:case RIGHT_SIDE:case TOP_SIDE:case BOTTOM_SIDE:    return true;}return false;}  }
class C{  public ZWaveBinarySwitchCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  public void clear(){  m_nodeTuples.invalidateAll();  m_edgeTuples.invalidateAll();  super.clear();  m_links.clear();}  }
class C{  public synchronized void close() throws JMSException {  if (m_closed) {    if (_logger.isLoggable(Level.FINE)) {      _logger.fine(toString2() + "GSMessageConsumerImpl.close(): Consumer already closed.");    }    return;  }  if (_logger.isLoggable(Level.FINE)) {    _logger.fine(toString2() + "GSMessageConsumerImpl.close(): Closing consumer.");  }  m_session.removeConsumer(this);  if (!m_isQueue) {    unregisterToNotifications();  }synchronized (m_session.stopMonitor) {    m_closed=true;    while (m_session.onProcess) {      try {        this.notifyStop();        if (_logger.isLoggable(Level.FINE)) {          _logger.fine(toString2() + "GSMessageConsumerImpl.close(): Waiting for process to finish.");        }        m_session.stopMonitor.wait();      } catch (      InterruptedException e) {        if (_logger.isLoggable(Level.SEVERE)) {          _logger.severe(toString2() + "GSMessageConsumerImpl.close(): InterruptedException while waiting for process to finish.");        }      }    }    if (_logger.isLoggable(Level.FINE)) {      _logger.fine(toString2() + "GSMessageConsumerImpl.close(): No message on process.");    }    if (m_session.m_stopped) {      m_session.stopMonitor.notifyAll();    }  }  if (m_messageListener != null) {    innerSetMessageListener(null);  }  if (!m_isQueue) {synchronized (synchTopicNotifyLock) {      synchTopicNotifyLock.notify();    }  }}  }
class C{  public static void main(String[] args) throws Exception {  int port=9998;  Server server=new Server(port);  ServletContextHandler servletContextHandler=new ServletContextHandler(ServletContextHandler.NO_SESSIONS);  servletContextHandler.addEventListener(new MetricServletContextListener());  servletContextHandler.addEventListener(new HealthCheckServletContextListener());  servletContextHandler.setContextPath("/");  servletContextHandler.setResourceBase("src/main/webapp");  FilterHolder instrumentedFilterHolder=new FilterHolder(InstrumentedFilter.class);  instrumentedFilterHolder.setName("instrumentedFilter");  instrumentedFilterHolder.setAsyncSupported(true);  servletContextHandler.addFilter(instrumentedFilterHolder,"/*",EnumSet.noneOf(DispatcherType.class));  ResourceHandler resourceHandler=new ResourceHandler();  resourceHandler.setDirectoriesListed(true);  resourceHandler.setResourceBase("src/main/webapp");  HandlerList handlers=new HandlerList();  handlers.setHandlers(new Handler[]{resourceHandler,servletContextHandler});  server.setHandler(handlers);  ServletHolder servletHolder=servletContextHandler.addServlet(ServletContainer.class,"/v1/*");  servletHolder.setInitOrder(1);  servletHolder.setInitParameter("javax.ws.rs.Application","com.yahoo.bard.webservice.application.ResourceConfig");  servletHolder.setInitParameter("jersey.config.server.provider.packages","com.yahoo.bard.webservice.web.endpoints");  servletContextHandler.addServlet(AdminServlet.class,"/*");  server.start();  markDimensionCacheHealthy(port);}  }
class C{  public Object invoke(Object proxy,Method method,Object[] args) throws LuaException {synchronized (obj.L) {    String methodName=method.getName();    LuaObject func=obj.getField(methodName);    if (func.isNil()) {      return null;    }    Class retType=method.getReturnType();    Object ret;    if (retType.equals(Void.class) || retType.equals(void.class)) {      func.call(args,0);      ret=null;    } else {      ret=func.call(args,1)[0];      if (ret != null && ret instanceof Double) {        ret=LuaState.convertLuaNumber((Double)ret,retType);      }    }    return ret;  }}  }
class C{  JimpleBody(){}  }
class C{  boolean isSupportedIn(int configVersion){  return supportedVersionRange.contains(configVersion);}  }
class C{  public void cancel(Lease lease) throws UnknownLeaseException, RemoteException {  remove(lease);  lease.cancel();}  }
class C{  private void drawWind(Canvas canvas,float y,float xOffset){  float cof=(mScreenWidth + xOffset) / (LOADING_ANIMATION_COEFFICIENT / SLOW_DOWN_ANIMATION_COEFFICIENT);  float time=mLoadingAnimationTime;  if (mLastAnimationTime - mLoadingAnimationTime > 0) {    mInverseDirection=true;    time=(LOADING_ANIMATION_COEFFICIENT / SLOW_DOWN_ANIMATION_COEFFICIENT) - mLoadingAnimationTime;  } else {    mNewWindSet=true;    mInverseDirection=false;  }  float x=(mScreenWidth - (time * cof)) + xOffset - mWindLineWidth;  float xEnd=x + mWindLineWidth;  canvas.drawLine(x,y,xEnd,y,mWindPaint);}  }
class C{  private boolean drawComponent(@NotNull Graphics2D gc,@NotNull NlComponent component,@NotNull ViewHandlerManager viewHandlerManager,boolean parentHandlesPainting){  boolean needsRepaint=false;  boolean handlesPainting=false;  if (component.viewInfo != null) {    ViewHandler handler=component.getViewHandler();    if (handler != null && handler instanceof ViewGroupHandler) {      ViewGroupHandler viewGroupHandler=(ViewGroupHandler)handler;      if (viewGroupHandler.handlesPainting()) {        if (handler.paintConstraints(myScreenView,gc,component)) {          return needsRepaint;        }        needsRepaint|=viewGroupHandler.drawGroup(gc,myScreenView,component);        handlesPainting=true;      }    }    if (!handlesPainting && !parentHandlesPainting) {      Graphics2D g=(Graphics2D)gc.create();      int x=getSwingX(myScreenView,component.x);      int y=getSwingY(myScreenView,component.y);      int w=getSwingDimension(myScreenView,component.w);      int h=getSwingDimension(myScreenView,component.h);      drawComponentBackground(g,component);      String name=component.getTagName();      name=name.substring(name.lastIndexOf('.') + 1);      Font font=BLUEPRINT_TEXT_FONT;      g.setFont(font);      g.setColor(BLUEPRINT_FG_COLOR);      String id=component.getId();      int lineHeight=g.getFontMetrics().getHeight();      FontRenderContext fontRenderContext=g.getFontRenderContext();      if (id != null && h > lineHeight * 2) {        Rectangle2D classBounds=font.getStringBounds(name,fontRenderContext);        Rectangle2D idBounds=font.getStringBounds(id,fontRenderContext);        int textY=y + h / 2;        int textX=x + w / 2 - ((int)classBounds.getWidth()) / 2;        if (component.isRoot()) {          textX=x + lineHeight;          textY=y - (int)(classBounds.getHeight() + idBounds.getHeight());        }        g.drawString(name,textX,textY);        if (component.isRoot()) {          textX=x + lineHeight;          textY=y - (int)(idBounds.getHeight());        } else {          textX=x + w / 2 - ((int)idBounds.getWidth()) / 2;          textY+=(int)(idBounds.getHeight());        }        g.drawString(id,textX,textY);      } else {        String text=id != null ? id : name;        Rectangle2D stringBounds=font.getStringBounds(text,fontRenderContext);        int textX=x + w / 2 - ((int)stringBounds.getWidth()) / 2;        int textY=y + h / 2 + ((int)stringBounds.getHeight()) / 2;        g.drawString(text,textX,textY);      }      g.dispose();    }  }  for (  NlComponent child : component.getChildren()) {    needsRepaint|=drawComponent(gc,child,viewHandlerManager,handlesPainting);  }  return needsRepaint;}  }
class C{  public boolean isPronounceable(String word){  String lowerCaseWord=word.toLowerCase();  if (prefixFSM == null || suffixFSM == null) {    throw new Error("null");  } else {    return (prefixFSM.accept(lowerCaseWord) && suffixFSM.accept(lowerCaseWord));  }}  }
class C{  private LDocumentListener(){}  }
class C{  public void scroll(int itemsToScroll,int time){  int distance=itemsToScroll * getItemHeight() - scrollingOffset;  scroller.scroll(distance,time);}  }
class C{  public void disconnected(VmEvent event){  ErrorManager.getDefault().log("Disconnect " + event.getMonitoredVm().getVmIdentifier());  disableListeners();  monitoredVm.detach();}  }
class C{  public static <T>IStoredList<T> createHashList(){  return new HashedSimpleLockIStoredList<T>(false);}  }
class C{  private boolean tinkerFastCrashProtect(){  ApplicationLike applicationLike=TinkerManager.getTinkerApplicationLike();  if (applicationLike == null || applicationLike.getApplication() == null) {    return false;  }  if (!TinkerApplicationHelper.isTinkerLoadSuccess(applicationLike)) {    return false;  }  final long elapsedTime=SystemClock.elapsedRealtime() - applicationLike.getApplicationStartElapsedTime();  if (elapsedTime < QUICK_CRASH_ELAPSE) {    String currentVersion=TinkerApplicationHelper.getCurrentVersion(applicationLike);    if (ShareTinkerInternals.isNullOrNil(currentVersion)) {      return false;    }    SharedPreferences sp=applicationLike.getApplication().getSharedPreferences(ShareConstants.TINKER_SHARE_PREFERENCE_CONFIG,Context.MODE_MULTI_PROCESS);    int fastCrashCount=sp.getInt(currentVersion,0);    if (fastCrashCount >= MAX_CRASH_COUNT) {      SampleTinkerReport.onFastCrashProtect();      TinkerApplicationHelper.cleanPatch(applicationLike);      TinkerLog.e(TAG,"tinker has fast crash more than %d, we just clean patch!",fastCrashCount);      return true;    } else {      sp.edit().putInt(currentVersion,++fastCrashCount).commit();      TinkerLog.e(TAG,"tinker has fast crash %d times",fastCrashCount);    }  }  return false;}  }
class C{  public static SequenceSchema inferSequenceMulti(List<List<List<Writable>>> record){  SequenceSchema.Builder builder=new SequenceSchema.Builder();  int minSequenceLength=record.get(0).size();  int maxSequenceLength=record.get(0).size();  for (int i=0; i < record.size(); i++) {    if (record.get(i) instanceof DoubleWritable)     builder.addColumnDouble(String.valueOf(i)); else     if (record.get(i) instanceof IntWritable)     builder.addColumnInteger(String.valueOf(i)); else     if (record.get(i) instanceof LongWritable)     builder.addColumnLong(String.valueOf(i)); else     if (record.get(i) instanceof FloatWritable)     builder.addColumnFloat(String.valueOf(i)); else     throw new IllegalStateException("Illegal writable for infering schema of type " + record.get(i).getClass().toString() + " with record "+ record.get(0));    builder.minSequenceLength(Math.min(record.get(i).size(),minSequenceLength));    builder.maxSequenceLength(Math.max(record.get(i).size(),maxSequenceLength));  }  return builder.build();}  }
class C{  public int findHeaderPositionUnder(int x,int y){  for (int i=0; i < mHeaderRects.size(); i++) {    Rect rect=mHeaderRects.get(mHeaderRects.keyAt(i));    if (rect.contains(x,y)) {      int position=mHeaderRects.keyAt(i);      if (mVisibilityAdapter == null || mVisibilityAdapter.isPositionVisible(position)) {        return position;      }    }  }  return -1;}  }
class C{  public Matrix timesTriangular(Matrix B){  if (B.m != n)   throw new IllegalArgumentException("Matrix inner dimensions must agree.");  Matrix X=new Matrix(m,B.n);  double[][] c=X.getArray();  double[][] b;  double s=0;  double[] Arowi;  double[] Browj;  b=B.getArray();  for (int i=0; i < m; i++) {    Arowi=A[i];    for (int j=0; j < B.n; j++) {      s=0;      Browj=b[j];      for (int k=0; k <= j; k++) {        s+=Arowi[k] * Browj[k];      }      c[i][j]=s;    }  }  return X;}  }
class C{  public CauchyDistribution(double median,double scale) throws MathIllegalArgumentException {  if (scale <= 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.SCALE,scale);  }  this.scale=scale;  this.median=median;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final int fuzzyThreshold,final float scaleFactor,final boolean isTouchEvent){  final int deltaValue, currentScrollValue, scrollValue;switch (view.getPullToRefreshScrollDirection()) {case HORIZONTAL:    deltaValue=deltaX;  scrollValue=scrollX;currentScrollValue=view.getScrollX();break;case VERTICAL:default :deltaValue=deltaY;scrollValue=scrollY;currentScrollValue=view.getScrollY();break;}if (view.isPullToRefreshOverScrollEnabled() && !view.isRefreshing()) {final Mode mode=view.getMode();if (mode.permitsPullToRefresh() && !isTouchEvent && deltaValue != 0) {final int newScrollValue=(deltaValue + scrollValue);if (PullToRefreshBase.DEBUG) {Log.d(LOG_TAG,"OverScroll. DeltaX: " + deltaX + ", ScrollX: "+ scrollX+ ", DeltaY: "+ deltaY+ ", ScrollY: "+ scrollY+ ", NewY: "+ newScrollValue+ ", ScrollRange: "+ scrollRange+ ", CurrentScroll: "+ currentScrollValue);}if (newScrollValue < (0 - fuzzyThreshold)) {if (mode.showHeaderLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue)));}} else if (newScrollValue > (scrollRange + fuzzyThreshold)) {if (mode.showFooterLoadingLayout()) {if (currentScrollValue == 0) {view.setState(State.OVERSCROLLING);}view.setHeaderScroll((int)(scaleFactor * (currentScrollValue + newScrollValue - scrollRange)));}} else if (Math.abs(newScrollValue) <= fuzzyThreshold || Math.abs(newScrollValue - scrollRange) <= fuzzyThreshold) {view.setState(State.RESET);}} else if (isTouchEvent && State.OVERSCROLLING == view.getState()) {view.setState(State.RESET);}}}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelBuffCounterATK_A_TO_B(String skillcaster,int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200967,skillcaster,num0,skilltarget,skillname);}  }
class C{  public static List<PageLabel> create(int total,int s,int ITEM_NUMBER,int pages){  if (ITEM_NUMBER <= 0)   return null;  if (s < 0) {    s=0;  }  List<PageLabel> list=new ArrayList<PageLabel>(pages * 2 + 4);  int prev=s - ITEM_NUMBER;  for (int i=0; i < pages && prev >= 0; i++) {    list.add(new PageLabel(Integer.toString(prev / ITEM_NUMBER + 1),prev,ITEM_NUMBER,prev));    prev-=ITEM_NUMBER;  }  int next=s + ITEM_NUMBER;  if (total > 0) {    while (list.size() < 2 * pages && next < total) {      list.add(new PageLabel(Integer.toString(next / ITEM_NUMBER + 1),next,ITEM_NUMBER,next));      next+=ITEM_NUMBER;    }  }  while (list.size() < 2 * pages && prev >= 0) {    list.add(new PageLabel(Integer.toString(prev / ITEM_NUMBER + 1),prev,ITEM_NUMBER,prev));    prev-=ITEM_NUMBER;  }  if (s > 0) {    list.add(new PageLabel("&lt;",s - ITEM_NUMBER,ITEM_NUMBER,Integer.MIN_VALUE + 1));  }  if (prev >= 0) {    list.add(new PageLabel("&lt;&lt;",0,ITEM_NUMBER,Integer.MIN_VALUE));  }  list.add(new PageLabel(Integer.toString(s / ITEM_NUMBER + 1),s,ITEM_NUMBER,s,true));  if (total < 0 || s < total - ITEM_NUMBER) {    list.add(new PageLabel("&gt;",s + ITEM_NUMBER,ITEM_NUMBER,Integer.MAX_VALUE - 1));    if (next < total) {      list.add(new PageLabel("&gt;&gt;",total / ITEM_NUMBER * ITEM_NUMBER,ITEM_NUMBER,Integer.MAX_VALUE));    }  }  Collections.sort(list);  return list;}  }
class C{  public Builder removeAllColumnsExceptFor(String... columnNames){  return transform(new RemoveAllColumnsExceptForTransform(columnNames));}  }
class C{  private boolean validateOperationId(Operation operation,String urlPath,String operationType){  if (Strings.isNullOrEmpty(operation.getOperationId())) {    addDiag(Diag.error(createOperationLocation(operationType,urlPath),"Operation does not have the required 'operationId' field. Please specify unique" + " value for 'operationId' field for all operations."));    return false;  }  String operationId=operation.getOperationId();  String sanitizedOperationId=NameConverter.operationIdToMethodName(operationId);  if (duplicateOperationIdLookup.containsKey(sanitizedOperationId)) {    String dupeOperationId=duplicateOperationIdLookup.get(sanitizedOperationId);    Location errorLocation=createOperationLocation(operationType,urlPath);    String errorMessage=String.format("operationId '%s' has duplicate entry",operationId);    if (!operationId.equals(dupeOperationId)) {      errorLocation=SimpleLocation.TOPLEVEL;      errorMessage+=String.format(". Duplicate operationId found is '%s'. The two operationIds result into same " + "underlying method name '%s'. Please use unique values for operationId",dupeOperationId,sanitizedOperationId);    }    addDiag(Diag.error(errorLocation,errorMessage));    return false;  }  duplicateOperationIdLookup.put(sanitizedOperationId,operationId);  return true;}  }
class C{  public DistilledPagePrefsView(Context context,AttributeSet attrs){  super(context,attrs);  mDistilledPagePrefs=DomDistillerServiceFactory.getForProfile(Profile.getLastUsedProfile()).getDistilledPagePrefs();  mColorModeButtons=new EnumMap<Theme,RadioButton>(Theme.class);  mPercentageFormatter=NumberFormat.getPercentInstance(Locale.getDefault());}  }
class C{  public static SessionId generateIdentifier(){  SessionId sessionId=new SessionId();  sessionId.identifier=String.valueOf(System.currentTimeMillis()).concat("-").concat(UUID.randomUUID().toString());  return sessionId;}  }
class C{  private Record emptyRecord(Key key){  return new RecordImpl(key,Iterators.<Map.Entry<UUID,Compaction>>emptyIterator(),Iterators.<Map.Entry<UUID,Change>>emptyIterator(),Iterators.<RecordEntryRawMetadata>emptyIterator());}  }
class C{  public void removeLocators(LookupLocator[] locators){  testSetForNull(locators);synchronized (this) {    if (terminated) {      throw new IllegalStateException("discovery terminated");    }    HashMap groupsMap=new HashMap(1);    for (int i=0; i < locators.length; i++) {      LocatorReg reg=removeDiscoveredLocator(locators[i]);      if (reg != null) {        groupsMap.put(reg.proxy,reg.memberGroups);        continue;      }      reg=findReg(locators[i]);      if (reg != null) {        undiscoveredLocators.remove(reg);      }    }    if (!groupsMap.isEmpty() && !listeners.isEmpty()) {      addNotify((ArrayList)listeners.clone(),groupsMap,true);    }  }}  }
class C{  private void trimToSize(int maxSize){  while (true) {    String key;    Bitmap value;synchronized (this) {      if (size < 0 || (map.isEmpty() && size != 0)) {        throw new IllegalStateException(getClass().getName() + ".sizeOf() is reporting inconsistent results!");      }      if (size <= maxSize || map.isEmpty()) {        break;      }      Map.Entry<String,Bitmap> toEvict=map.entrySet().iterator().next();      if (toEvict == null) {        break;      }      key=toEvict.getKey();      value=toEvict.getValue();      map.remove(key);      size-=sizeOf(key,value);    }  }}  }
class C{  private Metrics createMetricsByDimension(ObjectName objectName){  Map<String,String> dimensionMap=Maps.newHashMap();  dimensionMap.put("MBean",objectName.toString());  return Metrics.create(dimensionMap);}  }
class C{  public static Point point(double x,double y){  return new PointImpl(x,y);}  }
class C{  public int size(){  return size;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  @deprecated public StringCharacterIterator(String text,int begin,int end,int pos){  if (text == null) {    throw new NullPointerException();  }  this.text=text;  if ((begin < 0) || (begin > end) || (end > text.length())) {    throw new IllegalArgumentException("Invalid substring range");  }  if ((pos < begin) || (pos > end)) {    throw new IllegalArgumentException("Invalid position");  }  this.begin=begin;  this.end=end;  this.pos=pos;}  }
class C{  private AudioInputStream synthesizeOneSection(List<Element> tokensAndBoundaries,Voice voice,String currentStyle,String currentEffect,AudioFormat targetFormat,String outputParams) throws SynthesisException, UnsupportedAudioFileException {  if (!containsPhoneDescendants(tokensAndBoundaries)) {    Log.w(Mary.LOG,"No PHONE segments found in this section; will not attempt to synthesize it!");    return null;  }  EffectsApplier ef=new EffectsApplier();  ef.setHMMEffectParameters(voice,currentEffect);  AudioInputStream ais=null;  ais=voice.synthesize(tokensAndBoundaries,outputParams);  if (ais == null)   return null;  if (!ais.getFormat().matches(targetFormat)) {    Log.i(Mary.LOG,"Audio format conversion required for voice " + voice.getName());    try {      AudioInputStream intermedStream=AudioSystem.getAudioInputStream(targetFormat,ais);      ais=intermedStream;    } catch (    IllegalArgumentException iae) {      boolean solved=false;      if (!targetFormat.getEncoding().equals(ais.getFormat()) && targetFormat.getSampleRate() != ais.getFormat().getSampleRate()) {        AudioFormat sampleRateConvFormat=new AudioFormat(ais.getFormat().getEncoding(),targetFormat.getSampleRate(),ais.getFormat().getSampleSizeInBits(),ais.getFormat().getChannels(),ais.getFormat().getFrameSize(),ais.getFormat().getFrameRate(),ais.getFormat().isBigEndian());        try {          AudioInputStream intermedStream=AudioSystem.getAudioInputStream(sampleRateConvFormat,ais);          ais=AudioSystem.getAudioInputStream(targetFormat,intermedStream);          solved=true;        } catch (        IllegalArgumentException iae1) {        }      }      if (!solved)       throw new UnsupportedAudioFileException("Conversion from audio format " + ais.getFormat() + " to requested audio format "+ targetFormat+ " not supported.\n"+ iae.getMessage());    }  }  if (currentEffect != null && !currentEffect.equals("")) {    ais=ef.apply(ais,currentEffect);  }  return ais;}  }
class C{  public boolean equals(Object obj){  return ReferentUuids.compare(this,obj);}  }
class C{  public void gatherArtifactInfo(ArtifactInfoContext aic){}  }
class C{  public boolean isSubMenu(){  return isSubMenu;}  }
class C{  private void animatePanelToState(PanelState state,StateChangeReason reason){  animatePanelToState(state,reason,BASE_ANIMATION_DURATION_MS);}  }
class C{  public List<DependencyGraph> dependencyTreebankTraining(){switch (language) {case ENGLISH:    return DependencyGraphReader.read("/export/dat/udt/en/en-ud-train.conllu",'u');case VIETNAMESE:  return DependencyGraphReader.read("/export/dat/udt/vi/01-training.conll",'x');}return null;}  }
class C{  private static void decreaseItemFromPlayer(Player seller,Item item,TradeItem tradeItem){  seller.getInventory().decreaseItemCount(item,tradeItem.getCount());  seller.getStore().getTradeItemByObjId(item.getObjectId()).decreaseCount(tradeItem.getCount());}  }
class C{  public static String readLabelFile(String entrySeparator,boolean ensureInitialBoundary,String trfname) throws IOException {  BufferedReader lab=new BufferedReader(new FileReader(trfname));  try {    XwavesLabelfileReader xlds=new XwavesLabelfileReader(trfname);    String result=StringUtils.join(entrySeparator,xlds.getLabelSymbols());    if (ensureInitialBoundary && result.charAt(0) != '_') {      result="_" + entrySeparator + result;    }    return result;  }  finally {    lab.close();  }}  }
class C{  public static final float toJulian(Date date){  Calendar c=Calendar.getInstance();  c.setTime(date);  return toJulian(c);}  }
class C{  public String[] parseConfiguration(String xmlLocation) throws IOException, SAXException {  URL fileURL=null;  if (xmlLocation.startsWith("http") || xmlLocation.startsWith("file:")) {    fileURL=new URL(xmlLocation);  } else {    fileURL=new File(xmlLocation).toURI().toURL();  }  if (fileURL == null)   throw new FileNotFoundException("XML Location [" + xmlLocation + "] not found");  return (parseConfiguration(fileURL));}  }
class C{  public Map<String,Object> selectAgreement(String agreementId){  Map<String,Object> result=null;  GenericValue agreement=null;  if ((this.delegator == null) || (this.dispatcher == null) || (this.cart == null)) {    result=ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderDispatcherOrDelegatorOrCartArgumentIsNull",this.cart.getLocale()));    return result;  }  if ((agreementId == null) || (agreementId.length() <= 0)) {    result=ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderNoAgreementSpecified",this.cart.getLocale()));    return result;  }  try {    agreement=EntityQuery.use(this.delegator).from("Agreement").where("agreementId",agreementId).cache(true).queryOne();  } catch (  GenericEntityException e) {    Debug.logWarning(e.toString(),module);    result=ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderCouldNotGetAgreement",UtilMisc.toMap("agreementId",agreementId),this.cart.getLocale()) + UtilProperties.getMessage(resource_error,"OrderError",this.cart.getLocale()) + e.getMessage());    return result;  }  if (agreement == null) {    result=ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderCouldNotGetAgreement",UtilMisc.toMap("agreementId",agreementId),this.cart.getLocale()));  } else {    cart.setAgreementId(agreementId);    try {      List<GenericValue> agreementItems=agreement.getRelated("AgreementItem",UtilMisc.toMap("agreementItemTypeId","AGREEMENT_PRICING_PR"),null,false);      if (agreementItems.size() > 0) {        GenericValue agreementItem=agreementItems.get(0);        String currencyUomId=(String)agreementItem.get("currencyUomId");        if (UtilValidate.isNotEmpty(currencyUomId)) {          try {            cart.setCurrency(dispatcher,currencyUomId);          } catch (          CartItemModifyException ex) {            result=ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderSetCurrencyError",this.cart.getLocale()) + ex.getMessage());            return result;          }        }      }    } catch (    GenericEntityException e) {      Debug.logWarning(e.toString(),module);      result=ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderCouldNotGetAgreementItemsThrough",UtilMisc.toMap("agreementId",agreementId),this.cart.getLocale()) + UtilProperties.getMessage(resource_error,"OrderError",this.cart.getLocale()) + e.getMessage());      return result;    }    try {      cart.removeOrderTerms();      List<GenericValue> agreementTerms=EntityUtil.filterByDate(agreement.getRelated("AgreementTerm",null,null,false));      if (agreementTerms.size() > 0) {        for (int i=0; agreementTerms.size() > i; i++) {          GenericValue agreementTerm=agreementTerms.get(i);          String termTypeId=(String)agreementTerm.get("termTypeId");          BigDecimal termValue=agreementTerm.getBigDecimal("termValue");          Long termDays=(Long)agreementTerm.get("termDays");          String textValue=agreementTerm.getString("textValue");          cart.addOrderTerm(termTypeId,termValue,termDays,textValue);        }      }    } catch (    GenericEntityException e) {      Debug.logWarning(e.toString(),module);      result=ServiceUtil.returnError(UtilProperties.getMessage(resource_error,"OrderCouldNotGetAgreementTermsThrough",UtilMisc.toMap("agreementId",agreementId),this.cart.getLocale()) + UtilProperties.getMessage(resource_error,"OrderError",this.cart.getLocale()) + e.getMessage());      return result;    }  }  return result;}  }
class C{  public void init$Children(){}  }
class C{  public void discovered(DiscoveryEvent e){  ServiceRegistrar[] proxys=e.getRegistrars();  Map groupsMap=e.getGroups();  HashMap discoveredGroupsMap=new HashMap(proxys.length);  for (int i=0; i < proxys.length; i++) {synchronized (discoveredSet) {      ProxyReg reg=findReg(proxys[i]);      if (reg == null) {        reg=new ProxyReg(proxys[i],(String[])(groupsMap.get(proxys[i])),FROM_LOCATOR);        addDiscoveredSet(reg);        discoveredGroupsMap.put(proxys[i],groupsMap.get(proxys[i]));      } else {        reg.addFrom(FROM_LOCATOR);      }    }  }  notifyListener(discoveredGroupsMap,DISCOVERED);}  }
class C{  public int[] toArray(){  int[] result=new int[size()];  int[] set=_set;  byte[] states=_states;  for (int i=states.length, j=0; i-- > 0; ) {    if (states[i] == FULL) {      result[j++]=set[i];    }  }  return result;}  }
class C{  public void removeControlListener(Control cl){  m_controls.remove(cl);}  }
class C{  public static int[] shuffle(int[] intArray,int shuffleCount){  int length;  if (intArray == null || shuffleCount < 0 || (length=intArray.length) < shuffleCount) {    return null;  }  int[] out=new int[shuffleCount];  for (int i=1; i <= shuffleCount; i++) {    int random=getRandom(length - i);    out[i - 1]=intArray[random];    int temp=intArray[length - i];    intArray[length - i]=intArray[random];    intArray[random]=temp;  }  return out;}  }
class C{  public void activate(){}  }
class C{  protected String buildIndexLine(CommandSender sender,HelpTopic topic){  StringBuilder line=new StringBuilder();  line.append(ChatColor.GOLD);  line.append(topic.getName());  line.append(": ");  line.append(ChatColor.WHITE);  line.append(topic.getShortText());  return line.toString();}  }
class C{  public boolean clearCart(){  this.cart.clear();  return true;}  }
class C{  private void tailorDigestBits(){  int t;switch (hashSize) {case HAVAL_128_BIT:    t=(h7 & 0x000000FF) | (h6 & 0xFF000000) | (h5 & 0x00FF0000)| (h4 & 0x0000FF00);  h0+=t >>> 8 | t << 24;t=(h7 & 0x0000FF00) | (h6 & 0x000000FF) | (h5 & 0xFF000000)| (h4 & 0x00FF0000);h1+=t >>> 16 | t << 16;t=(h7 & 0x00FF0000) | (h6 & 0x0000FF00) | (h5 & 0x000000FF)| (h4 & 0xFF000000);h2+=t >>> 24 | t << 8;t=(h7 & 0xFF000000) | (h6 & 0x00FF0000) | (h5 & 0x0000FF00)| (h4 & 0x000000FF);h3+=t;break;case HAVAL_160_BIT:t=(h7 & 0x3F) | (h6 & (0x7F << 25)) | (h5 & (0x3F << 19));h0+=t >>> 19 | t << 13;t=(h7 & (0x3F << 6)) | (h6 & 0x3F) | (h5 & (0x7F << 25));h1+=t >>> 25 | t << 7;t=(h7 & (0x7F << 12)) | (h6 & (0x3F << 6)) | (h5 & 0x3F);h2+=t;t=(h7 & (0x3F << 19)) | (h6 & (0x7F << 12)) | (h5 & (0x3F << 6));h3+=(t >>> 6);t=(h7 & (0x7F << 25)) | (h6 & (0x3F << 19)) | (h5 & (0x7F << 12));h4+=(t >>> 12);break;case HAVAL_192_BIT:t=(h7 & 0x1F) | (h6 & (0x3F << 26));h0+=t >>> 26 | t << 6;t=(h7 & (0x1F << 5)) | (h6 & 0x1F);h1+=t;t=(h7 & (0x3F << 10)) | (h6 & (0x1F << 5));h2+=(t >>> 5);t=(h7 & (0x1F << 16)) | (h6 & (0x3F << 10));h3+=(t >>> 10);t=(h7 & (0x1F << 21)) | (h6 & (0x1F << 16));h4+=(t >>> 16);t=(h7 & (0x3F << 26)) | (h6 & (0x1F << 21));h5+=(t >>> 21);break;case HAVAL_224_BIT:h0+=((h7 >>> 27) & 0x1F);h1+=((h7 >>> 22) & 0x1F);h2+=((h7 >>> 18) & 0x0F);h3+=((h7 >>> 13) & 0x1F);h4+=((h7 >>> 9) & 0x0F);h5+=((h7 >>> 4) & 0x1F);h6+=(h7 & 0x0F);}}  }
class C{  public NewsfeedSearchQuery endTime(Integer value){  return unsafeParam("end_time",value);}  }
class C{  public double[] computeDerivatives(final double t,final double[] y) throws MathIllegalArgumentException, MathIllegalStateException {  final double[] yDot=new double[mapper.getTotalDimension()];  int index=0;  final double[] primaryState=mapper.extractEquationData(index,y);  final double[] primaryStateDot=primary.computeDerivatives(t,primaryState);  mapper.insertEquationData(index,primaryStateDot,yDot);  while (++index < mapper.getNumberOfEquations()) {    final double[] componentState=mapper.extractEquationData(index,y);    final double[] componentStateDot=components.get(index - 1).computeDerivatives(t,primaryState,primaryStateDot,componentState);    mapper.insertEquationData(index,componentStateDot,yDot);  }  return yDot;}  }
class C{  public Collection<String> targetFields(){  return new ArrayList<String>(fldVals.keySet());}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  public DiscoveryEvent(Object source,ServiceRegistrar[] regs){  super(source);  this.regs=regs;  this.groups=null;}  }
class C{  static public int encode_vX_vY(float vx,float vy){  float[] arc_mag=getArc(vx,vy);  int argb=encode_vA_vM(arc_mag[0],arc_mag[1]);  return argb;}  }
class C{  public FileEntry newChildInstance(File file){  return new FileEntry(this,file);}  }
class C{  public static void main(String[] args){  try {    ProgramProperties.setProgramName("ReferencesAnnotator");    ProgramProperties.setProgramVersion(megan.main.Version.SHORT_DESCRIPTION);    PeakMemoryUsageMonitor.start();    (new ReferencesAnnotator()).run(args);    System.err.println("Total time:  " + PeakMemoryUsageMonitor.getSecondsSinceStartString());    System.err.println("Peak memory: " + PeakMemoryUsageMonitor.getPeakUsageString());    System.exit(0);  } catch (  Exception ex) {    Basic.caught(ex);    System.exit(1);  }}  }
class C{  public void keyReleased(KeyEvent ke){  if ((ke.getModifiers() & InputEvent.SHIFT_MASK) != 0) {    viewer.resetCursor();  }}  }
class C{  final void fillQName(QName toFill,String uri,String localpart,String prefix){  uri=(uri != null && uri.length() > 0) ? fSymbolTable.addSymbol(uri) : null;  localpart=(localpart != null) ? fSymbolTable.addSymbol(localpart) : XMLSymbols.EMPTY_STRING;  prefix=(prefix != null && prefix.length() > 0) ? fSymbolTable.addSymbol(prefix) : XMLSymbols.EMPTY_STRING;  String raw=localpart;  if (prefix != XMLSymbols.EMPTY_STRING) {    fStringBuffer.clear();    fStringBuffer.append(prefix);    fStringBuffer.append(':');    fStringBuffer.append(localpart);    raw=fSymbolTable.addSymbol(fStringBuffer.ch,fStringBuffer.offset,fStringBuffer.length);  }  toFill.setValues(prefix,localpart,raw,uri);}  }
class C{  public AggregationSet count(String path){  return add(new CountAggregator().setPath(path));}  }
class C{  public static double varianceDifference(final double[] sample1,final double[] sample2,double meanDifference) throws MathIllegalArgumentException {  double sum1=0d;  double sum2=0d;  double diff=0d;  int n=sample1.length;  MathArrays.checkEqualLength(sample1,sample2);  if (n < 2) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL,n,2);  }  for (int i=0; i < n; i++) {    diff=sample1[i] - sample2[i];    sum1+=(diff - meanDifference) * (diff - meanDifference);    sum2+=diff - meanDifference;  }  return (sum1 - (sum2 * sum2 / n)) / (n - 1);}  }
class C{  @Override protected void paintComponent(Graphics g){  super.paintComponent(g);  g.setColor(backgroundColour);  int width=this.getWidth();  int height=this.getHeight();  g.fillRect(0,0,width - 1,height - 1);  if (validSymbol) {    if (bImage != null) {      g.drawImage(bImage,0,0,null);    }  } else {    String displayString=dataLoaded ? INVALID_SYMBOL_STRING : NO_DATA_SOURCE;    g.setColor(Color.black);    Rectangle2D bounds=g.getFontMetrics().getStringBounds(displayString,g);    double x=(width / 2) - (bounds.getWidth() / 2);    double y=(height / 2) - (bounds.getHeight() / 2);    g.drawString(displayString,(int)x,(int)y);  }  g.setColor(Color.black);  g.drawRect(0,0,width - 1,height - 1);}  }
class C{  public MarketAddAlbumQuery photoId(Integer value){  return unsafeParam("photo_id",value);}  }
class C{  public void clear(){  vPreviousDecisions.clear();}  }
class C{  public AemInsertWindow openInsertWindow(){  wait.withTimeout(Timeouts.BIG).until(null,2);  return insertWindow;}  }
class C{  public static float toFloat(Object v,float defaultValue){  if (v != null) {    if (v instanceof Integer) {      return (Integer)v;    }    if (v instanceof Float) {      return (Float)v;    }    if (v instanceof Double) {      return (float)((Double)v).doubleValue();    }    String s=v.toString();    StringBuilder sb=new StringBuilder();    for (int i=0; i < s.length(); i++) {      char c=X.getNumber(s.charAt(i));      if (c >= '0' && c <= '9') {        sb.append(c);      } else       if (c == '-' && sb.length() == 0) {        sb.append(c);      } else       if (c == '.') {        if (sb.indexOf(".") > -1) {          break;        } else {          sb.append(c);        }      } else       if (sb.length() > 0) {        break;      }    }    s=sb.toString();    if (s.length() > 0) {      try {        return Float.parseFloat(s);      } catch (      Exception e) {        log.error(e);      }    }  }  return defaultValue;}  }
class C{  public double end(){  double error=0;  for (int i=0; i < after.length; ++i) {    after[i]+=previous[i] + scaled[i];    if (i < mainSetDimension) {      final double yScale=FastMath.max(FastMath.abs(previous[i]),FastMath.abs(after[i]));      final double tol=(vecAbsoluteTolerance == null) ? (scalAbsoluteTolerance + scalRelativeTolerance * yScale) : (vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * yScale);      final double ratio=(after[i] - before[i]) / tol;      error+=ratio * ratio;    }  }  return FastMath.sqrt(error / mainSetDimension);}  }
class C{  public boolean evaluateWord(String sWord){  return Dictionary.contains(sWord);}  }
class C{  private boolean findExperimentByPage(Experiment exp,Page page){  boolean found=false;  List<Experiment> experiments=getExperimentsByApplicationPage(new Application(exp.applicationName),page);  for (  Experiment e : experiments) {    if (e.label.equals(exp.label)) {      found=true;    }  }  return found;}  }
class C{  private Label createLabel(Composite parent,String text){  Label label=new Label(parent,SWT.LEFT);  label.setText(text);  GridData data=new GridData();  data.horizontalSpan=2;  data.horizontalAlignment=GridData.FILL;  label.setLayoutData(data);  return label;}  }
class C{  public EsAlarmMapping(){  mappings=new AlarmProperties();}  }
class C{  public boolean isQuiet(){  return quiet;}  }
class C{  public WorldMapNotExistException(String s){  super(s);}  }
class C{  private Vector resolveLocalSystemReverse(String systemId){  Vector map=new Vector();  String osname=System.getProperty("os.name");  boolean windows=(osname.indexOf("Windows") >= 0);  Enumeration en=catalogEntries.elements();  while (en.hasMoreElements()) {    CatalogEntry e=(CatalogEntry)en.nextElement();    if (e.getEntryType() == SYSTEM && (e.getEntryArg(1).equals(systemId) || (windows && e.getEntryArg(1).equalsIgnoreCase(systemId)))) {      map.addElement(e.getEntryArg(0));    }  }  if (map.size() == 0) {    return null;  } else {    return map;  }}  }
class C{  @Override public synchronized void stop(){  LOG.debug("Stopping server heartbeat.");  this.timer.cancel();  running=false;}  }
class C{  @Async @Override public MessageResponseStatus sendMessage(String subject,String text,String footer,User sender,Set<User> users,boolean forceSend){  String hostName=(String)systemSettingManager.getSystemSetting(SettingKey.EMAIL_HOST_NAME);  int port=(int)systemSettingManager.getSystemSetting(SettingKey.EMAIL_PORT);  String username=(String)systemSettingManager.getSystemSetting(SettingKey.EMAIL_USERNAME);  String password=(String)systemSettingManager.getSystemSetting(SettingKey.EMAIL_PASSWORD);  boolean tls=(boolean)systemSettingManager.getSystemSetting(SettingKey.EMAIL_TLS);  String from=(String)systemSettingManager.getSystemSetting(SettingKey.EMAIL_SENDER);  String errorMessage="No recipient found";  MessageResponseStatus status=new MessageResponseStatus();  if (hostName == null) {    return null;  }  String plainContent=renderPlainContent(text,sender);  String htmlContent=renderHtmlContent(text,footer,sender);  try {    HtmlEmail email=getHtmlEmail(hostName,port,username,password,tls,from);    email.setSubject(customizeTitle(DEFAULT_SUBJECT_PREFIX) + subject);    email.setTextMsg(plainContent);    email.setHtmlMsg(htmlContent);    boolean hasRecipients=false;    for (    User user : users) {      boolean doSend=forceSend || (Boolean)userSettingService.getUserSetting(UserSettingKey.MESSAGE_EMAIL_NOTIFICATION,user);      if (doSend && ValidationUtils.emailIsValid(user.getEmail())) {        if (isEmailValid(user.getEmail())) {          email.addBcc(user.getEmail());          log.info("Sending email to user: " + user.getUsername() + " with email address: "+ user.getEmail()+ " to host: "+ hostName+ ":"+ port);          hasRecipients=true;        } else {          log.error(user.getEmail() + " is not a valid email for user: " + user.getUsername());          errorMessage="No valid email address found";        }      }    }    if (hasRecipients) {      email.send();      log.info("Email sent using host: " + hostName + ":"+ port+ " with TLS: "+ tls);      status=new MessageResponseStatus("Email sent",EmailResponse.SENT,true);    } else {      status=new MessageResponseStatus(errorMessage,EmailResponse.ABORTED,false);    }  } catch (  EmailException ex) {    log.warn("Could not send email: " + ex.getMessage() + ", "+ DebugUtils.getStackTrace(ex));    status=new MessageResponseStatus("Email not sent: " + ex.getMessage(),EmailResponse.FAILED,false);  }catch (  RuntimeException ex) {    log.warn("Error while sending email: " + ex.getMessage() + ", "+ DebugUtils.getStackTrace(ex));    status=new MessageResponseStatus("Email not sent: " + ex.getMessage(),EmailResponse.FAILED,false);  }  return status;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GATHER_SUCCESS_5_FORESTRY(String value0){  return new SM_SYSTEM_MESSAGE(1330020,value0);}  }
class C{  private void animatePanelTo(float height,long duration){  animateProperty(Property.PANEL_HEIGHT,getHeight(),height,duration);}  }
class C{  public Object[] updateMultiple(IEntryPacket[] entries,Transaction txn,long[] leases,SpaceContext sc,int operationModifiers,boolean newRouter) throws UnusableEntryException, UnknownTypeException, TransactionException, RemoteException {  monitorMemoryUsage(true);  monitorReplicationStateForModifyingOperation(txn);  for (int i=0; i < entries.length; i++) {    _typeManager.loadServerTypeDesc(entries[i]);  }  XtnEntry txnEntry=null;  if (txn != null) {    txnEntry=attachToXtn((ServerTransaction)txn,false);    attachFromGatewayStateToTransactionIfNeeded(sc,txnEntry);  }  Context context=null;  try {    context=_cacheManager.getCacheContext();    if (_isSyncReplication)     context.setSyncReplFromMultipleOperation(true);    context.setMultipleOperation();    setFromGatewayIfNeeded(sc,context);    if (txnEntry == null)     return updateMultipleLoop(context,entries,leases,null,sc,operationModifiers,newRouter);    txnEntry.lock();    try {      if (!txnEntry.m_Active)       throw new TransactionException("The transaction is not active: " + txnEntry.m_Transaction);      context.setTransactionalMultipleOperation(true);      return updateMultipleLoop(context,entries,leases,txnEntry,sc,operationModifiers,newRouter);    }  finally {      txnEntry.unlock();    }  }  finally {    if (txnEntry != null)     txnEntry.decrementUsed(true);    replicateAndfreeCache(context);  }}  }
class C{  private boolean isBetween(double value,double boundary1,double boundary2){  return (value >= boundary1 && value <= boundary2) || (value >= boundary2 && value <= boundary1);}  }
class C{  public int failed(String ip,String sid,String useragent){  set("failtimes",getInt("failtimes") + 1);  return Lock.locked(getId(),sid,ip,useragent);}  }
class C{  private AudioInputStream imposeF0ContourOnVocalization(int sourceIndex,int targetIndex,AudioFileFormat aft,Element domElement) throws SynthesisException {  int numberOfBackChannels=unitFileReader.getNumberOfUnits();  if (targetIndex >= numberOfBackChannels) {    throw new IllegalArgumentException("This voice has " + numberOfBackChannels + " backchannels only. so it doesn't support unit number "+ targetIndex);  }  if (sourceIndex >= numberOfBackChannels) {    throw new IllegalArgumentException("This voice has " + numberOfBackChannels + " backchannels only. so it doesn't support unit number "+ sourceIndex);  }  VocalizationUnit bUnit=unitFileReader.getUnit(sourceIndex);  Unit[] units=bUnit.getUnits();  String[] unitNames=bUnit.getUnitNames();  long endTime=0l;  for (int i=0; i < units.length; i++) {    int unitDuration=units[i].duration * 1000 / unitFileReader.getSampleRate();    endTime+=unitDuration;    Element element=MaryXML.createElement(domElement.getOwnerDocument(),MaryXML.PHONE);    element.setAttribute("d",Integer.toString(unitDuration));    element.setAttribute("end",Long.toString(endTime));    element.setAttribute("p",unitNames[i]);    domElement.appendChild(element);  }  return this.vSynthesizer.synthesizeUsingImposedF0(sourceIndex,targetIndex,aft);}  }
class C{  public static ArrayWritable jsonArrayStringtoArrayWritable(String jsonString){  String modString=jsonString.replaceFirst("\\[","");  modString=modString.replaceFirst("\\]","");  modString=modString.replaceAll("\"","");  String[] elements=modString.split("\\s*,\\s*");  logger.debug("elements = ");  for (  String element : elements) {    logger.debug("element: " + element);  }  return new ArrayWritable(elements);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SubTypeBoostResist_ME_TO_SELF(String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200419,value0,skillname);}  }
class C{  public R compareTo(File f1){  return compareTo(new FileVersion(f1));}  }
class C{  public VideoSaveQuery link(String value){  return unsafeParam("link",value);}  }
class C{  @Override public void focusGained(FocusEvent arg0){}  }
class C{  public static InputStream toInputStream(CharSequence input,Charset encoding){  return toInputStream(input.toString(),encoding);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ITEM_SEAL_WARNING_DICOMPOSITION(String value0){  return new SM_SYSTEM_MESSAGE(1400847,value0);}  }
class C{  public static double times(double[] nums){  if (nums == null || nums.length == 0)   return 0;  double ret=1;  for (  double num : nums)   ret*=num;  return ret;}  }
class C{  public void clear(){  eDA.clear();}  }
class C{  private boolean checkForFastScroll(MotionEvent e1,MotionEvent e2){  float dt=e2.getEventTime() - e1.getEventTime();  if (dt <= 0)   return false;  float dist;switch (mScrollDirection) {case RIGHT:    dist=calculateBiasedPosition(e1.getX() + mCurrentTouchOffsetX,e2.getX() + mCurrentTouchOffsetX,dt);  break;case LEFT:dist=mHost.getViewportWidth() * mPxToDp - calculateBiasedPosition(e1.getX() + mCurrentTouchOffsetX,e2.getX() + mCurrentTouchOffsetX,dt);break;case DOWN:dist=calculateBiasedPosition(e1.getY() + mCurrentTouchOffsetY,e2.getY() + mCurrentTouchOffsetY,dt);break;default :dist=GUTTER_DISTANCE_DP;break;}return dist < GUTTER_DISTANCE_DP;}  }
class C{  static Object newInstance(String className,ClassLoader cl,boolean doFallback) throws ConfigurationError {  try {    Class providerClass=getProviderClass(className,cl,doFallback);    Object instance=providerClass.newInstance();    if (debug) {      dPrint("created new instance of " + providerClass + " using ClassLoader: "+ cl);    }    return instance;  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + className + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + className + " could not be instantiated: "+ x,x);  }}  }
class C{  protected int countToken(String token,String target){  int tokenIndex=0;  int count=0;  while (tokenIndex != -1) {    tokenIndex=target.indexOf(token,tokenIndex);    if (tokenIndex > -1) {      tokenIndex++;      count++;    }  }  return count;}  }
class C{  protected MessagesDenyMessagesFromCommunityQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  private void addBodyAction(){  SandboxBody body=AddBodyDialog.show(ControlUtilities.getParentWindow(this));  if (body != null) {synchronized (Simulation.LOCK) {      this.simulation.getWorld().addBody(body);    }    DefaultMutableTreeNode bodyNode=new DefaultMutableTreeNode(body);    this.model.insertNodeInto(bodyNode,this.bodyFolder,this.bodyFolder.getChildCount());    this.tree.expandPath(new TreePath(bodyNode.getPath()).getParentPath());  }}  }
class C{  private Node<K,V> findPredecessor(Comparable<? super K> key){  if (key == null)   throw new NullPointerException();  for (; ; ) {    Index<K,V> q=head;    Index<K,V> r=q.right;    for (; ; ) {      if (r != null) {        Node<K,V> n=r.node;        K k=n.key;        if (n.value == null) {          if (!q.unlink(r))           break;          r=q.right;          continue;        }        if (key.compareTo(k) > 0) {          q=r;          r=r.right;          continue;        }      }      Index<K,V> d=q.down;      if (d != null) {        q=d;        r=d.right;      } else       return q.node;    }  }}  }
class C{  private void afterUpdate(DataSupport baseObj){  if (!ignoreAssociations) {    updateAssociatedTableWithFK(baseObj);    insertIntermediateJoinTableValue(baseObj,true);    clearFKValueInAssociatedTable(baseObj);  }}  }
class C{  private void logSlowRequests(long requestLifetime,Request<?> request,byte[] responseContents,StatusLine statusLine){  if (DEBUG || requestLifetime > SLOW_REQUEST_THRESHOLD_MS) {    VolleyLog.d("HTTP response for request=<%s> [lifetime=%d], [size=%s], " + "[rc=%d], [retryCount=%s]",request,requestLifetime,responseContents != null ? responseContents.length : "null",statusLine.getStatusCode(),request.getRetryPolicy().getCurrentRetryCount());  }}  }
class C{  public void println(){  m_out.print("\n");}  }
class C{  @Nullable public static String openDialog(Module module,String title,boolean includeAll,@Nullable Condition<PsiClass> filter,@NotNull String... classes){  final Project project=module.getProject();  final DumbService dumbService=DumbService.getInstance(project);  if (dumbService.isDumb()) {    dumbService.showDumbModeNotification(String.format("%1$s are not available while indices are updating.",title));    return null;  }  final ChooseClassDialog dialog=new ChooseClassDialog(module,title,includeAll,filter,classes);  return dialog.showAndGet() ? dialog.getClassName() : null;}  }
class C{  public UsersSearchQuery groupId(Integer value){  return unsafeParam("group_id",value);}  }
class C{  @VisibleForTesting public Optional<Zone> findMatchingZone(String recordName){  val matchingZone=fetchMatchingZones(recordName).stream().reduce((null));  return matchingZone;}  }
class C{  public static byte[] encryptMD5(byte[] bytes){  try {    MessageDigest md=MessageDigest.getInstance("MD5");    md.update(bytes);    return md.digest();  } catch (  NoSuchAlgorithmException e) {    e.printStackTrace();  }  return new byte[0];}  }
class C{  public static String convertUPCEtoUPCA(String upce){  char[] upceChars=new char[6];  upce.getChars(1,7,upceChars,0);  StringBuilder result=new StringBuilder(12);  result.append(upce.charAt(0));  char lastChar=upceChars[5];switch (lastChar) {case '0':case '1':case '2':    result.append(upceChars,0,2);  result.append(lastChar);result.append("0000");result.append(upceChars,2,3);break;case '3':result.append(upceChars,0,3);result.append("00000");result.append(upceChars,3,2);break;case '4':result.append(upceChars,0,4);result.append("00000");result.append(upceChars[4]);break;default :result.append(upceChars,0,5);result.append("0000");result.append(lastChar);break;}result.append(upce.charAt(7));return result.toString();}  }
class C{  public INSECTFileDB(String sPrefix,String sBaseDir){  if (sPrefix == null)   Prefix=""; else   Prefix=sPrefix;  if (sBaseDir == null)   BaseDir="./"; else   BaseDir=sBaseDir;}  }
class C{  public TooManyIterationsException(Number max){  super(max);}  }
class C{  public CustomCachePolicy evictionStrategy(SpaceEvictionStrategy evictionStrategy){  setEvictionStrategy(evictionStrategy);  return this;}  }
class C{  protected void addPageLink(PaginationLink link,Pagination<?> pages){  link.getPage(pages).ifPresent(null);}  }
class C{  public Vector2 left(){  double temp=this.x;  this.x=this.y;  this.y=-temp;  return this;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_XPBoost_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201215,skillcaster,skillname);}  }
class C{  private KeyHook create(KeyBinding key){  if (key != null && key instanceof KeyHook) {    return (KeyHook)key;  }  return new KeyHook(key.getKeyDescription(),key.getKeyCode(),key.getKeyCategory());}  }
class C{  public Value count(Value obj){  return new AggregationFunction(obj,AggregationType.COUNT);}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  BookDao.createTable(db,ifNotExists);}  }
class C{  public boolean isAssignableFrom(final Type<?> other){  if (this == other) {    return true;  }  if (other == null) {    return false;  }  if (!this.getRawType().isAssignableFrom(other.getRawType())) {    return false;  }  if (!this.isParameterized && other.isParameterized) {    return true;  } else   if (this.rawType.equals(Enum.class) && other.isEnum()) {    return true;  } else {    Type<?> sp=other.getSuperType();    if (sp.getRawType() != Object.class && isAssignableFrom(sp)) {      return true;    }    if (this.getActualTypeArguments().length != other.getActualTypeArguments().length) {      return false;    }    java.lang.reflect.Type[] thisTypes=this.getActualTypeArguments();    java.lang.reflect.Type[] thatTypes=other.getActualTypeArguments();    for (int i=0, total=thisTypes.length; i < total; ++i) {      Type<?> thisType=(Type<?>)thisTypes[i];      Type<?> thatType=(Type<?>)thatTypes[i];      if (!thisType.isAssignableFrom(thatType)) {        return false;      }    }    return true;  }}  }
class C{  public WishlistCursor queryWishlists(){  QueryHelper qh=new QueryHelper();  qh.Distinct=false;  qh.Table=S.TABLE_WISHLIST;  qh.Columns=null;  qh.Selection=null;  qh.SelectionArgs=null;  qh.GroupBy=null;  qh.Having=null;  qh.OrderBy=null;  qh.Limit=null;  return new WishlistCursor(wrapHelper(qh));}  }
class C{  protected FaveRemoveLinkQuery linkId(String value){  return unsafeParam("link_id",value);}  }
class C{  public static boolean isLetter(char c){  return Character.isLetter(c);}  }
class C{  public polyglot.ast.Node compile(polyglot.frontend.Compiler compiler,String fileName,polyglot.frontend.ExtensionInfo extInfo){  SourceLoader source_loader=compiler.sourceExtension().sourceLoader();  try {    FileSource source=new FileSource(new File(fileName));    if (false)     throw new IOException("Bogus exception");    SourceJob job=null;    if (compiler.sourceExtension() instanceof soot.javaToJimple.jj.ExtensionInfo) {      soot.javaToJimple.jj.ExtensionInfo jjInfo=(soot.javaToJimple.jj.ExtensionInfo)compiler.sourceExtension();      if (jjInfo.sourceJobMap() != null) {        job=(SourceJob)jjInfo.sourceJobMap().get(source);      }    }    if (job == null) {      job=compiler.sourceExtension().addJob(source);    }    boolean result=false;    result=compiler.sourceExtension().runToCompletion();    if (!result) {      throw new soot.CompilationDeathException(0,"Could not compile");    }    polyglot.ast.Node node=job.ast();    return node;  } catch (  IOException e) {    return null;  }}  }
class C{  public PointList(int dimension) throws IllegalArgumentException {  this(dimension,16384);}  }
class C{  public void insertBefore(Chain<E> toInsert,E point){  LinkedList<E> backwardList=new LinkedList<E>();{    Iterator<E> it=toInsert.iterator();    while (it.hasNext())     backwardList.addFirst(it.next());  }  E previousPoint=point;  Iterator<E> it=backwardList.iterator();  while (it.hasNext()) {    E o=it.next();    insertBefore(o,previousPoint);    previousPoint=o;  }}  }
class C{  private static float centerFromEnd(int[] stateCount,int end){  return (float)(end - stateCount[4] - stateCount[3]) - stateCount[2] / 2.0f;}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute("set show-unaligned=" + !isSelected() + ";");}  }
class C{  public static double pow(double d,int e){  return pow(d,(long)e);}  }
class C{  @Override public boolean equals(Object that){  if (this == that) {    return true;  }  if (that == null) {    return false;  }  if (getClass() != that.getClass()) {    return false;  }  SysEvent other=(SysEvent)that;  return (this.getId() == null ? other.getId() == null : this.getId().equals(other.getId())) && (this.getTitle() == null ? other.getTitle() == null : this.getTitle().equals(other.getTitle())) && (this.getRequestUri() == null ? other.getRequestUri() == null : this.getRequestUri().equals(other.getRequestUri()))&& (this.getParammeters() == null ? other.getParammeters() == null : this.getParammeters().equals(other.getParammeters()))&& (this.getMethod() == null ? other.getMethod() == null : this.getMethod().equals(other.getMethod()))&& (this.getClientHost() == null ? other.getClientHost() == null : this.getClientHost().equals(other.getClientHost()))&& (this.getUserAgent() == null ? other.getUserAgent() == null : this.getUserAgent().equals(other.getUserAgent()))&& (this.getStatus() == null ? other.getStatus() == null : this.getStatus().equals(other.getStatus()))&& (this.getEnable() == null ? other.getEnable() == null : this.getEnable().equals(other.getEnable()))&& (this.getCreateBy() == null ? other.getCreateBy() == null : this.getCreateBy().equals(other.getCreateBy()))&& (this.getCreateTime() == null ? other.getCreateTime() == null : this.getCreateTime().equals(other.getCreateTime()))&& (this.getUpdateBy() == null ? other.getUpdateBy() == null : this.getUpdateBy().equals(other.getUpdateBy()))&& (this.getUpdateTime() == null ? other.getUpdateTime() == null : this.getUpdateTime().equals(other.getUpdateTime()))&& (this.getRemark() == null ? other.getRemark() == null : this.getRemark().equals(other.getRemark()));}  }
class C{  public static Bitmap cropBitmap(Context context,Uri loadedImageUri,float[] points,int degreesRotated,int orgWidth,int orgHeight,boolean fixAspectRatio,int aspectRatioX,int aspectRatioY,int reqWidth,int reqHeight){  Rect rect=getRectFromPoints(points,orgWidth,orgHeight,fixAspectRatio,aspectRatioX,aspectRatioY);  int width=reqWidth > 0 ? reqWidth : rect.width();  int height=reqHeight > 0 ? reqHeight : rect.height();  Bitmap result=null;  try {    result=decodeSampledBitmapRegion(context,loadedImageUri,rect,width,height);  } catch (  Exception ignored) {  }  if (result != null) {    result=rotateBitmapInt(result,degreesRotated);    if (degreesRotated % 90 != 0) {      result=cropForRotatedImage(result,points,rect,degreesRotated,fixAspectRatio,aspectRatioX,aspectRatioY);    }  } else {    try {      BitmapFactory.Options options=new BitmapFactory.Options();      options.inSampleSize=calculateInSampleSizeByReqestedSize(rect.width(),rect.height(),reqWidth,reqHeight);      Bitmap fullBitmap=decodeImage(context.getContentResolver(),loadedImageUri,options);      if (fullBitmap != null) {        result=cropBitmap(fullBitmap,points,degreesRotated,fixAspectRatio,aspectRatioX,aspectRatioY);        fullBitmap.recycle();      }    } catch (    Exception e) {      throw new RuntimeException("Failed to load sampled bitmap: " + loadedImageUri + "\r\n"+ e.getMessage(),e);    }  }  return result;}  }
class C{  public boolean isReleased(){  return mReleased;}  }
class C{  private static boolean isSeparator(char ch){  return ch == UNIX_SEPARATOR || ch == WINDOWS_SEPARATOR;}  }
class C{  private static void createMethod(Class clazz,String name,Method refMethod,ClassWriter cw,String methodName,String desc,boolean argsParams,boolean returnValue,Class... parameterTypes){  MethodGenerator mv=MethodGenerator.newVarargsMethod(cw,methodName,desc,null);  boolean isStatic=Modifier.isStatic(refMethod.getModifiers());  boolean isInteface=Modifier.isInterface(refMethod.getDeclaringClass().getModifiers());  final int invokeCode;  if (isStatic) {    invokeCode=Opcodes.INVOKESTATIC;  } else {    invokeCode=isInteface ? Opcodes.INVOKEINTERFACE : Opcodes.INVOKEVIRTUAL;    mv.castVariable(1,Type.getInternalName(clazz));  }  if (argsParams) {    for (int i=0; i < parameterTypes.length; ++i) {      mv.loadArrayItemFromVariable(2,i);      mv.unboxIfNeeded(parameterTypes[i]);    }  } else {    for (int i=0; i < parameterTypes.length; ++i) {      mv.loadVariable(i + 2);      mv.unboxIfNeeded(parameterTypes[i]);    }  }  mv.invokeMethodCustom(invokeCode,Type.getInternalName(clazz),name,Type.getMethodDescriptor(refMethod));  if (returnValue) {    mv.prepareResult(refMethod.getReturnType());    mv.returnObject();  } else   mv.returnVoid();}  }
class C{  @Override public void renderLimitLines(Canvas c){  List<LimitLine> limitLines=mXAxis.getLimitLines();  if (limitLines == null || limitLines.size() <= 0)   return;  float[] position=new float[2];  for (int i=0; i < limitLines.size(); i++) {    LimitLine l=limitLines.get(i);    if (!l.isEnabled())     continue;    position[0]=l.getLimit();    position[1]=0.f;    mTrans.pointValuesToPixel(position);    renderLimitLineLine(c,l,position);    renderLimitLineLabel(c,l,position,2.f + l.getYOffset());  }}  }
class C{  public XPathFunctionException(String message){  super(message);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ProcDPHeal_Instant_HEAL_ME_TO_SELF(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201234,num0,skillname);}  }
class C{  public Builder addColumnTime(String columnName,DateTimeZone timeZone){  return addColumnTime(columnName,timeZone,null,null);}  }
class C{  public QueryParams buildQueryParams(QueryParamsParserContext context){  try {    return queryParamsParser.parse(context);  } catch (  KatharsisException e) {    throw e;  }catch (  RuntimeException e) {    throw new ParametersDeserializationException(e.getMessage(),e);  }}  }
class C{  public static ThetaSketchSetOperationPostAggregation makePostAggFromAgg(SketchSetOperationPostAggFunction function,String name,List<FilteredAggregation> filteredAggregationList){  List<PostAggregation> operands=filteredAggregationList.stream().map(null).collect(Collectors.toList());  return new ThetaSketchSetOperationPostAggregation(name,function,operands);}  }
class C{  public long timeSinceStart(){  long currentTime=System.currentTimeMillis();  return currentTime - startTime;}  }
class C{  public void addArgument(Access node){  List<Access> list=(parent == null || state == null) ? getArgumentListNoTransform() : getArgumentList();  list.addChild(node);}  }
class C{  @Override public void error(String domain,String key,XMLParseException exception) throws XNIException {  if (fErrorHandler != null) {    SAXParseException saxException=createSAXParseException(exception);    try {      fErrorHandler.error(saxException);    } catch (    SAXParseException e) {      throw createXMLParseException(e);    }catch (    SAXException e) {      throw createXNIException(e);    }  }}  }
class C{  private boolean isSimilarCommentException(BoxAPIException e){  return e.getResponseCode() == HttpStatus.CONFLICT.value() && e.getResponse().contains("recent_similar_comment");}  }
class C{  public void printAction(final String brokertype){  final Document document=new Document(PageSize.LETTER);  FileOutputStream fop=null;  try {    fop=new FileOutputStream("report_tmp.pdf");    PdfWriter.getInstance(document,fop);    document.open();    document.addTitle("VDI Calculator");    document.addAuthor("Leibovici. A");    document.addCreationDate();    final Font fontheader=FontFactory.getFont("Times-Roman",12,Font.BOLD | Font.UNDERLINE);    final Font fontcontent=FontFactory.getFont("Times-Roman",11,Font.NORMAL);    final LineSeparator line=new LineSeparator(1,90,null,Element.ALIGN_CENTER,-2);    Paragraph paragraph=new Paragraph("VDI Calculator by Andre Leibovici");    paragraph.setAlignment(Element.ALIGN_CENTER);    document.add(paragraph);    paragraph=new Paragraph("myvirtualcloud.net");    paragraph.setAlignment(Element.ALIGN_CENTER);    document.add(paragraph);    document.add(Chunk.NEWLINE);    PdfPTable table=new PdfPTable(2);    table.setWidthPercentage(80);    table.setSpacingBefore(10);    document.add(new Paragraph("Hosts",fontheader));    PdfPCell cell=new PdfPCell(new Phrase("Count",fontcontent));    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    cell=new PdfPCell(new Phrase(String.valueOf(Host.getCount()),fontcontent));    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    cell=new PdfPCell(new Phrase("Cores per Host",fontcontent));    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    cell=new PdfPCell(new Phrase(String.valueOf(Host.getCorescount()),fontcontent));    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    cell=new PdfPCell(new Phrase("Avg. Host CPU",fontcontent));    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    cell=new PdfPCell(new Phrase(String.valueOf(Host.getCoremhz()) + " MHz",fontcontent));    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    cell=new PdfPCell(new Phrase("Host Memory - No TPS",fontcontent));    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    cell=new PdfPCell(new Phrase(Host.getMemoryNoTPS() + " GB",fontcontent));    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    cell=new PdfPCell(new Phrase("Host Memory - TPS",fontcontent));    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    cell=new PdfPCell(new Phrase(Host.getMemoryTPS() + " GB",fontcontent));    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    cell=new PdfPCell(new Phrase("Local Disk",fontcontent));    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    cell=new PdfPCell(new Phrase(String.valueOf(Host.getLocalswapsize()) + " GB",fontcontent));    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    cell=new PdfPCell(new Phrase("Desktops per Host",fontcontent));    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    cell=new PdfPCell(new Phrase(String.valueOf(Host.getVmcount()),fontcontent));    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    cell=new PdfPCell(new Phrase("Number of Clusters",fontcontent));    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    cell=new PdfPCell(new Phrase(String.valueOf(Cluster.getCount()),fontcontent));    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    document.add(table);    document.add(Chunk.NEWLINE);    document.add(line);    document.add(Chunk.NEWLINE);    if (brokertype.equalsIgnoreCase("view")) {      document.add(new Paragraph("View Infrastructure",fontheader));    } else     if (brokertype.equalsIgnoreCase("xen")) {      document.add(new Paragraph("XenDesktop Infrastructure",fontheader));    }    table=new PdfPTable(2);    table.setWidthPercentage(80);    table.setSpacingBefore(10);    cell=new PdfPCell(new Phrase("vCenter Servers",fontcontent));    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    cell=new PdfPCell(new Phrase(String.valueOf(View.getVccount()),fontcontent));    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    if (brokertype.equalsIgnoreCase("view")) {      cell=new PdfPCell(new Phrase("Connection Servers",fontcontent));      cell.setBorder(Rectangle.NO_BORDER);      table.addCell(cell);      cell=new PdfPCell(new Phrase(String.valueOf(View.getCscount()),fontcontent));      cell.setBorder(Rectangle.NO_BORDER);      table.addCell(cell);      cell=new PdfPCell(new Phrase("Security Servers",fontcontent));      cell.setBorder(Rectangle.NO_BORDER);      table.addCell(cell);      cell=new PdfPCell(new Phrase(String.valueOf(View.getSscount()),fontcontent));      cell.setBorder(Rectangle.NO_BORDER);      table.addCell(cell);    } else     if (brokertype.equalsIgnoreCase("xen")) {      cell=new PdfPCell(new Phrase("Delivery Controllers",fontcontent));      cell.setBorder(Rectangle.NO_BORDER);      table.addCell(cell);      cell=new PdfPCell(new Phrase(String.valueOf(Xen.getDdccount()),fontcontent));      cell.setBorder(Rectangle.NO_BORDER);      table.addCell(cell);    }    document.add(table);    document.add(Chunk.NEWLINE);    document.add(line);    document.add(Chunk.NEWLINE);    document.add(new Paragraph("Storage Capacity",fontheader));    table=new PdfPTable(2);    table.setWidthPercentage(80);    table.setSpacingBefore(10);    cell=new PdfPCell(new Phrase("Total Capacity",fontcontent));    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    cell=new PdfPCell(new Phrase(String.valueOf(VDICalculator.storageobj.getUsablecapacity()) + " TB",fontcontent));    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    if (brokertype.equalsIgnoreCase("view")) {      cell=new PdfPCell(new Phrase("Parent Capacity",fontcontent));    } else     if (brokertype.equalsIgnoreCase("xen")) {      cell=new PdfPCell(new Phrase("Master Image Capacity",fontcontent));    }    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    cell=new PdfPCell(new Phrase(String.valueOf(VDICalculator.storageobj.getParentusablecapacity()) + " TB",fontcontent));    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    if (brokertype.equalsIgnoreCase("view")) {      cell=new PdfPCell(new Phrase("Replica Capacity",fontcontent));    } else     if (brokertype.equalsIgnoreCase("xen")) {      cell=new PdfPCell(new Phrase("Private Clone Capacity",fontcontent));    }    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    cell=new PdfPCell(new Phrase(String.valueOf(VDICalculator.storageobj.getReplicausablecapacity()) + " TB",fontcontent));    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    if (brokertype.equalsIgnoreCase("view")) {      cell=new PdfPCell(new Phrase("Clone Capacity",fontcontent));    } else     if (brokertype.equalsIgnoreCase("xen")) {      cell=new PdfPCell(new Phrase("Snapshot Capacity",fontcontent));    }    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    cell=new PdfPCell(new Phrase(VDICalculator.storageobj.cloneusablecapacity.toString() + " TB",fontcontent));    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    if (brokertype.equalsIgnoreCase("view")) {      cell=new PdfPCell(new Phrase("Clone Datastores",fontcontent));    } else     if (brokertype.equalsIgnoreCase("xen")) {      cell=new PdfPCell(new Phrase("Snapshot Datastores",fontcontent));    }    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    cell=new PdfPCell(new Phrase(String.valueOf(VDICalculator.storageobj.datastorecount),fontcontent));    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    if (brokertype.equalsIgnoreCase("view")) {      cell=new PdfPCell(new Phrase("Clone Datastore Size",fontcontent));    } else     if (brokertype.equalsIgnoreCase("xen")) {      cell=new PdfPCell(new Phrase("Snapshot Datastore Size",fontcontent));    }    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    cell=new PdfPCell(new Phrase(String.valueOf(VDICalculator.storageobj.datastoresize) + " GB",fontcontent));    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    if (brokertype.equalsIgnoreCase("view")) {      cell=new PdfPCell(new Phrase("Persistent Datastores",fontcontent));    } else     if (brokertype.equalsIgnoreCase("xen")) {      cell=new PdfPCell(new Phrase("vDisk Datastores",fontcontent));    }    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    cell=new PdfPCell(new Phrase(String.valueOf(VDICalculator.storageobj.persistentdatastorecount),fontcontent));    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    if (brokertype.equalsIgnoreCase("view")) {      cell=new PdfPCell(new Phrase("Persistent Datastore Size",fontcontent));    } else     if (brokertype.equalsIgnoreCase("xen")) {      cell=new PdfPCell(new Phrase("vDisk Datastores Size",fontcontent));    }    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    cell=new PdfPCell(new Phrase(String.valueOf(VDICalculator.storageobj.persistentdatastoresize) + " GB",fontcontent));    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    document.add(table);    document.add(Chunk.NEWLINE);    document.add(line);    document.add(Chunk.NEWLINE);    document.add(new Paragraph("Storage IOps",fontheader));    table=new PdfPTable(2);    table.setWidthPercentage(80);    table.setSpacingBefore(10);    cell=new PdfPCell(new Phrase("Total Frontend IOPS",fontcontent));    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    cell=new PdfPCell(new Phrase(String.valueOf(VDICalculator.storageobj.getFrontendIOPS()),fontcontent));    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    cell=new PdfPCell(new Phrase("Total Backend IOPS",fontcontent));    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    cell=new PdfPCell(new Phrase(String.valueOf(VDICalculator.storageobj.getBackendIOPS()),fontcontent));    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    if (brokertype.equalsIgnoreCase("view")) {      cell=new PdfPCell(new Phrase("Clone Frontend IOPS",fontcontent));    } else     if (brokertype.equalsIgnoreCase("xen")) {      cell=new PdfPCell(new Phrase("Snapshot Frontend IOPS",fontcontent));    }    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    cell=new PdfPCell(new Phrase(Storage.ClonefrontendIOPS.toString(),fontcontent));    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    if (brokertype.equalsIgnoreCase("view")) {      cell=new PdfPCell(new Phrase("Clone Backend IOPS",fontcontent));    } else     if (brokertype.equalsIgnoreCase("xen")) {      cell=new PdfPCell(new Phrase("Snapshot Backend IOPS",fontcontent));    }    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    cell=new PdfPCell(new Phrase(Storage.ClonebackendIOPS.toString(),fontcontent));    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    if (brokertype.equalsIgnoreCase("view")) {      cell=new PdfPCell(new Phrase("Persistent Frontend IOPS",fontcontent));    } else     if (brokertype.equalsIgnoreCase("xen")) {      cell=new PdfPCell(new Phrase("vDisk Frontend IOPS",fontcontent));    }    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    cell=new PdfPCell(new Phrase(Storage.PersistentfrontendIOPS.toString(),fontcontent));    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    if (brokertype.equalsIgnoreCase("view")) {      cell=new PdfPCell(new Phrase("Persistent Backend IOPS",fontcontent));    } else     if (brokertype.equalsIgnoreCase("xen")) {      cell=new PdfPCell(new Phrase("vDisk Backend IOPS",fontcontent));    }    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    cell=new PdfPCell(new Phrase(Storage.PersistentbackendIOPS.toString(),fontcontent));    cell.setBorder(Rectangle.NO_BORDER);    table.addCell(cell);    document.add(table);  } catch (  DocumentException e) {    e.printStackTrace();  }catch (  FileNotFoundException e) {    e.printStackTrace();  } finally {    document.close();    try {      fop.close();    } catch (    IOException e) {      e.printStackTrace();    }  }  try {    final File myFile=new File("report_tmp.pdf");    Desktop.getDesktop().open(myFile);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public int determineInsertionIndex(TabLaunchType type,Tab newTab){  TabModel currentModel=mTabModelSelector.getCurrentModel();  Tab currentTab=TabModelUtils.getCurrentTab(currentModel);  if (currentTab == null) {    assert (currentModel.getCount() == 0);    return 0;  }  int currentId=currentTab.getId();  int currentIndex=TabModelUtils.getTabIndexById(currentModel,currentId);  if (sameModelType(currentModel,newTab)) {    if (willOpenInForeground(type,newTab.isIncognito())) {      return currentIndex + 1;    } else {      int index=getIndexOfLastTabOpenedBy(currentId,currentIndex);      if (index != NO_TAB) {        return index + 1;      } else {        return currentIndex + 1;      }    }  } else {    return mTabModelSelector.getModel(newTab.isIncognito()).getCount();  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ABYSS_PVP_OFF(DescriptionId descriptionId){  return new SM_SYSTEM_MESSAGE(1301041,descriptionId);}  }
class C{  @Override public void touchNavigatorIcon(Activity a){  ((MainActivity)a).removeFragment();}  }
class C{  @Nullable public JdepsMap loadJdepsFiles(Project project,BlazeContext parentContext,ArtifactLocationDecoder artifactLocationDecoder,Iterable<RuleIdeInfo> rulesToLoad,SyncState.Builder syncStateBuilder,@Nullable SyncState previousSyncState){  JdepsState oldState=previousSyncState != null ? previousSyncState.get(JdepsState.class) : null;  JdepsState jdepsState=Scope.push(parentContext,null);  if (jdepsState == null) {    return null;  }  syncStateBuilder.put(JdepsState.class,jdepsState);  return null;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OpenAerial_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200770,skillcaster,skillname);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_ALLIANCE_PICKUP_ITEM_HE_DENIED(String value0,String value1,String value2){  return new SM_SYSTEM_MESSAGE(1300217,value0,value1,value2);}  }
class C{  public static Map<Integer,Integer[]> compute(final ClassificationViewer viewer,final int level,final float minPercent) throws IOException, CanceledException {  final Map<Integer,Float> rawProfile=new HashMap<>();  final Document doc=viewer.getDocument();  final BitSet activeMatchesForTaxa=new BitSet();  final BitSet activeTaxa=new BitSet();  int totalAssigned=0;  final IReadBlockIterator it=doc.getConnector().getAllReadsIterator(0,10,true,true);  final ProgressListener progressListener=doc.getProgressListener();  progressListener.setTasks("Computing profile","Processing all reads and matches");  progressListener.setMaximum(it.getMaximumProgress());  progressListener.setProgress(0);  try {    while (it.hasNext()) {      final IReadBlock readBlock=it.next();      if (readBlock.getComplexity() < doc.getMinComplexity()) {        Float rawValue=rawProfile.get(IdMapper.LOW_COMPLEXITY_ID);        rawProfile.put(IdMapper.LOW_COMPLEXITY_ID,rawValue == null ? 1f : rawValue + 1f);      } else       if (readBlock.getNumberOfMatches() == 0) {        Float rawValue=rawProfile.get(IdMapper.NOHITS_ID);        rawProfile.put(IdMapper.NOHITS_ID,rawValue == null ? 1f : rawValue + 1f);      } else {        ActiveMatches.compute(doc.getMinScore(),doc.getTopPercent(),doc.getMaxExpected(),doc.getMinPercentIdentity(),readBlock,Classification.Taxonomy,activeMatchesForTaxa);        activeTaxa.clear();        for (int i=activeMatchesForTaxa.nextSetBit(0); i != -1; i=activeMatchesForTaxa.nextSetBit(i + 1)) {          Integer taxonId=readBlock.getMatchBlock(i).getTaxonId();          taxonId=getAncestorAtRank(level,taxonId);          if (taxonId > 0) {            activeTaxa.set(taxonId);          }        }        if (activeTaxa.cardinality() == 0) {          Float rawValue=rawProfile.get(IdMapper.UNASSIGNED_ID);          rawProfile.put(IdMapper.UNASSIGNED_ID,rawValue == null ? 1f : rawValue + 1f);        } else {          for (int taxonId=activeTaxa.nextSetBit(0); taxonId != -1; taxonId=activeTaxa.nextSetBit(taxonId + 1)) {            Float rawValue=rawProfile.get(taxonId);            if (rawValue == null)             rawProfile.put(taxonId,1f / activeTaxa.cardinality()); else             rawProfile.put(taxonId,rawValue + 1f / activeTaxa.cardinality());          }          totalAssigned++;        }      }      progressListener.setProgress(it.getProgress());    }  }  finally {    it.close();  }  int minSupport=(int)(totalAssigned / 100.0 * minPercent);  int totalReads=0;  final Map<Integer,Integer[]> profile=new HashMap<>();  for (  Integer id : rawProfile.keySet()) {    Float rawValue=rawProfile.get(id);    if (rawValue != null) {      if (rawValue >= minSupport) {        int count=Math.round(rawValue);        profile.put(id,new Integer[]{count});        totalReads+=count;      }    }  }  if (totalReads < doc.getNumberOfReads()) {    float missing=doc.getNumberOfReads() - totalReads;    Float rawValue=rawProfile.get(IdMapper.UNASSIGNED_ID);    rawProfile.put(IdMapper.UNASSIGNED_ID,rawValue == null ? missing : rawValue + missing);  }  int[] total=new int[1];  SortedMap<String,Integer[]> name2counts=new TreeMap<>();  for (  int id : profile.keySet()) {    String name=TaxonomyData.getName2IdMap().get(id);    name2counts.put(name,profile.get(id));  }  for (  String name : name2counts.keySet()) {    final Integer[] counts=name2counts.get(name);    System.err.println(name + "\t" + Basic.toString(counts,", "));    for (int i=0; i < 1; i++)     total[i]+=counts[i];  }  System.err.println("Total assigned: " + Basic.toString(total,", "));  return profile;}  }
class C{  private static int findInsertionIndex(final int[] keys,final byte[] states,final int key,final int mask){  final int hash=hashOf(key);  int index=hash & mask;  if (states[index] == FREE) {    return index;  } else   if (states[index] == FULL && keys[index] == key) {    return changeIndexSign(index);  }  int perturb=perturb(hash);  int j=index;  if (states[index] == FULL) {    while (true) {      j=probe(perturb,j);      index=j & mask;      perturb>>=PERTURB_SHIFT;      if (states[index] != FULL || keys[index] == key) {        break;      }    }  }  if (states[index] == FREE) {    return index;  } else   if (states[index] == FULL) {    return changeIndexSign(index);  }  final int firstRemoved=index;  while (true) {    j=probe(perturb,j);    index=j & mask;    if (states[index] == FREE) {      return firstRemoved;    } else     if (states[index] == FULL && keys[index] == key) {      return changeIndexSign(index);    }    perturb>>=PERTURB_SHIFT;  }}  }
class C{  public ResolvingXMLFilter(){  super();  catalogResolver=new CatalogResolver(catalogManager);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_AlwaysDodge_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200326,skillname);}  }
class C{  public TapTarget dimColor(@ColorRes int color){  this.dimColor=color;  return this;}  }
class C{  public static <T extends GenericEntity>List<T> filterByDate(List<T> datedValues,boolean allAreSame){  return filterByDate(datedValues,UtilDateTime.nowTimestamp(),null,null,allAreSame);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set summarized=");  boolean value=np.getBoolean();  np.matchIgnoreCase(";");  ((ExtractReadsViewer)getViewer()).setIncludeSummarized(value);}  }
class C{  void onLoadFinished(){  if (mRestoreStartedAtMillis != -1 && mLastShowMillis >= mRestoreStartedAtMillis) {    long now=SystemClock.elapsedRealtime();    long restoreTime=now - mRestoreStartedAtMillis;    long perceivedRestoreTime=now - mLastShowMillis;    recordTabRestoreResult(true,restoreTime,perceivedRestoreTime,-1);  }  mRestoreStartedAtMillis=-1;}  }
class C{  public static URL urlFromString(String location,Class referrer,boolean includeFileSystem){  URL url=null;  if (isUrlString(location)) {    try {      url=new URL(location);    } catch (    Exception e) {      e.printStackTrace();    }  } else {    if (referrer != null)     url=referrer.getResource(location); else     url=IOLib.class.getResource(location);    if (url == null && !location.startsWith("/"))     url=IOLib.class.getResource("/" + location);    if (includeFileSystem && url == null) {      File f=new File(location);      if (f.exists()) {        try {          url=f.toURI().toURL();        } catch (        Exception e) {        }      }    }  }  return url;}  }
class C{  public boolean context_heap(){  return soot.PhaseOptions.getBoolean(options,"context-heap");}  }
class C{  public SquarifiedTreeMapLayout(String group,double frame){  super(group);  setFrameWidth(frame);}  }
class C{  public static Date stringToDate(String formattedDate,SimpleDateFormat dateFormat){  return new Date(stringToMilliseconds(formattedDate,dateFormat));}  }
class C{  public static String capitalize(String string){  if (!TextUtils.isEmpty(string)) {    return string.substring(0,1).toUpperCase(Locale.US) + string.substring(1);  }  return string == null ? null : "";}  }
class C{  public static <T>T push(@Nullable BlazeContext parentContext,@NotNull ScopedFunction<T> scopedFunction){  BlazeContext context=new BlazeContext(parentContext);  try {    return scopedFunction.execute(context);  } catch (  RuntimeException e) {    context.setHasError();    LOG.error(e);    throw e;  } finally {    context.endScope();  }}  }
class C{  public AggregatePolicyProvider(Policy mainPolicy){  if (mainPolicy == null) {    throw new NullPointerException();  }  this.mainPolicy=mainPolicy;  ensureDependenciesResolved();}  }
class C{  protected BoardRestoreCommentQuery commentId(int value){  return unsafeParam("comment_id",value);}  }
class C{  public static int resumeChecksum(int previousChecksum,ByteBuf payload){  if (payload.hasMemoryAddress() && (CRC32C_HASH instanceof Sse42Crc32C)) {    return CRC32C_HASH.resume(previousChecksum,payload.memoryAddress() + payload.readerIndex(),payload.readableBytes());  } else   if (payload.hasArray()) {    return CRC32C_HASH.resume(previousChecksum,payload.array(),payload.arrayOffset() + payload.readerIndex(),payload.readableBytes());  } else {    return CRC32C_HASH.resume(previousChecksum,payload.nioBuffer());  }}  }
class C{  protected void reset(){  Arrays.fill(m_isCandidate,true);}  }
class C{  public static void debugLongInfo(String str){  debugLongInfo(DEFAULT_TAG,str);}  }
class C{  public static Type toJimpleType(String desc){  int idx=desc.lastIndexOf('[');  int nrDims=idx + 1;  if (nrDims > 0) {    if (desc.charAt(0) != '[')     throw new AssertionError("Invalid array descriptor: " + desc);    desc=desc.substring(idx + 1);  }  Type baseType;switch (desc.charAt(0)) {case 'Z':    baseType=BooleanType.v();  break;case 'B':baseType=ByteType.v();break;case 'C':baseType=CharType.v();break;case 'S':baseType=ShortType.v();break;case 'I':baseType=IntType.v();break;case 'F':baseType=FloatType.v();break;case 'J':baseType=LongType.v();break;case 'D':baseType=DoubleType.v();break;case 'L':if (desc.charAt(desc.length() - 1) != ';') throw new AssertionError("Invalid reference descriptor: " + desc);String name=desc.substring(1,desc.length() - 1);name=toQualifiedName(name);baseType=RefType.v(name);break;default :throw new AssertionError("Unknown descriptor: " + desc);}if (!(baseType instanceof RefLikeType) && desc.length() > 1) throw new AssertionError("Invalid primitive type descriptor: " + desc);return nrDims > 0 ? ArrayType.v(baseType,nrDims) : baseType;}  }
class C{  public static boolean isGiftCard(String stPassed){  if (isOFBGiftCard(stPassed)) {    return true;  } else   if (isValueLinkCard(stPassed)) {    return true;  }  return false;}  }
class C{  public boolean contains(FeatureDefinition other){  List<String> thisByteFeatures=Arrays.asList(this.getByteFeatureNameArray());  List<String> otherByteFeatures=Arrays.asList(other.getByteFeatureNameArray());  if (!thisByteFeatures.containsAll(otherByteFeatures)) {    return false;  }  for (  String commonByteFeature : otherByteFeatures) {    String[] thisByteFeaturePossibleValues=this.getPossibleValues(this.getFeatureIndex(commonByteFeature));    String[] otherByteFeaturePossibleValues=other.getPossibleValues(other.getFeatureIndex(commonByteFeature));    if (!Arrays.equals(thisByteFeaturePossibleValues,otherByteFeaturePossibleValues)) {      return false;    }  }  List<String> thisShortFeatures=Arrays.asList(this.getShortFeatureNameArray());  List<String> otherShortFeatures=Arrays.asList(other.getShortFeatureNameArray());  if (!thisShortFeatures.containsAll(otherShortFeatures)) {    return false;  }  for (  String commonShortFeature : otherShortFeatures) {    String[] thisShortFeaturePossibleValues=this.getPossibleValues(this.getFeatureIndex(commonShortFeature));    String[] otherShortFeaturePossibleValues=other.getPossibleValues(other.getFeatureIndex(commonShortFeature));    if (!Arrays.equals(thisShortFeaturePossibleValues,otherShortFeaturePossibleValues)) {      return false;    }  }  List<String> thisContinuousFeatures=Arrays.asList(this.getContinuousFeatureNameArray());  List<String> otherContinuousFeatures=Arrays.asList(other.getContinuousFeatureNameArray());  return thisContinuousFeatures.containsAll(otherContinuousFeatures);}  }
class C{  public static <T>Aggregate<Map<String,Concept>,Map<Concept,T>> group(String varName,Aggregate<? super Map<String,Concept>,T> innerAggregate){  return new GroupAggregate<>(varName,innerAggregate);}  }
class C{  public static long indicator(final long x){  return (x >= 0L) ? 1L : -1L;}  }
class C{  private void replaceNullType(Body b){  List<Local> localsToRemove=new ArrayList<Local>();  boolean hasNullType=false;  for (  Local l : b.getLocals()) {    if (l.getType() instanceof NullType) {      localsToRemove.add(l);      hasNullType=true;    }  }  if (!hasNullType)   return;  Map<String,String> opts=PhaseOptions.v().getPhaseOptions("jop.cpf");  if (!opts.containsKey("enabled") || !opts.get("enabled").equals("true")) {    G.v().out.println("Warning: Cannot run TypeAssigner.replaceNullType(Body). Try to enable jop.cfg.");    return;  }  ConstantPropagatorAndFolder.v().transform(b);  List<Unit> unitToReplaceByException=new ArrayList<Unit>();  for (  Unit u : b.getUnits()) {    for (    ValueBox vb : u.getUseBoxes()) {      if (vb.getValue() instanceof Local && ((Local)vb.getValue()).getType() instanceof NullType) {        Local l=(Local)vb.getValue();        Stmt s=(Stmt)u;        boolean replace=false;        if (s.containsArrayRef()) {          ArrayRef r=s.getArrayRef();          if (r.getBase() == l) {            replace=true;          }        } else         if (s.containsFieldRef()) {          FieldRef r=s.getFieldRef();          if (r instanceof InstanceFieldRef) {            InstanceFieldRef ir=(InstanceFieldRef)r;            if (ir.getBase() == l) {              replace=true;            }          }        } else         if (s.containsInvokeExpr()) {          InvokeExpr ie=s.getInvokeExpr();          if (ie instanceof InstanceInvokeExpr) {            InstanceInvokeExpr iie=(InstanceInvokeExpr)ie;            if (iie.getBase() == l) {              replace=true;            }          }        }        if (replace) {          unitToReplaceByException.add(u);        }      }    }  }  for (  Unit u : unitToReplaceByException) {    soot.dexpler.Util.addExceptionAfterUnit(b,"java.lang.NullPointerException",u,"This statement would have triggered an Exception: " + u);    b.getUnits().remove(u);  }  DeadAssignmentEliminator.v().transform(b);  UnusedLocalEliminator.v().transform(b);}  }
class C{  private FilterResolverIntf createFilterResolverTree(Expression expressionTree,AbsoluteTableIdentifier tableIdentifier,Expression intermediateExpression){  ExpressionType filterExpressionType=expressionTree.getFilterExpressionType();  BinaryExpression currentExpression=null;switch (filterExpressionType) {case OR:    currentExpression=(BinaryExpression)expressionTree;  return new LogicalFilterResolverImpl(createFilterResolverTree(currentExpression.getLeft(),tableIdentifier,currentExpression),createFilterResolverTree(currentExpression.getRight(),tableIdentifier,currentExpression),currentExpression);case AND:currentExpression=(BinaryExpression)expressionTree;return new LogicalFilterResolverImpl(createFilterResolverTree(currentExpression.getLeft(),tableIdentifier,currentExpression),createFilterResolverTree(currentExpression.getRight(),tableIdentifier,currentExpression),currentExpression);case EQUALS:case IN:return getFilterResolverBasedOnExpressionType(ExpressionType.EQUALS,((BinaryConditionalExpression)expressionTree).isNull,expressionTree,tableIdentifier,expressionTree);case GREATERTHAN:case GREATERTHAN_EQUALTO:case LESSTHAN:case LESSTHAN_EQUALTO:return getFilterResolverBasedOnExpressionType(ExpressionType.EQUALS,true,expressionTree,tableIdentifier,expressionTree);case NOT_EQUALS:case NOT_IN:return getFilterResolverBasedOnExpressionType(ExpressionType.NOT_EQUALS,false,expressionTree,tableIdentifier,expressionTree);case FALSE:return getFilterResolverBasedOnExpressionType(ExpressionType.FALSE,false,expressionTree,tableIdentifier,expressionTree);default :return getFilterResolverBasedOnExpressionType(ExpressionType.UNKNOWN,false,expressionTree,tableIdentifier,expressionTree);}}  }
class C{  private void writeDomainHierarchy(Document document,Element rootElement){  Element domainHierarchy=document.createElement("domainhierarchy");  rootElement.appendChild(domainHierarchy);  for (  DomPair pair : this.document.getDomainHierarchy())   writeDomainPair(pair,document,domainHierarchy);}  }
class C{  public RegexValidator(String[] regexs){  this(regexs,true);}  }
class C{  public boolean unhideIsApplicable(){  try {    if (getSelectedColumns().size() == 1 && getSelectedAttributes().size() == 0) {      int which=0;      if (which < dataGrid.getAttributesOrder().size()) {        String next=dataGrid.getAttributesOrder().get(which);        if (samplesViewer.getSampleAttributeTable().isHiddenAttribute(next))         return true;      }      return false;    }    for (    String attribute : getSelectedAttributes()) {      int which=dataGrid.getAttributesOrder().indexOf(attribute) - 1;      if (which >= 0) {        String next=dataGrid.getAttributesOrder().get(which);        if (samplesViewer.getSampleAttributeTable().isHiddenAttribute(next)) {          return true;        }      }      which=dataGrid.getAttributesOrder().indexOf(attribute) + 1;      if (which > 0 && which < dataGrid.getAttributesOrder().size()) {        String next=dataGrid.getAttributesOrder().get(which);        if (samplesViewer.getSampleAttributeTable().isHiddenAttribute(next)) {          return true;        }      }    }  } catch (  Exception ex) {    if (Platform.isFxApplicationThread())     Basic.caught(ex);  }  return false;}  }
class C{  public DefaultRetryPolicy(int initialTimeoutMs,int maxNumRetries,float backoffMultiplier){  mCurrentTimeoutMs=initialTimeoutMs;  mMaxNumRetries=maxNumRetries;  mBackoffMultiplier=backoffMultiplier;}  }
class C{  @Override public Scan open(){  Scan ss=sp.open();  return new GroupByScan(ss,groupFlds,aggFns);}  }
class C{  @Override protected FlowSet newInitialFlow(){  return emptySet.clone();}  }
class C{  public PacketWrapper(AbstractChannel channel,AbstractPacket packet){  this.channel=channel;  this.packet=packet;}  }
class C{  protected BoardAddTopicQuery title(String value){  return unsafeParam("title",value);}  }
class C{  public void actionPerformed(ActionEvent ev){  final SamplesViewer samplesViewer=((SamplesViewer)getViewer());  final Collection<String> samples=samplesViewer.getSamplesTable().getSelectedSamples();  if (samples.size() > 0)   execute("set nodeShape=none sample='" + Basic.toString(samples,"' '") + "';");}  }
class C{  public boolean needsRewrite(){  ASTNode$State state=state();  try {    return false;  }  finally {  }}  }
class C{  public boolean isUserAGoat(){  return false;}  }
class C{  public Result useInteractedBlock(){  return useClickedBlock;}  }
class C{  @Override public double[] analyse(double[] frame){  double[] spectrum=super.analyse(frame);  for (int i=0; i < spectrum.length; i++) {    spectrum[i]=MathUtils.db(spectrum[i]);  }  return spectrum;}  }
class C{  protected XMLDocumentScanner createDocumentScanner(){  return new XMLDocumentScannerImpl();}  }
class C{  public int size(){  return edges.size();}  }
class C{  public void stopPlaying(){  if ((this.state == STATE.MEDIA_RUNNING) || (this.state == STATE.MEDIA_PAUSED)) {    this.player.pause();    this.player.seekTo(0);    Log.d(LOG_TAG,"stopPlaying is calling stopped");    this.setState(STATE.MEDIA_STOPPED);  } else {    Log.d(LOG_TAG,"AudioPlayer Error: stopPlaying() called during invalid state: " + this.state.ordinal());    sendErrorStatus(MEDIA_ERR_NONE_ACTIVE);  }}  }
class C{  public static Map<String,Object> evalAbsContainerSizeFactors(List<Map<String,Object>> sizesList,Object maxSizes,List<Map<String,Object>> cachedFactorsList){  throw new UnsupportedOperationException("Not implemented");}  }
class C{  public Solution_ solve(Solution_ planningProblem){  return solver.solve(planningProblem);}  }
class C{  public static boolean showWarningIfOldTalkbackRunning(Context context){  AccessibilityManager manager=(AccessibilityManager)context.getSystemService(Context.ACCESSIBILITY_SERVICE);  if (manager == null)   return false;  boolean isTalkbackRunning=false;  try {    List<AccessibilityServiceInfo> services=manager.getEnabledAccessibilityServiceList(AccessibilityServiceInfo.FEEDBACK_SPOKEN);    for (    AccessibilityServiceInfo service : services) {      if (service.getId().contains(TALKBACK_PACKAGE_NAME))       isTalkbackRunning=true;    }  } catch (  NullPointerException e) {  }  if (!isTalkbackRunning)   return false;  if (PackageUtils.getPackageVersion(context,TALKBACK_PACKAGE_NAME) < MIN_TALKBACK_VERSION && !sOldTalkBackVersionAlertShown) {    showOldTalkbackVersionAlertOnce(context);    return true;  }  return false;}  }
class C{  public static boolean supportsLogSegmentSequenceNo(int version){  return version >= LogSegmentMetadataVersion.VERSION_V2_LEDGER_SEQNO.value;}  }
class C{  public boolean verbose(){  return soot.PhaseOptions.getBoolean(options,"verbose");}  }
class C{  public static String stripSuffix(String name,String suffix,boolean recursiveStrip){  if (name.length() < 2) {    return name;  }  int suffixStart=name.lastIndexOf(suffix.charAt(0));  if (suffixStart != -1 && name.regionMatches(suffixStart,suffix,0,name.length() - suffixStart)) {    name=name.substring(0,suffixStart);  }  if (recursiveStrip && name.endsWith(suffix)) {    return stripSuffix(name,suffix,recursiveStrip);  }  return name;}  }
class C{  public void acquireThreadReadLock(){  _readLocks[getSegmentIdByCurrentThreadId()].lock();}  }
class C{  public static void dropAllTables(SQLiteDatabase db,boolean ifExists){  TcNoteDao.dropTable(db,ifExists);  CustomerDao.dropTable(db,ifExists);}  }
class C{  public MarketRestoreQuery restore(UserActor actor,int ownerId,int itemId){  return new MarketRestoreQuery(getClient(),actor,ownerId,itemId);}  }
class C{  public void startScroll(int startX,int startY,int dx,int dy,long startTime,int duration){  mMode=SCROLL_MODE;  mScrollerX.startScroll(startX,dx,startTime,duration);  mScrollerY.startScroll(startY,dy,startTime,duration);}  }
class C{  protected final void checkNamespaceWF(String qname,int colon1,int colon2){  if (!errorChecking) {    return;  }  if (colon1 == 0 || colon1 == qname.length() - 1 || colon2 != colon1) {    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"NAMESPACE_ERR",null);    throw new DOMException(DOMException.NAMESPACE_ERR,msg);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_RESURRECT_DIALOG__30MIN(String value0){  return new SM_SYSTEM_MESSAGE(1300746,value0);}  }
class C{  public SysexMessage(){  this(new byte[2]);  data[0]=(byte)(SYSTEM_EXCLUSIVE & 0xFF);  data[1]=(byte)(ShortMessage.END_OF_EXCLUSIVE & 0xFF);}  }
class C{  boolean isValueEmpty(String attribute){  return TextUtils.isEmpty(getValue(attribute));}  }
class C{  protected void initComparator(){  if (Comparator == null)   Comparator=new NGramCachedGraphComparator();}  }
class C{  public static boolean isConnectionFast(int type,int subType){  if (type == ConnectivityManager.TYPE_WIFI) {    return true;  } else   if (type == ConnectivityManager.TYPE_MOBILE) {switch (subType) {case TelephonyManager.NETWORK_TYPE_1xRTT:      return false;case TelephonyManager.NETWORK_TYPE_CDMA:    return false;case TelephonyManager.NETWORK_TYPE_EDGE:  return false;case TelephonyManager.NETWORK_TYPE_EVDO_0:return true;case TelephonyManager.NETWORK_TYPE_EVDO_A:return true;case TelephonyManager.NETWORK_TYPE_GPRS:return false;case TelephonyManager.NETWORK_TYPE_HSDPA:return true;case TelephonyManager.NETWORK_TYPE_HSPA:return true;case TelephonyManager.NETWORK_TYPE_HSUPA:return true;case TelephonyManager.NETWORK_TYPE_UMTS:return true;case TelephonyManager.NETWORK_TYPE_EHRPD:return true;case TelephonyManager.NETWORK_TYPE_EVDO_B:return true;case TelephonyManager.NETWORK_TYPE_HSPAP:return true;case TelephonyManager.NETWORK_TYPE_IDEN:return false;case TelephonyManager.NETWORK_TYPE_LTE:return true;case TelephonyManager.NETWORK_TYPE_UNKNOWN:default :return false;}} else {return false;}}  }
class C{  protected void requestPassCodeConfirmation(){  clearBoxes();  mPassCodeHdr.setText(R.string.pass_code_reenter_your_pass_code);  mPassCodeHdrExplanation.setVisibility(View.INVISIBLE);  mConfirmingPassCode=true;}  }
class C{  public static boolean isAnonymous(AuthenticationToken token){  return token == _instance;}  }
class C{  private void validateUser(String username) throws UserNotFoundException {  if (!usersRepository.findByUsername(username).isPresent()) {    throw new UserNotFoundException(username);  }}  }
class C{  @Override public ElementLocator createLocator(Field field){  return new SelectorScopedElementLocator(searchContext,selector,field);}  }
class C{  public void showAnnotations(ISVNRemoteFile svnFile,Collection svnAnnotateBlocks,InputStream contents) throws PartInitException {  showAnnotations(svnFile,svnAnnotateBlocks,contents,true);}  }
class C{  protected Granularity generateGranularity(@NotNull String granularity,@NotNull DateTimeZone dateTimeZone,@NotNull GranularityParser granularityParser) throws BadApiRequestException {  try {    return granularityParser.parseGranularity(granularity,dateTimeZone);  } catch (  GranularityParseException e) {    LOG.error(UNKNOWN_GRANULARITY.logFormat(granularity),granularity);    throw new BadApiRequestException(e.getMessage());  }}  }
class C{  public static boolean isSystemProp(String propertyValue){  int fIndex=propertyValue.indexOf("${");  int lIndex=propertyValue.lastIndexOf("}");  return (fIndex != -1 && lIndex != -1);}  }
class C{  public Builder withDefaultDenyDialog(boolean useDefault){  buildObj.showDenyDialog=useDefault;  return this;}  }
class C{  public static long parseLong(char[] chars,int start,int length){  final int end=start + length;  int i=start;  long negMul=-1;  if (length > 0) {    char c=chars[i];    if (c == '-') {      negMul=1;      i++;    } else     if (c == '+') {      i++;    }  } else {    throw new NumberFormatException("cannot convert empty string to int");  }  long result=0;  for (; i < end; i++) {    char c=chars[i];    int digit=c - '0';    if (digit >= 10 || digit < 0) {      throw newNumberFormatException("invalid integer representation",chars,start,length);    }    long newResult=result * 10 - digit;    if (newResult > result) {      throw newNumberFormatException("overflow",chars,start,length);    }    result=newResult;  }  if ((result == 0) && chars[i - 1] != '0') {    throw newNumberFormatException("invalid integer representation",chars,start,length);  }  if ((result == Long.MIN_VALUE) && negMul == 1) {    throw newNumberFormatException("overflow",chars,start,length);  }  return negMul * result;}  }
class C{  public final static String encodeToString(byte[] sArr,boolean lineSep){  return new String(encodeToChar(sArr,lineSep));}  }
class C{  public String time(){  super.split();  return DurationFormatUtils.formatDurationHMS(super.getSplitTime());}  }
class C{  public static <E>RingBuffer<E> create(ProducerType producerType,EventFactory<E> factory,int bufferSize,WaitStrategy waitStrategy){switch (producerType) {case SINGLE:    return createSingleProducer(factory,bufferSize,waitStrategy);case MULTI:  return createMultiProducer(factory,bufferSize,waitStrategy);default :throw new IllegalStateException(producerType.toString());}}  }
class C{  public void copyDeploymentValuesToDecisionTables(DmnDeploymentEntity deployment,List<DecisionTableEntity> decisionTables){  String tenantId=deployment.getTenantId();  String deploymentId=deployment.getId();  for (  DecisionTableEntity decisionTable : decisionTables) {    if (tenantId != null) {      decisionTable.setTenantId(tenantId);    }    decisionTable.setDeploymentId(deploymentId);  }}  }
class C{  public static void openPermissionsSettings(Context context){  if (context == null) {    return;  }  final Intent i=new Intent();  i.setAction(Settings.ACTION_APPLICATION_DETAILS_SETTINGS);  i.addCategory(Intent.CATEGORY_DEFAULT);  i.setData(Uri.parse("package:" + context.getPackageName()));  i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  i.addFlags(Intent.FLAG_ACTIVITY_NO_HISTORY);  i.addFlags(Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);  context.startActivity(i);}  }
class C{  public static double sign(double dNum){  return dNum == 0.0 ? dNum : dNum / Math.abs(dNum);}  }
class C{  public MessageContentProperties(final T message,final int maxPayloadLength){  super(message.getTopic());  this.lastReceivedTimestamp=new SimpleStringProperty();  this.lastReceivedPayload=new SimpleStringProperty();  this.lastReceivedPayloadShort=new SimpleStringProperty();  this.maxPayloadLength=maxPayloadLength;  setMessage(message);}  }
class C{  public synchronized boolean addIfAbsent(Object e){  Object[] elements=getArray();  int len=elements.length;  Object[] newElements=new Object[len + 1];  for (int i=0; i < len; ++i) {    if (eq(e,elements[i]))     return false; else     newElements[i]=elements[i];  }  newElements[len]=e;  setArray(newElements);  return true;}  }
class C{  public int read(byte b[]) throws IOException {  return read(b,0,b.length);}  }
class C{  private int indexedBinarySearch(List<S2CellId> l,S2CellId key,int low){  int high=l.size() - 1;  while (low <= high) {    int mid=(low + high) >> 1;    S2CellId midVal=l.get(mid);    int cmp=midVal.compareTo(key);    if (cmp < 0) {      low=mid + 1;    } else     if (cmp > 0) {      high=mid - 1;    } else {      return mid;    }  }  return low;}  }
class C{  public static String purgeNonBreakingSpaces(String input){  String output=input.replaceAll("\\xA0"," ");  return output;}  }
class C{  private boolean isTypedTimeLegalSoFar(){  Node node=mLegalTimesTree;  for (  int keyCode : mTypedTimes) {    node=node.canReach(keyCode);    if (node == null) {      return false;    }  }  return true;}  }
class C{  public void removeCartItem(int index,boolean triggerExternalOps,LocalDispatcher dispatcher) throws CartItemModifyException {  if (isReadOnlyCart()) {    throw new CartItemModifyException("Cart items cannot be changed");  }  if (index < 0)   return;  if (cartLines.size() <= index)   return;  ShoppingCartItem item=cartLines.remove(index);  item.setQuantity(BigDecimal.ZERO,dispatcher,this,triggerExternalOps,true,false,true);}  }
class C{  @SuppressWarnings("rawtypes") public static Object autoVivifyListOrMap(Object property){  String str=property.toString();  boolean isList=("add".equals(str) || str.startsWith("insert@"));  if (!isList && !"java.lang.String".equals(property.getClass().getName())) {    Integer index=UtilMisc.toIntegerObject(property);    isList=(index != null);  }  if (isList) {    return new LinkedList();  } else {    return new HashMap();  }}  }
class C{  public void lockUserInput(){}  }
class C{  public void writeHeader(String key,String value) throws IOException {  writeHeader(key + ":" + value);}  }
class C{  public DexPatchGenerator(InputStream oldDexStream,InputStream newDexStream) throws IOException {  this(new Dex(oldDexStream),new Dex(newDexStream));}  }
class C{  public boolean uploadAndInstallApk(@NotNull IDevice device,@NotNull String packageName,@NotNull File localFile,@NotNull LaunchStatus launchStatus){  if (!needsInstall(device,localFile,packageName)) {    return true;  }  String remotePath="/data/local/tmp/" + packageName;  myPrinter.stdout("$ adb push " + localFile + " "+ remotePath);  try {    device.pushFile(localFile.getPath(),remotePath);    boolean installed=installApp(device,remotePath,packageName,launchStatus);    if (installed) {      myInstalledApkCache.setInstalled(device,localFile,packageName);    }    return installed;  } catch (  Exception e) {    myPrinter.stderr(e.toString());    return false;  }}  }
class C{  public QRDecomposition qr(){  return new QRDecomposition(this);}  }
class C{  public XMLGrammarPreparser(SymbolTable symbolTable){  fSymbolTable=symbolTable;  fLoaders=new Hashtable();  fErrorReporter=new XMLErrorReporter();  setLocale(Locale.getDefault());  fEntityResolver=new XMLEntityManager();}  }
class C{  @Override public <T extends ClientRequestResult>Collection<T> sendRequest(final JsonRequest<T> jsonRequest,final String queueName,final int timeout) throws JMSException {  ClientRequestReportListener reportListener=null;  return sendRequest(jsonRequest,queueName,timeout,reportListener);}  }
class C{  private boolean isIntervalEnd(final BSPTree<Euclidean1D> node){  if (!(Boolean)leafBefore(node).getAttribute()) {    return false;  }  if ((Boolean)leafAfter(node).getAttribute()) {    return false;  }  return true;}  }
class C{  @Override public void writeLayout(String folder){}  }
class C{  public BigReal(String val){  d=new BigDecimal(val);}  }
class C{  public RangePredicate(int operation,Expression middle,Expression left,Expression right,Comparator cmp){  super(operation,IN_IN,EX_EX,left,right);  this.m_middle=middle;  this.m_cmp=cmp;}  }
class C{  public CannotAbortException(String desc){  super(desc);}  }
class C{  public EnumeratedIntegerDistributionTest(){  testDistribution=new EnumeratedIntegerDistribution(new int[]{3,-1,3,7,-2,8},new double[]{0.2,0.2,0.3,0.3,0.0,0.0});}  }
class C{  public boolean contains(Local local){  if (leftLocal.toString().equals(local.toString()) || rightLocal.toString().equals(local.toString())) {    return true;  }  return false;}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public void destroyView() throws CanceledException {  ProgramProperties.put(MeganProperties.CHART_WINDOW_GEOMETRY,new int[]{getLocation().x,getLocation().y,getSize().width,getSize().height});  MeganProperties.removePropertiesListListener(getJMenuBar().getRecentFilesListener());  executorService.shutdownNow();  boolean ok=false;  try {    ok=executorService.awaitTermination(2,TimeUnit.SECONDS);  } catch (  InterruptedException e) {    e.printStackTrace();  }  if (!ok)   NotificationsInSwing.showInternalError(getFrame(),"Failed to terminate runaway threads... (consider restarting MEGAN)");  getChartDrawer().close();  if (searchManager != null && searchManager.getFindDialogAsToolBar() != null)   searchManager.getFindDialogAsToolBar().close();  dir.removeViewer(this);  dispose();}  }
class C{  public String upload_file1(String master_file_id,String prefix_name,String local_filename,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {  String[] parts=new String[2];  this.errno=this.split_file_id(master_file_id,parts);  if (this.errno != 0) {    return null;  }  parts=this.upload_file(parts[0],parts[1],prefix_name,local_filename,file_ext_name,meta_list);  if (parts != null) {    return parts[0] + SPLIT_GROUP_NAME_AND_FILENAME_SEPERATOR + parts[1];  } else {    return null;  }}  }
class C{  private static String doSubstringConversion(final SubstringConversionFormatterDetails details,final String text){  String convertedText=text;  try {    final String input=extractValueForConversion(details,convertedText);    final String output=convertText(details.getFormat(),input);    convertedText=replaceTextAndTags(details,convertedText,input,output);  } catch (  ConversionException e) {  }  return convertedText;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_BUY_SELL_ITEM_CAN_NOT_BE_SELLED_TO_NPC(String value0){  return new SM_SYSTEM_MESSAGE(1300344,value0);}  }
class C{  public FramePath(){  this.frames=Collections.emptyList();}  }
class C{  public Tailer(File file,TailerListener listener){  this(file,listener,DEFAULT_DELAY_MILLIS);}  }
class C{  public FriendsGetRequestsQueryWithExtended sort(FriendsGetRequestsSort value){  return unsafeParam("sort",value);}  }
class C{  public void show(){  LinearLayout.LayoutParams lp=(LinearLayout.LayoutParams)mContentView.getLayoutParams();  lp.height=LayoutParams.WRAP_CONTENT;  mContentView.setLayoutParams(lp);}  }
class C{  protected AuthCheckPhoneQuery phone(String value){  return unsafeParam("phone",value);}  }
class C{  public boolean canUseSkill(){  Properties properties=skillTemplate.getProperties();  if (properties != null && !properties.validate(this)) {    log.debug("properties failed");    return false;  }  if (!preCastCheck()) {    return false;  }  if (effector instanceof Player) {    Player player=(Player)effector;    if (this.skillTemplate.getCounterSkill() != null) {      long time=player.getLastCounterSkill(skillTemplate.getCounterSkill());      if ((time + 5000) < System.currentTimeMillis()) {        log.debug("chain skill failed, too late");        return false;      }    }    if (skillMethod == SkillMethod.ITEM && duration > 0 && player.getMoveController().isInMove()) {      PacketSendUtility.sendPacket(player,SM_SYSTEM_MESSAGE.STR_ITEM_CANCELED(new DescriptionId(getItemTemplate().getNameId())));      return false;    }  }  if (!validateEffectedList()) {    return false;  }  return true;}  }
class C{  public static String bytesToHex(byte[] src){  char[] res=new char[src.length * 2];  final char hexDigits[]={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};  for (int i=0, j=0; i < src.length; i++) {    res[j++]=hexDigits[src[i] >>> 4 & 0x0f];    res[j++]=hexDigits[src[i] & 0x0f];  }  return new String(res);}  }
class C{  public void print(){  System.out.println("<INDEX>");  int numIdx=getNumIdx();  System.out.println("interval = " + idxInterval);  System.out.println("numIdx = " + numIdx);  for (int i=0; i < numIdx; i++) {    System.out.println("( " + bytePtrs[i] + " , "+ timePtrs[i]+ " )");  }  System.out.println("</INDEX>");}  }
class C{  private Vector2 findFarthestAirBlock(Vector2 position,Vector2 direction,Vector2 origin,float maxReach,float xCount,float yCount,Vector2 farthestAirFound){  xCount+=direction.x;  yCount+=direction.y;  boolean newVal=false;  if (xCount >= 1 || xCount <= -1) {    xCount=0;    position.add((direction.x < 0 ? -1 : 1) * ChunkManager.TILE_SIZE,0);    newVal=true;  }  if (yCount >= 1 || yCount <= -1) {    yCount=0;    position.add(0,(direction.y < 0 ? -1 : 1) * ChunkManager.TILE_SIZE);    newVal=true;  }  if (origin.dst(position) > maxReach) {    return farthestAirFound;  }  if (!newVal) {    return findFarthestAirBlock(position,direction,origin,maxReach,xCount,yCount,farthestAirFound);  }  int tx=pixelToTilePosition(position.x);  int ty=pixelToTilePosition(position.y);  BlockType type=getBlockFromTilePos(tx,ty);  if (type == BlockType.AIR) {    if (farthestAirFound == null)     farthestAirFound=Vector2Factory.instance.getVector2(tx,ty); else     farthestAirFound.set(tx,ty);    return findFarthestAirBlock(position,direction,origin,maxReach,xCount,yCount,farthestAirFound);  } else {    return farthestAirFound;  }}  }
class C{  void removingNode(NodeImpl node,NodeImpl oldChild,boolean replace){}  }
class C{  public boolean removeDataSet(T d){  if (d == null)   return false;  boolean removed=mDataSets.remove(d);  if (removed) {    calcMinMax();  }  return removed;}  }
class C{  public boolean optBoolean(String key){  return this.optBoolean(key,false);}  }
class C{  public AccountSetSilenceModeQuery deviceId(String value){  return unsafeParam("device_id",value);}  }
class C{  @Override public int fillConvertedChunkData(int rowId,int columnIndex,int[] row,KeyStructureInfo restructuringInfo){  if (chunkAttributes.getInvertedIndexes() != null) {    rowId=chunkAttributes.getInvertedIndexesReverse()[rowId];  }  int start=rowId * chunkAttributes.getColumnValueSize();  int dict=0;  for (int i=start; i < start + chunkAttributes.getColumnValueSize(); i++) {    dict<<=8;    dict^=dataChunk[i] & 0xFF;  }  row[columnIndex]=dict;  return columnIndex + 1;}  }
class C{  public static String mapFullWidthNumberToHalfWidth(String text){}  }
class C{  public static ServiceClient createServiceClient(TrustManager trustManager,KeyManager keyManager){  return createServiceClient(CertificateUtil.createSSLContext(trustManager,keyManager));}  }
class C{  public QueryData viewDefData(){  return qryData;}  }
class C{  private void addChildView(View viewToAdd){  addView(viewToAdd,CONTENT_INDEX,new FrameLayout.LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.WRAP_CONTENT,mGravity));}  }
class C{  public void clear(){  mSize=0;}  }
class C{  public MarketAddAlbumQuery addAlbum(UserActor actor,int ownerId,String title){  return new MarketAddAlbumQuery(getClient(),actor,ownerId,title);}  }
class C{  private void createNewPlayedEntry(final SQLiteDatabase database,final long songId){  float newScore=getScoreMultiplierForWeek(0);  int newPlayCount=1;  final ContentValues values=new ContentValues(3);  values.put(SongPlayCountColumns.ID,songId);  values.put(SongPlayCountColumns.PLAYCOUNTSCORE,newScore);  values.put(SongPlayCountColumns.LAST_UPDATED_WEEK_INDEX,mNumberOfWeeksSinceEpoch);  values.put(getColumnNameForWeek(0),newPlayCount);  database.insert(SongPlayCountColumns.NAME,null,values);}  }
class C{  @Override public void touchNavigatorIcon(Activity a){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    a.finishAfterTransition();  } else {    a.finish();    a.overridePendingTransition(0,R.anim.activity_slide_out_bottom);  }}  }
class C{  public static String readString(DataInput in) throws IOException {  int length=WritableUtils.readVInt(in);  byte[] bytes=new byte[length];  in.readFully(bytes,0,length);  return decode(bytes);}  }
class C{  public boolean gotoLast(){  currentTaxonIterator=null;  currentTaxonId=null;  return isCurrentSet();}  }
class C{  @Override public void flush(){  if (_line.length() > 0 || _text.length() > 0)   breakLine();  try {    _writer.flush();  } catch (  IOException except) {    if (_exception == null)     _exception=except;  }}  }
class C{  public void prepareMatrixOffset(boolean inverted){  mMatrixOffset.reset();  if (!inverted)   mMatrixOffset.postTranslate(mViewPortHandler.offsetLeft(),mViewPortHandler.getChartHeight() - mViewPortHandler.offsetBottom()); else {    mMatrixOffset.setTranslate(-(mViewPortHandler.getChartWidth() - mViewPortHandler.offsetRight()),mViewPortHandler.getChartHeight() - mViewPortHandler.offsetBottom());    mMatrixOffset.postScale(-1.0f,1.0f);  }}  }
class C{  public static String factoryLinkByDescriptionLink(String descriptionLink){  if (null == descriptionLink) {    return null;  }  List<RegistryEntry> list=entries.stream().filter(null).collect(Collectors.toList());  if (list.isEmpty()) {    return null;  }  return list.get(0).descriptionFactoryLink;}  }
class C{  private static void copyColumn(final RealMatrix m1,int col1,RealMatrix m2,int col2){  for (int i=0; i < m1.getRowDimension(); i++) {    m2.setEntry(i,col2,m1.getEntry(i,col1));  }}  }
class C{  public EglCore(EGLContext sharedContext,int flags){  if (eGLDisplay != EGL14.EGL_NO_DISPLAY) {    throw new RuntimeException("EGL already set up");  }  if (sharedContext == null) {    sharedContext=EGL14.EGL_NO_CONTEXT;  }  eGLDisplay=EGL14.eglGetDisplay(EGL14.EGL_DEFAULT_DISPLAY);  if (eGLDisplay == EGL14.EGL_NO_DISPLAY) {    throw new RuntimeException("unable to get EGL14 display");  }  int[] version=new int[2];  if (!EGL14.eglInitialize(eGLDisplay,version,0,version,1)) {    eGLDisplay=null;    throw new RuntimeException("unable to initialize EGL14");  }  if ((flags & FLAG_TRY_GLES3) != 0) {    EGLConfig config=getConfig(flags,3);    if (config != null) {      int[] attrib3_list={EGL14.EGL_CONTEXT_CLIENT_VERSION,3,EGL14.EGL_NONE};      EGLContext context=EGL14.eglCreateContext(eGLDisplay,config,sharedContext,attrib3_list,0);      if (EGL14.eglGetError() == EGL14.EGL_SUCCESS) {        eGLConfig=config;        eGLContext=context;        glVersion=3;      }    }  }  if (eGLContext == EGL14.EGL_NO_CONTEXT) {    EGLConfig config=getConfig(flags,2);    if (config == null) {      throw new RuntimeException("Unable to find a suitable EGLConfig");    }    int[] attrib2_list={EGL14.EGL_CONTEXT_CLIENT_VERSION,2,EGL14.EGL_NONE};    EGLContext context=EGL14.eglCreateContext(eGLDisplay,config,sharedContext,attrib2_list,0);    checkEglError("eglCreateContext");    eGLConfig=config;    eGLContext=context;    glVersion=2;  }  int[] values=new int[1];  EGL14.eglQueryContext(eGLDisplay,eGLContext,EGL14.EGL_CONTEXT_CLIENT_VERSION,values,0);  Log.d(TAG,"EGLContext created, client version " + values[0]);}  }
class C{  public void load(DataInput rafIn) throws IOException, MaryConfigurationException {  int numIdx=rafIn.readInt();  idxInterval=rafIn.readInt();  if (idxInterval <= 0) {    throw new MaryConfigurationException("read negative index interval -- file seems corrupt");  }  bytePtrs=new long[numIdx];  timePtrs=new long[numIdx];  int numBytesToRead=16 * numIdx + 16;  byte[] data=new byte[numBytesToRead];  rafIn.readFully(data);  DataInput bufIn=new DataInputStream(new ByteArrayInputStream(data));  for (int i=0; i < numIdx; i++) {    bytePtrs[i]=bufIn.readLong();    timePtrs[i]=bufIn.readLong();    if (i > 0) {      if (bytePtrs[i] < bytePtrs[i - 1] || timePtrs[i] < timePtrs[i - 1]) {        throw new MaryConfigurationException("File seems corrupt: Pointer positions in index fields are not strictly monotonously rising");      }    }  }  bufIn.readLong();  bufIn.readLong();}  }
class C{  public boolean isFinal(){  return queue.isEmpty();}  }
class C{  public OpenMapRealVector(Double[] values){  this(values,DEFAULT_ZERO_TOLERANCE);}  }
class C{  public boolean addFrame(BufferedImage im){  if ((im == null) || !started) {    return false;  }  boolean ok=true;  try {    if (!sizeSet) {      setSize(im.getWidth(),im.getHeight());    }    image=im;    getImagePixels();    analyzePixels();    if (firstFrame) {      writeLSD();      writePalette();      if (repeat >= 0) {        writeNetscapeExt();      }    }    writeGraphicCtrlExt();    writeImageDesc();    if (!firstFrame) {      writePalette();    }    writePixels();    firstFrame=false;  } catch (  IOException e) {    ok=false;  }  return ok;}  }
class C{  @PostConstruct public void init(){  LOGGER.debug("Initializing AliveTimer cache...");  commonInit();  LOGGER.info("... AliveTimer cache initialization complete.");}  }
class C{  public void clearAll(){  nodeToPreds.clear();  nodeToSuccs.clear();  heads.clear();  tails.clear();}  }
class C{  public ZWaveSceneControllerConfigurationCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  public static void drawButtonRewiConnect(RewiButtonConnectType connectType,IGuiButton button,boolean visible,int xPos,int yPos,int mouseX,int mouseY,int width,int height){  if (!visible)   return;  boolean isHovered=CoordinateUtil.inbetween(xPos,yPos,mouseX,mouseY,width,height);  RewiMod.getInstance().getDefaultButtonFactory().drawButton(button,xPos,yPos,width,isHovered ? ButtonFactory.ButtonState.HOVERED : ButtonFactory.ButtonState.ENABLED);  getTextureHandler().bindModTexture("textures/misc/" + (connectType == RewiButtonConnectType.MINECRAFT ? "rewiHead16" : "teamspeak256") + ".png");  getGlStateManager().color(1.0F,1.0F,1.0F);  drawCustomSizeRect(xPos + 3,yPos + 3,0,0,14,14);}  }
class C{  public int computeId(BitSet activeMatches,IReadBlock readBlock){  if (name2id != null) {    final String name=readBlock.getReadName();    final Integer id=name2id.get(name);    if (id != null && id > 0)     return id;  }  if (activeMatches.cardinality() == 0)   return IdMapper.NOHITS_ID;  for (int i=activeMatches.nextSetBit(0); i != -1; i=activeMatches.nextSetBit(i + 1)) {    IMatchBlock match=readBlock.getMatchBlock(i);    int id=match.getId(cName);    if (id > 0)     return id;  }  return IdMapper.UNASSIGNED_ID;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Pulled_A_TO_B(String skilltarget,int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201010,skilltarget,num0,skillcaster,skillname);}  }
class C{  protected void sqrtLayout(VisualTable labels){  Rectangle2D b=getLayoutBounds();  double breadth=getBreadth(b);  double span=m_hi - m_lo;  double splo=MathLib.safeSqrt(m_prevlo);  double spspan=MathLib.safeSqrt(m_prevhi) - splo;  double vlo=Math.pow(10,Math.floor(MathLib.safeLog10(m_lo)));  double slo=MathLib.safeSqrt(m_lo);  double sspan=MathLib.safeSqrt(m_hi) - slo;  Iterator iter=labels.tuples();  while (iter.hasNext()) {    VisualItem item=(VisualItem)iter.next();    reset(item);    double v=item.getDouble(VALUE);    double x=span == 0 ? 0 : ((MathLib.safeSqrt(v) - slo) / sspan) * breadth;    set(item,x,b);  }  Index index=labels.index(VALUE);  double step=getLinearStep(span,breadth / span);  if (step == 0)   step=1;  int r;  for (double x, v=vlo; v <= m_hi; v+=step) {    x=((MathLib.safeSqrt(v) - slo) / sspan) * breadth;    if (x < -0.5) {      continue;    } else     if ((r=index.get(v)) >= 0) {      VisualItem item=labels.getItem(r);      item.setVisible(true);      item.setEndVisible(true);    } else {      VisualItem item=labels.addItem();      item.set(LABEL,m_nf.format(v));      item.setDouble(VALUE,v);      double f=spspan == 0 ? 0 : ((MathLib.safeSqrt(v) - splo) / spspan);      if (f <= 0 || f >= 1.0) {        item.setStartVisible(true);      }      set(item,f * breadth,b);      set(item,x,b);    }  }}  }
class C{  private static int[][] calculateBlackPoints(byte[] luminances,int subWidth,int subHeight,int width,int height){  int[][] blackPoints=new int[subHeight][subWidth];  for (int y=0; y < subHeight; y++) {    int yoffset=y << BLOCK_SIZE_POWER;    int maxYOffset=height - BLOCK_SIZE;    if (yoffset > maxYOffset) {      yoffset=maxYOffset;    }    for (int x=0; x < subWidth; x++) {      int xoffset=x << BLOCK_SIZE_POWER;      int maxXOffset=width - BLOCK_SIZE;      if (xoffset > maxXOffset) {        xoffset=maxXOffset;      }      int sum=0;      int min=0xFF;      int max=0;      for (int yy=0, offset=yoffset * width + xoffset; yy < BLOCK_SIZE; yy++, offset+=width) {        for (int xx=0; xx < BLOCK_SIZE; xx++) {          int pixel=luminances[offset + xx] & 0xFF;          sum+=pixel;          if (pixel < min) {            min=pixel;          }          if (pixel > max) {            max=pixel;          }        }        if (max - min > MIN_DYNAMIC_RANGE) {          for (yy++, offset+=width; yy < BLOCK_SIZE; yy++, offset+=width) {            for (int xx=0; xx < BLOCK_SIZE; xx++) {              sum+=luminances[offset + xx] & 0xFF;            }          }        }      }      int average=sum >> (BLOCK_SIZE_POWER * 2);      if (max - min <= MIN_DYNAMIC_RANGE) {        average=min / 2;        if (y > 0 && x > 0) {          int averageNeighborBlackPoint=(blackPoints[y - 1][x] + (2 * blackPoints[y][x - 1]) + blackPoints[y - 1][x - 1]) / 4;          if (min < averageNeighborBlackPoint) {            average=averageNeighborBlackPoint;          }        }      }      blackPoints[y][x]=average;    }  }  return blackPoints;}  }
class C{  public static JavaRDD<List<List<Writable>>> executeToSequence(JavaRDD<List<Writable>> inputWritables,TransformProcess transformProcess){  if (!(transformProcess.getFinalSchema() instanceof SequenceSchema)) {    throw new IllegalStateException("Cannot return non-sequence data with this method");  }  return execute(inputWritables,null,transformProcess).getSecond();}  }
class C{  private void createAndWriteDocuments(GigaSpace gigaSpace,String type,String body,WriteModifiers updateModifiers) throws TypeNotFoundException {  logger.info("creating space Documents from payload");  SpaceDocument[] spaceDocuments=ControllerUtils.createSpaceDocuments(type,body,gigaSpace);  if (spaceDocuments != null && spaceDocuments.length > 0) {    try {      gigaSpace.writeMultiple(spaceDocuments,Lease.FOREVER,updateModifiers);    } catch (    DataAccessException e) {      throw translateDataAccessException(gigaSpace,e,type);    }    if (logger.isLoggable(Level.FINE))     logger.fine("wrote space documents to space");  } else {    if (logger.isLoggable(Level.FINE))     logger.fine("did not write anything to space");  }}  }
class C{  public void toTextOut(CART cart,PrintWriter pw) throws IOException {  try {    toWagonFormat(cart.getRootNode(),null,"",pw);    pw.flush();    pw.close();  } catch (  IOException ioe) {    IOException newIOE=new IOException("Error dumping CART to standard output");    newIOE.initCause(ioe);    throw newIOE;  }}  }
class C{  private MotionEvent swapXY(MotionEvent ev){  float width=getWidth();  float height=getHeight();  float newX=(ev.getY() / height) * width;  float newY=(ev.getX() / width) * height;  ev.setLocation(newX,newY);  return ev;}  }
class C{  public void putDelegate(Object key,X509TrustManager newDelegate){  delegates.put(key,newDelegate);}  }
class C{  public void reset(){  for (int i=0; i < measureDataChunk.length; i++) {    this.measureDataChunk[i]=null;  }  for (int i=0; i < dimensionDataChunk.length; i++) {    this.dimensionDataChunk[i]=null;  }}  }
class C{  private void fillDeclaredPrefixes(StartElement event){  fillDeclaredPrefixes(event.getNamespaces());}  }
class C{  public void testThemeOverride(){  VirtualFile virtualFile=myFixture.copyFileToProject("themeEditor/themeEditorStyle/styles.xml","res/values/styles.xml");  myFixture.copyFileToProject("themeEditor/themeEditorStyle/styles_1.xml","additionalModules/moduleA/res/values/styles.xml");  ConfigurationManager configurationManager=myFacet.getConfigurationManager();  Configuration configuration=configurationManager.getConfiguration(virtualFile);  ThemeResolver resolver=new ThemeResolver(configuration);  ConfiguredThemeEditorStyle theme=resolver.getTheme("AppTheme");  assertNotNull(theme);  assertEquals(1,theme.getParentNames().size());  assertEquals("ATheme",theme.getParentNames().iterator().next().getElement());}  }
class C{  private static boolean trustGetContextClassLoader(Thread t){  Class cl=t.getClass();  if (cl == Thread.class) {    return true;  }  Boolean b;synchronized (trustGetCCL) {    b=(Boolean)trustGetCCL.get(cl);  }  if (b == null) {    b=trustGetContextClassLoader0(cl);synchronized (trustGetCCL) {      trustGetCCL.put(cl,b);    }  }  return b.booleanValue();}  }
class C{  protected void hideContextualSearch(boolean immediately){}  }
class C{  public boolean isMinimumScaleUpdated(){  return minimumScaleUpdated;}  }
class C{  @Override public double cost(double a,double b){  return (a > b ? (a - b) : (b - a));}  }
class C{  public int onBrowseUp(){  OCFile parentDir;  int moveCount=0;  if (mFile != null) {    FileDataStorageManager storageManager=mContainerActivity.getStorageManager();    String parentPath=null;    if (mFile.getParentId() != FileDataStorageManager.ROOT_PARENT_ID) {      parentPath=new File(mFile.getRemotePath()).getParent();      parentPath=parentPath.endsWith(OCFile.PATH_SEPARATOR) ? parentPath : parentPath + OCFile.PATH_SEPARATOR;      parentDir=storageManager.getFileByPath(parentPath);      moveCount++;    } else {      parentDir=storageManager.getFileByPath(OCFile.ROOT_PATH);    }    while (parentDir == null) {      parentPath=new File(parentPath).getParent();      parentPath=parentPath.endsWith(OCFile.PATH_SEPARATOR) ? parentPath : parentPath + OCFile.PATH_SEPARATOR;      parentDir=storageManager.getFileByPath(parentPath);      moveCount++;    }    mFile=parentDir;    listDirectory(mFile,MainApp.getOnlyOnDevice());    onRefresh(false);    restoreIndexAndTopPosition();  }  return moveCount;}  }
class C{  private static List<LoadMetadataDetails> identifySegmentsToBeMergedBasedOnSegCount(List<LoadMetadataDetails> listOfSegmentsAfterPreserve){  List<LoadMetadataDetails> mergedSegments=new ArrayList<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  List<LoadMetadataDetails> unMergedSegments=new ArrayList<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);  int[] noOfSegmentLevelsCount=CarbonProperties.getInstance().getCompactionSegmentLevelCount();  int level1Size=0;  int level2Size=0;  boolean first=true;  for (  int levelCount : noOfSegmentLevelsCount) {    if (first) {      level1Size=levelCount;      first=false;    } else {      level2Size=levelCount;      break;    }  }  int unMergeCounter=0;  int mergeCounter=0;  for (  LoadMetadataDetails segment : listOfSegmentsAfterPreserve) {    String segName=segment.getLoadName();    if (segName.endsWith(CarbonCommonConstants.LEVEL2_COMPACTION_INDEX) || (segment.isMajorCompacted() != null && segment.isMajorCompacted().equalsIgnoreCase("true"))) {      continue;    }    if (!isMergedSegment(segName)) {      unMergeCounter++;      unMergedSegments.add(segment);      if (unMergeCounter == (level1Size)) {        return unMergedSegments;      }    } else {      mergeCounter++;      mergedSegments.add(segment);      if (mergeCounter == (level2Size)) {        return mergedSegments;      }    }  }  return new ArrayList<>(0);}  }
class C{  public Value type(Value target){  throw new RuntimeException("Unsupported operation.");}  }
class C{  @Singleton @Provides Retrofit provideRetrofit(){  HttpLoggingInterceptor interceptor=new HttpLoggingInterceptor();  interceptor.setLevel(HttpLoggingInterceptor.Level.BODY);  OkHttpClient client=new OkHttpClient.Builder().addInterceptor(interceptor).build();  Retrofit retrofit=new Retrofit.Builder().baseUrl("https://api.github.com/").client(client).addConverterFactory(GsonConverterFactory.create()).addCallAdapterFactory(RxJavaCallAdapterFactory.create()).build();  return retrofit;}  }
class C{  public boolean unequal(final Dfp x){  if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits()) {    return false;  }  return greaterThan(x) || lessThan(x);}  }
class C{  public void swipeFinished(long time){  if (!mInSwipe)   return;  mInSwipe=false;  setWarpState(true,true);  mEvenOutProgress=0.f;  onUpOrCancel(time);}  }
class C{  public EntryVersionCleaner(String parentName,ReferenceQueue<Object> queue,Map<EntryInfoKey,V> entryInfos){  super(parentName + "$" + EntryVersionCleaner.class.getSimpleName());  _queue=queue;  _entryInfos=entryInfos;  this.setDaemon(true);}  }
class C{  @Transactional public BookDTO save(BookDTO dto){  if (dto == null) {    return null;  }  Book book;  if (dto.isIdSet()) {    book=bookRepository.findOne(dto.id);  } else {    book=new Book();  }  book.setTitle(dto.title);  book.setSummary(dto.summary);  book.setPublicationDate(dto.publicationDate);  book.setBestSeller(dto.bestSeller);  book.setPrice(dto.price);  if (dto.author == null) {    book.setAuthor(null);  } else {    Author author=book.getAuthor();    if (author == null || (author.getId().compareTo(dto.author.id) != 0)) {      book.setAuthor(authorRepository.findOne(dto.author.id));    }  }  return toDTO(bookRepository.save(book));}  }
class C{  public boolean equals(BasenameList bnl){  if (bnl.getLength() != this.getLength())   return (false);  for (int i=0; i < bnl.getLength(); i++) {    if (!this.contains(bnl.getName(i)))     return (false);  }  return (true);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_USER_KICKED_BY_TIMEOUT(String durationtime0){  return new SM_SYSTEM_MESSAGE(1400261,durationtime0);}  }
class C{  public static Location toLocation(IClassFile unit,int offset,int length) throws JavaModelException {  Location result=new Location();  String packageName=unit.getParent().getElementName();  String jarName=unit.getParent().getParent().getElementName();  String uriString=null;  try {    uriString=new URI("jdt","contents","/" + jarName + "/"+ packageName+ "/"+ unit.getElementName(),unit.getHandleIdentifier(),null).toASCIIString();  } catch (  URISyntaxException e) {    JavaLanguageServerPlugin.logException("Error generating URI for class ",e);  }  result.setUri(uriString);  IBuffer buffer=unit.getBuffer();  int[] loc=JsonRpcHelpers.toLine(buffer,offset);  int[] endLoc=JsonRpcHelpers.toLine(buffer,offset + length);  Range range=new Range();  if (loc != null) {    range.withStart(new Position().withLine(loc[0]).withCharacter(loc[1]));  }  if (endLoc != null) {    range.withEnd(new Position().withLine(endLoc[0]).withCharacter(endLoc[1]));  }  return result.withRange(range);}  }
class C{  public static boolean remove(String id){  id=GROUP + id;  if (cacheSystem != null) {    return cacheSystem.delete(id);  }  return false;}  }
class C{  protected void addSourceFileTag(soot.SootClass sc){  soot.tagkit.SourceFileTag tag=null;  if (sc.hasTag("SourceFileTag")) {    tag=(soot.tagkit.SourceFileTag)sc.getTag("SourceFileTag");  } else {    tag=new soot.tagkit.SourceFileTag();    sc.addTag(tag);  }  String name=Util.getSourceFileOfClass(sc);  if (InitialResolver.v().classToSourceMap() != null) {    if (InitialResolver.v().classToSourceMap().containsKey(name)) {      name=InitialResolver.v().classToSourceMap().get(name);    }  }  int slashIndex=name.lastIndexOf("/");  if (slashIndex != -1) {    name=name.substring(slashIndex + 1);  }  tag.setSourceFile(name);}  }
class C{  @Nullable private static Configuration pickConfiguration(AndroidFacet facet,Module module,PsiFile file){  VirtualFile virtualFile=file.getVirtualFile();  if (virtualFile == null) {    return null;  }  VirtualFile parent=virtualFile.getParent();  if (parent == null) {    return null;  }  VirtualFile layout;  String parentName=parent.getName();  if (!parentName.startsWith(FD_RES_LAYOUT)) {    layout=pickLayoutFile(module,facet);    if (layout == null) {      return null;    }  } else {    layout=virtualFile;  }  return facet.getConfigurationManager().getConfiguration(layout);}  }
class C{  public MessagesMarkAsImportantQuery important(Boolean value){  return unsafeParam("important",value);}  }
class C{  private Log validate(String logId,String projectName){  Log log=logRepository.findOne(logId);  expect(log,notNull()).verify(LOG_NOT_FOUND,logId);  final TestItem testItem=testItemRepository.findOne(log.getTestItemRef());  String project=launchRepository.findOne(testItem.getLaunchRef()).getProjectRef();  expect(project,equalTo(projectName)).verify(FORBIDDEN_OPERATION,formattedSupplier("Log '{}' is not under specified project '{}'",logId,projectName));  return log;}  }
class C{  public static double[][] computeProfiles(Document doc,ViewerBase graphView){  final int totalSamples=doc.getNumberOfSamples();  int totalClasses=0;  for (Node v=graphView.getGraph().getFirstNode(); v != null; v=v.getNext()) {    if (graphView.getSelected(v)) {      totalClasses++;    }  }  double[][] profiles=new double[totalSamples][totalClasses];  int classCount=0;  for (Node v=graphView.getGraph().getFirstNode(); v != null; v=v.getNext()) {    if (graphView.getSelected(v)) {      int[] counts=(v.getOutDegree() == 0 ? graphView.getNodeData(v).getSummarized() : graphView.getNodeData(v).getAssigned());      for (int sampleCount=0; sampleCount < totalSamples; sampleCount++) {        profiles[sampleCount][classCount]=counts[sampleCount];      }      classCount++;    }  }  for (  double[] profile : profiles) {    double sum=0;    for (    double value : profile)     sum+=value;    if (sum > 0) {      for (int i=0; i < profile.length; i++) {        profile[i]/=sum;      }    }  }  return profiles;}  }
class C{  public Well1024a(int seed){  super(K,seed);}  }
class C{  static void put(ProcessingEnvironment env,CodeBlock.Builder block,TypeName type,String state,Element element) throws ProcessingException {  String name=element.getSimpleName().toString();  TypeName parcelableType=getTypeName(env.getTypeUtils(),element.asType());  if (parcelableType.equals(BUNDLE)) {    block.addStatement("$L.putBundle($S,target.$L)",state,name,name);    elementsMap.put(element,type);  } else   if (parcelableType.equals(IBINDER)) {    block.addStatement("$L.putBinder($S,target.$L)",state,name,name);    elementsMap.put(element,type);  } else   if (parcelableType.equals(BOOLEAN) || parcelableType.equals(BOOLEAN.box())) {    block.addStatement("$L.putBoolean($S,target.$L)",state,name,name);    elementsMap.put(element,type);  } else   if (parcelableType.equals(BOOLEAN_ARRAY)) {    block.addStatement("$L.putBooleanArray($S,target.$L)",state,name,name);    elementsMap.put(element,type);  } else   if (parcelableType.equals(BYTE) || parcelableType.equals(BYTE.box())) {    block.addStatement("$L.putByte($S,target.$L)",state,name,name);    elementsMap.put(element,type);  } else   if (parcelableType.equals(BYTE_ARRAY)) {    block.addStatement("$L.putByteArray($S,target.$L)",state,name,name);    elementsMap.put(element,type);  } else   if (parcelableType.equals(CHAR) || parcelableType.equals(CHAR.box())) {    block.addStatement("$L.putChar($S,target.$L)",state,name,name);    elementsMap.put(element,type);  } else   if (parcelableType.equals(CHAR_ARRAY)) {    block.addStatement("$L.putCharArray($S,target.$L)",state,name,name);    elementsMap.put(element,type);  } else   if (parcelableType.equals(CHARSEQUENCE)) {    block.addStatement("$L.putCharSequence($S,target.$L)",state,name,name);    elementsMap.put(element,type);  } else   if (parcelableType.equals(CHARSEQUENCE_ARRAY)) {    block.addStatement("$L.putCharSequenceArray($S,target.$L)",state,name,name);    elementsMap.put(element,type);  } else   if (parcelableType.equals(CHARSEQUENCE_ARRAYLIST)) {    block.addStatement("$L.putCharSequenceArrayList($S,target.$L)",state,name,name);    elementsMap.put(element,type);  } else   if (parcelableType.equals(DOUBLE) || parcelableType.equals(DOUBLE.box())) {    block.addStatement("$L.putDouble($S,target.$L)",state,name,name);    elementsMap.put(element,type);  } else   if (parcelableType.equals(DOUBLE_ARRAY)) {    block.addStatement("$L.putDoubleArray($S,target.$L)",state,name,name);    elementsMap.put(element,type);  } else   if (parcelableType.equals(FLOAT) || parcelableType.equals(FLOAT.box())) {    block.addStatement("$L.putFloat($S,target.$L)",state,name,name);    elementsMap.put(element,type);  } else   if (parcelableType.equals(FLOAT_ARRAY)) {    block.addStatement("$L.putFloatArray($S,target.$L)",state,name,name);    elementsMap.put(element,type);  } else   if (parcelableType.equals(INT) || parcelableType.equals(INT.box())) {    block.addStatement("$L.putInt($S,target.$L)",state,name,name);    elementsMap.put(element,type);  } else   if (parcelableType.equals(INT_ARRAY)) {    block.addStatement("$L.putIntArray($S,target.$L)",state,name,name);    elementsMap.put(element,type);  } else   if (parcelableType.equals(INT_ARRAYLIST)) {    block.addStatement("$L.putIntegerArrayList($S,target.$L)",state,name,name);    elementsMap.put(element,type);  } else   if (parcelableType.equals(LONG) || parcelableType.equals(LONG.box())) {    block.addStatement("$L.putLong($S,target.$L)",state,name,name);    elementsMap.put(element,type);  } else   if (parcelableType.equals(LONG_ARRAY)) {    block.addStatement("$L.putLongArray($S,target.$L)",state,name,name);    elementsMap.put(element,type);  } else   if (parcelableType.equals(PARCELABLE)) {    block.addStatement("$L.putParcelable($S,target.$L)",state,name,name);    elementsMap.put(element,type);  } else   if (parcelableType.equals(PARCELABLE_ARRAY)) {    block.addStatement("$L.putParcelableArray($S,target.$L)",state,name,name);    elementsMap.put(element,type);  } else   if (parcelableType.equals(PARCELABLE_ARRAYLIST)) {    block.addStatement("$L.putParcelableArrayList($S,target.$L)",state,name,name);    elementsMap.put(element,type);  } else   if (parcelableType.equals(SHORT) || parcelableType.equals(SHORT.box())) {    block.addStatement("$L.putShort($S,target.$L)",state,name,name);    elementsMap.put(element,type);  } else   if (parcelableType.equals(SHORT_ARRAY)) {    block.addStatement("$L.putShortArray($S,target.$L)",state,name,name);    elementsMap.put(element,type);  } else   if (parcelableType.equals(SIZE)) {    block.addStatement("$L.putSize($S,target.$L)",state,name,name);    elementsMap.put(element,type);  } else   if (parcelableType.equals(SIZEF)) {    block.addStatement("$L.putSizeF($S,target.$L)",state,name,name);    elementsMap.put(element,type);  } else   if (parcelableType.equals(SPARSE_PARCELABE_ARRAY)) {    block.addStatement("$L.putSparseParcelableArray($S,target.$L)",state,name,name);    elementsMap.put(element,type);  } else   if (parcelableType.equals(STRING)) {    block.addStatement("$L.putString($S,target.$L)",state,name,name);    elementsMap.put(element,type);  } else   if (parcelableType.equals(STRING_ARRAY)) {    block.addStatement("$L.putStringArray($S,target.$L)",state,name,name);    elementsMap.put(element,type);  } else   if (parcelableType.equals(STRING_ARRAYLIST)) {    block.addStatement("$L.putStringArrayList($S,target.$L)",state,name,name);    elementsMap.put(element,type);  } else   if (parcelableType.equals(SERIALIZABLE)) {    block.addStatement("$L.putSerializable($S,target.$L)",state,name,name);    elementsMap.put(element,type);  } else {    throw new ProcessingException(element,"The type @%s is not supported yet",env.getTypeUtils().asElement(element.asType()).getSimpleName().toString());  }}  }
class C{  public boolean isFooter(int position){  return position < getItemCount() && position >= getItemCount() - mFootViews.size();}  }
class C{  public String toString(cp_info constant_pool[]){  CONSTANT_Utf8_info ci=(CONSTANT_Utf8_info)(constant_pool[name_index]);  return ci.convert();}  }
class C{  public void cascadeParamChanges(boolean cascade){  this.cascadeChanges=cascade;  requestLayout();}  }
class C{  private void pruneIfNeeded(int neededSpace){  if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes) {    return;  }  if (VolleyLog.DEBUG) {    VolleyLog.v("Pruning old cache entries.");  }  long before=mTotalSize;  int prunedFiles=0;  long startTime=SystemClock.elapsedRealtime();  Iterator<Map.Entry<String,CacheHeader>> iterator=mEntries.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<String,CacheHeader> entry=iterator.next();    CacheHeader e=entry.getValue();    boolean deleted=getFileForKey(e.key).delete();    if (deleted) {      mTotalSize-=e.size;    } else {      VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",e.key,getFilenameForKey(e.key));    }    iterator.remove();    prunedFiles++;    if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes * HYSTERESIS_FACTOR) {      break;    }  }  if (VolleyLog.DEBUG) {    VolleyLog.v("pruned %d files, %d bytes, %d ms",prunedFiles,(mTotalSize - before),SystemClock.elapsedRealtime() - startTime);  }}  }
class C{  public ShapelessRecipe addIngredient(int count,MaterialData ingredient){  return addIngredient(count,ingredient.getItemType(),ingredient.getData());}  }
class C{  void addField(FieldRefNode frn,SparkField field){  if (fields == null)   fields=new HashMap<SparkField,FieldRefNode>();  fields.put(field,frn);}  }
class C{  public static void broadcastPacketAndReceive(VisibleObject visibleObject,AionServerPacket packet){  if (visibleObject instanceof Player) {    sendPacket((Player)visibleObject,packet);  }  broadcastPacket(visibleObject,packet);}  }
class C{  @Override public boolean equals(Object that){  if (!(that instanceof S2CellUnion)) {    return false;  }  S2CellUnion union=(S2CellUnion)that;  return this.cellIds.equals(union.cellIds);}  }
class C{  public int writeToMessage(byte[] byteArray){  return writeToMessage(byteArray,0,byteArray.length);}  }
class C{  public static void moveFile(File srcFile,File destFile) throws IOException {  if (srcFile == null) {    throw new NullPointerException("Source must not be null");  }  if (destFile == null) {    throw new NullPointerException("Destination must not be null");  }  if (!srcFile.exists()) {    throw new FileNotFoundException("Source '" + srcFile + "' does not exist");  }  if (srcFile.isDirectory()) {    throw new IOException("Source '" + srcFile + "' is a directory");  }  if (destFile.exists()) {    throw new FileExistsException("Destination '" + destFile + "' already exists");  }  if (destFile.isDirectory()) {    throw new IOException("Destination '" + destFile + "' is a directory");  }  boolean rename=srcFile.renameTo(destFile);  if (!rename) {    copyFile(srcFile,destFile);    if (!srcFile.delete()) {      FileUtils.deleteQuietly(destFile);      throw new IOException("Failed to delete original file '" + srcFile + "' after copy to '"+ destFile+ "'");    }  }}  }
class C{  public void build() throws XmlParsingException, FileNotFoundException {  strategy.parse(cplFile);  strategy.build();}  }
class C{  private List<TextPosition> createTextList(){  List<TextPosition> textList=new ArrayList<TextPosition>();  Point textPosition=AppSplashScreen.getTextPosition();  textList.add(new TextPosition(AppSplashScreen.getVersionString(),textPosition));  Point p=new Point((int)textPosition.getX(),(int)(textPosition.getY() + AppSplashScreen.getFont().getSize2D()));  String geoToolsVersionString=String.format("%s GeoTools %s",Localisation.getString(AboutDialog.class,"AboutDialog.basedOn"),GeoTools.getVersion().toString());  textList.add(new TextPosition(geoToolsVersionString,p));  return textList;}  }
class C{  private boolean isOn(long flag){  return (options & flag) > 0;}  }
class C{  public CASCDistanceCalculator() throws IOException {  Process p=Runtime.getRuntime().exec(PathToCasc);  try {    p.waitFor();  } catch (  InterruptedException iee) {    return;  }}  }
class C{  public TransformPanel(){  this(new Vector2(),0.0,true,null);}  }
class C{  @SafeVarargs public final TestSubscriber<T> assertValues(T... expectedValues){  return assertValueSequence(Arrays.asList(expectedValues));}  }
class C{  static void silentlyClose(Closeable closeable){  try {    if (closeable != null) {      closeable.close();    }  } catch (  IOException e) {  }}  }
class C{  protected boolean hasAttemptRemaining(){  return mCurrentRetryCount <= mMaxNumRetries;}  }
class C{  public String name(){  return theName;}  }
class C{  public int deplete(){  int ret=getValue();  setValue(0);  return ret;}  }
class C{  @Override public Packet read(PacketBuffer buf){  PacketSpec spec=getSpec(buf.readInt());  Packet packet=new Packet(new PacketBuilder(this,spec));  packet.read(buf);  return packet;}  }
class C{  public void addArray(Object[] a){  for (int i=0; i < a.length; i++) {    add(a[i]);  }}  }
class C{  public static void write(File file,CharSequence data,Charset encoding) throws IOException {  write(file,data,encoding,false);}  }
class C{  public int size(){  return data.length;}  }
class C{  public boolean isValidated(int row){  return getBoolean(row,VisualItem.VALIDATED);}  }
class C{  private boolean canScrollLinearly(int fromStackIndex){  int count=mStacks.length;  if (!(mScrollIndexOffset <= 0 && -mScrollIndexOffset <= (count - 1))) {    return false;  }  return mStacks[fromStackIndex ^ 0x01].isDisplayable();}  }
class C{  protected PhotosGetMarketUploadServerQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  public void addln(String line){  this.graph.append(line).append("\n");}  }
class C{  private float sizeOfBlackWhiteBlackRun(int fromX,int fromY,int toX,int toY){  boolean steep=Math.abs(toY - fromY) > Math.abs(toX - fromX);  if (steep) {    int temp=fromX;    fromX=fromY;    fromY=temp;    temp=toX;    toX=toY;    toY=temp;  }  int dx=Math.abs(toX - fromX);  int dy=Math.abs(toY - fromY);  int error=-dx / 2;  int xstep=fromX < toX ? 1 : -1;  int ystep=fromY < toY ? 1 : -1;  int state=0;  int xLimit=toX + xstep;  for (int x=fromX, y=fromY; x != xLimit; x+=xstep) {    int realX=steep ? y : x;    int realY=steep ? x : y;    if ((state == 1) == image.get(realX,realY)) {      if (state == 2) {        return MathUtils.distance(x,y,fromX,fromY);      }      state++;    }    error+=dy;    if (error > 0) {      if (y == toY) {        break;      }      y+=ystep;      error-=dx;    }  }  if (state == 2) {    return MathUtils.distance(toX + xstep,toY,fromX,fromY);  }  return Float.NaN;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public NullLiteral fullCopy(){  NullLiteral tree=(NullLiteral)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public FloatType fullCopy(){  FloatType tree=(FloatType)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  ConstrainableProxyUtil.verifyConsistentConstraints(constraints,server,methodMappings);}  }
class C{  public RegisterLocalViewSpaceOperationRequest(){}  }
class C{  public boolean isIncrementalBuild(){  return incrementalBuild;}  }
class C{  protected boolean matchesExpressionTree(ExpNode root,ISpaceProxy space,Transaction txn,int readModifier,int max) throws SQLException {  if (root == null)   return true;  if (_traversalOrder != null) {    for (int i=0; i < _traversalOrder.length; i++) {      ExpNode node=_traversalOrder[i];      if (i < _traversalOrder.length - 1)       node.accept(this,space,txn,readModifier,Integer.MAX_VALUE); else       node.accept(this,space,txn,readModifier,max);    }    return getResults(root);  }  Stack<ExpNode> stack=new Stack<ExpNode>();  Stack<ExpNode> stack2=new Stack<ExpNode>();  stack.push(root);  while (!stack.isEmpty()) {    ExpNode curr=stack.pop();    if (!(curr instanceof ValueNode))     stack2.push(curr);    if (curr.getTemplate() == null) {      if (curr.getLeftChild() != null)       stack.push(curr.getLeftChild());      if (curr.getRightChild() != null)       stack.push(curr.getRightChild());    }  }  _traversalOrder=new ExpNode[stack2.size()];  int index=0;  while (!stack2.isEmpty()) {    ExpNode node=stack2.pop();    _traversalOrder[index++]=node;    if (stack2.isEmpty())     node.accept(this,space,txn,readModifier,max); else     node.accept(this,space,txn,readModifier,Integer.MAX_VALUE);  }  return getResults(root);}  }
class C{  protected void makeProcessDefinitionsConsistentWithPersistedVersions(ParsedDeployment parsedDeployment){  for (  ProcessDefinitionEntity processDefinition : parsedDeployment.getAllProcessDefinitions()) {    ProcessDefinitionEntity persistedProcessDefinition=bpmnDeploymentHelper.getPersistedInstanceOfProcessDefinition(processDefinition);    if (persistedProcessDefinition != null) {      processDefinition.setId(persistedProcessDefinition.getId());      processDefinition.setVersion(persistedProcessDefinition.getVersion());      processDefinition.setSuspensionState(persistedProcessDefinition.getSuspensionState());    }  }}  }
class C{  public static TransferTagValueImpl createTagForValue(final Object tagValue){  TransferTagValueImpl result;  DataTagQualityImpl tagQuality=new DataTagQualityImpl(TagQualityStatus.PROCESS_DOWN,"Process Down");  Timestamp sourceTimestamp=new Timestamp(System.currentTimeMillis());  Timestamp daqTimestamp=new Timestamp(System.currentTimeMillis());  Timestamp serverTimestamp=new Timestamp(System.currentTimeMillis());  String descr="Test transfer tag";  String valDesc="Test val desc {{ \"aaa:\" \"342343\" } \n , ] }";  result=new TransferTagValueImpl(1234L,tagValue,valDesc,tagQuality,TagMode.TEST,sourceTimestamp,daqTimestamp,serverTimestamp,descr);  result.setValueClassName(tagValue.getClass().getName());  return result;}  }
class C{  private static float constrain(float amount,float low,float high){  return amount < low ? low : (amount > high ? high : amount);}  }
class C{  public Matrix timesEquals(double s){  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=s * A[i][j];    }  }  return this;}  }
class C{  protected static boolean exists(JsonObject obj,String field){  JsonElement element=obj.get(field);  return (element != null);}  }
class C{  private void validateNumCores(){  String numCoresStr=carbonProperties.getProperty(CarbonCommonConstants.NUM_CORES,CarbonCommonConstants.NUM_CORES_DEFAULT_VAL);  try {    int numCores=Integer.parseInt(numCoresStr);    if (numCores < CarbonCommonConstants.NUM_CORES_MIN_VAL || numCores > CarbonCommonConstants.NUM_CORES_MAX_VAL) {      LOGGER.info("The num Cores  value \"" + numCoresStr + "\" is invalid. Using the default value \""+ CarbonCommonConstants.NUM_CORES_DEFAULT_VAL);      carbonProperties.setProperty(CarbonCommonConstants.NUM_CORES,CarbonCommonConstants.NUM_CORES_DEFAULT_VAL);    }  } catch (  NumberFormatException e) {    LOGGER.info("The num Cores  value \"" + numCoresStr + "\" is invalid. Using the default value \""+ CarbonCommonConstants.NUM_CORES_DEFAULT_VAL);    carbonProperties.setProperty(CarbonCommonConstants.NUM_CORES,CarbonCommonConstants.NUM_CORES_DEFAULT_VAL);  }}  }
class C{  @deprecated public void compact(boolean exhaustive){  if (!this.isCompact) {    int iBlockStart=0;    char iUntouched=65535;    int newSize=0;    char[] target=exhaustive ? new char[65536] : this.values;    for (int i=0; i < this.indices.length; iBlockStart+=32) {      this.indices[i]=65535;      boolean touched=blockTouched(i);      if ((!touched) && (iUntouched != 65535)) {        this.indices[i]=iUntouched;      } else {        int jBlockStart=0;        for (int j=0; j < i; jBlockStart+=32) {          if ((this.hashes[i] == this.hashes[j]) && (arrayRegionMatches(this.values,iBlockStart,this.values,jBlockStart,32))) {            this.indices[i]=this.indices[j];          }          j++;        }        if (this.indices[i] == 65535) {          int dest;          int dest;          if (exhaustive) {            dest=FindOverlappingPosition(iBlockStart,target,newSize);          } else {            dest=newSize;          }          int limit=dest + 32;          if (limit > newSize) {            for (int j=newSize; j < limit; j++) {              target[j]=this.values[(iBlockStart + j - dest)];            }            newSize=limit;          }          this.indices[i]=((char)dest);          if (!touched) {            iUntouched=(char)jBlockStart;          }        }      }      i++;    }    char[] result=new char[newSize];    System.arraycopy(target,0,result,0,newSize);    this.values=result;    this.isCompact=true;    this.hashes=null;  }}  }
class C{  private void initClipRectForHeader(Rect clipRect,RecyclerView recyclerView,View header){  mDimensionCalculator.initMargins(clipRect,header);  if (mOrientationProvider.getOrientation(recyclerView) == LinearLayout.VERTICAL) {    clipRect.set(recyclerView.getPaddingLeft(),recyclerView.getPaddingTop(),recyclerView.getWidth() - recyclerView.getPaddingRight() - clipRect.right,recyclerView.getHeight() - recyclerView.getPaddingBottom());  } else {    clipRect.set(recyclerView.getPaddingLeft(),recyclerView.getPaddingTop(),recyclerView.getWidth() - recyclerView.getPaddingRight(),recyclerView.getHeight() - recyclerView.getPaddingBottom() - clipRect.bottom);  }}  }
class C{  public TSDataScanDir(Path dir) throws IOException {  this(requireNonNull(dir),file_listing_(requireNonNull(dir)).parallelStream().map(null).flatMap(null).sorted(null).collect(Collectors.toList()));}  }
class C{  public static final void printDefaults(){  UIDefaults defaults=UIManager.getDefaults();  Enumeration<Object> keys=defaults.keys();  while (keys.hasMoreElements()) {    Object key=keys.nextElement();    System.out.println(key + ": " + defaults.get(key));  }}  }
class C{  @Deployment(resources={"org/activiti/engine/test/api/event/ProcessInstanceEventsTest.noEndProcess.bpmn20.xml"}) public void testProcessCompleted_NoEnd() throws Exception {  ProcessInstance noEndProcess=this.runtimeService.startProcessInstanceByKey("noEndProcess");  Task task=taskService.createTaskQuery().processInstanceId(noEndProcess.getId()).singleResult();  taskService.complete(task.getId());  assertEquals("ActivitiEventType.PROCESS_COMPLETED was expected 1 time.",1,listener.filterEvents(ActivitiEventType.PROCESS_COMPLETED).size());}  }
class C{  public CircularProgressContainerDrawable(@NonNull Drawable[] contents,@NonNull CircularProgressDrawable progressDrawable){  super(buildLayers(contents,progressDrawable));  mStrokeSize=progressDrawable.getStrokeSize();}  }
class C{  public static void initializeSchemas(Map conf,String id){  SystemConfiguration.setProperty("data.schemas",(String)conf.get(StormConstants.DSCHEMA_KEY));  SystemConfiguration.setProperty("query.schemas",(String)conf.get(StormConstants.QSCHEMA_KEY));  try {    boolean hdfs=(boolean)conf.get(StormConstants.USE_HDFS);    if (hdfs) {      String hdfsUri=(String)conf.get(StormConstants.HDFS_URI_KEY);      FileSystem fs=FileSystem.get(URI.create(hdfsUri),new Configuration());      DataSchemaLoader.initialize(true,fs);      QuerySchemaLoader.initialize(true,fs);    } else {      DataSchemaLoader.initialize();      QuerySchemaLoader.initialize();    }  } catch (  Exception e) {    logger.error("Failed to initialize schema files.",e);    throw new RuntimeException(e);  }}  }
class C{  @RequestMapping(value="/configs",method=RequestMethod.POST) public JsonResponse saveConfig(@RequestParam("appId") Long appId,@RequestParam("name") String name,@RequestParam("value") String value){  Response<Long> saveResp=configService.save(appId,name,value);  if (!saveResp.isSuccess()) {    Logs.error("failed to save config(appId={}, name={}, value={}), cause: {}",appId,name,value,saveResp.getErr());    return JsonResponse.notOk(saveResp.getErr());  }  return JsonResponse.ok(saveResp.getData());}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public DefaultCase fullCopy(){  DefaultCase tree=(DefaultCase)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  private boolean isMaintainAspectRatio(){  return preferences.getBoolean("SplashMaintainAspectRatio",false);}  }
class C{  public int threshold(){  return soot.PhaseOptions.getInt(options,"threshold");}  }
class C{  public void clearCustomProperty(String key){  clearCustomProperties(new String[]{key});}  }
