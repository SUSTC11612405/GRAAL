class C{  private void checkSenderStillAlive(PartitionedRegion r,InternalDistributedMember sender){  if (!r.getDistributionAdvisor().containsId(sender)) {    r.getRedundancyProvider().finishIncompleteBucketCreation(this.bucketId);  }}  }
class C{  public synchronized long ensureThreadId(){  if (DEBUG || DELETEDEBUG) {    LogTag.debug("ensureThreadId before: " + mThreadId);  }  if (mThreadId <= 0) {    mThreadId=getOrCreateThreadId(mContext,mRecipients);  }  if (DEBUG || DELETEDEBUG) {    LogTag.debug("ensureThreadId after: " + mThreadId);  }  return mThreadId;}  }
class C{  private void initActions(){  getActionMap().put(UndoAction.ID,undo.getUndoAction());  getActionMap().put(RedoAction.ID,undo.getRedoAction());}  }
class C{  public static byte[] calculateAgreement(byte[] ourPrivate,byte[] theirPublic){  byte[] agreement=new byte[32];  scalarmult.crypto_scalarmult(agreement,ourPrivate,theirPublic);  return agreement;}  }
class C{  public void testConstrIntMathContext(){  int a=732546982;  int precision=21;  RoundingMode rm=RoundingMode.CEILING;  MathContext mc=new MathContext(precision,rm);  String res="732546982";  int resScale=0;  BigDecimal result=new BigDecimal(a,mc);  assertEquals("incorrect value",res,result.unscaledValue().toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public boolean isVlanOverrideAllowed(){  return vlanOverrideAllowed;}  }
class C{  public SilentExit(){  this(1);}  }
class C{  public static String join(boolean[] self,String separator){  StringBuilder buffer=new StringBuilder();  boolean first=true;  if (separator == null)   separator="";  for (  boolean next : self) {    if (first) {      first=false;    } else {      buffer.append(separator);    }    buffer.append(next);  }  return buffer.toString();}  }
class C{  public synchronized CtClass makeInterface(String name,CtClass superclass) throws RuntimeException {  checkNotFrozen(name);  CtClass clazz=new CtNewClass(name,this,true,superclass);  cacheCtClass(name,clazz,true);  return clazz;}  }
class C{  public static void assertAllIntents(Speechlet speechlet,Session session) throws SpeechletException, IllegalAccessException {  Field[] fields=ObaIntent.class.getFields();  SpeechletResponse sr;  HashMap<String,Slot> slots=new HashMap<>();  slots.put(CITY_NAME,Slot.builder().withName(CITY_NAME).withValue("Tampa").build());  slots.put(STOP_NUMBER,Slot.builder().withName(STOP_NUMBER).withValue("6497").build());  for (  Field f : fields) {    sr=speechlet.onIntent(IntentRequest.builder().withRequestId("test-request-id").withIntent(Intent.builder().withName(f.get(String.class).toString()).withSlots(slots).build()).build(),session);    assertNotNull(sr);  }}  }
class C{  public legend addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  private boolean isRepeatSearchEnabled(){  return FILTER != null;}  }
class C{  @Inline public static void doubleBulkCopy(double[] src,Offset srcOffset,double[] dst,Offset dstOffset,int bytes){  if (VM.VerifyAssertions)   VM._assert(DOUBLE_BULK_COPY_SUPPORTED);  if (!Selected.Mutator.get().doubleBulkCopy(ObjectReference.fromObject(src),srcOffset,ObjectReference.fromObject(dst),dstOffset,bytes)) {    Memory.aligned64Copy(Magic.objectAsAddress(dst).plus(dstOffset),Magic.objectAsAddress(src).plus(srcOffset),bytes);  }}  }
class C{  public LinkActionList(Link link,Layer layer,Projection proj,OMGridGenerator generator) throws IOException, EOFException {  this.link=link;  linkStatus=readGestureResponses(layer,proj,generator);}  }
class C{  public void purgeCacheForProvider(ProviderIdentifier id){  List<String> keysToRemove;synchronized (mPlaylists) {    Set<Map.Entry<String,Playlist>> playlists=mPlaylists.entrySet();    keysToRemove=new ArrayList<>();    for (    Map.Entry<String,Playlist> item : playlists) {      if (item.getValue() == null || item.getValue().getProvider().equals(id)) {        keysToRemove.add(item.getKey());      }    }    for (    String key : keysToRemove) {      mPlaylists.remove(key);    }  }synchronized (mSongs) {    Set<Map.Entry<String,Song>> songs=mSongs.entrySet();    keysToRemove.clear();    for (    Map.Entry<String,Song> item : songs) {      if (item.getValue().getProvider() != null && item.getValue().getProvider().equals(id)) {        keysToRemove.add(item.getKey());      }    }    for (    String key : keysToRemove) {      mSongs.remove(key);    }  }synchronized (mAlbums) {    Set<Map.Entry<String,Album>> albums=mAlbums.entrySet();    keysToRemove.clear();    for (    Map.Entry<String,Album> item : albums) {      if (item.getValue().getProvider().equals(id)) {        keysToRemove.add(item.getKey());      }    }    for (    String key : keysToRemove) {      mAlbums.remove(key);    }  }synchronized (mArtists) {    Set<Map.Entry<String,Artist>> artists=mArtists.entrySet();    keysToRemove.clear();    for (    Map.Entry<String,Artist> item : artists) {      if (item.getValue().getProvider().equals(id)) {        keysToRemove.add(item.getKey());      }    }    for (    String key : keysToRemove) {      mArtists.remove(key);    }  }}  }
class C{  public GeneralAlgorithmRunner(DataWrapper dataWrapper,Parameters parameters,KnowledgeBoxModel knowledgeBoxModel,IndependenceFactsModel facts){  this(dataWrapper,null,parameters,knowledgeBoxModel,facts);}  }
class C{  public static void registerFactory(String type,AllocationCommand.Factory factory){  factories.put(type,factory);}  }
class C{  private void validateInitiatorsData(List<Initiator> initiators,Set<URI> initiatorsHosts,ExportGroup exportGroup){  if (initiatorsHosts.size() != 1) {    throw APIException.badRequests.initiatorExportGroupInitiatorsBelongToSameHost();  }  Host host=queryObject(Host.class,initiatorsHosts.iterator().next(),true);  if (!NullColumnValueGetter.isNullURI(host.getProject())) {    if (!host.getProject().equals(exportGroup.getProject().getURI())) {      throw APIException.badRequests.invalidParameterExportGroupHostAssignedToDifferentProject(host.getHostName(),exportGroup.getProject().getName());    }  } else {    Project project=queryObject(Project.class,exportGroup.getProject().getURI(),true);    if (!host.getTenant().equals(project.getTenantOrg().getURI())) {      throw APIException.badRequests.invalidParameterExportGroupHostAssignedToDifferentTenant(host.getHostName(),project.getLabel());    }  }  validatePortConnectivity(exportGroup,initiators);  _log.info("The initiators were validated successfully.");}  }
class C{  public void exitToConfig() throws NetworkDeviceControllerException {  if (!inConfigMode) {    throw NetworkDeviceControllerException.exceptions.mdsDeviceNotInConfigMode();  }  SSHPrompt[] prompts={SSHPrompt.MDS_CONFIG};  StringBuilder buf=new StringBuilder();  lastPrompt=sendWaitFor(MDSDialogProperties.getString("MDSDialog.exitToConfig.exit.cmd"),defaultTimeout,prompts,buf);}  }
class C{  public void removeDivider(int divId) throws Exception {  m_fdr.getDocumentTree().removeDivider(divId);}  }
class C{  public T caseTypeRefAnnotationArgument(TypeRefAnnotationArgument object){  return null;}  }
class C{  static void appendConstant(final StringBuffer buf,final Object cst){  if (cst == null) {    buf.append("null");  } else   if (cst instanceof String) {    appendString(buf,(String)cst);  } else   if (cst instanceof Type) {    buf.append("Type.getType(\"");    buf.append(((Type)cst).getDescriptor());    buf.append("\")");  } else   if (cst instanceof Handle) {    buf.append("new Handle(");    Handle h=(Handle)cst;    buf.append("Opcodes.").append(HANDLE_TAG[h.getTag()]).append(", \"");    buf.append(h.getOwner()).append("\", \"");    buf.append(h.getName()).append("\", \"");    buf.append(h.getDesc()).append("\")");  } else   if (cst instanceof Byte) {    buf.append("new Byte((byte)").append(cst).append(')');  } else   if (cst instanceof Boolean) {    buf.append(((Boolean)cst).booleanValue() ? "Boolean.TRUE" : "Boolean.FALSE");  } else   if (cst instanceof Short) {    buf.append("new Short((short)").append(cst).append(')');  } else   if (cst instanceof Character) {    int c=((Character)cst).charValue();    buf.append("new Character((char)").append(c).append(')');  } else   if (cst instanceof Integer) {    buf.append("new Integer(").append(cst).append(')');  } else   if (cst instanceof Float) {    buf.append("new Float(\"").append(cst).append("\")");  } else   if (cst instanceof Long) {    buf.append("new Long(").append(cst).append("L)");  } else   if (cst instanceof Double) {    buf.append("new Double(\"").append(cst).append("\")");  } else   if (cst instanceof byte[]) {    byte[] v=(byte[])cst;    buf.append("new byte[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]);    }    buf.append('}');  } else   if (cst instanceof boolean[]) {    boolean[] v=(boolean[])cst;    buf.append("new boolean[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]);    }    buf.append('}');  } else   if (cst instanceof short[]) {    short[] v=(short[])cst;    buf.append("new short[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append("(short)").append(v[i]);    }    buf.append('}');  } else   if (cst instanceof char[]) {    char[] v=(char[])cst;    buf.append("new char[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append("(char)").append((int)v[i]);    }    buf.append('}');  } else   if (cst instanceof int[]) {    int[] v=(int[])cst;    buf.append("new int[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]);    }    buf.append('}');  } else   if (cst instanceof long[]) {    long[] v=(long[])cst;    buf.append("new long[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]).append('L');    }    buf.append('}');  } else   if (cst instanceof float[]) {    float[] v=(float[])cst;    buf.append("new float[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]).append('f');    }    buf.append('}');  } else   if (cst instanceof double[]) {    double[] v=(double[])cst;    buf.append("new double[] {");    for (int i=0; i < v.length; i++) {      buf.append(i == 0 ? "" : ",").append(v[i]).append('d');    }    buf.append('}');  }}  }
class C{  public ItemBuilder amount(final ItemStack src){  this.itemStack.setAmount(src.getAmount());  return this;}  }
class C{  @Override public Project store(AppContext ctx,Project newProject){  boolean updateMode;  ProjectPK id=newProject.getId();  if (id.getObjectId() == null) {    id.setObjectId(ObjectId.get().toString());    newProject.setId(id);    newProject.copyInternalVersion(null);    updateMode=false;  } else {    Optional<Project> read=DAOFactory.getDAOFactory().getDAO(Project.class).read(ctx,id);    if (read.isPresent()) {      newProject.copyInternalVersion(read.get());      updateMode=true;    } else {      updateMode=false;    }  }  if (!updateMode) {    String projectOid=newProject.getId().getProjectId();    Persistent<? extends GenericPK> parent=newProject.getParentObject(ctx);    AccessRightsUtils.getInstance().checkRole(ctx,parent,Role.WRITE);    AccessRightsUtils.getInstance().setAccessRights(ctx,newProject,parent);    Set<AccessRight> projectAccessRights=newProject.getAccessRights();    UserGroup adminGroup=new UserGroup();    adminGroup.setId(new UserGroupPK(ctx.getCustomerId(),CoreConstants.PRJ_DEFAULT_GROUP_ADMIN + projectOid));    adminGroup.setName("Administrators for project " + newProject.getName());    UserGroup newAdminGroup=DAOFactory.getDAOFactory().getDAO(UserGroup.class).create(ctx,adminGroup);    AccessRight writeRight=new AccessRight();    writeRight.setRole(Role.WRITE);    writeRight.setGroupId(newAdminGroup.getId().getUserGroupId());    projectAccessRights.add(writeRight);    UserGroup guestGroup=new UserGroup();    guestGroup.setId(new UserGroupPK(ctx.getCustomerId(),CoreConstants.PRJ_DEFAULT_GROUP_GUEST + projectOid));    guestGroup.setName("Guests for project " + newProject.getName());    UserGroup newGuestGroup=DAOFactory.getDAOFactory().getDAO(UserGroup.class).create(ctx,guestGroup);    AccessRight readRight=new AccessRight();    readRight.setRole(Role.READ);    readRight.setGroupId(newGuestGroup.getId().getUserGroupId());    projectAccessRights.add(readRight);  }  newProject=super.store(ctx,newProject);  return newProject;}  }
class C{  public IntBag(final IntBag other){  if (other == null) {    numObjs=0;    objs=new int[1];  } else {    numObjs=other.numObjs;    objs=new int[numObjs];    System.arraycopy(other.objs,0,objs,0,numObjs);  }}  }
class C{  public ColladaFile(File file){  if (file == null) {    String message=Logging.getMessage("nullValue.FileIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.colladaFile=file;}  }
class C{  public SoapFaultToClientProxy(){  requestFileName="fault.query";  responseFile="getstate.answer";}  }
class C{  public boolean visitVariableOrParamDecl(ElemVariable elem){  return true;}  }
class C{  private void readOutlineLevel(final Element root,final PdfObjectReader currentPdfFile,PdfObject outlineObj,final int level,boolean isClosed){  String ID;  int page;  Element child=OutlineDataXML.createElement("title");  PdfObject FirstObj, NextObj;  while (true) {    ID=outlineObj.getObjectRefAsString();    FirstObj=outlineObj.getDictionary(PdfDictionary.First);    currentPdfFile.checkResolved(FirstObj);    NextObj=outlineObj.getDictionary(PdfDictionary.Next);    currentPdfFile.checkResolved(NextObj);    final int numberOfItems=outlineObj.getInt(PdfDictionary.Count);    if (numberOfItems != 0) {      isClosed=numberOfItems < 0;    }    page=DestHandler.getPageNumberFromLink(getDestFromObject(outlineObj,currentPdfFile),currentPdfFile);    final byte[] titleData=outlineObj.getTextStreamValueAsByte(PdfDictionary.Title);    if (titleData != null) {      final String title=StringUtils.getTextString(titleData,false);      child=OutlineDataXML.createElement("title");      root.appendChild(child);      child.setAttribute("title",title);    }    child.setAttribute("isClosed",String.valueOf(isClosed));    if (outlineObj != null) {      DestObjs.put(ID,outlineObj);    }    if (page == PdfDictionary.Null) {      child.setAttribute("page","-1");    } else     if (page != -1) {      child.setAttribute("page",String.valueOf(page));    }    child.setAttribute("level",String.valueOf(level));    child.setAttribute("objectRef",ID);    if (FirstObj != null) {      readOutlineLevel(child,currentPdfFile,FirstObj,level + 1,isClosed);    }    if (NextObj == null) {      break;    }    outlineObj=NextObj;  }}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  this.aidlTV=(TextView)this.findViewById(R.id.aidl_tv);}  }
class C{  private void replaceTop(JsonScope newTop){  stack.set(stack.size() - 1,newTop);}  }
class C{  public FactLine reverse(String description){  FactLine reversal=new FactLine(getCtx(),getAD_Table_ID(),getRecord_ID(),getLine_ID(),get_TrxName());  reversal.setClientOrg(this);  reversal.setDocumentInfo(m_doc,m_docLine);  reversal.setAccount(m_acctSchema,m_acct);  reversal.setPostingType(getPostingType());  reversal.setAmtSource(getC_Currency_ID(),getAmtSourceDr().negate(),getAmtSourceCr().negate());  reversal.setQty(getQty().negate());  reversal.convert();  reversal.setDescription(description);  return reversal;}  }
class C{  public ProvidedRuntimeLibraryDependency createProvidedRuntimeLibraryDependency(){  ProvidedRuntimeLibraryDependencyImpl providedRuntimeLibraryDependency=new ProvidedRuntimeLibraryDependencyImpl();  return providedRuntimeLibraryDependency;}  }
class C{  public void addSufficientVerifier(int uid){  mSufficientVerifierUids.put(uid,true);}  }
class C{  public void debug(BoundedObject o){  System.out.println("debug: target bounding box " + o.getBounds());  debug(o,root,0);}  }
class C{  public boolean isInRange(int index){  if (m_Upper == -1) {    throw new RuntimeException("No upper limit has been specified for range");  }  if (m_Invert) {    return !m_SelectFlags[index];  } else {    return m_SelectFlags[index];  }}  }
class C{  public void onError(DiagnosticListener<JavaFileObject> callback){  errorsDelegate=callback;}  }
class C{  @Override public int hashCode(){  return (first == null ? 0 : first.hashCode()) ^ (second == null ? 0 : second.hashCode());}  }
class C{  public static String encodeNumericKeyId(long keyId){  return String.format("%016X",keyId);}  }
class C{  public void testLogReadback() throws Exception {  File logDir=prepareLogDir("testLogReadback");  DiskLog log=openLog(logDir,false);  this.writeEventsToLog(log,10000);  assertEquals("Should have stored 10000 events",9999,log.getMaxSeqno());  log.release();  DiskLog log2=openLog(logDir,true);  log.validate();  assertEquals("Should have stored 10000 events",9999,log2.getMaxSeqno());  this.readBackStoredEvents(log2,0,10000);  log2.release();}  }
class C{  public static int nextInt(int max){  return random.nextInt(max);}  }
class C{  public void process(Grammar g,boolean gencode){  g.loadImportedGrammars();  GrammarTransformPipeline transform=new GrammarTransformPipeline(g,this);  transform.process();  LexerGrammar lexerg;  GrammarRootAST lexerAST;  if (g.ast != null && g.ast.grammarType == ANTLRParser.COMBINED && !g.ast.hasErrors) {    lexerAST=transform.extractImplicitLexer(g);    if (lexerAST != null) {      if (grammarOptions != null) {        lexerAST.cmdLineOptions=grammarOptions;      }      lexerg=new LexerGrammar(this,lexerAST);      lexerg.fileName=g.fileName;      lexerg.originalGrammar=g;      g.implicitLexer=lexerg;      lexerg.implicitLexerOwner=g;      processNonCombinedGrammar(lexerg,gencode);    }  }  if (g.implicitLexer != null)   g.importVocab(g.implicitLexer);  processNonCombinedGrammar(g,gencode);}  }
class C{  public static TextAnnotation buildTextAnnotation(String corpusId,String textId,String text,String[] tokens,int[] sentenceEndPositions,String sentenceViewGenerator,double sentenceViewScore){  if (sentenceEndPositions[sentenceEndPositions.length - 1] != tokens.length)   throw new IllegalArgumentException("Invalid sentence boundary. Last element should be the number of tokens");  IntPair[] offsets=TokenUtils.getTokenOffsets(text,tokens);  assert offsets.length == tokens.length;  TextAnnotation ta=new TextAnnotation(corpusId,textId,text,offsets,tokens,sentenceEndPositions);  SpanLabelView view=new SpanLabelView(ViewNames.SENTENCE,sentenceViewGenerator,ta,sentenceViewScore);  int start=0;  for (  int s : sentenceEndPositions) {    view.addSpanLabel(start,s,ViewNames.SENTENCE,1d);    start=s;  }  ta.addView(ViewNames.SENTENCE,view);  SpanLabelView tokView=new SpanLabelView(ViewNames.TOKENS,sentenceViewGenerator,ta,sentenceViewScore);  for (int tokIndex=0; tokIndex < tokens.length; ++tokIndex) {    tokView.addSpanLabel(tokIndex,tokIndex + 1,tokens[tokIndex],1d);  }  ta.addView(ViewNames.TOKENS,tokView);  return ta;}  }
class C{  private static String guessContentType(String url){  url=url.toLowerCase();  if (url.endsWith(".webm")) {    return "video/webm";  } else   if (url.endsWith(".mp4")) {    return "video/mp4";  } else   if (url.matches(".*\\.jpe?g")) {    return "image/jpeg";  } else   if (url.endsWith(".png")) {    return "image/png";  } else   if (url.endsWith(".gif")) {    return "image/gif";  } else {    return "application/octet-stream";  }}  }
class C{  public FilteredTollHandler(final double simulationEndTime,final int numberOfTimeBins){  this(simulationEndTime,numberOfTimeBins,null,null);  LOGGER.info("No filtering is used, result will include all links, persons from all user groups.");}  }
class C{  public boolean isSecondHandVisible(){  return secondHandVisible;}  }
class C{  public XMLDocument addStylesheet(String href,String type){  PI pi=new PI();  pi.setTarget("xml-stylesheet").addInstruction("href",href).addInstruction("type",type);  prolog.addElement(pi);  return (this);}  }
class C{  public GenericMTreeDistanceSearchCandidate(final double mindist,final int nodeID,final DBID routingObjectID){  this.mindist=mindist;  this.nodeID=nodeID;  this.routingObjectID=routingObjectID;}  }
class C{  private static int lf_delta1(int x){  return lf_S(x,17) ^ lf_S(x,19) ^ lf_R(x,10);}  }
class C{  public Tree<String> extractBestMaxRuleParse(int start,int end,List<String> sentence){  return extractBestMaxRuleParse1(start,end,0,sentence);}  }
class C{  public int lastIndexOf(char ch){  return lastIndexOf(ch,size - 1);}  }
class C{  public Matrix4x3f m00(float m00){  this.m00=m00;  properties&=~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);  return this;}  }
class C{  private List<HostStorageDomain> processTargetPortsToFormHSDs(HDSApiClient hdsApiClient,StorageSystem storage,List<URI> targetURIList,String hostName,ExportMask exportMask,Pair<String,String> hostModeInfo,String systemObjectID) throws Exception {  List<HostStorageDomain> hsdList=new ArrayList<HostStorageDomain>();  String hostMode=null, hostModeOption=null;  if (hostModeInfo != null) {    hostMode=hostModeInfo.first;    hostModeOption=hostModeInfo.second;  }  for (  URI targetPortURI : targetURIList) {    StoragePort storagePort=dbClient.queryObject(StoragePort.class,targetPortURI);    String storagePortNumber=getStoragePortNumber(storagePort.getNativeGuid());    DataSource dataSource=dataSourceFactory.createHSDNickNameDataSource(hostName,storagePortNumber,storage);    String hsdNickName=customConfigHandler.getComputedCustomConfigValue(CustomConfigConstants.HDS_HOST_STORAGE_DOMAIN_NICKNAME_MASK_NAME,storage.getSystemType(),dataSource);    if (Transport.IP.name().equalsIgnoreCase(storagePort.getTransportType())) {      log.info("Populating iSCSI HSD for storage: {}",storage.getSerialNumber());      HostStorageDomain hostGroup=new HostStorageDomain(storagePortNumber,exportMask.getMaskName(),HDSConstants.ISCSI_TARGET_DOMAIN_TYPE,hsdNickName);      hostGroup.setHostMode(hostMode);      hostGroup.setHostModeOption(hostModeOption);      hsdList.add(hostGroup);    }    if (Transport.FC.name().equalsIgnoreCase(storagePort.getTransportType())) {      log.info("Populating FC HSD for storage: {}",storage.getSerialNumber());      HostStorageDomain hostGroup=new HostStorageDomain(storagePortNumber,exportMask.getMaskName(),HDSConstants.HOST_GROUP_DOMAIN_TYPE,hsdNickName);      hostGroup.setHostMode(hostMode);      hostGroup.setHostModeOption(hostModeOption);      hsdList.add(hostGroup);    }  }  return hsdList;}  }
class C{  private int isInResults(ArrayList<Media> results,String id){  int i=0;  for (  Media item : results) {    if (item.videoId.equals(id))     return i;    i++;  }  return -1;}  }
class C{  private String parseToken(final char[] terminators){  char ch;  i1=pos;  i2=pos;  while (hasChar()) {    ch=chars[pos];    if (isOneOf(ch,terminators)) {      break;    }    i2++;    pos++;  }  return getToken(false);}  }
class C{  @Ignore("TODO: disabled because rather than throwing an exception, getAll catches all exceptions and logs a warning message") @Test public void testNonColocatedGetAll(){  doNonColocatedbulkOp(OP.GETALL);}  }
class C{  @Override protected PfScanRawMatch buildMatchObject(String sequenceIdentifier,String model,String signatureLibraryRelease,int seqStart,int seqEnd,String cigarAlign,Double score,ProfileScanRawMatch.Level profileLevel,PatternScanMatch.PatternScanLocation.Level patternLevel){  return new HamapRawMatch(sequenceIdentifier,model,signatureLibraryRelease,seqStart,seqEnd,cigarAlign,score,profileLevel);}  }
class C{  private void updateServerStatus(){  try {    StringBuffer page=new StringBuffer();    page.append("<?php\n");    page.append("session_start();\n");    page.append("$username = 'Guest';\n");    page.append("if (array_key_exists('username', $_SESSION)) { $username = $_SESSION['username']; }\n");    page.append("?>\n");    page.append("<html>\n<head>\n  <title>R Server</title>\n");    page.append("  <script>\n");    page.append("  function reload() { \n");    page.append("    var isIE = /*@cc_on!@*/false || !!document.documentMode;\n");    page.append("    if (!isIE) location.reload();\n");    page.append("  }\n");    page.append("  setTimeout(reload, " + pageRefreshTime + ")\n");    page.append("  </script>\n");    page.append("  <link rel=\"stylesheet\" type=\"text/css\" href=\"rserver.css\">\n");    page.append("</head>\n<body>\n");    page.append("<div id=\"MainDiv\">\n\n");    page.append("<div id=\"HeaderDiv\">\n");    page.append("  <div id=\"NavHeaderDiv\"></div>\n");    page.append("  <div id=\"NavLogo\"></div>\n");    page.append("  <a id=\"newHeaderNavigation-logo\" href=\"/RServer\" title=\"R Server\"></a>\n");    page.append("  <ul id=\"NavBar\">\n");    page.append("    <li><a href=\"https://github.com/bgweber/RServer\">EA RServer</a></li>\n");    page.append("    <li><a href=\"NewTask.php\">Submit New Task</a>\n");    page.append("    <li><a href=\"Reports.php\">Reports</a></li>\n");    page.append("    <li><a href=\"logs\">Server Logs</a></li>\n");    page.append("    <li><a href=\"Rout\">Script Results</a></li>\n");    page.append("    <li><a href=\"reports/RServer/RServerTasks.html\">Task Report</a></li>\n");    page.append("  </ul>\n\n");    page.append("</div>\n\n");    page.append("  <div id=\"SubHeaderDiv\">\n");    page.append("    <h2 id=\"RHeader\">R Server: </h2>\n");    page.append("<?php if ((time() - " + System.currentTimeMillis() / 1000 + ") < 10) { " + "echo \"<h2 id=\\\"ServerOnline\\\">Online</h2>\"; } else { " + "echo \"<h2 id=\\\"ServerOffline\\\">Offline</h2>\"; } ?>\n");    page.append("  </div>\n\n");    page.append("  <div id=\"ContentDiv\">\n");    page.append("  <script>\n");    page.append("    var isIE = /*@cc_on!@*/false || !!document.documentMode;\n");    page.append("    if (isIE) document.write('<p><h2>Note: Auto-reload is disabled for Internet Explorer. Please use Chrome, Firefox, or Opera.<h2>'); \n");    page.append("  </script>\n");    page.append("<h3 id=\"StatsHeader\">Server Statistics</h3>\n");    page.append("<table id=\"StatsTable\">\n");    page.append("  <thead>\n");    page.append("    <th>Property</th>\n    <th>Value</th>\n");    page.append("  </thead>\n");    if (fullHostName != null) {      page.append("    <tr><td>Server Name</td><td>" + fullHostName + "</td></tr>\n");    }    page.append("    <tr><td>Server Updated</td><td>" + new Date(System.currentTimeMillis()).toString() + "</td></tr>\n");    Runtime runtime=Runtime.getRuntime();    String memory=((runtime.totalMemory() - runtime.freeMemory()) / 1024 / 1024) + " / " + ((runtime.totalMemory()) / 1024 / 1024)+ " MB";    try {      double totalMem=sigar.getMem().getTotal() / 1024 / 1024/ 1024.0;      double usedMem=(sigar.getMem().getTotal() - sigar.getMem().getFree()) / 1024 / 1024/ 1024.0;      cpuLoad=1 - sigar.getCpuPerc().getIdle();      totalMem=((int)(totalMem * 10)) / 10.0;      usedMem=((int)(usedMem * 10)) / 10.0;      page.append("    <tr><td>Server CPU Usage</td><td>" + (((int)(cpuLoad * 1000)) / 10.0) + "%</td></tr>\n");      page.append("    <tr><td>Server Memory</td><td>" + usedMem + " / "+ totalMem+ " GB</td></tr>\n");    } catch (    Exception e) {      log("ERROR: unable to update system stats: " + e.getMessage());    }    page.append("    <tr><td>Application Memory</td><td>" + memory + "</td></tr>\n");    page.append("    <tr><td>Thread Count</td><td>" + Thread.activeCount() + "</td></tr>\n");    page.append("    <tr><td>Git Updated</td><td>" + (lastPerforceUpdate > 0 ? new Date(lastPerforceUpdate).toString() : "No history") + "</td></tr>\n");    page.append("    <tr><td>Server Launched</td><td>" + new Date(bootTime).toString() + "</td></tr>\n");    page.append("    <tr><td>Server Version</td><td>" + ServerDate + "</td></tr>\n");    page.append("</table>\n\n");    page.append("<h3 id=\"LogHeader\">R Server Reports</h3>\n");    page.append("<ul id=\"LogList\">\n");    page.append("  <li><a href=\"reports/RServer/RServerReport.html\">R Server Activity</a></li>\n");    page.append("  <li><a href=\"reports/RServer/RServerTasks.html\">Task Report</a></li>\n");    page.append("</ul>\n");    page.append("<h3 id=\"RunningHeader\">Running Tasks</h3>\n");    page.append("<table id=\"RunningTable\">\n");    page.append("  <thead>\n");    page.append("    <th>Task Name</th>\n    <th>Log File</th>\n    <th>Start Time</th>\n    <th>Duration</th>\n    " + "<th>Runtime Parameters</th>\n    <th>Owner</th>\n    <th>End Process</th>\n");    page.append("  </thead>\n");synchronized (RServer.this) {      for (      Task task : runningTasks.values()) {        long startTime=task.getStartTime();        long duration=(System.currentTimeMillis() - startTime) / 1000;        page.append("  <tr>\n");        page.append("    <td>" + (task.getShinyApp() ? "<a href=\"" + task.getShinyUrl() + "\">" : "") + task.getTaskName()+ (task.getShinyApp() ? "</a>" : "")+ "</td>");        if (task.getrScript().toLowerCase().contains(".r") || task.getIsPython()) {          String link="<a href=\"Rout.php?task=" + task.getTaskName() + "&log="+ (task.getrScript().contains(".r") ? task.getrScript() + ".Rout" : task.getrScript().split("\\.")[0] + ".Rout")+ "\">"+ task.getrScript()+ "</a>";          page.append("\n    <td>" + link + "</td>");        } else {          page.append("\n    <td> </td>");        }        page.append("\n    <td>" + new Date(startTime).toString() + "</td>");        page.append("\n    <td>" + (task.getShinyApp() ? "" : (duration / 60 + " m " + duration % 60 + " s")) + "</td>");        page.append("\n    <td>" + task.getParameters() + "</td>");        page.append("\n    <td>" + task.getOwner() + "</td>");        if (PerforceTask.equalsIgnoreCase(task.getTaskName())) {          page.append("\n    <td> </td>");        } else {          page.append("\n    <td><form onsubmit=\"return confirm('Are you sure?')\"" + " action=\"KillTask.php\" method=\"post\">" + "\n      <input type=\"hidden\" name=\"name\" value=\"" + task.getTaskName() + "\" />"+ "\n      <button"+ " >Terminate</button>\n    </form></td>");        }        page.append("\n  </tr>\n");      }    }    page.append("</table>\n\n");    page.append("<h3 id=\"LogHeader\">Recent Log Entries</h3>\n");synchronized (RServer.this) {      page.append("<ul id=\"LogList\">\n");      for (      String log : logEntries) {        if (log.contains("ERROR:")) {          page.append("  <li class=\"FontLogError\">" + log + "</li>\n");        } else {          page.append("  <li>" + log + "</li>\n");        }      }      page.append("</ul>\n\n");    }    page.append("<h3 id=\"SchedulesHeader\">Scheduled Tasks</h3>\n");    page.append("<table id=\"ScheduleTable\">\n");    page.append("  <thead>\n");    page.append("    <th>Task Name</th>\n    <th>R Script</th>\n    <th>Runtime Parameters</th>\n    <th>Frequency</th>\n    " + "<th>Next Run Time</th>\n    <th>Owner</th>\n    <th>Run Now</th>\n");    page.append("  </thead>\n");    page.append("<ul id=\"LogList\">\n");    if (schedulePath.split("//").length > 1) {      page.append("  <li>Schedule File: //" + schedulePath.split("//")[1] + "</li>\n");    } else {      page.append("  <li>Schedule File: " + schedulePath + "</li>\n");    }    page.append("</ul>\n");    for (    Schedule schedule : regularSchedules) {      page.append("  <tr>\n");      page.append("    <td>" + schedule.getTaskName().replace("_"," ") + "</td>\n    "+ "<td>"+ schedule.getrScript().replace("_"," ")+ "</td>\n    "+ "<td>"+ schedule.getParameters()+ "</td>\n    "+ "<td>"+ (schedule.getFrequency() == Schedule.Frequency.Now ? "Startup" : schedule.getFrequency())+ "</td>\n    <td>"+ (schedule.getFrequency() == Schedule.Frequency.Now || schedule.getFrequency() == Schedule.Frequency.Never ? " " : new Date(schedule.getNextRunTime()).toString())+ "</td>\n    <td>"+ schedule.getOwner()+ "</td>\n    "+ "<td><form onsubmit=\"return confirm('Are you sure?')\""+ " action=\"SubmitTask.php\" method=\"post\">"+ "\n      <input type=\"hidden\" name=\"name\" value=\""+ schedule.getTaskName()+ "\" />"+ "\n      <input type=\"hidden\" name=\"path\" value=\""+ schedule.getPerforcePath()+ "\" />"+ "\n      <input type=\"hidden\" name=\"rscript\" value=\""+ schedule.getrScript()+ "\" />"+ "\n      <input type=\"hidden\" name=\"email\" value=\""+ schedule.getOwner()+ "\" />"+ "\n      <input type=\"hidden\" name=\"sendemail\" value=\""+ schedule.getEmailOnSuccess()+ "\" />"+ "\n      <input type=\"hidden\" name=\"params\" value=\""+ schedule.getParameters()+ "\" />"+ "\n      <input type=\"hidden\" name=\"shiny\" value=\""+ schedule.getShinyApp()+ "\" />"+ "\n      <button"+ ">Start</button>\n    </form></td>\n");      page.append("  </tr>\n");    }    page.append("</table>\n\n");    page.append("<h3 id=\"CompletedHeader\">Completed Tasks</h3>\n");    page.append("<table id=\"CompletedTable\">\n");    page.append("  <thead>\n");    page.append("    <th>Task Name</th>\n    <th>Completion Time</th>\n    <th>Duration</th>\n    " + "<th>Runtime Parameters</th>\n    <th>Outcome</th><th>.Rout log</th>\n    <th>Owner</th>\n");    page.append("  </thead>\n");synchronized (RServer.this) {      for (      Task task : completed) {        long duration=(task.getEndTime() - task.getStartTime()) / 1000;        page.append("  <tr>\n");        page.append("    <td>" + task.getTaskName().replace("_"," ") + "</td>\n    <td>");        page.append("    " + new Date(task.getEndTime()).toString() + "</td>\n    <td>");        page.append("    " + (duration / 60 + " m " + duration % 60 + " s ") + "</td>\n    <td>");        page.append("    " + task.getParameters() + "</td>\n    <td>");        page.append("    " + (task.getOutcome().equals("Success") ? "<font class=\"FontTaskSuccess\">" : "<font class=\"FontTaskFailure\">"));        page.append("    " + task.getOutcome() + "</font></td>\n    <td>");        if (task.getRout() != null) {          page.append("<a href=\"Rout.php?path=" + task.getRout() + "&log="+ task.getrScript()+ ".Rout\">"+ task.getrScript().replace("_"," ")+ "</a></td>\n");        } else {          page.append(" </td>\n");        }        page.append("    " + "<td>" + task.getOwner() + "</td>\n");        page.append("  </tr>\n");      }    }    page.append("</table>\n\n");    page.append("</div>\n\n");    page.append("<div id=\"FooterDiv\">\n");    page.append("  <a href=\"https://github.com/bgweber/RServer\">RServer on GitHub</a>\n");    page.append("</div>\n\n");    page.append("</div>\n</body>\n</html>\n");    BufferedWriter writer=new BufferedWriter(new FileWriter(indexPagePath));    writer.write(page.toString());    writer.close();  } catch (  Exception e) {    log("ERROR: failure updating server status: " + e.getMessage());    e.printStackTrace();  }}  }
class C{  public void removeServerById(int serverId){  servers.remove(serverId);}  }
class C{  public TreeSet(Comparator c){  this(new TreeMap(c));}  }
class C{  public <T>T read(Supplier<T> operation){  try {    lock.readLock().lock();    return operation.get();  }  finally {    lock.readLock().unlock();  }}  }
class C{  public void test_nCopiesILjava_lang_Object(){  Object o=new Object();  List l=Collections.nCopies(100,o);  Iterator i=l.iterator();  Object first=i.next();  assertTrue("Returned list consists of copies not refs",first == o);  assertEquals("Returned list of incorrect size",100,l.size());  assertTrue("Contains",l.contains(o));  assertTrue("Contains null",!l.contains(null));  assertTrue("null nCopies contains",!Collections.nCopies(2,null).contains(o));  assertTrue("null nCopies contains null",Collections.nCopies(2,null).contains(null));  l=Collections.nCopies(20,null);  i=l.iterator();  for (int counter=0; i.hasNext(); counter++) {    assertTrue("List is too large",counter < 20);    assertNull("Element should be null: " + counter,i.next());  }  try {    l.add(o);    fail("Returned list is not immutable");  } catch (  UnsupportedOperationException e) {    return;  }  try {    Collections.nCopies(-2,new HashSet());    fail("nCopies with negative arg didn't throw IAE");  } catch (  IllegalArgumentException e) {  }}  }
class C{  private void adjust(byte[] a,int aOff,byte[] b){  int x=(b[b.length - 1] & 0xff) + (a[aOff + b.length - 1] & 0xff) + 1;  a[aOff + b.length - 1]=(byte)x;  x>>>=8;  for (int i=b.length - 2; i >= 0; i--) {    x+=(b[i] & 0xff) + (a[aOff + i] & 0xff);    a[aOff + i]=(byte)x;    x>>>=8;  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  @NonNull public DividerAdapterBuilder outerResource(@LayoutRes int resource){  return outerView(asViewFactory(resource));}  }
class C{  protected ExecutionEntryImpl(){  super();}  }
class C{  protected void logDiagnostic(String msg){  if (isDiagnosticsEnabled()) {    logRawDiagnostic(diagnosticPrefix + msg);  }}  }
class C{  public Code39Reader(boolean usingCheckDigit,boolean extendedMode){  this.usingCheckDigit=usingCheckDigit;  this.extendedMode=extendedMode;}  }
class C{  @Override protected EClass eStaticClass(){  return SexecPackage.Literals.UNSCHEDULE_TIME_EVENT;}  }
class C{  @Override public void insertIfAbsent(final K s,final V v){  this.arc[getPartition(s)].insertIfAbsent(s,v);}  }
class C{  private Tokenizer(final CharSequence text){  this.text=text;  this.matcher=WHITESPACE.matcher(text);  skipWhitespace();  nextToken();}  }
class C{  private BucketAdvisor(Bucket bucket,RegionAdvisor regionAdvisor){  super(bucket);  this.regionAdvisor=regionAdvisor;  this.pRegion=this.regionAdvisor.getPartitionedRegion();  resetParentAdvisor(bucket.getId());}  }
class C{  protected void prepareYLegend(){  ArrayList<Float> yLegend=new ArrayList<Float>();  if (mRoundedYLegend) {    float interval=(mDeltaY) / (mYLegendCount - 1);    double log10=Math.log10(interval);    int exp=(int)Math.floor(log10);    if (exp < 0) {      exp=0;    }    double tenPowExp=POW_10[exp + 5];    double multi=Math.round(interval / tenPowExp);    if (multi >= 1) {      if (multi > 2 && multi <= 3) {        multi=3;      } else       if (multi > 3 && multi <= 5) {        multi=5;      } else       if (multi > 5 && multi < 10) {        multi=10;      }    } else {      multi=1;    }    float step=(float)(multi * tenPowExp);    log(" log10 is " + log10 + " interval is "+ interval+ " mDeltaY is "+ mDeltaY+ " tenPowExp is "+ tenPowExp+ " multi is "+ multi+ " mYChartMin is "+ mYChartMin+ " step is "+ step);    float val=0;    if (step >= 1f) {      val=(int)(mYChartMin / step) * step;    } else {      val=mYChartMin;    }    while (val <= mDeltaY + step + mYChartMin) {      yLegend.add(val);      val=val + step;    }    if (step >= 1f) {      mYChartMin=(int)(mYChartMin / step) * step;      log("mYChartMin write --- step >= 1f -- and mYChartMin is " + mYChartMin);    }    mDeltaY=val - step - mYChartMin;    mYChartMax=yLegend.get(yLegend.size() - 1);  } else {    float interval=(mDeltaY) / (mYLegendCount - 1);    yLegend.add(mYChartMin);    int i=1;    if (!isDrawOutline) {      i=0;    }    for (; i < mYLegendCount - 1; i++) {      yLegend.add(mYChartMin + ((float)i * interval));    }    yLegend.add(mDeltaY + mYChartMin);  }  mYLegend=yLegend.toArray(new Float[0]);}  }
class C{  private static void displayHeaders(List<AdsenseReportsGenerateResponse.Headers> headers){  for (  AdsenseReportsGenerateResponse.Headers header : headers) {    System.out.printf("%25s",header.getName());  }  System.out.println();}  }
class C{  @Override protected void initData(){  ClassLoader classLoader=this.getClassLoader();  if (classLoader != null) {    TextView t1=this.createdView();    t1.setText("[onCreate] classLoader " + ++i + " : "+ classLoader.toString());    this.classLoaderRootLayout.addView(t1);    while (classLoader.getParent() != null) {      classLoader=classLoader.getParent();      TextView t2=this.createdView();      t2.setText("[onCreate] classLoader " + ++i + " : "+ classLoader.toString());      this.classLoaderRootLayout.addView(t2);    }  }}  }
class C{  Object toType(String value,String pattern,Locale locale){  Calendar calendar=toCalendar(value,pattern,locale);  return toType(calendar);}  }
class C{  public void toggleSong(final Long songId,final String songName,final String albumName,final String artistName){  if (getSongId(songId) == null) {    addSongId(songId,songName,albumName,artistName);  } else {    removeItem(songId);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.260 -0500",hash_original_method="03611E3BB30258B8EC4FDC9F783CBCCF",hash_generated_method="75EED4D564C6A1FA0F492FBBD941CE61") public RouteHeader createRouteHeader(Address address){  if (address == null)   throw new NullPointerException("null address arg");  Route route=new Route();  route.setAddress(address);  return route;}  }
class C{  public NominalItem(Attribute att,int valueIndex) throws Exception {  super(att);  if (att.isNumeric()) {    throw new Exception("NominalItem must be constructed using a nominal attribute");  }  m_attribute=att;  if (m_attribute.numValues() == 1) {    m_valueIndex=0;  } else {    m_valueIndex=valueIndex;  }}  }
class C{  public static Class inferType(TupleSet tuples,String field){  if (tuples instanceof Table) {    return ((Table)tuples).getColumnType(field);  } else {    Class type=null, type2=null;    Iterator iter=tuples.tuples();    while (iter.hasNext()) {      Tuple t=(Tuple)iter.next();      if (type == null) {        type=t.getColumnType(field);      } else       if (!type.equals(type2=t.getColumnType(field))) {        if (type2.isAssignableFrom(type)) {          type=type2;        } else         if (!type.isAssignableFrom(type2)) {          throw new IllegalArgumentException("The data field [" + field + "] does not have "+ "a consistent type across provided Tuples");        }      }    }    return type;  }}  }
class C{  private DoubleMinMax exactMinMax(Relation<O> relation,DistanceQuery<O> distFunc){  final FiniteProgress progress=LOG.isVerbose() ? new FiniteProgress("Exact fitting distance computations",relation.size(),LOG) : null;  DoubleMinMax minmax=new DoubleMinMax();  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    for (DBIDIter iditer2=relation.iterDBIDs(); iditer2.valid(); iditer2.advance()) {      if (DBIDUtil.equal(iditer,iditer2)) {        continue;      }      double d=distFunc.distance(iditer,iditer2);      minmax.put(d);    }    LOG.incrementProcessed(progress);  }  LOG.ensureCompleted(progress);  return minmax;}  }
class C{  public void testDoubleValueMinusZero(){  String a="-123809648392384754573567356745735.63567890295784902768787678287E-400";  BigDecimal aNumber=new BigDecimal(a);  long minusZero=-9223372036854775808L;  double result=aNumber.doubleValue();  assertTrue("incorrect value",Double.doubleToLongBits(result) == minusZero);}  }
class C{  public SeaGlassContext(JComponent component,Region region,SynthStyle style,int state){  super(component,region,style,state);  if (component == fakeComponent) {    this.component=null;    this.region=null;    this.style=null;    return;  }  if (component == null || region == null || style == null) {    throw new NullPointerException("You must supply a non-null component, region and style");  }  reset(component,region,style,state);}  }
class C{  boolean same(ArrayList<LinkedHashMap<String,String>> tags1,ArrayList<LinkedHashMap<String,String>> tags2){  if (tags1.size() != tags2.size()) {    return false;  }  for (int i=0; i < tags1.size(); i++) {    if (!tags1.get(i).equals(tags2.get(i))) {      return false;    }  }  return true;}  }
class C{  @Override public TemplateEffect copy(){  return new TemplateEffect(labelTemplate,valueTemplate,priority,exclusive,negated);}  }
class C{  public RegionMBeanBridge(CachePerfStats cachePerfStats){  this.regionStats=cachePerfStats;  this.regionMonitor=new MBeanStatsMonitor(ManagementStrings.REGION_MONITOR.toLocalizedString());  regionMonitor.addStatisticsToMonitor(cachePerfStats.getStats());  configureRegionMetrics();}  }
class C{  public void Set(final Class cl){  OptionInstance=false;  PlugInObject=cl;  ObjectName=((Class)PlugInObject).getSimpleName();  ObjectName=Convert(ObjectName);}  }
class C{  public void include(DefaultFaceletContext ctx,UIComponent parent,URL url) throws IOException {  DefaultFacelet f=(DefaultFacelet)this.factory.getFacelet(ctx.getFacesContext(),url);  f.include(ctx,parent);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:30.241 -0500",hash_original_method="6B85F90491881D2C299E5BF02CCF5806",hash_generated_method="82489B93E2C39EE14F117933CF49B12C") public static String toHexString(long v){  return IntegralToString.longToHexString(v);}  }
class C{  private void initializeProgressView(LayoutInflater inflater,ViewGroup actionArea){  if (mCard.mCardProgress != null) {    View progressView=inflater.inflate(R.layout.card_progress,actionArea,false);    ProgressBar progressBar=(ProgressBar)progressView.findViewById(R.id.card_progress);    ((TextView)progressView.findViewById(R.id.card_progress_text)).setText(mCard.mCardProgress.label);    progressBar.setMax(mCard.mCardProgress.maxValue);    progressBar.setProgress(0);    mCard.mCardProgress.progressView=progressView;    mCard.mCardProgress.setProgressType(mCard.getProgressType());    actionArea.addView(progressView);  }}  }
class C{  public synchronized void resetReaders(){  readers=null;}  }
class C{  @Override protected void register(ContainerFactory containerFactory){  containerFactory.registerContainer("wildfly8x",ContainerType.INSTALLED,WildFly8xInstalledLocalContainer.class);  containerFactory.registerContainer("wildfly8x",ContainerType.REMOTE,WildFly8xRemoteContainer.class);  containerFactory.registerContainer("wildfly9x",ContainerType.INSTALLED,WildFly9xInstalledLocalContainer.class);  containerFactory.registerContainer("wildfly9x",ContainerType.REMOTE,WildFly9xRemoteContainer.class);  containerFactory.registerContainer("wildfly10x",ContainerType.INSTALLED,WildFly10xInstalledLocalContainer.class);  containerFactory.registerContainer("wildfly10x",ContainerType.REMOTE,WildFly10xRemoteContainer.class);}  }
class C{  public static byte[] decode(String encoded){  if (encoded == null) {    return null;  }  char[] base64Data=encoded.toCharArray();  int len=removeWhiteSpace(base64Data);  if (len % FOURBYTE != 0) {    return null;  }  int numberQuadruple=(len / FOURBYTE);  if (numberQuadruple == 0) {    return new byte[0];  }  byte decodedData[]=null;  byte b1=0, b2=0, b3=0, b4=0;  char d1=0, d2=0, d3=0, d4=0;  int i=0;  int encodedIndex=0;  int dataIndex=0;  decodedData=new byte[(numberQuadruple) * 3];  for (; i < numberQuadruple - 1; i++) {    if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++])) || !isData((d3=base64Data[dataIndex++]))|| !isData((d4=base64Data[dataIndex++]))) {      return null;    }    b1=base64Alphabet[d1];    b2=base64Alphabet[d2];    b3=base64Alphabet[d3];    b4=base64Alphabet[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++]))) {    return null;  }  b1=base64Alphabet[d1];  b2=base64Alphabet[d2];  d3=base64Data[dataIndex++];  d4=base64Data[dataIndex++];  if (!isData((d3)) || !isData((d4))) {    if (isPad(d3) && isPad(d4)) {      if ((b2 & 0xf) != 0) {        return null;      }      byte[] tmp=new byte[i * 3 + 1];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      return tmp;    } else     if (!isPad(d3) && isPad(d4)) {      b3=base64Alphabet[d3];      if ((b3 & 0x3) != 0) {        return null;      }      byte[] tmp=new byte[i * 3 + 2];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);      tmp[encodedIndex]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));      return tmp;    } else {      return null;    }  } else {    b3=base64Alphabet[d3];    b4=base64Alphabet[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  return decodedData;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:34.017 -0500",hash_original_method="647E85AB615972325C277E376A221EF0",hash_generated_method="9835D90D4E0E7CCFFD07C436051E80EB") public boolean hasIsdnSubaddress(){  return hasParm(ISUB);}  }
class C{  private void tryScrollBackToTopWhileLoading(){  tryScrollBackToTop();}  }
class C{  private Map<String,String> extractVariables(final String variablesBody){  final Map<String,String> map=new HashMap<String,String>();  final Matcher m=PATTERN_VARIABLES_BODY.matcher(variablesBody);  LOG.debug("parsing variables body");  while (m.find()) {    final String key=m.group(1);    final String value=m.group(2);    if (map.containsKey(key)) {      LOG.warn("A duplicate variable name found with name: {} and value: {}.",key,value);    }    map.put(key,value);  }  return map;}  }
class C{  public int hashCode(){  int fh=first == null ? 0 : first.hashCode();  int sh=second == null ? 0 : second.hashCode();  return (fh << 16) | (sh & 0xFFFF);}  }
class C{  private static void CallStaticVoidMethod(JNIEnvironment env,int classJREF,int methodID) throws Exception {  if (VM.VerifyAssertions) {    VM._assert(VM.BuildForPowerPC,ERROR_MSG_WRONG_IMPLEMENTATION);  }  if (traceJNI)   VM.sysWrite("JNI called: CallStaticVoidMethod  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    JNIHelpers.invokeWithDotDotVarArg(methodID,TypeReference.Void);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);  }}  }
class C{  public SignatureVisitor visitInterface(){  return this;}  }
class C{  public Vec4 intersect(Line line){  Intersection intersection=intersect(line,this.a,this.b,this.c);  return intersection != null ? intersection.getIntersectionPoint() : null;}  }
class C{  public void lostOwnership(Clipboard clipboard,Transferable contents){}  }
class C{  static void testExample(){  Locale.setDefault(new Locale("en","UK"));  doTestExample("fr","CH",new String[]{"_fr_CH.class","_fr.properties",".class"});  doTestExample("fr","FR",new String[]{"_fr.properties",".class"});  doTestExample("de","DE",new String[]{"_en.properties",".class"});  doTestExample("en","US",new String[]{"_en.properties",".class"});  doTestExample("es","ES",new String[]{"_es_ES.class",".class"});}  }
class C{  public PubSubManager(Connection connection,String toAddress){  con=connection;  to=toAddress;}  }
class C{  protected void discoverOnAllPorts(){  log.info("Sending LLDP packets out of all the enabled ports");  for (  DatapathId sw : switchService.getAllSwitchDpids()) {    IOFSwitch iofSwitch=switchService.getSwitch(sw);    if (iofSwitch == null)     continue;    if (!iofSwitch.isActive())     continue;    Collection<OFPort> c=iofSwitch.getEnabledPortNumbers();    if (c != null) {      for (      OFPort ofp : c) {        if (isLinkDiscoverySuppressed(sw,ofp)) {          continue;        }        log.trace("Enabled port: {}",ofp);        sendDiscoveryMessage(sw,ofp,true,false);        NodePortTuple npt=new NodePortTuple(sw,ofp);        addToMaintenanceQueue(npt);      }    }  }}  }
class C{  public static Map<String,String> parseQuerystring(String queryString){  Map<String,String> map=new HashMap<String,String>();  if ((queryString == null) || (queryString.equals(""))) {    return map;  }  String[] params=queryString.split("&");  for (  String param : params) {    try {      String[] keyValuePair=param.split("=",2);      String name=URLDecoder.decode(keyValuePair[0],"UTF-8");      if (name == "") {        continue;      }      String value=keyValuePair.length > 1 ? URLDecoder.decode(keyValuePair[1],"UTF-8") : "";      map.put(name,value);    } catch (    UnsupportedEncodingException e) {    }  }  return map;}  }
class C{  public boolean isDiscardVisible(){  return m_ButtonDiscard.isVisible();}  }
class C{  private void editNote(int noteId){  hideSoftKeyboard();  Intent intent=new Intent(MainActivity.this,NoteActivity.class);  intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);  intent.putExtra("id",String.valueOf(noteId));  startActivity(intent);}  }
class C{  private JPanel createLeftSide(){  JPanel leftPanel=new JPanel();  listModel=new CustomListModel();  leftPanel.setLayout(new BorderLayout());  listBox=new JList<String>(listModel);  listBox.setCellRenderer(new JlistRenderer());  listBox.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);  listBox.addListSelectionListener(new CustomListSelectionListener());  JScrollPane scrollPane=new JScrollPane(listBox);  scrollPane.setBorder(BorderFactory.createEmptyBorder());  leftPanel.add(scrollPane,BorderLayout.CENTER);  scrollPane.setBorder(BorderFactory.createTitledBorder("Dialogue states:"));  JPanel controlPanel=createControlPanel();  leftPanel.add(controlPanel,BorderLayout.SOUTH);  return leftPanel;}  }
class C{  public static float[] insertAt(float[] dest,float[] src,int offset){  float[] temp=new float[dest.length + src.length - 1];  System.arraycopy(dest,0,temp,0,offset);  System.arraycopy(src,0,temp,offset,src.length);  System.arraycopy(dest,offset + 1,temp,src.length + offset,dest.length - offset - 1);  return temp;}  }
class C{  public void removeFailListener(){  this.failedListener=null;}  }
class C{  private static boolean fieldsForOtherResourceSpecified(TypedParams<IncludedFieldsParams> includedFields,IncludedFieldsParams typeIncludedFields){  return includedFields != null && !includedFields.getParams().isEmpty() && noResourceIncludedFieldsSpecified(typeIncludedFields);}  }
class C{  IBinding resolveReference(MemberRef ref){  return null;}  }
class C{  @Scheduled(fixedRate=FIXED_RATE) public void logStatistics(){  if (beansAvailable) {    if (log.isInfoEnabled()) {      logOperatingSystemStatistics();      logRuntimeStatistics();      logMemoryStatistics();      logThreadStatistics();      log.info("\n");    }  }  if (log.isInfoEnabled()) {    logDroppedData();    logBufferStatistics();    logStorageStatistics();  }}  }
class C{  @HLEFunction(nid=0x93440B11,version=150) public int sceWlanDevIsPowerOn(){  return Wlan.getSwitchState();}  }
class C{  public FrameBlock readTransformMetaDataFromFile(String spec,String metapath) throws IOException {  return readTransformMetaDataFromFile(spec,metapath,TfUtils.TXMTD_SEP);}  }
class C{  public final String toString(String codeset){  StringBuffer retVal=new StringBuffer();  for (int i=0; i < prolog.size(); i++) {    ConcreteElement e=(ConcreteElement)prolog.elementAt(i);    retVal.append(e.toString(getCodeset()) + "\n");  }  if (content != null)   retVal.append(content.toString(getCodeset()) + "\n");  return versionDecl + retVal.toString();}  }
class C{  public boolean isCompound(){  return splits.size() != 1;}  }
class C{  public boolean hasAnnotation(Annotation annotation){  return annotationAccessor.typeHas(annotation);}  }
class C{  public static Builder create(){  return new Builder(false);}  }
class C{  public MP4Reader(FileInputStream fis) throws IOException {  if (null == fis) {    log.warn("Reader was passed a null file");    log.debug("{}",ToStringBuilder.reflectionToString(this));  }  this.fis=new MP4DataStream(fis);  channel=fis.getChannel();  decodeHeader();  analyzeFrames();  firstTags.add(createFileMeta());  createPreStreamingTags(0,false);}  }
class C{  public static strictfp double plusPIO2_strict(final double angRad){  if (angRad > -Math.PI / 4) {    return angRad + PIO2_LO + PIO2_HI;  } else {    return angRad + PIO2_HI + PIO2_LO;  }}  }
class C{  private synchronized boolean isSelectedTrackRecording(){  return trackDataHub != null && trackDataHub.isSelectedTrackRecording();}  }
class C{  public Drawable loadIcon(ApplicationSuggestion suggestion){  try {    InputStream is=mContext.getContentResolver().openInputStream(suggestion.getThumbailUri());    return Drawable.createFromStream(is,null);  } catch (  FileNotFoundException e) {    return null;  }}  }
class C{  public boolean isHead(){  if (parent == null)   return true; else   return false;}  }
class C{  public static String ofMethod(CtClass returnType,CtClass[] paramTypes){  StringBuffer desc=new StringBuffer();  desc.append('(');  if (paramTypes != null) {    int n=paramTypes.length;    for (int i=0; i < n; ++i)     toDescriptor(desc,paramTypes[i]);  }  desc.append(')');  if (returnType != null)   toDescriptor(desc,returnType);  return desc.toString();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.GEN_EXPR___NAME_1:    return getName_1();case UmplePackage.GEN_EXPR___ANONYMOUS_GEN_EXPR_11:  return getAnonymous_genExpr_1_1();case UmplePackage.GEN_EXPR___EQUALITY_OP_1:return getEqualityOp_1();case UmplePackage.GEN_EXPR___NAME_2:return getName_2();case UmplePackage.GEN_EXPR___ANONYMOUS_GEN_EXPR_21:return getAnonymous_genExpr_2_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public Main(){}  }
class C{  public static void serializeFile(String path,Object o){  try {    JAXBContext context=JAXBContext.newInstance(o.getClass());    Marshaller m=context.createMarshaller();    m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,Boolean.TRUE);    FileOutputStream stream=new FileOutputStream(path);    m.marshal(o,stream);  } catch (  JAXBException e) {    e.printStackTrace();  }catch (  FileNotFoundException e) {    e.printStackTrace();  }}  }
class C{  public static MinProjectionExpression min(Expression expression){  return new MinProjectionExpression(expression,false);}  }
class C{  @Override public void onUIReset(PtrFrameLayout frame){  mScale=1f;  mDrawable.stop();}  }
class C{  public boolean forgetInstruction(BytecodeInstruction ins){  if (!instructionMap.containsKey(ins.getClassName()))   return false;  if (!instructionMap.get(ins.getClassName()).containsKey(ins.getMethodName()))   return false;  return instructionMap.get(ins.getClassName()).get(ins.getMethodName()).remove(ins);}  }
class C{  public static Observable<WatchEvent<?>> watchRecursive(final Path path) throws IOException {  final boolean recursive=true;  return new ObservableFactory(path,recursive).create();}  }
class C{  public Matrix3 invertMatrix(Matrix3 matrix){  if (matrix == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Matrix3","invertMatrix","missingMatrix"));  }  throw new UnsupportedOperationException("Matrix3.invertMatrix is not implemented");}  }
class C{  public static void sync(Context context){  ContentResolver cr=cr();  String[] proj={_ID,Syncs.TYPE_ID,Syncs.OBJECT_ID,millis(Syncs.ACTION_ON)};  String sel=Syncs.STATUS_ID + " = ?";  String[] args={String.valueOf(ACTIVE.id)};  String order=Syncs.ACTION_ON + " DESC";  EasyCursor c=new EasyCursor(cr.query(Syncs.CONTENT_URI,proj,sel,args,order));  int count=c.getCount();  if (count > 0) {    int users=0;    int reviews=0;    Review review=null;    Set<CharSequence> lines=new LinkedHashSet<>();    long when=0L;    Bitmap icon=null;    Set<String> syncIds=new HashSet<>(count);    while (c.moveToNext()) {      Uri photo=null;switch (Sync.Type.get(c.getInt(Syncs.TYPE_ID))) {case USER:        photo=user(context,cr,c.getLong(Syncs.OBJECT_ID),lines,icon);      if (photo != null) {        users++;        syncIds.add(String.valueOf(c.getLong(_ID)));      }    break;case REVIEW:  Pair<Uri,Review> pair=review(context,cr,c.getLong(Syncs.OBJECT_ID),lines,icon);photo=pair.first;if (pair.second != null) {reviews++;syncIds.add(String.valueOf(c.getLong(_ID)));if (review == null) {  review=pair.second;}}break;}if (when == 0) {when=c.getLong(Syncs.ACTION_ON);}if (photo != null && photo != EMPTY) {icon=photo(context,photo);}}int size=lines.size();if (size > 0) {CharSequence bigText=null;CharSequence summary=null;Intent activity;if (users > 0 && reviews == 0) {activity=new Intent(context,FriendsActivity.class);} else if (users == 0 && (reviews == 1 || size == 1)) {bigText=ReviewAdapter.comments(review.comments);summary=context.getString(R.string.n_stars,review.rating);activity=new Intent(context,RestaurantActivity.class).putExtra(EXTRA_ID,review.restaurantId);if (review.type == GOOGLE) {activity.putExtra(EXTRA_TAB,TAB_PUBLIC);}} else {activity=new Intent(context,NotificationsActivity.class);}notify(context,lines,bigText,summary,when,icon,users + reviews,activity);Prefs.putStringSet(context,APP,NEW_SYNC_IDS,syncIds);event("notification","notify","sync",size);} else {Managers.notification(context).cancel(TAG_SYNC,0);context.startService(new Intent(context,SyncsReadService.class));}}c.close();}  }
class C{  public static LogisticRegressionRunner serializableInstance(){  List<Node> variables=new LinkedList<>();  ContinuousVariable var1=new ContinuousVariable("X");  ContinuousVariable var2=new ContinuousVariable("Y");  variables.add(var1);  variables.add(var2);  DataSet dataSet=new ColtDataSet(3,variables);  double[] col1data=new double[]{0.0,1.0,2.0};  double[] col2data=new double[]{2.3,4.3,2.5};  for (int i=0; i < 3; i++) {    dataSet.setDouble(i,0,col1data[i]);    dataSet.setDouble(i,1,col2data[i]);  }  DataWrapper dataWrapper=new DataWrapper(dataSet);  return new LogisticRegressionRunner(dataWrapper,new Parameters());}  }
class C{  public ESHistory(String documentId,Collection<HistoryEvent> events){  this.documentId=documentId;  this.events=events;}  }
class C{  public boolean executeDelayedExpensiveWrite(Runnable task){  Future<?> f=executeDiskStoreTask(task,this.delayedWritePool);  lastDelayedWrite=f;  return f != null;}  }
class C{  private void resetMnemonics(){  if (mnemonicToIndexMap != null) {    mnemonicToIndexMap.clear();    mnemonicInputMap.clear();  }}  }
class C{  public void textureMode(int mode){  g.textureMode(mode);}  }
class C{  @Override public GetETLDriverInfo execute(String[] params){  try {    CommandLine commandLine=getCommandLine(params,PARAMS_STRUCTURE);    String minBId=commandLine.getOptionValue("min-batch-id");    LOGGER.debug("minimum-batch-id is " + minBId);    String maxBId=commandLine.getOptionValue("max-batch-id");    LOGGER.debug("maximum-batch-id is " + maxBId);    List<GetETLDriverInfo> getETLDriverInfoList=getETLInfoDAO.getETLInfo(Long.parseLong(minBId),Long.parseLong(maxBId));    LOGGER.info("list of File is " + getETLDriverInfoList.get(0).getFileList());    return getETLDriverInfoList.get(0);  } catch (  Exception e) {    LOGGER.error("Error occurred",e);    throw new MetadataException(e);  }}  }
class C{  public FunctionblockFactoryImpl(){  super();}  }
class C{  public void writePopulation(String outputfolder){  outputfolder=outputfolder + (outputfolder.endsWith("/") ? "" : "/");  if (sc.getPopulation().getPersons().size() == 0 || sc.getPopulation().getPersonAttributes() == null) {    throw new RuntimeException("Either no persons or person attributes to write.");  } else {    LOG.info("Writing population to file... (" + sc.getPopulation().getPersons().size() + ")");    PopulationWriter pw=new PopulationWriter(sc.getPopulation(),sc.getNetwork());    pw.writeV5(outputfolder + "Population.xml");    LOG.info("Writing person attributes to file...");    ObjectAttributesXmlWriter oaw=new ObjectAttributesXmlWriter(sc.getPopulation().getPersonAttributes());    oaw.putAttributeConverter(IncomeImpl.class,new SAIncomeConverter());    oaw.setPrettyPrint(true);    oaw.writeFile(outputfolder + "PersonAttributes.xml");  }}  }
class C{  public void restart(final String serviceName) throws LocalRepositoryException {  final String prefix="restart(): serviceName=" + serviceName + " ";  _log.debug(prefix);  final String[] cmd={_SYSTOOL_CMD,_SYSTOOL_RESTART,serviceName};  final Exec.Result result=Exec.sudo(_SYSTOOL_TIMEOUT,cmd);  checkFailure(result,prefix);}  }
class C{  public void receiveResultqueryStorageProcessors(com.emc.storageos.vasa.VasaServiceStub.QueryStorageProcessorsResponse result){}  }
class C{  public final void testNextBytesbyteArray02(){  byte[] myBytes;  byte[] myBytes1;  byte[] myBytes2;  for (int i=1; i < LENGTH; i+=INCR) {    myBytes=new byte[i];    for (int j=1; j < i; j++) {      myBytes[j]=(byte)(j & 0xFF);    }    sr.setSeed(myBytes);    sr2.setSeed(myBytes);    for (int k=1; k < LENGTH; k+=INCR) {      myBytes1=new byte[k];      myBytes2=new byte[k];      sr.nextBytes(myBytes1);      sr2.nextBytes(myBytes2);      for (int l=0; l < k; l++) {        assertFalse("unexpected: myBytes1[l] != myBytes2[l]  :: l==" + l + " k="+ k+ " i="+ i+ " myBytes1[l]="+ myBytes1[l]+ " myBytes2[l]="+ myBytes2[l],myBytes1[l] != myBytes2[l]);      }    }  }  for (int n=1; n < LENGTH; n+=INCR) {    int n1=10;    int n2=20;    int n3=100;    byte[][] bytes1=new byte[10][n1];    byte[][] bytes2=new byte[5][n2];    for (int k=0; k < bytes1.length; k++) {      sr.nextBytes(bytes1[k]);    }    for (int k=0; k < bytes2.length; k++) {      sr2.nextBytes(bytes2[k]);    }    for (int k=0; k < n3; k++) {      int i1=k / n1;      int i2=k % n1;      int i3=k / n2;      int i4=k % n2;      assertTrue("non-equality: i1=" + i1 + " i2="+ i2+ " i3="+ i3+ " i4="+ i4,bytes1[i1][i2] == bytes2[i3][i4]);    }  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:27.931 -0500",hash_original_method="92BE44E9F6280B7AE0D2A8904499350A",hash_generated_method="5A68C897F2049F6754C8DA6E4CBD57CE") public ViewPropertyAnimator translationXBy(float value){  animatePropertyBy(TRANSLATION_X,value);  return this;}  }
class C{  private void loadServerDetailsActivity(){  Preference.putString(context,Constants.PreferenceFlag.IP,null);  Intent intent=new Intent(AlreadyRegisteredActivity.this,ServerDetails.class);  intent.putExtra(getResources().getString(R.string.intent_extra_regid),regId);  intent.putExtra(getResources().getString(R.string.intent_extra_from_activity),AlreadyRegisteredActivity.class.getSimpleName());  intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  startActivity(intent);  finish();}  }
class C{  public static NamedGraph createNamedGraph(Model model,Resource graphNameNode,RDFList elements){  NamedGraph result=model.createResource(SP.NamedGraph).as(NamedGraph.class);  result.addProperty(SP.graphNameNode,graphNameNode);  result.addProperty(SP.elements,elements);  return result;}  }
class C{  public SQLWarning(String reason,String SQLState,int vendorCode,Throwable cause){  super(reason,SQLState,vendorCode,cause);}  }
class C{  @POST @Path("downloads") @ApiOperation(value="Starts downloading artifacts",response=DownloadToken.class) @ApiResponses(value={@ApiResponse(code=202,message="OK"),@ApiResponse(code=400,message="Illegal version format or artifact name"),@ApiResponse(code=409,message="Downloading already in progress"),@ApiResponse(code=500,message="Server error")}) public Response startDownload(@QueryParam(value="artifact") @ApiParam(value="Artifact name",allowableValues=CDECArtifact.NAME) String artifactName,@QueryParam(value="version") @ApiParam(value="Version number") String versionNumber){  try {    DownloadToken downloadToken=new DownloadToken();    downloadToken.setId(DOWNLOAD_TOKEN);    Artifact artifact=createArtifactOrNull(artifactName);    Version version=createVersionOrNull(versionNumber);    facade.startDownload(artifact,version);    return Response.status(Response.Status.ACCEPTED).entity(downloadToken).build();  } catch (  ArtifactNotFoundException|IllegalVersionException e) {    return handleException(e,Response.Status.BAD_REQUEST);  }catch (  DownloadAlreadyStartedException e) {    return handleException(e,Response.Status.CONFLICT);  }catch (  Exception e) {    return handleException(e);  }}  }
class C{  public void release(){  PathLockFactory.this.release(path,permits);}  }
class C{  protected BuddyPanel(final BuddyListModel model){  super(model);  setCellRenderer(new BuddyLabel());  setOpaque(false);  this.setFocusable(false);  this.addMouseListener(new BuddyPanelMouseListener());}  }
class C{  Component createComponent(Component owner){  if (GraphicsEnvironment.isHeadless()) {    return null;  }  return new HeavyWeightWindow(getParentWindow(owner));}  }
class C{  protected UnknownResolverVariableException(String i18n,Object... arguments){  super(i18n,arguments);}  }
class C{  public boolean isEndNode(final Node node){  return getDelegator().getCurrentStorage().isEndNode(node);}  }
class C{  public boolean hasDefClearPathToMethodExit(Definition duVertex){  if (!graph.containsVertex(duVertex))   throw new IllegalArgumentException("vertex not in graph");  if (duVertex.isLocalDU())   return false;  return hasDefClearPathToMethodExit(duVertex,duVertex,new HashSet<BytecodeInstruction>());}  }
class C{  private Collection<FollowElement> resetAndGetFollowElements(ObservableXtextTokenStream tokens,boolean strict){  CustomInternalN4JSParser parser=createParser();  parser.setStrict(strict);  tokens.reset();  return doGetFollowElements(parser,tokens);}  }
class C{  private static void printInfo(IgniteFileSystem fs,IgfsPath path) throws IgniteException {  System.out.println();  System.out.println("Information for " + path + ": "+ fs.info(path));}  }
class C{  protected List<BindingSet> makeHashValue(int currentMaxListSize){  return new ArrayList<BindingSet>(currentMaxListSize / 2 + 1);}  }
class C{  public static double cdf(double val,double loc,double scale){  val=(val - loc) / scale;  return 1. / (1. + Math.exp(-val));}  }
class C{  public void taskStateChanged(@TASK_STATE int taskState,Serializable tag){switch (taskState) {case TASK_STATE_PREPARE:{      iView.layoutLoadingVisibility(isContentEmpty());      iView.layoutContentVisibility(!isContentEmpty());      iView.layoutEmptyVisibility(false);      iView.layoutLoadFailedVisibility(false);    }  break;case TASK_STATE_SUCCESS:{  iView.layoutLoadingVisibility(false);  if (isContentEmpty()) {    iView.layoutEmptyVisibility(true);  } else {    iView.layoutContentVisibility(true);  }}break;case TASK_STATE_FAILED:{if (isContentEmpty()) {iView.layoutEmptyVisibility(false);iView.layoutLoadingVisibility(false);iView.layoutLoadFailedVisibility(true);if (tag != null) {  iView.setTextLoadFailed(tag.toString());}}}break;case TASK_STATE_FINISH:break;}}  }
class C{  public GutterIconInfo addLineTrackingIcon(int line,Icon icon) throws BadLocationException {  int offs=textArea.getLineStartOffset(line);  return addOffsetTrackingIcon(offs,icon);}  }
class C{  public SpatialSparseVertex createVertex(Point point){  if (point != null)   point.setSRID(SRID);  return new SpatialSparseVertex(point);}  }
class C{  private String indentString(){  StringBuffer sb=new StringBuffer();  for (int i=0; i < indent; ++i) {    sb.append("  ");  }  return sb.toString();}  }
class C{  public boolean isProcessing(){  return isProcessing;}  }
class C{  public static String computeCodebase(String name,String jarFile,String port,String srcRoot,String mdAlgorithm) throws IOException {  return computeCodebase(name,jarFile,Integer.parseInt(port),srcRoot,mdAlgorithm);}  }
class C{  private void purgeRelayLogs(boolean wait){  if (relayLogRetention > 1) {    logger.info("Checking for old relay log files...");    File logDir=new File(binlogDir);    File[] filesToPurge=FileCommands.filesOverRetentionAndInactive(logDir,binlogFilePattern,relayLogRetention,this.binlogPosition.getFileName());    if (this.relayLogQueue != null) {      for (      File fileToPurge : filesToPurge) {        if (logger.isInfoEnabled()) {          logger.debug("Removing relay log file from relay log queue: " + fileToPurge.getAbsolutePath());        }        if (!relayLogQueue.remove(fileToPurge)) {          logger.info("Unable to remove relay log file from relay log queue, probably old: " + fileToPurge);        }      }    }    FileCommands.deleteFiles(filesToPurge,wait);  }}  }
class C{  public static Inet4Address fromInteger(int address){  return getInet4Address(Ints.toByteArray(address));}  }
class C{  public boolean isOverwriteUser1(){  Object oo=get_Value(COLUMNNAME_OverwriteUser1);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private static boolean valEquals(Object o1,Object o2){  return (o1 == null ? o2 == null : o1.equals(o2));}  }
class C{  public boolean hasAttribute(String name){  return DTM.NULL != dtm.getAttributeNode(node,null,name);}  }
class C{  public void init(){  Environment.init(this);  Debug.init(this,new String[]{"debug.basic","debug.cspec","debug.layer","debug.mapbean","debug.plugin"});  String propValue=getParameter(PropertiesProperty);  PropertyHandler propHandler=null;  try {    if (propValue != null) {      PropertyHandler.Builder builder=new PropertyHandler.Builder().setPropertiesFile(propValue);      propHandler=new PropertyHandler(builder);      if (Debug.debugging("app")) {        Debug.output("OpenMapApplet: Using properties from " + propValue);      }    }  } catch (  MalformedURLException murle) {    Debug.error("OpenMap: property file specified: " + propValue + " doesn't exist, searching for default openmap.properties file...");  }catch (  IOException ioe) {    Debug.error("OpenMap: There is a problem using the property file specified: " + propValue + ", searching for default openmap.properties file...");  }  if (propHandler == null) {    propHandler=new PropertyHandler();  }  MapPanel mapPanel=new BasicMapPanel(propHandler);  mapPanel.getMapHandler().add(this);  Debug.message("app","OpenMapApplet.init()");}  }
class C{  @Override public void process(ResponseBuilder rb) throws IOException {  SolrQueryRequest req=rb.req;  SolrQueryResponse rsp=rb.rsp;  SolrParams params=req.getParams();  if (!params.getBool(COMPONENT_NAME,true)) {    return;  }  SolrIndexSearcher searcher=req.getSearcher();  if (rb.getQueryCommand().getOffset() < 0) {    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"'start' parameter cannot be negative");  }  long timeAllowed=(long)params.getInt(CommonParams.TIME_ALLOWED,-1);  if (null != rb.getCursorMark() && 0 < timeAllowed) {    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,"Can not search using both " + CursorMarkParams.CURSOR_MARK_PARAM + " and "+ CommonParams.TIME_ALLOWED);  }  String ids=params.get(ShardParams.IDS);  if (ids != null) {    SchemaField idField=searcher.getSchema().getUniqueKeyField();    List<String> idArr=StrUtils.splitSmart(ids,",",true);    int[] luceneIds=new int[idArr.size()];    int docs=0;    for (int i=0; i < idArr.size(); i++) {      int id=req.getSearcher().getFirstMatch(new Term(idField.getName(),idField.getType().toInternal(idArr.get(i))));      if (id >= 0)       luceneIds[docs++]=id;    }    DocListAndSet res=new DocListAndSet();    res.docList=new DocSlice(0,docs,luceneIds,null,docs,0);    if (rb.isNeedDocSet()) {      List<Query> queries=new ArrayList<>();      queries.add(rb.getQuery());      List<Query> filters=rb.getFilters();      if (filters != null)       queries.addAll(filters);      res.docSet=searcher.getDocSet(queries);    }    rb.setResults(res);    ResultContext ctx=new ResultContext();    ctx.docs=rb.getResults().docList;    ctx.query=null;    rsp.add("response",ctx);    return;  }  SolrIndexSearcher.QueryCommand cmd=rb.getQueryCommand();  cmd.setTimeAllowed(timeAllowed);  SolrIndexSearcher.QueryResult result=new SolrIndexSearcher.QueryResult();  GroupingSpecification groupingSpec=rb.getGroupingSpec();  if (groupingSpec != null) {    try {      boolean needScores=(cmd.getFlags() & SolrIndexSearcher.GET_SCORES) != 0;      if (params.getBool(GroupParams.GROUP_DISTRIBUTED_FIRST,false)) {        CommandHandler.Builder topsGroupsActionBuilder=new CommandHandler.Builder().setQueryCommand(cmd).setNeedDocSet(false).setIncludeHitCount(true).setSearcher(searcher);        for (        String field : groupingSpec.getFields()) {          topsGroupsActionBuilder.addCommandField(new SearchGroupsFieldCommand.Builder().setField(searcher.getSchema().getField(field)).setGroupSort(groupingSpec.getGroupSort()).setTopNGroups(cmd.getOffset() + cmd.getLen()).setIncludeGroupCount(groupingSpec.isIncludeGroupCount()).build());        }        CommandHandler commandHandler=topsGroupsActionBuilder.build();        commandHandler.execute();        SearchGroupsResultTransformer serializer=new SearchGroupsResultTransformer(searcher);        rsp.add("firstPhase",commandHandler.processResult(result,serializer));        rsp.add("totalHitCount",commandHandler.getTotalHitCount());        rb.setResult(result);        return;      } else       if (params.getBool(GroupParams.GROUP_DISTRIBUTED_SECOND,false)) {        CommandHandler.Builder secondPhaseBuilder=new CommandHandler.Builder().setQueryCommand(cmd).setTruncateGroups(groupingSpec.isTruncateGroups() && groupingSpec.getFields().length > 0).setSearcher(searcher);        for (        String field : groupingSpec.getFields()) {          String[] topGroupsParam=params.getParams(GroupParams.GROUP_DISTRIBUTED_TOPGROUPS_PREFIX + field);          if (topGroupsParam == null) {            topGroupsParam=new String[0];          }          List<SearchGroup<BytesRef>> topGroups=new ArrayList<>(topGroupsParam.length);          for (          String topGroup : topGroupsParam) {            SearchGroup<BytesRef> searchGroup=new SearchGroup<>();            if (!topGroup.equals(TopGroupsShardRequestFactory.GROUP_NULL_VALUE)) {              searchGroup.groupValue=new BytesRef(searcher.getSchema().getField(field).getType().readableToIndexed(topGroup));            }            topGroups.add(searchGroup);          }          secondPhaseBuilder.addCommandField(new TopGroupsFieldCommand.Builder().setField(searcher.getSchema().getField(field)).setGroupSort(groupingSpec.getGroupSort()).setSortWithinGroup(groupingSpec.getSortWithinGroup()).setFirstPhaseGroups(topGroups).setMaxDocPerGroup(groupingSpec.getGroupOffset() + groupingSpec.getGroupLimit()).setNeedScores(needScores).setNeedMaxScore(needScores).build());        }        for (        String query : groupingSpec.getQueries()) {          secondPhaseBuilder.addCommandField(new QueryCommand.Builder().setDocsToCollect(groupingSpec.getOffset() + groupingSpec.getLimit()).setSort(groupingSpec.getGroupSort()).setQuery(query,rb.req).setDocSet(searcher).build());        }        CommandHandler commandHandler=secondPhaseBuilder.build();        commandHandler.execute();        TopGroupsResultTransformer serializer=new TopGroupsResultTransformer(rb);        rsp.add("secondPhase",commandHandler.processResult(result,serializer));        rb.setResult(result);        return;      }      int maxDocsPercentageToCache=params.getInt(GroupParams.GROUP_CACHE_PERCENTAGE,0);      boolean cacheSecondPassSearch=maxDocsPercentageToCache >= 1 && maxDocsPercentageToCache <= 100;      Grouping.TotalCount defaultTotalCount=groupingSpec.isIncludeGroupCount() ? Grouping.TotalCount.grouped : Grouping.TotalCount.ungrouped;      int limitDefault=cmd.getLen();      Grouping grouping=new Grouping(searcher,result,cmd,cacheSecondPassSearch,maxDocsPercentageToCache,groupingSpec.isMain());      grouping.setSort(groupingSpec.getGroupSort()).setGroupSort(groupingSpec.getSortWithinGroup()).setDefaultFormat(groupingSpec.getResponseFormat()).setLimitDefault(limitDefault).setDefaultTotalCount(defaultTotalCount).setDocsPerGroupDefault(groupingSpec.getGroupLimit()).setGroupOffsetDefault(groupingSpec.getGroupOffset()).setGetGroupedDocSet(groupingSpec.isTruncateGroups());      if (groupingSpec.getFields() != null) {        for (        String field : groupingSpec.getFields()) {          grouping.addFieldCommand(field,rb.req);        }      }      if (groupingSpec.getFunctions() != null) {        for (        String groupByStr : groupingSpec.getFunctions()) {          grouping.addFunctionCommand(groupByStr,rb.req);        }      }      if (groupingSpec.getQueries() != null) {        for (        String groupByStr : groupingSpec.getQueries()) {          grouping.addQueryCommand(groupByStr,rb.req);        }      }      if (rb.doHighlights || rb.isDebug() || params.getBool(MoreLikeThisParams.MLT,false)) {        cmd.setFlags(SolrIndexSearcher.GET_DOCLIST);      }      grouping.execute();      if (grouping.isSignalCacheWarning()) {        rsp.add("cacheWarning",String.format(Locale.ROOT,"Cache limit of %d percent relative to maxdoc has exceeded. Please increase cache size or disable caching.",maxDocsPercentageToCache));      }      rb.setResult(result);      if (grouping.mainResult != null) {        ResultContext ctx=new ResultContext();        ctx.docs=grouping.mainResult;        ctx.query=null;        rsp.add("response",ctx);        rsp.getToLog().add("hits",grouping.mainResult.matches());      } else       if (!grouping.getCommands().isEmpty()) {        rsp.add("grouped",result.groupedResults);        rsp.getToLog().add("hits",grouping.getCommands().get(0).getMatches());      }      return;    } catch (    SyntaxError e) {      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,e);    }  }  searcher.search(result,cmd);  rb.setResult(result);  ResultContext ctx=new ResultContext();  ctx.docs=rb.getResults().docList;  ctx.query=rb.getQuery();  rsp.add("response",ctx);  rsp.getToLog().add("hits",rb.getResults().docList.matches());  if (!rb.req.getParams().getBool(ShardParams.IS_SHARD,false)) {    if (null != rb.getNextCursorMark()) {      rb.rsp.add(CursorMarkParams.CURSOR_MARK_NEXT,rb.getNextCursorMark().getSerializedTotem());    }  }  if (rb.mergeFieldHandler != null) {    rb.mergeFieldHandler.handleMergeFields(rb,searcher);  } else {    doFieldSortValues(rb,searcher);  }  doPrefetch(rb);}  }
class C{  public void addUser(IUser user){  if (!this.users.contains(user) && user != null)   this.users.add(user);}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMForeignObjectElement(prefix,(AbstractDocument)doc);}  }
class C{  public T casePostfixExpression(PostfixExpression object){  return null;}  }
class C{  @Deprecated public int readPrimitiveArray(Object o) throws IOException {  return (int)readLArray(o);}  }
class C{  @Override public boolean hasValuesDescription(){  return restrictionClass != null && restrictionClass != Object.class;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void handleError(@NotNull Throwable e,GitOutputConsole console){  String errorMessage=(e.getMessage() != null && !e.getMessage().isEmpty()) ? e.getMessage() : constant.initFailed();  console.printError(errorMessage);  notificationManager.notify(constant.initFailed(),FAIL,FLOAT_MODE);}  }
class C{  private void validateComplete(ParameterFile pf){  Assert.assertEquals(3,pf.size());  Assert.assertEquals("entry1",pf.get(0).getName());  Assert.assertEquals(0.0,pf.get(0).getLowerBound(),Settings.EPS);  Assert.assertEquals(1.0,pf.get(0).getUpperBound(),Settings.EPS);  Assert.assertEquals("entry2",pf.get(1).getName());  Assert.assertEquals(100,pf.get(1).getLowerBound(),Settings.EPS);  Assert.assertEquals(10000,pf.get(1).getUpperBound(),Settings.EPS);  Assert.assertEquals("entry3",pf.get(2).getName());  Assert.assertEquals(0.0,pf.get(2).getLowerBound(),Settings.EPS);  Assert.assertEquals(1.0,pf.get(2).getUpperBound(),Settings.EPS);}  }
class C{  public IMqttDeliveryToken publish(String topic,MqttMessage message,String invocationContext,String activityToken){  final Bundle resultBundle=new Bundle();  resultBundle.putString(MqttServiceConstants.CALLBACK_ACTION,MqttServiceConstants.SEND_ACTION);  resultBundle.putString(MqttServiceConstants.CALLBACK_ACTIVITY_TOKEN,activityToken);  resultBundle.putString(MqttServiceConstants.CALLBACK_INVOCATION_CONTEXT,invocationContext);  IMqttDeliveryToken sendToken=null;  if ((myClient != null) && (myClient.isConnected())) {    IMqttActionListener listener=new MqttConnectionListener(resultBundle);    try {      sendToken=myClient.publish(topic,message,invocationContext,listener);      storeSendDetails(topic,message,sendToken,invocationContext,activityToken);    } catch (    Exception e) {      handleException(resultBundle,e);    }  } else   if ((myClient != null) && (this.bufferOpts != null) && (this.bufferOpts.isBufferEnabled())) {    IMqttActionListener listener=new MqttConnectionListener(resultBundle);    try {      sendToken=myClient.publish(topic,message,invocationContext,listener);      storeSendDetails(topic,message,sendToken,invocationContext,activityToken);    } catch (    Exception e) {      handleException(resultBundle,e);    }  } else {    Log.i(TAG,"Client is not connected, so not sending message");    resultBundle.putString(MqttServiceConstants.CALLBACK_ERROR_MESSAGE,NOT_CONNECTED);    service.traceError(MqttServiceConstants.SEND_ACTION,NOT_CONNECTED);    service.callbackToActivity(clientHandle,Status.ERROR,resultBundle);  }  return sendToken;}  }
class C{  public void parseAtom(ExtensionProfile extProfile,Reader reader) throws IOException, ParseException {  SourceHandler handler=new SourceHandler(extProfile);  new XmlParser().parse(reader,handler,Namespaces.atom,"source");}  }
class C{  public void processServerResponse(int response,ResponseData rawData){  if (response != Policy.RETRY) {    setRetryCount(0);  } else {    setRetryCount(mRetryCount + 1);  }  if (response == Policy.LICENSED) {    Map<String,String> extras=decodeExtras(rawData.extra);    mLastResponse=response;    setValidityTimestamp(extras.get("VT"));    setRetryUntil(extras.get("GT"));    setMaxRetries(extras.get("GR"));  } else   if (response == Policy.NOT_LICENSED) {    setValidityTimestamp(DEFAULT_VALIDITY_TIMESTAMP);    setRetryUntil(DEFAULT_RETRY_UNTIL);    setMaxRetries(DEFAULT_MAX_RETRIES);  }  setLastResponse(response);  mPreferences.commit();}  }
class C{  public static String locationJSON(String provider,Location location,boolean cached){  final JSONObject json=new JSONObject();  if (location != null) {    try {      json.put("provider",provider);      json.put("latitude",location.getLatitude());      json.put("longitude",location.getLongitude());      json.put("altitude",location.getAltitude());      json.put("accuracy",location.getAccuracy());      json.put("bearing",location.getBearing());      json.put("speed",location.getSpeed());      json.put("timestamp",location.getTime());      json.put("cached",cached);    } catch (    JSONException exc) {      logJSONException(exc);    }  }  return json.toString();}  }
class C{  public synchronized void dispose() throws IllegalStateException {  CompilerAsserts.neverPartOfCompilation();  if (!disposed) {    instrumenter.disposeBinding(this);    disposed=true;  }}  }
class C{  public NamespaceId(final String name){  this(parse(name));}  }
class C{  public DefaultIoFilterChain(AbstractIoSession session){  if (session == null) {    throw new IllegalArgumentException("session");  }  this.session=session;  head=new EntryImpl(null,null,"head",new HeadFilter());  tail=new EntryImpl(head,null,"tail",new TailFilter());  head.nextEntry=tail;}  }
class C{  protected String processPostRequest(HttpServletRequest request){  if (request == null) {    return Helper.ERROR_UNKNOWN_JSON;  }  try {    JsonObject jsonObject=Helper.getJsonObjectFromRequestBody(request);    Integer id=JsonUtils.getIntegerFieldFromJsonObject(jsonObject,"id");    String name=JsonUtils.getStringFieldFromJsonObject(jsonObject,"name");    if (id != null) {      NotificationGroupsDao notificationGroupsDao=new NotificationGroupsDao();      NotificationGroup notificationGroup=notificationGroupsDao.getNotificationGroup(id);      name=notificationGroup.getName();    }    NotificationGroupsDao notificationGroupsDao=new NotificationGroupsDao();    NotificationGroup notificationGroup=notificationGroupsDao.getNotificationGroupByName(name);    if (notificationGroup == null)     return Helper.ERROR_NOTFOUND_JSON;    com.pearson.statsagg.webui.NotificationGroups notificationGroups=new com.pearson.statsagg.webui.NotificationGroups();    String result=notificationGroups.removeNotificationGroup(name);    return Helper.createSimpleJsonResponse(result);  } catch (  Exception e) {    logger.error(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e));    return Helper.ERROR_UNKNOWN_JSON;  }}  }
class C{  public void removeCycles() throws WikiApiException {  DefaultEdge edge=null;  while ((edge=findCycle()) != null) {    Category sourceCat=wiki.getCategory(categoryGraph.getGraph().getEdgeSource(edge));    Category targetCat=wiki.getCategory(categoryGraph.getGraph().getEdgeTarget(edge));    logger.info("Removing cycle: " + sourceCat.getTitle() + " - "+ targetCat.getTitle());    categoryGraph.getGraph().removeEdge(edge);  }}  }
class C{  public void takeHints(Collection<Hint> c,int maxElements) throws InterruptedException {  int count=0;  try {    while (count == 0) {      hintLock.lock();      while (hintQueue.isEmpty()) {        hintsAvailable.await();      }      while (count < maxElements && !hintQueue.isEmpty()) {        HintKey hintKey=hintQueue.pollFirst();        if (hintKey != null) {          List<Versioned<byte[]>> values=hints.remove(hintKey);          if (values == null) {            continue;          }          c.add(new Hint(hintKey,values));          count+=1;        }      }    }  }  finally {    hintLock.unlock();  }}  }
class C{  public Component(boolean enableCache){  this(null,enableCache);}  }
class C{  private void ensureCapacity(final int capacity){  a=CharArrays.ensureCapacity(a,capacity,size);}  }
class C{  void addBridges(DiagnosticPosition pos,ClassSymbol origin,ListBuffer<JCTree> bridges){  Type st=types.supertype(origin.type);  while (st.hasTag(CLASS)) {    addBridges(pos,st.tsym,origin,bridges);    st=types.supertype(st);  }  for (List<Type> l=types.interfaces(origin.type); l.nonEmpty(); l=l.tail)   addBridges(pos,l.head.tsym,origin,bridges);}  }
class C{  public TransactionConfiguration txConfig(){  return kernalCtx.config().getTransactionConfiguration();}  }
class C{  public void updateDataset(CandleDataset source,int seriesIndex,boolean newBar){  if (source == null) {    throw new IllegalArgumentException("Null source (CandleDataset).");  }  for (int i=0; i < this.getSeriesCount(); i++) {    VwapSeries series=this.getSeries(i);    series.updateSeries(source.getSeries(seriesIndex),source.getSeries(seriesIndex).getItemCount() - 1,newBar);  }}  }
class C{  private void createMainPanel(){  log.config(": " + m_product);  this.getChildren().clear();  m_selectionList.clear();  m_productList.clear();  m_qtyList.clear();  m_buttonGroups.clear();  this.appendChild(new Separator());  this.appendChild(grpSelectionPanel);  this.appendChild(new Separator());  this.appendChild(grpSelectProd);  this.appendChild(new Separator());  this.appendChild(confirmPanel);  this.appendChild(new Separator());  this.setBorder("normal");  Caption title=new Caption(Msg.getMsg(Env.getCtx(),"SelectProduct"));  grpSelectProd.getChildren().clear();  grpSelectProd.appendChild(title);  if (m_product != null && m_product.get_ID() > 0) {    title.setLabel(m_product.getName());    if (m_product.getDescription() != null && m_product.getDescription().length() > 0)     ;    m_bomLine=0;    addBOMLines(m_product,m_qty);  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public static boolean addSmiles(Context context,Spannable spannable){  boolean hasChanges=false;  for (  Entry<Pattern,Object> entry : emoticons.entrySet()) {    Matcher matcher=entry.getKey().matcher(spannable);    while (matcher.find()) {      boolean set=true;      for (      ImageSpan span : spannable.getSpans(matcher.start(),matcher.end(),ImageSpan.class))       if (spannable.getSpanStart(span) >= matcher.start() && spannable.getSpanEnd(span) <= matcher.end())       spannable.removeSpan(span); else {        set=false;        break;      }      if (set) {        hasChanges=true;        Object value=entry.getValue();        if (value instanceof String && !((String)value).startsWith("http")) {          File file=new File((String)value);          if (!file.exists() || file.isDirectory()) {            return false;          }          spannable.setSpan(new ImageSpan(context,Uri.fromFile(file)),matcher.start(),matcher.end(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);        } else {          spannable.setSpan(new ImageSpan(context,(Integer)value),matcher.start(),matcher.end(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);        }      }    }  }  return hasChanges;}  }
class C{  public int countCurrentDockerSlaves(final DockerSlaveTemplate template) throws Exception {  int count=0;  List<Container> containers=getClient().listContainersCmd().exec();  for (  Container container : containers) {    final Map<String,String> labels=container.getLabels();    if (labels.containsKey(DOCKER_CLOUD_LABEL) && labels.get(DOCKER_CLOUD_LABEL).equals(getDisplayName())) {      if (template == null) {        count++;      } else       if (labels.containsKey(DOCKER_TEMPLATE_LABEL) && labels.get(DOCKER_TEMPLATE_LABEL).equals(template.getId())) {        count++;      }    }  }  return count;}  }
class C{  public EchoReplyMessage(EchoReplyMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }}  }
class C{  public void blend(int sx,int sy,int sw,int sh,int dx,int dy,int dw,int dh,int mode){  blend(this,sx,sy,sw,sh,dx,dy,dw,dh,mode);}  }
class C{  public IntHashMap(int initialCapacity){  this(initialCapacity,0.75f);}  }
class C{  public static long[] hash(int[] key,long seed){  HashState hashState=new HashState(seed,seed);  final int ints=key.length;  final int nblocks=ints >> 2;  for (int i=0; i < nblocks; i++) {    long k1=getLong(key,4 * i,2);    long k2=getLong(key,(4 * i) + 2,2);    hashState.blockMix128(k1,k2);  }  int tail=nblocks * 4;  int rem=ints - tail;  long k1;  long k2;  if (rem > 2) {    k1=getLong(key,tail,2);    k2=getLong(key,tail + 2,rem - 2);  } else {    k1=(rem == 0) ? 0 : getLong(key,tail,rem);    k2=0;  }  return hashState.finalMix128(k1,k2,ints * Integer.BYTES);}  }
class C{  private void startChristmas(Player admin){  if (System.getProperty("stendhal.santa") != null) {    admin.sendPrivateText("Santa is already active.");    return;  }  System.setProperty("stendhal.santa","true");  StendhalQuestSystem.get().loadQuest(new MeetSanta());}  }
class C{  public static void resetTimeComparisonEpsilonMicros(){  timeComparisonEpsilon=initializeTimeEpsilon();}  }
class C{  private static int first(ByteBuffer in,int inPos){  return (in.get(inPos) << 8) | (in.get(inPos + 1) & 255);}  }
class C{  @ApiMethod(httpMethod="POST") public final Recommendation insertRecommendation(final Recommendation recommendation,final User user) throws ServiceException {  EndpointUtil.throwIfNotAdmin(user);  ofy().save().entity(recommendation).now();  return recommendation;}  }
class C{  public XObject execute(XPathContext xctxt,int context,DTM dtm,int expType) throws javax.xml.transform.TransformerException {  DTMIterator nl=m_functionExpr.asIterator(xctxt,context);  XNumber score=SCORE_NONE;  if (null != nl) {    int n;    while (DTM.NULL != (n=nl.nextNode())) {      score=(n == context) ? SCORE_OTHER : SCORE_NONE;      if (score == SCORE_OTHER) {        context=n;        break;      }    }    nl.detach();  }  return score;}  }
class C{  public void addNewarray(int atype,int length){  addIconst(length);  addOpcode(NEWARRAY);  add(atype);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4mfPackage.TESTED_PROJECTS__TESTED_PROJECTS:    return getTestedProjects();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean forEach(BooleanProcedure procedure){  boolean[] theElements=elements;  int theSize=size;  for (int i=0; i < theSize; )   if (!procedure.apply(theElements[i++]))   return false;  return true;}  }
class C{  Name(BasicType type){  this(-1,type);}  }
class C{  public final SecretKey generateKey(){  return spiImpl.engineGenerateKey();}  }
class C{  @SuppressWarnings("TypeMayBeWeakened") public static void writeNearConfiguration(BinaryRawWriter out,NearCacheConfiguration cfg){  assert cfg != null;  out.writeInt(cfg.getNearStartSize());  writeEvictionPolicy(out,cfg.getNearEvictionPolicy());}  }
class C{  public Builder withSolrXml(String solrXml){  this.solrxml=solrXml;  return this;}  }
class C{  public void store(float value,Offset offset){}  }
class C{  public void updateSizes(int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  public String newSessionId(){  byte[] b=new byte[32];  random.nextBytes(b);  return HexUtil.conventBytesToHexString(b);}  }
class C{  public void assertArrayEqual(Object[] expected,Object[] actual){  TestUtils.assertArrayEqual(expected,actual);}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length != 1) {    throw new IllegalArgumentException("Please supply one argument, file name of the validated ocsp fetch interval parameters xml.");  }  new OcspFetchIntervalSchemaValidator().validateFile(args[0]);}  }
class C{  public boolean add(E e){  return offer(e);}  }
class C{  private table printDescription(int activeNode,MWorkflow wf,MWFNode[] nodes,ArrayList nodes_ID){  table desTable=new table();  String WFName="";  String WFDescription="";  if (activeNode < 0) {    WFName=wf.getName();    WFDescription=wf.getHelp();  } else {    WFName=nodes[getIndex(activeNode,nodes_ID)].getName();    WFDescription=nodes[getIndex(activeNode,nodes_ID)].getHelp();  }  tr aRow=new tr();  td aGrid=new td();  aGrid.addElement(new h6(WFName));  aGrid.addElement(new br());  aGrid.addElement(WFDescription);  desTable.addElement(aRow.addElement(aGrid));  return desTable;}  }
class C{  @Override public void addPages(){  page=new NewFileSystemPage(getSelection());  addPage(page);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Widget w=getWidget(stack);  return (w != null) ? w.contents() : null;}  }
class C{  ParseState parsePipleline(BashPsiBuilder builder){  if (!Parsing.command.parse(builder)) {    return ParseState.ERROR;  }  boolean withPipeline=pipeTokens.contains(builder.getTokenType());  if (!withPipeline) {    return ParseState.OK_NO_PIPELINE;  }  boolean result=true;  while (result && pipeTokens.contains(builder.getTokenType())) {    builder.advanceLexer();    builder.eatOptionalNewlines();    result=Parsing.command.parse(builder);  }  if (!result) {    return ParseState.ERROR;  }  return ParseState.OK_PIPELINE;}  }
class C{  public void startUpdate(){  myFilesWaitingForRevision.push(ContainerUtil.<Pair<String,String>>newArrayList());}  }
class C{  public static PriceSource newInstance(Integer value){  final PriceSource returnInstance=new PriceSource();  returnInstance.setValue(value);  return returnInstance;}  }
class C{  public ScatterGraph(int height,int width,Vector sites,float minyear,float maxyear,float mintemp,float maxtemp){  initialize(height,width,0,0,sites,minyear,maxyear,mintemp,maxtemp);}  }
class C{  public static double bachelierBlackFormula(final Option.Type optionType,@Real final double strike,@Real final double forward,@StdDev final double stddev){  return bachelierBlackFormula(optionType,strike,forward,stddev,1.0);}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj == null) {    return false;  }  if (!(obj instanceof CarbonMeasure)) {    return false;  }  CarbonMeasure other=(CarbonMeasure)obj;  if (columnSchema == null) {    if (other.columnSchema != null) {      return false;    }  } else   if (!columnSchema.equals(other.columnSchema)) {    return false;  }  return true;}  }
class C{  public static boolean canDeleteUnManagedVolume(UnManagedVolume unManagedVolume){  boolean canDelete=null == unManagedVolume.getUnmanagedExportMasks() || unManagedVolume.getUnmanagedExportMasks().isEmpty();  if (!canDelete) {    _logger.info("cannot delete unmanaged volume {} because these unmanaged export masks are remaining to be ingested: {}",unManagedVolume.forDisplay(),unManagedVolume.getUnmanagedExportMasks());  }  return canDelete;}  }
class C{  public static void uncheckedClose(Reader reader,boolean rethrowAsUnchecked){  try {    reader.close();  } catch (  IOException e) {    if (rethrowAsUnchecked)     throw melnorme.utilbox.core.ExceptionAdapter.unchecked(e);  }}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  trimToFileCount();  journalWriter.flush();}  }
class C{  protected void checkAntVersion(Hashtable h){  if (null == h)   h=new Hashtable();  try {    final String ANT_VERSION_CLASS="org.apache.tools.ant.Main";    final String ANT_VERSION_METHOD="getAntVersion";    final Class noArgs[]=new Class[0];    Class clazz=ObjectFactory.findProviderClass(ANT_VERSION_CLASS,ObjectFactory.findClassLoader(),true);    Method method=clazz.getMethod(ANT_VERSION_METHOD,noArgs);    Object returnValue=method.invoke(null,new Object[0]);    h.put(VERSION + "ant",(String)returnValue);  } catch (  Exception e) {    h.put(VERSION + "ant",CLASS_NOTPRESENT);  }}  }
class C{  public static int unionSize(long x,long y){  return Long.bitCount(x | y);}  }
class C{  @ApiOperation(value="Login",notes="Login to a Codenvy account. Either auth token or cookie are used",response=Token.class,position=2) @ApiResponses(value={@ApiResponse(code=200,message="OK"),@ApiResponse(code=400,message="Authentication error")}) @POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) @Path("/login") public Response authenticate(Credentials credentials,@ApiParam(value="Existing auth cookie. It is used to get deleted to a obtain new cookie") @CookieParam("session-access-key") Cookie tokenAccessCookie,@Context UriInfo uriInfo) throws AuthenticationException {  return dao.login(credentials,tokenAccessCookie,uriInfo);}  }
class C{  public int size(){  if (columns == null)   return 0; else   return columns.size();}  }
class C{  public static @Nullable Pair<Integer,Integer> decodeDimensions(InputStream is){  Preconditions.checkNotNull(is);  ByteBuffer byteBuffer=DECODE_BUFFERS.acquire();  if (byteBuffer == null) {    byteBuffer=ByteBuffer.allocate(DECODE_BUFFER_SIZE);  }  BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  try {    options.inTempStorage=byteBuffer.array();    BitmapFactory.decodeStream(is,null,options);    return (options.outWidth == -1 || options.outHeight == -1) ? null : new Pair(options.outWidth,options.outHeight);  }  finally {    DECODE_BUFFERS.release(byteBuffer);  }}  }
class C{  public static Argument createArgument(Model model,Property argProperty,Resource argType,boolean optional){  Argument a=model.createResource(SPL.Argument).as(Argument.class);  if (argProperty != null) {    a.addProperty(SPL.predicate,argProperty);  }  if (argType != null) {    a.addProperty(SPL.valueType,argType);  }  if (optional) {    a.addProperty(SPL.optional,model.createTypedLiteral(true));  }  return a;}  }
class C{  public static void compress(int format,Resource source,Resource target,boolean includeBaseFolder,int mode) throws IOException {  if (format == FORMAT_GZIP)   compressGZip(source,target); else   if (format == FORMAT_BZIP2)   compressBZip2(source,target); else {    Resource[] sources=(!includeBaseFolder && source.isDirectory()) ? source.listResources() : new Resource[]{source};    compress(format,sources,target,mode);  }}  }
class C{  public boolean isTraining(){  return isTraining;}  }
class C{  public void add(String key,Tool item){  add(key,item,-1);}  }
class C{  public LinearInterpolator(long[] timestamps,double[] values){  this.timestamps=timestamps;  this.values=values;  validate();}  }
class C{  public void updateClassifier(Instance instance) throws Exception {  if (!learningphase) {    return;  }  int num_classes=(int)(0.5 * numClasses);  int num_features=(int)(0.5 * numFeatures);  double[] data=new double[numFeatures];  double[] labels=new double[numClasses];  int numChanges=0;  int numCategories_1=numCategories - 1;  numinstancestr+=1;  if (!instance.classIsMissing()) {    double suminputA=0;    double suminputB=0;    for (int j=0; j < num_features; j++) {      data[j]=instance.value(num_classes + j);      data[j + num_features]=1 - data[j];      suminputA+=data[j] + data[j + num_features];    }    for (int j=0; j < num_classes; j++) {      labels[j]=instance.value(j);      labels[j + num_classes]=1 - labels[j];      suminputB+=labels[j] + labels[j + num_classes];    }    SortPair2[] cateacti=ARTActivateCategories(data,labels);    java.util.Arrays.sort(cateacti);    boolean resonance=false;    int currentSortedIndex=0;    int currentCategory=-1;    double matchA=0;    double matchB=0;    while (!resonance && currentSortedIndex < cateacti.length) {      currentCategory=cateacti[currentSortedIndex].getOriginalIndex();      if (currentCategory == numCategories_1) {        matchA=1;      } else {        matchA=cateacti[currentSortedIndex].getRawValue() / suminputA;      }      if (matchA >= roa) {        if (currentCategory == numCategories_1) {          if (currentSortedIndex == maxNumCategories) {            System.out.println("WARNING: The maximum number of categories has been reached.");            resonance=true;          } else {            sweightsA[currentCategory]=0;            for (int j=0; j < data.length; j++) {              weightsA[currentCategory][j]=data[j];              sweightsA[currentCategory]+=data[j];            }            for (int j=0; j < weightsB[currentCategory].length; j++) {              weightsB[currentCategory][j]=labels[j];            }            String s=Arrays.toString(labels);            if (hmclasses.containsKey(s)) {              hmclasses.get(s).add(currentCategory);              hmclasses.put(s,hmclasses.get(s));            } else {              Vector v=new Vector();              v.add(currentCategory);              hmclasses.put(s,v);            }            ARAMm_Add_New_Category();            numChanges=numChanges + 1;            resonance=true;            break;          }        } else {          double weightChange=ARAMm_Update_Weights(data,labels,currentCategory);          if (weightChange == 1) {            numChanges+=1;          }          resonance=true;          break;        }      } else {        currentSortedIndex+=1;        resonance=false;      }    }    if (!resonance && currentSortedIndex >= cateacti.length) {      sweightsA[numCategories_1]=0;      for (int j=0; j < data.length; j++) {        weightsA[numCategories_1][j]=data[j];        sweightsA[numCategories_1]+=data[j];      }      for (int j=0; j < weightsB[numCategories_1].length; j++) {        weightsB[numCategories_1][j]=labels[j];      }      String s=Arrays.toString(labels);      if (hmclasses.containsKey(s)) {        hmclasses.get(s).add(numCategories_1);        hmclasses.put(s,hmclasses.get(s));      } else {        Vector v=new Vector();        v.add(numCategories_1);        hmclasses.put(s,v);      }      ARAMm_Add_New_Category();      numChanges=numChanges + 1;    }  }}  }
class C{  private void putAndDestroy(){  region.put(new Integer(1),new Integer(1));  try {    region.destroy(new Integer(1));  } catch (  Exception e) {    logWriter.error("Exception occurred",e);    fail(" failed to destory Integer");  }}  }
class C{  protected void emit_FunctionTypeExpressionOLD_PrimaryTypeExpression_LeftParenthesisKeyword_0_0_0_1_or___LeftCurlyBracketKeyword_1_FunctionKeyword_3_LeftParenthesisKeyword_5__(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  public boolean isSingleThreaded(){  return singleThreaded;}  }
class C{  public ObjectMatrix1D like1D(int size){  return new DenseObjectMatrix1D(size);}  }
class C{  private void visit(NodeItem n,NodeItem c,int doi,int ldist){  PrefuseLib.updateVisible(n,true);  double localDOI=-ldist / Math.min(1000.0,m_divisor);  n.setDOI(doi + localDOI);  if (c != null) {    EdgeItem e=(EdgeItem)c.getParentEdge();    e.setDOI(c.getDOI());    PrefuseLib.updateVisible(e,true);  }}  }
class C{  public boolean isWorkflowInterception(){  return this.getStateMachineDef() != null;}  }
class C{  public static HashMap<String,String> loadHashMapFromFile(Context context,String fileName){  String filePath=context.getFilesDir().getPath() + "/" + fileName;  File f=new File(filePath);  try {    if (f.exists()) {      ObjectInputStream objISt=new ObjectInputStream(new FileInputStream(f));      HashMap<String,String> h=(HashMap<String,String>)objISt.readObject();      objISt.close();      System.out.println(h.get("c"));      return h;    } else {      System.out.println("FILE DOESNOT EXIST !!");    }  } catch (  IOException|ClassNotFoundException e) {    e.printStackTrace();  }  return new HashMap<>(1);}  }
class C{  @Override public void start(){  super.start();  landscape=setupLandscapeReadIn("data/elevation.txt.gz");  drops=new ArrayList<Raindrop>();  schedule.scheduleRepeating(new Raincloud());}  }
class C{  static int interpretation(int[] elemInfo,int tripletIndex){  if (((tripletIndex * 3) + 2) >= elemInfo.length) {    return -1;  }  return elemInfo[(tripletIndex * 3) + 2];}  }
class C{  public String backupNow(String backupFilePrefix) throws McException, IOException {  _logger.debug("Backup triggered.");  return Backup.backup(backupFilePrefix);}  }
class C{  public void init(CipherParameters param){  if (param instanceof ParametersWithRandom) {    ParametersWithRandom p=(ParametersWithRandom)param;    if (!(p.getParameters() instanceof ECPublicKeyParameters)) {      throw new IllegalArgumentException("ECPublicKeyParameters are required for encryption.");    }    this.key=(ECPublicKeyParameters)p.getParameters();    this.random=p.getRandom();  } else {    if (!(param instanceof ECPublicKeyParameters)) {      throw new IllegalArgumentException("ECPublicKeyParameters are required for encryption.");    }    this.key=(ECPublicKeyParameters)param;    this.random=new SecureRandom();  }}  }
class C{  public TimeBounds(){  setTimes(Long.MAX_VALUE,Long.MIN_VALUE);}  }
class C{  public InputStream fetchMountFSInfo(final Argument argument,final Map<String,Object> keyMap,int index) throws VNXFilePluginException {  _logger.info("VNX File System Mount info query");  InputStream iStream=null;  try {    Query query=new Query();    MountQueryParams mountQueryParams=new MountQueryParams();    query.getQueryRequestChoice().add(mountQueryParams);    iStream=_vnxFileInputRequestBuilder.getQueryParamPacket(mountQueryParams,false);  } catch (  JAXBException jaxbException) {    throw new VNXFilePluginException("Exception occurred while generating input xml for celerra system info",jaxbException.getCause());  }  return iStream;}  }
class C{  public void testConstructor5(){  Phaser parent=new Phaser();  assertSame(parent,new Phaser(parent,0).getParent());  assertNull(new Phaser(null,0).getParent());}  }
class C{  public Bitmap drawableToBitmap(Drawable drawable){  if (drawable == null) {    return null;  } else   if (drawable instanceof BitmapDrawable) {    return ((BitmapDrawable)drawable).getBitmap();  }  Bitmap bitmap=Bitmap.createBitmap(drawable.getIntrinsicWidth(),drawable.getIntrinsicHeight(),Bitmap.Config.ARGB_8888);  Canvas canvas=new Canvas(bitmap);  drawable.setBounds(0,0,canvas.getWidth(),canvas.getHeight());  drawable.draw(canvas);  return bitmap;}  }
class C{  public boolean isSetKey(){  return this.key != null;}  }
class C{  private SceneGraph createSceneGraph(final int time,Rect rect){  List<Rect> rects=new LinkedList<>();  if (OTFClientControl.getInstance().getOTFVisConfig().isScaleQuadTreeRect()) {    rect=rect.scale(5.0,5.0);  }  SceneGraph cachedResult=this.cachedTimes.get(time);  if (cachedResult != null) {    Rect cachedRect=cachedResult.getRect();    if ((cachedRect == null) || cachedRect.containsOrEquals(rect))     return cachedResult;    Rect intersec=rect.intersection(cachedRect);    if (intersec == null) {      cachedResult=null;    } else {      rect=rect.union(cachedRect);      double r1w=cachedRect.minX - rect.minX;      double r2h=cachedRect.minY - rect.minY;      double r3h=rect.maxY - cachedRect.maxY;      double r4w=rect.maxX - cachedRect.maxX;      if (r1w > 0)       rects.add(new Rect(rect.minX,rect.minY,cachedRect.minX,rect.maxY));      if (r4w > 0)       rects.add(new Rect(cachedRect.maxX,rect.minY,rect.maxX,rect.maxY));      if (r2h > 0)       rects.add(new Rect(cachedRect.minX,rect.minY,cachedRect.maxX,cachedRect.minY));      if (r3h > 0)       rects.add(new Rect(cachedRect.minX,cachedRect.maxY,cachedRect.maxX,rect.maxY));    }  }  if (this.host.isLive() == false) {    rect=null;    cachedResult=null;  }  SceneGraph result;  if (cachedResult == null) {    result=new SceneGraph(rect);    QuadTree.Rect bound2=this.host.isLive() ? rect : this.top.getBounds();    byte[] bbyte;    bbyte=this.host.getQuadDynStateBuffer(bound2);    ByteBuffer in=ByteBuffer.wrap(bbyte);    this.execute(bound2,new ReadDataExecutor(in,false,result));    for (    OTFDataReader element : this.additionalElements) {      try {        element.readDynData(in,result);      } catch (      IOException e) {        e.printStackTrace();      }    }    invalidate(rect,result);  } else {    result=cachedResult;    result.setRect(rect);    for (    Rect rectPart : rects) {      QuadTree.Rect bound2=this.host.isLive() ? rectPart : this.top.getBounds();      byte[] bbyte;      bbyte=this.host.getQuadDynStateBuffer(bound2);      ByteBuffer in=ByteBuffer.wrap(bbyte);      this.execute(bound2,new ReadDataExecutor(in,false,result));      invalidate(rectPart,result);    }  }  result.finish();  if (this.host.isLive() == false) {    this.cachedTimes.put(time,result);  }  return result;}  }
class C{  public CTagNodeComponent(final JTree projectTree,final IDatabase database,final TreeNode<CTag> tagTreeNode){  super(new BorderLayout());  Preconditions.checkNotNull(projectTree,"IE02000: Project tree argument can not be null");  Preconditions.checkNotNull(tagTreeNode,"IE02001: Tree node argument can not be null");  m_database=database;  m_tagTreeNode=tagTreeNode;  m_nameTextField=new CHelpSaveField(tagTreeNode.getObject().getName(),new CNameHelp());  m_descriptionField=new CHelpSavePane(tagTreeNode.getObject().getDescription(),new CDescriptionHelp());  m_childrenTagTable=new CChildTagsTable(projectTree,m_tagTreeNode,database);  m_tableBorder=new TitledBorder(getBorderText());  createGui();  m_database.getContent().getViewTagManager().addListener(m_tagManagerListener);  m_tagTreeNode.getObject().addListener(m_tagListener);  final UpdateListener updateListener=new UpdateListener();  m_nameTextField.getDocument().addDocumentListener(updateListener);  m_descriptionField.getDocument().addDocumentListener(updateListener);  updateGUI();}  }
class C{  XSLTElementDef(XSLTSchema schema,String namespace,String name,String nameAlias,XSLTElementDef[] elements,XSLTAttributeDef[] attributes,XSLTElementProcessor contentHandler,Class classObject,boolean has_order,int order,boolean multiAllowed){  this(schema,namespace,name,nameAlias,elements,attributes,contentHandler,classObject,order,multiAllowed);  this.m_isOrdered=has_order;}  }
class C{  public static void main(String[] args){  doLoop(SillyPeds.class,args);  System.exit(0);}  }
class C{  public static final double sigma(double a){  return 1.0 / (1.0 + Math.exp(-a));}  }
class C{  private Bitmap createPaddedSourceImage(Uri sourceImageUri,boolean previewSize){  InputStream is=getInputStream(sourceImageUri);  if (is == null) {    Log.e(TAG,"Could not create input stream for image.");    dismiss();  }  Bitmap sourceBitmap=BitmapFactory.decodeStream(is);  is=getInputStream(sourceImageUri);  XMPMeta xmp=XmpUtil.extractXMPMeta(is);  if (xmp != null) {    int size=previewSize ? getDisplaySize() : sourceBitmap.getWidth();    sourceBitmap=createPaddedBitmap(sourceBitmap,xmp,size);  }  return sourceBitmap;}  }
class C{  public SparseIntArray(){  this(10);}  }
class C{  public static void cleanup(EvolutionState state){  state.output.flush();  PrintWriter pw=new PrintWriter(System.err);  state.parameters.getBoolean(new Parameter(P_PRINTUSEDPARAMETERS),null,false);  state.parameters.getBoolean(new Parameter(P_PRINTACCESSEDPARAMETERS),null,false);  state.parameters.getBoolean(new Parameter(P_PRINTUNUSEDPARAMETERS),null,false);  state.parameters.getBoolean(new Parameter(P_PRINTUNACCESSEDPARAMETERS),null,false);  state.parameters.getBoolean(new Parameter(P_PRINTALLPARAMETERS),null,false);  if (state.parameters.getBoolean(new Parameter(P_PRINTUSEDPARAMETERS),null,false)) {    pw.println("\n\nUsed Parameters\n===============\n");    state.parameters.listGotten(pw);  }  if (state.parameters.getBoolean(new Parameter(P_PRINTACCESSEDPARAMETERS),null,false)) {    pw.println("\n\nAccessed Parameters\n===================\n");    state.parameters.listAccessed(pw);  }  if (state.parameters.getBoolean(new Parameter(P_PRINTUNUSEDPARAMETERS),null,false)) {    pw.println("\n\nUnused Parameters\n" + "================= (Ignore parent.x references) \n");    state.parameters.listNotGotten(pw);  }  if (state.parameters.getBoolean(new Parameter(P_PRINTUNACCESSEDPARAMETERS),null,false)) {    pw.println("\n\nUnaccessed Parameters\n" + "===================== (Ignore parent.x references) \n");    state.parameters.listNotAccessed(pw);  }  if (state.parameters.getBoolean(new Parameter(P_PRINTALLPARAMETERS),null,false)) {    pw.println("\n\nAll Parameters\n==============\n");    state.parameters.list(pw,false);  }  pw.flush();  System.err.flush();  System.out.flush();  state.output.close();}  }
class C{  void decrypt(long id,int len,byte[] data,int offset){  byte[] tweak=initTweak(id), tweakEnd=tweak;  int i=0;  for (; i + CIPHER_BLOCK_SIZE <= len; i+=CIPHER_BLOCK_SIZE) {    if (i > 0) {      updateTweak(tweak);      if (i + CIPHER_BLOCK_SIZE + CIPHER_BLOCK_SIZE > len && i + CIPHER_BLOCK_SIZE < len) {        tweakEnd=tweak.clone();        updateTweak(tweak);      }    }    xorTweak(data,i + offset,tweak);    cipher.decrypt(data,i + offset,CIPHER_BLOCK_SIZE);    xorTweak(data,i + offset,tweak);  }  if (i < len) {    swap(data,i,i - CIPHER_BLOCK_SIZE + offset,len - i + offset);    xorTweak(data,i - CIPHER_BLOCK_SIZE + offset,tweakEnd);    cipher.decrypt(data,i - CIPHER_BLOCK_SIZE + offset,CIPHER_BLOCK_SIZE);    xorTweak(data,i - CIPHER_BLOCK_SIZE + offset,tweakEnd);  }}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public static void addMapBehavior(Region mock){  Map underlyingMap=new HashMap();  when(mock.get(any())).then(null);  when(mock.put(any(),any())).then(null);}  }
class C{  public static byte[] decode(byte[] source) throws java.io.IOException {  byte[] decoded=null;  decoded=decode(source,0,source.length,Base64.NO_OPTIONS);  return decoded;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private synchronized void handleServiceConnectionError(LicenseValidator validator){  mPolicy.processServerResponse(Policy.RETRY,null);  if (mPolicy.allowAccess()) {    validator.getCallback().allow(Policy.RETRY);  } else {    validator.getCallback().dontAllow(Policy.RETRY);  }}  }
class C{  protected SystemMember removeSystemMember(SystemMember systemMember){  return removeSystemMember(((SystemMemberImpl)systemMember).getInternalId());}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  @Override public int nextIndex(){  return tokenPos;}  }
class C{  public void testMaxLess(){  byte aBytes[]={45,91,3,-15,35,26,3,91};  byte bBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  int aSign=1;  int bSign=1;  byte rBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.max(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertTrue("incorrect sign",result.signum() == 1);}  }
class C{  public ConcurrentDisposableLazy(){  super();}  }
class C{  public String contentType(){  return contentType;}  }
class C{  public NodeRegistrationResponse registerNode(final String protocol,final String remoteHost,final int servicePort,final int adminPort){  if (StringUtils.isBlank(protocol))   return new NodeRegistrationResponse("",NodeRegistrationState.MISSING_PROTOCOL,"Missing required protocol");  if (StringUtils.isBlank(remoteHost))   return new NodeRegistrationResponse("",NodeRegistrationState.MISSING_HOST,"Missing required remote host");  if (servicePort < 1)   return new NodeRegistrationResponse("",NodeRegistrationState.MISSING_SERVICE_PORT,"Missing required service port");  if (adminPort < 1)   return new NodeRegistrationResponse("",NodeRegistrationState.MISSING_ADMIN_PORT,"Missing required admin port");  String nodeId=null;  int retries=this.numIdentifierComputationRetries;  while (retries > 0) {    nodeId=uuidGenerator.generate().toString();    if (!this.processingNodes.containsKey(nodeId))     break;  }  if (nodeId == null || this.processingNodes.containsKey(nodeId))   return new NodeRegistrationResponse("",NodeRegistrationState.NODE_ID_COMPUTATION_FAILED,"Failed to compute node identifier");  try {    this.processingNodes.put(nodeId,new SPQRNodeClient(protocol,remoteHost,servicePort,adminPort,getHttpClient(nodeId)));  } catch (  RequiredInputMissingException e) {    return new NodeRegistrationResponse("",NodeRegistrationState.TECHNICAL_ERROR,"Failed to create spqr node client. Error: " + e.getMessage());  }  return new NodeRegistrationResponse(nodeId,NodeRegistrationState.OK,"");}  }
class C{  public synchronized Label addStyle(SGR sgr){  additionalStyles.add(sgr);  return this;}  }
class C{  protected boolean isTopEdge(@NonNull SpanLookup spanLookup,int position,int childCount){  int latestCheckedPosition=0;  for (; latestCheckedPosition < childCount; latestCheckedPosition++) {    int spanEndIndex=spanLookup.getIndex(latestCheckedPosition) + spanLookup.getSpanSize(latestCheckedPosition) - 1;    if (spanEndIndex == spanLookup.getSpanCount() - 1) {      break;    }  }  return position <= latestCheckedPosition;}  }
class C{  @ExceptionHandler(UserException.class) public ModelAndView handleUserException(UserException ex){  return getDisplayErrorMessageModelAndView(ex.getMessage());}  }
class C{  public WrappedByteBuffer putLongAt(int index,long v){  _checkForWriteAt(index,8);  _buf.putLong(index,v);  return this;}  }
class C{  public GenericEDNSOption(int code,byte[] data){  super(code);  this.data=Record.checkByteArrayLength("option data",data,0xFFFF);}  }
class C{  public ProtocolException(){}  }
class C{  public Boolean isDigestAlgorithmsEqual(){  return digestAlgorithmsEqual;}  }
class C{  public boolean isContainsValue(){  return this.opType == OP_TYPE_CONTAINS_VALUE;}  }
class C{  public static boolean killServer(){  if (Cfg.getOs().equals("null")) {    Logger.appendLog("[AdbUtils][E]ADB is not supported by this OS");    return false;  }  String[] cmd={S.getAdbBin(),"kill-server"};  return CmdUtils.runCommand(cmd) == 0;}  }
class C{  public void update(int index,Number value){  TimeSeriesDataItem item=(TimeSeriesDataItem)this.data.get(index);  boolean iterate=false;  Number oldYN=item.getValue();  if (oldYN != null) {    double oldY=oldYN.doubleValue();    if (!Double.isNaN(oldY)) {      iterate=oldY <= this.minY || oldY >= this.maxY;    }  }  item.setValue(value);  if (iterate) {    updateMinMaxYByIteration();  } else   if (value != null) {    double yy=value.doubleValue();    this.minY=minIgnoreNaN(this.minY,yy);    this.maxY=maxIgnoreNaN(this.maxY,yy);  }  fireSeriesChanged();}  }
class C{  public static String numberToString(final String strNumberToConvert){  if (StringUtils.contains(strNumberToConvert,".")) {    throw new ApplicationRuntimeException("Can not pass decimal values");  } else {    return NumberToWord.convertToWord(strNumberToConvert).replace("Rupees","").replace("Only","");  }}  }
class C{  public boolean isDelayedCapture(){  Object oo=get_Value(COLUMNNAME_IsDelayedCapture);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static void unselectNodes(final ZyGraph graph,final CTag tag){  unselectNodes(graph,Sets.newHashSet(tag),true);}  }
class C{  public synchronized void cleanWaitTaskQueue(){  for (  ParallelTask task : waitQ) {    task.setState(ParallelTaskState.COMPLETED_WITH_ERROR);    task.getTaskErrorMetas().add(new TaskErrorMeta(TaskErrorType.USER_CANCELED,"NA"));    logger.info("task {} removed from wait q. This task has been marked as USER CANCELED.",task.getTaskId());  }  waitQ.clear();}  }
class C{  public Outline(){}  }
class C{  public void testEdgeNGramFilter() throws Exception {  Reader reader=new StringReader("test");  TokenStream stream=whitespaceMockTokenizer(reader);  stream=tokenFilterFactory("EdgeNGram").create(stream);  assertTokenStreamContents(stream,new String[]{"t"});}  }
class C{  private Ref impOp() throws PageException {  Ref ref=eqvOp();  while (cfml.forwardIfCurrentAndNoWordAfter("imp")) {    cfml.removeSpace();    ref=new Imp(ref,eqvOp());  }  return ref;}  }
class C{  public void transmit(String userId,JSONObject message){  JSONObject usrMsgJson=new JSONObject();  try {    usrMsgJson.put(PnRTCMessage.JSON_USERMSG,message);    this.pcClient.transmitMessage(userId,usrMsgJson);  } catch (  JSONException e) {    e.printStackTrace();  }}  }
class C{  public synchronized void reset(){  this.oldDataList.clear();  this.newDataList.clear();  this.lastNewData=null;  this.lastOldData=null;  isInvoked=false;}  }
class C{  private boolean authenticate(byte method,InputStream in,BufferedOutputStream out) throws IOException {  return authenticate(method,in,out,0L);}  }
class C{  public ActionFakeDefinition createActionFakeDefinition(){  ActionFakeDefinitionImpl actionFakeDefinition=new ActionFakeDefinitionImpl();  return actionFakeDefinition;}  }
class C{  final int inc(int i){  return (++i == items.length) ? 0 : i;}  }
class C{  public double[] evaluateConstraint(double[] x){  return CocoJNI.cocoEvaluateConstraint(this.pointer,x);}  }
class C{  public JulianDate(Date date){  julian=toJulian(date);}  }
class C{  public static RasterPlotComponent open(final InputStream input,final String name,final String format){  RasterModel dataModel=(RasterModel)RasterModel.getXStream().fromXML(input);  return new RasterPlotComponent(name,dataModel);}  }
class C{  public static String convertByte2HexString(byte b){  char u8=convertByte2Uint8(b);  return Integer.toHexString(u8);}  }
class C{  public void testStopClock(){  AbstractThrottle instance=new AbstractThrottleImpl();  instance.stopClock();}  }
class C{  public synchronized void dump(){  if (log.isDebugEnabled()) {    log.debug("dumping allocations {}",events.size());    for (    Entry<BaseEvent,Info> entry : events.entrySet()) {      log.debug("{} {}",entry.getKey(),entry.getValue().refcount);    }  }}  }
class C{  public static Sdk findAndroidSDK(){  Sdk[] allJDKs=ProjectJdkTable.getInstance().getAllJdks();  for (  Sdk sdk : allJDKs) {    if (sdk.getSdkType().getName().toLowerCase().contains("android")) {      return sdk;    }  }  return null;}  }
class C{  public static boolean checkIfRightExpressionRequireEvaluation(Expression expression){  if (expression.getFilterExpressionType() == ExpressionType.UNKNOWN || !(expression instanceof LiteralExpression) && !(expression instanceof ListExpression)) {    return true;  }  for (  Expression child : expression.getChildren()) {    if (checkIfRightExpressionRequireEvaluation(child)) {      return true;    }  }  return false;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static CGPoint ccp(float x,float y){  return new CGPoint(x,y);}  }
class C{  public BusinessObjectFormatEntity createBusinessObjectFormatEntity(String namespaceCode,String businessObjectDefinitionName,String businessObjectFormatUsage,String fileType,Integer businessObjectFormatVersion,String businessObjectFormatDescription,Boolean businessObjectFormatLatestVersion,String businessObjectFormatPartitionKey,String partitionKeyGroupName,List<Attribute> attributes){  return createBusinessObjectFormatEntity(namespaceCode,businessObjectDefinitionName,businessObjectFormatUsage,fileType,businessObjectFormatVersion,businessObjectFormatDescription,businessObjectFormatLatestVersion,businessObjectFormatPartitionKey,partitionKeyGroupName,attributes,null,null,null,null,null);}  }
class C{  public synchronized void mountBLOB(final File location,final boolean full) throws IOException {  Date d;  try {    d=my_SHORT_MILSEC_FORMATTER.parse(location.getName().substring(this.prefix.length() + 1,this.prefix.length() + 18),0).getTime();  } catch (  final ParseException e) {    throw new IOException("date parse problem with file " + location.toString() + ": "+ e.getMessage());  }  BLOB oneBlob;  if (full && this.buffersize > 0 && !this.trimall) {    oneBlob=new Heap(location,this.keylength,this.ordering,this.buffersize);  } else {    oneBlob=new HeapModifier(location,this.keylength,this.ordering);    oneBlob.optimize();  }  this.blobs.add(new blobItem(d,location,oneBlob));}  }
class C{  public CodeType findByName(String name){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    CriteriaBuilder builder=entityManager.getCriteriaBuilder();    CriteriaQuery<CodeType> query=builder.createQuery(CodeType.class);    Root<CodeType> from=query.from(CodeType.class);    query.select(from);    query.where(builder.equal(from.get("name"),name));    List<CodeType> items=entityManager.createQuery(query).getResultList();    entityManager.getTransaction().commit();    if (items.size() > 0) {      return items.get(0);    }    return null;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  public static void main(String[] args){  doMain(args);}  }
class C{  public boolean showChatColors(){  return chatColors;}  }
class C{  public Object eval(Reader reader) throws ScriptException {  return eval(reader,context);}  }
class C{  public void loading(){  mHintView.setVisibility(View.GONE);  mProgressBar.setVisibility(View.VISIBLE);}  }
class C{  @SuppressWarnings({"UnusedDeclaration"}) public static MixtureOfGaussians serializableInstance(){  return new MixtureOfGaussians(.5,-2,2,2,2);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 13:04:40.439 -0500",hash_original_method="EFD9495A1C7E86FA87C6E18B7AEF10E0",hash_generated_method="81482A8F6DCF884684552385CD88BCFE") public OrientedBoundingBox computeOrientedBoundingBox(){  return GestureUtils.computeOrientedBoundingBox(points);}  }
class C{  @Override public String toString(){  if (m_Classifiers == null) {    return "Bagging: No model built yet.";  }  StringBuffer text=new StringBuffer();  text.append("All the base classifiers: \n\n");  for (int i=0; i < m_Classifiers.length; i++)   text.append(m_Classifiers[i].toString() + "\n\n");  if (m_CalcOutOfBag) {    text.append("Out of bag error: " + Utils.doubleToString(m_OutOfBagError,4) + "\n\n");  }  return text.toString();}  }
class C{  public static double futureInvestmentValue(double investmentAmount,double monthlyInterestRate,int years){  return investmentAmount * Math.pow(1 + monthlyInterestRate,years * 12);}  }
class C{  public void parseForClass(GenericDeclaration genericDecl,String signature){  setInput(genericDecl,signature);  if (!eof) {    parseClassSignature();  } else {    if (genericDecl instanceof Class) {      Class c=(Class)genericDecl;      this.formalTypeParameters=EmptyArray.TYPE_VARIABLE;      this.superclassType=c.getSuperclass();      Class<?>[] interfaces=c.getInterfaces();      if (interfaces.length == 0) {        this.interfaceTypes=ListOfTypes.EMPTY;      } else {        this.interfaceTypes=new ListOfTypes(interfaces);      }    } else {      this.formalTypeParameters=EmptyArray.TYPE_VARIABLE;      this.superclassType=Object.class;      this.interfaceTypes=ListOfTypes.EMPTY;    }  }}  }
class C{  public BufferedRuleBasedScannerExt(int size){  super();  setBufferSize(size);}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x03D9526F,version=150) public int sceHttpSetResolveRetry(int templateId,int count){  return 0;}  }
class C{  public GVTGlyphVector createGlyphVector(FontRenderContext frc,int[] glyphCodes,CharacterIterator ci){  return new AWTGVTGlyphVector(awtFont.createGlyphVector(frc,glyphCodes),this,scale,ci);}  }
class C{  public static double sqrt(double x){  return Math.sqrt(x);}  }
class C{  public static IngredientsFragment newInstance(Recipe recipe,int sectionNumber){  IngredientsFragment fragment=new IngredientsFragment();  fragment.recipe=recipe;  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  public void actionPerformed(ActionEvent e){  DataModel dataModel=getDataEditor().getSelectedDataModel();  if (dataModel instanceof DataSet) {    DataSet dataSet=(DataSet)dataModel;    if (dataSet.getNumRows() == 0) {      JOptionPane.showMessageDialog(JOptionUtils.centeringComp(),"Data set is empty.");      return;    }    JComponent editor=editor();    int selection=JOptionPane.showOptionDialog(JOptionUtils.centeringComp(),editor,"Sample Size",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,new String[]{"Done","Cancel"},"Done");    if (selection != 0) {      return;    }    try {      DataSet newDataSet=RandomSampler.sample(dataSet,getSampleSize());      DataModelList list=new DataModelList();      list.add(newDataSet);      getDataEditor().reset(list);      getDataEditor().selectFirstTab();    } catch (    Exception e1) {      String s=e1.getMessage();      if (s == null || "".equals(s)) {        s="Could not construct random sample.";      }      JOptionPane.showMessageDialog(JOptionUtils.centeringComp(),s);    }  } else {    JOptionPane.showMessageDialog(JOptionUtils.centeringComp(),"Must be a tabular data set.");  }}  }
class C{  public void insertAddress(LocoNetMessage m){  m.setElement(1,getLowBits());  m.setElement(2,getHighBits() | getASBit());}  }
class C{  public static void main(String[] args) throws Exception {  String fileName=args[0];  JdkHelloWorld helloWorld=new JdkHelloWorld();  System.out.println("   ***" + fileName + " line count="+ helloWorld.readFile(fileName));  String url="http://www.google.com";  System.out.println("   ***" + url + " line count="+ helloWorld.readUrl(url));  url="http://example.com";  System.out.println("   ***" + url + " status code="+ helloWorld.urlWithConnection(url));  System.out.println("   *** jdbc interactions");  helloWorld.jdbcInteractions();}  }
class C{  public void testCase13(){  byte aBytes[]={15,48,-29,7,98,-1,39,-128};  int aSign=1;  byte rBytes[]={15,48,-29,7,98,-1,39,-128};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=BigInteger.ONE;  BigInteger result=aNumber.divide(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  private static final byte[] hash(final byte[] value) throws NoSuchAlgorithmException {  MessageDigest md=MessageDigest.getInstance("MD5");  md.reset();  md.update(value);  return md.digest();}  }
class C{  @Override public boolean supportsDataDefinitionAndDataManipulationTransactions(){  debugCodeCall("supportsDataDefinitionAndDataManipulationTransactions");  return false;}  }
class C{  public final void showToolButton(@NotNull IsWidget button){  if (button != null) {    toolbarHeader.setWidgetHidden(button.asWidget(),false);  }}  }
class C{  public Node item(int index){  ElemTemplateElement node=m_firstChild;  for (int i=0; i < index && node != null; i++) {    node=node.m_nextSibling;  }  return node;}  }
class C{  public boolean isCanceled(){  return name.get() == Canceled.name.get();}  }
class C{  private void saveUidValidity(long uidValidity) throws IOException {  File validityFile=new File(rootFolder,VALIDITY_FILE);  if (!validityFile.createNewFile())   throw new IOException("Could not create file " + validityFile);  FileOutputStream fos=new FileOutputStream(validityFile);  try {    fos.write(String.valueOf(uidValidity).getBytes());  }  finally {    IOUtils.closeQuietly(fos);  }}  }
class C{  public boolean reset(){  boolean wasReset=false;  if (super.reset()) {    wasReset=true;  }  return wasReset;}  }
class C{  public boolean save(String filename){  try {    mOutput=new FileOutputStream(filename);    byte[] output=new byte[BUFFER_SIZE];    while (mInput.available() > 0) {      int size=read(output);      if (size > 0) {        mOutput.write(output,0,size);      } else       break;    }    mInput.close();    mOutput.close();    return true;  } catch (  Exception e) {    e.printStackTrace();  }  try {    if (mInput != null)     mInput.close();    if (mOutput != null)     mOutput.close();  } catch (  IOException e) {    e.printStackTrace();  }  return false;}  }
class C{  @Override public boolean isSingleton(){  return true;}  }
class C{  public final void append(String s){  compoundID.append(s);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.TSTRUCT_GETTER__DEFINED_MEMBER:    setDefinedMember((TStructMember)null);  return;}super.eUnset(featureID);}  }
class C{  private void doSetRhythmDrawable(@Nullable RhythmDrawable drawable){  if (mRhythmDrawable != null) {    mRhythmDrawable.setCallback(null);  }  mRhythmDrawable=drawable;  if (mRhythmDrawable != null) {    mRhythmDrawable.setBounds(mBounds);    mRhythmDrawable.setCallback(this);  }}  }
class C{  protected AbstractSVGFilterPrimitiveElementBridge(){}  }
class C{  @Pointcut("within(@javax.persistence.Entity *) || " + "within(@javax.persistence.MappedSuperclass *) || " + "within(@javax.persistence.Embeddable *)") public void jpa(){}  }
class C{  public OMGrid(double lat,double lon,int x,int y,double vResolution,double hResolution,int[][] data){  setRenderType(RENDERTYPE_OFFSET);  set(lat,lon,x,y,vResolution,hResolution,data);}  }
class C{  @Override public int compareTo(SpatialObjectPair other){  return Double.compare(this.distance,other.distance);}  }
class C{  void checkLabel(final Label label,final boolean checkVisited,final String msg){  if (label == null) {    throw new IllegalArgumentException("Invalid " + msg + " (must not be null)");  }  if (checkVisited && labels.get(label) == null) {    throw new IllegalArgumentException("Invalid " + msg + " (must be visited first)");  }}  }
class C{  public MinecraftlyLogger(MinecraftlyCore core,Logger parentLogger) throws MissingResourceException {  super("Core " + parentLogger.getName(),parentLogger.getResourceBundleName());  this.core=core;  this.debug=new File(core.getMinecraftlyDataFolder(),".debugging").exists();  setParent(parentLogger);  setUseParentHandlers(true);}  }
class C{  public void cleanIndex(RowMutator mutator,DataObjectType doType,SoftReference<IndexCleanupList> listToCleanRef){  IndexCleanupList listToClean=listToCleanRef.get();  if (listToClean == null) {    _log.warn("clean up list for {} has been recycled by GC, skip it",doType.getClass().getName());    return;  }  Map<String,List<Column<CompositeColumnName>>> cleanList=listToClean.getColumnsToClean();  Iterator<Map.Entry<String,List<Column<CompositeColumnName>>>> entryIt=cleanList.entrySet().iterator();  Map<String,ColumnField> dependentFields=new HashMap<>();  while (entryIt.hasNext()) {    Map.Entry<String,List<Column<CompositeColumnName>>> entry=entryIt.next();    String rowKey=entry.getKey();    List<Column<CompositeColumnName>> cols=entry.getValue();    for (int i=0; i < cols.size(); i++) {      Column<CompositeColumnName> column=cols.get(i);      ColumnField field=doType.getColumnField(column.getName().getOne());      field.removeColumn(rowKey,column,mutator,listToClean.getAllColumns(rowKey));      for (      ColumnField depField : field.getDependentFields()) {        dependentFields.put(depField.getName(),depField);      }    }    for (    ColumnField depField : dependentFields.values()) {      depField.removeIndex(rowKey,null,mutator,listToClean.getAllColumns(rowKey),listToClean.getObject(rowKey));    }  }  removeIndexOfInactiveObjects(mutator,doType,(IndexCleanupList)listToClean,true);  mutator.executeIndexFirst();}  }
class C{  protected void onPrepareRequest(HttpUriRequest request) throws IOException {}  }
class C{  public String toString(){  return (super.toString() + "NameConstraints: [" + ((permitted == null) ? "" : ("\n    Permitted:" + permitted.toString()))+ ((excluded == null) ? "" : ("\n    Excluded:" + excluded.toString()))+ "   ]\n");}  }
class C{  public LRUCache(int initialSize,int maxSize){  this(initialSize,maxSize,1);}  }
class C{  public HarCapabilityContainerTest(String testName,EnvironmentTestData testData) throws Exception {  super(testName,testData);}  }
class C{  private final File locate(String name){  String prefix="";  File sourceFile=null;  int idx=0;  while (true) {    if ((idx == 0) && (ToolIO.getUserDir() != null)) {      sourceFile=new File(ToolIO.getUserDir(),name);    } else {      sourceFile=new File(prefix + name);    }    if (sourceFile.exists())     break;    if (idx >= libraryPathEntries.size())     break;    prefix=(String)libraryPathEntries.elementAt(idx++);  }  return sourceFile;}  }
class C{  public static void main(String args[]){  TimeResolution timeResolution=new TimeResolution();  timeResolution.measureTimer();  timeResolution.measureTimeFunctions(INCREMENT,MAX);  timeResolution.measureSleep();  timeResolution.measureWait();}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  try {    s.defaultReadObject();    this.queue=new Object[q.size()];    comparator=q.comparator();    addAll(q);  }  finally {    q=null;  }}  }
class C{  public Edge createEdge(BasicBlock source,BasicBlock dest,@Edge.Type int type){  Edge edge=createEdge(source,dest);  edge.setType(type);  return edge;}  }
class C{  private void initialize(){  this.setContentPane(getJPanel());  this.pack();}  }
class C{  public void translate(float x,float y,float z){  Matrix4f tmp=new Matrix4f();  tmp.loadTranslate(x,y,z);  multiply(tmp);}  }
class C{  public AdaptiveJobCountLoadProbe(){}  }
class C{  void primeFncName(Session s,int line){  primeAllFncNames(s);}  }
class C{  public static <V>boolean addDistinctEntry(List<V> sourceList,V entry){  return (sourceList != null && !sourceList.contains(entry)) ? sourceList.add(entry) : false;}  }
class C{  protected void initFromJar(File file){  JarFile jar;  JarEntry entry;  Enumeration<JarEntry> enm;  if (VERBOSE) {    System.out.println("Analyzing jar: " + file);  }  if (!file.exists()) {    System.out.println("Jar does not exist: " + file);    return;  }  try {    jar=new JarFile(file);    enm=jar.entries();    while (enm.hasMoreElements()) {      entry=enm.nextElement();      if (entry.getName().endsWith(".class")) {        add(entry.getName());      }    }    initFromManifest(jar.getManifest());  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public List<BakedQuad> build(@Nullable Consumer<UnpackedBakedQuad.Builder> quadConsumer){  List<BakedQuad> quads=new ArrayList<BakedQuad>(this.vertices.size() / 4);  if (this.vertices.size() % 4 != 0)   throw new RuntimeException("Invalid number of vertices");  for (int i=0; i < this.vertices.size(); i+=4) {    Vertex vert1=this.vertices.get(i);    Vertex vert2=this.vertices.get(i + 1);    Vertex vert3=this.vertices.get(i + 2);    Vertex vert4=this.vertices.get(i + 3);    quads.add(this.createQuad(this.format,vert1,vert2,vert3,vert4,quadConsumer));  }  this.vertices.clear();  return quads;}  }
class C{  public static SQLExceptionTranslator newJdbcExceptionTranslator(){  return new SQLStateSQLExceptionTranslator();}  }
class C{  public void onSaveInstanceState(Bundle outState){  outState.putBoolean("SlidingActivityHelper.open",mSlidingMenu.isMenuShowing());  outState.putBoolean("SlidingActivityHelper.secondary",mSlidingMenu.isSecondaryMenuShowing());}  }
class C{  public SymbolTableEntryInternal steFor_$fieldInit(){  return getSymbolTableEntryInternal("$fieldInit",true);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static Profile createFromCommandline(String[] args){  Profile profile=new Profile();  int i=0;  while (i != args.length) {    if (args[i].equals("-u")) {      profile.setUser(args[i + 1]);    } else     if (args[i].equals("-p")) {      profile.setPassword(args[i + 1]);    } else     if (args[i].equals("-c")) {      profile.setCharacter(args[i + 1]);    } else     if (args[i].equals("-h")) {      profile.setHost(args[i + 1]);    } else     if (args[i].equals("-P")) {      profile.setPort(Integer.parseInt(args[i + 1]));    } else     if (args[i].equals("-S")) {      profile.setSeed(args[i + 1]);    }    i++;  }  if (profile.getCharacter() == null) {    profile.setCharacter(profile.getUser());  }  return profile;}  }
class C{  public MainWindow(){  super("Main Window");  settings=new Settings();  update=new UpdateWindow();  blocksWindow=new BlockListWindow();  consoleLog=new GUIConsoleLog();  if (settings.getPreferences().getBoolean("OPEN_CONSOLE_ON_START",true)) {    consoleLog.setVisible(true);  }  export=new ExportWindow();  main=this;  setSize(1000,800);  setMinimumSize(new Dimension(400,400));  setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  setTitle("jMC2Obj");  setLocationRelativeTo(null);  panel=new MainPanel();  add(panel);  setVisible(true);}  }
class C{  public void findAndInit(Iterator<?> it){  while (it.hasNext()) {    findAndInit(it.next());  }}  }
class C{  boolean wantsFutureVariantBases(){  return mHaplotypeA.wantsFutureVariantBases() || mHaplotypeB.wantsFutureVariantBases();}  }
class C{  public PotentialProducer createPotentialProducer(final Object baseObject,final String methodName,final Class<?> dataType){  String description=getDescriptionString(baseObject,methodName,dataType);  return new PotentialProducer(parentComponent,baseObject,methodName,dataType,null,null,description);}  }
class C{  public Hashtable(){  this(11,0.75f);}  }
class C{  private void runRoutesDistance(final String runNr,final Scenario sc){  UserGroup ug=UserGroup.URBAN;  int lastIteration=sc.getConfig().controler().getLastIteration();  String eventsFile=sc.getConfig().controler().getOutputDirectory() + "/ITERS/it." + lastIteration+ "/"+ lastIteration+ ".events.xml.gz";  LegModeRouteDistanceDistributionAnalyzer lmdfed=new LegModeRouteDistanceDistributionAnalyzer();  lmdfed.init(sc,eventsFile);  lmdfed.preProcessData();  lmdfed.postProcessData();  new File(RUN_DIR + "/analysis/legModeDistributions/").mkdirs();  lmdfed.writeResults(RUN_DIR + "/analysis/legModeDistributions/" + runNr+ "_it."+ lastIteration+ "_");}  }
class C{  public List<String> findAvailableStrings(String uri) throws IOException {  _resourcesNotLoaded.clear();  String fulluri=_path + uri;  List<String> strings=new ArrayList<>();  Enumeration<URL> resources=getResources(fulluri);  while (resources.hasMoreElements()) {    URL url=resources.nextElement();    try {      String string=readContents(url);      strings.add(string);    } catch (    IOException notAvailable) {      _resourcesNotLoaded.add(url.toExternalForm());    }  }  return strings;}  }
class C{  public double computeInPlace(double... dataset){  checkArgument(dataset.length > 0,"Cannot calculate quantiles of an empty dataset");  if (containsNaN(dataset)) {    return NaN;  }  long numerator=(long)index * (dataset.length - 1);  int quotient=(int)LongMath.divide(numerator,scale,RoundingMode.DOWN);  int remainder=(int)(numerator - (long)quotient * scale);  selectInPlace(quotient,dataset,0,dataset.length - 1);  if (remainder == 0) {    return dataset[quotient];  } else {    selectInPlace(quotient + 1,dataset,quotient + 1,dataset.length - 1);    return interpolate(dataset[quotient],dataset[quotient + 1],remainder,scale);  }}  }
class C{  public Ellipse scale(double factor){  RotatedRect r=rect.clone();  r.size=new Size(factor * rect.size.width,factor * rect.size.height);  return new Ellipse(r);}  }
class C{  private static File waitForReportRunCompletion(Dfareporting reporting,long userProfileId,File file) throws Exception {  Integer interval;  for (int i=0; i <= MAX_POLLING_ATTEMPTS; i++) {    if (!file.getStatus().equals("PROCESSING")) {      break;    }    interval=(int)(POLL_TIME_INCREMENT * (Math.pow(1.6,i)));    System.out.printf("Polling again in %s ms.%n",interval);    Thread.sleep(interval);    file=reporting.reports().files().get(userProfileId,file.getReportId(),file.getId()).execute();  }  return file;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public AllocationSite(){  this(0,0);}  }
class C{  public synchronized boolean equals(Object o){  return super.equals(o);}  }
class C{  protected DateTimeConverter makeConverter(){  return new DateConverter();}  }
class C{  public final boolean skip(String str,CharSequence csq){  if (this.at(str,csq)) {    index+=str.length();    return true;  } else {    return false;  }}  }
class C{  @Override public ExpectedPartitionValuesInformation deleteExpectedPartitionValues(ExpectedPartitionValuesDeleteRequest expectedPartitionValuesDeleteRequest){  validateExpectedPartitionValuesDeleteRequest(expectedPartitionValuesDeleteRequest);  PartitionKeyGroupEntity partitionKeyGroupEntity=partitionKeyGroupDaoHelper.getPartitionKeyGroupEntity(expectedPartitionValuesDeleteRequest.getPartitionKeyGroupKey());  Map<String,ExpectedPartitionValueEntity> expectedPartitionValueEntityMap=getExpectedPartitionValueEntityMap(partitionKeyGroupEntity.getExpectedPartitionValues());  Collection<ExpectedPartitionValueEntity> deletedExpectedPartitionValueEntities=new ArrayList<>();  for (  String expectedPartitionValue : expectedPartitionValuesDeleteRequest.getExpectedPartitionValues()) {    ExpectedPartitionValueEntity expectedPartitionValueEntity=expectedPartitionValueEntityMap.get(expectedPartitionValue);    if (expectedPartitionValueEntity != null) {      deletedExpectedPartitionValueEntities.add(expectedPartitionValueEntity);    } else {      throw new ObjectNotFoundException(String.format("Expected partition value \"%s\" doesn't exist in \"%s\" partition key group.",expectedPartitionValue,partitionKeyGroupEntity.getPartitionKeyGroupName()));    }  }  for (  ExpectedPartitionValueEntity expectedPartitionValueEntity : deletedExpectedPartitionValueEntities) {    partitionKeyGroupEntity.getExpectedPartitionValues().remove(expectedPartitionValueEntity);  }  expectedPartitionValueDao.saveAndRefresh(partitionKeyGroupEntity);  return createExpectedPartitionValuesInformationFromEntities(partitionKeyGroupEntity,deletedExpectedPartitionValueEntities);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hasAttribute01.class,args);}  }
class C{  public void launch(){  final Activity parentActivity=ActivityDelegate.getActivityForTabId(mParentId);  mLaunchedId=ChromeLauncherActivity.launchDocumentInstance(parentActivity,mIsIncognito,mAsyncParams);  mLaunchTimestamp=SystemClock.elapsedRealtime();  run();}  }
class C{  final boolean unlink(Index<V> succ){  return !indexesDeletedNode() && casRight(succ,succ.right);}  }
class C{  public static LeafReader wrap(LeafReader reader,Sort sort) throws IOException {  return wrap(reader,new Sorter(sort).sort(reader));}  }
class C{  private static int fillPomsFromChildren(final Collection<ArtifactInformation> poms,final ArtifactInformation art,final Map<String,ArtifactInformation> artifacts){  int cnt=0;  for (  final String childId : art.getChildIds()) {    final ArtifactInformation child=artifacts.get(childId);    if (child != null) {      final String childName=child.getName();      if (isPomFileName(childName)) {        poms.add(child);        ++cnt;      }    }  }  return cnt;}  }
class C{  public AxisSpace(){  this.top=0.0;  this.bottom=0.0;  this.left=0.0;  this.right=0.0;}  }
class C{  public FontConverter(final Mapper mapper){  this.mapper=mapper;  if (mapper == null) {    textAttributeConverter=null;  } else {    textAttributeConverter=new TextAttributeConverter();  }}  }
class C{  public String typeName(){  return "long";}  }
class C{  public static void d(String tag,String s){  if (LOG.DEBUG >= LOGLEVEL)   Log.d(tag,s);}  }
class C{  public EdgeInfo(int start,int end,int cap){  this(start,end,cap,0);}  }
class C{  private boolean isSessionPaused(FileSharingSession session){  if (session == null) {    throw new ServerApiGenericException("Unable to check if transfer is paused since session with file transfer ID '" + mFileTransferId + "' not available!");  }  return session.isFileTransferPaused();}  }
class C{  private RawProtein processProtein(final RawProtein<PfamHmmer3RawMatch> rawProteinUnfiltered,final List<SeedAlignment> seedAlignments){  RawProtein<PfamHmmer3RawMatch> filteredMatches=new RawProtein<PfamHmmer3RawMatch>(rawProteinUnfiltered.getProteinIdentifier());  final Set<PfamHmmer3RawMatch> seedMatches=new HashSet<PfamHmmer3RawMatch>();  if (seedAlignments != null) {    for (    final SeedAlignment seedAlignment : seedAlignments) {      for (      final PfamHmmer3RawMatch candidateMatch : rawProteinUnfiltered.getMatches()) {        if (!seedMatches.contains(candidateMatch)) {          if (seedAlignment.getModelAccession().equals(candidateMatch.getModelId()) && seedAlignment.getAlignmentStart() <= candidateMatch.getLocationStart() && seedAlignment.getAlignmentEnd() >= candidateMatch.getLocationEnd()) {            filteredMatches.addMatch(candidateMatch);            seedMatches.add(candidateMatch);          }        }      }    }  }  final Set<PfamHmmer3RawMatch> unfilteredByEvalue=new TreeSet<PfamHmmer3RawMatch>(rawProteinUnfiltered.getMatches());  for (  final RawMatch rawMatch : unfilteredByEvalue) {    final PfamHmmer3RawMatch candidateMatch=(PfamHmmer3RawMatch)rawMatch;    if (!seedMatches.contains(candidateMatch)) {      final PfamClan candidateMatchClan=clanData.getClanByModelAccession(candidateMatch.getModelId());      boolean passes=true;      if (candidateMatchClan != null) {        for (        final PfamHmmer3RawMatch match : filteredMatches.getMatches()) {          final PfamClan passedMatchClan=clanData.getClanByModelAccession(match.getModelId());          if (candidateMatchClan.equals(passedMatchClan)) {            if (matchesOverlap(candidateMatch,match)) {              if (!matchesAreNested(candidateMatch,match)) {                passes=false;                break;              }            }          }        }      }      if (passes) {        filteredMatches.addMatch(candidateMatch);      }    }  }  return filteredMatches;}  }
class C{  @Override public void execute(MetricTimeSeries timeSeries,FunctionValueMap functionValueMap){  if (timeSeries.size() <= 0) {    functionValueMap.add(this,Double.NaN);    return;  }  double[] values=timeSeries.getValuesAsArray();  double min=values[0];  double max=values[0];  for (int i=1; i < values.length; i++) {    double current=values[i];    if (current < min) {      min=current;    }    if (current > max) {      max=current;    }  }  functionValueMap.add(this,Math.abs(max - min));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public ImpliedCovTable(SemImWrapper wrapper,boolean measured,boolean correlations){  this.wrapper=wrapper;  this.measured=measured;  this.correlations=correlations;  this.nf=NumberFormatUtil.getInstance().getNumberFormat();  if (measured() && covariances()) {    matrix=getSemIm().getImplCovarMeas().toArray();  } else   if (measured() && !covariances()) {    matrix=corr(getSemIm().getImplCovarMeas().toArray());  } else   if (!measured() && covariances()) {    TetradMatrix implCovarC=getSemIm().getImplCovar(false);    matrix=implCovarC.toArray();  } else   if (!measured() && !covariances()) {    TetradMatrix implCovarC=getSemIm().getImplCovar(false);    matrix=corr(implCovarC.toArray());  }}  }
class C{  public Graphics create(){  return new PSPathGraphics((Graphics2D)getDelegate().create(),getPrinterJob(),getPrintable(),getPageFormat(),getPageIndex(),canDoRedraws());}  }
class C{  public static DeterministicKey deriveThisOrNextChildKey(DeterministicKey parent,int childNumber){  int nAttempts=0;  ChildNumber child=new ChildNumber(childNumber);  boolean isHardened=child.isHardened();  while (nAttempts < MAX_CHILD_DERIVATION_ATTEMPTS) {    try {      child=new ChildNumber(child.num() + nAttempts,isHardened);      return deriveChildKey(parent,child);    } catch (    HDDerivationException ignore) {    }    nAttempts++;  }  throw new HDDerivationException("Maximum number of child derivation attempts reached, this is probably an indication of a bug.");}  }
class C{  public LR1State merge(LR1State state){  HashSet<LR1Item> items=new HashSet<LR1Item>();  for (  LR1Item item1 : this.items) {    LR1Item newItem=item1;    LR1Item item2=state.getItemByLR0Kernel(item1.getLR0Kernel());    newItem=newItem.merge(item2);    items.add(newItem);  }  return new LR1State(items);}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:15.039 -0500",hash_original_method="5474E95C495E2BDEA7848B2F1051B5AB",hash_generated_method="1FFFECB7616C84868E8040908FCDEBA5") @Deprecated public BitmapDrawable(java.io.InputStream is){  this(new BitmapState(BitmapFactory.decodeStream(is)),null);  if (mBitmap == null) {    android.util.Log.w("BitmapDrawable","BitmapDrawable cannot decode " + is);  }}  }
class C{  public static <T>String toString(Class<T> cls,T obj,String name0,Object val0,String name1,Object val1,String name2,Object val2){  assert cls != null;  assert obj != null;  assert name0 != null;  assert name1 != null;  assert name2 != null;  Queue<GridToStringThreadLocal> queue=threadCache.get();  assert queue != null;  GridToStringThreadLocal tmp=queue.isEmpty() ? new GridToStringThreadLocal() : queue.remove();  Object[] addNames=tmp.getAdditionalNames();  Object[] addVals=tmp.getAdditionalValues();  addNames[0]=name0;  addVals[0]=val0;  addNames[1]=name1;  addVals[1]=val1;  addNames[2]=name2;  addVals[2]=val2;  try {    return toStringImpl(cls,tmp.getStringBuilder(),obj,addNames,addVals,3);  }  finally {    queue.offer(tmp);  }}  }
class C{  public AsyncHttpClient(boolean fixNoHttpResponseException,int httpPort,int httpsPort){  this(getDefaultSchemeRegistry(fixNoHttpResponseException,httpPort,httpsPort));}  }
class C{  private void extractExtensionHeader(byte[] data,int length,int dataId,RtpPacket packet){  byte[] extensionHeaderData=new byte[length * 4];  System.arraycopy(data,++dataId,extensionHeaderData,0,extensionHeaderData.length);  packet.extensionHeader=new RtpExtensionHeader();  int i=0;  while (packet.extensionHeader.elementsCount() < length) {    byte idAndLength=extensionHeaderData[i];    if (idAndLength == 0x00) {      i=i + 1;      continue;    }    int elementId=(idAndLength & 0xf0) >>> 4;    if (elementId > 0 && elementId < 15) {      int elementLength=(idAndLength & 0x0f);      byte[] elementData=new byte[elementLength + 1];      System.arraycopy(extensionHeaderData,i + 1,elementData,0,elementData.length);      packet.extensionHeader.addElement(elementId,elementData);      i=i + elementData.length + 1;    } else {      break;    }  }}  }
class C{  public static void showConfirmDialog(Context ctx,String message,DialogInterface.OnClickListener yesListener,DialogInterface.OnClickListener noListener){  showConfirmDialog(ctx,message,yesListener,noListener,android.R.string.yes,android.R.string.no);}  }
class C{  public TelefoneTextWatcher(EventoDeValidacao callbackErros){  setEventoDeValidacao(callbackErros);}  }
class C{  public RenameResourceProcessor(IResource resource){  if (resource == null || !resource.exists()) {    throw new IllegalArgumentException("resource must not be null and must exist");  }  fResource=resource;  fRenameArguments=null;  fUpdateReferences=true;  setNewResourceName(resource.getName());}  }
class C{  @Override public void perform(){  PyObject[] pyInputs=new PyObject[inputSockets.size()];  for (int i=0; i < inputSockets.size(); i++) {    pyInputs[i]=Py.java2py(inputSockets.get(i).getValue().get());  }  try {    PyObject pyOutput=this.scriptFile.performFunction().__call__(pyInputs);    if (pyOutput.isSequenceType()) {      PySequence pySequence=(PySequence)pyOutput;      Object[] javaOutputs=Py.tojava(pySequence,Object[].class);      if (outputSockets.size() != javaOutputs.length) {        throw new IllegalArgumentException(wrongNumberOfArgumentsMsg(outputSockets.size(),javaOutputs.length));      }      for (int i=0; i < javaOutputs.length; i++) {        outputSockets.get(i).setValue(javaOutputs[i]);      }    } else {      if (outputSockets.size() != 1) {        throw new IllegalArgumentException(wrongNumberOfArgumentsMsg(outputSockets.size(),1));      }      Object javaOutput=Py.tojava(pyOutput,outputSockets.get(0).getSocketHint().getType());      outputSockets.get(0).setValue(javaOutput);    }  } catch (  RuntimeException e) {    logger.log(Level.WARNING,e.getMessage(),e);  }}  }
class C{  public ConnectionConsumer createConnectionConsumer(Connection connection,Destination destination,ServerSessionPool ssp) throws JMSException {  return connection.createConnectionConsumer(destination,null,ssp,1);}  }
class C{  public static double[][] covarianceMatrix(double[][] data1,double[][] data2,int delay){  if (delay > 0) {    double[][] data1Trimmed=new double[data1.length - delay][];    double[][] data2Trimmed=new double[data2.length - delay][];    for (int x=0; x < data1.length - delay; x++) {      data1Trimmed[x]=data1[x];      data2Trimmed[x]=data2[x + delay];    }    data1=data1Trimmed;    data2=data2Trimmed;  }  int numVariables1=data1[0].length;  int numVariables2=data2[0].length;  int numVariables=numVariables1 + numVariables2;  double[][] covariances=new double[numVariables][numVariables];  double[] means1=new double[numVariables1];  double[] means2=new double[numVariables2];  for (int r=0; r < numVariables1; r++) {    means1[r]=mean(data1,r);  }  for (int r=0; r < numVariables2; r++) {    means2[r]=mean(data2,r);  }  for (int r=0; r < numVariables1; r++) {    for (int c=r; c < numVariables1; c++) {      covariances[r][c]=covarianceTwoColumns(data1,r,c,means1[r],means1[c]);      covariances[c][r]=covariances[r][c];    }    for (int c=0; c < numVariables2; c++) {      covariances[r][numVariables1 + c]=covarianceTwoColumns(data1,data2,r,c,means1[r],means2[c]);      covariances[numVariables1 + c][r]=covariances[r][numVariables1 + c];    }  }  for (int r=0; r < numVariables2; r++) {    for (int c=r; c < numVariables2; c++) {      covariances[numVariables1 + r][numVariables1 + c]=covarianceTwoColumns(data2,r,c,means2[r],means2[c]);      covariances[numVariables1 + c][numVariables1 + r]=covariances[numVariables1 + r][numVariables1 + c];    }  }  return covariances;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private static void quickSort1(char x[],int off,int len,CharComparator comp){  if (len < SMALL) {    for (int i=off; i < len + off; i++)     for (int j=i; j > off && comp.compare(x[j - 1],x[j]) > 0; j--)     swap(x,j,j - 1);    return;  }  int m=off + len / 2;  if (len > SMALL) {    int l=off;    int n=off + len - 1;    if (len > MEDIUM) {      int s=len / 8;      l=med3(x,l,l + s,l + 2 * s,comp);      m=med3(x,m - s,m,m + s,comp);      n=med3(x,n - 2 * s,n - s,n,comp);    }    m=med3(x,l,m,n,comp);  }  char v=x[m];  int a=off, b=a, c=off + len - 1, d=c;  while (true) {    int comparison;    while (b <= c && (comparison=comp.compare(x[b],v)) <= 0) {      if (comparison == 0)       swap(x,a++,b);      b++;    }    while (c >= b && (comparison=comp.compare(x[c],v)) >= 0) {      if (comparison == 0)       swap(x,c,d--);      c--;    }    if (b > c)     break;    swap(x,b++,c--);  }  int s, n=off + len;  s=Math.min(a - off,b - a);  vecswap(x,off,b - s,s);  s=Math.min(d - c,n - d - 1);  vecswap(x,b,n - s,s);  if ((s=b - a) > 1)   quickSort1(x,off,s,comp);  if ((s=d - c) > 1)   quickSort1(x,n - s,s,comp);}  }
class C{  public Sound(@Nonnull String path) throws NullPointerException {  this(FileUtil.findURL(path));}  }
class C{  public static boolean hasGwtFacet(IProject project){  boolean hasFacet=false;  try {    hasFacet=FacetedProjectFramework.hasProjectFacet(project,"com.gwtplugins.gwt.facet");  } catch (  CoreException e) {    CorePluginLog.logInfo("hasGetFacet: Error, can't figure GWT facet.",e);  }  return hasFacet;}  }
class C{  public Yytoken yylex() throws java.io.IOException, ParseException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  char[] zzBufferL=zzBuffer;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    yychar+=zzMarkedPosL - zzStartRead;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL[zzCurrentPosL++]; else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL[zzCurrentPosL++];          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 11:{        sb.append(yytext());      }case 25:    break;case 4:{    sb.delete(0,sb.length());    yybegin(STRING_BEGIN);  }case 26:break;case 16:{sb.append('\b');}case 27:break;case 6:{return new Yytoken(Yytoken.TYPE_RIGHT_BRACE,null);}case 28:break;case 23:{Boolean val=Boolean.valueOf(yytext());return new Yytoken(Yytoken.TYPE_VALUE,val);}case 29:break;case 22:{return new Yytoken(Yytoken.TYPE_VALUE,null);}case 30:break;case 13:{yybegin(YYINITIAL);return new Yytoken(Yytoken.TYPE_VALUE,sb.toString());}case 31:break;case 12:{sb.append('\\');}case 32:break;case 21:{Double val=Double.valueOf(yytext());return new Yytoken(Yytoken.TYPE_VALUE,val);}case 33:break;case 1:{throw new ParseException(yychar,ParseException.ERROR_UNEXPECTED_CHAR,new Character(yycharat(0)));}case 34:break;case 8:{return new Yytoken(Yytoken.TYPE_RIGHT_SQUARE,null);}case 35:break;case 19:{sb.append('\r');}case 36:break;case 15:{sb.append('/');}case 37:break;case 10:{return new Yytoken(Yytoken.TYPE_COLON,null);}case 38:break;case 14:{sb.append('"');}case 39:break;case 5:{return new Yytoken(Yytoken.TYPE_LEFT_BRACE,null);}case 40:break;case 17:{sb.append('\f');}case 41:break;case 24:{try {int ch=Integer.parseInt(yytext().substring(2),16);sb.append((char)ch);} catch (Exception e) {throw new ParseException(yychar,ParseException.ERROR_UNEXPECTED_EXCEPTION,e);}}case 42:break;case 20:{sb.append('\t');}case 43:break;case 7:{return new Yytoken(Yytoken.TYPE_LEFT_SQUARE,null);}case 44:break;case 2:{Long val=Long.valueOf(yytext());return new Yytoken(Yytoken.TYPE_VALUE,val);}case 45:break;case 18:{sb.append('\n');}case 46:break;case 9:{return new Yytoken(Yytoken.TYPE_COMMA,null);}case 47:break;case 3:{}case 48:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;return null;} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public void encode(OutputStream out) throws IOException {  DerOutputStream tmp=new DerOutputStream();  if (extensionValue == null) {    extensionId=PKIXExtensions.PolicyConstraints_Id;    critical=false;    encodeThis();  }  super.encode(tmp);  out.write(tmp.toByteArray());}  }
class C{  public static <T extends Comparable<? super T>>void introSort(T[] a,int fromIndex,int toIndex){  if (toIndex - fromIndex <= 1)   return;  introSort(a,fromIndex,toIndex,Comparator.naturalOrder());}  }
class C{  public void deleteLabel(Serializable projectId,GitlabLabel label) throws IOException {  deleteLabel(projectId,label.getName());}  }
class C{  private static CalendarEventEntry createSingleEvent(CalendarService service,String eventTitle,String eventContent) throws ServiceException, IOException {  return createEvent(service,eventTitle,eventContent,null,false,null);}  }
class C{  public void testParams() throws Exception {  ClassicSimilarity sim=getSimilarity("text_overlap",ClassicSimilarity.class);  assertEquals(false,sim.getDiscountOverlaps());}  }
class C{  public static void registerRecipes(){  registerRecipeClasses();  addCraftingRecipes();  addBrewingRecipes();}  }
class C{  public boolean taxApplies(){  GenericValue product=getProduct();  if (product != null) {    return ProductWorker.taxApplies(product);  } else {    return true;  }}  }
class C{  @Action(value="/receipts/challan-printChallan") public String printChallan(){  try {    reportId=collectionCommon.generateChallan(receiptHeader,true);  } catch (  final Exception e) {    LOGGER.error(CollectionConstants.REPORT_GENERATION_ERROR,e);    throw new ApplicationRuntimeException(CollectionConstants.REPORT_GENERATION_ERROR,e);  }  setSourcePage("viewChallan");  return CollectionConstants.REPORT;}  }
class C{  public void testIsMultiValued(){  SpellCheckedMetadata meta=new SpellCheckedMetadata();  assertFalse(meta.isMultiValued("key"));  meta.add("key","value1");  assertFalse(meta.isMultiValued("key"));  meta.add("key","value2");  assertTrue(meta.isMultiValued("key"));}  }
class C{  public InitializeLoginAction(){}  }
class C{  protected Instrument(Soundbank soundbank,Patch patch,String name,Class<?> dataClass){  super(soundbank,name,dataClass);  this.patch=patch;}  }
class C{  private static int putBytes(byte[] tgtBytes,int tgtOffset,byte[] srcBytes,int srcOffset,int srcLength){  System.arraycopy(srcBytes,srcOffset,tgtBytes,tgtOffset,srcLength);  return tgtOffset + srcLength;}  }
class C{  public HighlightTextView(Context context){  this(context,null);}  }
class C{  @Override public void trim(){}  }
class C{  public void reset(byte[] data){  pos=0;  mark=0;  buf=data;  count=data.length;}  }
class C{  public static <T,V>ObjectAnimator ofObject(T target,Property<T,V> property,TypeEvaluator<V> evaluator,V... values){  ObjectAnimator anim=new ObjectAnimator(target,property);  anim.setObjectValues(values);  anim.setEvaluator(evaluator);  return anim;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static int execUpdateGeo(final Context context,double latitude,double longitude,SelectedFiles selectedItems){  QueryParameter where=new QueryParameter();  setWhereSelectionPaths(where,selectedItems);  ContentValues values=new ContentValues(2);  values.put(SQL_COL_LAT,DirectoryFormatter.parseLatLon(latitude));  values.put(SQL_COL_LON,DirectoryFormatter.parseLatLon(longitude));  ContentResolver resolver=context.getContentResolver();  return resolver.update(SQL_TABLE_EXTERNAL_CONTENT_URI,values,where.toAndroidWhere(),where.toAndroidParameters());}  }
class C{  public void reset(){  windowedBlockStream.reset();}  }
class C{  @Override public Pair<OperandSize,String> generate(final ITranslationEnvironment environment,final long offset,final List<ReilInstruction> instructions) throws InternalTranslationException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  Preconditions.checkArgument(offset >= 0,"Error: Argument offset can't be less than 0");  final String connected=environment.getNextVariableString();  final String negated=environment.getNextVariableString();  instructions.add(ReilHelpers.createXor(offset,OperandSize.BYTE,Helpers.SIGN_FLAG,OperandSize.BYTE,Helpers.OVERFLOW_FLAG,OperandSize.BYTE,connected));  instructions.add(ReilHelpers.createXor(offset + 1,OperandSize.BYTE,connected,OperandSize.BYTE,"1",OperandSize.BYTE,negated));  return new Pair<OperandSize,String>(OperandSize.BYTE,negated);}  }
class C{  public boolean isFinished(){  return isCompleted() || isFailed() || isCanceled();}  }
class C{  private void drawBackground(){  final Rectangle rect=getClientArea();  cachedGC.setForeground(gradientStart);  cachedGC.setBackground(gradientEnd);  cachedGC.fillGradientRectangle(rect.x,rect.y,rect.width,rect.height / 2,true);  cachedGC.setForeground(gradientEnd);  cachedGC.setBackground(gradientStart);  cachedGC.fillGradientRectangle(rect.x,rect.height / 2,rect.width,rect.height / 2,true);}  }
class C{  public void read(final byte[] buf){  int numToRead=buf.length;  if ((position + numToRead) > buffer.length) {    numToRead=buffer.length - position;    System.arraycopy(buffer,position,buf,0,numToRead);    for (int i=numToRead; i < buf.length; i++) {      buf[i]=0;    }  } else {    System.arraycopy(buffer,position,buf,0,numToRead);  }  position+=numToRead;}  }
class C{  public QueryExecutionTimeoutException(String msg){  super(msg);}  }
class C{  private void displayInternalServerError(){  alertDialog=CommonDialogUtils.getAlertDialogWithOneButtonAndTitle(context,getResources().getString(R.string.title_head_connection_error),getResources().getString(R.string.error_internal_server),getResources().getString(R.string.button_ok),null);  alertDialog.show();}  }
class C{  public static void updateOrdering(SQLiteDatabase database,long originalPosition,long newPosition){  Log.d("ItemDAO","original: " + originalPosition + ", newPosition:"+ newPosition);  if (originalPosition > newPosition) {    database.execSQL(UPDATE_ORDER_MORE,new String[]{String.valueOf(newPosition),String.valueOf(originalPosition)});  } else {    database.execSQL(UPDATE_ORDER_LESS,new String[]{String.valueOf(originalPosition),String.valueOf(newPosition)});  }}  }
class C{  @Override public void onAdChanged(){  notifyDataSetChanged();}  }
class C{  public Socket createSocket(InetAddress host,int port) throws IOException {  Socket socket=createSocket();  connectSocket(socket,new InetSocketAddress(host,port));  return socket;}  }
class C{  static LogFile openExistingFileForWrite(String name) throws Exception {  File logfile=new File(name);  LogFile tf=new LogFile(logfile);  tf.openWrite();  return tf;}  }
class C{  public AgeGreaterThanCondition(final int age){  this.age=age;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:24.266 -0500",hash_original_method="542A19C49303D6524BE63DEB812200B5",hash_generated_method="433131C2E635F21E7867A70992F1749C") private ComparableTimSort(Object[] a){  this.a=a;  int len=a.length;  @SuppressWarnings({"unchecked","UnnecessaryLocalVariable"}) Object[] newArray=new Object[len < 2 * INITIAL_TMP_STORAGE_LENGTH ? len >>> 1 : INITIAL_TMP_STORAGE_LENGTH];  tmp=newArray;  int stackLen=(len < 120 ? 5 : len < 1542 ? 10 : len < 119151 ? 19 : 40);  runBase=new int[stackLen];  runLen=new int[stackLen];}  }
class C{  public static int compare(Date left,double right){  return compare(left.getTime() / 1000,DateTimeUtil.getInstance().toDateTime(right).getTime() / 1000);}  }
class C{  public final void removeGraphNode(SpaceEffGraphNode node){  if (node == _firstNode) {    if (node == _lastNode) {      _firstNode=_lastNode=null;    } else {      _firstNode=node.getNext();    }  } else   if (node == _lastNode) {    _lastNode=node.getPrev();  }  node.remove();  numberOfNodes--;}  }
class C{  public static <T>JSONProperty<T> fromJSONString(String jsonString,String selectAs){  return fromJSONFunction(JSONFunctions.json(jsonString),selectAs);}  }
class C{  public void addGroupChatComposingStatus(String chatId,boolean status){synchronized (getImsServiceSessionOperationLock()) {    mGroupChatComposingStatusToNotify.put(chatId,status);  }}  }
class C{  public String[] createCmds(ChromeRunnerRunOptions runConfiguration) throws IOException {  final ArrayList<String> commands=new ArrayList<>();  commands.add(nodeJsBinary.get().getBinaryAbsolutePath());  final String nodeOptions=System.getProperty(NODE_OPTIONS);  if (nodeOptions != null) {    for (    String nodeOption : nodeOptions.split(" ")) {      commands.add(nodeOption);    }  }  final StringBuilder elfData=getELFCode(runConfiguration.getInitModules(),runConfiguration.getExecModule(),runConfiguration.getExecutionData());  final File elf=createTempFileFor(elfData.toString());  commands.add(elf.getCanonicalPath());  return commands.toArray(new String[]{});}  }
class C{  public Matrix4x3d mulComponentWise(Matrix4x3dc other){  return mulComponentWise(other,this);}  }
class C{  public void testTypes() throws Exception {  try {    this.stmt.execute("DROP TABLE IF EXISTS typesRegressTest");    this.stmt.execute("CREATE TABLE typesRegressTest (varcharField VARCHAR(32), charField CHAR(2), enumField ENUM('1','2')," + "setField  SET('1','2','3'), tinyblobField TINYBLOB, mediumBlobField MEDIUMBLOB, longblobField LONGBLOB, blobField BLOB)");    this.rs=this.stmt.executeQuery("SELECT * from typesRegressTest");    ResultSetMetaData rsmd=this.rs.getMetaData();    int numCols=rsmd.getColumnCount();    for (int i=0; i < numCols; i++) {      String columnName=rsmd.getColumnName(i + 1);      String columnTypeName=rsmd.getColumnTypeName(i + 1);      System.out.println(columnName + " -> " + columnTypeName);    }  }  finally {    this.stmt.execute("DROP TABLE IF EXISTS typesRegressTest");  }}  }
class C{  public static boolean deleteFile(Context context,@NonNull final File file){  boolean success=file.delete();  if (!success && Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    DocumentFile document=getDocumentFile(context,file,false,false);    success=document != null && document.delete();  }  if (!success && Build.VERSION.SDK_INT == Build.VERSION_CODES.KITKAT) {    ContentResolver resolver=context.getContentResolver();    try {      Uri uri=null;      if (uri != null) {        resolver.delete(uri,null,null);      }      success=!file.exists();    } catch (    Exception e) {      Log.e(TAG,"Error when deleting file " + file.getAbsolutePath(),e);      return false;    }  }  if (success)   scanFile(context,new String[]{file.getPath()});  return success;}  }
class C{  public void displayInfoLine(String infoLine,int labelDesignator){  if (infoLineHolder != null) {    setLabel((infoLine != null && infoLine.length() > 0) ? infoLine : fudgeString,labelDesignator);  }}  }
class C{  public DependenceResult addMember(final BaseType parentType,final BaseType memberType){  Preconditions.checkNotNull(parentType,"IE02762: Parent type can not be null.");  Preconditions.checkNotNull(memberType,"IE02763: Member type can not be null.");  final Node memberTypeNode=Preconditions.checkNotNull(containedRelationMap.get(memberType),"Type node for member type must exist prior to adding a member.");  final Node parentNode=Preconditions.checkNotNull(containedRelationMap.get(parentType),"Type node for member parent must exist prior to adding a member");  if (willCreateCycle(parentType,memberType)) {    return new DependenceResult(false,ImmutableSet.<BaseType>of());  }  containedRelation.createEdge(memberTypeNode,parentNode);  final TypeSearch search=new TypeSearch(containedRelationMap.inverse());  search.start(containedRelation,containedRelationMap.get(parentType));  return new DependenceResult(true,search.getDependentTypes());}  }
class C{  int[] decodeStart(BitArray row) throws NotFoundException {  int endStart=skipWhiteSpace(row);  int[] startPattern=findGuardPattern(row,endStart,START_PATTERN);  this.narrowLineWidth=(startPattern[1] - startPattern[0]) >> 2;  validateQuietZone(row,startPattern[0]);  return startPattern;}  }
class C{  public static boolean contains(int[] array,int value){  return indexOf(array,value) != -1;}  }
class C{  public static double acosh(final double value){  if (!(value > 1.0)) {    if (ANTI_JIT_OPTIM_CRASH_ON_NAN) {      return value < 1.0 ? Double.NaN : value - 1.0;    } else {      return value == 1.0 ? 0.0 : Double.NaN;    }  }  double result;  if (value < ASINH_ACOSH_SQRT_ELISION_THRESHOLD) {    result=log(value + sqrt(value * value - 1.0));  } else {    result=LOG_2 + log(value);  }  return result;}  }
class C{  public void fireDataStatusEEvent(String AD_Message,String info,boolean isError){  m_mTable.fireDataStatusEEvent(AD_Message,info,isError);}  }
class C{  AttributeDefinition(TextAttributeSet attrs,int beginIndex,int endIndex){  this.attrs=attrs;  this.beginIndex=beginIndex;  this.endIndex=endIndex;}  }
class C{  public void consumeGreedy(String greedyToken){  if (greedyToken.length() < sval.length()) {    pushBack();    setStartPosition(getStartPosition() + greedyToken.length());    sval=sval.substring(greedyToken.length());  }}  }
class C{  public static int hexToDecimal(String hex) throws HexFormatException {  int decimalValue=0;  for (int i=0; i < hex.length(); i++) {    if (!((hex.charAt(i) >= '0' && hex.charAt(i) <= '9') || (hex.charAt(i) >= 'A' && hex.charAt(i) <= 'F')))     throw new HexFormatException(hex);    char hexChar=hex.charAt(i);    decimalValue=decimalValue * 16 + hexCharToDecimal(hexChar);  }  return decimalValue;}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, ChecksumException, FormatException {  return decode(image,null);}  }
class C{  public BackupFileSet listRawBackup(final boolean ignore){  BackupFileSet clusterBackupFiles=new BackupFileSet(this.quorumSize);  List<String> errorList=new ArrayList<>();  try {    List<BackupProcessor.BackupTask<List<BackupSetInfo>>> backupTasks=(new BackupProcessor(getHosts(),Arrays.asList(ports.get(2)),null)).process(new ListBackupCallable(),false);    Throwable result=null;    for (    BackupProcessor.BackupTask task : backupTasks) {      try {        List<BackupSetInfo> nodeBackupFileList=(List<BackupSetInfo>)task.getResponse().getFuture().get();        clusterBackupFiles.addAll(nodeBackupFileList,task.getRequest().getNode());        log.info("List backup on node({})success",task.getRequest().getHost());      } catch (      CancellationException e) {        log.warn("The task of listing backup on node({}) was canceled",task.getRequest().getHost(),e);      }catch (      InterruptedException e) {        log.error(String.format("List backup on node(%s:%d) failed",task.getRequest().getHost(),task.getRequest().getPort()),e);        result=((result == null) ? e : result);        errorList.add(task.getRequest().getNode());      }catch (      ExecutionException e) {        Throwable cause=e.getCause();        if (ignore) {          log.warn(String.format("List backup on node(%s:%d) failed.",task.getRequest().getHost(),task.getRequest().getPort()),cause);        } else {          log.error(String.format("List backup on node(%s:%d) failed.",task.getRequest().getHost(),task.getRequest().getPort()),cause);        }        result=((result == null) ? cause : result);        errorList.add(task.getRequest().getNode());      }    }    if (result != null) {      if (result instanceof Exception) {        throw (Exception)result;      } else {        throw new Exception(result);      }    }  } catch (  Exception e) {    Throwable cause=(e.getCause() == null ? e : e.getCause());    if (ignore) {      log.warn("List backup on nodes({}) failed, but ignore the errors",errorList.toString(),cause);    } else {      log.error("Exception when listing backups",e);      throw BackupException.fatals.failedToListBackup(errorList.toString(),cause);    }  }  return clusterBackupFiles;}  }
class C{  public CountingIdlingResource(String resourceName,boolean debugCounting){  if (TextUtils.isEmpty(resourceName)) {    throw new IllegalArgumentException("Resource name must not be empty or null");  }  this.resourceName=resourceName;  this.debugCounting=debugCounting;}  }
class C{  public ImageReuseInfo create(String thisSize){  ArrayList<String> list=new ArrayList<String>();  boolean canBeReused=false;  for (int i=0; i < mSizeList.length; i++) {    String size=mSizeList[i];    if (!canBeReused && thisSize.equals(size)) {      canBeReused=true;      continue;    }    if (canBeReused && !thisSize.equals(size)) {      list.add(size);    }  }  if (list.size() == 0) {    return new ImageReuseInfo(thisSize,null);  } else {    String[] sizeList=new String[list.size()];    list.toArray(sizeList);    return new ImageReuseInfo(thisSize,sizeList);  }}  }
class C{  public static void sync(Address address,int size){  SysCall.sysCall.sysSyncCache(address,size);}  }
class C{  public MonthDateFormat(Locale locale){  this(TimeZone.getDefault(),locale,1,true,false);}  }
class C{  public void testConnectorSecuritySettingsSSL_alias_not_defined(){  resetSecuritySystemProperties();  AuthenticationInfo authInfo=null;  try {    authInfo=SecurityHelper.loadAuthenticationInformation("test.ssl.alias.not.defined.security.properties",true,TUNGSTEN_APPLICATION_NAME.CONNECTOR);  } catch (  ServerRuntimeException e) {    assertTrue("There should not be any exception thrown",false);  }catch (  ConfigurationException e) {    assertFalse("That should not be this kind of Exception being thrown",true);  }  resetSecuritySystemProperties();}  }
class C{  public synchronized void add(double x,double y){  add(x,y,0d);}  }
class C{  public void fatalError(SAXParseException exception) throws SAXException {  throw exception;}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.asin(z));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void addMoreComponents(Container cnt,Component[] components,boolean areThereMore){  InfiniteScrollAdapter ia=(InfiniteScrollAdapter)cnt.getClientProperty("cn1$infinite");  ia.addMoreComponents(components,areThereMore);}  }
class C{  public static CCProgressTimer progress(CCTexture2D texture){  return new CCProgressTimer(texture);}  }
class C{  protected EntityMappingModelImpl(){  super();}  }
class C{  public MatchResult match(){  if (!matchSuccessful) {    throw new IllegalStateException();  }  return matcher.toMatchResult();}  }
class C{  @Override public void dispatch(IEvent event){  Class<? extends IEvent> eventType=event.getClass();  Discord4J.logger.debug("Dispatching event of type {}.",eventType.getSimpleName());  if (listenerMap.containsKey(eventType)) {    for (    IListener listener : listenerMap.get(eventType)) {      listener.receive(event);    }  }}  }
class C{  JComboBox createMouthComboBox(){  JComboBox cb=new JComboBox();  fillComboBox(cb);  cb.addActionListener(this);  return cb;}  }
class C{  public double leverageForRule(AprioriItemSet premise,AprioriItemSet consequence,int premiseCount,int consequenceCount){  double coverageForItemSet=(double)consequence.m_counter / (double)m_totalTransactions;  double expectedCoverageIfIndependent=((double)premiseCount / (double)m_totalTransactions) * ((double)consequenceCount / (double)m_totalTransactions);  double lev=coverageForItemSet - expectedCoverageIfIndependent;  return lev;}  }
class C{  public RdKNNNode(int capacity,boolean isLeaf){  super(capacity,isLeaf,RdKNNEntry.class);}  }
class C{  private void adaptGridViewHeight(){  if (gridView instanceof DividableGridView) {    ((DividableGridView)gridView).adaptHeightToChildren();  }}  }
class C{  protected void validateOnStatus(){  if (Command.STATUS.equals(getCommand())) {  }}  }
class C{  public Optional<Boolean> eagerCheck(){  return Optional.ofNullable(this.eagerCheck);}  }
class C{  public static NewPlaylistFragment newInstance(Song song){  NewPlaylistFragment fragment=new NewPlaylistFragment();  Bundle bundle=new Bundle();  bundle.putParcelable(KEY_SONG,song);  fragment.setArguments(bundle);  return fragment;}  }
class C{  @DSSink({DSSinkKind.LOG}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:19.771 -0500",hash_original_method="06AF2B97EC9C8BBE1303A237FE727449",hash_generated_method="103A7E1B02C228D1981B721CBC7DAC4C") public void updateCursor(View view,int left,int top,int right,int bottom){  checkFocus();synchronized (mH) {    if ((mServedView != view && (mServedView == null || !mServedView.checkInputConnectionProxy(view))) || mCurrentTextBoxAttribute == null || mCurMethod == null) {      return;    }    mTmpCursorRect.set(left,top,right,bottom);    if (!mCursorRect.equals(mTmpCursorRect)) {      if (DEBUG)       Log.d(TAG,"updateCursor");      try {        if (DEBUG)         Log.v(TAG,"CURSOR CHANGE: " + mCurMethod);        mCurMethod.updateCursor(mTmpCursorRect);        mCursorRect.set(mTmpCursorRect);      } catch (      RemoteException e) {        Log.w(TAG,"IME died: " + mCurId,e);      }    }  }}  }
