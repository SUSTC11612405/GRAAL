class C{  public String encode(){  if (this.isEmpty())   return "";  StringBuilder encoding=new StringBuilder();  ListIterator iterator=this.listIterator();  if (iterator.hasNext()) {    while (true) {      Object obj=iterator.next();      if (obj instanceof GenericObject) {        GenericObject gobj=(GenericObject)obj;        encoding.append(gobj.encode());      } else {        encoding.append(obj.toString());      }      if (iterator.hasNext())       encoding.append(Separators.SEMICOLON); else       break;    }  }  return encoding.toString();}  }
class C{  private boolean processAddConflict(CSN csn,Modification m){  if (csn.isOlderThan(getDeleteTime())) {    return false;  }  Attribute attribute=m.getAttribute();  AttributeBuilder builder=new AttributeBuilder(attribute);  AttributeType attrType=attribute.getAttributeDescription().getAttributeType();  for (  ByteString addVal : attribute) {    AttrValueHistorical valInfo=new AttrValueHistorical(addVal,attrType,csn,null);    AttrValueHistorical oldValInfo=valuesHist.get(valInfo);    if (oldValInfo == null) {      valuesHist.add(valInfo);    } else {      if (oldValInfo.isUpdate()) {        if (csn.isNewerThan(oldValInfo.getValueUpdateTime())) {          valuesHist.addOrReplace(valInfo);        }        builder.remove(addVal);      } else {        if (csn.isNewerThanOrEqualTo(oldValInfo.getValueDeleteTime())) {          valuesHist.addOrReplace(valInfo);        } else {          builder.remove(addVal);        }      }    }  }  Attribute attr=builder.toAttribute();  m.setAttribute(attr);  if (attr.isEmpty()) {    return false;  }  if (csn.isNewerThan(getLastUpdateTime())) {    lastUpdateTime=csn;  }  return true;}  }
class C{  static private String zeros(int n){  if (n < 1)   return "";  char[] buf=new char[n];  for (int i=0; i < n; i++) {    buf[i]='0';  }  return new String(buf);}  }
class C{  public void test_copyLjava_util_ListLjava_util_List(){  try {    Collections.copy(null,ll);    fail("Expected NullPointerException for null list first parameter");  } catch (  NullPointerException e) {  }  try {    Collections.copy(ll,null);    fail("Expected NullPointerException for null list second parameter");  } catch (  NullPointerException e) {  }  final int llSize=ll.size();  ll.set(25,null);  ArrayList al=new ArrayList();  Integer extraElement=new Integer(1);  Integer extraElement2=new Integer(2);  al.addAll(myReversedLinkedList);  al.add(extraElement);  al.add(extraElement2);  Collections.copy(al,ll);  for (int counter=0; counter < llSize; counter++) {    assertTrue("Elements do not match after copying collection",al.get(counter) == ll.get(counter));  }  assertTrue("Elements after copied elements affected by copy",extraElement == al.get(llSize) && extraElement2 == al.get(llSize + 1));  ArrayList ar1=new ArrayList();  ArrayList ar2=new ArrayList();  int i;  for (i=0; i < 5; i++) {    ar2.add(new Integer(i));  }  for (i=0; i < 10; i++) {    ar1.add(new Integer(i));  }  try {    Collections.copy(ar2,ar1);    fail("IndexOutOfBoundsException expected");  } catch (  IndexOutOfBoundsException e) {  }  Mock_ArrayList mal1=new Mock_ArrayList();  Mock_ArrayList mal2=new Mock_ArrayList();  for (i=0; i < 10; i++) {    mal1.add(new Integer(i));    mal2.add(new Integer(10 - i));  }  try {    Collections.copy(mal1,mal2);    fail("UnsupportedOperationException expected");  } catch (  UnsupportedOperationException e) {  }}  }
class C{  public JButton(String text,Icon icon){  setModel(new DefaultButtonModel());  init(text,icon);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(localName02.class,args);}  }
class C{  void installListeners(){  Window[] windows=getOwnedWindows();  for (  Window window : windows) {    if (window != null) {      window.removeWindowListener(this);      window.addWindowListener(this);    }  }}  }
class C{  public static JsonValue content(final Object object){  return json(object);}  }
class C{  public void addStringToTable(byte[] oldString,byte newString){  int length=oldString.length;  byte[] str=new byte[length + 1];  System.arraycopy(oldString,0,str,0,length);  str[length]=newString;  stringTable[tableIndex++]=str;  if (tableIndex == 511) {    bitsToGet=10;  } else   if (tableIndex == 1023) {    bitsToGet=11;  } else   if (tableIndex == 2047) {    bitsToGet=12;  }}  }
class C{  protected void login(AuthContext.IndexType type,String indexName,Principal principal,char[] password,Subject subject,Map envMap,String locale) throws AuthLoginException {  try {    loginStatus=AuthContext.Status.IN_PROGRESS;    String redirectUrl=null;    if ((type != null) && type.equals(AuthContext.IndexType.RESOURCE)) {      List result=Collections.EMPTY_LIST;      try {        result=PolicyDecisionUtils.doResourceIPEnvAuth(indexName,organizationName,envMap);      } catch (      PolicyException pe) {        authDebug.warning("AuthContextLocal.login() policy error " + "indexName=" + indexName,pe);        type=null;        indexName=null;      }      if (authDebug.messageEnabled()) {        authDebug.message("AuthContextLocal.login: policy decision=" + result);      }      if (result.size() == 2) {        type=(AuthContext.IndexType)result.get(0);        indexName=(String)result.get(1);      } else       if (result.size() == 1) {        redirectUrl=(String)result.get(0);        Set tmp=(Set)envMap.get(ISAuthConstants.GOTO_PARAM);        if ((tmp != null) && !tmp.isEmpty()) {          String gotoParam=(String)tmp.iterator().next();          if ((gotoParam != null) && (gotoParam.length() != 0)) {            if ((redirectUrl != null) && (redirectUrl.indexOf("?") != -1)) {              redirectUrl=redirectUrl + "&" + ISAuthConstants.GOTO_PARAM+ "="+ URLEncDec.encode(gotoParam);            } else {              redirectUrl=redirectUrl + "?" + ISAuthConstants.GOTO_PARAM+ "="+ URLEncDec.encode(gotoParam);            }          }        }        type=null;        indexName=null;      } else {        type=null;        indexName=null;      }    }    authDebug.message("calling AMLoginContext::exceuteLogin : ");    amlc.executeLogin(subject,type,indexName,locale,redirectUrl);    authDebug.message("after AMLoginContext::exceuteLogin : ");    if (amlc.getStatus() == LoginStatus.AUTH_SUCCESS) {      loginStatus=AuthContext.Status.SUCCESS;    } else     if (amlc.getStatus() == LoginStatus.AUTH_FAILED) {      loginStatus=AuthContext.Status.FAILED;    }    if (authDebug.messageEnabled()) {      authDebug.message("Status at the end of login() : " + loginStatus);    }  } catch (  AuthLoginException e) {    if (authDebug.messageEnabled()) {      authDebug.message("Exception in ac.login : " + e.toString());    }    throw e;  }}  }
class C{  public void notifyObjectChanged(String name,int type) throws RemoteException {  SMSNotificationManager.getInstance().objectChanged(name,type);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap attributes;  NodeList elementList;  Element element;  Attr attr;  Node newNode;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagNameNS("*","address");  element=(Element)elementList.item(0);  attributes=element.getAttributes();  attr=(Attr)attributes.getNamedItemNS("http://www.usa.com","domestic");  element=(Element)elementList.item(1);  attributes=element.getAttributes();{    boolean success=false;    try {      newNode=attributes.setNamedItemNS(attr);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INUSE_ATTRIBUTE_ERR);    }    assertTrue("namednodemapsetnameditemns06",success);  }}  }
class C{  public AMModelBase(HttpServletRequest req,String rbName,Map map){  mapUserInfo=map;  initialize(req,rbName);}  }
class C{  public StringBuffer(int capacity){  super(capacity);}  }
class C{  public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {  return super.newInstance(javaContentInterface);}  }
class C{  @DataProvider public Object[][] invalidFilters(){  return new Object[][]{{null},{"(cn)"},{"()"},{"("},{"(&(sn=test)"},{"(|(sn=test)"},{"(!(sn=test)"},{"(&(sn=test)))"},{"(|(sn=test)))"},{"(!(sn=test)))"},{"(sn=\\A)"},{"(sn=\\1H)"},{"(sn=\\H1)"},{"(!(sn=test)(cn=test))"},{"(!)"},{"(:dn:=Sally)"}};}  }
class C{  public synchronized Enumeration<K> keys(){  return this.<K>getEnumeration(KEYS);}  }
class C{  public static FontProgram createFont(String fontProgram) throws java.io.IOException {  return createFont(fontProgram,null,DEFAULT_CACHED);}  }
class C{  public StateInteractive key_typed(char p_key_char){  StateInteractive curr_return_state=this;  if (p_key_char == '+') {    rotate_90_degree(1);  } else   if (p_key_char == '*') {    rotate_90_degree(2);  } else   if (p_key_char == '-') {    rotate_90_degree(3);  } else   if (p_key_char == '/') {    change_placement_side();  } else   if (p_key_char == 'r') {    i_brd.itera_settings.set_zoom_with_wheel(false);  } else   if (p_key_char == 'z') {    i_brd.itera_settings.set_zoom_with_wheel(true);  } else {    curr_return_state=super.key_typed(p_key_char);  }  return curr_return_state;}  }
class C{  protected void initializeRequestContext(RequestContext requestContext){  super.initializeRequestContext(requestContext);  ViewBeanManager viewBeanManager=new ViewBeanManager(requestContext,PACKAGE_NAME);  ((RequestContextImpl)requestContext).setViewBeanManager(viewBeanManager);}  }
class C{  public boolean match(String requestedURL,Collection<String> patterns,boolean wildcard) throws MalformedURLException {  boolean result=false;  String patternLower;  for (  String pattern : patterns) {    patternLower=pattern.toLowerCase();    requestedURL=resourceName.canonicalize(requestedURL);    if (patternLower.startsWith("http")) {      pattern=resourceName.canonicalize(pattern);    }    if (DEBUG.messageEnabled()) {      DEBUG.message("URLPatternMatcher.match(" + requestedURL + "): matching by pattern: "+ pattern);    }    ResourceMatch res=resourceName.compare(requestedURL,pattern,wildcard);    if (res == ResourceMatch.WILDCARD_MATCH || res == ResourceMatch.EXACT_MATCH) {      if (DEBUG.messageEnabled()) {        DEBUG.message("URLPatternMatcher.match(" + requestedURL + "): matched by pattern: "+ pattern+ " result = "+ res);      }      result=true;      break;    }  }  return result;}  }
class C{  public String wrapIfKeywordOrBuiltIn(String name){  if (KEYWORD_BUILT_IN_SET.contains(name)) {    return name + "_";  }  return name;}  }
class C{  public boolean accept(File file){  return true;}  }
class C{  private ScheduleType createSchedule(){  ScheduleType schedule;  Object type=((CategorizedComboBoxElement)scheduleType.getSelectedItem()).getValue();  if (type == LAUNCH_NOW) {    schedule=ScheduleType.createLaunchNow();  } else   if (type == LAUNCH_LATER) {    int y=Integer.parseInt(year.getSelectedItem().toString());    int d=Integer.parseInt(day.getText().trim());    int m=month.getSelectedIndex();    String sTime=time.getText().trim();    int index=sTime.indexOf(':');    int h=Integer.parseInt(sTime.substring(0,index).trim());    int min=Integer.parseInt(sTime.substring(index + 1).trim());    GregorianCalendar calendar=new GregorianCalendar(y,m,d,h,min);    schedule=ScheduleType.createLaunchLater(calendar.getTime());  } else   if (type == LAUNCH_DAILY) {    String sTime=dailyTime.getText().trim();    int index=sTime.indexOf(':');    int h=Integer.parseInt(sTime.substring(0,index).trim());    int m=Integer.parseInt(sTime.substring(index + 1).trim());    String cron=m + " " + h+ " * * *";    schedule=ScheduleType.createCron(cron);  } else   if (type == LAUNCH_WEEKLY) {    String sTime=weeklyTime.getText().trim();    int index=sTime.indexOf(':');    int h=Integer.parseInt(sTime.substring(0,index).trim());    int m=Integer.parseInt(sTime.substring(index + 1).trim());    StringBuilder sb=new StringBuilder();    sb.append(m).append(" ").append(h).append(" * * ");    boolean oneDayAdded=false;    for (int i=0; i < weekDays.length; i++) {      if (weekDays[i].isSelected()) {        if (oneDayAdded) {          sb.append(',');        }        sb.append(i);        oneDayAdded=true;      }    }    schedule=ScheduleType.createCron(sb.toString());  } else   if (type == LAUNCH_MONTHLY) {    String sTime=monthlyTime.getText().trim();    int index=sTime.indexOf(':');    int h=Integer.parseInt(sTime.substring(0,index).trim());    int m=Integer.parseInt(sTime.substring(index + 1).trim());    StringBuilder sb=new StringBuilder();    sb.append(m).append(" ").append(h).append(" ");    boolean oneDayAdded=false;    for (int i=0; i < monthDays.length; i++) {      if (monthDays[i].isSelected()) {        if (oneDayAdded) {          sb.append(',');        }        sb.append(i + 1);        oneDayAdded=true;      }    }    sb.append(" * *");    schedule=ScheduleType.createCron(sb.toString());  } else   if (type == CRON) {    String cron=cronMinute.getText().trim() + " " + cronHour.getText().trim()+ " "+ cronMonthDay.getText().trim()+ " "+ cronMonth.getText().trim()+ " "+ cronWeekDay.getText().trim();    schedule=ScheduleType.createCron(cron);  } else {    throw new RuntimeException("Unknown schedule type: " + type);  }  return schedule;}  }
class C{  public void reset(){  currentContext=new Context2(null);  currentContext.declarePrefix("xml",XMLNS);}  }
class C{  public BindOperation processSASLBind(ByteString rawBindDN,String saslMechanism,ByteString saslCredentials){  return processSASLBind(rawBindDN,saslMechanism,saslCredentials,null);}  }
class C{  private static boolean areAttributesEquivalent(Collection<String> attributes1,Collection<String> attributes2) throws ConfigException {  if (attributes1.size() != attributes2.size()) {    return false;  }  Schema schema=DirectoryServer.getSchema();  for (  String attrName1 : attributes1) {    AttributeType attributeType1=schema.getAttributeType(attrName1);    if (attributeType1.isPlaceHolder()) {      throw new ConfigException(NOTE_ERR_FRACTIONAL_CONFIG_UNKNOWN_ATTRIBUTE_TYPE.get(attrName1));    }    boolean foundAttribute=false;    for (    String attrName2 : attributes2) {      AttributeType attributeType2=schema.getAttributeType(attrName2);      if (attributeType2.isPlaceHolder()) {        throw new ConfigException(NOTE_ERR_FRACTIONAL_CONFIG_UNKNOWN_ATTRIBUTE_TYPE.get(attrName2));      }      if (attributeType1.equals(attributeType2)) {        foundAttribute=true;        break;      }    }    if (!foundAttribute) {      return false;    }  }  return true;}  }
class C{  public static String longToString(long v,int radix){  int i=(int)v;  if (i == v) {    return intToString(i,radix);  }  if (radix < Character.MIN_RADIX || radix > Character.MAX_RADIX) {    radix=10;  }  if (radix == 10) {    return longToString(v);  }  boolean negative=false;  if (v < 0) {    negative=true;  } else {    v=-v;  }  int bufLen=radix < 8 ? 65 : 23;  char[] buf=new char[bufLen];  int cursor=bufLen;  do {    long q=v / radix;    buf[--cursor]=DIGITS[(int)(radix * q - v)];    v=q;  } while (v != 0);  if (negative) {    buf[--cursor]='-';  }  return new String(cursor,bufLen - cursor,buf);}  }
class C{  public boolean pop_snapshot(){  disable_redo();  if (stack_level == 0)   return false;  Iterator<UndoObjectNode> it=objects_map.values().iterator();  while (it.hasNext()) {    UndoObjectNode curr_node=it.next();    if (curr_node.undo_level == stack_level - 1) {      if (curr_node.redo_object != null && curr_node.redo_object.undo_level == stack_level) {        curr_node.redo_object.undo_object=curr_node.undo_object;        if (curr_node.undo_object != null) {          curr_node.undo_object.redo_object=curr_node.redo_object;        }      }    } else     if (curr_node.undo_level >= stack_level) {      --curr_node.undo_level;    }  }  int deleted_objects_stack_size=deleted_objects_stack.size();  if (deleted_objects_stack_size >= 2) {    Collection<UndoObjectNode> from_delete_list=deleted_objects_stack.elementAt(deleted_objects_stack_size - 1);    Collection<UndoObjectNode> to_delete_list=deleted_objects_stack.elementAt(deleted_objects_stack_size - 2);    for (    UndoObjectNode curr_deleted_node : from_delete_list) {      if (curr_deleted_node.undo_level < stack_level - 1) {        to_delete_list.add(curr_deleted_node);      } else       if (curr_deleted_node.undo_object != null) {        to_delete_list.add(curr_deleted_node.undo_object);      }    }  }  deleted_objects_stack.remove(deleted_objects_stack_size - 1);  --stack_level;  return true;}  }
class C{  public static String encodeX(byte[] a){  if (a == null || a.length == 0) {    return "X''";  }  int outLen=a.length * 2 + 3;  StringBuffer out=new StringBuffer(outLen);  out.append('X');  out.append('\'');  for (int i=0; i < a.length; i++) {    out.append(xdigits[(a[i] >> 4) & 0x0F]);    out.append(xdigits[a[i] & 0x0F]);  }  out.append('\'');  return out.toString();}  }
class C{  public void clear(){synchronized (map) {synchronized (nextTurn[containerNeeded - 1]) {      for (int i=(containerNeeded - 1); i >= 0; i--) {        nextTurn[i].clear();      }synchronized (thisTurn) {        thisTurn.clear();      }    }    map.clear();  }}  }
class C{  public PluginResult.PreOperation invokePreOperationComparePlugins(PreOperationCompareOperation compareOperation) throws CanceledOperationException {  PluginResult.PreOperation result=null;  for (int i=0; i < preOperationComparePlugins.length; i++) {    DirectoryServerPlugin p=preOperationComparePlugins[i];    if (isInternalOperation(compareOperation,p)) {      continue;    }    try {      result=p.doPreOperation(compareOperation);    } catch (    CanceledOperationException coe) {      throw coe;    }catch (    Exception e) {      return handlePreOperationException(e,i,preOperationComparePlugins,compareOperation,p);    }    if (result == null) {      return handlePreOperationResult(compareOperation,i,preOperationComparePlugins,p);    } else     if (!result.continuePluginProcessing()) {      return result;    }  }  if (result == null) {    result=PluginResult.PreOperation.continueOperationProcessing();  }  return result;}  }
class C{  public DiskFileItemFactory(int sizeThreshold,File repository){  this.sizeThreshold=sizeThreshold;  this.repository=repository;}  }
class C{  public int compare(Object o1,Object o2){  String s1=(String)o1;  String s2=(String)o2;  if (s1.contains(Constants.COLON) && s2.contains(Constants.COLON)) {    int s1v=Integer.parseInt(s1.substring(0,s1.indexOf(Constants.COLON)));    int s2v=Integer.parseInt(s2.substring(0,s2.indexOf(Constants.COLON)));    if (s1v < s2v) {      return 1;    } else {      return -1;    }  } else   if (s1.contains(Constants.COLON)) {    return 1;  } else   if (s2.contains(Constants.COLON)) {    return -1;  }  return -1;}  }
class C{  public static boolean decodeToFile(String dataToDecode,String filename){  boolean success=false;  Base64.OutputStream bos=null;  try {    bos=new Base64.OutputStream(new java.io.FileOutputStream(filename),Base64.DECODE);    bos.write(dataToDecode.getBytes(PREFERRED_ENCODING));    success=true;  } catch (  java.io.IOException e) {    success=false;  } finally {    try {      bos.close();    } catch (    Exception e) {    }  }  return success;}  }
class C{  protected final void print_shape_info(ObjectInfoPanel p_window,java.util.Locale p_locale){  java.util.ResourceBundle resources=java.util.ResourceBundle.getBundle("board.resources.ObjectInfoPanel",p_locale);  p_window.append(" " + resources.getString("at") + " ");  freert.planar.PlaPointFloat center=get_area().get_border().centre_of_gravity();  p_window.append(center);  Integer hole_count=relative_area.get_holes().length;  if (hole_count > 0) {    p_window.append(" " + resources.getString("with") + " ");    java.text.NumberFormat nf=java.text.NumberFormat.getInstance(p_locale);    p_window.append(nf.format(hole_count));    if (hole_count == 1) {      p_window.append(" " + resources.getString("hole"));    } else {      p_window.append(" " + resources.getString("holes"));    }  }  p_window.append(" " + resources.getString("on_layer") + " ");  p_window.append(r_board.layer_structure.get_name(get_layer()));}  }
class C{  StartMsg(short protocolVersion,long generationId){  this.protocolVersion=protocolVersion;  this.generationId=generationId;}  }
class C{  private void addMenuItems(JMenu menu){  Locale locale=getRootPane().getLocale();  JMenuItem mi=menu.add(restoreAction);  int mnemonic=MetalUtils.getInt("MetalTitlePane.restoreMnemonic",-1);  if (mnemonic != -1) {    mi.setMnemonic(mnemonic);  }  mi=menu.add(iconifyAction);  mnemonic=MetalUtils.getInt("MetalTitlePane.iconifyMnemonic",-1);  if (mnemonic != -1) {    mi.setMnemonic(mnemonic);  }  if (Toolkit.getDefaultToolkit().isFrameStateSupported(Frame.MAXIMIZED_BOTH)) {    mi=menu.add(maximizeAction);    mnemonic=MetalUtils.getInt("MetalTitlePane.maximizeMnemonic",-1);    if (mnemonic != -1) {      mi.setMnemonic(mnemonic);    }  }  menu.add(new JSeparator());  mi=menu.add(closeAction);  mnemonic=MetalUtils.getInt("MetalTitlePane.closeMnemonic",-1);  if (mnemonic != -1) {    mi.setMnemonic(mnemonic);  }}  }
class C{  private Collections2(){}  }
class C{  public Condition createCondition(String xml) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.CONDITION,xml);  if (obj == null) {    return new ConditionImpl(xml);  } else {    return (Condition)obj;  }}  }
class C{  public static ImageData createGifFrame(URL url,int frame){  byte[] imageType=readImageType(url);  if (imageTypeIs(imageType,gif)) {    GifImageData image=new GifImageData(url);    GifImageHelper.processImage(image,frame - 1);    return image.getFrames().get(frame - 1);  }  throw new IllegalArgumentException("GIF image expected.");}  }
class C{  public static RunStats delegateGetBucketForGreekAndEnglishString(int buckets) throws Exception {  Long startTime=System.currentTimeMillis();  PrimaryIndexBucketGeneratorImpl ibg=new PrimaryIndexBucketGeneratorImpl(FieldDataType.TEXT,buckets);  PrimaryIndexBucketLocatorImpl locator=new PrimaryIndexBucketLocatorImpl(ibg.generateBuckets(),null,null,null,null,null,null,null,null);  logger.debug("test to getBucket for the bucket distribution on English and Greek Strings");  String fileEnglish="/MostCommon20kEnglishWords.txt";  String fileGreek="/MostCommon10kGreekWords.txt";  String greekFile=Utils.readFile(fileGreek);  String[] greekLines=greekFile.split("\n");  String englishFile=Utils.readFile(fileEnglish);  String[] englishLines=englishFile.split("\n");  try {    HashMap<Long,List<Object>> hm=new HashMap<>();    SummaryStatistics stats=new SummaryStatistics();    for (    String line : englishLines) {      line=line.trim();      Long bucketId=locator.getBucket(line,FieldDataType.TEXT);      calculate(hm,stats,bucketId,line);    }    for (    String line : greekLines) {      line=line.trim();      Long bucketId=locator.getBucket(line,FieldDataType.TEXT);      calculate(hm,stats,bucketId,line);    }    Long runTime=System.currentTimeMillis() - startTime;    RunStats runStats=new RunStats("BucketForStrings",FieldDataType.TEXT,runTime,stats,hm);    logger.debug(runStats.toString());    return runStats;  } catch (  Exception e) {    logger.debug(e.toString(),e);    throw e;  }}  }
class C{  public Observable<Void> saveStoreObservable(Store store){  io.vertx.rx.java.ObservableFuture<Void> resultHandler=io.vertx.rx.java.RxHelper.observableFuture();  saveStore(store,resultHandler.toHandler());  return resultHandler;}  }
class C{  public static byte[] decode(String encodedData) throws ParseException {  ifNull(encodedData);  int length=encodedData.length();  if (length % 4 != 0) {    LocalizableMessage message=ERR_BASE64_DECODE_INVALID_LENGTH.get(encodedData);    throw new ParseException(message.toString(),0);  }  ByteBuffer buffer=ByteBuffer.allocate(length);  for (int i=0; i < length; i+=4) {    boolean append=true;    int value=0;    for (int j=0; j < 4; j++) {switch (encodedData.charAt(i + j)) {case 'A':        value<<=6;      break;case 'B':    value=(value << 6) | 0x01;  break;case 'C':value=(value << 6) | 0x02;break;case 'D':value=(value << 6) | 0x03;break;case 'E':value=(value << 6) | 0x04;break;case 'F':value=(value << 6) | 0x05;break;case 'G':value=(value << 6) | 0x06;break;case 'H':value=(value << 6) | 0x07;break;case 'I':value=(value << 6) | 0x08;break;case 'J':value=(value << 6) | 0x09;break;case 'K':value=(value << 6) | 0x0A;break;case 'L':value=(value << 6) | 0x0B;break;case 'M':value=(value << 6) | 0x0C;break;case 'N':value=(value << 6) | 0x0D;break;case 'O':value=(value << 6) | 0x0E;break;case 'P':value=(value << 6) | 0x0F;break;case 'Q':value=(value << 6) | 0x10;break;case 'R':value=(value << 6) | 0x11;break;case 'S':value=(value << 6) | 0x12;break;case 'T':value=(value << 6) | 0x13;break;case 'U':value=(value << 6) | 0x14;break;case 'V':value=(value << 6) | 0x15;break;case 'W':value=(value << 6) | 0x16;break;case 'X':value=(value << 6) | 0x17;break;case 'Y':value=(value << 6) | 0x18;break;case 'Z':value=(value << 6) | 0x19;break;case 'a':value=(value << 6) | 0x1A;break;case 'b':value=(value << 6) | 0x1B;break;case 'c':value=(value << 6) | 0x1C;break;case 'd':value=(value << 6) | 0x1D;break;case 'e':value=(value << 6) | 0x1E;break;case 'f':value=(value << 6) | 0x1F;break;case 'g':value=(value << 6) | 0x20;break;case 'h':value=(value << 6) | 0x21;break;case 'i':value=(value << 6) | 0x22;break;case 'j':value=(value << 6) | 0x23;break;case 'k':value=(value << 6) | 0x24;break;case 'l':value=(value << 6) | 0x25;break;case 'm':value=(value << 6) | 0x26;break;case 'n':value=(value << 6) | 0x27;break;case 'o':value=(value << 6) | 0x28;break;case 'p':value=(value << 6) | 0x29;break;case 'q':value=(value << 6) | 0x2A;break;case 'r':value=(value << 6) | 0x2B;break;case 's':value=(value << 6) | 0x2C;break;case 't':value=(value << 6) | 0x2D;break;case 'u':value=(value << 6) | 0x2E;break;case 'v':value=(value << 6) | 0x2F;break;case 'w':value=(value << 6) | 0x30;break;case 'x':value=(value << 6) | 0x31;break;case 'y':value=(value << 6) | 0x32;break;case 'z':value=(value << 6) | 0x33;break;case '0':value=(value << 6) | 0x34;break;case '1':value=(value << 6) | 0x35;break;case '2':value=(value << 6) | 0x36;break;case '3':value=(value << 6) | 0x37;break;case '4':value=(value << 6) | 0x38;break;case '5':value=(value << 6) | 0x39;break;case '6':value=(value << 6) | 0x3A;break;case '7':value=(value << 6) | 0x3B;break;case '8':value=(value << 6) | 0x3C;break;case '9':value=(value << 6) | 0x3D;break;case '+':value=(value << 6) | 0x3E;break;case '/':value=(value << 6) | 0x3F;break;case '=':append=false;switch (j) {case 2:buffer.put((byte)((value >>> 4) & 0xFF));break;case 3:buffer.put((byte)((value >>> 10) & 0xFF));buffer.put((byte)((value >>> 2) & 0xFF));break;}break;default :LocalizableMessage message=ERR_BASE64_DECODE_INVALID_CHARACTER.get(encodedData,encodedData.charAt(i + j));throw new ParseException(message.toString(),i + j);}if (!append) {break;}}if (append) {buffer.put((byte)((value >>> 16) & 0xFF));buffer.put((byte)((value >>> 8) & 0xFF));buffer.put((byte)(value & 0xFF));} else {break;}}buffer.flip();byte[] returnArray=new byte[buffer.limit()];buffer.get(returnArray);return returnArray;}  }
class C{  protected Client addToIndexes(String ct,Map cMap){  return addToIndexes(ct,cMap,true);}  }
class C{  public boolean isIdentity(){  return true;}  }
class C{  @Inject public ResourceOwnerOrSuperUserAuthzModule(Config<SessionService> sessionService,@Named("frRest") Debug debug){  super(sessionService,debug);}  }
class C{  public TimeInfo(){  userDefinedFormatters=new CopyOnWriteArrayList<>();  userDefinedTimeStrings=new ConcurrentHashMap<>();  TimeZone utcTimeZone=TimeZone.getTimeZone("UTC");  gmtTimestampFormatter=new SimpleDateFormat("yyyyMMddHHmmss'Z'");  gmtTimestampFormatter.setTimeZone(utcTimeZone);  localTimestampFormatter=new SimpleDateFormat("dd/MMM/yyyy:HH:mm:ss Z");  run();}  }
class C{  public static void main(String[] args){  MakeLDIF makeLDIF=new MakeLDIF();  int returnCode=makeLDIF.makeLDIFMain(args);  if (returnCode != 0) {    System.exit(filterExitCode(returnCode));  }}  }
class C{  public void createAgentLocal(String realmName,String name,String type,String password,String agentURL) throws AMConsoleException {  String[] params={realmName,name,type};  try {    logEvent("ATTEMPT_CREATE_AGENT",params);    Map map=AgentConfiguration.getDefaultValues(type,false);    Set set=new HashSet(2);    map.put(AgentConfiguration.ATTR_NAME_PWD,set);    set.add(password);    Set newset=new HashSet(2);    newset.add(AgentConfiguration.VAL_CONFIG_REPO_LOCAL);    map.put(AgentConfiguration.ATTR_CONFIG_REPO,newset);    AgentConfiguration.createAgentLocal(getUserSSOToken(),realmName,name,type,map,agentURL);    logEvent("SUCCEED_CREATE_AGENT",params);  } catch (  ConfigurationException e) {    String[] paramsEx={realmName,name,type,getErrorString(e)};    logEvent("EXCEPTION_CREATE_AGENT",paramsEx);    debug.warning("AgentsModelImpl.createAgent",e);    throw new AMConsoleException(getErrorString(e));  }catch (  MalformedURLException e) {    String[] paramsEx={realmName,name,type,getErrorString(e)};    logEvent("EXCEPTION_CREATE_AGENT",paramsEx);    debug.warning("AgentsModelImpl.createAgent",e);    throw new AMConsoleException(getErrorString(e));  }catch (  SSOException e) {    String[] paramsEx={realmName,name,type,getErrorString(e)};    logEvent("EXCEPTION_CREATE_AGENT",paramsEx);    debug.warning("AgentsModelImpl.createAgent",e);    throw new AMConsoleException(getErrorString(e));  }catch (  IdRepoException e) {    String[] paramsEx={realmName,name,type,getErrorString(e)};    logEvent("EXCEPTION_CREATE_AGENT",paramsEx);    debug.warning("AgentsModelImpl.createAgent",e);    throw new AMConsoleException(getErrorString(e));  }catch (  SMSException e) {    String[] paramsEx={realmName,name,type,getErrorString(e)};    logEvent("EXCEPTION_CREATE_AGENT",paramsEx);    debug.warning("AgentsModelImpl.createAgent",e);    throw new AMConsoleException(getErrorString(e));  }}  }
class C{  @AfterMethod(alwaysRun=true) public void reenableBackend() throws DirectoryException {  Backend<?> b=DirectoryServer.getBackend(DN.valueOf("o=test"));  b.setWritabilityMode(WritabilityMode.ENABLED);}  }
class C{  @SuppressWarnings("unused") public static float findMaxValue(float... values){  if (values == null || values.length == 0)   return 0;  float max=Float.MIN_VALUE;  for (  float value : values) {    if (max < value)     max=value;  }  return max;}  }
class C{  public static IntegerArgument ldapVersionArgument() throws ArgumentException {  return IntegerArgument.builder(OPTION_LONG_PROTOCOL_VERSION).shortIdentifier(OPTION_SHORT_PROTOCOL_VERSION).description(INFO_DESCRIPTION_VERSION.get()).defaultValue(3).valuePlaceholder(INFO_PROTOCOL_VERSION_PLACEHOLDER.get()).buildArgument();}  }
class C{  public BufferedReader nextReader() throws IOException {  if (ldifFileIterator == null || !ldifFileIterator.hasNext()) {    return null;  }  reader.close();  InputStream inputStream=ldifInputStream=new FileInputStream(ldifFileIterator.next());  if (isEncrypted) {  }  if (isCompressed) {    inputStream=new GZIPInputStream(inputStream);  }  reader=new BufferedReader(new InputStreamReader(inputStream),bufferSize);  return reader;}  }
class C{  public void reset(){synchronized (lock) {    count=0;  }}  }
class C{  public void flush(){  lock.readLock().lock();  try {    map.clear();  }  finally {    lock.readLock().unlock();  }}  }
class C{  public void reduce_nets_of_route_items(){  int reduce_loop_counter=0;  while (reduce_nets_of_route_items_changed()) {    if (reduce_loop_counter++ > 100) {      userPrintln("reduce_nets_of_route_items: Excessive loops");      break;    }  }}  }
class C{  public void onStart(){  writer.writeHeader("encoder=Lavc56.20.100 libopus");}  }
class C{  private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  installShowFilesListener();}  }
class C{  BeginWordAction(String nm,boolean select){  super(nm);  this.select=select;}  }
class C{  public static ECPublicKeyParameters readECParametersWithPublicKey(InputStream input) throws IOException {  ECDomainParameters domainParameters=readECParameters(input);  int length=input.read();  byte[] point=new byte[length];  input.read(point);  short[] pointFormats=convertPointFormats(ECPointFormat.values());  return TlsECCUtils.deserializeECPublicKey(pointFormats,domainParameters,point);}  }
class C{  private void recycleBottomInvisibleViews(RecyclerView.Recycler recycler){  final int childCount=getChildCount();  for (int i=childCount - 1; i >= 0; i--) {    View child=getChildAt(i);    if (getDecoratedStart(child) < bottomBorder) {      recycleChildren(recycler,i + 1,childCount - 1);      lastAttachedItemPosition-=(childCount - 1 - i);      updateSpanBottomParameters();      return;    }    int position=lastAttachedItemPosition - (childCount - 1 - i);    int heightNum=itemLayoutHeightCache.get(position);    for (int j=0; j < itemLayoutWidthCache.get(position); j++) {      int spanIndex=itemOccupiedStartSpan.get(position) + j;      spanBottom[spanIndex]-=heightNum * sizePerSpan;    }  }}  }
class C{  @Inject public OpenAMClientAuthenticationFailureFactory(RealmNormaliser realmNormaliser){  this.realmNormaliser=realmNormaliser;}  }
class C{  public synchronized <T extends EventListener>void remove(Class<T> t,T l){  if (l == null) {    return;  }  if (!t.isInstance(l)) {    throw new IllegalArgumentException("Listener " + l + " is not of type "+ t);  }  int index=-1;  for (int i=listenerList.length - 2; i >= 0; i-=2) {    if ((listenerList[i] == t) && (listenerList[i + 1].equals(l) == true)) {      index=i;      break;    }  }  if (index != -1) {    Object[] tmp=new Object[listenerList.length - 2];    System.arraycopy(listenerList,0,tmp,0,index);    if (index < tmp.length)     System.arraycopy(listenerList,index + 2,tmp,index,tmp.length - index);    listenerList=(tmp.length == 0) ? NULL_ARRAY : tmp;  }}  }
class C{  public static long unsignedByteToLong(byte b){  return b & 0xFF;}  }
class C{  static void initConnectionPool(String host,String authDN,String authPasswd,boolean ssl,int minPoolSize,int maxPoolSize) throws PolicyException {  initConnectionPool(host,authDN,authPasswd,ssl,minPoolSize,maxPoolSize,Options.defaultOptions());}  }
class C{  DateTimeParseContext copy(){  DateTimeParseContext newContext=new DateTimeParseContext(formatter);  newContext.caseSensitive=caseSensitive;  newContext.strict=strict;  return newContext;}  }
class C{  protected void needAppData() throws IOException {  if (!handshake_started) {    startHandshake();  }  int type;  if (logger != null) {    logger.println("SSLSocket.needAppData..");  }  try {    while (appDataIS.available() == 0) {switch (type=recordProtocol.unwrap()) {case ContentType.HANDSHAKE:        if (!handshakeProtocol.getStatus().equals(SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING)) {          doHandshake();        }      break;case ContentType.ALERT:    processAlert();  if (socket_was_closed) {    return;  }break;case ContentType.APPLICATION_DATA:if (logger != null) {logger.println("SSLSocket.needAppData: got the data");}break;default :reportFatalAlert(AlertProtocol.UNEXPECTED_MESSAGE,new SSLException("Unexpected message of type " + type + " has been got"));}if (alertProtocol.hasAlert()) {output.write(alertProtocol.wrap());alertProtocol.setProcessed();}if (socket_was_closed) {appDataIS.setEnd();return;}}} catch (AlertException e) {reportFatalAlert(e.getDescriptionCode(),e.getReason());}catch (EndOfSourceException e) {appDataIS.setEnd();}if (logger != null) {logger.println("SSLSocket.needAppData: app data len: " + appDataIS.available());}}  }
class C{  private static byte[] min(byte[] ip1,byte[] ip2){  for (int i=0; i < ip1.length; i++) {    if ((ip1[i] & 0xFFFF) < (ip2[i] & 0xFFFF)) {      return ip1;    }  }  return ip2;}  }
class C{  void destroyInternalSession(SessionID sessionID){  InternalSession internalSession=removeCachedInternalSession(sessionID);  if (internalSession != null && internalSession.getState() != SessionState.INVALID) {    signalRemove(internalSession,SessionEventType.DESTROY);    sessionAuditor.auditActivity(internalSession.toSessionInfo(),AM_SESSION_DESTROYED);  }  sessionAccessManager.removeSessionId(sessionID);}  }
class C{  public ExtendedResponseProtocolOp(int resultCode,LocalizableMessage errorMessage,DN matchedDN,List<String> referralURLs){  this.resultCode=resultCode;  this.errorMessage=errorMessage;  this.matchedDN=matchedDN;  this.referralURLs=referralURLs;}  }
class C{  private void applyPreOpModifications(List<Modification> modifications,int startPos,boolean checkSchema) throws DirectoryException {  for (int i=startPos; i < modifications.size(); i++) {    Modification m=modifications.get(i);    Attribute a=m.getAttribute();switch (m.getModificationType().asEnum()) {case ADD:      List<ByteString> duplicateValues=new LinkedList<>();    newEntry.addAttribute(a,duplicateValues);  break;case DELETE:List<ByteString> missingValues=new LinkedList<>();newEntry.removeAttribute(a,missingValues);break;case REPLACE:newEntry.replaceAttribute(a);break;case INCREMENT:newEntry.incrementAttribute(a);break;}}if (DirectoryServer.checkSchema() && checkSchema) {LocalizableMessageBuilder invalidReason=new LocalizableMessageBuilder();if (!newEntry.conformsToSchema(null,false,true,true,invalidReason)) {throw new DirectoryException(ResultCode.OBJECTCLASS_VIOLATION,ERR_MODDN_PREOP_VIOLATES_SCHEMA.get(entryDN,invalidReason));}}}  }
class C{  public DateTimeFormatter withLocale(Locale locale){  if (this.locale.equals(locale)) {    return this;  }  return new DateTimeFormatter(printerParser,locale,decimalStyle,resolverStyle,resolverFields,chrono,zone);}  }
class C{  public int compareTo(Date anotherDate){  long thisTime=getMillisOf(this);  long anotherTime=getMillisOf(anotherDate);  return (thisTime < anotherTime ? -1 : (thisTime == anotherTime ? 0 : 1));}  }
class C{  private static String sphinxifyProtoMarkdownLinks(String comment){  StringBuffer sb=new StringBuffer();  Matcher m=CommentPatterns.PROTO_LINK_PATTERN.matcher(comment);  if (!m.find()) {    return comment;  }  do {    m.appendReplacement(sb,String.format("``%s``",m.group(1)));  } while (m.find());  m.appendTail(sb);  return sb.toString();}  }
class C{  public final void testWriteint04() throws IOException {  OutputStream os=new ByteArrayOutputStream(MY_MESSAGE_LEN);  DigestOutputStream dos=new DigestOutputStream(os,null);  try {    for (int i=0; i < MY_MESSAGE_LEN; i++) {      dos.write(myMessage[i]);    }    fail("OutputStream not set. write(int) must not work");  } catch (  Exception e) {    return;  }}  }
class C{  public AccountUsableResponseControl(int secondsBeforeExpiration){  this(false,secondsBeforeExpiration);}  }
class C{  private boolean checkElementsType(Object[] x_dim_Array,int dim){  if (dim > 1) {    for (int i=0; i < x_dim_Array.length; i++) {      if (!checkElementsType((Object[])x_dim_Array[i],dim - 1)) {        return false;      }    }    return true;  } else {    for (int i=0; i < x_dim_Array.length; i++) {      if ((x_dim_Array[i] != null) && (!this.getElementOpenType().isValue(x_dim_Array[i]))) {        return false;      }    }    return true;  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.TimeSyncTokenType createTimeSyncTokenType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.TimeSyncTokenTypeImpl();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.protocol.RequestType createRequestType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.protocol.impl.RequestTypeImpl();}  }
class C{  public UnknownFormatConversionException(String s){  if (s == null)   throw new NullPointerException();  this.s=s;}  }
class C{  private DirContext createTlsDirContext(Hashtable<String,String> env) throws NamingException {  Map<String,Object> savedEnv=new HashMap<>();  for (  String key : Arrays.asList(Context.SECURITY_AUTHENTICATION,Context.SECURITY_CREDENTIALS,Context.SECURITY_PRINCIPAL,Context.SECURITY_PROTOCOL)) {    Object entry=env.remove(key);    if (entry != null) {      savedEnv.put(key,entry);    }  }  LdapContext result=null;  try {    result=new InitialLdapContext(env,null);    tls=(StartTlsResponse)result.extendedOperation(new StartTlsRequest());    if (getHostnameVerifier() != null) {      tls.setHostnameVerifier(getHostnameVerifier());    }    if (getCipherSuitesArray() != null) {      tls.setEnabledCipherSuites(getCipherSuitesArray());    }    try {      SSLSession negotiate=tls.negotiate(getSSLSocketFactory());      containerLog.debug(sm.getString("jndiRealm.negotiatedTls",negotiate.getProtocol()));    } catch (    IOException e) {      throw new NamingException(e.getMessage());    }  }  finally {    if (result != null) {      for (      Map.Entry<String,Object> savedEntry : savedEnv.entrySet()) {        result.addToEnvironment(savedEntry.getKey(),savedEntry.getValue());      }    }  }  return result;}  }
class C{  protected void installKeyboardActions(){  InputMap iMap=getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);  SwingUtilities.replaceUIInputMap(spinner,JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT,iMap);  LazyActionMap.installLazyActionMap(spinner,BasicSpinnerUI.class,"Spinner.actionMap");}  }
class C{  public Event35Log.Builder clearEvents(){  events=null;  fieldSetFlags()[3]=false;  return this;}  }
class C{  public final void append(FastStringBuffer value){  if (value == null)   return;  int strlen=value.length();  if (0 == strlen)   return;  int copyfrom=0;  char[] chunk=m_array[m_lastChunk];  int available=m_chunkSize - m_firstFree;  while (strlen > 0) {    if (available > strlen)     available=strlen;    int sourcechunk=(copyfrom + value.m_chunkSize - 1) >>> value.m_chunkBits;    int sourcecolumn=copyfrom & value.m_chunkMask;    int runlength=value.m_chunkSize - sourcecolumn;    if (runlength > available)     runlength=available;    System.arraycopy(value.m_array[sourcechunk],sourcecolumn,m_array[m_lastChunk],m_firstFree,runlength);    if (runlength != available)     System.arraycopy(value.m_array[sourcechunk + 1],0,m_array[m_lastChunk],m_firstFree + runlength,available - runlength);    strlen-=available;    copyfrom+=available;    if (strlen > 0) {      int i=m_array.length;      if (m_lastChunk + 1 == i) {        char[][] newarray=new char[i + 16][];        System.arraycopy(m_array,0,newarray,0,i);        m_array=newarray;      }      chunk=m_array[++m_lastChunk];      if (chunk == null) {        if (m_lastChunk == 1 << m_rebundleBits && m_chunkBits < m_maxChunkBits) {          m_innerFSB=new FastStringBuffer(this);        }        chunk=m_array[m_lastChunk]=new char[m_chunkSize];      }      available=m_chunkSize;      m_firstFree=0;    }  }  m_firstFree+=available;}  }
class C{  public static void registerFontFamily(String familyName,String fullName,String path){  fontRegisterProvider.registerFontFamily(familyName,fullName,path);}  }
class C{  public static int nextMessageID(){  int msgID=nextMessageID.getAndIncrement();  if (msgID < 0) {synchronized (nextMessageID) {      if (nextMessageID.get() < 0) {        nextMessageID.set(2);        return 1;      } else {        return nextMessageID.getAndIncrement();      }    }  }  return msgID;}  }
class C{  public InvalidCodeException(final String message){  super(400,"invalid_code",message);}  }
class C{  public BevelBorder(int bevelType,Color highlight,Color shadow){  this(bevelType,highlight.brighter(),highlight,shadow,shadow.brighter());}  }
class C{  public JKTagAttributeWrapper findAttribute(final String key){  for (  final JKTagAttributeWrapper attr : this.attributesList) {    if (attr.getLocalName().equals(key)) {      return attr;    }  }  return null;}  }
class C{  public final void testCodeSigner_02(){  try {    CodeSigner cs=new CodeSigner(cpath,ts);    assertNotNull(cs);  } catch (  Exception e) {    fail("Unexpected exception");  }}  }
class C{  public static int lastIndexOf(final String value,final String needle,final int offset,final boolean caseSensitive){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  validate(needle,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  if (caseSensitive) {    return value.lastIndexOf(needle,offset);  }  return value.toLowerCase().lastIndexOf(needle.toLowerCase(),offset);}  }
class C{  boolean parseIdentifier(boolean lower) throws IOException {switch (ch) {case 'A':case 'B':case 'C':case 'D':case 'E':case 'F':case 'G':case 'H':case 'I':case 'J':case 'K':case 'L':case 'M':case 'N':case 'O':case 'P':case 'Q':case 'R':case 'S':case 'T':case 'U':case 'V':case 'W':case 'X':case 'Y':case 'Z':    if (lower) {      ch='a' + (ch - 'A');    }case 'a':case 'b':case 'c':case 'd':case 'e':case 'f':case 'g':case 'h':case 'i':case 'j':case 'k':case 'l':case 'm':case 'n':case 'o':case 'p':case 'q':case 'r':case 's':case 't':case 'u':case 'v':case 'w':case 'x':case 'y':case 'z':  break;default :return false;}while (true) {addString(ch);switch (ch=readCh()) {case 'A':case 'B':case 'C':case 'D':case 'E':case 'F':case 'G':case 'H':case 'I':case 'J':case 'K':case 'L':case 'M':case 'N':case 'O':case 'P':case 'Q':case 'R':case 'S':case 'T':case 'U':case 'V':case 'W':case 'X':case 'Y':case 'Z':if (lower) {  ch='a' + (ch - 'A');}case 'a':case 'b':case 'c':case 'd':case 'e':case 'f':case 'g':case 'h':case 'i':case 'j':case 'k':case 'l':case 'm':case 'n':case 'o':case 'p':case 'q':case 'r':case 's':case 't':case 'u':case 'v':case 'w':case 'x':case 'y':case 'z':case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':case '.':case '-':case '_':break;default :return true;}}}  }
class C{  public Passport(PassportService service,MRTDTrustStore trustManager,List<BACKeySpec> bacStore,boolean shouldDoPACE,boolean shouldDoBACByDefault) throws CardServiceException, GeneralSecurityException {  this();  LOGGER.info("DEBUG: shouldDoBACByDefault = " + shouldDoBACByDefault);  if (service == null) {    throw new IllegalArgumentException("Service cannot be null");  }  this.service=service;  if (trustManager == null) {    trustManager=new MRTDTrustStore();  }  this.trustManager=trustManager;  boolean hasPACE=false;  boolean isPACESucceeded=false;  try {    service.open();    PACEInfo paceInfo=null;    try {      LOGGER.info("Inspecting card access file");      CardAccessFile cardAccessFile=new CardAccessFile(service.getInputStream(PassportService.EF_CARD_ACCESS));      Collection<PACEInfo> paceInfos=cardAccessFile.getPACEInfos();      LOGGER.info("DEBUG: found a card access file: paceInfos (" + (paceInfos == null ? 0 : paceInfos.size()) + ") = "+ paceInfos);      if (paceInfos != null && paceInfos.size() > 0) {        if (paceInfos.size() > 1) {          LOGGER.warning("Found multiple PACEInfos " + paceInfos.size());        }        paceInfo=paceInfos.iterator().next();        featureStatus.setSAC(FeatureStatus.Verdict.PRESENT);      }    } catch (    Exception e) {      LOGGER.info("DEBUG: failed to get card access file: " + e.getMessage());      e.printStackTrace();    }    hasPACE=featureStatus.hasSAC() == FeatureStatus.Verdict.PRESENT;    if (hasPACE && shouldDoPACE) {      try {        isPACESucceeded=tryToDoPACE(service,paceInfo,bacStore.get(0));      } catch (      Exception e) {        e.printStackTrace();        LOGGER.info("PACE failed, falling back to BAC");        isPACESucceeded=false;      }    }    LOGGER.info("DEBUG: calling select applet with isPACESucceeded = " + isPACESucceeded);    service.sendSelectApplet(isPACESucceeded);  } catch (  CardServiceException cse) {    throw cse;  }catch (  Exception e) {    e.printStackTrace();    throw new CardServiceException("Cannot open document. " + e.getMessage());  }  String documentNumber=null;  if (!(hasPACE && isPACESucceeded)) {    boolean shouldDoBAC=shouldDoBACByDefault;    LOGGER.info("DEBUG: shouldDoBAC = " + shouldDoBAC);    if (!shouldDoBAC) {      try {        LOGGER.info("DEBUG: reading first byte of EF.COM");        service.getInputStream(PassportService.EF_COM).read();        if (isPACESucceeded) {          verificationStatus.setSAC(VerificationStatus.Verdict.SUCCEEDED,ReasonCode.SUCCEEDED);          featureStatus.setBAC(FeatureStatus.Verdict.UNKNOWN);          verificationStatus.setBAC(VerificationStatus.Verdict.NOT_CHECKED,ReasonCode.USING_SAC_SO_BAC_NOT_CHECKED,EMPTY_TRIED_BAC_ENTRY_LIST);        } else {          featureStatus.setBAC(FeatureStatus.Verdict.NOT_PRESENT);          verificationStatus.setBAC(VerificationStatus.Verdict.NOT_PRESENT,ReasonCode.NOT_SUPPORTED,EMPTY_TRIED_BAC_ENTRY_LIST);        }      } catch (      Exception e) {        LOGGER.info("Attempt to read EF.COM before BAC failed with: " + e.getMessage());        featureStatus.setBAC(FeatureStatus.Verdict.PRESENT);        verificationStatus.setBAC(VerificationStatus.Verdict.NOT_CHECKED,ReasonCode.INSUFFICIENT_CREDENTIALS,EMPTY_TRIED_BAC_ENTRY_LIST);      }      shouldDoBAC=featureStatus.hasBAC() == FeatureStatus.Verdict.PRESENT;    }    if (shouldDoBAC) {      BACKeySpec bacKeySpec=tryToDoBAC(service,bacStore);      if (featureStatus.hasBAC() == FeatureStatus.Verdict.UNKNOWN) {        featureStatus.setBAC(FeatureStatus.Verdict.PRESENT);      }      documentNumber=bacKeySpec.getDocumentNumber();    }  }  this.lds=new LDS();  COMFile comFile=null;  SODFile sodFile=null;  DG1File dg1File=null;  Collection<Integer> dgNumbersAlreadyRead=new TreeSet<Integer>();  try {    CardFileInputStream comIn=service.getInputStream(PassportService.EF_COM);    lds.add(PassportService.EF_COM,comIn,comIn.getLength());    comFile=lds.getCOMFile();    CardFileInputStream sodIn=service.getInputStream(PassportService.EF_SOD);    lds.add(PassportService.EF_SOD,sodIn,sodIn.getLength());    sodFile=lds.getSODFile();    CardFileInputStream dg1In=service.getInputStream(PassportService.EF_DG1);    lds.add(PassportService.EF_DG1,dg1In,dg1In.getLength());    dg1File=lds.getDG1File();    dgNumbersAlreadyRead.add(1);    if (documentNumber == null) {      documentNumber=dg1File.getMRZInfo().getDocumentNumber();    }  } catch (  IOException ioe) {    ioe.printStackTrace();    LOGGER.warning("Could not read file");  }  if (sodFile != null) {  }  List<Integer> dgNumbers=new ArrayList<Integer>();  if (sodFile != null) {    dgNumbers.addAll(sodFile.getDataGroupHashes().keySet());  } else   if (comFile != null) {    LOGGER.warning("Failed to get DG list from EF.SOd. Getting DG list from EF.COM.");    int[] tagList=comFile.getTagList();    dgNumbers.addAll(toDataGroupList(tagList));  }  Collections.sort(dgNumbers);  LOGGER.info("Found DGs: " + dgNumbers);  Map<Integer,VerificationStatus.HashMatchResult> hashResults=verificationStatus.getHashResults();  if (hashResults == null) {    hashResults=new TreeMap<Integer,VerificationStatus.HashMatchResult>();  }  if (sodFile != null) {    Map<Integer,byte[]> storedHashes=sodFile.getDataGroupHashes();    for (    int dgNumber : dgNumbers) {      byte[] storedHash=storedHashes.get(dgNumber);      VerificationStatus.HashMatchResult hashResult=hashResults.get(dgNumber);      if (hashResult != null) {        continue;      }      if (dgNumbersAlreadyRead.contains(dgNumber)) {        hashResult=verifyHash(dgNumber);      } else {        hashResult=new HashMatchResult(storedHash,null);      }      hashResults.put(dgNumber,hashResult);    }  }  verificationStatus.setHT(VerificationStatus.Verdict.UNKNOWN,verificationStatus.getHTReason(),hashResults);  if (dgNumbers.contains(14)) {    featureStatus.setEAC(FeatureStatus.Verdict.PRESENT);  } else {    featureStatus.setEAC(FeatureStatus.Verdict.NOT_PRESENT);  }  boolean hasEAC=featureStatus.hasEAC() == FeatureStatus.Verdict.PRESENT;  List<KeyStore> cvcaKeyStores=trustManager.getCVCAStores();  if (hasEAC && cvcaKeyStores != null && cvcaKeyStores.size() > 0) {    tryToDoEAC(service,lds,documentNumber,cvcaKeyStores);    dgNumbersAlreadyRead.add(14);  }  if (dgNumbers.contains(15)) {    featureStatus.setAA(FeatureStatus.Verdict.PRESENT);  } else {    featureStatus.setAA(FeatureStatus.Verdict.NOT_PRESENT);  }  boolean hasAA=featureStatus.hasAA() == FeatureStatus.Verdict.PRESENT;  if (hasAA) {    try {      CardFileInputStream dg15In=service.getInputStream(PassportService.EF_DG15);      lds.add(PassportService.EF_DG15,dg15In,dg15In.getLength());      DG15File dg15File=lds.getDG15File();      dgNumbersAlreadyRead.add(15);    } catch (    IOException ioe) {      ioe.printStackTrace();      LOGGER.warning("Could not read file");    }catch (    Exception e) {      verificationStatus.setAA(VerificationStatus.Verdict.NOT_CHECKED,ReasonCode.READ_ERROR_DG15_FAILURE,null);    }  } else {    verificationStatus.setAA(VerificationStatus.Verdict.NOT_PRESENT,ReasonCode.NOT_SUPPORTED,null);  }  for (  int dgNumber : dgNumbers) {    if (dgNumbersAlreadyRead.contains(dgNumber)) {      continue;    }    if ((dgNumber == 3 || dgNumber == 4) && !verificationStatus.getEAC().equals(VerificationStatus.Verdict.SUCCEEDED)) {      continue;    }    try {      short fid=LDSFileUtil.lookupFIDByDataGroupNumber(dgNumber);      CardFileInputStream cardFileInputStream=service.getInputStream(fid);      lds.add(fid,cardFileInputStream,cardFileInputStream.getLength());    } catch (    IOException ioe) {      LOGGER.warning("Error reading DG" + dgNumber + ": "+ ioe.getMessage());      break;    }catch (    CardServiceException ex) {      LOGGER.info("Could not read DG" + dgNumber + ": "+ ex.getMessage());    }catch (    NumberFormatException nfe) {      LOGGER.warning("NumberFormatException trying to get FID for DG" + dgNumber);      nfe.printStackTrace();    }  }}  }
class C{  void componentInputMapChanged(ComponentInputMap inputMap){  InputMap km=getInputMap(WHEN_IN_FOCUSED_WINDOW,false);  while (km != inputMap && km != null) {    km=km.getParent();  }  if (km != null) {    registerWithKeyboardManager(false);  }}  }
class C{  public StateInteractive mouse_pressed(PlaPointFloat p_point){  return this;}  }
class C{  void resetRealmSubjects(){  if (debug.messageEnabled()) {    debug.message("Resetting realm subjects in realm : " + pmRealmName);  }synchronized (this) {    realmSubjects=null;  }  if (debug.messageEnabled()) {    debug.message("Reset realm subjects in realm : " + pmRealmName);  }}  }
class C{  public static byte[] writeToArray(NSObject root) throws IOException {  ByteArrayOutputStream bout=new ByteArrayOutputStream();  write(bout,root);  return bout.toByteArray();}  }
class C{  public static final byte[] encode(byte[] src,int lineFeed){  lineFeed=lineFeed / 4 * 4;  if (lineFeed < 0) {    lineFeed=0;  }  int codeLength=((src.length + 2) / 3) * 4;  if (lineFeed > 0) {    codeLength+=(codeLength - 1) / lineFeed;  }  byte[] dst=new byte[codeLength];  int bits24;  int bits6;  int didx=0;  int sidx=0;  int lf=0;  while (sidx + 3 <= src.length) {    bits24=(src[sidx++] & 0xFF) << 16;    bits24|=(src[sidx++] & 0xFF) << 8;    bits24|=(src[sidx++] & 0xFF) << 0;    bits6=(bits24 & 0x00FC0000) >> 18;    dst[didx++]=base64[bits6];    bits6=(bits24 & 0x0003F000) >> 12;    dst[didx++]=base64[bits6];    bits6=(bits24 & 0x00000FC0) >> 6;    dst[didx++]=base64[bits6];    bits6=(bits24 & 0x0000003F);    dst[didx++]=base64[bits6];    lf+=4;    if (didx < codeLength && lineFeed > 0 && lf % lineFeed == 0) {      dst[didx++]=0x0A;    }  }  if (src.length - sidx == 2) {    bits24=(src[sidx] & 0xFF) << 16;    bits24|=(src[sidx + 1] & 0xFF) << 8;    bits6=(bits24 & 0x00FC0000) >> 18;    dst[didx++]=base64[bits6];    bits6=(bits24 & 0x0003F000) >> 12;    dst[didx++]=base64[bits6];    bits6=(bits24 & 0x00000FC0) >> 6;    dst[didx++]=base64[bits6];    dst[didx++]=(byte)'=';  } else   if (src.length - sidx == 1) {    bits24=(src[sidx] & 0xFF) << 16;    bits6=(bits24 & 0x00FC0000) >> 18;    dst[didx++]=base64[bits6];    bits6=(bits24 & 0x0003F000) >> 12;    dst[didx++]=base64[bits6];    dst[didx++]=(byte)'=';    dst[didx++]=(byte)'=';  }  return dst;}  }
class C{  private PropertyChangeListener createHSBPropertyChangeListener(){  return getHandler();}  }
class C{  private StringBuffer loadFile(File file) throws IOException {  String fileName=file.toString();  StringBuffer sb=null;synchronized (fileMap) {    sb=(StringBuffer)fileMap.get(fileName);  }  if (sb != null) {    return sb;  }  BufferedReader in=null;  try {    if (!file.canRead()) {      throw new IOException("Can read file " + fileName);    }    in=new BufferedReader(new UnicodeInputStreamReader(new FileInputStream(file)));    sb=new StringBuffer(2000);    int ch;    while ((ch=in.read()) != -1) {      sb.append((char)ch);    }synchronized (fileMap) {      fileMap.put(fileName,sb);    }    return sb;  }  finally {    if (in != null) {      in.close();    }  }}  }
class C{  public NodeSet(int blocksize){  m_blocksize=blocksize;  m_mapSize=0;}  }
class C{  @AndroidOnly("The RI doesn't throw the IllegalStateException.") public void test_wrap_05() throws SSLException {  String host="new host";  int port=8080;  ByteBuffer bb=ByteBuffer.allocate(10);  ByteBuffer[] bbA={ByteBuffer.allocate(5),ByteBuffer.allocate(10),ByteBuffer.allocate(5)};  SSLEngine sse=getEngine(host,port);  try {    sse.wrap(bbA,0,bbA.length,bb);    fail("IllegalStateException wasn't thrown");  } catch (  IllegalStateException iobe) {  }}  }
class C{  static <T>T newInstance(Class<T> type,String className,ClassLoader cl,boolean doFallback) throws FactoryConfigurationError {  return newInstance(type,className,cl,doFallback,false);}  }
class C{  public void addSeparator(){  addSeparator(null);}  }
class C{  public static Foo findByField2_Last(boolean field2,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByField2_Last(field2,orderByComparator);}  }
class C{  public BufferIterator bigEndianIterator(){  return new NioBufferIterator(address,(int)size,ByteOrder.nativeOrder() != ByteOrder.BIG_ENDIAN);}  }
class C{  public int hashCode(){  return getStringValue().hashCode();}  }
class C{  @Override public void removeMembershipListener(MembershipListener membershipListener){  membershipListeners.remove(membershipListener);}  }
class C{  public void openFileChooser(ValueCallback<Uri> uploadMsg,String acceptType,String capture){  openFileChooser(uploadMsg,acceptType);}  }
class C{  public boolean isBoolean(){  return type == BOOLEAN;}  }
class C{  public ObjectFactory(){  super(grammarInfo);}  }
class C{  void skipRemainingSiblings(){  if (!stack.isEmpty()) {    stack.peek().skip();  }}  }
class C{  public String toString(){  if (unparsed != null) {    return unparsed;  }  StringBuilder builder=new StringBuilder();  int size=rdns.size();  if ((size - 1) >= 0) {    builder.append(rdns.get(size - 1));  }  for (int next=size - 2; next >= 0; next--) {    builder.append(',');    builder.append(rdns.get(next));  }  unparsed=builder.toString();  return unparsed;}  }
class C{  public boolean isPrintValue(Object bean,Object bean2,String attrName,StoreDescription desc){  boolean printValue=false;  Object value=IntrospectionUtils.getProperty(bean,attrName);  if (value != null) {    Object value2=IntrospectionUtils.getProperty(bean2,attrName);    printValue=!value.equals(value2);  }  return printValue;}  }
class C{  public boolean accept(File dir,String name){  return true;}  }
class C{  public SerialException(String msg){  super(msg);}  }
class C{  public String encode(){  return new StringBuilder(scheme).append(SP).append(authParams.encode()).toString();}  }
class C{  public final int size(){  return m_firstFree;}  }
class C{  int nextUid(){  return m_docOrderCount++;}  }
class C{  public static String extendSelection(@Nullable String selection,@Nullable String selectionToAdd){  if (!TextUtils.isEmpty(selection)) {    if (TextUtils.isEmpty(selectionToAdd)) {      return selection;    }    StringBuilder selectionToAddBuilder=new StringBuilder();    selection=selectionToAddBuilder.append("(").append(selection).append(") AND (").append(selectionToAdd).append(")").toString();  } else {    selection=selectionToAdd;  }  return selection;}  }
class C{  private static BindRule parseAndCreateBindrule(Matcher bindruleMatcher) throws AciException {  String keywordStr=bindruleMatcher.group(keywordPos);  String operatorStr=bindruleMatcher.group(opPos);  String expression=bindruleMatcher.group(expressionPos);  final EnumBindRuleKeyword keyword=EnumBindRuleKeyword.createBindRuleKeyword(keywordStr);  if (keyword == null) {    throw new AciException(WARN_ACI_SYNTAX_INVALID_BIND_RULE_KEYWORD.get(keywordStr));  }  final EnumBindRuleType operator=EnumBindRuleType.createBindruleOperand(operatorStr);  if (operator == null) {    throw new AciException(WARN_ACI_SYNTAX_INVALID_BIND_RULE_OPERATOR.get(operatorStr));  }  if (expression == null) {    throw new AciException(WARN_ACI_SYNTAX_MISSING_BIND_RULE_EXPRESSION.get(operatorStr));  }  validateOperation(keyword,operator);  KeywordBindRule rule=decode(expression,keyword,operator);  return new BindRule(keyword,rule);}  }
class C{  public void initializeOutlines(){  checkClosingStatus();  getOutlines(false);}  }
class C{  public net.aimeizi.person.Person.Builder clearAge(){  fieldSetFlags()[0]=false;  return this;}  }
class C{  static Hashtable convertToHash(Map m){  Hashtable retHash=new Hashtable();  Set s=m.keySet();  Iterator iter=s.iterator();  while (iter.hasNext()) {    String key=(String)iter.next();    Set val=(Set)m.get(key);    retHash.put(key,setToString(val));  }  return retHash;}  }
class C{  public AuditEvent auditAccessFailure(){  long endTime=timeService.now();  long elapsedTime=endTime - startTime;  String statusCode=Integer.toString(response.getStatusCode());  JsonValue responseDetail=json(object(field(ACCESS_RESPONSE_DETAIL_REASON,response.getMessage())));  return accessEvent().forHttpServletRequest(request).timestamp(endTime).transactionId(AuditRequestContext.getTransactionIdValue()).eventName(AM_ACCESS_OUTCOME).component(component).responseWithDetail(FAILED,statusCode,elapsedTime,MILLISECONDS,responseDetail).toEvent();}  }
class C{  public TaskScheduler(ServerContext serverContext,TaskBackend taskBackend) throws InitializationException {  super("Task Scheduler Thread");  this.serverContext=serverContext;  this.taskBackend=taskBackend;  DirectoryServer.registerAlertGenerator(this);  initializeTasksFromBackingFile();  for (  RecurringTask recurringTask : recurringTasks.values()) {    Task task=null;    try {      task=recurringTask.scheduleNextIteration(new GregorianCalendar());    } catch (    DirectoryException de) {      logger.error(de.getMessageObject());    }    if (task != null) {      try {        scheduleTask(task,false);      } catch (      DirectoryException de) {        if (de.getResultCode() != ResultCode.ENTRY_ALREADY_EXISTS) {          logger.error(de.getMessageObject());        }      }    }  }}  }
class C{  protected String paramString(){  String textString=(text != null ? text : "");  String defaultIconString=((defaultIcon != null) && (defaultIcon != this) ? defaultIcon.toString() : "");  String disabledIconString=((disabledIcon != null) && (disabledIcon != this) ? disabledIcon.toString() : "");  String labelForString=(labelFor != null ? labelFor.toString() : "");  String verticalAlignmentString;  if (verticalAlignment == TOP) {    verticalAlignmentString="TOP";  } else   if (verticalAlignment == CENTER) {    verticalAlignmentString="CENTER";  } else   if (verticalAlignment == BOTTOM) {    verticalAlignmentString="BOTTOM";  } else   verticalAlignmentString="";  String horizontalAlignmentString;  if (horizontalAlignment == LEFT) {    horizontalAlignmentString="LEFT";  } else   if (horizontalAlignment == CENTER) {    horizontalAlignmentString="CENTER";  } else   if (horizontalAlignment == RIGHT) {    horizontalAlignmentString="RIGHT";  } else   if (horizontalAlignment == LEADING) {    horizontalAlignmentString="LEADING";  } else   if (horizontalAlignment == TRAILING) {    horizontalAlignmentString="TRAILING";  } else   horizontalAlignmentString="";  String verticalTextPositionString;  if (verticalTextPosition == TOP) {    verticalTextPositionString="TOP";  } else   if (verticalTextPosition == CENTER) {    verticalTextPositionString="CENTER";  } else   if (verticalTextPosition == BOTTOM) {    verticalTextPositionString="BOTTOM";  } else   verticalTextPositionString="";  String horizontalTextPositionString;  if (horizontalTextPosition == LEFT) {    horizontalTextPositionString="LEFT";  } else   if (horizontalTextPosition == CENTER) {    horizontalTextPositionString="CENTER";  } else   if (horizontalTextPosition == RIGHT) {    horizontalTextPositionString="RIGHT";  } else   if (horizontalTextPosition == LEADING) {    horizontalTextPositionString="LEADING";  } else   if (horizontalTextPosition == TRAILING) {    horizontalTextPositionString="TRAILING";  } else   horizontalTextPositionString="";  return super.paramString() + ",defaultIcon=" + defaultIconString+ ",disabledIcon="+ disabledIconString+ ",horizontalAlignment="+ horizontalAlignmentString+ ",horizontalTextPosition="+ horizontalTextPositionString+ ",iconTextGap="+ iconTextGap+ ",labelFor="+ labelForString+ ",text="+ textString+ ",verticalAlignment="+ verticalAlignmentString+ ",verticalTextPosition="+ verticalTextPositionString;}  }
class C{  public String next(){  return nextLine();}  }
class C{  public static String addSlashToBeginning(String string){  if (string == null || string.charAt(0) == '/' || Pattern.matches(Constants.URL_REGEX,string)) {    return string;  }  return "/".concat(string);}  }
class C{  public void persist(@NonNull final String module,@NonNull final String key,@NonNull final String value){  persist(module,key,null,value);}  }
class C{  @Override protected void shareText(final ShareParamText params) throws ShareException {  checkContent(params);  final WeiboMultiMessage weiboMessage=new WeiboMultiMessage();  weiboMessage.textObject=getTextObj(params);  allInOneShare(weiboMessage);}  }
class C{  private ThreadMonitor(Thread thread,long timeout){  this.thread=thread;  this.timeout=timeout;}  }
class C{  public boolean isBigEndian(){  return isBigEndian;}  }
class C{  public int processByte(byte in,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  int resultLen=0;  if (bufOff == buf.length) {    resultLen=cipher.processBlock(buf,0,out,outOff);    bufOff=0;  }  buf[bufOff++]=in;  return resultLen;}  }
class C{  public boolean isNodeAfter(int nodeHandle1,int nodeHandle2){  return false;}  }
class C{  public HttpCookie(String name,String value){  String ntrim=name.trim();  if (!isValidName(ntrim)) {    throw new IllegalArgumentException("Invalid name: " + name);  }  this.name=ntrim;  this.value=value;}  }
class C{  public static FileBasedArgument bindPasswordFileArgument() throws ArgumentException {  return FileBasedArgument.builder(OPTION_LONG_BINDPWD_FILE).shortIdentifier(OPTION_SHORT_BINDPWD_FILE).description(INFO_DESCRIPTION_BINDPASSWORDFILE.get()).valuePlaceholder(INFO_BINDPWD_FILE_PLACEHOLDER.get()).buildArgument();}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  @Deprecated public static void initializeForClientUse(){  DirectoryServer.getInstance();  DirectoryServer.bootstrapClient();}  }
class C{  public FrameBodyTRSN(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  public static ValueAnimator dampingValueAnimator(long duration){  ValueAnimator valueAnimator=ValueAnimator.ofFloat(0,1);  valueAnimator.setDuration(duration);  valueAnimator.setInterpolator(new DampingInterpolator());  return valueAnimator;}  }
class C{  @Override public void write(char[] chr,int st,int end){}  }
class C{  public Document add(AreaBreak areaBreak){  childElements.add(areaBreak);  ensureRootRendererNotNull().addChild(areaBreak.createRendererSubTree());  return this;}  }
class C{  private Record<K,V> readRecord(final long blockStartPosition) throws ChangelogException {  try {    if (blockStartPosition != -1) {      positionToRecordFromBlockStart(blockStartPosition);    }    final ByteString recordData=readNextRecord();    return recordData != null ? parser.decodeRecord(recordData) : null;  } catch (  Exception io) {    throw new ChangelogException(ERR_CHANGELOG_UNABLE_TO_DECODE_RECORD.get(reader.toString()),io);  }}  }
class C{  public boolean validateEncKey(){  String key=toString("encKey");  if (key == null) {    writeToResponse(getLocalizedString("missing.required.field"));  } else {    getContext().setSessionAttribute(SessionAttributeNames.ENCRYPTION_KEY,key);    if (key.length() < 10) {      writeToResponse(getLocalizedString("enc.key.need.10.chars"));    } else {      writeToResponse("true");    }  }  setPath(null);  return false;}  }
class C{  public static CompletionStatus from_int(int i){switch (i) {case _COMPLETED_YES:    return COMPLETED_YES;case _COMPLETED_NO:  return COMPLETED_NO;case _COMPLETED_MAYBE:return COMPLETED_MAYBE;default :throw new org.omg.CORBA.BAD_PARAM();}}  }
class C{  public boolean isNull(){  return isNull(encryptedString);}  }
class C{  @Override public void realWriteBytes(byte buf[],int off,int cnt) throws IOException {  if (closed) {    return;  }  if (coyoteResponse == null) {    return;  }  if (cnt > 0) {    outputChunk.setBytes(buf,off,cnt);    try {      coyoteResponse.doWrite(outputChunk);    } catch (    IOException e) {      throw new ClientAbortException(e);    }  }}  }
class C{  public void testDoubleValueNegInfinity(){  String a="-123809648392384754573567356745735.63567890295784902768787678287E+400";  BigDecimal aNumber=new BigDecimal(a);  double result=Double.NEGATIVE_INFINITY;  assertEquals("incorrect value",result,aNumber.doubleValue(),0);}  }
class C{  public void clear(){  attr.clear();  entries.clear();}  }
class C{  public byte[] encodePassword(String password){  return password == null ? null : password.getBytes(Charset.forName("UTF-8"));}  }
class C{  @Override public String toString(){  return "WaspDb [name=" + dbName + ", path="+ path+ ", cipher enabled = "+ (cipherManager != null)+ "]";}  }
class C{  public ExpressionNode exprGetChild(int i){  return (ExpressionNode)item(i);}  }
class C{  public void testReInviteInfoOverlap(){  this.shootist.sendInvite();  try {    Thread.sleep(10000);  } catch (  InterruptedException e) {    e.printStackTrace();  }  assertTrue(shootme.ack2Received);}  }
class C{  public AuthConfigurationModelImpl(HttpServletRequest req,Map map){  super(req,map);  currentRealm=(String)map.get(AMAdminConstants.CURRENT_REALM);}  }
class C{  @Override public void removeWrapperLifecycle(String listener){synchronized (wrapperLifecyclesLock) {    int n=-1;    for (int i=0; i < wrapperLifecycles.length; i++) {      if (wrapperLifecycles[i].equals(listener)) {        n=i;        break;      }    }    if (n < 0)     return;    int j=0;    String results[]=new String[wrapperLifecycles.length - 1];    for (int i=0; i < wrapperLifecycles.length; i++) {      if (i != n)       results[j++]=wrapperLifecycles[i];    }    wrapperLifecycles=results;  }  fireContainerEvent("removeWrapperLifecycle",listener);}  }
class C{  @Override public void run(){  try {    listenSocket=new ServerSocket();    listenSocket.bind(new InetSocketAddress(port));  } catch (  IOException e) {    fail("Fake replication server could not bind to port:" + port);  }  Socket newSocket=null;  while (!shutdown) {    try {      newSocket=listenSocket.accept();      newSocket.setTcpNoDelay(true);      newSocket.setKeepAlive(true);      ReplSessionSecurity replSessionSecurity=new ReplSessionSecurity();      int timeoutMS=MultimasterReplication.getConnectionTimeoutMS();      session=replSessionSecurity.createServerSession(newSocket,timeoutMS);      if (session == null) {        continue;      }      handleClientConnection();    } catch (    Exception e) {    }  }}  }
class C{  public void visitInnerClassType(String name){}  }
class C{  public static Long gauge32Value(Long V){  long v=V.longValue();  if (v > (pow(2,32) - 1)) {    return new Long(pow(2,32) - 1);  } else {    return V;  }}  }
class C{  public LongArraySpliterator(long[] array,int additionalCharacteristics){  this(array,0,array.length,additionalCharacteristics);}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String bundleName=getStringOptionValue(IArgument.RESOURCE_BUNDLE_NAME);  String fileName=getStringOptionValue(ARGUMENT_RESOURCE_BUNDLE_FILE_NAME);  String localeName=getStringOptionValue(IArgument.RESOURCE_BUNDLE_LOCALE);  try {    String[] params={bundleName,fileName,localeName};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_ADD_RESOURCE_BUNDLE",params);    CommandManager mgr=getCommandManager();    String url=mgr.getWebEnabledURL();    if (url != null) {      params[1]=CLIConstants.WEB_INPUT;    }    Map mapStrings=(url != null) ? getResourceStringsMap(new StringReader(fileName)) : getResourceStringsMap(new FileReader(fileName));    ISResourceBundle.storeResourceBundle(adminSSOToken,bundleName,localeName,mapStrings);    getOutputWriter().printlnMessage(getResourceString("resourcebundle-added"));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_ADD_RESOURCE_BUNDLE",params);  } catch (  SSOException e) {    String[] args={bundleName,fileName,localeName,e.getMessage()};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"FAILED_ADD_RESOURCE_BUNDLE",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  IOException e) {    String[] args={bundleName,fileName,localeName,e.getMessage()};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"FAILED_ADD_RESOURCE_BUNDLE",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={bundleName,fileName,localeName,e.getMessage()};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"FAILED_ADD_RESOURCE_BUNDLE",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  protected String paramString(){  String preferredSizeString=(isPreferredSizeSet() ? getPreferredSize().toString() : "");  String minimumSizeString=(isMinimumSizeSet() ? getMinimumSize().toString() : "");  String maximumSizeString=(isMaximumSizeSet() ? getMaximumSize().toString() : "");  String borderString=(border == null ? "" : (border == this ? "this" : border.toString()));  return super.paramString() + ",alignmentX=" + alignmentX+ ",alignmentY="+ alignmentY+ ",border="+ borderString+ ",flags="+ flags+ ",maximumSize="+ maximumSizeString+ ",minimumSize="+ minimumSizeString+ ",preferredSize="+ preferredSizeString;}  }
class C{  private String fieldTypeCardinalityComment(Field field){  TypeRef type=field.getType();  String cardinalityComment;  String closing;  if (type.getCardinality() == Cardinality.REPEATED) {    if (type.isMap()) {      cardinalityComment="Hash{" + rubyTypeName(type.getMapKeyField().getType()) + " => ";      field=type.getMapValueField();      closing="}";    } else {      cardinalityComment="Array<";      closing=">";    }  } else {    cardinalityComment="";    closing="";  }  String typeComment=rubyTypeName(field.getType());  return String.format("%s%s%s",cardinalityComment,typeComment,closing);}  }
class C{  public com.sun.identity.liberty.ws.meta.jaxb.IDPDescriptorType createIDPDescriptorType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.meta.jaxb.impl.IDPDescriptorTypeImpl();}  }
class C{  private static void initializeParams(){  String cacheSize=SystemProperties.get(CACHE_MAX_SIZE_KEY,"10000");  try {    maxSize=Integer.parseInt(cacheSize);    if (maxSize < 1) {      maxSize=10000;    }    if (getDebug().messageEnabled()) {      getDebug().message("CachedRemoteServicesImpl." + "intializeParams() Caching size set to: " + maxSize);    }  } catch (  NumberFormatException ne) {    maxSize=10000;    getDebug().warning("CachedRemoteServicesImpl.initializeParams() " + "- invalid value for cache size specified. Setting " + "to default value: "+ maxSize);  }}  }
class C{  public AuthorizeEndpointFilter(Restlet resource,JacksonRepresentationFactory jacksonRepresentationFactory){  super(resource,jacksonRepresentationFactory);}  }
class C{  protected TagElement makeTag(Element elem,boolean fictional){  return new TagElement(elem,fictional);}  }
class C{  public JKTagAttributeWrapper(final Tag tag,final String name,final String value){  this.qName=name;  this.value=value;  this.namespace=tag.getNamespace();  this.location=tag.getLocation();}  }
class C{  public synchronized int size(){  return count;}  }
class C{  public String str(){  if (null == m_strCache) {    m_strCache=fsb().getString(m_start,m_length);  }  return m_strCache;}  }
class C{  public GetMaxSessionTimeActionHandler(SessionResourceUtil sessionResourceUtil){  this.sessionResourceUtil=sessionResourceUtil;}  }
class C{  protected AccessibleRole(String key){  this.key=key;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.AuthenticationTokenElement createAuthenticationTokenElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.AuthenticationTokenElementImpl();}  }
class C{  private static void writeSchemaFiles(String basedir,List<String> schemaFiles,Map map,String dataStore) throws Exception {  SetupProgress.reportStart("configurator.progress.tagswap.schemafiles",null);  Set<String> absSchemaFiles=new HashSet<String>();  for (  String file : schemaFiles) {    String content=readFile(file);    FileWriter fout=null;    try {      int idx=file.lastIndexOf("/");      String absFile=basedir + "/" + (idx != -1 ? file.substring(idx + 1) : file);      fout=new FileWriter(absFile);      absSchemaFiles.add(absFile);      fout.write(ServicesDefaultValues.tagSwap(content));    } catch (    IOException ioex) {      Debug.getInstance(SetupConstants.DEBUG_NAME).error("AMSetupServlet.writeSchemaFiles: " + "Exception in writing schema files:",ioex);      throw ioex;    } finally {      if (fout != null) {        try {          fout.close();        } catch (        Exception ex) {        }      }    }  }  SetupProgress.reportEnd("emb.success",null);  AMSetupDSConfig dsConfig=AMSetupDSConfig.getInstance();  dsConfig.loadSchemaFiles(schemaFiles);  if (dataStore.equals(SetupConstants.SMS_EMBED_DATASTORE)) {    int ret=EmbeddedOpenDS.rebuildIndex(map);    if (ret != 0) {      Object[] error={Integer.toString(ret)};      SetupProgress.reportStart("emb.rebuildindex.failed",null);      SetupProgress.reportEnd("emb.rebuildindex.failedmsg",error);      Debug.getInstance(SetupConstants.DEBUG_NAME).error("AMSetupServlet.writeSchemaFiles: " + "Unable to rebuild indexes in OpenDJ: " + ret);      throw new Exception("Unable to rebuild indexes in OpenDJ: " + ret);    }  }  for (  String schemaFile : absSchemaFiles) {    File file=new File(schemaFile);    file.delete();  }}  }
class C{  public static boolean containsAll(final String value,final String[] needles){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  return Arrays.stream(needles).allMatch(null);}  }
class C{  public NO_IMPLEMENT(String s,int minor,CompletionStatus completed){  super(s,minor,completed);}  }
class C{  public static void cloneServerInstance(SSOToken ssoToken,String serverName,String cloneName,String cloneId) throws SMSException, SSOException, ConfigurationException {  URL url=null;  try {    url=new URL(cloneName);  } catch (  MalformedURLException ex) {    String[] param={cloneName};    throw new ConfigurationException("invalid.server.name",param);  }  ServiceConfig cfg=getServerConfig(ssoToken,serverName);  if (cfg != null) {    Map map=cfg.getAttributes();    ServiceConfig sc=getRootServerConfigWithRetry(ssoToken);    if (sc != null) {      Set setID=new HashSet(2);      setID.add(cloneId);      map.put(ATTR_SERVER_ID,setID);      setProtocolHostPortURI(map,cloneName);      sc.addSubConfig(cloneName,SUBSCHEMA_SERVER,0,map);      updateOrganizationAlias(ssoToken,cloneName,true);    }  }}  }
class C{  public static LineString fromPolyline(String polyline,int precision){  return new LineString(PolylineUtils.decode(polyline,precision));}  }
class C{  private void enqueueTopoInfoToAllExcept(DataServerHandler dsHandler){synchronized (pendingStatusMessagesLock) {    pendingStatusMessages.enqueueTopoInfoToAllDSsExcept(dsHandler);    pendingStatusMessages.enqueueTopoInfoToAllRSs();  }  statusAnalyzer.notifyPendingStatusMessage();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node anotherElement;  NamedNodeMap anotherMap;  Node arg;  Node testAddress;  NamedNodeMap map;  Node setNode;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("address");  anotherElement=elementList.item(2);  anotherMap=anotherElement.getAttributes();  arg=anotherMap.getNamedItemNS("http://www.netzero.com","domestic");  testAddress=elementList.item(0);  map=testAddress.getAttributes();{    boolean success=false;    try {      setNode=map.setNamedItemNS(arg);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INUSE_ATTRIBUTE_ERR);    }    assertTrue("throw_INUSE_ATTRIBUTE_ERR",success);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node genderNode;  Node entElement;  int nodeType;  Node entElementContent;  Node entReference;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  genderNode=genderList.item(2);  entReference=genderNode.getFirstChild();  assertNotNull("entReferenceNotNull",entReference);  nodeType=(int)entReference.getNodeType();  if (equals(1,nodeType)) {    entReference=doc.createEntityReference("ent4");    assertNotNull("createdEntRefNotNull",entReference);  }  entElement=entReference.getFirstChild();  assertNotNull("entElementNotNull",entElement);  entElementContent=entElement.getFirstChild();  assertNotNull("entElementContentNotNull",entElementContent);{    boolean success=false;    try {      ((CharacterData)entElementContent).insertData(1,"newArg");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public void stopScrolling(){  scroller.stopScrolling();}  }
class C{  protected Label readLabel(int offset,Label[] labels){  if (labels[offset] == null) {    labels[offset]=new Label();  }  return labels[offset];}  }
class C{  public void globalConfigChanged(String serviceName,String version,String groupName,String serviceComponent,int changeType){}  }
class C{  public WhereBuilder and(String columnName,String op,Object value){  appendCondition(whereItems.size() == 0 ? null : "AND",columnName,op,value);  return this;}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  public void insert_typecode(org.omg.CORBA.TypeCode value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_typecode",_opsClass);  DynEnumOperations $self=(DynEnumOperations)$so.servant;  try {    $self.insert_typecode(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public boolean addAll(Collection<? extends E> c){  if (!(c instanceof RegularEnumSet))   return super.addAll(c);  RegularEnumSet<?> es=(RegularEnumSet<?>)c;  if (es.elementType != elementType) {    if (es.isEmpty())     return false; else     throw new ClassCastException(es.elementType + " != " + elementType);  }  long oldElements=elements;  elements|=es.elements;  return elements != oldElements;}  }
class C{  public void reset(){  Cell[] as=cells;  Cell a;  base=0L;  if (as != null) {    for (int i=0; i < as.length; ++i) {      if ((a=as[i]) != null)       a.value=0L;    }  }}  }
class C{  public ChatsPresenter(String conversationId,List<String> memberIdList,@NonNull ChatsDataSource chatsRepository,@NonNull ConversationsDataSource conversationsRepository,@NonNull ChatsContract.View chatsView){  mConversationId=conversationId;  mMemberIdList=memberIdList;  mCurrentUser=SupportUser.getCurrentUser();  mChatsRepository=checkNotNull(chatsRepository,"chatsRepository cannot be null");  mConversationsRepository=checkNotNull(conversationsRepository,"chatsRepository cannot be null");  mChatsView=checkNotNull(chatsView,"chatsView cannot be null!");  mChatsView.setPresenter(this);}  }
class C{  public NamingException(){  super();  resolvedName=remainingName=null;  resolvedObj=null;}  }
class C{  @Override public Foo fetchByUUID_G(String uuid,long groupId){  return fetchByUUID_G(uuid,groupId,true);}  }
class C{  @Override public void onAlarm(Alarm alarm){  if (mCurrentScrollDir == DragController.SCROLL_LEFT) {    mContent.scrollLeft();    mScrollHintDir=DragController.SCROLL_NONE;  } else   if (mCurrentScrollDir == DragController.SCROLL_RIGHT) {    mContent.scrollRight();    mScrollHintDir=DragController.SCROLL_NONE;  } else {    return;  }  mCurrentScrollDir=DragController.SCROLL_NONE;  mScrollPauseAlarm.setOnAlarmListener(new OnScrollFinishedListener(mDragObject));  mScrollPauseAlarm.setAlarm(DragController.RESCROLL_DELAY);}  }
class C{  public static boolean isValidInet6Address(String inet6Address){  boolean containsCompressedZeroes=inet6Address.contains("::");  if (containsCompressedZeroes && (inet6Address.indexOf("::") != inet6Address.lastIndexOf("::"))) {    return false;  }  if ((inet6Address.startsWith(":") && !inet6Address.startsWith("::")) || (inet6Address.endsWith(":") && !inet6Address.endsWith("::"))) {    return false;  }  String[] octets=inet6Address.split(":");  if (containsCompressedZeroes) {    List<String> octetList=new ArrayList<>(Arrays.asList(octets));    if (inet6Address.endsWith("::")) {      octetList.add("");    } else     if (inet6Address.startsWith("::") && !octetList.isEmpty()) {      octetList.remove(0);    }    octets=octetList.toArray(new String[octetList.size()]);  }  if (octets.length > IPV6_MAX_HEX_GROUPS) {    return false;  }  int validOctets=0;  int emptyOctets=0;  for (int index=0; index < octets.length; index++) {    String octet=octets[index];    if (octet.length() == 0) {      emptyOctets++;      if (emptyOctets > 1) {        return false;      }    } else {      emptyOctets=0;      if (octet.contains(".")) {        if (!inet6Address.endsWith(octet)) {          return false;        }        if (index > octets.length - 1 || index > 6) {          return false;        }        if (!isValidInet4Address(octet)) {          return false;        }        validOctets+=2;        continue;      }      if (octet.length() > IPV6_MAX_HEX_DIGITS_PER_GROUP) {        return false;      }      int octetInt;      try {        octetInt=Integer.valueOf(octet,BASE_16);      } catch (      NumberFormatException e) {        return false;      }      if (octetInt < 0 || octetInt > MAX_UNSIGNED_SHORT) {        return false;      }    }    validOctets++;  }  if (validOctets < IPV6_MAX_HEX_GROUPS && !containsCompressedZeroes) {    return false;  }  return true;}  }
class C{  public LoginConfiguration sessionId(String sessionId){  if (sessionId != null) {    this.sessionId=sessionId;  }  return this;}  }
class C{  public void mark(int readAheadLimit) throws IOException {  throw new IOException("mark/reset not supported");}  }
class C{  public void destroy(){}  }
class C{  private static Charset toCharset(String csn) throws UnsupportedEncodingException {  Objects.requireNonNull(csn,"charsetName");  try {    return Charset.forName(csn);  } catch (  IllegalCharsetNameException|UnsupportedCharsetException unused) {    throw new UnsupportedEncodingException(csn);  }}  }
class C{  NonExpiringSessionManager(SessionAccessManager sessionAccessManager,ScheduledExecutorService scheduler,ThreadMonitor threadMonitor){  this.sessionAccessManager=sessionAccessManager;  NonExpiringSessionUpdater sessionUpdater=new NonExpiringSessionUpdater();  threadMonitor.watchScheduledThread(scheduler,sessionUpdater,0,refreshPeriodInMinutes,TimeUnit.MINUTES);}  }
class C{  public void assertBuildCompletedSuccessfully() throws Exception {  assertBuildCompletedSuccessfully(b);}  }
class C{  public synchronized void closeDriver(){  if (camera != null) {    camera.getCamera().release();    camera=null;    framingRect=null;    framingRectInPreview=null;  }}  }
class C{  private void connectToReplicationServer(ConnectedRS rs,ServerStatus initStatus,TopologyMsg topologyMsg){  final DN baseDN=getBaseDN();  final ReplicationServerInfo rsInfo=rs.rsInfo;  boolean connectCompleted=false;  try {    maxSendWindow=rsInfo.getWindowSize();    receiveTopo(topologyMsg,rs.getServerId());    connectionError=false;    if (sendWindow != null) {      final int MAX_PERMITS=Integer.MAX_VALUE >>> 2;      if (sendWindow.availablePermits() < MAX_PERMITS) {        sendWindow.release(MAX_PERMITS);      }    }    sendWindow=new Semaphore(maxSendWindow);    rcvWindow=getMaxRcvWindow();    domain.sessionInitiated(initStatus,rsInfo.getServerState());    final byte groupId=getGroupId();    if (rs.getGroupId() != groupId) {      logger.warn(WARN_CONNECTED_TO_SERVER_WITH_WRONG_GROUP_ID,groupId,rs.getServerId(),rsInfo.getServerURL(),rs.getGroupId(),baseDN,getServerId());    }    startRSHeartBeatMonitoring(rs);    if (rsInfo.getProtocolVersion() >= ProtocolVersion.REPLICATION_PROTOCOL_V3) {      startChangeTimeHeartBeatPublishing(rs);    }    connectCompleted=true;  } catch (  Exception e) {    logger.error(ERR_COMPUTING_FAKE_OPS,baseDN,rsInfo.getServerURL(),e.getLocalizedMessage() + " " + stackTraceToSingleLineString(e));  } finally {    if (!connectCompleted) {      setConnectedRS(ConnectedRS.noConnectedRS());    }  }}  }
class C{  private void suppress(Response response){  for (  String name : RESPONSE_HEADERS) {    Header setCookieHeader=response.getHeaders().get(name);    if (setCookieHeader != null) {      List<String> headers=new ArrayList<>(setCookieHeader.getValues());      for (ListIterator<String> hi=headers.listIterator(); hi.hasNext(); ) {        String header=hi.next();        List<String> parts;        if ("Set-Cookie2".equals(name)) {          parts=new ArrayList<>(Arrays.asList(DELIM_COMMA.split(header,0)));        } else {          parts=new ArrayList<>();          parts.add(header);        }        int originalSize=parts.size();        for (ListIterator<String> pi=parts.listIterator(); pi.hasNext(); ) {          String part=pi.next();          Action action=action((DELIM_EQUALS.split(part,2))[0].trim());          if (action == Action.SUPPRESS || action == Action.MANAGE) {            pi.remove();          }        }        if (parts.size() == 0) {          hi.remove();        } else         if (parts.size() != originalSize) {          hi.set(joinAsString(",",parts));        }      }      commitNewValues(response,name,headers);    }  }}  }
class C{  public AMSearchResults searchUsers(String wildcard,AMSearchControl searchControl,String avfilter) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(USER),getSearchFilter(AMObject.USER),wildcard,searchControl,avfilter);}  }
class C{  @Override public CompletionStage<Optional<UUID>> prepare(CassandraSession session){  return prepareCreateTables(session).thenCompose(null);}  }
class C{  Future<Job> update(){  Future<Job> future=Future.future();  this.updated_at=System.currentTimeMillis();  client.transaction().multi(_failure()).hmset(RedisHelper.getKey("job:" + this.id),this.toJson(),_failure()).zadd(RedisHelper.getKey("jobs"),this.priority.getValue(),this.zid,_failure()).exec(_completer(future,this));  return future.compose(null);}  }
class C{  public void close() throws java.io.IOException {  if (m_writer != null)   m_writer.close();  flushBuffer();}  }
class C{  public boolean orgTemplateExists(String serviceName) throws AMException, SSOException {  ServiceConfig sc=AMServiceUtils.getOrgConfig(token,entryDN,serviceName);  return (sc != null);}  }
class C{  public void applyPattern(String template){  validatePattern(template);  pattern=template;}  }
class C{  private static void dumpConfigurationProperties(InstallLog installLog,Map<String,Object> properties){  SortedMap<String,Object> sortedProperties=new TreeMap<String,Object>(String.CASE_INSENSITIVE_ORDER);  sortedProperties.putAll(properties);  for (  String key : sortedProperties.keySet()) {    if (CONFIG_ITEMS_TO_HASH_LIST.contains(key)) {      installLog.write(key + " = #########" + "\n");    } else {      installLog.write(key + " = " + sortedProperties.get(key)+ "\n");    }  }}  }
class C{  public boolean nextValidToken() throws java.io.IOException {  while (tokeniser.nextToken()) {    if (tokeniser.getTokenType() == TokenType.Comment)     continue;    return true;  }  return false;}  }
class C{  @DataProvider(name="validStatements") public Object[][] valids(){  return new Object[][]{{"add=st:(st=*),del=st:(st=*)"},{"add=st:(st=*) && cn:(cn=c*), del=st:(st=*) && sn:(sn=s*)"},{"add=st:(st=*)"},{"del=st:(st=*)"}};}  }
class C{  public ExtendedOperation processExtendedOperation(String requestOID,ByteString requestValue){  return processExtendedOperation(requestOID,requestValue,null);}  }
class C{  @SuppressWarnings("unchecked") public static <T>void sort(List<T> list,Comparator<? super T> comparator){  T[] array=list.toArray((T[])new Object[list.size()]);  Arrays.sort(array,comparator);  int i=0;  ListIterator<T> it=list.listIterator();  while (it.hasNext()) {    it.next();    it.set(array[i++]);  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.TransformType.XPath createTransformTypeXPath(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.TransformTypeImpl.XPathImpl(value);}  }
class C{  final void removeUnusedMarks(){  int n=marks.size();  MarkVector cleaned=new MarkVector(n);  for (int i=0; i < n; i++) {    MarkData mark=marks.elementAt(i);    if (mark.get() != null) {      cleaned.addElement(mark);    }  }  marks=cleaned;  unusedMarks=0;}  }
class C{  public void removeValue(String k){  if (values != null) {    values.remove(k);  }}  }
class C{  public StampingProperties preserveEncryption(){  this.preserveEncryption=true;  return this;}  }
class C{  public String prettyPrint(final String prefix){  final StringBuilder result=new StringBuilder();  result.append(prefix).append("-> GUID: ").append(GUID.getGuidDescription(this.guid)).append(Utils.LINE_SEPARATOR);  result.append(prefix).append("  | : Starts at position: ").append(getPosition()).append(Utils.LINE_SEPARATOR);  result.append(prefix).append("  | : Last byte at: ").append(getChunkEnd() - 1).append(Utils.LINE_SEPARATOR);  return result.toString();}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    try {      return new FileInputStream(entry.getCleanFile(index));    } catch (    FileNotFoundException e) {      return null;    }  }}  }
class C{  @Override public void write(byte[] b){  for (  OutputStream s : targetStreams) {    try {      s.write(b);    } catch (    Exception e) {      logger.traceException(e);    }  }}  }
class C{  public static NSObject parse(InputStream is) throws IOException, PropertyListFormatException {  byte[] buf=PropertyListParser.readAll(is);  return parse(buf);}  }
class C{  public static synchronized Registry createRegistry(){  if (registry == null) {    registry=Registry.getRegistry(null,null);    ClassLoader cl=MBeanUtils.class.getClassLoader();    registry.loadDescriptors("org.apache.catalina.mbeans",cl);    registry.loadDescriptors("org.apache.catalina.authenticator",cl);    registry.loadDescriptors("org.apache.catalina.core",cl);    registry.loadDescriptors("org.apache.catalina",cl);    registry.loadDescriptors("org.apache.catalina.deploy",cl);    registry.loadDescriptors("org.apache.catalina.loader",cl);    registry.loadDescriptors("org.apache.catalina.realm",cl);    registry.loadDescriptors("org.apache.catalina.session",cl);    registry.loadDescriptors("org.apache.catalina.startup",cl);    registry.loadDescriptors("org.apache.catalina.users",cl);    registry.loadDescriptors("org.apache.catalina.ha",cl);    registry.loadDescriptors("org.apache.catalina.connector",cl);    registry.loadDescriptors("org.apache.catalina.valves",cl);    registry.loadDescriptors("org.apache.catalina.storeconfig",cl);    registry.loadDescriptors("org.apache.tomcat.util.descriptor.web",cl);  }  return (registry);}  }
class C{  private void makeTail(LinkedEntry<K,V> e){  e.prv.nxt=e.nxt;  e.nxt.prv=e.prv;  LinkedEntry<K,V> header=this.header;  LinkedEntry<K,V> oldTail=header.prv;  e.nxt=header;  e.prv=oldTail;  oldTail.nxt=header.prv=e;  modCount++;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.SecretKeyProtectionElement createSecretKeyProtectionElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.SecretKeyProtectionElementImpl();}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  int whereNode=getArg0AsNode(xctxt);  String fileLocation=null;  if (DTM.NULL != whereNode) {    DTM dtm=xctxt.getDTM(whereNode);    if (DTM.DOCUMENT_FRAGMENT_NODE == dtm.getNodeType(whereNode)) {      whereNode=dtm.getFirstChild(whereNode);    }    if (DTM.NULL != whereNode) {      fileLocation=dtm.getDocumentBaseURI();    }  }  return new XString((null != fileLocation) ? fileLocation : "");}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList childList;  Node childNode;  NamedNodeMap attrList;  int nodeType;  doc=(Document)load("staff",false);  childList=doc.getChildNodes();  for (int indexN10043=0; indexN10043 < childList.getLength(); indexN10043++) {    childNode=(Node)childList.item(indexN10043);    nodeType=(int)childNode.getNodeType();    if (equals(8,nodeType)) {      attrList=childNode.getAttributes();      assertNull("attributesNull",attrList);    }  }  childNode=doc.createComment("This is a comment");  attrList=childNode.getAttributes();  assertNull("createdAttributesNull",attrList);}  }
class C{  public boolean deleteAll(){  return database.delete(DATABASE_TABLE,null,null) > 0;}  }
class C{  public EventListenerProxy(T listener){  this.listener=listener;}  }
class C{  private static void rdf_ParseTypeLiteralPropertyElement() throws XMPException {  throw new XMPException("ParseTypeLiteral property element not allowed",BADXMP);}  }
class C{  public static boolean check(String p_s,RoutingBoard p_board){  if (p_board.debug(Mdbg.AUTORT,Ldbg.RELEASE))   return true;  boolean result=true;  ShapeTileOctagon surr_oct=p_board.bounding_box.bounding_octagon();  int layer_count=p_board.get_layer_count();  if (last_violation_count == null) {    last_violation_count=new int[layer_count];  }  for (int layer=0; layer < layer_count; ++layer) {    if (first_time) {      System.out.println(" validate board is on ");      first_time=false;    }    Collection<AwtreeObject> l=p_board.overlapping_objects(surr_oct,layer);    Iterator<AwtreeObject> i=l.iterator();    int clearance_violation_count=0;    int conflict_ob_count=0;    @SuppressWarnings("unused") int trace_count=0;    while (i.hasNext()) {      BrdItem curr_ob=(BrdItem)i.next();      if (!curr_ob.validate_ok()) {        System.out.println(p_s);      }      int cl_count=curr_ob.clearance_violation_count();      if (cl_count > 0) {        ++conflict_ob_count;        clearance_violation_count+=cl_count;      }      if (curr_ob instanceof BrdTracep) {        ++trace_count;      }    }    if (conflict_ob_count == 1) {      System.out.println("conflicts not symmetric");    }    if (clearance_violation_count != last_violation_count[layer]) {      result=false;      System.out.print(clearance_violation_count);      System.out.print(" clearance violations on layer ");      System.out.print(layer);      System.out.print(" ");      System.out.println(p_s);      if (clearance_violation_count > 0) {        System.out.print("with items of nets: ");      }      i=l.iterator();      while (i.hasNext()) {        BrdItem curr_ob=(BrdItem)i.next();        int cl_count=curr_ob.clearance_violation_count();        if (cl_count == 0) {          continue;        }        int curr_net_no=0;        if (curr_ob instanceof BrdTracep) {          BrdTracep curr_trace=(BrdTracep)curr_ob;          if (curr_trace.net_count() > 0) {            curr_net_no=curr_trace.get_net_no(0);          }        }        System.out.print(curr_net_no);        System.out.print(", ");      }      System.out.println();    }    if (clearance_violation_count != last_violation_count[layer]) {      last_violation_count[layer]=clearance_violation_count;    }  }  return result;}  }
class C{  public boolean maintainHistory(){  return passwordPolicy.getPasswordHistoryCount() > 0 || passwordPolicy.getPasswordHistoryDuration() > 0;}  }
class C{  static public void assertEquals(char expected,char actual){  assertEquals(null,expected,actual);}  }
class C{  private String updateFieldName(FieldInsnNode fin){  ClassNode fieldOwner=getClassNode(fin.owner);  while (!fieldOwner.name.equals("java/lang/Object")) {    FieldNode field=getField(fieldOwner,fin.name,fin.desc);    if (field != null) {      return getRefactoredName(field);    }    fieldOwner=getClassNode(fieldOwner.superName);  }  return fin.name;}  }
class C{  @Override public int lengthOfYear(){  return chrono.getYearLength(prolepticYear);}  }
class C{  public static boolean isUserExists(String userDN){  try {    return userProvider.isUserExists(userDN);  } catch (  DataStoreProviderException dspe) {    if (debug.messageEnabled()) {      debug.message("IDPPUtils.isUserExists: Userentry is null",dspe);    }    return false;  }}  }
class C{  protected void clearError(){  ioError=false;}  }
class C{  public static void registerInternalPlugin(InternalDirectoryServerPlugin plugin){  directoryServer.pluginConfigManager.registerInternalPlugin(plugin);}  }
class C{  public void insert_ulong(int value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_ulong",_opsClass);  DynArrayOperations $self=(DynArrayOperations)$so.servant;  try {    $self.insert_ulong(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  boolean merge(final ClassWriter cw,final Frame frame,final int edge){  boolean changed=false;  int i, s, dim, kind, t;  int nLocal=inputLocals.length;  int nStack=inputStack.length;  if (frame.inputLocals == null) {    frame.inputLocals=new int[nLocal];    changed=true;  }  for (i=0; i < nLocal; ++i) {    if (outputLocals != null && i < outputLocals.length) {      s=outputLocals[i];      if (s == 0) {        t=inputLocals[i];      } else {        dim=s & DIM;        kind=s & KIND;        if (kind == BASE) {          t=s;        } else {          if (kind == LOCAL) {            t=dim + inputLocals[s & VALUE];          } else {            t=dim + inputStack[nStack - (s & VALUE)];          }          if ((s & TOP_IF_LONG_OR_DOUBLE) != 0 && (t == LONG || t == DOUBLE)) {            t=TOP;          }        }      }    } else {      t=inputLocals[i];    }    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputLocals,i);  }  if (edge > 0) {    for (i=0; i < nLocal; ++i) {      t=inputLocals[i];      changed|=merge(cw,t,frame.inputLocals,i);    }    if (frame.inputStack == null) {      frame.inputStack=new int[1];      changed=true;    }    changed|=merge(cw,edge,frame.inputStack,0);    return changed;  }  int nInputStack=inputStack.length + owner.inputStackTop;  if (frame.inputStack == null) {    frame.inputStack=new int[nInputStack + outputStackTop];    changed=true;  }  for (i=0; i < nInputStack; ++i) {    t=inputStack[i];    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputStack,i);  }  for (i=0; i < outputStackTop; ++i) {    s=outputStack[i];    dim=s & DIM;    kind=s & KIND;    if (kind == BASE) {      t=s;    } else {      if (kind == LOCAL) {        t=dim + inputLocals[s & VALUE];      } else {        t=dim + inputStack[nStack - (s & VALUE)];      }      if ((s & TOP_IF_LONG_OR_DOUBLE) != 0 && (t == LONG || t == DOUBLE)) {        t=TOP;      }    }    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputStack,nInputStack + i);  }  return changed;}  }
class C{  @Override protected int decryptMore() throws IOException {  int n=input.read(inBuffer);  if (n <= 0) {    return n;  }  streamOffset+=n;  decrypt();  padding=postDecryption(streamOffset);  return outBuffer.remaining();}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  s.writeInt(size());  int mask=elements.length - 1;  for (int i=head; i != tail; i=(i + 1) & mask)   s.writeObject(elements[i]);}  }
class C{  private static void reverseRange(Object[] a,int lo,int hi){  hi--;  while (lo < hi) {    Object t=a[lo];    a[lo++]=a[hi];    a[hi--]=t;  }}  }
class C{  public BinaryRefAddr(String addrType,byte[] src,int offset,int count){  super(addrType);  buf=new byte[count];  System.arraycopy(src,offset,buf,0,count);}  }
class C{  public static boolean isBoolean(String desc){  return desc.endsWith("Z");}  }
class C{  private static void parse(String xml,ContentHandler contentHandler) throws SAXException {  try {    XMLReader reader=new ExpatReader();    reader.setContentHandler(contentHandler);    reader.parse(new InputSource(new StringReader(xml)));  } catch (  IOException e) {    throw new AssertionError(e);  }}  }
class C{  private void remove(ThreadLocal<?> key){  Entry[] tab=table;  int len=tab.length;  int i=key.threadLocalHashCode & (len - 1);  for (Entry e=tab[i]; e != null; e=tab[i=nextIndex(i,len)]) {    if (e.get() == key) {      e.clear();      expungeStaleEntry(i);      return;    }  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.ActivationLimitDurationElement createActivationLimitDurationElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.ActivationLimitDurationElementImpl();}  }
class C{  private boolean findNodeFromTail(Node node){  Node t=tail;  for (; ; ) {    if (t == node)     return true;    if (t == null)     return false;    t=t.prev;  }}  }
class C{  public ConsoleException(String msg){  super(msg);  errList=new ArrayList(1);  errList.add(msg);}  }
class C{  protected void tearDown(){  try {    ds.close();    sds.close();  } catch (  Exception e) {  }}  }
class C{  public static Foo fetchByField2_First(boolean field2,OrderByComparator<Foo> orderByComparator){  return getPersistence().fetchByField2_First(field2,orderByComparator);}  }
class C{  @Override public JsonGenerator useDefaultPrettyPrinter(){  return this;}  }
class C{  protected FalseFileFilter(){}  }
class C{  public boolean isEditing(JTree a){  boolean returnValue=((TreeUI)(uis.elementAt(0))).isEditing(a);  for (int i=1; i < uis.size(); i++) {    ((TreeUI)(uis.elementAt(i))).isEditing(a);  }  return returnValue;}  }
class C{  @Deprecated protected TCKind(int _value){  this._value=_value;}  }
class C{  public int execute(String[] args){  argParser=new JavaPropertiesToolArgumentParser(JavaPropertiesTool.class.getName());  try {    argParser.initializeArguments();  } catch (  ArgumentException ae) {    LocalizableMessage message=ToolMessages.ERR_CANNOT_INITIALIZE_ARGS.get(ae.getMessage());    println(message);    return ErrorReturnCode.ERROR_UNEXPECTED.getReturnCode();  }  try {    argParser.parseArguments(args);  } catch (  ArgumentException ae) {    argParser.displayMessageAndUsageReference(getErrStream(),ERR_ERROR_PARSING_ARGS.get(ae.getMessage()));    return ErrorReturnCode.ERROR_USER_DATA.getReturnCode();  }  if (argParser.usageOrVersionDisplayed()) {    return ErrorReturnCode.SUCCESSFUL_NOP.getReturnCode();  }  Properties properties=new Properties();  BufferedReader reader;  String propertiesFile=argParser.propertiesFileArg.getValue();  try {    reader=new BufferedReader(new FileReader(propertiesFile));  } catch (  FileNotFoundException fnfe) {    println(ERR_JAVAPROPERTIES_WITH_PROPERTIES_FILE.get(propertiesFile));    return ErrorReturnCode.ERROR_USER_DATA.getReturnCode();  }  try {    updateProperties(reader,properties);  } catch (  IOException ioe) {    println(ERR_JAVAPROPERTIES_WITH_PROPERTIES_FILE.get(propertiesFile));    return ErrorReturnCode.ERROR_USER_DATA.getReturnCode();  }  String destinationFile=argParser.destinationFileArg.getValue();  BufferedWriter writer;  try {    File f=new File(destinationFile);    writer=new BufferedWriter(new FileWriter(f));    f.setReadable(true,false);  } catch (  IOException ioe) {    println(ERR_JAVAPROPERTIES_WITH_DESTINATION_FILE.get(destinationFile));    return ErrorReturnCode.ERROR_USER_DATA.getReturnCode();  }  Enumeration<?> propertyNames=properties.propertyNames();  boolean overwriteEnvJavaHome=true;  boolean overwriteEnvJavaArgs=true;  String defaultJavaHome=null;  String defaultJavaArgs=null;  while (propertyNames.hasMoreElements()) {    String name=propertyNames.nextElement().toString();    String value=properties.getProperty(name);    if (value != null) {      if (name.equalsIgnoreCase(DEFAULT_JAVA_HOME_PROP_NAME)) {        defaultJavaHome=value;      } else       if (name.equalsIgnoreCase(DEFAULT_JAVA_ARGS_PROP_NAME)) {        defaultJavaArgs=value;      } else       if (name.equalsIgnoreCase(OVERWRITE_ENV_JAVA_HOME_PROP_NAME)) {        if ("false".equalsIgnoreCase(value)) {          overwriteEnvJavaHome=false;        }      } else       if (name.equalsIgnoreCase(OVERWRITE_ENV_JAVA_ARGS_PROP_NAME)) {        if ("false".equalsIgnoreCase(value)) {          overwriteEnvJavaArgs=false;        }      }    }  }  try {    String value;    if (isWindows()) {      value=getWindowsContents(overwriteEnvJavaHome,overwriteEnvJavaArgs,defaultJavaHome,defaultJavaArgs,properties);    } else {      value=getUnixContents(overwriteEnvJavaHome,overwriteEnvJavaArgs,defaultJavaHome,defaultJavaArgs,properties);    }    writer.write(value);    writer.newLine();    writer.close();  } catch (  IOException ioe) {    println(getThrowableMsg(ERR_JAVAPROPERTIES_WRITING_DESTINATION_FILE.get(destinationFile),ioe));    return ErrorReturnCode.ERROR_WRITING_FILE.getReturnCode();  }  File f1=new File(argParser.destinationFileArg.getValue());  File f2=new File(argParser.destinationFileArg.getDefaultValue());  if (f1.equals(f2)) {    print(INFO_JAVAPROPERTIES_SUCCESSFUL.get(argParser.propertiesFileArg.getValue()));  } else {    print(INFO_JAVAPROPERTIES_SUCCESSFUL_NON_DEFAULT.get(argParser.destinationFileArg.getValue(),argParser.propertiesFileArg.getValue(),argParser.destinationFileArg.getDefaultValue()));  }  println();  return ErrorReturnCode.SUCCESSFUL.getReturnCode();}  }
class C{  public LDAPResult doOperation(ObjectFactory objFactory,ModifyRequest modifyRequest,List<org.opends.server.types.Control> controls) throws IOException, LDAPException, DecodeException {  LDAPResult modResponse=objFactory.createLDAPResult();  modResponse.setRequestID(modifyRequest.getRequestID());  ArrayList<RawModification> modifications=new ArrayList<>();  List<DsmlModification> mods=modifyRequest.getModification();  for (  DsmlModification attr : mods) {    String operation=attr.getOperation();    ModificationType type=ModificationType.ADD;    if (operation.equals("delete")) {      type=ModificationType.DELETE;    } else     if (operation.equals("replace")) {      type=ModificationType.REPLACE;    }    String attrType=attr.getName();    ArrayList<ByteString> values=new ArrayList<>();    for (    Object val : attr.getValue()) {      values.add(ByteStringUtility.convertValue(val));    }    LDAPAttribute ldapAttr=new LDAPAttribute(attrType,values);    LDAPModification ldapMod=new LDAPModification(type,ldapAttr);    modifications.add(ldapMod);  }  ByteString dnStr=ByteString.valueOfUtf8(modifyRequest.getDn());  ProtocolOp op=new ModifyRequestProtocolOp(dnStr,modifications);  LDAPMessage msg=new LDAPMessage(DSMLServlet.nextMessageID(),op,controls);  connection.getLDAPWriter().writeMessage(msg);  LDAPMessage responseMessage=connection.getLDAPReader().readMessage();  ModifyResponseProtocolOp modOp=responseMessage.getModifyResponseProtocolOp();  int resultCode=modOp.getResultCode();  LocalizableMessage errorMessage=modOp.getErrorMessage();  modResponse.setErrorMessage(errorMessage != null ? errorMessage.toString() : null);  ResultCode code=ResultCodeFactory.create(objFactory,resultCode);  modResponse.setResultCode(code);  return modResponse;}  }
class C{  private void initDiagnostics(){  Class clazz=this.getClass();  ClassLoader classLoader=getClassLoader(clazz);  String classLoaderName;  try {    if (classLoader == null) {      classLoaderName="BOOTLOADER";    } else {      classLoaderName=objectId(classLoader);    }  } catch (  SecurityException e) {    classLoaderName="UNKNOWN";  }  diagnosticPrefix="[LogFactoryImpl@" + System.identityHashCode(this) + " from "+ classLoaderName+ "] ";}  }
class C{  public static Process executeFile(final String fileName){  try {    final String command="cmd /c \"" + fileName + "\"";    logger.info(command);    return Runtime.getRuntime().exec(command);  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public AllAppsSearchBarController newDefaultAppSearchController(){  return new DefaultAppSearchController(getContext(),this,mAppsRecyclerView);}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"CUSTOMER\" ("+ "\"_id\" INTEGER PRIMARY KEY ,"+ "\"NAME\" TEXT NOT NULL );");}  }
class C{  public long popLong(){  BaseTypeWrapper wrapper=(BaseTypeWrapper)this.pop();  Long value=(Long)wrapper.getValue();  return value.longValue();}  }
class C{  public PAOSRequest(String responseConsumerURL,String service,String messageID,Boolean mustUnderstand,String actor) throws PAOSException {  this.responseConsumerURL=responseConsumerURL;  this.service=service;  this.messageID=messageID;  this.mustUnderstand=mustUnderstand;  this.actor=actor;  validateData();}  }
class C{  public boolean isDataFlavorSupported(DataFlavor flavor){  return proxy.isDataFlavorSupported(flavor);}  }
class C{  public final boolean contains(String key){  for (int i=0; i < m_firstFree; i++) {    if (m_map[i].equals(key))     return true;  }  return false;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String idName=getStringOptionValue(ARGUMENT_ID_NAME);  String type=getStringOptionValue(ARGUMENT_ID_TYPE);  List privileges=(List)rc.getOption(IArgument.PRIVILEGES);  IdType idType=convert2IdType(type);  String[] params={realm,type,idName};  try {    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_IDREPO_ADD_PRIVILEGES",params);    DelegationManager mgr=new DelegationManager(adminSSOToken,realm);    Set privilegeObjects=mgr.getPrivileges();    AMIdentity amid;    if (idType.equals(IdType.ROLE) && idName.equalsIgnoreCase(ALL_AUTHENTICATED_USERS)) {      amid=new AMIdentity(adminSSOToken,idName,idType,"/",null);    } else {      amid=new AMIdentity(adminSSOToken,idName,idType,realm,null);      if (!amid.isExists()) {        Object[] p={idName,type};        throw new CLIException(MessageFormat.format(getResourceString("idrepo-add-privileges-do-not-exist"),p),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);      }    }    String uid=amid.getUniversalId();    DelegationPrivilege newDp=null;    for (Iterator i=privileges.iterator(); i.hasNext(); ) {      String name=(String)i.next();      DelegationPrivilege dp=getDelegationPrivilege(name,privilegeObjects);      if (dp != null) {        Set subjects=dp.getSubjects();        if (!subjects.contains(uid)) {          subjects.add(uid);          newDp=new DelegationPrivilege(name,subjects,realm);          mgr.addPrivilege(newDp);        } else {          String[] args={idName,name};          String msg=MessageFormat.format(getResourceString("delegation-already-has-privilege"),(Object[])args);          throw new CLIException(msg,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);        }      } else {        Set subjects=new HashSet(2);        subjects.add(uid);        newDp=new DelegationPrivilege(name,subjects,realm);        mgr.addPrivilege(newDp);      }    }    outputWriter.printlnMessage(MessageFormat.format(getResourceString("idrepo-add-privileges-succeed"),(Object[])params));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_IDREPO_ADD_PRIVILEGES",params);  } catch (  IdRepoException e) {    String[] args={realm,type,idName,e.getMessage()};    debugError("AddPrivileges.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_IDREPO_ADD_PRIVILEGES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  DelegationException e) {    String[] args={realm,type,idName,e.getMessage()};    debugError("AddPrivileges.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_IDREPO_ADD_PRIVILEGES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={realm,type,idName,e.getMessage()};    debugError("AddPrivileges.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_IDREPO_ADD_PRIVILEGES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  boolean longArgumentsCaseSensitive(){  return longArgumentsCaseSensitive;}  }
class C{  private TestCfg(){}  }
class C{  public SmallSet(Collection<? extends E> c){  addAll(c);}  }
class C{  public void addSwipeListener(SwipeListener listener){  if (mListeners == null) {    mListeners=new ArrayList<SwipeListener>();  }  mListeners.add(listener);}  }
class C{  public byte[] bytes(){  return bytes;}  }
class C{  private boolean processPreOperation(){  for (  SynchronizationProvider<?> provider : getSynchronizationProviders()) {    try {      if (!processOperationResult(this,provider.doPreOperation(this))) {        return false;      }    } catch (    DirectoryException de) {      logger.traceException(de);      logger.error(ERR_MODDN_SYNCH_PREOP_FAILED,getConnectionID(),getOperationID(),getExceptionMessage(de));      setResponseData(de);      return false;    }  }  return true;}  }
class C{  @Override public boolean onCreateOptionsMenu(Menu menu){  menu.add(Menu.NONE,MENU_HELP,Menu.NONE,getString(R.string.help)).setIcon(android.R.drawable.ic_menu_help).setAlphabeticShortcut('h');  return super.onCreateOptionsMenu(menu);}  }
class C{  boolean isValidProtocolType(String protocolType) throws COTException {  String classMethod="COTManager:isValidProtocolType";  if (!COTUtils.isValidProtocolType(protocolType)) {    debug.error(classMethod + "Invalid protocol Type " + protocolType);    String[] data={protocolType};    throw new COTException("invalidProtocolType",data);  }  return true;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  mDetector=new GestureDetector(this,new OnGestureListener());  requestWindowFeature(Window.FEATURE_NO_TITLE);  getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);  setContentView(R.layout.test_item);  mIndex=getIntent().getIntExtra("ITEM_INDEX",0);  setTitle(TestList.get(mIndex).getTestName());  addFragment(TestList.get(mIndex));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodedocumentfragmentnodename.class,args);}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.EncryptionMethodElement createEncryptionMethodElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.EncryptionMethodElementImpl();}  }
class C{  private void allocate_sections(int p_section_count){  section_list.ensureCapacity(p_section_count);  while (section_list.size() < p_section_count) {    section_list.add(new MazeSearchElement());  }}  }
class C{  public void testKeyPairGenerator12(){  int[] keys={-1,-250,1,64,512,1024};  SecureRandom random=new SecureRandom();  AlgorithmParameterSpec aps;  KeyPairGenerator mKPG=new MyKeyPairGenerator1("");  assertEquals("Incorrect algorithm",mKPG.getAlgorithm(),MyKeyPairGenerator1.getResAlgorithm());  mKPG.generateKeyPair();  mKPG.genKeyPair();  for (int i=0; i < keys.length; i++) {    try {      mKPG.initialize(keys[i]);      fail("InvalidParameterException must be thrown (key: " + Integer.toString(keys[i]) + ")");    } catch (    InvalidParameterException e) {    }    try {      mKPG.initialize(keys[i],random);      fail("InvalidParameterException must be thrown (key: " + Integer.toString(keys[i]) + ")");    } catch (    InvalidParameterException e) {    }  }  try {    mKPG.initialize(100,null);    fail("InvalidParameterException must be thrown when random is null");  } catch (  InvalidParameterException e) {  }  mKPG.initialize(100,random);  assertEquals("Incorrect random",random,((MyKeyPairGenerator1)mKPG).secureRandom);  assertEquals("Incorrect keysize",100,((MyKeyPairGenerator1)mKPG).keySize);  try {    mKPG.initialize(null,random);    fail("InvalidAlgorithmParameterException must be thrown when param is null");  } catch (  InvalidAlgorithmParameterException e) {  }  if (DSASupported) {    BigInteger bInt=new BigInteger("1");    aps=new java.security.spec.DSAParameterSpec(bInt,bInt,bInt);    try {      mKPG.initialize(aps,null);      fail("InvalidParameterException must be thrown when random is null");    } catch (    InvalidParameterException e) {    }catch (    InvalidAlgorithmParameterException e) {      fail("Unexpected InvalidAlgorithmParameterException was thrown");    }    try {      mKPG.initialize(aps,random);      assertEquals("Incorrect random",random,((MyKeyPairGenerator1)mKPG).secureRandom);      assertEquals("Incorrect params",aps,((MyKeyPairGenerator1)mKPG).paramSpec);    } catch (    InvalidAlgorithmParameterException e) {      fail("Unexpected InvalidAlgorithmParameterException was thrown");    }  }}  }
class C{  protected static boolean shouldCreateExternalURLForService(Log log,Service service,String id){  if ("kubernetes".equals(id) || "kubernetes-ro".equals(id)) {    return false;  }  Set<Integer> ports=KubernetesHelper.getPorts(service);  log.debug("Service " + id + " has ports: "+ ports);  if (ports.size() == 1) {    String type=null;    ServiceSpec spec=service.getSpec();    if (spec != null) {      type=spec.getType();      if (Objects.equals(type,"LoadBalancer")) {        return true;      }    }    log.info("Not generating route for service " + id + " type is not LoadBalancer: "+ type);    return false;  } else {    log.info("Not generating route for service " + id + " as only single port services are supported. Has ports: "+ ports);    return false;  }}  }
class C{  public boolean webEnabled(){  String url=getWebEnabledURL();  return (url != null) && (url.length() > 0);}  }
class C{  public void addEmptyValues(Set names){  Iterator itr=names.iterator();  while (itr.hasNext()) {    String name=(String)itr.next();    if (!byteValues) {      put(name,new HashSet());    } else {      addNegativeByteAttr(name);    }  }}  }
class C{  public com.sun.identity.liberty.ws.soapbinding.jaxb11.ServiceInstanceUpdateElement createServiceInstanceUpdateElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.soapbinding.jaxb11.impl.ServiceInstanceUpdateElementImpl();}  }
class C{  public FileCacheImageInputStream(InputStream stream,File cacheDir) throws IOException {  if (stream == null) {    throw new IllegalArgumentException("stream == null!");  }  if ((cacheDir != null) && !(cacheDir.isDirectory())) {    throw new IllegalArgumentException("Not a directory!");  }  this.stream=stream;  if (cacheDir == null)   this.cacheFile=Files.createTempFile("imageio",".tmp").toFile(); else   this.cacheFile=Files.createTempFile(cacheDir.toPath(),"imageio",".tmp").toFile();  this.cache=new RandomAccessFile(cacheFile,"rw");  this.closeAction=StreamCloser.createCloseAction(this);  StreamCloser.addToQueue(closeAction);  disposerRecord=new StreamDisposerRecord(cacheFile,cache);  if (getClass() == FileCacheImageInputStream.class) {    disposerReferent=new Object();    Disposer.addRecord(disposerReferent,disposerRecord);  } else {    disposerReferent=new StreamFinalizer(this);  }}  }
class C{  protected void serializeEntityReference(EntityReference node,boolean bStart) throws SAXException {  if (bStart) {    EntityReference eref=node;    if ((fFeatures & ENTITIES) != 0) {      if ((fFeatures & WELLFORMED) != 0) {        isEntityReferneceWellFormed(node);      }      if ((fFeatures & NAMESPACES) != 0) {        checkUnboundPrefixInEntRef(node);      }    }    if (fLexicalHandler != null) {      fLexicalHandler.startEntity(eref.getNodeName());    }  } else {    EntityReference eref=node;    if (fLexicalHandler != null) {      fLexicalHandler.endEntity(eref.getNodeName());    }  }}  }
class C{  public String boxedTypeName(String typeName){  return LanguageUtil.getRename(typeName,BOXED_TYPE_MAP);}  }
class C{  private static void validateValue(TypeRef type,String value){  Type descType=type.getKind();switch (descType) {case TYPE_BOOL:    String lowerCaseValue=value.toLowerCase();  if (lowerCaseValue.equals("true") || lowerCaseValue.equals("false")) {    return;  }break;case TYPE_DOUBLE:case TYPE_FLOAT:if (Pattern.matches("[+-]?([0-9]*[.])?[0-9]+",value)) {return;}break;case TYPE_INT64:case TYPE_UINT64:case TYPE_SINT64:case TYPE_FIXED64:case TYPE_SFIXED64:case TYPE_INT32:case TYPE_UINT32:case TYPE_SINT32:case TYPE_FIXED32:case TYPE_SFIXED32:if (Pattern.matches("[+-]?[0-9]+",value)) {return;}break;case TYPE_STRING:case TYPE_BYTES:Matcher matcher=Pattern.compile("([^\\\"']*)").matcher(value);if (matcher.matches()) {return;}break;default :throw new IllegalArgumentException("Tried to assign value for unsupported type " + type + "; value "+ value);}throw new IllegalArgumentException("Could not assign value '" + value + "' to type "+ type);}  }
class C{  void addControls(Request request){  if (sortControl != null && request instanceof SearchRequest) {    request.addControl(sortControl);  }  if (followReferralsControl != null) {    request.addControl(followReferralsControl);  }}  }
class C{  public DefaultComboBoxModel(final E items[]){  objects=new Vector<E>(items.length);  int i, c;  for (i=0, c=items.length; i < c; i++)   objects.addElement(items[i]);  if (getSize() > 0) {    selectedObject=getElementAt(0);  }}  }
class C{  public static int strcmp(String str,char[] a,int start){  int i;  int d;  int len=str.length();  for (i=0; i < len; i++) {    d=(int)str.charAt(i) - a[start + i];    if (d != 0) {      return d;    }    if (a[start + i] == 0) {      return d;    }  }  if (a[start + i] != 0) {    return -a[start + i];  }  return 0;}  }
class C{  public org.omg.CORBA.TypeCode _type(){  return ORB.init().get_primitive_tc(TCKind.tk_float);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementsetattributens01.class,args);}  }
class C{  public List<Integer> findCheapestPath(int begin,int end,float[][] matrix){  init(matrix);  floyd(matrix);  result.add(begin);  findPath(begin,end);  result.add(end);  return result;}  }
class C{  protected final void connect() throws IOException {  if (connection != null) {    return;  }  if (routeSelector == null) {    String uriHost=uri.getHost();    if (uriHost == null) {      throw new UnknownHostException(uri.toString());    }    SSLSocketFactory sslSocketFactory=null;    HostnameVerifier hostnameVerifier=null;    if (uri.getScheme().equalsIgnoreCase("https")) {      sslSocketFactory=client.getSslSocketFactory();      hostnameVerifier=client.getHostnameVerifier();    }    Address address=new Address(uriHost,getEffectivePort(uri),sslSocketFactory,hostnameVerifier,client.getAuthenticator(),client.getProxy(),client.getTransports());    routeSelector=new RouteSelector(address,uri,client.getProxySelector(),client.getConnectionPool(),Dns.DEFAULT,client.getRoutesDatabase());  }  connection=routeSelector.next(method);  if (!connection.isConnected()) {    connection.connect(client.getConnectTimeout(),client.getReadTimeout(),getTunnelConfig());    client.getConnectionPool().maybeShare(connection);    client.getRoutesDatabase().connected(connection.getRoute());  } else {    connection.updateReadTimeout(client.getReadTimeout());  }  connected(connection);  if (connection.getRoute().getProxy() != client.getProxy()) {    requestHeaders.getHeaders().setRequestLine(getRequestLine());  }}  }
class C{  public static int strcmp(char[] a,int startA,char[] b,int startB){  for (; a[startA] == b[startB]; startA++, startB++) {    if (a[startA] == 0) {      return 0;    }  }  return a[startA] - b[startB];}  }
class C{  public static ValueExp plus(ValueExp value1,ValueExp value2){  return new BinaryOpValueExp(PLUS,value1,value2);}  }
class C{  protected void uninstallKeyboardActions(){  SwingUtilities.replaceUIActionMap(splitPane,null);  SwingUtilities.replaceUIInputMap(splitPane,JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT,null);}  }
class C{  public PropertyXMLBuilder(String serviceName,Set schemaTypes,AMModel model) throws SMSException, SSOException {  this.model=model;  this.schemaTypes=schemaTypes;  this.serviceName=serviceName;  svcSchemaManager=new ServiceSchemaManager(serviceName,model.getUserSSOToken());  getServiceResourceBundle();  if (loadSectionOrder()) {    getSectionsForType();  }  if (serviceBundle != null) {    mapTypeToAttributeSchema=getAttributeSchemas(serviceName);  }}  }
class C{  public static boolean isXML11Content(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_CONTENT) != 0) || (0x10000 <= c && c <= 0x10FFFF);}  }
class C{  private void searchUpdateSent() throws Exception {  assertEquals(searchNbMonitorEntries("(sent-updates=" + WINDOW_SIZE + ")"),1);  final int nb=searchNbMonitorEntries("(missing-changes=" + (REPLICATION_QUEUE_SIZE + WINDOW_SIZE) + ")");  assertEquals(nb,1);}  }
class C{  public PdfDocumentEvent(String type,PdfPage page){  super(type);  this.page=page;  this.document=page.getDocument();}  }
class C{  protected void stopListening(){  setListen(false);  Selector selector=this.selector.get();  if (selector != null) {    try {      selector.wakeup();      int count=0;      while (running && count < 50) {        Thread.sleep(100);        count++;      }      if (running) {        log.warn(sm.getString("nioReceiver.stop.threadRunning"));      }      closeSelector();    } catch (    Exception x) {      log.error(sm.getString("nioReceiver.stop.fail"),x);    } finally {      this.selector.set(null);    }  }}  }
class C{  public X509Attribute(String oid,ASN1EncodableVector value){  this.attr=new Attribute(new ASN1ObjectIdentifier(oid),new DERSet(value));}  }
class C{  public StackTraceElement(String declaringClass,String methodName,String fileName,int lineNumber){  this.declaringClass=Objects.requireNonNull(declaringClass,"Declaring class is null");  this.methodName=Objects.requireNonNull(methodName,"Method name is null");  this.fileName=fileName;  this.lineNumber=lineNumber;}  }
class C{  public synchronized void openDriver(SurfaceHolder holder) throws IOException {  Camera theCamera=camera;  if (theCamera == null) {    if (requestedCameraId >= 0) {      theCamera=OpenCameraInterface.open(requestedCameraId);    } else {      theCamera=OpenCameraInterface.open();    }    if (theCamera == null) {      throw new IOException();    }    camera=theCamera;  }  theCamera.setPreviewDisplay(holder);  if (!initialized) {    initialized=true;    configManager.initFromCameraParameters(theCamera);  }  Camera.Parameters parameters=theCamera.getParameters();  String parametersFlattened=parameters == null ? null : parameters.flatten();  try {    configManager.setDesiredCameraParameters(theCamera,false);  } catch (  RuntimeException re) {    Log.w(TAG,"Camera rejected parameters. Setting only minimal safe-mode parameters");    Log.i(TAG,"Resetting to saved camera params: " + parametersFlattened);    if (parametersFlattened != null) {      parameters=theCamera.getParameters();      parameters.unflatten(parametersFlattened);      try {        theCamera.setParameters(parameters);        configManager.setDesiredCameraParameters(theCamera,true);      } catch (      RuntimeException re2) {        Log.w(TAG,"Camera rejected even safe-mode parameters! No configuration");      }    }  }}  }
class C{  private static void enumerateBindings(NamingEnumeration<?> bindings,Properties properties) throws NamingException {  boolean syncProviderObj=false;  try {    Binding bd=null;    Object elementObj=null;    String element=null;    while (bindings.hasMore()) {      bd=(Binding)bindings.next();      element=bd.getName();      elementObj=bd.getObject();      if (!(ic.lookup(element) instanceof Context)) {        if (ic.lookup(element) instanceof SyncProvider) {          syncProviderObj=true;        }      }      if (syncProviderObj) {        SyncProvider sync=(SyncProvider)elementObj;        properties.put(SyncFactory.ROWSET_SYNC_PROVIDER,sync.getProviderID());        syncProviderObj=false;      }    }  } catch (  javax.naming.NotContextException e) {    bindings.next();    enumerateBindings(bindings,properties);  }}  }
class C{  public boolean delete(long id){  return database.delete(DATABASE_TABLE,KEY_ID + "=" + id,null) > 0;}  }
class C{  void printLineForShortLongArgument(final Argument a,final StringBuilder buffer){  final Character shortID=a.getShortIdentifier();  final String longID=a.getLongIdentifier();  if (shortID != null) {    if (isUsageArgument(a)) {      buffer.append("-?, ");    }    buffer.append("-");    buffer.append(shortID.charValue());    if (a.needsValue() && longID == null) {      buffer.append(" ");      buffer.append(a.getValuePlaceholder());    }    if (longID != null) {      final StringBuilder newBuffer=new StringBuilder();      newBuffer.append(", --");      newBuffer.append(longID);      if (a.needsValue()) {        newBuffer.append(" ");        newBuffer.append(a.getValuePlaceholder());      }      final int currentLength=buffer.length();      final int lineLength=(buffer.length() - currentLength) + newBuffer.length();      if (lineLength > MAX_LINE_WIDTH) {        buffer.append(EOL);      }      buffer.append(newBuffer);    }    buffer.append(EOL);  } else   if (longID != null) {    if (isUsageArgument(a)) {      buffer.append("-?, ");    }    buffer.append("--");    buffer.append(longID);    if (a.needsValue()) {      buffer.append(" ");      buffer.append(a.getValuePlaceholder());    }    buffer.append(EOL);  }}  }
class C{  public void registerAboveContentView(View v,LayoutParams params){  if (!mBroadcasting)   mViewAbove=v;}  }
class C{  protected void checkForClickInExpandControl(TreePath path,int mouseX,int mouseY){  if (isLocationInExpandControl(path,mouseX,mouseY)) {    handleExpandControlClick(path,mouseX,mouseY);  }}  }
class C{  public SMSubConfig(String id,String name,String type,String localizedName,boolean hidden){  this.id=id;  this.name=name;  this.type=type;  this.localizedName=localizedName;  this.hidden=hidden;}  }
class C{  public void checkNumberArgs(int argNum) throws WrongNumberArgsException {  if (argNum != 1)   reportWrongNumberArgs();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document ownerDocument;  doc=(Document)load("staff",false);  ownerDocument=doc.getOwnerDocument();  assertNull("documentOwnerDocumentNull",ownerDocument);}  }
class C{  public static boolean isThreadContentionMonitoringEnabled(){  return threadMXBean.isThreadContentionMonitoringEnabled();}  }
class C{  public void testGetSignerCertPath(){  assertSame(new CodeSigner(cpath,null).getSignerCertPath(),cpath);}  }
class C{  private String crawlCode(String content){  String result="";  String resultSpan="";  String resultParagraph="";  String resultDiv="";  resultSpan=getTagContent("span",content);  resultParagraph=getTagContent("p",content);  resultDiv=getTagContent("div",content);  result=resultSpan;  if (resultParagraph.length() > resultSpan.length() && resultParagraph.length() >= resultDiv.length())   result=resultParagraph; else   if (resultParagraph.length() > resultSpan.length() && resultParagraph.length() < resultDiv.length())   result=resultDiv; else   result=resultParagraph;  return htmlDecode(result);}  }
class C{  public TransformerConfigurationException(String message,SourceLocator locator,Throwable e){  super(message,locator,e);}  }
class C{  private File writeTempSchemaFile(Schema schema,Collection<Attribute> extraAttributes,String schemaFile) throws DirectoryException, IOException, LDIFException {  org.opends.server.types.Entry schemaEntry=createEmptySchemaEntry();  Set<ByteString> values=getValuesForSchemaFile(getCustomSyntaxes(schema),schemaFile);  addAttribute(schemaEntry,ldapSyntaxesType,values);  values=getAttributeTypeValuesForSchemaFile(schema,schemaFile);  addAttribute(schemaEntry,attributeTypesType,values);  values=getObjectClassValuesForSchemaFile(schema,schemaFile);  addAttribute(schemaEntry,objectClassesType,values);  values=getValuesForSchemaFile(schema.getNameForms(),schemaFile);  addAttribute(schemaEntry,nameFormsType,values);  values=getValuesForSchemaFile(schema.getDITContentRules(),schemaFile);  addAttribute(schemaEntry,ditContentRulesType,values);  values=getDITStructureRuleValuesForSchemaFile(schema,schemaFile);  addAttribute(schemaEntry,ditStructureRulesType,values);  values=getValuesForSchemaFile(schema.getMatchingRuleUses(),schemaFile);  addAttribute(schemaEntry,matchingRuleUsesType,values);  if (FILE_USER_SCHEMA_ELEMENTS.equals(schemaFile)) {    for (    Attribute attribute : extraAttributes) {      AttributeType attributeType=attribute.getAttributeDescription().getAttributeType();      schemaEntry.putAttribute(attributeType,newArrayList(attribute));    }  }  File tempFile=File.createTempFile(schemaFile,"temp");  LDIFExportConfig exportConfig=new LDIFExportConfig(tempFile.getAbsolutePath(),ExistingFileBehavior.OVERWRITE);  try (LDIFWriter ldifWriter=new LDIFWriter(exportConfig)){    ldifWriter.writeEntry(schemaEntry);  }   return tempFile;}  }
class C{  @Override public boolean isFullSpan(){  return true;}  }
class C{  public void printStackTrace(){  System.err.println(fetchStackTrace());}  }
class C{  public Wood(TreeSpecies species){  this(DEFAULT_TYPE,species);}  }
class C{  @Override public boolean ready() throws IOException {  return false;}  }
class C{  private void readLyrics3Tag(File file,RandomAccessFile newFile,int loadOptions) throws IOException {}  }
class C{  public void testBlob() throws Exception, IOException {  byte[] b=new byte[4];  byte[] b128=new byte[128];  for (int i=0; i < b128.length; i++) {    b128[i]=(byte)i;  }  Blob blob=db.open_blob(dbFile.getPath(),"B","val",1,true);  try {    OutputStream os=blob.getOutputStream();    os.write(b128);    os.close();    InputStream is=blob.getInputStream();    is.skip(96);    assertEquals(4,is.read(b));    is.close();  }  finally {    blob.close();  }}  }
class C{  protected SSLSocketInputStream(SSLSocketImpl owner){  this.owner=owner;}  }
class C{  public int indexOfIdenticalObject(Object obj){  NSObject nso=NSObject.wrap(obj);  for (int i=0; i < array.length; i++) {    if (array[i] == nso) {      return i;    }  }  return -1;}  }
class C{  public void writeUnbindRequest(final int messageID,final UnbindRequest request) throws IOException {  logger.trace("ENCODE LDAP UNBIND REQUEST(messageID=%d, request=%s)",messageID,request);  writeMessageHeader(messageID);{    writer.writeNull(LDAP.OP_TYPE_UNBIND_REQUEST);  }  writeMessageFooter(request.getControls());}  }
class C{  public PdfStream(byte[] bytes){  this(bytes,CompressionConstants.UNDEFINED_COMPRESSION);}  }
class C{  @Inject InternalSessionStore(SessionServiceConfig config){  cache=new ConcurrentHashMap<>(config.getMaxSessions());}  }
class C{  private void interruptIdleWorkers(boolean onlyOne){  final ReentrantLock mainLock=this.mainLock;  mainLock.lock();  try {    for (    Worker w : workers) {      Thread t=w.thread;      if (!t.isInterrupted() && w.tryLock()) {        try {          t.interrupt();        } catch (        SecurityException ignore) {        } finally {          w.unlock();        }      }      if (onlyOne)       break;    }  }  finally {    mainLock.unlock();  }}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'CHAT_CACHE_ENTITY' ("+ "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ,"+ "'MEETINGID' TEXT,"+ "'USERID' TEXT,"+ "'CONTENT' TEXT,"+ "'SENDTIME' TEXT,"+ "'ISREAD' INTEGER);");}  }
class C{  public static <T>boolean exists(Collection<T> collection,Predicate<T> predicate){  if (CollectionUtils.isEmpty(collection)) {    return false;  }  if (predicate == null) {    return false;  }  for (  T element : collection) {    if (predicate.evaluate(element)) {      return true;    }  }  return false;}  }
class C{  void handleClient() throws IOException {  InputStream is=new BufferedInputStream(s.getInputStream());  PrintStream ps=new PrintStream(s.getOutputStream());  int nread=0;  s.setSoTimeout(mTimeout);  s.setTcpNoDelay(true);  do {    nread=parseStatusLine(is);    if (requestMethod != UNKNOWN_METHOD) {      nread=readHeaders(is);      pathToRequest().put(path,new Request(path,headers));      if (headers.get(requestHeaders[REQ_CONTENT_LENGTH]) != null) {        nread=readContent(is);      }    } else {      if (nread > 0) {        ps.print(HTTP_VERSION_STRING + " " + HTTP_BAD_METHOD+ " unsupported method type: ");        ps.write(buf,0,5);        ps.write(EOL);        ps.flush();      } else {      }      if (!keepAlive || nread <= 0) {        headers.clear();        readStarted=false;        log("SOCKET CLOSED");        s.close();        return;      }    }    testNum=-1;    printStatus(ps);    printHeaders(ps);    psWriteEOL(ps);    if (redirectCode == -1) {switch (requestMethod) {case GET_METHOD:        if ((testNum < -1) || (testNum > Support_TestWebData.tests.length - 1)) {          send404(ps);        } else {          sendFile(ps);        }      break;case HEAD_METHOD:    break;case POST_METHOD:  if ((testNum > 0) || (testNum < Support_TestWebData.tests.length - 1)) {    sendFile(ps);  }break;default :break;}} else {switch (redirectCode) {case 301:psPrint(ps,Support_TestWebData.testServerResponse[Support_TestWebData.REDIRECT_301]);break;case 302:psPrint(ps,Support_TestWebData.testServerResponse[Support_TestWebData.REDIRECT_302]);break;case 303:psPrint(ps,Support_TestWebData.testServerResponse[Support_TestWebData.REDIRECT_303]);break;case 307:psPrint(ps,Support_TestWebData.testServerResponse[Support_TestWebData.REDIRECT_307]);break;default :break;}}ps.flush();readStarted=false;headers.clear();} while (keepAlive);log("SOCKET CLOSED");s.close();}  }
class C{  public synchronized void terminate(){  this.shouldTerminate=true;  this.notify();}  }
class C{  private void syncUIControlState(){  boolean disableControls=(mWZBroadcast == null || !(mWZBroadcast.getStatus().isIdle() || mWZBroadcast.getStatus().isRunning()));  if (disableControls) {    mBtnBroadcast.setEnabled(false);    mBtnSettings.setEnabled(false);    mBtnLoop.setEnabled(false);    mBtnFileSelect.setEnabled(false);  } else {    boolean isStreaming=mWZBroadcast.getStatus().isRunning();    mBtnBroadcast.setState(isStreaming);    mBtnBroadcast.setEnabled(mMP4FileUri != null);    mBtnSettings.setEnabled(!isStreaming);    mBtnFileSelect.setEnabled(!isStreaming);  }}  }
class C{  public boolean equals(Object object){  return (object != null && object instanceof Media && object.getClass() == this.getClass() && ((Media)object).getValue() == this.getValue());}  }
class C{  @Override protected void importBackend(InputStream input) throws DirectoryException {  Backend<?> backend=getBackend();  LDIFImportConfig importConfig=null;  ImportExportContext ieCtx=getImportExportContext();  try {    if (!backend.supports(BackendOperation.LDIF_IMPORT)) {      ieCtx.setExceptionIfNoneSet(new DirectoryException(OTHER,ERR_INIT_IMPORT_NOT_SUPPORTED.get(backend.getBackendID())));      return;    }    importConfig=new LDIFImportConfig(input);    importConfig.setIncludeBranches(newLinkedHashSet(getBaseDN()));    importConfig.setValidateSchema(false);    importConfig.setInvokeImportPlugins(true);    importErrorMessageId=-1;    File rejectsFile=getFileForPath("logs" + File.separator + "replInitRejectedEntries");    importConfig.writeRejectedEntries(rejectsFile.getAbsolutePath(),ExistingFileBehavior.OVERWRITE);    preBackendImport(backend);    backend.importLDIF(importConfig,DirectoryServer.getInstance().getServerContext());  } catch (  Exception e) {    ieCtx.setExceptionIfNoneSet(new DirectoryException(ResultCode.OTHER,ERR_INIT_IMPORT_FAILURE.get(stackTraceToSingleLineString(e))));  } finally {    try {      if (importConfig != null) {        importConfig.close();        closeBackendImport(backend);        backend=getBackend();      }      loadDataState();      if (ieCtx.getException() != null) {        generationId=computeGenerationId();        saveGenerationId(generationId);      }    } catch (    DirectoryException fe) {      ieCtx.setExceptionIfNoneSet(new DirectoryException(ResultCode.OTHER,ERR_INIT_IMPORT_FAILURE.get(stackTraceToSingleLineString(fe))));    }  }  if (ieCtx.getException() != null) {    throw ieCtx.getException();  }}  }
class C{  public void createPolicy(String realmName,Policy policy) throws AMConsoleException {  try {    String[] params={realmName,policy.getName()};    logEvent("ATTEMPT_CREATE_POLICY",params);    PolicyManager policyManager=getPolicyManager(realmName);    policyManager.addPolicy(policy);    logEvent("SUCCEED_CREATE_POLICY",params);  } catch (  PolicyException e) {    String strError=getErrorString(e);    String[] params={realmName,policy.getName(),strError};    logEvent("POLICY_EXCEPTION_CREATE_POLICY",params);    throw new AMConsoleException(getErrorString(e));  }catch (  SSOException e) {    String strError=getErrorString(e);    String[] params={realmName,policy.getName(),strError};    logEvent("SSO_EXCEPTION_CREATE_POLICY",params);    throw new AMConsoleException(getErrorString(e));  }}  }
class C{  public AMClientCapException(String rbName,String eCode,Object[] a){  bundleName=rbName;  errorCode=eCode;  args=a;  message=getL10NMessage(java.util.Locale.ENGLISH);}  }
class C{  public static DN newDN(String orgName){  if (orgName == null || orgName.startsWith("/") || !orgName.contains("=")) {    return DN.rootDN();  } else {    return DN.valueOf(orgName);  }}  }
class C{  public void initEncoder(AudioConsumer ac) throws IOException {  writer=new OpusWriter(ac);  IntBuffer error=IntBuffer.allocate(4);  this.opusEncoder=JNAOpus.INSTANCE.opus_encoder_create(SpeechConfiguration.SAMPLE_RATE,SpeechConfiguration.AUDIO_CHANNELS,JNAOpus.OPUS_APPLICATION_VOIP,error);}  }
class C{  public MinExpiresParser(String minExpires){  super(minExpires);}  }
class C{  public Future<E> pollAsync(){  int idx=getNextPoll();  Future<E> result=null;  final ReentrantLock lock=this.locks[idx];  try {    lock.lock();    E item=items[idx].poll();    if (item == null) {      ExchangeCountDownLatch<E> c=new ExchangeCountDownLatch<>(1);      waiters[idx].addLast(c);      result=new ItemFuture<>(c);    } else {      result=new ItemFuture<>(item);    }  }  finally {    lock.unlock();  }  return result;}  }
class C{  @Inject public ClientCredentialsGrantTypeHandler(ClientAuthenticator clientAuthenticator,List<ClientCredentialsRequestValidator> requestValidators,TokenStore tokenStore,OAuth2UrisFactory urisFactory,OAuth2ProviderSettingsFactory providerSettingsFactory){  super(providerSettingsFactory,urisFactory,clientAuthenticator);  this.requestValidators=requestValidators;  this.tokenStore=tokenStore;}  }
class C{  public void test_loadLjava_security_KeyStoreLoadStoreParameter() throws Exception {  KeyStore.getInstance(KeyStore.getDefaultType()).load(null);}  }
class C{  public RepoSearchResults(Set results,int errorCode,Map map,IdType type){  searchResults=results;  this.errorCode=errorCode;  resultsMap=map;  searchType=type;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      child.insertData(-5,"ABC");    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throws_INDEX_SIZE_ERR",success);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text textNode;  Node otherChild;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  textNode=(Text)titleAttr.getFirstChild();  assertNotNull("textNodeNotNull",textNode);  value=textNode.getNodeValue();  assertEquals("child1IsYes","Yes",value);  otherChild=textNode.getNextSibling();  assertNull("nextSiblingIsNull",otherChild);  otherChild=textNode.getPreviousSibling();  assertNull("previousSiblingIsNull",otherChild);}  }
class C{  private static TypeDescription queryOptionsDescription(){  return new TypeDescription.Latent("org.apache.cassandra.cql3.QueryOptions",Modifier.PUBLIC,null,null);}  }
class C{  @Override public boolean isValidateRoot(){  return true;}  }
class C{  private void reduceCoefficients(){  do {    c[10]=0;    for (int i=0; i < 10; i+=2) {      long over=c[i] / 0x4000000;      c[i + 1]+=over;      c[i]-=over * 0x4000000;      over=c[i + 1] / 0x2000000;      c[i + 2]+=over;      c[i + 1]-=over * 0x2000000;    }    c[0]+=19 * c[10];  } while (c[10] != 0);}  }
class C{  public static int hash32(final String text,int from,int length){  return hash32(text.substring(from,from + length));}  }
class C{  private String[] mergeValues(String[] values1,String[] values2){  ArrayList<Object> results=new ArrayList<>();  if (values1 == null) {  } else {    for (    String value : values1) {      results.add(value);    }  }  if (values2 == null) {  } else {    for (    String value : values2) {      results.add(value);    }  }  String values[]=new String[results.size()];  return results.toArray(values);}  }
class C{  public void canonicalizeResources(Subject adminSubject,String realm) throws EntitlementException {  origMapApplNameToResources=deepCopyMap(mapApplNameToResources);  for (  String appName : mapApplNameToResources.keySet()) {    ResourceName resComp=getResourceComparator(adminSubject,realm,appName);    Set<String> resources=mapApplNameToResources.get(appName);    Set<String> temp=new HashSet<String>();    for (    String r : resources) {      temp.add(resComp.canonicalize(r));    }    mapApplNameToResources.put(appName,temp);  }}  }
class C{  public void markCompletelyClean(JComponent aComponent){  RepaintManager delegate=getDelegate(aComponent);  if (delegate != null) {    delegate.markCompletelyClean(aComponent);    return;  }synchronized (this) {    dirtyComponents.remove(aComponent);  }}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  if ((request == null) || (response == null)) {    response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString("nullInputParameter"));    return;  }  FSUtils.debug.message("FSAssertionConsumerService.doGet(): called");  String relayState=request.getParameter(IFSConstants.LRURL);  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSAssertionConsumerService.doGet():Resource URL: " + relayState);  }  String metaAlias=FSServiceUtils.getMetaAlias(request);  String realm=IDFFMetaUtils.getRealmByMetaAlias(metaAlias);  String baseURL=FSServiceUtils.getBaseURL(request);  String framedPageURL=FSServiceUtils.getCommonLoginPageURL(metaAlias,relayState,null,request,baseURL);  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSAssertionConsumerService: CommonLoginPage: " + framedPageURL);  }  SPDescriptorType hostDesc=null;  BaseConfigType hostConfig=null;  String hostEntityId=null;  try {    hostEntityId=metaManager.getEntityIDByMetaAlias(metaAlias);    hostDesc=metaManager.getSPDescriptor(realm,hostEntityId);    hostConfig=metaManager.getSPDescriptorConfig(realm,hostEntityId);  } catch (  Exception e) {    FSUtils.debug.error("FSAssertionConsumerService.doGet: ",e);    FSUtils.forwardRequest(request,response,framedPageURL);    return;  }  FSRequest samlRequest=null;  String firstSourceID=null;  String artifactName=IFSConstants.ARTIFACT_NAME_DEFAULT;  String[] arti=(String[])request.getParameterValues(artifactName);  if ((arti == null) || (arti.length < 0) || (arti[0] == null)) {    FSUtils.debug.error("FSAssertionConsumerService.doGet: " + "AuthnRequest Processing Failed at the IDP " + "Redirecting to the Framed Login Page");    FSUtils.forwardRequest(request,response,framedPageURL);  }  List al=new ArrayList();  try {    FSAssertionArtifact firstArtifact=new FSAssertionArtifact(arti[0]);    firstSourceID=firstArtifact.getSourceID();    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAssertionConsumerService.doGet: " + "SourceID within the Artifact is " + firstSourceID);    }    al.add(firstArtifact);    for (int k=1; k < arti.length; k++) {      FSAssertionArtifact assertArtifact=new FSAssertionArtifact(arti[k]);      String dest=assertArtifact.getSourceID();      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSAssertionConsumerService.doGet: " + "SourceID within the Artifact is " + dest);      }      if (!dest.equals(firstSourceID)) {        FSUtils.debug.error("FSAssertionConsumerService.doGet: " + "Received multiple artifacts have different source id");        FSUtils.forwardRequest(request,response,framedPageURL);        return;      }      al.add(assertArtifact);    }    samlRequest=new FSRequest(null,al);  } catch (  SAMLException se) {    FSUtils.debug.error("FSAssertionConsumerService.doGet: ",se);    FSUtils.forwardRequest(request,response,framedPageURL);    return;  }catch (  FSMsgException se) {    FSUtils.debug.error("FSAssertionConsumerService.doGet: ",se);    FSUtils.forwardRequest(request,response,framedPageURL);    return;  }  try {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAssertionConsumerService.doGet: " + "Trying to get BrowserArtifactHandler");    }    FSServiceManager sm=FSServiceManager.getInstance();    FSAssertionArtifactHandler handler=sm.getBrowserArtifactHandler(request,response,realm,firstSourceID,samlRequest,relayState);    if (handler == null) {      FSUtils.debug.error("FSAssertionConsumerService.doGet: " + FSUtils.bundle.getString("internalError"));      FSUtils.forwardRequest(request,response,framedPageURL);      return;    }    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAssertionConsumerService.doGet: " + "BrowserArtifactHandler created");    }    handler.setRealm(realm);    handler.setHostEntityId(hostEntityId);    handler.setMetaAlias(metaAlias);    handler.setHostDescriptor(hostDesc);    handler.setHostDescriptorConfig(hostConfig);    handler.processSAMLRequest();    return;  } catch (  Exception e) {    FSUtils.debug.error("FSAssertionConsumerService.doGet: " + "Exception occurred :",e);    FSUtils.forwardRequest(request,response,framedPageURL);    return;  }}  }
class C{  protected void drainSocket() throws Exception {  InputStream in=socket.getInputStream();  byte[] buf=new byte[1024];  int length=in.read(buf);  while (length >= 0) {    int count=reader.append(buf,0,length,true);    if (count > 0)     execute(reader);    length=in.read(buf);  }}  }
class C{  private synchronized void refreshResolvedRules(String selectorName,String[] selector,Style newStyle,int specificity){  if (resolvedStyles.size() > 0) {    Enumeration<ResolvedStyle> values=resolvedStyles.elements();    while (values.hasMoreElements()) {      ResolvedStyle style=values.nextElement();      if (style.matches(selectorName)) {        style.insertStyle(newStyle,specificity);      }    }  }}  }
class C{  public void startPrefixMapping(String prefix,String uri) throws SAXException {  if (DEBUG)   System.out.println("startPrefixMapping: prefix: " + prefix + ", uri: "+ uri);  if (null == prefix)   prefix="";  m_prefixMappings.addElement(prefix);  m_prefixMappings.addElement(uri);}  }
class C{  public boolean equals(Object schemaType){  if (schemaType instanceof SchemaType) {    SchemaType s=(SchemaType)schemaType;    return (s.lSchemaType.equalsIgnoreCase(this.lSchemaType));  }  return (false);}  }
class C{  public SubConfigAddViewBean(){  super("SubConfigAdd");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  static double[] sumWithCompensation(double[] intermediateSum,double value){  double tmp=value - intermediateSum[1];  double sum=intermediateSum[0];  double velvel=sum + tmp;  intermediateSum[1]=(velvel - sum) - tmp;  intermediateSum[0]=velvel;  return intermediateSum;}  }
class C{  @Override public com.liferay.blade.samples.servicebuilder.model.Foo fetchFooByUuidAndGroupId(java.lang.String uuid,long groupId){  return _fooLocalService.fetchFooByUuidAndGroupId(uuid,groupId);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapremovenameditemns02.class,args);}  }
class C{  public static String after(String self,String pattern){  Matcher matcher=compile(pattern,CASE_INSENSITIVE | UNICODE_CHARACTER_CLASS).matcher(self);  return matcher.find() ? self.substring(matcher.end(),self.length()).trim() : self;}  }
class C{  public void modifyServer(String serverName,String parentSite,Map values) throws AMConsoleException, UnknownPropertyNameException {  String[] param={serverName};  try {    SSOToken ssoToken=getUserSSOToken();    logEvent("ATTEMPT_MODIFY_SERVER",param);    if (parentSite != null) {      String currentSite=ServerConfiguration.getServerSite(ssoToken,serverName);      if ((currentSite == null) || !currentSite.equals(parentSite)) {        ServerConfiguration.setServerSite(ssoToken,serverName,parentSite);      }    }    ServerConfiguration.setServerInstance(ssoToken,serverName,values);    logEvent("SUCCEED_MODIFY_SERVER",param);  } catch (  ConfigurationException e) {    String[] params={serverName,e.getMessage()};    logEvent("CONFIGURATION_EXCEPTION_MODIFY_SERVER",params);    throw new AMConsoleException(getErrorString(e));  }catch (  IOException e) {    String[] params={serverName,e.getMessage()};    logEvent("IO_EXCEPTION_MODIFY_SERVER",params);    throw new AMConsoleException(getErrorString(e));  }catch (  SMSException e) {    String[] params={serverName,e.getMessage()};    logEvent("SMS_EXCEPTION_MODIFY_SERVER",params);    throw new AMConsoleException(getErrorString(e));  }catch (  SSOException e) {    String[] params={serverName,e.getMessage()};    logEvent("SSO_EXCEPTION_MODIFY_SERVER",params);    throw new AMConsoleException(getErrorString(e));  }}  }
class C{  public boolean equals(Object other){  if (this == other)   return true;  if (other instanceof Address) {    final Address o=(Address)other;    return this.getURI().equals(o.getURI());  }  return false;}  }
class C{  private void mergeHi(int base1,int len1,int base2,int len2){  assert len1 > 0 && len2 > 0 && base1 + len1 == base2;  T[] a=this.a;  T[] tmp=ensureCapacity(len2);  int tmpBase=this.tmpBase;  System.arraycopy(a,base2,tmp,tmpBase,len2);  int cursor1=base1 + len1 - 1;  int cursor2=tmpBase + len2 - 1;  int dest=base2 + len2 - 1;  a[dest--]=a[cursor1--];  if (--len1 == 0) {    System.arraycopy(tmp,tmpBase,a,dest - (len2 - 1),len2);    return;  }  if (len2 == 1) {    dest-=len1;    cursor1-=len1;    System.arraycopy(a,cursor1 + 1,a,dest + 1,len1);    a[dest]=tmp[cursor2];    return;  }  Comparator<? super T> c=this.c;  int minGallop=this.minGallop;  outer:   while (true) {    int count1=0;    int count2=0;    do {      assert len1 > 0 && len2 > 1;      if (c.compare(tmp[cursor2],a[cursor1]) < 0) {        a[dest--]=a[cursor1--];        count1++;        count2=0;        if (--len1 == 0)         break outer;      } else {        a[dest--]=tmp[cursor2--];        count2++;        count1=0;        if (--len2 == 1)         break outer;      }    } while ((count1 | count2) < minGallop);    do {      assert len1 > 0 && len2 > 1;      count1=len1 - gallopRight(tmp[cursor2],a,base1,len1,len1 - 1,c);      if (count1 != 0) {        dest-=count1;        cursor1-=count1;        len1-=count1;        System.arraycopy(a,cursor1 + 1,a,dest + 1,count1);        if (len1 == 0)         break outer;      }      a[dest--]=tmp[cursor2--];      if (--len2 == 1)       break outer;      count2=len2 - gallopLeft(a[cursor1],tmp,tmpBase,len2,len2 - 1,c);      if (count2 != 0) {        dest-=count2;        cursor2-=count2;        len2-=count2;        System.arraycopy(tmp,cursor2 + 1,a,dest + 1,count2);        if (len2 <= 1)         break outer;      }      a[dest--]=a[cursor1--];      if (--len1 == 0)       break outer;      minGallop--;    } while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);    if (minGallop < 0)     minGallop=0;    minGallop+=2;  }  this.minGallop=minGallop < 1 ? 1 : minGallop;  if (len2 == 1) {    assert len1 > 0;    dest-=len1;    cursor1-=len1;    System.arraycopy(a,cursor1 + 1,a,dest + 1,len1);    a[dest]=tmp[cursor2];  } else   if (len2 == 0) {    throw new IllegalArgumentException("Comparison method violates its general contract!");  } else {    assert len1 == 0;    assert len2 > 0;    System.arraycopy(tmp,tmpBase,a,dest - (len2 - 1),len2);  }}  }
class C{  static void putEntityDescriptor(String realm,String entityId,EntityDescriptorElement descriptor){  String cacheKey=buildCacheKey(realm,entityId);  if (descriptor != null) {    if (debug.messageEnabled()) {      debug.message("SAML2MetaCache.putEntityDescriptor: cacheKey = " + cacheKey);    }    descriptorCache.put(cacheKey,descriptor);  } else {    if (debug.messageEnabled()) {      debug.message("SAML2MetaCache.putEntityDescriptor: delete cacheEey = " + cacheKey);    }    descriptorCache.remove(cacheKey);    configCache.remove(cacheKey);  }}  }
class C{  public boolean isRootRealm(){  return realm.equals(Realm.root());}  }
class C{  public int doStartTag() throws JspException {  reset();  Map m=getValueMap();  NonSyncStringBuffer buffer=new NonSyncStringBuffer("<form ");  for (Iterator it=m.keySet().iterator(); it.hasNext(); ) {    String key=(String)it.next();    String val=(String)m.get(key);    buffer.append("  " + key + "=\""+ val+ "\"");  }  if (!autoCompleteEnabled) {    buffer.append(" autocomplete=\"off\"");  }  buffer.append(">");  writeOutput(buffer);  return EVAL_BODY_INCLUDE;}  }
class C{  public static final void removeLoggingBehavior(LoggingBehavior behavior){synchronized (loggingBehaviors) {    loggingBehaviors.remove(behavior);  }}  }
class C{  public void stop(BundleContext bundleContext) throws Exception {  shellCommandsTracker.close();  shellCommandsTracker=null;  bc=null;}  }
class C{  public UnderlineAction(){  super("font-underline");}  }
class C{  public static Cookie newCookie(String name,String value,int maxAge){  return newCookie(name,value,maxAge,null,null);}  }
class C{  @Override public synchronized boolean store(Server aServer){  StoreFileMover mover=new StoreFileMover(System.getProperty("catalina.base"),getServerFilename(),getRegistry().getEncoding());  try {    try (PrintWriter writer=mover.getWriter()){      store(writer,-2,aServer);    }     mover.move();    return true;  } catch (  Exception e) {    log.error(sm.getString("config.storeServerError"),e);  }  return false;}  }
class C{  public void init(){  String configFile=getFilename();  configOld=new File(configFile);  if (!configOld.isAbsolute()) {    configOld=new File(getBasename(),configFile);  }  configNew=new File(configFile + ".new");  if (!configNew.isAbsolute()) {    configNew=new File(getBasename(),configFile + ".new");  }  if (!configNew.getParentFile().exists()) {    configNew.getParentFile().mkdirs();  }  String sb=getTimeTag();  configSave=new File(configFile + sb);  if (!configSave.isAbsolute()) {    configSave=new File(getBasename(),configFile + sb);  }}  }
class C{  private void createSunXmlKeyValFiles(SMSFlatFileTreeNode node,Set sunxmlkeyvals) throws SMSException {  if ((sunxmlkeyvals != null) && !sunxmlkeyvals.isEmpty()) {    createLookupFiles(node,SMSEntry.ATTR_XML_KEYVAL,sunxmlkeyvals);  }}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  ComboBoxEditor newEditor=comboBox.getEditor();  if (editor != newEditor) {    if (editorComponent != null) {      editorComponent.removeFocusListener(this);    }    editor=newEditor;    if (editor != null) {      editorComponent=editor.getEditorComponent();      if (editorComponent != null) {        editorComponent.addFocusListener(this);      }    }  }}  }
class C{  public EncryptionException(String message){  super(message);  _message=message;}  }
class C{  public static List<String> matchNumbers(String text){  String pattern="\\d+[0-9]+";  Pattern pat=Pattern.compile(pattern);  Matcher m=pat.matcher(text);  List<String> matches=new ArrayList<String>();  while (m.find()) {    matches.add(m.group());  }  return matches;}  }
class C{  public Set<Map.Entry<String,NewSubSchemaWrapper>> entrySet(){  return newSubSchemas.entrySet();}  }
class C{  private Optional(){  this.value=null;}  }
class C{  public void runTest() throws Throwable {  String namespaceURI=null;  String qualifiedName="prefix:local";  Document doc;  Element newElement;  doc=(Document)load("staffNS",false);{    boolean success=false;    try {      newElement=doc.createElementNS(namespaceURI,qualifiedName);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  @Override protected void detach(){  super.detach();  poolEntry=null;}  }
class C{  public AssertionError(boolean detailMessage){  this(String.valueOf(detailMessage));}  }
class C{  boolean needToCheckExclude(){  return false;}  }
class C{  public static int calculateEANParity(String code){  int mul=3;  int total=0;  for (int k=code.length() - 1; k >= 0; --k) {    int n=code.charAt(k) - '0';    total+=mul * n;    mul^=2;  }  return (10 - (total % 10)) % 10;}  }
class C{  public static void restart(String className,LocalizableMessage reason){  restart(className,reason,directoryServer.environmentConfig);}  }
class C{  public long checkValidValue(long value,TemporalField field){  if (isValidValue(value) == false) {    throw new DateTimeException(genInvalidFieldMessage(field,value));  }  return value;}  }
class C{  @Override public Foo fetchFooByUuidAndGroupId(String uuid,long groupId){  return fooPersistence.fetchByUUID_G(uuid,groupId);}  }
class C{  public void migrate(String fileName,int operationType,InstallLogger migrateLog) throws InstallException {  Debug.log("MultipleMigrateDriver.migrate() - Starting migrate");  setOperationType(operationType);  printConsoleMessageWithMarkers(getRunInfo().getWelcomeMessageInfo());  String migrateFromProductHome=getMigrateFromProductHome();  MigrateFromInstFinderStore.setProductHome(migrateFromProductHome);  MigrateFromInstallDataStore.setProductHome(migrateFromProductHome);  writeVersionInfoToLog(migrateLog,LOC_DR_MSG_INSTALL_LOG_VERSION_DESC,LOC_DR_MSG_INSTALL_LOG_VERSION_DESC_LINE);  InstFinderInteractionsRunner iFinderRunner=new InstFinderInteractionsRunner(getRunInfo(),null,getServerLocatorHandler());  ArrayList instFinderKeys=iFinderRunner.getAllInteractionKeys();  MigrateFromInstFinderStore migrateFromInstFinderStore=MigrateFromInstFinderStore.getInstance();  Map allProductsDetails=migrateFromInstFinderStore.getAllProductDetails(instFinderKeys);  if (allProductsDetails == null || allProductsDetails.isEmpty()) {    LocalizedMessage productsNotFoundMsg=LocalizedMessage.get(LOC_HR_MSG_MIGRATE_NONE_FOUND);    Console.println(productsNotFoundMsg);    Debug.log(productsNotFoundMsg.toString());  } else {    Iterator iter=allProductsDetails.keySet().iterator();    boolean firstTime=true;    while (iter.hasNext()) {      String instanceName=(String)iter.next();      Map productDetails=(Map)allProductsDetails.get(instanceName);      Console.println();      Console.println();      LocalizedMessage productMigrateBeginMsg=LocalizedMessage.get(LOC_HR_MSG_MIGRATE_PRODUCT_BEGIN_MSG);      Console.println(productMigrateBeginMsg);      Debug.log(productMigrateBeginMsg.toString());      Console.println();      TransientStateAccess stateAccess=new TransientStateAccess(productDetails);      iFinderRunner.setStateAccess(new TransientStateAccess(productDetails));      if (firstTime) {        checkActiveProductHome(migrateFromProductHome,stateAccess);        firstTime=false;      }      MigrateFromInstallState migrateInstallState=new MigrateFromInstallState(productDetails,instFinderKeys);      InstallState installState=new InstallState(productDetails,instFinderKeys);      setInstallState(installState);      prepareMigrate(migrateInstallState,installState);      migrateInternal(operationType,iFinderRunner,installState,migrateLog);    }  }  printConsoleMessage(getRunInfo().getExitMessageInfo());}  }
class C{  public Resource subResource(final SubResource subResource){  this.subResources.add(subResource);  return this;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  if (request == null || response == null) {    FSUtils.debug.error("FSIDPFinderService.doGet:: Null Input");    return;  }  FSUtils.debug.message("FSIDPFinderService.doGet::Init");  String entityID=request.getParameter("ProviderID");  String requestID=request.getParameter("RequestID");  String realm=request.getParameter("Realm");  if (entityID == null || requestID == null || realm == null) {    FSUtils.debug.error("FSIDPFinderService.doGet:: Request is missing" + "either ProviderID or the RequestID");    throw new ServletException("invalidRequest");  }  String idpID=null;  try {    idpID=getCommonDomainIDP(request,response,realm,entityID,requestID);  } catch (  FSRedirectException fe) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSIDPFinderService.doGet:Redirection" + " has happened");    }    return;  }  String hostMetaAlias=null;  BaseConfigType hostConfig=null;  IDFFMetaManager metaManager=FSUtils.getIDFFMetaManager();  try {    if (metaManager != null) {      hostConfig=metaManager.getIDPDescriptorConfig(realm,entityID);      if (hostConfig != null) {        hostMetaAlias=hostConfig.getMetaAlias();      }    }  } catch (  IDFFMetaException ie) {    FSUtils.debug.error("FSIDPFinderService.doGet:: Failure in " + "getting proxying hosted meta:",ie);    return;  }  FSSessionManager sessionManager=FSSessionManager.getInstance(hostMetaAlias);  FSAuthnRequest authnReq=sessionManager.getAuthnRequest(requestID);  if (idpID == null || idpID.equals(entityID)) {    String loginURL=getLoginURL(authnReq,realm,entityID,request);    if (loginURL == null) {      FSUtils.debug.error("FSIDPFinderService.doGet : login url" + " is null");      return;    }    response.setHeader("Location",loginURL);    response.sendRedirect(loginURL);  } else {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSIDPFinderService.doGet:IDP to be proxied:" + idpID);    }    try {      FSProxyHandler handler=new FSProxyHandler(request,response);      handler.setHostedEntityId(entityID);      IDPDescriptorType hostDesc=null;      SPDescriptorType origSPDesc=null;      if (metaManager != null) {        hostDesc=metaManager.getIDPDescriptor(realm,entityID);        origSPDesc=metaManager.getSPDescriptor(realm,authnReq.getProviderId());      }      handler.setSPDescriptor(origSPDesc);      handler.setHostedDescriptor(hostDesc);      handler.setHostedDescriptorConfig(hostConfig);      handler.setMetaAlias(hostMetaAlias);      handler.setRealm(realm);      handler.sendProxyAuthnRequest(authnReq,idpID);    } catch (    IDFFMetaException ie) {      FSUtils.debug.error("FSIDPFinderService.doGet:: Failure in " + "getting proxying hosted meta:",ie);    }catch (    FSException fe) {      FSUtils.debug.error("FSIDPFinderService.doGet:: Failure in " + "sending the proxy authentication request.",fe);    }  }}  }
class C{  public SAX2DTM(DTMManager mgr,Source source,int dtmIdentity,DTMWSFilter whiteSpaceFilter,XMLStringFactory xstringfactory,boolean doIndexing){  this(mgr,source,dtmIdentity,whiteSpaceFilter,xstringfactory,doIndexing,DEFAULT_BLOCKSIZE,true,false);}  }
class C{  protected void finishDraggingTo(int location){  dragDividerTo(location);  setLastDragLocation(-1);  if (!isContinuousLayout()) {    Component leftC=splitPane.getLeftComponent();    Rectangle leftBounds=leftC.getBounds();    if (draggingHW) {      if (orientation == JSplitPane.HORIZONTAL_SPLIT) {        nonContinuousLayoutDivider.setLocation(-dividerSize,0);      } else {        nonContinuousLayoutDivider.setLocation(0,-dividerSize);      }      splitPane.remove(nonContinuousLayoutDivider);    }    splitPane.setDividerLocation(location);  }}  }
class C{  private int handleJ(String value,DoubleMetaphoneResult result,int index,boolean slavoGermanic){  if (contains(value,index,4,"JOSE") || contains(value,0,4,"SAN ")) {    if ((index == 0 && (charAt(value,index + 4) == ' ') || value.length() == 4) || contains(value,0,4,"SAN ")) {      result.append('H');    } else {      result.append('J','H');    }    index++;  } else {    if (index == 0 && !contains(value,index,4,"JOSE")) {      result.append('J','A');    } else     if (isVowel(charAt(value,index - 1)) && !slavoGermanic && (charAt(value,index + 1) == 'A' || charAt(value,index + 1) == 'O')) {      result.append('J','H');    } else     if (index == value.length() - 1) {      result.append('J',' ');    } else     if (!contains(value,index + 1,1,L_T_K_S_N_M_B_Z) && !contains(value,index - 1,1,"S","K","L")) {      result.append('J');    }    if (charAt(value,index + 1) == 'J') {      index+=2;    } else {      index++;    }  }  return index;}  }
class C{  @Override public void toString(StringBuilder buffer){  buffer.append("PasswordExpiringControl(secondsUntilExpiration=");  buffer.append(secondsUntilExpiration);  buffer.append(")");}  }
class C{  public static byte[] decodeBytes(byte[] b,PdfDictionary streamDictionary){  return decodeBytes(b,streamDictionary,FilterHandlers.getDefaultFilterHandlers());}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.LFNElement createLFNElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.LFNElementImpl();}  }
class C{  public void check(String name){  DeployedApplication app=deployed.get(name);  if (app != null) {    checkResources(app,true);  }  deployApps(name);}  }
class C{  public TableModelEvent(TableModel source,int firstRow,int lastRow,int column,int type){  super(source);  this.firstRow=firstRow;  this.lastRow=lastRow;  this.column=column;  this.type=type;}  }
class C{  public LDAPResult doOperation(ObjectFactory objFactory,DelRequest deleteRequest,List<org.opends.server.types.Control> controls) throws IOException, LDAPException, DecodeException {  LDAPResult delResponse=objFactory.createLDAPResult();  delResponse.setRequestID(deleteRequest.getRequestID());  ByteString dnStr=ByteString.valueOfUtf8(deleteRequest.getDn());  ProtocolOp op=new DeleteRequestProtocolOp(dnStr);  LDAPMessage msg=new LDAPMessage(DSMLServlet.nextMessageID(),op,controls);  connection.getLDAPWriter().writeMessage(msg);  LDAPMessage responseMessage=connection.getLDAPReader().readMessage();  DeleteResponseProtocolOp delOp=responseMessage.getDeleteResponseProtocolOp();  int resultCode=delOp.getResultCode();  LocalizableMessage errorMessage=delOp.getErrorMessage();  delResponse.setErrorMessage(errorMessage != null ? errorMessage.toString() : null);  ResultCode code=ResultCodeFactory.create(objFactory,resultCode);  delResponse.setResultCode(code);  DN dn=delOp.getMatchedDN();  if (dn != null) {    delResponse.setMatchedDN(dn.toString());  }  return delResponse;}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  @Override public void destroy(){  this.attribute=null;  this.filterConfig=null;}  }
class C{  public void restart(){  getLock().lock();  try {    stop();    start();  }  finally {    getLock().unlock();  }}  }
class C{  @SuppressWarnings("unchecked") public static <T>T[] emptyArray(Class<T> kind){  if (kind == Object.class) {    return (T[])new Object[0];  }  int bucket=(kind.hashCode() & 0x7FFFFFFF) % CACHE_SIZE;  Object cache=sCache[bucket];  if (cache == null || cache.getClass().getComponentType() != kind) {    cache=Array.newInstance(kind,0);    sCache[bucket]=cache;  }  return (T[])cache;}  }
class C{  public static void appendColumns(StringBuilder s,String[] columns){  int n=columns.length;  for (int i=0; i < n; i++) {    String column=columns[i];    if (column != null) {      if (i > 0) {        s.append(", ");      }      s.append(column);    }  }  s.append(' ');}  }
class C{  public boolean isPostExternalInitializationSubcommand(){  return isSubcommand(POST_EXTERNAL_INITIALIZATION_SUBCMD_NAME);}  }
class C{  public boolean visitTopLevelInstruction(ElemTemplateElement elem){  int type=elem.getXSLToken();switch (type) {case Constants.ELEMNAME_TEMPLATE:    return visitInstruction(elem);default :  return true;}}  }
class C{  private ReplicationServer createReplicationServer(int replServerId,String testCase) throws Exception {  SortedSet<String> servers=new TreeSet<>();  if (replServerId != replServer1ID) {    servers.add("localhost:" + getReplServerPort(replServer1ID));  }  if (replServerId != replServer2ID) {    servers.add("localhost:" + getReplServerPort(replServer2ID));  }  if (replServerId != replServer3ID) {    servers.add("localhost:" + getReplServerPort(replServer3ID));  }  final int port=getReplServerPort(replServerId);  ReplServerFakeConfiguration conf=new ReplServerFakeConfiguration(port,"initOnlineTest" + port + testCase+ "Db",0,replServerId,0,100,servers);  ReplicationServer replicationServer=new ReplicationServer(conf);  Thread.sleep(1000);  return replicationServer;}  }
class C{  public PushDeviceSettings createDeviceProfile(){  byte[] secretBytes=new byte[SECRET_BYTE_LENGTH];  secureRandom.nextBytes(secretBytes);  String sharedSecret=Base64.encode(secretBytes);  return new PushDeviceSettings(sharedSecret,DEVICE_NAME);}  }
class C{  public boolean isLiteral(){  return false;}  }
class C{  public static GSSAPISASLBindRequest newGSSAPISASLBindRequest(final String authenticationID,final char[] password){  return new GSSAPISASLBindRequestImpl(authenticationID,getBytes(password));}  }
class C{  public Pair<Boolean,LocalizableMessage> includeEntry(DN dn){  if (!excludeBranches.isEmpty()) {    for (    DN excludeBranch : excludeBranches) {      if (excludeBranch.isSuperiorOrEqualTo(dn)) {        return Pair.of(FALSE,ERR_LDIF_SKIP_EXCLUDE_BRANCH.get(dn,excludeBranch));      }    }  }  if (!includeBranches.isEmpty()) {    for (    DN includeBranch : includeBranches) {      if (includeBranch.isSuperiorOrEqualTo(dn)) {        return Pair.of(TRUE,null);      }    }    return Pair.of(FALSE,ERR_LDIF_SKIP_NOT_IN_INCLUDED_BRANCHES.get(dn));  }  return Pair.of(TRUE,null);}  }
class C{  public void characters(char ch[],int start,int length) throws SAXException {}  }
class C{  @Override public boolean addAll(int index,Collection<? extends E> collection){  int s=size;  if (index > s || index < 0) {    throwIndexOutOfBoundsException(index,s);  }  Object[] newPart=collection.toArray();  int newPartSize=newPart.length;  if (newPartSize == 0) {    return false;  }  Object[] a=array;  int newSize=s + newPartSize;  if (newSize <= a.length) {    System.arraycopy(a,index,a,index + newPartSize,s - index);  } else {    int newCapacity=newCapacity(newSize - 1);    Object[] newArray=new Object[newCapacity];    System.arraycopy(a,0,newArray,0,index);    System.arraycopy(a,index,newArray,index + newPartSize,s - index);    array=a=newArray;  }  System.arraycopy(newPart,0,a,index,newPartSize);  size=newSize;  modCount++;  return true;}  }
class C{  @Inject public PushDevicesDao(@Named(AuthenticatorPushServiceFactory.FACTORY_NAME) AuthenticatorDeviceServiceFactory<AuthenticatorPushService> serviceFactory){  super(serviceFactory);}  }
class C{  private static int gallopLeft(Comparable<Object> key,Object[] a,int base,int len,int hint){  assert len > 0 && hint >= 0 && hint < len;  int lastOfs=0;  int ofs=1;  if (key.compareTo(a[base + hint]) > 0) {    int maxOfs=len - hint;    while (ofs < maxOfs && key.compareTo(a[base + hint + ofs]) > 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    lastOfs+=hint;    ofs+=hint;  } else {    final int maxOfs=hint + 1;    while (ofs < maxOfs && key.compareTo(a[base + hint - ofs]) <= 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    int tmp=lastOfs;    lastOfs=hint - ofs;    ofs=hint - tmp;  }  assert -1 <= lastOfs && lastOfs < ofs && ofs <= len;  lastOfs++;  while (lastOfs < ofs) {    int m=lastOfs + ((ofs - lastOfs) >>> 1);    if (key.compareTo(a[base + m]) > 0)     lastOfs=m + 1; else     ofs=m;  }  assert lastOfs == ofs;  return ofs;}  }
class C{  protected final void closeSession(){  if (sessionTracker != null) {    Session currentSession=sessionTracker.getOpenSession();    if (currentSession != null) {      currentSession.close();    }  }}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  public Object[] toArray(){  final Object[] items=this.items;  final ReentrantLock lock=this.lock;  lock.lock();  try {    final int count=this.count;    Object[] a=new Object[count];    int n=items.length - takeIndex;    if (count <= n) {      System.arraycopy(items,takeIndex,a,0,count);    } else {      System.arraycopy(items,takeIndex,a,0,n);      System.arraycopy(items,0,a,n,count - n);    }    return a;  }  finally {    lock.unlock();  }}  }
class C{  public void createAdminData(String backendName) throws ADSContextException {  createAdministrationSuffix(backendName);  createAdminDataContainers();}  }
class C{  public boolean add(HDR objectToAdd){  hlist.add((HDR)objectToAdd);  return true;}  }
class C{  public EndianUtils(){  super();}  }
class C{  private void notifyListeners(Throwable t){  EntryReadErrorEvent ev=new EntryReadErrorEvent(this,dn,t);  for (  EntryReadListener listener : listeners) {    listener.entryReadError(ev);  }}  }
class C{  public void startElement(String uri,String local) throws SAXException {  boolean isRoot=false;  String suggestion=null;  if (elementLen == 0) {    isRoot=true;    suggestion="";  }  writePendingText();  nsContext.startElement();  pushElement(uri,local);  nsContext.declareNamespace(uri,suggestion,false);  if (isRoot) {    String[] uris=nsContext.getNamespacePrefixMapper().getPreDeclaredNamespaceUris();    if (uris != null) {      for (int i=0; i < uris.length; i++) {        if (uris[i] != null)         nsContext.declareNamespace(uris[i],null,false);      }    }  }}  }
class C{  private PhoneUtil(){  throw new Error("Do not need instantiate!");}  }
class C{  public AccessibleJTabbedPane(){  super();  JTabbedPane.this.model.addChangeListener(this);}  }
class C{  @Override public Object lookupLink(String name) throws NamingException {  return lookup(new CompositeName(name),false);}  }
class C{  public Tree(TreeSpecies species){  this(DEFAULT_TYPE,species,DEFAULT_DIRECTION);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  ObjectInputStream.GetField fields=s.readFields();  object=fields.get("object",null);  baseTypeName=(String)fields.get("baseTypeName",null);  reference=(Ref)fields.get("reference",null);}  }
class C{  public static PdfVersion fromString(String value){  for (  PdfVersion version : values) {    if (version.toString().equals(value)) {      return version;    }  }  throw new IllegalArgumentException("The provided pdf version was not found.");}  }
class C{  public PropertyException(String message,String errorCode){  super(message,errorCode);}  }
class C{  static NumberFormatException forInputString(String s){  return new NumberFormatException("For input string: \"" + s + "\"");}  }
class C{  public void testFlipBitZeroOutside2(){  byte aBytes[]={0};  int aSign=0;  int number=63;  byte rBytes[]={0,-128,0,0,0,0,0,0,0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.flipBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue("incorrect value",resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  protected void removeSession(String ssoId,Session session){  if (containerLog.isDebugEnabled()) {    containerLog.debug(sm.getString("singleSignOn.debug.removeSession",session,ssoId));  }  SingleSignOnEntry entry=cache.get(ssoId);  if (entry == null) {    return;  }  entry.removeSession(session);  if (entry.findSessions().size() == 0) {    deregister(ssoId);  }}  }
class C{  public SIPRequest createRequest(SipUri requestURI,Via via,CSeq cseq,From from,To to){  SIPRequest newRequest=new SIPRequest();  String method=cseq.getMethod();  newRequest.setMethod(method);  newRequest.setRequestURI(requestURI);  this.setBranch(via,method);  newRequest.setHeader(via);  newRequest.setHeader(cseq);  newRequest.setHeader(from);  newRequest.setHeader(to);  newRequest.setHeader(getCallId());  try {    newRequest.attachHeader(new MaxForwards(70),false);  } catch (  Exception d) {  }  if (MessageFactoryImpl.getDefaultUserAgentHeader() != null) {    newRequest.setHeader(MessageFactoryImpl.getDefaultUserAgentHeader());  }  return newRequest;}  }
class C{  public void checkNumberArgs(int argNum) throws WrongNumberArgsException {  if (argNum < 2)   reportWrongNumberArgs();}  }
class C{  public void testZeroNeg(){  byte aBytes[]={0};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=0;  int bSign=-1;  byte rBytes[]={-1,1,2,3,3,-6,-15,-24,-40,-49,-58,-67,-6,-15,-23};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.or(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  static Promise<Void> blockingPromiseNotify(final Duration duration){  return new BlockingPromise<>(duration);}  }
class C{  protected void initCDATA(){}  }
class C{  public void close(){  if (mythread != null) {    mythread.interrupt();    mythread=null;  }}  }
class C{  private void deleteBackend(BackendDescriptor backend) throws OpenDsException, ConfigException {  DN dn=DN.valueOf("ds-cfg-backend-id" + "=" + backend.getBackendID() + ",cn=Backends,cn=config");  Utilities.deleteConfigSubtree(DirectoryServer.getConfigurationHandler(),dn);}  }
class C{  public boolean removeAll(Collection<?> c){  Objects.requireNonNull(c);  return batchRemove(c,false);}  }
class C{  public BeanContextServicesSupport(BeanContextServices peer,Locale lcle,boolean dTime,boolean visible){  super(peer,lcle,dTime,visible);}  }
class C{  public double length(){  return Math.sqrt(NumberConversions.square(x) + NumberConversions.square(y) + NumberConversions.square(z));}  }
class C{  public DashboardServiceHelper(){  attributesRequireUpdate.add(DASHBOARD_CLASS_NAME);  attributesRequireUpdate.add(DASHBOARD_NAME);  attributesRequireUpdate.add(DASHBOARD_DISPLAY_NAME);  attributesRequireUpdate.add(DASHBOARD_ICON);  attributesRequireUpdate.add(DASHBOARD_LOGIN);  attributesRequireUpdate.add(ICF_IDENTIFIER);  attributes.addAll(attributesRequireUpdate);}  }
class C{  public void unassignAllPolicies(String serviceName,Set policyDNs) throws AMException, SSOException {  throw new UnsupportedOperationException();}  }
class C{  public boolean useSSL(){  return useSSLArg.isPresent();}  }
class C{  public char last(){  if (end != begin) {    pos=end - 1;  } else {    pos=end;  }  return current();}  }
class C{  public Executor(Logger logger,String cmd){  this.logger=logger;  this.cmd=cmd;}  }
class C{  public UTF8Reader(InputStream inputStream,int size){  fInputStream=inputStream;  fBuffer=new byte[size];}  }
class C{  static boolean isNativeCodeLoaded(){  return nativeCodeLoaded;}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.ModifyResponseElement createModifyResponseElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.ModifyResponseElementImpl();}  }
class C{  public AccountStatusNotification(AccountStatusNotificationType notificationType,Entry userEntry,LocalizableMessage message,Map<AccountStatusNotificationProperty,List<String>> notificationProperties){  this.notificationType=notificationType;  this.userEntry=userEntry;  this.message=message;  if (notificationProperties == null) {    this.notificationProperties=new HashMap<>(0);  } else {    this.notificationProperties=notificationProperties;  }}  }
class C{  private static void checkCertificateInKeystore(SecurityOptions.CertificateType type,String path,String pwd,Collection<String> certNicknames,Collection<LocalizableMessage> errorMessages,Collection<String> nicknameList){  boolean errorWithPath=false;  if (type != SecurityOptions.CertificateType.PKCS11) {    final File f=new File(path);    if (!f.exists()) {      errorMessages.add(INFO_KEYSTORE_PATH_DOES_NOT_EXIST.get());      errorWithPath=true;    } else     if (!f.isFile()) {      errorMessages.add(INFO_KEYSTORE_PATH_NOT_A_FILE.get());      errorWithPath=true;    }  }  if (!errorWithPath) {    try {      CertificateManager certManager;switch (type) {case JKS:        certManager=new CertificateManager(path,CertificateManager.KEY_STORE_TYPE_JKS,pwd);      break;case JCEKS:    certManager=new CertificateManager(path,CertificateManager.KEY_STORE_TYPE_JCEKS,pwd);  break;case PKCS12:certManager=new CertificateManager(path,CertificateManager.KEY_STORE_TYPE_PKCS12,pwd);break;case PKCS11:certManager=new CertificateManager(CertificateManager.KEY_STORE_PATH_PKCS11,CertificateManager.KEY_STORE_TYPE_PKCS11,pwd);break;default :throw new IllegalArgumentException("Invalid type: " + type);}final String[] aliases=certManager.getCertificateAliases();if (aliases == null || aliases.length == 0) {switch (type) {case JKS:errorMessages.add(INFO_JKS_KEYSTORE_DOES_NOT_EXIST.get());break;case JCEKS:errorMessages.add(INFO_JCEKS_KEYSTORE_DOES_NOT_EXIST.get());break;case PKCS12:errorMessages.add(INFO_PKCS12_KEYSTORE_DOES_NOT_EXIST.get());break;case PKCS11:errorMessages.add(INFO_PKCS11_KEYSTORE_DOES_NOT_EXIST.get());break;default :throw new IllegalArgumentException("Invalid type: " + type);}} else if (certManager.hasRealAliases()) {Collections.addAll(nicknameList,aliases);final String aliasString=joinAsString(", ",nicknameList);if (certNicknames.isEmpty() && aliases.length > 1) {errorMessages.add(ERR_INSTALLDS_MUST_PROVIDE_CERTNICKNAME.get(aliasString));}for (String certNickname : certNicknames) {boolean found=false;for (int i=0; i < aliases.length && !found; i++) {found=aliases[i].equalsIgnoreCase(certNickname);}if (!found) {errorMessages.add(ERR_INSTALLDS_CERTNICKNAME_NOT_FOUND.get(aliasString));}}}} catch (final KeyStoreException ke) {if (StaticUtils.stackTraceContainsCause(ke,ArithmeticException.class)) {errorMessages.add(INFO_ERROR_ACCESSING_KEYSTORE_JDK_BUG.get());} else {switch (type) {case JKS:errorMessages.add(INFO_ERROR_ACCESSING_JKS_KEYSTORE.get());break;case JCEKS:errorMessages.add(INFO_ERROR_ACCESSING_JCEKS_KEYSTORE.get());break;case PKCS12:errorMessages.add(INFO_ERROR_ACCESSING_PKCS12_KEYSTORE.get());break;case PKCS11:errorMessages.add(INFO_ERROR_ACCESSING_PKCS11_KEYSTORE.get());break;default :throw new IllegalArgumentException("Invalid type: " + type,ke);}}}}}  }
class C{  EmulatedFields emulatedFields(){  return emulatedFields;}  }
class C{  private int calculateHashCode(){  return 32 + toString.hashCode();}  }
class C{  @SuppressWarnings("unchecked") public void writeNString(String x) throws SQLException {  attribs.add(x);}  }
class C{  public void poll(){  this.put("lastQueried",CollectionUtils.asSet(String.valueOf(currentTimeMillis())));}  }
class C{  private void onUser(@NotNull TLAbsUser absUser){  User currentUser=null;  User user=null;  if (absUser instanceof TLUser) {    final TLUser tlUser=(TLUser)absUser;    if (tlUser.isMutualContact()) {      currentUser=(User)databaseManager.getUserById(tlUser.getId());      user=onUserContact(currentUser,tlUser);    } else     if (tlUser.isDeleted()) {      currentUser=(User)databaseManager.getUserById(tlUser.getId());      user=onUserDelete(currentUser,tlUser);    } else     if (tlUser.isContact()) {      currentUser=(User)databaseManager.getUserById(tlUser.getId());      user=onUserRequest(currentUser,tlUser);    } else     if (tlUser.isSelf() || !tlUser.isBot()) {      currentUser=(User)databaseManager.getUserById(tlUser.getId());      user=onUserForeign(currentUser,tlUser);    } else {      BotLogger.info(LOGTAG,"Bot received");    }  }  if ((currentUser == null) && (user != null)) {    databaseManager.addUser(user);  } else   if (user != null) {    databaseManager.updateUser(user);  }}  }
class C{  private static void initialize(){  if (!initialized) {    try {      String adminDN=(String)AccessController.doPrivileged(new AdminDNAction());      String adminPassword=(String)AccessController.doPrivileged(new AdminPasswordAction());      SSOTokenManager mgr=SSOTokenManager.getInstance();      ServiceConfigManager scm=new ServiceConfigManager(SERVICE_NAME,mgr.createSSOToken(new AuthPrincipal(adminDN),adminPassword));      if (!addedListener) {        addedListener=true;        scm.addListener(new AdminInterfaceUtils());      }      ServiceConfig globalConfig=scm.getGlobalConfig(null);      ServiceConfig templatesConfig=globalConfig.getSubConfig(TEMPLATES);      ServiceConfig structTemplateSubConfig=templatesConfig.getSubConfig(STRUCTURE_TEMPLATES);      ServiceConfig groupContConfig=structTemplateSubConfig.getSubConfig(GCCREATE_ATTR_NAME);      ServiceConfig peopleContConfig=structTemplateSubConfig.getSubConfig(PCCREATE_ATTR_NAME);      ServiceConfig orgAdminConfig=structTemplateSubConfig.getSubConfig(ORG_ADMIN_ATTR_NAME);      ServiceConfig helpDeskAdminConfig=structTemplateSubConfig.getSubConfig(HELP_DESK_ADMIN_ATTR_NAME);      ServiceConfig policyAdminConfig=structTemplateSubConfig.getSubConfig(POLICY_ADMIN_ATTR_NAME);      defaultGCCreateDuringOrgConfig=getConfigAttributeValue(groupContConfig,defaultGCCreateDuringOrgConfig);      defaultPCCreateDuringOrgConfig=getConfigAttributeValue(peopleContConfig,defaultPCCreateDuringOrgConfig);      defaultORGADMIN=getConfigAttributeValue(orgAdminConfig,defaultORGADMIN);      defaultHELP_DESK_ADMIN=getConfigAttributeValue(helpDeskAdminConfig,defaultHELP_DESK_ADMIN);      defaultPOLICY_ADMIN=getConfigAttributeValue(policyAdminConfig,defaultPOLICY_ADMIN);      ServiceSchemaManager sm=new ServiceSchemaManager(CONSOLE_SERVICE_NAME,mgr.createSSOToken(new AuthPrincipal(adminDN),adminPassword));      if (!addedListener) {        addedListener=true;        sm.addListener(new AdminInterfaceUtils());      }      ServiceSchema schema=sm.getGlobalSchema();      defaultAC=getAttributeValue(schema,AC_ATTR_NAME,defaultAC);      defaultGC=getAttributeValue(schema,GC_ATTR_NAME,defaultGC);      defaultPC=getAttributeValue(schema,PC_ATTR_NAME,defaultPC);    } catch (    Exception e) {      debug.warning("AdminInterfaceUtils: Unable to get " + "default People, Groups, Org Admin Role, " + "Help Desk Admin Role, Policy Admin Role and "+ "Agents containers from SM",e);    }    if (debug.messageEnabled()) {      debug.message("AdminInterfaceUtils: Defaults container: " + defaultPC + ", "+ defaultGC+ ", "+ defaultAC+ ", "+ defaultPCCreateDuringOrgConfig+ ", "+ defaultGCCreateDuringOrgConfig+ ", "+ defaultORGADMIN+ ", "+ defaultHELP_DESK_ADMIN+ ", "+ defaultPOLICY_ADMIN);    }    initialized=true;  }}  }
class C{  int useCount(Name n){  int ni=n.index, nmax=names.length;  int end=lastUseIndex(n);  if (end < 0)   return 0;  int count=0;  if (end == nmax) {    count++;    end--;  }  int beg=n.index() + 1;  if (beg < arity)   beg=arity;  for (int i=beg; i <= end; i++) {    count+=names[i].useCount(n);  }  return count;}  }
class C{  public void check(final int api){  if (api == Opcodes.ASM4) {    if (visibleTypeAnnotations != null && visibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }    if (invisibleTypeAnnotations != null && invisibleTypeAnnotations.size() > 0) {      throw new RuntimeException();    }    for (    FieldNode f : fields) {      f.check(api);    }    for (    MethodNode m : methods) {      m.check(api);    }  }}  }
class C{  public AddMsg(byte[] in) throws DataFormatException {  final ByteArrayScanner scanner=new ByteArrayScanner(in);  decodeHeader(scanner,MSG_TYPE_ADD,MSG_TYPE_ADD_V1);  if (protocolVersion <= 3) {    decodeBody_V123(scanner);  } else {    decodeBody_V4(scanner);  }  if (protocolVersion == ProtocolVersion.getCurrentVersion()) {    bytes=in;  }}  }
class C{  private int run(String[] args){  try {    initializeGlobalArguments();    initializeSubCommands();  } catch (  ArgumentException e) {    errPrintln(ERR_CANNOT_INITIALIZE_ARGS.get(e.getMessage()));    return ReturnCode.ERROR_USER_DATA.get();  }  ConnectionFactoryProvider cfp=null;  try {    cfp=new ConnectionFactoryProvider(parser,this,CliConstants.DEFAULT_ROOT_USER_DN,CliConstants.DEFAULT_ADMINISTRATION_CONNECTOR_PORT,true);    cfp.setIsAnAdminConnection();    parser.parseArguments(args);    checkForConflictingArguments();  } catch (  ArgumentException ae) {    parser.displayMessageAndUsageReference(getErrStream(),ERR_ERROR_PARSING_ARGS.get(ae.getMessage()));    return ReturnCode.CONFLICTING_ARGS.get();  }  if (parser.usageOrVersionDisplayed()) {    return ReturnCode.SUCCESS.get();  }  if (equivalentCommandFileArgument.isPresent()) {    final String file=equivalentCommandFileArgument.getValue();    if (!canWrite(file)) {      errPrintln(ERR_DSCFG_CANNOT_WRITE_EQUIVALENT_COMMAND_LINE_FILE.get(file));      return ReturnCode.ERROR_UNEXPECTED.get();    } else     if (new File(file).isDirectory()) {      errPrintln(ERR_DSCFG_EQUIVALENT_COMMAND_LINE_FILE_DIRECTORY.get(file));      return ReturnCode.ERROR_UNEXPECTED.get();    }  }  try {    factory=new LDAPManagementContextFactory(cfp);  } catch (  ArgumentException e) {    parser.displayMessageAndUsageReference(getErrStream(),ERR_ERROR_PARSING_ARGS.get(e.getMessage()));    return ReturnCode.CONFLICTING_ARGS.get();  }  try {    if (batchArgument.isPresent() || batchFileArgument.isPresent()) {      handleBatch(args);      return ReturnCode.SUCCESS.get();    }    hasSubCommand=parser.getSubCommand() != null;    if (hasSubCommand) {      return runSubCommand(handlers.get(parser.getSubCommand()));    } else     if (isInteractive()) {      return runInteractiveMode();    } else {      parser.displayMessageAndUsageReference(getErrStream(),ERR_ERROR_PARSING_ARGS.get(ERR_DSCFG_ERROR_MISSING_SUBCOMMAND.get()));      return ReturnCode.ERROR_USER_DATA.get();    }  }  finally {    factory.close();  }}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  processRequest(request,response);}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.DigestValueElement createDigestValueElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.DigestValueElementImpl();}  }
class C{  public boolean beginResetPageDisplay(ChildDisplayEvent event){  PWResetUserValidationModel model=(PWResetUserValidationModel)getModel();  return isPWResetEnabled() && model.isValidRealm();}  }
class C{  public static Position[] simplify(Position[] points,double tolerance){  return simplify(points,tolerance,SIMPLIFY_DEFAULT_HIGHEST_QUALITY);}  }
class C{  public void println(){  newLine();}  }
class C{  public static ResourceType resourceTypeFromMap(String uuid,Map<String,Set<String>> data){  return ResourceType.builder().setUUID(uuid).setName(getAttribute(data,CONFIG_NAME)).setDescription(getAttribute(data,CONFIG_DESCRIPTION,EMPTY)).addPatterns(data.get(CONFIG_PATTERNS)).addActions(getActions(data)).setCreatedBy(getAttribute(data,CONFIG_CREATED_BY,EMPTY)).setCreationDate(getDateAttributeAsLong(data,CONFIG_CREATION_DATE)).setLastModifiedBy(getAttribute(data,CONFIG_LAST_MODIFIED_BY,EMPTY)).setLastModifiedDate(getDateAttributeAsLong(data,CONFIG_LAST_MODIFIED_DATE)).build();}  }
class C{  public ContentLengthInputStream(final SessionInputBuffer in,long contentLength){  super();  if (in == null) {    throw new IllegalArgumentException("Input stream may not be null");  }  if (contentLength < 0) {    throw new IllegalArgumentException("Content length may not be negative");  }  this.in=in;  this.contentLength=contentLength;}  }
class C{  @Override public void close(){  closeWriter();}  }
class C{  public AMSearchResults searchSubOrganizations(String wildcard,AMSearchControl searchControl) throws AMException, SSOException {  return searchSubOrganizations(wildcard,null,searchControl);}  }
class C{  public static BooleanArgument generateSelfSignedArgument() throws ArgumentException {  return BooleanArgument.builder("generateSelfSignedCertificate").description(INFO_ARGUMENT_DESCRIPTION_USE_SELF_SIGNED_CERTIFICATE.get()).buildArgument();}  }
class C{  public static long convertToLong(String rawValue) throws XMPException {  try {    if (rawValue == null || rawValue.length() == 0) {      throw new XMPException("Empty convert-string",XMPError.BADVALUE);    }    if (rawValue.startsWith("0x")) {      return Long.parseLong(rawValue.substring(2),16);    } else {      return Long.parseLong(rawValue);    }  } catch (  NumberFormatException e) {    throw new XMPException("Invalid long string",XMPError.BADVALUE);  }}  }
class C{  public static void checkState(boolean expression){  if (!expression) {    throw new IllegalStateException();  }}  }
class C{  public synchronized void deleteObserver(Observer observer){  observers.remove(observer);}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.AnalyzedNameType createAnalyzedNameType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.AnalyzedNameTypeImpl();}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.RetrievalMethodType createRetrievalMethodType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.RetrievalMethodTypeImpl();}  }
class C{  public org.w3c.dom.Element signWithBinarySecurityToken(org.w3c.dom.Document doc,java.security.cert.Certificate cert,java.lang.String algorithm,java.util.List ids,java.lang.String refenceType) throws XMLSignatureException {  return sp.signWithBinarySecurityToken(doc,cert,algorithm,ids,refenceType);}  }
class C{  private static JavacErrorDetail[] parseJavacMessage(String errMsg,String fname,Node.Nodes page) throws IOException, JasperException {  ArrayList<JavacErrorDetail> errors=new ArrayList<>();  StringBuilder errMsgBuf=null;  int lineNum=-1;  JavacErrorDetail javacError=null;  BufferedReader reader=new BufferedReader(new StringReader(errMsg));  String line=null;  while ((line=reader.readLine()) != null) {    int beginColon=line.indexOf(':',2);    int endColon=line.indexOf(':',beginColon + 1);    if ((beginColon >= 0) && (endColon >= 0)) {      if (javacError != null) {        errors.add(javacError);      }      String lineNumStr=line.substring(beginColon + 1,endColon);      try {        lineNum=Integer.parseInt(lineNumStr);      } catch (      NumberFormatException e) {        lineNum=-1;      }      errMsgBuf=new StringBuilder();      javacError=createJavacError(fname,page,errMsgBuf,lineNum);    }    if (errMsgBuf != null) {      errMsgBuf.append(line);      errMsgBuf.append(System.lineSeparator());    }  }  if (javacError != null) {    errors.add(javacError);  }  reader.close();  JavacErrorDetail[] errDetails=null;  if (errors.size() > 0) {    errDetails=new JavacErrorDetail[errors.size()];    errors.toArray(errDetails);  }  return errDetails;}  }
class C{  public PdfXObject addImage(ImageData image,float a,float b,float c,float d,float e,float f){  return addImage(image,a,b,c,d,e,f,false);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  Attr domesticAttr;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testEmployee=(Element)elementList.item(0);  domesticAttr=testEmployee.getAttributeNode("invalidAttribute");  assertNull("elementGetAttributeNodeNullAssert",domesticAttr);}  }
class C{  private User onUserForeign(@Nullable User currentUser,@NotNull TLUser userForeign){  final User user;  if (currentUser == null) {    user=new User(userForeign.getId());  } else {    user=new User(currentUser);  }  user.setUserHash(userForeign.getAccessHash());  BotLogger.debug(LOGTAG,"userforeignid: " + user.getUserId());  return user;}  }
class C{  private void printSummary(UserData uData){  println();  println();  println(INFO_INSTALLDS_SUMMARY.get());  final LocalizableMessage[] labels={INFO_SERVER_PORT_LABEL.get(),INFO_ADMIN_CONNECTOR_PORT_LABEL.get(),INFO_INSTALLDS_SERVER_JMXPORT_LABEL.get(),INFO_SERVER_SECURITY_LABEL.get(),INFO_SERVER_DIRECTORY_MANAGER_DN_LABEL.get(),INFO_DIRECTORY_DATA_LABEL.get()};  final int jmxPort=uData.getServerJMXPort();  final LocalizableMessage[] values={LocalizableMessage.raw(String.valueOf(uData.getServerPort())),LocalizableMessage.raw(String.valueOf(uData.getAdminConnectorPort())),LocalizableMessage.raw(jmxPort != -1 ? String.valueOf(jmxPort) : ""),LocalizableMessage.raw(Utils.getSecurityOptionsString(uData.getSecurityOptions(),false)),LocalizableMessage.raw(uData.getDirectoryManagerDn().toString()),LocalizableMessage.raw(Utils.getDataDisplayString(uData))};  int maxWidth=0;  for (  final LocalizableMessage l : labels) {    maxWidth=Math.max(maxWidth,l.length());  }  for (int i=0; i < labels.length; i++) {    StringBuilder sb=new StringBuilder();    if (values[i] != null) {      final LocalizableMessage l=labels[i];      sb.append(l).append(" ");      final String[] lines=values[i].toString().split(Constants.LINE_SEPARATOR);      for (int j=0; j < lines.length; j++) {        if (j != 0) {          for (int k=0; k <= maxWidth; k++) {            sb.append(" ");          }        } else {          for (int k=0; k < maxWidth - l.length(); k++) {            sb.append(" ");          }        }        sb.append(lines[j]);        println(LocalizableMessage.raw(sb));        sb=new StringBuilder();      }    }  }  println();  if (uData.getStartServer()) {    println(INFO_INSTALLDS_START_SERVER.get());  } else {    println(INFO_INSTALLDS_DO_NOT_START_SERVER.get());  }  if (isWindows()) {    if (uData.getEnableWindowsService()) {      println(INFO_INSTALLDS_ENABLE_WINDOWS_SERVICE.get());    } else {      println(INFO_INSTALLDS_DO_NOT_ENABLE_WINDOWS_SERVICE.get());    }  }}  }
class C{  public final void endElement(final String namespaceURI,final String localName,final String name) throws org.xml.sax.SAXException {  if (m_cdataTagOpen)   closeCDATA();  if (null != namespaceURI && namespaceURI.length() > 0) {    super.endElement(namespaceURI,localName,name);    return;  }  try {    ElemContext elemContext=m_elemContext;    final ElemDesc elemDesc=elemContext.m_elementDesc;    final int elemFlags=elemDesc.getFlags();    final boolean elemEmpty=(elemFlags & ElemDesc.EMPTY) != 0;    if (m_doIndent) {      final boolean isBlockElement=(elemFlags & ElemDesc.BLOCK) != 0;      boolean shouldIndent=false;      if (m_ispreserve) {        m_ispreserve=false;      } else       if (m_doIndent && (!m_inBlockElem || isBlockElement)) {        m_startNewLine=true;        shouldIndent=true;      }      if (!elemContext.m_startTagOpen && shouldIndent)       indent(elemContext.m_currentElemDepth - 1);      m_inBlockElem=!isBlockElement;    }    final java.io.Writer writer=m_writer;    if (!elemContext.m_startTagOpen) {      writer.write("</");      writer.write(name);      writer.write('>');    } else {      if (m_tracer != null)       super.fireStartElem(name);      int nAttrs=m_attributes.getLength();      if (nAttrs > 0) {        processAttributes(m_writer,nAttrs);        m_attributes.clear();      }      if (!elemEmpty) {        writer.write("></");        writer.write(name);        writer.write('>');      } else {        writer.write('>');      }    }    if ((elemFlags & ElemDesc.WHITESPACESENSITIVE) != 0)     m_ispreserve=true;    m_isprevtext=false;    if (m_tracer != null)     super.fireEndElem(name);    if (elemEmpty) {      m_elemContext=elemContext.m_prev;      return;    }    if (!elemContext.m_startTagOpen) {      if (m_doIndent && !m_preserves.isEmpty())       m_preserves.pop();    }    m_elemContext=elemContext.m_prev;  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  protected ClassLoader bindThread(){  ClassLoader oldContextClassLoader=bind(false,null);  if (isUseNaming()) {    try {      ContextBindings.bindThread(this,getNamingToken());    } catch (    NamingException e) {    }  }  return oldContextClassLoader;}  }
class C{  private void writeObject(java.io.ObjectOutputStream oos) throws IOException {  oos.defaultWriteObject();  if (certs == null || certs.length == 0) {    oos.writeInt(0);  } else {    oos.writeInt(certs.length);    for (int i=0; i < certs.length; i++) {      java.security.cert.Certificate cert=certs[i];      try {        oos.writeUTF(cert.getType());        byte[] encoded=cert.getEncoded();        oos.writeInt(encoded.length);        oos.write(encoded);      } catch (      CertificateEncodingException cee) {        throw new IOException(cee.getMessage());      }    }  }  if (signers != null && signers.length > 0) {    oos.writeObject(signers);  }}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){}  }
class C{  public static byte[] decodeStringContent(byte[] content,boolean hexWriting){  return decodeStringContent(content,0,content.length - 1,hexWriting);}  }
class C{  @Issue("JENKINS-29922") @Test public void dollar_class_must_die3() throws Exception {  WorkflowJob p=r.jenkins.createProject(WorkflowJob.class,"die3");  p.setDefinition(new CpsFlowDefinition("nevada()"));  r.assertLogContains("All For Our Country",r.assertBuildStatusSuccess(p.scheduleBuild2(0)));}  }
class C{  private static <T>int gallopRight(T key,T[] a,int base,int len,int hint,Comparator<? super T> c){  assert len > 0 && hint >= 0 && hint < len;  int ofs=1;  int lastOfs=0;  if (c.compare(key,a[base + hint]) < 0) {    int maxOfs=hint + 1;    while (ofs < maxOfs && c.compare(key,a[base + hint - ofs]) < 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    int tmp=lastOfs;    lastOfs=hint - ofs;    ofs=hint - tmp;  } else {    int maxOfs=len - hint;    while (ofs < maxOfs && c.compare(key,a[base + hint + ofs]) >= 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    lastOfs+=hint;    ofs+=hint;  }  assert -1 <= lastOfs && lastOfs < ofs && ofs <= len;  lastOfs++;  while (lastOfs < ofs) {    int m=lastOfs + ((ofs - lastOfs) >>> 1);    if (c.compare(key,a[base + m]) < 0)     ofs=m; else     lastOfs=m + 1;  }  assert lastOfs == ofs;  return ofs;}  }
class C{  @AndroidOnly("The RI doesn't throw the IllegalStateException.") public void test_wrap_ByteBuffer_ByteBuffer_04(){  String host="new host";  int port=8080;  ByteBuffer bbs=ByteBuffer.allocate(10);  ByteBuffer bbd=ByteBuffer.allocate(10);  SSLEngine sse=getEngine(host,port);  try {    sse.wrap(bbs,bbd);    fail("IllegalStateException wasn't thrown");  } catch (  IllegalStateException iobe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalStateException");  }}  }
class C{  @Override public void update(){  if (yoloView != null && wasHit) {    yPos-=1;    yoloView.setTranslateY(yPos);    yoloView.setFitWidth(yoloView.getFitWidth() + 1);    yoloView.setTranslateX(yoloView.getTranslateX() - 0.5);    yoloView.setFitHeight(yoloView.getFitWidth() * 48.0 / 123);    yoloView.setOpacity(yoloView.getOpacity() - 0.003);    if (yoloView.getOpacity() <= 0) {      parent.getChildren().remove(yoloView);      yoloView=null;      parent=null;      xPos=0;      yPos=0;    }  }}  }
class C{  public MGF1ParameterSpec(String mdName){  if (mdName == null) {    throw new NullPointerException("digest algorithm is null");  }  this.mdName=mdName;}  }
class C{  private void retainValidEntityIDs(Map map,String protocol,String realm) throws COTException {  Set pSet=(Set)map.get(protocol);  if ((pSet != null) && !pSet.isEmpty()) {    Set entityIds=getAllEntities(realm,protocol);    if ((entityIds == null) || entityIds.isEmpty()) {      map.remove(protocol);    } else {      if (!entityIds.containsAll(pSet)) {        if (entityIds.retainAll(pSet)) {          if (debug.messageEnabled()) {            debug.message("COTDescriptor.retainValidEntityIDs:" + " Following entity id: " + entityIds + " are valid and will be added to "+ "the circle of trust");          }          map.put(protocol,entityIds);        }      }    }  }}  }
class C{  protected PropertyListParser(){}  }
class C{  public void mouseDragged(MouseEvent e){  getHandler().mouseDragged(e);}  }
class C{  public void write(int c){synchronized (lock) {    int newcount=count + 1;    if (newcount > buf.length) {      buf=Arrays.copyOf(buf,Math.max(buf.length << 1,newcount));    }    buf[count]=(char)c;    count=newcount;  }}  }
class C{  @Deprecated public PdfOutline(String title,PdfDictionary content,PdfDocument pdfDocument){  this.title=title;  this.content=content;  this.pdfDoc=pdfDocument;}  }
class C{  public void scrollToFinishActivity(){  final int childWidth=mContentView.getWidth();  int left=0, top=0;  left=childWidth + mShadowLeft.getIntrinsicWidth() + OVERSCROLL_DISTANCE;  mDragHelper.smoothSlideViewTo(mContentView,left,top);  invalidate();}  }
class C{  protected final void appendTextChunk(CharSequence text){  result.append(text);}  }
class C{  public TableModelEvent(TableModel source,int firstRow,int lastRow){  this(source,firstRow,lastRow,ALL_COLUMNS,UPDATE);}  }
class C{  public SAXNotRecognizedException(String message){  super(message);}  }
class C{  public SizeSequence(int[] sizes){  this();  setSizes(sizes);}  }
class C{  void readMessages() throws IOException {  if (rxTime == 0) {    rxTime=System.currentTimeMillis();  }  MessageInfo info=channel.receive(rxBuffer,null,null);  if (info == null) {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {      logger.logDebug("SCTP read-event but no message");    }    return;  } else   if (info.bytes() == -1) {    logger.logWarning("SCTP peer closed, closing too...");    this.close();    return;  } else   if (!info.isComplete()) {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {      logger.logDebug("SCTP incomplete message; bytes=" + info.bytes());    }    return;  } else {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {      logger.logDebug("SCTP message now complete; bytes=" + info.bytes());    }  }  byte[] msg=new byte[rxBuffer.position()];  rxBuffer.flip();  rxBuffer.get(msg);  rxBuffer.compact();  try {    SIPMessage m=parser.parseSIPMessage(msg,true,true,this);    this.processMessage(m,rxTime);    rxTime=0;  } catch (  ParseException e) {    logger.logException(e);    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {      logger.logDebug("Invalid message bytes=" + msg.length + ":"+ new String(msg));    }    this.close();    throw new IOException("Error parsing incoming SCTP message",e);  }}  }
class C{  public void handleTblRestSTSInstancesDataActionHrefRequest(RequestInvocationEvent event){  RestSTSEditViewBean vb=(RestSTSEditViewBean)getViewBean(RestSTSEditViewBean.class);  String instanceName=hexToString((String)getDisplayFieldValue(TBL_REST_STS_INSTANCES_DATA_ACTION_HREF));  setPageSessionAttribute(INSTANCE_NAME,instanceName);  setPageSessionAttribute(AMAdminConstants.SAVE_VB_NAME,getClass().getName());  unlockPageTrail();  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public static Attribute empty(Attribute attribute){  return new AttributeBuilder(attribute.getAttributeDescription()).toAttribute();}  }
class C{  @DataProvider public Object[][] partialDateTimeSyntaxes(){  GregorianCalendar cal=new GregorianCalendar(TimeZone.getTimeZone("UTC"));  cal.setLenient(false);  int second=cal.get(Calendar.SECOND);  int minute=cal.get(Calendar.MINUTE);  int hour=cal.get(Calendar.HOUR);  int date=cal.get(Calendar.DATE);  int month=cal.get(Calendar.MONTH) + 1;  int year=cal.get(Calendar.YEAR);  return new Object[][]{{"20MM30DD1978YY",false},{"02MM29DD2009YY",false},{"02MM31DD2010YY",false},{"-1s",false},{"02M29D2008Y",true},{"DDYY",false},{"02D",true},{"12M",true},{"1978Y",true},{"0MM",false},{"20MM03DD10MM",false},{"00s12m13h",true},{"00s12m14h1M3D1978Y",true},{"1s",true},{"12m",true},{"23h",true},{"61s",false},{"60m",false},{"24h",false},{second + "s",true},{minute + "m",true},{hour + "h",true},{date + "D",true},{month + "M",true},{year + "Y",true},{month + "M" + date+ "D",true},{year + "Y" + date+ "D",true},{month + "M" + year+ "Y"+ date+ "D",true}};}  }
class C{  public SAML2SessionPartner(String sessionPartner,boolean isRoleIDP){  this.sessionPartner=sessionPartner;  this.isRoleIDP=isRoleIDP;}  }
class C{  public static char[] encode(final byte[] in){  final int iLen=in.length;  final int oDataLen=(iLen * 4 + 2) / 3;  final int oLen=((iLen + 2) / 3) * 4;  final char[] out=new char[oLen];  int ip=0;  int op=0;  while (ip < iLen) {    final int i0=in[ip++] & 0xff;    final int i1=ip < iLen ? in[ip++] & 0xff : 0;    final int i2=ip < iLen ? in[ip++] & 0xff : 0;    final int o0=i0 >>> 2;    final int o1=((i0 & 3) << 4) | (i1 >>> 4);    final int o2=((i1 & 0xf) << 2) | (i2 >>> 6);    final int o3=i2 & 0x3F;    out[op++]=map1[o0];    out[op++]=map1[o1];    out[op]=op < oDataLen ? map1[o2] : '=';    op++;    out[op]=op < oDataLen ? map1[o3] : '=';    op++;  }  return out;}  }
class C{  public MP3File(File file) throws IOException, TagException, ReadOnlyFileException, InvalidAudioFrameException {  this(file,LOAD_ALL);}  }
class C{  public static void writeLines(File file,String encoding,Collection<?> lines,String lineEnding) throws IOException {  writeLines(file,encoding,lines,lineEnding,false);}  }
class C{  public void createRelationType(String relationTypeName,RoleInfo[] roleInfoArray) throws IllegalArgumentException, InvalidRelationTypeException {  if (relationTypeName == null || roleInfoArray == null) {    String excMsg="Invalid parameter.";    throw new IllegalArgumentException(excMsg);  }  RELATION_LOGGER.entering(RelationService.class.getName(),"createRelationType",relationTypeName);  RelationType relType=new RelationTypeSupport(relationTypeName,roleInfoArray);  addRelationTypeInt(relType);  RELATION_LOGGER.exiting(RelationService.class.getName(),"createRelationType");  return;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.RSAKeyValueElement createRSAKeyValueElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.RSAKeyValueElementImpl();}  }
class C{  private byte[] generateDerivedKey(){  byte[] digestBytes=new byte[digest.getDigestSize()];  digest.update(password,0,password.length);  digest.update(salt,0,salt.length);  digest.doFinal(digestBytes,0);  for (int i=1; i < iterationCount; i++) {    digest.update(digestBytes,0,digestBytes.length);    digest.doFinal(digestBytes,0);  }  return digestBytes;}  }
class C{  public void error(String msg){  System.out.println("DOM ERROR! class: " + this.getClass().getName());  throw new RuntimeException(XMLMessages.createXMLMessage(msg,null));}  }
class C{  public Observable<Void> initializePersistenceObservable(){  io.vertx.rx.java.ObservableFuture<Void> resultHandler=io.vertx.rx.java.RxHelper.observableFuture();  initializePersistence(resultHandler.toHandler());  return resultHandler;}  }
class C{  public boolean reset(){  boolean wasReset=false;  if (super.reset()) {    resetToXMLSAXHandler();    wasReset=true;  }  return wasReset;}  }
class C{  @Override public void end(String namespace,String name) throws Exception {  Object child=digester.peek(0);  Object parent=digester.peek(1);  NamingResourcesImpl namingResources=null;  if (parent instanceof Context) {    namingResources=((Context)parent).getNamingResources();  } else {    namingResources=(NamingResourcesImpl)parent;  }  IntrospectionUtils.callMethod1(namingResources,methodName,child,paramType,digester.getClassLoader());}  }
class C{  private Future<ShoppingCart> generateCurrentCartFromStream(ShoppingCart rawCart,List<Product> productList){  Future<ShoppingCart> future=Future.future();  if (productList.stream().anyMatch(null)) {    future.fail("Error when retrieve products: empty");    return future;  }  List<ProductTuple> currentItems=rawCart.getAmountMap().entrySet().stream().map(null).filter(null).collect(Collectors.toList());  ShoppingCart cart=rawCart.setProductItems(currentItems);  return Future.succeededFuture(cart);}  }
class C{  @Inject public IdTokenResponseTypeHandler(OpenIdConnectTokenStore tokenStore,OpenAMSettings openAMSettings){  this.tokenStore=tokenStore;  this.openAMSettings=openAMSettings;}  }
class C{  public void insert_component_outline(PlaShape p_shape,boolean p_is_front,PlaVectorInt p_translation,int p_rotate_degree,int p_component_no,ItemFixState p_fixed_state){  if (p_shape == null) {    System.out.println("BasicBoard.insert_component_outline: p_shape is null");    return;  }  if (!p_shape.is_bounded()) {    System.out.println("BasicBoard.insert_component_outline: p_shape is not bounded");    return;  }  BrdComponentOutline outline=new BrdComponentOutline(p_shape,p_is_front,p_translation,p_rotate_degree,p_component_no,p_fixed_state,this);  insert_item(outline);}  }
class C{  public StringBuilder encodeBody(StringBuilder retval){  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(LESS_THAN);  }  address.encode(retval);  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(GREATER_THAN);  }  if (!parameters.isEmpty()) {    retval=retval.append(COMMA);    retval=this.parameters.encode(retval);  }  return retval;}  }
class C{  public void testNoGuard(){  Object obj=null;  GuardedObject go=new GuardedObject(obj,null);  assertNull(go.getObject());  obj="ewte rtw3456";  go=new GuardedObject(obj,null);  assertEquals(obj,go.getObject());}  }
class C{  public void rearrangeChildren(){  rearrangeChildren(-1);}  }
class C{  public ByteArrayOutputStream(int size){  if (size < 0) {    throw new IllegalArgumentException("Negative initial size: " + size);  }  buf=new byte[size];}  }
class C{  protected void adjustEntry(Object key){  Entry tab[]=table;  int hash=key.hashCode();  int index=(hash & 0x7FFFFFFF) % tab.length;  for (Entry e=tab[index], prev=null; e != null; prev=e, e=e.next) {    if ((e.hash == hash) && e.key.equals(key)) {      if (prev != null) {        prev.next=e.next;      } else {        tab[index]=e.next;      }    }  }}  }
class C{  protected SOAPMessage signTerminationRequest(SOAPMessage msg,String idAttrName,String id) throws SAMLException {  FSUtils.debug.message("FSSPFedTerminationHandler.signTerminationRequest: Called");  String certAlias=IDFFMetaUtils.getFirstAttributeValueFromConfig(hostedConfig,IFSConstants.SIGNING_CERT_ALIAS);  if (certAlias == null || certAlias.length() == 0) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSSPFedTerminationHandler.signTerminationRequest: couldn't" + "obtain this site's cert alias.");    }    throw new SAMLResponderException(FSUtils.bundle.getString(IFSConstants.NO_CERT_ALIAS));  }  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSSPFedTerminationHandler.signTerminationRequest: Provider's " + "certAlias is found: " + certAlias);  }  XMLSignatureManager manager=XMLSignatureManager.getInstance();  Document doc=(Document)FSServiceUtils.createSOAPDOM(msg);  String xpath="//*[local-name()=\'ProviderID\']";  manager.signXML(doc,certAlias,SystemConfigurationUtil.getProperty(SAMLConstants.XMLSIG_ALGORITHM),idAttrName,id,false,xpath);  return FSServiceUtils.convertDOMToSOAP(doc);}  }
class C{  public void info(Object message,Throwable exception){  log(Level.INFO,String.valueOf(message),exception);}  }
class C{  private Attr readAttributeFromDataStore(String attrName) throws UMSException {  Attr attr=DataLayer.getInstance().getAttribute(getPrincipal(),getGuid(),attrName);  if (m_attrSet == null) {    m_attrSet=new AttrSet();  }  if (m_nullAttributes == null) {    m_nullAttributes=new ArrayList();  }  if (attr != null) {    m_attrSet.replace(attr);  } else   if (!m_nullAttributes.contains(attrName)) {    m_nullAttributes.add(attrName);  }  return attr;}  }
class C{  public NASIdentifierAttribute(String id){  super(OctetUtils.toOctets(AttributeType.NAS_IDENTIFIER,id));  this.id=new String(super.getOctets(),2,super.getOctets().length - 2);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node genderNode;  Node entRef;  Node entElement;  Node createdNode;  Node insertedNode;  Node refChild=null;  int nodeType;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  genderNode=genderList.item(2);  entRef=genderNode.getFirstChild();  assertNotNull("entRefNotNull",entRef);  nodeType=(int)entRef.getNodeType();  if (equals(1,nodeType)) {    entRef=doc.createEntityReference("ent4");    assertNotNull("createdEntRefNotNull",entRef);  }  entElement=entRef.getFirstChild();  assertNotNull("entElementNotNull",entElement);  createdNode=doc.createElement("text3");{    boolean success=false;    try {      insertedNode=entElement.insertBefore(createdNode,refChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NOT_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  @SuppressWarnings("unchecked") @Override public PdfNull copyTo(PdfDocument document){  return (PdfNull)super.copyTo(document,true);}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb.EncryptedResourceIDType createEncryptedResourceIDType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb.impl.EncryptedResourceIDTypeImpl();}  }
class C{  public static boolean isNameRegistrationCancelled(HttpServletRequest request){  String status=request.getParameter(IFSConstants.REGISTRATION_STATUS);  if (status != null && status.equalsIgnoreCase(IFSConstants.CANCEL)) {    return true;  } else {    return false;  }}  }
class C{  public JsonArrayRequest(String url,Listener<JSONArray> listener,ErrorListener errorListener){  super(Method.GET,url,null,listener,errorListener);}  }
class C{  public static ByteString empty(){  return EMPTY;}  }
class C{  private static JsonValue flattenJson(String parent,JsonValue original){  JsonValue flattened=new JsonValue(new HashMap<String,Object>());  Iterator<String> iter=original.keys().iterator();  while (iter.hasNext()) {    String oKey=iter.next();    String key=(parent.isEmpty() ? "" : parent + ".") + oKey;    JsonValue value=original.get(oKey);    if (value.isMap()) {      addAllToJson(flattened,flattenJson(key,value));    } else {      flattened.put(key,value.getObject());    }  }  return flattened;}  }
class C{  public List<String> csvStringToList(final String csv,final boolean lowerCase){  if (csv == null) {    return new ArrayList<String>();  }  final String[] split=csv.split(",");  for (int i=0; i < split.length; i++) {    if (lowerCase) {      split[i]=split[i].toLowerCase().trim();    } else {      split[i]=split[i].trim();    }  }  return new ArrayList<String>(Arrays.asList(split));}  }
class C{  public ContentDispositionParser(String contentDisposition){  super(contentDisposition);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodevalue01.class,args);}  }
class C{  public long readLong() throws SQLException {  Long attrib=(Long)getNextAttribute();  return (attrib == null) ? 0 : attrib.longValue();}  }
class C{  public static void createNamedConfig(String configName,int priority,Map attributeDataMap,String orgName,SSOToken token) throws SMSException, SSOException, AMConfigurationException {  if (debug.messageEnabled()) {    debug.message("createNamedConfig name=" + configName + ", value="+ attributeDataMap);  }  if (configName == null || configName.length() == 0) {    throw new AMConfigurationException(bundleName,"null-name");  }  ServiceConfigManager scm=new ServiceConfigManager(token,SERVICE_NAME,SERVICE_VERSION);  ServiceConfig orgConfig=scm.getOrganizationConfig(orgName,null);  if (orgConfig == null) {    orgConfig=scm.createOrganizationConfig(orgName,null);  }  ServiceConfig authConfig=orgConfig.getSubConfig(NAMED_CONFIGURATION);  if (authConfig == null) {    orgConfig.addSubConfig(NAMED_CONFIGURATION,null,0,null);    authConfig=orgConfig.getSubConfig(NAMED_CONFIGURATION);  }  debug.message("Got auth config");  authConfig.addSubConfig(configName,NAMED_CONFIGURATION_ID,priority,attributeDataMap);}  }
class C{  public Future<Job> error(Throwable ex){  return this.emitError(ex).set("error",ex.getMessage()).compose(null);}  }
class C{  public void testMultiplyDiffScalePosNeg(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=10;  String b="747233429293018787918347987234564568";  int bScale=-10;  String c="920003122862175749786430095741145455670101391569026662845893091880727173060570190220616";  int cScale=0;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.multiply(bNumber);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  private static synchronized String formatDateAsTime(Date d){  return formatTimeIn.format(d);}  }
class C{  public ParcelFileDescriptor simpleQueryForBlobFileDescriptor(){  acquireReference();  try {    return getSession().executeForBlobFileDescriptor(getSql(),getBindArgs(),getConnectionFlags(),null);  } catch (  SQLiteDatabaseCorruptException ex) {    onCorruption();    throw ex;  } finally {    releaseReference();  }}  }
class C{  public boolean update(Long parameterID,String parameterName,Long actionID,Long dataTypeID){  if (parameterID == null) {    throw new IllegalArgumentException("primary key null.");  }  ContentValues args=new ContentValues();  if (parameterName != null) {    args.put(KEY_ACTIONPARAMETERNAME,parameterName);  }  if (actionID != null) {    args.put(KEY_ACTIONID,actionID);  }  if (dataTypeID != null) {    args.put(KEY_DATATYPEID,dataTypeID);  }  if (args.size() > 0) {    return database.update(DATABASE_TABLE,args,KEY_ACTIONPARAMETERID + "=" + parameterID,null) > 0;  }  return false;}  }
class C{  @Override public void close() throws IOException {  if (!closed) {    finish();    inf.end();    out.close();    closed=true;  }}  }
class C{  public static final XResourceBundle loadResourceBundle(String className,Locale locale) throws MissingResourceException {  String suffix=getResourceSuffix(locale);  try {    String resourceName=className + suffix;    return (XResourceBundle)ResourceBundle.getBundle(resourceName,locale);  } catch (  MissingResourceException e) {    try {      return (XResourceBundle)ResourceBundle.getBundle(XSLT_RESOURCE,new Locale("en","US"));    } catch (    MissingResourceException e2) {      throw new MissingResourceException("Could not load any resource bundles.",className,"");    }  }}  }
class C{  private static String c66DecodeCookieString(String urlEncodedString){  if (urlEncodedString == null || urlEncodedString.length() == 0) {    return urlEncodedString;  }  int length=urlEncodedString.length();  char[] chars=new char[length];  boolean firstStar=true;  for (int i=0; i < length; i++) {    char c=urlEncodedString.charAt(i);    if (c == '-') {      chars[i]='+';    } else     if (c == '_') {      chars[i]='/';    } else     if (c == '.') {      chars[i]='=';    } else     if (c == '*') {      if (firstStar) {        firstStar=false;        chars[i]='@';      } else {        chars[i]='#';      }    } else {      chars[i]=c;    }  }  return new String(chars);}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.SignaturePropertyElement createSignaturePropertyElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.SignaturePropertyElementImpl();}  }
class C{  public boolean removeElement(Object obj){  return false;}  }
class C{  public static void reloadWhitelist(){  server.reloadWhitelist();}  }
class C{  public void testPosPosFirstLonger(){  byte aBytes[]={-128,9,56,100,-2,-76,89,45,91,3,-15,35,26,-117,23,87,-25,-75};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=1;  int bSign=1;  byte rBytes[]={0,-2,-76,88,44,1,2,17,35,16,9,2,5,6,21};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.and(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  private static int med3(double x[],int a,int b,int c){  return (x[a] < x[b] ? (x[b] < x[c] ? b : x[a] < x[c] ? c : a) : (x[b] > x[c] ? b : x[a] > x[c] ? c : a));}  }
class C{  @Override public void connectionClosed(final ConnectionEvent event){  final PooledConnection pc=(PooledConnection)event.getSource();  if (!validatingSet.contains(pc)) {    final PooledConnectionAndInfo pci=pcMap.get(pc);    if (pci == null) {      throw new IllegalStateException(NO_KEY_MESSAGE);    }    try {      _pool.returnObject(pci);    } catch (    final Exception e) {      System.err.println("CLOSING DOWN CONNECTION AS IT COULD " + "NOT BE RETURNED TO THE POOL");      pc.removeConnectionEventListener(this);      try {        doDestroyObject(pci);      } catch (      final Exception e2) {        System.err.println("EXCEPTION WHILE DESTROYING OBJECT " + pci);        e2.printStackTrace();      }    }  }}  }
class C{  public String toURLEncodedQueryString() throws FSMsgException {  if ((providerId == null) || (providerId.length() == 0)) {    FSUtils.debug.error("FSNameRegistrationRequest." + "toURLEncodedQueryString: providerId is null in the request " + "with requestId: "+ requestID);    throw new FSMsgException("nullProviderID",null);  }  if ((requestID == null) || (requestID.length() == 0)) {    requestID=SAMLUtils.generateID();    if (requestID == null) {      FSUtils.debug.error("FSNameRegistrationRequest." + "toURLEncodedQueryString: couldn't generate RequestID.");      throw new FSMsgException("errorGenerateID",null);    }  }  StringBuffer urlEncodedAuthnReq=new StringBuffer(300);  urlEncodedAuthnReq.append("RequestID=").append(URLEncDec.encode(requestID)).append(IFSConstants.AMPERSAND);  urlEncodedAuthnReq.append("MajorVersion=").append(majorVersion).append(IFSConstants.AMPERSAND);  urlEncodedAuthnReq.append("MinorVersion=").append(minorVersion).append(IFSConstants.AMPERSAND);  urlEncodedAuthnReq.append("RelayState=").append(URLEncDec.encode(relayState)).append(IFSConstants.AMPERSAND);  if (issueInstant != null) {    urlEncodedAuthnReq.append("IssueInstant=").append(URLEncDec.encode(DateUtils.toUTCDateFormat(issueInstant))).append(IFSConstants.AMPERSAND);  } else {    FSUtils.debug.error("FSNameRegistrationRequest." + "toURLEncodedQueryString: issueInstant missing");    String[] args={IFSConstants.ISSUE_INSTANT};    throw new FSMsgException("missingAttribute",args);  }  if (providerId != null && providerId.length() > 0) {    urlEncodedAuthnReq.append("ProviderID=").append(URLEncDec.encode(providerId)).append(IFSConstants.AMPERSAND);  }  if (spProvidedNameIdentifier != null) {    if (spProvidedNameIdentifier.getName() != null && spProvidedNameIdentifier.getName().length() != 0) {      urlEncodedAuthnReq.append("SPProvidedNameIdentifier=").append(URLEncDec.encode(spProvidedNameIdentifier.getName())).append(IFSConstants.AMPERSAND);    }    if (spProvidedNameIdentifier.getNameQualifier() != null && spProvidedNameIdentifier.getNameQualifier().length() != 0) {      urlEncodedAuthnReq.append("SPNameQualifier=").append(URLEncDec.encode(spProvidedNameIdentifier.getNameQualifier())).append(IFSConstants.AMPERSAND);    }    if (spProvidedNameIdentifier.getFormat() != null && spProvidedNameIdentifier.getFormat().length() != 0) {      urlEncodedAuthnReq.append("SPNameFormat=").append(URLEncDec.encode(spProvidedNameIdentifier.getFormat())).append(IFSConstants.AMPERSAND);    }  }  if (oldProvidedNameIdentifier != null) {    if (oldProvidedNameIdentifier.getName() != null && oldProvidedNameIdentifier.getName().length() != 0) {      urlEncodedAuthnReq.append("OldProvidedNameIdentifier=").append(URLEncDec.encode(oldProvidedNameIdentifier.getName())).append(IFSConstants.AMPERSAND);    }    if (oldProvidedNameIdentifier.getNameQualifier() != null && oldProvidedNameIdentifier.getNameQualifier().length() != 0) {      urlEncodedAuthnReq.append("OldNameQualifier=").append(URLEncDec.encode(oldProvidedNameIdentifier.getNameQualifier())).append(IFSConstants.AMPERSAND);    }    if (oldProvidedNameIdentifier.getFormat() != null && oldProvidedNameIdentifier.getFormat().length() != 0) {      urlEncodedAuthnReq.append("OldNameFormat=").append(URLEncDec.encode(oldProvidedNameIdentifier.getFormat())).append(IFSConstants.AMPERSAND);    }  }  if (idpProvidedNameIdentifier != null) {    if (idpProvidedNameIdentifier.getName() != null && idpProvidedNameIdentifier.getName().length() != 0) {      urlEncodedAuthnReq.append("IDPProvidedNameIdentifier=").append(URLEncDec.encode(idpProvidedNameIdentifier.getName())).append(IFSConstants.AMPERSAND);    }    if (idpProvidedNameIdentifier.getNameQualifier() != null && idpProvidedNameIdentifier.getNameQualifier().length() != 0) {      urlEncodedAuthnReq.append("IDPNameQualifier=").append(URLEncDec.encode(idpProvidedNameIdentifier.getNameQualifier())).append(IFSConstants.AMPERSAND);    }    if (idpProvidedNameIdentifier.getFormat() != null && idpProvidedNameIdentifier.getFormat().length() != 0) {      urlEncodedAuthnReq.append("IDPNameFormat=").append(URLEncDec.encode(idpProvidedNameIdentifier.getFormat())).append(IFSConstants.AMPERSAND);    }  }  return urlEncodedAuthnReq.toString();}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  System.out.println("shootme: got an ACK! ");  System.out.println("Dialog State = " + dialog.getState());}  }
class C{  public GlyphJustificationInfo(float weight,boolean growAbsorb,int growPriority,float growLeftLimit,float growRightLimit,boolean shrinkAbsorb,int shrinkPriority,float shrinkLeftLimit,float shrinkRightLimit){  if (weight < 0) {    throw new IllegalArgumentException("weight is negative");  }  if (!priorityIsValid(growPriority)) {    throw new IllegalArgumentException("Invalid grow priority");  }  if (growLeftLimit < 0) {    throw new IllegalArgumentException("growLeftLimit is negative");  }  if (growRightLimit < 0) {    throw new IllegalArgumentException("growRightLimit is negative");  }  if (!priorityIsValid(shrinkPriority)) {    throw new IllegalArgumentException("Invalid shrink priority");  }  if (shrinkLeftLimit < 0) {    throw new IllegalArgumentException("shrinkLeftLimit is negative");  }  if (shrinkRightLimit < 0) {    throw new IllegalArgumentException("shrinkRightLimit is negative");  }  this.weight=weight;  this.growAbsorb=growAbsorb;  this.growPriority=growPriority;  this.growLeftLimit=growLeftLimit;  this.growRightLimit=growRightLimit;  this.shrinkAbsorb=shrinkAbsorb;  this.shrinkPriority=shrinkPriority;  this.shrinkLeftLimit=shrinkLeftLimit;  this.shrinkRightLimit=shrinkRightLimit;}  }
class C{  final long internalNextLong(long origin,long bound){  long r=nextLong();  if (origin < bound) {    long n=bound - origin, m=n - 1;    if ((n & m) == 0L)     r=(r & m) + origin; else     if (n > 0L) {      for (long u=r >>> 1; u + m - (r=u % n) < 0L; u=nextLong() >>> 1)       ;      r+=origin;    } else {      while (r < origin || r >= bound)       r=nextLong();    }  }  return r;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namespaceURI01.class,args);}  }
class C{  public static boolean equals(long[] array1,long[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  public static void main(String[] args) throws Exception {  initProcessor();  CommandSession session=processor.createSession(System.in,System.out,System.err);  session.put("prompt","openidm# ");  session.put("_cwd",IdentityServer.getFileForPath("."));  TrustStoreServiceFactory.getInstance();  if (args.length == 0) {    Thread thread=new Thread(new Console(session,new History()),"OpenIDM shell");    thread.start();  } else {    processor.eval(session,args);  }}  }
class C{  public JmxConnectionHandler(){  super("JMX Connection Handler Thread");  this.connectionList=new CopyOnWriteArrayList<>();}  }
class C{  private Executors(){}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_noderemovechildoldchildnonexistent.class,args);}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SAVED_TOP_STORY\"";  db.execSQL(sql);}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  try {    System.out.println("shootme: got an ACK! ");    System.out.println("Dialog State = " + dialog.getState());    SipProvider provider=(SipProvider)requestEvent.getSource();    if (!callerSendsBye) {      Request byeRequest=dialog.createRequest(Request.BYE);      ClientTransaction ct=provider.getNewClientTransaction(byeRequest);      dialog.sendRequest(ct);    }  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public static void initAdminSubject(){  if (adminSubject == null) {    initialise();  }}  }
class C{  public String toASCIIPropertyList(){  StringBuilder ascii=new StringBuilder();  toASCII(ascii,0);  ascii.append(NEWLINE);  return ascii.toString();}  }
class C{  public boolean addAssertion(Assertion assertion){  if (signed) {    return false;  }  if (assertion == null) {    return false;  }  if ((assertions == null) || (assertions == Collections.EMPTY_LIST)) {    assertions=new ArrayList();  }  assertions.add(assertion);  return true;}  }
class C{  public ReplicationMsg receive() throws IOException, DataFormatException, NotSupportedOldVersionPDUException {  try {    lastReceiveTime=System.currentTimeMillis();    read(rcvLengthBuf);    final int totalLength=Integer.parseInt(new String(rcvLengthBuf),16);    try {      final byte[] buffer=new byte[totalLength];      read(buffer);      lastReceiveTime=0;      return ReplicationMsg.generateMsg(buffer,protocolVersion);    } catch (    final OutOfMemoryError e) {      throw new IOException("Packet too large, can't allocate " + totalLength + " bytes.");    }  } catch (  final IOException|DataFormatException|NotSupportedOldVersionPDUException|RuntimeException e) {    setSessionError(e);    throw e;  }}  }
class C{  @SuppressWarnings("unchecked") public synchronized Reference<? extends T> poll(){  if (head == null) {    return null;  }  Reference<? extends T> ret;  ret=head;  if (head == head.queueNext) {    head=null;  } else {    head=head.queueNext;  }  ret.queueNext=null;  return ret;}  }
class C{  public Enumeration postorderEnumeration(){  return new PostorderEnumeration(this);}  }
class C{  public void paintTreeCellBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrremovechild1.class,args);}  }
class C{  @Override public String encodeURL(String url){  String absolute;  try {    absolute=toAbsolute(url);  } catch (  IllegalArgumentException iae) {    return url;  }  if (isEncodeable(absolute)) {    if (url.equalsIgnoreCase("")) {      url=absolute;    } else     if (url.equals(absolute) && !hasPath(url)) {      url+='/';    }    return (toEncoded(url,request.getSessionInternal().getIdInternal()));  } else {    return (url);  }}  }
class C{  @DataProvider(name="testSafeDataLevelHighPrecommitProvider") private Object[][] testSafeDataLevelHighPrecommitProvider(){  return new Object[][]{{2,true,DEFAULT_GID,DEFAULT_GENID,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO},{2,true,DEFAULT_GID,DEFAULT_GENID,DEFAULT_GID,DEFAULT_GENID,TIMEOUT_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO},{2,true,DEFAULT_GID,DEFAULT_GENID,DEFAULT_GID,DEFAULT_GENID,TIMEOUT_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,TIMEOUT_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO},{2,true,DEFAULT_GID,DEFAULT_GENID,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,OTHER_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO},{2,true,DEFAULT_GID,DEFAULT_GENID,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,OTHER_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO},{3,true,DEFAULT_GID,DEFAULT_GENID,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO},{3,true,DEFAULT_GID,DEFAULT_GENID,DEFAULT_GID,DEFAULT_GENID,TIMEOUT_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO},{3,true,DEFAULT_GID,DEFAULT_GENID,DEFAULT_GID,DEFAULT_GENID,TIMEOUT_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,TIMEOUT_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO},{3,true,DEFAULT_GID,DEFAULT_GENID,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,OTHER_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO},{3,true,DEFAULT_GID,DEFAULT_GENID,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,OTHER_GENID,REPLY_OK_RS_SCENARIO,DEFAULT_GID,DEFAULT_GENID,REPLY_OK_RS_SCENARIO}};}  }
class C{  private synchronized void eval() throws MetadataEvaluationException {  if (cacheStrategy == CacheStrategy.NEVER_CACHE || internalValue.get() == null) {    try {      Object value=lazyValue.call();      if (value == null) {        value=ACTUALLY_NULL;      }      internalValue=new SoftReference<Object>(value);    } catch (    Exception e) {      throw new MetadataEvaluationException(e);    }  }}  }
class C{  public void testLoginException03(){  String msg=null;  LoginException lE=new LoginException(msg);  assertNull("getMessage() must return null.",lE.getMessage());  assertNull("getCause() must return null",lE.getCause());}  }
class C{  public static void registerSASLMechanismHandler(String name,SASLMechanismHandler<?> handler){  directoryServer.saslMechanismHandlers.put(name,handler);}  }
class C{  public static LogoutResponse processLogoutRequest(LogoutRequest logoutReq,String spEntityID,String realm,HttpServletRequest request,HttpServletResponse response,boolean isLBReq,boolean destroySession,String binding,boolean isVerified){  final String method="processLogoutRequest : ";  NameID nameID=null;  Status status=null;  Issuer issuer=null;  String idpEntity=logoutReq.getIssuer().getValue();  String userId=null;  try {    do {      issuer=logoutReq.getIssuer();      String requestId=logoutReq.getID();      SAML2Utils.verifyRequestIssuer(realm,spEntityID,issuer,requestId);      issuer=SAML2Utils.createIssuer(spEntityID);      List siList=logoutReq.getSessionIndex();      int numSI=0;      if (siList != null) {        numSI=siList.size();        if (debug.messageEnabled()) {          debug.message(method + "Number of session indices in the logout request is " + numSI);        }      }      nameID=LogoutUtil.getNameIDFromSLORequest(logoutReq,realm,spEntityID,SAML2Constants.SP_ROLE);      if (nameID == null) {        debug.error(method + "LogoutRequest does not contain Name ID");        status=SAML2Utils.generateStatus(SAML2Constants.RESPONDER,SAML2Utils.bundle.getString("missing_name_identifier"));        break;      }      String infoKeyString=null;      infoKeyString=(new NameIDInfoKey(nameID.getValue(),spEntityID,idpEntity)).toValueString();      if (debug.messageEnabled()) {        debug.message(method + "infokey=" + infoKeyString);      }      if (SPCache.isFedlet) {        if (!isVerified && !LogoutUtil.verifySLORequest(logoutReq,realm,idpEntity,spEntityID,SAML2Constants.SP_ROLE)) {          throw new SAML2Exception(SAML2Utils.bundle.getString("invalidSignInRequest"));        }        FedletAdapter fedletAdapter=SAML2Utils.getFedletAdapterClass(spEntityID,realm);        boolean result=false;        if (fedletAdapter != null) {          result=fedletAdapter.doFedletSLO(request,response,logoutReq,spEntityID,idpEntity,siList,nameID.getValue(),binding);        }        if (result) {          status=SUCCESS_STATUS;        } else {          status=SAML2Utils.generateStatus(SAML2Constants.RESPONDER,SAML2Utils.bundle.getString("appLogoutFailed"));        }        break;      }      List list=(List)SPCache.fedSessionListsByNameIDInfoKey.get(infoKeyString);      if (debug.messageEnabled()) {        debug.message(method + "SPFedsessions=" + list);      }      if ((list == null) || list.isEmpty()) {        String spQ=nameID.getSPNameQualifier();        if ((spQ == null) || (spQ.length() == 0)) {          infoKeyString=(new NameIDInfoKey(nameID.getValue(),spEntityID,nameID.getNameQualifier())).toValueString();          list=(List)SPCache.fedSessionListsByNameIDInfoKey.get(infoKeyString);        }      }      boolean foundPeer=false;      List remoteServiceURLs=null;      if (isLBReq) {        remoteServiceURLs=FSUtils.getRemoteServiceURLs(request);        foundPeer=remoteServiceURLs != null && !remoteServiceURLs.isEmpty();      }      if (debug.messageEnabled()) {        debug.message(method + "isLBReq = " + isLBReq+ ", foundPeer = "+ foundPeer);      }      if (list == null || list.isEmpty()) {        if (foundPeer) {          boolean peerError=false;          for (Iterator iter=remoteServiceURLs.iterator(); iter.hasNext(); ) {            String remoteLogoutURL=getRemoteLogoutURL((String)iter.next(),request);            LogoutResponse logoutRes=LogoutUtil.forwardToRemoteServer(logoutReq,remoteLogoutURL);            if ((logoutRes != null) && !isNameNotFound(logoutRes)) {              if (isSuccess(logoutRes)) {                if (numSI > 0) {                  siList=LogoutUtil.getSessionIndex(logoutRes);                  if (siList == null || siList.isEmpty()) {                    peerError=false;                    break;                  }                }              } else {                peerError=true;              }            }          }          if (peerError || (siList != null && siList.size() > 0)) {            status=PARTIAL_LOGOUT_STATUS;          } else {            status=SUCCESS_STATUS;          }        } else {          debug.error(method + "invalid Name ID received");          status=SAML2Utils.generateStatus(SAML2Constants.RESPONDER,SAML2Utils.bundle.getString("invalid_name_identifier"));        }        break;      } else {        if (!isVerified && !LogoutUtil.verifySLORequest(logoutReq,realm,logoutReq.getIssuer().getValue(),spEntityID,SAML2Constants.SP_ROLE)) {          throw new SAML2Exception(SAML2Utils.bundle.getString("invalidSignInRequest"));        }        try {          String tokenId=((SPFedSession)list.iterator().next()).spTokenID;          Object token=sessionProvider.getSession(tokenId);          userId=sessionProvider.getPrincipalName(token);          if (SAML2Utils.debug.messageEnabled()) {            SAML2Utils.debug.message("SPSingleLogout." + "processLogoutRequest, user = " + userId);          }        } catch (        SessionException ex) {          if (SAML2Utils.debug.messageEnabled()) {            SAML2Utils.debug.message("SPSingleLogout." + "processLogoutRequest",ex);          }        }        userId=preSingleLogoutProcess(spEntityID,realm,request,response,userId,logoutReq,null,binding);      }      BaseConfigType spConfig=SAML2Utils.getSAML2MetaManager().getSPSSOConfig(realm,spEntityID);      List appLogoutURL=(List)SAML2MetaUtils.getAttributes(spConfig).get(SAML2Constants.APP_LOGOUT_URL);      if (debug.messageEnabled()) {        debug.message("IDPLogoutUtil.processLogoutRequest: " + "external app logout URL= " + appLogoutURL);      }      if (numSI == 0) {        List tokenIDsToBeDestroyed=new ArrayList();synchronized (list) {          Iterator iter=list.listIterator();          while (iter.hasNext()) {            SPFedSession fedSession=(SPFedSession)iter.next();            tokenIDsToBeDestroyed.add(fedSession.spTokenID);            iter.remove();            if ((agent != null) && agent.isRunning() && (saml2Svc != null)) {              saml2Svc.setFedSessionCount((long)SPCache.fedSessionListsByNameIDInfoKey.size());            }          }        }        for (Iterator iter=tokenIDsToBeDestroyed.listIterator(); iter.hasNext(); ) {          String tokenID=(String)iter.next();          Object token=null;          try {            token=sessionProvider.getSession(tokenID);          } catch (          SessionException se) {            debug.error(method + "Could not create session from token ID = " + tokenID);            continue;          }          if (debug.messageEnabled()) {            debug.message(method + "destroy token " + tokenID);          }          if ((appLogoutURL != null) && (appLogoutURL.size() != 0)) {            SAML2Utils.postToAppLogout(request,(String)appLogoutURL.get(0),token);          }          if (destroySession) {            sessionProvider.invalidateSession(token,request,response);          }        }        if (foundPeer) {          boolean peerError=false;          for (Iterator iter=remoteServiceURLs.iterator(); iter.hasNext(); ) {            String remoteLogoutURL=getRemoteLogoutURL((String)iter.next(),request);            LogoutResponse logoutRes=LogoutUtil.forwardToRemoteServer(logoutReq,remoteLogoutURL);            if ((logoutRes == null) || !(isSuccess(logoutRes) || isNameNotFound(logoutRes))) {              peerError=true;            }          }          if (peerError) {            status=PARTIAL_LOGOUT_STATUS;          } else {            status=SUCCESS_STATUS;          }        }      } else {        String sessionIndex=null;        List siNotFound=new ArrayList();        for (int i=0; i < numSI; i++) {          sessionIndex=(String)siList.get(i);          String tokenIDToBeDestroyed=null;synchronized (list) {            Iterator iter=list.listIterator();            while (iter.hasNext()) {              SPFedSession fedSession=(SPFedSession)iter.next();              if (sessionIndex.equals(fedSession.idpSessionIndex)) {                if (debug.messageEnabled()) {                  debug.message(method + " found si + " + sessionIndex);                }                tokenIDToBeDestroyed=fedSession.spTokenID;                iter.remove();                if ((agent != null) && agent.isRunning() && (saml2Svc != null)) {                  saml2Svc.setFedSessionCount((long)SPCache.fedSessionListsByNameIDInfoKey.size());                }                break;              }            }          }          if (tokenIDToBeDestroyed != null) {            try {              Object token=sessionProvider.getSession(tokenIDToBeDestroyed);              if (debug.messageEnabled()) {                debug.message(method + "destroy token (2) " + tokenIDToBeDestroyed);              }              if ((appLogoutURL != null) && (appLogoutURL.size() != 0)) {                SAML2Utils.postToAppLogout(request,(String)appLogoutURL.get(0),token);              }              if (destroySession) {                sessionProvider.invalidateSession(token,request,response);              }            } catch (            SessionException se) {              debug.error(method + "Could not create " + "session from token ID = "+ tokenIDToBeDestroyed);            }          } else {            siNotFound.add(sessionIndex);          }        }        if (isLBReq) {          if (foundPeer && !siNotFound.isEmpty()) {            boolean peerError=false;            LogoutRequest lReq=copyAndMakeMutable(logoutReq);            for (Iterator iter=remoteServiceURLs.iterator(); iter.hasNext(); ) {              lReq.setSessionIndex(siNotFound);              String remoteLogoutURL=getRemoteLogoutURL((String)iter.next(),request);              LogoutResponse logoutRes=LogoutUtil.forwardToRemoteServer(lReq,remoteLogoutURL);              if ((logoutRes != null) && !isNameNotFound(logoutRes)) {                if (isSuccess(logoutRes)) {                  siNotFound=LogoutUtil.getSessionIndex(logoutRes);                } else {                  peerError=true;                }              }              if (debug.messageEnabled()) {                debug.message(method + "siNotFound = " + siNotFound);              }              if (siNotFound == null || siNotFound.isEmpty()) {                peerError=false;                break;              }            }            if (peerError || (siNotFound != null && !siNotFound.isEmpty())) {              status=PARTIAL_LOGOUT_STATUS;            } else {              status=SUCCESS_STATUS;            }          } else {            status=SUCCESS_STATUS;          }        } else {          if (siNotFound.isEmpty()) {            status=SUCCESS_STATUS;          } else {            status=SAML2Utils.generateStatus(SAML2Constants.SUCCESS,SAML2Utils.bundle.getString("requestSuccess"));            LogoutUtil.setSessionIndex(status,siNotFound);          }        }      }    } while (false);  } catch (  SessionException se) {    debug.error("processLogoutRequest: ",se);    status=SAML2Utils.generateStatus(SAML2Constants.RESPONDER,se.toString());  }catch (  SAML2Exception e) {    debug.error("processLogoutRequest: " + "failed to create response",e);    status=SAML2Utils.generateStatus(SAML2Constants.RESPONDER,e.toString());  }  if (spEntityID == null) {    spEntityID=nameID.getSPNameQualifier();  }  LogoutResponse logResponse=LogoutUtil.generateResponse(status,logoutReq.getID(),issuer,realm,SAML2Constants.SP_ROLE,idpEntity);  if (isSuccess(logResponse)) {    postSingleLogoutSuccess(spEntityID,realm,request,response,userId,logoutReq,logResponse,binding);  }  return logResponse;}  }
class C{  public void testCase14(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3,4,5,6,7};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=-1;  int bSign=1;  byte rBytes[]={-2,-3,-4,-5,-16,-27,-38,-42,-53,-64,-75,-16,-27,-37};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(-1,result.signum());}  }
class C{  public String toExternalForm(){  if (streamHandler == null) {    return "unknown protocol(" + protocol + ")://"+ host+ file;  }  return streamHandler.toExternalForm(this);}  }
class C{  private void checkTime(JTextField time,JLabel lTime,int[] h,int[] m,Collection<LocalizableMessage> errorMessages){  String sTime=time.getText().trim();  int index=sTime.indexOf(':');  try {    h[0]=Integer.parseInt(sTime.substring(0,index).trim());    m[0]=Integer.parseInt(sTime.substring(index + 1).trim());    if (h[0] < 0 || h[0] > 23) {      errorMessages.add(ERR_CTRL_PANEL_INVALID_HOUR.get());      setPrimaryInvalid(lTime);    }    if (m[0] < 0 || m[0] > 59) {      errorMessages.add(ERR_CTRL_PANEL_INVALID_MINUTE.get());      setPrimaryInvalid(lTime);    }  } catch (  Exception ex) {    errorMessages.add(ERR_CTRL_PANEL_INVALID_TIME.get());    setPrimaryInvalid(lTime);  }}  }
class C{  public void deleteConfiguration(String realm,String configName,Set attributes) throws ConfigurationException {  if (debug.messageEnabled()) {    debug.message("FedletConfigurationImpl.deleteConfiguration: " + "componentName = " + componentName + ", realm = "+ realm+ ", configName = "+ configName+ ", attributes = "+ attributes);  }  String[] data={componentName,realm};  throw new ConfigurationException(RESOURCE_BUNDLE,"failedDeleteConfig",data);}  }
class C{  public ID3v22Frame(ByteBuffer byteBuffer) throws InvalidFrameException, InvalidDataTypeException {  this(byteBuffer,"");}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  backToProfileViewBean();}  }
class C{  public boolean isUserValid(String userId,OAuth2Request request){  try {    identityManager.getResourceOwnerIdentity(userId,request.<String>getParameter(REALM));  } catch (  Exception e) {    return false;  }  return true;}  }
class C{  private void updateInternalMask() throws ParseException {  String mask=getMask();  ArrayList<MaskCharacter> fixed=new ArrayList<MaskCharacter>();  ArrayList<MaskCharacter> temp=fixed;  if (mask != null) {    for (int counter=0, maxCounter=mask.length(); counter < maxCounter; counter++) {      char maskChar=mask.charAt(counter);switch (maskChar) {case DIGIT_KEY:        temp.add(new DigitMaskCharacter());      break;case LITERAL_KEY:    if (++counter < maxCounter) {      maskChar=mask.charAt(counter);      temp.add(new LiteralCharacter(maskChar));    }  break;case UPPERCASE_KEY:temp.add(new UpperCaseCharacter());break;case LOWERCASE_KEY:temp.add(new LowerCaseCharacter());break;case ALPHA_NUMERIC_KEY:temp.add(new AlphaNumericCharacter());break;case CHARACTER_KEY:temp.add(new CharCharacter());break;case ANYTHING_KEY:temp.add(new MaskCharacter());break;case HEX_KEY:temp.add(new HexCharacter());break;default :temp.add(new LiteralCharacter(maskChar));break;}}}if (fixed.size() == 0) {maskChars=EmptyMaskChars;} else {maskChars=new MaskCharacter[fixed.size()];fixed.toArray(maskChars);}}  }
class C{  public BaseQuickAdapter(Context context,List<T> data){  this(context,data,1);}  }
class C{  public boolean hasWrongStatus(){  return hasWrongStatus;}  }
class C{  public void test_Constructor_java_math_BigInteger_int(){  BigInteger value=new BigInteger("12345908");  BigDecimal big=new BigDecimal(value);  assertTrue("the BigDecimal value is not initialized properly",big.unscaledValue().equals(value) && big.scale() == 0);  BigInteger value2=new BigInteger("12334560000");  BigDecimal big2=new BigDecimal(value2,5);  assertTrue("the BigDecimal value is not initialized properly",big2.unscaledValue().equals(value2) && big2.scale() == 5);  assertTrue("the BigDecimal value is not represented properly",big2.toString().equals("123345.60000"));}  }
class C{  public static void removeSubConfigAttributeDefaultValues(String serviceName,Set sunServiceID,String realm,String subConfigName,String attributeName,Set defaultValues){  String classMethod="UpgradeUtils:removeSubConfigAttributeDefaultValues : ";  try {    ServiceConfigManager scm=getServiceConfigManager(serviceName);    ServiceConfig sc=scm.getOrganizationConfig(realm,null);    ServiceConfig subConfig=sc.getSubConfig(subConfigName);    String serviceID=getSunServiceID(subConfig);    if (debug.messageEnabled()) {      debug.message(classMethod + "sunServiceID :" + sunServiceID);      debug.message(classMethod + "serviceID :" + serviceID);      debug.message(classMethod + "subConfigName :" + subConfigName);      debug.message(classMethod + "Attribute Name :" + attributeName);      debug.message(classMethod + "Default Values :" + defaultValues);    }    if (sunServiceID.contains(serviceID)) {      Set valSet=getExistingValues(subConfig,attributeName,defaultValues);      if (debug.messageEnabled()) {        debug.message(classMethod + "Values to be removed" + valSet);      }      subConfig.removeAttributeValues(attributeName,valSet);    }  } catch (  SSOException ssoe) {    debug.error(classMethod + "Invalid SSOToken  : ",ssoe);  }catch (  SMSException sme) {    debug.error(classMethod + "Error remove default values : ",sme);  }}  }
class C{  private void reconstitutionPut(Entry<?,?>[] tab,K key,V value) throws StreamCorruptedException {  if (value == null) {    throw new java.io.StreamCorruptedException();  }  int hash=key.hashCode();  int index=(hash & 0x7FFFFFFF) % tab.length;  for (Entry<?,?> e=tab[index]; e != null; e=e.next) {    if ((e.hash == hash) && e.key.equals(key)) {      throw new java.io.StreamCorruptedException();    }  }  @SuppressWarnings("unchecked") Entry<K,V> e=(Entry<K,V>)tab[index];  tab[index]=new Entry<>(hash,key,value,e);  count++;}  }
class C{  private static int processString(char[] source,int sourceOffset,int sourceCount,char[] target,int targetOffset,int targetCount,int fromIndex){  if (fromIndex >= sourceCount) {    return (targetCount == 0 ? sourceCount : -1);  }  if (fromIndex < 0) {    fromIndex=0;  }  if (targetCount == 0) {    return fromIndex;  }  char first=target[targetOffset];  int i=sourceOffset + fromIndex;  int max=sourceOffset + (sourceCount - targetCount);  startSearchForFirstChar:   while (true) {    while (i <= max && source[i] != first) {      i++;    }    if (i > max) {      return -1;    }    int j=i + 1;    int end=j + targetCount - 1;    int k=targetOffset + 1;    while (j < end) {      if (source[j++] != target[k++]) {        i++;        continue startSearchForFirstChar;      }    }    return i - sourceOffset;  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodelistindexgetlengthofemptylist.class,args);}  }
class C{  public ContentTypeHeader createContentTypeHeader(String contentType,String contentSubType) throws ParseException {  if (contentType == null || contentSubType == null)   throw new NullPointerException("null contentType or subType");  ContentType c=new ContentType();  c.setContentType(contentType);  c.setContentSubType(contentSubType);  return c;}  }
class C{  public void insert_double(double value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_double",_opsClass);  DynStructOperations $self=(DynStructOperations)$so.servant;  try {    $self.insert_double(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void testFloatValuePosInfinity(){  String a="123809648373567356745735.6356789787678287E+200";  BigDecimal aNumber=new BigDecimal(a);  float result=Float.POSITIVE_INFINITY;  assertTrue("incorrect value",aNumber.floatValue() == result);}  }
class C{  public void write(byte[] b) throws IOException {  out.write(b);  written+=b.length;}  }
class C{  private boolean useCompression(){  MessageBytes acceptEncodingMB=request.getMimeHeaders().getValue("accept-encoding");  if ((acceptEncodingMB == null) || (acceptEncodingMB.indexOf("gzip") == -1)) {    return false;  }  if (compressionLevel == 2) {    return true;  }  if (noCompressionUserAgents != null) {    MessageBytes userAgentValueMB=request.getMimeHeaders().getValue("user-agent");    if (userAgentValueMB != null) {      String userAgentValue=userAgentValueMB.toString();      if (noCompressionUserAgents.matcher(userAgentValue).matches()) {        return false;      }    }  }  return true;}  }
class C{  void warn(String msg,Object[] args) throws TransformerException {  String fmsg=XSLMessages.createXPATHWarning(msg,args);  ErrorListener ehandler=this.getErrorListener();  if (null != ehandler) {    ehandler.warning(new TransformerException(fmsg,m_sourceLocator));  } else {    System.err.println(fmsg);  }}  }
class C{  private void afterTest(String testCase) throws Exception {  if (replDomain != null) {    for (int i=0; i < 10; i++) {      if (!replDomain.ieRunning()) {        break;      }      sleep(500);    }    assertFalse(replDomain.ieRunning(),"ReplicationDomain: Import/Export is not expected to be running");  }  super.cleanConfigEntries();  replDomain=null;  stop(server2,server3);  sleep(100);  server2=server3=null;  entriesToCleanup.removeAll(Arrays.asList(baseDN,DN.valueOf("ou=people," + EXAMPLE_DN)));  super.cleanRealEntries();  remove(replServer1,replServer2,replServer3);  replServer1=replServer2=replServer3=null;  Arrays.fill(replServerPort,0);  log("Successfully cleaned " + testCase);}  }
class C{  public byte[] toByteArray(){  return builder.toByteArray();}  }
class C{  SynchronizedPooledObjectFactory(final PooledObjectFactory<T> factory) throws IllegalArgumentException {  if (factory == null) {    throw new IllegalArgumentException("factory must not be null.");  }  this.factory=factory;}  }
class C{  protected OperationContext(CSN csn,String entryUUID){  this.csn=csn;  this.entryUUID=entryUUID;}  }
class C{  public HttpBasicAuthenticationFilter(AuthenticationStrategy authenticationStrategy,Function<Headers,Pair<String,String>,NeverThrowsException> credentialsExtractor){  this.authenticationStrategy=checkNotNull(authenticationStrategy,"authenticationStrategy cannot be null");  this.credentialsExtractor=checkNotNull(credentialsExtractor,"credentialsExtractor cannot be null");}  }
class C{  public static EntryEncodeConfig decode(ByteSequenceReader buffer,int length,CompressedSchema compressedSchema) throws DirectoryException {  if (length != 1) {    LocalizableMessage message=ERR_ENTRYENCODECFG_INVALID_LENGTH.get();    throw new DirectoryException(DirectoryServer.getServerErrorResultCode(),message);  }  byte b=buffer.readByte();  boolean excludeDN=is(b,ENCODE_FLAG_EXCLUDE_DN);  boolean compressAttrDescriptions=is(b,ENCODE_FLAG_COMPRESS_ADS);  boolean compressObjectClassSets=is(b,ENCODE_FLAG_COMPRESS_OCS);  return new EntryEncodeConfig(excludeDN,compressAttrDescriptions,compressObjectClassSets,compressedSchema);}  }
class C{  private void assertObjectIsAMap(JsonValue value){  if (Map.class.isAssignableFrom(value.getObject().getClass())) {    return;  }  throw new IllegalArgumentException("Only Map instances are permitted in the OAuth token.");}  }
class C{  public Action(Element element) throws SAMLException {  if (element == null) {    SAMLUtilsCommon.debug.message("Action: Input is null.");    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  String tag=null;  tag=element.getLocalName();  if ((tag == null) || (!tag.equals("Action"))) {    SAMLUtilsCommon.debug.message("Action: wrong input");    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("wrongInput"));  }  NamedNodeMap atts=((Node)element).getAttributes();  int attrCount=atts.getLength();  int i=0;  for (i=0; i < attrCount; i++) {    Node att=atts.item(i);    if (att.getNodeType() == Node.ATTRIBUTE_NODE) {      String attName=att.getLocalName();      if (attName == null || attName.length() == 0) {        if (SAMLUtilsCommon.debug.messageEnabled()) {          SAMLUtilsCommon.debug.message("Action: Attribute Name" + "is either null or empty.");        }        throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("nullInput"));      }      if (attName.equals("Namespace")) {        _namespace=((Attr)att).getValue().trim();      }      if ((_namespace == null) || (_namespace.length() == 0)) {        _namespace=SAMLConstants.ACTION_NAMESPACE_NEGATION;      }    }  }  NodeList nodes=element.getChildNodes();  int nodeCount=nodes.getLength();  if (nodeCount > 0) {    for (i=0; i < nodeCount; i++) {      Node currentNode=nodes.item(i);      if (currentNode.getNodeType() == Node.ELEMENT_NODE) {        if (SAMLUtilsCommon.debug.messageEnabled()) {          SAMLUtilsCommon.debug.message("Action: Wrong input");        }        throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("wrongInput"));      }    }  }  _action=XMLUtils.getElementValue(element);  if (_action == null) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("Action is null.");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("missingElementValue"));  }  if (!isValid(_action,_namespace)) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("Action is invalid");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("invalidAction"));  }}  }
class C{  public FSAuthnRequestEnvelope(Element root) throws FSMsgException {  if (root == null) {    SAMLUtils.debug.message("FSAuthnRequestEnvelope.parseXML: null input.");    throw new FSMsgException("nullInput",null);  }  String tag=null;  if (((tag=root.getLocalName()) == null) || (!tag.equals(IFSConstants.AUTHN_REQUEST_ENVELOPE))) {    FSUtils.debug.message("FSAuthnRequestEnvelope.parseXML: wrong input.");    throw new FSMsgException("wrongInput",null);  }  String ns=root.getNamespaceURI();  if (ns == null) {    FSUtils.debug.error("FSAuthnRequestEnvelope(Element):" + " No namespace");    throw new FSMsgException("wrongInput",null);  }  if (ns.equals(IFSConstants.FF_12_XML_NS)) {    minorVersion=IFSConstants.FF_12_PROTOCOL_MINOR_VERSION;  }  NodeList nl=root.getChildNodes();  Node child;  String childName;  int length=nl.getLength();  for (int i=0; i < length; i++) {    child=nl.item(i);    if ((childName=child.getLocalName()) != null) {      if (childName.equals(IFSConstants.ASSERTION_CONSUMER_SERVICE_URL)) {        assertionConsumerServiceURL=XMLUtils.getElementValue((Element)child);      } else       if (childName.equals(IFSConstants.IDP_LIST)) {        idpList=new FSIDPList((Element)child);      } else       if (childName.equals(IFSConstants.AUTHN_REQUEST)) {        authnRequest=new FSAuthnRequest((Element)child);      } else       if (childName.equals(IFSConstants.PROVIDER_ID)) {        providerID=XMLUtils.getElementValue((Element)child);      } else       if (childName.equals(IFSConstants.PROVIDER_NAME)) {        providerName=XMLUtils.getElementValue((Element)child);      } else       if (childName.equals(IFSConstants.IS_PASSIVE)) {        String strIsPassive=XMLUtils.getElementValue((Element)child);        boolean isPassive=false;        if (strIsPassive != null && strIsPassive.equals(IFSConstants.TRUE)) {          isPassive=true;        }      }    }  }}  }
class C{  public void addNotify(){  super.addNotify();  KeyboardManager.getCurrentManager().registerMenuBar(this);}  }
class C{  protected void paintBorder(Graphics g){  if (isBorderPainted()) {    super.paintBorder(g);  }}  }
class C{  @Override public String chooseServerAlias(final String keyType,final Principal[] issuers,final Socket socket){  if (keyManager != null) {    return keyManager.chooseServerAlias(keyType,issuers,socket);  }  return null;}  }
class C{  public OpenDataException(){  super();}  }
class C{  public void insertNodeInto(MutableTreeNode newChild,MutableTreeNode parent,int index){  parent.insert(newChild,index);  int[] newIndexs=new int[1];  newIndexs[0]=index;  nodesWereInserted(parent,newIndexs);}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  boolean isRegisteredFont(String fontname){  return fontNames.containsKey(fontname.toLowerCase());}  }
class C{  public static String encodeHighLevel(String msg){  return encodeHighLevel(msg,SymbolShapeHint.FORCE_NONE,null,null);}  }
class C{  public TreePath removeAllUnderRoot(){  stopRefresh();  removeAllChildNodes(rootNode,false);  return new TreePath(treeModel.getPathToRoot(rootNode));}  }
class C{  public static boolean isArrayByteBase64(byte[] arrayOctect){  arrayOctect=discardWhitespace(arrayOctect);  int length=arrayOctect.length;  if (length == 0) {    return true;  }  for (int i=0; i < length; i++) {    if (!isBase64(arrayOctect[i])) {      return false;    }  }  return true;}  }
class C{  public void startPrefixMapping(String prefix,String uri) throws SAXException {}  }
class C{  private boolean footerOccupiesWholeView(){  if (getItemCount() == 0)   return false;  final int firstX=mRecyclerView.getPaddingLeft();  final int firstY=mRecyclerView.getPaddingTop();  final int lastX=mRecyclerView.getWidth() - 1 - mRecyclerView.getPaddingRight();  final int lastY=mRecyclerView.getHeight() - 1 - mRecyclerView.getPaddingBottom();  if (!mLayoutManager.getReverseLayout()) {    if (directionVertical()) {      return (mRecyclerView.findChildViewUnder(firstX,firstY) == mFooterView) || (mRecyclerView.findChildViewUnder(lastX,firstY) == mFooterView);    } else {      return (mRecyclerView.findChildViewUnder(firstX,firstY) == mFooterView) || (mRecyclerView.findChildViewUnder(firstX,lastY) == mFooterView);    }  }  if (directionVertical()) {    return (mRecyclerView.findChildViewUnder(firstX,lastY) == mFooterView) || (mRecyclerView.findChildViewUnder(lastX,lastY) == mFooterView);  } else {    return (mRecyclerView.findChildViewUnder(firstX,lastY) == mFooterView) || (mRecyclerView.findChildViewUnder(lastX,firstY) == mFooterView);  }}  }
class C{  public ASN1Primitive toASN1Primitive(){  ASN1EncodableVector v=new ASN1EncodableVector();  if (keyidentifier != null) {    v.add(new DERTaggedObject(false,0,keyidentifier));  }  if (certissuer != null) {    v.add(new DERTaggedObject(false,1,certissuer));  }  if (certserno != null) {    v.add(new DERTaggedObject(false,2,certserno));  }  return new DERSequence(v);}  }
class C{  public void paintCheckBoxBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  private synchronized void replaceScheduler(){  scheduler.terminate();  scheduler=new Scheduler(this);  scheduler.start();}  }
class C{  public void endPaint(){}  }
class C{  public void recompose(StylesheetRoot root){  root.recomposeWhiteSpaceInfo(this);}  }
class C{  public static boolean isValid(int c){  return (c < 0x10000 && (CHARS[c] & MASK_VALID) != 0) || (0x10000 <= c && c <= 0x10FFFF);}  }
class C{  @Override public String toString(){  return "ReplServerInfo Url:" + getServerURL() + " ServerId:"+ getServerId()+ " GroupId:"+ getGroupId()+ " connectedDSs:"+ connectedDSs;}  }
class C{  PlainSocketImpl(FileDescriptor fd){  if (useDualStackImpl) {    impl=new DualStackPlainSocketImpl(fd,exclusiveBind);  } else {    impl=new TwoStacksPlainSocketImpl(fd,exclusiveBind);  }}  }
class C{  public RenderContext(AffineTransform usr2dev){  this(usr2dev,null,null);}  }
class C{  public org.omg.CORBA.Any to_any(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("to_any",_opsClass);  DynFixedOperations $self=(DynFixedOperations)$so.servant;  try {    return $self.to_any();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  private SingleValuedPropertyEditor(ManagedObject<?> mo,PropertyDefinition<?> pd){  Reject.ifFalse(!pd.hasOption(PropertyOption.MULTI_VALUED));  this.mo=mo;  this.pd=pd;}  }
class C{  public NamingContext(Hashtable<String,Object> env,String name,HashMap<String,NamingEntry> bindings){  this.env=new Hashtable<>();  this.name=name;  if (env != null) {    Enumeration<String> envEntries=env.keys();    while (envEntries.hasMoreElements()) {      String entryName=envEntries.nextElement();      addToEnvironment(entryName,env.get(entryName));    }  }  this.bindings=bindings;}  }
class C{  public JAXBResult(JAXBContext context) throws JAXBException {  this((context == null) ? assertionFailed() : context.createUnmarshaller());}  }
class C{  public BootstrapFailure(Throwable cause){  super(cause);}  }
class C{  public PluginResult.PostResponse invokePostResponseComparePlugins(PostResponseCompareOperation compareOperation){  PluginResult.PostResponse result=null;  for (  DirectoryServerPlugin p : postResponseComparePlugins) {    if (isInternalOperation(compareOperation,p)) {      continue;    }    try {      result=p.doPostResponse(compareOperation);    } catch (    Exception e) {      logException(compareOperation,p,e,ERR_PLUGIN_POST_RESPONSE_PLUGIN_EXCEPTION);    }    if (result == null) {      logNullResult(compareOperation,p,ERR_PLUGIN_POST_RESPONSE_PLUGIN_RETURNED_NULL);    } else     if (!result.continuePluginProcessing()) {      return result;    }  }  if (result == null) {    result=PluginResult.PostResponse.continueOperationProcessing();  }  return result;}  }
class C{  public void mouseReleased(MouseEvent e){  getHandler().mouseReleased(e);}  }
class C{  public void onFedletSLOSuccess(HttpServletRequest request,HttpServletResponse response,LogoutRequest logoutReq,LogoutResponse logoutRes,String hostedEntityID,String idpEntityID,String binding) throws SAML2Exception {  onFedletSLOSuccessOrFailure(request,response,logoutReq,logoutRes,hostedEntityID,idpEntityID,binding,true);  return;}  }
class C{  public Observable<List<GithubUser>> loadUserFollowingList(String userName){  return mHttpHelper.getService(GithubApi.class).loadUserFollowingList(userName).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread());}  }
class C{  public void store() throws IdRepoException, SSOException {  IdServices idServices=IdServicesFactory.getDataStoreServices();  if (modMap != null && !modMap.isEmpty()) {    idServices.setAttributes(token,type,name,modMap,false,orgName,univDN,true);    modMap.clear();  }  if (binaryModMap != null && !binaryModMap.isEmpty()) {    idServices.setAttributes(token,type,name,binaryModMap,false,orgName,univDN,false);    binaryModMap.clear();  }}  }
class C{  @Override public Promise<ResourceResponse,ResourceException> handleUpdate(Context context,UpdateRequest request){  return auditService.handleUpdate(context,request);}  }
class C{  public final void testGetG(){  DSAParameterSpec dps=new DSAParameterSpec(new BigInteger("1"),new BigInteger("2"),new BigInteger("3"));  assertEquals(3,dps.getG().intValue());}  }
class C{  public boolean isSelected(){  return selectionModel.isSelected();}  }
class C{  public static ClientType fromString(String type){  if (type != null) {    for (    ClientType clientType : ClientType.values()) {      if (type.equalsIgnoreCase(clientType.type)) {        return clientType;      }    }  }  return null;}  }
class C{  public void testSealedObject1() throws Exception {  String secret="secret string";  try {    new SealedObject(secret,null);    fail("NullPointerException should be thrown in the case " + "of null cipher.");  } catch (  NullPointerException e) {  }  KeyGenerator kg=KeyGenerator.getInstance("DES");  Key key=kg.generateKey();  IvParameterSpec ips=new IvParameterSpec(new byte[]{1,2,3,4,5,6,7,8});  Cipher cipher=Cipher.getInstance("DES/CBC/PKCS5Padding");  cipher.init(Cipher.ENCRYPT_MODE,key,ips);  SealedObject so=new SealedObject(secret,cipher);  cipher=Cipher.getInstance("DES/CBC/NoPadding");  cipher.init(Cipher.ENCRYPT_MODE,key,ips);  try {    new SealedObject(secret,cipher);    fail("IllegalBlockSizeException expected");  } catch (  IllegalBlockSizeException e) {  }}  }
class C{  private int[] readLengthAndOffset(int objInfo,int offset){  int lengthValue=objInfo;  int offsetValue=1;  if (objInfo == 0xF) {    int int_type=bytes[offset + 1];    int intType=(int_type & 0xF0) >> 4;    if (intType != 0x1) {      System.err.println("BinaryPropertyListParser: Length integer has an unexpected type" + intType + ". Attempting to parse anyway...");    }    int intInfo=int_type & 0x0F;    int intLength=(int)Math.pow(2,intInfo);    offsetValue=2 + intLength;    if (intLength < 3) {      lengthValue=(int)parseUnsignedInt(bytes,offset + 2,offset + 2 + intLength);    } else {      lengthValue=new BigInteger(copyOfRange(bytes,offset + 2,offset + 2 + intLength)).intValue();    }  }  return new int[]{lengthValue,offsetValue};}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.protocol.AuthorizationDecisionQueryType createAuthorizationDecisionQueryType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.protocol.impl.AuthorizationDecisionQueryTypeImpl();}  }
class C{  public int length(){  return isLeap() ? 366 : 365;}  }
class C{  @Override public void connect() throws IOException {  List<Proxy> proxyList=null;  if (proxy != null) {    proxyList=new ArrayList<Proxy>(1);    proxyList.add(proxy);  } else {    ProxySelector selector=ProxySelector.getDefault();    if (selector != null) {      proxyList=selector.select(uri);    }  }  if (proxyList == null) {    currentProxy=null;    connectInternal();  } else {    ProxySelector selector=ProxySelector.getDefault();    Iterator<Proxy> iter=proxyList.iterator();    boolean connectOK=false;    String failureReason="";    while (iter.hasNext() && !connectOK) {      currentProxy=iter.next();      try {        connectInternal();        connectOK=true;      } catch (      IOException ioe) {        failureReason=ioe.getLocalizedMessage();        if (selector != null && Proxy.NO_PROXY != currentProxy) {          selector.connectFailed(uri,currentProxy.address(),ioe);        }      }    }    if (!connectOK) {      throw new IOException("Unable to connect to server: " + failureReason);    }  }}  }
class C{  private static Remote exportObject(Remote obj,UnicastServerRef sref) throws RemoteException {  if (obj instanceof UnicastRemoteObject) {    ((UnicastRemoteObject)obj).ref=sref;  }  return sref.exportObject(obj,null,false);}  }
class C{  public void detach(){  valid=false;}  }
class C{  public static Foo fetchByPrimaryKey(long fooId){  return getPersistence().fetchByPrimaryKey(fooId);}  }
class C{  public static BuildInformation fromBuildString(String bn) throws IllegalArgumentException {  Pattern p=Pattern.compile("((\\d+)\\.(\\d+)\\.(\\d+)\\.(-?.+))");  Matcher m=p.matcher(bn);  if (!m.matches()) {    throw new IllegalArgumentException("'" + bn + "' is not a build string");  }  BuildInformation bi=new BuildInformation();  try {    bi.values.put(MAJOR_VERSION,m.group(2));    bi.values.put(MINOR_VERSION,m.group(3));    bi.values.put(POINT_VERSION,m.group(4));    bi.values.put(REVISION,m.group(5));  } catch (  Exception e) {    throw new IllegalArgumentException("Error parsing build number " + bn);  }  return bi;}  }
class C{  public void testCompareToZeroZero(){  BigInteger aNumber=BigInteger.ZERO;  BigInteger bNumber=BigInteger.ZERO;  assertEquals(0,aNumber.compareTo(bNumber));}  }
class C{  public final static short tertiaryOrder(int order){  return ((short)(order&=RBCollationTables.TERTIARYORDERMASK));}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.ReferenceElement createReferenceElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.ReferenceElementImpl();}  }
class C{  public SIPHeader parse() throws ParseException {  ServiceRouteList serviceRouteList=new ServiceRouteList();  if (debug)   dbg_enter("ServiceRouteParser.parse");  try {    this.lexer.match(TokenTypes.SERVICE_ROUTE);    this.lexer.SPorHT();    this.lexer.match(':');    this.lexer.SPorHT();    while (true) {      ServiceRoute serviceRoute=new ServiceRoute();      super.parse(serviceRoute);      serviceRouteList.add(serviceRoute);      this.lexer.SPorHT();      if (lexer.lookAhead(0) == ',') {        this.lexer.match(',');        this.lexer.SPorHT();      } else       if (lexer.lookAhead(0) == '\n')       break; else       throw createParseException("unexpected char");    }    return serviceRouteList;  }  finally {    if (debug)     dbg_leave("ServiceRouteParser.parse");  }}  }
class C{  @DELETE @Path("{token.id}") public void deleteToken(@Context HttpHeaders headers,@Context HttpServletRequest request,@PathParam("token.id") String tokenId){  try {    CoreTokenStoreFactory.getInstance().deleteToken(CoreTokenUtils.getAdminSubject(),tokenId);    TokenLogUtils.access(Level.INFO,TokenLogUtils.TOKEN_DELETE_SUCCESS,null,null,tokenId);  } catch (  CoreTokenException ex) {    CoreTokenUtils.debug.error("CoreTokenResource.deleteToken",ex);    String[] data=new String[]{ex.getLocalizedMessage()};    TokenLogUtils.error(Level.INFO,TokenLogUtils.UNABLE_TO_DELETE_TOKEN,data,null,tokenId);    throw getWebApplicationException(headers,ex);  }}  }
class C{  public SMSubConfigComparator(Collator collator){  this.collator=collator;}  }
class C{  public boolean smoothen_end_corners_fork(boolean p_own_net_only,int p_pullt_min_move,ThreadStoppable p_stoppable_thread){  NetNosList opt_net_no_arr=p_own_net_only ? net_nos : NetNosList.EMPTY;  AlgoPullTight pull_tight_algo=AlgoPullTight.get_instance(r_board,opt_net_no_arr,p_pullt_min_move,p_stoppable_thread,null);  return pull_tight_algo.smoothen_end_corners_at_trace(this);}  }
class C{  public JKTagAttributeWrapper(final TagAttribute tagAttribute){  this.tagAttribute=tagAttribute;  this.qName=tagAttribute.getQName();  this.value=tagAttribute.getValue();  this.localName=tagAttribute.getLocalName();  this.namespace=tagAttribute.getNamespace();  this.location=tagAttribute.getLocation();}  }
class C{  public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){  JComponent comp=(c instanceof JComponent) ? (JComponent)c : null;  if (g instanceof Graphics2D) {    Graphics2D g2=(Graphics2D)g;    g2.translate(x,y);    paint(g2,comp,width,height);    g2.translate(-x,-y);  } else {    BufferedImage img=new BufferedImage(IMG_SIZE,IMG_SIZE,BufferedImage.TYPE_INT_ARGB);    Graphics2D g2=(Graphics2D)img.getGraphics();    paint(g2,comp,width,height);    g2.dispose();    ImageScalingHelper.paint(g,x,y,width,height,img,INSETS,INSETS,ImageScalingHelper.PaintType.PAINT9_STRETCH,ImageScalingHelper.PAINT_ALL);  }}  }
class C{  public void copyContent(TagField field){  throw new UnsupportedOperationException();}  }
class C{  void encodeHeader_V1(byte msgType,ByteArrayBuilder builder){  builder.appendByte(msgType);  builder.appendByte(ProtocolVersion.REPLICATION_PROTOCOL_V1_REAL);  builder.appendByte(0);  builder.appendLongUTF8(generationId);}  }
class C{  @Override public boolean onCreateOptionsMenu(Menu menu){  Log.d(TAG,"start FmRadioActivity.onCreateOptionsMenu");  MenuInflater inflater=getMenuInflater();  inflater.inflate(R.menu.fm_action_bar,menu);  mMenuItemChannelList=menu.findItem(R.id.fm_channel_list);  mMenuItemOverflow=menu.findItem(R.id.fm_menu);  mMenuItemPower=menu.findItem(R.id.fm_power);  Log.d(TAG,"end FmRadioActivity.onCreateOptionsMenu");  return true;}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  if (transformer.isRecursiveAttrSet(this)) {    throw new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_XSLATTRSET_USED_ITSELF,new Object[]{m_qname.getLocalPart()}));  }  transformer.pushElemAttributeSet(this);  super.execute(transformer);  ElemAttribute attr=(ElemAttribute)getFirstChildElem();  while (null != attr) {    attr.execute(transformer);    attr=(ElemAttribute)attr.getNextSiblingElem();  }  transformer.popElemAttributeSet();}  }
class C{  public static void main(String[] args){  int retCode=mainSearch(args,true,false,System.out,System.err);  if (retCode != 0) {    System.exit(filterExitCode(retCode));  }}  }
class C{  public SQLWarning(Throwable cause){  super(cause);}  }
class C{  public Binding(String name,String className,Object obj,boolean isRelative){  super(name,className,isRelative);  this.boundObj=obj;}  }
class C{  public InputSource(InputStream byteStream){  setByteStream(byteStream);}  }
class C{  public boolean isCachedFile(){  return true;}  }
class C{  public void passivate(){  fireSessionEvent(Session.SESSION_PASSIVATED_EVENT,null);  HttpSessionEvent event=null;  String keys[]=keys();  for (int i=0; i < keys.length; i++) {    Object attribute=attributes.get(keys[i]);    if (attribute instanceof HttpSessionActivationListener) {      if (event == null)       event=new HttpSessionEvent(getSession());      try {        ((HttpSessionActivationListener)attribute).sessionWillPassivate(event);      } catch (      Throwable t) {        ExceptionUtils.handleThrowable(t);        manager.getContext().getLogger().error(sm.getString("standardSession.attributeEvent"),t);      }    }  }}  }
class C{  public PriorityQueue(){  this(DEFAULT_CAPACITY);}  }
class C{  public XMLDecoder(InputStream in,Object owner){  this(in,owner,null);}  }
class C{  public static void v(String tag,String msg){  if (sLevel > LEVEL_VERBOSE) {    return;  }  Log.v(tag,msg);}  }
class C{  public int compareTo(Object p_other){  if (p_other == null)   return 1;  if (p_other instanceof BrdComponent) {    return name.compareToIgnoreCase(((BrdComponent)p_other).name);  }  return 1;}  }
class C{  private int compareBackendIDs(BaseDNDescriptor desc1,BaseDNDescriptor desc2){  return desc1.getBackend().getBackendID().compareTo(desc2.getBackend().getBackendID());}  }
class C{  @Override public int hashCode(){  return year ^ (month << 27);}  }
class C{  public final static VersionInfo[] loadVersionInfo(String[] pckgs,ClassLoader clsldr){  if (pckgs == null) {    throw new IllegalArgumentException("Package identifier list must not be null.");  }  ArrayList vil=new ArrayList(pckgs.length);  for (int i=0; i < pckgs.length; i++) {    VersionInfo vi=loadVersionInfo(pckgs[i],clsldr);    if (vi != null)     vil.add(vi);  }  return (VersionInfo[])vil.toArray(new VersionInfo[vil.size()]);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  Node clonedNode;  String cloneName;  NodeList cloneChildren;  int length;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  clonedNode=employeeNode.cloneNode(false);  cloneName=clonedNode.getNodeName();  assertEqualsAutoCase("element","strong","p",cloneName);  cloneChildren=clonedNode.getChildNodes();  length=(int)cloneChildren.getLength();  assertEquals("length",0,length);}  }
class C{  public static void main(String[] args){  int retCode=mainVerifyIndex(args,true,System.err);  if (retCode != 0) {    System.exit(filterExitCode(retCode));  }}  }
class C{  public synchronized void stopPSearches(){  isShutdownCalled=true;  for (  ListenerSearch pSearch : persistentSearches.values()) {    pSearch.search.removeListener(pSearch.listener);    pSearch.search.stopSearch();  }}  }
class C{  private boolean isId3v2Tag() throws IOException {  byte buf[]=new byte[3];  raf.read(buf);  String id=new String(buf,"ASCII");  return "ID3".equals(id);}  }
class C{  @Override public void send(HandshakeIODataStream out){  int total_length=0;  if (encoded_certs == null) {    encoded_certs=new byte[certs.length][];    for (int i=0; i < certs.length; i++) {      try {        encoded_certs[i]=certs[i].getEncoded();      } catch (      CertificateEncodingException e) {        fatalAlert(AlertProtocol.INTERNAL_ERROR,"INTERNAL ERROR",e);      }    }  }  total_length=3 * encoded_certs.length;  for (int i=0; i < encoded_certs.length; i++) {    total_length+=encoded_certs[i].length;  }  out.writeUint24(total_length);  for (int i=0; i < encoded_certs.length; i++) {    out.writeUint24(encoded_certs[i].length);    out.write(encoded_certs[i]);  }}  }
class C{  public Problem(final String message,final Severity severity){  if (message == null) {    throw new NullPointerException("Null message");  }  if (severity == null) {    throw new NullPointerException("Null kind");  }  this.message=message;  this.severity=severity;}  }
class C{  protected void togglePopup(){  if (isVisible()) {    hide();  } else {    show();  }}  }
class C{  public VersionNamingConfiguration(String searchVersionRegex,String replaceVersionRegex,BranchingPolicy... policies){  this.branchPolicies=new LinkedList<>(Arrays.asList(policies));  this.searchPattern=Pattern.compile(searchVersionRegex);  this.replaceVersionRegex=replaceVersionRegex;}  }
class C{  void addParamsFromSuccessfulTests(Object[] testParams){  if (testParams != null) {    successfulTestParams.put(testParams,testParams);  }}  }
class C{  protected void deploy(PrintWriter writer,ContextName cn,String tag,StringManager smClient){  if (!validateContextName(cn,writer,smClient)) {    return;  }  String baseName=cn.getBaseName();  String name=cn.getName();  String displayPath=cn.getDisplayName();  File localWar=new File(new File(versioned,tag),baseName + ".war");  File deployedWar=new File(host.getAppBaseFile(),baseName + ".war");  try {    if (isServiced(name)) {      writer.println(smClient.getString("managerServlet.inService",displayPath));    } else {      addServiced(name);      try {        if (!deployedWar.delete()) {          writer.println(smClient.getString("managerServlet.deleteFail",deployedWar));          return;        }        copy(localWar,deployedWar);        check(name);      }  finally {        removeServiced(name);      }    }  } catch (  Exception e) {    log("managerServlet.check[" + displayPath + "]",e);    writer.println(smClient.getString("managerServlet.exception",e.toString()));    return;  }  writeDeployResult(writer,smClient,name,displayPath);}  }
class C{  private void updateCache(SSOToken token,String dn,Map stringAttributes,Map byteAttributes) throws IdRepoException, SSOException {  String key=dn.toLowerCase();  IdCacheBlock cb=(IdCacheBlock)idRepoCache.get(key);  if (cb != null && !cb.hasExpiredAndUpdated() && cb.isExists()) {    AMIdentity tokenId=IdUtils.getIdentity(token);    String pDN=tokenId.getUniversalId();    cb.replaceAttributes(pDN,stringAttributes,byteAttributes);  }}  }
class C{  public Dimension maximumLayoutSize(Container target){  return new Dimension(Integer.MAX_VALUE,Integer.MAX_VALUE);}  }
class C{  public ContactHeader createContactHeader(Address address){  if (address == null)   throw new NullPointerException("null arg address");  Contact contact=new Contact();  contact.setAddress(address);  return contact;}  }
class C{  public static QueryExp geq(ValueExp v1,ValueExp v2){  return new BinaryRelQueryExp(GE,v1,v2);}  }
class C{  public boolean isServer(){  if (this.firstTransactionSeen == false)   return this.serverTransactionFlag; else   return this.firstTransactionIsServerTransaction;}  }
class C{  private static InetAddress[] bytesToInetAddresses(byte[][] rawAddresses,String hostName) throws UnknownHostException {  InetAddress[] returnedAddresses=new InetAddress[rawAddresses.length];  for (int i=0; i < rawAddresses.length; i++) {    returnedAddresses[i]=makeInetAddress(rawAddresses[i],hostName);  }  return returnedAddresses;}  }
class C{  public void doInitBody() throws JspException {}  }
class C{  public void init(){}  }
class C{  public ELException(String pMessage){  super(pMessage);}  }
class C{  public static SlowQueryConfiguration create(Map<String,Object> options) throws ConfigurationException {  SlowQueryConfiguration conf=new SlowQueryConfiguration();  Yaml yaml=new Yaml();  String str=yaml.dumpAsMap(options);  try {    conf.values=yaml.loadAs(str,Values.class);  } catch (  Exception e) {    throw new ConfigurationException("Unable to load configuration.",e);  }  return conf;}  }
class C{  public SymbolTable(int tableSize){  fTableSize=tableSize;  fBuckets=new Entry[fTableSize];}  }
class C{  protected boolean isCopyOrgEnabled(){  if (copyOrgInitialized) {    return (copyOrgEnabled);  }  if (SMSEntry.debug.messageEnabled()) {    SMSEntry.debug.message("OrganizationConfigManager: " + "in isCopyOrgEnabled() ");  }  try {    ServiceConfig s=getServiceConfig(ServiceManager.REALM_SERVICE);    if (s != null) {      Iterator items=s.getSubConfigNames().iterator();      while (items.hasNext()) {        String name=items.next().toString();        ServiceConfig subConfig=s.getSubConfig(name);        if (subConfig == null) {          SMSEntry.debug.error("OrganizationConfigManager.is" + "CopyOrgEnabled. SubConfig is NULL: " + "SC Name: " + name + " For org: "+ orgDN);          return (false);        }        if (subConfig.getSchemaID().equalsIgnoreCase(AMSDK_PLUGIN_NAME)) {          Map configMap=subConfig.getAttributes();          if ((configMap != null) && !configMap.isEmpty()) {            Set orgs=(Set)configMap.get("amSDKOrgName");            if (orgs != null && !orgs.isEmpty()) {              amSDKOrgDN=(String)orgs.iterator().next();              Set cfgs=(Set)configMap.get(CONF_ENABLED);              if ((cfgs != null) && (!cfgs.isEmpty()) && (cfgs.contains("true"))&& (amSDKOrgDN != null)) {                amsdk=new OrgConfigViaAMSDK(token,amSDKOrgDN,orgDN);                if (orgNamingAttrInLegacyMode == null) {                  orgNamingAttrInLegacyMode=getNamingAttrForOrg();                }                copyOrgEnabled=true;              }              break;            }          }        }      }    }  } catch (  SSOException sse) {    if (SMSEntry.debug.messageEnabled()) {      SMSEntry.debug.message("OrganizationConfigManager:" + "isCopyOrgEnabled() Unable to get service: " + ServiceManager.REALM_SERVICE,sse);    }  }catch (  SMSException e) {    if (SMSEntry.debug.messageEnabled()) {      SMSEntry.debug.message("OrganizationConfigManager:" + "isCopyOrgEnabled() Unable to get service: " + ServiceManager.REALM_SERVICE,e);    }  }  copyOrgInitialized=true;  if (SMSEntry.debug.messageEnabled()) {    SMSEntry.debug.message("OrganizationConfigManager: " + "copyOrgEnabled == " + copyOrgEnabled);  }  return (copyOrgEnabled);}  }
class C{  public AESCipherCBCnoPad(boolean forEncryption,byte[] key){  BlockCipher aes=new AESFastEngine();  cbc=new CBCBlockCipher(aes);  KeyParameter kp=new KeyParameter(key);  cbc.init(forEncryption,kp);}  }
class C{  @Override public boolean canScrollVertically(){  return true;}  }
class C{  public SecurityCollection findCollection(String name){  if (name == null)   return (null);  for (int i=0; i < collections.length; i++) {    if (name.equals(collections[i].getName()))     return (collections[i]);  }  return (null);}  }
class C{  public SessionContextStatement(Element element) throws SAMLException {  if (element == null) {    SAMLUtils.debug.message("AttributeStatement: null input.");    throw new SAMLRequesterException(SAMLUtils.bundle.getString("nullInput"));  }  boolean valid=SAMLUtils.checkStatement(element,"SessionContextStatement");  if (!valid) {    SAMLUtils.debug.message("SessionContextStatement: Wrong input.");    throw new SAMLRequesterException(SAMLUtils.bundle.getString("wrongInput"));  }  NodeList nodes=element.getChildNodes();  int nodeCount=nodes.getLength();  if (nodeCount > 0) {    for (int i=0; i < nodeCount; i++) {      Node currentNode=nodes.item(i);      if (currentNode.getNodeType() == Node.ELEMENT_NODE) {        String tagName=currentNode.getLocalName();        String tagNS=currentNode.getNamespaceURI();        if ((tagName == null) || tagName.length() == 0 || tagNS == null || tagNS.length() == 0) {          if (SAMLUtils.debug.messageEnabled()) {            SAMLUtils.debug.message("SessionContextStatement:" + " The tag name or tag namespace of child" + " element is either null or empty.");          }          throw new SAMLRequesterException(SAMLUtils.bundle.getString("nullInput"));        }        if (tagName.equals("Subject") && tagNS.equals(SAMLConstants.assertionSAMLNameSpaceURI)) {          if (this._subject != null) {            if (SAMLUtils.debug.messageEnabled()) {              SAMLUtils.debug.message("SessionContext" + "Statement should only contain " + "one subject");            }            throw new SAMLRequesterException(SAMLUtils.bundle.getString("oneElement"));          } else {            this._subject=new Subject((Element)currentNode);          }        } else         if (tagName.equals("ProxySubject") && tagNS.equals(WSSEConstants.NS_SEC)) {          if (_proxySubject != null) {            if (SAMLUtils.debug.messageEnabled()) {              SAMLUtils.debug.message("SessionContext" + "Statement should only contain " + "one ProxySubject");            }            throw new SAMLRequesterException(SAMLUtils.bundle.getString("oneElement"));          } else {            _proxySubject=new ProxySubject((Element)currentNode);          }        } else         if (tagName.equals("SessionContext") && tagNS.equals(WSSEConstants.NS_SEC)) {          if (_sessionContext != null) {            if (SAMLUtils.debug.messageEnabled()) {              SAMLUtils.debug.message("SessionContext" + "Statement should only contain " + "one SessionContext");            }            throw new SAMLRequesterException(SAMLUtils.bundle.getString("oneElement"));          } else {            _sessionContext=new SessionContext((Element)currentNode);          }        } else {          if (SAMLUtils.debug.messageEnabled()) {            SAMLUtils.debug.message("SessionContextStatement:" + "Wrong element " + tagName + " included.");          }          throw new SAMLRequesterException(SAMLUtils.bundle.getString("wrongInput"));        }      }    }  }}  }
class C{  ReverseAxesWalker(LocPathIterator locPathIterator,int axis){  super(locPathIterator,axis);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdataindexsizeerrreplacedataoffsetgreater.class,args);}  }
class C{  private void createDisableReplicationSubCommand() throws ArgumentException {  disableReplicationSubCmd=new SubCommand(this,DISABLE_REPLICATION_SUBCMD_NAME,INFO_DESCRIPTION_SUBCMD_DISABLE_REPLICATION.get());  secureArgsList.setBindDnArgDescription(INFO_DESCRIPTION_DISABLE_REPLICATION_BINDDN.get());  disableReplicationServerArg=BooleanArgument.builder("disableReplicationServer").shortIdentifier('a').description(INFO_DESCRIPTION_DISABLE_REPLICATION_SERVER.get()).buildArgument();  disableAllArg=BooleanArgument.builder("disableAll").description(INFO_DESCRIPTION_DISABLE_ALL.get()).buildArgument();  Argument[] argsToAdd={secureArgsList.getHostNameArg(),secureArgsList.getPortArg(),secureArgsList.getBindDnArg(),disableReplicationServerArg,disableAllArg};  for (  Argument arg : argsToAdd) {    disableReplicationSubCmd.addArgument(arg);  }}  }
class C{  private AMSetupDSConfig(){  Map map=ServicesDefaultValues.getDefaultValues();  dsManager=(String)map.get(SetupConstants.CONFIG_VAR_DS_MGR_DN);  suffix=(String)map.get(SetupConstants.CONFIG_VAR_ROOT_SUFFIX);  dsHostName=(String)map.get(SetupConstants.CONFIG_VAR_DIRECTORY_SERVER_HOST);  dsPort=(String)map.get(SetupConstants.CONFIG_VAR_DIRECTORY_SERVER_PORT);  dsAdminPwd=(String)map.get(SetupConstants.CONFIG_VAR_DS_MGR_PWD);  basedir=(String)map.get(SetupConstants.CONFIG_VAR_BASE_DIR);  deployuri=(String)map.get(SetupConstants.CONFIG_VAR_SERVER_URI);}  }
class C{  public FlatteningPathIterator(PathIterator src,double flatness){  this(src,flatness,10);}  }
class C{  public ThreadLocal(){}  }
class C{  public void addAttributeName(String attributeName){  if (attributeName != null) {    if (m_attrSet == null) {      m_attrSet=new AttrSet();    }    m_attrSet.add(new Attr(attributeName));  }}  }
class C{  public DeviceSettings(){  uuid=UUID.randomUUID().toString();}  }
class C{  protected List<LocalizableMessage> checkErrors(boolean checkName){  for (  JLabel l : labels) {    setPrimaryValid(l);  }  BackendDescriptor backend=getBackend();  List<LocalizableMessage> errors=new ArrayList<>();  if (checkName) {    String n=name.getText();    if (n.trim().length() == 0) {      errors.add(ERR_CTRL_PANEL_NO_VLV_INDEX_NAME_PROVIDED.get());      setPrimaryInvalid(lName);    } else     if (backend != null) {      for (      VLVIndexDescriptor index : backend.getVLVIndexes()) {        if (index.getName().equalsIgnoreCase(n)) {          errors.add(ERR_CTRL_PANEL_VLV_INDEX_ALREADY_DEFINED.get(n,backendName.getText()));          setPrimaryInvalid(lName);          break;        }      }    }  }  String baseDN=getBaseDN();  if (baseDN == null || baseDN.length() == 0) {    errors.add(ERR_CTRL_PANEL_NO_BASE_DN_FOR_VLV_PROVIDED.get());    setPrimaryInvalid(lBaseDN);  } else {    try {      DN.valueOf(baseDN);    } catch (    LocalizedIllegalArgumentException e) {      errors.add(ERR_CTRL_PANEL_INVALID_BASE_DN_FOR_VLV_PROVIDED.get(e.getMessageObject()));      setPrimaryInvalid(lBaseDN);    }  }  String f=filter.getText().trim();  if ("".equals(f)) {    errors.add(ERR_CTRL_PANEL_NO_FILTER_FOR_VLV_PROVIDED.get());    setPrimaryInvalid(lFilter);  } else {    try {      LDAPFilter.decode(f);    } catch (    LDAPException le) {      errors.add(ERR_CTRL_PANEL_INVALID_FILTER_FOR_VLV_PROVIDED.get(le.getMessageObject()));      setPrimaryInvalid(lFilter);    }  }  if (sortOrder.getModel().getSize() == 0) {    errors.add(ERR_CTRL_PANEL_NO_ATTRIBUTE_FOR_VLV_PROVIDED.get());    setPrimaryInvalid(lSortOrder);  }  return errors;}  }
class C{  public static void start(Context context){  start(context,new Params());}  }
class C{  public String toStringImpl(){  return new StringBuilder().append(portType).toString();}  }
class C{  public boolean unregisterModifiedIndex(AbstractIndexDescriptor index){  Set<AbstractIndexDescriptor> toRemove=new HashSet<>();  for (  AbstractIndexDescriptor i : modifiedIndexes) {    if (i.getName().equalsIgnoreCase(index.getName()) && i.getBackend().getBackendID().equalsIgnoreCase(index.getBackend().getBackendID()) && i.getClass().equals(index.getClass())) {      toRemove.add(i);    }  }  if (!toRemove.isEmpty()) {    boolean returnValue=modifiedIndexes.removeAll(toRemove);    indexModified(toRemove.iterator().next());    return returnValue;  }  return false;}  }
class C{  public double[] board_to_dsn(ShapeTileBox p_box){  double[] result=new double[4];  result[0]=p_box.box_ll.v_x / scale_factor + base_x;  result[1]=p_box.box_ll.v_y / scale_factor + base_y;  result[2]=p_box.box_ur.v_x / scale_factor + base_x;  result[3]=p_box.box_ur.v_y / scale_factor + base_y;  return result;}  }
class C{  public PluginResult.PostOperation invokePostOperationSearchPlugins(PostOperationSearchOperation searchOperation){  PluginResult.PostOperation result=null;  PluginResult.PostOperation finalResult=null;  ArrayList<DirectoryServerPlugin> skippedPlugins=skippedPreOperationPlugins.remove(searchOperation);  for (  DirectoryServerPlugin p : postOperationSearchPlugins) {    if (isInternalOperation(searchOperation,p) || isSkipped(skippedPlugins,p)) {      continue;    }    try {      result=p.doPostOperation(searchOperation);    } catch (    Exception e) {      logException(searchOperation,p,e,ERR_PLUGIN_POST_OPERATION_PLUGIN_EXCEPTION);    }    if (result == null) {      logNullResult(searchOperation,p,ERR_PLUGIN_POST_OPERATION_PLUGIN_RETURNED_NULL);    } else     if (!result.continueProcessing()) {      finalResult=result;    }  }  if (result == null) {    finalResult=PluginResult.PostOperation.continueOperationProcessing();  } else   if (finalResult == null) {    finalResult=result;  }  return finalResult;}  }
class C{  @Override protected void createInitialRepository(Repository r) throws IOException {  r.create();}  }
class C{  public boolean imageUpdate(Image img,int infoflags,int x,int y,int w,int h){  if (!isShowing() || !SwingUtilities.doesIconReferenceImage(getIcon(),img) && !SwingUtilities.doesIconReferenceImage(disabledIcon,img)) {    return false;  }  return super.imageUpdate(img,infoflags,x,y,w,h);}  }
class C{  final synchronized void process(Runnable task) throws InterruptedException {  this.task=task;  notify();}  }
class C{  @Override public void onDestroy(){}  }
class C{  protected boolean testIfCondition(){  if (ifCondition == null || "".equals(ifCondition)) {    return true;  }  return getProject().getProperty(ifCondition) != null;}  }
class C{  public void addTreeModelListener(TreeModelListener l){  listenerList.add(TreeModelListener.class,l);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentgetelementsbytagnamelength.class,args);}  }
class C{  protected void fireActionPerformed(ActionEvent e){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ActionListener.class) {      ((ActionListener)listeners[i + 1]).actionPerformed(e);    }  }}  }
class C{  public void printStackTrace(PrintWriter s){  super.printStackTrace(s);  if (cause != null) {    cause.printStackTrace(s);  }}  }
class C{  public synchronized boolean equals(Object o){  if (o == this)   return true;  if (!(o instanceof Map))   return false;  Map<?,?> t=(Map<?,?>)o;  if (t.size() != size())   return false;  try {    Iterator<Map.Entry<K,V>> i=entrySet().iterator();    while (i.hasNext()) {      Map.Entry<K,V> e=i.next();      K key=e.getKey();      V value=e.getValue();      if (value == null) {        if (!(t.get(key) == null && t.containsKey(key)))         return false;      } else {        if (!value.equals(t.get(key)))         return false;      }    }  } catch (  ClassCastException unused) {    return false;  }catch (  NullPointerException unused) {    return false;  }  return true;}  }
class C{  public boolean isSecureProcessing(){  return m_isSecureProcessing;}  }
class C{  Authenticator build(){  if (!this.tokenBased) {    AuthenticationHandler.LOGGER.debug("Password-based authentication requested.");    if (!this.data.deleteToken()) {      AuthenticationHandler.LOGGER.info("Failed to delete stale access token.");    }    return this.buildWithPassword();  }  final Optional<Reader> tokenStream=this.data.getToken();  if (!tokenStream.isPresent()) {    AuthenticationHandler.LOGGER.debug("Token file not available, using password-based authentication.");    return this.buildWithPassword();  }  boolean deleteToken=false;  try {    final ZonkyApiToken token=ZonkyApiToken.unmarshal(tokenStream.get());    final LocalDateTime obtained=this.data.getTokenSetDate().get();    final LocalDateTime expires=obtained.plus(token.getExpiresIn(),ChronoUnit.SECONDS);    AuthenticationHandler.LOGGER.debug("Token obtained on {}, expires on {}.",obtained,expires);    final LocalDateTime now=LocalDateTime.now();    if (expires.isBefore(now)) {      AuthenticationHandler.LOGGER.debug("Token {} expired, using password-based authentication.",token.getAccessToken());      deleteToken=true;      return this.buildWithPassword();    }    if (expires.minus(this.tokenRefreshBeforeExpirationInSeconds,ChronoUnit.SECONDS).isBefore(now)) {      AuthenticationHandler.LOGGER.debug("Access token expiring, will be refreshed.");      deleteToken=true;      return Authenticator.withAccessTokenAndRefresh(this.data.getUsername(),token,this.dryRun);    } else {      AuthenticationHandler.LOGGER.debug("Reusing access token.");      return Authenticator.withAccessToken(this.data.getUsername(),token,this.dryRun);    }  } catch (  final JAXBException ex) {    AuthenticationHandler.LOGGER.warn("Failed parsing token, using password-based authentication.",ex);    deleteToken=true;    return this.buildWithPassword();  } finally {    if (deleteToken && !this.data.deleteToken()) {      AuthenticationHandler.LOGGER.warn("Failed deleting token, authentication may stop working.");    }  }}  }
class C{  public JPEGHuffmanTable(short[] lengths,short[] values){  if (lengths == null || values == null || lengths.length == 0 || values.length == 0 || lengths.length > 16 || values.length > 256) {    throw new IllegalArgumentException("Illegal lengths or values");  }  for (int i=0; i < lengths.length; i++) {    if (lengths[i] < 0) {      throw new IllegalArgumentException("lengths[" + i + "] < 0");    }  }  for (int i=0; i < values.length; i++) {    if (values[i] < 0) {      throw new IllegalArgumentException("values[" + i + "] < 0");    }  }  this.lengths=Arrays.copyOf(lengths,lengths.length);  this.values=Arrays.copyOf(values,values.length);  validate();}  }
class C{  public boolean contains(int x){  int n=members.length;  for (int i=0; i < n; ++i) {    if (x < members[i][0]) {      return false;    } else     if (x <= members[i][1]) {      return true;    }  }  return false;}  }
class C{  public static String formatBase64BinaryElement(String xmlstr){  int from=0;  int index=xmlstr.indexOf("<ds:X509Certificate>");  int xmlLength=xmlstr.length();  StringBuffer sb=new StringBuffer(xmlLength + 100);  while (index != -1) {    sb.append(xmlstr.substring(from,index));    int indexEnd=xmlstr.indexOf("</ds:X509Certificate>",index);    String encoded=xmlstr.substring(index + 20,indexEnd);    int encodedLength=encoded.length();    sb.append("<ds:X509Certificate>\n");    int i;    for (i=0; i < encodedLength - 76; i+=76) {      sb.append(encoded.substring(i,i + 76)).append("\n");    }    int nlIndex=xmlstr.lastIndexOf('\n',index);    String indention=xmlstr.substring(nlIndex + 1,index);    sb.append(encoded.substring(i,encodedLength)).append("\n").append(indention).append("</ds:X509Certificate>");    from=indexEnd + 21;    index=xmlstr.indexOf("<ds:X509Certificate>",from);  }  sb.append(xmlstr.substring(from,xmlLength));  return sb.toString();}  }
class C{  public boolean match(Object template){  if (template == null)   return true;  if (!template.getClass().equals(this.getClass()))   return false;  SDPFieldList other=(SDPFieldList)template;  if (sdpFields == other.sdpFields)   return true; else   if (sdpFields == null)   return false;  return sdpFields.match(other.sdpFields);}  }
class C{  private void decodeEndRule(){  useDaylight=(startDay != 0) && (endDay != 0);  if (endDay != 0) {    if (endMonth < Calendar.JANUARY || endMonth > Calendar.DECEMBER) {      throw new IllegalArgumentException("Illegal end month " + endMonth);    }    if (endTime < 0 || endTime > millisPerDay) {      throw new IllegalArgumentException("Illegal end time " + endTime);    }    if (endDayOfWeek == 0) {      endMode=DOM_MODE;    } else {      if (endDayOfWeek > 0) {        endMode=DOW_IN_MONTH_MODE;      } else {        endDayOfWeek=-endDayOfWeek;        if (endDay > 0) {          endMode=DOW_GE_DOM_MODE;        } else {          endDay=-endDay;          endMode=DOW_LE_DOM_MODE;        }      }      if (endDayOfWeek > Calendar.SATURDAY) {        throw new IllegalArgumentException("Illegal end day of week " + endDayOfWeek);      }    }    if (endMode == DOW_IN_MONTH_MODE) {      if (endDay < -5 || endDay > 5) {        throw new IllegalArgumentException("Illegal end day of week in month " + endDay);      }    } else     if (endDay < 1 || endDay > staticMonthLength[endMonth]) {      throw new IllegalArgumentException("Illegal end day " + endDay);    }  }}  }
class C{  public AttributeBuilder(Attribute attribute){  this(attribute.getAttributeDescription());  addAll(attribute);}  }
class C{  public int lastIndexOf(Object elem){  return delegate.lastIndexOf(elem);}  }
class C{  public void componentRemoved(ContainerEvent e){}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  String name=m_arg0.execute(xctxt).str();  int context=xctxt.getCurrentNode();  DTM dtm=xctxt.getDTM(context);  int doc=dtm.getDocument();  String uri=dtm.getUnparsedEntityURI(name);  return new XString(uri);}  }
class C{  private static int cleanupService(String serviceName,PrintStream out,PrintStream err){  String[] cmd;  if (hasUAC()) {    cmd=new String[]{getLauncherBinaryFullPath(),LAUNCHER_OPTION,getLauncherAdministratorBinaryFullPath(),LAUNCHER_OPTION,getBinaryFullPath(),"cleanup",serviceName,DEBUG_OPTION};  } else {    cmd=new String[]{getBinaryFullPath(),"cleanup",serviceName,DEBUG_OPTION};  }  try {    int resultCode=Runtime.getRuntime().exec(cmd).waitFor();switch (resultCode) {case 0:      printWrappedText(out,INFO_WINDOWS_SERVICE_CLEANUP_SUCCESS.get(serviceName));    return SERVICE_CLEANUP_SUCCESS;case 1:  printWrappedText(err,ERR_WINDOWS_SERVICE_CLEANUP_NOT_FOUND.get(serviceName));return SERVICE_NOT_FOUND;case 2:printWrappedText(out,WARN_WINDOWS_SERVICE_CLEANUP_MARKED_FOR_DELETION.get(serviceName));return SERVICE_CLEANUP_MARKED_FOR_DELETION;case 3:printWrappedText(err,ERR_WINDOWS_SERVICE_CLEANUP_ERROR.get(serviceName));return SERVICE_CLEANUP_ERROR;default :printWrappedText(err,ERR_WINDOWS_SERVICE_CLEANUP_ERROR.get(serviceName));return SERVICE_CLEANUP_ERROR;}} catch (Throwable t) {err.println(ERR_WINDOWS_SERVICE_CLEANUP_ERROR.get(serviceName));printWrappedText(err,"Exception:" + t);return SERVICE_CLEANUP_ERROR;}}  }
class C{  @Override public void enqueueCall(Callback<MapMatchingResponse> callback){  getCall().enqueue(callback);}  }
class C{  protected MSISDNValidation(Map options,Debug debug,ResourceBundle bundle,java.util.Locale locale) throws AuthLoginException {  this.debug=debug;  this.bundle=bundle;  this.locale=locale;  initMSISDNConfig(options);}  }
class C{  public void checkOverride_class(SMethodDef method,SClassDef sClassDef,Set<STypeDef> visitedTypes) throws SyntaxException {  if (visitedTypes.contains(sClassDef))   return;  visitedTypes.add(sClassDef);  SMethodDef methodInSuper=findMethodWithSameSignature(method,sClassDef.methods(),false);  if (methodInSuper == null) {    if (sClassDef.parent() != null) {      checkOverride_class(method,sClassDef.parent(),visitedTypes);    }    for (    SInterfaceDef i : sClassDef.superInterfaces()) {      checkOverride_interface(method,i,visitedTypes);    }  } else {    checkFinalAndOverride(method,methodInSuper);  }}  }
class C{  public Name add(String comp) throws InvalidNameException {  impl.add(comp);  return this;}  }
class C{  public static final FileTime unixTimeToFileTime(long utime){  return FileTime.from(utime,TimeUnit.SECONDS);}  }
class C{  public SAML2MetaException(String errorCode,Object[] args){  super(SAML2MetaUtils.RESOURCE_BUNDLE_NAME,errorCode,args);}  }
class C{  protected void NCName(){  m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),m_queueMark - 1);  m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);  nextToken();}  }
class C{  public String encode(){  StringBuilder retval=new StringBuilder();  ListIterator li=sdpFields.listIterator();  while (li.hasNext()) {    SDPField sdphdr=(SDPField)li.next();    retval.append(sdphdr.encode());  }  return retval.toString();}  }
class C{  public void handleTblButtonDeleteRequest(RequestInvocationEvent event) throws ModelControlException {  CCActionTable table=(CCActionTable)getChild(TBL_SEARCH);  table.restoreStateData();  Integer[] selected=tblModel.getSelectedRows();  SerializedField szCache=(SerializedField)getChild(SZ_CACHE);  List list=(List)szCache.getSerializedObj();  Set names=new HashSet(selected.length * 2);  for (int i=0; i < selected.length; i++) {    names.add(list.get(selected[i].intValue()));  }  try {    IDRepoModel model=(IDRepoModel)getModel();    String curRealm=(String)getPageSessionAttribute(AMAdminConstants.CURRENT_REALM);    model.deleteIDRepos(curRealm,names);    if (selected.length == 1) {      setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","idRepo.message.deleted");    } else {      setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","idRepo.message.deleted.pural");    }  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }  forwardTo();}  }
class C{  public void testShiftRightNegZeroesMul32(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,0,0,0,0,0,0,0,0};  int aSign=-1;  int number=64;  byte rBytes[]={-2,127,-57,-101,1,75,-90,-46,-91};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.shiftRight(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public static synchronized void clearSystemOutContents(){  redirectedSystemOut.reset();}  }
class C{  public boolean isReplicaOffline(DN domainDN,int serverId){  return replicasOffline.getCSN(domainDN,serverId) != null;}  }
class C{  public void addCompletedTask(Task completedTask){  schedulerLock.lock();  try {    completedTasks.add(completedTask);    runningTasks.remove(completedTask);    if (completedTask.getCompletionTime() == -1) {      completedTask.setCompletionTime(TimeThread.getTime());    }  }  finally {    schedulerLock.unlock();  }}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  try {    Dialog dialog=serverTransaction.getDialog();    System.out.println("b2bua: got an ACK! ");    System.out.println("Dialog State = " + dialog.getState());    Dialog otherDialog=(Dialog)dialog.getApplicationData();    Request request=otherDialog.createAck(otherDialog.getLocalSeqNumber());    otherDialog.sendAck(request);  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  @Override public TagResult generateValue(TemplateEntry templateEntry,TemplateValue templateValue){  templateValue.append(text);  return TagResult.SUCCESS_RESULT;}  }
class C{  private void parseMajorVersion(String majorVer) throws SAMLException, FSMsgException {  try {    majorVersion=Integer.parseInt(majorVer);  } catch (  NumberFormatException e) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAuthnResponse(Element): invalid " + "MajorVersion",e);    }    throw new FSMsgException("wrongInput",null);  }  if (majorVersion != SAMLConstants.PROTOCOL_MAJOR_VERSION) {    if (majorVersion > SAMLConstants.PROTOCOL_MAJOR_VERSION) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSAuthnResponse(Element):MajorVersion of" + " the Response is too high.");      }      throw new SAMLVersionMismatchException(FSUtils.BUNDLE_NAME,"responseVersionTooHigh",null);    } else {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSAuthnResponse(Element):MajorVersion of" + " the Response is too low.");      }      throw new SAMLVersionMismatchException(FSUtils.BUNDLE_NAME,"responseVersionTooLow",null);    }  }}  }
class C{  public boolean invokeImportPlugins(){  return invokeImportPlugins;}  }
class C{  @AfterClass public static void cleanupClass(){  try {    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());  } catch (  Exception ignore) {    System.err.println("cannot remove " + scenario.getRepositoryLocation());  }}  }
class C{  public NodeIterator cloneWithReset() throws CloneNotSupportedException {  NodeSet clone=(NodeSet)clone();  clone.reset();  return clone;}  }
class C{  public void testReadObject() throws Exception {  String secret="secret string";  SealedObject so=new SealedObject(secret,new NullCipher());  ByteArrayOutputStream bos=new ByteArrayOutputStream();  ObjectOutputStream oos=new ObjectOutputStream(bos);  oos.writeObject(so);  ObjectInputStream ois=new ObjectInputStream(new ByteArrayInputStream(bos.toByteArray()));  SealedObject so_des=(SealedObject)ois.readObject();  assertEquals("The secret content of deserialized object " + "should be equal to the secret content of initial object",secret,so_des.getObject(new NullCipher()));  assertEquals("The value returned by getAlgorithm() method of " + "deserialized object should be equal to the value returned " + "by getAlgorithm() method of initial object",so.getAlgorithm(),so_des.getAlgorithm());}  }
class C{  public void close(boolean removeSocket,boolean stopKeepAliveTask){  isRunning=false;  if (mySock != null) {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))     logger.logDebug("Closing socket " + key);    try {      mySock.close();      mySock=null;    } catch (    IOException ex) {      if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))       logger.logDebug("Error closing socket " + ex);    }  }  if (myParser != null) {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))     logger.logDebug("Closing my parser " + myParser);    myParser.close();  }  if (myClientOutputStream != null) {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))     logger.logDebug("Closing client output stream " + myClientOutputStream);    try {      myClientOutputStream.close();    } catch (    IOException ex) {      if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))       logger.logDebug("Error closing client output stream" + ex);    }  }  if (removeSocket) {    String ioHandlerKey=key.substring(4);    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))     logger.logDebug("Closing TCP socket " + ioHandlerKey);    sipStack.ioHandler.removeSocket(ioHandlerKey);    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {      logger.logDebug("Closing message Channel (key = " + key + ")"+ this);    }  } else {    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {      String ioHandlerKey=key.substring(4);      logger.logDebug("not removing socket key from the cached map since it has already been updated by the iohandler.sendBytes " + ioHandlerKey);    }  }  if (stopKeepAliveTask) {    cancelPingKeepAliveTimeoutTaskIfStarted();  }}  }
class C{  public BadPasswordException(String message,Throwable cause){  super(message,cause);}  }
class C{  void checkStartCode(){  if (!startCode) {    throw new IllegalStateException("Cannot visit instructions before visitCode has been called.");  }}  }
class C{  protected int drawUnselectedText(Graphics g,int x,int y,int p0,int p1) throws BadLocationException {  g.setColor(unselected);  Document doc=getDocument();  Segment segment=SegmentCache.getSharedSegment();  doc.getText(p0,p1 - p0,segment);  int ret=Utilities.drawTabbedText(this,segment,x,y,g,this,p0);  SegmentCache.releaseSharedSegment(segment);  return ret;}  }
class C{  @Override public void sendError(int sc,String msg) throws IOException {  this._getHttpServletResponse().sendError(sc,msg);}  }
class C{  public boolean isCallerSensitive(){  return testAllFlags(CALLER_SENSITIVE);}  }
class C{  public static PdfStream parse(PdfCanvasParser ps,PdfDictionary colorSpaceDic) throws IOException {  PdfDictionary inlineImageDict=parseDictionary(ps);  byte[] samples=parseSamples(inlineImageDict,colorSpaceDic,ps);  PdfStream inlineImageAsStreamObject=new PdfStream(samples);  inlineImageAsStreamObject.putAll(inlineImageDict);  return inlineImageAsStreamObject;}  }
class C{  private void doPostModify(PluginOperation modifyOperation,Entry oldEntry,Entry newEntry,List<Modification> modifications){  if (hasGroupMembershipUpdateControl(modifyOperation)) {    return;  }  lock.readLock().lock();  try {    if (!groupInstances.containsKey(oldEntry.getName())) {      return;    }  }  finally {    lock.readLock().unlock();  }  lock.writeLock().lock();  try {    Group<?> group=groupInstances.get(oldEntry.getName());    if (group != null) {      if (!oldEntry.getName().equals(newEntry.getName()) || !group.mayAlterMemberList() || updatesObjectClass(modifications)) {        groupInstances.remove(oldEntry.getName());        createAndRegisterGroup(newEntry);      } else {        group.updateMembers(modifications);      }    }  } catch (  UnsupportedOperationException|DirectoryException e) {    logger.traceException(e);  } finally {    lock.writeLock().unlock();  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrinsertbefore1.class,args);}  }
class C{  public JsonArray(JsonObject jsonObject,String key){  this.jsonObject=jsonObject;  this.key=key;}  }
class C{  public void testConstrCharIntIntMathContextException2(){  char value[]={'-','1','2','3','8','0',',','4','7','3','8','E','-','4','2','3'};  int offset=3;  int len=120;  int precision=4;  RoundingMode rm=RoundingMode.CEILING;  MathContext mc=new MathContext(precision,rm);  try {    new BigDecimal(value,offset,len,mc);    fail("NumberFormatException has not been thrown");  } catch (  NumberFormatException e) {  }}  }
class C{  protected void list(HttpServletRequest request,HttpServletResponse response,String message,StringManager smClient) throws IOException {  if (debug >= 1)   log("list: Listing contexts for virtual host '" + host.getName() + "'");  PrintWriter writer=response.getWriter();  writer.print(Constants.HTML_HEADER_SECTION);  Object[] args=new Object[2];  args[0]=request.getContextPath();  args[1]=smClient.getString("htmlManagerServlet.title");  writer.print(MessageFormat.format(Constants.BODY_HEADER_SECTION,args));  args=new Object[3];  args[0]=smClient.getString("htmlManagerServlet.messageLabel");  if (message == null || message.length() == 0) {    args[1]="OK";  } else {    args[1]=RequestUtil.filter(message);  }  writer.print(MessageFormat.format(Constants.MESSAGE_SECTION,args));  args=new Object[9];  args[0]=smClient.getString("htmlManagerServlet.manager");  args[1]=response.encodeURL(request.getContextPath() + "/html/list");  args[2]=smClient.getString("htmlManagerServlet.list");  args[3]=response.encodeURL(request.getContextPath() + "/" + smClient.getString("htmlManagerServlet.helpHtmlManagerFile"));  args[4]=smClient.getString("htmlManagerServlet.helpHtmlManager");  args[5]=response.encodeURL(request.getContextPath() + "/" + smClient.getString("htmlManagerServlet.helpManagerFile"));  args[6]=smClient.getString("htmlManagerServlet.helpManager");  args[7]=response.encodeURL(request.getContextPath() + "/status");  args[8]=smClient.getString("statusServlet.title");  writer.print(MessageFormat.format(Constants.MANAGER_SECTION,args));  args=new Object[7];  args[0]=smClient.getString("htmlManagerServlet.appsTitle");  args[1]=smClient.getString("htmlManagerServlet.appsPath");  args[2]=smClient.getString("htmlManagerServlet.appsVersion");  args[3]=smClient.getString("htmlManagerServlet.appsName");  args[4]=smClient.getString("htmlManagerServlet.appsAvailable");  args[5]=smClient.getString("htmlManagerServlet.appsSessions");  args[6]=smClient.getString("htmlManagerServlet.appsTasks");  writer.print(MessageFormat.format(APPS_HEADER_SECTION,args));  Container children[]=host.findChildren();  String contextNames[]=new String[children.length];  for (int i=0; i < children.length; i++)   contextNames[i]=children[i].getName();  Arrays.sort(contextNames);  String appsStart=smClient.getString("htmlManagerServlet.appsStart");  String appsStop=smClient.getString("htmlManagerServlet.appsStop");  String appsReload=smClient.getString("htmlManagerServlet.appsReload");  String appsUndeploy=smClient.getString("htmlManagerServlet.appsUndeploy");  String appsExpire=smClient.getString("htmlManagerServlet.appsExpire");  String noVersion="<i>" + smClient.getString("htmlManagerServlet.noVersion") + "</i>";  boolean isHighlighted=true;  boolean isDeployed=true;  String highlightColor=null;  for (  String contextName : contextNames) {    Context ctxt=(Context)host.findChild(contextName);    if (ctxt != null) {      isHighlighted=!isHighlighted;      if (isHighlighted) {        highlightColor="#C3F3C3";      } else {        highlightColor="#FFFFFF";      }      String contextPath=ctxt.getPath();      String displayPath=contextPath;      if (displayPath.equals("")) {        displayPath="/";      }      StringBuilder tmp=new StringBuilder();      tmp.append("path=");      tmp.append(URL_ENCODER.encode(displayPath,"UTF-8"));      if (ctxt.getWebappVersion().length() > 0) {        tmp.append("&version=");        tmp.append(URL_ENCODER.encode(ctxt.getWebappVersion(),"UTF-8"));      }      String pathVersion=tmp.toString();      try {        isDeployed=isDeployed(contextName);      } catch (      Exception e) {        isDeployed=false;      }      args=new Object[7];      args[0]="<a href=\"" + URL_ENCODER.encode(contextPath + "/","UTF-8") + "\">"+ RequestUtil.filter(displayPath)+ "</a>";      if ("".equals(ctxt.getWebappVersion())) {        args[1]=noVersion;      } else {        args[1]=RequestUtil.filter(ctxt.getWebappVersion());      }      if (ctxt.getDisplayName() == null) {        args[2]="&nbsp;";      } else {        args[2]=RequestUtil.filter(ctxt.getDisplayName());      }      args[3]=Boolean.valueOf(ctxt.getState().isAvailable());      args[4]=RequestUtil.filter(response.encodeURL(request.getContextPath() + "/html/sessions?" + pathVersion));      Manager manager=ctxt.getManager();      if (manager instanceof DistributedManager && showProxySessions) {        args[5]=Integer.valueOf(((DistributedManager)manager).getActiveSessionsFull());      } else       if (manager != null) {        args[5]=Integer.valueOf(manager.getActiveSessions());      } else {        args[5]=Integer.valueOf(0);      }      args[6]=highlightColor;      writer.print(MessageFormat.format(APPS_ROW_DETAILS_SECTION,args));      args=new Object[14];      args[0]=RequestUtil.filter(response.encodeURL(request.getContextPath() + "/html/start?" + pathVersion));      args[1]=appsStart;      args[2]=RequestUtil.filter(response.encodeURL(request.getContextPath() + "/html/stop?" + pathVersion));      args[3]=appsStop;      args[4]=RequestUtil.filter(response.encodeURL(request.getContextPath() + "/html/reload?" + pathVersion));      args[5]=appsReload;      args[6]=RequestUtil.filter(response.encodeURL(request.getContextPath() + "/html/undeploy?" + pathVersion));      args[7]=appsUndeploy;      args[8]=RequestUtil.filter(response.encodeURL(request.getContextPath() + "/html/expire?" + pathVersion));      args[9]=appsExpire;      args[10]=smClient.getString("htmlManagerServlet.expire.explain");      if (manager == null) {        args[11]=smClient.getString("htmlManagerServlet.noManager");      } else {        args[11]=Integer.valueOf(ctxt.getSessionTimeout());      }      args[12]=smClient.getString("htmlManagerServlet.expire.unit");      args[13]=highlightColor;      if (ctxt.getName().equals(this.context.getName())) {        writer.print(MessageFormat.format(MANAGER_APP_ROW_BUTTON_SECTION,args));      } else       if (ctxt.getState().isAvailable() && isDeployed) {        writer.print(MessageFormat.format(STARTED_DEPLOYED_APPS_ROW_BUTTON_SECTION,args));      } else       if (ctxt.getState().isAvailable() && !isDeployed) {        writer.print(MessageFormat.format(STARTED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION,args));      } else       if (!ctxt.getState().isAvailable() && isDeployed) {        writer.print(MessageFormat.format(STOPPED_DEPLOYED_APPS_ROW_BUTTON_SECTION,args));      } else {        writer.print(MessageFormat.format(STOPPED_NONDEPLOYED_APPS_ROW_BUTTON_SECTION,args));      }    }  }  args=new Object[7];  args[0]=smClient.getString("htmlManagerServlet.deployTitle");  args[1]=smClient.getString("htmlManagerServlet.deployServer");  args[2]=response.encodeURL(request.getContextPath() + "/html/deploy");  args[3]=smClient.getString("htmlManagerServlet.deployPath");  args[4]=smClient.getString("htmlManagerServlet.deployConfig");  args[5]=smClient.getString("htmlManagerServlet.deployWar");  args[6]=smClient.getString("htmlManagerServlet.deployButton");  writer.print(MessageFormat.format(DEPLOY_SECTION,args));  args=new Object[4];  args[0]=smClient.getString("htmlManagerServlet.deployUpload");  args[1]=response.encodeURL(request.getContextPath() + "/html/upload");  args[2]=smClient.getString("htmlManagerServlet.deployUploadFile");  args[3]=smClient.getString("htmlManagerServlet.deployButton");  writer.print(MessageFormat.format(UPLOAD_SECTION,args));  args=new Object[9];  args[0]=smClient.getString("htmlManagerServlet.diagnosticsTitle");  args[1]=smClient.getString("htmlManagerServlet.diagnosticsLeak");  args[2]=response.encodeURL(request.getContextPath() + "/html/findleaks");  args[3]=smClient.getString("htmlManagerServlet.diagnosticsLeakWarning");  args[4]=smClient.getString("htmlManagerServlet.diagnosticsLeakButton");  args[5]=smClient.getString("htmlManagerServlet.diagnosticsSsl");  args[6]=response.encodeURL(request.getContextPath() + "/html/sslConnectorCiphers");  args[7]=smClient.getString("htmlManagerServlet.diagnosticsSslConnectorCipherButton");  args[8]=smClient.getString("htmlManagerServlet.diagnosticsSslConnectorCipherText");  writer.print(MessageFormat.format(DIAGNOSTICS_SECTION,args));  args=new Object[9];  args[0]=smClient.getString("htmlManagerServlet.serverTitle");  args[1]=smClient.getString("htmlManagerServlet.serverVersion");  args[2]=smClient.getString("htmlManagerServlet.serverJVMVersion");  args[3]=smClient.getString("htmlManagerServlet.serverJVMVendor");  args[4]=smClient.getString("htmlManagerServlet.serverOSName");  args[5]=smClient.getString("htmlManagerServlet.serverOSVersion");  args[6]=smClient.getString("htmlManagerServlet.serverOSArch");  args[7]=smClient.getString("htmlManagerServlet.serverHostname");  args[8]=smClient.getString("htmlManagerServlet.serverIPAddress");  writer.print(MessageFormat.format(Constants.SERVER_HEADER_SECTION,args));  args=new Object[8];  args[0]=ServerInfo.getServerInfo();  args[1]=System.getProperty("java.runtime.version");  args[2]=System.getProperty("java.vm.vendor");  args[3]=System.getProperty("os.name");  args[4]=System.getProperty("os.version");  args[5]=System.getProperty("os.arch");  try {    InetAddress address=InetAddress.getLocalHost();    args[6]=address.getHostName();    args[7]=address.getHostAddress();  } catch (  UnknownHostException e) {    args[6]="-";    args[7]="-";  }  writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION,args));  writer.print(Constants.HTML_TAIL_SECTION);  writer.flush();  writer.close();}  }
class C{  private PluginResult.PreOperation isIntegrityMaintained(Attribute attr,DN entryDN,DN entryBaseDN){  try {    AttributeDescription attrDesc=attr.getAttributeDescription();    for (    ByteString attrVal : attr) {      DN valueEntryDN=DN.valueOf(attrVal);      final Entry valueEntry;      if (currentConfiguration.getCheckReferencesScopeCriteria() == CheckReferencesScopeCriteria.NAMING_CONTEXT && valueEntryDN.isInScopeOf(entryBaseDN,SearchScope.SUBORDINATES)) {        return PluginResult.PreOperation.stopProcessing(ResultCode.CONSTRAINT_VIOLATION,ERR_PLUGIN_REFERENT_NAMINGCONTEXT_MISMATCH.get(valueEntryDN,attrDesc,entryDN));      }      valueEntry=DirectoryServer.getEntry(valueEntryDN);      if (valueEntry == null) {        return PluginResult.PreOperation.stopProcessing(ResultCode.CONSTRAINT_VIOLATION,ERR_PLUGIN_REFERENT_ENTRY_MISSING.get(valueEntryDN,attrDesc,entryDN));      }      SearchFilter filter=attrFiltMap.get(attrDesc.getAttributeType());      if (filter != null && !filter.matchesEntry(valueEntry)) {        return PluginResult.PreOperation.stopProcessing(ResultCode.CONSTRAINT_VIOLATION,ERR_PLUGIN_REFERENT_FILTER_MISMATCH.get(valueEntry.getName(),attrDesc,entryDN,filter));      }    }  } catch (  Exception de) {    return PluginResult.PreOperation.stopProcessing(ResultCode.OTHER,ERR_PLUGIN_REFERENT_EXCEPTION.get(de.getLocalizedMessage()));  }  return PluginResult.PreOperation.continueOperationProcessing();}  }
class C{  public void runTest() throws Throwable {  Document doc;  DOMImplementation domImpl;  DocumentType newDocType;  String publicId="http://www.w3.org/DOM/Test/dom2.dtd";  String systemId="dom2.dtd";  String qualifiedName;  java.util.List qualifiedNames=new java.util.ArrayList();  qualifiedNames.add("{");  qualifiedNames.add("}");  qualifiedNames.add("'");  qualifiedNames.add("~");  qualifiedNames.add("`");  qualifiedNames.add("@");  qualifiedNames.add("#");  qualifiedNames.add("$");  qualifiedNames.add("%");  qualifiedNames.add("^");  qualifiedNames.add("&");  qualifiedNames.add("*");  qualifiedNames.add("(");  qualifiedNames.add(")");  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();  for (int indexN10073=0; indexN10073 < qualifiedNames.size(); indexN10073++) {    qualifiedName=(String)qualifiedNames.get(indexN10073);{      boolean success=false;      try {        newDocType=domImpl.createDocumentType(qualifiedName,publicId,systemId);      } catch (      DOMException ex) {        success=(ex.code == DOMException.INVALID_CHARACTER_ERR);      }      assertTrue("domimplementationcreatedocumenttype04",success);    }  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getElementsByTagNameNS08.class,args);}  }
class C{  public void warning(SAXParseException e) throws SAXException {  if (errorHandler != null) {    errorHandler.warning(e);  }}  }
class C{  public void dragEnter(DragSourceDragEvent dsde){  DragSourceListener dsl=listener;  if (dsl != null) {    dsl.dragEnter(dsde);  }  getDragSource().processDragEnter(dsde);  updateCurrentCursor(getSourceActions(),dsde.getTargetActions(),ENTER);}  }
class C{  public WaitingThread nextThread(){  return this.waitingThreads.peek();}  }
class C{  public static Hyphenation hyphenate(String lang,String country,Map<String,String> hyphPathNames,String word,int leftMin,int rightMin){  HyphenationTree hTree=getHyphenationTree(lang,country,hyphPathNames);  if (hTree == null) {    log.warn("Soft hyphen unicode symbols will be used as hints for hyphenation");    final char softHyphen='\u00ad';    List<Integer> softHyphens=new ArrayList<>();    int lastSoftHyphenIndex=-1;    int curSoftHyphenIndex;    while ((curSoftHyphenIndex=word.indexOf(softHyphen,lastSoftHyphenIndex + 1)) > 0) {      softHyphens.add(curSoftHyphenIndex);      lastSoftHyphenIndex=curSoftHyphenIndex;    }    int leftInd=0, rightInd=softHyphens.size() - 1;    while (leftInd < softHyphens.size() && word.substring(0,softHyphens.get(leftInd)).replace(String.valueOf(softHyphen),"").length() < leftMin) {      leftInd++;    }    while (rightInd >= 0 && word.substring(softHyphens.get(rightInd) + 1).replace(String.valueOf(softHyphen),"").length() < rightMin) {      rightInd--;    }    if (leftInd <= rightInd) {      int[] hyphenationPoints=new int[rightInd - leftInd + 1];      for (int i=leftInd; i <= rightInd; i++) {        hyphenationPoints[i - leftInd]=softHyphens.get(i);      }      return new Hyphenation(word,hyphenationPoints);    } else {      return null;    }  }  return hTree.hyphenate(word,leftMin,rightMin);}  }
class C{  public boolean isValidOn(Date date){  AttCertValidityPeriod certValidityPeriod=attrCert.getAcinfo().getAttrCertValidityPeriod();  return !date.before(CertUtils.recoverDate(certValidityPeriod.getNotBeforeTime())) && !date.after(CertUtils.recoverDate(certValidityPeriod.getNotAfterTime()));}  }
class C{  public void removeAttribute(String name){  if (session != null) {    session.removeAttribute(name);    internalAttributes.remove(name);  } else {    internalAttributes.remove(name);  }}  }
class C{  private boolean verifyResponseSignature(HttpServletRequest request,ProviderDescriptorType remoteDescriptor,String remoteEntityId,boolean isRemoteIDP) throws SAMLException, FSException {  FSUtils.debug.message("Entered FSReturnLogoutServlet::verifylogoutSignature");  X509Certificate cert=KeyUtil.getVerificationCert(remoteDescriptor,remoteEntityId,isRemoteIDP);  if (cert == null) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSReturnLogoutServlet.verifyRegistrationSignature: " + "couldn't obtain this site's cert.");    }    throw new SAMLResponderException(FSUtils.bundle.getString(IFSConstants.NO_CERT));  }  boolean isValidSign=FSSignatureUtil.verifyRequestSignature(request,cert);  if (!isValidSign) {    FSUtils.debug.error("Logout response is not properly signed");    return false;  } else {    FSUtils.debug.message("Logout response is properly signed");    return true;  }}  }
class C{  public List concat(Collection<?> elements){  List newList=new List();  newList.addAll(this);  newList.addAll(elements);  return newList;}  }
class C{  public static StringArgument rootDNPwdArgument() throws ArgumentException {  return StringArgument.builder("rootUserPassword").shortIdentifier(OPTION_SHORT_BINDPWD).description(INFO_ROOT_USER_PWD_PLACEHOLDER.get()).valuePlaceholder(INFO_ROOT_USER_PWD_PLACEHOLDER.get()).buildArgument();}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public CertificateParsingException(){  super();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeinsertbeforedocfragment.class,args);}  }
class C{  void addOrReplaceDecls(XMLNSDecl newDecl){  int n=m_prefixTable.size();  for (int i=n - 1; i >= 0; i--) {    XMLNSDecl decl=(XMLNSDecl)m_prefixTable.get(i);    if (decl.getPrefix().equals(newDecl.getPrefix())) {      return;    }  }  m_prefixTable.add(newDecl);}  }
class C{  public static PdfAction createSound(PdfStream sound){  return new PdfAction().put(PdfName.S,PdfName.Sound).put(PdfName.Sound,sound);}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener listener){  if (listener == null) {    return;  }  if (listener instanceof PropertyChangeListenerProxy) {    PropertyChangeListenerProxy proxy=(PropertyChangeListenerProxy)listener;    addPropertyChangeListener(proxy.getPropertyName(),proxy.getListener());  } else {    this.map.add(null,listener);  }}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  removePageSessionAttribute(PROPERTY_ATTRIBUTE);  populateValues=true;  forwardTo();}  }
class C{  public static void notifyRestoreBeginning(Backend<?> backend,RestoreConfig config){  for (  RestoreTaskListener listener : directoryServer.restoreTaskListeners) {    try {      listener.processRestoreBegin(backend,config);    } catch (    Exception e) {      logger.traceException(e);    }  }}  }
class C{  public void commit() throws IOException {  if (hasErrors) {    completeEdit(this,false);    remove(entry.key);  } else {    completeEdit(this,true);  }  committed=true;}  }
class C{  public void logExtendedResponse(ExtendedOperation extendedOperation){}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  XPathContext context=transformer.getXPathContext();  if (transformer.currentFuncResultSeen()) {    throw new TransformerException("An EXSLT function cannot set more than one result!");  }  int sourceNode=context.getCurrentNode();  XObject var=getValue(transformer,sourceNode);  transformer.popCurrentFuncResult();  transformer.pushCurrentFuncResult(var);}  }
class C{  public void put(String key,NewSubSchemaWrapper value){  newSubSchemas.put(key,value);}  }
class C{  public FramedAppleTalkLinkAttribute(int networkNumber){  super(OctetUtils.toOctets(AttributeType.FRAMED_APPLETALK_LINK,networkNumber));  this.networkNumber=networkNumber;}  }
class C{  private JPanel createDbPanel(){  JCheckBox cbOutsideDbs=UIFactory.makeJCheckBox(INFO_DELETE_OUTSIDE_DBS_LABEL.get(),INFO_DELETE_OUTSIDE_DBS_TOOLTIP.get(),UIFactory.TextStyle.INSTRUCTIONS);  cbOutsideDbs.setSelected(true);  hmCbs.put(FieldName.EXTERNAL_DB_DIRECTORIES,cbOutsideDbs);  return createOutsidePathPanel(cbOutsideDbs,outsideDbs,INFO_DELETE_OUTSIDE_DBS_MSG.get());}  }
class C{  public static com.liferay.blade.samples.servicebuilder.model.Foo addFoo(com.liferay.blade.samples.servicebuilder.model.Foo foo){  return getService().addFoo(foo);}  }
class C{  private boolean indentValueToken(){  return indentValueTokenFlag;}  }
class C{  public PerlinOctaveGenerator(World world,int octaves){  this(new Random(world.getSeed()),octaves);}  }
class C{  @DataProvider(name="valueInfo") public Object[][] createData(){  ByteString att1=ByteString.valueOfUtf8("string");  ByteString att2=ByteString.valueOfUtf8("value");  ByteString att3=ByteString.valueOfUtf8("again");  CSN del1=new CSN(1,0,1);  CSN del2=new CSN(1,1,1);  CSN del3=new CSN(1,0,2);  CSN upd1=new CSN(TimeThread.getTime(),123,45);  CSN upd2=new CSN(TimeThread.getTime() + 1000,123,45);  CSN upd3=new CSN(TimeThread.getTime(),321,54);  return new Object[][]{{att1,null,null},{att1,upd1,del1},{att2,upd2,del2},{att3,upd3,del3}};}  }
class C{  public FSAccountFedInfo readAccountFedInfo(String userID,String providerID) throws FSAccountMgmtException {  return readAccountFedInfo(userID,providerID,null);}  }
class C{  public void printStackTrace(PrintStream s){  super.printStackTrace(s);}  }
class C{  public void insert_ushort(short value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_ushort",_opsClass);  DynEnumOperations $self=(DynEnumOperations)$so.servant;  try {    $self.insert_ushort(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  private static String buildCacheKey(String realm,String entityId){  return realm + "//" + entityId;}  }
class C{  private int readAnnotationValues(int v,final char[] buf,final boolean named,final AnnotationVisitor av){  int i=readUnsignedShort(v);  v+=2;  if (named) {    for (; i > 0; --i) {      v=readAnnotationValue(v + 2,buf,readUTF8(v,buf),av);    }  } else {    for (; i > 0; --i) {      v=readAnnotationValue(v,buf,null,av);    }  }  if (av != null) {    av.visitEnd();  }  return v;}  }
class C{  public String str(){  String str=m_DTMXRTreeFrag.getDTM().getStringValue(m_dtmRoot).toString();  return (null == str) ? "" : str;}  }
class C{  public String toString(boolean detailed){  return null;}  }
class C{  public void testDivideRoundDownNeg(){  String a="-92948782094488478231212478987482988429808779810457634781384756794987";  int aScale=-24;  String b="7472334223847623782375469293018787918347987234564568";  int bScale=13;  String c="-1.24390557635720517122423359799283E+53";  int resScale=-21;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_DOWN);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public KeyDeclaration(Stylesheet parentNode,int docOrderNumber){  m_parentNode=parentNode;  setUid(docOrderNumber);}  }
class C{  private static boolean isHttpProtocol(byte[] packet){  if (packet == null || packet.length == 0) {    return false;  }  int firstLineIndex=ArrayUtils.indexOf(packet,(byte)IoUtils.LF);  if (firstLineIndex >= 14) {    String line=new String(packet,firstLineIndex - 10,10,CharsetUtils.DEFAULT_HTTP_ENCODING);    return StringUtils.containsIgnoreCase(line,"HTTP/");  }  int firstSpaceIndex=ArrayUtils.indexOf(packet,(byte)IoUtils.SP);  if (firstSpaceIndex <= 0) {    return false;  }  String method=(new String(packet,0,firstSpaceIndex)).trim().toUpperCase();  return HttpMethod.isValidMethod(method);}  }
class C{  private void postWorkDirectory(){  String workDir=getWorkDir();  if (workDir == null || workDir.length() == 0) {    String hostName=null;    String engineName=null;    String hostWorkDir=null;    Container parentHost=getParent();    if (parentHost != null) {      hostName=parentHost.getName();      if (parentHost instanceof StandardHost) {        hostWorkDir=((StandardHost)parentHost).getWorkDir();      }      Container parentEngine=parentHost.getParent();      if (parentEngine != null) {        engineName=parentEngine.getName();      }    }    if ((hostName == null) || (hostName.length() < 1))     hostName="_";    if ((engineName == null) || (engineName.length() < 1))     engineName="_";    String temp=getBaseName();    if (temp.startsWith("/"))     temp=temp.substring(1);    temp=temp.replace('/','_');    temp=temp.replace('\\','_');    if (temp.length() < 1)     temp=ContextName.ROOT_NAME;    if (hostWorkDir != null) {      workDir=hostWorkDir + File.separator + temp;    } else {      workDir="work" + File.separator + engineName+ File.separator+ hostName+ File.separator+ temp;    }    setWorkDir(workDir);  }  File dir=new File(workDir);  if (!dir.isAbsolute()) {    String catalinaHomePath=null;    try {      catalinaHomePath=getCatalinaBase().getCanonicalPath();      dir=new File(catalinaHomePath,workDir);    } catch (    IOException e) {      log.warn(sm.getString("standardContext.workCreateException",workDir,catalinaHomePath,getName()),e);    }  }  if (!dir.mkdirs() && !dir.isDirectory()) {    log.warn(sm.getString("standardContext.workCreateFail",dir,getName()));  }  if (context == null) {    getServletContext();  }  context.setAttribute(ServletContext.TEMPDIR,dir);  context.setAttributeReadOnly(ServletContext.TEMPDIR);}  }
class C{  public static byte[] decode(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,DECODABET);}  }
class C{  public Node insertNode(Node n,String shortName){  Stack<String> localStack=splitParts(shortName);  org.w3c.dom.Document doc=n.getOwnerDocument();  Node n2=null;  n=n.getFirstChild();  while (n.getNodeType() != Node.ELEMENT_NODE)   n=n.getNextSibling();  for (int k=0; k < localStack.size(); ++k) {    String part=localStack.get(k);    int idx=part.lastIndexOf('[');    String name=part.substring(0,idx);    idx=Integer.parseInt(part.substring(idx + 1,part.length() - 1));    int found=-1;    for (n2=n.getFirstChild(); n2 != null; n2=n2.getNextSibling()) {      if (n2.getNodeType() == Node.ELEMENT_NODE) {        String s=escapeSom(n2.getLocalName());        if (s.equals(name)) {          ++found;          if (found == idx)           break;        }      }    }    for (; found < idx; ++found) {      n2=doc.createElementNS(null,name);      n2=n.appendChild(n2);      Node attr=doc.createAttributeNS(XfaForm.XFA_DATA_SCHEMA,"dataNode");      attr.setNodeValue("dataGroup");      n2.getAttributes().setNamedItemNS(attr);    }    n=n2;  }  inverseSearchAdd(inverseSearch,localStack,shortName);  name2Node.put(shortName,n2);  order.add(shortName);  return n2;}  }
class C{  public void fireGenerateEvent(int eventType,char[] ch,int start,int length){}  }
class C{  public void addRestrictedDomain(String domainName){  if (StringUtils.isEmpty(domainName)) {    return;  }  if (restrictedDomains == null) {    restrictedDomains=new ArrayList<>();  }  restrictedDomains.add(domainName);}  }
class C{  public void damageRange(JTextComponent a,int b,int c){  for (int i=0; i < uis.size(); i++) {    ((TextUI)(uis.elementAt(i))).damageRange(a,b,c);  }}  }
class C{  public static PatternDN decode(String dnString) throws DirectoryException {  List<PatternRDN> rdnComponents=new ArrayList<>();  List<Integer> doubleWildPos=new ArrayList<>();  if (dnString == null) {    return new PatternDN();  }  int length=dnString.length();  if (length == 0 || "\"\"".equals(dnString)) {    return new PatternDN();  }  int pos=0;  char c=dnString.charAt(pos);  while (c == ' ') {    pos++;    if (pos == length) {      return new PatternDN();    }    c=dnString.charAt(pos);  }  rdnLoop:   while (true) {    int attributePos=pos;    StringBuilder attributeName=new StringBuilder();    pos=parseAttributePattern(dnString,pos,attributeName);    String name=attributeName.toString();    if (pos >= length) {      if (name.equals("*")) {        rdnComponents.add(new PatternRDN(name,null,dnString));        break;      } else       if (name.equals("**")) {        doubleWildPos.add(rdnComponents.size());        break;      } else {        pos=attributePos - 1;        name="*";        c='=';      }    } else {      c=dnString.charAt(pos);      while (c == ' ') {        pos++;        if (pos >= length) {          if (name.equals("*")) {            rdnComponents.add(new PatternRDN(name,null,dnString));            break rdnLoop;          } else           if (name.equals("**")) {            doubleWildPos.add(rdnComponents.size());            break rdnLoop;          } else {            pos=attributePos - 1;            name="*";            c='=';          }        } else {          c=dnString.charAt(pos);        }      }    }    if (c == '=') {      pos++;    } else     if (c == ',' || c == ';') {      if (name.equals("*")) {        rdnComponents.add(new PatternRDN(name,null,dnString));        pos++;        continue;      } else       if (name.equals("**")) {        doubleWildPos.add(rdnComponents.size());        pos++;        continue;      } else {        pos=attributePos;        name="*";      }    } else {      throw new DirectoryException(ResultCode.INVALID_DN_SYNTAX,ERR_ATTR_SYNTAX_DN_NO_EQUAL.get(dnString,attributeName,c));    }    while (pos < length && dnString.charAt(pos) == ' ') {      pos++;    }    if (pos >= length) {      List<ByteString> valuePattern=newArrayList(ByteString.empty());      rdnComponents.add(new PatternRDN(name,valuePattern,dnString));      break;    }    List<ByteString> parsedValue=new ArrayList<>();    pos=parseValuePattern(dnString,pos,parsedValue);    PatternRDN rdn=new PatternRDN(name,parsedValue,dnString);    while (pos < length && ((c=dnString.charAt(pos)) == ' ')) {      pos++;    }    if (pos >= length) {      rdnComponents.add(rdn);      break;    } else     if (c == ',' || c == ';') {      rdnComponents.add(rdn);      pos++;      continue;    } else     if (c != '+') {      LocalizableMessage message=ERR_ATTR_SYNTAX_DN_INVALID_CHAR.get(dnString,c,pos);      throw new DirectoryException(ResultCode.INVALID_DN_SYNTAX,message);    }    while (true) {      pos++;      while (pos < length && dnString.charAt(pos) == ' ') {        pos++;      }      attributeName=new StringBuilder();      pos=parseAttributePattern(dnString,pos,attributeName);      if (pos >= length) {        throw new DirectoryException(ResultCode.INVALID_DN_SYNTAX,ERR_ATTR_SYNTAX_DN_END_WITH_ATTR_NAME.get(dnString,attributeName));      }      name=attributeName.toString();      c=dnString.charAt(pos);      while (c == ' ') {        pos++;        if (pos >= length) {          throw new DirectoryException(ResultCode.INVALID_DN_SYNTAX,ERR_ATTR_SYNTAX_DN_END_WITH_ATTR_NAME.get(dnString,name));        }        c=dnString.charAt(pos);      }      if (c == '=') {        pos++;      } else {        LocalizableMessage message=ERR_ATTR_SYNTAX_DN_NO_EQUAL.get(dnString,name,c);        throw new DirectoryException(ResultCode.INVALID_DN_SYNTAX,message);      }      while (pos < length && ((c=dnString.charAt(pos)) == ' ')) {        pos++;      }      if (pos >= length) {        List<ByteString> valuePattern=newArrayList(ByteString.empty());        rdn.addValue(name,valuePattern,dnString);        rdnComponents.add(rdn);        break;      }      parsedValue=new ArrayList<>();      pos=parseValuePattern(dnString,pos,parsedValue);      rdn.addValue(name,parsedValue,dnString);      while (pos < length && ((c=dnString.charAt(pos)) == ' ')) {        pos++;      }      if (pos >= length) {        rdnComponents.add(rdn);        break;      } else       if (c == ',' || c == ';') {        rdnComponents.add(rdn);        pos++;        break;      } else       if (c != '+') {        LocalizableMessage message=ERR_ATTR_SYNTAX_DN_INVALID_CHAR.get(dnString,c,pos);        throw new DirectoryException(ResultCode.INVALID_DN_SYNTAX,message);      }    }  }  if (doubleWildPos.isEmpty()) {    return new PatternDN(rdnComponents.toArray(new PatternRDN[rdnComponents.size()]));  }  PatternRDN[] subInitial=null;  PatternRDN[] subFinal=null;  List<PatternRDN[]> subAnyElements=new ArrayList<>();  int i=0;  int numComponents=rdnComponents.size();  int to=doubleWildPos.get(i);  if (to != 0) {    subInitial=new PatternRDN[to];    subInitial=rdnComponents.subList(0,to).toArray(subInitial);  }  int from;  for (; i < doubleWildPos.size() - 1; i++) {    from=doubleWildPos.get(i);    to=doubleWildPos.get(i + 1);    PatternRDN[] subAny=new PatternRDN[to - from];    subAny=rdnComponents.subList(from,to).toArray(subAny);    subAnyElements.add(subAny);  }  if (i < doubleWildPos.size()) {    from=doubleWildPos.get(i);    if (from != numComponents) {      subFinal=new PatternRDN[numComponents - from];      subFinal=rdnComponents.subList(from,numComponents).toArray(subFinal);    }  }  return new PatternDN(subInitial,subAnyElements,subFinal);}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    Rectangle visible=target.getVisibleRect();    Rectangle newVis=new Rectangle(visible);    int selectedIndex=target.getCaretPosition();    int scrollAmount=direction * target.getScrollableBlockIncrement(visible,SwingConstants.VERTICAL,direction);    int initialY=visible.y;    Caret caret=target.getCaret();    Point magicPosition=caret.getMagicCaretPosition();    if (selectedIndex != -1) {      try {        Rectangle dotBounds=target.modelToView(selectedIndex);        int x=(magicPosition != null) ? magicPosition.x : dotBounds.x;        int h=dotBounds.height;        if (h > 0) {          scrollAmount=scrollAmount / h * h;        }        newVis.y=constrainY(target,initialY + scrollAmount,visible.height);        int newIndex;        if (visible.contains(dotBounds.x,dotBounds.y)) {          newIndex=target.viewToModel(new Point(x,constrainY(target,dotBounds.y + scrollAmount,0)));        } else {          if (direction == -1) {            newIndex=target.viewToModel(new Point(x,newVis.y));          } else {            newIndex=target.viewToModel(new Point(x,newVis.y + visible.height));          }        }        newIndex=constrainOffset(target,newIndex);        if (newIndex != selectedIndex) {          int newY=getAdjustedY(target,newVis,newIndex);          if (direction == -1 && newY <= initialY || direction == 1 && newY >= initialY) {            newVis.y=newY;            if (select) {              target.moveCaretPosition(newIndex);            } else {              target.setCaretPosition(newIndex);            }          }        }      } catch (      BadLocationException ble) {      }    } else {      newVis.y=constrainY(target,initialY + scrollAmount,visible.height);    }    if (magicPosition != null) {      caret.setMagicCaretPosition(magicPosition);    }    target.scrollRectToVisible(newVis);  }}  }
class C{  public FrameBodyTCOM(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  public CMMException(String s){  super(s);}  }
class C{  @Override public int countAll(){  Long count=(Long)finderCache.getResult(FINDER_PATH_COUNT_ALL,FINDER_ARGS_EMPTY,this);  if (count == null) {    Session session=null;    try {      session=openSession();      Query q=session.createQuery(_SQL_COUNT_FOO);      count=(Long)q.uniqueResult();      finderCache.putResult(FINDER_PATH_COUNT_ALL,FINDER_ARGS_EMPTY,count);    } catch (    Exception e) {      finderCache.removeResult(FINDER_PATH_COUNT_ALL,FINDER_ARGS_EMPTY);      throw processException(e);    } finally {      closeSession(session);    }  }  return count.intValue();}  }
class C{  public static BuildVersion instanceVersion() throws InitializationException {  final String buildInfo=Paths.get(DirectoryServer.getInstanceRoot(),CONFIG_DIR_NAME,"buildinfo").toString();  try (final BufferedReader reader=new BufferedReader(new FileReader(buildInfo))){    final String s=reader.readLine();    if (s == null) {      throw new InitializationException(ERR_BUILDVERSION_MALFORMED.get(buildInfo));    }    return valueOf(s);  } catch (  FileNotFoundException e) {    throw new InitializationException(ERR_INSTANCE_NOT_CONFIGURED.get(),e);  }catch (  IOException e) {    throw new InitializationException(ERR_BUILDVERSION_NOT_FOUND.get(buildInfo));  }catch (  final IllegalArgumentException e) {    throw new InitializationException(ERR_BUILDVERSION_MALFORMED.get(buildInfo));  }}  }
class C{  public DeleteContext(CSN csn,String entryUUID){  super(csn,entryUUID);}  }
class C{  protected String toUrlStr(String base,Filter filter,SearchScope scope){  StringBuilder urlBuf=new StringBuilder();  urlBuf.append("ldap:///").append(base).append("?");  if (SearchScope.BASE_OBJECT.equals(scope)) {    urlBuf.append("?base");  } else   if (SearchScope.SINGLE_LEVEL.equals(scope)) {    urlBuf.append("?one");  } else {    urlBuf.append("?sub");  }  if (filter != null && !filter.toString().isEmpty()) {    urlBuf.append("?").append(filter);  } else {    urlBuf.append("?");  }  return urlBuf.toString();}  }
class C{  public boolean isPathSelected(TreePath path){  return (path != null) ? (uniquePaths.get(path) != null) : false;}  }
class C{  public void repair_clearance_violations(){  if (debug(Mdbg.CLRVIOL,Ldbg.TRACE))   i_brd.userPrintln(classname + "repair_clearance_violations: start");  StateRepairClearanceViolation repair=new StateRepairClearanceViolation(this,i_brd,actlog);  repair.repair(items_list);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(domimplementationfeaturenull.class,args);}  }
class C{  public void removeAll(){  setSelectedIndexImpl(-1,true);  int tabCount=getTabCount();  while (tabCount-- > 0) {    removeTabAt(tabCount);  }}  }
class C{  public void mousePressed(MouseEvent event){  hideTipWindow();  enterTimer.stop();  showImmediately=false;  insideComponent=null;  mouseEvent=null;}  }
class C{  NimbusStyle(String prefix,JComponent c){  if (c != null) {    this.component=new WeakReference<JComponent>(c);  }  this.prefix=prefix;  this.painter=new SynthPainterImpl(this);}  }
class C{  public static JScrollPane createBorderLessScrollBar(Component comp){  JScrollPane scroll=new JScrollPane(comp);  scroll.setBorder(new EmptyBorder(0,0,0,0));  scroll.setViewportBorder(new EmptyBorder(0,0,0,0));  scroll.setOpaque(false);  scroll.getViewport().setOpaque(false);  scroll.getViewport().setBackground(ColorAndFontConstants.background);  scroll.setBackground(ColorAndFontConstants.background);  UIFactory.setScrollIncrementUnit(scroll);  return scroll;}  }
class C{  public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (mv != null) {    return mv.visitTypeAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  public boolean isAddAcceptable(ManagementContext context,ManagedObject<?> managedObject,Collection<LocalizableMessage> unacceptableReasons) throws LdapException {  return true;}  }
class C{  public String toString(){  return (toXML());}  }
class C{  void fullyUnlock(){  takeLock.unlock();  putLock.unlock();}  }
class C{  public synchronized void moveFirst(final Entry element){  if (element.getValid() && element.getPrevious() != null) {    Entry prev=element.getPrevious();    Entry next=element.getNext();    prev.setNext(next);    if (next != null) {      next.setPrevious(prev);    } else {      last=prev;    }    first.setPrevious(element);    element.setNext(first);    element.setPrevious(null);    first=element;  }}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof NumberUp);}  }
class C{  public static SecurityOptions createOptionsForCertificatType(CertificateType certType,String keystorePath,String keystorePwd,boolean enableSSL,boolean enableStartTLS,int sslPort,Collection<String> aliasesToUse){  if (certType == CertificateType.NO_CERTIFICATE) {    return createNoCertificateOptions();  } else   if (certType.equals(CertificateType.SELF_SIGNED_CERTIFICATE) && aliasesToUse.isEmpty()) {    aliasesToUse=Arrays.asList(SELF_SIGNED_CERT_ALIAS);  }  SecurityOptions ops=new SecurityOptions();  if (keystorePath != null) {    ops.setKeyStorePath(keystorePath);  }  if (keystorePwd != null) {    ops.setKeyStorePassword(keystorePwd);  }  ops.setCertificateType(certType);  updateCertificateOptions(ops,enableSSL,enableStartTLS,sslPort,aliasesToUse);  return ops;}  }
class C{  public void Log(String msg,int level){  if (mDebug) {    if (TextUtils.isEmpty(msg)) {      throw new NullPointerException("The message is null!");    }    if (level < Constants.DEBUG_LEVEL_DEBUG && level > Constants.DEBUG_LEVEL_ERROR) {      throw new DebugException("Out of debug level!");    }switch (level) {case Constants.DEBUG_LEVEL_DEBUG:      Log.d(Constants.DEBUG_TAG,msg);    return;case Constants.DEBUG_LEVEL_INFO:  Log.i(Constants.DEBUG_TAG,msg);return;case Constants.DEBUG_LEVEL_WARNING:Log.w(Constants.DEBUG_TAG,msg);return;case Constants.DEBUG_LEVEL_ERROR:Log.e(Constants.DEBUG_TAG,msg);return;case Constants.DEBUG_LEVEL_VERBOSE:Log.v(Constants.DEBUG_TAG,msg);return;}}}  }
class C{  public TooManyHopsException(){  super();}  }
class C{  private ProgressDescriptor createProgressDescriptor(ProgressUpdateEvent ev){  ProgressStep status=ev.getProgressStep();  LocalizableMessage newProgressLabel=ev.getCurrentPhaseSummary();  LocalizableMessage additionalDetails=ev.getNewLogs();  Integer ratio=ev.getProgressRatio();  if (additionalDetails != null) {    progressDetails.append(additionalDetails);  }  return new ProgressDescriptor(status,ratio,newProgressLabel,LocalizableMessage.raw(progressDetails.toString()));}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  Attr addrAttr;  String attrNamespaceURI;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("emp:address");  testAddr=(Element)elementList.item(0);  addrAttr=testAddr.getAttributeNodeNS("http://www.nist.gov","district");  attrNamespaceURI=addrAttr.getNamespaceURI();  assertEquals("namespaceURI","http://www.nist.gov",attrNamespaceURI);}  }
class C{  private Request createTunnelRequest() throws IOException {  return new Request.Builder().url(route.address().url()).header("Host",Util.hostHeader(route.address().url())).header("Proxy-Connection","Keep-Alive").header("User-Agent",Version.userAgent()).build();}  }
class C{  public synchronized void addVetoableChangeListener(VetoableChangeListener listener){  if (vetoableChangeSupport == null) {    vetoableChangeSupport=new java.beans.VetoableChangeSupport(this);  }  vetoableChangeSupport.addVetoableChangeListener(listener);}  }
class C{  public Builder withName(String name){  this.handlerName=name;  return this;}  }
class C{  private void logReconStart(ReconciliationContext reconContext,Context context) throws SynchronizationException {  ReconAuditEventLogger reconStartEntry=new ReconAuditEventLogger(null,name,context);  reconStartEntry.setEntryType(ReconAuditEventLogger.RECON_LOG_ENTRY_TYPE_RECON_START);  reconStartEntry.setReconciliationServiceReconAction(reconContext.getReconAction());  reconStartEntry.setReconId(reconContext.getReconId());  reconStartEntry.setMessage("Reconciliation initiated by " + context.asContext(SecurityContext.class).getAuthenticationId());  logEntry(reconStartEntry,reconContext);}  }
class C{  @Override public java.awt.Image createAwtImage(java.awt.Color foreground,java.awt.Color background){  int f=foreground.getRGB();  int g=background.getRGB();  java.awt.Canvas canvas=new java.awt.Canvas();  String bCode;  if (codeType == CODE128_RAW) {    int idx=code.indexOf('\uffff');    if (idx >= 0) {      bCode=code.substring(0,idx);    } else {      bCode=code;    }  } else {    bCode=getRawText(code,codeType == CODE128_UCC);  }  int len=bCode.length();  int fullWidth=(len + 2) * 11 + 2;  byte[] bars=getBarsCode128Raw(bCode);  boolean print=true;  int ptr=0;  int height=(int)barHeight;  int[] pix=new int[fullWidth * height];  for (int k=0; k < bars.length; ++k) {    int w=bars[k];    int c=g;    if (print) {      c=f;    }    print=!print;    for (int j=0; j < w; ++j) {      pix[ptr++]=c;    }  }  for (int k=fullWidth; k < pix.length; k+=fullWidth) {    System.arraycopy(pix,0,pix,k,fullWidth);  }  return canvas.createImage(new java.awt.image.MemoryImageSource(fullWidth,height,pix,0,fullWidth));}  }
class C{  public MethodNotSupportedException(final String message){  super(message);}  }
class C{  public static boolean mayUseCertificateManager(){  return true;}  }
class C{  public InvalidPluginException(final String message){  super(message);}  }
class C{  @DataProvider(name="validasciidata") public Object[][] createValidASCIIData(){  return new Object[][]{{(char)1,false,-1,-1,false,false,false,false},{'-',false,-1,-1,false,false,true,true},{'_',false,-1,-1,false,false,false,true},{'.',false,-1,-1,false,false,false,true},{'+',false,-1,-1,false,false,false,false},{'=',false,-1,-1,false,false,false,true},{'a',false,10,-1,true,false,true,true},{'A',true,10,-1,true,false,true,true},{'f',false,15,-1,true,false,true,true},{'F',true,15,-1,true,false,true,true},{'z',false,-1,-1,true,false,true,true},{'Z',true,-1,-1,true,false,true,true},{'0',false,0,0,false,true,true,true},{'9',false,9,9,false,true,true,true}};}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.FederationMetadataHandlerType createFederationMetadataHandlerType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.FederationMetadataHandlerTypeImpl();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testAddr;  Node textNode;  NamedNodeMap attrList;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  testAddr=elementList.item(0);  textNode=testAddr.getFirstChild();  attrList=textNode.getAttributes();  assertNull("nodeTextNodeAttributesAssert1",attrList);}  }
class C{  public void appendTextChild(String str){}  }
class C{  public void paintToolBarDragWindowBorder(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBorder(context,g,x,y,w,h,orientation);}  }
class C{  public boolean isScroll(){  return !getFieldFlag(FF_DO_NOT_SCROLL);}  }
class C{  public boolean isVirtual(){  return virtual;}  }
class C{  public NSSet(boolean ordered,NSObject... objects){  this.ordered=ordered;  if (!ordered)   set=new LinkedHashSet<NSObject>(); else   set=new TreeSet<NSObject>();  set.addAll(Arrays.asList(objects));}  }
class C{  public static Charset toCharset(Charset charset){  return charset == null ? Charset.defaultCharset() : charset;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode20.class,args);}  }
class C{  public String encode(String pString) throws EncoderException {  if (pString == null) {    return null;  }  try {    return encode(pString,getDefaultCharset());  } catch (  UnsupportedEncodingException e) {    throw new EncoderException(e.getMessage());  }}  }
class C{  public static String readFully(Reader reader) throws IOException {  try {    StringWriter writer=new StringWriter();    char[] buffer=new char[1024];    int count;    while ((count=reader.read(buffer)) != -1) {      writer.write(buffer,0,count);    }    return writer.toString();  }  finally {    reader.close();  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.FreshnessElement createFreshnessElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.FreshnessElementImpl();}  }
class C{  public UnknownHostException(String s){  super(s);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.WssX509Pkcs7Token11Element createWssX509Pkcs7Token11Element() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.WssX509Pkcs7Token11ElementImpl();}  }
class C{  private void initData(){  RedisOptions config;  String osPort=System.getenv("OPENSHIFT_REDIS_PORT");  String osHost=System.getenv("OPENSHIFT_REDIS_HOST");  if (osPort != null && osHost != null)   config=new RedisOptions().setHost(osHost).setPort(Integer.parseInt(osPort)); else   config=new RedisOptions().setHost(config().getString("redis.host",REDIS_HOST)).setPort(config().getInteger("redis.port",REDIS_PORT));  this.redis=RedisClient.create(vertx,config);  redis.hset(Constants.REDIS_TODO_KEY,"24",Json.encodePrettily(new Todo(24,"Something to do...",false,1,"todo/ex")),null);}  }
class C{  @BeforeClass public static void initClass(){  scenario=Scenarios.s2_linear_with_both_tags();  if (Misc.isDebugMode()) {    System.out.println("git repository created under: " + scenario.getRepositoryLocation());  }}  }
class C{  public void accept(final MethodVisitor mv,boolean visible){  Label[] start=new Label[this.start.size()];  Label[] end=new Label[this.end.size()];  int[] index=new int[this.index.size()];  for (int i=0; i < start.length; ++i) {    start[i]=this.start.get(i).getLabel();    end[i]=this.end.get(i).getLabel();    index[i]=this.index.get(i);  }  accept(mv.visitLocalVariableAnnotation(typeRef,typePath,start,end,index,desc,true));}  }
class C{  private static void checkFileValidation(File file){  if (file == null)   throw new NullPointerException("File must not be null");  if (!file.exists()) {    throw new IllegalArgumentException("The file: " + file.getPath() + " doesn't exist.");  }  file.canRead();}  }
class C{  public boolean visitExtensionElement(ElemExtensionCall elem){  return true;}  }
class C{  private void generateDestroy(){  out.printil("public void _jspDestroy() {");  out.pushIndent();  if (isPoolingEnabled) {    for (int i=0; i < tagHandlerPoolNames.size(); i++) {      out.printin(tagHandlerPoolNames.elementAt(i));      out.println(".release();");    }  }  out.popIndent();  out.printil("}");  out.println();}  }
class C{  private void lastChanceElection(char searchTerm,TreeNode child,List<TreeNode> candidates,SearchContext context){  if (context.has(ContextKey.LAST_CHARACTER)) {    while (child != null) {      electWildcard(searchTerm,child,candidates,context);      child=child.getSibling();    }  }}  }
class C{  public void abandon() throws UMSException {  IOUtils.closeIfNotNull(connection,m_ldapSearchResults);}  }
class C{  public void printStackTrace(PrintWriter printWriter){  super.printStackTrace(printWriter);}  }
class C{  private static HttpResponse<String> printResponseAsString(BaseRequest request) throws UnirestException, IOException {  HttpResponse<String> response=request.asString();  System.out.println();  System.out.println("    Returns:");  System.out.println();  System.out.println(writePrettyValueAsString(json(readJson(response.getBody()))).replaceAll("\\n","\n        ").replaceFirst("\\{","        {"));  System.out.println();  return response;}  }
class C{  public void loadLocal(final int local){  loadInsn(getLocalType(local),local);}  }
class C{  public static final boolean isLoggingBehaviorEnabled(LoggingBehavior behavior){synchronized (loggingBehaviors) {    return Settings.isDebugEnabled() && loggingBehaviors.contains(behavior);  }}  }
class C{  private void copyTables(){  prefixTable=(Hashtable)prefixTable.clone();  uriTable=(Hashtable)uriTable.clone();  if (elementNameTable != null)   elementNameTable=new Hashtable();  if (attributeNameTable != null)   attributeNameTable=new Hashtable();  tablesDirty=true;}  }
class C{  public boolean equals(Object o){  if (o == null) {    return false;  }  if (this == o) {    return true;  }  if (!(o instanceof HTTPBasicPrincipal)) {    return false;  }  HTTPBasicPrincipal that=(HTTPBasicPrincipal)o;  return this.getName().equals(that.getName());}  }
class C{  public JKNotAllowedOperationException(){  super();}  }
class C{  public void handleButton3Request(RequestInvocationEvent event) throws ModelControlException, AMConsoleException {  removePageSessionAttribute(PAGE_MODIFIED);  backTrail();  try {    String name=(String)getPageSessionAttribute(AMAdminConstants.SAVE_VB_NAME);    SCConfigViewBean vb=(SCConfigViewBean)getViewBean(Class.forName(name));    passPgSessionMap(vb);    vb.forwardTo(getRequestContext());  } catch (  ClassNotFoundException e) {    debug.warning("SCSAML2SOAPBindingViewBean.handleButton3Request:",e);  }}  }
class C{  public ValidationException(String rbName,String errorCode){  super(rbName,errorCode,(Object[])null);}  }
class C{  public static void makeLdif(String ldifPath,String resourcePath,String[] templateLines) throws IOException, InitializationException, MakeLDIFException {  TemplateFile template=new TemplateFile(resourcePath,new Random(1));  ArrayList<LocalizableMessage> warnings=new ArrayList<>();  template.parse(templateLines,warnings);  makeLdif(ldifPath,template);}  }
class C{  public String toStringImpl(){  return new StringBuilder().append(service).toString();}  }
class C{  public synchronized Iterator<NSObject> objectIterator(){  return set.iterator();}  }
class C{  @Inject public MessageDispatcher(Cache<String,MessagePromise> dispatch,@Named("frPush") Debug debug){  this.cache=dispatch;  this.debug=debug;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGetPost(request,response);}  }
class C{  void rescheduleForPurge(long purgeAt){  this.purgeAt=purgeAt;  cancel();  if (!isScheduled()) {    SystemTimerPool.getTimerPool().schedule(this,new Date(purgeAt));  } else {    sessionDebug.error("Unable to schedule destroyed session for purging");  }}  }
class C{  @Override public boolean valueIsAcceptable(final String valueString,final LocalizableMessageBuilder invalidReason){  try {    final int intValue=Integer.parseInt(valueString);    if (intValue < lowerBound) {      invalidReason.append(ERR_INTARG_VALUE_BELOW_LOWER_BOUND.get(longIdentifier,intValue,lowerBound));      return false;    }    if (intValue > upperBound) {      invalidReason.append(ERR_INTARG_VALUE_ABOVE_UPPER_BOUND.get(longIdentifier,intValue,upperBound));      return false;    }    return true;  } catch (  final NumberFormatException e) {    invalidReason.append(ERR_ARG_CANNOT_DECODE_AS_INT.get(valueString,longIdentifier));    return false;  }}  }
class C{  public PdfCanvas(PdfPage page,boolean wrapOldContent){  this(getPageStream(page),page.getResources(),page.getDocument());  if (wrapOldContent) {    page.newContentStreamBefore().getOutputStream().writeBytes(ByteUtils.getIsoBytes("q\n"));    contentStream.getOutputStream().writeBytes(ByteUtils.getIsoBytes("Q\n"));  }  if (page.getRotation() != 0 && page.isIgnorePageRotationForContent() && (wrapOldContent || !page.isPageRotationInverseMatrixWritten())) {    applyRotation(page);    page.setPageRotationInverseMatrixWritten();  }}  }
class C{  public final boolean isUnresolved(){  return addr == null;}  }
class C{  public RefreshFailedException(String msg){  super(msg);}  }
class C{  ItemInputStream(){  findSeparator();}  }
class C{  public static FSAuthnRequestEnvelope parseXML(String xml) throws FSMsgException {  Document doc=XMLUtils.toDOMDocument(xml,FSUtils.debug);  if (doc == null) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAuthnRequestEnvelope.parseXML:Error " + "while parsing input xml string");    }    throw new FSMsgException("parseError",null);  }  Element root=doc.getDocumentElement();  return new FSAuthnRequestEnvelope(root);}  }
class C{  public void initialize(Map configParams) throws PolicyException {  String configuredLdapServer=(String)configParams.get(PolicyConfig.LDAP_SERVER);  if (configuredLdapServer == null) {    debug.error("DSAMERole.initialize(): failed to get LDAP " + "server name. If you enter more than one server name " + "in the policy config service's Primary LDAP Server "+ "field, please make sure the ldap server name is preceded "+ "with the local server name.");    throw (new PolicyException(ResBundleUtils.rbName,"invalid_ldap_server_host",null,null));  }  ldapServer=configuredLdapServer.toLowerCase();  organizationDN=(String)configParams.get(PolicyConfig.IS_ROLES_BASE_DN);  String scope=(String)configParams.get(PolicyConfig.IS_ROLES_SEARCH_SCOPE);  if (scope.equalsIgnoreCase(LDAP_SCOPE_BASE)) {    roleSearchScope=AMConstants.SCOPE_BASE;  } else   if (scope.equalsIgnoreCase(LDAP_SCOPE_ONE)) {    roleSearchScope=AMConstants.SCOPE_ONE;  } else {    roleSearchScope=AMConstants.SCOPE_SUB;  }  try {    timeLimit=Integer.parseInt((String)configParams.get(PolicyConfig.LDAP_SEARCH_TIME_OUT));    maxResults=Integer.parseInt((String)configParams.get(PolicyConfig.LDAP_SEARCH_LIMIT));  } catch (  NumberFormatException nfe) {    debug.error("Can not parse search parameters in DSAMERole",nfe);    timeLimit=5;    maxResults=100;  }  initialized=true;}  }
class C{  public void removeIndexInterval(int index0,int index1){  int rmMinIndex=Math.min(index0,index1);  int rmMaxIndex=Math.max(index0,index1);  int gapLength=(rmMaxIndex - rmMinIndex) + 1;  for (int i=rmMinIndex; i <= maxIndex; i++) {    setState(i,value.get(i + gapLength));  }  int leadIndex=this.leadIndex;  if (leadIndex == 0 && rmMinIndex == 0) {  } else   if (leadIndex > rmMaxIndex) {    leadIndex=this.leadIndex - gapLength;  } else   if (leadIndex >= rmMinIndex) {    leadIndex=rmMinIndex - 1;  }  int anchorIndex=this.anchorIndex;  if (anchorIndex == 0 && rmMinIndex == 0) {  } else   if (anchorIndex > rmMaxIndex) {    anchorIndex=this.anchorIndex - gapLength;  } else   if (anchorIndex >= rmMinIndex) {    anchorIndex=rmMinIndex - 1;  }  if (leadIndex != this.leadIndex || anchorIndex != this.anchorIndex) {    updateLeadAnchorIndices(anchorIndex,leadIndex);  }  fireValueChanged();}  }
class C{  public void init(Instrumentation inst,QueryReporter queryReporter,ConnectorConfiguration configuration){  queryProcessorWrapper=new QueryProcessorWrapper(queryReporter,configuration);  setQueryProcessorIntercepter(inst);  setCassandraDaemonIntercepter(inst);}  }
class C{  public static Event35Log.Builder newBuilder(Event35Log other){  return new Event35Log.Builder(other);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testNode;  boolean state;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  testNode=(Element)elementList.item(0);  state=testNode.hasAttribute("street");  assertTrue("throw_True",state);}  }
class C{  public IllegalClassFormatException(){  super();}  }
class C{  private void saveNameIdFormat(SSODescriptorType ssodescriptor,Map values) throws AMConsoleException {  List listtoSave=convertSetToList((Set)values.get(NAMEID_FORMAT));  ssodescriptor.getNameIDFormat().clear();  for (int i=0; i < listtoSave.size(); i++) {    ssodescriptor.getNameIDFormat().add(listtoSave.get(i));  }}  }
class C{  public HttpService(final HttpProcessor proc,final ConnectionReuseStrategy connStrategy,final HttpResponseFactory responseFactory){  super();  setHttpProcessor(proc);  setConnReuseStrategy(connStrategy);  setResponseFactory(responseFactory);}  }
class C{  public static void verifyGooglePlayService(Context context) throws DeviceUnsupportedException, GooglePlayServicesOutDatedException, GooglePlayServicesNotInstalledException, UnknownErrorException {  GoogleApiAvailability googleAPI=GoogleApiAvailability.getInstance();  int status=googleAPI.isGooglePlayServicesAvailable(context);  if (status == ConnectionResult.SUCCESS) {    return;  }  if (googleAPI.isUserResolvableError(status)) {switch (status) {case ConnectionResult.SERVICE_MISSING:{        throw new GooglePlayServicesNotInstalledException(context.getString(R.string.google_play_service_not_installed));      }case ConnectionResult.SERVICE_VERSION_UPDATE_REQUIRED:{      throw new GooglePlayServicesOutDatedException(context.getString(R.string.google_play_service_out_date));    }default :{    throw new UnknownErrorException(context.getString(R.string.google_play_service_unknown_error,status));  }}} else {throw new DeviceUnsupportedException(context.getString(R.string.google_play_service_unsupported_device));}}  }
class C{  public void externalEntityDecl(String name,String publicId,String systemId) throws SAXException {}  }
class C{  public static boolean isPersistentNameID(final NameID nameId){  boolean isPersistent=false;  if (nameId == null) {    return isPersistent;  }  String id=nameId.getFormat();  if (id != null) {    if (id.equalsIgnoreCase(SAML2Constants.PERSISTENT) || id.equalsIgnoreCase(SAML2Constants.UNSPECIFIED)) {      isPersistent=true;    }  }  if (debug.messageEnabled()) {    debug.message("SAML2Utils:isPersistent : " + isPersistent);  }  return isPersistent;}  }
class C{  public void update(float xPos,float yPos){  this.xPos=xPos;  this.yPos=yPos;  if (spriteFrame.getFitHeight() < auraHeight) {    spriteFrame.setFitHeight(spriteFrame.getFitHeight() + auraHeightDelta);    this.yPos=(float)(yPos + auraHeight - spriteFrame.getFitHeight());    updatePosition();  }  if (!auraStateComplete) {    if (effectiveYPos == -200) {      effectiveYPos=yPos;      parent.getChildren().add(envEffectsView);      envEffectsView.setTranslateX(xPos - xPosOffset);      envEffectsView.setTranslateY(effectiveYPos - yPosOffset);    }    displayEffect();    return;  }  this.update();}  }
class C{  public FastRemovalDequeue(int maxSize){  if (maxSize <= 1) {    maxSize=2;  }  this.maxSize=maxSize;  first=null;  last=null;  size=0;}  }
class C{  @DataProvider(name="writeModifyDataProvider") public Object[][] createTestWriteModifyData() throws Exception {  return MODIFY_ENTRY_DATA_LDIF;}  }
class C{  public void unregisterAll(Plugin plugin){  ArrayList<ServiceUnregisterEvent> unregisteredEvents=new ArrayList<ServiceUnregisterEvent>();synchronized (providers) {    Iterator<Map.Entry<Class<?>,List<RegisteredServiceProvider<?>>>> it=providers.entrySet().iterator();    try {      while (it.hasNext()) {        Map.Entry<Class<?>,List<RegisteredServiceProvider<?>>> entry=it.next();        Iterator<RegisteredServiceProvider<?>> it2=entry.getValue().iterator();        try {          while (it2.hasNext()) {            RegisteredServiceProvider<?> registered=it2.next();            if (registered.getPlugin().equals(plugin)) {              it2.remove();              unregisteredEvents.add(new ServiceUnregisterEvent(registered));            }          }        } catch (        NoSuchElementException e) {        }        if (entry.getValue().size() == 0) {          it.remove();        }      }    } catch (    NoSuchElementException e) {    }  }  for (  ServiceUnregisterEvent event : unregisteredEvents) {    Bukkit.getServer().getPluginManager().callEvent(event);  }}  }
class C{  public void addButtonActionListener(ButtonActionListener l){  getButtonsPanel().addButtonActionListener(l);  getInstalledPanel().addButtonActionListener(l);  getCurrentStepPanel().addButtonActionListener(l);  buttonListeners.add(l);}  }
class C{  protected SysexMessage(byte[] data){  super(data);}  }
class C{  public boolean isTrustedProvider(String realm,String entityId,String trustedEntityId) throws SAML2MetaException {  boolean result=false;  SPSSOConfigElement spconfig=getSPSSOConfig(realm,entityId);  if (spconfig != null) {    result=isSameCircleOfTrust(spconfig,realm,trustedEntityId);  }  if (result) {    return true;  }  IDPSSOConfigElement idpconfig=getIDPSSOConfig(realm,entityId);  if (idpconfig != null) {    return (isSameCircleOfTrust(idpconfig,realm,trustedEntityId));  }  return false;}  }
class C{  public void runTest() throws Throwable {  Document doc;  String documentValue;  doc=(Document)load("hc_staff",false);  documentValue=doc.getNodeValue();  assertNull("documentNodeValue",documentValue);}  }
class C{  public void testAutomaticDialogNonEnabledRaceCondition() throws Exception {  try {    shootist=new Shootist(6050,5070,"off",false);    shootist.setCreateDialogAfterRequest(true);    SipProvider shootistProvider=shootist.createSipProvider();    shootistProvider.addSipListener(shootist);    boolean sendRinging=true;    forkCount=1;    for (int i=0; i < forkCount; i++) {      Shootme shootme=new Shootme(5080 + i,sendRinging,4000 + (500 * i),4000 + (500 * i));      sendRinging=true;      SipProvider shootmeProvider=shootme.createProvider();      shootmeProvider.addSipListener(shootme);      this.shootme.add(shootme);    }    this.proxy=new Proxy(5070,forkCount);    SipProvider provider=proxy.createSipProvider();    provider.addSipListener(proxy);    logger.debug("setup completed");    this.shootist.sendInvite(0);    Thread.sleep(35000);    this.shootist.checkState();    int ackCount=0;    for (    Shootme shootme : this.shootme) {      if (shootme.isAckSeen()) {        ackCount++;      }    }    assertEquals("ACK count must be exactly 0",0,ackCount);  }  finally {    this.shootist.stop();    for (    Shootme shootme : this.shootme) {      shootme.stop();    }    this.proxy.stop();  }}  }
class C{  public static void printWrappedText(final PrintStream stream,final LocalizableMessage message){  printWrappedText(stream,message != null ? message.toString() : null);}  }
class C{  public ConcurrentModificationException(String message,Throwable cause){  super(message,cause);}  }
class C{  public PrivilegeEvaluatorContext(String realm,String resourceName,String applicationName){  this.realm=realm;  this.resourceName=resourceName;  this.applicationName=applicationName;}  }
class C{  public ProtocolException(String message,Throwable cause){  super(message,cause);}  }
class C{  @DataProvider(name="v6Matches") public Object[][] v6MatchData(){  return new Object[][]{{"12AB:0000:0000:CD30:0000:0000:0000:0000"},{"12AB::CD30:0:0:0:0"},{"12ab:0:0:cd30::"}};}  }
class C{  public boolean handleFederationTermination(HttpServletRequest request,HttpServletResponse response,Object ssoToken){  FSUtils.debug.message("Entered FSFedTerminationHandler::handleFederationTermination");  this.request=request;  this.locale=FSServiceUtils.getLocale(request);  this.response=response;  this.ssoToken=ssoToken;  setTerminationURL();  if (managerInst == null) {    FSUtils.debug.error("FSSPFedTerminationHandler " + "Account Manager instance is null");    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSSPFedTerminationHandler::handleFederationTermination" + "failed to get Account Manager instance");    }    FSServiceUtils.returnLocallyAfterOperation(response,termination_done_url,false,IFSConstants.TERMINATION_SUCCESS,IFSConstants.TERMINATION_FAILURE);    return false;  }  try {    this.userID=SessionManager.getProvider().getPrincipalName(ssoToken);  } catch (  SessionException e) {    FSUtils.debug.error("FSFedTerminationHandler::handleFederationTermination:",e);    LogUtil.error(Level.INFO,LogUtil.USER_NOT_FOUND,null,ssoToken);    return false;  }  boolean bStatus=updateAccountInformation(null);  FSUtils.debug.message("After updateAccountInformation");  if (!bStatus) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSSPFedTerminationHandler::handleFederationTermination " + "Federation Termination failed locally. Cannot update " + "account");    }    String[] data={userID};    LogUtil.error(Level.INFO,LogUtil.TERMINATION_FAILED,data,ssoToken);    FSServiceUtils.returnLocallyAfterOperation(response,termination_done_url,false,IFSConstants.TERMINATION_SUCCESS,IFSConstants.TERMINATION_FAILURE);    return false;  }  FSUtils.debug.message("Status of local update true");  String[] data={userID};  LogUtil.access(Level.INFO,LogUtil.TERMINATION_SUCCESS,data,ssoToken);  resetFederateCookie();  boolean bRemoteStatus=doFederationTermination(request,response,acctInfo);  return bRemoteStatus;}  }
class C{  private boolean unixCryptPasswordMatches(ByteSequence plaintextPassword,ByteSequence storedPassword){  byte[] plaintextPasswordBytes=null;  ByteString userPWDigestBytes;  try {    plaintextPasswordBytes=plaintextPassword.toByteArray();    byte[] salt=storedPassword.copyTo(new byte[2]);    userPWDigestBytes=ByteString.wrap(crypt.crypt(plaintextPasswordBytes,salt));  } catch (  Exception e) {    return false;  } finally {    if (plaintextPasswordBytes != null) {      Arrays.fill(plaintextPasswordBytes,(byte)0);    }  }  return userPWDigestBytes.equals(storedPassword);}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  retrieveCommonProperties();  IDFFModel model=(IDFFModel)getModel();  try {    CCAddRemove addRemoveList=(CCAddRemove)getChild(model.ATTR_AFFILIATE_MEMBERS);    addRemoveList.restoreStateData();    CCAddRemoveModel addRemoveModel=(CCAddRemoveModel)addRemoveList.getModel();    Set members=new HashSet(getSelectedValues(addRemoveModel));    AMPropertySheet ps=(AMPropertySheet)getChild(PROPERTY_ATTRIBUTES);    Map orig=model.getAffiliateProfileAttributeValues(realm,entityName);    Map values=ps.getAttributeValues(orig,false,model);    model.updateAffiliateProfile(realm,entityName,values,members);    setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","idff.entityDescriptor.Affiliate.updated");  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());    debug.warning("IDFFAffiliateViewBean.handleButton1Request",e);  }  forwardTo();}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  if (null != m_argVec) {    int nArgs=m_argVec.size();    for (int i=0; i < nArgs; i++) {      Expression arg=(Expression)m_argVec.elementAt(i);      arg.fixupVariables(vars,globalsSize);    }  }}  }
class C{  public boolean areTablesSet(){  return (qTables != null);}  }
class C{  ReplicationMsg receive(boolean reconnectToTheBestRS,boolean reconnectOnFailure,boolean returnOnTopoChange) throws SocketTimeoutException {  while (!shutdown) {    ConnectedRS rs=connectedRS.get();    if (!rs.isConnected()) {      if (reconnectOnFailure) {        reStart(null,true);        continue;      } else {        break;      }    }    final int serverId=getServerId();    final DN baseDN=getBaseDN();    final int previousRsServerID=rs.getServerId();    try {      ReplicationMsg msg=rs.session.receive();      if (msg instanceof UpdateMsg) {synchronized (this) {          rcvWindow--;        }      }      if (msg instanceof WindowMsg) {        final WindowMsg windowMsg=(WindowMsg)msg;        sendWindow.release(windowMsg.getNumAck());      } else       if (msg instanceof TopologyMsg) {        final TopologyMsg topoMsg=(TopologyMsg)msg;        receiveTopo(topoMsg,getRsServerId());        if (reconnectToTheBestRS) {          mustRunBestServerCheckingAlgorithm=0;        }        if (returnOnTopoChange) {          return msg;        }      } else       if (msg instanceof StopMsg) {        logger.warn(WARN_REPLICATION_SERVER_PROPERLY_DISCONNECTED,previousRsServerID,rs.replicationServer,serverId,baseDN);        reStart(rs.session,true);      } else       if (msg instanceof MonitorMsg) {        MonitorMsg monitorMsg=(MonitorMsg)msg;        final Map<Integer,ServerState> newReplicaStates=new HashMap<>();        for (        int srvId : toIterable(monitorMsg.ldapIterator())) {          newReplicaStates.put(srvId,monitorMsg.getLDAPServerState(srvId));        }        replicaStates=newReplicaStates;synchronized (monitorResponse) {          monitorResponse.set(true);          monitorResponse.notify();        }        Map<Integer,ReplicationServerInfo> rsInfos=topology.get().rsInfos;        for (        int srvId : toIterable(monitorMsg.rsIterator())) {          final ReplicationServerInfo rsInfo=rsInfos.get(srvId);          if (rsInfo != null) {            rsInfo.update(monitorMsg.getRSServerState(srvId));          }        }        if (reconnectToTheBestRS) {          mustRunBestServerCheckingAlgorithm++;          if (mustRunBestServerCheckingAlgorithm == 2) {            final RSEvaluations evals=computeBestReplicationServer(false,previousRsServerID,state,rsInfos,serverId,getGroupId(),getGenerationID());            final ReplicationServerInfo bestServerInfo=evals.getBestRS();            if (previousRsServerID != -1 && (bestServerInfo == null || bestServerInfo.getServerId() != previousRsServerID)) {              LocalizableMessage message;              if (bestServerInfo == null) {                message=NOTE_LOAD_BALANCE_REPLICATION_SERVER.get(serverId,previousRsServerID,rs.replicationServer,baseDN);              } else {                final int bestRsServerId=bestServerInfo.getServerId();                message=NOTE_NEW_BEST_REPLICATION_SERVER.get(serverId,previousRsServerID,rs.replicationServer,bestRsServerId,baseDN,evals.getEvaluation(previousRsServerID),evals.getEvaluation(bestRsServerId));              }              logger.info(message);              if (logger.isTraceEnabled()) {                debugInfo("best replication servers evaluation results: " + evals);              }              reStart(true);            }            mustRunBestServerCheckingAlgorithm=0;          }        }      } else {        return msg;      }    } catch (    SocketTimeoutException e) {      throw e;    }catch (    Exception e) {      logger.traceException(e);      if (!shutdown) {        if (rs.session == null || !rs.session.closeInitiated()) {          logger.error(WARN_REPLICATION_SERVER_BADLY_DISCONNECTED,serverId,baseDN,previousRsServerID,rs.replicationServer);        }        if (!reconnectOnFailure) {          break;        }        reStart(rs.session,true);      }    }  }  return null;}  }
class C{  public void serialize(Node node) throws IOException {  try {    TreeWalker walker=new TreeWalker(this);    walker.traverse(node);  } catch (  org.xml.sax.SAXException se) {    throw new WrappedRuntimeException(se);  }}  }
class C{  @Override public int hashCode(){  int hashCode=31 + rtype.hashCode();  for (  Class<?> ptype : ptypes)   hashCode=31 * hashCode + ptype.hashCode();  return hashCode;}  }
class C{  public boolean keepProcessingParent(){  return keepProcessingParent;}  }
class C{  public static IOFileFilter sizeFileFilter(long threshold,boolean acceptLarger){  return new SizeFileFilter(threshold,acceptLarger);}  }
class C{  public static void displayInformationMessage(JFrame parent,LocalizableMessage msg,LocalizableMessage title){  JOptionPane.showMessageDialog(parent,wrapMsg(String.valueOf(msg),100),String.valueOf(title),JOptionPane.INFORMATION_MESSAGE);}  }
class C{  public InvalidClientMetadata(String msg){  super(400,"invalid_client_metadata",msg);}  }
class C{  InitializeTargetMsg(byte[] in,short version) throws DataFormatException {  final ByteArrayScanner scanner=new ByteArrayScanner(in);  final byte msgType=scanner.nextByte();  if (msgType != MSG_TYPE_INITIALIZE_TARGET) {    throw new DataFormatException("input is not a valid InitializeDestinationMessage");  }  destination=scanner.nextIntUTF8();  baseDN=scanner.nextDN();  senderID=scanner.nextIntUTF8();  requestorID=scanner.nextIntUTF8();  entryCount=scanner.nextLongUTF8();  if (version >= ProtocolVersion.REPLICATION_PROTOCOL_V4) {    initWindow=scanner.nextIntUTF8();  }}  }
class C{  public static void redirectToXui(HttpServletRequest request,String xuiHash){  String deploymentUri=InjectorHolder.getInstance(BaseURLProviderFactory.class).get(DEFAULT_REALM).getRootURL(request);  String redirect=MessageFormat.format(XUI_CONSOLE_BASE_PAGE,deploymentUri,xuiHash);  RequestContext rc=RequestManager.getRequestContext();  try {    rc.getResponse().sendRedirect(redirect);    throw new CompleteRequestException();  } catch (  IOException e) {  }}  }
class C{  public Set canBeMemberOf(){  Set results=(Set)IdUtils.typesCanBeMemberOf.get(getName());  return (results == null) ? Collections.EMPTY_SET : results;}  }
class C{  private List<String> readLines(final BufferedReader reader) throws IOException {  final List<String> lines=new ArrayList<>();  String line;  for (int lineNumber=1; (line=reader.readLine()) != null; lineNumber++) {    if (line.startsWith(" ")) {      final int lastLineIndex=lines.size() - 1;      final String previousLine=lines.get(lastLineIndex);      if (lines.isEmpty() || previousLine.isEmpty()) {        throw DecodeException.fatalError(ERR_TEMPLATE_FILE_INVALID_LEADING_SPACE.get(lineNumber,line));      }      lines.set(lastLineIndex,previousLine + line.substring(1));    } else {      lines.add(line);    }  }  return lines;}  }
class C{  private ReplicationServer createReplicationServer(int serverId,int groupId,long assuredTimeout,String testCase,int nbRS) throws ConfigException {  int port=getRsPort(serverId);  SortedSet<String> otherRsUrls=generateOtherReplicationServerUrls(port,nbRS);  String dir=testName + serverId + testCase+ "Db";  ReplServerFakeConfiguration conf=new ReplServerFakeConfiguration(port,dir,0,serverId,0,100,otherRsUrls,groupId,assuredTimeout,5000);  conf.setMonitoringPeriod(0L);  return new ReplicationServer(conf);}  }
class C{  public void deleteDiscoEntries(Integer[] array){  for (int i=(array.length - 1); i >= 0; --i) {    discoData.remove(array[i].intValue());  }}  }
class C{  public List<Contact> find(){  List<Long> ids=new ArrayList<>();  if (innerQueries != null) {    for (    Query query : innerQueries) {      ids.addAll(query.findInner());    }  } else {    if (mimeWhere.isEmpty()) {      return find(null);    }    for (    Map.Entry<String,Where> entry : mimeWhere.entrySet()) {      ids=findIds(ids,entry.getKey(),entry.getValue());    }  }  return find(ids);}  }
class C{  public BigInteger(int signum,byte[] magnitude){  this.mag=stripLeadingZeroBytes(magnitude);  if (signum < -1 || signum > 1)   throw (new NumberFormatException("Invalid signum value"));  if (this.mag.length == 0) {    this.signum=0;  } else {    if (signum == 0)     throw (new NumberFormatException("signum-magnitude mismatch"));    this.signum=signum;  }  if (mag.length >= MAX_MAG_LENGTH) {    checkRange();  }}  }
class C{  public void removeWrapper(String jspUri){  jsps.remove(jspUri);}  }
class C{  @Override public <T>java.util.List<T> dynamicQuery(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery){  return _fooLocalService.dynamicQuery(dynamicQuery);}  }
class C{  public BAD_CONTEXT(String s,int minor,CompletionStatus completed){  super(s,minor,completed);}  }
class C{  public int code(){  return code;}  }
class C{  public static byte[] readToEnd(InputStream inputStream) throws IOException {  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();  IOUtils.copyLarge(inputStream,outputStream);  return outputStream.toByteArray();}  }
class C{  void initComposeState(){  m_composeState=new ComposeState();}  }
class C{  public synchronized boolean isAccessToUnderlyingConnectionAllowed(){  return this.accessToUnderlyingConnectionAllowed;}  }
class C{  public AuthenticationInfoParser(String authenticationInfo){  super(authenticationInfo);}  }
class C{  public X509Name(Vector oids,Vector values,X509NameEntryConverter converter){  this.converter=converter;  if (oids.size() != values.size()) {    throw new IllegalArgumentException("oids vector must be same length as values.");  }  for (int i=0; i < oids.size(); i++) {    this.ordering.addElement(oids.elementAt(i));    this.values.addElement(values.elementAt(i));    this.added.addElement(FALSE);  }}  }
class C{  @Override public String toString(){  return buffer.toString();}  }
class C{  public boolean equalsIgnoreCase(String anotherString){  return (m_length == anotherString.length()) ? str().equalsIgnoreCase(anotherString) : false;}  }
class C{  public WSFederationMetaException(String errorCode,Object[] args){  super(WSFederationConstants.BUNDLE_NAME,errorCode,args);}  }
class C{  protected HttpURLConnection createPut(String uri) throws IOException {  return createConnection(uri,METHOD_PUT);}  }
class C{  void addFilter(ApplicationFilterConfig filterConfig){  for (  ApplicationFilterConfig filter : filters)   if (filter == filterConfig)   return;  if (n == filters.length) {    ApplicationFilterConfig[] newFilters=new ApplicationFilterConfig[n + INCREMENT];    System.arraycopy(filters,0,newFilters,0,n);    filters=newFilters;  }  filters[n++]=filterConfig;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.GoverningAgreementRefType createGoverningAgreementRefType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.GoverningAgreementRefTypeImpl();}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.DigestValueElement createDigestValueElement(byte[] value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.DigestValueElementImpl(value);}  }
class C{  public boolean dependsOn(String backupID){  return dependencies.contains(backupID);}  }
class C{  public CMSSignedData generate(String eContentType,CMSProcessable content,boolean encapsulate,String sigProvider,boolean addDefaultAttributes) throws NoSuchAlgorithmException, NoSuchProviderException, CMSException {  return generate(eContentType,content,encapsulate,CMSUtils.getProvider(sigProvider),addDefaultAttributes);}  }
class C{  public Object clone(){  try {    Class<?> clazz=this.getClass();    Constructor<?> cons=clazz.getConstructor((Class[])null);    SIPHeaderList<HDR> retval=(SIPHeaderList<HDR>)cons.newInstance((Object[])null);    retval.headerName=this.headerName;    retval.myClass=this.myClass;    return retval.clonehlist(this.hlist);  } catch (  Exception ex) {    throw new RuntimeException("Could not clone!",ex);  }}  }
class C{  public void incrementForTimestamp(final long timestamp){  long index=getIndexForTimestamp(timestamp);  if (isWithinWindow(index)) {    AtomicLong rate=window.get(index);    if (rate == null) {      fillInWindow(index - 1);      rate=new AtomicLong(0);      AtomicLong previousValue=window.putIfAbsent(index,rate);      if (previousValue == null) {        window.headMap(window.lastKey() - size,true).clear();      } else {        rate=previousValue;      }    }    rate.incrementAndGet();  }}  }
class C{  public static int sizeOfString(String string){  if (string == null) {    return 0;  }  return 4 + string.length() * 2;}  }
class C{  @Override public void unsubscribe(){  if (null != session) {    try {      session.close();      session=null;    } catch (    JMSException e) {      logger.error("Failure to close JMS session",e);    }  }  if (null != connection) {    try {      connection.close();      connection=null;    } catch (    JMSException e) {      logger.error("Failure to close JMS connection",e);    }  }}  }
class C{  public synchronized void error(String msg,Exception ex,int code){  if (reported) {    return;  }  reported=true;  String text="java.util.logging.ErrorManager: " + code;  if (msg != null) {    text=text + ": " + msg;  }  System.err.println(text);  if (ex != null) {    ex.printStackTrace();  }}  }
class C{  private static boolean isNullOrEmpty(final String s){  return s == null || s.isEmpty();}  }
class C{  public synchronized ConfigurationFramework initialize(final String installPath,final String instancePath,final ClassLoader parent) throws ConfigException {  if (loader != null) {    throw new IllegalStateException("configuration framework already initialized.");  }  this.installPath=installPath != null ? installPath : System.getenv("INSTALL_ROOT");  if (instancePath != null) {    this.instancePath=instancePath;  } else {    String instanceRoot=System.getenv("INSTANCE_ROOT");    this.instancePath=instanceRoot != null ? instanceRoot : this.installPath;  }  this.parent=parent;  initialize0();  return this;}  }
class C{  public void modify(Principal principal,Guid guid,Collection<Modification> modifications) throws UMSException {  String id=guid.getDn();  ResultCode errorCode;  try {    ModifyRequest request=LDAPRequests.newModifyRequest(id);    for (    Modification modification : modifications) {      request.addModification(modification);    }    int retry=0;    while (retry <= connNumRetry) {      if (debug.messageEnabled()) {        debug.message("DataLayer.modify retry: " + retry);      }      try (Connection conn=getConnection(principal)){        conn.modify(request);        return;      } catch (      LdapException e) {        if (!retryErrorCodes.contains("" + e.getResult().getResultCode().toString()) || retry == connNumRetry) {          throw e;        }        retry++;        try {          Thread.sleep(connRetryInterval);        } catch (        InterruptedException ex) {        }      }    }  } catch (  LdapException e) {    if (debug.warningEnabled()) {      debug.warning("Exception in DataLayer.modify for DN: " + id,e);    }    errorCode=e.getResult().getResultCode();    if (ResultCode.NO_SUCH_OBJECT.equals(errorCode)) {      throw new EntryNotFoundException(id,e);    } else     if (ResultCode.INSUFFICIENT_ACCESS_RIGHTS.equals(errorCode)) {      throw new AccessRightsException(id,e);    } else {      throw new UMSException(id,e);    }  }}  }
class C{  public boolean equals(Object object){  return (object != null && object instanceof URISyntax && this.uri.equals(((URISyntax)object).uri));}  }
class C{  ArrayList parseAttributes(String attributeString) throws Exception {  ArrayList result=null;  if (attributeString != null && attributeString.trim().length() > 0) {    result=new ArrayList();    boolean inQuotes=false;    boolean inName=true;    boolean inValue=false;    StringBuffer buff=new StringBuffer();    String name=null;    String value=null;    for (int i=0; i < attributeString.length(); i++) {      char ch=attributeString.charAt(i);      if (ch == '"') {        if ((buff.length() != 0) && buff.toString().endsWith("\\")) {          buff.append(ch);          continue;        } else {          inQuotes=!inQuotes;          buff.append(ch);          continue;        }      }      if (inQuotes) {        buff.append(ch);        continue;      }      if (ch == ' ') {        if (inValue) {          value=buff.toString().trim();          buff.delete(0,buff.length());          if (name == null || name.trim().length() == 0) {            throw new Exception("Failed to parse attribute: " + attributeString);          }          result.add(new XMLElementAttribute(name,value));          name=null;          value=null;          inValue=false;          inName=true;          continue;        }        if (inName) {          continue;        }      }      if (ch == '=') {        if (inName) {          name=buff.toString();          buff.delete(0,buff.length());          inName=false;          inValue=true;          continue;        }      }      buff.append(ch);    }    if (buff.length() > 0) {      if (!inValue) {        throw new Exception("Failed to parse attributes: " + attributeString);      }      if (name == null || name.trim().length() == 0) {        throw new Exception("Failed to parse attribute: " + attributeString);      }      value=buff.toString().trim();      result.add(new XMLElementAttribute(name,value));    }  }  return result;}  }
class C{  private void openAndRegisterEntryContainers(WriteableTransaction txn,Set<DN> baseDNs,AccessMode accessMode) throws StorageRuntimeException, InitializationException, ConfigException {  EntryID highestID=null;  for (  DN baseDN : baseDNs) {    EntryContainer ec=openEntryContainer(baseDN,txn,accessMode);    EntryID id=ec.getHighestEntryID(txn);    registerEntryContainer(baseDN,ec);    if (highestID == null || id.compareTo(highestID) > 0) {      highestID=id;    }  }  nextEntryID=new AtomicLong(highestID.longValue() + 1);}  }
class C{  String handleGetRestrictedTokenIdRemotely(SessionID masterSid,TokenRestriction restriction){  try {    return sessionOperationStrategy.getOperation(masterSid).getRestrictedTokenId(masterSid,restriction);  } catch (  Exception ex) {    sessionDebug.error("Failed to create restricted token remotely",ex);  }  return null;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  Node refChild;  Node newChild;  Node child;  int length;  String childName;  Node insertedNode;  java.util.List expectedWhitespace=new java.util.ArrayList();  expectedWhitespace.add("#text");  expectedWhitespace.add("#text");  expectedWhitespace.add("name");  expectedWhitespace.add("#text");  expectedWhitespace.add("position");  expectedWhitespace.add("#text");  expectedWhitespace.add("salary");  expectedWhitespace.add("#text");  expectedWhitespace.add("gender");  expectedWhitespace.add("#text");  expectedWhitespace.add("employeeId");  expectedWhitespace.add("address");  expectedWhitespace.add("#text");  java.util.List expectedNoWhitespace=new java.util.ArrayList();  expectedNoWhitespace.add("name");  expectedNoWhitespace.add("position");  expectedNoWhitespace.add("salary");  expectedNoWhitespace.add("gender");  expectedNoWhitespace.add("employeeId");  expectedNoWhitespace.add("address");  java.util.List expected=new java.util.ArrayList();  java.util.List result=new java.util.ArrayList();  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  length=(int)childList.getLength();  if (equals(6,length)) {    expected=expectedNoWhitespace;    refChild=childList.item(5);    newChild=childList.item(0);  } else {    expected=expectedWhitespace;    refChild=childList.item(11);    newChild=childList.item(1);  }  insertedNode=employeeNode.insertBefore(newChild,refChild);  for (int indexN100DD=0; indexN100DD < childList.getLength(); indexN100DD++) {    child=(Node)childList.item(indexN100DD);    childName=child.getNodeName();    result.add(childName);  }  assertEquals("childNames",expected,result);}  }
class C{  private void stopChangelog() throws Exception {  ReplicationBroker[] brokers1And2=null;  try {    debugInfo("Starting stopChangelog");    shutdown();    configure();    brokers1And2=createReplicationBrokers1And2();    newClient();    newClientWithFirstChanges();    newClientWithChangefromServer1();    newClientWithChangefromServer2();    debugInfo("Ending stopChangelog");  }  finally {    stop(brokers1And2);  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.AttributeExtensibleURI createAttributeExtensibleURI() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.AttributeExtensibleURIImpl();}  }
class C{  public static void main(String[] argv){  boolean bBootstrapped=true;  importSvcCmd=(argv.length > 0) && argv[0].equals(IMPORT_SVC_CMD);  if (importSvcCmd) {    try {      initSys=new InitializeSystem();    } catch (    FileNotFoundException ex) {      System.err.println("Cannot bootstrap the system" + ex.getMessage());      System.exit(1);    }catch (    IOException ex) {      System.err.println("Cannot bootstrap the system" + ex.getMessage());    }catch (    LDAPServiceException ex) {      System.err.println("Cannot bootstrap the system" + ex.getMessage());    }  } else {    try {      InjectorConfiguration.setGuiceModuleLoader(new CliGuiceModuleLoader());      final Debug debug=Debug.getInstance("amSecurity");      debug.setDebug(Debug.ERROR);      Bootstrap.load();      AdminTokenAction.getInstance().authenticationInitialized();      System.setProperty("java.util.logging.config.class","com.sun.identity.log.s1is.LogConfigReader");      System.setProperty("java.util.logging.manager","com.sun.identity.log.LogManager");    } catch (    ConfiguratorException ex) {      bBootstrapped=false;      if ((argv.length > 0) && !argv[0].equals(CLIConstants.PREFIX_ARGUMENT_LONG + CLIConstants.ARGUMENT_VERSION) && !argv[0].equals(CLIConstants.PREFIX_ARGUMENT_SHORT + CLIConstants.SHORT_ARGUMENT_VERSION)) {        System.err.println(ex.getL10NMessage(Locale.getDefault()));        System.exit(1);      }    }catch (    Exception e) {      System.err.println("Cannot bootstrap the system" + e.getMessage());      System.exit(1);    }    if (bBootstrapped) {      if (VersionCheck.isVersionValid() == 1) {        System.exit(1);      }    }  }  if (bBootstrapped) {    debugger=Debug.getInstance("amCLI");    getIsInstallTime();    Crypt.checkCaller();  }  new CommandManager(argv);}  }
class C{  @Override public void close(){  LogManager.getLogManager().checkAccess();  close(true);}  }
class C{  public org.omg.CORBA.TypeCode _type(){  return ORB.init().get_primitive_tc(TCKind.tk_short);}  }
class C{  private void createResultContentHandler(Result outputTarget) throws TransformerException {  if (outputTarget instanceof SAXResult) {    SAXResult saxResult=(SAXResult)outputTarget;    m_resultContentHandler=saxResult.getHandler();    m_resultLexicalHandler=saxResult.getLexicalHandler();    if (m_resultContentHandler instanceof Serializer) {      m_serializer=(Serializer)m_resultContentHandler;    }  } else   if (outputTarget instanceof DOMResult) {    DOMResult domResult=(DOMResult)outputTarget;    Node outputNode=domResult.getNode();    Node nextSibling=domResult.getNextSibling();    Document doc;    short type;    if (null != outputNode) {      type=outputNode.getNodeType();      doc=(Node.DOCUMENT_NODE == type) ? (Document)outputNode : outputNode.getOwnerDocument();    } else {      try {        DocumentBuilderFactory dbf=DocumentBuilderFactory.newInstance();        dbf.setNamespaceAware(true);        if (m_isSecureProcessing) {          try {            dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING,true);          } catch (          ParserConfigurationException pce) {          }        }        DocumentBuilder db=dbf.newDocumentBuilder();        doc=db.newDocument();      } catch (      ParserConfigurationException pce) {        throw new TransformerException(pce);      }      outputNode=doc;      type=outputNode.getNodeType();      ((DOMResult)outputTarget).setNode(outputNode);    }    DOMBuilder domBuilder=(Node.DOCUMENT_FRAGMENT_NODE == type) ? new DOMBuilder(doc,(DocumentFragment)outputNode) : new DOMBuilder(doc,outputNode);    if (nextSibling != null)     domBuilder.setNextSibling(nextSibling);    m_resultContentHandler=domBuilder;    m_resultLexicalHandler=domBuilder;  } else   if (outputTarget instanceof StreamResult) {    StreamResult sresult=(StreamResult)outputTarget;    try {      Serializer serializer=SerializerFactory.getSerializer(m_outputFormat.getProperties());      m_serializer=serializer;      if (null != sresult.getWriter())       serializer.setWriter(sresult.getWriter()); else       if (null != sresult.getOutputStream())       serializer.setOutputStream(sresult.getOutputStream()); else       if (null != sresult.getSystemId()) {        String fileURL=sresult.getSystemId();        if (fileURL.startsWith("file:///")) {          if (fileURL.substring(8).indexOf(":") > 0) {            fileURL=fileURL.substring(8);          } else {            fileURL=fileURL.substring(7);          }        } else         if (fileURL.startsWith("file:/")) {          if (fileURL.substring(6).indexOf(":") > 0) {            fileURL=fileURL.substring(6);          } else {            fileURL=fileURL.substring(5);          }        }        m_outputStream=new java.io.FileOutputStream(fileURL);        serializer.setOutputStream(m_outputStream);      } else       throw new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_NO_OUTPUT_SPECIFIED,null));      m_resultContentHandler=serializer.asContentHandler();    } catch (    IOException ioe) {      throw new TransformerException(ioe);    }  } else {    throw new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_CANNOT_TRANSFORM_TO_RESULT_TYPE,new Object[]{outputTarget.getClass().getName()}));  }  if (m_resultContentHandler instanceof DTDHandler)   m_resultDTDHandler=(DTDHandler)m_resultContentHandler;  if (m_resultContentHandler instanceof DeclHandler)   m_resultDeclHandler=(DeclHandler)m_resultContentHandler;  if (m_resultContentHandler instanceof LexicalHandler)   m_resultLexicalHandler=(LexicalHandler)m_resultContentHandler;}  }
class C{  public CopiesSupported(int member){  super(member);  if (member < 1) {    throw new IllegalArgumentException("Copies value < 1 specified");  }}  }
class C{  @SuppressWarnings({"unchecked","cast"}) void resize(int newCapacity){  Entry<K>[] oldTable=getTable();  int oldCapacity=oldTable.length;  if (oldCapacity == MAXIMUM_CAPACITY) {    threshold=Integer.MAX_VALUE;    return;  }  Entry<K>[] newTable=(Entry<K>[])new Entry[newCapacity];  transfer(oldTable,newTable);  table=newTable;  if (size >= threshold / 2) {    threshold=(int)(newCapacity * loadFactor);  } else {    expungeStaleEntries();    transfer(newTable,oldTable);    table=oldTable;  }}  }
class C{  public void paintTextFieldBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.QueryType.QueryItemType createQueryTypeQueryItemType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.QueryTypeImpl.QueryItemTypeImpl();}  }
class C{  public static String[][] read(String logname,String logtype,String timeStamp,LogQuery logQuery,Object userCrdential) throws IOException, NoSuchFieldException, IllegalArgumentException, RuntimeException, Exception {  String mainFileName=new String();  setLoggerName(logname,logtype);  mainFileName=loggerName;  if (timeStamp != null) {    if (mainFileName.length() == 0) {      return null;    }    mainFileName+="." + timeStamp;  }  queryResult=read(mainFileName,logQuery,userCrdential);  return queryResult;}  }
class C{  public int addAci(Entry entry,boolean hasAci,boolean hasGlobalAci,List<LocalizableMessage> failedACIMsgs){  lock.writeLock().lock();  try {    int validAcis=0;    if (hasGlobalAci && entry.getName().equals(configDN)) {      List<Attribute> attributeList=entry.getAllAttributes(globalAciType);      validAcis=addAciAttributeList(aciList,DN.rootDN(),configDN,attributeList,failedACIMsgs);    }    if (hasAci) {      List<Attribute> attributeList=entry.getAllAttributes(aciType);      validAcis+=addAciAttributeList(aciList,entry.getName(),configDN,attributeList,failedACIMsgs);    }    return validAcis;  }  finally {    lock.writeLock().unlock();  }}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener listener){  if (listener == null) {    return;  }  if (listener instanceof PropertyChangeListenerProxy) {    PropertyChangeListenerProxy proxy=(PropertyChangeListenerProxy)listener;    removePropertyChangeListener(proxy.getPropertyName(),proxy.getListener());  } else {    this.map.remove(null,listener);  }}  }
class C{  public String toString(){  return "InstanceOf " + classNameValue.toString();}  }
class C{  public FAMRecord(String svc,String op,String pKey,long eDate,String secKey,int st,String ax,byte[] serializedInternalSessionBlob){  this.setService(svc);  this.setOperation(op);  this.setPrimaryKey(pKey);  this.setExpDate(eDate);  this.setSecondaryKey(secKey);  this.setState(st);  this.setAuxData(ax);  this.setSerializedInternalSessionBlob(serializedInternalSessionBlob);}  }
class C{  @Override public void startInternal() throws Exception {  if (!running) {    running=true;    paused=false;    processorCache=new SynchronizedStack<>(SynchronizedStack.DEFAULT_SIZE,socketProperties.getProcessorCache());    if (getExecutor() == null) {      createExecutor();    }    initializeConnectionLatch();    poller=new Poller();    poller.init();    Thread pollerThread=new Thread(poller,getName() + "-Poller");    pollerThread.setPriority(threadPriority);    pollerThread.setDaemon(true);    pollerThread.start();    if (getUseSendfile()) {      sendfile=new Sendfile();      sendfile.init();      Thread sendfileThread=new Thread(sendfile,getName() + "-Sendfile");      sendfileThread.setPriority(threadPriority);      sendfileThread.setDaemon(true);      sendfileThread.start();    }    startAcceptorThreads();  }}  }
class C{  public static DN makeChildDN(DN parentDN,AttributeType rdnAttrType,String rdnStringValue){  ByteString attrValue=ByteString.valueOfUtf8(rdnStringValue);  return parentDN.child(new RDN(rdnAttrType,attrValue));}  }
