class C{  public Iterator visibleItems(String group){  return items(group,VisiblePredicate.TRUE);}  }
class C{  @Utility public boolean isSimilar(ItemStack stack){  if (stack == null) {    return false;  }  if (stack == this) {    return true;  }  return getTypeId() == stack.getTypeId() && getDurability() == stack.getDurability() && hasItemMeta() == stack.hasItemMeta() && (hasItemMeta() ? Bukkit.getItemFactory().equals(getItemMeta(),stack.getItemMeta()) : true);}  }
class C{  @Override public Writer append(char value){  builder.append(value);  return this;}  }
class C{  @Override public boolean dispatch(boolean complete) throws IOException, XNIException {  try {    boolean again;    do {      again=false;switch (fScannerState) {case SCANNER_STATE_PROLOG:{          fEntityScanner.skipSpaces();          if (fEntityScanner.skipChar('<')) {            setScannerState(SCANNER_STATE_START_OF_MARKUP);            again=true;          } else           if (fEntityScanner.skipChar('&')) {            setScannerState(SCANNER_STATE_REFERENCE);            again=true;          } else {            setScannerState(SCANNER_STATE_CONTENT);            again=true;          }          break;        }case SCANNER_STATE_START_OF_MARKUP:{        fMarkupDepth++;        if (fEntityScanner.skipChar('!')) {          if (fEntityScanner.skipChar('-')) {            if (!fEntityScanner.skipChar('-')) {              reportFatalError("InvalidCommentStart",null);            }            setScannerState(SCANNER_STATE_COMMENT);            again=true;          } else           if (fEntityScanner.skipString("DOCTYPE")) {            setScannerState(SCANNER_STATE_DOCTYPE);            again=true;          } else {            reportFatalError("MarkupNotRecognizedInProlog",null);          }        } else         if (isValidNameStartChar(fEntityScanner.peekChar())) {          setScannerState(SCANNER_STATE_ROOT_ELEMENT);          setDispatcher(fContentDispatcher);          return true;        } else         if (fEntityScanner.skipChar('?')) {          setScannerState(SCANNER_STATE_PI);          again=true;        } else         if (isValidNameStartHighSurrogate(fEntityScanner.peekChar())) {          setScannerState(SCANNER_STATE_ROOT_ELEMENT);          setDispatcher(fContentDispatcher);          return true;        } else {          reportFatalError("MarkupNotRecognizedInProlog",null);        }        break;      }case SCANNER_STATE_COMMENT:{      scanComment();      setScannerState(SCANNER_STATE_PROLOG);      break;    }case SCANNER_STATE_PI:{    scanPI();    setScannerState(SCANNER_STATE_PROLOG);    break;  }case SCANNER_STATE_DOCTYPE:{  if (fDisallowDoctype) {    reportFatalError("DoctypeNotAllowed",null);  }  if (fSeenDoctypeDecl) {    reportFatalError("AlreadySeenDoctype",null);  }  fSeenDoctypeDecl=true;  if (scanDoctypeDecl()) {    setScannerState(SCANNER_STATE_DTD_INTERNAL_DECLS);    setDispatcher(fDTDDispatcher);    return true;  }  if (fDoctypeSystemId != null) {    fIsEntityDeclaredVC=!fStandalone;    if (((fValidation || fLoadExternalDTD) && (fValidationManager == null || !fValidationManager.isCachedDTD()))) {      setScannerState(SCANNER_STATE_DTD_EXTERNAL);      setDispatcher(fDTDDispatcher);      return true;    }  } else   if (fExternalSubsetSource != null) {    fIsEntityDeclaredVC=!fStandalone;    if (((fValidation || fLoadExternalDTD) && (fValidationManager == null || !fValidationManager.isCachedDTD()))) {      fDTDScanner.setInputSource(fExternalSubsetSource);      fExternalSubsetSource=null;      setScannerState(SCANNER_STATE_DTD_EXTERNAL_DECLS);      setDispatcher(fDTDDispatcher);      return true;    }  }  fDTDScanner.setInputSource(null);  setScannerState(SCANNER_STATE_PROLOG);  break;}case SCANNER_STATE_CONTENT:{reportFatalError("ContentIllegalInProlog",null);fEntityScanner.scanChar();}case SCANNER_STATE_REFERENCE:{reportFatalError("ReferenceIllegalInProlog",null);}}} while (complete || again);if (complete) {if (fEntityScanner.scanChar() != '<') {reportFatalError("RootElementRequired",null);}setScannerState(SCANNER_STATE_ROOT_ELEMENT);setDispatcher(fContentDispatcher);}} catch (MalformedByteSequenceException e) {fErrorReporter.reportError(e.getDomain(),e.getKey(),e.getArguments(),XMLErrorReporter.SEVERITY_FATAL_ERROR,e);return false;}catch (CharConversionException e) {fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"CharConversionFailure",null,XMLErrorReporter.SEVERITY_FATAL_ERROR,e);return false;}catch (EOFException e) {reportFatalError("PrematureEOF",null);return false;}return true;}  }
class C{  public void actionPerformed(ActionEvent ev){  Color color=ChooseColorDialog.showChooseColorDialog(getViewer().getFrame(),"Choose label color",null);  if (color != null)   execute("set labelColor=" + color.getRed() + " "+ color.getGreen()+ " "+ color.getBlue()+ ";");}  }
class C{  public String sprintf(Object x) throws IllegalArgumentException {  Enumeration e=vFmt.elements();  ConversionSpecification cs=null;  char c=0;  StringBuilder sb=new StringBuilder();  while (e.hasMoreElements()) {    cs=(ConversionSpecification)e.nextElement();    c=cs.getConversionCharacter();    if (c == '\0')     sb.append(cs.getLiteral()); else     if (c == '%')     sb.append("%"); else {      if (x instanceof Byte)       sb.append(cs.internalsprintf(((Byte)x).byteValue())); else       if (x instanceof Short)       sb.append(cs.internalsprintf(((Short)x).shortValue())); else       if (x instanceof Integer)       sb.append(cs.internalsprintf(((Integer)x).intValue())); else       if (x instanceof Long)       sb.append(cs.internalsprintf(((Long)x).longValue())); else       if (x instanceof Float)       sb.append(cs.internalsprintf(((Float)x).floatValue())); else       if (x instanceof Double)       sb.append(cs.internalsprintf(((Double)x).doubleValue())); else       if (x instanceof Character)       sb.append(cs.internalsprintf(((Character)x).charValue())); else       if (x instanceof String)       sb.append(cs.internalsprintf((String)x)); else       sb.append(cs.internalsprintf(x));    }  }  return sb.toString();}  }
class C{  void bindWith(final Circle circle){  circles.add(circle);}  }
class C{  @Override protected void scanStartElementName() throws IOException, XNIException {  fEntityScanner.scanQName(fElementQName);  fSawSpace=fEntityScanner.skipSpaces();}  }
class C{  public static void fill(Matrix a,double value){  for (int i=0; i < a.rows; i++) {    for (int j=0; j < a.cols; j++) {      a.set(i,j,value);    }  }}  }
class C{  private static void drawRootGuideline(ViewTransform transform,Graphics2D g,ConstraintWidgetContainer root,Guideline guideline,boolean isSelected){  Graphics2D g2=(Graphics2D)g.create();  g2.setStroke(SnapDraw.sThinDashedStroke);  int l=transform.getSwingX(root.getDrawX());  int t=transform.getSwingY(root.getDrawY());  int r=transform.getSwingX(root.getDrawX() + root.getWidth());  int b=transform.getSwingY(root.getDrawY() + root.getHeight());  g.setFont(sFont);  if (guideline.getOrientation() == Guideline.VERTICAL) {    int x=transform.getSwingX(guideline.getDrawX());    g2.drawLine(x,t,x,b);    int offset=2;    int circleSize=GUIDDELINE_ICON_SIZE / 2 + 1;    Shape circle=new Ellipse2D.Float(x - circleSize,t - 2 * circleSize - offset,2 * circleSize,2 * circleSize);    g.fill(circle);    int relative=guideline.getRelativeBehaviour();    if (relative == Guideline.RELATIVE_PERCENT) {      int iconWidth=sGuidelinePercent.getWidth(null);      int iconHeight=sGuidelinePercent.getHeight(null);      g.drawImage(sGuidelinePercent,x - GUIDDELINE_ICON_SIZE / 2,t - GUIDDELINE_ICON_SIZE - 3,x + GUIDDELINE_ICON_SIZE / 2,t - 3,0,0,iconWidth,iconHeight,null);      if (isSelected) {        int percent=(guideline.getX() * 100) / root.getWidth();        ConnectionDraw.drawCircledText(g,sFont,String.valueOf(percent),x,t + 20);      }    } else     if (relative == Guideline.RELATIVE_BEGIN) {      int iconWidth=sGuidelineArrowLeft.getWidth(null);      int iconHeight=sGuidelineArrowLeft.getHeight(null);      int ty=t - ConnectionDraw.ARROW_SIDE - offset / 2;      g.drawImage(sGuidelineArrowLeft,x - GUIDDELINE_ICON_SIZE / 2,t - GUIDDELINE_ICON_SIZE - 3,x + GUIDDELINE_ICON_SIZE / 2,t - 3,0,0,iconWidth,iconHeight,null);      if (isSelected) {        ConnectionDraw.drawHorizontalMarginIndicator(g,String.valueOf(guideline.getX()),l,x,ty + 20);      }    } else     if (relative == Guideline.RELATIVE_END) {      int iconWidth=sGuidelineArrowRight.getWidth(null);      int iconHeight=sGuidelineArrowRight.getHeight(null);      int ty=t - ConnectionDraw.ARROW_SIDE - offset / 2;      g.drawImage(sGuidelineArrowRight,x - GUIDDELINE_ICON_SIZE / 2 + 1,t - GUIDDELINE_ICON_SIZE - 3,x + GUIDDELINE_ICON_SIZE / 2,t - 3,0,0,iconWidth,iconHeight,null);      if (isSelected) {        ConnectionDraw.drawHorizontalMarginIndicator(g,String.valueOf(root.getWidth() - guideline.getX()),x,r,ty + 20);      }    }  } else {    int y=transform.getSwingY(guideline.getDrawY());    g2.drawLine(l,y,r,y);    int offset=2;    int circleSize=GUIDDELINE_ICON_SIZE / 2 + 1;    Shape circle=new Ellipse2D.Float(l - 2 * circleSize - offset,y - circleSize,2 * circleSize,2 * circleSize);    g.fill(circle);    int relative=guideline.getRelativeBehaviour();    if (relative == Guideline.RELATIVE_PERCENT) {      int iconWidth=sGuidelinePercent.getWidth(null);      int iconHeight=sGuidelinePercent.getHeight(null);      g.drawImage(sGuidelinePercent,l - GUIDDELINE_ICON_SIZE - 3,y - GUIDDELINE_ICON_SIZE / 2,l - 3,y + GUIDDELINE_ICON_SIZE / 2,0,0,iconWidth,iconHeight,null);      if (isSelected) {        int percent=(guideline.getY() * 100) / root.getHeight();        ConnectionDraw.drawCircledText(g,sFont,String.valueOf(percent),l + 20,y);      }    } else     if (relative == Guideline.RELATIVE_BEGIN) {      int iconWidth=sGuidelineArrowUp.getWidth(null);      int iconHeight=sGuidelineArrowUp.getHeight(null);      g.drawImage(sGuidelineArrowUp,l - GUIDDELINE_ICON_SIZE - 3,y - GUIDDELINE_ICON_SIZE / 2,l - 3,y + GUIDDELINE_ICON_SIZE / 2,0,0,iconWidth,iconHeight,null);      if (isSelected) {        ConnectionDraw.drawVerticalMarginIndicator(g,String.valueOf(guideline.getY()),l + 20,t,y);      }    } else     if (relative == Guideline.RELATIVE_END) {      int iconWidth=sGuidelineArrowDown.getWidth(null);      int iconHeight=sGuidelineArrowDown.getHeight(null);      Polygon arrow=ConnectionDraw.getBottomArrow();      g.drawImage(sGuidelineArrowDown,l - GUIDDELINE_ICON_SIZE - 3,y - GUIDDELINE_ICON_SIZE / 2 + 1,l - 3,y + GUIDDELINE_ICON_SIZE / 2,0,0,iconWidth,iconHeight,null);      if (isSelected) {        ConnectionDraw.drawVerticalMarginIndicator(g,String.valueOf(root.getHeight() - guideline.getY()),l + 20,y,b);      }    }  }  g2.dispose();}  }
class C{  public WallDeleteCommentQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public static boolean isMap(NewBindingKey key){  TypeName typeName=key.getTypeName();  if (!(typeName instanceof ParameterizedTypeName)) {    return false;  }  ParameterizedTypeName parameterizedTypeName=(ParameterizedTypeName)typeName;  return parameterizedTypeName.rawType.equals(ClassName.get(Map.class));}  }
class C{  @Override public final long available(){  try {    return is.available();  } catch (  IOException e) {    System.err.println("ERROR" + e);    return 0;  }}  }
class C{  public FirebaseJobDispatcher(Driver driver){  mDriver=driver;  mValidator=new ValidationEnforcer(mDriver.getValidator());  mRetryStrategyBuilder=new RetryStrategy.Builder(mValidator);}  }
class C{  public FileAlterationObserver(File directory,FileFilter fileFilter){  this(directory,fileFilter,(IOCase)null);}  }
class C{  public static Response makeJobMetadataResponse(String jobMetadata){  return Response.status(Response.Status.ACCEPTED).entity(jobMetadata).header(HttpHeaders.CONTENT_TYPE,MediaType.APPLICATION_JSON + "; charset=utf-8").build();}  }
class C{  protected void initializeWorld(){  SimulationBody floor=new SimulationBody();  floor.addFixture(Geometry.createRectangle(20,1));  floor.setMass(MassType.INFINITE);  this.world.addBody(floor);  SimulationBody triangle=new SimulationBody();  triangle.addFixture(Geometry.createTriangle(new Vector2(0.0,0.5),new Vector2(-0.5,-0.5),new Vector2(0.5,-0.5)));  triangle.translate(new Vector2(-1.0,2.0));  triangle.setLinearVelocity(new Vector2(5.0,0.0));  triangle.setMass(MassType.NORMAL);  world.addBody(triangle);  SimulationBody circle=new SimulationBody();  circle.addFixture(Geometry.createCircle(0.5));  circle.translate(new Vector2(2.0,2.0));  circle.applyForce(new Vector2(-100.0,0.0));  circle.setLinearDamping(0.05);  circle.setMass(MassType.NORMAL);  world.addBody(circle);  SimulationBody segment=new SimulationBody();  segment.addFixture(Geometry.createSegment(new Vector2(0.5,0.5),new Vector2(-0.5,-0.5)));  segment.translate(new Vector2(1.0,6.0));  segment.setMass(MassType.NORMAL);  world.addBody(segment);  SimulationBody square=new SimulationBody();  square.addFixture(Geometry.createSquare(1.0));  square.translate(new Vector2(0.0,2.0));  square.setLinearVelocity(new Vector2(-5.0,0.0));  square.setMass(MassType.NORMAL);  world.addBody(square);  SimulationBody decagon=new SimulationBody();  decagon.addFixture(Geometry.createUnitCirclePolygon(10,0.5));  decagon.translate(new Vector2(-2.5,2.0));  decagon.setAngularVelocity(Math.toRadians(-20.0));  decagon.setMass(MassType.NORMAL);  world.addBody(decagon);  SimulationBody capsule=new SimulationBody();  capsule.addFixture(Geometry.createCapsule(2,1));  capsule.translate(new Vector2(0.0,4.0));  capsule.setMass(MassType.NORMAL);  world.addBody(capsule);  SimulationBody isosceles=new SimulationBody();  isosceles.addFixture(Geometry.createIsoscelesTriangle(0.5,0.5));  isosceles.translate(new Vector2(2,3.5));  isosceles.setMass(MassType.NORMAL);  world.addBody(isosceles);  SimulationBody equilateral=new SimulationBody();  equilateral.addFixture(Geometry.createEquilateralTriangle(1));  equilateral.translate(new Vector2(3.5,4.5));  equilateral.setMass(MassType.NORMAL);  world.addBody(equilateral);  SimulationBody right=new SimulationBody();  right.addFixture(Geometry.createRightTriangle(1,0.5));  right.translate(new Vector2(4.0,3.0));  right.setMass(MassType.NORMAL);  world.addBody(right);}  }
class C{  public boolean compareAndSet(final long expectedValue,final long newValue){  return UNSAFE.compareAndSwapLong(this,VALUE_OFFSET,expectedValue,newValue);}  }
class C{  private void calculateColor(int coord){  coord=coord - mBarPointerHaloRadius;  if (coord < 0) {    coord=0;  } else   if (coord > mBarLength) {    coord=mBarLength;  }  if (coord > (mBarPointerHaloRadius + (mBarLength / 2)) && coord < (mBarPointerHaloRadius + mBarLength)) {    mColor=Color.HSVToColor(new float[]{mHSVColor[0],1f,(float)(1 - (mPosToSVFactor * (coord - (mBarPointerHaloRadius + (mBarLength / 2)))))});  } else   if (coord > mBarPointerHaloRadius && coord < (mBarPointerHaloRadius + mBarLength)) {    mColor=Color.HSVToColor(new float[]{mHSVColor[0],(float)((mPosToSVFactor * (coord - mBarPointerHaloRadius))),1f});  } else   if (coord == mBarPointerHaloRadius) {    mColor=Color.WHITE;  } else   if (coord == mBarPointerHaloRadius + mBarLength) {    mColor=Color.BLACK;  }}  }
class C{  @Override public void onPaint(ViewTransform transform,Graphics2D g){  for (  Animation animation : mAnimations) {    animation.setProgress(getProgress());    animation.onPaint(transform,g);  }}  }
class C{  public static void writeStringToFile(File file,String data,String encoding) throws IOException {  writeStringToFile(file,data,encoding,false);}  }
class C{  public void addNewEntry(){  ColourMapData data=new ColourMapData();  Expression quantity=ff.literal(0);  if (!colourMapList.isEmpty()) {    ColourMapData lastEntry=colourMapList.get(colourMapList.size() - 1);    if (lastEntry != null) {      quantity=lastEntry.getNextQuantity();    }  }  data.setColour(ff.literal(ColourUtils.createRandomColour()));  data.setOpacity(ff.literal(DefaultSymbols.defaultColourOpacity()));  data.setQuantity(quantity);  colourMapList.add(data);  this.fireTableDataChanged();  if (parentObj != null) {    parentObj.colourMapUpdated();  }}  }
class C{  @SuppressWarnings("unchecked") public CacheRequestHandler(DataRequestHandler next,@NotNull DataCache<?> dataCache,ObjectMapper mapper){  super(mapper);  this.next=next;  this.dataCache=(DataCache<String>)dataCache;}  }
class C{  public OpenIntToFieldHashMap(final Field<T> field,final int expectedSize,final T missingEntries){  this.field=field;  final int capacity=computeCapacity(expectedSize);  keys=new int[capacity];  values=buildArray(capacity);  states=new byte[capacity];  this.missingEntries=missingEntries;  mask=capacity - 1;}  }
class C{  public static String readAsciiLine(InputStream in) throws IOException {  StringBuilder result=new StringBuilder(80);  while (true) {    int c=in.read();    if (c == -1) {      throw new EOFException();    } else     if (c == '\n') {      break;    }    result.append((char)c);  }  int length=result.length();  if (length > 0 && result.charAt(length - 1) == '\r') {    result.setLength(length - 1);  }  return result.toString();}  }
class C{  public static Builder builder(String featureName){  return new Builder(featureName);}  }
class C{  public boolean isFullyZoomedOutY(){  return !(mScaleY > mMinScaleY || mMinScaleY > 1f);}  }
class C{  private static int dayToUtilDay(int day){switch (day) {case EventRecurrence.SU:    return Calendar.SUNDAY;case EventRecurrence.MO:  return Calendar.MONDAY;case EventRecurrence.TU:return Calendar.TUESDAY;case EventRecurrence.WE:return Calendar.WEDNESDAY;case EventRecurrence.TH:return Calendar.THURSDAY;case EventRecurrence.FR:return Calendar.FRIDAY;case EventRecurrence.SA:return Calendar.SATURDAY;default :throw new IllegalArgumentException("bad day argument: " + day);}}  }
class C{  public FaveGetPhotosQuery(VkApiClient client,UserActor actor){  super(client,"fave.getPhotos",GetPhotosResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public static final void emoteStartDancing4(Npc owner){  owner.unsetState(CreatureState.NPC_IDLE);  owner.setState(CreatureState.ACTIVE);  PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.EMOTE,19,0));}  }
class C{  public static int weekNumber(Timestamp input){  return weekNumber(input,TimeZone.getDefault(),Locale.getDefault());}  }
class C{  @Override public boolean isEmpty(){  return false;}  }
class C{  @Override public void write(PacketBuffer buf,Packet packet){  buf.writeInt(getID(packet.spec));}  }
class C{  public static boolean isFileExtensionSupported(File file,List<String> fileExtensionList){  if (file == null) {    return false;  }  String fileExtension=ExternalFilenames.getFileExtension(file.getAbsolutePath());  for (  String allowedFileExtension : fileExtensionList) {    if (fileExtension.compareToIgnoreCase(allowedFileExtension) == 0) {      return true;    }  }  return false;}  }
class C{  public void init$Children(){  children=new ASTNode[3];  setChild(new Opt(),2);}  }
class C{  public Decision suggest(Map CategoryValues){  String sSuggestion="";  double dMaxSimil=-1.0;  if (sSuggestion.equals("")) {    Iterator iIter=CategoryValues.keySet().iterator();    while (iIter.hasNext()) {      String sCurCategory=(String)iIter.next();      double dCurSimilarity=((Double)CategoryValues.get(sCurCategory)).doubleValue();      if (dCurSimilarity > dMaxSimil) {        sSuggestion=sCurCategory;        dMaxSimil=dCurSimilarity;      }    }  }  double dUncertainty=UncertaintyCalculator.computeUncertainty(CategoryValues,dMaxSimil,sSuggestion);  if (dUncertainty > LookupThreshold) {    System.out.println("High uncertainty. Looking up for similar decision.");    double dMinDistance=Double.MAX_VALUE;    Iterator iIter=vPreviousDecisions.iterator();    DecisionSupport dpSecondarySuggestion=null;    while (iIter.hasNext()) {      DecisionSupport dp=(DecisionSupport)iIter.next();      double dCurDist=dp.distanceFrom(CategoryValues,sSuggestion);      if ((dMinDistance > dCurDist) && (dCurDist < Double.MAX_VALUE)) {        dpSecondarySuggestion=dp;        dMinDistance=dCurDist;      }    }    double dFoundUncertainty=0;    if (dpSecondarySuggestion != null) {      dFoundUncertainty=EntropyUncertaintyCalculator.computeUncertainty(dpSecondarySuggestion.CategoryEstimations,((Double)dpSecondarySuggestion.CategoryEstimations.get(dpSecondarySuggestion.SuggestedCategory)).doubleValue(),dpSecondarySuggestion.SuggestedCategory);      if (dFoundUncertainty <= dUncertainty) {        sSuggestion=dpSecondarySuggestion.CorrectCategory;        dUncertainty=dUncertainty / dFoundUncertainty;        System.out.println("Found decision " + dpSecondarySuggestion.CorrectCategory + " for "+ CategoryValues.toString());      }    }  }  return new Decision(null,sSuggestion,1 - dUncertainty,CategoryValues);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Fear_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200739,skillcaster,skillname);}  }
class C{  public XMLInputSource(XMLResourceIdentifier resourceIdentifier){  fPublicId=resourceIdentifier.getPublicId();  fSystemId=resourceIdentifier.getLiteralSystemId();  fBaseSystemId=resourceIdentifier.getBaseSystemId();}  }
class C{  private HashMap<String,List<String>> buildElectionGroups(FailOverPolicyDescription polDesc){  if (polDesc == null || polDesc.m_BackupOnly == null || polDesc.m_BackupOnly.isEmpty() || polDesc.m_BackupMemberNames == null)   return null;  HashMap<String,List<String>> electionGroups=new HashMap<String,List<String>>();  for (Iterator<Map.Entry<String,List<String>>> iter=polDesc.m_BackupMemberNames.entrySet().iterator(); iter.hasNext(); ) {    Map.Entry<String,List<String>> entry=iter.next();    List<String> backupOnly=new LinkedList<String>();    String primary=entry.getKey();    for (Iterator<String> iterator=entry.getValue().iterator(); iterator.hasNext(); ) {      String backup=iterator.next();      if (polDesc.m_BackupOnly.contains(backup)) {        backupOnly.add(backup);      }    }    if (backupOnly.size() > 0) {      backupOnly.add(primary);      electionGroups.put(primary,backupOnly);    }  }  return electionGroups;}  }
class C{  private void updateSyncState(){  boolean isSyncEnabled=AndroidSyncSettings.isSyncEnabled(getActivity());  mSyncSwitchPreference.setChecked(isSyncEnabled);  mSyncSwitchPreference.setEnabled(canDisableSync());  updateSyncStateFromSwitch();}  }
class C{  public RabbitMqCommand logWith(Logger logger){  this.processOutputLogger=logger;  return this;}  }
class C{  public Builder addConverterFactory(Converter.Factory factory){  converterFactories.add(checkNotNull(factory,"factory == null"));  return this;}  }
class C{  public static INDArray toArray(Collection<Writable> record){  return toArray(record,record.size());}  }
class C{  public SilenceAudioInputStream(double duration,AudioFormat format){  super(new ByteArrayInputStream(new byte[(int)(format.getFrameSize() * format.getFrameRate() * duration)]),format,(long)(format.getFrameRate() * duration));}  }
class C{  public void filterRows(){  if (m_parent == null)   return;  CascadedRowManager rowman=(CascadedRowManager)m_rows;  IntIterator crows=m_rows.rows();  while (crows.hasNext()) {    int crow=crows.nextInt();    if (!m_rowFilter.getBoolean(m_parent.getTuple(rowman.getParentRow(crow)))) {      removeCascadedRow(crow);    }  }  Iterator ptuples=m_parent.tuples(m_rowFilter);  while (ptuples.hasNext()) {    Tuple pt=(Tuple)ptuples.next();    int prow=pt.getRow();    if (rowman.getChildRow(prow) == -1)     addCascadedRow(prow);  }}  }
class C{  private MemoryShortageException shortageCheck(double rate,boolean writeOperation){  if (shouldBlock(rate,writeOperation)) {    if (_gcBeforeShortage)     rate=getMemoryUsageRate(true,false);    if (shouldBlock(rate,writeOperation)) {      if (_logger.isLoggable(Level.FINE)) {        _logger.fine("Memory shortage in cache: " + _spaceName);      }      long usage=(long)((rate * _processMemoryManager.getMaximumMemory()) / 100.0);      return new MemoryShortageException(_spaceName,_containerName,SystemInfo.singleton().network().getHostId(),usage,_processMemoryManager.getMaximumMemory());    }  }  return null;}  }
class C{  public static String determineOriginalFile(Context context,Uri uri){  String originalFile=null;  if (uri != null) {    if (uri.getScheme().startsWith("content")) {      originalFile=getPathFromUri(context,uri);    }    if (uri.toString().matches("https?://\\w+\\.googleusercontent\\.com/.+")) {      originalFile=uri.toString();    }    if (uri.getScheme().startsWith("file")) {      originalFile=uri.toString().substring(7);    }    if (isNullOrEmpty(originalFile)) {      throw new IllegalArgumentException("File path was null");    }  } else {    throw new IllegalArgumentException("Image Uri was null!");  }  return originalFile;}  }
class C{  public int numConnections(){  int num=0;  if (this.results != null)   for (  Entry<ResultSinkInfo,Set<ResultSourceInfo>> entry : this.results.entrySet())   num+=entry.getValue().size();  return num;}  }
class C{  public RegexValidator(String[] regexs,boolean caseSensitive){  if (regexs == null || regexs.length == 0) {    throw new IllegalArgumentException("Regular expressions are missing");  }  patterns=new Pattern[regexs.length];  int flags=(caseSensitive ? 0 : Pattern.CASE_INSENSITIVE);  for (int i=0; i < regexs.length; i++) {    if (regexs[i] == null || regexs[i].length() == 0) {      throw new IllegalArgumentException("Regular expression[" + i + "] is missing");    }    patterns[i]=Pattern.compile(regexs[i],flags);  }}  }
class C{  private void checkIndices(final int start,final int end) throws MathIllegalArgumentException {  final int dim=getDimension();  if ((start < 0) || (start >= dim)) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.INDEX,start,0,dim - 1);  }  if ((end < 0) || (end >= dim)) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.INDEX,end,0,dim - 1);  }  if (end < start) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.INITIAL_ROW_AFTER_FINAL_ROW,end,start,false);  }}  }
class C{  public static void handleInternetConnection(Activity context){  ConnectivityManager cm=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  NetworkInfo activeNetwork=cm.getActiveNetworkInfo();  if (activeNetwork != null) {    if (activeNetwork.getType() == ConnectivityManager.TYPE_WIFI) {      loadContent(context);    } else     if (activeNetwork.getType() == ConnectivityManager.TYPE_MOBILE) {      Dialogs.showMobileData(context);    }  } else   Dialogs.showNoInternet(context);}  }
class C{  public void resetCircleColors(){  if (mCircleColors == null) {    mCircleColors=new ArrayList<>();  }  mCircleColors.clear();}  }
class C{  public static boolean booleanValueVersatile(Object value,boolean defaultValue){  Boolean res=booleanValueVersatile(value);  return res != null ? res : defaultValue;}  }
class C{  @deprecated public final void reset(int start,int count) throws IllegalArgumentException {  int len=0;  if (this.text != null) {    len=this.text.length;  }  if ((start < 0) || (count < 0) || (start > len - count)) {    throw new IllegalArgumentException();  }  this.textStart=start;  this.textLimit=(start + count);  reset();}  }
class C{  public DivExpr newDivExpr(Value op1,Value op2){  return new GDivExpr(op1,op2);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_PERSONAL_SHOP_SELL_ITEM(String value0){  return new SM_SYSTEM_MESSAGE(1400134,value0);}  }
class C{  public String guards(){  return soot.PhaseOptions.getString(options,"guards");}  }
class C{  public static double min(final double... values) throws MathIllegalArgumentException {  return MIN.evaluate(values);}  }
class C{  public static List<Writable> sampleInvalidFromColumn(int numToSample,String columnName,Schema schema,JavaRDD<List<Writable>> data){  return sampleInvalidFromColumn(numToSample,columnName,schema,data,false);}  }
class C{  public SubtreeDragControl(){}  }
class C{  public static GeneralPath cardinalSpline(float pts[],float slack,boolean closed){  GeneralPath path=new GeneralPath();  path.moveTo(pts[0],pts[1]);  return cardinalSpline(path,pts,slack,closed,0f,0f);}  }
class C{  private ScanPlan createPlan(String scanId,ScanOptions options){  ScanPlan plan=new ScanPlan(scanId,options);  for (  String placement : options.getPlacements()) {    String cluster=_dataTools.getPlacementCluster(placement);    ScanRangeSplits scanRangeSplits=_dataTools.getScanRangeSplits(placement,options.getRangeScanSplitSize(),Optional.<ScanRange>absent());    if (!options.isScanByAZ()) {      scanRangeSplits=scanRangeSplits.combineGroups();    }    for (    ScanRangeSplits.SplitGroup splitGroup : scanRangeSplits.getSplitGroups()) {      plan.startNewBatchForCluster(cluster);      for (      ScanRangeSplits.TokenRange tokenRange : splitGroup.getTokenRanges()) {        plan.addTokenRangeToCurrentBatchForCluster(cluster,placement,tokenRange.getScanRanges());      }    }  }  return plan;}  }
class C{  public static final void toString(StringBuffer output,byte[] tab){  if (tab == null) {    output.append("null");    return;  }  output.append("(");  int size=tab.length;  output.append(size);  if (listMax == -1 || size <= listMax) {    for (int i=0; i < size; i++) {      output.append(",");      output.append(tab[i]);    }  } else {    int border=size / 2;    if (listBorder < border)     border=listBorder;    for (int i=0; i < border; i++) {      output.append(",");      output.append(tab[i]);    }    output.append(",...");    for (int i=border; i > 0; i--) {      output.append(",");      output.append(tab[size - i]);    }  }  output.append(")");}  }
class C{  public void addException(Access node){  List<Access> list=(parent == null || state == null) ? getExceptionListNoTransform() : getExceptionList();  list.addChild(node);}  }
class C{  public SizeFileComparator(){  this.sumDirectoryContents=false;}  }
class C{  public boolean isPrintable(char ch){  if (ch <= this.lastPrintable) {    return true;  }  return isPrintable0(ch);}  }
class C{  public static List<Window> windows(String words,int windowSize){  StringTokenizer tokenizer=new StringTokenizer(words);  List<String> list=new ArrayList<String>();  while (tokenizer.hasMoreTokens())   list.add(tokenizer.nextToken());  return windows(list,windowSize);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  TraceEvent.begin("ChromeLauncherActivity");  IntentHandler.addTimestampToIntent(getIntent());  CommandLineInitUtil.initCommandLine(this,ChromeApplication.COMMAND_LINE_FILE);  PartnerBrowserCustomizations.initializeAsync(getApplicationContext(),PARTNER_BROWSER_CUSTOMIZATIONS_TIMEOUT_MS);  mIsInMultiInstanceMode=MultiWindowUtils.getInstance().shouldRunInMultiInstanceMode(this);  mIntentHandler=new IntentHandler(this,getPackageName());  maybePerformMigrationTasks();  mIsCustomTabIntent=isCustomTabIntent();  int tabId=IntentUtils.safeGetIntExtra(getIntent(),TabOpenType.BRING_TAB_TO_FRONT.name(),Tab.INVALID_TAB_ID);  if (WebappLauncherActivity.bringWebappToFront(tabId)) {    ApiCompatibilityUtils.finishAndRemoveTask(this);    return;  }  if (getIntent().hasCategory(Notification.INTENT_CATEGORY_NOTIFICATION_PREFERENCES)) {    NotificationUIManager.launchNotificationPreferences(this,getIntent());    finish();    return;  }  if (!mIsCustomTabIntent && !FeatureUtilities.isDocumentMode(this)) {    launchTabbedMode();    finish();    return;  }  if (TextUtils.equals(getIntent().getAction(),ACTION_CLOSE_ALL_INCOGNITO)) {    ChromeApplication.getDocumentTabModelSelector().getModel(true).closeAllTabs();    ApiCompatibilityUtils.finishAndRemoveTask(this);    return;  }  if (launchFirstRunExperience())   return;  if (mIsCustomTabIntent) {    launchCustomTabActivity();    finish();    return;  }  handleDocumentActivityIntent();  if (!mIsFinishDelayed)   ApiCompatibilityUtils.finishAndRemoveTask(this);}  }
class C{  public void createAndBindDestination(boolean isQueue,String destinationName) throws NamingException, JMSException {  Object dest;  try {    dest=jndiLookup(destinationName);  } catch (  NamingException ne) {    if (isQueue) {      dest=getQueue(destinationName);    } else {      dest=getTopic(destinationName);    }    getInitialContext().rebind(destinationName,dest);  }}  }
class C{  private void deactivateToggleSkill(){  PacketSendUtility.sendPacket((Player)effector,new SM_SKILL_ACTIVATION(getSkillId(),false));}  }
class C{  public synchronized void onlyReplicateDeletesUponCompaction(){  _onlyReplicateDeletesUponCompaction=true;}  }
class C{  @DmnDeploymentAnnotation(resources={"org/activiti/rest/dmn/service/api/repository/simple.dmn"}) public void testGetDeployment() throws Exception {  DmnDeployment existingDeployment=dmnRepositoryService.createDeploymentQuery().singleResult();  HttpGet httpGet=new HttpGet(SERVER_URL_PREFIX + DmnRestUrls.createRelativeResourceUrl(DmnRestUrls.URL_DEPLOYMENT,existingDeployment.getId()));  CloseableHttpResponse response=executeRequest(httpGet,HttpStatus.SC_OK);  closeResponse(response);  JsonNode responseNode=objectMapper.readTree(response.getEntity().getContent());  String deploymentId=responseNode.get("id").textValue();  String name=responseNode.get("name").textValue();  String category=responseNode.get("category").textValue();  String deployTime=responseNode.get("deploymentTime").textValue();  String url=responseNode.get("url").textValue();  String tenantId=responseNode.get("tenantId").textValue();  assertEquals("",tenantId);  assertNotNull(deploymentId);  assertEquals(existingDeployment.getId(),deploymentId);  assertNotNull(name);  assertEquals(existingDeployment.getName(),name);  assertEquals(existingDeployment.getCategory(),category);  assertNotNull(deployTime);  assertNotNull(url);  assertTrue(url.endsWith(DmnRestUrls.createRelativeResourceUrl(DmnRestUrls.URL_DEPLOYMENT,deploymentId)));}  }
class C{  public Color(){}  }
class C{  @Override public String toString(){  return left.toString() + ":" + right.toString();}  }
class C{  public GSTopicConnectionFactoryImpl() throws JMSException {  this(null,null);}  }
class C{  public void put(String key,InputStream stream,String name){  put(key,stream,name,null);}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    return new FileInputStream(entry.getCleanFile(index));  }}  }
class C{  public String optString(int index){  LazyNode token=getOptionalValueToken(index);  if (token == null)   return null;  if (token.type == LazyNode.VALUE_NULL)   return null;  return token.getStringValue(cbuf);}  }
class C{  public byte[] generateKek(PrivateKey privateKey) throws NoSuchAlgorithmException, InvalidKeySpecException, InvalidKeyException {  PublicKey vlPublic=this.getValueLinkPublicKey();  KeyAgreement ka=KeyAgreement.getInstance("DH");  ka.init(privateKey);  ka.doPhase(vlPublic,true);  byte[] secretKey=ka.generateSecret();  if (debug) {    Debug.logInfo("Secret Key : " + StringUtil.toHexString(secretKey) + " / "+ secretKey.length,module);  }  MessageDigest md=MessageDigest.getInstance("SHA1");  byte[] digest=md.digest(secretKey);  byte[] des2=getByteRange(digest,0,16);  byte[] first8=getByteRange(des2,0,8);  byte[] kek=copyBytes(des2,first8,0);  if (debug) {    Debug.logInfo("Generated KEK : " + StringUtil.toHexString(kek) + " / "+ kek.length,module);  }  return kek;}  }
class C{  @Override public Scan open(){  Scan src=p.open();  List<TempTable> runs=splitIntoRuns(src);  if (runs.size() == 0)   return src;  src.close();  while (runs.size() > 2)   runs=doAMergeIteration(runs);  return new SortScan(runs,comp);}  }
class C{  private void requestUserPhotos(Context c,int page,boolean refresh,String order){  page=refresh ? 1 : page + 1;  listener=new OnRequestPhotosListener(c,page,refresh);  model.getService().requestUserPhotos(AuthManager.getInstance().getMe(),page,Mysplash.DEFAULT_PER_PAGE,order,listener);}  }
class C{  public DiscoveryProtocolException(String message){  super(message);}  }
class C{  public static boolean isFileNewer(File file,File reference){  if (reference == null) {    throw new IllegalArgumentException("No specified reference file");  }  if (!reference.exists()) {    throw new IllegalArgumentException("The reference file '" + reference + "' doesn't exist");  }  return isFileNewer(file,reference.lastModified());}  }
class C{  public String title(){  return mTitle;}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  public static void verifyPhoneToken(String token,@Nullable AirMapCallback<Void> callback){  PilotService.verifyToken(token,callback);}  }
class C{  public static void finalizeFirstRunFlowState(Context context,Bundle data){  FirstRunStatus.setFirstRunFlowComplete(context,true);  setFirstRunFlowSignInAccountName(context,data.getString(FirstRunActivity.RESULT_SIGNIN_ACCOUNT_NAME));  setFirstRunFlowSignInSetupSync(context,data.getBoolean(FirstRunActivity.RESULT_SHOW_SYNC_SETTINGS));}  }
class C{  public void createInFile(String filePath) throws IOException {  this.inFile=new ExifInterface(filePath);}  }
class C{  public boolean precise_newinstance(){  return soot.PhaseOptions.getBoolean(options,"precise-newinstance");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBINE_ITEM_MULTI(String value1,String value0s){  return new SM_SYSTEM_MESSAGE(1300789,value1,value0s);}  }
class C{  public Schema(){}  }
class C{  public void init$Children(){  children=new ASTNode[3];  setChild(new Opt(),2);}  }
class C{  public void copyDeploymentValuesToProcessDefinitions(DeploymentEntity deployment,List<ProcessDefinitionEntity> processDefinitions){  String engineVersion=deployment.getEngineVersion();  String tenantId=deployment.getTenantId();  String deploymentId=deployment.getId();  for (  ProcessDefinitionEntity processDefinition : processDefinitions) {    if (engineVersion != null) {      processDefinition.setEngineVersion(engineVersion);    }    if (tenantId != null) {      processDefinition.setTenantId(tenantId);    }    processDefinition.setDeploymentId(deploymentId);  }}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute("set colorMismatchesVsReference=" + (!isSelected()) + ";");}  }
class C{  private void validatePerPage(int perPage){  if (perPage > maxResults) {    String msg=String.format("Number of rows requested exceeds request limit of %d",maxResults);    throw new RowLimitReachedException(msg);  }}  }
class C{  public PanOptions build(){  PanOptions options=new PanOptions();  options.animate=this.animate;  options.duration=this.duration;  options.easeLinearity=this.easeLinearity;  options.noMoveStart=this.noMoveStart;  return options;}  }
class C{  public MePhotosView(Activity a,int type){  super(a);  this.initialize(a,type);}  }
class C{  public int CalcBonusAbyssReward(boolean isWin,boolean isBossKilled){  int BossKilled=1993;  int Win=3163;  int Loss=1031;  if (isBossKilled) {    return isWin ? (Win + BossKilled) : (Loss + BossKilled);  } else {    return isWin ? Win : Loss;  }}  }
class C{  public static double tanh(double x){  boolean negate=false;  if (Double.isNaN(x)) {    return x;  }  if (x > 20.0) {    return 1.0;  }  if (x < -20) {    return -1.0;  }  if (x == 0) {    return x;  }  if (x < 0.0) {    x=-x;    negate=true;  }  double result;  if (x >= 0.5) {    double hiPrec[]=new double[2];    exp(x * 2.0,0.0,hiPrec);    double ya=hiPrec[0] + hiPrec[1];    double yb=-(ya - hiPrec[0] - hiPrec[1]);    double na=-1.0 + ya;    double nb=-(na + 1.0 - ya);    double temp=na + yb;    nb+=-(temp - na - yb);    na=temp;    double da=1.0 + ya;    double db=-(da - 1.0 - ya);    temp=da + yb;    db+=-(temp - da - yb);    da=temp;    temp=da * HEX_40000000;    double daa=da + temp - temp;    double dab=da - daa;    double ratio=na / da;    temp=ratio * HEX_40000000;    double ratioa=ratio + temp - temp;    double ratiob=ratio - ratioa;    ratiob+=(na - daa * ratioa - daa * ratiob - dab * ratioa - dab * ratiob) / da;    ratiob+=nb / da;    ratiob+=-db * na / da / da;    result=ratioa + ratiob;  } else {    double hiPrec[]=new double[2];    expm1(x * 2.0,hiPrec);    double ya=hiPrec[0] + hiPrec[1];    double yb=-(ya - hiPrec[0] - hiPrec[1]);    double na=ya;    double nb=yb;    double da=2.0 + ya;    double db=-(da - 2.0 - ya);    double temp=da + yb;    db+=-(temp - da - yb);    da=temp;    temp=da * HEX_40000000;    double daa=da + temp - temp;    double dab=da - daa;    double ratio=na / da;    temp=ratio * HEX_40000000;    double ratioa=ratio + temp - temp;    double ratiob=ratio - ratioa;    ratiob+=(na - daa * ratioa - daa * ratiob - dab * ratioa - dab * ratiob) / da;    ratiob+=nb / da;    ratiob+=-db * na / da / da;    result=ratioa + ratiob;  }  if (negate) {    result=-result;  }  return result;}  }
class C{  public static <S,T>Aggregate<S,Map<String,T>> select(ImmutableSet<NamedAggregate<? super S,? extends T>> aggregates){  return new SelectAggregate<>(aggregates);}  }
class C{  protected void drawGridLine(Canvas c,float x,float y,Path gridLinePath){  gridLinePath.moveTo(x,mViewPortHandler.contentBottom());  gridLinePath.lineTo(x,mViewPortHandler.contentTop());  c.drawPath(gridLinePath,mGridPaint);  gridLinePath.reset();}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.main);  App.handleTextView(this);  LibWrapper.handleTextView(this);}  }
class C{  public void download(String remoteFileName,File localFile,long restartAt) throws IllegalStateException, FileNotFoundException, IOException, FTPIllegalReplyException, FTPException, FTPDataTransferException, FTPAbortedException {  download(remoteFileName,localFile,restartAt,null);}  }
class C{  private int measureHeightSize(int measureSpec){  int defSize=dp2px(DEFAULT_HEIGHT);  int specSize=MeasureSpec.getSize(measureSpec);  int specMode=MeasureSpec.getMode(measureSpec);  int result=0;switch (specMode) {case MeasureSpec.UNSPECIFIED:case MeasureSpec.AT_MOST:    result=Math.min(defSize,specSize);  break;case MeasureSpec.EXACTLY:result=specSize;break;}return result;}  }
class C{  public static IOCase forName(String name){  if (IOCase.SENSITIVE.name.equals(name)) {    return IOCase.SENSITIVE;  }  if (IOCase.INSENSITIVE.name.equals(name)) {    return IOCase.INSENSITIVE;  }  if (IOCase.SYSTEM.name.equals(name)) {    return IOCase.SYSTEM;  }  throw new IllegalArgumentException("Invalid IOCase name: " + name);}  }
class C{  private StringEscapeUtils(){}  }
class C{  private void convertToNV21(int k){  byte[] buffer=new byte[3 * mSize / 2];  int stride=mWidth, sliceHeight=mHeight;  int colorFormat=mDecoderColorFormat;  boolean planar=false;  if (mDecOutputFormat != null) {    MediaFormat format=mDecOutputFormat;    if (format != null) {      if (format.containsKey("slice-height")) {        sliceHeight=format.getInteger("slice-height");        if (sliceHeight < mHeight)         sliceHeight=mHeight;      }      if (format.containsKey("stride")) {        stride=format.getInteger("stride");        if (stride < mWidth)         stride=mWidth;      }      if (format.containsKey(MediaFormat.KEY_COLOR_FORMAT)) {        if (format.getInteger(MediaFormat.KEY_COLOR_FORMAT) > 0) {          colorFormat=format.getInteger(MediaFormat.KEY_COLOR_FORMAT);        }      }    }  }switch (colorFormat) {case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420SemiPlanar:case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420PackedSemiPlanar:case MediaCodecInfo.CodecCapabilities.COLOR_TI_FormatYUV420PackedSemiPlanar:    planar=false;  break;case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420Planar:case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420PackedPlanar:planar=true;break;}for (int i=0; i < mSize; i++) {if (i % mWidth == 0) i+=stride - mWidth;buffer[i]=mDecodedVideo[k][i];}if (!planar) {for (int i=0, j=0; j < mSize / 4; i+=1, j+=1) {if (i % mWidth / 2 == 0) i+=(stride - mWidth) / 2;buffer[mSize + 2 * j + 1]=mDecodedVideo[k][stride * sliceHeight + 2 * i];buffer[mSize + 2 * j]=mDecodedVideo[k][stride * sliceHeight + 2 * i + 1];}} else {for (int i=0, j=0; j < mSize / 4; i+=1, j+=1) {if (i % mWidth / 2 == 0) i+=(stride - mWidth) / 2;buffer[mSize + 2 * j + 1]=mDecodedVideo[k][stride * sliceHeight + i];buffer[mSize + 2 * j]=mDecodedVideo[k][stride * sliceHeight * 5 / 4 + i];}}mDecodedVideo[k]=buffer;}  }
class C{  public static byte[] int2buff(int n){  byte[] bs;  bs=new byte[4];  bs[0]=(byte)((n >> 24) & 0xFF);  bs[1]=(byte)((n >> 16) & 0xFF);  bs[2]=(byte)((n >> 8) & 0xFF);  bs[3]=(byte)(n & 0xFF);  return bs;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public TypeAccess fullCopy(){  TypeAccess tree=(TypeAccess)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static int sign(final int x){  return (x == 0) ? 0 : (x > 0) ? 1 : -1;}  }
class C{  @Override public long limit(){  return fileLength >>> 2;}  }
class C{  private void addReportingRates(DataQueryParams dataSourceParams,Grid grid,ReportingRateMetric metric,boolean includeNumDen){  if (!dataSourceParams.getReportingRates().isEmpty() && !dataSourceParams.isSkipData()) {    if (!COMPLETENESS_DIMENSION_TYPES.containsAll(dataSourceParams.getDimensionTypes())) {      return;    }    Map<String,Double> aggregatedDataMap=getAggregatedCompletenessValueMap(dataSourceParams);    List<Integer> completenessDimIndexes=dataSourceParams.getCompletenessDimensionIndexes();    List<Integer> completenessFilterIndexes=dataSourceParams.getCompletenessFilterIndexes();    DataQueryParams targetParams=DataQueryParams.newBuilder(dataSourceParams).retainDimensions(completenessDimIndexes).retainFilters(completenessFilterIndexes).withSkipPartitioning(true).withTimely(false).withRestrictByOrgUnitOpeningClosedDate(true).withRestrictByCategoryOptionStartEndDate(true).withAggregationType(AggregationType.SUM).build();    Map<String,Double> targetMap=getAggregatedCompletenessTargetMap(targetParams);    Integer periodIndex=dataSourceParams.getPeriodDimensionIndex();    Integer dataSetIndex=DataQueryParams.DX_INDEX;    Map<String,PeriodType> dsPtMap=dataSourceParams.getDataSetPeriodTypeMap();    PeriodType filterPeriodType=dataSourceParams.getFilterPeriodType();    for (    Map.Entry<String,Double> entry : aggregatedDataMap.entrySet()) {      List<String> dataRow=Lists.newArrayList(entry.getKey().split(DIMENSION_SEP));      List<String> targetRow=ListUtils.getAtIndexes(dataRow,completenessDimIndexes);      String targetKey=StringUtils.join(targetRow,DIMENSION_SEP);      Double target=targetMap.get(targetKey);      Double actual=entry.getValue();      if (target != null && actual != null) {        PeriodType queryPt=filterPeriodType != null ? filterPeriodType : getPeriodTypeFromIsoString(dataRow.get(periodIndex));        PeriodType dataSetPt=dsPtMap.get(dataRow.get(dataSetIndex));        target=target * queryPt.getPeriodSpan(dataSetPt);        Double value=0d;        if (ACTUAL_REPORTS == metric || ACTUAL_REPORTS_ON_TIME == metric) {          value=actual;        } else         if (EXPECTED_REPORTS == metric) {          value=target;        } else         if (!MathUtils.isEqual(target,MathUtils.ZERO)) {          value=(actual * PERCENT) / target;        }        String reportingRate=DimensionalObjectUtils.getDimensionItem(dataRow.get(DX_INDEX),metric);        dataRow.set(DX_INDEX,reportingRate);        grid.addRow();        grid.addValues(dataRow.toArray());        grid.addValue(dataSourceParams.isSkipRounding() ? value : MathUtils.getRounded(value));        if (includeNumDen) {          grid.addValue(actual);          grid.addValue(target);          grid.addValue(PERCENT);        }      }    }  }}  }
class C{  private void checkForMissedScans(){  DateTime now=now();  for (  ScheduledDailyScanUpload scheduledScan : _scheduledScans) {    DateTime startCheckInterval=now.minusMinutes(10);    Interval missedInterval=new Interval(startCheckInterval,now);    DateTime scheduledTime=scheduledScan.getNextExecutionTimeAfter(startCheckInterval);    if (missedInterval.contains(scheduledTime)) {      _log.info("Attempting to start potentially missed scan for time {}",scheduledTime);      try {        startScheduledScan(scheduledScan,scheduledTime);      } catch (      RepeatScanException e) {        _log.info("Scan was not missed for time {}, no action taken",scheduledTime);      }catch (      ScanExecutionTimeException e) {        _log.info("Too much time has elapsed since {}, no action taken",scheduledTime);      }    }  }}  }
class C{  public RecordID addRecord(List<DataType> values) throws DatabaseException {  return null;}  }
class C{  public String expandString(String original){  return FlexibleStringExpander.expandString(original,getBindings());}  }
class C{  public BoundingBox clone(BoundingVolume store){  if (store != null && store.getType() == Type.AABB) {    BoundingBox rVal=(BoundingBox)store;    rVal.center.set(center);    rVal.xExtent=xExtent;    rVal.yExtent=yExtent;    rVal.zExtent=zExtent;    rVal.checkPlane=checkPlane;    return rVal;  }  BoundingBox rVal=new BoundingBox(center.clone(),xExtent,yExtent,zExtent);  return rVal;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set dir=");  String result=np.getAbsoluteFileName();  np.matchIgnoreCase(";");  if (!(new File(result)).isDirectory()) {    System.err.println("No such directory: " + result);  } else {    System.setProperty("user.dir",result);    System.err.println("user.dir set to: " + result);  }}  }
class C{  private String makeSAM(String queryName,String queryDirection,String refName,int referenceLength,String refDirection,float bitScore,float expect,int rawScore,float percentIdentity,int queryStart,int queryEnd,int referenceStart,int referenceEnd,String alignedQuery,String alignedReference) throws IOException {  final boolean reverseComplemented;  if (queryDirection.equals("Plus")) {    if (refDirection.equals("Minus")) {      alignedQuery=Basic.getReverseComplement(alignedQuery);      alignedReference=Basic.getReverseComplement(alignedReference);      reverseComplemented=true;    } else     reverseComplemented=false;  } else {    if (refDirection.equals("Minus"))     throw new IOException("Can't parse match with Strand = Minus / Minus"); else {      int tmp=queryStart;      queryStart=queryEnd;      queryEnd=tmp;      tmp=referenceStart;      referenceStart=referenceEnd;      referenceEnd=tmp;      reverseComplemented=true;    }  }  final StringBuilder buffer=new StringBuilder();  buffer.append(queryName).append("\t");  if (reverseComplemented)   buffer.append(0x10); else   buffer.append(0);  buffer.append("\t");  buffer.append(refName).append("\t");  if (reverseComplemented)   buffer.append(referenceEnd).append("\t"); else   buffer.append(referenceStart).append("\t");  buffer.append("255\t");  Utilities.appendCigar(alignedQuery,alignedReference,buffer);  buffer.append("\t");  buffer.append("*\t");  buffer.append("0\t");  buffer.append("0\t");  buffer.append(alignedQuery.replaceAll("-","")).append("\t");  buffer.append("*\t");  buffer.append(String.format("AS:i:%d\t",(int)Math.round(bitScore)));  buffer.append(String.format("NM:i:%d\t",Utilities.computeEditDistance(alignedQuery,alignedReference)));  buffer.append(String.format("ZL:i:%d\t",referenceLength));  buffer.append(String.format("ZR:i:%d\t",rawScore));  buffer.append(String.format("ZE:f:%g\t",expect));  buffer.append(String.format("ZI:i:%d\t",(int)Math.round(percentIdentity)));  buffer.append(String.format("ZS:i:%s\t",queryStart));  Utilities.appendMDString(alignedQuery,alignedReference,buffer);  return buffer.toString();}  }
class C{  public ChangeModifiers add(ChangeModifiers modifiers){  return createIfNeeded(super.add(modifiers));}  }
class C{  private void createUI(){  readConfigFile(null,this,"Point.xml");}  }
class C{  private void tryLoadData(){  if (fullBookModel != null) {    onLoadDataSuccess(fullBookModel);  } else   if (isSubscriptionInactive(loadFullBookSubscription)) {    getView().showLoading();    loadData();  } else {    getView().showLoading();  }}  }
class C{  @Override public Future<Void> asyncClose(){  Promise<Void> closeFuture;synchronized (this) {    if (null != closePromise) {      return closePromise;    }    closeFuture=closePromise=new Promise<Void>();  }  try {    if (ownWriterZKC) {      writerZKC.close();    }    if (ownReaderZKC) {      readerZKC.close();    }  } catch (  Exception e) {    LOG.warn("Exception while closing distributed log manager",e);  }  FutureUtils.setValue(closeFuture,null);  return closeFuture;}  }
class C{  @SuppressWarnings("unchecked") public final E next(){  if (q[index] == null)   throw new NoSuchElementException();  if (index == q.length - 1) {    q=(E[])q[index];    index=0;    if (q[index] == null)     throw new NoSuchElementException();  }  E ret=q[index];  if (ret == ChunkedQueue.NULL_CONST)   ret=null;  index++;  return ret;}  }
class C{  @Override public synchronized void stop(){  LOGGER.info("Shutting down cache persistence manager (" + cache.getClass().getSimpleName() + ")");  started=false;  persistenceExecutor.shutdown();  while (!toBePersisted.isEmpty()) {    LOGGER.debug("Detected cache objects that need persisting... trying to persist them.");    toBePersistedLock.writeLock().lock();    try {      cachePersistenceDAO.persistBatch(new ArrayList<Long>(toBePersisted));      toBePersisted.clear();    } catch (    PersistenceException e) {      LOGGER.error("Exception caught while persisting final batch of cache objects - will try again in 1s",e);      try {        Thread.sleep(1000);      } catch (      InterruptedException e1) {        LOGGER.error("Interrupted during sleep",e1);      }    } finally {      toBePersistedLock.writeLock().unlock();    }  }}  }
class C{  private String timestamp(){  return DateHelper.currentTime();}  }
class C{  public OptionalValueEditor(FunctionTableModel tableModel){  this.tableModel=tableModel;  checkBox.setHorizontalAlignment(JLabel.CENTER);}  }
class C{  public GroupsEditQuery topics(GroupsEditTopics value){  return unsafeParam("topics",value);}  }
class C{  public boolean isDate(){  return isDate;}  }
class C{  public AppsGetCatalogQuery filter(AppsGetCatalogFilter value){  return unsafeParam("filter",value);}  }
class C{  @RequestMapping(method=RequestMethod.POST,value="{clientVersion}/orgUnits/{id}/dataSets") @ResponseBody public String saveDataSetValues(@PathVariable int id,@RequestBody DataSetValue dataSetValue) throws NotAllowedException {  facilityReportingService.saveDataSetValues(getUnit(id),dataSetValue);  return DATASET_REPORT_UPLOADED;}  }
class C{  @CalledByNative static void sendEmail(Context context,String email,String subject,String body,String chooserTitle,String fileToAttach){  if (TextUtils.isEmpty(email)) {    Account[] accounts=AccountManagerHelper.get(context).getGoogleAccounts();    if (accounts != null && accounts.length == 1 && Patterns.EMAIL_ADDRESS.matcher(accounts[0].name).matches()) {      email=accounts[0].name;    }  }  Intent send=new Intent(Intent.ACTION_SEND);  send.setType("message/rfc822");  if (!TextUtils.isEmpty(email))   send.putExtra(Intent.EXTRA_EMAIL,new String[]{email});  send.putExtra(Intent.EXTRA_SUBJECT,subject);  send.putExtra(Intent.EXTRA_TEXT,Html.fromHtml(body));  if (!TextUtils.isEmpty(fileToAttach)) {    File fileIn=new File(fileToAttach);    Uri fileUri;    try {      fileUri=ContentUriUtils.getContentUriFromFile(context,fileIn);    } catch (    IllegalArgumentException ex) {      fileUri=Uri.fromFile(fileIn);    }    send.putExtra(Intent.EXTRA_STREAM,fileUri);  }  try {    Intent chooser=Intent.createChooser(send,chooserTitle);    chooser.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);    context.startActivity(chooser);  } catch (  android.content.ActivityNotFoundException ex) {  }}  }
class C{  public PaddingDecimalFormat(String pattern,int minLength){  super(pattern);  minimumLength=minLength;}  }
class C{  public static <T,D extends Number>D addAndGet(GigaSpace gigaSpace,IdQuery<T> idQuery,String path,D delta,ChangeModifiers modifiers,long timeout,TimeUnit timeUnit){  if (idQuery == null)   throw new IllegalArgumentException("query cannot be null");  if (!StringUtils.hasLength(path))   throw new IllegalArgumentException("path cannot be null or empty");  ChangeResult<T> changeResult=gigaSpace.change(idQuery,new ChangeSet().increment(path,delta),modifiers.add(ChangeModifiers.RETURN_DETAILED_RESULTS),timeUnit.toMillis(timeout));  ChangedEntryDetails<T> changedEntryDetails=getSingleChangedEntryDetails(changeResult);  if (changedEntryDetails == null)   return null;  ChangeOperationResult changeOperationResult=changedEntryDetails.getChangeOperationsResults().get(0);  return (D)IncrementOperation.getNewValue(changeOperationResult);}  }
class C{  private MyUtils(){}  }
class C{  protected void awaitCompletionComputeValuesAndShutdown(){{    runExecutorAndAwaitCompletion();  }  if (logger.isDebugEnabled())   printStats();  executor.shutdown();  while (!executor.isTerminated()) {    try {      Thread.sleep(100);    } catch (    InterruptedException e) {      e.printStackTrace();    }  }}  }
class C{  @Override public void suiteEnd(){  throw new UnsupportedOperationException();}  }
class C{  private boolean computeChange(IProgressMonitor monitor) throws TeamException {  boolean needToUpdateReferenceDocument=false;  if (isReferenceInitialized) {    SyncInfo info=getSyncState(getFileFromEditor());    if (info == null && fLastSyncState != null) {      return true;    } else     if (info == null) {      return false;    }    if (fLastSyncState == null) {      needToUpdateReferenceDocument=true;    } else     if (!fLastSyncState.equals(info)) {      needToUpdateReferenceDocument=true;    }    if (DEBUG)     debug(fLastSyncState,info);    fLastSyncState=info;  }  return needToUpdateReferenceDocument;}  }
class C{  public static void injectToData(Object target,Bundle data){  if (target == null || data == null)   return;  ParcelInjector injector;  try {    injector=getInjectorByClass(target.getClass());    injector.injectDataToBundle(target,data);  } catch (  Exception e) {    throw new RuntimeException(String.format("inject failed : %s",e.getMessage()),e);  }}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  public ConcurrentHashSet(){  map=new ConcurrentHashMap<E,Object>();}  }
class C{  public boolean deleteChildren(@NotNull NlComponent parent,@NotNull List<NlComponent> deleted){  return false;}  }
class C{  private int peekToken() throws XNIException {  if (fCurrentTokenIndex == fTokenCount)   reportError("XPointerElementSchemeProcessingError",null);  return fTokens[fCurrentTokenIndex];}  }
class C{  public final static byte[] decode(byte[] sArr){  int sLen=sArr.length;  int sepCnt=0;  for (int i=0; i < sLen; i++)   if (IA[sArr[i] & 0xff] < 0)   sepCnt++;  if ((sLen - sepCnt) % 4 != 0)   return null;  int pad=0;  for (int i=sLen; i > 1 && IA[sArr[--i] & 0xff] <= 0; )   if (sArr[i] == '=')   pad++;  int len=((sLen - sepCnt) * 6 >> 3) - pad;  byte[] dArr=new byte[len];  for (int s=0, d=0; d < len; ) {    int i=0;    for (int j=0; j < 4; j++) {      int c=IA[sArr[s++] & 0xff];      if (c >= 0)       i|=c << (18 - j * 6); else       j--;    }    dArr[d++]=(byte)(i >> 16);    if (d < len) {      dArr[d++]=(byte)(i >> 8);      if (d < len)       dArr[d++]=(byte)i;    }  }  return dArr;}  }
class C{  public PhotosGetAllQueryWithExtended(VkApiClient client,UserActor actor){  super(client,"photos.getAll",GetAllExtendedResponse.class);  accessToken(actor.getAccessToken());  extended(true);}  }
class C{  protected FloatControl(Type type,float minimum,float maximum,float precision,int updatePeriod,float initialValue,String units,String minLabel,String midLabel,String maxLabel){  super(type);  if (minimum > maximum) {    throw new IllegalArgumentException("Minimum value " + minimum + " exceeds maximum value "+ maximum+ ".");  }  if (initialValue < minimum) {    throw new IllegalArgumentException("Initial value " + initialValue + " smaller than allowable minimum value "+ minimum+ ".");  }  if (initialValue > maximum) {    throw new IllegalArgumentException("Initial value " + initialValue + " exceeds allowable maximum value "+ maximum+ ".");  }  this.minimum=minimum;  this.maximum=maximum;  this.precision=precision;  this.updatePeriod=updatePeriod;  this.value=initialValue;  this.units=units;  this.minLabel=((minLabel == null) ? "" : minLabel);  this.midLabel=((midLabel == null) ? "" : midLabel);  this.maxLabel=((maxLabel == null) ? "" : maxLabel);}  }
class C{  public boolean contains(Vertex v){  return UniqueVertices.containsKey(v.getLabel());}  }
class C{  public ReplicateLaterWindow fillDay(String date){  dateField.sendKeys(date);  return this;}  }
class C{  private void appendObjectHeaders(StringBuilder builder,String prefix,Set<Entry<String,List<Object>>> entries){  for (  Entry<String,List<Object>> e : entries) {    appendHeader(builder,prefix,e.getKey(),e.getValue());  }}  }
class C{  @Override public void onClick(View v){switch (v.getId()) {case R.id.dialog_path_copyBtn:    ((ClipboardManager)getActivity().getSystemService(Context.CLIPBOARD_SERVICE)).setPrimaryClip(ClipData.newPlainText("storage/emulated/0/Pictures/Mysplash","storage/emulated/0/Pictures/Mysplash"));  break;case R.id.dialog_path_enterBtn:dismiss();break;}}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("copy what=clusterViewer;");  ClusterViewer viewer=getViewer();  StringBuilder buf=new StringBuilder();  int i=viewer.getTabbedIndex();  if (i == ClusterViewer.UPGMA_TAB_INDEX) {    Collection<String> labels=viewer.getUpgmaTab().getGraphView().getSelectedNodeLabels(true);    for (    String label : labels) {      if (buf.length() > 0)       buf.append("\t");      buf.append(label);    }  } else   if (i == ClusterViewer.NNET_TAB_INDEX) {    Collection<String> labels=viewer.getNnetTab().getGraphView().getSelectedNodeLabels(true);    for (    String label : labels) {      if (buf.length() > 0)       buf.append("\t");      buf.append(label);    }  } else   if (i == ClusterViewer.PCoA_TAB_INDEX) {    Collection<String> labels=viewer.getPcoaTab().getGraphView().getSelectedNodeLabels(false);    for (    String label : labels) {      if (buf.length() > 0)       buf.append("\t");      buf.append(label);    }  } else   if (i == ClusterViewer.MATRIX_TAB_INDEX) {    JTable table=viewer.getMatrixTab().getTable();    for (int row=0; row < table.getRowCount(); row++) {      boolean first=true;      for (int col=0; col < table.getColumnCount(); col++) {        if (!table.getSelectionModel().isSelectionEmpty() || table.isCellSelected(row,col)) {          if (first)           first=false; else           buf.append("\t");          buf.append(table.getValueAt(row,col));        }      }      buf.append("\n");    }  }  if (buf.length() > 0) {    StringSelection stringSelection=new StringSelection(buf.toString());    Toolkit.getDefaultToolkit().getSystemClipboard().setContents(stringSelection,stringSelection);  }}  }
class C{  private static S2Point[] createRegularPolygonVertices(final Vector3D center,final Vector3D meridian,final double outsideRadius,final int n){  final S2Point[] array=new S2Point[n];  final Rotation r0=new Rotation(Vector3D.crossProduct(center,meridian),outsideRadius,RotationConvention.VECTOR_OPERATOR);  array[0]=new S2Point(r0.applyTo(center));  final Rotation r=new Rotation(center,MathUtils.TWO_PI / n,RotationConvention.VECTOR_OPERATOR);  for (int i=1; i < n; ++i) {    array[i]=new S2Point(r.applyTo(array[i - 1].getVector()));  }  return array;}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public synchronized VisualTable addTable(String group,Table table,Predicate filter,Schema schema){  VisualTable vt=new VisualTable(table,this,group,filter,schema);  addDataGroup(group,vt,table);  return vt;}  }
class C{  Node(Node<K,V> parent,K key,Node<K,V> next,Node<K,V> prev){  this.parent=parent;  this.key=key;  this.height=1;  this.next=next;  this.prev=prev;  prev.next=this;  next.prev=this;}  }
class C{  public static PlaceholderFragment newInstance(int sectionNumber){  PlaceholderFragment fragment=new PlaceholderFragment();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  public void close(){  if (null != announcer) {    try {      announcer.unannounce();    } catch (    IOException e) {      logger.warn("Error on unannouncing service : ",e);    }    announcer.close();  }  closeServer(Pair.of(dlService,server),gracefulShutdownMs,TimeUnit.MILLISECONDS);  if (null != statsProvider) {    statsProvider.stop();  }  SchedulerUtils.shutdownScheduler(configExecutorService,60,TimeUnit.SECONDS);  keepAliveLatch.countDown();}  }
class C{  public boolean isDataApproval(){  return dataApprovalLevels != null && !dataApprovalLevels.isEmpty();}  }
class C{  public int size(){  return cartLines.size();}  }
class C{  @Deprecated public Builder cacheOnDisc(boolean cacheOnDisk){  return cacheOnDisk(cacheOnDisk);}  }
class C{  public void computeId2Data(int numberOfDatasets,Map<Integer,Integer[]> id2counts,Map<Integer,NodeData> id2data){  id2data.clear();  if (id2counts != null) {    if (ClassificationManager.isTaxonomy(getName()))     computeTaxonomyId2DataRec(numberOfDatasets,getRoot(),id2counts,id2data); else     computeId2DataRec(numberOfDatasets,getRoot(),id2counts,new HashMap<Integer,Set<Integer>>(),id2data);  }}  }
class C{  @VisibleForTesting void addPendingInvalidation(Context context,String account,PendingInvalidation invalidation){  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);  String oldAccount=prefs.getString(DELAYED_ACCOUNT_NAME,null);  Set<String> invals=prefs.getStringSet(DELAYED_INVALIDATIONS,new HashSet<String>(1));  assert invals.isEmpty() || oldAccount != null;  if (oldAccount != null && !oldAccount.equals(account)) {    invals.clear();  }  SharedPreferences.Editor editor=prefs.edit();  editor.putString(DELAYED_ACCOUNT_NAME,account);  if (invalidation.mObjectSource == 0 || (oldAccount != null && invals.isEmpty())) {    editor.putStringSet(DELAYED_INVALIDATIONS,null);  } else {    invals.add(invalidation.encodeToString());    editor.putStringSet(DELAYED_INVALIDATIONS,invals);  }  editor.apply();}  }
class C{  private synchronized void addTableLockObject(AbsoluteTableIdentifier absoluteTableIdentifier){  if (null == tableLockMap.get(absoluteTableIdentifier)) {    tableLockMap.put(absoluteTableIdentifier,new Object());  }}  }
class C{  public AdsGetAdsLayoutQuery includeDeleted(Boolean value){  return unsafeParam("include_deleted",value);}  }
class C{  public static TapTarget forBounds(Rect bounds,CharSequence title,@Nullable CharSequence description){  return new TapTarget(bounds,title,description);}  }
class C{  public static boolean isNavBarOnBottom(@NonNull Context context){  final Resources res=context.getResources();  final Configuration cfg=context.getResources().getConfiguration();  final DisplayMetrics dm=res.getDisplayMetrics();  boolean canMove=(dm.widthPixels != dm.heightPixels && cfg.smallestScreenWidthDp < 600);  return (!canMove || dm.widthPixels < dm.heightPixels);}  }
class C{  public static void operate(ResourceResolverFactory factory,String userId,OperateCallback callback) throws OperateException {  ResourceResolver resolver=null;  try {    resolver=getResourceResolverForUser(factory,userId);    callback.operate(resolver);    resolver.commit();  } catch (  Exception e) {    throw new OperateException(OPERATE_ERROR_MESSAGE,e);  } finally {    if (resolver != null && resolver.isLive()) {      resolver.close();    }  }}  }
class C{  private static BSPTree<Euclidean3D> buildBoundary(final double xMin,final double xMax,final double yMin,final double yMax,final double zMin,final double zMax,final double tolerance){  if ((xMin >= xMax - tolerance) || (yMin >= yMax - tolerance) || (zMin >= zMax - tolerance)) {    return new BSPTree<Euclidean3D>(Boolean.FALSE);  }  final Plane pxMin=new Plane(new Vector3D(xMin,0,0),Vector3D.MINUS_I,tolerance);  final Plane pxMax=new Plane(new Vector3D(xMax,0,0),Vector3D.PLUS_I,tolerance);  final Plane pyMin=new Plane(new Vector3D(0,yMin,0),Vector3D.MINUS_J,tolerance);  final Plane pyMax=new Plane(new Vector3D(0,yMax,0),Vector3D.PLUS_J,tolerance);  final Plane pzMin=new Plane(new Vector3D(0,0,zMin),Vector3D.MINUS_K,tolerance);  final Plane pzMax=new Plane(new Vector3D(0,0,zMax),Vector3D.PLUS_K,tolerance);  final Region<Euclidean3D> boundary=new RegionFactory<Euclidean3D>().buildConvex(pxMin,pxMax,pyMin,pyMax,pzMin,pzMax);  return boundary.getTree(false);}  }
class C{  <T>Property(Function<Experiment,T> propertyExtractor,BiPredicate<T,String> filterPredicate){  this.propertyExtractor=propertyExtractor;  this.filterPredicate=filterPredicate;}  }
class C{  public LongFileGetterInMemory(File file) throws IOException {  limit=file.length() / 8;  data=new long[(int)((limit >>> BITS)) + 1][];  final int length0=(1 << BITS);  for (int i=0; i < data.length; i++) {    int length=(i < data.length - 1 ? length0 : (int)(limit & BIT_MASK) + 1);    data[i]=new long[length];  }  try (BufferedInputStream ins=new BufferedInputStream(new FileInputStream(file));ProgressPercentage progress=new ProgressPercentage("Reading file: " + file,limit)){    int whichArray=0;    int indexInArray=0;    for (long index=0; index < limit; index++) {      data[whichArray][indexInArray]=(((long)ins.read()) << 56) | (((long)ins.read()) << 48) | (((long)ins.read()) << 40)| (((long)ins.read()) << 32)| (((long)ins.read()) << 24)| (((long)ins.read() & 0xFF) << 16)| (((long)ins.read() & 0xFF) << 8)| (((long)ins.read() & 0xFF));      if (++indexInArray == length0) {        whichArray++;        indexInArray=0;      }      progress.setProgress(index);    }  } }  }
class C{  public static CacheHeader readHeader(InputStream is) throws IOException {  CacheHeader entry=new CacheHeader();  int magic=readInt(is);  if (magic != CACHE_MAGIC) {    throw new IOException();  }  entry.key=readString(is);  entry.etag=readString(is);  if (entry.etag.equals("")) {    entry.etag=null;  }  entry.serverDate=readLong(is);  entry.lastModified=readLong(is);  entry.ttl=readLong(is);  entry.softTtl=readLong(is);  entry.responseHeaders=readStringStringMap(is);  return entry;}  }
class C{  void skipNextUpdateDelay(){  mySkipWait=true;}  }
class C{  @Override public void populateField(ReferencedEnvelope value){  xMinTextField.setText(Double.toString(value.getMinX()));  xMaxTextField.setText(Double.toString(value.getMaxX()));  yMinTextField.setText(Double.toString(value.getMinY()));  yMaxTextField.setText(Double.toString(value.getMaxY()));  String key=CoordManager.getInstance().getCRSCode(value.getCoordinateReferenceSystem());  crsComboBox.setSelectValueKey(key);  UndoManager.getInstance().addUndoEvent(new UndoEvent(this,getFieldId(),oldValueObj,value));  oldValueObj=value;}  }
class C{  private static void appendAndStyleText(SpannableStringBuilder builder,SuggestionAnswer.TextField textField,int maxTextHeightSp,Paint.FontMetrics metrics,float density){  String text=textField.getText();  int type=textField.getType();  text=Html.fromHtml(text).toString();  int start=builder.length();  builder.append(Html.fromHtml(text));  int end=builder.length();  AbsoluteSizeSpan sizeSpan=new AbsoluteSizeSpan(getAnswerTextSizeSp(type),true);  builder.setSpan(sizeSpan,start,end,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);  ForegroundColorSpan colorSpan=new ForegroundColorSpan(getAnswerTextColor(type));  builder.setSpan(colorSpan,start,end,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);  if (type == ANSWERS_TOP_ALIGNED_TEXT_TYPE) {    TopAlignedSpan topAlignedSpan=new TopAlignedSpan(ANSWERS_TOP_ALIGNED_TEXT_SIZE_SP,maxTextHeightSp,metrics,density);    builder.setSpan(topAlignedSpan,start,end,Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);  }}  }
class C{  public static FloatBuffer createFloatBuffer(Vector3f... data){  if (data == null) {    return null;  }  FloatBuffer buff=createFloatBuffer(3 * data.length);  for (int x=0; x < data.length; x++) {    if (data[x] != null) {      buff.put(data[x].x).put(data[x].y).put(data[x].z);    } else {      buff.put(0).put(0).put(0);    }  }  buff.flip();  return buff;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COUNT_REMAIN_PLAYTIME_WITH_RESERVATION(String value0){  return new SM_SYSTEM_MESSAGE(1400052,value0);}  }
class C{  public static boolean isCyberware(ItemStack stack){  return stack != null && (stack.getItem() instanceof ICyberware || getLinkedWare(stack) != null);}  }
class C{  public boolean has(String memberName){  return members.containsKey(memberName);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ProcATK_Instant_INTERVAL_TO_ME(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201202,num0,skillname);}  }
class C{  public void resetResendCount(){  resendCount=0;  if (nodeInitStageAdvancer.isInitializationComplete() && isDead() == false) {    nodeInitStageAdvancer.startInitialisation(ZWaveNodeInitStage.DONE);  }}  }
class C{  public String toString(){  return " at " + this.index + " [character "+ this.character+ " line "+ this.line+ "]";}  }
class C{  public void requestProjectSync(@NotNull Project project,boolean generateSourcesOnSuccess,@Nullable GradleSyncListener listener){  requestProjectSync(project,false,generateSourcesOnSuccess,false,listener);}  }
class C{  public RequestHandle delete(Context context,String url,Header[] headers,RequestParams params,ResponseHandlerInterface responseHandler){  HttpDelete httpDelete=new HttpDelete(getUrlWithQueryString(isUrlEncodingEnabled,url,params));  if (headers != null)   httpDelete.setHeaders(headers);  return sendRequest(httpClient,httpContext,httpDelete,null,responseHandler,context);}  }
class C{  public boolean match(int bitWidth,long polynomial,long initial,long xorOut,boolean reflected){  return bitWidth == this.bitWidth && polynomial == this.polynomial && initial == this.initial && xorOut == this.xorOut && reflected == this.reflected;}  }
class C{  public Single<Void> writeUserInDatabase(final String _userId,final String _name){  User user=new User(_name);  DatabaseReference targetChild=this.firebaseDatabase.getReference().child(FIREBASE_CHILD_KEY_USERS).child(_userId);  return observeSingleValue(targetChild.setValue(user));}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  public void replacePeriodsWithStartEndDates(){  List<Period> periods=asTypedList(getDimensionOrFilterItems(PERIOD_DIM_ID));  for (  Period period : periods) {    Date start=period.getStartDate();    Date end=period.getEndDate();    if (startDate == null || (start != null && start.before(startDate))) {      startDate=start;    }    if (endDate == null || (end != null && end.after(endDate))) {      endDate=end;    }  }  removeDimensionOrFilter(PERIOD_DIM_ID);}  }
class C{  public int hashCode(){  return lease.getReferentUuid().hashCode();}  }
class C{  @Override public int hashCode(){  return proxyObject.hashCode();}  }
class C{  private static int matchlen(byte[] oldBuf,int oldSize,int oldOffset,byte[] newBuf,int newSize,int newOffset){  int end=Math.min(oldSize - oldOffset,newSize - newOffset);  for (int i=0; i < end; i++) {    if (oldBuf[oldOffset + i] != newBuf[newOffset + i]) {      return i;    }  }  return end;}  }
class C{  public void error(String message,Object... args){  currentTest.get().error(String.format(message,args));}  }
class C{  public void requestAutoFocus(Handler handler,int message){  if (camera != null && previewing) {    autoFocusCallback.setHandler(handler,message);    try {      camera.autoFocus(autoFocusCallback);    } catch (    Exception e) {    }  }}  }
class C{  public Object clone(){  Object newObject=null;  try {    newObject=super.clone();  } catch (  CloneNotSupportedException e) {    e.printStackTrace();  }  return newObject;}  }
class C{  private String eFormatString(double x,char eChar){  boolean noDigits=false;  char[] ca4, ca5;  if (Double.isInfinite(x)) {    if (x == Double.POSITIVE_INFINITY) {      if (leadingSign)       ca4="+Inf".toCharArray(); else       if (leadingSpace)       ca4=" Inf".toCharArray(); else       ca4="Inf".toCharArray();    } else     ca4="-Inf".toCharArray();    noDigits=true;  } else   if (Double.isNaN(x)) {    if (leadingSign)     ca4="+NaN".toCharArray(); else     if (leadingSpace)     ca4=" NaN".toCharArray(); else     ca4="NaN".toCharArray();    noDigits=true;  } else   ca4=eFormatDigits(x,eChar);  ca5=applyFloatPadding(ca4,false);  return new String(ca5);}  }
class C{  public Matrix solve(Matrix B){  if (B.getRowDimension() != n) {    throw new IllegalArgumentException("Matrix row dimensions must agree.");  }  if (!isspd) {    throw new RuntimeException("Matrix is not symmetric positive definite.");  }  double[][] X=B.getArrayCopy();  int nx=B.getColumnDimension();  for (int k=0; k < n; k++) {    for (int j=0; j < nx; j++) {      for (int i=0; i < k; i++) {        X[k][j]-=X[i][j] * L[k][i];      }      X[k][j]/=L[k][k];    }  }  for (int k=n - 1; k >= 0; k--) {    for (int j=0; j < nx; j++) {      for (int i=k + 1; i < n; i++) {        X[k][j]-=X[i][j] * L[i][k];      }      X[k][j]/=L[k][k];    }  }  return new Matrix(X,n,nx);}  }
class C{  public boolean hasCategoryOptions(){  return categoryOptions != null && !categoryOptions.isEmpty();}  }
class C{  public void onProcessConnection(){  LOGGER.info("onProcessConnection - Connection");  LOGGER.info("{}",this.processConnectionRequest);  String xmlprocessConnectionResponse=this.supervisionManager.onProcessConnection(this.processConnectionRequest);  assertNotNull(xmlprocessConnectionResponse);  LOGGER.info(xmlprocessConnectionResponse);  try {    this.processConnectionResponse=(ProcessConnectionResponse)this.xmlConverter.fromXml(xmlprocessConnectionResponse);  } catch (  Exception e) {    LOGGER.error(e.toString());  }  assertNotNull(this.processConnectionResponse);  LOGGER.info(this.processConnectionResponse.toString());}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  private int calculateLayoutWidth(int widthSize,int mode){  initResourcesIfNecessary();  itemsLayout.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));  itemsLayout.measure(MeasureSpec.makeMeasureSpec(widthSize,MeasureSpec.UNSPECIFIED),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));  int width=itemsLayout.getMeasuredWidth();  if (mode == MeasureSpec.EXACTLY) {    width=widthSize;  } else {    width+=2 * PADDING;    width=Math.max(width,getSuggestedMinimumWidth());    if (mode == MeasureSpec.AT_MOST && widthSize < width) {      width=widthSize;    }  }  itemsLayout.measure(MeasureSpec.makeMeasureSpec(width - 2 * PADDING,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));  return width;}  }
class C{  @Override public void fatalError(String domain,String key,XMLParseException ex) throws XNIException {  printError("Fatal Error",ex);  throw ex;}  }
class C{  public static Version version(){  final IntByReference major=new IntByReference();  final IntByReference minor=new IntByReference();  final IntByReference patch=new IntByReference();  LIB.mdb_version(major,minor,patch);  return new Version(major.intValue(),minor.intValue(),patch.intValue());}  }
class C{  public boolean isLedgerHandleClosed(LedgerDescriptor ledgerDesc) throws BKException {  RefCountedLedgerHandle refhandle=getLedgerHandle(ledgerDesc);  if (null == refhandle) {    LOG.error("Accessing ledger {} without opening.",ledgerDesc);    throw BKException.create(BKException.Code.UnexpectedConditionException);  }  return refhandle.handle.isClosed();}  }
class C{  public TranslatedMessage(@Nonnull String name,@Nonnull String... replacements){  this.name=Preconditions.checkNotNull(name,"name");  this.replacements=ImmutableList.copyOf(replacements);}  }
class C{  protected String names(Token[] tokens){  StringBuilder buf=new StringBuilder();  for (  Token token : tokens) {    if (isIgnored(token.kind)) {      continue;    }    if (buf.length() > 0) {      buf.append(' ');    }    buf.append(token.kind.name());  }  return buf.toString();}  }
class C{  private String[] extractDispositionInfo(String line) throws IOException {  String[] retval=new String[4];  String origline=line;  line=origline.toLowerCase();  int start=line.indexOf("content-disposition: ");  int end=line.indexOf(";");  if (start == -1 || end == -1) {    throw new IOException("Content disposition corrupt: " + origline);  }  String disposition=line.substring(start + 21,end);  if (!disposition.equals("form-data")) {    throw new IOException("Invalid content disposition: " + disposition);  }  start=line.indexOf("name=\"",end);  end=line.indexOf("\"",start + 7);  int startOffset=6;  if (start == -1 || end == -1) {    start=line.indexOf("name=",end);    end=line.indexOf(";",start + 6);    if (start == -1) {      throw new IOException("Content disposition corrupt: " + origline);    } else     if (end == -1) {      end=line.length();    }    startOffset=5;  }  String name=origline.substring(start + startOffset,end);  String filename=null;  String origname=null;  start=line.indexOf("filename=\"",end + 2);  end=line.indexOf("\"",start + 10);  if (start != -1 && end != -1) {    filename=origline.substring(start + 10,end);    origname=filename;    int slash=Math.max(filename.lastIndexOf('/'),filename.lastIndexOf('\\'));    if (slash > -1) {      filename=filename.substring(slash + 1);    }  }  retval[0]=disposition;  retval[1]=name;  retval[2]=filename;  retval[3]=origname;  return retval;}  }
class C{  protected PhotosRestoreCommentQuery commentId(int value){  return unsafeParam("comment_id",value);}  }
class C{  public static <T>Iterable<T> Iterable(){  return null;}  }
class C{  public void dismiss(boolean tappedTarget){  pulseAnimation.cancel();  expandAnimation.cancel();  if (tappedTarget) {    dismissConfirmAnimation.start();  } else {    dismissAnimation.start();  }}  }
class C{  public static ValueGetterSpacePredicate<ServerEntry> pathAll(String path,ISpacePredicate... predicates){  return path(path,all(predicates));}  }
class C{  private boolean containsKey(final int key,final int index){  return (key != 0 || states[index] == FULL) && keys[index] == key;}  }
class C{  public DocsSaveQuery(VkApiClient client,Actor actor,String file){  super(client,"docs.save",Doc.class);  accessToken(actor.getAccessToken());  file(file);}  }
class C{  public static InputStream toInputStream(String input){  return toInputStream(input,Charset.defaultCharset());}  }
class C{  public boolean isOptional(){  return optional;}  }
class C{  public static double trigamma(double x){  if (Double.isNaN(x) || Double.isInfinite(x)) {    return x;  }  if (x > 0 && x <= S_LIMIT) {    return 1 / (x * x);  }  if (x >= C_LIMIT) {    double inv=1 / (x * x);    return 1 / x + inv / 2 + inv / x * (1.0 / 6 - inv * (1.0 / 30 + inv / 42));  }  return trigamma(x + 1) + 1 / (x * x);}  }
class C{  public void putAll(Table<R,C,V> table){  for (  R rowKey : table.rowKeySet()) {    Map<C,V> row=table.row(rowKey);    for (    C columnKey : row.keySet()) {      put(rowKey,columnKey,row.get(columnKey));    }  }}  }
class C{  public boolean isSwipeEnable(){  return swipeEnable;}  }
class C{  public static void main(String[] args){  byte[] json="{\"name\":\"Elvis\"}".getBytes(StandardCharsets.UTF_8);  JsonParser parser=new JsonParser();  PrettyPrinter prettyPrinter=new PrettyPrinter();  int i=0;  int event;  do {    while ((event=parser.nextEvent()) == JsonEvent.NEED_MORE_INPUT) {      i+=parser.getFeeder().feed(json,i,json.length - i);      if (i == json.length) {        parser.getFeeder().done();      }    }    prettyPrinter.onEvent(event,parser);  } while (event != JsonEvent.EOF);  System.out.println(prettyPrinter.getResult());}  }
class C{  public void testReadXmlLangOldStyle() throws Exception {  Properties result=xmlToProperties("_");  assertNotNull(result);  assertTrue(!result.isEmpty());  assertEquals(1,result.size());  assertEquals("Key Value",result.getProperty("PropertyKey"));}  }
class C{  protected void updateSelectedPathsFromSelectedRows(){  if (!updatingListSelectionModel) {    updatingListSelectionModel=true;    try {      int min=listSelectionModel.getMinSelectionIndex();      int max=listSelectionModel.getMaxSelectionIndex();      clearSelection();      if (min != -1 && max != -1) {        for (int counter=min; counter <= max; counter++) {          if (listSelectionModel.isSelectedIndex(counter)) {            TreePath selPath=tree.getPathForRow(counter);            if (selPath != null) {              addSelectionPath(selPath);            }          }        }      }    }  finally {      updatingListSelectionModel=false;    }  }}  }
class C{  public DexPatchGenerator(File oldDexFile,InputStream newDexStream) throws IOException {  this(new Dex(oldDexFile),new Dex(newDexStream));}  }
class C{  protected Set<LogicalTable> generateTables(String tableName,LogicalTableDictionary tableDictionary) throws BadApiRequestException {  Set<LogicalTable> generated=tableDictionary.values().stream().filter(null).collect(Collectors.toCollection(null));  if (generated.isEmpty()) {    String msg;    if (tableDictionary.isEmpty()) {      msg=EMPTY_DICTIONARY.logFormat("Logical Table");    } else {      msg=TABLE_UNDEFINED.logFormat(tableName);    }    LOG.error(msg);    throw new BadApiRequestException(msg);  }  LOG.trace("Generated set of logical tables: {}",generated);  return generated;}  }
class C{  private void updateSymbol(FieldIdEnum changedField){  if (!Controller.getInstance().isPopulating()) {    UserLayer userLayer=getStyleFactory().createUserLayer();    String name=fieldConfigVisitor.getText(FieldIdEnum.NAME);    userLayer.setName(name);    List<FeatureTypeConstraint> ftcList=fieldConfigVisitor.getFeatureTypeConstraint(FieldIdEnum.LAYER_FEATURE_CONSTRAINTS);    if ((ftcList != null) && !ftcList.isEmpty()) {      FeatureTypeConstraint[] ftcArray=new FeatureTypeConstraint[ftcList.size()];      userLayer.setLayerFeatureConstraints(ftcList.toArray(ftcArray));    }    GroupConfigInterface group=getGroup(GroupIdEnum.USER_LAYER_SOURCE);    if (group != null) {      MultiOptionGroup userLayerSourceGroup=(MultiOptionGroup)group;      OptionGroup selectedOption=userLayerSourceGroup.getSelectedOptionGroup();switch (selectedOption.getId()) {case REMOTE_OWS:{          RemoteOWS remoteOWS=new RemoteOWSImpl();          String service=fieldConfigVisitor.getText(FieldIdEnum.REMOTE_OWS_SERVICE);          remoteOWS.setService(service);          String onlineResource=fieldConfigVisitor.getText(FieldIdEnum.REMOTE_OWS_ONLINERESOURCE);          remoteOWS.setOnlineResource(onlineResource);          userLayer.setRemoteOWS(remoteOWS);        }      break;case INLINE_FEATURE:{      String inlineFeatures=fieldConfigVisitor.getText(FieldIdEnum.INLINE_FEATURE);      if ((inlineFeatures != null) && (!inlineFeatures.isEmpty())) {        InlineFeatureUtils.setInlineFeatures(userLayer,inlineFeatures);      }    }  break;default :break;}}StyledLayer existingStyledLayer=SelectedSymbol.getInstance().getStyledLayer();if (existingStyledLayer instanceof UserLayerImpl) {UserLayerImpl existingUserLayer=(UserLayerImpl)existingStyledLayer;for (Style style : existingUserLayer.userStyles()) {userLayer.addUserStyle(style);}}SelectedSymbol.getInstance().replaceStyledLayer(userLayer);if (changedField != null) {if (changedField == FieldIdEnum.INLINE_FEATURE) {DataSourceInterface dataSource=DataSourceFactory.getDataSource();if (dataSource != null) {dataSource.updateUserLayers();}}}this.fireUpdateSymbol();}}  }
class C{  void initFromCameraParameters(OpenCamera camera){  Camera.Parameters parameters=camera.getCamera().getParameters();  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  int displayRotation=display.getRotation();  int cwRotationFromNaturalToDisplay;switch (displayRotation) {case Surface.ROTATION_0:    cwRotationFromNaturalToDisplay=0;  break;case Surface.ROTATION_90:cwRotationFromNaturalToDisplay=90;break;case Surface.ROTATION_180:cwRotationFromNaturalToDisplay=180;break;case Surface.ROTATION_270:cwRotationFromNaturalToDisplay=270;break;default :if (displayRotation % 90 == 0) {cwRotationFromNaturalToDisplay=(360 + displayRotation) % 360;} else {throw new IllegalArgumentException("Bad rotation: " + displayRotation);}}Log.i(TAG,"Display at: " + cwRotationFromNaturalToDisplay);int cwRotationFromNaturalToCamera=camera.getOrientation();Log.i(TAG,"Camera at: " + cwRotationFromNaturalToCamera);if (camera.getFacing() == CameraFacing.FRONT) {cwRotationFromNaturalToCamera=(360 - cwRotationFromNaturalToCamera) % 360;Log.i(TAG,"Front camera overriden to: " + cwRotationFromNaturalToCamera);}cwRotationFromDisplayToCamera=(360 + cwRotationFromNaturalToCamera - cwRotationFromNaturalToDisplay) % 360;Log.i(TAG,"Final display orientation: " + cwRotationFromDisplayToCamera);if (camera.getFacing() == CameraFacing.FRONT) {Log.i(TAG,"Compensating rotation for front camera");cwNeededRotation=(360 - cwRotationFromDisplayToCamera) % 360;} else {cwNeededRotation=cwRotationFromDisplayToCamera;}Log.i(TAG,"Clockwise rotation from display to camera: " + cwNeededRotation);Point theScreenResolution=new Point();display.getSize(theScreenResolution);screenResolution=theScreenResolution;Log.i(TAG,"Screen resolution in current orientation: " + screenResolution);cameraResolution=CameraConfigurationUtils.findBestPreviewSizeValue(parameters,screenResolution);Log.i(TAG,"Camera resolution: " + cameraResolution);bestPreviewSize=CameraConfigurationUtils.findBestPreviewSizeValue(parameters,screenResolution);Log.i(TAG,"Best available preview size: " + bestPreviewSize);boolean isScreenPortrait=screenResolution.x < screenResolution.y;boolean isPreviewSizePortrait=bestPreviewSize.x < bestPreviewSize.y;if (isScreenPortrait == isPreviewSizePortrait) {previewSizeOnScreen=bestPreviewSize;} else {previewSizeOnScreen=new Point(bestPreviewSize.y,bestPreviewSize.x);}Log.i(TAG,"Preview size on screen: " + previewSizeOnScreen);}  }
class C{  public int addChild(int parent){  int child=super.addNodeRow();  addChildEdge(parent,child);  return child;}  }
class C{  @Override public Object illegal(Metadata<DTO> metadata){  return null;}  }
class C{  @Override protected void initToolbar(Bundle savedInstanceState){}  }
class C{  @Override public IAssignmentAlgorithm createAssignmentAlgorithm(){  return new AssignmentUsingLCA(cName);}  }
class C{  public void remove(){  throw new UnsupportedOperationException();}  }
class C{  public boolean isProjective(){  return true;}  }
class C{  protected boolean isXml(HttpServletRequest request){  String type=request.getContentType();  type=!StringUtils.isEmpty(type) ? type : MediaType.APPLICATION_JSON_VALUE;  if (request.getPathInfo().endsWith(".xml")) {    type=MediaType.APPLICATION_XML_VALUE;  }  return isCompatibleWith(type,MediaType.APPLICATION_XML);}  }
class C{  private static void check(Matrix X,Matrix Y){  double eps=Math.pow(2.0,-52.0);  if (X.norm1() == 0. & Y.norm1() < 10 * eps)   return;  if (Y.norm1() == 0. & X.norm1() < 10 * eps)   return;  if (X.minus(Y).norm1() > 1000 * eps * Math.max(X.norm1(),Y.norm1())) {    throw new RuntimeException("The norm of (X-Y) is too large: " + Double.toString(X.minus(Y).norm1()));  }}  }
class C{  void discardFromIdle(ResourceKey<K> resourceKey,R resource){  resourceKey.removeFromTransferStack();  if (timeToIdlePolicy.isPresent()) {    timeToIdlePolicy.get().invalidate(resourceKey);  }  lifecycle.onRemoval(resourceKey.getKey(),resource);}  }
class C{  private static void paintVerticalCenterConstraint(NlGraphics graphics,Rectangle sourceBounds,Rectangle targetBounds){  graphics.useStyle(GUIDELINE_DASHED);  graphics.drawLine(targetBounds.x,centerY(targetBounds),x2(targetBounds),centerY(targetBounds));  graphics.useStyle(GUIDELINE);  graphics.drawLine(sourceBounds.x,centerY(sourceBounds),x2(sourceBounds),centerY(sourceBounds));}  }
class C{  public static Color createColorFromString(String string){  if (string == null || string.trim().isEmpty()) {    return null;  }  string=string.startsWith(COLOR_PREFIX) ? string.substring(1) : string;  return new Color(Integer.parseInt(string,COLOR_RADIX));}  }
class C{  private boolean canLeave(Player activePlayer){  if (isBrigadeGeneral(activePlayer)) {    PacketSendUtility.sendPacket(activePlayer,SM_SYSTEM_MESSAGE.STR_GUILD_LEAVE_MASTER_CANT_LEAVE_BEFORE_CHANGE_MASTER);    return false;  }  return true;}  }
class C{  public Call post(String url,Map<String,String> params,Callback callback){  Request request=new Builder().url(url).post(bodyFromMap(params)).tag(url).build();  Call call=client.newCall(request);  call.enqueue(callback);  return call;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonBindingGroupGate_A_TO_SELF(String skillcaster,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200881,skillcaster,value0,skillname);}  }
class C{  private HttpEntity paramsToEntity(RequestParams params,ResponseHandlerInterface responseHandler){  HttpEntity entity=null;  try {    if (params != null) {      entity=params.getEntity(responseHandler);    }  } catch (  Throwable t) {    if (responseHandler != null)     responseHandler.sendFailureMessage(0,null,null,t); else     t.printStackTrace();  }  return entity;}  }
class C{  public static double hz2bark(double freqInHz){  double f=freqInHz / 600;  return 6 * Math.log(f + Math.sqrt((f * f) + 1));}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  public WallGetByIdQueryWithExtended(VkApiClient client,List<String> posts){  super(client,"wall.getById",GetByIdExtendedResponse.class);  posts(posts);  extended(true);}  }
class C{  public void actionPerformed(ActionEvent ev){  executeImmediately("set showGroups=" + (!isSelected()) + " style=convexHulls;");}  }
class C{  public Builder crs(ICRS crs){  this.crs=crs;  return this;}  }
class C{  public void clearExpressions(){  this.leftSide=null;  this.rightSide=null;}  }
class C{  @Override public void attributeDecl(String elementName,String attributeName,String type,String[] enumeration,String defaultType,XMLString defaultValue,XMLString nonNormalizedDefaultValue,Augmentations augs) throws XNIException {  if (type != XMLSymbols.fCDATASymbol && defaultValue != null) {    normalizeDefaultAttrValue(defaultValue);  }  if (fValidation) {    boolean duplicateAttributeDef=false;    DTDGrammar grammar=(fDTDGrammar != null ? fDTDGrammar : fGrammarBucket.getActiveGrammar());    int elementIndex=grammar.getElementDeclIndex(elementName);    if (grammar.getAttributeDeclIndex(elementIndex,attributeName) != -1) {      duplicateAttributeDef=true;      if (fWarnDuplicateAttdef) {        fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"MSG_DUPLICATE_ATTRIBUTE_DEFINITION",new Object[]{elementName,attributeName},XMLErrorReporter.SEVERITY_WARNING);      }    }    if (type == XMLSymbols.fIDSymbol) {      if (defaultValue != null && defaultValue.length != 0) {        if (defaultType == null || !(defaultType == XMLSymbols.fIMPLIEDSymbol || defaultType == XMLSymbols.fREQUIREDSymbol)) {          fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"IDDefaultTypeInvalid",new Object[]{attributeName},XMLErrorReporter.SEVERITY_ERROR);        }      }      if (!fTableOfIDAttributeNames.containsKey(elementName)) {        fTableOfIDAttributeNames.put(elementName,attributeName);      } else {        if (!duplicateAttributeDef) {          String previousIDAttributeName=(String)fTableOfIDAttributeNames.get(elementName);          fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"MSG_MORE_THAN_ONE_ID_ATTRIBUTE",new Object[]{elementName,previousIDAttributeName,attributeName},XMLErrorReporter.SEVERITY_ERROR);        }      }    }    if (type == XMLSymbols.fNOTATIONSymbol) {      for (int i=0; i < enumeration.length; i++) {        fNotationEnumVals.put(enumeration[i],attributeName);      }      if (fTableOfNOTATIONAttributeNames.containsKey(elementName) == false) {        fTableOfNOTATIONAttributeNames.put(elementName,attributeName);      } else {        if (!duplicateAttributeDef) {          String previousNOTATIONAttributeName=(String)fTableOfNOTATIONAttributeNames.get(elementName);          fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"MSG_MORE_THAN_ONE_NOTATION_ATTRIBUTE",new Object[]{elementName,previousNOTATIONAttributeName,attributeName},XMLErrorReporter.SEVERITY_ERROR);        }      }    }    if (type == XMLSymbols.fENUMERATIONSymbol || type == XMLSymbols.fNOTATIONSymbol) {      outer:       for (int i=0; i < enumeration.length; ++i) {        for (int j=i + 1; j < enumeration.length; ++j) {          if (enumeration[i].equals(enumeration[j])) {            fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,type == XMLSymbols.fENUMERATIONSymbol ? "MSG_DISTINCT_TOKENS_IN_ENUMERATION" : "MSG_DISTINCT_NOTATION_IN_ENUMERATION",new Object[]{elementName,enumeration[i],attributeName},XMLErrorReporter.SEVERITY_ERROR);            break outer;          }        }      }    }    boolean ok=true;    if (defaultValue != null && (defaultType == null || (defaultType != null && defaultType == XMLSymbols.fFIXEDSymbol))) {      String value=defaultValue.toString();      if (type == XMLSymbols.fNMTOKENSSymbol || type == XMLSymbols.fENTITIESSymbol || type == XMLSymbols.fIDREFSSymbol) {        StringTokenizer tokenizer=new StringTokenizer(value," ");        if (tokenizer.hasMoreTokens()) {          while (true) {            String nmtoken=tokenizer.nextToken();            if (type == XMLSymbols.fNMTOKENSSymbol) {              if (!isValidNmtoken(nmtoken)) {                ok=false;                break;              }            } else             if (type == XMLSymbols.fENTITIESSymbol || type == XMLSymbols.fIDREFSSymbol) {              if (!isValidName(nmtoken)) {                ok=false;                break;              }            }            if (!tokenizer.hasMoreTokens()) {              break;            }          }        }      } else {        if (type == XMLSymbols.fENTITYSymbol || type == XMLSymbols.fIDSymbol || type == XMLSymbols.fIDREFSymbol || type == XMLSymbols.fNOTATIONSymbol) {          if (!isValidName(value)) {            ok=false;          }        } else         if (type == XMLSymbols.fNMTOKENSymbol || type == XMLSymbols.fENUMERATIONSymbol) {          if (!isValidNmtoken(value)) {            ok=false;          }        }        if (type == XMLSymbols.fNOTATIONSymbol || type == XMLSymbols.fENUMERATIONSymbol) {          ok=false;          for (int i=0; i < enumeration.length; i++) {            if (defaultValue.equals(enumeration[i])) {              ok=true;            }          }        }      }      if (!ok) {        fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"MSG_ATT_DEFAULT_INVALID",new Object[]{attributeName,value},XMLErrorReporter.SEVERITY_ERROR);      }    }  }  if (fDTDGrammar != null)   fDTDGrammar.attributeDecl(elementName,attributeName,type,enumeration,defaultType,defaultValue,nonNormalizedDefaultValue,augs);  if (fDTDHandler != null) {    fDTDHandler.attributeDecl(elementName,attributeName,type,enumeration,defaultType,defaultValue,nonNormalizedDefaultValue,augs);  }}  }
class C{  public void revertToDefault(int row){}  }
class C{  private String generateFittingText(MethodUsage method,Rectangle2D rect,FontMetrics fontMetrics){  if (rect.getWidth() < fontMetrics.stringWidth("...")) {    return "";  }  String fullyQualified=method.getNameSpace() + "." + method.getName();  if (fontMetrics.stringWidth(fullyQualified) < rect.getWidth()) {    return fullyQualified;  }  String abbrevPackage=getShortPackageName(method.getNameSpace()) + "." + method.getName();  if (fontMetrics.stringWidth(abbrevPackage) < rect.getWidth()) {    return abbrevPackage;  }  if (fontMetrics.stringWidth(method.getName()) < rect.getWidth()) {    return method.getName();  }  return "";}  }
class C{  @RequestMapping(value={"/","/index.html"},method=RequestMethod.GET) public String returnHomeView(){  return "newHomePage";}  }
class C{  public void clear(){  currentAverage=-1;  usedFields=0;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Petrification_END_A_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200933,skilltarget);}  }
class C{  public Tuple[] clearInternal(){  Tuple[] t=new Tuple[getTupleCount()];  Iterator iter=tuples();  for (int i=0; iter.hasNext(); ++i) {    t[i]=(Tuple)iter.next();  }  m_tuples.clear();  return t;}  }
class C{  public boolean produceAtlas(){  try {    if (atlas != null) {      atlas.dispose();      atlas=null;    }    if (!AtlasData.getInstance().atlasCurrent) {      AtlasData.getInstance().writeAtlas();      AtlasData.getInstance().atlasCurrent=true;    }    atlas=AtlasData.getInstance().getAtlas();    for (    DrawableData data : AtlasData.getInstance().getDrawables()) {      String name=data.file.name();      name=DrawableData.proper(name);      Drawable drawable;      if (data.file.name().matches(".*\\.9\\.[a-zA-Z0-9]*$")) {        drawable=new NinePatchDrawable(atlas.createPatch(name));        if (data.tint != null) {          drawable=((NinePatchDrawable)drawable).tint(data.tint);        } else         if (data.tintName != null) {          drawable=((NinePatchDrawable)drawable).tint(JsonData.getInstance().getColorByName(data.tintName).color);        }      } else {        drawable=new SpriteDrawable(atlas.createSprite(name));        if (data.tint != null) {          drawable=((SpriteDrawable)drawable).tint(data.tint);        } else         if (data.tintName != null) {          drawable=((SpriteDrawable)drawable).tint(JsonData.getInstance().getColorByName(data.tintName).color);        }      }      drawablePairs.put(data.name,drawable);    }    return true;  } catch (  Exception e) {    Gdx.app.error(getClass().getName(),"Error while attempting to generate drawables.",e);    DialogError.showError("Atlas Error...","Error while attempting to generate drawables.\n\nOpen log?");    return false;  }}  }
class C{  public void replaceRule(Rule newRule){  List<Rule> ruleList=(List<Rule>)this.symbolData.getFeatureTypeStyle().rules();  int indexFound=-1;  int index=0;  for (  Rule rule : ruleList) {    if (rule == this.symbolData.getRule()) {      indexFound=index;      break;    } else {      index++;    }  }  if (indexFound > -1) {    ruleList.remove(indexFound);    ruleList.add(indexFound,newRule);    setRule(newRule);  }}  }
class C{  @Override public boolean isEnemyFrom(Player enemy){  if (this.getObjectId() == enemy.getObjectId()) {    return false;  } else   if ((this.getAdminEnmity() > 1 || enemy.getAdminEnmity() > 1)) {    return false;  } else   if (canPvP(enemy) || this.getController().isDueling(enemy)) {    return true;  } else {    return false;  }}  }
class C{  public int memberOf(){  return theType.memberOf();}  }
class C{  public static boolean isArrowKey(KeyEvent e){  int code=e.getKeyCode();  return code >= KeyEvent.VK_LEFT && code <= KeyEvent.VK_DOWN;}  }
class C{  public static void writeLines(File file,String encoding,Collection<?> lines,boolean append) throws IOException {  writeLines(file,encoding,lines,null,append);}  }
class C{  public static int toInt(Object v,int defaultValue){  if (v != null) {    if (v instanceof Integer) {      return (Integer)v;    }    if (v instanceof Float) {      return (int)((Float)v).floatValue();    }    if (v instanceof Double) {      return (int)((Double)v).doubleValue();    }    String s=v.toString();    StringBuilder sb=new StringBuilder();    for (int i=0; i < s.length(); i++) {      char c=X.getNumber(s.charAt(i));      if (c >= '0' && c <= '9') {        sb.append(c);      } else       if (c == '-' && sb.length() == 0) {        sb.append(c);      } else       if (sb.length() > 0) {        break;      }    }    s=sb.toString();    if (s.length() > 0) {      try {        return Integer.parseInt(s);      } catch (      Exception e) {        log.error(e);      }    }  }  return defaultValue;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_HE_IS_ALREADY_MEMBER_OF_OUR_PARTY(String value0){  return new SM_SYSTEM_MESSAGE(1300170,value0);}  }
class C{  public synchronized void cancelConflictingJobs(CopyJob newJob) throws IOException {  for (  CopyJob job : queue) {    if (job.conflicts(newJob)) {      node.message("top: now cancel existing conflicting job=" + job + " due to newJob="+ newJob);      job.cancel("conflicts with new job",null);    }  }}  }
class C{  private String[] addToHistory(String[] history,String newEntry){  ArrayList l=new ArrayList(Arrays.asList(history));  l.remove(newEntry);  l.add(0,newEntry);  if (l.size() > COMBO_HISTORY_LENGTH)   l.remove(COMBO_HISTORY_LENGTH);  String[] r=new String[l.size()];  l.toArray(r);  return r;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public DiamondAccess fullCopy(){  DiamondAccess tree=(DiamondAccess)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  private LangUtils(){}  }
class C{  public boolean addSiblingBefore(AXmlNode sibling){  if (this.parent != null) {    this.parent.addChild(sibling,this.parent.getChildren().indexOf(this));    return true;  } else {    return false;  }}  }
class C{  public PutOption build(){  return new PutOption(this.leaseId,this.prevKV);}  }
class C{  public List<String> fields(){  return fields;}  }
class C{  private void runPCoA(final PCoA pcoa) throws CanceledException {  ProgressListener progressListener=clusterViewer.getDir().getDocument().getProgressListener();  if (progressListener == null)   progressListener=new ProgressSilent();  pcoa.calculateClassicMDS(progressListener);}  }
class C{  public void addService(AXmlNode node){  if (services.isEmpty())   services=new ArrayList<AXmlNode>();  services.add(node);}  }
class C{  protected void drawYAxisSqrt(Graphics2D gc,Dimension size){  gc.setFont(getFont(ChartViewer.FontKeys.YAxisFont.toString()));  int x0=leftMargin;  int x1=getWidth() - rightMargin;  int y0=getHeight() - bottomMargin;  int y1=topMargin;  boolean doDraw=(size == null);  Rectangle bbox=null;  double maxValue=getMaxValue();  double yFactor=(y0 - y1) / Math.sqrt(maxValue);  double value=0;  double previousY=-100000;  int mantisse=0;  int exponent=0;  while (value <= maxValue) {    if (maxDisplayedYValue != null && value > maxDisplayedYValue)     break;    double yPos=y0 - (value > 0 ? Math.sqrt(value) : 0) * yFactor;    if ((mantisse <= 1 || mantisse == 5) && Math.abs(yPos - previousY) >= 20) {      String label=String.format("%,d",(long)value);      Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();      previousY=yPos;      int x=leftMargin - (int)(labelSize.getWidth() + 3);      int y=(int)(yPos + labelSize.getHeight() / 2.0);      if (doDraw) {        gc.setColor(getFontColor(ChartViewer.FontKeys.YAxisFont.toString(),Color.BLACK));        gc.drawString(label,x,y);        if (showVerticalGridLines) {          gc.setColor(Color.LIGHT_GRAY);          gc.drawLine(x0,(int)Math.round(yPos),x1,(int)Math.round(yPos));        }      } else {        Rectangle rect=new Rectangle(x,y,labelSize.width,labelSize.height);        if (bbox == null)         bbox=rect; else         bbox.add(rect);      }    }    if (mantisse < 9)     mantisse++; else {      mantisse=1;      exponent++;    }    value=mantisse * Math.pow(10,exponent);  }  String axisLabel=getChartData().getCountsLabel();  Dimension labelSize=Basic.getStringSize(gc,axisLabel,gc.getFont()).getSize();  int x=10;  int y=(y0 + y1) / 2 - labelSize.width;  if (doDraw) {    gc.setColor(getFontColor(ChartViewer.FontKeys.YAxisFont.toString(),Color.BLACK));    drawString(gc,axisLabel,x,y,Math.PI / 2);  } else {    Rectangle rect=new Rectangle(x,y,labelSize.height,labelSize.width);    if (bbox == null)     bbox=rect; else     bbox.add(rect);  }  if (doDraw) {    gc.setColor(Color.BLACK);    gc.drawLine(x0,y0,x0,y1);    drawArrowHead(gc,new Point(x0,y0),new Point(x0,y1));  }  if (size != null)   size.setSize(bbox.width + 5,bbox.height);}  }
class C{  public static int nullSafeHashCode(int[] array){  if (array == null) {    return 0;  }  int hash=INITIAL_HASH;  int arraySize=array.length;  for (int i=0; i < arraySize; i++) {    hash=MULTIPLIER * hash + array[i];  }  return hash;}  }
class C{  @Override public int hashCode(){  if (isNaN()) {    return 409;  }  return 311 * (107 * x.hashCode() + 83 * y.hashCode() + z.hashCode());}  }
class C{  @NotNull public static String age(@NotNull Face face){  return String.format("Age: %.1f",face.faceAttributesResp.age);}  }
class C{  @deprecated public static boolean isCanonical(String id){  return canonicalize(id).equals(id);}  }
class C{  public void print(StringBuffer sb){  if (root != null) {    root.print(sb,getRootQuantity(),0);  }}  }
class C{  public static long binomialCoefficient(final int n,final int k){  checkBinomial(n,k);  if ((n == k) || (k == 0)) {    return 1;  }  if ((k == 1) || (k == n - 1)) {    return n;  }  if (k > n / 2)   return binomialCoefficient(n,n - k);  long result=1;  if (n <= 61) {    int i=n - k + 1;    for (int j=1; j <= k; j++) {      result=result * i / j;      i++;    }  } else   if (n <= 66) {    int i=n - k + 1;    for (int j=1; j <= k; j++) {      final long d=gcd(i,j);      result=(result / (j / d)) * (i / d);      i++;    }  } else {    int i=n - k + 1;    for (int j=1; j <= k; j++) {      final long d=gcd(i,j);      result=mulAndCheck(result / (j / d),i / d);      i++;    }  }  return result;}  }
class C{  public static boolean isDate(String year,String month,String day){  if (!(isYear(year) && isMonth(month) && isDay(day)))   return false;  int intYear=Integer.parseInt(year);  int intMonth=Integer.parseInt(month);  int intDay=Integer.parseInt(day);  if (intDay > daysInMonth[intMonth - 1])   return false;  if ((intMonth == 2) && (intDay > daysInFebruary(intYear)))   return false;  return true;}  }
class C{  static boolean isSystemWindows(){  return SYSTEM_SEPARATOR == WINDOWS_SEPARATOR;}  }
class C{  public void cleanupTabs(){  mStackTabs=null;  resetInputActionIndices();}  }
class C{  private void recycleView(View view,int index){  int count=wheel.getViewAdapter().getItemsCount();  if ((index < 0 || index >= count) && !wheel.isCyclic()) {    emptyItems=addView(view,emptyItems);  } else {    while (index < 0) {      index=count + index;    }    index%=count;    items=addView(view,items);  }}  }
class C{  @Override public boolean equals(Object that){  if (this == that) {    return true;  }  if (that == null) {    return false;  }  if (getClass() != that.getClass()) {    return false;  }  TaskFireLog other=(TaskFireLog)that;  return (this.getId() == null ? other.getId() == null : this.getId().equals(other.getId())) && (this.getGroupName() == null ? other.getGroupName() == null : this.getGroupName().equals(other.getGroupName())) && (this.getTaskName() == null ? other.getTaskName() == null : this.getTaskName().equals(other.getTaskName()))&& (this.getStartTime() == null ? other.getStartTime() == null : this.getStartTime().equals(other.getStartTime()))&& (this.getEndTime() == null ? other.getEndTime() == null : this.getEndTime().equals(other.getEndTime()))&& (this.getStatus() == null ? other.getStatus() == null : this.getStatus().equals(other.getStatus()))&& (this.getServerHost() == null ? other.getServerHost() == null : this.getServerHost().equals(other.getServerHost()))&& (this.getServerDuid() == null ? other.getServerDuid() == null : this.getServerDuid().equals(other.getServerDuid()))&& (this.getFireInfo() == null ? other.getFireInfo() == null : this.getFireInfo().equals(other.getFireInfo()));}  }
class C{  @Override public boolean needFood(){  return this.getFoodLevel() < 60.0F;}  }
class C{  public static FilteringEventBus buildFilteringEventBusOnMainLoop(EventDispatcher eventDispatcher){  FilteringEventBus b=new FilteringEventBus(new DelegatingEventDispatcher(eventDispatcher,mainLoopDispatcher));  b.start();  return b;}  }
class C{  public void addAssociation(int node,int endpoint){  if (isAssociated(node,endpoint)) {    return;  }  ZWaveAssociation newAssociation=new ZWaveAssociation(node,endpoint);  associations.add(newAssociation);}  }
class C{  public boolean selectedFragmentPicture(){  Intent intent=new Intent(Intent.ACTION_PICK,android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);  intent.setType("image/*");  if (intent.resolveActivity(this.activity.getPackageManager()) != null) {    this.intentFragment=intent;    return true;  } else {    return false;  }}  }
class C{  public static String joinObjects(CharSequence separator,Iterable<?> objects){  StringBuilder sb=new StringBuilder();  boolean first=true;  for (  Object o : objects) {    if (first) {      first=false;    } else {      sb.append(separator);    }    sb.append(String.valueOf(o));  }  return sb.toString();}  }
class C{  public static double[] checkAndNormalize(double[] weights){  final int len=weights.length;  double sumWt=0;  boolean posWt=false;  for (int i=0; i < len; i++) {    if (weights[i] < 0) {      throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL,weights[i],0);    }    if (weights[i] > 0) {      posWt=true;    }    if (Double.isNaN(weights[i])) {      throw new MathIllegalArgumentException(LocalizedCoreFormats.NAN_ELEMENT_AT_INDEX,i);    }    if (Double.isInfinite(weights[i])) {      throw new MathIllegalArgumentException(LocalizedCoreFormats.INFINITE_ARRAY_ELEMENT,weights[i],i);    }    sumWt+=weights[i];  }  if (!posWt) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.WEIGHT_AT_LEAST_ONE_NON_ZERO);  }  double[] normWt=null;  if (Precision.equals(sumWt,1d,10)) {    normWt=weights;  } else {    normWt=new double[len];    for (int i=0; i < len; i++) {      normWt[i]=weights[i] / sumWt;    }  }  return normWt;}  }
class C{  public void addVariableDecl(VariableDecl node){  List<VariableDecl> list=(parent == null || state == null) ? getVariableDeclListNoTransform() : getVariableDeclList();  list.addChild(node);}  }
class C{  @deprecated protected void initializeData(ULocale desiredLocale,CalendarData calData){  this.eras=calData.getEras("abbreviated");  this.eraNames=calData.getEras("wide");  this.narrowEras=calData.getEras("narrow");  this.months=calData.getStringArray("monthNames","wide");  this.shortMonths=calData.getStringArray("monthNames","abbreviated");  this.narrowMonths=calData.getStringArray("monthNames","narrow");  this.standaloneMonths=calData.getStringArray("monthNames","stand-alone","wide");  this.standaloneShortMonths=calData.getStringArray("monthNames","stand-alone","abbreviated");  this.standaloneNarrowMonths=calData.getStringArray("monthNames","stand-alone","narrow");  String[] lWeekdays=calData.getStringArray("dayNames","wide");  this.weekdays=new String[8];  this.weekdays[0]="";  System.arraycopy(lWeekdays,0,this.weekdays,1,lWeekdays.length);  String[] sWeekdays=calData.getStringArray("dayNames","abbreviated");  this.shortWeekdays=new String[8];  this.shortWeekdays[0]="";  System.arraycopy(sWeekdays,0,this.shortWeekdays,1,sWeekdays.length);  String[] nWeekdays=null;  try {    nWeekdays=calData.getStringArray("dayNames","narrow");  } catch (  MissingResourceException e) {    try {      nWeekdays=calData.getStringArray("dayNames","stand-alone","narrow");    } catch (    MissingResourceException e1) {      nWeekdays=calData.getStringArray("dayNames","abbreviated");    }  }  this.narrowWeekdays=new String[8];  this.narrowWeekdays[0]="";  System.arraycopy(nWeekdays,0,this.narrowWeekdays,1,nWeekdays.length);  String[] saWeekdays=null;  saWeekdays=calData.getStringArray("dayNames","stand-alone","wide");  this.standaloneWeekdays=new String[8];  this.standaloneWeekdays[0]="";  System.arraycopy(saWeekdays,0,this.standaloneWeekdays,1,saWeekdays.length);  String[] ssWeekdays=null;  ssWeekdays=calData.getStringArray("dayNames","stand-alone","abbreviated");  this.standaloneShortWeekdays=new String[8];  this.standaloneShortWeekdays[0]="";  System.arraycopy(ssWeekdays,0,this.standaloneShortWeekdays,1,ssWeekdays.length);  String[] snWeekdays=null;  snWeekdays=calData.getStringArray("dayNames","stand-alone","narrow");  this.standaloneNarrowWeekdays=new String[8];  this.standaloneNarrowWeekdays[0]="";  System.arraycopy(snWeekdays,0,this.standaloneNarrowWeekdays,1,snWeekdays.length);  this.ampms=calData.getStringArray("AmPmMarkers");  this.quarters=calData.getStringArray("quarters","wide");  this.shortQuarters=calData.getStringArray("quarters","abbreviated");  this.standaloneQuarters=calData.getStringArray("quarters","stand-alone","wide");  this.standaloneShortQuarters=calData.getStringArray("quarters","stand-alone","abbreviated");  this.requestedLocale=desiredLocale;  ICUResourceBundle rb=(ICUResourceBundle)UResourceBundle.getBundleInstance("com/ibm/icu/impl/data/icudt48b",desiredLocale);  this.localPatternChars="GyMdkHmsSEDFwWahKzYeugAZvcLQqV";  ULocale uloc=rb.getULocale();  setLocale(uloc,uloc);}  }
class C{  public <T5>Pattern5<T1,T2,T3,T4,T5> and(Observable<T5> other){  if (other == null) {    throw new NullPointerException();  }  return new Pattern5<T1,T2,T3,T4,T5>(o1,o2,o3,o4,other);}  }
class C{  protected LuaObject(LuaState L,String globalName){synchronized (L) {    this.L=L;    L.getGlobal(globalName);    registerValue(-1);    L.pop(1);  }}  }
class C{  static int findBestSampleSize(int actualWidth,int actualHeight,int desiredWidth,int desiredHeight){  double wr=(double)actualWidth / desiredWidth;  double hr=(double)actualHeight / desiredHeight;  double ratio=Math.min(wr,hr);  float n=1.0f;  while ((n * 2) <= ratio) {    n*=2;  }  return (int)n;}  }
class C{  @Override public Track apply(String name){  return new Track(name);}  }
class C{  @NotNull public ImageOverlayBuilder titleImage(PointLocations location,Font font,@NotNull CognitiveJColourPalette color,@NotNull String text){  ApplyCaptionOutsideImageFilter applyCaptionOutsideImageFilter=new ApplyCaptionOutsideImageFilter(location,font,color,text);  bufferedImage=applyCaptionOutsideImageFilter.applyFilter(bufferedImage);  return this;}  }
class C{  @RequiresPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) public static boolean rename(File src,File tar){  try {    LogUtils.debug(String.format("rename %s to %s",src.getAbsolutePath(),tar.getAbsolutePath()));    return src.renameTo(tar);  } catch (  Exception e) {    LogUtils.warn(e);    return false;  }}  }
class C{  private static int calculateTotalBytes(ByteBuffer[] byteBufferArr){  int total=0;  for (int index=0; index < byteBufferArr.length; index++) {    total+=byteBufferArr[index].capacity();  }  return total;}  }
class C{  public static boolean isBookmarked(String id){  return Inquiry.get().selectFrom(Constants.DATABASE_NAME,BookmarksDB.class).where("_id = ?",id).one() != null;}  }
class C{  public RecordId(BlockId blk,int id){  this.blk=blk;  this.id=id;}  }
class C{  @Override public void vendorOptionsUpdated(List<VersionData> vendorOptionVersionsList){  this.vendorOptionOptionsList=vendorOptionVersionsList;  updateVendorOptionPanels();}  }
class C{  private boolean isAlreadySetup(RetrieveAndRank service){  SolrClusters clusters=service.getSolrClusters().execute();  return clusters.getSolrClusters().size() > 0 ? true : false;}  }
class C{  public int importMEGAN3SummaryFile(String fileName,BufferedReader r,boolean headerOnly) throws IOException {  int lineNumber=0;  try {    String aLine;    sampleNames.clear();    sampleNames.add(Basic.getFileBaseName(fileName));    blastModes.clear();    while ((aLine=r.readLine()) != null) {      lineNumber++;      aLine=aLine.trim();      if (aLine.length() == 0 || aLine.startsWith("#"))       continue;      if (lineNumber == 1 && aLine.equals("!MEGAN"))       continue;      if (aLine.startsWith("@")) {        int separatorPos=aLine.indexOf("=");        if (separatorPos == -1)         throw new IOException("Line " + lineNumber + ": Can't parse: "+ aLine);        String first=aLine.substring(0,separatorPos);        String second=aLine.substring(separatorPos + 1);switch (first) {case CONTENT_TYPE:          if (!second.equals(MEGAN3SummaryFormat))           throw new IOException("Wrong format: " + second);        setContentType(MEGAN4SummaryFormat + "\t(imported from MEGAN3 " + second+ " format)");      break;case CREATOR:    setCreator(second);  break;case CREATION_DATE:setCreationDate(second);break;case PARAMETERS:setParameters(second);break;case ALGORITHM:setAlgorithm(ClassificationType.Taxonomy.toString(),second);break;case COLLAPSE:if (second.length() > 0) {String[] tokens=second.split(";");Set<Integer> collapse=new HashSet<>();for (String token : tokens) {collapse.add(Integer.parseInt(token));}setCollapsed(ClassificationType.Taxonomy.toString(),collapse);}break;case NODE_FORMATS:setNodeFormats(ClassificationType.Taxonomy.toString(),second);break;case EDGE_FORMATS:setEdgeFormats(ClassificationType.Taxonomy.toString(),second);break;case "@Format":break;case TOTAL_READS:totalReads=Integer.parseInt(second);break;}} else if (!headerOnly) {String[] tokens=aLine.split(" ");if (tokens.length == 3) {int classId=Integer.parseInt(tokens[0]);int value=Integer.parseInt(tokens[2]);setClassification2Class2Count(ClassificationType.Taxonomy.toString(),classId,0,value);}}}if (!headerOnly) determineSizesFromTaxonomyClassification();}  finally {r.close();}return lineNumber;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_TOOLTIP_NEED_MASTERY_SKILL(String value0){  return new SM_SYSTEM_MESSAGE(1300910,value0);}  }
class C{  public void subTask(String name){  if (name != null && !name.equals("")) {    super.subTask(name);  }}  }
class C{  public static XdmValue newValue(ValueType valueType,Object value){  if (value instanceof Text) {    return ValueFactory.newValue(valueType,((Text)value).toString());  } else   if (value instanceof BytesWritable) {    return ValueFactory.newValue(valueType,((BytesWritable)value).getBytes());  } else   if (value instanceof IntWritable) {    return ValueFactory.newValue(valueType,((IntWritable)value).get());  } else   if (value instanceof LongWritable) {    return ValueFactory.newValue(valueType,((LongWritable)value).get());  } else   if (value instanceof VIntWritable) {    return ValueFactory.newValue(valueType,((VIntWritable)value).get());  } else   if (value instanceof VLongWritable) {    return ValueFactory.newValue(valueType,((VLongWritable)value).get());  } else   if (value instanceof BooleanWritable) {    return ValueFactory.newValue(valueType,((BooleanWritable)value).get());  } else   if (value instanceof FloatWritable) {    return ValueFactory.newValue(valueType,((FloatWritable)value).get());  } else   if (value instanceof DoubleWritable) {    return ValueFactory.newValue(valueType,((DoubleWritable)value).get());  } else   if (value instanceof MarkLogicNode) {    return ValueFactory.newValue(valueType,((MarkLogicNode)value).get());  } else {    throw new UnsupportedOperationException("Value " + value.getClass().getName() + " is unsupported.");  }}  }
class C{  protected void processExit(PathEdge<N,D> edge){  final N n=edge.getTarget();  M methodThatNeedsSummary=icfg.getMethodOf(n);  final D d1=edge.factAtSource();  final D d2=edge.factAtTarget();  if (!addEndSummary(methodThatNeedsSummary,d1,n,d2))   return;  Map<N,Map<D,D>> inc=incoming(d1,methodThatNeedsSummary);  if (inc != null)   for (  Entry<N,Map<D,D>> entry : inc.entrySet()) {    N c=entry.getKey();    Set<D> callerSideDs=entry.getValue().keySet();    for (    N retSiteC : icfg.getReturnSitesOfCallAt(c)) {      FlowFunction<D> retFunction=flowFunctions.getReturnFlowFunction(c,methodThatNeedsSummary,n,retSiteC);      Set<D> targets=computeReturnFlowFunction(retFunction,d1,d2,c,callerSideDs);      for (      Entry<D,D> d1d2entry : entry.getValue().entrySet()) {        final D d4=d1d2entry.getKey();        final D predVal=d1d2entry.getValue();        for (        D d5 : targets) {          compactAbstractionChain(d5,d2);          D d5p=d5;          if (d5.equals(predVal))           d5p=predVal; else           if (setJumpPredecessors)           d5p.setPredecessor(d1);          propagate(d4,retSiteC,d5p,c,false);        }      }    }  }  if (followReturnsPastSeeds && d1 == zeroValue && (inc == null || inc.isEmpty())) {    Collection<N> callers=icfg.getCallersOf(methodThatNeedsSummary);    for (    N c : callers) {      for (      N retSiteC : icfg.getReturnSitesOfCallAt(c)) {        FlowFunction<D> retFunction=flowFunctions.getReturnFlowFunction(c,methodThatNeedsSummary,n,retSiteC);        Set<D> targets=computeReturnFlowFunction(retFunction,d1,d2,c,Collections.singleton(zeroValue));        for (        D d5 : targets) {          compactAbstractionChain(d5,d2);          propagate(zeroValue,retSiteC,d5,c,true);        }      }    }    if (callers.isEmpty()) {      FlowFunction<D> retFunction=flowFunctions.getReturnFlowFunction(null,methodThatNeedsSummary,n,null);      retFunction.computeTargets(d2);    }  }}  }
class C{  private void fillDeclaredPrefixes(Iterator namespaces){  fDeclaredPrefixes.clear();  while (namespaces.hasNext()) {    Namespace ns=(Namespace)namespaces.next();    String prefix=ns.getPrefix();    fDeclaredPrefixes.add(prefix != null ? prefix : "");  }}  }
class C{  public LocusInfo next(){  while (complete.isEmpty() && samHasMore()) {    final SAMRecord rec=samIterator.peek();    if (rec.getReferenceIndex() == -1) {      this.finishedAlignedReads=true;      continue;    }    if (rec.getReadUnmappedFlag() || rec.getMappingQuality() < this.mappingQualityScoreCutoff || (!this.includeNonPfReads && rec.getReadFailsVendorQualityCheckFlag())) {      samIterator.next();      continue;    }    final Locus alignmentStart=new LocusImpl(rec.getReferenceIndex(),rec.getAlignmentStart());    while (!accumulator.isEmpty() && locusComparator.compare(accumulator.get(0),alignmentStart) < 0) {      final LocusInfo first=accumulator.get(0);      populateCompleteQueue(alignmentStart);      if (!complete.isEmpty()) {        return complete.remove(0);      }      if (!accumulator.isEmpty() && first == accumulator.get(0)) {        throw new SAMException("Stuck in infinite loop");      }    }    if (!accumulator.isEmpty()) {      if (accumulator.get(0).getSequenceIndex() != rec.getReferenceIndex() || accumulator.get(0).position != rec.getAlignmentStart()) {        throw new IllegalStateException("accumulator should be empty or aligned with current SAMRecord");      }    }    accumulateSamRecord(rec);    samIterator.next();  }  final Locus endLocus=new LocusImpl(Integer.MAX_VALUE,Integer.MAX_VALUE);  if (complete.isEmpty() && !samHasMore()) {    while (!accumulator.isEmpty()) {      populateCompleteQueue(endLocus);      if (!complete.isEmpty()) {        return complete.remove(0);      }    }  }  if (!complete.isEmpty()) {    return complete.remove(0);  } else   if (emitUncoveredLoci) {    final Locus afterLastMaskPositionLocus=new LocusImpl(referenceSequenceMask.getMaxSequenceIndex(),referenceSequenceMask.getMaxPosition() + 1);    return createNextUncoveredLocusInfo(afterLastMaskPositionLocus);  } else {    return null;  }}  }
class C{  private void storeCaughtPokemon(Cursor cursor){  ArrayList<Integer> listOfCaughtPokemon=PokeCursorManager.getPokemonInDb(cursor,PokeDBContract.CaughtPokemonEntry.TABLE_NAME,PokeDBContract.CaughtPokemonEntry.COLUMN_NUMBER);  int countOfCaughtPokemon=listOfCaughtPokemon.size();  if (!listOfCaughtPokemon.contains(mCaughtPokemon)) {    PokeCursorManager.insertPokemonInDb(this,mCaughtPokemon,PokeDBContract.CaughtPokemonEntry.TABLE_NAME,PokeDBContract.CaughtPokemonEntry.COLUMN_NUMBER);    countOfCaughtPokemon++;    Log.d(TAG,"Pokemon has been caught.");  }  getSharedPreferences(PokeSharedPreferences.COUNT_CAUGHT_POKEMON_FILENAME,MODE_PRIVATE).edit().putInt(PokeSharedPreferences.COUNT_CAUGHT_POKEMON_KEY,countOfCaughtPokemon).apply();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPATK_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200362,skillname);}  }
class C{  public AbstractColumn(){  this(Object.class,null);}  }
class C{  public ContinousQuery(Class<T> type,String sqlExpression){  super(type,sqlExpression);}  }
class C{  public ThisRef newThisRef(RefType t){  return new ThisRef(t);}  }
class C{  public static List<LoadMetadataDetails> updateLoadMetadataFromOldToNew(LoadMetadataDetails[] oldList,LoadMetadataDetails[] newList){  List<LoadMetadataDetails> newListMetadata=new ArrayList<LoadMetadataDetails>(Arrays.asList(newList));  for (  LoadMetadataDetails oldSegment : oldList) {    if ("false".equalsIgnoreCase(oldSegment.getVisibility())) {      newListMetadata.get(newListMetadata.indexOf(oldSegment)).setVisibility("false");    }  }  return newListMetadata;}  }
class C{  private static SearcherAndTaxonomy openSnapshotReader(ShardState state,IndexState.Gens snapshot,JSONObject diagnostics) throws IOException {  SearcherAndTaxonomy s=state.acquire();  try {    long t0=System.nanoTime();    IndexReader r=DirectoryReader.openIfChanged((DirectoryReader)s.searcher.getIndexReader(),state.snapshots.getIndexCommit(snapshot.indexGen));    s.taxonomyReader.incRef();    SearcherAndTaxonomy result=new SearcherAndTaxonomy(new MyIndexSearcher(r),s.taxonomyReader);    state.slm.record(result.searcher);    long t1=System.nanoTime();    if (diagnostics != null) {      diagnostics.put("newSnapshotSearcherOpenMS",((t1 - t0) / 1000000.0));    }    return result;  }  finally {    state.release(s);  }}  }
class C{  public long ticks(){  long ret=0;synchronized (eventsList) {    if (eventsList.size() > 0) {      ret=((MidiEvent)eventsList.get(eventsList.size() - 1)).getTick();    }  }  return ret;}  }
class C{  @Override protected void onPause(){  super.onPause();  Log.i(TAG,"onPause");  if (mCamera != null) {    mCamera.stopPreview();  }}  }
class C{  public boolean contains(int index){  return index >= getFirst() && index <= getLast();}  }
class C{  public static String toString(URL url,Charset encoding) throws IOException {  InputStream inputStream=url.openStream();  try {    return toString(inputStream,encoding);  }  finally {    inputStream.close();  }}  }
class C{  public SchemaContentHandler(){}  }
class C{  private static boolean inRange(int value,int min,int max){  return (min <= value) && (value <= max);}  }
class C{  private void populate(LegendOptionData optionData){  widthSpinner.setValue(Integer.valueOf(optionData.getImageWidth()));  heightSpinner.setValue(Integer.valueOf(optionData.getImageHeight()));  dpiSpinner.setValue(Integer.valueOf(optionData.getDpi()));  imageSizeSpinner.setValue(Integer.valueOf(optionData.getImageSize()));  chckboxMaintainAspect.setSelected(optionData.isMaintainAspectRatio());  chckboxAntiAlias.setSelected(optionData.isFontAntiAliasing());  chckboxShowLabels.setSelected(optionData.isShowLabels());  chckboxShowTitles.setSelected(optionData.isShowTitle());  chckboxSeparateImages.setSelected(optionData.splitSymbolizers());  chckboxShowBorder.setSelected(optionData.isBorder());  chckboxBandInformation.setSelected(optionData.isBandInformation());  chckboxTransparent.setSelected(optionData.isTransparent());  backgroundColourButton.populate(optionData.getBackgroundColour());  labelFontColourButton.populate(optionData.getLabelFontColour());  borderColourButton.populate(optionData.getBorderColour());  updateFieldStates();  populateLabelFontDetails(optionData.getLabelFont());}  }
class C{  public boolean hasSuperClassAccess(){  return getSuperClassAccessOpt().getNumChild() != 0;}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  Object[] elements=getArray();  int len=elements.length;  s.writeInt(len);  for (int i=0; i < len; i++)   s.writeObject(elements[i]);}  }
class C{  @Override public boolean hasNext() throws IOException {  return positionInList < list.size();}  }
class C{  @Override protected void checkFeature(String featureId) throws XMLConfigurationException {  if (featureId.startsWith(Constants.XERCES_FEATURE_PREFIX)) {    final int suffixLength=featureId.length() - Constants.XERCES_FEATURE_PREFIX.length();    if (suffixLength == Constants.DYNAMIC_VALIDATION_FEATURE.length() && featureId.endsWith(Constants.DYNAMIC_VALIDATION_FEATURE)) {      return;    }    if (suffixLength == Constants.DEFAULT_ATTRIBUTE_VALUES_FEATURE.length() && featureId.endsWith(Constants.DEFAULT_ATTRIBUTE_VALUES_FEATURE)) {      short type=XMLConfigurationException.NOT_SUPPORTED;      throw new XMLConfigurationException(type,featureId);    }    if (suffixLength == Constants.VALIDATE_CONTENT_MODELS_FEATURE.length() && featureId.endsWith(Constants.VALIDATE_CONTENT_MODELS_FEATURE)) {      short type=XMLConfigurationException.NOT_SUPPORTED;      throw new XMLConfigurationException(type,featureId);    }    if (suffixLength == Constants.LOAD_DTD_GRAMMAR_FEATURE.length() && featureId.endsWith(Constants.LOAD_DTD_GRAMMAR_FEATURE)) {      return;    }    if (suffixLength == Constants.LOAD_EXTERNAL_DTD_FEATURE.length() && featureId.endsWith(Constants.LOAD_EXTERNAL_DTD_FEATURE)) {      return;    }    if (suffixLength == Constants.VALIDATE_DATATYPES_FEATURE.length() && featureId.endsWith(Constants.VALIDATE_DATATYPES_FEATURE)) {      short type=XMLConfigurationException.NOT_SUPPORTED;      throw new XMLConfigurationException(type,featureId);    }    if (suffixLength == Constants.PARSER_SETTINGS.length() && featureId.endsWith(Constants.PARSER_SETTINGS)) {      short type=XMLConfigurationException.NOT_SUPPORTED;      throw new XMLConfigurationException(type,featureId);    }  }  super.checkFeature(featureId);}  }
class C{  public void followRedirects(boolean followRedirects){  this.followRedirects=followRedirects;}  }
class C{  private static boolean isFastMobileNetwork(Context context){  TelephonyManager telephonyManager=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);  if (telephonyManager == null) {    return false;  }switch (telephonyManager.getNetworkType()) {case TelephonyManager.NETWORK_TYPE_1xRTT:    return false;case TelephonyManager.NETWORK_TYPE_CDMA:  return false;case TelephonyManager.NETWORK_TYPE_EDGE:return false;case TelephonyManager.NETWORK_TYPE_EVDO_0:return true;case TelephonyManager.NETWORK_TYPE_EVDO_A:return true;case TelephonyManager.NETWORK_TYPE_GPRS:return false;case TelephonyManager.NETWORK_TYPE_HSDPA:return true;case TelephonyManager.NETWORK_TYPE_HSPA:return true;case TelephonyManager.NETWORK_TYPE_HSUPA:return true;case TelephonyManager.NETWORK_TYPE_UMTS:return true;case TelephonyManager.NETWORK_TYPE_EHRPD:return true;case TelephonyManager.NETWORK_TYPE_EVDO_B:return true;case TelephonyManager.NETWORK_TYPE_HSPAP:return true;case TelephonyManager.NETWORK_TYPE_IDEN:return false;case TelephonyManager.NETWORK_TYPE_LTE:return true;case TelephonyManager.NETWORK_TYPE_UNKNOWN:return false;default :return false;}}  }
class C{  public void updateLocations(Iterator iIter){  if (ContainerList != null)   ContainerList.clear();  ContainerList=new ArrayList();  while (iIter.hasNext())   ContainerList.add((Location)iIter.next());  addBehaviour(new MigrateBehaviour());}  }
class C{  public int count(String className) throws RemoteException, TransactionException, UnusableEntryException {  return _remoteSpaceProxy.count(createTemplate(className),null);}  }
class C{  @Override public Dfp ceil(){  return trunc(DfpField.RoundingMode.ROUND_CEIL);}  }
class C{  private int findMax(int[] lastPositions){  int max=lastPositions[0];  for (  int value : lastPositions) {    if (value > max) {      max=value;    }  }  return max;}  }
class C{  @SuppressWarnings("deprecation") void initFromCameraParameters(Camera camera){  Camera.Parameters parameters=camera.getParameters();  previewFormat=parameters.getPreviewFormat();  previewFormatString=parameters.get("preview-format");  Log.d(TAG,"Default preview format: " + previewFormat + '/'+ previewFormatString);  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  screenResolution=new Point(display.getWidth(),display.getHeight());  Log.d(TAG,"Screen resolution: " + screenResolution);  cameraResolution=getCameraResolution(parameters,screenResolution);  Log.d(TAG,"Camera resolution: " + screenResolution);}  }
class C{  @Override public void onLoadFinished(Loader<Cursor> loader,Cursor cursor){  ArrayList<Integer> listOfCaughtPokemon=PokeCursorManager.getPokemonInDb(cursor,PokeDBContract.CaughtPokemonEntry.TABLE_NAME,PokeDBContract.CaughtPokemonEntry.COLUMN_NUMBER);  ArrayList<Integer> listOfDisplayPokemon=new ArrayList<>();  for (  int n : mGen)   if (listOfCaughtPokemon.contains(n))   listOfDisplayPokemon.add(n);  int[] displayPokemon=new int[listOfDisplayPokemon.size()];  for (int i=0; i < displayPokemon.length; i++)   displayPokemon[i]=listOfDisplayPokemon.get(i);  mPokemonList.setAdapter(new PokeListAdapter(mContext,displayPokemon));  Log.d(TAG,"Poke List view set.");}  }
class C{  public AboutAdapter(Activity a){  this.a=a;  this.itemList=CreateAboutModelImplementor.createModelList(a);}  }
class C{  public void putIdentifier(String idName,Element element){  if (element == null) {    removeIdentifier(idName);    return;  }  if (needsSyncData()) {    synchronizeData();  }  if (identifiers == null) {    identifiers=new Hashtable();  }  identifiers.put(idName,element);}  }
class C{  public void indicatorColor(@ColorInt int color){  indicatorPaint.setColor(color);  invalidate();}  }
class C{  public boolean onFileActionChosen(int menuId){  final ArrayList<OCFile> checkedFiles=mAdapter.getCheckedItems(getListView());  if (checkedFiles.size() <= 0)   return false;  if (checkedFiles.size() == 1) {    OCFile singleFile=checkedFiles.get(0);switch (menuId) {case R.id.action_share_file:{        mContainerActivity.getFileOperationsHelper().showShareFile(singleFile);        return true;      }case R.id.action_open_file_with:{      mContainerActivity.getFileOperationsHelper().openFile(singleFile);      return true;    }case R.id.action_rename_file:{    RenameFileDialogFragment dialog=RenameFileDialogFragment.newInstance(singleFile);    dialog.show(getFragmentManager(),FileDetailFragment.FTAG_RENAME_FILE);    return true;  }case R.id.action_see_details:{  if (mActiveActionMode != null) {    mActiveActionMode.finish();  }  mContainerActivity.showDetails(singleFile);  return true;}case R.id.action_send_file:{if (!singleFile.isDown()) {  Log_OC.d(TAG,singleFile.getRemotePath() + " : File must be downloaded");  ((FileDisplayActivity)mContainerActivity).startDownloadForSending(singleFile);} else {  mContainerActivity.getFileOperationsHelper().sendDownloadedFile(singleFile);}return true;}}}switch (menuId) {case R.id.action_remove_file:{RemoveFilesDialogFragment dialog=RemoveFilesDialogFragment.newInstance(checkedFiles);dialog.show(getFragmentManager(),ConfirmationDialogFragment.FTAG_CONFIRMATION);return true;}case R.id.action_download_file:case R.id.action_sync_file:{mContainerActivity.getFileOperationsHelper().syncFiles(checkedFiles);return true;}case R.id.action_cancel_sync:{((FileDisplayActivity)mContainerActivity).cancelTransference(checkedFiles);return true;}case R.id.action_favorite_file:{mContainerActivity.getFileOperationsHelper().toggleFavorites(checkedFiles,true);return true;}case R.id.action_unfavorite_file:{mContainerActivity.getFileOperationsHelper().toggleFavorites(checkedFiles,false);return true;}case R.id.action_move:{Intent action=new Intent(getActivity(),FolderPickerActivity.class);action.putParcelableArrayListExtra(FolderPickerActivity.EXTRA_FILES,checkedFiles);action.putExtra(FolderPickerActivity.EXTRA_ACTION,getResources().getText(R.string.move_to));getActivity().startActivityForResult(action,FileDisplayActivity.REQUEST_CODE__MOVE_FILES);return true;}case R.id.action_copy:Intent action=new Intent(getActivity(),FolderPickerActivity.class);action.putParcelableArrayListExtra(FolderPickerActivity.EXTRA_FILES,checkedFiles);action.putExtra(FolderPickerActivity.EXTRA_ACTION,getResources().getText(R.string.copy_to));getActivity().startActivityForResult(action,FileDisplayActivity.REQUEST_CODE__COPY_FILES);return true;default :return false;}}  }
class C{  public void init$Children(){  children=new ASTNode[3];  setChild(new Opt(),1);  setChild(new List(),2);}  }
class C{  private void parseFunctionParameter(){  PsiBuilder.Marker marker=builder.mark();  if (matches(TokenKind.STAR_STAR)) {    expectIdentifier("invalid parameter name");    marker.done(BuildElementTypes.PARAM_STAR_STAR);    return;  }  if (matches(TokenKind.STAR)) {    if (atToken(TokenKind.IDENTIFIER)) {      builder.advanceLexer();    }    marker.done(BuildElementTypes.PARAM_STAR);    return;  }  expectIdentifier("invalid parameter name");  if (matches(TokenKind.EQUALS)) {    parseNonTupleExpression();    marker.done(BuildElementTypes.PARAM_OPTIONAL);    return;  }  marker.done(BuildElementTypes.PARAM_MANDATORY);}  }
class C{  public void incrementValue(int v,long increment){  incrementValue(Long.valueOf(v),increment);}  }
class C{  public static final Polygon flipAlongTheYAxis(Polygon polygon){  return Geometry.flip(polygon,Vector2.Y_AXIS,null);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public void decipher(byte[] data,int offset,int length){  int blocks=length >> 3;  int p;  for (int k=0; k < blocks; k++) {    p=offset + (k << 3);    int lb=byteArrayToInteger(data,p);    int rb=byteArrayToInteger(data,p + 4);    int tmp;    for (int i=17; i > 1; i--) {      lb=lb ^ pArray[i];      rb=F(lb) ^ rb;      tmp=lb;      lb=rb;      rb=tmp;    }    tmp=lb;    lb=rb;    rb=tmp;    rb^=pArray[1];    lb^=pArray[0];    integerToByteArray(lb,data,p);    integerToByteArray(rb,data,p + 4);  }}  }
class C{  public void intercept(SecurityContext securityContext,Privilege privilege,String className){  if (securityContext == null) {    throw new SecurityException("Invalid security context");  }  AuthenticationToken token=securityContext.getAuthenticationToken();  if (token == null) {    throw new AuthenticationException("Authentication token is invalid");  }  if (trustInterceptor.verifyTrust(securityContext)) {    return;  }  SessionDetails sessionDetails=cache.get(token);  if (sessionDetails == null) {    if (token.equals(trustedToken)) {      return;    }    if (securityAudit != null) {      securityAudit.authenticationInvalid(token);    }    throw new AuthenticationException("Authentication session is invalid");  }  Authentication authentication=sessionDetails.getAuthentication();  GrantedAuthorities grantedAuthorities=authentication.getGrantedAuthorities();  boolean granted=grantedAuthorities.isGranted(privilege,className);  if (!granted) {    AccessDeniedException accessDeniedException=new AccessDeniedException("User [" + authentication.getUserDetails().getUsername() + "] lacks ["+ privilege+ "] privileges"+ (className == null ? "" : " for class [" + className + "]"));    if (securityAudit != null) {      securityAudit.accessDenied(securityContext,sessionDetails,privilege,className);    }    throw accessDeniedException;  }  if (securityAudit != null) {    securityAudit.accessGranted(securityContext,sessionDetails,privilege,className);  }  SecurityContextAccessor.fillSecurityContext(securityContext,sessionDetails);}  }
class C{  synchronized void registerToNotifications() throws JMSException {  if (m_closed) {    if (_logger.isLoggable(Level.FINE)) {      _logger.log(Level.FINE,toString2() + "GSMessageConsumerImpl.registerToNotifications(): Called on a closed consumer.");    }    return;  }  if (_logger.isLoggable(Level.FINE)) {    _logger.log(Level.FINE,toString2() + "GSMessageConsumerImpl.registerToNotifications(): registering for notifications");  }  try {    eventSession=DataEventSessionFactory.create(m_space,eventSessionConfig);    eventSession.addListener(m_jmsMessageTemplate,onMessageEventListener,NotifyActionType.NOTIFY_WRITE);  } catch (  IOException e) {    if (_logger.isLoggable(Level.FINE)) {      _logger.log(Level.FINE,toString2() + "GSMessageConsumerImpl.startAsynchronous(): IOException while creating event session" + e);    }    JMSException e1=new JMSException("Failed to create event session.");    e1.setLinkedException(e);    throw e1;  }}  }
class C{  @SuppressWarnings("unchecked") public List<Object> combineStructuralElems(List<Object> elemList){  List<Object> res=new ArrayList<>();  int i=0;  msgHandler.logDebug("====================================\n" + "combineMarkupElems: entry count: " + elemList.size() + "\n"+ "====================================");  while (i < elemList.size()) {    Object elemObj=elemList.get(i);    if (elemObj instanceof Map) {      Map<String,Object> elemInfo=(Map<String,Object>)elemObj;      String type=(String)elemInfo.get("type");      if (("note".equals(type) && Boolean.TRUE.equals(elemInfo.get("ownLine")))) {        msgHandler.logDebug("Got NOTE on own line: " + elemInfo.toString());        Object nextElemObj=null;        if ((i + 1) < elemList.size()) {          nextElemObj=elemList.get(i + 1);        }        msgHandler.logDebug("Next elem is: " + nextElemObj);        if (nextElemObj != null && nextElemObj instanceof Map) {          Map<String,Object> nextElemInfo=(Map<String,Object>)nextElemObj;          String nextElemType=(String)nextElemInfo.get("type");          msgHandler.logDebug("Got next elem: " + nextElemInfo.toString());          if ((elemInfo.get("value") == null) && "list".equals(nextElemType)) {            i++;            elemInfo.put("value",nextElemInfo);          } else           if ("indent".equals(nextElemType)) {            i++;            String currValue=(String)(elemInfo.get("value"));            String indentText=(String)nextElemInfo.get("value");            currValue=(currValue != null ? (currValue + "\n") : "") + indentText;            elemInfo.put("value",currValue);          }        }      }      res.add(elemInfo);    } else {      res.add(elemObj);    }    i++;  }  return res;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_BLOCKLIST_REMOVE_FROM_LIST(String value0){  return new SM_SYSTEM_MESSAGE(1300896,value0);}  }
class C{  public XPathExpressionException(Throwable cause){  super(cause);}  }
class C{  public static void write(byte[] data,OutputStream output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  public JSONArray put(Map<String,Object> value){  this.put(new JSONObject(value));  return this;}  }
class C{  @Override public boolean writeToURI(Node node,String URI) throws LSException {  if (node == null) {    return false;  }  XMLSerializer ser=null;  String ver=_getXmlVersion(node);  if (ver != null && ver.equals("1.1")) {    if (xml11Serializer == null) {      xml11Serializer=new XML11Serializer();      initSerializer(xml11Serializer);    }    copySettings(serializer,xml11Serializer);    ser=xml11Serializer;  } else {    ser=serializer;  }  String encoding=_getInputEncoding(node);  if (encoding == null) {    encoding=_getXmlEncoding(node);    if (encoding == null) {      encoding="UTF-8";    }  }  try {    prepareForSerialization(ser,node);    ser._format.setEncoding(encoding);    ser.setOutputByteStream(XMLEntityManager.createOutputStream(URI));    if (node.getNodeType() == Node.DOCUMENT_NODE)     ser.serialize((Document)node); else     if (node.getNodeType() == Node.DOCUMENT_FRAGMENT_NODE)     ser.serialize((DocumentFragment)node); else     if (node.getNodeType() == Node.ELEMENT_NODE)     ser.serialize((Element)node); else     return false;  } catch (  LSException lse) {    throw lse;  }catch (  RuntimeException e) {    if (e == DOMNormalizer.abort) {      return false;    }    throw (LSException)DOMUtil.createLSException(LSException.SERIALIZE_ERR,e).fillInStackTrace();  }catch (  Exception e) {    if (ser.fDOMErrorHandler != null) {      DOMErrorImpl error=new DOMErrorImpl();      error.fException=e;      error.fMessage=e.getMessage();      error.fSeverity=DOMError.SEVERITY_ERROR;      ser.fDOMErrorHandler.handleError(error);    }    throw (LSException)DOMUtil.createLSException(LSException.SERIALIZE_ERR,e).fillInStackTrace();  } finally {    ser.clearDocumentState();  }  return true;}  }
class C{  public static int copy(InputStream input,OutputStream output) throws IOException {  long count=copyLarge(input,output);  if (count > Integer.MAX_VALUE) {    return -1;  }  return (int)count;}  }
class C{  public boolean precise_newinstance(){  return soot.PhaseOptions.getBoolean(options,"precise-newinstance");}  }
class C{  public static Type collectionElementType(Type context,Class<?> contextRawType){  Type collectionType=getSupertype(context,contextRawType,Collection.class);  if (collectionType instanceof WildcardType) {    collectionType=((WildcardType)collectionType).getUpperBounds()[0];  }  if (collectionType instanceof ParameterizedType) {    return ((ParameterizedType)collectionType).getActualTypeArguments()[0];  }  return Object.class;}  }
class C{  public boolean isApplicable(){  AlignmentViewer viewer=(AlignmentViewer)getViewer();  return viewer.getAlignment().getReference() != null && viewer.getAlignment().getReference().getLength() > 0;}  }
class C{  public final Edge locateEdgeInGraph(UniqueVertexGraph gGraph,Vertex vHead,Vertex vTail){  Edge eRes=locateDirectedEdgeInGraph(gGraph,vHead,vTail);  return eRes == null ? locateDirectedEdgeInGraph(gGraph,vTail,vHead) : eRes;}  }
class C{  public void noiseTexture(Framebuffer target){  copy(mNoiseTexture,target);}  }
class C{  public static String quote(String string){  if (string == null || string.length() == 0) {    return "\"\"";  }  char b;  char c=0;  int i;  int len=string.length();  StringBuilder sb=new StringBuilder(len + 4);  String t;  sb.append('"');  for (i=0; i < len; i+=1) {    b=c;    c=string.charAt(i);switch (c) {case '\\':case '"':      sb.append('\\');    sb.append(c);  break;case '/':if (b == '<') {  sb.append('\\');}sb.append(c);break;case '\b':sb.append("\\b");break;case '\t':sb.append("\\t");break;case '\n':sb.append("\\n");break;case '\f':sb.append("\\f");break;case '\r':sb.append("\\r");break;default :if (c < ' ' || (c >= '\u0080' && c < '\u00a0') || (c >= '\u2000' && c < '\u2100')) {t="000" + Integer.toHexString(c);sb.append("\\u" + t.substring(t.length() - 4));} else {sb.append(c);}}}sb.append('"');return sb.toString();}  }
class C{  protected void writeLogFiles(File newOrFullPatchedFile,File oldFile,File dexDiffFile,String destMd5InDvm,String destMd5InArt,String dexDiffMd5) throws IOException {  if (metaWriter == null && logWriter == null) {    return;  }  String parentRelative=getParentRelativeString(newOrFullPatchedFile);  String relative=getRelativeString(newOrFullPatchedFile);  if (metaWriter != null) {    String fileName=newOrFullPatchedFile.getName();    String dexMode="jar";    if (config.mDexRaw) {      dexMode="raw";    }    String oldCrc;    if (oldFile == null) {      oldCrc="0";      Logger.d("DexDecoder:add newly dex file: %s",parentRelative);    } else {      oldCrc=FileOperation.getZipEntryCrc(config.mOldApkFile,relative);      if (oldCrc == null || oldCrc.equals("0")) {        throw new TinkerPatchException(String.format("can't find zipEntry %s from old apk file %s",relative,config.mOldApkFile.getPath()));      }    }    String meta=fileName + "," + parentRelative+ ","+ destMd5InDvm+ ","+ destMd5InArt+ ","+ dexDiffMd5+ ","+ oldCrc+ ","+ dexMode;    Logger.d("DexDecoder:write meta file data: %s",meta);    metaWriter.writeLineToInfoFile(meta);  }  if (logWriter != null) {    String log=relative + ", oldSize=" + FileOperation.getFileSizes(oldFile)+ ", newSize="+ FileOperation.getFileSizes(newOrFullPatchedFile)+ ", diffSize="+ FileOperation.getFileSizes(dexDiffFile);    logWriter.writeLineToInfoFile(log);  }}  }
class C{  private boolean isStateName(String tokenVal){  String[] state=(String[])usStatesHash.get(tokenVal);  if (state != null) {    boolean expandState=false;    if (state[1].equals("ambiguous")) {      String previous=(String)tokenItem.findFeature("p.name");      String next=(String)tokenItem.findFeature("n.name");      int nextLength=next.length();      FeatureSet featureSet=tokenItem.getFeatures();      boolean previousIsCity=(isUppercaseLetter(previous.charAt(0)) && previous.length() > 2 && matches(alphabetPattern,previous) && tokenItem.findFeature("p.punc").equals(","));      boolean nextIsGood=(isLowercaseLetter(next.charAt(0)) || tokenItem.getNext() == null || featureSet.getString("punc").equals(".") || ((nextLength == 5 || nextLength == 10) && matches(digitsPattern,next)));      expandState=previousIsCity && nextIsGood;    } else {      expandState=true;    }    if (expandState) {      for (int j=2; j < state.length; j++) {        if (state[j] != null) {          wordRelation.addWord(state[j]);        }      }      return true;    }  }  return false;}  }
class C{  public static Bitmap drawableToBitmap(Drawable drawable){  return drawable == null ? null : ((BitmapDrawable)drawable).getBitmap();}  }
class C{  private void resetBlockletProcessingCount(){  blockletProcessingCount.set(0);}  }
class C{  private static EscapeStringResult escapeString(String s,char quote){  final String[] octal_strings={"\\0","\\001","\\002","\\003","\\004","\\005","\\006","\\a","\\b","\\t","\\n","\\v","\\f","\\r","\\016","\\017","\\020","\\021","\\022","\\023","\\024","\\025","\\026","\\027","\\030","\\031","\\032","\\033","\\034","\\035","\\036","\\037"};  StringBuilder result=new StringBuilder(s);  boolean needQuotes=s.isEmpty();  for (int i=0, next_i; i < result.length(); i=next_i) {    final int code_point=result.codePointAt(i);    next_i=result.offsetByCodePoints(i,1);    if (code_point == 0) {      result.replace(i,next_i,"\\0");      next_i=i + 2;      needQuotes=true;    } else     if (code_point == (int)'\\') {      result.replace(i,next_i,"\\\\");      next_i=i + 2;      needQuotes=true;    } else     if (code_point == (int)quote) {      result.replace(i,next_i,"\\" + quote);      next_i=i + 2;      needQuotes=true;    } else     if (code_point < 32) {      String octal=octal_strings[code_point];      result.replace(i,next_i,octal);      next_i=i + octal.length();      needQuotes=true;    } else     if (code_point >= 65536) {      String repl=String.format("\\U%08x",code_point);      result.replace(i,next_i,repl);      next_i=i + repl.length();      needQuotes=true;    } else     if (code_point >= 128) {      String repl=String.format("\\u%04x",code_point);      result.replace(i,next_i,repl);      next_i=i + repl.length();      needQuotes=true;    }  }  return new EscapeStringResult(needQuotes,result);}  }
class C{  public void cancel(){  this.handler.cancel();}  }
class C{  public String timestamp(){  float totalSeconds=this.length();  float second=totalSeconds % 60;  int minute=(int)totalSeconds / 60 % 60;  int hour=(int)(totalSeconds / 3600);  StringBuilder sb=new StringBuilder();  if (hour > 0) {    sb.append(hour + ":");  }  if (minute > 0) {    sb.append(minute + ":");  }  sb.append(second);  return sb.toString();}  }
class C{  protected static double[] differentiate(double[] coefficients) throws MathIllegalArgumentException, NullArgumentException {  MathUtils.checkNotNull(coefficients);  int n=coefficients.length;  if (n == 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);  }  if (n == 1) {    return new double[]{0};  }  double[] result=new double[n - 1];  for (int i=n - 1; i > 0; i--) {    result[i - 1]=i * coefficients[i];  }  return result;}  }
class C{  public GiftsGetQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public void init$Children(){  children=new ASTNode[1];}  }
class C{  public Preference inflate(int resource,PreferenceGroup root){  XmlResourceParser parser=getContext().getResources().getXml(resource);  try {    return inflate(parser,root);  }  finally {    parser.close();  }}  }
class C{  public static void encodeFileToFile(String infile,String outfile) throws java.io.IOException {  String encoded=Base64.encodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(encoded.getBytes("US-ASCII"));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  public void notifyOnActionFired(View view,String actionType,Object model){  for (  OnActionFiredListener listener : mActionFiredListeners) {    listener.onActionFired(view,actionType,model);  }}  }
class C{  public void aionClientDisconnected(int accountId){synchronized (this) {    loginRequests.remove(accountId);    loggedInAccounts.remove(accountId);  }  sendAccountDisconnected(accountId);}  }
class C{  public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public static MainFragment newInstance(){  MainFragment fragment=new MainFragment();  Bundle args=new Bundle();  args.putString("DEMO_PRESET",CropDemoPreset.RECT.name());  fragment.setArguments(args);  return fragment;}  }
class C{  public ItemStack(final Material type){  this(type,1);}  }
class C{  public void refreshFolder(){  populated=false;  interim=true;  populateDirectories(false);}  }
class C{  private void weakRegionDFS2(Block v,int r){  this.m_regions.get(r).add2Back(v);  DominatorNode<Block> parentOfV=this.m_pdom.getParentOf(this.m_pdom.getDode(v));  Block u2=(parentOfV == null) ? null : parentOfV.getGode();  List<DominatorNode<Block>> children=this.m_dom.getChildrenOf(this.m_dom.getDode(v));  for (int i=0; i < children.size(); i++) {    DominatorNode<Block> w=children.get(i);    Block u1=w.getGode();    if (u2 != null && u1.equals(u2)) {      this.weakRegionDFS2(w.getGode(),r);    } else {      this.m_regCount++;      this.m_regions.put(this.m_regCount,this.createRegion(this.m_regCount));      this.weakRegionDFS2(w.getGode(),this.m_regCount);    }  }}  }
class C{  public boolean mayAlias(Value v1,Value v2,Unit u){  Set<Set<Value>> res=getFlowBefore(u);  for (  Set<Value> set : res) {    if (set.contains(v1) && set.contains(v2))     return true;  }  return false;}  }
class C{  public Kurtosis(){  moment=new FourthMoment();  incMoment=true;}  }
class C{  public synchronized void returnBuf(byte[] buf){  if (buf == null || buf.length > mSizeLimit) {    return;  }  mBuffersByLastUse.add(buf);  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);  if (pos < 0) {    pos=-pos - 1;  }  mBuffersBySize.add(pos,buf);  mCurrentSize+=buf.length;  trim();}  }
class C{  public void push(boolean value){  ensureCapacity(fDepth + 1);  fData[fDepth++]=value;}  }
class C{  public ColorAnimator(String group){  super(group);  setColorFields(DEFAULTS);}  }
class C{  public int installSilent(Context context,String filePath,String pmParams){  if (filePath == null || filePath.length() == 0) {    return INSTALL_FAILED_INVALID_URI;  }  File file=new File(filePath);  if (file == null || file.length() <= 0 || !file.exists() || !file.isFile()) {    return INSTALL_FAILED_INVALID_URI;  }  StringBuilder command=new StringBuilder().append("LD_LIBRARY_PATH=/vendor/lib:/system/lib pm install ").append(pmParams == null ? "" : pmParams).append(" ").append(filePath.replace(" ","\\ "));  ShellUtil.CommandResult commandResult=ShellUtil.execCommand(command.toString(),!isSystemApplication(context),true);  if (commandResult.responseMsg != null && (commandResult.responseMsg.contains("Success") || commandResult.responseMsg.contains("success"))) {    return INSTALL_SUCCEEDED;  }  LogUtils.e(new StringBuilder().append("installSilent successMsg:").append(commandResult.responseMsg).append(", ErrorMsg:").append(commandResult.errorMsg).toString());  if (commandResult.errorMsg == null) {    return INSTALL_FAILED_OTHER;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_ALREADY_EXISTS")) {    return INSTALL_FAILED_ALREADY_EXISTS;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_INVALID_APK")) {    return INSTALL_FAILED_INVALID_APK;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_INVALID_URI")) {    return INSTALL_FAILED_INVALID_URI;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_INSUFFICIENT_STORAGE")) {    return INSTALL_FAILED_INSUFFICIENT_STORAGE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_DUPLICATE_PACKAGE")) {    return INSTALL_FAILED_DUPLICATE_PACKAGE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_NO_SHARED_USER")) {    return INSTALL_FAILED_NO_SHARED_USER;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_UPDATE_INCOMPATIBLE")) {    return INSTALL_FAILED_UPDATE_INCOMPATIBLE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_SHARED_USER_INCOMPATIBLE")) {    return INSTALL_FAILED_SHARED_USER_INCOMPATIBLE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_MISSING_SHARED_LIBRARY")) {    return INSTALL_FAILED_MISSING_SHARED_LIBRARY;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_REPLACE_COULDNT_DELETE")) {    return INSTALL_FAILED_REPLACE_COULDNT_DELETE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_DEXOPT")) {    return INSTALL_FAILED_DEXOPT;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_OLDER_SDK")) {    return INSTALL_FAILED_OLDER_SDK;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_CONFLICTING_PROVIDER")) {    return INSTALL_FAILED_CONFLICTING_PROVIDER;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_NEWER_SDK")) {    return INSTALL_FAILED_NEWER_SDK;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_TEST_ONLY")) {    return INSTALL_FAILED_TEST_ONLY;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_CPU_ABI_INCOMPATIBLE")) {    return INSTALL_FAILED_CPU_ABI_INCOMPATIBLE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_MISSING_FEATURE")) {    return INSTALL_FAILED_MISSING_FEATURE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_CONTAINER_ERROR")) {    return INSTALL_FAILED_CONTAINER_ERROR;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_INVALID_INSTALL_LOCATION")) {    return INSTALL_FAILED_INVALID_INSTALL_LOCATION;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_MEDIA_UNAVAILABLE")) {    return INSTALL_FAILED_MEDIA_UNAVAILABLE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_VERIFICATION_TIMEOUT")) {    return INSTALL_FAILED_VERIFICATION_TIMEOUT;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_VERIFICATION_FAILURE")) {    return INSTALL_FAILED_VERIFICATION_FAILURE;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_PACKAGE_CHANGED")) {    return INSTALL_FAILED_PACKAGE_CHANGED;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_UID_CHANGED")) {    return INSTALL_FAILED_UID_CHANGED;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_NOT_APK")) {    return INSTALL_PARSE_FAILED_NOT_APK;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_BAD_MANIFEST")) {    return INSTALL_PARSE_FAILED_BAD_MANIFEST;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION")) {    return INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_NO_CERTIFICATES")) {    return INSTALL_PARSE_FAILED_NO_CERTIFICATES;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES")) {    return INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_CERTIFICATE_ENCODING")) {    return INSTALL_PARSE_FAILED_CERTIFICATE_ENCODING;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_BAD_PACKAGE_NAME")) {    return INSTALL_PARSE_FAILED_BAD_PACKAGE_NAME;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_BAD_SHARED_USER_ID")) {    return INSTALL_PARSE_FAILED_BAD_SHARED_USER_ID;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_MANIFEST_MALFORMED")) {    return INSTALL_PARSE_FAILED_MANIFEST_MALFORMED;  }  if (commandResult.errorMsg.contains("INSTALL_PARSE_FAILED_MANIFEST_EMPTY")) {    return INSTALL_PARSE_FAILED_MANIFEST_EMPTY;  }  if (commandResult.errorMsg.contains("INSTALL_FAILED_INTERNAL_ERROR")) {    return INSTALL_FAILED_INTERNAL_ERROR;  }  return INSTALL_FAILED_OTHER;}  }
class C{  public boolean compare(LexiconImpl other){  return compare(addenda,other.addenda) && compare(compiled,other.compiled);}  }
class C{  public void swapChildren(int index1,int index2){  Spatial c2=children.get(index2);  Spatial c1=children.remove(index1);  children.add(index1,c2);  children.remove(index2);  children.add(index2,c1);}  }
class C{  public void addNewImageOutlineLine(){  if (symbolTree == null) {    return;  }  Object oldValueObj=sldWriter.encodeSLD(null,SelectedSymbol.getInstance().getSld());  LineSymbolizer newLineSymbolizer=DefaultSymbols.createDefaultLineSymbolizer();  DefaultMutableTreeNode ruleNode=getRasterTreeNode();  SelectedSymbol.getInstance().addImageOutlineSymbolizerToRaster(newLineSymbolizer);  DefaultMutableTreeNode newNode=sldTree.addObject(ruleNode,newLineSymbolizer,true);  if (newNode != null) {    sldTree.addObject(newNode,SLDTreeLeafFactory.getInstance().getStroke(newLineSymbolizer),true);    TreePath newPath=getPath(newNode);    symbolTree.setSelectionPath(newPath);    Object newValueObj=sldWriter.encodeSLD(null,SelectedSymbol.getInstance().getSld());    UndoManager.getInstance().addUndoEvent(new UndoEvent(sldTree.getUndoObject(),getClass().getName(),oldValueObj,newValueObj));  }}  }
class C{  public static void send(Activity activity,int requestCode,String... permissions){  with(activity).requestCode(requestCode).permission(permissions).send();}  }
class C{  public boolean isEnabled(){  return mEnabled;}  }
class C{  public void testWriteReadEmpty() throws Exception {  ByteArrayOutputStream out=new ByteArrayOutputStream(0);  ObjectOutputStream os=new ObjectOutputStream(out);  os.writeObject(empty);  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));  LoadBalancingPolicy.LoadBalancingPolicyDescription copy=(LoadBalancingPolicy.LoadBalancingPolicyDescription)is.readObject();  is.close();  os.close();  assertTrue(helper.areEquals(empty,copy));}  }
class C{  @Override public void instantiate(@NotNull File from,@NotNull File to) throws TemplateProcessingException {  try {    boolean isDirectory=from.getName().indexOf('.') == -1;    if (isDirectory) {      copyTemplateResource(from,to);    } else {      File sourceFile=myContext.getLoader().getSourceFile(from);      File targetFile=getTargetFile(to);      String content=processFreemarkerTemplate(myContext,sourceFile,null);      if (targetFile.exists()) {        if (!compareTextFile(targetFile,content)) {          addFileAlreadyExistWarning(targetFile);        }      } else {        myIO.writeFile(this,content,targetFile);        myReferences.addSourceFile(sourceFile);        myReferences.addTargetFile(targetFile);      }    }  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public boolean isSetSendTime(){  return __isset_bit_vector.get(__SENDTIME_ISSET_ID);}  }
class C{  public LoggedMqttMessage parse(final String xmlMessage) throws XMLException {  return (LoggedMqttMessage)super.unmarshal(xmlMessage,LoggedMqttMessage.class);}  }
class C{  private static ConfigurationRequest fromXML(final Element domElement){  ConfigurationRequest result=null;  if (domElement.getNodeName().equals(CONFIGURATION_XML_ROOT)) {    String idStr=domElement.getAttribute(CONFIGURATION_ID_ATTRIBUTE);    if (idStr == null || idStr.length() == 0) {      throw new RuntimeException("Unable to read configuration request id: " + idStr);    } else {      result=new ConfigurationRequest(new Integer(idStr));    }    return result;  } else {    throw new MessageConversionException("Called the fromXML message on the wrong XML doc Element! - check your code as this should be checked first");  }}  }
class C{  private BSPTree<Sphere1D> leafBefore(BSPTree<Sphere1D> node){  node=childBefore(node);  while (node.getCut() != null) {    node=childAfter(node);  }  return node;}  }
class C{  private String resolveProperty(String propertyName){  try {    String propertyValue=System.getProperty(FILENAME_PATTTERN_PLACEHOLDER_PREFIX + propertyName);    if (propertyValue != null) {      return propertyValue;    }    propertyValue=overrides.getProperty(propertyName);    if (propertyValue != null) {      return propertyValue;    }    if (propertyName.equals(HOMEDIR_PROP)) {      return SystemInfo.singleton().getXapHome();    } else     if (propertyName.equals(HOST_PROP)) {      return SystemInfo.singleton().network().getHostId();    } else     if (propertyName.equals(PID_PROP)) {      return "" + SystemInfo.singleton().os().processId();    } else     if (propertyName.startsWith(DATE_PROP)) {      String dateFormat=DATE_PATTERN_DEFAULT;      int indexOf=propertyName.indexOf(',');      if (indexOf != -1) {        dateFormat=propertyName.substring(indexOf + 1,propertyName.length());      }      SimpleDateFormat formatter=new SimpleDateFormat(dateFormat);      String date=formatter.format(new Date());      return date;    } else {      return propertyName;    }  } catch (  Throwable t) {    reportError("Failed acquiring property value for: " + propertyName,new Exception(t),ErrorManager.FORMAT_FAILURE);    return "";  }}  }
class C{  public static final void toString(StringBuffer output,int[] tab){  if (tab == null) {    output.append("null");    return;  }  output.append("(");  int size=tab.length;  output.append(size);  if (listMax == -1 || size <= listMax) {    for (int i=0; i < size; i++) {      output.append(",");      output.append(tab[i]);    }  } else {    int border=size / 2;    if (listBorder < border)     border=listBorder;    for (int i=0; i < border; i++) {      output.append(",");      output.append(tab[i]);    }    output.append(",...");    for (int i=border; i > 0; i--) {      output.append(",");      output.append(tab[size - i]);    }  }  output.append(")");}  }
class C{  public boolean isApplicable(){  if (resamplingSize < 1) {    System.err.println("Illegal resamplingsize: " + resamplingSize);    return false;  }  if (repeatitions < 1) {    System.err.println("Illegal repeatitions: " + repeatitions);    return false;  }  if ((p_left < 0) || (p_left > 100)) {    System.err.println("Illegal percentile: " + p_left);    return false;  }  if (input1 != null && input2 != null && (input1.isEmpty() || input2.isEmpty())) {    System.err.println("Illegal empty dataset");    return false;  }  int sum=0;  if (input1 != null && useSecond) {    for (    int i : input1.values()) {      sum=sum + i;    }    if (sum == 0) {      System.err.println("Illegal: the 1st data set contains all zeros, resampling not possible!");      return false;    }    if (input2.containsValue(0)) {      System.err.println("Illegal: the data set as percentile set contains zero value!");      return false;    } else     return true;  } else   if (input2 != null) {    for (    int j : input2.values()) {      sum=sum + j;    }    if (sum == 0) {      System.err.println("Illegal: the 2nd data set contains all zeros, resampling not possible!");      return false;    }    if (input1.containsValue(0)) {      System.err.println("Illegal: the data set as percentile set contains zero value!");      return false;    }  }  return true;}  }
class C{  protected AudioEditQuery audioId(int value){  return unsafeParam("audio_id",value);}  }
class C{  public static boolean isMemoryOnlySearch(int mod){  return Modifiers.contains(mod,MEMORY_ONLY_SEARCH);}  }
class C{  public long sum(){  long sum=base;  Cell[] as=cells;  if (as != null) {    int n=as.length;    for (int i=0; i < n; ++i) {      Cell a=as[i];      if (a != null)       sum+=a.value;    }  }  return sum;}  }
class C{  protected void addParentOfNode(WeakRef<Node> node,TreeItem<WeakRef<Node>> treeItemChild){  Parent p=getParent(node);  if (p != null) {    TreeItem<WeakRef<Node>> treeItemParent=getTreeItemFromMap(new WeakRef<Node>(p));    if (treeItemParent == null) {      treeItemParent=insertIntoMap(p);    }    treeItemParent.getChildren().add(treeItemChild);  }}  }
class C{  @Override public void populateExpression(Object objValue){  if (ttfPanel != null) {    if (objValue instanceof String) {      ttfPanel.populateExpression((String)objValue);    }  }}  }
class C{  public double featureCost(Target target,Unit unit,String featureName){  return featureCost(target,unit,featureName,featureDefinition,weightFunction);}  }
class C{  public Iterator<RecordID> scanFrom(DataType startValue){  List<BEntry> validEntries=getAllValidEntries();  List<RecordID> rids=new ArrayList<RecordID>();  for (  BEntry le : validEntries) {    if (startValue.compareTo(le.getKey()) < 1) {      rids.add(le.getRecordID());    }  }  return rids.iterator();}  }
class C{  public static boolean isFileTypeSupported(int fileType,Sequence sequence){  List providers=getMidiFileWriters();  for (int i=0; i < providers.size(); i++) {    MidiFileWriter writer=(MidiFileWriter)providers.get(i);    if (writer.isFileTypeSupported(fileType,sequence)) {      return true;    }  }  return false;}  }
class C{  private boolean retryDelayHasPassedBy(Long lastFailTime){  return lastFailTime == null || lastFailTime + this.retryAfterMs < System.currentTimeMillis();}  }
class C{  private void processXMLForClass(SootClass c){  final int format=Options.v().output_format();  String fileName=SourceLocator.v().getFileNameFor(c,format);  XMLAttributesPrinter xap=new XMLAttributesPrinter(fileName,SourceLocator.v().getOutputDir());  xap.printAttrs(c);}  }
class C{  public <T8>Pattern8<T1,T2,T3,T4,T5,T6,T7,T8> and(Observable<T8> other){  if (other == null) {    throw new NullPointerException();  }  return new Pattern8<T1,T2,T3,T4,T5,T6,T7,T8>(o1,o2,o3,o4,o5,o6,o7,other);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public Block fullCopy(){  Block tree=(Block)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static void showBrand(Player player,int targetObjId,int brandId){  PlayerAlliance alliance=player.getPlayerAlliance2();  if (alliance != null) {    alliance.onEvent(new ShowBrandEvent<PlayerAlliance>(alliance,targetObjId,brandId));  }}  }
class C{  public AdsGetRejectionReasonQuery(VkApiClient client,UserActor actor,int accountId,int adId){  super(client,"ads.getRejectionReason",RejectReason.class);  accessToken(actor.getAccessToken());  accountId(accountId);  adId(adId);}  }
class C{  public synchronized Map<D,EdgeFunction<L>> reverseLookup(N target,D targetVal){  assert target != null;  assert targetVal != null;  Map<D,EdgeFunction<L>> res=nonEmptyReverseLookup.get(target,targetVal);  if (res == null)   return Collections.emptyMap();  return res;}  }
class C{  public void init(){  n_var=int2var.size();  for (int i=0; i < n_var; ++i) {    varGraph.set(i,null);    int2var.get(i).willUpdate=false;  }}  }
class C{  public void addAsset(UUID uuid,String assetPath){  assetMap.put(uuid,assetPath);}  }
class C{  private static void insertEdges(final double hyperplaneThickness,final BSPTree<Euclidean2D> node,final List<Edge> edges){  int index=0;  Edge inserted=null;  while (inserted == null && index < edges.size()) {    inserted=edges.get(index++);    if (inserted.getNode() == null) {      if (node.insertCut(inserted.getLine())) {        inserted.setNode(node);      } else {        inserted=null;      }    } else {      inserted=null;    }  }  if (inserted == null) {    final BSPTree<Euclidean2D> parent=node.getParent();    if (parent == null || node == parent.getMinus()) {      node.setAttribute(Boolean.TRUE);    } else {      node.setAttribute(Boolean.FALSE);    }    return;  }  final List<Edge> plusList=new ArrayList<Edge>();  final List<Edge> minusList=new ArrayList<Edge>();  for (  final Edge edge : edges) {    if (edge != inserted) {      final double startOffset=inserted.getLine().getOffset((Point<Euclidean2D>)edge.getStart().getLocation());      final double endOffset=inserted.getLine().getOffset((Point<Euclidean2D>)edge.getEnd().getLocation());      Side startSide=(FastMath.abs(startOffset) <= hyperplaneThickness) ? Side.HYPER : ((startOffset < 0) ? Side.MINUS : Side.PLUS);      Side endSide=(FastMath.abs(endOffset) <= hyperplaneThickness) ? Side.HYPER : ((endOffset < 0) ? Side.MINUS : Side.PLUS);switch (startSide) {case PLUS:        if (endSide == Side.MINUS) {          final Vertex splitPoint=edge.split(inserted.getLine());          minusList.add(splitPoint.getOutgoing());          plusList.add(splitPoint.getIncoming());        } else {          plusList.add(edge);        }      break;case MINUS:    if (endSide == Side.PLUS) {      final Vertex splitPoint=edge.split(inserted.getLine());      minusList.add(splitPoint.getIncoming());      plusList.add(splitPoint.getOutgoing());    } else {      minusList.add(edge);    }  break;default :if (endSide == Side.PLUS) {  plusList.add(edge);} else if (endSide == Side.MINUS) {  minusList.add(edge);}break;}}}if (!plusList.isEmpty()) {insertEdges(hyperplaneThickness,node.getPlus(),plusList);} else {node.getPlus().setAttribute(Boolean.FALSE);}if (!minusList.isEmpty()) {insertEdges(hyperplaneThickness,node.getMinus(),minusList);} else {node.getMinus().setAttribute(Boolean.TRUE);}}  }
class C{  protected void merge(Object in1,Object in2,Object out){  FlowSet fin1=(FlowSet)in1;  FlowSet fin2=(FlowSet)in2;  FlowSet fout=(FlowSet)out;  fin1.union(fin2,fout);}  }
class C{  public UserDataAccessException(Throwable cause){  super(cause);}  }
class C{  @Override public synchronized void put(String key,Entry entry){  pruneIfNeeded(entry.data.length);  File file=getFileForKey(key);  try {    BufferedOutputStream fos=new BufferedOutputStream(new FileOutputStream(file));    CacheHeader e=new CacheHeader(key,entry);    boolean success=e.writeHeader(fos);    if (!success) {      fos.close();      VolleyLog.d("Failed to write header for %s",file.getAbsolutePath());      throw new IOException();    }    fos.write(entry.data);    fos.close();    putEntry(key,e);    return;  } catch (  IOException e) {  }  boolean deleted=file.delete();  if (!deleted) {    VolleyLog.d("Could not clean up file %s",file.getAbsolutePath());  }}  }
class C{  public static void checkAndCreateCarbonDataLocation(String carbonStorePath,String dbName,String tableName,int partitionCount,String segmentId){  CarbonTable carbonTable=CarbonMetadata.getInstance().getCarbonTable(dbName + CarbonCommonConstants.UNDERSCORE + tableName);  CarbonTableIdentifier carbonTableIdentifier=carbonTable.getCarbonTableIdentifier();  CarbonTablePath carbonTablePath=CarbonStorePath.getCarbonTablePath(carbonStorePath,carbonTableIdentifier);  for (int i=0; i < partitionCount; i++) {    String carbonDataDirectoryPath=carbonTablePath.getCarbonDataDirectoryPath(String.valueOf(i),segmentId);    CarbonUtil.checkAndCreateFolder(carbonDataDirectoryPath);  }}  }
class C{  @PostConstruct public void init(){  cacheRegistrationService.registerSynchronousToAllTags(this);  cacheRegistrationService.registerForSupervisionChanges(this);}  }
class C{  private synchronized boolean _keepRunning(){  return m_run;}  }
class C{  public void prune(double dMinCoexistenceImportance){  Graph.prune(dMinCoexistenceImportance);}  }
class C{  @Override public String object2Relation(String fieldType){  if (fieldType != null) {    if (fieldType.equals("char") || fieldType.equals("java.lang.Character")) {      return "text";    }    if (fieldType.equals("java.lang.String")) {      return "text";    }  }  return null;}  }
class C{  public static void initialize(Context context){  sContext=context;}  }
class C{  @Override public boolean hasRaster(Symbolizer symbolizer){  return false;}  }
class C{  public ActivitiEventImpl(ActivitiEventType type,String executionId,String processInstanceId,String processDefinitionId){  if (type == null) {    throw new ActivitiIllegalArgumentException("type is null");  }  this.type=type;  this.executionId=executionId;  this.processInstanceId=processInstanceId;  this.processDefinitionId=processDefinitionId;}  }
class C{  public BasicProxyTrustVerifier(Object proxy){  if (!(proxy instanceof RemoteMethodControl)) {    throw new IllegalArgumentException("proxy not a RemoteMethodControl instance");  } else   if (!(proxy instanceof TrustEquivalence)) {    throw new IllegalArgumentException("proxy not a TrustEquivalence instance");  }  this.proxy=(RemoteMethodControl)proxy;}  }
class C{  public static void precachingFinished(Context context,boolean tryAgainSoon){  new PrecacheServiceLauncher().precachingFinishedInternal(context,tryAgainSoon);}  }
class C{  protected Composite createComposite(Composite parent,int numColumns){  Composite composite=new Composite(parent,SWT.NULL);  GridLayout layout=new GridLayout();  layout.numColumns=numColumns;  composite.setLayout(layout);  GridData data=new GridData();  data.verticalAlignment=GridData.FILL;  data.horizontalAlignment=GridData.FILL;  composite.setLayoutData(data);  return composite;}  }
class C{  public void remove(){}  }
class C{  public void startTrackingOrientation(){  sensorManager.registerListener(phoneOrientationListener,orientationSensor,SensorManager.SENSOR_DELAY_GAME);}  }
class C{  public AuthenticatorException(Throwable nested){  super(nested);}  }
class C{  @Override public void populateExpression(Object objValue){  Double newValue=0.0;  if (objValue instanceof Integer) {    int i=((Integer)objValue).intValue();    newValue=Double.valueOf((double)i);  } else   if (objValue instanceof Long) {    long i=((Long)objValue).longValue();    newValue=Double.valueOf((double)i);  } else   if (objValue instanceof Double) {    newValue=(Double)objValue;  }  if (objValue instanceof String) {    newValue=Double.valueOf((String)objValue);  }  populateField(newValue);}  }
class C{  private static long addNonStackableItem(Player player,ItemTemplate itemTemplate,long count,Item sourceItem,ItemUpdatePredicate predicate){  Storage inventory=player.getInventory();  while (!inventory.isFull(itemTemplate.getExtraInventoryId()) && count > 0) {    Item newItem=ItemFactory.newItem(itemTemplate.getTemplateId());    if (newItem.getExpireTime() != 0) {      ExpireTimerTask.getInstance().addTask(newItem,player);    }    if (sourceItem != null) {      copyItemInfo(sourceItem,newItem);    }    predicate.changeItem(newItem);    inventory.add(newItem,predicate.getAddType());    count--;  }  return count;}  }
class C{  public SpaceEntryPropertyGetter(int index){  this._propertyIndex=index;}  }
class C{  private boolean verifyAnchorView(View forChild,CoordinatorLayout parent){  if (mAnchorView.getId() != mAnchorId) {    return false;  }  View directChild=mAnchorView;  for (ViewParent p=mAnchorView.getParent(); p != parent; p=p.getParent()) {    if (p == null || p == forChild) {      mAnchorView=mAnchorDirectChild=null;      return false;    }    if (p instanceof View) {      directChild=(View)p;    }  }  mAnchorDirectChild=directChild;  return true;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_HOSTILE_DEATH_TO_B(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1360004,value0,value1);}  }
class C{  private static void startup() throws TransformerFactoryConfigurationError, TransformerConfigurationException {  if (tFactory == null) {    tFactory=TransformerFactory.newInstance();  }  if (stylesheet == null) {    StreamSource stylesheetStream=null;    try {      stylesheetStream=new StreamSource(MaryLink.getContext().getAssets().open("marytts/util/dom/normalise-maryxml.xsl"));    } catch (    IOException e) {      Log.d(Mary.LOG,e.getMessage());    }    stylesheet=tFactory.newTemplates(stylesheetStream);  }}  }
class C{  public static double sinh(double x){  return (Math.exp(x) - Math.exp(-x)) / 2.0;}  }
class C{  public static double[] computeLogPowerSpectrum_FD(final double[] fft){  double[] spectrum=computePowerSpectrum_FD(fft);  for (int i=0; i < spectrum.length; i++) {    spectrum[i]=MathUtils.db(spectrum[i]);  }  return spectrum;}  }
class C{  public static int objectIndex(int luaState,Object obj,String methodName) throws LuaException {  LuaState L=LuaStateFactory.getExistingState(luaState);synchronized (L) {    int top=L.getTop();    Object[] objs=new Object[top - 1];    Class clazz;    if (obj instanceof Class) {      clazz=(Class)obj;    } else {      clazz=obj.getClass();    }    Method[] methods=clazz.getMethods();    Method method=null;    for (int i=0; i < methods.length; i++) {      if (!methods[i].getName().equals(methodName))       continue;      Class[] parameters=methods[i].getParameterTypes();      if (parameters.length != top - 1)       continue;      boolean okMethod=true;      for (int j=0; j < parameters.length; j++) {        try {          objs[j]=compareTypes(L,parameters[j],j + 2);        } catch (        Exception e) {          okMethod=false;          break;        }      }      if (okMethod) {        method=methods[i];        break;      }    }    if (method == null) {      throw new LuaException("Invalid method call. No such method.");    }    Object ret;    try {      if (Modifier.isPublic(method.getModifiers())) {        method.setAccessible(true);      }      if (obj instanceof Class) {        ret=method.invoke(null,objs);      } else {        ret=method.invoke(obj,objs);      }    } catch (    Exception e) {      throw new LuaException(e);    }    if (ret == null) {      return 0;    }    L.pushObjectValue(ret);    return 1;  }}  }
class C{  @Deprecated public MapCursor addCursor(int x,int y,byte direction,byte type,boolean visible){  return addCursor(new MapCursor((byte)x,(byte)y,direction,type,visible));}  }
class C{  public Matrix(double[][] A,int m,int n){  this.A=A;  this.m=m;  this.n=n;}  }
class C{  public BoundedInputStream(InputStream in){  this(in,-1);}  }
class C{  @ObjectiveCName("subscribe:") public List subscribe(ListChangedListener listChangedListener){  return this.subscribe(listChangedListener,false);}  }
class C{  protected final int nextIndex(){  if (_expectedSize != _hash.size()) {    throw new ConcurrentModificationException();  }  Object[] set=_map._set;  int i=_index;  while (i-- > 0 && (set[i] == null || set[i] == TObjectHash.REMOVED || set[i] == TObjectHash.FREE))   ;  return i;}  }
class C{  public XMLParser(final String namespace,final String[] schemas) throws XMLException {  try {    JAXBContext jc=JAXBContext.newInstance(namespace);    marshaller=jc.createMarshaller();    marshaller.setSchema(XMLSchemaUtils.createSchema(schemas));    unmarshaller=jc.createUnmarshaller();    unmarshaller.setSchema(XMLSchemaUtils.createSchema(schemas));  } catch (  JAXBException e) {    throw new XMLException("Cannot instantiate marshaller/unmarshaller for " + namespace,e);  }}  }
class C{  public FTPClient(){  addListParser(new UnixListParser());  addListParser(new DOSListParser());  addListParser(new EPLFListParser());  addListParser(new NetWareListParser());  addListParser(new MLSDListParser());}  }
class C{  public RequestHandle delete(Context context,String url,ResponseHandlerInterface responseHandler){  final HttpDelete delete=new HttpDelete(url);  return sendRequest(httpClient,httpContext,delete,null,responseHandler,context);}  }
class C{  static <T>AnyVal<Object> headAnyTail(T head,AnyVal<? extends List<? extends T>> tail){  return new AnyConsImpl(head,null,null,tail);}  }
class C{  protected boolean isEnabledForUnmanagedResources(){  return false;}  }
class C{  private GaussianMixture(){}  }
class C{  public void revertSelf(){  direct=!direct;}  }
class C{  void initFromCameraParameters(Camera camera){  Camera.Parameters parameters=camera.getParameters();  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  Point theScreenResolution=new Point();  display.getSize(theScreenResolution);  screenResolution=theScreenResolution;  Log.i(TAG,"Screen resolution: " + screenResolution);  Point screenResolutionForCamera=new Point();  screenResolutionForCamera.x=screenResolution.x;  screenResolutionForCamera.y=screenResolution.y;  if (screenResolution.x < screenResolution.y) {    screenResolutionForCamera.x=screenResolution.y;    screenResolutionForCamera.y=screenResolution.x;  }  cameraResolution=CameraConfigurationUtils.findBestPreviewSizeValue(parameters,screenResolutionForCamera);  Log.i(TAG,"Camera resolution: " + cameraResolution);}  }
class C{  private List<ValidationError> validate(){  List<ValidationError> errors=Lists.newArrayList();  Module module=getModule();  errors.addAll(BlazeAndroidRunConfigurationValidationUtil.validateModule(module));  AndroidFacet facet=null;  if (module != null) {    facet=AndroidFacet.getInstance(module);    errors.addAll(BlazeAndroidRunConfigurationValidationUtil.validateFacet(facet,module));  }  errors.addAll(configState.validate(facet));  errors.addAll(BlazeAndroidRunConfigurationValidationUtil.validateLabel(getLabel(),configuration.getProject(),Kind.ANDROID_TEST));  return errors;}  }
class C{  public void parse(){  if (singleShot) {    metricImpl=metric.constructMetric(confidenceLevel,1.0);  } else {    metricImpl=metric.constructMetric(confidenceLevel);  }}  }
class C{  public void unsubscribe(){  try {    listenersLock.writeLock().lock();    listeners.clear();  }  finally {    listenersLock.writeLock().unlock();  }}  }
class C{  private FeatureEntryPoint createFeatureEntryPoint(FeatureData feature){  return new FeatureEntryPoint(feature,myListener);}  }
class C{  public static boolean verifyDexFileMd5(File file,String md5){  if (file == null || md5 == null) {    return false;  }  String fileMd5;  if (isRawDexFile(file.getName())) {    fileMd5=getMD5(file);  } else {    ZipFile dexJar=null;    try {      dexJar=new ZipFile(file);      ZipEntry classesDex=dexJar.getEntry(ShareConstants.DEX_IN_JAR);      if (null == classesDex) {        return false;      }      fileMd5=getMD5(dexJar.getInputStream(classesDex));    } catch (    IOException e) {      return false;    } finally {      SharePatchFileUtil.closeZip(dexJar);    }  }  return md5.equals(fileMd5);}  }
class C{  public static void openSecuritySettings(@NonNull Context context){  Intent intent=new Intent(Settings.ACTION_SECURITY_SETTINGS);  context.startActivity(intent);}  }
class C{  public AdamsMoultonIntegrator(final int nSteps,final double minStep,final double maxStep,final double scalAbsoluteTolerance,final double scalRelativeTolerance) throws MathIllegalArgumentException {  super(METHOD_NAME,nSteps,nSteps + 1,minStep,maxStep,scalAbsoluteTolerance,scalRelativeTolerance);}  }
class C{  protected AdsCreateCampaignsQuery data(String value){  return unsafeParam("data",value);}  }
class C{  public static CompositeTrustManager matchAny(X509TrustManager... managers){  return (new CompositeTrustManager(managers,false));}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 2284) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  private static boolean canSafelyInlineInto(SootMethod inlinee,Stmt toInline,SootMethod container){  if (inlinee.getName().equals("<init>"))   return false;  if (inlinee.getSignature().equals(container.getSignature()))   return false;  if (inlinee.isNative() || inlinee.isAbstract())   return false;  InvokeExpr ie=toInline.getInvokeExpr();  Value base=(ie instanceof InstanceInvokeExpr) ? ((InstanceInvokeExpr)ie).getBase() : null;  if (base != null && base.getType() instanceof RefType && invokeThrowsAccessErrorIn(((RefType)base.getType()).getSootClass(),inlinee,container))   return false;  if (ie instanceof SpecialInvokeExpr && (specialInvokePerformsLookupIn(ie,inlinee.getDeclaringClass()) || specialInvokePerformsLookupIn(ie,container.getDeclaringClass())))   return false;  return true;}  }
class C{  @Override public boolean implementsInterface(@Nonnull String iface){  if (getInterfaces().containsKey(iface)) {    return true;  }  if (!interfacesFullyResolved) {    throw new UnresolvedClassException("Interfaces for class %s not fully resolved",getType());  }  return false;}  }
class C{  public UniqueOrKey(String namespace,String identityConstraintName,String elemName,short type){  super(namespace,identityConstraintName,elemName);  this.type=type;}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  return new PlanarYUVLuminanceSource(data,width,height,0,0,width,height,false);}  }
class C{  public boolean union(RWSet other){  throw new RuntimeException("Unsupported");}  }
class C{  public List<Contentlet> executeSafe(){  try {    return APILocator.getContentletAPI().search(query.toString(),this.limit,this.offset,this.sortBy,APILocator.getUserAPI().getSystemUser(),false);  } catch (  DotDataException|DotSecurityException e) {    Logger.warn(this,"Exception while executing query",e);  }  return new ArrayList<Contentlet>();}  }
class C{  public static Class[] toClass(EntryClassBase[] eclasses){  Class[] classes=null;  if (eclasses != null) {    classes=new Class[eclasses.length];    for (int i=eclasses.length; --i >= 0; ) {      try {        EntryClassBase eclass=eclasses[i];        classes[i]=eclass.eclass.toClass(eclass.codebase);      } catch (      Throwable e) {        RegistrarProxy.handleException(e);      }    }  }  return classes;}  }
class C{  public static Matrix4 calculateProjectionMatrix(int width,int height,double fx,double fy,double cx,double cy){  double near=0.1;  double far=100;  double xScale=near / fx;  double yScale=near / fy;  double xOffset=(cx - (width / 2.0)) * xScale;  double yOffset=-(cy - (height / 2.0)) * yScale;  double m[]=new double[16];  Matrix.frustumM(m,0,xScale * -width / 2.0 - xOffset,xScale * width / 2.0 - xOffset,yScale * -height / 2.0 - yOffset,yScale * height / 2.0 - yOffset,near,far);  return new Matrix4(m);}  }
class C{  public boolean closeRemoteService(String url){  url=url.replace(".*://","");  for (int i=0; i < tabbedPane.getTabCount(); i++) {    if (tabbedPane.getComponentAt(i) instanceof ServicePanel) {      final ServicePanel panel=(ServicePanel)tabbedPane.getComponentAt(i);      if (panel.getService().getServerURL().equalsIgnoreCase(url)) {{          RemoteServiceManager.removeNode(url);          tabbedPane.remove(panel);          return true;        }      }    }  }  return false;}  }
class C{  public static HashProvider best(HashParameters params,EnumSet<HashSupport> required){  HashProvider result=null;  EnumSet<HashSupport> resultSupport=null;  for (  final HashProvider provider : ALL_PROVIDERS) {    final EnumSet<HashSupport> support=provider.querySupport(params);    if (support.containsAll(required) && (result == null || HashSupport.compare(support,resultSupport) < 0)) {      result=provider;      resultSupport=support;    }  }  if (result == null)   throw new UnsupportedOperationException();  return result;}  }
class C{  final public int rebound(String... names){  int count=0;  if (names != null && names.length > 0) {    for (    String name : names) {      set(name,this.getString(name));      count++;    }  } else {    for (    String name : this.getNames()) {      set(name,this.getString(name));      count++;    }  }  return count;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_CANT_INSTANCE_ALREADY_REGISTERED(String worldname0){  return new SM_SYSTEM_MESSAGE(1400181,worldname0);}  }
class C{  public void ensureCapacity(int capacity){  if (mGarbage && mSize >= mKeys.length) {    gc();  }  if (mKeys.length < capacity) {    int[] nkeys=new int[capacity];    Object[] nvalues=new Object[capacity];    System.arraycopy(mKeys,0,nkeys,0,mKeys.length);    System.arraycopy(mValues,0,nvalues,0,mValues.length);    mKeys=nkeys;    mValues=nvalues;  }}  }
class C{  @deprecated public AlphabeticIndex(ULocale locale,RuleBasedCollator collator,UnicodeSet exemplarChars){  this.hasPinyin=false;  this.collatorOriginal=(collator != null ? collator : (RuleBasedCollator)Collator.getInstance(locale));  try {    this.collatorPrimaryOnly=((RuleBasedCollator)this.collatorOriginal.clone());  } catch (  Exception e) {    throw new IllegalStateException("Collator cannot be cloned",e);  }  this.collatorPrimaryOnly.setStrength(0);  if (exemplarChars == null) {    exemplarChars=getIndexExemplars(locale);  }  addLabels(exemplarChars);}  }
class C{  public static String toString(String[] stringArray,int startIndex){  return toString(stringArray,startIndex,stringArray.length - 1);}  }
class C{  public EntityQuery maxRows(int maxRows){  this.maxRows=maxRows;  return this;}  }
class C{  public static boolean expressionIsValidSQl(String filter){  if (filter == null) {    return true;  }  if (TextUtils.containsAnyIgnoreCase(filter,ILLEGAL_SQL_KEYWORDS)) {    return false;  }  for (int i=0; i < filter.length(); i++) {    char ch=filter.charAt(i);    if (!(Character.isWhitespace(ch) || Character.isLetterOrDigit(ch) || SQL_VALID_CHARS.contains(ch))) {      return false;    }  }  return true;}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_DUEL_REQUESTED(String value0){  return new SM_SYSTEM_MESSAGE(1301065,value0);}  }
class C{  public boolean jdbcCompliant(){  return false;}  }
class C{  public AccountGetActiveOffersQuery(VkApiClient client,UserActor actor){  super(client,"account.getActiveOffers",GetActiveOffersResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  protected XMLDTDScanner createDTDScanner(){  return new XMLDTDScannerImpl();}  }
class C{  @Override public void textDecl(String version,String encoding,Augmentations augs) throws XNIException {  if (fDocumentHandler != null) {    fDocumentHandler.textDecl(version,encoding,augs);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_ITEM_DICE(String value0,int num1){  return new SM_SYSTEM_MESSAGE(1300182,value0,num1);}  }
class C{  public JsonHttpResponseHandler(String encoding){  super(encoding);}  }
class C{  static public void register(IMethod method) throws IllegalArgumentException {  if (!(method.getDeclaringClass().isInterface()))   throw new IllegalArgumentException("The declaring class [" + method.getDeclaringClass() + "] of ["+ method+ "] method must be Remote interface.");  if (!(Remote.class.isAssignableFrom(method.getDeclaringClass())))   throw new IllegalArgumentException("The declaring class [" + method.getDeclaringClass() + "] of ["+ method+ "] method must extends from java.rmi.Remote interface.");  _repositoryTable.add(method);  if (_logger.isLoggable(Level.FINE)) {    _logger.fine("OneWayMethodRepository - registered one-way method: " + method);  }}  }
class C{  protected final Tuple addInternal(Tuple t){  if (m_tuples.add(t)) {    return t;  } else {    return null;  }}  }
class C{  protected Udb82DatabaseType(){}  }
class C{  private Node<K,V> findPredecessorOfLast(){  for (; ; ) {    Index<K,V> q=head;    for (; ; ) {      Index<K,V> d, r;      if ((r=q.right) != null) {        if (r.indexesDeletedNode()) {          q.unlink(r);          break;        }        if (r.node.next != null) {          q=r;          continue;        }      }      if ((d=q.down) != null)       q=d; else       return q.node;    }  }}  }
class C{  public Object parse(final String value,final Field field) throws NoSimpleValueParseException {  Object parsedValue=null;  Class<?> clazz=field.getType();  if (clazz.isAssignableFrom(Short.class) || clazz.isAssignableFrom(Short.TYPE)) {    parsedValue=Short.parseShort(value);  } else   if (clazz.isAssignableFrom(Integer.class) || clazz.isAssignableFrom(Integer.TYPE)) {    parsedValue=Integer.parseInt(value);  } else   if (clazz.isAssignableFrom(Float.class) || clazz.isAssignableFrom(Float.TYPE)) {    parsedValue=Float.parseFloat(value);  } else   if (clazz.isAssignableFrom(Double.class) || clazz.isAssignableFrom(Double.TYPE)) {    parsedValue=Double.parseDouble(value);  } else   if (clazz.isAssignableFrom(Long.class) || clazz.isAssignableFrom(Long.TYPE)) {    parsedValue=Long.parseLong(value);  } else   if (clazz.isAssignableFrom(Byte.class) || clazz.isAssignableFrom(Byte.TYPE)) {    parsedValue=Byte.parseByte(value);  } else   if (clazz.isAssignableFrom(Character.class) || clazz.isAssignableFrom(Character.TYPE)) {    parsedValue=value.charAt(0);  } else   if (clazz.isAssignableFrom(Boolean.class) || clazz.isAssignableFrom(Boolean.TYPE)) {    parsedValue=Boolean.parseBoolean(value);  } else   if (clazz.isAssignableFrom(String.class)) {    parsedValue=value;  } else   if (clazz.isEnum()) {    Object[] enumConstants=clazz.getEnumConstants();    for (    Object enumConstant : enumConstants) {      if (enumConstant.toString().equals(value)) {        parsedValue=enumConstant;      }    }  }  if (parsedValue == null) {    throw new NoSimpleValueParseException();  }  return parsedValue;}  }
class C{  private LoggerHelper(){}  }
class C{  public boolean canZoomInMoreY(){  return (mScaleY < mMaxScaleY);}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();{    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public int convert(String value){  if (Strings.isNullOrEmpty(value) || TypeUtils.MISSING_INDICATORS.contains(value) || value.equals("-1")) {    return (int)ColumnType.LOCAL_DATE.getMissingValue();  }  value=Strings.padStart(value,4,'0');  if (selectedFormatter == null) {    selectedFormatter=TypeUtils.getDateFormatter(value);  }  LocalDate date;  try {    date=LocalDate.parse(value,selectedFormatter);  } catch (  DateTimeParseException e) {    selectedFormatter=TypeUtils.DATE_FORMATTER;    date=LocalDate.parse(value,selectedFormatter);  }  return PackedLocalDate.pack(date);}  }
class C{  public static InputStream toInputStream(String input,Charset encoding){  return new ByteArrayInputStream(StringCodingUtils.getBytes(input,Charsets.toCharset(encoding)));}  }
class C{  public void finish() throws CarbonDataWriterException {  if (this.entryCount > 0) {    producerExecutorServiceTaskList.add(producerExecutorService.submit(new Producer(blockletDataHolder,dataRows,++writerTaskSequenceCounter)));    blockletProcessingCount.incrementAndGet();    processedDataCount+=entryCount;  }  closeWriterExecutionService(producerExecutorService);  processWriteTaskSubmitList(producerExecutorServiceTaskList);  processingComplete=true;}  }
class C{  static Schema schema(Type fldType){  Schema sch=new Schema();  sch.addField(SCH_KEY,fldType);  sch.addField(SCH_RID_BLOCK,BIGINT);  sch.addField(SCH_RID_ID,INTEGER);  return sch;}  }
class C{  public NewThreadAction(Runnable runnable,String name,boolean daemon,boolean user){  this(user ? userThreadGroup : systemThreadGroup,runnable,name,daemon);}  }
class C{  public AccountGetCountersQuery(VkApiClient client,UserActor actor){  super(client,"account.getCounters",AccountCounters.class);  accessToken(actor.getAccessToken());}  }
class C{  public XMLString(char[] ch,int offset,int length){  setValues(ch,offset,length);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_FRIENDLY_DEATH(String value0){  return new SM_SYSTEM_MESSAGE(1350000,value0);}  }
class C{  public boolean freePage(Page p){  if (this.durable) {    p.flush();  }  int pageNum=p.getPageNum();  int headPageIndex=pageNum / Page.pageSize;  int dataPageIndex=pageNum % Page.pageSize;  Page headPage=getHeadPage(headPageIndex);  if (headPage.readByte(dataPageIndex) == 0) {    return false;  }  headPage.writeByte(dataPageIndex,(byte)0);  if (this.durable) {    headPage.flush();  }  byte[] countBytes=masterPage.readBytes(4 * headPageIndex,4);  int oldCount=ByteBuffer.wrap(countBytes).getInt();  int newCount=oldCount - 1;  byte[] newCountBytes=ByteBuffer.allocate(4).putInt(newCount).array();  masterPage.writeBytes(headPageIndex * 4,4,newCountBytes);  if (this.durable) {    masterPage.flush();  }synchronized (PageAllocator.class) {    if (pageLRU.containsKey(translatePageNum(pageNum))) {      pageLRU.remove(translatePageNum(pageNum));    }  }  this.numPages-=1;  return true;}  }
class C{  private PolynomialCurveFitter(double[] initialGuess,int maxIter){  this.initialGuess=initialGuess;  this.maxIter=maxIter;}  }
class C{  public SimpleNotifyContainerConfigurer eventListenerAnnotation(Object eventListener){  AnnotationEventListenerAdapter annotationEventListenerAdapter=new AnnotationEventListenerAdapter();  annotationEventListenerAdapter.setDelegate(eventListener);  annotationEventListenerAdapter.afterPropertiesSet();  notifyEventListenerContainer.setEventListener(annotationEventListenerAdapter);  return this;}  }
class C{  @Override public int read() throws IOException {  final int b0=fInputStream.read();  if (b0 == -1) {    return -1;  }  final int b1=fInputStream.read();  if (b1 == -1) {    expectedTwoBytes();  }  if (fIsBigEndian) {    return (b0 << 8) | b1;  }  return (b1 << 8) | b0;}  }
class C{  @Override public double[] makeCumulativeTestValues(){  return new double[]{0,0.0282475249,0.1129900996,0.252815347855,0.420605645761,0.584201186219,0.721621440204,0.824686630693,0.895359904171,0.940414116013,0.967446643119,0.982855183569,0.991259841996};}  }
class C{  public FaveRemoveGroupQuery removeGroup(UserActor actor,int groupId){  return new FaveRemoveGroupQuery(getClient(),actor,groupId);}  }
class C{  public PhotosGetQueryWithExtended photoSizes(Boolean value){  return unsafeParam("photo_sizes",value);}  }
class C{  public RequestHandle post(Context context,String url,RequestParams params,ResponseHandlerInterface responseHandler){  return post(context,url,paramsToEntity(params,responseHandler),null,responseHandler);}  }
class C{  public String toString(){  return image;}  }
class C{  public void reinitializeBegin(final ODEStateInterpolator interpolator) throws MathIllegalStateException {  forward=interpolator.isForward();  final ODEStateAndDerivative s0=interpolator.getPreviousState();  t0=s0.getTime();  g0=handler.g(s0);  while (g0 == 0) {    final double epsilon=FastMath.max(solver.getAbsoluteAccuracy(),FastMath.abs(solver.getRelativeAccuracy() * t0));    double tStart=t0 + (forward ? 0.5 : -0.5) * epsilon;    if (tStart == t0) {      tStart=nextAfter(t0);    }    t0=tStart;    g0=handler.g(interpolator.getInterpolatedState(tStart));  }  g0Positive=g0 > 0;  increasing=g0Positive;}  }
class C{  private boolean isUnsignedSemitones(String string){  String s=string.trim();  if (s.length() < 3)   return false;  return s.substring(s.length() - 2).equals("st") && isUnsignedNumber(s.substring(0,s.length() - 2));}  }
class C{  public static IProgressMonitor infiniteSubMonitorFor(IProgressMonitor monitor,int ticks,int style){  if (monitor == null)   return new NullProgressMonitor();  if (monitor instanceof NullProgressMonitor)   return monitor;  return new InfiniteSubProgressMonitor(monitor,ticks,style);}  }
class C{  public void writeToFile(String fileName) throws IOException {  PrintWriter outfile=new PrintWriter(new FileOutputStream(fileName));  outfile.println("// Output from Histogram class");  outfile.println("// metaData: ");  outfile.println("bins " + m_nbins);  outfile.println("min " + m_min);  outfile.println("max " + m_max);  outfile.println("totalEntries " + m_entries);  outfile.println("underflow " + m_underflow);  outfile.println("overflow " + m_overflow);  outfile.println("// binData:");  for (int i=0; i < m_nbins; i++) {    outfile.println(i + " " + m_binCenters[i]+ " "+ m_hist[i]);  }  outfile.println("// end.");  outfile.close();}  }
class C{  public void close(){  connection.close();}  }
class C{  private JSONObject readObject() throws JSONException {  JSONObject result=new JSONObject();  int first=nextCleanInternal();  if (first == '}') {    return result;  } else   if (first != -1) {    pos--;  }  while (true) {    Object name=nextValue();    if (!(name instanceof String)) {      if (name == null) {        throw syntaxError("Names cannot be null");      } else {        throw syntaxError("Names must be strings, but " + name + " is of type "+ name.getClass().getName());      }    }    int separator=nextCleanInternal();    if (separator != ':' && separator != '=') {      throw syntaxError("Expected ':' after " + name);    }    if (pos < in.length() && in.charAt(pos) == '>') {      pos++;    }    result.put((String)name,nextValue());switch (nextCleanInternal()) {case '}':      return result;case ';':case ',':    continue;default :  throw syntaxError("Unterminated object");}}}  }
class C{  public boolean isSubsignature(IMethod overriding,IMethod overridden) throws JavaModelException {  if (!overridden.getElementName().equals(overriding.getElementName())) {    return false;  }  int nParameters=overridden.getNumberOfParameters();  if (nParameters != overriding.getNumberOfParameters()) {    return false;  }  if (!hasCompatibleTypeParameters(overriding,overridden)) {    return false;  }  return nParameters == 0 || hasCompatibleParameterTypes(overriding,overridden);}  }
class C{  public void createDevices(@NotNull List<Device> devices){  if (!initIfNecessary()) {    return;  }  for (  Device device : devices) {    String deviceIdBase=device.getId();    String deviceNameBase=device.getDisplayName();    int i=2;    while (isUserDevice(device)) {      String id=String.format(Locale.getDefault(),"%1$s_%2$d",deviceIdBase,i);      String name=String.format(Locale.getDefault(),"%1$s_%2$d",deviceNameBase,i);      device=cloneDeviceWithNewIdAndName(device,id,name);    }    ourDeviceManager.addUserDevice(device);  }  ourDeviceManager.saveUserDevices();}  }
class C{  @Override public synchronized void powerOnSelfTest() throws Error {  assert state == MODULE_RUNNING;  Log.i(Mary.LOG,"Starting power-on self test.");  try {    MaryData in=new MaryData(inputType,getLocale());    String example=inputType.exampleText(getLocale());    if (example != null) {      in.readFrom(new StringReader(example));      if (outputType.equals(MaryDataType.get("AUDIO")))       in.setAudioFileFormat(new AudioFileFormat(AudioFileFormat.Type.WAVE,Voice.AF22050,AudioSystem.NOT_SPECIFIED));      process(in);    } else {      Log.i(Mary.LOG,"1 No example text -- no power-on self test!");    }  } catch (  Throwable t) {    throw new Error("Module " + name + ": Power-on self test failed.",t);  }  Log.i(Mary.LOG,"Power-on self test complete.");}  }
class C{  public void check(){  for (  Object object : pag.allocSources()) {    handleAllocNode((AllocNode)object);  }  for (  Object object : pag.simpleSources()) {    handleSimples((VarNode)object);  }  for (  Object object : pag.loadSources()) {    handleLoads((FieldRefNode)object);  }  for (  Object object : pag.storeSources()) {    handleStores((VarNode)object);  }}  }
class C{  public static byte[] toByteArray(URLConnection urlConn) throws IOException {  InputStream inputStream=urlConn.getInputStream();  try {    return IOUtils.toByteArray(inputStream);  }  finally {    inputStream.close();  }}  }
class C{  public ZWaveBatteryCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  protected VideoAddToAlbumQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  protected void onWake(){synchronized (myAgent) {    ResultsAgent aCaller=(ResultsAgent)myAgent;    try {      while (aCaller.InitializedAgents.size() + aCaller.ActiveAgents.size() < aCaller.MaxAgents) {        AgentController acCur=myAgent.getContainerController().createNewAgent("CalcAgent" + aCaller.createAgentID(aCaller.AgentUniqueIDLength),"jinsect.distributed.NGramDocumentComparatorAgent",AgentArgs);        aCaller.InitializedAgents.add(acCur.getName());        acCur.start();        myAgent.addBehaviour(new ReceiveResultBehaviour(aCaller,Interval,OutputStream));      }    } catch (    StaleProxyException ex) {      System.err.println("Cannot execute agent...");      ex.printStackTrace(System.err);    }    if (aCaller.ActiveAgents.size() > 0) {      if (aCaller.CurrentAgent == null)       aCaller.CurrentAgent=aCaller.ActiveAgents.listIterator(aCaller.ActiveAgents.size());      while (aCaller.PendingRequests < aCaller.MaxPendingRequests) {        AgentData adCur=(AgentData)CalcArgs.poll();        if (adCur != null) {          String sNextAgentName;          if (!aCaller.CurrentAgent.hasPrevious())           aCaller.CurrentAgent=aCaller.ActiveAgents.listIterator(aCaller.ActiveAgents.size());          try {            aCaller.CurrentAgent.previous();            aCaller.CurrentAgent.next();          } catch (          ConcurrentModificationException cmeE) {            aCaller.CurrentAgent=aCaller.ActiveAgents.listIterator(aCaller.ActiveAgents.size());          }          sNextAgentName=(String)aCaller.CurrentAgent.previous();          myAgent.addBehaviour(new SendTextsBehaviour(adCur.ID,adCur.Texts[0],adCur.Texts[1],sNextAgentName));          myAgent.addBehaviour(new ReceiveResultBehaviour(aCaller,Interval,OutputStream));          ((ResultsAgent)myAgent).PendingRequests++;        } else         break;      }    }    if ((!CalcArgs.isEmpty()))     myAgent.addBehaviour(new ActivateAgentListBehaviour(aCaller,Interval,CalcArgs,OutputStream,MigrationProbability,AgentArgs));  }}  }
class C{  public FieldVector3D<T> crossProduct(final Vector3D v){  return new FieldVector3D<T>(x.linearCombination(v.getZ(),y,-v.getY(),z),y.linearCombination(v.getX(),z,-v.getZ(),x),z.linearCombination(v.getY(),x,-v.getX(),y));}  }
class C{  public Element(ElementType type,boolean defaultAttributes){  theType=type;  if (defaultAttributes)   theAtts=new AttributesImpl(type.atts()); else   theAtts=new AttributesImpl();  theNext=null;  preclosed=false;}  }
class C{  public void put(String key,File file) throws FileNotFoundException {  put(key,file,null);}  }
class C{  public ZWavePlusCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  public void takeHeapDump(CoreDump coreDump,boolean openView){  heapDumpProvider.createHeapDump(coreDump,openView);}  }
class C{  private void reset(){  mLayoutTabs=null;  mAnimatedTab=null;  mClosedTab=null;}  }
class C{  public String generateLocalized(Asset asset,String content,RepositoryLocale repositoryLocale,String outputBcp47tag){  String bcp47Tag;  if (outputBcp47tag == null) {    bcp47Tag=repositoryLocale.getLocale().getBcp47Tag();  } else {    logger.debug("An output bcp47 tag: {} is specified (won't use the default tag (from the repository locale)",outputBcp47tag);    bcp47Tag=outputBcp47tag;  }  logger.debug("Configuring pipeline for localized XLIFF generation");  IPipelineDriver driver=new PipelineDriver();  driver.addStep(new RawDocumentToFilterEventsStep());  driver.addStep(new CheckForDoNotTranslateStep());  driver.addStep(new TranslateStep(asset,repositoryLocale,InheritanceMode.USE_PARENT));  logger.debug("Adding all supported filters to the pipeline driver");  driver.setFilterConfigurationMapper(assetExtractor.getConfiguredFilterConfigurationMapper());  FilterEventsToInMemoryRawDocumentStep filterEventsToInMemoryRawDocumentStep=new FilterEventsToInMemoryRawDocumentStep();  driver.addStep(filterEventsToInMemoryRawDocumentStep);  LocaleId targetLocaleId=LocaleId.fromBCP47(bcp47Tag);  RawDocument rawDocument=new RawDocument(content,LocaleId.ENGLISH,targetLocaleId);  String filterConfigId=assetExtractor.getFilterConfigIdForAsset(asset);  rawDocument.setFilterConfigId(filterConfigId);  logger.debug("Set filter config {} for asset {}",filterConfigId,asset.getPath());  driver.addBatchItem(rawDocument);  logger.debug("Start processing batch");  driver.processBatch();  String localizedContent=filterEventsToInMemoryRawDocumentStep.getOutput(rawDocument);  return localizedContent;}  }
class C{  boolean canOptimizeTimeSeries(DataApiRequest apiRequest,TemplateDruidQuery templateDruidQuery){  return apiRequest.getDimensions().isEmpty() && !templateDruidQuery.isNested() && apiRequest.getSorts().isEmpty()&& !apiRequest.getCount().isPresent()&& apiRequest.getHaving() == null;}  }
class C{  public GroupsGetQuery fields(List<GroupField> value){  return unsafeParam("fields",value);}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  @SuppressWarnings("deprecation") static HttpUriRequest createHttpRequest(Request<?> request,Map<String,String> additionalHeaders) throws AuthFailureError {switch (request.getMethod()) {case Request.Method.DEPRECATED_GET_OR_POST:{      byte[] postBody=request.getPostBody();      if (postBody != null) {        HttpPost postRequest=new HttpPost(request.getUrl());        postRequest.addHeader(HEADER_CONTENT_TYPE,request.getPostBodyContentType());        HttpEntity entity;        entity=new ByteArrayEntity(postBody);        postRequest.setEntity(entity);        return postRequest;      } else {        return new HttpGet(request.getUrl());      }    }case Request.Method.GET:  return new HttpGet(request.getUrl());case Request.Method.DELETE:return new HttpDelete(request.getUrl());case Request.Method.POST:{HttpPost postRequest=new HttpPost(request.getUrl());postRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(postRequest,request);return postRequest;}case Request.Method.PUT:{HttpPut putRequest=new HttpPut(request.getUrl());putRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(putRequest,request);return putRequest;}case Request.Method.HEAD:return new HttpHead(request.getUrl());case Request.Method.OPTIONS:return new HttpOptions(request.getUrl());case Request.Method.TRACE:return new HttpTrace(request.getUrl());case Request.Method.PATCH:{HttpPatch patchRequest=new HttpPatch(request.getUrl());patchRequest.addHeader(HEADER_CONTENT_TYPE,request.getBodyContentType());setEntityIfNonEmptyBody(patchRequest,request);return patchRequest;}default :throw new IllegalStateException("Unknown request method.");}}  }
class C{  public static String diagPrefix(String aspectName){  return String.format("%s: ",aspectName);}  }
class C{  public Event(Event other){  update(other);}  }
class C{  public static Bitmap scaleImage(Bitmap src,float scaleWidth,float scaleHeight){  if (src == null) {    return null;  }  Matrix matrix=new Matrix();  matrix.postScale(scaleWidth,scaleHeight);  return Bitmap.createBitmap(src,0,0,src.getWidth(),src.getHeight(),matrix,true);}  }
class C{  public static TextSymbolizer createDefaultTextSymbolizer(){  Expression fontFamily=ff.literal("Serif");  Expression fontSize=ff.literal(10.0);  Expression fontStyle=ff.literal("normal");  Expression fontWeight=ff.literal("normal");  Expression rotation=ff.literal(0.0);  Expression label=ff.literal("Test");  String geometryFieldName=null;  Expression geometryField=ff.property(geometryFieldName);  String name=Localisation.getString(SLDTreeTools.class,"TreeItem.newText");  AnchorPoint anchor=null;  Displacement displacement=null;  PointPlacement pointPlacement=(PointPlacement)styleFactory.pointPlacement(anchor,displacement,rotation);  Expression fillColour=ff.literal(DEFAULT_COLOUR);  Expression fillColourOpacity=ff.literal(1.0);  Fill fill=styleFactory.fill(null,fillColour,fillColourOpacity);  Halo halo=null;  List<Expression> fontFamilyList=new ArrayList<Expression>();  fontFamilyList.add(fontFamily);  Font font=(Font)styleFactory.font(fontFamilyList,fontStyle,fontWeight,fontSize);  Description description=null;  Unit<Length> unit=null;  TextSymbolizer newTextSymbolizer=(TextSymbolizer)styleFactory.textSymbolizer(name,geometryField,description,unit,label,font,pointPlacement,halo,fill);  return newTextSymbolizer;}  }
class C{  public Builder bitmapScale(float bitmapScale){  this.bitmapScale=bitmapScale;  return this;}  }
class C{  public static String noSuchFieldExceptioin(String className,String fieldName){  return "The " + fieldName + " field in "+ className+ " class is necessary which does not exist.";}  }
class C{  @Override public void unparsedEntityDecl(String name,XMLResourceIdentifier identifier,String notation,Augmentations augs) throws XNIException {  if (fValidation) {    fNDataDeclNotations.put(name,notation);  }  if (fDTDGrammar != null)   fDTDGrammar.unparsedEntityDecl(name,identifier,notation,augs);  if (fDTDHandler != null) {    fDTDHandler.unparsedEntityDecl(name,identifier,notation,augs);  }}  }
class C{  public SimpleRegression(){  this(true);}  }
class C{  public String queryCatalogClassName(){  String className=System.getProperty(pClassname);  if (className == null) {    if (resources == null)     readProperties();    if (resources == null)     return null;    try {      return resources.getString("catalog-class-name");    } catch (    MissingResourceException e) {      return null;    }  }  return className;}  }
class C{  public AudioSearchQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public boolean isEmpty(){  return status == EMPTY;}  }
class C{  public static PkgHeader recvHeader(InputStream in,byte expect_cmd,long expect_body_len) throws IOException {  PkgHeader header;  byte[] bs;  int bytes;  header=new PkgHeader();  bs=new byte[FDHT_PROTO_PKG_HEADER_SIZE];  if ((bytes=in.read(bs)) != bs.length) {    throw new IOException("recv package size " + bytes + " != "+ bs.length);  }  header.cmd=bs[PROTO_HEADER_CMD_INDEX];  if (header.cmd != expect_cmd) {    throw new IOException("recv cmd: " + bs[PROTO_HEADER_CMD_INDEX] + " is not correct, expect cmd: "+ expect_cmd);  }  header.status=bs[PROTO_HEADER_STATUS_INDEX];  header.body_len=ProtoCommon.buff2int(bs,PROTO_HEADER_BODY_LEN_INDEX);  if (header.body_len < 0) {    throw new IOException("recv body length: " + header.body_len + " < 0!");  }  if (header.status == 0) {    if (expect_body_len >= 0 && header.body_len != expect_body_len) {      throw new IOException("recv body length: " + header.body_len + " is not correct, expect length: "+ expect_body_len);    }    header.timestamp=ProtoCommon.buff2int(bs,PROTO_HEADER_TIMESTAMP_INDEX);    header.expires=ProtoCommon.buff2int(bs,PROTO_HEADER_EXPIRES_INDEX);  }  return header;}  }
class C{  public double interceptStdErr(){  return Math.sqrt(svar0);}  }
class C{  public GSXAQueueSessionImpl(GSXAConnectionImpl connection) throws JMSException {  super(connection);}  }
class C{  public static final <T>boolean isConvertible(final Object value,final Class<T> clazz){  return (castToType(value,clazz) != null);}  }
class C{  public void pixelsToValue(float[] pixels){  Matrix tmp=new Matrix();  mMatrixOffset.invert(tmp);  tmp.mapPoints(pixels);  mViewPortHandler.getMatrixTouch().invert(tmp);  tmp.mapPoints(pixels);  mMatrixValueToPx.invert(tmp);  tmp.mapPoints(pixels);}  }
class C{  private static void startFetchingAccountsInformation(Context context,Profile profile){  Account[] accounts=AccountManagerHelper.get(context).getGoogleAccounts();  for (int i=0; i < accounts.length; i++) {    startFetchingAccountInformation(context,profile,accounts[i].name);  }}  }
class C{  public boolean isEventStatus(EventStatus eventStatus){  return this.eventStatus != null && this.eventStatus.equals(eventStatus);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ProcATK_Instant_Ratio_A_TO_SELF(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200850,skillcaster,num0,skillname);}  }
class C{  @Override public boolean needParticipantsJoin() throws RemoteException {  return mgr.needParticipantsJoin();}  }
class C{  public static void createTable(Database db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"CHAT_MESSAGE_BEAN\" ("+ "\"_id\" INTEGER PRIMARY KEY ,"+ "\"UserId\" TEXT,"+ "\"UserName\" TEXT,"+ "\"UserHeadIcon\" TEXT,"+ "\"UserContent\" TEXT,"+ "\"time\" TEXT,"+ "\"type\" INTEGER NOT NULL ,"+ "\"messagetype\" INTEGER NOT NULL ,"+ "\"UserVoiceTime\" REAL NOT NULL ,"+ "\"UserVoicePath\" TEXT,"+ "\"UserVoiceUrl\" TEXT,"+ "\"sendState\" INTEGER NOT NULL ,"+ "\"imageUrl\" TEXT,"+ "\"imageIconUrl\" TEXT,"+ "\"imageLocal\" TEXT);");}  }
class C{  public Boolean doOuputTTML(){  return doOuputTtml;}  }
class C{  public static String random(int length){  Random rand=new Random(System.currentTimeMillis());  StringBuilder sb=new StringBuilder();  while (length > 0) {    sb.append(chars[rand.nextInt(chars.length - 1)]);    length--;  }  return sb.toString();}  }
class C{  public ParetoDistribution(double scale,double shape) throws MathIllegalArgumentException {  this(scale,shape,DEFAULT_SOLVER_ABSOLUTE_ACCURACY);}  }
class C{  public boolean isRotationEnabled(){  return mIsRotationEnabled;}  }
class C{  public PhotosGetNewTagsQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_CloseAerial_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200648,skillcaster,skillname);}  }
class C{  public static MatD makeScaleTranslation(double scale,VecD t){  return new MatD(new double[]{scale,0,0,0,0,scale,0,0,0,0,scale,0,scale * t.x,scale * t.y,scale * t.z,1});}  }
class C{  public TShortHash(TShortHashingStrategy strategy){  super();  this._hashingStrategy=strategy;}  }
class C{  public void stopScrolling(){  scroller.stopScrolling();}  }
class C{  private boolean isOwner(NamespaceBundle nsBundle){  if (pulsar != null) {    return pulsar.getNamespaceService().getOwnershipCache().getOwnedServiceUnit(nsBundle) != null;  }  return false;}  }
class C{  public SpaceStoppedException(String spaceMemberName,String s){  super(spaceMemberName,s);}  }
class C{  public static <T>String toJsonString(T value){  try {    return MAPPER.writeValueAsString(value);  } catch (  JsonProcessingException e) {    return "";  }}  }
class C{  public Access createQualifiedAccess(){  return createBoundAccess();}  }
class C{  public static Map<String,Object> returnError(String errorMessage,List<? extends Object> errorMessageList){  return returnProblem(ModelService.RESPOND_ERROR,errorMessage,errorMessageList,null,null);}  }
class C{  public static DataFrame normalize(DataFrame dataFrame,List<String> skipColumns){  return normalize(dataFrame,0,1,skipColumns);}  }
class C{  public ProxySelector removeSelector(String protocol){  return this.selectors.remove(protocol);}  }
class C{  private String modifyProjectName(String originalProjectName){  final StringBuffer buffer=new StringBuffer();  if (getProjectNamePrefix() != null) {    buffer.append(getProjectNamePrefix().trim());  }  buffer.append(originalProjectName);  if (getProjectNameSuffix() != null) {    buffer.append(getProjectNameSuffix().trim());  }  return buffer.toString();}  }
class C{  public List<String> updateDeletionStatus(String loadDate,LoadMetadataDetails[] listOfLoadFolderDetailsArray,List<String> invalidLoadTimestamps,Long loadStartTime){  boolean loadFound=false;  String loadStartTimeString="Load Start Time: ";  for (  LoadMetadataDetails loadMetadata : listOfLoadFolderDetailsArray) {    Integer result=compareDateValues(loadMetadata.getLoadStartTimeAsLong(),loadStartTime);    if (result < 0) {      if (CarbonCommonConstants.SEGMENT_COMPACTED.equalsIgnoreCase(loadMetadata.getLoadStatus())) {        LOG.info("Ignoring the segment : " + loadMetadata.getLoadName() + "as the segment has been compacted.");        continue;      }      if (!CarbonCommonConstants.MARKED_FOR_DELETE.equals(loadMetadata.getLoadStatus())) {        loadFound=true;        loadMetadata.setLoadStatus(CarbonCommonConstants.MARKED_FOR_DELETE);        loadMetadata.setModificationOrdeletionTimesStamp(readCurrentTime());        LOG.info("Info: " + loadStartTimeString + loadMetadata.getLoadStartTime()+ " Marked for Delete");      }    }  }  if (!loadFound) {    invalidLoadTimestamps.add(loadDate);    LOG.audit("Delete segment by date is failed. No matching segment found.");    return invalidLoadTimestamps;  }  return invalidLoadTimestamps;}  }
class C{  private HashDataCache(DataCache<Pair<String,T>> cache,String algorithm){  this.cache=cache;  this.algorithm=algorithm;  try {    MessageDigest.getInstance(algorithm);  } catch (  NoSuchAlgorithmException e) {    String msg="Unable to get hash generator with algorithm: " + algorithm;    LOG.warn(msg,e);    throw new SystemConfigException(e);  }}  }
class C{  public char next() throws JSONException {  int c;  if (this.usePrevious) {    this.usePrevious=false;    c=this.previous;  } else {    try {      c=this.reader.read();    } catch (    IOException exception) {      throw new JSONException(exception);    }    if (c <= 0) {      this.eof=true;      c=0;    }  }  this.index+=1;  if (this.previous == '\r') {    this.line+=1;    this.character=c == '\n' ? 0 : 1;  } else   if (c == '\n') {    this.line+=1;    this.character=0;  } else {    this.character+=1;  }  this.previous=(char)c;  return this.previous;}  }
class C{  private static boolean isInsideActivityTag(@NotNull Editor editor,@NotNull PsiFile file){  PsiElement psiElement=file.findElementAt(editor.getCaretModel().getOffset());  if (psiElement != null) {    return findXmlTagByName(psiElement,SdkConstants.TAG_ACTIVITY) != null;  }  return false;}  }
class C{  public double quadraticMean(){  return NumericReduceUtils.quadraticMean.reduce(this);}  }
class C{  @Nullable public Boolean isFramed(){  if (myScaledImage == null) {    return null;  }  return myThumbnailHasFrame;}  }
class C{  public static FXMLLoader createFxmlLoaderForProjectFile(final String localFxmlFile){  return createFxmlLoader(parentClass,ResourcePaths.FXML_PATH + localFxmlFile);}  }
class C{  public static SinkRecord spoofSinkRecord(String topic,Schema valueSchema,Struct value){  return new SinkRecord(topic,0,null,null,valueSchema,value,0);}  }
class C{  public JsonRequestParams(Object params){  if (params == null)   return;  if (params instanceof Map<?,?>) {    urlParamsWithObjects.putAll((Map<String,Object>)params);  } else {    this.mCriteria=params;  }}  }
class C{  public MqttScriptIO more(){  return scriptIO;}  }
class C{  public ParseException syntaxError(String message){  return new ParseException(message + toString());}  }
class C{  public DelayabilityAnalysis(DirectedGraph<Unit> dg,EarliestnessComputation earliest,Map<Unit,EquivalentValue> equivRhsMap){  this(dg,earliest,equivRhsMap,new ArrayPackedSet<EquivalentValue>(new CollectionFlowUniverse<EquivalentValue>(equivRhsMap.values())));}  }
class C{  public Matrix(double[][] A){  m=A.length;  n=A[0].length;  for (int i=0; i < m; i++) {    if (A[i].length != n) {      throw new IllegalArgumentException("All rows must have the same length.");    }  }  this.A=A;}  }
class C{  public void addLanguage(Long languageId){  if (languageId != null) {    addLanguage(languageId.toString());  } else {    Logger.warn(this,"Tried to add languageId Null!");  }}  }
class C{  public static Document parseDocument(String inputData) throws ParserConfigurationException, SAXException, IOException {  return parseDocument(inputData,false);}  }
class C{  public void notifyListeners(final Long tagId){  if (LOGGER.isTraceEnabled()) {    LOGGER.trace("notifyListeners - notify the Tag with id " + tagId + " has changed. Number of listeners: "+ this.listeners.size());  }  for (  ConfigurationUpdateListener listener : this.listeners) {    listener.notifyOnConfigurationUpdate(tagId);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_HealCastorOnTargetDead_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200373,skillname);}  }
class C{  public static String readAsciiLine(InputStream in) throws IOException {  StringBuilder result=new StringBuilder(80);  while (true) {    int c=in.read();    if (c == -1) {      throw new EOFException();    } else     if (c == '\n') {      break;    }    result.append((char)c);  }  int length=result.length();  if (length > 0 && result.charAt(length - 1) == '\r') {    result.setLength(length - 1);  }  return result.toString();}  }
class C{  private void throwArrayIndexOutOfBoundsException(int itemIndex){  throw new ArrayIndexOutOfBoundsException("Your item index can't be 0 or greater than space item size," + " your items size is " + spaceItems.size() + ", your current index is :"+ itemIndex);}  }
class C{  private void writeColumnSortInfo() throws IOException {  boolean isNotNull=null != columnSortInfo.getSort_index() && null != columnSortInfo.sort_index_inverted;  if (isNotNull) {    initPath();    String folderContainingFile=CarbonTablePath.getFolderContainingFile(this.sortIndexFilePath);    boolean created=CarbonUtil.checkAndCreateFolder(folderContainingFile);    if (!created) {      LOGGER.error("Database metadata folder creation status :: " + created);      throw new IOException("Failed to created database metadata folder");    }    try {      this.sortIndexThriftWriter=new ThriftWriter(this.sortIndexFilePath,false);      this.sortIndexThriftWriter.open();      sortIndexThriftWriter.write(columnSortInfo);    } catch (    IOException ie) {      LOGGER.error(ie,"problem while writing the dictionary sort index file.");      throw new IOException("problem while writing the dictionary sort index file.",ie);    } finally {      if (null != sortIndexThriftWriter) {        this.sortIndexThriftWriter.close();      }      this.sortIndexFilePath=null;    }  }}  }
class C{  public int lastIndexOf(short value){  return lastIndexOf(_pos,value);}  }
class C{  public void loadScoreboard(Configuration config,Scoreboard scoreboard){  ConfigurationSection teamsSection=config.getConfigurationSection("teams");  if (teamsSection == null) {    return;  }  teamsSection.getKeys(false).forEach(null);  ConfigurationSection objectivesSection=config.getConfigurationSection("objectives");  if (objectivesSection == null) {    return;  }  objectivesSection.getKeys(false).forEach(null);  ConfigurationSection scoresSection=config.getConfigurationSection("scores");  if (scoresSection == null) {    return;  }  scoresSection.getKeys(false).forEach(null);}  }
class C{  @Nullable E awaitMatch(int start){  for (int step=0, totalSpins=0; (step < ARENA_LENGTH) && (totalSpins < SPINS); step++) {    int index=(start + step) & ARENA_MASK;    AtomicReference<Object> slot=arena[index];    Object found=slot.get();    if (found == FREE) {      if (slot.compareAndSet(FREE,WAITER)) {        int slotSpins=0;        for (; ; ) {          found=slot.get();          if ((found != WAITER) && slot.compareAndSet(found,FREE)) {            @SuppressWarnings("unchecked") E e=(E)found;            return e;          } else           if ((slotSpins >= SPINS_PER_STEP) && (found == WAITER) && (slot.compareAndSet(WAITER,FREE))) {            totalSpins+=slotSpins;            break;          }          slotSpins++;        }      }    } else     if ((found != WAITER) && slot.compareAndSet(found,FREE)) {      @SuppressWarnings("unchecked") E e=(E)found;      return e;    }  }  return null;}  }
class C{  public String toString(){  StringBuilder buf=new StringBuilder();  buf.append("Splits (").append(nsplits).append("):\n");  for (Iterator it=iterator(); it.hasNext(); ) {    Split split=(Split)it.next();    buf.append(split).append("\n");  }  return buf.toString();}  }
class C{  public BoardEditTopicQuery(VkApiClient client,UserActor actor,int groupId,int topicId,String title){  super(client,"board.editTopic",OkResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);  topicId(topicId);  title(title);}  }
class C{  public void init$Children(){  children=new ASTNode[3];  setChild(new Opt(),1);  setChild(new List(),2);}  }
class C{  public EdgeCachedLocator(int iCacheMaxSize){  CacheMaxSize=iCacheMaxSize;  Cache=new HashMap();  CacheAccess=new TreeMap();  ElementAccessTime=new HashMap();}  }
class C{  public ContainsExtended(){  super(null,null);}  }
class C{  public static boolean hasAndroidGradleFacet(@NotNull JpsProject project){  for (  JpsModule module : project.getModules()) {    if (getExtension(module) != null) {      return true;    }  }  return false;}  }
class C{  public String process(Item item) throws ProcessException {  return getPhoneFeature(item,"cvox");}  }
class C{  public static Object fromXml(InputStream input){  return xstream.fromXML(input);}  }
class C{  public LockableFileWriter(File file,boolean append) throws IOException {  this(file,append,null);}  }
class C{  @Override public void undoAction(UndoInterface undoRedoObject){}  }
class C{  public FriendsGetQuery(VkApiClient client,UserActor actor){  super(client,"friends.get",GetResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public DiskBasedCache(File rootDirectory){  this(rootDirectory,DEFAULT_DISK_USAGE_BYTES);}  }
class C{  public boolean hasNext(){  if (this.samIterator == null) {    iterator();  }  while (complete.isEmpty() && ((!accumulator.isEmpty()) || samHasMore() || hasRemainingMaskBases())) {    final LocusInfo locusInfo=next();    if (locusInfo != null) {      complete.add(0,locusInfo);    }  }  return !complete.isEmpty();}  }
class C{  private String makePretty(double number){  String r=mFormattedStringCache.getFormattedValue(number);  int numericValue1=Character.getNumericValue(r.charAt(r.length() - 1));  int numericValue2=Character.getNumericValue(r.charAt(r.length() - 2));  int combined=Integer.valueOf(numericValue2 + "" + numericValue1);  r=r.replaceAll("E[0-9][0-9]",SUFFIX[combined / 3]);  while (r.length() > MAX_LENGTH || r.matches("[0-9]+\\.[a-z]")) {    r=r.substring(0,r.length() - 2) + r.substring(r.length() - 1);  }  return r;}  }
class C{  public synchronized void append(AudioInputStream ais){  if (ais == this)   throw new IllegalArgumentException("Cannot append me to myself");  if (doneAppending)   throw new IllegalArgumentException("Cannot append after doneAppending() was called!");  m_audioInputStreamList.add(ais);  notifyAll();}  }
class C{  @RequestMapping(value="/",method=POST,produces=APPLICATION_JSON_VALUE) public ResponseEntity<UserDTO> create(@RequestBody UserDTO userDTO) throws URISyntaxException {  log.debug("Create UserDTO : {}",userDTO);  if (userDTO.isIdSet()) {    return ResponseEntity.badRequest().header("Failure","Cannot create User with existing ID").body(null);  }  UserDTO result=userDTOService.save(userDTO);  return ResponseEntity.created(new URI("/api/users/" + result.id)).body(result);}  }
class C{  public In(Socket socket){  if (socket == null)   throw new NullPointerException("argument is null");  try {    InputStream is=socket.getInputStream();    scanner=new Scanner(new BufferedInputStream(is),CHARSET_NAME);    scanner.useLocale(LOCALE);  } catch (  IOException ioe) {    throw new IllegalArgumentException("Could not open " + socket);  }}  }
class C{  protected GroupsSearchQuery q(String value){  return unsafeParam("q",value);}  }
class C{  public static void serialization(String filePath,Object obj){  ObjectOutputStream out=null;  try {    out=new ObjectOutputStream(new FileOutputStream(filePath));    out.writeObject(obj);    out.close();  } catch (  FileNotFoundException e) {    throw new RuntimeException("FileNotFoundException occurred. ",e);  }catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    IOUtil.close(out);  }}  }
class C{  public ShapedRecipe shape(final String... shape){  Validate.notNull(shape,"Must provide a shape");  Validate.isTrue(shape.length > 0 && shape.length < 4,"Crafting recipes should be 1, 2, 3 rows, not ",shape.length);  for (  String row : shape) {    Validate.notNull(row,"Shape cannot have null rows");    Validate.isTrue(row.length() > 0 && row.length() < 4,"Crafting rows should be 1, 2, or 3 characters, not ",row.length());  }  this.rows=new String[shape.length];  for (int i=0; i < shape.length; i++) {    this.rows[i]=shape[i];  }  HashMap<Character,ItemStack> newIngredients=new HashMap<Character,ItemStack>();  for (  String row : shape) {    for (    Character c : row.toCharArray()) {      newIngredients.put(c,ingredients.get(c));    }  }  this.ingredients=newIngredients;  return this;}  }
class C{  public byte[] encryptViaKek(byte[] content){  return cryptoViaKek(content,Cipher.ENCRYPT_MODE);}  }
class C{  public NGramGraphComparator(){}  }
class C{  public CSVRecordReader(int skipNumLines,String delimiter){  this.skipNumLines=skipNumLines;  this.delimiter=delimiter;}  }
class C{  private synchronized void addTracker(String path,Object marker,FileDeleteStrategy deleteStrategy){  if (exitWhenFinished) {    throw new IllegalStateException("No new trackers can be added once exitWhenFinished() is called");  }  if (reaper == null) {    reaper=new Reaper();    reaper.start();  }  trackers.add(new Tracker(path,deleteStrategy,marker,q));}  }
class C{  public VideoCreateCommentQuery fromGroup(Boolean value){  return unsafeParam("from_group",value);}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType,boolean notifyAuthFailure){  this(AccountManager.get(context),account,authTokenType,notifyAuthFailure);}  }
class C{  public CMUTimeVoice(String name,Gender gender,Age age,String description,Locale locale,String domain,String organization,CMULexicon lexicon,URL database){  super(name,gender,age,description,locale,domain,organization,lexicon,database);}  }
class C{  private boolean isLastBeforeBoundary(Element syllable,int minBreakindex){  Document doc=syllable.getOwnerDocument();  Element sentence=(Element)DomUtils.getAncestor(syllable,MaryXML.SENTENCE);  TreeWalker tw=((DocumentTraversal)doc).createTreeWalker(sentence,NodeFilter.SHOW_ELEMENT,new NameNodeFilter(MaryXML.SYLLABLE,MaryXML.BOUNDARY),false);  tw.setCurrentNode(syllable);  Element next=(Element)tw.nextNode();  if (next == null) {    return true;  }  if (next.getNodeName().equals(MaryXML.BOUNDARY)) {    if (getBreakindex(next) >= minBreakindex)     return true;  }  return false;}  }
class C{  public void rightClick(int x,int y) throws InterruptedException {  click(InputEvent.BUTTON3_MASK,x,y);}  }
class C{  public TapTarget descriptionTextColor(@ColorRes int color){  this.descriptionTextColor=color;  return this;}  }
class C{  public boolean isEmpty(){  return this.root == null;}  }
class C{  public DocumentQuery addSort(Sort sort){  this.sorts.add(Objects.requireNonNull(sort,"Sort is required"));  return this;}  }
class C{  static KeyPair createSecp256k1KeyPair() throws NoSuchProviderException, NoSuchAlgorithmException, InvalidAlgorithmParameterException {  KeyPairGenerator keyPairGenerator=KeyPairGenerator.getInstance("ECDSA","BC");  ECGenParameterSpec ecGenParameterSpec=new ECGenParameterSpec("secp256k1");  keyPairGenerator.initialize(ecGenParameterSpec,new SecureRandom());  return keyPairGenerator.generateKeyPair();}  }
class C{  public NopStmt newNopStmt(){  return Jimple.v().newNopStmt();}  }
class C{  public String toString(){  return "ActivatableInvocationHandler[" + id + ", "+ uproxy+ "]";}  }
class C{  public WebElementScopedLocatorFactory(WebDriver webDriver,WebElement webElement){  this.webDriver=webDriver;  this.webElement=webElement;}  }
class C{  private IEntryHolder next_fifo() throws SAException {  while (true) {    if (_first) {      _first=false;      _saIter=_cacheManager.getStorageAdapter().makeEntriesIter(_templateHolder,_SCNFilter,_leaseFilter,_types);    }    if (_saIter != null && _entryFromSA == null) {      _entryFromSA=saIterNext();      if (_entryFromSA == null) {        _saIter.close();        _saIter=null;      }    }    if (!_doneWithCache && _entryFromCache == null) {      checkIfNext();      if (_currentEntryCacheInfo == null)       _doneWithCache=true; else       _entryFromCache=_currentEntryHolder;    }    if (_entryFromCache == null && _entryFromSA == null)     return null;    IEntryHolder res=null;    boolean returnSA=false;    if (_entryFromCache != null && _entryFromSA != null) {      if (_entryFromCache.getClassName().equals(_entryFromSA.getClassName())) {        if (_entryFromSA.getSCN() < _entryFromCache.getSCN() || (_entryFromSA.getSCN() == _entryFromCache.getSCN() && _entryFromSA.getOrder() < _entryFromCache.getOrder()))         returnSA=true;      } else {        int classSa=_fifoClassesOrder.get(_entryFromSA.getClassName());        int classCache=_fifoClassesOrder.get(_entryFromCache.getClassName());        returnSA=classSa < classCache;      }    } else {      if (_entryFromSA != null)       returnSA=true;    }    if (returnSA) {      res=_entryFromSA;      _entryFromSA=null;    } else {      res=_entryFromCache;      _entryFromCache=null;    }    if (res != null) {      if (!returnSA) {        if (!res.isTransient()) {          if (!res.isMaybeUnderXtn()) {            res=null;            continue;          }          res=_cacheManager.getEntryByUidFromPureCache(res.getUID());          if (res == null || !res.isMaybeUnderXtn()) {            res=null;            continue;          }          ITransactionalEntryData ed=res.getTxnEntryData();          XtnEntry xtnEntry=ed.getWriteLockOwner();          if (xtnEntry == null || xtnEntry.getStatus() != XtnStatus.BEGUN || (ed.getWriteLockOperation() != SpaceOperations.WRITE && ed.getWriteLockOperation() != SpaceOperations.UPDATE)) {            res=null;            continue;          }        }      }      if (returnSA) {        IEntryHolder updated_res=_cacheManager.getEntryByUidFromPureCache(res.getUID());        if (updated_res != null)         res=updated_res;      }      if (!_entriesReturned.add(res.getUID())) {        res=null;        continue;      }    }    _context.setRawmatchResult(null,MatchResult.NONE,null,null);    return res;  }}  }
class C{  public static byte[] readFullyNoClose(InputStream in) throws IOException {  ByteArrayOutputStream bytes=new ByteArrayOutputStream();  byte[] buffer=new byte[1024];  int count;  while ((count=in.read(buffer)) != -1) {    bytes.write(buffer,0,count);  }  return bytes.toByteArray();}  }
class C{  public void show(){  show(false,null);}  }
class C{  @Deprecated public ItemStack(final int type,final int amount){  this(type,amount,(short)0);}  }
class C{  public boolean contains(int index){  return index >= getFirst() && index <= getLast();}  }
class C{  boolean inOpenRange(K key,K least,K fence){  if (key == null)   throw new NullPointerException();  return ((least == null || compare(key,least) >= 0) && (fence == null || compare(key,fence) <= 0));}  }
class C{  public static void registerServiceConfigListener(ServiceConfigListener listener){  Assert.notNull("listener",listener);  configListeners.add(listener);}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof LocatorReg))   return false;  return l.equals(((LocatorReg)obj).l);}  }
class C{  public ProperFractionFormat(NumberFormat format){  this(format,(NumberFormat)format.clone(),(NumberFormat)format.clone());}  }
class C{  protected void failed(Throwable t) throws InvalidJobException {  if (currentState != State.RUNNING) {    throw new InvalidJobException("Illegal state change");  }  currentState=State.FAILED;  Debug.logError(t,"Async-Service failed.",module);}  }
class C{  static double area(S2Point a,S2Point b,S2Point c){  final double sa=b.angle(c);  final double sb=c.angle(a);  final double sc=a.angle(b);  final double s=0.5 * (sa + sb + sc);  if (s >= 3e-4) {    double s2=s * s;    double dmin=s - Math.max(sa,Math.max(sb,sc));    if (dmin < 1e-2 * s * s2* s2) {      double area=girardArea(a,b,c);      if (dmin < s * (0.1 * area)) {        return area;      }    }  }  return 4 * Math.atan(Math.sqrt(Math.max(0.0,Math.tan(0.5 * s) * Math.tan(0.5 * (s - sa)) * Math.tan(0.5 * (s - sb))* Math.tan(0.5 * (s - sc)))));}  }
class C{  public void rotateSelectedSubTree(){  boolean changed=false;  if (treeView.getNumberSelectedNodes() > 1) {    for (    Node v : treeView.getSelectedNodes()) {      if (v.getInDegree() == 0 || !treeView.getSelected(v.getFirstInEdge().getSource())) {        Stack<Node> stack=new Stack<>();        stack.push(v);        while (stack.size() > 0) {          Node w=stack.pop();          if (w.getOutDegree() > 1) {            w.reverseOrderAdjacentEdges();            changed=true;          }          if (w.getOutDegree() > 0) {            for (Edge e=w.getFirstOutEdge(); e != null; e=w.getNextOutEdge(e)) {              stack.push(e.getTarget());            }          }        }      }    }  }  if (changed) {    labelOrder.clear();    labelOrder.addAll(getLabelOrder(treeView));    UPGMA.embedTree(treeView);    flipCoordinates(treeView,rootSide);    previousRectangle=null;  }}  }
class C{  public SnippetObject field(Dynamic obj,int fieldIndex){  final Field info=obj.getFieldInfo(fieldIndex);  final String name=info.getDeclared();  Pathway path=myPath == null ? Pathway.global(name) : myPath.field(name);  return new SnippetObject(obj.getFieldValue(fieldIndex),path,mySnippets);}  }
class C{  @Override public WebElement findElementByXPath(String xPath){  return ((FindsByXPath)super.getWrappedDriver()).findElementByXPath(xPath);}  }
class C{  public boolean read(Class<?> panelId,String resourceString,FieldConfigMapUnits fieldConfigMapUnits){  MapUnits mapUnits=(MapUnits)ParseXML.parseUIFile(resourceString,SCHEMA_RESOURCE,MapUnits.class);  if (mapUnits == null) {    return false;  }  Class<?> localisationClass=ReadPanelConfig.class;  if (mapUnits.getLocalisation() != null) {    try {      localisationClass=Class.forName(mapUnits.getLocalisation());    } catch (    ClassNotFoundException e) {      ConsoleManager.getInstance().exception(ReadMapUnits.class,e);    }  }  XMLFieldConfigData xmlFieldConfig=mapUnits.getFieldConfigEnum();  if (xmlFieldConfig instanceof XMLFieldConfigEnum) {    String defaultValue=xmlFieldConfig.getDefault();    XMLFieldConfigEnumValueList valueList=((XMLFieldConfigEnum)xmlFieldConfig).getValueList();    List<SymbolTypeConfig> configList=readValueListConfig(localisationClass,panelId,valueList);    fieldConfigMapUnits.addConfig(configList);    String defaultValueObj=ConfigDefaultFactory.getString(defaultValue);    if (defaultValueObj != null) {      fieldConfigMapUnits.setDefaultValue(defaultValueObj);    }  }  return true;}  }
class C{  private void skip(){  do {    readBlock();  } while ((blockSize > 0) && !err());}  }
class C{  public static int decode(int n){  return (n >> 1) ^ (-(n & 1));}  }
class C{  public void removeOwnerFromStream(String stream,SocketAddress addr,String reason){  if (stream2Addresses.remove(stream,addr)) {    logger.info("Removed stream to host mapping for (stream: {} -> host: {}) : reason = '{}'.",new Object[]{stream,addr,reason});  }  Set<String> streamsForHost=address2Streams.get(addr);  if (null != streamsForHost) {synchronized (streamsForHost) {      if (streamsForHost.remove(stream)) {        logger.info("Removed stream ({}) from host {} : reason = '{}'.",new Object[]{stream,addr,reason});        if (streamsForHost.isEmpty()) {          address2Streams.remove(addr,streamsForHost);        }        ownershipStatsLogger.onRemove(stream);      }    }  }}  }
class C{  public boolean hasThrowable(){  return observers.get() == TERMINATED && error != null;}  }
class C{  public void start(Context context,android.support.v4.app.Fragment fragment,int requestCode){  fragment.startActivityForResult(getIntent(context),requestCode);}  }
class C{  private void doMatch(FileEntry entry,File file){  if (entry.refresh(file)) {    for (    FileAlterationListener listener : listeners) {      if (entry.isDirectory()) {        listener.onDirectoryChange(file);      } else {        listener.onFileChange(file);      }    }  }}  }
class C{  public void addToTimeDeadband(final SourceDataTag currentTag,final ValueUpdate update){  addToTimeDeadband(currentTag,update,new SourceDataTagQuality());}  }
class C{  private void add(SLDTreeLeafInterface obj){  map.put(obj.getSymbolizer(),obj);}  }
class C{  public static boolean deleteBlockedUser(Player player,int blockedUserId){  if (DAOManager.getDAO(BlockListDAO.class).delBlockedUser(player.getObjectId(),blockedUserId)) {    player.getBlockList().remove(blockedUserId);    player.getClientConnection().sendPacket(new SM_BLOCK_RESPONSE(SM_BLOCK_RESPONSE.UNBLOCK_SUCCESSFUL,DAOManager.getDAO(PlayerDAO.class).loadPlayerCommonData(blockedUserId).getName()));    player.getClientConnection().sendPacket(new SM_BLOCK_LIST());    return true;  }  return false;}  }
class C{  protected void addXML11Component(XMLComponent component){  if (fXML11Components.contains(component)) {    return;  }  fXML11Components.add(component);  addRecognizedParamsAndSetDefaults(component);}  }
class C{  public CASCDistanceCalculator() throws IOException {  Process p=Runtime.getRuntime().exec(PathToCasc);  try {    p.waitFor();  } catch (  InterruptedException iee) {    return;  }}  }
class C{  public static int blue(int color){  return color & 0xFF;}  }
class C{  public URLImageParser(Context context,TextView textView,String cookie,String referer){  this.context=context;  this.textView=textView;  this.cookie=cookie;  this.referer=referer;}  }
class C{  public long increaseEquippedItemCount(Item item,long count){  if (item.getItemTemplate().getCategory() != ItemCategory.SHARD) {    return count;  }  long leftCount=item.increaseItemCount(count);  ItemPacketService.updateItemAfterInfoChange(owner,item,ItemUpdateType.STATS_CHANGE);  setPersistentState(PersistentState.UPDATE_REQUIRED);  return leftCount;}  }
class C{  private static String translate(final String s,final Locale locale){  try {    ResourceBundle bundle=ResourceBundle.getBundle("org.apache.commons.math.MessagesResources",locale);    if (bundle.getLocale().getLanguage().equals(locale.getLanguage())) {      return bundle.getString(s);    }  } catch (  MissingResourceException mre) {  }  return s;}  }
class C{  public short determineDocVersion(XMLInputSource inputSource) throws IOException {  fEncoding=fEntityManager.setupCurrentEntity(fXMLSymbol,inputSource,false,true);  fEntityManager.setScannerVersion(Constants.XML_VERSION_1_0);  XMLEntityScanner scanner=fEntityManager.getEntityScanner();  try {    if (!scanner.skipString("<?xml")) {      return Constants.XML_VERSION_1_0;    }    if (!scanner.skipDeclSpaces()) {      fixupCurrentEntity(fEntityManager,fExpectedVersionString,5);      return Constants.XML_VERSION_1_0;    }    if (!scanner.skipString("version")) {      fixupCurrentEntity(fEntityManager,fExpectedVersionString,6);      return Constants.XML_VERSION_1_0;    }    scanner.skipDeclSpaces();    if (scanner.peekChar() != '=') {      fixupCurrentEntity(fEntityManager,fExpectedVersionString,13);      return Constants.XML_VERSION_1_0;    }    scanner.scanChar();    scanner.skipDeclSpaces();    int quoteChar=scanner.scanChar();    fExpectedVersionString[14]=(char)quoteChar;    for (int versionPos=0; versionPos < XML11_VERSION.length; versionPos++) {      fExpectedVersionString[15 + versionPos]=(char)scanner.scanChar();    }    fExpectedVersionString[18]=(char)scanner.scanChar();    fixupCurrentEntity(fEntityManager,fExpectedVersionString,19);    int matched=0;    for (; matched < XML11_VERSION.length; matched++) {      if (fExpectedVersionString[15 + matched] != XML11_VERSION[matched])       break;    }    return (matched == XML11_VERSION.length) ? Constants.XML_VERSION_1_1 : Constants.XML_VERSION_1_0;  } catch (  MalformedByteSequenceException e) {    fErrorReporter.reportError(e.getDomain(),e.getKey(),e.getArguments(),XMLErrorReporter.SEVERITY_FATAL_ERROR,e);    return Constants.XML_VERSION_ERROR;  }catch (  CharConversionException e) {    fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"CharConversionFailure",null,XMLErrorReporter.SEVERITY_FATAL_ERROR,e);    return Constants.XML_VERSION_ERROR;  }catch (  EOFException e) {    fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"PrematureEOF",null,XMLErrorReporter.SEVERITY_FATAL_ERROR);    return Constants.XML_VERSION_ERROR;  }}  }
class C{  private void printOutEvolutionCandyCosts(PokeInfoCalculator pokeCalculator){  int evolutionCost=-99999;  for (  Pokemon poke : pokeCalculator.getPokedex()) {    ArrayList<Pokemon> evoLine=pokeCalculator.getEvolutionLine(poke);    int numberInEvoLine=1;    for (int i=0; i < evoLine.size(); i++) {      System.out.println("poke:" + poke.name + " evoLine size: "+ evoLine.size());      if (poke.name.equals(evoLine.get(i).name)) {        numberInEvoLine=i;      }    }    if (evoLine.size() == 3) {      if (numberInEvoLine == 0) {        evolutionCost=25;      }      if (numberInEvoLine == 1) {        evolutionCost=100;      }      if (numberInEvoLine == 2) {        evolutionCost=-1;      }    }    if (evoLine.size() == 2) {      if (numberInEvoLine == 0) {        evolutionCost=50;      }      if (numberInEvoLine == 1) {        evolutionCost=-1;      }    }    if (evoLine.size() == 1) {      evolutionCost=-1;    }    System.out.println("nahojjjen generating script: " + "<item>" + evolutionCost + "</item> <!--"+ poke.name+ "-->");  }}  }
class C{  @Override public long blocksAccessed(){  Plan mp=new MaterializePlan(p,tx);  return mp.blocksAccessed();}  }
class C{  public static AccountOperationResponseCode updateProfile(String email,String displayName,String photoUrl){  PersistenceManager pm=pmf.getPersistenceManager();  try {    UserRecord user=findUserByEmail(pm,email);    if (user != null) {      user.setDisplayName(displayName);      user.setPhotoUrl(photoUrl);      pm.makePersistent(user);      return AccountOperationResponseCode.OK;    } else {      return AccountOperationResponseCode.USER_NOT_FOUND;    }  }  finally {    pm.close();  }}  }
class C{  public InvalidJobException(String msg,Throwable nested){  super(msg,nested);}  }
class C{  private void openActivity(Class activityToOpen){  Intent intent=new Intent(this,activityToOpen);  startActivity(intent);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ConstructorAccess fullCopy(){  ConstructorAccess tree=(ConstructorAccess)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  private static File constructFilePaths(String file1,String file2){  File newPath;  if (file2.startsWith(file1)) {    newPath=new File(file2);  } else {    newPath=new File(file1 + "/" + file2);  }  return newPath;}  }
class C{  private Map<String,Map<String,AbstractIndex>> addTableSegmentMap(AbsoluteTableIdentifier absoluteTableIdentifier){  Object lockObject=tableLockMap.get(absoluteTableIdentifier);  Map<String,Map<String,AbstractIndex>> tableSegmentMapTemp=tableSegmentMap.get(absoluteTableIdentifier);  if (null == tableSegmentMapTemp) {synchronized (lockObject) {      tableSegmentMapTemp=tableSegmentMap.get(absoluteTableIdentifier);      if (null == tableSegmentMapTemp) {        tableSegmentMapTemp=new ConcurrentHashMap<String,Map<String,AbstractIndex>>();        tableSegmentMap.put(absoluteTableIdentifier,tableSegmentMapTemp);      }    }  }  return tableSegmentMapTemp;}  }
class C{  public String upload_file1(String group_name,byte[] file_buff,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {  String parts[]=this.upload_file(group_name,file_buff,file_ext_name,meta_list);  if (parts != null) {    return parts[0] + SPLIT_GROUP_NAME_AND_FILENAME_SEPERATOR + parts[1];  } else {    return null;  }}  }
class C{  public static double readDouble(){  return scanner.nextDouble();}  }
class C{  private boolean isDrifted(){  int minX=MathHelper.floor_double(getEntityBoundingBox().minX);  int maxX=MathHelper.floor_double(getEntityBoundingBox().maxX + 1.0D);  int minY=MathHelper.floor_double(getEntityBoundingBox().minY);  int maxY=MathHelper.floor_double(getEntityBoundingBox().maxY + 1.0D);  int minZ=MathHelper.floor_double(getEntityBoundingBox().minZ);  int maxZ=MathHelper.floor_double(getEntityBoundingBox().maxZ + 1.0D);  for (int x=minX; x < maxX; ++x) {    for (int y=minY; y < maxY; ++y) {      for (int z=minZ; z < maxZ; ++z) {        if (checkBlockDrifting(x,y,z))         return true;      }    }  }  return false;}  }
class C{  public void removeLocation(int terminalId,int height){  int i, size=l_locations.size();  for (i=0; i < size; i++) {    if (l_locations.get(i).matches(terminalId,height)) {      l_locations.remove(i);      break;    }  }}  }
class C{  public PathFileComparator(IOCase caseSensitivity){  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  private void addCodeFromField(StringBuilder sb,Field f){  try {    sb.append(f.getName() + " = " + f.getInt(KeyEvent.class));  } catch (  IllegalArgumentException e) {    e.printStackTrace();  }catch (  IllegalAccessException e) {    e.printStackTrace();  }  sb.append("\n");}  }
class C{  public boolean isInterface(){  ClassDef classDef=getClassDef();  return (classDef.getAccessFlags() & AccessFlags.INTERFACE.getValue()) != 0;}  }
class C{  private static String toString(double coeff){  final String c=Double.toString(coeff);  if (c.endsWith(".0")) {    return c.substring(0,c.length() - 2);  } else {    return c;  }}  }
class C{  private static Entry findLeaseFromIterator(Iterator<Entry> iter,Lease lease){  while (iter.hasNext()) {    Entry e=iter.next();    if (e.lease.equals(lease))     return e;  }  return null;}  }
class C{  public MessagesGetHistoryQuery userId(String value){  return unsafeParam("user_id",value);}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public boolean retainEntries(TObjectShortProcedure<K> procedure){  boolean modified=false;  K[] keys=(K[])_set;  short[] values=_values;  tempDisableAutoCompaction();  try {    for (int i=keys.length; i-- > 0; ) {      if (keys[i] != FREE && keys[i] != REMOVED && !procedure.execute(keys[i],values[i])) {        removeAt(i);        modified=true;      }    }  }  finally {    reenableAutoCompaction(true);  }  return modified;}  }
class C{  public static ItemStack deserialize(Map<String,Object> args){  Material type=Material.getMaterial((String)args.get("type"));  short damage=0;  int amount=1;  if (args.containsKey("damage")) {    damage=((Number)args.get("damage")).shortValue();  }  if (args.containsKey("amount")) {    amount=((Number)args.get("amount")).intValue();  }  ItemStack result=new ItemStack(type,amount,damage);  if (args.containsKey("enchantments")) {    Object raw=args.get("enchantments");    if (raw instanceof Map) {      Map<?,?> map=(Map<?,?>)raw;      for (      Map.Entry<?,?> entry : map.entrySet()) {        Enchantment enchantment=Enchantment.getByName(entry.getKey().toString());        if ((enchantment != null) && (entry.getValue() instanceof Integer)) {          result.addUnsafeEnchantment(enchantment,(Integer)entry.getValue());        }      }    }  } else   if (args.containsKey("meta")) {    Object raw=args.get("meta");    if (raw instanceof ItemMeta) {      result.setItemMeta((ItemMeta)raw);    }  }  return result;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_QUEST_ACQUIRE_ERROR_MIN_RANK(int value0){  return new SM_SYSTEM_MESSAGE(1300573,new DescriptionId(value0));}  }
class C{  private void removeTestData(){  supervisionMapper.testDelete(ID);}  }
class C{  public static String formatSpelledOutAmount(double amount,Locale locale){  com.ibm.icu.text.NumberFormat nf=new com.ibm.icu.text.RuleBasedNumberFormat(locale,com.ibm.icu.text.RuleBasedNumberFormat.SPELLOUT);  return nf.format(amount);}  }
class C{  private static boolean equalAsInts(Vec2d a,Vec2d b){  return ((int)a.x) == ((int)b.x) && ((int)a.y) == ((int)b.y);}  }
class C{  public static Bitmap decodeSampledBitmapFromResource(Resources res,int resId,int reqWidth,int reqHeight){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeResource(res,resId,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  options.inJustDecodeBounds=false;  return BitmapFactory.decodeResource(res,resId,options);}  }
class C{  public void handleRemoveWaitingForInfoSA(RemoveWaitingForInfoSABusPacket packet) throws SAException {  Context context=null;  try {    context=_cacheManager.getCacheContext();    context.setOperationID(packet.getOperationID());    if (packet.getEntryHolder() != null) {      handleRemoveWaitingForInfoSA_EntryBased(context,packet.getEntryHolder(),packet.getTemplate());    } else {      handleRemoveWaitingForInfoSA_TemplateBased(context,packet.getTemplate());    }  }  finally {    _cacheManager.freeCacheContext(context);  }}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer(this.toBriefString());  buffer.append(":\n  ");  for (  RefLikeType ei : exceptionsIncluded) {    buffer.append('+');    buffer.append(ei == null ? "null" : ei.toString());  }  for (  RefLikeType ee : exceptionsExcluded) {    buffer.append('-');    buffer.append(ee.toString());  }  return buffer.toString();}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=activity.getCropRect();  if (rect == null) {    return null;  }  return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height(),false);}  }
class C{  public synchronized long commit() throws IOException {  long gen;  if (writer != null) {    if (taxoWriter != null) {      taxoWriter.commit();    }    gen=writer.commit();  } else {    gen=-1;  }  return gen;}  }
class C{  public TableSwitchStmt newTableSwitchStmt(Value key,int lowIndex,int highIndex,List targets,Unit defaultTarget){  return new GTableSwitchStmt(key,lowIndex,highIndex,targets,defaultTarget);}  }
class C{  public void init$Children(){  children=new ASTNode[1];  setChild(new List(),0);}  }
class C{  public Metric(int dim,double deriv){  this.deriv=deriv;  this.dim=dim;}  }
class C{  public void drawChart(Graphics2D gc){  SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);  int x0=leftMargin;  int x1=getWidth() - rightMargin;  int y0=getHeight() - bottomMargin;  int y1=topMargin;  double botX=0;  double topX=transpose ? getChartData().getRangeY().get2().doubleValue() : getChartData().getRangeX().get2().doubleValue();  double factorX;  if (topX > botX)   factorX=(x1 - x0) / (topX - botX); else   factorX=1;  int tickStepX=0;  int minSpace=50;  for (int i=1; tickStepX == 0; i*=10) {    if (i * factorX >= minSpace)     tickStepX=i; else     if (2.5 * i * factorX >= minSpace)     tickStepX=(int)(2.5 * i); else     if (5 * i * factorX >= minSpace)     tickStepX=5 * i;  }  int startX=0;  if (startX > botX) {    while (startX > botX)     startX-=tickStepX;  } else {    while (startX + tickStepX < botX) {      startX+=tickStepX;    }  }  double offsetX=botX - startX;  double botY;  double topY;  if (scalingType == ChartViewer.ScalingType.PERCENT) {    botY=0;    topY=100;  } else   if (scalingType == ChartViewer.ScalingType.LOG) {    botY=0;    topY=computeMaxYAxisValueLogScale(getChartData().getRangeY().get2().doubleValue());  } else   if (scalingType == ChartViewer.ScalingType.SQRT) {    botY=0;    topY=Math.sqrt(getChartData().getRangeY().get2().doubleValue());  } else {    botY=0;    topY=getChartData().getRangeY().get2().doubleValue();  }  double factorY;  if (topY > botY)   factorY=(y0 - y1) / (topY - botY); else   factorY=1;  int tickStepY=0;  for (int i=1; tickStepY == 0; i*=10) {    if (i * factorY >= minSpace)     tickStepY=i; else     if (2.5 * i * factorY >= minSpace)     tickStepY=(int)(2.5 * i); else     if (5 * i * factorY >= minSpace)     tickStepY=5 * i;  }  int startY=0;  if (startY > botY) {    while (startY > botY)     startY-=tickStepY;  } else {    while (startY + tickStepY < botY) {      startY+=tickStepY;    }  }  double offsetY=botY - startY;  Random random=new Random(666);  double maxX=getChartData().getRangeX().get2().doubleValue();  double maxY=getChartData().getRangeY().get2().doubleValue();  for (  String series : getChartData().getSeriesNames()) {    Point previous=null;    boolean showLines=isShowLines(series);    boolean showDots=isShowDots(series);    boolean useJitter=isUseJitter(series);    Color color=getChartColors().getSampleColor(series);    Color darker=color.darker();    boolean isSelected=getChartData().getChartSelection().isSelected(series,null);    if (sgc != null)     sgc.setCurrentItem(new String[]{series,null});    java.util.Collection<Pair<Number,Number>> data=getChartData().getDataForSeries(series);    for (    Pair<Number,Number> pair : data) {      double xValue=pair.get1().doubleValue();      double yValue;      if (getScalingType() == ChartViewer.ScalingType.PERCENT) {        yValue=(100.0 / maxY) * pair.get2().doubleValue();      } else       if (getScalingType() == ChartViewer.ScalingType.LOG) {        yValue=pair.get2().doubleValue();        if (yValue > 0)         yValue=Math.log10(yValue);      } else       if (getScalingType() == ChartViewer.ScalingType.SQRT) {        yValue=pair.get2().doubleValue();        if (yValue > 0)         yValue=Math.sqrt(yValue);      } else {        yValue=pair.get2().doubleValue();      }      int x=(int)Math.round(xValue * factorX + x0 - offsetX);      int y=(int)Math.round(y0 - yValue * factorY - offsetY);      if (useJitter) {        x+=(random.nextInt(8) - 4);        y+=(random.nextInt(8) - 4);      }      if (showLines) {        if (previous != null) {          if (isSelected) {            gc.setColor(ProgramProperties.SELECTION_COLOR);            gc.setStroke(HEAVY_STROKE);            gc.drawLine(previous.x,previous.y,x,y);            gc.setStroke(NORMAL_STROKE);          } else {            gc.setColor(color);            gc.drawLine(previous.x,previous.y,x,y);          }        }        previous=new Point(x,y);      }      if (showDots) {        if (isSelected) {          gc.setColor(ProgramProperties.SELECTION_COLOR);          gc.setStroke(HEAVY_STROKE);          gc.fillOval(x - 2,y - 2,4,4);          gc.setStroke(NORMAL_STROKE);        } else {          gc.setColor(darker);          gc.fillOval(x - 2,y - 2,4,4);        }      }      if (showValues || isSelected) {        String label=pair.get1() + "," + pair.get2();        valuesList.add(new DrawableValue(label,x + 4,y,isSelected));      }    }    if (sgc != null)     sgc.clearCurrentItem();  }  if (valuesList.size() > 0) {    gc.setFont(getFont(ChartViewer.FontKeys.ValuesFont.toString()));    DrawableValue.drawValues(gc,valuesList,false,false);    valuesList.clear();  }}  }
class C{  public static Metrics create(Map<String,String> dimensionMap){  Map<String,String> map=Maps.newTreeMap();  map.putAll(dimensionMap);  return new Metrics(Collections.unmodifiableMap(map));}  }
class C{  public EditorFixture open(@NotNull final String relativePath,@NotNull Tab tab){  assertFalse("Should use '/' in test relative paths, not File.separator",relativePath.contains("\\"));  VirtualFile file=myFrame.findFileByRelativePath(relativePath,true);  return open(file,tab);}  }
class C{  private DerivativeStructure evaluate(final DerivativeStructure t,final double t0,final double[] y) throws MathIllegalArgumentException {  final double[] top=new double[nbPoints];  final double[] bottom=new double[nbPoints];  for (int i=0; i < nbPoints; ++i) {    bottom[i]=y[i];    for (int j=1; j <= i; ++j) {      bottom[i - j]=(bottom[i - j + 1] - bottom[i - j]) / (j * stepSize);    }    top[i]=bottom[0];  }  final int order=t.getOrder();  final int parameters=t.getFreeParameters();  final double[] derivatives=t.getAllDerivatives();  final double dt0=t.getValue() - t0;  DerivativeStructure interpolation=new DerivativeStructure(parameters,order,0.0);  DerivativeStructure monomial=null;  for (int i=0; i < nbPoints; ++i) {    if (i == 0) {      monomial=new DerivativeStructure(parameters,order,1.0);    } else {      derivatives[0]=dt0 - (i - 1) * stepSize;      final DerivativeStructure deltaX=new DerivativeStructure(parameters,order,derivatives);      monomial=monomial.multiply(deltaX);    }    interpolation=interpolation.add(monomial.multiply(top[i]));  }  return interpolation;}  }
class C{  public void tag(String inputFileName){  List<String> sentences=jsc.textFile(inputFileName).collect();  List<String> output=tag(sentences);  for (int i=0; i < sentences.size(); i++) {    StringBuilder sb=new StringBuilder(64);    String words[]=sentences.get(i).split("\\s+");    String tags[]=output.get(i).split("\\s+");    for (int j=0; j < words.length; j++) {      sb.append(words[j]);      sb.append('/');      sb.append(tags[j]);      sb.append(' ');    }    System.out.println(sb.toString().trim());  }}  }
class C{  public static String searchAddFeature(HttpServletRequest request,HttpServletResponse response){  Delegator delegator=(Delegator)request.getAttribute("delegator");  Locale locale=UtilHttp.getLocale(request);  String productFeatureId=request.getParameter("productFeatureId");  String fromDateStr=request.getParameter("fromDate");  String thruDateStr=request.getParameter("thruDate");  String amountStr=request.getParameter("amount");  String sequenceNumStr=request.getParameter("sequenceNum");  String productFeatureApplTypeId=request.getParameter("productFeatureApplTypeId");  Timestamp thruDate=null;  Timestamp fromDate=null;  BigDecimal amount=null;  Long sequenceNum=null;  try {    if (UtilValidate.isNotEmpty(fromDateStr)) {      fromDate=Timestamp.valueOf(fromDateStr);    }    if (UtilValidate.isNotEmpty(thruDateStr)) {      thruDate=Timestamp.valueOf(thruDateStr);    }    if (UtilValidate.isNotEmpty(amountStr)) {      amount=new BigDecimal(amountStr);    }    if (UtilValidate.isNotEmpty(sequenceNumStr)) {      sequenceNum=Long.valueOf(sequenceNumStr);    }  } catch (  RuntimeException e) {    String errorMsg=UtilProperties.getMessage(resource,"productSearchEvents.error_casting_types",locale) + " : " + e.toString();    request.setAttribute("_ERROR_MESSAGE_",errorMsg);    Debug.logError(e,errorMsg,module);    return "error";  }  try {    boolean beganTransaction=TransactionUtil.begin(DEFAULT_TX_TIMEOUT);    try {      EntityListIterator eli=getProductSearchResults(request);      if (eli == null) {        String errMsg=UtilProperties.getMessage(resource,"productsearchevents.no_results_found_probably_error_constraints",UtilHttp.getLocale(request));        request.setAttribute("_ERROR_MESSAGE_",errMsg);        return "error";      }      GenericValue searchResultView=null;      int numAdded=0;      while ((searchResultView=eli.next()) != null) {        String productId=searchResultView.getString("mainProductId");        GenericValue pfa=delegator.makeValue("ProductFeatureAppl");        pfa.set("productId",productId);        pfa.set("productFeatureId",productFeatureId);        pfa.set("fromDate",fromDate);        pfa.set("thruDate",thruDate);        pfa.set("productFeatureApplTypeId",productFeatureApplTypeId);        pfa.set("amount",amount);        pfa.set("sequenceNum",sequenceNum);        pfa.create();        numAdded++;      }      Map<String,Object> messageMap=UtilMisc.toMap("numAdded",Integer.valueOf(numAdded),"productFeatureId",productFeatureId);      String eventMsg=UtilProperties.getMessage(resource,"productSearchEvents.added_param_features",messageMap,locale) + ".";      request.setAttribute("_EVENT_MESSAGE_",eventMsg);      eli.close();    } catch (    GenericEntityException e) {      String errorMsg=UtilProperties.getMessage(resource,"productSearchEvents.error_getting_results",locale) + " : " + e.toString();      request.setAttribute("_ERROR_MESSAGE_",errorMsg);      Debug.logError(e,errorMsg,module);      TransactionUtil.rollback(beganTransaction,errorMsg,e);      return "error";    } finally {      TransactionUtil.commit(beganTransaction);    }  } catch (  GenericTransactionException e) {    String errorMsg=UtilProperties.getMessage(resource,"productSearchEvents.error_getting_results",locale) + " : " + e.toString();    request.setAttribute("_ERROR_MESSAGE_",errorMsg);    Debug.logError(e,errorMsg,module);    return "error";  }  return "success";}  }
class C{  public void addNewThing(Class<?> hint){  if (symbolTree == null) {    return;  }  TreePath path=symbolTree.getSelectionPath();  if (path == null) {    return;  }  DefaultMutableTreeNode lastNode=(DefaultMutableTreeNode)path.getLastPathComponent();  DefaultMutableTreeNode newNode=null;  Object obj=lastNode.getUserObject();  Object oldValueObj=sldWriter.encodeSLD(null,SelectedSymbol.getInstance().getSld());  if (obj instanceof String) {    StyledLayerDescriptor sld=DefaultSymbols.createNewSLD();    SelectedSymbol.getInstance().createNewSLD(sld);    if (hint == NamedLayer.class) {      NamedLayer namedLayer=DefaultSymbols.createNewNamedLayer();      SelectedSymbol.getInstance().addNewStyledLayer(namedLayer);      newNode=sldTree.addObject(lastNode,namedLayer,true);    } else     if (hint == UserLayer.class) {      UserLayer userLayer=DefaultSymbols.createNewUserLayer();      SelectedSymbol.getInstance().addNewStyledLayer(userLayer);      newNode=sldTree.addObject(lastNode,userLayer,true);    }  } else   if (obj instanceof StyledLayerDescriptor) {    if (hint == NamedLayer.class) {      NamedLayer namedLayer=DefaultSymbols.createNewNamedLayer();      SelectedSymbol.getInstance().addNewStyledLayer(namedLayer);      newNode=sldTree.addObject(lastNode,namedLayer,true);    } else     if (hint == UserLayer.class) {      UserLayer userLayer=DefaultSymbols.createNewUserLayer();      SelectedSymbol.getInstance().addNewStyledLayer(userLayer);      newNode=sldTree.addObject(lastNode,userLayer,true);    }  } else   if (obj instanceof NamedLayer) {    Style style=DefaultSymbols.createNewStyle();    SelectedSymbol.getInstance().addNewStyle(style);    newNode=sldTree.addObject(lastNode,style,true);  } else   if (obj instanceof UserLayer) {    Style style=DefaultSymbols.createNewStyle();    SelectedSymbol.getInstance().addNewStyle(style);    newNode=sldTree.addObject(lastNode,style,true);  } else   if (obj instanceof Style) {    FeatureTypeStyle featureTypeStyle=DefaultSymbols.createNewFeatureTypeStyle();    SelectedSymbol.getInstance().addNewFeatureTypeStyle(featureTypeStyle);    newNode=sldTree.addObject(lastNode,featureTypeStyle,true);  } else   if (obj instanceof FeatureTypeStyle) {    Rule rule=DefaultSymbols.createNewRule();    SelectedSymbol.getInstance().addNewRule(rule);    newNode=sldTree.addObject(lastNode,rule,true);  }  if (newNode != null) {    TreePath newPath=getPath(newNode);    symbolTree.setSelectionPath(newPath);    Object newValueObj=sldWriter.encodeSLD(null,SelectedSymbol.getInstance().getSld());    UndoManager.getInstance().addUndoEvent(new UndoEvent(sldTree.getUndoObject(),getClass().getName(),oldValueObj,newValueObj));  }}  }
class C{  @RequestMapping(value=ClientUris.REGISTER,method=RequestMethod.GET) public Boolean register(@RequestParam("clientId") String clientId,@RequestParam("appName") String appName,@RequestParam("appKey") String appKey,@RequestParam("clientPid") Integer clientPid,HttpServletRequest req){  Response<Boolean> routeResp=clientService.registerClient(clientId,appName,appKey,req.getRemoteAddr(),clientPid);  if (!routeResp.isSuccess()) {    return Boolean.FALSE;  }  return Boolean.TRUE;}  }
class C{  private void initUsingMainDB(String A) throws SQLException {  stmt.executeQuery("use " + A);}  }
class C{  public MessagesCreateChatQuery createChat(UserActor actor,int... userIds){  return new MessagesCreateChatQuery(getClient(),actor,userIds);}  }
class C{  JSONStringer open(Scope empty,String openBracket) throws JSONException {  if (stack.isEmpty() && out.length() > 0) {    throw new JSONException("Nesting problem: multiple top-level roots");  }  beforeValue();  stack.add(empty);  out.append(openBracket);  return this;}  }
class C{  public VOGeoServerContrastEnhancementNormalizeBlue(Class<?> panelId,RasterSymbolizerDetails parentPanel){  super(panelId,"geoserver/GeoServerContrastEnhancementNormalizeBlue.xml",parentPanel,FieldIdEnum.VO_RASTER_NORMALIZE_ALGORITHM_BLUE,FieldIdEnum.VO_RASTER_NORMALIZE_MIN_VALUE_BLUE,FieldIdEnum.VO_RASTER_NORMALIZE_MAX_VALUE_BLUE);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Heal_Instant_HEAL_ME_TO_B(int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200523,num0,skilltarget,skillname);}  }
class C{  private static File stream2file(InputStream in) throws IOException {  final File tempFile=File.createTempFile(PREFIX,SUFFIX);  try (FileOutputStream out=new FileOutputStream(tempFile)){    IOUtils.copy(in,out);  }   return tempFile;}  }
class C{  public static void shutdown(){  if (mPool != null) {    mPool.shutdown();    mPool=null;  }}  }
class C{  public void extract(){  ExecutorService executor=Executors.newFixedThreadPool(this.extractorConfig.getThreadPoolSize());  try {    Map<Pair<RelatedFinder,Object>,List<MithraDataObject>> extract=extractData(executor);    writeToFiles(executor,extract);  }  finally {    executor.shutdown();    try {      executor.awaitTermination(extractorConfig.getTimeoutSeconds(),TimeUnit.SECONDS);    } catch (    InterruptedException e) {    }  }}  }
class C{  public String toString(){  String sRes="[";  Iterator iIter=iterator();  while (iIter.hasNext()) {    Object oNext=iIter.next();    sRes+=oNext.toString();    if (iIter.hasNext())     sRes+="|";  }  sRes+="]";  return sRes;}  }
class C{  private Object readResolve(){  return LazyHolder.INSTANCE;}  }
class C{  public Fraction add(Fraction fraction){  return addSub(fraction,true);}  }
class C{  public static Dfp pow(Dfp x,final Dfp y){  if (x.getField().getRadixDigits() != y.getField().getRadixDigits()) {    x.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID);    final Dfp result=x.newInstance(x.getZero());    result.nans=Dfp.QNAN;    return x.dotrap(DfpField.FLAG_INVALID,POW_TRAP,x,result);  }  final Dfp zero=x.getZero();  final Dfp one=x.getOne();  final Dfp two=x.getTwo();  boolean invert=false;  int ui;  if (y.equals(zero)) {    return x.newInstance(one);  }  if (y.equals(one)) {    if (x.isNaN()) {      x.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID);      return x.dotrap(DfpField.FLAG_INVALID,POW_TRAP,x,x);    }    return x;  }  if (x.isNaN() || y.isNaN()) {    x.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID);    return x.dotrap(DfpField.FLAG_INVALID,POW_TRAP,x,x.newInstance((byte)1,Dfp.QNAN));  }  if (x.equals(zero)) {    if (Dfp.copysign(one,x).greaterThan(zero)) {      if (y.greaterThan(zero)) {        return x.newInstance(zero);      } else {        return x.newInstance(x.newInstance((byte)1,Dfp.INFINITE));      }    } else {      if (y.classify() == Dfp.FINITE && y.rint().equals(y) && !y.remainder(two).equals(zero)) {        if (y.greaterThan(zero)) {          return x.newInstance(zero.negate());        } else {          return x.newInstance(x.newInstance((byte)-1,Dfp.INFINITE));        }      } else {        if (y.greaterThan(zero)) {          return x.newInstance(zero);        } else {          return x.newInstance(x.newInstance((byte)1,Dfp.INFINITE));        }      }    }  }  if (x.lessThan(zero)) {    x=x.negate();    invert=true;  }  if (x.greaterThan(one) && y.classify() == Dfp.INFINITE) {    if (y.greaterThan(zero)) {      return y;    } else {      return x.newInstance(zero);    }  }  if (x.lessThan(one) && y.classify() == Dfp.INFINITE) {    if (y.greaterThan(zero)) {      return x.newInstance(zero);    } else {      return x.newInstance(Dfp.copysign(y,one));    }  }  if (x.equals(one) && y.classify() == Dfp.INFINITE) {    x.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID);    return x.dotrap(DfpField.FLAG_INVALID,POW_TRAP,x,x.newInstance((byte)1,Dfp.QNAN));  }  if (x.classify() == Dfp.INFINITE) {    if (invert) {      if (y.classify() == Dfp.FINITE && y.rint().equals(y) && !y.remainder(two).equals(zero)) {        if (y.greaterThan(zero)) {          return x.newInstance(x.newInstance((byte)-1,Dfp.INFINITE));        } else {          return x.newInstance(zero.negate());        }      } else {        if (y.greaterThan(zero)) {          return x.newInstance(x.newInstance((byte)1,Dfp.INFINITE));        } else {          return x.newInstance(zero);        }      }    } else {      if (y.greaterThan(zero)) {        return x;      } else {        return x.newInstance(zero);      }    }  }  if (invert && !y.rint().equals(y)) {    x.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID);    return x.dotrap(DfpField.FLAG_INVALID,POW_TRAP,x,x.newInstance((byte)1,Dfp.QNAN));  }  Dfp r;  if (y.lessThan(x.newInstance(100000000)) && y.greaterThan(x.newInstance(-100000000))) {    final Dfp u=y.rint();    ui=u.intValue();    final Dfp v=y.subtract(u);    if (v.unequal(zero)) {      final Dfp a=v.multiply(log(x));      final Dfp b=a.divide(x.getField().getLn2()).rint();      final Dfp c=a.subtract(b.multiply(x.getField().getLn2()));      r=splitPow(split(x),ui);      r=r.multiply(pow(two,b.intValue()));      r=r.multiply(exp(c));    } else {      r=splitPow(split(x),ui);    }  } else {    r=exp(log(x).multiply(y));  }  if (invert && y.rint().equals(y) && !y.remainder(two).equals(zero)) {    r=r.negate();  }  return x.newInstance(r);}  }
class C{  private Object writeReplace(){  return new DataTransferObject(getKey(),getValue());}  }
class C{  private void putPrimitivesInValueCache(){  putInArgumentValueCache(int.class,1);  putInArgumentValueCache(long.class,1L);  putInArgumentValueCache(double.class,1.0);  putInArgumentValueCache(float.class,1.0);  putInArgumentValueCache(char.class,(char)1);  putInArgumentValueCache(byte.class,(byte)1);  putInArgumentValueCache(boolean.class,true);  putInArgumentValueCache(Object[].class,new Object[0]);}  }
class C{  public Request(Request other,StructType type){  this.params=other.params;  this.type=type;  this.parent=other.parent;  this.name=other.name;}  }
class C{  public DirectedGraph(Node rootNode,FeatureDefinition featDef,Properties properties){  this.rootNode=rootNode;  this.featDef=featDef;  this.properties=properties;}  }
class C{  public static boolean isExtension(String filename,String[] extensions){  if (filename == null) {    return false;  }  if (extensions == null || extensions.length == 0) {    return indexOfExtension(filename) == -1;  }  String fileExt=getExtension(filename);  for (  String extension : extensions) {    if (fileExt.equals(extension)) {      return true;    }  }  return false;}  }
class C{  public JsonArray(JsonArray array){  this(array,false);}  }
class C{  public GroupByAggregator(){}  }
class C{  public ViewsFinder andFrom(final ViewGroup... rootViews){  FunctionUtils.checkParameterIsNotNull("rootViews",rootViews);  return new ViewsFinder(this,rootViews);}  }
class C{  public static void cleanup(){  Helper.delete(W.create().and("expired",System.currentTimeMillis(),W.OP_LT),AuthToken.class);}  }
class C{  byte[] unparseMethod(method_info m){  int codesize;  byte bc[];  Instruction i;  m.cfg.reconstructInstructions();  codesize=relabel(m.instructions);  bc=new byte[codesize];  i=m.instructions;  codesize=0;  while (i != null) {    codesize=i.compile(bc,codesize);    i=i.next;  }  if (codesize != bc.length)   G.v().out.println("Warning: code size doesn't match array length!");  return bc;}  }
class C{  public void prepareForSpace(ITypeDesc typeDesc){  if (_preparedForSpace)   return;  if (_typeDesc == null)   init(typeDesc);  _allIndexValuesQuery=true;  if (_multipleUids != null) {    setMultipleUIDs(_multipleUids.toArray(new String[_multipleUids.size()]));    _allIndexValuesQuery=false;  }  boolean anyCompoundIndexCreated=false;  List<IQueryIndexScanner> queryIndexes=new LinkedList<IQueryIndexScanner>();  List<ICustomQuery> customQueries=null;  HashMap<String,List<Range>> containsSamePathRanges=null;  HashMap<ContainsItemIntersectionBase,ContainsItemValueRange> containsIntersections;  if (_containsItemsQueries != null && !_containsItemsQueries.isEmpty()) {    customQueries=new ArrayList<ICustomQuery>(_containsItemsQueries);    if (_ranges == null)     _ranges=new HashMap<String,Range>();    containsSamePathRanges=new HashMap<String,List<Range>>();    containsIntersections=new HashMap<ContainsItemIntersectionBase,ContainsItemValueRange>();    insertContainsItemsRanges(_containsItemsQueries,containsSamePathRanges,null,containsIntersections);  }  Map<Range,IQueryIndexScanner> usedByRanges=null;  Map<String,Range> possibleCompoundSegments=typeDesc.anyCompoundIndex() && _ranges != null ? new HashMap<String,Range>() : null;  if (_ranges != null) {    if (customQueries == null)     customQueries=new ArrayList<ICustomQuery>();    for (    Map.Entry<String,Range> mapEntry : _ranges.entrySet()) {      String fieldName=mapEntry.getKey();      Range range=mapEntry.getValue();      int propertyIndex=_typeDesc.getFixedPropertyPosition(fieldName);      boolean addedRange=false;      if (propertyIndex != -1 && (range.getFunctionCallDescription() == null)) {        range.toEntryPacket(this,propertyIndex);        addedRange=true;        if (!range.isRelevantForAllIndexValuesOptimization() || !_typeDesc.getPropertiesIndexTypes()[propertyIndex])         _allIndexValuesQuery=false;        if (possibleCompoundSegments != null && range.suitableAsCompoundIndexSegment()) {          if (usedByRanges == null)           usedByRanges=new HashMap<Range,IQueryIndexScanner>();          usedByRanges.put(range,_dummyNullIndexScanner);        }      }      if (range.isNestedQuery() || range.isComplex() || (propertyIndex == -1 && _typeDesc.supportsDynamicProperties())) {        if (!range.isInternalRange()) {          customQueries.add(mapEntry.getValue());          addedRange=true;        }        if (range.isIndexed(_typeDesc)) {          if (!range.isRelevantForAllIndexValuesOptimization())           _allIndexValuesQuery=false;          IQueryIndexScanner indexScanner=range.getIndexScanner();          if (indexScanner != null) {            queryIndexes.add(indexScanner);            if (possibleCompoundSegments != null && range.suitableAsCompoundIndexSegment()) {              if (usedByRanges == null)               usedByRanges=new HashMap<Range,IQueryIndexScanner>();              usedByRanges.put(range,indexScanner);            }          }          if (containsSamePathRanges != null && containsSamePathRanges.containsKey(range.getPath())) {            List<Range> l=containsSamePathRanges.get(range.getPath());            for (            Range r : l) {              if (r == range)               continue;              IQueryIndexScanner is=r.getIndexScanner();              if (indexScanner != null)               queryIndexes.add(is);            }          }        } else         _allIndexValuesQuery=false;      } else {        if (propertyIndex == -1)         _allIndexValuesQuery=false;      }      if (addedRange && possibleCompoundSegments != null && range.suitableAsCompoundIndexSegment())       possibleCompoundSegments.put(mapEntry.getKey(),range);    }    if (possibleCompoundSegments != null && possibleCompoundSegments.size() > 1) {      List<Range> possibleSegments=new ArrayList<Range>();      for (      SpaceIndex idx : typeDesc.getCompoundIndexes()) {        possibleSegments.clear();        CompoundIndex index=(CompoundIndex)idx;        for (        ISpaceCompoundIndexSegment seg : index.getCompoundIndexSegments()) {          if (possibleCompoundSegments.containsKey(seg.getName())) {            possibleSegments.add(possibleCompoundSegments.get(seg.getName()));          } else {            possibleSegments.clear();            break;          }        }        if (!possibleSegments.isEmpty()) {          IQueryIndexScanner indexScanner=buildCompoundIndexScannerFromSegmentRanges(index,possibleSegments);          if (indexScanner != null) {            queryIndexes.add(indexScanner);            anyCompoundIndexCreated=true;            if (usedByRanges != null && !usedByRanges.isEmpty()) {              for (              Range r : possibleSegments) {                IQueryIndexScanner s=usedByRanges.get(r);                if (s != null) {                  if (s == _dummyNullIndexScanner) {                    if (r.isIndexed(_typeDesc)) {                      int propertyIndex=_typeDesc.getFixedPropertyPosition(r.getPath());                      setFieldValue(propertyIndex,null);                      setExtendedMatchCode(propertyIndex,TemplateMatchCodes.EQ);                      customQueries.add(r);                    }                  } else                   queryIndexes.remove(s);                }              }            }          }        }      }    }    if (!customQueries.isEmpty() || ((anyCompoundIndexCreated && !queryIndexes.isEmpty()))) {      CompoundAndCustomQuery customQuery=new CompoundAndCustomQuery(customQueries);      customQuery.getCustomIndexes().addAll(queryIndexes);      setCustomQuery(customQuery);    }  }  _preparedForSpace=true;}  }
class C{  public static Zdiagmat o(Zdiagmat D1,Zdiagmat D2) throws JampackException {  if (D1.order != D2.order) {    throw new JampackException("Unconformity in product");  }  Zdiagmat D3=new Zdiagmat(D1.order);  for (int i=0; i < D3.order; i++) {    D3.re[i]=D1.re[i] * D2.re[i] - D1.im[i] * D2.im[i];    D3.im[i]=D1.re[i] * D2.im[i] + D1.im[i] * D2.re[i];  }  return D3;}  }
class C{  public static void updateCounts(double value,long[] counts,double[] quartiles){  if (value < quartiles[0]) {    counts[0]++;  } else   if (value > quartiles[2]) {    counts[3]++;  } else   if (value > quartiles[1]) {    counts[2]++;  } else {    counts[1]++;  }}  }
class C{  public static int expandRoman(String roman){  int value=0;  for (int p=0; p < roman.length(); p++) {    char c=roman.charAt(p);    if (c == 'X') {      value+=10;    } else     if (c == 'V') {      value+=5;    } else     if (c == 'I') {      if (p + 1 < roman.length()) {        char p1=roman.charAt(p + 1);        if (p1 == 'V') {          value+=4;          p++;        } else         if (p1 == 'X') {          value+=9;          p++;        } else {          value+=1;        }      } else {        value+=1;      }    }  }  return value;}  }
class C{  @Override public void dataChanged(FieldIdEnum changedField){  updateSymbol();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Poison_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200313,skillname);}  }
class C{  SnippetSet result(){  return snippetSet;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SUBMIT_PETITION_FAILED_OUT_OF_QUOTA(int num0){  return new SM_SYSTEM_MESSAGE(1300547,num0);}  }
class C{  public void addMapObject(InternalMapObject mapObject){  mapObjects.add(mapObject);}  }
class C{  public SyncHttpClient(int httpPort,int httpsPort){  super(false,httpPort,httpsPort);}  }
class C{  public boolean isMenuPathEnabled(String... path){  boolean isEnabled=findActionMenuItem(path).isEnabled();  myRobot.pressAndReleaseKey(KeyEvent.VK_ESCAPE);  return isEnabled;}  }
class C{  private UByte(byte value){  this.value=(short)(value & MAX_VALUE);}  }
class C{  public static boolean isUpgradeble(Item item){  if (item.getItemTemplate().isNoEnchant()) {    return false;  }  if (item.getItemTemplate().isWeapon()) {    return true;  }  if (item.getItemTemplate().getCategory() == ItemCategory.STIGMA) {    return false;  }  if (item.getEnchantLevel() == 15) {    return false;  }  if (item.getItemTemplate().isArmor()) {    int at=item.getItemTemplate().getItemSlot();    if (at == 1 || at == 2 || at == 8 || at == 16 || at == 32 || at == 2048 || at == 4096 || at == 131072 || at == 262144) {      return true;    }  }  return false;}  }
class C{  public static boolean isXML11ValidNmtoken(String nmtoken){  final int length=nmtoken.length();  if (length == 0) {    return false;  }  for (int i=0; i < length; ++i) {    char ch=nmtoken.charAt(i);    if (!isXML11Name(ch)) {      if (++i < length && isXML11NameHighSurrogate(ch)) {        char ch2=nmtoken.charAt(i);        if (!XMLChar.isLowSurrogate(ch2) || !isXML11Name(XMLChar.supplemental(ch,ch2))) {          return false;        }      } else {        return false;      }    }  }  return true;}  }
class C{  public XML11Configuration(SymbolTable symbolTable){  this(symbolTable,null,null);}  }
class C{  private Object readResolve(){  return LazyHolder.INSTANCE;}  }
class C{  protected void createImageDescriptor(String id,String name,URL baseURL){  URL url=null;  try {    url=new URL(baseURL,IRevisionGraphConstants.ICON_PATH + name);  } catch (  MalformedURLException e) {  }  ImageDescriptor desc=ImageDescriptor.createFromURL(url);  imageDescriptors.put(id,desc);}  }
class C{  public final double readDouble(){  return Double.longBitsToDouble(readLong());}  }
class C{  public String toString(){  return "ConstrainableLookupLocator[[" + super.toString() + "], ["+ constraints+ "]]";}  }
class C{  public void delete(int key){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    removeAt(i);  }}  }
class C{  private T fraction(final Field<T> field,final double p,final double q){  return field.getZero().add(p).divide(q);}  }
class C{  public static void addIfEmpty(List<List<DimensionalItemObject>> list){  if (list != null && list.size() == 0) {    list.add(Arrays.asList(new DimensionalItemObject[0]));  }}  }
class C{  public static TeleportCause toNukkit(org.bukkit.event.player.PlayerTeleportEvent.TeleportCause cause){switch (cause) {case COMMAND:    return TeleportCause.COMMAND;case NETHER_PORTAL:  return TeleportCause.NETHER_PORTAL;case PLUGIN:return TeleportCause.PLUGIN;default :return TeleportCause.UNKNOWN;}}  }
class C{  public void addInitialSeeds(Unit unit,Set<Abstraction> seeds){  if (this.initialSeeds.containsKey(unit))   this.initialSeeds.get(unit).addAll(seeds); else   this.initialSeeds.put(unit,new HashSet<Abstraction>(seeds));}  }
class C{  private void writeData(Container container,JsonGenerator gen,Object data,TypedParams<IncludedFieldsParams> includedFields,IncludedRelationsParams includedRelations) throws IOException {  Class<?> dataClass=data.getClass();  String resourceType=resourceRegistry.getResourceType(dataClass);  gen.writeStringField(TYPE_FIELD_NAME,resourceType);  RegistryEntry entry=resourceRegistry.getEntry(dataClass);  ResourceInformation resourceInformation=entry.getResourceInformation();  try {    writeId(gen,data,resourceInformation);  } catch (  IllegalAccessException|InvocationTargetException|NoSuchMethodException e) {    throw new JsonSerializationException("Error writing id field: " + resourceInformation.getIdField().getUnderlyingName());  }  Set<String> notAttributesFields=entry.getResourceInformation().getNotAttributeFields();  writeAttributes(gen,data,includedFields,notAttributesFields);  Set<ResourceField> relationshipFields=getRelationshipFields(resourceType,resourceInformation,includedFields);  if (!relationshipFields.isEmpty()) {    writeRelationshipFields(container,gen,data,relationshipFields,includedRelations);  }  if (!isClient) {    writeMetaField(gen,data,entry);    writeLinksField(gen,data,entry);  }}  }
class C{  public static synchronized void removeInstance(String storeName){  if (storeName != null) {    RedisStore redisStore=REDIS_STORES.get(storeName);    if (redisStore != null) {      redisStore.removeAllKeys();      REDIS_STORES.remove(storeName);    }  }}  }
class C{  public boolean hasCommit() throws IOException {  return saveLoadState.getNextWriteGen() != 0;}  }
class C{  private static GeneralCommandLine createCommandLine(Project project) throws ExecutionException {  String flutterSdkPath=null;  String workingDir=null;  if (project == null) {    FlutterSdk flutterSdk=FlutterSdk.getGlobalFlutterSdk();    if (flutterSdk != null) {      flutterSdkPath=flutterSdk.getHomePath();    }  } else {    DartSdk sdk=DartSdk.getDartSdk(project);    if (sdk == null) {      throw new ExecutionException(FlutterBundle.message("dart.sdk.is.not.configured"));    }    FlutterSdk flutterSdk=FlutterSdk.getFlutterSdk(project);    if (flutterSdk == null) {      throw new ExecutionException(FlutterBundle.message("flutter.sdk.is.not.configured"));    }    flutterSdkPath=flutterSdk.getHomePath();    workingDir=project.getBasePath();  }  if (flutterSdkPath == null) {    throw new ExecutionException(FlutterBundle.message("flutter.sdk.is.not.configured"));  }  String flutterExec=FlutterSdkUtil.pathToFlutterTool(flutterSdkPath);  final GeneralCommandLine commandLine=new GeneralCommandLine().withWorkDirectory(workingDir);  commandLine.setCharset(CharsetToolkit.UTF8_CHARSET);  commandLine.setExePath(FileUtil.toSystemDependentName(flutterExec));  commandLine.addParameter("daemon");  return commandLine;}  }
class C{  public V putIfAbsentElseGet(K key,V value){  V oldVal=this.putIfAbsent(key,value);  return oldVal == null ? value : oldVal;}  }
class C{  public static void debug(String string){  if (wantDebug)   System.err.println(string);}  }
class C{  public synchronized void resetBookInfoList(){  bookInfoList=null;}  }
class C{  public JimpleToBafContext(int localCount){  jimpleLocalToBafLocal=new HashMap<Local,Local>(localCount * 2 + 1,0.7f);}  }
class C{  private Label createLabel(Composite parent,String text,int horizontalSpan){  Label label=new Label(parent,SWT.LEFT);  label.setText(text);  GridData data=new GridData();  data.horizontalSpan=horizontalSpan;  data.horizontalAlignment=GridData.FILL;  label.setLayoutData(data);  return label;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  response.setContentType("text/html");  PrintWriter out=response.getWriter();  out.println("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">");  out.println("<HTML>");  out.println("  <HEAD><TITLE>A Servlet</TITLE></HEAD>");  out.println("  <BODY>");  out.print("    This is ");  out.print(this.getClass());  out.println(", using the GET method");  out.println("  </BODY>");  out.println("</HTML>");  out.flush();  out.close();}  }
class C{  public AvgTask(){  super();}  }
class C{  @Override protected Expression generateExpression(){  ReferencedEnvelope envelope=getBBox();  return getFilterFactory().literal(envelope);}  }
class C{  public static void copyURLToFile(URL source,File destination,int connectionTimeout,int readTimeout) throws IOException {  URLConnection connection=source.openConnection();  connection.setConnectTimeout(connectionTimeout);  connection.setReadTimeout(readTimeout);  InputStream input=connection.getInputStream();  copyInputStreamToFile(input,destination);}  }
class C{  public static long copyLarge(Reader input,Writer output,final long inputOffset,final long length,char[] buffer) throws IOException {  if (inputOffset > 0) {    skipFully(input,inputOffset);  }  if (length == 0) {    return 0;  }  int bytesToRead=buffer.length;  if (length > 0 && length < buffer.length) {    bytesToRead=(int)length;  }  int read;  long totalRead=0;  while (bytesToRead > 0 && EOF != (read=input.read(buffer,0,bytesToRead))) {    output.write(buffer,0,read);    totalRead+=read;    if (length > 0) {      bytesToRead=(int)Math.min(length - totalRead,buffer.length);    }  }  return totalRead;}  }
class C{  public PotionEffect(PotionEffectType type,int duration,int amplifier,boolean ambient){  this(type,duration,amplifier,ambient,true);}  }
class C{  @Path() public void onGet(){  try {    if (Helper.isConfigured()) {      this.redirect("/");      return;    }    this.show("/admin/setup.html");  } catch (  Exception e1) {    log.debug(e1.getMessage(),e1);    this.error(e1);  }}  }
class C{  void startTransaction(Transaction transaction,boolean resume){}  }
class C{  public static <T>LinkedList<T> linkedList(){  return new LinkedList<T>();}  }
class C{  private void updateButtonState(boolean dataChanged){  btnApply.setEnabled(dataChanged);  btnRevert.setEnabled(dataChanged);}  }
class C{  public LogSeqNum append(Constant[] rec){  logMgrLock.lock();  try {    int recsize=pointerSize * 2;    for (    Constant c : rec)     recsize+=Page.size(c);    if (currentPos + recsize >= BLOCK_SIZE) {      flush();      appendNewBlock();    }    LogSeqNum lsn=currentLSN();    for (    Constant c : rec)     appendVal(c);    finalizeRecord();    lastLsn=lsn;    return lsn;  }  finally {    logMgrLock.unlock();  }}  }
class C{  public TablePlanner(String tblName,Predicate pred,Transaction tx){  this.pred=pred;  this.tx=tx;  tp=new TablePlan(tblName,tx);  sch=tp.schema();  idxes=VanillaDb.catalogMgr().getIndexInfo(tblName,tx);}  }
class C{  public static OfflinePageFreeUpSpaceDialog newInstance(OfflinePageBridge offlinePageBridge,OfflinePageFreeUpSpaceCallback callback){  assert offlinePageBridge != null;  OfflinePageFreeUpSpaceDialog dialog=new OfflinePageFreeUpSpaceDialog();  dialog.mOfflinePageBridge=offlinePageBridge;  dialog.mCallback=callback;  return dialog;}  }
class C{  public void toggleSelection(int position){  if (selectedItems.get(position,false)) {    selectedItems.delete(position);  } else {    selectedItems.put(position,true);  }  notifyItemChanged(position);}  }
class C{  public static String dateToString(Date date){  return dateToString(date,SIMPLE_DATE_FORMAT);}  }
class C{  public MarketCreateCommentQuery attachments(String... value){  return unsafeParam("attachments",value);}  }
class C{  @Override public void channelOpen(ChannelHandlerContext channelHandlerContext,ChannelStateEvent channelStateEvent) throws Exception {  total_conns.incrementAndGet();  curr_conns.incrementAndGet();  channelGroup.add(channelHandlerContext.getChannel());}  }
class C{  public static String generateKey(String imageUri,ImageSize targetSize){  return new StringBuilder(imageUri).append(URI_AND_SIZE_SEPARATOR).append(targetSize.getWidth()).append(WIDTH_AND_HEIGHT_SEPARATOR).append(targetSize.getHeight()).toString();}  }
class C{  @Override public void put(long index,int value){  if (index + 1 >= limit)   limit=index + 1;  map.put(index,value);  if (!mustWriteOnClose)   mustWriteOnClose=true;}  }
class C{  protected Set<Dimension> generateDimensions(String apiDimension,DimensionDictionary dimensionDictionary) throws BadApiRequestException {  Set<Dimension> generated=dimensionDictionary.findAll().stream().filter(null).collect(Collectors.toCollection(null));  if (generated.isEmpty()) {    String msg;    if (dimensionDictionary.findAll().isEmpty()) {      msg=EMPTY_DICTIONARY.logFormat("Dimension");    } else {      msg=DIMENSIONS_UNDEFINED.logFormat(apiDimension);    }    LOG.error(msg);    throw new BadApiRequestException(msg);  }  LOG.trace("Generated set of dimensions: {}",generated);  return generated;}  }
class C{  @Override public void releaseScan() throws SAException {}  }
class C{  private void drawCenterRect(Canvas canvas){  int center=getHeight() / 2;  int offset=(int)(getItemHeight() / 2 * 1.2);  Paint paint=new Paint();  paint.setColor(getResources().getColor(R.color.province_line_border));  paint.setStrokeWidth((float)3);  canvas.drawLine(0,center - offset,getWidth(),center - offset,paint);  canvas.drawLine(0,center + offset,getWidth(),center + offset,paint);}  }
class C{  private void removeReadsFromSets(SortedSet<Pair<String,List<Pair<IReadBlock,IMatchBlock>>>> sorted,Pair<String,List<Pair<IReadBlock,IMatchBlock>>> current){  Set<IReadBlock> reads=new HashSet<>();  for (  Pair<IReadBlock,IMatchBlock> readAndMatch : current.getSecond()) {    reads.add(readAndMatch.getFirst());  }  List<Pair<String,List<Pair<IReadBlock,IMatchBlock>>>> toModify=new LinkedList<>();  for (  Pair<String,List<Pair<IReadBlock,IMatchBlock>>> refReadMatches : sorted) {    for (    Pair<IReadBlock,IMatchBlock> readMatch : refReadMatches.getSecond()) {      if (reads.contains(readMatch.getFirst())) {        toModify.add(refReadMatches);        break;      }    }  }  for (  Pair<String,List<Pair<IReadBlock,IMatchBlock>>> refReadMatches : toModify) {    sorted.remove(refReadMatches);    List<Pair<IReadBlock,IMatchBlock>> toDelete=new LinkedList<>();    for (    Pair<IReadBlock,IMatchBlock> readMatch : refReadMatches.getSecond()) {      if (reads.contains(readMatch.getFirst())) {        toDelete.add(readMatch);      }    }    refReadMatches.getSecond().removeAll(toDelete);    if (refReadMatches.getSecond().size() > 0)     sorted.add(refReadMatches);  }}  }
class C{  public void translate(Vector2 tx){  this.translate(tx.x,tx.y);}  }
class C{  private void sendBroadcastDownloadFinished(DownloadFileOperation download,RemoteOperationResult downloadResult,String unlinkedFromRemotePath){  Intent end=new Intent(getDownloadFinishMessage());  end.putExtra(EXTRA_DOWNLOAD_RESULT,downloadResult.isSuccess());  end.putExtra(ACCOUNT_NAME,download.getAccount().name);  end.putExtra(EXTRA_REMOTE_PATH,download.getRemotePath());  end.putExtra(EXTRA_FILE_PATH,download.getSavePath());  if (unlinkedFromRemotePath != null) {    end.putExtra(EXTRA_LINKED_TO_PATH,unlinkedFromRemotePath);  }  sendStickyBroadcast(end);}  }
class C{  public static double distanceSq(Vector3D v1,Vector3D v2){  return v1.distanceSq(v2);}  }
class C{  public static void runSubActions(List<ModelAction> actions,Map<String,Object> context){  if (actions == null)   return;  for (  ModelAction action : actions) {    if (Debug.verboseOn())     Debug.logVerbose("Running action " + action.getClass().getName(),module);    try {      action.runAction(context);    } catch (    GeneralException e) {      throw new RuntimeException(e);    }  }}  }
class C{  private LeastSquaresFactory(){}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BackDashATK_A_TO_B(String skillcaster,int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200948,skillcaster,num0,skilltarget,skillname);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public AssignRShiftExpr fullCopy(){  AssignRShiftExpr tree=(AssignRShiftExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  private void notifyEquipmentTags(final Long equipementId){  try {    Map<Long,Boolean> notifiedRules=new HashMap<Long,Boolean>();    Collection<Long> tagIds=equipmentFacade.getDataTagIds(equipementId);    for (    Long id : tagIds) {      try {        callCacheNotification(id,notifiedRules);      } catch (      CacheElementNotFoundException cacheEx) {        LOGGER.warn("Unable to locate Tag/Rule cache element during Tag supervision " + "change callback (some Tags/Rules may have been omitted)",cacheEx);      }    }  } catch (  CacheElementNotFoundException cacheEx) {    LOGGER.warn("Unable to locate Equipment element during Tag supervision " + "change callback (so no invalidation callbacks performed for associated Tags)",cacheEx);  }}  }
class C{  public Vector3f multAcross(Vector3f vec,Vector3f store){  if (null == vec) {    logger.info("Source vector is null, null result returned.");    return null;  }  if (store == null) {    store=new Vector3f();  }  float vx=vec.x, vy=vec.y, vz=vec.z;  store.x=m00 * vx + m10 * vy + m20 * vz + m30 * 1;  store.y=m01 * vx + m11 * vy + m21 * vz + m31 * 1;  store.z=m02 * vx + m12 * vy + m22 * vz + m32 * 1;  return store;}  }
class C{  public ImageFixture withMaxDifference(double percent){  myMaxPercentDifference=percent;  return this;}  }
class C{  public void loadCustomers(){  EntityManager em=emf.createEntityManager();  TypedQuery<Customer> queryBP;  List<Customer> resBP;  try {    em.getTransaction().begin();    queryBP=em.createQuery("SELECT c FROM Customer c",Customer.class);    resBP=queryBP.getResultList();    if (resBP.size() > 5) {      logger.info(resBP.size() + " Customers already available in the db");    } else {      new XMLParser().readCustomers(em,"com/sap/espm/model/data/Business_Partners.xml");      em.getTransaction().commit();      queryBP=em.createQuery("SELECT c FROM Customer c",Customer.class);      resBP=queryBP.getResultList();      logger.info(resBP.size() + " customers loaded into the db");    }  } catch (  Exception e) {    logger.error("Exception occured",e);  } finally {    em.close();  }}  }
class C{  protected CanReadFileFilter(){}  }
class C{  public static boolean writeJson(JsonRootNode node,File file){  return FileUtility.writeToFile(new StringBuffer(JSONUtility.jsonToString(node)),file,false);}  }
class C{  public TimeSeriesMetricDeltaSet(){  this(EMPTY_MAP);}  }
class C{  public AudioDeleteAlbumQuery deleteAlbum(UserActor actor,int albumId){  return new AudioDeleteAlbumQuery(getClient(),actor,albumId);}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CHAT_ROOM_NEW_ADMIN(String value0){  return new SM_SYSTEM_MESSAGE(1300861,value0);}  }
class C{  public void selectClosestPack(PackModel pack){  ensurePackExists(pack);  Array<PackModel> packs=getProject().getPacks();  int index=packs.indexOf(pack,true);  if (index > 0) {    selectPrevPack(pack);  } else {    selectNextPack(pack);  }}  }
class C{  public GermanLexicon(String basename){  this(basename,true);}  }
class C{  @JsonIgnore public boolean isValid(){  if (this.msgRateIn > 0.0 && this.msgRateOut > 0.0 && this.bandwidthIn > 0.0 && this.bandwidthOut > 0.0 && this.memory > 0.0) {    return true;  } else {    return false;  }}  }
class C{  public static String encodeBytes(byte[] source,int off,int len){  String encoded=null;  try {    encoded=encodeBytes(source,off,len,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  private static void decodeEdifactSegment(BitSource bits,StringBuilder result){  do {    if (bits.available() <= 16) {      return;    }    for (int i=0; i < 4; i++) {      int edifactValue=bits.readBits(6);      if (edifactValue == 0x1F) {        int bitsLeft=8 - bits.getBitOffset();        if (bitsLeft != 8) {          bits.readBits(bitsLeft);        }        return;      }      if ((edifactValue & 0x20) == 0) {        edifactValue|=0x40;      }      result.append((char)edifactValue);    }  } while (bits.available() > 0);}  }
class C{  public UTF16Reader(InputStream inputStream,boolean isBigEndian){  this(inputStream,DEFAULT_BUFFER_SIZE,isBigEndian,new XMLMessageFormatter(),Locale.getDefault());}  }
class C{  private BigFraction minor(final BigFraction[] c1,final BigFraction[] c2){  return c2[0].multiply(c1[2].subtract(c1[1])).add(c2[1].multiply(c1[0].subtract(c1[2]))).add(c2[2].multiply(c1[1].subtract(c1[0])));}  }
class C{  public int start_production(){  return 1;}  }
class C{  public static RxJava2CallAdapterFactory create(){  return new RxJava2CallAdapterFactory(null);}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  int taxId=((MainViewer)getViewer()).getSelectedIds().iterator().next();  String command="show histogram taxonId=" + taxId + ";";  execute(command);}  }
class C{  @RequestMapping(value="/data-counters/{id}",method=RequestMethod.DELETE,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Void> deleteDataCounter(@PathVariable String id){  log.debug("REST request to delete DataCounter : {}",id);  dataCounterRepository.delete(id);  return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert("dataCounter",id.toString())).build();}  }
class C{  private void startList(boolean isOrderedList,Attributes attributes){  boolean isIndentation=isIndentation(attributes);  ParagraphType newType=isIndentation && isOrderedList ? ParagraphType.INDENTATION_OL : isIndentation && !isOrderedList ? ParagraphType.INDENTATION_UL : isOrderedList ? ParagraphType.NUMBERING : ParagraphType.BULLET;  AccumulatedParagraphStyle currentStyle=mParagraphStyles.isEmpty() ? null : mParagraphStyles.peek();  if (currentStyle == null) {    AccumulatedParagraphStyle newStyle=new AccumulatedParagraphStyle(newType,1,1);    mParagraphStyles.push(newStyle);  } else   if (currentStyle.getType() == newType) {    currentStyle.setAbsoluteIndent(currentStyle.getAbsoluteIndent() + 1);    currentStyle.setRelativeIndent(currentStyle.getRelativeIndent() + 1);  } else {    AccumulatedParagraphStyle newStyle=new AccumulatedParagraphStyle(newType,currentStyle.getAbsoluteIndent() + 1,1);    mParagraphStyles.push(newStyle);  }}  }
class C{  public Matrix arrayLeftDivide(Matrix B){  checkMatrixDimensions(B);  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=B.A[i][j] / A[i][j];    }  }  return X;}  }
class C{  public ReadWriteRequiredException(){  super("Not a read-write transaction");}  }
class C{  public Observable<Object> toMainThreadObserverable(LifecycleTransformer lifecycleTransformer){  return _bus.observeOn(AndroidSchedulers.mainThread()).compose(lifecycleTransformer);}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  private void analyzeMethodForCallbackRegistrations(SootClass lifecycleElement,SootMethod method){  if (method.getDeclaringClass().getName().startsWith("android.") || method.getDeclaringClass().getName().startsWith("java."))   return;  if (!method.isConcrete())   return;  ExceptionalUnitGraph graph=new ExceptionalUnitGraph(method.retrieveActiveBody());  SmartLocalDefs smd=new SmartLocalDefs(graph,new SimpleLiveLocals(graph));  Set<SootClass> callbackClasses=new HashSet<SootClass>();  for (  Unit u : method.retrieveActiveBody().getUnits()) {    Stmt stmt=(Stmt)u;    if (stmt.containsInvokeExpr() && stmt.getInvokeExpr() instanceof InstanceInvokeExpr) {      InstanceInvokeExpr iinv=(InstanceInvokeExpr)stmt.getInvokeExpr();      String[] parameters=SootMethodRepresentationParser.v().getParameterTypesFromSubSignature(iinv.getMethodRef().getSubSignature().getString());      for (int i=0; i < parameters.length; i++) {        String param=parameters[i];        if (androidCallbacks.contains(param)) {          Value arg=iinv.getArg(i);          if (arg.getType() instanceof RefType && arg instanceof Local)           for (          Unit def : smd.getDefsOfAt((Local)arg,u)) {            assert def instanceof DefinitionStmt;            Type tp=((DefinitionStmt)def).getRightOp().getType();            if (tp instanceof RefType) {              SootClass callbackClass=((RefType)tp).getSootClass();              if (callbackClass.isInterface())               for (              SootClass impl : Scene.v().getActiveHierarchy().getImplementersOf(callbackClass))               for (              SootClass c : Scene.v().getActiveHierarchy().getSubclassesOfIncluding(impl))               callbackClasses.add(c); else               for (              SootClass c : Scene.v().getActiveHierarchy().getSubclassesOfIncluding(callbackClass))               callbackClasses.add(c);            }          }        }      }    }  }  for (  SootClass callbackClass : callbackClasses)   analyzeClass(callbackClass,lifecycleElement);}  }
class C{  private synchronized void init(){  _identityMethodCache=Collections.synchronizedMap(new IdentityHashMap<IMethod,IMethod>());}  }
class C{  public PhotosSaveQuery latitude(Float value){  return unsafeParam("latitude",value);}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  private void openChooseRootDialog(){  ChooseRootUrlDialog dialog=new ChooseRootUrlDialog(getShell(),location.getUrl());  if (dialog.open() == Window.OK) {    SVNUrl url=dialog.getRootUrl();    if (url == null) {      repositoryRootText.setText("");    } else {      repositoryRootText.setText(dialog.getRootUrl().toString());    }  }}  }
class C{  private synchronized void disconnect(){  disconnectQuietly();  notifyConnectionListenerOnDisconnection();}  }
class C{  public static QQWXFragment newInstance(String param1,String param2){  QQWXFragment fragment=new QQWXFragment();  Bundle args=new Bundle();  args.putString(ARG_PARAM1,param1);  args.putString(ARG_PARAM2,param2);  fragment.setArguments(args);  return fragment;}  }
class C{  @Override public void ignoredCharacters(XMLString text,Augmentations augmentations) throws XNIException {}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  @Override public void renderAxisLabels(Canvas c){  if (!mYAxis.isEnabled() || !mYAxis.isDrawLabelsEnabled())   return;  float[] positions=new float[mYAxis.mEntryCount * 2];  for (int i=0; i < positions.length; i+=2) {    positions[i]=mYAxis.mEntries[i / 2];  }  mTrans.pointValuesToPixel(positions);  mAxisLabelPaint.setTypeface(mYAxis.getTypeface());  mAxisLabelPaint.setTextSize(mYAxis.getTextSize());  mAxisLabelPaint.setColor(mYAxis.getTextColor());  mAxisLabelPaint.setTextAlign(Align.CENTER);  float baseYOffset=Utils.convertDpToPixel(2.5f);  float textHeight=Utils.calcTextHeight(mAxisLabelPaint,"Q");  AxisDependency dependency=mYAxis.getAxisDependency();  YAxisLabelPosition labelPosition=mYAxis.getLabelPosition();  float yPos;  if (dependency == AxisDependency.LEFT) {    if (labelPosition == YAxisLabelPosition.OUTSIDE_CHART) {      yPos=mViewPortHandler.contentTop() - baseYOffset;    } else {      yPos=mViewPortHandler.contentTop() - baseYOffset;    }  } else {    if (labelPosition == YAxisLabelPosition.OUTSIDE_CHART) {      yPos=mViewPortHandler.contentBottom() + textHeight + baseYOffset;    } else {      yPos=mViewPortHandler.contentBottom() + textHeight + baseYOffset;    }  }  drawYLabels(c,yPos,positions,mYAxis.getYOffset());}  }
class C{  public Counter(int startValue){  start=startValue;  value=startValue;}  }
class C{  public static float clamp(float input,float min,float max){  return (input < min) ? min : (input > max) ? max : input;}  }
class C{  @deprecated protected int write(int offset,int length){  int newLength=this.bytesLength + length;  ensureCapacity(newLength);  this.bytesLength=newLength;  int bytesOffset=this.bytes.length - this.bytesLength;  while (length > 0) {    this.bytes[(bytesOffset++)]=((byte)this.strings.charAt(offset++));    length--;  }  return this.bytesLength;}  }
class C{  @Override public boolean deleteWorkspace(String workspaceName){  if (workspaceName == null) {    return false;  }  boolean result=false;  GeoServerRESTManager manager=GeoServerRESTManagerFactory.getManager(connection);  GeoServerRESTPublisher publisher=manager.getPublisher();  if (publisher != null) {    if (isDefaultWorkspace(workspaceName)) {      ConsoleManager.getInstance().error(this,"Can not delete default workspace");    } else {      result=publisher.removeWorkspace(workspaceName,false);    }  }  return result;}  }
class C{  public NewsfeedSearchQuery latitude(Float value){  return unsafeParam("latitude",value);}  }
class C{  public static double tf(int count){  return count > 0 ? 1 + Math.log10(count) : 0;}  }
class C{  public void fireSyncToViewer(){  syncListener.syncList2Viewer(getEnabledLabels());}  }
class C{  public static String encode(String str) throws RuntimeException {  byte[] bytes=str.getBytes();  byte[] encoded=encode(bytes);  try {    return new String(encoded,"ASCII");  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException("ASCII is not supported!",e);  }}  }
class C{  @Override public IObjectInfo insertEntryIndexedField(IEntryCacheInfo pEntry,K fieldValue,TypeData pType,boolean alreadyCloned){  IObjectInfo oi=null;  if (_index.isUniqueIndex()) {    while (true) {      IEntryCacheInfo other=getUniqueEntriesStore().putIfAbsent(fieldValue,pEntry);      if (other == null) {        oi=pEntry;        break;      }      if (other.isRemovingOrRemoved() || other.isDeleted()) {        getUniqueEntriesStore().remove(fieldValue,other);      } else {        DuplicateIndexValueException ex=new DuplicateIndexValueException(pEntry.getUID(),pEntry.getEntryHolder(_index.getCacheManager()).getClassName(),_index.getIndexDefinition().getName(),fieldValue,other.getUID());        if (_logger.isLoggable(Level.SEVERE))         _logger.log(Level.SEVERE,"Duplicate value encountered on unique index insertion ",ex);        throw ex;      }    }  } else {    IStoredList<IEntryCacheInfo> newSL=null;    IObjectInfo myoi=null, otheroi=null;    IStoredList<IEntryCacheInfo> currentSL=null;    boolean first=true;    ConcurrentMap<Object,IStoredList<IEntryCacheInfo>> store=getNonUniqueEntriesStore();    while (true) {      if (first) {        first=false;        if (!_index.assumeUniqueValue())         currentSL=store.get(fieldValue);      }      if (currentSL == null) {        if (!alreadyCloned && _index.considerValueClone()) {          fieldValue=(K)_index.cloneIndexValue(fieldValue,pEntry.getEntryHolder(_index.getCacheManager()));          alreadyCloned=true;        }        currentSL=store.putIfAbsent(fieldValue,pEntry);        if (currentSL == null) {          oi=pEntry;          break;        }      }      if (currentSL.isMultiObjectCollection()) {        oi=currentSL.add(pEntry);        if (oi == null) {          store.remove(fieldValue,currentSL);          currentSL=null;          continue;        } else         break;      }      if (newSL == null)       newSL=StoredListFactory.createConcurrentList(false,pType.isAllowFifoIndexScans());      otheroi=newSL.addUnlocked(currentSL.getObjectFromHead());      myoi=newSL.addUnlocked(pEntry);      if (!store.replace(fieldValue,currentSL,newSL)) {        newSL.removeUnlocked(otheroi);        newSL.removeUnlocked(myoi);        myoi=null;        currentSL=null;      } else {        oi=myoi;        break;      }    }  }  return oi;}  }
class C{  public void swapWith(E out,E in){  innerChain.swapWith(out,in);  out.redirectJumpsToThisTo(in);}  }
class C{  public Object unmarshal(final String xml) throws XMLException {  Object readObject=null;  try {    readObject=unmarshaller.unmarshal(new StreamSource(xml));    if (readObject instanceof JAXBElement) {      readObject=((JAXBElement)readObject).getValue();    }  } catch (  JAXBException e) {    throw new XMLException("Cannot read the XML ",e);  }catch (  IllegalArgumentException e) {    throw new XMLException("Cannot read the XML ",e);  }  return readObject;}  }
class C{  public void config(Configuration config,String prefix,String name){  String completionsFile=config.getPrefixProperty(prefix,"Completions.File","NONE");  if (completionsFile != null) {    completions=JarServiceProvider.readStringsMap(completionsFile);  }}  }
class C{  public static JsonElement createPoint(IPoint point){  JsonObject jsonObject=null;  if (point != null) {    jsonObject=new JsonObject();    try {      jsonObject.addProperty("x",point.getX());      jsonObject.addProperty("y",point.getY());      jsonObject.addProperty("z",point.getZ());    } catch (    AutomationException e) {      e.printStackTrace();    }catch (    IOException e) {      e.printStackTrace();    }  }  return jsonObject;}  }
class C{  public FieldVector3D<T> add(final double factor,final FieldVector3D<T> v){  return new FieldVector3D<T>(1.0,this,factor,v);}  }
class C{  @Override public void addLifecycleListener(LifecycleListener listener){  lifecycle.addLifecycleListener(listener);}  }
class C{  public URL addParameters(Map<String,String> parameters){  if (parameters == null || parameters.size() == 0) {    return this;  }  boolean hasAndEqual=true;  for (  Map.Entry<String,String> entry : parameters.entrySet()) {    String value=getParameters().get(entry.getKey());    if (value == null && entry.getValue() != null || !value.equals(entry.getValue())) {      hasAndEqual=false;      break;    }  }  if (hasAndEqual)   return this;  Map<String,String> map=new HashMap<String,String>(getParameters());  map.putAll(parameters);  return new URL(protocol,username,password,host,port,path,map);}  }
class C{  public SecureGetSMSHistoryQuery dateFrom(Integer value){  return unsafeParam("date_from",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Snare_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200468,skilltarget,skillname);}  }
class C{  public void addHeader(String header,String value){  clientHeaderMap.put(header,value);}  }
class C{  public boolean equivTo(Object o){  return this.equals(o);}  }
class C{  private int findSmallSubDiagonalElement(final int startIdx,final double norm){  int l=startIdx;  while (l > 0) {    double s=FastMath.abs(matrixT[l - 1][l - 1]) + FastMath.abs(matrixT[l][l]);    if (s == 0.0) {      s=norm;    }    if (FastMath.abs(matrixT[l][l - 1]) < epsilon * s) {      break;    }    l--;  }  return l;}  }
class C{  public static String readStreamContent(InputStream stream) throws IOException {  StringBuilder str=new StringBuilder();  BufferedReader reader=new BufferedReader(new InputStreamReader(stream));  String line;  while ((line=reader.readLine()) != null) {    str.append(line + "\n");  }  String response=str.toString();  return response;}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof FeatureDefinition))   return false;  FeatureDefinition other=(FeatureDefinition)obj;  if (featureWeights == null) {    if (other.featureWeights != null)     return false;  } else {    if (other.featureWeights == null)     return false;    if (featureWeights.length != other.featureWeights.length)     return false;    for (int i=0; i < featureWeights.length; i++) {      if (featureWeights[i] != other.featureWeights[i])       return false;    }    assert floatWeightFuncts != null;    assert other.floatWeightFuncts != null;    if (floatWeightFuncts.length != other.floatWeightFuncts.length)     return false;    for (int i=0; i < floatWeightFuncts.length; i++) {      if (floatWeightFuncts[i] == null) {        if (other.floatWeightFuncts[i] != null)         return false;      } else {        if (other.floatWeightFuncts[i] == null)         return false;        if (!floatWeightFuncts[i].equals(other.floatWeightFuncts[i]))         return false;      }    }  }  return featureEquals(other);}  }
class C{  public final boolean isOwner(){  return this.equals(OWNER);}  }
class C{  public void validateSelfIncrementedColumnName(UpdateQuery updateQuery) throws SQLException {  UpdateColumn selfIncrementedColumn=new UpdateColumn(_selfIncrementedColumnName);  selfIncrementedColumn.createColumnData(updateQuery);  if (!getName().equals(selfIncrementedColumn.getName()))   throw new SQLException("Operator '+' is only allowed for the same column.");}  }
class C{  public boolean isApplicable(){  return getViewer().isPCoATab();}  }
class C{  public AudioPermission(String name,String actions){  super(name,actions);}  }
class C{  public String viewDef(){  return qryData.toString();}  }
class C{  public void actionPerformed(ActionEvent evt){  if (chooser == null)   init();  File f=null;  scaler.setImage(display.getOffscreenBuffer());  int returnVal=chooser.showSaveDialog(display);  if (returnVal == JFileChooser.APPROVE_OPTION) {    f=chooser.getSelectedFile();  } else {    return;  }  String format=((SimpleFileFilter)chooser.getFileFilter()).getExtension();  String ext=IOLib.getExtension(f);  if (!format.equals(ext)) {    f=new File(f.toString() + "." + format);  }  double scale=scaler.getScale();  boolean success=false;  try {    OutputStream out=new BufferedOutputStream(new FileOutputStream(f));    System.out.print("Saving image " + f.getName() + ", "+ format+ " format...");    success=display.saveImage(out,format,scale);    out.flush();    out.close();    System.out.println("\tDONE");  } catch (  Exception e) {    success=false;  }  if (!success) {    JOptionPane.showMessageDialog(display,"Error Saving Image!","Image Save Error",JOptionPane.ERROR_MESSAGE);  }}  }
class C{  public Zchol(Zmat A) throws JampackException {  double mu;  int i, j, k;  A.getProperties();  if (A.nr != A.nc) {    throw new JampackException("Matrix not square.");  }  n=A.nr;  R=new Zutmat(A);  for (i=0; i < n; i++) {    if (R.im[i][i] != 0) {      throw new JampackException("Matrix not Hermitian");    }    for (j=0; j < i; j++) {      if (R.re[i][j] != R.re[j][i] || R.im[i][j] != -R.im[j][i]) {        throw new JampackException("Matrix not Hermitian");      }      R.im[i][j]=0;      R.re[i][j]=0;    }  }  for (k=0; k < n; k++) {    if (R.re[k][k] <= 0) {      throw new JampackException("Nonpositive diagonal entry during reduction.");    }    R.re[k][k]=Math.sqrt(R.re[k][k]);    mu=1 / R.re[k][k];    for (j=k + 1; j < n; j++) {      R.re[k][j]=mu * R.re[k][j];      R.im[k][j]=mu * R.im[k][j];    }    for (i=k + 1; i < n; i++) {      for (j=i; j < n; j++) {        R.re[i][j]=R.re[i][j] - R.re[k][i] * R.re[k][j] - R.im[k][i] * R.im[k][j];        R.im[i][j]=R.im[i][j] - R.re[k][i] * R.im[k][j] + R.im[k][i] * R.re[k][j];      }      R.im[i][i]=0;    }  }}  }
class C{  public ElementType parent(){  return theParent;}  }
class C{  public SpaceTypeDescriptorHolder(){  super();}  }
class C{  public AudioAddAlbumQuery(VkApiClient client,UserActor actor,String title){  super(client,"audio.addAlbum",AddAlbumResponse.class);  accessToken(actor.getAccessToken());  title(title);}  }
class C{  public Object clone() throws CloneNotSupportedException {  AlarmCacheObject alarmCacheObject=(AlarmCacheObject)super.clone();  if (this.condition != null) {    alarmCacheObject.condition=(AlarmCondition)this.condition.clone();  }  if (this.timestamp != null) {    alarmCacheObject.timestamp=(Timestamp)this.timestamp.clone();  }  if (this.lastPublication != null) {    alarmCacheObject.lastPublication=(AlarmPublication)lastPublication.clone();  }  return alarmCacheObject;}  }
class C{  public boolean isDrawGridLinesEnabled(){  return mDrawGridLines;}  }
class C{  public AlignedLabels alignLabels(Labels first,Labels second){  String firstLabels=StringUtils.join(entrySeparator,first.getLabelSymbols());  String secondLabels=StringUtils.join(entrySeparator,second.getLabelSymbols());  String aligned=distanceAlign(firstLabels,secondLabels);  if (aligned.endsWith("#")) {    aligned=aligned + " ";  }  String[] fields=aligned.split("#");  assert fields.length == first.items.length;  int iSecond=-1;  int[] map=new int[fields.length];  for (int i=0; i < fields.length; i++) {    int numLabels;    String f=fields[i].trim();    if (f.equals("")) {      numLabels=0;    } else {      numLabels=f.split(" ").length;    }    iSecond+=numLabels;    map[i]=Math.max(iSecond,0);  }  return new AlignedLabels(first,second,map);}  }
class C{  public static void evaluateBindings(CompositeDescriptionExpanded compositeDescription){  if (compositeDescription.bindings == null) {    return;  }  Map<String,ComponentDescription> componentNameToDescription=getComponentNameToDescription(compositeDescription);  Map<String,ComponentBinding> bindingByComponentName=getBindingByComponentName(compositeDescription.bindings);  for (  Binding.ComponentBinding componentBinding : bindingByComponentName.values()) {    ComponentDescription description=componentNameToDescription.get(componentBinding.componentName);    for (    Binding binding : componentBinding.bindings) {      if (binding.isProvisioningTimeBinding()) {        continue;      }      try {        evaluateBinding(binding,description,componentNameToDescription,bindingByComponentName,new HashSet<>());      } catch (      ReflectiveOperationException|IOException e) {        throw new RuntimeException(e);      }    }  }}  }
class C{  public void animateY(int durationMillis){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorY=ObjectAnimator.ofFloat(this,"phaseY",0f,1f);  animatorY.setDuration(durationMillis);  animatorY.addUpdateListener(mListener);  animatorY.start();}  }
class C{  protected void resolveExternalSubsetAndRead() throws IOException, XNIException {  fDTDDescription.setValues(null,null,fEntityManager.getCurrentResourceIdentifier().getExpandedSystemId(),null);  fDTDDescription.setRootName(fElementQName.rawname);  XMLInputSource src=fExternalSubsetResolver.getExternalSubset(fDTDDescription);  if (src != null) {    fDoctypeName=fElementQName.rawname;    fDoctypePublicId=src.getPublicId();    fDoctypeSystemId=src.getSystemId();    if (fDocumentHandler != null) {      fDocumentHandler.doctypeDecl(fDoctypeName,fDoctypePublicId,fDoctypeSystemId,null);    }    try {      if (fValidationManager == null || !fValidationManager.isCachedDTD()) {        fDTDScanner.setInputSource(src);        while (fDTDScanner.scanDTDExternalSubset(true))         ;      } else {        fDTDScanner.setInputSource(null);      }    }  finally {      fEntityManager.setEntityHandler(XMLDocumentScannerImpl.this);    }  }}  }
class C{  public void updateProfile(PlayerData playerData){  this.playerData=playerData;  avatar=new PlayerAvatar(playerData.getAvatar());  dailyBonus=new DailyBonus(playerData.getDailyBonus());  contactSettings=new ContactSettings(playerData.getContactSettings());  for (  CurrencyOuterClass.Currency currency : playerData.getCurrenciesList()) {    try {      addCurrency(currency.getName(),currency.getAmount());    } catch (    InvalidCurrencyException e) {      Log.w(TAG,"Error adding currency. You can probably ignore this.",e);    }  }  tutorialState=new TutorialState(playerData.getTutorialStateList());}  }
class C{  public void notifyFailed(Throwable exception) throws RuntimeException {  exec.shutdownNow();  LOGGER.error(exception);  throw new RuntimeException(exception);}  }
class C{  default void onEnable(PluginBase pokkit){}  }
class C{  private static boolean matches(Pattern pattern,String input){  Matcher m=pattern.matcher(input);  return m.matches();}  }
class C{  public SOCKS5Connector(String socks5host,int socks5port,String socks5user,String socks5pass){  this.socks5host=socks5host;  this.socks5port=socks5port;  this.socks5user=socks5user;  this.socks5pass=socks5pass;}  }
class C{  public static Set<String> splitToArray(String value,String separator){  if (value == null || value.isEmpty()) {    return null;  }  String[] values=value.split(separator);  return new HashSet<>(Arrays.asList(values));}  }
class C{  public byte[] toByteArray(){  byte newbuf[]=new byte[_count];  System.arraycopy(_buffer,0,newbuf,0,_count);  return newbuf;}  }
class C{  public Matrix uminus(){  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=-A[i][j];    }  }  return X;}  }
class C{  public RealMatrix jacobian(RealVector point){  double[] pointArray=point.toArray();  double[][] jacobian=new double[distances.length][pointArray.length];  for (int i=0; i < jacobian.length; i++) {    for (int j=0; j < pointArray.length; j++) {      jacobian[i][j]=2 * pointArray[j] - 2 * positions[i][j];    }  }  return new Array2DRowRealMatrix(jacobian);}  }
class C{  public static BufferedImage resizeImage(Image image){  BufferedImage result=new BufferedImage(128,128,BufferedImage.TYPE_INT_ARGB);  Graphics2D graphics=result.createGraphics();  graphics.drawImage(image,0,0,128,128,null);  graphics.dispose();  return result;}  }
class C{  public synchronized void startPreview(){  Camera theCamera=camera;  if (theCamera != null && !previewing) {    theCamera.startPreview();    previewing=true;    autoFocusManager=new AutoFocusManager(context,camera);  }}  }
class C{  default Column distance(Column column2){  FloatColumn newColumn=FloatColumn.create(name() + column2.name() + "[distance]");  for (int r=0; r < size(); r++) {    String value1=getString(r);    String value2=column2.getString(r);    newColumn.set(r,StringUtils.getLevenshteinDistance(value1,value2));  }  return newColumn;}  }
class C{  public void initializeOwnerReferencesForField(StateManager sm,FieldMetaData fmd){  if (fmd.getAssociationType() == FieldMetaData.ONE_TO_MANY) {    Collection<?> collection=(Collection<?>)sm.fetch(fmd.getIndex());    if (collection != null) {      for (      Object item : collection) {        if (item != null) {          _relationsManager.setOwnerStateManagerForPersistentInstance(item,sm,fmd);        }      }    }  } else   if (fmd.getAssociationType() == FieldMetaData.ONE_TO_ONE || fmd.isEmbeddedPC()) {    Object value=sm.fetch(fmd.getIndex());    if (value != null) {      _relationsManager.setOwnerStateManagerForPersistentInstance(value,sm,fmd);    }  }}  }
class C{  public AuthSignupQuery signup(String firstName,String lastName,int clientId,String clientSecret,String phone){  return new AuthSignupQuery(getClient(),firstName,lastName,clientId,clientSecret,phone);}  }
class C{  public PollsGetVotersQuery(VkApiClient client,UserActor actor,int pollId,int... answerIds){  super(client,"polls.getVoters",Utils.buildParametrizedType(List.class,Voters.class));  accessToken(actor.getAccessToken());  pollId(pollId);  answerIds(answerIds);}  }
class C{  @Override public Result decode(BinaryBitmap image) throws NotFoundException, ChecksumException, FormatException {  return decode(image,null);}  }
class C{  public Builder memoryCacheExtraOptions(int maxImageWidthForMemoryCache,int maxImageHeightForMemoryCache){  this.maxImageWidthForMemoryCache=maxImageWidthForMemoryCache;  this.maxImageHeightForMemoryCache=maxImageHeightForMemoryCache;  return this;}  }
class C{  protected AdsAddOfficeUsersQuery accountId(int value){  return unsafeParam("account_id",value);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.expanded_map_activity);  permissionCheck();  mapView=(MapView)findViewById(R.id.expanded_map);  mapView.onCreate(savedInstanceState);  mapView.getMapAsync(OpenMapActivity.this);  if (savedInstanceState == null) {    Bundle extras=getIntent().getExtras();    id_filial=extras.getInt(ID_FILIAL);    latitude=extras.getFloat(LATITUDE);    longitude=extras.getFloat(LONGITUDE);    logoPath=extras.getString(LOGO);    unidade=extras.getString(UNIDADE);    nome_fantasia=extras.getString(NOME_FANTASIA);    telefone=extras.getString(TELEFONE);    endereco=extras.getString(ENDERECO);    cep=extras.getString(CEP);  }  setTitle("Voltar");  init();}  }
class C{  public static Map<String,Object> fedexShipRequest(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  Locale locale=(Locale)context.get("locale");  String shipmentId=(String)context.get("shipmentId");  String shipmentRouteSegmentId=(String)context.get("shipmentRouteSegmentId");  Map<String,Object> shipmentGatewayConfig=ShipmentServices.getShipmentGatewayConfigFromShipment(delegator,shipmentId,locale);  String shipmentGatewayConfigId=(String)shipmentGatewayConfig.get("shipmentGatewayConfigId");  String resource=(String)shipmentGatewayConfig.get("configProps");  if (UtilValidate.isEmpty(shipmentGatewayConfigId) && UtilValidate.isEmpty(resource)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexGatewayNotAvailable",locale));  }  String templateLocation=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"templateShipment",resource,"shipment.fedex.template.ship.location");  if (UtilValidate.isEmpty(templateLocation)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexShipmentTemplateLocationNotFound",UtilMisc.toMap("templateLocation",templateLocation),locale));  }  String accountNumber=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"accessAccountNbr",resource,"shipment.fedex.access.accountNbr");  if (UtilValidate.isEmpty(accountNumber)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexAccountNumberNotFound",locale));  }  String meterNumber=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"accessMeterNumber",resource,"shipment.fedex.access.meterNumber");  if (UtilValidate.isEmpty(meterNumber)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexMeterNumberNotFound",UtilMisc.toMap("meterNumber",meterNumber),locale));  }  String weightUomId=EntityUtilProperties.getPropertyValue(shipmentPropertiesFile,"shipment.default.weight.uom",delegator);  if (UtilValidate.isEmpty(weightUomId)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentDefaultWeightUomIdNotFound",locale));  } else   if (!("WT_lb".equals(weightUomId) || "WT_kg".equals(weightUomId))) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentDefaultWeightUomIdNotValid",locale));  }  String dimensionsUomId=EntityUtilProperties.getPropertyValue(shipmentPropertiesFile,"shipment.default.dimension.uom",delegator);  if (UtilValidate.isEmpty(dimensionsUomId)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentDefaultDimensionUomIdNotFound",locale));  } else   if (!("LEN_in".equals(dimensionsUomId) || "LEN_cm".equals(dimensionsUomId))) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentDefaultDimensionUomIdNotValid",locale));  }  String labelImageType=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"labelImageType",resource,"shipment.fedex.labelImageType");  if (UtilValidate.isEmpty(labelImageType)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexLabelImageTypeNotFound",locale));  } else   if (!("PDF".equals(labelImageType) || "PNG".equals(labelImageType))) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexLabelImageTypeNotValid",locale));  }  String dropoffType=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"defaultDropoffType",resource,"shipment.fedex.default.dropoffType");  if (UtilValidate.isEmpty(dropoffType)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexDropoffTypeNotFound",locale));  }  try {    Map<String,Object> shipRequestContext=FastMap.newInstance();    GenericValue shipment=EntityQuery.use(delegator).from("Shipment").where("shipmentId",shipmentId).queryOne();    if (UtilValidate.isEmpty(shipment)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"ProductShipmentNotFoundId",locale) + shipmentId);    }    GenericValue shipmentRouteSegment=EntityQuery.use(delegator).from("ShipmentRouteSegment").where("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId).queryOne();    if (UtilValidate.isEmpty(shipmentRouteSegment)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"ProductShipmentRouteSegmentNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));    }    String carrierPartyId=shipmentRouteSegment.getString("carrierPartyId");    if (!"FEDEX".equals(carrierPartyId)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexNotRouteSegmentCarrier",UtilMisc.toMap("shipmentRouteSegmentId",shipmentRouteSegmentId,"shipmentId",shipmentId),locale));    }    if (UtilValidate.isNotEmpty(shipmentRouteSegment.getString("carrierServiceStatusId")) && !"SHRSCS_NOT_STARTED".equals(shipmentRouteSegment.getString("carrierServiceStatusId"))) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexRouteSegmentStatusNotStarted",UtilMisc.toMap("shipmentRouteSegmentId",shipmentRouteSegmentId,"shipmentId",shipmentId,"shipmentRouteSegmentStatus",shipmentRouteSegment.getString("carrierServiceStatusId")),locale));    }    String shipmentMethodTypeId=shipmentRouteSegment.getString("shipmentMethodTypeId");    GenericValue carrierShipmentMethod=EntityQuery.use(delegator).from("CarrierShipmentMethod").where("shipmentMethodTypeId",shipmentMethodTypeId,"partyId","FEDEX","roleTypeId","CARRIER").queryOne();    if (UtilValidate.isEmpty(carrierShipmentMethod)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexRouteSegmentCarrierShipmentMethodNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId,"carrierPartyId",carrierPartyId,"shipmentMethodTypeId",shipmentMethodTypeId),locale));    }    if (UtilValidate.isEmpty(carrierShipmentMethod.getString("carrierServiceCode"))) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexNoCarrieServiceCode",UtilMisc.toMap("shipmentMethodTypeId",shipmentMethodTypeId),locale));    }    String service=carrierShipmentMethod.getString("carrierServiceCode");    boolean isGroundService=service.equals("FEDEXGROUND") || service.equals("GROUNDHOMEDELIVERY");    String carrierCode=isGroundService ? "FDXG" : "FDXE";    String currencyCode=null;    if (UtilValidate.isNotEmpty(shipmentRouteSegment.getString("currencyUomId"))) {      currencyCode=shipmentRouteSegment.getString("currencyUomId");    } else     if (UtilValidate.isNotEmpty(shipmentRouteSegment.getString("currencyUomId"))) {      currencyCode=shipment.getString("currencyUomId");    } else {      currencyCode=EntityUtilProperties.getPropertyValue("general.properties","currency.uom.id.default","USD",delegator);    }    GenericValue originPostalAddress=shipmentRouteSegment.getRelatedOne("OriginPostalAddress",false);    if (UtilValidate.isEmpty(originPostalAddress)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentOriginPostalAddressNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));    } else     if (UtilValidate.isEmpty(originPostalAddress.getString("address1")) || UtilValidate.isEmpty(originPostalAddress.getString("city")) || UtilValidate.isEmpty(originPostalAddress.getString("postalCode"))|| UtilValidate.isEmpty(originPostalAddress.getString("countryGeoId"))) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentOriginPostalAddressNotComplete",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));    }    GenericValue originCountryGeo=originPostalAddress.getRelatedOne("CountryGeo",false);    if (UtilValidate.isEmpty(originCountryGeo)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentOriginCountryGeoNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));    }    String originAddressCountryCode=originCountryGeo.getString("geoCode");    String originAddressStateOrProvinceCode=null;    if (originAddressCountryCode.equals("CA") || originAddressCountryCode.equals("US")) {      if (UtilValidate.isEmpty(originPostalAddress.getString("stateProvinceGeoId"))) {        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentOriginStateProvinceGeoIdRequired",UtilMisc.toMap("contactMechId",originPostalAddress.getString("contactMechId"),"shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));      }      GenericValue stateProvinceGeo=EntityQuery.use(delegator).from("Geo").where("geoId",originPostalAddress.getString("stateProvinceGeoId")).cache().queryOne();      originAddressStateOrProvinceCode=stateProvinceGeo.getString("geoCode");    }    GenericValue originTelecomNumber=shipmentRouteSegment.getRelatedOne("OriginTelecomNumber",false);    if (UtilValidate.isEmpty(originTelecomNumber)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentOriginTelecomNumberNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));    }    String originContactPhoneNumber=originTelecomNumber.getString("areaCode") + originTelecomNumber.getString("contactNumber");    if (UtilValidate.isNotEmpty(originTelecomNumber.getString("countryCode")) && !(originAddressCountryCode.equals("CA") || originAddressCountryCode.equals("US"))) {      originContactPhoneNumber=originTelecomNumber.getString("countryCode") + originContactPhoneNumber;    }    originContactPhoneNumber=originContactPhoneNumber.replaceAll("[^+\\d]","");    GenericValue partyFrom=null;    GenericValue originFacility=shipment.getRelatedOne("OriginFacility",false);    if (UtilValidate.isEmpty(originFacility)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexOriginFacilityRequired",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));    } else {      partyFrom=originFacility.getRelatedOne("OwnerParty",false);      if (UtilValidate.isEmpty(partyFrom)) {        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexOwnerPartyRequired",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId,"facilityId",originFacility.getString("facilityId")),locale));      }    }    String originContactKey="PERSON".equals(partyFrom.getString("partyTypeId")) ? "OriginContactPersonName" : "OriginContactCompanyName";    String originContactName=PartyHelper.getPartyName(partyFrom,false);    if (UtilValidate.isEmpty(originContactName)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexPartyFromHasNoName",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));    }    GenericValue destinationPostalAddress=shipmentRouteSegment.getRelatedOne("DestPostalAddress",false);    if (UtilValidate.isEmpty(destinationPostalAddress)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentDestPostalAddressNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));    } else     if (UtilValidate.isEmpty(destinationPostalAddress.getString("address1")) || UtilValidate.isEmpty(destinationPostalAddress.getString("city")) || UtilValidate.isEmpty(destinationPostalAddress.getString("postalCode"))|| UtilValidate.isEmpty(destinationPostalAddress.getString("countryGeoId"))) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentDestPostalAddressIncomplete",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));    }    GenericValue destinationCountryGeo=destinationPostalAddress.getRelatedOne("CountryGeo",false);    if (UtilValidate.isEmpty(destinationCountryGeo)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentDestCountryGeoNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));    }    String destinationAddressCountryCode=destinationCountryGeo.getString("geoCode");    String destinationAddressStateOrProvinceCode=null;    if (destinationAddressCountryCode.equals("CA") || destinationAddressCountryCode.equals("US")) {      if (UtilValidate.isEmpty(destinationPostalAddress.getString("stateProvinceGeoId"))) {        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentDestStateProvinceGeoIdNotFound",UtilMisc.toMap("contactMechId",destinationPostalAddress.getString("contactMechId"),"shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));      }      GenericValue stateProvinceGeo=EntityQuery.use(delegator).from("Geo").where("geoId",destinationPostalAddress.getString("stateProvinceGeoId")).cache().queryOne();      destinationAddressStateOrProvinceCode=stateProvinceGeo.getString("geoCode");    }    GenericValue destinationTelecomNumber=shipmentRouteSegment.getRelatedOne("DestTelecomNumber",false);    if (UtilValidate.isEmpty(destinationTelecomNumber)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentRouteSegmentDestTelecomNumberNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));    }    String destinationContactPhoneNumber=destinationTelecomNumber.getString("areaCode") + destinationTelecomNumber.getString("contactNumber");    if (UtilValidate.isNotEmpty(destinationTelecomNumber.getString("countryCode")) && !(destinationAddressCountryCode.equals("CA") || destinationAddressCountryCode.equals("US"))) {      destinationContactPhoneNumber=destinationTelecomNumber.getString("countryCode") + destinationContactPhoneNumber;    }    destinationContactPhoneNumber=destinationContactPhoneNumber.replaceAll("[^+\\d]","");    String destinationPartyId=shipment.getString("partyIdTo");    if (UtilValidate.isEmpty(destinationPartyId)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexPartyToRequired",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));    }    GenericValue partyTo=EntityQuery.use(delegator).from("Party").where("partyId",destinationPartyId).queryOne();    String destinationContactKey="PERSON".equals(partyTo.getString("partyTypeId")) ? "DestinationContactPersonName" : "DestinationContactCompanyName";    String destinationContactName=PartyHelper.getPartyName(partyTo,false);    if (UtilValidate.isEmpty(destinationContactName)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexPartyToHasNoName",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));    }    String homeDeliveryType=null;    Timestamp homeDeliveryDate=null;    if ("GROUNDHOMEDELIVERY".equals(service)) {      homeDeliveryType=shipmentRouteSegment.getString("homeDeliveryType");      if (UtilValidate.isNotEmpty(homeDeliveryType)) {        if (!(homeDeliveryType.equals("DATECERTAIN") || homeDeliveryType.equals("EVENING") || homeDeliveryType.equals("APPOINTMENT"))) {          return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexHomeDeliveryTypeInvalid",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));        }      }      homeDeliveryDate=shipmentRouteSegment.getTimestamp("homeDeliveryDate");      if (UtilValidate.isEmpty(homeDeliveryDate)) {        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexHomeDeliveryDateRequired",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));      } else       if (homeDeliveryDate.before(UtilDateTime.nowTimestamp())) {        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexHomeDeliveryDateBeforeCurrentDate",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));      }    }    List<GenericValue> shipmentPackageRouteSegs=shipmentRouteSegment.getRelated("ShipmentPackageRouteSeg",null,UtilMisc.toList("+shipmentPackageSeqId"),false);    if (UtilValidate.isEmpty(shipmentPackageRouteSegs)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentPackageRouteSegsNotFound",UtilMisc.toMap("shipmentId",shipmentId,"shipmentRouteSegmentId",shipmentRouteSegmentId),locale));    }    if (shipmentPackageRouteSegs.size() != 1) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexMultiplePackagesNotSupported",locale));    }    shipRequestContext.put("AccountNumber",accountNumber);    shipRequestContext.put("MeterNumber",meterNumber);    shipRequestContext.put("CarrierCode",carrierCode);    shipRequestContext.put("ShipDate",UtilDateTime.nowTimestamp());    shipRequestContext.put("ShipTime",UtilDateTime.nowTimestamp());    shipRequestContext.put("DropoffType",dropoffType);    shipRequestContext.put("Service",service);    shipRequestContext.put("WeightUnits",weightUomId.equals("WT_kg") ? "KGS" : "LBS");    shipRequestContext.put("CurrencyCode",currencyCode);    shipRequestContext.put("PayorType","SENDER");    shipRequestContext.put(originContactKey,originContactName);    shipRequestContext.put("OriginContactPhoneNumber",originContactPhoneNumber);    shipRequestContext.put("OriginAddressLine1",originPostalAddress.getString("address1"));    if (UtilValidate.isNotEmpty(originPostalAddress.getString("address2"))) {      shipRequestContext.put("OriginAddressLine2",originPostalAddress.getString("address2"));    }    shipRequestContext.put("OriginAddressCity",originPostalAddress.getString("city"));    if (UtilValidate.isNotEmpty(originAddressStateOrProvinceCode)) {      shipRequestContext.put("OriginAddressStateOrProvinceCode",originAddressStateOrProvinceCode);    }    shipRequestContext.put("OriginAddressPostalCode",originPostalAddress.getString("postalCode"));    shipRequestContext.put("OriginAddressCountryCode",originAddressCountryCode);    shipRequestContext.put(destinationContactKey,destinationContactName);    shipRequestContext.put("DestinationContactPhoneNumber",destinationContactPhoneNumber);    shipRequestContext.put("DestinationAddressLine1",destinationPostalAddress.getString("address1"));    if (UtilValidate.isNotEmpty(destinationPostalAddress.getString("address2"))) {      shipRequestContext.put("DestinationAddressLine2",destinationPostalAddress.getString("address2"));    }    shipRequestContext.put("DestinationAddressCity",destinationPostalAddress.getString("city"));    if (UtilValidate.isNotEmpty(destinationAddressStateOrProvinceCode)) {      shipRequestContext.put("DestinationAddressStateOrProvinceCode",destinationAddressStateOrProvinceCode);    }    shipRequestContext.put("DestinationAddressPostalCode",destinationPostalAddress.getString("postalCode"));    shipRequestContext.put("DestinationAddressCountryCode",destinationAddressCountryCode);    shipRequestContext.put("LabelType","2DCOMMON");    shipRequestContext.put("LabelImageType",labelImageType);    if (UtilValidate.isNotEmpty(homeDeliveryType)) {      shipRequestContext.put("HomeDeliveryType",homeDeliveryType);    }    if (homeDeliveryDate != null) {      shipRequestContext.put("HomeDeliveryDate",homeDeliveryDate);    }    boolean hasBillingWeight=false;    BigDecimal billingWeight=shipmentRouteSegment.getBigDecimal("billingWeight");    String billingWeightUomId=shipmentRouteSegment.getString("billingWeightUomId");    if ((billingWeight != null) && (billingWeight.compareTo(BigDecimal.ZERO) > 0)) {      hasBillingWeight=true;      if (billingWeightUomId == null) {        Debug.logWarning("Shipment Route Segment missing billingWeightUomId in shipmentId " + shipmentId + ", assuming default shipment.fedex.weightUomId of "+ weightUomId+ " from "+ shipmentPropertiesFile,module);        billingWeightUomId=weightUomId;      }      if (!billingWeightUomId.equals(weightUomId)) {        Map<String,Object> results=dispatcher.runSync("convertUom",UtilMisc.<String,Object>toMap("uomId",billingWeightUomId,"uomIdTo",weightUomId,"originalValue",billingWeight));        if (ServiceUtil.isError(results) || (results.get("convertedValue") == null)) {          Debug.logWarning("Unable to convert billing weights for shipmentId " + shipmentId,module);          hasBillingWeight=false;        } else {          billingWeight=(BigDecimal)results.get("convertedValue");        }      }    }    for (    GenericValue shipmentPackageRouteSeg : shipmentPackageRouteSegs) {      GenericValue shipmentPackage=shipmentPackageRouteSeg.getRelatedOne("ShipmentPackage",false);      GenericValue shipmentBoxType=shipmentPackage.getRelatedOne("ShipmentBoxType",false);      String packaging=null;      if (UtilValidate.isEmpty(shipmentBoxType)) {        packaging=getShipmentGatewayConfigValue(delegator,shipmentGatewayConfigId,"defaultPackagingType",resource,"shipment.fedex.default.packagingType");        if (UtilValidate.isEmpty(packaging)) {          return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexPackingTypeNotConfigured",UtilMisc.toMap("shipmentPackageSeqId",shipmentPackage.getString("shipmentPackageSeqId"),"shipmentId",shipmentId),locale));        }        Debug.logWarning("Package " + shipmentPackage.getString("shipmentPackageSeqId") + " of shipment "+ shipmentId+ " has no packaging type set - defaulting to "+ packaging,module);      } else {        packaging=shipmentBoxType.getString("shipmentBoxTypeId");      }      GenericValue carrierShipmentBoxType=EntityQuery.use(delegator).from("CarrierShipmentBoxType").where("partyId","FEDEX","shipmentBoxTypeId",packaging).queryOne();      if (UtilValidate.isEmpty(carrierShipmentBoxType)) {        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexPackingTypeInvalid",UtilMisc.toMap("shipmentPackageSeqId",shipmentPackage.getString("shipmentPackageSeqId"),"shipmentId",shipmentId),locale));      } else       if (UtilValidate.isEmpty(carrierShipmentBoxType.getString("packagingTypeCode"))) {        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexPackingTypeMissing",UtilMisc.toMap("shipmentPackageSeqId",shipmentPackage.getString("shipmentPackageSeqId"),"shipmentId",shipmentId),locale));      }      packaging=carrierShipmentBoxType.getString("packagingTypeCode");      BigDecimal dimensionsLength=null;      BigDecimal dimensionsWidth=null;      BigDecimal dimensionsHeight=null;      if (shipmentBoxType != null) {        dimensionsLength=shipmentBoxType.getBigDecimal("boxLength");        dimensionsWidth=shipmentBoxType.getBigDecimal("boxWidth");        dimensionsHeight=shipmentBoxType.getBigDecimal("boxHeight");        String boxDimensionsUomId=null;        GenericValue boxDimensionsUom=shipmentBoxType.getRelatedOne("DimensionUom",false);        if (!UtilValidate.isEmpty(boxDimensionsUom)) {          boxDimensionsUomId=boxDimensionsUom.getString("uomId");        } else {          Debug.logWarning("Packaging type for package " + shipmentPackage.getString("shipmentPackageSeqId") + " of shipmentRouteSegment "+ shipmentRouteSegmentId+ " of shipment "+ shipmentId+ " is missing dimensionUomId, assuming default shipment.default.dimension.uom of "+ dimensionsUomId+ " from "+ shipmentPropertiesFile,module);          boxDimensionsUomId=dimensionsUomId;        }        if (dimensionsLength != null && dimensionsLength.compareTo(BigDecimal.ZERO) > 0) {          if (!boxDimensionsUomId.equals(dimensionsUomId)) {            Map<String,Object> results=dispatcher.runSync("convertUom",UtilMisc.<String,Object>toMap("uomId",boxDimensionsUomId,"uomIdTo",dimensionsUomId,"originalValue",dimensionsLength));            if (ServiceUtil.isError(results) || (results.get("convertedValue") == null)) {              Debug.logWarning("Unable to convert length for package " + shipmentPackage.getString("shipmentPackageSeqId") + " of shipmentRouteSegment "+ shipmentRouteSegmentId+ " of shipment "+ shipmentId,module);              dimensionsLength=null;            } else {              dimensionsLength=(BigDecimal)results.get("convertedValue");            }          }        }        if (dimensionsWidth != null && dimensionsWidth.compareTo(BigDecimal.ZERO) > 0) {          if (!boxDimensionsUomId.equals(dimensionsUomId)) {            Map<String,Object> results=dispatcher.runSync("convertUom",UtilMisc.<String,Object>toMap("uomId",boxDimensionsUomId,"uomIdTo",dimensionsUomId,"originalValue",dimensionsWidth));            if (ServiceUtil.isError(results) || (results.get("convertedValue") == null)) {              Debug.logWarning("Unable to convert width for package " + shipmentPackage.getString("shipmentPackageSeqId") + " of shipmentRouteSegment "+ shipmentRouteSegmentId+ " of shipment "+ shipmentId,module);              dimensionsWidth=null;            } else {              dimensionsWidth=(BigDecimal)results.get("convertedValue");            }          }        }        if (dimensionsHeight != null && dimensionsHeight.compareTo(BigDecimal.ZERO) > 0) {          if (!boxDimensionsUomId.equals(dimensionsUomId)) {            Map<String,Object> results=dispatcher.runSync("convertUom",UtilMisc.<String,Object>toMap("uomId",boxDimensionsUomId,"uomIdTo",dimensionsUomId,"originalValue",dimensionsHeight));            if (ServiceUtil.isError(results) || (results.get("convertedValue") == null)) {              Debug.logWarning("Unable to convert height for package " + shipmentPackage.getString("shipmentPackageSeqId") + " of shipmentRouteSegment "+ shipmentRouteSegmentId+ " of shipment "+ shipmentId,module);              dimensionsHeight=null;            } else {              dimensionsHeight=(BigDecimal)results.get("convertedValue");            }          }        }      }      BigDecimal packageWeight=null;      if (!hasBillingWeight) {        if (UtilValidate.isNotEmpty(shipmentPackage.getString("weight"))) {          packageWeight=shipmentPackage.getBigDecimal("weight");        } else {          try {            packageWeight=new BigDecimal(EntityUtilProperties.getPropertyValue(shipmentPropertiesFile,"shipment.default.weight.value",delegator));          } catch (          NumberFormatException ne) {            Debug.logWarning("Default shippable weight not configured (shipment.default.weight.value), assuming 1.0" + weightUomId,module);            packageWeight=BigDecimal.ONE;          }        }        String packageWeightUomId=shipmentPackage.getString("weightUomId");        if (UtilValidate.isEmpty(packageWeightUomId)) {          Debug.logWarning("Shipment Route Segment missing weightUomId in shipmentId " + shipmentId + ", assuming shipment.default.weight.uom of "+ weightUomId+ " from "+ shipmentPropertiesFile,module);          packageWeightUomId=weightUomId;        }        if (!packageWeightUomId.equals(weightUomId)) {          Map<String,Object> results=dispatcher.runSync("convertUom",UtilMisc.<String,Object>toMap("uomId",packageWeightUomId,"uomIdTo",weightUomId,"originalValue",packageWeight));          if (ServiceUtil.isError(results) || (results.get("convertedValue") == null)) {            return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexWeightOfPackageCannotBeConverted",UtilMisc.toMap("shipmentPackageSeqId",shipmentPackage.getString("shipmentPackageSeqId"),"shipmentRouteSegmentId",shipmentRouteSegmentId,"shipmentId",shipmentId),locale));          } else {            packageWeight=(BigDecimal)results.get("convertedValue");          }        }      }      BigDecimal weight=hasBillingWeight ? billingWeight : packageWeight;      if (weight == null || weight.compareTo(BigDecimal.ZERO) < 0) {        return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexWeightOfPackageNotAvailable",UtilMisc.toMap("shipmentPackageSeqId",shipmentPackage.getString("shipmentPackageSeqId"),"shipmentRouteSegmentId",shipmentRouteSegmentId,"shipmentId",shipmentId),locale));      }      shipRequestContext.put("CustomerReference",shipmentId + ":" + shipmentRouteSegmentId+ ":"+ shipmentPackage.getString("shipmentPackageSeqId"));      shipRequestContext.put("DropoffType",dropoffType);      shipRequestContext.put("Packaging",packaging);      if (UtilValidate.isNotEmpty(dimensionsUomId) && dimensionsLength != null && dimensionsLength.setScale(0,BigDecimal.ROUND_HALF_UP).compareTo(BigDecimal.ZERO) > 0 && dimensionsWidth != null && dimensionsWidth.setScale(0,BigDecimal.ROUND_HALF_UP).compareTo(BigDecimal.ZERO) > 0 && dimensionsHeight != null && dimensionsHeight.setScale(0,BigDecimal.ROUND_HALF_UP).compareTo(BigDecimal.ZERO) > 0) {        shipRequestContext.put("DimensionsUnits",dimensionsUomId.equals("LEN_in") ? "IN" : "CM");        shipRequestContext.put("DimensionsLength",dimensionsLength.setScale(0,BigDecimal.ROUND_HALF_UP).toString());        shipRequestContext.put("DimensionsWidth",dimensionsWidth.setScale(0,BigDecimal.ROUND_HALF_UP).toString());        shipRequestContext.put("DimensionsHeight",dimensionsHeight.setScale(0,BigDecimal.ROUND_HALF_UP).toString());      }      shipRequestContext.put("Weight",weight.setScale(1,BigDecimal.ROUND_UP).toString());    }    StringWriter outWriter=new StringWriter();    try {      FreeMarkerWorker.renderTemplateAtLocation(templateLocation,shipRequestContext,outWriter);    } catch (    Exception e) {      String errorMessage="Cannot confirm Fedex shipment: Failed to render Fedex XML Ship Request Template [" + templateLocation + "].";      Debug.logError(e,errorMessage,module);      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexShipmentTemplateError",UtilMisc.toMap("templateLocation",templateLocation,"errorString",e.getMessage()),locale));    }    String fDXShipRequestString=outWriter.toString();    String fDXShipReplyString=null;    try {      fDXShipReplyString=sendFedexRequest(fDXShipRequestString,delegator,shipmentGatewayConfigId,resource,locale);      if (Debug.verboseOn()) {        Debug.logVerbose(fDXShipReplyString,module);      }    } catch (    FedexConnectException e) {      String errorMessage="Error sending Fedex request for FDXShipRequest: ";      Debug.logError(e,errorMessage,module);      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexShipmentTemplateSendingError",UtilMisc.toMap("errorString",e.toString()),locale));    }    return handleFedexShipReply(fDXShipReplyString,shipmentRouteSegment,shipmentPackageRouteSegs,locale);  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexShipmentTemplateServiceError",UtilMisc.toMap("errorString",e.toString()),locale));  }catch (  GenericServiceException se) {    Debug.logError(se,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"FacilityShipmentFedexShipmentTemplateServiceError",UtilMisc.toMap("errorString",se.toString()),locale));  }}  }
class C{  public static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  public DateParser(){  this(DateFormat.getDateInstance(DateFormat.SHORT));}  }
class C{  private void doDraw(Graphics2D gc){  SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);  if (sgc != null)   sgc.setUseWhich(SelectionGraphics.Which.Last);  int x0=2;  int x1=getWidth() - 2;  int y0=getHeight() - bottomMargin;  int y1=topMargin;  if (x0 >= x1)   return;  Rectangle deviceBBox=new Rectangle(x0,y1,x1 - x0,y0 - y1);  if (getChartData().getSeriesNames().size() == 0)   return;  PhyloTree tree=getChartData().getTree();  if (tree == null || tree.getRoot() == null)   return;  double centerRadius=0.5;  double maxLevel=determineMaxLevel(getChartData().getTree()) + centerRadius;  double radiusFactor=Math.min((deviceBBox.getHeight() - 100) / 2,(deviceBBox.getWidth() - 100) / 2) / (maxLevel + 2);  radiusFactor*=ProgramProperties.get("RadialChartScalingFactor",1f);  Point2D center=new Point2D.Double(deviceBBox.getCenterX(),deviceBBox.getCenterY());  double maxValue=getMaxValue();  double topY;  if (scalingType == ChartViewer.ScalingType.PERCENT)   topY=101; else   if (scalingType == ChartViewer.ScalingType.LOG) {    topY=computeMaxYAxisValueLogScale(maxValue);    maxValue=Math.log(maxValue);  } else   if (scalingType == ChartViewer.ScalingType.SQRT) {    topY=Math.sqrt(maxValue);    maxValue=Math.sqrt(maxValue);  } else   topY=getMaxValue();  double barFactor=radiusFactor / topY;  gc.setFont(getFont(ChartViewer.FontKeys.ValuesFont.toString()));  gc.setColor(getFontColor(ChartViewer.FontKeys.ValuesFont.toString(),Color.DARK_GRAY));  areas.clear();  drawRec(DrawWhat.RegionsAndBars,gc,tree,center,radiusFactor,tree.getRoot(),centerRadius,maxLevel,0.0,360.0,barFactor,maxValue);  Ellipse2D disk=new Ellipse2D.Double(center.getX() - centerRadius * radiusFactor,center.getY() - centerRadius * radiusFactor,2 * centerRadius * radiusFactor,2 * centerRadius * radiusFactor);  gc.setColor(Color.WHITE);  gc.fill(disk);  gc.setColor(Color.LIGHT_GRAY);  gc.draw(disk);  if (isShowValues()) {    gc.setFont(getFont(ChartViewer.FontKeys.ValuesFont.toString()));    gc.setColor(getFontColor(ChartViewer.FontKeys.ValuesFont.toString(),Color.DARK_GRAY));    areas.clear();    drawRec(DrawWhat.Values,gc,tree,center,radiusFactor,tree.getRoot(),centerRadius,maxLevel,0.0,360.0,barFactor,maxValue);  }{    gc.setFont(getFont(ChartViewer.FontKeys.LegendFont.toString()));    gc.setColor(getFontColor(ChartViewer.FontKeys.LegendFont.toString(),Color.BLACK));    areas.clear();    drawRec(DrawWhat.Names,gc,tree,center,radiusFactor,tree.getRoot(),centerRadius,maxLevel,0.0,360.0,barFactor,maxValue);  }  if (getChartData().getChartSelection().getSelectedClasses().size() > 0) {    gc.setColor(ProgramProperties.SELECTION_COLOR);    areas.clear();    drawRec(DrawWhat.Selection,gc,tree,center,radiusFactor,tree.getRoot(),centerRadius,maxLevel,0.0,360.0,barFactor,maxValue);  }}  }
class C{  public void cancel(){synchronized (myTasks) {    myTasks.clear();    myTasks.notifyAll();  }}  }
class C{  public Variance(){  this(true);}  }
class C{  private void loadProperties(){  String property=System.getProperty("carbon.properties.filepath");  if (null == property) {    property=CarbonCommonConstants.CARBON_PROPERTIES_FILE_PATH;  }  File file=new File(property);  LOGGER.info("Property file path: " + file.getAbsolutePath());  FileInputStream fis=null;  try {    if (file.exists()) {      fis=new FileInputStream(file);      carbonProperties.load(fis);    }  } catch (  FileNotFoundException e) {    LOGGER.error("The file: " + CarbonCommonConstants.CARBON_PROPERTIES_FILE_PATH + " does not exist");  }catch (  IOException e) {    LOGGER.error("Error while reading the file: " + CarbonCommonConstants.CARBON_PROPERTIES_FILE_PATH);  } finally {    if (null != fis) {      try {        fis.close();      } catch (      IOException e) {        LOGGER.error("Error while closing the file stream for file: " + CarbonCommonConstants.CARBON_PROPERTIES_FILE_PATH);      }    }  }  print();}  }
class C{  public void toggleDividerVisibility(boolean show){  mStepDivider.setVisibility(show ? VISIBLE : GONE);}  }
class C{  public void relocateDoping(Player player,int targetSlot,int destinationSlot){  Pet pet=player.getPet();  if (pet == null || pet.getCommonData().getDopingBag() == null) {    return;  }  int[] scrollBag=pet.getCommonData().getDopingBag().getScrollsUsed();  int targetItem=scrollBag[targetSlot - 2];  if (destinationSlot - 2 > scrollBag.length - 1) {    pet.getCommonData().getDopingBag().setItem(targetItem,destinationSlot);    PacketSendUtility.sendPacket(player,new SM_PET(0,targetItem,destinationSlot));    pet.getCommonData().getDopingBag().setItem(0,targetSlot);    PacketSendUtility.sendPacket(player,new SM_PET(0,0,targetSlot));  } else {    pet.getCommonData().getDopingBag().setItem(scrollBag[destinationSlot - 2],targetSlot);    PacketSendUtility.sendPacket(player,new SM_PET(0,scrollBag[destinationSlot - 2],targetSlot));    pet.getCommonData().getDopingBag().setItem(targetItem,destinationSlot);    PacketSendUtility.sendPacket(player,new SM_PET(0,targetItem,destinationSlot));  }}  }
class C{  public static final void show(Window owner,SandboxBody body){  EditBodyDialog dialog=new EditBodyDialog(owner,body);  dialog.setLocationRelativeTo(owner);  dialog.setIconImage(Icons.EDIT_BODY.getImage());  dialog.setVisible(true);  if (!dialog.canceled) {    SandboxBody bodyChanges=dialog.body;    body.setOutlineColor(bodyChanges.getOutlineColor());    body.setFillColor(bodyChanges.getFillColor());    body.setActive(bodyChanges.isActive());    body.setAngularDamping(bodyChanges.getAngularDamping());    body.setAngularVelocity(bodyChanges.getAngularVelocity());    body.setAsleep(bodyChanges.isAsleep());    body.setAutoSleep(bodyChanges.isAutoSleepingEnabled());    body.setBullet(bodyChanges.isBullet());    body.setGravityScale(bodyChanges.getGravityScale());    body.setLinearDamping(bodyChanges.getLinearDamping());    body.setMass(new Mass(bodyChanges.getMass()));    body.setName(bodyChanges.getName());    body.setLinearVelocity(bodyChanges.getLinearVelocity().copy());    body.setMassExplicit(bodyChanges.isMassExplicit());    Transform transform=body.getTransform();    transform.setRotation(dialog.pnlTransform.getRotation());    transform.setTranslation(dialog.pnlTransform.getTranslation());  }}  }
class C{  public void closeServer(ServerInfo server){  if (server.sock == null || this.keep_alive) {    return;  }  try {    server.sock.close();    server.sock=null;  } catch (  IOException ex) {    System.err.println("close socket error: " + ex.getMessage());  }}  }
class C{  public static <T>IStoredList<T> createList(boolean reuseLocks){  return createStoredList(false,reuseLocks);}  }
class C{  public boolean isEmpty(){  return state.equals(EMPTY);}  }
class C{  public float angleBetween(Vector3f otherVector){  float dotProduct=dot(otherVector);  float angle=FastMath.acos(dotProduct);  return angle;}  }
class C{  public static void appendBlocks(DAAHeader header,BlockType[] types,byte[][] blocks,int[] sizes) throws IOException {  try (OutputStream outs=new BufferedOutputStream(new FileOutputStream(header.getFileName(),true))){    for (int i=0; i < blocks.length; i++) {      final byte[] bytes=blocks[i];      final int size=sizes[i];      final int index=header.getFirstAvailableBlockIndex();      header.setBlockTypeRank(index,BlockType.rank(types[i]));      header.setBlockSize(index,size);      outs.write(bytes,0,size);    }  }   header.save();}  }
class C{  private void load(String fileName) throws IOException, MaryConfigurationException {  DataInputStream dis=null;  try {    dis=new DataInputStream(new BufferedInputStream(new FileInputStream(fileName)));  } catch (  FileNotFoundException e) {    throw new MaryConfigurationException("File [" + fileName + "] was not found.");  }  hdr=new MaryHeader(dis);  if (hdr.getType() != MaryHeader.LISTENERFEATS) {    throw new MaryConfigurationException("File [" + fileName + "] is not a valid Mary Units file.");  }  numberOfUnits=dis.readInt();  if (numberOfUnits < 0) {    throw new MaryConfigurationException("File [" + fileName + "] has a negative number of units. Aborting.");  }  LF0VECTORSIZE=dis.readInt();  MGCVECTORSIZE=dis.readInt();  STRVECTORSIZE=dis.readInt();  if (LF0VECTORSIZE != 1 || MGCVECTORSIZE <= 0 || STRVECTORSIZE <= 0) {    throw new MaryConfigurationException("File [" + fileName + "] has no proper feature vector size information... Aborting.");  }  logf0=new double[numberOfUnits][];  voiced=new boolean[numberOfUnits][];  mgc=new double[numberOfUnits][][];  strengths=new double[numberOfUnits][][];  numberOfFrames=new int[numberOfUnits];  for (int i=0; i < numberOfUnits; i++) {    numberOfFrames[i]=dis.readInt();    int checkLF0Size=dis.readInt();    assert checkLF0Size == (numberOfFrames[i] * LF0VECTORSIZE) : fileName + " feature file do not has proper format";    logf0[i]=new double[numberOfFrames[i]];    voiced[i]=new boolean[numberOfFrames[i]];    for (int j=0; j < numberOfFrames[i]; j++) {      logf0[i][j]=dis.readFloat();      voiced[i][j]=logf0[i][j] >= 0;    }    int checkMGCSize=dis.readInt();    assert checkMGCSize == (numberOfFrames[i] * this.MGCVECTORSIZE) : fileName + " feature file do not has proper format";    mgc[i]=new double[numberOfFrames[i]][MGCVECTORSIZE];    for (int j=0; j < numberOfFrames[i]; j++) {      for (int k=0; k < MGCVECTORSIZE; k++) {        mgc[i][j][k]=dis.readFloat();      }    }    int checkSTRSize=dis.readInt();    assert checkSTRSize == (numberOfFrames[i] * this.STRVECTORSIZE) : fileName + " feature file do not has proper format";    strengths[i]=new double[numberOfFrames[i]][STRVECTORSIZE];    for (int j=0; j < numberOfFrames[i]; j++) {      for (int k=0; k < STRVECTORSIZE; k++) {        strengths[i][j][k]=dis.readFloat();      }    }  }}  }
class C{  public static boolean isStoreInventoryAvailable(String productStoreId,ProductConfigWrapper productConfig,BigDecimal quantity,Delegator delegator,LocalDispatcher dispatcher){  GenericValue productStore=getProductStore(productStoreId,delegator);  if (productStore == null) {    Debug.logWarning("No ProductStore found with id " + productStoreId + ", returning false for inventory available check",module);    return false;  }  if ("N".equals(productStore.getString("checkInventory"))) {    if (Debug.verboseOn())     Debug.logVerbose("ProductStore with id " + productStoreId + ", is set to NOT check inventory, returning true for inventory available check",module);    return true;  }  boolean isInventoryAvailable=false;  if ("Y".equals(productStore.getString("oneInventoryFacility"))) {    String inventoryFacilityId=productStore.getString("inventoryFacilityId");    if (UtilValidate.isEmpty(inventoryFacilityId)) {      Debug.logWarning("ProductStore with id " + productStoreId + " has Y for oneInventoryFacility but inventoryFacilityId is empty, returning false for inventory check",module);      return false;    }    return ProductWorker.isProductInventoryAvailableByFacility(productConfig,inventoryFacilityId,quantity,dispatcher);  } else {    GenericValue product=productConfig.getProduct();    List<GenericValue> productFacilities=null;    try {      productFacilities=product.getRelated("ProductFacility",null,null,true);    } catch (    GenericEntityException e) {      Debug.logWarning(e,"Error invoking getRelatedCache in isCatalogInventoryAvailable",module);      return false;    }    if (UtilValidate.isNotEmpty(productFacilities)) {      for (      GenericValue pfValue : productFacilities) {        isInventoryAvailable=ProductWorker.isProductInventoryAvailableByFacility(productConfig,pfValue.getString("facilityId"),quantity,dispatcher);        if (isInventoryAvailable == true) {          return isInventoryAvailable;        }      }    }    return false;  }}  }
class C{  @Override public void endAttlist(Augmentations augs) throws XNIException {}  }
class C{  @Override public void externalGraphicValueUpdated(){  setCachedExpression(generateExpression());  checkSymbolIsValid();  FieldConfigBase parent=getParent();  if (parent != null) {    parent.valueUpdated();  }}  }
class C{  protected void ordinalLayout(VisualTable labels){  ObjectRangeModel model=(ObjectRangeModel)m_model;  double span=m_hi - m_lo;  double pspan=m_prevhi - m_prevlo;  Rectangle2D b=getLayoutBounds();  double breadth=getBreadth(b);  double scale=breadth / span;  int step=getOrdinalStep(span,scale);  if (step <= 0)   step=1;  Iterator iter=labels.tuples();  while (iter.hasNext()) {    VisualItem item=(VisualItem)iter.next();    reset(item);    double v=item.getDouble(VALUE);    double x=span == 0 ? 0.5 * breadth : ((v - m_lo) / span) * breadth;    set(item,x,b);  }  Index index=labels.index(VALUE);  for (int r, v=(int)m_lo; v <= m_hi; v+=step) {    if ((r=index.get((double)v)) >= 0) {      VisualItem item=labels.getItem(r);      item.set(VisualItem.LABEL,model.getObject(v).toString());      item.setVisible(true);      item.setEndVisible(true);    } else {      VisualItem item=labels.addItem();      item.set(VisualItem.LABEL,model.getObject(v).toString());      item.setDouble(VisualItem.VALUE,v);      double f=pspan == 0 ? 0.5 : ((v - m_prevlo) / pspan);      if (f <= 0 || f >= 1.0)       item.setStartVisible(true);      set(item,f * breadth,b);      set(item,(v - m_lo) * breadth / span,b);    }  }}  }
class C{  private static void printUsage(){  System.err.println("Syntax:\nsummaryGaussNormEvaluator -do=(char|word|all) [-summaryDir=summaries/] [-modelDir=models/]" + "[-wordMin=#] [-wordMax=#] [-wordDist=#] [-charMin=#] [-charMax=#] [-charDist=#] [-o=outFile] [-t=#]" + "[-s] [-use=o|d] [-progress] [-lowmem]");  System.err.println("wordMin=#\tMin word n-gram size.\nwordMax=#\tMax word n-gram size.\nwordDist=#\tWord n-gram window\n" + "charMin=#\tMin char n-gram size.\ncharMax=#\tMax char n-gram size.\ncharDist=#\tChar n-gram window.\n" + "-o=outFile\tThe file to output data. Default is stdout.\n-t=#\tNumber of threads. Defaults to 2.\n"+ "-s\tFor non-verbose output (silent).\n"+ "-progress\tFor progress indication (even in silent mode).\n"+ "-use=o|d\tUse [o]ccurences or average [d]istance to assign weights to the graph. Defaults to o.\n"+ "-lowmem\tDo not use caching for documents. Less memory used, more time required.\n"+ "-?\tShow this screen.");}  }
class C{  public void onDespawn(){}  }
class C{  @Override public void xmlDecl(String version,String encoding,String standalone,Augmentations augs) throws XNIException {}  }
class C{  @Override public void close(){}  }
class C{  public double calcAngle(Entry p1,Entry p2){  float dx=p2.getXIndex() - p1.getXIndex();  float dy=p2.getVal() - p1.getVal();  return Math.atan2(dy,dx) * 180.0 / Math.PI;}  }
class C{  public NaturalRanking(){  super();  tiesStrategy=DEFAULT_TIES_STRATEGY;  nanStrategy=DEFAULT_NAN_STRATEGY;  randomData=null;}  }
class C{  public static Style green(){  final Style style=new Style();  style.color=PaletteUtils.getSolidColor(PaletteUtils.MATERIAL_GREEN);  return style;}  }
class C{  public void register(K key,V value){  register(availableIds.nextClearBit(0),key,value);}  }
class C{  public void addGyms(Collection<FortData> gyms){  if (gyms == null || gyms.isEmpty()) {    return;  }  complete=true;  this.gyms.addAll(gyms);}  }
class C{  public FileAlterationMonitor(long interval){  this.interval=interval;}  }
class C{  public void saveRootCertificateAsPemFile(File file){  String pemEncodedCertificate=securityProviderTool.encodeCertificateAsPem(generatedCertificateAndKey.get().getCertificate());  EncryptionUtil.writePemStringToFile(file,pemEncodedCertificate);}  }
class C{  public static Calendar toCalendar(Date date,TimeZone timeZone,Locale locale){  Calendar cal=getCalendarInstance(timeZone,locale);  if (date != null) {    cal.setTime(date);  }  return cal;}  }
class C{  public MessagesGetDialogsQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public FileWriterWithEncoding(String filename,Charset encoding) throws IOException {  this(new File(filename),encoding,false);}  }
class C{  private boolean resizeAndSaveImage(int maxWidth,int maxHeight) throws IOException {  boolean saved=false;  String encodeURL=DiskCacheUtils.encodeURL(uri,maxWidth,maxHeight);  File targetFile=configuration.diskCache.get(uri);  if (targetFile != null && targetFile.exists()) {    ImageSize targetImageSize=new ImageSize(maxWidth,maxHeight);    DisplayImageOptions specialOptions=new DisplayImageOptions.Builder().cloneFrom(options).imageScaleType(ImageScaleType.IN_SAMPLE_INT).build();    ImageDecodingInfo decodingInfo=new ImageDecodingInfo(memoryCacheKey,Scheme.FILE.wrap(targetFile.getAbsolutePath()),Scheme.FILE.wrap(targetFile.getAbsolutePath()),targetImageSize,ViewScaleType.FIT_INSIDE,getDownloader(),specialOptions);    Bitmap bmp=decoder.decode(decodingInfo);    if (bmp != null && configuration.processorForDiskCache != null) {      L.d(LOG_PROCESS_IMAGE_BEFORE_CACHE_ON_DISK,memoryCacheKey);      bmp=configuration.processorForDiskCache.process(bmp);      if (bmp == null) {        L.e(ERROR_PROCESSOR_FOR_DISK_CACHE_NULL,memoryCacheKey);      }    }    if (bmp != null) {      saved=configuration.diskCache.save(encodeURL,bmp);      bmp.recycle();    }    if (saved) {      targetFile.delete();    }  }  return saved;}  }
class C{  public Door(final TreeSpecies species,BlockFace face,boolean isOpen){  this(getWoodDoorOfSpecies(species),face,isOpen);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GATHER_FAIL_2_GATHER(String value0){  return new SM_SYSTEM_MESSAGE(1330022,value0);}  }
class C{  public static boolean hasPermission(Security security,GenericValue userLogin,GenericValue orderHeader){  if (userLogin == null || orderHeader == null)   return false;  if (security.hasEntityPermission("ORDERMGR","_VIEW",userLogin)) {    return true;  } else   if (security.hasEntityPermission("ORDERMGR","_ROLEVIEW",userLogin)) {    List<GenericValue> orderRoles=null;    try {      orderRoles=orderHeader.getRelated("OrderRole",UtilMisc.toMap("partyId",userLogin.getString("partyId")),null,false);    } catch (    GenericEntityException e) {      Debug.logError(e,"Cannot get OrderRole from OrderHeader",module);    }    if (UtilValidate.isNotEmpty(orderRoles)) {      return true;    }  }  return false;}  }
class C{  @Override protected LocalTypeSet entryInitialFlow(){  LocalTypeSet ret=(LocalTypeSet)emptySet.clone();  return ret;}  }
class C{  public void writeHeader(String creator,BlastMode blastMode,String[] matchClassificationNames,boolean isPairedReads) throws IOException {  final HeaderSectionRMA6 headerSection=getHeaderSectionRMA6();  headerSection.setCreationDate(System.currentTimeMillis());  headerSection.setCreator(creator);  headerSection.setBlastMode(blastMode);  headerSection.setMatchClassNames(matchClassificationNames);  headerSection.setIsPairedReads(isPairedReads);  this.isPairedReads=isPairedReads;  numberOfClassificationNames=matchClassificationNames.length;  File file=new File(fileName);  if (file.exists() && !file.delete())   throw new IOException("Can't delete existing file: " + file);  readerWriter=new OutputWriter(new File(fileName));  readerWriter.setUseCompression(useCompression);  getFooterSectionRMA6().setStartHeaderSection(readerWriter.getPosition());  getHeaderSectionRMA6().write(readerWriter);  getFooterSectionRMA6().setEndHeaderSection(readerWriter.getPosition());}  }
class C{  public void log10(final double[] operand,final int operandOffset,final double[] result,final int resultOffset){  double[] function=new double[1 + order];  function[0]=FastMath.log10(operand[operandOffset]);  if (order > 0) {    double inv=1.0 / operand[operandOffset];    double xk=inv / FastMath.log(10.0);    for (int i=1; i <= order; ++i) {      function[i]=xk;      xk*=-i * inv;    }  }  compose(operand,operandOffset,function,result,resultOffset);}  }
class C{  public void parseFileInput(){  builder.setDebugMode(ApplicationManager.getApplication().isUnitTestMode());  while (!builder.eof()) {    if (matches(TokenKind.NEWLINE)) {      continue;    }    parseTopLevelStatement();  }}  }
class C{  public static Pair<Float,Float> computeAverageNandK(LinkedList<Pair<Number,Number>> values){  if (values.size() == 0)   return new Pair<>(0f,0f);  double n=0;  double k=0;  for (  Pair<Number,Number> pair : values) {    n+=pair.get1().doubleValue();    k+=pair.get2().doubleValue();  }  return new Pair<>((float)(n / values.size()),(float)(k / values.size()));}  }
class C{  private void initModel(Activity a,int type){  this.photosModel=new PhotosObject(a,type);  this.loadModel=new LoadObject(LoadObject.LOADING_STATE);  this.scrollModel=new ScrollObject();}  }
class C{  protected long generateAsyncAfter(String asyncAfterString) throws BadApiRequestException {  try {    return asyncAfterString.equals(SYNCHRONOUS_REQUEST_FLAG) ? SYNCHRONOUS_ASYNC_AFTER_VALUE : asyncAfterString.equals(ASYNCHRONOUS_REQUEST_FLAG) ? ASYNCHRONOUS_ASYNC_AFTER_VALUE : Long.parseLong(asyncAfterString);  } catch (  NumberFormatException e) {    LOG.debug(INVALID_ASYNC_AFTER.logFormat(asyncAfterString),e);    throw new BadApiRequestException(INVALID_ASYNC_AFTER.format(asyncAfterString),e);  }}  }
class C{  public NameFileFilter(String name,IOCase caseSensitivity){  if (name == null) {    throw new IllegalArgumentException("The wildcard must not be null");  }  this.names=new String[]{name};  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  @Override public boolean isDeprecated(){  return proto.getOptions().getDeprecated();}  }
class C{  public AudioGetQuery(VkApiClient client,UserActor actor){  super(client,"audio.get",GetResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  static float rotateX(float pX,float pY,float cX,float cY,float angleInDegrees){  double angle=Math.toRadians(angleInDegrees);  return (float)(Math.cos(angle) * (pX - cX) - Math.sin(angle) * (pY - cY) + cX);}  }
class C{  private ThrowableSet add(Set<RefLikeType> addedExceptions){  Set<RefLikeType> resultSet=new HashSet<RefLikeType>(this.exceptionsIncluded);  int changes=0;  FastHierarchy hierarchy=Scene.v().getOrMakeFastHierarchy();  for (  RefLikeType newType : addedExceptions) {    if (!resultSet.contains(newType)) {      boolean addNewType=true;      if (newType instanceof RefType) {        for (        RefLikeType incumbentType : resultSet) {          if (incumbentType instanceof RefType) {            if (newType == incumbentType) {              throw new IllegalStateException("ThrowableSet.add(Set): resultSet.contains() failed to screen duplicate RefType " + newType);            }          } else           if (incumbentType instanceof AnySubType) {            RefType incumbentBase=((AnySubType)incumbentType).getBase();            if (hierarchy.canStoreType(newType,incumbentBase)) {              addNewType=false;            }          } else {            throw new IllegalStateException("ThrowableSet.add(Set): incumbent Set element " + incumbentType + " is neither a RefType nor an AnySubType.");          }        }      } else       if (newType instanceof AnySubType) {        RefType newBase=((AnySubType)newType).getBase();        for (Iterator<RefLikeType> j=resultSet.iterator(); j.hasNext(); ) {          RefLikeType incumbentType=(RefLikeType)j.next();          if (incumbentType instanceof RefType) {            RefType incumbentBase=(RefType)incumbentType;            if (hierarchy.canStoreType(incumbentBase,newBase)) {              j.remove();              changes++;            }          } else           if (incumbentType instanceof AnySubType) {            RefType incumbentBase=((AnySubType)incumbentType).getBase();            if (newBase == incumbentBase) {              throw new IllegalStateException("ThrowableSet.add(Set): resultSet.contains() failed to screen duplicate AnySubType " + newBase);            } else             if (hierarchy.canStoreType(incumbentBase,newBase)) {              j.remove();              changes++;            } else             if (hierarchy.canStoreType(newBase,incumbentBase)) {              addNewType=false;            }          } else {            throw new IllegalStateException("ThrowableSet.add(Set): old Set element " + incumbentType + " is neither a RefType nor an AnySubType.");          }        }      } else {        throw new IllegalArgumentException("ThrowableSet.add(Set): new Set element " + newType + " is neither a RefType nor an AnySubType.");      }      if (addNewType) {        changes++;        resultSet.add(newType);      }    }  }  ThrowableSet result=null;  if (changes > 0) {    result=Manager.v().registerSetIfNew(resultSet,this.exceptionsExcluded);  } else {    result=this;  }  return result;}  }
class C{  public SynchronousJFXFileChooser(Supplier<FileChooser> fileChooserFactory){  this.fileChooserFactory=fileChooserFactory;}  }
class C{  public DHCPMessage(InetAddress inServername){  initialize();  this.destination_IP=inServername;  this.gPort=SERVER_PORT;}  }
class C{  public Session store(){  long expired=Global.getLong("session.alive",X.AWEEK);  if (expired > 0) {    expired=System.currentTimeMillis() + expired;  } else {    expired=-1;  }  return store(expired);}  }
class C{  public VideoEditCommentQuery message(String value){  return unsafeParam("message",value);}  }
class C{  public ObjectFactory(){}  }
class C{  public void init$Children(){  children=new ASTNode[4];  setChild(new List(),1);  setChild(new Opt(),2);  setChild(new List(),3);}  }
class C{  @Override public boolean accept(File directory,String fileName){  if (fileName.startsWith("!!!"))   return true;  if (!super.accept(directory,fileName))   return false;  String firstLine=Basic.getFirstLineFromFile(new File(fileName));  return firstLine != null && firstLine.startsWith("BLASTX");}  }
class C{  public DiskBasedCache(File rootDirectory){  this(rootDirectory,DEFAULT_DISK_USAGE_BYTES);}  }
class C{  public EnterMonitorInst newEnterMonitorInst(){  return new BEnterMonitorInst();}  }
class C{  public void addTypeArgument(Access node){  List<Access> list=(parent == null || state == null) ? getTypeArgumentListNoTransform() : getTypeArgumentList();  list.addChild(node);}  }
class C{  public ImageRecordReader(int height,int width,PathLabelGenerator labelGenerator){  super(height,width,1,labelGenerator);}  }
class C{  private void sanitizeMediaStatusMessage(JSONObject object) throws JSONException {  object.put("sessionId",mSessionId);  JSONArray mediaStatus=object.getJSONArray("status");  for (int i=0; i < mediaStatus.length(); ++i) {    JSONObject status=mediaStatus.getJSONObject(i);    status.put("sessionId",mSessionId);    if (!status.has("supportedMediaCommands"))     continue;    JSONArray commands=new JSONArray();    int bitfieldCommands=status.getInt("supportedMediaCommands");    for (int j=0; j < 4; ++j) {      if ((bitfieldCommands & (1 << j)) != 0) {        commands.put(MEDIA_SUPPORTED_COMMANDS[j]);      }    }    status.put("supportedMediaCommands",commands);  }}  }
class C{  private static void printUsage(){  System.err.println("Syntax:\nsummaryEvaluator [-summaryDir=summaries/] [-modelDir=models/]" + "[-nMin=#] [-nMax=#] [-dist=#] [-t=#]" + "[-s] [-use=o|d] [-progress] [-docClass=...] [-compClass=...]");  System.err.println("nMin=#\tMin n-gram size.\nnMax=#\tMax n-gram size.\n" + "dist=#\tN-gram window.\n" + "-o=outFile\tThe file to output data. Default is stdout.\n"+ "-t=#\tNumber of threads. Defaults to number of available processors declared by system.\n"+ "-s\tFor non-verbose output (silent).\n"+ "-progress\tFor progress indication (even in silent mode).\n"+ "-docClass=...\tA java class identifier to use as Document class. "+ "Defaults to jinsect.documentModel.NGramDocument \n"+ "-compClass=...\tA java class identifier to use as Comparator class. "+ "Defaults to jinsect.documentModel.StandardDocumentComparator \n"+ "-?\tShow this screen.");}  }
class C{  public List<File> showOpenMultipleDialog(){  return showDialog(null);}  }
class C{  public AemInsertWindow openInsertWindowByContextMenu(){  wait.withTimeout(Timeouts.BIG).until(null,2);  return insertWindow.waitToBeDisplayed();}  }
class C{  public boolean containsValue(long val){  byte[] states=_states;  long[] vals=_values;  for (int i=vals.length; i-- > 0; ) {    if (states[i] == FULL && val == vals[i]) {      return true;    }  }  return false;}  }
class C{  protected final Event<Boolean> updateFromSource(final T dataTag,final SourceDataTagValue sourceDataTagValue){  long eventTime=0;  Boolean updated=Boolean.FALSE;  if (sourceDataTagValue != null) {    if (!filterout(dataTag,sourceDataTagValue)) {      if (sourceDataTagValue.getValue() == null) {        if (sourceDataTagValue.isValid()) {          if (LOGGER.isDebugEnabled()) {            LOGGER.debug("Null value received from source for datatag " + sourceDataTagValue.getId() + " - invalidating with quality UNKNOWN_REASON");          }          invalidateQuietly(dataTag,TagQualityStatus.UNKNOWN_REASON,"Null value received from DAQ",new Timestamp(System.currentTimeMillis()));        } else {          DataTagQuality newTagQuality=qualityConverter.convert(sourceDataTagValue.getQuality());          dataTagCacheObjectFacade.setQuality(dataTag,newTagQuality,new Timestamp(System.currentTimeMillis()));        }      } else {        if (sourceDataTagValue.isValid()) {          updateAndValidateQuietly(dataTag,sourceDataTagValue.getValue(),sourceDataTagValue.getValueDescription(),sourceDataTagValue.getTimestamp(),sourceDataTagValue.getDaqTimestamp(),new Timestamp(System.currentTimeMillis()));        } else {          DataTagQuality newTagQuality=qualityConverter.convert(sourceDataTagValue.getQuality());          dataTagCacheObjectFacade.updateAndInvalidate(dataTag,sourceDataTagValue.getValue(),sourceDataTagValue.getValueDescription(),sourceDataTagValue.getTimestamp(),sourceDataTagValue.getDaqTimestamp(),new Timestamp(System.currentTimeMillis()),newTagQuality);        }      }      updated=true;    } else {      if (LOGGER.isTraceEnabled()) {        LOGGER.trace("Filtering out source update for tag " + dataTag.getId());      }    }  } else {    LOGGER.error("Attempting to update a dataTag with a null source value - ignoring update.");  }  eventTime=dataTag.getCacheTimestamp().getTime();  return new Event<Boolean>(eventTime,updated);}  }
class C{  public AlreadySpawnedException(Throwable cause){  super(cause);}  }
class C{  public static ProbeItemDescriptor discreteLineItem(String name,String description,ItemValueFormatter formatter,double dataFactor,long minValue,long maxValue){  return discreteOutlineItem(name,description,formatter,dataFactor,minValue,maxValue,DEFAULT_LINE_WIDTH,DEFAULT_COLOR,null);}  }
class C{  public List<ConfigurationEntry> build(){  return config;}  }
class C{  private List<ResourceState> sortResourcesByImportance(Set<ResourceState> resourcesStates){  List<ResourceState> sortedResources=resourcesStates.stream().sorted(null).collect(Collectors.toList());  return sortedResources;}  }
class C{  public Stereo2Mono(){  this(AudioPlayer.STEREO);}  }
class C{  @Override public final void writeFloat(float v) throws IOException {  writeInt(Float.floatToIntBits(v));}  }
class C{  @Override public void close(){  try {    raf.close();    System.err.println("Closing file: " + file.getName() + " ("+ pages+ "/"+ data.length+ " pages)");  } catch (  IOException e) {    Basic.caught(e);  }}  }
class C{  public static Color ensureContrast(Color c1,Color c2){  double y1=getColorBrightness(c1);  double y2=getColorBrightness(c2);  if (abs(y1 - y2) < 125.0) {    if (y2 < 128.0) {      c1=setColorBrightness(c1,y2 + 125.0);    } else {      c1=setColorBrightness(c1,y2 - 125.0);    }  }  return c1;}  }
class C{  protected void buttonPressed(int buttonId){  if (buttonId == REPLACE_ID) {    try {      input.replaceLocalWithCurrentlySelectedRevision();    } catch (    CoreException e) {      handle(e);    }    buttonId=IDialogConstants.OK_ID;  }  super.buttonPressed(buttonId);}  }
class C{  protected void analyzePixels(){  int len=pixels.length;  int nPix=len / 3;  indexedPixels=new byte[nPix];  NeuQuant nq=new NeuQuant(pixels,len,sample);  colorTab=nq.process();  for (int i=0; i < colorTab.length; i+=3) {    byte temp=colorTab[i];    colorTab[i]=colorTab[i + 2];    colorTab[i + 2]=temp;    usedEntry[i / 3]=false;  }  int k=0;  for (int i=0; i < nPix; i++) {    int index=nq.map(pixels[k++] & 0xff,pixels[k++] & 0xff,pixels[k++] & 0xff);    usedEntry[index]=true;    indexedPixels[i]=(byte)index;  }  pixels=null;  colorDepth=8;  palSize=7;  if (transparent != -1) {    transIndex=findClosest(transparent);  }}  }
class C{  public AppsSendRequestQuery type(AppsSendRequestType value){  return unsafeParam("type",value);}  }
class C{  public InvalidMidiDataException(String message){  super(message);}  }
class C{  AlignmentPatternFinder(BitMatrix image,int startX,int startY,int width,int height,float moduleSize,ResultPointCallback resultPointCallback){  this.image=image;  this.possibleCenters=new ArrayList<>(5);  this.startX=startX;  this.startY=startY;  this.width=width;  this.height=height;  this.moduleSize=moduleSize;  this.crossCheckStateCount=new int[3];  this.resultPointCallback=resultPointCallback;}  }
class C{  public int size(){  return m_map.size();}  }
class C{  public void delete(App app){  appDao.unIndex(app);  appDao.delete(app.getId());  configManager.deleteByAppId(app.getId());  configDao.unIndexByAppId(app.getId());  configDao.deleteBindOfApp(app.getId());}  }
class C{  private boolean gzipped(String contentEncoding){  return contentEncoding != null && contentEncoding.toLowerCase().contains("gzip");}  }
class C{  public int timePassed(){  final long time=AnimationUtils.currentAnimationTimeMillis();  final long startTime=Math.min(mScrollerX.mStartTime,mScrollerY.mStartTime);  return (int)(time - startTime);}  }
class C{  public VerifyFaceAction verifyFace(String faceId1,String faceId2){  return new VerifyFaceAction(cognitiveContext,faceId1,faceId2);}  }
class C{  public double reduce(String numericColumnName,NumericReduceFunction function){  Column column=column(numericColumnName);  return function.reduce(column.subset(rowMap).toDoubleArray());}  }
class C{  public PhotosGetAllQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_BUDDYLIST_REMOVE_CHARACTER(String value0){  return new SM_SYSTEM_MESSAGE(1300888,value0);}  }
class C{  public CounterTimeDeadbandActivator(final int numberOfCounters,final long checkInterval,final int maxTagsPerTime,final int deactivationNumberOfTags,final int timeDeadbandTime){  this.numberOfCounters=numberOfCounters;  this.maxTagsPerTime=maxTagsPerTime;  this.deactivationNumberOfTags=deactivationNumberOfTags;  this.timeDeadbandTime=timeDeadbandTime;  timer=new Timer("CounterTimeDeadbandTimer",true);  timer.scheduleAtFixedRate(this,0,checkInterval);}  }
class C{  public EventDescriptor(Long eventID){  this(null,eventID);}  }
class C{  public void add(String expr,FontAction f){  Predicate p=(Predicate)ExpressionParser.parse(expr);  super.add(p,f);}  }
class C{  public static void moveDirectoryToDirectory(File src,File destDir,boolean createDestDir) throws IOException {  if (src == null) {    throw new NullPointerException("Source must not be null");  }  if (destDir == null) {    throw new NullPointerException("Destination directory must not be null");  }  if (!destDir.exists() && createDestDir) {    destDir.mkdirs();  }  if (!destDir.exists()) {    throw new FileNotFoundException("Destination directory '" + destDir + "' does not exist [createDestDir="+ createDestDir+ "]");  }  if (!destDir.isDirectory()) {    throw new IOException("Destination '" + destDir + "' is not a directory");  }  moveDirectory(src,new File(destDir,src.getName()));}  }
class C{  public static <T>T checkNotNull(final T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  public static String toString(URL url) throws IOException {  return toString(url,Charset.defaultCharset());}  }
class C{  public void removeViewModel(int key,Context context){  getFragment(context).remove(key);}  }
class C{  @Override public final String readMapleAsciiString(){  return readAsciiString(readShort());}  }
class C{  public static boolean approxEquals(S2Point a,S2Point b,double maxError){  return a.angle(b) <= maxError;}  }
class C{  public boolean isRouting(){  return routing;}  }
class C{  protected static Dfp[] logInternal(final Dfp a[]){  Dfp t=a[0].divide(4).add(a[1].divide(4));  Dfp x=t.add(a[0].newInstance("-0.25")).divide(t.add(a[0].newInstance("0.25")));  Dfp y=new Dfp(x);  Dfp num=new Dfp(x);  Dfp py=new Dfp(y);  int den=1;  for (int i=0; i < 10000; i++) {    num=num.multiply(x);    num=num.multiply(x);    den+=2;    t=num.divide(den);    y=y.add(t);    if (y.equals(py)) {      break;    }    py=new Dfp(y);  }  y=y.multiply(a[0].getTwo());  return split(y);}  }
class C{  @Override public String toString(){  return displayString;}  }
class C{  public void onPause(){}  }
class C{  public boolean unitCanReadFrom(Unit u,Value v){  Stmt s=(Stmt)u;  if (v instanceof Constant)   return false;  if (v instanceof Expr)   throw new RuntimeException("can't deal with expr");  if (s.containsInvokeExpr()) {    if (!(v instanceof Local))     return true;  }  Iterator useIt=u.getUseBoxes().iterator();  while (useIt.hasNext()) {    Value use=(Value)useIt.next();    if (use.equivTo(v))     return true;    Iterator vUseIt=v.getUseBoxes().iterator();    while (vUseIt.hasNext()) {      if (use.equivTo(vUseIt.next()))       return true;    }  }  return false;}  }
class C{  public LocalVarEntry(Label startLabel,Label endLabel,CP name,CP sig,int slot){  start=startLabel;  end=endLabel;  this.name=name;  this.sig=sig;  this.slot=slot;}  }
class C{  public Iterator<RecordID> scanForKey(DataType key){  List<BEntry> validEntries=getAllValidEntries();  List<RecordID> rids=new ArrayList<RecordID>();  for (  BEntry le : validEntries) {    if (key.compareTo(le.getKey()) == 0) {      rids.add(le.getRecordID());    }  }  return rids.iterator();}  }
class C{  public UsersGetQuery userIds(List<String> value){  return unsafeParam("user_ids",value);}  }
class C{  public SessionInitializationException(String logMessage,Throwable cause){  this(null,logMessage,cause);}  }
class C{  @RequestMapping(value="/complete",method=POST,produces=APPLICATION_JSON_VALUE) public ResponseEntity<List<UserDTO>> complete(@RequestBody AutoCompleteQuery acq) throws URISyntaxException {  List<UserDTO> results=userDTOService.complete(acq.query,acq.maxResults);  return new ResponseEntity<>(results,new HttpHeaders(),HttpStatus.OK);}  }
class C{  public MetricsApiRequest(String metricName,String format,@NotNull String perPage,@NotNull String page,MetricDictionary metricDictionary,UriInfo uriInfo) throws BadApiRequestException {  super(format,perPage,page,uriInfo);  this.metrics=generateMetrics(metricName,metricDictionary);  LOG.debug("Api request: \nMetrics: {},\nFormat: {}\nPagination: {}",this.metrics,this.format,this.paginationParameters);}  }
class C{  @Override public int read() throws IOException {  if (max >= 0 && pos >= max) {    return -1;  }  int result=in.read();  pos++;  return result;}  }
class C{  @deprecated public final void reset(String str,int start,int count){  char[] chars=null;  if (str != null) {    chars=str.toCharArray();  }  reset(chars,start,count);}  }
class C{  @Deployment public void testTaskVariableEventsWithinProcess() throws Exception {  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("variableProcess");  assertNotNull(processInstance);  Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();  assertNotNull(task);  assertEquals(3,listener.getEventsReceived().size());  ActivitiVariableEvent event=(ActivitiVariableEvent)listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.VARIABLE_CREATED,event.getType());  assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());  assertEquals(processInstance.getId(),event.getProcessInstanceId());  assertEquals(task.getId(),event.getTaskId());  assertEquals("variable",event.getVariableName());  assertEquals(123,event.getVariableValue());  event=(ActivitiVariableEvent)listener.getEventsReceived().get(1);  assertEquals(ActivitiEventType.VARIABLE_UPDATED,event.getType());  assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());  assertEquals(processInstance.getId(),event.getProcessInstanceId());  assertEquals(task.getId(),event.getTaskId());  assertEquals("variable",event.getVariableName());  assertEquals(456,event.getVariableValue());  event=(ActivitiVariableEvent)listener.getEventsReceived().get(2);  assertEquals(ActivitiEventType.VARIABLE_DELETED,event.getType());  assertEquals(processInstance.getProcessDefinitionId(),event.getProcessDefinitionId());  assertEquals(processInstance.getId(),event.getProcessInstanceId());  assertEquals(task.getId(),event.getTaskId());  assertEquals("variable",event.getVariableName());  assertEquals(null,event.getVariableValue());}  }
class C{  public static int nullSafeHashCode(Object[] array){  if (array == null) {    return 0;  }  int hash=INITIAL_HASH;  int arraySize=array.length;  for (int i=0; i < arraySize; i++) {    hash=MULTIPLIER * hash + nullSafeHashCode(array[i]);  }  return hash;}  }
class C{  public FeatureDefinition subset(String[] featureNamesToDrop){  List<Integer> featureIndicesToDrop=new ArrayList<Integer>();  for (  String featureName : featureNamesToDrop) {    int featureIndex;    try {      featureIndex=getFeatureIndex(featureName);      featureIndicesToDrop.add(featureIndex);    } catch (    IllegalArgumentException e) {      System.err.println("WARNING: feature " + featureName + " not found in FeatureDefinition; ignoring.");    }  }  FeatureDefinition subDefinition=null;  try {    ByteArrayOutputStream toMemory=new ByteArrayOutputStream();    DataOutput output=new DataOutputStream(toMemory);    writeBinaryTo(output,featureIndicesToDrop);    byte[] memory=toMemory.toByteArray();    ByteArrayInputStream fromMemory=new ByteArrayInputStream(memory);    DataInput input=new DataInputStream(fromMemory);    subDefinition=new FeatureDefinition(input);  } catch (  IOException e) {    e.printStackTrace();  }  assert this.contains(subDefinition);  return subDefinition;}  }
class C{  public SOCKS4Connector(String socks4host,int socks4port,String socks4user){  this.socks4host=socks4host;  this.socks4port=socks4port;  this.socks4user=socks4user;}  }
class C{  public AppsGetFriendsListQuery(VkApiClient client,UserActor actor){  super(client,"apps.getFriendsList",GetFriendsListResponse.class);  accessToken(actor.getAccessToken());}  }
