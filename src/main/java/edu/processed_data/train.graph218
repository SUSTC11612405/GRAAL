class C{  public void removeListener(DiscoveryManagerListener listener){  discoveryListeners.remove(listener);}  }
class C{  public InitialDirContext() throws NamingException {  super();}  }
class C{  public Object read(InputNode node,Class type) throws Exception {  String value=node.getValue();  if (value == null) {    return null;  }  if (empty != null && value.equals(empty)) {    return empty;  }  return readTemplate(value,type);}  }
class C{  private void showLOSSettingDialog(){  GUIPreferences gp=GUIPreferences.getInstance();  LOSDialog ld=new LOSDialog(frame,gp.getMechInFirst(),gp.getMechInSecond());  ld.setVisible(true);  gp.setMechInFirst(ld.getMechInFirst());  gp.setMechInSecond(ld.getMechInSecond());}  }
class C{  public static NSObject parse(File f) throws ParserConfigurationException, IOException, SAXException, PropertyListFormatException, ParseException {  return parse(getDocBuilder().parse(new FileInputStream(f)));}  }
class C{  public void restore(){  getBot().log(this,"Restoring",Bot.FINE,this);}  }
class C{  public th addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public void encode(String type,String data){  Intent intentEncode=new Intent(ENCODE_INTENT);  intentEncode.putExtra(ENCODE_TYPE,type);  intentEncode.putExtra(ENCODE_DATA,data);  intentEncode.setPackage(this.cordova.getActivity().getApplicationContext().getPackageName());  this.cordova.getActivity().startActivity(intentEncode);}  }
class C{  public ServiceCall<RecognizedText> recognizeText(VisualRecognitionOptions options){  Builder bodyBuilder=new MultipartBody.Builder().setType(MultipartBody.FORM);  if (options.url() != null) {    bodyBuilder.addFormDataPart(PARAM_PARAMETERS,getParametersAsJson(options).toString());  } else {    RequestBody requestBody=RequestBody.create(HttpMediaType.BINARY_FILE,options.images());    bodyBuilder.addFormDataPart(PARAM_IMAGES_FILE,options.images().getName(),requestBody);  }  RequestBuilder requestBuilder=RequestBuilder.post(PATH_RECOGNIZE_TEXT);  requestBuilder.query(VERSION,versionDate).body(bodyBuilder.build());  return createServiceCall(requestBuilder.build(),ResponseConverterUtils.getObject(RecognizedText.class));}  }
class C{  public Watch(WatchPredicate<E> predicate,int taskCount){  this(predicate,taskCount,null);}  }
class C{  public long utime(){  return Long.parseLong(fields[13]);}  }
class C{  public int addPadding(byte[] in,int inOff){  int added=(in.length - inOff);  while (inOff < in.length) {    in[inOff]=(byte)0;    inOff++;  }  return added;}  }
class C{  public static Button createCheckButton(Composite parent,String label,Image image,boolean checked,int hspan){  Button button=new Button(parent,SWT.CHECK);  button.setFont(parent.getFont());  button.setSelection(checked);  if (image != null) {    button.setImage(image);  }  if (label != null) {    button.setText(label);  }  GridData gd=new GridData();  gd.horizontalSpan=hspan;  button.setLayoutData(gd);  setButtonDimensionHint(button);  return button;}  }
class C{  @Override public void onBlockExploded(World world,int x,int y,int z,Explosion explosion){  if (world.getTileEntity(x,y,z) != null) {    int explosiveID=((TileExplosive)world.getTileEntity(x,y,z)).explosiveID;    BlockExplosive.detonate(world,x,y,z,explosiveID,1);  }  super.onBlockExploded(world,x,y,z,explosion);}  }
class C{  public static void scheduleAllTasks(Context context){  for (  Task task : Task.values())   scheduleTask(task,context);}  }
class C{  public Coupling(final Consumer<E> Consumer){  super();  this.consumer=Consumer;}  }
class C{  private static void applyDataReally(View v,int layoutId,PropertyBindInfo info,ViewHelper vp,IDataResolver dr,SparseArray<ListenerImplContext> mListenerMap,EventParseCaretaker caretaker){  if (info instanceof ImagePropertyBindInfo) {    checkAndGetImageApplier().apply((ImageView)v,dr,(ImagePropertyBindInfo)info);  } else {    final int id=v.hashCode();    caretaker.beginParse(id,layoutId,info.propertyName,mListenerMap);    final Object val=info.realExpr.evaluate(dr);    caretaker.endParse();    apply(null,v,id,layoutId,info.propertyName,val,mListenerMap);  }}  }
class C{  public String inner(){  return inner;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(13);  newVector.addElement(new Option("\tUse unpruned tree.","U",0,"-U"));  newVector.addElement(new Option("\tDo not collapse tree.","O",0,"-O"));  newVector.addElement(new Option("\tSet confidence threshold for pruning.\n" + "\t(default 0.25)","C",1,"-C <pruning confidence>"));  newVector.addElement(new Option("\tSet minimum number of instances per leaf.\n" + "\t(default 2)","M",1,"-M <minimum number of instances>"));  newVector.addElement(new Option("\tUse reduced error pruning.","R",0,"-R"));  newVector.addElement(new Option("\tSet number of folds for reduced error\n" + "\tpruning. One fold is used as pruning set.\n" + "\t(default 3)","N",1,"-N <number of folds>"));  newVector.addElement(new Option("\tUse binary splits only.","B",0,"-B"));  newVector.addElement(new Option("\tDon't perform subtree raising.","S",0,"-S"));  newVector.addElement(new Option("\tDo not clean up after the tree has been built.","L",0,"-L"));  newVector.addElement(new Option("\tLaplace smoothing for predicted probabilities.","A",0,"-A"));  newVector.addElement(new Option("\tDo not use MDL correction for info gain on numeric attributes.","J",0,"-J"));  newVector.addElement(new Option("\tSeed for random data shuffling (default 1).","Q",1,"-Q <seed>"));  newVector.addElement(new Option("\tDo not make split point actual value.","-doNotMakeSplitPointActualValue",0,"-doNotMakeSplitPointActualValue"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  public final String identifier(){  return identifier;}  }
class C{  List<File> addCollectionFiles(File newBasedir) throws IOException {  final DirectoryScanner ds=new DirectoryScanner();  ds.setBasedir(newBasedir);  if (this.includes != null && this.includes.length > 0) {    ds.setIncludes(this.includes);  } else {    ds.setIncludes(DEFAULT_INCLUDES);  }  ds.setExcludes(this.excludes);  ds.addDefaultExcludes();  ds.setCaseSensitive(false);  ds.setFollowSymlinks(false);  ds.scan();  List<File> foundFiles=new ArrayList<>();  for (  String filename : ds.getIncludedFiles()) {    foundFiles.add(new File(newBasedir,filename));  }  return foundFiles;}  }
class C{  public void removeCurrent(){  try {    cursor.cursor().delete();  } catch (  DatabaseException ex) {    throw new HGException(ex);  }}  }
class C{  public static void main(String[] args){  AStart applet=new AStart();  applet.isStandalone=true;  JFrame frame=new JFrame();  frame.setDefaultCloseOperation(3);  frame.setTitle("Start Applet");  frame.getContentPane().add(applet,BorderLayout.CENTER);  applet.init();  applet.start();  frame.setSize(400,320);  Dimension d=Toolkit.getDefaultToolkit().getScreenSize();  frame.setLocation((d.width - frame.getSize().width) / 2,(d.height - frame.getSize().height) / 2);  frame.setVisible(true);}  }
class C{  public CimQueuedIndication(String url,CIMInstance indication){  _url=url;  _indication=indication;}  }
class C{  public ResultMatrixGnuPlot(ResultMatrix matrix){  super(matrix);}  }
class C{  private String convertNonAscii(String input){  StringBuilder sb=new StringBuilder(input.length() * 6);  for (int i=0; i < input.length(); i++) {    char ch=input.charAt(i);    if (ch < 255) {      sb.append(ch);    } else {      sb.append("\\u");      sb.append(Integer.toHexString(ch));    }  }  return sb.toString();}  }
class C{  public Sequence(Schema schema,String name,Long startValue,Long increment,Long cacheSize,Long minValue,Long maxValue,boolean cycle,boolean belongsToTable){  initSchemaObjectBase(schema,name);  this.increment=increment != null ? increment : 1;  this.minValue=minValue != null ? minValue : getDefaultMinValue(startValue,this.increment);  this.maxValue=maxValue != null ? maxValue : getDefaultMaxValue(startValue,this.increment);  this.value=startValue != null ? startValue : getDefaultStartValue(this.increment);  this.cacheSize=cacheSize != null ? Math.max(1,cacheSize) : DEFAULT_CACHE_SIZE;  this.cycle=cycle;  this.belongsToTable=belongsToTable;  if (!isValid(this.value,this.minValue,this.maxValue,this.increment)) {    throw DbException.get(ErrorCode.SEQUENCE_ATTRIBUTES_INVALID,name,String.valueOf(this.value),String.valueOf(this.minValue),String.valueOf(this.maxValue),String.valueOf(this.increment));  }}  }
class C{  public void trimToSize(){  elements.trimToSize();}  }
class C{  public void removeAdjustmentListener(AdjustmentListener l){  listenerList.remove(AdjustmentListener.class,l);}  }
class C{  public SimpleLogFormatter(){  super();}  }
class C{  public void updateFanIn(){  for (int i=0, n=fanIn.size(); i < n; i++) {    fanIn.get(i).update();  }}  }
class C{  public boolean putImage(String theFolder,String theImageName,Bitmap theBitmap){  if (theFolder == null || theImageName == null || theBitmap == null)   return false;  this.DEFAULT_APP_IMAGEDATA_DIRECTORY=theFolder;  String mFullPath=setupFullPath(theImageName);  if (!mFullPath.equals("")) {    lastImagePath=mFullPath;    return saveBitmap(mFullPath,theBitmap);  }  return false;}  }
class C{  public TestManagedBeanFactory(String name){  super(name);}  }
class C{  public Charset charset(){  return charset != null ? Charset.forName(charset) : null;}  }
class C{  public void visitTypeInsn(int opcode,String type){  if (mv != null) {    mv.visitTypeInsn(opcode,type);  }}  }
class C{  public static String[] parseRequest(StatelessService service,Operation op){  String authHeader=op.getRequestHeader(AUTHORIZATION_HEADER_NAME);  String userInfo=op.getUri().getUserInfo();  String authString;  if (authHeader != null) {    String[] authHeaderParts=authHeader.split(BASIC_AUTH_SEPERATOR);    if (authHeaderParts.length != 2 || !authHeaderParts[0].equalsIgnoreCase(BASIC_AUTH_NAME)) {      op.fail(Operation.STATUS_CODE_BAD_REQUEST);      return null;    }    try {      authString=new String(Base64.getDecoder().decode(authHeaderParts[1]),Utils.CHARSET);    } catch (    UnsupportedEncodingException e) {      service.logWarning("Exception decoding auth header: %s",Utils.toString(e));      op.setStatusCode(Operation.STATUS_CODE_BAD_REQUEST).complete();      return null;    }  } else   if (userInfo != null) {    authString=userInfo;  } else {    op.addResponseHeader(WWW_AUTHENTICATE_HEADER_NAME,WWW_AUTHENTICATE_HEADER_VALUE);    op.fail(Operation.STATUS_CODE_UNAUTHORIZED);    return null;  }  String[] userNameAndPassword=authString.split(BASIC_AUTH_USER_SEPERATOR);  if (userNameAndPassword.length != 2) {    op.fail(Operation.STATUS_CODE_BAD_REQUEST);    return null;  }  return userNameAndPassword;}  }
class C{  public void accumulateStatistics(final int docFreq,final long totalTermFreq){  this.docFreq+=docFreq;  if (this.totalTermFreq >= 0 && totalTermFreq >= 0)   this.totalTermFreq+=totalTermFreq; else   this.totalTermFreq=-1;}  }
class C{  public R scan(Tree node,P p){  return (node == null) ? null : node.accept(this,p);}  }
class C{  State(byte value){  this.value=value;}  }
class C{  void resize(int newCapacity){  Entry<K,V>[] oldTable=getTable();  int oldCapacity=oldTable.length;  if (oldCapacity == MAXIMUM_CAPACITY) {    threshold=Integer.MAX_VALUE;    return;  }  @SuppressWarnings("unchecked") Entry<K,V>[] newTable=new Entry[newCapacity];  transfer(oldTable,newTable);  table=newTable;  if (size >= threshold / 2) {    threshold=(int)(newCapacity * loadFactor);  } else {    expungeStaleEntries();    transfer(newTable,oldTable);    table=oldTable;  }}  }
class C{  protected boolean onKeyUp(int featureId,int keyCode,KeyEvent event){  final KeyEvent.DispatcherState dispatcher=mDecor != null ? mDecor.getKeyDispatcherState() : null;  if (dispatcher != null) {    dispatcher.handleUpEvent(event);  }switch (keyCode) {case KeyEvent.KEYCODE_VOLUME_UP:case KeyEvent.KEYCODE_VOLUME_DOWN:case KeyEvent.KEYCODE_VOLUME_MUTE:{      getAudioManager().handleKeyUp(event,mVolumeControlStreamType);      return true;    }case KeyEvent.KEYCODE_MENU:{    onKeyUpPanel(featureId < 0 ? FEATURE_OPTIONS_PANEL : featureId,event);    return true;  }case KeyEvent.KEYCODE_BACK:{  if (featureId < 0)   break;  if (event.isTracking() && !event.isCanceled()) {    if (featureId == FEATURE_OPTIONS_PANEL) {      PanelFeatureState st=getPanelState(featureId,false);      if (st != null && st.isInExpandedMode) {        reopenMenu(true);        return true;      }    }    closePanel(featureId);    return true;  }  break;}case KeyEvent.KEYCODE_SEARCH:{if (getKeyguardManager().inKeyguardRestrictedInputMode()) {  break;}if (event.isTracking() && !event.isCanceled()) {  launchDefaultSearch();}return true;}}return false;}  }
class C{  public LinkActionList(Link link,LinkProperties properties) throws IOException {  this.link=link;  link.start(Link.ACTIONS_HEADER);  link.dos.writeFloat(version);  properties.write(link);}  }
class C{  public Config(File diskDir,String poolName){  this(diskDir,poolName,!DISABLE_PERSIST_BACKUP,!DISABLE_REGISTER_INTEREST);}  }
class C{  public ListResetPCPolicy(){}  }
class C{  public static int toSqlIndex(int index){  return index + 1;}  }
class C{  void initFromCameraParameters(Camera camera){  Camera.Parameters parameters=camera.getParameters();  previewFormat=parameters.getPreviewFormat();  previewFormatString=parameters.get("preview-format");  Log.d(TAG,"Default preview format: " + previewFormat + '/'+ previewFormatString);  WindowManager manager=(WindowManager)context.getSystemService(Context.WINDOW_SERVICE);  Display display=manager.getDefaultDisplay();  screenResolution=new Point(display.getWidth(),display.getHeight());  Log.d(TAG,"Screen resolution: " + screenResolution);  Point screenResolutionForCamera=new Point();  screenResolutionForCamera.x=screenResolution.x;  screenResolutionForCamera.y=screenResolution.y;  if (screenResolution.x < screenResolution.y) {    screenResolutionForCamera.x=screenResolution.y;    screenResolutionForCamera.y=screenResolution.x;  }  cameraResolution=getCameraResolution(parameters,screenResolutionForCamera);  Log.d(TAG,"Camera resolution: " + screenResolutionForCamera);}  }
class C{  private void createConfirmation(){  MMovementConfirm[] confirmations=getConfirmations(false);  if (confirmations.length > 0)   return;  MMovementConfirm.create(this,false);}  }
class C{  public static Animation fadeInAnimation(long duration,long delay){  Animation fadeIn=new AlphaAnimation(0,1);  fadeIn.setInterpolator(new DecelerateInterpolator());  fadeIn.setDuration(duration);  fadeIn.setStartOffset(delay);  return fadeIn;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Album al=getAlbum(stack);  return (al == null) ? Pooler.EMPTY_AIRING_ARRAY : al.getAirings();}  }
class C{  public String[] toASS(){  return new FormatASS().toFile(this);}  }
class C{  public static void remove(String dbgToken){  dbgTable.remove(dbgToken);}  }
class C{  public void addTouchedVserver(String vServerId){  if (vServerId != null) {    String value=props.getProperty(VSERVERS_TOUCHED);    HashSet<String> result=new HashSet<String>();    if (value != null) {      result.addAll((Arrays.asList(value.split(","))));    }    result.add(vServerId.trim());    props.setProperty(VSERVERS_TOUCHED,getCSVString(result));  }}  }
class C{  public boolean isEntering(){  return mFocusState == FocusState.STATE_ENTER;}  }
class C{  public static Object muxArray(Object src){  return muxArray(src,getArrayLengths(src),getComponentType(src.getClass()));}  }
class C{  private Modifiers(int rainMod,int tempMod,int fogMod){  rain=rainMod;  temperature=tempMod;  fog=fogMod;}  }
class C{  public static void changeActivity(Activity source,Class<?> destination,Boolean shouldFinishContext){  if (shouldFinishContext) {    source.finish();  }  Intent intent=new Intent(source,destination);  source.startActivity(intent);}  }
class C{  public double computeAverageLocalOfObservations(){  detCovariance=MatrixUtils.determinantViaCholeskyResult(L);  lastAverage=0.5 * (dimensions * (1 + Math.log(2.0 * Math.PI)) + Math.log(detCovariance));  return lastAverage;}  }
class C{  public ModelConverter offsetWS(Vec3UV offset){  for (  Box box : this.modelBoxList) {    for (    Quad quad : box.quads) {      for (int i=0; i < 4; i++) {        Vec3UV vec=quad.vertices[i];        vec.x+=offset.x;        vec.y+=offset.y;        vec.z+=offset.z;      }    }  }  return this;}  }
class C{  public boolean hasPurchase(String sku){  return mPurchaseMap.containsKey(sku);}  }
class C{  public FieldAccessor fieldAccessorFor(Field field){  return new FieldAccessor(object,field);}  }
class C{  synchronized Set<K> keySet(){  HashSet<K> set=new HashSet<K>();  for (Entry<K,V> e=stack.stackNext; e != stack; e=e.stackNext) {    set.add(e.key);  }  for (Entry<K,V> e=queue.queueNext; e != queue; e=e.queueNext) {    set.add(e.key);  }  return set;}  }
class C{  private Intent makeBrowserIntent(String address){  Log.d(TAG,"makeBrowserIntent: address = " + address);  Intent intent=new Intent(Intent.ACTION_VIEW,Uri.parse("https://maps.google.com/?q=" + Uri.encode(address)));  intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  return intent;}  }
class C{  @Override protected void before() throws Throwable {  log.info("Starting {}: {}",this.getClass().getSimpleName(),getServerName());  this.start();  super.before();}  }
class C{  @Override public void notifyForeignWatch(byte[] key,String serverId){  ClusterServiceKraken proxy=_podKraken.getProxy(serverId);  if (proxy != null) {    proxy.notifyLocalWatch(_table.getKey(),key);  }}  }
class C{  public static java.lang.String toString(double d){  return null;}  }
class C{  private void persist(UserInformation ui){  this.entityManager.getTransaction().begin();  this.entityManager.persist(ui);  this.entityManager.getTransaction().commit();}  }
class C{  public boolean visitAVT(AVT elem){  return true;}  }
class C{  public void testSuccessWithSuccessAndFailureRatios(){  CircuitBreaker breaker=new CircuitBreaker().withFailureThreshold(3,5).withSuccessThreshold(3,4);  breaker.halfOpen();  HalfOpenState state=new HalfOpenState(breaker);  state.recordSuccess();  state.recordFailure();  state.recordSuccess();  assertFalse(breaker.isOpen());  assertFalse(breaker.isClosed());  state.recordSuccess();  assertTrue(breaker.isClosed());}  }
class C{  public static String toJson(Map<String,String> map){  if (map == null || map.size() == 0) {    return null;  }  StringBuilder paras=new StringBuilder();  paras.append("{");  Iterator<Map.Entry<String,String>> ite=map.entrySet().iterator();  while (ite.hasNext()) {    Map.Entry<String,String> entry=(Map.Entry<String,String>)ite.next();    paras.append("\"").append(entry.getKey()).append("\":\"").append(entry.getValue()).append("\"");    if (ite.hasNext()) {      paras.append(",");    }  }  paras.append("}");  return paras.toString();}  }
class C{  public void rollbackImportCopy(VolumeDescriptor vplexVolumeDescriptor,List<VolumeDescriptor> assocVolumeDescrs,String stepId){  WorkflowStepCompleter.stepExecuting(stepId);  List<VolumeDescriptor> volumeDescriptors=new ArrayList<VolumeDescriptor>();  Volume vplexVol=_dbClient.queryObject(Volume.class,vplexVolumeDescriptor.getVolumeURI());  if (vplexVol != null && !vplexVol.getInactive()) {    volumeDescriptors.add(vplexVolumeDescriptor);  }  for (  VolumeDescriptor volDes : assocVolumeDescrs) {    Volume vol=_dbClient.queryObject(Volume.class,volDes.getVolumeURI());    if (vol != null && !vol.getInactive()) {      volumeDescriptors.add(volDes);    }  }  _blockOrchestrationController.deleteVolumes(volumeDescriptors,stepId);}  }
class C{  public void doDataLoader(final Properties properties) throws Exception {  if (properties == null)   throw new IllegalArgumentException();  final Properties tmp=PropertyUtil.flatCopy(properties);  final ConnectOptions opts=newConnectOptions(baseServiceURL + "/dataloader",UUID.randomUUID(),null);  JettyResponseListener response=null;{    final PropertiesFormat format=PropertiesFormat.XML;    final ByteArrayOutputStream baos=new ByteArrayOutputStream();    final PropertiesWriter writer=PropertiesWriterRegistry.getInstance().get(format).getWriter(baos);    writer.write(tmp);    final byte[] data=baos.toByteArray();    final ByteArrayEntity entity=new ByteArrayEntity(data);    entity.setContentType(format.getDefaultMIMEType());    opts.entity=entity;    opts.method="POST";  }  try {    checkResponseCode(response=doConnect(opts));  }  finally {    if (response != null)     response.abort();  }}  }
class C{  private void registerDef(Instruction s,BasicBlock b,TypeReference t){  if (VM.VerifyAssertions)   VM._assert(s.operator() != PHI);  if (heapTypes != null) {    if (!heapTypes.contains(t)) {      return;    }  }  HeapVariable<Object> H=findOrCreateHeapVariable(t);  H.registerDef(b);  HeapOperand<Object>[] Hprime=new HeapOperand[1];  Hprime[0]=new HeapOperand<Object>(H);  Hprime[0].setInstruction(s);  defs.put(s,Hprime);}  }
class C{  DrillDownQuery(FacetsConfig config,Query filter,DrillDownQuery other){  this.baseQuery=new BooleanQuery.Builder().add(other.baseQuery == null ? new MatchAllDocsQuery() : other.baseQuery,Occur.MUST).add(filter,Occur.FILTER).build();  this.dimQueries.addAll(other.dimQueries);  this.drillDownDims.putAll(other.drillDownDims);  this.config=config;}  }
class C{  public String join(String separator) throws JSONException {  int len=this.length();  StringBuilder sb=new StringBuilder();  for (int i=0; i < len; i+=1) {    if (i > 0) {      sb.append(separator);    }    sb.append(JSONObject.valueToString(this.myArrayList.get(i)));  }  return sb.toString();}  }
class C{  public void add(char[] w,int wLen){  if (i + wLen >= b.length) {    char[] new_b=new char[i + wLen + INC];    for (int c=0; c < i; c++)     new_b[c]=b[c];    b=new_b;  }  for (int c=0; c < wLen; c++)   b[i++]=w[c];}  }
class C{  protected byte[] parseBytes() throws IOException {  ByteArrayOutputStream bos=new ByteArrayOutputStream();  parseBytes(bos);  return bos.toByteArray();}  }
class C{  private static void echo(IgniteCheckedException e){  assert e != null;  System.err.println(e);}  }
class C{  public static int requestMana(ItemStack stack,EntityPlayer player,int manaToGet,boolean remove){  if (stack == null)   return 0;  IInventory mainInv=player.inventory;  IInventory baublesInv=BotaniaAPI.internalHandler.getBaublesInventory(player);  int invSize=mainInv.getSizeInventory();  int size=invSize;  if (baublesInv != null)   size+=baublesInv.getSizeInventory();  for (int i=0; i < size; i++) {    boolean useBaubles=i >= invSize;    IInventory inv=useBaubles ? baublesInv : mainInv;    int slot=i - (useBaubles ? invSize : 0);    ItemStack stackInSlot=inv.getStackInSlot(slot);    if (stackInSlot == stack)     continue;    if (stackInSlot != null && stackInSlot.getItem() instanceof IManaItem) {      IManaItem manaItem=(IManaItem)stackInSlot.getItem();      if (manaItem.canExportManaToItem(stackInSlot,stack) && manaItem.getMana(stackInSlot) > 0) {        if (stack.getItem() instanceof IManaItem && !((IManaItem)stack.getItem()).canReceiveManaFromItem(stack,stackInSlot))         continue;        int mana=Math.min(manaToGet,manaItem.getMana(stackInSlot));        if (remove)         manaItem.addMana(stackInSlot,-mana);        if (useBaubles)         BotaniaAPI.internalHandler.sendBaubleUpdatePacket(player,slot);        return mana;      }    }  }  return 0;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void checkWaitingConnection() throws QueryException {  if (isSecondaryHostFail()) {    Protocol waitingProtocol=waitNewSecondaryProtocol.getAndSet(null);    if (waitingProtocol != null) {      proxy.lock.lock();      try {        if (pingSecondaryProtocol(waitingProtocol)) {          lockAndSwitchSecondary(waitingProtocol);        }      }  finally {        proxy.lock.unlock();      }    }  }  if (isMasterHostFail()) {    Protocol waitingProtocol=waitNewMasterProtocol.getAndSet(null);    if (waitingProtocol != null) {      proxy.lock.lock();      try {        if (pingMasterProtocol(waitingProtocol)) {          lockAndSwitchMaster(waitingProtocol);        }      }  finally {        proxy.lock.unlock();      }    }  }}  }
class C{  @CanIgnoreReturnValue K checkKey(@Nullable K key){  return key;}  }
class C{  public void addMessage(Message message){  messages.add(message.renderTextView(context));  if (messages.size() > historySize) {    messages.remove(0);  }  notifyDataSetChanged();}  }
class C{  void declarePrefix(String prefix,String uri){  if (!tablesDirty) {    copyTables();  }  if (declarations == null) {    declarations=new Vector();  }  prefix=prefix.intern();  uri=uri.intern();  if ("".equals(prefix)) {    if ("".equals(uri)) {      defaultNS=null;    } else {      defaultNS=uri;    }  } else {    prefixTable.put(prefix,uri);    uriTable.put(uri,prefix);  }  declarations.addElement(prefix);}  }
class C{  public static boolean checkProviderStatus(CoordinatorClient coordinator,final AuthnProviderParamsToValidate param,KeystoneRestClientFactory keystoneFactory,StringBuilder errorString,DbClient dbClient){  AuthnProvider authConfig=new AuthnProvider();  authConfig.setManagerDN(param.getManagerDN());  authConfig.setManagerPassword(param.getManagerPwd());  StringSet urls=new StringSet();  urls.addAll(param.getUrls());  authConfig.setServerUrls(urls);  if (AuthnProvider.ProvidersType.keystone.toString().equalsIgnoreCase(param.getMode())) {    authConfig.setMode(AuthnProvider.ProvidersType.keystone.toString());    checkKeystoneProviderConnectivity(authConfig,keystoneFactory);    return true;  } else {    authConfig.setMode(AuthnProvider.ProvidersType.ldap.toString());  }  LdapServerList servers=createLdapServerList(coordinator,authConfig,SystemPropertyUtil.getLdapConnectionTimeout(coordinator));  _log.info("Checking the status of the provider whose urls are {}",param.getUrls());  boolean good=false;  for (  LdapOrADServer server : servers.getConnectedServers()) {    good=doCheckProviderStatusOnSingleServer(server,param,errorString,dbClient);    if (good) {      _log.info("Checked provider against server {} successfully",server.getContextSource().getUrls()[0]);      return true;    }  }  return false;}  }
class C{  @Override public int isNullable(int parameter) throws SQLException {  return (getFieldDescriptor(parameter).getType() & 1) == 1 ? ParameterMetaData.parameterNullable : ParameterMetaData.parameterNoNulls;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) private void startStorageSystem(StorageSystem system) throws ControllerException {  String systemType=system.getSystemType();  Class controllerClass=StorageSystemService.storageSystemClass(systemType);  StorageController controller=(StorageController)getController(controllerClass,systemType);  controller.connectStorage(system.getId());}  }
class C{  public void testDigitsInUkrainianCharset() throws IOException {  UkrainianMorfologikAnalyzer ra=new UkrainianMorfologikAnalyzer();  assertAnalyzesTo(ra,"text 1000",new String[]{"text","1000"});  ra.close();}  }
class C{  public void handleDiscontinuity(){  if (startMediaTimeState == START_IN_SYNC) {    startMediaTimeState=START_NEED_SYNC;  }}  }
class C{  public static short toShort(byte a,byte b,byte c,byte d){  return (short)((a << (NIBBLE_SIZE * 3)) | ((b & NIBBLE_MASK) << (NIBBLE_SIZE * 2)) | ((c & NIBBLE_MASK) << NIBBLE_SIZE)| (d & NIBBLE_MASK));}  }
class C{  public static void deleteRecursive(String path,boolean tryOnly){  if (exists(path)) {    if (isDirectory(path)) {      for (      String s : newDirectoryStream(path)) {        deleteRecursive(s,tryOnly);      }    }    if (tryOnly) {      tryDelete(path);    } else {      delete(path);    }  }}  }
class C{  public InterruptedIOException(){}  }
class C{  public static void checkNotMainThread(){  checkState(!Thread.currentThread().equals(Looper.getMainLooper().getThread()),"Method cannot be called on the main application thread (on: %s)",Thread.currentThread().getName());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.269 -0400",hash_original_method="9234FBC8642D46D6E91A113BC1D36B8B",hash_generated_method="125D2D0142FD09F62D1AFAA27ED893B7") private Node<K,V> findPredecessorOfLast(){  for (; ; ) {    Index<K,V> q=head;    for (; ; ) {      Index<K,V> d, r;      if ((r=q.right) != null) {        if (r.indexesDeletedNode()) {          q.unlink(r);          break;        }        if (r.node.next != null) {          q=r;          continue;        }      }      if ((d=q.down) != null)       q=d; else       return q.node;    }  }}  }
class C{  public boolean enableDescriptorNotification(BleDescriptorCallback bleCallback){  return enableDescriptorNotification(getDescriptor(),bleCallback);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public CountingOutputStream(OutputStream out){  super(checkNotNull(out));}  }
class C{  private void validateSettingsForSubscribing(VOSubscription subscription,VOService product,VOPaymentInfo paymentInfo,VOBillingContact voBillingContact) throws ValidationException, ObjectNotFoundException, OperationNotPermittedException, ServiceChangedException, PriceModelException, PaymentInformationException, ConcurrentModificationException, NonUniqueBusinessKeyException {  String subscriptionId=subscription.getSubscriptionId();  BLValidator.isId("subscriptionId",subscriptionId,true);  String pon=subscription.getPurchaseOrderNumber();  BLValidator.isDescription("purchaseOrderNumber",pon,false);  Product productTemplate=dataManager.getReference(Product.class,product.getKey());  Organization targetCustomer=productTemplate.getTargetCustomer();  PlatformUser currentUser=dataManager.getCurrentUser();  Organization organization=currentUser.getOrganization();  if (targetCustomer == null) {    List<Product> resultList=getProductDao().getCopyForCustomer(productTemplate,organization);    if (resultList.size() > 0) {      ServiceChangedException sce=new ServiceChangedException(ServiceChangedException.Reason.SERVICE_MODIFIED);      LOG.logWarn(Log4jLogger.SYSTEM_LOG | Log4jLogger.AUDIT_LOG,sce,LogMessageIdentifier.WARN_CUSTOMER_MUST_SUBSCRIBE_SPECIFIC_PRODUCT,organization.getOrganizationId(),productTemplate.getProductId(),resultList.get(0).getProductId());      throw sce;    }  } else   if (organization.getKey() != targetCustomer.getKey()) {    String message=String.format("Customer specific product '%s' is not specified for customer '%s'.",productTemplate.getProductId(),organization.getOrganizationId());    OperationNotPermittedException onp=new OperationNotPermittedException(message);    LOG.logWarn(Log4jLogger.SYSTEM_LOG | Log4jLogger.AUDIT_LOG,onp,LogMessageIdentifier.WARN_CUSTOMER_SPECIFIC_PRODUCT_NOT_FOR_THE_CUSTOMER,productTemplate.getProductId(),organization.getOrganizationId());    throw onp;  }  checkIfProductIsUptodate(productTemplate,product);  PriceModel priceModel=productTemplate.getPriceModel();  if (priceModel == null && productTemplate.getType() == ServiceType.PARTNER_TEMPLATE) {    priceModel=productTemplate.getTemplate().getPriceModel();  }  if (priceModel == null) {    PriceModelException mpme=new PriceModelException(PriceModelException.Reason.NOT_DEFINED);    LOG.logWarn(Log4jLogger.SYSTEM_LOG,mpme,LogMessageIdentifier.WARN_SUBSCRIBE_PRODUCT_FAILED,Long.toString(productTemplate.getKey()));    throw mpme;  }  if (priceModel.isChargeable() && !isPaymentInfoHidden()) {    PaymentDataValidator.validateNotNull(paymentInfo,voBillingContact);    PaymentInfo pi=dataManager.getReference(PaymentInfo.class,paymentInfo.getKey());    BillingContact bc=dataManager.getReference(BillingContact.class,voBillingContact.getKey());    validatePaymentInfoAndBillingContact(pi,bc,paymentInfo,voBillingContact);    PermissionCheck.owns(pi,organization,LOG);    PermissionCheck.owns(bc,organization,LOG);    PaymentDataValidator.validatePaymentTypeSupportedBySupplier(organization,productTemplate,pi.getPaymentType());    PaymentDataValidator.validatePaymentInfoDataForUsage(pi);  }}  }
class C{  public void resetCounter(){  HierarchicalDirectoryBuilder.counter=0L;}  }
class C{  public static Tag parseTag(String mojangson) throws MojangsonParseException {  if (mojangson.startsWith(String.valueOf(STRING_QUOTES.getSymbol())) && mojangson.endsWith(String.valueOf(STRING_QUOTES.getSymbol()))) {    return parseString(mojangson);  }  if (mojangson.endsWith(String.valueOf(BYTE_SUFFIX.getSymbol()))) {    return parseByte(mojangson);  }  if (mojangson.endsWith(String.valueOf(DOUBLE_SUFFIX.getSymbol()))) {    return parseDouble(mojangson);  }  if (mojangson.endsWith(String.valueOf(LONG_SUFFIX.getSymbol()))) {    return parseLong(mojangson);  }  if (mojangson.endsWith(String.valueOf(FLOAT_SUFFIX.getSymbol()))) {    return parseFloat(mojangson);  }  if (mojangson.endsWith(String.valueOf(SHORT_SUFFIX.getSymbol()))) {    return parseShort(mojangson);  }  if (mojangson.startsWith(String.valueOf(ARRAY_START.getSymbol())) && mojangson.endsWith(String.valueOf(ARRAY_END.getSymbol()))) {    return parseArray(mojangson);  }  if (mojangson.startsWith(String.valueOf(COMPOUND_START.getSymbol())) && mojangson.endsWith(String.valueOf(COMPOUND_END.getSymbol()))) {    return parseCompound(mojangson);  }  try {    return parseInt(mojangson);  } catch (  MojangsonParseException e) {    try {      return parseLong(mojangson);    } catch (    MojangsonParseException e1) {      try {        return parseDouble(mojangson);      } catch (      MojangsonParseException e2) {        return parseString(mojangson);      }    }  }}  }
class C{  public long handlerCapacity(){  return m_nvmasvc.handlerCapacity(m_nid);}  }
class C{  public float[] array(){  return array(null);}  }
class C{  public void append(int key,int value){  if (mSize != 0 && key <= mKeys[mSize - 1]) {    put(key,value);    return;  }  int pos=mSize;  if (pos >= mKeys.length) {    int n=Math.max(pos + 1,mKeys.length * 2);    int[] nkeys=new int[n];    int[] nvalues=new int[n];    System.arraycopy(mKeys,0,nkeys,0,mKeys.length);    System.arraycopy(mValues,0,nvalues,0,mValues.length);    mKeys=nkeys;    mValues=nvalues;  }  mKeys[pos]=key;  mValues[pos]=value;  mSize=pos + 1;}  }
class C{  public void encode(OutputStream out) throws IOException {  DerOutputStream tmp=new DerOutputStream();  serial.encode(tmp);  out.write(tmp.toByteArray());}  }
class C{  @Override public int available() throws IOException {  return end - pos;}  }
class C{  public static BlockPair createFakeBlock(BlockStore blockStore,long version,long timeSeconds,int height,Transaction... transactions){  try {    return createFakeBlock(blockStore,blockStore.getChainHead(),version,timeSeconds,height,transactions);  } catch (  BlockStoreException e) {    throw new RuntimeException(e);  }}  }
class C{  public static String mkStreamId(String jobId,String opletId,int oport){  Objects.requireNonNull(jobId,"jobId");  Objects.requireNonNull(opletId,"opletId");  if (oport < 0)   throw new IllegalArgumentException("oport");  return String.format(STREAMID_FMT,jobId,opletId,oport);}  }
class C{  public void testGetPrefix1() throws Throwable {  Document doc;  Node createdNode;  String prefix;  doc=(Document)load("staffNS",builder);  createdNode=doc.createElement("test:employee");  prefix=createdNode.getPrefix();  assertNull("throw_Null",prefix);}  }
class C{  public void releaseWriteLock(){  if (ThreadLogUtil.ENABLED_TRACE) {    ThreadLogUtil.traceLock(RELEASE_TEXT + " write " + name,lock);  }  lock.writeLock().unlock();  if (ThreadLogUtil.ENABLED_TRACE) {    ThreadLogUtil.traceLock(RELEASED_TEXT + " write " + name,lock);  }}  }
class C{  private boolean isConstraintsUsed(){  return constraints != null && constraints.length == getModel().getColumnCount();}  }
class C{  private boolean isRTLAllowed(Context context){  return isPrefSet(context,KEY_FOR_PREFS_ALLOWRTL,true);}  }
class C{  private boolean checkNewFileExist(File newFile){  if (newFile != null && newFile.exists()) {    return true;  }  List<DownloadFileInfo> downloadFileInfos=mDownloadFileRenamer.getDownloadFiles();  if (!CollectionUtil.isEmpty(downloadFileInfos)) {    for (    DownloadFileInfo info : downloadFileInfos) {      if (info == null) {        continue;      }      String path=info.getFilePath();      if (TextUtils.isEmpty(path)) {        continue;      }      if (path.equals(newFile.getAbsolutePath())) {        return true;      }    }  }  return false;}  }
class C{  @org.junit.Test public void verifyBaseIntegerResponse() throws Exception {  Map<String,String> queryParams=new HashMap<String,String>();  String str=client.invokeAPI("/issue-125","GET",queryParams,null,new HashMap<String,String>(),null,"application/json",null,new String[0]);  assertEquals(str,String.valueOf(ExampleBuilder.SAMPLE_BASE_INTEGER_PROPERTY_VALUE));}  }
class C{  public static boolean isStandbyProductionCopy(ConsistencyGroupCopyUID copyUID,ConsistencyGroupState state,List<ConsistencyGroupCopyUID> productionCopiesUIDs){  if (RecoverPointUtils.isProductionCopy(copyUID,productionCopiesUIDs)) {    for (    ConsistencyGroupCopyState copyState : state.getGroupCopiesStates()) {      if (copiesEqual(copyUID,copyState.getCopyUID()) && !copyState.isActive()) {        return true;      }    }  }  return false;}  }
class C{  HTMLLink(String text,String link,HTMLComponent htmlC,HTMLLink parentLink,boolean linkVisited){  super(text);  setUIID("HTMLLink");  this.link=link;  this.htmlC=htmlC;  this.parentLink=parentLink;  this.linkVisited=linkVisited;  setTickerEnabled(false);  addActionListener(this);  if (parentLink != null) {    setFocusable(false);    parentLink.addChildLink(this);  }  if (htmlC.firstFocusable == null) {    htmlC.firstFocusable=this;  }}  }
class C{  protected void extraSelectItems(Blackboard bb,SqlSelect select,List<RexNode> exprList,List<String> nameList,Collection<String> aliasList,List<SqlMonotonicity> columnMonotonicityList){}  }
class C{  public static ComponentUI createUI(JComponent list){  return new SynthListUI();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:19.748 -0500",hash_original_method="715CB29FF3CEE320E11EC1BD997C9D63",hash_generated_method="BF2ED6D8AA7E3F26499C1DEA76CA3447") @Override public boolean hasStableIds(){  return false;}  }
class C{  public Builder deleteExternalId(){  deleteFields.add("externalId");  return this;}  }
class C{  public MonitorInfo(String className,int identityHashCode,int stackDepth,StackTraceElement stackFrame){  super(className,identityHashCode);  if (stackDepth >= 0 && stackFrame == null) {    throw new IllegalArgumentException("Parameter stackDepth is " + stackDepth + " but stackFrame is null");  }  if (stackDepth < 0 && stackFrame != null) {    throw new IllegalArgumentException("Parameter stackDepth is " + stackDepth + " but stackFrame is not null");  }  this.stackDepth=stackDepth;  this.stackFrame=stackFrame;}  }
class C{  public boolean nextBoolean(double probability){  if (probability < 0.0 || probability > 1.0)   throw new IllegalArgumentException("probability must be between 0.0 and 1.0 inclusive.");  if (probability == 0.0)   return false; else   if (probability == 1.0)   return true;  return nextDouble() < probability;}  }
class C{  public static void nextImage(final IdocApplet ui){  ElementVO ele=(ElementVO)ui.getFileVO().getListImage().get(ui.getFileVO().getImageSelectIndex());  if (ele.getImageSelectIndex() + 2 > ele.getImages().size()) {    ele.setImageSelectIndex(0);  } else {    ele.setImageSelectIndex(ele.getImageSelectIndex() + 1);  }}  }
class C{  private Sha256Hash calculateHash(){  try {    ByteArrayOutputStream bos=new UnsafeByteArrayOutputStream(HEADER_SIZE);    writeHeader(bos);    return Sha256Hash.wrapReversed(Sha256Hash.hashTwice(bos.toByteArray()));  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public NotificationChain basicSetDeclaredElementType(TypeRef newDeclaredElementType,NotificationChain msgs){  TypeRef oldDeclaredElementType=declaredElementType;  declaredElementType=newDeclaredElementType;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,TypesPackage.ARRAY_LIKE__DECLARED_ELEMENT_TYPE,oldDeclaredElementType,newDeclaredElementType);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public MmsException(Throwable cause){  super(cause);}  }
class C{  public boolean isExpanded(){  return groupMetadata != null;}  }
class C{  public static void tokenize(@NotNull final PsiElement element,@NotNull final Language language,TokenConsumer consumer){  final SpellcheckingStrategy factoryByLanguage=getSpellcheckingStrategy(element,language);  if (factoryByLanguage == null)   return;  Tokenizer tokenizer=factoryByLanguage.getTokenizer(element);  tokenizer.tokenize(element,consumer);}  }
class C{  public static int tertiaryOrder(int order){  return order & TERTIARY_ORDER_MASK_;}  }
class C{  public T caseEquationRef(EquationRef object){  return null;}  }
class C{  protected void doPrintClassification(Classifier classifier,Instance inst,int index) throws Exception {  double[] d=classifier.distributionForInstance(inst);  doPrintClassification(d,inst,index);}  }
class C{  public Portfolio findPortfolioDefault() throws PersistentModelException {  return m_portfolioHome.findDefault();}  }
class C{  private void decodeNormal(Context ctx,IoSession session,IoBuffer in,ProtocolDecoderOutput out) throws CharacterCodingException, ProtocolDecoderException {  int matchCount=ctx.getMatchCount();  int oldPos=in.position();  int oldLimit=in.limit();  while (in.hasRemaining()) {    byte b=in.get();    if (delimBuf.get(matchCount) == b) {      matchCount++;      if (matchCount == delimBuf.limit()) {        int pos=in.position();        in.limit(pos);        in.position(oldPos);        ctx.append(in);        in.limit(oldLimit);        in.position(pos);        if (ctx.getOverflowPosition() == 0) {          IoBuffer buf=ctx.getBuffer();          buf.flip();          buf.limit(buf.limit() - matchCount);          try {            writeText(session,buf.getString(ctx.getDecoder()),out);          }  finally {            buf.clear();          }        } else {          int overflowPosition=ctx.getOverflowPosition();          ctx.reset();          throw new RecoverableProtocolDecoderException("Line is too long: " + overflowPosition);        }        oldPos=pos;        matchCount=0;      }    } else {      in.position(Math.max(0,in.position() - matchCount));      matchCount=0;    }  }  in.position(oldPos);  ctx.append(in);  ctx.setMatchCount(matchCount);}  }
class C{  public SVGPolygonElementBridge(){}  }
class C{  @Override public String toSource(String className) throws Exception {  if (m_NumIterationsPerformed == 0) {    throw new Exception("No model built yet");  }  if (!(m_Classifiers[0] instanceof Sourcable)) {    throw new Exception("Base learner " + m_Classifier.getClass().getName() + " is not Sourcable");  }  StringBuffer text=new StringBuffer("class ");  text.append(className).append(" {\n\n");  text.append("  public static double classify(Object[] i) {\n");  if (m_NumIterationsPerformed == 1) {    text.append("    return " + className + "_0.classify(i);\n");  } else {    text.append("    double [] sums = new double [" + m_NumClasses + "];\n");    for (int i=0; i < m_NumIterationsPerformed; i++) {      text.append("    sums[(int) " + className + '_'+ i+ ".classify(i)] += "+ m_Betas[i]+ ";\n");    }    text.append("    double maxV = sums[0];\n" + "    int maxI = 0;\n" + "    for (int j = 1; j < " + m_NumClasses + "; j++) {\n"+ "      if (sums[j] > maxV) { maxV = sums[j]; maxI = j; }\n"+ "    }\n    return (double) maxI;\n");  }  text.append("  }\n}\n");  for (int i=0; i < m_Classifiers.length; i++) {    text.append(((Sourcable)m_Classifiers[i]).toSource(className + '_' + i));  }  return text.toString();}  }
class C{  public boolean isCoinBase(){  maybeParse();  return inputs.size() == 1 && inputs.get(0).isCoinBase();}  }
class C{  public List<XmlDom> children(String tag){  return children(tag,null,null);}  }
class C{  public void connectionOpened(Spy spy){  if (connectionLogger.isDebugEnabled()) {    connectionLogger.info(spy.getConnectionNumber() + ". Connection opened " + getDebugInfo());    connectionLogger.debug(ConnectionSpy.getOpenConnectionsDump());  } else {    connectionLogger.info(spy.getConnectionNumber() + ". Connection opened");  }}  }
class C{  public T caseAction_(Action_ object){  return null;}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:18.143 -0500",hash_original_method="2B73C982341966F86ADBEA04AC7851BC",hash_generated_method="63B9ABBDB20CA604885970E2FA4A29CD") public void sendMessage(SIPMessage messageToSend) throws IOException {  try {    SIPResponse transactionResponse;    int statusCode;    transactionResponse=(SIPResponse)messageToSend;    statusCode=transactionResponse.getStatusCode();    try {      if (this.getOriginalRequest().getTopmostVia().getBranch() != null)       transactionResponse.getTopmostVia().setBranch(this.getBranch()); else       transactionResponse.getTopmostVia().removeParameter(ParameterNames.BRANCH);      if (!this.getOriginalRequest().getTopmostVia().hasPort())       transactionResponse.getTopmostVia().removePort();    } catch (    ParseException ex) {      ex.printStackTrace();    }    if (!transactionResponse.getCSeq().getMethod().equals(getOriginalRequest().getMethod())) {      sendResponse(transactionResponse);      return;    }    if (getRealState() == TransactionState.TRYING) {      if (statusCode / 100 == 1) {        this.setState(TransactionState.PROCEEDING);      } else       if (200 <= statusCode && statusCode <= 699) {        if (!isInviteTransaction()) {          if (!isReliable()) {            this.setState(TransactionState.COMPLETED);            enableTimeoutTimer(TIMER_J);          } else {            this.setState(TransactionState.TERMINATED);          }        } else {          if (statusCode / 100 == 2) {            this.disableRetransmissionTimer();            this.disableTimeoutTimer();            this.collectionTime=TIMER_J;            this.setState(TransactionState.TERMINATED);            if (this.dialog != null)             this.dialog.setRetransmissionTicks();          } else {            this.setState(TransactionState.COMPLETED);            if (!isReliable()) {              enableRetransmissionTimer();            }            enableTimeoutTimer(TIMER_H);          }        }      }    } else     if (getRealState() == TransactionState.PROCEEDING) {      if (isInviteTransaction()) {        if (statusCode / 100 == 2) {          this.disableRetransmissionTimer();          this.disableTimeoutTimer();          this.collectionTime=TIMER_J;          this.setState(TransactionState.TERMINATED);          if (this.dialog != null)           this.dialog.setRetransmissionTicks();        } else         if (300 <= statusCode && statusCode <= 699) {          this.setState(TransactionState.COMPLETED);          if (!isReliable()) {            enableRetransmissionTimer();          }          enableTimeoutTimer(TIMER_H);        }      } else       if (200 <= statusCode && statusCode <= 699) {        this.setState(TransactionState.COMPLETED);        if (!isReliable()) {          disableRetransmissionTimer();          enableTimeoutTimer(TIMER_J);        } else {          this.setState(TransactionState.TERMINATED);        }      }    } else     if (TransactionState.COMPLETED == this.getRealState()) {      return;    }    try {      if (sipStack.isLoggingEnabled()) {        sipStack.getStackLogger().logDebug("sendMessage : tx = " + this + " getState = "+ this.getState());      }      lastResponse=transactionResponse;      this.sendResponse(transactionResponse);    } catch (    IOException e) {      this.setState(TransactionState.TERMINATED);      this.collectionTime=0;      throw e;    }  }  finally {    this.startTransactionTimer();  }}  }
class C{  public boolean equals(Object target){  if (this == target)   return true;  if (target == null || !getClass().equals(target.getClass())) {    return false;  }  RuleBasedCollationKey other=(RuleBasedCollationKey)target;  return key.equals(other.key);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:19.201 -0400",hash_original_method="9C64BAD1BE875A71B9D1BFD72B090F3E",hash_generated_method="04F8E5FE79E9B9E8BDEE99B50B05360E") public boolean baseIsLeftToRight(){  return baseLevel % 2 == 0 ? true : false;}  }
class C{  public NeighborHighlightControl(String activity){  this.activity=activity;}  }
class C{  public DividerItemDecoration(Context context){  final TypedArray styledAttributes=context.obtainStyledAttributes(ATTRS);  mDivider=styledAttributes.getDrawable(0);  styledAttributes.recycle();}  }
class C{  public static final List<InetAddress> genlist(Collection<InetAddress> base,final int subnet){  final ArrayList<InetAddress> c=new ArrayList<InetAddress>(1);  for (  final InetAddress i : base) {    genlist(c,i,subnet);  }  return c;}  }
class C{  public void normalizeRow(int nodeIndex,final int rowIndex){  final int numColumns=getNumColumns(nodeIndex);  double total=0.0;  for (int colIndex=0; colIndex < numColumns; colIndex++) {    total+=getProbability(nodeIndex,rowIndex,colIndex);  }  if (total != 0.0) {    for (int colIndex=0; colIndex < numColumns; colIndex++) {      double probability=getProbability(nodeIndex,rowIndex,colIndex);      double prob=probability / total;      setProbability(nodeIndex,rowIndex,colIndex,prob);    }  } else {    double prob=1.0 / numColumns;    for (int colIndex=0; colIndex < numColumns; colIndex++) {      setProbability(nodeIndex,rowIndex,colIndex,prob);    }  }}  }
class C{  public static void createTestUser(final ProfileDao userProfileDao) throws Exception {  EnvironmentContext.getCurrent().setSubject(new SubjectImpl("codenvy","codenvy",null,false));  final Map<String,String> profileAttributes=new HashMap<>();  profileAttributes.put("firstName","Codenvy");  profileAttributes.put("lastName","Codenvy");  profileAttributes.put("email","che@eclipse.org");  Mockito.when(userProfileDao.getById("codenvy")).thenReturn(new ProfileImpl("codenvy",profileAttributes));}  }
class C{  private void checkSize(final int i){  if (i >= max_size) {    final int old_size=max_size;    max_size+=increment_size;    if (max_size <= i) {      max_size=i + increment_size + 2;    }    final int[][] temp=items;    items=new int[max_size][4];    System.arraycopy(temp,0,items,0,old_size);    increment_size=incrementSize(increment_size);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  final public boolean isLeaf(){  return false;}  }
class C{  public static Stats of(long... values){  StatsAccumulator acummulator=new StatsAccumulator();  acummulator.addAll(values);  return acummulator.snapshot();}  }
class C{  public static ZkNodeProps load(byte[] bytes){  Map<String,Object> props=(Map<String,Object>)ZkStateReader.fromJSON(bytes);  return new ZkNodeProps(props);}  }
class C{  public static void gunzipIt(File from,File to){  byte[] buffer=new byte[4096];  try {    GZIPInputStream gzis=new GZIPInputStream(new FileInputStream(from));    FileOutputStream out=new FileOutputStream(to);    int len;    while ((len=gzis.read(buffer)) > 0) {      out.write(buffer,0,len);    }    gzis.close();    out.close();  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public static void disposeOf(final Iterable<? extends Disposable> disposables){  if (disposables != null) {    for (    final Disposable disposable : disposables) {      disposeOf(disposable);    }  }}  }
class C{  public boolean isDefaultInclude(){  return defaultInclude;}  }
class C{  public void removeAllFromDamaged(final Unit damagedUnit){  while (m_damaged.contains(damagedUnit)) {    m_damaged.remove(damagedUnit);  }}  }
class C{  public void addListener(final IFilterDialogListener listener){  m_listeners.addListener(listener);}  }
class C{  public HttpUrl url(){  return url;}  }
class C{  public boolean isSetVocab(){  return this.vocab != null;}  }
class C{  SNIHostNameMatcher(String regex){  super(StandardConstants.SNI_HOST_NAME);  pattern=Pattern.compile(regex,Pattern.CASE_INSENSITIVE);}  }
class C{  private static boolean isJson(String headers){  if (headers.contains("application/json")) {    return true;  }  return false;}  }
class C{  private void resume(){  if (mIsPaused) {    mIsPaused=false;    mIsPausedAfterAudioFocusChanged=false;    if (mAudioManager.requestAudioFocus(this,AudioManager.STREAM_MUSIC,AudioManager.AUDIOFOCUS_GAIN) == AudioManager.AUDIOFOCUS_REQUEST_GRANTED) {      mMediaPlayer.start();      Intent intent=new Intent(PlaybackListener.ACTION_ON_TRACK_PLAYED);      intent.putExtra(PlaybackListener.EXTRA_KEY_TRACK,mPlayerPlaylist.getCurrentTrack());      mLocalBroadcastManager.sendBroadcast(intent);      updateNotification();      mMediaSession.setPlaybackState(MediaSessionWrapper.PLAYBACK_STATE_PLAYING);      resumeTimer();    }  }}  }
class C{  public static int[] randomNumber(int n){  int[] num=new int[n];  for (int i=0; i < num.length; i++) {    num[i]=(int)(rGen.nextDouble() * 10);  }  return num;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  SageTV.enableServer(evalBool(stack.pop()));  return null;}  }
class C{  private VOParameter createParameterForTechnicalService(VOTechnicalService voTechnicalService,String value,String defID){  VOParameterDefinition standardDef=getParameterDefinitionByName(voTechnicalService,defID);  VOParameter standardParam=new VOParameter(standardDef);  standardParam.setConfigurable(true);  standardParam.setValue(value);  return standardParam;}  }
class C{  @SideOnly(Side.CLIENT) @Override public void renderInventoryEffect(int x,int y,PotionEffect effect,Minecraft mc){  if (mc.currentScreen != null) {    mc.getTextureManager().bindTexture(iconTexture);    Gui.drawModalRectWithCustomSizedTexture(x + 6,y + 7,0,0,18,18,18,18);  }}  }
class C{  private void resortViewFiles(){  if (mFileProvider.getSortType().equals(DisplayPrefs.getSortType(this)) && mFileProvider.getSortOrder().isAsc() == (DisplayPrefs.isSortAscending(this)))   return;  mFileProvider.setSortType(DisplayPrefs.getSortType(this));  mFileProvider.setSortOrder(DisplayPrefs.isSortAscending(this) ? SortOrder.Ascending : SortOrder.Descending);  doReloadCurrentLocation();  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB)   ActivityCompat.invalidateOptionsMenu(this);}  }
class C{  protected int read(byte[] buffer,int offset,int length) throws IOException {  return mTiffStream.read(buffer,offset,length);}  }
class C{  public boolean isFormField(){  return formField;}  }
class C{  private void sendUnsubscribeMessage(String channel) throws WebSocketException {  MessageBuilder builder=new MessageBuilder(RequestBuilder.POST,null);  builder.header(MESSAGE_TYPE_HEADER_NAME,"unsubscribe-channel").data("{\"channel\":\"" + channel + "\"}");  Message message=builder.build();  send(message,null);}  }
class C{  protected boolean isClosed(){  if (!verifyReader) {    return false;  }  try {    br.mark(READ_AHEAD_LIMIT);    int nextByte=br.read();    br.reset();    return nextByte == -1;  } catch (  IOException e) {    return true;  }}  }
class C{  public AnimatablePreserveAspectRatioValue(AnimationTarget target,short align,short meetOrSlice){  super(target);  this.align=align;  this.meetOrSlice=meetOrSlice;}  }
class C{  private void addCdcColSpecs(ArrayList<ColumnSpec> cdcSpecs,OneRowChange cdcRowChangeData){  int cdcPos=cdcSpecs.size();  if (cdcColumnsAtFront)   cdcPos=0;  ColumnSpec spec=cdcRowChangeData.new ColumnSpec();  spec.setIndex(cdcPos + 1);  spec.setName("CDC_OP_TYPE");  spec.setType(java.sql.Types.VARCHAR);  spec.setLength(1);  cdcSpecs.add(cdcPos,spec);  spec=cdcRowChangeData.new ColumnSpec();  spec.setIndex(cdcPos + 1 + 1);  spec.setName("CDC_TIMESTAMP");  spec.setType(java.sql.Types.TIMESTAMP);  cdcSpecs.add(cdcPos + 1,spec);  spec=cdcRowChangeData.new ColumnSpec();  spec.setIndex(cdcPos + 1 + 2);  spec.setName("CDC_SEQUENCE_NUMBER");  spec.setType(java.sql.Types.BIGINT);  cdcSpecs.add(cdcPos + 2,spec);}  }
class C{  public static int readFully(InputStream inStr,byte[] buf) throws IOException {  return readFully(inStr,buf,0,buf.length);}  }
class C{  public static Status createOkStatus(String message){  return createStatus(IStatus.OK,message,null);}  }
class C{  public void addEntry(EntryEventImpl ev,boolean newCallbackInvoked){  this.removeAllData[this.removeAllDataSize]=new RemoveAllEntryData(ev);  this.removeAllData[this.removeAllDataSize].setCallbacksInvoked(newCallbackInvoked);  this.removeAllDataSize+=1;}  }
class C{  public static void main(final String[] args){  if (args.length == 3) {    run(args[0],args[1],args[2],args[3]);  }}  }
class C{  public static Pair<Integer,Boolean> showYesNoQuestionWithCheckbox(final Component parent,final String msg,final String checkBoxTitle){  JCheckBox checkbox=null;  Object params;  if (checkBoxTitle != null) {    checkbox=new JCheckBox(checkBoxTitle);    params=new Object[]{msg,checkbox};  } else {    params=msg;  }  final int option=JOptionPane.showConfirmDialog(isIconified(parent) ? null : parent,params,System.getProperty(DEFAULT_WINDOW_TITLE_PROPERTY),JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);  return Pair.make(option,checkBoxTitle != null ? checkbox.isSelected() : false);}  }
class C{  private void mergeAnnotationAsInterface(AnnotationType given,InterfaceType existing,Events events){  for (  ClassType classType : existing.getRealizingClasses()) {    classType.addInterface(given);  }  fireAndSave(new NodeEvent(given,NodeEventType.NEW,NodeEventDetails.INITIALIZED),events);}  }
class C{  private Connection createRemoteSQLConnection() throws SQLException {  return DriverManager.getConnection(databaseAddress + "?autoReconnect=true&user=" + databaseUser+ "&password="+ databasePassword);}  }
class C{  @Override public Collection<com.datatorrent.api.Partitioner.Partition<UniqueValueCountAppender<V>>> definePartitions(Collection<com.datatorrent.api.Partitioner.Partition<UniqueValueCountAppender<V>>> partitions,PartitioningContext context){  final int finalCapacity=DefaultPartition.getRequiredPartitionCount(context,this.partitionCount);  UniqueValueCountAppender<V> anOldOperator=partitions.iterator().next().getPartitionedInstance();  partitions.clear();  Collection<Partition<UniqueValueCountAppender<V>>> newPartitions=Lists.newArrayListWithCapacity(finalCapacity);  for (int i=0; i < finalCapacity; i++) {    try {      @SuppressWarnings("unchecked") UniqueValueCountAppender<V> statefulUniqueCount=this.getClass().newInstance();      DefaultPartition<UniqueValueCountAppender<V>> partition=new DefaultPartition<UniqueValueCountAppender<V>>(statefulUniqueCount);      newPartitions.add(partition);    } catch (    Throwable cause) {      DTThrowable.rethrow(cause);    }  }  DefaultPartition.assignPartitionKeys(Collections.unmodifiableCollection(newPartitions),input);  int lPartitionMask=newPartitions.iterator().next().getPartitionKeys().get(input).mask;  for (  Partition<UniqueValueCountAppender<V>> statefulUniqueCountPartition : newPartitions) {    UniqueValueCountAppender<V> statefulUniqueCountInstance=statefulUniqueCountPartition.getPartitionedInstance();    statefulUniqueCountInstance.partitionKeys=statefulUniqueCountPartition.getPartitionKeys().get(input).partitions;    statefulUniqueCountInstance.partitionMask=lPartitionMask;    statefulUniqueCountInstance.store=anOldOperator.store;    statefulUniqueCountInstance.tableName=anOldOperator.tableName;    statefulUniqueCountInstance.cacheManager=anOldOperator.cacheManager;  }  return newPartitions;}  }
class C{  private void visitNode(final Node n,final AStarNodeData data,final RouterPriorityQueue<Node> pendingNodes,final double time,final double cost,final double expectedRemainingCost,final Link outLink){  data.setExpectedRemainingCost(expectedRemainingCost);  visitNode(n,data,pendingNodes,time,cost,outLink);}  }
class C{  public String decrypt(String textToDecode,CharSequence password) throws KeyCrypterException {  try {    final byte[] decodeTextAsBytes=Base64.decodeBase64(textToDecode.getBytes(STRING_ENCODING));    int saltPrefixTextLength=openSSLSaltedBytes.length;    byte[] cipherBytes=new byte[decodeTextAsBytes.length - saltPrefixTextLength];    System.arraycopy(decodeTextAsBytes,saltPrefixTextLength,cipherBytes,0,decodeTextAsBytes.length - saltPrefixTextLength);    byte[] decryptedBytes=decrypt(cipherBytes,password);    return new String(decryptedBytes,STRING_ENCODING).trim();  } catch (  Exception e) {    throw new KeyCrypterException("Could not decrypt input string",e);  }}  }
class C{  public static int numberOfMissingLabels(int[] real){  int missing=0;  for (int i=0; i < real.length; i++) {    if (real[i] == -1) {      missing++;    }  }  return missing;}  }
class C{  private void startAnimation(){  ValueAnimator animator=ValueAnimator.ofFloat(1.0f);  ArrayList<NameValuesHolder> nameValueList=(ArrayList<NameValuesHolder>)mPendingAnimations.clone();  mPendingAnimations.clear();  int propertyMask=0;  int propertyCount=nameValueList.size();  for (int i=0; i < propertyCount; ++i) {    NameValuesHolder nameValuesHolder=nameValueList.get(i);    propertyMask|=nameValuesHolder.mNameConstant;  }  mAnimatorMap.put(animator,new PropertyBundle(propertyMask,nameValueList));  animator.addUpdateListener(mAnimatorEventListener);  animator.addListener(mAnimatorEventListener);  if (mStartDelaySet) {    animator.setStartDelay(mStartDelay);  }  if (mDurationSet) {    animator.setDuration(mDuration);  }  if (mInterpolatorSet) {    animator.setInterpolator(mInterpolator);  }  animator.start();}  }
class C{  protected void handleElementAdded(CompositeGraphicsNode gn,Node parent,Element childElt){  GVTBuilder builder=ctx.getGVTBuilder();  GraphicsNode childNode=builder.build(ctx,childElt);  if (childNode == null) {    return;  }  int idx=-1;  for (Node ps=childElt.getPreviousSibling(); ps != null; ps=ps.getPreviousSibling()) {    if (ps.getNodeType() != Node.ELEMENT_NODE)     continue;    Element pse=(Element)ps;    GraphicsNode psgn=ctx.getGraphicsNode(pse);    while ((psgn != null) && (psgn.getParent() != gn)) {      psgn=psgn.getParent();    }    if (psgn == null)     continue;    idx=gn.indexOf(psgn);    if (idx == -1)     continue;    break;  }  idx++;  gn.add(idx,childNode);}  }
class C{  @Override public int delete(Uri uri,String where,String[] whereArgs){  SQLiteDatabase db=getDbHelper().getWritableDatabase();  int count;switch (sUriMatcher.match(uri)) {case FORMS:    Cursor del=null;  try {    del=this.query(uri,null,where,whereArgs,null);    if (del.getCount() > 0) {      del.moveToFirst();      do {        deleteFileOrDir(del.getString(del.getColumnIndex(FormsColumns.JRCACHE_FILE_PATH)));        String formFilePath=del.getString(del.getColumnIndex(FormsColumns.FORM_FILE_PATH));        Collect.getInstance().getActivityLogger().logAction(this,"delete",formFilePath);        deleteFileOrDir(formFilePath);        deleteFileOrDir(del.getString(del.getColumnIndex(FormsColumns.FORM_MEDIA_PATH)));      } while (del.moveToNext());    }  }  finally {    if (del != null) {      del.close();    }  }count=db.delete(FORMS_TABLE_NAME,where,whereArgs);break;case FORM_ID:String formId=uri.getPathSegments().get(1);Cursor c=null;try {c=this.query(uri,null,where,whereArgs,null);if (c.getCount() > 0) {c.moveToFirst();do {deleteFileOrDir(c.getString(c.getColumnIndex(FormsColumns.JRCACHE_FILE_PATH)));String formFilePath=c.getString(c.getColumnIndex(FormsColumns.FORM_FILE_PATH));Collect.getInstance().getActivityLogger().logAction(this,"delete",formFilePath);deleteFileOrDir(formFilePath);deleteFileOrDir(c.getString(c.getColumnIndex(FormsColumns.FORM_MEDIA_PATH)));try {ItemsetDbAdapter ida=new ItemsetDbAdapter();ida.open();ida.delete(c.getString(c.getColumnIndex(FormsColumns.FORM_MEDIA_PATH)) + "/itemsets.csv");ida.close();} catch (Exception e) {}} while (c.moveToNext());}}  finally {if (c != null) {c.close();}}count=db.delete(FORMS_TABLE_NAME,FormsColumns._ID + "=" + formId+ (!TextUtils.isEmpty(where) ? " AND (" + where + ')' : ""),whereArgs);break;default :throw new IllegalArgumentException("Unknown URI " + uri);}getContext().getContentResolver().notifyChange(uri,null);return count;}  }
class C{  public boolean isEntityNamespace(long namespace){  return ArrayUtils.contains(uris.getEntityNamespaces(),namespace);}  }
class C{  private Class<?> defineClass0(String name,byte[] data,int offset,int len) throws ClassFormatError {  RVMType vmType=RVMClassLoader.defineClassInternal(name,data,offset,len,this);  Class<?> ans=vmType.getClassForType();  loadedClasses.put(name,ans);  return ans;}  }
class C{  void afterExtend(){  if (findCard(EXTEND) != null) {    nextCard();  }}  }
class C{  public static RectF adjustToFitInBounds(RectF rect,int viewportWidth,int viewportHeight){  float dx=0, dy=0;  RectF newRect=new RectF(rect);  if (newRect.width() < viewportWidth) {    dx=viewportWidth / 2 - (newRect.left + newRect.right) / 2;  } else {    if (newRect.left > 0) {      dx=-newRect.left;    } else     if (newRect.right < viewportWidth) {      dx=viewportWidth - newRect.right;    }  }  if (newRect.height() < viewportHeight) {    dy=viewportHeight / 2 - (newRect.top + newRect.bottom) / 2;  } else {    if (newRect.top > 0) {      dy=-newRect.top;    } else     if (newRect.bottom < viewportHeight) {      dy=viewportHeight - newRect.bottom;    }  }  if (dx != 0 || dy != 0) {    newRect.offset(dx,dy);  }  return newRect;}  }
class C{  public boolean isRepeat(){  return repeat;}  }
class C{  public ObjectAttributes clone(){  ObjectAttributes result=new ObjectAttributes();  result.SpecifiedAttributes=SpecifiedAttributes;  result.DisplayName=DisplayName;  result.Description=Description;  result.WriteMask=WriteMask;  result.UserWriteMask=UserWriteMask;  result.EventNotifier=EventNotifier;  return result;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void trace(byte level,String s){  trace(level,s,null);}  }
class C{  public Select<Model> limit(int limit){  if (limit < 1)   throw new IllegalArgumentException("Limit must be larger than 0");  this.limit=limit;  return this;}  }
class C{  private void prepareRPConsistencyGroupData() throws Exception {  log.info("Preparing RecoverPoint consistency group data for RecoverPointConsistencyGroupMigration");  TenantOrg tenantOrg=new TenantOrg();  URI tenantOrgURI=URIUtil.createId(TenantOrg.class);  tenantOrg.setId(tenantOrgURI);  _dbClient.createObject(tenantOrg);  Project proj=new Project();  URI projectURI=URIUtil.createId(Project.class);  String projectLabel="project";  proj.setId(projectURI);  proj.setLabel(projectLabel);  proj.setTenantOrg(new NamedURI(tenantOrgURI,projectLabel));  _dbClient.createObject(proj);  ProtectionSet cg1ps=createProtectionSetData("cg1",projectURI);  List<Volume> cg1Volumes=createRpVolumes("cg1volume1",1,cg1ps);  cg1Volumes.addAll(createRpVolumes("cg1volume2",1,cg1ps));  addVolumesToProtectionSet(cg1ps.getId(),cg1Volumes);  createBlockSnapshotData("cg1Snap",cg1Volumes);  ProtectionSet cg2ps=createProtectionSetData("cg2",projectURI);  List<Volume> cg2Volumes=createRpVolumes("cg2volume1",2,cg2ps);  cg2Volumes.addAll(createRpVolumes("cg2volume2",2,cg2ps));  addVolumesToProtectionSet(cg2ps.getId(),cg2Volumes);  createBlockSnapshotData("cg2Snap",cg2Volumes);  ProtectionSet cg3ps=createProtectionSetData("cg3",projectURI);  List<Volume> cg3Volumes=createRpVolumes("cg3volume1",3,cg3ps);  addVolumesToProtectionSet(cg3ps.getId(),cg3Volumes);  createBlockSnapshotData("cg3Snap",cg3Volumes);  for (  URI volumeURI : rpTestVolumeURIs) {    Volume volume=_dbClient.queryObject(Volume.class,volumeURI);    Assert.assertNotNull(String.format("RecoverPoint test volume %s not found",volumeURI),volume);  }}  }
class C{  public static String substitute(String heronHome,String configPath,String pathString){  Config config=Config.newBuilder().put(Keys.heronHome(),heronHome).put(Keys.heronConf(),configPath).build();  return substitute(config,pathString);}  }
class C{  public boolean contains(Point2D p){switch (pointerEventType) {case VISIBLE_PAINTED:case VISIBLE_FILL:case VISIBLE_STROKE:case VISIBLE:    if (!isVisible)     return false;case PAINTED:case FILL:case STROKE:case ALL:{    Rectangle2D b=getSensitiveBounds();    if (b == null || !b.contains(p))     return false;    return inSensitiveArea(p);  }case NONE:default :return false;}}  }
class C{  public GeometryFactory(CoordinateSequenceFactory coordinateSequenceFactory){  this(new PrecisionModel(),0,coordinateSequenceFactory);}  }
class C{  void computeNextElement(){  while (true) {    if (currentBits != 0) {      mask=currentBits & -currentBits;      return;    } else     if (++index < bits.length) {      currentBits=bits[index];    } else {      mask=0;      return;    }  }}  }
class C{  public String(char[] value){}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (!Sage.EMBEDDED)   getString(stack); else   if (stack.getUIMgr() != null && stack.getUIMgr().getUIClientType() == UIClient.REMOTE_UI && stack.getUIMgr().getRootPanel().getRenderEngine() instanceof MiniClientSageRenderer) {    return ((MiniClientSageRenderer)stack.getUIMgr().getRootPanel().getRenderEngine()).getDetailedResolution(getString(stack));  }  return null;}  }
class C{  public boolean isBorderOpaque(){  return true;}  }
class C{  public ByteBufferRange buildPrefixRange(String prefix,int pageSize){  String target=prefix.toLowerCase();  return CompositeColumnNameSerializer.get().buildRange().withPrefix(_parentType.getDataObjectClass().getSimpleName()).greaterThanEquals(target).lessThanEquals(target + Character.MAX_VALUE).limit(pageSize).build();}  }
class C{  protected void firePropertyChange(String propertyName,Object oldValue,Object newValue){  propertyChangeSupport.firePropertyChange(propertyName,oldValue,newValue);}  }
class C{  private boolean parseParameters(String val,String delim,Properties props){  String[] params=val.split(delim);  for (  String param : params) {    String[] pair=param.split("=");    if (pair.length != 2 || pair[0].isEmpty() || pair[1].isEmpty())     return false;    props.setProperty(PROP_PREFIX + pair[0],pair[1]);  }  return true;}  }
class C{  public int length(){  return length(this);}  }
class C{  public void replaceDefaultTables(boolean createSequenceTables,boolean createSequences,boolean generateFKConstraints) throws EclipseLinkException {  boolean shouldLogExceptionStackTrace=getSession().getSessionLog().shouldLogExceptionStackTrace();  this.session.getSessionLog().setShouldLogExceptionStackTrace(false);  try {    JPAMTableCreator tableCreator=getDefaultTableCreator(generateFKConstraints);    tableCreator.replaceTables(this.session,this,createSequenceTables,createSequences);    dropDatabaseSchemas();  } catch (  DatabaseException exception) {  } finally {    this.session.getSessionLog().setShouldLogExceptionStackTrace(shouldLogExceptionStackTrace);  }  if (this.session.getDatabaseEventListener() != null) {    this.session.getDatabaseEventListener().remove(this.session);    this.session.getDatabaseEventListener().register(this.session);  }}  }
class C{  public static float normalizeAngle(float angle){  angle=(float)(angle % (2 * Math.PI));  return (float)(angle < 0 ? angle + 2 * Math.PI : angle);}  }
class C{  public static Trend createTrend(final String rawJSON) throws TwitterException {  try {    final JSONObject json=new JSONObject(rawJSON);    return trendConstructor.newInstance(json);  } catch (  final InstantiationException e) {    throw new TwitterException(e);  }catch (  final IllegalAccessException e) {    throw new AssertionError(e);  }catch (  final InvocationTargetException e) {    throw new TwitterException(e);  }catch (  final JSONException e) {    throw new TwitterException(e);  }}  }
class C{  @Override public boolean isSkillType(){  return false;}  }
class C{  public boolean isExcluded(Object obj,String attr,Object value,boolean write){  return exclude.contains(attr) || (write && attr.equals("value") && value instanceof Node&& ((Node)value).getNodeType() == Node.ELEMENT_NODE);}  }
class C{  private boolean allWaitingForGC(){  return (activeMutators > 0) && (mutatorsBlocked == activeMutators);}  }
class C{  @Override public <U extends Comparable<? super U>>CompletableFuture<Optional<T>> minBy(final Function<? super T,? extends U> function){  return CompletableFuture.supplyAsync(null);}  }
class C{  public static <T>LazyListX<T> iterate(long limit,final T seed,final UnaryOperator<T> f){  return fromStreamS(ReactiveSeq.iterate(seed,f).limit(limit));}  }
class C{  public boolean isTokenValid(){  return tokenIntern.equals(token);}  }
class C{  public AlignHorizontalAction(final NetworkPanel networkPanel){  super(networkPanel,"Align Horizontal",EnablingCondition.NEURONS);  putValue(SMALL_ICON,ResourceManager.getImageIcon("AlignHorizontal.png"));  putValue(SHORT_DESCRIPTION,"Align selected neurons horizontally");}  }
class C{  @SuppressWarnings("unchecked") public CharArrayMap(int startSize,boolean ignoreCase){  this.ignoreCase=ignoreCase;  int size=INIT_SIZE;  while (startSize + (startSize >> 2) > size)   size<<=1;  keys=new char[size][];  values=(V[])new Object[size];}  }
class C{  public static long encodeZigZag64(final long n){  return (n << 1) ^ (n >> 63);}  }
class C{  public boolean canAttach(){  return targetInformation.getDebuggerOptions().canAttach();}  }
class C{  private void loadOldUpdateProperties() throws IOException {  prop=new Properties();  InputStream is;  if (oldFile.indexOf(":") > 2) {    URL url=new URL(oldFile);    is=url.openStream();  } else {    is=new FileInputStream(oldFile);  }  prop.load(is);  is.close();}  }
class C{  @Override public String type(final byte[] key){  checkIsInMultiOrPipeline();  client.type(key);  return client.getStatusCodeReply();}  }
class C{  public X509AttributeCertificateHolder(byte[] certEncoding) throws IOException {  this(parseBytes(certEncoding));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:22.008 -0400",hash_original_method="F543AA1F4DBF00D18D9D4D2FDBFC9A99",hash_generated_method="F7FA3A6330E39A2196CD6D9D6EE4D179") public BasicEofSensorWatcher(ManagedClientConnection conn,boolean reuse){  if (conn == null)   throw new IllegalArgumentException("Connection may not be null.");  managedConn=conn;  attemptReuse=reuse;}  }
class C{  public T caseS_Set(S_Set object){  return null;}  }
class C{  private static boolean isInCornerTargetZone(float x,float y,float handleX,float handleY,float targetRadius){  if (Math.abs(x - handleX) <= targetRadius && Math.abs(y - handleY) <= targetRadius) {    return true;  }  return false;}  }
class C{  public CertificateInfo toDTO(){  try {    return new CertificateInfo(memberId,active,savedToConfiguration,status,id,certificate.getEncoded(),ocspResponse != null ? ocspResponse.getEncoded() : null);  } catch (  Exception e) {    throw translateException(e);  }}  }
class C{  public void init() throws ServletException {}  }
class C{  public static Boolean toRef(boolean b){  return b ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public static String encodeString(String str){  Base64 encoder=new Base64();  return String.valueOf(encoder.encode(str.getBytes())).trim();}  }
class C{  public Timer(){  this.reset();}  }
class C{  @NotNull protected Sdk createTempSdk(@NotNull final String sdkHome,@NotNull final SdkCreationType sdkCreationType) throws InvalidSdkException, IOException {  final VirtualFile sdkHomeFile=LocalFileSystem.getInstance().findFileByPath(sdkHome);  Assert.assertNotNull("Interpreter file not found: " + sdkHome,sdkHomeFile);  return PyTestSdkTools.createTempSdk(sdkHomeFile,sdkCreationType,myFixture.getModule());}  }
class C{  public static <T>Type parseGenericityType(T obj){  Type mySuperClass=obj.getClass().getGenericSuperclass();  Type type=((ParameterizedType)mySuperClass).getActualTypeArguments()[0];  return type;}  }
class C{  public void testDynStringMissingFunction() throws Exception {  checkSortMissingFunction("dyn_stringdv","a","z");}  }
class C{  public ConnectionConfig(){  super();}  }
class C{  public boolean isWeekend(final LocalDate date){  return date.getDayOfWeek() == SATURDAY || date.getDayOfWeek() == SUNDAY;}  }
class C{  @Override public void sessionClosed(NextFilter nextFilter,IoSession session) throws Exception {  if (profileSessionClosed) {    long start=timeNow();    nextFilter.sessionClosed(session);    long end=timeNow();    sessionClosedTimerWorker.addNewDuration(end - start);  } else {    nextFilter.sessionClosed(session);  }}  }
class C{  public static String toString(IoBuffer buf){  int pos=buf.position();  int limit=buf.limit();  final java.nio.ByteBuffer strBuf=buf.buf();  final String string=CHARSET.decode(strBuf).toString();  buf.position(pos);  buf.limit(limit);  return string;}  }
class C{  public static ArrayList<Coords> coordsAtRange(Coords centre,int range){  ArrayList<Coords> result=new ArrayList<Coords>(range * 6);  if (range < 1) {    result.add(centre);    return result;  }  for (int dir=0; dir < 6; dir++) {    Coords corner=centre.translated(dir,range);    for (int count=0; count < range; count++) {      result.add(corner);      corner=corner.translated((dir + 2) % 6);    }  }  return result;}  }
class C{  private Pair<RelNode,Boolean> convertExists(SqlNode seek,RelOptUtil.SubqueryType subqueryType,RelOptUtil.Logic logic,boolean needsOuterJoin,RelDataType targetDataType){  final SqlValidatorScope seekScope=(seek instanceof SqlSelect) ? validator.getSelectScope((SqlSelect)seek) : null;  final Blackboard seekBb=createBlackboard(seekScope,null,false);  RelNode seekRel=convertQueryOrInList(seekBb,seek,targetDataType);  return RelOptUtil.createExistsPlan(seekRel,subqueryType,logic,needsOuterJoin);}  }
class C{  public OrderStateManagerImpl(final Map<String,OrderEventHandler> handlers,final Map<String,List<? extends OrderStateTransitionListener>> beforeListenersMap,final Map<String,List<? extends OrderStateTransitionListener>> afterListenersMap){  this.handlers=handlers;  this.beforeListenersMap=beforeListenersMap;  this.afterListenersMap=afterListenersMap;}  }
class C{  public static boolean checkPoolPropertiesChanged(String existingValue,String newValue){  boolean propertyChanged=false;  if ((existingValue == null && newValue != null) || (existingValue != null && newValue == null)) {    propertyChanged=true;  } else   if (existingValue != null && newValue != null) {    if (existingValue.compareToIgnoreCase(newValue) != 0) {      propertyChanged=true;    }  }  return propertyChanged;}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:27.431 -0500",hash_original_method="0FE06F2CE6966672337D3755F0FF0CD0",hash_generated_method="8B784C203CC3281453FD048DD2F4F71B") public boolean isTagEnabled(String tag){  try {    return mService.isTagEnabled(tag);  } catch (  RemoteException e) {    return false;  }}  }
class C{  public void selectAllSubsetsBut(int index){  partition.clearSelection();  for (int i=0; i < partition.getNumberOfSubsets(); i++) {    if (i != index) {      partition.selectSubset(i);    }  }}  }
class C{  static Method of(String name,Type type){  return new MethodImpl(name,type);}  }
class C{  public static boolean assertSorted(final double[] a){  for (int i=1; i < a.length; i++) {    Exam.assertTrue("Not sorted:" + Arrays.toString(a),a[i - 1] < a[i]);  }  return true;}  }
class C{  public static WebSiteProperties defaults(){  return new WebSiteProperties();}  }
class C{  public double[] computeLocalEntropy1OfPreviousObservations(){  return computeLocalEntropyFromPreviousObservations(sourceObservations,1,true);}  }
class C{  @GET @Path("ticket") @ZeppelinApi public Response ticket(){  ZeppelinConfiguration conf=ZeppelinConfiguration.create();  String principal=SecurityUtils.getPrincipal();  HashSet<String> roles=SecurityUtils.getRoles();  JsonResponse response;  String ticket;  if ("anonymous".equals(principal))   ticket="anonymous"; else   ticket=TicketContainer.instance.getTicket(principal);  Map<String,String> data=new HashMap<>();  data.put("principal",principal);  data.put("roles",roles.toString());  data.put("ticket",ticket);  response=new JsonResponse(Response.Status.OK,"",data);  LOG.warn(response.toString());  return response.build();}  }
class C{  public Button createButton(String name){  Button button=new Button();  button.setName("btn" + name);  button.setId(name);  button.setAttribute("zk_component_ID","ConfirmPanel_btn" + name);  String text=Msg.translate(Env.getCtx(),name);  if (!name.equals(text))   text=text.replaceAll("[&]",""); else   text=null;  if (m_withText && text != null) {    button.setImage("images/" + name + "16.png");    button.setLabel(text);    LayoutUtils.addSclass("action-text-button",button);  } else {    button.setImage("images/" + name + "24.png");    if (text != null)     button.setTooltiptext(text);    LayoutUtils.addSclass("action-button",button);  }  buttonMap.put(name,button);  return button;}  }
class C{  private List<T> breedNextGeneration(){  List<T> offspringPopulation=new ArrayList<T>();  while (!isNextPopulationFull(offspringPopulation)) {    T parent1=selectionFunction.select(population);    T parent2=selectionFunction.select(population);    T offspring1=(T)parent1.clone();    T offspring2=(T)parent2.clone();    try {      if (Randomness.nextDouble() <= Properties.CROSSOVER_RATE) {        crossoverFunction.crossOver(offspring1,offspring2);      }      this.mutate(offspring1);      this.mutate(offspring2);      if (offspring1.isChanged()) {        offspring1.updateAge(currentIteration);        calculateFitness(offspring1);      }      if (offspring2.isChanged()) {        offspring2.updateAge(currentIteration);        calculateFitness(offspring2);      }    } catch (    ConstructionFailedException e) {      logger.info("CrossOver/Mutation failed.");      continue;    }    if (!isTooLong(offspring1))     offspringPopulation.add(offspring1); else     offspringPopulation.add(parent1);    if (!isTooLong(offspring2))     offspringPopulation.add(offspring2); else     offspringPopulation.add(parent2);  }  return offspringPopulation;}  }
class C{  public void testNextLong(){  Random r=new Random();  long f=r.nextLong();  int i=0;  while (i < NCALLS && r.nextLong() == f)   ++i;  assertTrue(i < NCALLS);}  }
class C{  public void addRaster(int x1,int y1,int w,int h,byte[] bytes,Color[] colorTable,int trans,LinkProperties properties) throws IOException {  LinkRaster.write(x1,y1,w,h,bytes,colorTable,trans,properties,link.dos);}  }
class C{  protected static TrustAnchor findTrustAnchor(X509Certificate cert,Set trustAnchors) throws AnnotatedException {  return findTrustAnchor(cert,trustAnchors,null);}  }
class C{  @Override @SuppressWarnings("unchecked") public boolean remove(Object o){  if (o == null) {    return false;  }  for (int targetIndex=0; targetIndex < size; targetIndex++) {    if (o.equals(elements[targetIndex])) {      removeAt(targetIndex);      return true;    }  }  return false;}  }
class C{  public static Matrix reduce(Matrix source){  Matrix response=Matrix.Factory.zeros(source.getRowCount(),1);  for (int row=0; row < source.getRowCount(); ++row) {    response.setAsDouble(row,row,0);  }  return source.getRowCount() == source.getColumnCount() ? Ginv.reduce(source,response) : response;}  }
class C{  public final static String formatNameValuePair(final NameValuePair nvp,final boolean quote,HeaderValueFormatter formatter){  if (formatter == null)   formatter=BasicHeaderValueFormatter.DEFAULT;  return formatter.formatNameValuePair(null,nvp,quote).toString();}  }
class C{  private static byte[] writeInt(int value) throws IOException {  byte[] b=new byte[4];  b[0]=(byte)(value & 0x000000FF);  b[1]=(byte)((value & 0x0000FF00) >> 8);  b[2]=(byte)((value & 0x00FF0000) >> 16);  b[3]=(byte)((value & 0xFF000000) >> 24);  return b;}  }
class C{  private Drawable tileify(Drawable drawable,boolean clip){  if (drawable instanceof LayerDrawable) {    LayerDrawable background=(LayerDrawable)drawable;    final int N=background.getNumberOfLayers();    Drawable[] outDrawables=new Drawable[N];    for (int i=0; i < N; i++) {      int id=background.getId(i);      outDrawables[i]=tileify(background.getDrawable(i),(id == android.R.id.progress || id == android.R.id.secondaryProgress));    }    LayerDrawable newBg=new LayerDrawable(outDrawables);    for (int i=0; i < N; i++) {      newBg.setId(i,background.getId(i));    }    return newBg;  } else   if (drawable instanceof BitmapDrawable) {    final Bitmap tileBitmap=((BitmapDrawable)drawable).getBitmap();    if (mSampleTile == null) {      mSampleTile=tileBitmap;    }    final ShapeDrawable shapeDrawable=new ShapeDrawable(getDrawableShape());    final BitmapShader bitmapShader=new BitmapShader(tileBitmap,Shader.TileMode.REPEAT,Shader.TileMode.CLAMP);    shapeDrawable.getPaint().setShader(bitmapShader);    return (clip) ? new ClipDrawable(shapeDrawable,Gravity.LEFT,ClipDrawable.HORIZONTAL) : shapeDrawable;  }  return drawable;}  }
class C{  public boolean isResolved(){  return true;}  }
class C{  private RechargeFactory(){  throw new AssertionError(RechargeFactory.class.getName() + " is non-instantiable");}  }
class C{  @Deprecated public void deleteNote(String guid,OnClientCallback<Integer> callback){  AsyncReflector.execute(mClient,callback,"deleteNote",mAuthenticationToken,guid);}  }
class C{  public BranchCondition(String className,String methodName,int branchIndex,Constraint<?> constraint,List<Constraint<?>> supportingConstraints){  this.className=ResourceList.getClassNameFromResourcePath(className);  this.methodName=methodName;  this.branchIndex=branchIndex;  this.constraint=constraint;  this.supportingConstraints=supportingConstraints;}  }
class C{  @Override public void check(Certificate cert,Collection<String> unresCritExts) throws CertPathValidatorException {  X509Certificate currCert=(X509Certificate)cert;  i++;  checkBasicConstraints(currCert);  verifyNameConstraints(currCert);  if (unresCritExts != null && !unresCritExts.isEmpty()) {    unresCritExts.remove(BasicConstraints_Id.toString());    unresCritExts.remove(NameConstraints_Id.toString());  }}  }
class C{  void deinitializeImpl(){  if (isInitialized()) {    paintLockRelease();    setInitialized(false);    setDirtyRegion(null);    Style stl=getStyle();    Image i=stl.getBgImage();    if (i != null) {      i.unlock();    } else {      Border b=stl.getBorder();      if (b != null) {        b.unlock();      }    }    Painter p=stl.getBgPainter();    if (p instanceof BGPainter) {      ((BGPainter)p).radialCache=null;    }    deinitialize();  }}  }
class C{  @Bean public Queue deadLetterQueue(){  return amqpDeadletterProperties.createDeadletterQueue(amqpProperties.getDeadLetterQueue());}  }
class C{  public void createConstraints(AbstractSession session,Writer schemaWriter) throws EclipseLinkException {  createUniqueConstraints(session,schemaWriter);  createForeignConstraints(session,schemaWriter);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.397 -0500",hash_original_method="5A46FFBB11F835A1D00E2D177236CED3",hash_generated_method="E02F64B417EC6DD2CB66DF18177B431F") public static void cursorDoubleToContentValuesIfPresent(Cursor cursor,ContentValues values,String column){  final int index=cursor.getColumnIndex(column);  if (index != -1 && !cursor.isNull(index)) {    values.put(column,cursor.getDouble(index));  }}  }
class C{  public MarketingPermissionNotFoundException(String message,Object[] params){  super(message,params);}  }
class C{  public Bz2OsmWriter(){  try {    compressorClass=Class.forName("org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream");  } catch (  ClassNotFoundException e) {  }}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public ProjectionPreferencesDialog(Projector projector){  this.projector=projector;  String toleranceToolTip="Only add a new datapoint if it is at least this " + "far from an existing datapoint in the high-dim space";  JLabel toleranceLabel=new JLabel("New datapoint tolerance");  tolerance.setToolTipText(toleranceToolTip);  toleranceLabel.setToolTipText(toleranceToolTip);  mainPanel.addItemLabel(toleranceLabel,tolerance);  if (projector.getProjectionMethod() instanceof ProjectCoordinate) {    mainPanel.addItem("Coordinate projection auto-find mode",autoFind);  }  fillFieldValues();  setContentPane(mainPanel);}  }
class C{  public MalformedURIException(){  super();}  }
class C{  public static byte[] toAsciiByteArray(CharSequence charSequence){  byte[] barr=new byte[charSequence.length()];  for (int i=0; i < barr.length; i++) {    char c=charSequence.charAt(i);    barr[i]=(byte)((int)(c <= 0xFF ? c : 0x3F));  }  return barr;}  }
class C{  public static void assumeFalse(boolean assumption,Supplier<String> messageSupplier) throws TestAbortedException {  assumeFalse(null,messageSupplier);}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  public TopologicalNode(int nodeID,int x,int y){  this.nodeID=nodeID;  nodeName=String.valueOf(nodeID);  worldX=x;  worldY=y;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected boolean accept(XSLTVisitor visitor){  return visitor.visitStylesheet(this);}  }
class C{  private void loadBooleanValue(final JCheckBox comp,final String elementName){  final String value=properties.getValue(elementName).toLowerCase();  comp.setSelected(!value.isEmpty() && value.hashCode() == TRUE_HASH);}  }
class C{  public void drawOval(int x,int y,int width,int height){  addStrokeShape(new Rectangle2D.Float(x,y,width,height));  mPrintMetrics.draw(this);}  }
class C{  public RemoveIndexChange(Table table,IIndex index){  super(table);  _index=index;}  }
class C{  protected void BooleanExpr() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  appendOp(2,OpCodes.OP_BOOL);  Expr();  int opLen=m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos;  if (opLen == 2) {    error(XPATHErrorResources.ER_BOOLEAN_ARG_NO_LONGER_OPTIONAL,null);  }  m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,opLen);}  }
class C{  @Override public void delete(long addr){}  }
class C{  public int index(){  return _index;}  }
class C{  @Provides public ResourceService resourceService(){  resourceServiceMock=mock(ResourceService.class);  return resourceServiceMock;}  }
class C{  public boolean hasProtocolStatus(){  return fieldSetFlags()[8];}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  public boolean popRewindMark(){  boolean top=mark_size.empty();  m_size=top ? m_emptyNodeCount : mark_size.pop();  m_exptype.setSize(m_size);  m_firstch.setSize(m_size);  m_nextsib.setSize(m_size);  m_prevsib.setSize(m_size);  m_parent.setSize(m_size);  m_elemIndexes=null;  int ds=top ? m_emptyNSDeclSetCount : mark_nsdeclset_size.pop();  if (m_namespaceDeclSets != null) {    m_namespaceDeclSets.setSize(ds);  }  int ds1=top ? m_emptyNSDeclSetElemsCount : mark_nsdeclelem_size.pop();  if (m_namespaceDeclSetElements != null) {    m_namespaceDeclSetElements.setSize(ds1);  }  m_data.setSize(top ? m_emptyDataCount : mark_data_size.pop());  m_chars.setLength(top ? m_emptyCharsCount : mark_char_size.pop());  m_dataOrQName.setSize(top ? m_emptyDataQNCount : mark_doq_size.pop());  return m_size == 0;}  }
class C{  public FixedSecureRandom(boolean intPad,byte[][] values){  ByteArrayOutputStream bOut=new ByteArrayOutputStream();  for (int i=0; i != values.length; i++) {    try {      bOut.write(values[i]);    } catch (    IOException e) {      throw new IllegalArgumentException("can't save value array.");    }  }  _data=bOut.toByteArray();  if (intPad) {    _intPad=_data.length % 4;  }}  }
class C{  public void bob(AdvancedModelRenderer box,float speed,float degree,boolean bounce,float f,float f1){  box.bob(speed,degree,bounce,f,f1);}  }
class C{  @Override public boolean select(Viewer viewer,Object parentElement,Object element){  return element instanceof RisikoMassnahmenUmsetzung;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.339 -0500",hash_original_method="F3DC851C781199B1B5D5ECAC93663797",hash_generated_method="77352DEEEA7B933847DD36C7B723EE3F") public PChargingFunctionAddressesHeader createPChargingFunctionAddressesHeader(){  PChargingFunctionAddresses cfa=new PChargingFunctionAddresses();  return cfa;}  }
class C{  private void addNumericConstructor(GenericClass clazz){  if (!generatorCache.containsKey(clazz)) {    generatorCache.put(clazz,new LinkedHashSet<GenericAccessibleObject<?>>());  }  if (!generators.containsKey(clazz)) {    generators.put(clazz,new LinkedHashSet<GenericAccessibleObject<?>>());  }  logger.info("addNumericConstructor for class " + clazz);  for (  Constructor<?> constructor : clazz.getRawClass().getConstructors()) {    if (constructor.getParameterTypes().length == 1) {      Class<?> parameterClass=constructor.getParameterTypes()[0];      if (!parameterClass.equals(String.class)) {        GenericConstructor genericConstructor=new GenericConstructor(constructor,clazz);        generatorCache.get(clazz).add(genericConstructor);        generators.get(clazz).add(genericConstructor);      }    }  }  logger.info("Constructors for class " + clazz + ": "+ generators.get(clazz).size());}  }
class C{  @Override public void onSlotChangedRemoved(final RPObject object,final String slotName,final RPObject sobject,final RPObject schanges){}  }
class C{  protected boolean isRootPaneCheckingEnabled(){  return rootPaneCheckingEnabled;}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  public TextDrawable(TextView tv,String initialText,boolean bindToViewsText,boolean bindToViewsPaint){  this(tv.getPaint(),initialText);  ref=new WeakReference<>(tv);  if (bindToViewsText || bindToViewsPaint) {    if (bindToViewsText) {      tv.addTextChangedListener(this);    }    mBindToViewPaint=bindToViewsPaint;  }}  }
class C{  protected void addPolygon(OMGraphic graphic,List<Object> record){  addGraphic(getPolyList(),graphic,record);}  }
class C{  protected void ensureUnsignedSignatureProperties() throws DSSException {  final NodeList unsignedSignaturePropertiesNodeList=currentSignatureDom.getElementsByTagNameNS(XAdESNamespaces.XAdES,"UnsignedSignatureProperties");  final int length=unsignedSignaturePropertiesNodeList.getLength();  if (length == 1) {    unsignedSignaturePropertiesDom=(Element)unsignedSignaturePropertiesNodeList.item(0);  } else   if (length == 0) {    unsignedSignaturePropertiesDom=DSSXMLUtils.addElement(documentDom,unsignedPropertiesDom,XAdESNamespaces.XAdES,"xades:UnsignedSignatureProperties");  } else {    throw new DSSException("The signature contains more then one UnsignedSignatureProperties element! Extension is not possible.");  }}  }
class C{  public String toString(){  try {    return '[' + this.join(",") + ']';  } catch (  Exception e) {    return null;  }}  }
class C{  @Override public int compareTo(ZoneOffsetTransition transition){  return this.getInstant().compareTo(transition.getInstant());}  }
class C{  private void makeTunnel(TunnelRequest tunnelRequest) throws IOException {  RawHeaders requestHeaders=tunnelRequest.getRequestHeaders();  while (true) {    out.write(requestHeaders.toBytes());    RawHeaders responseHeaders=RawHeaders.fromBytes(in);switch (responseHeaders.getResponseCode()) {case HTTP_OK:      return;case HTTP_PROXY_AUTH:    requestHeaders=new RawHeaders(requestHeaders);  URL url=new URL("https",tunnelRequest.host,tunnelRequest.port,"/");boolean credentialsFound=HttpAuthenticator.processAuthHeader(route.address.authenticator,HTTP_PROXY_AUTH,responseHeaders,requestHeaders,route.proxy,url);if (credentialsFound) {continue;} else {throw new IOException("Failed to authenticate with proxy");}default :throw new IOException("Unexpected response code for CONNECT: " + responseHeaders.getResponseCode());}}}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  private LinkedHashSet<String> flavorToNativeLookup(final DataFlavor flav,final boolean synthesize){  LinkedHashSet<String> natives=getFlavorToNative().get(flav);  if (flav != null && !disabledMappingGenerationKeys.contains(flav)) {    DataTransferer transferer=DataTransferer.getInstance();    if (transferer != null) {      LinkedHashSet<String> platformNatives=transferer.getPlatformMappingsForFlavor(flav);      if (!platformNatives.isEmpty()) {        if (natives != null) {          platformNatives.addAll(natives);        }        natives=platformNatives;      }    }  }  if (natives == null) {    if (synthesize) {      String encoded=encodeDataFlavor(flav);      natives=new LinkedHashSet<>(1);      getFlavorToNative().put(flav,natives);      natives.add(encoded);      LinkedHashSet<DataFlavor> flavors=getNativeToFlavor().get(encoded);      if (flavors == null) {        flavors=new LinkedHashSet<>(1);        getNativeToFlavor().put(encoded,flavors);      }      flavors.add(flav);      nativesForFlavorCache.remove(flav);      flavorsForNativeCache.remove(encoded);    } else {      natives=new LinkedHashSet<>(0);    }  }  return new LinkedHashSet<>(natives);}  }
class C{  @Override public void handlePeriodicMaintenance(Operation post){  post.complete();  Operation.CompletionHandler handler=null;  Operation selectOwnerOp=Operation.createPost(null).setExpiration(ServiceUtils.computeExpirationTime(TaskSchedulerServiceHelper.OWNER_SELECTION_TIMEOUT)).setCompletion(handler);  getHost().selectOwner(null,getSelfLink(),selectOwnerOp);}  }
class C{  public void visitSource(String source,String debug){  if (cv != null) {    cv.visitSource(source,debug);  }}  }
class C{  @Override public Value sample(Assignment condition){  IndependentDistribution result=getProbDistrib(condition);  return result.sample();}  }
class C{  public void saveFavoritesToSettings(Settings settings){  if (!loadedFavoritesFromSettings) {    LOGGER.warning("Not saving favorite emotes, because they don't seem to have been loaded in the first place.");    return;  }  List<List> entriesToSave=new ArrayList<>();  for (  Favorite f : favorites.keySet()) {    entriesToSave.add(favoriteToList(f,true));  }  for (  Favorite f : favoritesNotFound.values()) {    if (f.notFoundCount > 30) {      LOGGER.warning("Not saving favorite emote " + f + " (not found)");    } else {      entriesToSave.add(favoriteToList(f,false));    }  }  settings.putList("favoriteEmotes",entriesToSave);}  }
class C{  public ActivityTransitionExitHelper toView(View toView){  this.toView=toView;  return this;}  }
class C{  public static JSONArray toJSONArray(String string) throws JSONException {  return toJSONArray(new XMLTokener(string));}  }
class C{  public static byte[] decode(byte[] source) throws Base64DecoderException {  return decode(source,0,source.length);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(", description: ");  result.append(description);  result.append(", breakable: ");  result.append(breakable);  result.append(')');  return result.toString();}  }
class C{  public static byte[] decodeWebSafe(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,WEBSAFE_DECODABET);}  }
class C{  public TestAttachment(final String name,final Attachable attachable,final GameData gameData){  super(name,attachable,gameData);}  }
class C{  private void addImports(Class... classes){  for (int i=0; i < classes.length; ++i) {    Class clazz=classes[i];    this.imports.add(clazz.getCanonicalName());  }}  }
class C{  public static boolean equals(Object o1,Object o2){  return o1 == null ? o2 == null : o1.equals(o2);}  }
class C{  private AcmeGifHelper(){}  }
class C{  public void testNullForPrimitives() throws IOException {  PrimitivesBean bean=mapper.readValue("{\"intValue\":null, \"booleanValue\":null, \"doubleValue\":null}",PrimitivesBean.class);  assertNotNull(bean);  assertEquals(0,bean.intValue);  assertEquals(false,bean.booleanValue);  assertEquals(0.0,bean.doubleValue);  bean=mapper.readValue("{\"byteValue\":null, \"longValue\":null, \"floatValue\":null}",PrimitivesBean.class);  assertNotNull(bean);  assertEquals((byte)0,bean.byteValue);  assertEquals(0L,bean.longValue);  assertEquals(0.0f,bean.floatValue);  final ObjectMapper mapper2=new ObjectMapper();  mapper2.configure(DeserializationConfig.Feature.FAIL_ON_NULL_FOR_PRIMITIVES,true);  try {    mapper2.readValue("{\"booleanValue\":null}",PrimitivesBean.class);    fail("Expected failure for boolean + null");  } catch (  JsonMappingException e) {    verifyException(e,"Can not map JSON null into type boolean");  }  try {    mapper2.readValue("{\"byteValue\":null}",PrimitivesBean.class);    fail("Expected failure for byte + null");  } catch (  JsonMappingException e) {    verifyException(e,"Can not map JSON null into type byte");  }  try {    mapper2.readValue("{\"charValue\":null}",PrimitivesBean.class);    fail("Expected failure for char + null");  } catch (  JsonMappingException e) {    verifyException(e,"Can not map JSON null into type char");  }  try {    mapper2.readValue("{\"shortValue\":null}",PrimitivesBean.class);    fail("Expected failure for short + null");  } catch (  JsonMappingException e) {    verifyException(e,"Can not map JSON null into type short");  }  try {    mapper2.readValue("{\"intValue\":null}",PrimitivesBean.class);    fail("Expected failure for int + null");  } catch (  JsonMappingException e) {    verifyException(e,"Can not map JSON null into type int");  }  try {    mapper2.readValue("{\"longValue\":null}",PrimitivesBean.class);    fail("Expected failure for long + null");  } catch (  JsonMappingException e) {    verifyException(e,"Can not map JSON null into type long");  }  try {    mapper2.readValue("{\"floatValue\":null}",PrimitivesBean.class);    fail("Expected failure for float + null");  } catch (  JsonMappingException e) {    verifyException(e,"Can not map JSON null into type float");  }  try {    mapper2.readValue("{\"doubleValue\":null}",PrimitivesBean.class);    fail("Expected failure for double + null");  } catch (  JsonMappingException e) {    verifyException(e,"Can not map JSON null into type double");  }}  }
class C{  @Override public void onSearch(SearchActionBar searchview,CharSequence constraint){}  }
class C{  public Object[] assignParameters(Class[] parameterTypes,List objects) throws RuntimeException {  if (parameterTypes.length > 5) {    System.out.println("Oops");  }  for (  Class parameterType1 : parameterTypes) {    if (parameterType1 == null) {      throw new NullPointerException("Parameter types must all be non-null.");    }  }  Object[] arguments=new Object[parameterTypes.length];  List<Object> _objects=removeNulls(objects);  if (parameterTypes.length != _objects.size()) {    return null;  }  PermutationGenerator gen=new PermutationGenerator(parameterTypes.length);  int[] perm;  boolean foundAConstructor=false;  while ((perm=gen.next()) != null) {    boolean allAssigned=true;    for (int i=0; i < perm.length; i++) {      Class<?> parameterType=parameterTypes[i];      Class<?> aClass=_objects.get(perm[i]).getClass();      if (parameterType.isAssignableFrom(aClass)) {        arguments[i]=_objects.get(perm[i]);      } else {        allAssigned=false;      }    }    if (allAssigned) {      foundAConstructor=true;      break;    }  }  if (foundAConstructor) {    return arguments;  } else {    return null;  }}  }
class C{  public void testGetWebModuleUrisWithEmptyDocument() throws Exception {  String xml="<application>" + "  <module>" + "    <java>javaclient.jar</java>"+ "  </module>"+ "</application>";  ApplicationXml applicationXml=ApplicationXmlIo.parseApplicationXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),null);  List<String> webUris=applicationXml.getWebModuleUris();  assertTrue("No web modules defined",webUris.isEmpty());}  }
class C{  static AxesWalker findClone(AxesWalker key,Vector cloneList){  if (null != cloneList) {    int n=cloneList.size();    for (int i=0; i < n; i+=2) {      if (key == cloneList.elementAt(i))       return (AxesWalker)cloneList.elementAt(i + 1);    }  }  return null;}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  protected void expectUpdateTrack(Capture<Track> track,boolean lastTrack,long trackId){  myTracksProviderUtils.updateTrack(AndroidMock.capture(track));  expect(myTracksProviderUtils.insertWaypoint((Waypoint)AndroidMock.anyObject())).andReturn(WAYPOINT_ID_O_URI);  if (lastTrack) {    expect(myTracksProviderUtils.getTrack(trackId)).andReturn(null);  }}  }
class C{  private void parseSection(final int pendingC,final Reader reader,final StringBuilder target,final Position sourcePosition,final Position targetPosition) throws IOException, FinishedReadingException {  append(target,targetPosition,"          ");  append(target,targetPosition,(char)pendingC);  while (true) {    int c=read(reader,sourcePosition);    if (c == '%') {      c=read(reader,sourcePosition);      if (c == '>')       break;      append(target,targetPosition,'%');    }    append(target,targetPosition,(char)c);  }  append(target,targetPosition,';');}  }
class C{  @Override public String readLine() throws IOException {  checkBuffer(-1);  this.randomAccessFile.seek(this.fileOffset + this.bufferPointer.bufferOffset);  String line=this.randomAccessFile.readLine();  this.fileOffset=this.randomAccessFile.getFilePointer();  this.bufferPointer.invalidate();  return line;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:00.901 -0500",hash_original_method="9284A49878E24579805D9B3A83B65918",hash_generated_method="5026640DDE838AB1D7C568964116B628") @DSVerified @DSSpec(DSCat.IO) @DSSink({DSSinkKind.NETWORK}) public boolean login() throws IOException {  String name;  InetAddress host;  host=getLocalAddress();  name=host.getHostName();  if (name == null)   return false;  return SMTPReply.isPositiveCompletion(helo(name));}  }
class C{  public void remove(String key){  ImageDescriptor descriptor=getDescriptor(key);  if (descriptor != null) {    manager.destroy(descriptor);    getTable().remove(key);  }}  }
class C{  private boolean isSameFile(Path first,Path second) throws IOException {  boolean sameFileSize=Files.size(first) == Files.size(second);  if (!sameFileSize) {    return false;  }  byte[] firstBytes=Files.readAllBytes(first);  byte[] secondBytes=Files.readAllBytes(second);  return Arrays.equals(firstBytes,secondBytes);}  }
class C{  @Override public T selectPlan(HasPlansAndId<T,I> person){  return person.getSelectedPlan();}  }
class C{  public void testDoubleValueNegMantissaIsZero(){  byte[] a={-128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};  int aSign=-1;  double aNumber=new BigInteger(aSign,a).doubleValue();  assertTrue(aNumber == -8.98846567431158E307);}  }
class C{  public boolean wasNull() throws SQLException {  return crsInternal.wasNull();}  }
class C{  public TwoDCircle(double x,double y,double radius){  this(new TwoDPoint(x,y),radius);}  }
class C{  public SaveModelCRFSuiteTrainTestTask(String aExperimentName,File outputFolder,Class<? extends TCMachineLearningAdapter> mlAdapter) throws TextClassificationException {  super(aExperimentName,mlAdapter);  setOutputFolder(outputFolder);}  }
class C{  <S>boolean checkManyToOne(boolean conditional,Iterable<S> sources,@Nullable Object target,@Nullable String message){  return checkManyToMany(conditional,sources,ImmutableList.of((target == null) ? NULL_STRING : target),message);}  }
class C{  private Object readElement(InputNode node,String key) throws Exception {  String name=style.getElement(key);  InputNode child=node.getNext(name);  if (child == null) {    return null;  }  return root.read(child);}  }
class C{  public static <T>Consumer<T> doNothing(){  return null;}  }
class C{  public synchronized long size(){  return size;}  }
class C{  @Override protected boolean shouldComposeCreationImage(){  return true;}  }
class C{  public void remove(){  SerialDevice originalSource=getSourceDevice();  SerialDevice originalTarget=getTargetDevice();  originalSource.setTargetDevice(originalTarget);  originalTarget.setSourceDevice(originalSource);}  }
class C{  public void removeInitiators(Collection<URI> initiators){  this.removedInitiators.addAll(initiators);}  }
class C{  public String findMostSpecific(String attributeType){  pos=0;  beg=0;  end=0;  cur=0;  chars=dn.toCharArray();  String attType=nextAT();  if (attType == null) {    return null;  }  while (true) {    String attValue="";    if (pos == length) {      return null;    }switch (chars[pos]) {case '"':      attValue=quotedAV();    break;case '#':  attValue=hexAV();break;case '+':case ',':case ';':break;default :attValue=escapedAV();}if (attributeType.equalsIgnoreCase(attType)) {return attValue;}if (pos >= length) {return null;}if (chars[pos] == ',' || chars[pos] == ';') {} else if (chars[pos] != '+') {throw new IllegalStateException("Malformed DN: " + dn);}pos++;attType=nextAT();if (attType == null) {throw new IllegalStateException("Malformed DN: " + dn);}}}  }
class C{  public CLEvent read(CLQueue queue,Pointer<T> out,boolean blocking,CLEvent... eventsToWaitFor){  return read(queue,0,-1,out,blocking,eventsToWaitFor);}  }
class C{  public XIntervalSeries(Comparable key,boolean autoSort,boolean allowDuplicateXValues){  super(key,autoSort,allowDuplicateXValues);}  }
class C{  public static int applyRange255(int raw){  if (raw < 0)   raw=0; else   if (raw > 255)   raw=255;  return raw;}  }
class C{  public int hashCode(){  return user.hashCode();}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.paint,stream);  SerialUtilities.writePaint(this.backgroundPaint,stream);  SerialUtilities.writePaint(this.outlinePaint,stream);  SerialUtilities.writeStroke(this.outlineStroke,stream);}  }
class C{  public void onStop(){  mOnStartPending=false;  if (!mInitializationComplete)   return;  mActivityDelegate.onStopWithNative();}  }
class C{  public void clearStack(){  top=0;}  }
class C{  public boolean isSetOld_string(){  return this.old_string != null;}  }
class C{  public HttpHead(String path,ParameterMap params){  super(path,params);  this.httpMethod=HttpMethod.HEAD;}  }
class C{  private boolean canReadDword(final MemoryMap memoryMap,final long offset){  return containsOffset(memoryMap,new CAddress(offset)) && containsOffset(memoryMap,new CAddress(offset + 3));}  }
class C{  public static final int hashCode(final double[][] m1){  return Arrays.hashCode(m1);}  }
class C{  public T caseDecimalEscapeSequence(DecimalEscapeSequence object){  return null;}  }
class C{  public double yield(final DayCounter dc,final Compounding comp,final Frequency freq,final double accuracy,final int maxEvaluations){  final Brent solver=new Brent();  solver.setMaxEvaluations(maxEvaluations);  final YieldFinder objective=new YieldFinder(notional(settlementDate()),cashflows_,dirtyPrice(),dc,comp,freq,settlementDate());  return solver.solve(objective,accuracy,0.02,0.0,1.0);}  }
class C{  public ToStringBuilder append(final long value){  style.append(buffer,null,value);  return this;}  }
class C{  @Override protected void handleArguments(Arguments arguments){  username=arguments.remainingArgs.get(USERNAME_ARG);  password=arguments.remainingArgs.get(PASSWORD_ARG);  database=arguments.remainingArgs.get(DATABASE_ARG);  tagMapping=arguments.remainingArgs.get(TAG_MAPPING_ARG);  Preconditions.checkNotNull(username);  Preconditions.checkNotNull(password);  Preconditions.checkNotNull(database);}  }
class C{  public void logDebug(String message,Throwable cause){  getLog().log(new Status(IStatus.INFO,pluginId,DEBUG_SEVERITY,message,cause));}  }
class C{  public void associateExistingEntity() throws SortQueryException, SortJdbcException {  Entity entity=entityContext.getEntity(getEntityType(),getEntityKey(true),false);  if (entity == null) {    throw new IllegalQueryStateException("Entity with type " + getEntityType() + " and key "+ getEntityKey(true)+ " must exist in the entity context");  }  if (!loadedEntities.containsKey(entity.getKey().getValue())) {    LOG.debug("Associating existing entity " + entity);    loadedEntities.put(entity.getKey().getValue(),entity);  }}  }
class C{  public int executeProcess(){  final List<String> processStrings=tokenizeString(execCommand);  processStrings.addAll(tokenizeString(script));  logger.info(MessageFormat.format("Executing {0} ...",processStrings));  final ProcessBuilder processBuilder=new ProcessBuilder(processStrings);  if (workingDirectory != null) {    final Path dir=Paths.get(workingDirectory);    if (Files.notExists(dir)) {      try {        Files.createDirectories(dir);      } catch (      IOException e) {        logger.warning("Could not create working directory: " + workingDirectory);        return -3;      }    } else     if (!Files.isDirectory(dir)) {      logger.warning(workingDirectory + " already exists but is not a directory.");      return -4;    }    final File directory=dir.toFile();    processBuilder.directory(directory);  }  processBuilder.redirectErrorStream(true);  Integer exitValue;  try {    logger.info("Starting external process ...");    final Process process=processBuilder.start();    sendInputStringToProcess(process);    handleProcessOutput(process);    try {      exitValue=process.waitFor();    } catch (    InterruptedException e) {      logger.warning("Interrupted while waiting, killing external process ...");      process.destroy();      exitValue=-2;    }    logger.info("External process exit value " + exitValue + ".");  } catch (  IOException e) {    logger.log(SEVERE,"Failed to start external Process: ",e.getCause());    exitValue=-1;  }  return exitValue;}  }
class C{  public InvalidCredentialsException(String message){  super(message);}  }
class C{  protected DisplayEdge(DisplayNode node1,DisplayNode node2,int type){  if (node1 == null) {    throw new NullPointerException("Node1 must not be null.");  }  if (node2 == null) {    throw new NullPointerException("Node2 must not be null.");  }  if (type < 0 || type > 4) {    throw new IllegalArgumentException("Type must be one of " + "DIRECTED, NONDIRECTED, " + "UNDIRECTED, PARTIALLY_ORIENTED, "+ " or BIDIRECTED.");  }  this.node1=node1;  this.node2=node2;  this.type=type;  this.mode=ANCHORED_UNSELECTED;  node1.addComponentListener(compHandler);  node2.addComponentListener(compHandler);  node1.addPropertyChangeListener(propertyChangeHandler);  node2.addPropertyChangeListener(propertyChangeHandler);  resetBounds();}  }
class C{  private void updateCmrManagementData(CmrStatusData cmrStatusData){  boolean dataLoaded=false;  if (null != cmrStatusData) {    dataLoaded=true;    double bufferMaxOccupancy=(double)cmrStatusData.getMaxBufferSize() / (1024 * 1024);    double bufferCurrentOccupancy=(double)cmrStatusData.getCurrentBufferSize() / (1024 * 1024);    bufferBar.setMaximum((int)Math.round(bufferMaxOccupancy));    bufferBar.setSelection((int)Math.round(bufferCurrentOccupancy));    int occupancy=(int)((100 * Math.round(bufferCurrentOccupancy)) / Math.round(bufferMaxOccupancy));    String occMb=NumberFormatter.humanReadableByteCount(cmrStatusData.getCurrentBufferSize());    String maxMb=NumberFormatter.humanReadableByteCount(cmrStatusData.getMaxBufferSize());    String string=occupancy + "% (" + occMb+ " / "+ maxMb+ ")";    bufferSize.setText(string);    DefaultData oldestData=cmrStatusData.getBufferOldestElement();    if (null != oldestData) {      bufferDate.setText(NumberFormatter.formatTime(oldestData.getTimeStamp().getTime()));    } else {      bufferDate.setText("-");    }    int spaceOccupancy=(int)((100 * (double)cmrStatusData.getStorageDataSpaceLeft()) / cmrStatusData.getStorageMaxDataSpace());    StringBuilder spaceLeftStringBuilder=new StringBuilder(String.valueOf(spaceOccupancy));    spaceLeftStringBuilder.append("% (");    spaceLeftStringBuilder.append(NumberFormatter.humanReadableByteCount(cmrStatusData.getStorageDataSpaceLeft()));    spaceLeftStringBuilder.append(" / ");    spaceLeftStringBuilder.append(NumberFormatter.humanReadableByteCount(cmrStatusData.getStorageMaxDataSpace()));    spaceLeftStringBuilder.append(')');    spaceLeftLabel.setText(spaceLeftStringBuilder.toString());    spaceLeftBar.setMaximum((int)(cmrStatusData.getStorageMaxDataSpace() / 1024 / 1024));    spaceLeftBar.setSelection((int)(cmrStatusData.getStorageDataSpaceLeft() / 1024 / 1024));    if (!cmrStatusData.isCanWriteMore()) {      spaceLeftBar.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_RED));      spaceLeftBar.setToolTipText("Space left is critically low and no write is possible anymore");    } else     if (cmrStatusData.isWarnSpaceLeftActive()) {      spaceLeftBar.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_DARK_YELLOW));      spaceLeftBar.setToolTipText("Space left is reaching critical level");    } else {      spaceLeftBar.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_GREEN));      spaceLeftBar.setToolTipText("Enough space left");    }    long uptimeMillis=cmrStatusData.getUpTime();    Date started=cmrStatusData.getDateStarted();    StringBuilder uptimeText=new StringBuilder(NumberFormatter.humanReadableMillisCount(uptimeMillis,true));    uptimeText.append(" (started ");    uptimeText.append(DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.SHORT).format(started));    uptimeText.append(')');    uptimeLabel.setText(uptimeText.toString());    Long databaseSize=cmrStatusData.getDatabaseSize();    if (null != databaseSize) {      databaseSizeLabel.setText(NumberFormatter.humanReadableByteCount(databaseSize.longValue()));    } else {      databaseSizeLabel.setText("n/a");    }  }  if (!dataLoaded) {    bufferDate.setText("");    bufferBar.setMaximum(Integer.MAX_VALUE);    bufferBar.setSelection(0);    bufferSize.setText("");    spaceLeftBar.setMaximum(Integer.MAX_VALUE);    spaceLeftBar.setSelection(0);    spaceLeftBar.setToolTipText("");    spaceLeftLabel.setText("");    uptimeLabel.setText("");    databaseSizeLabel.setText("");  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Object rv=Seeker.getInstance().getInputForCurrRecordingFile(getMediaFile(stack));  return (rv == null) ? null : rv.toString();}  }
class C{  private Map<Annotation,Position> createDroidsafeTextMarkers(){  final Map<Annotation,Position> annotationsToAdd=new HashMap<Annotation,Position>();  for (  Position pos : fTaintSourcesMap.keySet()) {    Set<CallLocationModel> sources=fTaintSourcesMap.get(pos);    Map<String,Set<CallLocationModel>> filteredSourcesMap=fProjectProcessor.computeFilteredTaintSourcesMap(sources);    if (!filteredSourcesMap.isEmpty()) {      try {        IMarker marker=TaintMarker.createMarker(fFile,pos,sources,filteredSourcesMap);        SimpleMarkerAnnotation annotation=new SimpleMarkerAnnotation(TaintMarker.ANNOTATION,marker);        annotationsToAdd.put(annotation,pos);        fTaintAnnotationMap.put(pos,annotation);      } catch (      CoreException e) {        DroidsafePluginUtilities.error("Failed to create taint marker at " + pos);        e.printStackTrace();      }    }  }  for (  Position pos : fDeadCodePositions) {    try {      IMarker marker=DeadCodeMarker.createMarker(fFile,pos);      SimpleMarkerAnnotation annotation=new SimpleMarkerAnnotation(DeadCodeMarker.ANNOTATION,marker);      annotationsToAdd.put(annotation,pos);    } catch (    CoreException e) {      DroidsafePluginUtilities.error("Failed to create dead code marker at " + pos);      e.printStackTrace();    }  }  return annotationsToAdd;}  }
class C{  public UniformDistribution estimate(double min,double max,final int count){  double grow=(count > 1) ? 0.5 * (max - min) / (count - 1) : 0.;  return new UniformDistribution(Math.max(min - grow,-Double.MAX_VALUE),Math.min(max + grow,Double.MAX_VALUE));}  }
class C{  @Override public synchronized void removeInstanceListener(InstanceListener dsl){  m_listeners.remove(dsl);}  }
class C{  public void rotateAroundY(float angle){  angle*=Math.PI / 180.0;  float f1=MathHelper.cos(angle);  float f2=MathHelper.sin(angle);  double d0=this.x * (double)f1 + this.z * (double)f2;  double d1=this.y;  double d2=this.z * (double)f1 - this.x * (double)f2;  this.set(d0,d1,d2);}  }
class C{  public static void main(String... a) throws Exception {  String fileName=a[0];  LineNumberReader in=new LineNumberReader(new BufferedReader(new FileReader(fileName)));  PrintWriter writer=new PrintWriter(new BufferedWriter(new FileWriter(fileName + ".filtered.txt")));  for (String s; (s=in.readLine()) != null; ) {    if (s.startsWith("Full thread")) {      do {        writer.println(s);        s=in.readLine();      } while (s != null && (s.length() == 0 || " \t\"".indexOf(s.charAt(0)) >= 0));    }  }}  }
class C{  public Iterator<String> userFlagIterator(){  return Arrays.asList(modifiedFlags.getUserFlags()).iterator();}  }
class C{  public boolean canUpload(){  return projectControl.controlForRef("refs/for/" + getRefName()).canPerform(Permission.PUSH) && canWrite();}  }
class C{  public static void validateWildcard(String uri,boolean useStrictValidation) throws ApplicationError {  validate(uri,useStrictValidation ? STRICT_URI_WILDCARD : LOOSE_URI_WILDCARD);}  }
class C{  private ByteBuffer decodeStream() throws IOException {  ByteBuffer outStream=null;  if (decodedStream != null) {    outStream=(ByteBuffer)decodedStream.get();  }  if (outStream == null) {    stream.rewind();    outStream=PDFDecoder.decodeStream(this,stream);    decodedStream=new SoftReference(outStream);  }  return outStream;}  }
class C{  public void trace(Object message,Throwable exception){  log(Level.FINEST,String.valueOf(message),exception);}  }
class C{  public boolean hunt(@NonNull Uri uri,@NonNull Callback callback){  if (sInstance == null) {    Log.e(TAG,"SoBitmap has been shutdown. No more request can be handled");    return false;  }  return hunt(null,uri,sInstance.defaultOps,callback);}  }
class C{  public SQLTransientConnectionException(Throwable cause){  super(cause);}  }
class C{  public boolean isSpecificSound(byte[] audioBytes){  int bytesPerSample=waveHeader.getBitsPerSample() / 8;  int numSamples=audioBytes.length / bytesPerSample;  if (numSamples > 0 && Integer.bitCount(numSamples) == 1) {    fftSampleSize=numSamples;    numFrequencyUnit=fftSampleSize / 2;    unitFrequency=(double)waveHeader.getSampleRate() / 2 / numFrequencyUnit;    lowerBoundary=(int)(highPass / unitFrequency);    upperBoundary=(int)(lowPass / unitFrequency);    Wave wave=new Wave(waveHeader,audioBytes);    short[] amplitudes=wave.getSampleAmplitudes();    Spectrogram spectrogram=wave.getSpectrogram(fftSampleSize,0);    double[][] spectrogramData=spectrogram.getAbsoluteSpectrogramData();    double[] spectrum=spectrogramData[0];    int frequencyUnitRange=upperBoundary - lowerBoundary + 1;    double[] rangedSpectrum=new double[frequencyUnitRange];    System.arraycopy(spectrum,lowerBoundary,rangedSpectrum,0,rangedSpectrum.length);    if (frequencyUnitRange <= spectrum.length) {      if (isPassedIntensity(spectrum)) {        if (isPassedStandardDeviation(spectrogramData)) {          if (isPassedZeroCrossingRate(amplitudes)) {            if (isPassedFrequency(rangedSpectrum)) {              return true;            }          }        }      }    } else {      System.err.println("is error: the wave needed to be higher sample rate");    }  } else {    System.out.println("The sample size must be a power of 2");  }  return false;}  }
class C{  public boolean isIgnoringElementContentWhitespace(){  return false;}  }
class C{  private void algorithmDouglasPeucker(ArrayList<Entry> entries,double epsilon,int start,int end){  if (end <= start + 1) {    return;  }  int maxDistIndex=0;  double distMax=0;  Entry firstEntry=entries.get(start);  Entry lastEntry=entries.get(end);  for (int i=start + 1; i < end; i++) {    double dist=pointToLineDistance(firstEntry,lastEntry,entries.get(i));    if (dist > distMax) {      distMax=dist;      maxDistIndex=i;    }  }  if (distMax > epsilon) {    keep[maxDistIndex]=true;    algorithmDouglasPeucker(entries,epsilon,start,maxDistIndex);    algorithmDouglasPeucker(entries,epsilon,maxDistIndex,end);  }}  }
class C{  public JSONArray put(int index,boolean value) throws JSONException {  this.put(index,value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  private void assertSectionEquals(QueryResponse distrib,QueryResponse nonDistrib,String section){  assertEquals(section + " debug should be equal",distrib.getDebugMap().get(section),nonDistrib.getDebugMap().get(section));}  }
class C{  public void load(Element element,Object o){  log.error("Unexpected call of load(Element, Object)");}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public long readLock(){  long s=state, next;  return ((whead == wtail && (s & ABITS) < RFULL && U.compareAndSwapLong(this,STATE,s,next=s + RUNIT)) ? next : acquireRead(false,0L));}  }
class C{  private void startWorkspaceSearchBarAnimation(final Workspace.State toWorkspaceState,int duration,AnimatorSet animation){  final SearchDropTargetBar.State toSearchBarState=toWorkspaceState.searchDropTargetBarState;  mLauncher.getSearchDropTargetBar().animateToState(toSearchBarState,duration,animation);}  }
class C{  public Matrix timesEquals(double s){  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=s * A[i][j];    }  }  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-06 08:48:10.281 -0400",hash_original_method="94C7CB9923A91019CD46D1D318199A81",hash_generated_method="5F31D4D19317A8E4B5AF030A72090CB3") public MediaSize asLandscape(){  if (!isPortrait()) {    return this;  }  return new MediaSize(mId,mLabel,mPackageName,Math.max(mWidthMils,mHeightMils),Math.min(mWidthMils,mHeightMils),mLabelResId);}  }
class C{  public static double weightedDot(final Vec w,final Vec x,final Vec y){  if (w.length() != x.length() || x.length() != y.length())   throw new ArithmeticException("All 3 vector inputs must have equal lengths");  double sum=0;  if (x.isSparse() && y.isSparse()) {    Iterator<IndexValue> xIter=x.iterator();    Iterator<IndexValue> yIter=y.iterator();    IndexValue xiv=xIter.hasNext() ? xIter.next() : badIV;    IndexValue yiv=yIter.hasNext() ? yIter.next() : badIV;    while (xiv != badIV && yiv != badIV) {      if (xiv.getIndex() < yiv.getIndex())       xiv=xIter.hasNext() ? xIter.next() : badIV; else       if (yiv.getIndex() > xiv.getIndex())       yiv=yIter.hasNext() ? yIter.next() : badIV; else {        sum+=w.get(xiv.getIndex()) * xiv.getValue() * yiv.getValue();        xiv=xIter.hasNext() ? xIter.next() : badIV;        yiv=yIter.hasNext() ? yIter.next() : badIV;      }    }  } else   if (x.isSparse()) {    for (    IndexValue iv : x) {      int indx=iv.getIndex();      sum+=w.get(indx) * iv.getValue() * y.get(indx);    }  } else   if (y.isSparse())   return weightedDot(w,y,x); else {    for (int i=0; i < w.length(); i++)     sum+=w.get(i) * x.get(i) * y.get(i);  }  return sum;}  }
class C{  @Override public void syntaxError(Recognizer<?,?> recognizer,Object offendingSymbol,int line,int charPositionInLine,String msg,RecognitionException e){  parseIssues.add(new ParseIssue(line,charPositionInLine,msg,currentFileName,ParseIssueType.SYNTAX_ERROR));  try {    setAtLeastOneError(true);    if (currentFileName == null)     log.error("line " + line + ":"+ charPositionInLine+ " "+ msg); else {      String fileName=currentFileName;      log.error(fileName + " line " + line+ ":"+ charPositionInLine+ " "+ msg);    }  } catch (  Exception e1) {    log.error("ERROR: while customizing error message:" + e1);  }}  }
class C{  Vset checkDeclaration(Environment env,Context ctx,Vset vset,int mod,Type t,Hashtable exp){  if (labels != null) {    env.error(where,"declaration.with.label",labels[0]);  }  if (field != null) {    if (ctx.getLocalClass(field.getName()) != null && field.isInnerClass()) {      env.error(where,"local.class.redefined",field.getName());    }    ctx.declare(env,field);    if (field.isInnerClass()) {      ClassDefinition body=field.getInnerClass();      try {        vset=body.checkLocalClass(env,ctx,vset,null,null,null);      } catch (      ClassNotFound ee) {        env.error(where,"class.not.found",ee.name,opNames[op]);      }      return vset;    }    vset.addVar(field.number);    return (expr != null) ? expr.checkValue(env,ctx,vset,exp) : vset;  }  Expression e=expr;  if (e.op == ASSIGN) {    expr=((AssignExpression)e).right;    e=((AssignExpression)e).left;  } else {    expr=null;  }  boolean declError=t.isType(TC_ERROR);  while (e.op == ARRAYACCESS) {    ArrayAccessExpression array=(ArrayAccessExpression)e;    if (array.index != null) {      env.error(array.index.where,"array.dim.in.type");      declError=true;    }    e=array.right;    t=Type.tArray(t);  }  if (e.op == IDENT) {    Identifier id=((IdentifierExpression)e).id;    if (ctx.getLocalField(id) != null) {      env.error(where,"local.redefined",id);    }    field=new LocalMember(e.where,ctx.field.getClassDefinition(),mod,t,id);    ctx.declare(env,field);    if (expr != null) {      vset=expr.checkInitializer(env,ctx,vset,t,exp);      expr=convert(env,ctx,t,expr);      field.setValue(expr);      if (field.isConstant()) {        field.addModifiers(M_INLINEABLE);      }      vset.addVar(field.number);    } else     if (declError) {      vset.addVar(field.number);    } else {      vset.addVarUnassigned(field.number);    }    return vset;  }  env.error(e.where,"invalid.decl");  return vset;}  }
class C{  @Override public final String toString(){  return name;}  }
class C{  public void write(Object[] values,EventBean theEvent){  MappedEventBean mappedEvent=(MappedEventBean)theEvent;  Map<String,Object> map=mappedEvent.getProperties();  for (int i=0; i < properties.length; i++) {    map.put(properties[i],values[i]);  }}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  public JBBPOut Bit(final byte value) throws IOException {  assertNotEnded();  if (this.processCommands) {    this._writeBits(JBBPBitNumber.BITS_1,value);  }  return this;}  }
class C{  public void info(Object message){  ri.info(message);}  }
class C{  private void populateIndicatorCandleSeries(Tradestrategy tradestrategy,ZonedDateTime startDate,ZonedDateTime endDate) throws PersistentModelException {  CandleDataset candleDataset=(CandleDataset)tradestrategy.getStrategyData().getIndicatorByType(IndicatorSeries.CandleSeries);  if (null != candleDataset) {    for (int seriesIndex=0; seriesIndex < candleDataset.getSeriesCount(); seriesIndex++) {      CandleSeries series=candleDataset.getSeries(seriesIndex);      Contract contract=this.tradePersistentModel.findContractByUniqueKey(series.getSecType(),series.getSymbol(),series.getExchange(),series.getCurrency(),null);      if (null == contract)       continue;      Tradestrategy childTradestrategy=new Tradestrategy(contract,tradestrategy.getTradingday(),new Strategy(),tradestrategy.getPortfolio(),new BigDecimal(0),null,null,false,tradestrategy.getChartDays(),tradestrategy.getBarSize());      childTradestrategy.setDirty(false);      List<Candle> indicatorCandles=this.tradePersistentModel.findCandlesByContractDateRangeBarSize(childTradestrategy.getContract().getIdContract(),startDate,endDate,childTradestrategy.getBarSize());      if (indicatorCandles.isEmpty()) {        _log.warn("No data available for " + childTradestrategy.getContract().getSymbol() + " and Tradingday: "+ startDate+ " to "+ endDate+ " and barSize: "+ childTradestrategy.getBarSize());      } else {        StrategyData strategyData=StrategyData.create(childTradestrategy);        CandleDataset.populateSeries(strategyData,indicatorCandles);        indicatorCandles.clear();        CandleSeries childSeries=strategyData.getBaseCandleSeries();        childSeries.setDisplaySeries(series.getDisplaySeries());        childSeries.setSeriesRGBColor(series.getSeriesRGBColor());        childSeries.setSymbol(series.getSymbol());        childSeries.setSecType(series.getSecType());        childSeries.setCurrency(series.getCurrency());        childSeries.setExchange(series.getExchange());        candleDataset.setSeries(seriesIndex,childSeries);      }    }  }}  }
class C{  public TFSTeamProjectCollection promptForConnection(final URI serverURI,final Credentials credentials,final String errorMessage){  return null;}  }
class C{  private static void fixPrng(){  if (!prngFixed.get()) {synchronized (PrngFixes.class) {      if (!prngFixed.get()) {        PrngFixes.apply();        prngFixed.set(true);      }    }  }}  }
class C{  private boolean isUnderExternalThreshold(File apkFile,boolean isForwardLocked) throws IOException {  if (Environment.isExternalStorageEmulated()) {    return false;  }  final int sizeMb=calculateContainerSize(apkFile,isForwardLocked);  final int availSdMb;  if (Environment.MEDIA_MOUNTED.equals(Environment.getExternalStorageState())) {    final StatFs sdStats=new StatFs(Environment.getExternalStorageDirectory().getPath());    final int blocksToMb=(1 << 20) / sdStats.getBlockSize();    availSdMb=sdStats.getAvailableBlocks() / blocksToMb;  } else {    availSdMb=-1;  }  return availSdMb > sizeMb;}  }
class C{  public void configureRemoteConnection(String remoteHostName,int timeoutSec) throws LocoNetException {  serverName=remoteHostName;  pollTimeout=timeoutSec * 1000;  if (log.isDebugEnabled()) {    log.debug("configureRemoteConnection: " + remoteHostName + " "+ timeoutSec);  }  try {    System.setSecurityManager(new java.rmi.RMISecurityManager());    log.debug("security manager set, set interface to //" + remoteHostName + "//"+ LnMessageServer.serviceName);    LnMessageServerInterface lnServer=(LnMessageServerInterface)java.rmi.Naming.lookup("//" + serverName + "/"+ LnMessageServer.serviceName);    lnMessageBuffer=lnServer.getMessageBuffer();    lnMessageBuffer.enable(0);    pollThread=new LnMessageClientPollThread(this);  } catch (  Exception ex) {    log.error("Exception while trying to connect: " + ex);    throw new LocoNetException("Failed to Connect to Server: " + serverName);  }}  }
class C{  public int yearOfAward(){  return dateAwarded != null ? dateAwarded.get(Calendar.YEAR) : -1;}  }
class C{  private static Point2D.Double v2Scale(Point2D.Double v,double newlen){  double len=v2Length(v);  if (len != 0.0) {    v.x*=newlen / len;    v.y*=newlen / len;  }  return v;}  }
class C{  private void resize(int c){  int[] newItems=new int[c];  for (int i=0; i < items.length; i+=1) {    newItems[i]=items[i];  }  items=newItems;}  }
class C{  private List<VPlexMigrationInfo> migrateDistributedVirtualVolume(String migrationName,VPlexVirtualVolumeInfo virtualVolumeInfo,Map<VolumeInfo,VPlexStorageVolumeInfo> storageVolumeInfoMap,boolean startNow,String transferSize) throws VPlexApiException {  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  List<VPlexExtentInfo> srcExtentInfoList=new ArrayList<VPlexExtentInfo>();  String distributedDeviceName=virtualVolumeInfo.getSupportingDevice();  VPlexDistributedDeviceInfo ddInfo=discoveryMgr.findDistributedDevice(distributedDeviceName);  discoveryMgr.setSupportingComponentsForDistributedDevice(ddInfo);  List<VPlexDeviceInfo> localDeviceInfoList=ddInfo.getLocalDeviceInfo();  for (  VPlexDeviceInfo localDeviceInfo : localDeviceInfoList) {    String localDeviceName=localDeviceInfo.getName();    s_logger.info("Local device: {}",localDeviceName);    List<VPlexExtentInfo> localDeviceExtentInfoList=localDeviceInfo.getExtentInfo();    int extentCount=localDeviceExtentInfoList.size();    if (extentCount != 1) {      s_logger.info("Extent count for local device {} is {}",localDeviceName,extentCount);      continue;    }    srcExtentInfoList.add(discoveryMgr.findExtent(localDeviceExtentInfoList.get(0).getName()));  }  VPlexApiVirtualVolumeManager virtualVolumeMgr=_vplexApiClient.getVirtualVolumeManager();  virtualVolumeMgr.claimStorageVolumes(storageVolumeInfoMap,false);  s_logger.info("Claimed storage volumes");  List<VPlexMigrationInfo> migrationInfoList=new ArrayList<VPlexMigrationInfo>();  try {    List<VPlexStorageVolumeInfo> storageVolumeInfoList=new ArrayList<VPlexStorageVolumeInfo>(storageVolumeInfoMap.values());    virtualVolumeMgr.createExtents(storageVolumeInfoList);    s_logger.info("Created extents on storage volumes");    List<VPlexExtentInfo> tgtExtentInfoList=discoveryMgr.findExtents(storageVolumeInfoList);    s_logger.info("Found the target extents");    Map<VPlexExtentInfo,VPlexExtentInfo> extentMigrationMap=new HashMap<VPlexExtentInfo,VPlexExtentInfo>();    for (    VPlexExtentInfo tgtExtentInfo : tgtExtentInfoList) {      String clusterId=tgtExtentInfo.getClusterId();      for (      VPlexExtentInfo srcExtentInfo : srcExtentInfoList) {        if (clusterId.equals(srcExtentInfo.getClusterId())) {          extentMigrationMap.put(tgtExtentInfo,srcExtentInfo);          break;        }      }    }    int migrationCount=1;    Iterator<Entry<VPlexExtentInfo,VPlexExtentInfo>> tgtExtentIter=extentMigrationMap.entrySet().iterator();    while (tgtExtentIter.hasNext()) {      Entry<VPlexExtentInfo,VPlexExtentInfo> entry=tgtExtentIter.next();      VPlexExtentInfo tgtExtentInfo=entry.getKey();      VPlexExtentInfo srcExtentInfo=entry.getValue();      StringBuilder migrationNameBuilder=new StringBuilder(migrationName);      if (extentMigrationMap.size() > 1) {        migrationNameBuilder.append("_");        migrationNameBuilder.append(String.valueOf(migrationCount++));      }      VPlexMigrationInfo migrationInfo=migrateResource(migrationNameBuilder.toString(),srcExtentInfo,tgtExtentInfo,false,startNow,transferSize);      migrationInfo.setVirtualVolumeInfo(virtualVolumeInfo);      migrationInfoList.add(migrationInfo);    }    return migrationInfoList;  } catch (  Exception e) {    s_logger.info("Exception occurred migrating distributed volume, attempting to cleanup VPLEX artifacts");    try {      if (!migrationInfoList.isEmpty()) {        for (        VPlexMigrationInfo migrationInfo : migrationInfoList) {          cancelMigrations(Collections.singletonList(migrationInfo.getName()),true,true);        }      }      List<VolumeInfo> nativeVolumeInfoList=new ArrayList<VolumeInfo>();      nativeVolumeInfoList.addAll(storageVolumeInfoMap.keySet());      virtualVolumeMgr.deleteVirtualVolume(nativeVolumeInfoList);    } catch (    Exception ex) {      s_logger.error("Failed attempting to cleanup VPLEX after failed attempt " + "to migrate distributed virtual volume {}",virtualVolumeInfo.getPath(),ex);    }    throw e;  }}  }
class C{  public TypePathExtractor(Class<T> focusClass,String typePath){  this(focusClass,typePath,false,false,true);}  }
class C{  private void updateToggleButton(Action action,Icon icon){  toggleButton.setAction(action);  toggleButton.setIcon(icon);  toggleButton.setText(null);}  }
class C{  protected void initializeAllLiveAttributes(){  super.initializeAllLiveAttributes();  initializeLiveAttributes();}  }
class C{  public void clearConnParams(){  _host=null;  _userName=null;  _password=null;}  }
class C{  public final boolean isSpill(){  return (value > 0);}  }
class C{  public InputStream download(String artifact,String version) throws IOException {  Path path=getArtifact(artifact,version);  if (!Files.exists(path)) {    throw new ArtifactNotFoundException(artifact,version);  }  return new BufferedInputStream(Files.newInputStream(path));}  }
class C{  public int readBytes(byte[] buffer,int offset,int length) throws IOException {  int readLength=0;  if (_chunkLength == END_OF_DATA) {    _chunkLength=0;    return -1;  } else   if (_chunkLength == 0) {    int tag=read();switch (tag) {case 'N':      return -1;case 'B':case 'b':    _isLastChunk=tag == 'B';  _chunkLength=(read() << 8) + read();break;default :throw new IOException("expected 'B' at " + (char)tag);}}while (length > 0) {if (_chunkLength > 0) {buffer[offset++]=(byte)read();_chunkLength--;length--;readLength++;} else if (_isLastChunk) {if (readLength == 0) return -1; else {_chunkLength=END_OF_DATA;return readLength;}} else {int tag=read();switch (tag) {case 'B':case 'b':_isLastChunk=tag == 'B';_chunkLength=(read() << 8) + read();break;default :throw new IOException("expected 'B' at " + (char)tag);}}}if (readLength == 0) return -1; else if (_chunkLength > 0 || !_isLastChunk) return readLength; else {_chunkLength=END_OF_DATA;return readLength;}}  }
class C{  public S1Interval(double lo,double hi){  this(lo,hi,false);}  }
class C{  @Deprecated public CronTriggerImpl(String name){  this(name,null);}  }
class C{  void addAddress(final int latchedAddr,final int size){  if (latchedAddr == 0)   return;  m_allocationWriteLock.lock();  try {    FixedAllocator alloc=null;    try {      alloc=getBlock(latchedAddr);    } catch (    final PhysicalAddressResolutionException par) {    }    final int size2=size < 0 ? -size : size;    if (alloc == null) {      final int i=fixedAllocatorIndex(size2);      final int block=64 * m_allocSizes[i];      final ArrayList<FixedAllocator> list=m_freeFixed[i];      if (log.isTraceEnabled())       log.trace("Creating new Allocator for address: " + latchedAddr);      final FixedAllocator allocator=new FixedAllocator(this,block);      allocator.setFreeList(list);      allocator.setIndex(m_allocs.size());      m_allocs.add(allocator);      assert allocator == getBlock(latchedAddr);      alloc=allocator;    }    assert size2 <= alloc.getSlotSize();    if (size > 0) {      alloc.setAddressExternal(latchedAddr);    }  }  finally {    m_allocationWriteLock.unlock();  }}  }
class C{  public void testComplexUrlInvalidWithAnchor(){  setParameterToInitMockMethod("http://myurl.com/#/a/b/c/index.html?firstParam=myParam",TestSolution.PASSED);  SeoRule01071 test=new SeoRule01071();  test.setProcessResultDataService(mockProcessResultDataService);  test.setTest(mockTest);  ProcessResult processResult=test.processImpl(mockSspHandler);  assertEquals(mockDefiniteResult,processResult);}  }
class C{  public <T extends Comparable<T>>List<T> sortDocsUsingDocQuery(List<T> recentItems,List<T> sortItems,QueryTransform<T> docTransform,Set<T> exclusions){  boolean useRank=false;  boolean bestScore=false;  boolean useThreshold=false;  double threshold=0.999;  List<T> result=new ArrayList<>();  Map<Vector,T> sortVectors=new HashMap<>();  Map<Vector,Double> scores=new HashMap<>();  boolean comparisonsMade=false;  boolean foundItemsToSort=false;  List<T> alreadySeen=new ArrayList<>();  List<T> notFound=new ArrayList<>();  for (  T item : sortItems) {    if (!recentItems.contains(item) && !exclusions.contains(item)) {      Vector v=docVecReader.getVector(docTransform.toSV(item));      if (v != null && !v.isZeroVector()) {        foundItemsToSort=true;        sortVectors.put(v,item);        scores.put(v,0D);      } else {        notFound.add(item);        logger.warn("Can't find vector for sort item " + item);      }    } else {      if (logger.isDebugEnabled())       logger.debug("Not sorting already seen article " + item);      alreadySeen.add(item);    }  }  if (!foundItemsToSort) {    logger.debug("No sort items so returning empty list");    return new ArrayList<>();  }  for (  T recent : recentItems) {    if (logger.isDebugEnabled())     logger.debug("Recent item " + recent);    String recentDoc=docTransform.toSV(recent);    Vector vectorRecent=docVecReader.getVector(recentDoc);    if (vectorRecent != null && !vectorRecent.isZeroVector()) {      comparisonsMade=true;      if (useRank) {        Map<Vector,Double> scoresLocal=new HashMap<>();        for (        Map.Entry<Vector,T> e : sortVectors.entrySet())         scoresLocal.put(e.getKey(),vectorRecent.measureOverlap(e.getKey()));        List<Vector> orderedLocal=CollectionTools.sortMapAndLimitToList(scoresLocal,scoresLocal.size());        double count=1;        for (        Vector vOrdered : orderedLocal) {          scores.put(vOrdered,scores.get(vOrdered) + count);          count++;        }      } else {        for (        Map.Entry<Vector,T> e : sortVectors.entrySet()) {          double overlap=vectorRecent.measureOverlap(e.getKey());          double current=scores.get(e.getKey());          if (!Double.isNaN(overlap)) {            if (logger.isDebugEnabled())             logger.debug("Overlap with " + e.getValue() + " is "+ overlap);            if (bestScore) {              if (overlap > current)               scores.put(e.getKey(),overlap);            } else {              if (useThreshold) {                if (current < threshold && overlap > current)                 scores.put(e.getKey(),overlap); else                 if (current > threshold && overlap > threshold)                 scores.put(e.getKey(),overlap + current);              } else               scores.put(e.getKey(),overlap + current);            }          }        }      }    } else     logger.warn("Can't get vector for recent item " + recent);  }  if (comparisonsMade) {    List<Vector> ordered;    if (useRank)     ordered=CollectionTools.sortMapAndLimitToList(scores,scores.size(),false); else     ordered=CollectionTools.sortMapAndLimitToList(scores,scores.size());    for (    Vector vOrdered : ordered) {      if (logger.isDebugEnabled())       logger.debug("Item " + sortVectors.get(vOrdered) + " has score "+ scores.get(vOrdered));      result.add(sortVectors.get(vOrdered));    }    for (    T seenItem : alreadySeen) {      if (logger.isDebugEnabled())       logger.debug("Adding already seen item " + seenItem + " to end of list");      result.add(seenItem);    }    for (    T notFoundItem : notFound) {      if (logger.isDebugEnabled())       logger.debug("Adding not found item " + notFoundItem + " to end of list");      result.add(notFoundItem);    }    return result;  } else {    logger.debug("No comparisons made so returning empty list");    return new ArrayList<>();  }}  }
class C{  private ZoneRules(ZoneOffset offset){  this.standardOffsets=new ZoneOffset[1];  this.standardOffsets[0]=offset;  this.standardTransitions=EMPTY_LONG_ARRAY;  this.savingsInstantTransitions=EMPTY_LONG_ARRAY;  this.savingsLocalTransitions=EMPTY_LDT_ARRAY;  this.wallOffsets=standardOffsets;  this.lastRules=EMPTY_LASTRULES;}  }
class C{  public void shouldGenerateThumbnails(boolean generateThumbnails){  this.generateThumbnails=generateThumbnails;}  }
class C{  @Override public void onTcpReadable(PseudoTCPBase tcp){  if (tcp == getRemoteTcp()) {    try {      readData();      int received, required;      received=recvStream.size();      required=sendStreamSize;      if (logger.isLoggable(Level.FINER)) {        logger.log(Level.FINER,"Receivied: " + received + " required: "+ required);      }      if (received == required) {        onTcpClosed(getRemoteTcp(),null);      }    } catch (    IOException ex) {      throw new RuntimeException(ex);    }  }}  }
class C{  public static boolean isExactSuggestion(GroupReference ref,String name){  return ref.getName().equalsIgnoreCase(name) || ref.getUUID().get().equals(name);}  }
class C{  private void handleListener(){  Attributes attrs=validatorInfo.getAttributes();  String ln=validatorInfo.getLocalName();  boolean hasType=false;  boolean hasBinding=false;  for (int i=0; i < attrs.getLength(); i++) {    if (attrs.getLocalName(i).equals("type")) {      hasType=true;    }    if (attrs.getLocalName(i).equals("binding")) {      hasBinding=true;    }  }  if (failed=(!hasBinding && !hasType)) {    Object[] obj=new Object[1];    obj[0]=ln;    ResourceBundle rb=ResourceBundle.getBundle(RIConstants.TLV_RESOURCE_LOCATION);    failureMessages.append(MessageFormat.format(rb.getString("TLV_LISTENER_ERROR"),obj));    failureMessages.append("\n");  }}  }
class C{  public static void sort(short[] array,int start,int end){  if (array == null) {    throw new NullPointerException();  }  checkBounds(array.length,start,end);  sort(start,end,array);}  }
class C{  public Class loadClass(String className,ClassLoader classLoader) throws ClassNotFoundException {  String arrayClassName=prepareArrayClassnameForLoading(className);  if ((className.indexOf('.') == -1) && (arrayClassName == null)) {    int primitiveNdx=getPrimitiveClassNameIndex(className);    if (primitiveNdx >= 0) {      return PRIMITIVE_TYPES[primitiveNdx];    }  }  if (classLoader != null) {    Class klass=loadClass(className,arrayClassName,classLoader);    if (klass != null) {      return klass;    }  }  ClassLoader currentThreadClassLoader=Thread.currentThread().getContextClassLoader();  if ((currentThreadClassLoader != null) && (currentThreadClassLoader != classLoader)) {    Class klass=loadClass(className,arrayClassName,currentThreadClassLoader);    if (klass != null) {      return klass;    }  }  Class callerClass=ReflectUtil.getCallerClass();  ClassLoader callerClassLoader=callerClass.getClassLoader();  if ((callerClassLoader != classLoader) && (callerClassLoader != currentThreadClassLoader)) {    Class klass=loadClass(className,arrayClassName,callerClassLoader);    if (klass != null) {      return klass;    }  }  if (arrayClassName != null) {    try {      return loadArrayClassByComponentType(className,classLoader);    } catch (    ClassNotFoundException ignore) {    }  }  throw new ClassNotFoundException("Class not found: " + className);}  }
class C{  public EmbeddedSolrServer(NodeConfig nodeConfig,String defaultCoreName){  this(load(new CoreContainer(nodeConfig)),defaultCoreName);}  }
class C{  public static int countNnz(String[] cols,int pos,int len){  int lnnz=0;  for (int i=pos; i < pos + len; i++) {    String col=cols[i];    lnnz+=(!col.isEmpty() && !col.equals("0") && !col.equals("0.0")) ? 1 : 0;  }  return lnnz;}  }
class C{  public String toHTML(){  return stringBuilder.toString();}  }
class C{  public static Content read(File file) throws IOException {  try {    return new Content(readText(file,UTF_8),false);  } catch (  MalformedInputException e) {    return new Content(Strings.toHex(readBinary(file)),true);  }}  }
class C{  public boolean isVerified(){  return (tsigState == TSIG_VERIFIED);}  }
class C{  public void mousePressed(MouseEvent me){  if (!MouseEvent.getMouseModifiersText(me.getModifiers()).equals("Shift+Button1")) {    return;  }  boolean overNode=false;  for (  DefaultNode node : this.paintedNodes) {    if (node.isPointOverNode(me.getPoint())) {      overNode=true;      if (!(node instanceof IndicatorNode)) {        if (this.component.getShiftSelectedNode() != null) {          this.paintedNodes.add((DefaultNode)this.component.getShiftSelectedNode().getNode());          this.paintedNodes.remove(this.component.getShiftSelectedNode());        }        this.paintedNodes.remove(node);        this.component.setShiftSelectedNode(new IndicatorNode(node,this.color,5));        this.paintedNodes.add(this.component.getShiftSelectedNode());        break;      }    }  }  if (!overNode) {    if (this.component.getShiftSelectedNode() != null) {      this.paintedNodes.add((DefaultNode)this.component.getShiftSelectedNode().getNode());      this.paintedNodes.remove(this.component.getShiftSelectedNode());      this.component.setShiftSelectedNode(null);    }  }  this.component.repaint();}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("void arraycopy(java.lang.Object,int,java.lang.Object,int,int)")) {    java_lang_System_arraycopy(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("void setIn0(java.io.InputStream)")) {    java_lang_System_setIn0(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("void setOut0(java.io.PrintStream)")) {    java_lang_System_setOut0(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("void setErr0(java.io.PrintStream)")) {    java_lang_System_setErr0(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.util.Properties initProperties(java.util.Properties)")) {    java_lang_System_initProperties(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.String mapLibraryName(java.lang.String)")) {    java_lang_System_mapLibraryName(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Class getCallerClass()")) {    java_lang_System_getCallerClass(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  private Object executeColumn(SQL sql,Query qr,Column column,int row) throws PageException {  if (column.getColumn().equals("?")) {    int pos=column.getColumnIndex();    if (sql.getItems().length <= pos)     throw new DatabaseException("invalid syntax for SQL Statement",null,sql,null);    return sql.getItems()[pos].getValueForCF();  }  return column.getValue(qr,row);}  }
class C{  public void testJSR223Sandboxed() throws Exception {  ScriptEngineManager manager=new ScriptEngineManager();  ScriptEngine engine=manager.getEngineByName("js");  String expressionFib="fib(num); function fib(n) { if(n <= 1) return n; return fib(n-1) + fib(n-2); };";  String expressionTwo="var words = new java.util.ArrayList();\n" + "words.add('wordOne');\n" + "words.add('wordTwo');\n"+ "words;\n";  Compilable compilingEngine=(Compilable)engine;  CompiledScript script=null;  try {    script=compilingEngine.compile(expressionTwo);  } catch (  ScriptException ex) {    throw new RuntimeException("Script compiler exception: " + JSR223Helper.getScriptCompileMsg(ex),ex);  }  Bindings bindings=engine.createBindings();  bindings.put("epl",new MyEPLContext());  Object result=script.eval(bindings);  System.out.println(result + " typed " + (result != null ? result.getClass() : "null"));  long start=System.currentTimeMillis();  for (int i=0; i < 1; i++) {    script.eval(bindings);  }  long end=System.currentTimeMillis();  long delta=end - start;  System.out.println("delta=" + delta);}  }
class C{  public boolean supportsMultipleResultSets() throws SQLException {  return false;}  }
class C{  public void actionPerformed(ActionEvent e){  if (!this.equals(e.getSource())) {    Debug.error("Wiring is hopelessly wrong in LayersMenu");  }switch (menuType) {case LAYERS_ON_OFF:    layerHandler.turnLayerOn(getState(),getLayer());  break;case PALETTES_ON_OFF:if (getState()) showPalette(); else hidePalette();break;default :System.err.println("LayersMenu: unknown menuType!");}}  }
class C{  public static Checksum parse(DerInputStream data,byte explicitTag,boolean optional) throws Asn1Exception, IOException {  if ((optional) && (((byte)data.peekByte() & (byte)0x1F) != explicitTag)) {    return null;  }  DerValue der=data.getDerValue();  if (explicitTag != (der.getTag() & (byte)0x1F)) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  } else {    DerValue subDer=der.getData().getDerValue();    return new Checksum(subDer);  }}  }
class C{  private int diff_cleanupSemanticScore(String one,String two){  if (one.length() == 0 || two.length() == 0) {    return 6;  }  char char1=one.charAt(one.length() - 1);  char char2=two.charAt(0);  boolean nonAlphaNumeric1=!Character.isLetterOrDigit(char1);  boolean nonAlphaNumeric2=!Character.isLetterOrDigit(char2);  boolean whitespace1=nonAlphaNumeric1 && Character.isWhitespace(char1);  boolean whitespace2=nonAlphaNumeric2 && Character.isWhitespace(char2);  boolean lineBreak1=whitespace1 && Character.getType(char1) == Character.CONTROL;  boolean lineBreak2=whitespace2 && Character.getType(char2) == Character.CONTROL;  boolean blankLine1=lineBreak1 && BLANKLINEEND.matcher(one).find();  boolean blankLine2=lineBreak2 && BLANKLINESTART.matcher(two).find();  if (blankLine1 || blankLine2) {    return 5;  } else   if (lineBreak1 || lineBreak2) {    return 4;  } else   if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {    return 3;  } else   if (whitespace1 || whitespace2) {    return 2;  } else   if (nonAlphaNumeric1 || nonAlphaNumeric2) {    return 1;  }  return 0;}  }
class C{  public long writeLock(){  long s, next;  return ((((s=state) & ABITS) == 0L && U.compareAndSwapLong(this,STATE,s,next=s + WBIT)) ? next : acquireWrite(false,0L));}  }
class C{  public void info(String message,Object... args){  org.eclipse.che.ide.util.loging.Log.info(TourExtension.class,message);}  }
class C{  public static void configureParquetFileSet(String configuredSchema,FileSetProperties.Builder properties){  String lowerCaseSchema=configuredSchema.toLowerCase();  Schema avroSchema=parseAvroSchema(lowerCaseSchema,configuredSchema);  String hiveSchema=parseHiveSchema(lowerCaseSchema,configuredSchema);  properties.setInputFormat(AvroParquetInputFormat.class).setOutputFormat(AvroParquetOutputFormat.class).setEnableExploreOnCreate(true).setExploreFormat("parquet").setExploreSchema(hiveSchema.substring(1,hiveSchema.length() - 1)).add(DatasetProperties.SCHEMA,lowerCaseSchema);  Job job=createJobForConfiguration();  Configuration hConf=job.getConfiguration();  hConf.clear();  AvroParquetInputFormat.setAvroReadSchema(job,avroSchema);  for (  Map.Entry<String,String> entry : hConf) {    properties.setInputProperty(entry.getKey(),entry.getValue());  }  hConf.clear();  AvroParquetOutputFormat.setSchema(job,avroSchema);  for (  Map.Entry<String,String> entry : hConf) {    properties.setOutputProperty(entry.getKey(),entry.getValue());  }}  }
class C{  public static void initServiceCache(Map<String,IBinder> cache){}  }
class C{  @SuppressWarnings("unchecked") public void submitReading(Reading s){  Vector<ReadingListener> v;synchronized (this) {    v=(Vector<ReadingListener>)readingListeners.clone();  }  if (log.isDebugEnabled()) {    log.debug("notify " + v.size() + " ReadingListeners about item ");  }  int cnt=v.size();  for (int i=0; i < cnt; i++) {    ReadingListener client=v.elementAt(i);    javax.swing.SwingUtilities.invokeLater(new ForwardReading(s,client));  }}  }
class C{  protected void fillArc(Graphics2D g2,Rectangle2D area,double minValue,double maxValue,Paint paint,boolean dial){  ParamChecks.nullNotPermitted(paint,"paint");  double startAngle=valueToAngle(maxValue);  double endAngle=valueToAngle(minValue);  double extent=endAngle - startAngle;  double x=area.getX();  double y=area.getY();  double w=area.getWidth();  double h=area.getHeight();  int joinType=Arc2D.OPEN;  if (this.shape == DialShape.PIE) {    joinType=Arc2D.PIE;  } else   if (this.shape == DialShape.CHORD) {    if (dial && this.meterAngle > 180) {      joinType=Arc2D.CHORD;    } else {      joinType=Arc2D.PIE;    }  } else   if (this.shape == DialShape.CIRCLE) {    joinType=Arc2D.PIE;    if (dial) {      extent=360;    }  } else {    throw new IllegalStateException("DialShape not recognised.");  }  g2.setPaint(paint);  Arc2D.Double arc=new Arc2D.Double(x,y,w,h,startAngle,extent,joinType);  g2.fill(arc);}  }
class C{  @Override public void mouseWheel(GlobalMouseEvent event){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:00.291 -0500",hash_original_method="8E4AD7240C251CF428BBDBBDF32B610B",hash_generated_method="2A2A56198B9E7D41956B2035F014B4D4") public int[] answerSubnegotiation(int suboptionData[],int suboptionLength){  return null;}  }
class C{  public DumpInfo dumpCacheContent(){synchronized (mCountingBitmapCache) {    DumpInfo<K,V> dumpInfo=new DumpInfo<>(mCountingBitmapCache.getSizeInBytes(),mCountingBitmapCache.getEvictionQueueSizeInBytes(),mCountingBitmapCache.mMemoryCacheParams);    final List<LinkedHashMap.Entry<K,CountingMemoryCache.Entry<K,V>>> cachedEntries=mCountingBitmapCache.mCachedEntries.getMatchingEntries(null);    for (    LinkedHashMap.Entry<K,CountingMemoryCache.Entry<K,V>> cachedEntry : cachedEntries) {      CountingMemoryCache.Entry<K,V> entry=cachedEntry.getValue();      DumpInfoEntry<K,V> dumpEntry=new DumpInfoEntry<>(entry.key,entry.valueRef);      if (entry.clientCount > 0) {        dumpInfo.sharedEntries.add(dumpEntry);      } else {        dumpInfo.lruEntries.add(dumpEntry);      }    }    for (    Map.Entry<Bitmap,Object> entry : mCountingBitmapCache.mOtherEntries.entrySet()) {      if (entry != null && !entry.getKey().isRecycled()) {        dumpInfo.otherEntries.put(entry.getKey(),entry.getValue());      }    }    return dumpInfo;  }}  }
class C{  public static void init(FileDownloadConfiguration configuration){  if (configuration == null) {    return;  }  Context context=configuration.getContext();  FileDownloadManager.getInstance(context).init(configuration);}  }
class C{  public static byte[] decode(int n,int t,GF2Vector vec){  if ((vec.getLength() != n) || (vec.getHammingWeight() != t)) {    throw new IllegalArgumentException("vector has wrong length or hamming weight");  }  int[] vecArray=vec.getVecArray();  BigInteger bc=IntegerFunctions.binomial(n,t);  BigInteger d=ZERO;  int nn=n;  int tt=t;  for (int i=0; i < n; i++) {    bc=bc.multiply(BigInteger.valueOf(nn - tt)).divide(BigInteger.valueOf(nn));    nn--;    int q=i >> 5;    int e=vecArray[q] & (1 << (i & 0x1f));    if (e != 0) {      d=d.add(bc);      tt--;      if (nn == tt) {        bc=ONE;      } else {        bc=bc.multiply(BigInteger.valueOf(tt + 1)).divide(BigInteger.valueOf(nn - tt));      }    }  }  return BigIntUtils.toMinimalByteArray(d);}  }
class C{  public static void checkForRemainingOptions(String[] options) throws Exception {  int illegalOptionsFound=0;  StringBuffer text=new StringBuffer();  if (options == null) {    return;  }  for (int i=0; i < options.length; i++) {    if (options[i].length() > 0) {      illegalOptionsFound++;      text.append(options[i] + ' ');    }  }  if (illegalOptionsFound > 0) {    throw new Exception("Illegal options: " + text);  }}  }
class C{  public Matrix arrayTimesEquals(Matrix B){  checkMatrixDimensions(B);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=A[i][j] * B.A[i][j];    }  }  return this;}  }
class C{  public boolean isUseSiteStructuralTyping(){  return ((this.getDefinedTypingStrategy() != TypingStrategy.NOMINAL) && (this.getDefinedTypingStrategy() != TypingStrategy.DEFAULT));}  }
class C{  public SessionEvent(Object source,SessionNode node,int type){  super(source);  if (node != null) {    this.node=node;  } else {    throw new NullPointerException();  }switch (type) {case NODE_ADDED:case NODE_REMOVED:case MODEL_CREATED:case MODEL_DESTROYED:case MODEL_UNCLEAR:case REPETITION_CHANGED:    this.type=type;  break;default :throw new IllegalArgumentException("Not the type of event that " + "requires one session node " + "as argument.");}}  }
class C{  public Macros(){  macros=new HashMap<String,RegExp>();  used=new HashMap<String,Boolean>();}  }
class C{  public String globalInfo(){  return "Optimizes the number of iterations of the given iterative " + "classifier using cross-validation.";}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:35.346 -0500",hash_original_method="27CF8733634F3CF20401DD1AFEAA91BD",hash_generated_method="2BA036273BDA7B336FEB03EC4E817398") public void abort(){  aborted=true;  if (waitingThread != null)   waitingThread.interrupt();}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiRootPaneUI();  return MultiLookAndFeel.createUIs(mui,((MultiRootPaneUI)mui).uis,a);}  }
class C{  private void beforeName() throws IOException {  JsonScope context=peek();  if (context == JsonScope.NONEMPTY_OBJECT) {    out.write(',');  } else   if (context != JsonScope.EMPTY_OBJECT) {    throw new IllegalStateException("Nesting problem: " + stack);  }  newline();  replaceTop(JsonScope.DANGLING_NAME);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.092 -0500",hash_original_method="0C41419913B85ADFA42D345CEAE65A53",hash_generated_method="866B495E351F706A996054EF72F83132") public void copyFrom(float[] d){  mRS.validate();  copy1DRangeFrom(0,mCurrentCount,d);}  }
class C{  public static double[] sums(double[][] input){  double[] theSums=new double[input[0].length];  for (int r=0; r < input.length; r++) {    for (int c=0; c < input[r].length; c++) {      theSums[c]+=input[r][c];    }  }  return theSums;}  }
class C{  public void removeListener(final PropertyChangeListener listener){  pcs.removePropertyChangeListener(listener);}  }
class C{  public static final String bytesToHexString(byte[] buf,int i,int length){  StringBuffer sb=new StringBuffer(length * 2);  for (int j=i; j < i + length; j++) {    sb.append(NIBBLE[(buf[j] >>> 4) & 15]);    sb.append(NIBBLE[buf[j] & 15]);  }  return sb.toString().toUpperCase();}  }
class C{  private static int[] integerArrayListToIntArray(ArrayList<Integer> list){  int[] array=new int[list.size()];  Iterator<Integer> it=list.iterator();  int index=0;  while (it.hasNext()) {    array[index]=(Integer)it.next();    index++;  }  return array;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public Object call(String jsFunc,JSObject self,Object[] params){  return call(jsFunc,self,params,false,null);}  }
class C{  public static ImmutableList<ChildNumber> append(List<ChildNumber> path,ChildNumber childNumber){  return ImmutableList.<ChildNumber>builder().addAll(path).add(childNumber).build();}  }
class C{  @DSComment("Sip phone call") @DSSpec(DSCat.PHONE_CALL) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:28.897 -0500",hash_original_method="DFE2EF72B1133A207E3F57586EB6C6EB",hash_generated_method="60E43B2B816DEC8474962F7293A78A26") public void endCall() throws SipException {synchronized (this) {    stopCall(RELEASE_SOCKET);    mInCall=false;    if (mSipSession != null)     mSipSession.endCall();  }}  }
class C{  public void writeTag(String tag,double value){  writeTag(tag,Util.formatDouble(value,true));}  }
class C{  public boolean isClippable(int idx){switch (idx) {case SearchTableColumns.COUNT_IDX:case SearchTableColumns.TYPE_IDX:    return false;default :  return true;}}  }
class C{  public InvalidJobException(String msg){  super(msg);}  }
class C{  protected void childRemoved(Node node){  data=null;  super.childRemoved(node);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  double minVal;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          minVal=z;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData && filterShape[a] == 1) {              if (z < minVal) {                minVal=z;              }            }          }          outputFile.setValue(row,col,minVal);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static <S extends HasMinimizeClickHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    MinimizeClickEvent event=new MinimizeClickEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  protected FileObject unwrap(FileObject fileObject){  return fileObject;}  }
class C{  protected void addOperationCallPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_ElementReferenceExpression_operationCall_feature"),getString("_UI_PropertyDescriptor_description","_UI_ElementReferenceExpression_operationCall_feature","_UI_ElementReferenceExpression_type"),ExpressionsPackage.Literals.ELEMENT_REFERENCE_EXPRESSION__OPERATION_CALL,true,false,false,ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,null,null));}  }
class C{  public synchronized String resolveConflictCandidate(String path,SecretKey key) throws ObfuscationException {  logger.debug("Checking potential conflict candidate " + path);  String[] dirs={};  StringBuffer newPath=new StringBuffer(path);  if (!path.equals(File.separator)) {    if (os.isWindows()) {      dirs=newPath.substring(1).split(File.separator + File.separator);    } else {      dirs=newPath.substring(1).split(File.separator);    }    String conflictingName=dirs[dirs.length - 1];    String[] conflictParts=conflictingName.split("\\s+");    String obfResolvedName=null;    if (conflictParts.length > 1) {      try {        String deobfConflict=deObfuscate(conflictParts[0],key);        logger.debug("Identified conflict for filename " + conflictingName);        String conflictIndicatorSuffix=conflictingName.substring(conflictParts[0].length());        String resolvedName=deobfConflict + conflictIndicatorSuffix;        obfResolvedName=obfuscate(resolvedName,key,true);        logger.debug("Resolved conflicting filename to " + resolvedName + ", created obfuscated value: "+ obfResolvedName);      } catch (      MissingIVException e) {        logger.error("Unable to resolve conflict for " + path,e);        return null;      }    } else {      logger.error("Unable to determine conflict-indicating suffix in filename " + path);      return null;    }    newPath.delete(0,newPath.length());    for (int i=0; i < dirs.length - 1; i++) {      newPath.append(File.separator);      newPath.append(dirs[i]);    }    newPath.append(File.separator);    newPath.append(obfResolvedName);    logger.debug("Return proposed obfuscated conflict resolution filename " + newPath.toString());    return newPath.toString();  } else {    return null;  }}  }
class C{  public Main(String name){  this(name,new PrintWriter(System.err,true));}  }
class C{  public void addElement(String s){  addElement(new StringElement(s));}  }
class C{  public static QueryTask waitForQuery(ServiceHost host,String referrer,QueryTask query,Predicate<QueryTask> predicate,long waitIterationCount,long waitIterationSleep) throws Throwable {  for (int i=0; i < waitIterationCount; i++) {    QueryTask result=sendQueryAndWait(host,referrer,query);    if (predicate.test(result)) {      return result;    }    Thread.sleep(waitIterationSleep);  }  throw new RuntimeException("timeout waiting for query result.");}  }
class C{  public RegisterScaleOutIndexTask(final IBigdataFederation fed,final ConcurrencyManager concurrencyManager,final IResourceManager resourceManager,final String metadataIndexName,final IndexMetadata metadata,final byte[][] separatorKeys,UUID[] dataServiceUUIDs){  super(concurrencyManager,ITx.UNISOLATED,metadataIndexName);  if (fed == null)   throw new IllegalArgumentException();  if (metadata == null)   throw new IllegalArgumentException();  if (separatorKeys == null)   throw new IllegalArgumentException();  if (separatorKeys.length == 0)   throw new IllegalArgumentException();  if (dataServiceUUIDs != null) {    if (dataServiceUUIDs.length == 0)     throw new IllegalArgumentException();    if (separatorKeys.length != dataServiceUUIDs.length)     throw new IllegalArgumentException();  } else {    try {      dataServiceUUIDs=fed.getLoadBalancerService().getUnderUtilizedDataServices(separatorKeys.length,separatorKeys.length,null);    } catch (    Exception ex) {      throw new RuntimeException(ex);    }  }  this.fed=fed;  this.scaleOutIndexName=metadata.getName();  this.metadata=metadata;  this.npartitions=separatorKeys.length;  this.separatorKeys=separatorKeys;  this.dataServiceUUIDs=dataServiceUUIDs;  this.dataServices=new IDataService[dataServiceUUIDs.length];  if (separatorKeys[0] == null)   throw new IllegalArgumentException();  if (separatorKeys[0].length != 0)   throw new IllegalArgumentException("The first separatorKey must be an empty byte[].");  for (int i=0; i < npartitions; i++) {    final byte[] separatorKey=separatorKeys[i];    if (separatorKey == null) {      throw new IllegalArgumentException();    }    if (i > 0) {      if (BytesUtil.compareBytes(separatorKey,separatorKeys[i - 1]) < 0) {        throw new IllegalArgumentException("Separator keys out of order at index=" + i);      }    }    final UUID uuid=dataServiceUUIDs[i];    if (uuid == null) {      throw new IllegalArgumentException();    }    final IDataService dataService=fed.getDataService(uuid);    if (dataService == null) {      throw new IllegalArgumentException("Unknown data service: uuid=" + uuid);    }    dataServices[i]=dataService;  }}  }
class C{  final void ponderHit(){  if (ponderMove == null)   return;  UndoInfo ui=new UndoInfo();  currPos.makeMove(ponderMove,ui);  ponderMove=null;}  }
class C{  @TargetApi(19) private void handleMediaKey(KeyEvent e){  if (Build.VERSION.SDK_INT < 19)   return;switch (e.getKeyCode()) {case KeyEvent.KEYCODE_MUTE:case KeyEvent.KEYCODE_HEADSETHOOK:case KeyEvent.KEYCODE_MEDIA_PLAY:case KeyEvent.KEYCODE_MEDIA_PAUSE:case KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE:case KeyEvent.KEYCODE_MEDIA_STOP:case KeyEvent.KEYCODE_MEDIA_NEXT:case KeyEvent.KEYCODE_MEDIA_PREVIOUS:case KeyEvent.KEYCODE_MEDIA_REWIND:case KeyEvent.KEYCODE_MEDIA_RECORD:case KeyEvent.KEYCODE_MEDIA_FAST_FORWARD:case KeyEvent.KEYCODE_MEDIA_CLOSE:case KeyEvent.KEYCODE_MEDIA_EJECT:case KeyEvent.KEYCODE_MEDIA_AUDIO_TRACK:    AudioManager am=(AudioManager)mActivity.getSystemService(Context.AUDIO_SERVICE);  am.dispatchMediaKeyEvent(e);break;default :break;}}  }
class C{  public TopDocs searchAfter(ScoreDoc after,Query query,int n,Sort sort) throws IOException {  return searchAfter(after,query,n,sort,false,false);}  }
class C{  @Override public void buildInformEntries(Hashtable<InetAddress,Vector<String>> dest){}  }
class C{  public RegionClearedException(String msg){  super(msg);}  }
class C{  public static boolean contains(boolean[] array,boolean value){  return indexOf(array,value) != -1;}  }
class C{  public byte byteAt(int index){  return bytes[offset + index];}  }
class C{  public boolean removeNamespace(String namespace) throws TransientNetworkDisconnectionException, NoConnectionException {  checkConnectivity();  if (TextUtils.isEmpty(namespace)) {    throw new IllegalArgumentException("namespace cannot be empty");  }  if (!mNamespaceList.contains(namespace)) {    LOGD(TAG,"Ignoring to remove a namespace that is not registered.");    return false;  }  try {    Cast.CastApi.removeMessageReceivedCallbacks(mApiClient,namespace);    mNamespaceList.remove(namespace);    return true;  } catch (  IOException|IllegalStateException e) {    LOGE(TAG,String.format("removeNamespace(%s)",namespace),e);  }  return false;}  }
class C{  public void removeChapter(String identifier){  Chapter[] newchap=new Chapter[chapters.length - 1];  Chapter[] oldchap=chapters.clone();  for (  Chapter chap : oldchap)   if (chap.identifier.equals(identifier)) {    for (    Chapter chapnew : newchap)     for (    Chapter chap2 : oldchap)     if (chap2 != null && !chap2.identifier.equals(identifier)) {      chapnew=chap2;      chap2=null;      break;    }    chapters=newchap;    return;  }}  }
class C{  protected ServerPreparedStatement(MySQLConnection conn,String sql,String catalog,int resultSetType,int resultSetConcurrency) throws SQLException {  super(conn,catalog);  checkNullOrEmptyQuery(sql);  int startOfStatement=findStartOfStatement(sql);  this.firstCharOfStmt=StringUtils.firstAlphaCharUc(sql,startOfStatement);  this.hasOnDuplicateKeyUpdate=this.firstCharOfStmt == 'I' && containsOnDuplicateKeyInString(sql);  if (this.connection.versionMeetsMinimum(5,0,0)) {    this.serverNeedsResetBeforeEachExecution=!this.connection.versionMeetsMinimum(5,0,3);  } else {    this.serverNeedsResetBeforeEachExecution=!this.connection.versionMeetsMinimum(4,1,10);  }  this.useAutoSlowLog=this.connection.getAutoSlowLog();  this.useTrueBoolean=this.connection.versionMeetsMinimum(3,21,23);  String statementComment=this.connection.getStatementComment();  this.originalSql=(statementComment == null) ? sql : "/* " + statementComment + " */ "+ sql;  if (this.connection.versionMeetsMinimum(4,1,2)) {    this.stringTypeCode=MysqlDefs.FIELD_TYPE_VAR_STRING;  } else {    this.stringTypeCode=MysqlDefs.FIELD_TYPE_STRING;  }  try {    serverPrepare(sql);  } catch (  SQLException sqlEx) {    realClose(false,true);    throw sqlEx;  }catch (  Exception ex) {    realClose(false,true);    SQLException sqlEx=SQLError.createSQLException(ex.toString(),SQLError.SQL_STATE_GENERAL_ERROR,getExceptionInterceptor());    sqlEx.initCause(ex);    throw sqlEx;  }  setResultSetType(resultSetType);  setResultSetConcurrency(resultSetConcurrency);  this.parameterTypes=new int[this.parameterCount];}  }
class C{  private void eqEq(List<PsiType> eqBounds){  for (int i=0; i < eqBounds.size(); i++) {    PsiType sBound=eqBounds.get(i);    for (int j=i + 1; j < eqBounds.size(); j++) {      final PsiType tBound=eqBounds.get(j);      addConstraint(new TypeEqualityConstraint(tBound,sBound));    }  }}  }
class C{  public synchronized void addTextListener(TextListener cl){  m_textListeners.addElement(cl);}  }
class C{  public void rewrite(Server server) throws IOException {  StringBuffer page=new StringBuffer();  String localEncoding=encoding;  if (localEncoding == null) {    localEncoding=Charset.defaultCharset().name();  }  String input=stream.toString(localEncoding);  Matcher matcher=linkPattern.matcher(input);  while (matcher.find()) {    String link=matcher.group(6).replaceAll("\\$","\\\\\\$");    if (link.length() == 0) {      link="/";    }    String rewritten=null;    if (matcher.group(4) == null && link.startsWith("/")) {      rewritten=handleLocalLink(server,matcher,link);    }    if (rewritten != null) {      if (log.isDebugEnabled()) {        log.debug("Found link " + link + " >> "+ rewritten);      }      matcher.appendReplacement(page,rewritten);    }  }  matcher.appendTail(page);  String modifiedContentAsString=page.toString();  byte[] modifiedContent=modifiedContentAsString.getBytes(localEncoding);  originalStream.write(modifiedContent);}  }
class C{  public void remove(S item){  ordered.remove(item);  unordered.remove(item);  Collections.sort(ordered,comparator);  list.clear();  list.addAll(ordered);  list.addAll(unordered);}  }
class C{  public double[] popy(double x_[]){  return popY(new double[][]{x_})[0];}  }
class C{  protected void fadeOutCurrentTheme(){  if (currentTheme != null && currentTheme.isPlaying()) {    currentTheme.setOnCompletionListener(null);    stage.addAction(Actions.sequence(VolumeAction.setVolume(currentTheme,currentTheme.getVolume(),0f,duration,Interpolation.fade),MusicStopAction.stop(currentTheme)));  }  currentTheme=null;}  }
class C{  public static Trigger tempInsteadOf(String name){  Trigger trigger=insteadOf(name);  trigger.isTemp=true;  return trigger;}  }
class C{  public static String iterableToCommaSeparatedList(Iterable<?> iterable){  StringBuilder builder=new StringBuilder();  boolean first=true;  for (  Object obj : iterable) {    if (first) {      builder.append(String.format("%s",obj.toString()));      first=false;    } else {      builder.append(String.format(", %s",obj.toString()));    }  }  return builder.toString();}  }
class C{  protected float parseOffset() throws ParseException, IOException {  boolean offsetNegative=false;  if (current == '-') {    offsetNegative=true;    current=reader.read();    skipSpaces();  } else   if (current == '+') {    current=reader.read();    skipSpaces();  }  if (offsetNegative) {    return -parseClockValue();  }  return parseClockValue();}  }
class C{  @PUT @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) @Path("/{id}/quota") public QuotaInfo updateQuota(@PathParam("id") URI id,QuotaUpdateParam param) throws DatabaseException {  return updateQuota(getVirtualPool(Type.block,id),param);}  }
class C{  public static boolean putFloat(Context context,String key,float value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putFloat(key,value);  return editor.commit();}  }
class C{  public void resume(URI taskId){  client.postURI(String.class,client.uriBuilder(getIdUrl() + "/resume").build(taskId));}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  static synchronized KarmaIndicator create(){  if (instance == null) {    instance=new KarmaIndicator();  } else {    throw new IllegalStateException("Instance already created");  }  return instance;}  }
class C{  public StreamThroughput(String statusMessagePrefix,String initialMessage,Logger log){  this(statusMessagePrefix);  if (log != null) {    log.statusMessage(m_statusMessagePrefix + initialMessage);  }}  }
class C{  public boolean isClosed(){  return journalWriter == null;}  }
class C{  public void enterBed(GlowBlock block){  checkNotNull(block,"Bed block cannot be null");  Preconditions.checkState(bed == null,"Player already in bed");  GlowBlock head=BlockBed.getHead(block);  GlowBlock foot=BlockBed.getFoot(block);  if (EventFactory.callEvent(new PlayerBedEnterEvent(this,head)).isCancelled()) {    return;  }  BlockBed.setOccupied(head,foot,true);  bed=head;  sleeping=true;  setRawLocation(head.getLocation(),false);  getSession().send(new UseBedMessage(SELF_ID,head.getX(),head.getY(),head.getZ()));  UseBedMessage msg=new UseBedMessage(getEntityId(),head.getX(),head.getY(),head.getZ());  world.getRawPlayers().stream().filter(null).forEach(null);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MRule[");  sb.append(get_ID()).append("-").append(getValue()).append("]");  return sb.toString();}  }
class C{  public boolean offerLast(E e){  addLast(e);  return true;}  }
class C{  public static Border createLineBorder(int thickness,int color,String title){  Border b=new Border();  b.type=TYPE_LINE;  b.themeColors=false;  b.thickness=thickness;  b.colorA=color;  b.borderTitle=title;  return b;}  }
class C{  public DefaultICUTokenizerConfig(boolean cjkAsWords,boolean myanmarAsWords){  this.cjkAsWords=cjkAsWords;  this.myanmarAsWords=myanmarAsWords;}  }
class C{  public Token(int length,byte id){  this.length=length;  this.id=id;}  }
class C{  public synchronized boolean isValid(){  return CloseableReference.isValid(mPooledByteBufferRef) || mInputStreamSupplier != null;}  }
class C{  public static boolean deleteConflict(long id,long globalId){  String[] proj={_ID};  String sel=GLOBAL_ID + " = ? AND " + _ID+ " <> ?";  String[] args=Elements.toStrings(globalId,id);  long otherId=Cursors.firstLong(cr().query(CONTENT_URI,proj,sel,args,null));  if (otherId > 0) {    ContentValues vals=new ContentValues(2);    vals.putNull(GLOBAL_ID);    vals.put(STATUS_ID,DELETED.id);    cr().update(CONTENT_URI,vals,sel,args);    vals.clear();    vals.put(Reviews.RESTAURANT_ID,id);    sel=Reviews.GLOBAL_ID + " IS NOT NULL AND " + Reviews.RESTAURANT_ID+ " = ?";    args=new String[]{String.valueOf(otherId)};    cr().update(Reviews.CONTENT_URI,vals,sel,args);    return true;  }  return false;}  }
class C{  public UpdateRulePanel(List<Neuron> neuronList,Window parent,boolean startingState){  this.neuronList=neuronList;  this.parent=parent;  if (neuronList.get(0).getUpdateRule() instanceof ActivityGenerator) {    ruleMap=GENERATOR_MAP;    cbNeuronType=new JComboBox<String>(GENERATOR_MAP.keySet().toArray(new String[GENERATOR_MAP.size()]));  } else {    ruleMap=RULE_MAP;    cbNeuronType=new JComboBox<String>(RULE_MAP.keySet().toArray(new String[RULE_MAP.size()]));  }  neuronRulePanelTriangle=new DropDownTriangle(UpDirection.LEFT,startingState,"Settings","Settings",parent);  checkNeuronConsistency();  startingPanel=neuronRulePanel;  initializeLayout();  addListeners();  setRandomizerPanelParent();}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  try {    String data=transformer.transformToString(this);    transformer.getResultTreeHandler().comment(data);  } catch (  org.xml.sax.SAXException se) {    throw new TransformerException(se);  }}  }
class C{  public static boolean createJPEG(Window window,String fileName){  BufferedImage bi=null;  if (window == null || fileName == null)   new IllegalArgumentException("ScreenShot.createJPEG Window os NULL");  File file=getJPGFile(window);  if (file == null)   return false;  log.config("File=" + file);  if (file.exists())   file.delete();  Iterator writers=ImageIO.getImageWritersByFormatName("jpg");  ImageWriter writer=(ImageWriter)writers.next();  if (writer == null) {    log.log(Level.SEVERE,"no ImageWriter");    return false;  }  try {    Thread.sleep(1000);    bi=getImage(window);  } catch (  InterruptedException ex) {    log.log(Level.SEVERE,"ex",ex);  }  try {    ImageOutputStream ios=ImageIO.createImageOutputStream(file);    writer.setOutput(ios);    writer.write(bi);    ios.flush();    ios.close();  } catch (  IOException ex) {    log.log(Level.SEVERE,"ex",ex);    return false;  }  return true;}  }
class C{  @Override protected int calculateTabHeight(int tabPlacement,int tabIndex,int fontHeight){  return fontHeight + 4;}  }
class C{  public void testGetInt32(){  byte[] bytes={16,0,0,1,-1,-1,-1,-1,0,0,0,0,0,0,0,-128,-1,-1,-1,127};  MySQLPacket array=new MySQLPacket(bytes.length - MySQLPacket.HEADER_LENGTH,bytes,(byte)1);  assertEquals(-1,array.getInt32());  assertEquals(0,array.getInt32());  assertEquals(-0x80000000,array.getInt32());  assertEquals(0x7fffffff,array.getInt32());}  }
class C{  @Override public boolean isReadOnly(){  return (mSetter == null && mField == null);}  }
class C{  private void updateMetrics(){  MetricRegistry metrics=MetricRegistryHolder.getInstance().getMetrics();  UnixOperatingSystemMXBean stats=SystemMetrics.getStats();  metrics.getHistograms().get(SystemMetricNames.OPEN_FILE_DESCRIPTOR_COUNT).update(stats.getOpenFileDescriptorCount());  metrics.getHistograms().get(SystemMetricNames.COMMITTED_VIRTUAL_MEMORY).update(stats.getCommittedVirtualMemorySize());  metrics.getHistograms().get(SystemMetricNames.FREE_SWAP_SPACE).update(stats.getFreeSwapSpaceSize());  metrics.getHistograms().get(SystemMetricNames.FREE_PHYSICAL_MEMORY).update(stats.getFreePhysicalMemorySize());  metrics.getHistograms().get(SystemMetricNames.SYSTEM_CPU_LOAD).update((long)(stats.getSystemCpuLoad() * SYSTEM_CPU_LOAD_MULTIPLIER));  maxFileDescriptorCount.update(stats.getMaxFileDescriptorCount());  totalPhysicalMemorySize.update(stats.getTotalPhysicalMemorySize());  totalSwapSpaceSize.update(stats.getTotalSwapSpaceSize());}  }
class C{  public void removeChangingListener(OnWheelChangedListener listener){  changingListeners.remove(listener);}  }
class C{  public void destroy(){  log.info("Shutting down Hazelcast instance [{}]..",hcInstanceName);  final HazelcastInstance instance=Hazelcast.getHazelcastInstanceByName(hcInstanceName);  if (instance != null) {    instance.shutdown();  }}  }
class C{  public boolean checkGlobalInfo(){  boolean result;  Class<?> cls;  print("Global info...");  result=true;  cls=getObject().getClass();  try {    cls.getMethod("globalInfo",(Class[])null);  } catch (  Exception e) {    result=false;  }  if (result) {    println("yes");  } else {    println("no");  }  return result;}  }
class C{  static String propertyVar(final String property,final String defaultValue){  return String.format("${%s:%s}",property,defaultValue);}  }
class C{  private void checkDependencies(){  if (basedOnResult != null) {    if (!input.isComplete() || !evals.isComplete() || basedOnResult.get() != evals.getEvaluationStep().getResult()) {      basedOnResult=null;      firePanelUpdated();    }  }}  }
class C{  @Override public void appendCode(Type declaringType,TypeTuple inputTypes,Type outputType,List<Variable> inputVars,StringBuilder b){  b.append(field.toCode(declaringType,inputVars));}  }
class C{  public static <T extends Content>IgnoringPrompt<T> create(ContentType type,SendableMessage promptMessage){  return new IgnoringPrompt<>(type,promptMessage);}  }
class C{  private Element selectElement(){  Element myElement=sqlSession.getMapper(ElementMapper.class).selectElementById("child");  Assert.assertNotNull("Test setup failure; Could not load element",myElement);  return myElement;}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  @Override public MutableTrigger build(){  DailyTimeIntervalTriggerImpl st=new DailyTimeIntervalTriggerImpl();  st.setRepeatInterval(interval);  st.setRepeatIntervalUnit(intervalUnit);  st.setMisfireInstruction(misfireInstruction);  st.setRepeatCount(repeatCount);  if (daysOfWeek != null)   st.setDaysOfWeek(daysOfWeek); else   st.setDaysOfWeek(ALL_DAYS_OF_THE_WEEK);  if (startTimeOfDay != null)   st.setStartTimeOfDay(startTimeOfDay); else   st.setStartTimeOfDay(TimeOfDay.hourAndMinuteOfDay(0,0));  if (endTimeOfDay != null)   st.setEndTimeOfDay(endTimeOfDay); else   st.setEndTimeOfDay(TimeOfDay.hourMinuteAndSecondOfDay(23,59,59));  return st;}  }
class C{  private void addSongsITunes(String playlist,File file){  try {    file=FileUtils.getCanonicalFile(file);  } catch (  IOException ignored) {  }  if (!file.exists()) {    LOG.warn("File: '" + file + "' does not exist");    return;  }  File[] files;  if (file.isDirectory()) {    files=FileUtils.getFilesRecursive(file,iTunesSettings.ITUNES_SUPPORTED_FILE_TYPES.getValue());  } else   if (file.isFile() && isSupported(FilenameUtils.getExtension(file.getName()))) {    files=new File[]{file};  } else {    return;  }  if (files.length == 0) {    return;  }  addSongsiTunes(playlist,files);}  }
class C{  @Override public void run(){  amIActive=true;  String shapefile=null;  String inputFieldsString=null;  String[] fieldNames=null;  double z;  int numFields;  int progress=0;  int lastProgress=0;  int row;  int a, i, j;  double[] fieldAverages;  double[] fieldTotals;  boolean standardizedPCA=false;  int numberOfComponentsOutput=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFieldsString=args[0];  standardizedPCA=Boolean.parseBoolean(args[1]);  if (args[2].toLowerCase().contains("not")) {    numberOfComponentsOutput=0;  } else {    numberOfComponentsOutput=Integer.parseInt(args[2]);  }  try {    String[] inputs=inputFieldsString.split(";");    shapefile=inputs[0];    numFields=inputs.length - 1;    fieldNames=new String[numFields];    System.arraycopy(inputs,1,fieldNames,0,numFields);    AttributeTable table=new AttributeTable(shapefile.replace(".shp",".dbf"));    int numRecs=table.getNumberOfRecords();    DBFField[] fields=table.getAllFields();    ArrayList<Integer> PCAFields=new ArrayList<>();    for (j=0; j < fieldNames.length; j++) {      for (i=0; i < fields.length; i++) {        if (fields[i].getName().equals(fieldNames[j]) && (fields[i].getDataType() == DBFField.DBFDataType.NUMERIC || fields[i].getDataType() == DBFField.DBFDataType.FLOAT)) {          PCAFields.add(i);        }      }    }    if (numFields != PCAFields.size()) {      showFeedback("Not all of the specified database fields were found in the file or " + "a field of a non-numerical type was selected.");      return;    }    double[][] fieldArray=new double[numRecs][numFields];    Object[] rec;    for (i=0; i < numRecs; i++) {      rec=table.getRecord(i);      for (j=0; j < numFields; j++) {        fieldArray[i][j]=(Double)(rec[PCAFields.get(j)]);      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * i / (numRecs - 1));      if (progress != lastProgress) {        updateProgress("Reading data:",progress);      }      lastProgress=progress;    }    fieldAverages=new double[numFields];    fieldTotals=new double[numFields];    for (row=0; row < numRecs; row++) {      for (i=0; i < numFields; i++) {        fieldTotals[i]+=fieldArray[row][i];      }    }    for (i=0; i < numFields; i++) {      fieldAverages[i]=fieldTotals[i] / numRecs;    }    double[] fieldTotalDeviation=new double[numFields];    double[][] covariances=new double[numFields][numFields];    double[][] correlationMatrix=new double[numFields][numFields];    for (row=0; row < numRecs; row++) {      for (i=0; i < numFields; i++) {        fieldTotalDeviation[i]+=(fieldArray[row][i] - fieldAverages[i]) * (fieldArray[row][i] - fieldAverages[i]);        for (a=0; a < numFields; a++) {          covariances[i][a]+=(fieldArray[row][i] - fieldAverages[i]) * (fieldArray[row][a] - fieldAverages[a]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (numRecs - 1));      if (progress != lastProgress) {        updateProgress("Calculating covariances:",progress);      }      lastProgress=progress;    }    for (i=0; i < numFields; i++) {      for (a=0; a < numFields; a++) {        correlationMatrix[i][a]=covariances[i][a] / (Math.sqrt(fieldTotalDeviation[i] * fieldTotalDeviation[a]));      }    }    for (i=0; i < numFields; i++) {      for (a=0; a < numFields; a++) {        covariances[i][a]=covariances[i][a] / (numRecs - 1);      }    }    Matrix cov=null;    if (!standardizedPCA) {      cov=new Matrix(covariances);    } else {      cov=new Matrix(correlationMatrix);    }    EigenvalueDecomposition eigen=cov.eig();    double[] eigenvalues;    Matrix eigenvectors;    SortedSet<PrincipalComponent> principalComponents;    eigenvalues=eigen.getRealEigenvalues();    eigenvectors=eigen.getV();    double[][] vecs=eigenvectors.getArray();    int numComponents=eigenvectors.getColumnDimension();    principalComponents=new TreeSet<PrincipalComponent>();    for (i=0; i < numComponents; i++) {      double[] eigenvector=new double[numComponents];      for (j=0; j < numComponents; j++) {        eigenvector[j]=vecs[j][i];      }      principalComponents.add(new PrincipalComponent(eigenvalues[i],eigenvector));    }    double totalEigenvalue=0;    for (i=0; i < numComponents; i++) {      totalEigenvalue+=eigenvalues[i];    }    double[][] explainedVarianceArray=new double[numComponents][2];    j=0;    for (    PrincipalComponent pc : principalComponents) {      explainedVarianceArray[j][0]=pc.eigenValue / totalEigenvalue * 100.0;      if (j == 0) {        explainedVarianceArray[j][1]=explainedVarianceArray[j][0];      } else {        explainedVarianceArray[j][1]=explainedVarianceArray[j][0] + explainedVarianceArray[j - 1][1];      }      j++;    }    DecimalFormat df1=new DecimalFormat("0.00");    DecimalFormat df2=new DecimalFormat("0.0000");    DecimalFormat df3=new DecimalFormat("0.000000");    DecimalFormat df4=new DecimalFormat("0.000");    String ret="Principal Component Analysis Report:\n\n";    ret+="Component\tExplained Var.\tCum. %\tEigenvalue\tEigenvector\n";    j=0;    for (    PrincipalComponent pc : principalComponents) {      String explainedVariance=df1.format(explainedVarianceArray[j][0]);      String explainedCumVariance=df1.format(explainedVarianceArray[j][1]);      double[] eigenvector=pc.eigenVector.clone();      ret+=(j + 1) + "\t" + explainedVariance+ "\t"+ explainedCumVariance+ "\t"+ df2.format(pc.eigenValue)+ "\t";      String eigenvec="[";      for (i=0; i < numComponents; i++) {        if (i < numComponents - 1) {          eigenvec+=df3.format(eigenvector[i]) + ", ";        } else {          eigenvec+=df3.format(eigenvector[i]);        }      }      eigenvec+="]";      ret+=eigenvec + "\n";      if (j < numberOfComponentsOutput) {        DBFField field=new DBFField();        field=new DBFField();        field.setName("COMP" + (j + 1));        field.setDataType(DBFField.DBFDataType.NUMERIC);        field.setFieldLength(10);        field.setDecimalCount(4);        table.addField(field);        for (row=0; row < numRecs; row++) {          z=0;          for (i=0; i < numFields; i++) {            z+=fieldArray[row][i] * eigenvector[i];          }          Object[] recData=table.getRecord(row);          recData[recData.length - 1]=new Double(z);          table.updateRecord(row,recData);          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (numRecs - 1));          if (progress != lastProgress) {            updateProgress("Outputing Component " + (j + 1) + ":",progress);          }          lastProgress=progress;        }      }      j++;    }    ret+="\nFactor Loadings:\n";    ret+="\t\tComponent\n\t";    for (i=0; i < numComponents; i++) {      ret+=(i + 1) + "\t";    }    ret+="\n";    double loading=0;    if (!standardizedPCA) {      for (i=0; i < numFields; i++) {        ret+="field " + (i + 1) + "\t";        for (        PrincipalComponent pc : principalComponents) {          double[] eigenvector=pc.eigenVector.clone();          double ev=pc.eigenValue;          loading=(eigenvector[i] * Math.sqrt(ev)) / Math.sqrt(covariances[i][i]);          ret+=df4.format(loading) + "\t";        }        ret+="\n";      }    } else {      for (i=0; i < numFields; i++) {        ret+="field " + (i + 1) + "\t";        for (        PrincipalComponent pc : principalComponents) {          double[] eigenvector=pc.eigenVector.clone();          double ev=pc.eigenValue;          loading=(eigenvector[i] * Math.sqrt(ev));          ret+=df4.format(loading) + "\t";        }        ret+="\n";      }    }    ret+="\n";    for (i=0; i < numFields; i++) {      ret+="field " + (i + 1) + "\t"+ fieldNames[i]+ "\n";    }    returnData(ret);    if (numberOfComponentsOutput > 0) {      returnData(table.getFileName());    }    ScreePlot plot=new ScreePlot(explainedVarianceArray);    returnData(plot);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void bind(String name,Remote obj) throws AlreadyBoundException, java.net.MalformedURLException, RemoteException {  ParsedNamingURL parsed=parseURL(name);  Registry registry=getRegistry(parsed);  if (obj == null)   throw new NullPointerException("cannot bind to null");  registry.bind(parsed.name,obj);}  }
class C{  public void addValues(String variable,Collection<? extends Value> values){  for (  Value val : values) {    addValue(variable,val);  }}  }
class C{  private void addDefaultFlows(){  if (this.sw.getOFFactory().getVersion().compareTo(OFVersion.OF_13) >= 0) {    OFFlowDeleteStrict deleteFlow=this.factory.buildFlowDeleteStrict().setTableId(TableId.ALL).setOutPort(OFPort.CONTROLLER).build();    this.sw.write(deleteFlow);    ArrayList<OFAction> actions=new ArrayList<OFAction>(1);    actions.add(factory.actions().output(OFPort.CONTROLLER,0xffFFffFF));    ArrayList<OFMessage> flows=new ArrayList<OFMessage>();    for (int tableId=0; tableId < this.sw.getTables(); tableId++) {      OFFlowAdd defaultFlow=this.factory.buildFlowAdd().setTableId(TableId.of(tableId)).setPriority(0).setActions(actions).build();      flows.add(defaultFlow);    }    this.sw.write(flows);  }}  }
class C{  public void testChainContinueWhenSpecificExceptionThrown(final Throwable e) throws Exception {  initChainOnErrorFilter();  when(mockManagerFactory.create()).thenThrow(e);  victim.doFilter(mockRequest,mockResponse,mockFilterChain);  verifyChainIsCalled(mockFilterChain);}  }
class C{  public boolean isSequential(){  return category.equalsIgnoreCase("sequential");}  }
class C{  private void assertion(boolean condition,String msg) throws RuntimeException {  if (!condition)   throw new RuntimeException(msg);}  }
class C{  public static void d(String msg){  if (DEBUG)   Log.d(TAG,buildMessage(msg));}  }
class C{  public static byte[] decodeWebSafe(byte[] source) throws Base64DecoderException {  return decodeWebSafe(source,0,source.length);}  }
class C{  public void reset(){  reader=null;  buf.setLength(0);  lineNumber=0;}  }
class C{  protected void onUserList(String channel,User[] users){}  }
class C{  public static boolean isPartialEvaluationConstant(Object value){  return CompilerDirectives.inInterpreter();}  }
class C{  public synchronized void engineSetKeyEntry(String alias,Key key,char[] password,Certificate[] chain) throws KeyStoreException {  KeyStore.PasswordProtection passwordProtection=new KeyStore.PasswordProtection(password);  try {    setKeyEntry(alias,key,passwordProtection,chain,null);  }  finally {    try {      passwordProtection.destroy();    } catch (    DestroyFailedException dfe) {    }  }}  }
class C{  public int postWebPages(String[] args,int startIndexInArgs,OutputStream out){  reset();  LinkedHashSet<URL> s=new LinkedHashSet<>();  for (int j=startIndexInArgs; j < args.length; j++) {    try {      URL u=new URL(normalizeUrlEnding(args[j]));      s.add(u);    } catch (    MalformedURLException e) {      warn("Skipping malformed input URL: " + args[j]);    }  }  backlog.add(s);  return webCrawl(0,out);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  java.io.File f=getFile(stack);  if (f != null)   Seeker.getInstance().removeArchiveDirectory(f,Seeker.MUSIC_DIR_MASK);  return null;}  }
class C{  public static String encodeLines(byte[] in){  return encodeLines(in,0,in.length,76,SYSTEM_LINE_SEPARATOR);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void flipExits(boolean horiz,boolean vert){  if (!horiz && !vert) {    return;  }  int newExits=0;  if (0 != (exits & 0x0001)) {    if (vert) {      newExits|=0x08;    }  }  if (0 != (exits & 0x0002)) {    if (vert && horiz) {      newExits|=0x10;    } else     if (horiz) {      newExits|=0x20;    } else     if (vert) {      newExits|=0x04;    }  }  if (0 != (exits & 0x0004)) {    if (vert && horiz) {      newExits|=0x20;    } else     if (horiz) {      newExits|=0x10;    } else     if (vert) {      newExits|=0x02;    }  }  if (0 != (exits & 0x0008)) {    if (vert) {      newExits|=0x01;    }  }  if (0 != (exits & 0x0010)) {    if (vert && horiz) {      newExits|=0x02;    } else     if (horiz) {      newExits|=0x04;    } else     if (vert) {      newExits|=0x20;    }  }  if (0 != (exits & 0x0020)) {    if (vert && horiz) {      newExits|=0x04;    } else     if (horiz) {      newExits|=0x02;    } else     if (vert) {      newExits|=0x10;    }  }  setExits(newExits);}  }
class C{  boolean isMarker(){  return value == this;}  }
class C{  public static void addEntry(String name,String category,IManualPage... pages){  ieManualInstance.addEntry(name,category,pages);}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  public static boolean isPortAvailable(String portNumber) throws NumberFormatException {  final int port=Integer.parseInt(portNumber);  ServerSocket ss=null;  try {    ss=new ServerSocket(port);    ss.setReuseAddress(true);    return true;  } catch (  IOException e) {  } finally {    if (ss != null) {      try {        ss.close();      } catch (      IOException e) {      }    }  }  return false;}  }
class C{  protected double calculateLogLikelihood(){  NodeRef root=treeModel.getRoot();  if (rootPartials == null) {    rootPartials=new double[patternCount * stateCount];  }  if (patternLogLikelihoods == null) {    patternLogLikelihoods=new double[patternCount];  }  if (!integrateAcrossCategories) {    if (siteCategories == null) {      siteCategories=new int[patternCount];    }    for (int i=0; i < patternCount; i++) {      siteCategories[i]=siteModel.getCategoryOfSite(i);    }  }  double p=proportionParameter.getParameterValue(0);  double lambda=Math.log(2) / lambdaParameter.getParameterValue(0);  updateRates=true;  updateAllNodes();  if (updateRates) {    if (nodeTimes == null) {      nodeTimes=new double[treeModel.getNodeCount()];    }    calculateNodeRates(treeModel,root,1.0,p,lambda);  }  traverse(treeModel,root);  updateRates=false;  for (int i=0; i < nodeCount; i++) {    updateNode[i]=false;  }  double logL=0.0;  for (int i=0; i < patternCount; i++) {    logL+=patternLogLikelihoods[i] * patternWeights[i];  }  if (Double.isNaN(logL)) {    throw new RuntimeException("Likelihood NaN");  }  return logL;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getAnonymous_invariant_2_();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  double n;  double sum;  double sumOfTheSquares;  double average;  double stdDev;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  double threshold=0;  double centreValue=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      threshold=Double.parseDouble(args[i]);    } else     if (i == 5) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 6) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        centreValue=inputFile.getValue(row,col);        if (centreValue != noData) {          n=0;          sum=0;          sumOfTheSquares=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            if ((x != midPointX) && (y != midPointY)) {              z=inputFile.getValue(y,x);              if (z != noData) {                n+=filterShape[a];                sum+=z * filterShape[a];                sumOfTheSquares+=(z * filterShape[a]) * z;              }            }          }          if (n > 2) {            average=sum / n;            stdDev=(sumOfTheSquares / n) - (average * average);            if (stdDev > 0) {              stdDev=Math.sqrt(stdDev);            }            if (Math.abs((centreValue - average) / stdDev) > threshold) {              outputFile.setValue(row,col,average);            } else {              outputFile.setValue(row,col,centreValue);            }          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Builder isdnSubaddress(String isdnSubaddress){  this.isdnSubaddress=isdnSubaddress;  return this;}  }
class C{  public void addPhoneNumber(PhoneNumber phoneNumber){  getPhoneNumbers().add(phoneNumber);}  }
class C{  public static int addGas(ItemStack itemStack,GasStack stack){  if (itemStack != null && itemStack.getItem() instanceof IGasItem && ((IGasItem)itemStack.getItem()).canReceiveGas(itemStack,stack.getGas())) {    return ((IGasItem)itemStack.getItem()).addGas(itemStack,stack.copy());  }  return 0;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private boolean checkExistingMatrixforLegacy(){  LOGGER.info("checkExistingMatrixforLegacy Method is called");  final HashMap workflowheaderparams=getHeaderParams();  setLegacyDate(this.workFlowMatrixService.checkLegacyMatrix(workflowheaderparams));  LOGGER.info("checkExistingMatrixforLegacy Method is ended");  if (this.legacyDate == null) {    return true;  } else {    return false;  }}  }
class C{  public void authenticate(){  if (mAccount == null) {    createAccount();  } else {    mAccess=mAccount.authenticate();    if (mRegion != null) {      mAccess.setPreferredRegion(mRegion);    }  }}  }
class C{  public static void tab(String tab){  Formatting.tab=tab;}  }
class C{  public static void main(String[] args){  String[] a=StdIn.readAllStrings();  MergeBU.sort(a);  show(a);}  }
class C{  public Connection connect(String jdbcDrvJarPath,String jdbcDrvCls,String jdbcUrl,Properties jdbcInfo) throws SQLException {  Driver drv=drivers.get(jdbcDrvCls);  if (drv == null) {    if (jdbcDrvJarPath.isEmpty())     throw new IllegalStateException("Driver jar file name is not specified.");    File drvJar=new File(jdbcDrvJarPath);    if (!drvJar.exists())     throw new IllegalStateException("Driver jar file is not found.");    try {      URL u=new URL("jar:" + drvJar.toURI() + "!/");      URLClassLoader ucl=URLClassLoader.newInstance(new URL[]{u});      drv=(Driver)Class.forName(jdbcDrvCls,true,ucl).newInstance();      drivers.put(jdbcDrvCls,drv);    } catch (    Exception e) {      throw new IllegalStateException(e);    }  }  Connection conn=drv.connect(jdbcUrl,jdbcInfo);  if (conn == null)   throw new IllegalStateException("Connection was not established (JDBC driver returned null value).");  return conn;}  }
class C{  public void testColumn_count() throws Exception {  String selectStmt="select * from " + DatabaseCreator.SIMPLE_TABLE1;  st=db.prepare(selectStmt);  assertEquals(3,st.column_count());  st.step();  int columnCount=st.column_count();  assertNotNull(columnCount);  assertEquals(3,columnCount);  selectStmt="select ? from " + DatabaseCreator.SIMPLE_TABLE1;  st=db.prepare(selectStmt);  assertEquals(3,st.column_count());  st.bind(1,"*");  st.step();  columnCount=st.column_count();  assertNotNull(columnCount);  assertEquals(3,columnCount);}  }
class C{  public ScriptNode transformTree(AstRoot root){  currentScriptOrFn=root;  this.inUseStrictDirective=root.isInStrictMode();  int sourceStartOffset=decompiler.getCurrentOffset();  if (Token.printTrees) {    System.out.println("IRFactory.transformTree");    System.out.println(root.debugPrint());  }  ScriptNode script=(ScriptNode)transform(root);  int sourceEndOffset=decompiler.getCurrentOffset();  script.setEncodedSourceBounds(sourceStartOffset,sourceEndOffset);  if (compilerEnv.isGeneratingSource()) {    script.setEncodedSource(decompiler.getEncodedSource());  }  decompiler=null;  return script;}  }
class C{  private double pseudoBLEU(double[] m,double[] n,double rho){  double score=0.0;  for (int i=0; i < m.length; ++i) {    double num=m[i] + pseudoM[i];    double denom=n[i] + pseudoN[i];    assert num > 0.0;    assert denom > 0.0;    score+=Math.log(num / denom);  }  score*=1.0 / order;  score+=Math.min(0.0,1.0 - ((rho + pseudoRho) / (n[0] + pseudoN[0])));  score=Math.exp(score);  return (Double.isInfinite(score) || Double.isNaN(score)) ? 0.0 : score;}  }
class C{  public void resumeOutgoingFileTransfer(FileSharingSession session,boolean isGroup){  if (sLogger.isActivated()) {    sLogger.info("Resume outgoing file transfer from " + session.getRemoteContact());  }  if (isGroup) {    GroupFileTransferImpl groupFileTransfer=getOrCreateGroupFileTransfer(session.getContributionID(),session.getFileTransferId());    session.addListener(groupFileTransfer);  } else {    OneToOneFileTransferImpl oneToOneFileTransfer=getOrCreateOneToOneFileTransfer(session.getFileTransferId());    session.addListener(oneToOneFileTransfer);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public ExecPermission(String path,String actions){  this(path);}  }
class C{  public static void nullifyHomeDirectory(){  ggHome=null;}  }
class C{  private static int readTiffHeader(InputStream is,int length,TiffHeader tiffHeader) throws IOException {  if (length <= 8) {    return 0;  }  tiffHeader.byteOrder=StreamProcessor.readPackedInt(is,4,false);  length-=4;  if (tiffHeader.byteOrder != TIFF_BYTE_ORDER_LITTLE_END && tiffHeader.byteOrder != TIFF_BYTE_ORDER_BIG_END) {    FLog.e(TAG,"Invalid TIFF header");    return 0;  }  tiffHeader.isLittleEndian=(tiffHeader.byteOrder == TIFF_BYTE_ORDER_LITTLE_END);  tiffHeader.firstIfdOffset=StreamProcessor.readPackedInt(is,4,tiffHeader.isLittleEndian);  length-=4;  if (tiffHeader.firstIfdOffset < 8 || tiffHeader.firstIfdOffset - 8 > length) {    FLog.e(TAG,"Invalid offset");    return 0;  }  return length;}  }
class C{  public CategoryLineAnnotation(Comparable category1,double value1,Comparable category2,double value2,Paint paint,Stroke stroke){  super();  ParamChecks.nullNotPermitted(category1,"category1");  ParamChecks.nullNotPermitted(category2,"category2");  ParamChecks.nullNotPermitted(paint,"paint");  ParamChecks.nullNotPermitted(stroke,"stroke");  this.category1=category1;  this.value1=value1;  this.category2=category2;  this.value2=value2;  this.paint=paint;  this.stroke=stroke;}  }
class C{  public SphereComponent(){}  }
class C{  public static void removeLeg(Plan plan,int index){  if ((index % 2 == 0) || (index < 1) || (index >= plan.getPlanElements().size() - 1)) {    log.warn(plan + "[index=" + index+ " is wrong. nothing removed]");  } else {    if (index != plan.getPlanElements().size() - 2) {      Leg next_leg=(Leg)plan.getPlanElements().get(index + 2);      next_leg.setDepartureTime(Time.UNDEFINED_TIME);      next_leg.setTravelTime(Time.UNDEFINED_TIME);      next_leg.setRoute(null);    }    plan.getPlanElements().remove(index + 1);    plan.getPlanElements().remove(index);  }}  }
class C{  public static Style createPolygonStyle(){  final Stroke stroke=styleFactory.createStroke(filterFactory.literal(Color.BLUE),filterFactory.literal(1),filterFactory.literal(0.5));  final Fill fill=styleFactory.createFill(filterFactory.literal(Color.CYAN),filterFactory.literal(0.5));  final PolygonSymbolizer sym=styleFactory.createPolygonSymbolizer(stroke,fill,null);  final Rule rule=styleFactory.createRule();  rule.symbolizers().add(sym);  final FeatureTypeStyle fts=styleFactory.createFeatureTypeStyle(new Rule[]{rule});  final Style style=styleFactory.createStyle();  style.featureTypeStyles().add(fts);  return style;}  }
class C{  public void copyTo(Gradient g){  g.numKnots=numKnots;  g.map=map.clone();  g.xKnots=xKnots.clone();  g.yKnots=yKnots.clone();  g.knotTypes=knotTypes.clone();}  }
class C{  boolean unrecoverableError(){  if (messager.errorRaised())   return true;  for (  JCDiagnostic d : deferredDiagnosticHandler.getDiagnostics()) {switch (d.getKind()) {case WARNING:      if (werror)       return true;    break;case ERROR:  if (fatalErrors || !d.isFlagSet(RECOVERABLE))   return true;break;}}return false;}  }
class C{  public void enableDeserializationOption(DeserializationFeature option){  this.deserializationFeatures.add(option);}  }
class C{  @Override public boolean canWrite(Object obj,Throwable err){  return true;}  }
class C{  public DeterministicHashMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  @Override public NormalCard colorTitle(@ColorRes int colorTitle){  mColorTitle=colorTitle;  return this;}  }
class C{  public void destroy() throws Exception {  if (ThreadFactory.SHUTDOWN_WAIT) {    this.shutdown4waiting();  } else {    this.shutdown4immediately();  }}  }
class C{  public static short[] toPrimitive(final Short[] array,final short valueForNull){  if (array == null) {    return null;  } else   if (array.length == 0) {    return ArrayUtils.EMPTY_SHORT_ARRAY;  }  final short[] result=new short[array.length];  for (int i=0; i < array.length; i++) {    Short b=array[i];    result[i]=b == null ? valueForNull : b.shortValue();  }  return result;}  }
class C{  public synchronized void commitAll(){  for (  ListEntryModel entryModel : list) {    entryModel.commit();  }  fireTableDataChanged();}  }
class C{  public Pos3D centre(){  return translate(0.5,0.5,0.5);}  }
class C{  public void put(int key,boolean value){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    mValues[i]=value;  } else {    i=~i;    if (mSize >= mKeys.length) {      int n=ArrayUtils.idealIntArraySize(mSize + 1);      int[] nkeys=new int[n];      boolean[] nvalues=new boolean[n];      System.arraycopy(mKeys,0,nkeys,0,mKeys.length);      System.arraycopy(mValues,0,nvalues,0,mValues.length);      mKeys=nkeys;      mValues=nvalues;    }    if (mSize - i != 0) {      System.arraycopy(mKeys,i,mKeys,i + 1,mSize - i);      System.arraycopy(mValues,i,mValues,i + 1,mSize - i);    }    mKeys[i]=key;    mValues[i]=value;    mSize++;  }}  }
class C{  @Override public void delete(byte[] key) throws IOException {  if (this.index == null)   return;  key=normalizeKey(key);  long seek=this.index.get(key);  if (seek < 0)   return;synchronized (this) {    seek=this.index.get(key);    if (seek < 0)     return;    this.file.seek(seek);    int size=this.file.readInt();    long filelength=this.file.length();    if (seek + size + 4 > filelength) {      ConcurrentLog.severe("BLOBHeap",this.heapFile.getName() + ": too long size " + size+ " in record at "+ seek);      throw new IOException(this.heapFile.getName() + ": too long size " + size+ " in record at "+ seek);    }    super.deleteFingerprint();    this.free.put(seek,size);    int l=size;    byte[] fill=new byte[size];    while (l-- > 0)     fill[l]=0;    this.file.write(fill,0,size);    this.index.remove(key);    tryMergeNextGaps(seek,size);    tryMergePreviousGap(seek);  }}  }
class C{  public void debugPrint(PrintWriter out,String prefix){  annotateEntries(prefix,out,null);}  }
class C{  protected void write(StringBuffer buffer){  System.err.println(buffer.toString());}  }
class C{  private void scheduledDeletion(){  System.setProperty("org.quartz.threadPool.threadCount","3");  SchedulerFactory sf=new StdSchedulerFactory();  try {    scheduler=sf.getScheduler();    Trigger trigger=newTrigger().withIdentity("Data_Retention_Trigger").startNow().withSchedule(dailyAtHourAndMinute(removeDailyAt,0)).build();    JobDetail deletionJob=newJob(RetentionJob.class).withIdentity("Data_Retention_Job").usingJobData(RetentionConstants.RETENTION_URL,retentionURL).build();    scheduler.scheduleJob(deletionJob,trigger);    scheduler.startDelayed(180);  } catch (  SchedulerException e) {    LOGGER.warn("Got an scheduler exception.",e);  }}  }
class C{  public static int dayNumberSince(@Nullable LocalDate startDate,@Nullable LocalDate date){  if (startDate == null || date == null) {    return -1;  }  return Days.daysBetween(startDate,date).getDays() + 1;}  }
class C{  public void swapLayout(final @LayoutRes int layout_custom){  layout_item_section=layout_custom;}  }
class C{  public void loadXml(String fileName) throws CoreException {  if (fileName == null) {    return;  }  st=new StopTimer();  clearMarkers(null);  final Project findBugsProject=new Project();  final Reporter bugReporter=new Reporter(javaProject,findBugsProject,monitor);  bugReporter.setPriorityThreshold(userPrefs.getUserDetectorThreshold());  reportFromXml(fileName,findBugsProject,bugReporter);  updateBugCollection(findBugsProject,bugReporter,false);  monitor.done();}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  @DSComment("Method returns IO Object") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:57.593 -0500",hash_original_method="0A26450DD89B99CDCEEC5300E1958D40",hash_generated_method="4F67C407FEF8F96ABDC5077C62504DCB") public static WritableByteChannel newChannel(OutputStream outputStream){  return new OutputStreamChannel(outputStream);}  }
class C{  public MemStatement(MemResource subject,MemIRI predicate,MemValue object,MemResource context,boolean explicit,int sinceSnapshot){  super(subject,predicate,object,context);  setExplicit(explicit);  setSinceSnapshot(sinceSnapshot);}  }
class C{  private EgDemandDetails createDemandDetails(final BigDecimal amount,final EgDemandReason dmdRsn,final Installment inst){  LOGGER.debug("Entered into createDemandDetails, amount: " + amount + ", dmdRsn: "+ dmdRsn+ ", inst: "+ inst);  final EgDemandDetails demandDetail=new EgDemandDetails();  demandDetail.setAmount(amount);  demandDetail.setAmtCollected(BigDecimal.ZERO);  demandDetail.setAmtRebate(BigDecimal.ZERO);  demandDetail.setEgDemandReason(dmdRsn);  demandDetail.setCreateDate(new Date());  demandDetail.setModifiedDate(new Date());  LOGGER.debug("demandDetail: " + demandDetail + "\nExiting from createDemandDetails");  return demandDetail;}  }
class C{  public static int convertTypeToSQLType(int type){  return getDataType(type).sqlType;}  }
class C{  public boolean isVisualPressed(){  if (pressed)   return true;  if (visualPressedTime <= 0)   return false;  if (visualPressedTime > TimeUtils.millis())   return true;  visualPressedTime=0;  return false;}  }
class C{  protected void defineGlobalWrapperClass(Scriptable global){  try {    ScriptableObject.defineClass(global,GlobalWrapper.class);  } catch (  Exception ex) {  }}  }
class C{  public void attributeUpdate(PrintServiceAttributeEvent psae){  log.fine("attributeUpdate - " + psae);}  }
class C{  public String toCuaPriority(){  if (value == null || value < 1 || value > 9) {    return null;  }  int letter=((value - 1) / 3) + 'A';  int number=((value - 1) % 3) + 1;  return (char)letter + "" + number;}  }
class C{  public boolean isUserDefined(){  String cm=getCostingMethod();  return cm != null && cm.equals(COSTINGMETHOD_UserDefined) && COSTELEMENTTYPE_Material.equals(getCostElementType());}  }
class C{  @Override public void executeScript(List<ScriptCommand> configurationScript){  String newLine=System.getProperty("line.separator");  StringBuffer buffer=new StringBuffer();  for (  ScriptCommand configuration : configurationScript) {    buffer.append(configuration.readScript());    buffer.append(newLine);  }  getLogger().debug("Sending CLI script: " + newLine + buffer.toString(),this.getClass().getName());  try {    File tempFile=File.createTempFile("wildfly-",".cli");    tempFile.deleteOnExit();    getFileHandler().writeTextFile(tempFile.getAbsolutePath(),buffer.toString(),null);    executeScriptFiles(Arrays.asList(tempFile.getAbsolutePath()));  } catch (  IOException e) {    throw new CargoException("Cannot create temporary CLI script file.",e);  }}  }
class C{  @Override public void startForegroundForPlugin(int id,Notification notification){  if (mPluginHostService != null) {    mPluginHostService.startForeground(id,notification);  }}  }
class C{  private static void init(){  encoders=new HashMap();  encoders.put("jpeg","org.jfree.chart.encoders.SunJPEGEncoderAdapter");  encoders.put("png","org.jfree.chart.encoders.SunPNGEncoderAdapter");}  }
class C{  public void createLogicalRouterDownLinkPort(LogicalRouterDownLinkPortCreateSpec spec,FutureCallback<LogicalRouterDownLinkPort> responseCallback) throws IOException {  postAsync(LOGICAL_ROUTER_PORTS_BASE_PATH,serializeObjectAsJson(spec),HttpStatus.SC_CREATED,new TypeReference<LogicalRouterDownLinkPort>(){  },responseCallback);}  }
class C{  public void processServerResponse(int response,ResponseData rawData){  mLastResponse=response;}  }
class C{  public SafeAsyncTask(Handler handler){  this.handler=handler;  this.executor=DEFAULT_EXECUTOR;}  }
class C{  private void extendColourMap(){  if (m_Instances.attribute(m_cIndex).isNominal()) {    for (int i=m_colorList.size(); i < m_Instances.attribute(m_cIndex).numValues(); i++) {      Color pc=m_DefaultColors[i % 10];      int ija=i / 10;      ija*=2;      for (int j=0; j < ija; j++) {        pc=pc.brighter();      }      if (m_backgroundColor != null) {        pc=Plot2D.checkAgainstBackground(pc,m_backgroundColor);      }      m_colorList.add(pc);    }  }}  }
class C{  public boolean isExpanded(){  return isExpanded;}  }
class C{  public IllegalBlockSizeException(){  super();}  }
class C{  public void writeObjectEntrySeparator(JsonGenerator jg) throws IOException, JsonGenerationException {  jg.writeRaw(',');  _objectIndenter.writeIndentation(jg,_nesting);}  }
class C{  public static QRCode encode(String content,ErrorCorrectionLevel ecLevel) throws WriterException {  return encode(content,ecLevel,null);}  }
class C{  private void tryScrollBackToTopWhileLoading(){  tryScrollBackToTop();}  }
class C{  protected String internalPut(String key,String newValue){synchronized (childAndPropertyLock) {    String oldValue=properties.get(key);    if (oldValue != null && oldValue.equals(newValue))     return oldValue;    properties=properties.put(key,newValue);    return oldValue;  }}  }
class C{  public static int firstNonSorted(int[] arr,int offset,int len){  if (len <= 1)   return -1;  int lower=arr[offset];  int end=offset + len;  for (int i=offset + 1; i < end; i++) {    int next=arr[i];    if (next <= lower) {      for (int j=i - 1; j > offset; j--) {        if (arr[j] < next)         return j + 1;      }      return offset;    }    lower=next;  }  return -1;}  }
class C{  public void addContestAttemptQue(String date,String uniqueKey,String queId,String userId,String name,int points,String check){  SQLiteDatabase db=this.getWritableDatabase();  ContentValues values=new ContentValues();  values.put(ATTEMPTED_DATE,date);  values.put(ATTEMPTED_UNIQUE_KEY,uniqueKey);  values.put(ATTEMPTED_QUE_ID,queId);  values.put(USER_ID,userId);  values.put(USERNAME,name);  values.put(ATTEMPTED_QUE_POINTS,points);  values.put(ATTEMPTED_QUE_CHECKING,check);  db.insert(TABLE_CONTEST_ATTEMPTED,null,values);  db.close();}  }
class C{  public static double loss(double pred,double y,double eps){  final double x=Math.abs(pred - y);  return Math.max(0,x - eps);}  }
class C{  public static <T>Iterator<T> reverse(Iterator<T> self){  return new ReverseListIterator<T>(toList(self));}  }
class C{  public boolean booleanValue(){  return this.value;}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  @Override public void process(final DM dm,ReplyProcessor21 processor){  final long startTime=getTimestamp();  if (logger.isTraceEnabled(LogMarker.DM)) {    logger.trace(LogMarker.DM,"DistTXCommitPhaseTwoReplyMessage process invoking reply processor with processorId:{}",this.processorId);  }  if (processor == null) {    if (logger.isTraceEnabled(LogMarker.DM)) {      logger.trace(LogMarker.DM,"DistTXCommitPhaseTwoReplyMessage processor not found");    }    return;  }  processor.process(this);}  }
class C{  public static String parseCharset(Map<String,String> headers){  return parseCharset(headers,HTTP.DEFAULT_CONTENT_CHARSET);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void writeTo(OutputStream out) throws IOException {  if (!closed) {    throw new IOException("Stream not closed");  }  if (isInMemory()) {    memoryOutputStream.writeTo(out);  } else {    FileInputStream fis=new FileInputStream(outputFile);    try {      IOUtils.copy(fis,out);    }  finally {      IOUtils.closeQuietly(fis);    }  }}  }
class C{  void addFieldValue(Map<TemporalField,Long> fieldValues,ChronoField field,long value){  Long old=fieldValues.get(field);  if (old != null && old.longValue() != value) {    throw new DateTimeException("Conflict found: " + field + " "+ old+ " differs from "+ field+ " "+ value);  }  fieldValues.put(field,value);}  }
class C{  public static Map<String,Object> executeMrp(DispatchContext ctx,Map<String,? extends Object> context){  Debug.logInfo("executeMrp called",module);  Delegator delegator=ctx.getDelegator();  LocalDispatcher dispatcher=ctx.getDispatcher();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Timestamp now=UtilDateTime.nowTimestamp();  Locale locale=(Locale)context.get("locale");  String mrpName=(String)context.get("mrpName");  Integer defaultYearsOffset=(Integer)context.get("defaultYearsOffset");  String facilityGroupId=(String)context.get("facilityGroupId");  String facilityId=(String)context.get("facilityId");  String manufacturingFacilityId=null;  if (UtilValidate.isEmpty(facilityId) && UtilValidate.isEmpty(facilityGroupId)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingMrpFacilityNotAvailable",locale));  }  if (UtilValidate.isEmpty(facilityId)) {    try {      GenericValue facilityGroup=EntityQuery.use(delegator).from("FacilityGroup").where("facilityGroupId",facilityGroupId).queryOne();      if (UtilValidate.isEmpty(facilityGroup)) {        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingMrpFacilityGroupIsNotValid",UtilMisc.toMap("facilityGroupId",facilityGroupId),locale));      }      List<GenericValue> facilities=facilityGroup.getRelated("FacilityGroupMember",null,UtilMisc.toList("sequenceNum"),false);      if (UtilValidate.isEmpty(facilities)) {        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingMrpFacilityGroupIsNotAssociatedToFacility",UtilMisc.toMap("facilityGroupId",facilityGroupId),locale));      }      for (      GenericValue facilityMember : facilities) {        GenericValue facility=facilityMember.getRelatedOne("Facility",false);        if ("WAREHOUSE".equals(facility.getString("facilityTypeId")) && UtilValidate.isEmpty(facilityId)) {          facilityId=facility.getString("facilityId");        }        if ("PLANT".equals(facility.getString("facilityTypeId")) && UtilValidate.isEmpty(manufacturingFacilityId)) {          manufacturingFacilityId=facility.getString("facilityId");        }      }    } catch (    GenericEntityException e) {      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingMrpFacilityGroupCannotBeLoad",UtilMisc.toMap("errorString",e.getMessage()),locale));    }  } else {    manufacturingFacilityId=facilityId;  }  if (UtilValidate.isEmpty(facilityId) || UtilValidate.isEmpty(manufacturingFacilityId)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingMrpFacilityOrManufacturingFacilityNotAvailable",locale));  }  int bomLevelWithNoEvent=0;  BigDecimal stockTmp=BigDecimal.ZERO;  String oldProductId=null;  String productId=null;  GenericValue product=null;  GenericValue productFacility=null;  BigDecimal eventQuantity=BigDecimal.ZERO;  Timestamp eventDate=null;  BigDecimal reorderQuantity=BigDecimal.ZERO;  BigDecimal minimumStock=BigDecimal.ZERO;  int daysToShip=0;  List<BOMNode> components=null;  boolean isBuilt=false;  GenericValue routing=null;  String mrpId=delegator.getNextSeqId("MrpEvent");  Map<String,Object> result=null;  Map<String,Object> parameters=null;  List<GenericValue> listInventoryEventForMRP=null;  ListIterator<GenericValue> iteratorListInventoryEventForMRP=null;  parameters=UtilMisc.<String,Object>toMap("mrpId",mrpId,"reInitialize",Boolean.TRUE,"defaultYearsOffset",defaultYearsOffset,"userLogin",userLogin);  parameters.put("facilityId",facilityId);  parameters.put("manufacturingFacilityId",manufacturingFacilityId);  try {    result=dispatcher.runSync("initMrpEvents",parameters);  } catch (  GenericServiceException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingMrpErrorRunningInitMrpEvents",UtilMisc.toMap("errorString",e.getMessage()),locale));  }  long bomLevel=0;  do {    EntityCondition filterByConditions=null;    if (bomLevel == 0) {      filterByConditions=EntityCondition.makeCondition(EntityCondition.makeCondition("billOfMaterialLevel",EntityOperator.EQUALS,null),EntityOperator.OR,EntityCondition.makeCondition("billOfMaterialLevel",EntityOperator.EQUALS,Long.valueOf(bomLevel)));    } else {      filterByConditions=EntityCondition.makeCondition("billOfMaterialLevel",EntityOperator.EQUALS,Long.valueOf(bomLevel));    }    try {      listInventoryEventForMRP=EntityQuery.use(delegator).from("MrpEventView").where(filterByConditions).orderBy("productId","eventDate").queryList();    } catch (    GenericEntityException e) {      Long bomLevelToString=new Long(bomLevel);      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingMrpErrorForBomLevel",UtilMisc.toMap("bomLevel",bomLevelToString.toString(),"errorString",e.getMessage()),locale));    }    if (UtilValidate.isNotEmpty(listInventoryEventForMRP)) {      bomLevelWithNoEvent=0;      oldProductId="";      for (      GenericValue inventoryEventForMRP : listInventoryEventForMRP) {        productId=inventoryEventForMRP.getString("productId");        eventQuantity=inventoryEventForMRP.getBigDecimal("quantity");        if (!productId.equals(oldProductId)) {          BigDecimal positiveEventQuantity=eventQuantity.compareTo(BigDecimal.ZERO) > 0 ? eventQuantity : eventQuantity.negate();          try {            product=inventoryEventForMRP.getRelatedOne("Product",true);            productFacility=EntityUtil.getFirst(product.getRelated("ProductFacility",UtilMisc.toMap("facilityId",facilityId),null,true));          } catch (          GenericEntityException e) {            return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingMrpCannotFindProductForEvent",locale));          }          stockTmp=findProductMrpQoh(mrpId,product,facilityId,dispatcher,delegator);          try {            InventoryEventPlannedServices.createOrUpdateMrpEvent(UtilMisc.<String,Object>toMap("mrpId",mrpId,"productId",product.getString("productId"),"mrpEventTypeId","INITIAL_QOH","eventDate",now),stockTmp,facilityId,null,false,delegator);          } catch (          GenericEntityException e) {            return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingMrpCreateOrUpdateEvent",UtilMisc.toMap("parameters",parameters),locale));          }          daysToShip=0;          if (productFacility != null) {            reorderQuantity=(productFacility.getBigDecimal("reorderQuantity") != null ? productFacility.getBigDecimal("reorderQuantity") : BigDecimal.ONE.negate());            minimumStock=(productFacility.getBigDecimal("minimumStock") != null ? productFacility.getBigDecimal("minimumStock") : BigDecimal.ZERO);            if ("SALES_ORDER_SHIP".equals(inventoryEventForMRP.getString("mrpEventTypeId"))) {              daysToShip=(productFacility.getLong("daysToShip") != null ? productFacility.getLong("daysToShip").intValue() : 0);            }          } else {            minimumStock=BigDecimal.ZERO;            reorderQuantity=BigDecimal.ONE.negate();          }          Map<String,Object> serviceResponse=null;          try {            serviceResponse=dispatcher.runSync("getManufacturingComponents",UtilMisc.<String,Object>toMap("productId",product.getString("productId"),"quantity",positiveEventQuantity,"excludeWIPs",Boolean.FALSE,"userLogin",userLogin));          } catch (          Exception e) {            return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingMrpErrorExplodingProduct",UtilMisc.toMap("productId",product.getString("productId")),locale));          }          components=UtilGenerics.checkList(serviceResponse.get("components"));          if (UtilValidate.isNotEmpty(components)) {            BOMNode node=(components.get(0)).getParentNode();            isBuilt=node.isManufactured();          } else {            isBuilt=false;          }          oldProductId=productId;        }        stockTmp=stockTmp.add(eventQuantity);        if (stockTmp.compareTo(minimumStock) < 0) {          BigDecimal qtyToStock=minimumStock.subtract(stockTmp);          eventDate=inventoryEventForMRP.getTimestamp("eventDate");          eventDate.setTime(eventDate.getTime() - 1);          ProposedOrder proposedOrder=new ProposedOrder(product,facilityId,manufacturingFacilityId,isBuilt,eventDate,qtyToStock);          proposedOrder.setMrpName(mrpName);          proposedOrder.calculateQuantityToSupply(reorderQuantity,minimumStock,iteratorListInventoryEventForMRP);          Map<String,Object> serviceResponse=null;          try {            serviceResponse=dispatcher.runSync("getManufacturingComponents",UtilMisc.<String,Object>toMap("productId",product.getString("productId"),"quantity",proposedOrder.getQuantity(),"excludeWIPs",Boolean.FALSE,"userLogin",userLogin));          } catch (          Exception e) {            return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingMrpErrorExplodingProduct",UtilMisc.toMap("productId",product.getString("productId")),locale));          }          components=UtilGenerics.checkList(serviceResponse.get("components"));          String routingId=(String)serviceResponse.get("workEffortId");          if (routingId != null) {            try {              routing=EntityQuery.use(delegator).from("WorkEffort").where("workEffortId",routingId).queryOne();            } catch (            GenericEntityException e) {              return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingMrpCannotFindProductForEvent",locale));            }          } else {            routing=null;          }          if (UtilValidate.isNotEmpty(components)) {            BOMNode node=(components.get(0)).getParentNode();            isBuilt=node.isManufactured();          } else {            isBuilt=false;          }          Map<String,Object> routingTaskStartDate=proposedOrder.calculateStartDate(daysToShip,routing,delegator,dispatcher,userLogin);          if (isBuilt) {            processBomComponent(mrpId,product,proposedOrder.getQuantity(),proposedOrder.getRequirementStartDate(),routingTaskStartDate,components);          }          String requirementId=null;          if (productFacility != null) {            requirementId=proposedOrder.create(ctx,userLogin);          }          if (UtilValidate.isEmpty(productFacility) && !isBuilt) {            logMrpError(mrpId,productId,now,"No ProductFacility record for [" + facilityId + "]; no requirement created.",delegator);          }          String eventName=null;          if (UtilValidate.isNotEmpty(requirementId)) {            eventName="*" + requirementId + " ("+ proposedOrder.getRequirementStartDate()+ ")*";          }          Map<String,Object> eventMap=UtilMisc.<String,Object>toMap("productId",product.getString("productId"),"mrpId",mrpId,"eventDate",eventDate,"mrpEventTypeId",(isBuilt ? "PROP_MANUF_O_RECP" : "PROP_PUR_O_RECP"));          try {            InventoryEventPlannedServices.createOrUpdateMrpEvent(eventMap,proposedOrder.getQuantity(),null,eventName,(proposedOrder.getRequirementStartDate().compareTo(now) < 0),delegator);          } catch (          GenericEntityException e) {            return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingMrpCreateOrUpdateEvent",UtilMisc.toMap("parameters",parameters),locale));          }          stockTmp=stockTmp.add(proposedOrder.getQuantity());        }      }    } else {      bomLevelWithNoEvent+=1;    }    bomLevel+=1;  } while (bomLevelWithNoEvent < 3);  result=FastMap.newInstance();  List<Object> msgResult=FastList.newInstance();  result.put("msgResult",msgResult);  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  Debug.logInfo("return from executeMrp",module);  return result;}  }
class C{  public String searchBackwardsTipText(){  return "Search backwards rather than forwards.";}  }
class C{  public static String readAll(final InputStream input,final String encoding) throws IOException {  return readAll(new InputStreamReader(input,encoding));}  }
class C{  public StreamPrintWriter(WriteStreamOld out){  super((Writer)_dummyWriter);  _out=out;}  }
class C{  public static void debug(int level,String line){  if ((selectedDebugLevel & level) != 0) {    System.out.println(DEBUG_HEADER + line);  }}  }
class C{  public boolean isAbsolute(){  return absolute;}  }
class C{  private void jPanelToolPanel_componentChanged(){  if (getFrame() != null) {    getFrame().validate();  }}  }
class C{  public String toString(){  return "OlcbProgrammerManager";}  }
class C{  public static void assertEquals(String message,Object expected,Object actual){  if (expected == null && actual == null) {    return;  }  if (expected != null && expected.equals(actual)) {    return;  }  failNotEquals(message,expected,actual);}  }
class C{  public boolean isFullScreen(){  return fullScreen;}  }
class C{  public LinearRegression(Matrix a,Matrix y,double ridge){  calculate(a,y,ridge);}  }
class C{  @Override public String toString(){  return "Entry, xIndex: " + mXIndex + " val (sum): "+ getVal();}  }
class C{  private void updatePrevious(){  if (this.cacheStats != null && !this.cacheStats.isClosed()) {    this.prevLoadTime=this.cacheStats.getLoadTime();    this.prevLoadsCompleted=this.cacheStats.getLoadsCompleted();    this.prevNetsearchTime=this.cacheStats.getNetsearchTime();    this.prevNetsearchesCompleted=this.cacheStats.getNetsearchesCompleted();    this.prevGets=this.cacheStats.getGets();  } else {    this.prevLoadTime=0L;    this.prevLoadsCompleted=0L;    this.prevNetsearchTime=0L;    this.prevNetsearchesCompleted=0L;    this.prevGets=0L;  }}  }
class C{  static boolean slowFileExists(Directory dir,String fileName) throws IOException {  try {    dir.openInput(fileName,IOContext.DEFAULT).close();    return true;  } catch (  NoSuchFileException|FileNotFoundException e) {    return false;  }}  }
class C{  public boolean isMatch(ReadableInstant instant){  long millis=DateTimeUtils.getInstantMillis(instant);  Chronology chrono=DateTimeUtils.getInstantChronology(instant);  for (int i=0; i < iTypes.length; i++) {    int value=iTypes[i].getField(chrono).get(millis);    if (value != iValues[i]) {      return false;    }  }  return true;}  }
class C{  public boolean createXML(Writer writer){  try {    m_printData.createXML(new StreamResult(writer));    writer.flush();    writer.close();    return true;  } catch (  Exception e) {    log.log(Level.SEVERE,"(w)",e);  }  return false;}  }
class C{  public BoundedInputStream(InputStream in,long size){  this.max=size;  this.in=in;}  }
class C{  private void sendAction(Context context,String action){  Intent intent=new Intent(context,PlaybackService.class);  intent.setAction(action);  LocalBroadcastManager.getInstance(context).sendBroadcast(intent);}  }
class C{  public void remove(SettableBeanProperty property){  String name=property.getName();  int index=name.hashCode() & (_buckets.length - 1);  Bucket tail=null;  boolean found=false;  for (Bucket bucket=_buckets[index]; bucket != null; bucket=bucket.next) {    if (!found && bucket.key.equals(name)) {      found=true;    } else {      tail=new Bucket(tail,bucket.key,bucket.value);    }  }  if (!found) {    throw new NoSuchElementException("No entry '" + property + "' found, can't remove");  }  _buckets[index]=tail;}  }
class C{  public int byteCount() throws IOException {  ReadableFontData data=this.internalReadData();  if (data == null) {    throw new IOException("No font data for the table.");  }  return data.length();}  }
class C{  protected void onShowConversations(@NonNull List<C> conversations){  if (DEBUG) {    Log.d(TAG,"Showing " + conversations.size() + " conversations");  }  mView.showConversations(new ArrayList<>(conversations));}  }
class C{  public Builder mergeVarintField(final int number,final int value){  if (number == 0) {    throw new IllegalArgumentException("Zero is not a valid field number.");  }  getFieldBuilder(number).addVarint(value);  return this;}  }
class C{  public byte[] calculateKeyedChecksum(byte[] data,int size,byte[] key,int usage) throws KrbCryptoException {  try {    return ArcFourHmac.calculateChecksum(key,usage,data,0,size);  } catch (  GeneralSecurityException e) {    KrbCryptoException ke=new KrbCryptoException(e.getMessage());    ke.initCause(e);    throw ke;  }}  }
class C{  void saveUdasForAsyncModifyOrUpgradeSubscription(List<VOUda> udas,Subscription dbSubscription) throws MandatoryUdaMissingException, ValidationException, NonUniqueBusinessKeyException, ObjectNotFoundException, OperationNotPermittedException, ConcurrentModificationException {  Organization supplier=dbSubscription.getProduct().getSupplierOrResellerTemplate().getVendor();  manageBean.getUdaAccess().validateUdaAndAdaptTargetKey(udas,supplier,dbSubscription);  List<VOUda> newUdas=new ArrayList<>();  List<VOUda> defaultValueUdas=new ArrayList<>();  for (  VOUda voUda : udas) {    if (voUda.getKey() > 0) {      modUpgBean.storeModifiedUda(voUda.getKey(),ModifiedEntityType.UDA_VALUE,voUda.getUdaValue(),dbSubscription.getKey());    } else {      newUdas.add(voUda);    }  }  for (  VOUda voUda : newUdas) {    VOUda defaultValueUda=new VOUda();    defaultValueUda.setTargetObjectKey(voUda.getTargetObjectKey());    defaultValueUda.setUdaDefinition(voUda.getUdaDefinition());    defaultValueUda.setUdaValue(voUda.getUdaDefinition().getDefaultValue());    defaultValueUdas.add(defaultValueUda);  }  manageBean.getUdaAccess().saveUdas(defaultValueUdas,dbSubscription.getOrganization());  for (  VOUda voUda : newUdas) {    Uda uda=new Uda();    uda.setTargetObjectKey(voUda.getTargetObjectKey());    uda.setUdaDefinitionKey(voUda.getUdaDefinition().getKey());    uda=(Uda)dataManager.getReferenceByBusinessKey(uda);    modUpgBean.storeModifiedUda(uda.getKey(),ModifiedEntityType.UDA_VALUE,voUda.getUdaValue(),dbSubscription.getKey());  }}  }
class C{  public static boolean isNaN(float v){  return false;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  String outputHeader;  String assignmentFieldName;  int assignmentFieldNum=-1;  String baseFileHeader="not specified";  double backgroundValue=0;  int row, col;  double rowYCoord, value, z;  int progress=0;  double cellSize=-1.0;  int rows, topRow, bottomRow;  int cols;  double noData=-32768.0;  double east;  double west;  double north;  double south;  DataType dataType=WhiteboxRasterBase.DataType.INTEGER;  Object[] data;  Object[][] allRecords=null;  BoundingBox box;  double[][] geometry;  int numPoints, numParts, i, part, numEdges;  int stCol, endCol;  int startingPointInPart, endingPointInPart;  double x1, y1, x2, y2, xPrime;  boolean foundIntersection;  ArrayList<Integer> edgeList=new ArrayList<>();  boolean useRecID=false;  DecimalFormat df=new DecimalFormat("###,###,###,###");  double smallNumber=-999999.0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputHeader=args[1];  assignmentFieldName=args[2];  if (args[3].toLowerCase().contains("nodata")) {    backgroundValue=noData;  } else {    backgroundValue=Double.parseDouble(args[3]);  }  if (!args[4].toLowerCase().contains("not specified")) {    cellSize=Double.parseDouble(args[4]);  }  baseFileHeader=args[5];  if ((inputFile == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    int numRecs=input.getNumberOfRecords();    if (input.getShapeType().getBaseType() != ShapeType.POLYGON) {      showFeedback("The input shapefile must be of a 'polygon' data type.");      return;    }    AttributeTable reader=input.getAttributeTable();    int numberOfFields=reader.getFieldCount();    for (i=0; i < numberOfFields; i++) {      DBFField field=reader.getField(i);      if (field.getName().equals(assignmentFieldName)) {        assignmentFieldNum=i;        if (field.getDataType() == DBFField.DBFDataType.NUMERIC || field.getDataType() == DBFField.DBFDataType.FLOAT) {          if (field.getDecimalCount() == 0) {            dataType=WhiteboxRasterBase.DataType.INTEGER;          } else {            dataType=WhiteboxRasterBase.DataType.FLOAT;          }        } else {          useRecID=true;        }      }    }    if (assignmentFieldNum < 0) {      useRecID=true;    }    WhiteboxRaster output;    if ((cellSize > 0) || ((cellSize < 0) & (baseFileHeader.toLowerCase().contains("not specified")))) {      if ((cellSize < 0) & (baseFileHeader.toLowerCase().contains("not specified"))) {        cellSize=Math.min((input.getyMax() - input.getyMin()) / 500.0,(input.getxMax() - input.getxMin()) / 500.0);      }      north=input.getyMax() + cellSize / 2.0;      south=input.getyMin() - cellSize / 2.0;      east=input.getxMax() + cellSize / 2.0;      west=input.getxMin() - cellSize / 2.0;      rows=(int)(Math.ceil((north - south) / cellSize));      cols=(int)(Math.ceil((east - west) / cellSize));      east=west + cols * cellSize;      south=north - rows * cellSize;      output=new WhiteboxRaster(outputHeader,north,south,east,west,rows,cols,WhiteboxRasterBase.DataScale.CONTINUOUS,dataType,backgroundValue,noData);    } else {      output=new WhiteboxRaster(outputHeader,"rw",baseFileHeader,dataType,backgroundValue);      output.setNoDataValue(noData);    }    ArrayList<RecordInfo> myList=new ArrayList<>();    for (    ShapeFileRecord record : input.records) {      i=record.getRecordNumber();      box=getBoundingBoxFromShapefileRecord(record);      myList.add(new RecordInfo(box.getMaxY(),i));    }    Collections.sort(myList);    if (!useRecID) {      allRecords=new Object[numRecs][numberOfFields];      int a=0;      while ((data=reader.nextRecord()) != null) {        System.arraycopy(data,0,allRecords[a],0,numberOfFields);        a++;      }    }    long heapSize=Runtime.getRuntime().totalMemory();    int flushSize=(int)(heapSize / 32);    int j, numCellsToWrite;    PriorityQueue<RowPriorityGridCell> pq=new PriorityQueue<>(flushSize);    RowPriorityGridCell cell;    int numRecords=input.getNumberOfRecords();    int count=0;    int progressCount=(int)(numRecords / 100.0);    if (progressCount <= 0) {      progressCount=1;    }    ShapeFileRecord record;    for (    RecordInfo ri : myList) {      record=input.getRecord(ri.recNumber - 1);      if (!useRecID) {        value=Double.valueOf(allRecords[record.getRecordNumber() - 1][assignmentFieldNum].toString());      } else {        value=record.getRecordNumber();      }      geometry=getXYFromShapefileRecord(record);      numPoints=geometry.length;      numParts=partData.length;      for (part=0; part < numParts; part++) {        if (!partHoleData[part]) {          box=new BoundingBox();          startingPointInPart=partData[part];          if (part < numParts - 1) {            endingPointInPart=partData[part + 1];          } else {            endingPointInPart=numPoints;          }          for (i=startingPointInPart; i < endingPointInPart; i++) {            if (geometry[i][1] < box.getMinY()) {              box.setMinY(geometry[i][1]);            }            if (geometry[i][1] > box.getMaxY()) {              box.setMaxY(geometry[i][1]);            }          }          topRow=output.getRowFromYCoordinate(box.getMaxY());          bottomRow=output.getRowFromYCoordinate(box.getMinY());          for (row=topRow; row <= bottomRow; row++) {            edgeList.clear();            foundIntersection=false;            rowYCoord=output.getYCoordinateFromRow(row);            for (i=startingPointInPart; i < endingPointInPart - 1; i++) {              if (isBetween(rowYCoord,geometry[i][1],geometry[i + 1][1])) {                y1=geometry[i][1];                y2=geometry[i + 1][1];                if (y2 != y1) {                  x1=geometry[i][0];                  x2=geometry[i + 1][0];                  xPrime=(x1 + (rowYCoord - y1) / (y2 - y1) * (x2 - x1));                  edgeList.add(output.getColumnFromXCoordinate(xPrime));                  foundIntersection=true;                }              }            }            if (foundIntersection) {              numEdges=edgeList.size();              if (numEdges == 2) {                stCol=Math.min(edgeList.get(0),edgeList.get(1));                endCol=Math.max(edgeList.get(0),edgeList.get(1));                for (col=stCol; col <= endCol; col++) {                  pq.add(new RowPriorityGridCell(row,col,value));                }              } else {                Integer[] edgeArray=new Integer[numEdges];                edgeList.toArray(edgeArray);                Arrays.sort(edgeArray);                boolean fillFlag=true;                for (i=0; i < numEdges - 1; i++) {                  stCol=edgeArray[i];                  endCol=edgeArray[i + 1];                  if (fillFlag) {                    for (col=stCol; col <= endCol; col++) {                      pq.add(new RowPriorityGridCell(row,col,value));                    }                  }                  fillFlag=!fillFlag;                }              }            }          }        }      }      for (part=0; part < numParts; part++) {        if (partHoleData[part]) {          box=new BoundingBox();          startingPointInPart=partData[part];          if (part < numParts - 1) {            endingPointInPart=partData[part + 1];          } else {            endingPointInPart=numPoints;          }          for (i=startingPointInPart; i < endingPointInPart; i++) {            if (geometry[i][1] < box.getMinY()) {              box.setMinY(geometry[i][1]);            }            if (geometry[i][1] > box.getMaxY()) {              box.setMaxY(geometry[i][1]);            }          }          topRow=output.getRowFromYCoordinate(box.getMaxY());          bottomRow=output.getRowFromYCoordinate(box.getMinY());          for (row=topRow; row <= bottomRow; row++) {            edgeList.clear();            foundIntersection=false;            rowYCoord=output.getYCoordinateFromRow(row);            for (i=startingPointInPart; i < endingPointInPart - 1; i++) {              if (isBetween(rowYCoord,geometry[i][1],geometry[i + 1][1])) {                y1=geometry[i][1];                y2=geometry[i + 1][1];                if (y2 != y1) {                  x1=geometry[i][0];                  x2=geometry[i + 1][0];                  xPrime=(x1 + (rowYCoord - y1) / (y2 - y1) * (x2 - x1));                  edgeList.add(output.getColumnFromXCoordinate(xPrime));                  foundIntersection=true;                }              }            }            if (foundIntersection) {              numEdges=edgeList.size();              if (numEdges == 2) {                stCol=Math.min(edgeList.get(0),edgeList.get(1));                endCol=Math.max(edgeList.get(0),edgeList.get(1));                for (col=stCol; col <= endCol; col++) {                  pq.add(new RowPriorityGridCell(row,col,smallNumber));                }              } else {                Integer[] edgeArray=new Integer[numEdges];                edgeList.toArray(edgeArray);                Arrays.sort(edgeArray);                boolean fillFlag=true;                for (i=0; i < numEdges - 1; i++) {                  stCol=edgeArray[i];                  endCol=edgeArray[i + 1];                  if (fillFlag) {                    for (col=stCol; col <= endCol; col++) {                      z=output.getValue(row,col);                      if (z == value) {                        pq.add(new RowPriorityGridCell(row,col,smallNumber));                      }                    }                  }                  fillFlag=!fillFlag;                }              }            }          }        }      }      if (pq.size() >= flushSize) {        j=0;        numCellsToWrite=pq.size();        do {          cell=pq.poll();          if (cell.z == smallNumber) {            output.setValue(cell.row,cell.col,backgroundValue);          } else {            output.setValue(cell.row,cell.col,cell.z);          }          j++;          if (j % 1000 == 0) {            if (cancelOp) {              cancelOperation();              return;            }            updateProgress("Writing to Output (" + df.format(j) + " of "+ df.format(numCellsToWrite)+ "):",(int)(j * 100.0 / numCellsToWrite));          }        } while (pq.size() > 0);      }      if (cancelOp) {        cancelOperation();        return;      }      count++;      if (count % progressCount == 0) {        progress++;        updateProgress(progress);      }    }    j=0;    numCellsToWrite=pq.size();    if (numCellsToWrite > 0) {      do {        cell=pq.poll();        if (cell.z == smallNumber) {          output.setValue(cell.row,cell.col,backgroundValue);        } else {          output.setValue(cell.row,cell.col,cell.z);        }        j++;        if (j % 1000 == 0) {          if (cancelOp) {            cancelOperation();            return;          }          updateProgress("Writing to Output (" + df.format(j) + " of "+ df.format(numCellsToWrite)+ "):",(int)(j * 100.0 / numCellsToWrite));        }      } while (pq.size() > 0);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.flush();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  void write(ImageOutputStream ios) throws IOException {  length=2 + data.length;  writeTag(ios);  ios.write(data);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:46.630 -0500",hash_original_method="FD1B61A72867CD7ABA9E4FFEC34475BF",hash_generated_method="B9FEA51B2B2B7EBC32DCE6FE614CFE0E") private boolean traverseCurrentAxis(int direction,boolean sendEvent,String contentDescription){  return traverseGivenAxis(direction,mCurrentAxis,sendEvent,contentDescription);}  }
class C{  public Matrix4f rotateXYZ(Vector3f angles){  return rotateXYZ(angles.x,angles.y,angles.z);}  }
class C{  public static boolean protectXtremioVolume(Volume volume,DbClient dbClient){  StorageSystem storageSystem=dbClient.queryObject(StorageSystem.class,volume.getStorageController());  if (storageSystem.getSystemType() != null && storageSystem.getSystemType().equalsIgnoreCase(Type.xtremio.toString())) {    return true;  }  return false;}  }
class C{  public DeleteNodesResponse clone(){  DeleteNodesResponse result=new DeleteNodesResponse();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  result.Results=Results == null ? null : Results.clone();  result.DiagnosticInfos=DiagnosticInfos == null ? null : DiagnosticInfos.clone();  return result;}  }
class C{  public static void initiateFailure(Error f) throws InternalGemFireError, Error {  SystemFailure.setFailure(f);  throwFailure();}  }
class C{  public double distanceSq(final MutableInt3D p){  final double dx=(double)this.x - p.x;  final double dy=(double)this.y - p.y;  final double dz=(double)this.z - p.z;  return (dx * dx + dy * dy + dz * dz);}  }
class C{  public static String toString(float[] array){  if (array == null) {    return NULL;  }  StringBuilder sb=new StringBuilder();  for (int i=0; i < array.length; i++) {    if (i != 0) {      sb.append(',');    }    sb.append(array[i]);  }  return sb.toString();}  }
class C{  public ClientBuilder defaultResponseTimeout(Duration defaultResponseTimeout){  return defaultResponseTimeoutMillis(requireNonNull(defaultResponseTimeout,"defaultResponseTimeout").toMillis());}  }
class C{  public void collapseTree(GraphModel graph,TreeModel treeData,Object author){  Collection<CollapseData> collapseChanges=collapser.collapseTree(graph,treeData);  fireCollapseChanged(collapseChanges,CollapseData.EMPTY_LIST,author);}  }
class C{  public static Reflect on(String name,ClassLoader classLoader) throws ReflectException {  return on(forName(name,classLoader));}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private boolean routeProfilesEqual(List<TransitRouteStop> routeProfile1,List<TransitRouteStop> routeProfile2){  if (routeProfile1.size() != routeProfile2.size())   return false;  for (int i=0; i < routeProfile1.size(); i++) {    if (!(routeProfile1.get(i).getStopFacility().getId().equals(routeProfile2.get(i).getStopFacility().getId())))     break;    if (i == routeProfile1.size() - 1)     return true;  }  return false;}  }
class C{  protected String toTagParameterArray(Map<String,String> tags) throws UnsupportedEncodingException {  if (tags == null || tags.isEmpty()) {    return "";  }  StringBuilder sb=new StringBuilder(encode("{","UTF-8"));  for (  Map.Entry<String,String> tagEntry : tags.entrySet()) {    sb.append(tagEntry.getKey()).append("=");    String tagV=tagEntry.getValue().replaceAll("\\|",encode("|","UTF-8"));    sb.append(tagV).append(",");  }  sb.replace(sb.length() - 1,sb.length(),encode("}","UTF-8"));  return sb.toString();}  }
class C{  public String toSixFigureString(){  int hundredkmE=(int)Math.floor(easting / 100000);  int hundredkmN=(int)Math.floor(northing / 100000);  String firstLetter;  if (hundredkmN < 5) {    if (hundredkmE < 5) {      firstLetter="S";    } else {      firstLetter="T";    }  } else   if (hundredkmN < 10) {    if (hundredkmE < 5) {      firstLetter="N";    } else {      firstLetter="O";    }  } else {    firstLetter="H";  }  int index=65 + ((4 - (hundredkmN % 5)) * 5) + (hundredkmE % 5);  if (index >= 73)   index++;  String secondLetter=Character.toString((char)index);  int e=(int)Math.floor((easting - (100000 * hundredkmE)) / 100);  int n=(int)Math.floor((northing - (100000 * hundredkmN)) / 100);  String es="" + e;  if (e < 100)   es="0" + es;  if (e < 10)   es="0" + es;  String ns="" + n;  if (n < 100)   ns="0" + ns;  if (n < 10)   ns="0" + ns;  return firstLetter + secondLetter + es+ ns;}  }
class C{  private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {  ois.defaultReadObject();  try {    resBundle=JdbcRowSetResourceBundle.getJdbcRowSetResourceBundle();  } catch (  IOException ioe) {    throw new RuntimeException(ioe);  }}  }
class C{  public List discover(String url) throws DiscoveryException {  return discover(url,_maxRedirects,_httpFetcher);}  }
class C{  public long createAlarm(Intent intent){  long delay=generateRandomDelay();  long timestamp=delay + getCurrentTime();  return createAlarm(intent,timestamp);}  }
class C{  private int measureLong(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=mViewPager.getAdapter().getCount();    result=(int)(getPaddingLeft() + getPaddingRight() + (count * 2 * mRadius)+ (count - 1) * mRadius + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public void notifyDislike() throws EchoNestException {  com.fastbootmobile.encore.model.Song currentTrack=PlaybackProxy.getCurrentTrack();  if (currentTrack != null) {    String songRef=currentTrack.getRef();    try {      mPlaylistSession.feedback(DynamicPlaylistSession.FeedbackType.ban_song,songRef);    } catch (    Exception e) {      Log.e(TAG,"Cannot feedback dislike",e);    }  }}  }
class C{  public static Archive createArchivePerms(){  return (Archive)(new ArchivePermsImpl());}  }
class C{  private static byte[] fromHex(String hex){  byte[] binary=new byte[hex.length() / 2];  for (int i=0; i < binary.length; i++) {    binary[i]=(byte)Integer.parseInt(hex.substring(2 * i,2 * i + 2),16);  }  return binary;}  }
class C{  public void beforeInterestRegistration(){}  }
class C{  @Override public int update(final Uri uri,final ContentValues values,final String where,final String[] whereArgs){  Helpers.validateSelection(where,APP_READABLE_COLUMNS_SET);  SQLiteDatabase db=openHelper.getWritableDatabase();  int count;  boolean startService=false;  if (values.containsKey(DownloadContract.Downloads.COLUMN_DELETED)) {    if (values.getAsInteger(DownloadContract.Downloads.COLUMN_DELETED) == 1) {      startService=true;    }  }  ContentValues filteredValues;  if (Binder.getCallingPid() != Process.myPid()) {    filteredValues=new ContentValues();    copyString(DownloadContract.Downloads.COLUMN_APP_DATA,values,filteredValues);    Integer i=values.getAsInteger(DownloadContract.Downloads.COLUMN_CONTROL);    if (i != null) {      filteredValues.put(DownloadContract.Downloads.COLUMN_CONTROL,i);      startService=true;    }    copyInteger(DownloadContract.Downloads.COLUMN_CONTROL,values,filteredValues);    copyString(DownloadContract.Downloads.COLUMN_MEDIAPROVIDER_URI,values,filteredValues);    copyInteger(DownloadContract.Downloads.COLUMN_DELETED,values,filteredValues);  } else {    filteredValues=values;    Integer status=values.getAsInteger(DownloadContract.Downloads.COLUMN_STATUS);    boolean isRestart=status != null && status == DownloadStatus.PENDING;    boolean isUserBypassingSizeLimit=values.containsKey(DownloadContract.Downloads.COLUMN_BYPASS_RECOMMENDED_SIZE_LIMIT);    if (isRestart || isUserBypassingSizeLimit) {      startService=true;    }  }  int match=URI_MATCHER.match(uri);switch (match) {case MY_DOWNLOADS:case MY_DOWNLOADS_ID:case ALL_DOWNLOADS:case ALL_DOWNLOADS_ID:    SqlSelection selection=getWhereClause(uri,where,whereArgs,match);  if (filteredValues.size() > 0) {    count=db.update(DownloadContract.Downloads.DOWNLOADS_TABLE_NAME,filteredValues,selection.getSelection(),selection.getParameters());  } else {    count=0;  }notifyStatusIfDownloadStatusChanged(values);break;case BATCHES:case BATCHES_ID:SqlSelection batchSelection=getWhereClause(uri,where,whereArgs,match);count=db.update(DownloadContract.Batches.BATCHES_TABLE_NAME,values,batchSelection.getSelection(),batchSelection.getParameters());if (values.containsKey(DownloadContract.Batches.COLUMN_STATUS) || values.containsKey(DownloadContract.Batches.COLUMN_DELETED)) {notifyBatchesChanged();}break;default :LLog.d("updating unknown/invalid URI: " + uri);throw new UnsupportedOperationException("Cannot update URI: " + uri);}notifyContentChanged(uri,match);if (startService) {Context context=getContext();context.startService(new Intent(context,DownloadService.class));}return count;}  }
class C{  @NonNull protected Set<ActEvent> loadEventData(@NonNull File storage){  throw new UnsupportedOperationException();}  }
class C{  public void flushQuietly(){  try {    flush();  } catch (  IOException e) {  }}  }
class C{  public int updateTriggerStatesForJob(Connection conn,JobKey jobKey,String state) throws SQLException {  PreparedStatement ps=null;  try {    ps=conn.prepareStatement(rtp(UPDATE_JOB_TRIGGER_STATES));    ps.setString(1,state);    ps.setString(2,jobKey.getName());    ps.setString(3,jobKey.getGroup());    return ps.executeUpdate();  }  finally {    closeStatement(ps);  }}  }
class C{  @Override public void GOTO(){}  }
class C{  TIntByteHashIterator(TIntByteHashMap map){  super(map);}  }
class C{  public String globalInfo(){  return "Performs an inner join on two incoming datasets/instance streams (IMPORTANT: assumes that " + "both datasets are sorted in ascending order of the key fields). If data is not sorted then use" + "a Sorter step to sort both into ascending order of the key fields. Does not handle the case where"+ "keys are not unique in one or both inputs.";}  }
class C{  public RegularDegreeEdgeRandomIterator(RegularDegreeEdgePool regularDegreeEdgePool){  super(regularDegreeEdgePool);}  }
class C{  public String(byte[] data,String encoding) throws UnsupportedEncodingException {  this(data,0,data.length,encoding);}  }
class C{  public html addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  static byte[] readFile(InputStream in,long expectedSize) throws IOException {  if (expectedSize > Integer.MAX_VALUE) {    throw new OutOfMemoryError("file is too large to fit in a byte array: " + expectedSize + " bytes");  }  return expectedSize == 0 ? ByteStreams.toByteArray(in) : ByteStreams.toByteArray(in,(int)expectedSize);}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.ecommerce.org/";  String malformedName="prefix::local";  Document doc;  DocumentType docType=null;  DOMImplementation domImpl;  Document aNewDoc;  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();{    boolean success=false;    try {      aNewDoc=domImpl.createDocument(namespaceURI,malformedName,docType);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  @Override public Throwable initCause(Throwable cause){  return super.initCause(cause);}  }
class C{  public void testDoubleValueNegInfinity(){  String a="-123809648392384754573567356745735.63567890295784902768787678287E+400";  BigDecimal aNumber=new BigDecimal(a);  double result=Double.NEGATIVE_INFINITY;  assertEquals("incorrect value",result,aNumber.doubleValue(),0);}  }
class C{  @Override protected void initViews(Bundle savedInstanceState){  this.imageView=(ImageView)this.findViewById(R.id.reflection_iv);}  }
class C{  public TLongObjectHashMapDecorator(TLongObjectHashMap<V> map){  super();  this._map=map;}  }
class C{  public void clear(){  size=0;  rules=new Rule[10];}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:30.244 -0500",hash_original_method="7F9E047B51DBA75DC18A757B80E882F7",hash_generated_method="DB1114BC7A734B93414409E7AC5A0CD5") public static String toOctalString(long v){  String str=new String();  str.addTaint((int)v);  return str;}  }
class C{  public static boolean isIndirectInvocation(Tree.InvocationExpression that,boolean unwrap){  return isIndirectInvocation(that.getPrimary(),unwrap);}  }
class C{  public ExtendedBufferCapabilities(ImageCapabilities front,ImageCapabilities back,FlipContents flip,VSyncType t){  super(front,back,flip);  this.vsync=t;}  }
class C{  public void testDivideBigDecimalScaleMathContextHALF_UP(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=45;  String b="134432345432345748766876876723342238476237823787879183470";  int bScale=70;  int precision=21;  RoundingMode rm=RoundingMode.HALF_UP;  MathContext mc=new MathContext(precision,rm);  String c="2.77923185514690367475E+26";  int resScale=-6;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,mc);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public static <T>T performLocked(Callable<T> task,String lockFilePath,Object lockable) throws Exception {  try (RandomAccessFile raf=new RandomAccessFile(lockFilePath,"rw");FileOutputStream fos=new FileOutputStream(raf.getFD())){synchronized (lockable) {      FileLock lock=fos.getChannel().lock();      try {        return task.call();      }  finally {        lock.release();      }    }  } }  }
class C{  public void add(final FieldDescriptor type){  if (type.getJavaType() == FieldDescriptor.JavaType.MESSAGE) {    throw new IllegalArgumentException("ExtensionRegistry.add() must be provided a default instance when " + "adding an embedded message extension.");  }  ExtensionInfo info=new ExtensionInfo(type,null);  add(info,Extension.ExtensionType.IMMUTABLE);  add(info,Extension.ExtensionType.MUTABLE);}  }
class C{  public void subscribeTo(final K key,final Subscriber<V> subscriber,final Executor subscribeOn){  CompletableFuture.runAsync(null,subscribeOn);}  }
class C{  public boolean removeDisconnectedEventListener(PeerDisconnectedEventListener listener){  boolean result=ListenerRegistration.removeFromList(listener,peerDisconnectedEventListeners);  for (  Peer peer : getConnectedPeers())   peer.removeDisconnectedEventListener(listener);  for (  Peer peer : getPendingPeers())   peer.removeDisconnectedEventListener(listener);  return result;}  }
class C{  public int[] shuffle(){  int[] random=new int[init.length];  for (int i=0; i < random.length; i++) {    random[i]=i;  }  Random r=new Random();  for (int i=random.length - 1; i >= 0; i--) {    int t=r.nextInt(i + 1);    int swap=random[i];    random[i]=random[t];    random[t]=swap;  }  for (int i=0; i < random.length; i++) {    random[i]=init[random[i]];  }  return random;}  }
class C{  ScheduledFutureTask(Runnable r,V result,long ns,long period){  super(r,result);  this.time=ns;  this.period=period;  this.sequenceNumber=sequencer.getAndIncrement();}  }
class C{  protected int hleJpegCsc(TPointer imageBuffer,TPointer yCbCrBuffer,int widthHeight,int bufferWidth){  int height=getHeight(widthHeight);  int width=getWidth(widthHeight);  int pixelFormat=TPSM_PIXEL_STORAGE_MODE_32BIT_ABGR8888;  int bytesPerPixel=sizeOfTextureType[pixelFormat];  int lineWidth=Math.min(width,bufferWidth);  int skipEndOfLine=Math.max(0,bufferWidth - lineWidth);  int imageSizeInBytes=height * bufferWidth * bytesPerPixel;  IMemoryWriter imageWriter=MemoryWriter.getMemoryWriter(imageBuffer.getAddress(),imageSizeInBytes,bytesPerPixel);  int sizeY=width * height;  int sizeCb=sizeY >> 2;  int addressY=yCbCrBuffer.getAddress();  int addressCb=addressY + sizeY;  int addressCr=addressCb + sizeCb;  if (log.isDebugEnabled()) {    log.debug(String.format("hleJpegCsc 0x%08X, 0x%08X, 0x%08X",addressY,addressCb,addressCr));  }  int[] bufferCb=new int[sizeCb];  int[] bufferCr=new int[sizeCb];  IMemoryReader imageReaderCb=MemoryReader.getMemoryReader(addressCb,sizeCb,1);  IMemoryReader imageReaderCr=MemoryReader.getMemoryReader(addressCr,sizeCb,1);  for (int i=0; i < sizeCb; i++) {    bufferCb[i]=imageReaderCb.readNext();    bufferCr[i]=imageReaderCr.readNext();  }  IMemoryReader imageReaderY=MemoryReader.getMemoryReader(addressY,sizeY,1);  for (int y=0; y < height; y++) {    int indexCb=(y >> 1) * (width >> 1);    for (int x=0; x < width; x+=2, indexCb++) {      int y0=imageReaderY.readNext();      int y1=imageReaderY.readNext();      int cb=bufferCb[indexCb];      int cr=bufferCr[indexCb];      int abgr0=colorYCbCrToABGR(y0,cb,cr);      int abgr1=colorYCbCrToABGR(y1,cb,cr);      imageWriter.writeNext(abgr0);      imageWriter.writeNext(abgr1);    }    imageWriter.skip(skipEndOfLine);  }  imageWriter.flush();  VideoEngine.getInstance().addVideoTexture(imageBuffer.getAddress(),imageBuffer.getAddress() + imageSizeInBytes);  return 0;}  }
class C{  public void visitAttribute(Attribute attr){  if (cv != null) {    cv.visitAttribute(attr);  }}  }
class C{  public boolean isRestartRequired(){  return this.restartRequired;}  }
class C{  @Override public boolean equals(final Object obj){  if (ActiveMQResourceAdapter.trace) {    ActiveMQRALogger.LOGGER.trace("equals(" + obj + ")");  }  if (obj == null) {    return false;  }  if (obj instanceof ActiveMQResourceAdapter) {    return raProperties.equals(((ActiveMQResourceAdapter)obj).getProperties());  }  return false;}  }
class C{  @Override public ChatEvent parse(String text){  if (text.length() < 600) {    text=text.trim();    RaptorStringTokenizer tok=new RaptorStringTokenizer(text," \r\n");    if (tok.hasMoreTokens()) {      String source=tok.nextToken();      if (tok.hasMoreTokens()) {        String s2=tok.nextToken();        if (s2.equals("says:")) {          return new ChatEvent(IcsUtils.stripTitles(source),ChatType.TELL,text);        } else         if (s2.equals("tells")) {          if (tok.hasMoreTokens()) {            String s3=tok.nextToken();            if (s3.equals("you:")) {              return new ChatEvent(IcsUtils.stripTitles(source),ChatType.TELL,text.trim());            }          }        }      }    }    return null;  }  return null;}  }
class C{  public String sqlObject_createTrigger(String sourceVendorName,String targetVendorName,String catalogName,String schemaName,String triggerName,String tableName,String triggerType,String triggerEvent,String actionOrientation,String actionType,String triggerFunction){  triggerName=normalizeIdentifier(targetVendorName,triggerName);  triggerType=translateTriggerType(sourceVendorName,targetVendorName,triggerType);  actionOrientation=translateTriggerActionOrientation(sourceVendorName,targetVendorName,actionOrientation);  triggerFunction=translateTriggerFunction(sourceVendorName,targetVendorName,triggerFunction);  String triggerCode=translateTriggerCode(sourceVendorName,targetVendorName,actionType,triggerName,triggerFunction);  return m_interfaces.get(getDBVendorID(targetVendorName)).sqlObject_createTrigger(catalogName,schemaName,triggerName,tableName,triggerType,triggerEvent,actionOrientation,triggerCode);}  }
class C{  private void ensureCapacity(int minCapacity){  int oldCapacity=elementData.length;  if (minCapacity > oldCapacity) {    int newCapacity=oldCapacity + 5;    if (newCapacity < minCapacity) {      newCapacity=minCapacity;    }    Object[] newElementData=new Object[newCapacity];    System.arraycopy(this.elementData,0,newElementData,0,this.elementData.length);    elementData=newElementData;  }}  }
class C{  public synchronized void removeZoomListener(ZoomListener listener){  if (mZoomIn != null) {    mZoomIn.removeZoomListener(listener);    mZoomOut.removeZoomListener(listener);  }  mTouchHandler.removeZoomListener(listener);}  }
class C{  public void scheduleAtFixedRate(TimerTask task,long delay,long period){  if (delay < 0 || period <= 0) {    throw new IllegalArgumentException();  }  scheduleImpl(task,delay,period,true);}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  Object[] kvData=(Object[])(s.readObject());  for (int i=0; i < kvData.length; i+=2) {    if (kvData[i] == null) {      break;    } else     if (kvData[i].equals("selectionModel")) {      selectionModel=(SingleSelectionModel)kvData[i + 1];    }  }}  }
class C{  public String toString(){  return "IMS username=" + mContact + ", "+ "IMS private ID="+ mPrivateID+ ", "+ "IMS password="+ mPassword+ ", "+ "IMS home domain="+ mHomeDomain+ ", "+ "XDM server="+ mXdmServerAddr+ ", "+ "XDM login="+ mXdmServerLogin+ ", "+ "XDM password="+ mXdmServerPassword+ ", "+ "IM Conference URI="+ mImConference;}  }
class C{  public ImplPermissions(int allow){  this.allowed=allow;  for (  PermissionType type : PermissionType.values()) {    if (!type.isSet(allow)) {      denied=type.set(denied,true);    }  }}  }
class C{  public boolean isLinkUp(){  return linkUp;}  }
class C{  private void switchToParent(String className){  final ComponentName cn=new ComponentName(this,className);  try {    final PackageManager pm=getPackageManager();    final ActivityInfo parentInfo=pm.getActivityInfo(cn,PackageManager.GET_META_DATA);    if (parentInfo != null && parentInfo.metaData != null) {      String fragmentClass=parentInfo.metaData.getString(META_DATA_KEY_FRAGMENT_CLASS);      CharSequence fragmentTitle=parentInfo.loadLabel(pm);      Header parentHeader=new Header();      parentHeader.fragment=fragmentClass;      parentHeader.title=fragmentTitle;      mCurrentHeader=parentHeader;      switchToHeaderLocal(parentHeader);      highlightHeader(mTopLevelHeaderId);      mParentHeader=new Header();      mParentHeader.fragment=parentInfo.metaData.getString(META_DATA_KEY_PARENT_FRAGMENT_CLASS);      mParentHeader.title=parentInfo.metaData.getString(META_DATA_KEY_PARENT_TITLE);    }  } catch (  NameNotFoundException nnfe) {    Log.w(LOG_TAG,"Could not find parent activity : " + className);  }}  }
class C{  public void zoom(float scaleX,float scaleY,float x,float y){  Matrix save=mViewPortHandler.zoom(scaleX,scaleY,x,-y);  mViewPortHandler.refresh(save,this,true);}  }
class C{  private String processStringMethods(String[] tokens,String value){  String fieldValue=value;  for (int i=1; i < tokens.length; i++) {    String[] operationTokens=StringUtils.split(tokens[i].replaceAll("\\s+",""),",()");    List<String> methodArgs=new ArrayList<String>();    String stringMethod=operationTokens[0];    for (int argIndex=1; argIndex < operationTokens.length; argIndex++) {      if (operationTokens[argIndex].startsWith("\"") && operationTokens[argIndex].endsWith("\"")) {        methodArgs.add(operationTokens[argIndex].substring(1,operationTokens[argIndex].length() - 1));      } else {        methodArgs.add(operationTokens[argIndex]);      }    }    fieldValue=invokeStringMethod(fieldValue,stringMethod,methodArgs);  }  return fieldValue;}  }
class C{  public void remove(){  checkNotRemoved();  notPermittedOnRootElement();  if (hasChildren()) {    for (    Element element : getChildren()) {      element.remove();    }  }  xmlTree.removeElement(this);  delegate.getParentNode().removeChild(delegate);  delegate=null;}  }
class C{  public FastSet(){  this(SMALL_CAPACITY);}  }
class C{  @Override public void run(){  while (true) {    TimerTask task;synchronized (this) {      if (cancelled) {        return;      }      if (tasks.isEmpty()) {        if (finished) {          return;        }        try {          this.wait();        } catch (        InterruptedException ignored) {        }        continue;      }      long currentTime=System.currentTimeMillis();      task=tasks.minimum();      long timeToSleep;synchronized (task.lock) {        if (task.cancelled) {          tasks.delete(0);          continue;        }        timeToSleep=task.when - currentTime;      }      if (timeToSleep > 0) {        try {          this.wait(timeToSleep);        } catch (        InterruptedException ignored) {        }        continue;      }synchronized (task.lock) {        int pos=0;        if (tasks.minimum().when != task.when) {          pos=tasks.getTask(task);        }        if (task.cancelled) {          tasks.delete(tasks.getTask(task));          continue;        }        task.setScheduledTime(task.when);        tasks.delete(pos);        if (task.period >= 0) {          if (task.fixedRate) {            task.when=task.when + task.period;          } else {            task.when=System.currentTimeMillis() + task.period;          }          insertTask(task);        } else {          task.when=0;        }      }    }    boolean taskCompletedNormally=false;    try {      task.run();      taskCompletedNormally=true;    }  finally {      if (!taskCompletedNormally) {synchronized (this) {          cancelled=true;        }      }    }  }}  }
class C{  public void addByte(int o,byte x,int d){  if (force_defaults || x != d) {    addByte(x);    slot(o);  }}  }
class C{  public long nextLong(long least,long bound){  if (least >= bound)   throw new IllegalArgumentException();  return nextLong(bound - least) + least;}  }
class C{  public static Document newDocument() throws CoreException {  try {    return getDocument();  } catch (  ParserConfigurationException e) {    abort("Unable to create new XML document.",e);  }  return null;}  }
class C{  public static boolean isSSH(String uri){  return uri != null && uri.startsWith("svn+ssh://");}  }
class C{  public MecanumDrive(Motor leftFront,Motor leftRear,Motor rightFront,Motor rightRear,AngleSensor gyro,DoubleToDoubleFunction speedLimiter){  this.leftFront=leftFront;  this.leftRear=leftRear;  this.rightFront=rightFront;  this.rightRear=rightRear;  this.gyro=gyro;  this.speedLimiter=speedLimiter != null ? speedLimiter : DEFAULT_SPEED_LIMITER;}  }
class C{  public boolean isEmpty(){  return map.isEmpty();}  }
class C{  public JSONException syntaxError(String message){  return new JSONException(message + this.toString());}  }
class C{  public void removeItems(ItemStack[] items,GlowCraftingInventory inv){  for (int i=0; i < items.length; i++) {    if (items[i] != null) {      int amount=items[i].getAmount();      if (amount > 1) {        items[i].setAmount(amount - 1);      } else {        inv.setItem(i + 1,null);      }    }  }}  }
class C{  public void add(Term[] terms){  int position=0;  if (positions.size() > 0)   position=positions.get(positions.size() - 1) + 1;  add(terms,position);}  }
class C{  public static int collectionContains(Collection<?> c,Object o1){  if (o1 != null) {    TestCluster.getInstance().addCastClassForContainer(o1.getClass());  }  int matching=0;  double min_distance=Double.MAX_VALUE;  for (  Object o2 : c) {    if (o2 == o1 || (o2 != null && o2.equals(o1)))     matching++; else {      if (o2 != null && o1 != null) {        if (o2.getClass().equals(o1.getClass())) {          if (o1 instanceof Number) {            Number n1=(Number)o1;            Number n2=(Number)o2;            min_distance=Math.min(min_distance,Math.abs(n1.doubleValue() - n2.doubleValue()));          } else           if (o2 instanceof String) {            ConstantPoolManager.getInstance().addDynamicConstant(o1);            min_distance=Math.min(min_distance,StringHelper.editDistance((String)o1,(String)o2));          }        }      }    }  }  if (matching > 0)   return matching; else {    if (min_distance == Double.MAX_VALUE)     return -c.size() - 1; else {      return -1 * (int)Math.ceil(BooleanHelper.K * min_distance / (min_distance + 1.0));    }  }}  }
class C{  public void mouseClicked(){}  }
class C{  public void visitInnerClassType(String name){}  }
class C{  GridUriDeploymentClassLoader(URL[] urls,ClassLoader parent){  super(urls,parent);}  }
class C{  public static double convertMillisToDays(double millis){  return millis / DAY_TO_MILLIS;}  }
class C{  public ReceiptAccountInfoImpl(final ReceiptDetail receiptDetail,ChartOfAccountsHibernateDAO chartOfAccountsHibernateDAO,PersistenceService persistenceService){  this.receiptDetail=receiptDetail;  this.isRevenueAccount=FinancialsUtil.isRevenueAccountHead(this.receiptDetail.getAccounthead(),chartOfAccountsHibernateDAO.getBankChartofAccountCodeList(),persistenceService);}  }
class C{  public AdditivelyDecomposableProblem(File file) throws IOException {  super();  load(file);}  }
class C{  public GossipProtocol(ITransport transport,IMembershipProtocol membership,GossipConfig config){  checkArgument(transport != null);  checkArgument(membership != null);  checkArgument(config != null);  this.transport=transport;  this.membership=membership;  this.config=config;  String nameFormat="sc-gossip-" + transport.address().toString();  this.executor=Executors.newSingleThreadScheduledExecutor(new ThreadFactoryBuilder().setNameFormat(nameFormat).setDaemon(true).build());  this.scheduler=Schedulers.from(executor);}  }
class C{  public boolean isProfileDeactivated(){  return before.isActive() && !after.isActive();}  }
class C{  public boolean isIngestUmfsValidForProject(Project project,DbClient dbClient,String nasUri){  _logger.info("Inside isIngestUmfsValidForProject() project name: {}",project.getLabel());  boolean isIngestValid=true;  if (nasUri != null && "VirtualNAS".equals(URIUtil.getTypeName(nasUri))) {    VirtualNAS virtualNAS=dbClient.queryObject(VirtualNAS.class,URI.create(nasUri));    _logger.info("vNAS name: {}",virtualNAS.getNasName());    StringSet projectVNASServerSet=project.getAssignedVNasServers();    if (projectVNASServerSet != null && !projectVNASServerSet.isEmpty()) {      _logger.debug("Project vNAS server list: {}",projectVNASServerSet);      _logger.debug("vNAS: {} assigned to project? {}",virtualNAS.getNasName(),!virtualNAS.isNotAssignedToProject());      if (!projectVNASServerSet.contains(nasUri) && !virtualNAS.isNotAssignedToProject()) {        _logger.info("vNAS: {} is not associated with project: {}.",virtualNAS.getNasName(),project.getLabel());        isIngestValid=false;      } else {        if (!virtualNAS.isNotAssignedToProject() && !virtualNAS.getAssociatedProjects().contains(project.getId().toString())) {          _logger.info("vNAS: {} is associated with other project.",virtualNAS.getNasName());          isIngestValid=false;        }      }    }  }  _logger.info("Exit isIngestUmfsValidForProject() returning: {}",isIngestValid);  return isIngestValid;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case FunctionblockPackage.EVENT__PROPERTIES:    return ((InternalEList<?>)getProperties()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public boolean handleConfigurationResource(final HttpServerRequest request){  if (request.uri().equals(circuitBreakerConfigUri) && HttpMethod.PUT == request.method()) {    request.bodyHandler(null);    return true;  }  if (request.uri().equals(circuitBreakerConfigUri) && HttpMethod.DELETE == request.method()) {    getConfigurationResource().reset();    log.info("reset circuit breaker configuration resource");    notifyRefreshables();  }  return false;}  }
class C{  private static Address GetLongArrayElements(JNIEnvironment env,int arrayJREF,Address isCopyAddress){  if (traceJNI)   VM.sysWrite("JNI called: GetLongArrayElements  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    long[] sourceArray=(long[])env.getJNIRef(arrayJREF);    int size=sourceArray.length;    if (MemoryManager.willNeverMove(sourceArray)) {      JNIGenericHelpers.setBoolStar(isCopyAddress,false);      return Magic.objectAsAddress(sourceArray);    } else {      Address copyBuffer=sysCall.sysMalloc(size << LOG_BYTES_IN_LONG);      if (copyBuffer.isZero()) {        env.recordException(new OutOfMemoryError());        return Address.zero();      }      Memory.memcopy(copyBuffer,Magic.objectAsAddress(sourceArray),size << LOG_BYTES_IN_LONG);      JNIGenericHelpers.setBoolStar(isCopyAddress,true);      return copyBuffer;    }  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return Address.zero();  }}  }
class C{  public SendMessageBatchResult sendMessageBatch(SendMessageBatchRequest sendMessageBatchRequest){  if (sendMessageBatchRequest == null) {    String errorMessage="sendMessageBatchRequest cannot be null.";    LOG.error(errorMessage);    throw new AmazonClientException(errorMessage);  }  sendMessageBatchRequest.getRequestClientOptions().appendUserAgent(SQSExtendedClientConstants.USER_AGENT_HEADER);  if (!clientConfiguration.isLargePayloadSupportEnabled()) {    return super.sendMessageBatch(sendMessageBatchRequest);  }  List<SendMessageBatchRequestEntry> batchEntries=sendMessageBatchRequest.getEntries();  int index=0;  for (  SendMessageBatchRequestEntry entry : batchEntries) {    if (clientConfiguration.isAlwaysThroughS3() || isLarge(entry)) {      batchEntries.set(index,storeMessageInS3(entry));    }    ++index;  }  return super.sendMessageBatch(sendMessageBatchRequest);}  }
class C{  public void readSecurityHeader(SipResponse response) throws PayloadException {  SipURI sipUri=getSipUri(response.getHeaders(SipUtils.HEADER_P_ASSOCIATED_URI));  String user=sipUri.getUser();  PhoneNumber number=ContactUtil.getValidPhoneNumberFromUri(user);  if (number == null) {    throw new PayloadException(new StringBuilder("Can't read a SIP-URI from the P-Associated-URI header: invalid user '").append(user).append("'").toString());  }  UserProfile profile=ImsModule.getImsUserProfile();  profile.setUsername(ContactUtil.createContactIdFromValidatedData(number));  profile.setHomeDomain(sipUri.getHost());  profile.setXdmServerLogin(PhoneUtils.SIP_URI_HEADER + sipUri.getUser() + "@"+ sipUri.getHost());}  }
class C{  protected void appendDetail(StringBuffer buffer,String fieldName,int value){  buffer.append(value);}  }
class C{  public static int convert1DtoX(final int index,final int arrayWidth){  return index % arrayWidth;}  }
class C{  public void addAuthorativeAnswer(DNSRecord rec) throws IOException {  MessageOutputStream record=new MessageOutputStream(512,this);  record.writeRecord(rec,0);  byte[] byteArray=record.toByteArray();  if (byteArray.length < this.availableSpace()) {    _authoritativeAnswers.add(rec);    _authoritativeAnswersBytes.write(byteArray,0,byteArray.length);  } else {    throw new IOException("message full");  }}  }
class C{  public int readLittleEndianInt(){  return (data[position++] & 0xFF) | (data[position++] & 0xFF) << 8 | (data[position++] & 0xFF) << 16 | (data[position++] & 0xFF) << 24;}  }
class C{  public static List<ItemStack> requestItem(String name,int count,ICorporeaSpark spark,boolean doit){  return requestItem(name,count,spark,false,doit);}  }
class C{  public AST(Map<String,String> options){  this(JLS2);  Object sourceLevelOption=options.get(JavaCore.COMPILER_SOURCE);  long sourceLevel=ClassFileConstants.JDK1_3;  if (JavaCore.VERSION_1_4.equals(sourceLevelOption)) {    sourceLevel=ClassFileConstants.JDK1_4;  } else   if (JavaCore.VERSION_1_5.equals(sourceLevelOption)) {    sourceLevel=ClassFileConstants.JDK1_5;  } else   if (JavaCore.VERSION_1_7.equals(sourceLevelOption)) {    sourceLevel=ClassFileConstants.JDK1_7;  }  Object complianceLevelOption=options.get(JavaCore.COMPILER_COMPLIANCE);  long complianceLevel=ClassFileConstants.JDK1_3;  if (JavaCore.VERSION_1_4.equals(complianceLevelOption)) {    complianceLevel=ClassFileConstants.JDK1_4;  } else   if (JavaCore.VERSION_1_5.equals(complianceLevelOption)) {    complianceLevel=ClassFileConstants.JDK1_5;  } else   if (JavaCore.VERSION_1_7.equals(complianceLevelOption)) {    complianceLevel=ClassFileConstants.JDK1_7;  }  this.scanner=new Scanner(true,true,false,sourceLevel,complianceLevel,null,null,true);}  }
class C{  public int skipWhitespaceRead(){  int c=read();  while (WS.indexOf(c) != -1) {    c=read();  }  return c;}  }
class C{  public void addAnswer(DNSIncoming in,DNSRecord rec) throws IOException {  if ((in == null) || !rec.suppressedBy(in)) {    this.addAnswer(rec,0);  }}  }
class C{  private void removeOldRevocationValues(){  final Element toRemove=xadesSignature.getRevocationValues();  if (toRemove != null) {    unsignedSignaturePropertiesDom.removeChild(toRemove);    xadesSignature.resetRevocationSources();  }}  }
class C{  public FastIca(TetradMatrix X,int numComponents){  this.X=X;  this.numComponents=numComponents;}  }
class C{  public boolean canRead(){  return true;}  }
class C{  protected Response serve(final Request req){  if (log.isDebugEnabled())   log.debug(req.method + " '" + req.uri+ "' ");  if (log.isDebugEnabled()) {{      for (      Map.Entry<String,String> e : req.headers.entrySet()) {        log.debug("  HDR: '" + e.getKey() + "' = '"+ e.getValue()+ "'");      }    }{      final Iterator<Map.Entry<String,Vector<String>>> itr=req.params.entrySet().iterator();      while (itr.hasNext()) {        final Map.Entry<String,Vector<String>> e=itr.next();        log.debug("  PRM: '" + e.getKey() + "' = '"+ e.getValue()+ "'");      }    }  }  return serveFile(req.uri,req.headers,new File("."),true);}  }
class C{  public int nice(){  return Integer.parseInt(fields[18]);}  }
class C{  @ExceptionHandler(NoResultException.class) public ResponseEntity<Map<String,Object>> handleNoResultException(NoResultException noResultException,HttpServletRequest request){  logger.info("> handleNoResultException");  ExceptionAttributes exceptionAttributes=new DefaultExceptionAttributes();  Map<String,Object> responseBody=exceptionAttributes.getExceptionAttributes(noResultException,request,HttpStatus.NOT_FOUND);  logger.info("< handleNoResultException");  return new ResponseEntity<Map<String,Object>>(responseBody,HttpStatus.NOT_FOUND);}  }
class C{  private void rehash(){  rehash(this.table,this.count,this.count * 2 + 1);}  }
class C{  static private void logSummaryRow(final IRunningQuery q,final Map<Integer,QueueStats> queueStats,final StringBuilder sb){  sb.append(getTableRow(q,-1,q.getQuery().getId(),true,queueStats));}  }
class C{  @Override protected void initData(){}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.953 -0500",hash_original_method="4EE95F45C86E4F91258EC37A0D803D0C",hash_generated_method="6D7E28704DC5D004632F393AF374FD21") public void write(int ch) throws IOException {synchronized (lock) {switch (ch) {case '\r':      __state=__LAST_WAS_CR_STATE;    __output.write('\r');  return;case '\n':if (__state != __LAST_WAS_CR_STATE) __output.write('\r');__output.write('\n');__state=__LAST_WAS_NL_STATE;return;case '.':if (__state == __LAST_WAS_NL_STATE) __output.write('.');default :__state=__NOTHING_SPECIAL_STATE;__output.write(ch);return;}}}  }
class C{  public BaseCheckBox(SafeHtml label){  this(label.asString(),true);}  }
class C{  @Override public final long readLong() throws IOException {  dis.readFully(work,0,8);  return (long)(work[7]) << 56 | (long)(work[6] & 0xff) << 48 | (long)(work[5] & 0xff) << 40 | (long)(work[4] & 0xff) << 32 | (long)(work[3] & 0xff) << 24 | (long)(work[2] & 0xff) << 16 | (long)(work[1] & 0xff) << 8 | work[0] & 0xff;}  }
class C{  @Override public String sendTamperedRequest(){  RequestObject requestObject=model.getTamperedRequestObject();  return this.sendRequestHttpClient(requestObject);}  }
class C{  public static boolean connect(FileDescriptor fd,InetAddress inetAddress,int port,int timeoutMs) throws SocketException, SocketTimeoutException {  try {    return connectErrno(fd,inetAddress,port,timeoutMs);  } catch (  ErrnoException errnoException) {    throw new ConnectException(connectDetail(inetAddress,port,timeoutMs,errnoException),errnoException);  }catch (  SocketException ex) {    throw ex;  }catch (  SocketTimeoutException ex) {    throw ex;  }catch (  IOException ex) {    throw new SocketException(ex);  }}  }
class C{  public void endMethod(){  if ((access & Opcodes.ACC_ABSTRACT) == 0) {    mv.visitMaxs(0,0);  }  mv.visitEnd();}  }
class C{  public static void fill(char[] a,int fromIndex,int toIndex,char val){  rangeCheck(a.length,fromIndex,toIndex);  for (int i=fromIndex; i < toIndex; i++)   a[i]=val;}  }
class C{  public void addUnknownElement(Element element){  this.constructionElement.appendChild(element);  XMLUtils.addReturnToElement(this.constructionElement);}  }
class C{  public QueueType queueType(){  return queueType;}  }
class C{  protected void addInternalTrim(Rectangle trim){  Rectangle textTrim=fText.computeTrim(0,0,0,0);  trim.x+=textTrim.x;  trim.y+=textTrim.y;  trim.width+=textTrim.width;  trim.height+=textTrim.height;  if (fStatusField != null) {    trim.height+=fSeparator.computeSize(SWT.DEFAULT,SWT.DEFAULT).y;    trim.height+=fStatusField.computeSize(SWT.DEFAULT,SWT.DEFAULT).y;    trim.height+=1;  }}  }
class C{  protected void measure(){  if (!maxAllowedSet) {    maxAllowed=getParent().getSize().width;  }  if (maxAllowed < (20)) {    return;  }  FontMetrics fm=this.getFontMetrics(this.getFont());  if (fm == null) {    return;  }  divideLabel();  this.lineHeight=fm.getHeight();  this.lineDescent=fm.getDescent();  this.maxWidth=0;  for (int i=0; i < numLines; i++) {    this.lineWidth[i]=fm.stringWidth(this.line.elementAt(i));    if (this.lineWidth[i] > this.maxWidth) {      this.maxWidth=this.lineWidth[i];    }  }}  }
class C{  public boolean isForceOutput(){  return isForceOutput;}  }
class C{  public void addURL(String fileName) throws IOException {  urlClassPath.addURL(fileName);}  }
class C{  private double[] diff(double[] x){  double[] diff=new double[x.length - 1];  double[] zeroPaddedDiff=new double[x.length];  zeroPaddedDiff[0]=0;  for (int i=0; i < diff.length; i++) {    double diff_i=x[i + 1] - x[i];    diff[i]=diff_i;    zeroPaddedDiff[i + 1]=diff_i;  }  this.zeroPaddedDiff=zeroPaddedDiff;  return diff;}  }
class C{  public RoutingAllocation.Result applyFailedShards(ClusterState clusterState,List<FailedRerouteAllocation.FailedShard> failedShards){  return new RoutingAllocation.Result(true,new RoutingTable.Builder(this.clusterService,clusterState).build().validateRaiseException(clusterState.metaData()));}  }
class C{  public AccessibilityNodeInfoRef makeOwned(){  if (mNode != null && !mOwned) {    reset(AccessibilityNodeInfoCompat.obtain(mNode));  }  return this;}  }
class C{  public AuthenticationToken removeAuthenticationToken(String host,String realm){  if (this.appView != null && this.appView.viewClient != null) {    return this.appView.viewClient.removeAuthenticationToken(host,realm);  }  return null;}  }
class C{  static int fixMods(int mods){  mods&=(PUBLIC | PRIVATE | PROTECTED);switch (mods) {case PUBLIC:case PRIVATE:case PROTECTED:    return mods;case 0:  return PACKAGE;}throw new AssertionError(mods);}  }
class C{  private void init(String saxParser,InputSource is) throws FunctionLibException {  try {    xmlReader=XMLUtil.createXMLReader(saxParser);    xmlReader.setContentHandler(this);    xmlReader.setErrorHandler(this);    xmlReader.setEntityResolver(new FunctionLibEntityResolver());    xmlReader.parse(is);  } catch (  IOException e) {    throw new FunctionLibException("IO Exception: " + e.getMessage());  }catch (  SAXException e) {    throw new FunctionLibException("SaxException: " + e.getMessage());  }}  }
class C{  int order(){  return 2;}  }
class C{  protected void generatePseudoPawnSinglePush(int fromSquare,long fromBB,int oppositeColor,PriorityMoveList moves){  long toBB=pawnSinglePush(colorToMove,fromBB,emptyBB);  while (toBB != 0) {    int toSquare=bitscanForward(toBB);    if ((toBB & RANK8_OR_RANK1) != 0L) {      addMove(new Move(fromSquare,toSquare,PAWN,colorToMove,EMPTY,KNIGHT,EMPTY_SQUARE,Move.PROMOTION_CHARACTERISTIC),moves);      addMove(new Move(fromSquare,toSquare,PAWN,colorToMove,EMPTY,BISHOP,EMPTY_SQUARE,Move.PROMOTION_CHARACTERISTIC),moves);      addMove(new Move(fromSquare,toSquare,PAWN,colorToMove,EMPTY,QUEEN,EMPTY_SQUARE,Move.PROMOTION_CHARACTERISTIC),moves);      addMove(new Move(fromSquare,toSquare,PAWN,colorToMove,EMPTY,ROOK,EMPTY_SQUARE,Move.PROMOTION_CHARACTERISTIC),moves);    } else {      addMove(new Move(fromSquare,toSquare,PAWN,colorToMove,EMPTY),moves);    }    toBB=bitscanClear(toBB);  }}  }
class C{  protected void allocate(){  isAllocated=true;  values.ensureCapacity(k);}  }
class C{  @Override public MemBufferHolder<A> createBuffer(long size){  return createBuffer(size,true);}  }
class C{  public static X509Certificate convertCertificate(Certificate certIn) throws CryptoException {  try {    CertificateFactory cf=CertificateFactory.getInstance(X509_CERT_TYPE,BOUNCY_CASTLE.jce());    ByteArrayInputStream bais=new ByteArrayInputStream(certIn.getEncoded());    return (X509Certificate)cf.generateCertificate(bais);  } catch (  CertificateException e) {    throw new CryptoException(res.getString("NoConvertCertificate.exception.message"),e);  }catch (  NoSuchProviderException e) {    throw new CryptoException(res.getString("NoConvertCertificate.exception.message"),e);  }}  }
class C{  public int sizeNonResident(){  int x=0;  for (  Segment<K,V> s : segments) {    x+=s.sizeNonResident();  }  return x;}  }
class C{  public void update(final T item,final long count){  if (item == null || count == 0) {    return;  }  if (count < 0) {    throw new SketchesArgumentException("Count may not be negative");  }  this.streamLength+=count;  hashMap.adjustOrPutValue(item,count);  if (getNumActiveItems() > curMapCap) {    if (hashMap.getLgLength() < lgMaxMapSize) {      hashMap.resize(2 * hashMap.getLength());      curMapCap=hashMap.getCapacity();    } else {      offset+=hashMap.purge(sampleSize);      if (getNumActiveItems() > getMaximumMapCapacity()) {        throw new SketchesStateException("Purge did not reduce active items.");      }    }  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:13.730 -0500",hash_original_method="94AF48C1BBE0D9628C41EDAE43AD4A70",hash_generated_method="6F750470763A09962F7C3949B80129FE") @Override void closeConnection(){  if (mSuspended) {    restartConnection(false);  }  try {    if (mHttpClientConnection != null && mHttpClientConnection.isOpen()) {      mHttpClientConnection.close();    }  } catch (  IOException e) {    if (HttpLog.LOGV)     HttpLog.v("HttpsConnection.closeConnection():" + " failed closing connection " + mHost);    e.printStackTrace();  }}  }
class C{  public static void requires(final boolean b,final String string){  if (enabled && b != true) {    if (Cfg.DEBUG) {      Check.log(TAG + "##### Requires - " + string+ " #####");    }  }}  }
class C{  public static Class<?> fromName(String name){  return name2Class.get(name);}  }
class C{  @SuppressWarnings("unchecked") public SortedSet<E> tailSet(E start){  return tailSet(start,true);}  }
class C{  @Override public String basePath(){  return "/wm/topology";}  }
class C{  public void showOriginal(){  if (sourceImage != null) {    transform=new AffineTransform();  }  syncScrollBars();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.786 -0500",hash_original_method="FBE545DCDF92873EF64141364622B9CC",hash_generated_method="8C27469AE71D33265549A0640CA93689") public Reader retrieveArticleBody(int articleNumber) throws IOException {  return retrieveArticleBody(articleNumber,null);}  }
class C{  public SchedulerHelper scheduleWithPeriod(final long period,final TimeUnit timeUnit){  notNull(timeUnit);  LOG.debug("period: {} [{}]",period,timeUnit);  if (this.period != period) {    this.period=period;    if (!poolInitializer.get().isShutdown()) {      startScheduler(period,timeUnit);    } else {      LOG.warn("Cannot schedule because destroy was already called!");    }  }  return this;}  }
class C{  public void add(IntegerPolynomial b){  if (b.coeffs.length > coeffs.length) {    coeffs=Arrays.copyOf(coeffs,b.coeffs.length);  }  for (int i=0; i < b.coeffs.length; i++) {    coeffs[i]+=b.coeffs[i];  }}  }
class C{  private void writeTail(){  if (!isOpen()) {    return;  }  final String tail=getTail();  if (null != tail) {    write(tail);  }}  }
class C{  ElementInfo(Element element){  this(element,null);}  }
class C{  public dl addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public static boolean regionMatches(byte[] subValue,byte[] superValue,int offset){  for (int i=0; i < subValue.length; i++) {    if (subValue[i] != superValue[i + offset]) {      return false;    }  }  return true;}  }
class C{  public static void errorDialog(Stage owner,String msg,Throwable e){  log.log(Level.SEVERE,msg,e);  String exMsg=e != null ? (e.getMessage() != null ? e.getMessage() : e.getClass().getName()) : null;  showDialog(owner,MessageType.ERROR,exMsg != null ? msg + "\n" + exMsg : msg,false);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.TRACE_DIRECTIVE___TRACE_ITEM_1:    return getTraceItem_1();case UmplePackage.TRACE_DIRECTIVE___ANONYMOUS_TRACE_DIRECTIVE_11:  return getAnonymous_traceDirective_1_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public String renderJSON(String title,EventBean theEvent,JSONRenderingOptions options){  if (theEvent == null) {    return null;  }  return getJSONRenderer(theEvent.getEventType(),options).render(title,theEvent);}  }
class C{  public boolean isReadOnly(boolean useSessionStatus) throws SQLException {  if (useSessionStatus && !this.isClosed && versionMeetsMinimum(5,6,5)&& !getUseLocalSessionState()&& getReadOnlyPropagatesToServer()) {    java.sql.Statement stmt=null;    java.sql.ResultSet rs=null;    try {      try {        stmt=getMetadataSafeStatement();        rs=stmt.executeQuery("select @@session.tx_read_only");        if (rs.next()) {          return rs.getInt(1) != 0;        }      } catch (      SQLException ex1) {        if (ex1.getErrorCode() != MysqlErrorNumbers.ER_MUST_CHANGE_PASSWORD || getDisconnectOnExpiredPasswords()) {          throw SQLError.createSQLException("Could not retrieve transation read-only status server",SQLError.SQL_STATE_GENERAL_ERROR,ex1,getExceptionInterceptor());        }      }    }  finally {      if (rs != null) {        try {          rs.close();        } catch (        Exception ex) {        }        rs=null;      }      if (stmt != null) {        try {          stmt.close();        } catch (        Exception ex) {        }        stmt=null;      }    }  }  return this.readOnly;}  }
class C{  protected boolean validRow(int i){  return getNRows() > 0 && i >= 0 && i < getNRows();}  }
class C{  public static Number count(float[] self,Object value){  return count(InvokerHelper.asIterator(self),value);}  }
class C{  public void paint(Graphics2D g){  for (int i=0; i < m_nodes.size(); i++) {    WFNode node=m_nodes.get(i);    Rectangle rect=node.getBounds();    g.setColor(Color.BLACK);    g.drawRect(rect.x,rect.y,rect.width,rect.height);    Graphics2D t=(Graphics2D)g.create(rect.x,rect.y,rect.width,rect.height);    node.paint(t);    t.dispose();  }  createLines();  for (int i=0; i < m_lines.size(); i++) {    WFLine line=(WFLine)m_lines.get(i);    line.paint(g);  }}  }
class C{  private static void initializeModuleInternal(final Window parent,final INaviModule module){  if (!module.getConfiguration().getRawModule().isComplete()) {    final String innerMessage="E00059: " + "The module could not be initialized because the imported data is incomplete";    final String innerDescription=CUtilityFunctions.createDescription(String.format("The module '%s' could not be initialized.",module.getConfiguration().getName()),new String[]{"The imported data is incomplete because the exporter failed."},new String[]{"The module was not initialized."});    NaviErrorDialog.show(parent,innerMessage,innerDescription);    return;  }  if (module.isInitializing()) {    return;  }  final CModuleInitializerOperation operation=new CModuleInitializerOperation(module);  try {    module.initialize();  } catch (  final CouldntSaveDataException e) {    CUtilityFunctions.logException(e);    final String innerMessage="E00060: " + "The module could not be initialized";    final String innerDescription=CUtilityFunctions.createDescription(String.format("The module '%s' could not be initialized.",module.getConfiguration().getName()),new String[]{"There was a problem with the database connection."},new String[]{"The module was not initialized."});    NaviErrorDialog.show(parent,innerMessage,innerDescription,e);    return;  } finally {    operation.stop();  }}  }
class C{  private RPCLogger(){}  }
class C{  public static CGAffineTransform makeRotation(double angle){  CGAffineTransform t=new CGAffineTransform();  t.setToRotation(angle);  return t;}  }
class C{  void close() throws IOException {  stream.close();}  }
class C{  public static long New(InputStream is) throws IOException {  return Extend(IrredPoly,is);}  }
class C{  @Override public void process(ResponseBuilder rb) throws IOException {  if (rb.doFacets) {    SolrParams params=rb.req.getParams();    SimpleFacets f=new SimpleFacets(rb.req,rb.getResults().docSet,params,rb);    RTimer timer=null;    FacetDebugInfo fdebug=null;    if (rb.isDebug()) {      fdebug=new FacetDebugInfo();      rb.req.getContext().put("FacetDebugInfo-nonJson",fdebug);      timer=new RTimer();    }    NamedList<Object> counts=FacetComponent.getFacetCounts(f,fdebug);    String[] pivots=params.getParams(FacetParams.FACET_PIVOT);    if (!ArrayUtils.isEmpty(pivots)) {      PivotFacetProcessor pivotProcessor=new PivotFacetProcessor(rb.req,rb.getResults().docSet,params,rb);      SimpleOrderedMap<List<NamedList<Object>>> v=pivotProcessor.process(pivots);      if (v != null) {        counts.add(PIVOT_KEY,v);      }    }    if (fdebug != null) {      long timeElapsed=(long)timer.getTime();      fdebug.setElapse(timeElapsed);    }    rb.rsp.add("facet_counts",counts);  }}  }
class C{  public ORDER_BY ORDER_BY(String orderBy){  return new ORDER_BY(this,orderBy);}  }
class C{  public Boolean configExists(String configName) throws IOException {  try {    return zkClient.exists(ZkConfigManager.CONFIGS_ZKNODE + "/" + configName,true);  } catch (  KeeperException|InterruptedException e) {    throw new IOException("Error checking whether config exists",SolrZkClient.checkInterrupted(e));  }}  }
class C{  @HLEFunction(nid=0x542AD630,version=150,checkInsideInterrupt=true) public int sceKernelSetVTimerTime(@CheckArgument("checkVTimerID") int vtimerUid,TPointer64 timeAddr){  SceKernelVTimerInfo sceKernelVTimerInfo=vtimers.get(vtimerUid);  long time=timeAddr.getValue();  timeAddr.setValue(setVTimer(sceKernelVTimerInfo,time));  return 0;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodereplacechildinvalidnodetype.class,args);}  }
class C{  public WriteRequest(final ContentFormat contentFormat,final int objectId,final int objectInstanceId,final int resourceId,Date value){  this(Mode.REPLACE,contentFormat,new LwM2mPath(objectId,objectInstanceId,resourceId),LwM2mSingleResource.newDateResource(resourceId,value));}  }
class C{  public <T>T deserialize(File file,TypeRef returnType) throws ApiException {  JavaType javaType=mapper.constructType(returnType.getType());  try {    return mapper.readValue(file,javaType);  } catch (  IOException e) {    throw new ApiException(500,e.getMessage(),null,"File to read file");  }}  }
class C{  public BasicEffect(String variable,Value value,int priority,boolean exclusive,boolean negated){  this.variableLabel=variable;  this.variableValue=value;  this.priority=priority;  this.exclusive=exclusive;  this.negated=negated;}  }
class C{  public void test_DELETE_accessPath_delete_s() throws Exception {  doInsertbyURL("POST",packagePath + "test_delete_by_access_path.ttl");  final long mutationResult=doDeleteWithAccessPath(new URIImpl("http://www.bigdata.com/Mike"),null,null);  assertEquals(3,mutationResult);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  DShowDVDPlayer.setDVDVideoRenderFilter(getString(stack));  return null;}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writeShape(getArea(),stream);}  }
class C{  private void auditTruststore(OperationTypeEnum auditType,Object... descparams){  URI username=URI.create(getUserFromContext().getName());  auditMgr.recordAuditLog(null,username,EVENT_SERVICE_TYPE,auditType,System.currentTimeMillis(),AuditLogManager.AUDITLOG_SUCCESS,null,descparams);}  }
class C{  public boolean deleteShipLoadName(String load){  if (!_shipLoadList.contains(load)) {    return false;  }  _shipLoadList.remove(load);  log.debug("track ({}) delete car load ({})",getName(),load);  setDirtyAndFirePropertyChange(LOADS_CHANGED_PROPERTY,_shipLoadList.size() + 1,_shipLoadList.size());  return true;}  }
class C{  public WhitenedZCA(int dims){  this(1e-4,dims);}  }
class C{  public int hashCode(){  return super.hashCode() ^ (code_string() == null ? 0 : code_string().hashCode());}  }
class C{  public LauncherBuilder useDaemonThreads(boolean useDaemonThreads){  this.useDaemonThreads=useDaemonThreads;  return this;}  }
class C{  private void sendUpdate(JSONObject obj,boolean keepCallback){  sendUpdate(obj,keepCallback,PluginResult.Status.OK);}  }
class C{  public ProcessRequestException(String message,int errorCode){  super(message);  this.errorCode=errorCode;}  }
class C{  protected void performRollbackTest(List<Game> games){  for (int g=0; g < games.size(); g++) {    Game game=games.get(g);    long gameStart=System.currentTimeMillis();    MoveList moveList=game.getMoveList().deepCopy();    while (game.getMoveList().getSize() > 0) {      game.rollback();    }    for (int i=0; i < moveList.getSize(); i++) {      Assert.assertTrue(i + "/" + games.size()+ " Move "+ moveList.get(i)+ " was illegal\n"+ game,game.move(moveList.get(i)));    }    System.err.println(g + "/" + games.size()+ " performRollbackTest duration="+ (System.currentTimeMillis() - gameStart));  }}  }
class C{  public final void createIterationDirectory(final int iteration){  File dir=new File(getIterationPath(iteration));  if (!dir.mkdir()) {    if (this.overwriteFiles == OverwriteFileSetting.overwriteExistingFiles && dir.exists()) {      log.info("Iteration directory " + getIterationPath(iteration) + " exists already.");    } else {      log.warn("Could not create iteration directory " + getIterationPath(iteration) + ".");    }  }}  }
class C{  public double num(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return -(m_right.num(xctxt));}  }
class C{  public static boolean isHexDigit(char c){  return hexDigits.indexOf(c) >= 0;}  }
class C{  public static InputStream post(URL url,Map<String,String> cookies,Map parameters) throws IOException {  return new ClientHttpRequest(url).post(cookies,parameters);}  }
class C{  public static Point parsePoint(String str,SpatialContext ctx) throws InvalidShapeException {  try {    double x, y;    str=str.trim();    int commaIdx=str.indexOf(',');    if (commaIdx == -1) {      int spaceIdx=str.indexOf(' ');      if (spaceIdx == -1)       throw new InvalidShapeException("Point must be in 'lat, lon' or 'x y' format: " + str);      int middleEndIdx=findIndexNotSpace(str,spaceIdx + 1,+1);      x=Double.parseDouble(str.substring(0,spaceIdx));      y=Double.parseDouble(str.substring(middleEndIdx));    } else {      int middleStartIdx=findIndexNotSpace(str,commaIdx - 1,-1);      int middleEndIdx=findIndexNotSpace(str,commaIdx + 1,+1);      y=Double.parseDouble(str.substring(0,middleStartIdx + 1));      x=Double.parseDouble(str.substring(middleEndIdx));    }    x=ctx.normX(x);    y=ctx.normY(y);    return ctx.makePoint(x,y);  } catch (  InvalidShapeException e) {    throw e;  }catch (  Exception e) {    throw new InvalidShapeException(e.toString(),e);  }}  }
class C{  @Override public boolean supportsSubqueriesInExists(){  debugCodeCall("supportsSubqueriesInExists");  return true;}  }
class C{  public boolean isSelectionable(){  return selectionable;}  }
class C{  public static String mid(String str,int pos,int len){  if ((pos < 0) || ((str != null) && (pos > str.length()))) {    throw new StringIndexOutOfBoundsException("String index " + pos + " is out of bounds");  }  if (len < 0) {    throw new IllegalArgumentException("Requested String length " + len + " is less than zero");  }  if (str == null) {    return null;  }  if (str.length() <= (pos + len)) {    return str.substring(pos);  } else {    return str.substring(pos,pos + len);  }}  }
class C{  public static void registerEntity(Class<? extends TaggedLogAPIEntity> clazz) throws IllegalArgumentException {  registerEntity(createEntityDefinition(clazz));}  }
class C{  public static String substring(String string,int fromIndex,int toIndex){  int len=string.length();  if (fromIndex < 0) {    fromIndex=len + fromIndex;    if (toIndex == 0) {      toIndex=len;    }  }  if (toIndex < 0) {    toIndex=len + toIndex;  }  if (fromIndex < 0) {    fromIndex=0;  }  if (toIndex > len) {    toIndex=len;  }  if (fromIndex >= toIndex) {    return StringPool.EMPTY;  }  return string.substring(fromIndex,toIndex);}  }
class C{  public static String hex(byte[] bytes){  return hex(wrap(bytes),0,bytes.length);}  }
class C{  public Quaterniond rotationTo(double toDirX,double toDirY,double toDirZ,Quaterniond dest){  return dest.rotationTo(x,y,z,toDirX,toDirY,toDirZ);}  }
class C{  public static Point convertToAbsoluteProcessPoint(final Point p,final int processIndex,final ProcessRendererModel model){  double xOffset=0;  for (int i=0; i < model.getProcesses().size(); i++) {    if (i == processIndex) {      return new Point((int)(p.getX() + xOffset),(int)p.getY());    }    xOffset+=ProcessDrawer.WALL_WIDTH * 2 + model.getProcessWidth(model.getProcess(i));  }  return null;}  }
class C{  public boolean isResettable(){  return resettable;}  }
class C{  private SubnetworkNode createSubnetworkNode(Subnetwork subnet){  SubnetworkNode ret=null;  if (subnet instanceof Hopfield) {    ret=new HopfieldNode(NetworkPanel.this,(Hopfield)subnet);  } else   if (subnet instanceof CompetitiveNetwork) {    ret=new CompetitiveNetworkNode(NetworkPanel.this,(CompetitiveNetwork)subnet);  } else   if (subnet instanceof SOMNetwork) {    ret=new SOMNetworkNode(NetworkPanel.this,(SOMNetwork)subnet);  } else   if (subnet instanceof EchoStateNetwork) {    ret=new ESNNetworkNode(NetworkPanel.this,(EchoStateNetwork)subnet);  } else   if (subnet instanceof SimpleRecurrentNetwork) {    ret=new SRNNetworkNode(NetworkPanel.this,(SimpleRecurrentNetwork)subnet);  } else   if (subnet instanceof FeedForward) {    if (subnet instanceof BackpropNetwork) {      ret=new BackpropNetworkNode(NetworkPanel.this,(BackpropNetwork)subnet);    } else     if (subnet instanceof LMSNetwork) {      ret=new LMSNetworkNode(NetworkPanel.this,(LMSNetwork)subnet);    } else     if (subnet instanceof BPTTNetwork) {      ret=new BPTTNode(NetworkPanel.this,(BPTTNetwork)subnet);    } else {      ret=new SubnetworkNode(NetworkPanel.this,subnet);    }  } else {    ret=new SubnetworkNode(NetworkPanel.this,subnet);  }  return ret;}  }
class C{  protected SVGURIReferenceTextPositioningElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  public void clear(){  this.ch=null;  this.offset=0;  this.length=-1;}  }
class C{  public Context duplicate(){  Context newContext=new Context(session,getIndex());  newContext.description=this.description;  newContext.name=this.name;  newContext.includeInRegexs=new ArrayList<>(this.includeInRegexs);  newContext.includeInPatterns=new ArrayList<>(this.includeInPatterns);  newContext.excludeFromRegexs=new ArrayList<>(this.excludeFromRegexs);  newContext.excludeFromPatterns=new ArrayList<>(this.excludeFromPatterns);  newContext.inScope=this.inScope;  newContext.techSet=new TechSet(this.techSet);  newContext.authenticationMethod=this.authenticationMethod.clone();  newContext.sessionManagementMethod=this.sessionManagementMethod.clone();  newContext.urlParamParser=this.urlParamParser.clone();  newContext.postParamParser=this.postParamParser.clone();  newContext.authorizationDetectionMethod=this.authorizationDetectionMethod.clone();  newContext.dataDrivenNodes=this.getDataDrivenNodes();  return newContext;}  }
class C{  public void abort() throws IOException {  completeEdit(this,false);}  }
class C{  public ASN1Primitive toASN1Primitive(){  return seq;}  }
class C{  public Path resolve(ShardId shardId){  return resolve(shardId.index()).resolve(Integer.toString(shardId.id()));}  }
class C{  public static void declareExtensions(ExtensionProfile extProfile){  extProfile.declareAdditionalNamespace(Namespaces.batchNs);  declareEntryExtensions(extProfile);  declareFeedExtensions(extProfile);}  }
class C{  public void addElement(Element e){  super.addElement(new WrapElement("li",e));}  }
class C{  public boolean noninteractiveLogon(final URI targetUri,final boolean requestCompactToken){  throw new NotImplementedException(449285);}  }
class C{  public CompiledST defineTemplate(String templateName,String template){  if (templateName.charAt(0) != '/')   templateName="/" + templateName;  try {    CompiledST impl=defineTemplate(templateName,new CommonToken(GroupParser.ID,templateName),null,template,null);    return impl;  } catch (  STException se) {  }  return null;}  }
class C{  public UCSReader(InputStream inputStream,short encoding){  this(inputStream,DEFAULT_BUFFER_SIZE,encoding);}  }
class C{  public MailAddress(String localPart,String domain) throws MailAddressException {  this(localPart + "@" + domain);}  }
class C{  public boolean isAtRest(){  return Math.abs(mCurrentState.velocity) <= mRestSpeedThreshold && getDisplacementDistanceForState(mCurrentState) <= mDisplacementFromRestThreshold;}  }
class C{  public boolean isThirdSoftButton(){  return thirdSoftButton;}  }
class C{  public void testExecuteWithInvalidAction(){  try {    this.task.setAction("invalidAction");    this.task.execute();    fail("Should have thrown an exception for invalid action");  } catch (  BuildException expected) {    final String messageStart="Unknown action: ";    assertTrue(expected.getMessage() + " does not start with: " + messageStart,expected.getMessage().startsWith(messageStart));  }}  }
class C{  public Script in(String name,Object value,Metadata metadata){  MLContextUtil.checkInputValueType(name,value);  if (inputs == null) {    inputs=new LinkedHashMap<String,Object>();  }  inputs.put(name,value);  if (name.startsWith("$")) {    MLContextUtil.checkInputParameterType(name,value);    if (inputParameters == null) {      inputParameters=new LinkedHashMap<String,Object>();    }    inputParameters.put(name,value);  } else {    Data data=MLContextUtil.convertInputType(name,value,metadata);    if (data != null) {      symbolTable.put(name,data);      inputVariables.add(name);      if (data instanceof CacheableData) {        if (metadata != null)         inputMetadata.put(name,metadata);        ((CacheableData<?>)data).enableCleanup(false);      }    }  }  return this;}  }
class C{  public String chooseEngineServerAlias(String keyType,Principal[] issuers,SSLEngine engine){  return null;}  }
class C{  private String _extractClassName(String className){  String name=null;  int index=className.lastIndexOf('.');  if (index != -1) {    name=className.substring(index + 1,className.length());  } else {    name=className;  }  return name;}  }
class C{  public static boolean closeTab(final JFrame parent,final IGraphPanel panel){  Preconditions.checkNotNull(parent,"IE01630: Parent argument can not be null");  Preconditions.checkNotNull(panel,"IE01631: Panel argument can not be null");  final ZyGraph graph=panel.getModel().getGraph();  return graph.getRawView().wasModified() ? closeModifiedGraph(parent,panel) : true;}  }
class C{  public BigInteger optBigInteger(String key,BigInteger defaultValue){  try {    return this.getBigInteger(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public static void launchEmailIntent(final Activity activity,String addr,String text){  Log.i(LOG_TAG,"Launch email intent from " + activity.getLocalClassName());  Intent emailIntent=new Intent(Intent.ACTION_SEND);  emailIntent.putExtra(Intent.EXTRA_EMAIL,new String[]{addr});  emailIntent.setType("text/plain");  PackageManager emailpackageManager=activity.getPackageManager();  List<ResolveInfo> emailresolveInfos=emailpackageManager.queryIntentActivities(emailIntent,0);  if (emailresolveInfos.size() > 0) {    activity.startActivity(emailIntent);  }}  }
class C{  public URI toURILenient() throws URISyntaxException {  if (streamHandler == null) {    throw new IllegalStateException(protocol);  }  return new URI(streamHandler.toExternalForm(this,true));}  }
class C{  @Override public boolean isWhiteSpace(){  log.log(Level.FINE,"isWhiteSpace():");  if (event == CHARACTERS) {    char[] ch=getTextCharacters();    final int start=this.getTextStart();    final int end=start + this.getTextLength();    for (int i=start; i < end; i++) {      if (!XMLChar.isSpace(ch[i])) {        log.log(Level.FINE,"isWhiteSpace(): {0}",false);        return false;      }    }    log.log(Level.FINE,"isWhiteSpace(): {0}",true);    return true;  } else {    throw new IllegalStateException("Not in CHARACTERS state");  }}  }
class C{  public static boolean changePasswordAndConnect(final Context ctx,final WifiManager wifiMgr,final WifiConfiguration config,final String newPassword,final int numOpenNetworksKept){  ConfigSec.setupSecurity(config,ConfigSec.getWifiConfigurationSecurity(config),newPassword);  final int networkId=wifiMgr.updateNetwork(config);  if (networkId == -1) {    return false;  }  wifiMgr.disconnect();  return connectToConfiguredNetwork(ctx,wifiMgr,config,true);}  }
class C{  public int copyLinesFrom(MRMA otherRMA,boolean counter){  if (isProcessed() || otherRMA == null)   return 0;  MRMALine[] fromLines=otherRMA.getLines(false);  int count=0;  for (int i=0; i < fromLines.length; i++) {    MRMALine line=new MRMALine(getCtx(),0,null);    MRMALine fromLine=fromLines[i];    line.set_TrxName(get_TrxName());    if (counter)     PO.copyValues(fromLine,line,getAD_Client_ID(),getAD_Org_ID()); else     PO.copyValues(fromLine,line,fromLine.getAD_Client_ID(),fromLine.getAD_Org_ID());    line.setM_RMA_ID(getM_RMA_ID());    line.set_ValueNoCheck(MRMALine.COLUMNNAME_M_RMALine_ID,I_ZERO);    if (counter) {      line.setRef_RMALine_ID(fromLine.getM_RMALine_ID());      if (fromLine.getM_InOutLine_ID() != 0) {        MInOutLine peer=new MInOutLine(getCtx(),fromLine.getM_InOutLine_ID(),get_TrxName());        if (peer.getRef_InOutLine_ID() != 0)         line.setM_InOutLine_ID(peer.getRef_InOutLine_ID());      }    }    line.setProcessed(false);    if (line.save(get_TrxName()))     count++;    if (counter) {      fromLine.setRef_RMALine_ID(line.getM_RMALine_ID());      fromLine.saveEx(get_TrxName());    }  }  if (fromLines.length != count)   log.log(Level.SEVERE,"Line difference - From=" + fromLines.length + " <> Saved="+ count);  return count;}  }
class C{  public boolean isValidRegion(int C_Region_ID){  if (C_Region_ID == 0 || getC_Country_ID() == 0 || !isHasRegion())   return false;  MRegion[] regions=MRegion.getRegions(getCtx(),getC_Country_ID());  for (int i=0; i < regions.length; i++) {    if (C_Region_ID == regions[i].getC_Region_ID())     return true;  }  return false;}  }
class C{  public boolean isNicTeamingSupported(){  return nicTeamingSupported;}  }
class C{  private void writeChunk() throws IOException {  char[] c=Integer.toHexString(count).toCharArray();  int clen=c.length;  int startByte=4 - clen;  int i;  for (i=0; i < clen; i++) {    buf[startByte + i]=(byte)c[i];  }  buf[startByte + (i++)]='\r';  buf[startByte + (i++)]='\n';  buf[startByte + (i++) + count]='\r';  buf[startByte + (i++) + count]='\n';  out.write(buf,startByte,i + count);  count=0;  pos=OFFSET;}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  private void addServiceParameter(String paramKey,String paramValue){  org.oscm.provisioning.data.ServiceParameter param=new org.oscm.provisioning.data.ServiceParameter();  param.setParameterId(paramKey);  param.setValue(paramValue);  serviceParamInput.add(param);}  }
class C{  public boolean isStackAvailable(){  return stackAvailable;}  }
class C{  public double query(int targetClass,int targetValue,int[] cord){  double sumVal=0;  double targetVal=0;  int realTargetIndex=catIndexToRealIndex[targetClass];  CategoricalData queryData=valid.get(targetClass);  for (int i=0; i < queryData.getNumOfCategories(); i++) {    cord[realTargetIndex]=i;    double tmp=countArray[cordToIndex(cord)];    sumVal+=tmp;    if (i == targetValue)     targetVal=tmp;  }  return targetVal / sumVal;}  }
class C{  public void onOrbitReached(){  if (this.isDead)   return;  ISpaceObject spaceObj;  if (worldObj.provider.dimensionId == Configuration.spaceDimId || ((spaceObj=SpaceObjectManager.getSpaceManager().getSpaceStationFromBlockCoords((int)posX,(int)posZ)) != null && !((DimensionProperties)spaceObj.getProperties().getParentProperties()).isGasGiant())) {    setInOrbit(true);    this.setPosition(forwardDirection.offsetX * 64d + this.launchLocation.x + (storage.getSizeX() % 2 == 0 ? 0 : 0.5d),posY,forwardDirection.offsetZ * 64d + this.launchLocation.z + (storage.getSizeZ() % 2 == 0 ? 0 : 0.5d));  }  float intakePower=(Integer)stats.getStatTag("intakePower");  MissionGasCollection miningMission=new MissionGasCollection(intakePower == 0 ? 360 : (long)(2 * ((int)stats.getStatTag("liquidCapacity") / intakePower)),this,connectedInfrastructure,AtmosphereRegister.getInstance().getHarvestableGasses().get(gasId));  DimensionProperties properties=DimensionManager.getInstance().getDimensionProperties(worldObj.provider.dimensionId).getParentProperties();  properties.addSatallite(miningMission);  if (!worldObj.isRemote)   PacketHandler.sendToAll(new PacketSatellite(miningMission));  for (  IInfrastructure i : connectedInfrastructure) {    i.linkMission(miningMission);  }  this.setDead();}  }
class C{  public static QueryUniqueIdentifiersForEntity parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  QueryUniqueIdentifiersForEntity object=new QueryUniqueIdentifiersForEntity();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"queryUniqueIdentifiersForEntity".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (QueryUniqueIdentifiersForEntity)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","entityType").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setEntityType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  @Override public String toString(){  StringBuilder result=new StringBuilder();  result.append(super.toString());  if (indexOptions() != IndexOptions.NONE) {    if (result.length() > 0) {      result.append(",");    }    if (numericType != null) {      result.append(",numericType=");      result.append(numericType);      result.append(",numericPrecisionStep=");      result.append(numericPrecisionStep);    }  }  return result.toString();}  }
class C{  Type[] parameterTypes(){  Parameter[] parameters=methodDoc.parameters();  Type[] paramTypes=new Type[parameters.length];  for (int i=0; i < paramTypes.length; i++) {    paramTypes[i]=parameters[i].type();  }  return paramTypes;}  }
class C{  public static <A>List<A> of(A x1,A x2){  return new List<A>(x1,of(x2));}  }
class C{  void destroy(){  destroyed=true;  for (  ManagedObservable<?> managedObservable : groupMap.values()) {    managedObservable.cancel();  }  groupMap.clear();}  }
class C{  XSLTElementDef(XSLTSchema schema,String namespace,String name,String nameAlias,XSLTElementDef[] elements,XSLTAttributeDef[] attributes,XSLTElementProcessor contentHandler,Class classObject,boolean has_required,boolean required){  this(schema,namespace,name,nameAlias,elements,attributes,contentHandler,classObject,has_required);  this.m_required=required;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:40.174 -0500",hash_original_method="C99FBA65B0D308569620507D6E099042",hash_generated_method="5CE80A6225762CA51E516040755CB8E9") @Override public void flush() throws IOException {  out.flush();}  }
class C{  public static String[] stringArrayFromProperties(Properties p,String propName,String tok){  String[] ret=null;  String raw=p.getProperty(propName);  if (raw != null && raw.length() > 0) {    try {      StringTokenizer token=new StringTokenizer(raw,tok);      int numPaths=token.countTokens();      ret=new String[numPaths];      for (int i=0; i < numPaths; i++) {        ret[i]=token.nextToken();      }      return ret;    } catch (    java.util.NoSuchElementException e) {      e.printStackTrace();    }  }  return ret;}  }
class C{  public static VOTriggerDefinition toVOTriggerDefinition(TriggerDefinition domObj,boolean hasTriggerProcess){  VOTriggerDefinition vo=toVOTriggerDefinition(domObj);  vo.setHasTriggerProcess(hasTriggerProcess);  return vo;}  }
class C{  @Override public void stop(){}  }
class C{  public void checkActivities(String trxName,PO lastPO){  log.info("(" + getAD_Workflow_ID() + ") - "+ getWFState()+ (trxName == null ? "" : "[" + trxName + "]"));  if (m_state.isClosed())   return;  if (lastPO != null && lastPO.get_ID() == this.getRecord_ID())   m_po=lastPO;  MWFActivity[] activities=getActivities(true,true,trxName);  String closedState=null;  boolean suspended=false;  boolean running=false;  for (int i=0; i < activities.length; i++) {    MWFActivity activity=activities[i];    StateEngine activityState=activity.getState();    if (activityState.isCompleted()) {      if (startNext(activity,activities,lastPO,trxName))       continue;    }    String activityWFState=activity.getWFState();    if (activityState.isClosed()) {      activity.setProcessed(true);      activity.saveEx();      if (closedState == null)       closedState=activityWFState; else       if (!closedState.equals(activityState)) {        if (WFSTATE_Terminated.equals(activityState))         closedState=activityWFState; else         if (WFSTATE_Aborted.equals(activityState) && !WFSTATE_Terminated.equals(closedState))         closedState=activityWFState;      }    } else {      closedState=null;      if (activityState.isSuspended())       suspended=true;      if (activityState.isRunning())       running=true;    }  }  if (activities.length == 0) {    setTextMsg("No Active Processed found");    addTextMsg(new Exception(""));    closedState=WFSTATE_Terminated;  }  if (closedState != null) {    setWFState(closedState);    getPO();  } else   if (suspended)   setWFState(WFSTATE_Suspended); else   if (running)   setWFState(WFSTATE_Running);}  }
class C{  public GameModelBody(Model model,String name,Vector3 location,Vector3 rotation,Vector3 scale,btCollisionShape shape,float mass,short belongsToFlag,short collidesWithFlag,boolean callback,boolean noDeactivate){  super(model,name,location,rotation,scale);  this.mass=mass;  this.shape=shape;  this.belongsToFlag=belongsToFlag;  this.collidesWithFlag=collidesWithFlag;  if (mass > 0f) {    shape.calculateLocalInertia(mass,localInertia);  } else {    localInertia.set(0,0,0);  }  this.constructionInfo=new btRigidBody.btRigidBodyConstructionInfo(mass,null,shape,localInertia);  body=new btRigidBody(constructionInfo);  if (mass > 0f) {    motionState=new PhysicsMotionState(modelInstance.transform);    body.setMotionState(motionState);  } else {    motionState=null;  }  body.setContactCallbackFlag(belongsToFlag);  if (callback) {    body.setCollisionFlags(body.getCollisionFlags() | btCollisionObject.CollisionFlags.CF_CUSTOM_MATERIAL_CALLBACK);  }  if (noDeactivate) {    body.setActivationState(Collision.DISABLE_DEACTIVATION);  }  body.setWorldTransform(modelInstance.transform);}  }
class C{  public String toString(){  return image;}  }
class C{  protected void serializePI(ProcessingInstruction node) throws SAXException {  ProcessingInstruction pi=node;  String name=pi.getNodeName();  if ((fFeatures & WELLFORMED) != 0) {    isPIWellFormed(node);  }  if (!applyFilter(node,NodeFilter.SHOW_PROCESSING_INSTRUCTION)) {    return;  }  if (name.equals("xslt-next-is-raw")) {    fNextIsRaw=true;  } else {    this.fSerializer.processingInstruction(name,pi.getData());  }}  }
class C{  public boolean moveObject(final Object obj,Int3D from,Int3D to){  return moveObject(obj,from.x,from.y,from.z,to.x,to.y,to.z);}  }
class C{  private String createTimerMomentXml(String momentId,String nextMomentId,double lengthMinutes){  String xml="";  xml+=createStartMomentXml("timer",momentId);  xml+=createNextMomentXml(nextMomentId);  xml+=createLengthMinutesXml(lengthMinutes);  xml+=createEndMomentXml();  return xml;}  }
class C{  public static boolean isNull(final Object object){  return object == null;}  }
class C{  public boolean isIgnored(String displayName){  return m_Ignored.containsKey(displayName);}  }
class C{  public JSONObject(String baseName,Locale locale) throws JSONException {  this();  ResourceBundle bundle=ResourceBundle.getBundle(baseName,locale,Thread.currentThread().getContextClassLoader());  Enumeration<String> keys=bundle.getKeys();  while (keys.hasMoreElements()) {    Object key=keys.nextElement();    if (key != null) {      String[] path=((String)key).split("\\.");      int last=path.length - 1;      JSONObject target=this;      for (int i=0; i < last; i+=1) {        String segment=path[i];        JSONObject nextTarget=target.optJSONObject(segment);        if (nextTarget == null) {          nextTarget=new JSONObject();          target.put(segment,nextTarget);        }        target=nextTarget;      }      target.put(path[last],bundle.getString((String)key));    }  }}  }
class C{  private static boolean isCorsPreflightRequest(final HttpRequest request){  return request.method() == HttpMethod.OPTIONS && request.headers().contains(HttpHeaderNames.ORIGIN) && request.headers().contains(HttpHeaderNames.ACCESS_CONTROL_REQUEST_METHOD);}  }
class C{  public JumperDataStore(File directory){  if (!directory.exists())   directory.mkdirs();  DBMaker dbm=DBMaker.newFileDB(new File(directory,"jumpers.db")).mmapFileEnableIfSupported().cacheLRUEnable().cacheSize(100000).asyncWriteEnable().asyncWriteFlushDelay(1000).closeOnJvmShutdown();  db=dbm.make();  jumperMap=db.createTreeMap("jumperMap").valueSerializer(new JumperSerializer()).makeOrGet();  jumperStartIndex=db.createTreeSet("startIndex").serializer(BTreeKeySerializer.TUPLE2).makeOrGet();  jumperEndIndex=db.createTreeSet("endIndex").serializer(BTreeKeySerializer.TUPLE2).makeOrGet();}  }
class C{  public String generate(final String featureFileName){  String fileNameWithNoExtension=FilenameUtils.removeExtension(featureFileName);  fileNameWithNoExtension=fileNameWithNoExtension.replaceAll("_","-");  fileNameWithNoExtension=fileNameWithNoExtension.replaceAll(" ","");  fileNameWithNoExtension=fileNameWithNoExtension.replaceAll("\\.","-");  String className=CaseFormat.LOWER_HYPHEN.to(CaseFormat.UPPER_CAMEL,fileNameWithNoExtension);  final Matcher startsWithDigitCheck=startsWithDigit.matcher(className);  if (startsWithDigitCheck.matches()) {    className="_" + className;  }  return className;}  }
class C{  public void mouseClicked(int p_146192_1_,int p_146192_2_,int p_146192_3_){  boolean var4=p_146192_1_ >= field_146209_f && p_146192_1_ < field_146209_f + field_146218_h && p_146192_2_ >= field_146210_g && p_146192_2_ < field_146210_g + field_146219_i;  if (field_146212_n)   setFocused(var4);  if (field_146213_o && p_146192_3_ == 0) {    int var5=p_146192_1_ - field_146209_f;    if (field_146215_m)     var5-=4;    String var6=field_146211_a.trimStringToWidth(field_146216_j.substring(field_146225_q),func_146200_o());    func_146190_e(field_146211_a.trimStringToWidth(var6,var5).length() + field_146225_q);  }}  }
class C{  public static void retrieveFiles(File path,boolean recursive){  File[] files=path.listFiles();  if (files != null)   for (  File file : files) {    if (file.isDirectory()) {      if (!file.getAbsolutePath().equals(getParentFolder() + "/temp")) {        if (isProject(file)) {          ModelFile m=new ModelFile(file.getAbsolutePath(),"Internal storage");          addToList(m);        } else {          if (recursive) {            retrieveFiles(new File(file.getAbsolutePath()),true);          } else           addToList(file);        }      }    } else {      if ((hasExtension(0,file.getName())) || (hasExtension(1,file.getName()))) {        addToList(file);      }    }  }  mCurrentPath=path;}  }
class C{  public void draw(GL2 gl){  int fSize=this.fixtures.size();  for (int i=0; i < fSize; i++) {    BodyFixture bodyFixture=this.getFixture(i);    Convex convex=bodyFixture.getShape();    RenderUtilities.drawShape(gl,convex,false);  }}  }
class C{  @Override public void write(TextWriterStream out,String label,Object object){  String res="";  if (label != null) {    res=res + label + "=";  }  if (object != null) {    if (label != null) {      res=res + object.toString().replace(" ","");    } else {      res=res + object.toString();    }  }  out.inlinePrintNoQuotes(res);}  }
class C{  public PositionComponent(){  this(0,0);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void addClassLine(String className,SourceLineRange range){  classLineMap.put(className,range);}  }
class C{  public <T extends Match>void removeMatch(T match){  matches.remove(match);  match.setProtein(null);}  }
class C{  private void buildDataStructures(StorageSystem vplex,StorageSystem array,URI varrayURI){  _portWwnToClusterMap=getPortIdToClusterMap(vplex);  _initiatorPortMap=getInitiatorPortsForArray(vplex.getId(),array.getId(),varrayURI);  _portWwnToNetwork=getPortWwnToNetwork(_initiatorPortMap);  populateNetworkMap(_initiatorPortMap.keySet(),_networkMap);  if (_initiatorPortMap.isEmpty()) {    throw DeviceControllerException.exceptions.noNetworksConnectingVPlexToArray(vplex.getNativeGuid(),array.getNativeGuid());  }  for (  URI networkURI : _initiatorPortMap.keySet()) {    List<StoragePort> ports=_initiatorPortMap.get(networkURI);    for (    StoragePort port : ports) {      Initiator initiator=ExportUtils.getInitiator(port.getPortNetworkId(),_dbClient);      if (initiator != null && !initiator.getInactive() && initiator.getRegistrationStatus().equals(RegistrationStatus.REGISTERED.name())) {        _initiators.add(initiator);        _idToInitiatorMap.put(initiator.getId().toString(),initiator);        _portWwnToInitiatorMap.put(Initiator.normalizePort(initiator.getInitiatorPort()),initiator);        _initiatorIdToNetwork.put(initiator.getId().toString(),networkURI);      }    }  }  _directorToInitiatorIds=getDirectorToInitiatorIds(_initiatorPortMap);}  }
class C{  public void visitInnerClass(String name,String outerName,String innerName,int access){  if (cv != null) {    cv.visitInnerClass(name,outerName,innerName,access);  }}  }
class C{  static public Properties fuse(Map defaults,Map override){  final boolean ignoreConflicts=true;  return fuse(defaults,override,ignoreConflicts);}  }
class C{  public StandardPieSectionLabelGenerator(String labelFormat,Locale locale){  this(labelFormat,NumberFormat.getNumberInstance(locale),NumberFormat.getPercentInstance(locale));}  }
class C{  public boolean forEach(ShortProcedure procedure){  short[] theElements=elements;  int theSize=size;  for (int i=0; i < theSize; )   if (!procedure.apply(theElements[i++]))   return false;  return true;}  }
class C{  public FolderHomeIcon(){  this.width=getOrigWidth();  this.height=getOrigHeight();}  }
class C{  public boolean optBoolean(String key,boolean defaultValue){  try {    return this.getBoolean(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public java_cup.runtime.symbol do_action(int act_num,java_cup.runtime.lr_parser parser,java.util.Stack stack,int top) throws java.lang.Exception {  return action_obj.CUP$do_action(act_num,parser,stack,top);}  }
class C{  public static void saveFormsData(final String file){  throw new java.lang.AssertionError("Itext not on classpath");}  }
class C{  public void addSink(String streamName,String targetOperName,String targetPortName){  addSinks(streamName,getInputPort(targetOperName,targetPortName));}  }
class C{  @Override protected EClass eStaticClass(){  return SGenPackage.Literals.REAL_LITERAL;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:29.801 -0500",hash_original_method="64F6A6BD8BE8E9634AE7594AC6F06F64",hash_generated_method="E92BEB28A041B72F482175599A614F8B") public final int resolvePort(int port){  return ((port <= 0) || (port > 0xffff)) ? defaultPort : port;}  }
class C{  private static int parseType(final String signature,int pos,final SignatureVisitor v){  char c;  int start, end;  boolean visited, inner;  String name;switch (c=signature.charAt(pos++)) {case 'Z':case 'C':case 'B':case 'S':case 'I':case 'F':case 'J':case 'D':case 'V':    v.visitBaseType(c);  return pos;case '[':return parseType(signature,pos,v.visitArrayType());case 'T':end=signature.indexOf(';',pos);v.visitTypeVariable(signature.substring(pos,end));return end + 1;default :start=pos;visited=false;inner=false;for (; ; ) {switch (c=signature.charAt(pos++)) {case '.':case ';':if (!visited) {name=signature.substring(start,pos - 1);if (inner) {v.visitInnerClassType(name);} else {v.visitClassType(name);}}if (c == ';') {v.visitEnd();return pos;}start=pos;visited=false;inner=true;break;case '<':name=signature.substring(start,pos - 1);if (inner) {v.visitInnerClassType(name);} else {v.visitClassType(name);}visited=true;top: for (; ; ) {switch (c=signature.charAt(pos)) {case '>':break top;case '*':++pos;v.visitTypeArgument();break;case '+':case '-':pos=parseType(signature,pos + 1,v.visitTypeArgument(c));break;default :pos=parseType(signature,pos,v.visitTypeArgument('='));break;}}}}}}  }
class C{  public void draw(PGraphics g){  if (visible) {    pre(g);    drawImpl(g);    post(g);  }}  }
class C{  public boolean isPageBreak(){  if (isFunctionRow() && m_nodes != null) {    for (int i=0; i < m_nodes.size(); i++) {      Object o=m_nodes.get(i);      if (o instanceof PrintDataElement) {        PrintDataElement pde=(PrintDataElement)o;        if (pde.isPageBreak())         return true;      }    }  }  return false;}  }
class C{  @Override public void run(){  if (producerName == null) {    producerName=Thread.currentThread().getName();  }  for (long i=0; i < totalPuts; i++) {    String REGION_NAME="test";    try {      ConflatableObject event=new ConflatableObject(keyPrefix + i,"val" + i,new EventID(new byte[]{1},startingId,startingId + i),createConflatables,REGION_NAME);      logger.fine("putting for key =  " + keyPrefix + i);      rq.put(event);      Thread.sleep(sleeptime);    } catch (    VirtualMachineError e) {      SystemFailure.initiateFailure(e);      throw e;    }catch (    Throwable e) {      logger.severe("Exception while running Producer;continue running.",e);      encounteredException=true;      break;    }  }  logger.info(producerName + " :  Puts completed");}  }
class C{  private void loadAccount(){  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(getActivity());  mChosenAccountName=sp.getString(ACCOUNT_KEY,null);  if (mChosenAccountName != null) {    youTubeSearch.setAuthSelectedAccountName(mChosenAccountName);    userNameTextView.setText(extractUserName(mChosenAccountName));    Toast.makeText(getContext(),"Hi " + extractUserName(mChosenAccountName),Toast.LENGTH_SHORT).show();  }}  }
class C{  public IntDict copy(){  IntDict outgoing=new IntDict(count);  System.arraycopy(keys,0,outgoing.keys,0,count);  System.arraycopy(values,0,outgoing.values,0,count);  for (int i=0; i < count; i++) {    outgoing.indices.put(keys[i],i);  }  outgoing.count=count;  return outgoing;}  }
class C{  @Override public void showVenues(List<Venue> venues,@Nullable String todayLatestCheckInVenueId){  mVenuesAdapter.setVenues(venues);  mVenuesAdapter.notifyDataSetChanged();  if (todayLatestCheckInVenueId != null) {    mVenuesAdapter.setLastCheckedInVenue(todayLatestCheckInVenueId);  }  mRecyclerViewVenues.setVisibility(View.VISIBLE);}  }
class C{  public int read(char array[]){  return read(array,0,array.length);}  }
class C{  private void resetThroughput(){  if (service.getManagedSessionCount() == 0) {    readBytesThroughput=0;    writtenBytesThroughput=0;    readMessagesThroughput=0;    writtenMessagesThroughput=0;  }}  }
class C{  public DrawerBuilder withRootView(@NonNull ViewGroup rootView){  this.mRootView=rootView;  withTranslucentStatusBar(false);  return this;}  }
class C{  public void preQueue(Runnable func){synchronized (preEvents) {    preEvents.add(func);  }}  }
class C{  public boolean isDone(){  return index > 5;}  }
class C{  public boolean keepCarriageReturns(){  return keepCR;}  }
class C{  private void bitPlusFollowFalse(){  for (mOut.writeBitFalse(); mBitsToFollow > 0; --mBitsToFollow) {    mOut.writeBitTrue();  }}  }
class C{  public static boolean fileExists(String path){  SuperUserCommand superUserCommand=new SuperUserCommand("ls '" + path + "'");  superUserCommand.setHideStandardOutput(true);  superUserCommand.execute();  return superUserCommand.commandWasSuccessful();}  }
class C{  public void reset(byte[] data,int length){  pos=0;  mark=0;  count=length;  buf=data;}  }
class C{  @Override public boolean hasNext(){  return spot.before(endFinal);}  }
class C{  public void XtestTDigest() throws Exception {  AVLTreeDigest t1=new AVLTreeDigest(100);  t1.add(10,1);  t1.add(90,1);  t1.add(50,1);  System.out.println(t1.quantile(0.1));  System.out.println(t1.quantile(0.5));  System.out.println(t1.quantile(0.9));  assertEquals(t1.quantile(0.5),50.0,0.01);  AVLTreeDigest t2=new AVLTreeDigest(100);  t2.add(130,1);  t2.add(170,1);  t2.add(90,1);  System.out.println(t2.quantile(0.1));  System.out.println(t2.quantile(0.5));  System.out.println(t2.quantile(0.9));  AVLTreeDigest top=new AVLTreeDigest(100);  t1.compress();  ByteBuffer buf=ByteBuffer.allocate(t1.byteSize());  t1.asSmallBytes(buf);  byte[] arr1=Arrays.copyOf(buf.array(),buf.position());  ByteBuffer rbuf=ByteBuffer.wrap(arr1);  top.add(AVLTreeDigest.fromBytes(rbuf));  System.out.println(top.quantile(0.1));  System.out.println(top.quantile(0.5));  System.out.println(top.quantile(0.9));  t2.compress();  ByteBuffer buf2=ByteBuffer.allocate(t2.byteSize());  t2.asSmallBytes(buf2);  byte[] arr2=Arrays.copyOf(buf2.array(),buf2.position());  ByteBuffer rbuf2=ByteBuffer.wrap(arr2);  top.add(AVLTreeDigest.fromBytes(rbuf2));  System.out.println(top.quantile(0.1));  System.out.println(top.quantile(0.5));  System.out.println(top.quantile(0.9));}  }
class C{  public static Mult mult(final double constant){  return new Mult(constant);}  }
class C{  public final int hashCode(){  return super.hashCode();}  }
class C{  @Override void encode(final byte[] in,int inPos,final int inAvail,final Context context){  if (context.eof) {    return;  }  if (inAvail < 0) {    context.eof=true;    if (0 == context.modulus && lineLength == 0) {      return;    }    final byte[] buffer=ensureBufferSize(encodeSize,context);    final int savedPos=context.pos;switch (context.modulus) {case 0:      break;case 1:    buffer[context.pos++]=encodeTable[(context.ibitWorkArea >> 2) & MASK_6BITS];  buffer[context.pos++]=encodeTable[(context.ibitWorkArea << 4) & MASK_6BITS];if (encodeTable == STANDARD_ENCODE_TABLE) {  buffer[context.pos++]=PAD;  buffer[context.pos++]=PAD;}break;case 2:buffer[context.pos++]=encodeTable[(context.ibitWorkArea >> 10) & MASK_6BITS];buffer[context.pos++]=encodeTable[(context.ibitWorkArea >> 4) & MASK_6BITS];buffer[context.pos++]=encodeTable[(context.ibitWorkArea << 2) & MASK_6BITS];if (encodeTable == STANDARD_ENCODE_TABLE) {buffer[context.pos++]=PAD;}break;default :throw new IllegalStateException("Impossible modulus " + context.modulus);}context.currentLinePos+=context.pos - savedPos;if (lineLength > 0 && context.currentLinePos > 0) {System.arraycopy(lineSeparator,0,buffer,context.pos,lineSeparator.length);context.pos+=lineSeparator.length;}} else {for (int i=0; i < inAvail; i++) {final byte[] buffer=ensureBufferSize(encodeSize,context);context.modulus=(context.modulus + 1) % BYTES_PER_UNENCODED_BLOCK;int b=in[inPos++];if (b < 0) {b+=256;}context.ibitWorkArea=(context.ibitWorkArea << 8) + b;if (0 == context.modulus) {buffer[context.pos++]=encodeTable[(context.ibitWorkArea >> 18) & MASK_6BITS];buffer[context.pos++]=encodeTable[(context.ibitWorkArea >> 12) & MASK_6BITS];buffer[context.pos++]=encodeTable[(context.ibitWorkArea >> 6) & MASK_6BITS];buffer[context.pos++]=encodeTable[context.ibitWorkArea & MASK_6BITS];context.currentLinePos+=BYTES_PER_ENCODED_BLOCK;if (lineLength > 0 && lineLength <= context.currentLinePos) {System.arraycopy(lineSeparator,0,buffer,context.pos,lineSeparator.length);context.pos+=lineSeparator.length;context.currentLinePos=0;}}}}}  }
class C{  public static boolean checkInternetIsActive(Context context){  ConnectivityManager connec=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  android.net.NetworkInfo wifi=connec.getNetworkInfo(ConnectivityManager.TYPE_WIFI);  android.net.NetworkInfo mobile=connec.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);  if (wifi.isConnected() || mobile.isConnected()) {    return true;  }  return false;}  }
class C{  public VcpcAltRunner(GraphSource graphWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(graphWrapper.getGraph(),params,knowledgeBoxModel);}  }
class C{  public CombineContext(Globe globe,double resolution){  if (globe == null) {    String msg=Logging.getMessage("nullValue.GlobeIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  GLUtessellatorCallback cb=new TessCallbackAdapter(this);  GLUtessellator tess=GLU.gluNewTess();  GLU.gluTessCallback(tess,GLU.GLU_TESS_BEGIN,cb);  GLU.gluTessCallback(tess,GLU.GLU_TESS_VERTEX,cb);  GLU.gluTessCallback(tess,GLU.GLU_TESS_END,cb);  GLU.gluTessCallback(tess,GLU.GLU_TESS_COMBINE,cb);  GLU.gluTessCallback(tess,GLU.GLU_TESS_ERROR,cb);  GLU.gluTessProperty(tess,GLU.GLU_TESS_BOUNDARY_ONLY,GL.GL_TRUE);  GLU.gluTessNormal(tess,0,0,1);  this.globe=globe;  this.resolution=resolution;  this.tess=tess;}  }
class C{  public boolean overlaps(String sequence,int start,int end){  if (start == MISSING || end == MISSING || end < start) {    throw new IllegalArgumentException();  }  if (!mSequence.equals(sequence)) {    return false;  }  if ((mEnd != MISSING && start >= mEnd) || (end <= mStart)) {    return false;  }  return true;}  }
class C{  protected void removeAnnotations(final List<? extends Annotation> annotations,final boolean fireModelChanged){  if (!annotations.isEmpty()) {    final Iterator<? extends Annotation> e=annotations.iterator();    while (e.hasNext()) {      removeAnnotation(e.next(),false);    }    if (fireModelChanged) {      fireModelChanged();    }  }}  }
class C{  public ResolvableMethod argumentTypes(Class<?>... argumentTypes){  this.argumentTypes=argumentTypes;  return this;}  }
class C{  public Record[] expand() throws IOException {  List list=new ArrayList();  for (long i=start; i < end; i+=step) {    String namestr=substitute(namePattern,current);    Name name=Name.fromString(namestr,origin);    String rdata=substitute(rdataPattern,current);    list.add(Record.fromString(name,type,dclass,ttl,rdata,origin));  }  return (Record[])list.toArray(new Record[list.size()]);}  }
class C{  int encrypt(byte[] in,int inOfs,int len,byte[] out,int outOfs){  if ((len % blockSize) != 0) {    throw new ProviderException("Internal error in input buffering");  }  processAAD();  if (len > 0) {    gctrPAndC.update(in,inOfs,len,out,outOfs);    processed+=len;    ghashAllToS.update(out,outOfs,len);  }  return len;}  }
class C{  public boolean has(String key){  return this.map.containsKey(key);}  }
class C{  public boolean wpsKeypadSupported(){  return (wpsConfigMethodsSupported & WPS_CONFIG_KEYPAD) != 0;}  }
class C{  protected ColorSupported(int value){  super(value);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("A_Asset_Group_ID"))     m_A_Asset_Group_ID=para[i].getParameterAsInt(); else     if (name.equals("M_Product_ID"))     m_M_Product_ID=para[i].getParameterAsInt(); else     if (name.equals("C_BPartner_ID"))     m_C_BPartner_ID=para[i].getParameterAsInt(); else     if (name.equals("A_Asset_ID"))     m_A_Asset_ID=para[i].getParameterAsInt(); else     if (name.equals("GuaranteeDate"))     m_GuaranteeDate=(Timestamp)para[i].getParameter(); else     if (name.equals("NoGuarantee_MailText_ID"))     m_NoGuarantee_MailText_ID=para[i].getParameterAsInt(); else     if (name.equals("AttachAsset"))     m_AttachAsset="Y".equals(para[i].getParameter()); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }  if (m_GuaranteeDate == null)   m_GuaranteeDate=new Timestamp(System.currentTimeMillis());  m_client=MClient.get(getCtx());}  }
class C{  public void onEvent(Event e){  Integer product=onlyProduct.getValue() != null ? (Integer)onlyProduct.getValue() : null;  Integer vendor=onlyVendor.getValue() != null ? (Integer)onlyVendor.getValue() : null;  Timestamp from=dateFrom.getValue() != null ? (Timestamp)dateFrom.getValue() : null;  Timestamp to=dateTo.getValue() != null ? (Timestamp)dateTo.getValue() : null;  if (e.getTarget() == matchFrom) {    String selection=(String)matchFrom.getSelectedItem().getValue();    SimpleListModel model=new SimpleListModel(cmd_matchFrom((String)matchFrom.getSelectedItem().getLabel()));    matchTo.setItemRenderer(model);    matchTo.setModel(model);    xMatchedBorder.setValue(selection);    xMatchedTable.setRowCount(0);    matchTo.setSelectedIndex(0);    cmd_matchTo();  } else   if (e.getTarget() == matchTo)   cmd_matchTo(); else   if (e.getTarget() == bSearch) {    xMatchedTable=(WListbox)cmd_search(xMatchedTable,matchFrom.getSelectedIndex(),(String)matchTo.getSelectedItem().getLabel(),product,vendor,from,to,matchMode.getSelectedIndex() == MODE_MATCHED);    xMatched.setValue(Env.ZERO);    statusBar.setStatusLine(matchFrom.getSelectedItem().getLabel() + "# = " + xMatchedTable.getRowCount(),xMatchedTable.getRowCount() == 0);    statusBar.setStatusDB("0");    cmd_searchTo();  } else   if (e.getTarget() == bProcess) {    cmd_process(xMatchedTable,xMatchedToTable,matchMode.getSelectedIndex(),matchFrom.getSelectedIndex(),matchTo.getSelectedItem(),m_xMatched);    xMatchedTable=(WListbox)cmd_search(xMatchedTable,matchFrom.getSelectedIndex(),(String)matchTo.getSelectedItem().getLabel(),product,vendor,from,to,matchMode.getSelectedIndex() == MODE_MATCHED);    xMatched.setValue(Env.ZERO);    statusBar.setStatusLine(matchFrom.getSelectedItem().getLabel() + "# = " + xMatchedTable.getRowCount(),xMatchedTable.getRowCount() == 0);    statusBar.setStatusDB("0");    cmd_searchTo();  } else   if (e.getTarget() == sameBPartner || e.getTarget() == sameProduct || e.getTarget() == sameQty)   cmd_searchTo(); else   if (AEnv.contains(xMatchedTable,e.getTarget()))   cmd_searchTo();}  }
class C{  public void deSuperOp(UserHostmask user){  if (user == null)   throw new IllegalArgumentException("Can't remove super op on null user");  setMode("-a " + user.getNick());}  }
class C{  public void deleteAttributes(int[] columnIndices){  int i;  Arrays.sort(columnIndices);  addUndoPoint();  m_IgnoreChanges=true;  for (i=columnIndices.length - 1; i >= 0; i--) {    deleteAttributeAt(columnIndices[i],false);  }  m_IgnoreChanges=false;  notifyListener(new TableModelEvent(this,TableModelEvent.HEADER_ROW));}  }
class C{  public boolean isAllDay(){  return isAllDay;}  }
class C{  public NeuronGroup(final Network net,final int numNeurons){  this(net,new Point2D.Double(0,0),numNeurons);}  }
class C{  public DBConnectionNotFound(String msg){  super(msg);}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:18.043 -0500",hash_original_method="6484BCA0EF411C515D6EAFFBE43997C3",hash_generated_method="69ADD4EC850DAA0BC95FE3266726B3FE") public StringBuffer(){}  }
class C{  public void updateProfiles(final JSONObject requestJSONObject) throws ServiceException {  final Transaction transaction=userRepository.beginTransaction();  try {    final String oldUserId=requestJSONObject.optString(Keys.OBJECT_ID);    final JSONObject oldUser=userRepository.get(oldUserId);    if (null == oldUser) {      throw new ServiceException(langPropsService.get("updateFailLabel"));    }    final String userTags=requestJSONObject.optString(UserExt.USER_TAGS);    oldUser.put(UserExt.USER_TAGS,userTags);    tag(oldUser);    oldUser.put(UserExt.USER_REAL_NAME,requestJSONObject.optString(UserExt.USER_REAL_NAME));    oldUser.put(User.USER_URL,requestJSONObject.optString(User.USER_URL));    oldUser.put(UserExt.USER_QQ,requestJSONObject.optString(UserExt.USER_QQ));    oldUser.put(UserExt.USER_INTRO,requestJSONObject.optString(UserExt.USER_INTRO));    oldUser.put(UserExt.USER_AVATAR_TYPE,requestJSONObject.optString(UserExt.USER_AVATAR_TYPE));    oldUser.put(UserExt.USER_AVATAR_URL,requestJSONObject.optString(UserExt.USER_AVATAR_URL));    oldUser.put(UserExt.USER_TEAM,requestJSONObject.optString(UserExt.USER_TEAM));    oldUser.put(UserExt.USER_JOIN_POINT_RANK,requestJSONObject.optString(UserExt.USER_JOIN_POINT_RANK));    oldUser.put(UserExt.USER_JOIN_USED_POINT_RANK,requestJSONObject.optString(UserExt.USER_JOIN_USED_POINT_RANK));    oldUser.put(UserExt.USER_UPDATE_TIME,System.currentTimeMillis());    userRepository.update(oldUserId,oldUser);    transaction.commit();    archiveMgmtService.refreshTeams(System.currentTimeMillis());  } catch (  final RepositoryException e) {    if (transaction.isActive()) {      transaction.rollback();    }    LOGGER.log(Level.ERROR,"Updates user profiles failed",e);    throw new ServiceException(langPropsService.get("updateFailLabel"));  }}  }
class C{  public void addHolonomicConstraints(){  sim.physics2D.PhysicsState ps=sim.physics2D.PhysicsState.getInstance();}  }
class C{  private void drawItems(){  if (animationStep < 0d) {    items.clear();    items.addAll(originalItems);    for (int i=0; i < items.size(); i++) {      final ISItem item=items.get(i);      item.setzPosition((i - index) * spacing);    }    Collections.sort(items);  }  for (  final ISItem item : items) {    drawItem(item);  }}  }
class C{  public void testConstrStringWithExponentWithoutPoint1(){  String a="-238768787678287e214";  int aScale=-214;  BigInteger bA=new BigInteger("-238768787678287");  BigDecimal aNumber=new BigDecimal(a);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  protected BusinessObjectDataAttribute deleteBusinessObjectDataAttributeImpl(BusinessObjectDataAttributeKey businessObjectDataAttributeKey){  businessObjectDataAttributeHelper.validateBusinessObjectDataAttributeKey(businessObjectDataAttributeKey);  BusinessObjectFormatEntity businessObjectFormatEntity=businessObjectFormatDaoHelper.getBusinessObjectFormatEntity(new BusinessObjectFormatKey(businessObjectDataAttributeKey.getNamespace(),businessObjectDataAttributeKey.getBusinessObjectDefinitionName(),businessObjectDataAttributeKey.getBusinessObjectFormatUsage(),businessObjectDataAttributeKey.getBusinessObjectFormatFileType(),businessObjectDataAttributeKey.getBusinessObjectFormatVersion()));  if (businessObjectDataAttributeHelper.isBusinessObjectDataAttributeRequired(businessObjectDataAttributeKey.getBusinessObjectDataAttributeName(),businessObjectFormatEntity)) {    throw new IllegalArgumentException(String.format("Cannot delete \"%s\" attribute since it is a required attribute for business object format {%s}.",businessObjectDataAttributeKey.getBusinessObjectDataAttributeName(),businessObjectFormatHelper.businessObjectFormatEntityAltKeyToString(businessObjectFormatEntity)));  }  BusinessObjectDataAttributeEntity businessObjectDataAttributeEntity=businessObjectDataAttributeDaoHelper.getBusinessObjectDataAttributeEntity(businessObjectDataAttributeKey);  BusinessObjectDataEntity businessObjectDataEntity=businessObjectDataAttributeEntity.getBusinessObjectData();  businessObjectDataEntity.getAttributes().remove(businessObjectDataAttributeEntity);  businessObjectDataDao.saveAndRefresh(businessObjectDataEntity);  return createBusinessObjectDataAttributeFromEntity(businessObjectDataAttributeEntity);}  }
class C{  private static IgniteConfiguration readCfgFromFileAndDeleteFile(String fileName) throws IOException, IgniteCheckedException {  try (BufferedReader cfgReader=new BufferedReader(new FileReader(fileName))){    IgniteConfiguration cfg=(IgniteConfiguration)new XStream().fromXML(cfgReader);    Marshaller marsh=IgniteTestResources.getMarshaller();    cfg.setMarshaller(marsh);    X.println("Configured marshaller class: " + marsh.getClass().getName());    TcpDiscoverySpi disco=new TcpDiscoverySpi();    disco.setIpFinder(GridCacheAbstractFullApiSelfTest.LOCAL_IP_FINDER);    cfg.setDiscoverySpi(disco);    return cfg;  }  finally {    new File(fileName).delete();  }}  }
class C{  public int doFinal(byte[] out,int outOff) throws DataLengthException, IllegalStateException, InvalidCipherTextException {  if (bufOff + outOff > out.length) {    throw new DataLengthException("output buffer to small in doFinal");  }  int blockSize=cipher.getBlockSize();  int len=bufOff - blockSize;  byte[] block=new byte[blockSize];  if (forEncryption) {    if (bufOff < blockSize) {      throw new DataLengthException("need at least one block of input for CTS");    }    cipher.processBlock(buf,0,block,0);    if (bufOff > blockSize) {      for (int i=bufOff; i != buf.length; i++) {        buf[i]=block[i - blockSize];      }      for (int i=blockSize; i != bufOff; i++) {        buf[i]^=block[i - blockSize];      }      if (cipher instanceof CBCBlockCipher) {        BlockCipher c=((CBCBlockCipher)cipher).getUnderlyingCipher();        c.processBlock(buf,blockSize,out,outOff);      } else {        cipher.processBlock(buf,blockSize,out,outOff);      }      System.arraycopy(block,0,out,outOff + blockSize,len);    } else {      System.arraycopy(block,0,out,outOff,blockSize);    }  } else {    if (bufOff < blockSize) {      throw new DataLengthException("need at least one block of input for CTS");    }    byte[] lastBlock=new byte[blockSize];    if (bufOff > blockSize) {      if (cipher instanceof CBCBlockCipher) {        BlockCipher c=((CBCBlockCipher)cipher).getUnderlyingCipher();        c.processBlock(buf,0,block,0);      } else {        cipher.processBlock(buf,0,block,0);      }      for (int i=blockSize; i != bufOff; i++) {        lastBlock[i - blockSize]=(byte)(block[i - blockSize] ^ buf[i]);      }      System.arraycopy(buf,blockSize,block,0,len);      cipher.processBlock(block,0,out,outOff);      System.arraycopy(lastBlock,0,out,outOff + blockSize,len);    } else {      cipher.processBlock(buf,0,block,0);      System.arraycopy(block,0,out,outOff,blockSize);    }  }  int offset=bufOff;  reset();  return offset;}  }
class C{  void finishResponse() throws IOException {  close();}  }
class C{  public static Rectangle toSwtRectangle(final Rectangle2D rect2d){  return new Rectangle((int)Math.round(rect2d.getMinX()),(int)Math.round(rect2d.getMinY()),(int)Math.round(rect2d.getWidth()),(int)Math.round(rect2d.getHeight()));}  }
class C{  public static PKCS10CertificationRequest readCSR(InputStream in) throws IOException {  try (PEMParser pemParser=new PEMParser(new InputStreamReader(in))){    Object parsedObj=pemParser.readObject();    if (!(parsedObj instanceof PKCS10CertificationRequest)) {      throw new IOException("Not a PKCS10 CSR");    }    return (PKCS10CertificationRequest)parsedObj;  } }  }
class C{  private long encodeWeight(long ngramCount){  return Long.MAX_VALUE - ngramCount;}  }
class C{  public void disableAutoRotate(){  setAutoRotateState(false);}  }
class C{  public SyncProviderException(SyncResolver syncResolver){  if (syncResolver == null) {    throw new IllegalArgumentException("Cannot instantiate a SyncProviderException " + "with a null SyncResolver object");  } else {    this.syncResolver=syncResolver;  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_CONSTANT_DECLARATION_1__LIST_1:    setList_1(LIST_1_EDEFAULT);  return;case UmplePackage.ANONYMOUS_CONSTANT_DECLARATION_1__NAME_1:setName_1(NAME_1_EDEFAULT);return;case UmplePackage.ANONYMOUS_CONSTANT_DECLARATION_1__TYPE_1:setType_1(TYPE_1_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  ValueGraph(IR ir){  graph=new SpaceEffGraph();  nameMap=new HashMap<Object,ValueGraphVertex>();  DefUse.computeDU(ir);  addRegisterNodes(ir);  for (Enumeration<Instruction> e=ir.forwardInstrEnumerator(); e.hasMoreElements(); ) {    Instruction s=e.nextElement();    processInstruction(s);  }  computeClosure();}  }
class C{  public boolean isBorderAnimation(){  return isBorderAnimation;}  }
class C{  private void lockScreen(){  if (mScreenOrientation == ActivityInfo.SCREEN_ORIENTATION_SENSOR) {    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2)     setRequestedOrientation(14); else     setRequestedOrientation(getScreenOrientation());    mScreenOrientationLock=getScreenOrientation();  }  showInfo("locked",1000);  mTime.setEnabled(false);  mSeekbar.setEnabled(false);  mLength.setEnabled(false);  mSize.setEnabled(false);  mEdit.setEnabled(false);  hideOverlay(true);  mLockBackButton=true;  mLock.setBackgroundResource(R.drawable.video_lockbtn_locked);}  }
class C{  private void serializeObject(Object obj,DataOutput dataOutput,boolean useCompression) throws IOException {  if (obj != null && obj.getClass().isArray()) {    if (obj instanceof Integer[]) {      obj=(int[])getPrimitiveArray((Object[])obj);    } else     if (obj instanceof Boolean[]) {      obj=(boolean[])getPrimitiveArray((Object[])obj);    } else     if (obj instanceof Byte[]) {      obj=(byte[])getPrimitiveArray((Object[])obj);    } else     if (obj instanceof Character[]) {      obj=(char[])getPrimitiveArray((Object[])obj);    } else     if (obj instanceof Double[]) {      obj=(double[])getPrimitiveArray((Object[])obj);    } else     if (obj instanceof Float[]) {      obj=(float[])getPrimitiveArray((Object[])obj);    } else     if (obj instanceof Long[]) {      obj=(long[])getPrimitiveArray((Object[])obj);    } else     if (obj instanceof Short[]) {      obj=(short[])getPrimitiveArray((Object[])obj);    } else     if (obj instanceof Integer[][]) {      obj=(int[][])getPrimitiveArray((Object[][])obj);    } else     if (obj instanceof Boolean[][]) {      obj=(boolean[][])getPrimitiveArray((Object[][])obj);    } else     if (obj instanceof Byte[][]) {      obj=(byte[][])getPrimitiveArray((Object[][])obj);    } else     if (obj instanceof Character[][]) {      obj=(char[][])getPrimitiveArray((Object[][])obj);    } else     if (obj instanceof Double[][]) {      obj=(double[][])getPrimitiveArray((Object[][])obj);    } else     if (obj instanceof Float[][]) {      obj=(float[][])getPrimitiveArray((Object[][])obj);    } else     if (obj instanceof Long[][]) {      obj=(long[][])getPrimitiveArray((Object[][])obj);    } else     if (obj instanceof Short[][]) {      obj=(short[][])getPrimitiveArray((Object[][])obj);    }  }  serialize(dataOutput,obj,useCompression);}  }
class C{  public MultiSearchRequest add(SearchRequestBuilder request){  requests.add(request.request());  return this;}  }
class C{  public void testMethodOverride(){  Class rmp=RandomMergePolicy.class;  for (  Method meth : rmp.getMethods()) {    if (meth.getDeclaringClass().equals(Object.class) || Modifier.isFinal(meth.getModifiers())) {      continue;    }    assertEquals("method not overridden by RandomMergePolicy: " + meth.toGenericString(),rmp,meth.getDeclaringClass());  }}  }
class C{  protected void checkFileContent(IgfsSecondaryFileSystemTestAdapter uni,String path,@Nullable byte[]... chunks) throws IOException, IgniteCheckedException {  if (chunks != null && chunks.length > 0) {    InputStream is=null;    try {      is=uni.openInputStream(path);      int chunkIdx=0;      int read;      for (      byte[] chunk : chunks) {        byte[] buf=new byte[chunk.length];        read=0;        while (true) {          int r=is.read(buf,read,buf.length - read);          read+=r;          if (read == buf.length || r <= 0)           break;        }        assert read == chunk.length : "Chunk #" + chunkIdx + " was not read fully:"+ " read="+ read+ ", expected="+ chunk.length;        assert Arrays.equals(chunk,buf) : "Bad chunk [igfs=" + uni.name() + ", chunkIdx="+ chunkIdx+ ", expected="+ Arrays.toString(chunk)+ ", actual="+ Arrays.toString(buf)+ ']';        chunkIdx++;      }      is.close();    }  finally {      U.closeQuiet(is);    }  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private static int gallopRight(Comparable<Object> key,Object[] a,int base,int len,int hint){  if (DEBUG)   assert len > 0 && hint >= 0 && hint < len;  int ofs=1;  int lastOfs=0;  if (key.compareTo(a[base + hint]) < 0) {    int maxOfs=hint + 1;    while (ofs < maxOfs && key.compareTo(a[base + hint - ofs]) < 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    int tmp=lastOfs;    lastOfs=hint - ofs;    ofs=hint - tmp;  } else {    int maxOfs=len - hint;    while (ofs < maxOfs && key.compareTo(a[base + hint + ofs]) >= 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    lastOfs+=hint;    ofs+=hint;  }  if (DEBUG)   assert -1 <= lastOfs && lastOfs < ofs && ofs <= len;  lastOfs++;  while (lastOfs < ofs) {    int m=lastOfs + ((ofs - lastOfs) >>> 1);    if (key.compareTo(a[base + m]) < 0)     ofs=m; else     lastOfs=m + 1;  }  if (DEBUG)   assert lastOfs == ofs;  return ofs;}  }
class C{  public boolean isDeclaredDynamic(){  return declaredDynamic;}  }
class C{  public String toObjectExpr(String columnName){  throw new UnsupportedOperationException(getClass().getSimpleName());}  }
class C{  public void updateStatus(JobContext jobContext){  try {    if (_status == JobStatus.SUCCESS) {      s_logger.debug("Calling task completer for successful job");      _taskCompleter.ready(jobContext.getDbClient());    } else     if (_status == JobStatus.FAILED) {      s_logger.debug("Calling task completer for failed job");      ServiceError error=DeviceControllerErrors.vplex.migrationJobFailed(_errorDescription);      _taskCompleter.error(jobContext.getDbClient(),error);    }  } catch (  Exception e) {    s_logger.error("Problem while trying to update status",e);  }}  }
class C{  public static byte[] decodeFast(char[] chars,int offset,int charsLen){  if (charsLen == 0) {    return new byte[0];  }  int sIx=offset, eIx=offset + charsLen - 1;  while (sIx < eIx && IA[chars[sIx]] < 0)   sIx++;  while (eIx > 0 && IA[chars[eIx]] < 0)   eIx--;  int pad=chars[eIx] == '=' ? (chars[eIx - 1] == '=' ? 2 : 1) : 0;  int cCnt=eIx - sIx + 1;  int sepCnt=charsLen > 76 ? (chars[76] == '\r' ? cCnt / 78 : 0) << 1 : 0;  int len=((cCnt - sepCnt) * 6 >> 3) - pad;  byte[] bytes=new byte[len];  int d=0;  for (int cc=0, eLen=(len / 3) * 3; d < eLen; ) {    int i=IA[chars[sIx++]] << 18 | IA[chars[sIx++]] << 12 | IA[chars[sIx++]] << 6 | IA[chars[sIx++]];    bytes[d++]=(byte)(i >> 16);    bytes[d++]=(byte)(i >> 8);    bytes[d++]=(byte)i;    if (sepCnt > 0 && ++cc == 19) {      sIx+=2;      cc=0;    }  }  if (d < len) {    int i=0;    for (int j=0; sIx <= eIx - pad; j++)     i|=IA[chars[sIx++]] << (18 - j * 6);    for (int r=16; d < len; r-=8)     bytes[d++]=(byte)(i >> r);  }  return bytes;}  }
class C{  public URI(String p_scheme,String p_userinfo,String p_host,int p_port,String p_path,String p_queryString,String p_fragment) throws MalformedURIException {  if (p_scheme == null || p_scheme.trim().length() == 0) {    throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_SCHEME_REQUIRED,null));  }  if (p_host == null) {    if (p_userinfo != null) {      throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_NO_USERINFO_IF_NO_HOST,null));    }    if (p_port != -1) {      throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_NO_PORT_IF_NO_HOST,null));    }  }  if (p_path != null) {    if (p_path.indexOf('?') != -1 && p_queryString != null) {      throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_NO_QUERY_STRING_IN_PATH,null));    }    if (p_path.indexOf('#') != -1 && p_fragment != null) {      throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_NO_FRAGMENT_STRING_IN_PATH,null));    }  }  setScheme(p_scheme);  setHost(p_host);  setPort(p_port);  setUserinfo(p_userinfo);  setPath(p_path);  setQueryString(p_queryString);  setFragment(p_fragment);}  }
class C{  public boolean startDownload(AvailableUpdateInfo availableUpdateInfo){synchronized (mDownloadLock) {    cancelDownload();    mApplication.registerReceiver(new DownloadUpdateReceiver(),sDownloadCompleteIntentFilter);    try {      String dir=getDownloadDirectory();      if (dir == null) {        LOG.e("no external storage is available, can't start download");        return false;      }      String filename=MODULE_NAME + "-" + availableUpdateInfo.availableVersion+ ".apk";      DownloadManager.Request request=new DownloadManager.Request(availableUpdateInfo.updateUri).setDestinationInExternalPublicDir(dir,filename).setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE);      mDownloadId=mDownloadManager.enqueue(request);      LOG.i("Starting download: " + availableUpdateInfo.updateUri + " -> "+ filename+ " in "+ dir);      return true;    } catch (    Exception e) {      LOG.e(e,"Failed to download application update from " + availableUpdateInfo.updateUri);      return false;    }  }}  }
class C{  public AccessRuleSet(AccessRule[] accessRules,byte classpathEntryType,String classpathEntryName){  this.accessRules=accessRules;  this.classpathEntryType=classpathEntryType;  this.classpathEntryName=classpathEntryName;}  }
class C{  final PageLeafImpl copy(long sequence){  BlockLeaf[] blocks=new BlockLeaf[_blocks.length];  for (int i=0; i < blocks.length; i++) {    blocks[i]=_blocks[i].copy();  }  PageLeafImpl page=new PageLeafImpl(getId(),getNextId(),sequence,_table,_firstKey,_lastKey,blocks);  if (_stub != null) {    _stub.copyToCompact(page);  }  return page;}  }
class C{  private void transformColumnCase(OneRowChange.ColumnSpec colSpec){  String oldColumn=colSpec.getName();  if (oldColumn != null) {    colSpec.setName(transformCase(oldColumn));    if (logger.isDebugEnabled())     logger.debug("Column case transformed from " + oldColumn + " to "+ colSpec.getName());  }}  }
class C{  public boolean isParameterizedType(){  KeyKind kind=new KeyKind(this.key);  kind.parse();  return (kind.flags & KeyKind.F_PARAMETERIZED_TYPE) != 0;}  }
