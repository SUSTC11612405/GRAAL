class C{  protected final void complete(){  if (done) {    return;  }  done=true;  actual.onComplete();}  }
class C{  public void write(Writer writer,Map<String,String> outputProperties) throws TransformerException {  Transformer transformer;  try {    transformer=TransformerFactory.newInstance().newTransformer();  } catch (  TransformerConfigurationException e) {    throw new RuntimeException(e);  }catch (  TransformerFactoryConfigurationError e) {    throw new RuntimeException(e);  }  for (  Map.Entry<String,String> entry : outputProperties.entrySet()) {    String key=entry.getKey();    String value=entry.getValue();    transformer.setOutputProperty(key,value);  }  DOMSource source=new DOMSource(document);  StreamResult result=new StreamResult(writer);  transformer.transform(source,result);}  }
class C{  public void close() throws java.io.IOException {  m_os.close();}  }
class C{  public void halt(int code){  SecurityManager sm=System.getSecurityManager();  if (sm != null) {    sm.checkExit(code);  }  org.jikesrvm.VM.sysExit(code);}  }
class C{  void broadcast(Message message){  for (  GlowPlayer player : players) {    player.getSession().send(message);  }}  }
class C{  public XmlHandler(String xmlPath){  try {    xml=loadXml(xmlPath).atDevelopmentTime();  } catch (  Exception e) {    JmapperLog.ERROR(e);  }}  }
class C{  @SuppressWarnings("unused") private ProcessingItem createPi(Processor processor){  return createPi(processor,1);}  }
class C{  @Field(8) public int num_samples(){  return this.io.getIntField(this,8);}  }
class C{  public static void orderBestPatterns(ResultPoint[] patterns){  float zeroOneDistance=distance(patterns[0],patterns[1]);  float oneTwoDistance=distance(patterns[1],patterns[2]);  float zeroTwoDistance=distance(patterns[0],patterns[2]);  ResultPoint pointA;  ResultPoint pointB;  ResultPoint pointC;  if (oneTwoDistance >= zeroOneDistance && oneTwoDistance >= zeroTwoDistance) {    pointB=patterns[0];    pointA=patterns[1];    pointC=patterns[2];  } else   if (zeroTwoDistance >= oneTwoDistance && zeroTwoDistance >= zeroOneDistance) {    pointB=patterns[1];    pointA=patterns[0];    pointC=patterns[2];  } else {    pointB=patterns[2];    pointA=patterns[0];    pointC=patterns[1];  }  if (crossProductZ(pointA,pointB,pointC) < 0.0f) {    ResultPoint temp=pointA;    pointA=pointC;    pointC=temp;  }  patterns[0]=pointA;  patterns[1]=pointB;  patterns[2]=pointC;}  }
class C{  public void add(final DLItem item,final int index){  checkWidget();  if (item == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  if (index < 0 || index >= items.size()) {    SWT.error(SWT.ERROR_INVALID_ARGUMENT);  }  items.add(index,item);  redrawTables();}  }
class C{  private void newLoggingConfiguration(int[] indices){  if (indices == null || indices.length != 1) {    String msg=Localization.Main.getText("gui.logging.new.select");    JOptionPane.showMessageDialog(this,msg,"",JOptionPane.WARNING_MESSAGE);    return;  }  String loggingConfig=JOptionPane.showInputDialog(Localization.Main.getText("gui.logging.new.msg"));  if ("info".equalsIgnoreCase(loggingConfig)) {    return;  }  ConfigurationManager.copyCurrentProfile(loggingConfig);  loadLoggingConfigurations();}  }
class C{  public static void main(String... args) throws Exception {  TestUndoLogMemory.test(10,"null");  TestUndoLogMemory.test(100,"space(100000)");}  }
class C{  public int length(){  return (this.upper > this.lower) ? (this.upper - this.lower) : 0;}  }
class C{  public static void append(Path file,Reader reader) throws IOException {  append(file,reader,Charset.defaultCharset().name());}  }
class C{  public boolean isMinYSet(){  return isMinYSet(0);}  }
class C{  public void removeApps(List<AppInfo> apps){  mApps.removeApps(apps);}  }
class C{  public void intervalCreated(TimedElement e,Interval i){}  }
class C{  private void initPriceModelHistory(boolean isChargeable,PricingPeriod period){  pmHist=new PriceModelHistory();  PriceModelData dataContainer=pmHist.getDataContainer();  if (isChargeable) {    dataContainer.setType(PriceModelType.PRO_RATA);  } else {    dataContainer.setType(PriceModelType.FREE_OF_CHARGE);  }  dataContainer.setPeriod(period);}  }
class C{  protected OozieWorkflowJob runOozieWorkflowImpl(RunOozieWorkflowRequest request) throws Exception {  validateRunOozieWorkflowRequest(request);  String namespace=request.getNamespace();  String emrClusterDefinitionName=request.getEmrClusterDefinitionName();  String emrClusterName=request.getEmrClusterName();  String emrClusterId=request.getEmrClusterId();  String clusterId=getRunningOrWaitingEmrCluster(namespace,emrClusterDefinitionName,emrClusterName,emrClusterId);  String emrClusterPrivateIpAddress=getEmrClusterMasterIpAddress(clusterId);  String jobId=oozieDao.runOozieWorkflow(emrClusterPrivateIpAddress,request.getWorkflowLocation(),request.getParameters());  OozieWorkflowJob oozieWorkflowJob=new OozieWorkflowJob();  oozieWorkflowJob.setId(jobId);  oozieWorkflowJob.setNamespace(namespace);  oozieWorkflowJob.setEmrClusterDefinitionName(emrClusterDefinitionName);  oozieWorkflowJob.setEmrClusterName(emrClusterName);  return oozieWorkflowJob;}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (MEASURETYPE_Calculated.equals(getMeasureType()) && getPA_MeasureCalc_ID() == 0) {    log.saveError("FillMandatory",Msg.getElement(getCtx(),"PA_MeasureCalc_ID"));    return false;  } else   if (MEASURETYPE_Ratio.equals(getMeasureType()) && getPA_Ratio_ID() == 0) {    log.saveError("FillMandatory",Msg.getElement(getCtx(),"PA_Ratio_ID"));    return false;  } else   if (MEASURETYPE_UserDefined.equals(getMeasureType()) && (getCalculationClass() == null || getCalculationClass().length() == 0)) {    log.saveError("FillMandatory",Msg.getElement(getCtx(),"CalculationClass"));    return false;  } else   if (MEASURETYPE_Request.equals(getMeasureType()) && getR_RequestType_ID() == 0) {    log.saveError("FillMandatory",Msg.getElement(getCtx(),"R_RequestType_ID"));    return false;  } else   if (MEASURETYPE_Project.equals(getMeasureType()) && getC_ProjectType_ID() == 0) {    log.saveError("FillMandatory",Msg.getElement(getCtx(),"C_ProjectType_ID"));    return false;  }  return true;}  }
class C{  protected void addImportedDefinitions(Element imp,Node n){  if (n instanceof XBLOMDefinitionElement) {    XBLOMDefinitionElement def=(XBLOMDefinitionElement)n;    String ns=def.getElementNamespaceURI();    String ln=def.getElementLocalName();    addDefinition(ns,ln,def,imp);  } else {    n=n.getFirstChild();    while (n != null) {      addImportedDefinitions(imp,n);      n=n.getNextSibling();    }  }}  }
class C{  synchronized public void dropIndex(final String name){  assertUnisolatedInstance();  if (name == null)   throw new IllegalArgumentException();  if (log.isInfoEnabled())   log.info("name=" + name);  final byte[] key=getKey(name);  if (!super.contains(key)) {    throw new NoSuchIndexException("Not registered: " + name);  }  final ICommitter btree=indexCache.remove(name);  if (btree != null) {    commitList.remove(name);    ((ICheckpointProtocol)btree).setDirtyListener(null);  }  super.remove(key);  ResourceManager.dropUnisolatedIndex(name);}  }
class C{  public JSplitPane(int newOrientation,boolean newContinuousLayout){  this(newOrientation,newContinuousLayout,null,null);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.150 -0500",hash_original_method="9707416B5040BCEA07917ADCBF33DA70",hash_generated_method="BD36747DA6AC46D7BD2660400A684EF2") public CSeqHeader createCSeqHeader(long sequenceNumber,String method) throws ParseException, InvalidArgumentException {  if (sequenceNumber < 0)   throw new InvalidArgumentException("bad arg " + sequenceNumber);  if (method == null)   throw new NullPointerException("null arg method");  CSeq cseq=new CSeq();  cseq.setMethod(method);  cseq.setSeqNumber(sequenceNumber);  return cseq;}  }
class C{  public BlockGroup extractBlocksAsNewGroup(Block firstBlock){  BlockGroup newGroup=mWorkspaceHelper.getBlockViewFactory().buildBlockGroup();  newGroup.moveBlocksFrom(this,firstBlock);  return newGroup;}  }
class C{  private static String decodeFormFields(final String content,final String charset){  if (content == null) {    return null;  }  return urldecode(content,charset != null ? Charset.forName(charset) : Charset.forName(HTTP.UTF_8),true);}  }
class C{  public MemorySection(final IAddress start,final IAddress end){  memorySectionStartAddress=Preconditions.checkNotNull(start,"IE00753: Section start can not be null");  memorySectionEndAddress=Preconditions.checkNotNull(end,"IE00754: Section end can not be null");  Preconditions.checkArgument(end.toBigInteger().compareTo(start.toBigInteger()) != -1,"IE00755: Section end can not come before section start");}  }
class C{  public static DCCppMessage parseDCCppMessage(String s){  Matcher m;switch (s.charAt(0)) {case DCCppConstants.ACCESSORY_CMD:    if ((m=match(s,DCCppConstants.ACCESSORY_CMD_REGEX,"ctor")) != null) {      int addr=Integer.parseInt(m.group(1));      int sub=Integer.parseInt(m.group(2));      int v=(m.group(3).equals("0") ? 0 : 1);      return (DCCppMessage.makeAccessoryDecoderMsg(addr,sub,(v == 1)));    } else {      return (null);    }case DCCppConstants.CLEAR_EEPROM_CMD:  return (new DCCppMessage(DCCppConstants.CLEAR_EEPROM_CMD,DCCppConstants.CLEAR_EEPROM_REGEX));case DCCppConstants.FUNCTION_CMD:break;case DCCppConstants.GET_FREE_MEMORY:return (new DCCppMessage(DCCppConstants.GET_FREE_MEMORY,DCCppConstants.GET_FREE_MEMORY_REGEX));case DCCppConstants.LIST_REGISTER_CONTENTS:return (new DCCppMessage(DCCppConstants.LIST_REGISTER_CONTENTS,DCCppConstants.LIST_REGISTER_CONTENTS_REGEX));case DCCppConstants.OPS_WRITE_CV_BIT:if ((m=match(s,DCCppConstants.OPS_WRITE_BIT_REGEX,"ctor")) != null) {int addr=Integer.parseInt(m.group(1));int cv=Integer.parseInt(m.group(2));int bit=Integer.parseInt(m.group(3));int val=(m.group(4).equals("0") ? 0 : 1);return (DCCppMessage.makeBitWriteOpsModeCVMsg(addr,cv,bit,val));} else {return (null);}case DCCppConstants.OPS_WRITE_CV_BYTE:if ((m=match(s,DCCppConstants.OPS_WRITE_BYTE_REGEX,"ctor")) != null) {int addr=Integer.parseInt(m.group(1));int cv=Integer.parseInt(m.group(2));int val=Integer.parseInt(m.group(3));return (DCCppMessage.makeWriteOpsModeCVMsg(addr,cv,val));} else {return (null);}case DCCppConstants.PROG_READ_CV:if ((m=match(s,DCCppConstants.PROG_READ_REGEX,"ctor")) != null) {int cv=Integer.parseInt(m.group(1));int cb=Integer.parseInt(m.group(2));int cs=Integer.parseInt(m.group(3));return (DCCppMessage.makeReadDirectCVMsg(cv,cb,cs));} else {return (null);}case DCCppConstants.PROG_WRITE_CV_BIT:if ((m=match(s,DCCppConstants.PROG_WRITE_BIT_REGEX,"ctor")) != null) {int cv=Integer.parseInt(m.group(1));int bit=Integer.parseInt(m.group(2));int val=(m.group(3).equals("0") ? 0 : 1);int addr=Integer.parseInt(m.group(4));int sub=Integer.parseInt(m.group(5));return (DCCppMessage.makeBitWriteDirectCVMsg(cv,bit,val,addr,sub));} else {return (null);}case DCCppConstants.PROG_WRITE_CV_BYTE:if ((m=match(s,DCCppConstants.PROG_WRITE_BYTE_REGEX,"ctor")) != null) {int cv=Integer.parseInt(m.group(1));int val=Integer.parseInt(m.group(2));int addr=Integer.parseInt(m.group(3));int sub=Integer.parseInt(m.group(4));return (DCCppMessage.makeWriteDirectCVMsg(cv,val,addr,sub));} else {return (null);}case DCCppConstants.READ_CS_STATUS:return (new DCCppMessage(DCCppConstants.READ_CS_STATUS,DCCppConstants.READ_CS_STATUS_REGEX));case DCCppConstants.READ_TRACK_CURRENT:return (DCCppMessage.makeReadTrackCurrentMsg());case DCCppConstants.SENSOR_CMD:if ((m=match(s,DCCppConstants.SENSOR_ADD_REGEX,"ctor")) != null) {int id=Integer.parseInt(m.group(1));int pin=Integer.parseInt(m.group(2));int pullup=(m.group(4).equals("0") ? 0 : 1);return (DCCppMessage.makeSensorAddMsg(id,pin,pullup));} else if ((m=match(s,DCCppConstants.SENSOR_DELETE_REGEX,"ctor")) != null) {int id=Integer.parseInt(m.group(1));return (DCCppMessage.makeSensorDeleteMsg(id));} else if ((match(s,DCCppConstants.SENSOR_LIST_REGEX,"ctor")) != null) {return (new DCCppMessage(DCCppConstants.SENSOR_CMD,DCCppConstants.SENSOR_LIST_REGEX));} else {return (null);}case DCCppConstants.THROTTLE_CMD:if ((m=match(s,DCCppConstants.THROTTLE_CMD_REGEX,"ctor")) != null) {int reg=Integer.parseInt(m.group(1));int addr=Integer.parseInt(m.group(2));float speed=Float.parseFloat(m.group(3));int fwd=(m.group(4).equals("0") ? 0 : 1);return (DCCppMessage.makeSpeedAndDirectionMsg(reg,addr,speed,(fwd == 1)));} else {return (null);}case DCCppConstants.TRACK_POWER_OFF:return (DCCppMessage.makeTrackPowerOffMsg());case DCCppConstants.TRACK_POWER_ON:return (DCCppMessage.makeTrackPowerOnMsg());case DCCppConstants.TURNOUT_CMD:if ((m=match(s,DCCppConstants.TURNOUT_ADD_REGEX,"ctor")) != null) {int id=Integer.parseInt(m.group(1));int addr=Integer.parseInt(m.group(2));int sub=Integer.parseInt(m.group(3));return (DCCppMessage.makeTurnoutAddMsg(id,addr,sub));} else if ((m=match(s,DCCppConstants.TURNOUT_DELETE_REGEX,"ctor")) != null) {int id=Integer.parseInt(m.group(1));return (DCCppMessage.makeTurnoutDeleteMsg(id));} else if ((match(s,DCCppConstants.TURNOUT_LIST_REGEX,"ctor")) != null) {return (new DCCppMessage(DCCppConstants.TURNOUT_CMD,DCCppConstants.TURNOUT_LIST_REGEX));} else if ((m=match(s,DCCppConstants.TURNOUT_CMD_REGEX,"ctor")) != null) {int id=Integer.parseInt(m.group(1));int thrown=m.group(2).equals("0") ? 0 : 1;return (DCCppMessage.makeTurnoutCommandMsg(id,(thrown == 1)));} else {return (null);}case DCCppConstants.OUTPUT_CMD:if ((m=match(s,DCCppConstants.OUTPUT_CMD_REGEX,"ctor")) != null) {int id=Integer.parseInt(m.group(1));int state=m.group(2).equals("0") ? 0 : 1;return (DCCppMessage.makeOutputCmdMsg(id,(state == 1)));} else if ((m=match(s,DCCppConstants.OUTPUT_ADD_REGEX,"ctor")) != null) {int id=Integer.parseInt(m.group(1));int pin=Integer.parseInt(m.group(2));int iflag=Integer.parseInt(m.group(3));return (DCCppMessage.makeOutputAddMsg(id,pin,iflag));} else if ((m=match(s,DCCppConstants.OUTPUT_DELETE_REGEX,"ctor")) != null) {int id=Integer.parseInt(m.group(1));return (DCCppMessage.makeOutputDeleteMsg(id));} else if ((m=match(s,DCCppConstants.OUTPUT_LIST_REGEX,"ctor")) != null) {return (DCCppMessage.makeOutputListMsg());} else {return (null);}case DCCppConstants.WRITE_DCC_PACKET_MAIN:break;case DCCppConstants.WRITE_DCC_PACKET_PROG:break;case DCCppConstants.WRITE_TO_EEPROM_CMD:return (new DCCppMessage(DCCppConstants.WRITE_TO_EEPROM_CMD,DCCppConstants.WRITE_TO_EEPROM_REGEX));default :return (null);}return (null);}  }
class C{  public int executeUpdate(String sql) throws SQLException {  if (executeInternal(sql,fetchSize)) {    return 0;  }  return getUpdateCount();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:39.973 -0500",hash_original_method="399752AE3320783E8BC4077BF2BAABAB",hash_generated_method="DF7BFDCBE80F7E650B0690F79EA2CEC8") public Builder detectAll(){  return enable(ALL_THREAD_DETECT_BITS);}  }
class C{  private void mapNodes(SymProp symmetricProperties,int[] orbits,SymGraph symGraph,boolean main){  boolean allone=true;  int splitcolor=-1;  int lowestUnassignedMotifNode=Integer.MAX_VALUE;  outfor:   for (int i=0; i < symGraph.colorToTopMotifnode.size(); i++) {    List<Integer> listi=symGraph.colorToTopMotifnode.get(i);    int sizei=listi.size();    if (sizei != 1) {      allone=false;      for (      Integer motifNodeID : listi) {        if (motifNodeID < lowestUnassignedMotifNode) {          splitcolor=i;          lowestUnassignedMotifNode=motifNodeID;          continue outfor;        }      }    }  }  if (allone) {    int[] perm=new int[symGraph.motif.getNrMotifNodes()];    for (int j=0; j < perm.length; j++) {      int bottomcolor=symGraph.colorToBottomMotifnode.get(j).get(0);      int topcolor=symGraph.colorToTopMotifnode.get(j).get(0);      perm[topcolor]=bottomcolor;      mergeOrbits(bottomcolor,topcolor,orbits);    }    symmetricProperties.addPermutation(perm);    return;  }  List<Integer> topsplit=symGraph.colorToTopMotifnode.get(splitcolor);  int top=lowestUnassignedMotifNode;  List<Integer> bottomsplit=symGraph.colorToBottomMotifnode.get(splitcolor);  SymGraph newSymGraph=symGraph;  if (topsplit.size() != symGraph.motif.getNrMotifNodes() && topsplit.containsAll(bottomsplit)) {    int[] perm=new int[symGraph.motif.getNrMotifNodes()];    boolean identityPermutation=true;    for (int k=0; k < newSymGraph.colorToBottomMotifnode.size(); k++) {      List<Integer> bottomnodes=newSymGraph.colorToBottomMotifnode.get(k);      List<Integer> topnodes=newSymGraph.colorToTopMotifnode.get(k);      int bottomnode=bottomnodes.get(0);      int topnode=topnodes.get(0);      if (bottomnode != topnode) {        mergeOrbits(bottomnode,topnode,orbits);      }    }    int j=0;    start:     for (; j < newSymGraph.colorToBottomMotifnode.size(); j++) {      List<Integer> bottomnodes=newSymGraph.colorToBottomMotifnode.get(j);      List<Integer> topnodes=newSymGraph.colorToTopMotifnode.get(j);      if (bottomnodes.size() > 1) {        int b=bottomnodes.get(0);        int t=topnodes.get(0);        newSymGraph=newSymGraph.map(t,b,j);        if (newSymGraph.colorToBottomMotifnode.size() != symGraph.motif.getNrMotifNodes()) {          j=-1;          continue start;        } else {          break;        }      }    }    for (j=0; j < newSymGraph.colorToBottomMotifnode.size(); j++) {      List<Integer> bottomnodes=newSymGraph.colorToBottomMotifnode.get(j);      List<Integer> topnodes=newSymGraph.colorToTopMotifnode.get(j);      int bottomnode=bottomnodes.get(0);      int topnode=topnodes.get(0);      perm[topnode]=bottomnode;      if (bottomnode != topnode) {        identityPermutation=false;      }    }    if (!identityPermutation) {      symmetricProperties.addPermutation(perm);      return;    }  }  for (int j=0; j < bottomsplit.size(); j++) {    int m=bottomsplit.get(j);    if (orbits[top] != -1 && orbits[top] == orbits[m]) {      continue;    }    SymGraph symm=symGraph.map(top,m,splitcolor);    boolean nm=main && (m == top);    if (symm != null) {      mapNodes(symmetricProperties,orbits,symm,nm);    }  }  if (main) {    symmetricProperties.fix(top,orbits);  }}  }
class C{  public SortedStructSet(){}  }
class C{  private static String parseIdentifierEscape(String stmt,int offset){  StringBuilder sb=new StringBuilder();  loop:   for (++offset; offset < stmt.length(); ++offset) {    char c=stmt.charAt(offset);    if (c == '`') {      if (offset + 1 < stmt.length() && stmt.charAt(offset + 1) == '`') {        ++offset;        sb.append('`');      } else {        break loop;      }    } else {      sb.append(c);    }  }  return sb.toString();}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  protected List<PointFeature> clip(PointFeature v1,PointFeature v2,Vector2 n,double offset){  List<PointFeature> points=new ArrayList<PointFeature>(2);  Vector2 p1=v1.getPoint();  Vector2 p2=v2.getPoint();  double d1=n.dot(p1) - offset;  double d2=n.dot(p2) - offset;  if (d1 <= 0.0)   points.add(v1);  if (d2 <= 0.0)   points.add(v2);  if (d1 * d2 < 0.0) {    Vector2 e=p1.to(p2);    double u=d1 / (d1 - d2);    e.multiply(u);    e.add(p1);    if (d1 > 0.0) {      points.add(new PointFeature(e,v1.getIndex()));    } else {      points.add(new PointFeature(e,v2.getIndex()));    }  }  return points;}  }
class C{  public boolean canDealWith(String chosen){  if (!getItemNames().isEmpty()) {    return getItemNames().contains(chosen);  }  return true;}  }
class C{  public static boolean isUSB(String filepath){  for (  String s : knownSymLinks) {    if (filepath.startsWith(new File(s).getAbsolutePath()))     return true;  }  return false;}  }
class C{  @CheckReturnValue @CheckForNull static public String parenQuote(@CheckForNull String in){  if (in == null || in.equals("")) {    return in;  }  StringBuilder result=new StringBuilder();  int level=0;  for (int i=0; i < in.length(); i++) {    char c=in.charAt(i);switch (c) {case '(':      level++;    break;case '\\':  result.append('\\');break;case ')':level--;if (level < 0) {level=0;result.append('\\');}break;default :break;}result.append(c);}return new String(result);}  }
class C{  public String call() throws BackupException {  logger.info("Restore task starting...");  boolean completed=false;  try {    logger.info("Retrieving backup file: uri=" + uri);    BackupSpecification bspec=storageAgent.retrieve(uri);    logger.info("Restoring database from file: uri=" + uri);    backupAgent.restore(bspec);    completed=true;    logger.info("Restore completed successfully; uri=" + uri);  } catch (  InterruptedException e) {    logger.warn("Restore was cancelled");  }catch (  Exception e) {    String message="Restore operation failed: " + e.getMessage();    logger.error(message,e);    try {      eventDispatcher.put(new ErrorNotification(message,e));    } catch (    InterruptedException ie) {    }  } finally {  }  if (completed) {    logger.info("Restore task completed normally: uri=" + uri);    try {      eventDispatcher.put(new RestoreCompletionNotification(uri));    } catch (    InterruptedException ie) {      logger.warn("Restore task interrupted while posting completion event");    }    return uri.toString();  } else {    logger.warn("Restore task did not complete");    return null;  }}  }
class C{  public void clear(){  cache.clear();}  }
class C{  public static void copy(File source,File target,FilenameFilter filter,boolean replaceIfExists) throws IOException {  copy(source,target,filter,false,replaceIfExists);}  }
class C{  public final void readFloat(float[] pa,int start,int n) throws IOException {  for (int i=0; i < n; i++) {    pa[start + i]=Float.intBitsToFloat(readInt());  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:39.642 -0500",hash_original_method="83B613D0065469E827ECA0D8C3DB3A45",hash_generated_method="64828BC89FB466CB73C861F58DB54904") public static final boolean shouldLogSlowQuery(long elapsedTimeMillis){  int slowQueryMillis=SystemProperties.getInt("db.log.slow_query_threshold",-1);  return ((slowQueryMillis + elapsedTimeMillis + slowQueryMillis) == 1);}  }
class C{  public Shapefile(InputStream shpStream,InputStream shxStream,InputStream dbfStream,AVList params){  this(shpStream,shxStream,dbfStream,null,params);}  }
class C{  public void exec(Env env,Value... values){  invoke(env,values);}  }
class C{  protected void describeServiceEndpoints(){  for (  String uri : serviceURI) {    g.add(aService,SD.endpoint,g.getValueFactory().createURI(uri));  }}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  private Chunk profileView(View rootView,final View targetView){  ByteArrayOutputStream b=new ByteArrayOutputStream(32 * 1024);  BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(b),32 * 1024);  try {    ViewDebug.profileViewAndChildren(targetView,bw);  } catch (  IOException e) {    return createFailChunk(1,"Unexpected error while profiling view: " + e.getMessage());  } finally {    try {      bw.close();    } catch (    IOException e) {    }  }  byte[] data=b.toByteArray();  return new Chunk(CHUNK_VUOP,data,0,data.length);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("From " + request.getRemoteHost() + " - "+ request.getRemoteAddr());  HttpSession session=request.getSession(false);  WWindowStatus ws=WWindowStatus.get(request);  WebDoc doc=null;  if (session == null || ws == null) {    doc=WebDoc.createPopup("No Context");    doc.addPopupClose(ws.ctx);  } else {    m_error=null;    int AD_Attachment_ID=WebUtil.getParameterAsInt(request,P_Attachment_ID);    if (AD_Attachment_ID != 0) {      int attachmentIndex=WebUtil.getParameterAsInt(request,P_ATTACHMENT_INDEX);      if (attachmentIndex != 0) {        m_error=streamAttachment(AD_Attachment_ID,attachmentIndex,response,ws);        if (m_error == null)         return;      }    }    MAttachment attachment=null;    if (AD_Attachment_ID != 0)     attachment=new MAttachment(ws.ctx,ws.curTab.getAD_AttachmentID(),null); else     attachment=new MAttachment(ws.ctx,ws.curTab.getAD_Table_ID(),ws.curTab.getRecord_ID(),null);    doc=createPage(ws.ctx,attachment,m_error);  }  WebUtil.createResponse(request,response,this,null,doc,false);}  }
class C{  public static final void show(Window owner,Image icon,SandboxBody body,BodyFixture fixture){  EditFixtureDialog dialog=new EditFixtureDialog(owner,icon,fixture);  dialog.setLocationRelativeTo(owner);  dialog.setVisible(true);  if (!dialog.canceled) {    BodyFixture newFixture=dialog.fixture;    Convex convex=fixture.getShape();    Vector2 tx=dialog.pnlTransform.getTranslation();    double a=dialog.pnlTransform.getRotation();    if (!tx.isZero()) {      convex.translate(tx);    }    if (a != 0.0) {      convex.rotateAboutCenter(a);    }    fixture.setFilter(newFixture.getFilter());    fixture.setFriction(newFixture.getFriction());    fixture.setRestitution(newFixture.getRestitution());    fixture.setSensor(newFixture.isSensor());    fixture.setDensity(newFixture.getDensity());    if (!body.isMassExplicit()) {      body.updateMass();    }  }}  }
class C{  @Override public boolean isOpen(){  return (tlTx.get() != null);}  }
class C{  public InputStream fetchCifsServerInfo(final Argument argument,final Map<String,Object> keyMap,int index) throws VNXFilePluginException {  _logger.info("Creating CIFS Server info Query");  InputStream iStream=null;  try {    _logger.info("Creating CIFS Server info Query for Mover {} {} isVDM? {}",(String)keyMap.get(VNXFileConstants.MOVER_ID) + ":" + (String)keyMap.get(VNXFileConstants.DATAMOVER_NAME),keyMap.get(VNXFileConstants.ISVDM));    MoverOrVdmRef mover=new MoverOrVdmRef();    mover.setMover((String)keyMap.get(VNXFileConstants.MOVER_ID));    mover.setMoverIdIsVdm(Boolean.valueOf((String)keyMap.get(VNXFileConstants.ISVDM)));    CifsServerQueryParams cifsQuery=new CifsServerQueryParams();    cifsQuery.setMoverOrVdm(mover);    Query query=new Query();    query.getQueryRequestChoice().add(cifsQuery);    iStream=_vnxFileInputRequestBuilder.getQueryParamPacket(cifsQuery,false);  } catch (  JAXBException jaxbException) {    throw new VNXFilePluginException("Exception occurred while generating input xml for file export info",jaxbException.getCause());  }  return iStream;}  }
class C{  private static int convertSpanToSparseGrid(int curIx,int span,TreeSet<Integer> indexes){  int lastIx=curIx + span;  int retSpan=1;  for (  Integer ix : indexes) {    if (ix <= curIx) {      continue;    }    if (ix >= lastIx) {      break;    }    retSpan++;  }  return retSpan;}  }
class C{  @EventHandler(ignoreCancelled=true) public void onVehicleDamage(VehicleDamageEvent event){  if (event.getActor() instanceof Player && !canInteract((Player)event.getActor())) {    event.setCancelled(true);  }}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  int iRoomCapacity=-1;  ActionErrors errors=new ActionErrors();  if (nbrRooms != null && nbrRooms.intValue() < 0)   errors.add("nbrRooms",new ActionMessage("errors.generic",MSG.errorNumberOfRoomsNegative()));  if (roomRatio == null || roomRatio.floatValue() < 0.0f)   errors.add("nbrRooms",new ActionMessage("errors.generic",MSG.errorRoomRatioNegative()));  if (expectedCapacity == null || expectedCapacity.intValue() < 0)   errors.add("expectedCapacity",new ActionMessage("errors.generic",MSG.errorMinimumExpectedCapacityNegative()));  if (maxExpectedCapacity == null || maxExpectedCapacity.intValue() < 0)   errors.add("maxExpectedCapacity",new ActionMessage("errors.generic",MSG.errorMaximumExpectedCapacityNegative())); else   if (maxExpectedCapacity.intValue() < expectedCapacity.intValue())   errors.add("maxExpectedCapacity",new ActionMessage("errors.generic",MSG.errorMaximumExpectedCapacityLessThanMinimum()));  if (managingDept == null || managingDept.longValue() <= 0)   errors.add("managingDept",new ActionMessage("errors.generic",MSG.errorRequiredClassOwner()));  if (schedulePrintNote != null && schedulePrintNote.length() > 1999)   errors.add("notes",new ActionMessage("errors.generic",MSG.errorSchedulePrintNoteLongerThan1999()));  if (notes != null && notes.length() > 999)   errors.add("notes",new ActionMessage("errors.generic",MSG.errorNotesLongerThan999()));  if (instructors.size() > 0) {    if (!super.checkPrefs(instructors))     errors.add("instrPrefs",new ActionMessage("errors.generic",MSG.errorInvalidInstructorPreference()));  }  if (iRoomCapacity > 0) {    List rp=this.getRoomPrefs();    List rpl=this.getRoomPrefLevels();    for (int i=0; i < rpl.size(); i++) {      String pl=rpl.get(i).toString();      if (pl.trim().equalsIgnoreCase("1")) {        String roomId=rp.get(i).toString();        Location room=new LocationDAO().get(new Long(roomId));        int rCap=room.getCapacity().intValue();        if (rCap < iRoomCapacity) {          errors.add("roomPref",new ActionMessage("errors.generic",MSG.errorRequiredRoomTooSmall(room.getLabel(),rCap,iRoomCapacity)));        }      }    }  }  errors.add(super.validate(mapping,request));  return errors;}  }
class C{  protected boolean isMayCreateView(){  return mayCreateView;}  }
class C{  @Override public void handlePatch(Operation patch){  try {    State currentState=getState(patch);    State patchState=patch.getBody(State.class);    this.applyPatch(currentState,patchState);    this.validateState(currentState);    patch.complete();    if (patchState.shouldTriggerTasks == null || !patchState.shouldTriggerTasks) {      return;    }    triggerTasks(patch,currentState,patchState);  } catch (  Throwable e) {    ServiceUtils.logSevere(this,e);    if (!OperationUtils.isCompleted(patch)) {      patch.fail(e);    }  }}  }
class C{  public void attempUnjam(){  if (!laserSat.getJammed())   return;  laserSat.setJammed(false);  finished=false;  checkCanRun();}  }
class C{  public byte[] readRecord() throws IOException {  if (debug) {    System.err.println("ReadRecord: recIdx = " + currRecIdx + " blkIdx = "+ currBlkIdx);  }  if (inStream == null) {    throw new IOException("reading from an output buffer");  }  if (currRecIdx >= recsPerBlock) {    if (!readBlock()) {      return null;    }  }  byte[] result=new byte[recordSize];  System.arraycopy(blockBuffer,(currRecIdx * recordSize),result,0,recordSize);  currRecIdx++;  return result;}  }
class C{  public Zoomer(int viewportWidth,int viewportHeight,RadialBlur.Quality quality){  setup(viewportWidth,viewportHeight,new RadialBlur(quality));}  }
class C{  public synchronized boolean deleteEntry(String username,String submissionID){  NodeList list=entryRoot.getElementsByTagName("entry");  for (int i=0; i < list.getLength(); i++) {    Element entry=(Element)list.item(i);    if (entry.getAttribute("id").equals(submissionID)) {      if (!entry.getAttribute("username").equals(username))       return false;      entryRoot.removeChild(entry);      writeXMLFile();      return true;    }  }  return false;}  }
class C{  public void displayRingingNotification(){  NotificationCompat.Builder builder=new NotificationCompat.Builder(this);  builder.setWhen(System.currentTimeMillis());  builder.setContentTitle(Tools.APP_NAME);  builder.setContentText(getString(R.string.main_service_notification_stop_ringing));  builder.setSmallIcon(R.drawable.ring_0);  builder.setContentIntent(sPendingIntentStopRinging);  builder.setOngoing(true);  sNotificationManager.notify(NOTIFICATION_STOP_RINGING,builder.getNotification());}  }
class C{  static BufferedImage createCopy(BufferedImage image,int imageType,int alpha){  int w=image.getWidth();  int h=image.getHeight();  BufferedImage result=new BufferedImage(w,h,imageType);  int[] argb=new int[w * h];  image.getRGB(0,0,image.getWidth(),image.getHeight(),argb,0,image.getWidth());  if (alpha != 255) {    final int length=argb.length;    for (int i=0; i < length; i++) {      int a=(argb[i] >>> 24 * alpha) / 255;      argb[i]=(a << 24) | (argb[i] & 0x00FFFFFF);    }  }  result.setRGB(0,0,w,h,argb,0,w);  return result;}  }
class C{  public boolean inTransaction() throws ResourceException {  try {    return mc.getGDSHelper().inTransaction();  } catch (  SQLException ex) {    throw new FBResourceException(ex);  }}  }
class C{  public boolean isClosed(){  return isClosed;}  }
class C{  private boolean hasMatchingDo(){  Assert.isTrue(fToken == Symbols.TokenWHILE);  nextToken();switch (fToken) {case Symbols.TokenRBRACE:    skipScope();case Symbols.TokenSEMICOLON:  skipToStatementStart(false,false);return fToken == Symbols.TokenDO;}return false;}  }
class C{  private void readData(long absolutePosition,byte[] target,int length){  int bytesRead=0;  while (bytesRead < length) {    dropDownstreamTo(absolutePosition);    int positionInAllocation=(int)(absolutePosition - totalBytesDropped);    int toCopy=Math.min(length - bytesRead,allocationLength - positionInAllocation);    Allocation allocation=dataQueue.peek();    System.arraycopy(allocation.data,allocation.translateOffset(positionInAllocation),target,bytesRead,toCopy);    absolutePosition+=toCopy;    bytesRead+=toCopy;  }}  }
class C{  public static void assertPingFalse(String message,String expectedContent,URL pingURL,Logger errorLogger){  assertPing(message,expectedContent,pingURL,null,false,errorLogger);}  }
class C{  @Override protected void doPreRender(KMLTraversalContext tc,DrawContext dc){  if (this.getRenderable() == null)   this.initializeRenderable(tc);  KMLRenderable r=this.getRenderable();  if (r != null) {    r.preRender(tc,dc);  }}  }
class C{  public Iterable<Key> keysLevelOrder(){  Queue<Key> queue=new Queue<Key>();  if (!isEmpty()) {    Queue<Node> queue2=new Queue<Node>();    queue2.enqueue(root);    while (!queue2.isEmpty()) {      Node x=queue2.dequeue();      queue.enqueue(x.key);      if (x.left != null) {        queue2.enqueue(x.left);      }      if (x.right != null) {        queue2.enqueue(x.right);      }    }  }  return queue;}  }
class C{  public UserTokenPolicy findUserTokenPolicy(UserTokenType type){  if (UserIdentityTokens == null)   return null;  for (  UserTokenPolicy p : UserIdentityTokens) {    try {      String securityPolicyUri=p.getSecurityPolicyUri();      SecurityPolicy.getSecurityPolicy(securityPolicyUri);    } catch (    ServiceResultException e) {      continue;    }    if (p.getTokenType() != type)     continue;    return p;  }  return null;}  }
class C{  @Override public void exceptionCaught(ChannelHandlerContext ctx,Throwable cause){  if (cause instanceof IOException) {    channelInactive(ctx);    return;  }  ByteBuf response=getExceptionResponse(ctx,cause);  writeToChannel(response);}  }
class C{  void onAccessPointsUpdated(PreferenceScreen preferenceScreen,Collection<AccessPoint> accessPoints){  if (mProgressBar.isIndeterminate() && accessPoints.size() > 0) {    showDisconnectedProgressBar();    if (mScreenState == SCREEN_STATE_DISCONNECTED) {      mWifiSettingsFragmentLayout.setVisibility(View.VISIBLE);      mBottomPadding.setVisibility(View.GONE);    }    mAddNetworkButton.setEnabled(true);    mRefreshButton.setEnabled(true);  }  for (  AccessPoint accessPoint : accessPoints) {    accessPoint.setLayoutResource(R.layout.custom_preference);    preferenceScreen.addPreference(accessPoint);  }}  }
class C{  public boolean atEOF(){  return left() <= 0;}  }
class C{  public InlineQueryResultAudio.InlineQueryResultAudioBuilder performer(String performer){  this.performer=performer;  return this;}  }
class C{  public Collection<? extends Certificate> engineGenerateCertificates(InputStream inStream) throws CertificateException {  if (inStream == null) {    throw new CertificateException("inStream == null");  }  ArrayList<Certificate> result=new ArrayList<Certificate>();  try {    if (!inStream.markSupported()) {      inStream=new RestoringInputStream(inStream);    }    byte[] encoding=null;    int second_asn1_tag=-1;    inStream.mark(1);    int ch;    while ((ch=inStream.read()) != -1) {      if (ch == '-') {        encoding=decodePEM(inStream,FREE_BOUND_SUFFIX);      } else       if (ch == 0x30) {        encoding=null;        inStream.reset();        inStream.mark(CERT_CACHE_SEED_LENGTH);      } else {        if (result.size() == 0) {          throw new CertificateException("Unsupported encoding");        } else {          inStream.reset();          return result;        }      }      BerInputStream in=(encoding == null) ? new BerInputStream(inStream) : new BerInputStream(encoding);      second_asn1_tag=in.next();      if (encoding == null) {        inStream.reset();      }      if (second_asn1_tag != ASN1Constants.TAG_C_SEQUENCE) {        if (result.size() == 0) {          break;        } else {          return result;        }      } else {        if (encoding == null) {          result.add(getCertificate(inStream));        } else {          result.add(getCertificate(encoding));        }      }      inStream.mark(1);    }    if (result.size() != 0) {      return result;    } else     if (ch == -1) {      return result;    }    if (second_asn1_tag == ASN1Constants.TAG_OID) {      ContentInfo info=(ContentInfo)((encoding != null) ? ContentInfo.ASN1.decode(encoding) : ContentInfo.ASN1.decode(inStream));      SignedData data=info.getSignedData();      if (data == null) {        throw new CertificateException("Invalid PKCS7 data provided");      }      List<org.apache.harmony.security.x509.Certificate> certs=data.getCertificates();      if (certs != null) {        for (        org.apache.harmony.security.x509.Certificate cert : certs) {          result.add(new X509CertImpl(cert));        }      }      return result;    }    throw new CertificateException("Unsupported encoding");  } catch (  IOException e) {    throw new CertificateException(e);  }}  }
class C{  public void skipValue(){  int count=0;  do {    int p=peeked;    if (p == PEEKED_NONE) {      p=doPeek();    }    if (p == PEEKED_BEGIN_ARRAY) {      push(JsonScope.EMPTY_ARRAY);      count++;    } else     if (p == PEEKED_BEGIN_OBJECT) {      push(JsonScope.EMPTY_OBJECT);      count++;    } else     if (p == PEEKED_END_ARRAY || p == PEEKED_END_OBJECT) {      stackSize--;      count--;    } else     if (p == PEEKED_UNQUOTED_NAME || p == PEEKED_UNQUOTED) {      skipUnquotedValue();    } else     if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_SINGLE_QUOTED_NAME) {      skipQuotedValue('\'');    } else     if (p == PEEKED_DOUBLE_QUOTED || p == PEEKED_DOUBLE_QUOTED_NAME) {      skipQuotedValue('"');    } else     if (p == PEEKED_NUMBER) {      position+=peekedNumberLength;    }    peeked=PEEKED_NONE;  } while (count != 0);}  }
class C{  public boolean isLeftToRight(){  return textLine.isDirectionLTR();}  }
class C{  public void onVolumeChanged(int type,int value,int prevValue){  obtainMessage(MSG_VOLUME_CHANGED,value,prevValue,type).sendToTarget();}  }
class C{  public void release(int flags){synchronized (mToken) {    if (!mRefCounted || --mCount == 0) {      mHandler.removeCallbacks(mReleaser);      if (mHeld) {        try {          mService.releaseWakeLock(mToken,flags);        } catch (        RemoteException e) {        }        mHeld=false;      }    }    if (mCount < 0) {      throw new RuntimeException("WakeLock under-locked " + mTag);    }  }}  }
class C{  public SVGAElementBridge(){}  }
class C{  public static void checkRequestSignature(final byte[] serializedSpeechletRequest,final String baseEncoded64Signature,final String signingCertificateChainUrl){  if ((baseEncoded64Signature == null) || (signingCertificateChainUrl == null)) {    throw new SecurityException("Missing signature/certificate for the provided speechlet request");  }  try {    X509Certificate signingCertificate;    if (CERTIFICATE_CACHE.containsKey(signingCertificateChainUrl)) {      signingCertificate=CERTIFICATE_CACHE.get(signingCertificateChainUrl);      signingCertificate.checkValidity();    } else {      signingCertificate=retrieveAndVerifyCertificateChain(signingCertificateChainUrl);      CERTIFICATE_CACHE.put(signingCertificateChainUrl,signingCertificate);    }    Signature signature=Signature.getInstance(Sdk.SIGNATURE_ALGORITHM);    signature.initVerify(signingCertificate.getPublicKey());    signature.update(serializedSpeechletRequest);    if (!signature.verify(Base64.decodeBase64(baseEncoded64Signature.getBytes(Sdk.CHARACTER_ENCODING)))) {      throw new SecurityException("Failed to verify the signature/certificate for the provided speechlet request");    }  } catch (  CertificateException|SignatureException|NoSuchAlgorithmException|InvalidKeyException|IOException ex) {    throw new SecurityException("Failed to verify the signature/certificate for the provided speechlet request",ex);  }}  }
class C{  public void println(int x){  out.println(x);}  }
class C{  public Property year(){  return new Property(this,getChronology().year());}  }
class C{  public static ApiImplMapping of(Iterable<IN4JSProject> apiProjects,Iterable<IN4JSProject> implProjects){  return new ApiImplMapping().enhance(apiProjects,implProjects);}  }
class C{  public MetaClassRegistryChangeEvent(Object source,Object instance,Class clazz,MetaClass oldMetaClass,MetaClass newMetaClass){  super(source);  this.clazz=clazz;  this.metaClass=newMetaClass;  this.oldMetaClass=oldMetaClass;  this.instance=instance;}  }
class C{  public final void printTotalSecs(){  printSecs(totalCount);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:06.216 -0500",hash_original_method="9B1CCC3AB82A9C7B7A46C788921405FB",hash_generated_method="9EFBA24431943EE0CA752566A6372B65") public boolean isEmpty(){  return getTaintBoolean();}  }
class C{  public void cleanup(long time){  if (dndInProgress) {    if (dragProtocol != null) {      dragProtocol.sendLeaveMessage(time);    }    if (targetAction != DnDConstants.ACTION_NONE) {      dragExit(xRoot,yRoot);    }    dragDropFinished(false,DnDConstants.ACTION_NONE,xRoot,yRoot);  }  Iterator dragProtocols=XDragAndDropProtocols.getDragSourceProtocols();  while (dragProtocols.hasNext()) {    XDragSourceProtocol dragProtocol=(XDragSourceProtocol)dragProtocols.next();    try {      dragProtocol.cleanup();    } catch (    XException xe) {    }  }  dndInProgress=false;  dragInProgress=false;  dragRootWindow=0;  sourceFormats=null;  sourceActions=DnDConstants.ACTION_NONE;  sourceAction=DnDConstants.ACTION_NONE;  eventState=0;  xRoot=0;  yRoot=0;  cleanupTargetInfo();  removeDnDGrab(time);}  }
class C{  public void load(Element element,Object o){  Editor ed=(Editor)o;  LocoIcon l=new LocoIcon(ed);  String textName="error";  try {    textName=element.getAttribute("text").getValue();  } catch (  Exception e) {    log.error("failed to get loco text attribute ex= " + e);  }  String name="error";  NamedIcon icon;  try {    name=element.getAttribute("icon").getValue();  } catch (  Exception e) {    log.error("failed to get icon attribute ex= " + e);  }  if (name.equals("yes")) {    icon=loadIcon(l,"icon",element,"LocoIcon",ed);  } else {    icon=NamedIcon.getIconByName(name);    if (icon == null) {      icon=ed.loadFailed("LocoIcon",name);      if (icon == null) {        log.info("LocoIcon icon removed for url= " + name);        return;      }    }  }  l.updateIcon(icon);  try {    int x=element.getAttribute("dockX").getIntValue();    int y=element.getAttribute("dockY").getIntValue();    l.setDockingLocation(x,y);  } catch (  Exception e) {    log.warn("failed to get docking location= " + e);  }  String rosterId=null;  try {    rosterId=element.getAttribute("rosterentry").getValue();    RosterEntry entry=Roster.getDefault().entryFromTitle(rosterId);    l.setRosterEntry(entry);  } catch (  Exception e) {    log.debug("no roster entry for " + rosterId + ", ex= "+ e);  }  ed.putLocoIcon(l,textName);  loadCommonAttributes(l,Editor.MARKERS,element);  loadTextInfo(l,element);  l.init();}  }
class C{  public BusinessObjectFormatEntity createBusinessObjectFormatEntity(boolean includeAttributeDefinition){  BusinessObjectFormatEntity businessObjectFormatEntity=new BusinessObjectFormatEntity();  businessObjectFormatEntity.setBusinessObjectDefinition(businessObjectDefinitionDaoTestHelper.createBusinessObjectDefinition());  businessObjectFormatEntity.setDescription("test");  businessObjectFormatEntity.setFileType(fileTypeDaoTestHelper.createFileTypeEntity());  businessObjectFormatEntity.setBusinessObjectFormatVersion(0);  businessObjectFormatEntity.setLatestVersion(true);  businessObjectFormatEntity.setUsage("PRC");  businessObjectFormatEntity.setPartitionKey("testPartitionKey");  if (includeAttributeDefinition) {    List<BusinessObjectDataAttributeDefinitionEntity> attributeDefinitionEntities=new ArrayList<>();    businessObjectFormatEntity.setAttributeDefinitions(attributeDefinitionEntities);    BusinessObjectDataAttributeDefinitionEntity attributeDefinitionEntity=new BusinessObjectDataAttributeDefinitionEntity();    attributeDefinitionEntities.add(attributeDefinitionEntity);    attributeDefinitionEntity.setBusinessObjectFormat(businessObjectFormatEntity);    attributeDefinitionEntity.setName(AbstractDaoTest.ATTRIBUTE_NAME_1_MIXED_CASE);  }  return businessObjectFormatDao.saveAndRefresh(businessObjectFormatEntity);}  }
class C{  public static void send(InternalDistributedMember recipient,int processorId,DM dm,ReplyException re,boolean removed){  Assert.assertTrue(recipient != null,"RemoveBucketReplyMessage NULL recipient");  RemoveBucketReplyMessage m=new RemoveBucketReplyMessage(processorId,re,removed);  m.setRecipient(recipient);  dm.putOutgoing(m);}  }
class C{  private final int sendToOne(final MembershipManager mgr,InternalDistributedMember[] p_destinations,final DistributionMessage msg,long ackWaitThreshold,long ackSAThreshold) throws ConnectExceptions, NotSerializableException {  return sendToMany(mgr,p_destinations,msg,ackWaitThreshold,ackSAThreshold);}  }
class C{  public void depthFirst(Map<String,Object> options,Closure c){  boolean preorder=Boolean.valueOf(options.get("preorder").toString());  if (preorder)   callClosureForNode(c,this,1);  depthFirstRest(preorder,2,c);  if (!preorder)   callClosureForNode(c,this,1);}  }
class C{  @Deprecated public static double[] convertDistribution(double p[],int L,Instances iTemplate){  double y[]=new double[L];  int i=Utils.maxIndex(p);  double d[]=toDoubleArray(iTemplate.classAttribute().value(i),L);  for (int j=0; j < d.length; j++) {    if (d[j] > 0.0)     y[j]=1.0;  }  return y;}  }
class C{  public void init() throws MessagingException {  String mappingsURL=getInitParameter("mappings");  String datasourceName=mappingsURL.substring(5);  int pos=datasourceName.indexOf("/");  String tableName=datasourceName.substring(pos + 1);  datasourceName=datasourceName.substring(0,pos);  Connection conn=null;  if (getInitParameter("source_column") == null) {    throw new MailetException("source_column not specified for JDBCAlias");  }  if (getInitParameter("target_column") == null) {    throw new MailetException("target_column not specified for JDBCAlias");  }  try {    conn=datasource.getConnection();    DatabaseMetaData dbMetaData=conn.getMetaData();    if (!(theJDBCUtil.tableExists(dbMetaData,tableName))) {      String exceptionBuffer="Could not find table '" + tableName + "' in datasource '"+ datasourceName+ "'";      throw new MailetException(exceptionBuffer);    }    query="SELECT " + getInitParameter("target_column") + " FROM "+ tableName+ " WHERE "+ getInitParameter("source_column")+ " = ?";  } catch (  MailetException me) {    throw me;  }catch (  Exception e) {    throw new MessagingException("Error initializing JDBCAlias",e);  } finally {    theJDBCUtil.closeJDBCConnection(conn);  }}  }
class C{  protected Object[] parseTimingSpecifier() throws ParseException, IOException {  skipSpaces();  boolean escaped=false;  if (current == '\\') {    escaped=true;    current=reader.read();  }  Object[] ret=null;  if (current == '+' || (current == '-' && !escaped) || (current >= '0' && current <= '9')) {    float offset=parseOffset();    ret=new Object[]{new Integer(TIME_OFFSET),new Float(offset)};  } else   if (XMLUtilities.isXMLNameFirstCharacter((char)current)) {    ret=parseIDValue(escaped);  } else {    reportUnexpectedCharacterError(current);  }  return ret;}  }
class C{  public static void grantAdminRole(DataService mgr,PlatformUser user) throws NonUniqueBusinessKeyException {  grantRoles(mgr,user,UserRoleType.ORGANIZATION_ADMIN);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.AFTER_EVERY_EVENT___TIMER_1:    return TIMER_1_EDEFAULT == null ? timer_1 != null : !TIMER_1_EDEFAULT.equals(timer_1);}return super.eIsSet(featureID);}  }
class C{  public Boolean isInstallBootRequired(){  return installBootRequired;}  }
class C{  public static void putString(final String key,final String value){  final Editor editor=getOptimusPref().edit();  editor.putString(key,value).apply();}  }
class C{  public static int hashIntArray(int[] array){  int intHash=0;  for (int i=0; i < array.length && i < 4; i++) {    intHash+=array[i] << (8 * i);  }  return intHash & 0x7FFFFFFF;}  }
class C{  @Override @Deprecated public Condition duplicate(){  return this;}  }
class C{  @Override public String toString(){  String result="ExplicitTestsetResultProducer: ";  result+=getCompatibilityState();  if (m_Instances == null) {    result+=": <null Instances>";  } else {    result+=": " + Utils.backQuoteChars(m_Instances.relationName());  }  return result;}  }
class C{  public static void ensureFromTo(final int arrayLength,final int from,final int to){  if (from < 0)   throw new ArrayIndexOutOfBoundsException("Start index (" + from + ") is negative");  if (from > to)   throw new IllegalArgumentException("Start index (" + from + ") is greater than end index ("+ to+ ")");  if (to > arrayLength)   throw new ArrayIndexOutOfBoundsException("End index (" + to + ") is greater than array length ("+ arrayLength+ ")");}  }
class C{  private boolean dominates(BitSet bs1,BitSet bs2){  BitSet copy=new BitSet();  copy.or(bs2);  copy.andNot(bs1);  return copy.isEmpty();}  }
class C{  public StackTracePatternLayout(String conversionPattern){  super();  this.setPattern(conversionPattern);}  }
class C{  public boolean verify(Sha256Hash sigHash,ECDSASignature signature){  return ECKey.verify(sigHash.getBytes(),signature,getPubKey());}  }
class C{  public RemoteEtypeServiceImpl(final DtoEtypeService dtoEtypeService){  super(dtoEtypeService);}  }
class C{  public void displayForTeamB(int score){  TextView scoreView=(TextView)findViewById(R.id.team_b_score);  scoreView.setText(String.valueOf(score));}  }
class C{  public static OMRaster read(DataInputStream dis,LinkProperties propertiesBuffer) throws IOException {  OMRaster raster=null;  float lat=0;  float lon=0;  int x=0;  int y=0;  int w=0;  int h=0;  int length, i;  String url;  Debug.message("link","LinkRaster | Reading Raster graphic");  int renderType=dis.readByte();  int colorModel=dis.readByte();  if (Debug.debugging("link")) {    System.out.println("LinkRaster | Rendertype = " + renderType + ", colorModel = "+ colorModel);  }switch (renderType) {case RENDERTYPE_OFFSET:    lat=dis.readFloat();  lon=dis.readFloat();case RENDERTYPE_XY:x=dis.readInt();y=dis.readInt();break;case RENDERTYPE_LATLON:default :lat=dis.readFloat();lon=dis.readFloat();if (Debug.debugging("link")) {System.out.println("LinkRaster | Location: lat = " + lat + ", lon = "+ lon);}}if (colorModel != COLORMODEL_URL) {w=dis.readInt();h=dis.readInt();if (Debug.debugging("link")) {System.out.println("LinkRaster | Size: width = " + w + ", height = "+ h);}if (colorModel == COLORMODEL_INDEXED) {length=dis.readInt();byte[] bytes=new byte[length];if (Debug.debugging("link")) {System.out.println("LinkRaster | Reading " + length + " bytes.");}dis.readFully(bytes);if (Debug.debugging("link")) {System.out.println("LinkRaster | read bytes.");}length=dis.readInt();if (Debug.debugging("link")) {System.out.println("LinkRaster | " + length + " Colors.");}Color[] colorTable=new Color[length];for (i=0; i < length; i++) {int colorvalue=dis.readInt();colorTable[i]=ColorFactory.createColor(colorvalue,true);if (Debug.debugging("linkdetail")) {System.out.println("LinkRaster | Color " + i + " =  "+ colorTable[i]+ " from "+ Integer.toHexString(colorvalue));}}int trans=dis.readInt();if (Debug.debugging("link")) {System.out.println("LinkRaster | Transparency =  " + trans);}switch (renderType) {case RENDERTYPE_OFFSET:raster=new OMRaster(lat,lon,x,y,w,h,bytes,colorTable,trans);break;case RENDERTYPE_XY:raster=new OMRaster(x,y,w,h,bytes,colorTable,trans);break;case RENDERTYPE_LATLON:default :raster=new OMRaster(lat,lon,w,h,bytes,colorTable,trans);}} else {length=dis.readInt();int[] pix=new int[length];if (Debug.debugging("link")) {System.out.println("LinkRaster | Reading " + length + " pixels.");}for (i=0; i < length; i++) {pix[i]=dis.readInt();}switch (renderType) {case RENDERTYPE_OFFSET:raster=new OMRaster(lat,lon,x,y,w,h,pix);break;case RENDERTYPE_XY:raster=new OMRaster(x,y,w,h,pix);break;case RENDERTYPE_LATLON:default :raster=new OMRaster(lat,lon,w,h,pix);}}}LinkProperties properties=(LinkProperties)LinkProperties.read(dis,propertiesBuffer).clone();if (colorModel == COLORMODEL_URL) {url=properties.getProperty(LPC_LINKRASTERIMAGEURL);if (url != null) {switch (renderType) {case RENDERTYPE_OFFSET:raster=new OMRaster(lat,lon,x,y,new ImageIcon(url));break;case RENDERTYPE_XY:raster=new OMRaster(x,y,new ImageIcon(url));break;case RENDERTYPE_LATLON:default :raster=new OMRaster(lat,lon,new ImageIcon(url));}}}if (raster != null) {properties.setProperties(raster);raster.setRotationAngle((double)ProjMath.degToRad(PropUtils.floatFromProperties(properties,LPC_LINKROTATION,0.0f)));}return raster;}  }
class C{  public Element store(Object o){  SE8cSignalHead p=(SE8cSignalHead)o;  Element element=new Element("signalhead");  element.setAttribute("class",this.getClass().getName());  element.setAttribute("systemName",p.getSystemName());  element.addContent(new Element("systemName").addContent(p.getSystemName()));  storeCommon(p,element);  element.addContent(addTurnoutElement(p.getNumber()));  return element;}  }
class C{  public CUnhideChildrenAction(final JFrame parent,final ZyGraph graph,final ZyProximityNode<INaviViewNode> node){  super("Unhide All Children");  Preconditions.checkNotNull(parent,"IE00950: Parent argument can not be null");  Preconditions.checkNotNull(graph,"IE00951: Graph argument can't be null");  Preconditions.checkNotNull(node,"IE00952: Node argument can't be null");  m_parent=parent;  m_graph=graph;  m_node=node;}  }
class C{  private void link(ValueGraphVertex src,ValueGraphVertex target,int pos){  ValueGraphEdge e=new ValueGraphEdge(src,target);  src.addTarget(target,pos);  graph.addGraphEdge(e);}  }
class C{  public static InputStream toInputStream(CharSequence input){  return toInputStream(input,Charset.defaultCharset());}  }
class C{  public final void put(String message,int messageID){  m_stringToNumMap.put(message,messageID);  m_numToStringMap.put(messageID,message);}  }
class C{  protected void paintBackground(Graphics g,JMenuItem menuItem,Color bgColor){  if (WindowsMenuItemUI.isVistaPainting()) {    WindowsMenuItemUI.paintBackground(accessor,g,menuItem,bgColor);    return;  }  JMenu menu=(JMenu)menuItem;  ButtonModel model=menu.getModel();  if (WindowsLookAndFeel.isClassicWindows() || !menu.isTopLevelMenu() || (XPStyle.getXP() != null && (model.isArmed() || model.isSelected()))) {    super.paintBackground(g,menu,bgColor);    return;  }  Color oldColor=g.getColor();  int menuWidth=menu.getWidth();  int menuHeight=menu.getHeight();  UIDefaults table=UIManager.getLookAndFeelDefaults();  Color highlight=table.getColor("controlLtHighlight");  Color shadow=table.getColor("controlShadow");  g.setColor(menu.getBackground());  g.fillRect(0,0,menuWidth,menuHeight);  if (menu.isOpaque()) {    if (model.isArmed() || model.isSelected()) {      g.setColor(shadow);      g.drawLine(0,0,menuWidth - 1,0);      g.drawLine(0,0,0,menuHeight - 2);      g.setColor(highlight);      g.drawLine(menuWidth - 1,0,menuWidth - 1,menuHeight - 2);      g.drawLine(0,menuHeight - 2,menuWidth - 1,menuHeight - 2);    } else     if (model.isRollover() && model.isEnabled()) {      boolean otherMenuSelected=false;      MenuElement[] menus=((JMenuBar)menu.getParent()).getSubElements();      for (int i=0; i < menus.length; i++) {        if (((JMenuItem)menus[i]).isSelected()) {          otherMenuSelected=true;          break;        }      }      if (!otherMenuSelected) {        if (XPStyle.getXP() != null) {          g.setColor(selectionBackground);          g.fillRect(0,0,menuWidth,menuHeight);        } else {          g.setColor(highlight);          g.drawLine(0,0,menuWidth - 1,0);          g.drawLine(0,0,0,menuHeight - 2);          g.setColor(shadow);          g.drawLine(menuWidth - 1,0,menuWidth - 1,menuHeight - 2);          g.drawLine(0,menuHeight - 2,menuWidth - 1,menuHeight - 2);        }      }    }  }  g.setColor(oldColor);}  }
class C{  public boolean isExternalZoomEnabled(){  return mExternalZoomEnabled;}  }
class C{  @RequestMapping(value="/stub/admin/users/{userid}/uploadedproducts",method=RequestMethod.GET) public ResponseEntity<?> uploadedProducts(Principal principal,@RequestParam(value="offset",defaultValue="0") int start,@RequestParam(value="limit",defaultValue="") int count){  fr.gael.dhus.service.UserService userService=ApplicationContextProvider.getBean(fr.gael.dhus.service.UserService.class);  try {    User user=(User)((UsernamePasswordAuthenticationToken)principal).getPrincipal();    ArrayList<String> productsIdentifiers=new ArrayList<String>();    Set<String> products=userService.getUploadedProductsIdentifiers(user.getId());    if (products == null)     return new ResponseEntity<>(productsIdentifiers,HttpStatus.OK);    int i=0;    Iterator<String> iter=products.iterator();    while (products != null && iter.hasNext() && i < count) {      String product=iter.next();      if (i < start) {        i++;        continue;      }      i++;      if (product == null) {        break;      }      productsIdentifiers.add(product);    }    return new ResponseEntity<>(productsIdentifiers,HttpStatus.OK);  } catch (  org.springframework.security.access.AccessDeniedException e) {    e.printStackTrace();    return new ResponseEntity<>("{\"code\":\"unauthorized\"}",HttpStatus.FORBIDDEN);  }catch (  Exception e) {    e.printStackTrace();    return new ResponseEntity<>(e.getMessage(),HttpStatus.INTERNAL_SERVER_ERROR);  }}  }
class C{  void parseIgnoredSection() throws IOException {  int depth=1;  in.replace++;  while (true) {switch (ch) {case '<':      if ((ch=in.read()) == '!') {        if ((ch=in.read()) == '[') {          ch=in.read();          depth++;        }      }    break;case ']':  if ((ch=in.read()) == ']') {    if ((ch=in.read()) == '>') {      ch=in.read();      if (--depth == 0) {        in.replace--;        return;      }    }  }break;case -1:error("eof");in.replace--;return;default :ch=in.read();break;}}}  }
class C{  @Override public final ImmutableList<E> asList(){  return this;}  }
class C{  public MatteBorder(int top,int left,int bottom,int right,Color matteColor){  super(top,left,bottom,right);  this.color=matteColor;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void handleExportToJPEG(){  FileChooser chooser=new FileChooser();  chooser.setTitle("Export to JPEG");  ExtensionFilter filter=new FileChooser.ExtensionFilter("JPEG","jpg");  chooser.getExtensionFilters().add(filter);  File file=chooser.showSaveDialog(getScene().getWindow());  if (file != null) {    try {      ExportUtils.writeAsJPEG(this.chart,(int)getWidth(),(int)getHeight(),file);    } catch (    IOException ex) {    }  }}  }
class C{  @Override public void renderHead(IHeaderResponse response){  super.renderHead(response);  String jQueryString="";  if (firstLoad) {    jQueryString+="jQuery('#showOpenDocumentModal').trigger('click');";    firstLoad=false;  }  response.render(OnLoadHeaderItem.forScript(jQueryString));  if (bModel.getProject() != null) {    annotator.setModelObject(bModel);    annotator.setCollection("#" + bModel.getProject().getName() + "/");    annotator.bratInitRenderLater(response);  }}  }
class C{  public InputStream openConfig(String name) throws IOException {  return openResource(name);}  }
class C{  public void remove(OMGraphic omg){  EditableOMGraphic eomg=null;  for (  EditableOMGraphic eomgraphic : getEditables()) {    eomg=eomgraphic;    if (eomg.getGraphic() == omg) {      break;    }    eomg=null;  }  if (eomg != null) {    remove(eomg);    list.remove(omg);  }}  }
class C{  public static List<Point2D> intersection(final Shape s1,final Shape s2){  List<Point2D> intersections=new ArrayList<Point2D>(2);  Line2D[] lines1=shapeToLines(s1,false);  Line2D[] lines2=shapeToLines(s2,false);  for (  Line2D l1 : lines1) {    for (    Line2D l2 : lines2) {      Point2D intersection=intersection(l1,l2);      if (intersection != null) {        intersections.add(intersection);      }    }  }  return intersections;}  }
class C{  private static File createReserveDiskCacheDir(Context context){  File cacheDir=StorageUtils.getCacheDirectory(context,false);  File individualDir=new File(cacheDir,"uil-images");  if (individualDir.exists() || individualDir.mkdir()) {    cacheDir=individualDir;  }  return cacheDir;}  }
class C{  @Override public void actionPerformed(ActionEvent e){  if (e.getSource() == button) {    popup.show(panel);    return;  }  if (e.getSource() == popup) {    if (e.getActionCommand() == TreePopup.ACTION_CANCELED) {      popup.setVisible(false);      textfield.requestFocus();      return;    }    TreePath path=popup.getTree().getSelectionPath();    final Object comp=(path != null) ? path.getLastPathComponent() : null;    if (comp instanceof ClassNode) {      ClassNode sel=(path != null) ? (ClassNode)comp : null;      String newClass=(sel != null) ? sel.getClassName() : null;      if (newClass != null && newClass.length() > 0) {        if (option instanceof ClassListParameter) {          String val=textfield.getText();          if (val.equals(DynamicParameters.STRING_OPTIONAL) || val.startsWith(DynamicParameters.STRING_USE_DEFAULT)) {            val="";          }          val=(val.length() > 0) ? val + ClassListParameter.LIST_SEP + newClass : newClass;          textfield.setText(val);        } else {          textfield.setText(newClass);        }        popup.setVisible(false);        fireEditingStopped();        textfield.requestFocus();      }    }    return;  }  LoggingUtil.warning("Unrecognized action event in ClassListEditor: " + e);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void handleImage(RenderableImage image,Element imageElement,SVGGeneratorContext generatorContext){  imageElement.setAttributeNS(null,SVG_WIDTH_ATTRIBUTE,String.valueOf(image.getWidth()));  imageElement.setAttributeNS(null,SVG_HEIGHT_ATTRIBUTE,String.valueOf(image.getHeight()));  try {    handleHREF(image,imageElement,generatorContext);  } catch (  SVGGraphics2DIOException e) {    try {      generatorContext.errorHandler.handleError(e);    } catch (    SVGGraphics2DIOException io) {      throw new SVGGraphics2DRuntimeException(io);    }  }}  }
class C{  private void quadFullScreenVao(){  this.vao=glGenVertexArrays();  int vbo=glGenBuffers();  glBindVertexArray(vao);  glBindBuffer(GL_ARRAY_BUFFER,vbo);  ByteBuffer bb=BufferUtils.createByteBuffer(4 * 2 * 6);  FloatBuffer fv=bb.asFloatBuffer();  fv.put(-1.0f).put(-1.0f);  fv.put(1.0f).put(-1.0f);  fv.put(1.0f).put(1.0f);  fv.put(1.0f).put(1.0f);  fv.put(-1.0f).put(1.0f);  fv.put(-1.0f).put(-1.0f);  glBufferData(GL_ARRAY_BUFFER,bb,GL_STATIC_DRAW);  glEnableVertexAttribArray(0);  glVertexAttribPointer(0,2,GL_FLOAT,false,0,0L);  glBindBuffer(GL_ARRAY_BUFFER,0);  glBindVertexArray(0);}  }
class C{  @Override public synchronized void prepare() throws ReplicatorException, InterruptedException {  connectionManager=new SqlConnectionManager();  connectionManager.setConnectionSpec(connectionSpec);  connectionManager.setCsvSpec(csv);  connectionManager.setPrivileged(privileged);  connectionManager.setLogOperations(logOperations);  connectionManager.prepare();  commitSeqno=new SqlCommitSeqno(connectionManager,connectionSpec.getSchema(),connectionSpec.getTableType());  commitSeqno.setChannels(channels);  commitSeqno.configure();  commitSeqno.prepare();}  }
class C{  @Override public E put(Integer key,E value){  return put(key.intValue(),value);}  }
class C{  public QuotaBytesUsed(Long value){  this();  setValue(value);}  }
class C{  public URL fetchImage(String image){  try {    return new URL("http://" + this.credentials.host + this.credentials.app+ "/"+ image);  } catch (  Exception exception) {    this.exception=new SDKException(exception);    throw this.exception;  }}  }
class C{  private boolean validate(InputNode node,Class type) throws Exception {  while (true) {    InputNode next=node.getNext();    if (next == null) {      return true;    }    if (!key.validate(next)) {      return false;    }    if (!value.validate(next)) {      return false;    }  }}  }
class C{  private void startCore(LimeWireCore limeWireCore){  limeWireCore.getLifecycleManager().start();  GUIMediator.instance().coreInitialized();  GUIMediator.setSplashScreenString(I18n.tr("Loading Old Downloads..."));  limeWireCore.getDownloadManager().loadSavedDownloadsAndScheduleWriting();}  }
class C{  public void insertValue(Connection connection,Object[] keys,Object[] values){  runInsert(connection,insertSQL,keys,values);}  }
class C{  public Namespace(final NamespaceId id,final Account owner,final BlockHeight height){  this.id=id;  this.owner=owner;  this.height=height;}  }
class C{  public static <T extends Comparable<T>>boolean assertComparison(T actual,T expected){  boolean ret=false;  if ((expected == null) && (actual == null)) {    ret=true;  } else   if (expected != null) {    ret=expected.compareTo(actual) == 0;  }  return ret;}  }
class C{  public static RE convertAutomata(Automaton a) throws InterruptedException {  return RE.brzozowski(a);}  }
class C{  private void stopTracking(){  Log.d(TAG,"Stop tracking on session " + mSessionId);  mIsTracking=false;  mSessionId=RadioBeacon.SESSION_NOT_TRACKING;}  }
class C{  protected void doAboutToRun(IJobChangeEvent event){}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return zzCurrentPos >= s.offset + s.count;}  }
class C{  @Override public boolean containsValue(Object value){  if (value == null)   return containsNullValue();  IntEntry<VALUE> tab[]=table;  for (int i=0; i < tab.length; i++)   for (IntEntry<VALUE> e=tab[i]; e != null; e=e.next)   if (value.equals(e.value))   return true;  return false;}  }
class C{  public JsonParseException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  protected String instanceToMatlab(Instance inst){  StringBuffer result;  int i;  result=new StringBuffer();  for (i=0; i < inst.numAttributes(); i++) {    if (i > 0) {      result.append((m_UseTabs ? "\t" : " "));    }    result.append(m_Format.format(inst.value(i)));  }  return result.toString();}  }
class C{  public void testGpsMenu(){  EndToEndTestUtils.findMenuItem(trackListActivity.getString(R.string.menu_start_gps),true);  EndToEndTestUtils.waitTextToDisappear(trackListActivity.getString(R.string.menu_start_gps));  assertTrue(EndToEndTestUtils.findMenuItem(trackListActivity.getString(R.string.menu_stop_gps),false));  EndToEndTestUtils.findMenuItem(trackListActivity.getString(R.string.menu_stop_gps),true);  EndToEndTestUtils.waitTextToDisappear(trackListActivity.getString(R.string.menu_stop_gps));  assertTrue(EndToEndTestUtils.findMenuItem(trackListActivity.getString(R.string.menu_start_gps),false));}  }
class C{  public BufferedImage createCompatibleImage(int width,int height,int transparency){  return null;}  }
class C{  public FacebookConnect(IHttpRequestResponse message,String protocol,IBurpExtenderCallbacks callbacks){  super(message,protocol,callbacks);  super.setToken(findToken());  super.setProtocolflowID(analyseProtocol());  add(this,getProtocolflowID());}  }
class C{  private void shiftSegments(int fromIdx,int offset){  for (  Element element : elements) {    if (element.end.left > fromIdx) {      shiftSegment(element.start,fromIdx,offset);      shiftSegment(element.end,fromIdx,offset);      if (element.text != null) {        for (        Segment textSegment : element.text) {          shiftSegment(textSegment,fromIdx,offset);        }      }    }  }}  }
class C{  private JSONObject readObject() throws JSONException {  JSONObject result=new JSONObject();  int first=nextCleanInternal();  if (first == '}') {    return result;  } else   if (first != -1) {    pos--;  }  while (true) {    Object name=nextValue();    if (!(name instanceof String)) {      if (name == null) {        throw syntaxError("Names cannot be null");      } else {        throw syntaxError("Names must be strings, but " + name + " is of type "+ name.getClass().getName());      }    }    int separator=nextCleanInternal();    if (separator != ':' && separator != '=') {      throw syntaxError("Expected ':' after " + name);    }    if (pos < in.length() && in.charAt(pos) == '>') {      pos++;    }    result.put((String)name,nextValue());switch (nextCleanInternal()) {case '}':      return result;case ';':case ',':    continue;default :  throw syntaxError("Unterminated object");}}}  }
class C{  public TAnnotationStringArgument createTAnnotationStringArgument(){  TAnnotationStringArgumentImpl tAnnotationStringArgument=new TAnnotationStringArgumentImpl();  return tAnnotationStringArgument;}  }
class C{  public Note withDateTime(){  this.setDate(OffsetDateTime.now());  return this;}  }
class C{  public void migrateTo(DTMManager manager){}  }
class C{  public WorldWindowGLCanvas(){  super(Configuration.getRequiredGLCapabilities(),new BasicGLCapabilitiesChooser(),null);  try {    this.wwd=((WorldWindowGLDrawable)WorldWind.createConfigurationComponent(AVKey.WORLD_WINDOW_CLASS_NAME));    this.wwd.initDrawable(this);    this.wwd.addPropertyChangeListener(this);    this.wwd.initGpuResourceCache(WorldWindowImpl.createGpuResourceCache());    this.createView();    this.createDefaultInputHandler();    WorldWind.addPropertyChangeListener(WorldWind.SHUTDOWN_EVENT,this);    this.wwd.endInitialization();  } catch (  Exception e) {    String message=Logging.getMessage("Awt.WorldWindowGLSurface.UnabletoCreateWindow");    Logging.logger().severe(message);    throw new WWRuntimeException(message,e);  }}  }
class C{  public BasicGLCapabilitiesChooser(){}  }
class C{  private final void removeChannel(String channel){  channel=channel.toLowerCase();synchronized (_channels) {    _channels.remove(channel);  }}  }
class C{  public static Vector tokenizeString(String source,String separator){  if (separator.length() == 1) {    return tokenizeString(source,separator.charAt(0));  }  Vector tokenized=new Vector();  int len=source.length();  StringBuilder buf=new StringBuilder();  for (int iter=0; iter < len; iter++) {    char current=source.charAt(iter);    if (separator.indexOf(current) > -1) {      if (buf.length() > 0) {        tokenized.addElement(buf.toString());        buf=new StringBuilder();      }    } else {      buf.append(current);    }  }  if (buf.length() > 0) {    tokenized.addElement(buf.toString());  }  return tokenized;}  }
class C{  private void read(){  data.reset();  data.readByte();  data.readShortInt();  trunk=data.readInt();  logKey=data.readInt();}  }
class C{  public static <ENUM extends Enum<ENUM>>EnumSet<ENUM> enumsFromStrings(Class<ENUM> enumClass,List<String> elems){  return enumsFromStrings(enumClass,elems,false);}  }
class C{  public void testRandomStrings() throws Exception {  Analyzer a=new IrishAnalyzer();  checkRandomData(random(),a,1000 * RANDOM_MULTIPLIER);  a.close();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:51.966 -0500",hash_original_method="41854ED78018FCB86E06DA2ADE584B53",hash_generated_method="05174864F600E13245A5A7EDE7280700") public void reset(){synchronized (lock) {    count=0;  }}  }
class C{  public String modifyHeaderTipText(){  return "When selecting on nominal attributes, removes header references to " + "excluded values.";}  }
class C{  private void decodeTonesPhase(int chNum,boolean bandHasTones[]){  WavesData dst[]=ctx.channels[chNum].tonesInfo;  for (int sb=0; sb < ctx.wavesInfo.numToneBands; sb++) {    if (!bandHasTones[sb]) {      continue;    }    int wparam=dst[sb].startIndex;    for (int i=0; i < dst[sb].numWavs; i++) {      ctx.wavesInfo.waves[wparam + i].phaseIndex=br.read(5);    }  }}  }
class C{  private void startUp() throws Exception {  cachesLoc=(IgniteCache<Integer,Integer>[])Array.newInstance(IgniteCache.class,GRID_CNT);  cachesPartitioned=(IgniteCache<Integer,Integer>[])Array.newInstance(IgniteCache.class,GRID_CNT);  cachesColocated=(IgniteCache<Integer,Integer>[])Array.newInstance(IgniteCache.class,GRID_CNT);  cachesReplicated=(IgniteCache<Integer,Integer>[])Array.newInstance(IgniteCache.class,GRID_CNT);  for (int i=0; i < GRID_CNT; i++) {    Ignite ignite=startGrid(i);    if (i == 1) {      NearCacheConfiguration nearCfg=new NearCacheConfiguration();      ignite.createNearCache(CACHE_PARTITIONED,nearCfg);    }    if (i == 2)     ignite.cache(CACHE_PARTITIONED);    cachesLoc[i]=ignite.cache(CACHE_LOCAL);    cachesPartitioned[i]=ignite.cache(CACHE_PARTITIONED);    cachesColocated[i]=ignite.cache(CACHE_COLOCATED);    cachesReplicated[i]=ignite.cache(CACHE_REPLICATED);  }}  }
class C{  public static CharSet parseString(String s){  CharSet result=null;  if (expressionCache != null) {    result=expressionCache.get(s);  }  if (result == null) {    result=doParseString(s);    if (expressionCache == null) {      expressionCache=new Hashtable<>();    }    expressionCache.put(s,result);  }  result=(CharSet)(result.clone());  return result;}  }
class C{  protected void acceptEquals(T model){  requireNonNull(model);  if (importer != null) {    importer.add(Import.of(Objects.class));    importer.add(Import.of(Optional.class));  }  model.add(Method.of(EQUALS,boolean.class).set(Javadoc.of("Compares this object with the specified one for equality. " + "The other object must be of the same type and not null for " + "the method to return true.").add(PARAM.setValue("other").setText("The object to compare with.")).add(RETURN.setText("True if the objects are equal."))).public_().add(OVERRIDE).add(Field.of("other",Object.class)).add("return Optional.ofNullable(other)").call(null).add(tab() + ".filter(o -> getClass().equals(o.getClass()))").add(tab() + ".map(o -> (" + model.getName()+ ") o)").add(tab() + model.getFields().stream().map(null).collect(Collectors.joining(nl() + tab()))).add(tab() + ".isPresent();"));}  }
class C{  public void append(final StringBuffer buffer,final String fieldName,final short value){  appendFieldStart(buffer,fieldName);  appendDetail(buffer,fieldName,value);  appendFieldEnd(buffer,fieldName);}  }
class C{  public static double intersectRayLineSegment(double originX,double originY,double dirX,double dirY,double aX,double aY,double bX,double bY){  double v1X=originX - aX;  double v1Y=originY - aY;  double v2X=bX - aX;  double v2Y=bY - aY;  double invV23=1.0 / (v2Y * dirX - v2X * dirY);  double t1=(v2X * v1Y - v2Y * v1X) * invV23;  double t2=(v1Y * dirX - v1X * dirY) * invV23;  if (t1 >= 0.0 && t2 >= 0.0 && t2 <= 1.0)   return t1;  return -1.0;}  }
class C{  public int indexOf(String string){  return indexOf(string,0);}  }
class C{  protected void createShapes(DrawContext dc){  this.paths=new Path[3];  this.paths[0]=this.createPath(Arrays.asList(this.startPosition,this.endPosition));  Globe globe=dc.getGlobe();  Vec4 pA=globe.computePointFromPosition(this.startPosition);  Vec4 pB=globe.computePointFromPosition(this.endPosition);  Vec4 vBA=pA.subtract3(pB);  double verticalRatio=this.getVerticalLength();  double verticalLength=vBA.getLength3() * verticalRatio;  List<Position> positions=this.computeVerticalSegmentPositions(globe,pA,vBA,verticalLength);  this.paths[1]=createPath(positions);  positions=this.computeVerticalSegmentPositions(globe,pB,vBA,verticalLength);  this.paths[2]=createPath(positions);}  }
class C{  private void loadOrgAccessUser(ArrayList<OrgAccess> list){  PreparedStatement pstmt=null;  ResultSet rs=null;  String sql="SELECT * FROM AD_User_OrgAccess " + "WHERE AD_User_ID=? AND IsActive='Y'";  try {    pstmt=DB.prepareStatement(sql,get_TrxName());    pstmt.setInt(1,getAD_User_ID());    rs=pstmt.executeQuery();    while (rs.next()) {      MUserOrgAccess oa=new MUserOrgAccess(getCtx(),rs,get_TrxName());      loadOrgAccessAdd(list,new OrgAccess(oa.getAD_Client_ID(),oa.getAD_Org_ID(),oa.isReadOnly()));    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  } finally {    DB.close(rs,pstmt);  }}  }
class C{  public div addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:13.035 -0500",hash_original_method="8280AE4C517B666A0E69D98449480DDD",hash_generated_method="FC82C17F2238474BCA844E921F3F0511") private Socks4Message socksReadReply() throws IOException {  Socks4Message reply=new Socks4Message();  int bytesRead=0;  while (bytesRead < Socks4Message.REPLY_LENGTH) {    int count=getInputStream().read(reply.getBytes(),bytesRead,Socks4Message.REPLY_LENGTH - bytesRead);    if (count == -1) {      break;    }    bytesRead+=count;  }  if (Socks4Message.REPLY_LENGTH != bytesRead) {    throw new SocketException("Malformed reply from SOCKS server");  }  return reply;}  }
class C{  protected void readOptionalMeasures(ByteBuffer buffer){  if (buffer.hasRemaining() && (buffer.limit() - buffer.position()) >= (this.getNumberOfPoints() * 8)) {    this.mRange=ShapefileUtils.readDoubleArray(buffer,2);    this.mValues=ShapefileUtils.readDoubleArray(buffer,this.getNumberOfPoints());  }}  }
class C{  public InventoryRecord(Date d,MovementReason reason,LocationInfo location,String currentUser,List<InventoryLine> invlines){  m_dDate=d;  m_reason=reason;  m_locationOri=location;  m_invlines=invlines;  user=currentUser;}  }
class C{  public Data(final String name,final String code,final int numericCode,final String symbol,final String fractionSymbol,final int fractionsPerUnit,final Rounding rounding,final String formatString){  this(name,code,numericCode,symbol,fractionSymbol,fractionsPerUnit,rounding,formatString,new Currency());}  }
class C{  public MeetingProbabilitySet replicate(){  MeetingProbabilitySet replica=new MeetingProbabilitySet(this.maxSetSize,alpha);  for (  Map.Entry<Integer,Double> e : probs.entrySet()) {    replica.probs.put(e.getKey(),e.getValue().doubleValue());  }  replica.lastUpdateTime=this.lastUpdateTime;  return replica;}  }
class C{  private void lootmode(Player player,String lootmode){  Group group=SingletonRepository.getGroupManager().getGroup(player.getName());  if (group == null) {    player.sendPrivateText(NotificationType.ERROR,"You are not a member of a group.");    return;  }  group=SingletonRepository.getGroupManager().getGroup(player.getName());  if (!group.hasLeader(player.getName())) {    player.sendPrivateText(NotificationType.ERROR,"Only the group leader may change the lootmode.");    return;  }  if ((lootmode == null) || (!lootmode.equals("single") && !lootmode.equals("shared"))) {    player.sendPrivateText(NotificationType.ERROR,"Valid loot modes are \"single\" and \"shared\".");    return;  }  group.setLootmode(lootmode);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.STATE_MACHINE_DEFINITION___QUEUED_1:    return isQueued_1();case UmplePackage.STATE_MACHINE_DEFINITION___NAME_1:  return getName_1();case UmplePackage.STATE_MACHINE_DEFINITION___STATE_1:return getState_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean isVisible(){  return getTextComponent().isVisible();}  }
class C{  private void displayLocator(){  MLocator l=(MLocator)fLocator.getSelectedItem();  if (l == null)   return;  m_M_Locator_ID=l.getM_Locator_ID();  fWarehouseInfo.setText(l.getWarehouseName());  fX.setText(l.getX());  fY.setText(l.getY());  fZ.setText(l.getZ());  fValue.setText(l.getValue());  getWarehouseInfo(l.getM_Warehouse_ID());  int size=fWarehouse.getItemCount();  for (int i=0; i < size; i++) {    KeyNamePair pp=(KeyNamePair)fWarehouse.getItemAt(i);    if (pp.getKey() == l.getM_Warehouse_ID()) {      fWarehouse.setSelectedIndex(i);      continue;    }  }}  }
class C{  protected void diagnoseLineNumber(Expression expr){  ElemTemplateElement e=getElemFromExpression(expr);  System.err.println("   " + e.getSystemId() + " Line "+ e.getLineNumber());}  }
class C{  public String jsGet_name(){  return name;}  }
class C{  public static double[] read(String filename){  byte[] data=readByte(filename);  int N=data.length;  double[] d=new double[N / 2];  for (int i=0; i < N / 2; i++) {    d[i]=((short)(((data[2 * i + 1] & 0xFF) << 8) + (data[2 * i] & 0xFF))) / ((double)MAX_16_BIT);  }  return d;}  }
class C{  private static void writeCacheEntryEvent(BinaryRawWriterEx writer,CacheEntryEvent evt){  writer.writeObjectDetached(evt.getKey());  writer.writeObjectDetached(evt.getOldValue());  writer.writeObjectDetached(evt.getValue());}  }
class C{  public static String escape(String url) throws UnsupportedEncodingException {  return escape(url,"UTF-8");}  }
class C{  private void createTitlesForSearchForm(Composite searchComposite){  Label queryTextLabel=new Label(searchComposite,SWT.NONE);  queryTextLabel.setText(Messages.SearchView_9);  GridData queryTextLabelData=new GridData(SWT.BEGINNING,SWT.FILL,true,false);  queryTextLabelData.horizontalSpan=2;  queryTextLabel.setLayoutData(queryTextLabelData);  Label limitTextLabel=new Label(searchComposite,SWT.NONE);  limitTextLabel.setText(Messages.SearchView_10);  GridData limitTextLabelData=new GridData(SWT.BEGINNING,SWT.FILL,true,false);  limitTextLabelData.horizontalSpan=2;  limitTextLabel.setLayoutData(limitTextLabelData);}  }
class C{  public boolean isForeignKey(){  return (keyType == VPF_COLUMN_FOREIGN_KEY);}  }
class C{  public synchronized void showErrorDialog(String message,String content){  showErrorDialog(message,content,null);}  }
class C{  public boolean remove(String name,String value){  String[] tmp=vals.get(name);  if (tmp == null)   return false;  for (int i=0; i < tmp.length; i++) {    if (tmp[i].equals(value)) {      String[] tmp2=new String[tmp.length - 1];      if (tmp2.length == 0) {        tmp2=null;        remove(name);      } else {        System.arraycopy(tmp,0,tmp2,0,i);        System.arraycopy(tmp,i + 1,tmp2,i,tmp.length - i - 1);        set(name,tmp2);      }      return true;    }  }  return false;}  }
class C{  public static Color rgbf(double red,double green,double blue){  return rgbaf(red,green,blue,1F);}  }
class C{  public NioProcessor(Executor executor,SelectorProvider selectorProvider){  super(executor);  try {    if (selectorProvider == null) {      selector=Selector.open();    } else {      selector=selectorProvider.openSelector();    }  } catch (  IOException e) {    throw new RuntimeIoException("Failed to open a selector.",e);  }}  }
class C{  public void addContactMech(String contactMechPurposeTypeId,String contactMechId){  if (contactMechPurposeTypeId == null)   throw new IllegalArgumentException("You must specify a contactMechPurposeTypeId to add a ContactMech");  contactMechIdsMap.put(contactMechPurposeTypeId,contactMechId);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:40.080 -0500",hash_original_method="A3DAE9100E63CBDE8137FDA5BE5C7B6B",hash_generated_method="E0928F8D947374F2A6FB1E21C53181F2") public boolean requiresSatellite(){  return mRequiresSatellite;}  }
class C{  public C upperEndpoint(){  return upperBound.endpoint();}  }
class C{  public static void writeMutationMappingFile(File baseDir,SdfId referenceId) throws IOException {  if (referenceId != null) {    writeMappingFile(new File(baseDir,MUTATION_MAP_FILE),referenceId);  }}  }
class C{  public LeagueRound executeRound(LeagueRound round){  List<Match> matchesWithResult=FluentIterable.from(round.matches()).transform(null).toList();  return LeagueRound.create(round.id(),round.roundNumber(),matchesWithResult);}  }
class C{  public void draw(Canvas canvas){  final float threshold=1.0f / 256.0f;  if (mAlpha <= threshold)   return;  canvas.save(Canvas.MATRIX_SAVE_FLAG);  canvas.translate(mX,mY);  canvas.scale(mScaleX,mScaleY);  canvas.translate(-0.5f * getWidth(),-0.5f * getHeight());  mDrawable.setAlpha((int)Math.round(mAlpha * 255f));  mDrawable.draw(canvas);  canvas.restore();}  }
class C{  public FBXAException(int errorCode,Exception reason){  this(errorCode);  this.reason=reason;  initCause(reason);}  }
class C{  UserGen(AccountCache accountCache,Pattern domainPattern,String anonymousCowardName,ParameterizedString nameRewriteTmpl,Address serverAddress){  this.accountCache=accountCache;  this.domainPattern=domainPattern;  this.anonymousCowardName=anonymousCowardName;  this.nameRewriteTmpl=nameRewriteTmpl;  this.serverAddress=serverAddress;}  }
class C{  public void addFrame(String filename){  CCTexture2D tex=CCTextureCache.sharedTextureCache().addImage(filename);  CGRect rect=CGRect.make(0,0,0,0);  rect.size=tex.getContentSize();  CCSpriteFrame frame=CCSpriteFrame.frame(tex,rect,CGPoint.zero());  frames_.add(frame);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodevalue07.class,args);}  }
class C{  public AllocationResult allocateMemory(final LLVMAddress stackPointer,final long size,final int alignment){  assert size >= 0;  assert alignment != 0 && powerOfTo(alignment);  final long alignedAllocation=(stackPointer.getVal() - size) & -alignment;  LLVMAddress newStackPointer=LLVMAddress.fromLong(alignedAllocation);  if (newStackPointer.getVal() < lowerBounds) {    CompilerDirectives.transferToInterpreter();    throw new StackOverflowError("stack overflow");  }  final LLVMAddress allocatedMemory=LLVMAddress.fromLong(alignedAllocation);  return new AllocationResult(newStackPointer,allocatedMemory);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:34.272 -0500",hash_original_method="9121421793EC5D37F14A312213FF0274",hash_generated_method="0E38B803B5F7EA7FC3B7A952B8C48B78") public String toString(){  return this.encode();}  }
class C{  private Node variables(int context) throws IOException, ParserException {  Node pn;  boolean first=true;  if (context == Token.CONST) {    pn=nf.createVariables(Token.CONST,ts.getLineno());    decompiler.addToken(Token.CONST);  } else {    pn=nf.createVariables(Token.VAR,ts.getLineno());    decompiler.addToken(Token.VAR);  }  for (; ; ) {    Node name;    Node init;    mustMatchToken(Token.NAME,"msg.bad.var");    String s=ts.getString();    if (!first)     decompiler.addToken(Token.COMMA);    first=false;    decompiler.addName(s);    if (context == Token.CONST) {      if (!currentScriptOrFn.addConst(s)) {        if (currentScriptOrFn.addVar(s) != ScriptOrFnNode.DUPLICATE_CONST)         addError("msg.var.redecl",s); else         addError("msg.const.redecl",s);      }    } else {      int dupState=currentScriptOrFn.addVar(s);      if (dupState == ScriptOrFnNode.DUPLICATE_CONST)       addError("msg.const.redecl",s); else       if (dupState == ScriptOrFnNode.DUPLICATE_PARAMETER)       addStrictWarning("msg.var.hides.arg",s); else       if (dupState == ScriptOrFnNode.DUPLICATE_VAR)       addStrictWarning("msg.var.redecl",s);    }    name=nf.createName(s);    if (matchToken(Token.ASSIGN)) {      decompiler.addToken(Token.ASSIGN);      init=assignExpr(context == Token.FOR);      nf.addChildToBack(name,init);    }    nf.addChildToBack(pn,name);    if (!matchToken(Token.COMMA))     break;  }  return pn;}  }
class C{  public HistoryModule(){  addAbstractTypeMapping(Recordable.class,RecordableImpl.class);  addAbstractTypeMapping(HistoryEvent.class,HistoryEventImpl.class);}  }
class C{  public DeserializedSessionContainer deserializeSessionData(String id,byte[] data) throws IOException {  if (Arrays.equals(NULL_SESSION,data)) {    throw new IOException("Serialized session data was equal to NULL_SESSION");  }  CustomRequestSession customSession=null;  SessionSerializationMetadata metadata=null;  try {    metadata=new SessionSerializationMetadata();    customSession=(CustomRequestSession)createEmptySession();    serializer.deserializeSessionData(data,customSession,metadata);    customSession.setId(id);    customSession.setNew(false);    customSession.setMaxInactiveInterval((getContext().getSessionTimeout() * 60));    customSession.access();    customSession.setValid(true);    customSession.resetDirtyTracking();  } catch (  Exception e) {    log.error("Unable to deserialize into session",e);  }  return new DeserializedSessionContainer(customSession,metadata);}  }
class C{  protected PhaseSuite<HighTierContext> configGraphBuilderSuite(PhaseSuite<HighTierContext> suite,boolean shouldDebugNonSafepoints,boolean isOSR){  if (shouldDebugNonSafepoints || isOSR) {    PhaseSuite<HighTierContext> newGbs=suite.copy();    if (shouldDebugNonSafepoints) {      GraphBuilderPhase graphBuilderPhase=(GraphBuilderPhase)newGbs.findPhase(GraphBuilderPhase.class).previous();      GraphBuilderConfiguration graphBuilderConfig=graphBuilderPhase.getGraphBuilderConfig();      graphBuilderConfig=graphBuilderConfig.withNodeSourcePosition(true);      GraphBuilderPhase newGraphBuilderPhase=new GraphBuilderPhase(graphBuilderConfig);      newGbs.findPhase(GraphBuilderPhase.class).set(newGraphBuilderPhase);    }    if (isOSR) {      newGbs.appendPhase(new OnStackReplacementPhase());    }    return newGbs;  }  return suite;}  }
class C{  protected boolean addHash(Object entity,Hasher hasher){  EntityType entityType=getElementType(entity);  if (entityType == UNKNOWN) {    return false;  }  try {    hasher.putString(getJson(entity,entityType),Charset.defaultCharset());  } catch (  RuntimeException e) {    return false;  }  return true;}  }
class C{  public FriendlySwitchCompat(Context context){  this(context,null);}  }
class C{  @Override public String authenticate(InternalDistributedMember member,Properties credentials) throws AuthenticationFailedException {  return authenticate(member,credentials,this.securityProps);}  }
class C{  void flush(){  if (pageOut != null) {    flushOut();  }}  }
class C{  public OutlierResult run(Database database,Relation<O> relation){  return run(relation);}  }
class C{  public void testNesting07() throws Exception {  HtmlPage page=getPage("/faces/composite/nestingCompositeExpressionTreeCreation.xhtml");  List<HtmlSpan> spans=new ArrayList<HtmlSpan>(5);  getAllElementsOfGivenClass(page,spans,HtmlSpan.class);  assertEquals(5,spans.size());  final String[] expectedSpanValues={"PASSED","PASSED","PASSED","PASSED","FAILED"};  for (int i=0; i < expectedSpanValues.length; i++) {    assertEquals(expectedSpanValues[i],expectedSpanValues[i],spans.get(i).asText());  }  HtmlSubmitInput submit=(HtmlSubmitInput)getInputContainingGivenId(page,"form:submit");  assertNotNull(submit);  page=submit.click();  spans.clear();  getAllElementsOfGivenClass(page,spans,HtmlSpan.class);  assertEquals(5,spans.size());  for (int i=0; i < expectedSpanValues.length; i++) {    assertEquals(expectedSpanValues[i],expectedSpanValues[i],spans.get(i).asText());  }}  }
class C{  public void updateIsDelivered() throws SQLException {  String query="SELECT COUNT(*) FROM C_OrderLine WHERE C_Order_ID=? and QtyOrdered > QtyDelivered ";  PreparedStatement ps=DB.prepareStatement(query,get_TrxName());  ps.setInt(1,get_ID());  ResultSet rs=ps.executeQuery();  if (rs.next()) {    int delta=rs.getInt(1);    if (delta == 0) {      setIsDelivered(true);    } else {      setIsDelivered(false);    }  }  rs.close();  ps.close();}  }
class C{  @VisibleForTesting RequestGenerator createRequestGenerator(Context context){  return ((ChromeApplication)getApplicationContext()).createOmahaRequestGenerator();}  }
class C{  void syncUserWithLdap(PlatformUser pUser) throws ValidationException {  LdapConnector connector=getLdapConnectionForOrganization(pUser.getOrganization());  Properties dirProperties=connector.getDirProperties();  Map<SettingType,String> attrMap=connector.getAttrMap();  String baseDN=connector.getBaseDN();  List<SettingType> attrList=new ArrayList<>(attrMap.keySet());  ILdapResultMapper<VOUserDetails> mapper=new LdapVOUserDetailsMapper(null,attrMap);  try {    List<VOUserDetails> list=ldapAccess.search(dirProperties,baseDN,getLdapSearchFilter(attrMap,pUser.getUserId()),mapper,false);    if (list.size() > 0) {      UserDataAssembler.updatePlatformUser(list.get(0),attrList,pUser);    }  } catch (  NamingException e) {    SaaSSystemException se=new SaaSSystemException("The LDAP search for the user '" + pUser.getKey() + "' failed although the login succeeded.",e);    logger.logError(Log4jLogger.SYSTEM_LOG,se,LogMessageIdentifier.ERROR_LDAP_SEARCH_OF_USER_FAILED,Long.toString(pUser.getKey()));    throw se;  }}  }
class C{  public boolean unlockIt(){  log.info("unlockIt - " + toString());  setProcessing(false);  return true;}  }
class C{  @Override public boolean process(ContentEvent event){  ResultContentEvent inEvent=(ResultContentEvent)event;  double[] prediction=inEvent.getClassVotes();  int instanceIndex=(int)inEvent.getInstanceIndex();  addStatisticsForInstanceReceived(instanceIndex,inEvent.getClassifierIndex(),prediction,1);  addPredictions(instanceIndex,inEvent,prediction);  if (inEvent.isLastEvent() || hasAllVotesArrivedInstance(instanceIndex)) {    DoubleVector combinedVote=this.mapVotesforInstanceReceived.get(instanceIndex);    if (combinedVote == null) {      combinedVote=new DoubleVector();    }    ResultContentEvent outContentEvent=new ResultContentEvent(inEvent.getInstanceIndex(),inEvent.getInstance(),inEvent.getClassId(),combinedVote.getArrayCopy(),inEvent.isLastEvent());    outContentEvent.setEvaluationIndex(inEvent.getEvaluationIndex());    outputStream.put(outContentEvent);    clearStatisticsInstance(instanceIndex);    computeBoosting(inEvent,instanceIndex);    return true;  }  return false;}  }
class C{  public boolean addListener(ListenerIndex index,DProtocolNotifierIF n){synchronized (m_listeners) {    m_listeners.put(index,n);  }  return true;}  }
class C{  @KnownFailure("not supported") public void testUpdate2() throws SQLException {  DatabaseCreator.fillFKStrictTable(conn);  try {    statement.executeUpdate("UPDATE " + DatabaseCreator.PARENT_TABLE + " SET id = 5 WHERE id = 1;");    fail("expecting SQLException");  } catch (  SQLException ex) {  }}  }
class C{  @Timed @ExceptionMetered @GET @Path("{name}/groups") @Produces(APPLICATION_JSON) public Iterable<String> secretGroupsListing(@Auth AutomationClient automationClient,@PathParam("name") String name){  Secret secret=secretController.getSecretByName(name).orElseThrow(null);  return aclDAO.getGroupsFor(secret).stream().map(null).collect(toSet());}  }
class C{  static PolicyNodeImpl processPolicies(int certIndex,Set<String> initPolicies,int explicitPolicy,int policyMapping,int inhibitAnyPolicy,boolean rejectPolicyQualifiers,PolicyNodeImpl origRootNode,X509CertImpl currCert,boolean finalCert) throws CertPathValidatorException {  boolean policiesCritical=false;  List<PolicyInformation> policyInfo;  PolicyNodeImpl rootNode=null;  Set<PolicyQualifierInfo> anyQuals=new HashSet<>();  if (origRootNode == null)   rootNode=null; else   rootNode=origRootNode.copyTree();  CertificatePoliciesExtension currCertPolicies=currCert.getCertificatePoliciesExtension();  if ((currCertPolicies != null) && (rootNode != null)) {    policiesCritical=currCertPolicies.isCritical();    if (debug != null)     debug.println("PolicyChecker.processPolicies() " + "policiesCritical = " + policiesCritical);    try {      policyInfo=currCertPolicies.get(CertificatePoliciesExtension.POLICIES);    } catch (    IOException ioe) {      throw new CertPathValidatorException("Exception while " + "retrieving policyOIDs",ioe);    }    if (debug != null)     debug.println("PolicyChecker.processPolicies() " + "rejectPolicyQualifiers = " + rejectPolicyQualifiers);    boolean foundAnyPolicy=false;    for (    PolicyInformation curPolInfo : policyInfo) {      String curPolicy=curPolInfo.getPolicyIdentifier().getIdentifier().toString();      if (curPolicy.equals(ANY_POLICY)) {        foundAnyPolicy=true;        anyQuals=curPolInfo.getPolicyQualifiers();      } else {        if (debug != null)         debug.println("PolicyChecker.processPolicies() " + "processing policy: " + curPolicy);        Set<PolicyQualifierInfo> pQuals=curPolInfo.getPolicyQualifiers();        if (!pQuals.isEmpty() && rejectPolicyQualifiers && policiesCritical) {          throw new CertPathValidatorException("critical policy qualifiers present in certificate",null,null,-1,PKIXReason.INVALID_POLICY);        }        boolean foundMatch=processParents(certIndex,policiesCritical,rejectPolicyQualifiers,rootNode,curPolicy,pQuals,false);        if (!foundMatch) {          processParents(certIndex,policiesCritical,rejectPolicyQualifiers,rootNode,curPolicy,pQuals,true);        }      }    }    if (foundAnyPolicy) {      if ((inhibitAnyPolicy > 0) || (!finalCert && X509CertImpl.isSelfIssued(currCert))) {        if (debug != null) {          debug.println("PolicyChecker.processPolicies() " + "processing policy: " + ANY_POLICY);        }        processParents(certIndex,policiesCritical,rejectPolicyQualifiers,rootNode,ANY_POLICY,anyQuals,true);      }    }    rootNode.prune(certIndex);    if (!rootNode.getChildren().hasNext()) {      rootNode=null;    }  } else   if (currCertPolicies == null) {    if (debug != null)     debug.println("PolicyChecker.processPolicies() " + "no policies present in cert");    rootNode=null;  }  if (rootNode != null) {    if (!finalCert) {      rootNode=processPolicyMappings(currCert,certIndex,policyMapping,rootNode,policiesCritical,anyQuals);    }  }  if ((rootNode != null) && (!initPolicies.contains(ANY_POLICY)) && (currCertPolicies != null)) {    rootNode=removeInvalidNodes(rootNode,certIndex,initPolicies,currCertPolicies);    if ((rootNode != null) && finalCert) {      rootNode=rewriteLeafNodes(certIndex,initPolicies,rootNode);    }  }  if (finalCert) {    explicitPolicy=mergeExplicitPolicy(explicitPolicy,currCert,finalCert);  }  if ((explicitPolicy == 0) && (rootNode == null)) {    throw new CertPathValidatorException("non-null policy tree required and policy tree is null",null,null,-1,PKIXReason.INVALID_POLICY);  }  return rootNode;}  }
class C{  public ByteColumn(){  this(0,10,(byte)0);}  }
class C{  public static RemoveImageParams create(@NotNull String image){  return new RemoveImageParams().withImage(image);}  }
class C{  public static byte[] parseBssid2bytes(String bssid){  String bssidSplits[]=bssid.split(":");  byte[] result=new byte[bssidSplits.length];  for (int i=0; i < bssidSplits.length; i++) {    result[i]=(byte)Integer.parseInt(bssidSplits[i],16);  }  return result;}  }
class C{  private void resolveResultingIndependenciesC(){  List<SepsetMapDci> allSepsets=new ArrayList<>();  Pc fci=new Pc(new IndTestSepset(combineSepsets(sepsetMaps),variables));  System.out.println("Starting pc...");  SepsetMapDci consSepset=new SepsetMapDci();  Graph fciResult=fci.search();  SepsetMap fciSepset=fci.getSepsets();  for (int k=0; k < marginalVars.size(); k++) {    SepsetMapDci newSepset=new SepsetMapDci(sepsetMaps.get(k));    List<NodePair> pairs=allNodePairs(new ArrayList<>(marginalVars.get(k)));    int p=1;    for (    NodePair pair : pairs) {      Node x=pair.getFirst();      Node y=pair.getSecond();      if (fciSepset.get(x,y) == null) {        continue;      }      List<Node> set=fciSepset.get(x,y);      List<Node> currentset=new ArrayList<>();      if (newSepset.get(x,y) != null) {        currentset.addAll(newSepset.get(x,y));      }      int c=1;      for (      Node node : set) {        System.out.println("Resolving inconsistencies... " + c + " of "+ set.size()+ " ("+ p+ " of "+ pairs.size()+ " pairs and )"+ (k + 1)+ " of "+ marginalVars.size()+ " datasets)");        if (currentset.contains(node)) {          continue;        }        List<Node> possibleCond=new ArrayList<>(set);        possibleCond.remove(node);        PowerSet<Node> pset=new PowerSet<>(possibleCond);        for (        Set<Node> inpset : pset) {          List<Node> cond=new ArrayList<>(inpset);          cond.add(node);          if (fciResult.isDSeparatedFrom(x,y,cond)) {            newSepset.set(x,y,cond);          }        }      }    }    allSepsets.add(newSepset);  }  sepsetMaps=allSepsets;  System.out.println(sepsetMaps);}  }
class C{  public void defaultMutate(EvolutionState state,int thread){  IntegerVectorSpecies s=(IntegerVectorSpecies)species;  for (int x=0; x < genome.length; x++)   if (state.random[thread].nextBoolean(s.mutationProbability(x))) {    short old=genome[x];    for (int retries=0; retries < s.duplicateRetries(x) + 1; retries++) {switch (s.mutationType(x)) {case IntegerVectorSpecies.C_RESET_MUTATION:        genome[x]=(short)randomValueFromClosedInterval((short)s.minGene(x),(short)s.maxGene(x),state.random[thread]);      break;case IntegerVectorSpecies.C_RANDOM_WALK_MUTATION:    int min=(int)s.minGene(x);  int max=(int)s.maxGene(x);if (!s.mutationIsBounded(x)) {  max=Short.MAX_VALUE;  min=Short.MIN_VALUE;}do {int n=(int)(state.random[thread].nextBoolean() ? 1 : -1);int g=genome[x];if ((n == 1 && g < max) || (n == -1 && g > min)) genome[x]=(short)(g + n); else if ((n == -1 && g < max) || (n == 1 && g > min)) genome[x]=(short)(g - n);} while (state.random[thread].nextBoolean(s.randomWalkProbability(x)));break;default :state.output.fatal("In ShortVectorIndividual.defaultMutate, default case occurred when it shouldn't have");break;}if (genome[x] != old) break;}}}  }
class C{  public Object[] toArray(){  ArrayList<E> al=new ArrayList<E>();  for (Node<E> p=first(); p != null; p=succ(p)) {    E item=p.item;    if (item != null)     al.add(item);  }  return al.toArray();}  }
class C{  public void addCellEditorListener(CellEditorListener l){  listenerList.add(CellEditorListener.class,l);}  }
class C{  @Override public int locations(){  if (m_bHasNoDualTurret) {    return m_bHasNoTurret ? 5 : 6;  }  return 7;}  }
class C{  @Nullable public static Point2D.Double intersect(double xa,double ya,double xb,double yb,double xc,double yc,double xd,double yd){  double denom=((xb - xa) * (yd - yc) - (yb - ya) * (xd - xc));  double rnum=((ya - yc) * (xd - xc) - (xa - xc) * (yd - yc));  if (denom == 0.0) {    if (rnum == 0.0) {      if ((xa < xb && (xb < xc || xb < xd)) || (xa > xb && (xb > xc || xb > xd))) {        return new Point2D.Double(xb,yb);      } else {        return new Point2D.Double(xa,ya);      }    } else {      return null;    }  }  double r=rnum / denom;  double snum=((ya - yc) * (xb - xa) - (xa - xc) * (yb - ya));  double s=snum / denom;  if (0.0 <= r && r <= 1.0 && 0.0 <= s && s <= 1.0) {    double px=xa + (xb - xa) * r;    double py=ya + (yb - ya) * r;    return new Point2D.Double(px,py);  } else {    return null;  }}  }
class C{  public ST createSingleton(Token templateToken){  String template;  if (templateToken.getType() == GroupParser.BIGSTRING || templateToken.getType() == GroupParser.BIGSTRING_NO_NL) {    template=Misc.strip(templateToken.getText(),2);  } else {    template=Misc.strip(templateToken.getText(),1);  }  CompiledST impl=compile(getFileName(),null,null,template,templateToken);  ST st=createStringTemplateInternally(impl);  st.groupThatCreatedThisInstance=this;  st.impl.hasFormalArgs=false;  st.impl.name=ST.UNKNOWN_NAME;  st.impl.defineImplicitlyDefinedTemplates(this);  return st;}  }
class C{  public static MessageDialog newInstance(int icon,String title,String message){  return newInstance(icon,title,message,null);}  }
class C{  public static void startEndCallSound(Context context){  Log.d(LOG_TAG,"startEndCallSound");  mCallEndTone=getRingTone(context,R.raw.callend,"callend.ogg");  if (null != mCallEndTone) {    if (null != mRingTone) {      mRingTone.stop();      mRingTone=null;    }    if (null != mRingbackTone) {      mRingbackTone.stop();      mRingbackTone=null;    }    MXCallsManager.setSpeakerphoneOn(context,true);    mCallEndTone.play();    return;  }  if (null == mCallEndPlayer) {    mCallEndPlayer=MediaPlayer.create(context.getApplicationContext(),R.raw.callend);    mCallEndPlayer.setLooping(false);    mCallEndPlayer.setVolume(1.0f,1.0f);  }  if ((null != mCallEndPlayer) && !mCallEndPlayer.isPlaying()) {    MXCallsManager.setSpeakerphoneOn(context,true);    mCallEndPlayer.start();  }  stopRinging();}  }
class C{  private void takeMobilityTraceStep(){  ProximitySimulation proxSim=(ProximitySimulation)sim;  if (nextStep != null) {    proxSim.setObjectLatLonLocation(this,nextStep);    nextStepIndex++;    if (nextStepIndex < mobilityTrace.locations.size()) {      nextStep=mobilityTrace.locations.get(nextStepIndex);    } else {      nextStep=null;    }  }}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.advanceLinePaint,stream);  SerialUtilities.writeStroke(this.advanceLineStroke,stream);}  }
class C{  public static String convertHtmlToString(String html){  if (html == null) {    return null;  }  if (html.length() == 0) {    return html;  }  if (html.indexOf('&') < 0) {    return html;  }  StringBuilder buff=new StringBuilder();  for (int i=0; i < html.length(); i++) {    char ch=html.charAt(i);    if (ch != '&') {      buff.append(ch);      continue;    }    int idx=html.indexOf(';',i + 1);    if (idx < 0) {      buff.append("???");      continue;    }    String key=html.substring(i + 1,idx);    Character repl;    if (key.startsWith("#")) {      if (key.startsWith("#x")) {        try {          int code=Integer.parseInt(key.substring(2),16);          if (code < 0 || code > 0xffff) {            repl=null;          } else {            repl=Character.valueOf((char)code);          }        } catch (        NumberFormatException e) {          repl=null;        }      } else {        try {          int code=Integer.parseInt(key.substring(1));          if (code < 0 || code > 0xffff) {            repl=null;          } else {            repl=Character.valueOf((char)code);          }        } catch (        NumberFormatException e) {          repl=null;        }      }    } else {      repl=CHAR_MAP.get(key);    }    if (repl == null) {      buff.append("???" + key + "???");      continue;    }    buff.append(repl.charValue());    i=idx;  }  return buff.toString();}  }
class C{  private static void load(DataInputStream dis) throws ClassNotFoundException, IOException {  if (dis.readByte() != 1) {    throw new StreamCorruptedException("File format not recognised");  }  String groupId=dis.readUTF();  if ("TZDB".equals(groupId) == false) {    throw new StreamCorruptedException("File format not recognised");  }  int versionCount=dis.readShort();  for (int i=0; i < versionCount; i++) {    versionId=dis.readUTF();  }  int regionCount=dis.readShort();  String[] regionArray=new String[regionCount];  for (int i=0; i < regionCount; i++) {    regionArray[i]=dis.readUTF();  }  int ruleCount=dis.readShort();  ruleArray=new byte[ruleCount][];  for (int i=0; i < ruleCount; i++) {    byte[] bytes=new byte[dis.readShort()];    dis.readFully(bytes);    ruleArray[i]=bytes;  }  for (int i=0; i < versionCount; i++) {    regionCount=dis.readShort();    regions=new String[regionCount];    indices=new int[regionCount];    for (int j=0; j < regionCount; j++) {      regions[j]=regionArray[dis.readShort()];      indices[j]=dis.readShort();    }  }  zones.remove("ROC");  for (int i=0; i < versionCount; i++) {    int aliasCount=dis.readShort();    aliases.clear();    for (int j=0; j < aliasCount; j++) {      String alias=regionArray[dis.readShort()];      String region=regionArray[dis.readShort()];      aliases.put(alias,region);    }  }  addOldMapping();}  }
class C{  public final String join(@Nullable Object first,@Nullable Object second,Object... rest){  return join(iterable(first,second,rest));}  }
class C{  private void init() throws IgniteSpiException {  if (initGuard.compareAndSet(false,true)) {    if (dataSrc == null)     throw new IgniteSpiException("Data source is null (you must configure it via setDataSource(..)" + " configuration property)");    if (!initSchema) {      initLatch.countDown();      checkSchema();      return;    }    Connection conn=null;    boolean committed=false;    try {      conn=dataSrc.getConnection();      conn.setAutoCommit(false);      conn.setTransactionIsolation(TRANSACTION_READ_COMMITTED);      DatabaseMetaData dbm=conn.getMetaData();      try (ResultSet tables=dbm.getTables(null,null,addrTableName,null)){        if (!tables.next()) {          try (Statement stmt=conn.createStatement()){            stmt.executeUpdate(createAddrsTableQry);            conn.commit();          } catch (          SQLException e) {            try (ResultSet tablesAgain=dbm.getTables(null,null,addrTableName,null)){              if (!tablesAgain.next())               throw e;            }           }        }      }       committed=true;      if (log.isDebugEnabled())       log.debug("DB schema has been initialized.");    } catch (    SQLException e) {      U.rollbackConnectionQuiet(conn);      throw new IgniteSpiException("Failed to initialize DB schema.",e);    } finally {      if (!committed)       U.rollbackConnectionQuiet(conn);      U.closeQuiet(conn);      initLatch.countDown();    }  } else   checkSchema();}  }
class C{  public boolean isLocal(){  return "file".equalsIgnoreCase(url.getProtocol());}  }
class C{  private void rummelhartZipser(final Neuron neuron){  double sumOfInputs=neuron.getTotalInput();  for (  Synapse synapse : neuron.getFanIn()) {    activation=synapse.getSource().getActivation();    if (normalizeInputs) {      if (sumOfInputs != 0) {        activation=activation / sumOfInputs;      }    }    double deltaw=learningRate * (activation - synapse.getStrength());    synapse.setStrength(synapse.clip(synapse.getStrength() + deltaw));  }}  }
class C{  public boolean hasChildren(){  return leftChild != null || rightChild != null;}  }
class C{  protected void clearCoRoutine(){  clearCoRoutine(null);}  }
class C{  public final LC width(String width){  setWidth(ConstraintParser.parseBoundSize(width,false,true));  return this;}  }
class C{  public SolrQuery addSort(SortClause sortClause){  if (sortClauses == null)   sortClauses=new ArrayList<>();  sortClauses.add(sortClause);  serializeSorts();  return this;}  }
class C{  private static boolean isFinalSigma(char[] value,int offset,int count,int index){  if (index <= offset) {    return false;  }  char previous=value[index - 1];  if (!(Character.isLowerCase(previous) || Character.isUpperCase(previous) || Character.isTitleCase(previous))) {    return false;  }  if (index + 1 >= offset + count) {    return true;  }  char next=value[index + 1];  if (Character.isLowerCase(next) || Character.isUpperCase(next) || Character.isTitleCase(next)) {    return false;  }  return true;}  }
class C{  private void interpretAnd(final ReilInstruction instruction){  final Pair<Boolean,BigInteger> firstValue=loadLongValue(instruction.getFirstOperand());  final Pair<Boolean,BigInteger> secondValue=loadLongValue(instruction.getSecondOperand());  if (firstValue.first() && secondValue.first()) {    final BigInteger result=firstValue.second().and(secondValue.second());    final String targetRegister=instruction.getThirdOperand().getValue();    final OperandSize targetSize=instruction.getThirdOperand().getSize();    setRegister(targetRegister,result,targetSize,ReilRegisterStatus.DEFINED);  } else {    assert false;  }}  }
class C{  @SuppressWarnings("unused") private Settings(){}  }
class C{  @SafeVarargs public final <Result,Progress>Promise<Result,Progress> anyOf(Promise<Result,Progress>... promises){  return anyOf(Arrays.asList(promises));}  }
class C{  public void testReplicationConnectionNoSlavesRemainOnMaster() throws Exception {  Properties props=getPropertiesFromTestsuiteUrl();  String masterHost=props.getProperty(NonRegisteringDriver.HOST_PROPERTY_KEY) + ":" + props.getProperty(NonRegisteringDriver.PORT_PROPERTY_KEY);  ReplicationConnection replConn=getTestReplicationConnectionNoSlaves(masterHost);  Statement s=replConn.createStatement();  ResultSet rs1=s.executeQuery("select CONNECTION_ID()");  assertTrue(rs1.next());  int masterConnectionId=rs1.getInt(1);  rs1.close();  s.close();  replConn.addSlaveHost(masterHost);  s=replConn.createStatement();  rs1=s.executeQuery("select CONNECTION_ID()");  assertTrue(rs1.next());  assertEquals(masterConnectionId,rs1.getInt(1));  assertFalse(replConn.isReadOnly());  rs1.close();  s.close();}  }
class C{  public TSIG(Name name,byte[] key){  this(HMAC_MD5,name,key);}  }
class C{  public static String xmlAttr(String name,String value){  return " " + name + "=\""+ xmlText(value)+ "\"";}  }
class C{  public static ClassificationDataSet readC(int classification_target,Reader reader,int lines_to_skip,Set<Integer> cat_cols) throws IOException {  return readC(classification_target,reader,DEFAULT_DELIMITER,lines_to_skip,DEFAULT_COMMENT,cat_cols);}  }
class C{  private void findDeletions(){  Iterator iter=this.infos.keySet().iterator();  while (iter.hasNext()) {    IJavaElement element=(IJavaElement)iter.next();    this.delta.removed(element);    removed(element);  }}  }
class C{  @Override public void increment(double coord,double value){  if (cachefill >= 0) {    if (cachefill < cachec.length) {      cachec[cachefill]=coord;      cachev[cachefill]=value;      cachefill++;      return;    } else {      materialize();    }  }  testResample(coord);  super.increment(coord,value);}  }
class C{  @Ignore("Depends on hydra code. See bug ") @Test public void testParallelAsyncEventQueueHA_Scenario3(){  Integer lnPort=(Integer)vm0.invoke(null);  vm1.invoke(createCacheRunnable(lnPort));  vm2.invoke(createCacheRunnable(lnPort));  LogWriterUtils.getLogWriter().info("Created the cache");  vm1.invoke(null);  vm2.invoke(null);  LogWriterUtils.getLogWriter().info("Created the AsyncEventQueue");  vm1.invoke(null);  vm2.invoke(null);  LogWriterUtils.getLogWriter().info("Created PR with AsyncEventQueue");  vm1.invoke(pauseAsyncEventQueueRunnable());  vm2.invoke(pauseAsyncEventQueueRunnable());  Wait.pause(1000);  LogWriterUtils.getLogWriter().info("Paused the AsyncEventQueue");  vm1.invoke(null);  LogWriterUtils.getLogWriter().info("Done puts");  vm3.invoke(createCacheRunnable(lnPort));  vm3.invoke(null);  vm3.invoke(null);  vm1.invoke(null);  Set<Integer> primaryBucketsvm3=(Set<Integer>)vm3.invoke(null);  LogWriterUtils.getLogWriter().info("Primary buckets on vm3: " + primaryBucketsvm3);  vm1.invoke(null);  vm2.invoke(null);  vm1.invoke(null);  vm2.invoke(null);  vm3.invoke(null);  vm3.invoke(null);}  }
class C{  @Override public void traceDebug(String tag,String message){  traceCallback(MqttServiceConstants.TRACE_DEBUG,tag,message);}  }
class C{  public void testGetConsistentModelClasses() throws Exception {  boolean simulation=true;  SessionNode node1=new SessionNode(new Class[]{Type1.class});  SessionNode node2=new SessionNode(new Class[]{Type2.class});  SessionNode node3=new SessionNode(new Class[]{Type3.class});  assertTrue(node1.addParent(node2));  assertTrue(node1.addParent(node3));  assertTrue(node3.addParent(node2));  Class[] classes=node1.getConsistentModelClasses(false);  assertNull(classes);  try {    node2.createModel(Type2.class,simulation);    node3.createModel(Type3.class,simulation);  } catch (  RuntimeException e) {    fail("Model not created.");  }  classes=node1.getConsistentModelClasses(false);  assertNotNull(classes);  assertEquals(classes[0],Type1.class);}  }
class C{  public void testAuthenticateSpringOpenLdapEmpty(){  LdapManager mgr=getLdapOpenLdap();  LdapAuthenticationUserNameVO authenticationInfo=new LdapAuthenticationUserNameVO();  authenticationInfo.setUserName("ngomila");  authenticationInfo.setUserCredentials("");  String ret=null;  try {    ret=mgr.authenticate(authenticationInfo);  } catch (  Exception e) {    assertEquals(LdapErrorCodes.ERR_10000_AUTHENTICACION_CREDENTIALS_EMPTY,((LdapException)e).getErrCode());  }  assertNull(ret);}  }
class C{  public RotatedProblems(){  super();}  }
class C{  public static ItemStack convertToStack(Object obj){  if (obj == null)   return (ItemStack)obj; else   if (obj instanceof ItemStack)   return ((ItemStack)obj).copy(); else   if (obj instanceof Item)   return new ItemStack((Item)obj); else   if (obj instanceof Block)   return new ItemStack((Block)obj); else   if (obj instanceof String)   return OreDictionary.getOres((String)obj).get(0).copy(); else   if (obj instanceof List)   return ((ItemStack)((List)obj).get(0)).copy(); else   throw new ClassCastException("Not a Item, Block, ItemStack, String or List of ItemStacks!");}  }
class C{  public DrawerBuilder withSelectedItem(int selectedItemIdentifier){  this.mSelectedItemIdentifier=selectedItemIdentifier;  return this;}  }
class C{  @Override public long skip(long count) throws IOException {synchronized (lock) {    if (isOpen()) {      if (count <= 0) {        return 0;      }      long skipped=0;      if (count < this.count - pos) {        pos=pos + (int)count;        skipped=count;      } else {        skipped=this.count - pos;        pos=this.count;      }      return skipped;    }    throw new IOException("StringReader is closed");  }}  }
class C{  void sendTransmit(MultiplexConnectionInfo info,byte buf[],int off,int len) throws IOException {synchronized (dataOut) {    if (alive && !info.closed)     try {      dataOut.writeByte(TRANSMIT);      dataOut.writeShort(info.id);      dataOut.writeInt(len);      dataOut.write(buf,off,len);      dataOut.flush();    } catch (    IOException e) {      multiplexLog.log(Log.BRIEF,"exception: ",e);      shutDown();      throw e;    }  }}  }
class C{  private static void markSmall(Tree.Term that){  that.setSmall(true);  that.setTypeModel(SmallDeclarationVisitor.smallUnderlyingType(that.getTypeModel()));}  }
class C{  public static IAudioProvider removeProvider(){  IAudioProvider oldProvider=GlobalProvider.getProvider();  GlobalProvider.provider=new DefaultProvider();  return oldProvider;}  }
class C{  public boolean isCustomer(){  Object oo=get_Value(COLUMNNAME_IsCustomer);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void updateGraphType(){  boolean hasCodeNode=false;  boolean hasFunctionNode=false;  for (  final INaviViewNode node : graph.getNodes()) {    if (node instanceof INaviFunctionNode) {      hasFunctionNode=true;      if (hasCodeNode) {        setGraphType(GraphType.MIXED_GRAPH);        return;      }    } else     if (node instanceof INaviCodeNode) {      hasCodeNode=true;      if (hasFunctionNode) {        setGraphType(GraphType.MIXED_GRAPH);        return;      }    }  }  if (hasCodeNode) {    setGraphType(GraphType.FLOWGRAPH);  } else   if (hasFunctionNode) {    setGraphType(GraphType.CALLGRAPH);  } else {    setGraphType(GraphType.MIXED_GRAPH);  }}  }
class C{  public void clear(){  messages=new ArrayList<OscMessage>();}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  s.writeObject(myMimeType.getMimeType());}  }
class C{  private form fillForm(WWindowStatus ws,String action,MLocation location,String targetBase,boolean addStart){  form myForm=null;  myForm=new form(action);  myForm.addElement(new input(input.TYPE_HIDDEN,P_TARGET,targetBase));  myForm.addElement(new input(input.TYPE_HIDDEN,P_C_LOCATION_ID,location.getC_Location_ID()));  table table=new table();  table.setID("WLocation");  tr line=new tr();  line.addElement(new td(Msg.getMsg(ws.ctx,"Address") + " 1").setAlign(AlignType.RIGHT));  input myInput=null;  myInput=new input(input.TYPE_TEXT,P_ADDRESS1,location.getAddress1());  myInput.setMaxlength(50).setSize(50);  line.addElement(new td(myInput).setAlign(AlignType.LEFT).setColSpan(5));  table.addElement(line);  line=new tr();  line.addElement(new td(Msg.getMsg(ws.ctx,"Address") + " 2").setAlign(AlignType.RIGHT));  myInput=new input(input.TYPE_TEXT,P_ADDRESS2,location.getAddress2());  myInput.setMaxlength(50).setSize(50);  line.addElement(new td(myInput).setAlign(AlignType.LEFT).setColSpan(5));  table.addElement(line);  line=new tr();  line.addElement(new td(Msg.getMsg(ws.ctx,"Address") + " 3").setAlign(AlignType.RIGHT));  myInput=new input(input.TYPE_TEXT,P_ADDRESS3,location.getAddress3());  myInput.setMaxlength(50).setSize(50);  line.addElement(new td(myInput).setAlign(AlignType.LEFT).setColSpan(5));  table.addElement(line);  line=new tr();  line.addElement(new td(Msg.getMsg(ws.ctx,"Address") + " 4").setAlign(AlignType.RIGHT));  myInput=new input(input.TYPE_TEXT,P_ADDRESS4,location.getAddress4());  myInput.setMaxlength(50).setSize(50);  line.addElement(new td(myInput).setAlign(AlignType.LEFT).setColSpan(5));  table.addElement(line);  line=new tr();  line.addElement(new td(Msg.getMsg(ws.ctx,"City")).setAlign(AlignType.RIGHT));  myInput=new input(input.TYPE_TEXT,P_CITY,location.getCity());  myInput.setMaxlength(30).setSize(30);  line.addElement(new td(myInput).setAlign(AlignType.LEFT));  if (location.getCountry().isHasRegion()) {    line.addElement(new td(Msg.getMsg(ws.ctx,"Region")).setAlign(AlignType.RIGHT));    line.addElement(new td(getRegion(location,ws)).setAlign(AlignType.LEFT));  }  line.addElement(new td(Msg.getMsg(ws.ctx,"Postal")).setAlign(AlignType.RIGHT));  myInput=new input(input.TYPE_TEXT,P_POSTAL,location.getPostal());  myInput.setMaxlength(10).setSize(6);  line.addElement(new td(myInput).setAlign(AlignType.LEFT));  table.addElement(line);  line=new tr();  line.addElement(new td(Msg.getMsg(ws.ctx,"Country")).setAlign(AlignType.RIGHT));  line.addElement(new td(this.getCountry(location,ws)).setAlign(AlignType.LEFT).setColSpan(5));  table.addElement(line);  line=new tr();  StringBuffer script=new StringBuffer();  script.append(targetBase).append("D.value='").append("temp").append("';").append(targetBase).append("F.value='").append("temp").append("';submit();closePopup();");  line.addElement(new td("&nbsp;"));  input submit=new input(input.TYPE_SUBMIT,"Submit","Submit");  submit.setOnClick(script.toString());  line.addElement(new td(submit).setAlign(AlignType.RIGHT).setColSpan(5));  table.addElement(line);  myForm.addElement(table);  return myForm;}  }
class C{  public final void mousePressed(MouseEvent e){  dragActive=true;}  }
class C{  public void testToDate() throws Exception {  TimeZone.setDefault(TimeZone.getTimeZone("PST"));  final long toTheSecondDate=123456789012000L;  final Calendar dateToSecond=CalendarSerializer.deserialize("5882-03-11T00:30:12Z");  Assert.assertEquals(toTheSecondDate,dateToSecond.getTimeInMillis());  final long toTheMillisecondDate=123456789012345L;  final Calendar dateToTheMillisecond=CalendarSerializer.deserialize("5882-03-11T00:30:12.345Z");  Assert.assertEquals(toTheMillisecondDate,dateToTheMillisecond.getTimeInMillis());  final Calendar dateToTheExtremeMillisecond=CalendarSerializer.deserialize("5882-03-11T00:30:12.3456789Z");  Assert.assertEquals(toTheMillisecondDate,dateToTheExtremeMillisecond.getTimeInMillis());}  }
class C{  public MetadataTest(String name){  super(name);}  }
class C{  @Override public Element useMarker(SVGPlot plot,Element parent,double x,double y,int stylenr,double size){  Element marker=plot.svgCircle(x,y,size * .5);  final String col;  if (stylenr == -1) {    col=dotcolor;  } else   if (stylenr == -2) {    col=greycolor;  } else {    col=colors.getColor(stylenr);  }  SVGUtil.setStyle(marker,SVGConstants.CSS_FILL_PROPERTY + ":" + col);  parent.appendChild(marker);  return marker;}  }
class C{  public final CC growY(float w){  ver.setGrow(w);  return this;}  }
class C{  public DepthFirstIterator(final ITreeNode<ObjectType> rootNode){  Preconditions.checkNotNull(rootNode,"Error: Root node argument can not be null");  for (  final ITreeNode<ObjectType> treeNode : rootNode.getChildren()) {    m_path.add(treeNode);  }}  }
class C{  public void beeUnlock(){  beeCount--;}  }
class C{  public static synchronized TestCertUtil.PKCS12 loadPKCS12(String orgName){  if (cache.containsKey(orgName)) {    return cache.get(orgName);  }  TestCertUtil.PKCS12 pkcs12=TestCertUtil.loadPKCS12(orgName + ".p12","1",PASSWORD);  cache.put(orgName,pkcs12);  return pkcs12;}  }
class C{  public <S>T manyToOne(final S source,final MappingType mtSource){  try {    return this.<T,S>getJMapper(relationalManyToOneMapper,source).getDestination(source,mtSource);  } catch (  Exception e) {    return logAndReturnNull(e);  }}  }
class C{  public boolean ensureValid(int count){  if (count == -1) {    return false;  }  if (begin[0] > count || end[0] >= count) {    return false;  }  if (begin[0] < 0) {    begin[0]=0;  }  if (end[0] < 0) {    end[0]=count;  }  return true;}  }
class C{  public static void f(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_FATAL) {    return;  }  Log.wtf(tag,msg,throwable);}  }
class C{  public void cleanup(){  diffusers.cleanup();}  }
class C{  public RegCountVisitor(){  regCount=0;}  }
class C{  public int start(String name){  return groups[getMatchedGroupIndex(name) * 2];}  }
class C{  public ClassNotFoundException(@Nullable String s){  super(s,null);}  }
class C{  public boolean removeAll(Object key1,Object key2,Object key3){  boolean modified=false;  MapIterator it=mapIterator();  while (it.hasNext()) {    MultiKey multi=(MultiKey)it.next();    if (multi.size() >= 3 && (key1 == null ? multi.getKey(0) == null : key1.equals(multi.getKey(0))) && (key2 == null ? multi.getKey(1) == null : key2.equals(multi.getKey(1))) && (key3 == null ? multi.getKey(2) == null : key3.equals(multi.getKey(2)))) {      it.remove();      modified=true;    }  }  return modified;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public KeyValuePersistenceSettings(Resource settingsRsrc){  InputStream in;  try {    in=settingsRsrc.getInputStream();  } catch (  IOException e) {    throw new IgniteException("Failed to get input stream for Cassandra persistence settings resource: " + settingsRsrc,e);  }  init(loadSettings(in));}  }
class C{  public DualECSP800DRBG(Digest digest,int securityStrength,EntropySource entropySource,byte[] personalizationString,byte[] nonce){  this(nistPoints,digest,securityStrength,entropySource,personalizationString,nonce);}  }
class C{  private void rejectLoop(S2Loop v,int n,List<S2Edge> unusedEdges){  for (int i=n - 1, j=0; j < n; i=j++) {    unusedEdges.add(new S2Edge(v.vertex(i),v.vertex(j)));  }}  }
class C{  public void testUniformDistribution(double min,double max,DescriptiveStatistics statistics){  Assert.assertEquals((min + max) / 2.0,statistics.getMean(),TestThresholds.STATISTICS_EPS);  Assert.assertEquals(Math.pow(max - min,2.0) / 12.0,statistics.getVariance(),TestThresholds.STATISTICS_EPS);  Assert.assertEquals(0.0,statistics.getSkewness(),TestThresholds.STATISTICS_EPS);  Assert.assertEquals(-6.0 / 5.0,statistics.getKurtosis(),TestThresholds.STATISTICS_EPS);  Assert.assertEquals(min,statistics.getMin(),TestThresholds.STATISTICS_EPS);  Assert.assertEquals(max,statistics.getMax(),TestThresholds.STATISTICS_EPS);}  }
class C{  public Boolean isAutoUpgradeAllowed(){  return autoUpgradeAllowed;}  }
class C{  public Date scheduleJob(JobDetail jobDetail,Trigger trigger) throws SchedulerException {  try {    return getRemoteScheduler().scheduleJob(jobDetail,trigger);  } catch (  RemoteException re) {    throw invalidateHandleCreateException("Error communicating with remote scheduler.",re);  }}  }
class C{  public void valueChanged(ListSelectionEvent event){  if (!event.getValueIsAdjusting()) {    ListSelectionModel model=(ListSelectionModel)event.getSource();    if (model.getLeadSelectionIndex() > -1) {      IndicatorSeries transferObject=((IndicatorSeriesTableModel)m_tableModelChild).getData().getIndicatorSeries().get(m_tableChild.convertRowIndexToModel(model.getLeadSelectionIndex()));      propertiesButton.setTransferObject(transferObject);      propertiesButton.setEnabled(true);    }  }}  }
class C{  public void populateStdCmdLineOptions(CmdLineOptions options) throws OpenStegoException {}  }
class C{  public PTBTokenizerFactory(){  this(false);}  }
class C{  public Complex multiply(Complex secondComplex){  return new Complex(a * secondComplex.a - b * secondComplex.b,b * secondComplex.a + a * secondComplex.b);}  }
class C{  public void skipPropertySeparator(){}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  NamedNodeMap attributes;  Node child;  String name;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  testEmployee=elementList.item(1);  attributes=testEmployee.getAttributes();  child=attributes.item(1);  name=child.getNodeName();  assertTrue("namednodemapReturnLastItemAssert",(equals("domestic",name) | equals("street",name)));}  }
class C{  @Override public boolean supportsSelectForUpdate(){  debugCodeCall("supportsSelectForUpdate");  return true;}  }
class C{  public WebappUrlBar(Context context,AttributeSet attrSet){  super(context,attrSet);  mIconResourceWidths=new SparseIntArray();  mUrlBar=new TextView(context);  mUrlBar.setSingleLine(true);  mUrlBar.setGravity(Gravity.CENTER_VERTICAL);  mUrlBar.setMovementMethod(ScrollingMovementMethod.getInstance());  mUrlBar.setHorizontalFadingEdgeEnabled(true);  mSeparator=new View(context);  addView(mUrlBar,new FrameLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT,Gravity.CENTER));  addView(mSeparator,new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,1,Gravity.BOTTOM));  mSeparator.setBackgroundColor(context.getResources().getColor(R.color.webapp_url_bar_separator));  setBackgroundColor(context.getResources().getColor(R.color.webapp_url_bar_bg));  mUrlBar.addOnLayoutChangeListener(this);}  }
class C{  private static HashValueType hashValue(byte[] data){  HashValueType hashValue=new HashValueType();  hashValue.setDigestValue(data);  return hashValue;}  }
class C{  @Override public void paintValue(Graphics gfx,Rectangle box){  gfx.drawString(m_matrix.size() + " x " + m_matrix.size()+ " cost matrix",box.x,box.y + box.height);}  }
class C{  public void load(Element element,Object o){  Editor ed=(Editor)o;  SensorIcon l;  String name;  Attribute attr=element.getAttribute("sensor");  if (attr == null) {    log.error("incorrect information for sensor; must use sensor name");    ed.loadFailed();    return;  } else {    name=attr.getValue();  }  _icon=true;  if (element.getAttribute("icon") != null) {    String yesno=element.getAttribute("icon").getValue();    if ((yesno != null) && (!yesno.equals(""))) {      if (yesno.equals("yes")) {        _icon=true;      } else       if (yesno.equals("no")) {        _icon=false;      }    }  }  if (_icon) {    l=new SensorIcon(new NamedIcon("resources/icons/smallschematics/tracksegments/circuit-error.gif","resources/icons/smallschematics/tracksegments/circuit-error.gif"),ed);  } else {    l=new SensorIcon("  ",ed);  }  int rotation=0;  try {    rotation=element.getAttribute("rotate").getIntValue();  } catch (  org.jdom2.DataConversionException e) {  }catch (  NullPointerException e) {  }  if (loadSensorIcon("active",rotation,l,element,name,ed) == null) {    return;  }  if (loadSensorIcon("inactive",rotation,l,element,name,ed) == null) {    return;  }  if (loadSensorIcon("unknown",rotation,l,element,name,ed) == null) {    return;  }  if (loadSensorIcon("inconsistent",rotation,l,element,name,ed) == null) {    return;  }  Element elem=element.getChild("iconmaps");  if (elem != null) {    attr=elem.getAttribute("family");    if (attr != null) {      l.setFamily(attr.getValue());    }  }  Attribute a=element.getAttribute("momentary");  if ((a != null) && a.getValue().equals("true")) {    l.setMomentary(true);  } else {    l.setMomentary(false);  }  loadTextInfo(l,element);  l.setSensor(name);  ed.putItem(l);  loadCommonAttributes(l,Editor.SENSORS,element);  if (l.isIcon() && l.getText() != null) {    l.setOpaque(false);  }}  }
class C{  public File programDirectory(){  return programDirectory;}  }
class C{  public static double clampLatitude(double degrees){  return degrees > 90 ? 90 : (degrees < -90 ? -90 : degrees);}  }
class C{  public void paintMenuItemBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  void restore(){  System.arraycopy(rSave,0,r,0,blockSize);}  }
class C{  public static long toLong(final String string){  long val=0;  boolean started=false;  boolean minus=false;  for (int i=0; i < string.length(); i++) {    char b=string.charAt(i);    if (b <= ' ') {      if (started)       break;    } else     if (b >= '0' && b <= '9') {      val=val * 10L + (b - '0');      started=true;    } else     if (b == '-' && !started) {      minus=true;    } else     break;  }  if (started)   return minus ? (-val) : val;  throw new NumberFormatException(string);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:32:03.628 -0400",hash_original_method="A10A7F78FAFA9C62D1FB8ECA76AC4918",hash_generated_method="72EF1B312308CD180765D68D965399FE") public void release(){  native_finalize();}  }
class C{  public final void trace(Object message){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_TRACE)) {    log(SimpleLog.LOG_LEVEL_TRACE,message,null);  }}  }
class C{  public static Index index(String keyspace,String table,String name){  return new Index(table,name).keyspace(keyspace);}  }
class C{  public boolean isCollapsed(TreePath path){  return !isExpanded(path);}  }
class C{  @Override public BytesRef clone(){  return new BytesRef(bytes,offset,length);}  }
class C{  public boolean visitLocationPath(ExpressionOwner owner,LocPathIterator path){  if (path instanceof SelfIteratorNoPredicate) {    return true;  } else   if (path instanceof WalkingIterator) {    WalkingIterator wi=(WalkingIterator)path;    AxesWalker aw=wi.getFirstWalker();    if ((aw instanceof FilterExprWalker) && (null == aw.getNextWalker())) {      FilterExprWalker few=(FilterExprWalker)aw;      Expression exp=few.getInnerExpression();      if (exp instanceof Variable)       return true;    }  }  if (isAbsolute(path) && (null != m_absPaths)) {    if (DEBUG)     validateNewAddition(m_absPaths,owner,path);    m_absPaths.addElement(owner);  } else   if (m_isSameContext && (null != m_paths)) {    if (DEBUG)     validateNewAddition(m_paths,owner,path);    m_paths.addElement(owner);  }  return true;}  }
class C{  protected String readFile(File file){  return configuration.getFileHandler().readTextFile(getAbsolutePath(file),"UTF-8");}  }
class C{  public static String unsetThread(){  ByteArrayOutputStream baos=(ByteArrayOutputStream)data.get();  if (baos == null) {    return null;  }  streams.set(null);  data.set(null);  return baos.toString();}  }
class C{  public void test_read_writeChar() throws IOException {  RandomAccessFile raf=new java.io.RandomAccessFile(fileName,"rw");  raf.writeChar(Character.MIN_VALUE);  raf.writeChar('T');  raf.writeChar(Character.MAX_VALUE);  raf.writeChar(Character.MIN_VALUE - 1);  raf.writeChar(Character.MAX_VALUE + 1);  raf.seek(0);  assertEquals("Test 1: Incorrect value written or read;",Character.MIN_VALUE,raf.readChar());  assertEquals("Test 2: Incorrect value written or read;",'T',raf.readChar());  assertEquals("Test 3: Incorrect value written or read;",Character.MAX_VALUE,raf.readChar());  assertEquals("Test 4: Incorrect value written or read;",0xffff,raf.readChar());  assertEquals("Test 5: Incorrect value written or read;",0,raf.readChar());  try {    raf.readChar();    fail("Test 6: EOFException expected.");  } catch (  EOFException e) {  }  raf.close();  try {    raf.writeChar('E');    fail("Test 7: IOException expected.");  } catch (  IOException e) {  }  try {    raf.readChar();    fail("Test 8: IOException expected.");  } catch (  IOException e) {  }}  }
class C{  public int numSourcePositions(){  return numSourcePos;}  }
class C{  public boolean checkBanned(String... flags){  for (  final String flag : flags) {    final Flag aFlag=getFlag(flag);    if ((aFlag != null) && aFlag.isSet()) {      setParseMessage("The flag " + LONG_FLAG_PREFIX + flag+ " is not permitted for this set of arguments");      return false;    }  }  return true;}  }
class C{  public int read() throws IOException {  if (length == 0)   return -1;  int c=in.read();  length=(c != -1) ? length - 1 : 0;  return c;}  }
class C{  private Primality(){}  }
class C{  public void send(DatagramPacket pack) throws IOException {  checkOpen();  ensureBound();  InetAddress packAddr=pack.getAddress();  if (address != null) {    if (packAddr != null) {      if (!address.equals(packAddr) || port != pack.getPort()) {        throw new IllegalArgumentException("Packet address mismatch with connected address");      }    } else {      pack.setAddress(address);      pack.setPort(port);    }  } else {    if (packAddr == null) {      throw new NullPointerException("Destination address is null");    }  }  impl.send(pack);}  }
class C{  public void testWithoutSessionAndSubsciberClosePlayAround() throws Exception {  TopicConnection connection=connectionFactory.createTopicConnection();  connection.start();  for (int i=0; i < 100; i++) {    TopicSession subscriberSession=connection.createTopicSession(false,Session.AUTO_ACKNOWLEDGE);    TopicSubscriber subscriber=subscriberSession.createSubscriber(topic);    DummyMessageListener listener=new DummyMessageListener();    subscriber.setMessageListener(listener);    if (i != 50) {      subscriber.close();      subscriberSession.close();    }  }  connection.close();  Thread.sleep(1000);  Destination dest=backEnd.getRegionBroker().getDestinationMap().get(topic);  assertNotNull(dest);  assertTrue(dest.getConsumers().isEmpty());}  }
class C{  public static LazyPSetX<Integer> range(int start,int end){  return fromStreamS(ReactiveSeq.range(start,end));}  }
class C{  public static String uploadAndStoreImage(HttpServletRequest request,String idField,String uploadField){  ServletFileUpload fu=new ServletFileUpload(new DiskFileItemFactory(10240,FileUtil.getFile("runtime/tmp")));  List<FileItem> lst=null;  Locale locale=UtilHttp.getLocale(request);  try {    lst=UtilGenerics.checkList(fu.parseRequest(request));  } catch (  FileUploadException e) {    request.setAttribute("_ERROR_MESSAGE_",e.toString());    return "error";  }  if (lst.size() == 0) {    String errMsg=UtilProperties.getMessage(DataResourceWorker.err_resource,"dataResourceWorker.no_files_uploaded",locale);    request.setAttribute("_ERROR_MESSAGE_",errMsg);    Debug.logWarning("[DataEvents.uploadImage] No files uploaded",module);    return "error";  }  FileItem fi=null;  FileItem imageFi=null;  String imageFileName=null;  Map<String,Object> passedParams=FastMap.newInstance();  HttpSession session=request.getSession();  GenericValue userLogin=(GenericValue)session.getAttribute("userLogin");  passedParams.put("userLogin",userLogin);  byte[] imageBytes=null;  for (int i=0; i < lst.size(); i++) {    fi=lst.get(i);    String fieldName=fi.getFieldName();    if (fi.isFormField()) {      String fieldStr=fi.getString();      passedParams.put(fieldName,fieldStr);    } else     if (fieldName.startsWith("imageData")) {      imageFi=fi;      imageBytes=imageFi.get();      passedParams.put(fieldName,imageBytes);      imageFileName=imageFi.getName();      passedParams.put("drObjectInfo",imageFileName);      if (Debug.infoOn())       Debug.logInfo("[UploadContentAndImage]imageData: " + imageBytes.length,module);    }  }  if (imageBytes != null && imageBytes.length > 0) {    String mimeType=getMimeTypeFromImageFileName(imageFileName);    if (UtilValidate.isNotEmpty(mimeType)) {      passedParams.put("drMimeTypeId",mimeType);      try {        String returnMsg=UploadContentAndImage.processContentUpload(passedParams,"",request);        if (returnMsg.equals("error")) {          return "error";        }      } catch (      GenericServiceException e) {        request.setAttribute("_ERROR_MESSAGE_",e.getMessage());        return "error";      }    } else {      request.setAttribute("_ERROR_MESSAGE_","mimeType is empty.");      return "error";    }  }  return "success";}  }
class C{  public EventCount(long success,long failure){  this.success=success;  this.failure=failure;  assert 0 <= success;  assert 0 <= failure;}  }
class C{  public PivotRenderer(){  super();  this.dotWidth=10;  this.dotHeight=1;  this.legendShape=new Rectangle2D.Double(-3.0,-3.0,6.0,6.0);}  }
class C{  public static byte[] encodeBase64(final byte[] binaryData){  return encodeBase64(binaryData,false);}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append(Constants.INDENT);  buffer.append("kdf: 0x");  buffer.append(Functions.toFullHexString(kdf));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("pSharedDataLen: ");  buffer.append(pSharedData.length);  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("pSharedData: ");  buffer.append(Functions.toHexString(pSharedData));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("pPublicDataLen: ");  buffer.append(pPublicData.length);  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("pPublicData: ");  buffer.append(Functions.toHexString(pPublicData));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("ulPrivateDataLen: ");  buffer.append(ulPrivateDataLen);  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("hPrivateData: ");  buffer.append(hPrivateData);  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("pPublicDataLen2: ");  buffer.append(pPublicData2.length);  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("pPublicData2: ");  buffer.append(Functions.toHexString(pPublicData2));  return buffer.toString();}  }
class C{  protected final byte[] engineWrap(Key key) throws IllegalBlockSizeException, InvalidKeyException {  byte[] result=null;  try {    byte[] encodedKey=key.getEncoded();    if ((encodedKey == null) || (encodedKey.length == 0)) {      throw new InvalidKeyException("Cannot get an encoding of " + "the key to be wrapped");    }    result=engineDoFinal(encodedKey,0,encodedKey.length);  } catch (  BadPaddingException e) {  }  return result;}  }
class C{  public ColorRange(Hue hue){  this(new FloatRange(hue.getHue(),hue.getHue()),null,null,null,null,null,null);}  }
class C{  final public boolean isReadOnly(){  return false;}  }
class C{  public static NalUnitHeader extract(int position,byte[] h264Packet){  if (h264Packet == null) {    throw new RuntimeException("Cannot extract H264 header. Invalid H264 packet");  }  NalUnitHeader header=new NalUnitHeader(false,0,0);  extract(position,h264Packet,header);  return header;}  }
class C{  public MkAppTreeNode(int capacity,boolean isLeaf){  super(capacity,isLeaf,MkAppEntry.class);}  }
class C{  public int[] findRowIndices(String value,int column){  int[] outgoing=new int[rowCount];  int count=0;  checkColumn(column);  if (columnTypes[column] == STRING) {    String[] stringData=(String[])columns[column];    if (value == null) {      for (int row=0; row < rowCount; row++) {        if (stringData[row] == null) {          outgoing[count++]=row;        }      }    } else {      for (int row=0; row < rowCount; row++) {        if (stringData[row] != null && stringData[row].equals(value)) {          outgoing[count++]=row;        }      }    }  } else {    for (int row=0; row < rowCount; row++) {      String str=getString(row,column);      if (str == null) {        if (value == null) {          outgoing[count++]=row;        }      } else       if (str.equals(value)) {        outgoing[count++]=row;      }    }  }  return PApplet.subset(outgoing,0,count);}  }
class C{  public CoapEndpoint(final int port){  this(new InetSocketAddress(port));}  }
class C{  public static Set singleton(Object o){  return new SingletonSet(o);}  }
class C{  private FormParamIterator(RequestContext ctx) throws FormUploadException, IOException {  if (ctx == null) {    throw new NullPointerException("ctx parameter");  }  String contentType=ctx.getContentType();  if ((null == contentType) || (!contentType.toLowerCase(Locale.ENGLISH).startsWith(MULTIPART))) {    throw new InvalidContentTypeException(format("the request doesn't contain a %s or %s stream, content type header is %s",MULTIPART_FORM_DATA,MULTIPART_MIXED,contentType));  }  InputStream input=ctx.getInputStream();  String charEncoding=ctx.getCharacterEncoding();  boundary=getBoundary(contentType);  if (boundary.length == 0) {    IOUtils.closeQuietly(input);    throw new FormUploadException("the request was rejected because no multipart boundary was found");  }  try {    multi=new MultipartStream(input,boundary);  } catch (  IllegalArgumentException iae) {    IOUtils.closeQuietly(input);    throw new InvalidContentTypeException(format("The boundary specified in the %s header is too long",CONTENT_TYPE),iae);  }  multi.setHeaderEncoding(charEncoding);  skipPreamble=true;  findNextItem();}  }
class C{  public static ServerSocketBar createJNI(InetAddress host,int port) throws IOException {  return currentFactory().create(host,port,0,true);}  }
class C{  protected XMLReader installXMLFilter(XMLReader reader){  XMLFilter filter=getXMLFilter();  if (filter != null) {    XMLFilter root=filter;    while (true) {      XMLReader parent=root.getParent();      if (parent instanceof XMLFilter) {        root=(XMLFilter)parent;      } else {        break;      }    }    root.setParent(reader);    return filter;  }  return reader;}  }
class C{  public void createIssue(MPPOrder order,IMiniTable issue){  Timestamp movementDate=getMovementDate();  Timestamp minGuaranteeDate=movementDate;  boolean isCompleteQtyDeliver=false;  ArrayList[][] m_issue=new ArrayList[issue.getRowCount()][1];  int row=0;  for (int i=0; i < issue.getRowCount(); i++) {    ArrayList<Object> data=new ArrayList<Object>();    IDColumn id=(IDColumn)issue.getValueAt(i,0);    KeyNamePair key=new KeyNamePair(id.getRecord_ID(),id.isSelected() ? "Y" : "N");    data.add(key);    data.add(issue.getValueAt(i,1));    data.add(issue.getValueAt(i,2));    data.add(issue.getValueAt(i,3));    data.add(getValueBigDecimal(issue,i,8));    data.add(getValueBigDecimal(issue,i,9));    m_issue[row][0]=data;    row++;  }  isCompleteQtyDeliver=MPPOrder.isQtyAvailable(order,m_issue,minGuaranteeDate);  for (int i=0; i < m_issue.length; i++) {    KeyNamePair key=(KeyNamePair)m_issue[i][0].get(0);    boolean isSelected=key.getName().equals("Y");    if (key == null || !isSelected) {      continue;    }    Boolean isCritical=(Boolean)m_issue[i][0].get(1);    String value=(String)m_issue[i][0].get(2);    KeyNamePair productkey=(KeyNamePair)m_issue[i][0].get(3);    int M_Product_ID=productkey.getKey();    MPPOrderBOMLine orderbomLine=null;    int PP_Order_BOMLine_ID=0;    int M_AttributeSetInstance_ID=0;    BigDecimal qtyToDeliver=(BigDecimal)m_issue[i][0].get(4);    BigDecimal qtyScrapComponent=(BigDecimal)m_issue[i][0].get(5);    MProduct product=MProduct.get(order.getCtx(),M_Product_ID);    if (product != null && product.get_ID() != 0 && product.isStocked()) {      if (value == null && isSelected) {        M_AttributeSetInstance_ID=(Integer)key.getKey();        orderbomLine=MPPOrderBOMLine.forM_Product_ID(Env.getCtx(),order.get_ID(),M_Product_ID,order.get_TrxName());        if (orderbomLine != null) {          PP_Order_BOMLine_ID=orderbomLine.get_ID();        }      } else       if (value != null && isSelected) {        PP_Order_BOMLine_ID=(Integer)key.getKey();        if (PP_Order_BOMLine_ID > 0) {          orderbomLine=new MPPOrderBOMLine(order.getCtx(),PP_Order_BOMLine_ID,order.get_TrxName());          M_AttributeSetInstance_ID=orderbomLine.getM_AttributeSetInstance_ID();        }      }      MStorage[] storages=MPPOrder.getStorages(Env.getCtx(),M_Product_ID,order.getM_Warehouse_ID(),M_AttributeSetInstance_ID,minGuaranteeDate,order.get_TrxName());      MPPOrder.createIssue(order,PP_Order_BOMLine_ID,movementDate,qtyToDeliver,qtyScrapComponent,Env.ZERO,storages,false);    }  }}  }
class C{  public Socket(){  this.impl=factory != null ? factory.createSocketImpl() : new PlainSocketImpl();  this.proxy=null;}  }
class C{  public IntegerProperty countProperty(){  return count;}  }
class C{  public void testGlobalTableCreation() throws Exception {  if (!this.isSetForFabricTest) {    return;  }  this.conn.setServerGroupName("fabric_test1_global");  assertEquals("fabric_test1_global",this.conn.getCurrentServerGroup().getName());  Statement stmt=this.conn.createStatement();  stmt.executeUpdate("drop table if exists testGlobalTableCreation");  stmt.executeUpdate("create table testGlobalTableCreation (x int)");  stmt.executeUpdate("insert into testGlobalTableCreation values (999), (752)");  stmt.close();  Thread.sleep(3000);  ResultSet rs;  String groupsToTest[]=new String[]{"fabric_test1_shard1","fabric_test1_shard2","fabric_test1_global"};  for (  String groupName : groupsToTest) {    System.out.println("Testing data present in group `" + groupName + "'");    this.conn.setServerGroupName(groupName);    rs=this.conn.createStatement().executeQuery("select x from testGlobalTableCreation order by 1");    assertTrue(rs.next());    assertEquals("752",rs.getString(1));    assertTrue(rs.next());    assertEquals(999,rs.getInt(1));    assertFalse(rs.next());    rs.close();  }  this.conn.setServerGroupName("fabric_test1_global");  this.conn.createStatement().executeUpdate("drop table testGlobalTableCreation");}  }
class C{  public final void deleteWithMissing(Attribute att){  deleteWithMissing(att.index());}  }
class C{  protected void testExactEuclidean(ListParameterization inputparams,Class<?> expectKNNQuery,Class<?> expectRangeQuery){  inputparams.addParameter(FileBasedDatabaseConnection.Parameterizer.INPUT_ID,dataset);  Database db=ClassGenericsUtil.parameterizeOrAbort(StaticArrayDatabase.class,inputparams);  db.initialize();  Relation<DoubleVector> rep=db.getRelation(TypeUtil.DOUBLE_VECTOR_FIELD);  DistanceQuery<DoubleVector> dist=db.getDistanceQuery(rep,EuclideanDistanceFunction.STATIC);  assertTrue(rep.size() == shoulds);  if (expectKNNQuery != null) {    DoubleVector dv=DoubleVector.wrap(querypoint);    KNNQuery<DoubleVector> knnq=db.getKNNQuery(dist,k);    assertTrue("Returned knn query is not of expected class: expected " + expectKNNQuery + " got "+ knnq.getClass(),expectKNNQuery.isAssignableFrom(knnq.getClass()));    KNNList ids=knnq.getKNNForObject(dv,k);    assertEquals("Result size does not match expectation!",shouldd.length,ids.size(),1e-15);    int i=0;    for (DoubleDBIDListIter res=ids.iter(); res.valid(); res.advance(), i++) {      assertEquals("Expected distance doesn't match.",shouldd[i],res.doubleValue(),1e-6);      DoubleVector c=rep.get(res);      DoubleVector c2=DoubleVector.wrap(shouldc[i]);      assertEquals("Expected vector doesn't match: " + c.toString(),0.0,dist.distance(c,c2),1e-15);    }  }  if (expectRangeQuery != null) {    DoubleVector dv=DoubleVector.wrap(querypoint);    RangeQuery<DoubleVector> rangeq=db.getRangeQuery(dist,eps);    assertTrue("Returned range query is not of expected class: expected " + expectRangeQuery + " got "+ rangeq.getClass(),expectRangeQuery.isAssignableFrom(rangeq.getClass()));    DoubleDBIDList ids=rangeq.getRangeForObject(dv,eps);    assertEquals("Result size does not match expectation!",shouldd.length,ids.size(),1e-15);    int i=0;    for (DoubleDBIDListIter res=ids.iter(); res.valid(); res.advance(), i++) {      assertEquals("Expected distance doesn't match.",shouldd[i],res.doubleValue(),1e-6);      DoubleVector c=rep.get(res);      DoubleVector c2=DoubleVector.wrap(shouldc[i]);      assertEquals("Expected vector doesn't match: " + c.toString(),0.0,dist.distance(c,c2),1e-15);    }  }}  }
class C{  public LogFileContent addMXBeanDump(){  String dump=mBeanDumper.threadDump();  String locks=mBeanDumper.findDeadlock();  if (locks != null && !"".equals(locks)) {    dump+="\n" + locks;  }  if (topNodes == null) {    initDumpDisplay(null);  }  addDumpStream(new ByteArrayInputStream(dump.getBytes()),"Logfile",false);  dumpCounter++;  LogFileContent lfc=addToLogfile(dump);  if (this.getRootPane() != null) {    this.getRootPane().revalidate();  }  tree.setShowsRootHandles(false);  displayContent(null);  if (!this.runningAsVisualVMPlugin) {    getMainMenu().getFindLRThreadsToolBarButton().setEnabled(true);    getMainMenu().getExpandButton().setEnabled(true);    getMainMenu().getCollapseButton().setEnabled(true);  }  return (lfc);}  }
class C{  public static void appendToOid(SnmpOid source,SnmpOid dest){  if (source.getLength() != 1) {    throw new IllegalArgumentException();  }  dest.append(source);}  }
class C{  public static void inRange(final int value,final String name,final int minInclusive,final int maxInclusive){  inRange((long)value,name,minInclusive,maxInclusive);}  }
class C{  private static Instances changeType(Instances i) throws Exception {  Scanner sc=new Scanner(System.in);  String answer="";  while (!answer.toLowerCase().contentEquals("n")) {    System.out.println("\nDo you want to change the type of some attributes? (Y/N)?");    answer=sc.next();    if (answer.toLowerCase().contentEquals("y")) {      System.out.println("Choose from list:\n" + "1- From numeric to nominal\n" + "2- From nominal to numeric");      int choice=sc.nextInt();      if (choice == 1) {        i=NumToNom(i);      } else       if (choice == 2) {        i=NomToNum(i);      } else {        System.out.println("Not a valid choice");      }    }  }  return i;}  }
class C{  public void addParameter(final String parameterName,final String parameterValue){  LOG.trace("enter addParameter(String parameterName, String parameterValue)");  final Part param=new StringPart(parameterName,parameterValue);  parameters.add(param);}  }
class C{  public boolean isInitial(){  return initial;}  }
class C{  private static void addDocumentedKafkaProps(Context context,Properties kafkaProps) throws ConfigurationException {  String zookeeperConnect=context.getString(KafkaSourceConstants.ZOOKEEPER_CONNECT_FLUME);  if (zookeeperConnect == null) {    throw new ConfigurationException("ZookeeperConnect must contain " + "at least one ZooKeeper server");  }  kafkaProps.put(KafkaSourceConstants.ZOOKEEPER_CONNECT,zookeeperConnect);  String groupID=context.getString(KafkaSourceConstants.GROUP_ID_FLUME);  if (groupID != null) {    kafkaProps.put(KafkaSourceConstants.GROUP_ID,groupID);  }}  }
class C{  public short[][] production_table(){  return _production_table;}  }
class C{  public synchronized byte[] consumeRecordingAndTruncate(){  int len=getConsumedLength();  byte[] bytes=getCurrentRecording(len);  setRecordedLength(0);  setConsumedLength(0);  return bytes;}  }
class C{  private String disasm(int instr,int offset){  return Disassembler.disasm(instr,offset);}  }
class C{  public synchronized void info(String sourceClass,String sourceMethod,String msg,Object[] params){  LogRecord record=new LogRecord(Level.INFO,msg);  record.setSourceClassName(sourceClass);  record.setSourceMethodName(sourceMethod);  record.setParameters(params);  log(record);}  }
class C{  public void testGetInstance02() throws NoSuchAlgorithmException, NoSuchProviderException, IllegalArgumentException, InvalidAlgorithmParameterException, CertPathBuilderException {  try {    CertPathBuilder.getInstance(null,mProv.getName());    fail("NullPointerException or NoSuchAlgorithmException must be thrown when algorithm is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertPathBuilder.getInstance(invalidValues[i],mProv.getName());      fail("NoSuchAlgorithmException must be thrown (type: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  String prov=null;  for (int i=0; i < validValues.length; i++) {    try {      CertPathBuilder.getInstance(validValues[i],prov);      fail("IllegalArgumentException must be thrown when provider is null (type: ".concat(validValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }    try {      CertPathBuilder.getInstance(validValues[i],"");      fail("IllegalArgumentException must be thrown when provider is empty (type: ".concat(validValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }  }  for (int i=0; i < validValues.length; i++) {    for (int j=1; j < invalidValues.length; j++) {      try {        CertPathBuilder.getInstance(validValues[i],invalidValues[j]);        fail("NoSuchProviderException must be thrown (type: ".concat(validValues[i]).concat(" provider: ").concat(invalidValues[j]).concat(")"));      } catch (      NoSuchProviderException e) {      }    }  }  CertPathBuilder cerPB;  for (int i=0; i < validValues.length; i++) {    cerPB=CertPathBuilder.getInstance(validValues[i],mProv.getName());    assertEquals("Incorrect type",cerPB.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",cerPB.getProvider().getName(),mProv.getName());    checkResult(cerPB);  }}  }
class C{  public void recompose(StylesheetRoot root){  root.recomposeAttributeSets(this);}  }
class C{  public Predicate<CollectionId> collectionFilter(){  return collectionFilter;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (unique_1: ");  result.append(unique_1);  result.append(", lazy_1: ");  result.append(lazy_1);  result.append(", modifier_1: ");  result.append(modifier_1);  result.append(')');  return result.toString();}  }
class C{  public static <K,V>Map<K,V> jsonToMap(String json){  Gson gson=new Gson();  return gson.fromJson(json,new TypeToken<Map<K,V>>(){  }.getType());}  }
class C{  public void firePropertyChange(PropertyChangeEvent event){  String propertyName=event.getPropertyName();  Object oldValue=event.getOldValue();  Object newValue=event.getNewValue();  if (newValue != null && oldValue != null && newValue.equals(oldValue)) {    return;  }  notifyEachListener:   for (  PropertyChangeListener p : listeners) {    while (p instanceof PropertyChangeListenerProxy) {      PropertyChangeListenerProxy proxy=(PropertyChangeListenerProxy)p;      if (!Objects.equal(proxy.getPropertyName(),propertyName)) {        continue notifyEachListener;      }      p=(PropertyChangeListener)proxy.getListener();    }    p.propertyChange(event);  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (character: ");  result.append(character);  result.append(')');  return result.toString();}  }
class C{  public DataException(){  super();}  }
class C{  protected void skipSpaces() throws IOException {  if (current == ',') {    current=reader.read();  }}  }
class C{  public static void addAction(final Action a){  if (Cfg.DEBUG) {    Check.requires(!actionsMap.containsKey(a.getId()),"Action " + a.getId() + " already loaded");  }  actionsMap.put(a.getId(),a);}  }
class C{  public boolean createHTML(File file,boolean onlyTable,Language language){  return createHTML(file,onlyTable,language,null);}  }
class C{  @Override public void selectAll(){  Set<Figure> oldSelection=new HashSet<Figure>(selectedFigures);  selectedFigures.clear();  for (  Figure figure : drawing.getChildren()) {    if (figure.isSelectable()) {      selectedFigures.add(figure);    }  }  Set<Figure> newSelection=new HashSet<Figure>(selectedFigures);  invalidateHandles();  fireSelectionChanged(oldSelection,newSelection);  repaint();}  }
class C{  public boolean isSetBin(){  return this.bin != null;}  }
class C{  void draw(@NonNull Canvas canvas){synchronized (this) {    if (mIsEnable) {      mAnimator.setBaseLine(canvas,mDrawer.getWidth(),mDrawer.getHeight());      mAnimator.updateAnimParam(mAnimParameter);      mDrawer.draw(canvas,mAnimParameter.x,mAnimParameter.y,mAnimParameter.alpha,mAnimParameter.scaleX,mAnimParameter.scaleY,mAnimParameter.rotation);    }  }}  }
class C{  public byte[] take() throws KeeperException, InterruptedException {  TimerContext timer=stats.time(dir + "_take");  try {    Map<Long,String> orderedChildren=getChildren(Long.MAX_VALUE);    for (    String headNode : orderedChildren.values()) {      String path=dir + "/" + headNode;      try {        byte[] data=zookeeper.getData(path,null,null,true);        zookeeper.delete(path,-1,true);        return data;      } catch (      KeeperException.NoNodeException e) {      }    }    return null;  }  finally {    timer.stop();  }}  }
class C{  public void tagDefineTextField(int fieldId,String fieldName,String initialText,Rect boundary,int flags2,AlphaColor textColor,int alignment,int fontId,int fontSize,int charLimit,int leftMargin,int rightMargin,int indentation,int lineSpacing) throws IOException {  int flags=flags2 | 0x2005;  startTag(TAG_DEFINETEXTFIELD,fieldId,true);  boundary.write(out);  out.writeUI16(flags);  out.writeUI16(fontId);  out.writeUI16(fontSize);  textColor.write(out);  if ((flags & TEXTFIELD_LIMIT_CHARS) != 0) {    out.writeUI16(charLimit);  }  out.writeUI8(alignment);  out.writeUI16(leftMargin);  out.writeUI16(rightMargin);  out.writeUI16(indentation);  out.writeUI16(lineSpacing);  out.writeString(fieldName);  if ((flags & TEXTFIELD_HAS_TEXT) != 0) {    out.writeString(initialText);  }  completeTag();}  }
class C{  public void dismiss(){  if (DEBUG) {    Slog.d(TAG,"dismiss");  }  destroyScreenshotTexture();  destroyEglSurface();  destroySurface();  mPrepared=false;}  }
class C{  @Override public ImmutableSortedSet<K> keySet(){  return keySet;}  }
class C{  public boolean isSessionCancelled(){  return mSessionCancelled;}  }
class C{  public ClientMessenger(final String host,final int port,final String name,final String mac,final IObjectStreamFactory streamFact) throws IOException {  this(host,port,name,mac,streamFact,null);}  }
class C{  public static double heapFactor(String plan){  return get(plan).getHeapFactor();}  }
class C{  public TermCriteria(){  this(0,0,0.0);}  }
class C{  public ImageData(Object x){  this.dataArray=x;  this.byteSize=ArrayFuncs.computeLSize(x);}  }
class C{  public static void addCustomUserCommands(ContextMenu m){  if (userCustomCommands != null) {    addCustomCommands(userCustomCommands,m);  }}  }
class C{  public static int beS2(byte[] data,int bci){  return (data[bci] << 8) | (data[bci + 1] & 0xff);}  }
class C{  public Heap(E[] objects){  for (int i=0; i < objects.length; i++)   add(objects[i]);}  }
class C{  public Back(){  super();}  }
class C{  public MimeMessageParser(final MimeMessage message){  this.mimeMessage=message;}  }
class C{  private void handle423IntervalTooBrief(SipTransactionContext ctx) throws PayloadException, NetworkException {  try {    if (sLogger.isActivated()) {      sLogger.info("423 interval too brief response received");    }    SipResponse resp=ctx.getSipResponse();    mDialogPath.incrementCseq();    long minExpire=SipUtils.getMinExpiresPeriod(resp);    if (minExpire == -1) {      if (sLogger.isActivated()) {        sLogger.error("Can't read the Min-Expires value");      }      handleError(new ChatError(ChatError.SUBSCRIBE_CONFERENCE_FAILED,"No Min-Expires value found"));      return;    }    RegistryFactory.getFactory().writeLong(REGISTRY_MIN_EXPIRE_PERIOD,minExpire);    mExpirePeriod=minExpire;    SipRequest subscribe=createSubscribe(mDialogPath,mExpirePeriod);    mAuthenticationAgent.setProxyAuthorizationHeader(subscribe);    sendSubscribe(subscribe);  } catch (  InvalidArgumentException e) {    throw new PayloadException("Failed to handle interval too brief response!",e);  }catch (  ParseException e) {    throw new PayloadException("Failed to handle interval too brief response!",e);  }}  }
class C{  public static String removeHtmlElements(String s){  StringBuffer sb=new StringBuffer();  if (s != null) {    boolean skipping=false;    for (int i=0; i < s.length(); i++) {      char c=s.charAt(i);      if (!skipping) {        if (c == '<')         skipping=true; else         sb.append(c);      } else {        if (c == '>')         skipping=false;      }    }  } else {    return "";  }  return sb.toString();}  }
class C{  public Searcher() throws IOException {  searcher=new IndexSearcher(DirectoryReader.open(FSDirectory.open(Paths.get(INDEX_DIR))));  parser=new QueryParser(CONTENT_FIELD,new StandardAnalyzer());}  }
class C{  public MatPanel(){  initComponents();  setBounds(0,0,120,120);  toolBar.setVisible(false);  addMouseListener(this);  renderer=new MaterialPreviewRenderer(previewLabel);}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public void disableUnimplementedItems(final int ID){  final boolean debug=GUI.debugFX;  final int ALL=-10;  if (ID != ALL) {switch (ID) {case Commands.CONTINUOUS_FACING:      continuousFacingButton.setEnabled(debug);    break;case Commands.PAGEFLOW:  pageFlowButton.setEnabled(debug);break;case Commands.CONTINUOUS:continuousButton.setEnabled(debug);break;}} else {continuousFacingButton.setEnabled(debug);facingButton.setEnabled(debug);continuousButton.setEnabled(debug);}}  }
class C{  @Override public void mark(int readLimit) throws IOException {  if (readLimit >= 0) {synchronized (lock) {      if (isOpen()) {        markpos=pos;      } else {        throw new IOException("StringReader is closed");      }    }  } else {    throw new IllegalArgumentException();  }}  }
class C{  public void addEventListener(KeyChainEventListener listener,Executor executor){  checkNotNull(listener);  checkNotNull(executor);  basic.addEventListener(listener,executor);  for (  DeterministicKeyChain chain : chains)   chain.addEventListener(listener,executor);}  }
class C{  public void advance(){  moveToNextIndex();}  }
class C{  public static void testFindMissing(){  EightPuzzleNode s2=new EightPuzzleNode(new int[][]{{8,1,3},{7,2,5},{0,4,6}});  EightPuzzleNode goal=new EightPuzzleNode(new int[][]{{1,2,3},{8,0,4},{7,6,5}});  Solution sol=search(s2,goal);  long total=open.size() + closed.size();  System.out.println(s2 + "," + total+ ","+ sol.numMoves());  GoodEvaluator ge=new GoodEvaluator();  int max=Integer.MAX_VALUE;  INode best=null;  for (Iterator<INode> it=closed.iterator(); it.hasNext(); ) {    INode n=it.next();    if (ge.eval(n) < max) {      max=ge.eval(n);      best=n;    }  }  System.out.println("Closest:\n" + best + "(score:"+ max+ ")");}  }
class C{  public void unload(String name){  unload(name,false,false,false);}  }
class C{  public void testStressDirectBuffers() throws InterruptedException {  final long timeout=5000;  IBufferAccess tstdb=null, rcvdb=null;  int i=-1, sze=-1;  try {    tstdb=DirectBufferPool.INSTANCE.acquire();    rcvdb=DirectBufferPool.INSTANCE.acquire();    final ByteBuffer tst=tstdb.buffer();    final ByteBuffer rcv=rcvdb.buffer();    for (i=0; i < 1000; i++) {      sze=1 + r.nextInt(tst.capacity());      getRandomData(tst,sze);      final HAMessageWrapper msg=newHAWriteMessage(sze,tst);      assertEquals(0,tst.position());      assertEquals(sze,tst.limit());      final Future<Void> futRec=receiveService.receiveData(msg,rcv);      final Future<Void> futSnd=sendService.send(tst,msg.getMarker());      futSnd.get(timeout,TimeUnit.MILLISECONDS);      futRec.get(timeout,TimeUnit.MILLISECONDS);      assertEquals(tst,rcv);      if (log.isInfoEnabled() && (i < 10 || i % 10 == 0))       log.info("Looks good for #" + i);    }  } catch (  Throwable t) {    throw new RuntimeException("i=" + i + ", sze="+ sze+ " : "+ t,t);  } finally {    try {      if (tstdb != null) {        tstdb.release();      }    }  finally {      if (rcvdb != null) {        rcvdb.release();      }    }  }}  }
class C{  public boolean le(final Period another){  return this.lt(another) || this.eq(another);}  }
class C{  public int evaluate(Operand v1,Operand v2){  if (v1.isAddressConstant()) {    if (v2.isAddressConstant()) {      return evaluate(v1.asAddressConstant().value,v2.asAddressConstant().value);    } else     if (v2.isNullConstant()) {      return evaluate(v1.asAddressConstant().value,Address.zero());    } else     if (v2.isIntConstant()) {      return evaluate(v1.asAddressConstant().value,Address.fromIntSignExtend(v2.asIntConstant().value));    } else     if (v2.isObjectConstant() && !v2.isMovableObjectConstant()) {      return evaluate(v1.asAddressConstant().value,Magic.objectAsAddress(v2.asObjectConstant().value));    }  } else   if (v1.isIntConstant()) {    if (v2.isIntConstant()) {      return evaluate(v1.asIntConstant().value,v2.asIntConstant().value);    } else     if (v2.isNullConstant()) {      return evaluate(v1.asIntConstant().value,0);    } else     if (v2.isAddressConstant()) {      return evaluate(Address.fromIntSignExtend(v1.asIntConstant().value),v2.asAddressConstant().value);    } else     if (v2.isObjectConstant() && !v2.isMovableObjectConstant()) {      return evaluate(Address.fromIntSignExtend(v1.asIntConstant().value),Magic.objectAsAddress(v2.asObjectConstant().value));    }  } else   if (v1.isLongConstant()) {    if (v2.isLongConstant()) {      return evaluate(v1.asLongConstant().value,v2.asLongConstant().value);    }  } else   if (v1.isFloatConstant()) {    if (v2.isFloatConstant()) {      return evaluate(v1.asFloatConstant().value,v2.asFloatConstant().value);    }  } else   if (v1.isDoubleConstant()) {    if (v2.isDoubleConstant()) {      return evaluate(v1.asDoubleConstant().value,v2.asDoubleConstant().value);    }  } else   if (v1.isObjectConstant()) {    if (v2.isObjectConstant()) {      if (!v1.isMovableObjectConstant() && !v2.isMovableObjectConstant()) {        return evaluate(Magic.objectAsAddress(v1.asObjectConstant().value),Magic.objectAsAddress(v2.asObjectConstant().value));      } else       if (isEQUAL()) {        return (v1.asObjectConstant().value == v2.asObjectConstant().value) ? TRUE : FALSE;      } else       if (isNOT_EQUAL()) {        return (v1.asObjectConstant().value != v2.asObjectConstant().value) ? TRUE : FALSE;      }    }    if (v2.isNullConstant() || (v2.isIntConstant() && v2.asIntConstant().value == 0)) {      return evaluate(1,0);    }    if (!v1.isMovableObjectConstant()) {      if (v2.isIntConstant()) {        return evaluate(Magic.objectAsAddress(v1.asObjectConstant().value),Address.fromIntSignExtend(v2.asIntConstant().value));      } else       if (v2.isAddressConstant()) {        return evaluate(Magic.objectAsAddress(v1.asObjectConstant().value),v2.asAddressConstant().value);      } else       if (v2.isNullConstant()) {        return evaluate(Magic.objectAsAddress(v1.asObjectConstant().value),Address.zero());      }    }  } else   if (v1.isNullConstant()) {    if (v2.isNullConstant()) {      return evaluate(0,0);    } else     if (v2.isIntConstant()) {      return evaluate(0,v2.asIntConstant().value);    } else     if (v2.isAddressConstant()) {      return evaluate(Address.zero(),v2.asAddressConstant().value);    } else     if (v2.isObjectConstant()) {      if (!v2.isMovableObjectConstant()) {        return evaluate(Address.zero(),Magic.objectAsAddress(v2.asObjectConstant().value));      } else       if (isEQUAL()) {        return FALSE;      } else       if (isNOT_EQUAL()) {        return TRUE;      }    }  } else   if (v1.similar(v2) && !isFLOATINGPOINT()) {switch (value) {case EQUAL:case GREATER_EQUAL:case LESS_EQUAL:case HIGHER_EQUAL:case LOWER_EQUAL:      return TRUE;case NOT_EQUAL:case LESS:case GREATER:case HIGHER:case LOWER:case BORROW_FROM_SUB:case NO_BORROW_FROM_SUB:case BORROW_FROM_RSUB:case NO_BORROW_FROM_RSUB:case OVERFLOW_FROM_SUB:case NO_OVERFLOW_FROM_SUB:case OVERFLOW_FROM_RSUB:case NO_OVERFLOW_FROM_RSUB:    return FALSE;case CARRY_FROM_ADD:case NO_CARRY_FROM_ADD:case OVERFLOW_FROM_ADD:case NO_OVERFLOW_FROM_ADD:case BIT_TEST:case NO_BIT_TEST:case RBIT_TEST:case NO_RBIT_TEST:case OVERFLOW_FROM_MUL:case NO_OVERFLOW_FROM_MUL:  return UNKNOWN;default :throw new OptimizingCompilerException("invalid condition " + this);}}return UNKNOWN;}  }
class C{  @Override public float floatValue(){  return value;}  }
class C{  @Timed @ExceptionMetered @DELETE public Response disallowAccess(@Auth AutomationClient automationClient,@PathParam("secretId") LongParam secretId,@PathParam("groupId") LongParam groupId){  logger.info("Client '{}' disallowing groupId={} access to secretId={}",automationClient,secretId,groupId);  try {    Map<String,String> extraInfo=new HashMap<>();    extraInfo.put("deprecated","true");    aclDAO.findAndRevokeAccess(secretId.get(),groupId.get(),auditLog,automationClient.getName(),extraInfo);  } catch (  IllegalStateException e) {    throw new NotFoundException();  }  return Response.ok().build();}  }
class C{  public AlgorithmTerminationException(Algorithm algorithm,String message,Throwable cause){  super(algorithm,message,cause);}  }
class C{  public static Sail createSail(final Option... args){  return createSail(new Properties(),null,args);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  int numCols;  int numRows;  double z;  double noData;  float progress;  int i;  int numReclassRanges;  int numReclassRangesMinusOne;  String[] reclassRangeStr=null;  double[][] reclassRange;  boolean blnAssignMode=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      reclassRangeStr=args[i].split("\t");      if (reclassRangeStr[2].toLowerCase().equals("not specified")) {        blnAssignMode=true;      }    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    double[] data;    noData=image.getNoDataValue();    numReclassRanges=reclassRangeStr.length / 3;    numReclassRangesMinusOne=numReclassRanges - 1;    reclassRange=new double[3][numReclassRanges];    i=0;    for (int b=0; b < reclassRangeStr.length; b++) {      if (!reclassRangeStr[b].toLowerCase().equals("not specified")) {        if (!reclassRangeStr[b].toLowerCase().equals("nodata")) {          reclassRange[i][b / 3]=Double.parseDouble(reclassRangeStr[b]);        } else {          reclassRange[i][b / 3]=noData;        }      } else {        reclassRange[i][b / 3]=0;      }      i++;      if (i == 3) {        i=0;      }    }    if (numReclassRanges == 0) {      showFeedback("There is an error with the reclass ranges.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette(image.getPreferredPalette());    if (blnAssignMode) {      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          for (i=0; i < numReclassRanges; i++) {            if (data[col] == reclassRange[1][i]) {              output.setValue(row,col,reclassRange[0][i]);              break;            }            if (i == numReclassRangesMinusOne) {              output.setValue(row,col,data[col]);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }    } else {      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          for (i=0; i < numReclassRanges; i++) {            if (data[col] >= reclassRange[1][i] && data[col] < reclassRange[2][i]) {              output.setValue(row,col,reclassRange[0][i]);              break;            }            if (i == numReclassRangesMinusOne) {              output.setValue(row,col,data[col]);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }    }    image.close();    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static boolean isWindows(){  return osName.indexOf("Windows") > -1;}  }
class C{  public KeywordMap(boolean ignoreCase){  this(ignoreCase,52);  this.ignoreCase=ignoreCase;}  }
class C{  public void paintSplitPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  @SuppressLint("DefaultLocale") public final boolean contains(final String ssid){  boolean match=false;  for (  final String prefix : mPrefixes) {    if (ssid.toLowerCase().startsWith(prefix.toLowerCase())) {      match=true;      break;    }  }  if (match) {    return match;  }  for (  final String suffix : mSuffixes) {    if (ssid.toLowerCase().endsWith(suffix.toLowerCase())) {      match=true;      break;    }  }  return match;}  }
class C{  public boolean isClickEnabled(){  return mClickEnabled;}  }
class C{  public int processMessage(String app_id,String content_type,Intent intent) throws RemoteException {  Log.d(LOG_TAG,"wpman processMsg " + app_id + ":"+ content_type);  WapPushManDBHelper dbh=getDatabase(mContext);  SQLiteDatabase db=dbh.getReadableDatabase();  WapPushManDBHelper.queryData lastapp=dbh.queryLastApp(db,app_id,content_type);  db.close();  if (lastapp == null) {    Log.w(LOG_TAG,"no receiver app found for " + app_id + ":"+ content_type);    return WapPushManagerParams.APP_QUERY_FAILED;  }  if (LOCAL_LOGV)   Log.v(LOG_TAG,"starting " + lastapp.packageName + "/"+ lastapp.className);  if (lastapp.needSignature != 0) {    if (!signatureCheck(lastapp.packageName)) {      return WapPushManagerParams.SIGNATURE_NO_MATCH;    }  }  if (lastapp.appType == WapPushManagerParams.APP_TYPE_ACTIVITY) {    intent.setClassName(lastapp.packageName,lastapp.className);    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);    try {      mContext.startActivity(intent);    } catch (    ActivityNotFoundException e) {      Log.w(LOG_TAG,"invalid name " + lastapp.packageName + "/"+ lastapp.className);      return WapPushManagerParams.INVALID_RECEIVER_NAME;    }  } else {    intent.setClassName(mContext,lastapp.className);    intent.setComponent(new ComponentName(lastapp.packageName,lastapp.className));    if (mContext.startService(intent) == null) {      Log.w(LOG_TAG,"invalid name " + lastapp.packageName + "/"+ lastapp.className);      return WapPushManagerParams.INVALID_RECEIVER_NAME;    }  }  return WapPushManagerParams.MESSAGE_HANDLED | (lastapp.furtherProcessing == 1 ? WapPushManagerParams.FURTHER_PROCESSING : 0);}  }
class C{  public void destination(File file){  addArg("destination",FileMisc.asUrl(file));}  }
class C{  protected static BitSet[] deInterleave(BitSet bits){  BitSet[] sets=new BitSet[]{new BitStore(),new BitStore()};  int n=bits.size();  for (int i=0; i < n; i++) {    sets[i % 2].set((n - i - 1) / 2,bits.get(n - i - 1));  }  return sets;}  }
class C{  public TStream<byte[]> receiveBytes(){  return receiveBinary(null);}  }
class C{  public RefactoringStatusEntry(int severity,String msg){  this(severity,msg,null);}  }
class C{  @Override public void updateFloat(int columnIndex,float x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateFloat(" + columnIndex + ", "+ x+ "f);");    }    update(columnIndex,ValueFloat.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public File findAndCompile(File sourceRoot,String name,File classesRoot) throws IOException {  File source=null;  CompilerAdapter adapter=null;  for (  CompilerAdapter ca : adapters) {    source=ca.findSource(sourceRoot,name);    if (source != null) {      adapter=ca;      break;    }  }  if (adapter == null)   return null;  return adapter.compile(source,name,classesRoot);}  }
class C{  public static <K,V>void invalidate(IgniteCache<K,V> cache,K key){  cache.localClear(key);}  }
class C{  private static Double[] castToDouble(double[] d){  Double[] dest=new Double[d.length];  for (int i=0; i < d.length; i++) {    dest[i]=(Double)d[i];  }  return dest;}  }
class C{  public synchronized void updateIconsForPkg(String packageName,UserHandleCompat user){  removeIconsForPkg(packageName,user);  try {    PackageInfo info=mPackageManager.getPackageInfo(packageName,PackageManager.GET_UNINSTALLED_PACKAGES);    long userSerial=mUserManager.getSerialNumberForUser(user);    for (    LauncherActivityInfoCompat app : mLauncherApps.getActivityList(packageName,user)) {      addIconToDBAndMemCache(app,info,userSerial);    }  } catch (  NameNotFoundException e) {    Log.d(TAG,"Package not found",e);    return;  }}  }
class C{  public String convertStatement(String oraStatement){  Convert.logMigrationScript(oraStatement,null,null);  return oraStatement;}  }
class C{  public static FirstProjectionExpression first(String propertyName){  return new FirstProjectionExpression(getPropExpr(propertyName));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:13.777 -0500",hash_original_method="040ADD8FC534832950800B9A55359142",hash_generated_method="CEC3304389D4D8294AFF65C72E1F8D09") public void readItem(AttributeSet attrs){  TypedArray a=mContext.obtainStyledAttributes(attrs,com.android.internal.R.styleable.MenuItem);  itemId=a.getResourceId(com.android.internal.R.styleable.MenuItem_id,defaultItemId);  final int category=a.getInt(com.android.internal.R.styleable.MenuItem_menuCategory,groupCategory);  final int order=a.getInt(com.android.internal.R.styleable.MenuItem_orderInCategory,groupOrder);  itemCategoryOrder=(category & Menu.CATEGORY_MASK) | (order & Menu.USER_MASK);  itemTitle=a.getText(com.android.internal.R.styleable.MenuItem_title);  itemTitleCondensed=a.getText(com.android.internal.R.styleable.MenuItem_titleCondensed);  itemIconResId=a.getResourceId(com.android.internal.R.styleable.MenuItem_icon,0);  itemAlphabeticShortcut=getShortcut(a.getString(com.android.internal.R.styleable.MenuItem_alphabeticShortcut));  itemNumericShortcut=getShortcut(a.getString(com.android.internal.R.styleable.MenuItem_numericShortcut));  if (a.hasValue(com.android.internal.R.styleable.MenuItem_checkable)) {    itemCheckable=a.getBoolean(com.android.internal.R.styleable.MenuItem_checkable,false) ? 1 : 0;  } else {    itemCheckable=groupCheckable;  }  itemChecked=a.getBoolean(com.android.internal.R.styleable.MenuItem_checked,defaultItemChecked);  itemVisible=a.getBoolean(com.android.internal.R.styleable.MenuItem_visible,groupVisible);  itemEnabled=a.getBoolean(com.android.internal.R.styleable.MenuItem_enabled,groupEnabled);  itemShowAsAction=a.getInt(com.android.internal.R.styleable.MenuItem_showAsAction,-1);  itemListenerMethodName=a.getString(com.android.internal.R.styleable.MenuItem_onClick);  itemActionViewLayout=a.getResourceId(com.android.internal.R.styleable.MenuItem_actionLayout,0);  itemActionViewClassName=a.getString(com.android.internal.R.styleable.MenuItem_actionViewClass);  itemActionProviderClassName=a.getString(com.android.internal.R.styleable.MenuItem_actionProviderClass);  final boolean hasActionProvider=itemActionProviderClassName != null;  if (hasActionProvider && itemActionViewLayout == 0 && itemActionViewClassName == null) {    itemActionProvider=newInstance(itemActionProviderClassName,ACTION_PROVIDER_CONSTRUCTOR_SIGNATURE,mActionProviderConstructorArguments);  } else {    if (hasActionProvider) {      Log.w(LOG_TAG,"Ignoring attribute 'actionProviderClass'." + " Action view already specified.");    }    itemActionProvider=null;  }  a.recycle();  itemAdded=false;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.COMMENT___INLINE_COMMENT_1:    getInlineComment_1().clear();  getInlineComment_1().addAll((Collection<? extends InlineComment_>)newValue);return;case UmplePackage.COMMENT___MULTILINE_COMMENT_1:getMultilineComment_1().clear();getMultilineComment_1().addAll((Collection<? extends MultilineComment_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public boolean equals(Object obj,double eps){  if (obj instanceof Complex) {    Complex other=(Complex)obj;    if (Math.abs(this.real - other.real) > eps)     return false; else     if (Math.abs((this.imag - other.imag)) > eps)     return false;    return true;  }  return false;}  }
class C{  static public void assertEquals(double expected,double actual,double delta){  assertEquals(null,expected,actual,delta);}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  public KeyStoreTableModel(){  columnNames=new String[8];  columnNames[0]=res.getString("KeyStoreTableModel.TypeColumn");  columnNames[1]=res.getString("KeyStoreTableModel.LockStatusColumn");  columnNames[2]=res.getString("KeyStoreTableModel.CertExpiryStatusColumn");  columnNames[3]=res.getString("KeyStoreTableModel.NameColumn");  columnNames[4]=res.getString("KeyStoreTableModel.AlgorithmColumn");  columnNames[5]=res.getString("KeyStoreTableModel.KeySizeColumn");  columnNames[6]=res.getString("KeyStoreTableModel.CertExpiryColumn");  columnNames[7]=res.getString("KeyStoreTableModel.LastModifiedColumn");  data=new Object[0][0];}  }
class C{  private static boolean isSorted(Comparable[] a){  for (int i=1; i < a.length; i++)   if (less(a[i],a[i - 1]))   return false;  return true;}  }
class C{  private String doTransformation(String[] args){  List<String> argsList=new ArrayList<>();  for (  String arg : args) {switch (arg) {case "-i":      interactive=true;    break;case "-v":  verbose=true;break;case "-np":noPause=true;break;case "-nojmx":noJMX=true;break;default :argsList.add(arg);}}return reformatArguments(argsList);}  }
class C{  public void testMT() throws Exception {  tryMT(10,3);}  }
class C{  public MetaData modifyMetaData(MetaData unmodifiedMetaData){  return unmodifiedMetaData;}  }
class C{  private boolean isDiscardMode(){  return "true".equals(mArguments.getString("discard_screenshot_files"));}  }
class C{  @Override public void validate(final IDescription cd){}  }
class C{  @SafeVarargs public final AssertSubscriber<T> assertValues(T... expectedValues){  return assertValueSequence(Arrays.asList(expectedValues));}  }
class C{  public static boolean isKeyboardShowing(){  return showVKB || (System.currentTimeMillis() - closedTime) < 2000;}  }
class C{  private void saveToFile(boolean onlyName){  FollowerInfo info=lastValidInfo;  if (info != null) {    Path path=Paths.get(Chatty.getUserDataDirectory(),"exported");    Path file=path.resolve(StringUtil.toLowerCase(type.toString()) + ".txt");    try {      Files.createDirectories(path);      try (BufferedWriter writer=Files.newBufferedWriter(file,Charset.forName("UTF-8"))){        for (        Follower f : lastValidInfo.followers) {          writer.write(f.name);          if (!onlyName) {            writer.write("\t" + DateTime.formatFullDatetime(f.time));            writer.write(" (" + DateTime.agoSingleVerbose(f.time) + ")");          }          writer.newLine();        }      }     } catch (    IOException ex) {      JOptionPane.showMessageDialog(this,ex,"Failed to write file.",JOptionPane.ERROR_MESSAGE);      return;    }    JOptionPane.showMessageDialog(this,type + " exported to: " + file,"File written.",JOptionPane.INFORMATION_MESSAGE);  } else {    JOptionPane.showMessageDialog(this,"No data to write.","Failed to write file.",JOptionPane.ERROR_MESSAGE);  }}  }
class C{  public boolean isColfill(){  return colfill;}  }
class C{  public Duration minusHours(long hoursToSubtract){  return (hoursToSubtract == Long.MIN_VALUE ? plusHours(Long.MAX_VALUE).plusHours(1) : plusHours(-hoursToSubtract));}  }
class C{  @Override protected void onRestoreInstanceState(Bundle savedInstanceState){  super.onRestoreInstanceState(savedInstanceState);  if (savedInstanceState != null) {    mLogTextView.setText(Html.fromHtml(savedInstanceState.getString(LOG_TEXT_KEY)));  }}  }
class C{  public void load(InputStream in) throws IOException {  BufferedReader input=IOUtil.toBufferedReader(new InputStreamReader(in));  String read;  Map section=null;  String sectionName;  while ((read=input.readLine()) != null) {    if (read.startsWith(";") || read.startsWith("#")) {      continue;    } else     if (read.startsWith("[")) {      sectionName=read.substring(1,read.indexOf("]")).trim().toLowerCase();      section=getSectionEL(sectionName);      if (section == null) {        section=newMap();        sections.put(sectionName,section);      }    } else     if (read.indexOf("=") != -1 && section != null) {      String key=read.substring(0,read.indexOf("=")).trim().toLowerCase();      String value=read.substring(read.indexOf("=") + 1).trim();      section.put(key,value);    }  }}  }
class C{  static void exhaustInputStream(final InputStream inStream) throws IOException {  byte buffer[]=new byte[1024];  while (inStream.read(buffer) >= 0) {    ;  }}  }
class C{  protected void makeGeometry(ShapeData shapeData){  if (this.wedgeAngle == null) {    String message=Logging.getMessage("nullValue.AngleIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Object cacheKey=new Geometry.CacheKey(this.getClass(),"Wedge0-" + this.wedgeAngle.toString(),this.subdivisions);  Geometry geom=(Geometry)this.getGeometryCache().getObject(cacheKey);  if (geom == null) {    makeUnitWedge(this.subdivisions,shapeData.getMeshes());    for (int piece=0; piece < getFaceCount(); piece++) {      if (offsets.get(piece) == null)       offsets.put(piece,new OffsetsList());      cacheKey=new Geometry.CacheKey(this.getClass(),"Wedge" + piece + "-"+ this.wedgeAngle.toString(),this.subdivisions);      this.getGeometryCache().add(cacheKey,shapeData.getMesh(piece));    }  } else {    for (int piece=0; piece < getFaceCount(); piece++) {      if (offsets.get(piece) == null)       offsets.put(piece,new OffsetsList());      cacheKey=new Geometry.CacheKey(this.getClass(),"Wedge" + piece + "-"+ this.wedgeAngle.toString(),this.subdivisions);      geom=(Geometry)this.getGeometryCache().getObject(cacheKey);      shapeData.addMesh(piece,geom);    }  }}  }
class C{  HeaderRenderer(){  add(header);  header.setBorder(null);}  }
class C{  @SuppressWarnings("unused") private SpecificMessage(){}  }
class C{  public boolean hasMetadataNodes(DefaultMutableTreeNode node){  for (Enumeration<?> e=node.children(); e.hasMoreElements(); ) {    DefaultMutableTreeNode n=(DefaultMutableTreeNode)e.nextElement();    Object uo=n.getUserObject();    if (uo instanceof XNodeInfo) {switch (((XNodeInfo)uo).getType()) {case ATTRIBUTES:case NOTIFICATIONS:case OPERATIONS:        return true;default :      break;  }} else {  return false;}}return false;}  }
class C{  public void parseArguments(String[] args,boolean failOnMissingRequiredOptions) throws ParseException {  CommandLineParser parser=new DefaultParser();  commandLine=parser.parse(failOnMissingRequiredOptions ? options : optionsIgnoreRequired,args);}  }
class C{  public void init(Coordinate p1,Coordinate p2){  init(p1.x,p2.x,p1.y,p2.y);}  }
class C{  static BigInteger multiplyByPositiveInt(BigInteger val,int factor){  BigInt bi=val.getBigInt().copy();  bi.multiplyByPositiveInt(factor);  return new BigInteger(bi);}  }
class C{  void compact(ConstPool cp){  name=cp.addUtf8Info(getName());  descriptor=cp.addUtf8Info(getDescriptor());  attribute=AttributeInfo.copyAll(attribute,cp);  constPool=cp;}  }
class C{  public StrBuilder replaceFirst(char search,char replace){  if (search != replace) {    for (int i=0; i < size; i++) {      if (buffer[i] == search) {        buffer[i]=replace;        break;      }    }  }  return this;}  }
class C{  public SpkacMissingPropertyException(Throwable causeThrowable){  super(causeThrowable);}  }
class C{  private static Mode decodeAsciiSegment(BitSource bits,StringBuilder result,StringBuilder resultTrailer) throws FormatException {  boolean upperShift=false;  do {    int oneByte=bits.readBits(8);    if (oneByte == 0) {      throw FormatException.getFormatInstance();    } else     if (oneByte <= 128) {      if (upperShift) {        oneByte+=128;      }      result.append((char)(oneByte - 1));      return Mode.ASCII_ENCODE;    } else     if (oneByte == 129) {      return Mode.PAD_ENCODE;    } else     if (oneByte <= 229) {      int value=oneByte - 130;      if (value < 10) {        result.append('0');      }      result.append(value);    } else     if (oneByte == 230) {      return Mode.C40_ENCODE;    } else     if (oneByte == 231) {      return Mode.BASE256_ENCODE;    } else     if (oneByte == 232) {      result.append((char)29);    } else     if (oneByte == 233 || oneByte == 234) {    } else     if (oneByte == 235) {      upperShift=true;    } else     if (oneByte == 236) {      result.append("[)>\u001E05\u001D");      resultTrailer.insert(0,"\u001E\u0004");    } else     if (oneByte == 237) {      result.append("[)>\u001E06\u001D");      resultTrailer.insert(0,"\u001E\u0004");    } else     if (oneByte == 238) {      return Mode.ANSIX12_ENCODE;    } else     if (oneByte == 239) {      return Mode.TEXT_ENCODE;    } else     if (oneByte == 240) {      return Mode.EDIFACT_ENCODE;    } else     if (oneByte == 241) {    } else     if (oneByte >= 242) {      if (oneByte != 254 || bits.available() != 0) {        throw FormatException.getFormatInstance();      }    }  } while (bits.available() > 0);  return Mode.ASCII_ENCODE;}  }
class C{  public boolean storesLowerCaseIdentifiers() throws SQLException {  return false;}  }
class C{  private void sendStageProgressPatch(final State current){  if (current.isSelfProgressionDisabled) {    ServiceUtils.logInfo(this,"Skipping patch handling (disabled)");    return;  }  Operation patch=Operation.createPatch(UriUtils.buildUri(getHost(),getSelfLink())).setBody(current);  this.sendRequest(patch);}  }
class C{  protected void generatePseudoBishopMoves(PriorityMoveList moves){  long fromBB=getPieceBB(colorToMove,BISHOP);  while (fromBB != 0) {    int fromSquare=bitscanForward(fromBB);    long toBB=diagonalMove(fromSquare,emptyBB,occupiedBB) & getNotColorToMoveBB();    while (toBB != 0) {      int toSquare=bitscanForward(toBB);      int contents=getPieceWithPromoteMask(toSquare);      addMove(new Move(fromSquare,toSquare,getPieceWithPromoteMask(fromSquare),colorToMove,contents),moves);      toBB=bitscanClear(toBB);    }    fromBB=bitscanClear(fromBB);  }}  }
class C{  private void layout(int width,int height){  int itemsWidth=width - 2 * PADDING;  itemsLayout.layout(0,0,itemsWidth,height);}  }
class C{  public void waitFor(int state) throws IOException, InterruptedException {  while (!file.exists() || (get() != state)) {    Thread.sleep(pollRate);  }}  }
class C{  public Inv(){  super("inv",1);}  }
class C{  public Pipeline(Consumer<O> consumer){  this.consumer=consumer;}  }
class C{  public static void attributeInexistent(String attributeName,Class<?> aClass){  throw new IllegalArgumentException(MSG.INSTANCE.message(malformedBeanException2,attributeName,aClass.getSimpleName()));}  }
class C{  public static void w(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_WARNING) {    return;  }  Log.w(tag,msg,throwable);}  }
class C{  protected void rejectMaxMessageSizeExceeded(int messageSize) throws MessagingException {  if (!isLeaveMaxMessageSizeExceeded())   setMessageDeleted();  if (isMarkMaxMessageSizeExceededSeen())   setMessageSeen();  StringBuilder messageBuffer=new StringBuilder("Rejected mail exceeding message size limit. Message size: ");  messageBuffer.append(messageSize / 1024);  messageBuffer.append("KB.");  logStatusInfo(messageBuffer.toString());}  }
class C{  void addFormat(StringBuilder sb){  if ((options.contentDataType == CollectionDescriptor.BLOB_CONTENT) || (options.contentDataType == CollectionDescriptor.RAW_CONTENT))   sb.append(" format json");}  }
class C{  public void actionPerformed(ActionEvent e){  DataModel dataModel=getDataEditor().getSelectedDataModel();  if (dataModel instanceof DataSet) {    DataSet dataSet=(DataSet)dataModel;    if (!(dataSet.isContinuous())) {      JOptionPane.showMessageDialog(JOptionUtils.centeringComp(),"Must be a continuous data set " + "or a covariance (or correlation) matrix.");      return;    }    CovarianceMatrix corrMatrix=new CovarianceMatrix(dataSet);    DataModelList list=new DataModelList();    list.add(corrMatrix);    getDataEditor().reset(list);    getDataEditor().selectFirstTab();  } else   if (dataModel instanceof ICovarianceMatrix) {    CovarianceMatrix covMatrix1=(CovarianceMatrix)dataModel;    CovarianceMatrix covMatrix2=new CovarianceMatrix(covMatrix1);    DataModelList list=new DataModelList();    list.add(covMatrix2);    getDataEditor().reset(list);    getDataEditor().selectFirstTab();  } else {    JOptionPane.showMessageDialog(JOptionUtils.centeringComp(),"Must be a continuous data set " + "or a covariance (or correlation) matrix.");  }}  }
class C{  public void testPutTxOptimistic() throws Exception {  testPutTx(keyForNode(0),OPTIMISTIC);  if (gridCount() > 1)   testPutTx(keyForNode(1),OPTIMISTIC);}  }
class C{  public void render(boolean draw){  render(null,draw);}  }
class C{  public UniformGenerator(double radius){  this.radius=radius;}  }
class C{  private void tailOverflow(int arity){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(arity == queue.getArity());  if (tail.NE(Deque.TAIL_INITIAL_VALUE)) {    closeAndEnqueueTail(arity);  }  tail=queue.alloc().plus(bufferSentinel(arity));  tailBufferEnd=tail;}  }
class C{  public CertHashBasedOcspResponder(){  this(SystemProperties.getOcspResponderListenAddress());}  }
class C{  public JFrame constructApplicationFrame(){  JFrame frame=new JFrame();  JPanel panel=new ConnectFourPanel();  frame.add(panel,BorderLayout.CENTER);  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  return frame;}  }
class C{  public void removeSubtitleFileType(String type){  if (!type.startsWith(".")) {    type="." + type;  }  subtitleFileTypes.remove(type);  firePropertyChange(SUBTITLE_FILE_TYPE,null,subtitleFileTypes);}  }
class C{  public MemberSelectTree buildHasNextMethodAccess(ExpressionTree iteratorExpr){  DeclaredType exprType=(DeclaredType)InternalUtils.typeOf(iteratorExpr);  assert exprType != null : "expression must be of declared type Iterator<>";  TypeElement exprElement=(TypeElement)exprType.asElement();  Symbol.MethodSymbol hasNextMethod=null;  for (  ExecutableElement method : ElementFilter.methodsIn(elements.getAllMembers(exprElement))) {    Name methodName=method.getSimpleName();    if (method.getParameters().size() == 0) {      if (methodName.contentEquals("hasNext")) {        hasNextMethod=(Symbol.MethodSymbol)method;      }    }  }  assert hasNextMethod != null : "no hasNext method declared for expression type";  JCTree.JCFieldAccess hasNextAccess=(JCTree.JCFieldAccess)maker.Select((JCTree.JCExpression)iteratorExpr,hasNextMethod);  hasNextAccess.setType(hasNextMethod.asType());  return hasNextAccess;}  }
class C{  @Override public void disconnectionNotification(String eventName,Object source){  m_listenees.remove(source);  if (m_listenees.size() == 0) {    m_listeneeTypes.clear();  }}  }
class C{  public static void main(String[] args){  boolean markExceptLast=false;  String segmentationMarker="#";  for (  String arg : args) {    if (arg.equals("-help")) {      System.err.printf("Usage: java %s [-help] [-mark_except_last] [-m###] < plf_file%n\n" + "    -mark_except_last : Marks each segment except the last (headword) of the compound,\n" + "                           instead of the default of marking each segment except the first\n"+ "    -m### :             Uses the marker given by the characters following the -m to mark\n"+ "                           segmented parts, instead of the default #\n",Lattice.class.getName());      System.exit(-1);    } else     if (arg.equals("-mark_except_last")) {      markExceptLast=true;    } else     if (arg.startsWith("-m")) {      segmentationMarker=arg.substring(2);    }  }  BufferedReader reader=new BufferedReader(new InputStreamReader(new BufferedInputStream(System.in)));  try {    for (String line; (line=reader.readLine()) != null; ) {      if (line.length() == 0 || line.equals("()")) {        System.out.println();        continue;      }      Lattice<String> lattice=Lattice.plfStringToLattice(line,true);      List<Edge<String>> bestPath=lattice.viterbiPath();      boolean printSpace=false;      for (int i=0; i < bestPath.size(); i++) {        Edge<String> edge=bestPath.get(i);        if (printSpace)         System.out.print(" ");        if (markExceptLast) {          if (i < bestPath.size() - 1 && !bestPath.get(i + 1).start().isPinchPoint())           System.out.print(segmentationMarker);        } else {          if (!edge.start().isPinchPoint())           System.out.print(segmentationMarker);        }        System.out.print(edge.item());        printSpace=true;      }      System.out.println();    }  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  protected WildcardImpl(){  super();}  }
class C{  @Override public void generateCode(BlockScope currentScope){  if ((this.bits & IsReachable) == 0) {    return;  }  Constant cst=this.condition.optimizedBooleanConstant();  boolean isConditionOptimizedFalse=cst != Constant.NotAConstant && cst.booleanValue() == false;  if (isConditionOptimizedFalse) {    this.condition.generateCode(currentScope,false);    return;  }  if (this.continueLabel == null) {    if (this.condition.constant == Constant.NotAConstant) {      this.condition.generateOptimizedBoolean(currentScope,null,this.breakLabel,true);    }  }  BranchLabel actionLabel=new BranchLabel();  if (this.action != null) {    actionLabel.tagBits|=BranchLabel.USED;    if (this.condIfTrueInitStateIndex != -1) {    }    this.action.generateCode(currentScope);  }  if (this.continueLabel != null) {    this.condition.generateOptimizedBoolean(currentScope,actionLabel,null,true);  }}  }
class C{  @Override public void installUI(JComponent c){  upperThumbRect=new Rectangle();  super.installUI(c);}  }
class C{  public List<Object> buildJavaMethodParameters(AssetOptionsContext context,Map<String,String> availableAssets,AssetOptionsMethodInfo assetMethod){  final List<Object> javaMethodParameters=Lists.newArrayList();  javaMethodParameters.add(context);  for (  String parentAssetName : assetMethod.assetDependencies) {    String parentAssetValue=availableAssets.get(parentAssetName);    int index=javaMethodParameters.size();    Object value=assetMethod.convertParameter(index,parentAssetValue);    javaMethodParameters.add(value);  }  return javaMethodParameters;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(DirectX9SageRenderer.hasDirectX9());}  }
class C{  protected void resetNextNewNodeId() throws Exception {  m_nextNewNodeId=SboType.NULL_ID;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:57.027 -0500",hash_original_method="F400F1CB4F55C1DB38DB506118AEBF9E",hash_generated_method="399E1A91FCB7925032E7C1A70F4E4379") public int[] startSubnegotiationLocal(){  return null;}  }
class C{  static AttrVersion createFromString(final String str) throws BOSHException {  if (str == null) {    return null;  } else {    return new AttrVersion(str);  }}  }
class C{  protected Program_Impl(){  super();}  }
class C{  @Override public void closeOtherTabs(){  int inactiveTabs=mTabControl.getTabCount() - 1;  for (int i=inactiveTabs; i >= 0; i--) {    Tab tab=mTabControl.getTab(i);    if (tab != mTabControl.getCurrentTab()) {      removeTab(tab);    }  }}  }
class C{  public Level firstLevel(){  return this.levels.length > 0 ? this.levels[0] : null;}  }
class C{  public BufferedDataInputStream(InputStream is) throws IOException {  super(is);  this.initFields();  this.len=this.in.read(this.buff);  Assert.check(this.len != 0,EC.SYSTEM_STREAM_EMPTY);}  }
class C{  public void testLoginException01(){  LoginException lE=new LoginException();  assertNull("getMessage() must return null.",lE.getMessage());  assertNull("getCause() must return null",lE.getCause());}  }
class C{  @Override public void truncate(long len) throws SQLException {  throw unsupported("LOB update");}  }
class C{  public Partition createDestPartition(Cluster srcCluster,Cluster destCluster,Partition srcPartition,Partition existingDestPartition){  Partition destPartition=new Partition(srcPartition);  Optional<Path> srcLocation=ReplicationUtils.getLocation(srcPartition);  if (srcLocation.isPresent() && !srcLocation.get().toString().startsWith("s3")) {    String destLocation=modifyLocation(srcCluster,destCluster,srcLocation.get().toString());    destPartition.getSd().setLocation(destLocation);  }  destPartition.putToParameters(HiveParameterKeys.SRC_CLUSTER,srcCluster.getName());  if (existingDestPartition != null) {    Map<String,String> newParameters=new HashMap<>();    newParameters.putAll(existingDestPartition.getParameters());    newParameters.putAll(destPartition.getParameters());  }  return destPartition;}  }
class C{  private void removeDeletedVolumeReference(DbClient dbClient,Volume deletedVolume){  if (deletedVolume != null && !NullColumnValueGetter.isNullURI(deletedVolume.getAssociatedSourceVolume())) {    Volume srcVolume=dbClient.queryObject(Volume.class,deletedVolume.getAssociatedSourceVolume());    if (srcVolume != null) {      srcVolume.getFullCopies().remove(deletedVolume.getId().toString());      dbClient.persistObject(srcVolume);    }  }}  }
class C{  public void fireNeuronAdded(final Neuron added){  for (  NeuronListener listener : neuronListeners) {    listener.neuronAdded(new NetworkEvent<Neuron>(this,added));  }}  }
class C{  public DoubleRange(String label,double minIn,boolean minInclusive,double maxIn,boolean maxInclusive){  super(label);  if (Double.isNaN(minIn)) {    throw new IllegalArgumentException("min cannot be NaN");  }  if (!minInclusive) {    minIn=Math.nextUp(minIn);  }  if (Double.isNaN(maxIn)) {    throw new IllegalArgumentException("max cannot be NaN");  }  if (!maxInclusive) {    maxIn=Math.nextAfter(maxIn,Double.NEGATIVE_INFINITY);  }  if (minIn > maxIn) {    failNoMatch();  }  this.min=minIn;  this.max=maxIn;}  }
class C{  public CThreadInformationPanel(final CDebugPerspectiveModel debugPerspectiveModel){  super(new BorderLayout());  Preconditions.checkNotNull(debugPerspectiveModel,"IE00647: Debug perspective model argument can not be null");  m_debugPerspectiveModel=debugPerspectiveModel;  add(new JScrollPane(m_table));  m_synchronizer=new CThreadInformationTableSynchronizer(m_table,debugPerspectiveModel);  m_table.addMouseListener(new InternalMouseListener());}  }
class C{  public void insertThinkTime(){  ScriptStep thinkTimeScriptStep=ScriptStepFactory.createThinkTime(getMinThinkTime(),getMaxThinkTime());  steps.add(getInsertIndex(),thinkTimeScriptStep);  minThinkTime="";  maxThinkTime="";  reindexScriptSteps();}  }
class C{  public static Formatter formatDateRange(Context context,Formatter formatter,long startMillis,long endMillis,int flags,String timeZone){  Resources res=Resources.getSystem();  boolean showTime=(flags & FORMAT_SHOW_TIME) != 0;  boolean showWeekDay=(flags & FORMAT_SHOW_WEEKDAY) != 0;  boolean showYear=(flags & FORMAT_SHOW_YEAR) != 0;  boolean noYear=(flags & FORMAT_NO_YEAR) != 0;  boolean useUTC=(flags & FORMAT_UTC) != 0;  boolean abbrevWeekDay=(flags & (FORMAT_ABBREV_WEEKDAY | FORMAT_ABBREV_ALL)) != 0;  boolean abbrevMonth=(flags & (FORMAT_ABBREV_MONTH | FORMAT_ABBREV_ALL)) != 0;  boolean noMonthDay=(flags & FORMAT_NO_MONTH_DAY) != 0;  boolean numericDate=(flags & FORMAT_NUMERIC_DATE) != 0;  boolean isInstant=(startMillis == endMillis);  Calendar startCalendar, endCalendar;  Time startDate=new Time();  if (timeZone != null) {    startCalendar=Calendar.getInstance(TimeZone.getTimeZone(timeZone));  } else   if (useUTC) {    startCalendar=Calendar.getInstance(TimeZone.getTimeZone("UTC"));  } else {    startCalendar=Calendar.getInstance();  }  startCalendar.setTimeInMillis(startMillis);  setTimeFromCalendar(startDate,startCalendar);  Time endDate=new Time();  int dayDistance;  if (isInstant) {    endDate=startDate;    dayDistance=0;  } else {    if (timeZone != null) {      endCalendar=Calendar.getInstance(TimeZone.getTimeZone(timeZone));    } else     if (useUTC) {      endCalendar=Calendar.getInstance(TimeZone.getTimeZone("UTC"));    } else {      endCalendar=Calendar.getInstance();    }    endCalendar.setTimeInMillis(endMillis);    setTimeFromCalendar(endDate,endCalendar);    int startJulianDay=Time.getJulianDay(startMillis,startDate.gmtoff);    int endJulianDay=Time.getJulianDay(endMillis,endDate.gmtoff);    dayDistance=endJulianDay - startJulianDay;  }  if (!isInstant && (endDate.hour | endDate.minute | endDate.second) == 0 && (!showTime || dayDistance <= 1)) {    endDate.monthDay-=1;    endDate.normalize(true);  }  int startDay=startDate.monthDay;  int startMonthNum=startDate.month;  int startYear=startDate.year;  int endDay=endDate.monthDay;  int endMonthNum=endDate.month;  int endYear=endDate.year;  String startWeekDayString="";  String endWeekDayString="";  if (showWeekDay) {    String weekDayFormat="";    if (abbrevWeekDay) {      weekDayFormat=ABBREV_WEEKDAY_FORMAT;    } else {      weekDayFormat=WEEKDAY_FORMAT;    }    startWeekDayString=startDate.format(weekDayFormat);    endWeekDayString=isInstant ? startWeekDayString : endDate.format(weekDayFormat);  }  String startTimeString="";  String endTimeString="";  if (showTime) {    String startTimeFormat="";    String endTimeFormat="";    boolean force24Hour=(flags & FORMAT_24HOUR) != 0;    boolean force12Hour=(flags & FORMAT_12HOUR) != 0;    boolean use24Hour;    if (force24Hour) {      use24Hour=true;    } else     if (force12Hour) {      use24Hour=false;    } else {      use24Hour=DateFormat.is24HourFormat(context);    }    if (use24Hour) {      startTimeFormat=endTimeFormat=res.getString(com.android.internal.R.string.hour_minute_24);    } else {      boolean abbrevTime=(flags & (FORMAT_ABBREV_TIME | FORMAT_ABBREV_ALL)) != 0;      boolean capAMPM=(flags & FORMAT_CAP_AMPM) != 0;      boolean noNoon=(flags & FORMAT_NO_NOON) != 0;      boolean capNoon=(flags & FORMAT_CAP_NOON) != 0;      boolean noMidnight=(flags & FORMAT_NO_MIDNIGHT) != 0;      boolean capMidnight=(flags & FORMAT_CAP_MIDNIGHT) != 0;      boolean startOnTheHour=startDate.minute == 0 && startDate.second == 0;      boolean endOnTheHour=endDate.minute == 0 && endDate.second == 0;      if (abbrevTime && startOnTheHour) {        if (capAMPM) {          startTimeFormat=res.getString(com.android.internal.R.string.hour_cap_ampm);        } else {          startTimeFormat=res.getString(com.android.internal.R.string.hour_ampm);        }      } else {        if (capAMPM) {          startTimeFormat=res.getString(com.android.internal.R.string.hour_minute_cap_ampm);        } else {          startTimeFormat=res.getString(com.android.internal.R.string.hour_minute_ampm);        }      }      if (!isInstant) {        if (abbrevTime && endOnTheHour) {          if (capAMPM) {            endTimeFormat=res.getString(com.android.internal.R.string.hour_cap_ampm);          } else {            endTimeFormat=res.getString(com.android.internal.R.string.hour_ampm);          }        } else {          if (capAMPM) {            endTimeFormat=res.getString(com.android.internal.R.string.hour_minute_cap_ampm);          } else {            endTimeFormat=res.getString(com.android.internal.R.string.hour_minute_ampm);          }        }        if (endDate.hour == 12 && endOnTheHour && !noNoon) {          if (capNoon) {            endTimeFormat=res.getString(com.android.internal.R.string.Noon);          } else {            endTimeFormat=res.getString(com.android.internal.R.string.noon);          }        } else         if (endDate.hour == 0 && endOnTheHour && !noMidnight) {          if (capMidnight) {            endTimeFormat=res.getString(com.android.internal.R.string.Midnight);          } else {            endTimeFormat=res.getString(com.android.internal.R.string.midnight);          }        }      }      if (startDate.hour == 12 && startOnTheHour && !noNoon) {        if (capNoon) {          startTimeFormat=res.getString(com.android.internal.R.string.Noon);        } else {          startTimeFormat=res.getString(com.android.internal.R.string.noon);        }      }    }    startTimeString=startDate.format(startTimeFormat);    endTimeString=isInstant ? startTimeString : endDate.format(endTimeFormat);  }  if (showYear) {  } else   if (noYear) {    showYear=false;  } else   if (startYear != endYear) {    showYear=true;  } else {    Time currentTime=new Time();    currentTime.setToNow();    showYear=startYear != currentTime.year;  }  String defaultDateFormat, fullFormat, dateRange;  if (numericDate) {    defaultDateFormat=res.getString(com.android.internal.R.string.numeric_date);  } else   if (showYear) {    if (abbrevMonth) {      if (noMonthDay) {        defaultDateFormat=res.getString(com.android.internal.R.string.abbrev_month_year);      } else {        defaultDateFormat=res.getString(com.android.internal.R.string.abbrev_month_day_year);      }    } else {      if (noMonthDay) {        defaultDateFormat=res.getString(com.android.internal.R.string.month_year);      } else {        defaultDateFormat=res.getString(com.android.internal.R.string.month_day_year);      }    }  } else {    if (abbrevMonth) {      if (noMonthDay) {        defaultDateFormat=res.getString(com.android.internal.R.string.abbrev_month);      } else {        defaultDateFormat=res.getString(com.android.internal.R.string.abbrev_month_day);      }    } else {      if (noMonthDay) {        defaultDateFormat=res.getString(com.android.internal.R.string.month);      } else {        defaultDateFormat=res.getString(com.android.internal.R.string.month_day);      }    }  }  if (showWeekDay) {    if (showTime) {      fullFormat=res.getString(com.android.internal.R.string.wday1_date1_time1_wday2_date2_time2);    } else {      fullFormat=res.getString(com.android.internal.R.string.wday1_date1_wday2_date2);    }  } else {    if (showTime) {      fullFormat=res.getString(com.android.internal.R.string.date1_time1_date2_time2);    } else {      fullFormat=res.getString(com.android.internal.R.string.date1_date2);    }  }  if (noMonthDay && startMonthNum == endMonthNum && startYear == endYear) {    return formatter.format("%s",startDate.format(defaultDateFormat));  }  if (startYear != endYear || noMonthDay) {    String startDateString=startDate.format(defaultDateFormat);    String endDateString=endDate.format(defaultDateFormat);    return formatter.format(fullFormat,startWeekDayString,startDateString,startTimeString,endWeekDayString,endDateString,endTimeString);  }  String monthFormat;  if (numericDate) {    monthFormat=NUMERIC_MONTH_FORMAT;  } else   if (abbrevMonth) {    monthFormat=res.getString(com.android.internal.R.string.short_format_month);  } else {    monthFormat=MONTH_FORMAT;  }  String startMonthString=startDate.format(monthFormat);  String startMonthDayString=startDate.format(MONTH_DAY_FORMAT);  String startYearString=startDate.format(YEAR_FORMAT);  String endMonthString=isInstant ? null : endDate.format(monthFormat);  String endMonthDayString=isInstant ? null : endDate.format(MONTH_DAY_FORMAT);  String endYearString=isInstant ? null : endDate.format(YEAR_FORMAT);  String startStandaloneMonthString=startMonthString;  String endStandaloneMonthString=endMonthString;  if (!numericDate && !abbrevMonth && Locale.getDefault().getLanguage().equals("fa")) {    startStandaloneMonthString=startDate.format("%-B");    endStandaloneMonthString=endDate.format("%-B");  }  if (startMonthNum != endMonthNum) {    int index=0;    if (showWeekDay)     index=1;    if (showYear)     index+=2;    if (showTime)     index+=4;    if (numericDate)     index+=8;    int resId=sameYearTable[index];    fullFormat=res.getString(resId);    return formatter.format(fullFormat,startWeekDayString,startMonthString,startMonthDayString,startYearString,startTimeString,endWeekDayString,endMonthString,endMonthDayString,endYearString,endTimeString,startStandaloneMonthString,endStandaloneMonthString);  }  if (startDay != endDay) {    int index=0;    if (showWeekDay)     index=1;    if (showYear)     index+=2;    if (showTime)     index+=4;    if (numericDate)     index+=8;    int resId=sameMonthTable[index];    fullFormat=res.getString(resId);    return formatter.format(fullFormat,startWeekDayString,startMonthString,startMonthDayString,startYearString,startTimeString,endWeekDayString,endMonthString,endMonthDayString,endYearString,endTimeString,startStandaloneMonthString,endStandaloneMonthString);  }  boolean showDate=(flags & FORMAT_SHOW_DATE) != 0;  if (!showTime && !showDate && !showWeekDay)   showDate=true;  String timeString="";  if (showTime) {    if (isInstant) {      timeString=startTimeString;    } else {      String timeFormat=res.getString(com.android.internal.R.string.time1_time2);      timeString=String.format(timeFormat,startTimeString,endTimeString);    }  }  fullFormat="";  String dateString="";  if (showDate) {    dateString=startDate.format(defaultDateFormat);    if (showWeekDay) {      if (showTime) {        fullFormat=res.getString(com.android.internal.R.string.time_wday_date);      } else {        fullFormat=res.getString(com.android.internal.R.string.wday_date);      }    } else {      if (showTime) {        fullFormat=res.getString(com.android.internal.R.string.time_date);      } else {        return formatter.format("%s",dateString);      }    }  } else   if (showWeekDay) {    if (showTime) {      fullFormat=res.getString(com.android.internal.R.string.time_wday);    } else {      return formatter.format("%s",startWeekDayString);    }  } else   if (showTime) {    return formatter.format("%s",timeString);  }  return formatter.format(fullFormat,timeString,startWeekDayString,dateString);}  }
class C{  public ListParameterNoDuplicateValueConstraint(){}  }
class C{  private static Bitmap loadBitmap(ImageSource source) throws ImageLoadException {  return source.loadBitmap();}  }
class C{  private Id<Link> findVehicleLink(Person p){  for (  PlanElement planElement : p.getSelectedPlan().getPlanElements()) {    if (planElement instanceof Activity) {      Activity activity=(Activity)planElement;      ActivityFacilities facilities=this.qsim.getScenario().getActivityFacilities();      Config config=this.qsim.getScenario().getConfig();      final Id<Link> activityLinkId=PopulationUtils.computeLinkIdFromActivity(activity,facilities,config);      if (activityLinkId != null) {        return activityLinkId;      }    } else     if (planElement instanceof Leg) {      Leg leg=(Leg)planElement;      if (leg.getRoute().getStartLinkId() != null) {        return leg.getRoute().getStartLinkId();      }    }  }  throw new RuntimeException("Don't know where to put a vehicle for this agent.");}  }
class C{  public static GridData createGridData(int colspan){  GridData gd=new GridData(GridData.FILL_HORIZONTAL);  gd.horizontalSpan=colspan;  return gd;}  }
class C{  public boolean check(){  if (!complete) {    try {      task.refresh();      complete=task.isComplete();      if (complete) {        value=task.get();      }      context.updateTaskLog(log,elapsedTime());    } catch (    TimeoutException e) {    }catch (    Exception e) {      error=new ExecutionException(e);      complete=true;      context.updateTaskLog(log,elapsedTime(),e);    }  }  return complete;}  }
class C{  public static long readLongSigned(ByteBuffer byteBuffer){  byte v=byteBuffer.get();  long accumulator=(~((long)(((v >> 6) & 1) - 1))) & 0xFFFFFFFFFFFFFF80l;  return (v < 0) ? accumulator | (v & 0x7F) : readLongSignedTail((accumulator | v) << 7,byteBuffer);}  }
class C{  @Override public double java2DToValue(double java2DValue,Rectangle2D area,RectangleEdge edge){  double result=0.0;  if (this.displayStart < this.displayEnd) {    result=super.java2DToValue(java2DValue,area,edge);  } else {  }  return result;}  }
class C{  public Boolean isDelayWhileIdle(){  return delayWhileIdle;}  }
class C{  public Query sinceId(final long sinceId){  setSinceId(sinceId);  return this;}  }
class C{  public Stack.Entry pot(final String stack) throws IOException {  Stack s=getStack(stack);  if (s == null)   return null;  return s.pot();}  }
class C{  public BluRayNetworkFile(String hostname,java.io.File bdmvDir,boolean directBuffer,int inTargetTitle) throws java.io.IOException {  super(hostname,(String)null,"r",sage.media.bluray.BluRayParser.BLURAY_CHARSET,directBuffer);  this.bdmvDir=bdmvDir;  targetTitle=inTargetTitle;  bdp=new sage.media.bluray.BluRayParser(bdmvDir,hostname);  bdp.fullyAnalyze();  if (targetTitle <= 0)   targetTitle=bdp.getMainPlaylistIndex() + 1;  targetTitle=Math.max(1,Math.min(targetTitle,bdp.getNumPlaylists()));  currPlaylist=bdp.getPlaylist(targetTitle - 1);  fileSequence=new java.io.File[currPlaylist.playlistItems.length];  fileOffsets=new long[fileSequence.length];  ptsOffsets=new long[fileSequence.length];  streamDir=new java.io.File(bdmvDir,"STREAM");  totalSize=0;  long[] totalPts=new long[fileSequence.length];  for (int i=0; i < fileSequence.length; i++) {    fileSequence[i]=new java.io.File(streamDir,currPlaylist.playlistItems[i].itemClips[0].clipName + (bdp.doesUseShortFilenames() ? ".MTS" : ".m2ts"));    fileOffsets[i]=totalSize;    ptsOffsets[i]=(i == 0 ? 0 : totalPts[i - 1]) - currPlaylist.playlistItems[i].inTime;    remoteFilename=fileSequence[i].getAbsolutePath();    openConnection();    totalSize+=getRemoteSize();    closeConnection();    totalPts[i]=(i == 0 ? 0 : totalPts[i - 1]) + (currPlaylist.playlistItems[i].outTime - currPlaylist.playlistItems[i].inTime);  }  if (sage.Sage.DBG)   System.out.println("Established BluRay file sequence with " + fileSequence.length + " segments and total size="+ totalSize);  currFileIndex=0;  remoteFilename=fileSequence[currFileIndex].getAbsolutePath();  openConnection();  chapterOffsets=new long[currPlaylist.playlistMarks.length];  for (int i=0; i < chapterOffsets.length; i++) {    int itemRef=currPlaylist.playlistMarks[i].playItemIdRef;    chapterOffsets[i]=(itemRef == 0 ? 0 : totalPts[itemRef - 1]) + currPlaylist.playlistMarks[i].timestamp - currPlaylist.playlistItems[itemRef].inTime;  }}  }
class C{  public static ServerSocketBar create(InetAddress host,int port,int listenBacklog,boolean isEnableJni) throws IOException {  return currentFactory().create(host,port,listenBacklog,isEnableJni);}  }
class C{  public List<Challenge> challenges(){  String responseField;  if (code == HTTP_UNAUTHORIZED) {    responseField="WWW-Authenticate";  } else   if (code == HTTP_PROXY_AUTH) {    responseField="Proxy-Authenticate";  } else {    return Collections.emptyList();  }  return OkHeaders.parseChallenges(headers(),responseField);}  }
class C{  public static <T>void invokeMethodByName(@NotNull T object,@NotNull String name,Object arg) throws Exception {  Method method=object.getClass().getDeclaredMethod(name,Object.class);  method.setAccessible(true);  method.invoke(object,arg);}  }
class C{  public final Observable<List<SearchResult>> searchResults(){  return mSearchResultsSubject.asObservable();}  }
class C{  public void triggerNotificationsForCreateBusinessObjectData(BusinessObjectData businessObjectData){  BusinessObjectDataKey businessObjectDataKey=businessObjectDataHelper.getBusinessObjectDataKey(businessObjectData);  for (  NotificationEventTypeEntity.EventTypesBdata eventType : Arrays.asList(NotificationEventTypeEntity.EventTypesBdata.BUS_OBJCT_DATA_RGSTN,NotificationEventTypeEntity.EventTypesBdata.BUS_OBJCT_DATA_STTS_CHG)) {    notificationEventService.processBusinessObjectDataNotificationEventAsync(eventType,businessObjectDataKey,businessObjectData.getStatus(),null);  }  for (  StorageUnit storageUnit : businessObjectData.getStorageUnits()) {    notificationEventService.processStorageUnitNotificationEventAsync(NotificationEventTypeEntity.EventTypesStorageUnit.STRGE_UNIT_STTS_CHG,businessObjectDataKey,storageUnit.getStorage().getName(),storageUnit.getStorageUnitStatus(),null);  }}  }
class C{  protected String byteArrayToHexString(byte[] bytes){  StringBuilder sb=new StringBuilder(bytes.length * 2);  for (  byte element : bytes) {    int v=element & 0xff;    if (v < 16) {      sb.append('0');    }    sb.append(Integer.toHexString(v));  }  return sb.toString().toUpperCase(Locale.US);}  }
class C{  private void handleHtmlAdvancedHelp(RequestAndResponse requestAndResponse) throws IOException, ServletException {  final String title=servletText.pageTitleAdvancedHelp();  if (addTitle(requestAndResponse,title)) {    return;  }  final PageWrapper pageWrapper=new PageWrapper(requestAndResponse,title,false).setPaneId("help");  pageWrapper.addHeader();  startHelpSection(requestAndResponse,"For Administrators");  addHelpLink(requestAndResponse,"Administrator Guide");  addHelpLink(requestAndResponse,"Build, Install, Configure and Run");  addHelpLink(requestAndResponse,"System Overview");  endHelpSection(requestAndResponse);  startHelpSection(requestAndResponse,"For Contributors");  addHelpLink(requestAndResponse,"Code Contribution Guidelines");  addHelpLink(requestAndResponse,"Get Started Coding");  addHelpLink(requestAndResponse,"Release Process");  addHelpLink(requestAndResponse,"Testing Strategy");  addHelpLink(requestAndResponse,"Licenses");  endHelpSection(requestAndResponse);  pageWrapper.addFooter();}  }
class C{  public synchronized void onNodeLeft(UUID nodeId){  pendingDeltas.remove(nodeId);  deltas.put(nodeId,0L);  if (ready())   notifyAll();}  }
class C{  public static Vector<Object> toXmlRpcReferencesParameters(Collection<Reference> references){  Vector<Object> referencesParams=new Vector<Object>();  for (  Reference reference : references) {    referencesParams.add(reference.marshallize());  }  return referencesParams;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrcreatedocumentfragment.class,args);}  }
class C{  public VerticalPageAction(String nm,int direction,boolean select){  super(nm);  this.select=select;  this.direction=direction;}  }
class C{  public static ProcessThread startApplication(String outFile,String... additionalOpts) throws Throwable {  String classpath=System.getProperty("test.class.path",".");  String[] myArgs=concat(additionalOpts,new String[]{"-Dattach.test=true","-classpath",classpath,"Application",outFile});  String[] args=Utils.addTestJavaOpts(myArgs);  ProcessBuilder pb=ProcessTools.createJavaProcessBuilder(args);  ProcessThread pt=new ProcessThread("runApplication",pb);  pt.start();  return pt;}  }
class C{  public int[] toArray(){  int[] result=new int[nodes.size()];  for (int i=0; i < nodes.size(); i++) {    result[i]=nodes.get(i);  }  return result;}  }
class C{  @ZeppelinApi public void angularBind(String name,Object o){  angularBind(name,o,interpreterContext.getNoteId());}  }
class C{  @BeforeClass public static void initJFX(){  if (t == null) {    t=new Thread(null);    t.setDaemon(true);    t.start();  }}  }
class C{  public LazyFutureStream<Double> from(final DoubleStream stream){  return fromStream(stream.boxed());}  }
class C{  public void showMenu(){  mSlidingMenu.showMenu();}  }
class C{  public boolean isEmpty(){  if (text != null) {    return false;  }  if (!elements.isEmpty()) {    return false;  }  if (!attributes.isEmpty()) {    return false;  }  return !isComposite();}  }
class C{  public synchronized <T extends Response>long request(Request<T> request,RpcCallback<T> callback){  return request(request,callback,0);}  }
class C{  private String parseLinkTitle(){  String title=match(LINK_TITLE);  if (title != null) {    return Escaping.unescapeString(title.substring(1,title.length() - 1));  } else {    return null;  }}  }
class C{  @SuppressWarnings("unchecked") public EdmondsKarpMaxFlow(DirectedGraph<V,E> directedGraph,V source,V sink,Function<E,Number> edgeCapacityTransformer,Map<E,Number> edgeFlowMap,Supplier<E> edgeFactory){  if (directedGraph.getVertices().contains(source) == false || directedGraph.getVertices().contains(sink) == false) {    throw new IllegalArgumentException("source and sink vertices must be elements of the specified graph");  }  if (source.equals(sink)) {    throw new IllegalArgumentException("source and sink vertices must be distinct");  }  mOriginalGraph=directedGraph;  this.source=source;  this.target=sink;  this.edgeFlowMap=edgeFlowMap;  this.edgeCapacityTransformer=edgeCapacityTransformer;  this.edgeFactory=edgeFactory;  try {    mFlowGraph=directedGraph.getClass().newInstance();    for (    E e : mOriginalGraph.getEdges()) {      mFlowGraph.addEdge(e,mOriginalGraph.getSource(e),mOriginalGraph.getDest(e),EdgeType.DIRECTED);    }    for (    V v : mOriginalGraph.getVertices()) {      mFlowGraph.addVertex(v);    }  } catch (  InstantiationException e) {    e.printStackTrace();  }catch (  IllegalAccessException e) {    e.printStackTrace();  }  mMaxFlow=0;  mSinkPartitionNodes=new HashSet<V>();  mSourcePartitionNodes=new HashSet<V>();  mMinCutEdges=new HashSet<E>();}  }
class C{  public boolean isSetType(){  return this.type != null;}  }
class C{  public static SteppedPrice copyAttributes(VOSteppedPrice voSteppedPrice,SteppedPrice steppedPrice){  steppedPrice.setLimit(voSteppedPrice.getLimit());  steppedPrice.setPrice(voSteppedPrice.getPrice());  return steppedPrice;}  }
class C{  public GraphSelectionTextInputAction(JComponent component,GraphSelectionWrapper wrapper,JList<Node> sourceList,JList<Node> selectedList){  super("Text Input...");  this.component=component;  this.wrapper=wrapper;  this.sourceList=sourceList;  this.selectedList=selectedList;}  }
class C{  private final boolean parkAndCheckInterrupt(){  LockSupport.park(this);  return Thread.interrupted();}  }
class C{  public Boolean isOverTitle(){  return getAttributeAsBoolean("overItem");}  }
class C{  public void testLoadContent2(){  System.out.println("loadContent with site as main resource");  String myScenario="My Scenario";  String myUrl="My Scenario";  Site mockSite=createMock(Site.class);  mockSite.setAudit(mockAudit);  expectLastCall().once();  mockAudit.setStatus(AuditStatus.SCENARIO_LOADING);  expectLastCall().once();  expect(mockAuditDataService.saveOrUpdate(mockAudit)).andReturn(mockAudit).once();  expect(mockAudit.getStatus()).andReturn(AuditStatus.SCENARIO_LOADING).once();  mockAudit.setSubject(mockSite);  expectLastCall().once();  expect(mockScenarioLoaderService.loadScenario(mockSite,myScenario)).andReturn(null).once();  mockAudit.setStatus(AuditStatus.CONTENT_ADAPTING);  expectLastCall().once();  expect(mockAuditDataService.saveOrUpdate(mockAudit)).andReturn(mockAudit).once();  expect(mockWebResourceDataService.createSite(myUrl)).andReturn(mockSite).once();  expect(mockWebResourceDataService.saveOrUpdate(mockSite)).andReturn(mockSite).once();  replay(mockSite);  setReplayMode();  AbstractScenarioAuditCommandImpl instance=new TestAbstractScenarioAuditCommandImpl();  instance.setScenarioName(myUrl);  instance.setScenario(myScenario);  instance.setIsPage(false);  instance.init();  instance.loadContent();  verify(mockSite);  setVerifyMode();}  }
class C{  public void compile(){  ArrayList<Long> toDelete=new ArrayList<Long>();  for (  MapNode node : nodes.values()) {    if (node.hasPosition()) {      if (node.getName() != null || node.getAttributes().length > 0)       pois.add(node); else       if (node.getWayRefs().isEmpty())       toDelete.add(node.getId());    } else {      LOG.warning("No definition found for referenced node " + node.getId() + ".");      toDelete.add(node.getId());    }  }  for (  long id : toDelete) {    nodes.remove(id);  }  BoundingBox bbAllNodes=new BoundingBox();  bbAllNodes.adjust(nodes.values());  bbAllNodes.adjust(pois);  if (boundingBox == null)   boundingBox=bbAllNodes; else   boundingBox.intersectWith(bbAllNodes);  applyClassifierAndUpdateTree(bbAllNodes);  fireMapDataEvent(new MapEvent(this,MapEvent.Type.MAP_NEW));}  }
class C{  private void readShapeAttributes(IXMLElement elem,HashMap<AttributeKey,Object> a) throws IOException {  Object objectValue;  String value;  double doubleValue;  objectValue=toPaint(elem,readInheritColorAttribute(elem,"fill","black"));  if (objectValue instanceof Color) {    FILL_COLOR.put(a,(Color)objectValue);  } else   if (objectValue instanceof Gradient) {    FILL_GRADIENT.putClone(a,(Gradient)objectValue);  } else   if (objectValue == null) {    FILL_COLOR.put(a,null);  } else {    FILL_COLOR.put(a,null);    if (DEBUG) {      System.out.println("SVGInputFormat not implemented  fill=" + objectValue);    }  }  objectValue=readInheritAttribute(elem,"fill-opacity","1");  FILL_OPACITY.put(a,toDouble(elem,(String)objectValue,1d,0d,1d));  value=readInheritAttribute(elem,"fill-rule","nonzero");  WINDING_RULE.put(a,SVG_FILL_RULES.get(value));  objectValue=toPaint(elem,readInheritColorAttribute(elem,"stroke","none"));  if (objectValue instanceof Color) {    STROKE_COLOR.put(a,(Color)objectValue);  } else   if (objectValue instanceof Gradient) {    STROKE_GRADIENT.putClone(a,(Gradient)objectValue);  } else   if (objectValue == null) {    STROKE_COLOR.put(a,null);  } else {    STROKE_COLOR.put(a,null);    if (DEBUG) {      System.out.println("SVGInputFormat not implemented  stroke=" + objectValue);    }  }  value=readInheritAttribute(elem,"stroke-dasharray","none");  if (!value.equals("none")) {    String[] values=toWSOrCommaSeparatedArray(value);    double[] dashes=new double[values.length];    for (int i=0; i < values.length; i++) {      dashes[i]=toNumber(elem,values[i]);    }    STROKE_DASHES.put(a,dashes);  }  doubleValue=toNumber(elem,readInheritAttribute(elem,"stroke-dashoffset","0"));  STROKE_DASH_PHASE.put(a,doubleValue);  IS_STROKE_DASH_FACTOR.put(a,false);  value=readInheritAttribute(elem,"stroke-linecap","butt");  STROKE_CAP.put(a,SVG_STROKE_LINECAPS.get(value));  value=readInheritAttribute(elem,"stroke-linejoin","miter");  STROKE_JOIN.put(a,SVG_STROKE_LINEJOINS.get(value));  doubleValue=toDouble(elem,readInheritAttribute(elem,"stroke-miterlimit","4"),4d,1d,Double.MAX_VALUE);  STROKE_MITER_LIMIT.put(a,doubleValue);  IS_STROKE_MITER_LIMIT_FACTOR.put(a,false);  objectValue=readInheritAttribute(elem,"stroke-opacity","1");  STROKE_OPACITY.put(a,toDouble(elem,(String)objectValue,1d,0d,1d));  doubleValue=toNumber(elem,readInheritAttribute(elem,"stroke-width","1"));  STROKE_WIDTH.put(a,doubleValue);}  }
class C{  @Override public void onFinishInflate(){  if (!alreadyInflated_) {    alreadyInflated_=true;    inflate(getContext(),layout.elv_file,this);    onViewChangedNotifier_.notifyViewChanged(this);  }  super.onFinishInflate();}  }
class C{  @Override protected void fillBuffer(final IScope scope) throws GamaRuntimeException {  if (getBuffer() != null) {    return;  }  try {    final BufferedReader in=new BufferedReader(new FileReader(getFile(scope)));    final GamaMap<String,String> allLines=GamaMapFactory.create(Types.STRING,Types.STRING);    String str;    str=in.readLine();    while (str != null) {      allLines.put(str,str + "\n");      str=in.readLine();    }    in.close();    setBuffer(allLines);  } catch (  final IOException e) {    throw GamaRuntimeException.create(e,scope);  }}  }
class C{  public boolean isDelete(){  return HttpMethod.DELETE.equals(getMethod());}  }
class C{  public static String buildPath(final String basePath,final String nameOrPath){  if (!TextUtils.isEmpty(basePath)) {    return new StringBuffer().append(basePath).append(basePath.endsWith(File.separator) ? "" : File.separator).append(nameOrPath).toString();  } else {    return nameOrPath;  }}  }
class C{  public void addTreeCheckingListener(TreeCheckingListener x){  this.listenerList.add(TreeCheckingListener.class,x);}  }
class C{  public Builder callbackUrl(String callbackUrl){  this.callbackUrl=callbackUrl;  return this;}  }
class C{  public static int clamp(int value,int a,int b){  int min=(a > b) ? b : a;  int max=(a > b) ? a : b;  if (value < min) {    value=min;  } else   if (value > max) {    value=max;  }  return value;}  }
class C{  public static int toInt(byte[] bytes){  if (SIZEOF_INT > bytes.length)   throw new IllegalArgumentException("length is not SIZEOF_INT");  int n=0;  for (int i=0; i < +bytes.length; i++) {    n<<=8;    n^=bytes[i] & 0xFF;  }  return n;}  }
class C{  public KeyBlob(final String keyProviderId,final byte[] keyProviderInfo,final byte[] encryptedDataKey){  setEncryptedDataKey(encryptedDataKey);  setKeyProviderId(keyProviderId);  setKeyProviderInfo(keyProviderInfo);}  }
class C{  public EventProcessorHost(final String hostName,final String eventHubPath,final String consumerGroupName,final String eventHubConnectionString,final String storageConnectionString,final String storageContainerName){  this(hostName,eventHubPath,consumerGroupName,eventHubConnectionString,storageConnectionString,storageContainerName,(ExecutorService)null);}  }
class C{  @SuppressWarnings("synthetic-access") protected void txApplyEntryOp(FarSideEntryOp entryOp,List<EntryEventImpl> pendingCallbacks){  if (this.r == null) {    return;  }  EventID eventID=getEventId(entryOp);  boolean isDuplicate=this.r.hasSeenEvent(eventID);  boolean callbacksOnly=(this.r.getDataPolicy() == DataPolicy.PARTITION) || isDuplicate;  if (this.r instanceof PartitionedRegion) {    EntryEventImpl eei=AbstractRegionMap.createCBEvent(this.r,entryOp.op,entryOp.key,entryOp.value,this.msg.txIdent,txEvent,getEventId(entryOp),entryOp.callbackArg,entryOp.filterRoutingInfo,this.msg.bridgeContext,null,entryOp.versionTag,entryOp.tailKey);    if (entryOp.filterRoutingInfo != null) {      eei.setLocalFilterInfo(entryOp.filterRoutingInfo.getFilterInfo(this.r.getCache().getMyId()));    }    if (isDuplicate) {      eei.setPossibleDuplicate(true);    }    if (logger.isDebugEnabled()) {      logger.debug("invoking transactional callbacks for {} key={} needsUnlock={} event={}",entryOp.op,entryOp.key,this.needsUnlock,eei);    }    final boolean skipListeners=!isDuplicate;    eei.setInvokePRCallbacks(!skipListeners);    pendingCallbacks.add(eei);    return;  }  if (logger.isDebugEnabled()) {    logger.debug("applying transactional {} key={} needsUnlock={} eventId {} with routing {}",entryOp.op,entryOp.key,this.needsUnlock,getEventId(entryOp),entryOp.filterRoutingInfo);  }  if (entryOp.versionTag != null) {    entryOp.versionTag.replaceNullIDs(this.msg.getSender());  }  if (entryOp.op.isDestroy()) {    this.r.txApplyDestroy(entryOp.key,this.msg.txIdent,this.txEvent,this.needsUnlock,entryOp.op,getEventId(entryOp),entryOp.callbackArg,pendingCallbacks,entryOp.filterRoutingInfo,this.msg.bridgeContext,false,null,entryOp.versionTag,entryOp.tailKey);  } else   if (entryOp.op.isInvalidate()) {    this.r.txApplyInvalidate(entryOp.key,Token.INVALID,entryOp.didDestroy,this.msg.txIdent,this.txEvent,false,getEventId(entryOp),entryOp.callbackArg,pendingCallbacks,entryOp.filterRoutingInfo,this.msg.bridgeContext,null,entryOp.versionTag,entryOp.tailKey);  } else {    this.r.txApplyPut(entryOp.op,entryOp.key,entryOp.value,entryOp.didDestroy,this.msg.txIdent,this.txEvent,getEventId(entryOp),entryOp.callbackArg,pendingCallbacks,entryOp.filterRoutingInfo,this.msg.bridgeContext,null,entryOp.versionTag,entryOp.tailKey);  }}  }
class C{  public void stopLogging(){  active=false;}  }
class C{  public void changeRefLink(Id<TransitStopFacility> stopFacilityId,Id<Link> newRefLinkId){  TransitStopFacility oldStopFacility=schedule.getFacilities().get(stopFacilityId);  TransitStopFacility newChildStopFacility=parentStops.getChildStopFacility(getParentId(stopFacilityId),newRefLinkId.toString());  replaceStopFacilityInAllRoutes(oldStopFacility,newChildStopFacility);}  }
class C{  public ServiceParameterBufferImp(SpbMetaData spbMetaData,Encoding defaultEncoding){  super(spbMetaData,defaultEncoding);}  }
class C{  @Deprecated public void visitMethodInsn(int opcode,String owner,String name,String desc){  if (api >= Opcodes.ASM5) {    boolean itf=opcode == Opcodes.INVOKEINTERFACE;    visitMethodInsn(opcode,owner,name,desc,itf);    return;  }  if (mv != null) {    mv.visitMethodInsn(opcode,owner,name,desc);  }}  }
class C{  public void computeAverageLocalOfObservations(){  double activeCont, entropyCont;  resetOverallStats();  double localActiveValue, localEntropyValue, localEntRateValue, logTerm;  for (int nextVal=0; nextVal < base; nextVal++) {    double p_next=(double)nextCount[nextVal] / (double)observations;    if (p_next > 0.0) {      localEntropyValue=-Math.log(p_next) / Math.log(base);      entropyCont=p_next * localEntropyValue;      if (localEntropyValue > maxEntropy) {        maxEntropy=localEntropyValue;      } else       if (localEntropyValue < minEntropy) {        minEntropy=localEntropyValue;      }    } else {      localEntropyValue=0.0;      entropyCont=0.0;      continue;    }    averageEntropy+=entropyCont;    for (int prevVal=0; prevVal < MathsUtils.power(base,k); prevVal++) {      double p_prev=(double)prevCount[prevVal] / (double)observations;      double p_joint=(double)jointCount[nextVal][prevVal] / (double)observations;      if (p_joint > 0.0) {        logTerm=p_joint / (p_next * p_prev);        localActiveValue=Math.log(logTerm) / Math.log(base);        activeCont=p_joint * localActiveValue;        if (localActiveValue > maxActive) {          maxActive=localActiveValue;        } else         if (localActiveValue < minActive) {          minActive=localActiveValue;        }      } else {        localActiveValue=0.0;        activeCont=0.0;      }      averageActive+=activeCont;      localEntRateValue=localEntropyValue - localActiveValue;      if (localEntRateValue > maxEntRate) {        maxEntRate=localEntRateValue;      } else       if (localEntRateValue < maxEntRate) {        maxEntRate=localEntRateValue;      }    }  }  averageEntRate=averageEntropy - averageActive;  return;}  }
class C{  protected Cipher(CipherSpi cipherSpi,Provider provider,String transformation){  if (cipherSpi == null) {    throw new NullPointerException("cipherSpi == null");  }  if (!(cipherSpi instanceof NullCipherSpi) && provider == null) {    throw new NullPointerException("provider == null");  }  this.provider=provider;  this.transformation=transformation;  this.spiImpl=cipherSpi;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.820 -0500",hash_original_method="0B604ECD72825E7302A598A21F9391D8",hash_generated_method="AF51DBFFF03D639AD0E24EC2D4F6F2D4") public boolean selectPreviousArticle() throws IOException {  return selectPreviousArticle(null);}  }
class C{  protected String skip(BufferedReader br,Predicate<String> p) throws IOException {  while (br.ready()) {    String curLine=br.readLine();    if (curLine == null)     break;    curLine=curLine.trim();    if (p.apply(curLine))     return curLine;  }  return null;}  }
class C{  public static final String encode(String s,String enc) throws UnsupportedEncodingException {  byte[] bytes=s.getBytes(enc);  int count=bytes.length;  final String allowed="=,+;.'-@&/$_()!~*:";  char[] buf=new char[3 * count];  int j=0;  for (int i=0; i < count; i++) {    if ((bytes[i] >= 0x61 && bytes[i] <= 0x7A) || (bytes[i] >= 0x41 && bytes[i] <= 0x5A) || (bytes[i] >= 0x30 && bytes[i] <= 0x39)|| (allowed.indexOf(bytes[i]) >= 0)) {      buf[j++]=(char)bytes[i];    } else {      buf[j++]='%';      buf[j++]=Character.forDigit(0xF & (bytes[i] >>> 4),16);      buf[j++]=Character.forDigit(0xF & bytes[i],16);    }  }  return new String(buf,0,j);}  }
class C{  public final int length(){  return array.length;}  }
class C{  public void addResponse(RecordResponse response){  if (records == null) {    records=new RecordResponse[1];  } else {    RecordResponse old[]=records;    records=new RecordResponse[old.length + 1];    System.arraycopy(old,0,records,0,old.length);  }  records[records.length - 1]=response;}  }
class C{  public void testWillResetXPathAfterRecursion() throws Exception {  XppDom dom1=XppFactory.buildDom("<dom><a><b>foo</b></a><c x='1'/></dom>");  XppDom dom2=XppFactory.buildDom("<dom><a><b>foo</b></a><c x='2'/></dom>");  assertEquals(-1,comparator.compare(dom1,dom2));  assertEquals("/dom/c[0][@x]",xpath.get());  assertEquals(1,comparator.compare(dom2,dom1));  assertEquals("/dom/c[0][@x]",xpath.get());}  }
class C{  public AttachmentView(Context context,AttributeSet attributeSet){  super(context,attributeSet);}  }
class C{  public MaterialSwitch(boolean value){  this();  setValue(value);}  }
class C{  public static boolean openYesNoQuestion(final Shell parent,final String title,final String message,final String toggleMessage,final boolean defaultToggleState,final String preferenceKey){  final IPreferenceStore prefStore=TFSCommonUIClientPlugin.getDefault().getPreferenceStore();  final boolean toggleState=MessageDialogWithToggle.ALWAYS.equals(prefStore.getString(preferenceKey));  if (!toggleState) {    final MessageDialogWithToggle dialog=MessageDialogWithToggle.openYesNoQuestion(parent,title,message,toggleMessage,defaultToggleState,prefStore,preferenceKey);    TFSCommonUIClientPlugin.getDefault().savePluginPreferences();    return (dialog.getReturnCode() == IDialogConstants.YES_ID);  }  return true;}  }
class C{  public MySqlBinLogSpout(MySqlSpoutConfig spoutConfig){  this(spoutConfig,new ClientFactory());}  }
class C{  private DefaultType(){  throw new RuntimeException("This class should never be instantiated.");}  }
class C{  public void dispose(){  classAnalysisMap.clear();  classAnalysisEngineMap.clear();  analysisLocals.clear();  databaseFactoryMap.clear();  databaseMap.clear();  methodAnalysisEngineMap.clear();}  }
class C{  public int computeNumberOfFixesForCleanUp(ICleanUp cleanUp){  return cleanUp instanceof IMultiFix ? ((IMultiFix)cleanUp).computeNumberOfFixes(fCompilationUnit) : -1;}  }
class C{  public static void logStatus(final Logger logger,final long startTime,final long sleepingTime,final long workingTime){  logger.logMessage(Level.FINE,"Consumer-Status-Report [" + Time.toClock(System.currentTimeMillis() - startTime) + "]"+ "\tEFFICIENCY\t "+ MathUtilities.percentPlus(workingTime,sleepingTime)+ "\tWORK  ["+ Time.toClock(workingTime)+ "]"+ "\tSLEEP ["+ Time.toClock(sleepingTime)+ "]");}  }
class C{  public boolean isCustom(){  return (gunnery != 4) || (piloting != 5);}  }
class C{  public static String classNameOnly(String typeName){  String dotted=descriptorToDot(typeName);  int start=dotted.lastIndexOf(".");  if (start < 0) {    return dotted;  } else {    return dotted.substring(start + 1);  }}  }
class C{  public final String levelDataToString(){  return "Level: " + this.getLevel() + "\n"+ "LevelParameters: "+ this.getLevelParams()+ "\n"+ "LevelConstraints: "+ this.getLevelConstraints()+ "\n"+ "ArgLevelConstraints: "+ this.getArgLevelConstraints()+ "\n"+ "ArgLevelParams: "+ this.getArgLevelParams()+ "\n";}  }
class C{  public PoolingByteArrayOutputStream(ByteArrayPool pool){  this(pool,DEFAULT_SIZE);}  }
class C{  public void addUnnamedTask(TmmTask task){  if (unnamedTaskExecutor == null || unnamedTaskExecutor.isShutdown()) {    unnamedTaskExecutor=createUnnamedTaskExecutor();  }  task.addListener(this);  task.setState(TaskState.QUEUED);  unnamedTaskExecutor.execute(task);}  }
class C{  public LauncherScroller(Context context,Interpolator interpolator,boolean flywheel){  mFinished=true;  mInterpolator=interpolator;  mPpi=context.getResources().getDisplayMetrics().density * 160.0f;  mDeceleration=computeDeceleration(ViewConfiguration.getScrollFriction());  mFlywheel=flywheel;  mPhysicalCoeff=computeDeceleration(0.84f);}  }
class C{  public IPoint[] generate(int size){  IPoint[] points=new TwoDPoint[size];  for (int i=0; i < size; i++) {    double radius=0.5 * Math.random();    double angle=2 * Math.PI * Math.random();    double x=0.5 + radius * Math.cos(angle);    double y=0.5 + radius * Math.sin(angle);    points[i]=new TwoDPoint(x,y);  }  return points;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private boolean shouldExplode(boolean inFire){  boolean inNether=(worldObj.provider.dimensionId == -1 && getType() == BombType.BOMB_STANDARD);  return (ticksExisted >= fuseTime || inNether || (inFire && getType() == BombType.BOMB_STANDARD));}  }
class C{  public final void recover() throws IOException, InterruptedException {  this.trace.recover();  this.stateQueue.recover();  this.fpSetManager.recover(this.filename);}  }
class C{  public static Character toCharacter(double d){  return new Character(toCharValue(d));}  }
class C{  public boolean isCellEditable(EventObject anEvent){  if (anEvent instanceof MouseEvent) {    return ((MouseEvent)anEvent).getClickCount() >= clickCountToStart;  }  return true;}  }
class C{  public ProductListInfo(){  m_sName=null;}  }
class C{  public void init(boolean forEncryption,CipherParameters params) throws IllegalArgumentException {  this.forEncryption=forEncryption;  reset();  if (params instanceof ParametersWithRandom) {    ParametersWithRandom p=(ParametersWithRandom)params;    padding.init(p.getRandom());    cipher.init(forEncryption,p.getParameters());  } else {    padding.init(null);    cipher.init(forEncryption,params);  }}  }
class C{  public void addRecipe(CraftingRecipe recipe){  recipeManager.addRecipe(recipe);}  }
class C{  @Override public String modelName(){  return "org.apache.zest.library.alarm.model.standard";}  }
class C{  public void incMessagesReceived(){  this._stats.incInt(_messagesReceivedId,1);}  }
class C{  public static boolean checkIfDiffIsLegal(SolrDocumentList a,SolrDocumentList b,String aName,String bName,Set<String> bAddFails,Set<String> bDeleteFails){  boolean legal=true;  Set<Map> setA=new HashSet<>();  for (  SolrDocument sdoc : a) {    setA.add(new HashMap(sdoc));  }  Set<Map> setB=new HashSet<>();  for (  SolrDocument sdoc : b) {    setB.add(new HashMap(sdoc));  }  Set<Map> onlyInA=new HashSet<>(setA);  onlyInA.removeAll(setB);  Set<Map> onlyInB=new HashSet<>(setB);  onlyInB.removeAll(setA);  if (onlyInA.size() == 0 && onlyInB.size() == 0) {    throw new IllegalArgumentException("No difference between list a and b");  }  System.err.println("###### Only in " + aName + ": "+ onlyInA);  System.err.println("###### Only in " + bName + ": "+ onlyInB);  for (  Map doc : onlyInA) {    if (bAddFails == null || !bAddFails.contains(doc.get("id"))) {      legal=false;    } else {      System.err.println("###### Only in " + aName + ": "+ doc.get("id")+ ", but this is expected because we found an add fail for "+ doc.get("id"));    }  }  for (  Map doc : onlyInB) {    if (bDeleteFails == null || !bDeleteFails.contains(doc.get("id"))) {      legal=false;    } else {      System.err.println("###### Only in " + bName + ": "+ doc.get("id")+ ", but this is expected because we found a delete fail for "+ doc.get("id"));    }  }  return legal;}  }
class C{  public static <T>T readFromParcel(Class<T> clazz,Parcel parcel) throws PostmanException {  Parceler<T> parceler=getParcelerForClass(clazz);  return parceler.readFromParcel(parcel);}  }
class C{  private void push(final ClassWriter cw,final String desc){  int type=type(cw,desc);  if (type != 0) {    push(type);    if (type == LONG || type == DOUBLE) {      push(TOP);    }  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == null) {    return false;  }  if (getClass() != obj.getClass()) {    return false;  }  final BloomFilter<E> other=(BloomFilter<E>)obj;  if (this.expectedNumberOfFilterElements != other.expectedNumberOfFilterElements) {    return false;  }  if (this.k != other.k) {    return false;  }  if (this.bitSetSize != other.bitSetSize) {    return false;  }  if (this.bitset != other.bitset && (this.bitset == null || !this.bitset.equals(other.bitset))) {    return false;  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:15.236 -0400",hash_original_method="E6B89C35380C1CC08274185C89FBCA81",hash_generated_method="39BD2E41F5823D830B4D7DC13E878B54") private static final boolean compareAndSetNext(Node node,Node expect,Node update){  return unsafe.compareAndSwapObject(node,nextOffset,expect,update);}  }
class C{  public void crossValidateModel(String classifierString,Instances data,int numFolds,String[] options,Random random) throws Exception {  crossValidateModel(AbstractClassifier.forName(classifierString,options),data,numFolds,random);}  }
class C{  protected void collectFeatures(Type type,List<Declaration> features,Set<Type> visited){  if (type == null || visited.contains(type))   return;  if (type instanceof ComplexType) {    for (    Type superType : ((ComplexType)type).getSuperTypes()) {      collectFeatures(superType,features,visited);    }    features.addAll(((ComplexType)type).getFeatures());  }  visited.add(type);}  }
class C{  public OdorWorldEntity(OdorWorld world){  this.parentWorld=world;}  }
class C{  public Builder addTokens(Builder requestBuilder,String token,String proxyToken){  if (StringUtils.isNotEmpty(token)) {    requestBuilder=requestBuilder.header(RequestProcessingUtils.AUTH_TOKEN_HEADER,token);  }  if (StringUtils.isNotEmpty(proxyToken)) {    requestBuilder=requestBuilder.header(RequestProcessingUtils.AUTH_PROXY_TOKEN_HEADER,proxyToken);  }  return requestBuilder;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.971 -0500",hash_original_method="8DEC33A26AFC2829CCCCE108ECEB9551",hash_generated_method="CD069DB34D6C0A6A177A7F24AFE5CA91") public String toUpperCase(){  return this;}  }
class C{  private void dump() throws IOException {  OutputStream out=new FileOutputStream(new File(BASE,String.valueOf(System.currentTimeMillis())));  try {    for (    File processDirectory : PROC.listFiles()) {      if (isProcessDirectory(processDirectory)) {        dump(new File(processDirectory,"stat"),out);      }    }    for (    File file : PATHS) {      dump(file,out);    }  }  finally {    closeQuietly(out);  }}  }
class C{  public static RelativeLayout.LayoutParams createRelativeLayoutParamsMM(){  return new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT);}  }
class C{  public void boilBySMS(String sms){}  }
class C{  public void onScanSingleGroup(View view){  Intent intent=new Intent(this,RandomScanActivity.class);  intent.putExtra(RandomScanActivity.EXTRAS_LICENSE_KEY,LICENSE_KEY);  RandomScanElement date=new RandomScanElement(R.string.date_title,DATE_PARSER_NAME,new DateParserSettings());  date.setOptional(true);  RandomScanElement[] elemsArray=new RandomScanElement[]{new RandomScanElement(R.string.iban_title,IBAN_PARSER_NAME,new IbanParserSettings()),new RandomScanElement(R.string.amount_title,AMOUNT_PARSER_NAME,new AmountParserSettings()),date};  intent.putExtra(RandomScanActivity.EXTRAS_SCAN_CONFIGURATION,elemsArray);  intent.putExtra(RandomScanActivity.EXTRAS_BEEP_RESOURCE,R.raw.beep);  startActivityForResult(intent,SINGLE_GROUP_REQ_CODE);}  }
class C{  private @CheckForNull ValueNumber findValueKnownNonnullOnBranch(UnconditionalValueDerefSet fact,Edge edge){  IsNullValueFrame invFrame=invDataflow.getResultFact(edge.getSource());  if (!invFrame.isValid()) {    return null;  }  IsNullConditionDecision decision=invFrame.getDecision();  if (decision == null) {    return null;  }  IsNullValue inv=decision.getDecision(edge.getType());  if (inv == null || !inv.isDefinitelyNotNull()) {    return null;  }  ValueNumber value=decision.getValue();  if (DEBUG) {    System.out.println("Value number " + value + " is known nonnull on "+ edge);  }  return value;}  }
class C{  private void executeTaskNTimesSimultaneouslyWithBarrier(Runnable task,int times) throws InterruptedException {  CountDownLatch latch=new CountDownLatch(times);  for (int i=0; i < times; i++) {    executor.execute(null);  }  latch.await();}  }
class C{  final boolean isMatched(){  Object x=item;  return (x == this) || ((x == null) == isData);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4mfPackage.INIT_MODULES__INIT_MODULES:    return initModules != null && !initModules.isEmpty();}return super.eIsSet(featureID);}  }
class C{  @Override public void resetNode(final EvolutionState state,final int thread){  index=state.random[thread].nextInt(indexMax - 1) + 1;}  }
class C{  public boolean hitObject(Object object,DrawInfo2D range){  final double width=range.draw.width;  final double height=range.draw.height;  return (range.clip.intersects(range.draw.x - width / 2,range.draw.y - height / 2,width,height));}  }
class C{  private Object executeLT(PageContext pc,SQL sql,Query qr,Operation2 expression,int row) throws PageException {  return (executeCompare(pc,sql,qr,expression,row) < 0) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public CharsetDecoder newDecoder(){  return new Decoder();}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  public static void readBytes(InputStream sckInputStream,byte[] buffer,int byteOffset,int byteCount) throws IOException {  int _byteCount=sckInputStream.read(buffer,byteOffset,byteCount);  if (_byteCount != byteCount) {    MeshLog.i(DEBUG,USE_LOG4J,CLASS,"readBytes() _byteCount != byteCount, throw IOException");    throw new IOException();  }}  }
class C{  protected ForkJoinWorkerThread(ForkJoinPool pool){  super("aForkJoinWorkerThread");  this.pool=pool;  this.workQueue=pool.registerWorker(this);}  }
class C{  public VcfHeader addSampleName(String name){  if (mSampleNames.contains(name)) {    throw new VcfFormatException("Duplicate sample name \"" + name + "\" in VCF header");  }  mNameToColumn.put(name,mSampleNames.size());  mSampleNames.add(name);  return this;}  }
class C{  public MLDouble(String name,int[] dims){  super(name,dims,MLArray.mxDOUBLE_CLASS,0);}  }
class C{  public Cipher(final KeyPair senderKeyPair,final KeyPair recipientKeyPair){  this(senderKeyPair,recipientKeyPair,CryptoEngines.defaultEngine());}  }
class C{  public Cgroup cgroup() throws IOException {  return Cgroup.get(pid);}  }
class C{  public void injectSkin(View view){  List<SkinView> skinViews=new ArrayList<SkinView>();  SkinAttrSupport.addSkinViews(view,skinViews);  for (  SkinView skinView : skinViews) {    skinView.apply();  }}  }
class C{  public static void isNonNegativeNumber(String member,long inputValue) throws ValidationException {  if (!GenericValidator.isInRange(inputValue,0L,Long.MAX_VALUE)) {    ValidationException vf=new ValidationException(ReasonEnum.POSITIVE_NUMBER,member,new Object[]{Long.valueOf(inputValue)});    logValidationFailure(vf);    throw vf;  }}  }
class C{  public void markAsToHoist(VariableDeclaration element){  tag(Tag.toHoist,element);}  }
class C{  public synchronized long addDocument(String id,Document doc) throws IOException {  assert buffer.getFilePointer() == 0;  buffer.writeByte(OP_ADD_DOCUMENT);  encode(id,doc);  return flushBuffer();}  }
class C{  @Override public void runTool(String... args) throws SQLException {  String url=null;  String user="";  String password="";  String sql=null;  for (int i=0; args != null && i < args.length; i++) {    String arg=args[i];    if (arg.equals("-url")) {      url=args[++i];    } else     if (arg.equals("-user")) {      user=args[++i];    } else     if (arg.equals("-password")) {      password=args[++i];    } else     if (arg.equals("-driver")) {      String driver=args[++i];      JdbcUtils.loadUserClass(driver);    } else     if (arg.equals("-sql")) {      sql=args[++i];    } else     if (arg.equals("-properties")) {      serverPropertiesDir=args[++i];    } else     if (arg.equals("-help") || arg.equals("-?")) {      showUsage();      return;    } else     if (arg.equals("-list")) {      listMode=true;    } else {      showUsageAndThrowUnsupportedOption(arg);    }  }  if (url != null) {    org.h2.Driver.load();    conn=DriverManager.getConnection(url,user,password);    stat=conn.createStatement();  }  if (sql == null) {    promptLoop();  } else {    ScriptReader r=new ScriptReader(new StringReader(sql));    while (true) {      String s=r.readStatement();      if (s == null) {        break;      }      execute(s);    }    if (conn != null) {      conn.close();    }  }}  }
class C{  protected void finalize() throws Throwable {  shutdown();}  }
class C{  public void checkDeleteExistingFile(String filename){  Log.i(TAG,">>>>>>>>>>>>>>>>>>checkDeleteExistingFile  = " + filename);  if (filename != null) {    File temp=new File(filename);    if (temp != null && temp.exists()) {      temp.delete();    }  }}  }
class C{  protected ObjectMatrix3D viewSelectionLike(int[] sliceOffsets,int[] rowOffsets,int[] columnOffsets){  return new SelectedDenseObjectMatrix3D(this.elements,sliceOffsets,rowOffsets,columnOffsets,this.offset);}  }
class C{  public static String randomString(String sampler,int length){  StringBuilder builder=new StringBuilder(length);  for (int i=0; i < length; i++)   builder.append(sampler.charAt(SEEDED_RANDOM.nextInt(sampler.length())));  return builder.toString();}  }
class C{  protected void processOutContent(String location,FragmentBuilder builder,int hashCode){  if (builder.isOutBufferActive(hashCode)) {    processOut(location,null,builder.getOutData(hashCode));  } else   if (log.isLoggable(Level.FINEST)) {    log.finest("processOutContent: location=[" + location + "] hashCode="+ hashCode+ " out buffer is not active");  }}  }
class C{  public CompletionService newCompletionService(){  return new ExecutorCompletionService<ShardResponse>(commExecutor);}  }
class C{  @Override public void afterPrepare(Transaction tx){}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) public static <T>List<T> compose(List<? extends T> l1,List<? extends T> l2,List<? extends T> l3,List<? extends T> l4){  return new ComposedList(l1,l2,l3,l4);}  }
class C{  public String sendWapSiPushMsg(String url,String text,String dest) throws SmsException, IOException {  WapSIPush siPush=new WapSIPush(url,text);  SmsWapPushMessage wapPushMessage=new SmsWapPushMessage(siPush);  return sendSms(wapPushMessage,dest,null);}  }
class C{  public GapTextStore(int minSize,int maxSize,float maxGapFactor){  Assert.isLegal(0f <= maxGapFactor && maxGapFactor <= 1f);  Assert.isLegal(0 <= minSize && minSize <= maxSize);  fMinGapSize=minSize;  fMaxGapSize=maxSize;  fSizeMultiplier=1 / (1 - maxGapFactor / 2);}  }
class C{  private UrlResolver createUrlResolver(String protocol){  return new DefaultUrlResolver();}  }
class C{  public XCalDocument(){  document=XmlUtils.createDocument();  icalendarRootElement=document.createElementNS(ICALENDAR.getNamespaceURI(),ICALENDAR.getLocalPart());  document.appendChild(icalendarRootElement);}  }
class C{  public JsonSerializer(){  this(null);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(importNode06.class,args);}  }
class C{  public static DMessage alloc(int size){  DMessage msg;  int index=size2Index(size);  if (index < 0)   msg=new DMessage(size); else   if (m_cache[index] == null)   msg=new DMessage(size); else {    msg=m_cache[index];    m_cache[index]=null;  }  return msg;}  }
class C{  private AnimationUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  NoteDao.createTable(db,ifNotExists);}  }
class C{  public static boolean looksLikeIdent(String ident){  return (IdentValue)ALL_IDENT_VALUES.get(ident) != null;}  }
class C{  public BasicSplitPaneDivider(BasicSplitPaneUI ui){  oneTouchSize=DefaultLookup.getInt(ui.getSplitPane(),ui,"SplitPane.oneTouchButtonSize",ONE_TOUCH_SIZE);  oneTouchOffset=DefaultLookup.getInt(ui.getSplitPane(),ui,"SplitPane.oneTouchButtonOffset",ONE_TOUCH_OFFSET);  centerOneTouchButtons=DefaultLookup.getBoolean(ui.getSplitPane(),ui,"SplitPane.centerOneTouchButtons",true);  setLayout(new DividerLayout());  setBasicSplitPaneUI(ui);  orientation=splitPane.getOrientation();  setCursor((orientation == JSplitPane.HORIZONTAL_SPLIT) ? Cursor.getPredefinedCursor(Cursor.E_RESIZE_CURSOR) : Cursor.getPredefinedCursor(Cursor.S_RESIZE_CURSOR));  setBackground(UIManager.getColor("SplitPane.background"));}  }
class C{  public List<Object> buildCommandLineParts(Draft2Job job,File workingDir,FilePathMapper filePathMapper) throws BindingException {  logger.info("Building command line parts...");  Draft2CommandLineTool commandLineTool=(Draft2CommandLineTool)job.getApp();  List<Draft2InputPort> inputPorts=commandLineTool.getInputs();  List<Object> result=new LinkedList<>();  try {    List<Object> baseCmds=commandLineTool.getBaseCmd(job);    result.addAll(baseCmds);    List<Draft2CommandLinePart> commandLineParts=new LinkedList<>();    if (commandLineTool.hasArguments()) {      for (int i=0; i < commandLineTool.getArguments().size(); i++) {        Object argBinding=commandLineTool.getArguments().get(i);        if (argBinding instanceof String) {          Draft2CommandLinePart commandLinePart=new Draft2CommandLinePart.Builder(0,false).part(argBinding).keyValue("").build();          commandLinePart.setArgsArrayOrder(i);          commandLineParts.add(commandLinePart);          continue;        }        Object argValue=commandLineTool.getArgument(job,argBinding);        Map<String,Object> emptySchema=new HashMap<>();        Draft2CommandLinePart commandLinePart=buildCommandLinePart(job,null,argBinding,argValue,emptySchema,null);        if (commandLinePart != null) {          commandLinePart.setArgsArrayOrder(i);          commandLineParts.add(commandLinePart);        }      }    }    for (    Draft2InputPort inputPort : inputPorts) {      String key=inputPort.getId();      Object schema=inputPort.getSchema();      Draft2CommandLinePart part=buildCommandLinePart(job,inputPort,inputPort.getInputBinding(),job.getInputs().get(Draft2SchemaHelper.normalizeId(key)),schema,key);      if (part != null) {        commandLineParts.add(part);      }    }    Collections.sort(commandLineParts,new Draft2CommandLinePart.CommandLinePartComparator());    for (    Draft2CommandLinePart part : commandLineParts) {      List<Object> flattenedObjects=part.flatten();      for (      Object obj : flattenedObjects) {        result.add(obj);      }    }  } catch (  Draft2ExpressionException e) {    logger.error("Failed to build command line.",e);    throw new BindingException("Failed to build command line.",e);  }  return result;}  }
class C{  public void processScan(final Long scan_id,final User user) throws ScannerException {  fr.gael.dhus.database.object.FileScanner fileScanner=null;  SimpleDateFormat sdf=new SimpleDateFormat("EEEE dd MMMM yyyy - HH:mm:ss",Locale.ENGLISH);  fileScanner=fileScannerDao.read(scan_id);  if (fr.gael.dhus.database.object.FileScanner.STATUS_RUNNING.equals(fileScanner.getStatus())) {    throw new ScannerException("Scanner to \"" + fileScanner.getUsername() + "@"+ fileScanner.getUrl()+ "\" already running.");  }  fileScanner.setStatus(fr.gael.dhus.database.object.FileScanner.STATUS_RUNNING);  fileScanner.setStatusMessage("Started on " + sdf.format(new Date()) + "<br>");  fileScannerDao.update(fileScanner);  List<Collection> collections=new ArrayList<Collection>();  List<Long> colIds=fileScannerDao.getScannerCollections(scan_id);  for (  Long colId : colIds) {    Collection col=collectionDao.read(colId);    if (col != null) {      collections.add(col);    }  }  FileScannerWrapper wrapper=new FileScannerWrapper(fileScanner);  Hook hook=new Hook(fileScanner);  String status=fr.gael.dhus.database.object.FileScanner.STATUS_OK;  String message="Error while scanning.";  try {    Scanner scanner=getUploadScanner(fileScanner.getUrl(),fileScanner.getUsername(),fileScanner.getPassword(),fileScanner.getPattern(),user,collections,wrapper);    runningScanners.put(scan_id,scanner);    Runtime.getRuntime().addShutdownHook(hook);    int total=scanner.scan();    message="Successfully completed on " + sdf.format(new Date()) + " with "+ total+ " product"+ (total > 1 ? "s" : "")+ " scanned.";  } catch (  InterruptedException e) {    status=fr.gael.dhus.database.object.FileScanner.STATUS_OK;    message="Scanner stopped by user on " + sdf.format(new Date());  }catch (  Exception e) {    status=fr.gael.dhus.database.object.FileScanner.STATUS_ERROR;    message="Scanner error occurs on " + sdf.format(new Date()) + ": "+ e.getMessage();  } finally {    Runtime.getRuntime().removeShutdownHook(hook);    wrapper.setScannerDone(status,message);  }}  }
class C{  private static float interpolate(float a,float b,float t){  return a + (b - a) * t;}  }
class C{  private void assertion(boolean b,String msg) throws javax.xml.transform.TransformerException {  if (!b) {    ErrorListener errorHandler=getErrorListener();    if (errorHandler != null) {      errorHandler.fatalError(new TransformerException(XSLMessages.createMessage(XPATHErrorResources.ER_INCORRECT_PROGRAMMER_ASSERTION,new Object[]{msg}),(SAXSourceLocator)this.getSAXLocator()));    }  }}  }
class C{  public ExtendedKeyUsageExtension(Boolean critical,Object value) throws IOException {  this.extensionId=PKIXExtensions.ExtendedKeyUsage_Id;  this.critical=critical.booleanValue();  this.extensionValue=(byte[])value;  DerValue val=new DerValue(this.extensionValue);  if (val.tag != DerValue.tag_Sequence) {    throw new IOException("Invalid encoding for " + "ExtendedKeyUsageExtension.");  }  keyUsages=new Vector<ObjectIdentifier>();  while (val.data.available() != 0) {    DerValue seq=val.data.getDerValue();    ObjectIdentifier usage=seq.getOID();    keyUsages.addElement(usage);  }}  }
class C{  public static boolean doesSymbolTableContainMatrixObject(LocalVariableMap symbolTable,String variableName){  return (symbolTable != null && symbolTable.keySet().contains(variableName) && symbolTable.get(variableName) instanceof MatrixObject);}  }
class C{  public void clearExtents(){  for (  ShapeDataCacheEntry entry : this.entries.values()) {    entry.setExtent(null);  }}  }
class C{  private void repairAction(Action action){  if (action.getTimes() == null)   action.setTimes(1);}  }
class C{  public long manhattanDistance(final MutableInt3D p){  return Math.abs((long)this.x - p.x) + Math.abs((long)this.y - p.y) + Math.abs((long)this.z - p.z);}  }
class C{  public void load(URL url) throws ParseException, IOException {  if (url == null) {    throw new IllegalArgumentException("You must supply a valid Synth set URL");  }  if (defaultsMap == null) {    defaultsMap=new HashMap<String,Object>();  }  InputStream input=url.openStream();  new SynthParser().parse(input,(DefaultSynthStyleFactory)factory,url,null,defaultsMap);}  }
class C{  @Override public final void handleMessage(Message msg){  if (!mHasQuit) {    if (mDbg)     mSm.log("handleMessage: E msg.what=" + msg.what);    mMsg=msg;    State msgProcessedState=null;    if (mIsConstructionCompleted) {      msgProcessedState=processMsg(msg);    } else     if (!mIsConstructionCompleted && (mMsg.what == SM_INIT_CMD) && (mMsg.obj == mSmHandlerObj)) {      mIsConstructionCompleted=true;      invokeEnterMethods(0);    } else {      throw new RuntimeException("StateMachine.handleMessage: " + "The start method not called, received msg: " + msg);    }    performTransitions(msgProcessedState,msg);    if (mDbg && mSm != null)     mSm.log("handleMessage: X");  }}  }
class C{  public String treeToString(int level){  int i;  StringBuffer text=new StringBuffer();  if (!m_isLeaf) {    text.append("\n");    for (i=1; i <= level; i++) {      text.append("|   ");    }    if (m_instances.attribute(m_splitAtt).name().charAt(0) != '[') {      text.append(m_instances.attribute(m_splitAtt).name() + " <= " + Utils.doubleToString(m_splitValue,1,3)+ " : ");    } else {      text.append(m_instances.attribute(m_splitAtt).name() + " false : ");    }    if (m_left != null) {      text.append(m_left.treeToString(level + 1));    } else {      text.append("NULL\n");    }    for (i=1; i <= level; i++) {      text.append("|   ");    }    if (m_instances.attribute(m_splitAtt).name().charAt(0) != '[') {      text.append(m_instances.attribute(m_splitAtt).name() + " >  " + Utils.doubleToString(m_splitValue,1,3)+ " : ");    } else {      text.append(m_instances.attribute(m_splitAtt).name() + " true : ");    }    if (m_right != null) {      text.append(m_right.treeToString(level + 1));    } else {      text.append("NULL\n");    }  } else {    text.append("LM" + m_leafModelNum);    if (m_globalDeviation > 0.0) {      text.append(" (" + m_numInstances + "/"+ Utils.doubleToString((100.0 * m_rootMeanSquaredError / m_globalDeviation),1,3)+ "%)\n");    } else {      text.append(" (" + m_numInstances + ")\n");    }  }  return text.toString();}  }
class C{  @Override public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append(this.toString(this.getClass()));  buffer.append("[UseDefault=");  buffer.append(this.isUseDefault());  buffer.append(", ");  buffer.append(this.elementConverter.toString());  buffer.append(']');  return buffer.toString();}  }
class C{  public TweetCardFilter(boolean tweet,boolean summary,boolean photo,boolean player,boolean promotion,StatsReceiver statsReceiver){  super(statsReceiver);  this.tweet=tweet;  this.summary=summary;  this.photo=photo;  this.player=player;  this.promotion=promotion;}  }
class C{  private void processRow(ResultSet resultSet) throws SortJdbcException, SortQueryException {  if (entityLoaders == null) {    entityLoaders=new EntityLoaders(jdbcEntityContextServices,projection,resultSet,entityContext);  } else {    entityLoaders.clearRowCache();  }  for (  EntityLoader entityLoader : entityLoaders) {    if (entityLoader.isEntityThere()) {      if (entityLoader.isNotYetLoaded()) {        entityLoader.load();      } else {        entityLoader.associateExistingEntity();      }    }  }}  }
class C{  public boolean containsValue(Object value){  return getMap().containsValue(value);}  }
class C{  public void find(String q,BoundingBox bbox){  QueryNominatim querier=new QueryNominatim(bbox);  querier.execute(q);  try {    ArrayList<SearchResult> result=querier.get(20,TimeUnit.SECONDS);    if (result != null && result.size() > 0) {      AppCompatDialog sr=createSearchResultsDialog(result);      sr.show();    } else {      Toast.makeText(activity,R.string.toast_nothing_found,Toast.LENGTH_LONG).show();    }  } catch (  InterruptedException e) {    e.printStackTrace();  }catch (  ExecutionException e) {    e.printStackTrace();  }catch (  TimeoutException e) {    Toast.makeText(activity,R.string.toast_timeout,Toast.LENGTH_LONG).show();    e.printStackTrace();  }}  }
class C{  private void savePathExpression(){  int count=pathMatchers.getTable().getItemCount();  PathMatcherTerm[] list=new PathMatcherTerm[count];  for (int i=0; i < count; i++) {    list[i]=(PathMatcherTerm)pathMatchers.getElementAt(i);  }  SaveAsDialog saveas=new SaveAsDialog(control.getShell());  if (saveas.open() == SaveAsDialog.OK) {    IPath filePath=saveas.getResult();    String fullPath=FILE_PREFIX + Platform.getLocation().append(filePath).toOSString();    XmlPersistentPathExpression persist=new XmlPersistentPathExpression();    try {      persist.save(new URI(fullPath),list);    } catch (    IOException e) {      System.err.println("I/O Exception.");      e.printStackTrace();    }catch (    URISyntaxException e) {      System.err.println("Malformed URI! Check the filename!");      e.printStackTrace();    }    IFile file=ResourcesPlugin.getWorkspace().getRoot().getFile(filePath);    try {      file.refreshLocal(1,null);    } catch (    CoreException e) {      System.err.println("Unable to refresh");      e.printStackTrace();    }  }}  }
class C{  @NotNull public static List<String> completeAbsolutePath(@NotNull String prefix,Predicate<File> accept){  String nativePath=prefix.startsWith("/") && SystemInfoRt.isWindows ? OSUtil.bashCompatibleToNative(prefix) : prefix;  File base=new File(nativePath);  boolean dotSuffix=prefix.endsWith(".") && !prefix.startsWith(".");  if (!base.exists() || dotSuffix) {    base=base.getParentFile();    if (base == null || !base.exists()) {      return Collections.emptyList();    }  }  File basePath;  String matchPrefix;  if (base.isDirectory()) {    basePath=base;    matchPrefix="";  } else {    basePath=base.getParentFile();    matchPrefix=base.getName();  }  List<String> result=Lists.newLinkedList();  for (  File fileCandidate : collectFiles(basePath,matchPrefix)) {    if (!accept.apply(fileCandidate)) {      continue;    }    String resultPath;    if (fileCandidate.isDirectory()) {      resultPath=fileCandidate.getAbsolutePath() + File.separator;    } else {      resultPath=fileCandidate.getAbsolutePath();    }    result.add(OSUtil.toBashCompatible(resultPath));  }  return result;}  }
class C{  public void testConfigGeneration() throws Exception {  CodeGenerator.snippet(pojos,TEST_PACKAGE,true,true,OUT_DIR_PATH,YES_TO_ALL);  assertTrue("Generated configuration is differ from expected",compareFiles("CacheConfig",TEST_PATH,GEN_PTRN));}  }
class C{  private static void errorHandling(VolleyError volleyError){  Log.e(TAG,"RequestUtil volley error");  if (volleyError.getMessage() != null)   Log.e(TAG,volleyError.getMessage());}  }
class C{  public void sxt(int destSize,int srcSize,Register dst,Register src){  assert (destSize == 32 || destSize == 64) && srcSize < destSize;  assert srcSize == 8 || srcSize == 16 || srcSize == 32;  int[] srcSizeValues={7,15,31};  super.sbfm(destSize,dst,src,0,srcSizeValues[NumUtil.log2Ceil(srcSize / 8)]);}  }
class C{  public void clear(){  properties.clear();}  }
class C{  public void dispatchCharactersEvents(org.xml.sax.ContentHandler ch) throws org.xml.sax.SAXException {  ch.characters((char[])m_obj,m_start,m_length);}  }
class C{  public void erasePurchase(String sku){  if (mPurchaseMap.containsKey(sku))   mPurchaseMap.remove(sku);}  }
class C{  private CTrackingResultsTableFiller(){}  }
class C{  public StreamImpl openReadWriteImpl() throws IOException {  return HttpStream.openReadWrite(this);}  }
class C{  private void addAll(IntersectState state,int nodeID) throws IOException {  if (nodeID >= leafNodeOffset) {    visitDocIDs(state.in,leafBlockFPs[nodeID - leafNodeOffset],state.visitor);  } else {    addAll(state,2 * nodeID);    addAll(state,2 * nodeID + 1);  }}  }
class C{  public void value(int value){  this.value=value;}  }
class C{  protected String doIt() throws Exception {  log.info("C_Order_ID=" + p_C_Order_ID + ", C_Invoice_ID="+ p_C_Invoice_ID);  if (p_C_Order_ID == 0 && p_C_Invoice_ID == 0)   throw new IllegalArgumentException("Nothing to do");  String retValue="";  if (p_C_Order_ID != 0) {    MOrder order=new MOrder(getCtx(),p_C_Order_ID,get_TrxName());    BigDecimal oldPrice=order.getGrandTotal();    MOrderLine[] lines=order.getLines();    for (int i=0; i < lines.length; i++) {      lines[i].setPrice(order.getM_PriceList_ID());      lines[i].saveEx();    }    order=new MOrder(getCtx(),p_C_Order_ID,get_TrxName());    BigDecimal newPrice=order.getGrandTotal();    retValue=order.getDocumentNo() + ":  " + oldPrice+ " -> "+ newPrice;  }  if (p_C_Invoice_ID != 0) {    MInvoice invoice=new MInvoice(getCtx(),p_C_Invoice_ID,null);    BigDecimal oldPrice=invoice.getGrandTotal();    MInvoiceLine[] lines=invoice.getLines(false);    for (int i=0; i < lines.length; i++) {      lines[i].setPrice(invoice.getM_PriceList_ID(),invoice.getC_BPartner_ID());      lines[i].saveEx();    }    invoice=new MInvoice(getCtx(),p_C_Invoice_ID,null);    BigDecimal newPrice=invoice.getGrandTotal();    if (retValue.length() > 0)     retValue+=Env.NL;    retValue+=invoice.getDocumentNo() + ":  " + oldPrice+ " -> "+ newPrice;  }  return retValue;}  }
class C{  private Initiator createInitiator(Host host,String ip,String id){  Initiator initiator;  List<Initiator> results=CustomQueryUtility.queryActiveResourcesByAltId(_dbClient,Initiator.class,"iniport",id);  if (results == null || results.isEmpty()) {    initiator=new Initiator();    initiator.setId(URIUtil.createId(Initiator.class));    initiator.setHost(host.getId());    initiator.setHostName(ip);    initiator.setInitiatorPort(id);    initiator.setProtocol(HostInterface.Protocol.ScaleIO.name());    initiator.setRegistrationStatus(DiscoveredDataObject.RegistrationStatus.REGISTERED.name());    initiator.setInactive(false);    _dbClient.createObject(initiator);  } else {    initiator=results.get(0);  }  return initiator;}  }
class C{  private InputStream load(String name) throws IOException {  Source src=getSource(name,null);  String code=codeCache.get(src);  if (code == null) {    code=compiler.compile(name,this);    codeCache.put(src,code);  }  return new ByteArrayInputStream(code.getBytes(StandardCharsets.UTF_8));}  }
class C{  public CardTable(String cardset){  setBackground(new Color(0x088A4B));  images=new Image[14][4];  String suits="cdhs";  for (int suit=0; suit <= 3; suit++) {    char c=suits.charAt(suit);    for (int rank=1; rank <= 13; rank++) {      String s=String.format("%s/%02d%c.gif",cardset,rank,c);      images[rank][suit]=new ImageIcon(s).getImage();    }  }  cardWidth=images[1][1].getWidth(null);  cardHeight=images[1][1].getHeight(null);  setTableSize(14,4);}  }
class C{  protected final void refreshLayout(){  Dimension2D gap=getGap();  Layout layout=getLayout();  layout.setGapX(gap.getWidth());  layout.setGapY(gap.getHeight());  if (layout instanceof OrientedLayout) {    OrientedLayout orientedLayout=(OrientedLayout)layout;    orientedLayout.setOrientation(getOrientation());  }}  }
class C{  @Override public String globalInfo(){  return super.globalInfo() + "\n\n" + "Incremental version of the algorithm.";}  }
class C{  @Override public final void endElement(final String ns,final String lName,final String qName) throws SAXException {  String name=lName == null || lName.length() == 0 ? qName : lName;  Rule r=(Rule)RULES.match(match);  if (r != null) {    r.end(name);  }  int slash=match.lastIndexOf('/');  if (slash >= 0) {    match=match.substring(0,slash);  } else {    match="";  }}  }
class C{  protected float clamp(float value){  return MathUtils.clamp(value,min,max);}  }
class C{  @Override public void start() throws DBException {  client.Begin();}  }
class C{  public boolean computeScrollOffset(long time){  if (isFinished()) {    return false;  }switch (mMode) {case SCROLL_MODE:    final long elapsedTime=time - mScrollerX.mStartTime;  final int duration=mScrollerX.mDuration;if (elapsedTime < duration) {  float q=(float)(elapsedTime) / duration;  q=viscousFluid(q);  mScrollerX.updateScroll(q);  mScrollerY.updateScroll(q);} else {  abortAnimation();}break;case FLING_MODE:if (!mScrollerX.mFinished) {if (!mScrollerX.update(time)) {if (!mScrollerX.continueWhenFinished(time)) {  mScrollerX.finish();}}}if (!mScrollerY.mFinished) {if (!mScrollerY.update(time)) {if (!mScrollerY.continueWhenFinished(time)) {mScrollerY.finish();}}}break;default :break;}return true;}  }
class C{  public area(String shape,int[] coords,String href){  setShape(shape);  setCoords(coords);  setHref(href);}  }
class C{  private static void keepalive(AccessControlContext context){}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void add(OffsettedItem item){  throwIfPrepared();  try {    if (item.getAlignment() > getAlignment()) {      throw new IllegalArgumentException("incompatible item alignment");    }  } catch (  NullPointerException ex) {    throw new NullPointerException("item == null");  }  items.add(item);}  }
class C{  public void writePdfs(){  double mi=0.0;  double miCont=0.0;  System.out.println("nextVal p(next) prevVal p(prev) p(joint) logTerm localVal");  for (int nextVal=0; nextVal < base_power_k; nextVal++) {    double p_next=(double)nextCount[nextVal] / (double)observations;    for (int prevVal=0; prevVal < base_power_k; prevVal++) {      double p_prev=(double)prevCount[prevVal] / (double)observations;      double p_joint=(double)jointCount[nextVal][prevVal] / (double)observations;      if (p_joint > 0.0) {        double logTerm=p_joint / (p_next * p_prev);        double localValue=Math.log(logTerm) / log_base;        miCont=p_joint * localValue;        System.out.println(String.format("%7d    %.2f %7d    %.2f     %.2f    %.2f     %.2f",nextVal,p_next,prevVal,p_prev,p_joint,logTerm,localValue));      } else {        miCont=0.0;        System.out.println(String.format("%7d    %.2f %7d    %.2f     %.2f    %.2f     %.2f",nextVal,p_next,prevVal,p_prev,p_joint,0.0,0.0));      }      mi+=miCont;    }  }  System.out.println("Average is " + mi);  return;}  }
class C{  private void onNamedSchemaSimpleType(Element schemaSimpleType){  Attribute nameAttr=schemaSimpleType.attribute("name");  if (nameAttr == null) {    return;  }  String name=nameAttr.getText();  QName qname=getQName(name);  XSDatatype datatype=loadXSDatatypeFromSimpleType(schemaSimpleType);  namedTypeResolver.registerSimpleType(qname,datatype);}  }
class C{  public static void main(String[] args){  TestRunner.run(ContentFilterTest.class);}  }
class C{  public void disconnect() throws SmsException, IOException {  if (transport_ != null) {    transport_.disconnect();    transport_=null;  }}  }
class C{  public NewWindowAction(Application app){  super(app,ID);}  }
class C{  private List<VOServiceActivation> createCustomerSpecificServiceActivations(VOTechnicalService techProduct,VOMarketplace marketplace,int count) throws Exception {  List<VOServiceActivation> list=new ArrayList<VOServiceActivation>();  String marketplaceId="null";  if (marketplace != null) {    marketplaceId=marketplace.getMarketplaceId();  }  LocalizerFacade facade=mock(LocalizerFacade.class);  for (int i=0; i < count; i++) {    VOServiceDetails product=createProduct(techProduct,"product_" + marketplaceId + "_"+ techProduct.getTechnicalServiceId()+ "_"+ i,svcProv);    VOCatalogEntry entry=new VOCatalogEntry();    entry.setMarketplace(marketplace);    List<VOCatalogEntry> entries=new ArrayList<VOCatalogEntry>();    entries.add(entry);    product=mpProv.publishService(product,entries);    VOOrganization cust=OrganizationAssembler.toVOOrganization(supplier,false,facade);    VOPriceModel priceModel=createPriceModel();    VOServiceDetails specificProduct=svcProv.savePriceModelForCustomer(product,priceModel,cust);    entries.clear();    VOServiceActivation activation=new VOServiceActivation();    activation.setActive(false);    activation.setService(specificProduct);    activation.setCatalogEntries(entries);    list.add(activation);  }  return list;}  }
class C{  public void stop(){  running=false;  thread.interrupt();  while (!closed) {    try {      Thread.sleep(100);    } catch (    InterruptedException e) {      logger.debug("interrupted");    }  }}  }
class C{  public FileTarget(final File file,final boolean append,final Formatter formatter) throws IOException {  super(null,formatter);  if (null != file) {    setFile(file,append);    openFile();  }}  }
class C{  public String sqlAD_getTableColumnElement(String vendorName,String catalogName,String schemaName,String tableName,String columnName){  String searchTableName="AD_Column";  ArrayList<String> columnNames=new ArrayList<String>();  columnNames.add("t0.TableName");  columnNames.add("t.ColumnName");  columnNames.add("t.AD_Element_ID");  ArrayList<String> aliasNames=new ArrayList<String>();  aliasNames.add("TABLE_NAME");  aliasNames.add("COLUMN_NAME");  aliasNames.add("COLUMN_ELEMENT");  ArrayList<String> joinTypes=new ArrayList<String>();  joinTypes.add("INNER JOIN");  ArrayList<String> joinTables=new ArrayList<String>();  joinTables.add("AD_Table");  ArrayList<String> joinConditions=new ArrayList<String>();  joinConditions.add("t.AD_Table_ID = t0.AD_Table_ID");  ArrayList<String> conditions=new ArrayList<String>();  conditions.add(new StringBuffer("UPPER(t.ColumnName) = '").append(columnName.toUpperCase()).append("'").toString());  conditions.add(new StringBuffer("UPPER(t0.TableName) = '").append(tableName.toUpperCase()).append("'").toString());  ArrayList<String> sortColumns=new ArrayList<String>();  sortColumns.add("1");  sortColumns.add("2");  sortColumns.add("3");  return sql_select(vendorName,catalogName,schemaName,searchTableName,null,columnNames,aliasNames,joinTypes,joinTables,null,joinConditions,conditions,sortColumns,false);}  }
class C{  public BulkRequestBuilder add(byte[] data,int from,int length,@Nullable String defaultIndex,@Nullable String defaultType) throws Exception {  request.add(data,from,length,defaultIndex,defaultType);  return this;}  }
class C{  public Source<Double> fromNegativeDoubleMaxToPositiveDoubleMax(){  return Compositions.weightWithValues(Doubles.fromNegativeDoubleMaxToDoubleMax(),-Double.MAX_VALUE,Double.MAX_VALUE);}  }
class C{  @Override public void widgetSelected(SelectionEvent event){  Button button=(Button)event.widget;  if (button.getSelection()) {    addFilter();  } else {    removeFilter();  }}  }
class C{  public void add(final ConversationStates state,final Collection<String> triggerStrings,final ChatCondition condition,boolean secondary,final ConversationStates nextState,final String reply,final ChatAction action,final String label){  if (triggerStrings == null) {    throw new IllegalArgumentException("trigger list must not be null");  }  Collection<Expression> triggerExpressions=createUniqueTriggerExpressions(state,triggerStrings,null,condition,reply,action);  add(triggerExpressions,state,condition,secondary,nextState,reply,action,label);}  }
class C{  public AnsibleRunner retainTempDirectory(boolean retainTempDirectory){  this.retainTempDirectory=retainTempDirectory;  return this;}  }
class C{  private void showFindReplaceDialog(){  JFrame frame=new JFrame();  FindReplaceDialog dialog=new FindReplaceDialog(frame,this);  frame.setContentPane(dialog);  frame.setTitle("Find / Replace");  frame.setVisible(true);  frame.pack();  frame.setLocationRelativeTo(null);}  }
class C{  public DoubleMatrix2D make(double[][] values){  if (this == sparse)   return new SparseDoubleMatrix2D(values); else   return new DenseDoubleMatrix2D(values);}  }
class C{  public ObjectGraph plusGraph(List<Object> activityScopeModules){  if (activityScopeModules == null) {    throw new IllegalArgumentException("You can't extend the application graph with a null list of modules");  }  return graph.plus(activityScopeModules.toArray());}  }
class C{  public Type subst(Type t,Mapping... maps){  ListBuffer<Type> from=ListBuffer.lb();  ListBuffer<Type> to=ListBuffer.lb();  for (  Mapping tm : maps) {    from.append(tm.from);    to.append(tm.to);  }  return types.subst(t,from.toList(),to.toList());}  }
class C{  private void deleteDoor(Player player,String input){}  }
class C{  static ClassLoader findClassLoader() throws ConfigurationError {  SecuritySupport ss=SecuritySupport.getInstance();  ClassLoader context=ss.getContextClassLoader();  ClassLoader system=ss.getSystemClassLoader();  ClassLoader chain=system;  while (true) {    if (context == chain) {      ClassLoader current=ObjectFactory.class.getClassLoader();      chain=system;      while (true) {        if (current == chain) {          return system;        }        if (chain == null) {          break;        }        chain=ss.getParentClassLoader(chain);      }      return current;    }    if (chain == null) {      break;    }    chain=ss.getParentClassLoader(chain);  }  ;  return context;}  }
class C{  public void write(OutStream out) throws IOException {  writeRGB(out);  out.writeUI8(alpha);}  }
class C{  static void receiveDatagram(DatagramChannel dc,InetAddress expectedSender,int id) throws IOException {  Selector sel=Selector.open();  dc.configureBlocking(false);  dc.register(sel,SelectionKey.OP_READ);  ByteBuffer buf=ByteBuffer.allocateDirect(100);  try {    for (; ; ) {      System.out.println("Waiting to receive message");      sel.select(5 * 1000);      SocketAddress sa=dc.receive(buf);      if (sa == null) {        if (expectedSender != null) {          throw new RuntimeException("Expected message not recieved");        }        System.out.println("No message received (correct)");        return;      }      InetAddress sender=((InetSocketAddress)sa).getAddress();      buf.flip();      byte[] bytes=new byte[buf.remaining()];      buf.get(bytes);      int receivedId=Integer.parseInt(new String(bytes));      System.out.format("Received message from %s (id=0x%x)\n",sender,receivedId);      if (expectedSender == null) {        if (receivedId == id)         throw new RuntimeException("Message not expected");        System.out.println("Message ignored (has wrong id)");      } else {        if (sender.equals(expectedSender)) {          System.out.println("Message expected");          return;        }        System.out.println("Message ignored (wrong sender)");      }      sel.selectedKeys().clear();      buf.rewind();    }  }  finally {    sel.close();  }}  }
class C{  public ReflectiveProperty(Class<T> propertyHolder,Class<V> valueType,String name){  super(valueType,name);  char firstLetter=Character.toUpperCase(name.charAt(0));  String theRest=name.substring(1);  String capitalizedName=firstLetter + theRest;  String getterName=PREFIX_GET + capitalizedName;  try {    mGetter=propertyHolder.getMethod(getterName,(Class<?>[])null);  } catch (  NoSuchMethodException e) {    try {      mGetter=propertyHolder.getDeclaredMethod(getterName,(Class<?>[])null);      mGetter.setAccessible(true);    } catch (    NoSuchMethodException e2) {      getterName=PREFIX_IS + capitalizedName;      try {        mGetter=propertyHolder.getMethod(getterName,(Class<?>[])null);      } catch (      NoSuchMethodException e3) {        try {          mGetter=propertyHolder.getDeclaredMethod(getterName,(Class<?>[])null);          mGetter.setAccessible(true);        } catch (        NoSuchMethodException e4) {          try {            mField=propertyHolder.getField(name);            Class fieldType=mField.getType();            if (!typesMatch(valueType,fieldType)) {              throw new NoSuchPropertyException("Underlying type (" + fieldType + ") "+ "does not match Property type ("+ valueType+ ")");            }            return;          } catch (          NoSuchFieldException e5) {            throw new NoSuchPropertyException("No accessor method or field found for" + " property with name " + name);          }        }      }    }  }  Class getterType=mGetter.getReturnType();  if (!typesMatch(valueType,getterType)) {    throw new NoSuchPropertyException("Underlying type (" + getterType + ") "+ "does not match Property type ("+ valueType+ ")");  }  String setterName=PREFIX_SET + capitalizedName;  try {    mSetter=propertyHolder.getDeclaredMethod(setterName,getterType);    mSetter.setAccessible(true);  } catch (  NoSuchMethodException ignored) {  }}  }
class C{  public static boolean isMaximum(InetAddress address){  byte[] addr=address.getAddress();  for (int i=0; i < addr.length; i++) {    if (addr[i] != (byte)0xff) {      return false;    }  }  return true;}  }
class C{  public static PatternExpr unmap(EvalFactoryNode node){  return unmapPatternEvalDeep(node,new StatementSpecUnMapContext());}  }
class C{  public JSONArray put(int index,int value) throws JSONException {  this.put(index,new Integer(value));  return this;}  }
class C{  public boolean hasVerticalScrollBar(){  return computeVerticalScrollRange() > computeVerticalScrollExtent();}  }
class C{  private void storeDownloadInfo(String type,Set<String> downloadInfo){  SharedPreferences.Editor editor=mSharedPrefs.edit();  if (downloadInfo.isEmpty()) {    editor.remove(type);  } else {    editor.putStringSet(type,downloadInfo);  }  editor.apply();}  }
class C{  public WriteStream out(){  if (_out == null) {    _out=new WriteStream(this);  }  return _out;}  }
class C{  private String createWorkflowStepForRestoreNativeFullCopy(Workflow workflow,StorageSystem nativeSystem,List<URI> nativeFullCopyURIs,String waitFor,Workflow.Method rollbackMethod){  URI nativeSystemURI=nativeSystem.getId();  Workflow.Method restoreVolumeMethod=new Workflow.Method(RESTORE_FROM_FC_METHOD_NAME,nativeSystemURI,nativeFullCopyURIs,Boolean.FALSE);  workflow.createStep(RESTORE_VOLUME_STEP,String.format("Restore native full copies: %s",nativeFullCopyURIs),waitFor,nativeSystemURI,nativeSystem.getSystemType(),BlockDeviceController.class,restoreVolumeMethod,rollbackMethod,null);  _log.info("Created workflow step to restore native full copies {}",nativeFullCopyURIs);  return RESTORE_VOLUME_STEP;}  }
class C{  protected Process launch(final CommandLine command,final Map<String,String> env,final File dir) throws IOException {  if (this.launcher == null) {    throw new IllegalStateException("CommandLauncher can not be null");  }  if (dir != null && !dir.exists()) {    throw new IOException(dir + " doesn't exist.");  }  return this.launcher.exec(command,env,dir);}  }
class C{  public void visitIincInsn(int var,int increment){  if (mv != null) {    mv.visitIincInsn(var,increment);  }}  }
class C{  public static <T>Collection<T> synchronizedCollection(Collection<T> collection){  if (collection == null) {    throw new NullPointerException("collection == null");  }  return new SynchronizedCollection<T>(collection);}  }
class C{  @Override protected Request createRequestToRetry(Request request){switch (request.getMessageType()) {case Message.ALLOCATE_REQUEST:{      RequestedTransportAttribute requestedTransportAttribute=(RequestedTransportAttribute)request.getAttribute(Attribute.REQUESTED_TRANSPORT);      int requestedTransport=(requestedTransportAttribute == null) ? 17 : requestedTransportAttribute.getRequestedTransport();      EvenPortAttribute evenPortAttribute=(EvenPortAttribute)request.getAttribute(Attribute.EVEN_PORT);      boolean rFlag=(evenPortAttribute != null) && evenPortAttribute.isRFlag();      return MessageFactory.createAllocateRequest((byte)requestedTransport,rFlag);    }case Message.CHANNELBIND_REQUEST:{    ChannelNumberAttribute channelNumberAttribute=(ChannelNumberAttribute)request.getAttribute(Attribute.CHANNEL_NUMBER);    char channelNumber=channelNumberAttribute.getChannelNumber();    XorPeerAddressAttribute peerAddressAttribute=(XorPeerAddressAttribute)request.getAttribute(Attribute.XOR_PEER_ADDRESS);    TransportAddress peerAddress=peerAddressAttribute.getAddress(request.getTransactionID());    byte[] retryTransactionID=TransactionID.createNewTransactionID().getBytes();    Request retryChannelBindRequest=MessageFactory.createChannelBindRequest(channelNumber,peerAddress,retryTransactionID);    try {      retryChannelBindRequest.setTransactionID(retryTransactionID);    } catch (    StunException sex) {      throw new UndeclaredThrowableException(sex);    }    return retryChannelBindRequest;  }case Message.CREATEPERMISSION_REQUEST:{  XorPeerAddressAttribute peerAddressAttribute=(XorPeerAddressAttribute)request.getAttribute(Attribute.XOR_PEER_ADDRESS);  TransportAddress peerAddress=peerAddressAttribute.getAddress(request.getTransactionID());  byte[] retryTransactionID=TransactionID.createNewTransactionID().getBytes();  Request retryCreatePermissionRequest=MessageFactory.createCreatePermissionRequest(peerAddress,retryTransactionID);  try {    retryCreatePermissionRequest.setTransactionID(retryTransactionID);  } catch (  StunException sex) {    throw new UndeclaredThrowableException(sex);  }  return retryCreatePermissionRequest;}case Message.REFRESH_REQUEST:{LifetimeAttribute lifetimeAttribute=(LifetimeAttribute)request.getAttribute(Attribute.LIFETIME);if (lifetimeAttribute == null) return MessageFactory.createRefreshRequest(); else {  return MessageFactory.createRefreshRequest(lifetimeAttribute.getLifetime());}}default :return super.createRequestToRetry(request);}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.543 -0400",hash_original_method="D5632ABA75A79C1B1E503C83B5BAD20E",hash_generated_method="9FCFC1BAA752FC8959BCC15355303B9E") public static boolean isExtension(String filename,String extension){  if (filename == null) {    return false;  }  if (extension == null || extension.length() == 0) {    return indexOfExtension(filename) == -1;  }  String fileExt=getExtension(filename);  return fileExt.equals(extension);}  }
class C{  @Override public boolean supportsSchemasInProcedureCalls(){  debugCodeCall("supportsSchemasInProcedureCalls");  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 15:32:11.962 -0400",hash_original_method="AC04C3F2A8A265A20CDE9BDBC5B444F5",hash_generated_method="6C6D344EE07D512A5AFBA2828C86AE1A") public boolean teardown(){  mTeardownRequested.set(true);  if (mBluetoothPan != null) {    for (    BluetoothDevice device : mBluetoothPan.getConnectedDevices()) {      mBluetoothPan.disconnect(device);    }  }  return true;}  }
class C{  private static Sequence<IString> filterUnknownWords(String input,TranslationModel<IString,String> phraseGenerator,boolean keepASCII){  Sequence<IString> source=IStrings.tokenize(input);  List<ConcreteRule<IString,String>> rules=phraseGenerator.getRules(source,null,-1,null);  CoverageSet possibleCoverage=new CoverageSet();  for (  ConcreteRule<IString,String> rule : rules) {    if (rule.abstractRule.target.size() > 0 && !"".equals(rule.abstractRule.target.toString())) {      possibleCoverage.or(rule.sourceCoverage);    }  }  if (keepASCII) {    for (int i=0, sz=source.size(); i < sz; ++i) {      String token=source.get(i).toString();      if (TokenUtils.isASCII(token)) {        possibleCoverage.set(i);      }    }  }  if (possibleCoverage.cardinality() > 0) {    IString[] filteredToks=new IString[possibleCoverage.cardinality()];    for (int i=possibleCoverage.nextSetBit(0), j=0; i >= 0; i=possibleCoverage.nextSetBit(i + 1)) {      filteredToks[j++]=source.get(i);    }    return new ArraySequence<IString>(true,filteredToks);  }  return null;}  }
class C{  public SpatialDirectoryEntry(int id,ModifiableHyperBoundingBox mbr){  super(id);  this.mbr=mbr;}  }
class C{  private boolean isProductCategoryField(int columnId){  X_AD_Column col=new X_AD_Column(Env.getCtx(),columnId,null);  if (col.get_ID() == 0) {    return false;  }  return MProduct.COLUMNNAME_M_Product_Category_ID.equals(col.getColumnName());}  }
class C{  public static UpdateUsersE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  UpdateUsersE object=new UpdateUsersE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","updateUsers").equals(reader.getName())) {          object.setUpdateUsers(org.oscm.xsd.UpdateUsers.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public static Color HSLtoRGB(float h,float s,float l){  int[] rgb=HSLtoRGB(h,s,l,null);  return new Color(rgb[0],rgb[1],rgb[2]);}  }
class C{  public AttributeWeightedExampleSet createCleanClone(){  AttributeWeightedExampleSet clone=(AttributeWeightedExampleSet)clone();  Iterator<Attribute> a=clone.getAttributes().iterator();  while (a.hasNext()) {    Attribute attribute=a.next();    double weight=this.attributeWeights.getWeight(attribute.getName());    if (Tools.isZero(weight)) {      a.remove();    }  }  return clone;}  }
class C{  void updateDrawerState(int activeState){  if (activeState == ViewDragHelper.STATE_IDLE) {    if (dragOffset == 0) {      dispatchOnPanelClosed();    } else     if (dragOffset == 1) {      dispatchOnDrawerOpened();    }  }}  }
class C{  protected RuleExecutionOutput matchesBase(String url,final HttpServletRequest hsRequest,final HttpServletResponse hsResponse,RuleChain chain) throws IOException, ServletException, InvocationTargetException {  if (log.isDebugEnabled()) {    String displayName=getDisplayName();    log.debug(displayName + " run called with " + url);  }  if (!initialised) {    log.debug("not initialised, skipping");    return null;  }  if (!valid) {    log.debug("not valid, skipping");    return null;  }  if (!enabled) {    log.debug("not enabled, skipping");    return null;  }  if (url == null) {    log.debug("url is null (maybe because of a previous match), skipping");    return null;  }  StringMatchingMatcher matcher=pattern.matcher(url);  boolean performToReplacement=false;  if (toEmpty || stopFilterChainOnMatch) {    if (!matcher.find()) {      if (log.isTraceEnabled()) {        log.trace("no match on \"from\" (to is empty)");      }      return null;    }  } else {    if (!matcher.find()) {      if (log.isTraceEnabled()) {        log.trace("no match on \"from\" for " + from + " and "+ url);      }      return null;    }    if (!toEmpty && !noSubstitution) {      performToReplacement=true;    }  }  if (log.isDebugEnabled()) {    log.debug("matched \"from\"");  }  int conditionsSize=conditions.size();  ConditionMatch lastConditionMatch=null;  if (conditionsSize > 0) {    boolean processNextOr=false;    boolean currentResult=true;    for (int i=0; i < conditionsSize; i++) {      final Condition condition=(Condition)conditions.get(i);      ConditionMatch conditionMatch=condition.getConditionMatch(hsRequest);      if (conditionMatch != null) {        lastConditionMatch=conditionMatch;      }      boolean conditionMatches=conditionMatch != null;      if (processNextOr) {        currentResult|=conditionMatches;      } else {        currentResult&=conditionMatches;      }      processNextOr=condition.isProcessNextOr();    }    if (!currentResult) {      log.debug("conditions do not match");      return null;    } else {      log.debug("conditions match");    }  }  hsRequest.setAttribute("org.tuckey.web.filters.urlrewrite.RuleMatched",Boolean.TRUE);  int setAttributesSize=setAttributes.size();  if (setAttributesSize > 0) {    log.trace("setting attributes");    for (int i=0; i < setAttributesSize; i++) {      SetAttribute setAttribute=(SetAttribute)setAttributes.get(i);      setAttribute.execute(lastConditionMatch,matcher,hsRequest,hsResponse);    }  }  int runsSize=runs.size();  RewriteMatch lastRunMatch=null;  if (runsSize > 0) {    log.trace("performing runs");    for (int i=0; i < runsSize; i++) {      Run run=(Run)runs.get(i);      lastRunMatch=run.execute(hsRequest,hsResponse,matcher,lastConditionMatch,chain);    }  }  String replacedTo=null;  if (performToReplacement && to != null) {    SubstitutionContext substitutionContext=new SubstitutionContext(hsRequest,matcher,lastConditionMatch,to);    SubstitutionFilterChain substitutionFilter=ChainedSubstitutionFilters.getDefaultSubstitutionChain(true,toContainsFunction,toContainsVariable,toContainsBackReference,servletContext);    replacedTo=substitutionFilter.substitute(url,substitutionContext);  }  RuleExecutionOutput ruleExecutionOutput=new RuleExecutionOutput(replacedTo,true,lastRunMatch);  if (toEmpty) {    log.debug("'to' is empty, no rewrite, only 'set' and or 'run'");    return null;  }  if (noSubstitution) {    log.debug("'to' is '-', no substitution, passing through URL");    ruleExecutionOutput.setNoSubstitution(true);    ruleExecutionOutput.setReplacedUrl(url);  }  if (stopFilterChainOnMatch) {    ruleExecutionOutput.setStopFilterMatch(true);    ruleExecutionOutput.setReplacedUrl(null);  }  return ruleExecutionOutput;}  }
class C{  public static WindowListener add(WindowListener a,WindowListener b){  return (WindowListener)addInternal(a,b);}  }
class C{  @Override public void onSettings(FramedConnection connection){  allocationLimit=connection.maxConcurrentStreams();}  }
class C{  public static <K extends Comparable<?>,V>Builder<K,V> reverseOrder(){  return new Builder<K,V>(Ordering.natural().reverse());}  }
class C{  public byte[] POSTbytes(final MultiProtocolURL url,final String vhost,final Map<String,ContentBody> post,final boolean usegzip,final boolean concurrent) throws IOException {  final HttpPost httpPost=new HttpPost(url.toNormalform(true));  final boolean localhost=Domains.isLocalhost(url.getHost());  if (!localhost)   setHost(url.getHost());  if (vhost == null)   setHost(Domains.LOCALHOST);  final MultipartEntityBuilder entityBuilder=MultipartEntityBuilder.create();  for (  final Entry<String,ContentBody> part : post.entrySet())   entityBuilder.addPart(part.getKey(),part.getValue());  final HttpEntity multipartEntity=entityBuilder.build();  this.upbytes=multipartEntity.getContentLength();  if (usegzip) {    httpPost.setEntity(new GzipCompressingEntity(multipartEntity));  } else {    httpPost.setEntity(multipartEntity);  }  return getContentBytes(httpPost,Integer.MAX_VALUE,concurrent);}  }
class C{  public static String[] arraySplit(String s,char separatorChar,boolean trim){  if (s == null) {    return null;  }  int length=s.length();  if (length == 0) {    return new String[0];  }  ArrayList<String> list=New.arrayList();  StringBuilder buff=new StringBuilder(length);  for (int i=0; i < length; i++) {    char c=s.charAt(i);    if (c == separatorChar) {      String e=buff.toString();      list.add(trim ? e.trim() : e);      buff.setLength(0);    } else     if (c == '\\' && i < length - 1) {      buff.append(s.charAt(++i));    } else {      buff.append(c);    }  }  String e=buff.toString();  list.add(trim ? e.trim() : e);  String[] array=new String[list.size()];  list.toArray(array);  return array;}  }
class C{  private void sendErrorMessageToUI(String valuetosend){  Log.e("medtronicCGMService",valuetosend);  log.error("Send Error Message to UI " + valuetosend);  if (mClients != null && mClients.size() > 0) {    for (int i=mClients.size() - 1; i >= 0; i--) {      try {        Message mSend=null;        mSend=Message.obtain(null,MedtronicConstants.MSG_MEDTRONIC_CGM_ERROR_RECEIVED);        Bundle b=new Bundle();        b.putString("data",valuetosend);        mSend.setData(b);        mClients.get(i).send(mSend);      } catch (      RemoteException e) {        mClients.remove(i);      }    }  } else {    displayMessage(valuetosend);  }}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public boolean serveCompressedFiles(){  return serveCompressedFiles;}  }
class C{  private String quoteGlueStrings(){  final String[] packageStrs=overriddenParameters.getGlue().split(",");  final StringBuilder sb=new StringBuilder();  for (int i=0; i < packageStrs.length; i++) {    final String packageStr=packageStrs[i];    sb.append(String.format("\"%s\"",packageStr.trim()));    if (i < packageStrs.length - 1) {      sb.append(", ");    }  }  return sb.toString();}  }
class C{  public byte[] asn1Encode() throws Asn1Exception, IOException {  DerOutputStream bytes=new DerOutputStream();  DerOutputStream temp=new DerOutputStream();  temp.putInteger(etype);  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,TAG_TYPE),temp);  if (saltStr != null) {    temp=new DerOutputStream();    temp.putDerValue(new KerberosString(saltStr).toDerValue());    bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,TAG_VALUE1),temp);  }  if (s2kparams != null) {    temp=new DerOutputStream();    temp.putOctetString(s2kparams);    bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,TAG_VALUE2),temp);  }  temp=new DerOutputStream();  temp.write(DerValue.tag_Sequence,bytes);  return temp.toByteArray();}  }
class C{  public void addDescription(String description){  String original=getDescription();  if (original == null || original.trim().length() == 0)   super.setDescription(description); else   super.setDescription(original + " - " + description);}  }
class C{  public List<byte[]> lrange(final byte[] key,final long start,final long end){  checkIsInMulti();  client.lrange(key,start,end);  return client.getBinaryMultiBulkReply();}  }
class C{  static private boolean tryCancelTask(final BigdataRDFContext context,final UUID queryId){  final TaskAndFutureTask<?> tmp=context.getTaskById(queryId);  if (tmp != null) {    final Future<?> f=tmp.ft;    if (f != null) {      if (f.cancel(true)) {        return true;      }    }  }  return false;}  }
class C{  private ContentElement parseContentElement(SpanManager sm,ContentElementParsingParameters cepp,LinkedList<Span> lineSpans,ContentElement result){  List<Link> localLinks=new ArrayList<Link>();  List<Template> localTemplates=new ArrayList<Template>();  List<Span> boldSpans=new ArrayList<Span>();  List<Span> italicSpans=new ArrayList<Span>();  sm.manageList(boldSpans);  sm.manageList(italicSpans);  List<Span> managedSpans=new ArrayList<Span>();  sm.manageList(managedSpans);  Span contentElementRange=new Span(lineSpans.getFirst().getStart(),lineSpans.getLast().getEnd()).trim(sm);  managedSpans.add(contentElementRange);  if (calculateSrcSpans) {    result.setSrcSpan(new SrcSpan(sm.getSrcPos(contentElementRange.getStart()),sm.getSrcPos(contentElementRange.getEnd())));  }  sm.manageList(lineSpans);  while (!lineSpans.isEmpty()) {    Span line=lineSpans.getFirst();    parseBoldAndItalicSpans(sm,line,boldSpans,italicSpans);    parseExternalLinks(sm,line,"http://",managedSpans,localLinks,result);    parseExternalLinks(sm,line,"https://",managedSpans,localLinks,result);    parseExternalLinks(sm,line,"ftp://",managedSpans,localLinks,result);    parseExternalLinks(sm,line,"mailto:",managedSpans,localLinks,result);    lineSpans.removeFirst();  }  sm.removeManagedList(lineSpans);  int i;  i=0;  while (i < cepp.linkSpans.size()) {    if (contentElementRange.hits(cepp.linkSpans.get(i))) {      Span linkSpan=cepp.linkSpans.remove(i);      managedSpans.add(linkSpan);      Link l=cepp.links.remove(i).setHomeElement(result);      localLinks.add(l);      if (!showImageText && l.getType() == Link.type.IMAGE) {        sm.delete(linkSpan);      }    } else {      i++;    }  }  i=0;  while (i < cepp.templateSpans.size()) {    Span ts=cepp.templateSpans.get(i);    if (contentElementRange.hits(ts)) {      ResolvedTemplate rt=cepp.templates.remove(i);      if (rt.getPostParseReplacement() != null) {        sm.replace(ts,rt.getPostParseReplacement());      }      cepp.templateSpans.remove(i);      Object parsedObject=rt.getParsedObject();      if (parsedObject != null) {        managedSpans.add(ts);        Class parsedObjectClass=parsedObject.getClass();        if (parsedObjectClass == Template.class) {          localTemplates.add((Template)parsedObject);        } else         if (parsedObjectClass == Link.class) {          localLinks.add(((Link)parsedObject).setHomeElement(result));        } else {          localTemplates.add(rt.getTemplate());        }      }    } else {      i++;    }  }  i=0;  List<Span> tags=new ArrayList<Span>();  while (i < cepp.tagSpans.size()) {    Span s=cepp.tagSpans.get(i);    if (contentElementRange.hits(s)) {      cepp.tagSpans.remove(i);      if (deleteTags) {        sm.delete(s);      } else {        tags.add(s);        managedSpans.add(s);      }    } else {      i++;    }  }  i=0;  List<Span> localNoWikiSpans=new ArrayList<Span>();  while (i < cepp.noWikiSpans.size()) {    Span s=cepp.noWikiSpans.get(i);    if (contentElementRange.hits(s)) {      cepp.noWikiSpans.remove(i);      sm.replace(s,cepp.noWikiStrings.remove(i));      localNoWikiSpans.add(s);      managedSpans.add(s);    } else {      i++;    }  }  i=0;  List<Span> mathSpans=new ArrayList<Span>();  while (i < cepp.mathSpans.size()) {    Span s=cepp.mathSpans.get(i);    if (contentElementRange.hits(s)) {      cepp.mathSpans.remove(i);      if (showMathTagContent) {        mathSpans.add(s);        managedSpans.add(s);        sm.replace(s,cepp.mathStrings.remove(i));      } else {        sm.delete(s);      }    } else {      i++;    }  }  result.setText(sm.substring(contentElementRange));  sm.removeManagedList(boldSpans);  sm.removeManagedList(italicSpans);  sm.removeManagedList(managedSpans);  final int adjust=-contentElementRange.getStart();  for (  Span s : boldSpans) {    s.adjust(adjust);  }  for (  Span s : italicSpans) {    s.adjust(adjust);  }  for (  Span s : managedSpans) {    s.adjust(adjust);  }  result.setFormatSpans(FormatType.BOLD,boldSpans);  result.setFormatSpans(FormatType.ITALIC,italicSpans);  result.setFormatSpans(FormatType.TAG,tags);  result.setFormatSpans(FormatType.MATH,mathSpans);  result.setFormatSpans(FormatType.NOWIKI,localNoWikiSpans);  result.setLinks(sortLinks(localLinks));  result.setTemplates(sortTemplates(localTemplates));  return result;}  }
class C{  public CSVWriter(Writer writer,char separator,char quotechar){  this(writer,separator,quotechar,DEFAULT_ESCAPE_CHARACTER);}  }
class C{  public static QueueInfo addRequest(QueueInfo provider){  QueueInfo result=getCopy(provider);  result.requestCount=provider.requestCount + 1;  return result;}  }
class C{  private int decodeTonesInfo(){  for (int chNum=0; chNum < numChannels; chNum++) {    for (int i=0; i < ATRAC3P_SUBBANDS; i++) {      ctx.channels[chNum].tonesInfo[i].clear();      ;    }  }  ctx.wavesInfo.tonesPresent=br.readBool();  if (!ctx.wavesInfo.tonesPresent) {    return 0;  }  for (int i=0; i < ctx.wavesInfo.waves.length; i++) {    ctx.wavesInfo.waves[i].clear();    ;  }  ctx.wavesInfo.amplitudeMode=br.read1();  if (ctx.wavesInfo.amplitudeMode == 0) {    log.error(String.format("GHA amplitude mode 0"));    return AT3P_ERROR;  }  ctx.wavesInfo.numToneBands=tone_vlc_tabs[0].getVLC2(br) + 1;  if (numChannels == 2) {    getSubbandFlags(ctx.wavesInfo.toneSharing,ctx.wavesInfo.numToneBands);    getSubbandFlags(ctx.wavesInfo.toneMaster,ctx.wavesInfo.numToneBands);    if (getSubbandFlags(ctx.wavesInfo.phaseShift,ctx.wavesInfo.numToneBands)) {      log.warn(String.format("GHA Phase shifting"));    }  }  ctx.wavesInfo.tonesIndex=0;  for (int chNum=0; chNum < numChannels; chNum++) {    final boolean bandHasTones[]=new boolean[16];    for (int i=0; i < ctx.wavesInfo.numToneBands; i++) {      bandHasTones[i]=(chNum == 0 ? true : !ctx.wavesInfo.toneSharing[i]);    }    decodeTonesEnvelope(chNum,bandHasTones);    int ret=decodeBandNumwavs(chNum,bandHasTones);    if (ret < 0) {      return ret;    }    decodeTonesFrequency(chNum,bandHasTones);    decodeTonesAmplitude(chNum,bandHasTones);    decodeTonesPhase(chNum,bandHasTones);  }  if (numChannels == 2) {    for (int i=0; i < ctx.wavesInfo.numToneBands; i++) {      if (ctx.wavesInfo.toneSharing[i]) {        ctx.channels[1].tonesInfo[i].copy(ctx.channels[0].tonesInfo[i]);      }      if (ctx.wavesInfo.toneMaster[i]) {        WavesData tmp=new WavesData();        tmp.copy(ctx.channels[0].tonesInfo[i]);        ctx.channels[0].tonesInfo[i].copy(ctx.channels[1].tonesInfo[i]);        ctx.channels[1].tonesInfo[i].copy(tmp);      }    }  }  return 0;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.174 -0500",hash_original_method="4DB7FF1416CFDDE04ED7DBC866AEEF40",hash_generated_method="5A7235E4B0DC37E990C746EE84AA96F9") public synchronized int errorCount(){  return fErrors.size();}  }
class C{  public CuboidRegion(World world,Vector pos1,Vector pos2){  super(world);  checkNotNull(pos1);  checkNotNull(pos2);  this.pos1=pos1;  this.pos2=pos2;  recalculate();}  }
class C{  @Override public int updateCharacters(Uri uri,ContentValues cvs,String selection,String[] selectionArgs){  selection=addSelectionArgs(selection,selectionArgs," OR ");  return mOpenHelper.getWritableDatabase().update(CharacterContract.CharacterEntry.TABLE_NAME,cvs,selection,selectionArgs);}  }
class C{  public AudioQuality(int samplingRate,int bitRate){  this.samplingRate=samplingRate;  this.bitRate=bitRate;}  }
class C{  private boolean isLineTooLong(IDocument document,int line) throws BadLocationException {  String lineContents=getLine(document,line);  return calculateDisplayedWidth(lineContents) > getMargin();}  }
class C{  public boolean contains(TLAProofPosition proofPosition){  return this.offset <= proofPosition.getOffset() && this.offset + this.length >= proofPosition.getOffset() + proofPosition.getLength();}  }
class C{  public void close() throws IOException {  file.close();  tmp=null;}  }
class C{  public static WritableArray createArray(){  return new WritableNativeArray();}  }
class C{  @ConstructorProperties({"root"}) public DefaultTreeModel(TreeNode root){  this(root,false);}  }
class C{  public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj != null && obj instanceof PropertyDescriptor) {    PropertyDescriptor other=(PropertyDescriptor)obj;    Method otherReadMethod=other.getReadMethod();    Method otherWriteMethod=other.getWriteMethod();    if (!compareMethods(getReadMethod(),otherReadMethod)) {      return false;    }    if (!compareMethods(getWriteMethod(),otherWriteMethod)) {      return false;    }    if (getPropertyType() == other.getPropertyType() && getPropertyEditorClass() == other.getPropertyEditorClass() && bound == other.isBound() && constrained == other.isConstrained() && writeMethodName == other.writeMethodName && readMethodName == other.readMethodName) {      return true;    }  }  return false;}  }
class C{  public static void replaceFragment(Activity activity,int containerViewId,Fragment newFragment,Bundle bundle,boolean canBack){  FragmentTransaction mFragmentTransaction=activity.getFragmentManager().beginTransaction();  mFragmentTransaction.replace(containerViewId,newFragment,newFragment.getClass().getName());  if (bundle != null) {    newFragment.setArguments(bundle);  }  if (canBack) {    mFragmentTransaction.addToBackStack(null);  }  mFragmentTransaction.commit();}  }
class C{  public JTableHeader(){  this(null);}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  private void validateState(State current){  ValidationUtils.validateState(current);}  }
class C{  protected SerializableType(SqlType sqlType,Class<?>[] classes){  super(sqlType,classes);}  }
class C{  public static synchronized boolean removeKey(String keyId){  log.trace("removeKey({})",keyId);  return forKey(null,null).orElse(false);}  }
class C{  public Workflow.Method attachAndMountMethod(URI exportGroup,URI hostId,URI vcenter,URI vcenterDatacenter){  return new Workflow.Method("attachAndMount",exportGroup,hostId,vcenter,vcenterDatacenter);}  }
class C{  private static int constructPartialBracesSource(String fullyQualifiedClassName,StringBuilder source,int numCharsCompleted,Boolean isCommentAbove,Boolean isCommentBelow){  int invocationLineNum=1;  String str="/*-{".substring(0,numCharsCompleted) + "\n";  source.append("class " + fullyQualifiedClassName + "{\n");  if (isCommentAbove) {    source.append("  /* Global comment above with brackets () */\n");    source.append("  // Single line global comment ()\n");    invocationLineNum+=2;  }  source.append("  public native int bar()");  source.append(str);  if (isCommentBelow) {    source.append("  /* Global comment below with brackets () */\n");  }  source.append("  public  void bar1(){\n");  source.append("  /* A java method body */\n");  source.append("  }\n");  source.append("  public native void bar2()/*-{\n");  source.append("  /* A JSNI method body */\n");  source.append("  }-*/;\n");  source.append("}\n");  return invocationLineNum;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Show.ROLE_NAMES.clone();}  }
class C{  public IntroduceFactoryDescriptor(String project,String description,String comment,Map arguments,int flags){  super(IJavaRefactorings.INTRODUCE_FACTORY,project,description,comment,arguments,flags);}  }
class C{  @SuppressWarnings("unchecked") public synchronized E peek(){  try {    return (E)elementData[elementCount - 1];  } catch (  IndexOutOfBoundsException e) {    throw new EmptyStackException();  }}  }
class C{  public List<ShardRouting> allShards(String index){  List<ShardRouting> shards=new ArrayList<>();  IndexRoutingTable indexRoutingTable=index(index);  if (indexRoutingTable == null) {    throw new IndexNotFoundException(index);  }  for (  IndexShardRoutingTable indexShardRoutingTable : indexRoutingTable) {    for (    ShardRouting shardRouting : indexShardRoutingTable) {      shards.add(shardRouting);    }  }  return shards;}  }
class C{  public boolean isMatched(int v){  validate(v);  return mate[v] != UNMATCHED;}  }
class C{  public String seedTipText(){  return "The seed value for the random number generator.";}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public sun.net.ftp.FtpClient makeDirectory(String name) throws sun.net.ftp.FtpProtocolException, IOException {  issueCommandCheck("MKD " + name);  return this;}  }
class C{  public BaseDriveCollectionPage(final BaseDriveCollectionResponse response,final IDriveCollectionRequestBuilder builder){  super(response.value,builder);}  }
class C{  public void saveLockPattern(List<LockPatternView.Cell> pattern){  final byte[] hash=LockPatternUtils.patternToHash(pattern);  try {    RandomAccessFile raf=new RandomAccessFile(sLockPatternFilename,"rwd");    if (pattern == null) {      raf.setLength(0);    } else {      raf.write(hash,0,hash.length);    }    raf.close();  } catch (  FileNotFoundException fnfe) {    Log.e(TAG,"Unable to save lock pattern to " + sLockPatternFilename);  }catch (  IOException ioe) {    Log.e(TAG,"Unable to save lock pattern to " + sLockPatternFilename);  }}  }
class C{  public boolean toWeatherState(){  return to;}  }
class C{  void unbindFromTask(){  setThumbnail(null);}  }
class C{  @Override public void close(){  tracer.closeScope(this);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Integer(getCapDevInput(stack).getMaxChannel());}  }
class C{  @Override public boolean isRunning(){  return !paused;}  }
class C{  public static JSONValue parse(String string){  if (string == null) {    throw new NullPointerException("string is null");  }  DefaultHandler handler=new DefaultHandler();  new JSONParser(handler).parse(string);  return handler.getValue();}  }
class C{  protected void translateNestedFields(ClassDescriptor clonedDescriptor,AbstractSession session){  if (this.nestedFieldTranslations == null) {    return;  }  for (  Entry<String,Object[]> translations : this.nestedFieldTranslations.entrySet()) {    String attributeName=translations.getKey();    DatabaseMapping mapping=null;    String currentAttributeName=attributeName.substring(0,attributeName.indexOf("."));    String remainingAttributeName=attributeName.substring(attributeName.indexOf(".") + 1);    mapping=clonedDescriptor.getMappingForAttributeName(currentAttributeName);    if (mapping.isAggregateObjectMapping()) {      if (remainingAttributeName != null && remainingAttributeName.contains(".")) {        ((AggregateObjectMapping)mapping).addNestedFieldTranslation(remainingAttributeName,(DatabaseField)translations.getValue()[0],(String)translations.getValue()[1]);      } else {        ((AggregateObjectMapping)mapping).addFieldTranslation((DatabaseField)translations.getValue()[0],(String)translations.getValue()[1]);      }    }  }}  }
class C{  public Id<Node> convertCrossingId2NodeId(Id<DgCrossing> crossingId){  Integer ksIntCrossingId=Integer.parseInt(crossingId.toString());  String matsimStringNodeId=this.idPool.getStringId(ksIntCrossingId);  if (matsimStringNodeId.endsWith("77")) {    Id<Node> id=Id.create(matsimStringNodeId.substring(0,matsimStringNodeId.length() - 2),Node.class);    return id;  }  throw new IllegalStateException("Can not convert " + matsimStringNodeId + " to node id");}  }
class C{  public static double intersectRayLine(double originX,double originY,double dirX,double dirY,double pointX,double pointY,double normalX,double normalY,double epsilon){  double denom=normalX * dirX + normalY * dirY;  if (denom < epsilon) {    double t=((pointX - originX) * normalX + (pointY - originY) * normalY) / denom;    if (t >= 0.0)     return t;  }  return -1.0;}  }
class C{  public void computeLabel(BoundaryNodeRule boundaryNodeRule){  boolean isArea=false;  for (Iterator it=iterator(); it.hasNext(); ) {    EdgeEnd e=(EdgeEnd)it.next();    if (e.getLabel().isArea())     isArea=true;  }  if (isArea)   label=new Label(Location.NONE,Location.NONE,Location.NONE); else   label=new Label(Location.NONE);  for (int i=0; i < 2; i++) {    computeLabelOn(i,boundaryNodeRule);    if (isArea)     computeLabelSides(i);  }}  }
class C{  public static void main(String[] args) throws IOException {  if (args.length < 1 || args[0].equals("-h")) {    System.err.println("Usage: " + LabelPhrases.class.toString());    System.err.println("    -p phrase_file     phrase-sentence file to process");    System.err.println();    System.exit(-1);  }  String phrase_file_name=null;  for (int i=0; i < args.length; i++) {    if ("-p".equals(args[i]))     phrase_file_name=args[++i];  }  if (phrase_file_name == null) {    LOG.error("a phrase file is required for operation");    System.exit(-1);  }  try (LineReader phrase_reader=new LineReader(phrase_file_name)){    while (phrase_reader.ready()) {      String line=phrase_reader.readLine();      String[] fields=line.split("\\t");      if (fields.length != 3 || fields[2].equals("()")) {        System.err.println("[FAIL] Empty parse in line:\t" + line);        continue;      }      String[] phrase_strings=fields[0].split("\\s");      int[] phrase_ids=new int[phrase_strings.length];      for (int i=0; i < phrase_strings.length; i++)       phrase_ids[i]=Vocabulary.id(phrase_strings[i]);      ArraySyntaxTree syntax=new ArraySyntaxTree(fields[2]);      int[] sentence_ids=syntax.getTerminals();      int match_start=-1;      int match_end=-1;      for (int i=0; i < sentence_ids.length; i++) {        if (phrase_ids[0] == sentence_ids[i]) {          match_start=i;          int j=0;          while (j < phrase_ids.length && phrase_ids[j] == sentence_ids[i + j]) {            j++;          }          if (j == phrase_ids.length) {            match_end=i + j;            break;          }        }      }      int label=syntax.getOneConstituent(match_start,match_end);      if (label == 0)       label=syntax.getOneSingleConcatenation(match_start,match_end);      if (label == 0)       label=syntax.getOneRightSideCCG(match_start,match_end);      if (label == 0)       label=syntax.getOneLeftSideCCG(match_start,match_end);      if (label == 0)       label=syntax.getOneDoubleConcatenation(match_start,match_end);      if (label == 0) {        System.err.println("[FAIL] No label found in line:\t" + line);        continue;      }      System.out.println(Vocabulary.word(label) + "\t" + line);    }  } }  }
class C{  public static long negHalfWidth(final long min,final long max){  if (min > max) {    throw new IllegalArgumentException("min [" + min + "] must be <= max ["+ max+ "]");  }  long mean=meanLow(min,max);  return min - mean - ((min ^ max) & 1);}  }
class C{  private void writeLong(long l) throws IOException {  output.write((int)((l & 0xff000000) >>> 24));  output.write((int)((l & 0x00ff0000) >>> 16));  output.write((int)((l & 0x0000ff00) >>> 8));  output.write((int)(l & 0x000000ff));}  }
class C{  public SignatureVisitor visitInterface(){  return this;}  }
class C{  public boolean restorePersistentState(SharedPreferences sp,String prefix) throws IllegalStateException {  boolean ok=doRestorePersistentState(sp,prefix);  if (!ok) {    mEditHistory.clear();  }  return ok;}  }
class C{  public void evaluateFunctions(JCas jcas){  List<Timex3> linearDates=new ArrayList<Timex3>();  FSIterator iterTimex=jcas.getAnnotationIndex(Timex3.type).iterator();  while (iterTimex.hasNext()) {    Timex3 timex=(Timex3)iterTimex.next();    if (timex.getTimexType().equals("DATE")) {      linearDates.add(timex);    }  }  Pattern cmd_p=Pattern.compile("(\\w\\w\\w\\w)-(\\w\\w)-(\\w\\w)\\s+decadeCalc\\((\\d+)\\)");  Matcher cmd_m;  String year;  String valueNew;  String argument;  for (int i=0; i < linearDates.size(); i++) {    Timex3 t_i=(Timex3)linearDates.get(i);    String value_i=t_i.getTimexValue();    cmd_m=cmd_p.matcher(value_i);    valueNew=value_i;    if (cmd_m.matches()) {      year=cmd_m.group(1);      argument=cmd_m.group(4);      valueNew=year.substring(0,Math.min(2,year.length())) + argument.substring(0,1);    }    t_i.removeFromIndexes();    t_i.setTimexValue(valueNew);    t_i.addToIndexes();    linearDates.set(i,t_i);  }}  }
class C{  protected static boolean isConsonant(final char c){  return !isVowel(c);}  }
class C{  public static MethodHandle unboxWiden(Wrapper type){  return unbox(type,2);}  }
class C{  protected Set<String> filterCRSNames(final String[] filter){  crsCodeMap=new HashMap<String,String>();  final Set<String> descriptions=new TreeSet<String>();  for (  final Object object : ReferencingFactoryFinder.getCRSAuthorityFactories(null)) {    final CRSAuthorityFactory factory=(CRSAuthorityFactory)object;    try {      final Set<String> codes=factory.getAuthorityCodes(CoordinateReferenceSystem.class);      for (      final Object codeObj : codes) {        final String code=(String)codeObj;        String description;        try {          description=factory.getDescriptionText(code).toString();        } catch (        final Exception e1) {          description="UNNAMED";        }        description+=" (" + code + ")";        crsCodeMap.put(code,description);        if (matchesFilter(description.toUpperCase(),filter)) {          descriptions.add(description);        }      }    } catch (    final FactoryException e) {      ExceptionMonitor.show(wktText.getShell(),e,"CRS Authority:" + e.getMessage());    }  }  return descriptions;}  }
class C{  protected void deregister(Serializable user,String userId){  userChannels.remove(userId);synchronized (applicationUsers) {    Set<String> userIds=applicationUsers.get(user);    userIds.remove(userId);    if (userIds.isEmpty()) {      applicationUsers.remove(user);    }  }}  }
class C{  public double[] offsetEastingNorthing(double e,double n){  return new double[]{e - easting,n - northing};}  }
class C{  public CTagTreeManager(final Tree<CTag> tagTree,final TagType type,final SQLProvider provider){  m_tagTree=Preconditions.checkNotNull(tagTree,"IE00853: Tag tree argument can't be null");  m_type=Preconditions.checkNotNull(type,"IE00854: Type argument can't be null");  m_provider=Preconditions.checkNotNull(provider,"IE00855: Provider argument can't be null");}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  NodeList elementList;  doc=(Document)load("staffNS",false);  element=doc.getDocumentElement();  elementList=element.getElementsByTagNameNS("http://www.altavista.com","*");  assertSize("elementgetelementsbytagnamens05",1,elementList);}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public BitmapConversion(Map data){  hashData.putAll(data);}  }
class C{  private void remove(MethodPart part,PartMap map) throws Exception {  String name=part.getName();  if (name != null) {    map.remove(name);  }}  }
class C{  private static void buildNode(final DefaultMutableTreeNode node){  for (int i=0; i < node.getChildCount(); i++) {    final DefaultMutableTreeNode child=(DefaultMutableTreeNode)node.getChildAt(i);    createNodeChilds(child);    buildNode(child);  }}  }
class C{  public static long toLong(byte[] bytes,int offset,final int length){  if (length != SIZEOF_LONG || offset + length > bytes.length) {    throw explainWrongLengthOrOffset(bytes,offset,length,SIZEOF_LONG);  }  long l=0;  for (int i=offset; i < offset + length; i++) {    l<<=8;    l^=bytes[i] & 0xFF;  }  return l;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case StextPackage.ROOT__ROOTS:    return ((InternalEList<?>)getRoots()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public final void testIsRevocationEnabled() throws Exception {  Set<TrustAnchor> taSet=TestUtils.getTrustAnchorSet();  if (taSet == null) {    fail(getName() + ": not performed (could not create test TrustAnchor set)");  }  PKIXParameters p=new PKIXParameters(taSet);  assertTrue(p.isRevocationEnabled());  CertificateFactory cf=CertificateFactory.getInstance("X.509");  TestUtils.initCertPathSSCertChain();  Set<TrustAnchor> taSet2=Collections.singleton(new TrustAnchor(TestUtils.rootCertificateSS,null));  p=new PKIXParameters(taSet2);  assertTrue(p.isRevocationEnabled());  p.setRevocationEnabled(false);  assertFalse(p.isRevocationEnabled());}  }
class C{  public boolean isSitting(){  return isSitting;}  }
class C{  protected static VectorApproximation calculatePartialApproximation(DBID id,NumberVector dv,List<DoubleObjPair<DAFile>> daFiles){  int[] approximation=new int[dv.getDimensionality()];  for (int i=0; i < daFiles.size(); i++) {    double val=dv.doubleValue(i);    double[] borders=daFiles.get(i).second.getSplitPositions();    assert borders != null : "borders are null";    int lastBorderIndex=borders.length - 1;    if (val < borders[0]) {      approximation[i]=0;    } else     if (val > borders[lastBorderIndex]) {      approximation[i]=lastBorderIndex - 1;    } else {      for (int s=0; s < lastBorderIndex; s++) {        if (val >= borders[s] && val < borders[s + 1] && approximation[i] != -1) {          approximation[i]=s;        }      }    }  }  return new VectorApproximation(id,approximation);}  }
class C{  public static <T>T showDialog(WindowBasedTextGUI textGUI,String title,String description,int listBoxHeight,T... items){  int width=0;  for (  T item : items) {    width=Math.max(width,TerminalTextUtils.getColumnWidth(item.toString()));  }  width+=2;  return showDialog(textGUI,title,description,new TerminalSize(width,listBoxHeight),items);}  }
class C{  public void testGenerateRPClass(){  assertFalse(RPClass.hasRPClass("text"));  TextEvent.generateRPClass();  assertTrue(RPClass.hasRPClass("text"));}  }
class C{  public void sync(long amount,TimeUnit unit) throws IOException {  try {    latch.await(amount,unit);  } catch (  InterruptedException e) {    Thread.interrupted();    throw IOExceptionSupport.create(e);  }  failOnError();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public void addOtherViewItems(JMenu m,Application app,@Nullable View v){}  }
class C{  public int length(){  return data.limit();}  }
class C{  public void testEARTypeEquality(){  EAR ear1=new EAR("/some/path/to/file.ear");  EAR ear2=new EAR("/otherfile.ear");  assertEquals(ear1.getType(),ear2.getType());}  }
class C{  public void startWrite(){  this.stats.incInt(writesInProgressId,1);}  }
class C{  public SparseSensorMatrix(final int rows,final int columns,final int receptiveFieldWidth,final int receptiveFieldHeight,final Filter defaultFilter){  super(receptiveFieldWidth,receptiveFieldHeight,defaultFilter);  if (rows < 1) {    throw new IllegalArgumentException("rows must be >= 1");  }  if (columns < 1) {    throw new IllegalArgumentException("columns must be >= 1");  }  sensors=new Object[rows][columns];}  }
class C{  public boolean isM(){  return m;}  }
class C{  PageStreamTrunk next(){  canDelete=false;  if (first == 0) {    first=next;  } else   if (first == next) {    return null;  }  if (next == 0 || next >= store.getPageCount()) {    return null;  }  Page p;  current=next;  try {    p=store.getPage(next);  } catch (  DbException e) {    if (e.getErrorCode() == ErrorCode.FILE_CORRUPTED_1) {      return null;    }    throw e;  }  if (p == null || p instanceof PageStreamTrunk || p instanceof PageStreamData) {    canDelete=true;  }  if (!(p instanceof PageStreamTrunk)) {    return null;  }  PageStreamTrunk t=(PageStreamTrunk)p;  if (previous > 0 && t.parent != previous) {    return null;  }  previous=next;  next=t.nextTrunk;  return t;}  }
class C{  @Override public String toString(){  return getClass().getSimpleName() + " alias=" + getAlias()+ " tags="+ getTags();}  }
class C{  @Override public void onViewCreated(View view,Bundle savedInstanceState){  super.onViewCreated(view,savedInstanceState);  ensureList();}  }
class C{  public RowChangeData(){  super();  rowChanges=new ArrayList<OneRowChange>();}  }
class C{  public Jo1xStandaloneLocalConfigurationCapability(){  this.propertySupportMap.put(ServletPropertySet.USERS,Boolean.FALSE);  this.propertySupportMap.put(GeneralPropertySet.PROTOCOL,Boolean.FALSE);  this.propertySupportMap.put(GeneralPropertySet.RMI_PORT,Boolean.TRUE);}  }
class C{  private void checkImportSuccess(){  EndToEndTestUtils.waitTextToDisappear(trackListActivity.getString(R.string.generic_progress_title));  EndToEndTestUtils.SOLO.waitForText(trackListActivity.getString(R.string.import_success).split("%")[0]);  EndToEndTestUtils.getButtonOnScreen(trackListActivity.getString(R.string.generic_ok),true,true);  instrumentation.waitForIdleSync();}  }
class C{  private Combined(){}  }
class C{  public static HeapDump create(){  try {    ClassLoader loader=Thread.currentThread().getContextClassLoader();    Class<?> heapDumpClass=Class.forName("com.caucho.v5.profile.ProHeapDump",false,loader);    _heapDump=(HeapDump)heapDumpClass.newInstance();    return _heapDump;  } catch (  ClassNotFoundException e) {    log.log(Level.FINEST,e.toString(),e);    throw new ConfigException(L.l("HeapDump requires Baratine with JNI"));  }catch (  Exception e) {    throw ConfigException.wrap(e);  }}  }
class C{  private boolean pageScrolled(int xPos){  if (items.size() == 0) {    return false;  }  final int deltaScroll=xPos - lastScroll;  virtualPos=reversePos ? virtualPos + deltaScroll : virtualPos - deltaScroll;  lastScroll=xPos;  final int width=getClientWidth();  final float pageOffset=virtualPos / width;  if (onCardChangeListener != null) {    onCardChangeListener.onCardScrolled(currentItem,pageOffset,(int)virtualPos);  }  onPageScrolled();  return true;}  }
class C{  @Override protected void doPost(SlingHttpServletRequest request,SlingHttpServletResponse response) throws ServletException, IOException {  response.setContentType("application/json");  PrintWriter writer=response.getWriter();  boolean notRobot=recaptchaService.validate(request);  if (notRobot) {    final String submitterName=request.getParameter("name");    final String submitterEmail=request.getParameter("email");    final String submitterMessage=request.getParameter("message");    if (StringUtils.isNotEmpty(submitterName) && StringUtils.isNotEmpty(submitterName) && StringUtils.isNotEmpty(submitterName)) {      final String body=String.format(BODY,submitterName,submitterEmail,submitterMessage);      final boolean result=emailService.sendMail(SUBJECT,body);      if (result) {        response.setStatus(SlingHttpServletResponse.SC_OK);        sendResponse(writer,SlingHttpServletResponse.SC_OK,"Email was sent successfully.");      } else {        response.setStatus(SlingHttpServletResponse.SC_INTERNAL_SERVER_ERROR);        sendResponse(writer,SlingHttpServletResponse.SC_INTERNAL_SERVER_ERROR,"Internal server error.");      }    } else {      response.setStatus(SlingHttpServletResponse.SC_INTERNAL_SERVER_ERROR);      sendResponse(writer,SlingHttpServletResponse.SC_INTERNAL_SERVER_ERROR,"Submission was missing the message, name or email.");    }  } else {    response.setStatus(SlingHttpServletResponse.SC_INTERNAL_SERVER_ERROR);    sendResponse(writer,SlingHttpServletResponse.SC_INTERNAL_SERVER_ERROR,"The reCAPTCHA service determined that you were a robot.");  }}  }
class C{  public MapView(Context context,AttributeSet attrs,int defStyle){  super(context,attrs,defStyle);}  }
class C{  public EchoBreakpointSetSynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  public static void replaceInnerWhiteSpace(@NotNull final String newWhiteSpaceText,@NotNull final ASTNode holder,@NotNull final TextRange whiteSpaceRange){  final CharTable charTable=SharedImplUtil.findCharTableByTree(holder);  StringBuilder newText=createNewLeafChars(holder,whiteSpaceRange,newWhiteSpaceText);  LeafElement newElement=Factory.createSingleLeafElement(holder.getElementType(),newText,charTable,holder.getPsi().getManager());  holder.getTreeParent().replaceChild(holder,newElement);}  }
class C{  private void performLocalPropagation(IR ir,boolean createGCMaps){  if (DEBUG) {    System.out.println(" .... starting local propagation\n");  }  Stack<MapElement> blockStack=null;  if (createGCMaps) {    blockStack=new Stack<MapElement>();  }  for (BasicBlock block=ir.firstBasicBlockInCodeOrder(); block != null; block=block.nextBasicBlockInCodeOrder()) {    if (VERBOSE) {      System.out.print(" ....   processing block # " + block.getNumber() + " ...");    }    LiveSet local=new LiveSet();    LiveSet exceptionBlockSummary=new LiveSet();    for (Enumeration<BasicBlock> bbEnum=block.getOut(); bbEnum.hasMoreElements(); ) {      BasicBlock succ=bbEnum.nextElement();      if (succ.isExceptionHandlerBasicBlock()) {        exceptionBlockSummary.add(bbLiveInfo[succ.getNumber()].getIn());      } else {        local.add(bbLiveInfo[succ.getNumber()].getIn());      }    }    if (VERBOSE) {      System.out.println(" Completed succ walk. exceptionBlockSummary: " + exceptionBlockSummary + "\n local: "+ local);    }    liveIntervals.createEndLiveRange(local,block,null);    for (Instruction inst=block.lastInstruction(); inst != block.firstInstruction(); inst=inst.prevInstructionInCodeOrder()) {      if (VERBOSE) {        System.out.println("Processing: " + inst);      }      if (inst.isPEI()) {        local.add(exceptionBlockSummary);        liveIntervals.createEndLiveRange(exceptionBlockSummary,block,inst);      }      for (Enumeration<Operand> defs=inst.getPureDefs(); defs.hasMoreElements(); ) {        Operand op=defs.nextElement();        if (op instanceof RegisterOperand) {          RegisterOperand regOp=(RegisterOperand)op;          if (isSkippableReg(regOp,ir)) {            continue;          }          if (regOp.getType() != null) {            local.remove(regOp);            if (VERBOSE) {              System.out.println("  Killing: " + regOp + "\n local: "+ local);            }            liveIntervals.setStartLiveRange(regOp.getRegister(),inst,block);          }        }      }      if (createGCMaps && !OsrPoint.conforms(inst) && inst.isGCPoint()) {        List<RegSpillListElement> regList=map.createDU(local);        blockStack.push(new MapElement(inst,regList));        if (VERBOSE) {          System.out.println("SAVING GC Map");        }      }      for (Enumeration<Operand> uses=inst.getUses(); uses.hasMoreElements(); ) {        Operand op=uses.nextElement();        if (op instanceof RegisterOperand) {          RegisterOperand regOp=(RegisterOperand)op;          if (isSkippableReg(regOp,ir)) {            continue;          }          TypeReference regType=regOp.getType();          if (regType != null) {            local.add(regOp);            if (VERBOSE) {              System.out.println("  Gen-ing: " + regOp);              System.out.println("local: " + local);            }            liveIntervals.createEndLiveRange(regOp.getRegister(),block,inst);          }        }      }      if (createGCMaps && OsrPoint.conforms(inst)) {        List<RegSpillListElement> regList=map.createDU(local);        blockStack.push(new MapElement(inst,regList));        collectOsrInfo(inst,local);      }    }    liveIntervals.moveUpwardExposedRegsToFront(block);    if (createGCMaps) {      while (!blockStack.isEmpty()) {        MapElement elem=blockStack.pop();        map.insert(elem.getInst(),elem.getList());      }    }    if (storeLiveAtHandlers && block.isExceptionHandlerBasicBlock()) {      ExceptionHandlerBasicBlock handlerBlock=(ExceptionHandlerBasicBlock)block;      handlerBlock.setLiveSet(local);      local=null;    } else {      local.clear();    }  }  if (DEBUG) {    System.out.println(" .... completed local propagation\n");  }}  }
class C{  public void shl(int size,Register dst,Register src,long shiftAmt){  int shift=clampShiftAmt(size,shiftAmt);  super.ubfm(size,dst,src,(size - shift) & (size - 1),size - 1 - shift);}  }
class C{  public int transformToGlobalRTF(ElemTemplateElement templateParent) throws TransformerException {  DTM dtmFrag=m_xcontext.getGlobalRTFDTM();  return transformToRTF(templateParent,dtmFrag);}  }
class C{  public Measurement convert(Reading r,Point3d guess){  this.Xt=guess.x;  this.Yt=guess.y;  this.Zt=guess.z;  return convert(r);}  }
class C{  public static long parseDate(String dateString){  return HttpDateTime.parse(dateString);}  }
class C{  public static String dump(Map<?,?> map){  StringBuilder stringBuilder=new StringBuilder();  for (  Map.Entry<?,?> entry : map.entrySet()) {    stringBuilder.append(entry.getKey());    stringBuilder.append(" : ");    stringBuilder.append(entry.getValue());  }  return stringBuilder.toString();}  }
class C{  public void add(final int articleID,final int revisionCounter,final long timestamp){  if (this.articleID != articleID) {    if (list != null) {      addToBuffer();    }    this.articleID=articleID;    this.list=new ArrayList<ChronoIndexData>();  }  this.list.add(new ChronoIndexData(timestamp,revisionCounter));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static int dialDownDamage(Mounted weapon,WeaponType wtype){  return Compute.dialDownDamage(weapon,wtype,1);}  }
class C{  public static <T>T checkNotNull(final T reference,final Object errorMessage){  if (reference == null) {    throw new NullPointerException(String.valueOf(errorMessage));  }  return reference;}  }
class C{  public double classifyInstance(Instance inst) throws Exception {  double result=0;  for (int i=0; i < m_coefficients.length; i++) {    if (i != inst.classIndex() && !inst.isMissing(i)) {      result+=m_coefficients[i] * inst.value(i);    }  }  result+=m_intercept;  return result;}  }
class C{  public Xml(Document document){  super(document);}  }
class C{  private void putTime(Date d,byte tag) throws IOException {  TimeZone tz=TimeZone.getTimeZone("GMT");  String pattern=null;  if (tag == DerValue.tag_UtcTime) {    pattern="yyMMddHHmmss'Z'";  } else {    tag=DerValue.tag_GeneralizedTime;    pattern="yyyyMMddHHmmss'Z'";  }  SimpleDateFormat sdf=new SimpleDateFormat(pattern,Locale.US);  sdf.setTimeZone(tz);  byte[] time=(sdf.format(d)).getBytes("ISO-8859-1");  write(tag);  putLength(time.length);  write(time);}  }
class C{  public void updateModelMatrix(float[] translation,float[] quaternion){  float[] tempMultMatrix=new float[16];  Matrix.setIdentityM(tempMultMatrix,0);  Matrix.multiplyMM(tempMultMatrix,0,mColorCamera2IMUMatrix,0,mOpengl2ColorCameraMatrix,0);  float[] tempInvertMatrix=new float[16];  Matrix.setIdentityM(tempInvertMatrix,0);  Matrix.invertM(tempInvertMatrix,0,mDevice2IMUMatrix,0);  float[] tempMultMatrix2=new float[16];  Matrix.setIdentityM(tempMultMatrix2,0);  Matrix.multiplyMM(tempMultMatrix2,0,tempInvertMatrix,0,tempMultMatrix,0);  float[] quaternionMatrix=new float[16];  Matrix.setIdentityM(quaternionMatrix,0);  quaternionMatrix=quaternionMatrixOpenGL(quaternion);  float[] tempMultMatrix3=new float[16];  Matrix.setIdentityM(tempMultMatrix3,0);  Matrix.setIdentityM(mModelMatrix,0);  Matrix.multiplyMM(tempMultMatrix3,0,quaternionMatrix,0,tempMultMatrix2,0);  Matrix.multiplyMM(mModelMatrix,0,mConversionMatrix,0,tempMultMatrix3,0);  mModelMatrix[12]+=translation[0];  mModelMatrix[13]+=translation[2];  mModelMatrix[14]+=-1f * translation[1];}  }
class C{  protected synchronized void firePanEvent(float az){  panDelegate.firePan(az);}  }
class C{  private static void encode(int tag,int length,StringBuilder buffer){  if (tag == PATTERN_ISO_ZONE && length >= 4) {    throw new IllegalArgumentException("invalid ISO 8601 format: length=" + length);  }  if (length < 255) {    buffer.append((char)(tag << 8 | length));  } else {    buffer.append((char)((tag << 8) | 0xff));    buffer.append((char)(length >>> 16));    buffer.append((char)(length & 0xffff));  }}  }
class C{  public long nextLong(long n){  if (n <= 0)   throw new IllegalArgumentException("n must be positive");  long offset=0;  while (n >= Integer.MAX_VALUE) {    int bits=next(2);    long half=n >>> 1;    long nextn=((bits & 2) == 0) ? half : n - half;    if ((bits & 1) == 0)     offset+=n - nextn;    n=nextn;  }  return offset + nextInt((int)n);}  }
class C{  private void checkSortMissingLast(final String field,final String low,final String high){  assertU(adoc("id","0"));  assertU(adoc("id","1",field,low));  assertU(adoc("id","2",field,high));  assertU(commit());  assertQ(req("q","*:*","sort",field + " asc"),"//result/doc[1]/str[@name='id'][.=1]","//result/doc[2]/str[@name='id'][.=2]","//result/doc[3]/str[@name='id'][.=0]");  assertQ(req("q","*:*","sort",field + " desc"),"//result/doc[1]/str[@name='id'][.=2]","//result/doc[2]/str[@name='id'][.=1]","//result/doc[3]/str[@name='id'][.=0]");}  }
class C{  void addMember(Key key,boolean hasPathToCenter){  cache.put(key,hasPathToCenter);}  }
class C{  public long available() throws IOException {  if (inputStream == null) {    throw new IOException("Stream closed");  }  return inputStream.available();}  }
class C{  public AWTEvent peekEvent(){  pushPopLock.lock();  try {    for (int i=NUM_PRIORITIES - 1; i >= 0; i--) {      if (queues[i].head != null) {        return queues[i].head.event;      }    }  }  finally {    pushPopLock.unlock();  }  return null;}  }
class C{  static public int blendColor(int c1,int c2,int mode){switch (mode) {case REPLACE:    return c2;case BLEND:  return blend_blend(c1,c2);case ADD:return blend_add_pin(c1,c2);case SUBTRACT:return blend_sub_pin(c1,c2);case LIGHTEST:return blend_lightest(c1,c2);case DARKEST:return blend_darkest(c1,c2);case DIFFERENCE:return blend_difference(c1,c2);case EXCLUSION:return blend_exclusion(c1,c2);case MULTIPLY:return blend_multiply(c1,c2);case SCREEN:return blend_screen(c1,c2);case HARD_LIGHT:return blend_hard_light(c1,c2);case SOFT_LIGHT:return blend_soft_light(c1,c2);case OVERLAY:return blend_overlay(c1,c2);case DODGE:return blend_dodge(c1,c2);case BURN:return blend_burn(c1,c2);}return 0;}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj)   return true;  if (obj == null)   return false;  if (getClass() != obj.getClass())   return false;  NdefMessage other=(NdefMessage)obj;  return Arrays.equals(mRecords,other.mRecords);}  }
class C{  private static Options createCommandLineOptions(){  Options options=new Options();  OptionBuilder.withLongOpt("keyword-properties");  OptionBuilder.withDescription("Location of the keyword-optimizer.properties file.");  OptionBuilder.hasArg(true);  OptionBuilder.withArgName("file");  OptionBuilder.isRequired();  options.addOption(OptionBuilder.create("kp"));  OptionBuilder.withLongOpt("ads-properties");  OptionBuilder.withDescription("Location of the ads.properties file.");  OptionBuilder.hasArg(true);  OptionBuilder.withArgName("file");  OptionBuilder.isRequired();  options.addOption(OptionBuilder.create("ap"));  OptionBuilder.withLongOpt("seed-keywords");  OptionBuilder.withDescription("Use the given keywords (separated by spaces) as a seed for the optimization." + "\nNote: Only one seed-* option is allowed.");  OptionBuilder.hasArg(true);  OptionBuilder.hasArgs(Option.UNLIMITED_VALUES);  OptionBuilder.withArgName("keywords");  options.addOption(OptionBuilder.create("sk"));  OptionBuilder.withLongOpt("seed-keywords-file");  OptionBuilder.withDescription("Use the keywords from the given file (one keyword per row) as a seed for the optimization." + "\nNote: Only one seed-* option is allowed.");  OptionBuilder.hasArg(true);  OptionBuilder.withArgName("file");  options.addOption(OptionBuilder.create("skf"));  OptionBuilder.withLongOpt("seed-terms");  OptionBuilder.withDescription("Use the given search terms (separated by spaces) as a seed for the optimization." + "\nNote: Only one seed-* option is allowed.");  OptionBuilder.hasArg(true);  OptionBuilder.hasArgs(Option.UNLIMITED_VALUES);  OptionBuilder.withArgName("terms");  options.addOption(OptionBuilder.create("st"));  OptionBuilder.withLongOpt("seed-terms-file");  OptionBuilder.withDescription("Use the search terms from the given file (one keyword per row) as a seed " + "for the optimization.\nNote: Only one seed-* option is allowed.");  OptionBuilder.hasArg(true);  OptionBuilder.withArgName("file");  options.addOption(OptionBuilder.create("stf"));  OptionBuilder.withLongOpt("seed-urls");  OptionBuilder.withDescription("Use the given urls (separated by spaces) to extract keywords as a seed for " + "the optimization.\nNote: Only one seed-* option is allowed.");  OptionBuilder.hasArg(true);  OptionBuilder.hasArgs(Option.UNLIMITED_VALUES);  OptionBuilder.withArgName("urls");  options.addOption(OptionBuilder.create("su"));  OptionBuilder.withLongOpt("seed-urls-file");  OptionBuilder.withDescription("Use the urls from the given file (one url per row) to extract keywords as a seed " + "for the optimization.\nNote: Only one seed-* option is allowed.");  OptionBuilder.hasArg(true);  OptionBuilder.withArgName("file");  options.addOption(OptionBuilder.create("suf"));  OptionBuilder.withLongOpt("seed-category");  OptionBuilder.withDescription("Use the given category (ID as defined @ https://goo.gl/xUEr6s) to get keywords as a seed " + "for the optimization.\nNote: Only one seed-* option is allowed.");  OptionBuilder.hasArg(true);  OptionBuilder.withArgName("id");  options.addOption(OptionBuilder.create("sc"));  OptionBuilder.withLongOpt("match-types");  OptionBuilder.withDescription("Use the given keyword match types (EXACT, BROAD, PHRASE).");  OptionBuilder.hasArg(true);  OptionBuilder.hasArgs(3);  OptionBuilder.withArgName("types");  OptionBuilder.isRequired();  options.addOption(OptionBuilder.create("m"));  OptionBuilder.withLongOpt("max-cpc");  OptionBuilder.withDescription("Use the given maximum CPC (in USD, e.g., 5.0 for $5).");  OptionBuilder.hasArg(true);  OptionBuilder.withArgName("double");  OptionBuilder.isRequired();  options.addOption(OptionBuilder.create("cpc"));  OptionBuilder.withLongOpt("locations");  OptionBuilder.withDescription("Use the given locations IDs (ID as defined @ https://goo.gl/TA5E81) for " + "geo-targeted results.");  OptionBuilder.hasArg(true);  OptionBuilder.hasArgs(Option.UNLIMITED_VALUES);  OptionBuilder.withArgName("ids");  options.addOption(OptionBuilder.create("loc"));  OptionBuilder.withLongOpt("languages");  OptionBuilder.withDescription("Use the given locations IDs (ID as defined @ https://goo.gl/WWzifs) for " + "language-targeted results.");  OptionBuilder.hasArg(true);  OptionBuilder.hasArgs(Option.UNLIMITED_VALUES);  OptionBuilder.withArgName("ids");  options.addOption(OptionBuilder.create("lang"));  OptionBuilder.withLongOpt("output");  OptionBuilder.withDescription("Mode for outputting results (CONSOLE / CSV)\nNote: If set to CSV, then " + "option -of also has to be specified.");  OptionBuilder.hasArg(true);  OptionBuilder.hasArgs(2);  OptionBuilder.withArgName("mode");  OptionBuilder.isRequired();  options.addOption(OptionBuilder.create("o"));  OptionBuilder.withLongOpt("output-file");  OptionBuilder.withDescription("File to for writing output data (only needed if option -o is specified).");  OptionBuilder.hasArg(true);  OptionBuilder.withArgName("file");  options.addOption(OptionBuilder.create("of"));  return options;}  }
class C{  public boolean isNatural(){  String pt=getPAPeriodType();  if (pt == null)   return false;  return PAPERIODTYPE_Natural.equals(pt);}  }
class C{  public static void serializeGroupDescReply(List<OFGroupDescStatsReply> groupDescReplies,JsonGenerator jGen) throws IOException, JsonProcessingException {  OFGroupDescStatsReply groupDescReply=groupDescReplies.get(0);  jGen.writeStringField("version",groupDescReply.getVersion().toString());  jGen.writeFieldName("groupDesc");  jGen.writeStartArray();  for (  OFGroupDescStatsEntry entry : groupDescReply.getEntries()) {    jGen.writeStartObject();    jGen.writeStringField("groupType",entry.getGroupType().toString());    jGen.writeStringField("groupNumber",entry.getGroup().toString());    jGen.writeFieldName("buckets");    jGen.writeStartArray();    for (    OFBucket buckets : entry.getBuckets()) {      jGen.writeStartObject();      jGen.writeNumberField("weight",buckets.getWeight());      jGen.writeNumberField("watchPortNumber",buckets.getWatchPort().getPortNumber());      jGen.writeStringField("watchGroup",buckets.getWatchGroup().toString());      OFActionListSerializer.serializeActions(jGen,buckets.getActions());      jGen.writeEndObject();    }    jGen.writeEndArray();    jGen.writeEndObject();  }  jGen.writeEndArray();}  }
class C{  private ResultPoint correctTopRightRectangular(ResultPoint bottomLeft,ResultPoint bottomRight,ResultPoint topLeft,ResultPoint topRight,int dimensionTop,int dimensionRight){  float corr=distance(bottomLeft,bottomRight) / (float)dimensionTop;  int norm=distance(topLeft,topRight);  float cos=(topRight.getX() - topLeft.getX()) / norm;  float sin=(topRight.getY() - topLeft.getY()) / norm;  ResultPoint c1=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);  corr=distance(bottomLeft,topLeft) / (float)dimensionRight;  norm=distance(bottomRight,topRight);  cos=(topRight.getX() - bottomRight.getX()) / norm;  sin=(topRight.getY() - bottomRight.getY()) / norm;  ResultPoint c2=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);  if (!isValid(c1)) {    if (isValid(c2)) {      return c2;    }    return null;  }  if (!isValid(c2)) {    return c1;  }  int l1=Math.abs(dimensionTop - transitionsBetween(topLeft,c1).getTransitions()) + Math.abs(dimensionRight - transitionsBetween(bottomRight,c1).getTransitions());  int l2=Math.abs(dimensionTop - transitionsBetween(topLeft,c2).getTransitions()) + Math.abs(dimensionRight - transitionsBetween(bottomRight,c2).getTransitions());  if (l1 <= l2) {    return c1;  }  return c2;}  }
class C{  public PartialConverter removePartialConverter(PartialConverter converter) throws SecurityException {  checkAlterPartialConverters();  if (converter == null) {    return null;  }  PartialConverter[] removed=new PartialConverter[1];  iPartialConverters=iPartialConverters.remove(converter,removed);  return removed[0];}  }
class C{  public boolean hasPort(){  return port >= 0;}  }
class C{  public GroupImpl() throws UnknownHostException {}  }
class C{  public static void pauseRecording(){  View pauseButton=SOLO.getCurrentActivity().findViewById(R.id.track_controller_record);  if (pauseButton != null && pauseButton.isShown()) {    SOLO.clickOnView(pauseButton);  }  instrumentation.waitForIdleSync();}  }
class C{  public IntrinsicMethod(String name,String className,String methodName){  this(name,className,methodName,new Class<?>[]{});}  }
class C{  public void updatePackage(Context context,String packageName,UserHandleCompat user){  final LauncherAppsCompat launcherApps=LauncherAppsCompat.getInstance(context);  final List<LauncherActivityInfoCompat> matches=launcherApps.getActivityList(packageName,user);  if (matches.size() > 0) {    for (int i=data.size() - 1; i >= 0; i--) {      final AppInfo applicationInfo=data.get(i);      final ComponentName component=applicationInfo.intent.getComponent();      if (user.equals(applicationInfo.user) && packageName.equals(component.getPackageName())) {        if (!findActivity(matches,component)) {          removed.add(applicationInfo);          data.remove(i);        }      }    }    for (    final LauncherActivityInfoCompat info : matches) {      AppInfo applicationInfo=findApplicationInfoLocked(info.getComponentName().getPackageName(),user,info.getComponentName().getClassName());      if (applicationInfo == null) {        add(new AppInfo(context,info,user,mIconCache));      } else {        mIconCache.getTitleAndIcon(applicationInfo,info,true);        modified.add(applicationInfo);      }    }  } else {    for (int i=data.size() - 1; i >= 0; i--) {      final AppInfo applicationInfo=data.get(i);      final ComponentName component=applicationInfo.intent.getComponent();      if (user.equals(applicationInfo.user) && packageName.equals(component.getPackageName())) {        removed.add(applicationInfo);        mIconCache.remove(component,user);        data.remove(i);      }    }  }}  }
class C{  public boolean isMemReadsKill(){  return (flags & MEM_READS_KILL) != 0;}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public WorkspaceSerializer(final Workspace workspace){  this.workspace=workspace;  this.desktop=SimbrainDesktop.getDesktop(workspace);}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) static void moveCheckingTypesAtRunTime(@NotNull final PyClass from,@NotNull final MembersManager<?> manager,@NotNull final Collection<PyMemberInfo<PyElement>> memberInfoCollection,@NotNull final PyClass... to){  manager.checkElementTypes((Collection)MembersManager.fetchElements(memberInfoCollection));  new TypeSafeMovingStrategy(from,manager,memberInfoCollection,to).moveTyped();}  }
class C{  public final SecretKey generateSecret(String algorithm) throws IllegalStateException, NoSuchAlgorithmException, InvalidKeyException {  return spiImpl.engineGenerateSecret(algorithm);}  }
class C{  private boolean hasNonPrimitiveFeatures(FeatureStructure aFS){  for (  Feature f : aFS.getType().getFeatures()) {    if (CAS.FEATURE_BASE_NAME_SOFA.equals(f.getShortName())) {      continue;    }    if (!f.getRange().isPrimitive()) {      return true;    }  }  return false;}  }
class C{  public Set<Group> findGroupsByName(String tenantName,SearchCriteria criteria,int limit) throws Exception {  return getService().findGroupsByName(tenantName,criteria,limit,this.getServiceContext());}  }
class C{  private void registerPermissions(){  for (int i=0; i < MULTIPLE_ACHIEVEMENTS.length; i++)   for (  String section : config.getConfigurationSection(MULTIPLE_ACHIEVEMENTS[i]).getKeys(false)) {    if (this.getServer().getPluginManager().getPermission("achievement.count." + MULTIPLE_ACHIEVEMENTS[i].toLowerCase() + "."+ section) == null)     this.getServer().getPluginManager().addPermission(new Permission("achievement.count." + MULTIPLE_ACHIEVEMENTS[i].toLowerCase() + "."+ section,PermissionDefault.TRUE));  }}  }
class C{  void createCreature(int x,int y,Creature c){  if (!isEmpty(x,y)) {    Occupant oldOccupant=getOccupant(x,y);    throw new IllegalArgumentException(String.format("Tried to place a %s at (%d, %d), but " + " space is already occupied by a %s.",c.name,x,y,oldOccupant));  }  population+=1;  placeOccupant(x,y,c);  getInLine(x,y);}  }
class C{  public static boolean isExceptionTime(Calendar scheduleTime,ScheduleInfo scheduleInfo) throws Exception {  if (scheduleInfo.getDateExceptions() != null) {    for (    String dateException : scheduleInfo.getDateExceptions()) {      DateFormat formatter=new SimpleDateFormat(ScheduleInfo.FULL_DAYTIME_FORMAT);      Date date=formatter.parse(scheduleInfo.getStartDate());      Calendar exceptionTime=Calendar.getInstance(TimeZone.getTimeZone("UTC"));      exceptionTime.setTime(date);      if (exceptionTime.equals(scheduleTime)) {        log.info("The scheduled time {} is in exception list",scheduleTime.toString());        return true;      }    }  }  return false;}  }
class C{  protected void fixPoint(MutableCoord P,double m,double b){  if (m == Double.POSITIVE_INFINITY) {    if (P.getY() < 0)     P.setY(0.0); else     P.setY(getHeight());  } else   if (P.getX() < 0.0) {    P.setX(0.0);    P.setY(b);  } else   if (P.getY() < 0.0) {    P.setY(0.0);    P.setX(-b / m);  } else   if (P.getX() > getWidth()) {    P.setX(getWidth());    P.setY(m * getWidth() + b);  } else {    P.setY(getHeight());    P.setX((getHeight() - b) / m);  }}  }
class C{  public boolean isEmpty(){  return first == null;}  }
class C{  public void decrement(){  value--;}  }
class C{  public WrappedPlainView(Element elem){  this(elem,false);}  }
class C{  public static double cdf(double z,double[] x,int[] indices){  int i;  for (i=0; i < x.length; i++) {    if (x[indices[i]] > z)     break;  }  return (double)i / (double)x.length;}  }
class C{  public Builder withLeader(int leader){  request.leader=leader;  return this;}  }
class C{  public XYTextAnnotation(String text,double x,double y){  super();  ParamChecks.nullNotPermitted(text,"text");  this.text=text;  this.font=DEFAULT_FONT;  this.paint=DEFAULT_PAINT;  this.x=x;  this.y=y;  this.textAnchor=DEFAULT_TEXT_ANCHOR;  this.rotationAnchor=DEFAULT_ROTATION_ANCHOR;  this.rotationAngle=DEFAULT_ROTATION_ANGLE;  this.backgroundPaint=null;  this.outlineVisible=false;  this.outlinePaint=Color.black;  this.outlineStroke=new BasicStroke(0.5f);}  }
class C{  @Override protected EClass eStaticClass(){  return SexecPackage.Literals.HISTORY_ENTRY;}  }
class C{  public Delegate parseDelegate(final String delegateName,final Buffer buffer) throws ValidationException {  final String configString;  try {    configString=StringUtils.replaceWildcardConfigs(buffer.toString("UTF-8"),properties);  } catch (  Exception e) {    throw new ValidationException(e);  }  ValidationResult validationResult=Validator.validateStatic(Buffer.buffer(configString),delegatesSchema,LOG);  if (!validationResult.isSuccess()) {    throw new ValidationException(validationResult);  }  return createDelegate(delegateName,configString);}  }
class C{  void log(int op,String fileName,byte[] data,long x){  if (recorder != null) {    recorder.log(op,fileName,data,x);  }}  }
class C{  private Object opt(int index){  if (index < 0 || index >= this.size()) {    return null;  }  return myArrayList.get(index);}  }
class C{  private static void print(Appendable out,Timestamp adjusted) throws IOException {  if (adjusted == null) {    out.append("null.timestamp");    return;  }  print_digits(out,adjusted._year,4);  if (adjusted._precision == Precision.YEAR) {    assert adjusted._offset == UNKNOWN_OFFSET;    out.append("T");    return;  }  out.append("-");  print_digits(out,adjusted._month,2);  if (adjusted._precision == Precision.MONTH) {    assert adjusted._offset == UNKNOWN_OFFSET;    out.append("T");    return;  }  out.append("-");  print_digits(out,adjusted._day,2);  if (adjusted._precision == Precision.DAY) {    assert adjusted._offset == UNKNOWN_OFFSET;    return;  }  out.append("T");  print_digits(out,adjusted._hour,2);  out.append(":");  print_digits(out,adjusted._minute,2);  if (adjusted._precision == Precision.SECOND) {    out.append(":");    print_digits(out,adjusted._second,2);    if (adjusted._fraction != null) {      print_fractional_digits(out,adjusted._fraction);    }  }  if (adjusted._offset != UNKNOWN_OFFSET) {    int min, hour;    min=adjusted._offset;    if (min == 0) {      out.append('Z');    } else {      if (min < 0) {        min=-min;        out.append('-');      } else {        out.append('+');      }      hour=min / 60;      min=min - hour * 60;      print_digits(out,hour,2);      out.append(":");      print_digits(out,min,2);    }  } else {    out.append("-00:00");  }}  }
class C{  public int addMovingPoint(int x,int y){  int position=addPoint(x,y);  setMovingPoint((GrabPoint)polyGrabPoints.get(position));  return position;}  }
class C{  public IsActiveException(String message){  super(message);}  }
class C{  public void testBlockAndLineComment() throws IOException {  final InputStream stream=this.getStream(R.raw.block_with_line_comment);  List<String> commands=SqlParser.parse(stream);  assertEquals(1,commands.size());  assertEquals(sql1,commands.get(0));}  }
class C{  @Override protected void sendFunctionGroup1(){  log.debug("sendFunctionGroup1(): f0 {} f1 {} f2 {} f3 {} f4{}",f0,f1,f2,f3,f4);  DCCppMessage msg=DCCppMessage.makeFunctionGroup1OpsMsg(this.getDccAddress(),f0,f1,f2,f3,f4);  log.debug("sendFunctionGroup1(): Message: {}",msg.toString());  queueMessage(msg,THROTTLEIDLE);}  }
class C{  private void updateNeighborViewsForID(long itemID){  int position=getPositionForID(itemID);  final ListAdapter adapter=getAdapter();  mAboveItemId=adapter.getItemId(position - 1);  mBelowItemId=adapter.getItemId(position + 1);}  }
class C{  public static boolean deleteFileSafely(Path file){  file=file.toAbsolutePath();  if (Files.isDirectory(file)) {    LOGGER.warn("Will not delete file '" + file + "': file is a directory!");    return false;  }  try {    Files.deleteIfExists(file);  } catch (  Exception e) {    LOGGER.warn("Could not delete file: " + e.getMessage());    return false;  }  return true;}  }
class C{  public static List<WebElement> findElementsVisibleAfter(SearchContext parent,By by,int waitInSeconds){  Preconditions.checkNotNull(parent);  Preconditions.checkNotNull(by);  findElementVisibleAfter(parent,by,waitInSeconds);  return parent.findElements(by).stream().filter(null).collect(Collectors.toList());}  }
class C{  public static boolean isCheckedException(Throwable ex){  return !(ex instanceof RuntimeException || ex instanceof Error);}  }
class C{  protected GlyfCompound(){}  }
class C{  public void packetReceived(PacketReceivedEvent e){}  }
class C{  public static void main(String args[]){  int j;  MersenneTwisterFast r;  r=new MersenneTwisterFast(new int[]{0x123,0x234,0x345,0x456});  System.out.println("Output of MersenneTwisterFast with new (2002/1/26) seeding mechanism");  for (j=0; j < 1000; j++) {    long l=(long)r.nextInt();    if (l < 0)     l+=4294967296L;    String s=String.valueOf(l);    while (s.length() < 10)     s=" " + s;    System.out.print(s + " ");    if (j % 5 == 4)     System.out.println();  }  final long SEED=4357;  int xx;  long ms;  System.out.println("\nTime to test grabbing 100000000 ints");  Random rr=new Random(SEED);  xx=0;  ms=System.currentTimeMillis();  for (j=0; j < 100000000; j++)   xx+=rr.nextInt();  System.out.println("java.util.Random: " + (System.currentTimeMillis() - ms) + "          Ignore this: "+ xx);  r=new MersenneTwisterFast(SEED);  ms=System.currentTimeMillis();  xx=0;  for (j=0; j < 100000000; j++)   xx+=r.nextInt();  System.out.println("Mersenne Twister Fast: " + (System.currentTimeMillis() - ms) + "          Ignore this: "+ xx);  System.out.println("\nGrab the first 1000 booleans");  r=new MersenneTwisterFast(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextBoolean() + " ");    if (j % 8 == 7)     System.out.println();  }  if (!(j % 8 == 7))   System.out.println();  System.out.println("\nGrab 1000 booleans of increasing probability using nextBoolean(double)");  r=new MersenneTwisterFast(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextBoolean((double)(j / 999.0)) + " ");    if (j % 8 == 7)     System.out.println();  }  if (!(j % 8 == 7))   System.out.println();  System.out.println("\nGrab 1000 booleans of increasing probability using nextBoolean(float)");  r=new MersenneTwisterFast(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextBoolean((float)(j / 999.0f)) + " ");    if (j % 8 == 7)     System.out.println();  }  if (!(j % 8 == 7))   System.out.println();  byte[] bytes=new byte[1000];  System.out.println("\nGrab the first 1000 bytes using nextBytes");  r=new MersenneTwisterFast(SEED);  r.nextBytes(bytes);  for (j=0; j < 1000; j++) {    System.out.print(bytes[j] + " ");    if (j % 16 == 15)     System.out.println();  }  if (!(j % 16 == 15))   System.out.println();  byte b;  System.out.println("\nGrab the first 1000 bytes -- must be same as nextBytes");  r=new MersenneTwisterFast(SEED);  for (j=0; j < 1000; j++) {    System.out.print((b=r.nextByte()) + " ");    if (b != bytes[j])     System.out.print("BAD ");    if (j % 16 == 15)     System.out.println();  }  if (!(j % 16 == 15))   System.out.println();  System.out.println("\nGrab the first 1000 shorts");  r=new MersenneTwisterFast(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextShort() + " ");    if (j % 8 == 7)     System.out.println();  }  if (!(j % 8 == 7))   System.out.println();  System.out.println("\nGrab the first 1000 ints");  r=new MersenneTwisterFast(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextInt() + " ");    if (j % 4 == 3)     System.out.println();  }  if (!(j % 4 == 3))   System.out.println();  System.out.println("\nGrab the first 1000 ints of different sizes");  r=new MersenneTwisterFast(SEED);  int max=1;  for (j=0; j < 1000; j++) {    System.out.print(r.nextInt(max) + " ");    max*=2;    if (max <= 0)     max=1;    if (j % 4 == 3)     System.out.println();  }  if (!(j % 4 == 3))   System.out.println();  System.out.println("\nGrab the first 1000 longs");  r=new MersenneTwisterFast(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextLong() + " ");    if (j % 3 == 2)     System.out.println();  }  if (!(j % 3 == 2))   System.out.println();  System.out.println("\nGrab the first 1000 longs of different sizes");  r=new MersenneTwisterFast(SEED);  long max2=1;  for (j=0; j < 1000; j++) {    System.out.print(r.nextLong(max2) + " ");    max2*=2;    if (max2 <= 0)     max2=1;    if (j % 4 == 3)     System.out.println();  }  if (!(j % 4 == 3))   System.out.println();  System.out.println("\nGrab the first 1000 floats");  r=new MersenneTwisterFast(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextFloat() + " ");    if (j % 4 == 3)     System.out.println();  }  if (!(j % 4 == 3))   System.out.println();  System.out.println("\nGrab the first 1000 doubles");  r=new MersenneTwisterFast(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextDouble() + " ");    if (j % 3 == 2)     System.out.println();  }  if (!(j % 3 == 2))   System.out.println();  System.out.println("\nGrab the first 1000 gaussian doubles");  r=new MersenneTwisterFast(SEED);  for (j=0; j < 1000; j++) {    System.out.print(r.nextGaussian() + " ");    if (j % 3 == 2)     System.out.println();  }  if (!(j % 3 == 2))   System.out.println();}  }
class C{  protected void select(ImageTile[] selectedTiles2){  setSelection(selectedTiles2,true);}  }
class C{  public BulkRequest add(byte[] data,int from,int length,@Nullable String defaultIndex,@Nullable String defaultType) throws Exception {  return add(new BytesArray(data,from,length),defaultIndex,defaultType);}  }
class C{  public static String string(int i){  return opcodes.getText(i);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.MULTIPLICITY___BOUND_1:    setBound_1((String)newValue);  return;case UmplePackage.MULTIPLICITY___LOWER_BOUND_1:setLowerBound_1((String)newValue);return;case UmplePackage.MULTIPLICITY___UPPER_BOUND_1:setUpperBound_1((String)newValue);return;case UmplePackage.MULTIPLICITY___BOUND_INT:setBound_int((Integer)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static void convertActivityToTranslucentBeforeL(Activity activity){  try {    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method method=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz);    method.setAccessible(true);    method.invoke(activity,new Object[]{null});  } catch (  Throwable t) {  }}  }
class C{  @Override public int length(){  return 1;}  }
class C{  public ExtensionNamespacesManager(){  setPredefinedNamespaces();}  }
class C{  public final int numDistinctValues(int attIndex){  if (attribute(attIndex).isNumeric()) {    double[] attVals=attributeToDoubleArray(attIndex);    int[] sorted=Utils.sort(attVals);    double prev=0;    int counter=0;    for (int i=0; i < sorted.length; i++) {      Instance current=instance(sorted[i]);      if (current.isMissing(attIndex)) {        break;      }      if ((i == 0) || Utils.gr(current.value(attIndex),prev)) {        prev=current.value(attIndex);        counter++;      }    }    return counter;  } else {    return attribute(attIndex).numValues();  }}  }
class C{  public void go(OutputStream out) throws TransformerException {  createXCardDocument().write(out,outputProperties);}  }
class C{  public UrlResource(String protocol,String location) throws MalformedURLException {  this(protocol,location,null);}  }
class C{  public CSVShapeInfoFile(URL url) throws MalformedURLException {  super(url);}  }
class C{  public boolean hasNext(){  return (nodes.size() > 0);}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return true;}  }
class C{  static public Directory createDirectory(TorConfig config,DirectoryStore customDirectoryStore){  return new DirectoryImpl(config,customDirectoryStore);}  }
class C{  public boolean hasServer(@NonNull Jedis jedis,@NonNull UUID playerUuid) throws ProcessingException {  try {    return jedis.hexists(RedisKeys.WORLD_REPO.toString(),playerUuid.toString());  } catch (  Exception ex) {    throw new ProcessingException("There was an error checking if \"" + playerUuid + "\" has an owner!",ex);  }}  }
class C{  public static int max(){  int result=1;  for (int i=0; i < NUM_BITS; i++)   result*=2;  return result;}  }
class C{  private void basicProcess(final DM dm){  boolean replied=false;  try {    DLockService svc=DLockService.getInternalServiceNamed(this.serviceName);    if (svc != null && svc.isCurrentlyOrIsMakingLockGrantor()) {      DLockGrantor grantor=DLockGrantor.waitForGrantor(svc);      if (grantor != null) {        grantor.handleDepartureOf(getSender());        if (!grantor.isDestroyed()) {          reply(NonGrantorDestroyedReplyMessage.OK,dm);          replied=true;        }      }    }  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();    if (logger.isTraceEnabled(LogMarker.DLS)) {      logger.trace(LogMarker.DLS,"Processing of NonGrantorDestroyedMessage resulted in InterruptedException",e);    }  }catch (  LockServiceDestroyedException e) {    if (logger.isTraceEnabled(LogMarker.DLS)) {      logger.trace(LogMarker.DLS,"Processing of NonGrantorDestroyedMessage resulted in LockServiceDestroyedException",e);    }  }catch (  LockGrantorDestroyedException e) {    if (logger.isTraceEnabled(LogMarker.DLS)) {      logger.trace(LogMarker.DLS,"Processing of NonGrantorDestroyedMessage resulted in LockGrantorDestroyedException",e);    }  } finally {    if (!replied) {      reply(NonGrantorDestroyedReplyMessage.NOT_GRANTOR,dm);    }  }}  }
class C{  public static long runMultiThreaded(Callable<?> call,int threadNum,String threadName) throws Exception {  List<Callable<?>> calls=Collections.<Callable<?>>nCopies(threadNum,call);  return runMultiThreaded(calls,threadName);}  }
class C{  boolean isTransient(){  return mTransient;}  }
class C{  public ObjectCopier(ExecutorService exec,int buffersize){  this.exec=exec;  BUFFERSIZE=buffersize;  exchanger=new Exchanger<ByteArray>();  initialEmptyBuffer=new ByteArray(BUFFERSIZE);  initialFullBuffer=new ByteArray(BUFFERSIZE);  reset();}  }
class C{  public static boolean isWorkerImpl(final String id){  return UNIT_DRONE.equals(id) || UNIT_PROBE.equals(id) || UNIT_SCV.equals(id);}  }
class C{  public static Control createPagedResultsRequestControl(final Class clazz,final int pageSize,final boolean critical){  Control control=null;  try {    control=createRequestControl(clazz,new Class[]{int.class,boolean.class},new Object[]{new Integer(pageSize),Boolean.valueOf(critical)});  } catch (  LdapException e) {    LdapLogDebugUtils.generateDebug(LdapErrorCodes.ERR_10001_PAGED_RESULTS_CONTROL_CREATION,LOGGER);  }  if (control == null) {    control=createRequestControl(clazz,new Class[]{int.class},new Object[]{new Integer(pageSize)});  }  if (control == null) {    LdapExceptionUtils.generateErrorException(LdapErrorCodes.ERR_10001_PAGED_RESULTS_CONTROL_CREATION,LOGGER);  }  return control;}  }
class C{  public void removeAttribute(String attribute){  removeAttribute((Object)attribute);}  }
class C{  protected void makeGridTriangles(){  ShapeData shapeData=this.getCurrent();  FloatBuffer vs=shapeData.gridVertices;  int maxSize=9 * 4 * 2* ((this.width - 1) * (this.height - 1));  shapeData.triangleVertices=Buffers.newDirectFloatBuffer(maxSize);  shapeData.triangleNormals=Buffers.newDirectFloatBuffer(maxSize);  FloatBuffer triVerts=shapeData.triangleVertices;  int[] triFlags=new int[3];  int[] triIndices=new int[3];  for (int n=0; n < 2; n++) {    int base=n * this.width * this.height;    for (int j=0; j < this.height - 1; j++) {      for (int i=0; i < this.width - 1; i++) {        int k=base + j * this.width + i;        boolean ll, lr, ul, ur;        if (n == 0) {          ll=this.obstructionFlags[k] == NO_OBSTRUCTION;          lr=this.obstructionFlags[k + 1] == NO_OBSTRUCTION;          ul=this.obstructionFlags[k + this.width] == NO_OBSTRUCTION;          ur=this.obstructionFlags[k + this.width + 1] == NO_OBSTRUCTION;        } else {          ll=this.obstructionFlags[k] != EXTERNAL_OBSTRUCTION;          lr=this.obstructionFlags[k + 1] != EXTERNAL_OBSTRUCTION;          ul=this.obstructionFlags[k + this.width] != EXTERNAL_OBSTRUCTION;          ur=this.obstructionFlags[k + this.width + 1] != EXTERNAL_OBSTRUCTION;        }        int gridSize=this.width * this.height;        int llv=k;        int lrv=k + 1;        int ulv=(k + width);        int urv=k + width + 1;        int kk;        if (ul && ur && ll&& lr) {          if (this.obstructionFlags[llv] == INTERNAL_OBSTRUCTION) {            kk=llv * 3;            triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));            triFlags[0]=this.obstructionFlags[kk / 3];            triIndices[0]=kk;            kk=ulv * 3;            triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));            triFlags[1]=this.obstructionFlags[kk / 3];            triIndices[1]=kk;            kk=lrv * 3;            triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));            triFlags[2]=this.obstructionFlags[kk / 3];            triIndices[2]=kk;            this.setTriangleNormals(triFlags,triIndices);            kk=lrv * 3;            triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));            triFlags[0]=this.obstructionFlags[kk / 3];            triIndices[0]=kk;            kk=ulv * 3;            triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));            triFlags[1]=this.obstructionFlags[kk / 3];            triIndices[1]=kk;            kk=urv * 3;            triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));            triFlags[2]=this.obstructionFlags[kk / 3];            triIndices[2]=kk;            this.setTriangleNormals(triFlags,triIndices);          } else {            kk=llv * 3;            triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));            triFlags[0]=this.obstructionFlags[kk / 3];            triIndices[0]=kk;            kk=urv * 3;            triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));            triFlags[1]=this.obstructionFlags[kk / 3];            triIndices[1]=kk;            kk=lrv * 3;            triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));            triFlags[2]=this.obstructionFlags[kk / 3];            triIndices[2]=kk;            this.setTriangleNormals(triFlags,triIndices);            kk=llv * 3;            triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));            triFlags[0]=this.obstructionFlags[kk / 3];            triIndices[0]=kk;            kk=ulv * 3;            triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));            triFlags[1]=this.obstructionFlags[kk / 3];            triIndices[1]=kk;            kk=urv * 3;            triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));            triFlags[2]=this.obstructionFlags[kk / 3];            triIndices[2]=kk;            this.setTriangleNormals(triFlags,triIndices);          }        } else         if (ul && !ur && ll&& lr) {          kk=ulv * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triFlags[0]=this.obstructionFlags[kk / 3];          triIndices[0]=kk;          kk=lrv * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triFlags[1]=this.obstructionFlags[kk / 3];          triIndices[1]=kk;          kk=llv * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triFlags[2]=this.obstructionFlags[kk / 3];          triIndices[2]=kk;          this.setTriangleNormals(triFlags,triIndices);        } else         if (ul && ur && ll&& !lr) {          kk=llv * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triFlags[0]=this.obstructionFlags[kk / 3];          triIndices[0]=kk;          kk=ulv * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triFlags[1]=this.obstructionFlags[kk / 3];          triIndices[1]=kk;          kk=urv * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triFlags[2]=this.obstructionFlags[kk / 3];          triIndices[2]=kk;          this.setTriangleNormals(triFlags,triIndices);        } else         if (!ul && ur && ll&& lr) {          kk=llv * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triFlags[0]=this.obstructionFlags[kk / 3];          triIndices[0]=kk;          kk=urv * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triFlags[1]=this.obstructionFlags[kk / 3];          triIndices[1]=kk;          kk=lrv * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triFlags[2]=this.obstructionFlags[kk / 3];          triIndices[2]=kk;          this.setTriangleNormals(triFlags,triIndices);        } else         if (ul && ur && !ll&& lr) {          kk=lrv * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triFlags[0]=this.obstructionFlags[kk / 3];          triIndices[0]=kk;          kk=ulv * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triFlags[1]=this.obstructionFlags[kk / 3];          triIndices[1]=kk;          kk=urv * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triFlags[2]=this.obstructionFlags[kk / 3];          triIndices[2]=kk;          this.setTriangleNormals(triFlags,triIndices);        }        if (n == 0)         continue;        if (!ul && !ur && ll&& lr) {          if (this.obstructionFlags[llv] == INTERNAL_OBSTRUCTION || this.obstructionFlags[lrv] == INTERNAL_OBSTRUCTION) {            kk=llv * 3;            triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));            triIndices[0]=kk;            kk=lrv * 3;            triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));            triIndices[1]=kk;            kk=(llv - gridSize) * 3;            triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));            triIndices[2]=kk;            this.setTriangleNormals(null,triIndices);            kk=lrv * 3;            triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));            triIndices[0]=kk;            kk=(lrv - gridSize) * 3;            triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));            triIndices[1]=kk;            kk=(llv - gridSize) * 3;            triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));            triIndices[2]=kk;            this.setTriangleNormals(null,triIndices);          } else {            kk=llv * 3;            triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));            triIndices[0]=kk;            kk=(llv - gridSize) * 3;            triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));            triIndices[1]=kk;            kk=(lrv - gridSize) * 3;            triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));            triIndices[2]=kk;            this.setTriangleNormals(null,triIndices);            kk=llv * 3;            triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));            triIndices[0]=kk;            kk=lrv * 3;            triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));            triIndices[1]=kk;            kk=(lrv - gridSize) * 3;            triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));            triIndices[2]=kk;            this.setTriangleNormals(null,triIndices);          }        } else         if (ul && !ur && ll&& !lr) {          kk=llv * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[0]=kk;          kk=(llv - gridSize) * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[1]=kk;          kk=ulv * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[2]=kk;          this.setTriangleNormals(null,triIndices);          kk=ulv * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[0]=kk;          kk=(llv - gridSize) * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[1]=kk;          kk=(ulv - gridSize) * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[2]=kk;          this.setTriangleNormals(null,triIndices);        } else         if (ul && !ur && ll&& lr) {          kk=ulv * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[0]=kk;          kk=(ulv - gridSize) * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[1]=kk;          kk=(lrv - gridSize) * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[2]=kk;          this.setTriangleNormals(null,triIndices);          kk=(lrv - gridSize) * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[0]=kk;          kk=lrv * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[1]=kk;          kk=ulv * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[2]=kk;          this.setTriangleNormals(null,triIndices);        } else         if (ul && ur && ll&& !lr) {          kk=urv * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[0]=kk;          kk=(urv - gridSize) * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[1]=kk;          kk=(llv - gridSize) * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[2]=kk;          this.setTriangleNormals(null,triIndices);          kk=(llv - gridSize) * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[0]=kk;          kk=llv * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[1]=kk;          kk=urv * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[2]=kk;          this.setTriangleNormals(null,triIndices);        } else         if (!ul && ur && ll&& lr) {          kk=urv * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[0]=kk;          kk=(urv - gridSize) * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[1]=kk;          kk=(llv - gridSize) * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[2]=kk;          this.setTriangleNormals(null,triIndices);          kk=(llv - gridSize) * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[0]=kk;          kk=llv * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[1]=kk;          kk=urv * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[2]=kk;          this.setTriangleNormals(null,triIndices);        } else         if (!ul && ur && !ll&& lr) {          kk=urv * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[0]=kk;          kk=(urv - gridSize) * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[1]=kk;          kk=(lrv - gridSize) * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[2]=kk;          this.setTriangleNormals(null,triIndices);          kk=(lrv - gridSize) * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[0]=kk;          kk=lrv * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[1]=kk;          kk=urv * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[2]=kk;          this.setTriangleNormals(null,triIndices);        } else         if (ul && ur && !ll&& lr) {          kk=ulv * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[0]=kk;          kk=(ulv - gridSize) * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[1]=kk;          kk=(lrv - gridSize) * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[2]=kk;          this.setTriangleNormals(null,triIndices);          kk=(lrv - gridSize) * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[0]=kk;          kk=lrv * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[1]=kk;          kk=ulv * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[2]=kk;          this.setTriangleNormals(null,triIndices);        } else         if (ul && ur && !ll&& !lr) {          llv=ulv - gridSize;          lrv=urv - gridSize;          kk=llv * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[0]=kk;          kk=urv * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[1]=kk;          kk=lrv * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[2]=kk;          this.setTriangleNormals(null,triIndices);          kk=llv * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[0]=kk;          kk=ulv * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[1]=kk;          kk=urv * 3;          triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));          triIndices[2]=kk;          this.setTriangleNormals(null,triIndices);        }        if (j == 0 && ll && lr) {          if (this.obstructionFlags[llv] == INTERNAL_OBSTRUCTION || this.obstructionFlags[lrv] == INTERNAL_OBSTRUCTION) {            kk=llv * 3;            triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));            triIndices[0]=kk;            kk=lrv * 3;            triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));            triIndices[1]=kk;            kk=(llv - gridSize) * 3;            triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));            triIndices[2]=kk;            this.setTriangleNormals(null,triIndices);            kk=lrv * 3;            triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));            triIndices[0]=kk;            kk=(lrv - gridSize) * 3;            triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));            triIndices[1]=kk;            kk=(llv - gridSize) * 3;            triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));            triIndices[2]=kk;            this.setTriangleNormals(null,triIndices);          } else {            kk=llv * 3;            triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));            triIndices[0]=kk;            kk=(llv - gridSize) * 3;            triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));            triIndices[1]=kk;            kk=(lrv - gridSize) * 3;            triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));            triIndices[2]=kk;            this.setTriangleNormals(null,triIndices);            kk=llv * 3;            triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));            triIndices[0]=kk;            kk=lrv * 3;            triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));            triIndices[1]=kk;            kk=(lrv - gridSize) * 3;            triVerts.put(vs.get(kk)).put(vs.get(kk + 1)).put(vs.get(kk + 2));            triIndices[2]=kk;            this.setTriangleNormals(null,triIndices);          }        }      }    }  }  shapeData.triangleVertices.flip();  shapeData.triangleVertices=trimBuffer(shapeData.triangleVertices);  shapeData.triangleNormals.flip();  shapeData.triangleNormals=trimBuffer(shapeData.triangleNormals);}  }
class C{  public void removePrefItems(){  log.debug("removePrefItems dropped {}",plist.size());  plist.clear();}  }
class C{  public List<String> hostDatacenterChangeDeclineDetails(URI hostId,URI clusterId,URI datacenterId,boolean isVcenter){  Host host=_dbClient.queryObject(Host.class,hostId);  return Lists.newArrayList(ComputeSystemDialogProperties.getMessage("ComputeSystem.hostDatacenterChangeDeclineDetails",host.getLabel()));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:10.702 -0500",hash_original_method="993E59EE437D78A2EC4A4EFD6428AB11",hash_generated_method="A12DAF5E99E7B6026D85046BB227E106") public SimpleNNTPHeader(String from,String subject){  __from=from;  __subject=subject;  __newsgroups=new StringBuffer();  __headerFields=new StringBuffer();  __newsgroupCount=0;}  }
class C{  public void add(ResourceType resourceType){  String key=resourceType.getId();  if (key == null) {    key=resourceType.getName();  }  registry.put(key,resourceType);}  }
class C{  public T caseRegion(Region object){  return null;}  }
class C{  static boolean isWhiteSpace(char ch[],int start,int length){  int end=start + length;  for (int s=start; s < end; s++) {    if (!isWhiteSpace(ch[s]))     return false;  }  return true;}  }
class C{  public synchronized boolean isClosed(){  return journalWriter == null;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testAddress;  NamedNodeMap attributes;  doc=(Document)load("staff",false);  addressList=doc.getElementsByTagName("address");  testAddress=addressList.item(0);  attributes=testAddress.getAttributes();  assertSize("elementRetrieveAllAttributesAssert",2,attributes);}  }
class C{  public Axis withName(String name){  this.name=name;  return this;}  }
class C{  public final double doOperation() throws OperatorFailedException {  double logJacobian=0.0;  int index;  if (updateMap == null) {    index=MathUtils.nextInt(parameter.getDimension());  } else {    index=updateMap.get(MathUtils.nextInt(updateMapSize));  }  double draw=(2.0 * MathUtils.nextDouble() - 1.0) * windowSize;  double[] x=parameter.getParameterValues();  int dim=parameter.getDimension();  double[] transformedX=new double[dim];  for (int i=0; i < dim; i++) {    transformedX[i]=transformations[i].transform(x[i]);  }  double newValue=transformedX[index] + draw;  final Bounds<Double> bounds=parameter.getBounds();  final double lower=(lowerOperatorBound == null ? bounds.getLowerLimit(index) : Math.max(bounds.getLowerLimit(index),lowerOperatorBound));  final double upper=(upperOperatorBound == null ? bounds.getUpperLimit(index) : Math.min(bounds.getUpperLimit(index),upperOperatorBound));  if (condition == BoundaryCondition.reflecting) {    newValue=reflectValue(newValue,lower,upper);  } else   if (newValue < lower || newValue > upper) {    throw new OperatorFailedException("proposed value outside boundaries");  }  parameter.setParameterValue(index,transformations[index].inverse(newValue));  logJacobian+=transformations[index].getLogJacobian(x[index]) - transformations[index].getLogJacobian(parameter.getParameterValue(index));  return logJacobian;}  }
class C{  public void fireSelectionChanged(final Set<Sensor> oldSelection,final Set<Sensor> selection){  Object[] listeners=listenerList.getListenerList();  SensorSelectionEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == SensorSelectionListener.class) {      if (e == null) {        e=new SensorSelectionEvent(visionWorld,oldSelection,selection);      }      ((SensorSelectionListener)listeners[i + 1]).selectionChanged(e);    }  }}  }
class C{  public NamedNodeHashMap(){  table=new Entry[INITIAL_CAPACITY];}  }
class C{  public SingleChoiceEditor(final String id,final MarkupContainer markupProvider,final IModel model,final IModel<String> labelModel,final IModel choices,final AttrValue attrValue,final boolean readOnly){  super(id,"singleChoiceEditor",markupProvider);  final DropDownChoice<Pair<String,String>> dropDownChoice=new DropDownChoice<Pair<String,String>>(EDIT,model,choices);  dropDownChoice.setLabel(labelModel);  dropDownChoice.setEnabled(!readOnly);  dropDownChoice.setRequired(attrValue.getAttribute().isMandatory());  dropDownChoice.setChoiceRenderer(new PairChoiceRenderer());  add(dropDownChoice);}  }
class C{  public Matrix4f reflect(Vector3fc normal,Vector3fc point){  return reflect(normal.x(),normal.y(),normal.z(),point.x(),point.y(),point.z());}  }
class C{  public static void updateVolumeInUnManagedConsistencyGroup(UnManagedConsistencyGroup unManagedCG,UnManagedVolume unManagedVolume,BlockObject blockObject){  if (unManagedCG.getUnManagedVolumesMap().containsKey(unManagedVolume.getNativeGuid())) {    unManagedCG.getManagedVolumesMap().put(blockObject.getNativeGuid(),blockObject.getId().toString());    _logger.info("Added volume {} to the managed volume list of unmanaged consistency group {}",blockObject.getLabel(),unManagedCG.getLabel());    unManagedCG.getUnManagedVolumesMap().remove(unManagedVolume.getNativeGuid());    _logger.info("Removed volume {} from the unmanaged volume list of unmanaged consistency group {}",unManagedVolume.getLabel(),unManagedCG.getLabel());  } else {    _logger.info("Volume {} was not in the unmanaged volume list of unmanaged consistency group {}",unManagedVolume.getLabel(),unManagedCG.getLabel());  }}  }
class C{  public static QueryExp geq(ValueExp v1,ValueExp v2){  return new BinaryRelQueryExp(GE,v1,v2);}  }
class C{  public Track(Element e,Location location){  _location=location;  Attribute a;  if ((a=e.getAttribute(Xml.ID)) != null) {    _id=a.getValue();  } else {    log.warn("no id attribute in track element when reading operations");  }  if ((a=e.getAttribute(Xml.NAME)) != null) {    _name=a.getValue();  }  if ((a=e.getAttribute(Xml.LOC_TYPE)) != null) {    _trackType=a.getValue();  }  if ((a=e.getAttribute(Xml.LENGTH)) != null) {    try {      _length=Integer.parseInt(a.getValue());    } catch (    NumberFormatException nfe) {      log.error("Track length isn't a vaild number for track {}",getName());    }  }  if ((a=e.getAttribute(Xml.MOVES)) != null) {    try {      _moves=Integer.parseInt(a.getValue());    } catch (    NumberFormatException nfe) {      log.error("Track moves isn't a vaild number for track {}",getName());    }  }  if ((a=e.getAttribute(Xml.BLOCKING_ORDER)) != null) {    try {      _blockingOrder=Integer.parseInt(a.getValue());    } catch (    NumberFormatException nfe) {      log.error("Track blocking order isn't a vaild number for track {}",getName());    }  }  if ((a=e.getAttribute(Xml.DIR)) != null) {    try {      _trainDir=Integer.parseInt(a.getValue());    } catch (    NumberFormatException nfe) {      log.error("Track service direction isn't a vaild number for track {}",getName());    }  }  if ((a=e.getAttribute(Xml.COMMENT)) != null) {    _comment=OperationsXml.convertFromXmlComment(a.getValue());  }  if (e.getChild(Xml.TYPES) != null) {    @SuppressWarnings("unchecked") List<Element> carTypes=e.getChild(Xml.TYPES).getChildren(Xml.CAR_TYPE);    String[] types=new String[carTypes.size()];    for (int i=0; i < carTypes.size(); i++) {      Element type=carTypes.get(i);      if ((a=type.getAttribute(Xml.NAME)) != null) {        types[i]=a.getValue();      }    }    setTypeNames(types);    @SuppressWarnings("unchecked") List<Element> locoTypes=e.getChild(Xml.TYPES).getChildren(Xml.LOCO_TYPE);    types=new String[locoTypes.size()];    for (int i=0; i < locoTypes.size(); i++) {      Element type=locoTypes.get(i);      if ((a=type.getAttribute(Xml.NAME)) != null) {        types[i]=a.getValue();      }    }    setTypeNames(types);  } else   if ((a=e.getAttribute(Xml.CAR_TYPES)) != null) {    String names=a.getValue();    String[] types=names.split("%%");    if (debugFlag) {      log.debug("track ({}) accepts car types: {}",getName(),names);    }    setTypeNames(types);  }  if ((a=e.getAttribute(Xml.CAR_LOAD_OPTION)) != null) {    _loadOption=a.getValue();  }  if (e.getChild(Xml.CAR_LOADS) != null) {    @SuppressWarnings("unchecked") List<Element> carLoads=e.getChild(Xml.CAR_LOADS).getChildren(Xml.CAR_LOAD);    String[] loads=new String[carLoads.size()];    for (int i=0; i < carLoads.size(); i++) {      Element load=carLoads.get(i);      if ((a=load.getAttribute(Xml.NAME)) != null) {        loads[i]=a.getValue();      }    }    setLoadNames(loads);  } else   if ((a=e.getAttribute(Xml.CAR_LOADS)) != null) {    String names=a.getValue();    String[] loads=names.split("%%");    log.debug("Track ({}) {} car loads: {}",getName(),getLoadOption(),names);    setLoadNames(loads);  }  if ((a=e.getAttribute(Xml.CAR_SHIP_LOAD_OPTION)) != null) {    _shipLoadOption=a.getValue();  }  if (e.getChild(Xml.CAR_SHIP_LOADS) != null) {    @SuppressWarnings("unchecked") List<Element> carLoads=e.getChild(Xml.CAR_SHIP_LOADS).getChildren(Xml.CAR_LOAD);    String[] loads=new String[carLoads.size()];    for (int i=0; i < carLoads.size(); i++) {      Element load=carLoads.get(i);      if ((a=load.getAttribute(Xml.NAME)) != null) {        loads[i]=a.getValue();      }    }    setShipLoadNames(loads);  }  if (e.getChild(Xml.DROP_IDS) != null) {    @SuppressWarnings("unchecked") List<Element> dropIds=e.getChild(Xml.DROP_IDS).getChildren(Xml.DROP_ID);    String[] ids=new String[dropIds.size()];    for (int i=0; i < dropIds.size(); i++) {      Element dropId=dropIds.get(i);      if ((a=dropId.getAttribute(Xml.ID)) != null) {        ids[i]=a.getValue();      }    }    setDropIds(ids);  } else   if ((a=e.getAttribute(Xml.DROP_IDS)) != null) {    String names=a.getValue();    String[] ids=names.split("%%");    if (debugFlag) {      log.debug("track ({}) has drop ids: {}",getName(),names);    }    setDropIds(ids);  }  if ((a=e.getAttribute(Xml.DROP_OPTION)) != null) {    _dropOption=a.getValue();  }  if (e.getChild(Xml.PICKUP_IDS) != null) {    @SuppressWarnings("unchecked") List<Element> pickupIds=e.getChild(Xml.PICKUP_IDS).getChildren(Xml.PICKUP_ID);    String[] ids=new String[pickupIds.size()];    for (int i=0; i < pickupIds.size(); i++) {      Element pickupId=pickupIds.get(i);      if ((a=pickupId.getAttribute(Xml.ID)) != null) {        ids[i]=a.getValue();      }    }    setPickupIds(ids);  } else   if ((a=e.getAttribute(Xml.PICKUP_IDS)) != null) {    String names=a.getValue();    String[] ids=names.split("%%");    if (debugFlag) {      log.debug("track ({}) has pickup ids: {}",getName(),names);    }    setPickupIds(ids);  }  if ((a=e.getAttribute(Xml.PICKUP_OPTION)) != null) {    _pickupOption=a.getValue();  }  if (e.getChild(Xml.CAR_ROADS) != null) {    @SuppressWarnings("unchecked") List<Element> carRoads=e.getChild(Xml.CAR_ROADS).getChildren(Xml.CAR_ROAD);    String[] roads=new String[carRoads.size()];    for (int i=0; i < carRoads.size(); i++) {      Element road=carRoads.get(i);      if ((a=road.getAttribute(Xml.NAME)) != null) {        roads[i]=a.getValue();      }    }    setRoadNames(roads);  } else   if ((a=e.getAttribute(Xml.CAR_ROADS)) != null) {    String names=a.getValue();    String[] roads=names.split("%%");    if (debugFlag) {      log.debug("track ({}) {} car roads: {}",getName(),getRoadOption(),names);    }    setRoadNames(roads);  }  if ((a=e.getAttribute(Xml.CAR_ROAD_OPTION)) != null) {    _roadOption=a.getValue();  } else   if ((a=e.getAttribute(Xml.CAR_ROAD_OPERATION)) != null) {    _roadOption=a.getValue();  }  if ((a=e.getAttribute(Xml.SCHEDULE)) != null) {    _scheduleName=a.getValue();  }  if ((a=e.getAttribute(Xml.SCHEDULE_ID)) != null) {    _scheduleId=a.getValue();  }  if ((a=e.getAttribute(Xml.ITEM_ID)) != null) {    _scheduleItemId=a.getValue();  }  if ((a=e.getAttribute(Xml.ITEM_COUNT)) != null) {    try {      _scheduleCount=Integer.parseInt(a.getValue());    } catch (    NumberFormatException nfe) {      log.error("Schedule count isn't a vaild number for track {}",getName());    }  }  if ((a=e.getAttribute(Xml.FACTOR)) != null) {    try {      _reservationFactor=Integer.parseInt(a.getValue());    } catch (    NumberFormatException nfe) {      log.error("Reservation factor isn't a vaild number for track {}",getName());    }  }  if ((a=e.getAttribute(Xml.SCHEDULE_MODE)) != null) {    try {      _mode=Integer.parseInt(a.getValue());    } catch (    NumberFormatException nfe) {      log.error("Schedule mode isn't a vaild number for track {}",getName());    }  }  if ((a=e.getAttribute(Xml.HOLD_CARS_CUSTOM)) != null) {    setHoldCarsWithCustomLoadsEnabled(a.getValue().equals(Xml.TRUE));  }  if ((a=e.getAttribute(Xml.ONLY_CARS_WITH_FD)) != null) {    setOnlyCarsWithFinalDestinationEnabled(a.getValue().equals(Xml.TRUE));  }  if ((a=e.getAttribute(Xml.ALTERNATIVE)) != null) {    _alternateTrackId=a.getValue();  }  if ((a=e.getAttribute(Xml.LOAD_OPTIONS)) != null) {    try {      _loadOptions=Integer.parseInt(a.getValue());    } catch (    NumberFormatException nfe) {      log.error("Load options isn't a vaild number for track {}",getName());    }  }  if ((a=e.getAttribute(Xml.BLOCK_OPTIONS)) != null) {    try {      _blockOptions=Integer.parseInt(a.getValue());    } catch (    NumberFormatException nfe) {      log.error("Block options isn't a vaild number for track {}",getName());    }  }  if ((a=e.getAttribute(Xml.ORDER)) != null) {    _order=a.getValue();  }  if ((a=e.getAttribute(Xml.POOL)) != null) {    setPool(getLocation().addPool(a.getValue()));    if ((a=e.getAttribute(Xml.MIN_LENGTH)) != null) {      try {        _minimumLength=Integer.parseInt(a.getValue());      } catch (      NumberFormatException nfe) {        log.error("Minimum pool length isn't a vaild number for track {}",getName());      }    }  }  if ((a=e.getAttribute(Xml.IGNORE_USED_PERCENTAGE)) != null) {    try {      _ignoreUsedLengthPercentage=Integer.parseInt(a.getValue());    } catch (    NumberFormatException nfe) {      log.error("Ignore used percentage isn't a vaild number for track {}",getName());    }  }  if ((a=e.getAttribute(Xml.TRACK_DESTINATION_OPTION)) != null) {    _destinationOption=a.getValue();  }  if (e.getChild(Xml.DESTINATIONS) != null) {    @SuppressWarnings("unchecked") List<Element> eDestinations=e.getChild(Xml.DESTINATIONS).getChildren(Xml.DESTINATION);    for (    Element eDestination : eDestinations) {      if ((a=eDestination.getAttribute(Xml.ID)) != null) {        _destinationIdList.add(a.getValue());      }    }  }  if (e.getChild(Xml.COMMENTS) != null) {    if (e.getChild(Xml.COMMENTS).getChild(Xml.TRACK) != null && (a=e.getChild(Xml.COMMENTS).getChild(Xml.TRACK).getAttribute(Xml.COMMENT)) != null) {      _comment=a.getValue();    }    if (e.getChild(Xml.COMMENTS).getChild(Xml.BOTH) != null && (a=e.getChild(Xml.COMMENTS).getChild(Xml.BOTH).getAttribute(Xml.COMMENT)) != null) {      _commentBoth=a.getValue();    }    if (e.getChild(Xml.COMMENTS).getChild(Xml.PICKUP) != null && (a=e.getChild(Xml.COMMENTS).getChild(Xml.PICKUP).getAttribute(Xml.COMMENT)) != null) {      _commentPickup=a.getValue();    }    if (e.getChild(Xml.COMMENTS).getChild(Xml.SETOUT) != null && (a=e.getChild(Xml.COMMENTS).getChild(Xml.SETOUT).getAttribute(Xml.COMMENT)) != null) {      _commentSetout=a.getValue();    }  }  if ((a=e.getAttribute(Xml.READER)) != null) {    try {      Reporter r=jmri.InstanceManager.getDefault(jmri.ReporterManager.class).provideReporter(a.getValue());      _reader=r;    } catch (    IllegalArgumentException ex) {      log.warn("Not able to find reader: {} for location ({})",a.getValue(),getName());    }  }}  }
class C{  private DataPolicy(int ordinal,String name){  if (ordinal >= VALUES.length) {    throw new IllegalArgumentException(LocalizedStrings.DataPolicy_ONLY_0_DATAPOLICIES_MAY_BE_DEFINED.toLocalizedString(Integer.valueOf(VALUES.length + 1)));  }  if (VALUES[ordinal] != null) {    throw new IllegalArgumentException(LocalizedStrings.DataPolicy_ORDINAL_0_IS_ALREADY_DEFINED_BY_1.toLocalizedString(new Object[]{Integer.valueOf(ordinal),VALUES[ordinal]}));  }  this.name=name;  this.ordinal=(byte)(ordinal & 0xff);  VALUES[this.ordinal]=this;}  }
class C{  public void toggleSelection(final Sensor sensor){  if (isSelected(sensor)) {    remove(sensor);  } else {    add(sensor);  }}  }
class C{  protected void initCharacterEncodingFilter(ServletContext servletContext){  FilterRegistration.Dynamic filterRegistration=servletContext.addFilter("characterEncodingFilter",new CharacterEncodingFilter());  filterRegistration.setInitParameter("encoding",StandardCharsets.UTF_8.name());  filterRegistration.setInitParameter("forceEncoding","true");  filterRegistration.addMappingForUrlPatterns(null,true,"/*");}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  private void definePanels(UIDefaults d){  String p="Panel";  d.put(p + ".contentMargins",new InsetsUIResource(0,0,0,0));  d.put(p + ".background",new ColorUIResource((Color)d.get("control")));  d.put(p + ".opaque",Boolean.TRUE);}  }
class C{  public void clamp(){  IntegerVectorSpecies _species=(IntegerVectorSpecies)species;  for (int i=0; i < genomeLength(); i++) {    short minGene=(short)_species.minGene(i);    if (genome[i] < minGene)     genome[i]=minGene; else {      short maxGene=(short)_species.maxGene(i);      if (genome[i] > maxGene)       genome[i]=maxGene;    }  }}  }
class C{  public int constrains(GeneralNameInterface inputName) throws UnsupportedOperationException {  int constraintType;  if (inputName == null)   constraintType=NAME_DIFF_TYPE; else   if (inputName.getType() != NAME_EDI)   constraintType=NAME_DIFF_TYPE; else {    throw new UnsupportedOperationException("Narrowing, widening, and matching of names not supported for EDIPartyName");  }  return constraintType;}  }
class C{  public boolean accept(final IBindingSet bs){  XSDBooleanIV left, right;  try {    left=get(0).get(bs);  } catch (  SparqlTypeErrorException ex) {    left=null;  }  try {    right=get(1).get(bs);  } catch (  SparqlTypeErrorException ex) {    right=null;  }  if (left == null || right == null) {    if (left != null && !left.booleanValue())     return false;    if (right != null && !right.booleanValue())     return false;    throw new SparqlTypeErrorException();  }  return left.booleanValue() && right.booleanValue();}  }
class C{  public Instances resampleWithWeights(Random random,double[] weights){  return resampleWithWeights(random,weights,null);}  }
class C{  public int length(){  return namesAndValues.size() / 2;}  }
class C{  public int recordEvent(Document oplogEvent,long timestamp) throws InterruptedException {  final Struct sourceValue=source.offsetStructForEvent(replicaSetName,oplogEvent);  final Map<String,?> offset=source.lastOffset(replicaSetName);  Document patchObj=oplogEvent.get("o",Document.class);  Object o2=oplogEvent.get("o2");  String objId=o2 != null ? objectIdLiteral(o2) : objectIdLiteralFrom(patchObj);  assert objId != null;  Operation operation=operationLiterals.get(oplogEvent.getString("op"));  return createRecords(sourceValue,offset,operation,objId,patchObj,timestamp);}  }
class C{  public ServiceEndpoint(URI address,X509Certificate sslTrustAnchor,EndpointProtocol protocol){  ValidateUtil.validateNotNull(address,"Endpoint address");  ValidateUtil.validateStringMaxLength(address.toASCIIString(),"Endpoint address",ValidateUtil.ENDPOINT_MAX_LENGTH);  ValidateUtil.validateNotNull(protocol,"Endpoint protocol");  if (sslTrustAnchor != null) {    ValidateUtil.validateCertificate(sslTrustAnchor);  }  _address=address;  _sslTrustAnchor=sslTrustAnchor;  _protocol=protocol;}  }
class C{  public void put(int key){  map.put(key,null);}  }
class C{  public void commentChar(int ch){  if (ch >= 0 && ch < ctype.length)   ctype[ch]=CT_COMMENT;}  }
class C{  public static final String generateHash(final String s){  try {    MessageDigest digest=java.security.MessageDigest.getInstance("MD5");    digest.update(s.getBytes());    byte messageDigest[]=digest.digest();    StringBuffer hexString=new StringBuffer();    for (int i=0; i < messageDigest.length; i++) {      String h=Integer.toHexString(0xFF & messageDigest[i]);      while (h.length() < 2)       h="0" + h;      hexString.append(h);    }    return hexString.toString();  } catch (  NoSuchAlgorithmException e) {    e.printStackTrace();  }  return "";}  }
class C{  private void processTraversalEvent(AccessibilityEvent event){  final CharSequence text=AccessibilityEventUtils.getEventTextOrDescription(event);  if (TextUtils.isEmpty(text)) {    return;  }  String letter;  if ((event.getAction() == AccessibilityNodeInfoCompat.ACTION_NEXT_AT_MOVEMENT_GRANULARITY || event.getAction() == AccessibilityNodeInfoCompat.ACTION_PREVIOUS_AT_MOVEMENT_GRANULARITY) && event.getFromIndex() >= 0 && event.getFromIndex() < text.length()) {    letter=String.valueOf(text.charAt(event.getFromIndex()));  } else {    return;  }  String phoneticLetter=getPhoneticLetter(Locale.getDefault().toString(),letter);  if (phoneticLetter != null) {    postPhoneticLetterRunnable(phoneticLetter);  }}  }
class C{  public boolean isVmNpivWwnSupported(){  return vmNpivWwnSupported;}  }
class C{  public final void releaseTable(){  space.release(base);  valid=false;}  }
class C{  public void log(Level level,String sourceclass,String message){  log(level,sourceclass,"",message);}  }
class C{  public static String maskLeft(String s,int len,char mask_ch){  if (len <= 0) {    return s;  }  len=Math.min(len,s.length());  StringBuilder sb=new StringBuilder();  for (int i=0; i < len; i++) {    sb.append(mask_ch);  }  sb.append(s.substring(len));  return sb.toString();}  }
class C{  protected void propagateStoresTo(Block succ,Node node,TransferInput<A,S> currentInput,Store.FlowRule flowRule,boolean addToWorklistAgain){switch (flowRule) {case EACH_TO_EACH:    if (currentInput.containsTwoStores()) {      addStoreBefore(succ,node,currentInput.getThenStore(),Store.Kind.THEN,addToWorklistAgain);      addStoreBefore(succ,node,currentInput.getElseStore(),Store.Kind.ELSE,addToWorklistAgain);    } else {      addStoreBefore(succ,node,currentInput.getRegularStore(),Store.Kind.BOTH,addToWorklistAgain);    }  break;case THEN_TO_BOTH:addStoreBefore(succ,node,currentInput.getThenStore(),Store.Kind.BOTH,addToWorklistAgain);break;case ELSE_TO_BOTH:addStoreBefore(succ,node,currentInput.getElseStore(),Store.Kind.BOTH,addToWorklistAgain);break;case THEN_TO_THEN:addStoreBefore(succ,node,currentInput.getThenStore(),Store.Kind.THEN,addToWorklistAgain);break;case ELSE_TO_ELSE:addStoreBefore(succ,node,currentInput.getElseStore(),Store.Kind.ELSE,addToWorklistAgain);break;}}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:22.739 -0500",hash_original_method="B80D9A696720D276C6AF21D39513741E",hash_generated_method="3B7D242B0C48B41C862F19CA428991BF") public final boolean isRecycled(){  return mRecycled;}  }
class C{  public <V>ConcurrentHashMap<String,V> newConcurrentStringMap(){  return dbSettings.databaseToUpper ? new NullableKeyConcurrentMap<V>() : new CaseInsensitiveConcurrentMap<V>();}  }
class C{  public boolean invalidateIt(){  log.info(toString());  setDocAction(DOCACTION_Prepare);  return true;}  }
class C{  public static boolean isEmpty(final String str){  return str == null || str.length() == 0;}  }
class C{  public static void connectionAccepted(){  numConnections.getAndIncrement();}  }
class C{  public void add(XMLX509SubjectName xmlX509SubjectName){  this.constructionElement.appendChild(xmlX509SubjectName.getElement());  XMLUtils.addReturnToElement(this.constructionElement);}  }
class C{  public int asNode(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return xctxt.getCurrentNode();}  }
class C{  public static String sprintf(Object self,String format,Object arg){  if (arg instanceof Object[]) {    return sprintf(self,format,(Object[])arg);  }  if (arg instanceof List) {    return sprintf(self,format,((List)arg).toArray());  }  if (!arg.getClass().isArray()) {    Object[] o=(Object[])java.lang.reflect.Array.newInstance(arg.getClass(),1);    o[0]=arg;    return sprintf(self,format,o);  }  Object[] ans;  String elemType=arg.getClass().getName();  if (elemType.equals("[I")) {    int[] ia=(int[])arg;    ans=new Integer[ia.length];    for (int i=0; i < ia.length; i++) {      ans[i]=ia[i];    }  } else   if (elemType.equals("[C")) {    char[] ca=(char[])arg;    ans=new Character[ca.length];    for (int i=0; i < ca.length; i++) {      ans[i]=ca[i];    }  } else   if (elemType.equals("[Z")) {    boolean[] ba=(boolean[])arg;    ans=new Boolean[ba.length];    for (int i=0; i < ba.length; i++) {      ans[i]=ba[i];    }  } else   if (elemType.equals("[B")) {    byte[] ba=(byte[])arg;    ans=new Byte[ba.length];    for (int i=0; i < ba.length; i++) {      ans[i]=ba[i];    }  } else   if (elemType.equals("[S")) {    short[] sa=(short[])arg;    ans=new Short[sa.length];    for (int i=0; i < sa.length; i++) {      ans[i]=sa[i];    }  } else   if (elemType.equals("[F")) {    float[] fa=(float[])arg;    ans=new Float[fa.length];    for (int i=0; i < fa.length; i++) {      ans[i]=fa[i];    }  } else   if (elemType.equals("[J")) {    long[] la=(long[])arg;    ans=new Long[la.length];    for (int i=0; i < la.length; i++) {      ans[i]=la[i];    }  } else   if (elemType.equals("[D")) {    double[] da=(double[])arg;    ans=new Double[da.length];    for (int i=0; i < da.length; i++) {      ans[i]=da[i];    }  } else {    throw new RuntimeException("sprintf(String," + arg + ")");  }  return sprintf(self,format,ans);}  }
class C{  public GenericJSONBuilder addText(String text_){  text=text + text_;  return this;}  }
class C{  public static void updateNodes(PathDataNode[] target,PathDataNode[] source){  for (int i=0; i < source.length; i++) {    target[i].mType=source[i].mType;    for (int j=0; j < source[i].mParams.length; j++) {      target[i].mParams[j]=source[i].mParams[j];    }  }}  }
class C{  public AttributeTypeAndValue(String sOid,AttributeValue value) throws IOException {  if (sOid.charAt(0) >= '0' && sOid.charAt(0) <= '9') {    int[] array=android.framework.org.apache.harmony.security_custom.asn1.ObjectIdentifier.toIntArray(sOid);    ObjectIdentifier thisOid=getOID(array);    if (thisOid == null) {      thisOid=new ObjectIdentifier(array);    }    this.oid=thisOid;  } else {    this.oid=KNOWN_NAMES.get(sOid.toUpperCase(Locale.US));    if (this.oid == null) {      throw new IOException("Unrecognizable attribute name: " + sOid);    }  }  this.value=value;}  }
class C{  public void readMatrixFiles(String foldername,String studyArea){  String withinFilename=foldername + studyArea + "_WithinChainMatrix.txt";  log.info("Reading 'within' chain characteristic matrix from file: " + withinFilename);  this.withinMatrix=readMatrixFile(withinFilename);  String throughFilename=foldername + studyArea + "_ThroughChainMatrix.txt";  log.info("Reading 'through' chain characteristic matrix from file: " + throughFilename);  this.throughMatrix=readMatrixFile(throughFilename);}  }
class C{  public PoolingByteArrayOutputStream(ByteArrayPool pool){  this(pool,DEFAULT_SIZE);}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:41.655 -0500",hash_original_method="E9BAFB829F6434607FADA475E44C9773",hash_generated_method="61E86E51AB142C9AB603C2EE2DC86D2A") public ListeningPoint createListeningPoint(int port,String transport) throws TransportNotSupportedException, InvalidArgumentException {  if (super.stackAddress == null)   throw new NullPointerException("Stack does not have a default IP Address!");  return this.createListeningPoint(super.stackAddress,port,transport);}  }
class C{  private String parseDaySummary(JSONObject response) throws JSONException {  JSONObject hourly=response.getJSONObject("hourly");  return hourly.getString("summary");}  }
class C{  public RowBuilder int16(String name){  ColumnInt16 column=new ColumnInt16(_columns.size(),name,_offset);  _offset+=column.length();  _columns.add(column);  return this;}  }
class C{  private static String loadContents(Object fileData) throws IOException {  String path=SBFileValueHelper.getPath(fileData);  InputStream is=null;  try {    File file=new File(path);    is=new FileInputStream(file);    byte[] buffer=new byte[Math.min(CONTENTS_NUMBER_OF_BYTES,(int)file.length())];    is.read(buffer);    return new String(buffer,"UTF-8");  }  finally {    if (is != null) {      try {        is.close();      } catch (      IOException e) {      }    }  }}  }
class C{  public void test_ConstructorSZ() throws Exception {  Timer t=null;  try {    t=new Timer("test_ConstructorSZThread",true);    TimerTestTask testTask=new TimerTestTask();    t.schedule(testTask,200);    awaitRun(testTask);    t.cancel();  }  finally {    if (t != null)     t.cancel();  }  try {    new Timer(null,true);    fail();  } catch (  NullPointerException expected) {  }  try {    new Timer(null,false);    fail();  } catch (  NullPointerException expected) {  }}  }
class C{  @RequestMapping(value=BUSINESS_OBJECT_DATA_ATTRIBUTES_URI_PREFIX + "/namespaces/{namespace}" + "/businessObjectDefinitionNames/{businessObjectDefinitionName}"+ "/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}"+ "/businessObjectFormatVersions/{businessObjectFormatVersion}/partitionValues/{partitionValue}/subPartition1Values/{subPartition1Value}"+ "/businessObjectDataVersions/{businessObjectDataVersion}/businessObjectDataAttributeNames/{businessObjectDataAttributeName}",method=RequestMethod.PUT,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DATA_ATTRIBUTES_PUT) public BusinessObjectDataAttribute updateBusinessObjectDataAttribute(@PathVariable("namespace") String namespace,@PathVariable("businessObjectDefinitionName") String businessObjectDefinitionName,@PathVariable("businessObjectFormatUsage") String businessObjectFormatUsage,@PathVariable("businessObjectFormatFileType") String businessObjectFormatFileType,@PathVariable("businessObjectFormatVersion") Integer businessObjectFormatVersion,@PathVariable("partitionValue") String partitionValue,@PathVariable("subPartition1Value") String subPartition1Value,@PathVariable("businessObjectDataVersion") Integer businessObjectDataVersion,@PathVariable("businessObjectDataAttributeName") String businessObjectDataAttributeName,@RequestBody BusinessObjectDataAttributeUpdateRequest request){  return businessObjectDataAttributeService.updateBusinessObjectDataAttribute(new BusinessObjectDataAttributeKey(namespace,businessObjectDefinitionName,businessObjectFormatUsage,businessObjectFormatFileType,businessObjectFormatVersion,partitionValue,Arrays.asList(subPartition1Value),businessObjectDataVersion,businessObjectDataAttributeName),request);}  }
class C{  public void openRead(ReadStreamOld rs) throws IOException {  closeWrite();  TempReadStream tempReadStream=new TempReadStream(_head);  tempReadStream.setFreeWhenDone(true);  _head=null;  _tail=null;  rs.init(tempReadStream);}  }
class C{  private static RegisterPriority registerPriorityOfInputOperand(EnumSet<OperandFlag> flags){  if (flags.contains(OperandFlag.OUTGOING)) {    return RegisterPriority.None;  }  if (flags.contains(OperandFlag.STACK)) {    return RegisterPriority.ShouldHaveRegister;  }  return RegisterPriority.MustHaveRegister;}  }
class C{  public final <U>Flux<T> delaySubscription(Publisher<U> subscriptionDelay){  return onAssembly(new FluxDelaySubscription<>(this,subscriptionDelay));}  }
class C{  protected Parameter_Impl(){  super();}  }
class C{  static public SourcePosition findSourcePosition(File javaFile,int lineNumber,int columnNumber) throws IOException {  String[] lines=new String[3];  int currentLineNumber=1;  try (BufferedReader br=new BufferedReader(new FileReader(javaFile))){    for (String line; (line=br.readLine()) != null; ) {      lines[0]=lines[1];      lines[1]=lines[2];      lines[2]=line;      if (lineNumber == currentLineNumber) {        break;      }      currentLineNumber++;    }  }   if (lineNumber != currentLineNumber) {    return null;  }  SourcePosition pos0=findSourcePositionInComment(lines[1]);  if (pos0 != null) {    return pos0;  }  SourcePosition pos1=findSourcePositionInComment(lines[0]);  return pos1;}  }
class C{  public EmpiricalMeasurementDistribution computeSignificance(int[][] newOrderings) throws Exception {  throw new UnsupportedOperationException("Not implemented yet");}  }
class C{  public BalancedBinaryNode<K,V> firstNode(){  BalancedBinaryNode<K,V> p=root;  if (p != null)   while (p.left != null)   p=p.left;  return p;}  }
class C{  public void addSelectionChangedListener(SelectionChangedListener l){  listenerList.add(SelectionChangedListener.class,l);}  }
class C{  public int stem(char s[],int len){  if (len < 4)   return len;  final int origLen=len;  len=rule0(s,len);  len=rule1(s,len);  len=rule2(s,len);  len=rule3(s,len);  len=rule4(s,len);  len=rule5(s,len);  len=rule6(s,len);  len=rule7(s,len);  len=rule8(s,len);  len=rule9(s,len);  len=rule10(s,len);  len=rule11(s,len);  len=rule12(s,len);  len=rule13(s,len);  len=rule14(s,len);  len=rule15(s,len);  len=rule16(s,len);  len=rule17(s,len);  len=rule18(s,len);  len=rule19(s,len);  len=rule20(s,len);  if (len == origLen)   len=rule21(s,len);  return rule22(s,len);}  }
class C{  public Optional<Charset> charset(){  ImmutableSet<String> charsetValues=ImmutableSet.copyOf(parameters.get(CHARSET_ATTRIBUTE));switch (charsetValues.size()) {case 0:    return Optional.absent();case 1:  return Optional.of(Charset.forName(Iterables.getOnlyElement(charsetValues)));default :throw new IllegalStateException("Multiple charset values defined: " + charsetValues);}}  }
class C{  private void loadOneLine(JComboBox<Object> locoRosterBox,JTextField locoTextField,JButton adrButton,JButton dirButton,JButton cmdButton){  if (locoTextField.getText().equals("")) {    return;  }  if (validLocoAdr(locoTextField.getText()) < 0) {    return;  }  byte cN=(byte)validConsist(consistTextField.getText());  if (cN < 0) {    return;  }  int locoAddr=getLocoAddr(locoTextField,adrButton);  if (dirButton.getText().equals(rb.getString("KeyQUESTION"))) {    JOptionPane.showMessageDialog(this,rb.getString("DIALOG_SetDirB4Consist"),rb.getString("DIALOG_NceConsist"),JOptionPane.ERROR_MESSAGE);    return;  }  sendNceBinaryCommand(locoAddr,NceBinaryCommand.LOCO_CMD_DELETE_LOCO_CONSIST,(byte)0);  if (locoTextField == locoTextField1) {    sendNceBinaryCommand(locoAddr,NceBinaryCommand.LOCO_CMD_FWD_CONSIST_LEAD,cN);    sendNceBinaryCommand(locoAddr,NceBinaryCommand.LOCO_CMD_KILL_CONSIST,(byte)0);    if (dirButton.getText().equals(rb.getString("KeyFWD"))) {      sendNceBinaryCommand(locoAddr,NceBinaryCommand.LOCO_CMD_FWD_CONSIST_LEAD,cN);    }    if (dirButton.getText().equals(rb.getString("KeyREV"))) {      sendNceBinaryCommand(locoAddr,NceBinaryCommand.LOCO_CMD_REV_CONSIST_LEAD,cN);    }  } else   if (locoTextField == locoTextField2) {    if (dirButton.getText().equals(rb.getString("KeyFWD"))) {      sendNceBinaryCommand(locoAddr,NceBinaryCommand.LOCO_CMD_FWD_CONSIST_REAR,cN);    }    if (dirButton.getText().equals(rb.getString("KeyREV"))) {      sendNceBinaryCommand(locoAddr,NceBinaryCommand.LOCO_CMD_REV_CONSIST_REAR,cN);    }  } else {    if (dirButton.getText().equals(rb.getString("KeyFWD"))) {      sendNceBinaryCommand(locoAddr,NceBinaryCommand.LOCO_CMD_FWD_CONSIST_MID,cN);    }    if (dirButton.getText().equals(rb.getString("KeyREV"))) {      sendNceBinaryCommand(locoAddr,NceBinaryCommand.LOCO_CMD_REV_CONSIST_MID,cN);    }  }}  }
class C{  public Token nextRegex(Pattern pattern){  if (!hasNextRegex(pattern))   throw new IllegalStateException("No more occurrences found!");  Matcher matcher=anyMentionPattern.matcher(remaining);  if (!matcher.find())   throw new IllegalStateException("Couldn't find any matches!");  final int start=currentPosition + matcher.start();  final int end=currentPosition + matcher.end();  stepTo(end);  return new Token(this,start,end);}  }
class C{  public ProbeTable addProduct(int vendorId,int productId,Class<? extends UsbSerialDriver> driverClass){  mProbeTable.put(Pair.create(vendorId,productId),driverClass);  return this;}  }
class C{  public static CaseInsensitiveArrayList sort(CaseInsensitiveArrayList unsorted){  CaseInsensitiveArrayList subs=new CaseInsensitiveArrayList(unsorted);  if (!subs.contains("frontpage")) {    subs.add("frontpage");  }  if (!subs.contains("all")) {    subs.add("all");  }  return sortNoExtras(subs);}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"nop");  if (instruction.getOperands().size() != 0) {    throw new InternalTranslationException("Error: Argument instruction is not a nop instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  instructions.add(ReilHelpers.createNop(baseOffset));}  }
class C{  private LinkedHashMap<Id,ClusterLink> findInterLInks(NodeCluster nc1,NodeCluster nc2){  LinkedHashMap<Id,ClusterLink> newInterlinks=new LinkedHashMap<>();  for (  ClusterLink l : nc1.getInLinks().values()) {    if (nc2.getOutLinks().get(l.getId()) != null) {      newInterlinks.put(l.getId(),l);    }  }  for (  ClusterLink l : nc2.getInLinks().values()) {    if (nc1.getOutLinks().get(l.getId()) != null) {      newInterlinks.put(l.getId(),l);    }  }  return newInterlinks;}  }
class C{  private void addShutdownHook(){  if (!Boolean.getBoolean(org.apache.geode.distributed.internal.InternalDistributedSystem.DISABLE_SHUTDOWN_HOOK_PROPERTY)) {    Runtime.getRuntime().addShutdownHook(shutdownHook);  }}  }
class C{  public int size(){  return size;}  }
class C{  IgfsOutputStreamImpl(IgfsContext igfsCtx,IgfsPath path,IgfsEntryInfo fileInfo,int bufSize,IgfsMode mode,@Nullable IgfsFileWorkerBatch batch){  super(igfsCtx,path,bufSize,batch);  assert fileInfo != null && fileInfo.isFile() : "Unexpected file info: " + fileInfo;  assert mode != null && mode != PROXY && (mode == PRIMARY && batch == null || batch != null);  if (fileInfo.lockId() == null)   throw new IgfsException("Failed to acquire file lock (concurrently modified?): " + path);synchronized (mux) {    this.fileInfo=fileInfo;    this.mode=mode;    streamRange=initialStreamRange(fileInfo);    writeFut=igfsCtx.data().writeStart(fileInfo.id());  }}  }
class C{  public Fonseca(){  super(2,2);}  }
class C{  public static void intBenchmarkPrimitiveOptimized(int runs,int rows,int columns,boolean print){  throw new InternalError();}  }
