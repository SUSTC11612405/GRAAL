class C{  public static String replace(String name,char replace,String with){  StringBuilder buf=new StringBuilder();  int begin=0;  int end;  int last=name.length();  while (true) {    end=name.indexOf(replace,begin);    if (end < 0) {      end=last;    }    buf.append(name.substring(begin,end));    if (end == last) {      break;    }    buf.append(with);    begin=end + 1;  }  return buf.toString();}  }
class C{  public static byte[] decode(String source){  int num=0;  int numBytes=0;  int eofBytes=0;  ByteArrayOutputStream bout=new ByteArrayOutputStream();  for (int i=0; i < source.length(); i++) {    char c=source.charAt(i);    if (Character.isWhitespace(c))     continue;    if (c == '=') {      eofBytes++;      num=num << 6;switch (++numBytes) {case 1:case 2:        throw new RuntimeException("Unexpected end of stream character (=)");case 3:      break;case 4:    bout.write((byte)(num >> 16));  if (eofBytes == 1)   bout.write((byte)(num >> 8));break;case 5:throw new RuntimeException("Trailing garbage detected");default :throw new IllegalStateException("Invalid value for numBytes");}continue;}if (eofBytes > 0) throw new RuntimeException("Base64 characters after end of stream character (=) detected.");if (c >= 0 && c < Base64.base64ToInt.length) {int result=Base64.base64ToInt[c];if (result >= 0) {num=(num << 6) + result;if (++numBytes != 4) continue;bout.write((byte)(num >> 16));bout.write((byte)(num >> 8 & 0xff));bout.write((byte)(num & 0xff));num=0;numBytes=0;continue;}}if (!Character.isWhitespace(c)) throw new RuntimeException("Invalid Base64 character: " + (int)c);}return bout.toByteArray();}  }
class C{  public void clear(){  counter.clear();}  }
class C{  public DynamicClassLoader(ClassLoader parent,boolean enableDependencyCheck,boolean isRoot){  super(NULL_URL_ARRAY,getInitParent(parent,isRoot));  parent=getParent();  _isEnableDependencyCheck=enableDependencyCheck;  _dependencies.setCheckInterval(_globalDependencyCheckInterval);  if (!CurrentTime.isTest()) {    _dependencies.setAsync(true);  }  for (; parent != null; parent=parent.getParent()) {    if (parent instanceof DynamicClassLoader) {      DynamicClassLoader loader=(DynamicClassLoader)parent;      loader.init();      addPermissions(loader.getPermissions());      _dependencies.add(loader);      _dependencies.setCheckInterval(loader.getDependencyCheckInterval());      break;    }  }  if (System.getProperty("baratine.verbose.classpath") != null) {    _isVerbose=true;    int depth=0;    while (parent != null) {      depth++;      parent=parent.getParent();    }    _verboseDepth=depth;  } else   _isVerbose=false;}  }
class C{  protected void initialize(String dirPath,String root,String DD) throws IOException {  String rootPath=dirPath + "/" + root+ DD+ ".";  gen=new GeneralInformationFile(rootPath + GEN_NAME);  ger=new GeoReferenceFile(rootPath + GER_NAME);  qal=new QualityFile(rootPath + QAL_NAME);  sou=new SourceFile(rootPath + SOURCE_NAME);  img=new RasterGeoDataFile(rootPath + IMAGE_NAME);  DDFField sprInfo=gen.getField(GeneralInformationFile.DATA_SET_PARAMETERS);  numHorBlocks_N=sprInfo.getSubfield("NFC").intValue();  numVerBlocks_M=sprInfo.getSubfield("NFL").intValue();  numHorPixels_Q=sprInfo.getSubfield("PNC").intValue();  numVerPixels_P=sprInfo.getSubfield("PNL").intValue();  pixelCountBits=sprInfo.getSubfield("PCB").intValue();  pixelValueBits=sprInfo.getSubfield("PVB").intValue();  DDFField genInfo=gen.getField(GeneralInformationFile.GENERAL_INFORMATION);  swo=genInfo.getSubfield("SWO").floatValue() / 3600f;  neo=genInfo.getSubfield("NEO").floatValue() / 3600f;  nea=genInfo.getSubfield("NEA").floatValue() / 3600f;  swa=genInfo.getSubfield("SWA").floatValue() / 3600f;  lso=genInfo.getSubfield("LSO").floatValue() / 3600f;  pso=genInfo.getSubfield("PSO").floatValue() / 3600f;  arv=genInfo.getSubfield("ARV").intValue();  brv=genInfo.getSubfield("BRV").intValue();  DDFField timInfo=gen.getField(GeneralInformationFile.TILE_INDEX_MAP);  tsi=timInfo.getSubfields("TSI");  DDFField pixelInfo=img.getField(RasterGeoDataFile.PIXEL);  tileDataOffset=pixelInfo.getHeaderOffset() + pixelInfo.getDataPosition();  degPerHorBlock=360f / (float)arv * (float)numHorPixels_Q;  degPerVerBlock=360f / (float)brv * (float)numVerPixels_P;  if (Debug.debugging("asrp")) {    Debug.output("For " + rootPath + "\n\thave blocks ("+ numHorBlocks_N+ ", "+ numVerBlocks_M+ ")\n\twith pixels ("+ numHorPixels_Q+ ", "+ numVerPixels_P+ ")");    Debug.output("\tCoverage from (" + nea + ", "+ swo+ ") to ("+ swa+ ", "+ neo+ ")");    Debug.output("\tPadded coverage starting at (" + pso + ", "+ lso+ ")");    Debug.output("\tNumber of pixels 360 e-w (" + arv + ") , n-s ("+ brv+ ")");    Debug.output("\tdegrees per horizontal block: " + degPerHorBlock + ", vertical: "+ degPerVerBlock);    Debug.output("\tImage Data made up of count bits: " + pixelCountBits + ", value bits: "+ pixelValueBits);    if (Debug.debugging("asrpdetail")) {      Debug.output("Checking...");      float latdiff=nea - swa;      float londiff=neo - swo;      float horPixels=arv * (londiff / 360f);      float verPixels=brv * (latdiff / 360f);      Debug.output("\tCalculating " + (horPixels / numHorPixels_Q) + " hor blocks");      Debug.output("\tCalculating " + (verPixels / numVerPixels_P) + " hor blocks");      Debug.output("\tCalculating " + (lso + degPerHorBlock * numHorBlocks_N) + " end latitude");      Debug.output("\tCalculating " + (pso - degPerVerBlock * numVerBlocks_M) + " end latitude");    }  }  getColors();  gen.close();  ger.close();  qal.close();  sou.close();  img.close();}  }
class C{  public MarketingPermissionNotFoundException(String message){  super(message);}  }
class C{  public HCardElement(Element element){  this.element=element;}  }
class C{  public static Timestamp nowZ(){  long millis=System.currentTimeMillis();  return new Timestamp(millis,UTC_OFFSET);}  }
class C{  private void addSymbolsDeclaredLater(StringSet prevDeclared,NodeRepresentation nodeRepArg,boolean includeGoal){  NodeRepresentation assumpRepNode=nodeRepArg;  while (assumpRepNode.parentNode != null) {    assumpRepNode=assumpRepNode.parentNode;  }  int idx=0;  while ((idx < this.state.assumeReps.size()) && (this.state.assumeReps.elementAt(idx) != assumpRepNode)) {    idx++;  }  if (idx == this.state.assumeReps.size()) {    return;  }  for (int i=idx + 1; i < state.assumeReps.size(); i++) {    NodeRepresentation anode=state.assumeReps.elementAt(i);    if (anode.nodeType == NodeRepresentation.NEW_NODE) {      prevDeclared.add(anode.newId);    }    if (includeGoal && anode.isCreated) {      ExprNode snode=null;      if ((anode.semanticNode != null) && (anode.semanticNode instanceof ExprNode)) {        snode=(ExprNode)anode.semanticNode;      }      if (snode != null) {        FormalParamNode[] goalIdents=ResourceHelper.getBoundIdentifiers(snode);        for (int j=0; j < goalIdents.length; j++) {          prevDeclared.add(getCurrentName(goalIdents[j],this.state.renaming));        }      }    }  }  if (includeGoal) {    FormalParamNode[] goalIdents=ResourceHelper.getBoundIdentifiers((ExprNode)this.state.goalRep.semanticNode);    for (int i=0; i < goalIdents.length; i++) {      prevDeclared.add(getCurrentName(goalIdents[i],this.state.renaming));    }  }}  }
class C{  public final Object[] retreiveArguments(){  return _inputArgs.clone();}  }
class C{  @Override public void increment(double coord,long val){  int bin=getBinNr(coord);  if (bin < 0) {    if (size - bin > data.length) {      long[] tmpdata=new long[growSize(data.length,size - bin)];      System.arraycopy(data,0,tmpdata,-bin,size);      data=tmpdata;    } else {      System.arraycopy(data,0,data,-bin,size);      Arrays.fill(data,0,-bin,(long)0);    }    data[0]=val;    assert (data.length >= size - bin);    offset-=bin;    size-=bin;  } else   if (bin >= data.length) {    long[] tmpdata=new long[growSize(data.length,bin + 1)];    System.arraycopy(data,0,tmpdata,0,size);    tmpdata[bin]=val;    data=tmpdata;    size=bin + 1;    max=Double.MAX_VALUE;  } else {    if (bin >= size) {      size=bin + 1;    }    data[bin]+=val;  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:15.536 -0500",hash_original_method="C2F63B53807D79A96FCD6544A2D6E3D6",hash_generated_method="037E561A4D8893183D46362A102CCF13") @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof InterfaceAddress)) {    return false;  }  InterfaceAddress rhs=(InterfaceAddress)obj;  return ((address == null) ? rhs.address == null : address.equals(rhs.address)) && (rhs.prefixLength == prefixLength) && ((broadcastAddress == null) ? rhs.broadcastAddress == null : broadcastAddress.equals(rhs.broadcastAddress));}  }
class C{  public void stop(){  if (httpClient != null) {    try {      httpClient.close();    } catch (    IOException ignore) {    }  }}  }
class C{  public IllegalThreadStateException(java.lang.String s){  super(s);}  }
class C{  protected BCSSServiceProvider createBCSSServiceProvider(Class sc,BeanContextServiceProvider bcsp){  return new BCSSServiceProvider(sc,bcsp);}  }
class C{  public boolean shouldAllowNavigation(String url){  for (  PluginEntry entry : this.entryMap.values()) {    CordovaPlugin plugin=pluginMap.get(entry.service);    if (plugin != null) {      Boolean result=plugin.shouldAllowNavigation(url);      if (result != null) {        return result;      }    }  }  return url.startsWith("file://") || url.startsWith("about:blank");}  }
class C{  public void delete(Key key){  if (key == null)   throw new NullPointerException("argument to delete() is null");  root=delete(root,key);  assert check();}  }
class C{  public void endLegAndComputeNextState(double now){  state=State.ACTIVITY;}  }
class C{  public ContactId readContactId(String key){  ContactId value=(ContactId)mCache.get(key);  if (value == null && !mCache.containsKey(key)) {    String dbValue=readParameter(key);    if (dbValue != null) {      value=ContactUtil.createContactIdFromTrustedData(dbValue);    }    mCache.put(key,value);  }  return value;}  }
class C{  public void testBug21267() throws Exception {  createTable("bug21267","(`Col1` int(11) NOT NULL,`Col2` varchar(45) default NULL,`Col3` varchar(45) default NULL,PRIMARY KEY  (`Col1`))");  this.pstmt=this.conn.prepareStatement("SELECT Col1, Col2,Col4 FROM bug21267 WHERE Col1=?");  this.pstmt.setInt(1,1);  java.sql.ParameterMetaData psMeta=this.pstmt.getParameterMetaData();  try {    assertEquals(0,psMeta.getParameterType(1));  } catch (  SQLException sqlEx) {    assertEquals(SQLError.SQL_STATE_DRIVER_NOT_CAPABLE,sqlEx.getSQLState());  }  this.pstmt.close();  Properties props=new Properties();  props.setProperty("generateSimpleParameterMetadata","true");  this.pstmt=getConnectionWithProps(props).prepareStatement("SELECT Col1, Col2,Col4 FROM bug21267 WHERE Col1=?");  psMeta=this.pstmt.getParameterMetaData();  assertEquals(Types.VARCHAR,psMeta.getParameterType(1));}  }
class C{  public static void begin(){  Log.writeln("<xml-begin/> <!-- Everything until xml-end is now valid xml -->");}  }
class C{  public Vector3f normalizeLocal(){  float length=x * x + y * y + z * z;  if (length != 1f && length != 0f) {    length=1.0f / FastMath.sqrt(length);    x*=length;    y*=length;    z*=length;  }  return this;}  }
class C{  public void start() throws TomcatException {  if (cat == null)   init();  cat.start();}  }
class C{  public RegressionModelEvaluation(Regressor regressor,RegressionDataSet dataSet){  this(regressor,dataSet,null);}  }
class C{  public Set<RawProtein<PantherRawMatch>> process(Set<RawProtein<PantherRawMatch>> rawProteins){  LOGGER.info("Filtering PANTHER raw matches...");  Set<RawProtein<PantherRawMatch>> filteredMatches=new HashSet<>();  int rawMatchCounter=0;  int filteredMatchesCounter=0;  for (  RawProtein<PantherRawMatch> rawProtein : rawProteins) {    rawMatchCounter+=rawProtein.getMatches().size();    RawProtein<PantherRawMatch> filtered=processProtein(rawProtein);    filteredMatchesCounter+=filtered.getMatches().size();    filteredMatches.add(filtered);  }  if (LOGGER.isInfoEnabled()) {    LOGGER.info("Finished filtering of PANTHER raw matches. Printing out Summary...");    LOGGER.info("Original number of raw matches: " + rawMatchCounter);    LOGGER.info("Number of discarded raw matches: " + (rawMatchCounter - filteredMatchesCounter));  }  return filteredMatches;}  }
class C{  public List<List<String>> computeSelectedPaths(){  List<List<String>> selectedPaths=new ArrayList<>();  for (int i=0, n=selectedNodes.size(); i < n; i++) {    D nodeData=selectedNodes.get(i);    selectedPaths.add(dataAdapter.getNodePath(nodeData));  }  return selectedPaths;}  }
class C{  public boolean isDebugEnabled(){  return (getLogger().isLoggable(Level.FINE));}  }
class C{  public void clear(){  queueSize=0;  chunk=null;  endOfStream=false;}  }
class C{  public boolean hasAlphaChangedFrom(float v){  return (Float.compare(alpha,v) != 0);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case GamlPackage.ACTION_REF__REF:    if (resolve)     return getRef();  return basicGetRef();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private void readDataBlockHeader(String tokenToLookFor,NexusBlock block) throws ImportException, IOException {  boolean dim=false, ttl=false, fmt=false;  String token;  do {    token=readToken();    if (token.equalsIgnoreCase("TITLE")) {      if (ttl) {        throw new DuplicateFieldException("TITLE");      }      ttl=true;    } else     if (token.equalsIgnoreCase("DIMENSIONS")) {      if (dim) {        throw new DuplicateFieldException("DIMENSIONS");      }      boolean nchar=(block == TAXA_BLOCK);      boolean ntax=(block == CHARACTERS_BLOCK);      do {        String token2=readToken("=;");        if (getLastDelimiter() != '=') {          throw new BadFormatException("Unknown subcommand, '" + token2 + "', or missing '=' in DIMENSIONS command");        }        if (token2.equalsIgnoreCase("NTAX")) {          if (block == CHARACTERS_BLOCK) {            throw new BadFormatException("NTAX subcommand in CHARACTERS block");          }          taxonCount=readInteger(";");          ntax=true;        } else         if (token2.equalsIgnoreCase("NCHAR")) {          if (block == TAXA_BLOCK) {            throw new BadFormatException("NCHAR subcommand in TAXA block");          }          siteCount=readInteger(";");          nchar=true;        } else {          throw new BadFormatException("Unknown subcommand, '" + token2 + "', in DIMENSIONS command");        }      } while (getLastDelimiter() != ';');      if (!ntax) {        throw new BadFormatException("NTAX subcommand missing from DIMENSIONS command");      }      if (!nchar) {        throw new BadFormatException("NCHAR subcommand missing from DIMENSIONS command");      }      dim=true;    } else     if (token.equalsIgnoreCase("FORMAT")) {      if (fmt) {        throw new DuplicateFieldException("FORMAT");      }      dataType=null;      do {        String token2=readToken("=;");        if (token2.equalsIgnoreCase("GAP")) {          if (getLastDelimiter() != '=') {            throw new BadFormatException("Expecting '=' after GAP subcommand in FORMAT command");          }          gapCharacters=readToken(";");        } else         if (token2.equalsIgnoreCase("MISSING")) {          if (getLastDelimiter() != '=') {            throw new BadFormatException("Expecting '=' after MISSING subcommand in FORMAT command");          }          missingCharacters=readToken(";");        } else         if (token2.equalsIgnoreCase("MATCHCHAR")) {          if (getLastDelimiter() != '=') {            throw new BadFormatException("Expecting '=' after MATCHCHAR subcommand in FORMAT command");          }          matchCharacters=readToken(";");        } else         if (token2.equalsIgnoreCase("DATATYPE")) {          if (getLastDelimiter() != '=') {            throw new BadFormatException("Expecting '=' after DATATYPE subcommand in FORMAT command");          }          String token3=readToken(";");          if (token3.equalsIgnoreCase("NUCLEOTIDE") || token3.equalsIgnoreCase("DNA") || token3.equalsIgnoreCase("RNA")) {            dataType=Nucleotides.INSTANCE;          } else           if (token3.equalsIgnoreCase("STANDARD") || token3.equalsIgnoreCase("BINARY")) {            dataType=TwoStates.INSTANCE;          } else           if (token3.equalsIgnoreCase("PROTEIN")) {            dataType=AminoAcids.INSTANCE;          } else           if (token3.equalsIgnoreCase("CONTINUOUS")) {            throw new UnparsableDataException("Continuous data cannot be parsed at present");          }        } else         if (token2.equalsIgnoreCase("INTERLEAVE")) {          isInterleaved=true;        }      } while (getLastDelimiter() != ';');      fmt=true;    }  } while (!token.equalsIgnoreCase(tokenToLookFor));  if (!dim) {    throw new MissingFieldException("DIMENSIONS");  }  if (block != TAXA_BLOCK && dataType == null) {    throw new MissingFieldException("DATATYPE");  }}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (semUpdater == null) {    throw new NullPointerException();  }}  }
class C{  public static void load(Class<?> parent,ClassLoader cl){  try {    String fullName=RESOURCE_PREFIX + parent.getName();    Enumeration<URL> configfiles=cl.getResources(fullName);    while (configfiles.hasMoreElements()) {      URL nextElement=configfiles.nextElement();      char[] buf=new char[0x4000];      try (InputStreamReader is=new InputStreamReader(nextElement.openStream(),"UTF-8")){        int start=0, cur=0, valid=is.read(buf,0,buf.length);        char c;        while (cur < valid) {          while (cur < valid && (c=buf[cur]) != '\n' && c != '\r') {            cur++;          }          if (cur == valid && is.ready()) {            if (start > 0) {              System.arraycopy(buf,start,buf,0,valid - start);              valid-=start;              cur-=start;              start=0;            } else             if (valid == buf.length) {              throw new IOException("Buffer size exceeded. Maximum line length in service files is: " + buf.length + " in file: "+ fullName);            }            valid=is.read(buf,valid,buf.length - valid);            continue;          }          parseLine(parent,buf,start,cur,nextElement);          while (cur < valid && ((c=buf[cur]) == '\n' || c == '\r')) {            cur++;          }          start=cur;        }      } catch (      IOException x) {        throw new AbortException("Error reading configuration file",x);      }    }  } catch (  IOException x) {    throw new AbortException("Could not load service configuration files.",x);  }}  }
class C{  public void hide(Animation anim){  hide(true,anim);}  }
class C{  public void pushContext(){  int max=contexts.length;  contexts[contextPos].declsOK=false;  contextPos++;  if (contextPos >= max) {    Context newContexts[]=new Context[max * 2];    System.arraycopy(contexts,0,newContexts,0,max);    max*=2;    contexts=newContexts;  }  currentContext=contexts[contextPos];  if (currentContext == null) {    contexts[contextPos]=currentContext=new Context();  }  if (contextPos > 0) {    currentContext.setParent(contexts[contextPos - 1]);  }}  }
class C{  public static void checkIfDirectoriesExist(File[] diskDirs){  for (int i=0; i < diskDirs.length; i++) {    if (!diskDirs[i].isDirectory()) {      if (!diskDirs[i].mkdirs()) {        throw new GemFireIOException(LocalizedStrings.AttributesFactory_UNABLE_TO_CREATE_DISK_STORE_DIRECTORY_0.toLocalizedString(diskDirs[i]));      }    }  }}  }
class C{  protected void printSpecials(String text){  TreeMap<Integer,Integer> ranges=new TreeMap<>();  HashMap<Integer,MutableAttributeSet> rangesStyle=new HashMap<>();  findLinks(text,ranges,rangesStyle);  findSrl(text,ranges,rangesStyle);  int lastPrintedPos=0;  Iterator<Map.Entry<Integer,Integer>> rangesIt=ranges.entrySet().iterator();  while (rangesIt.hasNext()) {    Map.Entry<Integer,Integer> range=rangesIt.next();    int start=range.getKey();    int end=range.getValue();    if (start > lastPrintedPos) {      print(text.substring(lastPrintedPos,start),null);    }    print(text.substring(start,end + 1),rangesStyle.get(start));    lastPrintedPos=end + 1;  }  if (lastPrintedPos < text.length()) {    print(text.substring(lastPrintedPos),null);  }}  }
class C{  Object readObject() throws IOException {  int ch=read();switch (ch) {case 0x00:case 0x01:case 0x02:case 0x03:case 0x04:case 0x05:case 0x06:case 0x07:case 0x08:case 0x09:case 0x0a:case 0x0b:case 0x0c:case 0x0d:case 0x0e:case 0x0f:case 0x10:case 0x11:case 0x12:case 0x13:case 0x14:case 0x15:case 0x16:case 0x17:case 0x18:case 0x19:case 0x1a:case 0x1b:case 0x1c:case 0x1d:case 0x1e:case 0x1f:    return readString(ch - 0x00);case 0x20:case 0x21:case 0x22:case 0x23:case 0x24:case 0x25:case 0x26:case 0x27:case 0x28:case 0x29:case 0x2a:case 0x2b:case 0x2c:case 0x2d:case 0x2e:case 0x2f:  return readBinary(ch - 0x20);case 0x30:case 0x31:case 0x32:case 0x33:return readString(((ch - 0x30) << 8) + read());case 0x34:case 0x35:case 0x36:case 0x37:return readBinary(((ch - 0x34) << 8) + read());case 0x3c:case 0x3d:case 0x3e:case 0x3f:return new Long(((ch - 0x3c) << 16) + (read() << 8) + read());case 0x41:_peek=ch;return readBinary();case 0x42:{int len=readShort();return readBinary(len);}case 0x43:scanObjectDef();return readObject();case 0x44:{long value=readLong();return Double.longBitsToDouble(value);}case 'E':throw new UnsupportedOperationException("Invalid Hessian 'E' error code.");case 0x46:return Boolean.FALSE;case 0x47:{int type=scanInt();return readObject();}case 0x48:{HashMap<Object,Object> map=new HashMap<>();while ((ch=read()) != 'Z') {_peek=ch;map.put(readObject(),readObject());}return map;}case 0x49:{int value=readInt32();return new Integer(value);}case 0x4a:return new Date(readLong());case 0x4b:return new Date(readInt32() * 1000L);case 0x4c:{long value=readLong();return new Long(value);}case 0x4d:{HashMap<Object,Object> map=new HashMap<>();readType();while ((ch=read()) != 'Z') {_peek=ch;map.put(readObject(),readObject());}return map;}case 0x4e:return null;case 0x4f:{int type=scanInt();String[] def=_classDefs.get(type);int len=def.length - 1;HashMap<Object,Object> map=new HashMap<>();for (int i=0; i < len; i++) {map.put(def[i],readObject());}return map;}case 0x50:{String type=readType();return readObject();}case 0x51:{int ref=readInt32();return null;}case 0x52:{int len=readShort();StringBuilder sb=new StringBuilder();readString(sb,len);readString(sb);return sb.toString();}case 0x53:{int len=readShort();return readString(len);}case 0x54:return Boolean.TRUE;case 0x55:{ArrayList<Object> list=new ArrayList<>();readType();while ((ch=read()) != 'Z') {_peek=ch;list.add(readObject());}return list;}case 0x56:{ArrayList<Object> list=new ArrayList<>();readType();int len=scanInt();for (int i=0; i < len; i++) {list.add(readObject());}return list;}case 0x57:{ArrayList<Object> list=new ArrayList<>();while ((ch=read()) != 'Z') {_peek=ch;list.add(readObject());}return list;}case 0x58:{ArrayList<Object> list=new ArrayList<>();int len=scanInt();for (int i=0; i < len; i++) {list.add(readObject());}return list;}case 0x59:{long value=readInt32();return new Long(value);}case 0x5b:return DOUBLE_ZERO;case 0x5c:return DOUBLE_ONE;case 0x5d:return new Double((byte)read());case 0x5e:return new Double((short)readShort());case 0x5f:return new Double(readInt32() * 0.001);case 0x60:case 0x61:case 0x62:case 0x63:case 0x64:case 0x65:case 0x66:case 0x67:case 0x68:case 0x69:case 0x6a:case 0x6b:case 0x6c:case 0x6d:case 0x6e:case 0x6f:{int type=ch - 0x60;String[] def=_classDefs.get(type);int len=def.length - 1;HashMap<Object,Object> map=new HashMap<>();for (int i=0; i < len; i++) {map.put(def[i],readObject());}return map;}case 0x70:case 0x71:case 0x72:case 0x73:case 0x74:case 0x75:case 0x76:case 0x77:{ArrayList<Object> list=new ArrayList<>();readType();int len=ch - 0x70;for (int i=0; i < len; i++) {list.add(readObject());}return list;}case 0x78:case 0x79:case 0x7a:case 0x7b:case 0x7c:case 0x7d:case 0x7e:case 0x7f:{ArrayList<Object> list=new ArrayList<>();int len=ch - 0x78;for (int i=0; i < len; i++) {list.add(readObject());}return list;}case 0x80:case 0x81:case 0x82:case 0x83:case 0x84:case 0x85:case 0x86:case 0x87:case 0x88:case 0x89:case 0x8a:case 0x8b:case 0x8c:case 0x8d:case 0x8e:case 0x8f:case 0x90:case 0x91:case 0x92:case 0x93:case 0x94:case 0x95:case 0x96:case 0x97:case 0x98:case 0x99:case 0x9a:case 0x9b:case 0x9c:case 0x9d:case 0x9e:case 0x9f:case 0xa0:case 0xa1:case 0xa2:case 0xa3:case 0xa4:case 0xa5:case 0xa6:case 0xa7:case 0xa8:case 0xa9:case 0xaa:case 0xab:case 0xac:case 0xad:case 0xae:case 0xaf:case 0xb0:case 0xb1:case 0xb2:case 0xb3:case 0xb4:case 0xb5:case 0xb6:case 0xb7:case 0xb8:case 0xb9:case 0xba:case 0xbb:case 0xbc:case 0xbd:case 0xbe:case 0xbf:return new Integer(ch - 0x90);case 0xc0:case 0xc1:case 0xc2:case 0xc3:case 0xc4:case 0xc5:case 0xc6:case 0xc7:case 0xc8:case 0xc9:case 0xca:case 0xcb:case 0xcc:case 0xcd:case 0xce:case 0xcf:return new Integer(((ch - 0xc8) << 8) + read());case 0xd0:case 0xd1:case 0xd2:case 0xd3:case 0xd4:case 0xd5:case 0xd6:case 0xd7:return new Integer(((ch - 0xd4) << 16) + (read() << 8) + read());case 0xd8:case 0xd9:case 0xda:case 0xdb:case 0xdc:case 0xdd:case 0xde:case 0xdf:case 0xe0:case 0xe1:case 0xe2:case 0xe3:case 0xe4:case 0xe5:case 0xe6:case 0xe7:case 0xe8:case 0xe9:case 0xea:case 0xeb:case 0xec:case 0xed:case 0xee:case 0xef:return new Long(ch - 0xe0);case 0xf0:case 0xf1:case 0xf2:case 0xf3:case 0xf4:case 0xf5:case 0xf6:case 0xf7:case 0xf8:case 0xf9:case 0xfa:case 0xfb:case 0xfc:case 0xfd:case 0xfe:case 0xff:return new Long(((ch - 0xf8) << 8) + read());default :throw new UnsupportedOperationException("0x" + Integer.toHexString(ch));}}  }
class C{  private Object writeReplace(){  return new SynchronizedList<E>(list);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    double multiplier=Math.PI / 180;    if (inputFile.getZUnits().toLowerCase().contains("rad")) {      multiplier=1;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.cos(z * multiplier));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private int freeDeferrals(final long blockAddr,final long lastReleaseTime){  final int addr=(int)(blockAddr >> 32);  final int sze=(int)blockAddr & 0xFFFFFFFF;  if (log.isTraceEnabled())   log.trace("freeDeferrals at " + physicalAddress(addr) + ", size: "+ sze+ " releaseTime: "+ lastReleaseTime);  final byte[] buf=new byte[sze + 4];  getData(addr,buf);  final DataInputStream strBuf=new DataInputStream(new ByteArrayInputStream(buf));  m_allocationWriteLock.lock();  int totalFreed=0;  try {    int nxtAddr=strBuf.readInt();    int cnt=0;    while (nxtAddr != 0) {      if (nxtAddr > 0) {        final int bloblen=strBuf.readInt();        assert bloblen > 0;        immediateFree(-nxtAddr,bloblen);      } else {        immediateFree(nxtAddr,1);      }      totalFreed++;      nxtAddr=strBuf.readInt();    }    immediateFree(addr,sze);    m_lastDeferredReleaseTime=lastReleaseTime;    if (log.isTraceEnabled())     log.trace("Updated m_lastDeferredReleaseTime=" + m_lastDeferredReleaseTime);  } catch (  IOException e) {    throw new RuntimeException("Problem freeing deferrals",e);  } finally {    m_allocationWriteLock.unlock();  }  return totalFreed;}  }
class C{  public boolean checkExists(JobKey jobKey) throws SchedulerException {  try {    return getRemoteScheduler().checkExists(jobKey);  } catch (  RemoteException re) {    throw invalidateHandleCreateException("Error communicating with remote scheduler.",re);  }}  }
class C{  public void filterThrough(PduFilter filter) throws IOException {  Pdu pdu;  try {    pdu=source.read();  } catch (  EOFException eof) {    if (propagateEof) {      try {        sink.close();      } catch (      IOException e) {      }    }    throw eof;  }  Pdu filteredPdu=filter.filter(pdu);  if (filteredPdu != null) {    sink.write(filteredPdu);  }  ;}  }
class C{  public ODGGroupFigure(){  ODGAttributeKeys.setDefaults(this);}  }
class C{  public void validateBusinessObjectData(Integer expectedBusinessObjectDataId,String expectedNamespace,String expectedBusinessObjectDefinitionName,String expectedBusinessObjectFormatUsage,String expectedBusinessObjectFormatFileType,Integer expectedBusinessObjectFormatVersion,String expectedBusinessObjectDataPartitionValue,List<String> expectedBusinessObjectDataSubPartitionValues,Integer expectedBusinessObjectDataVersion,Boolean expectedLatestVersion,String expectedStatusCode,BusinessObjectData actualBusinessObjectData){  assertNotNull(actualBusinessObjectData);  if (expectedBusinessObjectDataId != null) {    assertEquals(expectedBusinessObjectDataId,Integer.valueOf(actualBusinessObjectData.getId()));  }  assertEquals(expectedNamespace,actualBusinessObjectData.getNamespace());  assertEquals(expectedBusinessObjectDefinitionName,actualBusinessObjectData.getBusinessObjectDefinitionName());  assertEquals(expectedBusinessObjectFormatUsage,actualBusinessObjectData.getBusinessObjectFormatUsage());  assertEquals(expectedBusinessObjectFormatFileType,actualBusinessObjectData.getBusinessObjectFormatFileType());  assertEquals(expectedBusinessObjectFormatVersion,Integer.valueOf(actualBusinessObjectData.getBusinessObjectFormatVersion()));  assertEquals(expectedBusinessObjectDataPartitionValue,actualBusinessObjectData.getPartitionValue());  assertEquals(expectedBusinessObjectDataSubPartitionValues,actualBusinessObjectData.getSubPartitionValues());  assertEquals(expectedBusinessObjectDataVersion,Integer.valueOf(actualBusinessObjectData.getVersion()));  assertEquals(expectedLatestVersion,actualBusinessObjectData.isLatestVersion());  assertEquals(expectedStatusCode,actualBusinessObjectData.getStatus());}  }
class C{  public final void yyreset(java.io.Reader reader) throws java.io.IOException {  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  public void applyShape(Region shape){}  }
class C{  public static FileChannel newFileChannel(Object stream,FileDescriptor fd,int mode){  return new FileChannelImpl(stream,fd,mode);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case ID:    return isSetId();case CREATE_TIME:  return isSetCreateTime();case UPDATE_TIME:return isSetUpdateTime();case OPERATION:return isSetOperation();case STATUS:return isSetStatus();case SRC_PATH:return isSetSrcPath();case SRC_CLUSTER:return isSetSrcCluster();case SRC_DB:return isSetSrcDb();case SRC_TABLE:return isSetSrcTable();case SRC_PARTITIONS:return isSetSrcPartitions();case SRC_MODIFIED_TIME:return isSetSrcModifiedTime();case RENAME_TO_DB:return isSetRenameToDb();case RENAME_TO_TABLE:return isSetRenameToTable();case RENAME_TO_PATH:return isSetRenameToPath();case EXTRAS:return isSetExtras();case WAITING_ON_JOBS:return isSetWaitingOnJobs();}throw new IllegalStateException();}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public static char highSurrogate(int c){  return (char)(((c - 0x00010000) >> 10) + 0xD800);}  }
class C{  public synchronized void startPreview(){  Camera theCamera=camera;  if (theCamera != null && !previewing) {    theCamera.startPreview();    previewing=true;    autoFocusManager=new AutoFocusManager(context,camera);  }}  }
class C{  public boolean isSameEntity(String failoverEntityID){  Validate.notEmpty(failoverEntityID,"Empty failover entityID");  boolean result=failoverEntityID.equals(this.getEntityID());  try {    if (!result && isUseSiteAffinityIfAvailable()) {      URL failover_URL=new URL(failoverEntityID);      String hostNameCandidate=failover_URL.getHost();      List<String> domainControllers=null;      try {        domainControllers=SiteAffinity.enumDCEntries();      } catch (      WebssoClientException e) {        logger.error("AFD siteaffinity is failing! WebSSO is not using siteaffinity for this request.");      }      if (domainControllers != null) {        if (domainControllers.contains(hostNameCandidate)) {          result=failoverEntityID.equals(updateHostNameInURL(this.getEntityID(),hostNameCandidate));        }      }    }  } catch (  MalformedURLException e) {    logger.error("The given entity ID is not in URL form. Compared to registered IDP node only. Failover entityID is " + failoverEntityID);  }  return result;}  }
class C{  public DefragHeadroom(){  super(Options.set,"Defrag Headroom","Allow the defragmenter this amount of headroom during defrag.",DEFAULT_DEFRAG_HEADROOM);}  }
class C{  public void endEntity(String name) throws org.xml.sax.SAXException {  if (name.equals("[dtd]"))   m_inExternalDTD=false;  m_inEntityRef=false;  if (m_tracer != null)   this.fireEndEntity(name);}  }
class C{  public String searchEstimateNumberForYearendAppr(){  CFinancialYear currentFinYear;  currentFinYear=financialYearHibernateDAO.getFinancialYearByDate(new Date());  String strquery="";  if (!StringUtils.isEmpty(query)) {    strquery="select ae.estimateNumber from AbstractEstimate ae where ae.projectCode.egwStatus.code!='CLOSED' and ae.depositCode is null and ae.egwStatus.code='ADMIN_SANCTIONED' and ae.estimateNumber like  '%'||?||'%'  " + "and NOT EXISTS (select 'true' from  AbstractEstimateAppropriation aea where aea.abstractEstimate.id=ae.id and aea.budgetUsage.releasedAmount=0 and aea.budgetUsage.financialYearId=?) " + "and NOT EXISTS (select 'true' from MBHeader as mbh left outer join mbh.egBillregister egbr where mbh.workOrderEstimate.estimate.id=ae.id"+ " and (egbr.billtype='Final Bill' and egbr.billstatus<>'CANCELLED'))"+ "  and NOT EXISTS (select 'true' from MultiyearEstimateApprDetail myea where myea.estimate.id=ae.id "+ "and myea.multiyearEstimateAppr.status.code<>'CANCELLED' and myea.multiyearEstimateAppr.financialYear.id=?)  ";    estimateNoList=getPersistenceService().findAllBy(strquery,query.toUpperCase(),Integer.valueOf(currentFinYear.getId().toString()),currentFinYear.getId());  }  return "estimateNumSearchResults";}  }
class C{  public RoundBorder shadowOpacity(int shadowOpacity){  this.shadowOpacity=shadowOpacity;  return this;}  }
class C{  void releaseWriteLock(){  this.rwLock.writeLock().unlock();}  }
class C{  public DefaultConfigurationCapabilityFactory(ClassLoader classLoader){  super();  AbstractFactoryRegistry.register(classLoader,this);}  }
class C{  public ParameterBlock(Vector<Object> sources,Vector<Object> parameters){  setSources(sources);  setParameters(parameters);}  }
class C{  static PublicKey toPublicKey(KEYBase r) throws DNSSECException {  int alg=r.getAlgorithm();  try {switch (alg) {case Algorithm.RSAMD5:case Algorithm.RSASHA1:case Algorithm.RSA_NSEC3_SHA1:case Algorithm.RSASHA256:case Algorithm.RSASHA512:      return toRSAPublicKey(r);case Algorithm.DSA:case Algorithm.DSA_NSEC3_SHA1:    return toDSAPublicKey(r);case Algorithm.ECDSAP256SHA256:  return toECDSAPublicKey(r,ECDSA_P256);case Algorithm.ECDSAP384SHA384:return toECDSAPublicKey(r,ECDSA_P384);default :throw new UnsupportedAlgorithmException(alg);}} catch (IOException e) {throw new MalformedKeyException(r);}catch (GeneralSecurityException e) {throw new DNSSECException(e.toString());}}  }
class C{  protected boolean isValid(){  return this.isValid;}  }
class C{  @Override public void destroyReceiveIO(){  try {    mIn.close();  } catch (  IOException e) {    e.printStackTrace();  } finally {    mIn=null;  }  mInBuffer=null;}  }
class C{  public void addPoint(int x1,int y1,int radius,LinkProperties properties) throws IOException {  LinkPoint.write(x1,y1,radius,properties,link.dos);}  }
class C{  private void writeDataToDestination(State state,byte[] data,int bytesRead) throws StopRequest {  for (; ; ) {    try {      if (state.mStream == null) {        state.mStream=new FileOutputStream(state.mFilename,true);      }      state.mStream.write(data,0,bytesRead);      closeDestination(state);      return;    } catch (    IOException ex) {      if (!Helpers.isExternalMediaMounted()) {        throw new StopRequest(DownloaderService.STATUS_DEVICE_NOT_FOUND_ERROR,"external media not mounted while writing destination file");      }      long availableBytes=Helpers.getAvailableBytes(Helpers.getFilesystemRoot(state.mFilename));      if (availableBytes < bytesRead) {        throw new StopRequest(DownloaderService.STATUS_INSUFFICIENT_SPACE_ERROR,"insufficient space while writing destination file",ex);      }      throw new StopRequest(DownloaderService.STATUS_FILE_ERROR,"while writing destination file: " + ex.toString(),ex);    }  }}  }
class C{  protected boolean checkHighTierGraph(StructuredGraph graph){  return true;}  }
class C{  public static void dragViewToBottom(InstrumentationTestCase test,Activity activity,View v,int stepCount){  int screenHeight=activity.getWindowManager().getDefaultDisplay().getHeight();  int[] xy=new int[2];  v.getLocationOnScreen(xy);  final int viewWidth=v.getWidth();  final int viewHeight=v.getHeight();  final float x=xy[0] + (viewWidth / 2.0f);  float fromY=xy[1] + (viewHeight / 2.0f);  float toY=screenHeight - 1;  drag(test,x,x,fromY,toY,stepCount);}  }
class C{  public static TDoubleDoubleHashMap normalizeCumulative(TDoubleDoubleHashMap histogram){  return normalizeCumulative(histogram,1.0);}  }
class C{  public boolean isFunctionAllowed(Name name){  return functionsAllowed.contains(name);}  }
class C{  public boolean contains(String pattern){  if (TextUtils.isEmpty(pattern)) {    return false;  }  boolean matched=false;  if (!TextUtils.isEmpty(mDisplayName)) {    matched=(mDisplayName.toLowerCase().contains(pattern));  }  if (!matched) {    for (    String email : mEmails) {      matched|=email.toLowerCase().contains(pattern);    }  }  return matched;}  }
class C{  public static void main(String args[]){  System.out.println("*************************************************");  System.out.println("** JIProlog Standalone Interpreter v" + VERSION);  System.out.println("** Based on JIProlog v" + JIPEngine.getVersion());  System.out.println("** " + JIPEngine.getCopyrightInfo());  System.out.println("** http://www.jiprolog.com");  System.out.println("*************************************************\n\n");  try {    processArgs(args);    System.out.println("\n\n***************************************************");    System.out.println("** Thanks for using JIProlog                     **");    System.out.println("***************************************************");  } catch (  IOException ex) {    showMessage(ex.getMessage());  }catch (  JIPSyntaxErrorException ex) {    showMessage(ex.getMessage());  }catch (  JIPRuntimeException ex) {    showMessage(ex.getMessage());  }}  }
class C{  public static Test suite(){  return (new TestSuite(ParseXMLTestCase.class));}  }
class C{  public String toHtmlTable(HttpServletRequest request,SessionContext context,Collection distPrefs,boolean addButton){  String title=MSG.sectionTitleDistributionPreferences();  String backType=request.getParameter("backType");  String backId=request.getParameter("backId");  String instructorFormat=UserProperty.NameFormat.get(context.getUser());  if (addButton && context.hasPermission(Right.DistributionPreferenceAdd)) {    title="<table width='100%'><tr><td width='100%'>" + "<DIV class=\"WelcomeRowHeadNoLine\">" + MSG.sectionTitleDistributionPreferences() + "</DIV>"+ "</td><td style='padding-bottom: 2px'>"+ "<input type=\"submit\" name=\"op\" class=\"btn\" accesskey=\""+ MSG.accessAddDistributionPreference()+ "\" "+ "title=\""+ MSG.titleAddDistributionPreference(MSG.accessAddDistributionPreference())+ "\" "+ "value=\""+ MSG.actionAddDistributionPreference()+ "\">"+ "</td></tr></table>";  }  WebTable.setOrder(context,"distPrefsTable.ord",request.getParameter("order"),4);  WebTable tbl=new WebTable(4,title,"distributionPrefs.do?order=%%",new String[]{MSG.columnDistrPrefType(),MSG.columnDistrPrefStructure(),MSG.columnDistrPrefOwner(),MSG.columnDistrPrefClass()},new String[]{"left","left","left","left"},new boolean[]{true,true,true,true});  int nrPrefs=0;  boolean suffix=ApplicationProperty.DistributionsShowClassSufix.isTrue();  for (Iterator i1=distPrefs.iterator(); i1.hasNext(); ) {    DistributionPref dp=(DistributionPref)i1.next();    if (!context.hasPermission(dp,Right.DistributionPreferenceDetail))     continue;    nrPrefs++;    String objStr="";    PreferenceGroup pg=dp.getOwner();    String ownerType="Unknown";    if (pg instanceof Department) {      Department d=(Department)pg;      ownerType=d.getManagingDeptAbbv();    }    for (Iterator i2=dp.getOrderedSetOfDistributionObjects().iterator(); i2.hasNext(); ) {      DistributionObject dO=(DistributionObject)i2.next();      objStr+=dO.preferenceText(suffix);      if (i2.hasNext())       objStr+="<BR>";    }    String groupingText=dp.getStructureName();    Comparable groupingCmp=(dp.getGrouping() == null ? "0" : dp.getGrouping().toString());    if (pg instanceof DepartmentalInstructor) {      DepartmentalInstructor instructor=(DepartmentalInstructor)pg;      Set<Department> owners=new TreeSet<Department>();      TreeSet classes=new TreeSet(new ClassInstructorComparator(new ClassComparator(ClassComparator.COMPARE_BY_HIERARCHY)));      classes.addAll(instructor.getClasses());      for (Iterator i2=classes.iterator(); i2.hasNext(); ) {        ClassInstructor clazz=(ClassInstructor)i2.next();        if (!clazz.isLead().booleanValue())         continue;        if (objStr.length() > 0)         objStr+="<BR>";        objStr+=clazz.getClassInstructing().getClassLabel(suffix);        Department dept=clazz.getClassInstructing().getManagingDept();        if (dept.isInheritInstructorPreferences())         owners.add(dept);      }      ownerType="";      for (      Department owner : owners)       ownerType+=(ownerType.isEmpty() ? "" : "<br>") + owner.getManagingDeptAbbv();      groupingText=MSG.columnInstructor() + " " + instructor.getName(instructorFormat);      groupingCmp=instructor.getName(instructorFormat);      if (owners.isEmpty())       continue;    }    String distType=dp.getDistributionType().getLabel();    String prefLevel=dp.getPrefLevel().getPrefName();    String prefColor=dp.getPrefLevel().prefcolor();    if (PreferenceLevel.sNeutral.equals(dp.getPrefLevel().getPrefProlog()))     prefColor="gray";    String onClick=null;    boolean gray=false;    if (pg instanceof DepartmentalInstructor) {      if (context.hasPermission(pg,Right.InstructorDetail))       onClick="onClick=\"document.location='instructorDetail.do" + "?instructorId=" + dp.getOwner().getUniqueId().toString() + "&op=Show%20Instructor%20Preferences'\"";    } else {      if (context.hasPermission(dp,Right.DistributionPreferenceEdit))       onClick="onClick=\"document.location='distributionPrefs.do" + "?dp=" + dp.getUniqueId().toString() + "&op=view'\"";    }    boolean back="PreferenceGroup".equals(backType) && dp.getUniqueId().toString().equals(backId);    tbl.addLine(onClick,new String[]{(back ? "<A name=\"back\"</A>" : "") + (gray ? "<span style='color:gray;'>" : "<span style='color:" + prefColor + ";font-weight:bold;' title='"+ prefLevel+ " "+ distType+ "'>") + distType+ "</span>",(gray ? "<span style='color:gray;'>" : "") + groupingText + (gray ? "</span>" : ""),(gray ? "<span style='color:gray;'>" : "") + ownerType + (gray ? "</span>" : ""),(gray ? "<span style='color:gray;'>" : "") + objStr + (gray ? "</span>" : "")},new Comparable[]{distType,groupingCmp,ownerType,objStr});  }  if (nrPrefs == 0)   tbl.addLine(null,new String[]{MSG.noPreferencesFound(),"","",""},null);  return tbl.printTable(WebTable.getOrder(context,"distPrefsTable.ord"));}  }
class C{  public GitHubPullRequest createPullRequest(GHPullRequest ghPullRequest) throws IOException {  GitHubPullRequest dtoPullRequest=DtoFactory.getInstance().createDto(GitHubPullRequest.class);  dtoPullRequest.setId(String.valueOf(ghPullRequest.getId()));  dtoPullRequest.setUrl(String.valueOf(ghPullRequest.getUrl()));  dtoPullRequest.setHtmlUrl(String.valueOf(ghPullRequest.getHtmlUrl()));  dtoPullRequest.setNumber(String.valueOf(ghPullRequest.getNumber()));  dtoPullRequest.setState(ghPullRequest.getState().toString());  dtoPullRequest.setHead(createPullRequestHead(ghPullRequest.getHead()));  dtoPullRequest.setMerged(ghPullRequest.isMerged());  if (ghPullRequest.getMergedBy() != null) {    dtoPullRequest.setMergedBy(createUser(ghPullRequest.getMergedBy()));  }  if (ghPullRequest.getMergeable() != null) {    dtoPullRequest.setMergeable(ghPullRequest.getMergeable());  }  return dtoPullRequest;}  }
class C{  private void logSlowRequests(long requestLifetime,Request<?> request,byte[] responseContents,StatusLine statusLine){  if (DEBUG || requestLifetime > SLOW_REQUEST_THRESHOLD_MS) {    VolleyLog.d("HTTP response for request=<%s> [lifetime=%d], [size=%s], " + "[rc=%d], [retryCount=%s]",request,requestLifetime,responseContents != null ? responseContents.length : "null",statusLine.getStatusCode(),request.getRetryPolicy().getCurrentRetryCount());  }}  }
class C{  public void clear(){  for (int i=objs.length; --i >= 0; ) {    objs[i]=null;  }  num_bindings=0;}  }
class C{  public URLRasterLocation(int x,int y,String name,URL iconURL){  super(x,y,name,getIconRaster(x,y,iconURL));  if (location instanceof OMRaster) {    setHorizontalLabelBuffer((((OMRaster)location).getWidth() / 2) + SPACING);  }}  }
class C{  protected SimpleTypeReferenceImpl(){  super();}  }
class C{  public boolean canCorrectHardwareClock(){  if (DEBUG_SHOW_PUBLIC_CALLS && log.isDebugEnabled()) {    log.debug("getHardwareClockName");  }  return false;}  }
class C{  public boolean isAllGraphs(){  return allGraphs;}  }
class C{  @Override public void resumeSingleVolumeMirror(StorageSystem storage,URI mirror,TaskCompleter taskCompleter) throws DeviceControllerException {  log.info("resumeSingleVolumeMirror started");  try {    BlockMirror mirrorObj=dbClient.queryObject(BlockMirror.class,mirror);    Volume sourceVolume=dbClient.queryObject(Volume.class,mirrorObj.getSource());    hdsProtectionOperations.modifyShadowImagePair(storage,sourceVolume.getNativeId(),mirrorObj.getNativeId(),HDSApiProtectionManager.ShadowImageOperationType.resync);    HDSJob syncjob=new HDSReplicationSyncJob(storage.getId(),sourceVolume.getNativeId(),mirrorObj.getNativeId(),ReplicationStatus.PAIR,taskCompleter);    hdsCommandHelper.waitForAsyncHDSJob(syncjob);    mirrorObj.setSyncState(SynchronizationState.SYNCHRONIZED.name());    dbClient.persistObject(mirrorObj);    taskCompleter.ready(dbClient);  } catch (  Exception e) {    log.error("Failed to resume single volume mirror: {}",mirror,e);    ServiceError serviceError=DeviceControllerException.errors.jobFailed(e);    taskCompleter.error(dbClient,serviceError);  }  log.info("resumeSingleVolumeMirror completed");}  }
class C{  @Override public void init(NamedList args){}  }
class C{  public void validate(Object source) throws Exception {  if (validate != null) {    validate.call(context,source);  }}  }
class C{  private void sendReplicationNotification(InetAddress remote){  MessageOut msg=new MessageOut(MessagingService.Verb.REPLICATION_FINISHED);  IFailureDetector failureDetector=FailureDetector.instance;  if (logger.isDebugEnabled())   logger.debug("Notifying {} of replication completion\n",remote);  while (failureDetector.isAlive(remote)) {    AsyncOneResponse iar=MessagingService.instance().sendRR(msg,remote);    try {      iar.get(DatabaseDescriptor.getRpcTimeout(),TimeUnit.MILLISECONDS);      return;    } catch (    TimeoutException e) {    }  }}  }
class C{  public void removeRegionOfInterest(GliderRegionOfInterest region){  if (region == null) {    String message=Logging.getMessage("nullValue.RegionIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  region.removePropertyChangeListener(this.regionListener);  if (this.regionTable.remove(region))   this.firePropertyChange(GLIDER_REGIONS_OF_INTEREST,null,this.getRegionsOfInterest());}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="VO_VOLATILE_INCREMENT",justification="Method itself is synchronized to protect numNodes") public synchronized void deleteNode(int nodeAddress){  int index=0;  for (int i=0; i < numNodes; i++) {    if (nodeArray[i].getNodeAddress() == nodeAddress) {      index=i;    }  }  if (index == curSerialNodeIndex) {    log.warn("Deleting the serial node active in the polling loop");  }  numNodes--;  if (index < numNodes) {    for (int j=index; j < numNodes; j++) {      nodeArray[j]=nodeArray[j + 1];    }  }  nodeArray[numNodes]=null;}  }
class C{  private boolean greater(Key n,Key m){  if (n == null)   return false;  if (m == null)   return true;  return comp.compare(n,m) > 0;}  }
class C{  public static Tuple min(Iterator tuples,String field,Comparator cmp){  Tuple t=null, tmp;  Object min=null;  if (tuples.hasNext()) {    t=(Tuple)tuples.next();    min=t.get(field);  }  while (tuples.hasNext()) {    tmp=(Tuple)tuples.next();    Object obj=tmp.get(field);    if (cmp.compare(obj,min) < 0) {      t=tmp;      min=obj;    }  }  return t;}  }
class C{  public ContentLengthInputStream(InputStream in,long contentLength){  super();  this.wrappedStream=in;  this.contentLength=contentLength;}  }
class C{  public Multiplicity_ createMultiplicity_(){  Multiplicity_Impl multiplicity_=new Multiplicity_Impl();  return multiplicity_;}  }
class C{  public JseProcess(String cmd,InputStream stdin,OutputStream stdout,OutputStream stderr) throws IOException {  this(Runtime.getRuntime().exec(cmd),stdin,stdout,stderr);}  }
class C{  @Override void verifyCert(X509Certificate cert,State currentState,List<X509Certificate> certPathList) throws GeneralSecurityException {  if (debug != null) {    debug.println("ForwardBuilder.verifyCert(SN: " + Debug.toHexString(cert.getSerialNumber()) + "\n  Issuer: "+ cert.getIssuerX500Principal()+ ")"+ "\n  Subject: "+ cert.getSubjectX500Principal()+ ")");  }  ForwardState currState=(ForwardState)currentState;  currState.untrustedChecker.check(cert,Collections.<String>emptySet());  if (certPathList != null) {    for (    X509Certificate cpListCert : certPathList) {      if (cert.equals(cpListCert)) {        if (debug != null) {          debug.println("loop detected!!");        }        throw new CertPathValidatorException("loop detected");      }    }  }  boolean isTrustedCert=trustedCerts.contains(cert);  if (!isTrustedCert) {    Set<String> unresCritExts=cert.getCriticalExtensionOIDs();    if (unresCritExts == null) {      unresCritExts=Collections.<String>emptySet();    }    for (    PKIXCertPathChecker checker : currState.forwardCheckers) {      checker.check(cert,unresCritExts);    }    for (    PKIXCertPathChecker checker : buildParams.certPathCheckers()) {      if (!checker.isForwardCheckingSupported()) {        Set<String> supportedExts=checker.getSupportedExtensions();        if (supportedExts != null) {          unresCritExts.removeAll(supportedExts);        }      }    }    if (!unresCritExts.isEmpty()) {      unresCritExts.remove(BasicConstraints_Id.toString());      unresCritExts.remove(NameConstraints_Id.toString());      unresCritExts.remove(CertificatePolicies_Id.toString());      unresCritExts.remove(PolicyMappings_Id.toString());      unresCritExts.remove(PolicyConstraints_Id.toString());      unresCritExts.remove(InhibitAnyPolicy_Id.toString());      unresCritExts.remove(SubjectAlternativeName_Id.toString());      unresCritExts.remove(KeyUsage_Id.toString());      unresCritExts.remove(ExtendedKeyUsage_Id.toString());      if (!unresCritExts.isEmpty())       throw new CertPathValidatorException("Unrecognized critical extension(s)",null,null,-1,PKIXReason.UNRECOGNIZED_CRIT_EXT);    }  }  if (currState.isInitial()) {    return;  }  if (!isTrustedCert) {    if (cert.getBasicConstraints() == -1) {      throw new CertificateException("cert is NOT a CA cert");    }    KeyChecker.verifyCAKeyUsage(cert);  }  if (!currState.keyParamsNeeded()) {    (currState.cert).verify(cert.getPublicKey(),buildParams.sigProvider());  }}  }
class C{  public void testFloatValuePosNotRounded(){  byte[] a={-128,1,2,3,4,5,60,23,1,-3,-5};  int aSign=1;  float result=1.5474726E26f;  float aNumber=new BigInteger(aSign,a).floatValue();  assertTrue(aNumber == result);}  }
class C{  public static int codePointAt(char[] seq,int index){  if (seq == null) {    throw new NullPointerException();  }  int len=seq.length;  if (index < 0 || index >= len) {    throw new IndexOutOfBoundsException();  }  char high=seq[index++];  if (index >= len) {    return high;  }  char low=seq[index];  if (isSurrogatePair(high,low)) {    return toCodePoint(high,low);  }  return high;}  }
class C{  public static File convertURLToFile(URL url){  if (url == null) {    String message=Logging.getMessage("nullValue.URLIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  try {    return new File(url.toURI());  } catch (  IllegalArgumentException e) {    return null;  }catch (  URISyntaxException e) {    return null;  }}  }
class C{  @SuppressWarnings("unchecked") public Matsim4UrbansimConfigType unmarshal(String matsimConfigFile){  Matsim4UrbansimConfigType m4uConfigType=null;  log.info("Unmaschalling MATSim configuration from: " + matsimConfigFile);  log.info("...");  try {    JAXBContext jaxbContext=JAXBContext.newInstance(ObjectFactory.class);    Unmarshaller unmarschaller=jaxbContext.createUnmarshaller();    unmarschaller.setSchema(SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI).newSchema(getClass().getResource("/dtd/matsim4urbansim_v3.xsd")));    File inputFile=new File(matsimConfigFile);    isFileAvailable(matsimConfigFile,inputFile);    Object object=unmarschaller.unmarshal(inputFile);    if (object.getClass() == Matsim4UrbansimConfigType.class)     m4uConfigType=(Matsim4UrbansimConfigType)object; else     m4uConfigType=((JAXBElement<Matsim4UrbansimConfigType>)object).getValue();  } catch (  Exception e) {    System.out.flush();    e.printStackTrace();    throw new RuntimeException("unmarschalling failed; aborting ...");  }  log.info("... finished unmarschallig");  return m4uConfigType;}  }
class C{  public boolean isToBeInvoiced(){  Object oo=get_Value(COLUMNNAME_ToBeInvoiced);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void reset(HttpServletRequest request){  if (callStack != null)   while (callStack.size() > 0)   popLastClientInvocation(request,true);  configStack.clear();  home.cleanTemporalSession(request);  setHome(home);}  }
class C{  public double valueToAngle(double value){  value=value - this.range.getLowerBound();  double baseAngle=180 + ((this.meterAngle - 180) / 2);  return baseAngle - ((value / this.range.getLength()) * this.meterAngle);}  }
class C{  Item newInteger(final int value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(INT).putInt(value);    result=new Item(index++,key);    put(result);  }  return result;}  }
class C{  public final int compareTo(TokenProbabilityStrength anotherTokenProbabilityStrength){  int result=(int)((anotherTokenProbabilityStrength.strength - strength) * 1000000);  if (result == 0) {    return this.token.compareTo(anotherTokenProbabilityStrength.token);  } else {    return result;  }}  }
class C{  protected String paramString(){  String iconString=(icon != null ? icon.toString() : "");  String initialValueString=(initialValue != null ? initialValue.toString() : "");  String messageString=(message != null ? message.toString() : "");  String messageTypeString;  if (messageType == ERROR_MESSAGE) {    messageTypeString="ERROR_MESSAGE";  } else   if (messageType == INFORMATION_MESSAGE) {    messageTypeString="INFORMATION_MESSAGE";  } else   if (messageType == WARNING_MESSAGE) {    messageTypeString="WARNING_MESSAGE";  } else   if (messageType == QUESTION_MESSAGE) {    messageTypeString="QUESTION_MESSAGE";  } else   if (messageType == PLAIN_MESSAGE) {    messageTypeString="PLAIN_MESSAGE";  } else   messageTypeString="";  String optionTypeString;  if (optionType == DEFAULT_OPTION) {    optionTypeString="DEFAULT_OPTION";  } else   if (optionType == YES_NO_OPTION) {    optionTypeString="YES_NO_OPTION";  } else   if (optionType == YES_NO_CANCEL_OPTION) {    optionTypeString="YES_NO_CANCEL_OPTION";  } else   if (optionType == OK_CANCEL_OPTION) {    optionTypeString="OK_CANCEL_OPTION";  } else   optionTypeString="";  String wantsInputString=(wantsInput ? "true" : "false");  return super.paramString() + ",icon=" + iconString+ ",initialValue="+ initialValueString+ ",message="+ messageString+ ",messageType="+ messageTypeString+ ",optionType="+ optionTypeString+ ",wantsInput="+ wantsInputString;}  }
class C{  protected synchronized void postTaskExecution(){  if (stopped) {    return;  }  tasksDoneCount++;  int percentageComplete=tasksDoneCount * 100 / tasksTotalCount;  this.notifyListenersSpiderProgress(percentageComplete,tasksDoneCount,tasksTotalCount - tasksDoneCount);  if (tasksDoneCount == tasksTotalCount && initialized) {    this.complete();  }}  }
class C{  public static int executeUpdate(String sql,boolean ignoreError){  return executeUpdate(sql,null,ignoreError,null);}  }
class C{  protected Node copyInto(Node n){  super.copyInto(n);  AbstractEntity ae=(AbstractEntity)n;  ae.nodeName=nodeName;  ae.publicId=publicId;  ae.systemId=systemId;  return n;}  }
class C{  public boolean isDead(){  InputStream i;  OutputStream o;  long start=System.currentTimeMillis();  if ((roundtrip > 0) && (start < lastuse + roundtrip))   return (false);  try {    i=getInputStream();    o=getOutputStream();  } catch (  IOException e) {    return (true);  }  int response=0;  try {    o.write(TransportConstants.Ping);    o.flush();    response=i.read();  } catch (  IOException ex) {    TCPTransport.tcpLog.log(Log.VERBOSE,"exception: ",ex);    TCPTransport.tcpLog.log(Log.BRIEF,"server ping failed");    return (true);  }  if (response == TransportConstants.PingAck) {    roundtrip=(System.currentTimeMillis() - start) * 2;    return (false);  }  if (TCPTransport.tcpLog.isLoggable(Log.BRIEF)) {    TCPTransport.tcpLog.log(Log.BRIEF,(response == -1 ? "server has been deactivated" : "server protocol error: ping response = " + response));  }  return (true);}  }
class C{  public static int size(TableColumnModel self){  return self.getColumnCount();}  }
class C{  public final void resetStatus(final String current){  reset=true;  progress_size=0;  updateStatus(current,4);}  }
class C{  public static boolean isJava16OrAbove(){  return isJavaVersionOrAbove("1.6");}  }
class C{  public boolean checkValue(final Object value){  if (value instanceof Double) {    return true;  } else   if (value instanceof String) {    try {      Double.parseDouble((String)value);      return true;    } catch (    Exception e) {      return false;    }  } else {    throw new IllegalArgumentException();  }}  }
class C{  public ZipException(){  super();}  }
class C{  public RatNum add(RatNum arg){  checkRep();  return new RatNum(this.numer * arg.denom + arg.numer * this.denom,this.denom * arg.denom);}  }
class C{  public static synchronized CookieSyncManager createInstance(Context context){  if (context == null) {    throw new IllegalArgumentException("Invalid context argument");  }  if (sRef == null) {    sRef=new CookieSyncManager(context);  }  return sRef;}  }
class C{  public void upsert(final String key){  upsert(key,1L);}  }
class C{  private int readInt(byte[] b){  return (((b[0] & 0xff) << 24) | ((b[1] & 0xff) << 16) | ((b[2] & 0xff) << 8)| (b[3] & 0xff));}  }
class C{  public EaseOutIn(float overshoot){  this.overshoot=overshoot;}  }
class C{  public KeyboardButton.KeyboardButtonBuilder requestLocation(boolean requestLocation){  this.request_location=requestLocation;  if (requestLocation)   this.request_contact=false;  return this;}  }
class C{  public static boolean verifyPublicKey(PGPPublicKey keyToVerify,String id,PGPPublicKey keyToVerifyWith) throws PGPException {  try {    Iterator<PGPSignature> signIterator=keyToVerify.getSignatures();    while (signIterator.hasNext()) {      PGPSignature signature=signIterator.next();      signature.init(new JcaPGPContentVerifierBuilderProvider().setProvider(provider),keyToVerifyWith);      if (signature.verifyCertification(id.getBytes(),keyToVerify)) {        return true;      }    }    return false;  } catch (  Exception e) {    throw new PGPException("Error verifying public key",e);  }}  }
class C{  public synchronized byte[] provideRefundTransaction(Transaction refundTx,byte[] clientMultiSigPubKey) throws VerificationException {  checkNotNull(refundTx);  checkNotNull(clientMultiSigPubKey);  checkState(state == State.WAITING_FOR_REFUND_TRANSACTION);  log.info("Provided with refund transaction: {}",refundTx);  refundTx.verify();  if (refundTx.getInputs().size() != 1)   throw new VerificationException("Refund transaction does not have exactly one input");  if (refundTx.getInput(0).getSequenceNumber() != 0)   throw new VerificationException("Refund transaction's input's sequence number is non-0");  if (refundTx.getLockTime() < minExpireTime)   throw new VerificationException("Refund transaction has a lock time too soon");  if (refundTx.getOutputs().size() != 1)   throw new VerificationException("Refund transaction does not have exactly one output");  refundTransactionUnlockTimeSecs=refundTx.getLockTime();  clientKey=new ECKey(null,clientMultiSigPubKey);  Script multisigPubKey=ScriptBuilder.createMultiSigOutputScript(2,ImmutableList.of(clientKey,serverKey));  TransactionSignature sig=refundTx.calculateSignature(0,serverKey,multisigPubKey,Transaction.SigHash.NONE,true);  log.info("Signed refund transaction.");  this.clientOutput=refundTx.getOutput(0);  state=State.WAITING_FOR_MULTISIG_CONTRACT;  return sig.encodeToBitcoin();}  }
class C{  protected int contains(int[] array,int val){  for (int i=0; i < array.length; i++)   if (array[i] == val)   return i;  return -1;}  }
class C{  public AllocationException(String message,Throwable cause){  super(message,cause);}  }
class C{  public LocalizedText(String text,Locale locale){  this.text=text;  this.locale=(locale == null ? null : locale.toString());}  }
class C{  public PlayerKeyringSlot(final String player){  super(player);}  }
class C{  private InternalDistributedMember nextAppropriateResponder(){  if (responseQueue != null && responseQueue.size() > 0) {    return (InternalDistributedMember)responseQueue.remove(0);  } else {    return null;  }}  }
class C{  public Request build(){  final Request.Builder builder=new Request.Builder();  builder.url(toUrl());  if (method == HTTPMethod.GET) {    Validator.isNull(body,"cannot send a RequestBody in a GET request");  } else   if (!formParams.isEmpty()) {    final FormBody.Builder formBody=new FormBody.Builder();    for (    final NameValue param : formParams) {      final String value=param.getValue() != null ? param.getValue() : "";      formBody.add(param.getName(),value);    }    body=formBody.build();  } else   if (body == null) {    body=RequestBody.create(null,new byte[0]);  }  builder.method(method.name(),body);  builder.header(HttpHeaders.ACCEPT,HttpMediaType.APPLICATION_JSON);  for (  final NameValue header : headers) {    builder.header(header.getName(),header.getValue());  }  return builder.build();}  }
class C{  public static String trim(String s,boolean leading,boolean trailing,String sp){  char space=(sp == null || sp.length() < 1) ? ' ' : sp.charAt(0);  if (leading) {    int len=s.length(), i=0;    while (i < len && s.charAt(i) == space) {      i++;    }    s=(i == 0) ? s : s.substring(i);  }  if (trailing) {    int endIndex=s.length() - 1;    int i=endIndex;    while (i >= 0 && s.charAt(i) == space) {      i--;    }    s=i == endIndex ? s : s.substring(0,i + 1);  }  return s;}  }
class C{  public static void generateEpilogForJNIMethod(Assembler asm,RVMMethod method){  if (VM.BuildFor32Addr) {    if (method.getReturnType().isLongType()) {      asm.emitPUSH_Reg(T1);      asm.emitMOV_Reg_Reg(T1,T0);      asm.emitPOP_Reg(T0);    } else {      if (SSE2_FULL && VM.BuildFor32Addr) {        if (method.getReturnType().isDoubleType()) {          if (VM.VerifyAssertions)           VM._assert(VM.BuildFor32Addr);          asm.emitMOVSD_RegDisp_Reg(THREAD_REGISTER,Entrypoints.scratchStorageField.getOffset(),XMM0);          asm.emitFLD_Reg_RegDisp_Quad(FP0,THREAD_REGISTER,Entrypoints.scratchStorageField.getOffset());        } else         if (method.getReturnType().isFloatType()) {          if (VM.VerifyAssertions)           VM._assert(VM.BuildFor32Addr);          asm.emitMOVSS_RegDisp_Reg(THREAD_REGISTER,Entrypoints.scratchStorageField.getOffset(),XMM0);          asm.emitFLD_Reg_RegDisp(FP0,THREAD_REGISTER,Entrypoints.scratchStorageField.getOffset());        }      }    }  }  if (VM.BuildFor32Addr) {    asm.emitMOV_Reg_RegDisp(S0,THREAD_REGISTER,Entrypoints.jniEnvField.getOffset());  } else {    asm.emitMOV_Reg_RegDisp_Quad(S0,THREAD_REGISTER,Entrypoints.jniEnvField.getOffset());  }  if (VM.BuildFor32Addr) {    asm.emitMOV_Reg_RegDisp(EDI,EBP,SAVED_JAVA_FP_OFFSET);    asm.emitADD_Reg_Reg(EDI,EBP);    asm.emitMOV_RegDisp_Reg(S0,Entrypoints.JNITopJavaFPField.getOffset(),EDI);  } else {    asm.emitMOV_Reg_RegDisp_Quad(EDI,EBP,SAVED_JAVA_FP_OFFSET);    asm.emitADD_Reg_Reg_Quad(EDI,EBP);    asm.emitMOV_RegDisp_Reg_Quad(S0,Entrypoints.JNITopJavaFPField.getOffset(),EDI);  }  asm.emitPUSH_Reg(T0);  asm.emitPUSH_Reg(T1);  asm.emitMOV_Reg_Imm(T0,RVMThread.IN_JAVA);  asm.emitMOV_Reg_Imm(T1,RVMThread.IN_JNI);  asm.emitLockNextInstruction();  asm.emitCMPXCHG_RegDisp_Reg(THREAD_REGISTER,Entrypoints.execStatusField.getOffset(),T1);  ForwardReference doneEnterJNIRef=asm.forwardJcc(EQ);  asm.generateJTOCcall(Entrypoints.enterJNIBlockedFromJNIFunctionCallMethod.getOffset());  doneEnterJNIRef.resolve(asm);  asm.emitPOP_Reg(T1);  asm.emitPOP_Reg(T0);  for (  FloatingPointMachineRegister r : NATIVE_NONVOLATILE_FPRS) {    if (r instanceof XMM) {      asm.emitMOVSD_Reg_RegInd((XMM)r,SP);    } else {      asm.emitFLD_Reg_RegInd_Quad((FPR)r,SP);    }    asm.emitPOP_Reg(T0);    asm.emitPOP_Reg(T0);  }  for (int i=NATIVE_NONVOLATILE_GPRS.length - 1; i >= 0; i--) {    GPR r=NATIVE_NONVOLATILE_GPRS[i];    asm.emitPOP_Reg(r);  }  if (VM.BuildFor32Addr) {    asm.emitADD_Reg_Imm(SP,3 * WORDSIZE);  } else {    asm.emitADD_Reg_Imm_Quad(SP,3 * WORDSIZE);  }  asm.emitRET();}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (index_1: ");  result.append(index_1);  result.append(')');  return result.toString();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void translateM(float[] m,int mOffset,float x,float y,float z){  for (int i=0; i < 4; i++) {    int mi=mOffset + i;    m[12 + mi]+=m[mi] * x + m[4 + mi] * y + m[8 + mi] * z;  }}  }
class C{  synchronized void reopenOutputStream(){  try {    if (debug) {      log.debug("Re-opening tlog's output stream: " + this);    }    raf=new RandomAccessFile(this.tlogFile,"rw");    channel=raf.getChannel();    long start=raf.length();    raf.seek(start);    os=Channels.newOutputStream(channel);    fos=new FastOutputStream(os,new byte[65536],0);    fos.setWritten(start);  } catch (  IOException e) {    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,e);  }}  }
class C{  public void add(KeyStore keyStore){  try {    this.add(new KeyStoreResolver(keyStore));  } catch (  StorageResolverException ex) {    log.log(java.util.logging.Level.SEVERE,"Could not add KeyStore because of: ",ex);  }}  }
class C{  public SubscriberObject(int id){  this.id=id;}  }
class C{  @SuppressWarnings("serial") private void check(boolean single,CacheConfiguration cc) throws Exception {  grid(0).getOrCreateCache(cc);  try {    final int cnt=100;    for (int i=0; i < NODES_CNT; i++) {      final int iter=i;      final Set<String> keys=new LinkedHashSet<String>(){{          for (int i=0; i < cnt; i++)           add("key-" + iter + "-"+ i);        }      };      IgniteEx grid=grid(i);      final IgniteCache<String,Integer> cache=grid.cache(null);      if (single)       for (      String key : keys)       cache.invoke(key,new DummyEntryProcessor()); else       cache.invokeAll(keys,new DummyEntryProcessor());      for (      String key : keys) {        Collection<ClusterNode> nodes=grid.affinity(null).mapKeyToPrimaryAndBackups(key);        List<IgniteEx> grids=grids(nodes);        GridCacheVersion ver0=null;        Object val0=null;        for (        IgniteEx g : grids) {          GridCacheAdapter<Object,Object> cx=g.context().cache().internalCache();          GridCacheEntryEx e=cx.peekEx(key);          assertNotNull("Failed to find entry on primary/backup node.",e);          GridCacheVersion ver=e.version();          Object val=e.rawGet().value(cx.context().cacheObjectContext(),true);          if (ver0 == null) {            ver0=ver;            val0=val;          }          assertEquals("Invalid version for key: " + key,ver0,ver);          assertNotNull("No value for key: " + key,val);          assertEquals("Invalid value for key: " + key,val0,val);        }      }    }  }  finally {    grid(0).destroyCache(null);  }}  }
class C{  public String programFilename(){  return programFilename;}  }
class C{  public void join(Object[] pieces){  int sum=0;  for (int x=0; x < pieces.length; x++)   sum+=((int[])(pieces[x])).length;  int runningsum=0;  int[] newgenome=new int[sum];  for (int x=0; x < pieces.length; x++) {    System.arraycopy(pieces[x],0,newgenome,runningsum,((int[])(pieces[x])).length);    runningsum+=((int[])(pieces[x])).length;  }  genome=newgenome;}  }
class C{  @Override public MapsCard colorTitle(@ColorRes int colorTitle){  mColorTitle=colorTitle;  return this;}  }
class C{  public void addConnection(Connection connection){  connections.put(connection.handle(),connection);  try {    persistence.persistConnection(connection);  } catch (  PersistenceException e) {    e.printStackTrace();  }}  }
class C{  @Nullable private Translog.TranslogGeneration loadTranslogIdFromCommit(IndexWriter writer) throws IOException {  return null;}  }
class C{  @Override public String toString(){  return "ice4j.Connector@" + listenAddress + " status: "+ (running ? "not" : "")+ " running";}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap entities;  DocumentType docType;  Node retval;  Element elem;  doc=(Document)load("hc_staff",true);  docType=doc.getDoctype();  if (!(("text/html".equals(getContentType())))) {    assertNotNull("docTypeNotNull",docType);    entities=docType.getEntities();    assertNotNull("entitiesNotNull",entities);    elem=doc.createElementNS("http://www.w3.org/1999/xhtml","br");    try {      retval=entities.setNamedItemNS(elem);      fail("throw_HIER_OR_NO_MOD_ERR");    } catch (    DOMException ex) {switch (ex.code) {case 3:        break;case 7:      break;default :    throw ex;}}}}  }
class C{  protected Item toItem(Model model){  return mItemFactory.apply(model);}  }
class C{  private void closeExecutors(){  mReadExecutorService.shutdownNow();  mReportExecutorService.shutdownNow();  mWriteExecutorService.shutdownNow();}  }
class C{  public boolean containsValue(V val){  V[] values=_values;  if (null == val) {    for (int i=values.length; i-- > 0; ) {      if (TObjectHash.NULL == values[i]) {        return true;      }    }  } else {    for (int i=values.length; i-- > 0; ) {      V value=unwrapNull(values[i]);      if (isFull(values,i) && (val == value || val.equals(value))) {        return true;      }    }  }  return false;}  }
class C{  public static String docToString(Document dom){  return XMLUtils.docToString1(dom);}  }
class C{  public void respondChannel(String response){  if (getChannel() == null)   throw new RuntimeException("Event does not contain a channel");  getBot().sendIRC().message(channelSource,response);}  }
class C{  public ClientPropertiesBuilder withProxyHostName(String proxyHostName){  properties.setProperty(CLIENT_SERVICE_PROXY_HOST_NAME,proxyHostName);  return this;}  }
class C{  public NoteEditor(NoteModel noteModel){  this.noteModel=noteModel;  setup();}  }
class C{  public void reset(){  super.reset();  H1=0xc1059ed8;  H2=0x367cd507;  H3=0x3070dd17;  H4=0xf70e5939;  H5=0xffc00b31;  H6=0x68581511;  H7=0x64f98fa7;  H8=0xbefa4fa4;  xOff=0;  for (int i=0; i != X.length; i++) {    X[i]=0;  }}  }
class C{  public int executeUpdate() throws SQLException {  if (executeInternal()) {    return 0;  }  return getUpdateCount();}  }
class C{  private void addStaticDeployables(String containerId,LocalConfiguration configuration){  for (  DeployableElement deployableElement : getDeployables()) {    configuration.addDeployable(deployableElement.createDeployable(containerId));  }}  }
class C{  public static String stripNonTerminalIndex(String nt){  return ensureNonTerminalBrackets(cleanNonTerminal(nt));}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public final void printInfo(final String prefix){  System.out.println(prefix + "configuration of " + this.getClass().getName()+ ":");  System.out.println(prefix + "  speed restrictions:");  System.out.println(prefix + "    srDbfFileName:    " + this.srDbfFileName);  System.out.println(prefix + "    SR_ID_NAME:       " + SR_ID_NAME);  System.out.println(prefix + "    SR_SPEED_NAME:    " + SR_SPEED_NAME);  System.out.println(prefix + "    SR_VALDIR_NAME:   " + SR_VALDIR_NAME);  System.out.println(prefix + "    SR_VERIFIED_NAME: " + SR_VERIFIED_NAME);  System.out.println(prefix + "done.");}  }
class C{  public AnimatableValue interpolate(AnimatableValue result,AnimatableValue to,float interpolation,AnimatableValue accumulation,int multiplier){  AnimatableNumberOrIdentValue res;  if (result == null) {    res=new AnimatableNumberOrIdentValue(target);  } else {    res=(AnimatableNumberOrIdentValue)result;  }  if (to == null) {    if (isIdent) {      res.hasChanged=!res.isIdent || !res.ident.equals(ident);      res.ident=ident;      res.isIdent=true;    } else     if (numericIdent) {      res.hasChanged=res.value != value || res.isIdent;      res.value=value;      res.isIdent=false;      res.hasChanged=true;      res.numericIdent=true;    } else {      float oldValue=res.value;      super.interpolate(res,to,interpolation,accumulation,multiplier);      res.numericIdent=false;      if (res.value != oldValue) {        res.hasChanged=true;      }    }  } else {    AnimatableNumberOrIdentValue toValue=(AnimatableNumberOrIdentValue)to;    if (isIdent || toValue.isIdent || numericIdent) {      if (interpolation >= 0.5) {        if (res.isIdent != toValue.isIdent || res.value != toValue.value || res.isIdent && toValue.isIdent && !toValue.ident.equals(ident)) {          res.isIdent=toValue.isIdent;          res.ident=toValue.ident;          res.value=toValue.value;          res.numericIdent=toValue.numericIdent;          res.hasChanged=true;        }      } else {        if (res.isIdent != isIdent || res.value != value || res.isIdent && isIdent && !res.ident.equals(ident)) {          res.isIdent=isIdent;          res.ident=ident;          res.value=value;          res.numericIdent=numericIdent;          res.hasChanged=true;        }      }    } else {      super.interpolate(res,to,interpolation,accumulation,multiplier);      res.numericIdent=false;    }  }  return res;}  }
class C{  public FasDci(Graph graph,IndependenceTest independenceTest){  this.graph=graph;  this.independenceTest=independenceTest;  this.variables.addAll(independenceTest.getVariables());}  }
class C{  public String toString(){  StringBuffer buf=new StringBuffer();  String indent="    ";  buf.append(indent + "Version             : " + Integer.toHexString(getVersion())+ "\n");  buf.append(indent + "Ascent              : " + getAscent()+ "\n");  buf.append(indent + "Descent             : " + getDescent()+ "\n");  buf.append(indent + "LineGap             : " + getLineGap()+ "\n");  buf.append(indent + "AdvanceWidthMax     : " + getAdvanceWidthMax()+ "\n");  buf.append(indent + "MinLSB              : " + getMinLeftSideBearing()+ "\n");  buf.append(indent + "MinRSB              : " + getMinRightSideBearing()+ "\n");  buf.append(indent + "MaxExtent           : " + getXMaxExtent()+ "\n");  buf.append(indent + "CaretSlopeRise      : " + getCaretSlopeRise()+ "\n");  buf.append(indent + "CaretSlopeRun       : " + getCaretSlopeRun()+ "\n");  buf.append(indent + "CaretOffset         : " + getCaretOffset()+ "\n");  buf.append(indent + "MetricDataFormat    : " + getMetricDataFormat()+ "\n");  buf.append(indent + "NumOfLongHorMetrics : " + getNumOfLongHorMetrics()+ "\n");  return buf.toString();}  }
class C{  public Type basicGetType(){  if (getTypeSpecifier() != null) {    return getTypeSpecifier().getType();  }  return null;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void clearExceptions(){  this.exceptions.clear();}  }
class C{  @Override public synchronized void configure() throws ReplicatorException, InterruptedException {  super.configure();}  }
class C{  private boolean isLiteralFunction(JSType type){  return type == typeRegistry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE);}  }
class C{  public static <R>Function<BindObject,R> transTo(Class<R> beanClazz){  Objects.requireNonNull(beanClazz,"beanClazz is NULL!!");  return null;}  }
class C{  public static LocalDate toDate(Timestamp time){  return time.toLocalDateTime().toLocalDate();}  }
class C{  public static Distribution guessOmega(DataSet d){  return new LogUniform(0.25,50);}  }
class C{  public Object clone(){  try {    X509CertSelector copy=(X509CertSelector)super.clone();    if (subjectAlternativeNames != null) {      copy.subjectAlternativeNames=cloneSet(subjectAlternativeNames);      copy.subjectAlternativeGeneralNames=cloneSet(subjectAlternativeGeneralNames);    }    if (pathToGeneralNames != null) {      copy.pathToNames=cloneSet(pathToNames);      copy.pathToGeneralNames=cloneSet(pathToGeneralNames);    }    return copy;  } catch (  CloneNotSupportedException e) {    throw new InternalError(e.toString(),e);  }}  }
class C{  @Deprecated public boolean equals(String s){  if (s == null || mimeType == null)   return false;  return isMimeTypeEqual(s);}  }
class C{  public void testKeyPairGenerator02() throws NoSuchAlgorithmException {  if (!DSASupported) {    fail(NotSupportMsg);    return;  }  KeyPairGenerator kpg;  for (int i=0; i < algs.length; i++) {    kpg=KeyPairGenerator.getInstance(algs[i]);    assertEquals("Incorrect algorithm ",kpg.getAlgorithm().toUpperCase(),algs[i].toUpperCase());  }}  }
class C{  public synchronized boolean intersectsSet(NSSet otherSet){  for (  NSObject o : set) {    if (otherSet.containsObject(o))     return true;  }  return false;}  }
class C{  protected OrderPositionSplit(){  super();}  }
class C{  public void initialize(Body bodyA,Body bodyB,Vector2 anchor,Vector2 axis){  this.bodyA=bodyA;  this.bodyB=bodyB;  localAnchorA.set(bodyA.getLocalPoint(anchor));  localAnchorB.set(bodyB.getLocalPoint(anchor));  localAxisA.set(bodyA.getLocalVector(axis));}  }
class C{  public <T>T[] retrieveArray(String key,Class<T> classData){  key=safetyKey(key);  try {    File file=new File(cacheDirectory,key);    Class<?> clazzArray=Array.newInstance(classData,1).getClass();    Object data=jolyglot.fromJson(file,clazzArray);    return (T[])data;  } catch (  Exception e) {    return null;  }}  }
class C{  void analyze(final MethodResult methodResult){  lock.lock();  try {    buildPackagePrefix(methodResult.getParentResource().getOriginalClass());    final List<Instruction> visitedInstructions=interpretRelevantInstructions(methodResult.getInstructions());    final Set<ProjectMethod> projectMethods=findProjectMethods(visitedInstructions);    projectMethods.stream().forEach(null);    Element returnedElement=new MethodSimulator().simulate(visitedInstructions);    final String returnType=JavaUtils.getReturnType(methodResult.getOriginalMethodSignature());    if (Types.PRIMITIVE_VOID.equals(returnType)) {      return;    }    if (returnedElement == null) {      return;    }    final Set<Object> possibleObjects=returnedElement.getPossibleValues().stream().filter(null).collect(Collectors.toSet());    if (!Types.RESPONSE.equals(returnType)) {      final HttpResponse defaultResponse=new HttpResponse();      if (Types.OBJECT.equals(returnType))       defaultResponse.getEntityTypes().addAll(returnedElement.getTypes()); else       defaultResponse.getEntityTypes().add(returnType);      possibleObjects.stream().filter(null).map(null).forEach(null);      methodResult.getResponses().add(defaultResponse);    }    returnedElement.getPossibleValues().stream().filter(null).map(null).forEach(null);  }  finally {    lock.unlock();  }}  }
class C{  private List<URI> checkAndFilterRemoveVarrays(Network network,Collection<String> remVarrays,Collection<String> addVarrays){  List<URI> removedVarray=new ArrayList<URI>();  URI uri=null;  for (  String strUri : remVarrays) {    if (network.getAssignedVirtualArrays() != null && network.getAssignedVirtualArrays().contains(strUri.toString()) && (addVarrays == null || !addVarrays.contains(strUri))) {      uri=URI.create(strUri);      removedVarray.add(uri);    }  }  checkNetworkExportAssociations(network,removedVarray);  return removedVarray;}  }
class C{  private byte[] padOAEP(byte[] M) throws BadPaddingException {  if (random == null) {    random=JCAUtil.getSecureRandom();  }  int hLen=lHash.length;  byte[] seed=new byte[hLen];  random.nextBytes(seed);  byte[] EM=new byte[paddedSize];  int seedStart=1;  int seedLen=hLen;  System.arraycopy(seed,0,EM,seedStart,seedLen);  int dbStart=hLen + 1;  int dbLen=EM.length - dbStart;  int mStart=paddedSize - M.length;  System.arraycopy(lHash,0,EM,dbStart,hLen);  EM[mStart - 1]=1;  System.arraycopy(M,0,EM,mStart,M.length);  mgf1(EM,seedStart,seedLen,EM,dbStart,dbLen);  mgf1(EM,dbStart,dbLen,EM,seedStart,seedLen);  return EM;}  }
class C{  public MultiPointHandler(){  myShapeType=8;}  }
class C{  public void sleep(int ms) throws Exception {  gondolas.get(0).getClock().sleep(ms);}  }
class C{  private synchronized void block(boolean tf){  if (tf) {    try {      if (m_buildThread.isAlive() && m_state != IDLE) {        wait();      }    } catch (    InterruptedException ex) {    }  } else {    notifyAll();  }}  }
class C{  public void onBuyMoreClicks(View view){  if (isSubscribed()) {    String requestId=PurchasingManager.initiatePurchaseRequest(getResources().getString(R.string.consumable_sku));    storeRequestId(requestId,NUM_CLICKS);  } else {    generateSubscribeDialog();  }}  }
class C{  public void assemble(Class type) throws Exception {  Order order=scanner.getOrder();  if (order != null) {    assembler.assemble(root,order);  }}  }
class C{  public static boolean isExpression(RDFNode node){  if (node instanceof Resource && SP.exists(((Resource)node).getModel())) {    RDFNode expr=SPINFactory.asExpression(node);    if (expr instanceof Variable) {      return true;    } else     if (!node.isAnon()) {      return false;    }    if (expr instanceof FunctionCall) {      Resource function=((FunctionCall)expr).getFunction();      if (function.isURIResource()) {        if (SPINModuleRegistry.get().getFunction(function.getURI(),((Resource)node).getModel()) != null) {          return true;        }        if (FunctionRegistry.get().isRegistered(function.getURI())) {          return true;        }      }    } else {      return expr instanceof Aggregation;    }  }  return false;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public ThickAsynchronousIterator(final E[] a){  if (a == null)   throw new IllegalArgumentException();  this.a=a;  lastIndex=-1;}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.VARIABLE_DECLARATION_CONTAINER__VAR_DECLS_OR_BINDINGS:    getVarDeclsOrBindings().clear();  return;case N4JSPackage.VARIABLE_DECLARATION_CONTAINER__VAR_STMT_KEYWORD:setVarStmtKeyword(VAR_STMT_KEYWORD_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public void writeTag(Tag tag) throws IOException {  writeTag("",tag);}  }
class C{  public void encode(DerOutputStream out) throws IOException {  out.putOID(id);}  }
class C{  public static void apply(ViewHelperImpl impl,View v,int id,int layoutId,String propertyName,Object value,SparseArray<ListenerImplContext> mListenerMap){  if (impl == null) {    impl=new ViewHelperImpl(v);  }  final Resources res=impl.getContext().getResources();  if (PropertyNames.BACKGROUND.equals(propertyName)) {    ViewCompatUtil.setBackgroundCompatible(v,(Drawable)value);  } else   if (PropertyNames.BACKGROUND_COLOR.equals(propertyName)) {    v.setBackgroundColor((Integer)value);  } else   if (PropertyNames.BACKGROUND_RES.equals(propertyName)) {    v.setBackgroundResource((Integer)value);  } else   if (PropertyNames.TEXT.equals(propertyName)) {    impl.setText((CharSequence)value);  } else   if (PropertyNames.TEXT_RES.equals(propertyName)) {    impl.setText(res.getText((Integer)value));  } else   if (PropertyNames.TEXT_COLOR.equals(propertyName)) {    if (value instanceof String) {      impl.setTextColor(Color.parseColor((String)value));    } else {      impl.setTextColor((Integer)value);    }  } else   if (PropertyNames.TEXT_COLOR_RES.equals(propertyName)) {    impl.setTextColor(res.getColor((Integer)value));  } else   if (PropertyNames.TEXT_COLOR_STATE.equals(propertyName)) {    impl.setTextColor((ColorStateList)value);  } else   if (PropertyNames.TEXT_COLOR_STATE_RES.equals(propertyName)) {    impl.setTextColor(res.getColorStateList((Integer)value));  } else   if (PropertyNames.TEXT_SIZE.equals(propertyName)) {    impl.setTextSize((Float)value);  } else   if (PropertyNames.TEXT_SIZE_RES.equals(propertyName)) {    impl.setTextSize(res.getDimensionPixelSize((Integer)value));  } else   if (PropertyNames.VISIBILITY.equals(propertyName)) {    impl.setVisibility((Integer)value);  } else   if (PropertyNames.ON_CLICK.equals(propertyName)) {    impl.setOnClickListener((View.OnClickListener)mListenerMap.get(getEventKey(id,layoutId,propertyName)));  } else   if (PropertyNames.ON_LONG_CLICK.equals(propertyName)) {    impl.setOnLongClickListener((View.OnLongClickListener)mListenerMap.get(getEventKey(id,layoutId,propertyName)));  } else   if (PropertyNames.TEXT_CHANGE.equals(propertyName) || PropertyNames.TEXT_CHANGE_BEFORE.equals(propertyName) || PropertyNames.TEXT_CHANGE_AFTER.equals(propertyName)) {    impl.addTextChangedListener((TextWatcher)mListenerMap.get(getEventKey(id,layoutId,propertyName)));  } else   if (PropertyNames.ON_FOCUS_CHANGE.equals(propertyName)) {    v.setOnFocusChangeListener((View.OnFocusChangeListener)mListenerMap.get(getEventKey(id,layoutId,propertyName)));  } else   if (PropertyNames.ON_TOUCH.equals(propertyName)) {    v.setOnTouchListener((View.OnTouchListener)mListenerMap.get(getEventKey(id,layoutId,propertyName)));  } else   if (PropertyNames.IMGAE_BITMAP.equals(propertyName)) {    if (value instanceof Integer) {      impl.setImageResource((Integer)value);    } else {      impl.setImageBitmap((Bitmap)value);    }  } else   if (PropertyNames.IMGAE_DRAWABLE.equals(propertyName)) {    if (value instanceof Integer) {      impl.setImageResource((Integer)value);    } else {      impl.setImageDrawable((Drawable)value);    }  } else   if (PropertyNames.IMGAE_URL.equals(propertyName)) {    checkAndGetImageApplier().apply((ImageView)v,(String)value);  } else   if (PropertyNames.IMGAE_ROUND_BUILDER.equals(propertyName)) {    Logger.w("databind","apply property failed, by unsupported old image builder property now.");  } else   if (isEventProperty(propertyName)) {    Object listener=mListenerMap.get(getEventKey(id,layoutId,propertyName));    final Method m=findMethod(v.getClass(),propertyName,listener.getClass());    if (m == null) {      throw new DataBindException("can't find the appropriate method to apply the property ," + "property name = " + propertyName);    }    try {      m.invoke(v,listener);    } catch (    Exception e) {      throw new DataBindException("apply property( " + propertyName + " ) failed caused by set listener failed, have you register event listener  by calling "+ "ListenerFactory.registEventListener(String propertyName,Class<?> clazz) ? ",e);    }  } else {    try {      ReflectUtil.getAppropriateMethod(v.getClass(),getMethodName(propertyName,"set"),value.getClass()).invoke(v,value);    } catch (    Exception e) {      throw new DataBindException("can't apply the value to the property , " + "because can't find the method (name = " + getMethodName(propertyName,"set") + " )in the class( "+ v.getClass().getName()+ " ),property name = "+ propertyName+ " , if the  property is event property , you should regist it by calling "+ "ListenerFactory.registEventListener(String propertyName,Class<?> clazz)",e);    }  }}  }
class C{  private void computeLineHeight(){  final Paint.FontMetricsInt fm=getPaint().getFontMetricsInt();  final int fontHeight=Math.abs(fm.ascent - fm.descent) + fm.leading;  final float desiredLineHeight=(lineHeightHint > 0) ? lineHeightHint : lineHeightMultiplierHint * fontHeight;  final int baselineAlignedLineHeight=(int)(FOUR_DIP * (float)Math.ceil(desiredLineHeight / FOUR_DIP));  setLineSpacing(baselineAlignedLineHeight - fontHeight,1f);}  }
class C{  public boolean isI_IsImported(){  Object oo=get_Value(COLUMNNAME_I_IsImported);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void append(String string){  for (int i=0; i < string.length(); i++)   append(string.charAt(i));}  }
class C{  private void fillInternalShadowRounded(Graphics2D g,Shape s){  g.setPaint(getRoundedShadowGradient(s));  g.fill(s);}  }
class C{  public boolean isValidISBN(String isbn){  return ISBN_VALIDATOR.isValid(isbn);}  }
class C{  public int read() throws IOException {  ensureOpen();  if (next >= length) {    return -1;  }  return str.charAt(next++);}  }
class C{  public Point center(){  calculate();  return new Point(topLeft.x + (size.width / 2),topLeft.y + (size.height / 2));}  }
class C{  public boolean isConnected(String hostAndPort) throws ConnectionManagerException {  connectionLock.lock();  boolean isConnected=false;  try {    if ((hostAndPort == null) || (hostAndPort.length() == 0)) {      throw new ConnectionManagerException("Passed host/port is null or blank.");    }    CimConnection connection=_connections.get(hostAndPort);    if (connection != null) {      isConnected=true;    }  }  finally {    connectionLock.unlock();  }  return isConnected;}  }
class C{  public void closeBoard(){  if (mBoard != null) {    mBoard.close(true);  }}  }
class C{  public blockquote addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public static void enableContext(){  logger.info("enable context and trace instrumentation");  ExecutionTraceImpl.enableContext();}  }
class C{  public void addExtension(String extension){  if (!extension.startsWith("."))   extension="." + extension;  extensions.add(extension.toLowerCase());}  }
class C{  private void resetActionBarIfApplicable(){  Log.d(TAG,"SearchResultFragment is visible: " + srf.isHidden());  if (srf.isVisible()) {    tlf.resetActionBar();  }}  }
class C{  private char normalizeIterationMark(char c) throws IOException {  if (bufferPosition < iterationMarkSpanEndPosition) {    return normalize(sourceCharacter(bufferPosition,iterationMarksSpanSize),c);  }  if (bufferPosition == iterationMarkSpanEndPosition) {    iterationMarkSpanEndPosition++;    return c;  }  iterationMarksSpanSize=nextIterationMarkSpanSize();  iterationMarkSpanEndPosition=bufferPosition + iterationMarksSpanSize;  return normalize(sourceCharacter(bufferPosition,iterationMarksSpanSize),c);}  }
class C{  public void disableDashedLine(){  mDashPathEffect=null;}  }
class C{  private int executeCountQuery(){  initParameterLocalesForProjection();  StringBuffer queryBuffer=new StringBuffer("SELECT COUNT(p) from product AS p");  queryBuffer.append(whereClause.toString());  Query query=dm.createNativeQuery(queryBuffer.toString());  setParameters(query);  @SuppressWarnings("unchecked") List<BigInteger> countResultList=query.getResultList();  return countResultList.get(0).intValue();}  }
class C{  @MediumTest public void testCollateLocalizedForJapanese() throws Exception {  final String testName="DatabaseGeneralTest#testCollateLocalizedForJapanese()";  final Locale[] localeArray=Locale.getAvailableLocales();  final String japanese=Locale.JAPANESE.getLanguage();  final String english=Locale.ENGLISH.getLanguage();  Locale japaneseLocale=null;  Locale englishLocale=null;  for (  Locale locale : localeArray) {    if (locale != null) {      final String language=locale.getLanguage();      if (language == null) {        continue;      } else       if (language.equals(japanese)) {        japaneseLocale=locale;      } else       if (language.equals(english)) {        englishLocale=locale;      }    }    if (japaneseLocale != null && englishLocale != null) {      break;    }  }  if (japaneseLocale == null || englishLocale == null) {    Log.d(TAG,testName + "n is silently skipped since " + (englishLocale == null ? (japaneseLocale == null ? "Both English and Japanese locales do not exist." : "English locale does not exist.") : (japaneseLocale == null ? "Japanese locale does not exist." : "...why?")));    return;  }  Locale originalLocale=Locale.getDefault();  try {    final String dbName="collate_localized_test";    mDatabase.execSQL("CREATE TABLE " + dbName + " ("+ "_id INTEGER PRIMARY KEY, "+ "s TEXT COLLATE LOCALIZED) ");    DatabaseUtils.InsertHelper ih=new DatabaseUtils.InsertHelper(mDatabase,dbName);    ContentValues cv=new ContentValues();    cv=new ContentValues();    cv.put("s","\uFF75\uFF77\uFF85\uFF9C");    ih.insert(cv);    cv=new ContentValues();    cv.put("s","\u306B\u307B\u3093");    ih.insert(cv);    cv=new ContentValues();    cv.put("s","\u30A2\u30E1\u30EA\u30AB");    ih.insert(cv);    Locale.setDefault(englishLocale);    Locale.setDefault(japaneseLocale);    Cursor cur=mDatabase.rawQuery("SELECT * FROM " + dbName + " ORDER BY s",null);    assertTrue(cur.moveToFirst());    assertEquals("\u30A2\u30E1\u30EA\u30AB",cur.getString(1));    assertTrue(cur.moveToNext());    assertEquals("\uFF75\uFF77\uFF85\uFF9C",cur.getString(1));    assertTrue(cur.moveToNext());    assertEquals("\u306B\u307B\u3093",cur.getString(1));  }  finally {    if (originalLocale != null) {      try {        Locale.setDefault(originalLocale);      } catch (      Exception e) {      }    }  }}  }
class C{  private static void debugPrintln(String msg){  if (DEBUG) {    System.err.println("JAXP: " + msg);  }}  }
class C{  private RequestManager(){}  }
class C{  public OKA1(){  super(2,2);}  }
class C{  public static CCMenuItemAtlasFont item(CharSequence value,String charMapFile,int itemWidth,int itemHeight,char startCharMap){  assert value.length() != 0 : "value length must be greater than 0";  CCLabelAtlas label=CCLabelAtlas.label(value,charMapFile,itemWidth,itemHeight,startCharMap);  return new CCMenuItemAtlasFont(label,null,null);}  }
class C{  void dispose(){  disposeImpl();}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  private static int FindClass(JNIEnvironment env,Address classNameAddress){  if (traceJNI)   VM.sysWrite("JNI called: FindClass  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  String classString=null;  try {    classString=JNIGenericHelpers.createStringFromC(classNameAddress);    classString=classString.replace('/','.');    if (classString.startsWith("L") && classString.endsWith(";")) {      classString=classString.substring(1,classString.length() - 1);    }    if (traceJNI)     VM.sysWriteln(classString);    ClassLoader cl=RVMClass.getClassLoaderFromStackFrame(1);    Class<?> matchedClass=Class.forName(classString.replace('/','.'),true,cl);    int result=env.pushJNIRef(matchedClass);    if (traceJNI)     VM.sysWriteln("FindClass returning ",result);    return result;  } catch (  ClassNotFoundException e) {    if (traceJNI)     e.printStackTrace(System.err);    env.recordException(new NoClassDefFoundError(classString));    return 0;  }catch (  Throwable unexpected) {    if (traceJNI) {      if (VM.fullyBooted) {        unexpected.printStackTrace(System.err);      } else {        VM.sysWrite("Unexpected exception ",unexpected.getClass().toString());        VM.sysWriteln(" to early in VM boot up to print ",unexpected.getMessage());      }    }    env.recordException(unexpected);    return 0;  }}  }
class C{  public final InterestRate equivalentRate(final Date d1,final Date d2,final DayCounter resultDC,final Compounding comp,final Frequency freq){  QL.require(d1.lt(d2),"d1 later than or equal to d2");  final double t1=this.dc.yearFraction(d1,d2);  final double t2=resultDC.yearFraction(d1,d2);  return impliedRate(compoundFactor(t1),t2,resultDC,comp,freq);}  }
class C{  @Override public Clustering<MeanModel> run(Database database,Relation<V> relation){  final DBIDs ids=relation.getDBIDs();  double[][] means=initializer.chooseInitialMeans(database,relation,k,getDistanceFunction());  List<ModifiableDBIDs> clusters=new ArrayList<>();  for (int i=0; i < k; i++) {    clusters.add(DBIDUtil.newHashSet(relation.size() / k + 2));  }  final WritableDataStore<Meta> metas=initializeMeta(relation,means);  ArrayModifiableDBIDs tids=initialAssignment(clusters,metas,ids);  means=means(clusters,means,relation);  means=refineResult(relation,means,clusters,metas,tids);  Clustering<MeanModel> result=new Clustering<>("k-Means Samesize Clustering","kmeans-samesize-clustering");  for (int i=0; i < clusters.size(); i++) {    result.addToplevelCluster(new Cluster<>(clusters.get(i),new MeanModel(means[i])));  }  return result;}  }
class C{  protected void doResort(){  Collections.sort(_list,this);}  }
class C{  public void writeExternal(ObjectOutput os) throws IOException {  if (os instanceof ObjectOutputStream) {    ObjectOutputStream oos=(ObjectOutputStream)os;    FastBufferedDataOutputStream fos=new FastBufferedDataOutputStream(oos);    writeHeaderAndPayload(fos);    fos.flush();  } else {    writeHeaderAndPayload(os);  }}  }
class C{  public void merge(CableNetwork cableNetwork){  sinks.addAll(cableNetwork.getSinks());  for (  Entry<TileEntity,ForgeDirection> obj : cableNetwork.getSinks()) {    boolean canMerge=true;    for (    Entry<TileEntity,ForgeDirection> obj2 : sinks) {      if (obj.getKey().xCoord == obj2.getKey().xCoord && obj.getKey().yCoord == obj2.getKey().yCoord && obj.getKey().zCoord == obj2.getKey().zCoord && obj.getValue() == obj2.getValue()) {        canMerge=false;        break;      }    }    if (canMerge) {      sinks.add(obj);    }  }  for (  Entry<TileEntity,ForgeDirection> obj : cableNetwork.getSources()) {    boolean canMerge=true;    for (    Entry<TileEntity,ForgeDirection> obj2 : sources) {      if (obj.getKey().xCoord == obj2.getKey().xCoord && obj.getKey().yCoord == obj2.getKey().yCoord && obj.getKey().zCoord == obj2.getKey().zCoord && obj.getValue() == obj2.getValue()) {        canMerge=false;        break;      }    }    if (canMerge) {      sources.add(obj);    }  }}  }
class C{  protected void updateButtons(){  removeButton.setEnabled(!mediaList.isSelectionEmpty());  clearButton.setEnabled(!listModel.isEmpty());}  }
class C{  public boolean hasNext(){  if (bufferOffset < bufferFillSize) {    return true;  } else {    return this.fillBuffer();  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static Gender female(){  return new Gender(FEMALE);}  }
class C{  public void printDocumentEntry(DocumentListEntry doc){  StringBuffer buffer=new StringBuffer();  buffer.append(" -- " + doc.getTitle().getPlainText() + " ");  if (!doc.getParentLinks().isEmpty()) {    for (    Link link : doc.getParentLinks()) {      buffer.append("[" + link.getTitle() + "] ");    }  }  buffer.append(doc.getResourceId());  output.println(buffer);}  }
class C{  public void merge(RefactoringStatus other){  if (other == null)   return;  fEntries.addAll(other.fEntries);  fSeverity=Math.max(fSeverity,other.getSeverity());}  }
class C{  @Deprecated public static boolean encode(final String s,final String encoding,BitSet safeOctets,boolean plusForSpace,Appendable out) throws UnsupportedEncodingException, IOException {  byte[] data=s.getBytes(encoding);  boolean containsSpace=false;  int outputLength=0;  for (int i=0; i < data.length; i++) {    int c=data[i];    if (c < 0)     c+=256;    if (safeOctets.get(c)) {      out.append((char)c);      outputLength+=1;    } else     if (plusForSpace && (c == ' ')) {      containsSpace=true;      out.append('+');      outputLength+=1;    } else {      out.append('%');      out.append(HEX_DIGITS[c >> 4]);      out.append(HEX_DIGITS[c & 0xf]);      outputLength+=3;    }  }  return containsSpace || (outputLength != s.length());}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (wildcardExport: ");  result.append(wildcardExport);  result.append(", defaultExport: ");  result.append(defaultExport);  result.append(')');  return result.toString();}  }
class C{  @Override public double logDensity(double value){  updateBoundariesAndOrWeights();  if (m_Boundaries == null) {    return Math.log(Double.MIN_VALUE);  }  int index=Arrays.binarySearch(m_Boundaries,value);  if ((index == -1) || (index == -m_Boundaries.length - 1)) {    double val=0;    if (index == -1) {      val=m_TM.firstKey() - value;    } else {      val=value - m_TM.lastKey();    }    return (CONST - Math.log(m_Width) - 0.5 * (val * val / (m_Width * m_Width))) - Math.log(m_SumOfWeights + 2);  }  if (index == m_Boundaries.length - 1) {    index--;  } else {    if (index < 0) {      index=-index - 2;    }  }  double width=m_Boundaries[index + 1] - m_Boundaries[index];  double densSmearedOut=1.0 / ((m_SumOfWeights + 2) * (m_Boundaries[m_Boundaries.length - 1] - m_Boundaries[0]));  if (m_Weights[index] <= 0) {    return Math.log(densSmearedOut);  } else {    return Math.log(densSmearedOut + m_Weights[index] / ((m_SumOfWeights + 2) * width));  }}  }
class C{  @Override public void dispose(){  InstanceManager.getOptionalDefault(UserPreferencesManager.class).ifPresent(null);  log.debug("dispose \"{}\"",getTitle());  if (windowInterface != null) {    windowInterface.dispose();  }  if (task != null) {    jmri.InstanceManager.getDefault(jmri.ShutDownManager.class).deregister(task);    task=null;  }synchronized (list) {    list.remove(this);  }  super.dispose();}  }
class C{  public void testGenExemptionBlob() throws Exception {  Provider mProv=(new SpiEngUtils()).new MyProvider("MyExMechProvider","Provider for ExemptionMechanism testing",srvExemptionMechanism.concat(".").concat(defaultAlg),ExemptionMechanismProviderClass);  ExemptionMechanism em=new ExemptionMechanism(new MyExemptionMechanismSpi(),mProv,defaultAlg){  };  Key key=new MyExemptionMechanismSpi().new tmpKey("Proba",new byte[0]);  em.init(key);  em.genExemptionBlob(null,0);  em.genExemptionBlob(new byte[0],0);  em.genExemptionBlob(new byte[10],-5);}  }
class C{  public void deleteLastParent(Instances _Instances){  m_nNrOfParents--;  m_nCardinalityOfParents=m_nCardinalityOfParents / _Instances.attribute(m_nParents[m_nNrOfParents]).numValues();}  }
class C{  public static void showViewInLastWindow(final Window parent,final IViewContainer container,final INaviView[] views){  showViews(parent,container,views,CWindowManager.instance().getLastWindow());}  }
class C{  private void computeMinDistancePolygonPolygon(PlanarPolygon3D poly0,Polygon poly1,boolean flip){  computeMinDistancePolygonRings(poly0,poly1,flip);  if (isDone)   return;  PlanarPolygon3D polyPlane1=new PlanarPolygon3D(poly1);  computeMinDistancePolygonRings(polyPlane1,poly0.getPolygon(),flip);}  }
class C{  public OCSPNoCheckExtension() throws IOException {  this.extensionId=PKIXExtensions.OCSPNoCheck_Id;  this.critical=false;  this.extensionValue=new byte[0];}  }
class C{  protected int retrieveEndBlockPosition(int start,int end){  this.scanner.resetTo(start,end);  int count=0;  try {    int token;    while ((token=this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {switch (token) {case TerminalTokens.TokenNameLBRACE:        count++;      break;case TerminalTokens.TokenNameRBRACE:    count--;  if (count == 0) {    return this.scanner.currentPosition - 1;  }}}} catch (InvalidInputException e) {}return -1;}  }
class C{  public void refine(TypeReference t){  if (!isPreciseType()) {    setType(t);  }}  }
class C{  public static BufferedReader newReader(URL url,Map parameters) throws MalformedURLException, IOException {  return IOGroovyMethods.newReader(configuredInputStream(parameters,url));}  }
class C{  public static boolean isAnonymousClass(JCNewClass newClass){  if (newClass.clazz != null && newClass.def != null) {    if (Util.hasAnnotationType(newClass.clazz.type.tsym,JSweetConfig.ANNOTATION_OBJECT_TYPE) || Util.hasAnnotationType(newClass.clazz.type.tsym,JSweetConfig.ANNOTATION_INTERFACE)) {      return false;    }    if (newClass.def.defs.size() > 2) {      return true;    }    for (    JCTree def : newClass.def.defs) {      if (def instanceof JCVariableDecl) {        return true;      }      if (def instanceof JCMethodDecl && !((JCMethodDecl)def).sym.isConstructor()) {        return true;      }      if (def instanceof JCBlock) {        for (        JCStatement s : ((JCBlock)def).stats) {          if (!isAllowedStatementInMap(s)) {            return true;          }        }      }    }  }  return false;}  }
class C{  public MoreLikeThisQueryBuilder addUnlikeText(String... unlikeTexts){  Collections.addAll(this.unlikeTexts,unlikeTexts);  return this;}  }
class C{  public SharedJAMonBufferListener(String name,BufferList list){  super(name,list);}  }
class C{  public void go(File file) throws IOException {  go(file,false);}  }
class C{  private void writeMetaBits() throws IOException {  final byte buf[]=genMetabitsData();  final long addr=m_metaBitsAddr < 0 ? physicalAddress(m_metaBitsAddr) : ((long)m_metaBitsAddr) << ALLOCATION_SCALEUP;  if (addr == 0) {    throw new IllegalStateException("Invalid metabits address: " + m_metaBitsAddr);  }  assert addr > 0;  try {    if (log.isDebugEnabled())     log.debug("writing metabits at: " + addr);    m_writeCacheService.write(addr,ByteBuffer.wrap(buf),0,false,m_metaBitsAddr < 0 ? m_metaBitsAddr : 0);  } catch (  InterruptedException e) {    throw new RuntimeException(e);  }}  }
class C{  public boolean isWon(){  return won;}  }
class C{  public byte[] generateSignature(){  if (!forSigning) {    throw new IllegalStateException("RainbowDigestSigner not initialised for signature generation.");  }  byte[] hash=new byte[messDigest.getDigestSize()];  messDigest.doFinal(hash,0);  return messSigner.generateSignature(hash);}  }
class C{  public static Object[] trimToCapacity(Object[] array,int maxCapacity){  if (array.length > maxCapacity) {    Object oldArray[]=array;    array=new Object[maxCapacity];    System.arraycopy(oldArray,0,array,0,maxCapacity);  }  return array;}  }
class C{  public static void assertLegalMatrixIndex(int i,int j,int rowNum,int colNum){  assertLegalRowIndex(i,rowNum);  assertLegalColIndex(j,colNum);}  }
class C{  public boolean water(World world,BlockPos pos,IBlockState state){  world.setBlockState(pos,WET_SOIL);  return true;}  }
class C{  public boolean created(){  return !getRequestedTypes().isEmpty() && getTypes().containsAll(getRequestedTypes());}  }
class C{  public AVCVideo(){  this.reset();}  }
class C{  public WeightDistribution(ColumnExampleTable columnTable,int[] selection,int attributeNumber){  calculateLabelWeights(columnTable,selection,attributeNumber);  leftLabelWeights=new double[totalLabelWeights.length];  leftWeight=0;  totalWeight=getTotalWeight(totalLabelWeights);  if (hasMissings) {    missingsWeight=getTotalWeight(missingsLabelWeights);    rightWeight=totalWeight - missingsWeight;    rightLabelWeights=arrayDifference(totalLabelWeights,missingsLabelWeights);  } else {    missingsWeight=0;    rightWeight=totalWeight;    rightLabelWeights=new double[totalLabelWeights.length];    System.arraycopy(totalLabelWeights,0,rightLabelWeights,0,totalLabelWeights.length);  }}  }
class C{  public boolean isWin95(){  return this.win95;}  }
class C{  private String createKeystoreFile() throws IOException, FileOperationFailedException {  InputStream keystoreFileStream=LDAPServer.class.getResourceAsStream(DEFAULT_KEYSTORE_FILE);  byte[] keystoreData=IOUtils.toByteArray(keystoreFileStream);  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();  outputStream.write(keystoreData);  String keyStoreDirName=getDefaultKeyStoreDirPath();  File keystoreDir=new File(keyStoreDirName);  if (!keystoreDir.exists()) {    if (!keystoreDir.mkdirs()) {      throw new FileOperationFailedException("create","directory",keyStoreDirName);    }  }  keystoreDir.deleteOnExit();  _log.debug("Keystore file {}",keyStoreDirName + DEFAULT_KEYSTORE_FILE);  File keystoreFile=new File(keyStoreDirName + DEFAULT_KEYSTORE_FILE);  if (keystoreFile.exists()) {    if (!keystoreFile.delete()) {      throw new FileOperationFailedException("delete","file",keystoreFile.getAbsolutePath());    }  }  if (!keystoreFile.createNewFile()) {    throw new FileOperationFailedException("create","file",keystoreFile.getAbsolutePath());  }  keystoreFile.setWritable(true);  keystoreFile.deleteOnExit();  FileOutputStream keyStoreFileOutStream=new FileOutputStream(keystoreFile);  outputStream.writeTo(keyStoreFileOutStream);  outputStream.close();  keyStoreFileOutStream.close();  return keystoreFile.getAbsolutePath();}  }
class C{  private void forceOverflowMenu(){  try {    ViewConfiguration config=ViewConfiguration.get(this);    Field menuKeyField=ViewConfiguration.class.getDeclaredField("sHasPermanentMenuKey");    if (menuKeyField != null) {      menuKeyField.setAccessible(true);      menuKeyField.setBoolean(config,false);    }  } catch (  IllegalAccessException e) {    Log.w(TAG,"Failed to force overflow menu.");  }catch (  NoSuchFieldException e) {    Log.w(TAG,"Failed to force overflow menu.");  }}  }
class C{  public static Map<String,String> strToMap(String str,boolean trim){  return strToMap(str,"|",trim);}  }
class C{  private void visitCall(GroovyPsiElement call){  if (myCaughtExceptionInfos.size() <= 0 && myFinallyCount <= 0) {    return;  }  final InstructionImpl instruction=new ThrowingInstruction(call);  addNodeAndCheckPending(instruction);  for (  ExceptionInfo info : myCaughtExceptionInfos) {    info.myThrowers.add(instruction);  }  if (myFinallyCount > 0) {    addPendingEdge(null,instruction);  }}  }
class C{  @Override public void perform(IR ir){  collectOsrPointsAndBarriers(ir);  renovateOsrPoints(ir);  removeOsrBarriers(ir);  fixupCFGForOsr(ir);  branchOpts.perform(ir);}  }
class C{  public void appendChildren(Node parent){  Node child=parent.getFirstChild();  if (child == null) {    return;  }  ParentNode another=(ParentNode)parent;  if (firstChild == null) {    firstChild=child;  } else {    lastChild.setNextSibling(child);  }  lastChild=another.lastChild;  do {    child.setParentNode(this);  } while ((child=child.getNextSibling()) != null);  another.firstChild=null;  another.lastChild=null;}  }
class C{  public void generateCentered(int n,float centering,Callback2d callback){  float start=centering * 0.5f;  float end=1.0f - centering;  for (int y=0; y < n; y++) {    for (int x=0; x < n; x++) {      float sampleX=((start + rnd.nextFloat() * end) / n + (float)x / n) * 2.0f - 1.0f;      float sampleY=((start + rnd.nextFloat() * end) / n + (float)y / n) * 2.0f - 1.0f;      callback.onNewSample(sampleX,sampleY);    }  }}  }
class C{  public static ComputeState provisionMachine(VerificationHost host,ComputeState vmState,boolean isMock,List<String> instancesToCleanUp) throws InterruptedException, TimeoutException, Throwable {  return provisionMachine(host,null,vmState,isMock,instancesToCleanUp);}  }
class C{  public InlineQueryResultContact.InlineQueryResultContactBuilder firstName(String firstName){  this.first_name=firstName;  return this;}  }
class C{  public SurfaceCircle(LatLon center,double radius){  super(center,radius,radius);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:33.369 -0500",hash_original_method="264D7373D1280C46B7B3C63F3DA0F057",hash_generated_method="0BBF51B5D4A1AFD777DF9DF211414B13") public PEMReader(Reader reader,PasswordFinder pFinder){  this(reader,pFinder,"BC");}  }
class C{  public T startAttr(String value){  return attr("start",value);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void enlarge(final int size){  int length1=2 * data.length;  int length2=length + size;  byte[] newData=new byte[length1 > length2 ? length1 : length2];  System.arraycopy(data,0,newData,0,length);  data=newData;}  }
class C{  public VegetableGrower(final String name){  super("items/grower/" + name + "_grower","items/grower/" + name + " grower","Pick",1,1,1);  vegetableName=name;  setDescription("It looks like there's " + Grammar.a_noun(name) + " sprouting here.");}  }
class C{  public CloseAction(){  super("Start");}  }
class C{  public void emitop0(int op){  emitop(op);  if (!alive)   return;switch (op) {case aaload:{      state.pop(1);      Type a=state.stack[state.stacksize - 1];      state.pop(1);      Type stackType=a.hasTag(BOT) ? syms.objectType : types.erasure(types.elemtype(a));      state.push(stackType);    }  break;case goto_:markDead();break;case nop:case ineg:case lneg:case fneg:case dneg:break;case aconst_null:state.push(syms.botType);break;case iconst_m1:case iconst_0:case iconst_1:case iconst_2:case iconst_3:case iconst_4:case iconst_5:case iload_0:case iload_1:case iload_2:case iload_3:state.push(syms.intType);break;case lconst_0:case lconst_1:case lload_0:case lload_1:case lload_2:case lload_3:state.push(syms.longType);break;case fconst_0:case fconst_1:case fconst_2:case fload_0:case fload_1:case fload_2:case fload_3:state.push(syms.floatType);break;case dconst_0:case dconst_1:case dload_0:case dload_1:case dload_2:case dload_3:state.push(syms.doubleType);break;case aload_0:state.push(lvar[0].sym.type);break;case aload_1:state.push(lvar[1].sym.type);break;case aload_2:state.push(lvar[2].sym.type);break;case aload_3:state.push(lvar[3].sym.type);break;case iaload:case baload:case caload:case saload:state.pop(2);state.push(syms.intType);break;case laload:state.pop(2);state.push(syms.longType);break;case faload:state.pop(2);state.push(syms.floatType);break;case daload:state.pop(2);state.push(syms.doubleType);break;case istore_0:case istore_1:case istore_2:case istore_3:case fstore_0:case fstore_1:case fstore_2:case fstore_3:case astore_0:case astore_1:case astore_2:case astore_3:case pop:case lshr:case lshl:case lushr:state.pop(1);break;case areturn:case ireturn:case freturn:Assert.check(state.nlocks == 0);state.pop(1);markDead();break;case athrow:state.pop(1);markDead();break;case lstore_0:case lstore_1:case lstore_2:case lstore_3:case dstore_0:case dstore_1:case dstore_2:case dstore_3:case pop2:state.pop(2);break;case lreturn:case dreturn:Assert.check(state.nlocks == 0);state.pop(2);markDead();break;case dup:state.push(state.stack[state.stacksize - 1]);break;case return_:Assert.check(state.nlocks == 0);markDead();break;case arraylength:state.pop(1);state.push(syms.intType);break;case isub:case iadd:case imul:case idiv:case imod:case ishl:case ishr:case iushr:case iand:case ior:case ixor:state.pop(1);break;case aastore:state.pop(3);break;case land:case lor:case lxor:case lmod:case ldiv:case lmul:case lsub:case ladd:state.pop(2);break;case lcmp:state.pop(4);state.push(syms.intType);break;case l2i:state.pop(2);state.push(syms.intType);break;case i2l:state.pop(1);state.push(syms.longType);break;case i2f:state.pop(1);state.push(syms.floatType);break;case i2d:state.pop(1);state.push(syms.doubleType);break;case l2f:state.pop(2);state.push(syms.floatType);break;case l2d:state.pop(2);state.push(syms.doubleType);break;case f2i:state.pop(1);state.push(syms.intType);break;case f2l:state.pop(1);state.push(syms.longType);break;case f2d:state.pop(1);state.push(syms.doubleType);break;case d2i:state.pop(2);state.push(syms.intType);break;case d2l:state.pop(2);state.push(syms.longType);break;case d2f:state.pop(2);state.push(syms.floatType);break;case tableswitch:case lookupswitch:state.pop(1);break;case dup_x1:{Type val1=state.pop1();Type val2=state.pop1();state.push(val1);state.push(val2);state.push(val1);break;}case bastore:state.pop(3);break;case int2byte:case int2char:case int2short:break;case fmul:case fadd:case fsub:case fdiv:case fmod:state.pop(1);break;case castore:case iastore:case fastore:case sastore:state.pop(3);break;case lastore:case dastore:state.pop(4);break;case dup2:if (state.stack[state.stacksize - 1] != null) {Type value1=state.pop1();Type value2=state.pop1();state.push(value2);state.push(value1);state.push(value2);state.push(value1);} else {Type value=state.pop2();state.push(value);state.push(value);}break;case dup2_x1:if (state.stack[state.stacksize - 1] != null) {Type value1=state.pop1();Type value2=state.pop1();Type value3=state.pop1();state.push(value2);state.push(value1);state.push(value3);state.push(value2);state.push(value1);} else {Type value1=state.pop2();Type value2=state.pop1();state.push(value1);state.push(value2);state.push(value1);}break;case dup2_x2:if (state.stack[state.stacksize - 1] != null) {Type value1=state.pop1();Type value2=state.pop1();if (state.stack[state.stacksize - 1] != null) {Type value3=state.pop1();Type value4=state.pop1();state.push(value2);state.push(value1);state.push(value4);state.push(value3);state.push(value2);state.push(value1);} else {Type value3=state.pop2();state.push(value2);state.push(value1);state.push(value3);state.push(value2);state.push(value1);}} else {Type value1=state.pop2();if (state.stack[state.stacksize - 1] != null) {Type value2=state.pop1();Type value3=state.pop1();state.push(value1);state.push(value3);state.push(value2);state.push(value1);} else {Type value2=state.pop2();state.push(value1);state.push(value2);state.push(value1);}}break;case dup_x2:{Type value1=state.pop1();if (state.stack[state.stacksize - 1] != null) {Type value2=state.pop1();Type value3=state.pop1();state.push(value1);state.push(value3);state.push(value2);state.push(value1);} else {Type value2=state.pop2();state.push(value1);state.push(value2);state.push(value1);}}break;case fcmpl:case fcmpg:state.pop(2);state.push(syms.intType);break;case dcmpl:case dcmpg:state.pop(4);state.push(syms.intType);break;case swap:{Type value1=state.pop1();Type value2=state.pop1();state.push(value1);state.push(value2);break;}case dadd:case dsub:case dmul:case ddiv:case dmod:state.pop(2);break;case ret:markDead();break;case wide:return;case monitorenter:case monitorexit:state.pop(1);break;default :throw new AssertionError(mnem(op));}postop();}  }
class C{  public PacketPING(){  super(PT_PING);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  static boolean isRegistered(final Object value){  final Set<IDKey> registry=getRegistry();  return registry != null && registry.contains(new IDKey(value));}  }
class C{  public static final long used(){  return total() - free();}  }
class C{  @LargeTest public void testEnforceSelectionDoesNotCrossAnchorBoundary3() throws Exception {  sExecutedTestCount++;  String html="<!DOCTYPE html>" + "<html>" + "<head>"+ "</head>"+ "<body>"+ "<div>"+ "First"+ "<div>"+ "<div>"+ "<a href=\"#\">Second</a>"+ "</div>"+ "<div>"+ "Third"+ "</div>"+ "</body>"+ "</html>";  WebView webView=loadHTML(html);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("First");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<a href=\"#\">Second</a>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("Third");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString(null);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("Third");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("<a href=\"#\">Second</a>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("First");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString(null);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("First");}  }
class C{  private boolean compareAndIncrementWorkerCount(int expect){  return ctl.compareAndSet(expect,expect + 1);}  }
class C{  public boolean complete(){  return mComplete;}  }
class C{  public RSyntaxTextAreaDefaultInputMap(){  int defaultMod=getDefaultModifier();  int shift=InputEvent.SHIFT_MASK;  put(KeyStroke.getKeyStroke(KeyEvent.VK_TAB,shift),RSyntaxTextAreaEditorKit.rstaDecreaseIndentAction);  put(KeyStroke.getKeyStroke('}'),RSyntaxTextAreaEditorKit.rstaCloseCurlyBraceAction);  put(KeyStroke.getKeyStroke('/'),RSyntaxTextAreaEditorKit.rstaCloseMarkupTagAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_SLASH,defaultMod),RSyntaxTextAreaEditorKit.rstaToggleCommentAction);  put(KeyStroke.getKeyStroke(KeyEvent.VK_OPEN_BRACKET,defaultMod),RSyntaxTextAreaEditorKit.rstaGoToMatchingBracketAction);  put(CodeTemplateManager.TEMPLATE_KEYSTROKE,RSyntaxTextAreaEditorKit.rstaPossiblyInsertTemplateAction);}  }
class C{  public MPaymentProcessor(Properties ctx,ResultSet rs,String trxName){  super(ctx,rs,trxName);}  }
class C{  public final GeoShapeMapper column(String column){  this.column=column;  return this;}  }
class C{  public DANN(int kn,int k,double eps,int maxIterations,VectorCollectionFactory<VecPaired<Vec,Integer>> vcf){  setK(k);  setKn(kn);  setEpsilon(eps);  setMaxIterations(maxIterations);  this.vcf=vcf;}  }
class C{  protected static PageCursorsInfo calculateCursorsInfo(List<RecordInfo> records) throws Exception {  PageCursorsInfo cursorInfo=new PageCursorsInfo();  for (  RecordInfo record : records) {    byte[] data=record.data;    ActiveMQBuffer buff=ActiveMQBuffers.wrappedBuffer(data);    if (record.userRecordType == JournalRecordIds.ACKNOWLEDGE_CURSOR) {      CursorAckRecordEncoding encoding=new CursorAckRecordEncoding();      encoding.decode(buff);      Set<PagePosition> set=cursorInfo.getCursorRecords().get(encoding.queueID);      if (set == null) {        set=new HashSet<>();        cursorInfo.getCursorRecords().put(encoding.queueID,set);      }      set.add(encoding.position);    } else     if (record.userRecordType == JournalRecordIds.PAGE_CURSOR_COMPLETE) {      CursorAckRecordEncoding encoding=new CursorAckRecordEncoding();      encoding.decode(buff);      Long queueID=Long.valueOf(encoding.queueID);      Long pageNR=Long.valueOf(encoding.position.getPageNr());      if (!cursorInfo.getCompletePages(queueID).add(pageNR)) {        System.err.println("Page " + pageNR + " has been already set as complete on queue "+ queueID);      }    } else     if (record.userRecordType == JournalRecordIds.PAGE_TRANSACTION) {      if (record.isUpdate) {        PageUpdateTXEncoding pageUpdate=new PageUpdateTXEncoding();        pageUpdate.decode(buff);        cursorInfo.getPgTXs().add(pageUpdate.pageTX);      } else {        PageTransactionInfoImpl pageTransactionInfo=new PageTransactionInfoImpl();        pageTransactionInfo.decode(buff);        pageTransactionInfo.setRecordID(record.id);        cursorInfo.getPgTXs().add(pageTransactionInfo.getTransactionID());      }    }  }  return cursorInfo;}  }
class C{  private static void removeInnerNameFolder(Path worldPath){  try {    Files.delete(worldPath.resolve("DIM-1"));  } catch (  IOException ignore) {  }  try {    Files.delete(worldPath.resolve("DIM1"));  } catch (  IOException ignore) {  }}  }
class C{  public static double P_Harmonic(int y[],int ypred[]){  int[][] aligned=align(y,ypred);  int[] yAligned=aligned[0];  int[] ypredAligned=aligned[1];  int L=yAligned.length;  double acc[]=new double[2];  double N[]=new double[2];  for (int j=0; j < L; j++) {    N[yAligned[j]]++;    if (yAligned[j] == ypredAligned[j])     acc[yAligned[j]]++;  }  for (int v=0; v < 2; v++) {    acc[v]=acc[v] / N[v];  }  return 2. / ((1. / acc[0]) + (1. / acc[1]));}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  DefaultDrawingSupplier clone=(DefaultDrawingSupplier)super.clone();  return clone;}  }
class C{  private void applyDrawCall(final byte[] drawCall){  final byte color=drawCall[State.COLOR.ordinal()];  final byte xin=drawCall[State.X.ordinal()];  final byte yin=drawCall[State.Y.ordinal()];  final byte w=drawCall[State.W.ordinal()];  final byte h=drawCall[State.H.ordinal()];  final int x0=MARGIN + Math.max(0,xin);  final int x1=MARGIN + Math.min(RESOLUTION - 2 * MARGIN,xin + w);  final int y0=MARGIN + Math.max(0,yin);  final int y1=MARGIN + Math.min(RESOLUTION - 2 * MARGIN,yin + h);  for (int y=y0; y < y1; y++) {    final int offset=y * RESOLUTION;    for (int x=x0; x < x1; x++) {      final int index=offset + x;      image[index]=ColorUtils.getColorByIndex(Math.max(0,color));    }  }}  }
class C{  public BasicTreeModel(TreeNode root){  this.setRoot(root);}  }
class C{  public Pan(AbstractChart chart){  super(chart);}  }
class C{  @Override public void flush() throws IOException {  super.flush();}  }
class C{  private List<NondominatedPopulation> load(File file,Problem problem) throws IOException {  ResultFileReader reader=null;  try {    reader=new ResultFileReader(problem,file);    List<NondominatedPopulation> data=new ArrayList<NondominatedPopulation>();    while (reader.hasNext()) {      data.add(reader.next().getPopulation());    }    return data;  }  finally {    if (reader != null) {      reader.close();    }  }}  }
class C{  public void requestUpdateFromLayout(){  try {    IOValue value=node.getXBee().getDIOValue(IOLine.getDIO(pin));    if ((value == IOValue.HIGH) ^ _inverted) {      setOwnState(Sensor.ACTIVE);    } else {      setOwnState(Sensor.INACTIVE);    }  } catch (  TimeoutException toe) {    log.error("Timeout retrieving IO line value for {} on {}",IOLine.getDIO(pin),node.getXBee());    setOwnState(Sensor.UNKNOWN);  }catch (  InterfaceNotOpenException ino) {    log.error("Interface Not Open retrieving IO line value for {} on {}",IOLine.getDIO(pin),node.getXBee());  }catch (  XBeeException xbe) {    log.error("Error retrieving IO line value for {} on {}",IOLine.getDIO(pin),node.getXBee());  }}  }
class C{  void assign(String variableName,Object obj){  objects.put(variableName,obj);}  }
class C{  public static int run(final String cmd,final String stdoutFileName,final int timeout){  return run(cmd,stdoutFileName,timeout,null);}  }
class C{  public CompilationPlan(NormalMethod m,OptimizationPlanElement op,InstrumentationPlan mp,OptOptions opts){  this(m,new OptimizationPlanElement[]{op},mp,opts);}  }
class C{  public static XMLObject unmarshallSAMLObj(Document document) throws UnmarshallingException, ConfigurationException {  Validate.notNull(document);  Element root=document.getDocumentElement();  UnmarshallerFactory unmarshallerFactory=Configuration.getUnmarshallerFactory();  Unmarshaller unmarshaller=unmarshallerFactory.getUnmarshaller(root);  XMLObject obj=unmarshaller.unmarshall(root);  return obj;}  }
class C{  @Inline @Override public final void byteWrite(ObjectReference objref,byte value,Word offset,Word location,int mode){  Magic.setByteAtOffset(objref.toObject(),offset.toOffset(),value,location.toInt());}  }
class C{  public DeleteIndexedScriptRequest scriptLang(String type){  this.scriptLang=type;  return this;}  }
class C{  public static ChromeTab createFrozenTabFromState(int id,ChromeActivity activity,boolean incognito,WindowAndroid nativeWindow,int parentId,TabState state){  assert state != null;  return new ChromeTab(id,activity,incognito,nativeWindow,TabLaunchType.FROM_RESTORE,parentId,TabCreationState.FROZEN_ON_RESTORE,state);}  }
class C{  public synchronized List<Relationship> findAllRelationshipsTo(Vertex vertex){  List<Relationship> relationships=new ArrayList<Relationship>();  Iterator<Vertex> iterator=findAll().iterator();  while (iterator.hasNext()) {    Vertex next=iterator.next();    Iterator<Relationship> allRelationships=next.allRelationships();    while (allRelationships.hasNext()) {      Relationship relationship=allRelationships.next();      if (relationship.getTarget() == vertex) {        relationships.add(relationship);      } else       if (relationship.getType() == vertex) {        relationships.add(relationship);      }    }  }  return relationships;}  }
class C{  public Builder withTaskQueue(String taskQueueXml){  rule.withTaskQueue=true;  rule.taskQueueXml=taskQueueXml;  return this;}  }
class C{  public boolean add(Key key){  return m_map.put(key,OBJECT) == null;}  }
class C{  public boolean isDoesImplement(){  return trapCode == RuntimeEntrypoints.TRAP_MUST_IMPLEMENT;}  }
class C{  private void checkDELETEStatusCode(String requestUrl,int statusCode){  delete(requestUrl).then().assertThat().statusCode(statusCode);}  }
class C{  public static void send(InternalDistributedMember recipient,int processorId,EntrySnapshot value,DM dm,ReplyException re){  Assert.assertTrue(recipient != null,"FetchEntryReplyMessage NULL recipient");  FetchEntryReplyMessage m=new FetchEntryReplyMessage(processorId,value,re);  m.setRecipient(recipient);  dm.putOutgoing(m);}  }
class C{  public void test_deletePreExistingVersion_noConflict(){  final Journal journal=getStore();  try {    final String name="abc";{      IndexMetadata md=new IndexMetadata(name,UUID.randomUUID());      md.setIsolatable(true);      journal.registerIndex(md);      journal.commit();    }    final byte[] id0=new byte[]{1};    final byte[] v0=getRandomData().array();    assertNull(journal.getIndex(name).lookup(id0));    journal.getIndex(name).insert(id0,v0);    assertEquals(v0,journal.getIndex(name).lookup(id0));    journal.commit();    final long tx0=journal.newTx(ITx.UNISOLATED);    assertEquals(v0,journal.getIndex(name,tx0).lookup(id0));    assertEquals(v0,journal.getIndex(name,tx0).remove(id0));    assertTrue(journal.getIndex(name).contains(id0));    assertEquals(v0,journal.getIndex(name).lookup(id0));    assertFalse(journal.getIndex(name,tx0).contains(id0));    assertNull(journal.getIndex(name,tx0).lookup(id0));    journal.commit(tx0);    assertFalse(journal.getIndex(name).contains(id0));  }  finally {    journal.destroy();  }}  }
class C{  public MqttSecurityException(Throwable cause){  super(cause);}  }
class C{  public SolrCore(String host,String name){  this.host=host;  this.name=name;  this.available=false;  numDocs=0;  maxDocs=0;  deletedDocs=0;  version=0;  segmentCount=0;  lastModified=null;  sizeInBytes=0;  this.current=false;}  }
class C{  @Override protected void onDraw(Canvas canvas){  setClickable(true);  float cx=getWidth() / 2;  float cy=getHeight() / 2;  float radius=getWidth() / 2.6f;  float left=(float)(cx - (0.5 * mBitmap.getWidth()));  float top=(getHeight() - mBitmap.getHeight()) / 2;  canvas.drawCircle(cx,cy,radius,mButtonPaint);  canvas.drawBitmap(mBitmap,left,top,mDrawablePaint);}  }
class C{  protected long completedDuration(){  return overallEndTime() - timestamp;}  }
class C{  public void encode(DerOutputStream out) throws IOException {  out.putIA5String(name);}  }
class C{  public TreeSummary(final int burninTrees,final int burninStates,double posteriorLimit,boolean createSummaryTree,boolean createCladeMap,String inputFileName,String outputFileName) throws IOException {  this.posteriorLimit=posteriorLimit;  CladeSystem cladeSystem=new CladeSystem();  int burnin=-1;  totalTrees=10000;  totalTreesUsed=0;  progressStream.println("Reading trees (bar assumes 10,000 trees)...");  progressStream.println("0              25             50             75            100");  progressStream.println("|--------------|--------------|--------------|--------------|");  int stepSize=totalTrees / 60;  if (stepSize < 1)   stepSize=1;  cladeSystem=new CladeSystem();  FileReader fileReader=new FileReader(inputFileName);  TreeImporter importer=new NexusImporter(fileReader);  try {    totalTrees=0;    while (importer.hasTree()) {      Tree tree=importer.importNextTree();      int state=Integer.MAX_VALUE;      if (burninStates > 0) {        String name=tree.getId().trim();        if (name != null && name.length() > 0 && name.startsWith("STATE_")) {          state=Integer.parseInt(name.split("_")[1]);        }      }      if (totalTrees >= burninTrees && state >= burninStates) {        if (burnin < 0) {          burnin=totalTrees;        }        cladeSystem.add(tree,true);        totalTreesUsed+=1;      }      if (totalTrees > 0 && totalTrees % stepSize == 0) {        progressStream.print("*");        progressStream.flush();      }      totalTrees++;    }  } catch (  Importer.ImportException e) {    System.err.println("Error Parsing Input Tree: " + e.getMessage());    return;  }  fileReader.close();  progressStream.println();  progressStream.println();  if (totalTrees < 1) {    System.err.println("No trees");    return;  }  if (totalTreesUsed <= 1) {    if (burnin > 0) {      System.err.println("No trees to use: burnin too high");      return;    }  }  cladeSystem.calculateCladeCredibilities(totalTreesUsed);  progressStream.println("Total trees read: " + totalTrees);  if (burninTrees > 0) {    progressStream.println("Ignoring first " + burninTrees + " trees"+ (burninStates > 0 ? " (" + burninStates + " states)." : "."));  } else   if (burninStates > 0) {    progressStream.println("Ignoring first " + burninStates + " states ("+ burnin+ " trees).");  }  progressStream.println("Total unique clades: " + cladeSystem.getCladeMap().keySet().size());  progressStream.println();  if (createCladeMap) {    Map<BitSet,Integer> cladeCountMap=cladeSystem.getCladeCounts();    System.out.println("No.\tSize\tCred\tMembers");    int n=1;    for (    BitSet bits : cladeCountMap.keySet()) {      System.out.print(n);      System.out.print("\t");      System.out.print(bits.cardinality());      System.out.print("\t");      System.out.print(cladeSystem.getCladeCredibility(bits));      System.out.print("\t");      System.out.println(cladeSystem.getCladeString(bits));      n++;    }    System.out.println();    progressStream.println("Reading trees...");    progressStream.println("0              25             50             75            100");    progressStream.println("|--------------|--------------|--------------|--------------|");    stepSize=totalTrees / 60;    fileReader=new FileReader(inputFileName);    importer=new NexusImporter(fileReader);    final PrintStream stream=outputFileName != null ? new PrintStream(new FileOutputStream(outputFileName)) : System.out;    stream.print("Clade");    n=1;    for (    BitSet bits : cladeCountMap.keySet()) {      stream.print("\t");      stream.print(n);      n++;    }    stream.println();    stream.print("State");    for (    BitSet bits : cladeCountMap.keySet()) {      stream.print("\t");      stream.print(cladeSystem.getCladeCredibility(bits));    }    stream.println();    try {      totalTrees=0;      while (importer.hasTree()) {        Tree tree=importer.importNextTree();        int state=totalTrees;        if (burninStates > 0) {          String name=tree.getId().trim();          if (name != null && name.length() > 0 && name.startsWith("STATE_")) {            state=Integer.parseInt(name.split("_")[1]);          }        }        if (totalTrees >= burninTrees && state >= burninStates) {          if (burnin < 0) {            burnin=totalTrees;          }          stream.print(state);          Set<BitSet> cladeSet=cladeSystem.getCladeSet(tree);          for (          BitSet bits : cladeCountMap.keySet()) {            stream.print("\t");            stream.print(cladeSet.contains(bits) ? "1" : "0");          }          stream.println();          totalTreesUsed+=1;        }        if (totalTrees > 0 && totalTrees % stepSize == 0) {          progressStream.print("*");          progressStream.flush();        }        totalTrees++;      }    } catch (    Importer.ImportException e) {      System.err.println("Error Parsing Input Tree: " + e.getMessage());      return;    }    fileReader.close();    stream.close();    progressStream.println();    progressStream.println();  }  if (createSummaryTree) {    progressStream.println("Finding summary tree...");    Tree consensusTree=buildConsensusTree(cladeSystem);    progressStream.println("Writing consensus tree....");    try {      final PrintStream stream=outputFileName != null ? new PrintStream(new FileOutputStream(outputFileName)) : System.out;      new NexusExporter(stream).exportTree(consensusTree);    } catch (    Exception e) {      System.err.println("Error writing consensus tree file: " + e.getMessage());      return;    }  }}  }
class C{  public synchronized Address alloc(){  for (int i=0; i < allocated.length; i++) {    if (!allocated[i]) {      return alloc(i);    }  }  dump();  throw new Error("Stack space exhausted");}  }
class C{  private void writeStringWithoutLength(String s,int len){  int p=pos;  byte[] buff=data;  for (int i=0; i < len; i++) {    int c=s.charAt(i);    if (c < 0x80) {      buff[p++]=(byte)c;    } else     if (c >= 0x800) {      buff[p++]=(byte)(0xe0 | (c >> 12));      buff[p++]=(byte)(((c >> 6) & 0x3f));      buff[p++]=(byte)(c & 0x3f);    } else {      buff[p++]=(byte)(0xc0 | (c >> 6));      buff[p++]=(byte)(c & 0x3f);    }  }  pos=p;}  }
class C{  @Override protected boolean matchPropertyName(java.beans.PropertyChangeEvent e){  if (!showLocoMonitor && (e.getPropertyName().equals("Speed") || e.getPropertyName().equals("Direction"))) {    return false;  }  return true;}  }
class C{  public String scan(String tablesToFind,Hashtable<String,String> templateOptions,Writer writer) throws ReplicatorException, InterruptedException, SQLException, IOException {  int tablesRendered=0;  ArrayList<Table> tables=null;  if (tablesToFind == null) {    tables=db.getTables(dbName,true,true);  } else {    tables=new ArrayList<Table>();    String[] tableNames=tablesToFind.split(",");    for (    String tableName : tableNames) {      Table table=db.findTable(dbName,tableName,true);      if (table != null)       tables.add(table);    }  }  VelocityContext context=new VelocityContext();  for (  String option : templateOptions.keySet()) {    context.put(option,templateOptions.get(option));  }  context.put("dbName",dbName);  context.put("user",user);  context.put("url",url);  context.put("db",db);  context.put("renameDefinitions",renameDefinitions);  context.put("enum",EnumToStringFilter.class);  context.put("date",new java.util.Date());  context.put("reservedWordsOracle",reservedWordsOracle);  context.put("reservedWordsMySQL",reservedWordsMySQL);  context.put("velocity",velocity);  int size=tables.size();  for (int i=0; i < size; i++) {    Table table=tables.get(i);    if (i == 0)     context.put("first",true); else     context.put("first",false);    if (i >= size - 1)     context.put("last",true); else     context.put("last",false);    rename(table);    merge(context,table,writer);    tablesRendered++;  }  if (tablesRendered == 0) {    merge(context,null,writer);  }  return writer.toString();}  }
class C{  public void add(String name,T val){  nvPairs.add(name);  nvPairs.add(val);}  }
class C{  public ServerProxyMissingBody(){  requestFileName="getstate.query";  responseFile="missing-body.query";  responseContentType="text/xml; boundary=jetty771207119h3h10dty";}  }
class C{  public Object[] toArray(Object[] a){  if (a.length < count) {    a=new GraphicsNode[count];  }  System.arraycopy(children,0,a,0,count);  if (a.length > count) {    a[count]=null;  }  return a;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof DefaultHighLowDataset)) {    return false;  }  DefaultHighLowDataset that=(DefaultHighLowDataset)obj;  if (!this.seriesKey.equals(that.seriesKey)) {    return false;  }  if (!Arrays.equals(this.date,that.date)) {    return false;  }  if (!Arrays.equals(this.open,that.open)) {    return false;  }  if (!Arrays.equals(this.high,that.high)) {    return false;  }  if (!Arrays.equals(this.low,that.low)) {    return false;  }  if (!Arrays.equals(this.close,that.close)) {    return false;  }  if (!Arrays.equals(this.volume,that.volume)) {    return false;  }  return true;}  }
class C{  private void dump(){  Log.write("GCspy Subspace: ");  Util.dumpRange(start_,end_);  Log.writeln("\n  -- firstIndex=",firstIndex_);  Log.writeln("  -- blockNum=",blockNum_);}  }
class C{  public static String[][] invert(final String[][] array){  final String[][] newarray=new String[array.length][2];  for (int i=0; i < array.length; i++) {    newarray[i][0]=array[i][1];    newarray[i][1]=array[i][0];  }  return newarray;}  }
class C{  public TriggerDefinitionDataException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public float boost(){  return boost;}  }
class C{  private static List<ReilInstruction> createInstructions(final com.google.security.zynamics.reil.ReilBlock block){  final List<ReilInstruction> instructions=new ArrayList<ReilInstruction>();  for (  final com.google.security.zynamics.reil.ReilInstruction reilInstruction : block.getInstructions()) {    instructions.add(new ReilInstruction(reilInstruction));  }  return instructions;}  }
class C{  private int[] createRandomIrreduciblePolynomial(int deg,SecureRandom sr){  int[] resCoeff=new int[deg + 1];  resCoeff[deg]=1;  resCoeff[0]=field.getRandomNonZeroElement(sr);  for (int i=1; i < deg; i++) {    resCoeff[i]=field.getRandomElement(sr);  }  while (!isIrreducible(resCoeff)) {    int n=RandUtils.nextInt(sr,deg);    if (n == 0) {      resCoeff[0]=field.getRandomNonZeroElement(sr);    } else {      resCoeff[n]=field.getRandomElement(sr);    }  }  return resCoeff;}  }
class C{  public void testHyperbolicParameters() throws Exception {  SweetSpotSimilarity sim=getSimilarity("text_hyperbolic",SweetSpotSimilarity.class);  for (int i=1; i <= 1000; i++) {    assertTrue("MIN tf: i=" + i + " : s="+ sim.tf(i),3.3F <= sim.tf(i));    assertTrue("MAX tf: i=" + i + " : s="+ sim.tf(i),sim.tf(i) <= 7.7F);  }  assertEquals("MID tf",3.3F + (7.7F - 3.3F) / 2.0F,sim.tf(5),0.00001F);  assertEquals("norm 1",1.00F,sim.computeLengthNorm(1),0.0F);  assertEquals("norm 2",1.00F,sim.computeLengthNorm(2),0.0F);  assertEquals("norm 3",1.00F,sim.computeLengthNorm(3),0.0F);  assertEquals("norm 4",1.00F,sim.computeLengthNorm(4),0.0F);  assertEquals("norm 5",1.00F,sim.computeLengthNorm(5),0.0F);  assertTrue("norm 6 too high: " + sim.computeLengthNorm(6),sim.computeLengthNorm(6) < 1.0F);  assertTrue("norm 7 higher then norm 6",sim.computeLengthNorm(7) < sim.computeLengthNorm(6));  assertTrue("norm 20 not high enough: " + sim.computeLengthNorm(20),0.25F < sim.computeLengthNorm(20));}  }
class C{  static short sweepOneBlock(Address block,int[] markHistogram,final byte markState,final boolean resetMarkState){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(isAligned(block));  final boolean unused=isUnused(block);  if (unused && !SANITY_CHECK_LINE_MARKS)   return 0;  Address markTable=Line.getBlockMarkTable(block);  short markCount=0;  short conservativeSpillCount=0;  byte mark, lastMark=0;  for (int offset=0; offset < (LINES_IN_BLOCK << Line.LOG_BYTES_IN_LINE_STATUS); offset+=Line.BYTES_IN_LINE_STATUS) {    if (VM.VERIFY_ASSERTIONS) {      VM.assertions._assert(markTable.plus(offset).GE(Chunk.align(block).plus(Chunk.LINE_MARK_TABLE_OFFSET)));      VM.assertions._assert(markTable.plus(offset).LT(Chunk.align(block).plus(Chunk.LINE_MARK_TABLE_OFFSET + Line.LINE_MARK_TABLE_BYTES)));    }    mark=markTable.loadByte(Offset.fromIntZeroExtend(offset));    if (resetMarkState)     markTable.store(mark == markState ? RESET_LINE_MARK_STATE : 0,Offset.fromIntZeroExtend(offset));    if (mark == markState)     markCount++; else     if (lastMark == markState)     conservativeSpillCount++; else     if (SANITY_CHECK_LINE_MARKS && lastMark != markState) {      VM.memory.zero(false,block.plus(offset << (LOG_BYTES_IN_LINE - Line.LOG_BYTES_IN_LINE_STATUS)),Extent.fromIntZeroExtend(BYTES_IN_LINE));    }    lastMark=mark;  }  if (VM.VERIFY_ASSERTIONS) {    VM.assertions._assert(markCount <= LINES_IN_BLOCK);    VM.assertions._assert(markCount + conservativeSpillCount <= LINES_IN_BLOCK);    VM.assertions._assert(markCount == 0 || !isUnused(block));  }  getDefragStateAddress(block).store(conservativeSpillCount);  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(markCount >= conservativeSpillCount);  markHistogram[conservativeSpillCount]+=markCount;  markCount=(short)(markCount + conservativeSpillCount);  return markCount;}  }
class C{  public static void startEditFolderActivity(Context context,BookmarkId idToEdit){  Intent intent=new Intent(context,EnhancedBookmarkAddEditFolderActivity.class);  intent.putExtra(INTENT_IS_ADD_MODE,false);  intent.putExtra(INTENT_BOOKMARK_ID,idToEdit.toString());  context.startActivity(intent);}  }
class C{  private void cancelAcquire(Node node){  if (node == null)   return;  node.thread=null;  Node pred=node.prev;  while (pred.waitStatus > 0)   node.prev=pred=pred.prev;  Node predNext=pred.next;  node.waitStatus=Node.CANCELLED;  if (node == tail && compareAndSetTail(node,pred)) {    compareAndSetNext(pred,predNext,null);  } else {    int ws;    if (pred != head && ((ws=pred.waitStatus) == Node.SIGNAL || (ws <= 0 && compareAndSetWaitStatus(pred,ws,Node.SIGNAL))) && pred.thread != null) {      Node next=node.next;      if (next != null && next.waitStatus <= 0)       compareAndSetNext(pred,predNext,next);    } else {      unparkSuccessor(node);    }    node.next=node;  }}  }
class C{  public Activity put(String key,Activity activity){  return (Activity)m_map.put(key,activity);}  }
class C{  public static HashSet<String> createSetFromProperty(String property){  HashSet<String> properties=new HashSet<String>();  if (property != null && !property.equals("null")) {    Pattern params=Pattern.compile("([\\w]+)[;]*");    Matcher matcher=params.matcher(property.trim());    while (matcher.find()) {      properties.add(matcher.group(1));    }  }  return properties;}  }
class C{  public boolean isSendTargetsDiscoveryEnabled(){  return sendTargetsDiscoveryEnabled;}  }
class C{  private TaskResourceRep unlinkTargetVolumesFromSnapshotSession(URI sessionURI,SnapshotSessionUnlinkTargetsParam param,OperationTypeEnum opType){  return getSnapshotSessionManager().unlinkTargetVolumesFromSnapshotSession(sessionURI,param,opType);}  }
class C{  public boolean isValidFor(MWFActivity activity){  if (isStdUserWorkflow()) {    PO po=activity.getPO();    if (po instanceof DocAction) {      DocAction da=(DocAction)po;      String docStatus=da.getDocStatus();      String docAction=da.getDocAction();      if (!DocAction.ACTION_Complete.equals(docAction) || DocAction.STATUS_Completed.equals(docStatus) || DocAction.STATUS_WaitingConfirmation.equals(docStatus)|| DocAction.STATUS_WaitingPayment.equals(docStatus)|| DocAction.STATUS_Voided.equals(docStatus)|| DocAction.STATUS_Closed.equals(docStatus)|| DocAction.STATUS_Reversed.equals(docStatus)) {        log.fine("isValidFor =NO= StdUserWF - Status=" + docStatus + " - Action="+ docAction);        return false;      }    }  }  if (getConditions(false).length == 0) {    log.fine("#0 " + toString());    return true;  }  boolean ok=m_conditions[0].evaluate(activity);  for (int i=1; i < m_conditions.length; i++) {    if (m_conditions[i].isOr())     ok=ok || m_conditions[i].evaluate(activity); else     ok=ok && m_conditions[i].evaluate(activity);  }  log.fine("isValidFor (" + ok + ") "+ toString());  return ok;}  }
class C{  public void rollbackToSavepoint(long savepointId){  checkNotClosed();  store.rollbackTo(this,logId,savepointId);  logId=savepointId;}  }
class C{  private static Bitmap resizeImage(Resources res,int resourceId,int size,int viewWidth,float rotationDegrees,boolean isFlipped,float caneScale){  Matrix matrix=new Matrix();  Bitmap bmp=BitmapFactory.decodeResource(res,resourceId);  if (rotationDegrees != 361f) {    matrix.setRotate(rotationDegrees,bmp.getWidth() / 2,bmp.getHeight() / 2);  }  if (isFlipped) {    matrix.preScale(-1,1);  }  float scale=((float)viewWidth) / size;  matrix.postScale(scale,scale);  bmp=Bitmap.createBitmap(bmp,0,0,(int)(bmp.getWidth() * caneScale),bmp.getHeight(),matrix,true);  return bmp;}  }
class C{  @Override protected void validate(){  failIf(this.value < 0,"Lock Timeout must be > 0");}  }
class C{  public static List<SearchResult> runSearch(FlagConfig flagConfig) throws IllegalArgumentException {  if (flagConfig == null) {    throw new NullPointerException("flagConfig cannot be null");  }  if (flagConfig.remainingArgs == null) {    throw new IllegalArgumentException("No query terms left after flag parsing!");  }  String[] queryArgs=flagConfig.remainingArgs;  CloseableVectorStore queryVecReader=null;  CloseableVectorStore boundVecReader=null;  CloseableVectorStore elementalVecReader=null, semanticVecReader=null, predicateVecReader=null;  CloseableVectorStore searchVecReader=null;  try {    if (!flagConfig.elementalvectorfile().equals("elementalvectors") && !flagConfig.semanticvectorfile().equals("semanticvectors") && !flagConfig.elementalpredicatevectorfile().equals("predicatevectors")) {      VerbatimLogger.info("Opening query vector store from file: " + flagConfig.queryvectorfile() + "\n");      if (flagConfig.elementalvectorfile().equals("deterministic")) {        if (flagConfig.elementalmethod().equals(ElementalGenerationMethod.ORTHOGRAPHIC))         elementalVecReader=new VectorStoreOrthographical(flagConfig); else         if (flagConfig.elementalmethod().equals(ElementalGenerationMethod.CONTENTHASH))         elementalVecReader=new VectorStoreDeterministic(flagConfig); else         VerbatimLogger.info("Please select either -elementalmethod orthographic OR -elementalmethod contenthash depending upon the deterministic approach you would like used.");      } else       elementalVecReader=VectorStoreReader.openVectorStore(flagConfig.elementalvectorfile(),flagConfig);      VerbatimLogger.info("Opening elemental query vector store from file: " + flagConfig.elementalvectorfile() + "\n");      VerbatimLogger.info("Opening semantic query vector store from file: " + flagConfig.semanticvectorfile() + "\n");      VerbatimLogger.info("Opening predicate query vector store from file: " + flagConfig.elementalpredicatevectorfile() + "\n");      semanticVecReader=VectorStoreReader.openVectorStore(flagConfig.semanticvectorfile(),flagConfig);      predicateVecReader=VectorStoreReader.openVectorStore(flagConfig.elementalpredicatevectorfile(),flagConfig);    } else {      VerbatimLogger.info("Opening query vector store from file: " + flagConfig.queryvectorfile() + "\n");      if (flagConfig.queryvectorfile().equals("deterministic")) {        if (flagConfig.elementalmethod().equals(ElementalGenerationMethod.ORTHOGRAPHIC))         queryVecReader=new VectorStoreOrthographical(flagConfig); else         if (flagConfig.elementalmethod().equals(ElementalGenerationMethod.CONTENTHASH))         queryVecReader=new VectorStoreDeterministic(flagConfig); else         VerbatimLogger.info("Please select either -elementalmethod orthographic OR -elementalmethod contenthash depending upon the deterministic approach you would like used.");      } else       queryVecReader=VectorStoreReader.openVectorStore(flagConfig.queryvectorfile(),flagConfig);    }    if (flagConfig.boundvectorfile().length() > 0) {      VerbatimLogger.info("Opening second query vector store from file: " + flagConfig.boundvectorfile() + "\n");      boundVecReader=VectorStoreReader.openVectorStore(flagConfig.boundvectorfile(),flagConfig);    }    if (flagConfig.queryvectorfile().equals(flagConfig.searchvectorfile()) || flagConfig.searchvectorfile().isEmpty()) {      searchVecReader=queryVecReader;    } else {      VerbatimLogger.info("Opening search vector store from file: " + flagConfig.searchvectorfile() + "\n");      searchVecReader=VectorStoreReader.openVectorStore(flagConfig.searchvectorfile(),flagConfig);    }    if (!flagConfig.luceneindexpath().isEmpty()) {      try {        luceneUtils=new LuceneUtils(flagConfig);      } catch (      IOException e) {        logger.warning("Couldn't open Lucene index at " + flagConfig.luceneindexpath() + ". Will continue without term weighting.");      }    }  } catch (  IOException e) {    e.printStackTrace();  }  if (!flagConfig.matchcase()) {    for (int i=0; i < queryArgs.length; ++i) {      queryArgs[i]=queryArgs[i].toLowerCase();    }  }  VectorSearcher vecSearcher;  LinkedList<SearchResult> results;  VerbatimLogger.info("Searching term vectors, searchtype " + flagConfig.searchtype() + "\n");  try {switch (flagConfig.searchtype()) {case SUM:      vecSearcher=new VectorSearcher.VectorSearcherCosine(queryVecReader,searchVecReader,luceneUtils,flagConfig,queryArgs);    break;case SUBSPACE:  vecSearcher=new VectorSearcher.VectorSearcherSubspaceSim(queryVecReader,searchVecReader,luceneUtils,flagConfig,queryArgs);break;case MAXSIM:vecSearcher=new VectorSearcher.VectorSearcherMaxSim(queryVecReader,searchVecReader,luceneUtils,flagConfig,queryArgs);break;case MINSIM:vecSearcher=new VectorSearcher.VectorSearcherMinSim(queryVecReader,searchVecReader,luceneUtils,flagConfig,queryArgs);break;case BOUNDPRODUCT:if (queryArgs.length == 2) {vecSearcher=new VectorSearcher.VectorSearcherBoundProduct(queryVecReader,boundVecReader,searchVecReader,luceneUtils,flagConfig,queryArgs[0],queryArgs[1]);} else {vecSearcher=new VectorSearcher.VectorSearcherBoundProduct(elementalVecReader,semanticVecReader,predicateVecReader,searchVecReader,luceneUtils,flagConfig,queryArgs[0]);}break;case BOUNDPRODUCTSUBSPACE:if (queryArgs.length == 2) {vecSearcher=new VectorSearcher.VectorSearcherBoundProductSubSpace(queryVecReader,boundVecReader,searchVecReader,luceneUtils,flagConfig,queryArgs[0],queryArgs[1]);} else {vecSearcher=new VectorSearcher.VectorSearcherBoundProductSubSpace(elementalVecReader,semanticVecReader,predicateVecReader,searchVecReader,luceneUtils,flagConfig,queryArgs[0]);}break;case INTERSECTION:{vecSearcher=new VectorSearcher.VectorSearcherIntersection(elementalVecReader,semanticVecReader,predicateVecReader,searchVecReader,luceneUtils,flagConfig,queryArgs[0]);}break;case BOUNDMINIMUM:if (queryArgs.length == 2) {vecSearcher=new VectorSearcher.VectorSearcherBoundMinimum(queryVecReader,boundVecReader,searchVecReader,luceneUtils,flagConfig,queryArgs[0],queryArgs[1]);} else {vecSearcher=new VectorSearcher.VectorSearcherBoundMinimum(elementalVecReader,semanticVecReader,predicateVecReader,searchVecReader,luceneUtils,flagConfig,queryArgs[0]);}break;case PERMUTATION:vecSearcher=new VectorSearcher.VectorSearcherPerm(queryVecReader,searchVecReader,luceneUtils,flagConfig,queryArgs);break;case BALANCEDPERMUTATION:vecSearcher=new VectorSearcher.BalancedVectorSearcherPerm(queryVecReader,searchVecReader,luceneUtils,flagConfig,queryArgs);break;case ANALOGY:vecSearcher=new VectorSearcher.AnalogySearcher(queryVecReader,searchVecReader,luceneUtils,flagConfig,queryArgs);break;case PROXIMITY:vecSearcher=new VectorSearcher.VectorSearcherProximity(queryVecReader,searchVecReader,boundVecReader,luceneUtils,flagConfig,queryArgs);break;case LUCENE:vecSearcher=new VectorSearcher.VectorSearcherLucene(luceneUtils,flagConfig,queryArgs);break;case PRINTQUERY:Vector queryVector=CompoundVectorBuilder.getQueryVector(queryVecReader,luceneUtils,flagConfig,queryArgs);System.out.println(queryVector.toString());return new LinkedList<>();case PRINTPSIQUERY:Vector psiQueryVector=CompoundVectorBuilder.getBoundProductQueryVectorFromString(flagConfig,elementalVecReader,semanticVecReader,predicateVecReader,luceneUtils,queryArgs[0]);if (flagConfig.vectortype().equals(VectorType.BINARY)) BinaryVector.setDebugPrintLength(flagConfig.dimension());System.out.println(psiQueryVector.toString());return new LinkedList<>();default :throw new IllegalArgumentException("Unknown search type: " + flagConfig.searchtype());}} catch (ZeroVectorException zve) {logger.info(zve.getMessage());return new LinkedList<>();}results=vecSearcher.getNearestNeighbors(flagConfig.numsearchresults());if (queryVecReader != null) {queryVecReader.close();}if (searchVecReader != null) {searchVecReader.close();}if (boundVecReader != null) {boundVecReader.close();}return results;}  }
class C{  public void callArgVisitors(XPathVisitor visitor){}  }
class C{  private void writeHeader(WritableByteChannel channel) throws IOException {  MatFileHeader header=MatFileHeader.createHeader();  char[] dest=new char[116];  char[] src=header.getDescription().toCharArray();  System.arraycopy(src,0,dest,0,src.length);  byte[] endianIndicator=header.getEndianIndicator();  ByteBuffer buf=ByteBuffer.allocateDirect(dest.length * 2 + 2 + endianIndicator.length);  for (int i=0; i < dest.length; i++) {    buf.put((byte)dest[i]);  }  buf.position(buf.position() + 8);  int version=header.getVersion();  buf.put((byte)(version >> 8));  buf.put((byte)version);  buf.put(endianIndicator);  buf.flip();  channel.write(buf);}  }
class C{  public void moveToLast(){  checkWidget();  changeSelectionTo(this.controls.size() - 1);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SexecPackage.EXIT_STATE__STATE:    setState((ExecutionState)null);  return;}super.eUnset(featureID);}  }
class C{  public Matrix4 translate(Vector3 translation){  return translate(translation.x,translation.y,translation.z);}  }
class C{  public DiskBasedCache(File rootDirectory){  this(rootDirectory,DEFAULT_DISK_USAGE_BYTES);}  }
class C{  public boolean isApproved(){  Object oo=get_Value(COLUMNNAME_IsApproved);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Object next(){  Object o=null;synchronized (_queue) {    if (_queue.size() == 0) {      try {        _queue.wait();      } catch (      InterruptedException e) {        return null;      }    }    try {      o=_queue.firstElement();      _queue.removeElementAt(0);    } catch (    ArrayIndexOutOfBoundsException e) {      throw new InternalError("Race hazard in Queue object.");    }  }  return o;}  }
class C{  @Override public String toString(){  return toJSONString();}  }
class C{  public boolean hasTrailingSeparator(){  return (separators & HAS_TRAILING) != 0;}  }
class C{  public void postDeserialize() throws MalformedJsonException {  for (  Route r : maps.get(selectedMap).getRoutes()) {    r.postDeserialize();  }}  }
class C{  @Deprecated static public LIUSBServerAdapter instance(){  if (mInstance == null) {    mInstance=new LIUSBServerAdapter();  }  return mInstance;}  }
class C{  public void loginSuccessful(){}  }
class C{  public void addConnectedEventListener(Executor executor,PeerConnectedEventListener listener){  connectedEventListeners.add(new ListenerRegistration(listener,executor));}  }
class C{  public static boolean trackFreedReferenceCounts(){  return getInstance().trackFreedReferenceCounts();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:52.473 -0500",hash_original_method="9EC839909A8D5EF002D63B05CCF8C26F",hash_generated_method="DF0229F21216314F348B00745AA102AF") public void fireIndexedPropertyChange(String propertyName,int index,int oldValue,int newValue){  if (oldValue != newValue) {    fireIndexedPropertyChange(propertyName,index,Integer.valueOf(oldValue),Integer.valueOf(newValue));  }}  }
class C{  public SortOrder(Database database,int[] queryColumnIndexes,int[] sortType,ArrayList<SelectOrderBy> orderList){  this.database=database;  this.queryColumnIndexes=queryColumnIndexes;  this.sortTypes=sortType;  this.orderList=orderList;}  }
class C{  private DigestMethodType digestMethod(){  DigestMethodType digestMethod=new DigestMethodType();  digestMethod.setAlgorithm(hashAlgorithmUri);  return digestMethod;}  }
class C{  public Path heapConfig(){  return conf().resolve(HeapConfig.DEFAULT_FILE_NAME);}  }
class C{  public KeyBuilder(final int initialCapacity){  this(0,createBuffer(initialCapacity));}  }
class C{  private void enterTrees(List<JCCompilationUnit> roots){  compiler.enterTrees(roots);}  }
class C{  public static Object toint32(Context cx,Scriptable thisObj,Object[] args,Function funObj){  Object arg=(args.length != 0 ? args[0] : Undefined.instance);  if (arg instanceof Integer)   return arg;  return ScriptRuntime.wrapInt(ScriptRuntime.toInt32(arg));}  }
class C{  public OverlayFrame createOverlay(MediaItem mediaItem,String overlayId,Bitmap bitmap,long startTimeMs,long durationMs){  OverlayFrame overLayFrame=null;  overLayFrame=new OverlayFrame(mediaItem,overlayId,bitmap,startTimeMs,durationMs);  return overLayFrame;}  }
class C{  public static boolean isBug367599(Throwable t){  if (t instanceof FilerException) {    for (    StackTraceElement ste : t.getStackTrace()) {      if (ste.toString().contains("org.eclipse.jdt.internal.apt.pluggable.core.filer.IdeFilerImpl.create")) {        return true;      }    }  }  if (t.getCause() != null) {    return isBug367599(t.getCause());  }  return false;}  }
class C{  public Boolean isFtSupported(){  return ftSupported;}  }
class C{  @Override public void start() throws Exception {  m_stopReplotting=true;  if (m_trainingData == null) {    throw new Exception("No training data set (BoundaryPanel)");  }  if (m_classifier == null) {    throw new Exception("No classifier set (BoundaryPanel)");  }  if (m_dataGenerator == null) {    throw new Exception("No data generator set (BoundaryPanel)");  }  if (m_trainingData.attribute(m_xAttribute).isNominal() || m_trainingData.attribute(m_yAttribute).isNominal()) {    throw new Exception("Visualization dimensions must be numeric " + "(BoundaryPanel)");  }  computeMinMaxAtts();  initialize();  int totalHosts=m_remoteHostsQueue.size();  for (int i=0; i < totalHosts; i++) {    availableHost(-1);    Thread.sleep(70);  }}  }
class C{  @Override public void mousePressed(MouseEvent e){  if (this.chart == null) {    return;  }  Plot plot=this.chart.getPlot();  int mods=e.getModifiers();  if ((mods & this.panMask) == this.panMask) {    if (plot instanceof Pannable) {      Pannable pannable=(Pannable)plot;      if (pannable.isDomainPannable() || pannable.isRangePannable()) {        Rectangle2D screenDataArea=getScreenDataArea(e.getX(),e.getY());        if (screenDataArea != null && screenDataArea.contains(e.getPoint())) {          this.panW=screenDataArea.getWidth();          this.panH=screenDataArea.getHeight();          this.panLast=e.getPoint();          setCursor(Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR));        }      }    }  } else   if (this.zoomRectangle == null) {    Rectangle2D screenDataArea=getScreenDataArea(e.getX(),e.getY());    if (screenDataArea != null) {      this.zoomPoint=getPointInRectangle(e.getX(),e.getY(),screenDataArea);    } else {      this.zoomPoint=null;    }    if (e.isPopupTrigger()) {      if (this.popup != null) {        displayPopupMenu(e.getX(),e.getY());      }    }  }}  }
class C{  public static <V extends SampledVertex>Set<V> createSampledPartition(Collection<V> vertices,int iteration){  Set<V> partition=new HashSet<V>();  for (  V vertex : vertices) {    if (vertex.isSampled()) {      if (vertex.getIterationSampled() == iteration)       partition.add(vertex);    }  }  return partition;}  }
class C{  public String rma(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  Integer M_RMA_ID=(Integer)value;  if (M_RMA_ID == null || M_RMA_ID.intValue() == 0)   return "";  if (isCalloutActive())   return "";  MRMA rma=new MRMA(ctx,M_RMA_ID.intValue(),null);  MInOut originalReceipt=rma.getShipment();  if (rma.get_ID() != 0) {    mTab.setValue("DateOrdered",originalReceipt.getDateOrdered());    mTab.setValue("POReference",originalReceipt.getPOReference());    mTab.setValue("AD_Org_ID",new Integer(originalReceipt.getAD_Org_ID()));    mTab.setValue("AD_OrgTrx_ID",new Integer(originalReceipt.getAD_OrgTrx_ID()));    mTab.setValue("C_Activity_ID",new Integer(originalReceipt.getC_Activity_ID()));    mTab.setValue("C_Campaign_ID",new Integer(originalReceipt.getC_Campaign_ID()));    mTab.setValue("C_Project_ID",new Integer(originalReceipt.getC_Project_ID()));    mTab.setValue("User1_ID",new Integer(originalReceipt.getUser1_ID()));    mTab.setValue("User2_ID",new Integer(originalReceipt.getUser2_ID()));    mTab.setValue("M_Warehouse_ID",new Integer(originalReceipt.getM_Warehouse_ID()));    mTab.setValue("DeliveryRule",originalReceipt.getDeliveryRule());    mTab.setValue("DeliveryViaRule",originalReceipt.getDeliveryViaRule());    mTab.setValue("M_Shipper_ID",new Integer(originalReceipt.getM_Shipper_ID()));    mTab.setValue("FreightCostRule",originalReceipt.getFreightCostRule());    mTab.setValue("FreightAmt",originalReceipt.getFreightAmt());    mTab.setValue("C_BPartner_ID",new Integer(originalReceipt.getC_BPartner_ID()));    mTab.setValue("C_BPartner_Location_ID",new Integer(originalReceipt.getC_BPartner_Location_ID()));    if (originalReceipt.getAD_User_ID() > 0)     mTab.setValue("AD_User_ID",new Integer(originalReceipt.getAD_User_ID())); else     mTab.setValue("AD_User_ID",null);  }  return "";}  }
class C{  public static boolean isRopeBlock(Block block){  return block instanceof IBlockRope;}  }
class C{  protected static Vector modify(final GeoPoint start,final double transX,final double transY,final double transZ,final double sinRA,final double cosRA,final double sinHA,final double cosHA){  return start.translate(transX,transY,transZ).rotateXY(sinRA,cosRA).rotateXZ(sinHA,cosHA);}  }
class C{  public static String constantToHuman(Constant cst){  int type=constantToValueType(cst);  if (type == VALUE_NULL) {    return "null";  }  StringBuilder sb=new StringBuilder();  sb.append(cst.typeName());  sb.append(' ');  sb.append(cst.toHuman());  return sb.toString();}  }
class C{  public Overlay disableClick(boolean yes_no){  mDisableClick=yes_no;  return this;}  }
class C{  public CRLNumber(byte[] encoding) throws IOException {  super(encoding);  number=new BigInteger((byte[])ASN1.decode(encoding));}  }
class C{  @Override public void visit(Page page){}  }
class C{  public void pushPacket(IPacket packet,IOFSwitch sw,int bufferId,short inPort,short outPort,FloodlightContext cntx,boolean flush){  if (log.isTraceEnabled()) {    log.trace("PacketOut srcSwitch={} inPort={} outPort={}",new Object[]{sw,inPort,outPort});  }  OFPacketOut po=(OFPacketOut)floodlightProvider.getOFMessageFactory().getMessage(OFType.PACKET_OUT);  List<OFAction> actions=new ArrayList<OFAction>();  actions.add(new OFActionOutput(outPort,(short)0xffff));  po.setActions(actions).setActionsLength((short)OFActionOutput.MINIMUM_LENGTH);  short poLength=(short)(po.getActionsLength() + OFPacketOut.MINIMUM_LENGTH);  po.setBufferId(bufferId);  po.setInPort(inPort);  if (po.getBufferId() == OFPacketOut.BUFFER_ID_NONE) {    if (packet == null) {      log.error("BufferId is not set and packet data is null. " + "Cannot send packetOut. " + "srcSwitch={} inPort={} outPort={}",new Object[]{sw,inPort,outPort});      return;    }    byte[] packetData=packet.serialize();    poLength+=packetData.length;    po.setPacketData(packetData);  }  po.setLength(poLength);  try {    counterStore.updatePktOutFMCounterStoreLocal(sw,po);    messageDamper.write(sw,po,cntx,flush);  } catch (  IOException e) {    log.error("Failure writing packet out",e);  }}  }
class C{  public boolean isClosed(){  return closed;}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  protected static final void checkArguments(final SQLProvider provider,final INaviProject project,final CTagManager viewTagManager){  checkArguments(provider,viewTagManager);  Preconditions.checkNotNull(project,"IE00644: Module argument can't be null");  Preconditions.checkArgument(project.inSameDatabase(provider),"IE00528: Project is not part of this database");}  }
class C{  public void restrictConnectionsToList(List sessionNodes){  for (  SessionNode sessionNode : getParents()) {    if (!sessionNodes.contains(sessionNode)) {      removeParent(sessionNode);    }  }  for (  SessionNode sessionNode1 : getChildren()) {    if (!sessionNodes.contains(sessionNode1)) {      removeChild(sessionNode1);    }  }}  }
class C{  private void createSubTaskForProvisionCallbacks(ResourceAllocationTaskState currentState,ComputeDescriptionService.ComputeDescription desc){  SubTaskService.SubTaskState subTaskInitState=new SubTaskService.SubTaskState();  ResourceAllocationTaskState subTaskPatchBody=new ResourceAllocationTaskState();  subTaskPatchBody.taskInfo=new TaskState();  subTaskPatchBody.taskSubStage=SubStage.FINISHED;  subTaskPatchBody.taskInfo.stage=TaskStage.FINISHED;  subTaskInitState.parentPatchBody=Utils.toJson(subTaskPatchBody);  subTaskInitState.errorThreshold=currentState.errorThreshold;  subTaskInitState.parentTaskLink=getSelfLink();  subTaskInitState.completionsRemaining=currentState.resourceCount;  subTaskInitState.tenantLinks=currentState.tenantLinks;  Operation startPost=Operation.createPost(this,UUID.randomUUID().toString()).setBody(subTaskInitState).setCompletion(null);  getHost().startService(startPost,new SubTaskService());}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Long[] rv=new Long[2];  rv[1]=new Long(getLong(stack));  rv[0]=new Long(getLong(stack));  return (rv);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(domimplementationhasfeature01.class,args);}  }
class C{  public boolean isSpatialIntersects(){switch (compareType) {case Comparison.SPATIAL_INTERSECTS:    return true;default :  return false;}}  }
class C{  public static Properties propertiesDecode(String data){  String result=null;  try {    result=URLDecoder.decode(data,MobileEnv.ENCODING);  } catch (  UnsupportedEncodingException e) {    log.log(Level.SEVERE,"decode" + MobileEnv.ENCODING,e);    String enc=System.getProperty("file.encoding");    try {      result=URLEncoder.encode(data,enc);      log.log(Level.SEVERE,"decode: " + enc);    } catch (    Exception ex) {      log.log(Level.SEVERE,"decode",ex);    }  }  ByteArrayInputStream bis=new ByteArrayInputStream(result.getBytes());  Properties pp=new Properties();  try {    pp.load(bis);  } catch (  IOException e) {    log.log(Level.SEVERE,"load",e);  }  return pp;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void errorHandling(Exception error){  showSpinner(false);  error.printStackTrace();  String errorMessage=mDomoticz.getErrorMessage(error);  if (mPhoneConnectionUtil == null)   mPhoneConnectionUtil=new PhoneConnectionUtil(getContext());  if (mPhoneConnectionUtil.isNetworkAvailable()) {    if (error instanceof JSONException && errorMessage.equalsIgnoreCase("No value for result")) {      setMessage(getString(R.string.no_data_on_domoticz));    } else     setErrorMessage(errorMessage);  } else {    if (coordinatorLayout != null) {      UsefulBits.showSnackbar(getContext(),coordinatorLayout,R.string.error_notConnected,Snackbar.LENGTH_SHORT);      if (getActivity() instanceof MainActivity)       ((MainActivity)getActivity()).Talk(R.string.error_notConnected);    }  }}  }
class C{  public static boolean isNullOrEmpty(String s){  return s == null || s.length() == 0;}  }
class C{  public Set<Category> updateCategories(boolean overrideOffline){  if (categoriesChanged > System.currentTimeMillis() - Utils.UPDATE_TIME) {    return null;  } else   if (Utils.isConnected(cm) || overrideOffline) {    Set<Category> categories=Controller.getInstance().getConnector().getCategories();    if (!categories.isEmpty()) {      DBHelper.getInstance().deleteCategories(false);      DBHelper.getInstance().insertCategories(categories);      categoriesChanged=System.currentTimeMillis();      notifyListeners();    }    return categories;  }  return null;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  private MethodDef parse_method(StrTok st){  String method_name=st.need_word();  st.need("(");  ArrayList<String> args=new ArrayList<>();  String tok=st.nextToken();  if (tok != ")") {    st.pushBack();    do {      tok=st.need_word();      args.add(tok);    } while (st.nextToken() == ",");    st.pushBack();    st.need(")");  }  Type[] targs=new Type[args.size()];  for (int ii=0; ii < args.size(); ii++) {    targs[ii]=BCELUtil.classname_to_type(args.get(ii));  }  return new MethodDef(method_name,targs);}  }
class C{  public boolean equals(Object obj){  if (!(obj instanceof DataAttribute))   return false;  if (obj == this)   return true;  DataAttribute att=(DataAttribute)obj;  if (att.getAttributeType() != getAttributeType() || att.getDataLength() != getDataLength() || !Arrays.equals(att.data,data))   return false;  return true;}  }
class C{  protected ImplementationFactory(){}  }
class C{  public int search(int o){  int i=lastIndexOf(o);  if (i >= 0) {    return size() - i;  }  return -1;}  }
class C{  @PreAuthorize("isAuthenticated()") @RequestMapping(value="/password",method=RequestMethod.PUT) @ResponseStatus(HttpStatus.OK) public void updateUserPassword(@RequestBody final UserUpdatePasswordCommandDto userDto){  userService.updateUserPassword(getCurrentUser(),userDto.getPassword(),userDto.getOldPassword());}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","hneu");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  private boolean[] correctBits(boolean[] rawbits) throws FormatException {  GenericGF gf;  if (ddata.getNbLayers() <= 2) {    codewordSize=6;    gf=GenericGF.AZTEC_DATA_6;  } else   if (ddata.getNbLayers() <= 8) {    codewordSize=8;    gf=GenericGF.AZTEC_DATA_8;  } else   if (ddata.getNbLayers() <= 22) {    codewordSize=10;    gf=GenericGF.AZTEC_DATA_10;  } else {    codewordSize=12;    gf=GenericGF.AZTEC_DATA_12;  }  int numDataCodewords=ddata.getNbDatablocks();  int numECCodewords;  int offset;  if (ddata.isCompact()) {    offset=NB_BITS_COMPACT[ddata.getNbLayers()] - numCodewords * codewordSize;    numECCodewords=NB_DATABLOCK_COMPACT[ddata.getNbLayers()] - numDataCodewords;  } else {    offset=NB_BITS[ddata.getNbLayers()] - numCodewords * codewordSize;    numECCodewords=NB_DATABLOCK[ddata.getNbLayers()] - numDataCodewords;  }  int[] dataWords=new int[numCodewords];  for (int i=0; i < numCodewords; i++) {    int flag=1;    for (int j=1; j <= codewordSize; j++) {      if (rawbits[codewordSize * i + codewordSize - j + offset]) {        dataWords[i]+=flag;      }      flag<<=1;    }  }  try {    ReedSolomonDecoder rsDecoder=new ReedSolomonDecoder(gf);    rsDecoder.decode(dataWords,numECCodewords);  } catch (  ReedSolomonException rse) {    throw FormatException.getFormatInstance();  }  offset=0;  invertedBitCount=0;  boolean[] correctedBits=new boolean[numDataCodewords * codewordSize];  for (int i=0; i < numDataCodewords; i++) {    boolean seriesColor=false;    int seriesCount=0;    int flag=1 << (codewordSize - 1);    for (int j=0; j < codewordSize; j++) {      boolean color=(dataWords[i] & flag) == flag;      if (seriesCount == codewordSize - 1) {        if (color == seriesColor) {          throw FormatException.getFormatInstance();        }        seriesColor=false;        seriesCount=0;        offset++;        invertedBitCount++;      } else {        if (seriesColor == color) {          seriesCount++;        } else {          seriesCount=1;          seriesColor=color;        }        correctedBits[i * codewordSize + j - offset]=color;      }      flag>>>=1;    }  }  return correctedBits;}  }
class C{  public TableModelEvent(TableModel source,int firstRow,int lastRow,int column){  this(source,firstRow,lastRow,column,UPDATE);}  }
class C{  public void incNumDeletes(){  this._stats.incLong(_numDeletesId,1);}  }
class C{  public SQLClientInfoException(Map<String,ClientInfoStatus> failedProperties,Throwable cause){  super(cause);  this.failedProperties=new HashMap<String,ClientInfoStatus>(failedProperties);}  }
class C{  private JMenu createEditMenu(){  JMenu edit=new JMenu("Edit");  JMenuItem copySubgraph=new JMenuItem(new CopySubgraphAction(GraphSelectionEditor.this));  JMenuItem pasteSubgraph=new JMenuItem(new PasteSubgraphAction(GraphSelectionEditor.this));  copySubgraph.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C,ActionEvent.CTRL_MASK));  pasteSubgraph.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_V,ActionEvent.CTRL_MASK));  edit.add(copySubgraph);  edit.add(pasteSubgraph);  return edit;}  }
class C{  protected AnimatableTransformListValue(AnimationTarget target){  super(target);}  }
class C{  public static <T>FrequencyEncoder<T> createIdentityEncoder(){  return new FrequencyEncoder<>(new IdentityHashMap<>());}  }
class C{  public static InitiateMultipartUploadResult parseInitiateMultipartUpload(InputStream responseBody) throws ResponseParseException {  try {    Element root=getXmlRootElement(responseBody);    InitiateMultipartUploadResult result=new InitiateMultipartUploadResult();    if (root.getChild("Bucket") != null) {      result.setBucketName(root.getChildText("Bucket"));    }    if (root.getChild("Key") != null) {      result.setKey(root.getChildText("Key"));    }    if (root.getChild("UploadId") != null) {      result.setUploadId(root.getChildText("UploadId"));    }    return result;  } catch (  Exception e) {    throw new ResponseParseException(e.getMessage(),e);  }}  }
class C{  private long copyWithStructure(Path srcDir,Path destDir) throws IOException, DistCpException {  PathBuilder dirBuilder=new PathBuilder(destDir);  List<String> pathElements=new ArrayList<>(Arrays.asList(srcDir.toUri().getPath().split("/")));  if (pathElements.get(0).equals("")) {    pathElements.remove(0);  }  for (  String pathElement : pathElements) {    dirBuilder.add(pathElement);  }  Path destPath=dirBuilder.toPath();  long bytesCopied=directoryCopier.copy(srcDir,destPath,Arrays.asList(srcCluster.getName(),"copy_with_structure"));  return bytesCopied;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:15.853 -0500",hash_original_method="ABC85C1E863250D9F7C830BC7DDD0D2B",hash_generated_method="1DB2582447DF402A861B9A57D830B421") public static boolean isInstrumentationEnabled(){  return IS_ENG_BUILD;}  }
class C{  public void paintMenuBarBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public void runStrategy(CandleSeries candleSeries,boolean newBar){  try {    if (getCurrentCandleCount() > 0) {      CandleItem currentCandleItem=(CandleItem)candleSeries.getDataItem(getCurrentCandleCount());      ZonedDateTime startPeriod=currentCandleItem.getPeriod().getStart();      if (this.isThereOpenPosition()) {        _log.info("Strategy complete open position filled symbol: " + getSymbol() + " startPeriod: "+ startPeriod);        this.cancel();        return;      }      if (TradingCalendar.isMarketHours(getTradestrategy().getTradingday().getOpen(),getTradestrategy().getTradingday().getClose(),startPeriod) && TradingCalendar.sameDay(getTradestrategy().getTradingday().getOpen(),startPeriod)) {        if (startPeriod.equals(TradingCalendar.getDateAtTime(startPeriod,9,35,0)) && newBar) {        } else         if (startPeriod.equals(TradingCalendar.getDateAtTime(startPeriod,10,30,0))) {        } else         if (startPeriod.isAfter(TradingCalendar.getDateAtTime(startPeriod,10,30,0))) {          _log.info("Rule after 10:30:00 bar, close the " + getTradestrategy().getStrategy().getClassName() + " Symbol: "+ getSymbol());          this.cancel();        }      }    }  } catch (  Exception ex) {    _log.error("Error  runRule exception: " + ex.getMessage(),ex);    error(1,10,"Error  runRule exception: " + ex.getMessage());  }}  }
class C{  private static int calculateInSampleSize(BitmapFactory.Options options,int reqWidth,int reqHeight){  final int height=options.outHeight;  final int width=options.outWidth;  int inSampleSize=1;  if (height > reqHeight || width > reqWidth) {    if (width > height) {      inSampleSize=Math.round((float)height / (float)reqHeight);    } else {      inSampleSize=Math.round((float)width / (float)reqWidth);    }  }  return inSampleSize;}  }
class C{  public boolean isEmpty(){  return selection.isEmpty();}  }
class C{  CSSElement parseCSS(InputStreamReader r,HTMLComponent htmlC) throws IOException {  ExtInputStreamReader er=new ExtInputStreamReader(r);  return parseCSS(er,htmlC,null,null);}  }
class C{  public boolean isValidHeaderPartition(){  return (isHeaderPartition() && (this.this_partition == 0) && (this.previous_partition == 0)&& (this.header_byte_count != 0));}  }
class C{  private Item newString(final String value){  key2.set(STR,value,null,null);  Item result=get(key2);  if (result == null) {    pool.put12(STR,newUTF8(value));    result=new Item(index++,key2);    put(result);  }  return result;}  }
class C{  public <T>MappingIterator<T> readValues(byte[] src,int offset,int length) throws IOException, JsonProcessingException {  JsonParser jp=_jsonFactory.createJsonParser(src,offset,length);  if (_schema != null) {    jp.setSchema(_schema);  }  DeserializationContext ctxt=_createDeserializationContext(jp,_config);  return new MappingIterator<T>(_valueType,jp,ctxt,_findRootDeserializer(_config,_valueType),true,_valueToUpdate);}  }
class C{  public int hashCode(){  return numerator.hashCode() + denominator.hashCode();}  }
class C{  public static Workflow.Method linkBlockSnapshotSessionTargetMethod(URI systemURI,URI snapSessionURI,URI snapshotURI,String copyMode,Boolean targetExists){  return new Workflow.Method(LINK_SNAPSHOT_SESSION_TARGET_METHOD,systemURI,snapSessionURI,snapshotURI,copyMode,targetExists);}  }
class C{  public static void closeApplication(Activity activity){  activity.finish();  killCurrentProcess();}  }
class C{  public static double staticNextDouble(double mean,double gamma,double cut){synchronized (shared) {    return shared.nextDouble(mean,gamma,cut);  }}  }
class C{  private boolean isValidProject(String projectName,ILaunchConfiguration launchConfig){  if (projectName.length() == 0) {    setErrorMessage("Project was not specified");    return false;  }  IWorkspace workspace=ResourcesPlugin.getWorkspace();  IStatus status=workspace.validateName(projectName,IResource.PROJECT);  if (status.isOK()) {    IProject project=ResourcesPlugin.getWorkspace().getRoot().getProject(projectName);    if (!project.exists()) {      setErrorMessage(MessageFormat.format(LauncherMessages.JavaMainTab_20,projectName));      return false;    }    if (!project.isOpen()) {      setErrorMessage(MessageFormat.format(LauncherMessages.JavaMainTab_21,projectName));      return false;    }    boolean isGwtProject=GWTNature.isGWTProject(project);    if (!isGwtProject) {      setErrorMessage("Project does not use GWT");      return false;    }  } else {    setErrorMessage(MessageFormat.format(LauncherMessages.JavaMainTab_19,status.getMessage()));    return false;  }  return true;}  }
class C{  public static boolean isPrintable(int letter){  if ((letter < 0x20 && letter != 0x0A && letter != 0x0D) || letter == 0x7F) {    return false;  }  if (UNICODE_PRIVATE_START <= letter && letter <= UNICODE_PRIVATE_END) {    return false;  }  return true;}  }
class C{  @Override public void startMonitoring(MonitoringJob monitoringJob,DistributedQueueItemProcessedCallback callback){  _logger.debug("Entering {}",Thread.currentThread().getStackTrace()[1].getMethodName());synchronized (cacheLock) {    _logger.info("monitoringJob.getId() {}",monitoringJob.getId());    String storageSystemURI=monitoringJob.getId().toString();    addVNXFileStorageSystemIntoCache(storageSystemURI,callback);    boolean isSuccess=makeVNXFileSubscription(storageSystemURI);    if (!isSuccess) {      _logger.debug("VNX File:{} subscription is not successful.",storageSystemURI);      addVNXFailedSubscription(storageSystemURI);    } else {      _logger.info("Successfully subscribed with vnxfile's smi-s provider for indication");    }  }  _logger.debug("Exiting {}",Thread.currentThread().getStackTrace()[1].getMethodName());}  }
class C{  private Pointer(Buffer buffer){  this.buffer=buffer;  pointers=null;  byteOffset=0;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SRS");  long baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);  instructions.add(ReilHelpers.createUnknown(baseOffset++));}  }
class C{  @Override public void putAll(Map<? extends K,? extends V> map){  ensureCapacity(map.size());  super.putAll(map);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private String computeHash(String z){  try {    MessageDigest md=MessageDigest.getInstance("SHA-256");    md.update(z.getBytes("UTF-8"));    byte[] raw=md.digest();    char[] result=new char[raw.length * 2];    for (int ix=0; ix < raw.length; ix++) {      int val=raw[ix] & 0xFF;      result[ix * 2]=HEX[val >>> 4];      result[ix * 2 + 1]=HEX[val & 0x0F];    }    return new String(result);  } catch (  NoSuchAlgorithmException|UnsupportedEncodingException ex) {    throw new AcmeProtocolException("Could not compute hash",ex);  }}  }
class C{  protected float unwrapKey(Object key){  return ((Float)key).floatValue();}  }
class C{  public void clear(){  this.store.clear();}  }
class C{  public static void main(String[] args){  JVnTextProTestOption option=new JVnTextProTestOption();  CmdLineParser parser=new CmdLineParser(option);  if (args.length == 0) {    System.out.println("JVnTextProTest [options...] [arguments..]");    parser.printUsage(System.out);    return;  }  JVnTextPro vnTextPro=new JVnTextPro();  CompositeUnicode2Unicode conversion=new CompositeUnicode2Unicode();  try {    parser.parseArgument(args);    vnTextPro.initSenTokenization();    if (option.doSenSeg) {      vnTextPro.initSenSegmenter(option.modelDir.getPath() + File.separator + "jvnsensegmenter");    }    if (option.doSenToken) {      vnTextPro.initSenTokenization();    }    if (option.doWordSeg) {      vnTextPro.initSegmenter(option.modelDir.getPath() + File.separator + "jvnsegmenter");    }    if (option.doPosTagging) {      vnTextPro.initPosTagger(option.modelDir.getPath() + File.separator + "jvnpostag"+ File.separator+ "maxent");    }    if (option.inFile.isFile()) {      BufferedReader reader=new BufferedReader(new InputStreamReader(new FileInputStream(option.inFile),"UTF-8"));      String line, ret="";      while ((line=reader.readLine()) != null) {        line=conversion.convert(line);        ret+=vnTextPro.process(line).trim() + "\n";      }      reader.close();      BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(option.inFile.getPath() + ".pro"),"UTF-8"));      writer.write(ret);      writer.close();    } else     if (option.inFile.isDirectory()) {      File[] childs=option.inFile.listFiles();      for (      File child : childs) {        if (!child.getName().endsWith(option.fileType))         continue;        BufferedReader reader=new BufferedReader(new InputStreamReader(new FileInputStream(child),"UTF-8"));        String line, ret="";        while ((line=reader.readLine()) != null) {          line=conversion.convert(line);          ret+=vnTextPro.process(line).trim() + "\n";        }        reader.close();        BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(child.getPath() + ".pro"),"UTF-8"));        writer.write(ret);        writer.close();      }    }  } catch (  CmdLineException cle) {    System.out.println("JVnTextProTest [options...] [arguments..]");    parser.printUsage(System.out);  }catch (  Exception e) {    System.out.println(e.getMessage());    e.printStackTrace();  }}  }
class C{  public BKLogSegmentWriter startLogSegment(long txId,boolean bestEffort,boolean allowMaxTxID) throws IOException {  Stopwatch stopwatch=Stopwatch.createStarted();  boolean success=false;  try {    BKLogSegmentWriter writer=doStartLogSegment(txId,bestEffort,allowMaxTxID);    success=true;    return writer;  }  finally {    if (success) {      openOpStats.registerSuccessfulEvent(stopwatch.stop().elapsed(TimeUnit.MICROSECONDS));    } else {      openOpStats.registerFailedEvent(stopwatch.stop().elapsed(TimeUnit.MICROSECONDS));    }  }}  }
class C{  public String optString(String key,String defaultValue){  Object object=this.opt(key);  return NULL.equals(object) ? defaultValue : object.toString();}  }
class C{  public void forceStep(){  if (state == ControllerState.RUNNING) {    forceStep=true;    getWorld().playSoundEffect(pos.getX() + 0.5,pos.getY() + 0.5,pos.getZ() + 0.5,"random.click",0.2f,0.8f + getWorld().rand.nextFloat() * 0.1f);  }}  }
class C{  protected Preference onCreateItem(String name,AttributeSet attrs) throws ClassNotFoundException {  return createItem(name,mDefaultPackages,attrs);}  }
class C{  public int export(ConstantPool target){  return target.addClass(getName()).getIndex();}  }
class C{  public static void invalidateSavedGame(){synchronized (sSavedGame) {    sSavedGame.mIsValid=false;  }}  }
class C{  public LabelledStatement basicGetLabel(){  return label;}  }
class C{  public byte[] encrypt(String passphrase,boolean production) throws HyperLedgerException {  try {    byte[] key=SCrypt.generate(passphrase.getBytes("UTF-8"),BITCOIN_SEED,16384,8,8,32);    SecretKeySpec keyspec=new SecretKeySpec(key,"AES");    Cipher cipher=Cipher.getInstance("AES/CBC/PKCS5Padding","BC");    cipher.init(Cipher.ENCRYPT_MODE,keyspec);    byte[] iv=cipher.getIV();    byte[] c=cipher.doFinal(serialize(production).getBytes());    byte[] result=new byte[iv.length + c.length];    System.arraycopy(iv,0,result,0,iv.length);    System.arraycopy(c,0,result,iv.length,c.length);    return result;  } catch (  UnsupportedEncodingException|NoSuchAlgorithmException|NoSuchProviderException|NoSuchPaddingException|InvalidKeyException|IllegalBlockSizeException|BadPaddingException e) {    throw new HyperLedgerException(e);  }}  }
class C{  private ComparableEntitySpanUtils(){}  }
class C{  public DeleteCursorWrapper(Cursor cursor){  super(cursor);}  }
class C{  public static float abs(float f){  return (f < 0) ? -f : f;}  }
class C{  public ScoredIndTest(IndependenceTest test){  this.variables=new ArrayList<>();  for (  Node node : test.getVariables()) {    if (node.getNodeType() == NodeType.MEASURED) {      this.variables.add(node);    }  }  this.test=test;}  }
class C{  public static void liftingFromBottom(View view,float baseRotation,float fromY,int duration,int startDelay){  ViewHelper.setRotationX(view,baseRotation);  ViewHelper.setTranslationY(view,fromY);  ViewPropertyAnimator.animate(view).setInterpolator(new AccelerateDecelerateInterpolator()).setDuration(duration).setStartDelay(startDelay).rotationX(0).translationY(0).start();}  }
class C{  public void updateNCharacterStream(String columnName,java.io.Reader x,int length) throws SQLException {  throw new UnsupportedOperationException("Operation not yet supported");}  }
class C{  public boolean validate(){  boolean result=true;  Iterator<AbstractValidate> it=this._validates.iterator();  while (it.hasNext()) {    AbstractValidate validator=it.next();    TextView field=validator.getSource();    field.setError(null);    if (!validator.isValid(field.getText().toString())) {      result=false;      field.setError(validator.getMessages());    }  }  return result;}  }
class C{  public ParserString(String text){  init(text);}  }
class C{  public void testCertPathBuilder09() throws NoSuchAlgorithmException, NoSuchProviderException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  try {    CertPathBuilder.getInstance(null,defaultProvider);    fail("No expected NullPointerException");  } catch (  NullPointerException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      CertPathBuilder.getInstance(invalidValues[i],defaultProvider);      fail("NoSuchAlgorithm must be thrown");    } catch (    NoSuchAlgorithmException e1) {    }  }}  }
class C{  public SystemMessage(){}  }
class C{  public JsonValue(Object value){  this.value=value;  array=null;  object=null;  isNull=(value == null);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected void initSchemaObjectBase(Schema newSchema,int id,String name,int traceModuleId){  initDbObjectBase(newSchema.getDatabase(),id,name,traceModuleId);  this.schema=newSchema;}  }
class C{  public static String describeMinutes(Context context,int minutes){  Resources r=context.getResources();  if (minutes < 60) {    return String.valueOf(minutes) + " " + r.getString(R.string.minutes_abbr);  } else {    int hours=minutes / 60;    int mins=minutes % 60;    if (mins == 0) {      return String.valueOf(hours) + " " + r.getString(R.string.hours_abbr);    }    return String.valueOf(hours) + " " + r.getString(R.string.hours_abbr)+ " "+ String.valueOf(mins)+ " "+ r.getString(R.string.minutes_abbr);  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:01.367 -0500",hash_original_method="6469C197EE58C69EE809CEC9FEDF2877",hash_generated_method="26DA4060817535BC8379662FF9821E13") public boolean requireEnd(){  return requireEndImpl(address);}  }
class C{  public PropertyTabAction(SimbrainDesktop desktop){  super("Property Tabs");  putValue(SMALL_ICON,ResourceManager.getImageIcon("Properties.png"));  this.desktop=desktop;}  }
class C{  public void writeVarInt(int x){  while ((x & ~0x7f) != 0) {    data[pos++]=(byte)(0x80 | (x & 0x7f));    x>>>=7;  }  data[pos++]=(byte)x;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.VARIABLE_DECLARATION__DECLARED_TYPE_REF:    setDeclaredTypeRef((TypeRef)newValue);  return;case N4JSPackage.VARIABLE_DECLARATION__BOGUS_TYPE_REF:setBogusTypeRef((TypeRef)newValue);return;case N4JSPackage.VARIABLE_DECLARATION__NAME:setName((String)newValue);return;case N4JSPackage.VARIABLE_DECLARATION__ANNOTATIONS:getAnnotations().clear();getAnnotations().addAll((Collection<? extends Annotation>)newValue);return;case N4JSPackage.VARIABLE_DECLARATION__EXPRESSION:setExpression((Expression)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void resetTeleMissileAttacks(){  pendingTeleMissileAttacks.removeAllElements();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  @Override public int preceding(int offset){  CharacterIterator text=getText();  checkOffset(offset,text);  if (cachedBreakPositions == null || offset <= cachedBreakPositions[0] || offset > cachedBreakPositions[cachedBreakPositions.length - 1]) {    cachedBreakPositions=null;    return super.preceding(offset);  } else {    positionInCache=0;    while (positionInCache < cachedBreakPositions.length && offset > cachedBreakPositions[positionInCache]) {      ++positionInCache;    }    --positionInCache;    text.setIndex(cachedBreakPositions[positionInCache]);    return text.getIndex();  }}  }
class C{  public Object readReply(Class expectedClass) throws Throwable {  expectTag(TAG_REPLY);  int tag=parseTag();  if (tag == TAG_FAULT)   throw prepareFault(); else {    _peekTag=tag;    Object value=readObject(expectedClass);    expectTag(TAG_REPLY_END);    return value;  }}  }
class C{  public boolean isDone(){  return false;}  }
class C{  public Edge(State<?> src,Symbol symbol,State<?> dest,LR0Item srcItem){  this.src=src;  this.symbol=symbol;  this.dest=dest;  this.srcItem=srcItem;  this.hashCache=src.hashCode() * 100 + symbol.hashCode();}  }
class C{  public Frame(int width,int height,int depth,int channels){  int pixelSize=Math.abs(depth) / 8;  this.imageWidth=width;  this.imageHeight=height;  this.imageDepth=depth;  this.imageChannels=channels;  this.imageStride=((imageWidth * imageChannels * pixelSize + 7) & ~7) / pixelSize;  this.image=new Buffer[1];  ByteBuffer buffer=ByteBuffer.allocateDirect(imageHeight * imageStride * pixelSize).order(ByteOrder.nativeOrder());switch (imageDepth) {case DEPTH_BYTE:case DEPTH_UBYTE:    image[0]=buffer;  break;case DEPTH_SHORT:case DEPTH_USHORT:image[0]=buffer.asShortBuffer();break;case DEPTH_INT:image[0]=buffer.asIntBuffer();break;case DEPTH_LONG:image[0]=buffer.asLongBuffer();break;case DEPTH_FLOAT:image[0]=buffer.asFloatBuffer();break;case DEPTH_DOUBLE:image[0]=buffer.asDoubleBuffer();break;default :throw new UnsupportedOperationException("Unsupported depth value: " + imageDepth);}}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("UasAuthToken[");  buffer.append("m_user = ").append(m_user);  buffer.append(", m_dept = ").append(m_dept);  buffer.append(", m_groups = ").append(m_groups);  buffer.append("]");  return buffer.toString();}  }
class C{  public void arcade(double driveSpeed,double turnSpeed){  arcade(driveSpeed,turnSpeed,true);}  }
class C{  protected void recreateSessionState(){  if (sessionState != null && sessionState.size() > 0) {    sessionStateUpdating=true;    try {      for (      String sql : sessionState) {        CommandInterface ci=prepareCommand(sql,Integer.MAX_VALUE);        ci.executeUpdate();      }    }  finally {      sessionStateUpdating=false;      sessionStateChanged=false;    }  }}  }
class C{  @Override public void addHeader(final String header,final String value){  mBaseRequest.addHeader(header,value);}  }
class C{  public void add(double value){  add(value,1);}  }
class C{  private void hotkeyCommand(String command,String parameter2,boolean selectedUserRequired){  Channel channel=channels.getLastActiveChannel();  User selectedUser=channel.getSelectedUser();  if (selectedUserRequired && selectedUser == null) {    return;  }  String selectedUserName=selectedUser != null ? selectedUser.nick : "";  if (command.startsWith("/")) {    command=command.substring(1);  }  String parameter=null;  if (!selectedUserName.isEmpty() || parameter2 != null) {    parameter=selectedUserName + (parameter2 != null ? " " + parameter2 : "");  }  client.command(channels.getLastActiveChannel().getName(),command,parameter);}  }
class C{  public static Request processAuthHeader(Authenticator authenticator,Response response,Proxy proxy) throws IOException {  return response.code() == HTTP_PROXY_AUTH ? authenticator.authenticateProxy(proxy,response) : authenticator.authenticate(proxy,response);}  }
class C{  @TargetApi(Build.VERSION_CODES.HONEYCOMB) @Override public void onAnimationUpdate(ValueAnimator animation){  expand.setRotation((Float)animation.getAnimatedValue());}  }
class C{  public void renderBlockDigParticles(int x,int y,int z){  World world=thePlayer.worldObj;  IBlockState state=world.getBlockState(new BlockPos(x,y,z));  Block block=state.getBlock();  if (block != Blocks.air) {    mc.getSoundHandler().playSound(new PositionedSoundRecord(new ResourceLocation(block.stepSound.getBreakSound()),(block.stepSound.getVolume() + 1.0F) / 2.0F,block.stepSound.getFrequency() * 0.8F,x + 0.5f,y + 0.5f,z + 0.5f));    mc.effectRenderer.addBlockDestroyEffects(new BlockPos(x,y,z),state);  }}  }
class C{  public static boolean isBoolean(IField field) throws JavaModelException {  return field.getTypeSignature().equals(Signature.SIG_BOOLEAN);}  }
class C{  private static String canonizeTreeString(String str){  String canon=str.trim();  Pattern pattern=Pattern.compile("(@\\S+)\\(\\)");  Matcher matcher=pattern.matcher(canon);  while (matcher.find()) {    canon=matcher.replaceFirst(matcher.group(1));    matcher.reset(canon);  }  return canon.trim();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void asciiToChar() throws IOException {  print("asciiToChar",null);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public MethExecutorResult executeMethodOnClass(String className,String methodName){  String name=className + "." + methodName;  long start=start(name);  MethExecutorResult result=MethExecutor.execute(className,methodName);  logDelta(name,start,result);  return result;}  }
class C{  public String toString(){  return Float.toString(getValue());}  }
class C{  public NotificationChain basicSetReturnTypeRef(TypeRef newReturnTypeRef,NotificationChain msgs){  TypeRef oldReturnTypeRef=returnTypeRef;  returnTypeRef=newReturnTypeRef;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.N4_METHOD_DECLARATION__RETURN_TYPE_REF,oldReturnTypeRef,newReturnTypeRef);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @Override public void registerJar(String jarURL,String jsonConfig) throws Exception {  logger.trace("Register jar: {}",jarURL);  URL url=new URL(jarURL);  String protocol=url.getProtocol();  if ("http".equals(protocol) || "https".equals(protocol)) {    url=downloadJar(url);  }  URLClassLoader loader=new URLClassLoader(new URL[]{url});  for (  TopologyBuilder topoBuilder : ServiceLoader.load(TopologyBuilder.class,loader)) {    registerTopology(topoBuilder.getName(),topoBuilder.getBuilder());  }}  }
class C{  public static <A>Monoid<Set<A>> monoid(){  return Monoid.create(Set.empty(),null);}  }
class C{  private XStringForChars(String val){  super(val);  throw new IllegalArgumentException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_XSTRINGFORCHARS_CANNOT_TAKE_STRING,null));}  }
class C{  public static String chompLast(String str,String sep){  if (str.length() == 0) {    return str;  }  String sub=str.substring(str.length() - sep.length());  if (sep.equals(sub)) {    return str.substring(0,str.length() - sep.length());  }  return str;}  }
class C{  final static byte encodeByte(final int v){  if (v > 127 || v < -128)   throw new IllegalArgumentException("v=" + v);  int i=v;  if (i < 0) {    i=i - 0x80;  } else {    i=i + 0x80;  }  return (byte)(i & 0xff);}  }
class C{  public static Propagation adaptPropagation(Propagation propagation,RecoveryCoordinator adaptor){  Stack<CompositeTransaction> lineage=propagation.getLineage();  CompositeTransaction remote=(CompositeTransaction)lineage.peek();  CompositeTransaction ct=new CompositeTransactionAdaptor(lineage,remote.getTid(),remote.isSerial(),adaptor);  lineage.pop();  lineage.push(ct);  return new PropagationImp(lineage,propagation.isSerial(),propagation.getTimeOut());}  }
class C{  @Override public void actionPerformed(ActionEvent e){  controller.displayView(viewToDisplay);}  }
class C{  public <Request extends TransportRequest>void registerRequestHandler(String action,Callable<Request> requestFactory,String executor,TransportRequestHandler<Request> handler){  RequestHandlerRegistry<Request> reg=new RequestHandlerRegistry<>(action,requestFactory,handler,executor,false);  registerRequestHandler(reg);}  }
class C{  public static byte[] generateMac(byte[] byteCipherText,SecretKeySpec integrityKey) throws NoSuchAlgorithmException, InvalidKeyException {  Mac sha256_HMAC=Mac.getInstance(HMAC_ALGORITHM);  sha256_HMAC.init(integrityKey);  return sha256_HMAC.doFinal(byteCipherText);}  }
class C{  public boolean reActivateIt(){  if (!isValidAction(ACTION_ReActivate))   return false;  if (m_document != null) {    if (m_document.reActivateIt()) {      m_status=STATUS_InProgress;      m_document.setDocStatus(m_status);      return true;    }    return false;  }  m_status=STATUS_InProgress;  return true;}  }
class C{  private final boolean isAirplaneModeOn(){  return Settings.Global.getInt(mContext.getContentResolver(),Settings.Global.AIRPLANE_MODE_ON,0) == 1;}  }
class C{  public static boolean lazyGaussianElimination(Modulo2System system,final int var2Eq[][],final long[] c,final int[] variable,final long[] solution){  final int numEquations=c.length;  if (numEquations == 0)   return true;  final int numVars=var2Eq.length;  assert solution.length == numVars;  final boolean buildSystem=system == null;  if (buildSystem) {    system=new Modulo2System(numVars);    for (int i=0; i < c.length; i++)     system.add(new Modulo2Equation(c[i],numVars));  }  final int weight[]=new int[numVars];  final int[] priority=new int[numEquations];  for (  final int v : variable) {    final int[] eq=var2Eq[v];    if (eq.length == 0)     continue;    int currEq=eq[0];    boolean currCoeff=true;    int j=0;    for (int i=1; i < eq.length; i++) {      if (eq[i] != currEq) {        assert eq[i] > currEq;        if (currCoeff) {          if (buildSystem)           system.equations.get(currEq).add(v);          weight[v]++;          priority[currEq]++;          eq[j++]=currEq;        }        currEq=eq[i];        currCoeff=true;      } else       currCoeff=!currCoeff;    }    if (currCoeff) {      if (buildSystem)       system.equations.get(currEq).add(v);      weight[v]++;      priority[currEq]++;      eq[j++]=currEq;    }    if (j != eq.length)     var2Eq[v]=Arrays.copyOf(var2Eq[v],j);  }  if (DEBUG) {    System.err.println();    System.err.println("===== Going to solve... ======");    System.err.println();    System.err.println(system);  }  final IntArrayList variables;{    final int[] t=Util.identity(numVars);    final int[] u=new int[t.length];    final int[] count=new int[numEquations + 1];    for (int i=t.length; i-- != 0; )     count[weight[t[i]]]++;    for (int i=1; i < count.length; i++)     count[i]+=count[i - 1];    for (int i=t.length; i-- != 0; )     u[--count[weight[t[i]]]]=t[i];    variables=IntArrayList.wrap(u);  }  final IntArrayList equationList=new IntArrayList();  for (int i=priority.length; i-- != 0; )   if (priority[i] <= 1)   equationList.add(i);  ArrayList<Modulo2Equation> dense=new ArrayList<Modulo2Equation>();  ArrayList<Modulo2Equation> solved=new ArrayList<Modulo2Equation>();  IntArrayList pivots=new IntArrayList();  final ArrayList<Modulo2Equation> equations=system.equations;  final long[] idleNormalized=new long[equations.get(0).bits.length];  Arrays.fill(idleNormalized,-1);  int numActive=0;  for (int remaining=equations.size(); remaining != 0; ) {    if (equationList.isEmpty()) {      int var;      do       var=variables.popInt(); while (weight[var] == 0);      numActive++;      idleNormalized[var / 64]^=1L << (var % 64);      if (DEBUG)       System.err.println("Making variable " + var + " of weight "+ weight[var]+ " heavy ("+ remaining+ " equations to go)");      for (      final int equationIndex : var2Eq[var])       if (--priority[equationIndex] == 1)       equationList.push(equationIndex);    } else {      remaining--;      final int first=equationList.popInt();      final Modulo2Equation equation=equations.get(first);      if (DEBUG)       System.err.println("Looking at equation " + first + " of priority "+ priority[first]+ " : "+ equation);      if (priority[first] == 0) {        if (equation.isUnsolvable())         return false;        if (equation.isIdentity())         continue;        dense.add(equation);      } else       if (priority[first] == 1) {        int wordIndex=0;        while ((equation.bits[wordIndex] & idleNormalized[wordIndex]) == 0)         wordIndex++;        final int pivot=wordIndex * 64 + Long.numberOfTrailingZeros(equation.bits[wordIndex] & idleNormalized[wordIndex]);        if (DEBUG)         System.err.println("Adding to solved variables x_" + pivot + " by equation "+ equation);        pivots.add(pivot);        solved.add(equation);        weight[pivot]=0;        for (        final int equationIndex : var2Eq[pivot]) {          if (equationIndex == first)           continue;          if (--priority[equationIndex] == 1)           equationList.add(equationIndex);          if (DEBUG)           System.err.print("Replacing equation (" + equationIndex + ") "+ equations.get(equationIndex)+ " with ");          equations.get(equationIndex).add(equation);          if (DEBUG)           System.err.println(equations.get(equationIndex));        }      }    }  }  LOGGER.debug("Active variables: " + numActive + " ("+ Util.format(numActive * 100 / numVars)+ "%)");  if (DEBUG) {    System.err.println("Dense equations: " + dense);    System.err.println("Solved equations: " + solved);    System.err.println("Pivots: " + pivots);  }  final Modulo2System denseSystem=new Modulo2System(numVars,dense);  if (!denseSystem.gaussianElimination(solution))   return false;  if (DEBUG)   System.err.println("Solution (dense): " + Arrays.toString(solution));  for (int i=solved.size(); i-- != 0; ) {    final Modulo2Equation equation=solved.get(i);    final int pivot=pivots.getInt(i);    assert solution[pivot] == 0 : pivot;    solution[pivot]=equation.c ^ Modulo2Equation.scalarProduct(equation.bits,solution);  }  if (DEBUG)   System.err.println("Solution (all): " + Arrays.toString(solution));  return true;}  }
class C{  public OneRegisterDecodedInstruction(InstructionCodec format,int opcode,int index,IndexType indexType,int target,long literal,int a){  super(format,opcode,index,indexType,target,literal);  this.a=a;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.EXPORT_DECLARATION__EXPORTED_ELEMENT:    return exportedElement != null;case N4JSPackage.EXPORT_DECLARATION__DEFAULT_EXPORTED_EXPRESSION:  return defaultExportedExpression != null;case N4JSPackage.EXPORT_DECLARATION__NAMED_EXPORTS:return namedExports != null && !namedExports.isEmpty();case N4JSPackage.EXPORT_DECLARATION__WILDCARD_EXPORT:return wildcardExport != WILDCARD_EXPORT_EDEFAULT;case N4JSPackage.EXPORT_DECLARATION__DEFAULT_EXPORT:return defaultExport != DEFAULT_EXPORT_EDEFAULT;case N4JSPackage.EXPORT_DECLARATION__REEXPORTED_FROM:return reexportedFrom != null;}return super.eIsSet(featureID);}  }
class C{  public static int[] range(int startValue,int endValue){  int[] array=new int[endValue - startValue + 1];  for (int i=0; i < endValue - startValue + 1; i++) {    array[i]=startValue + i;  }  return array;}  }
class C{  public synchronized void run(){  if (component != null) {    TextUI mapper=component.getUI();    if (mapper != null && lastDoc == component.getDocument()) {      int len=p0.size();      for (int i=0; i < len; i++) {        mapper.damageRange(component,p0.get(i).getOffset(),p1.get(i).getOffset());      }    }  }  p0.clear();  p1.clear();  lastDoc=null;}  }
class C{  @Override protected boolean shouldBeClosedWhenNoExperiments(){  return false;}  }
class C{  public boolean contains(S2CellId other){  return other.greaterOrEquals(rangeMin()) && other.lessOrEquals(rangeMax());}  }
class C{  public static void delete(String path) throws IOException {  if (path != null)   delete(Paths.get(path));}  }
class C{  @SuppressWarnings("unchecked") private Class<? extends Report> loadReportClass() throws ClassNotFoundException {  return (Class<? extends Report>)ClassUtils.loadClass(classLoader,reportClass);}  }
class C{  public static final void fillPolygon(GL2 gl,Vector2... vs){  gl.glBegin(GL2.GL_POLYGON);  for (int i=0; i < vs.length; i++) {    Vector2 v=vs[i];    gl.glVertex2d(v.x,v.y);  }  gl.glEnd();}  }
class C{  public Boolean isMultiLacpGroupSupported(){  return multiLacpGroupSupported;}  }
class C{  public PowerContainerAllocationPolicy(){  super();}  }
class C{  public static Ruleset buildRuleSetFromXml(String configuration){  XStream xstream=new XStream();  xstream.setClassLoader(DelphiRulesUtils.class.getClassLoader());  xstream.processAnnotations(Ruleset.class);  xstream.processAnnotations(DelphiRule.class);  xstream.processAnnotations(Property.class);  xstream.aliasSystemAttribute("ref","class");  return (Ruleset)xstream.fromXML(configuration);}  }
class C{  public CancelException(){}  }
class C{  public static IntList incrList(IntList L,int x){  return L;}  }
class C{  public RTextScrollPane(RTextArea textArea){  this(textArea,true);}  }
class C{  @Deprecated public String toString(){  return operation;}  }
class C{  public void onFailedAttempt(R result,Throwable failure,ExecutionContext context){}  }
class C{  public MessageBuilder withQuote(String content){  return withCode("",content);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element1;  Element element2;  Attr attribute;  Attr newAttribute;  doc=(Document)load("staffNS",true);  element1=doc.createElementNS("http://www.w3.org/DOM/Test","elem1");  element2=doc.createElementNS("http://www.w3.org/DOM/Test","elem2");  attribute=doc.createAttributeNS("http://www.w3.org/DOM/Test","attr");  newAttribute=element1.setAttributeNodeNS(attribute);{    boolean success=false;    try {      newAttribute=element2.setAttributeNodeNS(attribute);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INUSE_ATTRIBUTE_ERR);    }    assertTrue("elementsetattributenodens04",success);  }}  }
class C{  public static void register(RecyclerView view){  if (view == null) {    throw new NullPointerException("Registering View must not be null");  }  if (sInstance.mViews.containsKey(view.hashCode())) {    if (sInstance.mListeners.containsKey(view.hashCode())) {      sInstance.mListeners.get(view.hashCode()).getManager().onRegistered();      return;    }  }  final MediaPlayerManager playerManager;  RecyclerView.Adapter adapter=view.getAdapter();  if (adapter instanceof MediaPlayerManager) {    playerManager=(MediaPlayerManager)adapter;  } else {    playerManager=new MediaPlayerManagerImpl();  }  final ToroScrollListener listener=new ToroScrollListener(playerManager);  view.addOnScrollListener(listener);  sInstance.mViews.put(view.hashCode(),view);  sInstance.mListeners.put(view.hashCode(),listener);  final SavedState state;  if (sInstance.mStates.containsKey(view.hashCode())) {    state=sInstance.mStates.get(view.hashCode());  } else {    state=new SavedState();    sInstance.mStates.put(view.hashCode(),state);  }  if (state.player != null) {    playerManager.setPlayer(state.player);    playerManager.saveVideoState(state.player.getMediaId(),playerManager.getSavedPosition(state.player.getMediaId()),state.player.getDuration());    if (!state.player.isPlaying() && state.player.wantsToPlay() && Toro.getStrategy().allowsToPlay(state.player,view)) {      playerManager.restoreVideoState(state.player.getMediaId());      playerManager.startPlayback();    }  }  playerManager.onRegistered();}  }
class C{  private void logMandatoryNote(JavaFileObject file,String msg,Object... args){  if (enforceMandatory)   log.mandatoryNote(file,msg,args); else   log.note(file,msg,args);}  }
class C{  public boolean useStrongEncryption(){  return strongEncryption;}  }
class C{  public void transform(Source source,boolean shouldRelease) throws TransformerException {  try {    if (getXPathContext().getNamespaceContext() == null) {      getXPathContext().setNamespaceContext(getStylesheet());    }    String base=source.getSystemId();    if (null == base) {      base=m_stylesheetRoot.getBaseIdentifier();    }    if (null == base) {      String currentDir="";      try {        currentDir=System.getProperty("user.dir");      } catch (      SecurityException se) {      }      if (currentDir.startsWith(java.io.File.separator))       base="file://" + currentDir; else       base="file:///" + currentDir;      base=base + java.io.File.separatorChar + source.getClass().getName();    }    setBaseURLOfSource(base);    DTMManager mgr=m_xcontext.getDTMManager();    if ((source instanceof StreamSource && source.getSystemId() == null && ((StreamSource)source).getInputStream() == null && ((StreamSource)source).getReader() == null) || (source instanceof SAXSource && ((SAXSource)source).getInputSource() == null && ((SAXSource)source).getXMLReader() == null) || (source instanceof DOMSource && ((DOMSource)source).getNode() == null)) {      try {        DocumentBuilderFactory builderF=DocumentBuilderFactory.newInstance();        DocumentBuilder builder=builderF.newDocumentBuilder();        String systemID=source.getSystemId();        source=new DOMSource(builder.newDocument());        if (systemID != null) {          source.setSystemId(systemID);        }      } catch (      ParserConfigurationException e) {        fatalError(e);      }    }    DTM dtm=mgr.getDTM(source,false,this,true,true);    dtm.setDocumentBaseURI(base);    boolean hardDelete=true;    try {      this.transformNode(dtm.getDocument());    }  finally {      if (shouldRelease)       mgr.release(dtm,hardDelete);    }    Exception e=getExceptionThrown();    if (null != e) {      if (e instanceof javax.xml.transform.TransformerException) {        throw (javax.xml.transform.TransformerException)e;      } else       if (e instanceof org.apache.xml.utils.WrappedRuntimeException) {        fatalError(((org.apache.xml.utils.WrappedRuntimeException)e).getException());      } else {        throw new javax.xml.transform.TransformerException(e);      }    } else     if (null != m_serializationHandler) {      m_serializationHandler.endDocument();    }  } catch (  org.apache.xml.utils.WrappedRuntimeException wre) {    Throwable throwable=wre.getException();    while (throwable instanceof org.apache.xml.utils.WrappedRuntimeException) {      throwable=((org.apache.xml.utils.WrappedRuntimeException)throwable).getException();    }    fatalError(throwable);  }catch (  org.xml.sax.SAXParseException spe) {    fatalError(spe);  }catch (  org.xml.sax.SAXException se) {    m_errorHandler.fatalError(new TransformerException(se));  } finally {    m_hasTransformThreadErrorCatcher=false;    reset();  }}  }
class C{  @DSSource({DSSourceKind.SECURITY_INFO}) @DSSpec(DSCat.SPEC_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:54.576 -0500",hash_original_method="0D649746A13B62933617343FF6CF66A5",hash_generated_method="C9900E7F2C4B294CA337B2E78AED3438") public final SecretKey generateKey(){  return spiImpl.engineGenerateKey();}  }
class C{  public static <T>List<T> addToList(List<T> list,T element){  if (list == null) {    list=new ArrayList<T>();  }  list.add(element);  return list;}  }
class C{  private Variable deserialize(String string) throws IOException, ClassNotFoundException {  ObjectInputStream ois=null;  try {    byte[] encoding=Base64.decodeBase64(string);    ByteArrayInputStream baos=new ByteArrayInputStream(encoding);    ois=new ObjectInputStream(baos);    return (Variable)ois.readObject();  }  finally {    if (ois != null) {      ois.close();    }  }}  }
class C{  public boolean isValid(){  return (mExtensionId >= MIN_ID_VALUE && mExtensionId <= MAX_ID_VALUE) && VIDEO_ORIENTATION_URI.equalsIgnoreCase(mUri);}  }
class C{  @Override public void addTableModelListener(TableModelListener l){  m_Listeners.add(l);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.ANNOTABLE_SCRIPT_ELEMENT__ANNOTATION_LIST:    return getAnnotationList();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private static Map<URI,Set<Initiator>> generateNetworkToInitiatorsMap(Map<Initiator,List<StoragePort>> existingAssignments,DbClient dbClient){  Map<URI,Set<Initiator>> network2InitiatorsMap=new HashMap<URI,Set<Initiator>>();  if (existingAssignments == null) {    return network2InitiatorsMap;  }  NetworkLite network=null;  for (  Initiator initiator : existingAssignments.keySet()) {    network=getInitiatorNetwork(initiator,dbClient);    if (network == null) {      continue;    }    if (network2InitiatorsMap.get(network.getId()) == null) {      network2InitiatorsMap.put(network.getId(),new HashSet<Initiator>());    }    network2InitiatorsMap.get(network.getId()).add(initiator);  }  return network2InitiatorsMap;}  }
class C{  public static Optional<InteractiveSegment> render(final Segment document,final int x,final int y,final int maxWidth,final int maxHeight,final int yOffset,final FontRenderer renderer,final int mouseX,final int mouseY){  final Minecraft mc=Minecraft.getMinecraft();  GlStateManager.pushAttrib();  GL11.glDisable(GL11.GL_ALPHA_TEST);  GlStateManager.color(1,1,1,1);  GL11.glClear(GL11.GL_DEPTH_BUFFER_BIT);  GlStateManager.enableDepth();  GlStateManager.depthFunc(GL11.GL_LEQUAL);  GlStateManager.depthMask(true);  GlStateManager.colorMask(false,false,false,false);  GlStateManager.pushMatrix();  GL11.glTranslatef(0,0,500);  GL11.glBegin(GL11.GL_QUADS);  GL11.glVertex2f(0,y);  GL11.glVertex2f(mc.displayWidth,y);  GL11.glVertex2f(mc.displayWidth,0);  GL11.glVertex2f(0,0);  GL11.glVertex2f(0,mc.displayHeight);  GL11.glVertex2f(mc.displayWidth,mc.displayHeight);  GL11.glVertex2f(mc.displayWidth,y + maxHeight);  GL11.glVertex2f(0,y + maxHeight);  GL11.glEnd();  GlStateManager.popMatrix();  GlStateManager.colorMask(true,true,true,true);  Optional<InteractiveSegment> hovered=Optional.empty();  int indent=0;  int currentY=y - yOffset;  final int minY=y - lineHeight(renderer);  final int maxY=y + maxHeight + lineHeight(renderer);  Segment segment=document;  while (segment != null) {    final int segmentHeight=segment.nextY(indent,maxWidth,renderer);    if (currentY + segmentHeight >= minY && currentY <= maxY) {      final Optional<InteractiveSegment> result=segment.render(x,currentY,indent,maxWidth,renderer,mouseX,mouseY);      if (!hovered.isPresent()) {        hovered=result;      }    }    currentY+=segmentHeight;    indent=segment.nextX(indent,maxWidth,renderer);    segment=segment.next();  }  if (mouseX < x || mouseX > x + maxWidth || mouseY < y || mouseY > y + maxHeight) {    hovered=Optional.empty();  }  hovered.ifPresent(null);  GlStateManager.popAttrib();  GlStateManager.bindTexture(0);  return hovered;}  }
class C{  public LayoutMap(LayoutMap parent){  this.parent=parent;  columnMap=new HashMap<String,String>();  rowMap=new HashMap<String,String>();  columnMapCache=new HashMap<String,String>();  rowMapCache=new HashMap<String,String>();}  }
class C{  public void testSortsAccordingNumberOfChildren() throws Exception {  XppDom dom1=XppFactory.buildDom("<dom/>");  XppDom dom2=XppFactory.buildDom("<dom><a/></dom>");  assertEquals(-1,comparator.compare(dom1,dom2));  assertEquals("/dom::count(*)",xpath.get());  assertEquals(1,comparator.compare(dom2,dom1));  assertEquals("/dom::count(*)",xpath.get());}  }
class C{  public FormatInteger(final int in,final boolean group){  if (in < 0) {    throw new IllegalArgumentException("leading digits is negative:" + in);  }  mLength=in;  mPadding=new char[mLength];  final StringBuilder sb=new StringBuilder();  for (int i=0; i < mLength; i++) {    mPadding[i]=' ';    sb.append(" ");  }  mBlanks=sb.toString();  mLocalFormat.setGroupingUsed(group);}  }
class C{  public KeyPairViewModel(final Deserializer deserializer){  final PrivateKey privateKey=PrivateKey.fromHexString(deserializer.readString("privateKey"));  final PublicKey publicKey=PublicKey.fromHexString(deserializer.readOptionalString("publicKey"));  final Address address=Address.fromEncoded(deserializer.readString("address"));  this.networkVersion=NetworkInfos.fromAddress(address).getVersion();  if (!addressIsDerivedFromPublicKey(publicKey,this.networkVersion,address)) {    throw new IllegalArgumentException("public key and address mismatch");  }  this.keyPair=new KeyPair(privateKey);  if (!this.keyPair.getPublicKey().equals(publicKey)) {    throw new IllegalArgumentException("private key and public key mismatch");  }}  }
class C{  public void reset(){  number=0;}  }
class C{  protected void appendCyclicObject(StringBuffer buffer,String fieldName,Object value){  ObjectUtils.identityToString(buffer,value);}  }
class C{  static long toUData(long[] ints){  if (ints == null) {    return 0;  }  long res=XlibWrapper.unsafe.allocateMemory(ints.length * getIntSize());  for (int i=0; i < ints.length; i++) {    putUInt(res,i,ints[i]);  }  return res;}  }
class C{  public boolean onReceivedClientCertRequest(CordovaWebView view,ICordovaClientCertRequest request){  for (  CordovaPlugin plugin : this.pluginMap.values()) {    if (plugin != null && plugin.onReceivedClientCertRequest(app,request)) {      return true;    }  }  return false;}  }
class C{  public void addModule(final Module module) throws CouldntSaveDataException {  try {    m_addressSpace.getContent().addModule(module.getNative());  } catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntSaveDataException e) {    throw new CouldntSaveDataException(e);  }}  }
class C{  public static void main(String[] args){  String pat=args[0];  String txt=args[1];  char[] pattern=pat.toCharArray();  char[] text=txt.toCharArray();  KMP kmp1=new KMP(pat);  int offset1=kmp1.search(txt);  KMP kmp2=new KMP(pattern,256);  int offset2=kmp2.search(text);  StdOut.println("text:    " + txt);  StdOut.print("pattern: ");  for (int i=0; i < offset1; i++)   StdOut.print(" ");  StdOut.println(pat);  StdOut.print("pattern: ");  for (int i=0; i < offset2; i++)   StdOut.print(" ");  StdOut.println(pat);}  }
class C{  public void reset(){  pp=1;  indices.clear();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isCategoriesEnabled(){  return categoriesEnabled;}  }
class C{  protected void importZipResult(final BuildTaskDescriptor descriptor,final BuildFinishedCallback buildFinishedCallback,final Notification notification,final String errorMessage){  Link downloadLink=null;  List<Link> links=descriptor.getLinks();  for (  Link link : links) {    if (link.getRel().equalsIgnoreCase("download result")) {      downloadLink=link;    }  }  if (downloadLink != null) {    ImportProject importProject=dtoFactory.createDto(ImportProject.class).withSource(dtoFactory.createDto(Source.class).withProject(dtoFactory.createDto(ImportSourceDescriptor.class).withLocation(downloadLink.getHref()).withType("zip")));    projectServiceClient.importProject(appContext.getCurrentProject().getProjectDescription().getPath(),true,importProject,new ImportResponseAsyncRequestCallback(buildFinishedCallback,descriptor,notification,errorMessage));  } else {    if (buildFinishedCallback != null) {      buildFinishedCallback.onFinished(descriptor.getStatus());    }  }}  }
class C{  public void addContigFields(SequencesReader reader) throws IOException {  for (long i=0; i < reader.numberSequences(); i++) {    addLine(META_STRING + "contig=<ID=\"" + reader.name(i)+ "\",length="+ reader.length(i)+ ">");  }}  }
class C{  public boolean matchesNamingConvension(){  return packageName.matches(JAVA_PACKAGE_CONVENSION);}  }
class C{  private byte[] increment(byte[] oldValue){  long val=new BigInteger(oldValue).intValue();  val++;  return BigInteger.valueOf(val).toByteArray();}  }
class C{  private static CharSet doParseString(String s){  CharSet result=new CharSet();  int p=0;  boolean haveDash=false;  boolean haveTilde=false;  boolean wIsReal=false;  int w=0x0000;  while (p < s.length()) {    int c=s.codePointAt(p);    if (c == '[') {      if (wIsReal) {        result.internalUnion(new CharSet(w));      }      int bracketLevel=1;      int q=p + 1;      while (bracketLevel != 0) {        if (q >= s.length()) {          throw new IllegalArgumentException("Parse error at position " + p + " in "+ s);        }        int ch=s.codePointAt(q);switch (ch) {case '\\':          ch=s.codePointAt(++q);        break;case '[':      ++bracketLevel;    break;case ']':  --bracketLevel;break;}q+=Character.charCount(ch);}--q;if (!haveTilde) {result.internalUnion(CharSet.parseString(s.substring(p + 1,q)));} else {result.internalDifference(CharSet.parseString(s.substring(p + 1,q)));}haveTilde=false;haveDash=false;wIsReal=false;p=q + 1;} else if (c == ':') {if (wIsReal) {result.internalUnion(new CharSet(w));}int q=s.indexOf(':',p + 1);if (q == -1) {throw new IllegalArgumentException("Parse error at position " + p + " in "+ s);}if (!haveTilde) {result.internalUnion(charSetForCategory(s.substring(p + 1,q)));} else {result.internalDifference(charSetForCategory(s.substring(p + 1,q)));}haveTilde=false;haveDash=false;wIsReal=false;p=q + 1;} else if (c == '-') {if (wIsReal) {haveDash=true;}++p;} else if (c == '^') {if (wIsReal) {result.internalUnion(new CharSet(w));wIsReal=false;}haveTilde=true;++p;if (result.empty()) {result.internalComplement();}} else if (c >= ' ' && c < '\u007f' && !Character.isLetter((char)c) && !Character.isDigit((char)c) && c != '\\') {throw new IllegalArgumentException("Parse error at position " + p + " in "+ s);} else {if (c == '\\') {++p;}if (haveDash) {if (s.codePointAt(p) < w) {throw new IllegalArgumentException("U+" + Integer.toHexString(s.codePointAt(p)) + " is less than U+"+ Integer.toHexString(w)+ ".  Dash expressions "+ "can't have their endpoints in reverse order.");}int ch=s.codePointAt(p);if (!haveTilde) {result.internalUnion(new CharSet(w,ch));} else {result.internalDifference(new CharSet(w,ch));}p+=Character.charCount(ch);haveDash=false;haveTilde=false;wIsReal=false;} else if (haveTilde) {w=s.codePointAt(p);result.internalDifference(new CharSet(w));p+=Character.charCount(w);haveTilde=false;wIsReal=false;} else if (wIsReal) {result.internalUnion(new CharSet(w));w=s.codePointAt(p);p+=Character.charCount(w);wIsReal=true;} else {w=s.codePointAt(p);p+=Character.charCount(w);wIsReal=true;}}}if (wIsReal) {result.internalUnion(new CharSet(w));}return result;}  }
class C{  public TermSuggestionBuilder stringDistance(String stringDistance){  this.stringDistance=stringDistance;  return this;}  }
class C{  public TimeIntervalPreference(Context context,AttributeSet attrs){  super(context,attrs);  setDialogLayoutResource(R.layout.pref_time);}  }
class C{  private synchronized Node createNodeOnWay(final Node node1,final Node node2,final float x,final float y){  float node1X=lonE7ToX(node1.getLon());  float node1Y=latE7ToY(node1.getLat());  float node2X=lonE7ToX(node2.getLon());  float node2Y=latE7ToY(node2.getLat());  if (isPositionOnLine(x,y,node1X,node1Y,node2X,node2Y)) {    float[] p=GeoMath.closestPoint(x,y,node1X,node1Y,node2X,node2Y);    int lat=yToLatE7(p[1]);    int lon=xToLonE7(p[0]);    return getDelegator().getFactory().createNodeWithNewId(lat,lon);  }  return null;}  }
class C{  public Cell<?> applyPadding(final Cell<?> cell){  cell.pad(top,left,bottom,right);  return cell;}  }
class C{  public CalleeHierarchy(IProject project,Collection<JsonElement> callTargets,IMethod method){  fProject=project;  fRoots=callTargets;  fDesription=computeDescription(method);}  }
class C{  public static Gas readFromNBT(NBTTagCompound nbtTags){  if (nbtTags == null || nbtTags.hasNoTags()) {    return null;  }  return GasRegistry.getGas(nbtTags.getString("gasName"));}  }
class C{  @Override public void loadTxMtd(JobConf job,FileSystem fs,Path txMtdDir,TfUtils agents) throws IOException {  if (!isApplicable())   return;  if (fs.isDirectory(txMtdDir)) {    for (int i=0; i < _colList.length; i++) {      int colID=_colList[i];      Path path=new Path(txMtdDir + "/Bin/" + agents.getName(colID)+ TfUtils.TXMTD_BIN_FILE_SUFFIX);      TfUtils.checkValidInputFile(fs,path,true);      BufferedReader br=new BufferedReader(new InputStreamReader(fs.open(path)));      String[] fields=br.readLine().split(TfUtils.TXMTD_SEP);      double min=UtilFunctions.parseToDouble(fields[1]);      double binwidth=UtilFunctions.parseToDouble(fields[3]);      int nbins=UtilFunctions.parseToInt(fields[4]);      _numBins[i]=nbins;      _min[i]=min;      _binWidths[i]=binwidth;      br.close();    }  } else {    fs.close();    throw new RuntimeException("Path to recode maps must be a directory: " + txMtdDir);  }}  }
class C{  public void updateOldLanguage(){  boolean updateDone=false;  if (!plugin.getPluginLang().getKeys(false).contains("list-distance-gliding")) {    plugin.getPluginLang().set("list-distance-gliding","Distance Travelled with Elytra");    updateDone=true;  }  if (!plugin.getPluginLang().getKeys(false).contains("list-musicdiscs")) {    plugin.getPluginLang().set("list-musicdiscs","Music Discs Played");    updateDone=true;  }  if (!plugin.getPluginLang().getKeys(false).contains("list-enderpearls")) {    plugin.getPluginLang().set("list-enderpearls","Teleportations with Ender Pearls");    updateDone=true;  }  if (!plugin.getPluginLang().getKeys(false).contains("list-achievement-received")) {    plugin.getPluginLang().set("list-achievement-received","&a\u2713&f ");    updateDone=true;  }  if (!plugin.getPluginLang().getKeys(false).contains("list-achievement-not-received")) {    plugin.getPluginLang().set("list-achievement-not-received","&4\u2717&8 ");    updateDone=true;  }  if (!plugin.getPluginLang().getKeys(false).contains("book-date")) {    plugin.getPluginLang().set("book-date","Book created on DATE.");    updateDone=true;  }  if (!plugin.getPluginLang().getKeys(false).contains("list-back-message")) {    plugin.getPluginLang().set("list-back-message","&7Back");    updateDone=true;  }  if (!plugin.getPluginLang().getKeys(false).contains("week-achievement")) {    plugin.getPluginLang().set("week-achievement","Weekly achievement rankings:");    updateDone=true;  }  if (!plugin.getPluginLang().getKeys(false).contains("month-achievement")) {    plugin.getPluginLang().set("month-achievement","Monthly achievement rankings:");    updateDone=true;  }  if (!plugin.getPluginLang().getKeys(false).contains("aach-command-week")) {    plugin.getPluginLang().set("aach-command-week","Display weekly rankings.");    updateDone=true;  }  if (!plugin.getPluginLang().getKeys(false).contains("aach-command-month")) {    plugin.getPluginLang().set("aach-command-month","Display monthly rankings.");    updateDone=true;  }  if (!plugin.getPluginLang().getKeys(false).contains("not-ranked")) {    plugin.getPluginLang().set("not-ranked","You are currently not ranked for this period.");    updateDone=true;  }  if (!plugin.getPluginLang().getKeys(false).contains("aach-command-book-hover")) {    plugin.getPluginLang().set("aach-command-book-hover","RP items you can collect and exchange with others! Time-based listing.");    updateDone=true;  }  if (!plugin.getPluginLang().getKeys(false).contains("aach-command-stats-hover")) {    plugin.getPluginLang().set("aach-command-stats-hover","Progress bar. Gotta catch 'em all!");    updateDone=true;  }  if (!plugin.getPluginLang().getKeys(false).contains("aach-command-list-hover")) {    plugin.getPluginLang().set("aach-command-list-hover","Fancy GUI to get an overview of all achievements and your progress!");    updateDone=true;  }  if (!plugin.getPluginLang().getKeys(false).contains("aach-command-top-hover")) {    plugin.getPluginLang().set("aach-command-top-hover","Who are the server's leaders and how do you compare to them?");    updateDone=true;  }  if (!plugin.getPluginLang().getKeys(false).contains("aach-command-give-hover")) {    plugin.getPluginLang().set("aach-command-give-hover","Player must be online; only Commands achievements can be used.");    updateDone=true;  }  if (!plugin.getPluginLang().getKeys(false).contains("aach-command-reload-hover")) {    plugin.getPluginLang().set("aach-command-reload-hover","Reload most settings in config.yml and lang.yml files.");    updateDone=true;  }  if (!plugin.getPluginLang().getKeys(false).contains("aach-command-info-hover")) {    plugin.getPluginLang().set("aach-command-info-hover","Some extra info about the plugin and its awesome author!");    updateDone=true;  }  if (!plugin.getPluginLang().getKeys(false).contains("aach-command-check-hover")) {    plugin.getPluginLang().set("aach-command-check-hover","Don't forget to add the colors defined in the config file.");    updateDone=true;  }  if (!plugin.getPluginLang().getKeys(false).contains("aach-command-delete-hover")) {    plugin.getPluginLang().set("aach-command-delete-hover","Player must be online; does not reset any associated statistics.");    updateDone=true;  }  if (!plugin.getPluginLang().getKeys(false).contains("aach-command-week-hover")) {    plugin.getPluginLang().set("aach-command-week-hover","Best achievement hunters since the start of the week!");    updateDone=true;  }  if (!plugin.getPluginLang().getKeys(false).contains("aach-command-month-hover")) {    plugin.getPluginLang().set("aach-command-month-hover","Best achievement hunters since the start of the month!");    updateDone=true;  }  if (!plugin.getPluginLang().getKeys(false).contains("aach-tip")) {    plugin.getPluginLang().set("aach-tip","&lHINT&r &8You can &7&n&ohover&r &8or &7&n&oclick&r &8on the commands!");    updateDone=true;  }  if (updateDone) {    try {      plugin.getPluginLang().saveConfig();      plugin.getPluginLang().reloadConfig();    } catch (    IOException e) {      plugin.getLogger().log(Level.SEVERE,"Error while saving changes to the language file: ",e);      plugin.setSuccessfulLoad(false);    }  }}  }
class C{  public static Group createGroup(){  return new GroupImpl();}  }
class C{  public int put(Object key,int value){  if (key == null)   key=NULL_KEY;synchronized (this) {    int hash=key.hashCode() & _mask;    for (Item item=_entries[hash]; item != null; item=item._next) {      Object testKey=item._key;      if (testKey == key || testKey.equals(key)) {        int oldValue=item._value;        item._value=value;        return oldValue;      }    }    Item item=new Item(key,value);    item._next=_entries[hash];    _entries[hash]=item;    _size++;  }  return NULL;}  }
class C{  public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {  return decodeToObject(encodedObject,NO_OPTIONS,null);}  }
class C{  @Override public void stop(){  GridNioFilter ref=head.previousFilter();  while (ref != tail) {    ref.stop();    ref=ref.previousFilter();  }}  }
class C{  public Slack sendToChannel(String channel){  this.channel="#" + channel;  return this;}  }
class C{  public void append(String s){  content+=s;}  }
class C{  public List<Integer> emit(Collection<Tuple> anchors,List<Object> tuple){  return emit(Utils.DEFAULT_STREAM_ID,anchors,tuple);}  }
class C{  protected String extractLink(final CharacterIterator ci){  final StringBuilder sbuf=new StringBuilder();  char ch=ci.current();  char terminator=' ';  if (ch == '\'') {    terminator=ch;  }  while (ch != CharacterIterator.DONE) {    if (ch == terminator) {      if (terminator == ' ') {        ch=ci.next();        if (ch == '#') {          ch=' ';        } else {          ci.previous();          break;        }      } else {        break;      }    }    sbuf.append(ch);    ch=ci.next();  }  int len=sbuf.length();  while (len != 0) {    if (!isWordDelim(sbuf.charAt(--len))) {      len++;      break;    }    sbuf.setLength(len);    ci.previous();  }  if (len == 0) {    return null;  }  return sbuf.toString();}  }
class C{  public static void moveFile(File srcFile,File destFile) throws FileNotFoundException {  boolean rename=srcFile.renameTo(destFile);  if (!rename) {    copyFile(srcFile.getAbsolutePath(),destFile.getAbsolutePath());    deleteFile(srcFile.getAbsolutePath());  }}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public static void checkArgument(boolean expression,Object errorMessage){  if (!expression) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }}  }
class C{  private static boolean isElementClickable(WebElement element){  Preconditions.checkNotNull(element);  return element.isDisplayed() && element.isEnabled();}  }
class C{  public Label pushSwitch(){  pushState();  breakLabel=new Label();  return breakLabel;}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  count=s.readInt();  value=(char[])s.readObject();}  }
class C{  public OutputStream openOutputStream(String file,int offset) throws IOException {  return Util.getImplementation().openOutputStream(file,offset);}  }
class C{  private void initFilesList(){  fileToAdd.addAll(FilesUtils.searchrecursively(systemFolder,".apk"));  fileToAdd.addAll(FilesUtils.searchrecursively(systemFolder,".jar"));}  }
class C{  public void testCompareToZeroPos(){  byte bBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  int bSign=1;  BigInteger aNumber=BigInteger.ZERO;  BigInteger bNumber=new BigInteger(bSign,bBytes);  assertEquals(-1,aNumber.compareTo(bNumber));}  }
class C{  public void collapseAll(){  int row=getRowCount() - 1;  while (row >= 0) {    collapseRow(row);    row--;  }}  }
class C{  public void addTree(Tree tree){  samples++;  List<Clade> clades=new ArrayList<Clade>();  List<Clade> parentClades=new ArrayList<Clade>();  getClades(tree,tree.getRoot(),parentClades,clades);  clades.add(parentClades.get(parentClades.size() - 1));  parentClades.add(clades.get(clades.size() - 1));  int size=clades.size();  for (int i=0; i < size; i++) {    Clade c=clades.get(i);    Clade parent=parentClades.get(i);    HashMap<BitSet,Clade> coFreqs;    if (cladeProbabilities.containsKey(c.getBits())) {      Clade tmp=cladeProbabilities.get(c.getBits());      tmp.addHeight(c.getHeight());    } else {      c.addHeight(c.getHeight());      cladeProbabilities.put(c.getBits(),c);    }    if (!parent.equals(c)) {      if (cladeCoProbabilities.containsKey(parent.getBits())) {        coFreqs=cladeCoProbabilities.get(parent.getBits());      } else {        coFreqs=new HashMap<BitSet,Clade>();        cladeCoProbabilities.put(parent.getBits(),coFreqs);      }      if (coFreqs.containsKey(c.getBits())) {        Clade tmp=coFreqs.get(c.getBits());        tmp.addHeight(c.getHeight());      } else {        Clade tmp=new Clade((BitSet)c.getBits().clone(),c.getHeight());        tmp.addHeight(c.getHeight());        coFreqs.put(c.getBits(),tmp);      }    }  }}  }
class C{  public static boolean isIdentifier(@NotNull @NonNls String name){  return !isReserved(name) && isIdentifierString(name);}  }
class C{  public static Scenario loadScenario(final Config config){  return ScenarioLoaderImpl.loadScenario(config);}  }
class C{  @Override public int clusterInstance(Instance instance) throws Exception {  Instance inst=null;  if (!m_dontReplaceMissing) {    m_ReplaceMissingFilter.input(instance);    m_ReplaceMissingFilter.batchFinished();    inst=m_ReplaceMissingFilter.output();  } else {    inst=instance;  }  return clusterProcessedInstance(inst,false,true,null);}  }
class C{  public static int[] sort(int[] array){  int[] index=new int[array.length];  int[] newIndex=new int[array.length];  int[] helpIndex;  int numEqual;  for (int i=0; i < index.length; i++) {    index[i]=i;  }  quickSort(array,index,0,array.length - 1);  int i=0;  while (i < index.length) {    numEqual=1;    for (int j=i + 1; ((j < index.length) && (array[index[i]] == array[index[j]])); j++) {      numEqual++;    }    if (numEqual > 1) {      helpIndex=new int[numEqual];      for (int j=0; j < numEqual; j++) {        helpIndex[j]=i + j;      }      quickSort(index,helpIndex,0,numEqual - 1);      for (int j=0; j < numEqual; j++) {        newIndex[i + j]=index[helpIndex[j]];      }      i+=numEqual;    } else {      newIndex[i]=index[i];      i++;    }  }  return newIndex;}  }
class C{  public BitMatrix copy(){  return (BitMatrix)clone();}  }
class C{  public boolean isNewerThan(LockGrantorId otherLockGrantorId){  if (otherLockGrantorId == null) {    return true;  }  boolean isNewer=this.lockGrantorVersion > otherLockGrantorId.getLockGrantorVersion();  if (!isNewer && this.lockGrantorMember.equals(otherLockGrantorId.getLockGrantorMember())) {    int otherGrantorSerialNumber=otherLockGrantorId.getLockGrantorSerialNumber();    boolean serialRolled=this.lockGrantorSerialNumber > ROLLOVER_MARGIN && otherGrantorSerialNumber < 0;    isNewer=serialRolled || this.lockGrantorSerialNumber > otherGrantorSerialNumber;  }  return isNewer;}  }
class C{  public boolean isInitialized(){  return highWaterEpoch >= 0;}  }
class C{  private void clearFormBody(){  if ((messageComposite != null) && !messageComposite.isDisposed()) {    messageComposite.dispose();  }  treeViewer.setInput(null);  treeViewer.getTree().setVisible(false);  treeViewer.getTree().setLayoutData(new GridData(SWT.LEFT,SWT.TOP,false,false));}  }
class C{  public void eventDispatched(AWTEvent event){  Object source=event.getSource();  if (event instanceof KeyEvent && source instanceof Component) {    if ((SwingUtilities.windowForComponent((Component)source) == _window)) {      ((KeyEvent)event).consume();    }  }}  }
class C{  Range<Integer> characterRangeToTokenRange(int offset,int length) throws FormatterException {  int requiredLength=offset + length;  if (requiredLength > text.length()) {    throw new FormatterException(String.format("error: invalid length %d, offset + length (%d) is outside the file",length,requiredLength));  }  if (length < 0) {    return EMPTY_RANGE;  }  if (length == 0) {    length=1;  }  ImmutableCollection<Token> enclosed=getPositionTokenMap().subRangeMap(Range.closedOpen(offset,offset + length)).asMapOfRanges().values();  if (enclosed.isEmpty()) {    return EMPTY_RANGE;  }  return Range.closedOpen(enclosed.iterator().next().getTok().getIndex(),getLast(enclosed).getTok().getIndex() + 1);}  }
class C{  public static void main(String... args) throws Exception {  SelfDestructor.startCountdown(60);  TestHaltApp app=new TestHaltApp();  if (args.length == 0) {    app.controllerTest();  } else {    app.operations=Integer.parseInt(args[0]);    app.flags=Integer.parseInt(args[1]);    app.value=Integer.parseInt(args[2]);    app.processRunRandom();  }}  }
class C{  public static Composite createComposite(Composite parent,int columns,int hspan,int fill,int style){  Composite g=new Composite(parent,style);  g.setLayout(new GridLayout(columns,false));  g.setFont(parent.getFont());  GridData gd=new GridData(fill);  gd.horizontalSpan=hspan;  gd.grabExcessHorizontalSpace=true;  g.setLayoutData(gd);  return g;}  }
class C{  public FasStableConcurrent(IndependenceTest test){  this.test=test;}  }
class C{  protected boolean[] weightedInstancesHandler(){  boolean[] result=new boolean[2];  print("weighted instances associator...");  if (m_Associator instanceof WeightedInstancesHandler) {    println("yes");    result[0]=true;  } else {    println("no");    result[0]=false;  }  return result;}  }
class C{  private double cdfSlow(int k){  if (k < 0)   throw new IllegalArgumentException();  double sum=0.0;  for (int r=0; r <= k; r++)   sum+=pdf(r);  return sum;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:33.881 -0500",hash_original_method="A2720167EE002D05FE5DA0F6211150BE",hash_generated_method="475387FBACEF2F5CBCF9DA6389D77F70") public void clearScheduledSyncOperations(Account account,String authority){synchronized (mSyncQueue) {    mSyncQueue.remove(account,authority);  }  mSyncStorageEngine.setBackoff(account,authority,SyncStorageEngine.NOT_IN_BACKOFF_MODE,SyncStorageEngine.NOT_IN_BACKOFF_MODE);}  }
class C{  public List<CompilerDirective> produce(String data) throws CompilerDirectiveFactorySyntaxException {  List<CompilerDirective> result=new ArrayList<CompilerDirective>();  int directivePos=getDirectiveFirstChar(data,0);  while (directivePos > -1) {    int closingBracket=getDirectiveLastChar(data,directivePos);    try {      CompilerDirective directive=create(data,directivePos,closingBracket);      result.add(directive);    } catch (    CompilerDirectiveFactoryUnsupportedDirectiveException e) {      DelphiUtils.LOG.trace(e.getMessage());    }    directivePos=getDirectiveFirstChar(data,directivePos + 1);  }  return result;}  }
class C{  public void init() throws Exception {  Iterator<UIProvider> providers=ServiceLoader.load(UIProvider.class).iterator();  uiProvider=providers.hasNext() ? providers.next() : new DefaultUIProvider();}  }
class C{  protected void removeEventAndSetSequenceID(RemovedEventInfo info,long sequenceID){synchronized (this) {    if (this.lastDispatchedSequenceId < sequenceID) {      this.lastDispatchedSequenceId=sequenceID;    }  }  Long counter=info.counter;  Object key=info.key;  String r=info.regionName;  try {    owningQueue.destroyFromQueue(counter);  } catch (  EntryNotFoundException enfe) {    if (!owningQueue.destroyInProgress) {      logger.error(LocalizedMessage.create(LocalizedStrings.HARegionQueue_DACEREMOVEEVENTANDSETSEQUENCEID_SINCE_THE_EVENT_WAS_SUCCESSULY_REMOVED_BY_TAKE_OPERATION_IT_SHOULD_HAVE_EXISTED_IN_THE_REGION),enfe);    }  }  if (key == null) {    this.destroy(counter);  } else {    this.destroy(counter,key,r);  }}  }
class C{  public void skippedEntity(String name) throws org.xml.sax.SAXException {}  }
class C{  private void applyUserRigths(AppContext ctx,User object){  if (!object.getId().equals(ctx.getUser().getId())) {    Persistent<? extends GenericPK> parent=object.getParentObject(ctx);    object.setUserRole(AccessRightsUtils.getInstance().getRole(ctx.getUser(),parent));    AccessRightsUtils.getInstance().checkRole(ctx,parent,Role.READ);  } else {    object.setUserRole(Role.OWNER);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String grassFile=null;  String whiteboxHeaderFile=null;  int i=0;  int row, col, rows, cols;  String[] imageFiles;  int numImages=0;  double noData=-32768;  InputStream inStream=null;  OutputStream outStream=null;  int progress=0;  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputFilesString=args[i];    }  }  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    for (i=0; i < numImages; i++) {      if (numImages > 1) {        progress=(int)(100f * i / (numImages - 1));        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      whiteboxHeaderFile=imageFiles[i];      if (!((new File(whiteboxHeaderFile)).exists())) {        showFeedback("Whitebox raster file does not exist.");        break;      }      WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,"r");      rows=wbr.getNumberRows();      cols=wbr.getNumberColumns();      noData=wbr.getNoDataValue();      grassFile=whiteboxHeaderFile.replace(".dep",".grd");      (new File(grassFile)).delete();      fw=new FileWriter(grassFile,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      str1="DSAA";      out.println(str1);      str1=String.valueOf(cols) + " " + String.valueOf(rows);      out.println(str1);      double xMin=Math.min(wbr.getEast(),wbr.getWest());      double xMax=Math.max(wbr.getEast(),wbr.getWest());      str1=String.valueOf(xMin) + " " + String.valueOf(xMax);      out.println(str1);      double yMin=Math.min(wbr.getNorth(),wbr.getSouth());      double yMax=Math.max(wbr.getNorth(),wbr.getSouth());      str1=String.valueOf(yMin) + " " + String.valueOf(yMax);      out.println(str1);      str1=String.valueOf(0) + " " + String.valueOf(1);      out.println(str1);      double[] data=null;      String line="";      if (wbr.getDataType() == WhiteboxRaster.DataType.FLOAT || wbr.getDataType() == WhiteboxRaster.DataType.DOUBLE) {        for (row=rows - 1; row >= 0; row--) {          data=wbr.getRowValues(row);          line="";          str1="";          for (col=0; col < cols; col++) {            if (col != 0) {              str1=" ";            }            if (data[col] != noData) {              str1+=String.valueOf((float)data[col]);            } else {              str1+="-9999";            }            line+=str1;          }          out.println(line);          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * (rows - 1 - row) / (rows - 1));          updateProgress(progress);        }      } else {        for (row=rows - 1; row >= 0; row--) {          data=wbr.getRowValues(row);          line="";          str1="";          for (col=0; col < cols; col++) {            if (col != 0) {              str1=" ";            }            if (data[col] != noData) {              str1+=String.valueOf((int)data[col]);            } else {              str1+="-9999";            }            line+=str1;          }          out.println(line);          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * (rows - 1 - row) / (rows - 1));          updateProgress(progress);        }      }      wbr.close();      (new File(whiteboxHeaderFile.replace(".dep","_temp.dep"))).delete();    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected long writeNodeOrLeaf(final AbstractSimpleNodeData node){  return node.isLeaf() ? writeLeaf((SimpleLeafData)node) : writeNode((SimpleNodeData)node);}  }
class C{  public void clearViewsCached(){  mCacheView.clearViewsCached();}  }
class C{  public void init(int FloatingActionButtonColor){  setWillNotDraw(false);  setLayerType(View.LAYER_TYPE_SOFTWARE,null);  mButtonPaint=new Paint(Paint.ANTI_ALIAS_FLAG);  mButtonPaint.setColor(FloatingActionButtonColor);  mButtonPaint.setStyle(Paint.Style.FILL);  mButtonPaint.setShadowLayer(10.0f,0.0f,3.5f,Color.argb(100,0,0,0));  mDrawablePaint=new Paint(Paint.ANTI_ALIAS_FLAG);  invalidate();}  }
class C{  public boolean logout() throws IOException {  return FTPReply.isPositiveCompletion(quit());}  }
class C{  public static void writeConfigFile(String fileName) throws SQLException, IOException {  List<Class<?>> classList=new ArrayList<Class<?>>();  findAnnotatedClasses(classList,new File("."),0);  writeConfigFile(fileName,classList.toArray(new Class[classList.size()]));}  }
class C{  private static Properties toProperties(String[] args){  Properties props=new Properties();  for (int i=0; i < args.length; i++) {    if (args[i].startsWith("-J")) {      int eq=args[i].indexOf("=");      String key=args[i].substring(2,eq);      String value=args[i].substring(eq + 1);      System.setProperty(key,value);    } else     if (args[i].indexOf(AGENT_DEBUG) > 0) {      int eq=args[i].indexOf("=");      String key=args[i].substring(2,eq);      String value=args[i].substring(eq + 1);      System.setProperty(key,value);    } else     if (args[i].indexOf("=") > 0) {      int eq=args[i].indexOf("=");      String key=args[i].substring(0,eq);      String value=args[i].substring(eq + 1);      props.setProperty(key,value);    }  }  return props;}  }
class C{  @Override public void putAll(Map<? extends Float,? extends Double> map){  Iterator<? extends Entry<? extends Float,? extends Double>> it=map.entrySet().iterator();  for (int i=map.size(); i-- > 0; ) {    Entry<? extends Float,? extends Double> e=it.next();    this.put(e.getKey(),e.getValue());  }}  }
class C{  public static double decodeTimestamp(byte[] array,int pointer){  double r=0.0;  for (int i=0; i < 8; i++) {    r+=unsignedByteToShort(array[pointer + i]) * Math.pow(2,(3 - i) * 8);  }  return r;}  }
class C{  public synchronized int loadVote(){  return buffer.readInt(8);}  }
class C{  public int startPc(int i){  return ByteArray.readU16bit(info,i * 4 + 2);}  }
class C{  public static ComponentUI createUI(JComponent textArea){  return new RTextAreaUI(textArea);}  }
class C{  public static void showReilCode(final Window parent,final INaviCodeNode codeNode){  try {    CReilInstructionDialog.show(parent,codeNode);  } catch (  final InternalTranslationException exception) {    CUtilityFunctions.logException(exception);    final String message="E00XXX: " + "Could not show REIL code";    final String description=CUtilityFunctions.createDescription(String.format("BinNavi could not show the REIL code of node at '%X'.",codeNode.getAddress()),new String[]{"The node could not be converted to REIL code."},new String[]{"You can not fix this problem yourself. Please contact the " + "BinNavi support."});    NaviErrorDialog.show(parent,message,description,exception);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:33.814 -0500",hash_original_method="1948BDF01397223EDF19839C0F7A1A0C",hash_generated_method="152B565EDC78596A805BD7DF2E407430") private static ValueAnimator loadAnimator(Context context,AttributeSet attrs,ValueAnimator anim) throws NotFoundException {  TypedArray a=context.obtainStyledAttributes(attrs,com.android.internal.R.styleable.Animator);  long duration=a.getInt(com.android.internal.R.styleable.Animator_duration,0);  long startDelay=a.getInt(com.android.internal.R.styleable.Animator_startOffset,0);  int valueType=a.getInt(com.android.internal.R.styleable.Animator_valueType,VALUE_TYPE_FLOAT);  if (anim == null) {    anim=new ValueAnimator();  }  TypeEvaluator evaluator=null;  int valueFromIndex=com.android.internal.R.styleable.Animator_valueFrom;  int valueToIndex=com.android.internal.R.styleable.Animator_valueTo;  boolean getFloats=(valueType == VALUE_TYPE_FLOAT);  TypedValue tvFrom=a.peekValue(valueFromIndex);  boolean hasFrom=(tvFrom != null);  int fromType=hasFrom ? tvFrom.type : 0;  TypedValue tvTo=a.peekValue(valueToIndex);  boolean hasTo=(tvTo != null);  int toType=hasTo ? tvTo.type : 0;  if ((hasFrom && (fromType >= TypedValue.TYPE_FIRST_COLOR_INT) && (fromType <= TypedValue.TYPE_LAST_COLOR_INT)) || (hasTo && (toType >= TypedValue.TYPE_FIRST_COLOR_INT) && (toType <= TypedValue.TYPE_LAST_COLOR_INT))) {    getFloats=false;    anim.setEvaluator(new ArgbEvaluator());  }  if (getFloats) {    float valueFrom;    float valueTo;    if (hasFrom) {      if (fromType == TypedValue.TYPE_DIMENSION) {        valueFrom=a.getDimension(valueFromIndex,0f);      } else {        valueFrom=a.getFloat(valueFromIndex,0f);      }      if (hasTo) {        if (toType == TypedValue.TYPE_DIMENSION) {          valueTo=a.getDimension(valueToIndex,0f);        } else {          valueTo=a.getFloat(valueToIndex,0f);        }        anim.setFloatValues(valueFrom,valueTo);      } else {        anim.setFloatValues(valueFrom);      }    } else {      if (toType == TypedValue.TYPE_DIMENSION) {        valueTo=a.getDimension(valueToIndex,0f);      } else {        valueTo=a.getFloat(valueToIndex,0f);      }      anim.setFloatValues(valueTo);    }  } else {    int valueFrom;    int valueTo;    if (hasFrom) {      if (fromType == TypedValue.TYPE_DIMENSION) {        valueFrom=(int)a.getDimension(valueFromIndex,0f);      } else       if ((fromType >= TypedValue.TYPE_FIRST_COLOR_INT) && (fromType <= TypedValue.TYPE_LAST_COLOR_INT)) {        valueFrom=a.getColor(valueFromIndex,0);      } else {        valueFrom=a.getInt(valueFromIndex,0);      }      if (hasTo) {        if (toType == TypedValue.TYPE_DIMENSION) {          valueTo=(int)a.getDimension(valueToIndex,0f);        } else         if ((toType >= TypedValue.TYPE_FIRST_COLOR_INT) && (toType <= TypedValue.TYPE_LAST_COLOR_INT)) {          valueTo=a.getColor(valueToIndex,0);        } else {          valueTo=a.getInt(valueToIndex,0);        }        anim.setIntValues(valueFrom,valueTo);      } else {        anim.setIntValues(valueFrom);      }    } else {      if (hasTo) {        if (toType == TypedValue.TYPE_DIMENSION) {          valueTo=(int)a.getDimension(valueToIndex,0f);        } else         if ((toType >= TypedValue.TYPE_FIRST_COLOR_INT) && (toType <= TypedValue.TYPE_LAST_COLOR_INT)) {          valueTo=a.getColor(valueToIndex,0);        } else {          valueTo=a.getInt(valueToIndex,0);        }        anim.setIntValues(valueTo);      }    }  }  anim.setDuration(duration);  anim.setStartDelay(startDelay);  if (a.hasValue(com.android.internal.R.styleable.Animator_repeatCount)) {    anim.setRepeatCount(a.getInt(com.android.internal.R.styleable.Animator_repeatCount,0));  }  if (a.hasValue(com.android.internal.R.styleable.Animator_repeatMode)) {    anim.setRepeatMode(a.getInt(com.android.internal.R.styleable.Animator_repeatMode,ValueAnimator.RESTART));  }  if (evaluator != null) {    anim.setEvaluator(evaluator);  }  final int resID=a.getResourceId(com.android.internal.R.styleable.Animator_interpolator,0);  if (resID > 0) {    anim.setInterpolator(AnimationUtils.loadInterpolator(context,resID));  }  a.recycle();  return anim;}  }
class C{  public static String decodeBCD(final short bcd){  return String.format("%x.%02x",(bcd & 0xFF00) >> 8,bcd & 0x00FF);}  }
class C{  public void populateBucket2Node(PartitionedRegion pr,List nodes,int numOfBuckets){  assertEquals(0,pr.getRegionAdvisor().getCreatedBucketsCount());  final RegionAdvisor ra=pr.getRegionAdvisor();  int nodeListCnt=0;  Random ran=new Random();  HashMap verMap=new HashMap();  for (int i=0; i < numOfBuckets; i++) {    nodeListCnt=setNodeListCnt(nodeListCnt);    for (int j=0; j < nodeListCnt; j++) {      BucketProfile bp=new BucketProfile();      bp.peerMemberId=(InternalDistributedMember)nodes.get(ran.nextInt(nodes.size()));      Integer v;      if ((v=(Integer)verMap.get(bp.getDistributedMember())) != null) {        bp.version=v.intValue() + 1;        verMap.put(bp.getDistributedMember(),new Integer(bp.version));      } else {        verMap.put(bp.getDistributedMember(),new Integer(0));        bp.version=0;      }      bp.isHosting=true;      if (j == 0) {        bp.isPrimary=true;      }      bp.scope=Scope.DISTRIBUTED_ACK;      boolean forceBadProfile=true;      assertTrue(ra.getBucket(i).getBucketAdvisor().putProfile(bp,forceBadProfile));    }  }}  }
class C{  @Override public int nextTag() throws XMLStreamException {  log.log(Level.FINE,"nextTag()");  int eventType=next();  while ((eventType == CHARACTERS && isWhiteSpace()) || (eventType == CDATA && isWhiteSpace()) || eventType == SPACE || eventType == PROCESSING_INSTRUCTION || eventType == COMMENT) {    eventType=next();  }  if (eventType != START_ELEMENT && eventType != END_ELEMENT) {    throw new XMLStreamException(String.format("expected start or end tag and found %d",eventType));  }  log.log(Level.FINE,"nextTag(): {0}",eventType);  return eventType;}  }
class C{  public void subtractFromThis(GF2Polynomial b){  expandN(b.len);  xorThisBy(b);}  }
class C{  @Override public String toString(){  return getStringValue();}  }
class C{  public static double signedArea(S2Point a,S2Point b,S2Point c){  return area(a,b,c) * robustCCW(a,b,c);}  }
class C{  public boolean isLookAtValid(){  return mLookAtValid;}  }
class C{  void showHeader(String text){  header.setText(text);}  }
class C{  public static double pointPosition(double x0,double y0,double x1,double y1,double x2,double y2){  return (x1 - x0) * (y2 - y0) - (x2 - x0) * (y1 - y0);}  }
class C{  public boolean isRequired(){  return required;}  }
class C{  public void createNote(String userId,String subject,String message) throws IOException {  createNote(userId,subject,message,null);}  }
class C{  private void cmd_save(){  log.config("");  Ini.setProperty(Ini.P_A_COMMIT,(autoCommit.isSelected()));  Env.setAutoCommit(Env.getCtx(),autoCommit.isSelected());  Ini.setProperty(Ini.P_A_NEW,(autoNew.isSelected()));  Env.setAutoNew(Env.getCtx(),autoNew.isSelected());  Ini.setProperty(Ini.P_ADEMPIERESYS,adempiereSys.isSelected());  Ini.setProperty(Ini.P_LOGMIGRATIONSCRIPT,logMigrationScript.isSelected());  if (MSystem.isSwingRememberPasswordAllowed()) {    Ini.setProperty(Ini.P_A_LOGIN,(autoLogin.isSelected()));    Ini.setProperty(Ini.P_STORE_PWD,(storePassword.isSelected()));  } else {    Ini.setProperty(Ini.P_A_LOGIN,false);    Ini.setProperty(Ini.P_STORE_PWD,false);  }  Ini.setProperty(Ini.P_SHOW_ACCT,(showAcct.isSelected()));  Env.setContext(Env.getCtx(),"#ShowAcct",(showAcct.isSelected()));  Ini.setProperty(Ini.P_SHOW_TRL,(showTrl.isSelected()));  Env.setContext(Env.getCtx(),"#ShowTrl",(showTrl.isSelected()));  Ini.setProperty(Ini.P_SHOW_ADVANCED,(showAdvanced.isSelected()));  Env.setContext(Env.getCtx(),"#ShowAdvanced",(showAdvanced.isSelected()));  ValueNamePair ppNew=(ValueNamePair)connectionProfile.getSelectedItem();  String cpNew=ppNew.getValue();  String cpOld=CConnection.get().getConnectionProfile();  CConnection.get().setConnectionProfile(cpNew);  if (!cpNew.equals(cpOld) && (cpNew.equals(CConnection.PROFILE_WAN) || cpOld.equals(CConnection.PROFILE_WAN)))   ADialog.info(0,this,"ConnectionProfileChange");  Ini.setProperty(Ini.P_CACHE_WINDOW,cacheWindow.isSelected());  Ini.setProperty(Ini.P_PRINTPREVIEW,(printPreview.isSelected()));  Ini.setProperty(Ini.P_VALIDATE_CONNECTION_ON_STARTUP,(validateConnectionOnStartup.isSelected()));  Ini.setProperty(Ini.P_SINGLE_INSTANCE_PER_WINDOW,(singleInstancePerWindow.isSelected()));  Ini.setProperty(Ini.P_OPEN_WINDOW_MAXIMIZED,(openWindowMaximized.isSelected()));  Level level=(Level)traceLevel.getSelectedItem();  CLogMgt.setLevel(level);  Ini.setProperty(Ini.P_TRACELEVEL,level.getName());  Ini.setProperty(Ini.P_TRACEFILE,traceFile.isSelected());  String printer=(String)fPrinter.getSelectedItem();  Env.setContext(Env.getCtx(),"#Printer",printer);  Ini.setProperty(Ini.P_PRINTER,printer);  java.sql.Timestamp ts=(java.sql.Timestamp)fDate.getValue();  if (ts != null)   Env.setContext(Env.getCtx(),"#Date",ts);  Charset charset=(Charset)fCharset.getSelectedItem();  Ini.setProperty(Ini.P_CHARSET,charset.name());  ValueNamePair laf=plafEditor.getSelectedLook();  ValueNamePair theme=plafEditor.getSelectedTheme();  if (laf != null) {    String clazz=laf.getValue();    String currentLaf=UIManager.getLookAndFeel().getClass().getName();    if (clazz != null && clazz.length() > 0 && !currentLaf.equals(clazz)) {      AdempierePLAF.setPLAF(laf,theme,true);      AEnv.updateUI();    } else {      if (UIManager.getLookAndFeel() instanceof MetalLookAndFeel) {        MetalTheme currentTheme=MetalLookAndFeel.getCurrentTheme();        String themeClass=currentTheme.getClass().getName();        String sTheme=theme.getValue();        if (sTheme != null && sTheme.length() > 0 && !sTheme.equals(themeClass)) {          ValueNamePair plaf=new ValueNamePair(UIManager.getLookAndFeel().getClass().getName(),UIManager.getLookAndFeel().getName());          AdempierePLAF.setPLAF(plaf,theme,true);          AEnv.updateUI();        }      }    }  }  Ini.saveProperties(Ini.isClient());  dispose();}  }
class C{  protected void calcYValueCount(){  mYValCount=0;  if (mDataSets == null)   return;  int count=0;  for (int i=0; i < mDataSets.size(); i++) {    count+=mDataSets.get(i).getEntryCount();  }  mYValCount=count;}  }
class C{  public void translate(int x,int y){  if (debugLog()) {    info().log(toShortString() + " Translating by: " + new Point(x,y));  }  xOffset+=x;  yOffset+=y;  graphics.translate(x,y);}  }
class C{  public void writeTag(String tag,Object value){  if (value != null) {    writer.println(indent + "<" + tag+ ">"+ escape(value.toString())+ "</"+ tag+ ">");  } else {    writer.println(indent + "<" + tag+ "></"+ tag+ ">");  }}  }
class C{  public SpecificMessage(String m,int l){  super(m,l);}  }
class C{  public RealVector copy(){  if (isSparse) {    RealVector copy=new RealVector(dimension);    copy.sparseOffsets=new short[sparseOffsets.length];    for (int i=0; i < sparseOffsets.length; ++i) {      copy.sparseOffsets[i]=sparseOffsets[i];    }    return copy;  } else {    float[] coordinatesCopy=new float[dimension];    for (int i=0; i < dimension; ++i) {      coordinatesCopy[i]=coordinates[i];    }    return new RealVector(coordinatesCopy);  }}  }
class C{  public boolean isExclUpperBound(){  return exclUpperBound;}  }
class C{  public String numberAutoencodersToolTip(){  return "Number of autoencoders, i.e. number of hidden layers " + "+1. Note that this can be also used as the number of " + "autoencoders to use in the optimization search, "+ "autoencoders will be added until this number is reached "+ " and then the best configuration in terms of number of layers is selects.";}  }
class C{  public void ringDevice(org.wso2.emm.agent.beans.Operation operation){  operation.setStatus(resources.getString(R.string.operation_value_completed));  resultBuilder.build(operation);  Intent intent=new Intent(context,AlertActivity.class);  intent.putExtra(resources.getString(R.string.intent_extra_type),resources.getString(R.string.intent_extra_ring));  intent.putExtra(resources.getString(R.string.intent_extra_message_text),resources.getString(R.string.intent_extra_stop_ringing));  intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_NEW_TASK);  context.startActivity(intent);  if (Constants.DEBUG_MODE_ENABLED) {    Log.d(TAG,"Ringing is activated on the device");  }}  }
class C{  public void requestUpdateFromLayout(){}  }
class C{  public ListenerIdMap.Entry[] entries(){  Entry[] entries=new Entry[this.size()];  Entry[] table=this.table;  int i=0;  for (int bucket=0; bucket < table.length; bucket++) {    for (Entry e=table[bucket]; e != null; e=e.next) {      entries[i++]=e;    }  }  return entries;}  }
class C{  public final int hashCode(){  return super.hashCode();}  }
class C{  public int readShiftedGamma() throws IOException {  int preComp;  if ((fill >= 16 || refill() >= 16) && (preComp=SHIFTED_GAMMA[current >> (fill - 16) & 0xFFFF]) != 0) {    readBits+=preComp >> 16;    fill-=preComp >> 16;    return preComp & 0xFFFF;  }  final int msb=readUnary() - 1;  return msb == -1 ? 0 : ((1 << msb) | readInt(msb));}  }
class C{  private HashMultimap<Integer,String> extractDistanceAchievementFromConfig(String achievementKeyName){  Set<String> configKeys=plugin.getConfig().getConfigurationSection(achievementKeyName).getKeys(false);  HashMultimap<Integer,String> achievementsCache=HashMultimap.create(configKeys.size(),1);  for (  String distance : configKeys)   achievementsCache.put(Integer.valueOf(distance),null);  return achievementsCache;}  }
class C{  public static ValidationExceptionBean parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  ValidationExceptionBean object=new ValidationExceptionBean();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"validationExceptionBean".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (ValidationExceptionBean)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list4=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","causeStackTrace").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setCauseStackTrace(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","id").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","messageKey").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setMessageKey(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","messageParams").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list4.add(null);        reader.next();      } else {        list4.add(reader.getElementText());      }      boolean loopDone4=false;      while (!loopDone4) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement())         reader.next();        if (reader.isEndElement()) {          loopDone4=true;        } else {          if (new javax.xml.namespace.QName("http://oscm.org","messageParams").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list4.add(null);              reader.next();            } else {              list4.add(reader.getElementText());            }          } else {            loopDone4=true;          }        }      }      object.setMessageParams((java.lang.String[])list4.toArray(new java.lang.String[list4.size()]));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","member").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.setMember(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org","reason").equals(reader.getName())) {      object.setReason(ReasonEnum.Factory.parse(reader));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  private void createRaytracingTexture(){  this.raytraceTexture=glGenTextures();  glBindTexture(GL_TEXTURE_2D,raytraceTexture);  glTexStorage2D(GL_TEXTURE_2D,1,GL_RGBA32F,width,height);  glBindTexture(GL_TEXTURE_2D,0);}  }
class C{  public Parse filter(String url,WebPage page,Parse parse,HTMLMetaTags metaTags,DocumentFragment doc){  for (  ParseFilter parseFilter : parseFilters) {    parse=parseFilter.filter(url,page,parse,metaTags,doc);    if (!ParseStatusUtils.isSuccess(parse.getParseStatus())) {      return parse;    }  }  return parse;}  }
class C{  public void begin(String namespace,String name,Attributes attributes) throws Exception {  try {    if ((FacesConfigBean)digester.peek() == null) {      pushed=true;    }    ;  } catch (  Exception e) {    pushed=true;  }  if (pushed) {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[FacesConfigRule]{" + digester.getMatch() + "} New "+ CLASS_NAME);    }    Class clazz=digester.getClassLoader().loadClass(CLASS_NAME);    Object instance=clazz.newInstance();    digester.push(instance);  } else {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[FacesConfigRule]{" + digester.getMatch() + "} Top "+ CLASS_NAME);    }  }}  }
class C{  private int measureHeight(int measureSpec){  int result=0;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * radius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public int hashCode(){  if (this.affineX != null) {    return affineX.hashCode() * 31 + affineY.hashCode();  }  return 11;}  }
class C{  public final boolean debug_lines(){  return (getFlags() & F_DEBUG_LINES) != 0;}  }
class C{  public static void execute(InlineDecision inlDec,IR ir,Instruction callSite){  BasicBlock bb=callSite.getBasicBlock().segregateInstruction(callSite,ir);  BasicBlock in=bb.prevBasicBlockInCodeOrder();  BasicBlock out=bb.nextBasicBlockInCodeOrder();  ExceptionHandlerBasicBlock[] catchBlocks=new ExceptionHandlerBasicBlock[bb.getNumberOfExceptionalOut()];  Enumeration<BasicBlock> e=bb.getExceptionalOut();  for (int i=0; i < catchBlocks.length; i++) {    catchBlocks[i]=(ExceptionHandlerBasicBlock)e.nextElement();  }  ExceptionHandlerBasicBlockBag bag=new ExceptionHandlerBasicBlockBag(catchBlocks,null);  GenerationContext childgc=execute(inlDec,ir.getGc(),bag,callSite);  ir.cfg.removeFromCFGAndCodeOrder(bb);  ir.cfg.breakCodeOrder(in,out);  ir.cfg.linkInCodeOrder(in,childgc.getCfg().firstInCodeOrder());  ir.cfg.linkInCodeOrder(childgc.getCfg().lastInCodeOrder(),out);  in.insertOut(childgc.getPrologue());  if (childgc.getEpilogue() != null) {    childgc.getEpilogue().insertOut(out);  }}  }
class C{  public void init(final Renderer r){  if (textureRenderer != null) {    return;  }  textureRenderer=ImageUtil.createTextureRenderer(0,0,r,true);  if (isParallel) {    textureRenderer.getCamera().setProjectionMode(Camera.ProjectionMode.Parallel);  }  ClipState noClip=new ClipState();  noClip.setEnabled(false);  textureRenderer.enforceState(noClip);  TextureState noTexture=new TextureState();  noTexture.setEnabled(false);  textureRenderer.enforceState(noTexture);  ColorMaskState colorDisabled=new ColorMaskState();  colorDisabled.setAll(false);  textureRenderer.enforceState(colorDisabled);  CullState cullFace=new CullState();  cullFace.setEnabled(true);  cullFace.setCullFace(CullState.Face.Back);  textureRenderer.enforceState(cullFace);  LightState noLights=new LightState();  noLights.setEnabled(false);  textureRenderer.enforceState(noLights);  ShadingState flat=new ShadingState();  flat.setShadingMode(ShadingMode.Flat);  textureRenderer.enforceState(flat);  GLSLShaderObjectsState glsl=new GLSLShaderObjectsState();  glsl.setEnabled(false);  textureRenderer.enforceState(glsl);  textureRenderer.enforceState(offsetState);  if (texture == null) {    createTexture();  }  textureRenderer.setupTexture(texture);}  }
class C{  public static Object fastInvoke(Object obj,String methodName,Class<?>[] parameterTypes,Object[] args){  Class<?> clazz=obj.getClass();  FastClass fastClass=fastClassCache.get(clazz);  if (fastClass == null) {    FastClass newFastClass=FastClass.create(clazz);    fastClass=fastClassCache.putIfAbsent(clazz,newFastClass);    if (fastClass == null) {      fastClass=newFastClass;    }  }  Object value=null;  try {    value=fastClass.invoke(methodName,parameterTypes,obj,args);  } catch (  InvocationTargetException e) {    JUnsafe.throwException(e);  }  return value;}  }
class C{  public FilePath(){  this("/");}  }
class C{  public ReadCommEventLogResponse(){  super();  setFunctionCode(Modbus.READ_COMM_EVENT_LOG);  setDataLength(7);}  }
class C{  public boolean isSetNextExcuteDate(){  return EncodingUtils.testBit(issetBitfield,NEXTEXCUTEDATE_ISSET_ID);}  }
class C{  public DynamicTimeSeriesCollection(int nSeries,int nMoments,TimeZone zone){  this(nSeries,nMoments,new Millisecond(),zone);  this.newestAt=nMoments - 1;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'GroupAudio' ("+ "'_id' INTEGER PRIMARY KEY ,"+ "'PARENT_ID' INTEGER,"+ "'NAME' TEXT,"+ "'CREATE_DATE' INTEGER);");}  }
class C{  public static DateTimeZone readFrom(DataInput in,String id) throws IOException {switch (in.readUnsignedByte()) {case 'F':    DateTimeZone fixed=new FixedDateTimeZone(id,in.readUTF(),(int)readMillis(in),(int)readMillis(in));  if (fixed.equals(DateTimeZone.UTC)) {    fixed=DateTimeZone.UTC;  }return fixed;case 'C':return CachedDateTimeZone.forZone(PrecalculatedZone.readFrom(in,id));case 'P':return PrecalculatedZone.readFrom(in,id);default :throw new IOException("Invalid encoding");}}  }
class C{  public T2<K,V> minimum() throws NoSuchElementException {  return root.minimum();}  }
class C{  public static void loadLibrary(String libName){  Runtime.getRuntime().loadLibrary0(libName,RVMClass.getClassLoaderFromStackFrame(1),true);}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public boolean equals(Object o){  if (o == null || !(o instanceof ZipLong)) {    return false;  }  return value == ((ZipLong)o).getValue();}  }
class C{  protected boolean internalPrevious() throws SQLException {  boolean bool=false;  for (int rows=this.getRow(); rows > 0; rows--) {    bool=super.internalPrevious();    if (p == null) {      return bool;    }    if (p.evaluate(this)) {      break;    }  }  return bool;}  }
class C{  public PrintfFormat(final String fmtArg) throws IllegalArgumentException {  this(Locale.getDefault(),fmtArg);}  }
class C{  public SymGraph map(int topID,int bottomID,int splitcolor){  SymGraph newSym=new SymGraph(motif);  System.arraycopy(topMotifnodeToColor,0,newSym.topMotifnodeToColor,0,topMotifnodeToColor.length);  for (  Map.Entry<Integer,List<Integer>> entry : colorToBottomMotifnode.entrySet()) {    ArrayList<Integer> n=new ArrayList<Integer>(entry.getValue());    newSym.colorToBottomMotifnode.put(entry.getKey(),n);  }  for (  Map.Entry<Integer,List<Integer>> entry : colorToTopMotifnode.entrySet()) {    ArrayList<Integer> n=new ArrayList<Integer>(entry.getValue());    newSym.colorToTopMotifnode.put(entry.getKey(),n);  }  newSym.colorToBottomMotifnode.get(splitcolor).remove((Integer)bottomID);  newSym.colorToTopMotifnode.get(splitcolor).remove((Integer)topID);  ArrayList<Integer> listtop=new ArrayList<Integer>(1);  ArrayList<Integer> listbottom=new ArrayList<Integer>(1);  int newColor=getFreeColor();  newSym.colorToBottomMotifnode.put(newColor,listbottom);  newSym.colorToTopMotifnode.put(newColor,listtop);  listtop.add(topID);  listbottom.add(bottomID);  boolean ok=newSym.refineColors(newColor);  if (ok) {    return newSym;  } else {    return null;  }}  }
class C{  public DataColoringManager(Projector projector){  this.projector=projector;}  }
class C{  private boolean isSizeAvailableToLoadColumnDictionary(long requiredSize){  return lruCacheMemorySize >= (currentSize + requiredSize);}  }
class C{  public boolean isReference(){  return value.isReference();}  }
class C{  public void takeSuggestionAt(float x){  mTouchX=(int)x;  onDraw(null);  if (mSelectedIndex >= 0) {    mService.pickSuggestionManually(mSelectedIndex);  }  invalidate();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testNode;  boolean state;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("address");  testNode=(Element)elementList.item(0);  state=testNode.hasAttribute("dmstc:domestic");  assertTrue("hasDomesticAttr",state);}  }
class C{  @SuppressWarnings("unchecked") public Set<S> descendants(){  Set<S> perms=new HashSet<>();  for (  S child : children) {    perms.add(child);    perms.addAll(child.descendants());  }  return perms;}  }
class C{  @ExceptionHandler(Exception.class) @ResponseBody public ResponseEntity<String> handleException(final Exception cause){  final String stackTrace=printStackTrace(cause);  logger.fatal(stackTrace);  return new ResponseEntity<String>(stackTrace,HttpStatus.INTERNAL_SERVER_ERROR);}  }
class C{  @Override public void run(){  amIActive=true;  RandomAccessFile rIn=null;  ByteBuffer buf;  String inputFilesString=null;  String[] vectorFiles;  double x, y, north, south, east, west;  double z;  float minValue, maxValue;  float featureValue;  int numVertices;  byte classValue, numReturns, returnNum;  int a, n, loc, featureNum=1;  int progress=0;  int numPoints=0;  ShapeType shapeType=ShapeType.POINT;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  if ((inputFilesString.length() <= 0)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    vectorFiles=inputFilesString.split(";");    int numVectorFiles=vectorFiles.length;    long numPointsInFile=0;    for (int j=0; j < numVectorFiles; j++) {      String fileName=vectorFiles[j];      File file=new File(fileName);      if (!file.exists()) {        return;      }      long fileLength=file.length();      if (fileLength > Integer.MAX_VALUE) {        showFeedback("File is too large!");      }      buf=ByteBuffer.allocate((int)fileLength);      rIn=new RandomAccessFile(fileName,"r");      FileChannel inChannel=rIn.getChannel();      inChannel.position(0);      inChannel.read(buf);      buf.order(ByteOrder.LITTLE_ENDIAN);      buf.rewind();      minValue=buf.getFloat(0);      maxValue=buf.getFloat(4);      north=Math.max(buf.getDouble(8),buf.getDouble(16));      south=Math.min(buf.getDouble(8),buf.getDouble(16));      east=Math.max(buf.getDouble(24),buf.getDouble(32));      west=Math.min(buf.getDouble(24),buf.getDouble(32));      loc=40;      do {        numVertices=buf.getInt(loc);        featureValue=buf.getFloat(loc + 4);        if (numVertices == 1) {          shapeType=ShapeType.POINT;        } else {          shapeType=ShapeType.POLYLINE;        }        break;      } while (loc < fileLength);      String outputFile=fileName.replace(".vtr",".shp");      File outfile=new File(outputFile);      if (outfile.exists()) {        outfile.delete();      }      ShapeFile output=new ShapeFile(outputFile,shapeType);      DBFField fields[]=new DBFField[2];      fields[0]=new DBFField();      fields[0].setName("FID");      fields[0].setDataType(DBFField.DBFDataType.NUMERIC);      fields[0].setFieldLength(10);      fields[0].setDecimalCount(0);      fields[1]=new DBFField();      fields[1].setName("VALUE");      fields[1].setDataType(DBFField.DBFDataType.NUMERIC);      fields[1].setFieldLength(10);      fields[1].setDecimalCount(3);      String DBFName=output.getDatabaseFile();      DBFWriter writer=new DBFWriter(new File(DBFName));      writer.setFields(fields);      progress=(int)((j + 1) * 100d / numVectorFiles);      updateProgress("Loop " + (j + 1) + " of "+ numVectorFiles+ ":",progress);      buf.rewind();      loc=40;      if (shapeType == ShapeType.POINT) {        do {          numVertices=buf.getInt(loc);          featureValue=buf.getFloat(loc + 4);          x=buf.getFloat(loc + 8) + west;          y=buf.getFloat(loc + 12) + south;          whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(x,y);          output.addRecord(wbGeometry);          Object[] rowData=new Object[2];          rowData[0]=new Double(featureNum);          rowData[1]=new Double(featureValue);          writer.addRecord(rowData);          loc+=8 + numVertices * 8;          featureNum++;        } while (loc < fileLength);      } else {        ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();        int[] parts={0};        do {          pnts.clear();          numVertices=buf.getInt(loc);          featureValue=buf.getFloat(loc + 4);          int startingByte=loc + 8;          for (a=0; a < numVertices; a++) {            x=buf.getFloat(startingByte + a * 8) + west;            y=buf.getFloat(startingByte + a * 8 + 4) + south;            pnts.add(new ShapefilePoint(x,y));          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          output.addRecord(wbGeometry);          Object[] rowData=new Object[2];          rowData[0]=new Double(featureNum);          rowData[1]=new Double(featureValue);          writer.addRecord(rowData);          loc+=8 + numVertices * 8;          featureNum++;        } while (loc < fileLength);      }      output.write();      writer.write();    }    returnData(vectorFiles[0].replace(".vtr",".shp"));  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    if (rIn != null) {      try {        rIn.close();      } catch (      Exception e) {      }    }    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected void executeS3SpecificStepsImpl(BusinessObjectDataRestoreDto businessObjectDataRestoreDto){  try {    S3FileTransferRequestParamsDto glacierS3FileTransferRequestParamsDto=storageHelper.getS3FileTransferRequestParamsDto();    glacierS3FileTransferRequestParamsDto.setS3BucketName(businessObjectDataRestoreDto.getGlacierBucketName());    glacierS3FileTransferRequestParamsDto.setS3Endpoint(configurationHelper.getProperty(ConfigurationValue.S3_ENDPOINT));    glacierS3FileTransferRequestParamsDto.setS3KeyPrefix(StringUtils.appendIfMissing(businessObjectDataRestoreDto.getGlacierS3KeyPrefix(),"/"));    List<StorageFile> expectedGlacierS3Files=new ArrayList<>();    for (    StorageFile originS3File : businessObjectDataRestoreDto.getOriginStorageFiles()) {      String destinationS3FilePath=String.format("%s/%s",businessObjectDataRestoreDto.getGlacierS3KeyBasePrefix(),originS3File.getFilePath());      expectedGlacierS3Files.add(new StorageFile(destinationS3FilePath,originS3File.getFileSizeBytes(),null));    }    List<S3ObjectSummary> actualGlacierS3Files=s3Service.listDirectory(glacierS3FileTransferRequestParamsDto,true);    storageFileHelper.validateArchivedS3Files(expectedGlacierS3Files,actualGlacierS3Files,businessObjectDataRestoreDto.getGlacierStorageName(),businessObjectDataRestoreDto.getBusinessObjectDataKey());    List<S3ObjectSummary> archivedGlacierS3Files=new ArrayList<>();    for (    S3ObjectSummary s3ObjectSummary : actualGlacierS3Files) {      if (StorageClass.Glacier.toString().equals(s3ObjectSummary.getStorageClass())) {        archivedGlacierS3Files.add(s3ObjectSummary);      }    }    glacierS3FileTransferRequestParamsDto.setFiles(storageFileHelper.getFiles(storageFileHelper.createStorageFilesFromS3ObjectSummaries(archivedGlacierS3Files)));    s3Service.restoreObjects(glacierS3FileTransferRequestParamsDto,7);  } catch (  Exception e) {    LOGGER.error("Failed to initiate a restore request for the business object data. businessObjectDataKey={}",jsonHelper.objectToJson(businessObjectDataRestoreDto.getBusinessObjectDataKey()),businessObjectDataRestoreDto.getException());    businessObjectDataRestoreDto.setException(e);  }}  }
class C{  public String next(int n) throws JSONException {  if (n == 0) {    return "";  }  char[] buffer=new char[n];  int pos=0;  while (pos < n) {    buffer[pos]=next();    if (end()) {      throw syntaxError("Substring bounds error");    }    pos+=1;  }  return new String(buffer);}  }
class C{  private void startGridAndCheck() throws Exception {  Ignite g=startGrid();  Map<String,Object> attrs=g.cluster().localNode().attributes();  for (  String prop : SYSTEM_PROPS) {    assert attrs.containsKey(prop);    assertEquals(System.getProperty(prop),attrs.get(prop));  }  for (  String prop : IGNITE_PROPS)   assert attrs.containsKey(prop);}  }
class C{  public static void addRow(Matrix A,int i,int start,int to,double c){  for (int j=start; j < to; j++)   A.increment(i,j,c);}  }
class C{  protected SkillFakeDefinitionImpl(){  super();}  }
class C{  public static boolean hasBody(RVMMethod callee){  return !(callee.isNative() || callee.isAbstract());}  }
class C{  public SuspendException(String message){  super(message);}  }
class C{  public synchronized void removeXTextLabel(double x){  mXTextLabels.remove(x);}  }
class C{  public boolean exists() throws SmbException {  if (attrExpiration > System.currentTimeMillis()) {    return isExists;  }  attributes=ATTR_READONLY | ATTR_DIRECTORY;  createTime=0L;  lastModified=0L;  isExists=false;  try {    if (url.getHost().length() == 0) {    } else     if (share == null) {      if (getType() == TYPE_WORKGROUP) {        UniAddress.getByName(url.getHost(),true);      } else {        UniAddress.getByName(url.getHost()).getHostName();      }    } else     if (getUncPath0().length() == 1 || share.equalsIgnoreCase("IPC$")) {      connect0();    } else {      Info info=queryPath(getUncPath0(),Trans2QueryPathInformationResponse.SMB_QUERY_FILE_BASIC_INFO);      attributes=info.getAttributes();      createTime=info.getCreateTime();      lastModified=info.getLastWriteTime();    }    isExists=true;  } catch (  UnknownHostException uhe) {  }catch (  SmbException se) {switch (se.getNtStatus()) {case NtStatus.NT_STATUS_NO_SUCH_FILE:case NtStatus.NT_STATUS_OBJECT_NAME_INVALID:case NtStatus.NT_STATUS_OBJECT_NAME_NOT_FOUND:case NtStatus.NT_STATUS_OBJECT_PATH_NOT_FOUND:      break;default :    throw se;}}attrExpiration=System.currentTimeMillis() + attrExpirationPeriod;return isExists;}  }
class C{  @Override public void scan(AccessProfile accessProfile) throws BaseCollectionException {  _logger.info("Starting scan of Unity StorageProvider. IP={}",accessProfile.getIpAddress());  StorageProvider.ConnectionStatus cxnStatus=StorageProvider.ConnectionStatus.CONNECTED;  StorageProvider provider=_dbClient.queryObject(StorageProvider.class,accessProfile.getSystemId());  _locker.acquireLock(accessProfile.getIpAddress(),LOCK_WAIT_SECONDS);  try {    VNXeApiClient apiClient=getVnxUnityClient(accessProfile);    if (apiClient != null) {      Map<String,StorageSystemViewObject> storageSystemsCache=accessProfile.getCache();      BasicSystemInfo unitySystem=apiClient.getBasicSystemInfo();      String unityType=StorageSystem.Type.unity.name();      String version=unitySystem.getApiVersion();      String compatibility=StorageSystem.CompatibilityStatus.COMPATIBLE.name();      provider.setCompatibilityStatus(compatibility);      provider.setVersionString(version);      VNXeStorageSystem system=apiClient.getStorageSystem();      _logger.info("Found Unity: {} ",system.getSerialNumber());      String id=system.getSerialNumber();      String nativeGuid=generateNativeGuid(unityType,id);      StorageSystemViewObject viewObject=storageSystemsCache.get(nativeGuid);      if (viewObject == null) {        viewObject=new StorageSystemViewObject();      }      viewObject.setDeviceType(unityType);      viewObject.addprovider(accessProfile.getSystemId().toString());      viewObject.setProperty(StorageSystemViewObject.MODEL,unitySystem.getModel());      viewObject.setProperty(StorageSystemViewObject.SERIAL_NUMBER,id);      storageSystemsCache.put(nativeGuid,viewObject);    }  } catch (  Exception e) {    cxnStatus=StorageProvider.ConnectionStatus.NOTCONNECTED;    _logger.error(String.format("Exception was encountered when attempting to scan Unity Instance %s",accessProfile.getIpAddress()),e);    throw VNXeException.exceptions.scanFailed(accessProfile.getIpAddress(),e);  } finally {    provider.setConnectionStatus(cxnStatus.name());    _dbClient.updateObject(provider);    _logger.info("Completed scan of Unity StorageProvider. IP={}",accessProfile.getIpAddress());    _locker.releaseLock(accessProfile.getIpAddress());  }}  }
class C{  @Override public void endSampling(Sampler<?,?,?> sampler){  File file=makeDirectories(String.format("%1$s/%2$s",getRootDirectory(),DIR_NAME));  analyze(sampler.getSampledGraph(),file.getAbsolutePath());}  }
class C{  public void processPackets(Player player,List<DataPacket> packets){  if (packets.isEmpty())   return;  List<Byte> filter=new ArrayList<>();  for (  DataPacket packet : packets) {switch (packet.pid()) {case ProtocolInfo.USE_ITEM_PACKET:      if (!filter.contains(ProtocolInfo.USE_ITEM_PACKET)) {        player.handleDataPacket(packet);        filter.add(ProtocolInfo.USE_ITEM_PACKET);      }    break;default :  player.handleDataPacket(packet);}}}  }
class C{  public SyncOfferMessage(SyncOfferMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  if (other.isSetStore()) {    this.store=new Store(other.store);  }  if (other.isSetVersions()) {    List<KeyedVersions> __this__versions=new ArrayList<KeyedVersions>();    for (    KeyedVersions other_element : other.versions) {      __this__versions.add(new KeyedVersions(other_element));    }    this.versions=__this__versions;  }}  }
class C{  public void error(Exception ex){  _log.error("BrokerModel error msg: " + ex.getMessage());}  }
class C{  public void printAndCacheEntry(TableEntry entry){  String id=entry.getId().substring(entry.getId().lastIndexOf('/') + 1);  entriesCached.put(id,entry);  out.println("-- id: " + id + "  title: "+ entry.getTitle().getPlainText());  out.println("<title>" + entry.getTitle().getPlainText() + "</title>");  out.println("<summary>" + entry.getSummary().getPlainText() + "</summary>");  out.println("<worksheet>" + entry.getWorksheet().getName() + "</worksheet>");  out.println("<header>" + entry.getHeader().getRow() + "</header>");  Data data=entry.getData();  out.println("<data> insertionMode=" + data.getInsertionMode().name() + " startRow="+ data.getStartIndex()+ " numRows="+ data.getNumberOfRows());  for (  Column col : data.getColumns()) {    out.println("     <column>" + col.getIndex() + " "+ col.getName()+ "</column>");  }  out.println("</data>");}  }
class C{  public static String crc(String tempStr) throws IOException {  java.util.zip.Adler32 inChecker=new java.util.zip.Adler32();  java.util.zip.CheckedInputStream in=null;  in=new java.util.zip.CheckedInputStream(new java.io.ByteArrayInputStream(tempStr.getBytes()),inChecker);  @SuppressWarnings("unused") int c;  while ((c=in.read()) != -1)   c=0;  String myCheckSum="" + inChecker.getValue();  return myCheckSum;}  }
class C{  public T caseStateVector(StateVector object){  return null;}  }
class C{  static void testBytes(int numBytes,long expectedCount) throws UnsupportedEncodingException {  testBytes(numBytes,expectedCount,0,-1);}  }
class C{  private void processErrorFilterStatus(){  errorBtnClicked=!errorBtnClicked;  processCommonFilterStatus(TargetUpdateStatus.ERROR,errorBtnClicked);}  }
class C{  public void replace(ByteString namespace,ByteString key,ByteString value){  if (namespace != null && key != null) {    if (value == null) {      remove(namespace,key);    } else {      modifyKey(namespace,key).put(key,value);    }  }}  }
class C{  protected void parseEllipse(boolean circle){  kind=ELLIPSE;  family=PRIMITIVE;  params=new float[4];  params[0]=getFloatWithUnit(element,"cx");  params[1]=getFloatWithUnit(element,"cy");  float rx, ry;  if (circle) {    rx=ry=getFloatWithUnit(element,"r");  } else {    rx=getFloatWithUnit(element,"rx");    ry=getFloatWithUnit(element,"ry");  }  params[0]-=rx;  params[1]-=ry;  params[2]=rx * 2;  params[3]=ry * 2;}  }
class C{  public static String fingerprint(X509Certificate cert) throws CertificateException {  try {    MessageDigest md=MessageDigest.getInstance("SHA-512");    md.update(cert.getEncoded());    return BytePrinter.compactHex(md.digest());  } catch (  NoSuchAlgorithmException e) {    throw new CertificateException("Cannot use TLS on this platform, because SHA-512 message digest algorithm is not available: " + e.getMessage(),e);  }}  }
class C{  public CompassFormat(){  this("N","E","S","W");}  }
class C{  public void testReadAllBytes() throws IOException {  int size=0;  while (size <= 16 * 1024) {    testReadAllBytes(size);    size+=512;  }}  }
class C{  public static String escapeDoubleQuotedAttValue(String value){  value=_escapeAttValue(value);  value=StringUtil.gsub("\"","&quot;",value);  return value;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void handleHtmlNothing(RequestAndResponse requestAndResponse) throws IOException, ServletException {  requestAndResponse.print(servletText.sentenceNothingHere());}  }
class C{  public static Module updateModule(Module module){  module.setModuleAction(getModuleAction(module.getImage().getName(),module));  return module;}  }
class C{  public void dispose(){  m_synchronizer.dispose();}  }
class C{  public int read(SFTPv3FileHandle handle,long fileOffset,byte[] dst,int dstoff,int len) throws IOException {  checkHandleValidAndOpen(handle);  if ((len > 32768) || (len <= 0))   throw new IllegalArgumentException("invalid len argument");  int req_id=generateNextRequestID();  TypesWriter tw=new TypesWriter();  tw.writeString(handle.fileHandle,0,handle.fileHandle.length);  tw.writeUINT64(fileOffset);  tw.writeUINT32(len);  if (debug != null) {    debug.println("Sending SSH_FXP_READ...");    debug.flush();  }  sendMessage(Packet.SSH_FXP_READ,req_id,tw.getBytes());  byte[] resp=receiveMessage(34000);  TypesReader tr=new TypesReader(resp);  int t=tr.readByte();  int rep_id=tr.readUINT32();  if (rep_id != req_id)   throw new IOException("The server sent an invalid id field.");  if (t == Packet.SSH_FXP_DATA) {    if (debug != null) {      debug.println("Got SSH_FXP_DATA...");      debug.flush();    }    int readLen=tr.readUINT32();    if ((readLen < 0) || (readLen > len))     throw new IOException("The server sent an invalid length field.");    tr.readBytes(dst,dstoff,readLen);    return readLen;  }  if (t != Packet.SSH_FXP_STATUS)   throw new IOException("The SFTP server sent an unexpected packet type (" + t + ")");  int errorCode=tr.readUINT32();  if (errorCode == ErrorCodes.SSH_FX_EOF) {    if (debug != null) {      debug.println("Got SSH_FX_EOF.");      debug.flush();    }    return -1;  }  String errorMessage=tr.readString();  throw new SFTPException(errorMessage,errorCode);}  }
class C{  public void filledRectangle(double x,double y,double halfWidth,double halfHeight){  if (halfWidth < 0)   throw new IllegalArgumentException("half width can't be negative");  if (halfHeight < 0)   throw new IllegalArgumentException("half height can't be negative");  double xs=scaleX(x);  double ys=scaleY(y);  double ws=factorX(2 * halfWidth);  double hs=factorY(2 * halfHeight);  if (ws <= 1 && hs <= 1)   pixel(x,y); else   offscreen.fill(new Rectangle2D.Double(xs - ws / 2,ys - hs / 2,ws,hs));  draw();}  }
class C{  public static void loadCallAvatar(Context context,MXSession session,ImageView imageView,Room room){  if ((null != room) && (null != session) && (null != imageView)&& session.isAlive()) {    imageView.setTag(null);    String callAvatarUrl=room.getCallAvatarUrl();    String roomId=room.getRoomId();    String displayName=VectorUtils.getRoomDisplayName(context,session,room);    int pixelsSide=imageView.getLayoutParams().width;    if (pixelsSide < 0) {      ViewParent parent=imageView.getParent();      while ((pixelsSide < 0) && (null != parent)) {        if (parent instanceof View) {          View parentAsView=(View)parent;          pixelsSide=parentAsView.getLayoutParams().width;        }        parent=parent.getParent();      }    }    if (session.getMediasCache().isAvatarThumbnailCached(callAvatarUrl,context.getResources().getDimensionPixelSize(R.dimen.profile_avatar_size))) {      session.getMediasCache().loadAvatarThumbnail(session.getHomeserverConfig(),imageView,callAvatarUrl,context.getResources().getDimensionPixelSize(R.dimen.profile_avatar_size));    } else {      Bitmap bitmap=null;      if (pixelsSide > 0) {        bitmap=VectorUtils.createAvatar(VectorUtils.getAvatarColor(roomId),getInitialLetter(displayName),pixelsSide);      }      session.getMediasCache().loadAvatarThumbnail(session.getHomeserverConfig(),imageView,callAvatarUrl,context.getResources().getDimensionPixelSize(R.dimen.profile_avatar_size),bitmap);    }  }}  }
class C{  public Object parseObject(String source,ParsePosition pos){  return null;}  }
class C{  public static String toASCII(String input,int flags){  return NativeIDN.toASCII(input,flags);}  }
class C{  public static Annotation[][] parseParameterAnnotations(byte[] rawAnnotations,ConstantPool constPool,Class<?> container){  try {    return parseParameterAnnotations2(rawAnnotations,constPool,container);  } catch (  BufferUnderflowException e) {    throw new AnnotationFormatError("Unexpected end of parameter annotations.");  }catch (  IllegalArgumentException e) {    throw new AnnotationFormatError(e);  }}  }
class C{  public static void checkState(boolean expression,@Nullable Object errorMessage){  if (!expression) {    throw new IllegalStateException(String.valueOf(errorMessage));  }}  }
class C{  @HLEFunction(nid=0xB9685118,version=150) public int sceNetAdhocGetPtpStat(TPointer32 sizeAddr,@CanBeNull TPointer buf){  checkInitialized();  final int objectInfoSize=36;  int size=sizeAddr.getValue();  sizeAddr.setValue(objectInfoSize * ptpObjects.size());  if (log.isDebugEnabled()) {    log.debug(String.format("sceNetAdhocGetPtpStat returning size=%d",sizeAddr.getValue()));  }  if (buf.isNotNull()) {    int offset=0;    pspNetMacAddress nonExistingDestMacAddress=new pspNetMacAddress();    for (    int pdpId : ptpObjects.keySet()) {      PtpObject ptpObject=ptpObjects.get(pdpId);      if (offset + objectInfoSize > size || ptpObject == null) {        break;      }      try {        ptpObject.update();      } catch (      IOException e) {      }      if (log.isDebugEnabled()) {        log.debug(String.format("sceNetAdhocGetPtpStat returning %s at 0x%08X",ptpObject,buf.getAddress() + offset));      }      offset+=4;      buf.setValue32(offset,ptpObject.getId());      offset+=4;      ptpObject.getMacAddress().write(buf.getMemory(),buf.getAddress() + offset);      offset+=ptpObject.getMacAddress().sizeof();      if (ptpObject.getDestMacAddress() != null) {        ptpObject.getDestMacAddress().write(buf.getMemory(),buf.getAddress() + offset);        offset+=ptpObject.getDestMacAddress().sizeof();      } else {        nonExistingDestMacAddress.write(buf.getMemory(),buf.getAddress() + offset);        offset+=nonExistingDestMacAddress.sizeof();      }      buf.setValue16(offset,(short)ptpObject.getPort());      offset+=2;      buf.setValue16(offset,(short)ptpObject.getDestPort());      offset+=2;      buf.setValue32(offset,ptpObject.getSentData());      offset+=4;      buf.setValue32(offset,ptpObject.getRcvdData());      offset+=4;      buf.setValue32(offset,4);      offset+=4;    }    fillNextPointersInLinkedList(buf,offset,objectInfoSize);  }  return 0;}  }
class C{  protected boolean expectsThrowable(){  return this.expectsThrowable;}  }
class C{  public int processBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  return (encrypting) ? encryptBlock(in,inOff,out,outOff) : decryptBlock(in,inOff,out,outOff);}  }
class C{  public static void copy(final File source,final OutputStream dest) throws IOException {  InputStream fis=null;  try {    fis=new FileInputStream(source);    copy(fis,dest,-1);  }  finally {    if (fis != null) {      try {        fis.close();      } catch (      final Exception e) {      }    }  }}  }
class C{  public RemoteCustomerServiceImpl(final GenericDTOService<CustomerDTO> customerDTOGenericService,final FederationFacade federationFacade){  super(customerDTOGenericService);  this.federationFacade=federationFacade;  dtoCustomerService=(DtoCustomerService)customerDTOGenericService;}  }
class C{  public JSONObject(String baseName,Locale locale) throws JSONException {  this();  ResourceBundle bundle=ResourceBundle.getBundle(baseName,locale,Thread.currentThread().getContextClassLoader());  Enumeration keys=bundle.getKeys();  while (keys.hasMoreElements()) {    Object key=keys.nextElement();    if (key instanceof String) {      String[] path=((String)key).split("\\.");      int last=path.length - 1;      JSONObject target=this;      for (int i=0; i < last; i+=1) {        String segment=path[i];        JSONObject nextTarget=target.optJSONObject(segment);        if (nextTarget == null) {          nextTarget=new JSONObject();          target.put(segment,nextTarget);        }        target=nextTarget;      }      target.put(path[last],bundle.getString((String)key));    }  }}  }
class C{  public static void discharge(int slotID,IStrictEnergyStorage storer){  IInventory inv=(TileEntityContainerBlock)storer;  if (inv.getStackInSlot(slotID) != null && storer.getEnergy() < storer.getMaxEnergy()) {    if (inv.getStackInSlot(slotID).getItem() instanceof IEnergizedItem) {      storer.setEnergy(storer.getEnergy() + EnergizedItemManager.discharge(inv.getStackInSlot(slotID),storer.getMaxEnergy() - storer.getEnergy()));    } else     if (MekanismUtils.useIC2() && inv.getStackInSlot(slotID).getItem() instanceof IElectricItem) {      IElectricItem item=(IElectricItem)inv.getStackInSlot(slotID).getItem();      if (item.canProvideEnergy(inv.getStackInSlot(slotID))) {        double gain=ElectricItem.manager.discharge(inv.getStackInSlot(slotID),(int)((storer.getMaxEnergy() - storer.getEnergy()) * general.TO_IC2),4,true,true,false) * general.FROM_IC2;        storer.setEnergy(storer.getEnergy() + gain);      }    } else     if (MekanismUtils.useRF() && inv.getStackInSlot(slotID).getItem() instanceof IEnergyContainerItem) {      ItemStack itemStack=inv.getStackInSlot(slotID);      IEnergyContainerItem item=(IEnergyContainerItem)inv.getStackInSlot(slotID).getItem();      int itemEnergy=(int)Math.round(Math.min(Math.sqrt(item.getMaxEnergyStored(itemStack)),item.getEnergyStored(itemStack)));      int toTransfer=(int)Math.round(Math.min(itemEnergy,((storer.getMaxEnergy() - storer.getEnergy()) * general.TO_TE)));      storer.setEnergy(storer.getEnergy() + (item.extractEnergy(itemStack,toTransfer,false) * general.FROM_TE));    } else     if (inv.getStackInSlot(slotID).getItem() == Items.redstone && storer.getEnergy() + general.ENERGY_PER_REDSTONE <= storer.getMaxEnergy()) {      storer.setEnergy(storer.getEnergy() + general.ENERGY_PER_REDSTONE);      inv.getStackInSlot(slotID).stackSize--;      if (inv.getStackInSlot(slotID).stackSize <= 0) {        inv.setInventorySlotContents(slotID,null);      }    }  }}  }
class C{  public static void main(String... args) throws SQLException {  new DeleteDbFiles().runTool(args);}  }
class C{  public ZDT6(int numberOfVariables){  super(numberOfVariables);}  }
class C{  public double[] applyRelative(double[] v){  return unhomogeneRelativeVector(times(trans,homogeneRelativeVector(v)));}  }
class C{  private void initializeLiveAttributes(){  x=createLiveAnimatedLength(null,SVG_X_ATTRIBUTE,SVG_IMAGE_X_DEFAULT_VALUE,SVGOMAnimatedLength.HORIZONTAL_LENGTH,false);  y=createLiveAnimatedLength(null,SVG_Y_ATTRIBUTE,SVG_IMAGE_Y_DEFAULT_VALUE,SVGOMAnimatedLength.VERTICAL_LENGTH,false);  width=createLiveAnimatedLength(null,SVG_WIDTH_ATTRIBUTE,null,SVGOMAnimatedLength.HORIZONTAL_LENGTH,true);  height=createLiveAnimatedLength(null,SVG_HEIGHT_ATTRIBUTE,null,SVGOMAnimatedLength.VERTICAL_LENGTH,true);  preserveAspectRatio=createLiveAnimatedPreserveAspectRatio();}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:53.132 -0500",hash_original_method="A6C38593A48889676EEA5C494089AF0E",hash_generated_method="05986182BF4F023C954724A6B41808B4") public EncoderException(String pMessage){  super(pMessage);}  }
class C{  protected boolean isCompositeAggregator(String aggregatorName){  aggregatorName=aggregatorName.split("-")[0];  for (int index=0; index < COMPOSITE_AGGREGATORS.length; ++index) {    if (COMPOSITE_AGGREGATORS[index].equals(aggregatorName)) {      return true;    }  }  return false;}  }
class C{  public final double rootMeanPriorSquaredError(){  return m_delegate.rootMeanPriorSquaredError();}  }
class C{  protected void closeAll(){  while (m_TabbedPane.getTabCount() > 0) {    m_TabbedPane.setSelectedIndex(0);    try {      getCurrentTable().finalize();    } catch (    Throwable t) {      System.out.println(t);    }    m_TabbedPane.removeTabAt(0);  }  setButtons();}  }
class C{  protected Element parentElement(){  return elementStack.get(elementStack.size() - 1 - 1);}  }
class C{  public void displayState(){  log.debug("displayState");  if (namedMemory == null) {    return;  }  Object show=getMemory().getValue();  if (show != null) {    _textBox.setText(show.toString());  } else {    _textBox.setText("");  }}  }
class C{  public static void lockOrientation(Activity activity){  final int orientation=activity.getResources().getConfiguration().orientation;  final int rotation=((WindowManager)activity.getSystemService(Context.WINDOW_SERVICE)).getDefaultDisplay().getRotation();  int SCREEN_ORIENTATION_REVERSE_LANDSCAPE=8;  int SCREEN_ORIENTATION_REVERSE_PORTRAIT=9;  if (!(Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD)) {    SCREEN_ORIENTATION_REVERSE_LANDSCAPE=ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE;    SCREEN_ORIENTATION_REVERSE_PORTRAIT=ActivityInfo.SCREEN_ORIENTATION_PORTRAIT;  }  if (rotation == Surface.ROTATION_0 || rotation == Surface.ROTATION_90) {    if (orientation == Configuration.ORIENTATION_PORTRAIT) {      activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);    } else     if (orientation == Configuration.ORIENTATION_LANDSCAPE) {      activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);    }  } else   if (rotation == Surface.ROTATION_180 || rotation == Surface.ROTATION_270) {    if (orientation == Configuration.ORIENTATION_PORTRAIT) {      activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_REVERSE_PORTRAIT);    } else     if (orientation == Configuration.ORIENTATION_LANDSCAPE) {      activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE);    }  }}  }
class C{  public static Token newToken(int ofKind,String image){switch (ofKind) {default :    return new Token(ofKind,image);}}  }
class C{  @SuppressWarnings("unchecked") private BufferOutput writeById(int id,Object object,BufferOutput output,TypeSerializer serializer){  for (  Identifier identifier : Identifier.values()) {    if (identifier.accept(id)) {      identifier.write(id,output.writeByte(identifier.code()));      serializer.write(object,output,this);      return output;    }  }  throw new SerializationException("invalid type ID: " + id);}  }
class C{  public ImmutableClassToInstanceMap<B> build(){  ImmutableMap<Class<? extends B>,B> map=mapBuilder.build();  if (map.isEmpty()) {    return of();  } else {    return new ImmutableClassToInstanceMap<B>(map);  }}  }
class C{  public static int[] sort(int[] array){  int[] index=initialIndex(array.length);  int[] newIndex=new int[array.length];  int[] helpIndex;  int numEqual;  quickSort(array,index,0,array.length - 1);  int i=0;  while (i < index.length) {    numEqual=1;    for (int j=i + 1; ((j < index.length) && (array[index[i]] == array[index[j]])); j++) {      numEqual++;    }    if (numEqual > 1) {      helpIndex=new int[numEqual];      for (int j=0; j < numEqual; j++) {        helpIndex[j]=i + j;      }      quickSort(index,helpIndex,0,numEqual - 1);      for (int j=0; j < numEqual; j++) {        newIndex[i + j]=index[helpIndex[j]];      }      i+=numEqual;    } else {      newIndex[i]=index[i];      i++;    }  }  return newIndex;}  }
class C{  public LinkedHashSet(Collection c){  super(Math.max(2 * c.size(),11),.75f,true);  addAll(c);}  }
class C{  public void testUrlWithWrongParameter(){  setParameterToInitMockMethod("http://myurl.com/&myPage",TestSolution.PASSED);  SeoRule01071 test=new SeoRule01071();  test.setProcessResultDataService(mockProcessResultDataService);  test.setTest(mockTest);  ProcessResult processResult=test.processImpl(mockSspHandler);  assertEquals(mockDefiniteResult,processResult);}  }
class C{  public FourLongs(long a,long b,long c,long d){  this.a=a;  this.b=b;  this.c=c;  this.d=d;}  }
class C{  public JSONWriter value(Object object) throws JSONException {  return this.append(JSONObject.valueToString(object));}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private boolean replaceMethodParameter(TestChromosome test,MethodStatement statement){  List<VariableReference> parameters=statement.getParameterReferences();  if (parameters.isEmpty())   return false;  int max=parameters.size();  if (!statement.isStatic()) {    max++;  }  int numParameter=Randomness.nextInt(max);  if (numParameter == parameters.size()) {    VariableReference callee=statement.getCallee();    List<VariableReference> objects=test.getTestCase().getObjects(callee.getType(),statement.getPosition());    objects.remove(callee);    if (objects.isEmpty())     return false;    VariableReference replacement=Randomness.choice(objects);    statement.setCallee(replacement);    test.setChanged(true);  } else {    VariableReference parameter=parameters.get(numParameter);    List<VariableReference> objects=test.getTestCase().getObjects(parameter.getType(),statement.getPosition());    objects.remove(parameter);    objects.remove(statement.getReturnValue());    NullStatement nullStatement=new NullStatement(test.getTestCase(),parameter.getType());    if (!parameter.isPrimitive())     objects.add(nullStatement.getReturnValue());    if (objects.isEmpty())     return false;    VariableReference replacement=Randomness.choice(objects);    if (replacement == nullStatement.getReturnValue()) {      test.getTestCase().addStatement(nullStatement,statement.getPosition());    }    statement.replaceParameterReference(replacement,numParameter);    test.setChanged(true);  }  return false;}  }
class C{  private void updateResistance(){  setResistance((getRipeness() + 1) * MAX_RESISTANCE / (RIPE + 1));}  }
class C{  public List list(BindedCompiledSQL bsql,int startPos,int maxSize){  ReadonlyTranSession session=transactionManager.openDelayReadTran();  try {    return session.list(bsql,startPos,maxSize);  }  finally {    session.close();  }}  }
class C{  public static void p(String text){  System.out.print(text);}  }
class C{  public boolean supportsFlexibleRetrieval() throws XMPPException {  DiscoverInfo info=ServiceDiscoveryManager.getInstanceFor(connection).discoverInfo(connection.getServiceName());  return info.containsFeature(namespace);}  }
class C{  public boolean isLogEnabled(){  return enabled;}  }
class C{  public boolean isVideoSharingSupported(){  return mVideoSharing;}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return true;}  }
class C{  public static void main(String[] argv){  String propertiesFile=null;  String prefix=null;  String outputFile=null;  Debug.init();  if (argv.length < 6)   printUsage();  for (int i=0; i < argv.length; i++) {    if (argv[i].equalsIgnoreCase("-props")) {      propertiesFile=argv[++i];    } else     if (argv[i].equalsIgnoreCase("-prefix")) {      prefix=argv[++i];    } else     if (argv[i].equalsIgnoreCase("-file")) {      outputFile=argv[++i];    }  }  if (propertiesFile == null || prefix == null || outputFile == null) {    printUsage();  }  try {    Properties properties=new Properties();    URL propertiesURL=new URL(propertiesFile);    InputStream is=propertiesURL.openStream();    properties.load(is);    ShapeLayer sl=new ShapeLayer();    sl.setProperties(prefix,properties);    AreaHandler ah=new AreaHandler(sl.getSpatialIndex(),sl.getDrawingAttributes());    ah.setProperties(prefix,properties);    ah.getGraphics().writeGraphics(outputFile);  } catch (  java.net.MalformedURLException murle) {    Debug.error("Bad URL for properties file : " + propertiesFile);    printUsage();  }catch (  java.io.IOException ioe) {    Debug.error("IOException creating cached graphics file: " + outputFile);    printUsage();  }}  }
class C{  public ThreadGroup(String name){  this(Thread.currentThread().getThreadGroup(),name);}  }
class C{  private boolean checkAndCreateZone(WBEMClient client,CIMInstance zoneServiceIns,String fabricId,String fabricWwn,CIMObjectPath zonesetPath,Zone zone,boolean activateZones) throws WBEMException {  boolean added=false;  _log.info("Starting create zone with name " + zone.getName());  Zone zoneInFabric=_smisHelper.getZone(client,zone.getName(),fabricWwn,true,true,true);  if (zoneInFabric != null) {    _log.info("Found an active zone with the name " + zone.getName());    if (!sameMembers(zoneInFabric,zone)) {      throw NetworkDeviceControllerException.exceptions.activeZoneWithSameNameExists(zone.getName());    }  } else {    zoneInFabric=_smisHelper.getZone(client,zone.getName(),fabricWwn,false,true,true);    if (zoneInFabric != null) {      _log.info("Found an inactive zone with the name " + zone.getName());      if (activateZones) {        removeZone(client,fabricId,fabricWwn,zoneInFabric);        createZone(client,zoneServiceIns,fabricId,fabricWwn,zonesetPath,zone);        added=true;      } else {        throw NetworkDeviceControllerException.exceptions.inactiveZoneWithSameNameExists(zone.getName());      }    } else {      added=createZone(client,zoneServiceIns,fabricId,fabricWwn,zonesetPath,zone);    }  }  return added;}  }
class C{  protected void nextToken() throws ParseException {  try {switch (current) {case -1:      type=EOF;    return;case ':':  nextChar();type=COLON;return;case '[':nextChar();type=LEFT_SQUARE_BRACKET;return;case ']':nextChar();type=RIGHT_SQUARE_BRACKET;return;case '(':nextChar();type=LEFT_PARENTHESIS;return;case ')':nextChar();type=RIGHT_PARENTHESIS;return;case '*':nextChar();type=ASTERISK;return;case ' ':case '\t':case '\r':case '\n':case '\f':do {nextChar();} while (XMLUtilities.isXMLSpace((char)current));nextToken();return;case '\'':type=string1();return;case '"':type=string2();return;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':type=number();return;default :if (XMLUtilities.isXMLNameFirstCharacter((char)current)) {do {nextChar();} while (current != -1 && current != ':' && XMLUtilities.isXMLNameCharacter((char)current));type=NAME;return;}nextChar();throw new ParseException("identifier.character",reader.getLine(),reader.getColumn());}} catch (IOException e) {throw new ParseException(e);}}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-17 12:44:27.163 -0400",hash_original_method="07B1A6CC471050623DC993725853B976",hash_generated_method="530F671A3A990FD3917307868BC0297B") @Override public boolean onMenuItemSelected(int featureId,MenuItem item){  if (super.onMenuItemSelected(featureId,item)) {    return true;  }switch (featureId) {case Window.FEATURE_OPTIONS_PANEL:    return mFragments.dispatchOptionsItemSelected(item);case Window.FEATURE_CONTEXT_MENU:  return mFragments.dispatchContextItemSelected(item);default :return false;}}  }
class C{  public Object readObject() throws IOException {  int tag=parseTag();switch (tag) {case TAG_NULL:    expectTag(TAG_NULL_END);  return null;case TAG_BOOLEAN:{  int value=parseInt();  expectTag(TAG_BOOLEAN_END);  return new Boolean(value != 0);}case TAG_INT:{int value=parseInt();expectTag(TAG_INT_END);return new Integer(value);}case TAG_LONG:{long value=parseLong();expectTag(TAG_LONG_END);return new Long(value);}case TAG_DOUBLE:{double value=parseDouble();expectTag(TAG_DOUBLE_END);return new Double(value);}case TAG_DATE:{long value=parseDate();expectTag(TAG_DATE_END);return new Date(value);}case TAG_XML:{return parseXML();}case TAG_STRING:{_sbuf.setLength(0);String value=parseString(_sbuf).toString();expectTag(TAG_STRING_END);return value;}case TAG_BASE64:{byte[] data=parseBytes();expectTag(TAG_BASE64_END);return data;}case TAG_LIST:{String type=readType();int length=readLength();return _serializerFactory.readList(this,length,type);}case TAG_MAP:{String type=readType();Deserializer deserializer;deserializer=_serializerFactory.getObjectDeserializer(type);return deserializer.readMap(this);}case TAG_REF:{int ref=parseInt();expectTag(TAG_REF_END);return _refs.get(ref);}case TAG_REMOTE:{String type=readType();String url=readString();expectTag(TAG_REMOTE_END);return resolveRemote(type,url);}default :throw error("unknown code:" + tagName(tag));}}  }
class C{  public void testGetF7(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF7();  assertEquals(expResult,result);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public ByteVector putInt(final int i){  int length=this.length;  if (length + 4 > data.length) {    enlarge(4);  }  byte[] data=this.data;  data[length++]=(byte)(i >>> 24);  data[length++]=(byte)(i >>> 16);  data[length++]=(byte)(i >>> 8);  data[length++]=(byte)i;  this.length=length;  return this;}  }
class C{  Method copy(){  if (this.root != null)   throw new IllegalArgumentException("Can not copy a non-root Method");  Method res=new Method(clazz,name,parameterTypes,returnType,exceptionTypes,modifiers,slot,signature,annotations,parameterAnnotations,annotationDefault);  res.root=this;  res.methodAccessor=methodAccessor;  return res;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:18.366 -0500",hash_original_method="5F7DFDAF299194D301FC447E78E3FD87",hash_generated_method="C4CEAE19CEAE99E4E4C2197B865D333A") private void handleNewSelectionChange(View selectedView,int direction,int newSelectedPosition,boolean newFocusAssigned){  if (newSelectedPosition == INVALID_POSITION) {    throw new IllegalArgumentException("newSelectedPosition needs to be valid");  }  View topView;  View bottomView;  int topViewIndex, bottomViewIndex;  boolean topSelected=false;  final int selectedIndex=mSelectedPosition - mFirstPosition;  final int nextSelectedIndex=newSelectedPosition - mFirstPosition;  if (direction == View.FOCUS_UP) {    topViewIndex=nextSelectedIndex;    bottomViewIndex=selectedIndex;    topView=getChildAt(topViewIndex);    bottomView=selectedView;    topSelected=true;  } else {    topViewIndex=selectedIndex;    bottomViewIndex=nextSelectedIndex;    topView=selectedView;    bottomView=getChildAt(bottomViewIndex);  }  final int numChildren=getChildCount();  if (topView != null) {    topView.setSelected(!newFocusAssigned && topSelected);    measureAndAdjustDown(topView,topViewIndex,numChildren);  }  if (bottomView != null) {    bottomView.setSelected(!newFocusAssigned && !topSelected);    measureAndAdjustDown(bottomView,bottomViewIndex,numChildren);  }}  }
class C{  @Override public void endProcessSubTokens(){  if (!smap.isEmpty()) {    stokentuple.add(smap);  }  smap=null;  vals=null;}  }
class C{  String siteUrl(){  return mSiteUrl;}  }
class C{  @Override protected void propertyChange(PropertyChangeEvent evt){  super.propertyChange(evt);  String name=evt.getPropertyName();  if (name.equals("foreground")) {    updateForeground((Color)evt.getNewValue());  } else   if (name.equals("font")) {    updateFont((Font)evt.getNewValue());  } else   if (name.equals("document")) {    JComponent comp=getComponent();    updateForeground(comp.getForeground());    updateFont(comp.getFont());  }}  }
class C{  public boolean isValid(){  return valid;}  }
class C{  public void done() throws IOException {  int glyphBits=OutStream.determineUnsignedBitSize(maxGlyphIndex);  int advanceBits=OutStream.determineSignedBitSize(maxAdvance);  out.writeUI8(glyphBits);  out.writeUI8(advanceBits);  for (Iterator enumerator=recs.iterator(); enumerator.hasNext(); ) {    Object[] rec=(Object[])enumerator.next();    if (rec.length == 4) {      boolean hasFont=rec[0] != null;      boolean hasX=rec[1] != null;      boolean hasY=rec[2] != null;      boolean hasColor=rec[3] != null;      int flags=0x80;      if (hasFont) {        flags|=TEXT_HAS_FONT;      }      if (hasX) {        flags|=TEXT_HAS_XOFFSET;      }      if (hasY) {        flags|=TEXT_HAS_YOFFSET;      }      if (hasColor) {        flags|=TEXT_HAS_COLOR;      }      out.writeUI8(flags);      if (hasFont) {        out.writeUI16(((int[])rec[0])[0]);      }      if (hasColor) {        Color color=(Color)rec[3];        if (hasAlpha) {          color.writeWithAlpha(out);        } else {          color.writeRGB(out);        }      }      if (hasX) {        int xOffset=((int[])rec[1])[0];        out.writeSI16((short)xOffset);      }      if (hasY) {        int yOffset=((int[])rec[2])[0];        out.writeSI16((short)yOffset);      }      if (hasFont) {        out.writeUI16(((int[])rec[0])[1]);      }    } else {      int[] glyphs=(int[])rec[0];      int[] advances=(int[])rec[1];      out.writeUI8(glyphs.length);      for (int i=0; i < glyphs.length; i++) {        out.writeUBits(glyphBits,glyphs[i]);        out.writeSBits(advanceBits,advances[i]);      }    }  }  out.writeUI8(0);  completeTag();}  }
class C{  private IStatus deleteGatedCheckinShelveset(final String gatedCheckinShelvesetName){  final String fallbackUser=repository.getVersionControlClient().getConnection().getAuthorizedAccountName();  final WorkspaceSpec spec=WorkspaceSpec.parse(gatedCheckinShelvesetName,fallbackUser);  final QueryShelvesetsCommand queryCommand=new QueryShelvesetsCommand(repository.getVersionControlClient(),spec.getName(),spec.getOwner());  final ICommandExecutor executor=UICommandExecutorFactory.newUICommandExecutor(getShell());  IStatus status=executor.execute(queryCommand);  if (status.isOK()) {    final Shelveset[] shelvesets=queryCommand.getShelvesets();    if (shelvesets.length > 0) {      final DeleteShelvesetsCommand deleteCommand=new DeleteShelvesetsCommand(repository,shelvesets[0]);      status=executor.execute(deleteCommand);    }  }  return status;}  }
class C{  public X400Address(DerValue derValue) throws IOException {  nameValue=derValue.toByteArray();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  long realStart=getLong(stack);  long airEnd=getLong(stack);  Airing air=getAir(stack);  if (air != null && Permissions.hasPermission(Permissions.PERMISSION_RECORDINGSCHEDULE,stack.getUIMgr())) {    MediaFile mf=Wizard.getInstance().getFileForAiring(air);    BigBrother.setWatched(air,(mf != null) ? mf.getRecordTime() : air.getStartTime(),airEnd,realStart,Sage.time(),false);  }  return null;}  }
class C{  @Override public Object draw(Graphics2D g2,Rectangle2D area,Object params){  area=drawFill(g2,area);  EntityBlockParams ebp=null;  StandardEntityCollection sec=null;  if (params instanceof EntityBlockParams) {    ebp=(EntityBlockParams)params;    if (ebp.getGenerateEntities()) {      sec=new StandardEntityCollection();    }  }  Rectangle2D contentArea=(Rectangle2D)area.clone();  contentArea=trimMargin(contentArea);  drawBorder(g2,contentArea);  contentArea=trimBorder(contentArea);  contentArea=trimPadding(contentArea);  Iterator iterator=getBlocks().iterator();  while (iterator.hasNext()) {    Block block=(Block)iterator.next();    Rectangle2D bounds=block.getBounds();    double y=area.getY() + (area.getHeight() - bounds.getHeight()) / 2.0;    Rectangle2D drawArea=new Rectangle2D.Double(bounds.getX() + area.getX(),y,bounds.getWidth(),bounds.getHeight());    Object r=block.draw(g2,drawArea,params);    if (sec != null) {      if (r instanceof EntityBlockResult) {        EntityBlockResult ebr=(EntityBlockResult)r;        EntityCollection ec=ebr.getEntityCollection();        sec.addAll(ec);      }    }  }  BlockResult result=null;  if (sec != null) {    result=new BlockResult();    result.setEntityCollection(sec);  }  return result;}  }
class C{  public boolean isEmpty(){  return (this.received == null || this.received.isEmpty());}  }
class C{  public void begin(String namespace,String name,Attributes attributes) throws Exception {  ApplicationBean ab=null;  try {    ab=(ApplicationBean)digester.peek();  } catch (  Exception e) {    throw new IllegalStateException("No parent ApplicationBean on object stack");  }  LocaleConfigBean lcb=ab.getLocaleConfig();  if (lcb == null) {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[LocaleConfigRule]{" + digester.getMatch() + "} New "+ CLASS_NAME);    }    Class clazz=digester.getClassLoader().loadClass(CLASS_NAME);    lcb=(LocaleConfigBean)clazz.newInstance();    ab.setLocaleConfig(lcb);  } else {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[LocaleConfigRule]{" + digester.getMatch() + "} Old "+ CLASS_NAME);    }  }  digester.push(lcb);}  }
class C{  private void putStaticHelper(Instruction s,BasicBlock b){  LocationOperand locOp=PutStatic.getLocation(s);  FieldReference field=locOp.getFieldRef();  registerUse(s,field);  registerDef(s,b,field);}  }
class C{  public static void isUserGroupName(String member,String value,boolean flag) throws ValidationException {  maxLength(member,value,ADMValidator.LENGTH_USER_GROUP_NAME,flag);}  }
class C{  public CipherOutputStream(OutputStream os,AEADBlockCipher cipher){  super(os);  this.aeadBlockCipher=cipher;}  }
class C{  public ValidationException(String message){  super(message);}  }
class C{  @DSComment("Binding data, need modeling to be safe") @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:12.974 -0500",hash_original_method="2106A171487E5CA0624DE157360DB991",hash_generated_method="16BB2292608F1A3AE6064F75050FAF53") public void addAll(Collection<? extends T> collection){synchronized (mLock) {    if (mOriginalValues != null) {      mOriginalValues.addAll(collection);    } else {      mObjects.addAll(collection);    }  }  if (mNotifyOnChange)   notifyDataSetChanged();}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public LineBorder(Color color,int thickness){  this(color,thickness,false);}  }
class C{  protected boolean isDeleteAfter(){  return deleteAfter;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:20.711 -0500",hash_original_method="8FD2C0B10363E6DF4E4A890BB3EDCD79",hash_generated_method="FD9119837CB1AEA2F8EE59FC469298E9") private CaseMapper(){}  }
class C{  @Override public int indexOf(Object arg0){  int i=0;  for (  T t : this) {    if (t == arg0) {      return i;    }    i++;  }  return -1;}  }
class C{  public boolean equals(Object other){  if (other instanceof shift_action)   return equals((shift_action)other); else   return false;}  }
class C{  public void run(Task t){  dispatch.accept(t);}  }
class C{  public synchronized void registerClientUrl(String clientUrl){  registeredClients.add(clientUrl);}  }
class C{  public boolean tryLock(){  if (!VM.runningVM)   return true;  VM.disableYieldpoints();  Offset latestContenderOffset=Entrypoints.latestContenderField.getOffset();  if (Magic.prepareAddress(this,latestContenderOffset).isZero()) {    Address cp=Magic.objectAsAddress(RVMThread.getCurrentThread());    if (Magic.attemptAddress(this,latestContenderOffset,Address.zero(),cp)) {      Magic.isync();      return true;    }  }  VM.enableYieldpoints();  return false;}  }
class C{  public static Marshaller createMarshaller(Class<?> clazz) throws Exception {  return getJAXBContext(clazz).createMarshaller();}  }
class C{  protected void reportError(String key,Object[] params){  reportError(createCSSParseException(key,params));}  }
class C{  public void resetMatrix(){  checkMatrix(2);  matrix.reset();}  }
class C{  public VideoStream(String pStreamStr){  String[] lArgs=pStreamStr.split("&");  Map<String,String> lArgMap=new HashMap<String,String>();  for (int i=0; i < lArgs.length; i++) {    String[] lArgValStrArr=lArgs[i].split("=");    if (lArgValStrArr != null) {      if (lArgValStrArr.length >= 2) {        lArgMap.put(lArgValStrArr[0],lArgValStrArr[1]);      }    }  }  mUrl=lArgMap.get("url") + "&signature=" + lArgMap.get("sig");}  }
class C{  public double update(double X_[][],double Y_[][]) throws Exception {  int N=X_.length;  double E=0.0;  for (int i=0; i < N; i++) {    E+=this.backPropagate(new double[][]{X_[i]},new double[][]{Y_[i]});  }  return E;}  }
class C{  public static void fill(float[] array,float value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public LocalDateTime toLocalDateTime(){  return new LocalDateTime(getMillis(),getChronology());}  }
class C{  @Override public FlowState modifyVServerAttributes(PropertyHandler paramHandler) throws Exception {  LServerClient vserverClient=getLServerClient(paramHandler);  LServerConfiguration configuration=vserverClient.getConfiguration();  if (configuration == null) {    throw new SuspendException("Error while reading server configuration");  }  boolean toBeModified=paramHandler.getCountCPU() != null && !paramHandler.getCountCPU().equals(configuration.getNumOfCPU());  if (toBeModified) {    String status=vserverClient.getStatus();    if (LServerStatus.RUNNING.equals(status)) {      logger.debug("Stopping LServer {} to update changed attributes",paramHandler.getVserverId());      paramHandler.addVserverToBeStarted(paramHandler.getVserverId());      vserverClient.stop();      return FlowState.VSERVER_STOPPING_FOR_MODIFICATION;    } else     if (LServerStatus.STOPPING.equals(status)) {      return FlowState.VSERVER_STOPPING_FOR_MODIFICATION;    }    logger.debug("Updating VServer {}: CPU_COUNT => {}, STATUS = {}",new String[]{paramHandler.getVserverId(),paramHandler.getCountCPU(),status});    vserverClient.updateConfiguration(paramHandler.getCountCPU(),null);    paramHandler.getIaasContext().clear();    return FlowState.VSERVER_UPDATING;  }  logger.debug("All attributes of LServer {} are up top date => nothing to do",paramHandler.getVserverId());  return FlowState.FINISHED;}  }
class C{  final public void disable_tracing(){}  }
class C{  public void onAnswer(long sessionId,String sdp){  send(new PeerConnectionActor.OnAnswer(sessionId,sdp));}  }
class C{  public void add(Collection<BaseBlock> blocks){  checkNotNull(blocks);  for (  BaseBlock block : blocks) {    add(block);  }}  }
class C{  public boolean isOutputShutdown(){  return shutOut;}  }
class C{  public static boolean isExtension(String filename,String[] extensions){  if (filename == null) {    return false;  }  if (extensions == null || extensions.length == 0) {    return indexOfExtension(filename) == -1;  }  String fileExt=getExtension(filename);  for (  String extension : extensions) {    if (fileExt.equals(extension)) {      return true;    }  }  return false;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().putInt(EventRouter.HIDE_WAIT_TIME,getInt(stack));  stack.getUIMgrSafe().getRouter().resetHideTimer();  return null;}  }
class C{  private static long sizeOfPrimitive(Class type){  if (type == Boolean.TYPE) {    return SIZE_BOOLEAN;  } else   if (type == Byte.TYPE) {    return SIZE_BYTE;  } else   if (type == Character.TYPE) {    return SIZE_CHAR;  } else   if (type == Short.TYPE) {    return SIZE_SHORT;  } else   if (type == Integer.TYPE) {    return SIZE_INT;  } else   if (type == Long.TYPE) {    return SIZE_LONG;  } else   if (type == Float.TYPE) {    return SIZE_FLOAT;  } else   if (type == Double.TYPE) {    return SIZE_DOUBLE;  } else   if (type == Void.TYPE) {    return SIZE_VOID;  } else {    return SIZE_REFERENCE;  }}  }
class C{  public ArrayIndexOutOfBoundsException(java.lang.String s){}  }
class C{  public Boolean isEnabled(){  return enabled;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:02:37.885 -0400",hash_original_method="610EF243350B95DA9BF2481ADC1F99AA",hash_generated_method="610EF243350B95DA9BF2481ADC1F99AA") void handleRealm(ParsedDirective pd){  m_realms.add(pd.getValue());}  }
class C{  public Container bindFabToContainer(Component cnt,int orientation,int valign){  FlowLayout flow=new FlowLayout(orientation);  flow.setValign(valign);  Form f=cnt.getComponentForm();  if (f != null && f.getContentPane() == cnt) {    Container layers=f.getLayeredPane(getClass(),true);    layers.setLayout(flow);    layers.add(this);    return null;  }  Container conUpper=new Container(flow);  conUpper.add(this);  return LayeredLayout.encloseIn(cnt,conUpper);}  }
class C{  private boolean offerReplacementConnection(Connection con,ServerLocation currentServer){  boolean retry;  do {    retry=false;    PooledConnection target=this.allConnectionsMap.findReplacementTarget(currentServer);    if (target != null) {      final Endpoint targetEP=target.getEndpoint();      boolean interrupted=false;      try {        if (target.switchConnection(con)) {          getPoolStats().incLoadConditioningDisconnect();          this.allConnectionsMap.addReplacedCnx(target,targetEP);          return true;        } else {          retry=true;        }      } catch (      InterruptedException e) {        interrupted=true;        cancelCriterion.checkCancelInProgress(e);        retry=false;      } finally {        if (interrupted) {          Thread.currentThread().interrupt();        }      }    }  } while (retry);  getPoolStats().incLoadConditioningReplaceTimeouts();  con.destroy();  return false;}  }
class C{  private boolean processAllocation(){  if (m_alloc == null)   return true;  processPayment();  if (m_alloc.processIt(DocAction.ACTION_Complete) && m_alloc.save()) {    m_alloc=null;    return true;  }  m_alloc=null;  return false;}  }
class C{  private void resequenceIds(){  int i=1;  for (  AutomationItem item : getItemsBySequenceList()) {    item.setSequenceId(i++);  }}  }
class C{  private Buffer checkErrorPacket(int command) throws SQLException {  Buffer resultPacket=null;  this.serverStatus=0;  try {    resultPacket=reuseAndReadPacket(this.reusablePacket);  } catch (  SQLException sqlEx) {    throw sqlEx;  }catch (  Exception fallThru) {    throw SQLError.createCommunicationsException(this.connection,this.lastPacketSentTimeMs,this.lastPacketReceivedTimeMs,fallThru,getExceptionInterceptor());  }  checkErrorPacket(resultPacket);  return resultPacket;}  }
class C{  public static void readLines(Path path,Consumer<String> lineProcessor) throws IOException {  Files.lines(path).forEach(lineProcessor);}  }
class C{  public static cuComplex cuCdiv(cuComplex x,cuComplex y){  cuComplex quot;  float s=((float)Math.abs(cuCreal(y))) + ((float)Math.abs(cuCimag(y)));  float oos=1.0f / s;  float ars=cuCreal(x) * oos;  float ais=cuCimag(x) * oos;  float brs=cuCreal(y) * oos;  float bis=cuCimag(y) * oos;  s=(brs * brs) + (bis * bis);  oos=1.0f / s;  quot=cuCmplx(((ars * brs) + (ais * bis)) * oos,((ais * brs) - (ars * bis)) * oos);  return quot;}  }
class C{  private void createOrUpdateApi(){  for (  RestApi currentApi : getApiGatewayClient().getRestApis(new GetRestApisRequest().withLimit(API_LIMIT)).getItems()) {    if (currentApi.getName().equals(getApiName())) {      amazonApi=currentApi;      if (log != null) {        log.info("Returning API: " + amazonApi.getId());      }      return;    }  }  String createdApiId=getApiGatewayClient().createRestApi(new CreateRestApiRequest().withName(getApiName()).withDescription(getApiDescription())).getId();  if (log != null) {    log.info("API Gateway created: " + createdApiId);  }  createOrUpdateApi();}  }
class C{  public boolean startlistContains(String x){  if (startwords == null)   return true;  return startwords.contains(x);}  }
class C{  public synchronized void reply(SerialReply l){  if (waitingOnInput && (l.isRcv()) && (ua == l.getUA())) {    for (int i=begInByte; i <= endInByte; i++) {      inBytes[i]=(byte)l.getElement(i + 2);    }    waitingOnInput=false;  }}  }
class C{  public Patterns(){  super(Pattern.class);}  }
class C{  public void reset(){  mTapToRetryAttempts=0;}  }
class C{  public final boolean sendMessage(Message msg){  return mExec.sendMessage(msg);}  }
class C{  public Vector2f divide(float scalar){  return new Vector2f(x / scalar,y / scalar);}  }
class C{  public ClassDefinitionBuilder noAnnotations(){  noAnnotations=true;  return this;}  }
class C{  private ActivityController<? extends CourseOutlineActivity> initialize(Intent intent){  ActivityController<? extends CourseOutlineActivity> controller=Robolectric.buildActivity(getActivityClass()).withIntent(intent);  CourseOutlineActivity activity=controller.create(null).postCreate(null).get();  new PrefManager.UserPrefManager(activity).setUserPrefVideoModel(false);  activity.modeChanged();  activity.invalidateOptionsMenu();  Fragment fragment=activity.getSupportFragmentManager().findFragmentByTag(CourseOutlineFragment.TAG);  assertNotNull(fragment);  assertThat(fragment).isInstanceOf(CourseOutlineFragment.class);  assertTrue(fragment.getRetainInstance());  Bundle args=fragment.getArguments();  assertNotNull(args);  Bundle data=intent.getBundleExtra(Router.EXTRA_BUNDLE);  assertEquals(data.getSerializable(Router.EXTRA_COURSE_DATA),args.getSerializable(Router.EXTRA_COURSE_DATA));  if (provideCourseId) {    assertEquals(data.getString(Router.EXTRA_COURSE_COMPONENT_ID),args.getString(Router.EXTRA_COURSE_COMPONENT_ID));  }  return controller;}  }
class C{  public static boolean isConformantSchemeName(String p_scheme){  if (p_scheme == null || p_scheme.trim().length() == 0) {    return false;  }  if (!isAlpha(p_scheme.charAt(0))) {    return false;  }  char testChar;  for (int i=1; i < p_scheme.length(); i++) {    testChar=p_scheme.charAt(i);    if (!isAlphanum(testChar) && SCHEME_CHARACTERS.indexOf(testChar) == -1) {      return false;    }  }  return true;}  }
class C{  public SQLRecoverableException(String reason,String sqlState,int vendorCode,Throwable cause){  super(reason,sqlState,vendorCode,cause);}  }
class C{  private boolean isCircularNoSideEffect(int regV,BitSet set){  if ((set != null) && set.get(regV)) {    return true;  }  for (  SsaInsn use : useList[regV]) {    if (hasSideEffect(use)) {      return false;    }  }  if (set == null) {    set=new BitSet(regCount);  }  set.set(regV);  for (  SsaInsn use : useList[regV]) {    RegisterSpec result=use.getResult();    if (result == null || !isCircularNoSideEffect(result.getReg(),set)) {      return false;    }  }  return true;}  }
class C{  private boolean isTsFileIsInScope(IFile file,ITsconfigBuildPath tsContainer) throws CoreException {  IDETsconfigJson tsconfig=tsContainer.getTsconfig();  if (tsconfig != null) {    return tsconfig.isInScope(file);  }  return false;}  }
class C{  public static int unsignedLeb128Size(long value){  long remaining=value >> 7;  int count=0;  while (remaining != 0) {    remaining>>=7;    count++;  }  return count + 1;}  }
class C{  public Categories(boolean fixed,String defaultScheme,Category... categories){  this.fixed=fixed;  this.defaultScheme=defaultScheme;  if (categories.length != 0) {    this.categories=Arrays.asList(categories);  }}  }
class C{  protected void validateStatePatch(State current,State patch,URI referer){  if (current.taskInfo.stage != TaskState.TaskStage.CREATED && referer.getPath().contains(TaskSchedulerServiceFactory.SELF_LINK)) {    throw new IllegalStateException("Service is not in CREATED stage, ignores patch from TaskSchedulerService");  }  checkState(current.taskInfo.stage.ordinal() < TaskState.TaskStage.FINISHED.ordinal(),"Can not patch anymore when in final stage %s",current.taskInfo.stage);  if (patch.taskInfo != null) {    checkState(patch.taskInfo.stage != null,"Invalid stage update. 'stage' can not be null in patch");    checkState(patch.taskInfo.stage.ordinal() >= current.taskInfo.stage.ordinal(),"Invalid stage update. Can not revert to %s from %s",patch.taskInfo.stage,current.taskInfo.stage);    if (patch.taskInfo.subStage != null && current.taskInfo.subStage != null) {      checkState(patch.taskInfo.subStage.ordinal() >= current.taskInfo.subStage.ordinal(),"Invalid stage update. 'subStage' cannot move back.");    }  }  checkArgument(patch.parentLink == null,"parentLink cannot be changed.");  checkArgument(patch.image == null,"Image cannot be changed.");  checkArgument(patch.sourceDatastore == null,"Source datastore cannot be changed.");  checkArgument(patch.destinationDatastore == null,"Destination datastore cannot be changed.");}  }
class C{  public synchronized void deleteObservers(){  obs.removeAllElements();}  }
class C{  public boolean swapBuffers(){  boolean result=mEglCore.swapBuffers(mEGLSurface);  if (!result) {    Log.d(TAG,"WARNING: swapBuffers() failed");  }  return result;}  }
class C{  public Boolean isLocalDisk(){  return localDisk;}  }
class C{  public void addParseFilter(ParseFilter filter){  log.debug("Loading parse filter: " + filter.getClass().getSimpleName());  parseFilters.add(filter);}  }
class C{  public static double[] pow(double[] a,double c){  double[] result=new double[a.length];  for (int i=0; i < a.length; i++) {    result[i]=Math.pow(a[i],c);  }  return result;}  }
class C{  public void configureExecutableButton(final ItemType itemType,final boolean initialExecutable,final boolean isSymlink){  Check.notNull(itemType,"itemType");  if (itemType != ItemType.FILE || repository == null || repository.getVersionControlClient().getServiceLevel().getValue() < WebServiceLevel.TFS_2012_2.getValue() || localPath == null || !repository.getWorkspace().isLocalPathMapped(localPath) || isSymlink) {    executableButton.setEnabled(false);    executableButton.setSelection(false);    executableButton.setToolTipText(null);  } else {    executableButton.setEnabled(true);    executableButton.setSelection(initialExecutable);    executableButton.setToolTipText(Messages.getString("GeneralPropertiesTab.ExecutableCheckboxTooltipText"));  }}  }
class C{  public void maxx(int parseInt){  maxx=parseInt;}  }
class C{  private boolean doAcquireSharedNanos(long arg,long nanosTimeout) throws InterruptedException {  long lastTime=System.nanoTime();  final Node node=addWaiter(Node.SHARED);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head) {        int r=tryAcquireShared(arg);        if (r >= 0) {          setHeadAndPropagate(node,r);          p.next=null;          failed=false;          return true;        }      }      if (nanosTimeout <= 0)       return false;      if (shouldParkAfterFailedAcquire(p,node) && nanosTimeout > spinForTimeoutThreshold)       LockSupport.parkNanos(this,nanosTimeout);      long now=System.nanoTime();      nanosTimeout-=now - lastTime;      lastTime=now;      if (Thread.interrupted())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public void removeAllSpringConfig(){  mSpringConfigMap.clear();}  }
class C{  public void visitCodeLength(int length){  if (mv != null) {    mv.visitCodeLength(length);  }}  }
class C{  public XTEAEngine(){  _initialised=false;}  }
class C{  public static Boolean[] valuesOf(boolean[] array){  Boolean[] dest=new Boolean[array.length];  for (int i=0; i < array.length; i++) {    dest[i]=Boolean.valueOf(array[i]);  }  return dest;}  }
class C{  private String printXFormat(long x){  String sx=null;  if (x == Long.MIN_VALUE)   sx="8000000000000000"; else   if (x < 0) {    String t=Long.toString((~(-x - 1)) ^ Long.MIN_VALUE,16);switch (t.length()) {case 1:      sx="800000000000000" + t;    break;case 2:  sx="80000000000000" + t;break;case 3:sx="8000000000000" + t;break;case 4:sx="800000000000" + t;break;case 5:sx="80000000000" + t;break;case 6:sx="8000000000" + t;break;case 7:sx="800000000" + t;break;case 8:sx="80000000" + t;break;case 9:sx="8000000" + t;break;case 10:sx="800000" + t;break;case 11:sx="80000" + t;break;case 12:sx="8000" + t;break;case 13:sx="800" + t;break;case 14:sx="80" + t;break;case 15:sx="8" + t;break;case 16:switch (t.charAt(0)) {case '1':sx="9" + t.substring(1,16);break;case '2':sx="a" + t.substring(1,16);break;case '3':sx="b" + t.substring(1,16);break;case '4':sx="c" + t.substring(1,16);break;case '5':sx="d" + t.substring(1,16);break;case '6':sx="e" + t.substring(1,16);break;case '7':sx="f" + t.substring(1,16);break;}break;}} else sx=Long.toString(x,16);return printXFormat(sx);}  }
class C{  public void testExists() throws Exception {  create(igfs,paths(DIR),null);  checkExist(igfs,igfsSecondary,DIR);}  }
class C{  public byte[] encrypt(FacesContext context,byte[] plaindata){  try {    byte[] rawKey=convertPasswordToKey(getPasswordToSecureState(context));    Cipher cipher=getBlockCipherForEncryption(rawKey);    byte[] encdata=cipher.doFinal(plaindata);    Mac mac=getMac(rawKey);    byte[] iv=cipher.getIV();    mac.update(iv);    mac.update(encdata);    byte[] macBytes=mac.doFinal();    byte[] tmp=concatBytes(macBytes,iv);    byte[] securedata=concatBytes(tmp,encdata);    return securedata;  } catch (  Exception e) {    if (logger.isLoggable(Level.SEVERE)) {      logger.log(Level.SEVERE,e.getMessage(),e.getCause());    }    throw new RuntimeException(e);  }}  }
class C{  public void testHandledDroppedTimedOffer(){  AtomicInteger calls=new AtomicInteger();  SubmissionPublisher<Integer> p=new SubmissionPublisher<Integer>(basicExecutor,4);  TestSubscriber s1=new TestSubscriber();  s1.request=false;  TestSubscriber s2=new TestSubscriber();  s2.request=false;  p.subscribe(s1);  p.subscribe(s2);  s2.awaitSubscribe();  s1.awaitSubscribe();  long delay=timeoutMillis();  for (int i=1; i <= 4; ++i)   assertTrue(p.offer(i,delay,MILLISECONDS,null) >= 0);  long startTime=System.nanoTime();  assertTrue(p.offer(5,delay,MILLISECONDS,null) < 0);  s1.sn.request(64);  assertTrue(p.offer(6,delay,MILLISECONDS,null) < 0);  assertTrue(millisElapsedSince(startTime) >= delay);  s2.sn.request(64);  p.close();  s2.awaitComplete();  s1.awaitComplete();  assertTrue(calls.get() >= 2);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  int progress=0;  int a;  int filterSize=3;  double n;  double sum;  double average;  double sumOfTheSquares;  double stdDev;  double devMean;  int dX[];  int dY[];  int midPoint;  int numPixelsInFilter;  double[] filterShape;  boolean reflectAtBorders=true;  double centreValue=0;  double neighbourhoodDist=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  neighbourhoodDist=Double.parseDouble(args[2]);  if (inputHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    DEM.isReflectedAtEdges=reflectAtBorders;    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("grey.pal");    filterSize=(int)(neighbourhoodDist / ((DEM.getCellSizeX() + DEM.getCellSizeY()) / 2));    if (Math.floor(filterSize / 2d) == (filterSize / 2d)) {      filterSize++;    }    if (filterSize < 3) {      filterSize=3;    }    numPixelsInFilter=filterSize * filterSize;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPoint=(int)Math.floor(filterSize / 2);    double aSqr=midPoint * midPoint;    double bSqr=midPoint * midPoint;    a=0;    for (row=0; row < filterSize; row++) {      for (col=0; col < filterSize; col++) {        dX[a]=col - midPoint;        dY[a]=row - midPoint;        z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;        if (z > 1) {          filterShape[a]=0;        } else {          filterShape[a]=1;        }        a++;      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        centreValue=DEM.getValue(row,col);        if (centreValue != noData) {          n=0;          sum=0;          sumOfTheSquares=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            if ((x != midPoint) && (y != midPoint)) {              z=DEM.getValue(y,x);              if (z != noData) {                n+=filterShape[a];                sum+=z * filterShape[a];                sumOfTheSquares+=(z * filterShape[a]) * z;              }            }          }          average=sum / n;          z=centreValue - average;          if (n > 2) {            stdDev=Math.sqrt((sumOfTheSquares / n) - (average * average));            devMean=z / stdDev;            output.setValue(row,col,devMean);          } else {            output.setValue(row,col,noData);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public ScaleFilter(int width,int height){  this.width=width;  this.height=height;}  }
class C{  public void reset(){  this.stateMachineDefinition.remove();  this.tlUniqueEventCount.remove();  this.eventNames.remove();}  }
class C{  public float computeEdgeFill(){  if (dataType != DataType.Float) {    throw new IllegalStateException("Must be a float raster.");  }  byte[] bArray1=new byte[width * numBytes];  ByteBuffer bBuf1=ByteBuffer.wrap(bArray1);  bBuf1.rewind();  FloatBuffer fBuf1=bBuf1.asFloatBuffer();  byte[] bArray2=new byte[width * numBytes];  ByteBuffer bBuf2=ByteBuffer.wrap(bArray2);  bBuf2.rewind();  FloatBuffer fBuf2=bBuf2.asFloatBuffer();  float zMin=Float.MAX_VALUE;  for (int r=0; r < length; ++r) {    mmbBuf.get(r,bBuf1.array());    fBuf1.rewind();    for (int c=0; c < width; ++c) {      float val=fBuf1.get(c);      if (!Float.isNaN(val)) {        zMin=Math.min(zMin,val);        break;      }    }    for (int c=width - 1; c >= 0; c--) {      float val=fBuf1.get(c);      if (!Float.isNaN(val)) {        zMin=Math.min(zMin,val);        break;      }    }  }  boolean found=false;  mmbBuf.get(0,bBuf1.array());  fBuf1.rewind();  for (int r=1; r < length; ++r) {    boolean done=true;    mmbBuf.get(r,bBuf2.array());    fBuf2.rewind();    for (int c=0; c < width; ++c) {      float val1=fBuf1.get(c);      float val2=fBuf2.get(c);      if (Float.isNaN(val1)) {        if (!Float.isNaN(val2)) {          zMin=Math.min(zMin,val2);          done=false;          found=true;        }      } else {        found=true;        if (Float.isNaN(val2)) {          done=false;        }      }    }    fBuf2.rewind();    FloatBuffer tmp=fBuf1;    fBuf1=fBuf2;    fBuf2=tmp;    if (found && done) {      break;    }  }  found=false;  mmbBuf.get(length - 1,bBuf1.array());  fBuf1.rewind();  for (int r=(length - 2); r >= 0; r--) {    boolean done=true;    mmbBuf.get(r,bBuf2.array());    fBuf2.rewind();    for (int c=0; c < width; ++c) {      float val1=fBuf1.get(c);      float val2=fBuf2.get(c);      if (Float.isNaN(val1)) {        if (!Float.isNaN(val2)) {          zMin=Math.min(zMin,val2);          done=false;          found=true;        }      } else {        found=true;        if (Float.isNaN(val2)) {          done=false;        }      }    }    fBuf2.rewind();    FloatBuffer tmp=fBuf1;    fBuf1=fBuf2;    fBuf2=tmp;    if (found && done) {      break;    }  }  return (zMin);}  }
class C{  public String toString(){  return _string;}  }
class C{  public BinaryBlockFrame(JavaPairRDD<Long,FrameBlock> binaryBlocks,MatrixCharacteristics matrixCharacteristics){  this.binaryBlocks=binaryBlocks;  this.frameMetadata=new FrameMetadata(matrixCharacteristics);}  }
class C{  private long computeFreshnessLifetime(){  CacheControl responseCaching=cacheResponse.cacheControl();  if (responseCaching.maxAgeSeconds() != -1) {    return SECONDS.toMillis(responseCaching.maxAgeSeconds());  } else   if (expires != null) {    long servedMillis=servedDate != null ? servedDate.getTime() : receivedResponseMillis;    long delta=expires.getTime() - servedMillis;    return delta > 0 ? delta : 0;  } else   if (lastModified != null && cacheResponse.request().url().query() == null) {    long servedMillis=servedDate != null ? servedDate.getTime() : sentRequestMillis;    long delta=servedMillis - lastModified.getTime();    return delta > 0 ? (delta / 10) : 0;  }  return 0;}  }
class C{  public GeoDistanceBuilder addUnboundedTo(String key,double to){  ranges.add(new Range(key,null,to));  return this;}  }
class C{  protected CnATreeElement loadElement(String uuid) throws CommandException {  LoadElementByUuid<CnATreeElement> loadByUuid=new LoadElementByUuid<CnATreeElement>(uuid,RetrieveInfo.getPropertyInstance());  loadByUuid=commandService.executeCommand(loadByUuid);  CnATreeElement element=loadByUuid.getElement();  assertNotNull("Element is null, uuid: " + uuid,element);  RetrieveCnATreeElement retrieveCommand=new RetrieveCnATreeElement(element.getTypeId(),element.getDbId(),RetrieveInfo.getChildrenInstance());  retrieveCommand=commandService.executeCommand(retrieveCommand);  CnATreeElement elementWithChildren=retrieveCommand.getElement();  assertNotNull("Element with children is null, uuid: " + uuid,elementWithChildren);  assertNotNull("Children of element are null, uuid: " + uuid,elementWithChildren.getChildren());  LoadElementForEditor loadForEditor=new LoadElementForEditor(element,false);  loadForEditor=ServiceFactory.lookupCommandService().executeCommand(loadForEditor);  element=loadForEditor.getElement();  assertNotNull("Element for editor is null, uuid: " + uuid,element);  element.setChildren(elementWithChildren.getChildren());  return element;}  }
class C{  private void calculateUsingTextSize(final float textSize){  if (msText == null)   return;  final float availableWidth;  final float newTextSize;  boolean updateDrawText=false;  if (isClose(textSize,mfCollapsedTextSize)) {    availableWidth=mCollapsedBounds.width();    newTextSize=mfCollapsedTextSize;    mScale=1f;  } else {    availableWidth=mExpandedBounds.width();    newTextSize=mfExpandedTextSize;    if (isClose(textSize,mfExpandedTextSize)) {      mScale=1f;    } else {      mScale=textSize / mfExpandedTextSize;    }  }  if (availableWidth > 0) {    updateDrawText=(mCurrentTextSize != newTextSize) || mBoundsChanged || updateDrawText;    mCurrentTextSize=newTextSize;    mBoundsChanged=false;  }  if (mTextToDraw == null || updateDrawText) {    mTextPaint.setTextSize(mCurrentTextSize);    final CharSequence title=TextUtils.ellipsize(msText,mTextPaint,availableWidth,TextUtils.TruncateAt.END);    if (!TextUtils.equals(title,mTextToDraw)) {      mTextToDraw=title;    }  }}  }
class C{  public static Set string2Set(String in,String delimiter,boolean doStrip){  if (in == null) {    return null;  }  HashSet<String> out=new HashSet<String>();  string2Collection(in,delimiter,doStrip,out);  return out;}  }
class C{  public String toString(){  return text.toString().concat(closeBodyTag());}  }
class C{  public File save(){  ConfigRenderOptions renderOptions=ConfigRenderOptions.defaults().setComments(true).setFormatted(true).setOriginComments(false).setJson(false);  bumpVersion();  String configData=configImpl.root().render(renderOptions);  FileWriter writer=null;  try {    writer=new FileWriter(tmpFile.toFile());    writer.write(configData);  } catch (  IOException e) {    logger.warn("failed to write file, message={}",e.getMessage());  } finally {    CloseableUtils.closeQuietly(writer);  }  return tmpFile.toFile();}  }
class C{  public boolean executeKeyEvent(KeyEvent event){  mTempRect.setEmpty();  boolean handled=false;  if (event.getAction() == KeyEvent.ACTION_DOWN) {switch (event.getKeyCode()) {case KeyEvent.KEYCODE_DPAD_LEFT:      if (canScrollH()) {        if (!event.isAltPressed()) {          handled=arrowScrollH(View.FOCUS_LEFT);        } else {          handled=fullScrollH(View.FOCUS_LEFT);        }      }    break;case KeyEvent.KEYCODE_DPAD_RIGHT:  if (canScrollH()) {    if (!event.isAltPressed()) {      handled=arrowScrollH(View.FOCUS_RIGHT);    } else {      handled=fullScrollH(View.FOCUS_RIGHT);    }  }break;case KeyEvent.KEYCODE_DPAD_UP:if (canScrollV()) {if (!event.isAltPressed()) {  handled=arrowScrollV(View.FOCUS_UP);} else {  handled=fullScrollV(View.FOCUS_UP);}}break;case KeyEvent.KEYCODE_DPAD_DOWN:if (canScrollV()) {if (!event.isAltPressed()) {handled=arrowScrollV(View.FOCUS_DOWN);} else {handled=fullScrollV(View.FOCUS_DOWN);}}break;}}return handled;}  }
class C{  public static List<URI> refreshCinderConnections(final List<StorageProvider> cinderProviderList,DbClient dbClient){  List<URI> activeProviders=new ArrayList<URI>();  for (  StorageProvider storageProvider : cinderProviderList) {    try {      checkProviderConnection(storageProvider);      storageProvider.setConnectionStatus(ConnectionStatus.CONNECTED.name());      activeProviders.add(storageProvider.getId());      _log.info("Storage Provider {} is reachable",storageProvider.getIPAddress());    } catch (    Exception e) {      storageProvider.setConnectionStatus(ConnectionStatus.NOTCONNECTED.name());      _log.error("Storage Provider {} is not reachable",storageProvider.getIPAddress());    } finally {      dbClient.persistObject(storageProvider);    }  }  return activeProviders;}  }
class C{  @Override public void start(){}  }
class C{  public void incTempQueueSize(int delta){  this.stats.incInt(eventTmpQueueSizeId,delta);}  }
class C{  static void sort(short[] a,int left,int right,short[] work,int workBase,int workLen){  if (right - left > COUNTING_SORT_THRESHOLD_FOR_SHORT_OR_CHAR) {    int[] count=new int[NUM_SHORT_VALUES];    for (int i=left - 1; ++i <= right; count[a[i] - Short.MIN_VALUE]++)     ;    for (int i=NUM_SHORT_VALUES, k=right + 1; k > left; ) {      while (count[--i] == 0)       ;      short value=(short)(i + Short.MIN_VALUE);      int s=count[i];      do {        a[--k]=value;      } while (--s > 0);    }  } else {    doSort(a,left,right,work,workBase,workLen);  }}  }
class C{  public T caseStateInternal_(StateInternal_ object){  return null;}  }
class C{  public void dispose(){  super.dispose();  s_splash=null;}  }
class C{  public static boolean hayError(DocumentoIER dier){  InformacionError ie=dier.getInformacionError();  return ie.getCodigo().get().equals("0") ? false : true;}  }
class C{  public boolean attempt(ObjectReference old,ObjectReference value,Offset offset){  return false;}  }
class C{  public ByteArrayTransferable(int offset,byte[] bytes){  this.offset=offset;  if (bytes != null) {    this.bytes=(byte[])bytes.clone();  } else {    this.bytes=new byte[0];  }}  }
class C{  public void printStackTrace(){  if (exception == null) {    super.printStackTrace();  } else {synchronized (System.err) {      System.err.println(this);      super.printStackTrace();    }  }}  }
class C{  @Override public String encode(){  StringBuffer buffer=new StringBuffer("[");  if (lowerBound != null) {    buffer.append(lowerBound.encode());    buffer.append(',');  }  buffer.append(basis.encode());  if (upperBound != null) {    buffer.append(',');    buffer.append(upperBound.encode());  }  buffer.append(']');  return buffer.toString();}  }
class C{  public CreateEndpointResponse createKeystoneEndpoint(EndpointV2 endpoint){  log.debug("START - createKeystoneEndpoint");  if (endpoint == null) {    log.error("endpoint is null");    throw APIException.internalServerErrors.targetIsNullOrEmpty("Endpoint object");  }  CreateEndpointRequest endpointRequest=new CreateEndpointRequest();  endpointRequest.setEndpoint(endpoint);  String body="";  try {    body=getJsonForEntity(endpointRequest);  } catch (  Exception e) {    throw KeystoneApiException.exceptions.requestJsonPayloadParseFailure(endpointRequest.toString());  }  String uri=KeystoneConstants.URI_ENDPOINTS;  URI requestURI=_base.resolve(URI.create(uri));  ClientResponse response=post(requestURI,body);  if (response.getClientResponseStatus() != ClientResponse.Status.OK && response.getClientResponseStatus() != ClientResponse.Status.CREATED) {    throw KeystoneApiException.exceptions.apiExecutionFailed(response.toString());  }  CreateEndpointResponse createEndpointResponse;  log.debug("Parsing service request results to Java object");  try {    createEndpointResponse=getResponseObject(CreateEndpointResponse.class,response);  } catch (  Exception e) {    log.error("Failed to parse the endpoint validation response");    throw KeystoneApiException.exceptions.responseJsonParseFailure(response.toString());  }  log.debug("END - createKeystoneEndpoint");  return createEndpointResponse;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static Bitmap loadBitmap(String fileName) throws ImageLoadException {  return loadBitmap(new FileSource(fileName));}  }
class C{  public boolean skipPreamble() throws IOException {  System.arraycopy(boundary,2,boundary,0,boundary.length - 2);  boundaryLength=boundary.length - 2;  try {    discardBodyData();    return readBoundary();  } catch (  MalformedStreamException e) {    return false;  } finally {    System.arraycopy(boundary,0,boundary,2,boundary.length - 2);    boundaryLength=boundary.length;    boundary[0]=CR;    boundary[1]=LF;  }}  }
class C{  public void onLibraryTestTimeOut(OneSheeldDevice device){}  }
class C{  private void createCheckpointTable(Connection conn) throws SQLException {  Statement st=null;  try {    st=conn.createStatement();    st.executeUpdate(crtTblSql);    if (log.isDebugEnabled())     log.debug("Successfully created checkpoint table: " + tblName);  }  finally {    U.close(st,log);  }}  }
class C{  public boolean read(BinaryFile binFile){  boolean nitf=new com.bbn.openmap.layer.nitf.NitfHeader().read(binFile);  if (!nitf) {    try {      binFile.seek(0);      int headerOffset=handleNITFHeader(binFile);      if (headerOffset < 0)       return false; else       binFile.seek(headerOffset);    } catch (    IOException e) {      Debug.error("RpfHeader: File IO Error while reading header information:\n" + e);      return false;    }  }  return readHeader(binFile);}  }
class C{  public static String[] fromCommaSeparatedList(String s){  return fromCommaSeparatedList(s,true);}  }
class C{  public static <T>List<T> splice(List<T> list,int index,int deleteCount,T value){  return spliceImpl(list,index,deleteCount,true,value);}  }
class C{  private void checkExpired(){  List<Offer> list=market.getOffersOlderThan(TIME_TO_EXPIRING);  for (  Offer offer : list) {    market.expireOffer(offer);    StringBuilder builder=new StringBuilder();    builder.append("Your offer of ");    String itemname="unknown item";    if (offer.hasItem()) {      itemname=offer.getItem().getName();    }    builder.append(Grammar.a_noun(itemname));    builder.append(" has expired. You have ");    builder.append(TimeUtil.approxTimeUntil((int)(offer.getTimestamp() - System.currentTimeMillis()) / 1000 + TIME_TO_REMOVING));    builder.append(" left to get the item back or prolong the offer.");    sendMessage(offer.getOfferer(),builder);  }}  }
class C{  public InGroupPredicate(String group){  super(group);}  }
class C{  private void hackToolTipDelay(Tooltip tooltip){  try {    Field fieldBehavior=tooltip.getClass().getDeclaredField("BEHAVIOR");    fieldBehavior.setAccessible(true);    Object objBehavior=fieldBehavior.get(tooltip);    Field fieldTimer=objBehavior.getClass().getDeclaredField("activationTimer");    fieldTimer.setAccessible(true);    Timeline objTimer=(Timeline)fieldTimer.get(objBehavior);    objTimer.getKeyFrames().clear();    objTimer.getKeyFrames().add(new KeyFrame(new Duration(100)));  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  final Node<E> succ(Node<E> p){  Node<E> next=p.next;  return (p == next) ? head : next;}  }
class C{  public DialogEditCodeNodeComment(final CGraphModel model,final INaviCodeNode node,final InitialTab initialTab){  super(model.getParent(),"Edit Node Comments",true);  m_codeNode=Preconditions.checkNotNull(node,"IE01701: Node argument can't be null");  new CDialogEscaper(this);  setLayout(new BorderLayout());  m_commentsPanel=new CodeNodeCommentsPanel(node);  m_globalLineCommentsPanel=new CGlobalInstructionCommentsPanel(m_codeNode,model);  m_localLineCommentsPanel=new LocalInstructionCommentsPanel(m_codeNode,model);  try {    m_functionCommentsPanel=new CFunctionCommentsPanel(node.getParentFunction(),null);  } catch (  final MaybeNullException exception) {    CUtilityFunctions.logException(exception);  }  createGui(initialTab);}  }
class C{  public HtmlPolicyBuilder allowStyling(CssSchema whitelist){  invalidateCompiledState();  this.allowAttributesGlobally(AttributePolicy.IDENTITY_ATTRIBUTE_POLICY,ImmutableList.of("style"));  this.stylingPolicySchema=this.stylingPolicySchema == null ? whitelist : CssSchema.union(stylingPolicySchema,whitelist);  return this;}  }
class C{  public static boolean IsWord(String str){  return null != wordHashTable.get(str);}  }
class C{  public static int deleteEx(int AD_Table_ID,int Record_ID,String trxName) throws DBException {  final String sql="DELETE Fact_Acct WHERE AD_Table_ID=? AND Record_ID=?";  int no=DB.executeUpdateEx(sql,new Object[]{AD_Table_ID,Record_ID},trxName);  s_log.fine("delete - AD_Table_ID=" + AD_Table_ID + ", Record_ID="+ Record_ID+ " - #"+ no);  return no;}  }
class C{  @Override protected boolean accept(E object) throws X {  if (inExcludeSet(object)) {    return false;  } else {    add(object);    return true;  }}  }
class C{  public void zoomOut(){  if (canZoomOut()) {    zoomLevel--;    scroller.abortAnimation();    int scrollX=getScrollX();    int maxWidth=effectiveWidth * (zoomLevel - 1);    if (scrollX > maxWidth) {      scrollX=maxWidth;      scrollTo(scrollX,0);    }    updatePaths();    invalidate();  }}  }
class C{  public void parseObjectCount(String Object,String url,String username,String password,JSONBuilder jsonString){  try {    HTTPController api=new HTTPController(username,password);    SAXBuilder sb=new SAXBuilder();    String result=api.doGet(url + "/JSSResource/" + Object);    Document doc=sb.build(new ByteArrayInputStream(result.getBytes("UTF-8")));    List<Element> objects=doc.getRootElement().getChildren();    int count=parseMultipleObjects(objects).size();    jsonString.addObject(Object);    jsonString.addFinalElement("count",Integer.toString(count));    jsonString.closeObject();  } catch (  Exception e) {    e.printStackTrace();    System.out.print(e);  }}  }
class C{  protected void incrementPieceCount(int color,int piece){  if ((piece & PROMOTED_MASK) != 0) {    piece&=NOT_PROMOTED_MASK;  }  pieceCounts[color][piece]++;}  }
class C{  public static RawMessage build(byte[] messageBytes,int messageLength,TransportAddress remoteAddress,TransportAddress localAddress){  return new RawMessage(messageBytes,messageLength,remoteAddress,localAddress);}  }
class C{  @DELETE @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/shares/{shareName}") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskResourceRep deleteShare(@PathParam("id") URI id,@PathParam("shareName") String shareName) throws InternalException {  ArgValidator.checkFieldUriType(id,FileShare.class,"id");  FileShare fs=queryResource(id);  ArgValidator.checkFieldNotNull(shareName,"shareName");  ArgValidator.checkFieldNotNull(fs,"filesystem");  String task=UUID.randomUUID().toString();  SMBFileShare smbShare=null;  if (!CifsShareUtility.doesShareExist(fs,shareName)) {    _log.error("CIFS share does not exist {}",shareName);    throw APIException.notFound.invalidParameterObjectHasNoSuchShare(id,shareName);  }  smbShare=fs.getSMBFileShares().get(shareName);  _log.info("Deleteing SMBShare {}",shareName);  StorageSystem device=_dbClient.queryObject(StorageSystem.class,fs.getStorageDevice());  Operation op=_dbClient.createTaskOpStatus(FileShare.class,fs.getId(),task,ResourceOperationTypeEnum.DELETE_FILE_SYSTEM_SHARE);  FileSMBShare fileSMBShare=new FileSMBShare(shareName,smbShare.getDescription(),smbShare.getPermissionType(),smbShare.getPermission(),Integer.toString(smbShare.getMaxUsers()),smbShare.getNativeId(),smbShare.getPath());  fileSMBShare.setStoragePortGroup(smbShare.getPortGroup());  FileServiceApi fileServiceApi=getFileShareServiceImpl(fs,_dbClient);  fileServiceApi.deleteShare(device.getId(),fs.getId(),fileSMBShare,task);  auditOp(OperationTypeEnum.DELETE_FILE_SYSTEM_SHARE,true,AuditLogManager.AUDITOP_BEGIN,smbShare.getName(),smbShare.getPermissionType(),smbShare.getPermission(),smbShare.getMaxUsers(),smbShare.getDescription(),fs.getId().toString());  return toTask(fs,task,op);}  }
class C{  public boolean isVisible(){  return m_edge.isVisible();}  }
class C{  public void addRuleInstances(Digester digester){  digester.addRule("faces-config",new FacesConfigRule());  if (runtime) {    digester.addRule("faces-config/application",new ApplicationRule());    digester.addCallMethod("faces-config/application/action-listener","addActionListener",0);    digester.addRule("faces-config/application/locale-config",new LocaleConfigRule());    digester.addCallMethod("faces-config/application/locale-config/default-locale","setDefaultLocale",0);    digester.addCallMethod("faces-config/application/locale-config/supported-locale","addSupportedLocale",0);    digester.addCallMethod("faces-config/application/message-bundle","setMessageBundle",0);    digester.addCallMethod("faces-config/application/navigation-handler","addNavigationHandler",0);    digester.addCallMethod("faces-config/application/property-resolver","addPropertyResolver",0);    digester.addCallMethod("faces-config/application/state-manager","addStateManager",0);    digester.addCallMethod("faces-config/application/variable-resolver","addVariableResolver",0);    digester.addCallMethod("faces-config/application/view-handler","addViewHandler",0);    digester.addCallMethod("faces-config/application/default-render-kit-id","setDefaultRenderKitId",0);    digester.addCallMethod("faces-config/application/el-resolver","addELResolver",0);    digester.addRule("faces-config/application/resource-bundle",new ResourceBundleRule());    digester.addCallMethod("faces-config/application/resource-bundle/base-name","setBasename",0);    digester.addCallMethod("faces-config/application/resource-bundle/var","setVar",0);    addFeatureRules("faces-config/application/resource-bundle",digester);  }  digester.addRule("faces-config/component",new ComponentRule());  digester.addCallMethod("faces-config/component/component-class","setComponentClass",0);  digester.addCallMethod("faces-config/component/component-type","setComponentType",0);  if (design || generate) {    addAttributeRules("faces-config/component",digester);    addFeatureRules("faces-config/component",digester);    addPropertyRules("faces-config/component",digester);    digester.addCallMethod("faces-config/component/component-extension/base-component-type","setBaseComponentType",0);    digester.addCallMethod("faces-config/component/component-extension/renderer-type","setRendererType",0);    digester.addCallMethod("faces-config/component/component-extension/component-family","setComponentFamily",0);    digester.addCallMethod("faces-config/component/component-extension/ignore","setIgnore",0,new String[]{"java.lang.Boolean"});  }  if (design || runtime) {    digester.addRule("faces-config/converter",new ConverterRule());    digester.addCallMethod("faces-config/converter/converter-class","setConverterClass",0);    digester.addCallMethod("faces-config/converter/converter-for-class","setConverterForClass",0);    digester.addCallMethod("faces-config/converter/converter-id","setConverterId",0);    if (design) {      addAttributeRules("faces-config/converter",digester);      addFeatureRules("faces-config/converter",digester);      addPropertyRules("faces-config/converter",digester);    }  }  if (runtime) {    digester.addRule("faces-config/factory",new FactoryRule());    digester.addCallMethod("faces-config/factory/application-factory","addApplicationFactory",0);    digester.addCallMethod("faces-config/factory/faces-context-factory","addFacesContextFactory",0);    digester.addCallMethod("faces-config/factory/lifecycle-factory","addLifecycleFactory",0);    digester.addCallMethod("faces-config/factory/render-kit-factory","addRenderKitFactory",0);  }  if (runtime) {    digester.addRule("faces-config/lifecycle",new LifecycleRule());    digester.addCallMethod("faces-config/lifecycle/phase-listener","addPhaseListener",0);  }  if (design || runtime) {    digester.addRule("faces-config/managed-bean",new ManagedBeanRule());    digester.addCallMethod("faces-config/managed-bean/managed-bean-class","setManagedBeanClass",0);    digester.addCallMethod("faces-config/managed-bean/managed-bean-name","setManagedBeanName",0);    digester.addCallMethod("faces-config/managed-bean/managed-bean-scope","setManagedBeanScope",0);    addFeatureRules("faces-config/managed-bean",digester);    addListEntriesRules("faces-config/managed-bean",digester);    addMapEntriesRules("faces-config/managed-bean",digester);  }  if (design || runtime) {    digester.addRule("faces-config/managed-bean/managed-property",new ManagedPropertyRule());    digester.addCallMethod("faces-config/managed-bean/managed-property/property-class","setPropertyClass",0);    digester.addCallMethod("faces-config/managed-bean/managed-property/property-name","setPropertyName",0);    digester.addRule("faces-config/managed-bean/managed-property/null-value",new NullValueRule());    digester.addCallMethod("faces-config/managed-bean/managed-property/value","setValue",0);    addFeatureRules("faces-config/managed-bean/managed-property",digester);    addListEntriesRules("faces-config/managed-bean/managed-property",digester);    addMapEntriesRules("faces-config/managed-bean/managed-property",digester);  }  if (design || runtime) {    digester.addRule("faces-config/navigation-rule",new NavigationRuleRule());    digester.addCallMethod("faces-config/navigation-rule/from-view-id","setFromViewId",0);    addFeatureRules("faces-config/navigation-rule",digester);  }  if (design || runtime) {    digester.addRule("faces-config/navigation-rule/navigation-case",new NavigationCaseRule());    digester.addCallMethod("faces-config/navigation-rule/navigation-case/from-action","setFromAction",0);    digester.addCallMethod("faces-config/navigation-rule/navigation-case/from-outcome","setFromOutcome",0);    digester.addCallMethod("faces-config/navigation-rule/navigation-case/redirect","setRedirectTrue",0);    digester.addCallMethod("faces-config/navigation-rule/navigation-case/to-view-id","setToViewId",0);    addFeatureRules("faces-config/navigation-rule/navigation-case",digester);  }  if (design) {    digester.addRule("faces-config/referenced-bean",new ReferencedBeanRule());    digester.addCallMethod("faces-config/referenced-bean/referenced-bean-class","setReferencedBeanClass",0);    digester.addCallMethod("faces-config/referenced-bean/referenced-bean-name","setReferencedBeanName",0);    addFeatureRules("faces-config/referenced-bean",digester);  }  digester.addRule("faces-config/render-kit",new RenderKitRule());  digester.addCallMethod("faces-config/render-kit/render-kit-class","setRenderKitClass",0);  digester.addCallMethod("faces-config/render-kit/render-kit-id","setRenderKitId",0);  if (design || generate) {    addFeatureRules("faces-config/render-kit",digester);  }  digester.addRule("faces-config/render-kit/renderer",new RendererRule());  digester.addCallMethod("faces-config/render-kit/renderer/component-family","setComponentFamily",0);  digester.addCallMethod("faces-config/render-kit/renderer/renderer-class","setRendererClass",0);  digester.addCallMethod("faces-config/render-kit/renderer/renderer-type","setRendererType",0);  if (design || generate) {    addAttributeRules("faces-config/render-kit/renderer",digester);    addFeatureRules("faces-config/render-kit/renderer",digester);    digester.addCallMethod("faces-config/render-kit/renderer/renderer-extension/renders-children","setRendersChildren",0,new String[]{"java.lang.Boolean"});    digester.addCallMethod("faces-config/render-kit/renderer/renderer-extension/exclude-attributes","setExcludeAttributes",0);    digester.addCallMethod("faces-config/render-kit/renderer/renderer-extension/jsp-ignore","setIgnoreForJsp",0,new String[]{"java.lang.Boolean"});    digester.addCallMethod("faces-config/render-kit/renderer/renderer-extension/ignore-all","setIgnoreAll",0,new String[]{"java.lang.Boolean"});    digester.addCallMethod("faces-config/render-kit/renderer/renderer-extension/tag-name","setTagName",0);    digester.addCallMethod("faces-config/render-kit/renderer/renderer-extension/body-tag","setBodyTag",0,new String[]{"java.lang.Boolean"});  }  if (design || runtime) {    digester.addRule("faces-config/validator",new ValidatorRule());    digester.addCallMethod("faces-config/validator/validator-class","setValidatorClass",0);    digester.addCallMethod("faces-config/validator/validator-id","setValidatorId",0);    if (design) {      addAttributeRules("faces-config/validator",digester);      addFeatureRules("faces-config/validator",digester);      addPropertyRules("faces-config/validator",digester);    }  }}  }
class C{  protected String doIt() throws java.lang.Exception {  log.info("AD_Org_ID=" + p_AD_Org_ID + ", C_BankAccount_ID"+ p_C_BankAccount_ID);  StringBuffer sql=null;  int no=0;  String clientCheck=" AND AD_Client_ID=" + p_AD_Client_ID;  if (p_deleteOldImported) {    sql=new StringBuffer("DELETE I_BankStatement " + "WHERE I_IsImported='Y'").append(clientCheck);    no=DB.executeUpdate(sql.toString(),get_TrxName());    log.fine("Delete Old Impored =" + no);  }  sql=new StringBuffer("UPDATE I_BankStatement " + "SET AD_Client_ID = COALESCE (AD_Client_ID,").append(p_AD_Client_ID).append(")," + " AD_Org_ID = COALESCE (AD_Org_ID,").append(p_AD_Org_ID).append("),");  sql.append(" IsActive = COALESCE (IsActive, 'Y')," + " Created = COALESCE (Created, SysDate)," + " CreatedBy = COALESCE (CreatedBy, 0),"+ " Updated = COALESCE (Updated, SysDate),"+ " UpdatedBy = COALESCE (UpdatedBy, 0),"+ " I_ErrorMsg = ' ',"+ " I_IsImported = 'N' "+ "WHERE I_IsImported<>'Y' OR I_IsImported IS NULL OR AD_Client_ID IS NULL OR AD_Org_ID IS NULL OR AD_Client_ID=0 OR AD_Org_ID=0");  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.info("Reset=" + no);  sql=new StringBuffer("UPDATE I_BankStatement o " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Org, '" + "WHERE (AD_Org_ID IS NULL OR AD_Org_ID=0"+ " OR EXISTS (SELECT * FROM AD_Org oo WHERE o.AD_Org_ID=oo.AD_Org_ID AND (oo.IsSummary='Y' OR oo.IsActive='N')))"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Org=" + no);  sql=new StringBuffer("UPDATE I_BankStatement i " + "SET C_BankAccount_ID=" + "( "+ " SELECT C_BankAccount_ID "+ " FROM C_BankAccount a, C_Bank b "+ " WHERE b.IsOwnBank='Y' "+ " AND a.AD_Client_ID=i.AD_Client_ID "+ " AND a.C_Bank_ID=b.C_Bank_ID "+ " AND a.AccountNo=i.BankAccountNo "+ " AND b.RoutingNo=i.RoutingNo "+ " OR b.SwiftCode=i.RoutingNo "+ ") "+ "WHERE i.C_BankAccount_ID IS NULL "+ "AND i.I_IsImported<>'Y' "+ "OR i.I_IsImported IS NULL").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.info("Bank Account (With Routing No)=" + no);  sql=new StringBuffer("UPDATE I_BankStatement i " + "SET C_BankAccount_ID=" + "( "+ " SELECT C_BankAccount_ID "+ " FROM C_BankAccount a, C_Bank b "+ " WHERE b.IsOwnBank='Y' "+ " AND a.C_Bank_ID=b.C_Bank_ID "+ " AND a.AccountNo=i.BankAccountNo "+ " AND a.AD_Client_ID=i.AD_Client_ID "+ ") "+ "WHERE i.C_BankAccount_ID IS NULL "+ "AND i.I_isImported<>'Y' "+ "OR i.I_isImported IS NULL").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.info("Bank Account (Without Routing No)=" + no);  sql=new StringBuffer("UPDATE I_BankStatement i " + "SET C_BankAccount_ID=(SELECT C_BankAccount_ID FROM C_BankAccount a WHERE a.C_BankAccount_ID=").append(p_C_BankAccount_ID);  sql.append(" and a.AD_Client_ID=i.AD_Client_ID) " + "WHERE i.C_BankAccount_ID IS NULL " + "AND i.BankAccountNo IS NULL "+ "AND i.I_isImported<>'Y' "+ "OR i.I_isImported IS NULL").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.info("Bank Account=" + no);  sql=new StringBuffer("UPDATE I_BankStatement " + "SET I_isImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Bank Account, ' " + "WHERE C_BankAccount_ID IS NULL "+ "AND I_isImported<>'Y' "+ "OR I_isImported IS NULL").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Bank Account=" + no);  sql=new StringBuffer("UPDATE I_BankStatement i " + "SET C_Currency_ID=(SELECT C_Currency_ID FROM C_Currency c" + " WHERE i.ISO_Code=c.ISO_Code AND c.AD_Client_ID IN (0,i.AD_Client_ID)) "+ "WHERE C_Currency_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.info("Set Currency=" + no);  sql=new StringBuffer("UPDATE I_BankStatement i " + "SET C_Currency_ID=(SELECT C_Currency_ID FROM C_BankAccount WHERE C_BankAccount_ID=i.C_BankAccount_ID) " + "WHERE i.C_Currency_ID IS NULL "+ "AND i.ISO_Code IS NULL").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.info("Set Currency=" + no);  sql=new StringBuffer("UPDATE I_BankStatement " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Currency,' " + "WHERE C_Currency_ID IS NULL "+ "AND I_IsImported<>'E' "+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Currency=" + no);  sql=new StringBuffer("UPDATE I_BankStatement " + "SET ChargeAmt=0 " + "WHERE ChargeAmt IS NULL "+ "AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.info("Charge Amount=" + no);  sql=new StringBuffer("UPDATE I_BankStatement " + "SET InterestAmt=0 " + "WHERE InterestAmt IS NULL "+ "AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.info("Interest Amount=" + no);  sql=new StringBuffer("UPDATE I_BankStatement " + "SET TrxAmt=StmtAmt - InterestAmt - ChargeAmt " + "WHERE TrxAmt IS NULL "+ "AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.info("Transaction Amount=" + no);  sql=new StringBuffer("UPDATE I_BankStatement " + "SET I_isImported='E', I_ErrorMsg=I_ErrorMsg||'Err=Invalid Amount, ' " + "WHERE TrxAmt + ChargeAmt + InterestAmt <> StmtAmt "+ "AND I_isImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.info("Invaid Amount=" + no);  sql=new StringBuffer("UPDATE I_BankStatement " + "SET ValutaDate=StatementLineDate " + "WHERE ValutaDate IS NULL "+ "AND I_isImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.info("Valuta Date=" + no);  sql=new StringBuffer("UPDATE I_BankStatement " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'Err=Invalid Payment<->Invoice, ' " + "WHERE I_BankStatement_ID IN "+ "(SELECT I_BankStatement_ID "+ "FROM I_BankStatement i"+ " INNER JOIN C_Payment p ON (i.C_Payment_ID=p.C_Payment_ID) "+ "WHERE i.C_Invoice_ID IS NOT NULL "+ " AND p.C_Invoice_ID IS NOT NULL "+ " AND p.C_Invoice_ID<>i.C_Invoice_ID) ").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.info("Payment<->Invoice Mismatch=" + no);  sql=new StringBuffer("UPDATE I_BankStatement " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'Err=Invalid Payment<->BPartner, ' " + "WHERE I_BankStatement_ID IN "+ "(SELECT I_BankStatement_ID "+ "FROM I_BankStatement i"+ " INNER JOIN C_Payment p ON (i.C_Payment_ID=p.C_Payment_ID) "+ "WHERE i.C_BPartner_ID IS NOT NULL "+ " AND p.C_BPartner_ID IS NOT NULL "+ " AND p.C_BPartner_ID<>i.C_BPartner_ID) ").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.info("Payment<->BPartner Mismatch=" + no);  sql=new StringBuffer("UPDATE I_BankStatement " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'Err=Invalid Invoice<->BPartner, ' " + "WHERE I_BankStatement_ID IN "+ "(SELECT I_BankStatement_ID "+ "FROM I_BankStatement i"+ " INNER JOIN C_Invoice v ON (i.C_Invoice_ID=v.C_Invoice_ID) "+ "WHERE i.C_BPartner_ID IS NOT NULL "+ " AND v.C_BPartner_ID IS NOT NULL "+ " AND v.C_BPartner_ID<>i.C_BPartner_ID) ").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.info("Invoice<->BPartner Mismatch=" + no);  sql=new StringBuffer("UPDATE I_BankStatement " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'Err=Invalid Invoice.BPartner<->Payment.BPartner, ' " + "WHERE I_BankStatement_ID IN "+ "(SELECT I_BankStatement_ID "+ "FROM I_BankStatement i"+ " INNER JOIN C_Invoice v ON (i.C_Invoice_ID=v.C_Invoice_ID)"+ " INNER JOIN C_Payment p ON (i.C_Payment_ID=p.C_Payment_ID) "+ "WHERE p.C_Invoice_ID<>v.C_Invoice_ID"+ " AND v.C_BPartner_ID<>p.C_BPartner_ID) ").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.info("Invoice.BPartner<->Payment.BPartner Mismatch=" + no);  sql=new StringBuffer("SELECT i.I_BankStatement_ID, l.C_BankStatementLine_ID, i.EftTrxID " + "FROM I_BankStatement i, C_BankStatement s, C_BankStatementLine l " + "WHERE i.I_isImported='N' "+ "AND s.C_BankStatement_ID=l.C_BankStatement_ID "+ "AND i.EftTrxID IS NOT NULL AND "+ "(l.EftTrxID||l.EftAmt||l.EftStatementLineDate||l.EftValutaDate||l.EftTrxType||l.EftCurrency||l.EftReference||s.EftStatementReference "+ "||l.EftCheckNo||l.EftMemo||l.EftPayee||l.EftPayeeAccount) "+ "= "+ "(i.EftTrxID||i.EftAmt||i.EftStatementLineDate||i.EftValutaDate||i.EftTrxType||i.EftCurrency||i.EftReference||i.EftStatementReference "+ "||i.EftCheckNo||i.EftMemo||i.EftPayee||i.EftPayeeAccount) ");  StringBuffer updateSql=new StringBuffer("UPDATE I_Bankstatement " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'Err=Duplicate['||?||']' " + "WHERE I_BankStatement_ID=?").append(clientCheck);  PreparedStatement pupdt=DB.prepareStatement(updateSql.toString(),get_TrxName());  PreparedStatement pstmtDuplicates=null;  no=0;  try {    pstmtDuplicates=DB.prepareStatement(sql.toString(),get_TrxName());    ResultSet rs=pstmtDuplicates.executeQuery();    while (rs.next()) {      String info="Line_ID=" + rs.getInt(2) + ",EDTTrxID="+ rs.getString(3);      pupdt.setString(1,info);      pupdt.setInt(2,rs.getInt(1));      pupdt.executeUpdate();      no++;    }    rs.close();    pstmtDuplicates.close();    pupdt.close();    rs=null;    pstmtDuplicates=null;    pupdt=null;  } catch (  Exception e) {    log.log(Level.SEVERE,"DetectDuplicates " + e.getMessage());  }  if (no != 0)   log.info("Duplicates=" + no);  commitEx();  sql=new StringBuffer("SELECT * FROM I_BankStatement" + " WHERE I_IsImported='N'" + " ORDER BY C_BankAccount_ID, Name, EftStatementDate, EftStatementReference");  MBankStatement statement=null;  MBankAccount account=null;  PreparedStatement pstmt=null;  int lineNo=10;  int noInsert=0;  int noInsertLine=0;  try {    pstmt=DB.prepareStatement(sql.toString(),get_TrxName());    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      X_I_BankStatement imp=new X_I_BankStatement(m_ctx,rs,get_TrxName());      if (account == null) {        account=MBankAccount.get(m_ctx,imp.getC_BankAccount_ID());        statement=null;        log.info("New Statement, Account=" + account.getAccountNo());      } else       if (account.getC_BankAccount_ID() != imp.getC_BankAccount_ID()) {        account=MBankAccount.get(m_ctx,imp.getC_BankAccount_ID());        statement=null;        log.info("New Statement, Account=" + account.getAccountNo());      } else       if ((statement.getName() != null) && (imp.getName() != null)) {        if (!statement.getName().equals(imp.getName())) {          statement=null;          log.info("New Statement, Statement Name=" + imp.getName());        }      } else       if ((statement.getEftStatementReference() != null) && (imp.getEftStatementReference() != null)) {        if (!statement.getEftStatementReference().equals(imp.getEftStatementReference())) {          statement=null;          log.info("New Statement, Statement Reference=" + imp.getEftStatementReference());        }      } else       if ((statement.getStatementDate() != null) && (imp.getStatementDate() != null)) {        if (!statement.getStatementDate().equals(imp.getStatementDate())) {          statement=null;          log.info("New Statement, Statement Date=" + imp.getStatementDate());        }      }      if (statement == null) {        statement=new MBankStatement(account);        statement.setEndingBalance(Env.ZERO);        if (imp.getName() != null) {          statement.setName(imp.getName());        }        if (imp.getStatementDate() != null) {          statement.setStatementDate(imp.getStatementDate());        }        statement.setDescription(imp.getDescription());        statement.setEftStatementReference(imp.getEftStatementReference());        statement.setEftStatementDate(imp.getEftStatementDate());        if (statement.save()) {          noInsert++;        }        lineNo=10;      }      MBankStatementLine line=new MBankStatementLine(statement,lineNo);      line.setReferenceNo(imp.getReferenceNo());      line.setDescription(imp.getLineDescription());      line.setStatementLineDate(imp.getStatementLineDate());      line.setDateAcct(imp.getStatementLineDate());      line.setValutaDate(imp.getValutaDate());      line.setIsReversal(imp.isReversal());      line.setC_Currency_ID(imp.getC_Currency_ID());      line.setTrxAmt(imp.getTrxAmt());      line.setStmtAmt(imp.getStmtAmt());      if (imp.getC_Charge_ID() != 0) {        line.setC_Charge_ID(imp.getC_Charge_ID());      }      line.setInterestAmt(imp.getInterestAmt());      line.setChargeAmt(imp.getChargeAmt());      line.setMemo(imp.getMemo());      if (imp.getC_Payment_ID() != 0) {        line.setC_Payment_ID(imp.getC_Payment_ID());      }      line.setEftTrxID(imp.getEftTrxID());      line.setEftTrxType(imp.getEftTrxType());      line.setEftCheckNo(imp.getEftCheckNo());      line.setEftReference(imp.getEftReference());      line.setEftMemo(imp.getEftMemo());      line.setEftPayee(imp.getEftPayee());      line.setEftPayeeAccount(imp.getEftPayeeAccount());      line.setEftStatementLineDate(imp.getEftStatementLineDate());      line.setEftValutaDate(imp.getEftValutaDate());      line.setEftCurrency(imp.getEftCurrency());      line.setEftAmt(imp.getEftAmt());      if (line.save()) {        imp.setC_BankStatement_ID(statement.getC_BankStatement_ID());        imp.setC_BankStatementLine_ID(line.getC_BankStatementLine_ID());        imp.setI_IsImported(true);        imp.setProcessed(true);        imp.saveEx();        noInsertLine++;        lineNo+=10;      }      line=null;    }    rs.close();    pstmt.close();    rs=null;    pstmt=null;  } catch (  Exception e) {    log.log(Level.SEVERE,sql.toString(),e);  }  sql=new StringBuffer("UPDATE I_BankStatement " + "SET I_IsImported='N', Updated=SysDate " + "WHERE I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  addLog(0,null,new BigDecimal(no),"@Errors@");  addLog(0,null,new BigDecimal(noInsert),"@C_BankStatement_ID@: @Inserted@");  addLog(0,null,new BigDecimal(noInsertLine),"@C_BankStatementLine_ID@: @Inserted@");  return "";}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  @SuppressWarnings("unchecked") protected void onQueryComplete(int token,Object cookie,Cursor cursor){  ((AsyncProviderCommand<ArgType>)cookie).onCompletion(token,cursor);}  }
class C{  public void removeAllHeaders(){  clientHeaderMap.clear();}  }
class C{  private static float calculateFullSizeAspectRatio(CameraCharacteristics characteristics){  Rect activeArraySize=characteristics.get(CameraCharacteristics.SENSOR_INFO_ACTIVE_ARRAY_SIZE);  return ((float)(activeArraySize.width())) / activeArraySize.height();}  }
class C{  public static <Item extends Comparable>Queue<Item> mergeSort(Queue<Item> items){  return items;}  }
class C{  public DiskAccessException(){  super();}  }
class C{  public TournamentController(TicTacToeApplet applet){  super(applet);}  }
class C{  private HGSearchResult<ValueType> findOrdered(KeyType key,boolean lower_range,boolean compare_equals){  checkOpen();  byte[] keyAsBytes=keyConverter.toByteArray(key);  DatabaseEntry keyEntry=new DatabaseEntry(keyAsBytes);  DatabaseEntry value=new DatabaseEntry();  Cursor cursor=null;  try {    TransactionBJEImpl tx=txn();    cursor=db.openCursor(txn().getBJETransaction(),cursorConfig);    OperationStatus status=cursor.getSearchKeyRange(keyEntry,value,LockMode.DEFAULT);    Supplier<ValueType> forward=null, backward=null;    if (status == OperationStatus.SUCCESS) {      if (!lower_range) {        if (!compare_equals && getKeyComparator().compare(keyAsBytes,keyEntry.getData()) == 0)         status=cursor.getNextNoDup(keyEntry,value,LockMode.DEFAULT);        if (status == OperationStatus.SUCCESS) {          forward=bje.nextDataSupplier(cursor,null,valueConverter);          backward=bje.chain(bje.prevDataSupplier(cursor,new DatabaseEntry(keyAsBytes),valueConverter),bje.prevDupSupplier(cursor,new DatabaseEntry(keyAsBytes),valueConverter));        }      } else {        if ((!compare_equals || getKeyComparator().compare(keyAsBytes,keyEntry.getData()) != 0) && ((status=cursor.getPrev(keyEntry,value,LockMode.DEFAULT)) == OperationStatus.SUCCESS)) {          forward=bje.prevDataSupplier(cursor,null,valueConverter);          backward=bje.nextDataSupplier(cursor,new DatabaseEntry(keyAsBytes),valueConverter);        } else         if (status == OperationStatus.SUCCESS) {          TwoWayIterator<ValueType> specialCaseIterator=bje.lowerRangeOnKeyResultSet(cursor,keyEntry,valueConverter);          forward=null;          backward=null;        }      }    } else     if (lower_range && cursor.getLast(keyEntry,value,LockMode.DEFAULT) == OperationStatus.SUCCESS) {      forward=bje.prevDataSupplier(cursor,null,valueConverter);      backward=bje.nextDataSupplier(cursor,null,valueConverter);    }    if (forward != null)     return new SearchResultWrapper<ValueType>(new IndexResultSet<ValueType>(tx.attachCursor(cursor),keyEntry,valueConverter,forward,backward,false));    try {      cursor.close();    } catch (    Throwable t) {    }    return (HGSearchResult<ValueType>)HGSearchResult.EMPTY;  } catch (  Throwable ex) {    if (cursor != null) {      try {        cursor.close();      } catch (      Throwable t) {      }    }    throw new HGException("Failed to lookup index '" + name + "': "+ ex.toString(),ex);  }}  }
class C{  public static void injectErrorLogger(final Consumer<String> logger){  LogProvider.errorLogger=logger;}  }
class C{  public boolean chmod(int value){  return getWrappedPath().chmod(value);}  }
class C{  public boolean isForwarded(){  return forwarded;}  }
class C{  private MemoryStringParser(){}  }
class C{  public void deleteTag(int tagId){  int ifdId=getDefinedTagDefaultIfd(tagId);  deleteTag(tagId,ifdId);}  }
class C{  public void send(final byte[] theBytes,final String theAddress,final int thePort){  try {    InetAddress myInetAddress=InetAddress.getByName(theAddress);    send(theBytes,myInetAddress,thePort);  } catch (  UnknownHostException e) {    Logger.printError("UdpClient.send","while sending to " + theAddress + " "+ e);  }}  }
class C{  public User findUser(String name){  return users.get(name);}  }
class C{  @Override public double update(V v){  collectDisappearingPotential(v);  double v_input=0;  for (  E e : graph.getInEdges(v)) {    int incident_count=getAdjustedIncidentCount(e);    for (    V w : graph.getIncidentVertices(e)) {      if (!w.equals(v) || hyperedges_are_self_loops)       v_input+=(getCurrentValue(w) * getEdgeWeight(w,e).doubleValue() / incident_count);    }  }  double new_value=alpha > 0 ? v_input * (1 - alpha) + getVertexPrior(v) * alpha : v_input;  setOutputValue(v,new_value);  return Math.abs(getCurrentValue(v) - new_value);}  }
class C{  public Set<Set<V>> apply(UndirectedGraph<V,E> theGraph){  Set<Set<V>> bicomponents=new LinkedHashSet<Set<V>>();  if (theGraph.getVertices().isEmpty())   return bicomponents;  dfs_num=new HashMap<V,Number>();  for (  V v : theGraph.getVertices()) {    dfs_num.put(v,0);  }  for (  V v : theGraph.getVertices()) {    if (dfs_num.get(v).intValue() == 0) {      high=new HashMap<V,Number>();      stack=new Stack<E>();      parents=new HashMap<V,V>();      converse_depth=theGraph.getVertexCount();      findBiconnectedComponents(theGraph,v,bicomponents);      if (theGraph.getVertexCount() - converse_depth == 1) {        Set<V> s=new HashSet<V>();        s.add(v);        bicomponents.add(s);      }    }  }  return bicomponents;}  }
class C{  @Override public int nodeSize(){  return listOfKeys.size();}  }
class C{  public static String toString(JSONObject jo) throws JSONException {  StringBuffer sb=new StringBuffer();  int i;  JSONArray ja;  String key;  Iterator keys;  int length;  Object object;  String tagName;  String value;  tagName=jo.optString("tagName");  if (tagName == null) {    return XML.escape(jo.toString());  }  XML.noSpace(tagName);  tagName=XML.escape(tagName);  sb.append('<');  sb.append(tagName);  keys=jo.keys();  while (keys.hasNext()) {    key=keys.next().toString();    if (!"tagName".equals(key) && !"childNodes".equals(key)) {      XML.noSpace(key);      value=jo.optString(key);      if (value != null) {        sb.append(' ');        sb.append(XML.escape(key));        sb.append('=');        sb.append('"');        sb.append(XML.escape(value));        sb.append('"');      }    }  }  ja=jo.optJSONArray("childNodes");  if (ja == null) {    sb.append('/');    sb.append('>');  } else {    sb.append('>');    length=ja.length();    for (i=0; i < length; i+=1) {      object=ja.get(i);      if (object != null) {        if (object instanceof String) {          sb.append(XML.escape(object.toString()));        } else         if (object instanceof JSONObject) {          sb.append(toString((JSONObject)object));        } else         if (object instanceof JSONArray) {          sb.append(toString((JSONArray)object));        } else {          sb.append(object.toString());        }      }    }    sb.append('<');    sb.append('/');    sb.append(tagName);    sb.append('>');  }  return sb.toString();}  }
class C{  protected final void fireColumnEvent(int idx,double prev){  Object[] lstnrs=m_listeners.getArray();  for (int i=0; i < lstnrs.length; ++i)   ((ColumnListener)lstnrs[i]).columnChanged(this,idx,prev);}  }
class C{  public boolean isFitLegend(){  return mFitLegend;}  }
class C{  private static String wrapArgumentCode(Type type,String name){  if (type.dimension().length() > 0 || type.asClassDoc() != null) {    return name;  } else   if (type.typeName().equals("boolean")) {    return ("(" + name + " ? java.lang.Boolean.TRUE : java.lang.Boolean.FALSE)");  } else   if (type.typeName().equals("byte")) {    return "new java.lang.Byte(" + name + ")";  } else   if (type.typeName().equals("char")) {    return "new java.lang.Character(" + name + ")";  } else   if (type.typeName().equals("short")) {    return "new java.lang.Short(" + name + ")";  } else   if (type.typeName().equals("int")) {    return "new java.lang.Integer(" + name + ")";  } else   if (type.typeName().equals("long")) {    return "new java.lang.Long(" + name + ")";  } else   if (type.typeName().equals("float")) {    return "new java.lang.Float(" + name + ")";  } else   if (type.typeName().equals("double")) {    return "new java.lang.Double(" + name + ")";  } else {    throw new AssertionError(type);  }}  }
class C{  public TypedPosition(TypedRegion region){  super(region.getOffset(),region.getLength());  fType=region.getType();}  }
class C{  private void addressValueChanged(Text text){  updateInfo();  firstConnect=true;}  }
class C{  public CSaveDatabaseAction(final CDatabaseSettingsPanel settingsPanel){  super("Save");  m_settingsPanel=settingsPanel;  putValue(SHORT_DESCRIPTION,"Saves the current database configuration (CTRL-S)");}  }
class C{  public void updateBucketQuota(String bucketName,String namespace,Long softQuota,Long hardQuota) throws ECSException {  _log.debug("ECSApi:updateBucketQuota Update bucket initiated for : {}",bucketName);  ClientResponse clientResp=null;  String quotaUpdate=" { \"blockSize\": \"" + hardQuota / BYTES_TO_GB + "\", \"notificationSize\": \"" + softQuota / BYTES_TO_GB + "\", \"namespace\": \"" + namespace + "\" }  ";  final String path=MessageFormat.format(URI_UPDATE_BUCKET_QUOTA,bucketName);  try {    clientResp=put(path,quotaUpdate);  } catch (  Exception e) {    _log.error("Error occured while Quota update for bucket : {}",bucketName,e);  } finally {    if (null == clientResp) {      throw ECSException.exceptions.bucketUpdateFailed(bucketName,"Quota","no response from ECS");    } else     if (clientResp.getStatus() != 200) {      throw ECSException.exceptions.bucketUpdateFailed(bucketName,"Quota",getResponseDetails(clientResp));    }    closeResponse(clientResp);  }}  }
class C{  public RTRecord(Name name,int dclass,long ttl,int preference,Name intermediateHost){  super(name,Type.RT,dclass,ttl,preference,"preference",intermediateHost,"intermediateHost");}  }
class C{  public void pauseJob(JobKey jobKey) throws SchedulerException {  sched.pauseJob(jobKey);}  }
class C{  public NotificacionBean(){  documentos=new java.util.ArrayList();  nombreDocumentos=new java.util.ArrayList();  extension=new java.util.ArrayList();  guid=new java.util.ArrayList();}  }
class C{  private FileOutputStream createFileOutputStream(final Path targetPath,final ConfigurationPartMetadata metadata) throws Exception {  Path filepath=targetPath.resolve(Paths.get(metadata.getInstanceIdentifier(),metadata.getContentLocation()));  Files.createDirectories(filepath.getParent());  Path newFile=Files.createFile(filepath);  log.debug("Copying file '{}' to directory '{}'",newFile.toAbsolutePath(),targetPath);  return new FileOutputStream(newFile.toAbsolutePath().toFile());}  }
class C{  public ICUTokenizer(){  this(new DefaultICUTokenizerConfig(true,true));}  }
class C{  @SuppressWarnings("unchecked") protected List<LabelValue> buildCountryList(Locale locale){  final Locale[] available=Locale.getAvailableLocales();  List<LabelValue> countries=new ArrayList<LabelValue>();  for (  Locale anAvailable : available) {    final String iso=anAvailable.getCountry();    final String name=anAvailable.getDisplayCountry(locale);    if (!"".equals(iso) && !"".equals(name)) {      LabelValue country=new LabelValue(name,iso);      if (!countries.contains(country)) {        countries.add(new LabelValue(name,iso));      }    }  }  Collections.sort(countries,new LabelValueComparator(locale));  return countries;}  }
class C{  public void reset(){  for (int i=0; i < a.length; i++) {    a[i]=i;  }  numLeft=new BigInteger(total.toString());}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","sanxiau");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  private void adjustRowHeights(JTable table){  for (int row=0; row < table.getRowCount(); row++) {    int rowHeight=table.getRowHeight();    for (int column=0; column < table.getColumnCount(); column++) {      Component comp=table.prepareRenderer(table.getCellRenderer(row,column),row,column);      rowHeight=Math.max(rowHeight,comp.getPreferredSize().height);    }    table.setRowHeight(row,rowHeight);  }}  }
class C{  protected static double[][] randomInitialSolution(final int size,final int dim,Random random){  double[][] sol=new double[size][dim];  for (int i=0; i < size; i++) {    for (int j=0; j < dim; j++) {      sol[i][j]=random.nextGaussian() * INITIAL_SOLUTION_SCALE;    }  }  return sol;}  }
class C{  public byte[] serialize() throws IOException {  ByteArrayOutputStream bytesOut=new ByteArrayOutputStream();  DataOutputStream dataOut=new DataOutputStream(bytesOut);  write(dataOut);  return bytesOut.toByteArray();}  }
class C{  public boolean isBPartnerDim(){  Object oo=get_Value(COLUMNNAME_IsBPartnerDim);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void addHeaderView(View v,Object data,boolean isSelectable){  ListAdapter adapter=getAdapter();  if (adapter != null && !(adapter instanceof HeaderViewGridAdapter)) {    throw new IllegalStateException("Cannot add header view to grid -- setAdapter has already been called.");  }  ViewGroup.LayoutParams lyp=v.getLayoutParams();  FixedViewInfo info=new FixedViewInfo();  FrameLayout fl=new FullWidthFixedViewLayout(getContext());  if (lyp != null) {    v.setLayoutParams(new FrameLayout.LayoutParams(lyp.width,lyp.height));    fl.setLayoutParams(new AbsListView.LayoutParams(lyp.width,lyp.height));  }  fl.addView(v);  info.view=v;  info.viewContainer=fl;  info.data=data;  info.isSelectable=isSelectable;  mHeaderViewInfos.add(info);  if (adapter != null) {    ((HeaderViewGridAdapter)adapter).notifyDataSetChanged();  }}  }
class C{  public static boolean putLong(Context context,String key,long value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putLong(key,value);  return editor.commit();}  }
class C{  public OracleParser(Database database){  Column c1=new Column("TEST_PK",java.sql.Types.INTEGER);  Column c2=new Column("CHAR_COL",java.sql.Types.VARCHAR,100);  Column c3=new Column("CHAR_COL2",java.sql.Types.VARCHAR,100);  Table t=new Table("TEST","TESTINSRANDWITHOUT");  dictionary=new ArrayList<Map>();  t.AddColumn(c1);  t.AddColumn(c2);  t.AddColumn(c3);  newTable(t,13308);  this.database=database;}  }
class C{  public boolean hasYomi(){  return super.hasAttribute(YOMI);}  }
class C{  public BaseCollectionPage(final List<T1> pageContents,final T2 nextRequestBuilder){  mPageContents=Collections.unmodifiableList(pageContents);  mRequestBuilder=nextRequestBuilder;}  }
class C{  public String attributeIndexTipText(){  return "Sets which attribute to process. This " + "attribute must be nominal (\"first\" and \"last\" are valid values)";}  }
class C{  public void testInvalidBlockComment() throws IOException {  final InputStream stream=this.getStream(R.raw.invalid_block_comment);  List<String> commands=SqlParser.parse(stream);  assertEquals(1,commands.size());  assertEquals(invalid,commands.get(0));}  }
class C{  public LeafNode createNode(String id) throws XMPPException {  return (LeafNode)createNode(id,null);}  }
class C{  Schema(MetadataRegistry registry){  this.elements=buildElements(registry,this);  this.attributes=buildAttributes(registry,this);}  }
class C{  void checkPermission(PermissionListener listener,String permission,Thread thread){  checkSinglePermission(listener,permission,thread);}  }
class C{  public FormView(Element elem){  super(elem);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DOMImplementation domImpl;  boolean state;  doc=(Document)load("staff",false);  domImpl=doc.getImplementation();  state=domImpl.hasFeature("xml","1.0");  assertTrue("hasXML1",state);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.ASSIGNMENT_EXPRESSION__LHS:    return lhs != null;case N4JSPackage.ASSIGNMENT_EXPRESSION__OP:  return op != OP_EDEFAULT;case N4JSPackage.ASSIGNMENT_EXPRESSION__RHS:return rhs != null;}return super.eIsSet(featureID);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public XMLStreamException(Throwable th){  super(th);  nested=th;}  }
class C{  public final void testEqualsObject01(){  ECFieldFp obj=new ECFieldFp(BigInteger.valueOf(23L));  assertTrue(obj.equals(obj));}  }
class C{  SchemaCommitter(CollectionService collectionService,MonitorService monitorService,AtomicInteger jobCounter){  super(collectionService,monitorService,jobCounter);}  }
class C{  @SafeVarargs public static <E>ImmutableList<E> of(E e1,E e2,E e3,E e4,E e5,E e6,E e7,E e8,E e9,E e10,E e11,E e12,E... others){  Object[] array=new Object[12 + others.length];  array[0]=e1;  array[1]=e2;  array[2]=e3;  array[3]=e4;  array[4]=e5;  array[5]=e6;  array[6]=e7;  array[7]=e8;  array[8]=e9;  array[9]=e10;  array[10]=e11;  array[11]=e12;  System.arraycopy(others,0,array,12,others.length);  return construct(array);}  }
class C{  private boolean personExistsInOldPopulation(Population oldPop,Id<Person> personId){  if (oldPop == null)   return false; else   return oldPop.getPersons().get(personId) != null;}  }
class C{  public static String toBinaryString(int i){  return IntegralToString.intToBinaryString(i);}  }
class C{  public int size(){  int result=0, tmp;  for (Node<Key> node=head; node != null; node=node.sibling) {    if (node.order > 30) {      throw new ArithmeticException("The number of elements cannot be evaluated, but the priority queue is still valid.");    }    tmp=1 << node.order;    result|=tmp;  }  return result;}  }
class C{  public void add(Object o){  if (o == null)   throw new IllegalArgumentException("null");  if (o instanceof ServiceHandler) {    ServiceHandler h=(ServiceHandler)o;    ArrayList<Class<? extends IEncodeable>> list=new ArrayList<Class<? extends IEncodeable>>();    h.getSupportedServices(list);    for (    Class<? extends IEncodeable> clazz : list) {      ServiceHandler oldHandler=handlerMap.get(clazz);      if (oldHandler != null && h != oldHandler)       throw new RuntimeException("ServiceHandlerComposition already handles " + clazz);      handlerMap.put(clazz,h);      handlerMap2.put(clazz,o);    }  } else {    readWithReflection(o,this);  }  handlers=handlerMap.values().toArray(new ServiceHandler[0]);}  }
class C{  public final GeoShapeMapperBuilder column(String column){  this.column=column;  return this;}  }
class C{  public static float[] expand(float[] field,int newSize,boolean keepData){  if (field == null || field.length < newSize) {    float[] newArray=new float[newSize];    if (keepData && field != null) {      System.arraycopy(field,0,newArray,0,field.length);    }    return newArray;  }  return field;}  }
class C{  public ObjectName(String domain,String key,String value) throws MalformedObjectNameException {  Map<String,String> table=Collections.singletonMap(key,value);  construct(domain,table);}  }
class C{  public static String geFileFromAssets(Context context,String fileName){  if (context == null || StringUtils.isEmpty(fileName)) {    return null;  }  StringBuilder s=new StringBuilder("");  try {    InputStreamReader in=new InputStreamReader(context.getResources().getAssets().open(fileName));    BufferedReader br=new BufferedReader(in);    String line;    while ((line=br.readLine()) != null) {      s.append(line);    }    return s.toString();  } catch (  IOException e) {    e.printStackTrace();    return null;  }}  }
class C{  public static void toWriter(Node node,Writer writer) throws TransformerException {  toWriter(node,writer,new HashMap<String,String>());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:48.469 -0500",hash_original_method="E6F861CC92981BDB285C9E8C86704EF5",hash_generated_method="34BD51EF454D782A4C0B0E8176E57191") public BasicStatusLine(final ProtocolVersion version,int statusCode,final String reasonPhrase){  super();  if (version == null) {    throw new IllegalArgumentException("Protocol version may not be null.");  }  if (statusCode < 0) {    throw new IllegalArgumentException("Status code may not be negative.");  }  this.protoVersion=version;  this.statusCode=statusCode;  this.reasonPhrase=reasonPhrase;}  }
class C{  public void remove(K key){  Integer value=refSet.get(key);  if (value == null) {    return;  }  countPoints--;  if (value == 1) {    refSet.remove(key);    return;  }  value--;  refSet.put(key,value);}  }
class C{  protected double[] alignLabels(List<ClassLabel> l1,double[] d1,Collection<ClassLabel> l2){  assert (l1.size() == d1.length);  if (l1 == l2) {    return d1.clone();  }  double[] d2=new double[l2.size()];  Iterator<ClassLabel> i2=l2.iterator();  for (int i=0; i2.hasNext(); ) {    ClassLabel l=i2.next();    int idx=l1.indexOf(l);    if (idx < 0 && getLogger().isDebuggingFiner()) {      getLogger().debugFiner("Label not found: " + l);    }    d2[i]=(idx >= 0) ? d1[idx] : 0.;  }  return d2;}  }
class C{  public void runTest() throws Throwable {  Document doc;  EntityReference badEntityRef;  doc=(Document)load("hc_staff",true);  if (("text/html".equals(getContentType()))) {{      boolean success=false;      try {        badEntityRef=doc.createEntityReference("foo");      } catch (      DOMException ex) {        success=(ex.code == DOMException.NOT_SUPPORTED_ERR);      }      assertTrue("throw_NOT_SUPPORTED_ERR",success);    }  } else {{      boolean success=false;      try {        badEntityRef=doc.createEntityReference("invalid^Name");      } catch (      DOMException ex) {        success=(ex.code == DOMException.INVALID_CHARACTER_ERR);      }      assertTrue("throw_INVALID_CHARACTER_ERR",success);    }  }}  }
class C{  public boolean isGlobalModePossible(){  return false;}  }
class C{  private void checkWithKnowledge(String inputGraph,String outputGraph,IKnowledge knowledge){  Graph graph=GraphConverter.convert(inputGraph);  IndependenceTest independence=new IndTestDSep(graph);  Score score=new GraphScore(graph);  PcMax pc=new PcMax(independence);  pc.setKnowledge(knowledge);  Graph resultGraph=pc.search();  Graph trueGraph=GraphConverter.convert(outputGraph);  assertTrue(resultGraph.equals(trueGraph));}  }
class C{  public void shoutMessage(final String msg){  if (msg != null) {    SingletonRepository.getRuleProcessor().tellAllPlayers(NotificationType.PRIVMSG,msg);  }}  }
class C{  protected DoubleMatrix3D viewSelectionLike(int[] sliceOffsets,int[] rowOffsets,int[] columnOffsets){  return new SelectedDenseDoubleMatrix3D(this.elements,sliceOffsets,rowOffsets,columnOffsets,0);}  }
class C{  public CConditionEditor(){  inputField.getDocument().addDocumentListener(m_documentListener);}  }
class C{  protected void selectWord(){  if (matchWord()) {    if (startPos == endPos)     fText.setSelectedRange(startPos,0); else     fText.setSelectedRange(startPos + 1,endPos - startPos - 1);  }}  }
class C{  @CanIgnoreReturnValue public CharEscaperBuilder addEscape(char c,String r){  map.put(c,checkNotNull(r));  if (c > max) {    max=c;  }  return this;}  }
class C{  @Override public void onDestroyView(){  mIsWebViewAvailable=false;  super.onDestroyView();}  }
class C{  @Ignore("TODO") @Test public void testRedundancySpecifiedNonFailoverEPFailsDetectionByCCU() throws Exception {  FailOverDetectionByCCU=true;  createClientCache(NetworkUtils.getServerHostName(Host.getHost(0)),PORT1,PORT2,PORT3,PORT4,1,250,500);  waitConnectedServers(4);  assertEquals(1,pool.getRedundantNames().size());  assertTrue(pool.getRedundantNames().contains(SERVER4));  verifyOrderOfEndpoints();  server2.invoke(null);  verifyDeadServers(1);  verifyRedundantServersContain(SERVER4);  verifyLiveAndRedundantServers(3,1);  verifyOrderOfEndpoints();}  }
class C{  boolean isIndexed(String fieldName){  if (isAltIdIndex(fieldName)) {    return true;  }  if (isPrefixIndex(fieldName)) {    return true;  }  if (isRelationIndex(fieldName)) {    return true;  }  return false;}  }
class C{  public static void main(String[] argv){  runClassifier(new BayesNet(),argv);}  }
class C{  private void assignIndexesOrderedByExtension(List<ExtensionProperty> propertyList,ArchiveFile af){  for (int propertyIndex=0; propertyIndex < propertyList.size(); propertyIndex++) {    ExtensionProperty extensionProperty=propertyList.get(propertyIndex);    Term term=TERM_FACTORY.findTerm(extensionProperty.getQualname());    ArchiveField f=af.getField(term);    if (f != null && f.getIndex() == null) {      int fieldIndex=propertyIndex + 1;      f.setIndex(fieldIndex);    } else {      log.warn("Skipping ExtensionProperty: " + extensionProperty.getQualname());    }  }}  }
class C{  public synchronized static String screenFormatHeadendLineup(SDHeadend headend,SDHeadendLineup lineup){  if (screenFormatBuilder == null)   screenFormatBuilder=new StringBuilder(); else   screenFormatBuilder.setLength(0);  screenFormatBuilder.append(lineup.getName());  if (!lineup.getName().equals(headend.getLocation()))   screenFormatBuilder.append(" - ").append(headend.getLocation());  return screenFormatBuilder.toString();}  }
class C{  public boolean containsBaseTypeOnly(){  return members.isEmpty();}  }
class C{  public void add(List<Dimension> dims){  HashMap<DimensionPK,Dimension> lookup=new HashMap<DimensionPK,Dimension>();  for (  Dimension dim : dims) {    lookup.put(dim.getId(),dim);  }  for (  Dimension dim : dims) {    if (dim.getParentId() != null) {      Dimension parent=lookup.get(dim.getParentId());      if (parent == null) {        dim.setParentId(null);      } else {        setParent(dim,parent);      }    }  }  for (  Dimension dim : dims) {    if (dim.getParentId() != null) {      checkCycles(dim);    }  }}  }
class C{  public void destroy(){  ViewGroup parent=(ViewGroup)getParent();  if (parent != null) {    parent.removeView(this);  }  mRevealerSpring.destroy();}  }
class C{  private static void deleteAccessControl(CalendarService service,String userEmail) throws ServiceException, IOException {  AclFeed aclFeed=service.getFeed(aclFeedUrl,AclFeed.class);  for (  AclEntry aclEntry : aclFeed.getEntries()) {    if (userEmail.equals(aclEntry.getScope().getValue())) {      aclEntry.delete();      System.out.println("Deleted " + userEmail + "'s access control.");      break;    }  }}  }
class C{  public static <C extends Model>void logClusterSizes(Clustering<C> c){  if (!LOG.isStatistics()) {    return;  }  final List<Cluster<C>> clusters=c.getAllClusters();  final int numc=clusters.size();  LOG.statistics(new StringStatistic(PREFIX + "name",c.getLongName()));  LOG.statistics(new LongStatistic(PREFIX + "clusters",numc));  Hierarchy<Cluster<C>> h=c.getClusterHierarchy();  int cnum=0;  for (  Cluster<C> clu : clusters) {    final String p=PREFIX + "cluster-" + cnum+ ".";    if (clu.getName() != null) {      LOG.statistics(new StringStatistic(p + "name",clu.getName()));    }    LOG.statistics(new LongStatistic(p + "size",clu.size()));    if (clu.isNoise()) {      LOG.statistics(new StringStatistic(p + "noise","true"));    }    if (h.numChildren(clu) > 0) {      StringBuilder buf=new StringBuilder();      for (Iter<Cluster<C>> it=h.iterChildren(clu); it.valid(); it.advance()) {        if (buf.length() > 0) {          buf.append(", ");        }        buf.append(it.get().getName());      }      LOG.statistics(new StringStatistic(p + "children",buf.toString()));    }    ++cnum;  }}  }
class C{  public void mark(Label label){  adopt(label);  if (label.marked) {    throw new IllegalStateException("already marked");  }  label.marked=true;  if (currentLabel != null) {    jump(label);  }  currentLabel=label;}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private String createLoggerAndGetDestination(Map<String,String> payloadFilter){  String filterDestination=payloadFilter.get(DESTINATION);  if (filterDestination == null) {    log.debug("no filterDestination set");    filterDestination="default";  }  if (loggingResource.getDestinationEntries().containsKey(filterDestination)) {    Map<String,String> destinationOptions=loggingResource.getDestinationEntries().get(filterDestination);    Appender appender=null;    if (destinationOptions.containsKey(FILE)) {      log.debug("found destination entry with type 'file' for: " + filterDestination);      appender=getFileAppender(filterDestination,destinationOptions.get(FILE));    } else     if (destinationOptions.containsKey("address")) {      log.debug("found destination entry with type 'eventBus' for: " + filterDestination);      appender=getEventBusAppender(filterDestination,destinationOptions);    } else {      log.warn("Unknown typeLocation for destination: " + filterDestination);    }    if (appender != null) {      if (!loggers.containsKey(filterDestination)) {        org.apache.log4j.Logger filterLogger=org.apache.log4j.Logger.getLogger("LOG_FILTER_" + payloadFilter.get(URL));        filterLogger.removeAllAppenders();        filterLogger.addAppender(appender);        filterLogger.setAdditivity(false);        loggers.put(filterDestination,filterLogger);      }    } else {      loggers.put(filterDestination,org.apache.log4j.Logger.getLogger(DEFAULT_LOGGER));    }  } else {    log.warn("no destination entry with name '" + filterDestination + "' found, using default logger instead");    loggers.put(filterDestination,org.apache.log4j.Logger.getLogger(DEFAULT_LOGGER));  }  return filterDestination;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  String attrValue;  NodeList childList;  String nullNS=null;  doc=(Document)load("staffNS",false);  childList=doc.getElementsByTagNameNS("http://www.nist.gov","employee");  element=(Element)childList.item(1);  attrValue=element.getAttributeNS(nullNS,"defaultAttr");  assertEquals("elementgetattributens02","defaultVal",attrValue);}  }
class C{  public void insertFront(int x){}  }
class C{  public static void addAnnotations(HexCodeFile hcf,List<CodeAnnotation> annotations){  if (annotations == null || annotations.isEmpty()) {    return;  }  for (  CodeAnnotation a : annotations) {    if (a instanceof JumpTable) {      JumpTable table=(JumpTable)a;      hcf.jumpTables.add(table);    } else     if (a instanceof CodeComment) {      CodeComment comment=(CodeComment)a;      hcf.addComment(comment.position,comment.value);    }  }}  }
class C{  static public String toString(final String label,final Object[] a){  StringBuilder sb=new StringBuilder();  sb.append("\n");  sb.append(label);  sb.append("(" + a.length + ")=[");  for (  Object t : a) {    sb.append("\n");    sb.append(t.toString());    sb.append(",");  }  sb.append("]");  return sb.toString();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public MekaTable(){  super();  initGUI();}  }
class C{  public static int calcSigHashValue(Transaction.SigHash mode,boolean anyoneCanPay){  int sighashFlags=mode.ordinal() + 1;  if (anyoneCanPay)   sighashFlags|=Transaction.SIGHASH_ANYONECANPAY_VALUE;  return sighashFlags;}  }
class C{  public static void addCombinerRecipe(ItemStack input,ItemStack output){  try {    Class recipeClass=Class.forName("mekanism.common.recipe.RecipeHandler");    Method m=recipeClass.getMethod("addCombinerRecipe",ItemStack.class,ItemStack.class);    m.invoke(null,input,output);  } catch (  Exception e) {    System.err.println("Error while adding recipe: " + e.getMessage());  }}  }
class C{  private boolean isClockwise(Point center,Point a,Point b){  double cross=(a.x - center.x) * (b.y - center.y) - (b.x - center.x) * (a.y - center.y);  return cross > 0;}  }
class C{  public void addQuat(Quaternion input){  this.dirty=true;  addQuat(input,this);}  }
class C{  public void disable(){}  }
class C{  public void unwatch(TOMMessage request){  rwLock.writeLock().lock();  if (watched.remove(request) && watched.isEmpty())   stopTimer();  rwLock.writeLock().unlock();}  }
class C{  protected void autoScrollDown(){  int index=list.getSelectedIndex();  int lastItem=list.getModel().getSize() - 1;  if (index < lastItem) {    list.setSelectedIndex(index + 1);    list.ensureIndexIsVisible(index + 1);  }}  }
class C{  public static boolean peekProject(String name,String rootFilename){  String root=getParentDirName(rootFilename);  if (root == null) {    return false;  }  File projectDir=new File(root.concat("/").concat(name).concat(TOOLBOX_DIRECTORY_SUFFIX));  return projectDir.exists();}  }
class C{  private int luminance(int r,int g,int b){  return (int)((0.299 * r) + (0.58 * g) + (0.11 * b));}  }
class C{  public void logSystemInfo(){  log("SystemInfo:\n" + new SystemInfo().toString());}  }
class C{  public void clear(){  name.clear();  text.clear();  source.clear();  off=0;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:08.075 -0500",hash_original_method="F4FE7D680FC27736DB53FE02767C67C5",hash_generated_method="B2C243698171FA5EFCE4E3C09AAE908D") private void handleSessionEnd(){  CatLog.d(this,"SESSION END");  mCurrntCmd=mMenuCmd;  Intent intent=new Intent(AppInterface.CAT_SESSION_END_ACTION);  mContext.sendBroadcast(intent);}  }
class C{  @Override public T create(final T entity){  return persistenceService.create(entity);}  }
class C{  public Envelope3D(final Envelope3D envelope){  init(envelope);}  }
class C{  public boolean isFullyConnected(){  for (  Node n : syncManager.getClusterConfig().getNodes()) {    if (n.getNodeId() != syncManager.getLocalNodeId() && !isConnected(n.getNodeId())) {      if (logger.isTraceEnabled()) {        logger.trace("[{}->{}] missing connection",syncManager.getLocalNodeId(),n.getNodeId());      }      return false;    }  }  return true;}  }
class C{  public JcaX509v3CertificateBuilder copyAndAddExtension(ASN1ObjectIdentifier oid,boolean critical,X509Certificate certificate) throws CertificateEncodingException {  this.copyAndAddExtension(oid,critical,new JcaX509CertificateHolder(certificate));  return this;}  }
class C{  public void addEndMarker(LatLong endPoint){  addMarkers(null,endPoint);}  }
class C{  public void endPrimaryAck(long startTime,boolean timedOut,boolean failed){  long duration=getStatTime() - startTime;  endClientOp(duration,timedOut,failed);  this.stats.incInt(primaryAckInProgressId,-1);  int endPrimaryAckId;  if (timedOut) {    endPrimaryAckId=primaryAckTimedOutId;  } else   if (failed) {    endPrimaryAckId=primaryAckFailedId;  } else {    endPrimaryAckId=primaryAckId;  }  this.stats.incInt(endPrimaryAckId,1);  this.stats.incLong(primaryAckDurationId,duration);}  }
class C{  public void start(){  farmer.start();}  }
class C{  public static PsiFile createFormattedFile(Project project,String filename,FileType fileType,String fileContents){  final PsiFile rawFile=PsiFileFactory.getInstance(project).createFileFromText(filename,fileType,fileContents);  final PsiFile formattedFile=(PsiFile)CodeStyleManager.getInstance(project).reformat(rawFile);  return formattedFile;}  }
class C{  public SyllableContextGenerator(Element node){  readFeatureParameters(node);}  }
class C{  public void enableInterface(boolean enable){  params.isInterfaceEnabled=enable;  if (enable)   enable(true);}  }
class C{  public static AffineTransformation createFromControlVectors(Coordinate src0,Coordinate src1,Coordinate dest0,Coordinate dest1){  Coordinate rotPt=new Coordinate(dest1.x - dest0.x,dest1.y - dest0.y);  double ang=Angle.angleBetweenOriented(src1,src0,rotPt);  double srcDist=src1.distance(src0);  double destDist=dest1.distance(dest0);  if (srcDist == 0.0)   return null;  double scale=destDist / srcDist;  AffineTransformation trans=AffineTransformation.translationInstance(-src0.x,-src0.y);  trans.rotate(ang);  trans.scale(scale,scale);  trans.translate(dest0.x,dest0.y);  return trans;}  }
class C{  public NTLMAuthentication(boolean isProxy,URL url,PasswordAuthentication pw){  super(isProxy ? PROXY_AUTHENTICATION : SERVER_AUTHENTICATION,AuthScheme.NTLM,url,"");  init(pw);}  }
class C{  public static boolean hasRoles(String... roles){  return hasRoles(Lists.newArrayList(roles));}  }
class C{  public static byte[] decodeWebSafe(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,WEBSAFE_DECODABET);}  }
class C{  public VariableStatement createVariableStatement(){  VariableStatementImpl variableStatement=new VariableStatementImpl();  return variableStatement;}  }
class C{  public static void unRegisterFirewallContentObserver(Context context,ContentObserver observer){  context.getContentResolver().unregisterContentObserver(observer);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public int remainingCycles(){  return remainingCyles;}  }
class C{  public ReferenceMap(int keyType,int valueType,boolean purgeValues){  super(keyType,valueType,DEFAULT_CAPACITY,DEFAULT_LOAD_FACTOR,purgeValues);}  }
class C{  public static void generateRPClass(){  final RPClass rpclass=new RPClass(Events.PROGRESS_STATUS_CHANGE);  rpclass.add(DefinitionClass.ATTRIBUTE,"progress_type",Type.STRING);  rpclass.add(DefinitionClass.ATTRIBUTE,"item",Type.STRING);  rpclass.add(DefinitionClass.ATTRIBUTE,"description",Type.VERY_LONG_STRING);  rpclass.add(DefinitionClass.ATTRIBUTE,"information",Type.VERY_LONG_STRING);  rpclass.add(DefinitionClass.ATTRIBUTE,"data",Type.VERY_LONG_STRING);}  }
class C{  @Deprecated public static Object chooseMostGeneralMethodWith1NullParam(FastArray methods){  CachedClass closestClass=null;  CachedClass closestVargsClass=null;  Object answer=null;  int closestDist=-1;  final int len=methods.size();  for (int i=0; i != len; ++i) {    final Object[] data=methods.getArray();    Object method=data[i];    final ParameterTypes pt=(ParameterTypes)method;    CachedClass[] paramTypes=pt.getParameterTypes();    int paramLength=paramTypes.length;    if (paramLength == 0 || paramLength > 2)     continue;    CachedClass theType=paramTypes[0];    if (theType.isPrimitive)     continue;    if (paramLength == 2) {      if (!pt.isVargsMethod(ARRAY_WITH_NULL))       continue;      if (closestClass == null) {        closestVargsClass=paramTypes[1];        closestClass=theType;        answer=method;      } else       if (closestClass.getTheClass() == theType.getTheClass()) {        if (closestVargsClass == null)         continue;        CachedClass newVargsClass=paramTypes[1];        if (isAssignableFrom(newVargsClass.getTheClass(),closestVargsClass.getTheClass())) {          closestVargsClass=newVargsClass;          answer=method;        }      } else       if (isAssignableFrom(theType.getTheClass(),closestClass.getTheClass())) {        closestVargsClass=paramTypes[1];        closestClass=theType;        answer=method;      }    } else {      if (closestClass == null || isAssignableFrom(theType.getTheClass(),closestClass.getTheClass())) {        closestVargsClass=null;        closestClass=theType;        answer=method;        closestDist=-1;      } else {        if (closestDist == -1)         closestDist=closestClass.getSuperClassDistance();        int newDist=theType.getSuperClassDistance();        if (newDist < closestDist) {          closestDist=newDist;          closestVargsClass=null;          closestClass=theType;          answer=method;        }      }    }  }  return answer;}  }
class C{  public synchronized void removeSeries(XYSeries series){  mSeries.remove(series);}  }
